;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (f2777@read-annotated f2779@annotation-stripped f277b@annotation? f277d@annotation-source f277f@annotation-expression f2781@scm->fasl f2783@fasl-save f2785@fasl-load f2787@serialize-library f2789@load-serialized-library f278b@make-record-printer f278d@compile-core f278f@read-library-source-file f2791@make-parameter f27f9@file-options-spec) (begin (set! f2777@read-annotated read) (set! f2779@annotation-stripped (lambda (f27fa@x) (f277f@annotation-expression f27fa@x))) (set! f277b@annotation? (lambda (f27fc@x) (source-info f27fc@x))) (set! f277d@annotation-source (lambda (f27fe@x) (source-info f27fe@x))) (set! f277f@annotation-expression (lambda (f2800@x) (if (pair? f2800@x) (cons (car f2800@x) (cdr f2800@x)) (display '"line:46\n")))) (set! f2781@scm->fasl (lambda (f2802@filename) (string-append f2802@filename '".mosh-fasl"))) (set! f2783@fasl-save (lambda (f2804@filename f2805@obj) (call-with-port (open-file-output-port f2804@filename) (lambda (f2808@port) ((symbol-value 'fasl-write!) f2805@obj f2808@port))))) (set! f2785@fasl-load (lambda (f280a@filename) (call-with-port (open-file-input-port f280a@filename) (symbol-value 'fasl-read!)))) (set! f2787@serialize-library (lambda (f280c@filename f280d@obj) (begin (format '#t '"serialize-library ~a\n..." f280c@filename) ((lambda (f2810@expanded2core) ((lambda (f2812@compile) ((lambda (f2814@code) ((lambda (f2816@pivot) ((lambda (f2818@visit) ((lambda () (begin (set-car! f2816@pivot f2818@visit) ((lambda (f281a@pivot) ((lambda (f281c@invoke) ((lambda () (set-car! f281a@pivot f281c@invoke)))) (f2812@compile (f2810@expanded2core (car f281a@pivot))))) (cdr f2816@pivot)))))) (f2812@compile (f2810@expanded2core (car f2816@pivot))))) (cddddr (cddddr f2814@code)))) f280d@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (f281e@fasl-file) (begin (if (file-exists? f281e@fasl-file) (delete-file f281e@fasl-file) (void)) ((call/cc (lambda (f2822@f2820) (lambda () (with-exception-handler (lambda (f2824@c) ((call/cc (lambda (f2826@f2821) (f2822@f2820 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " f280c@filename) (if (file-exists? f281e@fasl-file) (delete-file f281e@fasl-file) (void)) '#f) (f2826@f2821 (lambda () (raise-continuable f2824@c)))))))))) (lambda () (begin (f2783@fasl-save f281e@fasl-file f280d@obj) (display '"OK\n")))))))))) (f2781@scm->fasl f280c@filename))))) (set! f2789@load-serialized-library (lambda (f2828@filename f2829@obj) ((lambda (f282c@fasl-file) (if (and (file-exists? f282c@fasl-file) ((symbol-value 'file-newer?) f282c@fasl-file f2828@filename)) ((lambda (f282e@expanded2core) ((lambda (f2830@eval-compiled-core) ((lambda (f2832@code) ((lambda (f2834@pivot) ((lambda (f2836@visit) ((lambda (f2838@visit-proc) ((lambda () (begin (set-car! f2834@pivot f2838@visit-proc) ((lambda (f283a@pivot) ((lambda (f283c@invoke) ((lambda () (begin (set-car! f283a@pivot (lambda () (f2830@eval-compiled-core f283c@invoke))) (apply f2829@obj f2832@code))))) (car f283a@pivot))) (cdr f2834@pivot)) '#t)))) (lambda () (f2830@eval-compiled-core f2836@visit)))) (car f2834@pivot))) (cddddr (cddddr f2832@code)))) (f2785@fasl-load f282c@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (f2781@scm->fasl f2828@filename)))) (set! f278b@make-record-printer (lambda (f283e@name f283f@printer) (lambda f2842@x (begin (display '"record printer") (for-each display f2842@x))))) (set! f278d@compile-core (lambda f2844@x (apply error 'comile-core '"not implementated" f2844@x))) (set! f278f@read-library-source-file (lambda (f2846@file-name) (with-input-from-file f2846@file-name f2777@read-annotated))) (set! f2791@make-parameter (lambda f2856 ((lambda (f2857) (if (= f2857 '1) (apply (lambda (f2848@x) (f2791@make-parameter f2848@x (lambda (f284a@x) f284a@x))) f2856) (if (= f2857 '2) (apply (lambda (f284c@x f284d@fender) ((lambda (f2850@x) (lambda f2854 ((lambda (f2855) (if (= f2855 '0) (apply (lambda () f2850@x) f2854) (if (= f2855 '1) (apply (lambda (f2852@v) (set! f2850@x (f284d@fender f2852@v))) f2854) (error 'apply '"invalid arg count")))) (length f2854)))) (f284d@fender f284c@x))) f2856) (error 'apply '"invalid arg count")))) (length f2856)))) (set! f27f9@file-options-spec (lambda (f2858@x) f2858@x)) (begin (set! f2868@f27f9@file-options-spec f27f9@file-options-spec) (set! f2867@f2791@make-parameter f2791@make-parameter) (set! f2866@f278f@read-library-source-file f278f@read-library-source-file) (set! f2865@f278d@compile-core f278d@compile-core) (set! f2864@f278b@make-record-printer f278b@make-record-printer) (set! f2863@f2789@load-serialized-library f2789@load-serialized-library) (set! f2862@f2787@serialize-library f2787@serialize-library) (set! f2861@f2785@fasl-load f2785@fasl-load) (set! f2860@f2783@fasl-save f2783@fasl-save) (set! f285f@f2781@scm->fasl f2781@scm->fasl) (set! f285e@f277f@annotation-expression f277f@annotation-expression) (set! f285d@f277d@annotation-source f277d@annotation-source) (set! f285c@f277b@annotation? f277b@annotation?) (set! f285b@f2779@annotation-stripped f2779@annotation-stripped) (set! f285a@f2777@read-annotated f2777@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (f286d@current-primitive-locations f286f@mutable? f2871@rewriter f2873@expanded->core f2875@compile-core-expr f2877@pretty-print f2879@compile-core-expr-to-port) (begin (set! f286d@current-primitive-locations (f2867@f2791@make-parameter (lambda (f287a@x) '#f) (lambda (f287c@p) f287c@p))) (set! f286f@mutable? (lambda (f287e@x) (or (pair? f287e@x) (vector? f287e@x) (hashtable? f287e@x)))) (set! f2871@rewriter (lambda (f2880@quote-hack?) ((lambda (f2883@f) (begin (set! f2883@f (lambda (f2884@x) (if (pair? f2884@x) ((lambda (f2886@t) (if (memv f2886@t '(quote)) (if (and f2880@quote-hack? (f286f@mutable? (cadr f2884@x))) ((lambda (f2888@g) (begin (set-symbol-value! f2888@g (cadr f2884@x)) f2888@g)) (gensym)) f2884@x) (if (memv f2886@t '(case-lambda)) (cons 'case-lambda (map (lambda (f288a@x) (cons (car f288a@x) (map f2883@f (cdr f288a@x)))) (cdr f2884@x))) (if (memv f2886@t '(lambda)) (cons* 'lambda (cadr f2884@x) (map f2883@f (cddr f2884@x))) (if (memv f2886@t '(letrec)) ((lambda (f288c@bindings f288d@body*) ((lambda (f2890@lhs* f2891@rhs*) (cons* 'letrec (map list f2890@lhs* (map f2883@f f2891@rhs*)) (map f2883@f f288d@body*))) (map car f288c@bindings) (map cadr f288c@bindings))) (cadr f2884@x) (cddr f2884@x)) (if (memv f2886@t '(letrec*)) ((lambda (f2894@bindings f2895@body*) ((lambda (f2898@lhs* f2899@rhs*) (cons* 'letrec* (map list f2898@lhs* (map f2883@f f2899@rhs*)) (map f2883@f f2895@body*))) (map car f2894@bindings) (map cadr f2894@bindings))) (cadr f2884@x) (cddr f2884@x)) (if (memv f2886@t '(library-letrec*)) ((lambda (f289c@name f289d@x) ((lambda (f28a0@bindings f28a1@body*) ((lambda (f28a4@lhs* f28a5@lhs** f28a6@rhs*) (cons* 'library-letrec* f289c@name (map list f28a4@lhs* f28a5@lhs** (map f2883@f f28a6@rhs*)) (map f2883@f f28a1@body*))) (map car f28a0@bindings) (map cadr f28a0@bindings) (map caddr f28a0@bindings))) (cadr f289d@x) (cddr f289d@x))) (cadr f2884@x) (cdr f2884@x)) (if (memv f2886@t '(begin)) (cons 'begin (map f2883@f (cdr f2884@x))) (if (memv f2886@t '(set!)) (list 'set! (cadr f2884@x) (f2883@f (caddr f2884@x))) (if (memv f2886@t '(primitive)) ((lambda (f28aa@op) ((lambda (f28ac@t) (if f28ac@t ((lambda (f28ae@loc) f28ae@loc) f28ac@t) f28aa@op)) ((f286d@current-primitive-locations) f28aa@op))) (cadr f2884@x)) (if (memv f2886@t '(define)) f2884@x (if (list? f2884@x) (map f2883@f f2884@x) (error 'rewrite '"invalid form ~s ~s" f2884@x (list? f2884@x)))))))))))))) (car f2884@x)) f2884@x))) f2883@f)) '#f))) (set! f2873@expanded->core (lambda (f28b0@x) ((f2871@rewriter '#f) f28b0@x))) (set! f2875@compile-core-expr (lambda (f28b2@x) ((f2871@rewriter '#f) f28b2@x))) (set! f2877@pretty-print write) (set! f2879@compile-core-expr-to-port (lambda (f28b4@x f28b5@p) (f2877@pretty-print ((f2871@rewriter '#f) f28b4@x) f28b5@p))) (begin (set! f28be@f2879@compile-core-expr-to-port f2879@compile-core-expr-to-port) (set! f28bd@f2877@pretty-print f2877@pretty-print) (set! f28bc@f2875@compile-core-expr f2875@compile-core-expr) (set! f28bb@f2873@expanded->core f2873@expanded->core) (set! f28ba@f2871@rewriter f2871@rewriter) (set! f28b9@f286f@mutable? f286f@mutable?) (set! f28b8@f286d@current-primitive-locations f286d@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (f290d@make-collection f290f@current-library-collection f2915@f2910 f2917@f2912 f2919@f2911 f291c@library? f291e@make-library f2920@library-id f2922@library-name f2924@library-version f2926@library-imp* f2928@library-vis* f292a@library-inv* f292c@library-subst f292e@library-env f2930@library-visit-state f2932@library-invoke-state f2934@library-visit-code f2936@library-invoke-code f2938@library-visible? f293a@library-source-file-name f293c@set-library-id! f293e@set-library-name! f2940@set-library-version! f2942@set-library-imp*! f2944@set-library-vis*! f2946@set-library-inv*! f2948@set-library-subst! f294a@set-library-env! f294c@set-library-visit-state! f294e@set-library-invoke-state! f2950@set-library-visit-code! f2952@set-library-invoke-code! f2954@set-library-visible?! f2956@set-library-source-file-name! f2958@rp f295a@find-dependencies f295c@find-library-by f295e@library-path f2960@library-extensions f2962@library-name->file-name f2964@file-locator f2966@serialize-all f2968@current-precompiled-library-loader f296a@try-load-from-file f296c@library-loader f296e@current-library-expander f2970@external-pending-libraries f2972@find-external-library f2974@find-library-by-name f2976@library-exists? f2978@find-library-by-spec/die f297a@label->binding-table f297c@install-library-record f297e@install-library f2980@imported-label->binding f2982@invoke-library f2984@visit-library f2986@invoke-library-by-spec f2988@installed-libraries f298a@library-spec) (begin (set! f290d@make-collection (lambda () ((lambda (f298b@set) ((lambda (f298e@set-cons) (begin (set! f298e@set-cons (lambda (f2993@x f2994@ls) (if (memq f2993@x f2994@ls) f2994@ls (cons f2993@x f2994@ls)))) (lambda f2991 ((lambda (f2992) (if (= f2992 '0) (apply (lambda () f298b@set) f2991) (if (= f2992 '1) (apply (lambda (f298f@x) (set! f298b@set (f298e@set-cons f298f@x f298b@set))) f2991) (error 'apply '"invalid arg count")))) (length f2991))))) '#f)) '()))) (set! f290f@current-library-collection (f2867@f2791@make-parameter (f290d@make-collection) (lambda (f2997@x) (begin (if (not (procedure? f2997@x)) (assertion-violation 'current-library-collection '"not a procedure" f2997@x) (void)) f2997@x)))) (set! f2915@f2910 (make-record-type-descriptor 'library '#f 'f2913 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! f2917@f2912 '#f) (set! f2919@f2911 (make-record-constructor-descriptor f2915@f2910 '#f f2917@f2912)) (set! f291c@library? (record-predicate f2915@f2910)) (set! f291e@make-library (record-constructor f2919@f2911)) (set! f2920@library-id (record-accessor f2915@f2910 '0)) (set! f2922@library-name (record-accessor f2915@f2910 '1)) (set! f2924@library-version (record-accessor f2915@f2910 '2)) (set! f2926@library-imp* (record-accessor f2915@f2910 '3)) (set! f2928@library-vis* (record-accessor f2915@f2910 '4)) (set! f292a@library-inv* (record-accessor f2915@f2910 '5)) (set! f292c@library-subst (record-accessor f2915@f2910 '6)) (set! f292e@library-env (record-accessor f2915@f2910 '7)) (set! f2930@library-visit-state (record-accessor f2915@f2910 '8)) (set! f2932@library-invoke-state (record-accessor f2915@f2910 '9)) (set! f2934@library-visit-code (record-accessor f2915@f2910 '10)) (set! f2936@library-invoke-code (record-accessor f2915@f2910 '11)) (set! f2938@library-visible? (record-accessor f2915@f2910 '12)) (set! f293a@library-source-file-name (record-accessor f2915@f2910 '13)) (set! f293c@set-library-id! (record-mutator f2915@f2910 '0)) (set! f293e@set-library-name! (record-mutator f2915@f2910 '1)) (set! f2940@set-library-version! (record-mutator f2915@f2910 '2)) (set! f2942@set-library-imp*! (record-mutator f2915@f2910 '3)) (set! f2944@set-library-vis*! (record-mutator f2915@f2910 '4)) (set! f2946@set-library-inv*! (record-mutator f2915@f2910 '5)) (set! f2948@set-library-subst! (record-mutator f2915@f2910 '6)) (set! f294a@set-library-env! (record-mutator f2915@f2910 '7)) (set! f294c@set-library-visit-state! (record-mutator f2915@f2910 '8)) (set! f294e@set-library-invoke-state! (record-mutator f2915@f2910 '9)) (set! f2950@set-library-visit-code! (record-mutator f2915@f2910 '10)) (set! f2952@set-library-invoke-code! (record-mutator f2915@f2910 '11)) (set! f2954@set-library-visible?! (record-mutator f2915@f2910 '12)) (set! f2956@set-library-source-file-name! (record-mutator f2915@f2910 '13)) (set! f2958@rp (f2864@f278b@make-record-printer 'library (lambda (f2999@x f299a@p f299b@wr) (begin (if (not (f291c@library? f2999@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (f2924@library-version f2999@x)) (f2922@library-name f2999@x) (append (f2922@library-name f2999@x) (list (f2924@library-version f2999@x))))) f299a@p))))) (set! f295a@find-dependencies (lambda (f299f@ls) (if (null? f299f@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! f295c@find-library-by (lambda (f29a1@pred) ((letrec ((f29a3@f (lambda (f29a5@ls) (if (null? f29a5@ls) '#f (if (f29a1@pred (car f29a5@ls)) (car f29a5@ls) (f29a3@f (cdr f29a5@ls))))))) f29a3@f) ((f290f@current-library-collection))))) (set! f295e@library-path (f2867@f2791@make-parameter '(".") (lambda (f29a7@x) (if (and (list? f29a7@x) (for-all string? f29a7@x)) (map (lambda (f29a9@x) f29a9@x) f29a7@x) (assertion-violation 'library-path '"not a list of strings" f29a7@x))))) (set! f2960@library-extensions (f2867@f2791@make-parameter '(".sls" ".ss" ".scm") (lambda (f29ab@x) (if (and (list? f29ab@x) (for-all string? f29ab@x)) (map (lambda (f29ad@x) f29ad@x) f29ab@x) (assertion-violation 'library-extensions '"not a list of strings" f29ab@x))))) (set! f2962@library-name->file-name (lambda (f29af@x) (call-with-values (lambda () (open-string-output-port)) (lambda (f29b5@f29b2 f29b6@f29b4) ((lambda (f29b9@extract f29ba@p) ((lambda (f29be@display-hex) (begin (set! f29be@display-hex (lambda (f29c7@n) (if (<= '0 f29c7@n '9) (display f29c7@n f29ba@p) (display (integer->char (+ (char->integer '#\a) (- f29c7@n '10))) f29ba@p)))) (begin ((letrec ((f29bf@f (lambda (f29c1@ls) (if (not (null? f29c1@ls)) (begin (display '"/" f29ba@p) (for-each (lambda (f29c3@c) (if (or (char<=? '#\a f29c3@c '#\z) (char<=? '#\A f29c3@c '#\Z) (char<=? '#\0 f29c3@c '#\9) (memv f29c3@c '(#\- #\. #\_ #\~))) (display f29c3@c f29ba@p) (begin (display '"%" f29ba@p) ((lambda (f29c5@n) (begin (f29be@display-hex (quotient f29c5@n '16)) (f29be@display-hex (remainder f29c5@n '16)))) (char->integer f29c3@c))))) (string->list (symbol->string (car f29c1@ls)))) (f29bf@f (cdr f29c1@ls))) (void))))) f29bf@f) f29af@x) (f29b9@extract)))) '#f)) f29b6@f29b4 f29b5@f29b2))))) (set! f2964@file-locator (f2867@f2791@make-parameter (lambda (f29c9@x) ((lambda (f29cb@str) ((letrec ((f29cd@f (lambda (f29cf@ls f29d0@exts f29d1@failed-list) (if (null? f29cf@ls) ((lambda () ((lambda (f29dd@f29d8 f29df@f29da f29e1@f29d9 f29e4@f29d7 f29e6@make-library-resolution-condition f29e8@f29d5 f29ea@f29d6 f29ec@library-resolution-condition? f29ee@condition-library f29f0@condition-files) (begin (set! f29dd@f29d8 (make-record-type-descriptor '&library-resolution f4c7e@f49c5@&condition-rtd 'f29db '#f '#f '#((immutable library) (immutable files)))) (set! f29df@f29da '#f) (set! f29e1@f29d9 (make-record-constructor-descriptor f29dd@f29d8 f4c7f@f49c7@&condition-rcd f29df@f29da)) (set! f29e4@f29d7 (record-predicate f29dd@f29d8)) (set! f29e6@make-library-resolution-condition (record-constructor f29e1@f29d9)) (set! f29e8@f29d5 (record-accessor f29dd@f29d8 '0)) (set! f29ea@f29d6 (record-accessor f29dd@f29d8 '1)) (set! f29ec@library-resolution-condition? (condition-predicate f29dd@f29d8)) (set! f29ee@condition-library (condition-accessor f29dd@f29d8 f29e8@f29d5)) (set! f29f0@condition-files (condition-accessor f29dd@f29d8 f29ea@f29d6)) (raise (condition (f4c9e@f4a5f@make-error) (f4cc0@f4abb@make-who-condition 'expander) (f4c84@f4a1c@make-message-condition '"cannot locate library in library-path") (f29e6@make-library-resolution-condition f29c9@x (reverse f29d1@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? f29d0@exts) (f29cd@f (cdr f29cf@ls) (f2960@library-extensions) f29d1@failed-list) ((lambda (f29f1@name) (if (file-exists? f29f1@name) f29f1@name (f29cd@f f29cf@ls (cdr f29d0@exts) (cons f29f1@name f29d1@failed-list)))) (string-append (car f29cf@ls) f29cb@str (car f29d0@exts)))))))) f29cd@f) (f295e@library-path) (f2960@library-extensions) '())) (f2962@library-name->file-name f29c9@x))) (lambda (f29f3@f) (if (procedure? f29f3@f) f29f3@f (assertion-violation 'file-locator '"not a procedure" f29f3@f))))) (set! f2966@serialize-all (lambda (f29f5@serialize f29f6@compile) ((lambda (f29fa@library-desc) (begin (set! f29fa@library-desc (lambda (f29fd@x) (list (f2920@library-id f29fd@x) (f2922@library-name f29fd@x)))) (for-each (lambda (f29fb@x) (if (f293a@library-source-file-name f29fb@x) (f29f5@serialize (f293a@library-source-file-name f29fb@x) (list (f2920@library-id f29fb@x) (f2922@library-name f29fb@x) (f2924@library-version f29fb@x) (map f29fa@library-desc (f2926@library-imp* f29fb@x)) (map f29fa@library-desc (f2928@library-vis* f29fb@x)) (map f29fa@library-desc (f292a@library-inv* f29fb@x)) (f292c@library-subst f29fb@x) (f292e@library-env f29fb@x) (f29f6@compile (f2934@library-visit-code f29fb@x)) (f29f6@compile (f2936@library-invoke-code f29fb@x)) (f2938@library-visible? f29fb@x))) (void))) ((f290f@current-library-collection))))) '#f))) (set! f2968@current-precompiled-library-loader (f2867@f2791@make-parameter (lambda (f29ff@filename f2a00@sk) '#f))) (set! f296a@try-load-from-file (lambda (f2a03@filename) ((f2968@current-precompiled-library-loader) f2a03@filename (lambda f2a29 ((lambda (f2a2a) (if (= f2a2a '11) (apply (lambda (f2a05@id f2a06@name f2a07@ver f2a08@imp* f2a09@vis* f2a0a@inv* f2a0b@exp-subst f2a0c@exp-env f2a0d@visit-proc f2a0e@invoke-proc f2a0f@visible?) ((letrec ((f2a1b@f (lambda (f2a1d@deps) (if (null? f2a1d@deps) (begin (f297e@install-library f2a05@id f2a06@name f2a07@ver f2a08@imp* f2a09@vis* f2a0a@inv* f2a0b@exp-subst f2a0c@exp-env f2a0d@visit-proc f2a0e@invoke-proc '#f '#f f2a0f@visible? '#f) '#t) ((lambda (f2a1f@d) ((lambda (f2a21@label f2a22@dname) ((lambda (f2a25@l) (if (and (f291c@library? f2a25@l) (eq? f2a21@label (f2920@library-id f2a25@l))) (f2a1b@f (cdr f2a1d@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" f2a06@name f2a22@dname f2a03@filename f2a25@l f2a21@label (f2920@library-id f2a25@l)) '#f))) (f2974@find-library-by-name f2a22@dname))) (car f2a1f@d) (cadr f2a1f@d))) (car f2a1d@deps)))))) f2a1b@f) (append f2a08@imp* f2a09@vis* f2a0a@inv*))) f2a29) (if (>= f2a2a '0) (apply (lambda f2a27@others '#f) f2a29) (error 'apply '"invalid arg count")))) (length f2a29)))))) (set! f296c@library-loader (f2867@f2791@make-parameter (lambda (f2a2b@x) ((lambda (f2a2d@file-name) (if (not f2a2d@file-name) (assertion-violation '#f '"cannot file library" f2a2b@x) (or (f296a@try-load-from-file f2a2d@file-name) ((f296e@current-library-expander) (f2866@f278f@read-library-source-file f2a2d@file-name) f2a2d@file-name (lambda (f2a2f@name) (if (not (fast-equal? f2a2f@name f2a2b@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (f2a35@f2a32 f2a36@f2a34) ((lambda (f2a39@e f2a3a@p) (begin (display '"expected to find library " f2a3a@p) (write f2a2b@x f2a3a@p) (display '" in file " f2a3a@p) (display f2a2d@file-name f2a3a@p) (display '", found " f2a3a@p) (write f2a2f@name f2a3a@p) (display '" instead" f2a3a@p) (f2a39@e))) f2a36@f2a34 f2a35@f2a32)))) (void))))))) ((f2964@file-locator) f2a2b@x))) (lambda (f2a3d@f) (if (procedure? f2a3d@f) f2a3d@f (assertion-violation 'library-locator '"not a procedure" f2a3d@f))))) (set! f296e@current-library-expander (f2867@f2791@make-parameter (lambda (f2a3f@x) (assertion-violation 'library-expander '"not initialized")) (lambda (f2a41@f) (if (procedure? f2a41@f) f2a41@f (assertion-violation 'library-expander '"not a procedure" f2a41@f))))) (set! f2970@external-pending-libraries (f2867@f2791@make-parameter '())) (set! f2972@find-external-library (lambda (f2a43@name) (begin (if (member f2a43@name (f2970@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" f2a43@name) (void)) ((lambda (f2a49@f2a46 f2a4a@f2a48) ((lambda (f2a4d@swap) (dynamic-wind f2a4d@swap (lambda () (begin ((f296c@library-loader) f2a43@name) (or (f295c@find-library-by (lambda (f2a4f@x) (fast-equal? (f2922@library-name f2a4f@x) f2a43@name))) (assertion-violation '#f '"handling external library did not yield the correct library" f2a43@name)))) f2a4d@swap)) (lambda () ((lambda (f2a51@t) (begin (f2a49@f2a46 f2a4a@f2a48) (set! f2a4a@f2a48 f2a51@t))) (f2a49@f2a46))))) f2970@external-pending-libraries (cons f2a43@name (f2970@external-pending-libraries)))))) (set! f2974@find-library-by-name (lambda (f2a53@name) (or (f295c@find-library-by (lambda (f2a55@x) (fast-equal? (f2922@library-name f2a55@x) f2a53@name))) (f2972@find-external-library f2a53@name)))) (set! f2976@library-exists? (lambda (f2a57@name) (and (f295c@find-library-by (lambda (f2a59@x) (fast-equal? (f2922@library-name f2a59@x) f2a57@name))) '#t))) (set! f2978@find-library-by-spec/die (lambda (f2a5b@spec) ((lambda (f2a5d@id) (or (f295c@find-library-by (lambda (f2a5f@x) (eq? f2a5d@id (f2920@library-id f2a5f@x)))) (assertion-violation '#f '"cannot find library with required spec" f2a5b@spec))) (car f2a5b@spec)))) (set! f297a@label->binding-table (make-eq-hashtable)) (set! f297c@install-library-record (lambda (f2a61@lib) (begin ((lambda (f2a63@exp-env) (for-each (lambda (f2a65@x) ((lambda (f2a67@label f2a68@binding) ((lambda (f2a6b@binding) (begin (if (hashtable-ref f297a@label->binding-table f2a67@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" f2a67@label (hashtable-ref f297a@label->binding-table f2a67@label '#f) f2a6b@binding) (exit)) (void)) (hashtable-set! f297a@label->binding-table f2a67@label f2a6b@binding))) ((lambda (f2a6d@t) (if (memv f2a6d@t '(global)) (cons 'global (cons f2a61@lib (cdr f2a68@binding))) (if (memv f2a6d@t '(global-macro)) (cons 'global-macro (cons f2a61@lib (cdr f2a68@binding))) (if (memv f2a6d@t '(global-macro!)) (cons 'global-macro! (cons f2a61@lib (cdr f2a68@binding))) f2a68@binding)))) (car f2a68@binding)))) (car f2a65@x) (cdr f2a65@x))) f2a63@exp-env)) (f292e@library-env f2a61@lib)) ((f290f@current-library-collection) f2a61@lib)))) (set! f297e@install-library (lambda (f2a6f@id f2a70@name f2a71@ver f2a72@imp* f2a73@vis* f2a74@inv* f2a75@exp-subst f2a76@exp-env f2a77@visit-proc f2a78@invoke-proc f2a79@visit-code f2a7a@invoke-code f2a7b@visible? f2a7c@source-file-name) ((lambda (f2a8b@imp-lib* f2a8c@vis-lib* f2a8d@inv-lib*) (begin (if (not (and (symbol? f2a6f@id) (list? f2a70@name) (list? f2a71@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" f2a6f@id f2a70@name f2a71@ver) (void)) (if (f2976@library-exists? f2a70@name) (assertion-violation 'install-library '"library is already installed" f2a70@name) (void)) ((lambda (f2a91@lib) (f297c@install-library-record f2a91@lib)) (f291e@make-library f2a6f@id f2a70@name f2a71@ver f2a8b@imp-lib* f2a8c@vis-lib* f2a8d@inv-lib* f2a75@exp-subst f2a76@exp-env f2a77@visit-proc f2a78@invoke-proc f2a79@visit-code f2a7a@invoke-code f2a7b@visible? f2a7c@source-file-name)))) (map f2978@find-library-by-spec/die f2a72@imp*) (map f2978@find-library-by-spec/die f2a73@vis*) (map f2978@find-library-by-spec/die f2a74@inv*)))) (set! f2980@imported-label->binding (lambda (f2a93@lab) (hashtable-ref f297a@label->binding-table f2a93@lab '#f))) (set! f2982@invoke-library (lambda (f2a95@lib) ((lambda (f2a97@invoke) (if (procedure? f2a97@invoke) (begin (f294e@set-library-invoke-state! f2a95@lib (lambda () (assertion-violation 'invoke '"circularity detected" f2a95@lib))) (for-each f2982@invoke-library (f292a@library-inv* f2a95@lib)) (f294e@set-library-invoke-state! f2a95@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" f2a95@lib))) (f2a97@invoke) (f294e@set-library-invoke-state! f2a95@lib '#t)) (void))) (f2932@library-invoke-state f2a95@lib)))) (set! f2984@visit-library (lambda (f2a99@lib) ((lambda (f2a9b@visit) (if (procedure? f2a9b@visit) (begin (f294c@set-library-visit-state! f2a99@lib (lambda () (assertion-violation 'visit '"circularity detected" f2a99@lib))) (for-each f2982@invoke-library (f2928@library-vis* f2a99@lib)) (f294c@set-library-visit-state! f2a99@lib (lambda () (assertion-violation 'invoke '"first visit did not return" f2a99@lib))) (f2a9b@visit) (f294c@set-library-visit-state! f2a99@lib '#t)) (void))) (f2930@library-visit-state f2a99@lib)))) (set! f2986@invoke-library-by-spec (lambda (f2a9d@spec) (f2982@invoke-library (f2978@find-library-by-spec/die f2a9d@spec)))) (set! f2988@installed-libraries (lambda f2aa5 ((lambda (f2aa6) (if (= f2aa6 '1) (apply (lambda (f2a9f@all?) ((letrec ((f2aa1@f (lambda (f2aa3@ls) (if (null? f2aa3@ls) '() (if (or f2a9f@all? (f2938@library-visible? (car f2aa3@ls))) (cons (car f2aa3@ls) (f2aa1@f (cdr f2aa3@ls))) (f2aa1@f (cdr f2aa3@ls))))))) f2aa1@f) ((f290f@current-library-collection)))) f2aa5) (if (= f2aa6 '0) (apply (lambda () (f2988@installed-libraries '#f)) f2aa5) (error 'apply '"invalid arg count")))) (length f2aa5)))) (set! f298a@library-spec (lambda (f2aa7@x) (begin (if (not (f291c@library? f2aa7@x)) (assertion-violation 'library-spec '"not a library" f2aa7@x) (void)) (list (f2920@library-id f2aa7@x) (f2922@library-name f2aa7@x) (f2924@library-version f2aa7@x))))) (begin (set! f2ae5@f298a@library-spec f298a@library-spec) (set! f2ae4@f2988@installed-libraries f2988@installed-libraries) (set! f2ae3@f2986@invoke-library-by-spec f2986@invoke-library-by-spec) (set! f2ae2@f2984@visit-library f2984@visit-library) (set! f2ae1@f2982@invoke-library f2982@invoke-library) (set! f2ae0@f2980@imported-label->binding f2980@imported-label->binding) (set! f2adf@f297e@install-library f297e@install-library) (set! f2ade@f297c@install-library-record f297c@install-library-record) (set! f2add@f297a@label->binding-table f297a@label->binding-table) (set! f2adc@f2978@find-library-by-spec/die f2978@find-library-by-spec/die) (set! f2adb@f2976@library-exists? f2976@library-exists?) (set! f2ada@f2974@find-library-by-name f2974@find-library-by-name) (set! f2ad9@f2972@find-external-library f2972@find-external-library) (set! f2ad8@f2970@external-pending-libraries f2970@external-pending-libraries) (set! f2ad7@f296e@current-library-expander f296e@current-library-expander) (set! f2ad6@f296c@library-loader f296c@library-loader) (set! f2ad5@f296a@try-load-from-file f296a@try-load-from-file) (set! f2ad4@f2968@current-precompiled-library-loader f2968@current-precompiled-library-loader) (set! f2ad3@f2966@serialize-all f2966@serialize-all) (set! f2ad2@f2964@file-locator f2964@file-locator) (set! f2ad1@f2962@library-name->file-name f2962@library-name->file-name) (set! f2ad0@f2960@library-extensions f2960@library-extensions) (set! f2acf@f295e@library-path f295e@library-path) (set! f2ace@f295c@find-library-by f295c@find-library-by) (set! f2acd@f295a@find-dependencies f295a@find-dependencies) (set! f2acc@f2958@rp f2958@rp) (set! f2acb@f2956@set-library-source-file-name! f2956@set-library-source-file-name!) (set! f2aca@f2954@set-library-visible?! f2954@set-library-visible?!) (set! f2ac9@f2952@set-library-invoke-code! f2952@set-library-invoke-code!) (set! f2ac8@f2950@set-library-visit-code! f2950@set-library-visit-code!) (set! f2ac7@f294e@set-library-invoke-state! f294e@set-library-invoke-state!) (set! f2ac6@f294c@set-library-visit-state! f294c@set-library-visit-state!) (set! f2ac5@f294a@set-library-env! f294a@set-library-env!) (set! f2ac4@f2948@set-library-subst! f2948@set-library-subst!) (set! f2ac3@f2946@set-library-inv*! f2946@set-library-inv*!) (set! f2ac2@f2944@set-library-vis*! f2944@set-library-vis*!) (set! f2ac1@f2942@set-library-imp*! f2942@set-library-imp*!) (set! f2ac0@f2940@set-library-version! f2940@set-library-version!) (set! f2abf@f293e@set-library-name! f293e@set-library-name!) (set! f2abe@f293c@set-library-id! f293c@set-library-id!) (set! f2abd@f293a@library-source-file-name f293a@library-source-file-name) (set! f2abc@f2938@library-visible? f2938@library-visible?) (set! f2abb@f2936@library-invoke-code f2936@library-invoke-code) (set! f2aba@f2934@library-visit-code f2934@library-visit-code) (set! f2ab9@f2932@library-invoke-state f2932@library-invoke-state) (set! f2ab8@f2930@library-visit-state f2930@library-visit-state) (set! f2ab7@f292e@library-env f292e@library-env) (set! f2ab6@f292c@library-subst f292c@library-subst) (set! f2ab5@f292a@library-inv* f292a@library-inv*) (set! f2ab4@f2928@library-vis* f2928@library-vis*) (set! f2ab3@f2926@library-imp* f2926@library-imp*) (set! f2ab2@f2924@library-version f2924@library-version) (set! f2ab1@f2922@library-name f2922@library-name) (set! f2ab0@f2920@library-id f2920@library-id) (set! f2aaf@f291e@make-library f291e@make-library) (set! f2aae@f291c@library? f291c@library?) (set! f2aad@f2919@f2911 f2919@f2911) (set! f2aac@f2917@f2912 f2917@f2912) (set! f2aab@f2915@f2910 f2915@f2910) (set! f2aaa@f290f@current-library-collection f290f@current-library-collection) (set! f2aa9@f290d@make-collection f290d@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (f2ae8@build-global-define f2b59@build-lambda f2b5b@build-case-lambda f2b5d@build-let f2b8b@build-sequence f2b8d@build-void f2b8f@build-letrec f2b91@build-letrec* f2b93@build-library-letrec* f2b95@build-receive) (begin (set! f2ae8@build-global-define (lambda (f2b96@x) (f2b8d@build-void))) (set! f2b59@build-lambda (lambda (f2b98@ae f2b99@vars f2b9a@exp) (list 'lambda f2b99@vars f2b9a@exp))) (set! f2b5b@build-case-lambda (lambda (f2b9e@ae f2b9f@vars* f2ba0@exp*) ((lambda (f2ba5@build-error f2ba7@build-pred f2ba9@build-apply f2bab@expand-case-lambda) (begin (set! f2ba5@build-error (lambda (f2bdc@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! f2ba7@build-pred (lambda (f2bc4@ae f2bc5@n f2bc6@vars) (call-with-values (lambda () ((letrec ((f2bce@f (lambda (f2bd0@vars f2bd1@count) (if (pair? f2bd0@vars) (f2bce@f (cdr f2bd0@vars) (+ f2bd1@count '1)) (if (null? f2bd0@vars) (values f2bd1@count '=) (values f2bd1@count '>=)))))) f2bce@f) f2bc6@vars '0)) (lambda (f2bd4@f2bcb f2bd5@f2bcd) ((lambda (f2bd8@pred f2bd9@count) (list (list 'primitive f2bd8@pred) f2bc5@n (list 'quote f2bd9@count))) f2bd5@f2bcd f2bd4@f2bcb))))) (set! f2ba9@build-apply (lambda (f2bbc@ae f2bbd@g f2bbe@vars f2bbf@exp) (list '(primitive apply) (f2b59@build-lambda f2bbc@ae f2bbe@vars f2bbf@exp) f2bbd@g))) (set! f2bab@expand-case-lambda (lambda (f2bac@ae f2bad@vars f2bae@exp*) ((lambda (f2bb2@g f2bb3@n) (list 'lambda f2bb2@g (f2b5d@build-let f2bac@ae (list f2bb3@n) (list (list '(primitive length) f2bb2@g)) ((letrec ((f2bb6@f (lambda (f2bb8@vars* f2bb9@exp*) (if (null? f2bb8@vars*) (f2ba5@build-error f2bac@ae) (list 'if (f2ba7@build-pred f2bac@ae f2bb3@n (car f2bb8@vars*)) (f2ba9@build-apply f2bac@ae f2bb2@g (car f2bb8@vars*) (car f2bb9@exp*)) (f2bb6@f (cdr f2bb8@vars*) (cdr f2bb9@exp*))))))) f2bb6@f) f2b9f@vars* f2bae@exp*)))) (gensym) (gensym)))) (if (= (length f2ba0@exp*) '1) (f2b59@build-lambda f2b9e@ae (car f2b9f@vars*) (car f2ba0@exp*)) (f2bab@expand-case-lambda f2b9e@ae f2b9f@vars* f2ba0@exp*)))) '#f '#f '#f '#f))) (set! f2b5d@build-let (lambda (f2bde@ae f2bdf@lhs* f2be0@rhs* f2be1@body) (cons (f2b59@build-lambda f2bde@ae f2bdf@lhs* f2be1@body) f2be0@rhs*))) (set! f2b8b@build-sequence (lambda (f2be6@ae f2be7@exps) ((letrec ((f2bea@loop (lambda (f2bec@exps) (if (null? (cdr f2bec@exps)) (car f2bec@exps) (if (equal? (car f2bec@exps) (f2b8d@build-void)) (f2bea@loop (cdr f2bec@exps)) (cons 'begin f2bec@exps)))))) f2bea@loop) f2be7@exps))) (set! f2b8d@build-void (lambda () '((primitive void)))) (set! f2b8f@build-letrec (lambda (f2bee@ae f2bef@vars f2bf0@val-exps f2bf1@body-exp) (if (null? f2bef@vars) f2bf1@body-exp (list 'letrec (map list f2bef@vars f2bf0@val-exps) f2bf1@body-exp)))) (set! f2b91@build-letrec* (lambda (f2bf6@ae f2bf7@vars f2bf8@val-exps f2bf9@body-exp) (if (null? f2bf7@vars) f2bf9@body-exp (f2b5d@build-let f2bf6@ae f2bf7@vars (map (lambda (f2bfe@x) (list 'quote '#f)) f2bf7@vars) (f2b8b@build-sequence f2bf6@ae (append (map (lambda (f2c00@lhs f2c01@rhs) (list 'set! f2c00@lhs f2c01@rhs)) f2bf7@vars f2bf8@val-exps) (list f2bf9@body-exp))))))) (set! f2b93@build-library-letrec* (lambda (f2c04@ae f2c05@name f2c06@vars f2c07@locs f2c08@val-exps f2c09@body-exp) (list 'library-letrec* f2c05@name (map list f2c06@vars f2c07@locs f2c08@val-exps) f2c09@body-exp))) (set! f2b95@build-receive (lambda (f2c10@ae f2c11@vars f2c12@producer f2c13@body*) (begin (display '"************** in ") (cons 'receive (cons f2c11@vars (cons f2c12@producer f2c13@body*)))))) (begin (set! f2c21@f2b95@build-receive f2b95@build-receive) (set! f2c20@f2b93@build-library-letrec* f2b93@build-library-letrec*) (set! f2c1f@f2b91@build-letrec* f2b91@build-letrec*) (set! f2c1e@f2b8f@build-letrec f2b8f@build-letrec) (set! f2c1d@f2b8d@build-void f2b8d@build-void) (set! f2c1c@f2b8b@build-sequence f2b8b@build-sequence) (set! f2c1b@f2b5d@build-let f2b5d@build-let) (set! f2c1a@f2b5b@build-case-lambda f2b5b@build-case-lambda) (set! f2c19@f2b59@build-lambda f2b59@build-lambda) (set! f2c18@f2ae8@build-global-define f2ae8@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (f2c30@file-options-macro f2c32@set-cons f2c34@set-union f2c39@top-mark* f2c3b@top-marked? f2c3d@gen-lexical f2c3f@gen-global f2c41@gen-label f2c43@gen-top-level-label f2c45@gen-define-label+loc f2c47@gen-define-label f2c4d@f2c48 f2c4f@f2c4a f2c51@f2c49 f2c54@rib? f2c56@make-rib f2c58@rib-sym* f2c5a@rib-mark** f2c5c@rib-label* f2c5e@rib-sealed/freq f2c60@rib-cache f2c62@set-rib-sym*! f2c64@set-rib-mark**! f2c66@set-rib-label*! f2c68@set-rib-sealed/freq! f2c6a@set-rib-cache! f2c6c@make-empty-rib f2c6e@extend-rib! f2c70@extend-rib/nc! f2c72@make-rib-map f2c74@seal-rib! f2c76@unseal-rib! f2c78@make-full-rib f2c7e@f2c79 f2c80@f2c7b f2c82@f2c7a f2c85@stx? f2c87@make-stx f2c89@stx-expr f2c8b@stx-mark* f2c8d@stx-subst* f2c8f@stx-ae* f2c91@set-stx-expr! f2c93@set-stx-mark*! f2c95@set-stx-subst*! f2c97@set-stx-ae*! f2c99@rp f2c9b@datum->stx f2c9d@gen-mark f2c9f@anti-mark f2ca1@anti-mark? f2ca3@join-wraps f2ca5@mkstx f2ca7@add-mark f2ca9@add-subst f2cab@syntax-kind? f2cad@syntax-vector->list f2caf@syntax-pair? f2cb1@syntax-vector? f2cb3@syntax-null? f2cb5@syntax-list? f2cb7@syntax-car f2cb9@syntax-cdr f2cbb@syntax->list f2cbd@id? f2cbf@id->sym f2cc1@same-marks? f2cc3@bound-id=? f2cc5@free-id=? f2cc7@valid-bound-ids? f2cc9@distinct-bound-ids? f2ccb@bound-id-member? f2ccd@self-evaluating? f2ccf@strip-annotations f2cd1@strip f2cd3@stx->datum f2cd5@same-marks*? f2cd7@id->label f2cd9@id->real-label f2cdb@label->binding f2cdd@make-binding f2cdf@binding-type f2ce1@binding-value f2ce3@raise-unbound-error f2ce5@syntax-type f2cf3@sanitize-binding f2cf5@make-variable-transformer f2cf7@variable-transformer? f2cf9@variable-transformer-procedure f2cfb@make-eval-transformer f2e4c@parse-define f2e4e@parse-define-syntax f2e50@scheme-stx-hashtable f2e52@scheme-stx f2e54@lexical-var f2e56@lexical-mutable? f2e58@set-lexical-mutable! f2e5a@add-lexical f2e5c@add-lexicals f2e5e@letrec-helper f2e60@letrec-transformer f2e62@letrec*-transformer f2e64@fluid-let-syntax-transformer f2e66@type-descriptor-transformer f2e68@record-type-descriptor-transformer f2e6a@record-constructor-descriptor-transformer f2e6c@when-macro f2e6e@unless-macro f2e70@if-transformer f2e72@and-transformer f2e74@or-transformer f2e76@case-macro f2e78@quote-transformer f2e7a@case-lambda-transformer f2e7c@lambda-transformer f2e7e@bless f2e80@with-syntax-macro f2e82@invalid-fmls-error f2e84@let-macro f2e86@let-values-macro f2e88@let*-values-macro f2e8a@trace-lambda-macro f2e8c@trace-define-macro f2e8e@trace-define-syntax-macro f2e90@trace-let/rec-syntax f2e92@trace-let-syntax-macro f2e94@trace-letrec-syntax-macro f2e96@guard-macro f2e98@define-enumeration-macro f2e9a@time-macro f2e9c@delay-macro f2e9e@assert-macro f2ea0@endianness-macro f2ea2@identifier-syntax-macro f2ea4@do-macro f2ea6@let*-macro f2ea8@or-macro f2eaa@and-macro f2eac@cond-macro f2eae@do-include f2eb0@include-macro f2eb2@include-into-macro f2eb4@syntax-rules-macro f2eb6@quasiquote-macro f2eb8@quasisyntax-macro f2eba@define-struct-macro f2ebc@define-record-type-macro f2ebe@define-condition-type-macro f2ec0@incorrect-usage-macro f2ec2@parameterize-macro f2ec4@foreign-call-transformer f2ec6@convert-pattern f2ec8@syntax-dispatch f2eca@ellipsis? f2ecc@underscore? f2ece@verify-literals f2ed0@syntax-case-transformer f2ed2@ellipsis-map f2ed4@syntax-transformer f2ed6@core-macro-transformer f2ed8@symbol-macro f2eda@macro-transformer f2edc@local-macro-transformer f2ede@do-macro-call f2ee0@chi-macro f2ee2@chi-local-macro f2ee4@chi-global-macro f2ee6@chi-expr* f2ee8@chi-application f2eea@chi-expr f2eec@chi-set! f2eee@verify-formals f2ef0@chi-lambda-clause f2ef2@chi-lambda-clause* f2ef4@chi-defun f2ef6@chi-rhs f2ef8@expand-interaction-rhs*/init* f2efa@chi-rhs* f2efc@find-bound=? f2efe@find-dups f2f00@chi-internal f2f02@parse-module f2f08@f2f03 f2f0a@f2f05 f2f0c@f2f04 f2f0f@module-interface? f2f11@make-module-interface f2f13@module-interface-first-mark f2f15@module-interface-exp-id-vec f2f17@module-interface-exp-lab-vec f2f19@set-module-interface-first-mark! f2f1b@set-module-interface-exp-id-vec! f2f1d@set-module-interface-exp-lab-vec! f2f1f@module-interface-exp-id* f2f21@chi-internal-module f2f23@chi-body* f2f25@expand-transformer f2f27@parse-exports f2f29@parse-library-name f2f2b@parse-library f2f2d@parse-import-spec* f2f2f@make-top-rib f2f31@make-collector f2f33@inv-collector f2f35@vis-collector f2f37@imp-collector f2f39@chi-library-internal f2f3b@chi-interaction-expr f2f3d@library-body-expander f2f3f@core-library-expander f2f41@parse-top-level-program f2f43@top-level-expander f2f49@f2f44 f2f4b@f2f46 f2f4d@f2f45 f2f50@env? f2f52@make-env f2f54@env-names f2f56@env-labels f2f58@env-itc f2f5a@set-env-names! f2f5c@set-env-labels! f2f5e@set-env-itc! f2f60@rp f2f66@f2f61 f2f68@f2f63 f2f6a@f2f62 f2f6d@interaction-env? f2f6f@make-interaction-env f2f71@interaction-env-rib f2f73@interaction-env-r f2f75@interaction-env-locs f2f77@set-interaction-env-rib! f2f79@set-interaction-env-r! f2f7b@set-interaction-env-locs! f2f7d@rp f2f7f@interaction-environment-symbols f2f81@environment-bindings f2f83@parse-binding f2f85@environment? f2f87@environment-symbols f2f89@environment f2f8b@null-environment f2f8d@scheme-report-environment f2f8f@expand f2f91@eval f2f93@library-expander f2f95@boot-library-expand f2f97@rev-map-append f2f99@build-exports f2f9b@make-export-subst f2f9d@make-export-env/macros f2f9f@generate-temporaries f2fa1@free-identifier=? f2fa3@bound-identifier=? f2fa5@make-source-condition f2fa7@extract-position-condition f2fa9@expression-position f2fab@assertion-error f2fad@syntax-error f2faf@syntax-violation* f2fb1@syntax-violation f2fb3@identifier? f2fb5@datum->syntax f2fb7@syntax->datum f2fb9@compile-r6rs-top-level f2fbb@pre-compile-r6rs-top-level f2fbd@interaction-environment f2fbf@top-level-context) (begin (set! f2c30@file-options-macro (lambda (f2fc0@x) ((lambda (f2fc3@valid-option?) (begin (set! f2fc3@valid-option? (lambda (f2fcc@x) (and (f2cbd@id? f2fcc@x) (memq (f2cbf@id->sym f2fcc@x) '(no-fail no-create no-truncate))))) ((lambda (f2fc4@t) ((lambda (f2fc6@ls/false) (if (and f2fc6@ls/false (apply (lambda (f2fc8@opt*) (for-all f2fc3@valid-option? f2fc8@opt*)) f2fc6@ls/false)) (apply (lambda (f2fca@opt*) (f2e7e@bless (list 'make-file-options (list 'quote f2fca@opt*)))) f2fc6@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f2fc4@t))) (f2ec8@syntax-dispatch f2fc4@t '(_ . each-any)))) f2fc0@x))) '#f))) (set! f2c32@set-cons (lambda (f2fce@x f2fcf@ls) (if (memq f2fce@x f2fcf@ls) f2fcf@ls (cons f2fce@x f2fcf@ls)))) (set! f2c34@set-union (lambda (f2fd2@ls1 f2fd3@ls2) (if (null? f2fd2@ls1) f2fd3@ls2 (if (memq (car f2fd2@ls1) f2fd3@ls2) (f2c34@set-union (cdr f2fd2@ls1) f2fd3@ls2) (cons (car f2fd2@ls1) (f2c34@set-union (cdr f2fd2@ls1) f2fd3@ls2)))))) (set! f2c39@top-mark* '(top)) (set! f2c3b@top-marked? (lambda (f2fd6@m*) (memq 'top f2fd6@m*))) (set! f2c3d@gen-lexical (lambda (f2fd8@sym) (if (symbol? f2fd8@sym) (gensym f2fd8@sym) (if (f2c85@stx? f2fd8@sym) (f2c3d@gen-lexical (f2cbf@id->sym f2fd8@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" f2fd8@sym))))) (set! f2c3f@gen-global (lambda (f2fda@x) (f2c3d@gen-lexical f2fda@x))) (set! f2c41@gen-label (lambda (f2fdc@_) (gensym))) (set! f2c43@gen-top-level-label (lambda (f2fde@id f2fdf@rib) ((lambda (f2fe3@find) (begin (set! f2fe3@find (lambda (f2fee@sym f2fef@mark* f2ff0@sym* f2ff1@mark** f2ff2@label*) (and (pair? f2ff0@sym*) (if (and (eq? f2fee@sym (car f2ff0@sym*)) (f2cc1@same-marks? f2fef@mark* (car f2ff1@mark**))) (car f2ff2@label*) (f2fe3@find f2fee@sym f2fef@mark* (cdr f2ff0@sym*) (cdr f2ff1@mark**) (cdr f2ff2@label*)))))) ((lambda (f2fe4@sym f2fe5@mark*) ((lambda (f2fe8@sym*) ((lambda (f2fea@t) (if f2fea@t ((lambda (f2fec@label) (if (f2ae0@f2980@imported-label->binding f2fec@label) (gensym) f2fec@label)) f2fea@t) (gensym))) (and (memq f2fe4@sym (f2c58@rib-sym* f2fdf@rib)) (f2fe3@find f2fe4@sym f2fe5@mark* f2fe8@sym* (f2c5a@rib-mark** f2fdf@rib) (f2c5c@rib-label* f2fdf@rib))))) (f2c58@rib-sym* f2fdf@rib))) (f2cbf@id->sym f2fde@id) (f2c8b@stx-mark* f2fde@id)))) '#f))) (set! f2c45@gen-define-label+loc (lambda (f2ff8@id f2ff9@rib) ((lambda (f2ffc@t) (if f2ffc@t ((lambda (f2ffe@env) ((lambda (f3000@label f3001@locs) (values f3000@label ((lambda (f3004@t) (if f3004@t (cdr f3004@t) ((lambda (f3006@loc) (begin (f2f7b@set-interaction-env-locs! f2ffe@env (cons (cons f3000@label f3006@loc) f3001@locs)) f3006@loc)) (f2c3d@gen-lexical f2ff8@id)))) (assq f3000@label f3001@locs)))) (f2c43@gen-top-level-label f2ff8@id f2ff9@rib) (f2f75@interaction-env-locs f2ffe@env))) f2ffc@t) (values (gensym) (f2c3d@gen-lexical f2ff8@id)))) (f2fbf@top-level-context)))) (set! f2c47@gen-define-label (lambda (f3008@id f3009@rib) (if (f2fbf@top-level-context) (f2c43@gen-top-level-label f3008@id f3009@rib) (gensym)))) (set! f2c4d@f2c48 (make-record-type-descriptor 'rib '#f 'f2c4b '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! f2c4f@f2c4a '#f) (set! f2c51@f2c49 (make-record-constructor-descriptor f2c4d@f2c48 '#f f2c4f@f2c4a)) (set! f2c54@rib? (record-predicate f2c4d@f2c48)) (set! f2c56@make-rib (record-constructor f2c51@f2c49)) (set! f2c58@rib-sym* (record-accessor f2c4d@f2c48 '0)) (set! f2c5a@rib-mark** (record-accessor f2c4d@f2c48 '1)) (set! f2c5c@rib-label* (record-accessor f2c4d@f2c48 '2)) (set! f2c5e@rib-sealed/freq (record-accessor f2c4d@f2c48 '3)) (set! f2c60@rib-cache (record-accessor f2c4d@f2c48 '4)) (set! f2c62@set-rib-sym*! (record-mutator f2c4d@f2c48 '0)) (set! f2c64@set-rib-mark**! (record-mutator f2c4d@f2c48 '1)) (set! f2c66@set-rib-label*! (record-mutator f2c4d@f2c48 '2)) (set! f2c68@set-rib-sealed/freq! (record-mutator f2c4d@f2c48 '3)) (set! f2c6a@set-rib-cache! (record-mutator f2c4d@f2c48 '4)) (set! f2c6c@make-empty-rib (lambda () (f2c56@make-rib '() '() '() '#f '#f))) (set! f2c6e@extend-rib! (lambda (f300c@rib f300d@id f300e@label) ((lambda (f3013@find) (begin (set! f3013@find (lambda (f3020@sym f3021@mark* f3022@sym* f3023@mark** f3024@label*) (and (pair? f3022@sym*) (if (and (eq? f3020@sym (car f3022@sym*)) (f2cc1@same-marks? f3021@mark* (car f3023@mark**))) f3024@label* (f3013@find f3020@sym f3021@mark* (cdr f3022@sym*) (cdr f3023@mark**) (cdr f3024@label*)))))) (begin (if (f2c5e@rib-sealed/freq f300c@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" f300c@rib) (void)) ((lambda (f3014@sym f3015@mark*) ((lambda (f3018@sym*) ((lambda (f301a@t) (if f301a@t ((lambda (f301c@p) (if (not (eq? f300e@label (car f301c@p))) (if (f2fbf@top-level-context) (set-car! f301c@p f300e@label) (f2fb1@syntax-violation '#f '"multiple definitions of identifier" f300d@id)) (void))) f301a@t) (begin (if (f2c60@rib-cache f300c@rib) (hashtable-update! (f2c60@rib-cache f300c@rib) f3014@sym (lambda (f301e@e) (cons (cons f3015@mark* f300e@label) f301e@e)) '()) (void)) (f2c62@set-rib-sym*! f300c@rib (cons f3014@sym f3018@sym*)) (f2c64@set-rib-mark**! f300c@rib (cons f3015@mark* (f2c5a@rib-mark** f300c@rib))) (f2c66@set-rib-label*! f300c@rib (cons f300e@label (f2c5c@rib-label* f300c@rib)))))) (and (memq f3014@sym (f2c58@rib-sym* f300c@rib)) (f3013@find f3014@sym f3015@mark* f3018@sym* (f2c5a@rib-mark** f300c@rib) (f2c5c@rib-label* f300c@rib))))) (f2c58@rib-sym* f300c@rib))) (f2cbf@id->sym f300d@id) (f2c8b@stx-mark* f300d@id))))) '#f))) (set! f2c70@extend-rib/nc! (lambda (f302a@rib f302b@id f302c@label) ((lambda (f3030@sym f3031@mark*) ((lambda (f3034@sym*) (begin (if (f2c60@rib-cache f302a@rib) (hashtable-update! (f2c60@rib-cache f302a@rib) f3030@sym (lambda (f3036@e) (cons (cons f3031@mark* f302c@label) f3036@e)) '()) (void)) (f2c62@set-rib-sym*! f302a@rib (cons f3030@sym f3034@sym*)) (f2c64@set-rib-mark**! f302a@rib (cons f3031@mark* (f2c5a@rib-mark** f302a@rib))) (f2c66@set-rib-label*! f302a@rib (cons f302c@label (f2c5c@rib-label* f302a@rib))))) (f2c58@rib-sym* f302a@rib))) (f2cbf@id->sym f302b@id) (f2c8b@stx-mark* f302b@id)))) (set! f2c72@make-rib-map (lambda (f3038@sym*) ((lambda (f303a@ht) ((letrec ((f303c@f (lambda (f303e@i f303f@sym*) (if (null? f303f@sym*) f303a@ht (begin (hashtable-update! f303a@ht (car f303f@sym*) (lambda (f3042@x) (cons f303e@i f3042@x)) '()) (f303c@f (+ f303e@i '1) (cdr f303f@sym*))))))) f303c@f) '0 f3038@sym*)) (make-eq-hashtable)))) (set! f2c74@seal-rib! (lambda (f3044@rib) ((lambda (f3046@sym*) (if (not (null? f3046@sym*)) (begin (f2c62@set-rib-sym*! f3044@rib (list->vector f3046@sym*)) (f2c64@set-rib-mark**! f3044@rib (list->vector (f2c5a@rib-mark** f3044@rib))) (f2c66@set-rib-label*! f3044@rib (list->vector (f2c5c@rib-label* f3044@rib))) (f2c68@set-rib-sealed/freq! f3044@rib (f2c72@make-rib-map f3046@sym*))) (void))) (f2c58@rib-sym* f3044@rib)))) (set! f2c76@unseal-rib! (lambda (f3048@rib) (if (f2c5e@rib-sealed/freq f3048@rib) (begin (f2c68@set-rib-sealed/freq! f3048@rib '#f) (f2c62@set-rib-sym*! f3048@rib (vector->list (f2c58@rib-sym* f3048@rib))) (f2c64@set-rib-mark**! f3048@rib (vector->list (f2c5a@rib-mark** f3048@rib))) (f2c66@set-rib-label*! f3048@rib (vector->list (f2c5c@rib-label* f3048@rib)))) (void)))) (set! f2c78@make-full-rib (lambda (f304a@id* f304b@label*) ((lambda (f304e@r) (begin (f2c74@seal-rib! f304e@r) f304e@r)) (f2c56@make-rib (map f2cbf@id->sym f304a@id*) (map f2c8b@stx-mark* f304a@id*) f304b@label* '#f '#f)))) (set! f2c7e@f2c79 (make-record-type-descriptor 'stx '#f 'f2c7c '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! f2c80@f2c7b '#f) (set! f2c82@f2c7a (make-record-constructor-descriptor f2c7e@f2c79 '#f f2c80@f2c7b)) (set! f2c85@stx? (record-predicate f2c7e@f2c79)) (set! f2c87@make-stx (record-constructor f2c82@f2c7a)) (set! f2c89@stx-expr (record-accessor f2c7e@f2c79 '0)) (set! f2c8b@stx-mark* (record-accessor f2c7e@f2c79 '1)) (set! f2c8d@stx-subst* (record-accessor f2c7e@f2c79 '2)) (set! f2c8f@stx-ae* (record-accessor f2c7e@f2c79 '3)) (set! f2c91@set-stx-expr! (record-mutator f2c7e@f2c79 '0)) (set! f2c93@set-stx-mark*! (record-mutator f2c7e@f2c79 '1)) (set! f2c95@set-stx-subst*! (record-mutator f2c7e@f2c79 '2)) (set! f2c97@set-stx-ae*! (record-mutator f2c7e@f2c79 '3)) (set! f2c99@rp (f2864@f278b@make-record-printer 'stx (lambda (f3050@x f3051@p f3052@wr) (begin (display '"#<syntax " f3051@p) (write (f2cd3@stx->datum f3050@x) f3051@p) ((lambda (f3056@expr) (if (f285c@f277b@annotation? f3056@expr) ((lambda (f3058@src) (if (pair? f3058@src) (begin (display '" [" f3051@p) (display (cdr f3058@src) f3051@p) (display '" of " f3051@p) (display (car f3058@src) f3051@p) (display '"]" f3051@p)) (void))) (f285d@f277d@annotation-source f3056@expr)) (void))) (f2c89@stx-expr f3050@x)) (display '">" f3051@p))))) (set! f2c9b@datum->stx (lambda (f305a@id f305b@datum) (f2c87@make-stx f305b@datum (f2c8b@stx-mark* f305a@id) (f2c8d@stx-subst* f305a@id) (f2c8f@stx-ae* f305a@id)))) (set! f2c9d@gen-mark (lambda () (string '#\m))) (set! f2c9f@anti-mark '#f) (set! f2ca1@anti-mark? not) (set! f2ca3@join-wraps (lambda (f305e@m1* f305f@s1* f3060@ae1* f3061@e) ((lambda (f3067@cancel) (begin (set! f3067@cancel (lambda (f306e@ls1 f306f@ls2) ((letrec ((f3072@f (lambda (f3074@x f3075@ls1) (if (null? f3075@ls1) (cdr f306f@ls2) (cons f3074@x (f3072@f (car f3075@ls1) (cdr f3075@ls1))))))) f3072@f) (car f306e@ls1) (cdr f306e@ls1)))) ((lambda (f3068@m2* f3069@s2* f306a@ae2*) (if (and (not (null? f305e@m1*)) (not (null? f3068@m2*)) (f2ca1@anti-mark? (car f3068@m2*))) (values (f3067@cancel f305e@m1* f3068@m2*) (f3067@cancel f305f@s1* f3069@s2*) (f3067@cancel f3060@ae1* f306a@ae2*)) (values (append f305e@m1* f3068@m2*) (append f305f@s1* f3069@s2*) (append f3060@ae1* f306a@ae2*)))) (f2c8b@stx-mark* f3061@e) (f2c8d@stx-subst* f3061@e) (f2c8f@stx-ae* f3061@e)))) '#f))) (set! f2ca5@mkstx (lambda (f3078@e f3079@m* f307a@s* f307b@ae*) (if (and (f2c85@stx? f3078@e) (not (f2c3b@top-marked? f3079@m*))) (call-with-values (lambda () (f2ca3@join-wraps f3079@m* f307a@s* f307b@ae* f3078@e)) (lambda (f3086@f3081 f3087@f3083 f3088@f3085) ((lambda (f308c@ae* f308d@s* f308e@m*) (f2c87@make-stx (f2c89@stx-expr f3078@e) f308e@m* f308d@s* f308c@ae*)) f3088@f3085 f3087@f3083 f3086@f3081))) (f2c87@make-stx f3078@e f3079@m* f307a@s* f307b@ae*)))) (set! f2ca7@add-mark (lambda (f3092@m f3093@e f3094@ae) (f2ca5@mkstx f3093@e (list f3092@m) '(shift) (list f3094@ae)))) (set! f2ca9@add-subst (lambda (f3098@subst f3099@e) (f2ca5@mkstx f3099@e '() (list f3098@subst) '()))) (set! f2cab@syntax-kind? (lambda (f309c@x f309d@p?) (if (f2c85@stx? f309c@x) (f2cab@syntax-kind? (f2c89@stx-expr f309c@x) f309d@p?) (if (f285c@f277b@annotation? f309c@x) (f2cab@syntax-kind? (f285e@f277f@annotation-expression f309c@x) f309d@p?) (f309d@p? f309c@x))))) (set! f2cad@syntax-vector->list (lambda (f30a0@x) (if (f2c85@stx? f30a0@x) ((lambda (f30a2@ls f30a3@m* f30a4@s* f30a5@ae*) (map (lambda (f30aa@x) (f2ca5@mkstx f30aa@x f30a3@m* f30a4@s* f30a5@ae*)) f30a2@ls)) (f2cad@syntax-vector->list (f2c89@stx-expr f30a0@x)) (f2c8b@stx-mark* f30a0@x) (f2c8d@stx-subst* f30a0@x) (f2c8f@stx-ae* f30a0@x)) (if (f285c@f277b@annotation? f30a0@x) (f2cad@syntax-vector->list (f285e@f277f@annotation-expression f30a0@x)) (if (vector? f30a0@x) (vector->list f30a0@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" f30a0@x)))))) (set! f2caf@syntax-pair? (lambda (f30ac@x) (f2cab@syntax-kind? f30ac@x pair?))) (set! f2cb1@syntax-vector? (lambda (f30ae@x) (f2cab@syntax-kind? f30ae@x vector?))) (set! f2cb3@syntax-null? (lambda (f30b0@x) (f2cab@syntax-kind? f30b0@x null?))) (set! f2cb5@syntax-list? (lambda (f30b2@x) (or (f2cb3@syntax-null? f30b2@x) (and (f2caf@syntax-pair? f30b2@x) (f2cb5@syntax-list? (f2cb9@syntax-cdr f30b2@x)))))) (set! f2cb7@syntax-car (lambda (f30b4@x) (if (f2c85@stx? f30b4@x) (f2ca5@mkstx (f2cb7@syntax-car (f2c89@stx-expr f30b4@x)) (f2c8b@stx-mark* f30b4@x) (f2c8d@stx-subst* f30b4@x) (f2c8f@stx-ae* f30b4@x)) (if (f285c@f277b@annotation? f30b4@x) (f2cb7@syntax-car (f285e@f277f@annotation-expression f30b4@x)) (if (pair? f30b4@x) (car f30b4@x) (assertion-violation 'syntax-car '"BUG: not a pair" f30b4@x)))))) (set! f2cb9@syntax-cdr (lambda (f30b6@x) (if (f2c85@stx? f30b6@x) (f2ca5@mkstx (f2cb9@syntax-cdr (f2c89@stx-expr f30b6@x)) (f2c8b@stx-mark* f30b6@x) (f2c8d@stx-subst* f30b6@x) (f2c8f@stx-ae* f30b6@x)) (if (f285c@f277b@annotation? f30b6@x) (f2cb9@syntax-cdr (f285e@f277f@annotation-expression f30b6@x)) (if (pair? f30b6@x) (cdr f30b6@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" f30b6@x)))))) (set! f2cbb@syntax->list (lambda (f30b8@x) (if (f2caf@syntax-pair? f30b8@x) (cons (f2cb7@syntax-car f30b8@x) (f2cbb@syntax->list (f2cb9@syntax-cdr f30b8@x))) (if (f2cb3@syntax-null? f30b8@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" f30b8@x))))) (set! f2cbd@id? (lambda (f30ba@x) (and (f2c85@stx? f30ba@x) ((lambda (f30bc@expr) (symbol? (if (f285c@f277b@annotation? f30bc@expr) (f285b@f2779@annotation-stripped f30bc@expr) f30bc@expr))) (f2c89@stx-expr f30ba@x))))) (set! f2cbf@id->sym (lambda (f30be@x) (begin (if (not (f2c85@stx? f30be@x)) (error 'id->sym '"BUG in ikarus: not an id" f30be@x) (void)) ((lambda (f30c0@expr) ((lambda (f30c2@sym) (if (symbol? f30c2@sym) f30c2@sym (error 'id->sym '"BUG in ikarus: not an id" f30be@x))) (if (f285c@f277b@annotation? f30c0@expr) (f285b@f2779@annotation-stripped f30c0@expr) f30c0@expr))) (f2c89@stx-expr f30be@x))))) (set! f2cc1@same-marks? (lambda (f30c4@x f30c5@y) (or (and (null? f30c4@x) (null? f30c5@y)) (and (pair? f30c4@x) (pair? f30c5@y) (eq? (car f30c4@x) (car f30c5@y)) (f2cc1@same-marks? (cdr f30c4@x) (cdr f30c5@y)))))) (set! f2cc3@bound-id=? (lambda (f30c8@x f30c9@y) (and (eq? (f2cbf@id->sym f30c8@x) (f2cbf@id->sym f30c9@y)) (f2cc1@same-marks? (f2c8b@stx-mark* f30c8@x) (f2c8b@stx-mark* f30c9@y))))) (set! f2cc5@free-id=? (lambda (f30cc@i f30cd@j) ((lambda (f30d0@t0 f30d1@t1) (if (or f30d0@t0 f30d1@t1) (eq? f30d0@t0 f30d1@t1) (eq? (f2cbf@id->sym f30cc@i) (f2cbf@id->sym f30cd@j)))) (f2cd9@id->real-label f30cc@i) (f2cd9@id->real-label f30cd@j)))) (set! f2cc7@valid-bound-ids? (lambda (f30d4@id*) (and (for-all f2cbd@id? f30d4@id*) (f2cc9@distinct-bound-ids? f30d4@id*)))) (set! f2cc9@distinct-bound-ids? (lambda (f30d6@id*) (or (null? f30d6@id*) (and (not (f2ccb@bound-id-member? (car f30d6@id*) (cdr f30d6@id*))) (f2cc9@distinct-bound-ids? (cdr f30d6@id*)))))) (set! f2ccb@bound-id-member? (lambda (f30d8@id f30d9@id*) (and (pair? f30d9@id*) (or (f2cc3@bound-id=? f30d8@id (car f30d9@id*)) (f2ccb@bound-id-member? f30d8@id (cdr f30d9@id*)))))) (set! f2ccd@self-evaluating? (lambda (f30dc@x) (or (number? f30dc@x) (string? f30dc@x) (char? f30dc@x) (boolean? f30dc@x) (regexp? f30dc@x) (bytevector? f30dc@x)))) (set! f2ccf@strip-annotations (lambda (f30de@x) (if (pair? f30de@x) (cons (f2ccf@strip-annotations (car f30de@x)) (f2ccf@strip-annotations (cdr f30de@x))) (if (vector? f30de@x) (vector-map f2ccf@strip-annotations f30de@x) (if (f285c@f277b@annotation? f30de@x) (f285b@f2779@annotation-stripped f30de@x) f30de@x))))) (set! f2cd1@strip (lambda (f30e0@x f30e1@m*) (if (f2c3b@top-marked? f30e1@m*) (if (or (f285c@f277b@annotation? f30e0@x) (and (pair? f30e0@x) (f285c@f277b@annotation? (car f30e0@x))) (and (vector? f30e0@x) (> (vector-length f30e0@x) '0) (f285c@f277b@annotation? (vector-ref f30e0@x '0)))) (f2ccf@strip-annotations f30e0@x) f30e0@x) ((letrec ((f30e4@f (lambda (f30e6@x) (if (f2c85@stx? f30e6@x) (f2cd1@strip (f2c89@stx-expr f30e6@x) (f2c8b@stx-mark* f30e6@x)) (if (f285c@f277b@annotation? f30e6@x) (f285b@f2779@annotation-stripped f30e6@x) (if (pair? f30e6@x) ((lambda (f30e8@a f30e9@d) (if (and (eq? f30e8@a (car f30e6@x)) (eq? f30e9@d (cdr f30e6@x))) f30e6@x (cons f30e8@a f30e9@d))) (f30e4@f (car f30e6@x)) (f30e4@f (cdr f30e6@x))) (if (vector? f30e6@x) ((lambda (f30ec@old) ((lambda (f30ee@new) (if (for-all eq? f30ec@old f30ee@new) f30e6@x (list->vector f30ee@new))) (map f30e4@f f30ec@old))) (vector->list f30e6@x)) f30e6@x))))))) f30e4@f) f30e0@x)))) (set! f2cd3@stx->datum (lambda (f30f0@x) (f2cd1@strip f30f0@x '()))) (set! f2cd5@same-marks*? (lambda (f30f2@mark* f30f3@mark** f30f4@si) (if (null? f30f4@si) '#f (if (f2cc1@same-marks? f30f2@mark* (vector-ref f30f3@mark** (car f30f4@si))) (car f30f4@si) (f2cd5@same-marks*? f30f2@mark* f30f3@mark** (cdr f30f4@si)))))) (set! f2cd7@id->label (lambda (f30f8@id) (or (f2cd9@id->real-label f30f8@id) ((lambda (f30fa@t) (if f30fa@t ((lambda (f30fc@env) ((lambda (f30fe@rib) (call-with-values (lambda () (f2c45@gen-define-label+loc f30f8@id f30fe@rib)) (lambda (f3104@f3101 f3105@f3103) ((lambda (f3108@loc_ f3109@lab) (begin (f2c6e@extend-rib! f30fe@rib f30f8@id f3109@lab) f3109@lab)) f3105@f3103 f3104@f3101)))) (f2f71@interaction-env-rib f30fc@env))) f30fa@t) '#f)) (f2fbf@top-level-context))))) (set! f2cd9@id->real-label (lambda (f310c@id) ((lambda (f310e@sym) ((letrec ((f3110@search (lambda (f3112@subst* f3113@mark*) (if (null? f3112@subst*) '#f (if (eq? (car f3112@subst*) 'shift) (f3110@search (cdr f3112@subst*) (cdr f3113@mark*)) ((lambda (f3116@rib) ((lambda (f3118@t) (if f3118@t ((lambda (f311a@ht) ((lambda (f311c@si) ((lambda (f311e@i) (if f311e@i (vector-ref (f2c5c@rib-label* f3116@rib) f311e@i) (f3110@search (cdr f3112@subst*) f3113@mark*))) (and f311c@si (f2cd5@same-marks*? f3113@mark* (f2c5a@rib-mark** f3116@rib) (reverse f311c@si))))) (hashtable-ref f311a@ht f310e@sym '#f))) f3118@t) ((letrec ((f3120@f (lambda (f3122@sym* f3123@mark** f3124@label*) (if (null? f3122@sym*) (f3110@search (cdr f3112@subst*) f3113@mark*) (if (and (eq? (car f3122@sym*) f310e@sym) (f2cc1@same-marks? (car f3123@mark**) f3113@mark*)) (car f3124@label*) (f3120@f (cdr f3122@sym*) (cdr f3123@mark**) (cdr f3124@label*))))))) f3120@f) (f2c58@rib-sym* f3116@rib) (f2c5a@rib-mark** f3116@rib) (f2c5c@rib-label* f3116@rib)))) (f2c5e@rib-sealed/freq f3116@rib))) (car f3112@subst*))))))) f3110@search) (f2c8d@stx-subst* f310c@id) (f2c8b@stx-mark* f310c@id))) (f2cbf@id->sym f310c@id)))) (set! f2cdb@label->binding (lambda (f3128@x f3129@r) ((lambda (f312c@t) (if f312c@t ((lambda (f312e@b) (if (and (pair? f312e@b) (eq? (car f312e@b) '$core-rtd)) (cons '$rtd (map f2e7e@bless (cdr f312e@b))) (if (and (pair? f312e@b) (eq? (car f312e@b) 'global-rtd)) ((lambda (f3130@lib f3131@loc) (cons '$rtd (symbol-value f3131@loc))) (cadr f312e@b) (cddr f312e@b)) f312e@b))) f312c@t) ((lambda (f3134@t) (if f3134@t (cdr f3134@t) ((lambda (f3136@t) (if f3136@t ((lambda (f3138@env) ((lambda (f313a@t) (if f313a@t ((lambda (f313c@p) (cons* 'lexical (cdr f313c@p) '#f)) f313a@t) '(displaced-lexical . #f))) (assq f3128@x (f2f75@interaction-env-locs f3138@env)))) f3136@t) '(displaced-lexical . #f))) (f2fbf@top-level-context)))) (assq f3128@x f3129@r)))) (f2ae0@f2980@imported-label->binding f3128@x)))) (set! f2cdd@make-binding cons) (set! f2cdf@binding-type car) (set! f2ce1@binding-value cdr) (set! f2ce3@raise-unbound-error (lambda (f313e@id) (f2faf@syntax-violation* '#f '"unbound identifier" f313e@id (f4cee@f4b34@make-undefined-violation)))) (set! f2ce5@syntax-type (lambda (f3140@e f3141@r) (if (f2cbd@id? f3140@e) ((lambda (f3144@id) ((lambda (f3146@label) ((lambda (f3148@b) ((lambda (f314a@type) ((lambda () (begin (if (not f3146@label) (f2ce3@raise-unbound-error f3144@id) (void)) ((lambda (f314c@t) (if (memv f314c@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values f314a@type (f2ce1@binding-value f3148@b) f3144@id) (values 'other '#f '#f))) f314a@type))))) (f2cdf@binding-type f3148@b))) (f2cdb@label->binding f3146@label f3141@r))) (f2cd7@id->label f3144@id))) f3140@e) (if (f2caf@syntax-pair? f3140@e) ((lambda (f314e@id) (if (f2cbd@id? f314e@id) ((lambda (f3150@label) ((lambda (f3152@b) ((lambda (f3154@type) ((lambda () (begin (if (not f3150@label) (f2ce3@raise-unbound-error f314e@id) (void)) ((lambda (f3156@t) (if (memv f3156@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values f3154@type (f2ce1@binding-value f3152@b) f314e@id) (values 'call '#f '#f))) f3154@type))))) (f2cdf@binding-type f3152@b))) (f2cdb@label->binding f3150@label f3141@r))) (f2cd7@id->label f314e@id)) (values 'call '#f '#f))) (f2cb7@syntax-car f3140@e)) ((lambda (f3158@d) (if (f2ccd@self-evaluating? f3158@d) (values 'constant f3158@d '#f) (values 'other '#f '#f))) (f2cd3@stx->datum f3140@e)))))) (set! f2cf3@sanitize-binding (lambda (f315a@x f315b@src) (if (procedure? f315a@x) (cons* 'local-macro f315a@x f315b@src) (if (and (pair? f315a@x) (eq? (car f315a@x) 'macro!) (procedure? (cdr f315a@x))) (cons* 'local-macro! (cdr f315a@x) f315b@src) (if (and (pair? f315a@x) (eq? (car f315a@x) '$rtd)) f315a@x (assertion-violation 'expand '"invalid transformer" f315a@x)))))) (set! f2cf5@make-variable-transformer (lambda (f315e@x) (if (procedure? f315e@x) (cons 'macro! f315e@x) (assertion-violation 'make-variable-transformer '"not a procedure" f315e@x)))) (set! f2cf7@variable-transformer? (lambda (f3160@x) (and (pair? f3160@x) (eq? (car f3160@x) 'macro!) (procedure? (cdr f3160@x))))) (set! f2cf9@variable-transformer-procedure (lambda (f3162@x) (if (f2cf7@variable-transformer? f3162@x) (cdr f3162@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" f3162@x)))) (set! f2cfb@make-eval-transformer (lambda (f3164@x) (f2cf3@sanitize-binding (eval-core (f28bb@f2873@expanded->core f3164@x)) f3164@x))) (set! f2e4c@parse-define (lambda (f3166@x) ((lambda (f3168@t) ((lambda (f316a@ls/false) (if (and f316a@ls/false (apply (lambda (f316c@id f316d@fmls f316e@b f316f@b*) (f2cbd@id? f316c@id)) f316a@ls/false)) (apply (lambda (f3174@id f3175@fmls f3176@b f3177@b*) (begin (f2eee@verify-formals f3175@fmls f3166@x) (values f3174@id (cons 'defun (cons f3175@fmls (cons f3176@b f3177@b*)))))) f316a@ls/false) ((lambda (f317c@t) ((lambda (f317e@ls/false) (if (and f317e@ls/false (apply (lambda (f3180@id f3181@val) (f2cbd@id? f3180@id)) f317e@ls/false)) (apply (lambda (f3184@id f3185@val) (values f3184@id (cons 'expr f3185@val))) f317e@ls/false) ((lambda (f3188@t) ((lambda (f318a@ls/false) (if (and f318a@ls/false (apply (lambda (f318c@id) (f2cbd@id? f318c@id)) f318a@ls/false)) (apply (lambda (f318e@id) (values f318e@id (cons 'expr (f2e7e@bless '(void))))) f318a@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3188@t))) (f2ec8@syntax-dispatch f3188@t '(_ any)))) f317c@t))) (f2ec8@syntax-dispatch f317c@t '(_ any any)))) f3168@t))) (f2ec8@syntax-dispatch f3168@t '(_ (any . any) any . each-any)))) f3166@x))) (set! f2e4e@parse-define-syntax (lambda (f3190@x) ((lambda (f3192@t) ((lambda (f3194@ls/false) (if (and f3194@ls/false (apply (lambda (f3196@id f3197@val) (f2cbd@id? f3196@id)) f3194@ls/false)) (apply (lambda (f319a@id f319b@val) (values f319a@id f319b@val)) f3194@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3192@t))) (f2ec8@syntax-dispatch f3192@t '(_ any any)))) f3190@x))) (set! f2e50@scheme-stx-hashtable (make-eq-hashtable)) (set! f2e52@scheme-stx (lambda (f319e@sym) (or (hashtable-ref f2e50@scheme-stx-hashtable f319e@sym '#f) ((lambda (f31a0@subst) ((lambda (f31a2@stx) ((lambda (f31a4@stx) ((lambda () (begin (hashtable-set! f2e50@scheme-stx-hashtable f319e@sym f31a4@stx) f31a4@stx)))) ((lambda (f31a6@t) (if f31a6@t ((lambda (f31a8@x) ((lambda (f31aa@name f31ab@label) (f2ca9@add-subst (f2c56@make-rib (list f31aa@name) (list f2c39@top-mark*) (list f31ab@label) '#f '#f) f31a2@stx)) (car f31a8@x) (cdr f31a8@x))) f31a6@t) f31a2@stx)) (assq f319e@sym f31a0@subst)))) (f2c87@make-stx f319e@sym f2c39@top-mark* '() '()))) (f2ab6@f292c@library-subst (f2ada@f2974@find-library-by-name '(psyntax system $all))))))) (set! f2e54@lexical-var car) (set! f2e56@lexical-mutable? cdr) (set! f2e58@set-lexical-mutable! set-cdr!) (set! f2e5a@add-lexical (lambda (f31ae@lab f31af@lex f31b0@r) (cons (cons* f31ae@lab 'lexical f31af@lex '#f) f31b0@r))) (set! f2e5c@add-lexicals (lambda (f31b4@lab* f31b5@lex* f31b6@r) (if (null? f31b4@lab*) f31b6@r (f2e5c@add-lexicals (cdr f31b4@lab*) (cdr f31b5@lex*) (f2e5a@add-lexical (car f31b4@lab*) (car f31b5@lex*) f31b6@r))))) (set! f2e5e@letrec-helper (lambda (f31ba@e f31bb@r f31bc@mr f31bd@build) ((lambda (f31c2@t) ((lambda (f31c4@ls/false) (if f31c4@ls/false (apply (lambda (f31c6@lhs* f31c7@rhs* f31c8@b f31c9@b*) (if (not (f2cc7@valid-bound-ids? f31c6@lhs*)) (f2e82@invalid-fmls-error f31ba@e f31c6@lhs*) ((lambda (f31ce@lex* f31cf@lab*) ((lambda (f31d2@rib f31d3@r) ((lambda (f31d6@body f31d7@rhs*) (f31bd@build '#f f31ce@lex* f31d7@rhs* f31d6@body)) (f2f00@chi-internal (f2ca9@add-subst f31d2@rib (cons f31c8@b f31c9@b*)) f31d3@r f31bc@mr) (f2ee6@chi-expr* (map (lambda (f31da@x) (f2ca9@add-subst f31d2@rib f31da@x)) f31c7@rhs*) f31d3@r f31bc@mr))) (f2c78@make-full-rib f31c6@lhs* f31cf@lab*) (f2e5c@add-lexicals f31cf@lab* f31ce@lex* f31bb@r))) (map f2c3d@gen-lexical f31c6@lhs*) (map f2c41@gen-label f31c6@lhs*)))) f31c4@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f31c2@t))) (f2ec8@syntax-dispatch f31c2@t '(_ #(each (any any)) any . each-any)))) f31ba@e))) (set! f2e60@letrec-transformer (lambda (f31dc@e f31dd@r f31de@mr) (f2e5e@letrec-helper f31dc@e f31dd@r f31de@mr f2c1e@f2b8f@build-letrec))) (set! f2e62@letrec*-transformer (lambda (f31e2@e f31e3@r f31e4@mr) (f2e5e@letrec-helper f31e2@e f31e3@r f31e4@mr f2c1f@f2b91@build-letrec*))) (set! f2e64@fluid-let-syntax-transformer (lambda (f31e8@e f31e9@r f31ea@mr) ((lambda (f31ef@lookup) (begin (set! f31ef@lookup (lambda (f3202@x) (or (f2cd7@id->label f3202@x) (f2fb1@syntax-violation '#f '"unbound identifier" f31e8@e f3202@x)))) ((lambda (f31f0@t) ((lambda (f31f2@ls/false) (if f31f2@ls/false (apply (lambda (f31f4@lhs* f31f5@rhs* f31f6@b f31f7@b*) (if (not (f2cc7@valid-bound-ids? f31f4@lhs*)) (f2e82@invalid-fmls-error f31e8@e f31f4@lhs*) ((lambda (f31fc@lab* f31fd@rhs*) (f2f00@chi-internal (cons f31f6@b f31f7@b*) (append (map cons f31fc@lab* f31fd@rhs*) f31e9@r) (append (map cons f31fc@lab* f31fd@rhs*) f31ea@mr))) (map f31ef@lookup f31f4@lhs*) (map (lambda (f3200@x) (f2cfb@make-eval-transformer (f2f25@expand-transformer f3200@x f31ea@mr))) f31f5@rhs*)))) f31f2@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f31f0@t))) (f2ec8@syntax-dispatch f31f0@t '(_ #(each (any any)) any . each-any)))) f31e8@e))) '#f))) (set! f2e66@type-descriptor-transformer (lambda (f3204@e f3205@r f3206@mr) ((lambda (f320a@t) ((lambda (f320c@ls/false) (if (and f320c@ls/false (apply (lambda (f320e@id) (f2cbd@id? f320e@id)) f320c@ls/false)) (apply (lambda (f3210@id) ((lambda (f3212@lab) ((lambda (f3214@b) ((lambda (f3216@type) ((lambda () (begin (if (not f3212@lab) (f2ce3@raise-unbound-error f3210@id) (void)) (if (not (and (eq? f3216@type '$rtd) (not (list? (f2ce1@binding-value f3214@b))))) (f2fb1@syntax-violation '#f '"not a record type" f3204@e) (void)) (list 'quote (f2ce1@binding-value f3214@b)))))) (f2cdf@binding-type f3214@b))) (f2cdb@label->binding f3212@lab f3205@r))) (f2cd7@id->label f3210@id))) f320c@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f320a@t))) (f2ec8@syntax-dispatch f320a@t '(_ any)))) f3204@e))) (set! f2e68@record-type-descriptor-transformer (lambda (f3218@e f3219@r f321a@mr) ((lambda (f321e@t) ((lambda (f3220@ls/false) (if (and f3220@ls/false (apply (lambda (f3222@id) (f2cbd@id? f3222@id)) f3220@ls/false)) (apply (lambda (f3224@id) ((lambda (f3226@lab) ((lambda (f3228@b) ((lambda (f322a@type) ((lambda () (begin (if (not f3226@lab) (f2ce3@raise-unbound-error f3224@id) (void)) (if (not (and (eq? f322a@type '$rtd) (list? (f2ce1@binding-value f3228@b)))) (f2fb1@syntax-violation '#f '"not a record type" f3218@e) (void)) (f2eea@chi-expr (car (f2ce1@binding-value f3228@b)) f3219@r f321a@mr))))) (f2cdf@binding-type f3228@b))) (f2cdb@label->binding f3226@lab f3219@r))) (f2cd7@id->label f3224@id))) f3220@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f321e@t))) (f2ec8@syntax-dispatch f321e@t '(_ any)))) f3218@e))) (set! f2e6a@record-constructor-descriptor-transformer (lambda (f322c@e f322d@r f322e@mr) ((lambda (f3232@t) ((lambda (f3234@ls/false) (if (and f3234@ls/false (apply (lambda (f3236@id) (f2cbd@id? f3236@id)) f3234@ls/false)) (apply (lambda (f3238@id) ((lambda (f323a@lab) ((lambda (f323c@b) ((lambda (f323e@type) ((lambda () (begin (if (not f323a@lab) (f2ce3@raise-unbound-error f3238@id) (void)) (if (not (and (eq? f323e@type '$rtd) (list? (f2ce1@binding-value f323c@b)))) (f2fb1@syntax-violation '#f '"invalid type" f322c@e) (void)) (f2eea@chi-expr (cadr (f2ce1@binding-value f323c@b)) f322d@r f322e@mr))))) (f2cdf@binding-type f323c@b))) (f2cdb@label->binding f323a@lab f322d@r))) (f2cd7@id->label f3238@id))) f3234@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3232@t))) (f2ec8@syntax-dispatch f3232@t '(_ any)))) f322c@e))) (set! f2e6c@when-macro (lambda (f3240@e) ((lambda (f3242@t) ((lambda (f3244@ls/false) (if f3244@ls/false (apply (lambda (f3246@test f3247@e f3248@e*) (f2e7e@bless (list 'if f3246@test (cons 'begin (cons f3247@e f3248@e*))))) f3244@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3242@t))) (f2ec8@syntax-dispatch f3242@t '(_ any any . each-any)))) f3240@e))) (set! f2e6e@unless-macro (lambda (f324c@e) ((lambda (f324e@t) ((lambda (f3250@ls/false) (if f3250@ls/false (apply (lambda (f3252@test f3253@e f3254@e*) (f2e7e@bless (list 'if (list 'not f3252@test) (cons 'begin (cons f3253@e f3254@e*))))) f3250@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f324e@t))) (f2ec8@syntax-dispatch f324e@t '(_ any any . each-any)))) f324c@e))) (set! f2e70@if-transformer (lambda (f3258@e f3259@r f325a@mr) ((lambda (f325e@t) ((lambda (f3260@ls/false) (if f3260@ls/false (apply (lambda (f3262@e0 f3263@e1 f3264@e2) (list 'if (f2eea@chi-expr f3262@e0 f3259@r f325a@mr) (f2eea@chi-expr f3263@e1 f3259@r f325a@mr) (f2eea@chi-expr f3264@e2 f3259@r f325a@mr))) f3260@ls/false) ((lambda (f3268@t) ((lambda (f326a@ls/false) (if f326a@ls/false (apply (lambda (f326c@e0 f326d@e1) (list 'if (f2eea@chi-expr f326c@e0 f3259@r f325a@mr) (f2eea@chi-expr f326d@e1 f3259@r f325a@mr) (f2c1d@f2b8d@build-void))) f326a@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3268@t))) (f2ec8@syntax-dispatch f3268@t '(_ any any)))) f325e@t))) (f2ec8@syntax-dispatch f325e@t '(_ any any any)))) f3258@e))) (set! f2e72@and-transformer (lambda (f3270@e f3271@r f3272@mr) ((lambda (f3276@t) ((lambda (f3278@ls/false) (if f3278@ls/false (apply (lambda (f327a@e*) (cons 'and (f2ee6@chi-expr* f327a@e* f3271@r f3272@mr))) f3278@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3276@t))) (f2ec8@syntax-dispatch f3276@t '(_ . each-any)))) f3270@e))) (set! f2e74@or-transformer (lambda (f327c@e f327d@r f327e@mr) ((lambda (f3282@t) ((lambda (f3284@ls/false) (if f3284@ls/false (apply (lambda (f3286@e*) (cons 'or (f2ee6@chi-expr* f3286@e* f327d@r f327e@mr))) f3284@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3282@t))) (f2ec8@syntax-dispatch f3282@t '(_ . each-any)))) f327c@e))) (set! f2e76@case-macro (lambda (f3288@e) ((lambda (f328b@build-last f328d@build-one) (begin (set! f328b@build-last (lambda (f32b2@cls) ((lambda (f32b4@t) ((lambda (f32b6@ls/false) (if f32b6@ls/false (apply (lambda (f32b8@e f32b9@e*) (cons 'begin (cons f32b8@e f32b9@e*))) f32b6@ls/false) ((lambda (f32bc@t) ((lambda (f32be@ls/false) (if f32be@ls/false (apply (lambda () (f328d@build-one f32b2@cls '(if #f #f))) f32be@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f32bc@t))) (f2ec8@syntax-dispatch f32bc@t '_))) f32b4@t))) (f2ec8@syntax-dispatch f32b4@t '(#(scheme-id else) any . each-any)))) f32b2@cls))) (set! f328d@build-one (lambda (f32a4@cls f32a5@k) ((lambda (f32a8@t) ((lambda (f32aa@ls/false) (if f32aa@ls/false (apply (lambda (f32ac@d* f32ad@e f32ae@e*) (list 'if (list 'memv 't (list 'quote f32ac@d*)) (cons 'begin (cons f32ad@e f32ae@e*)) f32a5@k)) f32aa@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f32a8@t))) (f2ec8@syntax-dispatch f32a8@t '(each-any any . each-any)))) f32a4@cls))) ((lambda (f328e@t) ((lambda (f3290@ls/false) (if f3290@ls/false (apply (lambda (f3292@expr) (f2e7e@bless (cons 'let (cons (list (list 't f3292@expr)) '((if #f #f)))))) f3290@ls/false) ((lambda (f3294@t) ((lambda (f3296@ls/false) (if f3296@ls/false (apply (lambda (f3298@expr f3299@cls f329a@cls*) (f2e7e@bless (list 'let (list (list 't f3298@expr)) ((letrec ((f329e@f (lambda (f32a0@cls f32a1@cls*) (if (null? f32a1@cls*) (f328b@build-last f32a0@cls) (f328d@build-one f32a0@cls (f329e@f (car f32a1@cls*) (cdr f32a1@cls*))))))) f329e@f) f3299@cls f329a@cls*)))) f3296@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3294@t))) (f2ec8@syntax-dispatch f3294@t '(_ any any . each-any)))) f328e@t))) (f2ec8@syntax-dispatch f328e@t '(_ any)))) f3288@e))) '#f '#f))) (set! f2e78@quote-transformer (lambda (f32c0@e f32c1@r f32c2@mr) ((lambda (f32c6@t) ((lambda (f32c8@ls/false) (if f32c8@ls/false (apply (lambda (f32ca@datum) (list 'quote (f2cd3@stx->datum f32ca@datum))) f32c8@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f32c6@t))) (f2ec8@syntax-dispatch f32c6@t '(_ any)))) f32c0@e))) (set! f2e7a@case-lambda-transformer (lambda (f32cc@e f32cd@r f32ce@mr) ((lambda (f32d2@t) ((lambda (f32d4@ls/false) (if f32d4@ls/false (apply (lambda (f32d6@fmls* f32d7@b* f32d8@b**) (call-with-values (lambda () (f2ef2@chi-lambda-clause* f32cc@e f32d6@fmls* (map cons f32d7@b* f32d8@b**) f32cd@r f32ce@mr)) (lambda (f32e0@f32dd f32e1@f32df) ((lambda (f32e4@body* f32e5@fmls*) (f2c1a@f2b5b@build-case-lambda '#f f32e5@fmls* f32e4@body*)) f32e1@f32df f32e0@f32dd)))) f32d4@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f32d2@t))) (f2ec8@syntax-dispatch f32d2@t '(_ . #(each (any any . each-any)))))) f32cc@e))) (set! f2e7c@lambda-transformer (lambda (f32e8@e f32e9@r f32ea@mr) ((lambda (f32ee@t) ((lambda (f32f0@ls/false) (if f32f0@ls/false (apply (lambda (f32f2@fmls f32f3@b f32f4@b*) (call-with-values (lambda () (f2ef0@chi-lambda-clause f32e8@e f32f2@fmls (cons f32f3@b f32f4@b*) f32e9@r f32ea@mr)) (lambda (f32fc@f32f9 f32fd@f32fb) ((lambda (f3300@body f3301@fmls) (f2c19@f2b59@build-lambda '#f f3301@fmls f3300@body)) f32fd@f32fb f32fc@f32f9)))) f32f0@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f32ee@t))) (f2ec8@syntax-dispatch f32ee@t '(_ any any . each-any)))) f32e8@e))) (set! f2e7e@bless (lambda (f3304@x) (f2ca5@mkstx ((letrec ((f3306@f (lambda (f3308@x) (if (f2c85@stx? f3308@x) f3308@x (if (pair? f3308@x) (cons (f3306@f (car f3308@x)) (f3306@f (cdr f3308@x))) (if (symbol? f3308@x) (f2e52@scheme-stx f3308@x) (if (vector? f3308@x) (vector-map f3306@f f3308@x) f3308@x))))))) f3306@f) f3304@x) '() '() '()))) (set! f2e80@with-syntax-macro (lambda (f330a@e) ((lambda (f330c@t) ((lambda (f330e@ls/false) (if f330e@ls/false (apply (lambda (f3310@pat* f3311@expr* f3312@b f3313@b*) ((lambda (f3318@idn*) (begin (f2eee@verify-formals (map car f3318@idn*) f330a@e) ((lambda (f331a@t*) (f2e7e@bless (list 'let (map list f331a@t* f3311@expr*) ((letrec ((f331c@f (lambda (f331e@pat* f331f@t*) (if (null? f331e@pat*) (cons 'begin (cons '#f (cons f3312@b f3313@b*))) (list 'syntax-case (car f331f@t*) '() (list (car f331e@pat*) (f331c@f (cdr f331e@pat*) (cdr f331f@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car f331e@pat*)) (car f331f@t*)))))))) f331c@f) f3310@pat* f331a@t*)))) (f2f9f@generate-temporaries f3311@expr*)))) ((letrec ((f3322@f (lambda (f3324@pat*) (if (null? f3324@pat*) '() (call-with-values (lambda () (f2ec6@convert-pattern (car f3324@pat*) '())) (lambda (f332a@f3327 f332b@f3329) ((lambda (f332e@idn* f332f@pat) (append f332e@idn* (f3322@f (cdr f3324@pat*)))) f332b@f3329 f332a@f3327))))))) f3322@f) f3310@pat*))) f330e@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f330c@t))) (f2ec8@syntax-dispatch f330c@t '(_ #(each (any any)) any . each-any)))) f330a@e))) (set! f2e82@invalid-fmls-error (lambda (f3332@stx f3333@fmls) ((lambda (f3336@t) ((lambda (f3338@ls/false) (if f3338@ls/false (apply (lambda (f333a@id* f333b@last) ((letrec ((f333e@f (lambda (f3340@id*) (if (null? f3340@id*) (values) (if (not (f2cbd@id? (car f3340@id*))) (f2fb1@syntax-violation '#f '"not an identifier" f3332@stx (car f3340@id*)) (begin (f333e@f (cdr f3340@id*)) (if (f2ccb@bound-id-member? (car f3340@id*) (cdr f3340@id*)) (f2fb1@syntax-violation '#f '"duplicate binding" f3332@stx (car f3340@id*)) (void)))))))) f333e@f) (if (f2cbd@id? f333b@last) (cons f333b@last f333a@id*) (if (f2cb3@syntax-null? f333b@last) f333a@id* (f2fb1@syntax-violation '#f '"not an identifier" f3332@stx f333b@last))))) f3338@ls/false) ((lambda (f3342@t) ((lambda (f3344@ls/false) (if f3344@ls/false (apply (lambda () (f2fb1@syntax-violation '#f '"malformed binding form" f3332@stx f3333@fmls)) f3344@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3342@t))) (f2ec8@syntax-dispatch f3342@t '_))) f3336@t))) (f2ec8@syntax-dispatch f3336@t '#(each+ any () any)))) f3333@fmls))) (set! f2e84@let-macro (lambda (f3346@stx) ((lambda (f3348@t) ((lambda (f334a@ls/false) (if f334a@ls/false (apply (lambda (f334c@lhs* f334d@rhs* f334e@b f334f@b*) (if (f2cc7@valid-bound-ids? f334c@lhs*) (f2e7e@bless (cons (cons 'lambda (cons f334c@lhs* (cons f334e@b f334f@b*))) f334d@rhs*)) (f2e82@invalid-fmls-error f3346@stx f334c@lhs*))) f334a@ls/false) ((lambda (f3354@t) ((lambda (f3356@ls/false) (if (and f3356@ls/false (apply (lambda (f3358@f f3359@lhs* f335a@rhs* f335b@b f335c@b*) (f2cbd@id? f3358@f)) f3356@ls/false)) (apply (lambda (f3362@f f3363@lhs* f3364@rhs* f3365@b f3366@b*) (if (f2cc7@valid-bound-ids? f3363@lhs*) (f2e7e@bless (cons (list 'letrec (list (list f3362@f (cons 'lambda (cons f3363@lhs* (cons f3365@b f3366@b*))))) f3362@f) f3364@rhs*)) (f2e82@invalid-fmls-error f3346@stx f3363@lhs*))) f3356@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3354@t))) (f2ec8@syntax-dispatch f3354@t '(_ any #(each (any any)) any . each-any)))) f3348@t))) (f2ec8@syntax-dispatch f3348@t '(_ #(each (any any)) any . each-any)))) f3346@stx))) (set! f2e86@let-values-macro (lambda (f336c@stx) ((lambda (f336f@rename f3371@rename*) (begin (set! f336f@rename (lambda (f33d4@x f33d5@old* f33d6@new*) (begin (if (not (f2cbd@id? f33d4@x)) (f2fb1@syntax-violation '#f '"not an indentifier" f336c@stx f33d4@x) (void)) (if (f2ccb@bound-id-member? f33d4@x f33d5@old*) (f2fb1@syntax-violation '#f '"duplicate binding" f336c@stx f33d4@x) (void)) ((lambda (f33da@y) (values f33da@y (cons f33d4@x f33d5@old*) (cons f33da@y f33d6@new*))) (gensym (f2fb7@syntax->datum f33d4@x)))))) (set! f3371@rename* (lambda (f33c2@x* f33c3@old* f33c4@new*) (if (null? f33c2@x*) (values '() f33c3@old* f33c4@new*) (call-with-values (lambda () (f336f@rename (car f33c2@x*) f33c3@old* f33c4@new*)) (lambda (f33c8@x f33c9@old* f33ca@new*) (call-with-values (lambda () (f3371@rename* (cdr f33c2@x*) f33c9@old* f33ca@new*)) (lambda (f33ce@x* f33cf@old* f33d0@new*) (values (cons f33c8@x f33ce@x*) f33cf@old* f33d0@new*)))))))) ((lambda (f3372@t) ((lambda (f3374@ls/false) (if f3374@ls/false (apply (lambda (f3376@b f3377@b*) (cons* (f2e7e@bless 'let) '() f3376@b f3377@b*)) f3374@ls/false) ((lambda (f337a@t) ((lambda (f337c@ls/false) (if f337c@ls/false (apply (lambda (f337e@lhs* f337f@rhs* f3380@b f3381@b*) (f2e7e@bless ((letrec ((f3386@f (lambda (f3388@lhs* f3389@rhs* f338a@old* f338b@new*) (if (null? f3388@lhs*) (cons 'let (cons (map list f338a@old* f338b@new*) (cons f3380@b f3381@b*))) ((lambda (f3390@t) ((lambda (f3392@ls/false) (if f3392@ls/false (apply (lambda (f3394@x*) (call-with-values (lambda () (f3371@rename* f3394@x* f338a@old* f338b@new*)) (lambda (f339c@f3397 f339d@f3399 f339e@f339b) ((lambda (f33a2@new* f33a3@old* f33a4@y*) (list 'call-with-values (list 'lambda '() (car f3389@rhs*)) (list 'lambda f33a4@y* (f3386@f (cdr f3388@lhs*) (cdr f3389@rhs*) f33a3@old* f33a2@new*)))) f339e@f339b f339d@f3399 f339c@f3397)))) f3392@ls/false) ((lambda (f33a8@t) ((lambda (f33aa@ls/false) (if f33aa@ls/false (apply (lambda (f33ac@x* f33ad@x) (call-with-values (lambda () (f336f@rename f33ad@x f338a@old* f338b@new*)) (lambda (f33b0@y f33b1@old* f33b2@new*) (call-with-values (lambda () (f3371@rename* f33ac@x* f33b1@old* f33b2@new*)) (lambda (f33b6@y* f33b7@old* f33b8@new*) (list 'call-with-values (list 'lambda '() (car f3389@rhs*)) (list 'lambda (append f33b6@y* f33b0@y) (f3386@f (cdr f3388@lhs*) (cdr f3389@rhs*) f33b7@old* f33b8@new*)))))))) f33aa@ls/false) ((lambda (f33bc@t) ((lambda (f33be@ls/false) (if f33be@ls/false (apply (lambda (f33c0@others) (f2fb1@syntax-violation '#f '"malformed bindings" f336c@stx f33c0@others)) f33be@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f33bc@t))) (f2ec8@syntax-dispatch f33bc@t 'any))) f33a8@t))) (f2ec8@syntax-dispatch f33a8@t '#(each+ any () any)))) f3390@t))) (f2ec8@syntax-dispatch f3390@t 'each-any))) (car f3388@lhs*)))))) f3386@f) f337e@lhs* f337f@rhs* '() '()))) f337c@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f337a@t))) (f2ec8@syntax-dispatch f337a@t '(_ #(each (any any)) any . each-any)))) f3372@t))) (f2ec8@syntax-dispatch f3372@t '(_ () any . each-any)))) f336c@stx))) '#f '#f))) (set! f2e88@let*-values-macro (lambda (f33dc@stx) ((lambda (f33df@check) (begin (set! f33df@check (lambda (f340e@x*) (if (not (null? f340e@x*)) ((lambda (f3410@x) (begin (if (not (f2cbd@id? f3410@x)) (f2fb1@syntax-violation '#f '"not an identifier" f33dc@stx f3410@x) (void)) (f33df@check (cdr f340e@x*)) (if (f2ccb@bound-id-member? f3410@x (cdr f340e@x*)) (f2fb1@syntax-violation '#f '"duplicate identifier" f33dc@stx f3410@x) (void)))) (car f340e@x*)) (void)))) ((lambda (f33e0@t) ((lambda (f33e2@ls/false) (if f33e2@ls/false (apply (lambda (f33e4@b f33e5@b*) (cons* (f2e7e@bless 'let) '() f33e4@b f33e5@b*)) f33e2@ls/false) ((lambda (f33e8@t) ((lambda (f33ea@ls/false) (if f33ea@ls/false (apply (lambda (f33ec@lhs* f33ed@rhs* f33ee@b f33ef@b*) (f2e7e@bless ((letrec ((f33f4@f (lambda (f33f6@lhs* f33f7@rhs*) (if (null? f33f6@lhs*) (cons 'begin (cons f33ee@b f33ef@b*)) ((lambda (f33fa@t) ((lambda (f33fc@ls/false) (if f33fc@ls/false (apply (lambda (f33fe@x*) (begin (f33df@check f33fe@x*) (list 'call-with-values (list 'lambda '() (car f33f7@rhs*)) (list 'lambda f33fe@x* (f33f4@f (cdr f33f6@lhs*) (cdr f33f7@rhs*)))))) f33fc@ls/false) ((lambda (f3400@t) ((lambda (f3402@ls/false) (if f3402@ls/false (apply (lambda (f3404@x* f3405@x) (begin (f33df@check (cons f3405@x f3404@x*)) (list 'call-with-values (list 'lambda '() (car f33f7@rhs*)) (list 'lambda (append f3404@x* f3405@x) (f33f4@f (cdr f33f6@lhs*) (cdr f33f7@rhs*)))))) f3402@ls/false) ((lambda (f3408@t) ((lambda (f340a@ls/false) (if f340a@ls/false (apply (lambda (f340c@others) (f2fb1@syntax-violation '#f '"malformed bindings" f33dc@stx f340c@others)) f340a@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3408@t))) (f2ec8@syntax-dispatch f3408@t 'any))) f3400@t))) (f2ec8@syntax-dispatch f3400@t '#(each+ any () any)))) f33fa@t))) (f2ec8@syntax-dispatch f33fa@t 'each-any))) (car f33f6@lhs*)))))) f33f4@f) f33ec@lhs* f33ed@rhs*))) f33ea@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f33e8@t))) (f2ec8@syntax-dispatch f33e8@t '(_ #(each (any any)) any . each-any)))) f33e0@t))) (f2ec8@syntax-dispatch f33e0@t '(_ () any . each-any)))) f33dc@stx))) '#f))) (set! f2e8a@trace-lambda-macro (lambda (f3412@stx) ((lambda (f3414@t) ((lambda (f3416@ls/false) (if f3416@ls/false (apply (lambda (f3418@who f3419@fmls f341a@b f341b@b*) (if (f2cc7@valid-bound-ids? f3419@fmls) (f2e7e@bless (list 'make-traced-procedure (list 'quote f3418@who) (cons 'lambda (cons f3419@fmls (cons f341a@b f341b@b*))))) (f2e82@invalid-fmls-error f3412@stx f3419@fmls))) f3416@ls/false) ((lambda (f3420@t) ((lambda (f3422@ls/false) (if f3422@ls/false (apply (lambda (f3424@who f3425@fmls f3426@last f3427@b f3428@b*) (if (f2cc7@valid-bound-ids? (cons f3426@last f3425@fmls)) (f2e7e@bless (list 'make-traced-procedure (list 'quote f3424@who) (cons 'lambda (cons (append f3425@fmls f3426@last) (cons f3427@b f3428@b*))))) (f2e82@invalid-fmls-error f3412@stx (append f3425@fmls f3426@last)))) f3422@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3420@t))) (f2ec8@syntax-dispatch f3420@t '(_ any #(each+ any () any) any . each-any)))) f3414@t))) (f2ec8@syntax-dispatch f3414@t '(_ any each-any any . each-any)))) f3412@stx))) (set! f2e8c@trace-define-macro (lambda (f342e@stx) ((lambda (f3430@t) ((lambda (f3432@ls/false) (if f3432@ls/false (apply (lambda (f3434@who f3435@fmls f3436@b f3437@b*) (if (f2cc7@valid-bound-ids? f3435@fmls) (f2e7e@bless (list 'define f3434@who (list 'make-traced-procedure (list 'quote f3434@who) (cons 'lambda (cons f3435@fmls (cons f3436@b f3437@b*)))))) (f2e82@invalid-fmls-error f342e@stx f3435@fmls))) f3432@ls/false) ((lambda (f343c@t) ((lambda (f343e@ls/false) (if f343e@ls/false (apply (lambda (f3440@who f3441@fmls f3442@last f3443@b f3444@b*) (if (f2cc7@valid-bound-ids? (cons f3442@last f3441@fmls)) (f2e7e@bless (list 'define f3440@who (list 'make-traced-procedure (list 'quote f3440@who) (cons 'lambda (cons (append f3441@fmls f3442@last) (cons f3443@b f3444@b*)))))) (f2e82@invalid-fmls-error f342e@stx (append f3441@fmls f3442@last)))) f343e@ls/false) ((lambda (f344a@t) ((lambda (f344c@ls/false) (if f344c@ls/false (apply (lambda (f344e@who f344f@expr) (if (f2cbd@id? f344e@who) (f2e7e@bless (list 'define f344e@who (list 'let (list (list 'v f344f@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote f344e@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (f2fb1@syntax-violation '#f '"invalid name" f342e@stx))) f344c@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f344a@t))) (f2ec8@syntax-dispatch f344a@t '(_ any any)))) f343c@t))) (f2ec8@syntax-dispatch f343c@t '(_ (any . #(each+ any () any)) any . each-any)))) f3430@t))) (f2ec8@syntax-dispatch f3430@t '(_ (any . each-any) any . each-any)))) f342e@stx))) (set! f2e8e@trace-define-syntax-macro (lambda (f3452@stx) ((lambda (f3454@t) ((lambda (f3456@ls/false) (if f3456@ls/false (apply (lambda (f3458@who f3459@expr) (if (f2cbd@id? f3458@who) (f2e7e@bless (list 'define-syntax f3458@who (list 'make-traced-macro (list 'quote f3458@who) f3459@expr))) (f2fb1@syntax-violation '#f '"invalid name" f3452@stx))) f3456@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3454@t))) (f2ec8@syntax-dispatch f3454@t '(_ any any)))) f3452@stx))) (set! f2e90@trace-let/rec-syntax (lambda (f345c@who) (lambda (f345e@stx) ((lambda (f3460@t) ((lambda (f3462@ls/false) (if f3462@ls/false (apply (lambda (f3464@lhs* f3465@rhs* f3466@b f3467@b*) (if (f2cc7@valid-bound-ids? f3464@lhs*) ((lambda (f346c@rhs*) (f2e7e@bless (cons f345c@who (cons (map list f3464@lhs* f346c@rhs*) (cons f3466@b f3467@b*))))) (map (lambda (f346e@lhs f346f@rhs) (list 'make-traced-macro (list 'quote f346e@lhs) f346f@rhs)) f3464@lhs* f3465@rhs*)) (f2e82@invalid-fmls-error f345e@stx f3464@lhs*))) f3462@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3460@t))) (f2ec8@syntax-dispatch f3460@t '(_ #(each (any any)) any . each-any)))) f345e@stx)))) (set! f2e92@trace-let-syntax-macro (f2e90@trace-let/rec-syntax 'let-syntax)) (set! f2e94@trace-letrec-syntax-macro (f2e90@trace-let/rec-syntax 'letrec-syntax)) (set! f2e96@guard-macro (lambda (f3472@x) ((lambda (f3475@gen-clauses) (begin (set! f3475@gen-clauses (lambda (f348c@con f348d@outerk f348e@clause*) ((lambda (f3493@f f3495@f*) (begin (set! f3493@f (lambda (f34cc@x f34cd@k) ((lambda (f34d0@t) ((lambda (f34d2@ls/false) (if f34d2@ls/false (apply (lambda (f34d4@e f34d5@p) ((lambda (f34d8@t) (list 'let (list (list f34d8@t f34d4@e)) (list 'if f34d8@t (list f34d5@p f34d8@t) f34cd@k))) (gensym))) f34d2@ls/false) ((lambda (f34da@t) ((lambda (f34dc@ls/false) (if f34dc@ls/false (apply (lambda (f34de@e) ((lambda (f34e0@t) (list 'let (list (list f34e0@t f34de@e)) (list 'if f34e0@t f34e0@t f34cd@k))) (gensym))) f34dc@ls/false) ((lambda (f34e2@t) ((lambda (f34e4@ls/false) (if f34e4@ls/false (apply (lambda (f34e6@e f34e7@v f34e8@v*) (list 'if f34e6@e (cons 'begin (cons f34e7@v f34e8@v*)) f34cd@k)) f34e4@ls/false) ((lambda (f34ec@t) ((lambda (f34ee@ls/false) (if f34ee@ls/false (apply (lambda () (f2fb1@syntax-violation '#f '"invalid guard clause" f34cc@x)) f34ee@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f34ec@t))) (f2ec8@syntax-dispatch f34ec@t '_))) f34e2@t))) (f2ec8@syntax-dispatch f34e2@t '(any any . each-any)))) f34da@t))) (f2ec8@syntax-dispatch f34da@t '(any)))) f34d0@t))) (f2ec8@syntax-dispatch f34d0@t '(any #(scheme-id =>) any)))) f34cc@x))) (set! f3495@f* (lambda (f34a2@x*) ((lambda (f34a4@t) ((lambda (f34a6@ls/false) (if f34a6@ls/false (apply (lambda () ((lambda (f34a8@g) (values (list f34a8@g (list 'lambda '() (list 'raise-continuable f348c@con))) f34a8@g)) (gensym))) f34a6@ls/false) ((lambda (f34aa@t) ((lambda (f34ac@ls/false) (if f34ac@ls/false (apply (lambda (f34ae@e f34af@e*) (values (cons 'begin (cons f34ae@e f34af@e*)) '#f)) f34ac@ls/false) ((lambda (f34b2@t) ((lambda (f34b4@ls/false) (if f34b4@ls/false (apply (lambda (f34b6@cls f34b7@cls*) (call-with-values (lambda () (f3495@f* f34b7@cls*)) (lambda (f34be@f34bb f34bf@f34bd) ((lambda (f34c2@g f34c3@e) (values (f3493@f f34b6@cls f34c3@e) f34c2@g)) f34bf@f34bd f34be@f34bb)))) f34b4@ls/false) ((lambda (f34c6@t) ((lambda (f34c8@ls/false) (if f34c8@ls/false (apply (lambda (f34ca@others) (f2fb1@syntax-violation '#f '"invalid guard clause" f34ca@others)) f34c8@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f34c6@t))) (f2ec8@syntax-dispatch f34c6@t 'any))) f34b2@t))) (f2ec8@syntax-dispatch f34b2@t '(any . any)))) f34aa@t))) (f2ec8@syntax-dispatch f34aa@t '((#(scheme-id else) any . each-any))))) f34a4@t))) (f2ec8@syntax-dispatch f34a4@t '()))) f34a2@x*))) (call-with-values (lambda () (f3495@f* f348e@clause*)) (lambda (f349a@f3497 f349b@f3499) ((lambda (f349e@raisek f349f@code) (if f349e@raisek (list (list 'call/cc (list 'lambda (list f349e@raisek) (list f348d@outerk (list 'lambda '() f349f@code))))) (list f348d@outerk (list 'lambda '() f349f@code)))) f349b@f3499 f349a@f3497))))) '#f '#f))) ((lambda (f3476@t) ((lambda (f3478@ls/false) (if (and f3478@ls/false (apply (lambda (f347a@con f347b@clause* f347c@b f347d@b*) (f2cbd@id? f347a@con)) f3478@ls/false)) (apply (lambda (f3482@con f3483@clause* f3484@b f3485@b*) ((lambda (f348a@outerk) (f2e7e@bless (list (list 'call/cc (list 'lambda (list f348a@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list f3482@con) (f3475@gen-clauses f3482@con f348a@outerk f3483@clause*)) (cons 'lambda (cons '() (cons f3484@b f3485@b*)))))))))) (gensym))) f3478@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3476@t))) (f2ec8@syntax-dispatch f3476@t '(_ (any . each-any) any . each-any)))) f3472@x))) '#f))) (set! f2e98@define-enumeration-macro (lambda (f34f0@stx) ((lambda (f34f3@set? f34f5@remove-dups) (begin (set! f34f3@set? (lambda (f350c@x) (or (null? f350c@x) (and (not (memq (car f350c@x) (cdr f350c@x))) (f34f3@set? (cdr f350c@x)))))) (set! f34f5@remove-dups (lambda (f350a@ls) (if (null? f350a@ls) '() (cons (car f350a@ls) (f34f5@remove-dups (remq (car f350a@ls) (cdr f350a@ls))))))) ((lambda (f34f6@t) ((lambda (f34f8@ls/false) (if (and f34f8@ls/false (apply (lambda (f34fa@name f34fb@id* f34fc@maker) (and (f2cbd@id? f34fa@name) (f2cbd@id? f34fc@maker) (for-all f2cbd@id? f34fb@id*))) f34f8@ls/false)) (apply (lambda (f3500@name f3501@id* f3502@maker) ((lambda (f3506@name* f3507@mk) (f2e7e@bless (list 'begin (list 'define f3507@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote f3506@name*)))) (list 'define-syntax f3500@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote f3506@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote f3500@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax f3502@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote f3502@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote f3506@name*)) (cons 'syntax-violation (cons (list 'quote f3502@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons f3507@mk '('(n* ...)))))))))))) (f34f5@remove-dups (f2fb7@syntax->datum f3501@id*)) (gensym))) f34f8@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f34f6@t))) (f2ec8@syntax-dispatch f34f6@t '(_ any each-any any)))) f34f0@stx))) '#f '#f))) (set! f2e9a@time-macro (lambda (f350e@stx) ((lambda (f3510@t) ((lambda (f3512@ls/false) (if f3512@ls/false (apply (lambda (f3514@expr) (f2e7e@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() f3514@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) f3512@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3510@t))) (f2ec8@syntax-dispatch f3510@t '(_ any)))) f350e@stx))) (set! f2e9c@delay-macro (lambda (f3516@stx) ((lambda (f3518@t) ((lambda (f351a@ls/false) (if f351a@ls/false (apply (lambda (f351c@expr) (f2e7e@bless (list 'make-promise (list 'lambda '() f351c@expr)))) f351a@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3518@t))) (f2ec8@syntax-dispatch f3518@t '(_ any)))) f3516@stx))) (set! f2e9e@assert-macro (lambda (f351e@stx) ((lambda (f3520@t) ((lambda (f3522@ls/false) (if f3522@ls/false (apply (lambda (f3524@expr) ((lambda (f3526@pos) (f2e7e@bless (list 'unless f3524@expr (list 'assertion-error (list 'quote f3524@expr) (list 'quote f3526@pos))))) (or (f2fa9@expression-position f351e@stx) (f2fa9@expression-position f3524@expr)))) f3522@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3520@t))) (f2ec8@syntax-dispatch f3520@t '(_ any)))) f351e@stx))) (set! f2ea0@endianness-macro (lambda (f3528@stx) ((lambda (f352a@t) ((lambda (f352c@ls/false) (if f352c@ls/false (apply (lambda (f352e@e) ((lambda (f3530@t) (if (memv f3530@t '(little)) (f2e7e@bless ''little) (if (memv f3530@t '(big)) (f2e7e@bless ''big) (f2fb1@syntax-violation '#f '"endianness must be big or little" f3528@stx)))) (f2fb7@syntax->datum f352e@e))) f352c@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f352a@t))) (f2ec8@syntax-dispatch f352a@t '(_ any)))) f3528@stx))) (set! f2ea2@identifier-syntax-macro (lambda (f3532@stx) ((lambda (f3534@t) ((lambda (f3536@ls/false) (if f3536@ls/false (apply (lambda (f3538@expr) (f2e7e@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax f3538@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax f3538@expr) '((syntax (e* ...)))))))))) f3536@ls/false) ((lambda (f353a@t) ((lambda (f353c@ls/false) (if (and f353c@ls/false (apply (lambda (f353e@id1 f353f@expr1 f3540@id2 f3541@expr2 f3542@expr3) (and (f2cbd@id? f353e@id1) (f2cbd@id? f3540@id2) (f2cbd@id? f3541@expr2))) f353c@ls/false)) (apply (lambda (f3548@id1 f3549@expr1 f354a@id2 f354b@expr2 f354c@expr3) (f2e7e@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax f3549@expr1)) (list (list 'set! 'id f354b@expr2) (list 'syntax f354c@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons f3549@expr1 '(e* ...))))))))) f353c@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f353a@t))) (f2ec8@syntax-dispatch f353a@t '(_ (any any) ((#(scheme-id set!) any any) any))))) f3534@t))) (f2ec8@syntax-dispatch f3534@t '(_ any)))) f3532@stx))) (set! f2ea4@do-macro (lambda (f3552@stx) ((lambda (f3555@bind) (begin (set! f3555@bind (lambda (f356c@x) ((lambda (f356e@t) ((lambda (f3570@ls/false) (if f3570@ls/false (apply (lambda (f3572@x f3573@init) (list f3572@x f3573@init f3572@x)) f3570@ls/false) ((lambda (f3576@t) ((lambda (f3578@ls/false) (if f3578@ls/false (apply (lambda (f357a@x f357b@init f357c@step) (list f357a@x f357b@init f357c@step)) f3578@ls/false) ((lambda (f3580@t) ((lambda (f3582@ls/false) (if f3582@ls/false (apply (lambda () (f2fb1@syntax-violation '#f '"invalid binding" f3552@stx)) f3582@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3580@t))) (f2ec8@syntax-dispatch f3580@t '_))) f3576@t))) (f2ec8@syntax-dispatch f3576@t '(any any any)))) f356e@t))) (f2ec8@syntax-dispatch f356e@t '(any any)))) f356c@x))) ((lambda (f3556@t) ((lambda (f3558@ls/false) (if f3558@ls/false (apply (lambda (f355a@binding* f355b@test f355c@expr* f355d@command*) ((lambda (f3562@t) ((lambda (f3564@ls/false) (if f3564@ls/false (apply (lambda (f3566@x* f3567@init* f3568@step*) (if (f2cc7@valid-bound-ids? f3566@x*) (f2e7e@bless (list 'letrec (list (list 'loop (list 'lambda f3566@x* (list 'if f355b@test (cons 'begin (cons '(if #f #f) f355c@expr*)) (cons 'begin (append f355d@command* (list (cons 'loop f3568@step*)))))))) (cons 'loop f3567@init*))) (f2fb1@syntax-violation '#f '"invalid bindings" f3552@stx))) f3564@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3562@t))) (f2ec8@syntax-dispatch f3562@t '#(each (any any any))))) (map f3555@bind f355a@binding*))) f3558@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3556@t))) (f2ec8@syntax-dispatch f3556@t '(_ each-any (any . each-any) . each-any)))) f3552@stx))) '#f))) (set! f2ea6@let*-macro (lambda (f3584@stx) ((lambda (f3586@t) ((lambda (f3588@ls/false) (if (and f3588@ls/false (apply (lambda (f358a@lhs* f358b@rhs* f358c@b f358d@b*) (for-all f2cbd@id? f358a@lhs*)) f3588@ls/false)) (apply (lambda (f3592@lhs* f3593@rhs* f3594@b f3595@b*) (f2e7e@bless ((letrec ((f359a@f (lambda (f359c@x*) (if (null? f359c@x*) (cons 'let (cons '() (cons f3594@b f3595@b*))) (list 'let (list (car f359c@x*)) (f359a@f (cdr f359c@x*))))))) f359a@f) (map list f3592@lhs* f3593@rhs*)))) f3588@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3586@t))) (f2ec8@syntax-dispatch f3586@t '(_ #(each (any any)) any . each-any)))) f3584@stx))) (set! f2ea8@or-macro (lambda (f359e@stx) ((lambda (f35a0@t) ((lambda (f35a2@ls/false) (if f35a2@ls/false (apply (lambda () '#f) f35a2@ls/false) ((lambda (f35a4@t) ((lambda (f35a6@ls/false) (if f35a6@ls/false (apply (lambda (f35a8@e f35a9@e*) (f2e7e@bless ((letrec ((f35ac@f (lambda (f35ae@e f35af@e*) (if (null? f35af@e*) (list 'begin '#f f35ae@e) (list 'let (list (list 't f35ae@e)) (list 'if 't 't (f35ac@f (car f35af@e*) (cdr f35af@e*)))))))) f35ac@f) f35a8@e f35a9@e*))) f35a6@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f35a4@t))) (f2ec8@syntax-dispatch f35a4@t '(_ any . each-any)))) f35a0@t))) (f2ec8@syntax-dispatch f35a0@t '(_)))) f359e@stx))) (set! f2eaa@and-macro (lambda (f35b2@stx) ((lambda (f35b4@t) ((lambda (f35b6@ls/false) (if f35b6@ls/false (apply (lambda () '#t) f35b6@ls/false) ((lambda (f35b8@t) ((lambda (f35ba@ls/false) (if f35ba@ls/false (apply (lambda (f35bc@e f35bd@e*) (f2e7e@bless ((letrec ((f35c0@f (lambda (f35c2@e f35c3@e*) (if (null? f35c3@e*) (list 'begin '#f f35c2@e) (cons 'if (cons f35c2@e (cons (f35c0@f (car f35c3@e*) (cdr f35c3@e*)) '(#f)))))))) f35c0@f) f35bc@e f35bd@e*))) f35ba@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f35b8@t))) (f2ec8@syntax-dispatch f35b8@t '(_ any . each-any)))) f35b4@t))) (f2ec8@syntax-dispatch f35b4@t '(_)))) f35b2@stx))) (set! f2eac@cond-macro (lambda (f35c6@stx) ((lambda (f35c8@t) ((lambda (f35ca@ls/false) (if f35ca@ls/false (apply (lambda (f35cc@cls f35cd@cls*) (f2e7e@bless ((letrec ((f35d0@f (lambda (f35d2@cls f35d3@cls*) (if (null? f35d3@cls*) ((lambda (f35d6@t) ((lambda (f35d8@ls/false) (if f35d8@ls/false (apply (lambda (f35da@e f35db@e*) (cons 'begin (cons f35da@e f35db@e*))) f35d8@ls/false) ((lambda (f35de@t) ((lambda (f35e0@ls/false) (if f35e0@ls/false (apply (lambda (f35e2@e f35e3@p) (list 'let (list (list 't f35e2@e)) (list 'if 't (cons f35e3@p '(t))))) f35e0@ls/false) ((lambda (f35e6@t) ((lambda (f35e8@ls/false) (if f35e8@ls/false (apply (lambda (f35ea@e) (cons 'or (cons f35ea@e '((if #f #f))))) f35e8@ls/false) ((lambda (f35ec@t) ((lambda (f35ee@ls/false) (if f35ee@ls/false (apply (lambda (f35f0@e f35f1@e*) (list 'if f35f0@e (cons 'begin f35f1@e*))) f35ee@ls/false) ((lambda (f35f4@t) ((lambda (f35f6@ls/false) (if f35f6@ls/false (apply (lambda () (f2fb1@syntax-violation '#f '"invalid last clause" f35c6@stx)) f35f6@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f35f4@t))) (f2ec8@syntax-dispatch f35f4@t '_))) f35ec@t))) (f2ec8@syntax-dispatch f35ec@t '(any . each-any)))) f35e6@t))) (f2ec8@syntax-dispatch f35e6@t '(any)))) f35de@t))) (f2ec8@syntax-dispatch f35de@t '(any #(scheme-id =>) any)))) f35d6@t))) (f2ec8@syntax-dispatch f35d6@t '(#(scheme-id else) any . each-any)))) f35d2@cls) ((lambda (f35f8@t) ((lambda (f35fa@ls/false) (if f35fa@ls/false (apply (lambda (f35fc@e f35fd@e*) (f2fb1@syntax-violation '#f '"incorrect position of keyword else" f35c6@stx)) f35fa@ls/false) ((lambda (f3600@t) ((lambda (f3602@ls/false) (if f3602@ls/false (apply (lambda (f3604@e f3605@p) (list 'let (list (list 't f3604@e)) (list 'if 't (cons f3605@p '(t)) (f35d0@f (car f35d3@cls*) (cdr f35d3@cls*))))) f3602@ls/false) ((lambda (f3608@t) ((lambda (f360a@ls/false) (if f360a@ls/false (apply (lambda (f360c@e) (list 'or f360c@e (f35d0@f (car f35d3@cls*) (cdr f35d3@cls*)))) f360a@ls/false) ((lambda (f360e@t) ((lambda (f3610@ls/false) (if f3610@ls/false (apply (lambda (f3612@e f3613@e*) (list 'if f3612@e (cons 'begin f3613@e*) (f35d0@f (car f35d3@cls*) (cdr f35d3@cls*)))) f3610@ls/false) ((lambda (f3616@t) ((lambda (f3618@ls/false) (if f3618@ls/false (apply (lambda () (f2fb1@syntax-violation '#f '"invalid last clause" f35c6@stx)) f3618@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3616@t))) (f2ec8@syntax-dispatch f3616@t '_))) f360e@t))) (f2ec8@syntax-dispatch f360e@t '(any . each-any)))) f3608@t))) (f2ec8@syntax-dispatch f3608@t '(any)))) f3600@t))) (f2ec8@syntax-dispatch f3600@t '(any #(scheme-id =>) any)))) f35f8@t))) (f2ec8@syntax-dispatch f35f8@t '(#(scheme-id else) any . each-any)))) f35d2@cls))))) f35d0@f) f35cc@cls f35cd@cls*))) f35ca@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f35c8@t))) (f2ec8@syntax-dispatch f35c8@t '(_ any . each-any)))) f35c6@stx))) (set! f2eae@do-include (lambda (f361a@stx f361b@id f361c@filename) ((lambda (f3620@filename) (begin (if (not (and (string? f3620@filename) (f2cbd@id? f361b@id))) (f2fb1@syntax-violation '#f '"invalid syntax" f361a@stx) (void)) (cons (f2e7e@bless 'begin) (with-input-from-file f3620@filename (lambda () ((letrec ((f3622@f (lambda (f3624@ls) ((lambda (f3626@x) (if (eof-object? f3626@x) (reverse f3624@ls) (f3622@f (cons (f2c9b@datum->stx f361b@id f3626@x) f3624@ls)))) (f285a@f2777@read-annotated))))) f3622@f) '())))))) (f2cd3@stx->datum f361c@filename)))) (set! f2eb0@include-macro (lambda (f3628@e) ((lambda (f362a@t) ((lambda (f362c@ls/false) (if f362c@ls/false (apply (lambda (f362e@id f362f@filename) (f2eae@do-include f3628@e f362e@id f362f@filename)) f362c@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f362a@t))) (f2ec8@syntax-dispatch f362a@t '(any any)))) f3628@e))) (set! f2eb2@include-into-macro (lambda (f3632@e) ((lambda (f3634@t) ((lambda (f3636@ls/false) (if f3636@ls/false (apply (lambda (f3638@id f3639@filename) (f2eae@do-include f3632@e f3638@id f3639@filename)) f3636@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3634@t))) (f2ec8@syntax-dispatch f3634@t '(_ any any)))) f3632@e))) (set! f2eb4@syntax-rules-macro (lambda (f363c@e) ((lambda (f363e@t) ((lambda (f3640@ls/false) (if f3640@ls/false (apply (lambda (f3642@lits f3643@pat* f3644@tmp*) (begin (f2ece@verify-literals f3642@lits f363c@e) (f2e7e@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons f3642@lits (map (lambda (f3648@pat f3649@tmp) ((lambda (f364c@t) ((lambda (f364e@ls/false) (if f364e@ls/false (apply (lambda (f3650@rest) (list (cons 'g f3650@rest) (list 'syntax f3649@tmp))) f364e@ls/false) ((lambda (f3652@t) ((lambda (f3654@ls/false) (if f3654@ls/false (apply (lambda () (f2fb1@syntax-violation '#f '"invalid syntax-rules pattern" f363c@e f3648@pat)) f3654@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3652@t))) (f2ec8@syntax-dispatch f3652@t '_))) f364c@t))) (f2ec8@syntax-dispatch f364c@t '(_ . any)))) f3648@pat)) f3643@pat* f3644@tmp*)))))))) f3640@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f363e@t))) (f2ec8@syntax-dispatch f363e@t '(_ each-any . #(each (any any)))))) f363c@e))) (set! f2eb6@quasiquote-macro ((lambda () ((lambda (f3657@datum f3673@quasicons* f3675@quasicons f3677@quasiappend f3679@quasivector f367b@vquasi f367d@quasi) (begin (set! f3657@datum (lambda (f3758@x) (list (f2e52@scheme-stx 'quote) (f2ca5@mkstx f3758@x '() '() '())))) (set! f3673@quasicons* (lambda (f3750@x f3751@y) ((letrec ((f3754@f (lambda (f3756@x) (if (null? f3756@x) f3751@y (f3675@quasicons (car f3756@x) (f3754@f (cdr f3756@x))))))) f3754@f) f3750@x))) (set! f3675@quasicons (lambda (f372a@x f372b@y) ((lambda (f372e@t) ((lambda (f3730@ls/false) (if f3730@ls/false (apply (lambda (f3732@dy) ((lambda (f3734@t) ((lambda (f3736@ls/false) (if f3736@ls/false (apply (lambda (f3738@dx) (list (f2e52@scheme-stx 'quote) (cons f3738@dx f3732@dy))) f3736@ls/false) ((lambda (f373a@t) ((lambda (f373c@ls/false) (if f373c@ls/false (apply (lambda () ((lambda (f373e@t) ((lambda (f3740@ls/false) (if f3740@ls/false (apply (lambda () (list (f2e52@scheme-stx 'list) f372a@x)) f3740@ls/false) ((lambda (f3742@t) ((lambda (f3744@ls/false) (if f3744@ls/false (apply (lambda () (list (f2e52@scheme-stx 'cons) f372a@x f372b@y)) f3744@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3742@t))) (f2ec8@syntax-dispatch f3742@t '_))) f373e@t))) (f2ec8@syntax-dispatch f373e@t '()))) f3732@dy)) f373c@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f373a@t))) (f2ec8@syntax-dispatch f373a@t '_))) f3734@t))) (f2ec8@syntax-dispatch f3734@t '(#(scheme-id quote) any)))) f372a@x)) f3730@ls/false) ((lambda (f3746@t) ((lambda (f3748@ls/false) (if f3748@ls/false (apply (lambda (f374a@stuff) (cons* (f2e52@scheme-stx 'list) f372a@x f374a@stuff)) f3748@ls/false) ((lambda (f374c@t) ((lambda (f374e@ls/false) (if f374e@ls/false (apply (lambda () (list (f2e52@scheme-stx 'cons) f372a@x f372b@y)) f374e@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f374c@t))) (f2ec8@syntax-dispatch f374c@t '_))) f3746@t))) (f2ec8@syntax-dispatch f3746@t '(#(scheme-id list) . each-any)))) f372e@t))) (f2ec8@syntax-dispatch f372e@t '(#(scheme-id quote) any)))) f372b@y))) (set! f3677@quasiappend (lambda (f3710@x f3711@y) ((lambda (f3714@ls) (if (null? f3714@ls) (list (f2e52@scheme-stx 'quote) '()) (if (null? (cdr f3714@ls)) (car f3714@ls) (cons* (f2e52@scheme-stx 'append) f3714@ls)))) ((letrec ((f3716@f (lambda (f3718@x) (if (null? f3718@x) ((lambda (f371a@t) ((lambda (f371c@ls/false) (if f371c@ls/false (apply (lambda () '()) f371c@ls/false) ((lambda (f371e@t) ((lambda (f3720@ls/false) (if f3720@ls/false (apply (lambda () (list f3711@y)) f3720@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f371e@t))) (f2ec8@syntax-dispatch f371e@t '_))) f371a@t))) (f2ec8@syntax-dispatch f371a@t '(#(scheme-id quote) ())))) f3711@y) ((lambda (f3722@t) ((lambda (f3724@ls/false) (if f3724@ls/false (apply (lambda () (f3716@f (cdr f3718@x))) f3724@ls/false) ((lambda (f3726@t) ((lambda (f3728@ls/false) (if f3728@ls/false (apply (lambda () (cons (car f3718@x) (f3716@f (cdr f3718@x)))) f3728@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3726@t))) (f2ec8@syntax-dispatch f3726@t '_))) f3722@t))) (f2ec8@syntax-dispatch f3722@t '(#(scheme-id quote) ())))) (car f3718@x)))))) f3716@f) f3710@x)))) (set! f3679@quasivector (lambda (f36de@x) ((lambda (f36e0@pat-x) ((lambda (f36e2@t) ((lambda (f36e4@ls/false) (if f36e4@ls/false (apply (lambda (f36e6@x*) (list (f2e52@scheme-stx 'quote) (list->vector f36e6@x*))) f36e4@ls/false) ((lambda (f36e8@t) ((lambda (f36ea@ls/false) (if f36ea@ls/false (apply (lambda () ((letrec ((f36ec@f (lambda (f36ee@x f36ef@k) ((lambda (f36f2@t) ((lambda (f36f4@ls/false) (if f36f4@ls/false (apply (lambda (f36f6@x*) (f36ef@k (map (lambda (f36f8@x) (list (f2e52@scheme-stx 'quote) f36f8@x)) f36f6@x*))) f36f4@ls/false) ((lambda (f36fa@t) ((lambda (f36fc@ls/false) (if f36fc@ls/false (apply (lambda (f36fe@x*) (f36ef@k f36fe@x*)) f36fc@ls/false) ((lambda (f3700@t) ((lambda (f3702@ls/false) (if f3702@ls/false (apply (lambda (f3704@x f3705@y) (f36ec@f f3705@y (lambda (f3708@ls) (f36ef@k (cons f3704@x f3708@ls))))) f3702@ls/false) ((lambda (f370a@t) ((lambda (f370c@ls/false) (if f370c@ls/false (apply (lambda () (list (f2e52@scheme-stx 'list->vector) f36e0@pat-x)) f370c@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f370a@t))) (f2ec8@syntax-dispatch f370a@t '_))) f3700@t))) (f2ec8@syntax-dispatch f3700@t '(#(scheme-id cons) any any)))) f36fa@t))) (f2ec8@syntax-dispatch f36fa@t '(#(scheme-id list) . each-any)))) f36f2@t))) (f2ec8@syntax-dispatch f36f2@t '(#(scheme-id quote) each-any)))) f36ee@x)))) f36ec@f) f36de@x (lambda (f370e@ls) (cons* (f2e52@scheme-stx 'vector) f370e@ls)))) f36ea@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f36e8@t))) (f2ec8@syntax-dispatch f36e8@t '_))) f36e2@t))) (f2ec8@syntax-dispatch f36e2@t '(#(scheme-id quote) each-any)))) f36e0@pat-x)) f36de@x))) (set! f367b@vquasi (lambda (f36bc@p f36bd@lev) ((lambda (f36c0@t) ((lambda (f36c2@ls/false) (if f36c2@ls/false (apply (lambda (f36c4@p f36c5@q) ((lambda (f36c8@t) ((lambda (f36ca@ls/false) (if f36ca@ls/false (apply (lambda (f36cc@p) (if (= f36bd@lev '0) (f3673@quasicons* f36cc@p (f367b@vquasi f36c5@q f36bd@lev)) (f3675@quasicons (f3675@quasicons (f3657@datum 'unquote) (f367d@quasi f36cc@p (- f36bd@lev '1))) (f367b@vquasi f36c5@q f36bd@lev)))) f36ca@ls/false) ((lambda (f36ce@t) ((lambda (f36d0@ls/false) (if f36d0@ls/false (apply (lambda (f36d2@p) (if (= f36bd@lev '0) (f3677@quasiappend f36d2@p (f367b@vquasi f36c5@q f36bd@lev)) (f3675@quasicons (f3675@quasicons (f3657@datum 'unquote-splicing) (f367d@quasi f36d2@p (- f36bd@lev '1))) (f367b@vquasi f36c5@q f36bd@lev)))) f36d0@ls/false) ((lambda (f36d4@t) ((lambda (f36d6@ls/false) (if f36d6@ls/false (apply (lambda (f36d8@p) (f3675@quasicons (f367d@quasi f36d8@p f36bd@lev) (f367b@vquasi f36c5@q f36bd@lev))) f36d6@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f36d4@t))) (f2ec8@syntax-dispatch f36d4@t 'any))) f36ce@t))) (f2ec8@syntax-dispatch f36ce@t '(#(scheme-id unquote-splicing) . each-any)))) f36c8@t))) (f2ec8@syntax-dispatch f36c8@t '(#(scheme-id unquote) . each-any)))) f36c4@p)) f36c2@ls/false) ((lambda (f36da@t) ((lambda (f36dc@ls/false) (if f36dc@ls/false (apply (lambda () (list (f2e52@scheme-stx 'quote) '())) f36dc@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f36da@t))) (f2ec8@syntax-dispatch f36da@t '()))) f36c0@t))) (f2ec8@syntax-dispatch f36c0@t '(any . any)))) f36bc@p))) (set! f367d@quasi (lambda (f3686@p f3687@lev) ((lambda (f368a@t) ((lambda (f368c@ls/false) (if f368c@ls/false (apply (lambda (f368e@p) (if (= f3687@lev '0) f368e@p (f3675@quasicons (f3657@datum 'unquote) (f367d@quasi (list f368e@p) (- f3687@lev '1))))) f368c@ls/false) ((lambda (f3690@t) ((lambda (f3692@ls/false) (if f3692@ls/false (apply (lambda (f3694@p f3695@q) (if (= f3687@lev '0) (f3673@quasicons* f3694@p (f367d@quasi f3695@q f3687@lev)) (f3675@quasicons (f3675@quasicons (f3657@datum 'unquote) (f367d@quasi f3694@p (- f3687@lev '1))) (f367d@quasi f3695@q f3687@lev)))) f3692@ls/false) ((lambda (f3698@t) ((lambda (f369a@ls/false) (if f369a@ls/false (apply (lambda (f369c@p f369d@q) (if (= f3687@lev '0) (f3677@quasiappend f369c@p (f367d@quasi f369d@q f3687@lev)) (f3675@quasicons (f3675@quasicons (f3657@datum 'unquote-splicing) (f367d@quasi f369c@p (- f3687@lev '1))) (f367d@quasi f369d@q f3687@lev)))) f369a@ls/false) ((lambda (f36a0@t) ((lambda (f36a2@ls/false) (if f36a2@ls/false (apply (lambda (f36a4@p) (f3675@quasicons (f3657@datum 'quasiquote) (f367d@quasi (list f36a4@p) (+ f3687@lev '1)))) f36a2@ls/false) ((lambda (f36a6@t) ((lambda (f36a8@ls/false) (if f36a8@ls/false (apply (lambda (f36aa@p f36ab@q) (f3675@quasicons (f367d@quasi f36aa@p f3687@lev) (f367d@quasi f36ab@q f3687@lev))) f36a8@ls/false) ((lambda (f36ae@t) ((lambda (f36b0@ls/false) (if (and f36b0@ls/false (apply (lambda (f36b2@x) (not (f2c85@stx? f36b2@x))) f36b0@ls/false)) (apply (lambda (f36b4@x) (f3679@quasivector (f367b@vquasi f36b4@x f3687@lev))) f36b0@ls/false) ((lambda (f36b6@t) ((lambda (f36b8@ls/false) (if f36b8@ls/false (apply (lambda (f36ba@p) (list (f2e52@scheme-stx 'quote) f36ba@p)) f36b8@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f36b6@t))) (f2ec8@syntax-dispatch f36b6@t 'any))) f36ae@t))) (f2ec8@syntax-dispatch f36ae@t '#(vector each-any)))) f36a6@t))) (f2ec8@syntax-dispatch f36a6@t '(any . any)))) f36a0@t))) (f2ec8@syntax-dispatch f36a0@t '(#(scheme-id quasiquote) any)))) f3698@t))) (f2ec8@syntax-dispatch f3698@t '((#(scheme-id unquote-splicing) . each-any) . any)))) f3690@t))) (f2ec8@syntax-dispatch f3690@t '((#(scheme-id unquote) . each-any) . any)))) f368a@t))) (f2ec8@syntax-dispatch f368a@t '(#(scheme-id unquote) any)))) f3686@p))) (lambda (f367e@x) ((lambda (f3680@t) ((lambda (f3682@ls/false) (if f3682@ls/false (apply (lambda (f3684@e) (f367d@quasi f3684@e '0)) f3682@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3680@t))) (f2ec8@syntax-dispatch f3680@t '(_ any)))) f367e@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! f2eb8@quasisyntax-macro ((lambda () ((lambda (f375b@quasi) (begin (set! f375b@quasi (lambda (f3776@p f3777@lev) ((lambda (f377a@t) ((lambda (f377c@ls/false) (if f377c@ls/false (apply (lambda (f377e@p) (if (= f3777@lev '0) ((lambda (f3780@g) (values (list f3780@g) (list f377e@p) f3780@g)) (gensym)) (call-with-values (lambda () (f375b@quasi f377e@p (- f3777@lev '1))) (lambda (f3788@f3783 f3789@f3785 f378a@f3787) ((lambda (f378e@p f378f@rhs* f3790@lhs*) (values f3790@lhs* f378f@rhs* (list 'unsyntax f378e@p))) f378a@f3787 f3789@f3785 f3788@f3783))))) f377c@ls/false) ((lambda (f3794@t) ((lambda (f3796@ls/false) (if (and f3796@ls/false (apply (lambda () (= f3777@lev '0)) f3796@ls/false)) (apply (lambda () (f2fb1@syntax-violation '#f '"incorrect use of unsyntax" f3776@p)) f3796@ls/false) ((lambda (f3798@t) ((lambda (f379a@ls/false) (if f379a@ls/false (apply (lambda (f379c@p* f379d@q) (call-with-values (lambda () (f375b@quasi f379d@q f3777@lev)) (lambda (f37a6@f37a1 f37a7@f37a3 f37a8@f37a5) ((lambda (f37ac@q f37ad@rhs* f37ae@lhs*) (if (= f3777@lev '0) ((lambda (f37b2@g*) (values (append f37b2@g* f37ae@lhs*) (append f379c@p* f37ad@rhs*) (append f37b2@g* f37ac@q))) (map (lambda (f37b4@x) (gensym)) f379c@p*)) (call-with-values (lambda () (f375b@quasi f379c@p* (- f3777@lev '1))) (lambda (f37bc@f37b7 f37bd@f37b9 f37be@f37bb) ((lambda (f37c2@p* f37c3@rhs2* f37c4@lhs2*) (values (append f37c4@lhs2* f37ae@lhs*) (append f37c3@rhs2* f37ad@rhs*) (cons (cons 'unsyntax f37c2@p*) f37ac@q))) f37be@f37bb f37bd@f37b9 f37bc@f37b7))))) f37a8@f37a5 f37a7@f37a3 f37a6@f37a1)))) f379a@ls/false) ((lambda (f37c8@t) ((lambda (f37ca@ls/false) (if f37ca@ls/false (apply (lambda (f37cc@p* f37cd@q) (call-with-values (lambda () (f375b@quasi f37cd@q f3777@lev)) (lambda (f37d6@f37d1 f37d7@f37d3 f37d8@f37d5) ((lambda (f37dc@q f37dd@rhs* f37de@lhs*) (if (= f3777@lev '0) ((lambda (f37e2@g*) (values (append (map (lambda (f37e4@g) (cons f37e4@g '(...))) f37e2@g*) f37de@lhs*) (append f37cc@p* f37dd@rhs*) (append (apply append (map (lambda (f37e6@g) (cons f37e6@g '(...))) f37e2@g*)) f37dc@q))) (map (lambda (f37e8@x) (gensym)) f37cc@p*)) (call-with-values (lambda () (f375b@quasi f37cc@p* (- f3777@lev '1))) (lambda (f37f0@f37eb f37f1@f37ed f37f2@f37ef) ((lambda (f37f6@p* f37f7@rhs2* f37f8@lhs2*) (values (append f37f8@lhs2* f37de@lhs*) (append f37f7@rhs2* f37dd@rhs*) (cons (cons 'unsyntax-splicing f37f6@p*) f37dc@q))) f37f2@f37ef f37f1@f37ed f37f0@f37eb))))) f37d8@f37d5 f37d7@f37d3 f37d6@f37d1)))) f37ca@ls/false) ((lambda (f37fc@t) ((lambda (f37fe@ls/false) (if (and f37fe@ls/false (apply (lambda () (= f3777@lev '0)) f37fe@ls/false)) (apply (lambda () (f2fb1@syntax-violation '#f '"incorrect use of unsyntax-splicing" f3776@p)) f37fe@ls/false) ((lambda (f3800@t) ((lambda (f3802@ls/false) (if f3802@ls/false (apply (lambda (f3804@p) (call-with-values (lambda () (f375b@quasi f3804@p (+ f3777@lev '1))) (lambda (f380c@f3807 f380d@f3809 f380e@f380b) ((lambda (f3812@p f3813@rhs* f3814@lhs*) (values f3814@lhs* f3813@rhs* (list 'quasisyntax f3812@p))) f380e@f380b f380d@f3809 f380c@f3807)))) f3802@ls/false) ((lambda (f3818@t) ((lambda (f381a@ls/false) (if f381a@ls/false (apply (lambda (f381c@p f381d@q) (call-with-values (lambda () (f375b@quasi f381c@p f3777@lev)) (lambda (f382c@f3821 f382d@f3823 f382e@f3825) (call-with-values (lambda () (f375b@quasi f381d@q f3777@lev)) (lambda (f3832@f3827 f3833@f3829 f3834@f382b) ((lambda (f3838@q f3839@rhs2* f383a@lhs2* f383b@p f383c@rhs* f383d@lhs*) (values (append f383a@lhs2* f383d@lhs*) (append f3839@rhs2* f383c@rhs*) (cons f383b@p f3838@q))) f3834@f382b f3833@f3829 f3832@f3827 f382e@f3825 f382d@f3823 f382c@f3821)))))) f381a@ls/false) ((lambda (f3844@t) ((lambda (f3846@ls/false) (if f3846@ls/false (apply (lambda (f3848@x*) (call-with-values (lambda () (f375b@quasi f3848@x* f3777@lev)) (lambda (f3850@f384b f3851@f384d f3852@f384f) ((lambda (f3856@x* f3857@rhs* f3858@lhs*) (values f3858@lhs* f3857@rhs* (list->vector f3856@x*))) f3852@f384f f3851@f384d f3850@f384b)))) f3846@ls/false) ((lambda (f385c@t) ((lambda (f385e@ls/false) (if f385e@ls/false (apply (lambda () (values '() '() f3776@p)) f385e@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f385c@t))) (f2ec8@syntax-dispatch f385c@t '_))) f3844@t))) (f2ec8@syntax-dispatch f3844@t '#(vector each-any)))) f3818@t))) (f2ec8@syntax-dispatch f3818@t '(any . any)))) f3800@t))) (f2ec8@syntax-dispatch f3800@t '(#(scheme-id quasisyntax) any)))) f37fc@t))) (f2ec8@syntax-dispatch f37fc@t '#(scheme-id unsyntax-splicing)))) f37c8@t))) (f2ec8@syntax-dispatch f37c8@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) f3798@t))) (f2ec8@syntax-dispatch f3798@t '((#(scheme-id unsyntax) . each-any) . any)))) f3794@t))) (f2ec8@syntax-dispatch f3794@t '#(scheme-id unsyntax)))) f377a@t))) (f2ec8@syntax-dispatch f377a@t '(#(scheme-id unsyntax) any)))) f3776@p))) (lambda (f375c@x) ((lambda (f375e@t) ((lambda (f3760@ls/false) (if f3760@ls/false (apply (lambda (f3762@e) (call-with-values (lambda () (f375b@quasi f3762@e '0)) (lambda (f376a@f3765 f376b@f3767 f376c@f3769) ((lambda (f3770@v f3771@rhs* f3772@lhs*) (f2e7e@bless (list 'syntax-case (cons 'list f3771@rhs*) '() (list f3772@lhs* (list 'syntax f3770@v))))) f376c@f3769 f376b@f3767 f376a@f3765)))) f3760@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f375e@t))) (f2ec8@syntax-dispatch f375e@t '(_ any)))) f375c@x)))) '#f)))) (set! f2eba@define-struct-macro (lambda (f3860@stx) (f2fb1@syntax-violation '#f '"define-struct not supported" f3860@stx))) (set! f2ebc@define-record-type-macro (lambda (f3862@x) ((lambda (f3865@id f3867@get-record-name f3869@get-record-constructor-name f386b@get-record-predicate-name f386d@get-clause f386f@foo-rtd-code f3871@parent-rtd-code f3873@parent-rcd-code f3875@foo-rcd-code f3877@get-protocol-code f3879@get-fields f387b@get-mutator-indices f387d@get-mutators f387f@get-accessors f3881@enumerate f3883@do-define-record f3885@verify-clauses) (begin (set! f3865@id (lambda (f3a58@ctxt . f3a5a@str*) (f2fb5@datum->syntax f3a58@ctxt (string->symbol (apply string-append (map (lambda (f3a5c@x) (if (symbol? f3a5c@x) (symbol->string f3a5c@x) (if (string? f3a5c@x) f3a5c@x (assertion-violation 'define-record-type '"BUG")))) f3a5a@str*)))))) (set! f3867@get-record-name (lambda (f3a46@spec) ((lambda (f3a48@t) ((lambda (f3a4a@ls/false) (if f3a4a@ls/false (apply (lambda (f3a4c@foo f3a4d@make-foo f3a4e@foo?) f3a4c@foo) f3a4a@ls/false) ((lambda (f3a52@t) ((lambda (f3a54@ls/false) (if f3a54@ls/false (apply (lambda (f3a56@foo) f3a56@foo) f3a54@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3a52@t))) (f2ec8@syntax-dispatch f3a52@t 'any))) f3a48@t))) (f2ec8@syntax-dispatch f3a48@t '(any any any)))) f3a46@spec))) (set! f3869@get-record-constructor-name (lambda (f3a32@spec) ((lambda (f3a34@t) ((lambda (f3a36@ls/false) (if f3a36@ls/false (apply (lambda (f3a38@foo f3a39@make-foo f3a3a@foo?) f3a39@make-foo) f3a36@ls/false) ((lambda (f3a3e@t) ((lambda (f3a40@ls/false) (if (and f3a40@ls/false (apply (lambda (f3a42@foo) (f2cbd@id? f3a42@foo)) f3a40@ls/false)) (apply (lambda (f3a44@foo) (f3865@id f3a44@foo '"make-" (f2cd3@stx->datum f3a44@foo))) f3a40@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3a3e@t))) (f2ec8@syntax-dispatch f3a3e@t 'any))) f3a34@t))) (f2ec8@syntax-dispatch f3a34@t '(any any any)))) f3a32@spec))) (set! f386b@get-record-predicate-name (lambda (f3a1e@spec) ((lambda (f3a20@t) ((lambda (f3a22@ls/false) (if f3a22@ls/false (apply (lambda (f3a24@foo f3a25@make-foo f3a26@foo?) f3a26@foo?) f3a22@ls/false) ((lambda (f3a2a@t) ((lambda (f3a2c@ls/false) (if (and f3a2c@ls/false (apply (lambda (f3a2e@foo) (f2cbd@id? f3a2e@foo)) f3a2c@ls/false)) (apply (lambda (f3a30@foo) (f3865@id f3a30@foo (f2cd3@stx->datum f3a30@foo) '"?")) f3a2c@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3a2a@t))) (f2ec8@syntax-dispatch f3a2a@t 'any))) f3a20@t))) (f2ec8@syntax-dispatch f3a20@t '(any any any)))) f3a1e@spec))) (set! f386d@get-clause (lambda (f3a0c@id f3a0d@ls) ((lambda (f3a10@t) ((lambda (f3a12@ls/false) (if f3a12@ls/false (apply (lambda () '#f) f3a12@ls/false) ((lambda (f3a14@t) ((lambda (f3a16@ls/false) (if f3a16@ls/false (apply (lambda (f3a18@x f3a19@rest f3a1a@ls) (if (f2cc5@free-id=? (f2e7e@bless f3a0c@id) f3a18@x) (cons f3a18@x f3a19@rest) (f386d@get-clause f3a0c@id f3a1a@ls))) f3a16@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3a14@t))) (f2ec8@syntax-dispatch f3a14@t '((any . any) . any)))) f3a10@t))) (f2ec8@syntax-dispatch f3a10@t '()))) f3a0d@ls))) (set! f386f@foo-rtd-code (lambda (f39ba@name f39bb@clause* f39bc@parent-rtd-code) ((lambda (f39c1@convert-field-spec*) (begin (set! f39c1@convert-field-spec* (lambda (f39f2@ls) (list->vector (map (lambda (f39f4@x) ((lambda (f39f6@t) ((lambda (f39f8@ls/false) (if f39f8@ls/false (apply (lambda (f39fa@name f39fb@rest) (list 'mutable f39fa@name)) f39f8@ls/false) ((lambda (f39fe@t) ((lambda (f3a00@ls/false) (if f3a00@ls/false (apply (lambda (f3a02@name f3a03@rest) (list 'immutable f3a02@name)) f3a00@ls/false) ((lambda (f3a06@t) ((lambda (f3a08@ls/false) (if f3a08@ls/false (apply (lambda (f3a0a@name) (list 'immutable f3a0a@name)) f3a08@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3a06@t))) (f2ec8@syntax-dispatch f3a06@t 'any))) f39fe@t))) (f2ec8@syntax-dispatch f39fe@t '(#(scheme-id immutable) any . any)))) f39f6@t))) (f2ec8@syntax-dispatch f39f6@t '(#(scheme-id mutable) any . any)))) f39f4@x)) f39f2@ls)))) ((lambda (f39c2@uid-code f39c3@sealed? f39c4@opaque? f39c5@fields) (f2e7e@bless (list 'make-record-type-descriptor (list 'quote f39ba@name) f39bc@parent-rtd-code f39c2@uid-code f39c3@sealed? f39c4@opaque? f39c5@fields))) ((lambda (f39ca@t) ((lambda (f39cc@ls/false) (if f39cc@ls/false (apply (lambda () (list 'quote (gensym))) f39cc@ls/false) ((lambda (f39ce@t) ((lambda (f39d0@ls/false) (if f39d0@ls/false (apply (lambda (f39d2@uid) (list 'quote f39d2@uid)) f39d0@ls/false) ((lambda (f39d4@t) ((lambda (f39d6@ls/false) (if f39d6@ls/false (apply (lambda () '#f) f39d6@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f39d4@t))) (f2ec8@syntax-dispatch f39d4@t '_))) f39ce@t))) (f2ec8@syntax-dispatch f39ce@t '(_ any)))) f39ca@t))) (f2ec8@syntax-dispatch f39ca@t '(_)))) (f386d@get-clause 'nongenerative f39bb@clause*)) ((lambda (f39d8@t) ((lambda (f39da@ls/false) (if f39da@ls/false (apply (lambda () '#t) f39da@ls/false) ((lambda (f39dc@t) ((lambda (f39de@ls/false) (if f39de@ls/false (apply (lambda () '#f) f39de@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f39dc@t))) (f2ec8@syntax-dispatch f39dc@t '_))) f39d8@t))) (f2ec8@syntax-dispatch f39d8@t '(_ #(atom #t))))) (f386d@get-clause 'sealed f39bb@clause*)) ((lambda (f39e0@t) ((lambda (f39e2@ls/false) (if f39e2@ls/false (apply (lambda () '#t) f39e2@ls/false) ((lambda (f39e4@t) ((lambda (f39e6@ls/false) (if f39e6@ls/false (apply (lambda () '#f) f39e6@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f39e4@t))) (f2ec8@syntax-dispatch f39e4@t '_))) f39e0@t))) (f2ec8@syntax-dispatch f39e0@t '(_ #(atom #t))))) (f386d@get-clause 'opaque f39bb@clause*)) ((lambda (f39e8@t) ((lambda (f39ea@ls/false) (if f39ea@ls/false (apply (lambda (f39ec@field-spec*) (list 'quote (f39c1@convert-field-spec* f39ec@field-spec*))) f39ea@ls/false) ((lambda (f39ee@t) ((lambda (f39f0@ls/false) (if f39f0@ls/false (apply (lambda () ''#()) f39f0@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f39ee@t))) (f2ec8@syntax-dispatch f39ee@t '_))) f39e8@t))) (f2ec8@syntax-dispatch f39e8@t '(_ . each-any)))) (f386d@get-clause 'fields f39bb@clause*))))) '#f))) (set! f3871@parent-rtd-code (lambda (f39a2@clause*) ((lambda (f39a4@t) ((lambda (f39a6@ls/false) (if f39a6@ls/false (apply (lambda (f39a8@name) (list 'record-type-descriptor f39a8@name)) f39a6@ls/false) ((lambda (f39aa@t) ((lambda (f39ac@ls/false) (if f39ac@ls/false (apply (lambda () ((lambda (f39ae@t) ((lambda (f39b0@ls/false) (if f39b0@ls/false (apply (lambda (f39b2@rtd f39b3@rcd) f39b2@rtd) f39b0@ls/false) ((lambda (f39b6@t) ((lambda (f39b8@ls/false) (if f39b8@ls/false (apply (lambda () '#f) f39b8@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f39b6@t))) (f2ec8@syntax-dispatch f39b6@t '#(atom #f)))) f39ae@t))) (f2ec8@syntax-dispatch f39ae@t '(_ any any)))) (f386d@get-clause 'parent-rtd f39a2@clause*))) f39ac@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f39aa@t))) (f2ec8@syntax-dispatch f39aa@t '#(atom #f)))) f39a4@t))) (f2ec8@syntax-dispatch f39a4@t '(_ any)))) (f386d@get-clause 'parent f39a2@clause*)))) (set! f3873@parent-rcd-code (lambda (f398a@clause*) ((lambda (f398c@t) ((lambda (f398e@ls/false) (if f398e@ls/false (apply (lambda (f3990@name) (list 'record-constructor-descriptor f3990@name)) f398e@ls/false) ((lambda (f3992@t) ((lambda (f3994@ls/false) (if f3994@ls/false (apply (lambda () ((lambda (f3996@t) ((lambda (f3998@ls/false) (if f3998@ls/false (apply (lambda (f399a@rtd f399b@rcd) f399b@rcd) f3998@ls/false) ((lambda (f399e@t) ((lambda (f39a0@ls/false) (if f39a0@ls/false (apply (lambda () '#f) f39a0@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f399e@t))) (f2ec8@syntax-dispatch f399e@t '#(atom #f)))) f3996@t))) (f2ec8@syntax-dispatch f3996@t '(_ any any)))) (f386d@get-clause 'parent-rtd f398a@clause*))) f3994@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3992@t))) (f2ec8@syntax-dispatch f3992@t '#(atom #f)))) f398c@t))) (f2ec8@syntax-dispatch f398c@t '(_ any)))) (f386d@get-clause 'parent f398a@clause*)))) (set! f3875@foo-rcd-code (lambda (f3982@clause* f3983@foo-rtd f3984@protocol f3985@parent-rcd-code) (list 'make-record-constructor-descriptor f3983@foo-rtd f3985@parent-rcd-code f3984@protocol))) (set! f3877@get-protocol-code (lambda (f3976@clause*) ((lambda (f3978@t) ((lambda (f397a@ls/false) (if f397a@ls/false (apply (lambda (f397c@expr) f397c@expr) f397a@ls/false) ((lambda (f397e@t) ((lambda (f3980@ls/false) (if f3980@ls/false (apply (lambda () '#f) f3980@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f397e@t))) (f2ec8@syntax-dispatch f397e@t '_))) f3978@t))) (f2ec8@syntax-dispatch f3978@t '(_ any)))) (f386d@get-clause 'protocol f3976@clause*)))) (set! f3879@get-fields (lambda (f3964@clause*) ((lambda (f3966@t) ((lambda (f3968@ls/false) (if f3968@ls/false (apply (lambda () '()) f3968@ls/false) ((lambda (f396a@t) ((lambda (f396c@ls/false) (if f396c@ls/false (apply (lambda (f396e@f*) f396e@f*) f396c@ls/false) ((lambda (f3970@t) ((lambda (f3972@ls/false) (if f3972@ls/false (apply (lambda (f3974@rest) (f3879@get-fields f3974@rest)) f3972@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3970@t))) (f2ec8@syntax-dispatch f3970@t '(_ . any)))) f396a@t))) (f2ec8@syntax-dispatch f396a@t '((#(scheme-id fields) . each-any) . _)))) f3966@t))) (f2ec8@syntax-dispatch f3966@t '()))) f3964@clause*))) (set! f387b@get-mutator-indices (lambda (f394c@fields) ((letrec ((f394e@f (lambda (f3950@fields f3951@i) ((lambda (f3954@t) ((lambda (f3956@ls/false) (if f3956@ls/false (apply (lambda () '()) f3956@ls/false) ((lambda (f3958@t) ((lambda (f395a@ls/false) (if f395a@ls/false (apply (lambda (f395c@rest) (cons f3951@i (f394e@f f395c@rest (+ f3951@i '1)))) f395a@ls/false) ((lambda (f395e@t) ((lambda (f3960@ls/false) (if f3960@ls/false (apply (lambda (f3962@rest) (f394e@f f3962@rest (+ f3951@i '1))) f3960@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f395e@t))) (f2ec8@syntax-dispatch f395e@t '(_ . any)))) f3958@t))) (f2ec8@syntax-dispatch f3958@t '((#(scheme-id mutable) . _) . any)))) f3954@t))) (f2ec8@syntax-dispatch f3954@t '()))) f3950@fields)))) f394e@f) f394c@fields '0))) (set! f387d@get-mutators (lambda (f3922@foo f3923@fields) ((lambda (f3927@gen-name) (begin (set! f3927@gen-name (lambda (f394a@x) (f2fb5@datum->syntax f3922@foo (string->symbol (string-append (symbol->string (f2fb7@syntax->datum f3922@foo)) '"-" (symbol->string (f2fb7@syntax->datum f394a@x)) '"-set!"))))) ((letrec ((f3928@f (lambda (f392a@fields) ((lambda (f392c@t) ((lambda (f392e@ls/false) (if f392e@ls/false (apply (lambda () '()) f392e@ls/false) ((lambda (f3930@t) ((lambda (f3932@ls/false) (if f3932@ls/false (apply (lambda (f3934@name f3935@accessor f3936@mutator f3937@rest) (cons f3936@mutator (f3928@f f3937@rest))) f3932@ls/false) ((lambda (f393c@t) ((lambda (f393e@ls/false) (if f393e@ls/false (apply (lambda (f3940@name f3941@rest) (cons (f3927@gen-name f3940@name) (f3928@f f3941@rest))) f393e@ls/false) ((lambda (f3944@t) ((lambda (f3946@ls/false) (if f3946@ls/false (apply (lambda (f3948@rest) (f3928@f f3948@rest)) f3946@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3944@t))) (f2ec8@syntax-dispatch f3944@t '(_ . any)))) f393c@t))) (f2ec8@syntax-dispatch f393c@t '((#(scheme-id mutable) any) . any)))) f3930@t))) (f2ec8@syntax-dispatch f3930@t '((#(scheme-id mutable) any any any) . any)))) f392c@t))) (f2ec8@syntax-dispatch f392c@t '()))) f392a@fields)))) f3928@f) f3923@fields))) '#f))) (set! f387f@get-accessors (lambda (f38de@foo f38df@fields) ((lambda (f38e3@gen-name) (begin (set! f38e3@gen-name (lambda (f3920@x) (f2fb5@datum->syntax f38de@foo (string->symbol (string-append (symbol->string (f2fb7@syntax->datum f38de@foo)) '"-" (symbol->string (f2fb7@syntax->datum f3920@x))))))) (map (lambda (f38e4@field) ((lambda (f38e6@t) ((lambda (f38e8@ls/false) (if (and f38e8@ls/false (apply (lambda (f38ea@name f38eb@accessor f38ec@mutator) (f2cbd@id? f38eb@accessor)) f38e8@ls/false)) (apply (lambda (f38f0@name f38f1@accessor f38f2@mutator) f38f1@accessor) f38e8@ls/false) ((lambda (f38f6@t) ((lambda (f38f8@ls/false) (if (and f38f8@ls/false (apply (lambda (f38fa@name f38fb@accessor) (f2cbd@id? f38fb@accessor)) f38f8@ls/false)) (apply (lambda (f38fe@name f38ff@accessor) f38ff@accessor) f38f8@ls/false) ((lambda (f3902@t) ((lambda (f3904@ls/false) (if (and f3904@ls/false (apply (lambda (f3906@name) (f2cbd@id? f3906@name)) f3904@ls/false)) (apply (lambda (f3908@name) (f38e3@gen-name f3908@name)) f3904@ls/false) ((lambda (f390a@t) ((lambda (f390c@ls/false) (if (and f390c@ls/false (apply (lambda (f390e@name) (f2cbd@id? f390e@name)) f390c@ls/false)) (apply (lambda (f3910@name) (f38e3@gen-name f3910@name)) f390c@ls/false) ((lambda (f3912@t) ((lambda (f3914@ls/false) (if (and f3914@ls/false (apply (lambda (f3916@name) (f2cbd@id? f3916@name)) f3914@ls/false)) (apply (lambda (f3918@name) (f38e3@gen-name f3918@name)) f3914@ls/false) ((lambda (f391a@t) ((lambda (f391c@ls/false) (if f391c@ls/false (apply (lambda (f391e@others) (f2fb1@syntax-violation '#f '"invalid field spec" f38e4@field)) f391c@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f391a@t))) (f2ec8@syntax-dispatch f391a@t 'any))) f3912@t))) (f2ec8@syntax-dispatch f3912@t 'any))) f390a@t))) (f2ec8@syntax-dispatch f390a@t '(#(scheme-id immutable) any)))) f3902@t))) (f2ec8@syntax-dispatch f3902@t '(#(scheme-id mutable) any)))) f38f6@t))) (f2ec8@syntax-dispatch f38f6@t '(#(scheme-id immutable) any any)))) f38e6@t))) (f2ec8@syntax-dispatch f38e6@t '(#(scheme-id mutable) any any any)))) f38e4@field)) f38df@fields))) '#f))) (set! f3881@enumerate (lambda (f38d6@ls) ((letrec ((f38d8@f (lambda (f38da@ls f38db@i) (if (null? f38da@ls) '() (cons f38db@i (f38d8@f (cdr f38da@ls) (+ f38db@i '1))))))) f38d8@f) f38d6@ls '0))) (set! f3883@do-define-record (lambda (f38ae@namespec f38af@clause*) ((lambda (f38b2@foo) ((lambda (f38b4@foo-rtd) ((lambda (f38b6@foo-rcd) ((lambda (f38b8@protocol) ((lambda (f38ba@make-foo) ((lambda (f38bc@fields) ((lambda (f38be@idx*) ((lambda (f38c0@foo-x*) ((lambda (f38c2@set-foo-x!*) ((lambda (f38c4@set-foo-idx*) ((lambda (f38c6@foo?) ((lambda (f38c8@foo-rtd-code) ((lambda (f38ca@foo-rcd-code) ((lambda (f38cc@protocol-code) ((lambda () (f2e7e@bless (cons 'begin (cons (list 'define f38b4@foo-rtd f38c8@foo-rtd-code) (cons (list 'define f38b8@protocol f38cc@protocol-code) (cons (list 'define f38b6@foo-rcd f38ca@foo-rcd-code) (cons (list 'define-syntax f38b2@foo (list 'list ''$rtd (list 'syntax f38b4@foo-rtd) (list 'syntax f38b6@foo-rcd))) (cons (list 'define f38c6@foo? (list 'record-predicate f38b4@foo-rtd)) (cons (list 'define f38ba@make-foo (list 'record-constructor f38b6@foo-rcd)) (append (map (lambda (f38ce@foo-x f38cf@idx) (list 'define f38ce@foo-x (list 'record-accessor f38b4@foo-rtd f38cf@idx))) f38c0@foo-x* f38be@idx*) (map (lambda (f38d2@set-foo-x! f38d3@idx) (list 'define f38d2@set-foo-x! (list 'record-mutator f38b4@foo-rtd f38d3@idx))) f38c2@set-foo-x!* f38c4@set-foo-idx*))))))))))))) (f3877@get-protocol-code f38af@clause*))) (f3875@foo-rcd-code f38af@clause* f38b4@foo-rtd f38b8@protocol (f3873@parent-rcd-code f38af@clause*)))) (f386f@foo-rtd-code f38b2@foo f38af@clause* (f3871@parent-rtd-code f38af@clause*)))) (f386b@get-record-predicate-name f38ae@namespec))) (f387b@get-mutator-indices f38bc@fields))) (f387d@get-mutators f38b2@foo f38bc@fields))) (f387f@get-accessors f38b2@foo f38bc@fields))) (f3881@enumerate f38bc@fields))) (f3879@get-fields f38af@clause*))) (f3869@get-record-constructor-name f38ae@namespec))) (gensym))) (gensym))) (gensym))) (f3867@get-record-name f38ae@namespec)))) (set! f3885@verify-clauses (lambda (f388e@x f388f@cls*) ((lambda (f3893@valid-kwds f3895@free-id-member?) (begin (set! f3893@valid-kwds (map f2e7e@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! f3895@free-id-member? (lambda (f38aa@x f38ab@ls) (and (pair? f38ab@ls) (or (f2cc5@free-id=? f38aa@x (car f38ab@ls)) (f3895@free-id-member? f38aa@x (cdr f38ab@ls)))))) ((letrec ((f3896@f (lambda (f3898@cls* f3899@seen*) (if (not (null? f3898@cls*)) ((lambda (f389c@t) ((lambda (f389e@ls/false) (if f389e@ls/false (apply (lambda (f38a0@kwd f38a1@rest) (if (or (not (f2cbd@id? f38a0@kwd)) (not (f3895@free-id-member? f38a0@kwd f3893@valid-kwds))) (f2fb1@syntax-violation '#f '"not a valid define-record-type keyword" f38a0@kwd) (if (f2ccb@bound-id-member? f38a0@kwd f3899@seen*) (f2fb1@syntax-violation '#f '"duplicate use of keyword " f388e@x f38a0@kwd) (f3896@f (cdr f3898@cls*) (cons f38a0@kwd f3899@seen*))))) f389e@ls/false) ((lambda (f38a4@t) ((lambda (f38a6@ls/false) (if f38a6@ls/false (apply (lambda (f38a8@cls) (f2fb1@syntax-violation '#f '"malformed define-record-type clause" f38a8@cls)) f38a6@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f38a4@t))) (f2ec8@syntax-dispatch f38a4@t 'any))) f389c@t))) (f2ec8@syntax-dispatch f389c@t '(any . any)))) (car f3898@cls*)) (void))))) f3896@f) f388f@cls* '()))) '#f '#f))) ((lambda (f3886@t) ((lambda (f3888@ls/false) (if f3888@ls/false (apply (lambda (f388a@namespec f388b@clause*) (begin (f3885@verify-clauses f3862@x f388b@clause*) (f3883@do-define-record f388a@namespec f388b@clause*))) f3888@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3886@t))) (f2ec8@syntax-dispatch f3886@t '(_ any . each-any)))) f3862@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! f2ebe@define-condition-type-macro (lambda (f3a5e@x) ((lambda (f3a61@mkname) (begin (set! f3a61@mkname (lambda (f3a8e@name f3a8f@suffix) (f2fb5@datum->syntax f3a8e@name (string->symbol (string-append (symbol->string (f2fb7@syntax->datum f3a8e@name)) f3a8f@suffix))))) ((lambda (f3a62@t) ((lambda (f3a64@ls/false) (if (and f3a64@ls/false (apply (lambda (f3a66@ctxt f3a67@name f3a68@super f3a69@constructor f3a6a@predicate f3a6b@field* f3a6c@accessor*) (and (f2cbd@id? f3a67@name) (f2cbd@id? f3a68@super) (f2cbd@id? f3a69@constructor) (f2cbd@id? f3a6a@predicate) (for-all f2cbd@id? f3a6b@field*) (for-all f2cbd@id? f3a6c@accessor*))) f3a64@ls/false)) (apply (lambda (f3a74@ctxt f3a75@name f3a76@super f3a77@constructor f3a78@predicate f3a79@field* f3a7a@accessor*) ((lambda (f3a82@aux-accessor*) (f2e7e@bless (cons 'begin (cons (cons 'define-record-type (cons (list f3a75@name f3a77@constructor (gensym)) (cons (list 'parent f3a76@super) (cons (cons 'fields (map (lambda (f3a84@field f3a85@aux) (list 'immutable f3a84@field f3a85@aux)) f3a79@field* f3a82@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define f3a78@predicate (list 'condition-predicate (list 'record-type-descriptor f3a75@name))) (map (lambda (f3a88@accessor f3a89@aux) (list 'define f3a88@accessor (list 'condition-accessor (list 'record-type-descriptor f3a75@name) f3a89@aux))) f3a7a@accessor* f3a82@aux-accessor*)))))) (map (lambda (f3a8c@x) (gensym)) f3a7a@accessor*))) f3a64@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3a62@t))) (f2ec8@syntax-dispatch f3a62@t '(any any any any any . #(each (any any)))))) f3a5e@x))) '#f))) (set! f2ec0@incorrect-usage-macro (lambda (f3a92@e) (f2fb1@syntax-violation '#f '"incorrect usage of auxiliary keyword" f3a92@e))) (set! f2ec2@parameterize-macro (lambda (f3a94@e) ((lambda (f3a96@t) ((lambda (f3a98@ls/false) (if f3a98@ls/false (apply (lambda (f3a9a@b f3a9b@b*) (f2e7e@bless (cons 'let (cons '() (cons f3a9a@b f3a9b@b*))))) f3a98@ls/false) ((lambda (f3a9e@t) ((lambda (f3aa0@ls/false) (if f3aa0@ls/false (apply (lambda (f3aa2@olhs* f3aa3@orhs* f3aa4@b f3aa5@b*) ((lambda (f3aaa@lhs* f3aab@rhs*) (f2e7e@bless (cons (list 'lambda (append f3aaa@lhs* f3aab@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (f3aae@lhs f3aaf@rhs) (list 'let (list (list 't (list f3aae@lhs))) (list f3aae@lhs f3aaf@rhs) (cons 'set! (cons f3aaf@rhs '(t))))) f3aaa@lhs* f3aab@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons f3aa4@b f3aa5@b*))) '(swap)))))) (append f3aa2@olhs* f3aa3@orhs*)))) (f2f9f@generate-temporaries f3aa2@olhs*) (f2f9f@generate-temporaries f3aa3@orhs*))) f3aa0@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3a9e@t))) (f2ec8@syntax-dispatch f3a9e@t '(_ #(each (any any)) any . each-any)))) f3a96@t))) (f2ec8@syntax-dispatch f3a96@t '(_ () any . each-any)))) f3a94@e))) (set! f2ec4@foreign-call-transformer (lambda (f3ab2@e f3ab3@r f3ab4@mr) ((lambda (f3ab8@t) ((lambda (f3aba@ls/false) (if f3aba@ls/false (apply (lambda (f3abc@name f3abd@arg*) (cons 'foreign-call (cons (f2eea@chi-expr f3abc@name f3ab3@r f3ab4@mr) (f2ee6@chi-expr* f3abd@arg* f3ab3@r f3ab4@mr)))) f3aba@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3ab8@t))) (f2ec8@syntax-dispatch f3ab8@t '(_ any . each-any)))) f3ab2@e))) (set! f2ec6@convert-pattern (lambda (f3ac0@pattern f3ac1@keys) ((lambda (f3ac5@cvt* f3ac7@cvt) (begin (set! f3ac5@cvt* (lambda (f3b64@p* f3b65@n f3b66@ids) (if (null? f3b64@p*) (values '() f3b66@ids) (call-with-values (lambda () (f3ac5@cvt* (cdr f3b64@p*) f3b65@n f3b66@ids)) (lambda (f3b6e@f3b6b f3b6f@f3b6d) ((lambda (f3b72@ids f3b73@y) (call-with-values (lambda () (f3ac7@cvt (car f3b64@p*) f3b65@n f3b72@ids)) (lambda (f3b7a@f3b77 f3b7b@f3b79) ((lambda (f3b7e@ids f3b7f@x) (values (cons f3b7f@x f3b73@y) f3b7e@ids)) f3b7b@f3b79 f3b7a@f3b77)))) f3b6f@f3b6d f3b6e@f3b6b)))))) (set! f3ac7@cvt (lambda (f3ac8@p f3ac9@n f3aca@ids) ((lambda (f3ace@t) ((lambda (f3ad0@ls/false) (if (and f3ad0@ls/false (apply (lambda (f3ad2@id) (f2cbd@id? f3ad2@id)) f3ad0@ls/false)) (apply (lambda (f3ad4@id) (if (f2ccb@bound-id-member? f3ac8@p f3ac1@keys) (values (vector 'free-id f3ac8@p) f3aca@ids) (if (f2cc5@free-id=? f3ac8@p (f2e52@scheme-stx '_)) (values '_ f3aca@ids) (values 'any (cons (cons f3ac8@p f3ac9@n) f3aca@ids))))) f3ad0@ls/false) ((lambda (f3ad6@t) ((lambda (f3ad8@ls/false) (if (and f3ad8@ls/false (apply (lambda (f3ada@p f3adb@dots) (f2eca@ellipsis? f3adb@dots)) f3ad8@ls/false)) (apply (lambda (f3ade@p f3adf@dots) (call-with-values (lambda () (f3ac7@cvt f3ade@p (+ f3ac9@n '1) f3aca@ids)) (lambda (f3ae6@f3ae3 f3ae7@f3ae5) ((lambda (f3aea@ids f3aeb@p) (values (if (eq? f3aeb@p 'any) 'each-any (vector 'each f3aeb@p)) f3aea@ids)) f3ae7@f3ae5 f3ae6@f3ae3)))) f3ad8@ls/false) ((lambda (f3aee@t) ((lambda (f3af0@ls/false) (if (and f3af0@ls/false (apply (lambda (f3af2@x f3af3@dots f3af4@ys f3af5@z) (f2eca@ellipsis? f3af3@dots)) f3af0@ls/false)) (apply (lambda (f3afa@x f3afb@dots f3afc@ys f3afd@z) (call-with-values (lambda () (f3ac7@cvt f3afd@z f3ac9@n f3aca@ids)) (lambda (f3b06@f3b03 f3b07@f3b05) ((lambda (f3b0a@ids f3b0b@z) (call-with-values (lambda () (f3ac5@cvt* f3afc@ys f3ac9@n f3b0a@ids)) (lambda (f3b12@f3b0f f3b13@f3b11) ((lambda (f3b16@ids f3b17@ys) (call-with-values (lambda () (f3ac7@cvt f3afa@x (+ f3ac9@n '1) f3b16@ids)) (lambda (f3b1e@f3b1b f3b1f@f3b1d) ((lambda (f3b22@ids f3b23@x) (values (vector 'each+ f3b23@x (reverse f3b17@ys) f3b0b@z) f3b22@ids)) f3b1f@f3b1d f3b1e@f3b1b)))) f3b13@f3b11 f3b12@f3b0f)))) f3b07@f3b05 f3b06@f3b03)))) f3af0@ls/false) ((lambda (f3b26@t) ((lambda (f3b28@ls/false) (if f3b28@ls/false (apply (lambda (f3b2a@x f3b2b@y) (call-with-values (lambda () (f3ac7@cvt f3b2b@y f3ac9@n f3aca@ids)) (lambda (f3b32@f3b2f f3b33@f3b31) ((lambda (f3b36@ids f3b37@y) (call-with-values (lambda () (f3ac7@cvt f3b2a@x f3ac9@n f3b36@ids)) (lambda (f3b3e@f3b3b f3b3f@f3b3d) ((lambda (f3b42@ids f3b43@x) (values (cons f3b43@x f3b37@y) f3b42@ids)) f3b3f@f3b3d f3b3e@f3b3b)))) f3b33@f3b31 f3b32@f3b2f)))) f3b28@ls/false) ((lambda (f3b46@t) ((lambda (f3b48@ls/false) (if f3b48@ls/false (apply (lambda () (values '() f3aca@ids)) f3b48@ls/false) ((lambda (f3b4a@t) ((lambda (f3b4c@ls/false) (if (and f3b4c@ls/false (apply (lambda (f3b4e@p) (not (f2c85@stx? f3b4e@p))) f3b4c@ls/false)) (apply (lambda (f3b50@p) (call-with-values (lambda () (f3ac7@cvt f3b50@p f3ac9@n f3aca@ids)) (lambda (f3b56@f3b53 f3b57@f3b55) ((lambda (f3b5a@ids f3b5b@p) (values (vector 'vector f3b5b@p) f3b5a@ids)) f3b57@f3b55 f3b56@f3b53)))) f3b4c@ls/false) ((lambda (f3b5e@t) ((lambda (f3b60@ls/false) (if f3b60@ls/false (apply (lambda (f3b62@datum) (values (vector 'atom (f2cd3@stx->datum f3b62@datum)) f3aca@ids)) f3b60@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3b5e@t))) (f2ec8@syntax-dispatch f3b5e@t 'any))) f3b4a@t))) (f2ec8@syntax-dispatch f3b4a@t '#(vector each-any)))) f3b46@t))) (f2ec8@syntax-dispatch f3b46@t '()))) f3b26@t))) (f2ec8@syntax-dispatch f3b26@t '(any . any)))) f3aee@t))) (f2ec8@syntax-dispatch f3aee@t '(any any . #(each+ any () any))))) f3ad6@t))) (f2ec8@syntax-dispatch f3ad6@t '(any any)))) f3ace@t))) (f2ec8@syntax-dispatch f3ace@t 'any))) f3ac8@p))) (f3ac7@cvt f3ac0@pattern '0 '()))) '#f '#f))) (set! f2ec8@syntax-dispatch ((lambda () ((lambda (f3b83@stx^ f3b85@match-each f3b87@match-each+ f3b89@match-each-any f3b8b@match-empty f3b8d@combine f3b8f@match* f3b91@match) (begin (set! f3b83@stx^ (lambda (f3c5e@e f3c5f@m* f3c60@s* f3c61@ae*) (if (and (null? f3c5f@m*) (null? f3c60@s*) (null? f3c61@ae*)) f3c5e@e (f2ca5@mkstx f3c5e@e f3c5f@m* f3c60@s* f3c61@ae*)))) (set! f3b85@match-each (lambda (f3c3e@e f3c3f@p f3c40@m* f3c41@s* f3c42@ae*) (if (pair? f3c3e@e) ((lambda (f3c48@first) (and f3c48@first ((lambda (f3c4a@rest) (and f3c4a@rest (cons f3c48@first f3c4a@rest))) (f3b85@match-each (cdr f3c3e@e) f3c3f@p f3c40@m* f3c41@s* f3c42@ae*)))) (f3b91@match (car f3c3e@e) f3c3f@p f3c40@m* f3c41@s* f3c42@ae* '())) (if (null? f3c3e@e) '() (if (f2c85@stx? f3c3e@e) (and (not (f2c3b@top-marked? f3c40@m*)) (call-with-values (lambda () (f2ca3@join-wraps f3c40@m* f3c41@s* f3c42@ae* f3c3e@e)) (lambda (f3c52@f3c4d f3c53@f3c4f f3c54@f3c51) ((lambda (f3c58@ae* f3c59@s* f3c5a@m*) (f3b85@match-each (f2c89@stx-expr f3c3e@e) f3c3f@p f3c5a@m* f3c59@s* f3c58@ae*)) f3c54@f3c51 f3c53@f3c4f f3c52@f3c4d)))) (if (f285c@f277b@annotation? f3c3e@e) (f3b85@match-each (f285e@f277f@annotation-expression f3c3e@e) f3c3f@p f3c40@m* f3c41@s* f3c42@ae*) '#f)))))) (set! f3b87@match-each+ (lambda (f3bfe@e f3bff@x-pat f3c00@y-pat f3c01@z-pat f3c02@m* f3c03@s* f3c04@ae* f3c05@r) ((letrec ((f3c0e@f (lambda (f3c10@e f3c11@m* f3c12@s* f3c13@ae*) (if (pair? f3c10@e) (call-with-values (lambda () (f3c0e@f (cdr f3c10@e) f3c11@m* f3c12@s* f3c13@ae*)) (lambda (f3c1e@f3c19 f3c1f@f3c1b f3c20@f3c1d) ((lambda (f3c24@r f3c25@y-pat f3c26@xr*) (if f3c24@r (if (null? f3c25@y-pat) ((lambda (f3c2a@xr) (if f3c2a@xr (values (cons f3c2a@xr f3c26@xr*) f3c25@y-pat f3c24@r) (values '#f '#f '#f))) (f3b91@match (car f3c10@e) f3bff@x-pat f3c11@m* f3c12@s* f3c13@ae* '())) (values '() (cdr f3c25@y-pat) (f3b91@match (car f3c10@e) (car f3c25@y-pat) f3c11@m* f3c12@s* f3c13@ae* f3c24@r))) (values '#f '#f '#f))) f3c20@f3c1d f3c1f@f3c1b f3c1e@f3c19))) (if (f2c85@stx? f3c10@e) (if (f2c3b@top-marked? f3c11@m*) (values '() f3c00@y-pat (f3b91@match f3c10@e f3c01@z-pat f3c11@m* f3c12@s* f3c13@ae* f3c05@r)) (call-with-values (lambda () (f2ca3@join-wraps f3c11@m* f3c12@s* f3c13@ae* f3c10@e)) (lambda (f3c32@f3c2d f3c33@f3c2f f3c34@f3c31) ((lambda (f3c38@ae* f3c39@s* f3c3a@m*) (f3c0e@f (f2c89@stx-expr f3c10@e) f3c3a@m* f3c39@s* f3c38@ae*)) f3c34@f3c31 f3c33@f3c2f f3c32@f3c2d)))) (if (f285c@f277b@annotation? f3c10@e) (f3c0e@f (f285e@f277f@annotation-expression f3c10@e) f3c11@m* f3c12@s* f3c13@ae*) (values '() f3c00@y-pat (f3b91@match f3c10@e f3c01@z-pat f3c11@m* f3c12@s* f3c13@ae* f3c05@r)))))))) f3c0e@f) f3bfe@e f3c02@m* f3c03@s* f3c04@ae*))) (set! f3b89@match-each-any (lambda (f3be2@e f3be3@m* f3be4@s* f3be5@ae*) (if (pair? f3be2@e) ((lambda (f3bea@l) (and f3bea@l (cons (f3b83@stx^ (car f3be2@e) f3be3@m* f3be4@s* f3be5@ae*) f3bea@l))) (f3b89@match-each-any (cdr f3be2@e) f3be3@m* f3be4@s* f3be5@ae*)) (if (null? f3be2@e) '() (if (f2c85@stx? f3be2@e) (and (not (f2c3b@top-marked? f3be3@m*)) (call-with-values (lambda () (f2ca3@join-wraps f3be3@m* f3be4@s* f3be5@ae* f3be2@e)) (lambda (f3bf2@f3bed f3bf3@f3bef f3bf4@f3bf1) ((lambda (f3bf8@ae* f3bf9@s* f3bfa@m*) (f3b89@match-each-any (f2c89@stx-expr f3be2@e) f3bfa@m* f3bf9@s* f3bf8@ae*)) f3bf4@f3bf1 f3bf3@f3bef f3bf2@f3bed)))) (if (f285c@f277b@annotation? f3be2@e) (f3b89@match-each-any (f285e@f277f@annotation-expression f3be2@e) f3be3@m* f3be4@s* f3be5@ae*) '#f)))))) (set! f3b8b@match-empty (lambda (f3bdc@p f3bdd@r) (if (null? f3bdc@p) f3bdd@r (if (eq? f3bdc@p '_) f3bdd@r (if (eq? f3bdc@p 'any) (cons '() f3bdd@r) (if (pair? f3bdc@p) (f3b8b@match-empty (car f3bdc@p) (f3b8b@match-empty (cdr f3bdc@p) f3bdd@r)) (if (eq? f3bdc@p 'each-any) (cons '() f3bdd@r) ((lambda (f3be0@t) (if (memv f3be0@t '(each)) (f3b8b@match-empty (vector-ref f3bdc@p '1) f3bdd@r) (if (memv f3be0@t '(each+)) (f3b8b@match-empty (vector-ref f3bdc@p '1) (f3b8b@match-empty (reverse (vector-ref f3bdc@p '2)) (f3b8b@match-empty (vector-ref f3bdc@p '3) f3bdd@r))) (if (memv f3be0@t '(free-id atom)) f3bdd@r (if (memv f3be0@t '(scheme-id atom)) f3bdd@r (if (memv f3be0@t '(vector)) (f3b8b@match-empty (vector-ref f3bdc@p '1) f3bdd@r) (assertion-violation 'syntax-dispatch '"invalid pattern" f3bdc@p))))))) (vector-ref f3bdc@p '0))))))))) (set! f3b8d@combine (lambda (f3bd8@r* f3bd9@r) (if (null? (car f3bd8@r*)) f3bd9@r (cons (map car f3bd8@r*) (f3b8d@combine (map cdr f3bd8@r*) f3bd9@r))))) (set! f3b8f@match* (lambda (f3bb4@e f3bb5@p f3bb6@m* f3bb7@s* f3bb8@ae* f3bb9@r) (if (null? f3bb5@p) (and (null? f3bb4@e) f3bb9@r) (if (pair? f3bb5@p) (and (pair? f3bb4@e) (f3b91@match (car f3bb4@e) (car f3bb5@p) f3bb6@m* f3bb7@s* f3bb8@ae* (f3b91@match (cdr f3bb4@e) (cdr f3bb5@p) f3bb6@m* f3bb7@s* f3bb8@ae* f3bb9@r))) (if (eq? f3bb5@p 'each-any) ((lambda (f3bc0@l) (and f3bc0@l (cons f3bc0@l f3bb9@r))) (f3b89@match-each-any f3bb4@e f3bb6@m* f3bb7@s* f3bb8@ae*)) ((lambda (f3bc2@t) (if (memv f3bc2@t '(each)) (if (null? f3bb4@e) (f3b8b@match-empty (vector-ref f3bb5@p '1) f3bb9@r) ((lambda (f3bc4@r*) (and f3bc4@r* (f3b8d@combine f3bc4@r* f3bb9@r))) (f3b85@match-each f3bb4@e (vector-ref f3bb5@p '1) f3bb6@m* f3bb7@s* f3bb8@ae*))) (if (memv f3bc2@t '(free-id)) (and (symbol? f3bb4@e) (f2c3b@top-marked? f3bb6@m*) (f2cc5@free-id=? (f3b83@stx^ f3bb4@e f3bb6@m* f3bb7@s* f3bb8@ae*) (vector-ref f3bb5@p '1)) f3bb9@r) (if (memv f3bc2@t '(scheme-id)) (and (symbol? f3bb4@e) (f2c3b@top-marked? f3bb6@m*) (f2cc5@free-id=? (f3b83@stx^ f3bb4@e f3bb6@m* f3bb7@s* f3bb8@ae*) (f2e52@scheme-stx (vector-ref f3bb5@p '1))) f3bb9@r) (if (memv f3bc2@t '(each+)) (call-with-values (lambda () (f3b87@match-each+ f3bb4@e (vector-ref f3bb5@p '1) (vector-ref f3bb5@p '2) (vector-ref f3bb5@p '3) f3bb6@m* f3bb7@s* f3bb8@ae* f3bb9@r)) (lambda (f3bcc@f3bc7 f3bcd@f3bc9 f3bce@f3bcb) ((lambda (f3bd2@r f3bd3@y-pat f3bd4@xr*) (and f3bd2@r (null? f3bd3@y-pat) (if (null? f3bd4@xr*) (f3b8b@match-empty (vector-ref f3bb5@p '1) f3bd2@r) (f3b8d@combine f3bd4@xr* f3bd2@r)))) f3bce@f3bcb f3bcd@f3bc9 f3bcc@f3bc7))) (if (memv f3bc2@t '(atom)) (and (fast-equal? (vector-ref f3bb5@p '1) (f2cd1@strip f3bb4@e f3bb6@m*)) f3bb9@r) (if (memv f3bc2@t '(vector)) (and (vector? f3bb4@e) (f3b91@match (vector->list f3bb4@e) (vector-ref f3bb5@p '1) f3bb6@m* f3bb7@s* f3bb8@ae* f3bb9@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" f3bb5@p)))))))) (vector-ref f3bb5@p '0))))))) (set! f3b91@match (lambda (f3b96@e f3b97@p f3b98@m* f3b99@s* f3b9a@ae* f3b9b@r) (if (not f3b9b@r) '#f (if (eq? f3b97@p '_) f3b9b@r (if (eq? f3b97@p 'any) (cons (f3b83@stx^ f3b96@e f3b98@m* f3b99@s* f3b9a@ae*) f3b9b@r) (if (f2c85@stx? f3b96@e) (and (not (f2c3b@top-marked? f3b98@m*)) (call-with-values (lambda () (f2ca3@join-wraps f3b98@m* f3b99@s* f3b9a@ae* f3b96@e)) (lambda (f3ba8@f3ba3 f3ba9@f3ba5 f3baa@f3ba7) ((lambda (f3bae@ae* f3baf@s* f3bb0@m*) (f3b91@match (f2c89@stx-expr f3b96@e) f3b97@p f3bb0@m* f3baf@s* f3bae@ae* f3b9b@r)) f3baa@f3ba7 f3ba9@f3ba5 f3ba8@f3ba3)))) (if (f285c@f277b@annotation? f3b96@e) (f3b91@match (f285e@f277f@annotation-expression f3b96@e) f3b97@p f3b98@m* f3b99@s* f3b9a@ae* f3b9b@r) (f3b8f@match* f3b96@e f3b97@p f3b98@m* f3b99@s* f3b9a@ae* f3b9b@r)))))))) (lambda (f3b92@e f3b93@p) (f3b91@match f3b92@e f3b93@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! f2eca@ellipsis? (lambda (f3c66@x) (and (f2cbd@id? f3c66@x) (f2cc5@free-id=? f3c66@x (f2e52@scheme-stx '...))))) (set! f2ecc@underscore? (lambda (f3c68@x) (and (f2cbd@id? f3c68@x) (f2cc5@free-id=? f3c68@x (f2e52@scheme-stx '_))))) (set! f2ece@verify-literals (lambda (f3c6a@lits f3c6b@expr) (for-each (lambda (f3c6e@x) (if (or (not (f2cbd@id? f3c6e@x)) (f2eca@ellipsis? f3c6e@x) (f2ecc@underscore? f3c6e@x)) (f2fb1@syntax-violation '#f '"invalid literal" f3c6b@expr f3c6e@x) (void))) f3c6a@lits))) (set! f2ed0@syntax-case-transformer ((lambda () ((lambda (f3c71@build-dispatch-call f3c73@invalid-ids-error f3c75@gen-clause f3c77@gen-syntax-case) (begin (set! f3c71@build-dispatch-call (lambda (f3ce2@pvars f3ce3@expr f3ce4@y f3ce5@r f3ce6@mr) ((lambda (f3cec@ids f3ced@levels) ((lambda (f3cf0@labels f3cf1@new-vars) ((lambda (f3cf4@body) (list '(primitive apply) (f2c19@f2b59@build-lambda '#f f3cf1@new-vars f3cf4@body) f3ce4@y)) (f2eea@chi-expr (f2ca9@add-subst (f2c78@make-full-rib f3cec@ids f3cf0@labels) f3ce3@expr) (append (map (lambda (f3cf6@label f3cf7@var f3cf8@level) (cons f3cf6@label (f2cdd@make-binding 'syntax (cons f3cf7@var f3cf8@level)))) f3cf0@labels f3cf1@new-vars (map cdr f3ce2@pvars)) f3ce5@r) f3ce6@mr))) (map f2c41@gen-label f3cec@ids) (map f2c3d@gen-lexical f3cec@ids))) (map car f3ce2@pvars) (map cdr f3ce2@pvars)))) (set! f3c73@invalid-ids-error (lambda (f3cd6@id* f3cd7@e f3cd8@class) ((letrec ((f3cdc@find (lambda (f3cde@id* f3cdf@ok*) (if (null? f3cde@id*) (f2fb1@syntax-violation '#f '"invalid syntax" f3cd7@e) (if (f2cbd@id? (car f3cde@id*)) (if (f2ccb@bound-id-member? (car f3cde@id*) f3cdf@ok*) (f2fad@syntax-error (car f3cde@id*) '"duplicate " f3cd8@class) (f3cdc@find (cdr f3cde@id*) (cons (car f3cde@id*) f3cdf@ok*))) (f2fad@syntax-error (car f3cde@id*) '"invalid " f3cd8@class)))))) f3cdc@find) f3cd6@id* '()))) (set! f3c75@gen-clause (lambda (f3cae@x f3caf@keys f3cb0@clauses f3cb1@r f3cb2@mr f3cb3@pat f3cb4@fender f3cb5@expr) (call-with-values (lambda () (f2ec6@convert-pattern f3cb3@pat f3caf@keys)) (lambda (f3cc2@f3cbf f3cc3@f3cc1) ((lambda (f3cc6@pvars f3cc7@p) (if (not (f2cc9@distinct-bound-ids? (map car f3cc6@pvars))) (f3c73@invalid-ids-error (map car f3cc6@pvars) f3cb3@pat '"pattern variable") (if (not (for-all (lambda (f3cca@x) (not (f2eca@ellipsis? (car f3cca@x)))) f3cc6@pvars)) (f2fb1@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" f3cb3@pat) ((lambda (f3ccc@y) ((lambda (f3cce@test) ((lambda (f3cd0@conseq) ((lambda (f3cd2@altern) (list (f2c19@f2b59@build-lambda '#f (list f3ccc@y) (list 'if f3cce@test f3cd0@conseq f3cd2@altern)) (list '(primitive syntax-dispatch) f3cae@x (list 'quote f3cc7@p)))) (f3c77@gen-syntax-case f3cae@x f3caf@keys f3cb0@clauses f3cb1@r f3cb2@mr))) (f3c71@build-dispatch-call f3cc6@pvars f3cb5@expr f3ccc@y f3cb1@r f3cb2@mr))) (if (eq? f3cb4@fender '#t) f3ccc@y ((lambda (f3cd4@call) (list 'if f3ccc@y f3cd4@call (list 'quote '#f))) (f3c71@build-dispatch-call f3cc6@pvars f3cb4@fender f3ccc@y f3cb1@r f3cb2@mr))))) (f2c3d@gen-lexical 'tmp))))) f3cc3@f3cc1 f3cc2@f3cbf))))) (set! f3c77@gen-syntax-case (lambda (f3c8c@x f3c8d@keys f3c8e@clauses f3c8f@r f3c90@mr) (if (null? f3c8e@clauses) (list '(primitive syntax-error) f3c8c@x) ((lambda (f3c96@t) ((lambda (f3c98@ls/false) (if f3c98@ls/false (apply (lambda (f3c9a@pat f3c9b@expr) (if (and (f2cbd@id? f3c9a@pat) (not (f2ccb@bound-id-member? f3c9a@pat f3c8d@keys)) (not (f2eca@ellipsis? f3c9a@pat))) (if (f2cc5@free-id=? f3c9a@pat (f2e52@scheme-stx '_)) (f2eea@chi-expr f3c9b@expr f3c8f@r f3c90@mr) ((lambda (f3c9e@lab f3c9f@lex) ((lambda (f3ca2@body) (list (f2c19@f2b59@build-lambda '#f (list f3c9f@lex) f3ca2@body) f3c8c@x)) (f2eea@chi-expr (f2ca9@add-subst (f2c78@make-full-rib (list f3c9a@pat) (list f3c9e@lab)) f3c9b@expr) (cons (cons f3c9e@lab (f2cdd@make-binding 'syntax (cons f3c9f@lex '0))) f3c8f@r) f3c90@mr))) (f2c41@gen-label f3c9a@pat) (f2c3d@gen-lexical f3c9a@pat))) (f3c75@gen-clause f3c8c@x f3c8d@keys (cdr f3c8e@clauses) f3c8f@r f3c90@mr f3c9a@pat '#t f3c9b@expr))) f3c98@ls/false) ((lambda (f3ca4@t) ((lambda (f3ca6@ls/false) (if f3ca6@ls/false (apply (lambda (f3ca8@pat f3ca9@fender f3caa@expr) (f3c75@gen-clause f3c8c@x f3c8d@keys (cdr f3c8e@clauses) f3c8f@r f3c90@mr f3ca8@pat f3ca9@fender f3caa@expr)) f3ca6@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3ca4@t))) (f2ec8@syntax-dispatch f3ca4@t '(any any any)))) f3c96@t))) (f2ec8@syntax-dispatch f3c96@t '(any any)))) (car f3c8e@clauses))))) (lambda (f3c78@e f3c79@r f3c7a@mr) ((lambda (f3c7e@t) ((lambda (f3c80@ls/false) (if f3c80@ls/false (apply (lambda (f3c82@expr f3c83@keys f3c84@clauses) (begin (f2ece@verify-literals f3c83@keys f3c78@e) ((lambda (f3c88@x) ((lambda (f3c8a@body) (list (f2c19@f2b59@build-lambda '#f (list f3c88@x) f3c8a@body) (f2eea@chi-expr f3c82@expr f3c79@r f3c7a@mr))) (f3c77@gen-syntax-case f3c88@x f3c83@keys f3c84@clauses f3c79@r f3c7a@mr))) (f2c3d@gen-lexical 'tmp)))) f3c80@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3c7e@t))) (f2ec8@syntax-dispatch f3c7e@t '(_ any each-any . each-any)))) f3c78@e)))) '#f '#f '#f '#f)))) (set! f2ed2@ellipsis-map (lambda (f3cfc@proc f3cfd@ls . f3d00@ls*) ((lambda (f3d03@who) (begin (set! f3d03@who '...) (begin (if (not (list? f3cfd@ls)) (assertion-violation f3d03@who '"not a list" f3cfd@ls) (void)) (if (not (null? f3d00@ls*)) ((lambda (f3d04@n) (for-each (lambda (f3d06@x) (begin (if (not (list? f3d06@x)) (assertion-violation f3d03@who '"not a list" f3d06@x) (void)) (if (not (= (length f3d06@x) f3d04@n)) (assertion-violation f3d03@who '"length mismatch" f3cfd@ls f3d06@x) (void)))) f3d00@ls*)) (length f3cfd@ls)) (void)) (apply map f3cfc@proc f3cfd@ls f3d00@ls*)))) '#f))) (set! f2ed4@syntax-transformer ((lambda () ((lambda (f3d09@gen-syntax f3d0b@gen-ref f3d0d@gen-append f3d0f@gen-mappend f3d11@gen-map f3d13@gen-cons f3d15@gen-vector f3d17@regen) (begin (set! f3d09@gen-syntax (lambda (f3d80@src f3d81@e f3d82@r f3d83@maps f3d84@ellipsis? f3d85@vec?) ((lambda (f3d8c@t) ((lambda (f3d8e@ls/false) (if (and f3d8e@ls/false (apply (lambda (f3d90@dots) (f3d84@ellipsis? f3d90@dots)) f3d8e@ls/false)) (apply (lambda (f3d92@dots) (f2fb1@syntax-violation '#f '"misplaced ellipsis in syntax form" f3d80@src)) f3d8e@ls/false) ((lambda (f3d94@t) ((lambda (f3d96@ls/false) (if (and f3d96@ls/false (apply (lambda (f3d98@id) (f2cbd@id? f3d98@id)) f3d96@ls/false)) (apply (lambda (f3d9a@id) ((lambda (f3d9c@label) ((lambda (f3d9e@b) ((lambda () (if (eq? (f2cdf@binding-type f3d9e@b) 'syntax) (call-with-values (lambda () ((lambda (f3da4@var.lev) (f3d0b@gen-ref f3d80@src (car f3da4@var.lev) (cdr f3da4@var.lev) f3d83@maps)) (f2ce1@binding-value f3d9e@b))) (lambda (f3da6@f3da1 f3da7@f3da3) ((lambda (f3daa@maps f3dab@var) (values (list 'ref f3dab@var) f3daa@maps)) f3da7@f3da3 f3da6@f3da1))) (values (list 'quote f3d81@e) f3d83@maps))))) (f2cdb@label->binding f3d9c@label f3d82@r))) (f2cd7@id->label f3d81@e))) f3d96@ls/false) ((lambda (f3dae@t) ((lambda (f3db0@ls/false) (if (and f3db0@ls/false (apply (lambda (f3db2@dots f3db3@e) (f3d84@ellipsis? f3db2@dots)) f3db0@ls/false)) (apply (lambda (f3db6@dots f3db7@e) (if f3d85@vec? (f2fb1@syntax-violation '#f '"misplaced ellipsis in syntax form" f3d80@src) (f3d09@gen-syntax f3d80@src f3db7@e f3d82@r f3d83@maps (lambda (f3dba@x) '#f) '#f))) f3db0@ls/false) ((lambda (f3dbc@t) ((lambda (f3dbe@ls/false) (if (and f3dbe@ls/false (apply (lambda (f3dc0@x f3dc1@dots f3dc2@y) (f3d84@ellipsis? f3dc1@dots)) f3dbe@ls/false)) (apply (lambda (f3dc6@x f3dc7@dots f3dc8@y) ((letrec ((f3dcc@f (lambda (f3dce@y f3dcf@k) ((lambda (f3dd2@t) ((lambda (f3dd4@ls/false) (if f3dd4@ls/false (apply (lambda () (f3dcf@k f3d83@maps)) f3dd4@ls/false) ((lambda (f3dd6@t) ((lambda (f3dd8@ls/false) (if (and f3dd8@ls/false (apply (lambda (f3dda@dots f3ddb@y) (f3d84@ellipsis? f3dda@dots)) f3dd8@ls/false)) (apply (lambda (f3dde@dots f3ddf@y) (f3dcc@f f3ddf@y (lambda (f3de2@maps) (call-with-values (lambda () (f3dcf@k (cons '() f3de2@maps))) (lambda (f3de8@f3de5 f3de9@f3de7) ((lambda (f3dec@maps f3ded@x) (if (null? (car f3dec@maps)) (f2fb1@syntax-violation '#f '"extra ellipsis in syntax form" f3d80@src) (values (f3d0f@gen-mappend f3ded@x (car f3dec@maps)) (cdr f3dec@maps)))) f3de9@f3de7 f3de8@f3de5)))))) f3dd8@ls/false) ((lambda (f3df0@t) ((lambda (f3df2@ls/false) (if f3df2@ls/false (apply (lambda () (call-with-values (lambda () (f3d09@gen-syntax f3d80@src f3dce@y f3d82@r f3d83@maps f3d84@ellipsis? f3d85@vec?)) (lambda (f3df8@f3df5 f3df9@f3df7) ((lambda (f3dfc@maps f3dfd@y) (call-with-values (lambda () (f3dcf@k f3dfc@maps)) (lambda (f3e04@f3e01 f3e05@f3e03) ((lambda (f3e08@maps f3e09@x) (values (f3d0d@gen-append f3e09@x f3dfd@y) f3e08@maps)) f3e05@f3e03 f3e04@f3e01)))) f3df9@f3df7 f3df8@f3df5)))) f3df2@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3df0@t))) (f2ec8@syntax-dispatch f3df0@t '_))) f3dd6@t))) (f2ec8@syntax-dispatch f3dd6@t '(any . any)))) f3dd2@t))) (f2ec8@syntax-dispatch f3dd2@t '()))) f3dce@y)))) f3dcc@f) f3dc8@y (lambda (f3e0c@maps) (call-with-values (lambda () (f3d09@gen-syntax f3d80@src f3dc6@x f3d82@r (cons '() f3e0c@maps) f3d84@ellipsis? '#f)) (lambda (f3e12@f3e0f f3e13@f3e11) ((lambda (f3e16@maps f3e17@x) (if (null? (car f3e16@maps)) (f2fb1@syntax-violation '#f '"extra ellipsis in syntax form" f3d80@src) (values (f3d11@gen-map f3e17@x (car f3e16@maps)) (cdr f3e16@maps)))) f3e13@f3e11 f3e12@f3e0f)))))) f3dbe@ls/false) ((lambda (f3e1a@t) ((lambda (f3e1c@ls/false) (if f3e1c@ls/false (apply (lambda (f3e1e@x f3e1f@y) (call-with-values (lambda () (f3d09@gen-syntax f3d80@src f3e1e@x f3d82@r f3d83@maps f3d84@ellipsis? '#f)) (lambda (f3e26@f3e23 f3e27@f3e25) ((lambda (f3e2a@maps f3e2b@xnew) (call-with-values (lambda () (f3d09@gen-syntax f3d80@src f3e1f@y f3d82@r f3e2a@maps f3d84@ellipsis? f3d85@vec?)) (lambda (f3e32@f3e2f f3e33@f3e31) ((lambda (f3e36@maps f3e37@ynew) (values (f3d13@gen-cons f3d81@e f3e1e@x f3e1f@y f3e2b@xnew f3e37@ynew) f3e36@maps)) f3e33@f3e31 f3e32@f3e2f)))) f3e27@f3e25 f3e26@f3e23)))) f3e1c@ls/false) ((lambda (f3e3a@t) ((lambda (f3e3c@ls/false) (if f3e3c@ls/false (apply (lambda (f3e3e@ls) (call-with-values (lambda () (f3d09@gen-syntax f3d80@src f3e3e@ls f3d82@r f3d83@maps f3d84@ellipsis? '#t)) (lambda (f3e44@f3e41 f3e45@f3e43) ((lambda (f3e48@maps f3e49@lsnew) (values (f3d15@gen-vector f3d81@e f3e3e@ls f3e49@lsnew) f3e48@maps)) f3e45@f3e43 f3e44@f3e41)))) f3e3c@ls/false) ((lambda (f3e4c@t) ((lambda (f3e4e@ls/false) (if f3e4e@ls/false (apply (lambda () (values (list 'quote f3d81@e) f3d83@maps)) f3e4e@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3e4c@t))) (f2ec8@syntax-dispatch f3e4c@t '_))) f3e3a@t))) (f2ec8@syntax-dispatch f3e3a@t '#(vector each-any)))) f3e1a@t))) (f2ec8@syntax-dispatch f3e1a@t '(any . any)))) f3dbc@t))) (f2ec8@syntax-dispatch f3dbc@t '(any any . any)))) f3dae@t))) (f2ec8@syntax-dispatch f3dae@t '(any any)))) f3d94@t))) (f2ec8@syntax-dispatch f3d94@t 'any))) f3d8c@t))) (f2ec8@syntax-dispatch f3d8c@t 'any))) f3d81@e))) (set! f3d0b@gen-ref (lambda (f3d66@src f3d67@var f3d68@level f3d69@maps) (if (= f3d68@level '0) (values f3d67@var f3d69@maps) (if (null? f3d69@maps) (f2fb1@syntax-violation '#f '"missing ellipsis in syntax form" f3d66@src) (call-with-values (lambda () (f3d0b@gen-ref f3d66@src f3d67@var (- f3d68@level '1) (cdr f3d69@maps))) (lambda (f3d72@f3d6f f3d73@f3d71) ((lambda (f3d76@outer-maps f3d77@outer-var) ((lambda (f3d7a@t) (if f3d7a@t ((lambda (f3d7c@b) (values (cdr f3d7c@b) f3d69@maps)) f3d7a@t) ((lambda (f3d7e@inner-var) (values f3d7e@inner-var (cons (cons (cons f3d77@outer-var f3d7e@inner-var) (car f3d69@maps)) f3d76@outer-maps))) (f2c3d@gen-lexical 'tmp)))) (assq f3d77@outer-var (car f3d69@maps)))) f3d73@f3d71 f3d72@f3d6f))))))) (set! f3d0d@gen-append (lambda (f3d62@x f3d63@y) (if (fast-equal? f3d63@y ''()) f3d62@x (list 'append f3d62@x f3d63@y)))) (set! f3d0f@gen-mappend (lambda (f3d5e@e f3d5f@map-env) (list 'apply '(primitive append) (f3d11@gen-map f3d5e@e f3d5f@map-env)))) (set! f3d11@gen-map (lambda (f3d4c@e f3d4d@map-env) ((lambda (f3d50@formals f3d51@actuals) (if (eq? (car f3d4c@e) 'ref) (car f3d51@actuals) (if (for-all (lambda (f3d54@x) (and (eq? (car f3d54@x) 'ref) (memq (cadr f3d54@x) f3d50@formals))) (cdr f3d4c@e)) ((lambda (f3d56@args) (cons 'map (cons (list 'primitive (car f3d4c@e)) f3d56@args))) (map ((lambda (f3d58@r) (lambda (f3d5a@x) (cdr (assq (cadr f3d5a@x) f3d58@r)))) (map cons f3d50@formals f3d51@actuals)) (cdr f3d4c@e))) (cons* 'map (list 'lambda f3d50@formals f3d4c@e) f3d51@actuals)))) (map cdr f3d4d@map-env) (map (lambda (f3d5c@x) (list 'ref (car f3d5c@x))) f3d4d@map-env)))) (set! f3d13@gen-cons (lambda (f3d3c@e f3d3d@x f3d3e@y f3d3f@xnew f3d40@ynew) ((lambda (f3d46@t) (if (memv f3d46@t '(quote)) (if (eq? (car f3d3f@xnew) 'quote) ((lambda (f3d48@xnew f3d49@ynew) (if (and (eq? f3d48@xnew f3d3d@x) (eq? f3d49@ynew f3d3e@y)) (list 'quote f3d3c@e) (list 'quote (cons f3d48@xnew f3d49@ynew)))) (cadr f3d3f@xnew) (cadr f3d40@ynew)) (if (null? (cadr f3d40@ynew)) (list 'list f3d3f@xnew) (list 'cons f3d3f@xnew f3d40@ynew))) (if (memv f3d46@t '(list)) (cons 'list (cons f3d3f@xnew (cdr f3d40@ynew))) (list 'cons f3d3f@xnew f3d40@ynew)))) (car f3d40@ynew)))) (set! f3d15@gen-vector (lambda (f3d36@e f3d37@ls f3d38@lsnew) (if (eq? (car f3d38@lsnew) 'quote) (if (eq? (cadr f3d38@lsnew) f3d37@ls) (list 'quote f3d36@e) (list 'quote (list->vector (cadr f3d38@lsnew)))) (if (eq? (car f3d38@lsnew) 'list) (cons 'vector (cdr f3d38@lsnew)) (list 'list->vector f3d38@lsnew))))) (set! f3d17@regen (lambda (f3d30@x) ((lambda (f3d32@t) (if (memv f3d32@t '(ref)) (cadr f3d30@x) (if (memv f3d32@t '(primitive)) (list 'primitive (cadr f3d30@x)) (if (memv f3d32@t '(quote)) (list 'quote (cadr f3d30@x)) (if (memv f3d32@t '(lambda)) (f2c19@f2b59@build-lambda '#f (cadr f3d30@x) (f3d17@regen (caddr f3d30@x))) (if (memv f3d32@t '(map)) ((lambda (f3d34@ls) (cons '(primitive ellipsis-map) f3d34@ls)) (map f3d17@regen (cdr f3d30@x))) (cons (list 'primitive (car f3d30@x)) (map f3d17@regen (cdr f3d30@x))))))))) (car f3d30@x)))) (lambda (f3d18@e f3d19@r f3d1a@mr) ((lambda (f3d1e@t) ((lambda (f3d20@ls/false) (if f3d20@ls/false (apply (lambda (f3d22@x) (call-with-values (lambda () (f3d09@gen-syntax f3d18@e f3d22@x f3d19@r '() f2eca@ellipsis? '#f)) (lambda (f3d28@f3d25 f3d29@f3d27) ((lambda (f3d2c@maps f3d2d@e) (f3d17@regen f3d2d@e)) f3d29@f3d27 f3d28@f3d25)))) f3d20@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3d1e@t))) (f2ec8@syntax-dispatch f3d1e@t '(_ any)))) f3d18@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! f2ed6@core-macro-transformer (lambda (f3e50@name) ((lambda (f3e52@t) (if (memv f3e52@t '(quote)) f2e78@quote-transformer (if (memv f3e52@t '(lambda)) f2e7c@lambda-transformer (if (memv f3e52@t '(case-lambda)) f2e7a@case-lambda-transformer (if (memv f3e52@t '(letrec)) f2e60@letrec-transformer (if (memv f3e52@t '(letrec*)) f2e62@letrec*-transformer (if (memv f3e52@t '(if)) f2e70@if-transformer (if (memv f3e52@t '(and)) f2e72@and-transformer (if (memv f3e52@t '(or)) f2e74@or-transformer (if (memv f3e52@t '(foreign-call)) f2ec4@foreign-call-transformer (if (memv f3e52@t '(syntax-case)) f2ed0@syntax-case-transformer (if (memv f3e52@t '(syntax)) f2ed4@syntax-transformer (if (memv f3e52@t '(type-descriptor)) f2e66@type-descriptor-transformer (if (memv f3e52@t '(record-type-descriptor)) f2e68@record-type-descriptor-transformer (if (memv f3e52@t '(record-constructor-descriptor)) f2e6a@record-constructor-descriptor-transformer (if (memv f3e52@t '(fluid-let-syntax)) f2e64@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" f3e50@name))))))))))))))))) f3e50@name))) (set! f2ed8@symbol-macro (lambda (f3e54@x f3e55@set) ((lambda (f3e58@t) ((lambda (f3e5a@ls/false) (if (and f3e5a@ls/false (apply (lambda (f3e5c@name) (and (f2cbd@id? f3e5c@name) (memq (f2cbf@id->sym f3e5c@name) f3e55@set))) f3e5a@ls/false)) (apply (lambda (f3e5e@name) (f2e7e@bless (list 'quote f3e5e@name))) f3e5a@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3e58@t))) (f2ec8@syntax-dispatch f3e58@t '(_ any)))) f3e54@x))) (set! f2eda@macro-transformer (lambda (f3e60@x) (if (procedure? f3e60@x) f3e60@x (if (symbol? f3e60@x) ((lambda (f3e62@t) (if (memv f3e62@t '(define-record-type)) f2ebc@define-record-type-macro (if (memv f3e62@t '(define-struct)) f2eba@define-struct-macro (if (memv f3e62@t '(include)) f2eb0@include-macro (if (memv f3e62@t '(cond)) f2eac@cond-macro (if (memv f3e62@t '(let)) f2e84@let-macro (if (memv f3e62@t '(do)) f2ea4@do-macro (if (memv f3e62@t '(or)) f2ea8@or-macro (if (memv f3e62@t '(and)) f2eaa@and-macro (if (memv f3e62@t '(let*)) f2ea6@let*-macro (if (memv f3e62@t '(let-values)) f2e86@let-values-macro (if (memv f3e62@t '(let*-values)) f2e88@let*-values-macro (if (memv f3e62@t '(syntax-rules)) f2eb4@syntax-rules-macro (if (memv f3e62@t '(quasiquote)) f2eb6@quasiquote-macro (if (memv f3e62@t '(quasisyntax)) f2eb8@quasisyntax-macro (if (memv f3e62@t '(with-syntax)) f2e80@with-syntax-macro (if (memv f3e62@t '(when)) f2e6c@when-macro (if (memv f3e62@t '(unless)) f2e6e@unless-macro (if (memv f3e62@t '(case)) f2e76@case-macro (if (memv f3e62@t '(identifier-syntax)) f2ea2@identifier-syntax-macro (if (memv f3e62@t '(time)) f2e9a@time-macro (if (memv f3e62@t '(delay)) f2e9c@delay-macro (if (memv f3e62@t '(assert)) f2e9e@assert-macro (if (memv f3e62@t '(endianness)) f2ea0@endianness-macro (if (memv f3e62@t '(guard)) f2e96@guard-macro (if (memv f3e62@t '(define-enumeration)) f2e98@define-enumeration-macro (if (memv f3e62@t '(trace-lambda)) f2e8a@trace-lambda-macro (if (memv f3e62@t '(trace-define)) f2e8c@trace-define-macro (if (memv f3e62@t '(trace-define-syntax)) f2e8e@trace-define-syntax-macro (if (memv f3e62@t '(trace-let-syntax)) f2e92@trace-let-syntax-macro (if (memv f3e62@t '(trace-letrec-syntax)) f2e94@trace-letrec-syntax-macro (if (memv f3e62@t '(define-condition-type)) f2ebe@define-condition-type-macro (if (memv f3e62@t '(parameterize)) f2ec2@parameterize-macro (if (memv f3e62@t '(include-into)) f2eb2@include-into-macro (if (memv f3e62@t '(eol-style)) (lambda (f3e64@x) (f2ed8@symbol-macro f3e64@x '(none lf cr crlf nel crnel ls))) (if (memv f3e62@t '(error-handling-mode)) (lambda (f3e66@x) (f2ed8@symbol-macro f3e66@x '(ignore raise replace))) (if (memv f3e62@t '(buffer-mode)) (lambda (f3e68@x) (f2ed8@symbol-macro f3e68@x '(none line block))) (if (memv f3e62@t '(file-options)) f2c30@file-options-macro (if (memv f3e62@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) f2ec0@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" f3e60@x)))))))))))))))))))))))))))))))))))))))) f3e60@x) (error 'core-macro-transformer '"BUG: invalid macro" f3e60@x))))) (set! f2edc@local-macro-transformer (lambda (f3e6a@x) (car f3e6a@x))) (set! f2ede@do-macro-call (lambda (f3e6c@transformer f3e6d@expr) ((lambda (f3e70@out) (begin ((letrec ((f3e72@f (lambda (f3e74@x) (if (not (f2c85@stx? f3e74@x)) (if (pair? f3e74@x) (begin (f3e72@f (car f3e74@x)) (f3e72@f (cdr f3e74@x))) (if (vector? f3e74@x) (vector-for-each f3e72@f f3e74@x) (if (symbol? f3e74@x) (f2fb1@syntax-violation '#f '"raw symbol encountered in output of macro" f3e6d@expr f3e74@x) (void)))) (void))))) f3e72@f) f3e70@out) (f2ca7@add-mark (f2c9d@gen-mark) f3e70@out f3e6d@expr))) (f3e6c@transformer (f2ca7@add-mark f2c9f@anti-mark f3e6d@expr '#f))))) (set! f2ee0@chi-macro (lambda (f3e76@p f3e77@e) (f2ede@do-macro-call (f2eda@macro-transformer f3e76@p) f3e77@e))) (set! f2ee2@chi-local-macro (lambda (f3e7a@p f3e7b@e) (f2ede@do-macro-call (f2edc@local-macro-transformer f3e7a@p) f3e7b@e))) (set! f2ee4@chi-global-macro (lambda (f3e7e@p f3e7f@e) ((lambda (f3e82@lib f3e83@loc) (begin (f2ae2@f2984@visit-library f3e82@lib) ((lambda (f3e86@x) ((lambda (f3e88@transformer) (f2ede@do-macro-call f3e88@transformer f3e7f@e)) (if (procedure? f3e86@x) f3e86@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" f3e86@x)))) (symbol-value f3e83@loc)))) (car f3e7e@p) (cdr f3e7e@p)))) (set! f2ee6@chi-expr* (lambda (f3e8a@e* f3e8b@r f3e8c@mr) (if (null? f3e8a@e*) '() ((lambda (f3e90@e) (cons f3e90@e (f2ee6@chi-expr* (cdr f3e8a@e*) f3e8b@r f3e8c@mr))) (f2eea@chi-expr (car f3e8a@e*) f3e8b@r f3e8c@mr))))) (set! f2ee8@chi-application (lambda (f3e92@e f3e93@r f3e94@mr) ((lambda (f3e98@t) ((lambda (f3e9a@ls/false) (if f3e9a@ls/false (apply (lambda (f3e9c@rator f3e9d@rands) ((lambda (f3ea0@rator) (cons f3ea0@rator (f2ee6@chi-expr* f3e9d@rands f3e93@r f3e94@mr))) (f2eea@chi-expr f3e9c@rator f3e93@r f3e94@mr))) f3e9a@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3e98@t))) (f2ec8@syntax-dispatch f3e98@t '(any . each-any)))) f3e92@e))) (set! f2eea@chi-expr (lambda (f3ea2@e f3ea3@r f3ea4@mr) (call-with-values (lambda () (f2ce5@syntax-type f3ea2@e f3ea3@r)) (lambda (f3eae@f3ea9 f3eaf@f3eab f3eb0@f3ead) ((lambda (f3eb4@kwd f3eb5@value f3eb6@type) ((lambda (f3eba@t) (if (memv f3eba@t '(core-macro)) ((lambda (f3ebc@transformer) (f3ebc@transformer f3ea2@e f3ea3@r f3ea4@mr)) (f2ed6@core-macro-transformer f3eb5@value)) (if (memv f3eba@t '(global)) ((lambda (f3ebe@lib) ((lambda (f3ec0@loc) ((lambda () (begin ((f2f33@inv-collector) f3ebe@lib) f3ec0@loc)))) (cdr f3eb5@value))) (car f3eb5@value)) (if (memv f3eba@t '(core-prim)) ((lambda (f3ec2@name) (list 'primitive f3ec2@name)) f3eb5@value) (if (memv f3eba@t '(call)) (f2ee8@chi-application f3ea2@e f3ea3@r f3ea4@mr) (if (memv f3eba@t '(lexical)) ((lambda (f3ec4@lex) f3ec4@lex) (f2e54@lexical-var f3eb5@value)) (if (memv f3eba@t '(global-macro global-macro!)) (f2eea@chi-expr (f2ee4@chi-global-macro f3eb5@value f3ea2@e) f3ea3@r f3ea4@mr) (if (memv f3eba@t '(local-macro local-macro!)) (f2eea@chi-expr (f2ee2@chi-local-macro f3eb5@value f3ea2@e) f3ea3@r f3ea4@mr) (if (memv f3eba@t '(macro macro!)) (f2eea@chi-expr (f2ee0@chi-macro f3eb5@value f3ea2@e) f3ea3@r f3ea4@mr) (if (memv f3eba@t '(constant)) ((lambda (f3ec6@datum) (list 'quote f3ec6@datum)) f3eb5@value) (if (memv f3eba@t '(set!)) (f2eec@chi-set! f3ea2@e f3ea3@r f3ea4@mr) (if (memv f3eba@t '(begin)) ((lambda (f3ec8@t) ((lambda (f3eca@ls/false) (if f3eca@ls/false (apply (lambda (f3ecc@x f3ecd@x*) (f2c1c@f2b8b@build-sequence '#f (f2ee6@chi-expr* (cons f3ecc@x f3ecd@x*) f3ea3@r f3ea4@mr))) f3eca@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3ec8@t))) (f2ec8@syntax-dispatch f3ec8@t '(_ any . each-any)))) f3ea2@e) (if (memv f3eba@t '(let-syntax letrec-syntax)) ((lambda (f3ed0@t) ((lambda (f3ed2@ls/false) (if (and f3ed2@ls/false (apply (lambda (f3ed4@xlhs* f3ed5@xrhs* f3ed6@xbody f3ed7@xbody*) (if (not (f2cc7@valid-bound-ids? f3ed4@xlhs*)) (f2fb1@syntax-violation '#f '"invalid identifiers" f3ea2@e) (void))) f3ed2@ls/false)) (apply (lambda (f3edc@xlhs* f3edd@xrhs* f3ede@xbody f3edf@xbody*) ((lambda (f3ee4@xlab*) ((lambda (f3ee6@xrib) ((lambda (f3ee8@xb*) ((lambda () (f2c1c@f2b8b@build-sequence '#f (f2ee6@chi-expr* (map (lambda (f3eea@x) (f2ca9@add-subst f3ee6@xrib f3eea@x)) (cons f3ede@xbody f3edf@xbody*)) (append (map cons f3ee4@xlab* f3ee8@xb*) f3ea3@r) (append (map cons f3ee4@xlab* f3ee8@xb*) f3ea4@mr)))))) (map (lambda (f3eec@x) (f2cfb@make-eval-transformer (f2f25@expand-transformer (if (eq? f3eb6@type 'let-syntax) f3eec@x (f2ca9@add-subst f3ee6@xrib f3eec@x)) f3ea4@mr))) f3edd@xrhs*))) (f2c78@make-full-rib f3edc@xlhs* f3ee4@xlab*))) (map f2c41@gen-label f3edc@xlhs*))) f3ed2@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3ed0@t))) (f2ec8@syntax-dispatch f3ed0@t '(_ #(each (any any)) any . each-any)))) f3ea2@e) (if (memv f3eba@t '(displaced-lexical)) (f2fb1@syntax-violation '#f '"identifier out of context" f3ea2@e) (if (memv f3eba@t '(syntax)) (f2fb1@syntax-violation '#f '"reference to pattern variable outside a syntax form" f3ea2@e) (if (memv f3eba@t '(define define-syntax module import library)) (f2fb1@syntax-violation '#f (string-append ((lambda (f3eee@t) (if (memv f3eee@t '(define)) '"a definition" (if (memv f3eee@t '(define-syntax)) '"a define-syntax" (if (memv f3eee@t '(module)) '"a module definition" (if (memv f3eee@t '(library)) '"a library definition" (if (memv f3eee@t '(import)) '"an import declaration" (if (memv f3eee@t '(export)) '"an export declaration" '"a non-expression"))))))) f3eb6@type) '" was found where an expression was expected") f3ea2@e) (if (memv f3eba@t '(mutable)) (f2fb1@syntax-violation '#f '"attempt to reference an unexportable variable" f3ea2@e) (f2fb1@syntax-violation '#f '"invalid expression" f3ea2@e)))))))))))))))))) f3eb6@type)) f3eb0@f3ead f3eaf@f3eab f3eae@f3ea9))))) (set! f2eec@chi-set! (lambda (f3ef0@e f3ef1@r f3ef2@mr) ((lambda (f3ef6@t) ((lambda (f3ef8@ls/false) (if (and f3ef8@ls/false (apply (lambda (f3efa@x f3efb@v) (f2cbd@id? f3efa@x)) f3ef8@ls/false)) (apply (lambda (f3efe@x f3eff@v) (call-with-values (lambda () (f2ce5@syntax-type f3efe@x f3ef1@r)) (lambda (f3f08@f3f03 f3f09@f3f05 f3f0a@f3f07) ((lambda (f3f0e@kwd f3f0f@value f3f10@type) ((lambda (f3f14@t) (if (memv f3f14@t '(lexical)) (begin (f2e58@set-lexical-mutable! f3f0f@value '#t) (list 'set! (f2e54@lexical-var f3f0f@value) (f2eea@chi-expr f3eff@v f3ef1@r f3ef2@mr))) (if (memv f3f14@t '(core-prim)) (f2fb1@syntax-violation '#f '"cannot modify imported core primitive" f3ef0@e) (if (memv f3f14@t '(global)) (f2fb1@syntax-violation '#f '"attempt to modify imported binding" f3ef0@e) (if (memv f3f14@t '(global-macro!)) (f2eea@chi-expr (f2ee4@chi-global-macro f3f0f@value f3ef0@e) f3ef1@r f3ef2@mr) (if (memv f3f14@t '(local-macro!)) (f2eea@chi-expr (f2ee2@chi-local-macro f3f0f@value f3ef0@e) f3ef1@r f3ef2@mr) (if (memv f3f14@t '(mutable)) (f2fb1@syntax-violation '#f '"attempt to assign to an unexportable variable" f3ef0@e) (f2fb1@syntax-violation '#f '"invalid syntax" f3ef0@e)))))))) f3f10@type)) f3f0a@f3f07 f3f09@f3f05 f3f08@f3f03)))) f3ef8@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3ef6@t))) (f2ec8@syntax-dispatch f3ef6@t '(_ any any)))) f3ef0@e))) (set! f2eee@verify-formals (lambda (f3f16@fmls f3f17@stx) ((lambda (f3f1a@t) ((lambda (f3f1c@ls/false) (if f3f1c@ls/false (apply (lambda (f3f1e@x*) (if (not (f2cc7@valid-bound-ids? f3f1e@x*)) (f2e82@invalid-fmls-error f3f17@stx f3f16@fmls) (void))) f3f1c@ls/false) ((lambda (f3f20@t) ((lambda (f3f22@ls/false) (if f3f22@ls/false (apply (lambda (f3f24@x* f3f25@x) (if (not (f2cc7@valid-bound-ids? (cons f3f25@x f3f24@x*))) (f2e82@invalid-fmls-error f3f17@stx f3f16@fmls) (void))) f3f22@ls/false) ((lambda (f3f28@t) ((lambda (f3f2a@ls/false) (if f3f2a@ls/false (apply (lambda () (f2fb1@syntax-violation '#f '"invalid syntax" f3f17@stx)) f3f2a@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3f28@t))) (f2ec8@syntax-dispatch f3f28@t '_))) f3f20@t))) (f2ec8@syntax-dispatch f3f20@t '#(each+ any () any)))) f3f1a@t))) (f2ec8@syntax-dispatch f3f1a@t 'each-any))) f3f16@fmls))) (set! f2ef0@chi-lambda-clause (lambda (f3f2c@stx f3f2d@fmls f3f2e@body* f3f2f@r f3f30@mr) ((lambda (f3f36@t) ((lambda (f3f38@ls/false) (if f3f38@ls/false (apply (lambda (f3f3a@x*) (begin (f2eee@verify-formals f3f2d@fmls f3f2c@stx) ((lambda (f3f3c@lex* f3f3d@lab*) (values f3f3c@lex* (f2f00@chi-internal (f2ca9@add-subst (f2c78@make-full-rib f3f3a@x* f3f3d@lab*) f3f2e@body*) (f2e5c@add-lexicals f3f3d@lab* f3f3c@lex* f3f2f@r) f3f30@mr))) (map f2c3d@gen-lexical f3f3a@x*) (map f2c41@gen-label f3f3a@x*)))) f3f38@ls/false) ((lambda (f3f40@t) ((lambda (f3f42@ls/false) (if f3f42@ls/false (apply (lambda (f3f44@x* f3f45@x) (begin (f2eee@verify-formals f3f2d@fmls f3f2c@stx) ((lambda (f3f48@lex* f3f49@lab* f3f4a@lex f3f4b@lab) (values (append f3f48@lex* f3f4a@lex) (f2f00@chi-internal (f2ca9@add-subst (f2c78@make-full-rib (cons f3f45@x f3f44@x*) (cons f3f4b@lab f3f49@lab*)) f3f2e@body*) (f2e5c@add-lexicals (cons f3f4b@lab f3f49@lab*) (cons f3f4a@lex f3f48@lex*) f3f2f@r) f3f30@mr))) (map f2c3d@gen-lexical f3f44@x*) (map f2c41@gen-label f3f44@x*) (f2c3d@gen-lexical f3f45@x) (f2c41@gen-label f3f45@x)))) f3f42@ls/false) ((lambda (f3f50@t) ((lambda (f3f52@ls/false) (if f3f52@ls/false (apply (lambda () (f2fb1@syntax-violation '#f '"invalid syntax" f3f2d@fmls)) f3f52@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f3f50@t))) (f2ec8@syntax-dispatch f3f50@t '_))) f3f40@t))) (f2ec8@syntax-dispatch f3f40@t '#(each+ any () any)))) f3f36@t))) (f2ec8@syntax-dispatch f3f36@t 'each-any))) f3f2d@fmls))) (set! f2ef2@chi-lambda-clause* (lambda (f3f54@stx f3f55@fmls* f3f56@body** f3f57@r f3f58@mr) (if (null? f3f55@fmls*) (values '() '()) (call-with-values (lambda () (f2ef0@chi-lambda-clause f3f54@stx (car f3f55@fmls*) (car f3f56@body**) f3f57@r f3f58@mr)) (lambda (f3f62@f3f5f f3f63@f3f61) ((lambda (f3f66@b f3f67@a) (call-with-values (lambda () (f2ef2@chi-lambda-clause* f3f54@stx (cdr f3f55@fmls*) (cdr f3f56@body**) f3f57@r f3f58@mr)) (lambda (f3f6e@f3f6b f3f6f@f3f6d) ((lambda (f3f72@b* f3f73@a*) (values (cons f3f67@a f3f73@a*) (cons f3f66@b f3f72@b*))) f3f6f@f3f6d f3f6e@f3f6b)))) f3f63@f3f61 f3f62@f3f5f)))))) (set! f2ef4@chi-defun (lambda (f3f76@x f3f77@r f3f78@mr) ((lambda (f3f7c@fmls f3f7d@body*) (call-with-values (lambda () (f2ef0@chi-lambda-clause f3f7c@fmls f3f7c@fmls f3f7d@body* f3f77@r f3f78@mr)) (lambda (f3f84@f3f81 f3f85@f3f83) ((lambda (f3f88@body f3f89@fmls) (f2c19@f2b59@build-lambda '#f f3f89@fmls f3f88@body)) f3f85@f3f83 f3f84@f3f81)))) (car f3f76@x) (cdr f3f76@x)))) (set! f2ef6@chi-rhs (lambda (f3f8c@rhs f3f8d@r f3f8e@mr) ((lambda (f3f92@t) (if (memv f3f92@t '(defun)) (f2ef4@chi-defun (cdr f3f8c@rhs) f3f8d@r f3f8e@mr) (if (memv f3f92@t '(expr)) ((lambda (f3f94@expr) (f2eea@chi-expr f3f94@expr f3f8d@r f3f8e@mr)) (cdr f3f8c@rhs)) (if (memv f3f92@t '(top-expr)) ((lambda (f3f96@expr) (f2c1c@f2b8b@build-sequence '#f (list (f2eea@chi-expr f3f96@expr f3f8d@r f3f8e@mr) (f2c1d@f2b8d@build-void)))) (cdr f3f8c@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" f3f8c@rhs))))) (car f3f8c@rhs)))) (set! f2ef8@expand-interaction-rhs*/init* (lambda (f3f98@lhs* f3f99@rhs* f3f9a@init* f3f9b@r f3f9c@mr) ((letrec ((f3fa2@f (lambda (f3fa4@lhs* f3fa5@rhs*) (if (null? f3fa4@lhs*) (map (lambda (f3fa8@x) (f2eea@chi-expr f3fa8@x f3f9b@r f3f9c@mr)) f3f9a@init*) ((lambda (f3faa@lhs f3fab@rhs) ((lambda (f3fae@t) (if (memv f3fae@t '(defun)) ((lambda (f3fb0@rhs) (cons (list 'set! f3faa@lhs f3fb0@rhs) (f3fa2@f (cdr f3fa4@lhs*) (cdr f3fa5@rhs*)))) (f2ef4@chi-defun (cdr f3fab@rhs) f3f9b@r f3f9c@mr)) (if (memv f3fae@t '(expr)) ((lambda (f3fb2@rhs) (cons (list 'set! f3faa@lhs f3fb2@rhs) (f3fa2@f (cdr f3fa4@lhs*) (cdr f3fa5@rhs*)))) (f2eea@chi-expr (cdr f3fab@rhs) f3f9b@r f3f9c@mr)) (if (memv f3fae@t '(top-expr)) ((lambda (f3fb4@e) (cons f3fb4@e (f3fa2@f (cdr f3fa4@lhs*) (cdr f3fa5@rhs*)))) (f2eea@chi-expr (cdr f3fab@rhs) f3f9b@r f3f9c@mr)) (error 'expand-interaction '"invallid" f3fab@rhs))))) (car f3fab@rhs))) (car f3fa4@lhs*) (car f3fa5@rhs*)))))) f3fa2@f) f3f98@lhs* f3f99@rhs*))) (set! f2efa@chi-rhs* (lambda (f3fb6@rhs* f3fb7@r f3fb8@mr) ((letrec ((f3fbc@f (lambda (f3fbe@ls) (if (null? f3fbe@ls) '() ((lambda (f3fc0@a) (cons f3fc0@a (f3fbc@f (cdr f3fbe@ls)))) (f2ef6@chi-rhs (car f3fbe@ls) f3fb7@r f3fb8@mr)))))) f3fbc@f) f3fb6@rhs*))) (set! f2efc@find-bound=? (lambda (f3fc2@x f3fc3@lhs* f3fc4@rhs*) (if (null? f3fc3@lhs*) '#f (if (f2cc3@bound-id=? f3fc2@x (car f3fc3@lhs*)) (car f3fc4@rhs*) (f2efc@find-bound=? f3fc2@x (cdr f3fc3@lhs*) (cdr f3fc4@rhs*)))))) (set! f2efe@find-dups (lambda (f3fc8@ls) ((letrec ((f3fca@f (lambda (f3fcc@ls f3fcd@dups) (if (null? f3fcc@ls) f3fcd@dups ((lambda (f3fd0@t) (if f3fd0@t ((lambda (f3fd2@x) (f3fca@f (cdr f3fcc@ls) (cons (list (car f3fcc@ls) f3fd2@x) f3fcd@dups))) f3fd0@t) (f3fca@f (cdr f3fcc@ls) f3fcd@dups))) (f2efc@find-bound=? (car f3fcc@ls) (cdr f3fcc@ls) (cdr f3fcc@ls))))))) f3fca@f) f3fc8@ls '()))) (set! f2f00@chi-internal (lambda (f3fd4@e* f3fd5@r f3fd6@mr) ((lambda (f3fda@rib) (call-with-values (lambda () (f2f23@chi-body* (map (lambda (f3fec@x) (f2ca9@add-subst f3fda@rib f3fec@x)) (f2cbb@syntax->list f3fd4@e*)) f3fd5@r f3fd6@mr '() '() '() '() '() f3fda@rib '#f)) (lambda (f3fee@f3fdd f3fef@f3fdf f3ff0@f3fe1 f3ff1@f3fe3 f3ff2@f3fe5 f3ff3@f3fe7 f3ff4@f3fe9 f3ff5@f3feb) ((lambda (f3ffe@_exp* f3fff@kwd* f4000@mod** f4001@rhs* f4002@lex* f4003@mr f4004@r f4005@e*) (begin (if (null? f4005@e*) (f2fb1@syntax-violation '#f '"no expression in body" f4005@e*) (void)) ((lambda (f400e@init*) ((lambda (f4010@rhs*) ((lambda () (f2c1f@f2b91@build-letrec* '#f (reverse f4002@lex*) (reverse f4010@rhs*) (f2c1c@f2b8b@build-sequence '#f f400e@init*))))) (f2efa@chi-rhs* f4001@rhs* f4004@r f4003@mr))) (f2ee6@chi-expr* (append (apply append (reverse f4000@mod**)) f4005@e*) f4004@r f4003@mr)))) f3ff5@f3feb f3ff4@f3fe9 f3ff3@f3fe7 f3ff2@f3fe5 f3ff1@f3fe3 f3ff0@f3fe1 f3fef@f3fdf f3fee@f3fdd)))) (f2c6c@make-empty-rib)))) (set! f2f02@parse-module (lambda (f4012@e) ((lambda (f4014@t) ((lambda (f4016@ls/false) (if f4016@ls/false (apply (lambda (f4018@export* f4019@b*) (begin (if (not (for-all f2cbd@id? f4018@export*)) (f2fb1@syntax-violation '#f '"module exports must be identifiers" f4012@e) (void)) (values '#f (list->vector f4018@export*) f4019@b*))) f4016@ls/false) ((lambda (f401c@t) ((lambda (f401e@ls/false) (if f401e@ls/false (apply (lambda (f4020@name f4021@export* f4022@b*) (begin (if (not (f2cbd@id? f4020@name)) (f2fb1@syntax-violation '#f '"module name must be an identifier" f4012@e) (void)) (if (not (for-all f2cbd@id? f4021@export*)) (f2fb1@syntax-violation '#f '"module exports must be identifiers" f4012@e) (void)) (values f4020@name (list->vector f4021@export*) f4022@b*))) f401e@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f401c@t))) (f2ec8@syntax-dispatch f401c@t '(_ any each-any . each-any)))) f4014@t))) (f2ec8@syntax-dispatch f4014@t '(_ each-any . each-any)))) f4012@e))) (set! f2f08@f2f03 (make-record-type-descriptor 'module-interface '#f 'f2f06 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! f2f0a@f2f05 '#f) (set! f2f0c@f2f04 (make-record-constructor-descriptor f2f08@f2f03 '#f f2f0a@f2f05)) (set! f2f0f@module-interface? (record-predicate f2f08@f2f03)) (set! f2f11@make-module-interface (record-constructor f2f0c@f2f04)) (set! f2f13@module-interface-first-mark (record-accessor f2f08@f2f03 '0)) (set! f2f15@module-interface-exp-id-vec (record-accessor f2f08@f2f03 '1)) (set! f2f17@module-interface-exp-lab-vec (record-accessor f2f08@f2f03 '2)) (set! f2f19@set-module-interface-first-mark! (record-mutator f2f08@f2f03 '0)) (set! f2f1b@set-module-interface-exp-id-vec! (record-mutator f2f08@f2f03 '1)) (set! f2f1d@set-module-interface-exp-lab-vec! (record-mutator f2f08@f2f03 '2)) (set! f2f1f@module-interface-exp-id* (lambda (f4026@iface f4027@id) ((lambda (f402b@diff-marks) (begin (set! f402b@diff-marks (lambda (f4032@ls f4033@x) (begin (if (null? f4032@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (f4036@a) (if (eq? f4036@a f4033@x) '() (cons f4036@a (f402b@diff-marks (cdr f4032@ls) f4033@x)))) (car f4032@ls))))) ((lambda (f402c@diff f402d@id-vec) (if (null? f402c@diff) f402d@id-vec (vector-map (lambda (f4030@x) (f2c87@make-stx (f2c89@stx-expr f4030@x) (append f402c@diff (f2c8b@stx-mark* f4030@x)) '() '())) f402d@id-vec))) (f402b@diff-marks (f2c8b@stx-mark* f4027@id) (f2f13@module-interface-first-mark f4026@iface)) (f2f15@module-interface-exp-id-vec f4026@iface)))) '#f))) (set! f2f21@chi-internal-module (lambda (f4038@e f4039@r f403a@mr f403b@lex* f403c@rhs* f403d@mod** f403e@kwd*) (call-with-values (lambda () (f2f02@parse-module f4038@e)) (lambda (f404c@f4047 f404d@f4049 f404e@f404b) ((lambda (f4052@e* f4053@exp-id* f4054@name) ((lambda (f4058@rib) ((lambda (f405a@e*) ((lambda () (call-with-values (lambda () (f2f23@chi-body* f405a@e* f4039@r f403a@mr f403b@lex* f403c@rhs* f403d@mod** f403e@kwd* '() f4058@rib '#f)) (lambda (f406c@f405d f406d@f405f f406e@f4061 f406f@f4063 f4070@f4065 f4071@f4067 f4072@f4069 f4073@f406b) ((lambda (f407c@_exp* f407d@kwd* f407e@mod** f407f@rhs* f4080@lex* f4081@mr f4082@r f4083@e*) ((lambda (f408c@exp-lab* f408d@mod**) (if (not f4054@name) (values f4080@lex* f407f@rhs* f4053@exp-id* f408c@exp-lab* f4082@r f4081@mr f408d@mod** f407d@kwd*) ((lambda (f4090@lab f4091@iface) (values f4080@lex* f407f@rhs* (vector f4054@name) (vector f4090@lab) (cons (cons f4090@lab (cons '$module f4091@iface)) f4082@r) (cons (cons f4090@lab (cons '$module f4091@iface)) f4081@mr) f408d@mod** f407d@kwd*)) (f2c41@gen-label 'module) (f2f11@make-module-interface (car (f2c8b@stx-mark* f4054@name)) (vector-map (lambda (f4094@x) (f2c87@make-stx (f2c89@stx-expr f4094@x) (f2c8b@stx-mark* f4094@x) '() '())) f4053@exp-id*) f408c@exp-lab*)))) (vector-map (lambda (f4096@x) (or (f2cd7@id->label (f2c87@make-stx (f2cbf@id->sym f4096@x) (f2c8b@stx-mark* f4096@x) (list f4058@rib) '())) (f2fb1@syntax-violation '#f '"cannot find module export" f4096@x))) f4053@exp-id*) (cons f4083@e* f407e@mod**))) f4073@f406b f4072@f4069 f4071@f4067 f4070@f4065 f406f@f4063 f406e@f4061 f406d@f405f f406c@f405d)))))) (map (lambda (f4098@x) (f2ca9@add-subst f4058@rib f4098@x)) (f2cbb@syntax->list f4052@e*)))) (f2c6c@make-empty-rib))) f404e@f404b f404d@f4049 f404c@f4047))))) (set! f2f23@chi-body* (lambda (f409a@e* f409b@r f409c@mr f409d@lex* f409e@rhs* f409f@mod** f40a0@kwd* f40a1@exp* f40a2@rib f40a3@top?) (if (null? f409a@e*) (values f409a@e* f409b@r f409c@mr f409d@lex* f409e@rhs* f409f@mod** f40a0@kwd* f40a1@exp*) ((lambda (f40ae@e) (call-with-values (lambda () (f2ce5@syntax-type f40ae@e f409b@r)) (lambda (f40b6@f40b1 f40b7@f40b3 f40b8@f40b5) ((lambda (f40bc@kwd f40bd@value f40be@type) ((lambda (f40c2@kwd*) ((lambda (f40c4@t) (if (memv f40c4@t '(define)) (call-with-values (lambda () (f2e4c@parse-define f40ae@e)) (lambda (f40ca@f40c7 f40cb@f40c9) ((lambda (f40ce@rhs f40cf@id) (begin (if (f2ccb@bound-id-member? f40cf@id f40c2@kwd*) (f2fb1@syntax-violation '#f '"cannot redefine keyword" f40ae@e) (void)) (call-with-values (lambda () (f2c45@gen-define-label+loc f40cf@id f40a2@rib)) (lambda (f40d6@f40d3 f40d7@f40d5) ((lambda (f40da@lex f40db@lab) (begin (f2c6e@extend-rib! f40a2@rib f40cf@id f40db@lab) (f2f23@chi-body* (cdr f409a@e*) (f2e5a@add-lexical f40db@lab f40da@lex f409b@r) f409c@mr (cons f40da@lex f409d@lex*) (cons f40ce@rhs f409e@rhs*) f409f@mod** f40c2@kwd* f40a1@exp* f40a2@rib f40a3@top?))) f40d7@f40d5 f40d6@f40d3))))) f40cb@f40c9 f40ca@f40c7))) (if (memv f40c4@t '(define-syntax)) (call-with-values (lambda () (f2e4e@parse-define-syntax f40ae@e)) (lambda (f40e2@f40df f40e3@f40e1) ((lambda (f40e6@rhs f40e7@id) (begin (if (f2ccb@bound-id-member? f40e7@id f40c2@kwd*) (f2fb1@syntax-violation '#f '"cannot redefine keyword" f40ae@e) (void)) ((lambda (f40ea@lab f40eb@expanded-rhs) (begin (f2c6e@extend-rib! f40a2@rib f40e7@id f40ea@lab) ((lambda (f40ee@b) (f2f23@chi-body* (cdr f409a@e*) (cons (cons f40ea@lab f40ee@b) f409b@r) (cons (cons f40ea@lab f40ee@b) f409c@mr) f409d@lex* f409e@rhs* f409f@mod** f40c2@kwd* f40a1@exp* f40a2@rib f40a3@top?)) (f2cfb@make-eval-transformer f40eb@expanded-rhs)))) (f2c47@gen-define-label f40e7@id f40a2@rib) (f2f25@expand-transformer f40e6@rhs f409c@mr)))) f40e3@f40e1 f40e2@f40df))) (if (memv f40c4@t '(let-syntax letrec-syntax)) ((lambda (f40f0@t) ((lambda (f40f2@ls/false) (if (and f40f2@ls/false (apply (lambda (f40f4@xlhs* f40f5@xrhs* f40f6@xbody*) (if (not (f2cc7@valid-bound-ids? f40f4@xlhs*)) (f2fb1@syntax-violation '#f '"invalid identifiers" f40ae@e) (void))) f40f2@ls/false)) (apply (lambda (f40fa@xlhs* f40fb@xrhs* f40fc@xbody*) ((lambda (f4100@xlab*) ((lambda (f4102@xrib) ((lambda (f4104@xb*) ((lambda () (f2f23@chi-body* (append (map (lambda (f4106@x) (f2ca9@add-subst f4102@xrib f4106@x)) f40fc@xbody*) (cdr f409a@e*)) (append (map cons f4100@xlab* f4104@xb*) f409b@r) (append (map cons f4100@xlab* f4104@xb*) f409c@mr) f409d@lex* f409e@rhs* f409f@mod** f40c2@kwd* f40a1@exp* f40a2@rib f40a3@top?)))) (map (lambda (f4108@x) (f2cfb@make-eval-transformer (f2f25@expand-transformer (if (eq? f40be@type 'let-syntax) f4108@x (f2ca9@add-subst f4102@xrib f4108@x)) f409c@mr))) f40fb@xrhs*))) (f2c78@make-full-rib f40fa@xlhs* f4100@xlab*))) (map f2c41@gen-label f40fa@xlhs*))) f40f2@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f40f0@t))) (f2ec8@syntax-dispatch f40f0@t '(_ #(each (any any)) . each-any)))) f40ae@e) (if (memv f40c4@t '(begin)) ((lambda (f410a@t) ((lambda (f410c@ls/false) (if f410c@ls/false (apply (lambda (f410e@x*) (f2f23@chi-body* (append f410e@x* (cdr f409a@e*)) f409b@r f409c@mr f409d@lex* f409e@rhs* f409f@mod** f40c2@kwd* f40a1@exp* f40a2@rib f40a3@top?)) f410c@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f410a@t))) (f2ec8@syntax-dispatch f410a@t '(_ . each-any)))) f40ae@e) (if (memv f40c4@t '(global-macro global-macro!)) (f2f23@chi-body* (cons (f2ca9@add-subst f40a2@rib (f2ee4@chi-global-macro f40bd@value f40ae@e)) (cdr f409a@e*)) f409b@r f409c@mr f409d@lex* f409e@rhs* f409f@mod** f40c2@kwd* f40a1@exp* f40a2@rib f40a3@top?) (if (memv f40c4@t '(local-macro local-macro!)) (f2f23@chi-body* (cons (f2ca9@add-subst f40a2@rib (f2ee2@chi-local-macro f40bd@value f40ae@e)) (cdr f409a@e*)) f409b@r f409c@mr f409d@lex* f409e@rhs* f409f@mod** f40c2@kwd* f40a1@exp* f40a2@rib f40a3@top?) (if (memv f40c4@t '(macro macro!)) (f2f23@chi-body* (cons (f2ca9@add-subst f40a2@rib (f2ee0@chi-macro f40bd@value f40ae@e)) (cdr f409a@e*)) f409b@r f409c@mr f409d@lex* f409e@rhs* f409f@mod** f40c2@kwd* f40a1@exp* f40a2@rib f40a3@top?) (if (memv f40c4@t '(module)) (call-with-values (lambda () (f2f21@chi-internal-module f40ae@e f409b@r f409c@mr f409d@lex* f409e@rhs* f409f@mod** f40c2@kwd*)) (lambda (f4120@f4111 f4121@f4113 f4122@f4115 f4123@f4117 f4124@f4119 f4125@f411b f4126@f411d f4127@f411f) ((lambda (f4130@kwd* f4131@mod** f4132@mr f4133@r f4134@m-exp-lab* f4135@m-exp-id* f4136@rhs* f4137@lex*) (begin (vector-for-each (lambda (f4140@id f4141@lab) (f2c6e@extend-rib! f40a2@rib f4140@id f4141@lab)) f4135@m-exp-id* f4134@m-exp-lab*) (f2f23@chi-body* (cdr f409a@e*) f4133@r f4132@mr f4137@lex* f4136@rhs* f4131@mod** f4130@kwd* f40a1@exp* f40a2@rib f40a3@top?))) f4127@f411f f4126@f411d f4125@f411b f4124@f4119 f4123@f4117 f4122@f4115 f4121@f4113 f4120@f4111))) (if (memv f40c4@t '(library)) (begin (f2f93@library-expander (f2cd3@stx->datum f40ae@e)) (f2f23@chi-body* (cdr f409a@e*) f409b@r f409c@mr f409d@lex* f409e@rhs* f409f@mod** f40c2@kwd* f40a1@exp* f40a2@rib f40a3@top?)) (if (memv f40c4@t '(export)) ((lambda (f4144@t) ((lambda (f4146@ls/false) (if f4146@ls/false (apply (lambda (f4148@exp-decl*) (f2f23@chi-body* (cdr f409a@e*) f409b@r f409c@mr f409d@lex* f409e@rhs* f409f@mod** f40c2@kwd* (append f4148@exp-decl* f40a1@exp*) f40a2@rib f40a3@top?)) f4146@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f4144@t))) (f2ec8@syntax-dispatch f4144@t '(_ . each-any)))) f40ae@e) (if (memv f40c4@t '(import)) ((lambda () ((lambda (f414b@module-import? f414d@module-import f414f@library-import) (begin (set! f414b@module-import? (lambda (f419e@e) ((lambda (f41a0@t) ((lambda (f41a2@ls/false) (if (and f41a2@ls/false (apply (lambda (f41a4@id) (f2cbd@id? f41a4@id)) f41a2@ls/false)) (apply (lambda (f41a6@id) '#t) f41a2@ls/false) ((lambda (f41a8@t) ((lambda (f41aa@ls/false) (if f41aa@ls/false (apply (lambda (f41ac@imp*) '#f) f41aa@ls/false) ((lambda (f41ae@t) ((lambda (f41b0@ls/false) (if f41b0@ls/false (apply (lambda () (f2fb1@syntax-violation '#f '"malformed import form" f419e@e)) f41b0@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f41ae@t))) (f2ec8@syntax-dispatch f41ae@t '_))) f41a8@t))) (f2ec8@syntax-dispatch f41a8@t '(_ . each-any)))) f41a0@t))) (f2ec8@syntax-dispatch f41a0@t '(_ any)))) f419e@e))) (set! f414d@module-import (lambda (f417c@e f417d@r) ((lambda (f4180@t) ((lambda (f4182@ls/false) (if (and f4182@ls/false (apply (lambda (f4184@id) (f2cbd@id? f4184@id)) f4182@ls/false)) (apply (lambda (f4186@id) (call-with-values (lambda () (f2ce5@syntax-type f4186@id f417d@r)) (lambda (f418e@f4189 f418f@f418b f4190@f418d) ((lambda (f4194@kwd f4195@value f4196@type) ((lambda (f419a@t) (if (memv f419a@t '($module)) ((lambda (f419c@iface) (values (f2f1f@module-interface-exp-id* f419c@iface f4186@id) (f2f17@module-interface-exp-lab-vec f419c@iface))) f4195@value) (f2fb1@syntax-violation '#f '"invalid import" f417c@e))) f4196@type)) f4190@f418d f418f@f418b f418e@f4189)))) f4182@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f4180@t))) (f2ec8@syntax-dispatch f4180@t '(_ any)))) f417c@e))) (set! f414f@library-import (lambda (f4160@e) ((lambda (f4162@t) ((lambda (f4164@ls/false) (if f4164@ls/false (apply (lambda (f4166@ctxt f4167@imp*) (call-with-values (lambda () (f2f2d@parse-import-spec* (f2fb7@syntax->datum f4167@imp*))) (lambda (f416e@f416b f416f@f416d) ((lambda (f4172@subst-labels f4173@subst-names) (values (vector-map (lambda (f4176@name) (f2c9b@datum->stx f4166@ctxt f4176@name)) f4173@subst-names) f4172@subst-labels)) f416f@f416d f416e@f416b)))) f4164@ls/false) ((lambda (f4178@t) ((lambda (f417a@ls/false) (if f417a@ls/false (apply (lambda () (f2fb1@syntax-violation '#f '"invalid import form" f4160@e)) f417a@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f4178@t))) (f2ec8@syntax-dispatch f4178@t '_))) f4162@t))) (f2ec8@syntax-dispatch f4162@t '(any . each-any)))) f4160@e))) (begin (call-with-values (lambda () (if (f414b@module-import? f40ae@e) (f414d@module-import f40ae@e f409b@r) (f414f@library-import f40ae@e))) (lambda (f4154@f4151 f4155@f4153) ((lambda (f4158@lab* f4159@id*) (vector-for-each (lambda (f415c@id f415d@lab) (f2c6e@extend-rib! f40a2@rib f415c@id f415d@lab)) f4159@id* f4158@lab*)) f4155@f4153 f4154@f4151))) (f2f23@chi-body* (cdr f409a@e*) f409b@r f409c@mr f409d@lex* f409e@rhs* f409f@mod** f40c2@kwd* f40a1@exp* f40a2@rib f40a3@top?)))) '#f '#f '#f))) (if f40a3@top? (f2f23@chi-body* (cdr f409a@e*) f409b@r f409c@mr (cons (f2c3d@gen-lexical 'dummy) f409d@lex*) (cons (cons 'top-expr f40ae@e) f409e@rhs*) f409f@mod** f40c2@kwd* f40a1@exp* f40a2@rib f40a3@top?) (values f409a@e* f409b@r f409c@mr f409d@lex* f409e@rhs* f409f@mod** f40c2@kwd* f40a1@exp*)))))))))))))) f40be@type)) (if (f2cbd@id? f40bc@kwd) (cons f40bc@kwd f40a0@kwd*) f40a0@kwd*))) f40b8@f40b5 f40b7@f40b3 f40b6@f40b1)))) (car f409a@e*))))) (set! f2f25@expand-transformer (lambda (f41b2@expr f41b3@r) ((lambda (f41b6@rtc) ((lambda (f41b8@expanded-rhs) (begin (for-each ((lambda (f41ba@mark-visit) (lambda (f41bc@x) (begin (f2ae1@f2982@invoke-library f41bc@x) (f41ba@mark-visit f41bc@x)))) (f2f35@vis-collector)) (f41b6@rtc)) f41b8@expanded-rhs)) ((lambda (f41c6@f41bf f41c7@f41c1 f41c8@f41c3 f41c9@f41c5) ((lambda (f41ce@swap) (dynamic-wind f41ce@swap (lambda () (f2eea@chi-expr f41b2@expr f41b3@r f41b3@r)) f41ce@swap)) (lambda () (begin ((lambda (f41d0@t) (begin (f41c6@f41bf f41c8@f41c3) (set! f41c8@f41c3 f41d0@t))) (f41c6@f41bf)) ((lambda (f41d2@t) (begin (f41c7@f41c1 f41c9@f41c5) (set! f41c9@f41c5 f41d2@t))) (f41c7@f41c1)))))) f2f33@inv-collector f2f35@vis-collector f41b6@rtc (lambda (f41d4@x) (values))))) (f2f31@make-collector)))) (set! f2f27@parse-exports (lambda (f41d6@exp*) ((letrec ((f41d8@f (lambda (f41da@exp* f41db@int* f41dc@ext*) (if (null? f41da@exp*) (begin (if (not (f2cc7@valid-bound-ids? f41dc@ext*)) (f2fb1@syntax-violation 'export '"invalid exports" (f2efe@find-dups f41dc@ext*)) (void)) (values (map f2fb7@syntax->datum f41dc@ext*) f41db@int*)) ((lambda (f41e0@t) ((lambda (f41e2@ls/false) (if f41e2@ls/false (apply (lambda (f41e4@rename f41e5@i* f41e6@e*) (begin (if (not (and (eq? (f2fb7@syntax->datum f41e4@rename) 'rename) (for-all f2cbd@id? f41e5@i*) (for-all f2cbd@id? f41e6@e*))) (f2fb1@syntax-violation 'export '"invalid export specifier" (car f41da@exp*)) (void)) (f41d8@f (cdr f41da@exp*) (append f41e5@i* f41db@int*) (append f41e6@e* f41dc@ext*)))) f41e2@ls/false) ((lambda (f41ea@t) ((lambda (f41ec@ls/false) (if f41ec@ls/false (apply (lambda (f41ee@ie) (begin (if (not (f2cbd@id? f41ee@ie)) (f2fb1@syntax-violation 'export '"invalid export" f41ee@ie) (void)) (f41d8@f (cdr f41da@exp*) (cons f41ee@ie f41db@int*) (cons f41ee@ie f41dc@ext*)))) f41ec@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f41ea@t))) (f2ec8@syntax-dispatch f41ea@t 'any))) f41e0@t))) (f2ec8@syntax-dispatch f41e0@t '(any . #(each (any any)))))) (car f41da@exp*)))))) f41d8@f) f41d6@exp* '() '()))) (set! f2f29@parse-library-name (lambda (f41f0@spec) ((lambda (f41f3@parse) (begin (set! f41f3@parse (lambda (f4200@x) ((lambda (f4202@t) ((lambda (f4204@ls/false) (if (and f4204@ls/false (apply (lambda (f4206@v*) (for-all (lambda (f4208@x) ((lambda (f420a@x) (and (integer? f420a@x) (exact? f420a@x))) (f2fb7@syntax->datum f4208@x))) f4206@v*)) f4204@ls/false)) (apply (lambda (f420c@v*) (values '() (map f2fb7@syntax->datum f420c@v*))) f4204@ls/false) ((lambda (f420e@t) ((lambda (f4210@ls/false) (if (and f4210@ls/false (apply (lambda (f4212@x f4213@rest) (symbol? (f2fb7@syntax->datum f4212@x))) f4210@ls/false)) (apply (lambda (f4216@x f4217@rest) (call-with-values (lambda () (f41f3@parse f4217@rest)) (lambda (f421e@f421b f421f@f421d) ((lambda (f4222@v* f4223@x*) (values (cons (f2fb7@syntax->datum f4216@x) f4223@x*) f4222@v*)) f421f@f421d f421e@f421b)))) f4210@ls/false) ((lambda (f4226@t) ((lambda (f4228@ls/false) (if f4228@ls/false (apply (lambda () (values '() '())) f4228@ls/false) ((lambda (f422a@t) ((lambda (f422c@ls/false) (if f422c@ls/false (apply (lambda () (f2fb1@syntax-violation '#f '"invalid library name" f41f0@spec)) f422c@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f422a@t))) (f2ec8@syntax-dispatch f422a@t '_))) f4226@t))) (f2ec8@syntax-dispatch f4226@t '()))) f420e@t))) (f2ec8@syntax-dispatch f420e@t '(any . any)))) f4202@t))) (f2ec8@syntax-dispatch f4202@t '(each-any)))) f4200@x))) (call-with-values (lambda () (f41f3@parse f41f0@spec)) (lambda (f41f8@f41f5 f41f9@f41f7) ((lambda (f41fc@ver* f41fd@name*) (begin (if (null? f41fd@name*) (f2fb1@syntax-violation '#f '"empty library name" f41f0@spec) (void)) (values f41fd@name* f41fc@ver*))) f41f9@f41f7 f41f8@f41f5))))) '#f))) (set! f2f2b@parse-library (lambda (f422e@e) ((lambda (f4230@t) ((lambda (f4232@ls/false) (if (and f4232@ls/false (apply (lambda (f4234@library f4235@name* f4236@export f4237@exp* f4238@import f4239@imp* f423a@b*) (and (eq? (f2fb7@syntax->datum f4236@export) 'export) (eq? (f2fb7@syntax->datum f4238@import) 'import) (eq? (f2fb7@syntax->datum f4234@library) 'library))) f4232@ls/false)) (apply (lambda (f4242@library f4243@name* f4244@export f4245@exp* f4246@import f4247@imp* f4248@b*) (values f4243@name* f4245@exp* f4247@imp* f4248@b*)) f4232@ls/false) ((lambda (f4250@t) ((lambda (f4252@ls/false) (if f4252@ls/false (apply (lambda () (f2fb1@syntax-violation '#f '"malformed library" f422e@e)) f4252@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f4250@t))) (f2ec8@syntax-dispatch f4250@t '_))) f4230@t))) (f2ec8@syntax-dispatch f4230@t '(any each-any (any . each-any) (any . each-any) . each-any)))) f422e@e))) (set! f2f2d@parse-import-spec* ((lambda () ((lambda (f4255@idsyn? f4257@dup-error f4259@merge-substs f425b@exclude* f425d@find* f425f@rem* f4261@remove-dups f4263@parse-library-name f4265@import-library f4267@get-import f4269@add-imports!) (begin (set! f4255@idsyn? (lambda (f445e@x) (symbol? (f2fb7@syntax->datum f445e@x)))) (set! f4257@dup-error (lambda (f445c@name) (f2fb1@syntax-violation 'import '"two imports with different bindings" f445c@name))) (set! f4259@merge-substs (lambda (f444a@s f444b@subst) ((lambda (f444f@insert-to-subst) (begin (set! f444f@insert-to-subst (lambda (f4450@a f4451@subst) ((lambda (f4454@name f4455@label) ((lambda (f4458@t) (if f4458@t ((lambda (f445a@x) (if (eq? (cdr f445a@x) f4455@label) f4451@subst (f4257@dup-error f4454@name))) f4458@t) (cons f4450@a f4451@subst))) (assq f4454@name f4451@subst))) (car f4450@a) (cdr f4450@a)))) (if (null? f444a@s) f444b@subst (f444f@insert-to-subst (car f444a@s) (f4259@merge-substs (cdr f444a@s) f444b@subst))))) '#f))) (set! f425b@exclude* (lambda (f441a@sym* f441b@subst) ((lambda (f441f@exclude) (begin (set! f441f@exclude (lambda (f4438@sym f4439@subst) (if (null? f4439@subst) (f2fb1@syntax-violation 'import '"cannot rename unbound identifier" f4438@sym) (if (eq? f4438@sym (caar f4439@subst)) (values (cdar f4439@subst) (cdr f4439@subst)) ((lambda (f443c@a) (call-with-values (lambda () (f441f@exclude f4438@sym (cdr f4439@subst))) (lambda (f4442@f443f f4443@f4441) ((lambda (f4446@subst f4447@old) (values f4447@old (cons f443c@a f4446@subst))) f4443@f4441 f4442@f443f)))) (car f4439@subst)))))) (if (null? f441a@sym*) (values '() f441b@subst) (call-with-values (lambda () (f441f@exclude (car f441a@sym*) f441b@subst)) (lambda (f4424@f4421 f4425@f4423) ((lambda (f4428@subst f4429@old) (call-with-values (lambda () (f425b@exclude* (cdr f441a@sym*) f4428@subst)) (lambda (f4430@f442d f4431@f442f) ((lambda (f4434@subst f4435@old*) (values (cons f4429@old f4435@old*) f4434@subst)) f4431@f442f f4430@f442d)))) f4425@f4423 f4424@f4421)))))) '#f))) (set! f425d@find* (lambda (f4412@sym* f4413@subst) (map (lambda (f4416@x) ((lambda (f4418@t) (if f4418@t (cdr f4418@t) (f2fb1@syntax-violation 'import '"cannot find identifier" f4416@x))) (assq f4416@x f4413@subst))) f4412@sym*))) (set! f425f@rem* (lambda (f440a@sym* f440b@subst) ((letrec ((f440e@f (lambda (f4410@subst) (if (null? f4410@subst) '() (if (memq (caar f4410@subst) f440a@sym*) (f440e@f (cdr f4410@subst)) (cons (car f4410@subst) (f440e@f (cdr f4410@subst)))))))) f440e@f) f440b@subst))) (set! f4261@remove-dups (lambda (f4408@ls) (if (null? f4408@ls) '() (if (memq (car f4408@ls) (cdr f4408@ls)) (f4261@remove-dups (cdr f4408@ls)) (cons (car f4408@ls) (f4261@remove-dups (cdr f4408@ls))))))) (set! f4263@parse-library-name (lambda (f4320@spec) ((lambda (f4323@subversion? f4325@subversion-pred f4327@version-pred) (begin (set! f4323@subversion? (lambda (f4404@x) ((lambda (f4406@x) (and (integer? f4406@x) (exact? f4406@x) (>= f4406@x '0))) (f2fb7@syntax->datum f4404@x)))) (set! f4325@subversion-pred (lambda (f43a4@x*) ((lambda (f43a6@t) ((lambda (f43a8@ls/false) (if (and f43a8@ls/false (apply (lambda (f43aa@n) (f4323@subversion? f43aa@n)) f43a8@ls/false)) (apply (lambda (f43ac@n) (lambda (f43ae@x) (= f43ae@x (f2fb7@syntax->datum f43ac@n)))) f43a8@ls/false) ((lambda (f43b0@t) ((lambda (f43b2@ls/false) (if (and f43b2@ls/false (apply (lambda (f43b4@p? f43b5@sub*) (eq? (f2fb7@syntax->datum f43b4@p?) 'and)) f43b2@ls/false)) (apply (lambda (f43b8@p? f43b9@sub*) ((lambda (f43bc@p*) (lambda (f43be@x) (for-all (lambda (f43c0@p) (f43c0@p f43be@x)) f43bc@p*))) (map f4325@subversion-pred f43b9@sub*))) f43b2@ls/false) ((lambda (f43c2@t) ((lambda (f43c4@ls/false) (if (and f43c4@ls/false (apply (lambda (f43c6@p? f43c7@sub*) (eq? (f2fb7@syntax->datum f43c6@p?) 'or)) f43c4@ls/false)) (apply (lambda (f43ca@p? f43cb@sub*) ((lambda (f43ce@p*) (lambda (f43d0@x) (exists (lambda (f43d2@p) (f43d2@p f43d0@x)) f43ce@p*))) (map f4325@subversion-pred f43cb@sub*))) f43c4@ls/false) ((lambda (f43d4@t) ((lambda (f43d6@ls/false) (if (and f43d6@ls/false (apply (lambda (f43d8@p? f43d9@sub) (eq? (f2fb7@syntax->datum f43d8@p?) 'not)) f43d6@ls/false)) (apply (lambda (f43dc@p? f43dd@sub) ((lambda (f43e0@p) (lambda (f43e2@x) (not (f43e0@p f43e2@x)))) (f4325@subversion-pred f43dd@sub))) f43d6@ls/false) ((lambda (f43e4@t) ((lambda (f43e6@ls/false) (if (and f43e6@ls/false (apply (lambda (f43e8@p? f43e9@n) (and (eq? (f2fb7@syntax->datum f43e8@p?) '<=) (f4323@subversion? f43e9@n))) f43e6@ls/false)) (apply (lambda (f43ec@p? f43ed@n) (lambda (f43f0@x) (<= f43f0@x (f2fb7@syntax->datum f43ed@n)))) f43e6@ls/false) ((lambda (f43f2@t) ((lambda (f43f4@ls/false) (if (and f43f4@ls/false (apply (lambda (f43f6@p? f43f7@n) (and (eq? (f2fb7@syntax->datum f43f6@p?) '>=) (f4323@subversion? f43f7@n))) f43f4@ls/false)) (apply (lambda (f43fa@p? f43fb@n) (lambda (f43fe@x) (>= f43fe@x (f2fb7@syntax->datum f43fb@n)))) f43f4@ls/false) ((lambda (f4400@t) ((lambda (f4402@ls/false) (if f4402@ls/false (apply (lambda () (f2fb1@syntax-violation 'import '"invalid sub-version spec" f4320@spec f43a4@x*)) f4402@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f4400@t))) (f2ec8@syntax-dispatch f4400@t '_))) f43f2@t))) (f2ec8@syntax-dispatch f43f2@t '(any any)))) f43e4@t))) (f2ec8@syntax-dispatch f43e4@t '(any any)))) f43d4@t))) (f2ec8@syntax-dispatch f43d4@t '(any any)))) f43c2@t))) (f2ec8@syntax-dispatch f43c2@t '(any . each-any)))) f43b0@t))) (f2ec8@syntax-dispatch f43b0@t '(any . each-any)))) f43a6@t))) (f2ec8@syntax-dispatch f43a6@t 'any))) f43a4@x*))) (set! f4327@version-pred (lambda (f4354@x*) ((lambda (f4356@t) ((lambda (f4358@ls/false) (if f4358@ls/false (apply (lambda () (lambda (f435a@x) '#t)) f4358@ls/false) ((lambda (f435c@t) ((lambda (f435e@ls/false) (if (and f435e@ls/false (apply (lambda (f4360@c f4361@ver*) (eq? (f2fb7@syntax->datum f4360@c) 'and)) f435e@ls/false)) (apply (lambda (f4364@c f4365@ver*) ((lambda (f4368@p*) (lambda (f436a@x) (for-all (lambda (f436c@p) (f436c@p f436a@x)) f4368@p*))) (map f4327@version-pred f4365@ver*))) f435e@ls/false) ((lambda (f436e@t) ((lambda (f4370@ls/false) (if (and f4370@ls/false (apply (lambda (f4372@c f4373@ver*) (eq? (f2fb7@syntax->datum f4372@c) 'or)) f4370@ls/false)) (apply (lambda (f4376@c f4377@ver*) ((lambda (f437a@p*) (lambda (f437c@x) (exists (lambda (f437e@p) (f437e@p f437c@x)) f437a@p*))) (map f4327@version-pred f4377@ver*))) f4370@ls/false) ((lambda (f4380@t) ((lambda (f4382@ls/false) (if (and f4382@ls/false (apply (lambda (f4384@c f4385@ver) (eq? (f2fb7@syntax->datum f4384@c) 'not)) f4382@ls/false)) (apply (lambda (f4388@c f4389@ver) ((lambda (f438c@p) (lambda (f438e@x) (not (f438c@p f438e@x)))) (f4327@version-pred f4389@ver))) f4382@ls/false) ((lambda (f4390@t) ((lambda (f4392@ls/false) (if f4392@ls/false (apply (lambda (f4394@sub*) ((lambda (f4396@p*) (lambda (f4398@x) ((letrec ((f439a@f (lambda (f439c@p* f439d@x) (if (null? f439c@p*) '#t (if (null? f439d@x) '#f (and ((car f439c@p*) (car f439d@x)) (f439a@f (cdr f439c@p*) (cdr f439d@x)))))))) f439a@f) f4396@p* f4398@x))) (map f4325@subversion-pred f4394@sub*))) f4392@ls/false) ((lambda (f43a0@t) ((lambda (f43a2@ls/false) (if f43a2@ls/false (apply (lambda () (f2fb1@syntax-violation 'import '"invalid version spec" f4320@spec f4354@x*)) f43a2@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f43a0@t))) (f2ec8@syntax-dispatch f43a0@t '_))) f4390@t))) (f2ec8@syntax-dispatch f4390@t 'each-any))) f4380@t))) (f2ec8@syntax-dispatch f4380@t '(any any)))) f436e@t))) (f2ec8@syntax-dispatch f436e@t '(any . each-any)))) f435c@t))) (f2ec8@syntax-dispatch f435c@t '(any . each-any)))) f4356@t))) (f2ec8@syntax-dispatch f4356@t '()))) f4354@x*))) ((letrec ((f4328@f (lambda (f432a@x) ((lambda (f432c@t) ((lambda (f432e@ls/false) (if f432e@ls/false (apply (lambda (f4330@version-spec*) (values '() (f4327@version-pred f4330@version-spec*))) f432e@ls/false) ((lambda (f4332@t) ((lambda (f4334@ls/false) (if (and f4334@ls/false (apply (lambda (f4336@x f4337@x*) (f4255@idsyn? f4336@x)) f4334@ls/false)) (apply (lambda (f433a@x f433b@x*) (call-with-values (lambda () (f4328@f f433b@x*)) (lambda (f4342@f433f f4343@f4341) ((lambda (f4346@pred f4347@name) (values (cons (f2fb7@syntax->datum f433a@x) f4347@name) f4346@pred)) f4343@f4341 f4342@f433f)))) f4334@ls/false) ((lambda (f434a@t) ((lambda (f434c@ls/false) (if f434c@ls/false (apply (lambda () (values '() (lambda (f434e@x) '#t))) f434c@ls/false) ((lambda (f4350@t) ((lambda (f4352@ls/false) (if f4352@ls/false (apply (lambda () (f2fb1@syntax-violation '#f '"invalid import spec" f4320@spec)) f4352@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f4350@t))) (f2ec8@syntax-dispatch f4350@t '_))) f434a@t))) (f2ec8@syntax-dispatch f434a@t '()))) f4332@t))) (f2ec8@syntax-dispatch f4332@t '(any . any)))) f432c@t))) (f2ec8@syntax-dispatch f432c@t '(each-any)))) f432a@x)))) f4328@f) f4320@spec))) '#f '#f '#f))) (set! f4265@import-library (lambda (f4310@spec*) (call-with-values (lambda () (f4263@parse-library-name f4310@spec*)) (lambda (f4316@f4313 f4317@f4315) ((lambda (f431a@pred f431b@name) (begin (if (null? f431b@name) (f2fb1@syntax-violation 'import '"empty library name" f4310@spec*) (void)) ((lambda (f431e@lib) (begin (if (not f431e@lib) (f2fb1@syntax-violation 'import '"cannot find library with required name" f431b@name) (void)) (if (not (f431a@pred (f2ab2@f2924@library-version f431e@lib))) (f2fb1@syntax-violation 'import '"library does not satisfy version specification" f4310@spec* f431e@lib) (void)) ((f2f37@imp-collector) f431e@lib) (f2ab6@f292c@library-subst f431e@lib))) (f2ada@f2974@find-library-by-name f431b@name)))) f4317@f4315 f4316@f4313))))) (set! f4267@get-import (lambda (f4282@spec) ((lambda (f4284@t) ((lambda (f4286@ls/false) (if (and f4286@ls/false (apply (lambda (f4288@x f4289@x*) (not (memq (f2fb7@syntax->datum f4288@x) '(for rename except only prefix library)))) f4286@ls/false)) (apply (lambda (f428c@x f428d@x*) (f4265@import-library (cons f428c@x f428d@x*))) f4286@ls/false) ((lambda (f4290@t) ((lambda (f4292@ls/false) (if (and f4292@ls/false (apply (lambda (f4294@rename f4295@isp f4296@old* f4297@new*) (and (eq? (f2fb7@syntax->datum f4294@rename) 'rename) (for-all f4255@idsyn? f4296@old*) (for-all f4255@idsyn? f4297@new*))) f4292@ls/false)) (apply (lambda (f429c@rename f429d@isp f429e@old* f429f@new*) ((lambda (f42a4@subst f42a5@old* f42a6@new*) ((lambda (f42aa@old-label*) ((lambda (f42ac@subst) (f4259@merge-substs (map cons f42a6@new* f42aa@old-label*) f42ac@subst)) (f425f@rem* f42a5@old* f42a4@subst))) (f425d@find* f42a5@old* f42a4@subst))) (f4267@get-import f429d@isp) (map f2fb7@syntax->datum f429e@old*) (map f2fb7@syntax->datum f429f@new*))) f4292@ls/false) ((lambda (f42ae@t) ((lambda (f42b0@ls/false) (if (and f42b0@ls/false (apply (lambda (f42b2@except f42b3@isp f42b4@sym*) (and (eq? (f2fb7@syntax->datum f42b2@except) 'except) (for-all f4255@idsyn? f42b4@sym*))) f42b0@ls/false)) (apply (lambda (f42b8@except f42b9@isp f42ba@sym*) ((lambda (f42be@subst) (f425f@rem* (map f2fb7@syntax->datum f42ba@sym*) f42be@subst)) (f4267@get-import f42b9@isp))) f42b0@ls/false) ((lambda (f42c0@t) ((lambda (f42c2@ls/false) (if (and f42c2@ls/false (apply (lambda (f42c4@only f42c5@isp f42c6@sym*) (and (eq? (f2fb7@syntax->datum f42c4@only) 'only) (for-all f4255@idsyn? f42c6@sym*))) f42c2@ls/false)) (apply (lambda (f42ca@only f42cb@isp f42cc@sym*) ((lambda (f42d0@subst f42d1@sym*) ((lambda (f42d4@sym*) ((lambda (f42d6@lab*) (map cons f42d4@sym* f42d6@lab*)) (f425d@find* f42d4@sym* f42d0@subst))) (f4261@remove-dups f42d1@sym*))) (f4267@get-import f42cb@isp) (map f2fb7@syntax->datum f42cc@sym*))) f42c2@ls/false) ((lambda (f42d8@t) ((lambda (f42da@ls/false) (if (and f42da@ls/false (apply (lambda (f42dc@prefix f42dd@isp f42de@p) (and (eq? (f2fb7@syntax->datum f42dc@prefix) 'prefix) (f4255@idsyn? f42de@p))) f42da@ls/false)) (apply (lambda (f42e2@prefix f42e3@isp f42e4@p) ((lambda (f42e8@subst f42e9@prefix) (map (lambda (f42ec@x) (cons (string->symbol (string-append f42e9@prefix (symbol->string (car f42ec@x)))) (cdr f42ec@x))) f42e8@subst)) (f4267@get-import f42e3@isp) (symbol->string (f2fb7@syntax->datum f42e4@p)))) f42da@ls/false) ((lambda (f42ee@t) ((lambda (f42f0@ls/false) (if (and f42f0@ls/false (apply (lambda (f42f2@library f42f3@spec*) (eq? (f2fb7@syntax->datum f42f2@library) 'library)) f42f0@ls/false)) (apply (lambda (f42f6@library f42f7@spec*) (f4265@import-library f42f7@spec*)) f42f0@ls/false) ((lambda (f42fa@t) ((lambda (f42fc@ls/false) (if (and f42fc@ls/false (apply (lambda (f42fe@for f42ff@isp f4300@rest) (eq? (f2fb7@syntax->datum f42fe@for) 'for)) f42fc@ls/false)) (apply (lambda (f4304@for f4305@isp f4306@rest) (f4267@get-import f4305@isp)) f42fc@ls/false) ((lambda (f430a@t) ((lambda (f430c@ls/false) (if f430c@ls/false (apply (lambda (f430e@spec) (f2fb1@syntax-violation 'import '"invalid import spec" f430e@spec)) f430c@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f430a@t))) (f2ec8@syntax-dispatch f430a@t 'any))) f42fa@t))) (f2ec8@syntax-dispatch f42fa@t '(any any . any)))) f42ee@t))) (f2ec8@syntax-dispatch f42ee@t '(any each-any)))) f42d8@t))) (f2ec8@syntax-dispatch f42d8@t '(any any any)))) f42c0@t))) (f2ec8@syntax-dispatch f42c0@t '(any any . each-any)))) f42ae@t))) (f2ec8@syntax-dispatch f42ae@t '(any any . each-any)))) f4290@t))) (f2ec8@syntax-dispatch f4290@t '(any any . #(each (any any)))))) f4284@t))) (f2ec8@syntax-dispatch f4284@t '(any . each-any)))) f4282@spec))) (set! f4269@add-imports! (lambda (f4272@imp f4273@h) ((lambda (f4276@subst) (for-each (lambda (f4278@x) ((lambda (f427a@name f427b@label) ((lambda (f427e@t) (if f427e@t ((lambda (f4280@l) (if (not (eq? f4280@l f427b@label)) (f4257@dup-error f427a@name) (void))) f427e@t) (hashtable-set! f4273@h f427a@name f427b@label))) (hashtable-ref f4273@h f427a@name '#f))) (car f4278@x) (cdr f4278@x))) f4276@subst)) (f4267@get-import f4272@imp)))) (lambda (f426a@imp*) ((letrec ((f426c@f (lambda (f426e@imp* f426f@h) (if (null? f426e@imp*) (hashtable-entries f426f@h) (begin (f4269@add-imports! (car f426e@imp*) f426f@h) (f426c@f (cdr f426e@imp*) f426f@h)))))) f426c@f) f426a@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! f2f2f@make-top-rib (lambda (f4460@names f4461@labels) ((lambda (f4464@rib) (begin (vector-for-each (lambda (f4466@name f4467@label) (begin (if (not (symbol? f4466@name)) (error 'make-top-rib '"BUG: not a symbol" f4466@name) (void)) (f2c70@extend-rib/nc! f4464@rib (f2c87@make-stx f4466@name f2c39@top-mark* '() '()) f4467@label))) f4460@names f4461@labels) f4464@rib)) (f2c6c@make-empty-rib)))) (set! f2f31@make-collector (lambda () ((lambda (f446a@ls) (lambda f446e ((lambda (f446f) (if (= f446f '0) (apply (lambda () f446a@ls) f446e) (if (= f446f '1) (apply (lambda (f446c@x) (set! f446a@ls (f2c32@set-cons f446c@x f446a@ls))) f446e) (error 'apply '"invalid arg count")))) (length f446e)))) '()))) (set! f2f33@inv-collector (f2867@f2791@make-parameter (lambda f4470@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (f4472@x) (begin (if (not (procedure? f4472@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" f4472@x) (void)) f4472@x)))) (set! f2f35@vis-collector (f2867@f2791@make-parameter (lambda f4474@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (f4476@x) (begin (if (not (procedure? f4476@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" f4476@x) (void)) f4476@x)))) (set! f2f37@imp-collector (f2867@f2791@make-parameter (lambda f4478@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (f447a@x) (begin (if (not (procedure? f447a@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" f447a@x) (void)) f447a@x)))) (set! f2f39@chi-library-internal (lambda (f447c@e* f447d@rib f447e@top?) (call-with-values (lambda () (f2f23@chi-body* f447c@e* '() '() '() '() '() '() '() f447d@rib f447e@top?)) (lambda (f4492@f4483 f4493@f4485 f4494@f4487 f4495@f4489 f4496@f448b f4497@f448d f4498@f448f f4499@f4491) ((lambda (f44a2@exp* f44a3@_kwd* f44a4@mod** f44a5@rhs* f44a6@lex* f44a7@mr f44a8@r f44a9@e*) (values (append (apply append (reverse f44a4@mod**)) f44a9@e*) f44a8@r f44a7@mr (reverse f44a6@lex*) (reverse f44a5@rhs*) f44a2@exp*)) f4499@f4491 f4498@f448f f4497@f448d f4496@f448b f4495@f4489 f4494@f4487 f4493@f4485 f4492@f4483))))) (set! f2f3b@chi-interaction-expr (lambda (f44b2@e f44b3@rib f44b4@r) (call-with-values (lambda () (f2f23@chi-body* (list f44b2@e) f44b4@r f44b4@r '() '() '() '() '() f44b3@rib '#t)) (lambda (f44c8@f44b9 f44c9@f44bb f44ca@f44bd f44cb@f44bf f44cc@f44c1 f44cd@f44c3 f44ce@f44c5 f44cf@f44c7) ((lambda (f44d8@_exp* f44d9@_kwd* f44da@mod** f44db@rhs* f44dc@lex* f44dd@mr f44de@r f44df@e*) ((lambda (f44e8@e*) ((lambda (f44ea@e) (values f44ea@e f44de@r)) (if (null? f44e8@e*) (f2c1d@f2b8d@build-void) (if (null? (cdr f44e8@e*)) (car f44e8@e*) (f2c1c@f2b8b@build-sequence '#f f44e8@e*))))) (f2ef8@expand-interaction-rhs*/init* (reverse f44dc@lex*) (reverse f44db@rhs*) (append (apply append (reverse f44da@mod**)) f44df@e*) f44de@r f44dd@mr))) f44cf@f44c7 f44ce@f44c5 f44cd@f44c3 f44cc@f44c1 f44cb@f44bf f44ca@f44bd f44c9@f44bb f44c8@f44b9))))) (set! f2f3d@library-body-expander (lambda (f44ec@name f44ed@main-exp* f44ee@imp* f44ef@b* f44f0@top?) ((lambda (f44f7@itc) (begin (set! f44f7@itc (f2f31@make-collector)) ((lambda (f4500@f44f9 f4501@f44fb f4502@f44fd f4503@f44ff) ((lambda (f4508@swap) (dynamic-wind f4508@swap (lambda () (call-with-values (lambda () (f2f2d@parse-import-spec* f44ee@imp*)) (lambda (f450e@f450b f450f@f450d) ((lambda (f4512@subst-labels f4513@subst-names) ((lambda (f4516@rib) ((lambda (f4519@wrap) (begin (set! f4519@wrap (lambda (f4594@x) (f2c87@make-stx f4594@x f2c39@top-mark* (list f4516@rib) '()))) ((lambda (f451a@b* f451b@main-exp* f451c@rtc f451d@vtc) ((lambda (f452a@f4523 f452b@f4525 f452c@f4527 f452d@f4529) ((lambda (f4532@swap) (dynamic-wind f4532@swap (lambda () (call-with-values (lambda () (f2f39@chi-library-internal f451a@b* f4516@rib f44f0@top?)) (lambda (f4540@f4535 f4541@f4537 f4542@f4539 f4543@f453b f4544@f453d f4545@f453f) ((lambda (f454c@internal-exp* f454d@rhs* f454e@lex* f454f@mr f4550@r f4551@init*) (call-with-values (lambda () (f2f27@parse-exports (append f451b@main-exp* f454c@internal-exp*))) (lambda (f455c@f4559 f455d@f455b) ((lambda (f4560@exp-id* f4561@exp-name*) (begin (f2c74@seal-rib! f4516@rib) ((lambda (f4564@init*) ((lambda (f4566@rhs*) ((lambda () (begin (f2c76@unseal-rib! f4516@rib) ((lambda (f4568@loc* f4569@export-subst) ((lambda (f456d@errstr) (begin (set! f456d@errstr '"attempt to export mutated variable") (call-with-values (lambda () (f2f9d@make-export-env/macros f454e@lex* f4568@loc* f4550@r)) (lambda (f4574@f456f f4575@f4571 f4576@f4573) ((lambda (f457a@macro* f457b@global* f457c@export-env) (begin (for-each (lambda (f4580@s) ((lambda (f4582@name f4583@label) ((lambda (f4586@p) (if f4586@p ((lambda (f4588@b) ((lambda (f458a@type) (if (eq? f458a@type 'mutable) (f2fb1@syntax-violation 'export f456d@errstr f4582@name) (void))) (car f4588@b))) (cdr f4586@p)) (void))) (assq f4583@label f457c@export-env))) (car f4580@s) (cdr f4580@s))) f4569@export-subst) ((lambda (f458c@invoke-body f458d@invoke-definitions) (values (f44f7@itc) (f451c@rtc) (f451d@vtc) (f2c1c@f2b8b@build-sequence '#f (append f458d@invoke-definitions (list f458c@invoke-body))) f457a@macro* f4569@export-subst f457c@export-env)) (f2c1f@f2b91@build-letrec* '#f f454e@lex* f4566@rhs* (f2f99@build-exports f457b@global* f4564@init*)) (map f2c18@f2ae8@build-global-define (map cdr f457b@global*))))) f4576@f4573 f4575@f4571 f4574@f456f))))) '#f)) (map f2c3f@gen-global f454e@lex*) (f2f9b@make-export-subst f4561@exp-name* f4560@exp-id*)))))) (f2efa@chi-rhs* f454d@rhs* f4550@r f454f@mr))) (f2ee6@chi-expr* f4551@init* f4550@r f454f@mr)))) f455d@f455b f455c@f4559)))) f4545@f453f f4544@f453d f4543@f453b f4542@f4539 f4541@f4537 f4540@f4535)))) f4532@swap)) (lambda () (begin ((lambda (f4590@t) (begin (f452a@f4523 f452c@f4527) (set! f452c@f4527 f4590@t))) (f452a@f4523)) ((lambda (f4592@t) (begin (f452b@f4525 f452d@f4529) (set! f452d@f4529 f4592@t))) (f452b@f4525)))))) f2f33@inv-collector f2f35@vis-collector f451c@rtc f451d@vtc)) (map f4519@wrap f44ef@b*) (map f4519@wrap f44ed@main-exp*) (f2f31@make-collector) (f2f31@make-collector)))) '#f)) (f2f2f@make-top-rib f4513@subst-names f4512@subst-labels))) f450f@f450d f450e@f450b)))) f4508@swap)) (lambda () (begin ((lambda (f4596@t) (begin (f4500@f44f9 f4502@f44fd) (set! f4502@f44fd f4596@t))) (f4500@f44f9)) ((lambda (f4598@t) (begin (f4501@f44fb f4503@f44ff) (set! f4503@f44ff f4598@t))) (f4501@f44fb)))))) f2f37@imp-collector f2fbf@top-level-context f44f7@itc '#f))) '#f))) (set! f2f3f@core-library-expander (lambda (f459a@e f459b@verify-name) (call-with-values (lambda () (f2f2b@parse-library f459a@e)) (lambda (f45a6@f459f f45a7@f45a1 f45a8@f45a3 f45a9@f45a5) ((lambda (f45ae@b* f45af@imp* f45b0@exp* f45b1@name*) (call-with-values (lambda () (f2f29@parse-library-name f45b1@name*)) (lambda (f45ba@f45b7 f45bb@f45b9) ((lambda (f45be@ver f45bf@name) (begin (f459b@verify-name f45bf@name) (call-with-values (lambda () (f2f3d@library-body-expander f45bf@name f45b0@exp* f45af@imp* f45ae@b* '#f)) (lambda (f45d0@f45c3 f45d1@f45c5 f45d2@f45c7 f45d3@f45c9 f45d4@f45cb f45d5@f45cd f45d6@f45cf) ((lambda (f45de@export-env f45df@export-subst f45e0@visit-code f45e1@invoke-code f45e2@visit-req* f45e3@invoke-req* f45e4@imp*) (values f45bf@name f45be@ver f45e4@imp* f45e3@invoke-req* f45e2@visit-req* f45e1@invoke-code f45e0@visit-code f45df@export-subst f45de@export-env)) f45d6@f45cf f45d5@f45cd f45d4@f45cb f45d3@f45c9 f45d2@f45c7 f45d1@f45c5 f45d0@f45c3))))) f45bb@f45b9 f45ba@f45b7)))) f45a9@f45a5 f45a8@f45a3 f45a7@f45a1 f45a6@f459f))))) (set! f2f41@parse-top-level-program (lambda (f45ec@e*) ((lambda (f45ee@t) ((lambda (f45f0@ls/false) (if (and f45f0@ls/false (apply (lambda (f45f2@import f45f3@imp* f45f4@b*) (eq? (f2fb7@syntax->datum f45f2@import) 'import)) f45f0@ls/false)) (apply (lambda (f45f8@import f45f9@imp* f45fa@b*) (values f45f9@imp* f45fa@b*)) f45f0@ls/false) ((lambda (f45fe@t) ((lambda (f4600@ls/false) (if (and f4600@ls/false (apply (lambda (f4602@import f4603@x f4604@y) (eq? (f2fb7@syntax->datum f4602@import) 'import)) f4600@ls/false)) (apply (lambda (f4608@import f4609@x f460a@y) (f2fb1@syntax-violation 'expander '"invalid syntax of top-level program" (f2cb7@syntax-car f45ec@e*))) f4600@ls/false) ((lambda (f460e@t) ((lambda (f4610@ls/false) (if f4610@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) f4610@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f460e@t))) (f2ec8@syntax-dispatch f460e@t '_))) f45fe@t))) (f2ec8@syntax-dispatch f45fe@t '((any . any) . any)))) f45ee@t))) (f2ec8@syntax-dispatch f45ee@t '((any . each-any) . each-any)))) f45ec@e*))) (set! f2f43@top-level-expander (lambda (f4612@e*) (call-with-values (lambda () (f2f41@parse-top-level-program f4612@e*)) (lambda (f4618@f4615 f4619@f4617) ((lambda (f461c@b* f461d@imp*) (call-with-values (lambda () (f2f3d@library-body-expander '() '() f461d@imp* f461c@b* '#t)) (lambda (f462e@f4621 f462f@f4623 f4630@f4625 f4631@f4627 f4632@f4629 f4633@f462b f4634@f462d) ((lambda (f463c@export-env f463d@export-subst f463e@visit-code f463f@invoke-code f4640@visit-req* f4641@invoke-req* f4642@imp*) (values f4641@invoke-req* f463f@invoke-code)) f4634@f462d f4633@f462b f4632@f4629 f4631@f4627 f4630@f4625 f462f@f4623 f462e@f4621)))) f4619@f4617 f4618@f4615))))) (set! f2f49@f2f44 (make-record-type-descriptor 'env '#f 'f2f47 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! f2f4b@f2f46 '#f) (set! f2f4d@f2f45 (make-record-constructor-descriptor f2f49@f2f44 '#f f2f4b@f2f46)) (set! f2f50@env? (record-predicate f2f49@f2f44)) (set! f2f52@make-env (record-constructor f2f4d@f2f45)) (set! f2f54@env-names (record-accessor f2f49@f2f44 '0)) (set! f2f56@env-labels (record-accessor f2f49@f2f44 '1)) (set! f2f58@env-itc (record-accessor f2f49@f2f44 '2)) (set! f2f5a@set-env-names! (record-mutator f2f49@f2f44 '0)) (set! f2f5c@set-env-labels! (record-mutator f2f49@f2f44 '1)) (set! f2f5e@set-env-itc! (record-mutator f2f49@f2f44 '2)) (set! f2f60@rp (f2864@f278b@make-record-printer 'env (lambda (f464a@x f464b@p f464c@wr) (display '"#<environment>" f464b@p)))) (set! f2f66@f2f61 (make-record-type-descriptor 'interaction-env '#f 'f2f64 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! f2f68@f2f63 '#f) (set! f2f6a@f2f62 (make-record-constructor-descriptor f2f66@f2f61 '#f f2f68@f2f63)) (set! f2f6d@interaction-env? (record-predicate f2f66@f2f61)) (set! f2f6f@make-interaction-env (record-constructor f2f6a@f2f62)) (set! f2f71@interaction-env-rib (record-accessor f2f66@f2f61 '0)) (set! f2f73@interaction-env-r (record-accessor f2f66@f2f61 '1)) (set! f2f75@interaction-env-locs (record-accessor f2f66@f2f61 '2)) (set! f2f77@set-interaction-env-rib! (record-mutator f2f66@f2f61 '0)) (set! f2f79@set-interaction-env-r! (record-mutator f2f66@f2f61 '1)) (set! f2f7b@set-interaction-env-locs! (record-mutator f2f66@f2f61 '2)) (set! f2f7d@rp (f2864@f278b@make-record-printer 'interaction-env (lambda (f4650@x f4651@p f4652@wr) (display '"#<environment>" f4651@p)))) (set! f2f7f@interaction-environment-symbols (lambda () (f2f87@environment-symbols (f2fbd@interaction-environment)))) (set! f2f81@environment-bindings (lambda (f4656@e) (vector->list (vector-map (lambda (f4658@name f4659@label) (f2f83@parse-binding (cons f4658@name (f2ae0@f2980@imported-label->binding f4659@label)))) (f2f54@env-names f4656@e) (f2f56@env-labels f4656@e))))) (set! f2f83@parse-binding (lambda (f465c@b) (cons (car f465c@b) ((lambda (f465e@t) (if (memv f465e@t '(core-prim global)) 'procedure (if (memv f465e@t '(core-macro macro global-macro)) 'syntax (if (memv f465e@t '($core-rtd)) 'record (if (eq? (car f465c@b) (cadr f465c@b)) 'syntax 'unknown))))) (cadr f465c@b))))) (set! f2f85@environment? (lambda (f4660@x) (or (f2f50@env? f4660@x) (f2f6d@interaction-env? f4660@x)))) (set! f2f87@environment-symbols (lambda (f4662@x) (if (f2f50@env? f4662@x) (vector->list (f2f54@env-names f4662@x)) (if (f2f6d@interaction-env? f4662@x) (map values (f2c58@rib-sym* (f2f71@interaction-env-rib f4662@x))) (assertion-violation 'environment-symbols '"not an environment" f4662@x))))) (set! f2f89@environment (lambda f4664@imp* ((lambda (f4666@itc) ((lambda (f466c@f4669 f466d@f466b) ((lambda (f4670@swap) (dynamic-wind f4670@swap (lambda () (call-with-values (lambda () (f2f2d@parse-import-spec* f4664@imp*)) (lambda (f4676@f4673 f4677@f4675) ((lambda (f467a@subst-labels f467b@subst-names) (f2f52@make-env f467b@subst-names f467a@subst-labels f4666@itc)) f4677@f4675 f4676@f4673)))) f4670@swap)) (lambda () ((lambda (f467e@t) (begin (f466c@f4669 f466d@f466b) (set! f466d@f466b f467e@t))) (f466c@f4669))))) f2f37@imp-collector f4666@itc)) (f2f31@make-collector)))) (set! f2f8b@null-environment (lambda (f4680@n) (begin (if (not (eqv? f4680@n '5)) (assertion-violation 'null-environment '"not 5" f4680@n) (void)) (f2f89@environment '(psyntax null-environment-5))))) (set! f2f8d@scheme-report-environment (lambda (f4682@n) (begin (if (not (eqv? f4682@n '5)) (assertion-violation 'scheme-report-environment '"not 5" f4682@n) (void)) (f2f89@environment '(psyntax scheme-report-environment-5))))) (set! f2f8f@expand (lambda (f4684@x f4685@env) (if (f2f50@env? f4685@env) ((lambda (f4688@rib) ((lambda (f468a@x f468b@itc f468c@rtc f468d@vtc) ((lambda (f4692@x) (begin (f2c74@seal-rib! f4688@rib) (values f4692@x (f468c@rtc)))) ((lambda (f46a4@f4695 f46a5@f4697 f46a6@f4699 f46a7@f469b f46a8@f469d f46a9@f469f f46aa@f46a1 f46ab@f46a3) ((lambda (f46b4@swap) (dynamic-wind f46b4@swap (lambda () (f2eea@chi-expr f468a@x '() '())) f46b4@swap)) (lambda () (begin ((lambda (f46b6@t) (begin (f46a4@f4695 f46a8@f469d) (set! f46a8@f469d f46b6@t))) (f46a4@f4695)) ((lambda (f46b8@t) (begin (f46a5@f4697 f46a9@f469f) (set! f46a9@f469f f46b8@t))) (f46a5@f4697)) ((lambda (f46ba@t) (begin (f46a6@f4699 f46aa@f46a1) (set! f46aa@f46a1 f46ba@t))) (f46a6@f4699)) ((lambda (f46bc@t) (begin (f46a7@f469b f46ab@f46a3) (set! f46ab@f46a3 f46bc@t))) (f46a7@f469b)))))) f2fbf@top-level-context f2f33@inv-collector f2f35@vis-collector f2f37@imp-collector '#f f468c@rtc f468d@vtc f468b@itc))) (f2c87@make-stx f4684@x f2c39@top-mark* (list f4688@rib) '()) (f2f58@env-itc f4685@env) (f2f31@make-collector) (f2f31@make-collector))) (f2f2f@make-top-rib (f2f54@env-names f4685@env) (f2f56@env-labels f4685@env))) (if (f2f6d@interaction-env? f4685@env) ((lambda (f46be@rib f46bf@r f46c0@rtc) ((lambda (f46c4@x) (call-with-values (lambda () ((lambda (f46da@f46cb f46db@f46cd f46dc@f46cf f46dd@f46d1 f46de@f46d3 f46df@f46d5 f46e0@f46d7 f46e1@f46d9) ((lambda (f46ea@swap) (dynamic-wind f46ea@swap (lambda () (f2f3b@chi-interaction-expr f46c4@x f46be@rib f46bf@r)) f46ea@swap)) (lambda () (begin ((lambda (f46ec@t) (begin (f46da@f46cb f46de@f46d3) (set! f46de@f46d3 f46ec@t))) (f46da@f46cb)) ((lambda (f46ee@t) (begin (f46db@f46cd f46df@f46d5) (set! f46df@f46d5 f46ee@t))) (f46db@f46cd)) ((lambda (f46f0@t) (begin (f46dc@f46cf f46e0@f46d7) (set! f46e0@f46d7 f46f0@t))) (f46dc@f46cf)) ((lambda (f46f2@t) (begin (f46dd@f46d1 f46e1@f46d9) (set! f46e1@f46d9 f46f2@t))) (f46dd@f46d1)))))) f2fbf@top-level-context f2f33@inv-collector f2f35@vis-collector f2f37@imp-collector f4685@env f46c0@rtc (f2f31@make-collector) (f2f31@make-collector))) (lambda (f46f4@f46c7 f46f5@f46c9) ((lambda (f46f8@r^ f46f9@e) (begin (f2f79@set-interaction-env-r! f4685@env f46f8@r^) (values f46f9@e (f46c0@rtc)))) f46f5@f46c9 f46f4@f46c7)))) (f2c87@make-stx f4684@x f2c39@top-mark* (list f46be@rib) '()))) (f2f71@interaction-env-rib f4685@env) (f2f73@interaction-env-r f4685@env) (f2f31@make-collector)) (assertion-violation 'expand '"not an environment" f4685@env))))) (set! f2f91@eval (lambda (f46fc@x f46fd@env) (begin (if (not (f2f85@environment? f46fd@env)) (error 'eval '"not an environment" f46fd@env) (void)) (call-with-values (lambda () (f2f8f@expand f46fc@x f46fd@env)) (lambda (f4704@f4701 f4705@f4703) ((lambda (f4708@invoke-req* f4709@x) (begin (for-each f2ae1@f2982@invoke-library f4708@invoke-req*) (eval-core (f28bb@f2873@expanded->core f4709@x)))) f4705@f4703 f4704@f4701)))))) (set! f2f93@library-expander (lambda f477a ((lambda (f477b) (if (= f477b '3) (apply (lambda (f470c@x f470d@filename f470e@verify-name) ((lambda (f4713@build-visit-code f4715@visit!) (begin (set! f4713@build-visit-code (lambda (f4768@macro*) (if (null? f4768@macro*) (f2c1d@f2b8d@build-void) (f2c1c@f2b8b@build-sequence '#f (map (lambda (f476a@x) ((lambda (f476c@loc f476d@src) (list 'set! f476c@loc f476d@src)) (car f476a@x) (cddr f476a@x))) f4768@macro*))))) (set! f4715@visit! (lambda (f4760@macro*) (for-each (lambda (f4762@x) ((lambda (f4764@loc f4765@proc) (set-symbol-value! f4764@loc f4765@proc)) (car f4762@x) (cadr f4762@x))) f4760@macro*))) (call-with-values (lambda () (f2f3f@core-library-expander f470c@x f470e@verify-name)) (lambda (f4728@f4717 f4729@f4719 f472a@f471b f472b@f471d f472c@f471f f472d@f4721 f472e@f4723 f472f@f4725 f4730@f4727) ((lambda (f473a@export-env f473b@export-subst f473c@macro* f473d@invoke-code f473e@vis* f473f@inv* f4740@imp* f4741@ver f4742@name) ((lambda (f474c@id f474d@name f474e@ver f474f@imp* f4750@vis* f4751@inv* f4752@visit-proc f4753@invoke-proc f4754@visit-code f4755@invoke-code) (begin (f2adf@f297e@install-library f474c@id f474d@name f474e@ver f474f@imp* f4750@vis* f4751@inv* f473b@export-subst f473a@export-env f4752@visit-proc f4753@invoke-proc f4754@visit-code f4755@invoke-code '#t f470d@filename) (values f474c@id f474d@name f474e@ver f474f@imp* f4750@vis* f4751@inv* f4755@invoke-code f4754@visit-code f473b@export-subst f473a@export-env))) (gensym) f4742@name f4741@ver (map f2ae5@f298a@library-spec f4740@imp*) (map f2ae5@f298a@library-spec f473e@vis*) (map f2ae5@f298a@library-spec f473f@inv*) (lambda () (f4715@visit! f473c@macro*)) (lambda () (eval-core (f28bb@f2873@expanded->core f473d@invoke-code))) (f4713@build-visit-code f473c@macro*) f473d@invoke-code)) f4730@f4727 f472f@f4725 f472e@f4723 f472d@f4721 f472c@f471f f472b@f471d f472a@f471b f4729@f4719 f4728@f4717))))) '#f '#f)) f477a) (if (= f477b '2) (apply (lambda (f4770@x f4771@filename) (f2f93@library-expander f4770@x f4771@filename (lambda (f4774@x) (values)))) f477a) (if (= f477b '1) (apply (lambda (f4776@x) (f2f93@library-expander f4776@x '#f (lambda (f4778@x) (values)))) f477a) (error 'apply '"invalid arg count"))))) (length f477a)))) (set! f2f95@boot-library-expand (lambda (f477c@x) (call-with-values (lambda () (f2f93@library-expander f477c@x)) (lambda (f4792@f477f f4793@f4781 f4794@f4783 f4795@f4785 f4796@f4787 f4797@f4789 f4798@f478b f4799@f478d f479a@f478f f479b@f4791) ((lambda (f47a6@export-env f47a7@export-subst f47a8@visit-code f47a9@invoke-code f47aa@inv* f47ab@vis* f47ac@imp* f47ad@ver f47ae@name f47af@id) (values f47ae@name f47a9@invoke-code f47a7@export-subst f47a6@export-env)) f479b@f4791 f479a@f478f f4799@f478d f4798@f478b f4797@f4789 f4796@f4787 f4795@f4785 f4794@f4783 f4793@f4781 f4792@f477f))))) (set! f2f97@rev-map-append (lambda (f47ba@f f47bb@ls f47bc@ac) (if (null? f47bb@ls) f47bc@ac (f2f97@rev-map-append f47ba@f (cdr f47bb@ls) (cons (f47ba@f (car f47bb@ls)) f47bc@ac))))) (set! f2f99@build-exports (lambda (f47c0@lex*+loc* f47c1@init*) (f2c1c@f2b8b@build-sequence '#f (cons (f2c1d@f2b8d@build-void) (f2f97@rev-map-append (lambda (f47c4@x) (list 'set! (cdr f47c4@x) (car f47c4@x))) f47c0@lex*+loc* f47c1@init*))))) (set! f2f9b@make-export-subst (lambda (f47c6@name* f47c7@id*) (map (lambda (f47ca@name f47cb@id) ((lambda (f47ce@label) (begin (if (not f47ce@label) (f2fb1@syntax-violation '#f '"cannot export unbound identifier" f47cb@id) (void)) (cons f47ca@name f47ce@label))) (f2cd7@id->label f47cb@id))) f47c6@name* f47c7@id*))) (set! f2f9d@make-export-env/macros (lambda (f47d0@lex* f47d1@loc* f47d2@r) ((lambda (f47d7@lookup) (begin (set! f47d7@lookup (lambda (f47f4@x) ((letrec ((f47f6@f (lambda (f47f8@x f47f9@lex* f47fa@loc*) (if (pair? f47f9@lex*) (if (eq? f47f8@x (car f47f9@lex*)) (car f47fa@loc*) (f47f6@f f47f8@x (cdr f47f9@lex*) (cdr f47fa@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) f47f6@f) f47f4@x f47d0@lex* f47d1@loc*))) ((letrec ((f47d8@f (lambda (f47da@r f47db@env f47dc@global* f47dd@macro*) (if (null? f47da@r) (values f47db@env f47dc@global* f47dd@macro*) ((lambda (f47e2@x) ((lambda (f47e4@label f47e5@b) ((lambda (f47e8@t) (if (memv f47e8@t '(lexical)) ((lambda (f47ea@v) ((lambda (f47ec@loc f47ed@type) (f47d8@f (cdr f47da@r) (cons (cons* f47e4@label f47ed@type f47ec@loc) f47db@env) (cons (cons (f2e54@lexical-var f47ea@v) f47ec@loc) f47dc@global*) f47dd@macro*)) (f47d7@lookup (f2e54@lexical-var f47ea@v)) (if (f2e56@lexical-mutable? f47ea@v) 'mutable 'global))) (f2ce1@binding-value f47e5@b)) (if (memv f47e8@t '(local-macro)) ((lambda (f47f0@loc) (f47d8@f (cdr f47da@r) (cons (cons* f47e4@label 'global-macro f47f0@loc) f47db@env) f47dc@global* (cons (cons f47f0@loc (f2ce1@binding-value f47e5@b)) f47dd@macro*))) (gensym)) (if (memv f47e8@t '(local-macro!)) ((lambda (f47f2@loc) (f47d8@f (cdr f47da@r) (cons (cons* f47e4@label 'global-macro! f47f2@loc) f47db@env) f47dc@global* (cons (cons f47f2@loc (f2ce1@binding-value f47e5@b)) f47dd@macro*))) (gensym)) (if (memv f47e8@t '($rtd $module)) (f47d8@f (cdr f47da@r) (cons f47e2@x f47db@env) f47dc@global* f47dd@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (f2cdf@binding-type f47e5@b) (f2ce1@binding-value f47e5@b))))))) (f2cdf@binding-type f47e5@b))) (car f47e2@x) (cdr f47e2@x))) (car f47da@r)))))) f47d8@f) f47d2@r '() '() '()))) '#f))) (set! f2f9f@generate-temporaries (lambda (f47fe@ls) ((lambda (f4800@t) ((lambda (f4802@ls/false) (if f4802@ls/false (apply (lambda (f4804@ls) (map (lambda (f4806@x) (f2c87@make-stx ((lambda (f4808@x) (if (or (symbol? f4808@x) (string? f4808@x)) (gensym f4808@x) (gensym 't))) (f2fb7@syntax->datum f4806@x)) f2c39@top-mark* '() '())) f4804@ls)) f4802@ls/false) ((lambda (f480a@t) ((lambda (f480c@ls/false) (if f480c@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) f480c@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f480a@t))) (f2ec8@syntax-dispatch f480a@t '_))) f4800@t))) (f2ec8@syntax-dispatch f4800@t 'each-any))) f47fe@ls))) (set! f2fa1@free-identifier=? (lambda (f480e@x f480f@y) (if (f2cbd@id? f480e@x) (if (f2cbd@id? f480f@y) (f2cc5@free-id=? f480e@x f480f@y) (assertion-violation 'free-identifier=? '"not an identifier" f480f@y)) (assertion-violation 'free-identifier=? '"not an identifier" f480e@x)))) (set! f2fa3@bound-identifier=? (lambda (f4812@x f4813@y) (if (f2cbd@id? f4812@x) (if (f2cbd@id? f4813@y) (f2cc3@bound-id=? f4812@x f4813@y) (assertion-violation 'bound-identifier=? '"not an identifier" f4813@y)) (assertion-violation 'bound-identifier=? '"not an identifier" f4812@x)))) (set! f2fa5@make-source-condition (lambda (f4816@x) ((lambda (f4820@f481b f4822@f481d f4824@f481c f4827@f481a f4829@make-source-condition f482b@f4818 f482d@f4819 f482f@source-condition? f4831@source-filename f4833@source-character) (begin (set! f4820@f481b (make-record-type-descriptor '&source-information f4c7e@f49c5@&condition-rtd 'f481e '#f '#f '#((immutable file-name) (immutable character)))) (set! f4822@f481d '#f) (set! f4824@f481c (make-record-constructor-descriptor f4820@f481b f4c7f@f49c7@&condition-rcd f4822@f481d)) (set! f4827@f481a (record-predicate f4820@f481b)) (set! f4829@make-source-condition (record-constructor f4824@f481c)) (set! f482b@f4818 (record-accessor f4820@f481b '0)) (set! f482d@f4819 (record-accessor f4820@f481b '1)) (set! f482f@source-condition? (condition-predicate f4820@f481b)) (set! f4831@source-filename (condition-accessor f4820@f481b f482b@f4818)) (set! f4833@source-character (condition-accessor f4820@f481b f482d@f4819)) (if (pair? f4816@x) (f4829@make-source-condition (car f4816@x) (cdr f4816@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! f2fa7@extract-position-condition (lambda (f4834@x) (f2fa5@make-source-condition (f2fa9@expression-position f4834@x)))) (set! f2fa9@expression-position (lambda (f4836@x) (and (f2c85@stx? f4836@x) ((lambda (f4838@x) (and (f285c@f277b@annotation? f4838@x) (f285d@f277d@annotation-source f4838@x))) (f2c89@stx-expr f4836@x))))) (set! f2fab@assertion-error (lambda (f483a@expr f483b@pos) (raise (condition (f4cae@f4a89@make-assertion-violation) (f4cc0@f4abb@make-who-condition 'assert) (f4c84@f4a1c@make-message-condition '"assertion failed") (f4cb6@f4aa0@make-irritants-condition (list f483a@expr)) (f2fa5@make-source-condition f483b@pos))))) (set! f2fad@syntax-error (lambda (f483e@x . f4840@args) (begin (if (not (for-all string? f4840@args)) (assertion-violation 'syntax-error '"invalid argument" f4840@args) (void)) (raise (condition (f4c84@f4a1c@make-message-condition (if (null? f4840@args) '"invalid syntax" (apply string-append f4840@args))) (f4ce2@f4b17@make-syntax-violation (f2fb7@syntax->datum f483e@x) '#f) (f2fa7@extract-position-condition f483e@x)))))) (set! f2faf@syntax-violation* (lambda (f4842@who f4843@msg f4844@form f4845@condition-object) (begin (if (not (string? f4843@msg)) (assertion-violation 'syntax-violation '"message is not a string" f4843@msg) (void)) ((lambda (f484a@who) (raise (condition (if f484a@who (f4cc0@f4abb@make-who-condition f484a@who) (condition)) (f4c84@f4a1c@make-message-condition f4843@msg) f4845@condition-object (f2fa7@extract-position-condition f4844@form)))) (if (or (string? f4842@who) (symbol? f4842@who)) f4842@who (if (not f4842@who) ((lambda (f484c@t) ((lambda (f484e@ls/false) (if (and f484e@ls/false (apply (lambda (f4850@id) (f2cbd@id? f4850@id)) f484e@ls/false)) (apply (lambda (f4852@id) (f2fb7@syntax->datum f4852@id)) f484e@ls/false) ((lambda (f4854@t) ((lambda (f4856@ls/false) (if (and f4856@ls/false (apply (lambda (f4858@id f4859@rest) (f2cbd@id? f4858@id)) f4856@ls/false)) (apply (lambda (f485c@id f485d@rest) (f2fb7@syntax->datum f485c@id)) f4856@ls/false) ((lambda (f4860@t) ((lambda (f4862@ls/false) (if f4862@ls/false (apply (lambda () '#f) f4862@ls/false) (f2fb1@syntax-violation '#f '"invalid syntax" f4860@t))) (f2ec8@syntax-dispatch f4860@t '_))) f4854@t))) (f2ec8@syntax-dispatch f4854@t '(any . any)))) f484c@t))) (f2ec8@syntax-dispatch f484c@t 'any))) f4844@form) (assertion-violation 'syntax-violation '"invalid who argument" f4842@who))))))) (set! f2fb1@syntax-violation (lambda f4872 ((lambda (f4873) (if (= f4873 '3) (apply (lambda (f4864@who f4865@msg f4866@form) (f2fb1@syntax-violation f4864@who f4865@msg f4866@form '#f)) f4872) (if (= f4873 '4) (apply (lambda (f486a@who f486b@msg f486c@form f486d@subform) (f2faf@syntax-violation* f486a@who f486b@msg f486c@form (f4ce2@f4b17@make-syntax-violation (f2fb7@syntax->datum f486c@form) (f2fb7@syntax->datum f486d@subform)))) f4872) (error 'apply '"invalid arg count")))) (length f4872)))) (set! f2fb3@identifier? (lambda (f4874@x) (f2cbd@id? f4874@x))) (set! f2fb5@datum->syntax (lambda (f4876@id f4877@datum) (if (f2cbd@id? f4876@id) (f2c9b@datum->stx f4876@id f4877@datum) (assertion-violation 'datum->syntax '"not an identifier" f4876@id)))) (set! f2fb7@syntax->datum (lambda (f487a@x) (f2cd3@stx->datum f487a@x))) (set! f2fb9@compile-r6rs-top-level (lambda (f487c@x*) (call-with-values (lambda () (f2f43@top-level-expander f487c@x*)) (lambda (f4882@f487f f4883@f4881) ((lambda (f4886@invoke-code f4887@lib*) (lambda () (begin (for-each f2ae1@f2982@invoke-library f4887@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (f28bb@f2873@expanded->core f4886@invoke-code)) (void)) (eval-core (f28bb@f2873@expanded->core f4886@invoke-code))))) f4883@f4881 f4882@f487f))))) (set! f2fbb@pre-compile-r6rs-top-level (lambda (f488a@x*) (call-with-values (lambda () (f2f43@top-level-expander f488a@x*)) (lambda (f4890@f488d f4891@f488f) ((lambda (f4894@invoke-code f4895@lib*) (begin (for-each f2ae1@f2982@invoke-library f4895@lib*) (f2865@f278d@compile-core (f28bb@f2873@expanded->core f4894@invoke-code)))) f4891@f488f f4890@f488d))))) (set! f2fbd@interaction-environment ((lambda (f4898@the-env) (lambda () (or f4898@the-env ((lambda (f489a@lib f489b@rib) (begin ((lambda (f489e@subst) (begin (f2c62@set-rib-sym*! f489b@rib (map car f489e@subst)) (f2c64@set-rib-mark**! f489b@rib (map (lambda (f48a0@x) f2c39@top-mark*) f489e@subst)) (f2c66@set-rib-label*! f489b@rib (map cdr f489e@subst)))) (f2ab6@f292c@library-subst f489a@lib)) ((lambda (f48a2@env) (begin (set! f4898@the-env f48a2@env) f48a2@env)) (f2f6f@make-interaction-env f489b@rib '() '())))) (f2ada@f2974@find-library-by-name '(mosh interaction)) (f2c6c@make-empty-rib))))) '#f)) (set! f2fbf@top-level-context (f2867@f2791@make-parameter '#f)) (begin (set! f49b0@f2fbf@top-level-context f2fbf@top-level-context) (set! f49af@f2fbd@interaction-environment f2fbd@interaction-environment) (set! f49ae@f2fbb@pre-compile-r6rs-top-level f2fbb@pre-compile-r6rs-top-level) (set! f49ad@f2fb9@compile-r6rs-top-level f2fb9@compile-r6rs-top-level) (set! f49ac@f2fb7@syntax->datum f2fb7@syntax->datum) (set! f49ab@f2fb5@datum->syntax f2fb5@datum->syntax) (set! f49aa@f2fb3@identifier? f2fb3@identifier?) (set! f49a9@f2fb1@syntax-violation f2fb1@syntax-violation) (set! f49a8@f2faf@syntax-violation* f2faf@syntax-violation*) (set! f49a7@f2fad@syntax-error f2fad@syntax-error) (set! f49a6@f2fab@assertion-error f2fab@assertion-error) (set! f49a5@f2fa9@expression-position f2fa9@expression-position) (set! f49a4@f2fa7@extract-position-condition f2fa7@extract-position-condition) (set! f49a3@f2fa5@make-source-condition f2fa5@make-source-condition) (set! f49a2@f2fa3@bound-identifier=? f2fa3@bound-identifier=?) (set! f49a1@f2fa1@free-identifier=? f2fa1@free-identifier=?) (set! f49a0@f2f9f@generate-temporaries f2f9f@generate-temporaries) (set! f499f@f2f9d@make-export-env/macros f2f9d@make-export-env/macros) (set! f499e@f2f9b@make-export-subst f2f9b@make-export-subst) (set! f499d@f2f99@build-exports f2f99@build-exports) (set! f499c@f2f97@rev-map-append f2f97@rev-map-append) (set! f499b@f2f95@boot-library-expand f2f95@boot-library-expand) (set! f499a@f2f93@library-expander f2f93@library-expander) (set! f4999@f2f91@eval f2f91@eval) (set! f4998@f2f8f@expand f2f8f@expand) (set! f4997@f2f8d@scheme-report-environment f2f8d@scheme-report-environment) (set! f4996@f2f8b@null-environment f2f8b@null-environment) (set! f4995@f2f89@environment f2f89@environment) (set! f4994@f2f87@environment-symbols f2f87@environment-symbols) (set! f4993@f2f85@environment? f2f85@environment?) (set! f4992@f2f83@parse-binding f2f83@parse-binding) (set! f4991@f2f81@environment-bindings f2f81@environment-bindings) (set! f4990@f2f7f@interaction-environment-symbols f2f7f@interaction-environment-symbols) (set! f498f@f2f7d@rp f2f7d@rp) (set! f498e@f2f7b@set-interaction-env-locs! f2f7b@set-interaction-env-locs!) (set! f498d@f2f79@set-interaction-env-r! f2f79@set-interaction-env-r!) (set! f498c@f2f77@set-interaction-env-rib! f2f77@set-interaction-env-rib!) (set! f498b@f2f75@interaction-env-locs f2f75@interaction-env-locs) (set! f498a@f2f73@interaction-env-r f2f73@interaction-env-r) (set! f4989@f2f71@interaction-env-rib f2f71@interaction-env-rib) (set! f4988@f2f6f@make-interaction-env f2f6f@make-interaction-env) (set! f4987@f2f6d@interaction-env? f2f6d@interaction-env?) (set! f4986@f2f6a@f2f62 f2f6a@f2f62) (set! f4985@f2f68@f2f63 f2f68@f2f63) (set! f4984@f2f66@f2f61 f2f66@f2f61) (set! f4983@f2f60@rp f2f60@rp) (set! f4982@f2f5e@set-env-itc! f2f5e@set-env-itc!) (set! f4981@f2f5c@set-env-labels! f2f5c@set-env-labels!) (set! f4980@f2f5a@set-env-names! f2f5a@set-env-names!) (set! f497f@f2f58@env-itc f2f58@env-itc) (set! f497e@f2f56@env-labels f2f56@env-labels) (set! f497d@f2f54@env-names f2f54@env-names) (set! f497c@f2f52@make-env f2f52@make-env) (set! f497b@f2f50@env? f2f50@env?) (set! f497a@f2f4d@f2f45 f2f4d@f2f45) (set! f4979@f2f4b@f2f46 f2f4b@f2f46) (set! f4978@f2f49@f2f44 f2f49@f2f44) (set! f4977@f2f43@top-level-expander f2f43@top-level-expander) (set! f4976@f2f41@parse-top-level-program f2f41@parse-top-level-program) (set! f4975@f2f3f@core-library-expander f2f3f@core-library-expander) (set! f4974@f2f3d@library-body-expander f2f3d@library-body-expander) (set! f4973@f2f3b@chi-interaction-expr f2f3b@chi-interaction-expr) (set! f4972@f2f39@chi-library-internal f2f39@chi-library-internal) (set! f4971@f2f37@imp-collector f2f37@imp-collector) (set! f4970@f2f35@vis-collector f2f35@vis-collector) (set! f496f@f2f33@inv-collector f2f33@inv-collector) (set! f496e@f2f31@make-collector f2f31@make-collector) (set! f496d@f2f2f@make-top-rib f2f2f@make-top-rib) (set! f496c@f2f2d@parse-import-spec* f2f2d@parse-import-spec*) (set! f496b@f2f2b@parse-library f2f2b@parse-library) (set! f496a@f2f29@parse-library-name f2f29@parse-library-name) (set! f4969@f2f27@parse-exports f2f27@parse-exports) (set! f4968@f2f25@expand-transformer f2f25@expand-transformer) (set! f4967@f2f23@chi-body* f2f23@chi-body*) (set! f4966@f2f21@chi-internal-module f2f21@chi-internal-module) (set! f4965@f2f1f@module-interface-exp-id* f2f1f@module-interface-exp-id*) (set! f4964@f2f1d@set-module-interface-exp-lab-vec! f2f1d@set-module-interface-exp-lab-vec!) (set! f4963@f2f1b@set-module-interface-exp-id-vec! f2f1b@set-module-interface-exp-id-vec!) (set! f4962@f2f19@set-module-interface-first-mark! f2f19@set-module-interface-first-mark!) (set! f4961@f2f17@module-interface-exp-lab-vec f2f17@module-interface-exp-lab-vec) (set! f4960@f2f15@module-interface-exp-id-vec f2f15@module-interface-exp-id-vec) (set! f495f@f2f13@module-interface-first-mark f2f13@module-interface-first-mark) (set! f495e@f2f11@make-module-interface f2f11@make-module-interface) (set! f495d@f2f0f@module-interface? f2f0f@module-interface?) (set! f495c@f2f0c@f2f04 f2f0c@f2f04) (set! f495b@f2f0a@f2f05 f2f0a@f2f05) (set! f495a@f2f08@f2f03 f2f08@f2f03) (set! f4959@f2f02@parse-module f2f02@parse-module) (set! f4958@f2f00@chi-internal f2f00@chi-internal) (set! f4957@f2efe@find-dups f2efe@find-dups) (set! f4956@f2efc@find-bound=? f2efc@find-bound=?) (set! f4955@f2efa@chi-rhs* f2efa@chi-rhs*) (set! f4954@f2ef8@expand-interaction-rhs*/init* f2ef8@expand-interaction-rhs*/init*) (set! f4953@f2ef6@chi-rhs f2ef6@chi-rhs) (set! f4952@f2ef4@chi-defun f2ef4@chi-defun) (set! f4951@f2ef2@chi-lambda-clause* f2ef2@chi-lambda-clause*) (set! f4950@f2ef0@chi-lambda-clause f2ef0@chi-lambda-clause) (set! f494f@f2eee@verify-formals f2eee@verify-formals) (set! f494e@f2eec@chi-set! f2eec@chi-set!) (set! f494d@f2eea@chi-expr f2eea@chi-expr) (set! f494c@f2ee8@chi-application f2ee8@chi-application) (set! f494b@f2ee6@chi-expr* f2ee6@chi-expr*) (set! f494a@f2ee4@chi-global-macro f2ee4@chi-global-macro) (set! f4949@f2ee2@chi-local-macro f2ee2@chi-local-macro) (set! f4948@f2ee0@chi-macro f2ee0@chi-macro) (set! f4947@f2ede@do-macro-call f2ede@do-macro-call) (set! f4946@f2edc@local-macro-transformer f2edc@local-macro-transformer) (set! f4945@f2eda@macro-transformer f2eda@macro-transformer) (set! f4944@f2ed8@symbol-macro f2ed8@symbol-macro) (set! f4943@f2ed6@core-macro-transformer f2ed6@core-macro-transformer) (set! f4942@f2ed4@syntax-transformer f2ed4@syntax-transformer) (set! f4941@f2ed2@ellipsis-map f2ed2@ellipsis-map) (set! f4940@f2ed0@syntax-case-transformer f2ed0@syntax-case-transformer) (set! f493f@f2ece@verify-literals f2ece@verify-literals) (set! f493e@f2ecc@underscore? f2ecc@underscore?) (set! f493d@f2eca@ellipsis? f2eca@ellipsis?) (set! f493c@f2ec8@syntax-dispatch f2ec8@syntax-dispatch) (set! f493b@f2ec6@convert-pattern f2ec6@convert-pattern) (set! f493a@f2ec4@foreign-call-transformer f2ec4@foreign-call-transformer) (set! f4939@f2ec2@parameterize-macro f2ec2@parameterize-macro) (set! f4938@f2ec0@incorrect-usage-macro f2ec0@incorrect-usage-macro) (set! f4937@f2ebe@define-condition-type-macro f2ebe@define-condition-type-macro) (set! f4936@f2ebc@define-record-type-macro f2ebc@define-record-type-macro) (set! f4935@f2eba@define-struct-macro f2eba@define-struct-macro) (set! f4934@f2eb8@quasisyntax-macro f2eb8@quasisyntax-macro) (set! f4933@f2eb6@quasiquote-macro f2eb6@quasiquote-macro) (set! f4932@f2eb4@syntax-rules-macro f2eb4@syntax-rules-macro) (set! f4931@f2eb2@include-into-macro f2eb2@include-into-macro) (set! f4930@f2eb0@include-macro f2eb0@include-macro) (set! f492f@f2eae@do-include f2eae@do-include) (set! f492e@f2eac@cond-macro f2eac@cond-macro) (set! f492d@f2eaa@and-macro f2eaa@and-macro) (set! f492c@f2ea8@or-macro f2ea8@or-macro) (set! f492b@f2ea6@let*-macro f2ea6@let*-macro) (set! f492a@f2ea4@do-macro f2ea4@do-macro) (set! f4929@f2ea2@identifier-syntax-macro f2ea2@identifier-syntax-macro) (set! f4928@f2ea0@endianness-macro f2ea0@endianness-macro) (set! f4927@f2e9e@assert-macro f2e9e@assert-macro) (set! f4926@f2e9c@delay-macro f2e9c@delay-macro) (set! f4925@f2e9a@time-macro f2e9a@time-macro) (set! f4924@f2e98@define-enumeration-macro f2e98@define-enumeration-macro) (set! f4923@f2e96@guard-macro f2e96@guard-macro) (set! f4922@f2e94@trace-letrec-syntax-macro f2e94@trace-letrec-syntax-macro) (set! f4921@f2e92@trace-let-syntax-macro f2e92@trace-let-syntax-macro) (set! f4920@f2e90@trace-let/rec-syntax f2e90@trace-let/rec-syntax) (set! f491f@f2e8e@trace-define-syntax-macro f2e8e@trace-define-syntax-macro) (set! f491e@f2e8c@trace-define-macro f2e8c@trace-define-macro) (set! f491d@f2e8a@trace-lambda-macro f2e8a@trace-lambda-macro) (set! f491c@f2e88@let*-values-macro f2e88@let*-values-macro) (set! f491b@f2e86@let-values-macro f2e86@let-values-macro) (set! f491a@f2e84@let-macro f2e84@let-macro) (set! f4919@f2e82@invalid-fmls-error f2e82@invalid-fmls-error) (set! f4918@f2e80@with-syntax-macro f2e80@with-syntax-macro) (set! f4917@f2e7e@bless f2e7e@bless) (set! f4916@f2e7c@lambda-transformer f2e7c@lambda-transformer) (set! f4915@f2e7a@case-lambda-transformer f2e7a@case-lambda-transformer) (set! f4914@f2e78@quote-transformer f2e78@quote-transformer) (set! f4913@f2e76@case-macro f2e76@case-macro) (set! f4912@f2e74@or-transformer f2e74@or-transformer) (set! f4911@f2e72@and-transformer f2e72@and-transformer) (set! f4910@f2e70@if-transformer f2e70@if-transformer) (set! f490f@f2e6e@unless-macro f2e6e@unless-macro) (set! f490e@f2e6c@when-macro f2e6c@when-macro) (set! f490d@f2e6a@record-constructor-descriptor-transformer f2e6a@record-constructor-descriptor-transformer) (set! f490c@f2e68@record-type-descriptor-transformer f2e68@record-type-descriptor-transformer) (set! f490b@f2e66@type-descriptor-transformer f2e66@type-descriptor-transformer) (set! f490a@f2e64@fluid-let-syntax-transformer f2e64@fluid-let-syntax-transformer) (set! f4909@f2e62@letrec*-transformer f2e62@letrec*-transformer) (set! f4908@f2e60@letrec-transformer f2e60@letrec-transformer) (set! f4907@f2e5e@letrec-helper f2e5e@letrec-helper) (set! f4906@f2e5c@add-lexicals f2e5c@add-lexicals) (set! f4905@f2e5a@add-lexical f2e5a@add-lexical) (set! f4904@f2e58@set-lexical-mutable! f2e58@set-lexical-mutable!) (set! f4903@f2e56@lexical-mutable? f2e56@lexical-mutable?) (set! f4902@f2e54@lexical-var f2e54@lexical-var) (set! f4901@f2e52@scheme-stx f2e52@scheme-stx) (set! f4900@f2e50@scheme-stx-hashtable f2e50@scheme-stx-hashtable) (set! f48ff@f2e4e@parse-define-syntax f2e4e@parse-define-syntax) (set! f48fe@f2e4c@parse-define f2e4c@parse-define) (set! f48fd@f2cfb@make-eval-transformer f2cfb@make-eval-transformer) (set! f48fc@f2cf9@variable-transformer-procedure f2cf9@variable-transformer-procedure) (set! f48fb@f2cf7@variable-transformer? f2cf7@variable-transformer?) (set! f48fa@f2cf5@make-variable-transformer f2cf5@make-variable-transformer) (set! f48f9@f2cf3@sanitize-binding f2cf3@sanitize-binding) (set! f48f8@f2ce5@syntax-type f2ce5@syntax-type) (set! f48f7@f2ce3@raise-unbound-error f2ce3@raise-unbound-error) (set! f48f6@f2ce1@binding-value f2ce1@binding-value) (set! f48f5@f2cdf@binding-type f2cdf@binding-type) (set! f48f4@f2cdd@make-binding f2cdd@make-binding) (set! f48f3@f2cdb@label->binding f2cdb@label->binding) (set! f48f2@f2cd9@id->real-label f2cd9@id->real-label) (set! f48f1@f2cd7@id->label f2cd7@id->label) (set! f48f0@f2cd5@same-marks*? f2cd5@same-marks*?) (set! f48ef@f2cd3@stx->datum f2cd3@stx->datum) (set! f48ee@f2cd1@strip f2cd1@strip) (set! f48ed@f2ccf@strip-annotations f2ccf@strip-annotations) (set! f48ec@f2ccd@self-evaluating? f2ccd@self-evaluating?) (set! f48eb@f2ccb@bound-id-member? f2ccb@bound-id-member?) (set! f48ea@f2cc9@distinct-bound-ids? f2cc9@distinct-bound-ids?) (set! f48e9@f2cc7@valid-bound-ids? f2cc7@valid-bound-ids?) (set! f48e8@f2cc5@free-id=? f2cc5@free-id=?) (set! f48e7@f2cc3@bound-id=? f2cc3@bound-id=?) (set! f48e6@f2cc1@same-marks? f2cc1@same-marks?) (set! f48e5@f2cbf@id->sym f2cbf@id->sym) (set! f48e4@f2cbd@id? f2cbd@id?) (set! f48e3@f2cbb@syntax->list f2cbb@syntax->list) (set! f48e2@f2cb9@syntax-cdr f2cb9@syntax-cdr) (set! f48e1@f2cb7@syntax-car f2cb7@syntax-car) (set! f48e0@f2cb5@syntax-list? f2cb5@syntax-list?) (set! f48df@f2cb3@syntax-null? f2cb3@syntax-null?) (set! f48de@f2cb1@syntax-vector? f2cb1@syntax-vector?) (set! f48dd@f2caf@syntax-pair? f2caf@syntax-pair?) (set! f48dc@f2cad@syntax-vector->list f2cad@syntax-vector->list) (set! f48db@f2cab@syntax-kind? f2cab@syntax-kind?) (set! f48da@f2ca9@add-subst f2ca9@add-subst) (set! f48d9@f2ca7@add-mark f2ca7@add-mark) (set! f48d8@f2ca5@mkstx f2ca5@mkstx) (set! f48d7@f2ca3@join-wraps f2ca3@join-wraps) (set! f48d6@f2ca1@anti-mark? f2ca1@anti-mark?) (set! f48d5@f2c9f@anti-mark f2c9f@anti-mark) (set! f48d4@f2c9d@gen-mark f2c9d@gen-mark) (set! f48d3@f2c9b@datum->stx f2c9b@datum->stx) (set! f48d2@f2c99@rp f2c99@rp) (set! f48d1@f2c97@set-stx-ae*! f2c97@set-stx-ae*!) (set! f48d0@f2c95@set-stx-subst*! f2c95@set-stx-subst*!) (set! f48cf@f2c93@set-stx-mark*! f2c93@set-stx-mark*!) (set! f48ce@f2c91@set-stx-expr! f2c91@set-stx-expr!) (set! f48cd@f2c8f@stx-ae* f2c8f@stx-ae*) (set! f48cc@f2c8d@stx-subst* f2c8d@stx-subst*) (set! f48cb@f2c8b@stx-mark* f2c8b@stx-mark*) (set! f48ca@f2c89@stx-expr f2c89@stx-expr) (set! f48c9@f2c87@make-stx f2c87@make-stx) (set! f48c8@f2c85@stx? f2c85@stx?) (set! f48c7@f2c82@f2c7a f2c82@f2c7a) (set! f48c6@f2c80@f2c7b f2c80@f2c7b) (set! f48c5@f2c7e@f2c79 f2c7e@f2c79) (set! f48c4@f2c78@make-full-rib f2c78@make-full-rib) (set! f48c3@f2c76@unseal-rib! f2c76@unseal-rib!) (set! f48c2@f2c74@seal-rib! f2c74@seal-rib!) (set! f48c1@f2c72@make-rib-map f2c72@make-rib-map) (set! f48c0@f2c70@extend-rib/nc! f2c70@extend-rib/nc!) (set! f48bf@f2c6e@extend-rib! f2c6e@extend-rib!) (set! f48be@f2c6c@make-empty-rib f2c6c@make-empty-rib) (set! f48bd@f2c6a@set-rib-cache! f2c6a@set-rib-cache!) (set! f48bc@f2c68@set-rib-sealed/freq! f2c68@set-rib-sealed/freq!) (set! f48bb@f2c66@set-rib-label*! f2c66@set-rib-label*!) (set! f48ba@f2c64@set-rib-mark**! f2c64@set-rib-mark**!) (set! f48b9@f2c62@set-rib-sym*! f2c62@set-rib-sym*!) (set! f48b8@f2c60@rib-cache f2c60@rib-cache) (set! f48b7@f2c5e@rib-sealed/freq f2c5e@rib-sealed/freq) (set! f48b6@f2c5c@rib-label* f2c5c@rib-label*) (set! f48b5@f2c5a@rib-mark** f2c5a@rib-mark**) (set! f48b4@f2c58@rib-sym* f2c58@rib-sym*) (set! f48b3@f2c56@make-rib f2c56@make-rib) (set! f48b2@f2c54@rib? f2c54@rib?) (set! f48b1@f2c51@f2c49 f2c51@f2c49) (set! f48b0@f2c4f@f2c4a f2c4f@f2c4a) (set! f48af@f2c4d@f2c48 f2c4d@f2c48) (set! f48ae@f2c47@gen-define-label f2c47@gen-define-label) (set! f48ad@f2c45@gen-define-label+loc f2c45@gen-define-label+loc) (set! f48ac@f2c43@gen-top-level-label f2c43@gen-top-level-label) (set! f48ab@f2c41@gen-label f2c41@gen-label) (set! f48aa@f2c3f@gen-global f2c3f@gen-global) (set! f48a9@f2c3d@gen-lexical f2c3d@gen-lexical) (set! f48a8@f2c3b@top-marked? f2c3b@top-marked?) (set! f48a7@f2c39@top-mark* f2c39@top-mark*) (set! f48a6@f2c34@set-union f2c34@set-union) (set! f48a5@f2c32@set-cons f2c32@set-cons) (set! f48a4@f2c30@file-options-macro f2c30@file-options-macro) (f2ad7@f296e@current-library-expander f2f93@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (f49ba@f49b5 f49bc@f49b7 f49be@f49b6 f49c1@&condition? f49c3@make-&condition f49c5@&condition-rtd f49c7@&condition-rcd f4a13@f4a0e f4a15@f4a10 f4a17@f4a0f f4a1a@p? f4a1c@make-message-condition f4a1e@f4a0d f4a20@message-condition? f4a22@condition-message f4a24@&message-rtd f4a26@&message-rcd f4a2c@f4a27 f4a2e@f4a29 f4a30@f4a28 f4a33@p? f4a35@make-warning f4a37@warning? f4a39@&warning-rtd f4a3b@&warning-rcd f4a41@f4a3c f4a43@f4a3e f4a45@f4a3d f4a48@p? f4a4a@make-serious-condition f4a4c@serious-condition? f4a4e@&serious-rtd f4a50@&serious-rcd f4a56@f4a51 f4a58@f4a53 f4a5a@f4a52 f4a5d@p? f4a5f@make-error f4a61@error? f4a63@&error-rtd f4a65@&error-rcd f4a6b@f4a66 f4a6d@f4a68 f4a6f@f4a67 f4a72@p? f4a74@make-violation f4a76@violation? f4a78@&violation-rtd f4a7a@&violation-rcd f4a80@f4a7b f4a82@f4a7d f4a84@f4a7c f4a87@p? f4a89@make-assertion-violation f4a8b@assertion-violation? f4a8d@&assertion-rtd f4a8f@&assertion-rcd f4a97@f4a92 f4a99@f4a94 f4a9b@f4a93 f4a9e@p? f4aa0@make-irritants-condition f4aa2@f4a91 f4aa4@irritants-condition? f4aa6@condition-irritants f4aa8@&irritants-rtd f4aaa@&irritants-rcd f4ab2@f4aad f4ab4@f4aaf f4ab6@f4aae f4ab9@p? f4abb@make-who-condition f4abd@f4aac f4abf@who-condition? f4ac1@condition-who f4ac3@&who-rtd f4ac5@&who-rcd f4acb@f4ac6 f4acd@f4ac8 f4acf@f4ac7 f4ad2@p? f4ad4@make-non-continuable-violation f4ad6@non-continuable-violation? f4ad8@&non-continuable-rtd f4ada@&non-continuable-rcd f4ae0@f4adb f4ae2@f4add f4ae4@f4adc f4ae7@p? f4ae9@make-implementation-restriction-violation f4aeb@implementation-restriction-violation? f4aed@&implementation-restriction-rtd f4aef@&implementation-restriction-rcd f4af5@f4af0 f4af7@f4af2 f4af9@f4af1 f4afc@p? f4afe@make-lexical-violation f4b00@lexical-violation? f4b02@&lexical-rtd f4b04@&lexical-rcd f4b0e@f4b09 f4b10@f4b0b f4b12@f4b0a f4b15@p? f4b17@make-syntax-violation f4b19@f4b06 f4b1b@f4b08 f4b1d@syntax-violation? f4b1f@syntax-violation-form f4b21@syntax-violation-subform f4b23@&syntax-rtd f4b25@&syntax-rcd f4b2b@f4b26 f4b2d@f4b28 f4b2f@f4b27 f4b32@p? f4b34@make-undefined-violation f4b36@undefined-violation? f4b38@&undefined-rtd f4b3a@&undefined-rcd f4b40@f4b3b f4b42@f4b3d f4b44@f4b3c f4b47@p? f4b49@make-i/o-error f4b4b@i/o-error? f4b4d@&i/o-rtd f4b4f@&i/o-rcd f4b55@f4b50 f4b57@f4b52 f4b59@f4b51 f4b5c@p? f4b5e@make-i/o-read-error f4b60@i/o-read-error? f4b62@&i/o-read-rtd f4b64@&i/o-read-rcd f4b6a@f4b65 f4b6c@f4b67 f4b6e@f4b66 f4b71@p? f4b73@make-i/o-write-error f4b75@i/o-write-error? f4b77@&i/o-write-rtd f4b79@&i/o-write-rcd f4b81@f4b7c f4b83@f4b7e f4b85@f4b7d f4b88@p? f4b8a@make-i/o-invalid-position-error f4b8c@f4b7b f4b8e@i/o-invalid-position-error? f4b90@i/o-error-position f4b92@&i/o-invalid-position-rtd f4b94@&i/o-invalid-position-rcd f4b9c@f4b97 f4b9e@f4b99 f4ba0@f4b98 f4ba3@p? f4ba5@make-i/o-filename-error f4ba7@f4b96 f4ba9@i/o-filename-error? f4bab@i/o-error-filename f4bad@&i/o-filename-rtd f4baf@&i/o-filename-rcd f4bb5@f4bb0 f4bb7@f4bb2 f4bb9@f4bb1 f4bbc@p? f4bbe@make-i/o-file-protection-error f4bc0@i/o-file-protection-error? f4bc2@&i/o-file-protection-rtd f4bc4@&i/o-file-protection-rcd f4bca@f4bc5 f4bcc@f4bc7 f4bce@f4bc6 f4bd1@p? f4bd3@make-i/o-file-is-read-only-error f4bd5@i/o-file-is-read-only-error? f4bd7@&i/o-file-is-read-only-rtd f4bd9@&i/o-file-is-read-only-rcd f4bdf@f4bda f4be1@f4bdc f4be3@f4bdb f4be6@p? f4be8@make-i/o-file-already-exists-error f4bea@i/o-file-already-exists-error? f4bec@&i/o-file-already-exists-rtd f4bee@&i/o-file-already-exists-rcd f4bf4@f4bef f4bf6@f4bf1 f4bf8@f4bf0 f4bfb@p? f4bfd@make-i/o-file-does-not-exist-error f4bff@i/o-file-does-not-exist-error? f4c01@&i/o-file-does-not-exist-rtd f4c03@&i/o-file-does-not-exist-rcd f4c0b@f4c06 f4c0d@f4c08 f4c0f@f4c07 f4c12@p? f4c14@make-i/o-port-error f4c16@f4c05 f4c18@i/o-port-error? f4c1a@i/o-error-port f4c1c@&i/o-port-rtd f4c1e@&i/o-port-rcd f4c24@f4c1f f4c26@f4c21 f4c28@f4c20 f4c2b@p? f4c2d@make-i/o-decoding-error f4c2f@i/o-decoding-error? f4c31@&i/o-decoding-rtd f4c33@&i/o-decoding-rcd f4c3b@f4c36 f4c3d@f4c38 f4c3f@f4c37 f4c42@p? f4c44@make-i/o-encoding-error f4c46@f4c35 f4c48@i/o-encoding-error? f4c4a@i/o-encoding-error-char f4c4c@&i/o-encoding-rtd f4c4e@&i/o-encoding-rcd f4c54@f4c4f f4c56@f4c51 f4c58@f4c50 f4c5b@p? f4c5d@make-no-infinities-violation f4c5f@no-infinities-violation? f4c61@&no-infinities-rtd f4c63@&no-infinities-rcd f4c69@f4c64 f4c6b@f4c66 f4c6d@f4c65 f4c70@p? f4c72@make-no-nans-violation f4c74@no-nans-violation? f4c76@&no-nans-rtd f4c78@&no-nans-rcd) (begin (set! f49ba@f49b5 (make-record-type-descriptor '&condition '#f 'f49b8 '#f '#f '#())) (set! f49bc@f49b7 '#f) (set! f49be@f49b6 (make-record-constructor-descriptor f49ba@f49b5 '#f f49bc@f49b7)) (set! f49c1@&condition? (record-predicate f49ba@f49b5)) (set! f49c3@make-&condition (record-constructor f49be@f49b6)) (set! f49c5@&condition-rtd f49ba@f49b5) (set! f49c7@&condition-rcd f49be@f49b6) (set! f4a13@f4a0e (make-record-type-descriptor '&message f49ba@f49b5 'f4a11 '#f '#f '#((immutable message)))) (set! f4a15@f4a10 '#f) (set! f4a17@f4a0f (make-record-constructor-descriptor f4a13@f4a0e f49be@f49b6 f4a15@f4a10)) (set! f4a1a@p? (record-predicate f4a13@f4a0e)) (set! f4a1c@make-message-condition (record-constructor f4a17@f4a0f)) (set! f4a1e@f4a0d (record-accessor f4a13@f4a0e '0)) (set! f4a20@message-condition? (condition-predicate f4a13@f4a0e)) (set! f4a22@condition-message (condition-accessor f4a13@f4a0e f4a1e@f4a0d)) (set! f4a24@&message-rtd f4a13@f4a0e) (set! f4a26@&message-rcd f4a17@f4a0f) (set! f4a2c@f4a27 (make-record-type-descriptor '&warning f49ba@f49b5 'f4a2a '#f '#f '#())) (set! f4a2e@f4a29 '#f) (set! f4a30@f4a28 (make-record-constructor-descriptor f4a2c@f4a27 f49be@f49b6 f4a2e@f4a29)) (set! f4a33@p? (record-predicate f4a2c@f4a27)) (set! f4a35@make-warning (record-constructor f4a30@f4a28)) (set! f4a37@warning? (condition-predicate f4a2c@f4a27)) (set! f4a39@&warning-rtd f4a2c@f4a27) (set! f4a3b@&warning-rcd f4a30@f4a28) (set! f4a41@f4a3c (make-record-type-descriptor '&serious f49ba@f49b5 'f4a3f '#f '#f '#())) (set! f4a43@f4a3e '#f) (set! f4a45@f4a3d (make-record-constructor-descriptor f4a41@f4a3c f49be@f49b6 f4a43@f4a3e)) (set! f4a48@p? (record-predicate f4a41@f4a3c)) (set! f4a4a@make-serious-condition (record-constructor f4a45@f4a3d)) (set! f4a4c@serious-condition? (condition-predicate f4a41@f4a3c)) (set! f4a4e@&serious-rtd f4a41@f4a3c) (set! f4a50@&serious-rcd f4a45@f4a3d) (set! f4a56@f4a51 (make-record-type-descriptor '&error f4a41@f4a3c 'f4a54 '#f '#f '#())) (set! f4a58@f4a53 '#f) (set! f4a5a@f4a52 (make-record-constructor-descriptor f4a56@f4a51 f4a45@f4a3d f4a58@f4a53)) (set! f4a5d@p? (record-predicate f4a56@f4a51)) (set! f4a5f@make-error (record-constructor f4a5a@f4a52)) (set! f4a61@error? (condition-predicate f4a56@f4a51)) (set! f4a63@&error-rtd f4a56@f4a51) (set! f4a65@&error-rcd f4a5a@f4a52) (set! f4a6b@f4a66 (make-record-type-descriptor '&violation f4a41@f4a3c 'f4a69 '#f '#f '#())) (set! f4a6d@f4a68 '#f) (set! f4a6f@f4a67 (make-record-constructor-descriptor f4a6b@f4a66 f4a45@f4a3d f4a6d@f4a68)) (set! f4a72@p? (record-predicate f4a6b@f4a66)) (set! f4a74@make-violation (record-constructor f4a6f@f4a67)) (set! f4a76@violation? (condition-predicate f4a6b@f4a66)) (set! f4a78@&violation-rtd f4a6b@f4a66) (set! f4a7a@&violation-rcd f4a6f@f4a67) (set! f4a80@f4a7b (make-record-type-descriptor '&assertion f4a6b@f4a66 'f4a7e '#f '#f '#())) (set! f4a82@f4a7d '#f) (set! f4a84@f4a7c (make-record-constructor-descriptor f4a80@f4a7b f4a6f@f4a67 f4a82@f4a7d)) (set! f4a87@p? (record-predicate f4a80@f4a7b)) (set! f4a89@make-assertion-violation (record-constructor f4a84@f4a7c)) (set! f4a8b@assertion-violation? (condition-predicate f4a80@f4a7b)) (set! f4a8d@&assertion-rtd f4a80@f4a7b) (set! f4a8f@&assertion-rcd f4a84@f4a7c) (set! f4a97@f4a92 (make-record-type-descriptor '&irritants f49ba@f49b5 'f4a95 '#f '#f '#((immutable irritants)))) (set! f4a99@f4a94 '#f) (set! f4a9b@f4a93 (make-record-constructor-descriptor f4a97@f4a92 f49be@f49b6 f4a99@f4a94)) (set! f4a9e@p? (record-predicate f4a97@f4a92)) (set! f4aa0@make-irritants-condition (record-constructor f4a9b@f4a93)) (set! f4aa2@f4a91 (record-accessor f4a97@f4a92 '0)) (set! f4aa4@irritants-condition? (condition-predicate f4a97@f4a92)) (set! f4aa6@condition-irritants (condition-accessor f4a97@f4a92 f4aa2@f4a91)) (set! f4aa8@&irritants-rtd f4a97@f4a92) (set! f4aaa@&irritants-rcd f4a9b@f4a93) (set! f4ab2@f4aad (make-record-type-descriptor '&who f49ba@f49b5 'f4ab0 '#f '#f '#((immutable who)))) (set! f4ab4@f4aaf '#f) (set! f4ab6@f4aae (make-record-constructor-descriptor f4ab2@f4aad f49be@f49b6 f4ab4@f4aaf)) (set! f4ab9@p? (record-predicate f4ab2@f4aad)) (set! f4abb@make-who-condition (record-constructor f4ab6@f4aae)) (set! f4abd@f4aac (record-accessor f4ab2@f4aad '0)) (set! f4abf@who-condition? (condition-predicate f4ab2@f4aad)) (set! f4ac1@condition-who (condition-accessor f4ab2@f4aad f4abd@f4aac)) (set! f4ac3@&who-rtd f4ab2@f4aad) (set! f4ac5@&who-rcd f4ab6@f4aae) (set! f4acb@f4ac6 (make-record-type-descriptor '&non-continuable f4a6b@f4a66 'f4ac9 '#f '#f '#())) (set! f4acd@f4ac8 '#f) (set! f4acf@f4ac7 (make-record-constructor-descriptor f4acb@f4ac6 f4a6f@f4a67 f4acd@f4ac8)) (set! f4ad2@p? (record-predicate f4acb@f4ac6)) (set! f4ad4@make-non-continuable-violation (record-constructor f4acf@f4ac7)) (set! f4ad6@non-continuable-violation? (condition-predicate f4acb@f4ac6)) (set! f4ad8@&non-continuable-rtd f4acb@f4ac6) (set! f4ada@&non-continuable-rcd f4acf@f4ac7) (set! f4ae0@f4adb (make-record-type-descriptor '&implementation-restriction f4a6b@f4a66 'f4ade '#f '#f '#())) (set! f4ae2@f4add '#f) (set! f4ae4@f4adc (make-record-constructor-descriptor f4ae0@f4adb f4a6f@f4a67 f4ae2@f4add)) (set! f4ae7@p? (record-predicate f4ae0@f4adb)) (set! f4ae9@make-implementation-restriction-violation (record-constructor f4ae4@f4adc)) (set! f4aeb@implementation-restriction-violation? (condition-predicate f4ae0@f4adb)) (set! f4aed@&implementation-restriction-rtd f4ae0@f4adb) (set! f4aef@&implementation-restriction-rcd f4ae4@f4adc) (set! f4af5@f4af0 (make-record-type-descriptor '&lexical f4a6b@f4a66 'f4af3 '#f '#f '#())) (set! f4af7@f4af2 '#f) (set! f4af9@f4af1 (make-record-constructor-descriptor f4af5@f4af0 f4a6f@f4a67 f4af7@f4af2)) (set! f4afc@p? (record-predicate f4af5@f4af0)) (set! f4afe@make-lexical-violation (record-constructor f4af9@f4af1)) (set! f4b00@lexical-violation? (condition-predicate f4af5@f4af0)) (set! f4b02@&lexical-rtd f4af5@f4af0) (set! f4b04@&lexical-rcd f4af9@f4af1) (set! f4b0e@f4b09 (make-record-type-descriptor '&syntax f4a6b@f4a66 'f4b0c '#f '#f '#((immutable form) (immutable subform)))) (set! f4b10@f4b0b '#f) (set! f4b12@f4b0a (make-record-constructor-descriptor f4b0e@f4b09 f4a6f@f4a67 f4b10@f4b0b)) (set! f4b15@p? (record-predicate f4b0e@f4b09)) (set! f4b17@make-syntax-violation (record-constructor f4b12@f4b0a)) (set! f4b19@f4b06 (record-accessor f4b0e@f4b09 '0)) (set! f4b1b@f4b08 (record-accessor f4b0e@f4b09 '1)) (set! f4b1d@syntax-violation? (condition-predicate f4b0e@f4b09)) (set! f4b1f@syntax-violation-form (condition-accessor f4b0e@f4b09 f4b19@f4b06)) (set! f4b21@syntax-violation-subform (condition-accessor f4b0e@f4b09 f4b1b@f4b08)) (set! f4b23@&syntax-rtd f4b0e@f4b09) (set! f4b25@&syntax-rcd f4b12@f4b0a) (set! f4b2b@f4b26 (make-record-type-descriptor '&undefined f4a6b@f4a66 'f4b29 '#f '#f '#())) (set! f4b2d@f4b28 '#f) (set! f4b2f@f4b27 (make-record-constructor-descriptor f4b2b@f4b26 f4a6f@f4a67 f4b2d@f4b28)) (set! f4b32@p? (record-predicate f4b2b@f4b26)) (set! f4b34@make-undefined-violation (record-constructor f4b2f@f4b27)) (set! f4b36@undefined-violation? (condition-predicate f4b2b@f4b26)) (set! f4b38@&undefined-rtd f4b2b@f4b26) (set! f4b3a@&undefined-rcd f4b2f@f4b27) (set! f4b40@f4b3b (make-record-type-descriptor '&i/o f4a56@f4a51 'f4b3e '#f '#f '#())) (set! f4b42@f4b3d '#f) (set! f4b44@f4b3c (make-record-constructor-descriptor f4b40@f4b3b f4a5a@f4a52 f4b42@f4b3d)) (set! f4b47@p? (record-predicate f4b40@f4b3b)) (set! f4b49@make-i/o-error (record-constructor f4b44@f4b3c)) (set! f4b4b@i/o-error? (condition-predicate f4b40@f4b3b)) (set! f4b4d@&i/o-rtd f4b40@f4b3b) (set! f4b4f@&i/o-rcd f4b44@f4b3c) (set! f4b55@f4b50 (make-record-type-descriptor '&i/o-read f4b40@f4b3b 'f4b53 '#f '#f '#())) (set! f4b57@f4b52 '#f) (set! f4b59@f4b51 (make-record-constructor-descriptor f4b55@f4b50 f4b44@f4b3c f4b57@f4b52)) (set! f4b5c@p? (record-predicate f4b55@f4b50)) (set! f4b5e@make-i/o-read-error (record-constructor f4b59@f4b51)) (set! f4b60@i/o-read-error? (condition-predicate f4b55@f4b50)) (set! f4b62@&i/o-read-rtd f4b55@f4b50) (set! f4b64@&i/o-read-rcd f4b59@f4b51) (set! f4b6a@f4b65 (make-record-type-descriptor '&i/o-write f4b40@f4b3b 'f4b68 '#f '#f '#())) (set! f4b6c@f4b67 '#f) (set! f4b6e@f4b66 (make-record-constructor-descriptor f4b6a@f4b65 f4b44@f4b3c f4b6c@f4b67)) (set! f4b71@p? (record-predicate f4b6a@f4b65)) (set! f4b73@make-i/o-write-error (record-constructor f4b6e@f4b66)) (set! f4b75@i/o-write-error? (condition-predicate f4b6a@f4b65)) (set! f4b77@&i/o-write-rtd f4b6a@f4b65) (set! f4b79@&i/o-write-rcd f4b6e@f4b66) (set! f4b81@f4b7c (make-record-type-descriptor '&i/o-invalid-position f4b40@f4b3b 'f4b7f '#f '#f '#((immutable position)))) (set! f4b83@f4b7e '#f) (set! f4b85@f4b7d (make-record-constructor-descriptor f4b81@f4b7c f4b44@f4b3c f4b83@f4b7e)) (set! f4b88@p? (record-predicate f4b81@f4b7c)) (set! f4b8a@make-i/o-invalid-position-error (record-constructor f4b85@f4b7d)) (set! f4b8c@f4b7b (record-accessor f4b81@f4b7c '0)) (set! f4b8e@i/o-invalid-position-error? (condition-predicate f4b81@f4b7c)) (set! f4b90@i/o-error-position (condition-accessor f4b81@f4b7c f4b8c@f4b7b)) (set! f4b92@&i/o-invalid-position-rtd f4b81@f4b7c) (set! f4b94@&i/o-invalid-position-rcd f4b85@f4b7d) (set! f4b9c@f4b97 (make-record-type-descriptor '&i/o-filename f4b40@f4b3b 'f4b9a '#f '#f '#((immutable filename)))) (set! f4b9e@f4b99 '#f) (set! f4ba0@f4b98 (make-record-constructor-descriptor f4b9c@f4b97 f4b44@f4b3c f4b9e@f4b99)) (set! f4ba3@p? (record-predicate f4b9c@f4b97)) (set! f4ba5@make-i/o-filename-error (record-constructor f4ba0@f4b98)) (set! f4ba7@f4b96 (record-accessor f4b9c@f4b97 '0)) (set! f4ba9@i/o-filename-error? (condition-predicate f4b9c@f4b97)) (set! f4bab@i/o-error-filename (condition-accessor f4b9c@f4b97 f4ba7@f4b96)) (set! f4bad@&i/o-filename-rtd f4b9c@f4b97) (set! f4baf@&i/o-filename-rcd f4ba0@f4b98) (set! f4bb5@f4bb0 (make-record-type-descriptor '&i/o-file-protection f4b9c@f4b97 'f4bb3 '#f '#f '#())) (set! f4bb7@f4bb2 '#f) (set! f4bb9@f4bb1 (make-record-constructor-descriptor f4bb5@f4bb0 f4ba0@f4b98 f4bb7@f4bb2)) (set! f4bbc@p? (record-predicate f4bb5@f4bb0)) (set! f4bbe@make-i/o-file-protection-error (record-constructor f4bb9@f4bb1)) (set! f4bc0@i/o-file-protection-error? (condition-predicate f4bb5@f4bb0)) (set! f4bc2@&i/o-file-protection-rtd f4bb5@f4bb0) (set! f4bc4@&i/o-file-protection-rcd f4bb9@f4bb1) (set! f4bca@f4bc5 (make-record-type-descriptor '&i/o-file-is-read-only f4bb5@f4bb0 'f4bc8 '#f '#f '#())) (set! f4bcc@f4bc7 '#f) (set! f4bce@f4bc6 (make-record-constructor-descriptor f4bca@f4bc5 f4bb9@f4bb1 f4bcc@f4bc7)) (set! f4bd1@p? (record-predicate f4bca@f4bc5)) (set! f4bd3@make-i/o-file-is-read-only-error (record-constructor f4bce@f4bc6)) (set! f4bd5@i/o-file-is-read-only-error? (condition-predicate f4bca@f4bc5)) (set! f4bd7@&i/o-file-is-read-only-rtd f4bca@f4bc5) (set! f4bd9@&i/o-file-is-read-only-rcd f4bce@f4bc6) (set! f4bdf@f4bda (make-record-type-descriptor '&i/o-file-already-exists f4b9c@f4b97 'f4bdd '#f '#f '#())) (set! f4be1@f4bdc '#f) (set! f4be3@f4bdb (make-record-constructor-descriptor f4bdf@f4bda f4ba0@f4b98 f4be1@f4bdc)) (set! f4be6@p? (record-predicate f4bdf@f4bda)) (set! f4be8@make-i/o-file-already-exists-error (record-constructor f4be3@f4bdb)) (set! f4bea@i/o-file-already-exists-error? (condition-predicate f4bdf@f4bda)) (set! f4bec@&i/o-file-already-exists-rtd f4bdf@f4bda) (set! f4bee@&i/o-file-already-exists-rcd f4be3@f4bdb) (set! f4bf4@f4bef (make-record-type-descriptor '&i/o-file-does-not-exist f4b9c@f4b97 'f4bf2 '#f '#f '#())) (set! f4bf6@f4bf1 '#f) (set! f4bf8@f4bf0 (make-record-constructor-descriptor f4bf4@f4bef f4ba0@f4b98 f4bf6@f4bf1)) (set! f4bfb@p? (record-predicate f4bf4@f4bef)) (set! f4bfd@make-i/o-file-does-not-exist-error (record-constructor f4bf8@f4bf0)) (set! f4bff@i/o-file-does-not-exist-error? (condition-predicate f4bf4@f4bef)) (set! f4c01@&i/o-file-does-not-exist-rtd f4bf4@f4bef) (set! f4c03@&i/o-file-does-not-exist-rcd f4bf8@f4bf0) (set! f4c0b@f4c06 (make-record-type-descriptor '&i/o-port f4b40@f4b3b 'f4c09 '#f '#f '#((immutable port)))) (set! f4c0d@f4c08 '#f) (set! f4c0f@f4c07 (make-record-constructor-descriptor f4c0b@f4c06 f4b44@f4b3c f4c0d@f4c08)) (set! f4c12@p? (record-predicate f4c0b@f4c06)) (set! f4c14@make-i/o-port-error (record-constructor f4c0f@f4c07)) (set! f4c16@f4c05 (record-accessor f4c0b@f4c06 '0)) (set! f4c18@i/o-port-error? (condition-predicate f4c0b@f4c06)) (set! f4c1a@i/o-error-port (condition-accessor f4c0b@f4c06 f4c16@f4c05)) (set! f4c1c@&i/o-port-rtd f4c0b@f4c06) (set! f4c1e@&i/o-port-rcd f4c0f@f4c07) (set! f4c24@f4c1f (make-record-type-descriptor '&i/o-decoding f4c0b@f4c06 'f4c22 '#f '#f '#())) (set! f4c26@f4c21 '#f) (set! f4c28@f4c20 (make-record-constructor-descriptor f4c24@f4c1f f4c0f@f4c07 f4c26@f4c21)) (set! f4c2b@p? (record-predicate f4c24@f4c1f)) (set! f4c2d@make-i/o-decoding-error (record-constructor f4c28@f4c20)) (set! f4c2f@i/o-decoding-error? (condition-predicate f4c24@f4c1f)) (set! f4c31@&i/o-decoding-rtd f4c24@f4c1f) (set! f4c33@&i/o-decoding-rcd f4c28@f4c20) (set! f4c3b@f4c36 (make-record-type-descriptor '&i/o-encoding f4c0b@f4c06 'f4c39 '#f '#f '#((immutable char)))) (set! f4c3d@f4c38 '#f) (set! f4c3f@f4c37 (make-record-constructor-descriptor f4c3b@f4c36 f4c0f@f4c07 f4c3d@f4c38)) (set! f4c42@p? (record-predicate f4c3b@f4c36)) (set! f4c44@make-i/o-encoding-error (record-constructor f4c3f@f4c37)) (set! f4c46@f4c35 (record-accessor f4c3b@f4c36 '0)) (set! f4c48@i/o-encoding-error? (condition-predicate f4c3b@f4c36)) (set! f4c4a@i/o-encoding-error-char (condition-accessor f4c3b@f4c36 f4c46@f4c35)) (set! f4c4c@&i/o-encoding-rtd f4c3b@f4c36) (set! f4c4e@&i/o-encoding-rcd f4c3f@f4c37) (set! f4c54@f4c4f (make-record-type-descriptor '&no-infinities f4ae0@f4adb 'f4c52 '#f '#f '#())) (set! f4c56@f4c51 '#f) (set! f4c58@f4c50 (make-record-constructor-descriptor f4c54@f4c4f f4ae4@f4adc f4c56@f4c51)) (set! f4c5b@p? (record-predicate f4c54@f4c4f)) (set! f4c5d@make-no-infinities-violation (record-constructor f4c58@f4c50)) (set! f4c5f@no-infinities-violation? (condition-predicate f4c54@f4c4f)) (set! f4c61@&no-infinities-rtd f4c54@f4c4f) (set! f4c63@&no-infinities-rcd f4c58@f4c50) (set! f4c69@f4c64 (make-record-type-descriptor '&no-nans f4ae0@f4adb 'f4c67 '#f '#f '#())) (set! f4c6b@f4c66 '#f) (set! f4c6d@f4c65 (make-record-constructor-descriptor f4c69@f4c64 f4ae4@f4adc f4c6b@f4c66)) (set! f4c70@p? (record-predicate f4c69@f4c64)) (set! f4c72@make-no-nans-violation (record-constructor f4c6d@f4c65)) (set! f4c74@no-nans-violation? (condition-predicate f4c69@f4c64)) (set! f4c76@&no-nans-rtd f4c69@f4c64) (set! f4c78@&no-nans-rcd f4c6d@f4c65) (begin (set! f4d69@f4c78@&no-nans-rcd f4c78@&no-nans-rcd) (set! f4d68@f4c76@&no-nans-rtd f4c76@&no-nans-rtd) (set! f4d67@f4c74@no-nans-violation? f4c74@no-nans-violation?) (set! f4d66@f4c72@make-no-nans-violation f4c72@make-no-nans-violation) (set! f4d65@f4c70@p? f4c70@p?) (set! f4d64@f4c6d@f4c65 f4c6d@f4c65) (set! f4d63@f4c6b@f4c66 f4c6b@f4c66) (set! f4d62@f4c69@f4c64 f4c69@f4c64) (set! f4d61@f4c63@&no-infinities-rcd f4c63@&no-infinities-rcd) (set! f4d60@f4c61@&no-infinities-rtd f4c61@&no-infinities-rtd) (set! f4d5f@f4c5f@no-infinities-violation? f4c5f@no-infinities-violation?) (set! f4d5e@f4c5d@make-no-infinities-violation f4c5d@make-no-infinities-violation) (set! f4d5d@f4c5b@p? f4c5b@p?) (set! f4d5c@f4c58@f4c50 f4c58@f4c50) (set! f4d5b@f4c56@f4c51 f4c56@f4c51) (set! f4d5a@f4c54@f4c4f f4c54@f4c4f) (set! f4d59@f4c4e@&i/o-encoding-rcd f4c4e@&i/o-encoding-rcd) (set! f4d58@f4c4c@&i/o-encoding-rtd f4c4c@&i/o-encoding-rtd) (set! f4d57@f4c4a@i/o-encoding-error-char f4c4a@i/o-encoding-error-char) (set! f4d56@f4c48@i/o-encoding-error? f4c48@i/o-encoding-error?) (set! f4d55@f4c46@f4c35 f4c46@f4c35) (set! f4d54@f4c44@make-i/o-encoding-error f4c44@make-i/o-encoding-error) (set! f4d53@f4c42@p? f4c42@p?) (set! f4d52@f4c3f@f4c37 f4c3f@f4c37) (set! f4d51@f4c3d@f4c38 f4c3d@f4c38) (set! f4d50@f4c3b@f4c36 f4c3b@f4c36) (set! f4d4f@f4c33@&i/o-decoding-rcd f4c33@&i/o-decoding-rcd) (set! f4d4e@f4c31@&i/o-decoding-rtd f4c31@&i/o-decoding-rtd) (set! f4d4d@f4c2f@i/o-decoding-error? f4c2f@i/o-decoding-error?) (set! f4d4c@f4c2d@make-i/o-decoding-error f4c2d@make-i/o-decoding-error) (set! f4d4b@f4c2b@p? f4c2b@p?) (set! f4d4a@f4c28@f4c20 f4c28@f4c20) (set! f4d49@f4c26@f4c21 f4c26@f4c21) (set! f4d48@f4c24@f4c1f f4c24@f4c1f) (set! f4d47@f4c1e@&i/o-port-rcd f4c1e@&i/o-port-rcd) (set! f4d46@f4c1c@&i/o-port-rtd f4c1c@&i/o-port-rtd) (set! f4d45@f4c1a@i/o-error-port f4c1a@i/o-error-port) (set! f4d44@f4c18@i/o-port-error? f4c18@i/o-port-error?) (set! f4d43@f4c16@f4c05 f4c16@f4c05) (set! f4d42@f4c14@make-i/o-port-error f4c14@make-i/o-port-error) (set! f4d41@f4c12@p? f4c12@p?) (set! f4d40@f4c0f@f4c07 f4c0f@f4c07) (set! f4d3f@f4c0d@f4c08 f4c0d@f4c08) (set! f4d3e@f4c0b@f4c06 f4c0b@f4c06) (set! f4d3d@f4c03@&i/o-file-does-not-exist-rcd f4c03@&i/o-file-does-not-exist-rcd) (set! f4d3c@f4c01@&i/o-file-does-not-exist-rtd f4c01@&i/o-file-does-not-exist-rtd) (set! f4d3b@f4bff@i/o-file-does-not-exist-error? f4bff@i/o-file-does-not-exist-error?) (set! f4d3a@f4bfd@make-i/o-file-does-not-exist-error f4bfd@make-i/o-file-does-not-exist-error) (set! f4d39@f4bfb@p? f4bfb@p?) (set! f4d38@f4bf8@f4bf0 f4bf8@f4bf0) (set! f4d37@f4bf6@f4bf1 f4bf6@f4bf1) (set! f4d36@f4bf4@f4bef f4bf4@f4bef) (set! f4d35@f4bee@&i/o-file-already-exists-rcd f4bee@&i/o-file-already-exists-rcd) (set! f4d34@f4bec@&i/o-file-already-exists-rtd f4bec@&i/o-file-already-exists-rtd) (set! f4d33@f4bea@i/o-file-already-exists-error? f4bea@i/o-file-already-exists-error?) (set! f4d32@f4be8@make-i/o-file-already-exists-error f4be8@make-i/o-file-already-exists-error) (set! f4d31@f4be6@p? f4be6@p?) (set! f4d30@f4be3@f4bdb f4be3@f4bdb) (set! f4d2f@f4be1@f4bdc f4be1@f4bdc) (set! f4d2e@f4bdf@f4bda f4bdf@f4bda) (set! f4d2d@f4bd9@&i/o-file-is-read-only-rcd f4bd9@&i/o-file-is-read-only-rcd) (set! f4d2c@f4bd7@&i/o-file-is-read-only-rtd f4bd7@&i/o-file-is-read-only-rtd) (set! f4d2b@f4bd5@i/o-file-is-read-only-error? f4bd5@i/o-file-is-read-only-error?) (set! f4d2a@f4bd3@make-i/o-file-is-read-only-error f4bd3@make-i/o-file-is-read-only-error) (set! f4d29@f4bd1@p? f4bd1@p?) (set! f4d28@f4bce@f4bc6 f4bce@f4bc6) (set! f4d27@f4bcc@f4bc7 f4bcc@f4bc7) (set! f4d26@f4bca@f4bc5 f4bca@f4bc5) (set! f4d25@f4bc4@&i/o-file-protection-rcd f4bc4@&i/o-file-protection-rcd) (set! f4d24@f4bc2@&i/o-file-protection-rtd f4bc2@&i/o-file-protection-rtd) (set! f4d23@f4bc0@i/o-file-protection-error? f4bc0@i/o-file-protection-error?) (set! f4d22@f4bbe@make-i/o-file-protection-error f4bbe@make-i/o-file-protection-error) (set! f4d21@f4bbc@p? f4bbc@p?) (set! f4d20@f4bb9@f4bb1 f4bb9@f4bb1) (set! f4d1f@f4bb7@f4bb2 f4bb7@f4bb2) (set! f4d1e@f4bb5@f4bb0 f4bb5@f4bb0) (set! f4d1d@f4baf@&i/o-filename-rcd f4baf@&i/o-filename-rcd) (set! f4d1c@f4bad@&i/o-filename-rtd f4bad@&i/o-filename-rtd) (set! f4d1b@f4bab@i/o-error-filename f4bab@i/o-error-filename) (set! f4d1a@f4ba9@i/o-filename-error? f4ba9@i/o-filename-error?) (set! f4d19@f4ba7@f4b96 f4ba7@f4b96) (set! f4d18@f4ba5@make-i/o-filename-error f4ba5@make-i/o-filename-error) (set! f4d17@f4ba3@p? f4ba3@p?) (set! f4d16@f4ba0@f4b98 f4ba0@f4b98) (set! f4d15@f4b9e@f4b99 f4b9e@f4b99) (set! f4d14@f4b9c@f4b97 f4b9c@f4b97) (set! f4d13@f4b94@&i/o-invalid-position-rcd f4b94@&i/o-invalid-position-rcd) (set! f4d12@f4b92@&i/o-invalid-position-rtd f4b92@&i/o-invalid-position-rtd) (set! f4d11@f4b90@i/o-error-position f4b90@i/o-error-position) (set! f4d10@f4b8e@i/o-invalid-position-error? f4b8e@i/o-invalid-position-error?) (set! f4d0f@f4b8c@f4b7b f4b8c@f4b7b) (set! f4d0e@f4b8a@make-i/o-invalid-position-error f4b8a@make-i/o-invalid-position-error) (set! f4d0d@f4b88@p? f4b88@p?) (set! f4d0c@f4b85@f4b7d f4b85@f4b7d) (set! f4d0b@f4b83@f4b7e f4b83@f4b7e) (set! f4d0a@f4b81@f4b7c f4b81@f4b7c) (set! f4d09@f4b79@&i/o-write-rcd f4b79@&i/o-write-rcd) (set! f4d08@f4b77@&i/o-write-rtd f4b77@&i/o-write-rtd) (set! f4d07@f4b75@i/o-write-error? f4b75@i/o-write-error?) (set! f4d06@f4b73@make-i/o-write-error f4b73@make-i/o-write-error) (set! f4d05@f4b71@p? f4b71@p?) (set! f4d04@f4b6e@f4b66 f4b6e@f4b66) (set! f4d03@f4b6c@f4b67 f4b6c@f4b67) (set! f4d02@f4b6a@f4b65 f4b6a@f4b65) (set! f4d01@f4b64@&i/o-read-rcd f4b64@&i/o-read-rcd) (set! f4d00@f4b62@&i/o-read-rtd f4b62@&i/o-read-rtd) (set! f4cff@f4b60@i/o-read-error? f4b60@i/o-read-error?) (set! f4cfe@f4b5e@make-i/o-read-error f4b5e@make-i/o-read-error) (set! f4cfd@f4b5c@p? f4b5c@p?) (set! f4cfc@f4b59@f4b51 f4b59@f4b51) (set! f4cfb@f4b57@f4b52 f4b57@f4b52) (set! f4cfa@f4b55@f4b50 f4b55@f4b50) (set! f4cf9@f4b4f@&i/o-rcd f4b4f@&i/o-rcd) (set! f4cf8@f4b4d@&i/o-rtd f4b4d@&i/o-rtd) (set! f4cf7@f4b4b@i/o-error? f4b4b@i/o-error?) (set! f4cf6@f4b49@make-i/o-error f4b49@make-i/o-error) (set! f4cf5@f4b47@p? f4b47@p?) (set! f4cf4@f4b44@f4b3c f4b44@f4b3c) (set! f4cf3@f4b42@f4b3d f4b42@f4b3d) (set! f4cf2@f4b40@f4b3b f4b40@f4b3b) (set! f4cf1@f4b3a@&undefined-rcd f4b3a@&undefined-rcd) (set! f4cf0@f4b38@&undefined-rtd f4b38@&undefined-rtd) (set! f4cef@f4b36@undefined-violation? f4b36@undefined-violation?) (set! f4cee@f4b34@make-undefined-violation f4b34@make-undefined-violation) (set! f4ced@f4b32@p? f4b32@p?) (set! f4cec@f4b2f@f4b27 f4b2f@f4b27) (set! f4ceb@f4b2d@f4b28 f4b2d@f4b28) (set! f4cea@f4b2b@f4b26 f4b2b@f4b26) (set! f4ce9@f4b25@&syntax-rcd f4b25@&syntax-rcd) (set! f4ce8@f4b23@&syntax-rtd f4b23@&syntax-rtd) (set! f4ce7@f4b21@syntax-violation-subform f4b21@syntax-violation-subform) (set! f4ce6@f4b1f@syntax-violation-form f4b1f@syntax-violation-form) (set! f4ce5@f4b1d@syntax-violation? f4b1d@syntax-violation?) (set! f4ce4@f4b1b@f4b08 f4b1b@f4b08) (set! f4ce3@f4b19@f4b06 f4b19@f4b06) (set! f4ce2@f4b17@make-syntax-violation f4b17@make-syntax-violation) (set! f4ce1@f4b15@p? f4b15@p?) (set! f4ce0@f4b12@f4b0a f4b12@f4b0a) (set! f4cdf@f4b10@f4b0b f4b10@f4b0b) (set! f4cde@f4b0e@f4b09 f4b0e@f4b09) (set! f4cdd@f4b04@&lexical-rcd f4b04@&lexical-rcd) (set! f4cdc@f4b02@&lexical-rtd f4b02@&lexical-rtd) (set! f4cdb@f4b00@lexical-violation? f4b00@lexical-violation?) (set! f4cda@f4afe@make-lexical-violation f4afe@make-lexical-violation) (set! f4cd9@f4afc@p? f4afc@p?) (set! f4cd8@f4af9@f4af1 f4af9@f4af1) (set! f4cd7@f4af7@f4af2 f4af7@f4af2) (set! f4cd6@f4af5@f4af0 f4af5@f4af0) (set! f4cd5@f4aef@&implementation-restriction-rcd f4aef@&implementation-restriction-rcd) (set! f4cd4@f4aed@&implementation-restriction-rtd f4aed@&implementation-restriction-rtd) (set! f4cd3@f4aeb@implementation-restriction-violation? f4aeb@implementation-restriction-violation?) (set! f4cd2@f4ae9@make-implementation-restriction-violation f4ae9@make-implementation-restriction-violation) (set! f4cd1@f4ae7@p? f4ae7@p?) (set! f4cd0@f4ae4@f4adc f4ae4@f4adc) (set! f4ccf@f4ae2@f4add f4ae2@f4add) (set! f4cce@f4ae0@f4adb f4ae0@f4adb) (set! f4ccd@f4ada@&non-continuable-rcd f4ada@&non-continuable-rcd) (set! f4ccc@f4ad8@&non-continuable-rtd f4ad8@&non-continuable-rtd) (set! f4ccb@f4ad6@non-continuable-violation? f4ad6@non-continuable-violation?) (set! f4cca@f4ad4@make-non-continuable-violation f4ad4@make-non-continuable-violation) (set! f4cc9@f4ad2@p? f4ad2@p?) (set! f4cc8@f4acf@f4ac7 f4acf@f4ac7) (set! f4cc7@f4acd@f4ac8 f4acd@f4ac8) (set! f4cc6@f4acb@f4ac6 f4acb@f4ac6) (set! f4cc5@f4ac5@&who-rcd f4ac5@&who-rcd) (set! f4cc4@f4ac3@&who-rtd f4ac3@&who-rtd) (set! f4cc3@f4ac1@condition-who f4ac1@condition-who) (set! f4cc2@f4abf@who-condition? f4abf@who-condition?) (set! f4cc1@f4abd@f4aac f4abd@f4aac) (set! f4cc0@f4abb@make-who-condition f4abb@make-who-condition) (set! f4cbf@f4ab9@p? f4ab9@p?) (set! f4cbe@f4ab6@f4aae f4ab6@f4aae) (set! f4cbd@f4ab4@f4aaf f4ab4@f4aaf) (set! f4cbc@f4ab2@f4aad f4ab2@f4aad) (set! f4cbb@f4aaa@&irritants-rcd f4aaa@&irritants-rcd) (set! f4cba@f4aa8@&irritants-rtd f4aa8@&irritants-rtd) (set! f4cb9@f4aa6@condition-irritants f4aa6@condition-irritants) (set! f4cb8@f4aa4@irritants-condition? f4aa4@irritants-condition?) (set! f4cb7@f4aa2@f4a91 f4aa2@f4a91) (set! f4cb6@f4aa0@make-irritants-condition f4aa0@make-irritants-condition) (set! f4cb5@f4a9e@p? f4a9e@p?) (set! f4cb4@f4a9b@f4a93 f4a9b@f4a93) (set! f4cb3@f4a99@f4a94 f4a99@f4a94) (set! f4cb2@f4a97@f4a92 f4a97@f4a92) (set! f4cb1@f4a8f@&assertion-rcd f4a8f@&assertion-rcd) (set! f4cb0@f4a8d@&assertion-rtd f4a8d@&assertion-rtd) (set! f4caf@f4a8b@assertion-violation? f4a8b@assertion-violation?) (set! f4cae@f4a89@make-assertion-violation f4a89@make-assertion-violation) (set! f4cad@f4a87@p? f4a87@p?) (set! f4cac@f4a84@f4a7c f4a84@f4a7c) (set! f4cab@f4a82@f4a7d f4a82@f4a7d) (set! f4caa@f4a80@f4a7b f4a80@f4a7b) (set! f4ca9@f4a7a@&violation-rcd f4a7a@&violation-rcd) (set! f4ca8@f4a78@&violation-rtd f4a78@&violation-rtd) (set! f4ca7@f4a76@violation? f4a76@violation?) (set! f4ca6@f4a74@make-violation f4a74@make-violation) (set! f4ca5@f4a72@p? f4a72@p?) (set! f4ca4@f4a6f@f4a67 f4a6f@f4a67) (set! f4ca3@f4a6d@f4a68 f4a6d@f4a68) (set! f4ca2@f4a6b@f4a66 f4a6b@f4a66) (set! f4ca1@f4a65@&error-rcd f4a65@&error-rcd) (set! f4ca0@f4a63@&error-rtd f4a63@&error-rtd) (set! f4c9f@f4a61@error? f4a61@error?) (set! f4c9e@f4a5f@make-error f4a5f@make-error) (set! f4c9d@f4a5d@p? f4a5d@p?) (set! f4c9c@f4a5a@f4a52 f4a5a@f4a52) (set! f4c9b@f4a58@f4a53 f4a58@f4a53) (set! f4c9a@f4a56@f4a51 f4a56@f4a51) (set! f4c99@f4a50@&serious-rcd f4a50@&serious-rcd) (set! f4c98@f4a4e@&serious-rtd f4a4e@&serious-rtd) (set! f4c97@f4a4c@serious-condition? f4a4c@serious-condition?) (set! f4c96@f4a4a@make-serious-condition f4a4a@make-serious-condition) (set! f4c95@f4a48@p? f4a48@p?) (set! f4c94@f4a45@f4a3d f4a45@f4a3d) (set! f4c93@f4a43@f4a3e f4a43@f4a3e) (set! f4c92@f4a41@f4a3c f4a41@f4a3c) (set! f4c91@f4a3b@&warning-rcd f4a3b@&warning-rcd) (set! f4c90@f4a39@&warning-rtd f4a39@&warning-rtd) (set! f4c8f@f4a37@warning? f4a37@warning?) (set! f4c8e@f4a35@make-warning f4a35@make-warning) (set! f4c8d@f4a33@p? f4a33@p?) (set! f4c8c@f4a30@f4a28 f4a30@f4a28) (set! f4c8b@f4a2e@f4a29 f4a2e@f4a29) (set! f4c8a@f4a2c@f4a27 f4a2c@f4a27) (set! f4c89@f4a26@&message-rcd f4a26@&message-rcd) (set! f4c88@f4a24@&message-rtd f4a24@&message-rtd) (set! f4c87@f4a22@condition-message f4a22@condition-message) (set! f4c86@f4a20@message-condition? f4a20@message-condition?) (set! f4c85@f4a1e@f4a0d f4a1e@f4a0d) (set! f4c84@f4a1c@make-message-condition f4a1c@make-message-condition) (set! f4c83@f4a1a@p? f4a1a@p?) (set! f4c82@f4a17@f4a0f f4a17@f4a0f) (set! f4c81@f4a15@f4a10 f4a15@f4a10) (set! f4c80@f4a13@f4a0e f4a13@f4a0e) (set! f4c7f@f49c7@&condition-rcd f49c7@&condition-rcd) (set! f4c7e@f49c5@&condition-rtd f49c5@&condition-rtd) (set! f4c7d@f49c3@make-&condition f49c3@make-&condition) (set! f4c7c@f49c1@&condition? f49c1@&condition?) (set! f4c7b@f49be@f49b6 f49be@f49b6) (set! f4c7a@f49bc@f49b7 f49bc@f49b7) (set! f4c79@f49ba@f49b5 f49ba@f49b5)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (f28b8@f286d@current-primitive-locations (lambda (f51a8@x) ((lambda (f51aa@t) (if f51aa@t (cdr f51aa@t) '#f)) (assq f51a8@x '((&no-nans-rcd . f4d69@f4c78@&no-nans-rcd) (&no-nans-rtd . f4d68@f4c76@&no-nans-rtd) (&no-infinities-rcd . f4d61@f4c63@&no-infinities-rcd) (&no-infinities-rtd . f4d60@f4c61@&no-infinities-rtd) (&i/o-encoding-rcd . f4d59@f4c4e@&i/o-encoding-rcd) (&i/o-encoding-rtd . f4d58@f4c4c@&i/o-encoding-rtd) (&i/o-decoding-rcd . f4d4f@f4c33@&i/o-decoding-rcd) (&i/o-decoding-rtd . f4d4e@f4c31@&i/o-decoding-rtd) (&i/o-port-rcd . f4d47@f4c1e@&i/o-port-rcd) (&i/o-port-rtd . f4d46@f4c1c@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . f4d3d@f4c03@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . f4d3c@f4c01@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . f4d35@f4bee@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . f4d34@f4bec@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . f4d2d@f4bd9@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . f4d2c@f4bd7@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . f4d25@f4bc4@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . f4d24@f4bc2@&i/o-file-protection-rtd) (&i/o-filename-rcd . f4d1d@f4baf@&i/o-filename-rcd) (&i/o-filename-rtd . f4d1c@f4bad@&i/o-filename-rtd) (&i/o-invalid-position-rcd . f4d13@f4b94@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . f4d12@f4b92@&i/o-invalid-position-rtd) (&i/o-write-rcd . f4d09@f4b79@&i/o-write-rcd) (&i/o-write-rtd . f4d08@f4b77@&i/o-write-rtd) (&i/o-read-rcd . f4d01@f4b64@&i/o-read-rcd) (&i/o-read-rtd . f4d00@f4b62@&i/o-read-rtd) (&i/o-rcd . f4cf9@f4b4f@&i/o-rcd) (&i/o-rtd . f4cf8@f4b4d@&i/o-rtd) (&undefined-rcd . f4cf1@f4b3a@&undefined-rcd) (&undefined-rtd . f4cf0@f4b38@&undefined-rtd) (&syntax-rcd . f4ce9@f4b25@&syntax-rcd) (&syntax-rtd . f4ce8@f4b23@&syntax-rtd) (&lexical-rcd . f4cdd@f4b04@&lexical-rcd) (&lexical-rtd . f4cdc@f4b02@&lexical-rtd) (&implementation-restriction-rcd . f4cd5@f4aef@&implementation-restriction-rcd) (&implementation-restriction-rtd . f4cd4@f4aed@&implementation-restriction-rtd) (&non-continuable-rcd . f4ccd@f4ada@&non-continuable-rcd) (&non-continuable-rtd . f4ccc@f4ad8@&non-continuable-rtd) (&who-rcd . f4cc5@f4ac5@&who-rcd) (&who-rtd . f4cc4@f4ac3@&who-rtd) (&irritants-rcd . f4cbb@f4aaa@&irritants-rcd) (&irritants-rtd . f4cba@f4aa8@&irritants-rtd) (&assertion-rcd . f4cb1@f4a8f@&assertion-rcd) (&assertion-rtd . f4cb0@f4a8d@&assertion-rtd) (&violation-rcd . f4ca9@f4a7a@&violation-rcd) (&violation-rtd . f4ca8@f4a78@&violation-rtd) (&error-rcd . f4ca1@f4a65@&error-rcd) (&error-rtd . f4ca0@f4a63@&error-rtd) (&serious-rcd . f4c99@f4a50@&serious-rcd) (&serious-rtd . f4c98@f4a4e@&serious-rtd) (&warning-rcd . f4c91@f4a3b@&warning-rcd) (&warning-rtd . f4c90@f4a39@&warning-rtd) (&message-rcd . f4c89@f4a26@&message-rcd) (&message-rtd . f4c88@f4a24@&message-rtd) (&condition-rcd . f4c7f@f49c7@&condition-rcd) (&condition-rtd . f4c7e@f49c5@&condition-rtd) (syntax-error . f49a7@f2fad@syntax-error) (syntax-dispatch . f493c@f2ec8@syntax-dispatch) (load . f4e9a@f4d85@load) (interaction-environment . f49af@f2fbd@interaction-environment) (library-path . f2acf@f295e@library-path) (make-parameter . f2867@f2791@make-parameter) (make-variable-transformer . f48fa@f2cf5@make-variable-transformer) (identifier? . f49aa@f2fb3@identifier?) (generate-temporaries . f49a0@f2f9f@generate-temporaries) (free-identifier=? . f49a1@f2fa1@free-identifier=?) (syntax->datum . f49ac@f2fb7@syntax->datum) (datum->syntax . f49ab@f2fb5@datum->syntax) (bound-identifier=? . f49a2@f2fa3@bound-identifier=?) (make-i/o-write-error . f4d06@f4b73@make-i/o-write-error) (make-i/o-read-error . f4cfe@f4b5e@make-i/o-read-error) (make-i/o-port-error . f4d42@f4c14@make-i/o-port-error) (make-i/o-invalid-position-error . f4d0e@f4b8a@make-i/o-invalid-position-error) (make-i/o-filename-error . f4d18@f4ba5@make-i/o-filename-error) (make-i/o-file-protection-error . f4d22@f4bbe@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . f4d2a@f4bd3@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . f4d3a@f4bfd@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . f4d32@f4be8@make-i/o-file-already-exists-error) (make-i/o-error . f4cf6@f4b49@make-i/o-error) (make-i/o-encoding-error . f4d54@f4c44@make-i/o-encoding-error) (make-i/o-decoding-error . f4d4c@f4c2d@make-i/o-decoding-error) (i/o-write-error? . f4d07@f4b75@i/o-write-error?) (i/o-read-error? . f4cff@f4b60@i/o-read-error?) (i/o-port-error? . f4d44@f4c18@i/o-port-error?) (i/o-invalid-position-error? . f4d10@f4b8e@i/o-invalid-position-error?) (i/o-filename-error? . f4d1a@f4ba9@i/o-filename-error?) (i/o-file-protection-error? . f4d23@f4bc0@i/o-file-protection-error?) (i/o-file-is-read-only-error? . f4d2b@f4bd5@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . f4d3b@f4bff@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . f4d33@f4bea@i/o-file-already-exists-error?) (i/o-error? . f4cf7@f4b4b@i/o-error?) (i/o-error-position . f4d11@f4b90@i/o-error-position) (i/o-error-port . f4d45@f4c1a@i/o-error-port) (i/o-error-filename . f4d1b@f4bab@i/o-error-filename) (i/o-encoding-error? . f4d56@f4c48@i/o-encoding-error?) (i/o-encoding-error-char . f4d57@f4c4a@i/o-encoding-error-char) (i/o-decoding-error? . f4d4d@f4c2f@i/o-decoding-error?) (scheme-report-environment . f4997@f2f8d@scheme-report-environment) (null-environment . f4996@f2f8b@null-environment) (command-line . f4e97@f4d7f@command-line) (eval . f4999@f2f91@eval) (environment . f4995@f2f89@environment) (who-condition? . f4cc2@f4abf@who-condition?) (warning? . f4c8f@f4a37@warning?) (violation? . f4ca7@f4a76@violation?) (undefined-violation? . f4cef@f4b36@undefined-violation?) (syntax-violation? . f4ce5@f4b1d@syntax-violation?) (syntax-violation-subform . f4ce7@f4b21@syntax-violation-subform) (syntax-violation-form . f4ce6@f4b1f@syntax-violation-form) (syntax-violation . f49a9@f2fb1@syntax-violation) (serious-condition? . f4c97@f4a4c@serious-condition?) (non-continuable-violation? . f4ccb@f4ad6@non-continuable-violation?) (message-condition? . f4c86@f4a20@message-condition?) (make-who-condition . f4cc0@f4abb@make-who-condition) (make-warning . f4c8e@f4a35@make-warning) (make-violation . f4ca6@f4a74@make-violation) (make-undefined-violation . f4cee@f4b34@make-undefined-violation) (make-syntax-violation . f4ce2@f4b17@make-syntax-violation) (make-serious-condition . f4c96@f4a4a@make-serious-condition) (make-non-continuable-violation . f4cca@f4ad4@make-non-continuable-violation) (make-message-condition . f4c84@f4a1c@make-message-condition) (make-lexical-violation . f4cda@f4afe@make-lexical-violation) (make-irritants-condition . f4cb6@f4aa0@make-irritants-condition) (make-implementation-restriction-violation . f4cd2@f4ae9@make-implementation-restriction-violation) (make-error . f4c9e@f4a5f@make-error) (make-assertion-violation . f4cae@f4a89@make-assertion-violation) (lexical-violation? . f4cdb@f4b00@lexical-violation?) (irritants-condition? . f4cb8@f4aa4@irritants-condition?) (implementation-restriction-violation? . f4cd3@f4aeb@implementation-restriction-violation?) (error? . f4c9f@f4a61@error?) (condition-who . f4cc3@f4ac1@condition-who) (condition-message . f4c87@f4a22@condition-message) (condition-irritants . f4cb9@f4aa6@condition-irritants) (assertion-violation? . f4caf@f4a8b@assertion-violation?) (no-nans-violation? . f4d67@f4c74@no-nans-violation?) (no-infinities-violation? . f4d5f@f4c5f@no-infinities-violation?) (make-no-nans-violation . f4d66@f4c72@make-no-nans-violation) (make-no-infinities-violation . f4d5e@f4c5d@make-no-infinities-violation) (assertion-error . f49a6@f2fab@assertion-error)))))) (f2adf@f297e@install-library 'f5185 '(mosh interaction) '() '() '() '() '((regexp? . f517d) (alist->eq-hash-table . f517a) (format . f5177) (string-split . f516c) (call-process . f5166) (set-current-directory! . f5162) (expand-path . f5161) (current-directory . f5160) (%spawn . f515f) (%waitpid . f515e) (%ffi-supported? . f515d) (%ffi-pointer-ref . f515c) (%ffi-pointer->string . f515b) (%ffi-call->string-or-zero . f515a) (%ffi-call->double . f5159) (%ffi-call->void* . f5158) (%ffi-call->void . f5157) (%ffi-call->int . f5156) (%ffi-lookup . f5155) (%ffi-open . f5154) (%fork . f5153) (%pipe . f5152) (p . f5151) (whereis . f5149) (register . f5148) (vm-join! . f5147) (vm-set-value! . f5146) (vm? . f5145) (main-vm? . f5144) (vm-self . f5143) (vm-start! . f5142) (make-vm . f5141) (mutex-try-lock! . f5140) (mutex-unlock! . f513f) (mutex-lock! . f513e) (mutex? . f513d) (make-mutex . f513c) (condition-variable-notify-all! . f513b) (condition-variable-notify! . f513a) (condition-variable-wait! . f5139) (make-condition-variable . f5138) (string-upcase . f5121) (string-titlecase . f5120) (string-normalize-nfkd . f511f) (string-normalize-nfkc . f511e) (string-normalize-nfd . f511d) (string-normalize-nfc . f511c) (string-foldcase . f511b) (string-downcase . f511a) (string-ci>? . f5119) (string-ci>=? . f5118) (string-ci=? . f5117) (string-ci<? . f5116) (string-ci<=? . f5115) (char-whitespace? . f5114) (char-upper-case? . f5113) (char-title-case? . f5112) (char-numeric? . f5111) (char-lower-case? . f5110) (char-general-category . f510f) (char-upcase . f510e) (char-titlecase . f510d) (char-foldcase . f510c) (char-downcase . f510b) (char-ci>? . f510a) (char-ci>=? . f5109) (char-ci=? . f5108) (char-ci<? . f5107) (char-ci<=? . f5106) (char-alphabetic? . f5105) (make-variable-transformer . f2cf4) (identifier? . f2fb2) (generate-temporaries . f2f9e) (free-identifier=? . f2fa0) (syntax->datum . f2fb6) (datum->syntax . f2fb4) (bound-identifier=? . f2fa2) (record-type-descriptor? . f5104) (record-predicate . f5103) (record-mutator . f5102) (record-constructor . f5101) (record-accessor . f5100) (make-record-type-descriptor . f50ff) (make-record-constructor-descriptor . f50fe) (record? . f50fd) (record-type-uid . f50fc) (record-type-sealed? . f50fb) (record-type-parent . f50fa) (record-type-opaque? . f50f9) (record-type-name . f50f8) (record-type-generative? . f50f7) (record-type-field-names . f50f6) (record-rtd . f50f5) (record-field-mutable? . f50f4) (delete-file . f50f3) (file-exists? . f50f2) (vector-sort! . f50f1) (vector-sort . f50f0) (list-sort . f50ef) (symbol-hash . f50ee) (string-ci-hash . f50ed) (string-hash . f50ec) (equal-hash . f50eb) (hashtable-equivalence-function . f50ea) (make-hashtable . f50e9) (hashtable-hash-function . f50e8) (make-eqv-hashtable . f50e7) (make-eq-hashtable . f50e6) (hashtable? . f50e5) (hashtable-update! . f50e4) (hashtable-size . f50e3) (hashtable-set! . f50e2) (hashtable-ref . f50e1) (hashtable-mutable? . f50e0) (hashtable-keys . f50df) (hashtable-entries . f50de) (hashtable-delete! . f50dd) (hashtable-copy . f50dc) (hashtable-contains? . f50db) (hashtable-clear! . f50da) (call-with-output-file . f50d9) (call-with-input-file . f50d8) (write-char . f50d7) (write . f50d6) (with-output-to-file . f50d5) (with-input-from-file . f50d4) (read-char . f50d3) (read . f50d2) (peek-char . f50d1) (open-output-file . f50d0) (open-input-file . f50cf) (newline . f50ce) (display . f50cd) (close-output-port . f50cc) (close-input-port . f50cb) (eof-object? . f50ca) (eof-object . f50c9) (current-error-port . f50c8) (current-output-port . f50c7) (current-input-port . f50c6) (output-port? . f50c5) (input-port? . f50c4) (utf-8-codec . f50c3) (utf-16-codec . f50c2) (transcoder-error-handling-mode . f50c1) (transcoder-eol-style . f50c0) (transcoder-codec . f50bf) (transcoded-port . f50be) (textual-port? . f50bd) (string->bytevector . f50bc) (standard-output-port . f50bb) (standard-input-port . f50ba) (standard-error-port . f50b9) (set-port-position! . f50b8) (put-u8 . f50b7) (put-string . f50b6) (put-datum . f50b5) (put-char . f50b4) (put-bytevector . f50b3) (port? . f50b2) (port-transcoder . f50b1) (port-position . f50b0) (port-has-set-port-position!? . f50af) (port-has-port-position? . f50ae) (port-eof? . f50ad) (output-port-buffer-mode . f50ac) (open-string-output-port . f50ab) (open-string-input-port . f50aa) (open-file-output-port . f50a9) (open-file-input/output-port . f50a8) (open-file-input-port . f50a7) (open-bytevector-output-port . f50a6) (open-bytevector-input-port . f50a5) (native-transcoder . f50a4) (native-eol-style . f50a3) (make-transcoder . f50a2) (latin-1-codec . f50a1) (make-i/o-write-error . f4b72) (make-i/o-read-error . f4b5d) (make-i/o-port-error . f4c13) (make-i/o-invalid-position-error . f4b89) (make-i/o-filename-error . f4ba4) (make-i/o-file-protection-error . f4bbd) (make-i/o-file-is-read-only-error . f4bd2) (make-i/o-file-does-not-exist-error . f4bfc) (make-i/o-file-already-exists-error . f4be7) (make-i/o-error . f4b48) (make-i/o-encoding-error . f4c43) (make-i/o-decoding-error . f4c2c) (make-custom-textual-output-port . f50a0) (make-custom-textual-input/output-port . f509f) (make-custom-textual-input-port . f509e) (make-custom-binary-output-port . f509d) (make-custom-binary-input/output-port . f509c) (make-custom-binary-input-port . f509b) (make-bytevector . f509a) (lookahead-u8 . f5099) (lookahead-char . f5098) (i/o-write-error? . f4b74) (i/o-read-error? . f4b5f) (i/o-port-error? . f4c17) (i/o-invalid-position-error? . f4b8d) (i/o-filename-error? . f4ba8) (i/o-file-protection-error? . f4bbf) (i/o-file-is-read-only-error? . f4bd4) (i/o-file-does-not-exist-error? . f4bfe) (i/o-file-already-exists-error? . f4be9) (i/o-error? . f4b4a) (i/o-error-position . f4b8f) (i/o-error-port . f4c19) (i/o-error-filename . f4baa) (i/o-encoding-error? . f4c47) (i/o-encoding-error-char . f4c49) (i/o-decoding-error? . f4c2e) (get-u8 . f5097) (get-string-n! . f5096) (get-string-n . f5095) (get-string-all . f5094) (get-line . f5093) (get-datum . f5092) (get-char . f5091) (get-bytevector-some . f5090) (get-bytevector-n! . f508f) (get-bytevector-n . f508e) (get-bytevector-all . f508d) (flush-output-port . f508c) (close-port . f508b) (exit . f5083) (command-line . f4d7e) (string-fill! . f5082) (string-set! . f5081) (set-cdr! . f5080) (set-car! . f507f) (remove . f507e) (remv . f507d) (remp . f507c) (remq . f507b) (partition . f507a) (memv . f5079) (memq . f5078) (memp . f5077) (member . f5076) (exists . f5075) (for-all . f5074) (fold-right . f5073) (fold-left . f5072) (find . f5071) (filter . f5070) (cons* . f506f) (assv . f506e) (assq . f506d) (assp . f506c) (assoc . f506b) (call-with-string-output-port . f506a) (call-with-port . f5069) (call-with-bytevector-output-port . f5068) (bytevector->string . f5067) (buffer-mode? . f5066) (binary-port? . f5065) (with-exception-handler . f5064) (raise-continuable . f5063) (raise . f5062) (eval . f2f90) (environment . f2f88) (make-enumeration . f5061) (enum-set=? . f5060) (enum-set-universe . f505f) (enum-set-union . f505e) (enum-set-subset? . f505d) (enum-set-projection . f505c) (enum-set-member? . f505b) (enum-set-intersection . f505a) (enum-set-indexer . f5059) (enum-set-difference . f5058) (enum-set-constructor . f5057) (enum-set-complement . f5056) (enum-set->list . f5055) (who-condition? . f4abe) (warning? . f4a36) (violation? . f4a75) (undefined-violation? . f4b35) (syntax-violation? . f4b1c) (syntax-violation-subform . f4b20) (syntax-violation-form . f4b1e) (syntax-violation . f2fb0) (simple-conditions . f5054) (serious-condition? . f4a4b) (non-continuable-violation? . f4ad5) (message-condition? . f4a1f) (make-who-condition . f4aba) (make-warning . f4a34) (make-violation . f4a73) (make-undefined-violation . f4b33) (make-syntax-violation . f4b16) (make-serious-condition . f4a49) (make-non-continuable-violation . f4ad3) (make-message-condition . f4a1b) (make-lexical-violation . f4afd) (make-irritants-condition . f4a9f) (make-implementation-restriction-violation . f4ae8) (make-error . f4a5e) (make-assertion-violation . f4a88) (lexical-violation? . f4aff) (irritants-condition? . f4aa3) (implementation-restriction-violation? . f4aea) (error? . f4a60) (condition-who . f4ac0) (condition-predicate . f5053) (condition-message . f4a21) (condition-irritants . f4aa5) (condition-accessor . f5052) (condition . f5051) (assertion-violation? . f4a8a) (condition? . f5050) (utf32->string . f504f) (utf16->string . f504e) (utf8->string . f504d) (uint-list->bytevector . f504c) (u8-list->bytevector . f504b) (string->utf8 . f504a) (string->utf32 . f5049) (string->utf16 . f5048) (sint-list->bytevector . f5047) (native-endianness . f5046) (bytevector? . f5045) (bytevector=? . f5044) (bytevector-uint-set! . f5043) (bytevector-uint-ref . f5042) (bytevector-u8-set! . f5041) (bytevector-u8-ref . f5040) (bytevector-u64-set! . f503f) (bytevector-u64-ref . f503e) (bytevector-u64-native-set! . f503d) (bytevector-u64-native-ref . f503c) (bytevector-u32-set! . f503b) (bytevector-u32-ref . f503a) (bytevector-u32-native-set! . f5039) (bytevector-u32-native-ref . f5038) (bytevector-u16-set! . f5037) (bytevector-u16-ref . f5036) (bytevector-u16-native-set! . f5035) (bytevector-u16-native-ref . f5034) (bytevector-sint-set! . f5033) (bytevector-sint-ref . f5032) (bytevector-s8-set! . f5031) (bytevector-s8-ref . f5030) (bytevector-s64-set! . f502f) (bytevector-s64-ref . f502e) (bytevector-s64-native-set! . f502d) (bytevector-s64-native-ref . f502c) (bytevector-s32-set! . f502b) (bytevector-s32-ref . f502a) (bytevector-s32-native-set! . f5029) (bytevector-s32-native-ref . f5028) (bytevector-s16-set! . f5027) (bytevector-s16-ref . f5026) (bytevector-s16-native-set! . f5025) (bytevector-s16-native-ref . f5024) (bytevector-length . f5023) (bytevector-ieee-single-ref . f5022) (bytevector-ieee-single-set! . f5021) (bytevector-ieee-single-native-set! . f5020) (bytevector-ieee-single-native-ref . f501f) (bytevector-ieee-double-set! . f501e) (bytevector-ieee-double-ref . f501d) (bytevector-ieee-double-native-set! . f501c) (bytevector-ieee-double-native-ref . f501b) (bytevector-fill! . f501a) (bytevector-copy! . f5019) (bytevector-copy . f5018) (bytevector->uint-list . f5017) (bytevector->u8-list . f5016) (bytevector->sint-list . f5015) (no-nans-violation? . f4c73) (no-infinities-violation? . f4c5e) (make-no-nans-violation . f4c71) (make-no-infinities-violation . f4c5c) (real->flonum . f5014) (flzero? . f5013) (fltruncate . f5012) (fltan . f5011) (flsqrt . f5010) (flsin . f500f) (flround . f500e) (flpositive? . f500d) (flonum? . f500c) (flodd? . f500b) (flnumerator . f500a) (flnegative? . f5009) (flnan? . f5008) (flmod0 . f5007) (flmod . f5006) (flmin . f5005) (flmax . f5004) (fllog . f5003) (flinteger? . f5002) (flinfinite? . f5001) (flfloor . f5000) (flfinite? . f4fff) (flexpt . f4ffe) (flexp . f4ffd) (fleven? . f4ffc) (fldiv0-and-mod0 . f4ffb) (fldiv0 . f4ffa) (fldiv-and-mod . f4ff9) (fldiv . f4ff8) (fldenominator . f4ff7) (flcos . f4ff6) (flceiling . f4ff5) (flatan . f4ff4) (flasin . f4ff3) (flacos . f4ff2) (flabs . f4ff1) (fl>? . f4ff0) (fl>=? . f4fef) (fl=? . f4fee) (fl<? . f4fed) (fl<=? . f4fec) (fl/ . f4feb) (fl- . f4fea) (fl+ . f4fe9) (fl* . f4fe8) (fixnum->flonum . f4fe7) (fxzero? . f4fe6) (fxxor . f4fe5) (fxrotate-bit-field . f4fe4) (fxreverse-bit-field . f4fe3) (fxpositive? . f4fe2) (fxodd? . f4fe1) (fxnot . f4fe0) (fxnegative? . f4fdf) (fxmod0 . f4fde) (fxmod . f4fdd) (fxmin . f4fdc) (fxmax . f4fdb) (fxlength . f4fda) (fxior . f4fd9) (fxif . f4fd8) (fxfirst-bit-set . f4fd7) (fxeven? . f4fd6) (fxdiv0-and-mod0 . f4fd5) (fxdiv0 . f4fd4) (fxdiv-and-mod . f4fd3) (fxdiv . f4fd2) (fxcopy-bit-field . f4fd1) (fxcopy-bit . f4fd0) (fxbit-set? . f4fcf) (fxbit-field . f4fce) (fxbit-count . f4fcd) (fxarithmetic-shift-right . f4fcc) (fxarithmetic-shift-left . f4fcb) (fxarithmetic-shift . f4fca) (fxand . f4fc9) (fx>? . f4fc8) (fx>=? . f4fc7) (fx=? . f4fc6) (fx<? . f4fc5) (fx<=? . f4fc4) (fx-/carry . f4fc3) (fx- . f4fc2) (fx+/carry . f4fc1) (fx+ . f4fc0) (fx*/carry . f4fbf) (fx* . f4fbe) (greatest-fixnum . f4fbd) (least-fixnum . f4fbc) (fixnum-width . f4fbb) (fixnum? . f4fba) (bitwise-rotate-bit-field . f4fb9) (bitwise-reverse-bit-field . f4fb8) (bitwise-length . f4fb7) (bitwise-if . f4fb6) (bitwise-first-bit-set . f4fb5) (bitwise-copy-bit-field . f4fb4) (bitwise-copy-bit . f4fb3) (bitwise-bit-set? . f4fb2) (bitwise-bit-field . f4fb1) (bitwise-bit-count . f4fb0) (bitwise-xor . f4faf) (bitwise-ior . f4fae) (bitwise-and . f4fad) (bitwise-not . f4fac) (bitwise-arithmetic-shift-right . f4fab) (bitwise-arithmetic-shift-left . f4faa) (bitwise-arithmetic-shift . f4fa9) (zero? . f4fa8) (vector? . f4fa7) (vector-set! . f4fa6) (vector-ref . f4fa5) (vector-map . f4fa4) (vector-length . f4fa3) (vector-for-each . f4fa2) (vector-fill! . f4fa1) (vector->list . f4fa0) (vector . f4f9f) (values . f4f9e) (truncate . f4f9d) (tan . f4f9c) (symbol? . f4f9b) (symbol=? . f4f9a) (symbol->string . f4f99) (substring . f4f98) (string? . f4f97) (string>? . f4f96) (string>=? . f4f95) (string=? . f4f94) (string<? . f4f93) (string<=? . f4f92) (string-ref . f4f91) (string-length . f4f90) (string-for-each . f4f8f) (string-copy . f4f8e) (string-append . f4f8d) (string->symbol . f4f8c) (string->number . f4f8b) (string->list . f4f8a) (string . f4f89) (sqrt . f4f88) (sin . f4f87) (round . f4f86) (reverse . f4f85) (real? . f4f84) (real-valued? . f4f83) (real-part . f4f82) (rationalize . f4f81) (rational? . f4f80) (rational-valued? . f4f7f) (procedure? . f4f7e) (positive? . f4f7d) (pair? . f4f7c) (odd? . f4f7b) (numerator . f4f7a) (number? . f4f79) (number->string . f4f78) (null? . f4f77) (not . f4f76) (negative? . f4f75) (nan? . f4f74) (min . f4f73) (max . f4f72) (map . f4f71) (make-vector . f4f70) (make-string . f4f6f) (make-rectangular . f4f6e) (make-polar . f4f6d) (magnitude . f4f6c) (log . f4f6b) (list? . f4f6a) (list-tail . f4f69) (list-ref . f4f68) (list->vector . f4f67) (list->string . f4f66) (list . f4f65) (length . f4f64) (lcm . f4f63) (integer? . f4f62) (integer-valued? . f4f61) (integer->char . f4f60) (infinite? . f4f5f) (inexact? . f4f5e) (inexact . f4f5d) (imag-part . f4f5c) (gcd . f4f5b) (for-each . f4f5a) (floor . f4f59) (finite? . f4f58) (expt . f4f57) (exp . f4f56) (exact? . f4f55) (exact-integer-sqrt . f4f54) (exact . f4f53) (even? . f4f52) (error . f4f51) (eqv? . f4f50) (equal? . f4f4f) (eq? . f4f4e) (dynamic-wind . f4f4d) (div0-and-mod0 . f4f4c) (mod0 . f4f4b) (div0 . f4f4a) (div-and-mod . f4f49) (mod . f4f48) (div . f4f47) (denominator . f4f46) (cos . f4f45) (cons . f4f44) (complex? . f4f43) (char? . f4f42) (char>? . f4f41) (char>=? . f4f40) (char=? . f4f3f) (char<? . f4f3e) (char<=? . f4f3d) (char->integer . f4f3c) (ceiling . f4f3b) (call-with-values . f4f3a) (call/cc . f4f39) (call-with-current-continuation . f4f38) (cddddr . f4f37) (cdddar . f4f36) (cddadr . f4f35) (cddaar . f4f34) (cdaddr . f4f33) (cdadar . f4f32) (cdaadr . f4f31) (cdaaar . f4f30) (cadddr . f4f2f) (caddar . f4f2e) (cadadr . f4f2d) (cadaar . f4f2c) (caaddr . f4f2b) (caadar . f4f2a) (caaadr . f4f29) (caaaar . f4f28) (cdddr . f4f27) (cddar . f4f26) (cdadr . f4f25) (cdaar . f4f24) (caddr . f4f23) (cadar . f4f22) (caadr . f4f21) (caaar . f4f20) (cddr . f4f1f) (cdar . f4f1e) (cadr . f4f1d) (caar . f4f1c) (cdr . f4f1b) (car . f4f1a) (boolean? . f4f19) (boolean=? . f4f18) (atan . f4f17) (assertion-violation . f4f16) (asin . f4f15) (apply . f4f14) (append . f4f13) (angle . f4f12) (acos . f4f11) (abs . f4f10) (/ . f4f0f) (* . f4f0e) (- . f4f0d) (+ . f4f0c) (>= . f4f0b) (> . f4f0a) (= . f4f09) (<= . f4f08) (< . f4f07) (library . f4f06) (&no-nans . f4f05) (&no-infinities . f4f04) (&i/o-encoding . f4f03) (&i/o-decoding . f4f02) (&i/o-port . f4f01) (&i/o-file-does-not-exist . f4f00) (&i/o-file-already-exists . f4eff) (&i/o-file-is-read-only . f4efe) (&i/o-file-protection . f4efd) (&i/o-filename . f4efc) (&i/o-invalid-position . f4efb) (&i/o-write . f4efa) (&i/o-read . f4ef9) (&i/o . f4ef8) (&undefined . f4ef7) (&syntax . f4ef6) (&lexical . f4ef5) (&implementation-restriction . f4ef4) (&non-continuable . f4ef3) (&who . f4ef2) (&irritants . f4ef1) (&assertion . f4ef0) (&violation . f4eef) (&error . f4eee) (&serious . f4eed) (&warning . f4eec) (&message . f4eeb) (&condition . f4eea) (define-condition-type . f4ee9) (define-enumeration . f4ee8) (define-record-type . f4ee7) (parent-rtd . f4ee6) (nongenerative . f4ee5) (opaque . f4ee4) (sealed . f4ee3) (protocol . f4ee2) (parent . f4ee1) (immutable . f4ee0) (mutable . f4edf) (fields . f4ede) (error-handling-mode . f4edd) (file-options . f4edc) (buffer-mode . f4edb) (eol-style . f4eda) (guard . f4ed9) (unsyntax-splicing . f4ed6) (unsyntax . f4ed5) (unquote-splicing . f4ed4) (unquote . f4ed3) (_ . f4ed2) (else . f4ed1) (=> . f4ed0) (... . f4ecf) (assert . f4ece) (endianness . f4ecd) (time . f4ecb) (do . f4eca) (cond . f4ec9) (let* . f4ec8) (let . f4ec7) (let*-values . f4ec6) (let-values . f4ec5) (identifier-syntax . f4ec4) (with-syntax . f4ec3) (quasisyntax . f4ec2) (quasiquote . f4ec1) (syntax-rules . f4ec0) (include . f4ebf) (record-constructor-descriptor . f4ebd) (record-type-descriptor . f4ebc) (case . f4ebb) (unless . f4eb9) (when . f4eb8) (or . f4eb7) (and . f4eb6) (if . f4eb5) (letrec* . f4eb4) (letrec . f4eb3) (case-lambda . f4eb1) (lambda . f4eb0) (syntax . f4eaf) (syntax-case . f4eae) (quote . f4ead) (letrec-syntax . f4eab) (let-syntax . f4eaa) (set! . f4ea9) (import . f4ea8) (begin . f4ea7) (define-syntax . f4ea5) (define . f4ea4)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f5186 '(psyntax null-environment-5) '() '() '() '() '((make-promise . f5084) (unquote-splicing . f4ed4) (unquote . f4ed3) (_ . f4ed2) (else . f4ed1) (=> . f4ed0) (... . f4ecf) (delay . f4ecc) (do . f4eca) (cond . f4ec9) (let* . f4ec8) (let . f4ec7) (quasiquote . f4ec1) (syntax-rules . f4ec0) (case . f4ebb) (or . f4eb7) (and . f4eb6) (if . f4eb5) (letrec . f4eb3) (lambda . f4eb0) (quote . f4ead) (letrec-syntax . f4eab) (let-syntax . f4eaa) (set! . f4ea9) (begin . f4ea7) (define-syntax . f4ea5) (define . f4ea4)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f5187 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . f5119) (string-ci>=? . f5118) (string-ci=? . f5117) (string-ci<? . f5116) (string-ci<=? . f5115) (char-whitespace? . f5114) (char-upper-case? . f5113) (char-numeric? . f5111) (char-lower-case? . f5110) (char-upcase . f510e) (char-downcase . f510b) (char-ci>? . f510a) (char-ci>=? . f5109) (char-ci=? . f5108) (char-ci<? . f5107) (char-ci<=? . f5106) (char-alphabetic? . f5105) (call-with-output-file . f50d9) (call-with-input-file . f50d8) (write-char . f50d7) (write . f50d6) (with-output-to-file . f50d5) (with-input-from-file . f50d4) (read-char . f50d3) (read . f50d2) (peek-char . f50d1) (open-output-file . f50d0) (open-input-file . f50cf) (newline . f50ce) (display . f50cd) (close-output-port . f50cc) (close-input-port . f50cb) (eof-object . f50c9) (current-output-port . f50c7) (current-input-port . f50c6) (output-port? . f50c5) (input-port? . f50c4) (scheme-report-environment . f2f8c) (quotient . f508a) (null-environment . f2f8a) (remainder . f5089) (modulo . f5088) (inexact->exact . f5087) (force . f5086) (exact->inexact . f5085) (make-promise . f5084) (string-fill! . f5082) (string-set! . f5081) (set-cdr! . f5080) (set-car! . f507f) (memv . f5079) (memq . f5078) (member . f5076) (assv . f506e) (assq . f506d) (assoc . f506b) (eval . f2f90) (zero? . f4fa8) (vector? . f4fa7) (vector-set! . f4fa6) (vector-ref . f4fa5) (vector-length . f4fa3) (vector-fill! . f4fa1) (vector->list . f4fa0) (vector . f4f9f) (values . f4f9e) (truncate . f4f9d) (tan . f4f9c) (symbol? . f4f9b) (symbol->string . f4f99) (substring . f4f98) (string? . f4f97) (string>? . f4f96) (string>=? . f4f95) (string=? . f4f94) (string<? . f4f93) (string<=? . f4f92) (string-ref . f4f91) (string-length . f4f90) (string-copy . f4f8e) (string-append . f4f8d) (string->symbol . f4f8c) (string->number . f4f8b) (string->list . f4f8a) (string . f4f89) (sqrt . f4f88) (sin . f4f87) (round . f4f86) (reverse . f4f85) (real? . f4f84) (real-part . f4f82) (rationalize . f4f81) (rational? . f4f80) (procedure? . f4f7e) (positive? . f4f7d) (pair? . f4f7c) (odd? . f4f7b) (numerator . f4f7a) (number? . f4f79) (number->string . f4f78) (not . f4f76) (negative? . f4f75) (min . f4f73) (max . f4f72) (map . f4f71) (make-vector . f4f70) (make-string . f4f6f) (make-rectangular . f4f6e) (make-polar . f4f6d) (magnitude . f4f6c) (log . f4f6b) (list? . f4f6a) (list-tail . f4f69) (list-ref . f4f68) (list->vector . f4f67) (list->string . f4f66) (list . f4f65) (length . f4f64) (lcm . f4f63) (integer? . f4f62) (integer->char . f4f60) (inexact? . f4f5e) (imag-part . f4f5c) (gcd . f4f5b) (for-each . f4f5a) (floor . f4f59) (expt . f4f57) (exp . f4f56) (exact? . f4f55) (even? . f4f52) (eqv? . f4f50) (equal? . f4f4f) (eq? . f4f4e) (dynamic-wind . f4f4d) (denominator . f4f46) (cos . f4f45) (cons . f4f44) (complex? . f4f43) (char? . f4f42) (char>? . f4f41) (char>=? . f4f40) (char=? . f4f3f) (char<? . f4f3e) (char<=? . f4f3d) (char->integer . f4f3c) (ceiling . f4f3b) (call-with-values . f4f3a) (call-with-current-continuation . f4f38) (cddddr . f4f37) (cdddar . f4f36) (cddadr . f4f35) (cddaar . f4f34) (cdaddr . f4f33) (cdadar . f4f32) (cdaadr . f4f31) (cdaaar . f4f30) (cadddr . f4f2f) (caddar . f4f2e) (cadadr . f4f2d) (cadaar . f4f2c) (caaddr . f4f2b) (caadar . f4f2a) (caaadr . f4f29) (caaaar . f4f28) (cdddr . f4f27) (cddar . f4f26) (cdadr . f4f25) (cdaar . f4f24) (caddr . f4f23) (cadar . f4f22) (caadr . f4f21) (caaar . f4f20) (cddr . f4f1f) (cdar . f4f1e) (cadr . f4f1d) (caar . f4f1c) (cdr . f4f1b) (car . f4f1a) (boolean? . f4f19) (atan . f4f17) (asin . f4f15) (apply . f4f14) (append . f4f13) (angle . f4f12) (acos . f4f11) (abs . f4f10) (/ . f4f0f) (* . f4f0e) (- . f4f0d) (+ . f4f0c) (>= . f4f0b) (> . f4f0a) (= . f4f09) (<= . f4f08) (< . f4f07) (unquote-splicing . f4ed4) (unquote . f4ed3) (else . f4ed1) (=> . f4ed0) (... . f4ecf) (delay . f4ecc) (do . f4eca) (cond . f4ec9) (let* . f4ec8) (let . f4ec7) (quasiquote . f4ec1) (syntax-rules . f4ec0) (case . f4ebb) (or . f4eb7) (and . f4eb6) (if . f4eb5) (letrec . f4eb3) (lambda . f4eb0) (quote . f4ead) (letrec-syntax . f4eab) (let-syntax . f4eaa) (set! . f4ea9) (begin . f4ea7) (define-syntax . f4ea5) (define . f4ea4)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f5188 '(psyntax modules) '() '() '() '() '((module . f4ea6)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f5189 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f518a '(rnrs) '(6) '() '() '() '((regexp? . f517d) (string-upcase . f5121) (string-titlecase . f5120) (string-normalize-nfkd . f511f) (string-normalize-nfkc . f511e) (string-normalize-nfd . f511d) (string-normalize-nfc . f511c) (string-foldcase . f511b) (string-downcase . f511a) (string-ci>? . f5119) (string-ci>=? . f5118) (string-ci=? . f5117) (string-ci<? . f5116) (string-ci<=? . f5115) (char-whitespace? . f5114) (char-upper-case? . f5113) (char-title-case? . f5112) (char-numeric? . f5111) (char-lower-case? . f5110) (char-general-category . f510f) (char-upcase . f510e) (char-titlecase . f510d) (char-foldcase . f510c) (char-downcase . f510b) (char-ci>? . f510a) (char-ci>=? . f5109) (char-ci=? . f5108) (char-ci<? . f5107) (char-ci<=? . f5106) (char-alphabetic? . f5105) (make-variable-transformer . f2cf4) (identifier? . f2fb2) (generate-temporaries . f2f9e) (free-identifier=? . f2fa0) (syntax->datum . f2fb6) (datum->syntax . f2fb4) (bound-identifier=? . f2fa2) (record-type-descriptor? . f5104) (record-predicate . f5103) (record-mutator . f5102) (record-constructor . f5101) (record-accessor . f5100) (make-record-type-descriptor . f50ff) (make-record-constructor-descriptor . f50fe) (record? . f50fd) (record-type-uid . f50fc) (record-type-sealed? . f50fb) (record-type-parent . f50fa) (record-type-opaque? . f50f9) (record-type-name . f50f8) (record-type-generative? . f50f7) (record-type-field-names . f50f6) (record-rtd . f50f5) (record-field-mutable? . f50f4) (delete-file . f50f3) (file-exists? . f50f2) (vector-sort! . f50f1) (vector-sort . f50f0) (list-sort . f50ef) (symbol-hash . f50ee) (string-ci-hash . f50ed) (string-hash . f50ec) (equal-hash . f50eb) (hashtable-equivalence-function . f50ea) (make-hashtable . f50e9) (hashtable-hash-function . f50e8) (make-eqv-hashtable . f50e7) (make-eq-hashtable . f50e6) (hashtable? . f50e5) (hashtable-update! . f50e4) (hashtable-size . f50e3) (hashtable-set! . f50e2) (hashtable-ref . f50e1) (hashtable-mutable? . f50e0) (hashtable-keys . f50df) (hashtable-entries . f50de) (hashtable-delete! . f50dd) (hashtable-copy . f50dc) (hashtable-contains? . f50db) (hashtable-clear! . f50da) (call-with-output-file . f50d9) (call-with-input-file . f50d8) (write-char . f50d7) (write . f50d6) (with-output-to-file . f50d5) (with-input-from-file . f50d4) (read-char . f50d3) (read . f50d2) (peek-char . f50d1) (open-output-file . f50d0) (open-input-file . f50cf) (newline . f50ce) (display . f50cd) (close-output-port . f50cc) (close-input-port . f50cb) (eof-object? . f50ca) (eof-object . f50c9) (current-error-port . f50c8) (current-output-port . f50c7) (current-input-port . f50c6) (output-port? . f50c5) (input-port? . f50c4) (utf-8-codec . f50c3) (utf-16-codec . f50c2) (transcoder-error-handling-mode . f50c1) (transcoder-eol-style . f50c0) (transcoder-codec . f50bf) (transcoded-port . f50be) (textual-port? . f50bd) (string->bytevector . f50bc) (standard-output-port . f50bb) (standard-input-port . f50ba) (standard-error-port . f50b9) (set-port-position! . f50b8) (put-u8 . f50b7) (put-string . f50b6) (put-datum . f50b5) (put-char . f50b4) (put-bytevector . f50b3) (port? . f50b2) (port-transcoder . f50b1) (port-position . f50b0) (port-has-set-port-position!? . f50af) (port-has-port-position? . f50ae) (port-eof? . f50ad) (output-port-buffer-mode . f50ac) (open-string-output-port . f50ab) (open-string-input-port . f50aa) (open-file-output-port . f50a9) (open-file-input/output-port . f50a8) (open-file-input-port . f50a7) (open-bytevector-output-port . f50a6) (open-bytevector-input-port . f50a5) (native-transcoder . f50a4) (native-eol-style . f50a3) (make-transcoder . f50a2) (latin-1-codec . f50a1) (make-i/o-write-error . f4b72) (make-i/o-read-error . f4b5d) (make-i/o-port-error . f4c13) (make-i/o-invalid-position-error . f4b89) (make-i/o-filename-error . f4ba4) (make-i/o-file-protection-error . f4bbd) (make-i/o-file-is-read-only-error . f4bd2) (make-i/o-file-does-not-exist-error . f4bfc) (make-i/o-file-already-exists-error . f4be7) (make-i/o-error . f4b48) (make-i/o-encoding-error . f4c43) (make-i/o-decoding-error . f4c2c) (make-custom-textual-output-port . f50a0) (make-custom-textual-input/output-port . f509f) (make-custom-textual-input-port . f509e) (make-custom-binary-output-port . f509d) (make-custom-binary-input/output-port . f509c) (make-custom-binary-input-port . f509b) (make-bytevector . f509a) (lookahead-u8 . f5099) (lookahead-char . f5098) (i/o-write-error? . f4b74) (i/o-read-error? . f4b5f) (i/o-port-error? . f4c17) (i/o-invalid-position-error? . f4b8d) (i/o-filename-error? . f4ba8) (i/o-file-protection-error? . f4bbf) (i/o-file-is-read-only-error? . f4bd4) (i/o-file-does-not-exist-error? . f4bfe) (i/o-file-already-exists-error? . f4be9) (i/o-error? . f4b4a) (i/o-error-position . f4b8f) (i/o-error-port . f4c19) (i/o-error-filename . f4baa) (i/o-encoding-error? . f4c47) (i/o-encoding-error-char . f4c49) (i/o-decoding-error? . f4c2e) (get-u8 . f5097) (get-string-n! . f5096) (get-string-n . f5095) (get-string-all . f5094) (get-line . f5093) (get-datum . f5092) (get-char . f5091) (get-bytevector-some . f5090) (get-bytevector-n! . f508f) (get-bytevector-n . f508e) (get-bytevector-all . f508d) (flush-output-port . f508c) (close-port . f508b) (exit . f5083) (command-line . f4d7e) (remove . f507e) (remv . f507d) (remp . f507c) (remq . f507b) (partition . f507a) (memv . f5079) (memq . f5078) (memp . f5077) (member . f5076) (exists . f5075) (for-all . f5074) (fold-right . f5073) (fold-left . f5072) (find . f5071) (filter . f5070) (cons* . f506f) (assv . f506e) (assq . f506d) (assp . f506c) (assoc . f506b) (call-with-string-output-port . f506a) (call-with-port . f5069) (call-with-bytevector-output-port . f5068) (bytevector->string . f5067) (buffer-mode? . f5066) (binary-port? . f5065) (with-exception-handler . f5064) (raise-continuable . f5063) (raise . f5062) (make-enumeration . f5061) (enum-set=? . f5060) (enum-set-universe . f505f) (enum-set-union . f505e) (enum-set-subset? . f505d) (enum-set-projection . f505c) (enum-set-member? . f505b) (enum-set-intersection . f505a) (enum-set-indexer . f5059) (enum-set-difference . f5058) (enum-set-constructor . f5057) (enum-set-complement . f5056) (enum-set->list . f5055) (who-condition? . f4abe) (warning? . f4a36) (violation? . f4a75) (undefined-violation? . f4b35) (syntax-violation? . f4b1c) (syntax-violation-subform . f4b20) (syntax-violation-form . f4b1e) (syntax-violation . f2fb0) (simple-conditions . f5054) (serious-condition? . f4a4b) (non-continuable-violation? . f4ad5) (message-condition? . f4a1f) (make-who-condition . f4aba) (make-warning . f4a34) (make-violation . f4a73) (make-undefined-violation . f4b33) (make-syntax-violation . f4b16) (make-serious-condition . f4a49) (make-non-continuable-violation . f4ad3) (make-message-condition . f4a1b) (make-lexical-violation . f4afd) (make-irritants-condition . f4a9f) (make-implementation-restriction-violation . f4ae8) (make-error . f4a5e) (make-assertion-violation . f4a88) (lexical-violation? . f4aff) (irritants-condition? . f4aa3) (implementation-restriction-violation? . f4aea) (error? . f4a60) (condition-who . f4ac0) (condition-predicate . f5053) (condition-message . f4a21) (condition-irritants . f4aa5) (condition-accessor . f5052) (condition . f5051) (assertion-violation? . f4a8a) (condition? . f5050) (utf32->string . f504f) (utf16->string . f504e) (utf8->string . f504d) (uint-list->bytevector . f504c) (u8-list->bytevector . f504b) (string->utf8 . f504a) (string->utf32 . f5049) (string->utf16 . f5048) (sint-list->bytevector . f5047) (native-endianness . f5046) (bytevector? . f5045) (bytevector=? . f5044) (bytevector-uint-set! . f5043) (bytevector-uint-ref . f5042) (bytevector-u8-set! . f5041) (bytevector-u8-ref . f5040) (bytevector-u64-set! . f503f) (bytevector-u64-ref . f503e) (bytevector-u64-native-set! . f503d) (bytevector-u64-native-ref . f503c) (bytevector-u32-set! . f503b) (bytevector-u32-ref . f503a) (bytevector-u32-native-set! . f5039) (bytevector-u32-native-ref . f5038) (bytevector-u16-set! . f5037) (bytevector-u16-ref . f5036) (bytevector-u16-native-set! . f5035) (bytevector-u16-native-ref . f5034) (bytevector-sint-set! . f5033) (bytevector-sint-ref . f5032) (bytevector-s8-set! . f5031) (bytevector-s8-ref . f5030) (bytevector-s64-set! . f502f) (bytevector-s64-ref . f502e) (bytevector-s64-native-set! . f502d) (bytevector-s64-native-ref . f502c) (bytevector-s32-set! . f502b) (bytevector-s32-ref . f502a) (bytevector-s32-native-set! . f5029) (bytevector-s32-native-ref . f5028) (bytevector-s16-set! . f5027) (bytevector-s16-ref . f5026) (bytevector-s16-native-set! . f5025) (bytevector-s16-native-ref . f5024) (bytevector-length . f5023) (bytevector-ieee-single-ref . f5022) (bytevector-ieee-single-set! . f5021) (bytevector-ieee-single-native-set! . f5020) (bytevector-ieee-single-native-ref . f501f) (bytevector-ieee-double-set! . f501e) (bytevector-ieee-double-ref . f501d) (bytevector-ieee-double-native-set! . f501c) (bytevector-ieee-double-native-ref . f501b) (bytevector-fill! . f501a) (bytevector-copy! . f5019) (bytevector-copy . f5018) (bytevector->uint-list . f5017) (bytevector->u8-list . f5016) (bytevector->sint-list . f5015) (no-nans-violation? . f4c73) (no-infinities-violation? . f4c5e) (make-no-nans-violation . f4c71) (make-no-infinities-violation . f4c5c) (real->flonum . f5014) (flzero? . f5013) (fltruncate . f5012) (fltan . f5011) (flsqrt . f5010) (flsin . f500f) (flround . f500e) (flpositive? . f500d) (flonum? . f500c) (flodd? . f500b) (flnumerator . f500a) (flnegative? . f5009) (flnan? . f5008) (flmod0 . f5007) (flmod . f5006) (flmin . f5005) (flmax . f5004) (fllog . f5003) (flinteger? . f5002) (flinfinite? . f5001) (flfloor . f5000) (flfinite? . f4fff) (flexpt . f4ffe) (flexp . f4ffd) (fleven? . f4ffc) (fldiv0-and-mod0 . f4ffb) (fldiv0 . f4ffa) (fldiv-and-mod . f4ff9) (fldiv . f4ff8) (fldenominator . f4ff7) (flcos . f4ff6) (flceiling . f4ff5) (flatan . f4ff4) (flasin . f4ff3) (flacos . f4ff2) (flabs . f4ff1) (fl>? . f4ff0) (fl>=? . f4fef) (fl=? . f4fee) (fl<? . f4fed) (fl<=? . f4fec) (fl/ . f4feb) (fl- . f4fea) (fl+ . f4fe9) (fl* . f4fe8) (fixnum->flonum . f4fe7) (fxzero? . f4fe6) (fxxor . f4fe5) (fxrotate-bit-field . f4fe4) (fxreverse-bit-field . f4fe3) (fxpositive? . f4fe2) (fxodd? . f4fe1) (fxnot . f4fe0) (fxnegative? . f4fdf) (fxmod0 . f4fde) (fxmod . f4fdd) (fxmin . f4fdc) (fxmax . f4fdb) (fxlength . f4fda) (fxior . f4fd9) (fxif . f4fd8) (fxfirst-bit-set . f4fd7) (fxeven? . f4fd6) (fxdiv0-and-mod0 . f4fd5) (fxdiv0 . f4fd4) (fxdiv-and-mod . f4fd3) (fxdiv . f4fd2) (fxcopy-bit-field . f4fd1) (fxcopy-bit . f4fd0) (fxbit-set? . f4fcf) (fxbit-field . f4fce) (fxbit-count . f4fcd) (fxarithmetic-shift-right . f4fcc) (fxarithmetic-shift-left . f4fcb) (fxarithmetic-shift . f4fca) (fxand . f4fc9) (fx>? . f4fc8) (fx>=? . f4fc7) (fx=? . f4fc6) (fx<? . f4fc5) (fx<=? . f4fc4) (fx-/carry . f4fc3) (fx- . f4fc2) (fx+/carry . f4fc1) (fx+ . f4fc0) (fx*/carry . f4fbf) (fx* . f4fbe) (greatest-fixnum . f4fbd) (least-fixnum . f4fbc) (fixnum-width . f4fbb) (fixnum? . f4fba) (bitwise-rotate-bit-field . f4fb9) (bitwise-reverse-bit-field . f4fb8) (bitwise-length . f4fb7) (bitwise-if . f4fb6) (bitwise-first-bit-set . f4fb5) (bitwise-copy-bit-field . f4fb4) (bitwise-copy-bit . f4fb3) (bitwise-bit-set? . f4fb2) (bitwise-bit-field . f4fb1) (bitwise-bit-count . f4fb0) (bitwise-xor . f4faf) (bitwise-ior . f4fae) (bitwise-and . f4fad) (bitwise-not . f4fac) (bitwise-arithmetic-shift-right . f4fab) (bitwise-arithmetic-shift-left . f4faa) (bitwise-arithmetic-shift . f4fa9) (zero? . f4fa8) (vector? . f4fa7) (vector-set! . f4fa6) (vector-ref . f4fa5) (vector-map . f4fa4) (vector-length . f4fa3) (vector-for-each . f4fa2) (vector-fill! . f4fa1) (vector->list . f4fa0) (vector . f4f9f) (values . f4f9e) (truncate . f4f9d) (tan . f4f9c) (symbol? . f4f9b) (symbol=? . f4f9a) (symbol->string . f4f99) (substring . f4f98) (string? . f4f97) (string>? . f4f96) (string>=? . f4f95) (string=? . f4f94) (string<? . f4f93) (string<=? . f4f92) (string-ref . f4f91) (string-length . f4f90) (string-for-each . f4f8f) (string-copy . f4f8e) (string-append . f4f8d) (string->symbol . f4f8c) (string->number . f4f8b) (string->list . f4f8a) (string . f4f89) (sqrt . f4f88) (sin . f4f87) (round . f4f86) (reverse . f4f85) (real? . f4f84) (real-valued? . f4f83) (real-part . f4f82) (rationalize . f4f81) (rational? . f4f80) (rational-valued? . f4f7f) (procedure? . f4f7e) (positive? . f4f7d) (pair? . f4f7c) (odd? . f4f7b) (numerator . f4f7a) (number? . f4f79) (number->string . f4f78) (null? . f4f77) (not . f4f76) (negative? . f4f75) (nan? . f4f74) (min . f4f73) (max . f4f72) (map . f4f71) (make-vector . f4f70) (make-string . f4f6f) (make-rectangular . f4f6e) (make-polar . f4f6d) (magnitude . f4f6c) (log . f4f6b) (list? . f4f6a) (list-tail . f4f69) (list-ref . f4f68) (list->vector . f4f67) (list->string . f4f66) (list . f4f65) (length . f4f64) (lcm . f4f63) (integer? . f4f62) (integer-valued? . f4f61) (integer->char . f4f60) (infinite? . f4f5f) (inexact? . f4f5e) (inexact . f4f5d) (imag-part . f4f5c) (gcd . f4f5b) (for-each . f4f5a) (floor . f4f59) (finite? . f4f58) (expt . f4f57) (exp . f4f56) (exact? . f4f55) (exact-integer-sqrt . f4f54) (exact . f4f53) (even? . f4f52) (error . f4f51) (eqv? . f4f50) (equal? . f4f4f) (eq? . f4f4e) (dynamic-wind . f4f4d) (div0-and-mod0 . f4f4c) (mod0 . f4f4b) (div0 . f4f4a) (div-and-mod . f4f49) (mod . f4f48) (div . f4f47) (denominator . f4f46) (cos . f4f45) (cons . f4f44) (complex? . f4f43) (char? . f4f42) (char>? . f4f41) (char>=? . f4f40) (char=? . f4f3f) (char<? . f4f3e) (char<=? . f4f3d) (char->integer . f4f3c) (ceiling . f4f3b) (call-with-values . f4f3a) (call/cc . f4f39) (call-with-current-continuation . f4f38) (cddddr . f4f37) (cdddar . f4f36) (cddadr . f4f35) (cddaar . f4f34) (cdaddr . f4f33) (cdadar . f4f32) (cdaadr . f4f31) (cdaaar . f4f30) (cadddr . f4f2f) (caddar . f4f2e) (cadadr . f4f2d) (cadaar . f4f2c) (caaddr . f4f2b) (caadar . f4f2a) (caaadr . f4f29) (caaaar . f4f28) (cdddr . f4f27) (cddar . f4f26) (cdadr . f4f25) (cdaar . f4f24) (caddr . f4f23) (cadar . f4f22) (caadr . f4f21) (caaar . f4f20) (cddr . f4f1f) (cdar . f4f1e) (cadr . f4f1d) (caar . f4f1c) (cdr . f4f1b) (car . f4f1a) (boolean? . f4f19) (boolean=? . f4f18) (atan . f4f17) (assertion-violation . f4f16) (asin . f4f15) (apply . f4f14) (append . f4f13) (angle . f4f12) (acos . f4f11) (abs . f4f10) (/ . f4f0f) (* . f4f0e) (- . f4f0d) (+ . f4f0c) (>= . f4f0b) (> . f4f0a) (= . f4f09) (<= . f4f08) (< . f4f07) (&no-nans . f4f05) (&no-infinities . f4f04) (&i/o-encoding . f4f03) (&i/o-decoding . f4f02) (&i/o-port . f4f01) (&i/o-file-does-not-exist . f4f00) (&i/o-file-already-exists . f4eff) (&i/o-file-is-read-only . f4efe) (&i/o-file-protection . f4efd) (&i/o-filename . f4efc) (&i/o-invalid-position . f4efb) (&i/o-write . f4efa) (&i/o-read . f4ef9) (&i/o . f4ef8) (&undefined . f4ef7) (&syntax . f4ef6) (&lexical . f4ef5) (&implementation-restriction . f4ef4) (&non-continuable . f4ef3) (&who . f4ef2) (&irritants . f4ef1) (&assertion . f4ef0) (&violation . f4eef) (&error . f4eee) (&serious . f4eed) (&warning . f4eec) (&message . f4eeb) (&condition . f4eea) (define-condition-type . f4ee9) (define-enumeration . f4ee8) (define-record-type . f4ee7) (parent-rtd . f4ee6) (nongenerative . f4ee5) (opaque . f4ee4) (sealed . f4ee3) (protocol . f4ee2) (parent . f4ee1) (immutable . f4ee0) (mutable . f4edf) (fields . f4ede) (error-handling-mode . f4edd) (file-options . f4edc) (buffer-mode . f4edb) (eol-style . f4eda) (guard . f4ed9) (unsyntax-splicing . f4ed6) (unsyntax . f4ed5) (unquote-splicing . f4ed4) (unquote . f4ed3) (_ . f4ed2) (else . f4ed1) (=> . f4ed0) (... . f4ecf) (assert . f4ece) (endianness . f4ecd) (do . f4eca) (cond . f4ec9) (let* . f4ec8) (let . f4ec7) (let*-values . f4ec6) (let-values . f4ec5) (identifier-syntax . f4ec4) (with-syntax . f4ec3) (quasisyntax . f4ec2) (quasiquote . f4ec1) (syntax-rules . f4ec0) (record-constructor-descriptor . f4ebd) (record-type-descriptor . f4ebc) (case . f4ebb) (unless . f4eb9) (when . f4eb8) (or . f4eb7) (and . f4eb6) (if . f4eb5) (letrec* . f4eb4) (letrec . f4eb3) (case-lambda . f4eb1) (lambda . f4eb0) (syntax . f4eaf) (syntax-case . f4eae) (quote . f4ead) (letrec-syntax . f4eab) (let-syntax . f4eaa) (set! . f4ea9) (begin . f4ea7) (define-syntax . f4ea5) (define . f4ea4)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f518b '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . f2f8c) (quotient . f508a) (null-environment . f2f8a) (remainder . f5089) (modulo . f5088) (inexact->exact . f5087) (force . f5086) (exact->inexact . f5085) (make-promise . f5084) (delay . f4ecc)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f518c '(rnrs control) '(6) '() '() '() '((do . f4eca) (unless . f4eb9) (when . f4eb8) (case-lambda . f4eb1)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f518d '(rnrs eval) '(6) '() '() '() '((eval . f2f90) (environment . f2f88)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f518e '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . f5080) (set-car! . f507f)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f518f '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . f5082) (string-set! . f5081)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f5190 '(rnrs programs) '(6) '() '() '() '((exit . f5083) (command-line . f4d7e)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f5191 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . f2cf4) (identifier? . f2fb2) (generate-temporaries . f2f9e) (free-identifier=? . f2fa0) (syntax->datum . f2fb6) (datum->syntax . f2fb4) (bound-identifier=? . f2fa2) (syntax-violation . f2fb0) (unsyntax-splicing . f4ed6) (unsyntax . f4ed5) (_ . f4ed2) (... . f4ecf) (with-syntax . f4ec3) (quasisyntax . f4ec2) (syntax . f4eaf) (syntax-case . f4eae)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f5192 '(rnrs files) '(6) '() '() '() '((delete-file . f50f3) (file-exists? . f50f2) (make-i/o-write-error . f4b72) (make-i/o-read-error . f4b5d) (make-i/o-port-error . f4c13) (make-i/o-invalid-position-error . f4b89) (make-i/o-filename-error . f4ba4) (make-i/o-file-protection-error . f4bbd) (make-i/o-file-is-read-only-error . f4bd2) (make-i/o-file-does-not-exist-error . f4bfc) (make-i/o-file-already-exists-error . f4be7) (make-i/o-error . f4b48) (i/o-write-error? . f4b74) (i/o-read-error? . f4b5f) (i/o-port-error? . f4c17) (i/o-invalid-position-error? . f4b8d) (i/o-filename-error? . f4ba8) (i/o-file-protection-error? . f4bbf) (i/o-file-is-read-only-error? . f4bd4) (i/o-file-does-not-exist-error? . f4bfe) (i/o-file-already-exists-error? . f4be9) (i/o-error? . f4b4a) (i/o-error-position . f4b8f) (i/o-error-port . f4c19) (i/o-error-filename . f4baa) (&i/o-port . f4f01) (&i/o-file-does-not-exist . f4f00) (&i/o-file-already-exists . f4eff) (&i/o-file-is-read-only . f4efe) (&i/o-file-protection . f4efd) (&i/o-filename . f4efc) (&i/o-invalid-position . f4efb) (&i/o-write . f4efa) (&i/o-read . f4ef9) (&i/o . f4ef8)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f5193 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . f50f1) (vector-sort . f50f0) (list-sort . f50ef)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f5194 '(rnrs base) '(6) '() '() '() '((zero? . f4fa8) (vector? . f4fa7) (vector-set! . f4fa6) (vector-ref . f4fa5) (vector-map . f4fa4) (vector-length . f4fa3) (vector-for-each . f4fa2) (vector-fill! . f4fa1) (vector->list . f4fa0) (vector . f4f9f) (values . f4f9e) (truncate . f4f9d) (tan . f4f9c) (symbol? . f4f9b) (symbol=? . f4f9a) (symbol->string . f4f99) (substring . f4f98) (string? . f4f97) (string>? . f4f96) (string>=? . f4f95) (string=? . f4f94) (string<? . f4f93) (string<=? . f4f92) (string-ref . f4f91) (string-length . f4f90) (string-for-each . f4f8f) (string-copy . f4f8e) (string-append . f4f8d) (string->symbol . f4f8c) (string->number . f4f8b) (string->list . f4f8a) (string . f4f89) (sqrt . f4f88) (sin . f4f87) (round . f4f86) (reverse . f4f85) (real? . f4f84) (real-valued? . f4f83) (real-part . f4f82) (rationalize . f4f81) (rational? . f4f80) (rational-valued? . f4f7f) (procedure? . f4f7e) (positive? . f4f7d) (pair? . f4f7c) (odd? . f4f7b) (numerator . f4f7a) (number? . f4f79) (number->string . f4f78) (null? . f4f77) (not . f4f76) (negative? . f4f75) (nan? . f4f74) (min . f4f73) (max . f4f72) (map . f4f71) (make-vector . f4f70) (make-string . f4f6f) (make-rectangular . f4f6e) (make-polar . f4f6d) (magnitude . f4f6c) (log . f4f6b) (list? . f4f6a) (list-tail . f4f69) (list-ref . f4f68) (list->vector . f4f67) (list->string . f4f66) (list . f4f65) (length . f4f64) (lcm . f4f63) (integer? . f4f62) (integer-valued? . f4f61) (integer->char . f4f60) (infinite? . f4f5f) (inexact? . f4f5e) (inexact . f4f5d) (imag-part . f4f5c) (gcd . f4f5b) (for-each . f4f5a) (floor . f4f59) (finite? . f4f58) (expt . f4f57) (exp . f4f56) (exact? . f4f55) (exact-integer-sqrt . f4f54) (exact . f4f53) (even? . f4f52) (error . f4f51) (eqv? . f4f50) (equal? . f4f4f) (eq? . f4f4e) (dynamic-wind . f4f4d) (div0-and-mod0 . f4f4c) (mod0 . f4f4b) (div0 . f4f4a) (div-and-mod . f4f49) (mod . f4f48) (div . f4f47) (denominator . f4f46) (cos . f4f45) (cons . f4f44) (complex? . f4f43) (char? . f4f42) (char>? . f4f41) (char>=? . f4f40) (char=? . f4f3f) (char<? . f4f3e) (char<=? . f4f3d) (char->integer . f4f3c) (ceiling . f4f3b) (call-with-values . f4f3a) (call/cc . f4f39) (call-with-current-continuation . f4f38) (cddddr . f4f37) (cdddar . f4f36) (cddadr . f4f35) (cddaar . f4f34) (cdaddr . f4f33) (cdadar . f4f32) (cdaadr . f4f31) (cdaaar . f4f30) (cadddr . f4f2f) (caddar . f4f2e) (cadadr . f4f2d) (cadaar . f4f2c) (caaddr . f4f2b) (caadar . f4f2a) (caaadr . f4f29) (caaaar . f4f28) (cdddr . f4f27) (cddar . f4f26) (cdadr . f4f25) (cdaar . f4f24) (caddr . f4f23) (cadar . f4f22) (caadr . f4f21) (caaar . f4f20) (cddr . f4f1f) (cdar . f4f1e) (cadr . f4f1d) (caar . f4f1c) (cdr . f4f1b) (car . f4f1a) (boolean? . f4f19) (boolean=? . f4f18) (atan . f4f17) (assertion-violation . f4f16) (asin . f4f15) (apply . f4f14) (append . f4f13) (angle . f4f12) (acos . f4f11) (abs . f4f10) (/ . f4f0f) (* . f4f0e) (- . f4f0d) (+ . f4f0c) (>= . f4f0b) (> . f4f0a) (= . f4f09) (<= . f4f08) (< . f4f07) (unquote-splicing . f4ed4) (unquote . f4ed3) (_ . f4ed2) (else . f4ed1) (=> . f4ed0) (... . f4ecf) (assert . f4ece) (cond . f4ec9) (let* . f4ec8) (let . f4ec7) (let*-values . f4ec6) (let-values . f4ec5) (identifier-syntax . f4ec4) (quasiquote . f4ec1) (syntax-rules . f4ec0) (case . f4ebb) (or . f4eb7) (and . f4eb6) (if . f4eb5) (letrec* . f4eb4) (letrec . f4eb3) (lambda . f4eb0) (quote . f4ead) (letrec-syntax . f4eab) (let-syntax . f4eaa) (set! . f4ea9) (begin . f4ea7) (define-syntax . f4ea5) (define . f4ea4)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f5195 '(rnrs lists) '(6) '() '() '() '((remove . f507e) (remv . f507d) (remp . f507c) (remq . f507b) (partition . f507a) (memv . f5079) (memq . f5078) (memp . f5077) (member . f5076) (exists . f5075) (for-all . f5074) (fold-right . f5073) (fold-left . f5072) (find . f5071) (filter . f5070) (cons* . f506f) (assv . f506e) (assq . f506d) (assp . f506c) (assoc . f506b)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f5196 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . f50d9) (call-with-input-file . f50d8) (write-char . f50d7) (write . f50d6) (with-output-to-file . f50d5) (with-input-from-file . f50d4) (read-char . f50d3) (read . f50d2) (peek-char . f50d1) (open-output-file . f50d0) (open-input-file . f50cf) (newline . f50ce) (display . f50cd) (close-output-port . f50cc) (close-input-port . f50cb) (eof-object? . f50ca) (eof-object . f50c9) (current-error-port . f50c8) (current-output-port . f50c7) (current-input-port . f50c6) (output-port? . f50c5) (input-port? . f50c4) (make-i/o-write-error . f4b72) (make-i/o-read-error . f4b5d) (make-i/o-port-error . f4c13) (make-i/o-invalid-position-error . f4b89) (make-i/o-filename-error . f4ba4) (make-i/o-file-protection-error . f4bbd) (make-i/o-file-is-read-only-error . f4bd2) (make-i/o-file-does-not-exist-error . f4bfc) (make-i/o-file-already-exists-error . f4be7) (make-i/o-error . f4b48) (i/o-write-error? . f4b74) (i/o-read-error? . f4b5f) (i/o-port-error? . f4c17) (i/o-invalid-position-error? . f4b8d) (i/o-filename-error? . f4ba8) (i/o-file-protection-error? . f4bbf) (i/o-file-is-read-only-error? . f4bd4) (i/o-file-does-not-exist-error? . f4bfe) (i/o-file-already-exists-error? . f4be9) (i/o-error? . f4b4a) (i/o-error-position . f4b8f) (i/o-error-port . f4c19) (i/o-error-filename . f4baa) (&i/o-port . f4f01) (&i/o-file-does-not-exist . f4f00) (&i/o-file-already-exists . f4eff) (&i/o-file-is-read-only . f4efe) (&i/o-file-protection . f4efd) (&i/o-filename . f4efc) (&i/o-invalid-position . f4efb) (&i/o-write . f4efa) (&i/o-read . f4ef9) (&i/o . f4ef8)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f5197 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . f509a) (utf32->string . f504f) (utf16->string . f504e) (utf8->string . f504d) (uint-list->bytevector . f504c) (u8-list->bytevector . f504b) (string->utf8 . f504a) (string->utf32 . f5049) (string->utf16 . f5048) (sint-list->bytevector . f5047) (native-endianness . f5046) (bytevector? . f5045) (bytevector=? . f5044) (bytevector-uint-set! . f5043) (bytevector-uint-ref . f5042) (bytevector-u8-set! . f5041) (bytevector-u8-ref . f5040) (bytevector-u64-set! . f503f) (bytevector-u64-ref . f503e) (bytevector-u64-native-set! . f503d) (bytevector-u64-native-ref . f503c) (bytevector-u32-set! . f503b) (bytevector-u32-ref . f503a) (bytevector-u32-native-set! . f5039) (bytevector-u32-native-ref . f5038) (bytevector-u16-set! . f5037) (bytevector-u16-ref . f5036) (bytevector-u16-native-set! . f5035) (bytevector-u16-native-ref . f5034) (bytevector-sint-set! . f5033) (bytevector-sint-ref . f5032) (bytevector-s8-set! . f5031) (bytevector-s8-ref . f5030) (bytevector-s64-set! . f502f) (bytevector-s64-ref . f502e) (bytevector-s64-native-set! . f502d) (bytevector-s64-native-ref . f502c) (bytevector-s32-set! . f502b) (bytevector-s32-ref . f502a) (bytevector-s32-native-set! . f5029) (bytevector-s32-native-ref . f5028) (bytevector-s16-set! . f5027) (bytevector-s16-ref . f5026) (bytevector-s16-native-set! . f5025) (bytevector-s16-native-ref . f5024) (bytevector-length . f5023) (bytevector-ieee-single-ref . f5022) (bytevector-ieee-single-set! . f5021) (bytevector-ieee-single-native-set! . f5020) (bytevector-ieee-single-native-ref . f501f) (bytevector-ieee-double-set! . f501e) (bytevector-ieee-double-ref . f501d) (bytevector-ieee-double-native-set! . f501c) (bytevector-ieee-double-native-ref . f501b) (bytevector-fill! . f501a) (bytevector-copy! . f5019) (bytevector-copy . f5018) (bytevector->uint-list . f5017) (bytevector->u8-list . f5016) (bytevector->sint-list . f5015) (endianness . f4ecd)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f5198 '(rnrs unicode) '(6) '() '() '() '((string-upcase . f5121) (string-titlecase . f5120) (string-normalize-nfkd . f511f) (string-normalize-nfkc . f511e) (string-normalize-nfd . f511d) (string-normalize-nfc . f511c) (string-foldcase . f511b) (string-downcase . f511a) (string-ci>? . f5119) (string-ci>=? . f5118) (string-ci=? . f5117) (string-ci<? . f5116) (string-ci<=? . f5115) (char-whitespace? . f5114) (char-upper-case? . f5113) (char-title-case? . f5112) (char-numeric? . f5111) (char-lower-case? . f5110) (char-general-category . f510f) (char-upcase . f510e) (char-titlecase . f510d) (char-foldcase . f510c) (char-downcase . f510b) (char-ci>? . f510a) (char-ci>=? . f5109) (char-ci=? . f5108) (char-ci<? . f5107) (char-ci<=? . f5106) (char-alphabetic? . f5105)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f5199 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . f5064) (raise-continuable . f5063) (raise . f5062) (guard . f4ed9) (else . f4ed1) (=> . f4ed0)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f519a '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . f4fb9) (bitwise-reverse-bit-field . f4fb8) (bitwise-length . f4fb7) (bitwise-if . f4fb6) (bitwise-first-bit-set . f4fb5) (bitwise-copy-bit-field . f4fb4) (bitwise-copy-bit . f4fb3) (bitwise-bit-set? . f4fb2) (bitwise-bit-field . f4fb1) (bitwise-bit-count . f4fb0) (bitwise-xor . f4faf) (bitwise-ior . f4fae) (bitwise-and . f4fad) (bitwise-not . f4fac) (bitwise-arithmetic-shift-right . f4fab) (bitwise-arithmetic-shift-left . f4faa) (bitwise-arithmetic-shift . f4fa9)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f519b '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . f4fe6) (fxxor . f4fe5) (fxrotate-bit-field . f4fe4) (fxreverse-bit-field . f4fe3) (fxpositive? . f4fe2) (fxodd? . f4fe1) (fxnot . f4fe0) (fxnegative? . f4fdf) (fxmod0 . f4fde) (fxmod . f4fdd) (fxmin . f4fdc) (fxmax . f4fdb) (fxlength . f4fda) (fxior . f4fd9) (fxif . f4fd8) (fxfirst-bit-set . f4fd7) (fxeven? . f4fd6) (fxdiv0-and-mod0 . f4fd5) (fxdiv0 . f4fd4) (fxdiv-and-mod . f4fd3) (fxdiv . f4fd2) (fxcopy-bit-field . f4fd1) (fxcopy-bit . f4fd0) (fxbit-set? . f4fcf) (fxbit-field . f4fce) (fxbit-count . f4fcd) (fxarithmetic-shift-right . f4fcc) (fxarithmetic-shift-left . f4fcb) (fxarithmetic-shift . f4fca) (fxand . f4fc9) (fx>? . f4fc8) (fx>=? . f4fc7) (fx=? . f4fc6) (fx<? . f4fc5) (fx<=? . f4fc4) (fx-/carry . f4fc3) (fx- . f4fc2) (fx+/carry . f4fc1) (fx+ . f4fc0) (fx*/carry . f4fbf) (fx* . f4fbe) (greatest-fixnum . f4fbd) (least-fixnum . f4fbc) (fixnum-width . f4fbb) (fixnum? . f4fba)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f519c '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . f4c73) (no-infinities-violation? . f4c5e) (make-no-nans-violation . f4c71) (make-no-infinities-violation . f4c5c) (real->flonum . f5014) (flzero? . f5013) (fltruncate . f5012) (fltan . f5011) (flsqrt . f5010) (flsin . f500f) (flround . f500e) (flpositive? . f500d) (flonum? . f500c) (flodd? . f500b) (flnumerator . f500a) (flnegative? . f5009) (flnan? . f5008) (flmod0 . f5007) (flmod . f5006) (flmin . f5005) (flmax . f5004) (fllog . f5003) (flinteger? . f5002) (flinfinite? . f5001) (flfloor . f5000) (flfinite? . f4fff) (flexpt . f4ffe) (flexp . f4ffd) (fleven? . f4ffc) (fldiv0-and-mod0 . f4ffb) (fldiv0 . f4ffa) (fldiv-and-mod . f4ff9) (fldiv . f4ff8) (fldenominator . f4ff7) (flcos . f4ff6) (flceiling . f4ff5) (flatan . f4ff4) (flasin . f4ff3) (flacos . f4ff2) (flabs . f4ff1) (fl>? . f4ff0) (fl>=? . f4fef) (fl=? . f4fee) (fl<? . f4fed) (fl<=? . f4fec) (fl/ . f4feb) (fl- . f4fea) (fl+ . f4fe9) (fl* . f4fe8) (fixnum->flonum . f4fe7) (&no-nans . f4f05) (&no-infinities . f4f04)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f519d '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . f50ee) (string-ci-hash . f50ed) (string-hash . f50ec) (equal-hash . f50eb) (hashtable-equivalence-function . f50ea) (make-hashtable . f50e9) (hashtable-hash-function . f50e8) (make-eqv-hashtable . f50e7) (make-eq-hashtable . f50e6) (hashtable? . f50e5) (hashtable-update! . f50e4) (hashtable-size . f50e3) (hashtable-set! . f50e2) (hashtable-ref . f50e1) (hashtable-mutable? . f50e0) (hashtable-keys . f50df) (hashtable-entries . f50de) (hashtable-delete! . f50dd) (hashtable-copy . f50dc) (hashtable-contains? . f50db) (hashtable-clear! . f50da)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f519e '(rnrs io ports) '(6) '() '() '() '((eof-object? . f50ca) (eof-object . f50c9) (current-error-port . f50c8) (current-output-port . f50c7) (current-input-port . f50c6) (output-port? . f50c5) (input-port? . f50c4) (utf-8-codec . f50c3) (utf-16-codec . f50c2) (transcoder-error-handling-mode . f50c1) (transcoder-eol-style . f50c0) (transcoder-codec . f50bf) (transcoded-port . f50be) (textual-port? . f50bd) (string->bytevector . f50bc) (standard-output-port . f50bb) (standard-input-port . f50ba) (standard-error-port . f50b9) (set-port-position! . f50b8) (put-u8 . f50b7) (put-string . f50b6) (put-datum . f50b5) (put-char . f50b4) (put-bytevector . f50b3) (port? . f50b2) (port-transcoder . f50b1) (port-position . f50b0) (port-has-set-port-position!? . f50af) (port-has-port-position? . f50ae) (port-eof? . f50ad) (output-port-buffer-mode . f50ac) (open-string-output-port . f50ab) (open-string-input-port . f50aa) (open-file-output-port . f50a9) (open-file-input/output-port . f50a8) (open-file-input-port . f50a7) (open-bytevector-output-port . f50a6) (open-bytevector-input-port . f50a5) (native-transcoder . f50a4) (native-eol-style . f50a3) (make-transcoder . f50a2) (latin-1-codec . f50a1) (make-i/o-write-error . f4b72) (make-i/o-read-error . f4b5d) (make-i/o-port-error . f4c13) (make-i/o-invalid-position-error . f4b89) (make-i/o-filename-error . f4ba4) (make-i/o-file-protection-error . f4bbd) (make-i/o-file-is-read-only-error . f4bd2) (make-i/o-file-does-not-exist-error . f4bfc) (make-i/o-file-already-exists-error . f4be7) (make-i/o-error . f4b48) (make-i/o-encoding-error . f4c43) (make-i/o-decoding-error . f4c2c) (make-custom-textual-output-port . f50a0) (make-custom-textual-input/output-port . f509f) (make-custom-textual-input-port . f509e) (make-custom-binary-output-port . f509d) (make-custom-binary-input/output-port . f509c) (make-custom-binary-input-port . f509b) (lookahead-u8 . f5099) (lookahead-char . f5098) (i/o-write-error? . f4b74) (i/o-read-error? . f4b5f) (i/o-port-error? . f4c17) (i/o-invalid-position-error? . f4b8d) (i/o-filename-error? . f4ba8) (i/o-file-protection-error? . f4bbf) (i/o-file-is-read-only-error? . f4bd4) (i/o-file-does-not-exist-error? . f4bfe) (i/o-file-already-exists-error? . f4be9) (i/o-error? . f4b4a) (i/o-error-position . f4b8f) (i/o-error-port . f4c19) (i/o-error-filename . f4baa) (i/o-encoding-error? . f4c47) (i/o-encoding-error-char . f4c49) (i/o-decoding-error? . f4c2e) (get-u8 . f5097) (get-string-n! . f5096) (get-string-n . f5095) (get-string-all . f5094) (get-line . f5093) (get-datum . f5092) (get-char . f5091) (get-bytevector-some . f5090) (get-bytevector-n! . f508f) (get-bytevector-n . f508e) (get-bytevector-all . f508d) (flush-output-port . f508c) (close-port . f508b) (call-with-string-output-port . f506a) (call-with-port . f5069) (call-with-bytevector-output-port . f5068) (bytevector->string . f5067) (buffer-mode? . f5066) (binary-port? . f5065) (&i/o-encoding . f4f03) (&i/o-decoding . f4f02) (&i/o-port . f4f01) (&i/o-file-does-not-exist . f4f00) (&i/o-file-already-exists . f4eff) (&i/o-file-is-read-only . f4efe) (&i/o-file-protection . f4efd) (&i/o-filename . f4efc) (&i/o-invalid-position . f4efb) (&i/o-write . f4efa) (&i/o-read . f4ef9) (&i/o . f4ef8) (error-handling-mode . f4edd) (file-options . f4edc) (buffer-mode . f4edb) (eol-style . f4eda)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f519f '(rnrs enums) '(6) '() '() '() '((make-enumeration . f5061) (enum-set=? . f5060) (enum-set-universe . f505f) (enum-set-union . f505e) (enum-set-subset? . f505d) (enum-set-projection . f505c) (enum-set-member? . f505b) (enum-set-intersection . f505a) (enum-set-indexer . f5059) (enum-set-difference . f5058) (enum-set-constructor . f5057) (enum-set-complement . f5056) (enum-set->list . f5055) (define-enumeration . f4ee8)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f51a0 '(rnrs conditions) '(6) '() '() '() '((who-condition? . f4abe) (warning? . f4a36) (violation? . f4a75) (undefined-violation? . f4b35) (syntax-violation? . f4b1c) (syntax-violation-subform . f4b20) (syntax-violation-form . f4b1e) (syntax-violation . f2fb0) (simple-conditions . f5054) (serious-condition? . f4a4b) (non-continuable-violation? . f4ad5) (message-condition? . f4a1f) (make-who-condition . f4aba) (make-warning . f4a34) (make-violation . f4a73) (make-undefined-violation . f4b33) (make-syntax-violation . f4b16) (make-serious-condition . f4a49) (make-non-continuable-violation . f4ad3) (make-message-condition . f4a1b) (make-lexical-violation . f4afd) (make-irritants-condition . f4a9f) (make-implementation-restriction-violation . f4ae8) (make-error . f4a5e) (make-assertion-violation . f4a88) (lexical-violation? . f4aff) (irritants-condition? . f4aa3) (implementation-restriction-violation? . f4aea) (error? . f4a60) (condition-who . f4ac0) (condition-predicate . f5053) (condition-message . f4a21) (condition-irritants . f4aa5) (condition-accessor . f5052) (condition . f5051) (assertion-violation? . f4a8a) (condition? . f5050) (&undefined . f4ef7) (&syntax . f4ef6) (&lexical . f4ef5) (&implementation-restriction . f4ef4) (&non-continuable . f4ef3) (&who . f4ef2) (&irritants . f4ef1) (&assertion . f4ef0) (&violation . f4eef) (&error . f4eee) (&serious . f4eed) (&warning . f4eec) (&message . f4eeb) (&condition . f4eea) (define-condition-type . f4ee9)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f51a1 '(rnrs records inspection) '(6) '() '() '() '((record? . f50fd) (record-type-uid . f50fc) (record-type-sealed? . f50fb) (record-type-parent . f50fa) (record-type-opaque? . f50f9) (record-type-name . f50f8) (record-type-generative? . f50f7) (record-type-field-names . f50f6) (record-rtd . f50f5) (record-field-mutable? . f50f4)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f51a2 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . f5104) (record-predicate . f5103) (record-mutator . f5102) (record-constructor . f5101) (record-accessor . f5100) (make-record-type-descriptor . f50ff) (make-record-constructor-descriptor . f50fe)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f51a3 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . f4ee7) (parent-rtd . f4ee6) (nongenerative . f4ee5) (opaque . f4ee4) (sealed . f4ee3) (protocol . f4ee2) (parent . f4ee1) (immutable . f4ee0) (mutable . f4edf) (fields . f4ede) (record-constructor-descriptor . f4ebd) (record-type-descriptor . f4ebc)) '() values values '#f '#f '#t '#f) (f2adf@f297e@install-library 'f51a4 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . f4c77) (&no-nans-rtd . f4c75) (&no-infinities-rcd . f4c62) (&no-infinities-rtd . f4c60) (&i/o-encoding-rcd . f4c4d) (&i/o-encoding-rtd . f4c4b) (&i/o-decoding-rcd . f4c32) (&i/o-decoding-rtd . f4c30) (&i/o-port-rcd . f4c1d) (&i/o-port-rtd . f4c1b) (&i/o-file-does-not-exist-rcd . f4c02) (&i/o-file-does-not-exist-rtd . f4c00) (&i/o-file-already-exists-rcd . f4bed) (&i/o-file-already-exists-rtd . f4beb) (&i/o-file-is-read-only-rcd . f4bd8) (&i/o-file-is-read-only-rtd . f4bd6) (&i/o-file-protection-rcd . f4bc3) (&i/o-file-protection-rtd . f4bc1) (&i/o-filename-rcd . f4bae) (&i/o-filename-rtd . f4bac) (&i/o-invalid-position-rcd . f4b93) (&i/o-invalid-position-rtd . f4b91) (&i/o-write-rcd . f4b78) (&i/o-write-rtd . f4b76) (&i/o-read-rcd . f4b63) (&i/o-read-rtd . f4b61) (&i/o-rcd . f4b4e) (&i/o-rtd . f4b4c) (&undefined-rcd . f4b39) (&undefined-rtd . f4b37) (&syntax-rcd . f4b24) (&syntax-rtd . f4b22) (&lexical-rcd . f4b03) (&lexical-rtd . f4b01) (&implementation-restriction-rcd . f4aee) (&implementation-restriction-rtd . f4aec) (&non-continuable-rcd . f4ad9) (&non-continuable-rtd . f4ad7) (&who-rcd . f4ac4) (&who-rtd . f4ac2) (&irritants-rcd . f4aa9) (&irritants-rtd . f4aa7) (&assertion-rcd . f4a8e) (&assertion-rtd . f4a8c) (&violation-rcd . f4a79) (&violation-rtd . f4a77) (&error-rcd . f4a64) (&error-rtd . f4a62) (&serious-rcd . f4a4f) (&serious-rtd . f4a4d) (&warning-rcd . f4a3a) (&warning-rtd . f4a38) (&message-rcd . f4a25) (&message-rtd . f4a23) (&condition-rcd . f49c6) (&condition-rtd . f49c4) (syntax-error . f2fac) (syntax-dispatch . f2ec7) (pretty-print . f5184) (eval-core . f5183) (set-symbol-value! . f5182) (symbol-value . f5181) (gensym . f5180) (void . f517f) (load . f4d84) (interaction-environment . f2fbc) (char-ready? . f517e) (regexp? . f517d) (read-line . f517c) (ungensym . f517b) (alist->eq-hash-table . f517a) (assoc-ref . f5179) (print . f5178) (format . f5177) (host-os . f5176) (library-path . f295d) (standard-library-path . f5175) (file-newer? . f5174) (stat-mtime . f5173) (write-to-file . f5172) (file->list . f5171) (file->string . f5170) (digit->integer . f516f) (call-with-string-input-port . f516e) (call-with-string-io . f516d) (string-split . f516c) (bytevector-for-each . f516b) (string->regexp . f516a) (rxmatch . f5169) (regexp-replace-all . f5168) (hashtable-for-each . f5167) (call-process . f5166) (local-tz-offset . f5165) (microseconds . f5164) (readdir . f5163) (set-current-directory! . f5162) (expand-path . f5161) (current-directory . f5160) (%spawn . f515f) (%waitpid . f515e) (%ffi-supported? . f515d) (%ffi-pointer-ref . f515c) (%ffi-pointer->string . f515b) (%ffi-call->string-or-zero . f515a) (%ffi-call->double . f5159) (%ffi-call->void* . f5158) (%ffi-call->void . f5157) (%ffi-call->int . f5156) (%ffi-lookup . f5155) (%ffi-open . f5154) (%fork . f5153) (%pipe . f5152) (p . f5151) (open-output-string . f5150) (get-output-string . f514f) (get-environment-variables . f514e) (get-environment-variable . f514d) (get-timeofday . f514c) (get-command-line . f514b) (sys-display . f514a) (whereis . f5149) (register . f5148) (vm-join! . f5147) (vm-set-value! . f5146) (vm? . f5145) (main-vm? . f5144) (vm-self . f5143) (vm-start! . f5142) (make-vm . f5141) (mutex-try-lock! . f5140) (mutex-unlock! . f513f) (mutex-lock! . f513e) (mutex? . f513d) (make-mutex . f513c) (condition-variable-notify-all! . f513b) (condition-variable-notify! . f513a) (condition-variable-wait! . f5139) (make-condition-variable . f5138) (mosh-executable-path . f5137) (make-file-options . f5136) (source-info . f5135) (make-compiler-instruction . f5134) (make-instruction . f5133) (set-source-info! . f5132) (bignum? . f5131) (fast-equal? . f5130) (fasl-read . f512f) (fasl-write . f512e) (time-usage . f512d) (os-constant . f512c) (make-parameter . f2790) (socket-port . f512b) (socket-shutdown . f512a) (socket-close . f5129) (socket-send . f5128) (socket-recv! . f5127) (socket-recv . f5126) (make-server-socket . f5125) (make-client-socket . f5124) (socket-accept . f5123) (socket? . f5122) (string-upcase . f5121) (string-titlecase . f5120) (string-normalize-nfkd . f511f) (string-normalize-nfkc . f511e) (string-normalize-nfd . f511d) (string-normalize-nfc . f511c) (string-foldcase . f511b) (string-downcase . f511a) (string-ci>? . f5119) (string-ci>=? . f5118) (string-ci=? . f5117) (string-ci<? . f5116) (string-ci<=? . f5115) (char-whitespace? . f5114) (char-upper-case? . f5113) (char-title-case? . f5112) (char-numeric? . f5111) (char-lower-case? . f5110) (char-general-category . f510f) (char-upcase . f510e) (char-titlecase . f510d) (char-foldcase . f510c) (char-downcase . f510b) (char-ci>? . f510a) (char-ci>=? . f5109) (char-ci=? . f5108) (char-ci<? . f5107) (char-ci<=? . f5106) (char-alphabetic? . f5105) (make-variable-transformer . f2cf4) (identifier? . f2fb2) (generate-temporaries . f2f9e) (free-identifier=? . f2fa0) (syntax->datum . f2fb6) (datum->syntax . f2fb4) (bound-identifier=? . f2fa2) (record-type-descriptor? . f5104) (record-predicate . f5103) (record-mutator . f5102) (record-constructor . f5101) (record-accessor . f5100) (make-record-type-descriptor . f50ff) (make-record-constructor-descriptor . f50fe) (record? . f50fd) (record-type-uid . f50fc) (record-type-sealed? . f50fb) (record-type-parent . f50fa) (record-type-opaque? . f50f9) (record-type-name . f50f8) (record-type-generative? . f50f7) (record-type-field-names . f50f6) (record-rtd . f50f5) (record-field-mutable? . f50f4) (delete-file . f50f3) (file-exists? . f50f2) (vector-sort! . f50f1) (vector-sort . f50f0) (list-sort . f50ef) (symbol-hash . f50ee) (string-ci-hash . f50ed) (string-hash . f50ec) (equal-hash . f50eb) (hashtable-equivalence-function . f50ea) (make-hashtable . f50e9) (hashtable-hash-function . f50e8) (make-eqv-hashtable . f50e7) (make-eq-hashtable . f50e6) (hashtable? . f50e5) (hashtable-update! . f50e4) (hashtable-size . f50e3) (hashtable-set! . f50e2) (hashtable-ref . f50e1) (hashtable-mutable? . f50e0) (hashtable-keys . f50df) (hashtable-entries . f50de) (hashtable-delete! . f50dd) (hashtable-copy . f50dc) (hashtable-contains? . f50db) (hashtable-clear! . f50da) (call-with-output-file . f50d9) (call-with-input-file . f50d8) (write-char . f50d7) (write . f50d6) (with-output-to-file . f50d5) (with-input-from-file . f50d4) (read-char . f50d3) (read . f50d2) (peek-char . f50d1) (open-output-file . f50d0) (open-input-file . f50cf) (newline . f50ce) (display . f50cd) (close-output-port . f50cc) (close-input-port . f50cb) (eof-object? . f50ca) (eof-object . f50c9) (current-error-port . f50c8) (current-output-port . f50c7) (current-input-port . f50c6) (output-port? . f50c5) (input-port? . f50c4) (utf-8-codec . f50c3) (utf-16-codec . f50c2) (transcoder-error-handling-mode . f50c1) (transcoder-eol-style . f50c0) (transcoder-codec . f50bf) (transcoded-port . f50be) (textual-port? . f50bd) (string->bytevector . f50bc) (standard-output-port . f50bb) (standard-input-port . f50ba) (standard-error-port . f50b9) (set-port-position! . f50b8) (put-u8 . f50b7) (put-string . f50b6) (put-datum . f50b5) (put-char . f50b4) (put-bytevector . f50b3) (port? . f50b2) (port-transcoder . f50b1) (port-position . f50b0) (port-has-set-port-position!? . f50af) (port-has-port-position? . f50ae) (port-eof? . f50ad) (output-port-buffer-mode . f50ac) (open-string-output-port . f50ab) (open-string-input-port . f50aa) (open-file-output-port . f50a9) (open-file-input/output-port . f50a8) (open-file-input-port . f50a7) (open-bytevector-output-port . f50a6) (open-bytevector-input-port . f50a5) (native-transcoder . f50a4) (native-eol-style . f50a3) (make-transcoder . f50a2) (latin-1-codec . f50a1) (make-i/o-write-error . f4b72) (make-i/o-read-error . f4b5d) (make-i/o-port-error . f4c13) (make-i/o-invalid-position-error . f4b89) (make-i/o-filename-error . f4ba4) (make-i/o-file-protection-error . f4bbd) (make-i/o-file-is-read-only-error . f4bd2) (make-i/o-file-does-not-exist-error . f4bfc) (make-i/o-file-already-exists-error . f4be7) (make-i/o-error . f4b48) (make-i/o-encoding-error . f4c43) (make-i/o-decoding-error . f4c2c) (make-custom-textual-output-port . f50a0) (make-custom-textual-input/output-port . f509f) (make-custom-textual-input-port . f509e) (make-custom-binary-output-port . f509d) (make-custom-binary-input/output-port . f509c) (make-custom-binary-input-port . f509b) (make-bytevector . f509a) (lookahead-u8 . f5099) (lookahead-char . f5098) (i/o-write-error? . f4b74) (i/o-read-error? . f4b5f) (i/o-port-error? . f4c17) (i/o-invalid-position-error? . f4b8d) (i/o-filename-error? . f4ba8) (i/o-file-protection-error? . f4bbf) (i/o-file-is-read-only-error? . f4bd4) (i/o-file-does-not-exist-error? . f4bfe) (i/o-file-already-exists-error? . f4be9) (i/o-error? . f4b4a) (i/o-error-position . f4b8f) (i/o-error-port . f4c19) (i/o-error-filename . f4baa) (i/o-encoding-error? . f4c47) (i/o-encoding-error-char . f4c49) (i/o-decoding-error? . f4c2e) (get-u8 . f5097) (get-string-n! . f5096) (get-string-n . f5095) (get-string-all . f5094) (get-line . f5093) (get-datum . f5092) (get-char . f5091) (get-bytevector-some . f5090) (get-bytevector-n! . f508f) (get-bytevector-n . f508e) (get-bytevector-all . f508d) (flush-output-port . f508c) (close-port . f508b) (scheme-report-environment . f2f8c) (quotient . f508a) (null-environment . f2f8a) (remainder . f5089) (modulo . f5088) (inexact->exact . f5087) (force . f5086) (exact->inexact . f5085) (make-promise . f5084) (exit . f5083) (command-line . f4d7e) (string-fill! . f5082) (string-set! . f5081) (set-cdr! . f5080) (set-car! . f507f) (remove . f507e) (remv . f507d) (remp . f507c) (remq . f507b) (partition . f507a) (memv . f5079) (memq . f5078) (memp . f5077) (member . f5076) (exists . f5075) (for-all . f5074) (fold-right . f5073) (fold-left . f5072) (find . f5071) (filter . f5070) (cons* . f506f) (assv . f506e) (assq . f506d) (assp . f506c) (assoc . f506b) (call-with-string-output-port . f506a) (call-with-port . f5069) (call-with-bytevector-output-port . f5068) (bytevector->string . f5067) (buffer-mode? . f5066) (binary-port? . f5065) (with-exception-handler . f5064) (raise-continuable . f5063) (raise . f5062) (eval . f2f90) (environment . f2f88) (make-enumeration . f5061) (enum-set=? . f5060) (enum-set-universe . f505f) (enum-set-union . f505e) (enum-set-subset? . f505d) (enum-set-projection . f505c) (enum-set-member? . f505b) (enum-set-intersection . f505a) (enum-set-indexer . f5059) (enum-set-difference . f5058) (enum-set-constructor . f5057) (enum-set-complement . f5056) (enum-set->list . f5055) (who-condition? . f4abe) (warning? . f4a36) (violation? . f4a75) (undefined-violation? . f4b35) (syntax-violation? . f4b1c) (syntax-violation-subform . f4b20) (syntax-violation-form . f4b1e) (syntax-violation . f2fb0) (simple-conditions . f5054) (serious-condition? . f4a4b) (non-continuable-violation? . f4ad5) (message-condition? . f4a1f) (make-who-condition . f4aba) (make-warning . f4a34) (make-violation . f4a73) (make-undefined-violation . f4b33) (make-syntax-violation . f4b16) (make-serious-condition . f4a49) (make-non-continuable-violation . f4ad3) (make-message-condition . f4a1b) (make-lexical-violation . f4afd) (make-irritants-condition . f4a9f) (make-implementation-restriction-violation . f4ae8) (make-error . f4a5e) (make-assertion-violation . f4a88) (lexical-violation? . f4aff) (irritants-condition? . f4aa3) (implementation-restriction-violation? . f4aea) (error? . f4a60) (condition-who . f4ac0) (condition-predicate . f5053) (condition-message . f4a21) (condition-irritants . f4aa5) (condition-accessor . f5052) (condition . f5051) (assertion-violation? . f4a8a) (condition? . f5050) (utf32->string . f504f) (utf16->string . f504e) (utf8->string . f504d) (uint-list->bytevector . f504c) (u8-list->bytevector . f504b) (string->utf8 . f504a) (string->utf32 . f5049) (string->utf16 . f5048) (sint-list->bytevector . f5047) (native-endianness . f5046) (bytevector? . f5045) (bytevector=? . f5044) (bytevector-uint-set! . f5043) (bytevector-uint-ref . f5042) (bytevector-u8-set! . f5041) (bytevector-u8-ref . f5040) (bytevector-u64-set! . f503f) (bytevector-u64-ref . f503e) (bytevector-u64-native-set! . f503d) (bytevector-u64-native-ref . f503c) (bytevector-u32-set! . f503b) (bytevector-u32-ref . f503a) (bytevector-u32-native-set! . f5039) (bytevector-u32-native-ref . f5038) (bytevector-u16-set! . f5037) (bytevector-u16-ref . f5036) (bytevector-u16-native-set! . f5035) (bytevector-u16-native-ref . f5034) (bytevector-sint-set! . f5033) (bytevector-sint-ref . f5032) (bytevector-s8-set! . f5031) (bytevector-s8-ref . f5030) (bytevector-s64-set! . f502f) (bytevector-s64-ref . f502e) (bytevector-s64-native-set! . f502d) (bytevector-s64-native-ref . f502c) (bytevector-s32-set! . f502b) (bytevector-s32-ref . f502a) (bytevector-s32-native-set! . f5029) (bytevector-s32-native-ref . f5028) (bytevector-s16-set! . f5027) (bytevector-s16-ref . f5026) (bytevector-s16-native-set! . f5025) (bytevector-s16-native-ref . f5024) (bytevector-length . f5023) (bytevector-ieee-single-ref . f5022) (bytevector-ieee-single-set! . f5021) (bytevector-ieee-single-native-set! . f5020) (bytevector-ieee-single-native-ref . f501f) (bytevector-ieee-double-set! . f501e) (bytevector-ieee-double-ref . f501d) (bytevector-ieee-double-native-set! . f501c) (bytevector-ieee-double-native-ref . f501b) (bytevector-fill! . f501a) (bytevector-copy! . f5019) (bytevector-copy . f5018) (bytevector->uint-list . f5017) (bytevector->u8-list . f5016) (bytevector->sint-list . f5015) (no-nans-violation? . f4c73) (no-infinities-violation? . f4c5e) (make-no-nans-violation . f4c71) (make-no-infinities-violation . f4c5c) (real->flonum . f5014) (flzero? . f5013) (fltruncate . f5012) (fltan . f5011) (flsqrt . f5010) (flsin . f500f) (flround . f500e) (flpositive? . f500d) (flonum? . f500c) (flodd? . f500b) (flnumerator . f500a) (flnegative? . f5009) (flnan? . f5008) (flmod0 . f5007) (flmod . f5006) (flmin . f5005) (flmax . f5004) (fllog . f5003) (flinteger? . f5002) (flinfinite? . f5001) (flfloor . f5000) (flfinite? . f4fff) (flexpt . f4ffe) (flexp . f4ffd) (fleven? . f4ffc) (fldiv0-and-mod0 . f4ffb) (fldiv0 . f4ffa) (fldiv-and-mod . f4ff9) (fldiv . f4ff8) (fldenominator . f4ff7) (flcos . f4ff6) (flceiling . f4ff5) (flatan . f4ff4) (flasin . f4ff3) (flacos . f4ff2) (flabs . f4ff1) (fl>? . f4ff0) (fl>=? . f4fef) (fl=? . f4fee) (fl<? . f4fed) (fl<=? . f4fec) (fl/ . f4feb) (fl- . f4fea) (fl+ . f4fe9) (fl* . f4fe8) (fixnum->flonum . f4fe7) (fxzero? . f4fe6) (fxxor . f4fe5) (fxrotate-bit-field . f4fe4) (fxreverse-bit-field . f4fe3) (fxpositive? . f4fe2) (fxodd? . f4fe1) (fxnot . f4fe0) (fxnegative? . f4fdf) (fxmod0 . f4fde) (fxmod . f4fdd) (fxmin . f4fdc) (fxmax . f4fdb) (fxlength . f4fda) (fxior . f4fd9) (fxif . f4fd8) (fxfirst-bit-set . f4fd7) (fxeven? . f4fd6) (fxdiv0-and-mod0 . f4fd5) (fxdiv0 . f4fd4) (fxdiv-and-mod . f4fd3) (fxdiv . f4fd2) (fxcopy-bit-field . f4fd1) (fxcopy-bit . f4fd0) (fxbit-set? . f4fcf) (fxbit-field . f4fce) (fxbit-count . f4fcd) (fxarithmetic-shift-right . f4fcc) (fxarithmetic-shift-left . f4fcb) (fxarithmetic-shift . f4fca) (fxand . f4fc9) (fx>? . f4fc8) (fx>=? . f4fc7) (fx=? . f4fc6) (fx<? . f4fc5) (fx<=? . f4fc4) (fx-/carry . f4fc3) (fx- . f4fc2) (fx+/carry . f4fc1) (fx+ . f4fc0) (fx*/carry . f4fbf) (fx* . f4fbe) (greatest-fixnum . f4fbd) (least-fixnum . f4fbc) (fixnum-width . f4fbb) (fixnum? . f4fba) (bitwise-rotate-bit-field . f4fb9) (bitwise-reverse-bit-field . f4fb8) (bitwise-length . f4fb7) (bitwise-if . f4fb6) (bitwise-first-bit-set . f4fb5) (bitwise-copy-bit-field . f4fb4) (bitwise-copy-bit . f4fb3) (bitwise-bit-set? . f4fb2) (bitwise-bit-field . f4fb1) (bitwise-bit-count . f4fb0) (bitwise-xor . f4faf) (bitwise-ior . f4fae) (bitwise-and . f4fad) (bitwise-not . f4fac) (bitwise-arithmetic-shift-right . f4fab) (bitwise-arithmetic-shift-left . f4faa) (bitwise-arithmetic-shift . f4fa9) (zero? . f4fa8) (vector? . f4fa7) (vector-set! . f4fa6) (vector-ref . f4fa5) (vector-map . f4fa4) (vector-length . f4fa3) (vector-for-each . f4fa2) (vector-fill! . f4fa1) (vector->list . f4fa0) (vector . f4f9f) (values . f4f9e) (truncate . f4f9d) (tan . f4f9c) (symbol? . f4f9b) (symbol=? . f4f9a) (symbol->string . f4f99) (substring . f4f98) (string? . f4f97) (string>? . f4f96) (string>=? . f4f95) (string=? . f4f94) (string<? . f4f93) (string<=? . f4f92) (string-ref . f4f91) (string-length . f4f90) (string-for-each . f4f8f) (string-copy . f4f8e) (string-append . f4f8d) (string->symbol . f4f8c) (string->number . f4f8b) (string->list . f4f8a) (string . f4f89) (sqrt . f4f88) (sin . f4f87) (round . f4f86) (reverse . f4f85) (real? . f4f84) (real-valued? . f4f83) (real-part . f4f82) (rationalize . f4f81) (rational? . f4f80) (rational-valued? . f4f7f) (procedure? . f4f7e) (positive? . f4f7d) (pair? . f4f7c) (odd? . f4f7b) (numerator . f4f7a) (number? . f4f79) (number->string . f4f78) (null? . f4f77) (not . f4f76) (negative? . f4f75) (nan? . f4f74) (min . f4f73) (max . f4f72) (map . f4f71) (make-vector . f4f70) (make-string . f4f6f) (make-rectangular . f4f6e) (make-polar . f4f6d) (magnitude . f4f6c) (log . f4f6b) (list? . f4f6a) (list-tail . f4f69) (list-ref . f4f68) (list->vector . f4f67) (list->string . f4f66) (list . f4f65) (length . f4f64) (lcm . f4f63) (integer? . f4f62) (integer-valued? . f4f61) (integer->char . f4f60) (infinite? . f4f5f) (inexact? . f4f5e) (inexact . f4f5d) (imag-part . f4f5c) (gcd . f4f5b) (for-each . f4f5a) (floor . f4f59) (finite? . f4f58) (expt . f4f57) (exp . f4f56) (exact? . f4f55) (exact-integer-sqrt . f4f54) (exact . f4f53) (even? . f4f52) (error . f4f51) (eqv? . f4f50) (equal? . f4f4f) (eq? . f4f4e) (dynamic-wind . f4f4d) (div0-and-mod0 . f4f4c) (mod0 . f4f4b) (div0 . f4f4a) (div-and-mod . f4f49) (mod . f4f48) (div . f4f47) (denominator . f4f46) (cos . f4f45) (cons . f4f44) (complex? . f4f43) (char? . f4f42) (char>? . f4f41) (char>=? . f4f40) (char=? . f4f3f) (char<? . f4f3e) (char<=? . f4f3d) (char->integer . f4f3c) (ceiling . f4f3b) (call-with-values . f4f3a) (call/cc . f4f39) (call-with-current-continuation . f4f38) (cddddr . f4f37) (cdddar . f4f36) (cddadr . f4f35) (cddaar . f4f34) (cdaddr . f4f33) (cdadar . f4f32) (cdaadr . f4f31) (cdaaar . f4f30) (cadddr . f4f2f) (caddar . f4f2e) (cadadr . f4f2d) (cadaar . f4f2c) (caaddr . f4f2b) (caadar . f4f2a) (caaadr . f4f29) (caaaar . f4f28) (cdddr . f4f27) (cddar . f4f26) (cdadr . f4f25) (cdaar . f4f24) (caddr . f4f23) (cadar . f4f22) (caadr . f4f21) (caaar . f4f20) (cddr . f4f1f) (cdar . f4f1e) (cadr . f4f1d) (caar . f4f1c) (cdr . f4f1b) (car . f4f1a) (boolean? . f4f19) (boolean=? . f4f18) (atan . f4f17) (assertion-violation . f4f16) (assertion-error . f2faa) (asin . f4f15) (apply . f4f14) (append . f4f13) (angle . f4f12) (acos . f4f11) (abs . f4f10) (/ . f4f0f) (* . f4f0e) (- . f4f0d) (+ . f4f0c) (>= . f4f0b) (> . f4f0a) (= . f4f09) (<= . f4f08) (< . f4f07) (library . f4f06) (&no-nans . f4f05) (&no-infinities . f4f04) (&i/o-encoding . f4f03) (&i/o-decoding . f4f02) (&i/o-port . f4f01) (&i/o-file-does-not-exist . f4f00) (&i/o-file-already-exists . f4eff) (&i/o-file-is-read-only . f4efe) (&i/o-file-protection . f4efd) (&i/o-filename . f4efc) (&i/o-invalid-position . f4efb) (&i/o-write . f4efa) (&i/o-read . f4ef9) (&i/o . f4ef8) (&undefined . f4ef7) (&syntax . f4ef6) (&lexical . f4ef5) (&implementation-restriction . f4ef4) (&non-continuable . f4ef3) (&who . f4ef2) (&irritants . f4ef1) (&assertion . f4ef0) (&violation . f4eef) (&error . f4eee) (&serious . f4eed) (&warning . f4eec) (&message . f4eeb) (&condition . f4eea) (define-condition-type . f4ee9) (define-enumeration . f4ee8) (define-record-type . f4ee7) (parent-rtd . f4ee6) (nongenerative . f4ee5) (opaque . f4ee4) (sealed . f4ee3) (protocol . f4ee2) (parent . f4ee1) (immutable . f4ee0) (mutable . f4edf) (fields . f4ede) (error-handling-mode . f4edd) (file-options . f4edc) (buffer-mode . f4edb) (eol-style . f4eda) (guard . f4ed9) (trace-define . f4ed8) (trace-lambda . f4ed7) (unsyntax-splicing . f4ed6) (unsyntax . f4ed5) (unquote-splicing . f4ed4) (unquote . f4ed3) (_ . f4ed2) (else . f4ed1) (=> . f4ed0) (... . f4ecf) (assert . f4ece) (endianness . f4ecd) (delay . f4ecc) (time . f4ecb) (do . f4eca) (cond . f4ec9) (let* . f4ec8) (let . f4ec7) (let*-values . f4ec6) (let-values . f4ec5) (identifier-syntax . f4ec4) (with-syntax . f4ec3) (quasisyntax . f4ec2) (quasiquote . f4ec1) (syntax-rules . f4ec0) (include . f4ebf) (define-struct . f4ebe) (record-constructor-descriptor . f4ebd) (record-type-descriptor . f4ebc) (case . f4ebb) (parameterize . f4eba) (unless . f4eb9) (when . f4eb8) (or . f4eb7) (and . f4eb6) (if . f4eb5) (letrec* . f4eb4) (letrec . f4eb3) (type-descriptor . f4eb2) (case-lambda . f4eb1) (lambda . f4eb0) (syntax . f4eaf) (syntax-case . f4eae) (quote . f4ead) (foreign-call . f4eac) (letrec-syntax . f4eab) (let-syntax . f4eaa) (set! . f4ea9) (import . f4ea8) (begin . f4ea7) (module . f4ea6) (define-syntax . f4ea5) (define . f4ea4)) '((f4c77 core-prim . &no-nans-rcd) (f4c75 core-prim . &no-nans-rtd) (f4c62 core-prim . &no-infinities-rcd) (f4c60 core-prim . &no-infinities-rtd) (f4c4d core-prim . &i/o-encoding-rcd) (f4c4b core-prim . &i/o-encoding-rtd) (f4c32 core-prim . &i/o-decoding-rcd) (f4c30 core-prim . &i/o-decoding-rtd) (f4c1d core-prim . &i/o-port-rcd) (f4c1b core-prim . &i/o-port-rtd) (f4c02 core-prim . &i/o-file-does-not-exist-rcd) (f4c00 core-prim . &i/o-file-does-not-exist-rtd) (f4bed core-prim . &i/o-file-already-exists-rcd) (f4beb core-prim . &i/o-file-already-exists-rtd) (f4bd8 core-prim . &i/o-file-is-read-only-rcd) (f4bd6 core-prim . &i/o-file-is-read-only-rtd) (f4bc3 core-prim . &i/o-file-protection-rcd) (f4bc1 core-prim . &i/o-file-protection-rtd) (f4bae core-prim . &i/o-filename-rcd) (f4bac core-prim . &i/o-filename-rtd) (f4b93 core-prim . &i/o-invalid-position-rcd) (f4b91 core-prim . &i/o-invalid-position-rtd) (f4b78 core-prim . &i/o-write-rcd) (f4b76 core-prim . &i/o-write-rtd) (f4b63 core-prim . &i/o-read-rcd) (f4b61 core-prim . &i/o-read-rtd) (f4b4e core-prim . &i/o-rcd) (f4b4c core-prim . &i/o-rtd) (f4b39 core-prim . &undefined-rcd) (f4b37 core-prim . &undefined-rtd) (f4b24 core-prim . &syntax-rcd) (f4b22 core-prim . &syntax-rtd) (f4b03 core-prim . &lexical-rcd) (f4b01 core-prim . &lexical-rtd) (f4aee core-prim . &implementation-restriction-rcd) (f4aec core-prim . &implementation-restriction-rtd) (f4ad9 core-prim . &non-continuable-rcd) (f4ad7 core-prim . &non-continuable-rtd) (f4ac4 core-prim . &who-rcd) (f4ac2 core-prim . &who-rtd) (f4aa9 core-prim . &irritants-rcd) (f4aa7 core-prim . &irritants-rtd) (f4a8e core-prim . &assertion-rcd) (f4a8c core-prim . &assertion-rtd) (f4a79 core-prim . &violation-rcd) (f4a77 core-prim . &violation-rtd) (f4a64 core-prim . &error-rcd) (f4a62 core-prim . &error-rtd) (f4a4f core-prim . &serious-rcd) (f4a4d core-prim . &serious-rtd) (f4a3a core-prim . &warning-rcd) (f4a38 core-prim . &warning-rtd) (f4a25 core-prim . &message-rcd) (f4a23 core-prim . &message-rtd) (f49c6 core-prim . &condition-rcd) (f49c4 core-prim . &condition-rtd) (f2fac core-prim . syntax-error) (f2ec7 core-prim . syntax-dispatch) (f5184 core-prim . pretty-print) (f5183 core-prim . eval-core) (f5182 core-prim . set-symbol-value!) (f5181 core-prim . symbol-value) (f5180 core-prim . gensym) (f517f core-prim . void) (f4d84 core-prim . load) (f2fbc core-prim . interaction-environment) (f517e core-prim . char-ready?) (f517d core-prim . regexp?) (f517c core-prim . read-line) (f517b core-prim . ungensym) (f517a core-prim . alist->eq-hash-table) (f5179 core-prim . assoc-ref) (f5178 core-prim . print) (f5177 core-prim . format) (f5176 core-prim . host-os) (f295d core-prim . library-path) (f5175 core-prim . standard-library-path) (f5174 core-prim . file-newer?) (f5173 core-prim . stat-mtime) (f5172 core-prim . write-to-file) (f5171 core-prim . file->list) (f5170 core-prim . file->string) (f516f core-prim . digit->integer) (f516e core-prim . call-with-string-input-port) (f516d core-prim . call-with-string-io) (f516c core-prim . string-split) (f516b core-prim . bytevector-for-each) (f516a core-prim . string->regexp) (f5169 core-prim . rxmatch) (f5168 core-prim . regexp-replace-all) (f5167 core-prim . hashtable-for-each) (f5166 core-prim . call-process) (f5165 core-prim . local-tz-offset) (f5164 core-prim . microseconds) (f5163 core-prim . readdir) (f5162 core-prim . set-current-directory!) (f5161 core-prim . expand-path) (f5160 core-prim . current-directory) (f515f core-prim . %spawn) (f515e core-prim . %waitpid) (f515d core-prim . %ffi-supported?) (f515c core-prim . %ffi-pointer-ref) (f515b core-prim . %ffi-pointer->string) (f515a core-prim . %ffi-call->string-or-zero) (f5159 core-prim . %ffi-call->double) (f5158 core-prim . %ffi-call->void*) (f5157 core-prim . %ffi-call->void) (f5156 core-prim . %ffi-call->int) (f5155 core-prim . %ffi-lookup) (f5154 core-prim . %ffi-open) (f5153 core-prim . %fork) (f5152 core-prim . %pipe) (f5151 core-prim . p) (f5150 core-prim . open-output-string) (f514f core-prim . get-output-string) (f514e core-prim . get-environment-variables) (f514d core-prim . get-environment-variable) (f514c core-prim . get-timeofday) (f514b core-prim . get-command-line) (f514a core-prim . sys-display) (f5149 core-prim . whereis) (f5148 core-prim . register) (f5147 core-prim . vm-join!) (f5146 core-prim . vm-set-value!) (f5145 core-prim . vm?) (f5144 core-prim . main-vm?) (f5143 core-prim . vm-self) (f5142 core-prim . vm-start!) (f5141 core-prim . make-vm) (f5140 core-prim . mutex-try-lock!) (f513f core-prim . mutex-unlock!) (f513e core-prim . mutex-lock!) (f513d core-prim . mutex?) (f513c core-prim . make-mutex) (f513b core-prim . condition-variable-notify-all!) (f513a core-prim . condition-variable-notify!) (f5139 core-prim . condition-variable-wait!) (f5138 core-prim . make-condition-variable) (f5137 core-prim . mosh-executable-path) (f5136 core-prim . make-file-options) (f5135 core-prim . source-info) (f5134 core-prim . make-compiler-instruction) (f5133 core-prim . make-instruction) (f5132 core-prim . set-source-info!) (f5131 core-prim . bignum?) (f5130 core-prim . fast-equal?) (f512f core-prim . fasl-read) (f512e core-prim . fasl-write) (f512d core-prim . time-usage) (f512c core-prim . os-constant) (f2790 core-prim . make-parameter) (f512b core-prim . socket-port) (f512a core-prim . socket-shutdown) (f5129 core-prim . socket-close) (f5128 core-prim . socket-send) (f5127 core-prim . socket-recv!) (f5126 core-prim . socket-recv) (f5125 core-prim . make-server-socket) (f5124 core-prim . make-client-socket) (f5123 core-prim . socket-accept) (f5122 core-prim . socket?) (f5121 core-prim . string-upcase) (f5120 core-prim . string-titlecase) (f511f core-prim . string-normalize-nfkd) (f511e core-prim . string-normalize-nfkc) (f511d core-prim . string-normalize-nfd) (f511c core-prim . string-normalize-nfc) (f511b core-prim . string-foldcase) (f511a core-prim . string-downcase) (f5119 core-prim . string-ci>?) (f5118 core-prim . string-ci>=?) (f5117 core-prim . string-ci=?) (f5116 core-prim . string-ci<?) (f5115 core-prim . string-ci<=?) (f5114 core-prim . char-whitespace?) (f5113 core-prim . char-upper-case?) (f5112 core-prim . char-title-case?) (f5111 core-prim . char-numeric?) (f5110 core-prim . char-lower-case?) (f510f core-prim . char-general-category) (f510e core-prim . char-upcase) (f510d core-prim . char-titlecase) (f510c core-prim . char-foldcase) (f510b core-prim . char-downcase) (f510a core-prim . char-ci>?) (f5109 core-prim . char-ci>=?) (f5108 core-prim . char-ci=?) (f5107 core-prim . char-ci<?) (f5106 core-prim . char-ci<=?) (f5105 core-prim . char-alphabetic?) (f2cf4 core-prim . make-variable-transformer) (f2fb2 core-prim . identifier?) (f2f9e core-prim . generate-temporaries) (f2fa0 core-prim . free-identifier=?) (f2fb6 core-prim . syntax->datum) (f2fb4 core-prim . datum->syntax) (f2fa2 core-prim . bound-identifier=?) (f5104 core-prim . record-type-descriptor?) (f5103 core-prim . record-predicate) (f5102 core-prim . record-mutator) (f5101 core-prim . record-constructor) (f5100 core-prim . record-accessor) (f50ff core-prim . make-record-type-descriptor) (f50fe core-prim . make-record-constructor-descriptor) (f50fd core-prim . record?) (f50fc core-prim . record-type-uid) (f50fb core-prim . record-type-sealed?) (f50fa core-prim . record-type-parent) (f50f9 core-prim . record-type-opaque?) (f50f8 core-prim . record-type-name) (f50f7 core-prim . record-type-generative?) (f50f6 core-prim . record-type-field-names) (f50f5 core-prim . record-rtd) (f50f4 core-prim . record-field-mutable?) (f50f3 core-prim . delete-file) (f50f2 core-prim . file-exists?) (f50f1 core-prim . vector-sort!) (f50f0 core-prim . vector-sort) (f50ef core-prim . list-sort) (f50ee core-prim . symbol-hash) (f50ed core-prim . string-ci-hash) (f50ec core-prim . string-hash) (f50eb core-prim . equal-hash) (f50ea core-prim . hashtable-equivalence-function) (f50e9 core-prim . make-hashtable) (f50e8 core-prim . hashtable-hash-function) (f50e7 core-prim . make-eqv-hashtable) (f50e6 core-prim . make-eq-hashtable) (f50e5 core-prim . hashtable?) (f50e4 core-prim . hashtable-update!) (f50e3 core-prim . hashtable-size) (f50e2 core-prim . hashtable-set!) (f50e1 core-prim . hashtable-ref) (f50e0 core-prim . hashtable-mutable?) (f50df core-prim . hashtable-keys) (f50de core-prim . hashtable-entries) (f50dd core-prim . hashtable-delete!) (f50dc core-prim . hashtable-copy) (f50db core-prim . hashtable-contains?) (f50da core-prim . hashtable-clear!) (f50d9 core-prim . call-with-output-file) (f50d8 core-prim . call-with-input-file) (f50d7 core-prim . write-char) (f50d6 core-prim . write) (f50d5 core-prim . with-output-to-file) (f50d4 core-prim . with-input-from-file) (f50d3 core-prim . read-char) (f50d2 core-prim . read) (f50d1 core-prim . peek-char) (f50d0 core-prim . open-output-file) (f50cf core-prim . open-input-file) (f50ce core-prim . newline) (f50cd core-prim . display) (f50cc core-prim . close-output-port) (f50cb core-prim . close-input-port) (f50ca core-prim . eof-object?) (f50c9 core-prim . eof-object) (f50c8 core-prim . current-error-port) (f50c7 core-prim . current-output-port) (f50c6 core-prim . current-input-port) (f50c5 core-prim . output-port?) (f50c4 core-prim . input-port?) (f50c3 core-prim . utf-8-codec) (f50c2 core-prim . utf-16-codec) (f50c1 core-prim . transcoder-error-handling-mode) (f50c0 core-prim . transcoder-eol-style) (f50bf core-prim . transcoder-codec) (f50be core-prim . transcoded-port) (f50bd core-prim . textual-port?) (f50bc core-prim . string->bytevector) (f50bb core-prim . standard-output-port) (f50ba core-prim . standard-input-port) (f50b9 core-prim . standard-error-port) (f50b8 core-prim . set-port-position!) (f50b7 core-prim . put-u8) (f50b6 core-prim . put-string) (f50b5 core-prim . put-datum) (f50b4 core-prim . put-char) (f50b3 core-prim . put-bytevector) (f50b2 core-prim . port?) (f50b1 core-prim . port-transcoder) (f50b0 core-prim . port-position) (f50af core-prim . port-has-set-port-position!?) (f50ae core-prim . port-has-port-position?) (f50ad core-prim . port-eof?) (f50ac core-prim . output-port-buffer-mode) (f50ab core-prim . open-string-output-port) (f50aa core-prim . open-string-input-port) (f50a9 core-prim . open-file-output-port) (f50a8 core-prim . open-file-input/output-port) (f50a7 core-prim . open-file-input-port) (f50a6 core-prim . open-bytevector-output-port) (f50a5 core-prim . open-bytevector-input-port) (f50a4 core-prim . native-transcoder) (f50a3 core-prim . native-eol-style) (f50a2 core-prim . make-transcoder) (f50a1 core-prim . latin-1-codec) (f4b72 core-prim . make-i/o-write-error) (f4b5d core-prim . make-i/o-read-error) (f4c13 core-prim . make-i/o-port-error) (f4b89 core-prim . make-i/o-invalid-position-error) (f4ba4 core-prim . make-i/o-filename-error) (f4bbd core-prim . make-i/o-file-protection-error) (f4bd2 core-prim . make-i/o-file-is-read-only-error) (f4bfc core-prim . make-i/o-file-does-not-exist-error) (f4be7 core-prim . make-i/o-file-already-exists-error) (f4b48 core-prim . make-i/o-error) (f4c43 core-prim . make-i/o-encoding-error) (f4c2c core-prim . make-i/o-decoding-error) (f50a0 core-prim . make-custom-textual-output-port) (f509f core-prim . make-custom-textual-input/output-port) (f509e core-prim . make-custom-textual-input-port) (f509d core-prim . make-custom-binary-output-port) (f509c core-prim . make-custom-binary-input/output-port) (f509b core-prim . make-custom-binary-input-port) (f509a core-prim . make-bytevector) (f5099 core-prim . lookahead-u8) (f5098 core-prim . lookahead-char) (f4b74 core-prim . i/o-write-error?) (f4b5f core-prim . i/o-read-error?) (f4c17 core-prim . i/o-port-error?) (f4b8d core-prim . i/o-invalid-position-error?) (f4ba8 core-prim . i/o-filename-error?) (f4bbf core-prim . i/o-file-protection-error?) (f4bd4 core-prim . i/o-file-is-read-only-error?) (f4bfe core-prim . i/o-file-does-not-exist-error?) (f4be9 core-prim . i/o-file-already-exists-error?) (f4b4a core-prim . i/o-error?) (f4b8f core-prim . i/o-error-position) (f4c19 core-prim . i/o-error-port) (f4baa core-prim . i/o-error-filename) (f4c47 core-prim . i/o-encoding-error?) (f4c49 core-prim . i/o-encoding-error-char) (f4c2e core-prim . i/o-decoding-error?) (f5097 core-prim . get-u8) (f5096 core-prim . get-string-n!) (f5095 core-prim . get-string-n) (f5094 core-prim . get-string-all) (f5093 core-prim . get-line) (f5092 core-prim . get-datum) (f5091 core-prim . get-char) (f5090 core-prim . get-bytevector-some) (f508f core-prim . get-bytevector-n!) (f508e core-prim . get-bytevector-n) (f508d core-prim . get-bytevector-all) (f508c core-prim . flush-output-port) (f508b core-prim . close-port) (f2f8c core-prim . scheme-report-environment) (f508a core-prim . quotient) (f2f8a core-prim . null-environment) (f5089 core-prim . remainder) (f5088 core-prim . modulo) (f5087 core-prim . inexact->exact) (f5086 core-prim . force) (f5085 core-prim . exact->inexact) (f5084 core-prim . make-promise) (f5083 core-prim . exit) (f4d7e core-prim . command-line) (f5082 core-prim . string-fill!) (f5081 core-prim . string-set!) (f5080 core-prim . set-cdr!) (f507f core-prim . set-car!) (f507e core-prim . remove) (f507d core-prim . remv) (f507c core-prim . remp) (f507b core-prim . remq) (f507a core-prim . partition) (f5079 core-prim . memv) (f5078 core-prim . memq) (f5077 core-prim . memp) (f5076 core-prim . member) (f5075 core-prim . exists) (f5074 core-prim . for-all) (f5073 core-prim . fold-right) (f5072 core-prim . fold-left) (f5071 core-prim . find) (f5070 core-prim . filter) (f506f core-prim . cons*) (f506e core-prim . assv) (f506d core-prim . assq) (f506c core-prim . assp) (f506b core-prim . assoc) (f506a core-prim . call-with-string-output-port) (f5069 core-prim . call-with-port) (f5068 core-prim . call-with-bytevector-output-port) (f5067 core-prim . bytevector->string) (f5066 core-prim . buffer-mode?) (f5065 core-prim . binary-port?) (f5064 core-prim . with-exception-handler) (f5063 core-prim . raise-continuable) (f5062 core-prim . raise) (f2f90 core-prim . eval) (f2f88 core-prim . environment) (f5061 core-prim . make-enumeration) (f5060 core-prim . enum-set=?) (f505f core-prim . enum-set-universe) (f505e core-prim . enum-set-union) (f505d core-prim . enum-set-subset?) (f505c core-prim . enum-set-projection) (f505b core-prim . enum-set-member?) (f505a core-prim . enum-set-intersection) (f5059 core-prim . enum-set-indexer) (f5058 core-prim . enum-set-difference) (f5057 core-prim . enum-set-constructor) (f5056 core-prim . enum-set-complement) (f5055 core-prim . enum-set->list) (f4abe core-prim . who-condition?) (f4a36 core-prim . warning?) (f4a75 core-prim . violation?) (f4b35 core-prim . undefined-violation?) (f4b1c core-prim . syntax-violation?) (f4b20 core-prim . syntax-violation-subform) (f4b1e core-prim . syntax-violation-form) (f2fb0 core-prim . syntax-violation) (f5054 core-prim . simple-conditions) (f4a4b core-prim . serious-condition?) (f4ad5 core-prim . non-continuable-violation?) (f4a1f core-prim . message-condition?) (f4aba core-prim . make-who-condition) (f4a34 core-prim . make-warning) (f4a73 core-prim . make-violation) (f4b33 core-prim . make-undefined-violation) (f4b16 core-prim . make-syntax-violation) (f4a49 core-prim . make-serious-condition) (f4ad3 core-prim . make-non-continuable-violation) (f4a1b core-prim . make-message-condition) (f4afd core-prim . make-lexical-violation) (f4a9f core-prim . make-irritants-condition) (f4ae8 core-prim . make-implementation-restriction-violation) (f4a5e core-prim . make-error) (f4a88 core-prim . make-assertion-violation) (f4aff core-prim . lexical-violation?) (f4aa3 core-prim . irritants-condition?) (f4aea core-prim . implementation-restriction-violation?) (f4a60 core-prim . error?) (f4ac0 core-prim . condition-who) (f5053 core-prim . condition-predicate) (f4a21 core-prim . condition-message) (f4aa5 core-prim . condition-irritants) (f5052 core-prim . condition-accessor) (f5051 core-prim . condition) (f4a8a core-prim . assertion-violation?) (f5050 core-prim . condition?) (f504f core-prim . utf32->string) (f504e core-prim . utf16->string) (f504d core-prim . utf8->string) (f504c core-prim . uint-list->bytevector) (f504b core-prim . u8-list->bytevector) (f504a core-prim . string->utf8) (f5049 core-prim . string->utf32) (f5048 core-prim . string->utf16) (f5047 core-prim . sint-list->bytevector) (f5046 core-prim . native-endianness) (f5045 core-prim . bytevector?) (f5044 core-prim . bytevector=?) (f5043 core-prim . bytevector-uint-set!) (f5042 core-prim . bytevector-uint-ref) (f5041 core-prim . bytevector-u8-set!) (f5040 core-prim . bytevector-u8-ref) (f503f core-prim . bytevector-u64-set!) (f503e core-prim . bytevector-u64-ref) (f503d core-prim . bytevector-u64-native-set!) (f503c core-prim . bytevector-u64-native-ref) (f503b core-prim . bytevector-u32-set!) (f503a core-prim . bytevector-u32-ref) (f5039 core-prim . bytevector-u32-native-set!) (f5038 core-prim . bytevector-u32-native-ref) (f5037 core-prim . bytevector-u16-set!) (f5036 core-prim . bytevector-u16-ref) (f5035 core-prim . bytevector-u16-native-set!) (f5034 core-prim . bytevector-u16-native-ref) (f5033 core-prim . bytevector-sint-set!) (f5032 core-prim . bytevector-sint-ref) (f5031 core-prim . bytevector-s8-set!) (f5030 core-prim . bytevector-s8-ref) (f502f core-prim . bytevector-s64-set!) (f502e core-prim . bytevector-s64-ref) (f502d core-prim . bytevector-s64-native-set!) (f502c core-prim . bytevector-s64-native-ref) (f502b core-prim . bytevector-s32-set!) (f502a core-prim . bytevector-s32-ref) (f5029 core-prim . bytevector-s32-native-set!) (f5028 core-prim . bytevector-s32-native-ref) (f5027 core-prim . bytevector-s16-set!) (f5026 core-prim . bytevector-s16-ref) (f5025 core-prim . bytevector-s16-native-set!) (f5024 core-prim . bytevector-s16-native-ref) (f5023 core-prim . bytevector-length) (f5022 core-prim . bytevector-ieee-single-ref) (f5021 core-prim . bytevector-ieee-single-set!) (f5020 core-prim . bytevector-ieee-single-native-set!) (f501f core-prim . bytevector-ieee-single-native-ref) (f501e core-prim . bytevector-ieee-double-set!) (f501d core-prim . bytevector-ieee-double-ref) (f501c core-prim . bytevector-ieee-double-native-set!) (f501b core-prim . bytevector-ieee-double-native-ref) (f501a core-prim . bytevector-fill!) (f5019 core-prim . bytevector-copy!) (f5018 core-prim . bytevector-copy) (f5017 core-prim . bytevector->uint-list) (f5016 core-prim . bytevector->u8-list) (f5015 core-prim . bytevector->sint-list) (f4c73 core-prim . no-nans-violation?) (f4c5e core-prim . no-infinities-violation?) (f4c71 core-prim . make-no-nans-violation) (f4c5c core-prim . make-no-infinities-violation) (f5014 core-prim . real->flonum) (f5013 core-prim . flzero?) (f5012 core-prim . fltruncate) (f5011 core-prim . fltan) (f5010 core-prim . flsqrt) (f500f core-prim . flsin) (f500e core-prim . flround) (f500d core-prim . flpositive?) (f500c core-prim . flonum?) (f500b core-prim . flodd?) (f500a core-prim . flnumerator) (f5009 core-prim . flnegative?) (f5008 core-prim . flnan?) (f5007 core-prim . flmod0) (f5006 core-prim . flmod) (f5005 core-prim . flmin) (f5004 core-prim . flmax) (f5003 core-prim . fllog) (f5002 core-prim . flinteger?) (f5001 core-prim . flinfinite?) (f5000 core-prim . flfloor) (f4fff core-prim . flfinite?) (f4ffe core-prim . flexpt) (f4ffd core-prim . flexp) (f4ffc core-prim . fleven?) (f4ffb core-prim . fldiv0-and-mod0) (f4ffa core-prim . fldiv0) (f4ff9 core-prim . fldiv-and-mod) (f4ff8 core-prim . fldiv) (f4ff7 core-prim . fldenominator) (f4ff6 core-prim . flcos) (f4ff5 core-prim . flceiling) (f4ff4 core-prim . flatan) (f4ff3 core-prim . flasin) (f4ff2 core-prim . flacos) (f4ff1 core-prim . flabs) (f4ff0 core-prim . fl>?) (f4fef core-prim . fl>=?) (f4fee core-prim . fl=?) (f4fed core-prim . fl<?) (f4fec core-prim . fl<=?) (f4feb core-prim . fl/) (f4fea core-prim . fl-) (f4fe9 core-prim . fl+) (f4fe8 core-prim . fl*) (f4fe7 core-prim . fixnum->flonum) (f4fe6 core-prim . fxzero?) (f4fe5 core-prim . fxxor) (f4fe4 core-prim . fxrotate-bit-field) (f4fe3 core-prim . fxreverse-bit-field) (f4fe2 core-prim . fxpositive?) (f4fe1 core-prim . fxodd?) (f4fe0 core-prim . fxnot) (f4fdf core-prim . fxnegative?) (f4fde core-prim . fxmod0) (f4fdd core-prim . fxmod) (f4fdc core-prim . fxmin) (f4fdb core-prim . fxmax) (f4fda core-prim . fxlength) (f4fd9 core-prim . fxior) (f4fd8 core-prim . fxif) (f4fd7 core-prim . fxfirst-bit-set) (f4fd6 core-prim . fxeven?) (f4fd5 core-prim . fxdiv0-and-mod0) (f4fd4 core-prim . fxdiv0) (f4fd3 core-prim . fxdiv-and-mod) (f4fd2 core-prim . fxdiv) (f4fd1 core-prim . fxcopy-bit-field) (f4fd0 core-prim . fxcopy-bit) (f4fcf core-prim . fxbit-set?) (f4fce core-prim . fxbit-field) (f4fcd core-prim . fxbit-count) (f4fcc core-prim . fxarithmetic-shift-right) (f4fcb core-prim . fxarithmetic-shift-left) (f4fca core-prim . fxarithmetic-shift) (f4fc9 core-prim . fxand) (f4fc8 core-prim . fx>?) (f4fc7 core-prim . fx>=?) (f4fc6 core-prim . fx=?) (f4fc5 core-prim . fx<?) (f4fc4 core-prim . fx<=?) (f4fc3 core-prim . fx-/carry) (f4fc2 core-prim . fx-) (f4fc1 core-prim . fx+/carry) (f4fc0 core-prim . fx+) (f4fbf core-prim . fx*/carry) (f4fbe core-prim . fx*) (f4fbd core-prim . greatest-fixnum) (f4fbc core-prim . least-fixnum) (f4fbb core-prim . fixnum-width) (f4fba core-prim . fixnum?) (f4fb9 core-prim . bitwise-rotate-bit-field) (f4fb8 core-prim . bitwise-reverse-bit-field) (f4fb7 core-prim . bitwise-length) (f4fb6 core-prim . bitwise-if) (f4fb5 core-prim . bitwise-first-bit-set) (f4fb4 core-prim . bitwise-copy-bit-field) (f4fb3 core-prim . bitwise-copy-bit) (f4fb2 core-prim . bitwise-bit-set?) (f4fb1 core-prim . bitwise-bit-field) (f4fb0 core-prim . bitwise-bit-count) (f4faf core-prim . bitwise-xor) (f4fae core-prim . bitwise-ior) (f4fad core-prim . bitwise-and) (f4fac core-prim . bitwise-not) (f4fab core-prim . bitwise-arithmetic-shift-right) (f4faa core-prim . bitwise-arithmetic-shift-left) (f4fa9 core-prim . bitwise-arithmetic-shift) (f4fa8 core-prim . zero?) (f4fa7 core-prim . vector?) (f4fa6 core-prim . vector-set!) (f4fa5 core-prim . vector-ref) (f4fa4 core-prim . vector-map) (f4fa3 core-prim . vector-length) (f4fa2 core-prim . vector-for-each) (f4fa1 core-prim . vector-fill!) (f4fa0 core-prim . vector->list) (f4f9f core-prim . vector) (f4f9e core-prim . values) (f4f9d core-prim . truncate) (f4f9c core-prim . tan) (f4f9b core-prim . symbol?) (f4f9a core-prim . symbol=?) (f4f99 core-prim . symbol->string) (f4f98 core-prim . substring) (f4f97 core-prim . string?) (f4f96 core-prim . string>?) (f4f95 core-prim . string>=?) (f4f94 core-prim . string=?) (f4f93 core-prim . string<?) (f4f92 core-prim . string<=?) (f4f91 core-prim . string-ref) (f4f90 core-prim . string-length) (f4f8f core-prim . string-for-each) (f4f8e core-prim . string-copy) (f4f8d core-prim . string-append) (f4f8c core-prim . string->symbol) (f4f8b core-prim . string->number) (f4f8a core-prim . string->list) (f4f89 core-prim . string) (f4f88 core-prim . sqrt) (f4f87 core-prim . sin) (f4f86 core-prim . round) (f4f85 core-prim . reverse) (f4f84 core-prim . real?) (f4f83 core-prim . real-valued?) (f4f82 core-prim . real-part) (f4f81 core-prim . rationalize) (f4f80 core-prim . rational?) (f4f7f core-prim . rational-valued?) (f4f7e core-prim . procedure?) (f4f7d core-prim . positive?) (f4f7c core-prim . pair?) (f4f7b core-prim . odd?) (f4f7a core-prim . numerator) (f4f79 core-prim . number?) (f4f78 core-prim . number->string) (f4f77 core-prim . null?) (f4f76 core-prim . not) (f4f75 core-prim . negative?) (f4f74 core-prim . nan?) (f4f73 core-prim . min) (f4f72 core-prim . max) (f4f71 core-prim . map) (f4f70 core-prim . make-vector) (f4f6f core-prim . make-string) (f4f6e core-prim . make-rectangular) (f4f6d core-prim . make-polar) (f4f6c core-prim . magnitude) (f4f6b core-prim . log) (f4f6a core-prim . list?) (f4f69 core-prim . list-tail) (f4f68 core-prim . list-ref) (f4f67 core-prim . list->vector) (f4f66 core-prim . list->string) (f4f65 core-prim . list) (f4f64 core-prim . length) (f4f63 core-prim . lcm) (f4f62 core-prim . integer?) (f4f61 core-prim . integer-valued?) (f4f60 core-prim . integer->char) (f4f5f core-prim . infinite?) (f4f5e core-prim . inexact?) (f4f5d core-prim . inexact) (f4f5c core-prim . imag-part) (f4f5b core-prim . gcd) (f4f5a core-prim . for-each) (f4f59 core-prim . floor) (f4f58 core-prim . finite?) (f4f57 core-prim . expt) (f4f56 core-prim . exp) (f4f55 core-prim . exact?) (f4f54 core-prim . exact-integer-sqrt) (f4f53 core-prim . exact) (f4f52 core-prim . even?) (f4f51 core-prim . error) (f4f50 core-prim . eqv?) (f4f4f core-prim . equal?) (f4f4e core-prim . eq?) (f4f4d core-prim . dynamic-wind) (f4f4c core-prim . div0-and-mod0) (f4f4b core-prim . mod0) (f4f4a core-prim . div0) (f4f49 core-prim . div-and-mod) (f4f48 core-prim . mod) (f4f47 core-prim . div) (f4f46 core-prim . denominator) (f4f45 core-prim . cos) (f4f44 core-prim . cons) (f4f43 core-prim . complex?) (f4f42 core-prim . char?) (f4f41 core-prim . char>?) (f4f40 core-prim . char>=?) (f4f3f core-prim . char=?) (f4f3e core-prim . char<?) (f4f3d core-prim . char<=?) (f4f3c core-prim . char->integer) (f4f3b core-prim . ceiling) (f4f3a core-prim . call-with-values) (f4f39 core-prim . call/cc) (f4f38 core-prim . call-with-current-continuation) (f4f37 core-prim . cddddr) (f4f36 core-prim . cdddar) (f4f35 core-prim . cddadr) (f4f34 core-prim . cddaar) (f4f33 core-prim . cdaddr) (f4f32 core-prim . cdadar) (f4f31 core-prim . cdaadr) (f4f30 core-prim . cdaaar) (f4f2f core-prim . cadddr) (f4f2e core-prim . caddar) (f4f2d core-prim . cadadr) (f4f2c core-prim . cadaar) (f4f2b core-prim . caaddr) (f4f2a core-prim . caadar) (f4f29 core-prim . caaadr) (f4f28 core-prim . caaaar) (f4f27 core-prim . cdddr) (f4f26 core-prim . cddar) (f4f25 core-prim . cdadr) (f4f24 core-prim . cdaar) (f4f23 core-prim . caddr) (f4f22 core-prim . cadar) (f4f21 core-prim . caadr) (f4f20 core-prim . caaar) (f4f1f core-prim . cddr) (f4f1e core-prim . cdar) (f4f1d core-prim . cadr) (f4f1c core-prim . caar) (f4f1b core-prim . cdr) (f4f1a core-prim . car) (f4f19 core-prim . boolean?) (f4f18 core-prim . boolean=?) (f4f17 core-prim . atan) (f4f16 core-prim . assertion-violation) (f2faa core-prim . assertion-error) (f4f15 core-prim . asin) (f4f14 core-prim . apply) (f4f13 core-prim . append) (f4f12 core-prim . angle) (f4f11 core-prim . acos) (f4f10 core-prim . abs) (f4f0f core-prim . /) (f4f0e core-prim . *) (f4f0d core-prim . -) (f4f0c core-prim . +) (f4f0b core-prim . >=) (f4f0a core-prim . >) (f4f09 core-prim . =) (f4f08 core-prim . <=) (f4f07 core-prim . <) (f4f06 core-prim . library) (f4f05 $core-rtd &no-nans-rtd &no-nans-rcd) (f4f04 $core-rtd &no-infinities-rtd &no-infinities-rcd) (f4f03 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (f4f02 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (f4f01 $core-rtd &i/o-port-rtd &i/o-port-rcd) (f4f00 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (f4eff $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (f4efe $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (f4efd $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (f4efc $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (f4efb $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (f4efa $core-rtd &i/o-write-rtd &i/o-write-rcd) (f4ef9 $core-rtd &i/o-read-rtd &i/o-read-rcd) (f4ef8 $core-rtd &i/o-rtd &i/o-rcd) (f4ef7 $core-rtd &undefined-rtd &undefined-rcd) (f4ef6 $core-rtd &syntax-rtd &syntax-rcd) (f4ef5 $core-rtd &lexical-rtd &lexical-rcd) (f4ef4 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (f4ef3 $core-rtd &non-continuable-rtd &non-continuable-rcd) (f4ef2 $core-rtd &who-rtd &who-rcd) (f4ef1 $core-rtd &irritants-rtd &irritants-rcd) (f4ef0 $core-rtd &assertion-rtd &assertion-rcd) (f4eef $core-rtd &violation-rtd &violation-rcd) (f4eee $core-rtd &error-rtd &error-rcd) (f4eed $core-rtd &serious-rtd &serious-rcd) (f4eec $core-rtd &warning-rtd &warning-rcd) (f4eeb $core-rtd &message-rtd &message-rcd) (f4eea $core-rtd &condition-rtd &condition-rcd) (f4ee9 macro . define-condition-type) (f4ee8 macro . define-enumeration) (f4ee7 macro . define-record-type) (f4ee6 macro . parent-rtd) (f4ee5 macro . nongenerative) (f4ee4 macro . opaque) (f4ee3 macro . sealed) (f4ee2 macro . protocol) (f4ee1 macro . parent) (f4ee0 macro . immutable) (f4edf macro . mutable) (f4ede macro . fields) (f4edd macro . error-handling-mode) (f4edc macro . file-options) (f4edb macro . buffer-mode) (f4eda macro . eol-style) (f4ed9 macro . guard) (f4ed8 macro . trace-define) (f4ed7 macro . trace-lambda) (f4ed6 macro . unsyntax-splicing) (f4ed5 macro . unsyntax) (f4ed4 macro . unquote-splicing) (f4ed3 macro . unquote) (f4ed2 macro . _) (f4ed1 macro . else) (f4ed0 macro . =>) (f4ecf macro . ...) (f4ece macro . assert) (f4ecd macro . endianness) (f4ecc macro . delay) (f4ecb macro . time) (f4eca macro . do) (f4ec9 macro . cond) (f4ec8 macro . let*) (f4ec7 macro . let) (f4ec6 macro . let*-values) (f4ec5 macro . let-values) (f4ec4 macro . identifier-syntax) (f4ec3 macro . with-syntax) (f4ec2 macro . quasisyntax) (f4ec1 macro . quasiquote) (f4ec0 macro . syntax-rules) (f4ebf macro . include) (f4ebe macro . define-struct) (f4ebd core-macro . record-constructor-descriptor) (f4ebc core-macro . record-type-descriptor) (f4ebb macro . case) (f4eba macro . parameterize) (f4eb9 macro . unless) (f4eb8 macro . when) (f4eb7 core-macro . or) (f4eb6 core-macro . and) (f4eb5 core-macro . if) (f4eb4 core-macro . letrec*) (f4eb3 core-macro . letrec) (f4eb2 core-macro . type-descriptor) (f4eb1 core-macro . case-lambda) (f4eb0 core-macro . lambda) (f4eaf core-macro . syntax) (f4eae core-macro . syntax-case) (f4ead core-macro . quote) (f4eac core-macro . foreign-call) (f4eab letrec-syntax) (f4eaa let-syntax) (f4ea9 set!) (f4ea8 import) (f4ea7 begin) (f4ea6 module) (f4ea5 define-syntax) (f4ea4 define)) values values '#f '#f '#f '#f) (f2adf@f297e@install-library 'f51a5 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . f5184) (eval-core . f5183) (set-symbol-value! . f5182) (symbol-value . f5181) (gensym . f5180) (void . f517f)) '() values values '#f '#f '#f '#f) (f2adf@f297e@install-library 'f51a6 '(mosh) '() '() '() '() '((set-symbol-value! . f5182) (symbol-value . f5181) (regexp? . f517d) (read-line . f517c) (ungensym . f517b) (alist->eq-hash-table . f517a) (assoc-ref . f5179) (print . f5178) (format . f5177) (host-os . f5176) (library-path . f295d) (standard-library-path . f5175) (file-newer? . f5174) (stat-mtime . f5173) (write-to-file . f5172) (file->list . f5171) (file->string . f5170) (digit->integer . f516f) (call-with-string-input-port . f516e) (call-with-string-io . f516d) (string-split . f516c) (bytevector-for-each . f516b) (string->regexp . f516a) (rxmatch . f5169) (regexp-replace-all . f5168) (hashtable-for-each . f5167) (readdir . f5163) (set-current-directory! . f5162) (expand-path . f5161) (current-directory . f5160) (p . f5151) (get-timeofday . f514c) (get-command-line . f514b) (sys-display . f514a) (whereis . f5149) (register . f5148) (vm-join! . f5147) (vm-set-value! . f5146) (vm? . f5145) (main-vm? . f5144) (vm-self . f5143) (vm-start! . f5142) (make-vm . f5141) (mutex-try-lock! . f5140) (mutex-unlock! . f513f) (mutex-lock! . f513e) (mutex? . f513d) (make-mutex . f513c) (condition-variable-notify-all! . f513b) (condition-variable-notify! . f513a) (condition-variable-wait! . f5139) (make-condition-variable . f5138) (mosh-executable-path . f5137) (make-file-options . f5136) (source-info . f5135) (make-compiler-instruction . f5134) (make-instruction . f5133) (set-source-info! . f5132) (bignum? . f5131) (fast-equal? . f5130) (fasl-read . f512f) (fasl-write . f512e) (time-usage . f512d) (os-constant . f512c) (time . f4ecb) (include . f4ebf)) '() values values '#f '#f '#f '#f) (f2adf@f297e@install-library 'f51a7 '(system) '() '() '() '() '((call-process . f5166) (local-tz-offset . f5165) (microseconds . f5164) (expand-path . f5161) (%spawn . f515f) (%waitpid . f515e) (%ffi-supported? . f515d) (%ffi-pointer-ref . f515c) (%ffi-pointer->string . f515b) (%ffi-call->string-or-zero . f515a) (%ffi-call->double . f5159) (%ffi-call->void* . f5158) (%ffi-call->void . f5157) (%ffi-call->int . f5156) (%ffi-lookup . f5155) (%ffi-open . f5154) (%fork . f5153) (%pipe . f5152) (open-output-string . f5150) (get-output-string . f514f) (get-environment-variables . f514e) (get-environment-variable . f514d) (make-parameter . f2790) (socket-port . f512b) (socket-shutdown . f512a) (socket-close . f5129) (socket-send . f5128) (socket-recv! . f5127) (socket-recv . f5126) (make-server-socket . f5125) (make-client-socket . f5124) (socket-accept . f5123) (socket? . f5122) (parameterize . f4eba)) '() values values '#f '#f '#f '#f))
((lambda (f4d6d@add-library-path! f4d6f@parse-and-add-library-path f4d71@for-each-with-index f4d73@rpad f4d75@condition-printer f4d77@record->field-alist f4d79@map-with-index f4d7b@repl f4d7d@trace-printer f4d7f@command-line f4d81@local-library-path f4d83@load/args f4d85@load f4d87@ironscheme-build f4d89@eval-top-level f4d8b@compile-system-libraries f4d8d@compile f4d8f@compile->closure f4d91@pre-compile-r6rs-file f4d93@load-r6rs-top-level f4d95@load-r6rs-top-level-sexp) (begin (set! f4d6d@add-library-path! (lambda (f4db8@path) (f2acf@f295e@library-path (append (f2acf@f295e@library-path) (list f4db8@path))))) (set! f4d6f@parse-and-add-library-path (lambda (f4dba@paths f4dbb@message) ((lambda (f4dbe@t) (if f4dbe@t ((lambda (f4dc0@paths) (for-each (lambda (f4dc2@path) (if (file-exists? f4dc2@path) (f4d6d@add-library-path! (expand-path f4dc2@path)) (format (current-error-port) f4dbb@message f4dc2@path))) (reverse (string-split f4dc0@paths '#\:)))) f4dbe@t) (void))) f4dba@paths))) (set! f4d71@for-each-with-index (lambda (f4dc4@proc f4dc5@lst) (letrec ((f4dc8@loop (lambda (f4dca@i f4dcb@lst) (if (null? f4dcb@lst) (if '#f '#f (void)) (begin (f4dc4@proc f4dca@i (car f4dcb@lst)) (f4dc8@loop (+ f4dca@i '1) (cdr f4dcb@lst))))))) (f4dc8@loop '1 f4dc5@lst)))) (set! f4d73@rpad (lambda (f4dce@str f4dcf@pad f4dd0@n) ((lambda (f4dd4@rest) ((letrec ((f4dd6@loop (lambda (f4dd8@rest f4dd9@ret) (if (<= f4dd8@rest '0) f4dd9@ret (f4dd6@loop (- f4dd8@rest '1) (string-append f4dd9@ret f4dcf@pad)))))) f4dd6@loop) f4dd4@rest (format '"~a" f4dce@str))) (- f4dd0@n (string-length (format '"~a" f4dce@str)))))) (set! f4d75@condition-printer (lambda (f4ddc@e f4ddd@port) ((lambda (f4de1@max-condition-len) (begin (set! f4de1@max-condition-len (apply max (map (lambda (f4df2@c) (string-length (symbol->string (record-type-name (record-rtd f4df2@c))))) (simple-conditions f4ddc@e)))) (begin (display '" Condition components:\n" f4ddd@port) (f4d71@for-each-with-index (lambda (f4de2@i f4de3@x) ((lambda (f4de6@rtd f4de7@fields-alist) (begin (format f4ddd@port '" ~d. ~a" f4de2@i (f4d73@rpad (symbol->string (record-type-name f4de6@rtd)) '" " f4de1@max-condition-len)) (if (null? f4de7@fields-alist) (newline f4ddd@port) (void)) ((letrec ((f4dea@loop (lambda (f4dec@first f4ded@fields-alist) (if (null? f4ded@fields-alist) '() ((lambda (f4df0@field) (begin (if (not f4dec@first) (display (f4d73@rpad '"" '" " (+ '4 f4de1@max-condition-len)) f4ddd@port) (void)) (display '"       " f4ddd@port) (display (car f4df0@field) f4ddd@port) (display '": " f4ddd@port) (write (cdr f4df0@field) f4ddd@port) (newline f4ddd@port) (f4dea@loop '#f (cdr f4ded@fields-alist)))) (car f4ded@fields-alist)))))) f4dea@loop) '#t f4de7@fields-alist))) (record-rtd f4de3@x) (f4d77@record->field-alist f4de3@x))) (simple-conditions f4ddc@e))))) '#f))) (set! f4d77@record->field-alist (lambda (f4df4@r) ((lambda (f4df7@ref) (begin (set! f4df7@ref (lambda (f4e02@rtd f4e03@i f4e04@x) ((lambda (f4e08@val) (if (symbol? f4e08@val) (ungensym f4e08@val) f4e08@val)) ((record-accessor f4e02@rtd f4e03@i) f4e04@x)))) ((letrec ((f4df8@loop (lambda (f4dfa@ret f4dfb@rtd) (if f4dfb@rtd (f4df8@loop (append f4dfa@ret (f4d79@map-with-index (lambda (f4dfe@i f4dff@field) (cons f4dff@field (f4df7@ref f4dfb@rtd f4dfe@i f4df4@r))) (vector->list (record-type-field-names f4dfb@rtd)))) (record-type-parent f4dfb@rtd)) f4dfa@ret)))) f4df8@loop) '() (record-rtd f4df4@r)))) '#f))) (set! f4d79@map-with-index (lambda (f4e0a@proc f4e0b@lst) ((letrec ((f4e0e@loop (lambda (f4e10@i f4e11@lst f4e12@ret) (if (null? f4e11@lst) (reverse f4e12@ret) (f4e0e@loop (+ f4e10@i '1) (cdr f4e11@lst) (cons (f4e0a@proc f4e10@i (car f4e11@lst)) f4e12@ret)))))) f4e0e@loop) '0 f4e0b@lst '()))) (set! f4d7b@repl (lambda f4e16@x ((lambda (f4e19@rec) (begin (set! f4e19@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (f4e1c@f4e1a) (lambda () (with-exception-handler (lambda (f4e1e@e) ((call/cc (lambda (f4e20@f4e1b) (f4e1c@f4e1a (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? f4e1e@e) (f4d75@condition-printer f4e1e@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" f4e1e@e))) (f4e20@f4e1b (lambda () (raise-continuable f4e1e@e)))))))))) (lambda () ((letrec ((f4e22@loop (lambda (f4e24@line f4e25@accum) ((lambda (f4e29@parentheses-ok? f4e2b@eval-string-print) (begin (set! f4e29@parentheses-ok? (lambda (f4e30@text) ((letrec ((f4e32@loop (lambda (f4e34@chars f4e35@p0 f4e36@p1) (if (null? f4e34@chars) (= '0 f4e35@p0 f4e36@p1) ((lambda (f4e3a@t) (if (memv f4e3a@t '(#\()) (f4e32@loop (cdr f4e34@chars) (+ f4e35@p0 '1) f4e36@p1) (if (memv f4e3a@t '(#\))) (f4e32@loop (cdr f4e34@chars) (- f4e35@p0 '1) f4e36@p1) (if (memv f4e3a@t '(#\[)) (f4e32@loop (cdr f4e34@chars) f4e35@p0 (+ f4e36@p1 '1)) (if (memv f4e3a@t '(#\])) (f4e32@loop (cdr f4e34@chars) f4e35@p0 (- f4e36@p1 '1)) (f4e32@loop (cdr f4e34@chars) f4e35@p0 f4e36@p1)))))) (car f4e34@chars)))))) f4e32@loop) (string->list f4e30@text) '0 '0))) (set! f4e2b@eval-string-print (lambda (f4e2e@text) (if (not (or (string=? '"\n" f4e2e@text) (= '0 (string-length f4e2e@text)))) (write (f4d89@eval-top-level (call-with-port (open-string-input-port f4e2e@text) read))) (void)))) (if (eof-object? f4e24@line) (begin (f4e2b@eval-string-print f4e25@accum) (exit)) ((lambda (f4e2c@current) (if (f4e29@parentheses-ok? f4e2c@current) (f4e2b@eval-string-print f4e2c@current) (f4e22@loop (get-line (current-input-port)) f4e2c@current))) (string-append f4e25@accum f4e24@line))))) '#f '#f)))) f4e22@loop) (get-line (current-input-port)) '""))))))) (newline) (f4e19@rec)))) (f4e19@rec))) '#f))) (set! f4d7d@trace-printer (f2867@f2791@make-parameter write)) (set! f4d7f@command-line (f2867@f2791@make-parameter (get-command-line))) (set! f4d81@local-library-path (lambda (f4e3c@filename) (cons (expand-path '".") (f2acf@f295e@library-path)))) (set! f4d83@load/args (lambda (f4e3e@filename . f4e40@args) (begin (apply f4d93@load-r6rs-top-level f4e3e@filename 'load f4e40@args) (void)))) (set! f4d85@load (lambda (f4e42@filename) (begin (apply f4d93@load-r6rs-top-level f4e42@filename 'load (f4d7f@command-line)) (void)))) (set! f4d87@ironscheme-build (lambda () (f4d85@load '"ironscheme-buildscript.ss"))) (set! f4d89@eval-top-level (lambda (f4e44@x) (f4999@f2f91@eval f4e44@x (f49af@f2fbd@interaction-environment)))) (set! f4d8b@compile-system-libraries (lambda () (f4d89@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! f4d8d@compile (lambda (f4e46@filename) (f4d93@load-r6rs-top-level f4e46@filename 'compile))) (set! f4d8f@compile->closure (lambda (f4e48@filename) (f4d93@load-r6rs-top-level f4e48@filename 'closure))) (set! f4d91@pre-compile-r6rs-file (lambda (f4e4a@filename) (f4d93@load-r6rs-top-level f4e4a@filename 'compile))) (set! f4d93@load-r6rs-top-level (lambda (f4e4c@filename f4e4d@how . f4e50@args) ((lambda (f4e56@f4e53 f4e57@f4e55) ((lambda (f4e5a@swap) (dynamic-wind f4e5a@swap (lambda () ((lambda (f4e5c@x*) ((lambda (f4e5e@t) (if (memv f4e5e@t '(closure)) (f49ae@f2fbb@pre-compile-r6rs-top-level f4e5c@x*) (if (memv f4e5e@t '(load)) ((lambda (f4e64@f4e61 f4e65@f4e63) ((lambda (f4e68@swap) (dynamic-wind f4e68@swap (lambda () ((f49ad@f2fb9@compile-r6rs-top-level f4e5c@x*))) f4e68@swap)) (lambda () ((lambda (f4e6a@t) (begin (f4e64@f4e61 f4e65@f4e63) (set! f4e65@f4e63 f4e6a@t))) (f4e64@f4e61))))) f4d7f@command-line (cons f4e4c@filename (car f4e50@args))) (if (memv f4e5e@t '(compile)) (begin (f49ad@f2fb9@compile-r6rs-top-level f4e5c@x*) (f2ad3@f2966@serialize-all f2862@f2787@serialize-library f28bc@f2875@compile-core-expr)) (if '#f '#f (void)))))) f4e4d@how)) (with-input-from-file f4e4c@filename (lambda () ((letrec ((f4e6c@f (lambda () ((lambda (f4e6e@x) (if (eof-object? f4e6e@x) '() (cons f4e6e@x (f4e6c@f)))) (f285a@f2777@read-annotated))))) f4e6c@f)))))) f4e5a@swap)) (lambda () ((lambda (f4e70@t) (begin (f4e56@f4e53 f4e57@f4e55) (set! f4e57@f4e55 f4e70@t))) (f4e56@f4e53))))) f2acf@f295e@library-path (f4d81@local-library-path f4e4c@filename)))) (set! f4d95@load-r6rs-top-level-sexp (lambda (f4e72@import-spec f4e73@thunk) ((lambda (f4e7a@f4e77 f4e7b@f4e79) ((lambda (f4e7e@swap) (dynamic-wind f4e7e@swap (lambda () ((lambda (f4e84@f4e81 f4e85@f4e83) ((lambda (f4e88@swap) (dynamic-wind f4e88@swap (lambda () ((f49ad@f2fb9@compile-r6rs-top-level (list (cons 'import f4e72@import-spec) (list f4e73@thunk))))) f4e88@swap)) (lambda () ((lambda (f4e8a@t) (begin (f4e84@f4e81 f4e85@f4e83) (set! f4e85@f4e83 f4e8a@t))) (f4e84@f4e81))))) f4d7f@command-line '())) f4e7e@swap)) (lambda () ((lambda (f4e8c@t) (begin (f4e7a@f4e77 f4e7b@f4e79) (set! f4e7b@f4e79 f4e8c@t))) (f4e7a@f4e77))))) f2acf@f295e@library-path (f4d81@local-library-path '"")))) (begin (set! f4ea2@f4d95@load-r6rs-top-level-sexp f4d95@load-r6rs-top-level-sexp) (set! f4ea1@f4d93@load-r6rs-top-level f4d93@load-r6rs-top-level) (set! f4ea0@f4d91@pre-compile-r6rs-file f4d91@pre-compile-r6rs-file) (set! f4e9f@f4d8f@compile->closure f4d8f@compile->closure) (set! f4e9e@f4d8d@compile f4d8d@compile) (set! f4e9d@f4d8b@compile-system-libraries f4d8b@compile-system-libraries) (set! f4e9c@f4d89@eval-top-level f4d89@eval-top-level) (set! f4e9b@f4d87@ironscheme-build f4d87@ironscheme-build) (set! f4e9a@f4d85@load f4d85@load) (set! f4e99@f4d83@load/args f4d83@load/args) (set! f4e98@f4d81@local-library-path f4d81@local-library-path) (set! f4e97@f4d7f@command-line f4d7f@command-line) (set! f4e96@f4d7d@trace-printer f4d7d@trace-printer) (set! f4e95@f4d7b@repl f4d7b@repl) (set! f4e94@f4d79@map-with-index f4d79@map-with-index) (set! f4e93@f4d77@record->field-alist f4d77@record->field-alist) (set! f4e92@f4d75@condition-printer f4d75@condition-printer) (set! f4e91@f4d73@rpad f4d73@rpad) (set! f4e90@f4d71@for-each-with-index f4d71@for-each-with-index) (set! f4e8f@f4d6f@parse-and-add-library-path f4d6f@parse-and-add-library-path) (set! f4e8e@f4d6d@add-library-path! f4d6d@add-library-path!) (f2ad4@f2968@current-precompiled-library-loader f2863@f2789@load-serialized-library) (set-symbol-value! 'load f4d85@load) (set-symbol-value! 'pre-compile-r6rs-file f4d91@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs f4d89@eval-top-level) (set-symbol-value! 'int-env-syms f4990@f2f7f@interaction-environment-symbols) (set-symbol-value! 'expanded2core f28bb@f2873@expanded->core) (set-symbol-value! 'trace-printer f4d7d@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (f4d96@c) (condition (f4cca@f4ad4@make-non-continuable-violation) (f4cc0@f4abb@make-who-condition 'raise) (f4c84@f4a1c@make-message-condition '"returned from non-continuable exception") (f4cb6@f4aa0@make-irritants-condition (list f4d96@c))))) (f4d6f@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (f4d6f@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (f4d6d@add-library-path! (string-append (mosh-executable-path) '"/lib")) (f4d6d@add-library-path! (string-append (current-directory) '"/lib"))) (f4d6d@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (f4d98@prefix) (f2ad0@f2960@library-extensions (f4d98@prefix '".mosh" (f2ad0@f2960@library-extensions)))) (lambda (f4d9a@ext f4d9b@ls) (append (map (lambda (f4d9e@x) (string-append f4d9a@ext f4d9e@x)) f4d9b@ls) f4d9b@ls))) ((lambda (f4da0@args f4da1@port) ((lambda (f4da5@ref) (begin (set! f4da5@ref (lambda (f4db0@rtd f4db1@i f4db2@x) ((lambda (f4db6@val) (if (symbol? f4db6@val) (ungensym f4db6@val) f4db6@val)) ((record-accessor f4db0@rtd f4db1@i) f4db2@x)))) (with-exception-handler (lambda (f4da6@c) (if (condition? f4da6@c) (f4d75@condition-printer f4da6@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" f4da6@c))) (lambda () (if ((call/cc (lambda (f4daa@f4da8) (lambda () (with-exception-handler (lambda (f4dac@c) ((call/cc (lambda (f4dae@f4da9) (f4daa@f4da8 (lambda () (if '#t '#f (f4dae@f4da9 (lambda () (raise-continuable f4dac@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (f4d95@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? f4da0@args) (f4d7b@repl) (f4d93@load-r6rs-top-level (car f4da0@args) 'load (cdr f4da0@args)))))))) '#f)) (f4d7f@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
