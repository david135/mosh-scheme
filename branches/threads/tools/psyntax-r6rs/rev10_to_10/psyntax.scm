;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (z2773@read-annotated z2775@annotation-stripped z2777@annotation? z2779@annotation-source z277b@annotation-expression z277d@scm->fasl z277f@fasl-save z2781@fasl-load z2783@serialize-library z2785@load-serialized-library z2787@make-record-printer z2789@compile-core z278b@read-library-source-file z278d@make-parameter z27f5@file-options-spec) (begin (set! z2773@read-annotated read) (set! z2775@annotation-stripped (lambda (z27f6@x) (z277b@annotation-expression z27f6@x))) (set! z2777@annotation? (lambda (z27f8@x) (source-info z27f8@x))) (set! z2779@annotation-source (lambda (z27fa@x) (source-info z27fa@x))) (set! z277b@annotation-expression (lambda (z27fc@x) (if (pair? z27fc@x) (cons (car z27fc@x) (cdr z27fc@x)) (display '"line:46\n")))) (set! z277d@scm->fasl (lambda (z27fe@filename) (string-append z27fe@filename '".fasl"))) (set! z277f@fasl-save (lambda (z2800@filename z2801@obj) (call-with-port (open-file-output-port z2800@filename) (lambda (z2804@port) ((symbol-value 'fasl-write!) z2801@obj z2804@port))))) (set! z2781@fasl-load (lambda (z2806@filename) (call-with-port (open-file-input-port z2806@filename) (symbol-value 'fasl-read!)))) (set! z2783@serialize-library (lambda (z2808@filename z2809@obj) (begin (format '#t '"serialize-library ~a\n..." z2808@filename) ((lambda (z280c@expanded2core) ((lambda (z280e@compile) ((lambda (z2810@code) ((lambda (z2812@pivot) ((lambda (z2814@visit) ((lambda () (begin (set-car! z2812@pivot z2814@visit) ((lambda (z2816@pivot) ((lambda (z2818@invoke) ((lambda () (set-car! z2816@pivot z2818@invoke)))) (z280e@compile (z280c@expanded2core (car z2816@pivot))))) (cdr z2812@pivot)))))) (z280e@compile (z280c@expanded2core (car z2812@pivot))))) (cddddr (cddddr z2810@code)))) z2809@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (z281a@fasl-file) (begin (if (file-exists? z281a@fasl-file) (delete-file z281a@fasl-file) (void)) ((call/cc (lambda (z281e@z281c) (lambda () (with-exception-handler (lambda (z2820@c) ((call/cc (lambda (z2822@z281d) (z281e@z281c (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " z2808@filename) (if (file-exists? z281a@fasl-file) (delete-file z281a@fasl-file) (void)) '#f) (z2822@z281d (lambda () (raise-continuable z2820@c)))))))))) (lambda () (begin (z277f@fasl-save z281a@fasl-file z2809@obj) (display '"OK\n")))))))))) (z277d@scm->fasl z2808@filename))))) (set! z2785@load-serialized-library (lambda (z2824@filename z2825@obj) ((lambda (z2828@fasl-file) (if (and (file-exists? z2828@fasl-file) ((symbol-value 'file-newer?) z2828@fasl-file z2824@filename)) ((lambda (z282a@expanded2core) ((lambda (z282c@eval-compiled-core) ((lambda (z282e@code) ((lambda (z2830@pivot) ((lambda (z2832@visit) ((lambda (z2834@visit-proc) ((lambda () (begin (set-car! z2830@pivot z2834@visit-proc) ((lambda (z2836@pivot) ((lambda (z2838@invoke) ((lambda () (begin (set-car! z2836@pivot (lambda () (z282c@eval-compiled-core z2838@invoke))) (apply z2825@obj z282e@code))))) (car z2836@pivot))) (cdr z2830@pivot)) '#t)))) (lambda () (z282c@eval-compiled-core z2832@visit)))) (car z2830@pivot))) (cddddr (cddddr z282e@code)))) (z2781@fasl-load z2828@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (z277d@scm->fasl z2824@filename)))) (set! z2787@make-record-printer (lambda (z283a@name z283b@printer) (lambda z283e@x (begin (display '"record printer") (for-each display z283e@x))))) (set! z2789@compile-core (lambda z2840@x (apply error 'comile-core '"not implementated" z2840@x))) (set! z278b@read-library-source-file (lambda (z2842@file-name) (with-input-from-file z2842@file-name z2773@read-annotated))) (set! z278d@make-parameter (lambda z2852 ((lambda (z2853) (if (= z2853 '1) (apply (lambda (z2844@x) (z278d@make-parameter z2844@x (lambda (z2846@x) z2846@x))) z2852) (if (= z2853 '2) (apply (lambda (z2848@x z2849@fender) ((lambda (z284c@x) (lambda z2850 ((lambda (z2851) (if (= z2851 '0) (apply (lambda () z284c@x) z2850) (if (= z2851 '1) (apply (lambda (z284e@v) (set! z284c@x (z2849@fender z284e@v))) z2850) (error 'apply '"invalid arg count")))) (length z2850)))) (z2849@fender z2848@x))) z2852) (error 'apply '"invalid arg count")))) (length z2852)))) (set! z27f5@file-options-spec (lambda (z2854@x) z2854@x)) (begin (set! z2864@z27f5@file-options-spec z27f5@file-options-spec) (set! z2863@z278d@make-parameter z278d@make-parameter) (set! z2862@z278b@read-library-source-file z278b@read-library-source-file) (set! z2861@z2789@compile-core z2789@compile-core) (set! z2860@z2787@make-record-printer z2787@make-record-printer) (set! z285f@z2785@load-serialized-library z2785@load-serialized-library) (set! z285e@z2783@serialize-library z2783@serialize-library) (set! z285d@z2781@fasl-load z2781@fasl-load) (set! z285c@z277f@fasl-save z277f@fasl-save) (set! z285b@z277d@scm->fasl z277d@scm->fasl) (set! z285a@z277b@annotation-expression z277b@annotation-expression) (set! z2859@z2779@annotation-source z2779@annotation-source) (set! z2858@z2777@annotation? z2777@annotation?) (set! z2857@z2775@annotation-stripped z2775@annotation-stripped) (set! z2856@z2773@read-annotated z2773@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (z2869@current-primitive-locations z286b@mutable? z286d@rewriter z286f@expanded->core z2871@compile-core-expr z2873@pretty-print z2875@compile-core-expr-to-port) (begin (set! z2869@current-primitive-locations (z2863@z278d@make-parameter (lambda (z2876@x) '#f) (lambda (z2878@p) z2878@p))) (set! z286b@mutable? (lambda (z287a@x) (or (pair? z287a@x) (vector? z287a@x) (hashtable? z287a@x)))) (set! z286d@rewriter (lambda (z287c@quote-hack?) ((lambda (z287f@f) (begin (set! z287f@f (lambda (z2880@x) (if (pair? z2880@x) ((lambda (z2882@t) (if (memv z2882@t '(quote)) (if (and z287c@quote-hack? (z286b@mutable? (cadr z2880@x))) ((lambda (z2884@g) (begin (set-symbol-value! z2884@g (cadr z2880@x)) z2884@g)) (gensym)) z2880@x) (if (memv z2882@t '(case-lambda)) (cons 'case-lambda (map (lambda (z2886@x) (cons (car z2886@x) (map z287f@f (cdr z2886@x)))) (cdr z2880@x))) (if (memv z2882@t '(lambda)) (cons* 'lambda (cadr z2880@x) (map z287f@f (cddr z2880@x))) (if (memv z2882@t '(letrec)) ((lambda (z2888@bindings z2889@body*) ((lambda (z288c@lhs* z288d@rhs*) (cons* 'letrec (map list z288c@lhs* (map z287f@f z288d@rhs*)) (map z287f@f z2889@body*))) (map car z2888@bindings) (map cadr z2888@bindings))) (cadr z2880@x) (cddr z2880@x)) (if (memv z2882@t '(letrec*)) ((lambda (z2890@bindings z2891@body*) ((lambda (z2894@lhs* z2895@rhs*) (cons* 'letrec* (map list z2894@lhs* (map z287f@f z2895@rhs*)) (map z287f@f z2891@body*))) (map car z2890@bindings) (map cadr z2890@bindings))) (cadr z2880@x) (cddr z2880@x)) (if (memv z2882@t '(library-letrec*)) ((lambda (z2898@name z2899@x) ((lambda (z289c@bindings z289d@body*) ((lambda (z28a0@lhs* z28a1@lhs** z28a2@rhs*) (cons* 'library-letrec* z2898@name (map list z28a0@lhs* z28a1@lhs** (map z287f@f z28a2@rhs*)) (map z287f@f z289d@body*))) (map car z289c@bindings) (map cadr z289c@bindings) (map caddr z289c@bindings))) (cadr z2899@x) (cddr z2899@x))) (cadr z2880@x) (cdr z2880@x)) (if (memv z2882@t '(begin)) (cons 'begin (map z287f@f (cdr z2880@x))) (if (memv z2882@t '(set!)) (list 'set! (cadr z2880@x) (z287f@f (caddr z2880@x))) (if (memv z2882@t '(primitive)) ((lambda (z28a6@op) ((lambda (z28a8@t) (if z28a8@t ((lambda (z28aa@loc) z28aa@loc) z28a8@t) z28a6@op)) ((z2869@current-primitive-locations) z28a6@op))) (cadr z2880@x)) (if (memv z2882@t '(define)) z2880@x (if (list? z2880@x) (map z287f@f z2880@x) (error 'rewrite '"invalid form ~s ~s" z2880@x (list? z2880@x)))))))))))))) (car z2880@x)) z2880@x))) z287f@f)) '#f))) (set! z286f@expanded->core (lambda (z28ac@x) ((z286d@rewriter '#f) z28ac@x))) (set! z2871@compile-core-expr (lambda (z28ae@x) ((z286d@rewriter '#f) z28ae@x))) (set! z2873@pretty-print write) (set! z2875@compile-core-expr-to-port (lambda (z28b0@x z28b1@p) (z2873@pretty-print ((z286d@rewriter '#f) z28b0@x) z28b1@p))) (begin (set! z28ba@z2875@compile-core-expr-to-port z2875@compile-core-expr-to-port) (set! z28b9@z2873@pretty-print z2873@pretty-print) (set! z28b8@z2871@compile-core-expr z2871@compile-core-expr) (set! z28b7@z286f@expanded->core z286f@expanded->core) (set! z28b6@z286d@rewriter z286d@rewriter) (set! z28b5@z286b@mutable? z286b@mutable?) (set! z28b4@z2869@current-primitive-locations z2869@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (z2909@make-collection z290b@current-library-collection z2911@z290c z2913@z290e z2915@z290d z2918@library? z291a@make-library z291c@library-id z291e@library-name z2920@library-version z2922@library-imp* z2924@library-vis* z2926@library-inv* z2928@library-subst z292a@library-env z292c@library-visit-state z292e@library-invoke-state z2930@library-visit-code z2932@library-invoke-code z2934@library-visible? z2936@library-source-file-name z2938@set-library-id! z293a@set-library-name! z293c@set-library-version! z293e@set-library-imp*! z2940@set-library-vis*! z2942@set-library-inv*! z2944@set-library-subst! z2946@set-library-env! z2948@set-library-visit-state! z294a@set-library-invoke-state! z294c@set-library-visit-code! z294e@set-library-invoke-code! z2950@set-library-visible?! z2952@set-library-source-file-name! z2954@rp z2956@find-dependencies z2958@find-library-by z295a@library-path z295c@library-extensions z295e@library-name->file-name z2960@file-locator z2962@serialize-all z2964@current-precompiled-library-loader z2966@try-load-from-file z2968@library-loader z296a@current-library-expander z296c@external-pending-libraries z296e@find-external-library z2970@find-library-by-name z2972@library-exists? z2974@find-library-by-spec/die z2976@label->binding-table z2978@install-library-record z297a@install-library z297c@imported-label->binding z297e@invoke-library z2980@visit-library z2982@invoke-library-by-spec z2984@installed-libraries z2986@library-spec) (begin (set! z2909@make-collection (lambda () ((lambda (z2987@set) ((lambda (z298a@set-cons) (begin (set! z298a@set-cons (lambda (z298f@x z2990@ls) (if (memq z298f@x z2990@ls) z2990@ls (cons z298f@x z2990@ls)))) (lambda z298d ((lambda (z298e) (if (= z298e '0) (apply (lambda () z2987@set) z298d) (if (= z298e '1) (apply (lambda (z298b@x) (set! z2987@set (z298a@set-cons z298b@x z2987@set))) z298d) (error 'apply '"invalid arg count")))) (length z298d))))) '#f)) '()))) (set! z290b@current-library-collection (z2863@z278d@make-parameter (z2909@make-collection) (lambda (z2993@x) (begin (if (not (procedure? z2993@x)) (assertion-violation 'current-library-collection '"not a procedure" z2993@x) (void)) z2993@x)))) (set! z2911@z290c (make-record-type-descriptor 'library '#f 'z290f '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! z2913@z290e '#f) (set! z2915@z290d (make-record-constructor-descriptor z2911@z290c '#f z2913@z290e)) (set! z2918@library? (record-predicate z2911@z290c)) (set! z291a@make-library (record-constructor z2915@z290d)) (set! z291c@library-id (record-accessor z2911@z290c '0)) (set! z291e@library-name (record-accessor z2911@z290c '1)) (set! z2920@library-version (record-accessor z2911@z290c '2)) (set! z2922@library-imp* (record-accessor z2911@z290c '3)) (set! z2924@library-vis* (record-accessor z2911@z290c '4)) (set! z2926@library-inv* (record-accessor z2911@z290c '5)) (set! z2928@library-subst (record-accessor z2911@z290c '6)) (set! z292a@library-env (record-accessor z2911@z290c '7)) (set! z292c@library-visit-state (record-accessor z2911@z290c '8)) (set! z292e@library-invoke-state (record-accessor z2911@z290c '9)) (set! z2930@library-visit-code (record-accessor z2911@z290c '10)) (set! z2932@library-invoke-code (record-accessor z2911@z290c '11)) (set! z2934@library-visible? (record-accessor z2911@z290c '12)) (set! z2936@library-source-file-name (record-accessor z2911@z290c '13)) (set! z2938@set-library-id! (record-mutator z2911@z290c '0)) (set! z293a@set-library-name! (record-mutator z2911@z290c '1)) (set! z293c@set-library-version! (record-mutator z2911@z290c '2)) (set! z293e@set-library-imp*! (record-mutator z2911@z290c '3)) (set! z2940@set-library-vis*! (record-mutator z2911@z290c '4)) (set! z2942@set-library-inv*! (record-mutator z2911@z290c '5)) (set! z2944@set-library-subst! (record-mutator z2911@z290c '6)) (set! z2946@set-library-env! (record-mutator z2911@z290c '7)) (set! z2948@set-library-visit-state! (record-mutator z2911@z290c '8)) (set! z294a@set-library-invoke-state! (record-mutator z2911@z290c '9)) (set! z294c@set-library-visit-code! (record-mutator z2911@z290c '10)) (set! z294e@set-library-invoke-code! (record-mutator z2911@z290c '11)) (set! z2950@set-library-visible?! (record-mutator z2911@z290c '12)) (set! z2952@set-library-source-file-name! (record-mutator z2911@z290c '13)) (set! z2954@rp (z2860@z2787@make-record-printer 'library (lambda (z2995@x z2996@p z2997@wr) (begin (if (not (z2918@library? z2995@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (z2920@library-version z2995@x)) (z291e@library-name z2995@x) (append (z291e@library-name z2995@x) (list (z2920@library-version z2995@x))))) z2996@p))))) (set! z2956@find-dependencies (lambda (z299b@ls) (if (null? z299b@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! z2958@find-library-by (lambda (z299d@pred) ((letrec ((z299f@f (lambda (z29a1@ls) (if (null? z29a1@ls) '#f (if (z299d@pred (car z29a1@ls)) (car z29a1@ls) (z299f@f (cdr z29a1@ls))))))) z299f@f) ((z290b@current-library-collection))))) (set! z295a@library-path (z2863@z278d@make-parameter '(".") (lambda (z29a3@x) (if (and (list? z29a3@x) (for-all string? z29a3@x)) (map (lambda (z29a5@x) z29a5@x) z29a3@x) (assertion-violation 'library-path '"not a list of strings" z29a3@x))))) (set! z295c@library-extensions (z2863@z278d@make-parameter '(".sls" ".ss" ".scm") (lambda (z29a7@x) (if (and (list? z29a7@x) (for-all string? z29a7@x)) (map (lambda (z29a9@x) z29a9@x) z29a7@x) (assertion-violation 'library-extensions '"not a list of strings" z29a7@x))))) (set! z295e@library-name->file-name (lambda (z29ab@x) (call-with-values (lambda () (open-string-output-port)) (lambda (z29b1@z29ae z29b2@z29b0) ((lambda (z29b5@extract z29b6@p) ((lambda (z29ba@display-hex) (begin (set! z29ba@display-hex (lambda (z29c3@n) (if (<= '0 z29c3@n '9) (display z29c3@n z29b6@p) (display (integer->char (+ (char->integer '#\a) (- z29c3@n '10))) z29b6@p)))) (begin ((letrec ((z29bb@f (lambda (z29bd@ls) (if (not (null? z29bd@ls)) (begin (display '"/" z29b6@p) (for-each (lambda (z29bf@c) (if (or (char<=? '#\a z29bf@c '#\z) (char<=? '#\A z29bf@c '#\Z) (char<=? '#\0 z29bf@c '#\9) (memv z29bf@c '(#\- #\. #\_ #\~))) (display z29bf@c z29b6@p) (begin (display '"%" z29b6@p) ((lambda (z29c1@n) (begin (z29ba@display-hex (quotient z29c1@n '16)) (z29ba@display-hex (remainder z29c1@n '16)))) (char->integer z29bf@c))))) (string->list (symbol->string (car z29bd@ls)))) (z29bb@f (cdr z29bd@ls))) (void))))) z29bb@f) z29ab@x) (z29b5@extract)))) '#f)) z29b2@z29b0 z29b1@z29ae))))) (set! z2960@file-locator (z2863@z278d@make-parameter (lambda (z29c5@x) ((lambda (z29c7@str) ((letrec ((z29c9@f (lambda (z29cb@ls z29cc@exts z29cd@failed-list) (if (null? z29cb@ls) ((lambda () ((lambda (z29d9@z29d4 z29db@z29d6 z29dd@z29d5 z29e0@z29d3 z29e2@make-library-resolution-condition z29e4@z29d1 z29e6@z29d2 z29e8@library-resolution-condition? z29ea@condition-library z29ec@condition-files) (begin (set! z29d9@z29d4 (make-record-type-descriptor '&library-resolution z4c7a@z49c1@&condition-rtd 'z29d7 '#f '#f '#((immutable library) (immutable files)))) (set! z29db@z29d6 '#f) (set! z29dd@z29d5 (make-record-constructor-descriptor z29d9@z29d4 z4c7b@z49c3@&condition-rcd z29db@z29d6)) (set! z29e0@z29d3 (record-predicate z29d9@z29d4)) (set! z29e2@make-library-resolution-condition (record-constructor z29dd@z29d5)) (set! z29e4@z29d1 (record-accessor z29d9@z29d4 '0)) (set! z29e6@z29d2 (record-accessor z29d9@z29d4 '1)) (set! z29e8@library-resolution-condition? (condition-predicate z29d9@z29d4)) (set! z29ea@condition-library (condition-accessor z29d9@z29d4 z29e4@z29d1)) (set! z29ec@condition-files (condition-accessor z29d9@z29d4 z29e6@z29d2)) (raise (condition (z4c9a@z4a5b@make-error) (z4cbc@z4ab7@make-who-condition 'expander) (z4c80@z4a18@make-message-condition '"cannot locate library in library-path") (z29e2@make-library-resolution-condition z29c5@x (reverse z29cd@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? z29cc@exts) (z29c9@f (cdr z29cb@ls) (z295c@library-extensions) z29cd@failed-list) ((lambda (z29ed@name) (if (file-exists? z29ed@name) z29ed@name (z29c9@f z29cb@ls (cdr z29cc@exts) (cons z29ed@name z29cd@failed-list)))) (string-append (car z29cb@ls) z29c7@str (car z29cc@exts)))))))) z29c9@f) (z295a@library-path) (z295c@library-extensions) '())) (z295e@library-name->file-name z29c5@x))) (lambda (z29ef@f) (if (procedure? z29ef@f) z29ef@f (assertion-violation 'file-locator '"not a procedure" z29ef@f))))) (set! z2962@serialize-all (lambda (z29f1@serialize z29f2@compile) ((lambda (z29f6@library-desc) (begin (set! z29f6@library-desc (lambda (z29f9@x) (list (z291c@library-id z29f9@x) (z291e@library-name z29f9@x)))) (for-each (lambda (z29f7@x) (if (z2936@library-source-file-name z29f7@x) (z29f1@serialize (z2936@library-source-file-name z29f7@x) (list (z291c@library-id z29f7@x) (z291e@library-name z29f7@x) (z2920@library-version z29f7@x) (map z29f6@library-desc (z2922@library-imp* z29f7@x)) (map z29f6@library-desc (z2924@library-vis* z29f7@x)) (map z29f6@library-desc (z2926@library-inv* z29f7@x)) (z2928@library-subst z29f7@x) (z292a@library-env z29f7@x) (z29f2@compile (z2930@library-visit-code z29f7@x)) (z29f2@compile (z2932@library-invoke-code z29f7@x)) (z2934@library-visible? z29f7@x))) (void))) ((z290b@current-library-collection))))) '#f))) (set! z2964@current-precompiled-library-loader (z2863@z278d@make-parameter (lambda (z29fb@filename z29fc@sk) '#f))) (set! z2966@try-load-from-file (lambda (z29ff@filename) ((z2964@current-precompiled-library-loader) z29ff@filename (lambda z2a25 ((lambda (z2a26) (if (= z2a26 '11) (apply (lambda (z2a01@id z2a02@name z2a03@ver z2a04@imp* z2a05@vis* z2a06@inv* z2a07@exp-subst z2a08@exp-env z2a09@visit-proc z2a0a@invoke-proc z2a0b@visible?) ((letrec ((z2a17@f (lambda (z2a19@deps) (if (null? z2a19@deps) (begin (z297a@install-library z2a01@id z2a02@name z2a03@ver z2a04@imp* z2a05@vis* z2a06@inv* z2a07@exp-subst z2a08@exp-env z2a09@visit-proc z2a0a@invoke-proc '#f '#f z2a0b@visible? '#f) '#t) ((lambda (z2a1b@d) ((lambda (z2a1d@label z2a1e@dname) ((lambda (z2a21@l) (if (and (z2918@library? z2a21@l) (eq? z2a1d@label (z291c@library-id z2a21@l))) (z2a17@f (cdr z2a19@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" z2a02@name z2a1e@dname z29ff@filename z2a21@l z2a1d@label (z291c@library-id z2a21@l)) '#f))) (z2970@find-library-by-name z2a1e@dname))) (car z2a1b@d) (cadr z2a1b@d))) (car z2a19@deps)))))) z2a17@f) (append z2a04@imp* z2a05@vis* z2a06@inv*))) z2a25) (if (>= z2a26 '0) (apply (lambda z2a23@others '#f) z2a25) (error 'apply '"invalid arg count")))) (length z2a25)))))) (set! z2968@library-loader (z2863@z278d@make-parameter (lambda (z2a27@x) ((lambda (z2a29@file-name) (if (not z2a29@file-name) (assertion-violation '#f '"cannot file library" z2a27@x) (or (z2966@try-load-from-file z2a29@file-name) ((z296a@current-library-expander) (z2862@z278b@read-library-source-file z2a29@file-name) z2a29@file-name (lambda (z2a2b@name) (if (not (fast-equal? z2a2b@name z2a27@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (z2a31@z2a2e z2a32@z2a30) ((lambda (z2a35@e z2a36@p) (begin (display '"expected to find library " z2a36@p) (write z2a27@x z2a36@p) (display '" in file " z2a36@p) (display z2a29@file-name z2a36@p) (display '", found " z2a36@p) (write z2a2b@name z2a36@p) (display '" instead" z2a36@p) (z2a35@e))) z2a32@z2a30 z2a31@z2a2e)))) (void))))))) ((z2960@file-locator) z2a27@x))) (lambda (z2a39@f) (if (procedure? z2a39@f) z2a39@f (assertion-violation 'library-locator '"not a procedure" z2a39@f))))) (set! z296a@current-library-expander (z2863@z278d@make-parameter (lambda (z2a3b@x) (assertion-violation 'library-expander '"not initialized")) (lambda (z2a3d@f) (if (procedure? z2a3d@f) z2a3d@f (assertion-violation 'library-expander '"not a procedure" z2a3d@f))))) (set! z296c@external-pending-libraries (z2863@z278d@make-parameter '())) (set! z296e@find-external-library (lambda (z2a3f@name) (begin (if (member z2a3f@name (z296c@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" z2a3f@name) (void)) ((lambda (z2a45@z2a42 z2a46@z2a44) ((lambda (z2a49@swap) (dynamic-wind z2a49@swap (lambda () (begin ((z2968@library-loader) z2a3f@name) (or (z2958@find-library-by (lambda (z2a4b@x) (fast-equal? (z291e@library-name z2a4b@x) z2a3f@name))) (assertion-violation '#f '"handling external library did not yield the correct library" z2a3f@name)))) z2a49@swap)) (lambda () ((lambda (z2a4d@t) (begin (z2a45@z2a42 z2a46@z2a44) (set! z2a46@z2a44 z2a4d@t))) (z2a45@z2a42))))) z296c@external-pending-libraries (cons z2a3f@name (z296c@external-pending-libraries)))))) (set! z2970@find-library-by-name (lambda (z2a4f@name) (or (z2958@find-library-by (lambda (z2a51@x) (fast-equal? (z291e@library-name z2a51@x) z2a4f@name))) (z296e@find-external-library z2a4f@name)))) (set! z2972@library-exists? (lambda (z2a53@name) (and (z2958@find-library-by (lambda (z2a55@x) (fast-equal? (z291e@library-name z2a55@x) z2a53@name))) '#t))) (set! z2974@find-library-by-spec/die (lambda (z2a57@spec) ((lambda (z2a59@id) (or (z2958@find-library-by (lambda (z2a5b@x) (eq? z2a59@id (z291c@library-id z2a5b@x)))) (assertion-violation '#f '"cannot find library with required spec" z2a57@spec))) (car z2a57@spec)))) (set! z2976@label->binding-table (make-eq-hashtable)) (set! z2978@install-library-record (lambda (z2a5d@lib) (begin ((lambda (z2a5f@exp-env) (for-each (lambda (z2a61@x) ((lambda (z2a63@label z2a64@binding) ((lambda (z2a67@binding) (begin (if (hashtable-ref z2976@label->binding-table z2a63@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" z2a63@label (hashtable-ref z2976@label->binding-table z2a63@label '#f) z2a67@binding) (exit)) (void)) (hashtable-set! z2976@label->binding-table z2a63@label z2a67@binding))) ((lambda (z2a69@t) (if (memv z2a69@t '(global)) (cons 'global (cons z2a5d@lib (cdr z2a64@binding))) (if (memv z2a69@t '(global-macro)) (cons 'global-macro (cons z2a5d@lib (cdr z2a64@binding))) (if (memv z2a69@t '(global-macro!)) (cons 'global-macro! (cons z2a5d@lib (cdr z2a64@binding))) z2a64@binding)))) (car z2a64@binding)))) (car z2a61@x) (cdr z2a61@x))) z2a5f@exp-env)) (z292a@library-env z2a5d@lib)) ((z290b@current-library-collection) z2a5d@lib)))) (set! z297a@install-library (lambda (z2a6b@id z2a6c@name z2a6d@ver z2a6e@imp* z2a6f@vis* z2a70@inv* z2a71@exp-subst z2a72@exp-env z2a73@visit-proc z2a74@invoke-proc z2a75@visit-code z2a76@invoke-code z2a77@visible? z2a78@source-file-name) ((lambda (z2a87@imp-lib* z2a88@vis-lib* z2a89@inv-lib*) (begin (if (not (and (symbol? z2a6b@id) (list? z2a6c@name) (list? z2a6d@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" z2a6b@id z2a6c@name z2a6d@ver) (void)) (if (z2972@library-exists? z2a6c@name) (assertion-violation 'install-library '"library is already installed" z2a6c@name) (void)) ((lambda (z2a8d@lib) (z2978@install-library-record z2a8d@lib)) (z291a@make-library z2a6b@id z2a6c@name z2a6d@ver z2a87@imp-lib* z2a88@vis-lib* z2a89@inv-lib* z2a71@exp-subst z2a72@exp-env z2a73@visit-proc z2a74@invoke-proc z2a75@visit-code z2a76@invoke-code z2a77@visible? z2a78@source-file-name)))) (map z2974@find-library-by-spec/die z2a6e@imp*) (map z2974@find-library-by-spec/die z2a6f@vis*) (map z2974@find-library-by-spec/die z2a70@inv*)))) (set! z297c@imported-label->binding (lambda (z2a8f@lab) (hashtable-ref z2976@label->binding-table z2a8f@lab '#f))) (set! z297e@invoke-library (lambda (z2a91@lib) ((lambda (z2a93@invoke) (if (procedure? z2a93@invoke) (begin (z294a@set-library-invoke-state! z2a91@lib (lambda () (assertion-violation 'invoke '"circularity detected" z2a91@lib))) (for-each z297e@invoke-library (z2926@library-inv* z2a91@lib)) (z294a@set-library-invoke-state! z2a91@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" z2a91@lib))) (z2a93@invoke) (z294a@set-library-invoke-state! z2a91@lib '#t)) (void))) (z292e@library-invoke-state z2a91@lib)))) (set! z2980@visit-library (lambda (z2a95@lib) ((lambda (z2a97@visit) (if (procedure? z2a97@visit) (begin (z2948@set-library-visit-state! z2a95@lib (lambda () (assertion-violation 'visit '"circularity detected" z2a95@lib))) (for-each z297e@invoke-library (z2924@library-vis* z2a95@lib)) (z2948@set-library-visit-state! z2a95@lib (lambda () (assertion-violation 'invoke '"first visit did not return" z2a95@lib))) (z2a97@visit) (z2948@set-library-visit-state! z2a95@lib '#t)) (void))) (z292c@library-visit-state z2a95@lib)))) (set! z2982@invoke-library-by-spec (lambda (z2a99@spec) (z297e@invoke-library (z2974@find-library-by-spec/die z2a99@spec)))) (set! z2984@installed-libraries (lambda z2aa1 ((lambda (z2aa2) (if (= z2aa2 '1) (apply (lambda (z2a9b@all?) ((letrec ((z2a9d@f (lambda (z2a9f@ls) (if (null? z2a9f@ls) '() (if (or z2a9b@all? (z2934@library-visible? (car z2a9f@ls))) (cons (car z2a9f@ls) (z2a9d@f (cdr z2a9f@ls))) (z2a9d@f (cdr z2a9f@ls))))))) z2a9d@f) ((z290b@current-library-collection)))) z2aa1) (if (= z2aa2 '0) (apply (lambda () (z2984@installed-libraries '#f)) z2aa1) (error 'apply '"invalid arg count")))) (length z2aa1)))) (set! z2986@library-spec (lambda (z2aa3@x) (begin (if (not (z2918@library? z2aa3@x)) (assertion-violation 'library-spec '"not a library" z2aa3@x) (void)) (list (z291c@library-id z2aa3@x) (z291e@library-name z2aa3@x) (z2920@library-version z2aa3@x))))) (begin (set! z2ae1@z2986@library-spec z2986@library-spec) (set! z2ae0@z2984@installed-libraries z2984@installed-libraries) (set! z2adf@z2982@invoke-library-by-spec z2982@invoke-library-by-spec) (set! z2ade@z2980@visit-library z2980@visit-library) (set! z2add@z297e@invoke-library z297e@invoke-library) (set! z2adc@z297c@imported-label->binding z297c@imported-label->binding) (set! z2adb@z297a@install-library z297a@install-library) (set! z2ada@z2978@install-library-record z2978@install-library-record) (set! z2ad9@z2976@label->binding-table z2976@label->binding-table) (set! z2ad8@z2974@find-library-by-spec/die z2974@find-library-by-spec/die) (set! z2ad7@z2972@library-exists? z2972@library-exists?) (set! z2ad6@z2970@find-library-by-name z2970@find-library-by-name) (set! z2ad5@z296e@find-external-library z296e@find-external-library) (set! z2ad4@z296c@external-pending-libraries z296c@external-pending-libraries) (set! z2ad3@z296a@current-library-expander z296a@current-library-expander) (set! z2ad2@z2968@library-loader z2968@library-loader) (set! z2ad1@z2966@try-load-from-file z2966@try-load-from-file) (set! z2ad0@z2964@current-precompiled-library-loader z2964@current-precompiled-library-loader) (set! z2acf@z2962@serialize-all z2962@serialize-all) (set! z2ace@z2960@file-locator z2960@file-locator) (set! z2acd@z295e@library-name->file-name z295e@library-name->file-name) (set! z2acc@z295c@library-extensions z295c@library-extensions) (set! z2acb@z295a@library-path z295a@library-path) (set! z2aca@z2958@find-library-by z2958@find-library-by) (set! z2ac9@z2956@find-dependencies z2956@find-dependencies) (set! z2ac8@z2954@rp z2954@rp) (set! z2ac7@z2952@set-library-source-file-name! z2952@set-library-source-file-name!) (set! z2ac6@z2950@set-library-visible?! z2950@set-library-visible?!) (set! z2ac5@z294e@set-library-invoke-code! z294e@set-library-invoke-code!) (set! z2ac4@z294c@set-library-visit-code! z294c@set-library-visit-code!) (set! z2ac3@z294a@set-library-invoke-state! z294a@set-library-invoke-state!) (set! z2ac2@z2948@set-library-visit-state! z2948@set-library-visit-state!) (set! z2ac1@z2946@set-library-env! z2946@set-library-env!) (set! z2ac0@z2944@set-library-subst! z2944@set-library-subst!) (set! z2abf@z2942@set-library-inv*! z2942@set-library-inv*!) (set! z2abe@z2940@set-library-vis*! z2940@set-library-vis*!) (set! z2abd@z293e@set-library-imp*! z293e@set-library-imp*!) (set! z2abc@z293c@set-library-version! z293c@set-library-version!) (set! z2abb@z293a@set-library-name! z293a@set-library-name!) (set! z2aba@z2938@set-library-id! z2938@set-library-id!) (set! z2ab9@z2936@library-source-file-name z2936@library-source-file-name) (set! z2ab8@z2934@library-visible? z2934@library-visible?) (set! z2ab7@z2932@library-invoke-code z2932@library-invoke-code) (set! z2ab6@z2930@library-visit-code z2930@library-visit-code) (set! z2ab5@z292e@library-invoke-state z292e@library-invoke-state) (set! z2ab4@z292c@library-visit-state z292c@library-visit-state) (set! z2ab3@z292a@library-env z292a@library-env) (set! z2ab2@z2928@library-subst z2928@library-subst) (set! z2ab1@z2926@library-inv* z2926@library-inv*) (set! z2ab0@z2924@library-vis* z2924@library-vis*) (set! z2aaf@z2922@library-imp* z2922@library-imp*) (set! z2aae@z2920@library-version z2920@library-version) (set! z2aad@z291e@library-name z291e@library-name) (set! z2aac@z291c@library-id z291c@library-id) (set! z2aab@z291a@make-library z291a@make-library) (set! z2aaa@z2918@library? z2918@library?) (set! z2aa9@z2915@z290d z2915@z290d) (set! z2aa8@z2913@z290e z2913@z290e) (set! z2aa7@z2911@z290c z2911@z290c) (set! z2aa6@z290b@current-library-collection z290b@current-library-collection) (set! z2aa5@z2909@make-collection z2909@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (z2ae4@build-global-define z2b55@build-lambda z2b57@build-case-lambda z2b59@build-let z2b87@build-sequence z2b89@build-void z2b8b@build-letrec z2b8d@build-letrec* z2b8f@build-library-letrec* z2b91@build-receive) (begin (set! z2ae4@build-global-define (lambda (z2b92@x) (z2b89@build-void))) (set! z2b55@build-lambda (lambda (z2b94@ae z2b95@vars z2b96@exp) (list 'lambda z2b95@vars z2b96@exp))) (set! z2b57@build-case-lambda (lambda (z2b9a@ae z2b9b@vars* z2b9c@exp*) ((lambda (z2ba1@build-error z2ba3@build-pred z2ba5@build-apply z2ba7@expand-case-lambda) (begin (set! z2ba1@build-error (lambda (z2bd8@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! z2ba3@build-pred (lambda (z2bc0@ae z2bc1@n z2bc2@vars) (call-with-values (lambda () ((letrec ((z2bca@f (lambda (z2bcc@vars z2bcd@count) (if (pair? z2bcc@vars) (z2bca@f (cdr z2bcc@vars) (+ z2bcd@count '1)) (if (null? z2bcc@vars) (values z2bcd@count '=) (values z2bcd@count '>=)))))) z2bca@f) z2bc2@vars '0)) (lambda (z2bd0@z2bc7 z2bd1@z2bc9) ((lambda (z2bd4@pred z2bd5@count) (list (list 'primitive z2bd4@pred) z2bc1@n (list 'quote z2bd5@count))) z2bd1@z2bc9 z2bd0@z2bc7))))) (set! z2ba5@build-apply (lambda (z2bb8@ae z2bb9@g z2bba@vars z2bbb@exp) (list '(primitive apply) (z2b55@build-lambda z2bb8@ae z2bba@vars z2bbb@exp) z2bb9@g))) (set! z2ba7@expand-case-lambda (lambda (z2ba8@ae z2ba9@vars z2baa@exp*) ((lambda (z2bae@g z2baf@n) (list 'lambda z2bae@g (z2b59@build-let z2ba8@ae (list z2baf@n) (list (list '(primitive length) z2bae@g)) ((letrec ((z2bb2@f (lambda (z2bb4@vars* z2bb5@exp*) (if (null? z2bb4@vars*) (z2ba1@build-error z2ba8@ae) (list 'if (z2ba3@build-pred z2ba8@ae z2baf@n (car z2bb4@vars*)) (z2ba5@build-apply z2ba8@ae z2bae@g (car z2bb4@vars*) (car z2bb5@exp*)) (z2bb2@f (cdr z2bb4@vars*) (cdr z2bb5@exp*))))))) z2bb2@f) z2b9b@vars* z2baa@exp*)))) (gensym) (gensym)))) (if (= (length z2b9c@exp*) '1) (z2b55@build-lambda z2b9a@ae (car z2b9b@vars*) (car z2b9c@exp*)) (z2ba7@expand-case-lambda z2b9a@ae z2b9b@vars* z2b9c@exp*)))) '#f '#f '#f '#f))) (set! z2b59@build-let (lambda (z2bda@ae z2bdb@lhs* z2bdc@rhs* z2bdd@body) (cons (z2b55@build-lambda z2bda@ae z2bdb@lhs* z2bdd@body) z2bdc@rhs*))) (set! z2b87@build-sequence (lambda (z2be2@ae z2be3@exps) ((letrec ((z2be6@loop (lambda (z2be8@exps) (if (null? (cdr z2be8@exps)) (car z2be8@exps) (if (equal? (car z2be8@exps) (z2b89@build-void)) (z2be6@loop (cdr z2be8@exps)) (cons 'begin z2be8@exps)))))) z2be6@loop) z2be3@exps))) (set! z2b89@build-void (lambda () '((primitive void)))) (set! z2b8b@build-letrec (lambda (z2bea@ae z2beb@vars z2bec@val-exps z2bed@body-exp) (if (null? z2beb@vars) z2bed@body-exp (list 'letrec (map list z2beb@vars z2bec@val-exps) z2bed@body-exp)))) (set! z2b8d@build-letrec* (lambda (z2bf2@ae z2bf3@vars z2bf4@val-exps z2bf5@body-exp) (if (null? z2bf3@vars) z2bf5@body-exp (z2b59@build-let z2bf2@ae z2bf3@vars (map (lambda (z2bfa@x) (list 'quote '#f)) z2bf3@vars) (z2b87@build-sequence z2bf2@ae (append (map (lambda (z2bfc@lhs z2bfd@rhs) (list 'set! z2bfc@lhs z2bfd@rhs)) z2bf3@vars z2bf4@val-exps) (list z2bf5@body-exp))))))) (set! z2b8f@build-library-letrec* (lambda (z2c00@ae z2c01@name z2c02@vars z2c03@locs z2c04@val-exps z2c05@body-exp) (list 'library-letrec* z2c01@name (map list z2c02@vars z2c03@locs z2c04@val-exps) z2c05@body-exp))) (set! z2b91@build-receive (lambda (z2c0c@ae z2c0d@vars z2c0e@producer z2c0f@body*) (begin (display '"************** in ") (cons 'receive (cons z2c0d@vars (cons z2c0e@producer z2c0f@body*)))))) (begin (set! z2c1d@z2b91@build-receive z2b91@build-receive) (set! z2c1c@z2b8f@build-library-letrec* z2b8f@build-library-letrec*) (set! z2c1b@z2b8d@build-letrec* z2b8d@build-letrec*) (set! z2c1a@z2b8b@build-letrec z2b8b@build-letrec) (set! z2c19@z2b89@build-void z2b89@build-void) (set! z2c18@z2b87@build-sequence z2b87@build-sequence) (set! z2c17@z2b59@build-let z2b59@build-let) (set! z2c16@z2b57@build-case-lambda z2b57@build-case-lambda) (set! z2c15@z2b55@build-lambda z2b55@build-lambda) (set! z2c14@z2ae4@build-global-define z2ae4@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (z2c2c@file-options-macro z2c2e@set-cons z2c30@set-union z2c35@top-mark* z2c37@top-marked? z2c39@gen-lexical z2c3b@gen-global z2c3d@gen-label z2c3f@gen-top-level-label z2c41@gen-define-label+loc z2c43@gen-define-label z2c49@z2c44 z2c4b@z2c46 z2c4d@z2c45 z2c50@rib? z2c52@make-rib z2c54@rib-sym* z2c56@rib-mark** z2c58@rib-label* z2c5a@rib-sealed/freq z2c5c@rib-cache z2c5e@set-rib-sym*! z2c60@set-rib-mark**! z2c62@set-rib-label*! z2c64@set-rib-sealed/freq! z2c66@set-rib-cache! z2c68@make-empty-rib z2c6a@extend-rib! z2c6c@extend-rib/nc! z2c6e@make-rib-map z2c70@seal-rib! z2c72@unseal-rib! z2c74@make-full-rib z2c7a@z2c75 z2c7c@z2c77 z2c7e@z2c76 z2c81@stx? z2c83@make-stx z2c85@stx-expr z2c87@stx-mark* z2c89@stx-subst* z2c8b@stx-ae* z2c8d@set-stx-expr! z2c8f@set-stx-mark*! z2c91@set-stx-subst*! z2c93@set-stx-ae*! z2c95@rp z2c97@datum->stx z2c99@gen-mark z2c9b@anti-mark z2c9d@anti-mark? z2c9f@join-wraps z2ca1@mkstx z2ca3@add-mark z2ca5@add-subst z2ca7@syntax-kind? z2ca9@syntax-vector->list z2cab@syntax-pair? z2cad@syntax-vector? z2caf@syntax-null? z2cb1@syntax-list? z2cb3@syntax-car z2cb5@syntax-cdr z2cb7@syntax->list z2cb9@id? z2cbb@id->sym z2cbd@same-marks? z2cbf@bound-id=? z2cc1@free-id=? z2cc3@valid-bound-ids? z2cc5@distinct-bound-ids? z2cc7@bound-id-member? z2cc9@self-evaluating? z2ccb@strip-annotations z2ccd@strip z2ccf@stx->datum z2cd1@same-marks*? z2cd3@id->label z2cd5@id->real-label z2cd7@label->binding z2cd9@make-binding z2cdb@binding-type z2cdd@binding-value z2cdf@raise-unbound-error z2ce1@syntax-type z2cef@sanitize-binding z2cf1@make-variable-transformer z2cf3@variable-transformer? z2cf5@variable-transformer-procedure z2cf7@make-eval-transformer z2e48@parse-define z2e4a@parse-define-syntax z2e4c@scheme-stx-hashtable z2e4e@scheme-stx z2e50@lexical-var z2e52@lexical-mutable? z2e54@set-lexical-mutable! z2e56@add-lexical z2e58@add-lexicals z2e5a@letrec-helper z2e5c@letrec-transformer z2e5e@letrec*-transformer z2e60@fluid-let-syntax-transformer z2e62@type-descriptor-transformer z2e64@record-type-descriptor-transformer z2e66@record-constructor-descriptor-transformer z2e68@when-macro z2e6a@unless-macro z2e6c@if-transformer z2e6e@and-transformer z2e70@or-transformer z2e72@case-macro z2e74@quote-transformer z2e76@case-lambda-transformer z2e78@lambda-transformer z2e7a@bless z2e7c@with-syntax-macro z2e7e@invalid-fmls-error z2e80@let-macro z2e82@let-values-macro z2e84@let*-values-macro z2e86@trace-lambda-macro z2e88@trace-define-macro z2e8a@trace-define-syntax-macro z2e8c@trace-let/rec-syntax z2e8e@trace-let-syntax-macro z2e90@trace-letrec-syntax-macro z2e92@guard-macro z2e94@define-enumeration-macro z2e96@time-macro z2e98@delay-macro z2e9a@assert-macro z2e9c@endianness-macro z2e9e@identifier-syntax-macro z2ea0@do-macro z2ea2@let*-macro z2ea4@or-macro z2ea6@and-macro z2ea8@cond-macro z2eaa@do-include z2eac@include-macro z2eae@include-into-macro z2eb0@syntax-rules-macro z2eb2@quasiquote-macro z2eb4@quasisyntax-macro z2eb6@define-struct-macro z2eb8@define-record-type-macro z2eba@define-condition-type-macro z2ebc@incorrect-usage-macro z2ebe@parameterize-macro z2ec0@foreign-call-transformer z2ec2@convert-pattern z2ec4@syntax-dispatch z2ec6@ellipsis? z2ec8@underscore? z2eca@verify-literals z2ecc@syntax-case-transformer z2ece@ellipsis-map z2ed0@syntax-transformer z2ed2@core-macro-transformer z2ed4@symbol-macro z2ed6@macro-transformer z2ed8@local-macro-transformer z2eda@do-macro-call z2edc@chi-macro z2ede@chi-local-macro z2ee0@chi-global-macro z2ee2@chi-expr* z2ee4@chi-application z2ee6@chi-expr z2ee8@chi-set! z2eea@verify-formals z2eec@chi-lambda-clause z2eee@chi-lambda-clause* z2ef0@chi-defun z2ef2@chi-rhs z2ef4@expand-interaction-rhs*/init* z2ef6@chi-rhs* z2ef8@find-bound=? z2efa@find-dups z2efc@chi-internal z2efe@parse-module z2f04@z2eff z2f06@z2f01 z2f08@z2f00 z2f0b@module-interface? z2f0d@make-module-interface z2f0f@module-interface-first-mark z2f11@module-interface-exp-id-vec z2f13@module-interface-exp-lab-vec z2f15@set-module-interface-first-mark! z2f17@set-module-interface-exp-id-vec! z2f19@set-module-interface-exp-lab-vec! z2f1b@module-interface-exp-id* z2f1d@chi-internal-module z2f1f@chi-body* z2f21@expand-transformer z2f23@parse-exports z2f25@parse-library-name z2f27@parse-library z2f29@parse-import-spec* z2f2b@make-top-rib z2f2d@make-collector z2f2f@inv-collector z2f31@vis-collector z2f33@imp-collector z2f35@chi-library-internal z2f37@chi-interaction-expr z2f39@library-body-expander z2f3b@core-library-expander z2f3d@parse-top-level-program z2f3f@top-level-expander z2f45@z2f40 z2f47@z2f42 z2f49@z2f41 z2f4c@env? z2f4e@make-env z2f50@env-names z2f52@env-labels z2f54@env-itc z2f56@set-env-names! z2f58@set-env-labels! z2f5a@set-env-itc! z2f5c@rp z2f62@z2f5d z2f64@z2f5f z2f66@z2f5e z2f69@interaction-env? z2f6b@make-interaction-env z2f6d@interaction-env-rib z2f6f@interaction-env-r z2f71@interaction-env-locs z2f73@set-interaction-env-rib! z2f75@set-interaction-env-r! z2f77@set-interaction-env-locs! z2f79@rp z2f7b@interaction-environment-symbols z2f7d@environment-bindings z2f7f@parse-binding z2f81@environment? z2f83@environment-symbols z2f85@environment z2f87@null-environment z2f89@scheme-report-environment z2f8b@expand z2f8d@eval z2f8f@library-expander z2f91@boot-library-expand z2f93@rev-map-append z2f95@build-exports z2f97@make-export-subst z2f99@make-export-env/macros z2f9b@generate-temporaries z2f9d@free-identifier=? z2f9f@bound-identifier=? z2fa1@make-source-condition z2fa3@extract-position-condition z2fa5@expression-position z2fa7@assertion-error z2fa9@syntax-error z2fab@syntax-violation* z2fad@syntax-violation z2faf@identifier? z2fb1@datum->syntax z2fb3@syntax->datum z2fb5@compile-r6rs-top-level z2fb7@pre-compile-r6rs-top-level z2fb9@interaction-environment z2fbb@top-level-context) (begin (set! z2c2c@file-options-macro (lambda (z2fbc@x) ((lambda (z2fbf@valid-option?) (begin (set! z2fbf@valid-option? (lambda (z2fc8@x) (and (z2cb9@id? z2fc8@x) (memq (z2cbb@id->sym z2fc8@x) '(no-fail no-create no-truncate))))) ((lambda (z2fc0@t) ((lambda (z2fc2@ls/false) (if (and z2fc2@ls/false (apply (lambda (z2fc4@opt*) (for-all z2fbf@valid-option? z2fc4@opt*)) z2fc2@ls/false)) (apply (lambda (z2fc6@opt*) (z2e7a@bless (list 'make-file-options (list 'quote z2fc6@opt*)))) z2fc2@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z2fc0@t))) (z2ec4@syntax-dispatch z2fc0@t '(_ . each-any)))) z2fbc@x))) '#f))) (set! z2c2e@set-cons (lambda (z2fca@x z2fcb@ls) (if (memq z2fca@x z2fcb@ls) z2fcb@ls (cons z2fca@x z2fcb@ls)))) (set! z2c30@set-union (lambda (z2fce@ls1 z2fcf@ls2) (if (null? z2fce@ls1) z2fcf@ls2 (if (memq (car z2fce@ls1) z2fcf@ls2) (z2c30@set-union (cdr z2fce@ls1) z2fcf@ls2) (cons (car z2fce@ls1) (z2c30@set-union (cdr z2fce@ls1) z2fcf@ls2)))))) (set! z2c35@top-mark* '(top)) (set! z2c37@top-marked? (lambda (z2fd2@m*) (memq 'top z2fd2@m*))) (set! z2c39@gen-lexical (lambda (z2fd4@sym) (if (symbol? z2fd4@sym) (gensym z2fd4@sym) (if (z2c81@stx? z2fd4@sym) (z2c39@gen-lexical (z2cbb@id->sym z2fd4@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" z2fd4@sym))))) (set! z2c3b@gen-global (lambda (z2fd6@x) (z2c39@gen-lexical z2fd6@x))) (set! z2c3d@gen-label (lambda (z2fd8@_) (gensym))) (set! z2c3f@gen-top-level-label (lambda (z2fda@id z2fdb@rib) ((lambda (z2fdf@find) (begin (set! z2fdf@find (lambda (z2fea@sym z2feb@mark* z2fec@sym* z2fed@mark** z2fee@label*) (and (pair? z2fec@sym*) (if (and (eq? z2fea@sym (car z2fec@sym*)) (z2cbd@same-marks? z2feb@mark* (car z2fed@mark**))) (car z2fee@label*) (z2fdf@find z2fea@sym z2feb@mark* (cdr z2fec@sym*) (cdr z2fed@mark**) (cdr z2fee@label*)))))) ((lambda (z2fe0@sym z2fe1@mark*) ((lambda (z2fe4@sym*) ((lambda (z2fe6@t) (if z2fe6@t ((lambda (z2fe8@label) (if (z2adc@z297c@imported-label->binding z2fe8@label) (gensym) z2fe8@label)) z2fe6@t) (gensym))) (and (memq z2fe0@sym (z2c54@rib-sym* z2fdb@rib)) (z2fdf@find z2fe0@sym z2fe1@mark* z2fe4@sym* (z2c56@rib-mark** z2fdb@rib) (z2c58@rib-label* z2fdb@rib))))) (z2c54@rib-sym* z2fdb@rib))) (z2cbb@id->sym z2fda@id) (z2c87@stx-mark* z2fda@id)))) '#f))) (set! z2c41@gen-define-label+loc (lambda (z2ff4@id z2ff5@rib) ((lambda (z2ff8@t) (if z2ff8@t ((lambda (z2ffa@env) ((lambda (z2ffc@label z2ffd@locs) (values z2ffc@label ((lambda (z3000@t) (if z3000@t (cdr z3000@t) ((lambda (z3002@loc) (begin (z2f77@set-interaction-env-locs! z2ffa@env (cons (cons z2ffc@label z3002@loc) z2ffd@locs)) z3002@loc)) (z2c39@gen-lexical z2ff4@id)))) (assq z2ffc@label z2ffd@locs)))) (z2c3f@gen-top-level-label z2ff4@id z2ff5@rib) (z2f71@interaction-env-locs z2ffa@env))) z2ff8@t) (values (gensym) (z2c39@gen-lexical z2ff4@id)))) (z2fbb@top-level-context)))) (set! z2c43@gen-define-label (lambda (z3004@id z3005@rib) (if (z2fbb@top-level-context) (z2c3f@gen-top-level-label z3004@id z3005@rib) (gensym)))) (set! z2c49@z2c44 (make-record-type-descriptor 'rib '#f 'z2c47 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! z2c4b@z2c46 '#f) (set! z2c4d@z2c45 (make-record-constructor-descriptor z2c49@z2c44 '#f z2c4b@z2c46)) (set! z2c50@rib? (record-predicate z2c49@z2c44)) (set! z2c52@make-rib (record-constructor z2c4d@z2c45)) (set! z2c54@rib-sym* (record-accessor z2c49@z2c44 '0)) (set! z2c56@rib-mark** (record-accessor z2c49@z2c44 '1)) (set! z2c58@rib-label* (record-accessor z2c49@z2c44 '2)) (set! z2c5a@rib-sealed/freq (record-accessor z2c49@z2c44 '3)) (set! z2c5c@rib-cache (record-accessor z2c49@z2c44 '4)) (set! z2c5e@set-rib-sym*! (record-mutator z2c49@z2c44 '0)) (set! z2c60@set-rib-mark**! (record-mutator z2c49@z2c44 '1)) (set! z2c62@set-rib-label*! (record-mutator z2c49@z2c44 '2)) (set! z2c64@set-rib-sealed/freq! (record-mutator z2c49@z2c44 '3)) (set! z2c66@set-rib-cache! (record-mutator z2c49@z2c44 '4)) (set! z2c68@make-empty-rib (lambda () (z2c52@make-rib '() '() '() '#f '#f))) (set! z2c6a@extend-rib! (lambda (z3008@rib z3009@id z300a@label) ((lambda (z300f@find) (begin (set! z300f@find (lambda (z301c@sym z301d@mark* z301e@sym* z301f@mark** z3020@label*) (and (pair? z301e@sym*) (if (and (eq? z301c@sym (car z301e@sym*)) (z2cbd@same-marks? z301d@mark* (car z301f@mark**))) z3020@label* (z300f@find z301c@sym z301d@mark* (cdr z301e@sym*) (cdr z301f@mark**) (cdr z3020@label*)))))) (begin (if (z2c5a@rib-sealed/freq z3008@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" z3008@rib) (void)) ((lambda (z3010@sym z3011@mark*) ((lambda (z3014@sym*) ((lambda (z3016@t) (if z3016@t ((lambda (z3018@p) (if (not (eq? z300a@label (car z3018@p))) (if (z2fbb@top-level-context) (set-car! z3018@p z300a@label) (z2fad@syntax-violation '#f '"multiple definitions of identifier" z3009@id)) (void))) z3016@t) (begin (if (z2c5c@rib-cache z3008@rib) (hashtable-update! (z2c5c@rib-cache z3008@rib) z3010@sym (lambda (z301a@e) (cons (cons z3011@mark* z300a@label) z301a@e)) '()) (void)) (z2c5e@set-rib-sym*! z3008@rib (cons z3010@sym z3014@sym*)) (z2c60@set-rib-mark**! z3008@rib (cons z3011@mark* (z2c56@rib-mark** z3008@rib))) (z2c62@set-rib-label*! z3008@rib (cons z300a@label (z2c58@rib-label* z3008@rib)))))) (and (memq z3010@sym (z2c54@rib-sym* z3008@rib)) (z300f@find z3010@sym z3011@mark* z3014@sym* (z2c56@rib-mark** z3008@rib) (z2c58@rib-label* z3008@rib))))) (z2c54@rib-sym* z3008@rib))) (z2cbb@id->sym z3009@id) (z2c87@stx-mark* z3009@id))))) '#f))) (set! z2c6c@extend-rib/nc! (lambda (z3026@rib z3027@id z3028@label) ((lambda (z302c@sym z302d@mark*) ((lambda (z3030@sym*) (begin (if (z2c5c@rib-cache z3026@rib) (hashtable-update! (z2c5c@rib-cache z3026@rib) z302c@sym (lambda (z3032@e) (cons (cons z302d@mark* z3028@label) z3032@e)) '()) (void)) (z2c5e@set-rib-sym*! z3026@rib (cons z302c@sym z3030@sym*)) (z2c60@set-rib-mark**! z3026@rib (cons z302d@mark* (z2c56@rib-mark** z3026@rib))) (z2c62@set-rib-label*! z3026@rib (cons z3028@label (z2c58@rib-label* z3026@rib))))) (z2c54@rib-sym* z3026@rib))) (z2cbb@id->sym z3027@id) (z2c87@stx-mark* z3027@id)))) (set! z2c6e@make-rib-map (lambda (z3034@sym*) ((lambda (z3036@ht) ((letrec ((z3038@f (lambda (z303a@i z303b@sym*) (if (null? z303b@sym*) z3036@ht (begin (hashtable-update! z3036@ht (car z303b@sym*) (lambda (z303e@x) (cons z303a@i z303e@x)) '()) (z3038@f (+ z303a@i '1) (cdr z303b@sym*))))))) z3038@f) '0 z3034@sym*)) (make-eq-hashtable)))) (set! z2c70@seal-rib! (lambda (z3040@rib) ((lambda (z3042@sym*) (if (not (null? z3042@sym*)) (begin (z2c5e@set-rib-sym*! z3040@rib (list->vector z3042@sym*)) (z2c60@set-rib-mark**! z3040@rib (list->vector (z2c56@rib-mark** z3040@rib))) (z2c62@set-rib-label*! z3040@rib (list->vector (z2c58@rib-label* z3040@rib))) (z2c64@set-rib-sealed/freq! z3040@rib (z2c6e@make-rib-map z3042@sym*))) (void))) (z2c54@rib-sym* z3040@rib)))) (set! z2c72@unseal-rib! (lambda (z3044@rib) (if (z2c5a@rib-sealed/freq z3044@rib) (begin (z2c64@set-rib-sealed/freq! z3044@rib '#f) (z2c5e@set-rib-sym*! z3044@rib (vector->list (z2c54@rib-sym* z3044@rib))) (z2c60@set-rib-mark**! z3044@rib (vector->list (z2c56@rib-mark** z3044@rib))) (z2c62@set-rib-label*! z3044@rib (vector->list (z2c58@rib-label* z3044@rib)))) (void)))) (set! z2c74@make-full-rib (lambda (z3046@id* z3047@label*) ((lambda (z304a@r) (begin (z2c70@seal-rib! z304a@r) z304a@r)) (z2c52@make-rib (map z2cbb@id->sym z3046@id*) (map z2c87@stx-mark* z3046@id*) z3047@label* '#f '#f)))) (set! z2c7a@z2c75 (make-record-type-descriptor 'stx '#f 'z2c78 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! z2c7c@z2c77 '#f) (set! z2c7e@z2c76 (make-record-constructor-descriptor z2c7a@z2c75 '#f z2c7c@z2c77)) (set! z2c81@stx? (record-predicate z2c7a@z2c75)) (set! z2c83@make-stx (record-constructor z2c7e@z2c76)) (set! z2c85@stx-expr (record-accessor z2c7a@z2c75 '0)) (set! z2c87@stx-mark* (record-accessor z2c7a@z2c75 '1)) (set! z2c89@stx-subst* (record-accessor z2c7a@z2c75 '2)) (set! z2c8b@stx-ae* (record-accessor z2c7a@z2c75 '3)) (set! z2c8d@set-stx-expr! (record-mutator z2c7a@z2c75 '0)) (set! z2c8f@set-stx-mark*! (record-mutator z2c7a@z2c75 '1)) (set! z2c91@set-stx-subst*! (record-mutator z2c7a@z2c75 '2)) (set! z2c93@set-stx-ae*! (record-mutator z2c7a@z2c75 '3)) (set! z2c95@rp (z2860@z2787@make-record-printer 'stx (lambda (z304c@x z304d@p z304e@wr) (begin (display '"#<syntax " z304d@p) (write (z2ccf@stx->datum z304c@x) z304d@p) ((lambda (z3052@expr) (if (z2858@z2777@annotation? z3052@expr) ((lambda (z3054@src) (if (pair? z3054@src) (begin (display '" [" z304d@p) (display (cdr z3054@src) z304d@p) (display '" of " z304d@p) (display (car z3054@src) z304d@p) (display '"]" z304d@p)) (void))) (z2859@z2779@annotation-source z3052@expr)) (void))) (z2c85@stx-expr z304c@x)) (display '">" z304d@p))))) (set! z2c97@datum->stx (lambda (z3056@id z3057@datum) (z2c83@make-stx z3057@datum (z2c87@stx-mark* z3056@id) (z2c89@stx-subst* z3056@id) (z2c8b@stx-ae* z3056@id)))) (set! z2c99@gen-mark (lambda () (string '#\m))) (set! z2c9b@anti-mark '#f) (set! z2c9d@anti-mark? not) (set! z2c9f@join-wraps (lambda (z305a@m1* z305b@s1* z305c@ae1* z305d@e) ((lambda (z3063@cancel) (begin (set! z3063@cancel (lambda (z306a@ls1 z306b@ls2) ((letrec ((z306e@f (lambda (z3070@x z3071@ls1) (if (null? z3071@ls1) (cdr z306b@ls2) (cons z3070@x (z306e@f (car z3071@ls1) (cdr z3071@ls1))))))) z306e@f) (car z306a@ls1) (cdr z306a@ls1)))) ((lambda (z3064@m2* z3065@s2* z3066@ae2*) (if (and (not (null? z305a@m1*)) (not (null? z3064@m2*)) (z2c9d@anti-mark? (car z3064@m2*))) (values (z3063@cancel z305a@m1* z3064@m2*) (z3063@cancel z305b@s1* z3065@s2*) (z3063@cancel z305c@ae1* z3066@ae2*)) (values (append z305a@m1* z3064@m2*) (append z305b@s1* z3065@s2*) (append z305c@ae1* z3066@ae2*)))) (z2c87@stx-mark* z305d@e) (z2c89@stx-subst* z305d@e) (z2c8b@stx-ae* z305d@e)))) '#f))) (set! z2ca1@mkstx (lambda (z3074@e z3075@m* z3076@s* z3077@ae*) (if (and (z2c81@stx? z3074@e) (not (z2c37@top-marked? z3075@m*))) (call-with-values (lambda () (z2c9f@join-wraps z3075@m* z3076@s* z3077@ae* z3074@e)) (lambda (z3082@z307d z3083@z307f z3084@z3081) ((lambda (z3088@ae* z3089@s* z308a@m*) (z2c83@make-stx (z2c85@stx-expr z3074@e) z308a@m* z3089@s* z3088@ae*)) z3084@z3081 z3083@z307f z3082@z307d))) (z2c83@make-stx z3074@e z3075@m* z3076@s* z3077@ae*)))) (set! z2ca3@add-mark (lambda (z308e@m z308f@e z3090@ae) (z2ca1@mkstx z308f@e (list z308e@m) '(shift) (list z3090@ae)))) (set! z2ca5@add-subst (lambda (z3094@subst z3095@e) (z2ca1@mkstx z3095@e '() (list z3094@subst) '()))) (set! z2ca7@syntax-kind? (lambda (z3098@x z3099@p?) (if (z2c81@stx? z3098@x) (z2ca7@syntax-kind? (z2c85@stx-expr z3098@x) z3099@p?) (if (z2858@z2777@annotation? z3098@x) (z2ca7@syntax-kind? (z285a@z277b@annotation-expression z3098@x) z3099@p?) (z3099@p? z3098@x))))) (set! z2ca9@syntax-vector->list (lambda (z309c@x) (if (z2c81@stx? z309c@x) ((lambda (z309e@ls z309f@m* z30a0@s* z30a1@ae*) (map (lambda (z30a6@x) (z2ca1@mkstx z30a6@x z309f@m* z30a0@s* z30a1@ae*)) z309e@ls)) (z2ca9@syntax-vector->list (z2c85@stx-expr z309c@x)) (z2c87@stx-mark* z309c@x) (z2c89@stx-subst* z309c@x) (z2c8b@stx-ae* z309c@x)) (if (z2858@z2777@annotation? z309c@x) (z2ca9@syntax-vector->list (z285a@z277b@annotation-expression z309c@x)) (if (vector? z309c@x) (vector->list z309c@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" z309c@x)))))) (set! z2cab@syntax-pair? (lambda (z30a8@x) (z2ca7@syntax-kind? z30a8@x pair?))) (set! z2cad@syntax-vector? (lambda (z30aa@x) (z2ca7@syntax-kind? z30aa@x vector?))) (set! z2caf@syntax-null? (lambda (z30ac@x) (z2ca7@syntax-kind? z30ac@x null?))) (set! z2cb1@syntax-list? (lambda (z30ae@x) (or (z2caf@syntax-null? z30ae@x) (and (z2cab@syntax-pair? z30ae@x) (z2cb1@syntax-list? (z2cb5@syntax-cdr z30ae@x)))))) (set! z2cb3@syntax-car (lambda (z30b0@x) (if (z2c81@stx? z30b0@x) (z2ca1@mkstx (z2cb3@syntax-car (z2c85@stx-expr z30b0@x)) (z2c87@stx-mark* z30b0@x) (z2c89@stx-subst* z30b0@x) (z2c8b@stx-ae* z30b0@x)) (if (z2858@z2777@annotation? z30b0@x) (z2cb3@syntax-car (z285a@z277b@annotation-expression z30b0@x)) (if (pair? z30b0@x) (car z30b0@x) (assertion-violation 'syntax-car '"BUG: not a pair" z30b0@x)))))) (set! z2cb5@syntax-cdr (lambda (z30b2@x) (if (z2c81@stx? z30b2@x) (z2ca1@mkstx (z2cb5@syntax-cdr (z2c85@stx-expr z30b2@x)) (z2c87@stx-mark* z30b2@x) (z2c89@stx-subst* z30b2@x) (z2c8b@stx-ae* z30b2@x)) (if (z2858@z2777@annotation? z30b2@x) (z2cb5@syntax-cdr (z285a@z277b@annotation-expression z30b2@x)) (if (pair? z30b2@x) (cdr z30b2@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" z30b2@x)))))) (set! z2cb7@syntax->list (lambda (z30b4@x) (if (z2cab@syntax-pair? z30b4@x) (cons (z2cb3@syntax-car z30b4@x) (z2cb7@syntax->list (z2cb5@syntax-cdr z30b4@x))) (if (z2caf@syntax-null? z30b4@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" z30b4@x))))) (set! z2cb9@id? (lambda (z30b6@x) (and (z2c81@stx? z30b6@x) ((lambda (z30b8@expr) (symbol? (if (z2858@z2777@annotation? z30b8@expr) (z2857@z2775@annotation-stripped z30b8@expr) z30b8@expr))) (z2c85@stx-expr z30b6@x))))) (set! z2cbb@id->sym (lambda (z30ba@x) (begin (if (not (z2c81@stx? z30ba@x)) (error 'id->sym '"BUG in ikarus: not an id" z30ba@x) (void)) ((lambda (z30bc@expr) ((lambda (z30be@sym) (if (symbol? z30be@sym) z30be@sym (error 'id->sym '"BUG in ikarus: not an id" z30ba@x))) (if (z2858@z2777@annotation? z30bc@expr) (z2857@z2775@annotation-stripped z30bc@expr) z30bc@expr))) (z2c85@stx-expr z30ba@x))))) (set! z2cbd@same-marks? (lambda (z30c0@x z30c1@y) (or (and (null? z30c0@x) (null? z30c1@y)) (and (pair? z30c0@x) (pair? z30c1@y) (eq? (car z30c0@x) (car z30c1@y)) (z2cbd@same-marks? (cdr z30c0@x) (cdr z30c1@y)))))) (set! z2cbf@bound-id=? (lambda (z30c4@x z30c5@y) (and (eq? (z2cbb@id->sym z30c4@x) (z2cbb@id->sym z30c5@y)) (z2cbd@same-marks? (z2c87@stx-mark* z30c4@x) (z2c87@stx-mark* z30c5@y))))) (set! z2cc1@free-id=? (lambda (z30c8@i z30c9@j) ((lambda (z30cc@t0 z30cd@t1) (if (or z30cc@t0 z30cd@t1) (eq? z30cc@t0 z30cd@t1) (eq? (z2cbb@id->sym z30c8@i) (z2cbb@id->sym z30c9@j)))) (z2cd5@id->real-label z30c8@i) (z2cd5@id->real-label z30c9@j)))) (set! z2cc3@valid-bound-ids? (lambda (z30d0@id*) (and (for-all z2cb9@id? z30d0@id*) (z2cc5@distinct-bound-ids? z30d0@id*)))) (set! z2cc5@distinct-bound-ids? (lambda (z30d2@id*) (or (null? z30d2@id*) (and (not (z2cc7@bound-id-member? (car z30d2@id*) (cdr z30d2@id*))) (z2cc5@distinct-bound-ids? (cdr z30d2@id*)))))) (set! z2cc7@bound-id-member? (lambda (z30d4@id z30d5@id*) (and (pair? z30d5@id*) (or (z2cbf@bound-id=? z30d4@id (car z30d5@id*)) (z2cc7@bound-id-member? z30d4@id (cdr z30d5@id*)))))) (set! z2cc9@self-evaluating? (lambda (z30d8@x) (or (number? z30d8@x) (string? z30d8@x) (char? z30d8@x) (boolean? z30d8@x) (regexp? z30d8@x) (bytevector? z30d8@x)))) (set! z2ccb@strip-annotations (lambda (z30da@x) (if (pair? z30da@x) (cons (z2ccb@strip-annotations (car z30da@x)) (z2ccb@strip-annotations (cdr z30da@x))) (if (vector? z30da@x) (vector-map z2ccb@strip-annotations z30da@x) (if (z2858@z2777@annotation? z30da@x) (z2857@z2775@annotation-stripped z30da@x) z30da@x))))) (set! z2ccd@strip (lambda (z30dc@x z30dd@m*) (if (z2c37@top-marked? z30dd@m*) (if (or (z2858@z2777@annotation? z30dc@x) (and (pair? z30dc@x) (z2858@z2777@annotation? (car z30dc@x))) (and (vector? z30dc@x) (> (vector-length z30dc@x) '0) (z2858@z2777@annotation? (vector-ref z30dc@x '0)))) (z2ccb@strip-annotations z30dc@x) z30dc@x) ((letrec ((z30e0@f (lambda (z30e2@x) (if (z2c81@stx? z30e2@x) (z2ccd@strip (z2c85@stx-expr z30e2@x) (z2c87@stx-mark* z30e2@x)) (if (z2858@z2777@annotation? z30e2@x) (z2857@z2775@annotation-stripped z30e2@x) (if (pair? z30e2@x) ((lambda (z30e4@a z30e5@d) (if (and (eq? z30e4@a (car z30e2@x)) (eq? z30e5@d (cdr z30e2@x))) z30e2@x (cons z30e4@a z30e5@d))) (z30e0@f (car z30e2@x)) (z30e0@f (cdr z30e2@x))) (if (vector? z30e2@x) ((lambda (z30e8@old) ((lambda (z30ea@new) (if (for-all eq? z30e8@old z30ea@new) z30e2@x (list->vector z30ea@new))) (map z30e0@f z30e8@old))) (vector->list z30e2@x)) z30e2@x))))))) z30e0@f) z30dc@x)))) (set! z2ccf@stx->datum (lambda (z30ec@x) (z2ccd@strip z30ec@x '()))) (set! z2cd1@same-marks*? (lambda (z30ee@mark* z30ef@mark** z30f0@si) (if (null? z30f0@si) '#f (if (z2cbd@same-marks? z30ee@mark* (vector-ref z30ef@mark** (car z30f0@si))) (car z30f0@si) (z2cd1@same-marks*? z30ee@mark* z30ef@mark** (cdr z30f0@si)))))) (set! z2cd3@id->label (lambda (z30f4@id) (or (z2cd5@id->real-label z30f4@id) ((lambda (z30f6@t) (if z30f6@t ((lambda (z30f8@env) ((lambda (z30fa@rib) (call-with-values (lambda () (z2c41@gen-define-label+loc z30f4@id z30fa@rib)) (lambda (z3100@z30fd z3101@z30ff) ((lambda (z3104@loc_ z3105@lab) (begin (z2c6a@extend-rib! z30fa@rib z30f4@id z3105@lab) z3105@lab)) z3101@z30ff z3100@z30fd)))) (z2f6d@interaction-env-rib z30f8@env))) z30f6@t) '#f)) (z2fbb@top-level-context))))) (set! z2cd5@id->real-label (lambda (z3108@id) ((lambda (z310a@sym) ((letrec ((z310c@search (lambda (z310e@subst* z310f@mark*) (if (null? z310e@subst*) '#f (if (eq? (car z310e@subst*) 'shift) (z310c@search (cdr z310e@subst*) (cdr z310f@mark*)) ((lambda (z3112@rib) ((lambda (z3114@t) (if z3114@t ((lambda (z3116@ht) ((lambda (z3118@si) ((lambda (z311a@i) (if z311a@i (vector-ref (z2c58@rib-label* z3112@rib) z311a@i) (z310c@search (cdr z310e@subst*) z310f@mark*))) (and z3118@si (z2cd1@same-marks*? z310f@mark* (z2c56@rib-mark** z3112@rib) (reverse z3118@si))))) (hashtable-ref z3116@ht z310a@sym '#f))) z3114@t) ((letrec ((z311c@f (lambda (z311e@sym* z311f@mark** z3120@label*) (if (null? z311e@sym*) (z310c@search (cdr z310e@subst*) z310f@mark*) (if (and (eq? (car z311e@sym*) z310a@sym) (z2cbd@same-marks? (car z311f@mark**) z310f@mark*)) (car z3120@label*) (z311c@f (cdr z311e@sym*) (cdr z311f@mark**) (cdr z3120@label*))))))) z311c@f) (z2c54@rib-sym* z3112@rib) (z2c56@rib-mark** z3112@rib) (z2c58@rib-label* z3112@rib)))) (z2c5a@rib-sealed/freq z3112@rib))) (car z310e@subst*))))))) z310c@search) (z2c89@stx-subst* z3108@id) (z2c87@stx-mark* z3108@id))) (z2cbb@id->sym z3108@id)))) (set! z2cd7@label->binding (lambda (z3124@x z3125@r) ((lambda (z3128@t) (if z3128@t ((lambda (z312a@b) (if (and (pair? z312a@b) (eq? (car z312a@b) '$core-rtd)) (cons '$rtd (map z2e7a@bless (cdr z312a@b))) (if (and (pair? z312a@b) (eq? (car z312a@b) 'global-rtd)) ((lambda (z312c@lib z312d@loc) (cons '$rtd (symbol-value z312d@loc))) (cadr z312a@b) (cddr z312a@b)) z312a@b))) z3128@t) ((lambda (z3130@t) (if z3130@t (cdr z3130@t) ((lambda (z3132@t) (if z3132@t ((lambda (z3134@env) ((lambda (z3136@t) (if z3136@t ((lambda (z3138@p) (cons* 'lexical (cdr z3138@p) '#f)) z3136@t) '(displaced-lexical . #f))) (assq z3124@x (z2f71@interaction-env-locs z3134@env)))) z3132@t) '(displaced-lexical . #f))) (z2fbb@top-level-context)))) (assq z3124@x z3125@r)))) (z2adc@z297c@imported-label->binding z3124@x)))) (set! z2cd9@make-binding cons) (set! z2cdb@binding-type car) (set! z2cdd@binding-value cdr) (set! z2cdf@raise-unbound-error (lambda (z313a@id) (z2fab@syntax-violation* '#f '"unbound identifier" z313a@id (z4cea@z4b30@make-undefined-violation)))) (set! z2ce1@syntax-type (lambda (z313c@e z313d@r) (if (z2cb9@id? z313c@e) ((lambda (z3140@id) ((lambda (z3142@label) ((lambda (z3144@b) ((lambda (z3146@type) ((lambda () (begin (if (not z3142@label) (z2cdf@raise-unbound-error z3140@id) (void)) ((lambda (z3148@t) (if (memv z3148@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values z3146@type (z2cdd@binding-value z3144@b) z3140@id) (values 'other '#f '#f))) z3146@type))))) (z2cdb@binding-type z3144@b))) (z2cd7@label->binding z3142@label z313d@r))) (z2cd3@id->label z3140@id))) z313c@e) (if (z2cab@syntax-pair? z313c@e) ((lambda (z314a@id) (if (z2cb9@id? z314a@id) ((lambda (z314c@label) ((lambda (z314e@b) ((lambda (z3150@type) ((lambda () (begin (if (not z314c@label) (z2cdf@raise-unbound-error z314a@id) (void)) ((lambda (z3152@t) (if (memv z3152@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values z3150@type (z2cdd@binding-value z314e@b) z314a@id) (values 'call '#f '#f))) z3150@type))))) (z2cdb@binding-type z314e@b))) (z2cd7@label->binding z314c@label z313d@r))) (z2cd3@id->label z314a@id)) (values 'call '#f '#f))) (z2cb3@syntax-car z313c@e)) ((lambda (z3154@d) (if (z2cc9@self-evaluating? z3154@d) (values 'constant z3154@d '#f) (values 'other '#f '#f))) (z2ccf@stx->datum z313c@e)))))) (set! z2cef@sanitize-binding (lambda (z3156@x z3157@src) (if (procedure? z3156@x) (cons* 'local-macro z3156@x z3157@src) (if (and (pair? z3156@x) (eq? (car z3156@x) 'macro!) (procedure? (cdr z3156@x))) (cons* 'local-macro! (cdr z3156@x) z3157@src) (if (and (pair? z3156@x) (eq? (car z3156@x) '$rtd)) z3156@x (assertion-violation 'expand '"invalid transformer" z3156@x)))))) (set! z2cf1@make-variable-transformer (lambda (z315a@x) (if (procedure? z315a@x) (cons 'macro! z315a@x) (assertion-violation 'make-variable-transformer '"not a procedure" z315a@x)))) (set! z2cf3@variable-transformer? (lambda (z315c@x) (and (pair? z315c@x) (eq? (car z315c@x) 'macro!) (procedure? (cdr z315c@x))))) (set! z2cf5@variable-transformer-procedure (lambda (z315e@x) (if (z2cf3@variable-transformer? z315e@x) (cdr z315e@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" z315e@x)))) (set! z2cf7@make-eval-transformer (lambda (z3160@x) (z2cef@sanitize-binding (eval-core (z28b7@z286f@expanded->core z3160@x)) z3160@x))) (set! z2e48@parse-define (lambda (z3162@x) ((lambda (z3164@t) ((lambda (z3166@ls/false) (if (and z3166@ls/false (apply (lambda (z3168@id z3169@fmls z316a@b z316b@b*) (z2cb9@id? z3168@id)) z3166@ls/false)) (apply (lambda (z3170@id z3171@fmls z3172@b z3173@b*) (begin (z2eea@verify-formals z3171@fmls z3162@x) (values z3170@id (cons 'defun (cons z3171@fmls (cons z3172@b z3173@b*)))))) z3166@ls/false) ((lambda (z3178@t) ((lambda (z317a@ls/false) (if (and z317a@ls/false (apply (lambda (z317c@id z317d@val) (z2cb9@id? z317c@id)) z317a@ls/false)) (apply (lambda (z3180@id z3181@val) (values z3180@id (cons 'expr z3181@val))) z317a@ls/false) ((lambda (z3184@t) ((lambda (z3186@ls/false) (if (and z3186@ls/false (apply (lambda (z3188@id) (z2cb9@id? z3188@id)) z3186@ls/false)) (apply (lambda (z318a@id) (values z318a@id (cons 'expr (z2e7a@bless '(void))))) z3186@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3184@t))) (z2ec4@syntax-dispatch z3184@t '(_ any)))) z3178@t))) (z2ec4@syntax-dispatch z3178@t '(_ any any)))) z3164@t))) (z2ec4@syntax-dispatch z3164@t '(_ (any . any) any . each-any)))) z3162@x))) (set! z2e4a@parse-define-syntax (lambda (z318c@x) ((lambda (z318e@t) ((lambda (z3190@ls/false) (if (and z3190@ls/false (apply (lambda (z3192@id z3193@val) (z2cb9@id? z3192@id)) z3190@ls/false)) (apply (lambda (z3196@id z3197@val) (values z3196@id z3197@val)) z3190@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z318e@t))) (z2ec4@syntax-dispatch z318e@t '(_ any any)))) z318c@x))) (set! z2e4c@scheme-stx-hashtable (make-eq-hashtable)) (set! z2e4e@scheme-stx (lambda (z319a@sym) (or (hashtable-ref z2e4c@scheme-stx-hashtable z319a@sym '#f) ((lambda (z319c@subst) ((lambda (z319e@stx) ((lambda (z31a0@stx) ((lambda () (begin (hashtable-set! z2e4c@scheme-stx-hashtable z319a@sym z31a0@stx) z31a0@stx)))) ((lambda (z31a2@t) (if z31a2@t ((lambda (z31a4@x) ((lambda (z31a6@name z31a7@label) (z2ca5@add-subst (z2c52@make-rib (list z31a6@name) (list z2c35@top-mark*) (list z31a7@label) '#f '#f) z319e@stx)) (car z31a4@x) (cdr z31a4@x))) z31a2@t) z319e@stx)) (assq z319a@sym z319c@subst)))) (z2c83@make-stx z319a@sym z2c35@top-mark* '() '()))) (z2ab2@z2928@library-subst (z2ad6@z2970@find-library-by-name '(psyntax system $all))))))) (set! z2e50@lexical-var car) (set! z2e52@lexical-mutable? cdr) (set! z2e54@set-lexical-mutable! set-cdr!) (set! z2e56@add-lexical (lambda (z31aa@lab z31ab@lex z31ac@r) (cons (cons* z31aa@lab 'lexical z31ab@lex '#f) z31ac@r))) (set! z2e58@add-lexicals (lambda (z31b0@lab* z31b1@lex* z31b2@r) (if (null? z31b0@lab*) z31b2@r (z2e58@add-lexicals (cdr z31b0@lab*) (cdr z31b1@lex*) (z2e56@add-lexical (car z31b0@lab*) (car z31b1@lex*) z31b2@r))))) (set! z2e5a@letrec-helper (lambda (z31b6@e z31b7@r z31b8@mr z31b9@build) ((lambda (z31be@t) ((lambda (z31c0@ls/false) (if z31c0@ls/false (apply (lambda (z31c2@lhs* z31c3@rhs* z31c4@b z31c5@b*) (if (not (z2cc3@valid-bound-ids? z31c2@lhs*)) (z2e7e@invalid-fmls-error z31b6@e z31c2@lhs*) ((lambda (z31ca@lex* z31cb@lab*) ((lambda (z31ce@rib z31cf@r) ((lambda (z31d2@body z31d3@rhs*) (z31b9@build '#f z31ca@lex* z31d3@rhs* z31d2@body)) (z2efc@chi-internal (z2ca5@add-subst z31ce@rib (cons z31c4@b z31c5@b*)) z31cf@r z31b8@mr) (z2ee2@chi-expr* (map (lambda (z31d6@x) (z2ca5@add-subst z31ce@rib z31d6@x)) z31c3@rhs*) z31cf@r z31b8@mr))) (z2c74@make-full-rib z31c2@lhs* z31cb@lab*) (z2e58@add-lexicals z31cb@lab* z31ca@lex* z31b7@r))) (map z2c39@gen-lexical z31c2@lhs*) (map z2c3d@gen-label z31c2@lhs*)))) z31c0@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z31be@t))) (z2ec4@syntax-dispatch z31be@t '(_ #(each (any any)) any . each-any)))) z31b6@e))) (set! z2e5c@letrec-transformer (lambda (z31d8@e z31d9@r z31da@mr) (z2e5a@letrec-helper z31d8@e z31d9@r z31da@mr z2c1a@z2b8b@build-letrec))) (set! z2e5e@letrec*-transformer (lambda (z31de@e z31df@r z31e0@mr) (z2e5a@letrec-helper z31de@e z31df@r z31e0@mr z2c1b@z2b8d@build-letrec*))) (set! z2e60@fluid-let-syntax-transformer (lambda (z31e4@e z31e5@r z31e6@mr) ((lambda (z31eb@lookup) (begin (set! z31eb@lookup (lambda (z31fe@x) (or (z2cd3@id->label z31fe@x) (z2fad@syntax-violation '#f '"unbound identifier" z31e4@e z31fe@x)))) ((lambda (z31ec@t) ((lambda (z31ee@ls/false) (if z31ee@ls/false (apply (lambda (z31f0@lhs* z31f1@rhs* z31f2@b z31f3@b*) (if (not (z2cc3@valid-bound-ids? z31f0@lhs*)) (z2e7e@invalid-fmls-error z31e4@e z31f0@lhs*) ((lambda (z31f8@lab* z31f9@rhs*) (z2efc@chi-internal (cons z31f2@b z31f3@b*) (append (map cons z31f8@lab* z31f9@rhs*) z31e5@r) (append (map cons z31f8@lab* z31f9@rhs*) z31e6@mr))) (map z31eb@lookup z31f0@lhs*) (map (lambda (z31fc@x) (z2cf7@make-eval-transformer (z2f21@expand-transformer z31fc@x z31e6@mr))) z31f1@rhs*)))) z31ee@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z31ec@t))) (z2ec4@syntax-dispatch z31ec@t '(_ #(each (any any)) any . each-any)))) z31e4@e))) '#f))) (set! z2e62@type-descriptor-transformer (lambda (z3200@e z3201@r z3202@mr) ((lambda (z3206@t) ((lambda (z3208@ls/false) (if (and z3208@ls/false (apply (lambda (z320a@id) (z2cb9@id? z320a@id)) z3208@ls/false)) (apply (lambda (z320c@id) ((lambda (z320e@lab) ((lambda (z3210@b) ((lambda (z3212@type) ((lambda () (begin (if (not z320e@lab) (z2cdf@raise-unbound-error z320c@id) (void)) (if (not (and (eq? z3212@type '$rtd) (not (list? (z2cdd@binding-value z3210@b))))) (z2fad@syntax-violation '#f '"not a record type" z3200@e) (void)) (list 'quote (z2cdd@binding-value z3210@b)))))) (z2cdb@binding-type z3210@b))) (z2cd7@label->binding z320e@lab z3201@r))) (z2cd3@id->label z320c@id))) z3208@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3206@t))) (z2ec4@syntax-dispatch z3206@t '(_ any)))) z3200@e))) (set! z2e64@record-type-descriptor-transformer (lambda (z3214@e z3215@r z3216@mr) ((lambda (z321a@t) ((lambda (z321c@ls/false) (if (and z321c@ls/false (apply (lambda (z321e@id) (z2cb9@id? z321e@id)) z321c@ls/false)) (apply (lambda (z3220@id) ((lambda (z3222@lab) ((lambda (z3224@b) ((lambda (z3226@type) ((lambda () (begin (if (not z3222@lab) (z2cdf@raise-unbound-error z3220@id) (void)) (if (not (and (eq? z3226@type '$rtd) (list? (z2cdd@binding-value z3224@b)))) (z2fad@syntax-violation '#f '"not a record type" z3214@e) (void)) (z2ee6@chi-expr (car (z2cdd@binding-value z3224@b)) z3215@r z3216@mr))))) (z2cdb@binding-type z3224@b))) (z2cd7@label->binding z3222@lab z3215@r))) (z2cd3@id->label z3220@id))) z321c@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z321a@t))) (z2ec4@syntax-dispatch z321a@t '(_ any)))) z3214@e))) (set! z2e66@record-constructor-descriptor-transformer (lambda (z3228@e z3229@r z322a@mr) ((lambda (z322e@t) ((lambda (z3230@ls/false) (if (and z3230@ls/false (apply (lambda (z3232@id) (z2cb9@id? z3232@id)) z3230@ls/false)) (apply (lambda (z3234@id) ((lambda (z3236@lab) ((lambda (z3238@b) ((lambda (z323a@type) ((lambda () (begin (if (not z3236@lab) (z2cdf@raise-unbound-error z3234@id) (void)) (if (not (and (eq? z323a@type '$rtd) (list? (z2cdd@binding-value z3238@b)))) (z2fad@syntax-violation '#f '"invalid type" z3228@e) (void)) (z2ee6@chi-expr (cadr (z2cdd@binding-value z3238@b)) z3229@r z322a@mr))))) (z2cdb@binding-type z3238@b))) (z2cd7@label->binding z3236@lab z3229@r))) (z2cd3@id->label z3234@id))) z3230@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z322e@t))) (z2ec4@syntax-dispatch z322e@t '(_ any)))) z3228@e))) (set! z2e68@when-macro (lambda (z323c@e) ((lambda (z323e@t) ((lambda (z3240@ls/false) (if z3240@ls/false (apply (lambda (z3242@test z3243@e z3244@e*) (z2e7a@bless (list 'if z3242@test (cons 'begin (cons z3243@e z3244@e*))))) z3240@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z323e@t))) (z2ec4@syntax-dispatch z323e@t '(_ any any . each-any)))) z323c@e))) (set! z2e6a@unless-macro (lambda (z3248@e) ((lambda (z324a@t) ((lambda (z324c@ls/false) (if z324c@ls/false (apply (lambda (z324e@test z324f@e z3250@e*) (z2e7a@bless (list 'if (list 'not z324e@test) (cons 'begin (cons z324f@e z3250@e*))))) z324c@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z324a@t))) (z2ec4@syntax-dispatch z324a@t '(_ any any . each-any)))) z3248@e))) (set! z2e6c@if-transformer (lambda (z3254@e z3255@r z3256@mr) ((lambda (z325a@t) ((lambda (z325c@ls/false) (if z325c@ls/false (apply (lambda (z325e@e0 z325f@e1 z3260@e2) (list 'if (z2ee6@chi-expr z325e@e0 z3255@r z3256@mr) (z2ee6@chi-expr z325f@e1 z3255@r z3256@mr) (z2ee6@chi-expr z3260@e2 z3255@r z3256@mr))) z325c@ls/false) ((lambda (z3264@t) ((lambda (z3266@ls/false) (if z3266@ls/false (apply (lambda (z3268@e0 z3269@e1) (list 'if (z2ee6@chi-expr z3268@e0 z3255@r z3256@mr) (z2ee6@chi-expr z3269@e1 z3255@r z3256@mr) (z2c19@z2b89@build-void))) z3266@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3264@t))) (z2ec4@syntax-dispatch z3264@t '(_ any any)))) z325a@t))) (z2ec4@syntax-dispatch z325a@t '(_ any any any)))) z3254@e))) (set! z2e6e@and-transformer (lambda (z326c@e z326d@r z326e@mr) ((lambda (z3272@t) ((lambda (z3274@ls/false) (if z3274@ls/false (apply (lambda (z3276@e*) (cons 'and (z2ee2@chi-expr* z3276@e* z326d@r z326e@mr))) z3274@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3272@t))) (z2ec4@syntax-dispatch z3272@t '(_ . each-any)))) z326c@e))) (set! z2e70@or-transformer (lambda (z3278@e z3279@r z327a@mr) ((lambda (z327e@t) ((lambda (z3280@ls/false) (if z3280@ls/false (apply (lambda (z3282@e*) (cons 'or (z2ee2@chi-expr* z3282@e* z3279@r z327a@mr))) z3280@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z327e@t))) (z2ec4@syntax-dispatch z327e@t '(_ . each-any)))) z3278@e))) (set! z2e72@case-macro (lambda (z3284@e) ((lambda (z3287@build-last z3289@build-one) (begin (set! z3287@build-last (lambda (z32ae@cls) ((lambda (z32b0@t) ((lambda (z32b2@ls/false) (if z32b2@ls/false (apply (lambda (z32b4@e z32b5@e*) (cons 'begin (cons z32b4@e z32b5@e*))) z32b2@ls/false) ((lambda (z32b8@t) ((lambda (z32ba@ls/false) (if z32ba@ls/false (apply (lambda () (z3289@build-one z32ae@cls '(if #f #f))) z32ba@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z32b8@t))) (z2ec4@syntax-dispatch z32b8@t '_))) z32b0@t))) (z2ec4@syntax-dispatch z32b0@t '(#(scheme-id else) any . each-any)))) z32ae@cls))) (set! z3289@build-one (lambda (z32a0@cls z32a1@k) ((lambda (z32a4@t) ((lambda (z32a6@ls/false) (if z32a6@ls/false (apply (lambda (z32a8@d* z32a9@e z32aa@e*) (list 'if (list 'memv 't (list 'quote z32a8@d*)) (cons 'begin (cons z32a9@e z32aa@e*)) z32a1@k)) z32a6@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z32a4@t))) (z2ec4@syntax-dispatch z32a4@t '(each-any any . each-any)))) z32a0@cls))) ((lambda (z328a@t) ((lambda (z328c@ls/false) (if z328c@ls/false (apply (lambda (z328e@expr) (z2e7a@bless (cons 'let (cons (list (list 't z328e@expr)) '((if #f #f)))))) z328c@ls/false) ((lambda (z3290@t) ((lambda (z3292@ls/false) (if z3292@ls/false (apply (lambda (z3294@expr z3295@cls z3296@cls*) (z2e7a@bless (list 'let (list (list 't z3294@expr)) ((letrec ((z329a@f (lambda (z329c@cls z329d@cls*) (if (null? z329d@cls*) (z3287@build-last z329c@cls) (z3289@build-one z329c@cls (z329a@f (car z329d@cls*) (cdr z329d@cls*))))))) z329a@f) z3295@cls z3296@cls*)))) z3292@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3290@t))) (z2ec4@syntax-dispatch z3290@t '(_ any any . each-any)))) z328a@t))) (z2ec4@syntax-dispatch z328a@t '(_ any)))) z3284@e))) '#f '#f))) (set! z2e74@quote-transformer (lambda (z32bc@e z32bd@r z32be@mr) ((lambda (z32c2@t) ((lambda (z32c4@ls/false) (if z32c4@ls/false (apply (lambda (z32c6@datum) (list 'quote (z2ccf@stx->datum z32c6@datum))) z32c4@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z32c2@t))) (z2ec4@syntax-dispatch z32c2@t '(_ any)))) z32bc@e))) (set! z2e76@case-lambda-transformer (lambda (z32c8@e z32c9@r z32ca@mr) ((lambda (z32ce@t) ((lambda (z32d0@ls/false) (if z32d0@ls/false (apply (lambda (z32d2@fmls* z32d3@b* z32d4@b**) (call-with-values (lambda () (z2eee@chi-lambda-clause* z32c8@e z32d2@fmls* (map cons z32d3@b* z32d4@b**) z32c9@r z32ca@mr)) (lambda (z32dc@z32d9 z32dd@z32db) ((lambda (z32e0@body* z32e1@fmls*) (z2c16@z2b57@build-case-lambda '#f z32e1@fmls* z32e0@body*)) z32dd@z32db z32dc@z32d9)))) z32d0@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z32ce@t))) (z2ec4@syntax-dispatch z32ce@t '(_ . #(each (any any . each-any)))))) z32c8@e))) (set! z2e78@lambda-transformer (lambda (z32e4@e z32e5@r z32e6@mr) ((lambda (z32ea@t) ((lambda (z32ec@ls/false) (if z32ec@ls/false (apply (lambda (z32ee@fmls z32ef@b z32f0@b*) (call-with-values (lambda () (z2eec@chi-lambda-clause z32e4@e z32ee@fmls (cons z32ef@b z32f0@b*) z32e5@r z32e6@mr)) (lambda (z32f8@z32f5 z32f9@z32f7) ((lambda (z32fc@body z32fd@fmls) (z2c15@z2b55@build-lambda '#f z32fd@fmls z32fc@body)) z32f9@z32f7 z32f8@z32f5)))) z32ec@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z32ea@t))) (z2ec4@syntax-dispatch z32ea@t '(_ any any . each-any)))) z32e4@e))) (set! z2e7a@bless (lambda (z3300@x) (z2ca1@mkstx ((letrec ((z3302@f (lambda (z3304@x) (if (z2c81@stx? z3304@x) z3304@x (if (pair? z3304@x) (cons (z3302@f (car z3304@x)) (z3302@f (cdr z3304@x))) (if (symbol? z3304@x) (z2e4e@scheme-stx z3304@x) (if (vector? z3304@x) (vector-map z3302@f z3304@x) z3304@x))))))) z3302@f) z3300@x) '() '() '()))) (set! z2e7c@with-syntax-macro (lambda (z3306@e) ((lambda (z3308@t) ((lambda (z330a@ls/false) (if z330a@ls/false (apply (lambda (z330c@pat* z330d@expr* z330e@b z330f@b*) ((lambda (z3314@idn*) (begin (z2eea@verify-formals (map car z3314@idn*) z3306@e) ((lambda (z3316@t*) (z2e7a@bless (list 'let (map list z3316@t* z330d@expr*) ((letrec ((z3318@f (lambda (z331a@pat* z331b@t*) (if (null? z331a@pat*) (cons 'begin (cons '#f (cons z330e@b z330f@b*))) (list 'syntax-case (car z331b@t*) '() (list (car z331a@pat*) (z3318@f (cdr z331a@pat*) (cdr z331b@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car z331a@pat*)) (car z331b@t*)))))))) z3318@f) z330c@pat* z3316@t*)))) (z2f9b@generate-temporaries z330d@expr*)))) ((letrec ((z331e@f (lambda (z3320@pat*) (if (null? z3320@pat*) '() (call-with-values (lambda () (z2ec2@convert-pattern (car z3320@pat*) '())) (lambda (z3326@z3323 z3327@z3325) ((lambda (z332a@idn* z332b@pat) (append z332a@idn* (z331e@f (cdr z3320@pat*)))) z3327@z3325 z3326@z3323))))))) z331e@f) z330c@pat*))) z330a@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3308@t))) (z2ec4@syntax-dispatch z3308@t '(_ #(each (any any)) any . each-any)))) z3306@e))) (set! z2e7e@invalid-fmls-error (lambda (z332e@stx z332f@fmls) ((lambda (z3332@t) ((lambda (z3334@ls/false) (if z3334@ls/false (apply (lambda (z3336@id* z3337@last) ((letrec ((z333a@f (lambda (z333c@id*) (if (null? z333c@id*) (values) (if (not (z2cb9@id? (car z333c@id*))) (z2fad@syntax-violation '#f '"not an identifier" z332e@stx (car z333c@id*)) (begin (z333a@f (cdr z333c@id*)) (if (z2cc7@bound-id-member? (car z333c@id*) (cdr z333c@id*)) (z2fad@syntax-violation '#f '"duplicate binding" z332e@stx (car z333c@id*)) (void)))))))) z333a@f) (if (z2cb9@id? z3337@last) (cons z3337@last z3336@id*) (if (z2caf@syntax-null? z3337@last) z3336@id* (z2fad@syntax-violation '#f '"not an identifier" z332e@stx z3337@last))))) z3334@ls/false) ((lambda (z333e@t) ((lambda (z3340@ls/false) (if z3340@ls/false (apply (lambda () (z2fad@syntax-violation '#f '"malformed binding form" z332e@stx z332f@fmls)) z3340@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z333e@t))) (z2ec4@syntax-dispatch z333e@t '_))) z3332@t))) (z2ec4@syntax-dispatch z3332@t '#(each+ any () any)))) z332f@fmls))) (set! z2e80@let-macro (lambda (z3342@stx) ((lambda (z3344@t) ((lambda (z3346@ls/false) (if z3346@ls/false (apply (lambda (z3348@lhs* z3349@rhs* z334a@b z334b@b*) (if (z2cc3@valid-bound-ids? z3348@lhs*) (z2e7a@bless (cons (cons 'lambda (cons z3348@lhs* (cons z334a@b z334b@b*))) z3349@rhs*)) (z2e7e@invalid-fmls-error z3342@stx z3348@lhs*))) z3346@ls/false) ((lambda (z3350@t) ((lambda (z3352@ls/false) (if (and z3352@ls/false (apply (lambda (z3354@f z3355@lhs* z3356@rhs* z3357@b z3358@b*) (z2cb9@id? z3354@f)) z3352@ls/false)) (apply (lambda (z335e@f z335f@lhs* z3360@rhs* z3361@b z3362@b*) (if (z2cc3@valid-bound-ids? z335f@lhs*) (z2e7a@bless (cons (list 'letrec (list (list z335e@f (cons 'lambda (cons z335f@lhs* (cons z3361@b z3362@b*))))) z335e@f) z3360@rhs*)) (z2e7e@invalid-fmls-error z3342@stx z335f@lhs*))) z3352@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3350@t))) (z2ec4@syntax-dispatch z3350@t '(_ any #(each (any any)) any . each-any)))) z3344@t))) (z2ec4@syntax-dispatch z3344@t '(_ #(each (any any)) any . each-any)))) z3342@stx))) (set! z2e82@let-values-macro (lambda (z3368@stx) ((lambda (z336b@rename z336d@rename*) (begin (set! z336b@rename (lambda (z33d0@x z33d1@old* z33d2@new*) (begin (if (not (z2cb9@id? z33d0@x)) (z2fad@syntax-violation '#f '"not an indentifier" z3368@stx z33d0@x) (void)) (if (z2cc7@bound-id-member? z33d0@x z33d1@old*) (z2fad@syntax-violation '#f '"duplicate binding" z3368@stx z33d0@x) (void)) ((lambda (z33d6@y) (values z33d6@y (cons z33d0@x z33d1@old*) (cons z33d6@y z33d2@new*))) (gensym (z2fb3@syntax->datum z33d0@x)))))) (set! z336d@rename* (lambda (z33be@x* z33bf@old* z33c0@new*) (if (null? z33be@x*) (values '() z33bf@old* z33c0@new*) (call-with-values (lambda () (z336b@rename (car z33be@x*) z33bf@old* z33c0@new*)) (lambda (z33c4@x z33c5@old* z33c6@new*) (call-with-values (lambda () (z336d@rename* (cdr z33be@x*) z33c5@old* z33c6@new*)) (lambda (z33ca@x* z33cb@old* z33cc@new*) (values (cons z33c4@x z33ca@x*) z33cb@old* z33cc@new*)))))))) ((lambda (z336e@t) ((lambda (z3370@ls/false) (if z3370@ls/false (apply (lambda (z3372@b z3373@b*) (cons* (z2e7a@bless 'let) '() z3372@b z3373@b*)) z3370@ls/false) ((lambda (z3376@t) ((lambda (z3378@ls/false) (if z3378@ls/false (apply (lambda (z337a@lhs* z337b@rhs* z337c@b z337d@b*) (z2e7a@bless ((letrec ((z3382@f (lambda (z3384@lhs* z3385@rhs* z3386@old* z3387@new*) (if (null? z3384@lhs*) (cons 'let (cons (map list z3386@old* z3387@new*) (cons z337c@b z337d@b*))) ((lambda (z338c@t) ((lambda (z338e@ls/false) (if z338e@ls/false (apply (lambda (z3390@x*) (call-with-values (lambda () (z336d@rename* z3390@x* z3386@old* z3387@new*)) (lambda (z3398@z3393 z3399@z3395 z339a@z3397) ((lambda (z339e@new* z339f@old* z33a0@y*) (list 'call-with-values (list 'lambda '() (car z3385@rhs*)) (list 'lambda z33a0@y* (z3382@f (cdr z3384@lhs*) (cdr z3385@rhs*) z339f@old* z339e@new*)))) z339a@z3397 z3399@z3395 z3398@z3393)))) z338e@ls/false) ((lambda (z33a4@t) ((lambda (z33a6@ls/false) (if z33a6@ls/false (apply (lambda (z33a8@x* z33a9@x) (call-with-values (lambda () (z336b@rename z33a9@x z3386@old* z3387@new*)) (lambda (z33ac@y z33ad@old* z33ae@new*) (call-with-values (lambda () (z336d@rename* z33a8@x* z33ad@old* z33ae@new*)) (lambda (z33b2@y* z33b3@old* z33b4@new*) (list 'call-with-values (list 'lambda '() (car z3385@rhs*)) (list 'lambda (append z33b2@y* z33ac@y) (z3382@f (cdr z3384@lhs*) (cdr z3385@rhs*) z33b3@old* z33b4@new*)))))))) z33a6@ls/false) ((lambda (z33b8@t) ((lambda (z33ba@ls/false) (if z33ba@ls/false (apply (lambda (z33bc@others) (z2fad@syntax-violation '#f '"malformed bindings" z3368@stx z33bc@others)) z33ba@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z33b8@t))) (z2ec4@syntax-dispatch z33b8@t 'any))) z33a4@t))) (z2ec4@syntax-dispatch z33a4@t '#(each+ any () any)))) z338c@t))) (z2ec4@syntax-dispatch z338c@t 'each-any))) (car z3384@lhs*)))))) z3382@f) z337a@lhs* z337b@rhs* '() '()))) z3378@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3376@t))) (z2ec4@syntax-dispatch z3376@t '(_ #(each (any any)) any . each-any)))) z336e@t))) (z2ec4@syntax-dispatch z336e@t '(_ () any . each-any)))) z3368@stx))) '#f '#f))) (set! z2e84@let*-values-macro (lambda (z33d8@stx) ((lambda (z33db@check) (begin (set! z33db@check (lambda (z340a@x*) (if (not (null? z340a@x*)) ((lambda (z340c@x) (begin (if (not (z2cb9@id? z340c@x)) (z2fad@syntax-violation '#f '"not an identifier" z33d8@stx z340c@x) (void)) (z33db@check (cdr z340a@x*)) (if (z2cc7@bound-id-member? z340c@x (cdr z340a@x*)) (z2fad@syntax-violation '#f '"duplicate identifier" z33d8@stx z340c@x) (void)))) (car z340a@x*)) (void)))) ((lambda (z33dc@t) ((lambda (z33de@ls/false) (if z33de@ls/false (apply (lambda (z33e0@b z33e1@b*) (cons* (z2e7a@bless 'let) '() z33e0@b z33e1@b*)) z33de@ls/false) ((lambda (z33e4@t) ((lambda (z33e6@ls/false) (if z33e6@ls/false (apply (lambda (z33e8@lhs* z33e9@rhs* z33ea@b z33eb@b*) (z2e7a@bless ((letrec ((z33f0@f (lambda (z33f2@lhs* z33f3@rhs*) (if (null? z33f2@lhs*) (cons 'begin (cons z33ea@b z33eb@b*)) ((lambda (z33f6@t) ((lambda (z33f8@ls/false) (if z33f8@ls/false (apply (lambda (z33fa@x*) (begin (z33db@check z33fa@x*) (list 'call-with-values (list 'lambda '() (car z33f3@rhs*)) (list 'lambda z33fa@x* (z33f0@f (cdr z33f2@lhs*) (cdr z33f3@rhs*)))))) z33f8@ls/false) ((lambda (z33fc@t) ((lambda (z33fe@ls/false) (if z33fe@ls/false (apply (lambda (z3400@x* z3401@x) (begin (z33db@check (cons z3401@x z3400@x*)) (list 'call-with-values (list 'lambda '() (car z33f3@rhs*)) (list 'lambda (append z3400@x* z3401@x) (z33f0@f (cdr z33f2@lhs*) (cdr z33f3@rhs*)))))) z33fe@ls/false) ((lambda (z3404@t) ((lambda (z3406@ls/false) (if z3406@ls/false (apply (lambda (z3408@others) (z2fad@syntax-violation '#f '"malformed bindings" z33d8@stx z3408@others)) z3406@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3404@t))) (z2ec4@syntax-dispatch z3404@t 'any))) z33fc@t))) (z2ec4@syntax-dispatch z33fc@t '#(each+ any () any)))) z33f6@t))) (z2ec4@syntax-dispatch z33f6@t 'each-any))) (car z33f2@lhs*)))))) z33f0@f) z33e8@lhs* z33e9@rhs*))) z33e6@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z33e4@t))) (z2ec4@syntax-dispatch z33e4@t '(_ #(each (any any)) any . each-any)))) z33dc@t))) (z2ec4@syntax-dispatch z33dc@t '(_ () any . each-any)))) z33d8@stx))) '#f))) (set! z2e86@trace-lambda-macro (lambda (z340e@stx) ((lambda (z3410@t) ((lambda (z3412@ls/false) (if z3412@ls/false (apply (lambda (z3414@who z3415@fmls z3416@b z3417@b*) (if (z2cc3@valid-bound-ids? z3415@fmls) (z2e7a@bless (list 'make-traced-procedure (list 'quote z3414@who) (cons 'lambda (cons z3415@fmls (cons z3416@b z3417@b*))))) (z2e7e@invalid-fmls-error z340e@stx z3415@fmls))) z3412@ls/false) ((lambda (z341c@t) ((lambda (z341e@ls/false) (if z341e@ls/false (apply (lambda (z3420@who z3421@fmls z3422@last z3423@b z3424@b*) (if (z2cc3@valid-bound-ids? (cons z3422@last z3421@fmls)) (z2e7a@bless (list 'make-traced-procedure (list 'quote z3420@who) (cons 'lambda (cons (append z3421@fmls z3422@last) (cons z3423@b z3424@b*))))) (z2e7e@invalid-fmls-error z340e@stx (append z3421@fmls z3422@last)))) z341e@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z341c@t))) (z2ec4@syntax-dispatch z341c@t '(_ any #(each+ any () any) any . each-any)))) z3410@t))) (z2ec4@syntax-dispatch z3410@t '(_ any each-any any . each-any)))) z340e@stx))) (set! z2e88@trace-define-macro (lambda (z342a@stx) ((lambda (z342c@t) ((lambda (z342e@ls/false) (if z342e@ls/false (apply (lambda (z3430@who z3431@fmls z3432@b z3433@b*) (if (z2cc3@valid-bound-ids? z3431@fmls) (z2e7a@bless (list 'define z3430@who (list 'make-traced-procedure (list 'quote z3430@who) (cons 'lambda (cons z3431@fmls (cons z3432@b z3433@b*)))))) (z2e7e@invalid-fmls-error z342a@stx z3431@fmls))) z342e@ls/false) ((lambda (z3438@t) ((lambda (z343a@ls/false) (if z343a@ls/false (apply (lambda (z343c@who z343d@fmls z343e@last z343f@b z3440@b*) (if (z2cc3@valid-bound-ids? (cons z343e@last z343d@fmls)) (z2e7a@bless (list 'define z343c@who (list 'make-traced-procedure (list 'quote z343c@who) (cons 'lambda (cons (append z343d@fmls z343e@last) (cons z343f@b z3440@b*)))))) (z2e7e@invalid-fmls-error z342a@stx (append z343d@fmls z343e@last)))) z343a@ls/false) ((lambda (z3446@t) ((lambda (z3448@ls/false) (if z3448@ls/false (apply (lambda (z344a@who z344b@expr) (if (z2cb9@id? z344a@who) (z2e7a@bless (list 'define z344a@who (list 'let (list (list 'v z344b@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote z344a@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (z2fad@syntax-violation '#f '"invalid name" z342a@stx))) z3448@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3446@t))) (z2ec4@syntax-dispatch z3446@t '(_ any any)))) z3438@t))) (z2ec4@syntax-dispatch z3438@t '(_ (any . #(each+ any () any)) any . each-any)))) z342c@t))) (z2ec4@syntax-dispatch z342c@t '(_ (any . each-any) any . each-any)))) z342a@stx))) (set! z2e8a@trace-define-syntax-macro (lambda (z344e@stx) ((lambda (z3450@t) ((lambda (z3452@ls/false) (if z3452@ls/false (apply (lambda (z3454@who z3455@expr) (if (z2cb9@id? z3454@who) (z2e7a@bless (list 'define-syntax z3454@who (list 'make-traced-macro (list 'quote z3454@who) z3455@expr))) (z2fad@syntax-violation '#f '"invalid name" z344e@stx))) z3452@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3450@t))) (z2ec4@syntax-dispatch z3450@t '(_ any any)))) z344e@stx))) (set! z2e8c@trace-let/rec-syntax (lambda (z3458@who) (lambda (z345a@stx) ((lambda (z345c@t) ((lambda (z345e@ls/false) (if z345e@ls/false (apply (lambda (z3460@lhs* z3461@rhs* z3462@b z3463@b*) (if (z2cc3@valid-bound-ids? z3460@lhs*) ((lambda (z3468@rhs*) (z2e7a@bless (cons z3458@who (cons (map list z3460@lhs* z3468@rhs*) (cons z3462@b z3463@b*))))) (map (lambda (z346a@lhs z346b@rhs) (list 'make-traced-macro (list 'quote z346a@lhs) z346b@rhs)) z3460@lhs* z3461@rhs*)) (z2e7e@invalid-fmls-error z345a@stx z3460@lhs*))) z345e@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z345c@t))) (z2ec4@syntax-dispatch z345c@t '(_ #(each (any any)) any . each-any)))) z345a@stx)))) (set! z2e8e@trace-let-syntax-macro (z2e8c@trace-let/rec-syntax 'let-syntax)) (set! z2e90@trace-letrec-syntax-macro (z2e8c@trace-let/rec-syntax 'letrec-syntax)) (set! z2e92@guard-macro (lambda (z346e@x) ((lambda (z3471@gen-clauses) (begin (set! z3471@gen-clauses (lambda (z3488@con z3489@outerk z348a@clause*) ((lambda (z348f@f z3491@f*) (begin (set! z348f@f (lambda (z34c8@x z34c9@k) ((lambda (z34cc@t) ((lambda (z34ce@ls/false) (if z34ce@ls/false (apply (lambda (z34d0@e z34d1@p) ((lambda (z34d4@t) (list 'let (list (list z34d4@t z34d0@e)) (list 'if z34d4@t (list z34d1@p z34d4@t) z34c9@k))) (gensym))) z34ce@ls/false) ((lambda (z34d6@t) ((lambda (z34d8@ls/false) (if z34d8@ls/false (apply (lambda (z34da@e) ((lambda (z34dc@t) (list 'let (list (list z34dc@t z34da@e)) (list 'if z34dc@t z34dc@t z34c9@k))) (gensym))) z34d8@ls/false) ((lambda (z34de@t) ((lambda (z34e0@ls/false) (if z34e0@ls/false (apply (lambda (z34e2@e z34e3@v z34e4@v*) (list 'if z34e2@e (cons 'begin (cons z34e3@v z34e4@v*)) z34c9@k)) z34e0@ls/false) ((lambda (z34e8@t) ((lambda (z34ea@ls/false) (if z34ea@ls/false (apply (lambda () (z2fad@syntax-violation '#f '"invalid guard clause" z34c8@x)) z34ea@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z34e8@t))) (z2ec4@syntax-dispatch z34e8@t '_))) z34de@t))) (z2ec4@syntax-dispatch z34de@t '(any any . each-any)))) z34d6@t))) (z2ec4@syntax-dispatch z34d6@t '(any)))) z34cc@t))) (z2ec4@syntax-dispatch z34cc@t '(any #(scheme-id =>) any)))) z34c8@x))) (set! z3491@f* (lambda (z349e@x*) ((lambda (z34a0@t) ((lambda (z34a2@ls/false) (if z34a2@ls/false (apply (lambda () ((lambda (z34a4@g) (values (list z34a4@g (list 'lambda '() (list 'raise-continuable z3488@con))) z34a4@g)) (gensym))) z34a2@ls/false) ((lambda (z34a6@t) ((lambda (z34a8@ls/false) (if z34a8@ls/false (apply (lambda (z34aa@e z34ab@e*) (values (cons 'begin (cons z34aa@e z34ab@e*)) '#f)) z34a8@ls/false) ((lambda (z34ae@t) ((lambda (z34b0@ls/false) (if z34b0@ls/false (apply (lambda (z34b2@cls z34b3@cls*) (call-with-values (lambda () (z3491@f* z34b3@cls*)) (lambda (z34ba@z34b7 z34bb@z34b9) ((lambda (z34be@g z34bf@e) (values (z348f@f z34b2@cls z34bf@e) z34be@g)) z34bb@z34b9 z34ba@z34b7)))) z34b0@ls/false) ((lambda (z34c2@t) ((lambda (z34c4@ls/false) (if z34c4@ls/false (apply (lambda (z34c6@others) (z2fad@syntax-violation '#f '"invalid guard clause" z34c6@others)) z34c4@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z34c2@t))) (z2ec4@syntax-dispatch z34c2@t 'any))) z34ae@t))) (z2ec4@syntax-dispatch z34ae@t '(any . any)))) z34a6@t))) (z2ec4@syntax-dispatch z34a6@t '((#(scheme-id else) any . each-any))))) z34a0@t))) (z2ec4@syntax-dispatch z34a0@t '()))) z349e@x*))) (call-with-values (lambda () (z3491@f* z348a@clause*)) (lambda (z3496@z3493 z3497@z3495) ((lambda (z349a@raisek z349b@code) (if z349a@raisek (list (list 'call/cc (list 'lambda (list z349a@raisek) (list z3489@outerk (list 'lambda '() z349b@code))))) (list z3489@outerk (list 'lambda '() z349b@code)))) z3497@z3495 z3496@z3493))))) '#f '#f))) ((lambda (z3472@t) ((lambda (z3474@ls/false) (if (and z3474@ls/false (apply (lambda (z3476@con z3477@clause* z3478@b z3479@b*) (z2cb9@id? z3476@con)) z3474@ls/false)) (apply (lambda (z347e@con z347f@clause* z3480@b z3481@b*) ((lambda (z3486@outerk) (z2e7a@bless (list (list 'call/cc (list 'lambda (list z3486@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list z347e@con) (z3471@gen-clauses z347e@con z3486@outerk z347f@clause*)) (cons 'lambda (cons '() (cons z3480@b z3481@b*)))))))))) (gensym))) z3474@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3472@t))) (z2ec4@syntax-dispatch z3472@t '(_ (any . each-any) any . each-any)))) z346e@x))) '#f))) (set! z2e94@define-enumeration-macro (lambda (z34ec@stx) ((lambda (z34ef@set? z34f1@remove-dups) (begin (set! z34ef@set? (lambda (z3508@x) (or (null? z3508@x) (and (not (memq (car z3508@x) (cdr z3508@x))) (z34ef@set? (cdr z3508@x)))))) (set! z34f1@remove-dups (lambda (z3506@ls) (if (null? z3506@ls) '() (cons (car z3506@ls) (z34f1@remove-dups (remq (car z3506@ls) (cdr z3506@ls))))))) ((lambda (z34f2@t) ((lambda (z34f4@ls/false) (if (and z34f4@ls/false (apply (lambda (z34f6@name z34f7@id* z34f8@maker) (and (z2cb9@id? z34f6@name) (z2cb9@id? z34f8@maker) (for-all z2cb9@id? z34f7@id*))) z34f4@ls/false)) (apply (lambda (z34fc@name z34fd@id* z34fe@maker) ((lambda (z3502@name* z3503@mk) (z2e7a@bless (list 'begin (list 'define z3503@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote z3502@name*)))) (list 'define-syntax z34fc@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote z3502@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote z34fc@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax z34fe@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote z34fe@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote z3502@name*)) (cons 'syntax-violation (cons (list 'quote z34fe@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons z3503@mk '('(n* ...)))))))))))) (z34f1@remove-dups (z2fb3@syntax->datum z34fd@id*)) (gensym))) z34f4@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z34f2@t))) (z2ec4@syntax-dispatch z34f2@t '(_ any each-any any)))) z34ec@stx))) '#f '#f))) (set! z2e96@time-macro (lambda (z350a@stx) ((lambda (z350c@t) ((lambda (z350e@ls/false) (if z350e@ls/false (apply (lambda (z3510@expr) (z2e7a@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() z3510@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) z350e@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z350c@t))) (z2ec4@syntax-dispatch z350c@t '(_ any)))) z350a@stx))) (set! z2e98@delay-macro (lambda (z3512@stx) ((lambda (z3514@t) ((lambda (z3516@ls/false) (if z3516@ls/false (apply (lambda (z3518@expr) (z2e7a@bless (list 'make-promise (list 'lambda '() z3518@expr)))) z3516@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3514@t))) (z2ec4@syntax-dispatch z3514@t '(_ any)))) z3512@stx))) (set! z2e9a@assert-macro (lambda (z351a@stx) ((lambda (z351c@t) ((lambda (z351e@ls/false) (if z351e@ls/false (apply (lambda (z3520@expr) ((lambda (z3522@pos) (z2e7a@bless (list 'unless z3520@expr (list 'assertion-error (list 'quote z3520@expr) (list 'quote z3522@pos))))) (or (z2fa5@expression-position z351a@stx) (z2fa5@expression-position z3520@expr)))) z351e@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z351c@t))) (z2ec4@syntax-dispatch z351c@t '(_ any)))) z351a@stx))) (set! z2e9c@endianness-macro (lambda (z3524@stx) ((lambda (z3526@t) ((lambda (z3528@ls/false) (if z3528@ls/false (apply (lambda (z352a@e) ((lambda (z352c@t) (if (memv z352c@t '(little)) (z2e7a@bless ''little) (if (memv z352c@t '(big)) (z2e7a@bless ''big) (z2fad@syntax-violation '#f '"endianness must be big or little" z3524@stx)))) (z2fb3@syntax->datum z352a@e))) z3528@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3526@t))) (z2ec4@syntax-dispatch z3526@t '(_ any)))) z3524@stx))) (set! z2e9e@identifier-syntax-macro (lambda (z352e@stx) ((lambda (z3530@t) ((lambda (z3532@ls/false) (if z3532@ls/false (apply (lambda (z3534@expr) (z2e7a@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax z3534@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax z3534@expr) '((syntax (e* ...)))))))))) z3532@ls/false) ((lambda (z3536@t) ((lambda (z3538@ls/false) (if (and z3538@ls/false (apply (lambda (z353a@id1 z353b@expr1 z353c@id2 z353d@expr2 z353e@expr3) (and (z2cb9@id? z353a@id1) (z2cb9@id? z353c@id2) (z2cb9@id? z353d@expr2))) z3538@ls/false)) (apply (lambda (z3544@id1 z3545@expr1 z3546@id2 z3547@expr2 z3548@expr3) (z2e7a@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax z3545@expr1)) (list (list 'set! 'id z3547@expr2) (list 'syntax z3548@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons z3545@expr1 '(e* ...))))))))) z3538@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3536@t))) (z2ec4@syntax-dispatch z3536@t '(_ (any any) ((#(scheme-id set!) any any) any))))) z3530@t))) (z2ec4@syntax-dispatch z3530@t '(_ any)))) z352e@stx))) (set! z2ea0@do-macro (lambda (z354e@stx) ((lambda (z3551@bind) (begin (set! z3551@bind (lambda (z3568@x) ((lambda (z356a@t) ((lambda (z356c@ls/false) (if z356c@ls/false (apply (lambda (z356e@x z356f@init) (list z356e@x z356f@init z356e@x)) z356c@ls/false) ((lambda (z3572@t) ((lambda (z3574@ls/false) (if z3574@ls/false (apply (lambda (z3576@x z3577@init z3578@step) (list z3576@x z3577@init z3578@step)) z3574@ls/false) ((lambda (z357c@t) ((lambda (z357e@ls/false) (if z357e@ls/false (apply (lambda () (z2fad@syntax-violation '#f '"invalid binding" z354e@stx)) z357e@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z357c@t))) (z2ec4@syntax-dispatch z357c@t '_))) z3572@t))) (z2ec4@syntax-dispatch z3572@t '(any any any)))) z356a@t))) (z2ec4@syntax-dispatch z356a@t '(any any)))) z3568@x))) ((lambda (z3552@t) ((lambda (z3554@ls/false) (if z3554@ls/false (apply (lambda (z3556@binding* z3557@test z3558@expr* z3559@command*) ((lambda (z355e@t) ((lambda (z3560@ls/false) (if z3560@ls/false (apply (lambda (z3562@x* z3563@init* z3564@step*) (if (z2cc3@valid-bound-ids? z3562@x*) (z2e7a@bless (list 'letrec (list (list 'loop (list 'lambda z3562@x* (list 'if z3557@test (cons 'begin (cons '(if #f #f) z3558@expr*)) (cons 'begin (append z3559@command* (list (cons 'loop z3564@step*)))))))) (cons 'loop z3563@init*))) (z2fad@syntax-violation '#f '"invalid bindings" z354e@stx))) z3560@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z355e@t))) (z2ec4@syntax-dispatch z355e@t '#(each (any any any))))) (map z3551@bind z3556@binding*))) z3554@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3552@t))) (z2ec4@syntax-dispatch z3552@t '(_ each-any (any . each-any) . each-any)))) z354e@stx))) '#f))) (set! z2ea2@let*-macro (lambda (z3580@stx) ((lambda (z3582@t) ((lambda (z3584@ls/false) (if (and z3584@ls/false (apply (lambda (z3586@lhs* z3587@rhs* z3588@b z3589@b*) (for-all z2cb9@id? z3586@lhs*)) z3584@ls/false)) (apply (lambda (z358e@lhs* z358f@rhs* z3590@b z3591@b*) (z2e7a@bless ((letrec ((z3596@f (lambda (z3598@x*) (if (null? z3598@x*) (cons 'let (cons '() (cons z3590@b z3591@b*))) (list 'let (list (car z3598@x*)) (z3596@f (cdr z3598@x*))))))) z3596@f) (map list z358e@lhs* z358f@rhs*)))) z3584@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3582@t))) (z2ec4@syntax-dispatch z3582@t '(_ #(each (any any)) any . each-any)))) z3580@stx))) (set! z2ea4@or-macro (lambda (z359a@stx) ((lambda (z359c@t) ((lambda (z359e@ls/false) (if z359e@ls/false (apply (lambda () '#f) z359e@ls/false) ((lambda (z35a0@t) ((lambda (z35a2@ls/false) (if z35a2@ls/false (apply (lambda (z35a4@e z35a5@e*) (z2e7a@bless ((letrec ((z35a8@f (lambda (z35aa@e z35ab@e*) (if (null? z35ab@e*) (list 'begin '#f z35aa@e) (list 'let (list (list 't z35aa@e)) (list 'if 't 't (z35a8@f (car z35ab@e*) (cdr z35ab@e*)))))))) z35a8@f) z35a4@e z35a5@e*))) z35a2@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z35a0@t))) (z2ec4@syntax-dispatch z35a0@t '(_ any . each-any)))) z359c@t))) (z2ec4@syntax-dispatch z359c@t '(_)))) z359a@stx))) (set! z2ea6@and-macro (lambda (z35ae@stx) ((lambda (z35b0@t) ((lambda (z35b2@ls/false) (if z35b2@ls/false (apply (lambda () '#t) z35b2@ls/false) ((lambda (z35b4@t) ((lambda (z35b6@ls/false) (if z35b6@ls/false (apply (lambda (z35b8@e z35b9@e*) (z2e7a@bless ((letrec ((z35bc@f (lambda (z35be@e z35bf@e*) (if (null? z35bf@e*) (list 'begin '#f z35be@e) (cons 'if (cons z35be@e (cons (z35bc@f (car z35bf@e*) (cdr z35bf@e*)) '(#f)))))))) z35bc@f) z35b8@e z35b9@e*))) z35b6@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z35b4@t))) (z2ec4@syntax-dispatch z35b4@t '(_ any . each-any)))) z35b0@t))) (z2ec4@syntax-dispatch z35b0@t '(_)))) z35ae@stx))) (set! z2ea8@cond-macro (lambda (z35c2@stx) ((lambda (z35c4@t) ((lambda (z35c6@ls/false) (if z35c6@ls/false (apply (lambda (z35c8@cls z35c9@cls*) (z2e7a@bless ((letrec ((z35cc@f (lambda (z35ce@cls z35cf@cls*) (if (null? z35cf@cls*) ((lambda (z35d2@t) ((lambda (z35d4@ls/false) (if z35d4@ls/false (apply (lambda (z35d6@e z35d7@e*) (cons 'begin (cons z35d6@e z35d7@e*))) z35d4@ls/false) ((lambda (z35da@t) ((lambda (z35dc@ls/false) (if z35dc@ls/false (apply (lambda (z35de@e z35df@p) (list 'let (list (list 't z35de@e)) (list 'if 't (cons z35df@p '(t))))) z35dc@ls/false) ((lambda (z35e2@t) ((lambda (z35e4@ls/false) (if z35e4@ls/false (apply (lambda (z35e6@e) (cons 'or (cons z35e6@e '((if #f #f))))) z35e4@ls/false) ((lambda (z35e8@t) ((lambda (z35ea@ls/false) (if z35ea@ls/false (apply (lambda (z35ec@e z35ed@e*) (list 'if z35ec@e (cons 'begin z35ed@e*))) z35ea@ls/false) ((lambda (z35f0@t) ((lambda (z35f2@ls/false) (if z35f2@ls/false (apply (lambda () (z2fad@syntax-violation '#f '"invalid last clause" z35c2@stx)) z35f2@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z35f0@t))) (z2ec4@syntax-dispatch z35f0@t '_))) z35e8@t))) (z2ec4@syntax-dispatch z35e8@t '(any . each-any)))) z35e2@t))) (z2ec4@syntax-dispatch z35e2@t '(any)))) z35da@t))) (z2ec4@syntax-dispatch z35da@t '(any #(scheme-id =>) any)))) z35d2@t))) (z2ec4@syntax-dispatch z35d2@t '(#(scheme-id else) any . each-any)))) z35ce@cls) ((lambda (z35f4@t) ((lambda (z35f6@ls/false) (if z35f6@ls/false (apply (lambda (z35f8@e z35f9@e*) (z2fad@syntax-violation '#f '"incorrect position of keyword else" z35c2@stx)) z35f6@ls/false) ((lambda (z35fc@t) ((lambda (z35fe@ls/false) (if z35fe@ls/false (apply (lambda (z3600@e z3601@p) (list 'let (list (list 't z3600@e)) (list 'if 't (cons z3601@p '(t)) (z35cc@f (car z35cf@cls*) (cdr z35cf@cls*))))) z35fe@ls/false) ((lambda (z3604@t) ((lambda (z3606@ls/false) (if z3606@ls/false (apply (lambda (z3608@e) (list 'or z3608@e (z35cc@f (car z35cf@cls*) (cdr z35cf@cls*)))) z3606@ls/false) ((lambda (z360a@t) ((lambda (z360c@ls/false) (if z360c@ls/false (apply (lambda (z360e@e z360f@e*) (list 'if z360e@e (cons 'begin z360f@e*) (z35cc@f (car z35cf@cls*) (cdr z35cf@cls*)))) z360c@ls/false) ((lambda (z3612@t) ((lambda (z3614@ls/false) (if z3614@ls/false (apply (lambda () (z2fad@syntax-violation '#f '"invalid last clause" z35c2@stx)) z3614@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3612@t))) (z2ec4@syntax-dispatch z3612@t '_))) z360a@t))) (z2ec4@syntax-dispatch z360a@t '(any . each-any)))) z3604@t))) (z2ec4@syntax-dispatch z3604@t '(any)))) z35fc@t))) (z2ec4@syntax-dispatch z35fc@t '(any #(scheme-id =>) any)))) z35f4@t))) (z2ec4@syntax-dispatch z35f4@t '(#(scheme-id else) any . each-any)))) z35ce@cls))))) z35cc@f) z35c8@cls z35c9@cls*))) z35c6@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z35c4@t))) (z2ec4@syntax-dispatch z35c4@t '(_ any . each-any)))) z35c2@stx))) (set! z2eaa@do-include (lambda (z3616@stx z3617@id z3618@filename) ((lambda (z361c@filename) (begin (if (not (and (string? z361c@filename) (z2cb9@id? z3617@id))) (z2fad@syntax-violation '#f '"invalid syntax" z3616@stx) (void)) (cons (z2e7a@bless 'begin) (with-input-from-file z361c@filename (lambda () ((letrec ((z361e@f (lambda (z3620@ls) ((lambda (z3622@x) (if (eof-object? z3622@x) (reverse z3620@ls) (z361e@f (cons (z2c97@datum->stx z3617@id z3622@x) z3620@ls)))) (z2856@z2773@read-annotated))))) z361e@f) '())))))) (z2ccf@stx->datum z3618@filename)))) (set! z2eac@include-macro (lambda (z3624@e) ((lambda (z3626@t) ((lambda (z3628@ls/false) (if z3628@ls/false (apply (lambda (z362a@id z362b@filename) (z2eaa@do-include z3624@e z362a@id z362b@filename)) z3628@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3626@t))) (z2ec4@syntax-dispatch z3626@t '(any any)))) z3624@e))) (set! z2eae@include-into-macro (lambda (z362e@e) ((lambda (z3630@t) ((lambda (z3632@ls/false) (if z3632@ls/false (apply (lambda (z3634@id z3635@filename) (z2eaa@do-include z362e@e z3634@id z3635@filename)) z3632@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3630@t))) (z2ec4@syntax-dispatch z3630@t '(_ any any)))) z362e@e))) (set! z2eb0@syntax-rules-macro (lambda (z3638@e) ((lambda (z363a@t) ((lambda (z363c@ls/false) (if z363c@ls/false (apply (lambda (z363e@lits z363f@pat* z3640@tmp*) (begin (z2eca@verify-literals z363e@lits z3638@e) (z2e7a@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons z363e@lits (map (lambda (z3644@pat z3645@tmp) ((lambda (z3648@t) ((lambda (z364a@ls/false) (if z364a@ls/false (apply (lambda (z364c@rest) (list (cons 'g z364c@rest) (list 'syntax z3645@tmp))) z364a@ls/false) ((lambda (z364e@t) ((lambda (z3650@ls/false) (if z3650@ls/false (apply (lambda () (z2fad@syntax-violation '#f '"invalid syntax-rules pattern" z3638@e z3644@pat)) z3650@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z364e@t))) (z2ec4@syntax-dispatch z364e@t '_))) z3648@t))) (z2ec4@syntax-dispatch z3648@t '(_ . any)))) z3644@pat)) z363f@pat* z3640@tmp*)))))))) z363c@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z363a@t))) (z2ec4@syntax-dispatch z363a@t '(_ each-any . #(each (any any)))))) z3638@e))) (set! z2eb2@quasiquote-macro ((lambda () ((lambda (z3653@datum z366f@quasicons* z3671@quasicons z3673@quasiappend z3675@quasivector z3677@vquasi z3679@quasi) (begin (set! z3653@datum (lambda (z3754@x) (list (z2e4e@scheme-stx 'quote) (z2ca1@mkstx z3754@x '() '() '())))) (set! z366f@quasicons* (lambda (z374c@x z374d@y) ((letrec ((z3750@f (lambda (z3752@x) (if (null? z3752@x) z374d@y (z3671@quasicons (car z3752@x) (z3750@f (cdr z3752@x))))))) z3750@f) z374c@x))) (set! z3671@quasicons (lambda (z3726@x z3727@y) ((lambda (z372a@t) ((lambda (z372c@ls/false) (if z372c@ls/false (apply (lambda (z372e@dy) ((lambda (z3730@t) ((lambda (z3732@ls/false) (if z3732@ls/false (apply (lambda (z3734@dx) (list (z2e4e@scheme-stx 'quote) (cons z3734@dx z372e@dy))) z3732@ls/false) ((lambda (z3736@t) ((lambda (z3738@ls/false) (if z3738@ls/false (apply (lambda () ((lambda (z373a@t) ((lambda (z373c@ls/false) (if z373c@ls/false (apply (lambda () (list (z2e4e@scheme-stx 'list) z3726@x)) z373c@ls/false) ((lambda (z373e@t) ((lambda (z3740@ls/false) (if z3740@ls/false (apply (lambda () (list (z2e4e@scheme-stx 'cons) z3726@x z3727@y)) z3740@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z373e@t))) (z2ec4@syntax-dispatch z373e@t '_))) z373a@t))) (z2ec4@syntax-dispatch z373a@t '()))) z372e@dy)) z3738@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3736@t))) (z2ec4@syntax-dispatch z3736@t '_))) z3730@t))) (z2ec4@syntax-dispatch z3730@t '(#(scheme-id quote) any)))) z3726@x)) z372c@ls/false) ((lambda (z3742@t) ((lambda (z3744@ls/false) (if z3744@ls/false (apply (lambda (z3746@stuff) (cons* (z2e4e@scheme-stx 'list) z3726@x z3746@stuff)) z3744@ls/false) ((lambda (z3748@t) ((lambda (z374a@ls/false) (if z374a@ls/false (apply (lambda () (list (z2e4e@scheme-stx 'cons) z3726@x z3727@y)) z374a@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3748@t))) (z2ec4@syntax-dispatch z3748@t '_))) z3742@t))) (z2ec4@syntax-dispatch z3742@t '(#(scheme-id list) . each-any)))) z372a@t))) (z2ec4@syntax-dispatch z372a@t '(#(scheme-id quote) any)))) z3727@y))) (set! z3673@quasiappend (lambda (z370c@x z370d@y) ((lambda (z3710@ls) (if (null? z3710@ls) (list (z2e4e@scheme-stx 'quote) '()) (if (null? (cdr z3710@ls)) (car z3710@ls) (cons* (z2e4e@scheme-stx 'append) z3710@ls)))) ((letrec ((z3712@f (lambda (z3714@x) (if (null? z3714@x) ((lambda (z3716@t) ((lambda (z3718@ls/false) (if z3718@ls/false (apply (lambda () '()) z3718@ls/false) ((lambda (z371a@t) ((lambda (z371c@ls/false) (if z371c@ls/false (apply (lambda () (list z370d@y)) z371c@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z371a@t))) (z2ec4@syntax-dispatch z371a@t '_))) z3716@t))) (z2ec4@syntax-dispatch z3716@t '(#(scheme-id quote) ())))) z370d@y) ((lambda (z371e@t) ((lambda (z3720@ls/false) (if z3720@ls/false (apply (lambda () (z3712@f (cdr z3714@x))) z3720@ls/false) ((lambda (z3722@t) ((lambda (z3724@ls/false) (if z3724@ls/false (apply (lambda () (cons (car z3714@x) (z3712@f (cdr z3714@x)))) z3724@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3722@t))) (z2ec4@syntax-dispatch z3722@t '_))) z371e@t))) (z2ec4@syntax-dispatch z371e@t '(#(scheme-id quote) ())))) (car z3714@x)))))) z3712@f) z370c@x)))) (set! z3675@quasivector (lambda (z36da@x) ((lambda (z36dc@pat-x) ((lambda (z36de@t) ((lambda (z36e0@ls/false) (if z36e0@ls/false (apply (lambda (z36e2@x*) (list (z2e4e@scheme-stx 'quote) (list->vector z36e2@x*))) z36e0@ls/false) ((lambda (z36e4@t) ((lambda (z36e6@ls/false) (if z36e6@ls/false (apply (lambda () ((letrec ((z36e8@f (lambda (z36ea@x z36eb@k) ((lambda (z36ee@t) ((lambda (z36f0@ls/false) (if z36f0@ls/false (apply (lambda (z36f2@x*) (z36eb@k (map (lambda (z36f4@x) (list (z2e4e@scheme-stx 'quote) z36f4@x)) z36f2@x*))) z36f0@ls/false) ((lambda (z36f6@t) ((lambda (z36f8@ls/false) (if z36f8@ls/false (apply (lambda (z36fa@x*) (z36eb@k z36fa@x*)) z36f8@ls/false) ((lambda (z36fc@t) ((lambda (z36fe@ls/false) (if z36fe@ls/false (apply (lambda (z3700@x z3701@y) (z36e8@f z3701@y (lambda (z3704@ls) (z36eb@k (cons z3700@x z3704@ls))))) z36fe@ls/false) ((lambda (z3706@t) ((lambda (z3708@ls/false) (if z3708@ls/false (apply (lambda () (list (z2e4e@scheme-stx 'list->vector) z36dc@pat-x)) z3708@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3706@t))) (z2ec4@syntax-dispatch z3706@t '_))) z36fc@t))) (z2ec4@syntax-dispatch z36fc@t '(#(scheme-id cons) any any)))) z36f6@t))) (z2ec4@syntax-dispatch z36f6@t '(#(scheme-id list) . each-any)))) z36ee@t))) (z2ec4@syntax-dispatch z36ee@t '(#(scheme-id quote) each-any)))) z36ea@x)))) z36e8@f) z36da@x (lambda (z370a@ls) (cons* (z2e4e@scheme-stx 'vector) z370a@ls)))) z36e6@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z36e4@t))) (z2ec4@syntax-dispatch z36e4@t '_))) z36de@t))) (z2ec4@syntax-dispatch z36de@t '(#(scheme-id quote) each-any)))) z36dc@pat-x)) z36da@x))) (set! z3677@vquasi (lambda (z36b8@p z36b9@lev) ((lambda (z36bc@t) ((lambda (z36be@ls/false) (if z36be@ls/false (apply (lambda (z36c0@p z36c1@q) ((lambda (z36c4@t) ((lambda (z36c6@ls/false) (if z36c6@ls/false (apply (lambda (z36c8@p) (if (= z36b9@lev '0) (z366f@quasicons* z36c8@p (z3677@vquasi z36c1@q z36b9@lev)) (z3671@quasicons (z3671@quasicons (z3653@datum 'unquote) (z3679@quasi z36c8@p (- z36b9@lev '1))) (z3677@vquasi z36c1@q z36b9@lev)))) z36c6@ls/false) ((lambda (z36ca@t) ((lambda (z36cc@ls/false) (if z36cc@ls/false (apply (lambda (z36ce@p) (if (= z36b9@lev '0) (z3673@quasiappend z36ce@p (z3677@vquasi z36c1@q z36b9@lev)) (z3671@quasicons (z3671@quasicons (z3653@datum 'unquote-splicing) (z3679@quasi z36ce@p (- z36b9@lev '1))) (z3677@vquasi z36c1@q z36b9@lev)))) z36cc@ls/false) ((lambda (z36d0@t) ((lambda (z36d2@ls/false) (if z36d2@ls/false (apply (lambda (z36d4@p) (z3671@quasicons (z3679@quasi z36d4@p z36b9@lev) (z3677@vquasi z36c1@q z36b9@lev))) z36d2@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z36d0@t))) (z2ec4@syntax-dispatch z36d0@t 'any))) z36ca@t))) (z2ec4@syntax-dispatch z36ca@t '(#(scheme-id unquote-splicing) . each-any)))) z36c4@t))) (z2ec4@syntax-dispatch z36c4@t '(#(scheme-id unquote) . each-any)))) z36c0@p)) z36be@ls/false) ((lambda (z36d6@t) ((lambda (z36d8@ls/false) (if z36d8@ls/false (apply (lambda () (list (z2e4e@scheme-stx 'quote) '())) z36d8@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z36d6@t))) (z2ec4@syntax-dispatch z36d6@t '()))) z36bc@t))) (z2ec4@syntax-dispatch z36bc@t '(any . any)))) z36b8@p))) (set! z3679@quasi (lambda (z3682@p z3683@lev) ((lambda (z3686@t) ((lambda (z3688@ls/false) (if z3688@ls/false (apply (lambda (z368a@p) (if (= z3683@lev '0) z368a@p (z3671@quasicons (z3653@datum 'unquote) (z3679@quasi (list z368a@p) (- z3683@lev '1))))) z3688@ls/false) ((lambda (z368c@t) ((lambda (z368e@ls/false) (if z368e@ls/false (apply (lambda (z3690@p z3691@q) (if (= z3683@lev '0) (z366f@quasicons* z3690@p (z3679@quasi z3691@q z3683@lev)) (z3671@quasicons (z3671@quasicons (z3653@datum 'unquote) (z3679@quasi z3690@p (- z3683@lev '1))) (z3679@quasi z3691@q z3683@lev)))) z368e@ls/false) ((lambda (z3694@t) ((lambda (z3696@ls/false) (if z3696@ls/false (apply (lambda (z3698@p z3699@q) (if (= z3683@lev '0) (z3673@quasiappend z3698@p (z3679@quasi z3699@q z3683@lev)) (z3671@quasicons (z3671@quasicons (z3653@datum 'unquote-splicing) (z3679@quasi z3698@p (- z3683@lev '1))) (z3679@quasi z3699@q z3683@lev)))) z3696@ls/false) ((lambda (z369c@t) ((lambda (z369e@ls/false) (if z369e@ls/false (apply (lambda (z36a0@p) (z3671@quasicons (z3653@datum 'quasiquote) (z3679@quasi (list z36a0@p) (+ z3683@lev '1)))) z369e@ls/false) ((lambda (z36a2@t) ((lambda (z36a4@ls/false) (if z36a4@ls/false (apply (lambda (z36a6@p z36a7@q) (z3671@quasicons (z3679@quasi z36a6@p z3683@lev) (z3679@quasi z36a7@q z3683@lev))) z36a4@ls/false) ((lambda (z36aa@t) ((lambda (z36ac@ls/false) (if (and z36ac@ls/false (apply (lambda (z36ae@x) (not (z2c81@stx? z36ae@x))) z36ac@ls/false)) (apply (lambda (z36b0@x) (z3675@quasivector (z3677@vquasi z36b0@x z3683@lev))) z36ac@ls/false) ((lambda (z36b2@t) ((lambda (z36b4@ls/false) (if z36b4@ls/false (apply (lambda (z36b6@p) (list (z2e4e@scheme-stx 'quote) z36b6@p)) z36b4@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z36b2@t))) (z2ec4@syntax-dispatch z36b2@t 'any))) z36aa@t))) (z2ec4@syntax-dispatch z36aa@t '#(vector each-any)))) z36a2@t))) (z2ec4@syntax-dispatch z36a2@t '(any . any)))) z369c@t))) (z2ec4@syntax-dispatch z369c@t '(#(scheme-id quasiquote) any)))) z3694@t))) (z2ec4@syntax-dispatch z3694@t '((#(scheme-id unquote-splicing) . each-any) . any)))) z368c@t))) (z2ec4@syntax-dispatch z368c@t '((#(scheme-id unquote) . each-any) . any)))) z3686@t))) (z2ec4@syntax-dispatch z3686@t '(#(scheme-id unquote) any)))) z3682@p))) (lambda (z367a@x) ((lambda (z367c@t) ((lambda (z367e@ls/false) (if z367e@ls/false (apply (lambda (z3680@e) (z3679@quasi z3680@e '0)) z367e@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z367c@t))) (z2ec4@syntax-dispatch z367c@t '(_ any)))) z367a@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! z2eb4@quasisyntax-macro ((lambda () ((lambda (z3757@quasi) (begin (set! z3757@quasi (lambda (z3772@p z3773@lev) ((lambda (z3776@t) ((lambda (z3778@ls/false) (if z3778@ls/false (apply (lambda (z377a@p) (if (= z3773@lev '0) ((lambda (z377c@g) (values (list z377c@g) (list z377a@p) z377c@g)) (gensym)) (call-with-values (lambda () (z3757@quasi z377a@p (- z3773@lev '1))) (lambda (z3784@z377f z3785@z3781 z3786@z3783) ((lambda (z378a@p z378b@rhs* z378c@lhs*) (values z378c@lhs* z378b@rhs* (list 'unsyntax z378a@p))) z3786@z3783 z3785@z3781 z3784@z377f))))) z3778@ls/false) ((lambda (z3790@t) ((lambda (z3792@ls/false) (if (and z3792@ls/false (apply (lambda () (= z3773@lev '0)) z3792@ls/false)) (apply (lambda () (z2fad@syntax-violation '#f '"incorrect use of unsyntax" z3772@p)) z3792@ls/false) ((lambda (z3794@t) ((lambda (z3796@ls/false) (if z3796@ls/false (apply (lambda (z3798@p* z3799@q) (call-with-values (lambda () (z3757@quasi z3799@q z3773@lev)) (lambda (z37a2@z379d z37a3@z379f z37a4@z37a1) ((lambda (z37a8@q z37a9@rhs* z37aa@lhs*) (if (= z3773@lev '0) ((lambda (z37ae@g*) (values (append z37ae@g* z37aa@lhs*) (append z3798@p* z37a9@rhs*) (append z37ae@g* z37a8@q))) (map (lambda (z37b0@x) (gensym)) z3798@p*)) (call-with-values (lambda () (z3757@quasi z3798@p* (- z3773@lev '1))) (lambda (z37b8@z37b3 z37b9@z37b5 z37ba@z37b7) ((lambda (z37be@p* z37bf@rhs2* z37c0@lhs2*) (values (append z37c0@lhs2* z37aa@lhs*) (append z37bf@rhs2* z37a9@rhs*) (cons (cons 'unsyntax z37be@p*) z37a8@q))) z37ba@z37b7 z37b9@z37b5 z37b8@z37b3))))) z37a4@z37a1 z37a3@z379f z37a2@z379d)))) z3796@ls/false) ((lambda (z37c4@t) ((lambda (z37c6@ls/false) (if z37c6@ls/false (apply (lambda (z37c8@p* z37c9@q) (call-with-values (lambda () (z3757@quasi z37c9@q z3773@lev)) (lambda (z37d2@z37cd z37d3@z37cf z37d4@z37d1) ((lambda (z37d8@q z37d9@rhs* z37da@lhs*) (if (= z3773@lev '0) ((lambda (z37de@g*) (values (append (map (lambda (z37e0@g) (cons z37e0@g '(...))) z37de@g*) z37da@lhs*) (append z37c8@p* z37d9@rhs*) (append (apply append (map (lambda (z37e2@g) (cons z37e2@g '(...))) z37de@g*)) z37d8@q))) (map (lambda (z37e4@x) (gensym)) z37c8@p*)) (call-with-values (lambda () (z3757@quasi z37c8@p* (- z3773@lev '1))) (lambda (z37ec@z37e7 z37ed@z37e9 z37ee@z37eb) ((lambda (z37f2@p* z37f3@rhs2* z37f4@lhs2*) (values (append z37f4@lhs2* z37da@lhs*) (append z37f3@rhs2* z37d9@rhs*) (cons (cons 'unsyntax-splicing z37f2@p*) z37d8@q))) z37ee@z37eb z37ed@z37e9 z37ec@z37e7))))) z37d4@z37d1 z37d3@z37cf z37d2@z37cd)))) z37c6@ls/false) ((lambda (z37f8@t) ((lambda (z37fa@ls/false) (if (and z37fa@ls/false (apply (lambda () (= z3773@lev '0)) z37fa@ls/false)) (apply (lambda () (z2fad@syntax-violation '#f '"incorrect use of unsyntax-splicing" z3772@p)) z37fa@ls/false) ((lambda (z37fc@t) ((lambda (z37fe@ls/false) (if z37fe@ls/false (apply (lambda (z3800@p) (call-with-values (lambda () (z3757@quasi z3800@p (+ z3773@lev '1))) (lambda (z3808@z3803 z3809@z3805 z380a@z3807) ((lambda (z380e@p z380f@rhs* z3810@lhs*) (values z3810@lhs* z380f@rhs* (list 'quasisyntax z380e@p))) z380a@z3807 z3809@z3805 z3808@z3803)))) z37fe@ls/false) ((lambda (z3814@t) ((lambda (z3816@ls/false) (if z3816@ls/false (apply (lambda (z3818@p z3819@q) (call-with-values (lambda () (z3757@quasi z3818@p z3773@lev)) (lambda (z3828@z381d z3829@z381f z382a@z3821) (call-with-values (lambda () (z3757@quasi z3819@q z3773@lev)) (lambda (z382e@z3823 z382f@z3825 z3830@z3827) ((lambda (z3834@q z3835@rhs2* z3836@lhs2* z3837@p z3838@rhs* z3839@lhs*) (values (append z3836@lhs2* z3839@lhs*) (append z3835@rhs2* z3838@rhs*) (cons z3837@p z3834@q))) z3830@z3827 z382f@z3825 z382e@z3823 z382a@z3821 z3829@z381f z3828@z381d)))))) z3816@ls/false) ((lambda (z3840@t) ((lambda (z3842@ls/false) (if z3842@ls/false (apply (lambda (z3844@x*) (call-with-values (lambda () (z3757@quasi z3844@x* z3773@lev)) (lambda (z384c@z3847 z384d@z3849 z384e@z384b) ((lambda (z3852@x* z3853@rhs* z3854@lhs*) (values z3854@lhs* z3853@rhs* (list->vector z3852@x*))) z384e@z384b z384d@z3849 z384c@z3847)))) z3842@ls/false) ((lambda (z3858@t) ((lambda (z385a@ls/false) (if z385a@ls/false (apply (lambda () (values '() '() z3772@p)) z385a@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3858@t))) (z2ec4@syntax-dispatch z3858@t '_))) z3840@t))) (z2ec4@syntax-dispatch z3840@t '#(vector each-any)))) z3814@t))) (z2ec4@syntax-dispatch z3814@t '(any . any)))) z37fc@t))) (z2ec4@syntax-dispatch z37fc@t '(#(scheme-id quasisyntax) any)))) z37f8@t))) (z2ec4@syntax-dispatch z37f8@t '#(scheme-id unsyntax-splicing)))) z37c4@t))) (z2ec4@syntax-dispatch z37c4@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) z3794@t))) (z2ec4@syntax-dispatch z3794@t '((#(scheme-id unsyntax) . each-any) . any)))) z3790@t))) (z2ec4@syntax-dispatch z3790@t '#(scheme-id unsyntax)))) z3776@t))) (z2ec4@syntax-dispatch z3776@t '(#(scheme-id unsyntax) any)))) z3772@p))) (lambda (z3758@x) ((lambda (z375a@t) ((lambda (z375c@ls/false) (if z375c@ls/false (apply (lambda (z375e@e) (call-with-values (lambda () (z3757@quasi z375e@e '0)) (lambda (z3766@z3761 z3767@z3763 z3768@z3765) ((lambda (z376c@v z376d@rhs* z376e@lhs*) (z2e7a@bless (list 'syntax-case (cons 'list z376d@rhs*) '() (list z376e@lhs* (list 'syntax z376c@v))))) z3768@z3765 z3767@z3763 z3766@z3761)))) z375c@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z375a@t))) (z2ec4@syntax-dispatch z375a@t '(_ any)))) z3758@x)))) '#f)))) (set! z2eb6@define-struct-macro (lambda (z385c@stx) (z2fad@syntax-violation '#f '"define-struct not supported" z385c@stx))) (set! z2eb8@define-record-type-macro (lambda (z385e@x) ((lambda (z3861@id z3863@get-record-name z3865@get-record-constructor-name z3867@get-record-predicate-name z3869@get-clause z386b@foo-rtd-code z386d@parent-rtd-code z386f@parent-rcd-code z3871@foo-rcd-code z3873@get-protocol-code z3875@get-fields z3877@get-mutator-indices z3879@get-mutators z387b@get-accessors z387d@enumerate z387f@do-define-record z3881@verify-clauses) (begin (set! z3861@id (lambda (z3a54@ctxt . z3a56@str*) (z2fb1@datum->syntax z3a54@ctxt (string->symbol (apply string-append (map (lambda (z3a58@x) (if (symbol? z3a58@x) (symbol->string z3a58@x) (if (string? z3a58@x) z3a58@x (assertion-violation 'define-record-type '"BUG")))) z3a56@str*)))))) (set! z3863@get-record-name (lambda (z3a42@spec) ((lambda (z3a44@t) ((lambda (z3a46@ls/false) (if z3a46@ls/false (apply (lambda (z3a48@foo z3a49@make-foo z3a4a@foo?) z3a48@foo) z3a46@ls/false) ((lambda (z3a4e@t) ((lambda (z3a50@ls/false) (if z3a50@ls/false (apply (lambda (z3a52@foo) z3a52@foo) z3a50@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3a4e@t))) (z2ec4@syntax-dispatch z3a4e@t 'any))) z3a44@t))) (z2ec4@syntax-dispatch z3a44@t '(any any any)))) z3a42@spec))) (set! z3865@get-record-constructor-name (lambda (z3a2e@spec) ((lambda (z3a30@t) ((lambda (z3a32@ls/false) (if z3a32@ls/false (apply (lambda (z3a34@foo z3a35@make-foo z3a36@foo?) z3a35@make-foo) z3a32@ls/false) ((lambda (z3a3a@t) ((lambda (z3a3c@ls/false) (if (and z3a3c@ls/false (apply (lambda (z3a3e@foo) (z2cb9@id? z3a3e@foo)) z3a3c@ls/false)) (apply (lambda (z3a40@foo) (z3861@id z3a40@foo '"make-" (z2ccf@stx->datum z3a40@foo))) z3a3c@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3a3a@t))) (z2ec4@syntax-dispatch z3a3a@t 'any))) z3a30@t))) (z2ec4@syntax-dispatch z3a30@t '(any any any)))) z3a2e@spec))) (set! z3867@get-record-predicate-name (lambda (z3a1a@spec) ((lambda (z3a1c@t) ((lambda (z3a1e@ls/false) (if z3a1e@ls/false (apply (lambda (z3a20@foo z3a21@make-foo z3a22@foo?) z3a22@foo?) z3a1e@ls/false) ((lambda (z3a26@t) ((lambda (z3a28@ls/false) (if (and z3a28@ls/false (apply (lambda (z3a2a@foo) (z2cb9@id? z3a2a@foo)) z3a28@ls/false)) (apply (lambda (z3a2c@foo) (z3861@id z3a2c@foo (z2ccf@stx->datum z3a2c@foo) '"?")) z3a28@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3a26@t))) (z2ec4@syntax-dispatch z3a26@t 'any))) z3a1c@t))) (z2ec4@syntax-dispatch z3a1c@t '(any any any)))) z3a1a@spec))) (set! z3869@get-clause (lambda (z3a08@id z3a09@ls) ((lambda (z3a0c@t) ((lambda (z3a0e@ls/false) (if z3a0e@ls/false (apply (lambda () '#f) z3a0e@ls/false) ((lambda (z3a10@t) ((lambda (z3a12@ls/false) (if z3a12@ls/false (apply (lambda (z3a14@x z3a15@rest z3a16@ls) (if (z2cc1@free-id=? (z2e7a@bless z3a08@id) z3a14@x) (cons z3a14@x z3a15@rest) (z3869@get-clause z3a08@id z3a16@ls))) z3a12@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3a10@t))) (z2ec4@syntax-dispatch z3a10@t '((any . any) . any)))) z3a0c@t))) (z2ec4@syntax-dispatch z3a0c@t '()))) z3a09@ls))) (set! z386b@foo-rtd-code (lambda (z39b6@name z39b7@clause* z39b8@parent-rtd-code) ((lambda (z39bd@convert-field-spec*) (begin (set! z39bd@convert-field-spec* (lambda (z39ee@ls) (list->vector (map (lambda (z39f0@x) ((lambda (z39f2@t) ((lambda (z39f4@ls/false) (if z39f4@ls/false (apply (lambda (z39f6@name z39f7@rest) (list 'mutable z39f6@name)) z39f4@ls/false) ((lambda (z39fa@t) ((lambda (z39fc@ls/false) (if z39fc@ls/false (apply (lambda (z39fe@name z39ff@rest) (list 'immutable z39fe@name)) z39fc@ls/false) ((lambda (z3a02@t) ((lambda (z3a04@ls/false) (if z3a04@ls/false (apply (lambda (z3a06@name) (list 'immutable z3a06@name)) z3a04@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3a02@t))) (z2ec4@syntax-dispatch z3a02@t 'any))) z39fa@t))) (z2ec4@syntax-dispatch z39fa@t '(#(scheme-id immutable) any . any)))) z39f2@t))) (z2ec4@syntax-dispatch z39f2@t '(#(scheme-id mutable) any . any)))) z39f0@x)) z39ee@ls)))) ((lambda (z39be@uid-code z39bf@sealed? z39c0@opaque? z39c1@fields) (z2e7a@bless (list 'make-record-type-descriptor (list 'quote z39b6@name) z39b8@parent-rtd-code z39be@uid-code z39bf@sealed? z39c0@opaque? z39c1@fields))) ((lambda (z39c6@t) ((lambda (z39c8@ls/false) (if z39c8@ls/false (apply (lambda () (list 'quote (gensym))) z39c8@ls/false) ((lambda (z39ca@t) ((lambda (z39cc@ls/false) (if z39cc@ls/false (apply (lambda (z39ce@uid) (list 'quote z39ce@uid)) z39cc@ls/false) ((lambda (z39d0@t) ((lambda (z39d2@ls/false) (if z39d2@ls/false (apply (lambda () '#f) z39d2@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z39d0@t))) (z2ec4@syntax-dispatch z39d0@t '_))) z39ca@t))) (z2ec4@syntax-dispatch z39ca@t '(_ any)))) z39c6@t))) (z2ec4@syntax-dispatch z39c6@t '(_)))) (z3869@get-clause 'nongenerative z39b7@clause*)) ((lambda (z39d4@t) ((lambda (z39d6@ls/false) (if z39d6@ls/false (apply (lambda () '#t) z39d6@ls/false) ((lambda (z39d8@t) ((lambda (z39da@ls/false) (if z39da@ls/false (apply (lambda () '#f) z39da@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z39d8@t))) (z2ec4@syntax-dispatch z39d8@t '_))) z39d4@t))) (z2ec4@syntax-dispatch z39d4@t '(_ #(atom #t))))) (z3869@get-clause 'sealed z39b7@clause*)) ((lambda (z39dc@t) ((lambda (z39de@ls/false) (if z39de@ls/false (apply (lambda () '#t) z39de@ls/false) ((lambda (z39e0@t) ((lambda (z39e2@ls/false) (if z39e2@ls/false (apply (lambda () '#f) z39e2@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z39e0@t))) (z2ec4@syntax-dispatch z39e0@t '_))) z39dc@t))) (z2ec4@syntax-dispatch z39dc@t '(_ #(atom #t))))) (z3869@get-clause 'opaque z39b7@clause*)) ((lambda (z39e4@t) ((lambda (z39e6@ls/false) (if z39e6@ls/false (apply (lambda (z39e8@field-spec*) (list 'quote (z39bd@convert-field-spec* z39e8@field-spec*))) z39e6@ls/false) ((lambda (z39ea@t) ((lambda (z39ec@ls/false) (if z39ec@ls/false (apply (lambda () ''#()) z39ec@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z39ea@t))) (z2ec4@syntax-dispatch z39ea@t '_))) z39e4@t))) (z2ec4@syntax-dispatch z39e4@t '(_ . each-any)))) (z3869@get-clause 'fields z39b7@clause*))))) '#f))) (set! z386d@parent-rtd-code (lambda (z399e@clause*) ((lambda (z39a0@t) ((lambda (z39a2@ls/false) (if z39a2@ls/false (apply (lambda (z39a4@name) (list 'record-type-descriptor z39a4@name)) z39a2@ls/false) ((lambda (z39a6@t) ((lambda (z39a8@ls/false) (if z39a8@ls/false (apply (lambda () ((lambda (z39aa@t) ((lambda (z39ac@ls/false) (if z39ac@ls/false (apply (lambda (z39ae@rtd z39af@rcd) z39ae@rtd) z39ac@ls/false) ((lambda (z39b2@t) ((lambda (z39b4@ls/false) (if z39b4@ls/false (apply (lambda () '#f) z39b4@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z39b2@t))) (z2ec4@syntax-dispatch z39b2@t '#(atom #f)))) z39aa@t))) (z2ec4@syntax-dispatch z39aa@t '(_ any any)))) (z3869@get-clause 'parent-rtd z399e@clause*))) z39a8@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z39a6@t))) (z2ec4@syntax-dispatch z39a6@t '#(atom #f)))) z39a0@t))) (z2ec4@syntax-dispatch z39a0@t '(_ any)))) (z3869@get-clause 'parent z399e@clause*)))) (set! z386f@parent-rcd-code (lambda (z3986@clause*) ((lambda (z3988@t) ((lambda (z398a@ls/false) (if z398a@ls/false (apply (lambda (z398c@name) (list 'record-constructor-descriptor z398c@name)) z398a@ls/false) ((lambda (z398e@t) ((lambda (z3990@ls/false) (if z3990@ls/false (apply (lambda () ((lambda (z3992@t) ((lambda (z3994@ls/false) (if z3994@ls/false (apply (lambda (z3996@rtd z3997@rcd) z3997@rcd) z3994@ls/false) ((lambda (z399a@t) ((lambda (z399c@ls/false) (if z399c@ls/false (apply (lambda () '#f) z399c@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z399a@t))) (z2ec4@syntax-dispatch z399a@t '#(atom #f)))) z3992@t))) (z2ec4@syntax-dispatch z3992@t '(_ any any)))) (z3869@get-clause 'parent-rtd z3986@clause*))) z3990@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z398e@t))) (z2ec4@syntax-dispatch z398e@t '#(atom #f)))) z3988@t))) (z2ec4@syntax-dispatch z3988@t '(_ any)))) (z3869@get-clause 'parent z3986@clause*)))) (set! z3871@foo-rcd-code (lambda (z397e@clause* z397f@foo-rtd z3980@protocol z3981@parent-rcd-code) (list 'make-record-constructor-descriptor z397f@foo-rtd z3981@parent-rcd-code z3980@protocol))) (set! z3873@get-protocol-code (lambda (z3972@clause*) ((lambda (z3974@t) ((lambda (z3976@ls/false) (if z3976@ls/false (apply (lambda (z3978@expr) z3978@expr) z3976@ls/false) ((lambda (z397a@t) ((lambda (z397c@ls/false) (if z397c@ls/false (apply (lambda () '#f) z397c@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z397a@t))) (z2ec4@syntax-dispatch z397a@t '_))) z3974@t))) (z2ec4@syntax-dispatch z3974@t '(_ any)))) (z3869@get-clause 'protocol z3972@clause*)))) (set! z3875@get-fields (lambda (z3960@clause*) ((lambda (z3962@t) ((lambda (z3964@ls/false) (if z3964@ls/false (apply (lambda () '()) z3964@ls/false) ((lambda (z3966@t) ((lambda (z3968@ls/false) (if z3968@ls/false (apply (lambda (z396a@f*) z396a@f*) z3968@ls/false) ((lambda (z396c@t) ((lambda (z396e@ls/false) (if z396e@ls/false (apply (lambda (z3970@rest) (z3875@get-fields z3970@rest)) z396e@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z396c@t))) (z2ec4@syntax-dispatch z396c@t '(_ . any)))) z3966@t))) (z2ec4@syntax-dispatch z3966@t '((#(scheme-id fields) . each-any) . _)))) z3962@t))) (z2ec4@syntax-dispatch z3962@t '()))) z3960@clause*))) (set! z3877@get-mutator-indices (lambda (z3948@fields) ((letrec ((z394a@f (lambda (z394c@fields z394d@i) ((lambda (z3950@t) ((lambda (z3952@ls/false) (if z3952@ls/false (apply (lambda () '()) z3952@ls/false) ((lambda (z3954@t) ((lambda (z3956@ls/false) (if z3956@ls/false (apply (lambda (z3958@rest) (cons z394d@i (z394a@f z3958@rest (+ z394d@i '1)))) z3956@ls/false) ((lambda (z395a@t) ((lambda (z395c@ls/false) (if z395c@ls/false (apply (lambda (z395e@rest) (z394a@f z395e@rest (+ z394d@i '1))) z395c@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z395a@t))) (z2ec4@syntax-dispatch z395a@t '(_ . any)))) z3954@t))) (z2ec4@syntax-dispatch z3954@t '((#(scheme-id mutable) . _) . any)))) z3950@t))) (z2ec4@syntax-dispatch z3950@t '()))) z394c@fields)))) z394a@f) z3948@fields '0))) (set! z3879@get-mutators (lambda (z391e@foo z391f@fields) ((lambda (z3923@gen-name) (begin (set! z3923@gen-name (lambda (z3946@x) (z2fb1@datum->syntax z391e@foo (string->symbol (string-append (symbol->string (z2fb3@syntax->datum z391e@foo)) '"-" (symbol->string (z2fb3@syntax->datum z3946@x)) '"-set!"))))) ((letrec ((z3924@f (lambda (z3926@fields) ((lambda (z3928@t) ((lambda (z392a@ls/false) (if z392a@ls/false (apply (lambda () '()) z392a@ls/false) ((lambda (z392c@t) ((lambda (z392e@ls/false) (if z392e@ls/false (apply (lambda (z3930@name z3931@accessor z3932@mutator z3933@rest) (cons z3932@mutator (z3924@f z3933@rest))) z392e@ls/false) ((lambda (z3938@t) ((lambda (z393a@ls/false) (if z393a@ls/false (apply (lambda (z393c@name z393d@rest) (cons (z3923@gen-name z393c@name) (z3924@f z393d@rest))) z393a@ls/false) ((lambda (z3940@t) ((lambda (z3942@ls/false) (if z3942@ls/false (apply (lambda (z3944@rest) (z3924@f z3944@rest)) z3942@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3940@t))) (z2ec4@syntax-dispatch z3940@t '(_ . any)))) z3938@t))) (z2ec4@syntax-dispatch z3938@t '((#(scheme-id mutable) any) . any)))) z392c@t))) (z2ec4@syntax-dispatch z392c@t '((#(scheme-id mutable) any any any) . any)))) z3928@t))) (z2ec4@syntax-dispatch z3928@t '()))) z3926@fields)))) z3924@f) z391f@fields))) '#f))) (set! z387b@get-accessors (lambda (z38da@foo z38db@fields) ((lambda (z38df@gen-name) (begin (set! z38df@gen-name (lambda (z391c@x) (z2fb1@datum->syntax z38da@foo (string->symbol (string-append (symbol->string (z2fb3@syntax->datum z38da@foo)) '"-" (symbol->string (z2fb3@syntax->datum z391c@x))))))) (map (lambda (z38e0@field) ((lambda (z38e2@t) ((lambda (z38e4@ls/false) (if (and z38e4@ls/false (apply (lambda (z38e6@name z38e7@accessor z38e8@mutator) (z2cb9@id? z38e7@accessor)) z38e4@ls/false)) (apply (lambda (z38ec@name z38ed@accessor z38ee@mutator) z38ed@accessor) z38e4@ls/false) ((lambda (z38f2@t) ((lambda (z38f4@ls/false) (if (and z38f4@ls/false (apply (lambda (z38f6@name z38f7@accessor) (z2cb9@id? z38f7@accessor)) z38f4@ls/false)) (apply (lambda (z38fa@name z38fb@accessor) z38fb@accessor) z38f4@ls/false) ((lambda (z38fe@t) ((lambda (z3900@ls/false) (if (and z3900@ls/false (apply (lambda (z3902@name) (z2cb9@id? z3902@name)) z3900@ls/false)) (apply (lambda (z3904@name) (z38df@gen-name z3904@name)) z3900@ls/false) ((lambda (z3906@t) ((lambda (z3908@ls/false) (if (and z3908@ls/false (apply (lambda (z390a@name) (z2cb9@id? z390a@name)) z3908@ls/false)) (apply (lambda (z390c@name) (z38df@gen-name z390c@name)) z3908@ls/false) ((lambda (z390e@t) ((lambda (z3910@ls/false) (if (and z3910@ls/false (apply (lambda (z3912@name) (z2cb9@id? z3912@name)) z3910@ls/false)) (apply (lambda (z3914@name) (z38df@gen-name z3914@name)) z3910@ls/false) ((lambda (z3916@t) ((lambda (z3918@ls/false) (if z3918@ls/false (apply (lambda (z391a@others) (z2fad@syntax-violation '#f '"invalid field spec" z38e0@field)) z3918@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3916@t))) (z2ec4@syntax-dispatch z3916@t 'any))) z390e@t))) (z2ec4@syntax-dispatch z390e@t 'any))) z3906@t))) (z2ec4@syntax-dispatch z3906@t '(#(scheme-id immutable) any)))) z38fe@t))) (z2ec4@syntax-dispatch z38fe@t '(#(scheme-id mutable) any)))) z38f2@t))) (z2ec4@syntax-dispatch z38f2@t '(#(scheme-id immutable) any any)))) z38e2@t))) (z2ec4@syntax-dispatch z38e2@t '(#(scheme-id mutable) any any any)))) z38e0@field)) z38db@fields))) '#f))) (set! z387d@enumerate (lambda (z38d2@ls) ((letrec ((z38d4@f (lambda (z38d6@ls z38d7@i) (if (null? z38d6@ls) '() (cons z38d7@i (z38d4@f (cdr z38d6@ls) (+ z38d7@i '1))))))) z38d4@f) z38d2@ls '0))) (set! z387f@do-define-record (lambda (z38aa@namespec z38ab@clause*) ((lambda (z38ae@foo) ((lambda (z38b0@foo-rtd) ((lambda (z38b2@foo-rcd) ((lambda (z38b4@protocol) ((lambda (z38b6@make-foo) ((lambda (z38b8@fields) ((lambda (z38ba@idx*) ((lambda (z38bc@foo-x*) ((lambda (z38be@set-foo-x!*) ((lambda (z38c0@set-foo-idx*) ((lambda (z38c2@foo?) ((lambda (z38c4@foo-rtd-code) ((lambda (z38c6@foo-rcd-code) ((lambda (z38c8@protocol-code) ((lambda () (z2e7a@bless (cons 'begin (cons (list 'define z38b0@foo-rtd z38c4@foo-rtd-code) (cons (list 'define z38b4@protocol z38c8@protocol-code) (cons (list 'define z38b2@foo-rcd z38c6@foo-rcd-code) (cons (list 'define-syntax z38ae@foo (list 'list ''$rtd (list 'syntax z38b0@foo-rtd) (list 'syntax z38b2@foo-rcd))) (cons (list 'define z38c2@foo? (list 'record-predicate z38b0@foo-rtd)) (cons (list 'define z38b6@make-foo (list 'record-constructor z38b2@foo-rcd)) (append (map (lambda (z38ca@foo-x z38cb@idx) (list 'define z38ca@foo-x (list 'record-accessor z38b0@foo-rtd z38cb@idx))) z38bc@foo-x* z38ba@idx*) (map (lambda (z38ce@set-foo-x! z38cf@idx) (list 'define z38ce@set-foo-x! (list 'record-mutator z38b0@foo-rtd z38cf@idx))) z38be@set-foo-x!* z38c0@set-foo-idx*))))))))))))) (z3873@get-protocol-code z38ab@clause*))) (z3871@foo-rcd-code z38ab@clause* z38b0@foo-rtd z38b4@protocol (z386f@parent-rcd-code z38ab@clause*)))) (z386b@foo-rtd-code z38ae@foo z38ab@clause* (z386d@parent-rtd-code z38ab@clause*)))) (z3867@get-record-predicate-name z38aa@namespec))) (z3877@get-mutator-indices z38b8@fields))) (z3879@get-mutators z38ae@foo z38b8@fields))) (z387b@get-accessors z38ae@foo z38b8@fields))) (z387d@enumerate z38b8@fields))) (z3875@get-fields z38ab@clause*))) (z3865@get-record-constructor-name z38aa@namespec))) (gensym))) (gensym))) (gensym))) (z3863@get-record-name z38aa@namespec)))) (set! z3881@verify-clauses (lambda (z388a@x z388b@cls*) ((lambda (z388f@valid-kwds z3891@free-id-member?) (begin (set! z388f@valid-kwds (map z2e7a@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! z3891@free-id-member? (lambda (z38a6@x z38a7@ls) (and (pair? z38a7@ls) (or (z2cc1@free-id=? z38a6@x (car z38a7@ls)) (z3891@free-id-member? z38a6@x (cdr z38a7@ls)))))) ((letrec ((z3892@f (lambda (z3894@cls* z3895@seen*) (if (not (null? z3894@cls*)) ((lambda (z3898@t) ((lambda (z389a@ls/false) (if z389a@ls/false (apply (lambda (z389c@kwd z389d@rest) (if (or (not (z2cb9@id? z389c@kwd)) (not (z3891@free-id-member? z389c@kwd z388f@valid-kwds))) (z2fad@syntax-violation '#f '"not a valid define-record-type keyword" z389c@kwd) (if (z2cc7@bound-id-member? z389c@kwd z3895@seen*) (z2fad@syntax-violation '#f '"duplicate use of keyword " z388a@x z389c@kwd) (z3892@f (cdr z3894@cls*) (cons z389c@kwd z3895@seen*))))) z389a@ls/false) ((lambda (z38a0@t) ((lambda (z38a2@ls/false) (if z38a2@ls/false (apply (lambda (z38a4@cls) (z2fad@syntax-violation '#f '"malformed define-record-type clause" z38a4@cls)) z38a2@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z38a0@t))) (z2ec4@syntax-dispatch z38a0@t 'any))) z3898@t))) (z2ec4@syntax-dispatch z3898@t '(any . any)))) (car z3894@cls*)) (void))))) z3892@f) z388b@cls* '()))) '#f '#f))) ((lambda (z3882@t) ((lambda (z3884@ls/false) (if z3884@ls/false (apply (lambda (z3886@namespec z3887@clause*) (begin (z3881@verify-clauses z385e@x z3887@clause*) (z387f@do-define-record z3886@namespec z3887@clause*))) z3884@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3882@t))) (z2ec4@syntax-dispatch z3882@t '(_ any . each-any)))) z385e@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! z2eba@define-condition-type-macro (lambda (z3a5a@x) ((lambda (z3a5d@mkname) (begin (set! z3a5d@mkname (lambda (z3a8a@name z3a8b@suffix) (z2fb1@datum->syntax z3a8a@name (string->symbol (string-append (symbol->string (z2fb3@syntax->datum z3a8a@name)) z3a8b@suffix))))) ((lambda (z3a5e@t) ((lambda (z3a60@ls/false) (if (and z3a60@ls/false (apply (lambda (z3a62@ctxt z3a63@name z3a64@super z3a65@constructor z3a66@predicate z3a67@field* z3a68@accessor*) (and (z2cb9@id? z3a63@name) (z2cb9@id? z3a64@super) (z2cb9@id? z3a65@constructor) (z2cb9@id? z3a66@predicate) (for-all z2cb9@id? z3a67@field*) (for-all z2cb9@id? z3a68@accessor*))) z3a60@ls/false)) (apply (lambda (z3a70@ctxt z3a71@name z3a72@super z3a73@constructor z3a74@predicate z3a75@field* z3a76@accessor*) ((lambda (z3a7e@aux-accessor*) (z2e7a@bless (cons 'begin (cons (cons 'define-record-type (cons (list z3a71@name z3a73@constructor (gensym)) (cons (list 'parent z3a72@super) (cons (cons 'fields (map (lambda (z3a80@field z3a81@aux) (list 'immutable z3a80@field z3a81@aux)) z3a75@field* z3a7e@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define z3a74@predicate (list 'condition-predicate (list 'record-type-descriptor z3a71@name))) (map (lambda (z3a84@accessor z3a85@aux) (list 'define z3a84@accessor (list 'condition-accessor (list 'record-type-descriptor z3a71@name) z3a85@aux))) z3a76@accessor* z3a7e@aux-accessor*)))))) (map (lambda (z3a88@x) (gensym)) z3a76@accessor*))) z3a60@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3a5e@t))) (z2ec4@syntax-dispatch z3a5e@t '(any any any any any . #(each (any any)))))) z3a5a@x))) '#f))) (set! z2ebc@incorrect-usage-macro (lambda (z3a8e@e) (z2fad@syntax-violation '#f '"incorrect usage of auxiliary keyword" z3a8e@e))) (set! z2ebe@parameterize-macro (lambda (z3a90@e) ((lambda (z3a92@t) ((lambda (z3a94@ls/false) (if z3a94@ls/false (apply (lambda (z3a96@b z3a97@b*) (z2e7a@bless (cons 'let (cons '() (cons z3a96@b z3a97@b*))))) z3a94@ls/false) ((lambda (z3a9a@t) ((lambda (z3a9c@ls/false) (if z3a9c@ls/false (apply (lambda (z3a9e@olhs* z3a9f@orhs* z3aa0@b z3aa1@b*) ((lambda (z3aa6@lhs* z3aa7@rhs*) (z2e7a@bless (cons (list 'lambda (append z3aa6@lhs* z3aa7@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (z3aaa@lhs z3aab@rhs) (list 'let (list (list 't (list z3aaa@lhs))) (list z3aaa@lhs z3aab@rhs) (cons 'set! (cons z3aab@rhs '(t))))) z3aa6@lhs* z3aa7@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons z3aa0@b z3aa1@b*))) '(swap)))))) (append z3a9e@olhs* z3a9f@orhs*)))) (z2f9b@generate-temporaries z3a9e@olhs*) (z2f9b@generate-temporaries z3a9f@orhs*))) z3a9c@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3a9a@t))) (z2ec4@syntax-dispatch z3a9a@t '(_ #(each (any any)) any . each-any)))) z3a92@t))) (z2ec4@syntax-dispatch z3a92@t '(_ () any . each-any)))) z3a90@e))) (set! z2ec0@foreign-call-transformer (lambda (z3aae@e z3aaf@r z3ab0@mr) ((lambda (z3ab4@t) ((lambda (z3ab6@ls/false) (if z3ab6@ls/false (apply (lambda (z3ab8@name z3ab9@arg*) (cons 'foreign-call (cons (z2ee6@chi-expr z3ab8@name z3aaf@r z3ab0@mr) (z2ee2@chi-expr* z3ab9@arg* z3aaf@r z3ab0@mr)))) z3ab6@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3ab4@t))) (z2ec4@syntax-dispatch z3ab4@t '(_ any . each-any)))) z3aae@e))) (set! z2ec2@convert-pattern (lambda (z3abc@pattern z3abd@keys) ((lambda (z3ac1@cvt* z3ac3@cvt) (begin (set! z3ac1@cvt* (lambda (z3b60@p* z3b61@n z3b62@ids) (if (null? z3b60@p*) (values '() z3b62@ids) (call-with-values (lambda () (z3ac1@cvt* (cdr z3b60@p*) z3b61@n z3b62@ids)) (lambda (z3b6a@z3b67 z3b6b@z3b69) ((lambda (z3b6e@ids z3b6f@y) (call-with-values (lambda () (z3ac3@cvt (car z3b60@p*) z3b61@n z3b6e@ids)) (lambda (z3b76@z3b73 z3b77@z3b75) ((lambda (z3b7a@ids z3b7b@x) (values (cons z3b7b@x z3b6f@y) z3b7a@ids)) z3b77@z3b75 z3b76@z3b73)))) z3b6b@z3b69 z3b6a@z3b67)))))) (set! z3ac3@cvt (lambda (z3ac4@p z3ac5@n z3ac6@ids) ((lambda (z3aca@t) ((lambda (z3acc@ls/false) (if (and z3acc@ls/false (apply (lambda (z3ace@id) (z2cb9@id? z3ace@id)) z3acc@ls/false)) (apply (lambda (z3ad0@id) (if (z2cc7@bound-id-member? z3ac4@p z3abd@keys) (values (vector 'free-id z3ac4@p) z3ac6@ids) (if (z2cc1@free-id=? z3ac4@p (z2e4e@scheme-stx '_)) (values '_ z3ac6@ids) (values 'any (cons (cons z3ac4@p z3ac5@n) z3ac6@ids))))) z3acc@ls/false) ((lambda (z3ad2@t) ((lambda (z3ad4@ls/false) (if (and z3ad4@ls/false (apply (lambda (z3ad6@p z3ad7@dots) (z2ec6@ellipsis? z3ad7@dots)) z3ad4@ls/false)) (apply (lambda (z3ada@p z3adb@dots) (call-with-values (lambda () (z3ac3@cvt z3ada@p (+ z3ac5@n '1) z3ac6@ids)) (lambda (z3ae2@z3adf z3ae3@z3ae1) ((lambda (z3ae6@ids z3ae7@p) (values (if (eq? z3ae7@p 'any) 'each-any (vector 'each z3ae7@p)) z3ae6@ids)) z3ae3@z3ae1 z3ae2@z3adf)))) z3ad4@ls/false) ((lambda (z3aea@t) ((lambda (z3aec@ls/false) (if (and z3aec@ls/false (apply (lambda (z3aee@x z3aef@dots z3af0@ys z3af1@z) (z2ec6@ellipsis? z3aef@dots)) z3aec@ls/false)) (apply (lambda (z3af6@x z3af7@dots z3af8@ys z3af9@z) (call-with-values (lambda () (z3ac3@cvt z3af9@z z3ac5@n z3ac6@ids)) (lambda (z3b02@z3aff z3b03@z3b01) ((lambda (z3b06@ids z3b07@z) (call-with-values (lambda () (z3ac1@cvt* z3af8@ys z3ac5@n z3b06@ids)) (lambda (z3b0e@z3b0b z3b0f@z3b0d) ((lambda (z3b12@ids z3b13@ys) (call-with-values (lambda () (z3ac3@cvt z3af6@x (+ z3ac5@n '1) z3b12@ids)) (lambda (z3b1a@z3b17 z3b1b@z3b19) ((lambda (z3b1e@ids z3b1f@x) (values (vector 'each+ z3b1f@x (reverse z3b13@ys) z3b07@z) z3b1e@ids)) z3b1b@z3b19 z3b1a@z3b17)))) z3b0f@z3b0d z3b0e@z3b0b)))) z3b03@z3b01 z3b02@z3aff)))) z3aec@ls/false) ((lambda (z3b22@t) ((lambda (z3b24@ls/false) (if z3b24@ls/false (apply (lambda (z3b26@x z3b27@y) (call-with-values (lambda () (z3ac3@cvt z3b27@y z3ac5@n z3ac6@ids)) (lambda (z3b2e@z3b2b z3b2f@z3b2d) ((lambda (z3b32@ids z3b33@y) (call-with-values (lambda () (z3ac3@cvt z3b26@x z3ac5@n z3b32@ids)) (lambda (z3b3a@z3b37 z3b3b@z3b39) ((lambda (z3b3e@ids z3b3f@x) (values (cons z3b3f@x z3b33@y) z3b3e@ids)) z3b3b@z3b39 z3b3a@z3b37)))) z3b2f@z3b2d z3b2e@z3b2b)))) z3b24@ls/false) ((lambda (z3b42@t) ((lambda (z3b44@ls/false) (if z3b44@ls/false (apply (lambda () (values '() z3ac6@ids)) z3b44@ls/false) ((lambda (z3b46@t) ((lambda (z3b48@ls/false) (if (and z3b48@ls/false (apply (lambda (z3b4a@p) (not (z2c81@stx? z3b4a@p))) z3b48@ls/false)) (apply (lambda (z3b4c@p) (call-with-values (lambda () (z3ac3@cvt z3b4c@p z3ac5@n z3ac6@ids)) (lambda (z3b52@z3b4f z3b53@z3b51) ((lambda (z3b56@ids z3b57@p) (values (vector 'vector z3b57@p) z3b56@ids)) z3b53@z3b51 z3b52@z3b4f)))) z3b48@ls/false) ((lambda (z3b5a@t) ((lambda (z3b5c@ls/false) (if z3b5c@ls/false (apply (lambda (z3b5e@datum) (values (vector 'atom (z2ccf@stx->datum z3b5e@datum)) z3ac6@ids)) z3b5c@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3b5a@t))) (z2ec4@syntax-dispatch z3b5a@t 'any))) z3b46@t))) (z2ec4@syntax-dispatch z3b46@t '#(vector each-any)))) z3b42@t))) (z2ec4@syntax-dispatch z3b42@t '()))) z3b22@t))) (z2ec4@syntax-dispatch z3b22@t '(any . any)))) z3aea@t))) (z2ec4@syntax-dispatch z3aea@t '(any any . #(each+ any () any))))) z3ad2@t))) (z2ec4@syntax-dispatch z3ad2@t '(any any)))) z3aca@t))) (z2ec4@syntax-dispatch z3aca@t 'any))) z3ac4@p))) (z3ac3@cvt z3abc@pattern '0 '()))) '#f '#f))) (set! z2ec4@syntax-dispatch ((lambda () ((lambda (z3b7f@stx^ z3b81@match-each z3b83@match-each+ z3b85@match-each-any z3b87@match-empty z3b89@combine z3b8b@match* z3b8d@match) (begin (set! z3b7f@stx^ (lambda (z3c5a@e z3c5b@m* z3c5c@s* z3c5d@ae*) (if (and (null? z3c5b@m*) (null? z3c5c@s*) (null? z3c5d@ae*)) z3c5a@e (z2ca1@mkstx z3c5a@e z3c5b@m* z3c5c@s* z3c5d@ae*)))) (set! z3b81@match-each (lambda (z3c3a@e z3c3b@p z3c3c@m* z3c3d@s* z3c3e@ae*) (if (pair? z3c3a@e) ((lambda (z3c44@first) (and z3c44@first ((lambda (z3c46@rest) (and z3c46@rest (cons z3c44@first z3c46@rest))) (z3b81@match-each (cdr z3c3a@e) z3c3b@p z3c3c@m* z3c3d@s* z3c3e@ae*)))) (z3b8d@match (car z3c3a@e) z3c3b@p z3c3c@m* z3c3d@s* z3c3e@ae* '())) (if (null? z3c3a@e) '() (if (z2c81@stx? z3c3a@e) (and (not (z2c37@top-marked? z3c3c@m*)) (call-with-values (lambda () (z2c9f@join-wraps z3c3c@m* z3c3d@s* z3c3e@ae* z3c3a@e)) (lambda (z3c4e@z3c49 z3c4f@z3c4b z3c50@z3c4d) ((lambda (z3c54@ae* z3c55@s* z3c56@m*) (z3b81@match-each (z2c85@stx-expr z3c3a@e) z3c3b@p z3c56@m* z3c55@s* z3c54@ae*)) z3c50@z3c4d z3c4f@z3c4b z3c4e@z3c49)))) (if (z2858@z2777@annotation? z3c3a@e) (z3b81@match-each (z285a@z277b@annotation-expression z3c3a@e) z3c3b@p z3c3c@m* z3c3d@s* z3c3e@ae*) '#f)))))) (set! z3b83@match-each+ (lambda (z3bfa@e z3bfb@x-pat z3bfc@y-pat z3bfd@z-pat z3bfe@m* z3bff@s* z3c00@ae* z3c01@r) ((letrec ((z3c0a@f (lambda (z3c0c@e z3c0d@m* z3c0e@s* z3c0f@ae*) (if (pair? z3c0c@e) (call-with-values (lambda () (z3c0a@f (cdr z3c0c@e) z3c0d@m* z3c0e@s* z3c0f@ae*)) (lambda (z3c1a@z3c15 z3c1b@z3c17 z3c1c@z3c19) ((lambda (z3c20@r z3c21@y-pat z3c22@xr*) (if z3c20@r (if (null? z3c21@y-pat) ((lambda (z3c26@xr) (if z3c26@xr (values (cons z3c26@xr z3c22@xr*) z3c21@y-pat z3c20@r) (values '#f '#f '#f))) (z3b8d@match (car z3c0c@e) z3bfb@x-pat z3c0d@m* z3c0e@s* z3c0f@ae* '())) (values '() (cdr z3c21@y-pat) (z3b8d@match (car z3c0c@e) (car z3c21@y-pat) z3c0d@m* z3c0e@s* z3c0f@ae* z3c20@r))) (values '#f '#f '#f))) z3c1c@z3c19 z3c1b@z3c17 z3c1a@z3c15))) (if (z2c81@stx? z3c0c@e) (if (z2c37@top-marked? z3c0d@m*) (values '() z3bfc@y-pat (z3b8d@match z3c0c@e z3bfd@z-pat z3c0d@m* z3c0e@s* z3c0f@ae* z3c01@r)) (call-with-values (lambda () (z2c9f@join-wraps z3c0d@m* z3c0e@s* z3c0f@ae* z3c0c@e)) (lambda (z3c2e@z3c29 z3c2f@z3c2b z3c30@z3c2d) ((lambda (z3c34@ae* z3c35@s* z3c36@m*) (z3c0a@f (z2c85@stx-expr z3c0c@e) z3c36@m* z3c35@s* z3c34@ae*)) z3c30@z3c2d z3c2f@z3c2b z3c2e@z3c29)))) (if (z2858@z2777@annotation? z3c0c@e) (z3c0a@f (z285a@z277b@annotation-expression z3c0c@e) z3c0d@m* z3c0e@s* z3c0f@ae*) (values '() z3bfc@y-pat (z3b8d@match z3c0c@e z3bfd@z-pat z3c0d@m* z3c0e@s* z3c0f@ae* z3c01@r)))))))) z3c0a@f) z3bfa@e z3bfe@m* z3bff@s* z3c00@ae*))) (set! z3b85@match-each-any (lambda (z3bde@e z3bdf@m* z3be0@s* z3be1@ae*) (if (pair? z3bde@e) ((lambda (z3be6@l) (and z3be6@l (cons (z3b7f@stx^ (car z3bde@e) z3bdf@m* z3be0@s* z3be1@ae*) z3be6@l))) (z3b85@match-each-any (cdr z3bde@e) z3bdf@m* z3be0@s* z3be1@ae*)) (if (null? z3bde@e) '() (if (z2c81@stx? z3bde@e) (and (not (z2c37@top-marked? z3bdf@m*)) (call-with-values (lambda () (z2c9f@join-wraps z3bdf@m* z3be0@s* z3be1@ae* z3bde@e)) (lambda (z3bee@z3be9 z3bef@z3beb z3bf0@z3bed) ((lambda (z3bf4@ae* z3bf5@s* z3bf6@m*) (z3b85@match-each-any (z2c85@stx-expr z3bde@e) z3bf6@m* z3bf5@s* z3bf4@ae*)) z3bf0@z3bed z3bef@z3beb z3bee@z3be9)))) (if (z2858@z2777@annotation? z3bde@e) (z3b85@match-each-any (z285a@z277b@annotation-expression z3bde@e) z3bdf@m* z3be0@s* z3be1@ae*) '#f)))))) (set! z3b87@match-empty (lambda (z3bd8@p z3bd9@r) (if (null? z3bd8@p) z3bd9@r (if (eq? z3bd8@p '_) z3bd9@r (if (eq? z3bd8@p 'any) (cons '() z3bd9@r) (if (pair? z3bd8@p) (z3b87@match-empty (car z3bd8@p) (z3b87@match-empty (cdr z3bd8@p) z3bd9@r)) (if (eq? z3bd8@p 'each-any) (cons '() z3bd9@r) ((lambda (z3bdc@t) (if (memv z3bdc@t '(each)) (z3b87@match-empty (vector-ref z3bd8@p '1) z3bd9@r) (if (memv z3bdc@t '(each+)) (z3b87@match-empty (vector-ref z3bd8@p '1) (z3b87@match-empty (reverse (vector-ref z3bd8@p '2)) (z3b87@match-empty (vector-ref z3bd8@p '3) z3bd9@r))) (if (memv z3bdc@t '(free-id atom)) z3bd9@r (if (memv z3bdc@t '(scheme-id atom)) z3bd9@r (if (memv z3bdc@t '(vector)) (z3b87@match-empty (vector-ref z3bd8@p '1) z3bd9@r) (assertion-violation 'syntax-dispatch '"invalid pattern" z3bd8@p))))))) (vector-ref z3bd8@p '0))))))))) (set! z3b89@combine (lambda (z3bd4@r* z3bd5@r) (if (null? (car z3bd4@r*)) z3bd5@r (cons (map car z3bd4@r*) (z3b89@combine (map cdr z3bd4@r*) z3bd5@r))))) (set! z3b8b@match* (lambda (z3bb0@e z3bb1@p z3bb2@m* z3bb3@s* z3bb4@ae* z3bb5@r) (if (null? z3bb1@p) (and (null? z3bb0@e) z3bb5@r) (if (pair? z3bb1@p) (and (pair? z3bb0@e) (z3b8d@match (car z3bb0@e) (car z3bb1@p) z3bb2@m* z3bb3@s* z3bb4@ae* (z3b8d@match (cdr z3bb0@e) (cdr z3bb1@p) z3bb2@m* z3bb3@s* z3bb4@ae* z3bb5@r))) (if (eq? z3bb1@p 'each-any) ((lambda (z3bbc@l) (and z3bbc@l (cons z3bbc@l z3bb5@r))) (z3b85@match-each-any z3bb0@e z3bb2@m* z3bb3@s* z3bb4@ae*)) ((lambda (z3bbe@t) (if (memv z3bbe@t '(each)) (if (null? z3bb0@e) (z3b87@match-empty (vector-ref z3bb1@p '1) z3bb5@r) ((lambda (z3bc0@r*) (and z3bc0@r* (z3b89@combine z3bc0@r* z3bb5@r))) (z3b81@match-each z3bb0@e (vector-ref z3bb1@p '1) z3bb2@m* z3bb3@s* z3bb4@ae*))) (if (memv z3bbe@t '(free-id)) (and (symbol? z3bb0@e) (z2c37@top-marked? z3bb2@m*) (z2cc1@free-id=? (z3b7f@stx^ z3bb0@e z3bb2@m* z3bb3@s* z3bb4@ae*) (vector-ref z3bb1@p '1)) z3bb5@r) (if (memv z3bbe@t '(scheme-id)) (and (symbol? z3bb0@e) (z2c37@top-marked? z3bb2@m*) (z2cc1@free-id=? (z3b7f@stx^ z3bb0@e z3bb2@m* z3bb3@s* z3bb4@ae*) (z2e4e@scheme-stx (vector-ref z3bb1@p '1))) z3bb5@r) (if (memv z3bbe@t '(each+)) (call-with-values (lambda () (z3b83@match-each+ z3bb0@e (vector-ref z3bb1@p '1) (vector-ref z3bb1@p '2) (vector-ref z3bb1@p '3) z3bb2@m* z3bb3@s* z3bb4@ae* z3bb5@r)) (lambda (z3bc8@z3bc3 z3bc9@z3bc5 z3bca@z3bc7) ((lambda (z3bce@r z3bcf@y-pat z3bd0@xr*) (and z3bce@r (null? z3bcf@y-pat) (if (null? z3bd0@xr*) (z3b87@match-empty (vector-ref z3bb1@p '1) z3bce@r) (z3b89@combine z3bd0@xr* z3bce@r)))) z3bca@z3bc7 z3bc9@z3bc5 z3bc8@z3bc3))) (if (memv z3bbe@t '(atom)) (and (fast-equal? (vector-ref z3bb1@p '1) (z2ccd@strip z3bb0@e z3bb2@m*)) z3bb5@r) (if (memv z3bbe@t '(vector)) (and (vector? z3bb0@e) (z3b8d@match (vector->list z3bb0@e) (vector-ref z3bb1@p '1) z3bb2@m* z3bb3@s* z3bb4@ae* z3bb5@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" z3bb1@p)))))))) (vector-ref z3bb1@p '0))))))) (set! z3b8d@match (lambda (z3b92@e z3b93@p z3b94@m* z3b95@s* z3b96@ae* z3b97@r) (if (not z3b97@r) '#f (if (eq? z3b93@p '_) z3b97@r (if (eq? z3b93@p 'any) (cons (z3b7f@stx^ z3b92@e z3b94@m* z3b95@s* z3b96@ae*) z3b97@r) (if (z2c81@stx? z3b92@e) (and (not (z2c37@top-marked? z3b94@m*)) (call-with-values (lambda () (z2c9f@join-wraps z3b94@m* z3b95@s* z3b96@ae* z3b92@e)) (lambda (z3ba4@z3b9f z3ba5@z3ba1 z3ba6@z3ba3) ((lambda (z3baa@ae* z3bab@s* z3bac@m*) (z3b8d@match (z2c85@stx-expr z3b92@e) z3b93@p z3bac@m* z3bab@s* z3baa@ae* z3b97@r)) z3ba6@z3ba3 z3ba5@z3ba1 z3ba4@z3b9f)))) (if (z2858@z2777@annotation? z3b92@e) (z3b8d@match (z285a@z277b@annotation-expression z3b92@e) z3b93@p z3b94@m* z3b95@s* z3b96@ae* z3b97@r) (z3b8b@match* z3b92@e z3b93@p z3b94@m* z3b95@s* z3b96@ae* z3b97@r)))))))) (lambda (z3b8e@e z3b8f@p) (z3b8d@match z3b8e@e z3b8f@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! z2ec6@ellipsis? (lambda (z3c62@x) (and (z2cb9@id? z3c62@x) (z2cc1@free-id=? z3c62@x (z2e4e@scheme-stx '...))))) (set! z2ec8@underscore? (lambda (z3c64@x) (and (z2cb9@id? z3c64@x) (z2cc1@free-id=? z3c64@x (z2e4e@scheme-stx '_))))) (set! z2eca@verify-literals (lambda (z3c66@lits z3c67@expr) (for-each (lambda (z3c6a@x) (if (or (not (z2cb9@id? z3c6a@x)) (z2ec6@ellipsis? z3c6a@x) (z2ec8@underscore? z3c6a@x)) (z2fad@syntax-violation '#f '"invalid literal" z3c67@expr z3c6a@x) (void))) z3c66@lits))) (set! z2ecc@syntax-case-transformer ((lambda () ((lambda (z3c6d@build-dispatch-call z3c6f@invalid-ids-error z3c71@gen-clause z3c73@gen-syntax-case) (begin (set! z3c6d@build-dispatch-call (lambda (z3cde@pvars z3cdf@expr z3ce0@y z3ce1@r z3ce2@mr) ((lambda (z3ce8@ids z3ce9@levels) ((lambda (z3cec@labels z3ced@new-vars) ((lambda (z3cf0@body) (list '(primitive apply) (z2c15@z2b55@build-lambda '#f z3ced@new-vars z3cf0@body) z3ce0@y)) (z2ee6@chi-expr (z2ca5@add-subst (z2c74@make-full-rib z3ce8@ids z3cec@labels) z3cdf@expr) (append (map (lambda (z3cf2@label z3cf3@var z3cf4@level) (cons z3cf2@label (z2cd9@make-binding 'syntax (cons z3cf3@var z3cf4@level)))) z3cec@labels z3ced@new-vars (map cdr z3cde@pvars)) z3ce1@r) z3ce2@mr))) (map z2c3d@gen-label z3ce8@ids) (map z2c39@gen-lexical z3ce8@ids))) (map car z3cde@pvars) (map cdr z3cde@pvars)))) (set! z3c6f@invalid-ids-error (lambda (z3cd2@id* z3cd3@e z3cd4@class) ((letrec ((z3cd8@find (lambda (z3cda@id* z3cdb@ok*) (if (null? z3cda@id*) (z2fad@syntax-violation '#f '"invalid syntax" z3cd3@e) (if (z2cb9@id? (car z3cda@id*)) (if (z2cc7@bound-id-member? (car z3cda@id*) z3cdb@ok*) (z2fa9@syntax-error (car z3cda@id*) '"duplicate " z3cd4@class) (z3cd8@find (cdr z3cda@id*) (cons (car z3cda@id*) z3cdb@ok*))) (z2fa9@syntax-error (car z3cda@id*) '"invalid " z3cd4@class)))))) z3cd8@find) z3cd2@id* '()))) (set! z3c71@gen-clause (lambda (z3caa@x z3cab@keys z3cac@clauses z3cad@r z3cae@mr z3caf@pat z3cb0@fender z3cb1@expr) (call-with-values (lambda () (z2ec2@convert-pattern z3caf@pat z3cab@keys)) (lambda (z3cbe@z3cbb z3cbf@z3cbd) ((lambda (z3cc2@pvars z3cc3@p) (if (not (z2cc5@distinct-bound-ids? (map car z3cc2@pvars))) (z3c6f@invalid-ids-error (map car z3cc2@pvars) z3caf@pat '"pattern variable") (if (not (for-all (lambda (z3cc6@x) (not (z2ec6@ellipsis? (car z3cc6@x)))) z3cc2@pvars)) (z2fad@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" z3caf@pat) ((lambda (z3cc8@y) ((lambda (z3cca@test) ((lambda (z3ccc@conseq) ((lambda (z3cce@altern) (list (z2c15@z2b55@build-lambda '#f (list z3cc8@y) (list 'if z3cca@test z3ccc@conseq z3cce@altern)) (list '(primitive syntax-dispatch) z3caa@x (list 'quote z3cc3@p)))) (z3c73@gen-syntax-case z3caa@x z3cab@keys z3cac@clauses z3cad@r z3cae@mr))) (z3c6d@build-dispatch-call z3cc2@pvars z3cb1@expr z3cc8@y z3cad@r z3cae@mr))) (if (eq? z3cb0@fender '#t) z3cc8@y ((lambda (z3cd0@call) (list 'if z3cc8@y z3cd0@call (list 'quote '#f))) (z3c6d@build-dispatch-call z3cc2@pvars z3cb0@fender z3cc8@y z3cad@r z3cae@mr))))) (z2c39@gen-lexical 'tmp))))) z3cbf@z3cbd z3cbe@z3cbb))))) (set! z3c73@gen-syntax-case (lambda (z3c88@x z3c89@keys z3c8a@clauses z3c8b@r z3c8c@mr) (if (null? z3c8a@clauses) (list '(primitive syntax-error) z3c88@x) ((lambda (z3c92@t) ((lambda (z3c94@ls/false) (if z3c94@ls/false (apply (lambda (z3c96@pat z3c97@expr) (if (and (z2cb9@id? z3c96@pat) (not (z2cc7@bound-id-member? z3c96@pat z3c89@keys)) (not (z2ec6@ellipsis? z3c96@pat))) (if (z2cc1@free-id=? z3c96@pat (z2e4e@scheme-stx '_)) (z2ee6@chi-expr z3c97@expr z3c8b@r z3c8c@mr) ((lambda (z3c9a@lab z3c9b@lex) ((lambda (z3c9e@body) (list (z2c15@z2b55@build-lambda '#f (list z3c9b@lex) z3c9e@body) z3c88@x)) (z2ee6@chi-expr (z2ca5@add-subst (z2c74@make-full-rib (list z3c96@pat) (list z3c9a@lab)) z3c97@expr) (cons (cons z3c9a@lab (z2cd9@make-binding 'syntax (cons z3c9b@lex '0))) z3c8b@r) z3c8c@mr))) (z2c3d@gen-label z3c96@pat) (z2c39@gen-lexical z3c96@pat))) (z3c71@gen-clause z3c88@x z3c89@keys (cdr z3c8a@clauses) z3c8b@r z3c8c@mr z3c96@pat '#t z3c97@expr))) z3c94@ls/false) ((lambda (z3ca0@t) ((lambda (z3ca2@ls/false) (if z3ca2@ls/false (apply (lambda (z3ca4@pat z3ca5@fender z3ca6@expr) (z3c71@gen-clause z3c88@x z3c89@keys (cdr z3c8a@clauses) z3c8b@r z3c8c@mr z3ca4@pat z3ca5@fender z3ca6@expr)) z3ca2@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3ca0@t))) (z2ec4@syntax-dispatch z3ca0@t '(any any any)))) z3c92@t))) (z2ec4@syntax-dispatch z3c92@t '(any any)))) (car z3c8a@clauses))))) (lambda (z3c74@e z3c75@r z3c76@mr) ((lambda (z3c7a@t) ((lambda (z3c7c@ls/false) (if z3c7c@ls/false (apply (lambda (z3c7e@expr z3c7f@keys z3c80@clauses) (begin (z2eca@verify-literals z3c7f@keys z3c74@e) ((lambda (z3c84@x) ((lambda (z3c86@body) (list (z2c15@z2b55@build-lambda '#f (list z3c84@x) z3c86@body) (z2ee6@chi-expr z3c7e@expr z3c75@r z3c76@mr))) (z3c73@gen-syntax-case z3c84@x z3c7f@keys z3c80@clauses z3c75@r z3c76@mr))) (z2c39@gen-lexical 'tmp)))) z3c7c@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3c7a@t))) (z2ec4@syntax-dispatch z3c7a@t '(_ any each-any . each-any)))) z3c74@e)))) '#f '#f '#f '#f)))) (set! z2ece@ellipsis-map (lambda (z3cf8@proc z3cf9@ls . z3cfc@ls*) ((lambda (z3cff@who) (begin (set! z3cff@who '...) (begin (if (not (list? z3cf9@ls)) (assertion-violation z3cff@who '"not a list" z3cf9@ls) (void)) (if (not (null? z3cfc@ls*)) ((lambda (z3d00@n) (for-each (lambda (z3d02@x) (begin (if (not (list? z3d02@x)) (assertion-violation z3cff@who '"not a list" z3d02@x) (void)) (if (not (= (length z3d02@x) z3d00@n)) (assertion-violation z3cff@who '"length mismatch" z3cf9@ls z3d02@x) (void)))) z3cfc@ls*)) (length z3cf9@ls)) (void)) (apply map z3cf8@proc z3cf9@ls z3cfc@ls*)))) '#f))) (set! z2ed0@syntax-transformer ((lambda () ((lambda (z3d05@gen-syntax z3d07@gen-ref z3d09@gen-append z3d0b@gen-mappend z3d0d@gen-map z3d0f@gen-cons z3d11@gen-vector z3d13@regen) (begin (set! z3d05@gen-syntax (lambda (z3d7c@src z3d7d@e z3d7e@r z3d7f@maps z3d80@ellipsis? z3d81@vec?) ((lambda (z3d88@t) ((lambda (z3d8a@ls/false) (if (and z3d8a@ls/false (apply (lambda (z3d8c@dots) (z3d80@ellipsis? z3d8c@dots)) z3d8a@ls/false)) (apply (lambda (z3d8e@dots) (z2fad@syntax-violation '#f '"misplaced ellipsis in syntax form" z3d7c@src)) z3d8a@ls/false) ((lambda (z3d90@t) ((lambda (z3d92@ls/false) (if (and z3d92@ls/false (apply (lambda (z3d94@id) (z2cb9@id? z3d94@id)) z3d92@ls/false)) (apply (lambda (z3d96@id) ((lambda (z3d98@label) ((lambda (z3d9a@b) ((lambda () (if (eq? (z2cdb@binding-type z3d9a@b) 'syntax) (call-with-values (lambda () ((lambda (z3da0@var.lev) (z3d07@gen-ref z3d7c@src (car z3da0@var.lev) (cdr z3da0@var.lev) z3d7f@maps)) (z2cdd@binding-value z3d9a@b))) (lambda (z3da2@z3d9d z3da3@z3d9f) ((lambda (z3da6@maps z3da7@var) (values (list 'ref z3da7@var) z3da6@maps)) z3da3@z3d9f z3da2@z3d9d))) (values (list 'quote z3d7d@e) z3d7f@maps))))) (z2cd7@label->binding z3d98@label z3d7e@r))) (z2cd3@id->label z3d7d@e))) z3d92@ls/false) ((lambda (z3daa@t) ((lambda (z3dac@ls/false) (if (and z3dac@ls/false (apply (lambda (z3dae@dots z3daf@e) (z3d80@ellipsis? z3dae@dots)) z3dac@ls/false)) (apply (lambda (z3db2@dots z3db3@e) (if z3d81@vec? (z2fad@syntax-violation '#f '"misplaced ellipsis in syntax form" z3d7c@src) (z3d05@gen-syntax z3d7c@src z3db3@e z3d7e@r z3d7f@maps (lambda (z3db6@x) '#f) '#f))) z3dac@ls/false) ((lambda (z3db8@t) ((lambda (z3dba@ls/false) (if (and z3dba@ls/false (apply (lambda (z3dbc@x z3dbd@dots z3dbe@y) (z3d80@ellipsis? z3dbd@dots)) z3dba@ls/false)) (apply (lambda (z3dc2@x z3dc3@dots z3dc4@y) ((letrec ((z3dc8@f (lambda (z3dca@y z3dcb@k) ((lambda (z3dce@t) ((lambda (z3dd0@ls/false) (if z3dd0@ls/false (apply (lambda () (z3dcb@k z3d7f@maps)) z3dd0@ls/false) ((lambda (z3dd2@t) ((lambda (z3dd4@ls/false) (if (and z3dd4@ls/false (apply (lambda (z3dd6@dots z3dd7@y) (z3d80@ellipsis? z3dd6@dots)) z3dd4@ls/false)) (apply (lambda (z3dda@dots z3ddb@y) (z3dc8@f z3ddb@y (lambda (z3dde@maps) (call-with-values (lambda () (z3dcb@k (cons '() z3dde@maps))) (lambda (z3de4@z3de1 z3de5@z3de3) ((lambda (z3de8@maps z3de9@x) (if (null? (car z3de8@maps)) (z2fad@syntax-violation '#f '"extra ellipsis in syntax form" z3d7c@src) (values (z3d0b@gen-mappend z3de9@x (car z3de8@maps)) (cdr z3de8@maps)))) z3de5@z3de3 z3de4@z3de1)))))) z3dd4@ls/false) ((lambda (z3dec@t) ((lambda (z3dee@ls/false) (if z3dee@ls/false (apply (lambda () (call-with-values (lambda () (z3d05@gen-syntax z3d7c@src z3dca@y z3d7e@r z3d7f@maps z3d80@ellipsis? z3d81@vec?)) (lambda (z3df4@z3df1 z3df5@z3df3) ((lambda (z3df8@maps z3df9@y) (call-with-values (lambda () (z3dcb@k z3df8@maps)) (lambda (z3e00@z3dfd z3e01@z3dff) ((lambda (z3e04@maps z3e05@x) (values (z3d09@gen-append z3e05@x z3df9@y) z3e04@maps)) z3e01@z3dff z3e00@z3dfd)))) z3df5@z3df3 z3df4@z3df1)))) z3dee@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3dec@t))) (z2ec4@syntax-dispatch z3dec@t '_))) z3dd2@t))) (z2ec4@syntax-dispatch z3dd2@t '(any . any)))) z3dce@t))) (z2ec4@syntax-dispatch z3dce@t '()))) z3dca@y)))) z3dc8@f) z3dc4@y (lambda (z3e08@maps) (call-with-values (lambda () (z3d05@gen-syntax z3d7c@src z3dc2@x z3d7e@r (cons '() z3e08@maps) z3d80@ellipsis? '#f)) (lambda (z3e0e@z3e0b z3e0f@z3e0d) ((lambda (z3e12@maps z3e13@x) (if (null? (car z3e12@maps)) (z2fad@syntax-violation '#f '"extra ellipsis in syntax form" z3d7c@src) (values (z3d0d@gen-map z3e13@x (car z3e12@maps)) (cdr z3e12@maps)))) z3e0f@z3e0d z3e0e@z3e0b)))))) z3dba@ls/false) ((lambda (z3e16@t) ((lambda (z3e18@ls/false) (if z3e18@ls/false (apply (lambda (z3e1a@x z3e1b@y) (call-with-values (lambda () (z3d05@gen-syntax z3d7c@src z3e1a@x z3d7e@r z3d7f@maps z3d80@ellipsis? '#f)) (lambda (z3e22@z3e1f z3e23@z3e21) ((lambda (z3e26@maps z3e27@xnew) (call-with-values (lambda () (z3d05@gen-syntax z3d7c@src z3e1b@y z3d7e@r z3e26@maps z3d80@ellipsis? z3d81@vec?)) (lambda (z3e2e@z3e2b z3e2f@z3e2d) ((lambda (z3e32@maps z3e33@ynew) (values (z3d0f@gen-cons z3d7d@e z3e1a@x z3e1b@y z3e27@xnew z3e33@ynew) z3e32@maps)) z3e2f@z3e2d z3e2e@z3e2b)))) z3e23@z3e21 z3e22@z3e1f)))) z3e18@ls/false) ((lambda (z3e36@t) ((lambda (z3e38@ls/false) (if z3e38@ls/false (apply (lambda (z3e3a@ls) (call-with-values (lambda () (z3d05@gen-syntax z3d7c@src z3e3a@ls z3d7e@r z3d7f@maps z3d80@ellipsis? '#t)) (lambda (z3e40@z3e3d z3e41@z3e3f) ((lambda (z3e44@maps z3e45@lsnew) (values (z3d11@gen-vector z3d7d@e z3e3a@ls z3e45@lsnew) z3e44@maps)) z3e41@z3e3f z3e40@z3e3d)))) z3e38@ls/false) ((lambda (z3e48@t) ((lambda (z3e4a@ls/false) (if z3e4a@ls/false (apply (lambda () (values (list 'quote z3d7d@e) z3d7f@maps)) z3e4a@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3e48@t))) (z2ec4@syntax-dispatch z3e48@t '_))) z3e36@t))) (z2ec4@syntax-dispatch z3e36@t '#(vector each-any)))) z3e16@t))) (z2ec4@syntax-dispatch z3e16@t '(any . any)))) z3db8@t))) (z2ec4@syntax-dispatch z3db8@t '(any any . any)))) z3daa@t))) (z2ec4@syntax-dispatch z3daa@t '(any any)))) z3d90@t))) (z2ec4@syntax-dispatch z3d90@t 'any))) z3d88@t))) (z2ec4@syntax-dispatch z3d88@t 'any))) z3d7d@e))) (set! z3d07@gen-ref (lambda (z3d62@src z3d63@var z3d64@level z3d65@maps) (if (= z3d64@level '0) (values z3d63@var z3d65@maps) (if (null? z3d65@maps) (z2fad@syntax-violation '#f '"missing ellipsis in syntax form" z3d62@src) (call-with-values (lambda () (z3d07@gen-ref z3d62@src z3d63@var (- z3d64@level '1) (cdr z3d65@maps))) (lambda (z3d6e@z3d6b z3d6f@z3d6d) ((lambda (z3d72@outer-maps z3d73@outer-var) ((lambda (z3d76@t) (if z3d76@t ((lambda (z3d78@b) (values (cdr z3d78@b) z3d65@maps)) z3d76@t) ((lambda (z3d7a@inner-var) (values z3d7a@inner-var (cons (cons (cons z3d73@outer-var z3d7a@inner-var) (car z3d65@maps)) z3d72@outer-maps))) (z2c39@gen-lexical 'tmp)))) (assq z3d73@outer-var (car z3d65@maps)))) z3d6f@z3d6d z3d6e@z3d6b))))))) (set! z3d09@gen-append (lambda (z3d5e@x z3d5f@y) (if (fast-equal? z3d5f@y ''()) z3d5e@x (list 'append z3d5e@x z3d5f@y)))) (set! z3d0b@gen-mappend (lambda (z3d5a@e z3d5b@map-env) (list 'apply '(primitive append) (z3d0d@gen-map z3d5a@e z3d5b@map-env)))) (set! z3d0d@gen-map (lambda (z3d48@e z3d49@map-env) ((lambda (z3d4c@formals z3d4d@actuals) (if (eq? (car z3d48@e) 'ref) (car z3d4d@actuals) (if (for-all (lambda (z3d50@x) (and (eq? (car z3d50@x) 'ref) (memq (cadr z3d50@x) z3d4c@formals))) (cdr z3d48@e)) ((lambda (z3d52@args) (cons 'map (cons (list 'primitive (car z3d48@e)) z3d52@args))) (map ((lambda (z3d54@r) (lambda (z3d56@x) (cdr (assq (cadr z3d56@x) z3d54@r)))) (map cons z3d4c@formals z3d4d@actuals)) (cdr z3d48@e))) (cons* 'map (list 'lambda z3d4c@formals z3d48@e) z3d4d@actuals)))) (map cdr z3d49@map-env) (map (lambda (z3d58@x) (list 'ref (car z3d58@x))) z3d49@map-env)))) (set! z3d0f@gen-cons (lambda (z3d38@e z3d39@x z3d3a@y z3d3b@xnew z3d3c@ynew) ((lambda (z3d42@t) (if (memv z3d42@t '(quote)) (if (eq? (car z3d3b@xnew) 'quote) ((lambda (z3d44@xnew z3d45@ynew) (if (and (eq? z3d44@xnew z3d39@x) (eq? z3d45@ynew z3d3a@y)) (list 'quote z3d38@e) (list 'quote (cons z3d44@xnew z3d45@ynew)))) (cadr z3d3b@xnew) (cadr z3d3c@ynew)) (if (null? (cadr z3d3c@ynew)) (list 'list z3d3b@xnew) (list 'cons z3d3b@xnew z3d3c@ynew))) (if (memv z3d42@t '(list)) (cons 'list (cons z3d3b@xnew (cdr z3d3c@ynew))) (list 'cons z3d3b@xnew z3d3c@ynew)))) (car z3d3c@ynew)))) (set! z3d11@gen-vector (lambda (z3d32@e z3d33@ls z3d34@lsnew) (if (eq? (car z3d34@lsnew) 'quote) (if (eq? (cadr z3d34@lsnew) z3d33@ls) (list 'quote z3d32@e) (list 'quote (list->vector (cadr z3d34@lsnew)))) (if (eq? (car z3d34@lsnew) 'list) (cons 'vector (cdr z3d34@lsnew)) (list 'list->vector z3d34@lsnew))))) (set! z3d13@regen (lambda (z3d2c@x) ((lambda (z3d2e@t) (if (memv z3d2e@t '(ref)) (cadr z3d2c@x) (if (memv z3d2e@t '(primitive)) (list 'primitive (cadr z3d2c@x)) (if (memv z3d2e@t '(quote)) (list 'quote (cadr z3d2c@x)) (if (memv z3d2e@t '(lambda)) (z2c15@z2b55@build-lambda '#f (cadr z3d2c@x) (z3d13@regen (caddr z3d2c@x))) (if (memv z3d2e@t '(map)) ((lambda (z3d30@ls) (cons '(primitive ellipsis-map) z3d30@ls)) (map z3d13@regen (cdr z3d2c@x))) (cons (list 'primitive (car z3d2c@x)) (map z3d13@regen (cdr z3d2c@x))))))))) (car z3d2c@x)))) (lambda (z3d14@e z3d15@r z3d16@mr) ((lambda (z3d1a@t) ((lambda (z3d1c@ls/false) (if z3d1c@ls/false (apply (lambda (z3d1e@x) (call-with-values (lambda () (z3d05@gen-syntax z3d14@e z3d1e@x z3d15@r '() z2ec6@ellipsis? '#f)) (lambda (z3d24@z3d21 z3d25@z3d23) ((lambda (z3d28@maps z3d29@e) (z3d13@regen z3d29@e)) z3d25@z3d23 z3d24@z3d21)))) z3d1c@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3d1a@t))) (z2ec4@syntax-dispatch z3d1a@t '(_ any)))) z3d14@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! z2ed2@core-macro-transformer (lambda (z3e4c@name) ((lambda (z3e4e@t) (if (memv z3e4e@t '(quote)) z2e74@quote-transformer (if (memv z3e4e@t '(lambda)) z2e78@lambda-transformer (if (memv z3e4e@t '(case-lambda)) z2e76@case-lambda-transformer (if (memv z3e4e@t '(letrec)) z2e5c@letrec-transformer (if (memv z3e4e@t '(letrec*)) z2e5e@letrec*-transformer (if (memv z3e4e@t '(if)) z2e6c@if-transformer (if (memv z3e4e@t '(and)) z2e6e@and-transformer (if (memv z3e4e@t '(or)) z2e70@or-transformer (if (memv z3e4e@t '(foreign-call)) z2ec0@foreign-call-transformer (if (memv z3e4e@t '(syntax-case)) z2ecc@syntax-case-transformer (if (memv z3e4e@t '(syntax)) z2ed0@syntax-transformer (if (memv z3e4e@t '(type-descriptor)) z2e62@type-descriptor-transformer (if (memv z3e4e@t '(record-type-descriptor)) z2e64@record-type-descriptor-transformer (if (memv z3e4e@t '(record-constructor-descriptor)) z2e66@record-constructor-descriptor-transformer (if (memv z3e4e@t '(fluid-let-syntax)) z2e60@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" z3e4c@name))))))))))))))))) z3e4c@name))) (set! z2ed4@symbol-macro (lambda (z3e50@x z3e51@set) ((lambda (z3e54@t) ((lambda (z3e56@ls/false) (if (and z3e56@ls/false (apply (lambda (z3e58@name) (and (z2cb9@id? z3e58@name) (memq (z2cbb@id->sym z3e58@name) z3e51@set))) z3e56@ls/false)) (apply (lambda (z3e5a@name) (z2e7a@bless (list 'quote z3e5a@name))) z3e56@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3e54@t))) (z2ec4@syntax-dispatch z3e54@t '(_ any)))) z3e50@x))) (set! z2ed6@macro-transformer (lambda (z3e5c@x) (if (procedure? z3e5c@x) z3e5c@x (if (symbol? z3e5c@x) ((lambda (z3e5e@t) (if (memv z3e5e@t '(define-record-type)) z2eb8@define-record-type-macro (if (memv z3e5e@t '(define-struct)) z2eb6@define-struct-macro (if (memv z3e5e@t '(include)) z2eac@include-macro (if (memv z3e5e@t '(cond)) z2ea8@cond-macro (if (memv z3e5e@t '(let)) z2e80@let-macro (if (memv z3e5e@t '(do)) z2ea0@do-macro (if (memv z3e5e@t '(or)) z2ea4@or-macro (if (memv z3e5e@t '(and)) z2ea6@and-macro (if (memv z3e5e@t '(let*)) z2ea2@let*-macro (if (memv z3e5e@t '(let-values)) z2e82@let-values-macro (if (memv z3e5e@t '(let*-values)) z2e84@let*-values-macro (if (memv z3e5e@t '(syntax-rules)) z2eb0@syntax-rules-macro (if (memv z3e5e@t '(quasiquote)) z2eb2@quasiquote-macro (if (memv z3e5e@t '(quasisyntax)) z2eb4@quasisyntax-macro (if (memv z3e5e@t '(with-syntax)) z2e7c@with-syntax-macro (if (memv z3e5e@t '(when)) z2e68@when-macro (if (memv z3e5e@t '(unless)) z2e6a@unless-macro (if (memv z3e5e@t '(case)) z2e72@case-macro (if (memv z3e5e@t '(identifier-syntax)) z2e9e@identifier-syntax-macro (if (memv z3e5e@t '(time)) z2e96@time-macro (if (memv z3e5e@t '(delay)) z2e98@delay-macro (if (memv z3e5e@t '(assert)) z2e9a@assert-macro (if (memv z3e5e@t '(endianness)) z2e9c@endianness-macro (if (memv z3e5e@t '(guard)) z2e92@guard-macro (if (memv z3e5e@t '(define-enumeration)) z2e94@define-enumeration-macro (if (memv z3e5e@t '(trace-lambda)) z2e86@trace-lambda-macro (if (memv z3e5e@t '(trace-define)) z2e88@trace-define-macro (if (memv z3e5e@t '(trace-define-syntax)) z2e8a@trace-define-syntax-macro (if (memv z3e5e@t '(trace-let-syntax)) z2e8e@trace-let-syntax-macro (if (memv z3e5e@t '(trace-letrec-syntax)) z2e90@trace-letrec-syntax-macro (if (memv z3e5e@t '(define-condition-type)) z2eba@define-condition-type-macro (if (memv z3e5e@t '(parameterize)) z2ebe@parameterize-macro (if (memv z3e5e@t '(include-into)) z2eae@include-into-macro (if (memv z3e5e@t '(eol-style)) (lambda (z3e60@x) (z2ed4@symbol-macro z3e60@x '(none lf cr crlf nel crnel ls))) (if (memv z3e5e@t '(error-handling-mode)) (lambda (z3e62@x) (z2ed4@symbol-macro z3e62@x '(ignore raise replace))) (if (memv z3e5e@t '(buffer-mode)) (lambda (z3e64@x) (z2ed4@symbol-macro z3e64@x '(none line block))) (if (memv z3e5e@t '(file-options)) z2c2c@file-options-macro (if (memv z3e5e@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) z2ebc@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" z3e5c@x)))))))))))))))))))))))))))))))))))))))) z3e5c@x) (error 'core-macro-transformer '"BUG: invalid macro" z3e5c@x))))) (set! z2ed8@local-macro-transformer (lambda (z3e66@x) (car z3e66@x))) (set! z2eda@do-macro-call (lambda (z3e68@transformer z3e69@expr) ((lambda (z3e6c@out) (begin ((letrec ((z3e6e@f (lambda (z3e70@x) (if (not (z2c81@stx? z3e70@x)) (if (pair? z3e70@x) (begin (z3e6e@f (car z3e70@x)) (z3e6e@f (cdr z3e70@x))) (if (vector? z3e70@x) (vector-for-each z3e6e@f z3e70@x) (if (symbol? z3e70@x) (z2fad@syntax-violation '#f '"raw symbol encountered in output of macro" z3e69@expr z3e70@x) (void)))) (void))))) z3e6e@f) z3e6c@out) (z2ca3@add-mark (z2c99@gen-mark) z3e6c@out z3e69@expr))) (z3e68@transformer (z2ca3@add-mark z2c9b@anti-mark z3e69@expr '#f))))) (set! z2edc@chi-macro (lambda (z3e72@p z3e73@e) (z2eda@do-macro-call (z2ed6@macro-transformer z3e72@p) z3e73@e))) (set! z2ede@chi-local-macro (lambda (z3e76@p z3e77@e) (z2eda@do-macro-call (z2ed8@local-macro-transformer z3e76@p) z3e77@e))) (set! z2ee0@chi-global-macro (lambda (z3e7a@p z3e7b@e) ((lambda (z3e7e@lib z3e7f@loc) (begin (z2ade@z2980@visit-library z3e7e@lib) ((lambda (z3e82@x) ((lambda (z3e84@transformer) (z2eda@do-macro-call z3e84@transformer z3e7b@e)) (if (procedure? z3e82@x) z3e82@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" z3e82@x)))) (symbol-value z3e7f@loc)))) (car z3e7a@p) (cdr z3e7a@p)))) (set! z2ee2@chi-expr* (lambda (z3e86@e* z3e87@r z3e88@mr) (if (null? z3e86@e*) '() ((lambda (z3e8c@e) (cons z3e8c@e (z2ee2@chi-expr* (cdr z3e86@e*) z3e87@r z3e88@mr))) (z2ee6@chi-expr (car z3e86@e*) z3e87@r z3e88@mr))))) (set! z2ee4@chi-application (lambda (z3e8e@e z3e8f@r z3e90@mr) ((lambda (z3e94@t) ((lambda (z3e96@ls/false) (if z3e96@ls/false (apply (lambda (z3e98@rator z3e99@rands) ((lambda (z3e9c@rator) (cons z3e9c@rator (z2ee2@chi-expr* z3e99@rands z3e8f@r z3e90@mr))) (z2ee6@chi-expr z3e98@rator z3e8f@r z3e90@mr))) z3e96@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3e94@t))) (z2ec4@syntax-dispatch z3e94@t '(any . each-any)))) z3e8e@e))) (set! z2ee6@chi-expr (lambda (z3e9e@e z3e9f@r z3ea0@mr) (call-with-values (lambda () (z2ce1@syntax-type z3e9e@e z3e9f@r)) (lambda (z3eaa@z3ea5 z3eab@z3ea7 z3eac@z3ea9) ((lambda (z3eb0@kwd z3eb1@value z3eb2@type) ((lambda (z3eb6@t) (if (memv z3eb6@t '(core-macro)) ((lambda (z3eb8@transformer) (z3eb8@transformer z3e9e@e z3e9f@r z3ea0@mr)) (z2ed2@core-macro-transformer z3eb1@value)) (if (memv z3eb6@t '(global)) ((lambda (z3eba@lib) ((lambda (z3ebc@loc) ((lambda () (begin ((z2f2f@inv-collector) z3eba@lib) z3ebc@loc)))) (cdr z3eb1@value))) (car z3eb1@value)) (if (memv z3eb6@t '(core-prim)) ((lambda (z3ebe@name) (list 'primitive z3ebe@name)) z3eb1@value) (if (memv z3eb6@t '(call)) (z2ee4@chi-application z3e9e@e z3e9f@r z3ea0@mr) (if (memv z3eb6@t '(lexical)) ((lambda (z3ec0@lex) z3ec0@lex) (z2e50@lexical-var z3eb1@value)) (if (memv z3eb6@t '(global-macro global-macro!)) (z2ee6@chi-expr (z2ee0@chi-global-macro z3eb1@value z3e9e@e) z3e9f@r z3ea0@mr) (if (memv z3eb6@t '(local-macro local-macro!)) (z2ee6@chi-expr (z2ede@chi-local-macro z3eb1@value z3e9e@e) z3e9f@r z3ea0@mr) (if (memv z3eb6@t '(macro macro!)) (z2ee6@chi-expr (z2edc@chi-macro z3eb1@value z3e9e@e) z3e9f@r z3ea0@mr) (if (memv z3eb6@t '(constant)) ((lambda (z3ec2@datum) (list 'quote z3ec2@datum)) z3eb1@value) (if (memv z3eb6@t '(set!)) (z2ee8@chi-set! z3e9e@e z3e9f@r z3ea0@mr) (if (memv z3eb6@t '(begin)) ((lambda (z3ec4@t) ((lambda (z3ec6@ls/false) (if z3ec6@ls/false (apply (lambda (z3ec8@x z3ec9@x*) (z2c18@z2b87@build-sequence '#f (z2ee2@chi-expr* (cons z3ec8@x z3ec9@x*) z3e9f@r z3ea0@mr))) z3ec6@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3ec4@t))) (z2ec4@syntax-dispatch z3ec4@t '(_ any . each-any)))) z3e9e@e) (if (memv z3eb6@t '(let-syntax letrec-syntax)) ((lambda (z3ecc@t) ((lambda (z3ece@ls/false) (if (and z3ece@ls/false (apply (lambda (z3ed0@xlhs* z3ed1@xrhs* z3ed2@xbody z3ed3@xbody*) (if (not (z2cc3@valid-bound-ids? z3ed0@xlhs*)) (z2fad@syntax-violation '#f '"invalid identifiers" z3e9e@e) (void))) z3ece@ls/false)) (apply (lambda (z3ed8@xlhs* z3ed9@xrhs* z3eda@xbody z3edb@xbody*) ((lambda (z3ee0@xlab*) ((lambda (z3ee2@xrib) ((lambda (z3ee4@xb*) ((lambda () (z2c18@z2b87@build-sequence '#f (z2ee2@chi-expr* (map (lambda (z3ee6@x) (z2ca5@add-subst z3ee2@xrib z3ee6@x)) (cons z3eda@xbody z3edb@xbody*)) (append (map cons z3ee0@xlab* z3ee4@xb*) z3e9f@r) (append (map cons z3ee0@xlab* z3ee4@xb*) z3ea0@mr)))))) (map (lambda (z3ee8@x) (z2cf7@make-eval-transformer (z2f21@expand-transformer (if (eq? z3eb2@type 'let-syntax) z3ee8@x (z2ca5@add-subst z3ee2@xrib z3ee8@x)) z3ea0@mr))) z3ed9@xrhs*))) (z2c74@make-full-rib z3ed8@xlhs* z3ee0@xlab*))) (map z2c3d@gen-label z3ed8@xlhs*))) z3ece@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3ecc@t))) (z2ec4@syntax-dispatch z3ecc@t '(_ #(each (any any)) any . each-any)))) z3e9e@e) (if (memv z3eb6@t '(displaced-lexical)) (z2fad@syntax-violation '#f '"identifier out of context" z3e9e@e) (if (memv z3eb6@t '(syntax)) (z2fad@syntax-violation '#f '"reference to pattern variable outside a syntax form" z3e9e@e) (if (memv z3eb6@t '(define define-syntax module import library)) (z2fad@syntax-violation '#f (string-append ((lambda (z3eea@t) (if (memv z3eea@t '(define)) '"a definition" (if (memv z3eea@t '(define-syntax)) '"a define-syntax" (if (memv z3eea@t '(module)) '"a module definition" (if (memv z3eea@t '(library)) '"a library definition" (if (memv z3eea@t '(import)) '"an import declaration" (if (memv z3eea@t '(export)) '"an export declaration" '"a non-expression"))))))) z3eb2@type) '" was found where an expression was expected") z3e9e@e) (if (memv z3eb6@t '(mutable)) (z2fad@syntax-violation '#f '"attempt to reference an unexportable variable" z3e9e@e) (z2fad@syntax-violation '#f '"invalid expression" z3e9e@e)))))))))))))))))) z3eb2@type)) z3eac@z3ea9 z3eab@z3ea7 z3eaa@z3ea5))))) (set! z2ee8@chi-set! (lambda (z3eec@e z3eed@r z3eee@mr) ((lambda (z3ef2@t) ((lambda (z3ef4@ls/false) (if (and z3ef4@ls/false (apply (lambda (z3ef6@x z3ef7@v) (z2cb9@id? z3ef6@x)) z3ef4@ls/false)) (apply (lambda (z3efa@x z3efb@v) (call-with-values (lambda () (z2ce1@syntax-type z3efa@x z3eed@r)) (lambda (z3f04@z3eff z3f05@z3f01 z3f06@z3f03) ((lambda (z3f0a@kwd z3f0b@value z3f0c@type) ((lambda (z3f10@t) (if (memv z3f10@t '(lexical)) (begin (z2e54@set-lexical-mutable! z3f0b@value '#t) (list 'set! (z2e50@lexical-var z3f0b@value) (z2ee6@chi-expr z3efb@v z3eed@r z3eee@mr))) (if (memv z3f10@t '(core-prim)) (z2fad@syntax-violation '#f '"cannot modify imported core primitive" z3eec@e) (if (memv z3f10@t '(global)) (z2fad@syntax-violation '#f '"attempt to modify imported binding" z3eec@e) (if (memv z3f10@t '(global-macro!)) (z2ee6@chi-expr (z2ee0@chi-global-macro z3f0b@value z3eec@e) z3eed@r z3eee@mr) (if (memv z3f10@t '(local-macro!)) (z2ee6@chi-expr (z2ede@chi-local-macro z3f0b@value z3eec@e) z3eed@r z3eee@mr) (if (memv z3f10@t '(mutable)) (z2fad@syntax-violation '#f '"attempt to assign to an unexportable variable" z3eec@e) (z2fad@syntax-violation '#f '"invalid syntax" z3eec@e)))))))) z3f0c@type)) z3f06@z3f03 z3f05@z3f01 z3f04@z3eff)))) z3ef4@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3ef2@t))) (z2ec4@syntax-dispatch z3ef2@t '(_ any any)))) z3eec@e))) (set! z2eea@verify-formals (lambda (z3f12@fmls z3f13@stx) ((lambda (z3f16@t) ((lambda (z3f18@ls/false) (if z3f18@ls/false (apply (lambda (z3f1a@x*) (if (not (z2cc3@valid-bound-ids? z3f1a@x*)) (z2e7e@invalid-fmls-error z3f13@stx z3f12@fmls) (void))) z3f18@ls/false) ((lambda (z3f1c@t) ((lambda (z3f1e@ls/false) (if z3f1e@ls/false (apply (lambda (z3f20@x* z3f21@x) (if (not (z2cc3@valid-bound-ids? (cons z3f21@x z3f20@x*))) (z2e7e@invalid-fmls-error z3f13@stx z3f12@fmls) (void))) z3f1e@ls/false) ((lambda (z3f24@t) ((lambda (z3f26@ls/false) (if z3f26@ls/false (apply (lambda () (z2fad@syntax-violation '#f '"invalid syntax" z3f13@stx)) z3f26@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3f24@t))) (z2ec4@syntax-dispatch z3f24@t '_))) z3f1c@t))) (z2ec4@syntax-dispatch z3f1c@t '#(each+ any () any)))) z3f16@t))) (z2ec4@syntax-dispatch z3f16@t 'each-any))) z3f12@fmls))) (set! z2eec@chi-lambda-clause (lambda (z3f28@stx z3f29@fmls z3f2a@body* z3f2b@r z3f2c@mr) ((lambda (z3f32@t) ((lambda (z3f34@ls/false) (if z3f34@ls/false (apply (lambda (z3f36@x*) (begin (z2eea@verify-formals z3f29@fmls z3f28@stx) ((lambda (z3f38@lex* z3f39@lab*) (values z3f38@lex* (z2efc@chi-internal (z2ca5@add-subst (z2c74@make-full-rib z3f36@x* z3f39@lab*) z3f2a@body*) (z2e58@add-lexicals z3f39@lab* z3f38@lex* z3f2b@r) z3f2c@mr))) (map z2c39@gen-lexical z3f36@x*) (map z2c3d@gen-label z3f36@x*)))) z3f34@ls/false) ((lambda (z3f3c@t) ((lambda (z3f3e@ls/false) (if z3f3e@ls/false (apply (lambda (z3f40@x* z3f41@x) (begin (z2eea@verify-formals z3f29@fmls z3f28@stx) ((lambda (z3f44@lex* z3f45@lab* z3f46@lex z3f47@lab) (values (append z3f44@lex* z3f46@lex) (z2efc@chi-internal (z2ca5@add-subst (z2c74@make-full-rib (cons z3f41@x z3f40@x*) (cons z3f47@lab z3f45@lab*)) z3f2a@body*) (z2e58@add-lexicals (cons z3f47@lab z3f45@lab*) (cons z3f46@lex z3f44@lex*) z3f2b@r) z3f2c@mr))) (map z2c39@gen-lexical z3f40@x*) (map z2c3d@gen-label z3f40@x*) (z2c39@gen-lexical z3f41@x) (z2c3d@gen-label z3f41@x)))) z3f3e@ls/false) ((lambda (z3f4c@t) ((lambda (z3f4e@ls/false) (if z3f4e@ls/false (apply (lambda () (z2fad@syntax-violation '#f '"invalid syntax" z3f29@fmls)) z3f4e@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z3f4c@t))) (z2ec4@syntax-dispatch z3f4c@t '_))) z3f3c@t))) (z2ec4@syntax-dispatch z3f3c@t '#(each+ any () any)))) z3f32@t))) (z2ec4@syntax-dispatch z3f32@t 'each-any))) z3f29@fmls))) (set! z2eee@chi-lambda-clause* (lambda (z3f50@stx z3f51@fmls* z3f52@body** z3f53@r z3f54@mr) (if (null? z3f51@fmls*) (values '() '()) (call-with-values (lambda () (z2eec@chi-lambda-clause z3f50@stx (car z3f51@fmls*) (car z3f52@body**) z3f53@r z3f54@mr)) (lambda (z3f5e@z3f5b z3f5f@z3f5d) ((lambda (z3f62@b z3f63@a) (call-with-values (lambda () (z2eee@chi-lambda-clause* z3f50@stx (cdr z3f51@fmls*) (cdr z3f52@body**) z3f53@r z3f54@mr)) (lambda (z3f6a@z3f67 z3f6b@z3f69) ((lambda (z3f6e@b* z3f6f@a*) (values (cons z3f63@a z3f6f@a*) (cons z3f62@b z3f6e@b*))) z3f6b@z3f69 z3f6a@z3f67)))) z3f5f@z3f5d z3f5e@z3f5b)))))) (set! z2ef0@chi-defun (lambda (z3f72@x z3f73@r z3f74@mr) ((lambda (z3f78@fmls z3f79@body*) (call-with-values (lambda () (z2eec@chi-lambda-clause z3f78@fmls z3f78@fmls z3f79@body* z3f73@r z3f74@mr)) (lambda (z3f80@z3f7d z3f81@z3f7f) ((lambda (z3f84@body z3f85@fmls) (z2c15@z2b55@build-lambda '#f z3f85@fmls z3f84@body)) z3f81@z3f7f z3f80@z3f7d)))) (car z3f72@x) (cdr z3f72@x)))) (set! z2ef2@chi-rhs (lambda (z3f88@rhs z3f89@r z3f8a@mr) ((lambda (z3f8e@t) (if (memv z3f8e@t '(defun)) (z2ef0@chi-defun (cdr z3f88@rhs) z3f89@r z3f8a@mr) (if (memv z3f8e@t '(expr)) ((lambda (z3f90@expr) (z2ee6@chi-expr z3f90@expr z3f89@r z3f8a@mr)) (cdr z3f88@rhs)) (if (memv z3f8e@t '(top-expr)) ((lambda (z3f92@expr) (z2c18@z2b87@build-sequence '#f (list (z2ee6@chi-expr z3f92@expr z3f89@r z3f8a@mr) (z2c19@z2b89@build-void)))) (cdr z3f88@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" z3f88@rhs))))) (car z3f88@rhs)))) (set! z2ef4@expand-interaction-rhs*/init* (lambda (z3f94@lhs* z3f95@rhs* z3f96@init* z3f97@r z3f98@mr) ((letrec ((z3f9e@f (lambda (z3fa0@lhs* z3fa1@rhs*) (if (null? z3fa0@lhs*) (map (lambda (z3fa4@x) (z2ee6@chi-expr z3fa4@x z3f97@r z3f98@mr)) z3f96@init*) ((lambda (z3fa6@lhs z3fa7@rhs) ((lambda (z3faa@t) (if (memv z3faa@t '(defun)) ((lambda (z3fac@rhs) (cons (list 'set! z3fa6@lhs z3fac@rhs) (z3f9e@f (cdr z3fa0@lhs*) (cdr z3fa1@rhs*)))) (z2ef0@chi-defun (cdr z3fa7@rhs) z3f97@r z3f98@mr)) (if (memv z3faa@t '(expr)) ((lambda (z3fae@rhs) (cons (list 'set! z3fa6@lhs z3fae@rhs) (z3f9e@f (cdr z3fa0@lhs*) (cdr z3fa1@rhs*)))) (z2ee6@chi-expr (cdr z3fa7@rhs) z3f97@r z3f98@mr)) (if (memv z3faa@t '(top-expr)) ((lambda (z3fb0@e) (cons z3fb0@e (z3f9e@f (cdr z3fa0@lhs*) (cdr z3fa1@rhs*)))) (z2ee6@chi-expr (cdr z3fa7@rhs) z3f97@r z3f98@mr)) (error 'expand-interaction '"invallid" z3fa7@rhs))))) (car z3fa7@rhs))) (car z3fa0@lhs*) (car z3fa1@rhs*)))))) z3f9e@f) z3f94@lhs* z3f95@rhs*))) (set! z2ef6@chi-rhs* (lambda (z3fb2@rhs* z3fb3@r z3fb4@mr) ((letrec ((z3fb8@f (lambda (z3fba@ls) (if (null? z3fba@ls) '() ((lambda (z3fbc@a) (cons z3fbc@a (z3fb8@f (cdr z3fba@ls)))) (z2ef2@chi-rhs (car z3fba@ls) z3fb3@r z3fb4@mr)))))) z3fb8@f) z3fb2@rhs*))) (set! z2ef8@find-bound=? (lambda (z3fbe@x z3fbf@lhs* z3fc0@rhs*) (if (null? z3fbf@lhs*) '#f (if (z2cbf@bound-id=? z3fbe@x (car z3fbf@lhs*)) (car z3fc0@rhs*) (z2ef8@find-bound=? z3fbe@x (cdr z3fbf@lhs*) (cdr z3fc0@rhs*)))))) (set! z2efa@find-dups (lambda (z3fc4@ls) ((letrec ((z3fc6@f (lambda (z3fc8@ls z3fc9@dups) (if (null? z3fc8@ls) z3fc9@dups ((lambda (z3fcc@t) (if z3fcc@t ((lambda (z3fce@x) (z3fc6@f (cdr z3fc8@ls) (cons (list (car z3fc8@ls) z3fce@x) z3fc9@dups))) z3fcc@t) (z3fc6@f (cdr z3fc8@ls) z3fc9@dups))) (z2ef8@find-bound=? (car z3fc8@ls) (cdr z3fc8@ls) (cdr z3fc8@ls))))))) z3fc6@f) z3fc4@ls '()))) (set! z2efc@chi-internal (lambda (z3fd0@e* z3fd1@r z3fd2@mr) ((lambda (z3fd6@rib) (call-with-values (lambda () (z2f1f@chi-body* (map (lambda (z3fe8@x) (z2ca5@add-subst z3fd6@rib z3fe8@x)) (z2cb7@syntax->list z3fd0@e*)) z3fd1@r z3fd2@mr '() '() '() '() '() z3fd6@rib '#f)) (lambda (z3fea@z3fd9 z3feb@z3fdb z3fec@z3fdd z3fed@z3fdf z3fee@z3fe1 z3fef@z3fe3 z3ff0@z3fe5 z3ff1@z3fe7) ((lambda (z3ffa@_exp* z3ffb@kwd* z3ffc@mod** z3ffd@rhs* z3ffe@lex* z3fff@mr z4000@r z4001@e*) (begin (if (null? z4001@e*) (z2fad@syntax-violation '#f '"no expression in body" z4001@e*) (void)) ((lambda (z400a@init*) ((lambda (z400c@rhs*) ((lambda () (z2c1b@z2b8d@build-letrec* '#f (reverse z3ffe@lex*) (reverse z400c@rhs*) (z2c18@z2b87@build-sequence '#f z400a@init*))))) (z2ef6@chi-rhs* z3ffd@rhs* z4000@r z3fff@mr))) (z2ee2@chi-expr* (append (apply append (reverse z3ffc@mod**)) z4001@e*) z4000@r z3fff@mr)))) z3ff1@z3fe7 z3ff0@z3fe5 z3fef@z3fe3 z3fee@z3fe1 z3fed@z3fdf z3fec@z3fdd z3feb@z3fdb z3fea@z3fd9)))) (z2c68@make-empty-rib)))) (set! z2efe@parse-module (lambda (z400e@e) ((lambda (z4010@t) ((lambda (z4012@ls/false) (if z4012@ls/false (apply (lambda (z4014@export* z4015@b*) (begin (if (not (for-all z2cb9@id? z4014@export*)) (z2fad@syntax-violation '#f '"module exports must be identifiers" z400e@e) (void)) (values '#f (list->vector z4014@export*) z4015@b*))) z4012@ls/false) ((lambda (z4018@t) ((lambda (z401a@ls/false) (if z401a@ls/false (apply (lambda (z401c@name z401d@export* z401e@b*) (begin (if (not (z2cb9@id? z401c@name)) (z2fad@syntax-violation '#f '"module name must be an identifier" z400e@e) (void)) (if (not (for-all z2cb9@id? z401d@export*)) (z2fad@syntax-violation '#f '"module exports must be identifiers" z400e@e) (void)) (values z401c@name (list->vector z401d@export*) z401e@b*))) z401a@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z4018@t))) (z2ec4@syntax-dispatch z4018@t '(_ any each-any . each-any)))) z4010@t))) (z2ec4@syntax-dispatch z4010@t '(_ each-any . each-any)))) z400e@e))) (set! z2f04@z2eff (make-record-type-descriptor 'module-interface '#f 'z2f02 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! z2f06@z2f01 '#f) (set! z2f08@z2f00 (make-record-constructor-descriptor z2f04@z2eff '#f z2f06@z2f01)) (set! z2f0b@module-interface? (record-predicate z2f04@z2eff)) (set! z2f0d@make-module-interface (record-constructor z2f08@z2f00)) (set! z2f0f@module-interface-first-mark (record-accessor z2f04@z2eff '0)) (set! z2f11@module-interface-exp-id-vec (record-accessor z2f04@z2eff '1)) (set! z2f13@module-interface-exp-lab-vec (record-accessor z2f04@z2eff '2)) (set! z2f15@set-module-interface-first-mark! (record-mutator z2f04@z2eff '0)) (set! z2f17@set-module-interface-exp-id-vec! (record-mutator z2f04@z2eff '1)) (set! z2f19@set-module-interface-exp-lab-vec! (record-mutator z2f04@z2eff '2)) (set! z2f1b@module-interface-exp-id* (lambda (z4022@iface z4023@id) ((lambda (z4027@diff-marks) (begin (set! z4027@diff-marks (lambda (z402e@ls z402f@x) (begin (if (null? z402e@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (z4032@a) (if (eq? z4032@a z402f@x) '() (cons z4032@a (z4027@diff-marks (cdr z402e@ls) z402f@x)))) (car z402e@ls))))) ((lambda (z4028@diff z4029@id-vec) (if (null? z4028@diff) z4029@id-vec (vector-map (lambda (z402c@x) (z2c83@make-stx (z2c85@stx-expr z402c@x) (append z4028@diff (z2c87@stx-mark* z402c@x)) '() '())) z4029@id-vec))) (z4027@diff-marks (z2c87@stx-mark* z4023@id) (z2f0f@module-interface-first-mark z4022@iface)) (z2f11@module-interface-exp-id-vec z4022@iface)))) '#f))) (set! z2f1d@chi-internal-module (lambda (z4034@e z4035@r z4036@mr z4037@lex* z4038@rhs* z4039@mod** z403a@kwd*) (call-with-values (lambda () (z2efe@parse-module z4034@e)) (lambda (z4048@z4043 z4049@z4045 z404a@z4047) ((lambda (z404e@e* z404f@exp-id* z4050@name) ((lambda (z4054@rib) ((lambda (z4056@e*) ((lambda () (call-with-values (lambda () (z2f1f@chi-body* z4056@e* z4035@r z4036@mr z4037@lex* z4038@rhs* z4039@mod** z403a@kwd* '() z4054@rib '#f)) (lambda (z4068@z4059 z4069@z405b z406a@z405d z406b@z405f z406c@z4061 z406d@z4063 z406e@z4065 z406f@z4067) ((lambda (z4078@_exp* z4079@kwd* z407a@mod** z407b@rhs* z407c@lex* z407d@mr z407e@r z407f@e*) ((lambda (z4088@exp-lab* z4089@mod**) (if (not z4050@name) (values z407c@lex* z407b@rhs* z404f@exp-id* z4088@exp-lab* z407e@r z407d@mr z4089@mod** z4079@kwd*) ((lambda (z408c@lab z408d@iface) (values z407c@lex* z407b@rhs* (vector z4050@name) (vector z408c@lab) (cons (cons z408c@lab (cons '$module z408d@iface)) z407e@r) (cons (cons z408c@lab (cons '$module z408d@iface)) z407d@mr) z4089@mod** z4079@kwd*)) (z2c3d@gen-label 'module) (z2f0d@make-module-interface (car (z2c87@stx-mark* z4050@name)) (vector-map (lambda (z4090@x) (z2c83@make-stx (z2c85@stx-expr z4090@x) (z2c87@stx-mark* z4090@x) '() '())) z404f@exp-id*) z4088@exp-lab*)))) (vector-map (lambda (z4092@x) (or (z2cd3@id->label (z2c83@make-stx (z2cbb@id->sym z4092@x) (z2c87@stx-mark* z4092@x) (list z4054@rib) '())) (z2fad@syntax-violation '#f '"cannot find module export" z4092@x))) z404f@exp-id*) (cons z407f@e* z407a@mod**))) z406f@z4067 z406e@z4065 z406d@z4063 z406c@z4061 z406b@z405f z406a@z405d z4069@z405b z4068@z4059)))))) (map (lambda (z4094@x) (z2ca5@add-subst z4054@rib z4094@x)) (z2cb7@syntax->list z404e@e*)))) (z2c68@make-empty-rib))) z404a@z4047 z4049@z4045 z4048@z4043))))) (set! z2f1f@chi-body* (lambda (z4096@e* z4097@r z4098@mr z4099@lex* z409a@rhs* z409b@mod** z409c@kwd* z409d@exp* z409e@rib z409f@top?) (if (null? z4096@e*) (values z4096@e* z4097@r z4098@mr z4099@lex* z409a@rhs* z409b@mod** z409c@kwd* z409d@exp*) ((lambda (z40aa@e) (call-with-values (lambda () (z2ce1@syntax-type z40aa@e z4097@r)) (lambda (z40b2@z40ad z40b3@z40af z40b4@z40b1) ((lambda (z40b8@kwd z40b9@value z40ba@type) ((lambda (z40be@kwd*) ((lambda (z40c0@t) (if (memv z40c0@t '(define)) (call-with-values (lambda () (z2e48@parse-define z40aa@e)) (lambda (z40c6@z40c3 z40c7@z40c5) ((lambda (z40ca@rhs z40cb@id) (begin (if (z2cc7@bound-id-member? z40cb@id z40be@kwd*) (z2fad@syntax-violation '#f '"cannot redefine keyword" z40aa@e) (void)) (call-with-values (lambda () (z2c41@gen-define-label+loc z40cb@id z409e@rib)) (lambda (z40d2@z40cf z40d3@z40d1) ((lambda (z40d6@lex z40d7@lab) (begin (z2c6a@extend-rib! z409e@rib z40cb@id z40d7@lab) (z2f1f@chi-body* (cdr z4096@e*) (z2e56@add-lexical z40d7@lab z40d6@lex z4097@r) z4098@mr (cons z40d6@lex z4099@lex*) (cons z40ca@rhs z409a@rhs*) z409b@mod** z40be@kwd* z409d@exp* z409e@rib z409f@top?))) z40d3@z40d1 z40d2@z40cf))))) z40c7@z40c5 z40c6@z40c3))) (if (memv z40c0@t '(define-syntax)) (call-with-values (lambda () (z2e4a@parse-define-syntax z40aa@e)) (lambda (z40de@z40db z40df@z40dd) ((lambda (z40e2@rhs z40e3@id) (begin (if (z2cc7@bound-id-member? z40e3@id z40be@kwd*) (z2fad@syntax-violation '#f '"cannot redefine keyword" z40aa@e) (void)) ((lambda (z40e6@lab z40e7@expanded-rhs) (begin (z2c6a@extend-rib! z409e@rib z40e3@id z40e6@lab) ((lambda (z40ea@b) (z2f1f@chi-body* (cdr z4096@e*) (cons (cons z40e6@lab z40ea@b) z4097@r) (cons (cons z40e6@lab z40ea@b) z4098@mr) z4099@lex* z409a@rhs* z409b@mod** z40be@kwd* z409d@exp* z409e@rib z409f@top?)) (z2cf7@make-eval-transformer z40e7@expanded-rhs)))) (z2c43@gen-define-label z40e3@id z409e@rib) (z2f21@expand-transformer z40e2@rhs z4098@mr)))) z40df@z40dd z40de@z40db))) (if (memv z40c0@t '(let-syntax letrec-syntax)) ((lambda (z40ec@t) ((lambda (z40ee@ls/false) (if (and z40ee@ls/false (apply (lambda (z40f0@xlhs* z40f1@xrhs* z40f2@xbody*) (if (not (z2cc3@valid-bound-ids? z40f0@xlhs*)) (z2fad@syntax-violation '#f '"invalid identifiers" z40aa@e) (void))) z40ee@ls/false)) (apply (lambda (z40f6@xlhs* z40f7@xrhs* z40f8@xbody*) ((lambda (z40fc@xlab*) ((lambda (z40fe@xrib) ((lambda (z4100@xb*) ((lambda () (z2f1f@chi-body* (append (map (lambda (z4102@x) (z2ca5@add-subst z40fe@xrib z4102@x)) z40f8@xbody*) (cdr z4096@e*)) (append (map cons z40fc@xlab* z4100@xb*) z4097@r) (append (map cons z40fc@xlab* z4100@xb*) z4098@mr) z4099@lex* z409a@rhs* z409b@mod** z40be@kwd* z409d@exp* z409e@rib z409f@top?)))) (map (lambda (z4104@x) (z2cf7@make-eval-transformer (z2f21@expand-transformer (if (eq? z40ba@type 'let-syntax) z4104@x (z2ca5@add-subst z40fe@xrib z4104@x)) z4098@mr))) z40f7@xrhs*))) (z2c74@make-full-rib z40f6@xlhs* z40fc@xlab*))) (map z2c3d@gen-label z40f6@xlhs*))) z40ee@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z40ec@t))) (z2ec4@syntax-dispatch z40ec@t '(_ #(each (any any)) . each-any)))) z40aa@e) (if (memv z40c0@t '(begin)) ((lambda (z4106@t) ((lambda (z4108@ls/false) (if z4108@ls/false (apply (lambda (z410a@x*) (z2f1f@chi-body* (append z410a@x* (cdr z4096@e*)) z4097@r z4098@mr z4099@lex* z409a@rhs* z409b@mod** z40be@kwd* z409d@exp* z409e@rib z409f@top?)) z4108@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z4106@t))) (z2ec4@syntax-dispatch z4106@t '(_ . each-any)))) z40aa@e) (if (memv z40c0@t '(global-macro global-macro!)) (z2f1f@chi-body* (cons (z2ca5@add-subst z409e@rib (z2ee0@chi-global-macro z40b9@value z40aa@e)) (cdr z4096@e*)) z4097@r z4098@mr z4099@lex* z409a@rhs* z409b@mod** z40be@kwd* z409d@exp* z409e@rib z409f@top?) (if (memv z40c0@t '(local-macro local-macro!)) (z2f1f@chi-body* (cons (z2ca5@add-subst z409e@rib (z2ede@chi-local-macro z40b9@value z40aa@e)) (cdr z4096@e*)) z4097@r z4098@mr z4099@lex* z409a@rhs* z409b@mod** z40be@kwd* z409d@exp* z409e@rib z409f@top?) (if (memv z40c0@t '(macro macro!)) (z2f1f@chi-body* (cons (z2ca5@add-subst z409e@rib (z2edc@chi-macro z40b9@value z40aa@e)) (cdr z4096@e*)) z4097@r z4098@mr z4099@lex* z409a@rhs* z409b@mod** z40be@kwd* z409d@exp* z409e@rib z409f@top?) (if (memv z40c0@t '(module)) (call-with-values (lambda () (z2f1d@chi-internal-module z40aa@e z4097@r z4098@mr z4099@lex* z409a@rhs* z409b@mod** z40be@kwd*)) (lambda (z411c@z410d z411d@z410f z411e@z4111 z411f@z4113 z4120@z4115 z4121@z4117 z4122@z4119 z4123@z411b) ((lambda (z412c@kwd* z412d@mod** z412e@mr z412f@r z4130@m-exp-lab* z4131@m-exp-id* z4132@rhs* z4133@lex*) (begin (vector-for-each (lambda (z413c@id z413d@lab) (z2c6a@extend-rib! z409e@rib z413c@id z413d@lab)) z4131@m-exp-id* z4130@m-exp-lab*) (z2f1f@chi-body* (cdr z4096@e*) z412f@r z412e@mr z4133@lex* z4132@rhs* z412d@mod** z412c@kwd* z409d@exp* z409e@rib z409f@top?))) z4123@z411b z4122@z4119 z4121@z4117 z4120@z4115 z411f@z4113 z411e@z4111 z411d@z410f z411c@z410d))) (if (memv z40c0@t '(library)) (begin (z2f8f@library-expander (z2ccf@stx->datum z40aa@e)) (z2f1f@chi-body* (cdr z4096@e*) z4097@r z4098@mr z4099@lex* z409a@rhs* z409b@mod** z40be@kwd* z409d@exp* z409e@rib z409f@top?)) (if (memv z40c0@t '(export)) ((lambda (z4140@t) ((lambda (z4142@ls/false) (if z4142@ls/false (apply (lambda (z4144@exp-decl*) (z2f1f@chi-body* (cdr z4096@e*) z4097@r z4098@mr z4099@lex* z409a@rhs* z409b@mod** z40be@kwd* (append z4144@exp-decl* z409d@exp*) z409e@rib z409f@top?)) z4142@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z4140@t))) (z2ec4@syntax-dispatch z4140@t '(_ . each-any)))) z40aa@e) (if (memv z40c0@t '(import)) ((lambda () ((lambda (z4147@module-import? z4149@module-import z414b@library-import) (begin (set! z4147@module-import? (lambda (z419a@e) ((lambda (z419c@t) ((lambda (z419e@ls/false) (if (and z419e@ls/false (apply (lambda (z41a0@id) (z2cb9@id? z41a0@id)) z419e@ls/false)) (apply (lambda (z41a2@id) '#t) z419e@ls/false) ((lambda (z41a4@t) ((lambda (z41a6@ls/false) (if z41a6@ls/false (apply (lambda (z41a8@imp*) '#f) z41a6@ls/false) ((lambda (z41aa@t) ((lambda (z41ac@ls/false) (if z41ac@ls/false (apply (lambda () (z2fad@syntax-violation '#f '"malformed import form" z419a@e)) z41ac@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z41aa@t))) (z2ec4@syntax-dispatch z41aa@t '_))) z41a4@t))) (z2ec4@syntax-dispatch z41a4@t '(_ . each-any)))) z419c@t))) (z2ec4@syntax-dispatch z419c@t '(_ any)))) z419a@e))) (set! z4149@module-import (lambda (z4178@e z4179@r) ((lambda (z417c@t) ((lambda (z417e@ls/false) (if (and z417e@ls/false (apply (lambda (z4180@id) (z2cb9@id? z4180@id)) z417e@ls/false)) (apply (lambda (z4182@id) (call-with-values (lambda () (z2ce1@syntax-type z4182@id z4179@r)) (lambda (z418a@z4185 z418b@z4187 z418c@z4189) ((lambda (z4190@kwd z4191@value z4192@type) ((lambda (z4196@t) (if (memv z4196@t '($module)) ((lambda (z4198@iface) (values (z2f1b@module-interface-exp-id* z4198@iface z4182@id) (z2f13@module-interface-exp-lab-vec z4198@iface))) z4191@value) (z2fad@syntax-violation '#f '"invalid import" z4178@e))) z4192@type)) z418c@z4189 z418b@z4187 z418a@z4185)))) z417e@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z417c@t))) (z2ec4@syntax-dispatch z417c@t '(_ any)))) z4178@e))) (set! z414b@library-import (lambda (z415c@e) ((lambda (z415e@t) ((lambda (z4160@ls/false) (if z4160@ls/false (apply (lambda (z4162@ctxt z4163@imp*) (call-with-values (lambda () (z2f29@parse-import-spec* (z2fb3@syntax->datum z4163@imp*))) (lambda (z416a@z4167 z416b@z4169) ((lambda (z416e@subst-labels z416f@subst-names) (values (vector-map (lambda (z4172@name) (z2c97@datum->stx z4162@ctxt z4172@name)) z416f@subst-names) z416e@subst-labels)) z416b@z4169 z416a@z4167)))) z4160@ls/false) ((lambda (z4174@t) ((lambda (z4176@ls/false) (if z4176@ls/false (apply (lambda () (z2fad@syntax-violation '#f '"invalid import form" z415c@e)) z4176@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z4174@t))) (z2ec4@syntax-dispatch z4174@t '_))) z415e@t))) (z2ec4@syntax-dispatch z415e@t '(any . each-any)))) z415c@e))) (begin (call-with-values (lambda () (if (z4147@module-import? z40aa@e) (z4149@module-import z40aa@e z4097@r) (z414b@library-import z40aa@e))) (lambda (z4150@z414d z4151@z414f) ((lambda (z4154@lab* z4155@id*) (vector-for-each (lambda (z4158@id z4159@lab) (z2c6a@extend-rib! z409e@rib z4158@id z4159@lab)) z4155@id* z4154@lab*)) z4151@z414f z4150@z414d))) (z2f1f@chi-body* (cdr z4096@e*) z4097@r z4098@mr z4099@lex* z409a@rhs* z409b@mod** z40be@kwd* z409d@exp* z409e@rib z409f@top?)))) '#f '#f '#f))) (if z409f@top? (z2f1f@chi-body* (cdr z4096@e*) z4097@r z4098@mr (cons (z2c39@gen-lexical 'dummy) z4099@lex*) (cons (cons 'top-expr z40aa@e) z409a@rhs*) z409b@mod** z40be@kwd* z409d@exp* z409e@rib z409f@top?) (values z4096@e* z4097@r z4098@mr z4099@lex* z409a@rhs* z409b@mod** z40be@kwd* z409d@exp*)))))))))))))) z40ba@type)) (if (z2cb9@id? z40b8@kwd) (cons z40b8@kwd z409c@kwd*) z409c@kwd*))) z40b4@z40b1 z40b3@z40af z40b2@z40ad)))) (car z4096@e*))))) (set! z2f21@expand-transformer (lambda (z41ae@expr z41af@r) ((lambda (z41b2@rtc) ((lambda (z41b4@expanded-rhs) (begin (for-each ((lambda (z41b6@mark-visit) (lambda (z41b8@x) (begin (z2add@z297e@invoke-library z41b8@x) (z41b6@mark-visit z41b8@x)))) (z2f31@vis-collector)) (z41b2@rtc)) z41b4@expanded-rhs)) ((lambda (z41c2@z41bb z41c3@z41bd z41c4@z41bf z41c5@z41c1) ((lambda (z41ca@swap) (dynamic-wind z41ca@swap (lambda () (z2ee6@chi-expr z41ae@expr z41af@r z41af@r)) z41ca@swap)) (lambda () (begin ((lambda (z41cc@t) (begin (z41c2@z41bb z41c4@z41bf) (set! z41c4@z41bf z41cc@t))) (z41c2@z41bb)) ((lambda (z41ce@t) (begin (z41c3@z41bd z41c5@z41c1) (set! z41c5@z41c1 z41ce@t))) (z41c3@z41bd)))))) z2f2f@inv-collector z2f31@vis-collector z41b2@rtc (lambda (z41d0@x) (values))))) (z2f2d@make-collector)))) (set! z2f23@parse-exports (lambda (z41d2@exp*) ((letrec ((z41d4@f (lambda (z41d6@exp* z41d7@int* z41d8@ext*) (if (null? z41d6@exp*) (begin (if (not (z2cc3@valid-bound-ids? z41d8@ext*)) (z2fad@syntax-violation 'export '"invalid exports" (z2efa@find-dups z41d8@ext*)) (void)) (values (map z2fb3@syntax->datum z41d8@ext*) z41d7@int*)) ((lambda (z41dc@t) ((lambda (z41de@ls/false) (if z41de@ls/false (apply (lambda (z41e0@rename z41e1@i* z41e2@e*) (begin (if (not (and (eq? (z2fb3@syntax->datum z41e0@rename) 'rename) (for-all z2cb9@id? z41e1@i*) (for-all z2cb9@id? z41e2@e*))) (z2fad@syntax-violation 'export '"invalid export specifier" (car z41d6@exp*)) (void)) (z41d4@f (cdr z41d6@exp*) (append z41e1@i* z41d7@int*) (append z41e2@e* z41d8@ext*)))) z41de@ls/false) ((lambda (z41e6@t) ((lambda (z41e8@ls/false) (if z41e8@ls/false (apply (lambda (z41ea@ie) (begin (if (not (z2cb9@id? z41ea@ie)) (z2fad@syntax-violation 'export '"invalid export" z41ea@ie) (void)) (z41d4@f (cdr z41d6@exp*) (cons z41ea@ie z41d7@int*) (cons z41ea@ie z41d8@ext*)))) z41e8@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z41e6@t))) (z2ec4@syntax-dispatch z41e6@t 'any))) z41dc@t))) (z2ec4@syntax-dispatch z41dc@t '(any . #(each (any any)))))) (car z41d6@exp*)))))) z41d4@f) z41d2@exp* '() '()))) (set! z2f25@parse-library-name (lambda (z41ec@spec) ((lambda (z41ef@parse) (begin (set! z41ef@parse (lambda (z41fc@x) ((lambda (z41fe@t) ((lambda (z4200@ls/false) (if (and z4200@ls/false (apply (lambda (z4202@v*) (for-all (lambda (z4204@x) ((lambda (z4206@x) (and (integer? z4206@x) (exact? z4206@x))) (z2fb3@syntax->datum z4204@x))) z4202@v*)) z4200@ls/false)) (apply (lambda (z4208@v*) (values '() (map z2fb3@syntax->datum z4208@v*))) z4200@ls/false) ((lambda (z420a@t) ((lambda (z420c@ls/false) (if (and z420c@ls/false (apply (lambda (z420e@x z420f@rest) (symbol? (z2fb3@syntax->datum z420e@x))) z420c@ls/false)) (apply (lambda (z4212@x z4213@rest) (call-with-values (lambda () (z41ef@parse z4213@rest)) (lambda (z421a@z4217 z421b@z4219) ((lambda (z421e@v* z421f@x*) (values (cons (z2fb3@syntax->datum z4212@x) z421f@x*) z421e@v*)) z421b@z4219 z421a@z4217)))) z420c@ls/false) ((lambda (z4222@t) ((lambda (z4224@ls/false) (if z4224@ls/false (apply (lambda () (values '() '())) z4224@ls/false) ((lambda (z4226@t) ((lambda (z4228@ls/false) (if z4228@ls/false (apply (lambda () (z2fad@syntax-violation '#f '"invalid library name" z41ec@spec)) z4228@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z4226@t))) (z2ec4@syntax-dispatch z4226@t '_))) z4222@t))) (z2ec4@syntax-dispatch z4222@t '()))) z420a@t))) (z2ec4@syntax-dispatch z420a@t '(any . any)))) z41fe@t))) (z2ec4@syntax-dispatch z41fe@t '(each-any)))) z41fc@x))) (call-with-values (lambda () (z41ef@parse z41ec@spec)) (lambda (z41f4@z41f1 z41f5@z41f3) ((lambda (z41f8@ver* z41f9@name*) (begin (if (null? z41f9@name*) (z2fad@syntax-violation '#f '"empty library name" z41ec@spec) (void)) (values z41f9@name* z41f8@ver*))) z41f5@z41f3 z41f4@z41f1))))) '#f))) (set! z2f27@parse-library (lambda (z422a@e) ((lambda (z422c@t) ((lambda (z422e@ls/false) (if (and z422e@ls/false (apply (lambda (z4230@library z4231@name* z4232@export z4233@exp* z4234@import z4235@imp* z4236@b*) (and (eq? (z2fb3@syntax->datum z4232@export) 'export) (eq? (z2fb3@syntax->datum z4234@import) 'import) (eq? (z2fb3@syntax->datum z4230@library) 'library))) z422e@ls/false)) (apply (lambda (z423e@library z423f@name* z4240@export z4241@exp* z4242@import z4243@imp* z4244@b*) (values z423f@name* z4241@exp* z4243@imp* z4244@b*)) z422e@ls/false) ((lambda (z424c@t) ((lambda (z424e@ls/false) (if z424e@ls/false (apply (lambda () (z2fad@syntax-violation '#f '"malformed library" z422a@e)) z424e@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z424c@t))) (z2ec4@syntax-dispatch z424c@t '_))) z422c@t))) (z2ec4@syntax-dispatch z422c@t '(any each-any (any . each-any) (any . each-any) . each-any)))) z422a@e))) (set! z2f29@parse-import-spec* ((lambda () ((lambda (z4251@idsyn? z4253@dup-error z4255@merge-substs z4257@exclude* z4259@find* z425b@rem* z425d@remove-dups z425f@parse-library-name z4261@import-library z4263@get-import z4265@add-imports!) (begin (set! z4251@idsyn? (lambda (z445a@x) (symbol? (z2fb3@syntax->datum z445a@x)))) (set! z4253@dup-error (lambda (z4458@name) (z2fad@syntax-violation 'import '"two imports with different bindings" z4458@name))) (set! z4255@merge-substs (lambda (z4446@s z4447@subst) ((lambda (z444b@insert-to-subst) (begin (set! z444b@insert-to-subst (lambda (z444c@a z444d@subst) ((lambda (z4450@name z4451@label) ((lambda (z4454@t) (if z4454@t ((lambda (z4456@x) (if (eq? (cdr z4456@x) z4451@label) z444d@subst (z4253@dup-error z4450@name))) z4454@t) (cons z444c@a z444d@subst))) (assq z4450@name z444d@subst))) (car z444c@a) (cdr z444c@a)))) (if (null? z4446@s) z4447@subst (z444b@insert-to-subst (car z4446@s) (z4255@merge-substs (cdr z4446@s) z4447@subst))))) '#f))) (set! z4257@exclude* (lambda (z4416@sym* z4417@subst) ((lambda (z441b@exclude) (begin (set! z441b@exclude (lambda (z4434@sym z4435@subst) (if (null? z4435@subst) (z2fad@syntax-violation 'import '"cannot rename unbound identifier" z4434@sym) (if (eq? z4434@sym (caar z4435@subst)) (values (cdar z4435@subst) (cdr z4435@subst)) ((lambda (z4438@a) (call-with-values (lambda () (z441b@exclude z4434@sym (cdr z4435@subst))) (lambda (z443e@z443b z443f@z443d) ((lambda (z4442@subst z4443@old) (values z4443@old (cons z4438@a z4442@subst))) z443f@z443d z443e@z443b)))) (car z4435@subst)))))) (if (null? z4416@sym*) (values '() z4417@subst) (call-with-values (lambda () (z441b@exclude (car z4416@sym*) z4417@subst)) (lambda (z4420@z441d z4421@z441f) ((lambda (z4424@subst z4425@old) (call-with-values (lambda () (z4257@exclude* (cdr z4416@sym*) z4424@subst)) (lambda (z442c@z4429 z442d@z442b) ((lambda (z4430@subst z4431@old*) (values (cons z4425@old z4431@old*) z4430@subst)) z442d@z442b z442c@z4429)))) z4421@z441f z4420@z441d)))))) '#f))) (set! z4259@find* (lambda (z440e@sym* z440f@subst) (map (lambda (z4412@x) ((lambda (z4414@t) (if z4414@t (cdr z4414@t) (z2fad@syntax-violation 'import '"cannot find identifier" z4412@x))) (assq z4412@x z440f@subst))) z440e@sym*))) (set! z425b@rem* (lambda (z4406@sym* z4407@subst) ((letrec ((z440a@f (lambda (z440c@subst) (if (null? z440c@subst) '() (if (memq (caar z440c@subst) z4406@sym*) (z440a@f (cdr z440c@subst)) (cons (car z440c@subst) (z440a@f (cdr z440c@subst)))))))) z440a@f) z4407@subst))) (set! z425d@remove-dups (lambda (z4404@ls) (if (null? z4404@ls) '() (if (memq (car z4404@ls) (cdr z4404@ls)) (z425d@remove-dups (cdr z4404@ls)) (cons (car z4404@ls) (z425d@remove-dups (cdr z4404@ls))))))) (set! z425f@parse-library-name (lambda (z431c@spec) ((lambda (z431f@subversion? z4321@subversion-pred z4323@version-pred) (begin (set! z431f@subversion? (lambda (z4400@x) ((lambda (z4402@x) (and (integer? z4402@x) (exact? z4402@x) (>= z4402@x '0))) (z2fb3@syntax->datum z4400@x)))) (set! z4321@subversion-pred (lambda (z43a0@x*) ((lambda (z43a2@t) ((lambda (z43a4@ls/false) (if (and z43a4@ls/false (apply (lambda (z43a6@n) (z431f@subversion? z43a6@n)) z43a4@ls/false)) (apply (lambda (z43a8@n) (lambda (z43aa@x) (= z43aa@x (z2fb3@syntax->datum z43a8@n)))) z43a4@ls/false) ((lambda (z43ac@t) ((lambda (z43ae@ls/false) (if (and z43ae@ls/false (apply (lambda (z43b0@p? z43b1@sub*) (eq? (z2fb3@syntax->datum z43b0@p?) 'and)) z43ae@ls/false)) (apply (lambda (z43b4@p? z43b5@sub*) ((lambda (z43b8@p*) (lambda (z43ba@x) (for-all (lambda (z43bc@p) (z43bc@p z43ba@x)) z43b8@p*))) (map z4321@subversion-pred z43b5@sub*))) z43ae@ls/false) ((lambda (z43be@t) ((lambda (z43c0@ls/false) (if (and z43c0@ls/false (apply (lambda (z43c2@p? z43c3@sub*) (eq? (z2fb3@syntax->datum z43c2@p?) 'or)) z43c0@ls/false)) (apply (lambda (z43c6@p? z43c7@sub*) ((lambda (z43ca@p*) (lambda (z43cc@x) (exists (lambda (z43ce@p) (z43ce@p z43cc@x)) z43ca@p*))) (map z4321@subversion-pred z43c7@sub*))) z43c0@ls/false) ((lambda (z43d0@t) ((lambda (z43d2@ls/false) (if (and z43d2@ls/false (apply (lambda (z43d4@p? z43d5@sub) (eq? (z2fb3@syntax->datum z43d4@p?) 'not)) z43d2@ls/false)) (apply (lambda (z43d8@p? z43d9@sub) ((lambda (z43dc@p) (lambda (z43de@x) (not (z43dc@p z43de@x)))) (z4321@subversion-pred z43d9@sub))) z43d2@ls/false) ((lambda (z43e0@t) ((lambda (z43e2@ls/false) (if (and z43e2@ls/false (apply (lambda (z43e4@p? z43e5@n) (and (eq? (z2fb3@syntax->datum z43e4@p?) '<=) (z431f@subversion? z43e5@n))) z43e2@ls/false)) (apply (lambda (z43e8@p? z43e9@n) (lambda (z43ec@x) (<= z43ec@x (z2fb3@syntax->datum z43e9@n)))) z43e2@ls/false) ((lambda (z43ee@t) ((lambda (z43f0@ls/false) (if (and z43f0@ls/false (apply (lambda (z43f2@p? z43f3@n) (and (eq? (z2fb3@syntax->datum z43f2@p?) '>=) (z431f@subversion? z43f3@n))) z43f0@ls/false)) (apply (lambda (z43f6@p? z43f7@n) (lambda (z43fa@x) (>= z43fa@x (z2fb3@syntax->datum z43f7@n)))) z43f0@ls/false) ((lambda (z43fc@t) ((lambda (z43fe@ls/false) (if z43fe@ls/false (apply (lambda () (z2fad@syntax-violation 'import '"invalid sub-version spec" z431c@spec z43a0@x*)) z43fe@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z43fc@t))) (z2ec4@syntax-dispatch z43fc@t '_))) z43ee@t))) (z2ec4@syntax-dispatch z43ee@t '(any any)))) z43e0@t))) (z2ec4@syntax-dispatch z43e0@t '(any any)))) z43d0@t))) (z2ec4@syntax-dispatch z43d0@t '(any any)))) z43be@t))) (z2ec4@syntax-dispatch z43be@t '(any . each-any)))) z43ac@t))) (z2ec4@syntax-dispatch z43ac@t '(any . each-any)))) z43a2@t))) (z2ec4@syntax-dispatch z43a2@t 'any))) z43a0@x*))) (set! z4323@version-pred (lambda (z4350@x*) ((lambda (z4352@t) ((lambda (z4354@ls/false) (if z4354@ls/false (apply (lambda () (lambda (z4356@x) '#t)) z4354@ls/false) ((lambda (z4358@t) ((lambda (z435a@ls/false) (if (and z435a@ls/false (apply (lambda (z435c@c z435d@ver*) (eq? (z2fb3@syntax->datum z435c@c) 'and)) z435a@ls/false)) (apply (lambda (z4360@c z4361@ver*) ((lambda (z4364@p*) (lambda (z4366@x) (for-all (lambda (z4368@p) (z4368@p z4366@x)) z4364@p*))) (map z4323@version-pred z4361@ver*))) z435a@ls/false) ((lambda (z436a@t) ((lambda (z436c@ls/false) (if (and z436c@ls/false (apply (lambda (z436e@c z436f@ver*) (eq? (z2fb3@syntax->datum z436e@c) 'or)) z436c@ls/false)) (apply (lambda (z4372@c z4373@ver*) ((lambda (z4376@p*) (lambda (z4378@x) (exists (lambda (z437a@p) (z437a@p z4378@x)) z4376@p*))) (map z4323@version-pred z4373@ver*))) z436c@ls/false) ((lambda (z437c@t) ((lambda (z437e@ls/false) (if (and z437e@ls/false (apply (lambda (z4380@c z4381@ver) (eq? (z2fb3@syntax->datum z4380@c) 'not)) z437e@ls/false)) (apply (lambda (z4384@c z4385@ver) ((lambda (z4388@p) (lambda (z438a@x) (not (z4388@p z438a@x)))) (z4323@version-pred z4385@ver))) z437e@ls/false) ((lambda (z438c@t) ((lambda (z438e@ls/false) (if z438e@ls/false (apply (lambda (z4390@sub*) ((lambda (z4392@p*) (lambda (z4394@x) ((letrec ((z4396@f (lambda (z4398@p* z4399@x) (if (null? z4398@p*) '#t (if (null? z4399@x) '#f (and ((car z4398@p*) (car z4399@x)) (z4396@f (cdr z4398@p*) (cdr z4399@x)))))))) z4396@f) z4392@p* z4394@x))) (map z4321@subversion-pred z4390@sub*))) z438e@ls/false) ((lambda (z439c@t) ((lambda (z439e@ls/false) (if z439e@ls/false (apply (lambda () (z2fad@syntax-violation 'import '"invalid version spec" z431c@spec z4350@x*)) z439e@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z439c@t))) (z2ec4@syntax-dispatch z439c@t '_))) z438c@t))) (z2ec4@syntax-dispatch z438c@t 'each-any))) z437c@t))) (z2ec4@syntax-dispatch z437c@t '(any any)))) z436a@t))) (z2ec4@syntax-dispatch z436a@t '(any . each-any)))) z4358@t))) (z2ec4@syntax-dispatch z4358@t '(any . each-any)))) z4352@t))) (z2ec4@syntax-dispatch z4352@t '()))) z4350@x*))) ((letrec ((z4324@f (lambda (z4326@x) ((lambda (z4328@t) ((lambda (z432a@ls/false) (if z432a@ls/false (apply (lambda (z432c@version-spec*) (values '() (z4323@version-pred z432c@version-spec*))) z432a@ls/false) ((lambda (z432e@t) ((lambda (z4330@ls/false) (if (and z4330@ls/false (apply (lambda (z4332@x z4333@x*) (z4251@idsyn? z4332@x)) z4330@ls/false)) (apply (lambda (z4336@x z4337@x*) (call-with-values (lambda () (z4324@f z4337@x*)) (lambda (z433e@z433b z433f@z433d) ((lambda (z4342@pred z4343@name) (values (cons (z2fb3@syntax->datum z4336@x) z4343@name) z4342@pred)) z433f@z433d z433e@z433b)))) z4330@ls/false) ((lambda (z4346@t) ((lambda (z4348@ls/false) (if z4348@ls/false (apply (lambda () (values '() (lambda (z434a@x) '#t))) z4348@ls/false) ((lambda (z434c@t) ((lambda (z434e@ls/false) (if z434e@ls/false (apply (lambda () (z2fad@syntax-violation '#f '"invalid import spec" z431c@spec)) z434e@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z434c@t))) (z2ec4@syntax-dispatch z434c@t '_))) z4346@t))) (z2ec4@syntax-dispatch z4346@t '()))) z432e@t))) (z2ec4@syntax-dispatch z432e@t '(any . any)))) z4328@t))) (z2ec4@syntax-dispatch z4328@t '(each-any)))) z4326@x)))) z4324@f) z431c@spec))) '#f '#f '#f))) (set! z4261@import-library (lambda (z430c@spec*) (call-with-values (lambda () (z425f@parse-library-name z430c@spec*)) (lambda (z4312@z430f z4313@z4311) ((lambda (z4316@pred z4317@name) (begin (if (null? z4317@name) (z2fad@syntax-violation 'import '"empty library name" z430c@spec*) (void)) ((lambda (z431a@lib) (begin (if (not z431a@lib) (z2fad@syntax-violation 'import '"cannot find library with required name" z4317@name) (void)) (if (not (z4316@pred (z2aae@z2920@library-version z431a@lib))) (z2fad@syntax-violation 'import '"library does not satisfy version specification" z430c@spec* z431a@lib) (void)) ((z2f33@imp-collector) z431a@lib) (z2ab2@z2928@library-subst z431a@lib))) (z2ad6@z2970@find-library-by-name z4317@name)))) z4313@z4311 z4312@z430f))))) (set! z4263@get-import (lambda (z427e@spec) ((lambda (z4280@t) ((lambda (z4282@ls/false) (if (and z4282@ls/false (apply (lambda (z4284@x z4285@x*) (not (memq (z2fb3@syntax->datum z4284@x) '(for rename except only prefix library)))) z4282@ls/false)) (apply (lambda (z4288@x z4289@x*) (z4261@import-library (cons z4288@x z4289@x*))) z4282@ls/false) ((lambda (z428c@t) ((lambda (z428e@ls/false) (if (and z428e@ls/false (apply (lambda (z4290@rename z4291@isp z4292@old* z4293@new*) (and (eq? (z2fb3@syntax->datum z4290@rename) 'rename) (for-all z4251@idsyn? z4292@old*) (for-all z4251@idsyn? z4293@new*))) z428e@ls/false)) (apply (lambda (z4298@rename z4299@isp z429a@old* z429b@new*) ((lambda (z42a0@subst z42a1@old* z42a2@new*) ((lambda (z42a6@old-label*) ((lambda (z42a8@subst) (z4255@merge-substs (map cons z42a2@new* z42a6@old-label*) z42a8@subst)) (z425b@rem* z42a1@old* z42a0@subst))) (z4259@find* z42a1@old* z42a0@subst))) (z4263@get-import z4299@isp) (map z2fb3@syntax->datum z429a@old*) (map z2fb3@syntax->datum z429b@new*))) z428e@ls/false) ((lambda (z42aa@t) ((lambda (z42ac@ls/false) (if (and z42ac@ls/false (apply (lambda (z42ae@except z42af@isp z42b0@sym*) (and (eq? (z2fb3@syntax->datum z42ae@except) 'except) (for-all z4251@idsyn? z42b0@sym*))) z42ac@ls/false)) (apply (lambda (z42b4@except z42b5@isp z42b6@sym*) ((lambda (z42ba@subst) (z425b@rem* (map z2fb3@syntax->datum z42b6@sym*) z42ba@subst)) (z4263@get-import z42b5@isp))) z42ac@ls/false) ((lambda (z42bc@t) ((lambda (z42be@ls/false) (if (and z42be@ls/false (apply (lambda (z42c0@only z42c1@isp z42c2@sym*) (and (eq? (z2fb3@syntax->datum z42c0@only) 'only) (for-all z4251@idsyn? z42c2@sym*))) z42be@ls/false)) (apply (lambda (z42c6@only z42c7@isp z42c8@sym*) ((lambda (z42cc@subst z42cd@sym*) ((lambda (z42d0@sym*) ((lambda (z42d2@lab*) (map cons z42d0@sym* z42d2@lab*)) (z4259@find* z42d0@sym* z42cc@subst))) (z425d@remove-dups z42cd@sym*))) (z4263@get-import z42c7@isp) (map z2fb3@syntax->datum z42c8@sym*))) z42be@ls/false) ((lambda (z42d4@t) ((lambda (z42d6@ls/false) (if (and z42d6@ls/false (apply (lambda (z42d8@prefix z42d9@isp z42da@p) (and (eq? (z2fb3@syntax->datum z42d8@prefix) 'prefix) (z4251@idsyn? z42da@p))) z42d6@ls/false)) (apply (lambda (z42de@prefix z42df@isp z42e0@p) ((lambda (z42e4@subst z42e5@prefix) (map (lambda (z42e8@x) (cons (string->symbol (string-append z42e5@prefix (symbol->string (car z42e8@x)))) (cdr z42e8@x))) z42e4@subst)) (z4263@get-import z42df@isp) (symbol->string (z2fb3@syntax->datum z42e0@p)))) z42d6@ls/false) ((lambda (z42ea@t) ((lambda (z42ec@ls/false) (if (and z42ec@ls/false (apply (lambda (z42ee@library z42ef@spec*) (eq? (z2fb3@syntax->datum z42ee@library) 'library)) z42ec@ls/false)) (apply (lambda (z42f2@library z42f3@spec*) (z4261@import-library z42f3@spec*)) z42ec@ls/false) ((lambda (z42f6@t) ((lambda (z42f8@ls/false) (if (and z42f8@ls/false (apply (lambda (z42fa@for z42fb@isp z42fc@rest) (eq? (z2fb3@syntax->datum z42fa@for) 'for)) z42f8@ls/false)) (apply (lambda (z4300@for z4301@isp z4302@rest) (z4263@get-import z4301@isp)) z42f8@ls/false) ((lambda (z4306@t) ((lambda (z4308@ls/false) (if z4308@ls/false (apply (lambda (z430a@spec) (z2fad@syntax-violation 'import '"invalid import spec" z430a@spec)) z4308@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z4306@t))) (z2ec4@syntax-dispatch z4306@t 'any))) z42f6@t))) (z2ec4@syntax-dispatch z42f6@t '(any any . any)))) z42ea@t))) (z2ec4@syntax-dispatch z42ea@t '(any each-any)))) z42d4@t))) (z2ec4@syntax-dispatch z42d4@t '(any any any)))) z42bc@t))) (z2ec4@syntax-dispatch z42bc@t '(any any . each-any)))) z42aa@t))) (z2ec4@syntax-dispatch z42aa@t '(any any . each-any)))) z428c@t))) (z2ec4@syntax-dispatch z428c@t '(any any . #(each (any any)))))) z4280@t))) (z2ec4@syntax-dispatch z4280@t '(any . each-any)))) z427e@spec))) (set! z4265@add-imports! (lambda (z426e@imp z426f@h) ((lambda (z4272@subst) (for-each (lambda (z4274@x) ((lambda (z4276@name z4277@label) ((lambda (z427a@t) (if z427a@t ((lambda (z427c@l) (if (not (eq? z427c@l z4277@label)) (z4253@dup-error z4276@name) (void))) z427a@t) (hashtable-set! z426f@h z4276@name z4277@label))) (hashtable-ref z426f@h z4276@name '#f))) (car z4274@x) (cdr z4274@x))) z4272@subst)) (z4263@get-import z426e@imp)))) (lambda (z4266@imp*) ((letrec ((z4268@f (lambda (z426a@imp* z426b@h) (if (null? z426a@imp*) (hashtable-entries z426b@h) (begin (z4265@add-imports! (car z426a@imp*) z426b@h) (z4268@f (cdr z426a@imp*) z426b@h)))))) z4268@f) z4266@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! z2f2b@make-top-rib (lambda (z445c@names z445d@labels) ((lambda (z4460@rib) (begin (vector-for-each (lambda (z4462@name z4463@label) (begin (if (not (symbol? z4462@name)) (error 'make-top-rib '"BUG: not a symbol" z4462@name) (void)) (z2c6c@extend-rib/nc! z4460@rib (z2c83@make-stx z4462@name z2c35@top-mark* '() '()) z4463@label))) z445c@names z445d@labels) z4460@rib)) (z2c68@make-empty-rib)))) (set! z2f2d@make-collector (lambda () ((lambda (z4466@ls) (lambda z446a ((lambda (z446b) (if (= z446b '0) (apply (lambda () z4466@ls) z446a) (if (= z446b '1) (apply (lambda (z4468@x) (set! z4466@ls (z2c2e@set-cons z4468@x z4466@ls))) z446a) (error 'apply '"invalid arg count")))) (length z446a)))) '()))) (set! z2f2f@inv-collector (z2863@z278d@make-parameter (lambda z446c@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (z446e@x) (begin (if (not (procedure? z446e@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" z446e@x) (void)) z446e@x)))) (set! z2f31@vis-collector (z2863@z278d@make-parameter (lambda z4470@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (z4472@x) (begin (if (not (procedure? z4472@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" z4472@x) (void)) z4472@x)))) (set! z2f33@imp-collector (z2863@z278d@make-parameter (lambda z4474@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (z4476@x) (begin (if (not (procedure? z4476@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" z4476@x) (void)) z4476@x)))) (set! z2f35@chi-library-internal (lambda (z4478@e* z4479@rib z447a@top?) (call-with-values (lambda () (z2f1f@chi-body* z4478@e* '() '() '() '() '() '() '() z4479@rib z447a@top?)) (lambda (z448e@z447f z448f@z4481 z4490@z4483 z4491@z4485 z4492@z4487 z4493@z4489 z4494@z448b z4495@z448d) ((lambda (z449e@exp* z449f@_kwd* z44a0@mod** z44a1@rhs* z44a2@lex* z44a3@mr z44a4@r z44a5@e*) (values (append (apply append (reverse z44a0@mod**)) z44a5@e*) z44a4@r z44a3@mr (reverse z44a2@lex*) (reverse z44a1@rhs*) z449e@exp*)) z4495@z448d z4494@z448b z4493@z4489 z4492@z4487 z4491@z4485 z4490@z4483 z448f@z4481 z448e@z447f))))) (set! z2f37@chi-interaction-expr (lambda (z44ae@e z44af@rib z44b0@r) (call-with-values (lambda () (z2f1f@chi-body* (list z44ae@e) z44b0@r z44b0@r '() '() '() '() '() z44af@rib '#t)) (lambda (z44c4@z44b5 z44c5@z44b7 z44c6@z44b9 z44c7@z44bb z44c8@z44bd z44c9@z44bf z44ca@z44c1 z44cb@z44c3) ((lambda (z44d4@_exp* z44d5@_kwd* z44d6@mod** z44d7@rhs* z44d8@lex* z44d9@mr z44da@r z44db@e*) ((lambda (z44e4@e*) ((lambda (z44e6@e) (values z44e6@e z44da@r)) (if (null? z44e4@e*) (z2c19@z2b89@build-void) (if (null? (cdr z44e4@e*)) (car z44e4@e*) (z2c18@z2b87@build-sequence '#f z44e4@e*))))) (z2ef4@expand-interaction-rhs*/init* (reverse z44d8@lex*) (reverse z44d7@rhs*) (append (apply append (reverse z44d6@mod**)) z44db@e*) z44da@r z44d9@mr))) z44cb@z44c3 z44ca@z44c1 z44c9@z44bf z44c8@z44bd z44c7@z44bb z44c6@z44b9 z44c5@z44b7 z44c4@z44b5))))) (set! z2f39@library-body-expander (lambda (z44e8@name z44e9@main-exp* z44ea@imp* z44eb@b* z44ec@top?) ((lambda (z44f3@itc) (begin (set! z44f3@itc (z2f2d@make-collector)) ((lambda (z44fc@z44f5 z44fd@z44f7 z44fe@z44f9 z44ff@z44fb) ((lambda (z4504@swap) (dynamic-wind z4504@swap (lambda () (call-with-values (lambda () (z2f29@parse-import-spec* z44ea@imp*)) (lambda (z450a@z4507 z450b@z4509) ((lambda (z450e@subst-labels z450f@subst-names) ((lambda (z4512@rib) ((lambda (z4515@wrap) (begin (set! z4515@wrap (lambda (z4590@x) (z2c83@make-stx z4590@x z2c35@top-mark* (list z4512@rib) '()))) ((lambda (z4516@b* z4517@main-exp* z4518@rtc z4519@vtc) ((lambda (z4526@z451f z4527@z4521 z4528@z4523 z4529@z4525) ((lambda (z452e@swap) (dynamic-wind z452e@swap (lambda () (call-with-values (lambda () (z2f35@chi-library-internal z4516@b* z4512@rib z44ec@top?)) (lambda (z453c@z4531 z453d@z4533 z453e@z4535 z453f@z4537 z4540@z4539 z4541@z453b) ((lambda (z4548@internal-exp* z4549@rhs* z454a@lex* z454b@mr z454c@r z454d@init*) (call-with-values (lambda () (z2f23@parse-exports (append z4517@main-exp* z4548@internal-exp*))) (lambda (z4558@z4555 z4559@z4557) ((lambda (z455c@exp-id* z455d@exp-name*) (begin (z2c70@seal-rib! z4512@rib) ((lambda (z4560@init*) ((lambda (z4562@rhs*) ((lambda () (begin (z2c72@unseal-rib! z4512@rib) ((lambda (z4564@loc* z4565@export-subst) ((lambda (z4569@errstr) (begin (set! z4569@errstr '"attempt to export mutated variable") (call-with-values (lambda () (z2f99@make-export-env/macros z454a@lex* z4564@loc* z454c@r)) (lambda (z4570@z456b z4571@z456d z4572@z456f) ((lambda (z4576@macro* z4577@global* z4578@export-env) (begin (for-each (lambda (z457c@s) ((lambda (z457e@name z457f@label) ((lambda (z4582@p) (if z4582@p ((lambda (z4584@b) ((lambda (z4586@type) (if (eq? z4586@type 'mutable) (z2fad@syntax-violation 'export z4569@errstr z457e@name) (void))) (car z4584@b))) (cdr z4582@p)) (void))) (assq z457f@label z4578@export-env))) (car z457c@s) (cdr z457c@s))) z4565@export-subst) ((lambda (z4588@invoke-body z4589@invoke-definitions) (values (z44f3@itc) (z4518@rtc) (z4519@vtc) (z2c18@z2b87@build-sequence '#f (append z4589@invoke-definitions (list z4588@invoke-body))) z4576@macro* z4565@export-subst z4578@export-env)) (z2c1b@z2b8d@build-letrec* '#f z454a@lex* z4562@rhs* (z2f95@build-exports z4577@global* z4560@init*)) (map z2c14@z2ae4@build-global-define (map cdr z4577@global*))))) z4572@z456f z4571@z456d z4570@z456b))))) '#f)) (map z2c3b@gen-global z454a@lex*) (z2f97@make-export-subst z455d@exp-name* z455c@exp-id*)))))) (z2ef6@chi-rhs* z4549@rhs* z454c@r z454b@mr))) (z2ee2@chi-expr* z454d@init* z454c@r z454b@mr)))) z4559@z4557 z4558@z4555)))) z4541@z453b z4540@z4539 z453f@z4537 z453e@z4535 z453d@z4533 z453c@z4531)))) z452e@swap)) (lambda () (begin ((lambda (z458c@t) (begin (z4526@z451f z4528@z4523) (set! z4528@z4523 z458c@t))) (z4526@z451f)) ((lambda (z458e@t) (begin (z4527@z4521 z4529@z4525) (set! z4529@z4525 z458e@t))) (z4527@z4521)))))) z2f2f@inv-collector z2f31@vis-collector z4518@rtc z4519@vtc)) (map z4515@wrap z44eb@b*) (map z4515@wrap z44e9@main-exp*) (z2f2d@make-collector) (z2f2d@make-collector)))) '#f)) (z2f2b@make-top-rib z450f@subst-names z450e@subst-labels))) z450b@z4509 z450a@z4507)))) z4504@swap)) (lambda () (begin ((lambda (z4592@t) (begin (z44fc@z44f5 z44fe@z44f9) (set! z44fe@z44f9 z4592@t))) (z44fc@z44f5)) ((lambda (z4594@t) (begin (z44fd@z44f7 z44ff@z44fb) (set! z44ff@z44fb z4594@t))) (z44fd@z44f7)))))) z2f33@imp-collector z2fbb@top-level-context z44f3@itc '#f))) '#f))) (set! z2f3b@core-library-expander (lambda (z4596@e z4597@verify-name) (call-with-values (lambda () (z2f27@parse-library z4596@e)) (lambda (z45a2@z459b z45a3@z459d z45a4@z459f z45a5@z45a1) ((lambda (z45aa@b* z45ab@imp* z45ac@exp* z45ad@name*) (call-with-values (lambda () (z2f25@parse-library-name z45ad@name*)) (lambda (z45b6@z45b3 z45b7@z45b5) ((lambda (z45ba@ver z45bb@name) (begin (z4597@verify-name z45bb@name) (call-with-values (lambda () (z2f39@library-body-expander z45bb@name z45ac@exp* z45ab@imp* z45aa@b* '#f)) (lambda (z45cc@z45bf z45cd@z45c1 z45ce@z45c3 z45cf@z45c5 z45d0@z45c7 z45d1@z45c9 z45d2@z45cb) ((lambda (z45da@export-env z45db@export-subst z45dc@visit-code z45dd@invoke-code z45de@visit-req* z45df@invoke-req* z45e0@imp*) (values z45bb@name z45ba@ver z45e0@imp* z45df@invoke-req* z45de@visit-req* z45dd@invoke-code z45dc@visit-code z45db@export-subst z45da@export-env)) z45d2@z45cb z45d1@z45c9 z45d0@z45c7 z45cf@z45c5 z45ce@z45c3 z45cd@z45c1 z45cc@z45bf))))) z45b7@z45b5 z45b6@z45b3)))) z45a5@z45a1 z45a4@z459f z45a3@z459d z45a2@z459b))))) (set! z2f3d@parse-top-level-program (lambda (z45e8@e*) ((lambda (z45ea@t) ((lambda (z45ec@ls/false) (if (and z45ec@ls/false (apply (lambda (z45ee@import z45ef@imp* z45f0@b*) (eq? (z2fb3@syntax->datum z45ee@import) 'import)) z45ec@ls/false)) (apply (lambda (z45f4@import z45f5@imp* z45f6@b*) (values z45f5@imp* z45f6@b*)) z45ec@ls/false) ((lambda (z45fa@t) ((lambda (z45fc@ls/false) (if (and z45fc@ls/false (apply (lambda (z45fe@import z45ff@x z4600@y) (eq? (z2fb3@syntax->datum z45fe@import) 'import)) z45fc@ls/false)) (apply (lambda (z4604@import z4605@x z4606@y) (z2fad@syntax-violation 'expander '"invalid syntax of top-level program" (z2cb3@syntax-car z45e8@e*))) z45fc@ls/false) ((lambda (z460a@t) ((lambda (z460c@ls/false) (if z460c@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) z460c@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z460a@t))) (z2ec4@syntax-dispatch z460a@t '_))) z45fa@t))) (z2ec4@syntax-dispatch z45fa@t '((any . any) . any)))) z45ea@t))) (z2ec4@syntax-dispatch z45ea@t '((any . each-any) . each-any)))) z45e8@e*))) (set! z2f3f@top-level-expander (lambda (z460e@e*) (call-with-values (lambda () (z2f3d@parse-top-level-program z460e@e*)) (lambda (z4614@z4611 z4615@z4613) ((lambda (z4618@b* z4619@imp*) (call-with-values (lambda () (z2f39@library-body-expander '() '() z4619@imp* z4618@b* '#t)) (lambda (z462a@z461d z462b@z461f z462c@z4621 z462d@z4623 z462e@z4625 z462f@z4627 z4630@z4629) ((lambda (z4638@export-env z4639@export-subst z463a@visit-code z463b@invoke-code z463c@visit-req* z463d@invoke-req* z463e@imp*) (values z463d@invoke-req* z463b@invoke-code)) z4630@z4629 z462f@z4627 z462e@z4625 z462d@z4623 z462c@z4621 z462b@z461f z462a@z461d)))) z4615@z4613 z4614@z4611))))) (set! z2f45@z2f40 (make-record-type-descriptor 'env '#f 'z2f43 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! z2f47@z2f42 '#f) (set! z2f49@z2f41 (make-record-constructor-descriptor z2f45@z2f40 '#f z2f47@z2f42)) (set! z2f4c@env? (record-predicate z2f45@z2f40)) (set! z2f4e@make-env (record-constructor z2f49@z2f41)) (set! z2f50@env-names (record-accessor z2f45@z2f40 '0)) (set! z2f52@env-labels (record-accessor z2f45@z2f40 '1)) (set! z2f54@env-itc (record-accessor z2f45@z2f40 '2)) (set! z2f56@set-env-names! (record-mutator z2f45@z2f40 '0)) (set! z2f58@set-env-labels! (record-mutator z2f45@z2f40 '1)) (set! z2f5a@set-env-itc! (record-mutator z2f45@z2f40 '2)) (set! z2f5c@rp (z2860@z2787@make-record-printer 'env (lambda (z4646@x z4647@p z4648@wr) (display '"#<environment>" z4647@p)))) (set! z2f62@z2f5d (make-record-type-descriptor 'interaction-env '#f 'z2f60 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! z2f64@z2f5f '#f) (set! z2f66@z2f5e (make-record-constructor-descriptor z2f62@z2f5d '#f z2f64@z2f5f)) (set! z2f69@interaction-env? (record-predicate z2f62@z2f5d)) (set! z2f6b@make-interaction-env (record-constructor z2f66@z2f5e)) (set! z2f6d@interaction-env-rib (record-accessor z2f62@z2f5d '0)) (set! z2f6f@interaction-env-r (record-accessor z2f62@z2f5d '1)) (set! z2f71@interaction-env-locs (record-accessor z2f62@z2f5d '2)) (set! z2f73@set-interaction-env-rib! (record-mutator z2f62@z2f5d '0)) (set! z2f75@set-interaction-env-r! (record-mutator z2f62@z2f5d '1)) (set! z2f77@set-interaction-env-locs! (record-mutator z2f62@z2f5d '2)) (set! z2f79@rp (z2860@z2787@make-record-printer 'interaction-env (lambda (z464c@x z464d@p z464e@wr) (display '"#<environment>" z464d@p)))) (set! z2f7b@interaction-environment-symbols (lambda () (z2f83@environment-symbols (z2fb9@interaction-environment)))) (set! z2f7d@environment-bindings (lambda (z4652@e) (vector->list (vector-map (lambda (z4654@name z4655@label) (z2f7f@parse-binding (cons z4654@name (z2adc@z297c@imported-label->binding z4655@label)))) (z2f50@env-names z4652@e) (z2f52@env-labels z4652@e))))) (set! z2f7f@parse-binding (lambda (z4658@b) (cons (car z4658@b) ((lambda (z465a@t) (if (memv z465a@t '(core-prim global)) 'procedure (if (memv z465a@t '(core-macro macro global-macro)) 'syntax (if (memv z465a@t '($core-rtd)) 'record (if (eq? (car z4658@b) (cadr z4658@b)) 'syntax 'unknown))))) (cadr z4658@b))))) (set! z2f81@environment? (lambda (z465c@x) (or (z2f4c@env? z465c@x) (z2f69@interaction-env? z465c@x)))) (set! z2f83@environment-symbols (lambda (z465e@x) (if (z2f4c@env? z465e@x) (vector->list (z2f50@env-names z465e@x)) (if (z2f69@interaction-env? z465e@x) (map values (z2c54@rib-sym* (z2f6d@interaction-env-rib z465e@x))) (assertion-violation 'environment-symbols '"not an environment" z465e@x))))) (set! z2f85@environment (lambda z4660@imp* ((lambda (z4662@itc) ((lambda (z4668@z4665 z4669@z4667) ((lambda (z466c@swap) (dynamic-wind z466c@swap (lambda () (call-with-values (lambda () (z2f29@parse-import-spec* z4660@imp*)) (lambda (z4672@z466f z4673@z4671) ((lambda (z4676@subst-labels z4677@subst-names) (z2f4e@make-env z4677@subst-names z4676@subst-labels z4662@itc)) z4673@z4671 z4672@z466f)))) z466c@swap)) (lambda () ((lambda (z467a@t) (begin (z4668@z4665 z4669@z4667) (set! z4669@z4667 z467a@t))) (z4668@z4665))))) z2f33@imp-collector z4662@itc)) (z2f2d@make-collector)))) (set! z2f87@null-environment (lambda (z467c@n) (begin (if (not (eqv? z467c@n '5)) (assertion-violation 'null-environment '"not 5" z467c@n) (void)) (z2f85@environment '(psyntax null-environment-5))))) (set! z2f89@scheme-report-environment (lambda (z467e@n) (begin (if (not (eqv? z467e@n '5)) (assertion-violation 'scheme-report-environment '"not 5" z467e@n) (void)) (z2f85@environment '(psyntax scheme-report-environment-5))))) (set! z2f8b@expand (lambda (z4680@x z4681@env) (if (z2f4c@env? z4681@env) ((lambda (z4684@rib) ((lambda (z4686@x z4687@itc z4688@rtc z4689@vtc) ((lambda (z468e@x) (begin (z2c70@seal-rib! z4684@rib) (values z468e@x (z4688@rtc)))) ((lambda (z46a0@z4691 z46a1@z4693 z46a2@z4695 z46a3@z4697 z46a4@z4699 z46a5@z469b z46a6@z469d z46a7@z469f) ((lambda (z46b0@swap) (dynamic-wind z46b0@swap (lambda () (z2ee6@chi-expr z4686@x '() '())) z46b0@swap)) (lambda () (begin ((lambda (z46b2@t) (begin (z46a0@z4691 z46a4@z4699) (set! z46a4@z4699 z46b2@t))) (z46a0@z4691)) ((lambda (z46b4@t) (begin (z46a1@z4693 z46a5@z469b) (set! z46a5@z469b z46b4@t))) (z46a1@z4693)) ((lambda (z46b6@t) (begin (z46a2@z4695 z46a6@z469d) (set! z46a6@z469d z46b6@t))) (z46a2@z4695)) ((lambda (z46b8@t) (begin (z46a3@z4697 z46a7@z469f) (set! z46a7@z469f z46b8@t))) (z46a3@z4697)))))) z2fbb@top-level-context z2f2f@inv-collector z2f31@vis-collector z2f33@imp-collector '#f z4688@rtc z4689@vtc z4687@itc))) (z2c83@make-stx z4680@x z2c35@top-mark* (list z4684@rib) '()) (z2f54@env-itc z4681@env) (z2f2d@make-collector) (z2f2d@make-collector))) (z2f2b@make-top-rib (z2f50@env-names z4681@env) (z2f52@env-labels z4681@env))) (if (z2f69@interaction-env? z4681@env) ((lambda (z46ba@rib z46bb@r z46bc@rtc) ((lambda (z46c0@x) (call-with-values (lambda () ((lambda (z46d6@z46c7 z46d7@z46c9 z46d8@z46cb z46d9@z46cd z46da@z46cf z46db@z46d1 z46dc@z46d3 z46dd@z46d5) ((lambda (z46e6@swap) (dynamic-wind z46e6@swap (lambda () (z2f37@chi-interaction-expr z46c0@x z46ba@rib z46bb@r)) z46e6@swap)) (lambda () (begin ((lambda (z46e8@t) (begin (z46d6@z46c7 z46da@z46cf) (set! z46da@z46cf z46e8@t))) (z46d6@z46c7)) ((lambda (z46ea@t) (begin (z46d7@z46c9 z46db@z46d1) (set! z46db@z46d1 z46ea@t))) (z46d7@z46c9)) ((lambda (z46ec@t) (begin (z46d8@z46cb z46dc@z46d3) (set! z46dc@z46d3 z46ec@t))) (z46d8@z46cb)) ((lambda (z46ee@t) (begin (z46d9@z46cd z46dd@z46d5) (set! z46dd@z46d5 z46ee@t))) (z46d9@z46cd)))))) z2fbb@top-level-context z2f2f@inv-collector z2f31@vis-collector z2f33@imp-collector z4681@env z46bc@rtc (z2f2d@make-collector) (z2f2d@make-collector))) (lambda (z46f0@z46c3 z46f1@z46c5) ((lambda (z46f4@r^ z46f5@e) (begin (z2f75@set-interaction-env-r! z4681@env z46f4@r^) (values z46f5@e (z46bc@rtc)))) z46f1@z46c5 z46f0@z46c3)))) (z2c83@make-stx z4680@x z2c35@top-mark* (list z46ba@rib) '()))) (z2f6d@interaction-env-rib z4681@env) (z2f6f@interaction-env-r z4681@env) (z2f2d@make-collector)) (assertion-violation 'expand '"not an environment" z4681@env))))) (set! z2f8d@eval (lambda (z46f8@x z46f9@env) (begin (if (not (z2f81@environment? z46f9@env)) (error 'eval '"not an environment" z46f9@env) (void)) (call-with-values (lambda () (z2f8b@expand z46f8@x z46f9@env)) (lambda (z4700@z46fd z4701@z46ff) ((lambda (z4704@invoke-req* z4705@x) (begin (for-each z2add@z297e@invoke-library z4704@invoke-req*) (eval-core (z28b7@z286f@expanded->core z4705@x)))) z4701@z46ff z4700@z46fd)))))) (set! z2f8f@library-expander (lambda z4776 ((lambda (z4777) (if (= z4777 '3) (apply (lambda (z4708@x z4709@filename z470a@verify-name) ((lambda (z470f@build-visit-code z4711@visit!) (begin (set! z470f@build-visit-code (lambda (z4764@macro*) (if (null? z4764@macro*) (z2c19@z2b89@build-void) (z2c18@z2b87@build-sequence '#f (map (lambda (z4766@x) ((lambda (z4768@loc z4769@src) (list 'set! z4768@loc z4769@src)) (car z4766@x) (cddr z4766@x))) z4764@macro*))))) (set! z4711@visit! (lambda (z475c@macro*) (for-each (lambda (z475e@x) ((lambda (z4760@loc z4761@proc) (set-symbol-value! z4760@loc z4761@proc)) (car z475e@x) (cadr z475e@x))) z475c@macro*))) (call-with-values (lambda () (z2f3b@core-library-expander z4708@x z470a@verify-name)) (lambda (z4724@z4713 z4725@z4715 z4726@z4717 z4727@z4719 z4728@z471b z4729@z471d z472a@z471f z472b@z4721 z472c@z4723) ((lambda (z4736@export-env z4737@export-subst z4738@macro* z4739@invoke-code z473a@vis* z473b@inv* z473c@imp* z473d@ver z473e@name) ((lambda (z4748@id z4749@name z474a@ver z474b@imp* z474c@vis* z474d@inv* z474e@visit-proc z474f@invoke-proc z4750@visit-code z4751@invoke-code) (begin (z2adb@z297a@install-library z4748@id z4749@name z474a@ver z474b@imp* z474c@vis* z474d@inv* z4737@export-subst z4736@export-env z474e@visit-proc z474f@invoke-proc z4750@visit-code z4751@invoke-code '#t z4709@filename) (values z4748@id z4749@name z474a@ver z474b@imp* z474c@vis* z474d@inv* z4751@invoke-code z4750@visit-code z4737@export-subst z4736@export-env))) (gensym) z473e@name z473d@ver (map z2ae1@z2986@library-spec z473c@imp*) (map z2ae1@z2986@library-spec z473a@vis*) (map z2ae1@z2986@library-spec z473b@inv*) (lambda () (z4711@visit! z4738@macro*)) (lambda () (eval-core (z28b7@z286f@expanded->core z4739@invoke-code))) (z470f@build-visit-code z4738@macro*) z4739@invoke-code)) z472c@z4723 z472b@z4721 z472a@z471f z4729@z471d z4728@z471b z4727@z4719 z4726@z4717 z4725@z4715 z4724@z4713))))) '#f '#f)) z4776) (if (= z4777 '2) (apply (lambda (z476c@x z476d@filename) (z2f8f@library-expander z476c@x z476d@filename (lambda (z4770@x) (values)))) z4776) (if (= z4777 '1) (apply (lambda (z4772@x) (z2f8f@library-expander z4772@x '#f (lambda (z4774@x) (values)))) z4776) (error 'apply '"invalid arg count"))))) (length z4776)))) (set! z2f91@boot-library-expand (lambda (z4778@x) (call-with-values (lambda () (z2f8f@library-expander z4778@x)) (lambda (z478e@z477b z478f@z477d z4790@z477f z4791@z4781 z4792@z4783 z4793@z4785 z4794@z4787 z4795@z4789 z4796@z478b z4797@z478d) ((lambda (z47a2@export-env z47a3@export-subst z47a4@visit-code z47a5@invoke-code z47a6@inv* z47a7@vis* z47a8@imp* z47a9@ver z47aa@name z47ab@id) (values z47aa@name z47a5@invoke-code z47a3@export-subst z47a2@export-env)) z4797@z478d z4796@z478b z4795@z4789 z4794@z4787 z4793@z4785 z4792@z4783 z4791@z4781 z4790@z477f z478f@z477d z478e@z477b))))) (set! z2f93@rev-map-append (lambda (z47b6@f z47b7@ls z47b8@ac) (if (null? z47b7@ls) z47b8@ac (z2f93@rev-map-append z47b6@f (cdr z47b7@ls) (cons (z47b6@f (car z47b7@ls)) z47b8@ac))))) (set! z2f95@build-exports (lambda (z47bc@lex*+loc* z47bd@init*) (z2c18@z2b87@build-sequence '#f (cons (z2c19@z2b89@build-void) (z2f93@rev-map-append (lambda (z47c0@x) (list 'set! (cdr z47c0@x) (car z47c0@x))) z47bc@lex*+loc* z47bd@init*))))) (set! z2f97@make-export-subst (lambda (z47c2@name* z47c3@id*) (map (lambda (z47c6@name z47c7@id) ((lambda (z47ca@label) (begin (if (not z47ca@label) (z2fad@syntax-violation '#f '"cannot export unbound identifier" z47c7@id) (void)) (cons z47c6@name z47ca@label))) (z2cd3@id->label z47c7@id))) z47c2@name* z47c3@id*))) (set! z2f99@make-export-env/macros (lambda (z47cc@lex* z47cd@loc* z47ce@r) ((lambda (z47d3@lookup) (begin (set! z47d3@lookup (lambda (z47f0@x) ((letrec ((z47f2@f (lambda (z47f4@x z47f5@lex* z47f6@loc*) (if (pair? z47f5@lex*) (if (eq? z47f4@x (car z47f5@lex*)) (car z47f6@loc*) (z47f2@f z47f4@x (cdr z47f5@lex*) (cdr z47f6@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) z47f2@f) z47f0@x z47cc@lex* z47cd@loc*))) ((letrec ((z47d4@f (lambda (z47d6@r z47d7@env z47d8@global* z47d9@macro*) (if (null? z47d6@r) (values z47d7@env z47d8@global* z47d9@macro*) ((lambda (z47de@x) ((lambda (z47e0@label z47e1@b) ((lambda (z47e4@t) (if (memv z47e4@t '(lexical)) ((lambda (z47e6@v) ((lambda (z47e8@loc z47e9@type) (z47d4@f (cdr z47d6@r) (cons (cons* z47e0@label z47e9@type z47e8@loc) z47d7@env) (cons (cons (z2e50@lexical-var z47e6@v) z47e8@loc) z47d8@global*) z47d9@macro*)) (z47d3@lookup (z2e50@lexical-var z47e6@v)) (if (z2e52@lexical-mutable? z47e6@v) 'mutable 'global))) (z2cdd@binding-value z47e1@b)) (if (memv z47e4@t '(local-macro)) ((lambda (z47ec@loc) (z47d4@f (cdr z47d6@r) (cons (cons* z47e0@label 'global-macro z47ec@loc) z47d7@env) z47d8@global* (cons (cons z47ec@loc (z2cdd@binding-value z47e1@b)) z47d9@macro*))) (gensym)) (if (memv z47e4@t '(local-macro!)) ((lambda (z47ee@loc) (z47d4@f (cdr z47d6@r) (cons (cons* z47e0@label 'global-macro! z47ee@loc) z47d7@env) z47d8@global* (cons (cons z47ee@loc (z2cdd@binding-value z47e1@b)) z47d9@macro*))) (gensym)) (if (memv z47e4@t '($rtd $module)) (z47d4@f (cdr z47d6@r) (cons z47de@x z47d7@env) z47d8@global* z47d9@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (z2cdb@binding-type z47e1@b) (z2cdd@binding-value z47e1@b))))))) (z2cdb@binding-type z47e1@b))) (car z47de@x) (cdr z47de@x))) (car z47d6@r)))))) z47d4@f) z47ce@r '() '() '()))) '#f))) (set! z2f9b@generate-temporaries (lambda (z47fa@ls) ((lambda (z47fc@t) ((lambda (z47fe@ls/false) (if z47fe@ls/false (apply (lambda (z4800@ls) (map (lambda (z4802@x) (z2c83@make-stx ((lambda (z4804@x) (if (or (symbol? z4804@x) (string? z4804@x)) (gensym z4804@x) (gensym 't))) (z2fb3@syntax->datum z4802@x)) z2c35@top-mark* '() '())) z4800@ls)) z47fe@ls/false) ((lambda (z4806@t) ((lambda (z4808@ls/false) (if z4808@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) z4808@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z4806@t))) (z2ec4@syntax-dispatch z4806@t '_))) z47fc@t))) (z2ec4@syntax-dispatch z47fc@t 'each-any))) z47fa@ls))) (set! z2f9d@free-identifier=? (lambda (z480a@x z480b@y) (if (z2cb9@id? z480a@x) (if (z2cb9@id? z480b@y) (z2cc1@free-id=? z480a@x z480b@y) (assertion-violation 'free-identifier=? '"not an identifier" z480b@y)) (assertion-violation 'free-identifier=? '"not an identifier" z480a@x)))) (set! z2f9f@bound-identifier=? (lambda (z480e@x z480f@y) (if (z2cb9@id? z480e@x) (if (z2cb9@id? z480f@y) (z2cbf@bound-id=? z480e@x z480f@y) (assertion-violation 'bound-identifier=? '"not an identifier" z480f@y)) (assertion-violation 'bound-identifier=? '"not an identifier" z480e@x)))) (set! z2fa1@make-source-condition (lambda (z4812@x) ((lambda (z481c@z4817 z481e@z4819 z4820@z4818 z4823@z4816 z4825@make-source-condition z4827@z4814 z4829@z4815 z482b@source-condition? z482d@source-filename z482f@source-character) (begin (set! z481c@z4817 (make-record-type-descriptor '&source-information z4c7a@z49c1@&condition-rtd 'z481a '#f '#f '#((immutable file-name) (immutable character)))) (set! z481e@z4819 '#f) (set! z4820@z4818 (make-record-constructor-descriptor z481c@z4817 z4c7b@z49c3@&condition-rcd z481e@z4819)) (set! z4823@z4816 (record-predicate z481c@z4817)) (set! z4825@make-source-condition (record-constructor z4820@z4818)) (set! z4827@z4814 (record-accessor z481c@z4817 '0)) (set! z4829@z4815 (record-accessor z481c@z4817 '1)) (set! z482b@source-condition? (condition-predicate z481c@z4817)) (set! z482d@source-filename (condition-accessor z481c@z4817 z4827@z4814)) (set! z482f@source-character (condition-accessor z481c@z4817 z4829@z4815)) (if (pair? z4812@x) (z4825@make-source-condition (car z4812@x) (cdr z4812@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! z2fa3@extract-position-condition (lambda (z4830@x) (z2fa1@make-source-condition (z2fa5@expression-position z4830@x)))) (set! z2fa5@expression-position (lambda (z4832@x) (and (z2c81@stx? z4832@x) ((lambda (z4834@x) (and (z2858@z2777@annotation? z4834@x) (z2859@z2779@annotation-source z4834@x))) (z2c85@stx-expr z4832@x))))) (set! z2fa7@assertion-error (lambda (z4836@expr z4837@pos) (raise (condition (z4caa@z4a85@make-assertion-violation) (z4cbc@z4ab7@make-who-condition 'assert) (z4c80@z4a18@make-message-condition '"assertion failed") (z4cb2@z4a9c@make-irritants-condition (list z4836@expr)) (z2fa1@make-source-condition z4837@pos))))) (set! z2fa9@syntax-error (lambda (z483a@x . z483c@args) (begin (if (not (for-all string? z483c@args)) (assertion-violation 'syntax-error '"invalid argument" z483c@args) (void)) (raise (condition (z4c80@z4a18@make-message-condition (if (null? z483c@args) '"invalid syntax" (apply string-append z483c@args))) (z4cde@z4b13@make-syntax-violation (z2fb3@syntax->datum z483a@x) '#f) (z2fa3@extract-position-condition z483a@x)))))) (set! z2fab@syntax-violation* (lambda (z483e@who z483f@msg z4840@form z4841@condition-object) (begin (if (not (string? z483f@msg)) (assertion-violation 'syntax-violation '"message is not a string" z483f@msg) (void)) ((lambda (z4846@who) (raise (condition (if z4846@who (z4cbc@z4ab7@make-who-condition z4846@who) (condition)) (z4c80@z4a18@make-message-condition z483f@msg) z4841@condition-object (z2fa3@extract-position-condition z4840@form)))) (if (or (string? z483e@who) (symbol? z483e@who)) z483e@who (if (not z483e@who) ((lambda (z4848@t) ((lambda (z484a@ls/false) (if (and z484a@ls/false (apply (lambda (z484c@id) (z2cb9@id? z484c@id)) z484a@ls/false)) (apply (lambda (z484e@id) (z2fb3@syntax->datum z484e@id)) z484a@ls/false) ((lambda (z4850@t) ((lambda (z4852@ls/false) (if (and z4852@ls/false (apply (lambda (z4854@id z4855@rest) (z2cb9@id? z4854@id)) z4852@ls/false)) (apply (lambda (z4858@id z4859@rest) (z2fb3@syntax->datum z4858@id)) z4852@ls/false) ((lambda (z485c@t) ((lambda (z485e@ls/false) (if z485e@ls/false (apply (lambda () '#f) z485e@ls/false) (z2fad@syntax-violation '#f '"invalid syntax" z485c@t))) (z2ec4@syntax-dispatch z485c@t '_))) z4850@t))) (z2ec4@syntax-dispatch z4850@t '(any . any)))) z4848@t))) (z2ec4@syntax-dispatch z4848@t 'any))) z4840@form) (assertion-violation 'syntax-violation '"invalid who argument" z483e@who))))))) (set! z2fad@syntax-violation (lambda z486e ((lambda (z486f) (if (= z486f '3) (apply (lambda (z4860@who z4861@msg z4862@form) (z2fad@syntax-violation z4860@who z4861@msg z4862@form '#f)) z486e) (if (= z486f '4) (apply (lambda (z4866@who z4867@msg z4868@form z4869@subform) (z2fab@syntax-violation* z4866@who z4867@msg z4868@form (z4cde@z4b13@make-syntax-violation (z2fb3@syntax->datum z4868@form) (z2fb3@syntax->datum z4869@subform)))) z486e) (error 'apply '"invalid arg count")))) (length z486e)))) (set! z2faf@identifier? (lambda (z4870@x) (z2cb9@id? z4870@x))) (set! z2fb1@datum->syntax (lambda (z4872@id z4873@datum) (if (z2cb9@id? z4872@id) (z2c97@datum->stx z4872@id z4873@datum) (assertion-violation 'datum->syntax '"not an identifier" z4872@id)))) (set! z2fb3@syntax->datum (lambda (z4876@x) (z2ccf@stx->datum z4876@x))) (set! z2fb5@compile-r6rs-top-level (lambda (z4878@x*) (call-with-values (lambda () (z2f3f@top-level-expander z4878@x*)) (lambda (z487e@z487b z487f@z487d) ((lambda (z4882@invoke-code z4883@lib*) (lambda () (begin (for-each z2add@z297e@invoke-library z4883@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (z28b7@z286f@expanded->core z4882@invoke-code)) (void)) (eval-core (z28b7@z286f@expanded->core z4882@invoke-code))))) z487f@z487d z487e@z487b))))) (set! z2fb7@pre-compile-r6rs-top-level (lambda (z4886@x*) (call-with-values (lambda () (z2f3f@top-level-expander z4886@x*)) (lambda (z488c@z4889 z488d@z488b) ((lambda (z4890@invoke-code z4891@lib*) (begin (for-each z2add@z297e@invoke-library z4891@lib*) (z2861@z2789@compile-core (z28b7@z286f@expanded->core z4890@invoke-code)))) z488d@z488b z488c@z4889))))) (set! z2fb9@interaction-environment ((lambda (z4894@the-env) (lambda () (or z4894@the-env ((lambda (z4896@lib z4897@rib) (begin ((lambda (z489a@subst) (begin (z2c5e@set-rib-sym*! z4897@rib (map car z489a@subst)) (z2c60@set-rib-mark**! z4897@rib (map (lambda (z489c@x) z2c35@top-mark*) z489a@subst)) (z2c62@set-rib-label*! z4897@rib (map cdr z489a@subst)))) (z2ab2@z2928@library-subst z4896@lib)) ((lambda (z489e@env) (begin (set! z4894@the-env z489e@env) z489e@env)) (z2f6b@make-interaction-env z4897@rib '() '())))) (z2ad6@z2970@find-library-by-name '(mosh interaction)) (z2c68@make-empty-rib))))) '#f)) (set! z2fbb@top-level-context (z2863@z278d@make-parameter '#f)) (begin (set! z49ac@z2fbb@top-level-context z2fbb@top-level-context) (set! z49ab@z2fb9@interaction-environment z2fb9@interaction-environment) (set! z49aa@z2fb7@pre-compile-r6rs-top-level z2fb7@pre-compile-r6rs-top-level) (set! z49a9@z2fb5@compile-r6rs-top-level z2fb5@compile-r6rs-top-level) (set! z49a8@z2fb3@syntax->datum z2fb3@syntax->datum) (set! z49a7@z2fb1@datum->syntax z2fb1@datum->syntax) (set! z49a6@z2faf@identifier? z2faf@identifier?) (set! z49a5@z2fad@syntax-violation z2fad@syntax-violation) (set! z49a4@z2fab@syntax-violation* z2fab@syntax-violation*) (set! z49a3@z2fa9@syntax-error z2fa9@syntax-error) (set! z49a2@z2fa7@assertion-error z2fa7@assertion-error) (set! z49a1@z2fa5@expression-position z2fa5@expression-position) (set! z49a0@z2fa3@extract-position-condition z2fa3@extract-position-condition) (set! z499f@z2fa1@make-source-condition z2fa1@make-source-condition) (set! z499e@z2f9f@bound-identifier=? z2f9f@bound-identifier=?) (set! z499d@z2f9d@free-identifier=? z2f9d@free-identifier=?) (set! z499c@z2f9b@generate-temporaries z2f9b@generate-temporaries) (set! z499b@z2f99@make-export-env/macros z2f99@make-export-env/macros) (set! z499a@z2f97@make-export-subst z2f97@make-export-subst) (set! z4999@z2f95@build-exports z2f95@build-exports) (set! z4998@z2f93@rev-map-append z2f93@rev-map-append) (set! z4997@z2f91@boot-library-expand z2f91@boot-library-expand) (set! z4996@z2f8f@library-expander z2f8f@library-expander) (set! z4995@z2f8d@eval z2f8d@eval) (set! z4994@z2f8b@expand z2f8b@expand) (set! z4993@z2f89@scheme-report-environment z2f89@scheme-report-environment) (set! z4992@z2f87@null-environment z2f87@null-environment) (set! z4991@z2f85@environment z2f85@environment) (set! z4990@z2f83@environment-symbols z2f83@environment-symbols) (set! z498f@z2f81@environment? z2f81@environment?) (set! z498e@z2f7f@parse-binding z2f7f@parse-binding) (set! z498d@z2f7d@environment-bindings z2f7d@environment-bindings) (set! z498c@z2f7b@interaction-environment-symbols z2f7b@interaction-environment-symbols) (set! z498b@z2f79@rp z2f79@rp) (set! z498a@z2f77@set-interaction-env-locs! z2f77@set-interaction-env-locs!) (set! z4989@z2f75@set-interaction-env-r! z2f75@set-interaction-env-r!) (set! z4988@z2f73@set-interaction-env-rib! z2f73@set-interaction-env-rib!) (set! z4987@z2f71@interaction-env-locs z2f71@interaction-env-locs) (set! z4986@z2f6f@interaction-env-r z2f6f@interaction-env-r) (set! z4985@z2f6d@interaction-env-rib z2f6d@interaction-env-rib) (set! z4984@z2f6b@make-interaction-env z2f6b@make-interaction-env) (set! z4983@z2f69@interaction-env? z2f69@interaction-env?) (set! z4982@z2f66@z2f5e z2f66@z2f5e) (set! z4981@z2f64@z2f5f z2f64@z2f5f) (set! z4980@z2f62@z2f5d z2f62@z2f5d) (set! z497f@z2f5c@rp z2f5c@rp) (set! z497e@z2f5a@set-env-itc! z2f5a@set-env-itc!) (set! z497d@z2f58@set-env-labels! z2f58@set-env-labels!) (set! z497c@z2f56@set-env-names! z2f56@set-env-names!) (set! z497b@z2f54@env-itc z2f54@env-itc) (set! z497a@z2f52@env-labels z2f52@env-labels) (set! z4979@z2f50@env-names z2f50@env-names) (set! z4978@z2f4e@make-env z2f4e@make-env) (set! z4977@z2f4c@env? z2f4c@env?) (set! z4976@z2f49@z2f41 z2f49@z2f41) (set! z4975@z2f47@z2f42 z2f47@z2f42) (set! z4974@z2f45@z2f40 z2f45@z2f40) (set! z4973@z2f3f@top-level-expander z2f3f@top-level-expander) (set! z4972@z2f3d@parse-top-level-program z2f3d@parse-top-level-program) (set! z4971@z2f3b@core-library-expander z2f3b@core-library-expander) (set! z4970@z2f39@library-body-expander z2f39@library-body-expander) (set! z496f@z2f37@chi-interaction-expr z2f37@chi-interaction-expr) (set! z496e@z2f35@chi-library-internal z2f35@chi-library-internal) (set! z496d@z2f33@imp-collector z2f33@imp-collector) (set! z496c@z2f31@vis-collector z2f31@vis-collector) (set! z496b@z2f2f@inv-collector z2f2f@inv-collector) (set! z496a@z2f2d@make-collector z2f2d@make-collector) (set! z4969@z2f2b@make-top-rib z2f2b@make-top-rib) (set! z4968@z2f29@parse-import-spec* z2f29@parse-import-spec*) (set! z4967@z2f27@parse-library z2f27@parse-library) (set! z4966@z2f25@parse-library-name z2f25@parse-library-name) (set! z4965@z2f23@parse-exports z2f23@parse-exports) (set! z4964@z2f21@expand-transformer z2f21@expand-transformer) (set! z4963@z2f1f@chi-body* z2f1f@chi-body*) (set! z4962@z2f1d@chi-internal-module z2f1d@chi-internal-module) (set! z4961@z2f1b@module-interface-exp-id* z2f1b@module-interface-exp-id*) (set! z4960@z2f19@set-module-interface-exp-lab-vec! z2f19@set-module-interface-exp-lab-vec!) (set! z495f@z2f17@set-module-interface-exp-id-vec! z2f17@set-module-interface-exp-id-vec!) (set! z495e@z2f15@set-module-interface-first-mark! z2f15@set-module-interface-first-mark!) (set! z495d@z2f13@module-interface-exp-lab-vec z2f13@module-interface-exp-lab-vec) (set! z495c@z2f11@module-interface-exp-id-vec z2f11@module-interface-exp-id-vec) (set! z495b@z2f0f@module-interface-first-mark z2f0f@module-interface-first-mark) (set! z495a@z2f0d@make-module-interface z2f0d@make-module-interface) (set! z4959@z2f0b@module-interface? z2f0b@module-interface?) (set! z4958@z2f08@z2f00 z2f08@z2f00) (set! z4957@z2f06@z2f01 z2f06@z2f01) (set! z4956@z2f04@z2eff z2f04@z2eff) (set! z4955@z2efe@parse-module z2efe@parse-module) (set! z4954@z2efc@chi-internal z2efc@chi-internal) (set! z4953@z2efa@find-dups z2efa@find-dups) (set! z4952@z2ef8@find-bound=? z2ef8@find-bound=?) (set! z4951@z2ef6@chi-rhs* z2ef6@chi-rhs*) (set! z4950@z2ef4@expand-interaction-rhs*/init* z2ef4@expand-interaction-rhs*/init*) (set! z494f@z2ef2@chi-rhs z2ef2@chi-rhs) (set! z494e@z2ef0@chi-defun z2ef0@chi-defun) (set! z494d@z2eee@chi-lambda-clause* z2eee@chi-lambda-clause*) (set! z494c@z2eec@chi-lambda-clause z2eec@chi-lambda-clause) (set! z494b@z2eea@verify-formals z2eea@verify-formals) (set! z494a@z2ee8@chi-set! z2ee8@chi-set!) (set! z4949@z2ee6@chi-expr z2ee6@chi-expr) (set! z4948@z2ee4@chi-application z2ee4@chi-application) (set! z4947@z2ee2@chi-expr* z2ee2@chi-expr*) (set! z4946@z2ee0@chi-global-macro z2ee0@chi-global-macro) (set! z4945@z2ede@chi-local-macro z2ede@chi-local-macro) (set! z4944@z2edc@chi-macro z2edc@chi-macro) (set! z4943@z2eda@do-macro-call z2eda@do-macro-call) (set! z4942@z2ed8@local-macro-transformer z2ed8@local-macro-transformer) (set! z4941@z2ed6@macro-transformer z2ed6@macro-transformer) (set! z4940@z2ed4@symbol-macro z2ed4@symbol-macro) (set! z493f@z2ed2@core-macro-transformer z2ed2@core-macro-transformer) (set! z493e@z2ed0@syntax-transformer z2ed0@syntax-transformer) (set! z493d@z2ece@ellipsis-map z2ece@ellipsis-map) (set! z493c@z2ecc@syntax-case-transformer z2ecc@syntax-case-transformer) (set! z493b@z2eca@verify-literals z2eca@verify-literals) (set! z493a@z2ec8@underscore? z2ec8@underscore?) (set! z4939@z2ec6@ellipsis? z2ec6@ellipsis?) (set! z4938@z2ec4@syntax-dispatch z2ec4@syntax-dispatch) (set! z4937@z2ec2@convert-pattern z2ec2@convert-pattern) (set! z4936@z2ec0@foreign-call-transformer z2ec0@foreign-call-transformer) (set! z4935@z2ebe@parameterize-macro z2ebe@parameterize-macro) (set! z4934@z2ebc@incorrect-usage-macro z2ebc@incorrect-usage-macro) (set! z4933@z2eba@define-condition-type-macro z2eba@define-condition-type-macro) (set! z4932@z2eb8@define-record-type-macro z2eb8@define-record-type-macro) (set! z4931@z2eb6@define-struct-macro z2eb6@define-struct-macro) (set! z4930@z2eb4@quasisyntax-macro z2eb4@quasisyntax-macro) (set! z492f@z2eb2@quasiquote-macro z2eb2@quasiquote-macro) (set! z492e@z2eb0@syntax-rules-macro z2eb0@syntax-rules-macro) (set! z492d@z2eae@include-into-macro z2eae@include-into-macro) (set! z492c@z2eac@include-macro z2eac@include-macro) (set! z492b@z2eaa@do-include z2eaa@do-include) (set! z492a@z2ea8@cond-macro z2ea8@cond-macro) (set! z4929@z2ea6@and-macro z2ea6@and-macro) (set! z4928@z2ea4@or-macro z2ea4@or-macro) (set! z4927@z2ea2@let*-macro z2ea2@let*-macro) (set! z4926@z2ea0@do-macro z2ea0@do-macro) (set! z4925@z2e9e@identifier-syntax-macro z2e9e@identifier-syntax-macro) (set! z4924@z2e9c@endianness-macro z2e9c@endianness-macro) (set! z4923@z2e9a@assert-macro z2e9a@assert-macro) (set! z4922@z2e98@delay-macro z2e98@delay-macro) (set! z4921@z2e96@time-macro z2e96@time-macro) (set! z4920@z2e94@define-enumeration-macro z2e94@define-enumeration-macro) (set! z491f@z2e92@guard-macro z2e92@guard-macro) (set! z491e@z2e90@trace-letrec-syntax-macro z2e90@trace-letrec-syntax-macro) (set! z491d@z2e8e@trace-let-syntax-macro z2e8e@trace-let-syntax-macro) (set! z491c@z2e8c@trace-let/rec-syntax z2e8c@trace-let/rec-syntax) (set! z491b@z2e8a@trace-define-syntax-macro z2e8a@trace-define-syntax-macro) (set! z491a@z2e88@trace-define-macro z2e88@trace-define-macro) (set! z4919@z2e86@trace-lambda-macro z2e86@trace-lambda-macro) (set! z4918@z2e84@let*-values-macro z2e84@let*-values-macro) (set! z4917@z2e82@let-values-macro z2e82@let-values-macro) (set! z4916@z2e80@let-macro z2e80@let-macro) (set! z4915@z2e7e@invalid-fmls-error z2e7e@invalid-fmls-error) (set! z4914@z2e7c@with-syntax-macro z2e7c@with-syntax-macro) (set! z4913@z2e7a@bless z2e7a@bless) (set! z4912@z2e78@lambda-transformer z2e78@lambda-transformer) (set! z4911@z2e76@case-lambda-transformer z2e76@case-lambda-transformer) (set! z4910@z2e74@quote-transformer z2e74@quote-transformer) (set! z490f@z2e72@case-macro z2e72@case-macro) (set! z490e@z2e70@or-transformer z2e70@or-transformer) (set! z490d@z2e6e@and-transformer z2e6e@and-transformer) (set! z490c@z2e6c@if-transformer z2e6c@if-transformer) (set! z490b@z2e6a@unless-macro z2e6a@unless-macro) (set! z490a@z2e68@when-macro z2e68@when-macro) (set! z4909@z2e66@record-constructor-descriptor-transformer z2e66@record-constructor-descriptor-transformer) (set! z4908@z2e64@record-type-descriptor-transformer z2e64@record-type-descriptor-transformer) (set! z4907@z2e62@type-descriptor-transformer z2e62@type-descriptor-transformer) (set! z4906@z2e60@fluid-let-syntax-transformer z2e60@fluid-let-syntax-transformer) (set! z4905@z2e5e@letrec*-transformer z2e5e@letrec*-transformer) (set! z4904@z2e5c@letrec-transformer z2e5c@letrec-transformer) (set! z4903@z2e5a@letrec-helper z2e5a@letrec-helper) (set! z4902@z2e58@add-lexicals z2e58@add-lexicals) (set! z4901@z2e56@add-lexical z2e56@add-lexical) (set! z4900@z2e54@set-lexical-mutable! z2e54@set-lexical-mutable!) (set! z48ff@z2e52@lexical-mutable? z2e52@lexical-mutable?) (set! z48fe@z2e50@lexical-var z2e50@lexical-var) (set! z48fd@z2e4e@scheme-stx z2e4e@scheme-stx) (set! z48fc@z2e4c@scheme-stx-hashtable z2e4c@scheme-stx-hashtable) (set! z48fb@z2e4a@parse-define-syntax z2e4a@parse-define-syntax) (set! z48fa@z2e48@parse-define z2e48@parse-define) (set! z48f9@z2cf7@make-eval-transformer z2cf7@make-eval-transformer) (set! z48f8@z2cf5@variable-transformer-procedure z2cf5@variable-transformer-procedure) (set! z48f7@z2cf3@variable-transformer? z2cf3@variable-transformer?) (set! z48f6@z2cf1@make-variable-transformer z2cf1@make-variable-transformer) (set! z48f5@z2cef@sanitize-binding z2cef@sanitize-binding) (set! z48f4@z2ce1@syntax-type z2ce1@syntax-type) (set! z48f3@z2cdf@raise-unbound-error z2cdf@raise-unbound-error) (set! z48f2@z2cdd@binding-value z2cdd@binding-value) (set! z48f1@z2cdb@binding-type z2cdb@binding-type) (set! z48f0@z2cd9@make-binding z2cd9@make-binding) (set! z48ef@z2cd7@label->binding z2cd7@label->binding) (set! z48ee@z2cd5@id->real-label z2cd5@id->real-label) (set! z48ed@z2cd3@id->label z2cd3@id->label) (set! z48ec@z2cd1@same-marks*? z2cd1@same-marks*?) (set! z48eb@z2ccf@stx->datum z2ccf@stx->datum) (set! z48ea@z2ccd@strip z2ccd@strip) (set! z48e9@z2ccb@strip-annotations z2ccb@strip-annotations) (set! z48e8@z2cc9@self-evaluating? z2cc9@self-evaluating?) (set! z48e7@z2cc7@bound-id-member? z2cc7@bound-id-member?) (set! z48e6@z2cc5@distinct-bound-ids? z2cc5@distinct-bound-ids?) (set! z48e5@z2cc3@valid-bound-ids? z2cc3@valid-bound-ids?) (set! z48e4@z2cc1@free-id=? z2cc1@free-id=?) (set! z48e3@z2cbf@bound-id=? z2cbf@bound-id=?) (set! z48e2@z2cbd@same-marks? z2cbd@same-marks?) (set! z48e1@z2cbb@id->sym z2cbb@id->sym) (set! z48e0@z2cb9@id? z2cb9@id?) (set! z48df@z2cb7@syntax->list z2cb7@syntax->list) (set! z48de@z2cb5@syntax-cdr z2cb5@syntax-cdr) (set! z48dd@z2cb3@syntax-car z2cb3@syntax-car) (set! z48dc@z2cb1@syntax-list? z2cb1@syntax-list?) (set! z48db@z2caf@syntax-null? z2caf@syntax-null?) (set! z48da@z2cad@syntax-vector? z2cad@syntax-vector?) (set! z48d9@z2cab@syntax-pair? z2cab@syntax-pair?) (set! z48d8@z2ca9@syntax-vector->list z2ca9@syntax-vector->list) (set! z48d7@z2ca7@syntax-kind? z2ca7@syntax-kind?) (set! z48d6@z2ca5@add-subst z2ca5@add-subst) (set! z48d5@z2ca3@add-mark z2ca3@add-mark) (set! z48d4@z2ca1@mkstx z2ca1@mkstx) (set! z48d3@z2c9f@join-wraps z2c9f@join-wraps) (set! z48d2@z2c9d@anti-mark? z2c9d@anti-mark?) (set! z48d1@z2c9b@anti-mark z2c9b@anti-mark) (set! z48d0@z2c99@gen-mark z2c99@gen-mark) (set! z48cf@z2c97@datum->stx z2c97@datum->stx) (set! z48ce@z2c95@rp z2c95@rp) (set! z48cd@z2c93@set-stx-ae*! z2c93@set-stx-ae*!) (set! z48cc@z2c91@set-stx-subst*! z2c91@set-stx-subst*!) (set! z48cb@z2c8f@set-stx-mark*! z2c8f@set-stx-mark*!) (set! z48ca@z2c8d@set-stx-expr! z2c8d@set-stx-expr!) (set! z48c9@z2c8b@stx-ae* z2c8b@stx-ae*) (set! z48c8@z2c89@stx-subst* z2c89@stx-subst*) (set! z48c7@z2c87@stx-mark* z2c87@stx-mark*) (set! z48c6@z2c85@stx-expr z2c85@stx-expr) (set! z48c5@z2c83@make-stx z2c83@make-stx) (set! z48c4@z2c81@stx? z2c81@stx?) (set! z48c3@z2c7e@z2c76 z2c7e@z2c76) (set! z48c2@z2c7c@z2c77 z2c7c@z2c77) (set! z48c1@z2c7a@z2c75 z2c7a@z2c75) (set! z48c0@z2c74@make-full-rib z2c74@make-full-rib) (set! z48bf@z2c72@unseal-rib! z2c72@unseal-rib!) (set! z48be@z2c70@seal-rib! z2c70@seal-rib!) (set! z48bd@z2c6e@make-rib-map z2c6e@make-rib-map) (set! z48bc@z2c6c@extend-rib/nc! z2c6c@extend-rib/nc!) (set! z48bb@z2c6a@extend-rib! z2c6a@extend-rib!) (set! z48ba@z2c68@make-empty-rib z2c68@make-empty-rib) (set! z48b9@z2c66@set-rib-cache! z2c66@set-rib-cache!) (set! z48b8@z2c64@set-rib-sealed/freq! z2c64@set-rib-sealed/freq!) (set! z48b7@z2c62@set-rib-label*! z2c62@set-rib-label*!) (set! z48b6@z2c60@set-rib-mark**! z2c60@set-rib-mark**!) (set! z48b5@z2c5e@set-rib-sym*! z2c5e@set-rib-sym*!) (set! z48b4@z2c5c@rib-cache z2c5c@rib-cache) (set! z48b3@z2c5a@rib-sealed/freq z2c5a@rib-sealed/freq) (set! z48b2@z2c58@rib-label* z2c58@rib-label*) (set! z48b1@z2c56@rib-mark** z2c56@rib-mark**) (set! z48b0@z2c54@rib-sym* z2c54@rib-sym*) (set! z48af@z2c52@make-rib z2c52@make-rib) (set! z48ae@z2c50@rib? z2c50@rib?) (set! z48ad@z2c4d@z2c45 z2c4d@z2c45) (set! z48ac@z2c4b@z2c46 z2c4b@z2c46) (set! z48ab@z2c49@z2c44 z2c49@z2c44) (set! z48aa@z2c43@gen-define-label z2c43@gen-define-label) (set! z48a9@z2c41@gen-define-label+loc z2c41@gen-define-label+loc) (set! z48a8@z2c3f@gen-top-level-label z2c3f@gen-top-level-label) (set! z48a7@z2c3d@gen-label z2c3d@gen-label) (set! z48a6@z2c3b@gen-global z2c3b@gen-global) (set! z48a5@z2c39@gen-lexical z2c39@gen-lexical) (set! z48a4@z2c37@top-marked? z2c37@top-marked?) (set! z48a3@z2c35@top-mark* z2c35@top-mark*) (set! z48a2@z2c30@set-union z2c30@set-union) (set! z48a1@z2c2e@set-cons z2c2e@set-cons) (set! z48a0@z2c2c@file-options-macro z2c2c@file-options-macro) (z2ad3@z296a@current-library-expander z2f8f@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (z49b6@z49b1 z49b8@z49b3 z49ba@z49b2 z49bd@&condition? z49bf@make-&condition z49c1@&condition-rtd z49c3@&condition-rcd z4a0f@z4a0a z4a11@z4a0c z4a13@z4a0b z4a16@p? z4a18@make-message-condition z4a1a@z4a09 z4a1c@message-condition? z4a1e@condition-message z4a20@&message-rtd z4a22@&message-rcd z4a28@z4a23 z4a2a@z4a25 z4a2c@z4a24 z4a2f@p? z4a31@make-warning z4a33@warning? z4a35@&warning-rtd z4a37@&warning-rcd z4a3d@z4a38 z4a3f@z4a3a z4a41@z4a39 z4a44@p? z4a46@make-serious-condition z4a48@serious-condition? z4a4a@&serious-rtd z4a4c@&serious-rcd z4a52@z4a4d z4a54@z4a4f z4a56@z4a4e z4a59@p? z4a5b@make-error z4a5d@error? z4a5f@&error-rtd z4a61@&error-rcd z4a67@z4a62 z4a69@z4a64 z4a6b@z4a63 z4a6e@p? z4a70@make-violation z4a72@violation? z4a74@&violation-rtd z4a76@&violation-rcd z4a7c@z4a77 z4a7e@z4a79 z4a80@z4a78 z4a83@p? z4a85@make-assertion-violation z4a87@assertion-violation? z4a89@&assertion-rtd z4a8b@&assertion-rcd z4a93@z4a8e z4a95@z4a90 z4a97@z4a8f z4a9a@p? z4a9c@make-irritants-condition z4a9e@z4a8d z4aa0@irritants-condition? z4aa2@condition-irritants z4aa4@&irritants-rtd z4aa6@&irritants-rcd z4aae@z4aa9 z4ab0@z4aab z4ab2@z4aaa z4ab5@p? z4ab7@make-who-condition z4ab9@z4aa8 z4abb@who-condition? z4abd@condition-who z4abf@&who-rtd z4ac1@&who-rcd z4ac7@z4ac2 z4ac9@z4ac4 z4acb@z4ac3 z4ace@p? z4ad0@make-non-continuable-violation z4ad2@non-continuable-violation? z4ad4@&non-continuable-rtd z4ad6@&non-continuable-rcd z4adc@z4ad7 z4ade@z4ad9 z4ae0@z4ad8 z4ae3@p? z4ae5@make-implementation-restriction-violation z4ae7@implementation-restriction-violation? z4ae9@&implementation-restriction-rtd z4aeb@&implementation-restriction-rcd z4af1@z4aec z4af3@z4aee z4af5@z4aed z4af8@p? z4afa@make-lexical-violation z4afc@lexical-violation? z4afe@&lexical-rtd z4b00@&lexical-rcd z4b0a@z4b05 z4b0c@z4b07 z4b0e@z4b06 z4b11@p? z4b13@make-syntax-violation z4b15@z4b02 z4b17@z4b04 z4b19@syntax-violation? z4b1b@syntax-violation-form z4b1d@syntax-violation-subform z4b1f@&syntax-rtd z4b21@&syntax-rcd z4b27@z4b22 z4b29@z4b24 z4b2b@z4b23 z4b2e@p? z4b30@make-undefined-violation z4b32@undefined-violation? z4b34@&undefined-rtd z4b36@&undefined-rcd z4b3c@z4b37 z4b3e@z4b39 z4b40@z4b38 z4b43@p? z4b45@make-i/o-error z4b47@i/o-error? z4b49@&i/o-rtd z4b4b@&i/o-rcd z4b51@z4b4c z4b53@z4b4e z4b55@z4b4d z4b58@p? z4b5a@make-i/o-read-error z4b5c@i/o-read-error? z4b5e@&i/o-read-rtd z4b60@&i/o-read-rcd z4b66@z4b61 z4b68@z4b63 z4b6a@z4b62 z4b6d@p? z4b6f@make-i/o-write-error z4b71@i/o-write-error? z4b73@&i/o-write-rtd z4b75@&i/o-write-rcd z4b7d@z4b78 z4b7f@z4b7a z4b81@z4b79 z4b84@p? z4b86@make-i/o-invalid-position-error z4b88@z4b77 z4b8a@i/o-invalid-position-error? z4b8c@i/o-error-position z4b8e@&i/o-invalid-position-rtd z4b90@&i/o-invalid-position-rcd z4b98@z4b93 z4b9a@z4b95 z4b9c@z4b94 z4b9f@p? z4ba1@make-i/o-filename-error z4ba3@z4b92 z4ba5@i/o-filename-error? z4ba7@i/o-error-filename z4ba9@&i/o-filename-rtd z4bab@&i/o-filename-rcd z4bb1@z4bac z4bb3@z4bae z4bb5@z4bad z4bb8@p? z4bba@make-i/o-file-protection-error z4bbc@i/o-file-protection-error? z4bbe@&i/o-file-protection-rtd z4bc0@&i/o-file-protection-rcd z4bc6@z4bc1 z4bc8@z4bc3 z4bca@z4bc2 z4bcd@p? z4bcf@make-i/o-file-is-read-only-error z4bd1@i/o-file-is-read-only-error? z4bd3@&i/o-file-is-read-only-rtd z4bd5@&i/o-file-is-read-only-rcd z4bdb@z4bd6 z4bdd@z4bd8 z4bdf@z4bd7 z4be2@p? z4be4@make-i/o-file-already-exists-error z4be6@i/o-file-already-exists-error? z4be8@&i/o-file-already-exists-rtd z4bea@&i/o-file-already-exists-rcd z4bf0@z4beb z4bf2@z4bed z4bf4@z4bec z4bf7@p? z4bf9@make-i/o-file-does-not-exist-error z4bfb@i/o-file-does-not-exist-error? z4bfd@&i/o-file-does-not-exist-rtd z4bff@&i/o-file-does-not-exist-rcd z4c07@z4c02 z4c09@z4c04 z4c0b@z4c03 z4c0e@p? z4c10@make-i/o-port-error z4c12@z4c01 z4c14@i/o-port-error? z4c16@i/o-error-port z4c18@&i/o-port-rtd z4c1a@&i/o-port-rcd z4c20@z4c1b z4c22@z4c1d z4c24@z4c1c z4c27@p? z4c29@make-i/o-decoding-error z4c2b@i/o-decoding-error? z4c2d@&i/o-decoding-rtd z4c2f@&i/o-decoding-rcd z4c37@z4c32 z4c39@z4c34 z4c3b@z4c33 z4c3e@p? z4c40@make-i/o-encoding-error z4c42@z4c31 z4c44@i/o-encoding-error? z4c46@i/o-encoding-error-char z4c48@&i/o-encoding-rtd z4c4a@&i/o-encoding-rcd z4c50@z4c4b z4c52@z4c4d z4c54@z4c4c z4c57@p? z4c59@make-no-infinities-violation z4c5b@no-infinities-violation? z4c5d@&no-infinities-rtd z4c5f@&no-infinities-rcd z4c65@z4c60 z4c67@z4c62 z4c69@z4c61 z4c6c@p? z4c6e@make-no-nans-violation z4c70@no-nans-violation? z4c72@&no-nans-rtd z4c74@&no-nans-rcd) (begin (set! z49b6@z49b1 (make-record-type-descriptor '&condition '#f 'z49b4 '#f '#f '#())) (set! z49b8@z49b3 '#f) (set! z49ba@z49b2 (make-record-constructor-descriptor z49b6@z49b1 '#f z49b8@z49b3)) (set! z49bd@&condition? (record-predicate z49b6@z49b1)) (set! z49bf@make-&condition (record-constructor z49ba@z49b2)) (set! z49c1@&condition-rtd z49b6@z49b1) (set! z49c3@&condition-rcd z49ba@z49b2) (set! z4a0f@z4a0a (make-record-type-descriptor '&message z49b6@z49b1 'z4a0d '#f '#f '#((immutable message)))) (set! z4a11@z4a0c '#f) (set! z4a13@z4a0b (make-record-constructor-descriptor z4a0f@z4a0a z49ba@z49b2 z4a11@z4a0c)) (set! z4a16@p? (record-predicate z4a0f@z4a0a)) (set! z4a18@make-message-condition (record-constructor z4a13@z4a0b)) (set! z4a1a@z4a09 (record-accessor z4a0f@z4a0a '0)) (set! z4a1c@message-condition? (condition-predicate z4a0f@z4a0a)) (set! z4a1e@condition-message (condition-accessor z4a0f@z4a0a z4a1a@z4a09)) (set! z4a20@&message-rtd z4a0f@z4a0a) (set! z4a22@&message-rcd z4a13@z4a0b) (set! z4a28@z4a23 (make-record-type-descriptor '&warning z49b6@z49b1 'z4a26 '#f '#f '#())) (set! z4a2a@z4a25 '#f) (set! z4a2c@z4a24 (make-record-constructor-descriptor z4a28@z4a23 z49ba@z49b2 z4a2a@z4a25)) (set! z4a2f@p? (record-predicate z4a28@z4a23)) (set! z4a31@make-warning (record-constructor z4a2c@z4a24)) (set! z4a33@warning? (condition-predicate z4a28@z4a23)) (set! z4a35@&warning-rtd z4a28@z4a23) (set! z4a37@&warning-rcd z4a2c@z4a24) (set! z4a3d@z4a38 (make-record-type-descriptor '&serious z49b6@z49b1 'z4a3b '#f '#f '#())) (set! z4a3f@z4a3a '#f) (set! z4a41@z4a39 (make-record-constructor-descriptor z4a3d@z4a38 z49ba@z49b2 z4a3f@z4a3a)) (set! z4a44@p? (record-predicate z4a3d@z4a38)) (set! z4a46@make-serious-condition (record-constructor z4a41@z4a39)) (set! z4a48@serious-condition? (condition-predicate z4a3d@z4a38)) (set! z4a4a@&serious-rtd z4a3d@z4a38) (set! z4a4c@&serious-rcd z4a41@z4a39) (set! z4a52@z4a4d (make-record-type-descriptor '&error z4a3d@z4a38 'z4a50 '#f '#f '#())) (set! z4a54@z4a4f '#f) (set! z4a56@z4a4e (make-record-constructor-descriptor z4a52@z4a4d z4a41@z4a39 z4a54@z4a4f)) (set! z4a59@p? (record-predicate z4a52@z4a4d)) (set! z4a5b@make-error (record-constructor z4a56@z4a4e)) (set! z4a5d@error? (condition-predicate z4a52@z4a4d)) (set! z4a5f@&error-rtd z4a52@z4a4d) (set! z4a61@&error-rcd z4a56@z4a4e) (set! z4a67@z4a62 (make-record-type-descriptor '&violation z4a3d@z4a38 'z4a65 '#f '#f '#())) (set! z4a69@z4a64 '#f) (set! z4a6b@z4a63 (make-record-constructor-descriptor z4a67@z4a62 z4a41@z4a39 z4a69@z4a64)) (set! z4a6e@p? (record-predicate z4a67@z4a62)) (set! z4a70@make-violation (record-constructor z4a6b@z4a63)) (set! z4a72@violation? (condition-predicate z4a67@z4a62)) (set! z4a74@&violation-rtd z4a67@z4a62) (set! z4a76@&violation-rcd z4a6b@z4a63) (set! z4a7c@z4a77 (make-record-type-descriptor '&assertion z4a67@z4a62 'z4a7a '#f '#f '#())) (set! z4a7e@z4a79 '#f) (set! z4a80@z4a78 (make-record-constructor-descriptor z4a7c@z4a77 z4a6b@z4a63 z4a7e@z4a79)) (set! z4a83@p? (record-predicate z4a7c@z4a77)) (set! z4a85@make-assertion-violation (record-constructor z4a80@z4a78)) (set! z4a87@assertion-violation? (condition-predicate z4a7c@z4a77)) (set! z4a89@&assertion-rtd z4a7c@z4a77) (set! z4a8b@&assertion-rcd z4a80@z4a78) (set! z4a93@z4a8e (make-record-type-descriptor '&irritants z49b6@z49b1 'z4a91 '#f '#f '#((immutable irritants)))) (set! z4a95@z4a90 '#f) (set! z4a97@z4a8f (make-record-constructor-descriptor z4a93@z4a8e z49ba@z49b2 z4a95@z4a90)) (set! z4a9a@p? (record-predicate z4a93@z4a8e)) (set! z4a9c@make-irritants-condition (record-constructor z4a97@z4a8f)) (set! z4a9e@z4a8d (record-accessor z4a93@z4a8e '0)) (set! z4aa0@irritants-condition? (condition-predicate z4a93@z4a8e)) (set! z4aa2@condition-irritants (condition-accessor z4a93@z4a8e z4a9e@z4a8d)) (set! z4aa4@&irritants-rtd z4a93@z4a8e) (set! z4aa6@&irritants-rcd z4a97@z4a8f) (set! z4aae@z4aa9 (make-record-type-descriptor '&who z49b6@z49b1 'z4aac '#f '#f '#((immutable who)))) (set! z4ab0@z4aab '#f) (set! z4ab2@z4aaa (make-record-constructor-descriptor z4aae@z4aa9 z49ba@z49b2 z4ab0@z4aab)) (set! z4ab5@p? (record-predicate z4aae@z4aa9)) (set! z4ab7@make-who-condition (record-constructor z4ab2@z4aaa)) (set! z4ab9@z4aa8 (record-accessor z4aae@z4aa9 '0)) (set! z4abb@who-condition? (condition-predicate z4aae@z4aa9)) (set! z4abd@condition-who (condition-accessor z4aae@z4aa9 z4ab9@z4aa8)) (set! z4abf@&who-rtd z4aae@z4aa9) (set! z4ac1@&who-rcd z4ab2@z4aaa) (set! z4ac7@z4ac2 (make-record-type-descriptor '&non-continuable z4a67@z4a62 'z4ac5 '#f '#f '#())) (set! z4ac9@z4ac4 '#f) (set! z4acb@z4ac3 (make-record-constructor-descriptor z4ac7@z4ac2 z4a6b@z4a63 z4ac9@z4ac4)) (set! z4ace@p? (record-predicate z4ac7@z4ac2)) (set! z4ad0@make-non-continuable-violation (record-constructor z4acb@z4ac3)) (set! z4ad2@non-continuable-violation? (condition-predicate z4ac7@z4ac2)) (set! z4ad4@&non-continuable-rtd z4ac7@z4ac2) (set! z4ad6@&non-continuable-rcd z4acb@z4ac3) (set! z4adc@z4ad7 (make-record-type-descriptor '&implementation-restriction z4a67@z4a62 'z4ada '#f '#f '#())) (set! z4ade@z4ad9 '#f) (set! z4ae0@z4ad8 (make-record-constructor-descriptor z4adc@z4ad7 z4a6b@z4a63 z4ade@z4ad9)) (set! z4ae3@p? (record-predicate z4adc@z4ad7)) (set! z4ae5@make-implementation-restriction-violation (record-constructor z4ae0@z4ad8)) (set! z4ae7@implementation-restriction-violation? (condition-predicate z4adc@z4ad7)) (set! z4ae9@&implementation-restriction-rtd z4adc@z4ad7) (set! z4aeb@&implementation-restriction-rcd z4ae0@z4ad8) (set! z4af1@z4aec (make-record-type-descriptor '&lexical z4a67@z4a62 'z4aef '#f '#f '#())) (set! z4af3@z4aee '#f) (set! z4af5@z4aed (make-record-constructor-descriptor z4af1@z4aec z4a6b@z4a63 z4af3@z4aee)) (set! z4af8@p? (record-predicate z4af1@z4aec)) (set! z4afa@make-lexical-violation (record-constructor z4af5@z4aed)) (set! z4afc@lexical-violation? (condition-predicate z4af1@z4aec)) (set! z4afe@&lexical-rtd z4af1@z4aec) (set! z4b00@&lexical-rcd z4af5@z4aed) (set! z4b0a@z4b05 (make-record-type-descriptor '&syntax z4a67@z4a62 'z4b08 '#f '#f '#((immutable form) (immutable subform)))) (set! z4b0c@z4b07 '#f) (set! z4b0e@z4b06 (make-record-constructor-descriptor z4b0a@z4b05 z4a6b@z4a63 z4b0c@z4b07)) (set! z4b11@p? (record-predicate z4b0a@z4b05)) (set! z4b13@make-syntax-violation (record-constructor z4b0e@z4b06)) (set! z4b15@z4b02 (record-accessor z4b0a@z4b05 '0)) (set! z4b17@z4b04 (record-accessor z4b0a@z4b05 '1)) (set! z4b19@syntax-violation? (condition-predicate z4b0a@z4b05)) (set! z4b1b@syntax-violation-form (condition-accessor z4b0a@z4b05 z4b15@z4b02)) (set! z4b1d@syntax-violation-subform (condition-accessor z4b0a@z4b05 z4b17@z4b04)) (set! z4b1f@&syntax-rtd z4b0a@z4b05) (set! z4b21@&syntax-rcd z4b0e@z4b06) (set! z4b27@z4b22 (make-record-type-descriptor '&undefined z4a67@z4a62 'z4b25 '#f '#f '#())) (set! z4b29@z4b24 '#f) (set! z4b2b@z4b23 (make-record-constructor-descriptor z4b27@z4b22 z4a6b@z4a63 z4b29@z4b24)) (set! z4b2e@p? (record-predicate z4b27@z4b22)) (set! z4b30@make-undefined-violation (record-constructor z4b2b@z4b23)) (set! z4b32@undefined-violation? (condition-predicate z4b27@z4b22)) (set! z4b34@&undefined-rtd z4b27@z4b22) (set! z4b36@&undefined-rcd z4b2b@z4b23) (set! z4b3c@z4b37 (make-record-type-descriptor '&i/o z4a52@z4a4d 'z4b3a '#f '#f '#())) (set! z4b3e@z4b39 '#f) (set! z4b40@z4b38 (make-record-constructor-descriptor z4b3c@z4b37 z4a56@z4a4e z4b3e@z4b39)) (set! z4b43@p? (record-predicate z4b3c@z4b37)) (set! z4b45@make-i/o-error (record-constructor z4b40@z4b38)) (set! z4b47@i/o-error? (condition-predicate z4b3c@z4b37)) (set! z4b49@&i/o-rtd z4b3c@z4b37) (set! z4b4b@&i/o-rcd z4b40@z4b38) (set! z4b51@z4b4c (make-record-type-descriptor '&i/o-read z4b3c@z4b37 'z4b4f '#f '#f '#())) (set! z4b53@z4b4e '#f) (set! z4b55@z4b4d (make-record-constructor-descriptor z4b51@z4b4c z4b40@z4b38 z4b53@z4b4e)) (set! z4b58@p? (record-predicate z4b51@z4b4c)) (set! z4b5a@make-i/o-read-error (record-constructor z4b55@z4b4d)) (set! z4b5c@i/o-read-error? (condition-predicate z4b51@z4b4c)) (set! z4b5e@&i/o-read-rtd z4b51@z4b4c) (set! z4b60@&i/o-read-rcd z4b55@z4b4d) (set! z4b66@z4b61 (make-record-type-descriptor '&i/o-write z4b3c@z4b37 'z4b64 '#f '#f '#())) (set! z4b68@z4b63 '#f) (set! z4b6a@z4b62 (make-record-constructor-descriptor z4b66@z4b61 z4b40@z4b38 z4b68@z4b63)) (set! z4b6d@p? (record-predicate z4b66@z4b61)) (set! z4b6f@make-i/o-write-error (record-constructor z4b6a@z4b62)) (set! z4b71@i/o-write-error? (condition-predicate z4b66@z4b61)) (set! z4b73@&i/o-write-rtd z4b66@z4b61) (set! z4b75@&i/o-write-rcd z4b6a@z4b62) (set! z4b7d@z4b78 (make-record-type-descriptor '&i/o-invalid-position z4b3c@z4b37 'z4b7b '#f '#f '#((immutable position)))) (set! z4b7f@z4b7a '#f) (set! z4b81@z4b79 (make-record-constructor-descriptor z4b7d@z4b78 z4b40@z4b38 z4b7f@z4b7a)) (set! z4b84@p? (record-predicate z4b7d@z4b78)) (set! z4b86@make-i/o-invalid-position-error (record-constructor z4b81@z4b79)) (set! z4b88@z4b77 (record-accessor z4b7d@z4b78 '0)) (set! z4b8a@i/o-invalid-position-error? (condition-predicate z4b7d@z4b78)) (set! z4b8c@i/o-error-position (condition-accessor z4b7d@z4b78 z4b88@z4b77)) (set! z4b8e@&i/o-invalid-position-rtd z4b7d@z4b78) (set! z4b90@&i/o-invalid-position-rcd z4b81@z4b79) (set! z4b98@z4b93 (make-record-type-descriptor '&i/o-filename z4b3c@z4b37 'z4b96 '#f '#f '#((immutable filename)))) (set! z4b9a@z4b95 '#f) (set! z4b9c@z4b94 (make-record-constructor-descriptor z4b98@z4b93 z4b40@z4b38 z4b9a@z4b95)) (set! z4b9f@p? (record-predicate z4b98@z4b93)) (set! z4ba1@make-i/o-filename-error (record-constructor z4b9c@z4b94)) (set! z4ba3@z4b92 (record-accessor z4b98@z4b93 '0)) (set! z4ba5@i/o-filename-error? (condition-predicate z4b98@z4b93)) (set! z4ba7@i/o-error-filename (condition-accessor z4b98@z4b93 z4ba3@z4b92)) (set! z4ba9@&i/o-filename-rtd z4b98@z4b93) (set! z4bab@&i/o-filename-rcd z4b9c@z4b94) (set! z4bb1@z4bac (make-record-type-descriptor '&i/o-file-protection z4b98@z4b93 'z4baf '#f '#f '#())) (set! z4bb3@z4bae '#f) (set! z4bb5@z4bad (make-record-constructor-descriptor z4bb1@z4bac z4b9c@z4b94 z4bb3@z4bae)) (set! z4bb8@p? (record-predicate z4bb1@z4bac)) (set! z4bba@make-i/o-file-protection-error (record-constructor z4bb5@z4bad)) (set! z4bbc@i/o-file-protection-error? (condition-predicate z4bb1@z4bac)) (set! z4bbe@&i/o-file-protection-rtd z4bb1@z4bac) (set! z4bc0@&i/o-file-protection-rcd z4bb5@z4bad) (set! z4bc6@z4bc1 (make-record-type-descriptor '&i/o-file-is-read-only z4bb1@z4bac 'z4bc4 '#f '#f '#())) (set! z4bc8@z4bc3 '#f) (set! z4bca@z4bc2 (make-record-constructor-descriptor z4bc6@z4bc1 z4bb5@z4bad z4bc8@z4bc3)) (set! z4bcd@p? (record-predicate z4bc6@z4bc1)) (set! z4bcf@make-i/o-file-is-read-only-error (record-constructor z4bca@z4bc2)) (set! z4bd1@i/o-file-is-read-only-error? (condition-predicate z4bc6@z4bc1)) (set! z4bd3@&i/o-file-is-read-only-rtd z4bc6@z4bc1) (set! z4bd5@&i/o-file-is-read-only-rcd z4bca@z4bc2) (set! z4bdb@z4bd6 (make-record-type-descriptor '&i/o-file-already-exists z4b98@z4b93 'z4bd9 '#f '#f '#())) (set! z4bdd@z4bd8 '#f) (set! z4bdf@z4bd7 (make-record-constructor-descriptor z4bdb@z4bd6 z4b9c@z4b94 z4bdd@z4bd8)) (set! z4be2@p? (record-predicate z4bdb@z4bd6)) (set! z4be4@make-i/o-file-already-exists-error (record-constructor z4bdf@z4bd7)) (set! z4be6@i/o-file-already-exists-error? (condition-predicate z4bdb@z4bd6)) (set! z4be8@&i/o-file-already-exists-rtd z4bdb@z4bd6) (set! z4bea@&i/o-file-already-exists-rcd z4bdf@z4bd7) (set! z4bf0@z4beb (make-record-type-descriptor '&i/o-file-does-not-exist z4b98@z4b93 'z4bee '#f '#f '#())) (set! z4bf2@z4bed '#f) (set! z4bf4@z4bec (make-record-constructor-descriptor z4bf0@z4beb z4b9c@z4b94 z4bf2@z4bed)) (set! z4bf7@p? (record-predicate z4bf0@z4beb)) (set! z4bf9@make-i/o-file-does-not-exist-error (record-constructor z4bf4@z4bec)) (set! z4bfb@i/o-file-does-not-exist-error? (condition-predicate z4bf0@z4beb)) (set! z4bfd@&i/o-file-does-not-exist-rtd z4bf0@z4beb) (set! z4bff@&i/o-file-does-not-exist-rcd z4bf4@z4bec) (set! z4c07@z4c02 (make-record-type-descriptor '&i/o-port z4b3c@z4b37 'z4c05 '#f '#f '#((immutable port)))) (set! z4c09@z4c04 '#f) (set! z4c0b@z4c03 (make-record-constructor-descriptor z4c07@z4c02 z4b40@z4b38 z4c09@z4c04)) (set! z4c0e@p? (record-predicate z4c07@z4c02)) (set! z4c10@make-i/o-port-error (record-constructor z4c0b@z4c03)) (set! z4c12@z4c01 (record-accessor z4c07@z4c02 '0)) (set! z4c14@i/o-port-error? (condition-predicate z4c07@z4c02)) (set! z4c16@i/o-error-port (condition-accessor z4c07@z4c02 z4c12@z4c01)) (set! z4c18@&i/o-port-rtd z4c07@z4c02) (set! z4c1a@&i/o-port-rcd z4c0b@z4c03) (set! z4c20@z4c1b (make-record-type-descriptor '&i/o-decoding z4c07@z4c02 'z4c1e '#f '#f '#())) (set! z4c22@z4c1d '#f) (set! z4c24@z4c1c (make-record-constructor-descriptor z4c20@z4c1b z4c0b@z4c03 z4c22@z4c1d)) (set! z4c27@p? (record-predicate z4c20@z4c1b)) (set! z4c29@make-i/o-decoding-error (record-constructor z4c24@z4c1c)) (set! z4c2b@i/o-decoding-error? (condition-predicate z4c20@z4c1b)) (set! z4c2d@&i/o-decoding-rtd z4c20@z4c1b) (set! z4c2f@&i/o-decoding-rcd z4c24@z4c1c) (set! z4c37@z4c32 (make-record-type-descriptor '&i/o-encoding z4c07@z4c02 'z4c35 '#f '#f '#((immutable char)))) (set! z4c39@z4c34 '#f) (set! z4c3b@z4c33 (make-record-constructor-descriptor z4c37@z4c32 z4c0b@z4c03 z4c39@z4c34)) (set! z4c3e@p? (record-predicate z4c37@z4c32)) (set! z4c40@make-i/o-encoding-error (record-constructor z4c3b@z4c33)) (set! z4c42@z4c31 (record-accessor z4c37@z4c32 '0)) (set! z4c44@i/o-encoding-error? (condition-predicate z4c37@z4c32)) (set! z4c46@i/o-encoding-error-char (condition-accessor z4c37@z4c32 z4c42@z4c31)) (set! z4c48@&i/o-encoding-rtd z4c37@z4c32) (set! z4c4a@&i/o-encoding-rcd z4c3b@z4c33) (set! z4c50@z4c4b (make-record-type-descriptor '&no-infinities z4adc@z4ad7 'z4c4e '#f '#f '#())) (set! z4c52@z4c4d '#f) (set! z4c54@z4c4c (make-record-constructor-descriptor z4c50@z4c4b z4ae0@z4ad8 z4c52@z4c4d)) (set! z4c57@p? (record-predicate z4c50@z4c4b)) (set! z4c59@make-no-infinities-violation (record-constructor z4c54@z4c4c)) (set! z4c5b@no-infinities-violation? (condition-predicate z4c50@z4c4b)) (set! z4c5d@&no-infinities-rtd z4c50@z4c4b) (set! z4c5f@&no-infinities-rcd z4c54@z4c4c) (set! z4c65@z4c60 (make-record-type-descriptor '&no-nans z4adc@z4ad7 'z4c63 '#f '#f '#())) (set! z4c67@z4c62 '#f) (set! z4c69@z4c61 (make-record-constructor-descriptor z4c65@z4c60 z4ae0@z4ad8 z4c67@z4c62)) (set! z4c6c@p? (record-predicate z4c65@z4c60)) (set! z4c6e@make-no-nans-violation (record-constructor z4c69@z4c61)) (set! z4c70@no-nans-violation? (condition-predicate z4c65@z4c60)) (set! z4c72@&no-nans-rtd z4c65@z4c60) (set! z4c74@&no-nans-rcd z4c69@z4c61) (begin (set! z4d65@z4c74@&no-nans-rcd z4c74@&no-nans-rcd) (set! z4d64@z4c72@&no-nans-rtd z4c72@&no-nans-rtd) (set! z4d63@z4c70@no-nans-violation? z4c70@no-nans-violation?) (set! z4d62@z4c6e@make-no-nans-violation z4c6e@make-no-nans-violation) (set! z4d61@z4c6c@p? z4c6c@p?) (set! z4d60@z4c69@z4c61 z4c69@z4c61) (set! z4d5f@z4c67@z4c62 z4c67@z4c62) (set! z4d5e@z4c65@z4c60 z4c65@z4c60) (set! z4d5d@z4c5f@&no-infinities-rcd z4c5f@&no-infinities-rcd) (set! z4d5c@z4c5d@&no-infinities-rtd z4c5d@&no-infinities-rtd) (set! z4d5b@z4c5b@no-infinities-violation? z4c5b@no-infinities-violation?) (set! z4d5a@z4c59@make-no-infinities-violation z4c59@make-no-infinities-violation) (set! z4d59@z4c57@p? z4c57@p?) (set! z4d58@z4c54@z4c4c z4c54@z4c4c) (set! z4d57@z4c52@z4c4d z4c52@z4c4d) (set! z4d56@z4c50@z4c4b z4c50@z4c4b) (set! z4d55@z4c4a@&i/o-encoding-rcd z4c4a@&i/o-encoding-rcd) (set! z4d54@z4c48@&i/o-encoding-rtd z4c48@&i/o-encoding-rtd) (set! z4d53@z4c46@i/o-encoding-error-char z4c46@i/o-encoding-error-char) (set! z4d52@z4c44@i/o-encoding-error? z4c44@i/o-encoding-error?) (set! z4d51@z4c42@z4c31 z4c42@z4c31) (set! z4d50@z4c40@make-i/o-encoding-error z4c40@make-i/o-encoding-error) (set! z4d4f@z4c3e@p? z4c3e@p?) (set! z4d4e@z4c3b@z4c33 z4c3b@z4c33) (set! z4d4d@z4c39@z4c34 z4c39@z4c34) (set! z4d4c@z4c37@z4c32 z4c37@z4c32) (set! z4d4b@z4c2f@&i/o-decoding-rcd z4c2f@&i/o-decoding-rcd) (set! z4d4a@z4c2d@&i/o-decoding-rtd z4c2d@&i/o-decoding-rtd) (set! z4d49@z4c2b@i/o-decoding-error? z4c2b@i/o-decoding-error?) (set! z4d48@z4c29@make-i/o-decoding-error z4c29@make-i/o-decoding-error) (set! z4d47@z4c27@p? z4c27@p?) (set! z4d46@z4c24@z4c1c z4c24@z4c1c) (set! z4d45@z4c22@z4c1d z4c22@z4c1d) (set! z4d44@z4c20@z4c1b z4c20@z4c1b) (set! z4d43@z4c1a@&i/o-port-rcd z4c1a@&i/o-port-rcd) (set! z4d42@z4c18@&i/o-port-rtd z4c18@&i/o-port-rtd) (set! z4d41@z4c16@i/o-error-port z4c16@i/o-error-port) (set! z4d40@z4c14@i/o-port-error? z4c14@i/o-port-error?) (set! z4d3f@z4c12@z4c01 z4c12@z4c01) (set! z4d3e@z4c10@make-i/o-port-error z4c10@make-i/o-port-error) (set! z4d3d@z4c0e@p? z4c0e@p?) (set! z4d3c@z4c0b@z4c03 z4c0b@z4c03) (set! z4d3b@z4c09@z4c04 z4c09@z4c04) (set! z4d3a@z4c07@z4c02 z4c07@z4c02) (set! z4d39@z4bff@&i/o-file-does-not-exist-rcd z4bff@&i/o-file-does-not-exist-rcd) (set! z4d38@z4bfd@&i/o-file-does-not-exist-rtd z4bfd@&i/o-file-does-not-exist-rtd) (set! z4d37@z4bfb@i/o-file-does-not-exist-error? z4bfb@i/o-file-does-not-exist-error?) (set! z4d36@z4bf9@make-i/o-file-does-not-exist-error z4bf9@make-i/o-file-does-not-exist-error) (set! z4d35@z4bf7@p? z4bf7@p?) (set! z4d34@z4bf4@z4bec z4bf4@z4bec) (set! z4d33@z4bf2@z4bed z4bf2@z4bed) (set! z4d32@z4bf0@z4beb z4bf0@z4beb) (set! z4d31@z4bea@&i/o-file-already-exists-rcd z4bea@&i/o-file-already-exists-rcd) (set! z4d30@z4be8@&i/o-file-already-exists-rtd z4be8@&i/o-file-already-exists-rtd) (set! z4d2f@z4be6@i/o-file-already-exists-error? z4be6@i/o-file-already-exists-error?) (set! z4d2e@z4be4@make-i/o-file-already-exists-error z4be4@make-i/o-file-already-exists-error) (set! z4d2d@z4be2@p? z4be2@p?) (set! z4d2c@z4bdf@z4bd7 z4bdf@z4bd7) (set! z4d2b@z4bdd@z4bd8 z4bdd@z4bd8) (set! z4d2a@z4bdb@z4bd6 z4bdb@z4bd6) (set! z4d29@z4bd5@&i/o-file-is-read-only-rcd z4bd5@&i/o-file-is-read-only-rcd) (set! z4d28@z4bd3@&i/o-file-is-read-only-rtd z4bd3@&i/o-file-is-read-only-rtd) (set! z4d27@z4bd1@i/o-file-is-read-only-error? z4bd1@i/o-file-is-read-only-error?) (set! z4d26@z4bcf@make-i/o-file-is-read-only-error z4bcf@make-i/o-file-is-read-only-error) (set! z4d25@z4bcd@p? z4bcd@p?) (set! z4d24@z4bca@z4bc2 z4bca@z4bc2) (set! z4d23@z4bc8@z4bc3 z4bc8@z4bc3) (set! z4d22@z4bc6@z4bc1 z4bc6@z4bc1) (set! z4d21@z4bc0@&i/o-file-protection-rcd z4bc0@&i/o-file-protection-rcd) (set! z4d20@z4bbe@&i/o-file-protection-rtd z4bbe@&i/o-file-protection-rtd) (set! z4d1f@z4bbc@i/o-file-protection-error? z4bbc@i/o-file-protection-error?) (set! z4d1e@z4bba@make-i/o-file-protection-error z4bba@make-i/o-file-protection-error) (set! z4d1d@z4bb8@p? z4bb8@p?) (set! z4d1c@z4bb5@z4bad z4bb5@z4bad) (set! z4d1b@z4bb3@z4bae z4bb3@z4bae) (set! z4d1a@z4bb1@z4bac z4bb1@z4bac) (set! z4d19@z4bab@&i/o-filename-rcd z4bab@&i/o-filename-rcd) (set! z4d18@z4ba9@&i/o-filename-rtd z4ba9@&i/o-filename-rtd) (set! z4d17@z4ba7@i/o-error-filename z4ba7@i/o-error-filename) (set! z4d16@z4ba5@i/o-filename-error? z4ba5@i/o-filename-error?) (set! z4d15@z4ba3@z4b92 z4ba3@z4b92) (set! z4d14@z4ba1@make-i/o-filename-error z4ba1@make-i/o-filename-error) (set! z4d13@z4b9f@p? z4b9f@p?) (set! z4d12@z4b9c@z4b94 z4b9c@z4b94) (set! z4d11@z4b9a@z4b95 z4b9a@z4b95) (set! z4d10@z4b98@z4b93 z4b98@z4b93) (set! z4d0f@z4b90@&i/o-invalid-position-rcd z4b90@&i/o-invalid-position-rcd) (set! z4d0e@z4b8e@&i/o-invalid-position-rtd z4b8e@&i/o-invalid-position-rtd) (set! z4d0d@z4b8c@i/o-error-position z4b8c@i/o-error-position) (set! z4d0c@z4b8a@i/o-invalid-position-error? z4b8a@i/o-invalid-position-error?) (set! z4d0b@z4b88@z4b77 z4b88@z4b77) (set! z4d0a@z4b86@make-i/o-invalid-position-error z4b86@make-i/o-invalid-position-error) (set! z4d09@z4b84@p? z4b84@p?) (set! z4d08@z4b81@z4b79 z4b81@z4b79) (set! z4d07@z4b7f@z4b7a z4b7f@z4b7a) (set! z4d06@z4b7d@z4b78 z4b7d@z4b78) (set! z4d05@z4b75@&i/o-write-rcd z4b75@&i/o-write-rcd) (set! z4d04@z4b73@&i/o-write-rtd z4b73@&i/o-write-rtd) (set! z4d03@z4b71@i/o-write-error? z4b71@i/o-write-error?) (set! z4d02@z4b6f@make-i/o-write-error z4b6f@make-i/o-write-error) (set! z4d01@z4b6d@p? z4b6d@p?) (set! z4d00@z4b6a@z4b62 z4b6a@z4b62) (set! z4cff@z4b68@z4b63 z4b68@z4b63) (set! z4cfe@z4b66@z4b61 z4b66@z4b61) (set! z4cfd@z4b60@&i/o-read-rcd z4b60@&i/o-read-rcd) (set! z4cfc@z4b5e@&i/o-read-rtd z4b5e@&i/o-read-rtd) (set! z4cfb@z4b5c@i/o-read-error? z4b5c@i/o-read-error?) (set! z4cfa@z4b5a@make-i/o-read-error z4b5a@make-i/o-read-error) (set! z4cf9@z4b58@p? z4b58@p?) (set! z4cf8@z4b55@z4b4d z4b55@z4b4d) (set! z4cf7@z4b53@z4b4e z4b53@z4b4e) (set! z4cf6@z4b51@z4b4c z4b51@z4b4c) (set! z4cf5@z4b4b@&i/o-rcd z4b4b@&i/o-rcd) (set! z4cf4@z4b49@&i/o-rtd z4b49@&i/o-rtd) (set! z4cf3@z4b47@i/o-error? z4b47@i/o-error?) (set! z4cf2@z4b45@make-i/o-error z4b45@make-i/o-error) (set! z4cf1@z4b43@p? z4b43@p?) (set! z4cf0@z4b40@z4b38 z4b40@z4b38) (set! z4cef@z4b3e@z4b39 z4b3e@z4b39) (set! z4cee@z4b3c@z4b37 z4b3c@z4b37) (set! z4ced@z4b36@&undefined-rcd z4b36@&undefined-rcd) (set! z4cec@z4b34@&undefined-rtd z4b34@&undefined-rtd) (set! z4ceb@z4b32@undefined-violation? z4b32@undefined-violation?) (set! z4cea@z4b30@make-undefined-violation z4b30@make-undefined-violation) (set! z4ce9@z4b2e@p? z4b2e@p?) (set! z4ce8@z4b2b@z4b23 z4b2b@z4b23) (set! z4ce7@z4b29@z4b24 z4b29@z4b24) (set! z4ce6@z4b27@z4b22 z4b27@z4b22) (set! z4ce5@z4b21@&syntax-rcd z4b21@&syntax-rcd) (set! z4ce4@z4b1f@&syntax-rtd z4b1f@&syntax-rtd) (set! z4ce3@z4b1d@syntax-violation-subform z4b1d@syntax-violation-subform) (set! z4ce2@z4b1b@syntax-violation-form z4b1b@syntax-violation-form) (set! z4ce1@z4b19@syntax-violation? z4b19@syntax-violation?) (set! z4ce0@z4b17@z4b04 z4b17@z4b04) (set! z4cdf@z4b15@z4b02 z4b15@z4b02) (set! z4cde@z4b13@make-syntax-violation z4b13@make-syntax-violation) (set! z4cdd@z4b11@p? z4b11@p?) (set! z4cdc@z4b0e@z4b06 z4b0e@z4b06) (set! z4cdb@z4b0c@z4b07 z4b0c@z4b07) (set! z4cda@z4b0a@z4b05 z4b0a@z4b05) (set! z4cd9@z4b00@&lexical-rcd z4b00@&lexical-rcd) (set! z4cd8@z4afe@&lexical-rtd z4afe@&lexical-rtd) (set! z4cd7@z4afc@lexical-violation? z4afc@lexical-violation?) (set! z4cd6@z4afa@make-lexical-violation z4afa@make-lexical-violation) (set! z4cd5@z4af8@p? z4af8@p?) (set! z4cd4@z4af5@z4aed z4af5@z4aed) (set! z4cd3@z4af3@z4aee z4af3@z4aee) (set! z4cd2@z4af1@z4aec z4af1@z4aec) (set! z4cd1@z4aeb@&implementation-restriction-rcd z4aeb@&implementation-restriction-rcd) (set! z4cd0@z4ae9@&implementation-restriction-rtd z4ae9@&implementation-restriction-rtd) (set! z4ccf@z4ae7@implementation-restriction-violation? z4ae7@implementation-restriction-violation?) (set! z4cce@z4ae5@make-implementation-restriction-violation z4ae5@make-implementation-restriction-violation) (set! z4ccd@z4ae3@p? z4ae3@p?) (set! z4ccc@z4ae0@z4ad8 z4ae0@z4ad8) (set! z4ccb@z4ade@z4ad9 z4ade@z4ad9) (set! z4cca@z4adc@z4ad7 z4adc@z4ad7) (set! z4cc9@z4ad6@&non-continuable-rcd z4ad6@&non-continuable-rcd) (set! z4cc8@z4ad4@&non-continuable-rtd z4ad4@&non-continuable-rtd) (set! z4cc7@z4ad2@non-continuable-violation? z4ad2@non-continuable-violation?) (set! z4cc6@z4ad0@make-non-continuable-violation z4ad0@make-non-continuable-violation) (set! z4cc5@z4ace@p? z4ace@p?) (set! z4cc4@z4acb@z4ac3 z4acb@z4ac3) (set! z4cc3@z4ac9@z4ac4 z4ac9@z4ac4) (set! z4cc2@z4ac7@z4ac2 z4ac7@z4ac2) (set! z4cc1@z4ac1@&who-rcd z4ac1@&who-rcd) (set! z4cc0@z4abf@&who-rtd z4abf@&who-rtd) (set! z4cbf@z4abd@condition-who z4abd@condition-who) (set! z4cbe@z4abb@who-condition? z4abb@who-condition?) (set! z4cbd@z4ab9@z4aa8 z4ab9@z4aa8) (set! z4cbc@z4ab7@make-who-condition z4ab7@make-who-condition) (set! z4cbb@z4ab5@p? z4ab5@p?) (set! z4cba@z4ab2@z4aaa z4ab2@z4aaa) (set! z4cb9@z4ab0@z4aab z4ab0@z4aab) (set! z4cb8@z4aae@z4aa9 z4aae@z4aa9) (set! z4cb7@z4aa6@&irritants-rcd z4aa6@&irritants-rcd) (set! z4cb6@z4aa4@&irritants-rtd z4aa4@&irritants-rtd) (set! z4cb5@z4aa2@condition-irritants z4aa2@condition-irritants) (set! z4cb4@z4aa0@irritants-condition? z4aa0@irritants-condition?) (set! z4cb3@z4a9e@z4a8d z4a9e@z4a8d) (set! z4cb2@z4a9c@make-irritants-condition z4a9c@make-irritants-condition) (set! z4cb1@z4a9a@p? z4a9a@p?) (set! z4cb0@z4a97@z4a8f z4a97@z4a8f) (set! z4caf@z4a95@z4a90 z4a95@z4a90) (set! z4cae@z4a93@z4a8e z4a93@z4a8e) (set! z4cad@z4a8b@&assertion-rcd z4a8b@&assertion-rcd) (set! z4cac@z4a89@&assertion-rtd z4a89@&assertion-rtd) (set! z4cab@z4a87@assertion-violation? z4a87@assertion-violation?) (set! z4caa@z4a85@make-assertion-violation z4a85@make-assertion-violation) (set! z4ca9@z4a83@p? z4a83@p?) (set! z4ca8@z4a80@z4a78 z4a80@z4a78) (set! z4ca7@z4a7e@z4a79 z4a7e@z4a79) (set! z4ca6@z4a7c@z4a77 z4a7c@z4a77) (set! z4ca5@z4a76@&violation-rcd z4a76@&violation-rcd) (set! z4ca4@z4a74@&violation-rtd z4a74@&violation-rtd) (set! z4ca3@z4a72@violation? z4a72@violation?) (set! z4ca2@z4a70@make-violation z4a70@make-violation) (set! z4ca1@z4a6e@p? z4a6e@p?) (set! z4ca0@z4a6b@z4a63 z4a6b@z4a63) (set! z4c9f@z4a69@z4a64 z4a69@z4a64) (set! z4c9e@z4a67@z4a62 z4a67@z4a62) (set! z4c9d@z4a61@&error-rcd z4a61@&error-rcd) (set! z4c9c@z4a5f@&error-rtd z4a5f@&error-rtd) (set! z4c9b@z4a5d@error? z4a5d@error?) (set! z4c9a@z4a5b@make-error z4a5b@make-error) (set! z4c99@z4a59@p? z4a59@p?) (set! z4c98@z4a56@z4a4e z4a56@z4a4e) (set! z4c97@z4a54@z4a4f z4a54@z4a4f) (set! z4c96@z4a52@z4a4d z4a52@z4a4d) (set! z4c95@z4a4c@&serious-rcd z4a4c@&serious-rcd) (set! z4c94@z4a4a@&serious-rtd z4a4a@&serious-rtd) (set! z4c93@z4a48@serious-condition? z4a48@serious-condition?) (set! z4c92@z4a46@make-serious-condition z4a46@make-serious-condition) (set! z4c91@z4a44@p? z4a44@p?) (set! z4c90@z4a41@z4a39 z4a41@z4a39) (set! z4c8f@z4a3f@z4a3a z4a3f@z4a3a) (set! z4c8e@z4a3d@z4a38 z4a3d@z4a38) (set! z4c8d@z4a37@&warning-rcd z4a37@&warning-rcd) (set! z4c8c@z4a35@&warning-rtd z4a35@&warning-rtd) (set! z4c8b@z4a33@warning? z4a33@warning?) (set! z4c8a@z4a31@make-warning z4a31@make-warning) (set! z4c89@z4a2f@p? z4a2f@p?) (set! z4c88@z4a2c@z4a24 z4a2c@z4a24) (set! z4c87@z4a2a@z4a25 z4a2a@z4a25) (set! z4c86@z4a28@z4a23 z4a28@z4a23) (set! z4c85@z4a22@&message-rcd z4a22@&message-rcd) (set! z4c84@z4a20@&message-rtd z4a20@&message-rtd) (set! z4c83@z4a1e@condition-message z4a1e@condition-message) (set! z4c82@z4a1c@message-condition? z4a1c@message-condition?) (set! z4c81@z4a1a@z4a09 z4a1a@z4a09) (set! z4c80@z4a18@make-message-condition z4a18@make-message-condition) (set! z4c7f@z4a16@p? z4a16@p?) (set! z4c7e@z4a13@z4a0b z4a13@z4a0b) (set! z4c7d@z4a11@z4a0c z4a11@z4a0c) (set! z4c7c@z4a0f@z4a0a z4a0f@z4a0a) (set! z4c7b@z49c3@&condition-rcd z49c3@&condition-rcd) (set! z4c7a@z49c1@&condition-rtd z49c1@&condition-rtd) (set! z4c79@z49bf@make-&condition z49bf@make-&condition) (set! z4c78@z49bd@&condition? z49bd@&condition?) (set! z4c77@z49ba@z49b2 z49ba@z49b2) (set! z4c76@z49b8@z49b3 z49b8@z49b3) (set! z4c75@z49b6@z49b1 z49b6@z49b1)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (z28b4@z2869@current-primitive-locations (lambda (z51a0@x) ((lambda (z51a2@t) (if z51a2@t (cdr z51a2@t) '#f)) (assq z51a0@x '((&no-nans-rcd . z4d65@z4c74@&no-nans-rcd) (&no-nans-rtd . z4d64@z4c72@&no-nans-rtd) (&no-infinities-rcd . z4d5d@z4c5f@&no-infinities-rcd) (&no-infinities-rtd . z4d5c@z4c5d@&no-infinities-rtd) (&i/o-encoding-rcd . z4d55@z4c4a@&i/o-encoding-rcd) (&i/o-encoding-rtd . z4d54@z4c48@&i/o-encoding-rtd) (&i/o-decoding-rcd . z4d4b@z4c2f@&i/o-decoding-rcd) (&i/o-decoding-rtd . z4d4a@z4c2d@&i/o-decoding-rtd) (&i/o-port-rcd . z4d43@z4c1a@&i/o-port-rcd) (&i/o-port-rtd . z4d42@z4c18@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . z4d39@z4bff@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . z4d38@z4bfd@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . z4d31@z4bea@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . z4d30@z4be8@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . z4d29@z4bd5@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . z4d28@z4bd3@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . z4d21@z4bc0@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . z4d20@z4bbe@&i/o-file-protection-rtd) (&i/o-filename-rcd . z4d19@z4bab@&i/o-filename-rcd) (&i/o-filename-rtd . z4d18@z4ba9@&i/o-filename-rtd) (&i/o-invalid-position-rcd . z4d0f@z4b90@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . z4d0e@z4b8e@&i/o-invalid-position-rtd) (&i/o-write-rcd . z4d05@z4b75@&i/o-write-rcd) (&i/o-write-rtd . z4d04@z4b73@&i/o-write-rtd) (&i/o-read-rcd . z4cfd@z4b60@&i/o-read-rcd) (&i/o-read-rtd . z4cfc@z4b5e@&i/o-read-rtd) (&i/o-rcd . z4cf5@z4b4b@&i/o-rcd) (&i/o-rtd . z4cf4@z4b49@&i/o-rtd) (&undefined-rcd . z4ced@z4b36@&undefined-rcd) (&undefined-rtd . z4cec@z4b34@&undefined-rtd) (&syntax-rcd . z4ce5@z4b21@&syntax-rcd) (&syntax-rtd . z4ce4@z4b1f@&syntax-rtd) (&lexical-rcd . z4cd9@z4b00@&lexical-rcd) (&lexical-rtd . z4cd8@z4afe@&lexical-rtd) (&implementation-restriction-rcd . z4cd1@z4aeb@&implementation-restriction-rcd) (&implementation-restriction-rtd . z4cd0@z4ae9@&implementation-restriction-rtd) (&non-continuable-rcd . z4cc9@z4ad6@&non-continuable-rcd) (&non-continuable-rtd . z4cc8@z4ad4@&non-continuable-rtd) (&who-rcd . z4cc1@z4ac1@&who-rcd) (&who-rtd . z4cc0@z4abf@&who-rtd) (&irritants-rcd . z4cb7@z4aa6@&irritants-rcd) (&irritants-rtd . z4cb6@z4aa4@&irritants-rtd) (&assertion-rcd . z4cad@z4a8b@&assertion-rcd) (&assertion-rtd . z4cac@z4a89@&assertion-rtd) (&violation-rcd . z4ca5@z4a76@&violation-rcd) (&violation-rtd . z4ca4@z4a74@&violation-rtd) (&error-rcd . z4c9d@z4a61@&error-rcd) (&error-rtd . z4c9c@z4a5f@&error-rtd) (&serious-rcd . z4c95@z4a4c@&serious-rcd) (&serious-rtd . z4c94@z4a4a@&serious-rtd) (&warning-rcd . z4c8d@z4a37@&warning-rcd) (&warning-rtd . z4c8c@z4a35@&warning-rtd) (&message-rcd . z4c85@z4a22@&message-rcd) (&message-rtd . z4c84@z4a20@&message-rtd) (&condition-rcd . z4c7b@z49c3@&condition-rcd) (&condition-rtd . z4c7a@z49c1@&condition-rtd) (syntax-error . z49a3@z2fa9@syntax-error) (syntax-dispatch . z4938@z2ec4@syntax-dispatch) (load . z4e96@z4d81@load) (interaction-environment . z49ab@z2fb9@interaction-environment) (library-path . z2acb@z295a@library-path) (make-parameter . z2863@z278d@make-parameter) (make-variable-transformer . z48f6@z2cf1@make-variable-transformer) (identifier? . z49a6@z2faf@identifier?) (generate-temporaries . z499c@z2f9b@generate-temporaries) (free-identifier=? . z499d@z2f9d@free-identifier=?) (syntax->datum . z49a8@z2fb3@syntax->datum) (datum->syntax . z49a7@z2fb1@datum->syntax) (bound-identifier=? . z499e@z2f9f@bound-identifier=?) (make-i/o-write-error . z4d02@z4b6f@make-i/o-write-error) (make-i/o-read-error . z4cfa@z4b5a@make-i/o-read-error) (make-i/o-port-error . z4d3e@z4c10@make-i/o-port-error) (make-i/o-invalid-position-error . z4d0a@z4b86@make-i/o-invalid-position-error) (make-i/o-filename-error . z4d14@z4ba1@make-i/o-filename-error) (make-i/o-file-protection-error . z4d1e@z4bba@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . z4d26@z4bcf@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . z4d36@z4bf9@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . z4d2e@z4be4@make-i/o-file-already-exists-error) (make-i/o-error . z4cf2@z4b45@make-i/o-error) (make-i/o-encoding-error . z4d50@z4c40@make-i/o-encoding-error) (make-i/o-decoding-error . z4d48@z4c29@make-i/o-decoding-error) (i/o-write-error? . z4d03@z4b71@i/o-write-error?) (i/o-read-error? . z4cfb@z4b5c@i/o-read-error?) (i/o-port-error? . z4d40@z4c14@i/o-port-error?) (i/o-invalid-position-error? . z4d0c@z4b8a@i/o-invalid-position-error?) (i/o-filename-error? . z4d16@z4ba5@i/o-filename-error?) (i/o-file-protection-error? . z4d1f@z4bbc@i/o-file-protection-error?) (i/o-file-is-read-only-error? . z4d27@z4bd1@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . z4d37@z4bfb@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . z4d2f@z4be6@i/o-file-already-exists-error?) (i/o-error? . z4cf3@z4b47@i/o-error?) (i/o-error-position . z4d0d@z4b8c@i/o-error-position) (i/o-error-port . z4d41@z4c16@i/o-error-port) (i/o-error-filename . z4d17@z4ba7@i/o-error-filename) (i/o-encoding-error? . z4d52@z4c44@i/o-encoding-error?) (i/o-encoding-error-char . z4d53@z4c46@i/o-encoding-error-char) (i/o-decoding-error? . z4d49@z4c2b@i/o-decoding-error?) (scheme-report-environment . z4993@z2f89@scheme-report-environment) (null-environment . z4992@z2f87@null-environment) (command-line . z4e93@z4d7b@command-line) (eval . z4995@z2f8d@eval) (environment . z4991@z2f85@environment) (who-condition? . z4cbe@z4abb@who-condition?) (warning? . z4c8b@z4a33@warning?) (violation? . z4ca3@z4a72@violation?) (undefined-violation? . z4ceb@z4b32@undefined-violation?) (syntax-violation? . z4ce1@z4b19@syntax-violation?) (syntax-violation-subform . z4ce3@z4b1d@syntax-violation-subform) (syntax-violation-form . z4ce2@z4b1b@syntax-violation-form) (syntax-violation . z49a5@z2fad@syntax-violation) (serious-condition? . z4c93@z4a48@serious-condition?) (non-continuable-violation? . z4cc7@z4ad2@non-continuable-violation?) (message-condition? . z4c82@z4a1c@message-condition?) (make-who-condition . z4cbc@z4ab7@make-who-condition) (make-warning . z4c8a@z4a31@make-warning) (make-violation . z4ca2@z4a70@make-violation) (make-undefined-violation . z4cea@z4b30@make-undefined-violation) (make-syntax-violation . z4cde@z4b13@make-syntax-violation) (make-serious-condition . z4c92@z4a46@make-serious-condition) (make-non-continuable-violation . z4cc6@z4ad0@make-non-continuable-violation) (make-message-condition . z4c80@z4a18@make-message-condition) (make-lexical-violation . z4cd6@z4afa@make-lexical-violation) (make-irritants-condition . z4cb2@z4a9c@make-irritants-condition) (make-implementation-restriction-violation . z4cce@z4ae5@make-implementation-restriction-violation) (make-error . z4c9a@z4a5b@make-error) (make-assertion-violation . z4caa@z4a85@make-assertion-violation) (lexical-violation? . z4cd7@z4afc@lexical-violation?) (irritants-condition? . z4cb4@z4aa0@irritants-condition?) (implementation-restriction-violation? . z4ccf@z4ae7@implementation-restriction-violation?) (error? . z4c9b@z4a5d@error?) (condition-who . z4cbf@z4abd@condition-who) (condition-message . z4c83@z4a1e@condition-message) (condition-irritants . z4cb5@z4aa2@condition-irritants) (assertion-violation? . z4cab@z4a87@assertion-violation?) (no-nans-violation? . z4d63@z4c70@no-nans-violation?) (no-infinities-violation? . z4d5b@z4c5b@no-infinities-violation?) (make-no-nans-violation . z4d62@z4c6e@make-no-nans-violation) (make-no-infinities-violation . z4d5a@z4c59@make-no-infinities-violation) (assertion-error . z49a2@z2fa7@assertion-error)))))) (z2adb@z297a@install-library 'z517d '(mosh interaction) '() '() '() '() '((regexp? . z5175) (alist->eq-hash-table . z5172) (format . z516f) (string-split . z5164) (call-process . z515e) (set-current-directory! . z515a) (expand-path . z5159) (current-directory . z5158) (%spawn . z5157) (%waitpid . z5156) (%ffi-supported? . z5155) (%ffi-pointer-ref . z5154) (%ffi-pointer->string . z5153) (%ffi-call->string-or-zero . z5152) (%ffi-call->double . z5151) (%ffi-call->void* . z5150) (%ffi-call->void . z514f) (%ffi-call->int . z514e) (%ffi-lookup . z514d) (%ffi-open . z514c) (%fork . z514b) (%pipe . z514a) (p . z5149) (vm-join! . z5141) (vm-set-value! . z5140) (vm? . z513f) (vm-start! . z513e) (make-vm . z513d) (mutex-try-lock! . z513c) (mutex-unlock! . z513b) (mutex-lock! . z513a) (mutex? . z5139) (make-mutex . z5138) (condition-variable-notify-all! . z5137) (condition-variable-notify! . z5136) (condition-variable-wait! . z5135) (make-condition-variable . z5134) (string-upcase . z511d) (string-titlecase . z511c) (string-normalize-nfkd . z511b) (string-normalize-nfkc . z511a) (string-normalize-nfd . z5119) (string-normalize-nfc . z5118) (string-foldcase . z5117) (string-downcase . z5116) (string-ci>? . z5115) (string-ci>=? . z5114) (string-ci=? . z5113) (string-ci<? . z5112) (string-ci<=? . z5111) (char-whitespace? . z5110) (char-upper-case? . z510f) (char-title-case? . z510e) (char-numeric? . z510d) (char-lower-case? . z510c) (char-general-category . z510b) (char-upcase . z510a) (char-titlecase . z5109) (char-foldcase . z5108) (char-downcase . z5107) (char-ci>? . z5106) (char-ci>=? . z5105) (char-ci=? . z5104) (char-ci<? . z5103) (char-ci<=? . z5102) (char-alphabetic? . z5101) (make-variable-transformer . z2cf0) (identifier? . z2fae) (generate-temporaries . z2f9a) (free-identifier=? . z2f9c) (syntax->datum . z2fb2) (datum->syntax . z2fb0) (bound-identifier=? . z2f9e) (record-type-descriptor? . z5100) (record-predicate . z50ff) (record-mutator . z50fe) (record-constructor . z50fd) (record-accessor . z50fc) (make-record-type-descriptor . z50fb) (make-record-constructor-descriptor . z50fa) (record? . z50f9) (record-type-uid . z50f8) (record-type-sealed? . z50f7) (record-type-parent . z50f6) (record-type-opaque? . z50f5) (record-type-name . z50f4) (record-type-generative? . z50f3) (record-type-field-names . z50f2) (record-rtd . z50f1) (record-field-mutable? . z50f0) (delete-file . z50ef) (file-exists? . z50ee) (vector-sort! . z50ed) (vector-sort . z50ec) (list-sort . z50eb) (symbol-hash . z50ea) (string-ci-hash . z50e9) (string-hash . z50e8) (equal-hash . z50e7) (hashtable-equivalence-function . z50e6) (make-hashtable . z50e5) (hashtable-hash-function . z50e4) (make-eqv-hashtable . z50e3) (make-eq-hashtable . z50e2) (hashtable? . z50e1) (hashtable-update! . z50e0) (hashtable-size . z50df) (hashtable-set! . z50de) (hashtable-ref . z50dd) (hashtable-mutable? . z50dc) (hashtable-keys . z50db) (hashtable-entries . z50da) (hashtable-delete! . z50d9) (hashtable-copy . z50d8) (hashtable-contains? . z50d7) (hashtable-clear! . z50d6) (call-with-output-file . z50d5) (call-with-input-file . z50d4) (write-char . z50d3) (write . z50d2) (with-output-to-file . z50d1) (with-input-from-file . z50d0) (read-char . z50cf) (read . z50ce) (peek-char . z50cd) (open-output-file . z50cc) (open-input-file . z50cb) (newline . z50ca) (display . z50c9) (close-output-port . z50c8) (close-input-port . z50c7) (eof-object? . z50c6) (eof-object . z50c5) (current-error-port . z50c4) (current-output-port . z50c3) (current-input-port . z50c2) (output-port? . z50c1) (input-port? . z50c0) (utf-8-codec . z50bf) (utf-16-codec . z50be) (transcoder-error-handling-mode . z50bd) (transcoder-eol-style . z50bc) (transcoder-codec . z50bb) (transcoded-port . z50ba) (textual-port? . z50b9) (string->bytevector . z50b8) (standard-output-port . z50b7) (standard-input-port . z50b6) (standard-error-port . z50b5) (set-port-position! . z50b4) (put-u8 . z50b3) (put-string . z50b2) (put-datum . z50b1) (put-char . z50b0) (put-bytevector . z50af) (port? . z50ae) (port-transcoder . z50ad) (port-position . z50ac) (port-has-set-port-position!? . z50ab) (port-has-port-position? . z50aa) (port-eof? . z50a9) (output-port-buffer-mode . z50a8) (open-string-output-port . z50a7) (open-string-input-port . z50a6) (open-file-output-port . z50a5) (open-file-input/output-port . z50a4) (open-file-input-port . z50a3) (open-bytevector-output-port . z50a2) (open-bytevector-input-port . z50a1) (native-transcoder . z50a0) (native-eol-style . z509f) (make-transcoder . z509e) (latin-1-codec . z509d) (make-i/o-write-error . z4b6e) (make-i/o-read-error . z4b59) (make-i/o-port-error . z4c0f) (make-i/o-invalid-position-error . z4b85) (make-i/o-filename-error . z4ba0) (make-i/o-file-protection-error . z4bb9) (make-i/o-file-is-read-only-error . z4bce) (make-i/o-file-does-not-exist-error . z4bf8) (make-i/o-file-already-exists-error . z4be3) (make-i/o-error . z4b44) (make-i/o-encoding-error . z4c3f) (make-i/o-decoding-error . z4c28) (make-custom-textual-output-port . z509c) (make-custom-textual-input/output-port . z509b) (make-custom-textual-input-port . z509a) (make-custom-binary-output-port . z5099) (make-custom-binary-input/output-port . z5098) (make-custom-binary-input-port . z5097) (make-bytevector . z5096) (lookahead-u8 . z5095) (lookahead-char . z5094) (i/o-write-error? . z4b70) (i/o-read-error? . z4b5b) (i/o-port-error? . z4c13) (i/o-invalid-position-error? . z4b89) (i/o-filename-error? . z4ba4) (i/o-file-protection-error? . z4bbb) (i/o-file-is-read-only-error? . z4bd0) (i/o-file-does-not-exist-error? . z4bfa) (i/o-file-already-exists-error? . z4be5) (i/o-error? . z4b46) (i/o-error-position . z4b8b) (i/o-error-port . z4c15) (i/o-error-filename . z4ba6) (i/o-encoding-error? . z4c43) (i/o-encoding-error-char . z4c45) (i/o-decoding-error? . z4c2a) (get-u8 . z5093) (get-string-n! . z5092) (get-string-n . z5091) (get-string-all . z5090) (get-line . z508f) (get-datum . z508e) (get-char . z508d) (get-bytevector-some . z508c) (get-bytevector-n! . z508b) (get-bytevector-n . z508a) (get-bytevector-all . z5089) (flush-output-port . z5088) (close-port . z5087) (exit . z507f) (command-line . z4d7a) (string-fill! . z507e) (string-set! . z507d) (set-cdr! . z507c) (set-car! . z507b) (remove . z507a) (remv . z5079) (remp . z5078) (remq . z5077) (partition . z5076) (memv . z5075) (memq . z5074) (memp . z5073) (member . z5072) (exists . z5071) (for-all . z5070) (fold-right . z506f) (fold-left . z506e) (find . z506d) (filter . z506c) (cons* . z506b) (assv . z506a) (assq . z5069) (assp . z5068) (assoc . z5067) (call-with-string-output-port . z5066) (call-with-port . z5065) (call-with-bytevector-output-port . z5064) (bytevector->string . z5063) (buffer-mode? . z5062) (binary-port? . z5061) (with-exception-handler . z5060) (raise-continuable . z505f) (raise . z505e) (eval . z2f8c) (environment . z2f84) (make-enumeration . z505d) (enum-set=? . z505c) (enum-set-universe . z505b) (enum-set-union . z505a) (enum-set-subset? . z5059) (enum-set-projection . z5058) (enum-set-member? . z5057) (enum-set-intersection . z5056) (enum-set-indexer . z5055) (enum-set-difference . z5054) (enum-set-constructor . z5053) (enum-set-complement . z5052) (enum-set->list . z5051) (who-condition? . z4aba) (warning? . z4a32) (violation? . z4a71) (undefined-violation? . z4b31) (syntax-violation? . z4b18) (syntax-violation-subform . z4b1c) (syntax-violation-form . z4b1a) (syntax-violation . z2fac) (simple-conditions . z5050) (serious-condition? . z4a47) (non-continuable-violation? . z4ad1) (message-condition? . z4a1b) (make-who-condition . z4ab6) (make-warning . z4a30) (make-violation . z4a6f) (make-undefined-violation . z4b2f) (make-syntax-violation . z4b12) (make-serious-condition . z4a45) (make-non-continuable-violation . z4acf) (make-message-condition . z4a17) (make-lexical-violation . z4af9) (make-irritants-condition . z4a9b) (make-implementation-restriction-violation . z4ae4) (make-error . z4a5a) (make-assertion-violation . z4a84) (lexical-violation? . z4afb) (irritants-condition? . z4a9f) (implementation-restriction-violation? . z4ae6) (error? . z4a5c) (condition-who . z4abc) (condition-predicate . z504f) (condition-message . z4a1d) (condition-irritants . z4aa1) (condition-accessor . z504e) (condition . z504d) (assertion-violation? . z4a86) (condition? . z504c) (utf32->string . z504b) (utf16->string . z504a) (utf8->string . z5049) (uint-list->bytevector . z5048) (u8-list->bytevector . z5047) (string->utf8 . z5046) (string->utf32 . z5045) (string->utf16 . z5044) (sint-list->bytevector . z5043) (native-endianness . z5042) (bytevector? . z5041) (bytevector=? . z5040) (bytevector-uint-set! . z503f) (bytevector-uint-ref . z503e) (bytevector-u8-set! . z503d) (bytevector-u8-ref . z503c) (bytevector-u64-set! . z503b) (bytevector-u64-ref . z503a) (bytevector-u64-native-set! . z5039) (bytevector-u64-native-ref . z5038) (bytevector-u32-set! . z5037) (bytevector-u32-ref . z5036) (bytevector-u32-native-set! . z5035) (bytevector-u32-native-ref . z5034) (bytevector-u16-set! . z5033) (bytevector-u16-ref . z5032) (bytevector-u16-native-set! . z5031) (bytevector-u16-native-ref . z5030) (bytevector-sint-set! . z502f) (bytevector-sint-ref . z502e) (bytevector-s8-set! . z502d) (bytevector-s8-ref . z502c) (bytevector-s64-set! . z502b) (bytevector-s64-ref . z502a) (bytevector-s64-native-set! . z5029) (bytevector-s64-native-ref . z5028) (bytevector-s32-set! . z5027) (bytevector-s32-ref . z5026) (bytevector-s32-native-set! . z5025) (bytevector-s32-native-ref . z5024) (bytevector-s16-set! . z5023) (bytevector-s16-ref . z5022) (bytevector-s16-native-set! . z5021) (bytevector-s16-native-ref . z5020) (bytevector-length . z501f) (bytevector-ieee-single-ref . z501e) (bytevector-ieee-single-set! . z501d) (bytevector-ieee-single-native-set! . z501c) (bytevector-ieee-single-native-ref . z501b) (bytevector-ieee-double-set! . z501a) (bytevector-ieee-double-ref . z5019) (bytevector-ieee-double-native-set! . z5018) (bytevector-ieee-double-native-ref . z5017) (bytevector-fill! . z5016) (bytevector-copy! . z5015) (bytevector-copy . z5014) (bytevector->uint-list . z5013) (bytevector->u8-list . z5012) (bytevector->sint-list . z5011) (no-nans-violation? . z4c6f) (no-infinities-violation? . z4c5a) (make-no-nans-violation . z4c6d) (make-no-infinities-violation . z4c58) (real->flonum . z5010) (flzero? . z500f) (fltruncate . z500e) (fltan . z500d) (flsqrt . z500c) (flsin . z500b) (flround . z500a) (flpositive? . z5009) (flonum? . z5008) (flodd? . z5007) (flnumerator . z5006) (flnegative? . z5005) (flnan? . z5004) (flmod0 . z5003) (flmod . z5002) (flmin . z5001) (flmax . z5000) (fllog . z4fff) (flinteger? . z4ffe) (flinfinite? . z4ffd) (flfloor . z4ffc) (flfinite? . z4ffb) (flexpt . z4ffa) (flexp . z4ff9) (fleven? . z4ff8) (fldiv0-and-mod0 . z4ff7) (fldiv0 . z4ff6) (fldiv-and-mod . z4ff5) (fldiv . z4ff4) (fldenominator . z4ff3) (flcos . z4ff2) (flceiling . z4ff1) (flatan . z4ff0) (flasin . z4fef) (flacos . z4fee) (flabs . z4fed) (fl>? . z4fec) (fl>=? . z4feb) (fl=? . z4fea) (fl<? . z4fe9) (fl<=? . z4fe8) (fl/ . z4fe7) (fl- . z4fe6) (fl+ . z4fe5) (fl* . z4fe4) (fixnum->flonum . z4fe3) (fxzero? . z4fe2) (fxxor . z4fe1) (fxrotate-bit-field . z4fe0) (fxreverse-bit-field . z4fdf) (fxpositive? . z4fde) (fxodd? . z4fdd) (fxnot . z4fdc) (fxnegative? . z4fdb) (fxmod0 . z4fda) (fxmod . z4fd9) (fxmin . z4fd8) (fxmax . z4fd7) (fxlength . z4fd6) (fxior . z4fd5) (fxif . z4fd4) (fxfirst-bit-set . z4fd3) (fxeven? . z4fd2) (fxdiv0-and-mod0 . z4fd1) (fxdiv0 . z4fd0) (fxdiv-and-mod . z4fcf) (fxdiv . z4fce) (fxcopy-bit-field . z4fcd) (fxcopy-bit . z4fcc) (fxbit-set? . z4fcb) (fxbit-field . z4fca) (fxbit-count . z4fc9) (fxarithmetic-shift-right . z4fc8) (fxarithmetic-shift-left . z4fc7) (fxarithmetic-shift . z4fc6) (fxand . z4fc5) (fx>? . z4fc4) (fx>=? . z4fc3) (fx=? . z4fc2) (fx<? . z4fc1) (fx<=? . z4fc0) (fx-/carry . z4fbf) (fx- . z4fbe) (fx+/carry . z4fbd) (fx+ . z4fbc) (fx*/carry . z4fbb) (fx* . z4fba) (greatest-fixnum . z4fb9) (least-fixnum . z4fb8) (fixnum-width . z4fb7) (fixnum? . z4fb6) (bitwise-rotate-bit-field . z4fb5) (bitwise-reverse-bit-field . z4fb4) (bitwise-length . z4fb3) (bitwise-if . z4fb2) (bitwise-first-bit-set . z4fb1) (bitwise-copy-bit-field . z4fb0) (bitwise-copy-bit . z4faf) (bitwise-bit-set? . z4fae) (bitwise-bit-field . z4fad) (bitwise-bit-count . z4fac) (bitwise-xor . z4fab) (bitwise-ior . z4faa) (bitwise-and . z4fa9) (bitwise-not . z4fa8) (bitwise-arithmetic-shift-right . z4fa7) (bitwise-arithmetic-shift-left . z4fa6) (bitwise-arithmetic-shift . z4fa5) (zero? . z4fa4) (vector? . z4fa3) (vector-set! . z4fa2) (vector-ref . z4fa1) (vector-map . z4fa0) (vector-length . z4f9f) (vector-for-each . z4f9e) (vector-fill! . z4f9d) (vector->list . z4f9c) (vector . z4f9b) (values . z4f9a) (truncate . z4f99) (tan . z4f98) (symbol? . z4f97) (symbol=? . z4f96) (symbol->string . z4f95) (substring . z4f94) (string? . z4f93) (string>? . z4f92) (string>=? . z4f91) (string=? . z4f90) (string<? . z4f8f) (string<=? . z4f8e) (string-ref . z4f8d) (string-length . z4f8c) (string-for-each . z4f8b) (string-copy . z4f8a) (string-append . z4f89) (string->symbol . z4f88) (string->number . z4f87) (string->list . z4f86) (string . z4f85) (sqrt . z4f84) (sin . z4f83) (round . z4f82) (reverse . z4f81) (real? . z4f80) (real-valued? . z4f7f) (real-part . z4f7e) (rationalize . z4f7d) (rational? . z4f7c) (rational-valued? . z4f7b) (procedure? . z4f7a) (positive? . z4f79) (pair? . z4f78) (odd? . z4f77) (numerator . z4f76) (number? . z4f75) (number->string . z4f74) (null? . z4f73) (not . z4f72) (negative? . z4f71) (nan? . z4f70) (min . z4f6f) (max . z4f6e) (map . z4f6d) (make-vector . z4f6c) (make-string . z4f6b) (make-rectangular . z4f6a) (make-polar . z4f69) (magnitude . z4f68) (log . z4f67) (list? . z4f66) (list-tail . z4f65) (list-ref . z4f64) (list->vector . z4f63) (list->string . z4f62) (list . z4f61) (length . z4f60) (lcm . z4f5f) (integer? . z4f5e) (integer-valued? . z4f5d) (integer->char . z4f5c) (infinite? . z4f5b) (inexact? . z4f5a) (inexact . z4f59) (imag-part . z4f58) (gcd . z4f57) (for-each . z4f56) (floor . z4f55) (finite? . z4f54) (expt . z4f53) (exp . z4f52) (exact? . z4f51) (exact-integer-sqrt . z4f50) (exact . z4f4f) (even? . z4f4e) (error . z4f4d) (eqv? . z4f4c) (equal? . z4f4b) (eq? . z4f4a) (dynamic-wind . z4f49) (div0-and-mod0 . z4f48) (mod0 . z4f47) (div0 . z4f46) (div-and-mod . z4f45) (mod . z4f44) (div . z4f43) (denominator . z4f42) (cos . z4f41) (cons . z4f40) (complex? . z4f3f) (char? . z4f3e) (char>? . z4f3d) (char>=? . z4f3c) (char=? . z4f3b) (char<? . z4f3a) (char<=? . z4f39) (char->integer . z4f38) (ceiling . z4f37) (call-with-values . z4f36) (call/cc . z4f35) (call-with-current-continuation . z4f34) (cddddr . z4f33) (cdddar . z4f32) (cddadr . z4f31) (cddaar . z4f30) (cdaddr . z4f2f) (cdadar . z4f2e) (cdaadr . z4f2d) (cdaaar . z4f2c) (cadddr . z4f2b) (caddar . z4f2a) (cadadr . z4f29) (cadaar . z4f28) (caaddr . z4f27) (caadar . z4f26) (caaadr . z4f25) (caaaar . z4f24) (cdddr . z4f23) (cddar . z4f22) (cdadr . z4f21) (cdaar . z4f20) (caddr . z4f1f) (cadar . z4f1e) (caadr . z4f1d) (caaar . z4f1c) (cddr . z4f1b) (cdar . z4f1a) (cadr . z4f19) (caar . z4f18) (cdr . z4f17) (car . z4f16) (boolean? . z4f15) (boolean=? . z4f14) (atan . z4f13) (assertion-violation . z4f12) (asin . z4f11) (apply . z4f10) (append . z4f0f) (angle . z4f0e) (acos . z4f0d) (abs . z4f0c) (/ . z4f0b) (* . z4f0a) (- . z4f09) (+ . z4f08) (>= . z4f07) (> . z4f06) (= . z4f05) (<= . z4f04) (< . z4f03) (library . z4f02) (&no-nans . z4f01) (&no-infinities . z4f00) (&i/o-encoding . z4eff) (&i/o-decoding . z4efe) (&i/o-port . z4efd) (&i/o-file-does-not-exist . z4efc) (&i/o-file-already-exists . z4efb) (&i/o-file-is-read-only . z4efa) (&i/o-file-protection . z4ef9) (&i/o-filename . z4ef8) (&i/o-invalid-position . z4ef7) (&i/o-write . z4ef6) (&i/o-read . z4ef5) (&i/o . z4ef4) (&undefined . z4ef3) (&syntax . z4ef2) (&lexical . z4ef1) (&implementation-restriction . z4ef0) (&non-continuable . z4eef) (&who . z4eee) (&irritants . z4eed) (&assertion . z4eec) (&violation . z4eeb) (&error . z4eea) (&serious . z4ee9) (&warning . z4ee8) (&message . z4ee7) (&condition . z4ee6) (define-condition-type . z4ee5) (define-enumeration . z4ee4) (define-record-type . z4ee3) (parent-rtd . z4ee2) (nongenerative . z4ee1) (opaque . z4ee0) (sealed . z4edf) (protocol . z4ede) (parent . z4edd) (immutable . z4edc) (mutable . z4edb) (fields . z4eda) (error-handling-mode . z4ed9) (file-options . z4ed8) (buffer-mode . z4ed7) (eol-style . z4ed6) (guard . z4ed5) (unsyntax-splicing . z4ed2) (unsyntax . z4ed1) (unquote-splicing . z4ed0) (unquote . z4ecf) (_ . z4ece) (else . z4ecd) (=> . z4ecc) (... . z4ecb) (assert . z4eca) (endianness . z4ec9) (time . z4ec7) (do . z4ec6) (cond . z4ec5) (let* . z4ec4) (let . z4ec3) (let*-values . z4ec2) (let-values . z4ec1) (identifier-syntax . z4ec0) (with-syntax . z4ebf) (quasisyntax . z4ebe) (quasiquote . z4ebd) (syntax-rules . z4ebc) (include . z4ebb) (record-constructor-descriptor . z4eb9) (record-type-descriptor . z4eb8) (case . z4eb7) (unless . z4eb5) (when . z4eb4) (or . z4eb3) (and . z4eb2) (if . z4eb1) (letrec* . z4eb0) (letrec . z4eaf) (case-lambda . z4ead) (lambda . z4eac) (syntax . z4eab) (syntax-case . z4eaa) (quote . z4ea9) (letrec-syntax . z4ea7) (let-syntax . z4ea6) (set! . z4ea5) (import . z4ea4) (begin . z4ea3) (define-syntax . z4ea1) (define . z4ea0)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z517e '(psyntax null-environment-5) '() '() '() '() '((make-promise . z5080) (unquote-splicing . z4ed0) (unquote . z4ecf) (_ . z4ece) (else . z4ecd) (=> . z4ecc) (... . z4ecb) (delay . z4ec8) (do . z4ec6) (cond . z4ec5) (let* . z4ec4) (let . z4ec3) (quasiquote . z4ebd) (syntax-rules . z4ebc) (case . z4eb7) (or . z4eb3) (and . z4eb2) (if . z4eb1) (letrec . z4eaf) (lambda . z4eac) (quote . z4ea9) (letrec-syntax . z4ea7) (let-syntax . z4ea6) (set! . z4ea5) (begin . z4ea3) (define-syntax . z4ea1) (define . z4ea0)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z517f '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . z5115) (string-ci>=? . z5114) (string-ci=? . z5113) (string-ci<? . z5112) (string-ci<=? . z5111) (char-whitespace? . z5110) (char-upper-case? . z510f) (char-numeric? . z510d) (char-lower-case? . z510c) (char-upcase . z510a) (char-downcase . z5107) (char-ci>? . z5106) (char-ci>=? . z5105) (char-ci=? . z5104) (char-ci<? . z5103) (char-ci<=? . z5102) (char-alphabetic? . z5101) (call-with-output-file . z50d5) (call-with-input-file . z50d4) (write-char . z50d3) (write . z50d2) (with-output-to-file . z50d1) (with-input-from-file . z50d0) (read-char . z50cf) (read . z50ce) (peek-char . z50cd) (open-output-file . z50cc) (open-input-file . z50cb) (newline . z50ca) (display . z50c9) (close-output-port . z50c8) (close-input-port . z50c7) (eof-object . z50c5) (current-output-port . z50c3) (current-input-port . z50c2) (output-port? . z50c1) (input-port? . z50c0) (scheme-report-environment . z2f88) (quotient . z5086) (null-environment . z2f86) (remainder . z5085) (modulo . z5084) (inexact->exact . z5083) (force . z5082) (exact->inexact . z5081) (make-promise . z5080) (string-fill! . z507e) (string-set! . z507d) (set-cdr! . z507c) (set-car! . z507b) (memv . z5075) (memq . z5074) (member . z5072) (assv . z506a) (assq . z5069) (assoc . z5067) (eval . z2f8c) (zero? . z4fa4) (vector? . z4fa3) (vector-set! . z4fa2) (vector-ref . z4fa1) (vector-length . z4f9f) (vector-fill! . z4f9d) (vector->list . z4f9c) (vector . z4f9b) (values . z4f9a) (truncate . z4f99) (tan . z4f98) (symbol? . z4f97) (symbol->string . z4f95) (substring . z4f94) (string? . z4f93) (string>? . z4f92) (string>=? . z4f91) (string=? . z4f90) (string<? . z4f8f) (string<=? . z4f8e) (string-ref . z4f8d) (string-length . z4f8c) (string-copy . z4f8a) (string-append . z4f89) (string->symbol . z4f88) (string->number . z4f87) (string->list . z4f86) (string . z4f85) (sqrt . z4f84) (sin . z4f83) (round . z4f82) (reverse . z4f81) (real? . z4f80) (real-part . z4f7e) (rationalize . z4f7d) (rational? . z4f7c) (procedure? . z4f7a) (positive? . z4f79) (pair? . z4f78) (odd? . z4f77) (numerator . z4f76) (number? . z4f75) (number->string . z4f74) (not . z4f72) (negative? . z4f71) (min . z4f6f) (max . z4f6e) (map . z4f6d) (make-vector . z4f6c) (make-string . z4f6b) (make-rectangular . z4f6a) (make-polar . z4f69) (magnitude . z4f68) (log . z4f67) (list? . z4f66) (list-tail . z4f65) (list-ref . z4f64) (list->vector . z4f63) (list->string . z4f62) (list . z4f61) (length . z4f60) (lcm . z4f5f) (integer? . z4f5e) (integer->char . z4f5c) (inexact? . z4f5a) (imag-part . z4f58) (gcd . z4f57) (for-each . z4f56) (floor . z4f55) (expt . z4f53) (exp . z4f52) (exact? . z4f51) (even? . z4f4e) (eqv? . z4f4c) (equal? . z4f4b) (eq? . z4f4a) (dynamic-wind . z4f49) (denominator . z4f42) (cos . z4f41) (cons . z4f40) (complex? . z4f3f) (char? . z4f3e) (char>? . z4f3d) (char>=? . z4f3c) (char=? . z4f3b) (char<? . z4f3a) (char<=? . z4f39) (char->integer . z4f38) (ceiling . z4f37) (call-with-values . z4f36) (call-with-current-continuation . z4f34) (cddddr . z4f33) (cdddar . z4f32) (cddadr . z4f31) (cddaar . z4f30) (cdaddr . z4f2f) (cdadar . z4f2e) (cdaadr . z4f2d) (cdaaar . z4f2c) (cadddr . z4f2b) (caddar . z4f2a) (cadadr . z4f29) (cadaar . z4f28) (caaddr . z4f27) (caadar . z4f26) (caaadr . z4f25) (caaaar . z4f24) (cdddr . z4f23) (cddar . z4f22) (cdadr . z4f21) (cdaar . z4f20) (caddr . z4f1f) (cadar . z4f1e) (caadr . z4f1d) (caaar . z4f1c) (cddr . z4f1b) (cdar . z4f1a) (cadr . z4f19) (caar . z4f18) (cdr . z4f17) (car . z4f16) (boolean? . z4f15) (atan . z4f13) (asin . z4f11) (apply . z4f10) (append . z4f0f) (angle . z4f0e) (acos . z4f0d) (abs . z4f0c) (/ . z4f0b) (* . z4f0a) (- . z4f09) (+ . z4f08) (>= . z4f07) (> . z4f06) (= . z4f05) (<= . z4f04) (< . z4f03) (unquote-splicing . z4ed0) (unquote . z4ecf) (else . z4ecd) (=> . z4ecc) (... . z4ecb) (delay . z4ec8) (do . z4ec6) (cond . z4ec5) (let* . z4ec4) (let . z4ec3) (quasiquote . z4ebd) (syntax-rules . z4ebc) (case . z4eb7) (or . z4eb3) (and . z4eb2) (if . z4eb1) (letrec . z4eaf) (lambda . z4eac) (quote . z4ea9) (letrec-syntax . z4ea7) (let-syntax . z4ea6) (set! . z4ea5) (begin . z4ea3) (define-syntax . z4ea1) (define . z4ea0)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5180 '(psyntax modules) '() '() '() '() '((module . z4ea2)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5181 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5182 '(rnrs) '(6) '() '() '() '((regexp? . z5175) (string-upcase . z511d) (string-titlecase . z511c) (string-normalize-nfkd . z511b) (string-normalize-nfkc . z511a) (string-normalize-nfd . z5119) (string-normalize-nfc . z5118) (string-foldcase . z5117) (string-downcase . z5116) (string-ci>? . z5115) (string-ci>=? . z5114) (string-ci=? . z5113) (string-ci<? . z5112) (string-ci<=? . z5111) (char-whitespace? . z5110) (char-upper-case? . z510f) (char-title-case? . z510e) (char-numeric? . z510d) (char-lower-case? . z510c) (char-general-category . z510b) (char-upcase . z510a) (char-titlecase . z5109) (char-foldcase . z5108) (char-downcase . z5107) (char-ci>? . z5106) (char-ci>=? . z5105) (char-ci=? . z5104) (char-ci<? . z5103) (char-ci<=? . z5102) (char-alphabetic? . z5101) (make-variable-transformer . z2cf0) (identifier? . z2fae) (generate-temporaries . z2f9a) (free-identifier=? . z2f9c) (syntax->datum . z2fb2) (datum->syntax . z2fb0) (bound-identifier=? . z2f9e) (record-type-descriptor? . z5100) (record-predicate . z50ff) (record-mutator . z50fe) (record-constructor . z50fd) (record-accessor . z50fc) (make-record-type-descriptor . z50fb) (make-record-constructor-descriptor . z50fa) (record? . z50f9) (record-type-uid . z50f8) (record-type-sealed? . z50f7) (record-type-parent . z50f6) (record-type-opaque? . z50f5) (record-type-name . z50f4) (record-type-generative? . z50f3) (record-type-field-names . z50f2) (record-rtd . z50f1) (record-field-mutable? . z50f0) (delete-file . z50ef) (file-exists? . z50ee) (vector-sort! . z50ed) (vector-sort . z50ec) (list-sort . z50eb) (symbol-hash . z50ea) (string-ci-hash . z50e9) (string-hash . z50e8) (equal-hash . z50e7) (hashtable-equivalence-function . z50e6) (make-hashtable . z50e5) (hashtable-hash-function . z50e4) (make-eqv-hashtable . z50e3) (make-eq-hashtable . z50e2) (hashtable? . z50e1) (hashtable-update! . z50e0) (hashtable-size . z50df) (hashtable-set! . z50de) (hashtable-ref . z50dd) (hashtable-mutable? . z50dc) (hashtable-keys . z50db) (hashtable-entries . z50da) (hashtable-delete! . z50d9) (hashtable-copy . z50d8) (hashtable-contains? . z50d7) (hashtable-clear! . z50d6) (call-with-output-file . z50d5) (call-with-input-file . z50d4) (write-char . z50d3) (write . z50d2) (with-output-to-file . z50d1) (with-input-from-file . z50d0) (read-char . z50cf) (read . z50ce) (peek-char . z50cd) (open-output-file . z50cc) (open-input-file . z50cb) (newline . z50ca) (display . z50c9) (close-output-port . z50c8) (close-input-port . z50c7) (eof-object? . z50c6) (eof-object . z50c5) (current-error-port . z50c4) (current-output-port . z50c3) (current-input-port . z50c2) (output-port? . z50c1) (input-port? . z50c0) (utf-8-codec . z50bf) (utf-16-codec . z50be) (transcoder-error-handling-mode . z50bd) (transcoder-eol-style . z50bc) (transcoder-codec . z50bb) (transcoded-port . z50ba) (textual-port? . z50b9) (string->bytevector . z50b8) (standard-output-port . z50b7) (standard-input-port . z50b6) (standard-error-port . z50b5) (set-port-position! . z50b4) (put-u8 . z50b3) (put-string . z50b2) (put-datum . z50b1) (put-char . z50b0) (put-bytevector . z50af) (port? . z50ae) (port-transcoder . z50ad) (port-position . z50ac) (port-has-set-port-position!? . z50ab) (port-has-port-position? . z50aa) (port-eof? . z50a9) (output-port-buffer-mode . z50a8) (open-string-output-port . z50a7) (open-string-input-port . z50a6) (open-file-output-port . z50a5) (open-file-input/output-port . z50a4) (open-file-input-port . z50a3) (open-bytevector-output-port . z50a2) (open-bytevector-input-port . z50a1) (native-transcoder . z50a0) (native-eol-style . z509f) (make-transcoder . z509e) (latin-1-codec . z509d) (make-i/o-write-error . z4b6e) (make-i/o-read-error . z4b59) (make-i/o-port-error . z4c0f) (make-i/o-invalid-position-error . z4b85) (make-i/o-filename-error . z4ba0) (make-i/o-file-protection-error . z4bb9) (make-i/o-file-is-read-only-error . z4bce) (make-i/o-file-does-not-exist-error . z4bf8) (make-i/o-file-already-exists-error . z4be3) (make-i/o-error . z4b44) (make-i/o-encoding-error . z4c3f) (make-i/o-decoding-error . z4c28) (make-custom-textual-output-port . z509c) (make-custom-textual-input/output-port . z509b) (make-custom-textual-input-port . z509a) (make-custom-binary-output-port . z5099) (make-custom-binary-input/output-port . z5098) (make-custom-binary-input-port . z5097) (make-bytevector . z5096) (lookahead-u8 . z5095) (lookahead-char . z5094) (i/o-write-error? . z4b70) (i/o-read-error? . z4b5b) (i/o-port-error? . z4c13) (i/o-invalid-position-error? . z4b89) (i/o-filename-error? . z4ba4) (i/o-file-protection-error? . z4bbb) (i/o-file-is-read-only-error? . z4bd0) (i/o-file-does-not-exist-error? . z4bfa) (i/o-file-already-exists-error? . z4be5) (i/o-error? . z4b46) (i/o-error-position . z4b8b) (i/o-error-port . z4c15) (i/o-error-filename . z4ba6) (i/o-encoding-error? . z4c43) (i/o-encoding-error-char . z4c45) (i/o-decoding-error? . z4c2a) (get-u8 . z5093) (get-string-n! . z5092) (get-string-n . z5091) (get-string-all . z5090) (get-line . z508f) (get-datum . z508e) (get-char . z508d) (get-bytevector-some . z508c) (get-bytevector-n! . z508b) (get-bytevector-n . z508a) (get-bytevector-all . z5089) (flush-output-port . z5088) (close-port . z5087) (exit . z507f) (command-line . z4d7a) (remove . z507a) (remv . z5079) (remp . z5078) (remq . z5077) (partition . z5076) (memv . z5075) (memq . z5074) (memp . z5073) (member . z5072) (exists . z5071) (for-all . z5070) (fold-right . z506f) (fold-left . z506e) (find . z506d) (filter . z506c) (cons* . z506b) (assv . z506a) (assq . z5069) (assp . z5068) (assoc . z5067) (call-with-string-output-port . z5066) (call-with-port . z5065) (call-with-bytevector-output-port . z5064) (bytevector->string . z5063) (buffer-mode? . z5062) (binary-port? . z5061) (with-exception-handler . z5060) (raise-continuable . z505f) (raise . z505e) (make-enumeration . z505d) (enum-set=? . z505c) (enum-set-universe . z505b) (enum-set-union . z505a) (enum-set-subset? . z5059) (enum-set-projection . z5058) (enum-set-member? . z5057) (enum-set-intersection . z5056) (enum-set-indexer . z5055) (enum-set-difference . z5054) (enum-set-constructor . z5053) (enum-set-complement . z5052) (enum-set->list . z5051) (who-condition? . z4aba) (warning? . z4a32) (violation? . z4a71) (undefined-violation? . z4b31) (syntax-violation? . z4b18) (syntax-violation-subform . z4b1c) (syntax-violation-form . z4b1a) (syntax-violation . z2fac) (simple-conditions . z5050) (serious-condition? . z4a47) (non-continuable-violation? . z4ad1) (message-condition? . z4a1b) (make-who-condition . z4ab6) (make-warning . z4a30) (make-violation . z4a6f) (make-undefined-violation . z4b2f) (make-syntax-violation . z4b12) (make-serious-condition . z4a45) (make-non-continuable-violation . z4acf) (make-message-condition . z4a17) (make-lexical-violation . z4af9) (make-irritants-condition . z4a9b) (make-implementation-restriction-violation . z4ae4) (make-error . z4a5a) (make-assertion-violation . z4a84) (lexical-violation? . z4afb) (irritants-condition? . z4a9f) (implementation-restriction-violation? . z4ae6) (error? . z4a5c) (condition-who . z4abc) (condition-predicate . z504f) (condition-message . z4a1d) (condition-irritants . z4aa1) (condition-accessor . z504e) (condition . z504d) (assertion-violation? . z4a86) (condition? . z504c) (utf32->string . z504b) (utf16->string . z504a) (utf8->string . z5049) (uint-list->bytevector . z5048) (u8-list->bytevector . z5047) (string->utf8 . z5046) (string->utf32 . z5045) (string->utf16 . z5044) (sint-list->bytevector . z5043) (native-endianness . z5042) (bytevector? . z5041) (bytevector=? . z5040) (bytevector-uint-set! . z503f) (bytevector-uint-ref . z503e) (bytevector-u8-set! . z503d) (bytevector-u8-ref . z503c) (bytevector-u64-set! . z503b) (bytevector-u64-ref . z503a) (bytevector-u64-native-set! . z5039) (bytevector-u64-native-ref . z5038) (bytevector-u32-set! . z5037) (bytevector-u32-ref . z5036) (bytevector-u32-native-set! . z5035) (bytevector-u32-native-ref . z5034) (bytevector-u16-set! . z5033) (bytevector-u16-ref . z5032) (bytevector-u16-native-set! . z5031) (bytevector-u16-native-ref . z5030) (bytevector-sint-set! . z502f) (bytevector-sint-ref . z502e) (bytevector-s8-set! . z502d) (bytevector-s8-ref . z502c) (bytevector-s64-set! . z502b) (bytevector-s64-ref . z502a) (bytevector-s64-native-set! . z5029) (bytevector-s64-native-ref . z5028) (bytevector-s32-set! . z5027) (bytevector-s32-ref . z5026) (bytevector-s32-native-set! . z5025) (bytevector-s32-native-ref . z5024) (bytevector-s16-set! . z5023) (bytevector-s16-ref . z5022) (bytevector-s16-native-set! . z5021) (bytevector-s16-native-ref . z5020) (bytevector-length . z501f) (bytevector-ieee-single-ref . z501e) (bytevector-ieee-single-set! . z501d) (bytevector-ieee-single-native-set! . z501c) (bytevector-ieee-single-native-ref . z501b) (bytevector-ieee-double-set! . z501a) (bytevector-ieee-double-ref . z5019) (bytevector-ieee-double-native-set! . z5018) (bytevector-ieee-double-native-ref . z5017) (bytevector-fill! . z5016) (bytevector-copy! . z5015) (bytevector-copy . z5014) (bytevector->uint-list . z5013) (bytevector->u8-list . z5012) (bytevector->sint-list . z5011) (no-nans-violation? . z4c6f) (no-infinities-violation? . z4c5a) (make-no-nans-violation . z4c6d) (make-no-infinities-violation . z4c58) (real->flonum . z5010) (flzero? . z500f) (fltruncate . z500e) (fltan . z500d) (flsqrt . z500c) (flsin . z500b) (flround . z500a) (flpositive? . z5009) (flonum? . z5008) (flodd? . z5007) (flnumerator . z5006) (flnegative? . z5005) (flnan? . z5004) (flmod0 . z5003) (flmod . z5002) (flmin . z5001) (flmax . z5000) (fllog . z4fff) (flinteger? . z4ffe) (flinfinite? . z4ffd) (flfloor . z4ffc) (flfinite? . z4ffb) (flexpt . z4ffa) (flexp . z4ff9) (fleven? . z4ff8) (fldiv0-and-mod0 . z4ff7) (fldiv0 . z4ff6) (fldiv-and-mod . z4ff5) (fldiv . z4ff4) (fldenominator . z4ff3) (flcos . z4ff2) (flceiling . z4ff1) (flatan . z4ff0) (flasin . z4fef) (flacos . z4fee) (flabs . z4fed) (fl>? . z4fec) (fl>=? . z4feb) (fl=? . z4fea) (fl<? . z4fe9) (fl<=? . z4fe8) (fl/ . z4fe7) (fl- . z4fe6) (fl+ . z4fe5) (fl* . z4fe4) (fixnum->flonum . z4fe3) (fxzero? . z4fe2) (fxxor . z4fe1) (fxrotate-bit-field . z4fe0) (fxreverse-bit-field . z4fdf) (fxpositive? . z4fde) (fxodd? . z4fdd) (fxnot . z4fdc) (fxnegative? . z4fdb) (fxmod0 . z4fda) (fxmod . z4fd9) (fxmin . z4fd8) (fxmax . z4fd7) (fxlength . z4fd6) (fxior . z4fd5) (fxif . z4fd4) (fxfirst-bit-set . z4fd3) (fxeven? . z4fd2) (fxdiv0-and-mod0 . z4fd1) (fxdiv0 . z4fd0) (fxdiv-and-mod . z4fcf) (fxdiv . z4fce) (fxcopy-bit-field . z4fcd) (fxcopy-bit . z4fcc) (fxbit-set? . z4fcb) (fxbit-field . z4fca) (fxbit-count . z4fc9) (fxarithmetic-shift-right . z4fc8) (fxarithmetic-shift-left . z4fc7) (fxarithmetic-shift . z4fc6) (fxand . z4fc5) (fx>? . z4fc4) (fx>=? . z4fc3) (fx=? . z4fc2) (fx<? . z4fc1) (fx<=? . z4fc0) (fx-/carry . z4fbf) (fx- . z4fbe) (fx+/carry . z4fbd) (fx+ . z4fbc) (fx*/carry . z4fbb) (fx* . z4fba) (greatest-fixnum . z4fb9) (least-fixnum . z4fb8) (fixnum-width . z4fb7) (fixnum? . z4fb6) (bitwise-rotate-bit-field . z4fb5) (bitwise-reverse-bit-field . z4fb4) (bitwise-length . z4fb3) (bitwise-if . z4fb2) (bitwise-first-bit-set . z4fb1) (bitwise-copy-bit-field . z4fb0) (bitwise-copy-bit . z4faf) (bitwise-bit-set? . z4fae) (bitwise-bit-field . z4fad) (bitwise-bit-count . z4fac) (bitwise-xor . z4fab) (bitwise-ior . z4faa) (bitwise-and . z4fa9) (bitwise-not . z4fa8) (bitwise-arithmetic-shift-right . z4fa7) (bitwise-arithmetic-shift-left . z4fa6) (bitwise-arithmetic-shift . z4fa5) (zero? . z4fa4) (vector? . z4fa3) (vector-set! . z4fa2) (vector-ref . z4fa1) (vector-map . z4fa0) (vector-length . z4f9f) (vector-for-each . z4f9e) (vector-fill! . z4f9d) (vector->list . z4f9c) (vector . z4f9b) (values . z4f9a) (truncate . z4f99) (tan . z4f98) (symbol? . z4f97) (symbol=? . z4f96) (symbol->string . z4f95) (substring . z4f94) (string? . z4f93) (string>? . z4f92) (string>=? . z4f91) (string=? . z4f90) (string<? . z4f8f) (string<=? . z4f8e) (string-ref . z4f8d) (string-length . z4f8c) (string-for-each . z4f8b) (string-copy . z4f8a) (string-append . z4f89) (string->symbol . z4f88) (string->number . z4f87) (string->list . z4f86) (string . z4f85) (sqrt . z4f84) (sin . z4f83) (round . z4f82) (reverse . z4f81) (real? . z4f80) (real-valued? . z4f7f) (real-part . z4f7e) (rationalize . z4f7d) (rational? . z4f7c) (rational-valued? . z4f7b) (procedure? . z4f7a) (positive? . z4f79) (pair? . z4f78) (odd? . z4f77) (numerator . z4f76) (number? . z4f75) (number->string . z4f74) (null? . z4f73) (not . z4f72) (negative? . z4f71) (nan? . z4f70) (min . z4f6f) (max . z4f6e) (map . z4f6d) (make-vector . z4f6c) (make-string . z4f6b) (make-rectangular . z4f6a) (make-polar . z4f69) (magnitude . z4f68) (log . z4f67) (list? . z4f66) (list-tail . z4f65) (list-ref . z4f64) (list->vector . z4f63) (list->string . z4f62) (list . z4f61) (length . z4f60) (lcm . z4f5f) (integer? . z4f5e) (integer-valued? . z4f5d) (integer->char . z4f5c) (infinite? . z4f5b) (inexact? . z4f5a) (inexact . z4f59) (imag-part . z4f58) (gcd . z4f57) (for-each . z4f56) (floor . z4f55) (finite? . z4f54) (expt . z4f53) (exp . z4f52) (exact? . z4f51) (exact-integer-sqrt . z4f50) (exact . z4f4f) (even? . z4f4e) (error . z4f4d) (eqv? . z4f4c) (equal? . z4f4b) (eq? . z4f4a) (dynamic-wind . z4f49) (div0-and-mod0 . z4f48) (mod0 . z4f47) (div0 . z4f46) (div-and-mod . z4f45) (mod . z4f44) (div . z4f43) (denominator . z4f42) (cos . z4f41) (cons . z4f40) (complex? . z4f3f) (char? . z4f3e) (char>? . z4f3d) (char>=? . z4f3c) (char=? . z4f3b) (char<? . z4f3a) (char<=? . z4f39) (char->integer . z4f38) (ceiling . z4f37) (call-with-values . z4f36) (call/cc . z4f35) (call-with-current-continuation . z4f34) (cddddr . z4f33) (cdddar . z4f32) (cddadr . z4f31) (cddaar . z4f30) (cdaddr . z4f2f) (cdadar . z4f2e) (cdaadr . z4f2d) (cdaaar . z4f2c) (cadddr . z4f2b) (caddar . z4f2a) (cadadr . z4f29) (cadaar . z4f28) (caaddr . z4f27) (caadar . z4f26) (caaadr . z4f25) (caaaar . z4f24) (cdddr . z4f23) (cddar . z4f22) (cdadr . z4f21) (cdaar . z4f20) (caddr . z4f1f) (cadar . z4f1e) (caadr . z4f1d) (caaar . z4f1c) (cddr . z4f1b) (cdar . z4f1a) (cadr . z4f19) (caar . z4f18) (cdr . z4f17) (car . z4f16) (boolean? . z4f15) (boolean=? . z4f14) (atan . z4f13) (assertion-violation . z4f12) (asin . z4f11) (apply . z4f10) (append . z4f0f) (angle . z4f0e) (acos . z4f0d) (abs . z4f0c) (/ . z4f0b) (* . z4f0a) (- . z4f09) (+ . z4f08) (>= . z4f07) (> . z4f06) (= . z4f05) (<= . z4f04) (< . z4f03) (&no-nans . z4f01) (&no-infinities . z4f00) (&i/o-encoding . z4eff) (&i/o-decoding . z4efe) (&i/o-port . z4efd) (&i/o-file-does-not-exist . z4efc) (&i/o-file-already-exists . z4efb) (&i/o-file-is-read-only . z4efa) (&i/o-file-protection . z4ef9) (&i/o-filename . z4ef8) (&i/o-invalid-position . z4ef7) (&i/o-write . z4ef6) (&i/o-read . z4ef5) (&i/o . z4ef4) (&undefined . z4ef3) (&syntax . z4ef2) (&lexical . z4ef1) (&implementation-restriction . z4ef0) (&non-continuable . z4eef) (&who . z4eee) (&irritants . z4eed) (&assertion . z4eec) (&violation . z4eeb) (&error . z4eea) (&serious . z4ee9) (&warning . z4ee8) (&message . z4ee7) (&condition . z4ee6) (define-condition-type . z4ee5) (define-enumeration . z4ee4) (define-record-type . z4ee3) (parent-rtd . z4ee2) (nongenerative . z4ee1) (opaque . z4ee0) (sealed . z4edf) (protocol . z4ede) (parent . z4edd) (immutable . z4edc) (mutable . z4edb) (fields . z4eda) (error-handling-mode . z4ed9) (file-options . z4ed8) (buffer-mode . z4ed7) (eol-style . z4ed6) (guard . z4ed5) (unsyntax-splicing . z4ed2) (unsyntax . z4ed1) (unquote-splicing . z4ed0) (unquote . z4ecf) (_ . z4ece) (else . z4ecd) (=> . z4ecc) (... . z4ecb) (assert . z4eca) (endianness . z4ec9) (do . z4ec6) (cond . z4ec5) (let* . z4ec4) (let . z4ec3) (let*-values . z4ec2) (let-values . z4ec1) (identifier-syntax . z4ec0) (with-syntax . z4ebf) (quasisyntax . z4ebe) (quasiquote . z4ebd) (syntax-rules . z4ebc) (record-constructor-descriptor . z4eb9) (record-type-descriptor . z4eb8) (case . z4eb7) (unless . z4eb5) (when . z4eb4) (or . z4eb3) (and . z4eb2) (if . z4eb1) (letrec* . z4eb0) (letrec . z4eaf) (case-lambda . z4ead) (lambda . z4eac) (syntax . z4eab) (syntax-case . z4eaa) (quote . z4ea9) (letrec-syntax . z4ea7) (let-syntax . z4ea6) (set! . z4ea5) (begin . z4ea3) (define-syntax . z4ea1) (define . z4ea0)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5183 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . z2f88) (quotient . z5086) (null-environment . z2f86) (remainder . z5085) (modulo . z5084) (inexact->exact . z5083) (force . z5082) (exact->inexact . z5081) (make-promise . z5080) (delay . z4ec8)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5184 '(rnrs control) '(6) '() '() '() '((do . z4ec6) (unless . z4eb5) (when . z4eb4) (case-lambda . z4ead)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5185 '(rnrs eval) '(6) '() '() '() '((eval . z2f8c) (environment . z2f84)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5186 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . z507c) (set-car! . z507b)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5187 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . z507e) (string-set! . z507d)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5188 '(rnrs programs) '(6) '() '() '() '((exit . z507f) (command-line . z4d7a)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5189 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . z2cf0) (identifier? . z2fae) (generate-temporaries . z2f9a) (free-identifier=? . z2f9c) (syntax->datum . z2fb2) (datum->syntax . z2fb0) (bound-identifier=? . z2f9e) (syntax-violation . z2fac) (unsyntax-splicing . z4ed2) (unsyntax . z4ed1) (_ . z4ece) (... . z4ecb) (with-syntax . z4ebf) (quasisyntax . z4ebe) (syntax . z4eab) (syntax-case . z4eaa)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z518a '(rnrs files) '(6) '() '() '() '((delete-file . z50ef) (file-exists? . z50ee) (make-i/o-write-error . z4b6e) (make-i/o-read-error . z4b59) (make-i/o-port-error . z4c0f) (make-i/o-invalid-position-error . z4b85) (make-i/o-filename-error . z4ba0) (make-i/o-file-protection-error . z4bb9) (make-i/o-file-is-read-only-error . z4bce) (make-i/o-file-does-not-exist-error . z4bf8) (make-i/o-file-already-exists-error . z4be3) (make-i/o-error . z4b44) (i/o-write-error? . z4b70) (i/o-read-error? . z4b5b) (i/o-port-error? . z4c13) (i/o-invalid-position-error? . z4b89) (i/o-filename-error? . z4ba4) (i/o-file-protection-error? . z4bbb) (i/o-file-is-read-only-error? . z4bd0) (i/o-file-does-not-exist-error? . z4bfa) (i/o-file-already-exists-error? . z4be5) (i/o-error? . z4b46) (i/o-error-position . z4b8b) (i/o-error-port . z4c15) (i/o-error-filename . z4ba6) (&i/o-port . z4efd) (&i/o-file-does-not-exist . z4efc) (&i/o-file-already-exists . z4efb) (&i/o-file-is-read-only . z4efa) (&i/o-file-protection . z4ef9) (&i/o-filename . z4ef8) (&i/o-invalid-position . z4ef7) (&i/o-write . z4ef6) (&i/o-read . z4ef5) (&i/o . z4ef4)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z518b '(rnrs sorting) '(6) '() '() '() '((vector-sort! . z50ed) (vector-sort . z50ec) (list-sort . z50eb)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z518c '(rnrs base) '(6) '() '() '() '((zero? . z4fa4) (vector? . z4fa3) (vector-set! . z4fa2) (vector-ref . z4fa1) (vector-map . z4fa0) (vector-length . z4f9f) (vector-for-each . z4f9e) (vector-fill! . z4f9d) (vector->list . z4f9c) (vector . z4f9b) (values . z4f9a) (truncate . z4f99) (tan . z4f98) (symbol? . z4f97) (symbol=? . z4f96) (symbol->string . z4f95) (substring . z4f94) (string? . z4f93) (string>? . z4f92) (string>=? . z4f91) (string=? . z4f90) (string<? . z4f8f) (string<=? . z4f8e) (string-ref . z4f8d) (string-length . z4f8c) (string-for-each . z4f8b) (string-copy . z4f8a) (string-append . z4f89) (string->symbol . z4f88) (string->number . z4f87) (string->list . z4f86) (string . z4f85) (sqrt . z4f84) (sin . z4f83) (round . z4f82) (reverse . z4f81) (real? . z4f80) (real-valued? . z4f7f) (real-part . z4f7e) (rationalize . z4f7d) (rational? . z4f7c) (rational-valued? . z4f7b) (procedure? . z4f7a) (positive? . z4f79) (pair? . z4f78) (odd? . z4f77) (numerator . z4f76) (number? . z4f75) (number->string . z4f74) (null? . z4f73) (not . z4f72) (negative? . z4f71) (nan? . z4f70) (min . z4f6f) (max . z4f6e) (map . z4f6d) (make-vector . z4f6c) (make-string . z4f6b) (make-rectangular . z4f6a) (make-polar . z4f69) (magnitude . z4f68) (log . z4f67) (list? . z4f66) (list-tail . z4f65) (list-ref . z4f64) (list->vector . z4f63) (list->string . z4f62) (list . z4f61) (length . z4f60) (lcm . z4f5f) (integer? . z4f5e) (integer-valued? . z4f5d) (integer->char . z4f5c) (infinite? . z4f5b) (inexact? . z4f5a) (inexact . z4f59) (imag-part . z4f58) (gcd . z4f57) (for-each . z4f56) (floor . z4f55) (finite? . z4f54) (expt . z4f53) (exp . z4f52) (exact? . z4f51) (exact-integer-sqrt . z4f50) (exact . z4f4f) (even? . z4f4e) (error . z4f4d) (eqv? . z4f4c) (equal? . z4f4b) (eq? . z4f4a) (dynamic-wind . z4f49) (div0-and-mod0 . z4f48) (mod0 . z4f47) (div0 . z4f46) (div-and-mod . z4f45) (mod . z4f44) (div . z4f43) (denominator . z4f42) (cos . z4f41) (cons . z4f40) (complex? . z4f3f) (char? . z4f3e) (char>? . z4f3d) (char>=? . z4f3c) (char=? . z4f3b) (char<? . z4f3a) (char<=? . z4f39) (char->integer . z4f38) (ceiling . z4f37) (call-with-values . z4f36) (call/cc . z4f35) (call-with-current-continuation . z4f34) (cddddr . z4f33) (cdddar . z4f32) (cddadr . z4f31) (cddaar . z4f30) (cdaddr . z4f2f) (cdadar . z4f2e) (cdaadr . z4f2d) (cdaaar . z4f2c) (cadddr . z4f2b) (caddar . z4f2a) (cadadr . z4f29) (cadaar . z4f28) (caaddr . z4f27) (caadar . z4f26) (caaadr . z4f25) (caaaar . z4f24) (cdddr . z4f23) (cddar . z4f22) (cdadr . z4f21) (cdaar . z4f20) (caddr . z4f1f) (cadar . z4f1e) (caadr . z4f1d) (caaar . z4f1c) (cddr . z4f1b) (cdar . z4f1a) (cadr . z4f19) (caar . z4f18) (cdr . z4f17) (car . z4f16) (boolean? . z4f15) (boolean=? . z4f14) (atan . z4f13) (assertion-violation . z4f12) (asin . z4f11) (apply . z4f10) (append . z4f0f) (angle . z4f0e) (acos . z4f0d) (abs . z4f0c) (/ . z4f0b) (* . z4f0a) (- . z4f09) (+ . z4f08) (>= . z4f07) (> . z4f06) (= . z4f05) (<= . z4f04) (< . z4f03) (unquote-splicing . z4ed0) (unquote . z4ecf) (_ . z4ece) (else . z4ecd) (=> . z4ecc) (... . z4ecb) (assert . z4eca) (cond . z4ec5) (let* . z4ec4) (let . z4ec3) (let*-values . z4ec2) (let-values . z4ec1) (identifier-syntax . z4ec0) (quasiquote . z4ebd) (syntax-rules . z4ebc) (case . z4eb7) (or . z4eb3) (and . z4eb2) (if . z4eb1) (letrec* . z4eb0) (letrec . z4eaf) (lambda . z4eac) (quote . z4ea9) (letrec-syntax . z4ea7) (let-syntax . z4ea6) (set! . z4ea5) (begin . z4ea3) (define-syntax . z4ea1) (define . z4ea0)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z518d '(rnrs lists) '(6) '() '() '() '((remove . z507a) (remv . z5079) (remp . z5078) (remq . z5077) (partition . z5076) (memv . z5075) (memq . z5074) (memp . z5073) (member . z5072) (exists . z5071) (for-all . z5070) (fold-right . z506f) (fold-left . z506e) (find . z506d) (filter . z506c) (cons* . z506b) (assv . z506a) (assq . z5069) (assp . z5068) (assoc . z5067)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z518e '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . z50d5) (call-with-input-file . z50d4) (write-char . z50d3) (write . z50d2) (with-output-to-file . z50d1) (with-input-from-file . z50d0) (read-char . z50cf) (read . z50ce) (peek-char . z50cd) (open-output-file . z50cc) (open-input-file . z50cb) (newline . z50ca) (display . z50c9) (close-output-port . z50c8) (close-input-port . z50c7) (eof-object? . z50c6) (eof-object . z50c5) (current-error-port . z50c4) (current-output-port . z50c3) (current-input-port . z50c2) (output-port? . z50c1) (input-port? . z50c0) (make-i/o-write-error . z4b6e) (make-i/o-read-error . z4b59) (make-i/o-port-error . z4c0f) (make-i/o-invalid-position-error . z4b85) (make-i/o-filename-error . z4ba0) (make-i/o-file-protection-error . z4bb9) (make-i/o-file-is-read-only-error . z4bce) (make-i/o-file-does-not-exist-error . z4bf8) (make-i/o-file-already-exists-error . z4be3) (make-i/o-error . z4b44) (i/o-write-error? . z4b70) (i/o-read-error? . z4b5b) (i/o-port-error? . z4c13) (i/o-invalid-position-error? . z4b89) (i/o-filename-error? . z4ba4) (i/o-file-protection-error? . z4bbb) (i/o-file-is-read-only-error? . z4bd0) (i/o-file-does-not-exist-error? . z4bfa) (i/o-file-already-exists-error? . z4be5) (i/o-error? . z4b46) (i/o-error-position . z4b8b) (i/o-error-port . z4c15) (i/o-error-filename . z4ba6) (&i/o-port . z4efd) (&i/o-file-does-not-exist . z4efc) (&i/o-file-already-exists . z4efb) (&i/o-file-is-read-only . z4efa) (&i/o-file-protection . z4ef9) (&i/o-filename . z4ef8) (&i/o-invalid-position . z4ef7) (&i/o-write . z4ef6) (&i/o-read . z4ef5) (&i/o . z4ef4)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z518f '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . z5096) (utf32->string . z504b) (utf16->string . z504a) (utf8->string . z5049) (uint-list->bytevector . z5048) (u8-list->bytevector . z5047) (string->utf8 . z5046) (string->utf32 . z5045) (string->utf16 . z5044) (sint-list->bytevector . z5043) (native-endianness . z5042) (bytevector? . z5041) (bytevector=? . z5040) (bytevector-uint-set! . z503f) (bytevector-uint-ref . z503e) (bytevector-u8-set! . z503d) (bytevector-u8-ref . z503c) (bytevector-u64-set! . z503b) (bytevector-u64-ref . z503a) (bytevector-u64-native-set! . z5039) (bytevector-u64-native-ref . z5038) (bytevector-u32-set! . z5037) (bytevector-u32-ref . z5036) (bytevector-u32-native-set! . z5035) (bytevector-u32-native-ref . z5034) (bytevector-u16-set! . z5033) (bytevector-u16-ref . z5032) (bytevector-u16-native-set! . z5031) (bytevector-u16-native-ref . z5030) (bytevector-sint-set! . z502f) (bytevector-sint-ref . z502e) (bytevector-s8-set! . z502d) (bytevector-s8-ref . z502c) (bytevector-s64-set! . z502b) (bytevector-s64-ref . z502a) (bytevector-s64-native-set! . z5029) (bytevector-s64-native-ref . z5028) (bytevector-s32-set! . z5027) (bytevector-s32-ref . z5026) (bytevector-s32-native-set! . z5025) (bytevector-s32-native-ref . z5024) (bytevector-s16-set! . z5023) (bytevector-s16-ref . z5022) (bytevector-s16-native-set! . z5021) (bytevector-s16-native-ref . z5020) (bytevector-length . z501f) (bytevector-ieee-single-ref . z501e) (bytevector-ieee-single-set! . z501d) (bytevector-ieee-single-native-set! . z501c) (bytevector-ieee-single-native-ref . z501b) (bytevector-ieee-double-set! . z501a) (bytevector-ieee-double-ref . z5019) (bytevector-ieee-double-native-set! . z5018) (bytevector-ieee-double-native-ref . z5017) (bytevector-fill! . z5016) (bytevector-copy! . z5015) (bytevector-copy . z5014) (bytevector->uint-list . z5013) (bytevector->u8-list . z5012) (bytevector->sint-list . z5011) (endianness . z4ec9)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5190 '(rnrs unicode) '(6) '() '() '() '((string-upcase . z511d) (string-titlecase . z511c) (string-normalize-nfkd . z511b) (string-normalize-nfkc . z511a) (string-normalize-nfd . z5119) (string-normalize-nfc . z5118) (string-foldcase . z5117) (string-downcase . z5116) (string-ci>? . z5115) (string-ci>=? . z5114) (string-ci=? . z5113) (string-ci<? . z5112) (string-ci<=? . z5111) (char-whitespace? . z5110) (char-upper-case? . z510f) (char-title-case? . z510e) (char-numeric? . z510d) (char-lower-case? . z510c) (char-general-category . z510b) (char-upcase . z510a) (char-titlecase . z5109) (char-foldcase . z5108) (char-downcase . z5107) (char-ci>? . z5106) (char-ci>=? . z5105) (char-ci=? . z5104) (char-ci<? . z5103) (char-ci<=? . z5102) (char-alphabetic? . z5101)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5191 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . z5060) (raise-continuable . z505f) (raise . z505e) (guard . z4ed5) (else . z4ecd) (=> . z4ecc)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5192 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . z4fb5) (bitwise-reverse-bit-field . z4fb4) (bitwise-length . z4fb3) (bitwise-if . z4fb2) (bitwise-first-bit-set . z4fb1) (bitwise-copy-bit-field . z4fb0) (bitwise-copy-bit . z4faf) (bitwise-bit-set? . z4fae) (bitwise-bit-field . z4fad) (bitwise-bit-count . z4fac) (bitwise-xor . z4fab) (bitwise-ior . z4faa) (bitwise-and . z4fa9) (bitwise-not . z4fa8) (bitwise-arithmetic-shift-right . z4fa7) (bitwise-arithmetic-shift-left . z4fa6) (bitwise-arithmetic-shift . z4fa5)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5193 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . z4fe2) (fxxor . z4fe1) (fxrotate-bit-field . z4fe0) (fxreverse-bit-field . z4fdf) (fxpositive? . z4fde) (fxodd? . z4fdd) (fxnot . z4fdc) (fxnegative? . z4fdb) (fxmod0 . z4fda) (fxmod . z4fd9) (fxmin . z4fd8) (fxmax . z4fd7) (fxlength . z4fd6) (fxior . z4fd5) (fxif . z4fd4) (fxfirst-bit-set . z4fd3) (fxeven? . z4fd2) (fxdiv0-and-mod0 . z4fd1) (fxdiv0 . z4fd0) (fxdiv-and-mod . z4fcf) (fxdiv . z4fce) (fxcopy-bit-field . z4fcd) (fxcopy-bit . z4fcc) (fxbit-set? . z4fcb) (fxbit-field . z4fca) (fxbit-count . z4fc9) (fxarithmetic-shift-right . z4fc8) (fxarithmetic-shift-left . z4fc7) (fxarithmetic-shift . z4fc6) (fxand . z4fc5) (fx>? . z4fc4) (fx>=? . z4fc3) (fx=? . z4fc2) (fx<? . z4fc1) (fx<=? . z4fc0) (fx-/carry . z4fbf) (fx- . z4fbe) (fx+/carry . z4fbd) (fx+ . z4fbc) (fx*/carry . z4fbb) (fx* . z4fba) (greatest-fixnum . z4fb9) (least-fixnum . z4fb8) (fixnum-width . z4fb7) (fixnum? . z4fb6)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5194 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . z4c6f) (no-infinities-violation? . z4c5a) (make-no-nans-violation . z4c6d) (make-no-infinities-violation . z4c58) (real->flonum . z5010) (flzero? . z500f) (fltruncate . z500e) (fltan . z500d) (flsqrt . z500c) (flsin . z500b) (flround . z500a) (flpositive? . z5009) (flonum? . z5008) (flodd? . z5007) (flnumerator . z5006) (flnegative? . z5005) (flnan? . z5004) (flmod0 . z5003) (flmod . z5002) (flmin . z5001) (flmax . z5000) (fllog . z4fff) (flinteger? . z4ffe) (flinfinite? . z4ffd) (flfloor . z4ffc) (flfinite? . z4ffb) (flexpt . z4ffa) (flexp . z4ff9) (fleven? . z4ff8) (fldiv0-and-mod0 . z4ff7) (fldiv0 . z4ff6) (fldiv-and-mod . z4ff5) (fldiv . z4ff4) (fldenominator . z4ff3) (flcos . z4ff2) (flceiling . z4ff1) (flatan . z4ff0) (flasin . z4fef) (flacos . z4fee) (flabs . z4fed) (fl>? . z4fec) (fl>=? . z4feb) (fl=? . z4fea) (fl<? . z4fe9) (fl<=? . z4fe8) (fl/ . z4fe7) (fl- . z4fe6) (fl+ . z4fe5) (fl* . z4fe4) (fixnum->flonum . z4fe3) (&no-nans . z4f01) (&no-infinities . z4f00)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5195 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . z50ea) (string-ci-hash . z50e9) (string-hash . z50e8) (equal-hash . z50e7) (hashtable-equivalence-function . z50e6) (make-hashtable . z50e5) (hashtable-hash-function . z50e4) (make-eqv-hashtable . z50e3) (make-eq-hashtable . z50e2) (hashtable? . z50e1) (hashtable-update! . z50e0) (hashtable-size . z50df) (hashtable-set! . z50de) (hashtable-ref . z50dd) (hashtable-mutable? . z50dc) (hashtable-keys . z50db) (hashtable-entries . z50da) (hashtable-delete! . z50d9) (hashtable-copy . z50d8) (hashtable-contains? . z50d7) (hashtable-clear! . z50d6)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5196 '(rnrs io ports) '(6) '() '() '() '((eof-object? . z50c6) (eof-object . z50c5) (current-error-port . z50c4) (current-output-port . z50c3) (current-input-port . z50c2) (output-port? . z50c1) (input-port? . z50c0) (utf-8-codec . z50bf) (utf-16-codec . z50be) (transcoder-error-handling-mode . z50bd) (transcoder-eol-style . z50bc) (transcoder-codec . z50bb) (transcoded-port . z50ba) (textual-port? . z50b9) (string->bytevector . z50b8) (standard-output-port . z50b7) (standard-input-port . z50b6) (standard-error-port . z50b5) (set-port-position! . z50b4) (put-u8 . z50b3) (put-string . z50b2) (put-datum . z50b1) (put-char . z50b0) (put-bytevector . z50af) (port? . z50ae) (port-transcoder . z50ad) (port-position . z50ac) (port-has-set-port-position!? . z50ab) (port-has-port-position? . z50aa) (port-eof? . z50a9) (output-port-buffer-mode . z50a8) (open-string-output-port . z50a7) (open-string-input-port . z50a6) (open-file-output-port . z50a5) (open-file-input/output-port . z50a4) (open-file-input-port . z50a3) (open-bytevector-output-port . z50a2) (open-bytevector-input-port . z50a1) (native-transcoder . z50a0) (native-eol-style . z509f) (make-transcoder . z509e) (latin-1-codec . z509d) (make-i/o-write-error . z4b6e) (make-i/o-read-error . z4b59) (make-i/o-port-error . z4c0f) (make-i/o-invalid-position-error . z4b85) (make-i/o-filename-error . z4ba0) (make-i/o-file-protection-error . z4bb9) (make-i/o-file-is-read-only-error . z4bce) (make-i/o-file-does-not-exist-error . z4bf8) (make-i/o-file-already-exists-error . z4be3) (make-i/o-error . z4b44) (make-i/o-encoding-error . z4c3f) (make-i/o-decoding-error . z4c28) (make-custom-textual-output-port . z509c) (make-custom-textual-input/output-port . z509b) (make-custom-textual-input-port . z509a) (make-custom-binary-output-port . z5099) (make-custom-binary-input/output-port . z5098) (make-custom-binary-input-port . z5097) (lookahead-u8 . z5095) (lookahead-char . z5094) (i/o-write-error? . z4b70) (i/o-read-error? . z4b5b) (i/o-port-error? . z4c13) (i/o-invalid-position-error? . z4b89) (i/o-filename-error? . z4ba4) (i/o-file-protection-error? . z4bbb) (i/o-file-is-read-only-error? . z4bd0) (i/o-file-does-not-exist-error? . z4bfa) (i/o-file-already-exists-error? . z4be5) (i/o-error? . z4b46) (i/o-error-position . z4b8b) (i/o-error-port . z4c15) (i/o-error-filename . z4ba6) (i/o-encoding-error? . z4c43) (i/o-encoding-error-char . z4c45) (i/o-decoding-error? . z4c2a) (get-u8 . z5093) (get-string-n! . z5092) (get-string-n . z5091) (get-string-all . z5090) (get-line . z508f) (get-datum . z508e) (get-char . z508d) (get-bytevector-some . z508c) (get-bytevector-n! . z508b) (get-bytevector-n . z508a) (get-bytevector-all . z5089) (flush-output-port . z5088) (close-port . z5087) (call-with-string-output-port . z5066) (call-with-port . z5065) (call-with-bytevector-output-port . z5064) (bytevector->string . z5063) (buffer-mode? . z5062) (binary-port? . z5061) (&i/o-encoding . z4eff) (&i/o-decoding . z4efe) (&i/o-port . z4efd) (&i/o-file-does-not-exist . z4efc) (&i/o-file-already-exists . z4efb) (&i/o-file-is-read-only . z4efa) (&i/o-file-protection . z4ef9) (&i/o-filename . z4ef8) (&i/o-invalid-position . z4ef7) (&i/o-write . z4ef6) (&i/o-read . z4ef5) (&i/o . z4ef4) (error-handling-mode . z4ed9) (file-options . z4ed8) (buffer-mode . z4ed7) (eol-style . z4ed6)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5197 '(rnrs enums) '(6) '() '() '() '((make-enumeration . z505d) (enum-set=? . z505c) (enum-set-universe . z505b) (enum-set-union . z505a) (enum-set-subset? . z5059) (enum-set-projection . z5058) (enum-set-member? . z5057) (enum-set-intersection . z5056) (enum-set-indexer . z5055) (enum-set-difference . z5054) (enum-set-constructor . z5053) (enum-set-complement . z5052) (enum-set->list . z5051) (define-enumeration . z4ee4)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5198 '(rnrs conditions) '(6) '() '() '() '((who-condition? . z4aba) (warning? . z4a32) (violation? . z4a71) (undefined-violation? . z4b31) (syntax-violation? . z4b18) (syntax-violation-subform . z4b1c) (syntax-violation-form . z4b1a) (syntax-violation . z2fac) (simple-conditions . z5050) (serious-condition? . z4a47) (non-continuable-violation? . z4ad1) (message-condition? . z4a1b) (make-who-condition . z4ab6) (make-warning . z4a30) (make-violation . z4a6f) (make-undefined-violation . z4b2f) (make-syntax-violation . z4b12) (make-serious-condition . z4a45) (make-non-continuable-violation . z4acf) (make-message-condition . z4a17) (make-lexical-violation . z4af9) (make-irritants-condition . z4a9b) (make-implementation-restriction-violation . z4ae4) (make-error . z4a5a) (make-assertion-violation . z4a84) (lexical-violation? . z4afb) (irritants-condition? . z4a9f) (implementation-restriction-violation? . z4ae6) (error? . z4a5c) (condition-who . z4abc) (condition-predicate . z504f) (condition-message . z4a1d) (condition-irritants . z4aa1) (condition-accessor . z504e) (condition . z504d) (assertion-violation? . z4a86) (condition? . z504c) (&undefined . z4ef3) (&syntax . z4ef2) (&lexical . z4ef1) (&implementation-restriction . z4ef0) (&non-continuable . z4eef) (&who . z4eee) (&irritants . z4eed) (&assertion . z4eec) (&violation . z4eeb) (&error . z4eea) (&serious . z4ee9) (&warning . z4ee8) (&message . z4ee7) (&condition . z4ee6) (define-condition-type . z4ee5)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z5199 '(rnrs records inspection) '(6) '() '() '() '((record? . z50f9) (record-type-uid . z50f8) (record-type-sealed? . z50f7) (record-type-parent . z50f6) (record-type-opaque? . z50f5) (record-type-name . z50f4) (record-type-generative? . z50f3) (record-type-field-names . z50f2) (record-rtd . z50f1) (record-field-mutable? . z50f0)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z519a '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . z5100) (record-predicate . z50ff) (record-mutator . z50fe) (record-constructor . z50fd) (record-accessor . z50fc) (make-record-type-descriptor . z50fb) (make-record-constructor-descriptor . z50fa)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z519b '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . z4ee3) (parent-rtd . z4ee2) (nongenerative . z4ee1) (opaque . z4ee0) (sealed . z4edf) (protocol . z4ede) (parent . z4edd) (immutable . z4edc) (mutable . z4edb) (fields . z4eda) (record-constructor-descriptor . z4eb9) (record-type-descriptor . z4eb8)) '() values values '#f '#f '#t '#f) (z2adb@z297a@install-library 'z519c '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . z4c73) (&no-nans-rtd . z4c71) (&no-infinities-rcd . z4c5e) (&no-infinities-rtd . z4c5c) (&i/o-encoding-rcd . z4c49) (&i/o-encoding-rtd . z4c47) (&i/o-decoding-rcd . z4c2e) (&i/o-decoding-rtd . z4c2c) (&i/o-port-rcd . z4c19) (&i/o-port-rtd . z4c17) (&i/o-file-does-not-exist-rcd . z4bfe) (&i/o-file-does-not-exist-rtd . z4bfc) (&i/o-file-already-exists-rcd . z4be9) (&i/o-file-already-exists-rtd . z4be7) (&i/o-file-is-read-only-rcd . z4bd4) (&i/o-file-is-read-only-rtd . z4bd2) (&i/o-file-protection-rcd . z4bbf) (&i/o-file-protection-rtd . z4bbd) (&i/o-filename-rcd . z4baa) (&i/o-filename-rtd . z4ba8) (&i/o-invalid-position-rcd . z4b8f) (&i/o-invalid-position-rtd . z4b8d) (&i/o-write-rcd . z4b74) (&i/o-write-rtd . z4b72) (&i/o-read-rcd . z4b5f) (&i/o-read-rtd . z4b5d) (&i/o-rcd . z4b4a) (&i/o-rtd . z4b48) (&undefined-rcd . z4b35) (&undefined-rtd . z4b33) (&syntax-rcd . z4b20) (&syntax-rtd . z4b1e) (&lexical-rcd . z4aff) (&lexical-rtd . z4afd) (&implementation-restriction-rcd . z4aea) (&implementation-restriction-rtd . z4ae8) (&non-continuable-rcd . z4ad5) (&non-continuable-rtd . z4ad3) (&who-rcd . z4ac0) (&who-rtd . z4abe) (&irritants-rcd . z4aa5) (&irritants-rtd . z4aa3) (&assertion-rcd . z4a8a) (&assertion-rtd . z4a88) (&violation-rcd . z4a75) (&violation-rtd . z4a73) (&error-rcd . z4a60) (&error-rtd . z4a5e) (&serious-rcd . z4a4b) (&serious-rtd . z4a49) (&warning-rcd . z4a36) (&warning-rtd . z4a34) (&message-rcd . z4a21) (&message-rtd . z4a1f) (&condition-rcd . z49c2) (&condition-rtd . z49c0) (syntax-error . z2fa8) (syntax-dispatch . z2ec3) (pretty-print . z517c) (eval-core . z517b) (set-symbol-value! . z517a) (symbol-value . z5179) (gensym . z5178) (void . z5177) (load . z4d80) (interaction-environment . z2fb8) (char-ready? . z5176) (regexp? . z5175) (read-line . z5174) (ungensym . z5173) (alist->eq-hash-table . z5172) (assoc-ref . z5171) (print . z5170) (format . z516f) (host-os . z516e) (library-path . z2959) (standard-library-path . z516d) (file-newer? . z516c) (stat-mtime . z516b) (write-to-file . z516a) (file->list . z5169) (file->string . z5168) (digit->integer . z5167) (call-with-string-input-port . z5166) (call-with-string-io . z5165) (string-split . z5164) (bytevector-for-each . z5163) (string->regexp . z5162) (rxmatch . z5161) (regexp-replace-all . z5160) (hashtable-for-each . z515f) (call-process . z515e) (local-tz-offset . z515d) (microseconds . z515c) (readdir . z515b) (set-current-directory! . z515a) (expand-path . z5159) (current-directory . z5158) (%spawn . z5157) (%waitpid . z5156) (%ffi-supported? . z5155) (%ffi-pointer-ref . z5154) (%ffi-pointer->string . z5153) (%ffi-call->string-or-zero . z5152) (%ffi-call->double . z5151) (%ffi-call->void* . z5150) (%ffi-call->void . z514f) (%ffi-call->int . z514e) (%ffi-lookup . z514d) (%ffi-open . z514c) (%fork . z514b) (%pipe . z514a) (p . z5149) (open-output-string . z5148) (get-output-string . z5147) (get-environment-variables . z5146) (get-environment-variable . z5145) (get-timeofday . z5144) (get-command-line . z5143) (sys-display . z5142) (vm-join! . z5141) (vm-set-value! . z5140) (vm? . z513f) (vm-start! . z513e) (make-vm . z513d) (mutex-try-lock! . z513c) (mutex-unlock! . z513b) (mutex-lock! . z513a) (mutex? . z5139) (make-mutex . z5138) (condition-variable-notify-all! . z5137) (condition-variable-notify! . z5136) (condition-variable-wait! . z5135) (make-condition-variable . z5134) (mosh-executable-path . z5133) (make-file-options . z5132) (source-info . z5131) (make-compiler-instruction . z5130) (make-instruction . z512f) (set-source-info! . z512e) (bignum? . z512d) (fast-equal? . z512c) (fasl-read . z512b) (fasl-write . z512a) (time-usage . z5129) (os-constant . z5128) (make-parameter . z278c) (socket-port . z5127) (socket-shutdown . z5126) (socket-close . z5125) (socket-send . z5124) (socket-recv! . z5123) (socket-recv . z5122) (make-server-socket . z5121) (make-client-socket . z5120) (socket-accept . z511f) (socket? . z511e) (string-upcase . z511d) (string-titlecase . z511c) (string-normalize-nfkd . z511b) (string-normalize-nfkc . z511a) (string-normalize-nfd . z5119) (string-normalize-nfc . z5118) (string-foldcase . z5117) (string-downcase . z5116) (string-ci>? . z5115) (string-ci>=? . z5114) (string-ci=? . z5113) (string-ci<? . z5112) (string-ci<=? . z5111) (char-whitespace? . z5110) (char-upper-case? . z510f) (char-title-case? . z510e) (char-numeric? . z510d) (char-lower-case? . z510c) (char-general-category . z510b) (char-upcase . z510a) (char-titlecase . z5109) (char-foldcase . z5108) (char-downcase . z5107) (char-ci>? . z5106) (char-ci>=? . z5105) (char-ci=? . z5104) (char-ci<? . z5103) (char-ci<=? . z5102) (char-alphabetic? . z5101) (make-variable-transformer . z2cf0) (identifier? . z2fae) (generate-temporaries . z2f9a) (free-identifier=? . z2f9c) (syntax->datum . z2fb2) (datum->syntax . z2fb0) (bound-identifier=? . z2f9e) (record-type-descriptor? . z5100) (record-predicate . z50ff) (record-mutator . z50fe) (record-constructor . z50fd) (record-accessor . z50fc) (make-record-type-descriptor . z50fb) (make-record-constructor-descriptor . z50fa) (record? . z50f9) (record-type-uid . z50f8) (record-type-sealed? . z50f7) (record-type-parent . z50f6) (record-type-opaque? . z50f5) (record-type-name . z50f4) (record-type-generative? . z50f3) (record-type-field-names . z50f2) (record-rtd . z50f1) (record-field-mutable? . z50f0) (delete-file . z50ef) (file-exists? . z50ee) (vector-sort! . z50ed) (vector-sort . z50ec) (list-sort . z50eb) (symbol-hash . z50ea) (string-ci-hash . z50e9) (string-hash . z50e8) (equal-hash . z50e7) (hashtable-equivalence-function . z50e6) (make-hashtable . z50e5) (hashtable-hash-function . z50e4) (make-eqv-hashtable . z50e3) (make-eq-hashtable . z50e2) (hashtable? . z50e1) (hashtable-update! . z50e0) (hashtable-size . z50df) (hashtable-set! . z50de) (hashtable-ref . z50dd) (hashtable-mutable? . z50dc) (hashtable-keys . z50db) (hashtable-entries . z50da) (hashtable-delete! . z50d9) (hashtable-copy . z50d8) (hashtable-contains? . z50d7) (hashtable-clear! . z50d6) (call-with-output-file . z50d5) (call-with-input-file . z50d4) (write-char . z50d3) (write . z50d2) (with-output-to-file . z50d1) (with-input-from-file . z50d0) (read-char . z50cf) (read . z50ce) (peek-char . z50cd) (open-output-file . z50cc) (open-input-file . z50cb) (newline . z50ca) (display . z50c9) (close-output-port . z50c8) (close-input-port . z50c7) (eof-object? . z50c6) (eof-object . z50c5) (current-error-port . z50c4) (current-output-port . z50c3) (current-input-port . z50c2) (output-port? . z50c1) (input-port? . z50c0) (utf-8-codec . z50bf) (utf-16-codec . z50be) (transcoder-error-handling-mode . z50bd) (transcoder-eol-style . z50bc) (transcoder-codec . z50bb) (transcoded-port . z50ba) (textual-port? . z50b9) (string->bytevector . z50b8) (standard-output-port . z50b7) (standard-input-port . z50b6) (standard-error-port . z50b5) (set-port-position! . z50b4) (put-u8 . z50b3) (put-string . z50b2) (put-datum . z50b1) (put-char . z50b0) (put-bytevector . z50af) (port? . z50ae) (port-transcoder . z50ad) (port-position . z50ac) (port-has-set-port-position!? . z50ab) (port-has-port-position? . z50aa) (port-eof? . z50a9) (output-port-buffer-mode . z50a8) (open-string-output-port . z50a7) (open-string-input-port . z50a6) (open-file-output-port . z50a5) (open-file-input/output-port . z50a4) (open-file-input-port . z50a3) (open-bytevector-output-port . z50a2) (open-bytevector-input-port . z50a1) (native-transcoder . z50a0) (native-eol-style . z509f) (make-transcoder . z509e) (latin-1-codec . z509d) (make-i/o-write-error . z4b6e) (make-i/o-read-error . z4b59) (make-i/o-port-error . z4c0f) (make-i/o-invalid-position-error . z4b85) (make-i/o-filename-error . z4ba0) (make-i/o-file-protection-error . z4bb9) (make-i/o-file-is-read-only-error . z4bce) (make-i/o-file-does-not-exist-error . z4bf8) (make-i/o-file-already-exists-error . z4be3) (make-i/o-error . z4b44) (make-i/o-encoding-error . z4c3f) (make-i/o-decoding-error . z4c28) (make-custom-textual-output-port . z509c) (make-custom-textual-input/output-port . z509b) (make-custom-textual-input-port . z509a) (make-custom-binary-output-port . z5099) (make-custom-binary-input/output-port . z5098) (make-custom-binary-input-port . z5097) (make-bytevector . z5096) (lookahead-u8 . z5095) (lookahead-char . z5094) (i/o-write-error? . z4b70) (i/o-read-error? . z4b5b) (i/o-port-error? . z4c13) (i/o-invalid-position-error? . z4b89) (i/o-filename-error? . z4ba4) (i/o-file-protection-error? . z4bbb) (i/o-file-is-read-only-error? . z4bd0) (i/o-file-does-not-exist-error? . z4bfa) (i/o-file-already-exists-error? . z4be5) (i/o-error? . z4b46) (i/o-error-position . z4b8b) (i/o-error-port . z4c15) (i/o-error-filename . z4ba6) (i/o-encoding-error? . z4c43) (i/o-encoding-error-char . z4c45) (i/o-decoding-error? . z4c2a) (get-u8 . z5093) (get-string-n! . z5092) (get-string-n . z5091) (get-string-all . z5090) (get-line . z508f) (get-datum . z508e) (get-char . z508d) (get-bytevector-some . z508c) (get-bytevector-n! . z508b) (get-bytevector-n . z508a) (get-bytevector-all . z5089) (flush-output-port . z5088) (close-port . z5087) (scheme-report-environment . z2f88) (quotient . z5086) (null-environment . z2f86) (remainder . z5085) (modulo . z5084) (inexact->exact . z5083) (force . z5082) (exact->inexact . z5081) (make-promise . z5080) (exit . z507f) (command-line . z4d7a) (string-fill! . z507e) (string-set! . z507d) (set-cdr! . z507c) (set-car! . z507b) (remove . z507a) (remv . z5079) (remp . z5078) (remq . z5077) (partition . z5076) (memv . z5075) (memq . z5074) (memp . z5073) (member . z5072) (exists . z5071) (for-all . z5070) (fold-right . z506f) (fold-left . z506e) (find . z506d) (filter . z506c) (cons* . z506b) (assv . z506a) (assq . z5069) (assp . z5068) (assoc . z5067) (call-with-string-output-port . z5066) (call-with-port . z5065) (call-with-bytevector-output-port . z5064) (bytevector->string . z5063) (buffer-mode? . z5062) (binary-port? . z5061) (with-exception-handler . z5060) (raise-continuable . z505f) (raise . z505e) (eval . z2f8c) (environment . z2f84) (make-enumeration . z505d) (enum-set=? . z505c) (enum-set-universe . z505b) (enum-set-union . z505a) (enum-set-subset? . z5059) (enum-set-projection . z5058) (enum-set-member? . z5057) (enum-set-intersection . z5056) (enum-set-indexer . z5055) (enum-set-difference . z5054) (enum-set-constructor . z5053) (enum-set-complement . z5052) (enum-set->list . z5051) (who-condition? . z4aba) (warning? . z4a32) (violation? . z4a71) (undefined-violation? . z4b31) (syntax-violation? . z4b18) (syntax-violation-subform . z4b1c) (syntax-violation-form . z4b1a) (syntax-violation . z2fac) (simple-conditions . z5050) (serious-condition? . z4a47) (non-continuable-violation? . z4ad1) (message-condition? . z4a1b) (make-who-condition . z4ab6) (make-warning . z4a30) (make-violation . z4a6f) (make-undefined-violation . z4b2f) (make-syntax-violation . z4b12) (make-serious-condition . z4a45) (make-non-continuable-violation . z4acf) (make-message-condition . z4a17) (make-lexical-violation . z4af9) (make-irritants-condition . z4a9b) (make-implementation-restriction-violation . z4ae4) (make-error . z4a5a) (make-assertion-violation . z4a84) (lexical-violation? . z4afb) (irritants-condition? . z4a9f) (implementation-restriction-violation? . z4ae6) (error? . z4a5c) (condition-who . z4abc) (condition-predicate . z504f) (condition-message . z4a1d) (condition-irritants . z4aa1) (condition-accessor . z504e) (condition . z504d) (assertion-violation? . z4a86) (condition? . z504c) (utf32->string . z504b) (utf16->string . z504a) (utf8->string . z5049) (uint-list->bytevector . z5048) (u8-list->bytevector . z5047) (string->utf8 . z5046) (string->utf32 . z5045) (string->utf16 . z5044) (sint-list->bytevector . z5043) (native-endianness . z5042) (bytevector? . z5041) (bytevector=? . z5040) (bytevector-uint-set! . z503f) (bytevector-uint-ref . z503e) (bytevector-u8-set! . z503d) (bytevector-u8-ref . z503c) (bytevector-u64-set! . z503b) (bytevector-u64-ref . z503a) (bytevector-u64-native-set! . z5039) (bytevector-u64-native-ref . z5038) (bytevector-u32-set! . z5037) (bytevector-u32-ref . z5036) (bytevector-u32-native-set! . z5035) (bytevector-u32-native-ref . z5034) (bytevector-u16-set! . z5033) (bytevector-u16-ref . z5032) (bytevector-u16-native-set! . z5031) (bytevector-u16-native-ref . z5030) (bytevector-sint-set! . z502f) (bytevector-sint-ref . z502e) (bytevector-s8-set! . z502d) (bytevector-s8-ref . z502c) (bytevector-s64-set! . z502b) (bytevector-s64-ref . z502a) (bytevector-s64-native-set! . z5029) (bytevector-s64-native-ref . z5028) (bytevector-s32-set! . z5027) (bytevector-s32-ref . z5026) (bytevector-s32-native-set! . z5025) (bytevector-s32-native-ref . z5024) (bytevector-s16-set! . z5023) (bytevector-s16-ref . z5022) (bytevector-s16-native-set! . z5021) (bytevector-s16-native-ref . z5020) (bytevector-length . z501f) (bytevector-ieee-single-ref . z501e) (bytevector-ieee-single-set! . z501d) (bytevector-ieee-single-native-set! . z501c) (bytevector-ieee-single-native-ref . z501b) (bytevector-ieee-double-set! . z501a) (bytevector-ieee-double-ref . z5019) (bytevector-ieee-double-native-set! . z5018) (bytevector-ieee-double-native-ref . z5017) (bytevector-fill! . z5016) (bytevector-copy! . z5015) (bytevector-copy . z5014) (bytevector->uint-list . z5013) (bytevector->u8-list . z5012) (bytevector->sint-list . z5011) (no-nans-violation? . z4c6f) (no-infinities-violation? . z4c5a) (make-no-nans-violation . z4c6d) (make-no-infinities-violation . z4c58) (real->flonum . z5010) (flzero? . z500f) (fltruncate . z500e) (fltan . z500d) (flsqrt . z500c) (flsin . z500b) (flround . z500a) (flpositive? . z5009) (flonum? . z5008) (flodd? . z5007) (flnumerator . z5006) (flnegative? . z5005) (flnan? . z5004) (flmod0 . z5003) (flmod . z5002) (flmin . z5001) (flmax . z5000) (fllog . z4fff) (flinteger? . z4ffe) (flinfinite? . z4ffd) (flfloor . z4ffc) (flfinite? . z4ffb) (flexpt . z4ffa) (flexp . z4ff9) (fleven? . z4ff8) (fldiv0-and-mod0 . z4ff7) (fldiv0 . z4ff6) (fldiv-and-mod . z4ff5) (fldiv . z4ff4) (fldenominator . z4ff3) (flcos . z4ff2) (flceiling . z4ff1) (flatan . z4ff0) (flasin . z4fef) (flacos . z4fee) (flabs . z4fed) (fl>? . z4fec) (fl>=? . z4feb) (fl=? . z4fea) (fl<? . z4fe9) (fl<=? . z4fe8) (fl/ . z4fe7) (fl- . z4fe6) (fl+ . z4fe5) (fl* . z4fe4) (fixnum->flonum . z4fe3) (fxzero? . z4fe2) (fxxor . z4fe1) (fxrotate-bit-field . z4fe0) (fxreverse-bit-field . z4fdf) (fxpositive? . z4fde) (fxodd? . z4fdd) (fxnot . z4fdc) (fxnegative? . z4fdb) (fxmod0 . z4fda) (fxmod . z4fd9) (fxmin . z4fd8) (fxmax . z4fd7) (fxlength . z4fd6) (fxior . z4fd5) (fxif . z4fd4) (fxfirst-bit-set . z4fd3) (fxeven? . z4fd2) (fxdiv0-and-mod0 . z4fd1) (fxdiv0 . z4fd0) (fxdiv-and-mod . z4fcf) (fxdiv . z4fce) (fxcopy-bit-field . z4fcd) (fxcopy-bit . z4fcc) (fxbit-set? . z4fcb) (fxbit-field . z4fca) (fxbit-count . z4fc9) (fxarithmetic-shift-right . z4fc8) (fxarithmetic-shift-left . z4fc7) (fxarithmetic-shift . z4fc6) (fxand . z4fc5) (fx>? . z4fc4) (fx>=? . z4fc3) (fx=? . z4fc2) (fx<? . z4fc1) (fx<=? . z4fc0) (fx-/carry . z4fbf) (fx- . z4fbe) (fx+/carry . z4fbd) (fx+ . z4fbc) (fx*/carry . z4fbb) (fx* . z4fba) (greatest-fixnum . z4fb9) (least-fixnum . z4fb8) (fixnum-width . z4fb7) (fixnum? . z4fb6) (bitwise-rotate-bit-field . z4fb5) (bitwise-reverse-bit-field . z4fb4) (bitwise-length . z4fb3) (bitwise-if . z4fb2) (bitwise-first-bit-set . z4fb1) (bitwise-copy-bit-field . z4fb0) (bitwise-copy-bit . z4faf) (bitwise-bit-set? . z4fae) (bitwise-bit-field . z4fad) (bitwise-bit-count . z4fac) (bitwise-xor . z4fab) (bitwise-ior . z4faa) (bitwise-and . z4fa9) (bitwise-not . z4fa8) (bitwise-arithmetic-shift-right . z4fa7) (bitwise-arithmetic-shift-left . z4fa6) (bitwise-arithmetic-shift . z4fa5) (zero? . z4fa4) (vector? . z4fa3) (vector-set! . z4fa2) (vector-ref . z4fa1) (vector-map . z4fa0) (vector-length . z4f9f) (vector-for-each . z4f9e) (vector-fill! . z4f9d) (vector->list . z4f9c) (vector . z4f9b) (values . z4f9a) (truncate . z4f99) (tan . z4f98) (symbol? . z4f97) (symbol=? . z4f96) (symbol->string . z4f95) (substring . z4f94) (string? . z4f93) (string>? . z4f92) (string>=? . z4f91) (string=? . z4f90) (string<? . z4f8f) (string<=? . z4f8e) (string-ref . z4f8d) (string-length . z4f8c) (string-for-each . z4f8b) (string-copy . z4f8a) (string-append . z4f89) (string->symbol . z4f88) (string->number . z4f87) (string->list . z4f86) (string . z4f85) (sqrt . z4f84) (sin . z4f83) (round . z4f82) (reverse . z4f81) (real? . z4f80) (real-valued? . z4f7f) (real-part . z4f7e) (rationalize . z4f7d) (rational? . z4f7c) (rational-valued? . z4f7b) (procedure? . z4f7a) (positive? . z4f79) (pair? . z4f78) (odd? . z4f77) (numerator . z4f76) (number? . z4f75) (number->string . z4f74) (null? . z4f73) (not . z4f72) (negative? . z4f71) (nan? . z4f70) (min . z4f6f) (max . z4f6e) (map . z4f6d) (make-vector . z4f6c) (make-string . z4f6b) (make-rectangular . z4f6a) (make-polar . z4f69) (magnitude . z4f68) (log . z4f67) (list? . z4f66) (list-tail . z4f65) (list-ref . z4f64) (list->vector . z4f63) (list->string . z4f62) (list . z4f61) (length . z4f60) (lcm . z4f5f) (integer? . z4f5e) (integer-valued? . z4f5d) (integer->char . z4f5c) (infinite? . z4f5b) (inexact? . z4f5a) (inexact . z4f59) (imag-part . z4f58) (gcd . z4f57) (for-each . z4f56) (floor . z4f55) (finite? . z4f54) (expt . z4f53) (exp . z4f52) (exact? . z4f51) (exact-integer-sqrt . z4f50) (exact . z4f4f) (even? . z4f4e) (error . z4f4d) (eqv? . z4f4c) (equal? . z4f4b) (eq? . z4f4a) (dynamic-wind . z4f49) (div0-and-mod0 . z4f48) (mod0 . z4f47) (div0 . z4f46) (div-and-mod . z4f45) (mod . z4f44) (div . z4f43) (denominator . z4f42) (cos . z4f41) (cons . z4f40) (complex? . z4f3f) (char? . z4f3e) (char>? . z4f3d) (char>=? . z4f3c) (char=? . z4f3b) (char<? . z4f3a) (char<=? . z4f39) (char->integer . z4f38) (ceiling . z4f37) (call-with-values . z4f36) (call/cc . z4f35) (call-with-current-continuation . z4f34) (cddddr . z4f33) (cdddar . z4f32) (cddadr . z4f31) (cddaar . z4f30) (cdaddr . z4f2f) (cdadar . z4f2e) (cdaadr . z4f2d) (cdaaar . z4f2c) (cadddr . z4f2b) (caddar . z4f2a) (cadadr . z4f29) (cadaar . z4f28) (caaddr . z4f27) (caadar . z4f26) (caaadr . z4f25) (caaaar . z4f24) (cdddr . z4f23) (cddar . z4f22) (cdadr . z4f21) (cdaar . z4f20) (caddr . z4f1f) (cadar . z4f1e) (caadr . z4f1d) (caaar . z4f1c) (cddr . z4f1b) (cdar . z4f1a) (cadr . z4f19) (caar . z4f18) (cdr . z4f17) (car . z4f16) (boolean? . z4f15) (boolean=? . z4f14) (atan . z4f13) (assertion-violation . z4f12) (assertion-error . z2fa6) (asin . z4f11) (apply . z4f10) (append . z4f0f) (angle . z4f0e) (acos . z4f0d) (abs . z4f0c) (/ . z4f0b) (* . z4f0a) (- . z4f09) (+ . z4f08) (>= . z4f07) (> . z4f06) (= . z4f05) (<= . z4f04) (< . z4f03) (library . z4f02) (&no-nans . z4f01) (&no-infinities . z4f00) (&i/o-encoding . z4eff) (&i/o-decoding . z4efe) (&i/o-port . z4efd) (&i/o-file-does-not-exist . z4efc) (&i/o-file-already-exists . z4efb) (&i/o-file-is-read-only . z4efa) (&i/o-file-protection . z4ef9) (&i/o-filename . z4ef8) (&i/o-invalid-position . z4ef7) (&i/o-write . z4ef6) (&i/o-read . z4ef5) (&i/o . z4ef4) (&undefined . z4ef3) (&syntax . z4ef2) (&lexical . z4ef1) (&implementation-restriction . z4ef0) (&non-continuable . z4eef) (&who . z4eee) (&irritants . z4eed) (&assertion . z4eec) (&violation . z4eeb) (&error . z4eea) (&serious . z4ee9) (&warning . z4ee8) (&message . z4ee7) (&condition . z4ee6) (define-condition-type . z4ee5) (define-enumeration . z4ee4) (define-record-type . z4ee3) (parent-rtd . z4ee2) (nongenerative . z4ee1) (opaque . z4ee0) (sealed . z4edf) (protocol . z4ede) (parent . z4edd) (immutable . z4edc) (mutable . z4edb) (fields . z4eda) (error-handling-mode . z4ed9) (file-options . z4ed8) (buffer-mode . z4ed7) (eol-style . z4ed6) (guard . z4ed5) (trace-define . z4ed4) (trace-lambda . z4ed3) (unsyntax-splicing . z4ed2) (unsyntax . z4ed1) (unquote-splicing . z4ed0) (unquote . z4ecf) (_ . z4ece) (else . z4ecd) (=> . z4ecc) (... . z4ecb) (assert . z4eca) (endianness . z4ec9) (delay . z4ec8) (time . z4ec7) (do . z4ec6) (cond . z4ec5) (let* . z4ec4) (let . z4ec3) (let*-values . z4ec2) (let-values . z4ec1) (identifier-syntax . z4ec0) (with-syntax . z4ebf) (quasisyntax . z4ebe) (quasiquote . z4ebd) (syntax-rules . z4ebc) (include . z4ebb) (define-struct . z4eba) (record-constructor-descriptor . z4eb9) (record-type-descriptor . z4eb8) (case . z4eb7) (parameterize . z4eb6) (unless . z4eb5) (when . z4eb4) (or . z4eb3) (and . z4eb2) (if . z4eb1) (letrec* . z4eb0) (letrec . z4eaf) (type-descriptor . z4eae) (case-lambda . z4ead) (lambda . z4eac) (syntax . z4eab) (syntax-case . z4eaa) (quote . z4ea9) (foreign-call . z4ea8) (letrec-syntax . z4ea7) (let-syntax . z4ea6) (set! . z4ea5) (import . z4ea4) (begin . z4ea3) (module . z4ea2) (define-syntax . z4ea1) (define . z4ea0)) '((z4c73 core-prim . &no-nans-rcd) (z4c71 core-prim . &no-nans-rtd) (z4c5e core-prim . &no-infinities-rcd) (z4c5c core-prim . &no-infinities-rtd) (z4c49 core-prim . &i/o-encoding-rcd) (z4c47 core-prim . &i/o-encoding-rtd) (z4c2e core-prim . &i/o-decoding-rcd) (z4c2c core-prim . &i/o-decoding-rtd) (z4c19 core-prim . &i/o-port-rcd) (z4c17 core-prim . &i/o-port-rtd) (z4bfe core-prim . &i/o-file-does-not-exist-rcd) (z4bfc core-prim . &i/o-file-does-not-exist-rtd) (z4be9 core-prim . &i/o-file-already-exists-rcd) (z4be7 core-prim . &i/o-file-already-exists-rtd) (z4bd4 core-prim . &i/o-file-is-read-only-rcd) (z4bd2 core-prim . &i/o-file-is-read-only-rtd) (z4bbf core-prim . &i/o-file-protection-rcd) (z4bbd core-prim . &i/o-file-protection-rtd) (z4baa core-prim . &i/o-filename-rcd) (z4ba8 core-prim . &i/o-filename-rtd) (z4b8f core-prim . &i/o-invalid-position-rcd) (z4b8d core-prim . &i/o-invalid-position-rtd) (z4b74 core-prim . &i/o-write-rcd) (z4b72 core-prim . &i/o-write-rtd) (z4b5f core-prim . &i/o-read-rcd) (z4b5d core-prim . &i/o-read-rtd) (z4b4a core-prim . &i/o-rcd) (z4b48 core-prim . &i/o-rtd) (z4b35 core-prim . &undefined-rcd) (z4b33 core-prim . &undefined-rtd) (z4b20 core-prim . &syntax-rcd) (z4b1e core-prim . &syntax-rtd) (z4aff core-prim . &lexical-rcd) (z4afd core-prim . &lexical-rtd) (z4aea core-prim . &implementation-restriction-rcd) (z4ae8 core-prim . &implementation-restriction-rtd) (z4ad5 core-prim . &non-continuable-rcd) (z4ad3 core-prim . &non-continuable-rtd) (z4ac0 core-prim . &who-rcd) (z4abe core-prim . &who-rtd) (z4aa5 core-prim . &irritants-rcd) (z4aa3 core-prim . &irritants-rtd) (z4a8a core-prim . &assertion-rcd) (z4a88 core-prim . &assertion-rtd) (z4a75 core-prim . &violation-rcd) (z4a73 core-prim . &violation-rtd) (z4a60 core-prim . &error-rcd) (z4a5e core-prim . &error-rtd) (z4a4b core-prim . &serious-rcd) (z4a49 core-prim . &serious-rtd) (z4a36 core-prim . &warning-rcd) (z4a34 core-prim . &warning-rtd) (z4a21 core-prim . &message-rcd) (z4a1f core-prim . &message-rtd) (z49c2 core-prim . &condition-rcd) (z49c0 core-prim . &condition-rtd) (z2fa8 core-prim . syntax-error) (z2ec3 core-prim . syntax-dispatch) (z517c core-prim . pretty-print) (z517b core-prim . eval-core) (z517a core-prim . set-symbol-value!) (z5179 core-prim . symbol-value) (z5178 core-prim . gensym) (z5177 core-prim . void) (z4d80 core-prim . load) (z2fb8 core-prim . interaction-environment) (z5176 core-prim . char-ready?) (z5175 core-prim . regexp?) (z5174 core-prim . read-line) (z5173 core-prim . ungensym) (z5172 core-prim . alist->eq-hash-table) (z5171 core-prim . assoc-ref) (z5170 core-prim . print) (z516f core-prim . format) (z516e core-prim . host-os) (z2959 core-prim . library-path) (z516d core-prim . standard-library-path) (z516c core-prim . file-newer?) (z516b core-prim . stat-mtime) (z516a core-prim . write-to-file) (z5169 core-prim . file->list) (z5168 core-prim . file->string) (z5167 core-prim . digit->integer) (z5166 core-prim . call-with-string-input-port) (z5165 core-prim . call-with-string-io) (z5164 core-prim . string-split) (z5163 core-prim . bytevector-for-each) (z5162 core-prim . string->regexp) (z5161 core-prim . rxmatch) (z5160 core-prim . regexp-replace-all) (z515f core-prim . hashtable-for-each) (z515e core-prim . call-process) (z515d core-prim . local-tz-offset) (z515c core-prim . microseconds) (z515b core-prim . readdir) (z515a core-prim . set-current-directory!) (z5159 core-prim . expand-path) (z5158 core-prim . current-directory) (z5157 core-prim . %spawn) (z5156 core-prim . %waitpid) (z5155 core-prim . %ffi-supported?) (z5154 core-prim . %ffi-pointer-ref) (z5153 core-prim . %ffi-pointer->string) (z5152 core-prim . %ffi-call->string-or-zero) (z5151 core-prim . %ffi-call->double) (z5150 core-prim . %ffi-call->void*) (z514f core-prim . %ffi-call->void) (z514e core-prim . %ffi-call->int) (z514d core-prim . %ffi-lookup) (z514c core-prim . %ffi-open) (z514b core-prim . %fork) (z514a core-prim . %pipe) (z5149 core-prim . p) (z5148 core-prim . open-output-string) (z5147 core-prim . get-output-string) (z5146 core-prim . get-environment-variables) (z5145 core-prim . get-environment-variable) (z5144 core-prim . get-timeofday) (z5143 core-prim . get-command-line) (z5142 core-prim . sys-display) (z5141 core-prim . vm-join!) (z5140 core-prim . vm-set-value!) (z513f core-prim . vm?) (z513e core-prim . vm-start!) (z513d core-prim . make-vm) (z513c core-prim . mutex-try-lock!) (z513b core-prim . mutex-unlock!) (z513a core-prim . mutex-lock!) (z5139 core-prim . mutex?) (z5138 core-prim . make-mutex) (z5137 core-prim . condition-variable-notify-all!) (z5136 core-prim . condition-variable-notify!) (z5135 core-prim . condition-variable-wait!) (z5134 core-prim . make-condition-variable) (z5133 core-prim . mosh-executable-path) (z5132 core-prim . make-file-options) (z5131 core-prim . source-info) (z5130 core-prim . make-compiler-instruction) (z512f core-prim . make-instruction) (z512e core-prim . set-source-info!) (z512d core-prim . bignum?) (z512c core-prim . fast-equal?) (z512b core-prim . fasl-read) (z512a core-prim . fasl-write) (z5129 core-prim . time-usage) (z5128 core-prim . os-constant) (z278c core-prim . make-parameter) (z5127 core-prim . socket-port) (z5126 core-prim . socket-shutdown) (z5125 core-prim . socket-close) (z5124 core-prim . socket-send) (z5123 core-prim . socket-recv!) (z5122 core-prim . socket-recv) (z5121 core-prim . make-server-socket) (z5120 core-prim . make-client-socket) (z511f core-prim . socket-accept) (z511e core-prim . socket?) (z511d core-prim . string-upcase) (z511c core-prim . string-titlecase) (z511b core-prim . string-normalize-nfkd) (z511a core-prim . string-normalize-nfkc) (z5119 core-prim . string-normalize-nfd) (z5118 core-prim . string-normalize-nfc) (z5117 core-prim . string-foldcase) (z5116 core-prim . string-downcase) (z5115 core-prim . string-ci>?) (z5114 core-prim . string-ci>=?) (z5113 core-prim . string-ci=?) (z5112 core-prim . string-ci<?) (z5111 core-prim . string-ci<=?) (z5110 core-prim . char-whitespace?) (z510f core-prim . char-upper-case?) (z510e core-prim . char-title-case?) (z510d core-prim . char-numeric?) (z510c core-prim . char-lower-case?) (z510b core-prim . char-general-category) (z510a core-prim . char-upcase) (z5109 core-prim . char-titlecase) (z5108 core-prim . char-foldcase) (z5107 core-prim . char-downcase) (z5106 core-prim . char-ci>?) (z5105 core-prim . char-ci>=?) (z5104 core-prim . char-ci=?) (z5103 core-prim . char-ci<?) (z5102 core-prim . char-ci<=?) (z5101 core-prim . char-alphabetic?) (z2cf0 core-prim . make-variable-transformer) (z2fae core-prim . identifier?) (z2f9a core-prim . generate-temporaries) (z2f9c core-prim . free-identifier=?) (z2fb2 core-prim . syntax->datum) (z2fb0 core-prim . datum->syntax) (z2f9e core-prim . bound-identifier=?) (z5100 core-prim . record-type-descriptor?) (z50ff core-prim . record-predicate) (z50fe core-prim . record-mutator) (z50fd core-prim . record-constructor) (z50fc core-prim . record-accessor) (z50fb core-prim . make-record-type-descriptor) (z50fa core-prim . make-record-constructor-descriptor) (z50f9 core-prim . record?) (z50f8 core-prim . record-type-uid) (z50f7 core-prim . record-type-sealed?) (z50f6 core-prim . record-type-parent) (z50f5 core-prim . record-type-opaque?) (z50f4 core-prim . record-type-name) (z50f3 core-prim . record-type-generative?) (z50f2 core-prim . record-type-field-names) (z50f1 core-prim . record-rtd) (z50f0 core-prim . record-field-mutable?) (z50ef core-prim . delete-file) (z50ee core-prim . file-exists?) (z50ed core-prim . vector-sort!) (z50ec core-prim . vector-sort) (z50eb core-prim . list-sort) (z50ea core-prim . symbol-hash) (z50e9 core-prim . string-ci-hash) (z50e8 core-prim . string-hash) (z50e7 core-prim . equal-hash) (z50e6 core-prim . hashtable-equivalence-function) (z50e5 core-prim . make-hashtable) (z50e4 core-prim . hashtable-hash-function) (z50e3 core-prim . make-eqv-hashtable) (z50e2 core-prim . make-eq-hashtable) (z50e1 core-prim . hashtable?) (z50e0 core-prim . hashtable-update!) (z50df core-prim . hashtable-size) (z50de core-prim . hashtable-set!) (z50dd core-prim . hashtable-ref) (z50dc core-prim . hashtable-mutable?) (z50db core-prim . hashtable-keys) (z50da core-prim . hashtable-entries) (z50d9 core-prim . hashtable-delete!) (z50d8 core-prim . hashtable-copy) (z50d7 core-prim . hashtable-contains?) (z50d6 core-prim . hashtable-clear!) (z50d5 core-prim . call-with-output-file) (z50d4 core-prim . call-with-input-file) (z50d3 core-prim . write-char) (z50d2 core-prim . write) (z50d1 core-prim . with-output-to-file) (z50d0 core-prim . with-input-from-file) (z50cf core-prim . read-char) (z50ce core-prim . read) (z50cd core-prim . peek-char) (z50cc core-prim . open-output-file) (z50cb core-prim . open-input-file) (z50ca core-prim . newline) (z50c9 core-prim . display) (z50c8 core-prim . close-output-port) (z50c7 core-prim . close-input-port) (z50c6 core-prim . eof-object?) (z50c5 core-prim . eof-object) (z50c4 core-prim . current-error-port) (z50c3 core-prim . current-output-port) (z50c2 core-prim . current-input-port) (z50c1 core-prim . output-port?) (z50c0 core-prim . input-port?) (z50bf core-prim . utf-8-codec) (z50be core-prim . utf-16-codec) (z50bd core-prim . transcoder-error-handling-mode) (z50bc core-prim . transcoder-eol-style) (z50bb core-prim . transcoder-codec) (z50ba core-prim . transcoded-port) (z50b9 core-prim . textual-port?) (z50b8 core-prim . string->bytevector) (z50b7 core-prim . standard-output-port) (z50b6 core-prim . standard-input-port) (z50b5 core-prim . standard-error-port) (z50b4 core-prim . set-port-position!) (z50b3 core-prim . put-u8) (z50b2 core-prim . put-string) (z50b1 core-prim . put-datum) (z50b0 core-prim . put-char) (z50af core-prim . put-bytevector) (z50ae core-prim . port?) (z50ad core-prim . port-transcoder) (z50ac core-prim . port-position) (z50ab core-prim . port-has-set-port-position!?) (z50aa core-prim . port-has-port-position?) (z50a9 core-prim . port-eof?) (z50a8 core-prim . output-port-buffer-mode) (z50a7 core-prim . open-string-output-port) (z50a6 core-prim . open-string-input-port) (z50a5 core-prim . open-file-output-port) (z50a4 core-prim . open-file-input/output-port) (z50a3 core-prim . open-file-input-port) (z50a2 core-prim . open-bytevector-output-port) (z50a1 core-prim . open-bytevector-input-port) (z50a0 core-prim . native-transcoder) (z509f core-prim . native-eol-style) (z509e core-prim . make-transcoder) (z509d core-prim . latin-1-codec) (z4b6e core-prim . make-i/o-write-error) (z4b59 core-prim . make-i/o-read-error) (z4c0f core-prim . make-i/o-port-error) (z4b85 core-prim . make-i/o-invalid-position-error) (z4ba0 core-prim . make-i/o-filename-error) (z4bb9 core-prim . make-i/o-file-protection-error) (z4bce core-prim . make-i/o-file-is-read-only-error) (z4bf8 core-prim . make-i/o-file-does-not-exist-error) (z4be3 core-prim . make-i/o-file-already-exists-error) (z4b44 core-prim . make-i/o-error) (z4c3f core-prim . make-i/o-encoding-error) (z4c28 core-prim . make-i/o-decoding-error) (z509c core-prim . make-custom-textual-output-port) (z509b core-prim . make-custom-textual-input/output-port) (z509a core-prim . make-custom-textual-input-port) (z5099 core-prim . make-custom-binary-output-port) (z5098 core-prim . make-custom-binary-input/output-port) (z5097 core-prim . make-custom-binary-input-port) (z5096 core-prim . make-bytevector) (z5095 core-prim . lookahead-u8) (z5094 core-prim . lookahead-char) (z4b70 core-prim . i/o-write-error?) (z4b5b core-prim . i/o-read-error?) (z4c13 core-prim . i/o-port-error?) (z4b89 core-prim . i/o-invalid-position-error?) (z4ba4 core-prim . i/o-filename-error?) (z4bbb core-prim . i/o-file-protection-error?) (z4bd0 core-prim . i/o-file-is-read-only-error?) (z4bfa core-prim . i/o-file-does-not-exist-error?) (z4be5 core-prim . i/o-file-already-exists-error?) (z4b46 core-prim . i/o-error?) (z4b8b core-prim . i/o-error-position) (z4c15 core-prim . i/o-error-port) (z4ba6 core-prim . i/o-error-filename) (z4c43 core-prim . i/o-encoding-error?) (z4c45 core-prim . i/o-encoding-error-char) (z4c2a core-prim . i/o-decoding-error?) (z5093 core-prim . get-u8) (z5092 core-prim . get-string-n!) (z5091 core-prim . get-string-n) (z5090 core-prim . get-string-all) (z508f core-prim . get-line) (z508e core-prim . get-datum) (z508d core-prim . get-char) (z508c core-prim . get-bytevector-some) (z508b core-prim . get-bytevector-n!) (z508a core-prim . get-bytevector-n) (z5089 core-prim . get-bytevector-all) (z5088 core-prim . flush-output-port) (z5087 core-prim . close-port) (z2f88 core-prim . scheme-report-environment) (z5086 core-prim . quotient) (z2f86 core-prim . null-environment) (z5085 core-prim . remainder) (z5084 core-prim . modulo) (z5083 core-prim . inexact->exact) (z5082 core-prim . force) (z5081 core-prim . exact->inexact) (z5080 core-prim . make-promise) (z507f core-prim . exit) (z4d7a core-prim . command-line) (z507e core-prim . string-fill!) (z507d core-prim . string-set!) (z507c core-prim . set-cdr!) (z507b core-prim . set-car!) (z507a core-prim . remove) (z5079 core-prim . remv) (z5078 core-prim . remp) (z5077 core-prim . remq) (z5076 core-prim . partition) (z5075 core-prim . memv) (z5074 core-prim . memq) (z5073 core-prim . memp) (z5072 core-prim . member) (z5071 core-prim . exists) (z5070 core-prim . for-all) (z506f core-prim . fold-right) (z506e core-prim . fold-left) (z506d core-prim . find) (z506c core-prim . filter) (z506b core-prim . cons*) (z506a core-prim . assv) (z5069 core-prim . assq) (z5068 core-prim . assp) (z5067 core-prim . assoc) (z5066 core-prim . call-with-string-output-port) (z5065 core-prim . call-with-port) (z5064 core-prim . call-with-bytevector-output-port) (z5063 core-prim . bytevector->string) (z5062 core-prim . buffer-mode?) (z5061 core-prim . binary-port?) (z5060 core-prim . with-exception-handler) (z505f core-prim . raise-continuable) (z505e core-prim . raise) (z2f8c core-prim . eval) (z2f84 core-prim . environment) (z505d core-prim . make-enumeration) (z505c core-prim . enum-set=?) (z505b core-prim . enum-set-universe) (z505a core-prim . enum-set-union) (z5059 core-prim . enum-set-subset?) (z5058 core-prim . enum-set-projection) (z5057 core-prim . enum-set-member?) (z5056 core-prim . enum-set-intersection) (z5055 core-prim . enum-set-indexer) (z5054 core-prim . enum-set-difference) (z5053 core-prim . enum-set-constructor) (z5052 core-prim . enum-set-complement) (z5051 core-prim . enum-set->list) (z4aba core-prim . who-condition?) (z4a32 core-prim . warning?) (z4a71 core-prim . violation?) (z4b31 core-prim . undefined-violation?) (z4b18 core-prim . syntax-violation?) (z4b1c core-prim . syntax-violation-subform) (z4b1a core-prim . syntax-violation-form) (z2fac core-prim . syntax-violation) (z5050 core-prim . simple-conditions) (z4a47 core-prim . serious-condition?) (z4ad1 core-prim . non-continuable-violation?) (z4a1b core-prim . message-condition?) (z4ab6 core-prim . make-who-condition) (z4a30 core-prim . make-warning) (z4a6f core-prim . make-violation) (z4b2f core-prim . make-undefined-violation) (z4b12 core-prim . make-syntax-violation) (z4a45 core-prim . make-serious-condition) (z4acf core-prim . make-non-continuable-violation) (z4a17 core-prim . make-message-condition) (z4af9 core-prim . make-lexical-violation) (z4a9b core-prim . make-irritants-condition) (z4ae4 core-prim . make-implementation-restriction-violation) (z4a5a core-prim . make-error) (z4a84 core-prim . make-assertion-violation) (z4afb core-prim . lexical-violation?) (z4a9f core-prim . irritants-condition?) (z4ae6 core-prim . implementation-restriction-violation?) (z4a5c core-prim . error?) (z4abc core-prim . condition-who) (z504f core-prim . condition-predicate) (z4a1d core-prim . condition-message) (z4aa1 core-prim . condition-irritants) (z504e core-prim . condition-accessor) (z504d core-prim . condition) (z4a86 core-prim . assertion-violation?) (z504c core-prim . condition?) (z504b core-prim . utf32->string) (z504a core-prim . utf16->string) (z5049 core-prim . utf8->string) (z5048 core-prim . uint-list->bytevector) (z5047 core-prim . u8-list->bytevector) (z5046 core-prim . string->utf8) (z5045 core-prim . string->utf32) (z5044 core-prim . string->utf16) (z5043 core-prim . sint-list->bytevector) (z5042 core-prim . native-endianness) (z5041 core-prim . bytevector?) (z5040 core-prim . bytevector=?) (z503f core-prim . bytevector-uint-set!) (z503e core-prim . bytevector-uint-ref) (z503d core-prim . bytevector-u8-set!) (z503c core-prim . bytevector-u8-ref) (z503b core-prim . bytevector-u64-set!) (z503a core-prim . bytevector-u64-ref) (z5039 core-prim . bytevector-u64-native-set!) (z5038 core-prim . bytevector-u64-native-ref) (z5037 core-prim . bytevector-u32-set!) (z5036 core-prim . bytevector-u32-ref) (z5035 core-prim . bytevector-u32-native-set!) (z5034 core-prim . bytevector-u32-native-ref) (z5033 core-prim . bytevector-u16-set!) (z5032 core-prim . bytevector-u16-ref) (z5031 core-prim . bytevector-u16-native-set!) (z5030 core-prim . bytevector-u16-native-ref) (z502f core-prim . bytevector-sint-set!) (z502e core-prim . bytevector-sint-ref) (z502d core-prim . bytevector-s8-set!) (z502c core-prim . bytevector-s8-ref) (z502b core-prim . bytevector-s64-set!) (z502a core-prim . bytevector-s64-ref) (z5029 core-prim . bytevector-s64-native-set!) (z5028 core-prim . bytevector-s64-native-ref) (z5027 core-prim . bytevector-s32-set!) (z5026 core-prim . bytevector-s32-ref) (z5025 core-prim . bytevector-s32-native-set!) (z5024 core-prim . bytevector-s32-native-ref) (z5023 core-prim . bytevector-s16-set!) (z5022 core-prim . bytevector-s16-ref) (z5021 core-prim . bytevector-s16-native-set!) (z5020 core-prim . bytevector-s16-native-ref) (z501f core-prim . bytevector-length) (z501e core-prim . bytevector-ieee-single-ref) (z501d core-prim . bytevector-ieee-single-set!) (z501c core-prim . bytevector-ieee-single-native-set!) (z501b core-prim . bytevector-ieee-single-native-ref) (z501a core-prim . bytevector-ieee-double-set!) (z5019 core-prim . bytevector-ieee-double-ref) (z5018 core-prim . bytevector-ieee-double-native-set!) (z5017 core-prim . bytevector-ieee-double-native-ref) (z5016 core-prim . bytevector-fill!) (z5015 core-prim . bytevector-copy!) (z5014 core-prim . bytevector-copy) (z5013 core-prim . bytevector->uint-list) (z5012 core-prim . bytevector->u8-list) (z5011 core-prim . bytevector->sint-list) (z4c6f core-prim . no-nans-violation?) (z4c5a core-prim . no-infinities-violation?) (z4c6d core-prim . make-no-nans-violation) (z4c58 core-prim . make-no-infinities-violation) (z5010 core-prim . real->flonum) (z500f core-prim . flzero?) (z500e core-prim . fltruncate) (z500d core-prim . fltan) (z500c core-prim . flsqrt) (z500b core-prim . flsin) (z500a core-prim . flround) (z5009 core-prim . flpositive?) (z5008 core-prim . flonum?) (z5007 core-prim . flodd?) (z5006 core-prim . flnumerator) (z5005 core-prim . flnegative?) (z5004 core-prim . flnan?) (z5003 core-prim . flmod0) (z5002 core-prim . flmod) (z5001 core-prim . flmin) (z5000 core-prim . flmax) (z4fff core-prim . fllog) (z4ffe core-prim . flinteger?) (z4ffd core-prim . flinfinite?) (z4ffc core-prim . flfloor) (z4ffb core-prim . flfinite?) (z4ffa core-prim . flexpt) (z4ff9 core-prim . flexp) (z4ff8 core-prim . fleven?) (z4ff7 core-prim . fldiv0-and-mod0) (z4ff6 core-prim . fldiv0) (z4ff5 core-prim . fldiv-and-mod) (z4ff4 core-prim . fldiv) (z4ff3 core-prim . fldenominator) (z4ff2 core-prim . flcos) (z4ff1 core-prim . flceiling) (z4ff0 core-prim . flatan) (z4fef core-prim . flasin) (z4fee core-prim . flacos) (z4fed core-prim . flabs) (z4fec core-prim . fl>?) (z4feb core-prim . fl>=?) (z4fea core-prim . fl=?) (z4fe9 core-prim . fl<?) (z4fe8 core-prim . fl<=?) (z4fe7 core-prim . fl/) (z4fe6 core-prim . fl-) (z4fe5 core-prim . fl+) (z4fe4 core-prim . fl*) (z4fe3 core-prim . fixnum->flonum) (z4fe2 core-prim . fxzero?) (z4fe1 core-prim . fxxor) (z4fe0 core-prim . fxrotate-bit-field) (z4fdf core-prim . fxreverse-bit-field) (z4fde core-prim . fxpositive?) (z4fdd core-prim . fxodd?) (z4fdc core-prim . fxnot) (z4fdb core-prim . fxnegative?) (z4fda core-prim . fxmod0) (z4fd9 core-prim . fxmod) (z4fd8 core-prim . fxmin) (z4fd7 core-prim . fxmax) (z4fd6 core-prim . fxlength) (z4fd5 core-prim . fxior) (z4fd4 core-prim . fxif) (z4fd3 core-prim . fxfirst-bit-set) (z4fd2 core-prim . fxeven?) (z4fd1 core-prim . fxdiv0-and-mod0) (z4fd0 core-prim . fxdiv0) (z4fcf core-prim . fxdiv-and-mod) (z4fce core-prim . fxdiv) (z4fcd core-prim . fxcopy-bit-field) (z4fcc core-prim . fxcopy-bit) (z4fcb core-prim . fxbit-set?) (z4fca core-prim . fxbit-field) (z4fc9 core-prim . fxbit-count) (z4fc8 core-prim . fxarithmetic-shift-right) (z4fc7 core-prim . fxarithmetic-shift-left) (z4fc6 core-prim . fxarithmetic-shift) (z4fc5 core-prim . fxand) (z4fc4 core-prim . fx>?) (z4fc3 core-prim . fx>=?) (z4fc2 core-prim . fx=?) (z4fc1 core-prim . fx<?) (z4fc0 core-prim . fx<=?) (z4fbf core-prim . fx-/carry) (z4fbe core-prim . fx-) (z4fbd core-prim . fx+/carry) (z4fbc core-prim . fx+) (z4fbb core-prim . fx*/carry) (z4fba core-prim . fx*) (z4fb9 core-prim . greatest-fixnum) (z4fb8 core-prim . least-fixnum) (z4fb7 core-prim . fixnum-width) (z4fb6 core-prim . fixnum?) (z4fb5 core-prim . bitwise-rotate-bit-field) (z4fb4 core-prim . bitwise-reverse-bit-field) (z4fb3 core-prim . bitwise-length) (z4fb2 core-prim . bitwise-if) (z4fb1 core-prim . bitwise-first-bit-set) (z4fb0 core-prim . bitwise-copy-bit-field) (z4faf core-prim . bitwise-copy-bit) (z4fae core-prim . bitwise-bit-set?) (z4fad core-prim . bitwise-bit-field) (z4fac core-prim . bitwise-bit-count) (z4fab core-prim . bitwise-xor) (z4faa core-prim . bitwise-ior) (z4fa9 core-prim . bitwise-and) (z4fa8 core-prim . bitwise-not) (z4fa7 core-prim . bitwise-arithmetic-shift-right) (z4fa6 core-prim . bitwise-arithmetic-shift-left) (z4fa5 core-prim . bitwise-arithmetic-shift) (z4fa4 core-prim . zero?) (z4fa3 core-prim . vector?) (z4fa2 core-prim . vector-set!) (z4fa1 core-prim . vector-ref) (z4fa0 core-prim . vector-map) (z4f9f core-prim . vector-length) (z4f9e core-prim . vector-for-each) (z4f9d core-prim . vector-fill!) (z4f9c core-prim . vector->list) (z4f9b core-prim . vector) (z4f9a core-prim . values) (z4f99 core-prim . truncate) (z4f98 core-prim . tan) (z4f97 core-prim . symbol?) (z4f96 core-prim . symbol=?) (z4f95 core-prim . symbol->string) (z4f94 core-prim . substring) (z4f93 core-prim . string?) (z4f92 core-prim . string>?) (z4f91 core-prim . string>=?) (z4f90 core-prim . string=?) (z4f8f core-prim . string<?) (z4f8e core-prim . string<=?) (z4f8d core-prim . string-ref) (z4f8c core-prim . string-length) (z4f8b core-prim . string-for-each) (z4f8a core-prim . string-copy) (z4f89 core-prim . string-append) (z4f88 core-prim . string->symbol) (z4f87 core-prim . string->number) (z4f86 core-prim . string->list) (z4f85 core-prim . string) (z4f84 core-prim . sqrt) (z4f83 core-prim . sin) (z4f82 core-prim . round) (z4f81 core-prim . reverse) (z4f80 core-prim . real?) (z4f7f core-prim . real-valued?) (z4f7e core-prim . real-part) (z4f7d core-prim . rationalize) (z4f7c core-prim . rational?) (z4f7b core-prim . rational-valued?) (z4f7a core-prim . procedure?) (z4f79 core-prim . positive?) (z4f78 core-prim . pair?) (z4f77 core-prim . odd?) (z4f76 core-prim . numerator) (z4f75 core-prim . number?) (z4f74 core-prim . number->string) (z4f73 core-prim . null?) (z4f72 core-prim . not) (z4f71 core-prim . negative?) (z4f70 core-prim . nan?) (z4f6f core-prim . min) (z4f6e core-prim . max) (z4f6d core-prim . map) (z4f6c core-prim . make-vector) (z4f6b core-prim . make-string) (z4f6a core-prim . make-rectangular) (z4f69 core-prim . make-polar) (z4f68 core-prim . magnitude) (z4f67 core-prim . log) (z4f66 core-prim . list?) (z4f65 core-prim . list-tail) (z4f64 core-prim . list-ref) (z4f63 core-prim . list->vector) (z4f62 core-prim . list->string) (z4f61 core-prim . list) (z4f60 core-prim . length) (z4f5f core-prim . lcm) (z4f5e core-prim . integer?) (z4f5d core-prim . integer-valued?) (z4f5c core-prim . integer->char) (z4f5b core-prim . infinite?) (z4f5a core-prim . inexact?) (z4f59 core-prim . inexact) (z4f58 core-prim . imag-part) (z4f57 core-prim . gcd) (z4f56 core-prim . for-each) (z4f55 core-prim . floor) (z4f54 core-prim . finite?) (z4f53 core-prim . expt) (z4f52 core-prim . exp) (z4f51 core-prim . exact?) (z4f50 core-prim . exact-integer-sqrt) (z4f4f core-prim . exact) (z4f4e core-prim . even?) (z4f4d core-prim . error) (z4f4c core-prim . eqv?) (z4f4b core-prim . equal?) (z4f4a core-prim . eq?) (z4f49 core-prim . dynamic-wind) (z4f48 core-prim . div0-and-mod0) (z4f47 core-prim . mod0) (z4f46 core-prim . div0) (z4f45 core-prim . div-and-mod) (z4f44 core-prim . mod) (z4f43 core-prim . div) (z4f42 core-prim . denominator) (z4f41 core-prim . cos) (z4f40 core-prim . cons) (z4f3f core-prim . complex?) (z4f3e core-prim . char?) (z4f3d core-prim . char>?) (z4f3c core-prim . char>=?) (z4f3b core-prim . char=?) (z4f3a core-prim . char<?) (z4f39 core-prim . char<=?) (z4f38 core-prim . char->integer) (z4f37 core-prim . ceiling) (z4f36 core-prim . call-with-values) (z4f35 core-prim . call/cc) (z4f34 core-prim . call-with-current-continuation) (z4f33 core-prim . cddddr) (z4f32 core-prim . cdddar) (z4f31 core-prim . cddadr) (z4f30 core-prim . cddaar) (z4f2f core-prim . cdaddr) (z4f2e core-prim . cdadar) (z4f2d core-prim . cdaadr) (z4f2c core-prim . cdaaar) (z4f2b core-prim . cadddr) (z4f2a core-prim . caddar) (z4f29 core-prim . cadadr) (z4f28 core-prim . cadaar) (z4f27 core-prim . caaddr) (z4f26 core-prim . caadar) (z4f25 core-prim . caaadr) (z4f24 core-prim . caaaar) (z4f23 core-prim . cdddr) (z4f22 core-prim . cddar) (z4f21 core-prim . cdadr) (z4f20 core-prim . cdaar) (z4f1f core-prim . caddr) (z4f1e core-prim . cadar) (z4f1d core-prim . caadr) (z4f1c core-prim . caaar) (z4f1b core-prim . cddr) (z4f1a core-prim . cdar) (z4f19 core-prim . cadr) (z4f18 core-prim . caar) (z4f17 core-prim . cdr) (z4f16 core-prim . car) (z4f15 core-prim . boolean?) (z4f14 core-prim . boolean=?) (z4f13 core-prim . atan) (z4f12 core-prim . assertion-violation) (z2fa6 core-prim . assertion-error) (z4f11 core-prim . asin) (z4f10 core-prim . apply) (z4f0f core-prim . append) (z4f0e core-prim . angle) (z4f0d core-prim . acos) (z4f0c core-prim . abs) (z4f0b core-prim . /) (z4f0a core-prim . *) (z4f09 core-prim . -) (z4f08 core-prim . +) (z4f07 core-prim . >=) (z4f06 core-prim . >) (z4f05 core-prim . =) (z4f04 core-prim . <=) (z4f03 core-prim . <) (z4f02 core-prim . library) (z4f01 $core-rtd &no-nans-rtd &no-nans-rcd) (z4f00 $core-rtd &no-infinities-rtd &no-infinities-rcd) (z4eff $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (z4efe $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (z4efd $core-rtd &i/o-port-rtd &i/o-port-rcd) (z4efc $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (z4efb $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (z4efa $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (z4ef9 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (z4ef8 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (z4ef7 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (z4ef6 $core-rtd &i/o-write-rtd &i/o-write-rcd) (z4ef5 $core-rtd &i/o-read-rtd &i/o-read-rcd) (z4ef4 $core-rtd &i/o-rtd &i/o-rcd) (z4ef3 $core-rtd &undefined-rtd &undefined-rcd) (z4ef2 $core-rtd &syntax-rtd &syntax-rcd) (z4ef1 $core-rtd &lexical-rtd &lexical-rcd) (z4ef0 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (z4eef $core-rtd &non-continuable-rtd &non-continuable-rcd) (z4eee $core-rtd &who-rtd &who-rcd) (z4eed $core-rtd &irritants-rtd &irritants-rcd) (z4eec $core-rtd &assertion-rtd &assertion-rcd) (z4eeb $core-rtd &violation-rtd &violation-rcd) (z4eea $core-rtd &error-rtd &error-rcd) (z4ee9 $core-rtd &serious-rtd &serious-rcd) (z4ee8 $core-rtd &warning-rtd &warning-rcd) (z4ee7 $core-rtd &message-rtd &message-rcd) (z4ee6 $core-rtd &condition-rtd &condition-rcd) (z4ee5 macro . define-condition-type) (z4ee4 macro . define-enumeration) (z4ee3 macro . define-record-type) (z4ee2 macro . parent-rtd) (z4ee1 macro . nongenerative) (z4ee0 macro . opaque) (z4edf macro . sealed) (z4ede macro . protocol) (z4edd macro . parent) (z4edc macro . immutable) (z4edb macro . mutable) (z4eda macro . fields) (z4ed9 macro . error-handling-mode) (z4ed8 macro . file-options) (z4ed7 macro . buffer-mode) (z4ed6 macro . eol-style) (z4ed5 macro . guard) (z4ed4 macro . trace-define) (z4ed3 macro . trace-lambda) (z4ed2 macro . unsyntax-splicing) (z4ed1 macro . unsyntax) (z4ed0 macro . unquote-splicing) (z4ecf macro . unquote) (z4ece macro . _) (z4ecd macro . else) (z4ecc macro . =>) (z4ecb macro . ...) (z4eca macro . assert) (z4ec9 macro . endianness) (z4ec8 macro . delay) (z4ec7 macro . time) (z4ec6 macro . do) (z4ec5 macro . cond) (z4ec4 macro . let*) (z4ec3 macro . let) (z4ec2 macro . let*-values) (z4ec1 macro . let-values) (z4ec0 macro . identifier-syntax) (z4ebf macro . with-syntax) (z4ebe macro . quasisyntax) (z4ebd macro . quasiquote) (z4ebc macro . syntax-rules) (z4ebb macro . include) (z4eba macro . define-struct) (z4eb9 core-macro . record-constructor-descriptor) (z4eb8 core-macro . record-type-descriptor) (z4eb7 macro . case) (z4eb6 macro . parameterize) (z4eb5 macro . unless) (z4eb4 macro . when) (z4eb3 core-macro . or) (z4eb2 core-macro . and) (z4eb1 core-macro . if) (z4eb0 core-macro . letrec*) (z4eaf core-macro . letrec) (z4eae core-macro . type-descriptor) (z4ead core-macro . case-lambda) (z4eac core-macro . lambda) (z4eab core-macro . syntax) (z4eaa core-macro . syntax-case) (z4ea9 core-macro . quote) (z4ea8 core-macro . foreign-call) (z4ea7 letrec-syntax) (z4ea6 let-syntax) (z4ea5 set!) (z4ea4 import) (z4ea3 begin) (z4ea2 module) (z4ea1 define-syntax) (z4ea0 define)) values values '#f '#f '#f '#f) (z2adb@z297a@install-library 'z519d '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . z517c) (eval-core . z517b) (set-symbol-value! . z517a) (symbol-value . z5179) (gensym . z5178) (void . z5177)) '() values values '#f '#f '#f '#f) (z2adb@z297a@install-library 'z519e '(mosh) '() '() '() '() '((set-symbol-value! . z517a) (symbol-value . z5179) (regexp? . z5175) (read-line . z5174) (ungensym . z5173) (alist->eq-hash-table . z5172) (assoc-ref . z5171) (print . z5170) (format . z516f) (host-os . z516e) (library-path . z2959) (standard-library-path . z516d) (file-newer? . z516c) (stat-mtime . z516b) (write-to-file . z516a) (file->list . z5169) (file->string . z5168) (digit->integer . z5167) (call-with-string-input-port . z5166) (call-with-string-io . z5165) (string-split . z5164) (bytevector-for-each . z5163) (string->regexp . z5162) (rxmatch . z5161) (regexp-replace-all . z5160) (hashtable-for-each . z515f) (readdir . z515b) (set-current-directory! . z515a) (expand-path . z5159) (current-directory . z5158) (p . z5149) (get-timeofday . z5144) (get-command-line . z5143) (sys-display . z5142) (vm-join! . z5141) (vm-set-value! . z5140) (vm? . z513f) (vm-start! . z513e) (make-vm . z513d) (mutex-try-lock! . z513c) (mutex-unlock! . z513b) (mutex-lock! . z513a) (mutex? . z5139) (make-mutex . z5138) (condition-variable-notify-all! . z5137) (condition-variable-notify! . z5136) (condition-variable-wait! . z5135) (make-condition-variable . z5134) (mosh-executable-path . z5133) (make-file-options . z5132) (source-info . z5131) (make-compiler-instruction . z5130) (make-instruction . z512f) (set-source-info! . z512e) (bignum? . z512d) (fast-equal? . z512c) (fasl-read . z512b) (fasl-write . z512a) (time-usage . z5129) (os-constant . z5128) (time . z4ec7) (include . z4ebb)) '() values values '#f '#f '#f '#f) (z2adb@z297a@install-library 'z519f '(system) '() '() '() '() '((call-process . z515e) (local-tz-offset . z515d) (microseconds . z515c) (expand-path . z5159) (%spawn . z5157) (%waitpid . z5156) (%ffi-supported? . z5155) (%ffi-pointer-ref . z5154) (%ffi-pointer->string . z5153) (%ffi-call->string-or-zero . z5152) (%ffi-call->double . z5151) (%ffi-call->void* . z5150) (%ffi-call->void . z514f) (%ffi-call->int . z514e) (%ffi-lookup . z514d) (%ffi-open . z514c) (%fork . z514b) (%pipe . z514a) (open-output-string . z5148) (get-output-string . z5147) (get-environment-variables . z5146) (get-environment-variable . z5145) (make-parameter . z278c) (socket-port . z5127) (socket-shutdown . z5126) (socket-close . z5125) (socket-send . z5124) (socket-recv! . z5123) (socket-recv . z5122) (make-server-socket . z5121) (make-client-socket . z5120) (socket-accept . z511f) (socket? . z511e) (parameterize . z4eb6)) '() values values '#f '#f '#f '#f))
((lambda (z4d69@add-library-path! z4d6b@parse-and-add-library-path z4d6d@for-each-with-index z4d6f@rpad z4d71@condition-printer z4d73@record->field-alist z4d75@map-with-index z4d77@repl z4d79@trace-printer z4d7b@command-line z4d7d@local-library-path z4d7f@load/args z4d81@load z4d83@ironscheme-build z4d85@eval-top-level z4d87@compile-system-libraries z4d89@compile z4d8b@compile->closure z4d8d@pre-compile-r6rs-file z4d8f@load-r6rs-top-level z4d91@load-r6rs-top-level-sexp) (begin (set! z4d69@add-library-path! (lambda (z4db4@path) (z2acb@z295a@library-path (append (z2acb@z295a@library-path) (list z4db4@path))))) (set! z4d6b@parse-and-add-library-path (lambda (z4db6@paths z4db7@message) ((lambda (z4dba@t) (if z4dba@t ((lambda (z4dbc@paths) (for-each (lambda (z4dbe@path) (if (file-exists? z4dbe@path) (z4d69@add-library-path! (expand-path z4dbe@path)) (format (current-error-port) z4db7@message z4dbe@path))) (reverse (string-split z4dbc@paths '#\:)))) z4dba@t) (void))) z4db6@paths))) (set! z4d6d@for-each-with-index (lambda (z4dc0@proc z4dc1@lst) (letrec ((z4dc4@loop (lambda (z4dc6@i z4dc7@lst) (if (null? z4dc7@lst) (if '#f '#f (void)) (begin (z4dc0@proc z4dc6@i (car z4dc7@lst)) (z4dc4@loop (+ z4dc6@i '1) (cdr z4dc7@lst))))))) (z4dc4@loop '1 z4dc1@lst)))) (set! z4d6f@rpad (lambda (z4dca@str z4dcb@pad z4dcc@n) ((lambda (z4dd0@rest) ((letrec ((z4dd2@loop (lambda (z4dd4@rest z4dd5@ret) (if (<= z4dd4@rest '0) z4dd5@ret (z4dd2@loop (- z4dd4@rest '1) (string-append z4dd5@ret z4dcb@pad)))))) z4dd2@loop) z4dd0@rest (format '"~a" z4dca@str))) (- z4dcc@n (string-length (format '"~a" z4dca@str)))))) (set! z4d71@condition-printer (lambda (z4dd8@e z4dd9@port) ((lambda (z4ddd@max-condition-len) (begin (set! z4ddd@max-condition-len (apply max (map (lambda (z4dee@c) (string-length (symbol->string (record-type-name (record-rtd z4dee@c))))) (simple-conditions z4dd8@e)))) (begin (display '" Condition components:\n" z4dd9@port) (z4d6d@for-each-with-index (lambda (z4dde@i z4ddf@x) ((lambda (z4de2@rtd z4de3@fields-alist) (begin (format z4dd9@port '" ~d. ~a" z4dde@i (z4d6f@rpad (symbol->string (record-type-name z4de2@rtd)) '" " z4ddd@max-condition-len)) (if (null? z4de3@fields-alist) (newline z4dd9@port) (void)) ((letrec ((z4de6@loop (lambda (z4de8@first z4de9@fields-alist) (if (null? z4de9@fields-alist) '() ((lambda (z4dec@field) (begin (if (not z4de8@first) (display (z4d6f@rpad '"" '" " (+ '4 z4ddd@max-condition-len)) z4dd9@port) (void)) (display '"       " z4dd9@port) (display (car z4dec@field) z4dd9@port) (display '": " z4dd9@port) (write (cdr z4dec@field) z4dd9@port) (newline z4dd9@port) (z4de6@loop '#f (cdr z4de9@fields-alist)))) (car z4de9@fields-alist)))))) z4de6@loop) '#t z4de3@fields-alist))) (record-rtd z4ddf@x) (z4d73@record->field-alist z4ddf@x))) (simple-conditions z4dd8@e))))) '#f))) (set! z4d73@record->field-alist (lambda (z4df0@r) ((lambda (z4df3@ref) (begin (set! z4df3@ref (lambda (z4dfe@rtd z4dff@i z4e00@x) ((lambda (z4e04@val) (if (symbol? z4e04@val) (ungensym z4e04@val) z4e04@val)) ((record-accessor z4dfe@rtd z4dff@i) z4e00@x)))) ((letrec ((z4df4@loop (lambda (z4df6@ret z4df7@rtd) (if z4df7@rtd (z4df4@loop (append z4df6@ret (z4d75@map-with-index (lambda (z4dfa@i z4dfb@field) (cons z4dfb@field (z4df3@ref z4df7@rtd z4dfa@i z4df0@r))) (vector->list (record-type-field-names z4df7@rtd)))) (record-type-parent z4df7@rtd)) z4df6@ret)))) z4df4@loop) '() (record-rtd z4df0@r)))) '#f))) (set! z4d75@map-with-index (lambda (z4e06@proc z4e07@lst) ((letrec ((z4e0a@loop (lambda (z4e0c@i z4e0d@lst z4e0e@ret) (if (null? z4e0d@lst) (reverse z4e0e@ret) (z4e0a@loop (+ z4e0c@i '1) (cdr z4e0d@lst) (cons (z4e06@proc z4e0c@i (car z4e0d@lst)) z4e0e@ret)))))) z4e0a@loop) '0 z4e07@lst '()))) (set! z4d77@repl (lambda z4e12@x ((lambda (z4e15@rec) (begin (set! z4e15@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (z4e18@z4e16) (lambda () (with-exception-handler (lambda (z4e1a@e) ((call/cc (lambda (z4e1c@z4e17) (z4e18@z4e16 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? z4e1a@e) (z4d71@condition-printer z4e1a@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" z4e1a@e))) (z4e1c@z4e17 (lambda () (raise-continuable z4e1a@e)))))))))) (lambda () ((letrec ((z4e1e@loop (lambda (z4e20@line z4e21@accum) ((lambda (z4e25@parentheses-ok? z4e27@eval-string-print) (begin (set! z4e25@parentheses-ok? (lambda (z4e2c@text) ((letrec ((z4e2e@loop (lambda (z4e30@chars z4e31@p0 z4e32@p1) (if (null? z4e30@chars) (= '0 z4e31@p0 z4e32@p1) ((lambda (z4e36@t) (if (memv z4e36@t '(#\()) (z4e2e@loop (cdr z4e30@chars) (+ z4e31@p0 '1) z4e32@p1) (if (memv z4e36@t '(#\))) (z4e2e@loop (cdr z4e30@chars) (- z4e31@p0 '1) z4e32@p1) (if (memv z4e36@t '(#\[)) (z4e2e@loop (cdr z4e30@chars) z4e31@p0 (+ z4e32@p1 '1)) (if (memv z4e36@t '(#\])) (z4e2e@loop (cdr z4e30@chars) z4e31@p0 (- z4e32@p1 '1)) (z4e2e@loop (cdr z4e30@chars) z4e31@p0 z4e32@p1)))))) (car z4e30@chars)))))) z4e2e@loop) (string->list z4e2c@text) '0 '0))) (set! z4e27@eval-string-print (lambda (z4e2a@text) (if (not (or (string=? '"\n" z4e2a@text) (= '0 (string-length z4e2a@text)))) (write (z4d85@eval-top-level (call-with-port (open-string-input-port z4e2a@text) read))) (void)))) (if (eof-object? z4e20@line) (begin (z4e27@eval-string-print z4e21@accum) (exit)) ((lambda (z4e28@current) (if (z4e25@parentheses-ok? z4e28@current) (z4e27@eval-string-print z4e28@current) (z4e1e@loop (get-line (current-input-port)) z4e28@current))) (string-append z4e21@accum z4e20@line))))) '#f '#f)))) z4e1e@loop) (get-line (current-input-port)) '""))))))) (newline) (z4e15@rec)))) (z4e15@rec))) '#f))) (set! z4d79@trace-printer (z2863@z278d@make-parameter write)) (set! z4d7b@command-line (z2863@z278d@make-parameter (get-command-line))) (set! z4d7d@local-library-path (lambda (z4e38@filename) (cons (expand-path '".") (z2acb@z295a@library-path)))) (set! z4d7f@load/args (lambda (z4e3a@filename . z4e3c@args) (begin (apply z4d8f@load-r6rs-top-level z4e3a@filename 'load z4e3c@args) (void)))) (set! z4d81@load (lambda (z4e3e@filename) (begin (apply z4d8f@load-r6rs-top-level z4e3e@filename 'load (z4d7b@command-line)) (void)))) (set! z4d83@ironscheme-build (lambda () (z4d81@load '"ironscheme-buildscript.ss"))) (set! z4d85@eval-top-level (lambda (z4e40@x) (z4995@z2f8d@eval z4e40@x (z49ab@z2fb9@interaction-environment)))) (set! z4d87@compile-system-libraries (lambda () (z4d85@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! z4d89@compile (lambda (z4e42@filename) (z4d8f@load-r6rs-top-level z4e42@filename 'compile))) (set! z4d8b@compile->closure (lambda (z4e44@filename) (z4d8f@load-r6rs-top-level z4e44@filename 'closure))) (set! z4d8d@pre-compile-r6rs-file (lambda (z4e46@filename) (z4d8f@load-r6rs-top-level z4e46@filename 'compile))) (set! z4d8f@load-r6rs-top-level (lambda (z4e48@filename z4e49@how . z4e4c@args) ((lambda (z4e52@z4e4f z4e53@z4e51) ((lambda (z4e56@swap) (dynamic-wind z4e56@swap (lambda () ((lambda (z4e58@x*) ((lambda (z4e5a@t) (if (memv z4e5a@t '(closure)) (z49aa@z2fb7@pre-compile-r6rs-top-level z4e58@x*) (if (memv z4e5a@t '(load)) ((lambda (z4e60@z4e5d z4e61@z4e5f) ((lambda (z4e64@swap) (dynamic-wind z4e64@swap (lambda () ((z49a9@z2fb5@compile-r6rs-top-level z4e58@x*))) z4e64@swap)) (lambda () ((lambda (z4e66@t) (begin (z4e60@z4e5d z4e61@z4e5f) (set! z4e61@z4e5f z4e66@t))) (z4e60@z4e5d))))) z4d7b@command-line (cons z4e48@filename (car z4e4c@args))) (if (memv z4e5a@t '(compile)) (begin (z49a9@z2fb5@compile-r6rs-top-level z4e58@x*) (z2acf@z2962@serialize-all z285e@z2783@serialize-library z28b8@z2871@compile-core-expr)) (if '#f '#f (void)))))) z4e49@how)) (with-input-from-file z4e48@filename (lambda () ((letrec ((z4e68@f (lambda () ((lambda (z4e6a@x) (if (eof-object? z4e6a@x) '() (cons z4e6a@x (z4e68@f)))) (z2856@z2773@read-annotated))))) z4e68@f)))))) z4e56@swap)) (lambda () ((lambda (z4e6c@t) (begin (z4e52@z4e4f z4e53@z4e51) (set! z4e53@z4e51 z4e6c@t))) (z4e52@z4e4f))))) z2acb@z295a@library-path (z4d7d@local-library-path z4e48@filename)))) (set! z4d91@load-r6rs-top-level-sexp (lambda (z4e6e@import-spec z4e6f@thunk) ((lambda (z4e76@z4e73 z4e77@z4e75) ((lambda (z4e7a@swap) (dynamic-wind z4e7a@swap (lambda () ((lambda (z4e80@z4e7d z4e81@z4e7f) ((lambda (z4e84@swap) (dynamic-wind z4e84@swap (lambda () ((z49a9@z2fb5@compile-r6rs-top-level (list (cons 'import z4e6e@import-spec) (list z4e6f@thunk))))) z4e84@swap)) (lambda () ((lambda (z4e86@t) (begin (z4e80@z4e7d z4e81@z4e7f) (set! z4e81@z4e7f z4e86@t))) (z4e80@z4e7d))))) z4d7b@command-line '())) z4e7a@swap)) (lambda () ((lambda (z4e88@t) (begin (z4e76@z4e73 z4e77@z4e75) (set! z4e77@z4e75 z4e88@t))) (z4e76@z4e73))))) z2acb@z295a@library-path (z4d7d@local-library-path '"")))) (begin (set! z4e9e@z4d91@load-r6rs-top-level-sexp z4d91@load-r6rs-top-level-sexp) (set! z4e9d@z4d8f@load-r6rs-top-level z4d8f@load-r6rs-top-level) (set! z4e9c@z4d8d@pre-compile-r6rs-file z4d8d@pre-compile-r6rs-file) (set! z4e9b@z4d8b@compile->closure z4d8b@compile->closure) (set! z4e9a@z4d89@compile z4d89@compile) (set! z4e99@z4d87@compile-system-libraries z4d87@compile-system-libraries) (set! z4e98@z4d85@eval-top-level z4d85@eval-top-level) (set! z4e97@z4d83@ironscheme-build z4d83@ironscheme-build) (set! z4e96@z4d81@load z4d81@load) (set! z4e95@z4d7f@load/args z4d7f@load/args) (set! z4e94@z4d7d@local-library-path z4d7d@local-library-path) (set! z4e93@z4d7b@command-line z4d7b@command-line) (set! z4e92@z4d79@trace-printer z4d79@trace-printer) (set! z4e91@z4d77@repl z4d77@repl) (set! z4e90@z4d75@map-with-index z4d75@map-with-index) (set! z4e8f@z4d73@record->field-alist z4d73@record->field-alist) (set! z4e8e@z4d71@condition-printer z4d71@condition-printer) (set! z4e8d@z4d6f@rpad z4d6f@rpad) (set! z4e8c@z4d6d@for-each-with-index z4d6d@for-each-with-index) (set! z4e8b@z4d6b@parse-and-add-library-path z4d6b@parse-and-add-library-path) (set! z4e8a@z4d69@add-library-path! z4d69@add-library-path!) (z2ad0@z2964@current-precompiled-library-loader z285f@z2785@load-serialized-library) (set-symbol-value! 'load z4d81@load) (set-symbol-value! 'pre-compile-r6rs-file z4d8d@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs z4d85@eval-top-level) (set-symbol-value! 'int-env-syms z498c@z2f7b@interaction-environment-symbols) (set-symbol-value! 'expanded2core z28b7@z286f@expanded->core) (set-symbol-value! 'trace-printer z4d79@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (z4d92@c) (condition (z4cc6@z4ad0@make-non-continuable-violation) (z4cbc@z4ab7@make-who-condition 'raise) (z4c80@z4a18@make-message-condition '"returned from non-continuable exception") (z4cb2@z4a9c@make-irritants-condition (list z4d92@c))))) (z4d6b@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (z4d6b@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (z4d69@add-library-path! (string-append (mosh-executable-path) '"/lib")) (z4d69@add-library-path! (string-append (current-directory) '"/lib"))) (z4d69@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (z4d94@prefix) (z2acc@z295c@library-extensions (z4d94@prefix '".mosh" (z2acc@z295c@library-extensions)))) (lambda (z4d96@ext z4d97@ls) (append (map (lambda (z4d9a@x) (string-append z4d96@ext z4d9a@x)) z4d97@ls) z4d97@ls))) ((lambda (z4d9c@args z4d9d@port) ((lambda (z4da1@ref) (begin (set! z4da1@ref (lambda (z4dac@rtd z4dad@i z4dae@x) ((lambda (z4db2@val) (if (symbol? z4db2@val) (ungensym z4db2@val) z4db2@val)) ((record-accessor z4dac@rtd z4dad@i) z4dae@x)))) (with-exception-handler (lambda (z4da2@c) (if (condition? z4da2@c) (z4d71@condition-printer z4da2@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" z4da2@c))) (lambda () (if ((call/cc (lambda (z4da6@z4da4) (lambda () (with-exception-handler (lambda (z4da8@c) ((call/cc (lambda (z4daa@z4da5) (z4da6@z4da4 (lambda () (if '#t '#f (z4daa@z4da5 (lambda () (raise-continuable z4da8@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (z4d91@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? z4d9c@args) (z4d77@repl) (z4d8f@load-r6rs-top-level (car z4d9c@args) 'load (cdr z4d9c@args)))))))) '#f)) (z4d7b@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
