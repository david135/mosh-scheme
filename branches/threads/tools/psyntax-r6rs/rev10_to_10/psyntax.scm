;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (n2765@read-annotated n2767@annotation-stripped n2769@annotation? n276b@annotation-source n276d@annotation-expression n276f@scm->fasl n2771@fasl-save n2773@fasl-load n2775@serialize-library n2777@load-serialized-library n2779@make-record-printer n277b@compile-core n277d@read-library-source-file n277f@make-parameter n27e7@file-options-spec) (begin (set! n2765@read-annotated read) (set! n2767@annotation-stripped (lambda (n27e8@x) (n276d@annotation-expression n27e8@x))) (set! n2769@annotation? (lambda (n27ea@x) (source-info n27ea@x))) (set! n276b@annotation-source (lambda (n27ec@x) (source-info n27ec@x))) (set! n276d@annotation-expression (lambda (n27ee@x) (if (pair? n27ee@x) (cons (car n27ee@x) (cdr n27ee@x)) (display '"line:46\n")))) (set! n276f@scm->fasl (lambda (n27f0@filename) (string-append n27f0@filename '".fasl"))) (set! n2771@fasl-save (lambda (n27f2@filename n27f3@obj) (call-with-port (open-file-output-port n27f2@filename) (lambda (n27f6@port) ((symbol-value 'fasl-write!) n27f3@obj n27f6@port))))) (set! n2773@fasl-load (lambda (n27f8@filename) (call-with-port (open-file-input-port n27f8@filename) (symbol-value 'fasl-read!)))) (set! n2775@serialize-library (lambda (n27fa@filename n27fb@obj) (begin (format '#t '"serialize-library ~a\n..." n27fa@filename) ((lambda (n27fe@expanded2core) ((lambda (n2800@compile) ((lambda (n2802@code) ((lambda (n2804@pivot) ((lambda (n2806@visit) ((lambda () (begin (set-car! n2804@pivot n2806@visit) ((lambda (n2808@pivot) ((lambda (n280a@invoke) ((lambda () (set-car! n2808@pivot n280a@invoke)))) (n2800@compile (n27fe@expanded2core (car n2808@pivot))))) (cdr n2804@pivot)))))) (n2800@compile (n27fe@expanded2core (car n2804@pivot))))) (cddddr (cddddr n2802@code)))) n27fb@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (n280c@fasl-file) (begin (if (file-exists? n280c@fasl-file) (delete-file n280c@fasl-file) (void)) ((call/cc (lambda (n2810@n280e) (lambda () (with-exception-handler (lambda (n2812@c) ((call/cc (lambda (n2814@n280f) (n2810@n280e (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " n27fa@filename) (if (file-exists? n280c@fasl-file) (delete-file n280c@fasl-file) (void)) '#f) (n2814@n280f (lambda () (raise-continuable n2812@c)))))))))) (lambda () (begin (n2771@fasl-save n280c@fasl-file n27fb@obj) (display '"OK\n")))))))))) (n276f@scm->fasl n27fa@filename))))) (set! n2777@load-serialized-library (lambda (n2816@filename n2817@obj) ((lambda (n281a@fasl-file) (if (and (file-exists? n281a@fasl-file) ((symbol-value 'file-newer?) n281a@fasl-file n2816@filename)) ((lambda (n281c@expanded2core) ((lambda (n281e@eval-compiled-core) ((lambda (n2820@code) ((lambda (n2822@pivot) ((lambda (n2824@visit) ((lambda (n2826@visit-proc) ((lambda () (begin (set-car! n2822@pivot n2826@visit-proc) ((lambda (n2828@pivot) ((lambda (n282a@invoke) ((lambda () (begin (set-car! n2828@pivot (lambda () (n281e@eval-compiled-core n282a@invoke))) (apply n2817@obj n2820@code))))) (car n2828@pivot))) (cdr n2822@pivot)) '#t)))) (lambda () (n281e@eval-compiled-core n2824@visit)))) (car n2822@pivot))) (cddddr (cddddr n2820@code)))) (n2773@fasl-load n281a@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (n276f@scm->fasl n2816@filename)))) (set! n2779@make-record-printer (lambda (n282c@name n282d@printer) (lambda n2830@x (begin (display '"record printer") (for-each display n2830@x))))) (set! n277b@compile-core (lambda n2832@x (apply error 'comile-core '"not implementated" n2832@x))) (set! n277d@read-library-source-file (lambda (n2834@file-name) (with-input-from-file n2834@file-name n2765@read-annotated))) (set! n277f@make-parameter (lambda n2844 ((lambda (n2845) (if (= n2845 '1) (apply (lambda (n2836@x) (n277f@make-parameter n2836@x (lambda (n2838@x) n2838@x))) n2844) (if (= n2845 '2) (apply (lambda (n283a@x n283b@fender) ((lambda (n283e@x) (lambda n2842 ((lambda (n2843) (if (= n2843 '0) (apply (lambda () n283e@x) n2842) (if (= n2843 '1) (apply (lambda (n2840@v) (set! n283e@x (n283b@fender n2840@v))) n2842) (error 'apply '"invalid arg count")))) (length n2842)))) (n283b@fender n283a@x))) n2844) (error 'apply '"invalid arg count")))) (length n2844)))) (set! n27e7@file-options-spec (lambda (n2846@x) n2846@x)) (begin (set! n2856@n27e7@file-options-spec n27e7@file-options-spec) (set! n2855@n277f@make-parameter n277f@make-parameter) (set! n2854@n277d@read-library-source-file n277d@read-library-source-file) (set! n2853@n277b@compile-core n277b@compile-core) (set! n2852@n2779@make-record-printer n2779@make-record-printer) (set! n2851@n2777@load-serialized-library n2777@load-serialized-library) (set! n2850@n2775@serialize-library n2775@serialize-library) (set! n284f@n2773@fasl-load n2773@fasl-load) (set! n284e@n2771@fasl-save n2771@fasl-save) (set! n284d@n276f@scm->fasl n276f@scm->fasl) (set! n284c@n276d@annotation-expression n276d@annotation-expression) (set! n284b@n276b@annotation-source n276b@annotation-source) (set! n284a@n2769@annotation? n2769@annotation?) (set! n2849@n2767@annotation-stripped n2767@annotation-stripped) (set! n2848@n2765@read-annotated n2765@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (n285b@current-primitive-locations n285d@mutable? n285f@rewriter n2861@expanded->core n2863@compile-core-expr n2865@pretty-print n2867@compile-core-expr-to-port) (begin (set! n285b@current-primitive-locations (n2855@n277f@make-parameter (lambda (n2868@x) '#f) (lambda (n286a@p) n286a@p))) (set! n285d@mutable? (lambda (n286c@x) (or (pair? n286c@x) (vector? n286c@x) (hashtable? n286c@x)))) (set! n285f@rewriter (lambda (n286e@quote-hack?) ((lambda (n2871@f) (begin (set! n2871@f (lambda (n2872@x) (if (pair? n2872@x) ((lambda (n2874@t) (if (memv n2874@t '(quote)) (if (and n286e@quote-hack? (n285d@mutable? (cadr n2872@x))) ((lambda (n2876@g) (begin (set-symbol-value! n2876@g (cadr n2872@x)) n2876@g)) (gensym)) n2872@x) (if (memv n2874@t '(case-lambda)) (cons 'case-lambda (map (lambda (n2878@x) (cons (car n2878@x) (map n2871@f (cdr n2878@x)))) (cdr n2872@x))) (if (memv n2874@t '(lambda)) (cons* 'lambda (cadr n2872@x) (map n2871@f (cddr n2872@x))) (if (memv n2874@t '(letrec)) ((lambda (n287a@bindings n287b@body*) ((lambda (n287e@lhs* n287f@rhs*) (cons* 'letrec (map list n287e@lhs* (map n2871@f n287f@rhs*)) (map n2871@f n287b@body*))) (map car n287a@bindings) (map cadr n287a@bindings))) (cadr n2872@x) (cddr n2872@x)) (if (memv n2874@t '(letrec*)) ((lambda (n2882@bindings n2883@body*) ((lambda (n2886@lhs* n2887@rhs*) (cons* 'letrec* (map list n2886@lhs* (map n2871@f n2887@rhs*)) (map n2871@f n2883@body*))) (map car n2882@bindings) (map cadr n2882@bindings))) (cadr n2872@x) (cddr n2872@x)) (if (memv n2874@t '(library-letrec*)) ((lambda (n288a@name n288b@x) ((lambda (n288e@bindings n288f@body*) ((lambda (n2892@lhs* n2893@lhs** n2894@rhs*) (cons* 'library-letrec* n288a@name (map list n2892@lhs* n2893@lhs** (map n2871@f n2894@rhs*)) (map n2871@f n288f@body*))) (map car n288e@bindings) (map cadr n288e@bindings) (map caddr n288e@bindings))) (cadr n288b@x) (cddr n288b@x))) (cadr n2872@x) (cdr n2872@x)) (if (memv n2874@t '(begin)) (cons 'begin (map n2871@f (cdr n2872@x))) (if (memv n2874@t '(set!)) (list 'set! (cadr n2872@x) (n2871@f (caddr n2872@x))) (if (memv n2874@t '(primitive)) ((lambda (n2898@op) ((lambda (n289a@t) (if n289a@t ((lambda (n289c@loc) n289c@loc) n289a@t) n2898@op)) ((n285b@current-primitive-locations) n2898@op))) (cadr n2872@x)) (if (memv n2874@t '(define)) n2872@x (if (list? n2872@x) (map n2871@f n2872@x) (error 'rewrite '"invalid form ~s ~s" n2872@x (list? n2872@x)))))))))))))) (car n2872@x)) n2872@x))) n2871@f)) '#f))) (set! n2861@expanded->core (lambda (n289e@x) ((n285f@rewriter '#f) n289e@x))) (set! n2863@compile-core-expr (lambda (n28a0@x) ((n285f@rewriter '#f) n28a0@x))) (set! n2865@pretty-print write) (set! n2867@compile-core-expr-to-port (lambda (n28a2@x n28a3@p) (n2865@pretty-print ((n285f@rewriter '#f) n28a2@x) n28a3@p))) (begin (set! n28ac@n2867@compile-core-expr-to-port n2867@compile-core-expr-to-port) (set! n28ab@n2865@pretty-print n2865@pretty-print) (set! n28aa@n2863@compile-core-expr n2863@compile-core-expr) (set! n28a9@n2861@expanded->core n2861@expanded->core) (set! n28a8@n285f@rewriter n285f@rewriter) (set! n28a7@n285d@mutable? n285d@mutable?) (set! n28a6@n285b@current-primitive-locations n285b@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (n28fb@make-collection n28fd@current-library-collection n2903@n28fe n2905@n2900 n2907@n28ff n290a@library? n290c@make-library n290e@library-id n2910@library-name n2912@library-version n2914@library-imp* n2916@library-vis* n2918@library-inv* n291a@library-subst n291c@library-env n291e@library-visit-state n2920@library-invoke-state n2922@library-visit-code n2924@library-invoke-code n2926@library-visible? n2928@library-source-file-name n292a@set-library-id! n292c@set-library-name! n292e@set-library-version! n2930@set-library-imp*! n2932@set-library-vis*! n2934@set-library-inv*! n2936@set-library-subst! n2938@set-library-env! n293a@set-library-visit-state! n293c@set-library-invoke-state! n293e@set-library-visit-code! n2940@set-library-invoke-code! n2942@set-library-visible?! n2944@set-library-source-file-name! n2946@rp n2948@find-dependencies n294a@find-library-by n294c@library-path n294e@library-extensions n2950@library-name->file-name n2952@file-locator n2954@serialize-all n2956@current-precompiled-library-loader n2958@try-load-from-file n295a@library-loader n295c@current-library-expander n295e@external-pending-libraries n2960@find-external-library n2962@find-library-by-name n2964@library-exists? n2966@find-library-by-spec/die n2968@label->binding-table n296a@install-library-record n296c@install-library n296e@imported-label->binding n2970@invoke-library n2972@visit-library n2974@invoke-library-by-spec n2976@installed-libraries n2978@library-spec) (begin (set! n28fb@make-collection (lambda () ((lambda (n2979@set) ((lambda (n297c@set-cons) (begin (set! n297c@set-cons (lambda (n2981@x n2982@ls) (if (memq n2981@x n2982@ls) n2982@ls (cons n2981@x n2982@ls)))) (lambda n297f ((lambda (n2980) (if (= n2980 '0) (apply (lambda () n2979@set) n297f) (if (= n2980 '1) (apply (lambda (n297d@x) (set! n2979@set (n297c@set-cons n297d@x n2979@set))) n297f) (error 'apply '"invalid arg count")))) (length n297f))))) '#f)) '()))) (set! n28fd@current-library-collection (n2855@n277f@make-parameter (n28fb@make-collection) (lambda (n2985@x) (begin (if (not (procedure? n2985@x)) (assertion-violation 'current-library-collection '"not a procedure" n2985@x) (void)) n2985@x)))) (set! n2903@n28fe (make-record-type-descriptor 'library '#f 'n2901 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! n2905@n2900 '#f) (set! n2907@n28ff (make-record-constructor-descriptor n2903@n28fe '#f n2905@n2900)) (set! n290a@library? (record-predicate n2903@n28fe)) (set! n290c@make-library (record-constructor n2907@n28ff)) (set! n290e@library-id (record-accessor n2903@n28fe '0)) (set! n2910@library-name (record-accessor n2903@n28fe '1)) (set! n2912@library-version (record-accessor n2903@n28fe '2)) (set! n2914@library-imp* (record-accessor n2903@n28fe '3)) (set! n2916@library-vis* (record-accessor n2903@n28fe '4)) (set! n2918@library-inv* (record-accessor n2903@n28fe '5)) (set! n291a@library-subst (record-accessor n2903@n28fe '6)) (set! n291c@library-env (record-accessor n2903@n28fe '7)) (set! n291e@library-visit-state (record-accessor n2903@n28fe '8)) (set! n2920@library-invoke-state (record-accessor n2903@n28fe '9)) (set! n2922@library-visit-code (record-accessor n2903@n28fe '10)) (set! n2924@library-invoke-code (record-accessor n2903@n28fe '11)) (set! n2926@library-visible? (record-accessor n2903@n28fe '12)) (set! n2928@library-source-file-name (record-accessor n2903@n28fe '13)) (set! n292a@set-library-id! (record-mutator n2903@n28fe '0)) (set! n292c@set-library-name! (record-mutator n2903@n28fe '1)) (set! n292e@set-library-version! (record-mutator n2903@n28fe '2)) (set! n2930@set-library-imp*! (record-mutator n2903@n28fe '3)) (set! n2932@set-library-vis*! (record-mutator n2903@n28fe '4)) (set! n2934@set-library-inv*! (record-mutator n2903@n28fe '5)) (set! n2936@set-library-subst! (record-mutator n2903@n28fe '6)) (set! n2938@set-library-env! (record-mutator n2903@n28fe '7)) (set! n293a@set-library-visit-state! (record-mutator n2903@n28fe '8)) (set! n293c@set-library-invoke-state! (record-mutator n2903@n28fe '9)) (set! n293e@set-library-visit-code! (record-mutator n2903@n28fe '10)) (set! n2940@set-library-invoke-code! (record-mutator n2903@n28fe '11)) (set! n2942@set-library-visible?! (record-mutator n2903@n28fe '12)) (set! n2944@set-library-source-file-name! (record-mutator n2903@n28fe '13)) (set! n2946@rp (n2852@n2779@make-record-printer 'library (lambda (n2987@x n2988@p n2989@wr) (begin (if (not (n290a@library? n2987@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (n2912@library-version n2987@x)) (n2910@library-name n2987@x) (append (n2910@library-name n2987@x) (list (n2912@library-version n2987@x))))) n2988@p))))) (set! n2948@find-dependencies (lambda (n298d@ls) (if (null? n298d@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! n294a@find-library-by (lambda (n298f@pred) ((letrec ((n2991@f (lambda (n2993@ls) (if (null? n2993@ls) '#f (if (n298f@pred (car n2993@ls)) (car n2993@ls) (n2991@f (cdr n2993@ls))))))) n2991@f) ((n28fd@current-library-collection))))) (set! n294c@library-path (n2855@n277f@make-parameter '(".") (lambda (n2995@x) (if (and (list? n2995@x) (for-all string? n2995@x)) (map (lambda (n2997@x) n2997@x) n2995@x) (assertion-violation 'library-path '"not a list of strings" n2995@x))))) (set! n294e@library-extensions (n2855@n277f@make-parameter '(".sls" ".ss" ".scm") (lambda (n2999@x) (if (and (list? n2999@x) (for-all string? n2999@x)) (map (lambda (n299b@x) n299b@x) n2999@x) (assertion-violation 'library-extensions '"not a list of strings" n2999@x))))) (set! n2950@library-name->file-name (lambda (n299d@x) (call-with-values (lambda () (open-string-output-port)) (lambda (n29a3@n29a0 n29a4@n29a2) ((lambda (n29a7@extract n29a8@p) ((lambda (n29ac@display-hex) (begin (set! n29ac@display-hex (lambda (n29b5@n) (if (<= '0 n29b5@n '9) (display n29b5@n n29a8@p) (display (integer->char (+ (char->integer '#\a) (- n29b5@n '10))) n29a8@p)))) (begin ((letrec ((n29ad@f (lambda (n29af@ls) (if (not (null? n29af@ls)) (begin (display '"/" n29a8@p) (for-each (lambda (n29b1@c) (if (or (char<=? '#\a n29b1@c '#\z) (char<=? '#\A n29b1@c '#\Z) (char<=? '#\0 n29b1@c '#\9) (memv n29b1@c '(#\- #\. #\_ #\~))) (display n29b1@c n29a8@p) (begin (display '"%" n29a8@p) ((lambda (n29b3@n) (begin (n29ac@display-hex (quotient n29b3@n '16)) (n29ac@display-hex (remainder n29b3@n '16)))) (char->integer n29b1@c))))) (string->list (symbol->string (car n29af@ls)))) (n29ad@f (cdr n29af@ls))) (void))))) n29ad@f) n299d@x) (n29a7@extract)))) '#f)) n29a4@n29a2 n29a3@n29a0))))) (set! n2952@file-locator (n2855@n277f@make-parameter (lambda (n29b7@x) ((lambda (n29b9@str) ((letrec ((n29bb@f (lambda (n29bd@ls n29be@exts n29bf@failed-list) (if (null? n29bd@ls) ((lambda () ((lambda (n29cb@n29c6 n29cd@n29c8 n29cf@n29c7 n29d2@n29c5 n29d4@make-library-resolution-condition n29d6@n29c3 n29d8@n29c4 n29da@library-resolution-condition? n29dc@condition-library n29de@condition-files) (begin (set! n29cb@n29c6 (make-record-type-descriptor '&library-resolution n4c6c@n49b3@&condition-rtd 'n29c9 '#f '#f '#((immutable library) (immutable files)))) (set! n29cd@n29c8 '#f) (set! n29cf@n29c7 (make-record-constructor-descriptor n29cb@n29c6 n4c6d@n49b5@&condition-rcd n29cd@n29c8)) (set! n29d2@n29c5 (record-predicate n29cb@n29c6)) (set! n29d4@make-library-resolution-condition (record-constructor n29cf@n29c7)) (set! n29d6@n29c3 (record-accessor n29cb@n29c6 '0)) (set! n29d8@n29c4 (record-accessor n29cb@n29c6 '1)) (set! n29da@library-resolution-condition? (condition-predicate n29cb@n29c6)) (set! n29dc@condition-library (condition-accessor n29cb@n29c6 n29d6@n29c3)) (set! n29de@condition-files (condition-accessor n29cb@n29c6 n29d8@n29c4)) (raise (condition (n4c8c@n4a4d@make-error) (n4cae@n4aa9@make-who-condition 'expander) (n4c72@n4a0a@make-message-condition '"cannot locate library in library-path") (n29d4@make-library-resolution-condition n29b7@x (reverse n29bf@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? n29be@exts) (n29bb@f (cdr n29bd@ls) (n294e@library-extensions) n29bf@failed-list) ((lambda (n29df@name) (if (file-exists? n29df@name) n29df@name (n29bb@f n29bd@ls (cdr n29be@exts) (cons n29df@name n29bf@failed-list)))) (string-append (car n29bd@ls) n29b9@str (car n29be@exts)))))))) n29bb@f) (n294c@library-path) (n294e@library-extensions) '())) (n2950@library-name->file-name n29b7@x))) (lambda (n29e1@f) (if (procedure? n29e1@f) n29e1@f (assertion-violation 'file-locator '"not a procedure" n29e1@f))))) (set! n2954@serialize-all (lambda (n29e3@serialize n29e4@compile) ((lambda (n29e8@library-desc) (begin (set! n29e8@library-desc (lambda (n29eb@x) (list (n290e@library-id n29eb@x) (n2910@library-name n29eb@x)))) (for-each (lambda (n29e9@x) (if (n2928@library-source-file-name n29e9@x) (n29e3@serialize (n2928@library-source-file-name n29e9@x) (list (n290e@library-id n29e9@x) (n2910@library-name n29e9@x) (n2912@library-version n29e9@x) (map n29e8@library-desc (n2914@library-imp* n29e9@x)) (map n29e8@library-desc (n2916@library-vis* n29e9@x)) (map n29e8@library-desc (n2918@library-inv* n29e9@x)) (n291a@library-subst n29e9@x) (n291c@library-env n29e9@x) (n29e4@compile (n2922@library-visit-code n29e9@x)) (n29e4@compile (n2924@library-invoke-code n29e9@x)) (n2926@library-visible? n29e9@x))) (void))) ((n28fd@current-library-collection))))) '#f))) (set! n2956@current-precompiled-library-loader (n2855@n277f@make-parameter (lambda (n29ed@filename n29ee@sk) '#f))) (set! n2958@try-load-from-file (lambda (n29f1@filename) ((n2956@current-precompiled-library-loader) n29f1@filename (lambda n2a17 ((lambda (n2a18) (if (= n2a18 '11) (apply (lambda (n29f3@id n29f4@name n29f5@ver n29f6@imp* n29f7@vis* n29f8@inv* n29f9@exp-subst n29fa@exp-env n29fb@visit-proc n29fc@invoke-proc n29fd@visible?) ((letrec ((n2a09@f (lambda (n2a0b@deps) (if (null? n2a0b@deps) (begin (n296c@install-library n29f3@id n29f4@name n29f5@ver n29f6@imp* n29f7@vis* n29f8@inv* n29f9@exp-subst n29fa@exp-env n29fb@visit-proc n29fc@invoke-proc '#f '#f n29fd@visible? '#f) '#t) ((lambda (n2a0d@d) ((lambda (n2a0f@label n2a10@dname) ((lambda (n2a13@l) (if (and (n290a@library? n2a13@l) (eq? n2a0f@label (n290e@library-id n2a13@l))) (n2a09@f (cdr n2a0b@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" n29f4@name n2a10@dname n29f1@filename n2a13@l n2a0f@label (n290e@library-id n2a13@l)) '#f))) (n2962@find-library-by-name n2a10@dname))) (car n2a0d@d) (cadr n2a0d@d))) (car n2a0b@deps)))))) n2a09@f) (append n29f6@imp* n29f7@vis* n29f8@inv*))) n2a17) (if (>= n2a18 '0) (apply (lambda n2a15@others '#f) n2a17) (error 'apply '"invalid arg count")))) (length n2a17)))))) (set! n295a@library-loader (n2855@n277f@make-parameter (lambda (n2a19@x) ((lambda (n2a1b@file-name) (if (not n2a1b@file-name) (assertion-violation '#f '"cannot file library" n2a19@x) (or (n2958@try-load-from-file n2a1b@file-name) ((n295c@current-library-expander) (n2854@n277d@read-library-source-file n2a1b@file-name) n2a1b@file-name (lambda (n2a1d@name) (if (not (fast-equal? n2a1d@name n2a19@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (n2a23@n2a20 n2a24@n2a22) ((lambda (n2a27@e n2a28@p) (begin (display '"expected to find library " n2a28@p) (write n2a19@x n2a28@p) (display '" in file " n2a28@p) (display n2a1b@file-name n2a28@p) (display '", found " n2a28@p) (write n2a1d@name n2a28@p) (display '" instead" n2a28@p) (n2a27@e))) n2a24@n2a22 n2a23@n2a20)))) (void))))))) ((n2952@file-locator) n2a19@x))) (lambda (n2a2b@f) (if (procedure? n2a2b@f) n2a2b@f (assertion-violation 'library-locator '"not a procedure" n2a2b@f))))) (set! n295c@current-library-expander (n2855@n277f@make-parameter (lambda (n2a2d@x) (assertion-violation 'library-expander '"not initialized")) (lambda (n2a2f@f) (if (procedure? n2a2f@f) n2a2f@f (assertion-violation 'library-expander '"not a procedure" n2a2f@f))))) (set! n295e@external-pending-libraries (n2855@n277f@make-parameter '())) (set! n2960@find-external-library (lambda (n2a31@name) (begin (if (member n2a31@name (n295e@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" n2a31@name) (void)) ((lambda (n2a37@n2a34 n2a38@n2a36) ((lambda (n2a3b@swap) (dynamic-wind n2a3b@swap (lambda () (begin ((n295a@library-loader) n2a31@name) (or (n294a@find-library-by (lambda (n2a3d@x) (fast-equal? (n2910@library-name n2a3d@x) n2a31@name))) (assertion-violation '#f '"handling external library did not yield the correct library" n2a31@name)))) n2a3b@swap)) (lambda () ((lambda (n2a3f@t) (begin (n2a37@n2a34 n2a38@n2a36) (set! n2a38@n2a36 n2a3f@t))) (n2a37@n2a34))))) n295e@external-pending-libraries (cons n2a31@name (n295e@external-pending-libraries)))))) (set! n2962@find-library-by-name (lambda (n2a41@name) (or (n294a@find-library-by (lambda (n2a43@x) (fast-equal? (n2910@library-name n2a43@x) n2a41@name))) (n2960@find-external-library n2a41@name)))) (set! n2964@library-exists? (lambda (n2a45@name) (and (n294a@find-library-by (lambda (n2a47@x) (fast-equal? (n2910@library-name n2a47@x) n2a45@name))) '#t))) (set! n2966@find-library-by-spec/die (lambda (n2a49@spec) ((lambda (n2a4b@id) (or (n294a@find-library-by (lambda (n2a4d@x) (eq? n2a4b@id (n290e@library-id n2a4d@x)))) (assertion-violation '#f '"cannot find library with required spec" n2a49@spec))) (car n2a49@spec)))) (set! n2968@label->binding-table (make-eq-hashtable)) (set! n296a@install-library-record (lambda (n2a4f@lib) (begin ((lambda (n2a51@exp-env) (for-each (lambda (n2a53@x) ((lambda (n2a55@label n2a56@binding) ((lambda (n2a59@binding) (begin (if (hashtable-ref n2968@label->binding-table n2a55@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" n2a55@label (hashtable-ref n2968@label->binding-table n2a55@label '#f) n2a59@binding) (exit)) (void)) (hashtable-set! n2968@label->binding-table n2a55@label n2a59@binding))) ((lambda (n2a5b@t) (if (memv n2a5b@t '(global)) (cons 'global (cons n2a4f@lib (cdr n2a56@binding))) (if (memv n2a5b@t '(global-macro)) (cons 'global-macro (cons n2a4f@lib (cdr n2a56@binding))) (if (memv n2a5b@t '(global-macro!)) (cons 'global-macro! (cons n2a4f@lib (cdr n2a56@binding))) n2a56@binding)))) (car n2a56@binding)))) (car n2a53@x) (cdr n2a53@x))) n2a51@exp-env)) (n291c@library-env n2a4f@lib)) ((n28fd@current-library-collection) n2a4f@lib)))) (set! n296c@install-library (lambda (n2a5d@id n2a5e@name n2a5f@ver n2a60@imp* n2a61@vis* n2a62@inv* n2a63@exp-subst n2a64@exp-env n2a65@visit-proc n2a66@invoke-proc n2a67@visit-code n2a68@invoke-code n2a69@visible? n2a6a@source-file-name) ((lambda (n2a79@imp-lib* n2a7a@vis-lib* n2a7b@inv-lib*) (begin (if (not (and (symbol? n2a5d@id) (list? n2a5e@name) (list? n2a5f@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" n2a5d@id n2a5e@name n2a5f@ver) (void)) (if (n2964@library-exists? n2a5e@name) (assertion-violation 'install-library '"library is already installed" n2a5e@name) (void)) ((lambda (n2a7f@lib) (n296a@install-library-record n2a7f@lib)) (n290c@make-library n2a5d@id n2a5e@name n2a5f@ver n2a79@imp-lib* n2a7a@vis-lib* n2a7b@inv-lib* n2a63@exp-subst n2a64@exp-env n2a65@visit-proc n2a66@invoke-proc n2a67@visit-code n2a68@invoke-code n2a69@visible? n2a6a@source-file-name)))) (map n2966@find-library-by-spec/die n2a60@imp*) (map n2966@find-library-by-spec/die n2a61@vis*) (map n2966@find-library-by-spec/die n2a62@inv*)))) (set! n296e@imported-label->binding (lambda (n2a81@lab) (hashtable-ref n2968@label->binding-table n2a81@lab '#f))) (set! n2970@invoke-library (lambda (n2a83@lib) ((lambda (n2a85@invoke) (if (procedure? n2a85@invoke) (begin (n293c@set-library-invoke-state! n2a83@lib (lambda () (assertion-violation 'invoke '"circularity detected" n2a83@lib))) (for-each n2970@invoke-library (n2918@library-inv* n2a83@lib)) (n293c@set-library-invoke-state! n2a83@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" n2a83@lib))) (n2a85@invoke) (n293c@set-library-invoke-state! n2a83@lib '#t)) (void))) (n2920@library-invoke-state n2a83@lib)))) (set! n2972@visit-library (lambda (n2a87@lib) ((lambda (n2a89@visit) (if (procedure? n2a89@visit) (begin (n293a@set-library-visit-state! n2a87@lib (lambda () (assertion-violation 'visit '"circularity detected" n2a87@lib))) (for-each n2970@invoke-library (n2916@library-vis* n2a87@lib)) (n293a@set-library-visit-state! n2a87@lib (lambda () (assertion-violation 'invoke '"first visit did not return" n2a87@lib))) (n2a89@visit) (n293a@set-library-visit-state! n2a87@lib '#t)) (void))) (n291e@library-visit-state n2a87@lib)))) (set! n2974@invoke-library-by-spec (lambda (n2a8b@spec) (n2970@invoke-library (n2966@find-library-by-spec/die n2a8b@spec)))) (set! n2976@installed-libraries (lambda n2a93 ((lambda (n2a94) (if (= n2a94 '1) (apply (lambda (n2a8d@all?) ((letrec ((n2a8f@f (lambda (n2a91@ls) (if (null? n2a91@ls) '() (if (or n2a8d@all? (n2926@library-visible? (car n2a91@ls))) (cons (car n2a91@ls) (n2a8f@f (cdr n2a91@ls))) (n2a8f@f (cdr n2a91@ls))))))) n2a8f@f) ((n28fd@current-library-collection)))) n2a93) (if (= n2a94 '0) (apply (lambda () (n2976@installed-libraries '#f)) n2a93) (error 'apply '"invalid arg count")))) (length n2a93)))) (set! n2978@library-spec (lambda (n2a95@x) (begin (if (not (n290a@library? n2a95@x)) (assertion-violation 'library-spec '"not a library" n2a95@x) (void)) (list (n290e@library-id n2a95@x) (n2910@library-name n2a95@x) (n2912@library-version n2a95@x))))) (begin (set! n2ad3@n2978@library-spec n2978@library-spec) (set! n2ad2@n2976@installed-libraries n2976@installed-libraries) (set! n2ad1@n2974@invoke-library-by-spec n2974@invoke-library-by-spec) (set! n2ad0@n2972@visit-library n2972@visit-library) (set! n2acf@n2970@invoke-library n2970@invoke-library) (set! n2ace@n296e@imported-label->binding n296e@imported-label->binding) (set! n2acd@n296c@install-library n296c@install-library) (set! n2acc@n296a@install-library-record n296a@install-library-record) (set! n2acb@n2968@label->binding-table n2968@label->binding-table) (set! n2aca@n2966@find-library-by-spec/die n2966@find-library-by-spec/die) (set! n2ac9@n2964@library-exists? n2964@library-exists?) (set! n2ac8@n2962@find-library-by-name n2962@find-library-by-name) (set! n2ac7@n2960@find-external-library n2960@find-external-library) (set! n2ac6@n295e@external-pending-libraries n295e@external-pending-libraries) (set! n2ac5@n295c@current-library-expander n295c@current-library-expander) (set! n2ac4@n295a@library-loader n295a@library-loader) (set! n2ac3@n2958@try-load-from-file n2958@try-load-from-file) (set! n2ac2@n2956@current-precompiled-library-loader n2956@current-precompiled-library-loader) (set! n2ac1@n2954@serialize-all n2954@serialize-all) (set! n2ac0@n2952@file-locator n2952@file-locator) (set! n2abf@n2950@library-name->file-name n2950@library-name->file-name) (set! n2abe@n294e@library-extensions n294e@library-extensions) (set! n2abd@n294c@library-path n294c@library-path) (set! n2abc@n294a@find-library-by n294a@find-library-by) (set! n2abb@n2948@find-dependencies n2948@find-dependencies) (set! n2aba@n2946@rp n2946@rp) (set! n2ab9@n2944@set-library-source-file-name! n2944@set-library-source-file-name!) (set! n2ab8@n2942@set-library-visible?! n2942@set-library-visible?!) (set! n2ab7@n2940@set-library-invoke-code! n2940@set-library-invoke-code!) (set! n2ab6@n293e@set-library-visit-code! n293e@set-library-visit-code!) (set! n2ab5@n293c@set-library-invoke-state! n293c@set-library-invoke-state!) (set! n2ab4@n293a@set-library-visit-state! n293a@set-library-visit-state!) (set! n2ab3@n2938@set-library-env! n2938@set-library-env!) (set! n2ab2@n2936@set-library-subst! n2936@set-library-subst!) (set! n2ab1@n2934@set-library-inv*! n2934@set-library-inv*!) (set! n2ab0@n2932@set-library-vis*! n2932@set-library-vis*!) (set! n2aaf@n2930@set-library-imp*! n2930@set-library-imp*!) (set! n2aae@n292e@set-library-version! n292e@set-library-version!) (set! n2aad@n292c@set-library-name! n292c@set-library-name!) (set! n2aac@n292a@set-library-id! n292a@set-library-id!) (set! n2aab@n2928@library-source-file-name n2928@library-source-file-name) (set! n2aaa@n2926@library-visible? n2926@library-visible?) (set! n2aa9@n2924@library-invoke-code n2924@library-invoke-code) (set! n2aa8@n2922@library-visit-code n2922@library-visit-code) (set! n2aa7@n2920@library-invoke-state n2920@library-invoke-state) (set! n2aa6@n291e@library-visit-state n291e@library-visit-state) (set! n2aa5@n291c@library-env n291c@library-env) (set! n2aa4@n291a@library-subst n291a@library-subst) (set! n2aa3@n2918@library-inv* n2918@library-inv*) (set! n2aa2@n2916@library-vis* n2916@library-vis*) (set! n2aa1@n2914@library-imp* n2914@library-imp*) (set! n2aa0@n2912@library-version n2912@library-version) (set! n2a9f@n2910@library-name n2910@library-name) (set! n2a9e@n290e@library-id n290e@library-id) (set! n2a9d@n290c@make-library n290c@make-library) (set! n2a9c@n290a@library? n290a@library?) (set! n2a9b@n2907@n28ff n2907@n28ff) (set! n2a9a@n2905@n2900 n2905@n2900) (set! n2a99@n2903@n28fe n2903@n28fe) (set! n2a98@n28fd@current-library-collection n28fd@current-library-collection) (set! n2a97@n28fb@make-collection n28fb@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (n2ad6@build-global-define n2b47@build-lambda n2b49@build-case-lambda n2b4b@build-let n2b79@build-sequence n2b7b@build-void n2b7d@build-letrec n2b7f@build-letrec* n2b81@build-library-letrec* n2b83@build-receive) (begin (set! n2ad6@build-global-define (lambda (n2b84@x) (n2b7b@build-void))) (set! n2b47@build-lambda (lambda (n2b86@ae n2b87@vars n2b88@exp) (list 'lambda n2b87@vars n2b88@exp))) (set! n2b49@build-case-lambda (lambda (n2b8c@ae n2b8d@vars* n2b8e@exp*) ((lambda (n2b93@build-error n2b95@build-pred n2b97@build-apply n2b99@expand-case-lambda) (begin (set! n2b93@build-error (lambda (n2bca@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! n2b95@build-pred (lambda (n2bb2@ae n2bb3@n n2bb4@vars) (call-with-values (lambda () ((letrec ((n2bbc@f (lambda (n2bbe@vars n2bbf@count) (if (pair? n2bbe@vars) (n2bbc@f (cdr n2bbe@vars) (+ n2bbf@count '1)) (if (null? n2bbe@vars) (values n2bbf@count '=) (values n2bbf@count '>=)))))) n2bbc@f) n2bb4@vars '0)) (lambda (n2bc2@n2bb9 n2bc3@n2bbb) ((lambda (n2bc6@pred n2bc7@count) (list (list 'primitive n2bc6@pred) n2bb3@n (list 'quote n2bc7@count))) n2bc3@n2bbb n2bc2@n2bb9))))) (set! n2b97@build-apply (lambda (n2baa@ae n2bab@g n2bac@vars n2bad@exp) (list '(primitive apply) (n2b47@build-lambda n2baa@ae n2bac@vars n2bad@exp) n2bab@g))) (set! n2b99@expand-case-lambda (lambda (n2b9a@ae n2b9b@vars n2b9c@exp*) ((lambda (n2ba0@g n2ba1@n) (list 'lambda n2ba0@g (n2b4b@build-let n2b9a@ae (list n2ba1@n) (list (list '(primitive length) n2ba0@g)) ((letrec ((n2ba4@f (lambda (n2ba6@vars* n2ba7@exp*) (if (null? n2ba6@vars*) (n2b93@build-error n2b9a@ae) (list 'if (n2b95@build-pred n2b9a@ae n2ba1@n (car n2ba6@vars*)) (n2b97@build-apply n2b9a@ae n2ba0@g (car n2ba6@vars*) (car n2ba7@exp*)) (n2ba4@f (cdr n2ba6@vars*) (cdr n2ba7@exp*))))))) n2ba4@f) n2b8d@vars* n2b9c@exp*)))) (gensym) (gensym)))) (if (= (length n2b8e@exp*) '1) (n2b47@build-lambda n2b8c@ae (car n2b8d@vars*) (car n2b8e@exp*)) (n2b99@expand-case-lambda n2b8c@ae n2b8d@vars* n2b8e@exp*)))) '#f '#f '#f '#f))) (set! n2b4b@build-let (lambda (n2bcc@ae n2bcd@lhs* n2bce@rhs* n2bcf@body) (cons (n2b47@build-lambda n2bcc@ae n2bcd@lhs* n2bcf@body) n2bce@rhs*))) (set! n2b79@build-sequence (lambda (n2bd4@ae n2bd5@exps) ((letrec ((n2bd8@loop (lambda (n2bda@exps) (if (null? (cdr n2bda@exps)) (car n2bda@exps) (if (equal? (car n2bda@exps) (n2b7b@build-void)) (n2bd8@loop (cdr n2bda@exps)) (cons 'begin n2bda@exps)))))) n2bd8@loop) n2bd5@exps))) (set! n2b7b@build-void (lambda () '((primitive void)))) (set! n2b7d@build-letrec (lambda (n2bdc@ae n2bdd@vars n2bde@val-exps n2bdf@body-exp) (if (null? n2bdd@vars) n2bdf@body-exp (list 'letrec (map list n2bdd@vars n2bde@val-exps) n2bdf@body-exp)))) (set! n2b7f@build-letrec* (lambda (n2be4@ae n2be5@vars n2be6@val-exps n2be7@body-exp) (if (null? n2be5@vars) n2be7@body-exp (n2b4b@build-let n2be4@ae n2be5@vars (map (lambda (n2bec@x) (list 'quote '#f)) n2be5@vars) (n2b79@build-sequence n2be4@ae (append (map (lambda (n2bee@lhs n2bef@rhs) (list 'set! n2bee@lhs n2bef@rhs)) n2be5@vars n2be6@val-exps) (list n2be7@body-exp))))))) (set! n2b81@build-library-letrec* (lambda (n2bf2@ae n2bf3@name n2bf4@vars n2bf5@locs n2bf6@val-exps n2bf7@body-exp) (list 'library-letrec* n2bf3@name (map list n2bf4@vars n2bf5@locs n2bf6@val-exps) n2bf7@body-exp))) (set! n2b83@build-receive (lambda (n2bfe@ae n2bff@vars n2c00@producer n2c01@body*) (begin (display '"************** in ") (cons 'receive (cons n2bff@vars (cons n2c00@producer n2c01@body*)))))) (begin (set! n2c0f@n2b83@build-receive n2b83@build-receive) (set! n2c0e@n2b81@build-library-letrec* n2b81@build-library-letrec*) (set! n2c0d@n2b7f@build-letrec* n2b7f@build-letrec*) (set! n2c0c@n2b7d@build-letrec n2b7d@build-letrec) (set! n2c0b@n2b7b@build-void n2b7b@build-void) (set! n2c0a@n2b79@build-sequence n2b79@build-sequence) (set! n2c09@n2b4b@build-let n2b4b@build-let) (set! n2c08@n2b49@build-case-lambda n2b49@build-case-lambda) (set! n2c07@n2b47@build-lambda n2b47@build-lambda) (set! n2c06@n2ad6@build-global-define n2ad6@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (n2c1e@file-options-macro n2c20@set-cons n2c22@set-union n2c27@top-mark* n2c29@top-marked? n2c2b@gen-lexical n2c2d@gen-global n2c2f@gen-label n2c31@gen-top-level-label n2c33@gen-define-label+loc n2c35@gen-define-label n2c3b@n2c36 n2c3d@n2c38 n2c3f@n2c37 n2c42@rib? n2c44@make-rib n2c46@rib-sym* n2c48@rib-mark** n2c4a@rib-label* n2c4c@rib-sealed/freq n2c4e@rib-cache n2c50@set-rib-sym*! n2c52@set-rib-mark**! n2c54@set-rib-label*! n2c56@set-rib-sealed/freq! n2c58@set-rib-cache! n2c5a@make-empty-rib n2c5c@extend-rib! n2c5e@extend-rib/nc! n2c60@make-rib-map n2c62@seal-rib! n2c64@unseal-rib! n2c66@make-full-rib n2c6c@n2c67 n2c6e@n2c69 n2c70@n2c68 n2c73@stx? n2c75@make-stx n2c77@stx-expr n2c79@stx-mark* n2c7b@stx-subst* n2c7d@stx-ae* n2c7f@set-stx-expr! n2c81@set-stx-mark*! n2c83@set-stx-subst*! n2c85@set-stx-ae*! n2c87@rp n2c89@datum->stx n2c8b@gen-mark n2c8d@anti-mark n2c8f@anti-mark? n2c91@join-wraps n2c93@mkstx n2c95@add-mark n2c97@add-subst n2c99@syntax-kind? n2c9b@syntax-vector->list n2c9d@syntax-pair? n2c9f@syntax-vector? n2ca1@syntax-null? n2ca3@syntax-list? n2ca5@syntax-car n2ca7@syntax-cdr n2ca9@syntax->list n2cab@id? n2cad@id->sym n2caf@same-marks? n2cb1@bound-id=? n2cb3@free-id=? n2cb5@valid-bound-ids? n2cb7@distinct-bound-ids? n2cb9@bound-id-member? n2cbb@self-evaluating? n2cbd@strip-annotations n2cbf@strip n2cc1@stx->datum n2cc3@same-marks*? n2cc5@id->label n2cc7@id->real-label n2cc9@label->binding n2ccb@make-binding n2ccd@binding-type n2ccf@binding-value n2cd1@raise-unbound-error n2cd3@syntax-type n2ce1@sanitize-binding n2ce3@make-variable-transformer n2ce5@variable-transformer? n2ce7@variable-transformer-procedure n2ce9@make-eval-transformer n2e3a@parse-define n2e3c@parse-define-syntax n2e3e@scheme-stx-hashtable n2e40@scheme-stx n2e42@lexical-var n2e44@lexical-mutable? n2e46@set-lexical-mutable! n2e48@add-lexical n2e4a@add-lexicals n2e4c@letrec-helper n2e4e@letrec-transformer n2e50@letrec*-transformer n2e52@fluid-let-syntax-transformer n2e54@type-descriptor-transformer n2e56@record-type-descriptor-transformer n2e58@record-constructor-descriptor-transformer n2e5a@when-macro n2e5c@unless-macro n2e5e@if-transformer n2e60@and-transformer n2e62@or-transformer n2e64@case-macro n2e66@quote-transformer n2e68@case-lambda-transformer n2e6a@lambda-transformer n2e6c@bless n2e6e@with-syntax-macro n2e70@invalid-fmls-error n2e72@let-macro n2e74@let-values-macro n2e76@let*-values-macro n2e78@trace-lambda-macro n2e7a@trace-define-macro n2e7c@trace-define-syntax-macro n2e7e@trace-let/rec-syntax n2e80@trace-let-syntax-macro n2e82@trace-letrec-syntax-macro n2e84@guard-macro n2e86@define-enumeration-macro n2e88@time-macro n2e8a@delay-macro n2e8c@assert-macro n2e8e@endianness-macro n2e90@identifier-syntax-macro n2e92@do-macro n2e94@let*-macro n2e96@or-macro n2e98@and-macro n2e9a@cond-macro n2e9c@do-include n2e9e@include-macro n2ea0@include-into-macro n2ea2@syntax-rules-macro n2ea4@quasiquote-macro n2ea6@quasisyntax-macro n2ea8@define-struct-macro n2eaa@define-record-type-macro n2eac@define-condition-type-macro n2eae@incorrect-usage-macro n2eb0@parameterize-macro n2eb2@foreign-call-transformer n2eb4@convert-pattern n2eb6@syntax-dispatch n2eb8@ellipsis? n2eba@underscore? n2ebc@verify-literals n2ebe@syntax-case-transformer n2ec0@ellipsis-map n2ec2@syntax-transformer n2ec4@core-macro-transformer n2ec6@symbol-macro n2ec8@macro-transformer n2eca@local-macro-transformer n2ecc@do-macro-call n2ece@chi-macro n2ed0@chi-local-macro n2ed2@chi-global-macro n2ed4@chi-expr* n2ed6@chi-application n2ed8@chi-expr n2eda@chi-set! n2edc@verify-formals n2ede@chi-lambda-clause n2ee0@chi-lambda-clause* n2ee2@chi-defun n2ee4@chi-rhs n2ee6@expand-interaction-rhs*/init* n2ee8@chi-rhs* n2eea@find-bound=? n2eec@find-dups n2eee@chi-internal n2ef0@parse-module n2ef6@n2ef1 n2ef8@n2ef3 n2efa@n2ef2 n2efd@module-interface? n2eff@make-module-interface n2f01@module-interface-first-mark n2f03@module-interface-exp-id-vec n2f05@module-interface-exp-lab-vec n2f07@set-module-interface-first-mark! n2f09@set-module-interface-exp-id-vec! n2f0b@set-module-interface-exp-lab-vec! n2f0d@module-interface-exp-id* n2f0f@chi-internal-module n2f11@chi-body* n2f13@expand-transformer n2f15@parse-exports n2f17@parse-library-name n2f19@parse-library n2f1b@parse-import-spec* n2f1d@make-top-rib n2f1f@make-collector n2f21@inv-collector n2f23@vis-collector n2f25@imp-collector n2f27@chi-library-internal n2f29@chi-interaction-expr n2f2b@library-body-expander n2f2d@core-library-expander n2f2f@parse-top-level-program n2f31@top-level-expander n2f37@n2f32 n2f39@n2f34 n2f3b@n2f33 n2f3e@env? n2f40@make-env n2f42@env-names n2f44@env-labels n2f46@env-itc n2f48@set-env-names! n2f4a@set-env-labels! n2f4c@set-env-itc! n2f4e@rp n2f54@n2f4f n2f56@n2f51 n2f58@n2f50 n2f5b@interaction-env? n2f5d@make-interaction-env n2f5f@interaction-env-rib n2f61@interaction-env-r n2f63@interaction-env-locs n2f65@set-interaction-env-rib! n2f67@set-interaction-env-r! n2f69@set-interaction-env-locs! n2f6b@rp n2f6d@interaction-environment-symbols n2f6f@environment-bindings n2f71@parse-binding n2f73@environment? n2f75@environment-symbols n2f77@environment n2f79@null-environment n2f7b@scheme-report-environment n2f7d@expand n2f7f@eval n2f81@library-expander n2f83@boot-library-expand n2f85@rev-map-append n2f87@build-exports n2f89@make-export-subst n2f8b@make-export-env/macros n2f8d@generate-temporaries n2f8f@free-identifier=? n2f91@bound-identifier=? n2f93@make-source-condition n2f95@extract-position-condition n2f97@expression-position n2f99@assertion-error n2f9b@syntax-error n2f9d@syntax-violation* n2f9f@syntax-violation n2fa1@identifier? n2fa3@datum->syntax n2fa5@syntax->datum n2fa7@compile-r6rs-top-level n2fa9@pre-compile-r6rs-top-level n2fab@interaction-environment n2fad@top-level-context) (begin (set! n2c1e@file-options-macro (lambda (n2fae@x) ((lambda (n2fb1@valid-option?) (begin (set! n2fb1@valid-option? (lambda (n2fba@x) (and (n2cab@id? n2fba@x) (memq (n2cad@id->sym n2fba@x) '(no-fail no-create no-truncate))))) ((lambda (n2fb2@t) ((lambda (n2fb4@ls/false) (if (and n2fb4@ls/false (apply (lambda (n2fb6@opt*) (for-all n2fb1@valid-option? n2fb6@opt*)) n2fb4@ls/false)) (apply (lambda (n2fb8@opt*) (n2e6c@bless (list 'make-file-options (list 'quote n2fb8@opt*)))) n2fb4@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n2fb2@t))) (n2eb6@syntax-dispatch n2fb2@t '(_ . each-any)))) n2fae@x))) '#f))) (set! n2c20@set-cons (lambda (n2fbc@x n2fbd@ls) (if (memq n2fbc@x n2fbd@ls) n2fbd@ls (cons n2fbc@x n2fbd@ls)))) (set! n2c22@set-union (lambda (n2fc0@ls1 n2fc1@ls2) (if (null? n2fc0@ls1) n2fc1@ls2 (if (memq (car n2fc0@ls1) n2fc1@ls2) (n2c22@set-union (cdr n2fc0@ls1) n2fc1@ls2) (cons (car n2fc0@ls1) (n2c22@set-union (cdr n2fc0@ls1) n2fc1@ls2)))))) (set! n2c27@top-mark* '(top)) (set! n2c29@top-marked? (lambda (n2fc4@m*) (memq 'top n2fc4@m*))) (set! n2c2b@gen-lexical (lambda (n2fc6@sym) (if (symbol? n2fc6@sym) (gensym n2fc6@sym) (if (n2c73@stx? n2fc6@sym) (n2c2b@gen-lexical (n2cad@id->sym n2fc6@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" n2fc6@sym))))) (set! n2c2d@gen-global (lambda (n2fc8@x) (n2c2b@gen-lexical n2fc8@x))) (set! n2c2f@gen-label (lambda (n2fca@_) (gensym))) (set! n2c31@gen-top-level-label (lambda (n2fcc@id n2fcd@rib) ((lambda (n2fd1@find) (begin (set! n2fd1@find (lambda (n2fdc@sym n2fdd@mark* n2fde@sym* n2fdf@mark** n2fe0@label*) (and (pair? n2fde@sym*) (if (and (eq? n2fdc@sym (car n2fde@sym*)) (n2caf@same-marks? n2fdd@mark* (car n2fdf@mark**))) (car n2fe0@label*) (n2fd1@find n2fdc@sym n2fdd@mark* (cdr n2fde@sym*) (cdr n2fdf@mark**) (cdr n2fe0@label*)))))) ((lambda (n2fd2@sym n2fd3@mark*) ((lambda (n2fd6@sym*) ((lambda (n2fd8@t) (if n2fd8@t ((lambda (n2fda@label) (if (n2ace@n296e@imported-label->binding n2fda@label) (gensym) n2fda@label)) n2fd8@t) (gensym))) (and (memq n2fd2@sym (n2c46@rib-sym* n2fcd@rib)) (n2fd1@find n2fd2@sym n2fd3@mark* n2fd6@sym* (n2c48@rib-mark** n2fcd@rib) (n2c4a@rib-label* n2fcd@rib))))) (n2c46@rib-sym* n2fcd@rib))) (n2cad@id->sym n2fcc@id) (n2c79@stx-mark* n2fcc@id)))) '#f))) (set! n2c33@gen-define-label+loc (lambda (n2fe6@id n2fe7@rib) ((lambda (n2fea@t) (if n2fea@t ((lambda (n2fec@env) ((lambda (n2fee@label n2fef@locs) (values n2fee@label ((lambda (n2ff2@t) (if n2ff2@t (cdr n2ff2@t) ((lambda (n2ff4@loc) (begin (n2f69@set-interaction-env-locs! n2fec@env (cons (cons n2fee@label n2ff4@loc) n2fef@locs)) n2ff4@loc)) (n2c2b@gen-lexical n2fe6@id)))) (assq n2fee@label n2fef@locs)))) (n2c31@gen-top-level-label n2fe6@id n2fe7@rib) (n2f63@interaction-env-locs n2fec@env))) n2fea@t) (values (gensym) (n2c2b@gen-lexical n2fe6@id)))) (n2fad@top-level-context)))) (set! n2c35@gen-define-label (lambda (n2ff6@id n2ff7@rib) (if (n2fad@top-level-context) (n2c31@gen-top-level-label n2ff6@id n2ff7@rib) (gensym)))) (set! n2c3b@n2c36 (make-record-type-descriptor 'rib '#f 'n2c39 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! n2c3d@n2c38 '#f) (set! n2c3f@n2c37 (make-record-constructor-descriptor n2c3b@n2c36 '#f n2c3d@n2c38)) (set! n2c42@rib? (record-predicate n2c3b@n2c36)) (set! n2c44@make-rib (record-constructor n2c3f@n2c37)) (set! n2c46@rib-sym* (record-accessor n2c3b@n2c36 '0)) (set! n2c48@rib-mark** (record-accessor n2c3b@n2c36 '1)) (set! n2c4a@rib-label* (record-accessor n2c3b@n2c36 '2)) (set! n2c4c@rib-sealed/freq (record-accessor n2c3b@n2c36 '3)) (set! n2c4e@rib-cache (record-accessor n2c3b@n2c36 '4)) (set! n2c50@set-rib-sym*! (record-mutator n2c3b@n2c36 '0)) (set! n2c52@set-rib-mark**! (record-mutator n2c3b@n2c36 '1)) (set! n2c54@set-rib-label*! (record-mutator n2c3b@n2c36 '2)) (set! n2c56@set-rib-sealed/freq! (record-mutator n2c3b@n2c36 '3)) (set! n2c58@set-rib-cache! (record-mutator n2c3b@n2c36 '4)) (set! n2c5a@make-empty-rib (lambda () (n2c44@make-rib '() '() '() '#f '#f))) (set! n2c5c@extend-rib! (lambda (n2ffa@rib n2ffb@id n2ffc@label) ((lambda (n3001@find) (begin (set! n3001@find (lambda (n300e@sym n300f@mark* n3010@sym* n3011@mark** n3012@label*) (and (pair? n3010@sym*) (if (and (eq? n300e@sym (car n3010@sym*)) (n2caf@same-marks? n300f@mark* (car n3011@mark**))) n3012@label* (n3001@find n300e@sym n300f@mark* (cdr n3010@sym*) (cdr n3011@mark**) (cdr n3012@label*)))))) (begin (if (n2c4c@rib-sealed/freq n2ffa@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" n2ffa@rib) (void)) ((lambda (n3002@sym n3003@mark*) ((lambda (n3006@sym*) ((lambda (n3008@t) (if n3008@t ((lambda (n300a@p) (if (not (eq? n2ffc@label (car n300a@p))) (if (n2fad@top-level-context) (set-car! n300a@p n2ffc@label) (n2f9f@syntax-violation '#f '"multiple definitions of identifier" n2ffb@id)) (void))) n3008@t) (begin (if (n2c4e@rib-cache n2ffa@rib) (hashtable-update! (n2c4e@rib-cache n2ffa@rib) n3002@sym (lambda (n300c@e) (cons (cons n3003@mark* n2ffc@label) n300c@e)) '()) (void)) (n2c50@set-rib-sym*! n2ffa@rib (cons n3002@sym n3006@sym*)) (n2c52@set-rib-mark**! n2ffa@rib (cons n3003@mark* (n2c48@rib-mark** n2ffa@rib))) (n2c54@set-rib-label*! n2ffa@rib (cons n2ffc@label (n2c4a@rib-label* n2ffa@rib)))))) (and (memq n3002@sym (n2c46@rib-sym* n2ffa@rib)) (n3001@find n3002@sym n3003@mark* n3006@sym* (n2c48@rib-mark** n2ffa@rib) (n2c4a@rib-label* n2ffa@rib))))) (n2c46@rib-sym* n2ffa@rib))) (n2cad@id->sym n2ffb@id) (n2c79@stx-mark* n2ffb@id))))) '#f))) (set! n2c5e@extend-rib/nc! (lambda (n3018@rib n3019@id n301a@label) ((lambda (n301e@sym n301f@mark*) ((lambda (n3022@sym*) (begin (if (n2c4e@rib-cache n3018@rib) (hashtable-update! (n2c4e@rib-cache n3018@rib) n301e@sym (lambda (n3024@e) (cons (cons n301f@mark* n301a@label) n3024@e)) '()) (void)) (n2c50@set-rib-sym*! n3018@rib (cons n301e@sym n3022@sym*)) (n2c52@set-rib-mark**! n3018@rib (cons n301f@mark* (n2c48@rib-mark** n3018@rib))) (n2c54@set-rib-label*! n3018@rib (cons n301a@label (n2c4a@rib-label* n3018@rib))))) (n2c46@rib-sym* n3018@rib))) (n2cad@id->sym n3019@id) (n2c79@stx-mark* n3019@id)))) (set! n2c60@make-rib-map (lambda (n3026@sym*) ((lambda (n3028@ht) ((letrec ((n302a@f (lambda (n302c@i n302d@sym*) (if (null? n302d@sym*) n3028@ht (begin (hashtable-update! n3028@ht (car n302d@sym*) (lambda (n3030@x) (cons n302c@i n3030@x)) '()) (n302a@f (+ n302c@i '1) (cdr n302d@sym*))))))) n302a@f) '0 n3026@sym*)) (make-eq-hashtable)))) (set! n2c62@seal-rib! (lambda (n3032@rib) ((lambda (n3034@sym*) (if (not (null? n3034@sym*)) (begin (n2c50@set-rib-sym*! n3032@rib (list->vector n3034@sym*)) (n2c52@set-rib-mark**! n3032@rib (list->vector (n2c48@rib-mark** n3032@rib))) (n2c54@set-rib-label*! n3032@rib (list->vector (n2c4a@rib-label* n3032@rib))) (n2c56@set-rib-sealed/freq! n3032@rib (n2c60@make-rib-map n3034@sym*))) (void))) (n2c46@rib-sym* n3032@rib)))) (set! n2c64@unseal-rib! (lambda (n3036@rib) (if (n2c4c@rib-sealed/freq n3036@rib) (begin (n2c56@set-rib-sealed/freq! n3036@rib '#f) (n2c50@set-rib-sym*! n3036@rib (vector->list (n2c46@rib-sym* n3036@rib))) (n2c52@set-rib-mark**! n3036@rib (vector->list (n2c48@rib-mark** n3036@rib))) (n2c54@set-rib-label*! n3036@rib (vector->list (n2c4a@rib-label* n3036@rib)))) (void)))) (set! n2c66@make-full-rib (lambda (n3038@id* n3039@label*) ((lambda (n303c@r) (begin (n2c62@seal-rib! n303c@r) n303c@r)) (n2c44@make-rib (map n2cad@id->sym n3038@id*) (map n2c79@stx-mark* n3038@id*) n3039@label* '#f '#f)))) (set! n2c6c@n2c67 (make-record-type-descriptor 'stx '#f 'n2c6a '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! n2c6e@n2c69 '#f) (set! n2c70@n2c68 (make-record-constructor-descriptor n2c6c@n2c67 '#f n2c6e@n2c69)) (set! n2c73@stx? (record-predicate n2c6c@n2c67)) (set! n2c75@make-stx (record-constructor n2c70@n2c68)) (set! n2c77@stx-expr (record-accessor n2c6c@n2c67 '0)) (set! n2c79@stx-mark* (record-accessor n2c6c@n2c67 '1)) (set! n2c7b@stx-subst* (record-accessor n2c6c@n2c67 '2)) (set! n2c7d@stx-ae* (record-accessor n2c6c@n2c67 '3)) (set! n2c7f@set-stx-expr! (record-mutator n2c6c@n2c67 '0)) (set! n2c81@set-stx-mark*! (record-mutator n2c6c@n2c67 '1)) (set! n2c83@set-stx-subst*! (record-mutator n2c6c@n2c67 '2)) (set! n2c85@set-stx-ae*! (record-mutator n2c6c@n2c67 '3)) (set! n2c87@rp (n2852@n2779@make-record-printer 'stx (lambda (n303e@x n303f@p n3040@wr) (begin (display '"#<syntax " n303f@p) (write (n2cc1@stx->datum n303e@x) n303f@p) ((lambda (n3044@expr) (if (n284a@n2769@annotation? n3044@expr) ((lambda (n3046@src) (if (pair? n3046@src) (begin (display '" [" n303f@p) (display (cdr n3046@src) n303f@p) (display '" of " n303f@p) (display (car n3046@src) n303f@p) (display '"]" n303f@p)) (void))) (n284b@n276b@annotation-source n3044@expr)) (void))) (n2c77@stx-expr n303e@x)) (display '">" n303f@p))))) (set! n2c89@datum->stx (lambda (n3048@id n3049@datum) (n2c75@make-stx n3049@datum (n2c79@stx-mark* n3048@id) (n2c7b@stx-subst* n3048@id) (n2c7d@stx-ae* n3048@id)))) (set! n2c8b@gen-mark (lambda () (string '#\m))) (set! n2c8d@anti-mark '#f) (set! n2c8f@anti-mark? not) (set! n2c91@join-wraps (lambda (n304c@m1* n304d@s1* n304e@ae1* n304f@e) ((lambda (n3055@cancel) (begin (set! n3055@cancel (lambda (n305c@ls1 n305d@ls2) ((letrec ((n3060@f (lambda (n3062@x n3063@ls1) (if (null? n3063@ls1) (cdr n305d@ls2) (cons n3062@x (n3060@f (car n3063@ls1) (cdr n3063@ls1))))))) n3060@f) (car n305c@ls1) (cdr n305c@ls1)))) ((lambda (n3056@m2* n3057@s2* n3058@ae2*) (if (and (not (null? n304c@m1*)) (not (null? n3056@m2*)) (n2c8f@anti-mark? (car n3056@m2*))) (values (n3055@cancel n304c@m1* n3056@m2*) (n3055@cancel n304d@s1* n3057@s2*) (n3055@cancel n304e@ae1* n3058@ae2*)) (values (append n304c@m1* n3056@m2*) (append n304d@s1* n3057@s2*) (append n304e@ae1* n3058@ae2*)))) (n2c79@stx-mark* n304f@e) (n2c7b@stx-subst* n304f@e) (n2c7d@stx-ae* n304f@e)))) '#f))) (set! n2c93@mkstx (lambda (n3066@e n3067@m* n3068@s* n3069@ae*) (if (and (n2c73@stx? n3066@e) (not (n2c29@top-marked? n3067@m*))) (call-with-values (lambda () (n2c91@join-wraps n3067@m* n3068@s* n3069@ae* n3066@e)) (lambda (n3074@n306f n3075@n3071 n3076@n3073) ((lambda (n307a@ae* n307b@s* n307c@m*) (n2c75@make-stx (n2c77@stx-expr n3066@e) n307c@m* n307b@s* n307a@ae*)) n3076@n3073 n3075@n3071 n3074@n306f))) (n2c75@make-stx n3066@e n3067@m* n3068@s* n3069@ae*)))) (set! n2c95@add-mark (lambda (n3080@m n3081@e n3082@ae) (n2c93@mkstx n3081@e (list n3080@m) '(shift) (list n3082@ae)))) (set! n2c97@add-subst (lambda (n3086@subst n3087@e) (n2c93@mkstx n3087@e '() (list n3086@subst) '()))) (set! n2c99@syntax-kind? (lambda (n308a@x n308b@p?) (if (n2c73@stx? n308a@x) (n2c99@syntax-kind? (n2c77@stx-expr n308a@x) n308b@p?) (if (n284a@n2769@annotation? n308a@x) (n2c99@syntax-kind? (n284c@n276d@annotation-expression n308a@x) n308b@p?) (n308b@p? n308a@x))))) (set! n2c9b@syntax-vector->list (lambda (n308e@x) (if (n2c73@stx? n308e@x) ((lambda (n3090@ls n3091@m* n3092@s* n3093@ae*) (map (lambda (n3098@x) (n2c93@mkstx n3098@x n3091@m* n3092@s* n3093@ae*)) n3090@ls)) (n2c9b@syntax-vector->list (n2c77@stx-expr n308e@x)) (n2c79@stx-mark* n308e@x) (n2c7b@stx-subst* n308e@x) (n2c7d@stx-ae* n308e@x)) (if (n284a@n2769@annotation? n308e@x) (n2c9b@syntax-vector->list (n284c@n276d@annotation-expression n308e@x)) (if (vector? n308e@x) (vector->list n308e@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" n308e@x)))))) (set! n2c9d@syntax-pair? (lambda (n309a@x) (n2c99@syntax-kind? n309a@x pair?))) (set! n2c9f@syntax-vector? (lambda (n309c@x) (n2c99@syntax-kind? n309c@x vector?))) (set! n2ca1@syntax-null? (lambda (n309e@x) (n2c99@syntax-kind? n309e@x null?))) (set! n2ca3@syntax-list? (lambda (n30a0@x) (or (n2ca1@syntax-null? n30a0@x) (and (n2c9d@syntax-pair? n30a0@x) (n2ca3@syntax-list? (n2ca7@syntax-cdr n30a0@x)))))) (set! n2ca5@syntax-car (lambda (n30a2@x) (if (n2c73@stx? n30a2@x) (n2c93@mkstx (n2ca5@syntax-car (n2c77@stx-expr n30a2@x)) (n2c79@stx-mark* n30a2@x) (n2c7b@stx-subst* n30a2@x) (n2c7d@stx-ae* n30a2@x)) (if (n284a@n2769@annotation? n30a2@x) (n2ca5@syntax-car (n284c@n276d@annotation-expression n30a2@x)) (if (pair? n30a2@x) (car n30a2@x) (assertion-violation 'syntax-car '"BUG: not a pair" n30a2@x)))))) (set! n2ca7@syntax-cdr (lambda (n30a4@x) (if (n2c73@stx? n30a4@x) (n2c93@mkstx (n2ca7@syntax-cdr (n2c77@stx-expr n30a4@x)) (n2c79@stx-mark* n30a4@x) (n2c7b@stx-subst* n30a4@x) (n2c7d@stx-ae* n30a4@x)) (if (n284a@n2769@annotation? n30a4@x) (n2ca7@syntax-cdr (n284c@n276d@annotation-expression n30a4@x)) (if (pair? n30a4@x) (cdr n30a4@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" n30a4@x)))))) (set! n2ca9@syntax->list (lambda (n30a6@x) (if (n2c9d@syntax-pair? n30a6@x) (cons (n2ca5@syntax-car n30a6@x) (n2ca9@syntax->list (n2ca7@syntax-cdr n30a6@x))) (if (n2ca1@syntax-null? n30a6@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" n30a6@x))))) (set! n2cab@id? (lambda (n30a8@x) (and (n2c73@stx? n30a8@x) ((lambda (n30aa@expr) (symbol? (if (n284a@n2769@annotation? n30aa@expr) (n2849@n2767@annotation-stripped n30aa@expr) n30aa@expr))) (n2c77@stx-expr n30a8@x))))) (set! n2cad@id->sym (lambda (n30ac@x) (begin (if (not (n2c73@stx? n30ac@x)) (error 'id->sym '"BUG in ikarus: not an id" n30ac@x) (void)) ((lambda (n30ae@expr) ((lambda (n30b0@sym) (if (symbol? n30b0@sym) n30b0@sym (error 'id->sym '"BUG in ikarus: not an id" n30ac@x))) (if (n284a@n2769@annotation? n30ae@expr) (n2849@n2767@annotation-stripped n30ae@expr) n30ae@expr))) (n2c77@stx-expr n30ac@x))))) (set! n2caf@same-marks? (lambda (n30b2@x n30b3@y) (or (and (null? n30b2@x) (null? n30b3@y)) (and (pair? n30b2@x) (pair? n30b3@y) (eq? (car n30b2@x) (car n30b3@y)) (n2caf@same-marks? (cdr n30b2@x) (cdr n30b3@y)))))) (set! n2cb1@bound-id=? (lambda (n30b6@x n30b7@y) (and (eq? (n2cad@id->sym n30b6@x) (n2cad@id->sym n30b7@y)) (n2caf@same-marks? (n2c79@stx-mark* n30b6@x) (n2c79@stx-mark* n30b7@y))))) (set! n2cb3@free-id=? (lambda (n30ba@i n30bb@j) ((lambda (n30be@t0 n30bf@t1) (if (or n30be@t0 n30bf@t1) (eq? n30be@t0 n30bf@t1) (eq? (n2cad@id->sym n30ba@i) (n2cad@id->sym n30bb@j)))) (n2cc7@id->real-label n30ba@i) (n2cc7@id->real-label n30bb@j)))) (set! n2cb5@valid-bound-ids? (lambda (n30c2@id*) (and (for-all n2cab@id? n30c2@id*) (n2cb7@distinct-bound-ids? n30c2@id*)))) (set! n2cb7@distinct-bound-ids? (lambda (n30c4@id*) (or (null? n30c4@id*) (and (not (n2cb9@bound-id-member? (car n30c4@id*) (cdr n30c4@id*))) (n2cb7@distinct-bound-ids? (cdr n30c4@id*)))))) (set! n2cb9@bound-id-member? (lambda (n30c6@id n30c7@id*) (and (pair? n30c7@id*) (or (n2cb1@bound-id=? n30c6@id (car n30c7@id*)) (n2cb9@bound-id-member? n30c6@id (cdr n30c7@id*)))))) (set! n2cbb@self-evaluating? (lambda (n30ca@x) (or (number? n30ca@x) (string? n30ca@x) (char? n30ca@x) (boolean? n30ca@x) (regexp? n30ca@x) (bytevector? n30ca@x)))) (set! n2cbd@strip-annotations (lambda (n30cc@x) (if (pair? n30cc@x) (cons (n2cbd@strip-annotations (car n30cc@x)) (n2cbd@strip-annotations (cdr n30cc@x))) (if (vector? n30cc@x) (vector-map n2cbd@strip-annotations n30cc@x) (if (n284a@n2769@annotation? n30cc@x) (n2849@n2767@annotation-stripped n30cc@x) n30cc@x))))) (set! n2cbf@strip (lambda (n30ce@x n30cf@m*) (if (n2c29@top-marked? n30cf@m*) (if (or (n284a@n2769@annotation? n30ce@x) (and (pair? n30ce@x) (n284a@n2769@annotation? (car n30ce@x))) (and (vector? n30ce@x) (> (vector-length n30ce@x) '0) (n284a@n2769@annotation? (vector-ref n30ce@x '0)))) (n2cbd@strip-annotations n30ce@x) n30ce@x) ((letrec ((n30d2@f (lambda (n30d4@x) (if (n2c73@stx? n30d4@x) (n2cbf@strip (n2c77@stx-expr n30d4@x) (n2c79@stx-mark* n30d4@x)) (if (n284a@n2769@annotation? n30d4@x) (n2849@n2767@annotation-stripped n30d4@x) (if (pair? n30d4@x) ((lambda (n30d6@a n30d7@d) (if (and (eq? n30d6@a (car n30d4@x)) (eq? n30d7@d (cdr n30d4@x))) n30d4@x (cons n30d6@a n30d7@d))) (n30d2@f (car n30d4@x)) (n30d2@f (cdr n30d4@x))) (if (vector? n30d4@x) ((lambda (n30da@old) ((lambda (n30dc@new) (if (for-all eq? n30da@old n30dc@new) n30d4@x (list->vector n30dc@new))) (map n30d2@f n30da@old))) (vector->list n30d4@x)) n30d4@x))))))) n30d2@f) n30ce@x)))) (set! n2cc1@stx->datum (lambda (n30de@x) (n2cbf@strip n30de@x '()))) (set! n2cc3@same-marks*? (lambda (n30e0@mark* n30e1@mark** n30e2@si) (if (null? n30e2@si) '#f (if (n2caf@same-marks? n30e0@mark* (vector-ref n30e1@mark** (car n30e2@si))) (car n30e2@si) (n2cc3@same-marks*? n30e0@mark* n30e1@mark** (cdr n30e2@si)))))) (set! n2cc5@id->label (lambda (n30e6@id) (or (n2cc7@id->real-label n30e6@id) ((lambda (n30e8@t) (if n30e8@t ((lambda (n30ea@env) ((lambda (n30ec@rib) (call-with-values (lambda () (n2c33@gen-define-label+loc n30e6@id n30ec@rib)) (lambda (n30f2@n30ef n30f3@n30f1) ((lambda (n30f6@loc_ n30f7@lab) (begin (n2c5c@extend-rib! n30ec@rib n30e6@id n30f7@lab) n30f7@lab)) n30f3@n30f1 n30f2@n30ef)))) (n2f5f@interaction-env-rib n30ea@env))) n30e8@t) '#f)) (n2fad@top-level-context))))) (set! n2cc7@id->real-label (lambda (n30fa@id) ((lambda (n30fc@sym) ((letrec ((n30fe@search (lambda (n3100@subst* n3101@mark*) (if (null? n3100@subst*) '#f (if (eq? (car n3100@subst*) 'shift) (n30fe@search (cdr n3100@subst*) (cdr n3101@mark*)) ((lambda (n3104@rib) ((lambda (n3106@t) (if n3106@t ((lambda (n3108@ht) ((lambda (n310a@si) ((lambda (n310c@i) (if n310c@i (vector-ref (n2c4a@rib-label* n3104@rib) n310c@i) (n30fe@search (cdr n3100@subst*) n3101@mark*))) (and n310a@si (n2cc3@same-marks*? n3101@mark* (n2c48@rib-mark** n3104@rib) (reverse n310a@si))))) (hashtable-ref n3108@ht n30fc@sym '#f))) n3106@t) ((letrec ((n310e@f (lambda (n3110@sym* n3111@mark** n3112@label*) (if (null? n3110@sym*) (n30fe@search (cdr n3100@subst*) n3101@mark*) (if (and (eq? (car n3110@sym*) n30fc@sym) (n2caf@same-marks? (car n3111@mark**) n3101@mark*)) (car n3112@label*) (n310e@f (cdr n3110@sym*) (cdr n3111@mark**) (cdr n3112@label*))))))) n310e@f) (n2c46@rib-sym* n3104@rib) (n2c48@rib-mark** n3104@rib) (n2c4a@rib-label* n3104@rib)))) (n2c4c@rib-sealed/freq n3104@rib))) (car n3100@subst*))))))) n30fe@search) (n2c7b@stx-subst* n30fa@id) (n2c79@stx-mark* n30fa@id))) (n2cad@id->sym n30fa@id)))) (set! n2cc9@label->binding (lambda (n3116@x n3117@r) ((lambda (n311a@t) (if n311a@t ((lambda (n311c@b) (if (and (pair? n311c@b) (eq? (car n311c@b) '$core-rtd)) (cons '$rtd (map n2e6c@bless (cdr n311c@b))) (if (and (pair? n311c@b) (eq? (car n311c@b) 'global-rtd)) ((lambda (n311e@lib n311f@loc) (cons '$rtd (symbol-value n311f@loc))) (cadr n311c@b) (cddr n311c@b)) n311c@b))) n311a@t) ((lambda (n3122@t) (if n3122@t (cdr n3122@t) ((lambda (n3124@t) (if n3124@t ((lambda (n3126@env) ((lambda (n3128@t) (if n3128@t ((lambda (n312a@p) (cons* 'lexical (cdr n312a@p) '#f)) n3128@t) '(displaced-lexical . #f))) (assq n3116@x (n2f63@interaction-env-locs n3126@env)))) n3124@t) '(displaced-lexical . #f))) (n2fad@top-level-context)))) (assq n3116@x n3117@r)))) (n2ace@n296e@imported-label->binding n3116@x)))) (set! n2ccb@make-binding cons) (set! n2ccd@binding-type car) (set! n2ccf@binding-value cdr) (set! n2cd1@raise-unbound-error (lambda (n312c@id) (n2f9d@syntax-violation* '#f '"unbound identifier" n312c@id (n4cdc@n4b22@make-undefined-violation)))) (set! n2cd3@syntax-type (lambda (n312e@e n312f@r) (if (n2cab@id? n312e@e) ((lambda (n3132@id) ((lambda (n3134@label) ((lambda (n3136@b) ((lambda (n3138@type) ((lambda () (begin (if (not n3134@label) (n2cd1@raise-unbound-error n3132@id) (void)) ((lambda (n313a@t) (if (memv n313a@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values n3138@type (n2ccf@binding-value n3136@b) n3132@id) (values 'other '#f '#f))) n3138@type))))) (n2ccd@binding-type n3136@b))) (n2cc9@label->binding n3134@label n312f@r))) (n2cc5@id->label n3132@id))) n312e@e) (if (n2c9d@syntax-pair? n312e@e) ((lambda (n313c@id) (if (n2cab@id? n313c@id) ((lambda (n313e@label) ((lambda (n3140@b) ((lambda (n3142@type) ((lambda () (begin (if (not n313e@label) (n2cd1@raise-unbound-error n313c@id) (void)) ((lambda (n3144@t) (if (memv n3144@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values n3142@type (n2ccf@binding-value n3140@b) n313c@id) (values 'call '#f '#f))) n3142@type))))) (n2ccd@binding-type n3140@b))) (n2cc9@label->binding n313e@label n312f@r))) (n2cc5@id->label n313c@id)) (values 'call '#f '#f))) (n2ca5@syntax-car n312e@e)) ((lambda (n3146@d) (if (n2cbb@self-evaluating? n3146@d) (values 'constant n3146@d '#f) (values 'other '#f '#f))) (n2cc1@stx->datum n312e@e)))))) (set! n2ce1@sanitize-binding (lambda (n3148@x n3149@src) (if (procedure? n3148@x) (cons* 'local-macro n3148@x n3149@src) (if (and (pair? n3148@x) (eq? (car n3148@x) 'macro!) (procedure? (cdr n3148@x))) (cons* 'local-macro! (cdr n3148@x) n3149@src) (if (and (pair? n3148@x) (eq? (car n3148@x) '$rtd)) n3148@x (assertion-violation 'expand '"invalid transformer" n3148@x)))))) (set! n2ce3@make-variable-transformer (lambda (n314c@x) (if (procedure? n314c@x) (cons 'macro! n314c@x) (assertion-violation 'make-variable-transformer '"not a procedure" n314c@x)))) (set! n2ce5@variable-transformer? (lambda (n314e@x) (and (pair? n314e@x) (eq? (car n314e@x) 'macro!) (procedure? (cdr n314e@x))))) (set! n2ce7@variable-transformer-procedure (lambda (n3150@x) (if (n2ce5@variable-transformer? n3150@x) (cdr n3150@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" n3150@x)))) (set! n2ce9@make-eval-transformer (lambda (n3152@x) (n2ce1@sanitize-binding (eval-core (n28a9@n2861@expanded->core n3152@x)) n3152@x))) (set! n2e3a@parse-define (lambda (n3154@x) ((lambda (n3156@t) ((lambda (n3158@ls/false) (if (and n3158@ls/false (apply (lambda (n315a@id n315b@fmls n315c@b n315d@b*) (n2cab@id? n315a@id)) n3158@ls/false)) (apply (lambda (n3162@id n3163@fmls n3164@b n3165@b*) (begin (n2edc@verify-formals n3163@fmls n3154@x) (values n3162@id (cons 'defun (cons n3163@fmls (cons n3164@b n3165@b*)))))) n3158@ls/false) ((lambda (n316a@t) ((lambda (n316c@ls/false) (if (and n316c@ls/false (apply (lambda (n316e@id n316f@val) (n2cab@id? n316e@id)) n316c@ls/false)) (apply (lambda (n3172@id n3173@val) (values n3172@id (cons 'expr n3173@val))) n316c@ls/false) ((lambda (n3176@t) ((lambda (n3178@ls/false) (if (and n3178@ls/false (apply (lambda (n317a@id) (n2cab@id? n317a@id)) n3178@ls/false)) (apply (lambda (n317c@id) (values n317c@id (cons 'expr (n2e6c@bless '(void))))) n3178@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3176@t))) (n2eb6@syntax-dispatch n3176@t '(_ any)))) n316a@t))) (n2eb6@syntax-dispatch n316a@t '(_ any any)))) n3156@t))) (n2eb6@syntax-dispatch n3156@t '(_ (any . any) any . each-any)))) n3154@x))) (set! n2e3c@parse-define-syntax (lambda (n317e@x) ((lambda (n3180@t) ((lambda (n3182@ls/false) (if (and n3182@ls/false (apply (lambda (n3184@id n3185@val) (n2cab@id? n3184@id)) n3182@ls/false)) (apply (lambda (n3188@id n3189@val) (values n3188@id n3189@val)) n3182@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3180@t))) (n2eb6@syntax-dispatch n3180@t '(_ any any)))) n317e@x))) (set! n2e3e@scheme-stx-hashtable (make-eq-hashtable)) (set! n2e40@scheme-stx (lambda (n318c@sym) (or (hashtable-ref n2e3e@scheme-stx-hashtable n318c@sym '#f) ((lambda (n318e@subst) ((lambda (n3190@stx) ((lambda (n3192@stx) ((lambda () (begin (hashtable-set! n2e3e@scheme-stx-hashtable n318c@sym n3192@stx) n3192@stx)))) ((lambda (n3194@t) (if n3194@t ((lambda (n3196@x) ((lambda (n3198@name n3199@label) (n2c97@add-subst (n2c44@make-rib (list n3198@name) (list n2c27@top-mark*) (list n3199@label) '#f '#f) n3190@stx)) (car n3196@x) (cdr n3196@x))) n3194@t) n3190@stx)) (assq n318c@sym n318e@subst)))) (n2c75@make-stx n318c@sym n2c27@top-mark* '() '()))) (n2aa4@n291a@library-subst (n2ac8@n2962@find-library-by-name '(psyntax system $all))))))) (set! n2e42@lexical-var car) (set! n2e44@lexical-mutable? cdr) (set! n2e46@set-lexical-mutable! set-cdr!) (set! n2e48@add-lexical (lambda (n319c@lab n319d@lex n319e@r) (cons (cons* n319c@lab 'lexical n319d@lex '#f) n319e@r))) (set! n2e4a@add-lexicals (lambda (n31a2@lab* n31a3@lex* n31a4@r) (if (null? n31a2@lab*) n31a4@r (n2e4a@add-lexicals (cdr n31a2@lab*) (cdr n31a3@lex*) (n2e48@add-lexical (car n31a2@lab*) (car n31a3@lex*) n31a4@r))))) (set! n2e4c@letrec-helper (lambda (n31a8@e n31a9@r n31aa@mr n31ab@build) ((lambda (n31b0@t) ((lambda (n31b2@ls/false) (if n31b2@ls/false (apply (lambda (n31b4@lhs* n31b5@rhs* n31b6@b n31b7@b*) (if (not (n2cb5@valid-bound-ids? n31b4@lhs*)) (n2e70@invalid-fmls-error n31a8@e n31b4@lhs*) ((lambda (n31bc@lex* n31bd@lab*) ((lambda (n31c0@rib n31c1@r) ((lambda (n31c4@body n31c5@rhs*) (n31ab@build '#f n31bc@lex* n31c5@rhs* n31c4@body)) (n2eee@chi-internal (n2c97@add-subst n31c0@rib (cons n31b6@b n31b7@b*)) n31c1@r n31aa@mr) (n2ed4@chi-expr* (map (lambda (n31c8@x) (n2c97@add-subst n31c0@rib n31c8@x)) n31b5@rhs*) n31c1@r n31aa@mr))) (n2c66@make-full-rib n31b4@lhs* n31bd@lab*) (n2e4a@add-lexicals n31bd@lab* n31bc@lex* n31a9@r))) (map n2c2b@gen-lexical n31b4@lhs*) (map n2c2f@gen-label n31b4@lhs*)))) n31b2@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n31b0@t))) (n2eb6@syntax-dispatch n31b0@t '(_ #(each (any any)) any . each-any)))) n31a8@e))) (set! n2e4e@letrec-transformer (lambda (n31ca@e n31cb@r n31cc@mr) (n2e4c@letrec-helper n31ca@e n31cb@r n31cc@mr n2c0c@n2b7d@build-letrec))) (set! n2e50@letrec*-transformer (lambda (n31d0@e n31d1@r n31d2@mr) (n2e4c@letrec-helper n31d0@e n31d1@r n31d2@mr n2c0d@n2b7f@build-letrec*))) (set! n2e52@fluid-let-syntax-transformer (lambda (n31d6@e n31d7@r n31d8@mr) ((lambda (n31dd@lookup) (begin (set! n31dd@lookup (lambda (n31f0@x) (or (n2cc5@id->label n31f0@x) (n2f9f@syntax-violation '#f '"unbound identifier" n31d6@e n31f0@x)))) ((lambda (n31de@t) ((lambda (n31e0@ls/false) (if n31e0@ls/false (apply (lambda (n31e2@lhs* n31e3@rhs* n31e4@b n31e5@b*) (if (not (n2cb5@valid-bound-ids? n31e2@lhs*)) (n2e70@invalid-fmls-error n31d6@e n31e2@lhs*) ((lambda (n31ea@lab* n31eb@rhs*) (n2eee@chi-internal (cons n31e4@b n31e5@b*) (append (map cons n31ea@lab* n31eb@rhs*) n31d7@r) (append (map cons n31ea@lab* n31eb@rhs*) n31d8@mr))) (map n31dd@lookup n31e2@lhs*) (map (lambda (n31ee@x) (n2ce9@make-eval-transformer (n2f13@expand-transformer n31ee@x n31d8@mr))) n31e3@rhs*)))) n31e0@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n31de@t))) (n2eb6@syntax-dispatch n31de@t '(_ #(each (any any)) any . each-any)))) n31d6@e))) '#f))) (set! n2e54@type-descriptor-transformer (lambda (n31f2@e n31f3@r n31f4@mr) ((lambda (n31f8@t) ((lambda (n31fa@ls/false) (if (and n31fa@ls/false (apply (lambda (n31fc@id) (n2cab@id? n31fc@id)) n31fa@ls/false)) (apply (lambda (n31fe@id) ((lambda (n3200@lab) ((lambda (n3202@b) ((lambda (n3204@type) ((lambda () (begin (if (not n3200@lab) (n2cd1@raise-unbound-error n31fe@id) (void)) (if (not (and (eq? n3204@type '$rtd) (not (list? (n2ccf@binding-value n3202@b))))) (n2f9f@syntax-violation '#f '"not a record type" n31f2@e) (void)) (list 'quote (n2ccf@binding-value n3202@b)))))) (n2ccd@binding-type n3202@b))) (n2cc9@label->binding n3200@lab n31f3@r))) (n2cc5@id->label n31fe@id))) n31fa@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n31f8@t))) (n2eb6@syntax-dispatch n31f8@t '(_ any)))) n31f2@e))) (set! n2e56@record-type-descriptor-transformer (lambda (n3206@e n3207@r n3208@mr) ((lambda (n320c@t) ((lambda (n320e@ls/false) (if (and n320e@ls/false (apply (lambda (n3210@id) (n2cab@id? n3210@id)) n320e@ls/false)) (apply (lambda (n3212@id) ((lambda (n3214@lab) ((lambda (n3216@b) ((lambda (n3218@type) ((lambda () (begin (if (not n3214@lab) (n2cd1@raise-unbound-error n3212@id) (void)) (if (not (and (eq? n3218@type '$rtd) (list? (n2ccf@binding-value n3216@b)))) (n2f9f@syntax-violation '#f '"not a record type" n3206@e) (void)) (n2ed8@chi-expr (car (n2ccf@binding-value n3216@b)) n3207@r n3208@mr))))) (n2ccd@binding-type n3216@b))) (n2cc9@label->binding n3214@lab n3207@r))) (n2cc5@id->label n3212@id))) n320e@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n320c@t))) (n2eb6@syntax-dispatch n320c@t '(_ any)))) n3206@e))) (set! n2e58@record-constructor-descriptor-transformer (lambda (n321a@e n321b@r n321c@mr) ((lambda (n3220@t) ((lambda (n3222@ls/false) (if (and n3222@ls/false (apply (lambda (n3224@id) (n2cab@id? n3224@id)) n3222@ls/false)) (apply (lambda (n3226@id) ((lambda (n3228@lab) ((lambda (n322a@b) ((lambda (n322c@type) ((lambda () (begin (if (not n3228@lab) (n2cd1@raise-unbound-error n3226@id) (void)) (if (not (and (eq? n322c@type '$rtd) (list? (n2ccf@binding-value n322a@b)))) (n2f9f@syntax-violation '#f '"invalid type" n321a@e) (void)) (n2ed8@chi-expr (cadr (n2ccf@binding-value n322a@b)) n321b@r n321c@mr))))) (n2ccd@binding-type n322a@b))) (n2cc9@label->binding n3228@lab n321b@r))) (n2cc5@id->label n3226@id))) n3222@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3220@t))) (n2eb6@syntax-dispatch n3220@t '(_ any)))) n321a@e))) (set! n2e5a@when-macro (lambda (n322e@e) ((lambda (n3230@t) ((lambda (n3232@ls/false) (if n3232@ls/false (apply (lambda (n3234@test n3235@e n3236@e*) (n2e6c@bless (list 'if n3234@test (cons 'begin (cons n3235@e n3236@e*))))) n3232@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3230@t))) (n2eb6@syntax-dispatch n3230@t '(_ any any . each-any)))) n322e@e))) (set! n2e5c@unless-macro (lambda (n323a@e) ((lambda (n323c@t) ((lambda (n323e@ls/false) (if n323e@ls/false (apply (lambda (n3240@test n3241@e n3242@e*) (n2e6c@bless (list 'if (list 'not n3240@test) (cons 'begin (cons n3241@e n3242@e*))))) n323e@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n323c@t))) (n2eb6@syntax-dispatch n323c@t '(_ any any . each-any)))) n323a@e))) (set! n2e5e@if-transformer (lambda (n3246@e n3247@r n3248@mr) ((lambda (n324c@t) ((lambda (n324e@ls/false) (if n324e@ls/false (apply (lambda (n3250@e0 n3251@e1 n3252@e2) (list 'if (n2ed8@chi-expr n3250@e0 n3247@r n3248@mr) (n2ed8@chi-expr n3251@e1 n3247@r n3248@mr) (n2ed8@chi-expr n3252@e2 n3247@r n3248@mr))) n324e@ls/false) ((lambda (n3256@t) ((lambda (n3258@ls/false) (if n3258@ls/false (apply (lambda (n325a@e0 n325b@e1) (list 'if (n2ed8@chi-expr n325a@e0 n3247@r n3248@mr) (n2ed8@chi-expr n325b@e1 n3247@r n3248@mr) (n2c0b@n2b7b@build-void))) n3258@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3256@t))) (n2eb6@syntax-dispatch n3256@t '(_ any any)))) n324c@t))) (n2eb6@syntax-dispatch n324c@t '(_ any any any)))) n3246@e))) (set! n2e60@and-transformer (lambda (n325e@e n325f@r n3260@mr) ((lambda (n3264@t) ((lambda (n3266@ls/false) (if n3266@ls/false (apply (lambda (n3268@e*) (cons 'and (n2ed4@chi-expr* n3268@e* n325f@r n3260@mr))) n3266@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3264@t))) (n2eb6@syntax-dispatch n3264@t '(_ . each-any)))) n325e@e))) (set! n2e62@or-transformer (lambda (n326a@e n326b@r n326c@mr) ((lambda (n3270@t) ((lambda (n3272@ls/false) (if n3272@ls/false (apply (lambda (n3274@e*) (cons 'or (n2ed4@chi-expr* n3274@e* n326b@r n326c@mr))) n3272@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3270@t))) (n2eb6@syntax-dispatch n3270@t '(_ . each-any)))) n326a@e))) (set! n2e64@case-macro (lambda (n3276@e) ((lambda (n3279@build-last n327b@build-one) (begin (set! n3279@build-last (lambda (n32a0@cls) ((lambda (n32a2@t) ((lambda (n32a4@ls/false) (if n32a4@ls/false (apply (lambda (n32a6@e n32a7@e*) (cons 'begin (cons n32a6@e n32a7@e*))) n32a4@ls/false) ((lambda (n32aa@t) ((lambda (n32ac@ls/false) (if n32ac@ls/false (apply (lambda () (n327b@build-one n32a0@cls '(if #f #f))) n32ac@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n32aa@t))) (n2eb6@syntax-dispatch n32aa@t '_))) n32a2@t))) (n2eb6@syntax-dispatch n32a2@t '(#(scheme-id else) any . each-any)))) n32a0@cls))) (set! n327b@build-one (lambda (n3292@cls n3293@k) ((lambda (n3296@t) ((lambda (n3298@ls/false) (if n3298@ls/false (apply (lambda (n329a@d* n329b@e n329c@e*) (list 'if (list 'memv 't (list 'quote n329a@d*)) (cons 'begin (cons n329b@e n329c@e*)) n3293@k)) n3298@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3296@t))) (n2eb6@syntax-dispatch n3296@t '(each-any any . each-any)))) n3292@cls))) ((lambda (n327c@t) ((lambda (n327e@ls/false) (if n327e@ls/false (apply (lambda (n3280@expr) (n2e6c@bless (cons 'let (cons (list (list 't n3280@expr)) '((if #f #f)))))) n327e@ls/false) ((lambda (n3282@t) ((lambda (n3284@ls/false) (if n3284@ls/false (apply (lambda (n3286@expr n3287@cls n3288@cls*) (n2e6c@bless (list 'let (list (list 't n3286@expr)) ((letrec ((n328c@f (lambda (n328e@cls n328f@cls*) (if (null? n328f@cls*) (n3279@build-last n328e@cls) (n327b@build-one n328e@cls (n328c@f (car n328f@cls*) (cdr n328f@cls*))))))) n328c@f) n3287@cls n3288@cls*)))) n3284@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3282@t))) (n2eb6@syntax-dispatch n3282@t '(_ any any . each-any)))) n327c@t))) (n2eb6@syntax-dispatch n327c@t '(_ any)))) n3276@e))) '#f '#f))) (set! n2e66@quote-transformer (lambda (n32ae@e n32af@r n32b0@mr) ((lambda (n32b4@t) ((lambda (n32b6@ls/false) (if n32b6@ls/false (apply (lambda (n32b8@datum) (list 'quote (n2cc1@stx->datum n32b8@datum))) n32b6@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n32b4@t))) (n2eb6@syntax-dispatch n32b4@t '(_ any)))) n32ae@e))) (set! n2e68@case-lambda-transformer (lambda (n32ba@e n32bb@r n32bc@mr) ((lambda (n32c0@t) ((lambda (n32c2@ls/false) (if n32c2@ls/false (apply (lambda (n32c4@fmls* n32c5@b* n32c6@b**) (call-with-values (lambda () (n2ee0@chi-lambda-clause* n32ba@e n32c4@fmls* (map cons n32c5@b* n32c6@b**) n32bb@r n32bc@mr)) (lambda (n32ce@n32cb n32cf@n32cd) ((lambda (n32d2@body* n32d3@fmls*) (n2c08@n2b49@build-case-lambda '#f n32d3@fmls* n32d2@body*)) n32cf@n32cd n32ce@n32cb)))) n32c2@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n32c0@t))) (n2eb6@syntax-dispatch n32c0@t '(_ . #(each (any any . each-any)))))) n32ba@e))) (set! n2e6a@lambda-transformer (lambda (n32d6@e n32d7@r n32d8@mr) ((lambda (n32dc@t) ((lambda (n32de@ls/false) (if n32de@ls/false (apply (lambda (n32e0@fmls n32e1@b n32e2@b*) (call-with-values (lambda () (n2ede@chi-lambda-clause n32d6@e n32e0@fmls (cons n32e1@b n32e2@b*) n32d7@r n32d8@mr)) (lambda (n32ea@n32e7 n32eb@n32e9) ((lambda (n32ee@body n32ef@fmls) (n2c07@n2b47@build-lambda '#f n32ef@fmls n32ee@body)) n32eb@n32e9 n32ea@n32e7)))) n32de@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n32dc@t))) (n2eb6@syntax-dispatch n32dc@t '(_ any any . each-any)))) n32d6@e))) (set! n2e6c@bless (lambda (n32f2@x) (n2c93@mkstx ((letrec ((n32f4@f (lambda (n32f6@x) (if (n2c73@stx? n32f6@x) n32f6@x (if (pair? n32f6@x) (cons (n32f4@f (car n32f6@x)) (n32f4@f (cdr n32f6@x))) (if (symbol? n32f6@x) (n2e40@scheme-stx n32f6@x) (if (vector? n32f6@x) (vector-map n32f4@f n32f6@x) n32f6@x))))))) n32f4@f) n32f2@x) '() '() '()))) (set! n2e6e@with-syntax-macro (lambda (n32f8@e) ((lambda (n32fa@t) ((lambda (n32fc@ls/false) (if n32fc@ls/false (apply (lambda (n32fe@pat* n32ff@expr* n3300@b n3301@b*) ((lambda (n3306@idn*) (begin (n2edc@verify-formals (map car n3306@idn*) n32f8@e) ((lambda (n3308@t*) (n2e6c@bless (list 'let (map list n3308@t* n32ff@expr*) ((letrec ((n330a@f (lambda (n330c@pat* n330d@t*) (if (null? n330c@pat*) (cons 'begin (cons '#f (cons n3300@b n3301@b*))) (list 'syntax-case (car n330d@t*) '() (list (car n330c@pat*) (n330a@f (cdr n330c@pat*) (cdr n330d@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car n330c@pat*)) (car n330d@t*)))))))) n330a@f) n32fe@pat* n3308@t*)))) (n2f8d@generate-temporaries n32ff@expr*)))) ((letrec ((n3310@f (lambda (n3312@pat*) (if (null? n3312@pat*) '() (call-with-values (lambda () (n2eb4@convert-pattern (car n3312@pat*) '())) (lambda (n3318@n3315 n3319@n3317) ((lambda (n331c@idn* n331d@pat) (append n331c@idn* (n3310@f (cdr n3312@pat*)))) n3319@n3317 n3318@n3315))))))) n3310@f) n32fe@pat*))) n32fc@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n32fa@t))) (n2eb6@syntax-dispatch n32fa@t '(_ #(each (any any)) any . each-any)))) n32f8@e))) (set! n2e70@invalid-fmls-error (lambda (n3320@stx n3321@fmls) ((lambda (n3324@t) ((lambda (n3326@ls/false) (if n3326@ls/false (apply (lambda (n3328@id* n3329@last) ((letrec ((n332c@f (lambda (n332e@id*) (if (null? n332e@id*) (values) (if (not (n2cab@id? (car n332e@id*))) (n2f9f@syntax-violation '#f '"not an identifier" n3320@stx (car n332e@id*)) (begin (n332c@f (cdr n332e@id*)) (if (n2cb9@bound-id-member? (car n332e@id*) (cdr n332e@id*)) (n2f9f@syntax-violation '#f '"duplicate binding" n3320@stx (car n332e@id*)) (void)))))))) n332c@f) (if (n2cab@id? n3329@last) (cons n3329@last n3328@id*) (if (n2ca1@syntax-null? n3329@last) n3328@id* (n2f9f@syntax-violation '#f '"not an identifier" n3320@stx n3329@last))))) n3326@ls/false) ((lambda (n3330@t) ((lambda (n3332@ls/false) (if n3332@ls/false (apply (lambda () (n2f9f@syntax-violation '#f '"malformed binding form" n3320@stx n3321@fmls)) n3332@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3330@t))) (n2eb6@syntax-dispatch n3330@t '_))) n3324@t))) (n2eb6@syntax-dispatch n3324@t '#(each+ any () any)))) n3321@fmls))) (set! n2e72@let-macro (lambda (n3334@stx) ((lambda (n3336@t) ((lambda (n3338@ls/false) (if n3338@ls/false (apply (lambda (n333a@lhs* n333b@rhs* n333c@b n333d@b*) (if (n2cb5@valid-bound-ids? n333a@lhs*) (n2e6c@bless (cons (cons 'lambda (cons n333a@lhs* (cons n333c@b n333d@b*))) n333b@rhs*)) (n2e70@invalid-fmls-error n3334@stx n333a@lhs*))) n3338@ls/false) ((lambda (n3342@t) ((lambda (n3344@ls/false) (if (and n3344@ls/false (apply (lambda (n3346@f n3347@lhs* n3348@rhs* n3349@b n334a@b*) (n2cab@id? n3346@f)) n3344@ls/false)) (apply (lambda (n3350@f n3351@lhs* n3352@rhs* n3353@b n3354@b*) (if (n2cb5@valid-bound-ids? n3351@lhs*) (n2e6c@bless (cons (list 'letrec (list (list n3350@f (cons 'lambda (cons n3351@lhs* (cons n3353@b n3354@b*))))) n3350@f) n3352@rhs*)) (n2e70@invalid-fmls-error n3334@stx n3351@lhs*))) n3344@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3342@t))) (n2eb6@syntax-dispatch n3342@t '(_ any #(each (any any)) any . each-any)))) n3336@t))) (n2eb6@syntax-dispatch n3336@t '(_ #(each (any any)) any . each-any)))) n3334@stx))) (set! n2e74@let-values-macro (lambda (n335a@stx) ((lambda (n335d@rename n335f@rename*) (begin (set! n335d@rename (lambda (n33c2@x n33c3@old* n33c4@new*) (begin (if (not (n2cab@id? n33c2@x)) (n2f9f@syntax-violation '#f '"not an indentifier" n335a@stx n33c2@x) (void)) (if (n2cb9@bound-id-member? n33c2@x n33c3@old*) (n2f9f@syntax-violation '#f '"duplicate binding" n335a@stx n33c2@x) (void)) ((lambda (n33c8@y) (values n33c8@y (cons n33c2@x n33c3@old*) (cons n33c8@y n33c4@new*))) (gensym (n2fa5@syntax->datum n33c2@x)))))) (set! n335f@rename* (lambda (n33b0@x* n33b1@old* n33b2@new*) (if (null? n33b0@x*) (values '() n33b1@old* n33b2@new*) (call-with-values (lambda () (n335d@rename (car n33b0@x*) n33b1@old* n33b2@new*)) (lambda (n33b6@x n33b7@old* n33b8@new*) (call-with-values (lambda () (n335f@rename* (cdr n33b0@x*) n33b7@old* n33b8@new*)) (lambda (n33bc@x* n33bd@old* n33be@new*) (values (cons n33b6@x n33bc@x*) n33bd@old* n33be@new*)))))))) ((lambda (n3360@t) ((lambda (n3362@ls/false) (if n3362@ls/false (apply (lambda (n3364@b n3365@b*) (cons* (n2e6c@bless 'let) '() n3364@b n3365@b*)) n3362@ls/false) ((lambda (n3368@t) ((lambda (n336a@ls/false) (if n336a@ls/false (apply (lambda (n336c@lhs* n336d@rhs* n336e@b n336f@b*) (n2e6c@bless ((letrec ((n3374@f (lambda (n3376@lhs* n3377@rhs* n3378@old* n3379@new*) (if (null? n3376@lhs*) (cons 'let (cons (map list n3378@old* n3379@new*) (cons n336e@b n336f@b*))) ((lambda (n337e@t) ((lambda (n3380@ls/false) (if n3380@ls/false (apply (lambda (n3382@x*) (call-with-values (lambda () (n335f@rename* n3382@x* n3378@old* n3379@new*)) (lambda (n338a@n3385 n338b@n3387 n338c@n3389) ((lambda (n3390@new* n3391@old* n3392@y*) (list 'call-with-values (list 'lambda '() (car n3377@rhs*)) (list 'lambda n3392@y* (n3374@f (cdr n3376@lhs*) (cdr n3377@rhs*) n3391@old* n3390@new*)))) n338c@n3389 n338b@n3387 n338a@n3385)))) n3380@ls/false) ((lambda (n3396@t) ((lambda (n3398@ls/false) (if n3398@ls/false (apply (lambda (n339a@x* n339b@x) (call-with-values (lambda () (n335d@rename n339b@x n3378@old* n3379@new*)) (lambda (n339e@y n339f@old* n33a0@new*) (call-with-values (lambda () (n335f@rename* n339a@x* n339f@old* n33a0@new*)) (lambda (n33a4@y* n33a5@old* n33a6@new*) (list 'call-with-values (list 'lambda '() (car n3377@rhs*)) (list 'lambda (append n33a4@y* n339e@y) (n3374@f (cdr n3376@lhs*) (cdr n3377@rhs*) n33a5@old* n33a6@new*)))))))) n3398@ls/false) ((lambda (n33aa@t) ((lambda (n33ac@ls/false) (if n33ac@ls/false (apply (lambda (n33ae@others) (n2f9f@syntax-violation '#f '"malformed bindings" n335a@stx n33ae@others)) n33ac@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n33aa@t))) (n2eb6@syntax-dispatch n33aa@t 'any))) n3396@t))) (n2eb6@syntax-dispatch n3396@t '#(each+ any () any)))) n337e@t))) (n2eb6@syntax-dispatch n337e@t 'each-any))) (car n3376@lhs*)))))) n3374@f) n336c@lhs* n336d@rhs* '() '()))) n336a@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3368@t))) (n2eb6@syntax-dispatch n3368@t '(_ #(each (any any)) any . each-any)))) n3360@t))) (n2eb6@syntax-dispatch n3360@t '(_ () any . each-any)))) n335a@stx))) '#f '#f))) (set! n2e76@let*-values-macro (lambda (n33ca@stx) ((lambda (n33cd@check) (begin (set! n33cd@check (lambda (n33fc@x*) (if (not (null? n33fc@x*)) ((lambda (n33fe@x) (begin (if (not (n2cab@id? n33fe@x)) (n2f9f@syntax-violation '#f '"not an identifier" n33ca@stx n33fe@x) (void)) (n33cd@check (cdr n33fc@x*)) (if (n2cb9@bound-id-member? n33fe@x (cdr n33fc@x*)) (n2f9f@syntax-violation '#f '"duplicate identifier" n33ca@stx n33fe@x) (void)))) (car n33fc@x*)) (void)))) ((lambda (n33ce@t) ((lambda (n33d0@ls/false) (if n33d0@ls/false (apply (lambda (n33d2@b n33d3@b*) (cons* (n2e6c@bless 'let) '() n33d2@b n33d3@b*)) n33d0@ls/false) ((lambda (n33d6@t) ((lambda (n33d8@ls/false) (if n33d8@ls/false (apply (lambda (n33da@lhs* n33db@rhs* n33dc@b n33dd@b*) (n2e6c@bless ((letrec ((n33e2@f (lambda (n33e4@lhs* n33e5@rhs*) (if (null? n33e4@lhs*) (cons 'begin (cons n33dc@b n33dd@b*)) ((lambda (n33e8@t) ((lambda (n33ea@ls/false) (if n33ea@ls/false (apply (lambda (n33ec@x*) (begin (n33cd@check n33ec@x*) (list 'call-with-values (list 'lambda '() (car n33e5@rhs*)) (list 'lambda n33ec@x* (n33e2@f (cdr n33e4@lhs*) (cdr n33e5@rhs*)))))) n33ea@ls/false) ((lambda (n33ee@t) ((lambda (n33f0@ls/false) (if n33f0@ls/false (apply (lambda (n33f2@x* n33f3@x) (begin (n33cd@check (cons n33f3@x n33f2@x*)) (list 'call-with-values (list 'lambda '() (car n33e5@rhs*)) (list 'lambda (append n33f2@x* n33f3@x) (n33e2@f (cdr n33e4@lhs*) (cdr n33e5@rhs*)))))) n33f0@ls/false) ((lambda (n33f6@t) ((lambda (n33f8@ls/false) (if n33f8@ls/false (apply (lambda (n33fa@others) (n2f9f@syntax-violation '#f '"malformed bindings" n33ca@stx n33fa@others)) n33f8@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n33f6@t))) (n2eb6@syntax-dispatch n33f6@t 'any))) n33ee@t))) (n2eb6@syntax-dispatch n33ee@t '#(each+ any () any)))) n33e8@t))) (n2eb6@syntax-dispatch n33e8@t 'each-any))) (car n33e4@lhs*)))))) n33e2@f) n33da@lhs* n33db@rhs*))) n33d8@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n33d6@t))) (n2eb6@syntax-dispatch n33d6@t '(_ #(each (any any)) any . each-any)))) n33ce@t))) (n2eb6@syntax-dispatch n33ce@t '(_ () any . each-any)))) n33ca@stx))) '#f))) (set! n2e78@trace-lambda-macro (lambda (n3400@stx) ((lambda (n3402@t) ((lambda (n3404@ls/false) (if n3404@ls/false (apply (lambda (n3406@who n3407@fmls n3408@b n3409@b*) (if (n2cb5@valid-bound-ids? n3407@fmls) (n2e6c@bless (list 'make-traced-procedure (list 'quote n3406@who) (cons 'lambda (cons n3407@fmls (cons n3408@b n3409@b*))))) (n2e70@invalid-fmls-error n3400@stx n3407@fmls))) n3404@ls/false) ((lambda (n340e@t) ((lambda (n3410@ls/false) (if n3410@ls/false (apply (lambda (n3412@who n3413@fmls n3414@last n3415@b n3416@b*) (if (n2cb5@valid-bound-ids? (cons n3414@last n3413@fmls)) (n2e6c@bless (list 'make-traced-procedure (list 'quote n3412@who) (cons 'lambda (cons (append n3413@fmls n3414@last) (cons n3415@b n3416@b*))))) (n2e70@invalid-fmls-error n3400@stx (append n3413@fmls n3414@last)))) n3410@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n340e@t))) (n2eb6@syntax-dispatch n340e@t '(_ any #(each+ any () any) any . each-any)))) n3402@t))) (n2eb6@syntax-dispatch n3402@t '(_ any each-any any . each-any)))) n3400@stx))) (set! n2e7a@trace-define-macro (lambda (n341c@stx) ((lambda (n341e@t) ((lambda (n3420@ls/false) (if n3420@ls/false (apply (lambda (n3422@who n3423@fmls n3424@b n3425@b*) (if (n2cb5@valid-bound-ids? n3423@fmls) (n2e6c@bless (list 'define n3422@who (list 'make-traced-procedure (list 'quote n3422@who) (cons 'lambda (cons n3423@fmls (cons n3424@b n3425@b*)))))) (n2e70@invalid-fmls-error n341c@stx n3423@fmls))) n3420@ls/false) ((lambda (n342a@t) ((lambda (n342c@ls/false) (if n342c@ls/false (apply (lambda (n342e@who n342f@fmls n3430@last n3431@b n3432@b*) (if (n2cb5@valid-bound-ids? (cons n3430@last n342f@fmls)) (n2e6c@bless (list 'define n342e@who (list 'make-traced-procedure (list 'quote n342e@who) (cons 'lambda (cons (append n342f@fmls n3430@last) (cons n3431@b n3432@b*)))))) (n2e70@invalid-fmls-error n341c@stx (append n342f@fmls n3430@last)))) n342c@ls/false) ((lambda (n3438@t) ((lambda (n343a@ls/false) (if n343a@ls/false (apply (lambda (n343c@who n343d@expr) (if (n2cab@id? n343c@who) (n2e6c@bless (list 'define n343c@who (list 'let (list (list 'v n343d@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote n343c@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (n2f9f@syntax-violation '#f '"invalid name" n341c@stx))) n343a@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3438@t))) (n2eb6@syntax-dispatch n3438@t '(_ any any)))) n342a@t))) (n2eb6@syntax-dispatch n342a@t '(_ (any . #(each+ any () any)) any . each-any)))) n341e@t))) (n2eb6@syntax-dispatch n341e@t '(_ (any . each-any) any . each-any)))) n341c@stx))) (set! n2e7c@trace-define-syntax-macro (lambda (n3440@stx) ((lambda (n3442@t) ((lambda (n3444@ls/false) (if n3444@ls/false (apply (lambda (n3446@who n3447@expr) (if (n2cab@id? n3446@who) (n2e6c@bless (list 'define-syntax n3446@who (list 'make-traced-macro (list 'quote n3446@who) n3447@expr))) (n2f9f@syntax-violation '#f '"invalid name" n3440@stx))) n3444@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3442@t))) (n2eb6@syntax-dispatch n3442@t '(_ any any)))) n3440@stx))) (set! n2e7e@trace-let/rec-syntax (lambda (n344a@who) (lambda (n344c@stx) ((lambda (n344e@t) ((lambda (n3450@ls/false) (if n3450@ls/false (apply (lambda (n3452@lhs* n3453@rhs* n3454@b n3455@b*) (if (n2cb5@valid-bound-ids? n3452@lhs*) ((lambda (n345a@rhs*) (n2e6c@bless (cons n344a@who (cons (map list n3452@lhs* n345a@rhs*) (cons n3454@b n3455@b*))))) (map (lambda (n345c@lhs n345d@rhs) (list 'make-traced-macro (list 'quote n345c@lhs) n345d@rhs)) n3452@lhs* n3453@rhs*)) (n2e70@invalid-fmls-error n344c@stx n3452@lhs*))) n3450@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n344e@t))) (n2eb6@syntax-dispatch n344e@t '(_ #(each (any any)) any . each-any)))) n344c@stx)))) (set! n2e80@trace-let-syntax-macro (n2e7e@trace-let/rec-syntax 'let-syntax)) (set! n2e82@trace-letrec-syntax-macro (n2e7e@trace-let/rec-syntax 'letrec-syntax)) (set! n2e84@guard-macro (lambda (n3460@x) ((lambda (n3463@gen-clauses) (begin (set! n3463@gen-clauses (lambda (n347a@con n347b@outerk n347c@clause*) ((lambda (n3481@f n3483@f*) (begin (set! n3481@f (lambda (n34ba@x n34bb@k) ((lambda (n34be@t) ((lambda (n34c0@ls/false) (if n34c0@ls/false (apply (lambda (n34c2@e n34c3@p) ((lambda (n34c6@t) (list 'let (list (list n34c6@t n34c2@e)) (list 'if n34c6@t (list n34c3@p n34c6@t) n34bb@k))) (gensym))) n34c0@ls/false) ((lambda (n34c8@t) ((lambda (n34ca@ls/false) (if n34ca@ls/false (apply (lambda (n34cc@e) ((lambda (n34ce@t) (list 'let (list (list n34ce@t n34cc@e)) (list 'if n34ce@t n34ce@t n34bb@k))) (gensym))) n34ca@ls/false) ((lambda (n34d0@t) ((lambda (n34d2@ls/false) (if n34d2@ls/false (apply (lambda (n34d4@e n34d5@v n34d6@v*) (list 'if n34d4@e (cons 'begin (cons n34d5@v n34d6@v*)) n34bb@k)) n34d2@ls/false) ((lambda (n34da@t) ((lambda (n34dc@ls/false) (if n34dc@ls/false (apply (lambda () (n2f9f@syntax-violation '#f '"invalid guard clause" n34ba@x)) n34dc@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n34da@t))) (n2eb6@syntax-dispatch n34da@t '_))) n34d0@t))) (n2eb6@syntax-dispatch n34d0@t '(any any . each-any)))) n34c8@t))) (n2eb6@syntax-dispatch n34c8@t '(any)))) n34be@t))) (n2eb6@syntax-dispatch n34be@t '(any #(scheme-id =>) any)))) n34ba@x))) (set! n3483@f* (lambda (n3490@x*) ((lambda (n3492@t) ((lambda (n3494@ls/false) (if n3494@ls/false (apply (lambda () ((lambda (n3496@g) (values (list n3496@g (list 'lambda '() (list 'raise-continuable n347a@con))) n3496@g)) (gensym))) n3494@ls/false) ((lambda (n3498@t) ((lambda (n349a@ls/false) (if n349a@ls/false (apply (lambda (n349c@e n349d@e*) (values (cons 'begin (cons n349c@e n349d@e*)) '#f)) n349a@ls/false) ((lambda (n34a0@t) ((lambda (n34a2@ls/false) (if n34a2@ls/false (apply (lambda (n34a4@cls n34a5@cls*) (call-with-values (lambda () (n3483@f* n34a5@cls*)) (lambda (n34ac@n34a9 n34ad@n34ab) ((lambda (n34b0@g n34b1@e) (values (n3481@f n34a4@cls n34b1@e) n34b0@g)) n34ad@n34ab n34ac@n34a9)))) n34a2@ls/false) ((lambda (n34b4@t) ((lambda (n34b6@ls/false) (if n34b6@ls/false (apply (lambda (n34b8@others) (n2f9f@syntax-violation '#f '"invalid guard clause" n34b8@others)) n34b6@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n34b4@t))) (n2eb6@syntax-dispatch n34b4@t 'any))) n34a0@t))) (n2eb6@syntax-dispatch n34a0@t '(any . any)))) n3498@t))) (n2eb6@syntax-dispatch n3498@t '((#(scheme-id else) any . each-any))))) n3492@t))) (n2eb6@syntax-dispatch n3492@t '()))) n3490@x*))) (call-with-values (lambda () (n3483@f* n347c@clause*)) (lambda (n3488@n3485 n3489@n3487) ((lambda (n348c@raisek n348d@code) (if n348c@raisek (list (list 'call/cc (list 'lambda (list n348c@raisek) (list n347b@outerk (list 'lambda '() n348d@code))))) (list n347b@outerk (list 'lambda '() n348d@code)))) n3489@n3487 n3488@n3485))))) '#f '#f))) ((lambda (n3464@t) ((lambda (n3466@ls/false) (if (and n3466@ls/false (apply (lambda (n3468@con n3469@clause* n346a@b n346b@b*) (n2cab@id? n3468@con)) n3466@ls/false)) (apply (lambda (n3470@con n3471@clause* n3472@b n3473@b*) ((lambda (n3478@outerk) (n2e6c@bless (list (list 'call/cc (list 'lambda (list n3478@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list n3470@con) (n3463@gen-clauses n3470@con n3478@outerk n3471@clause*)) (cons 'lambda (cons '() (cons n3472@b n3473@b*)))))))))) (gensym))) n3466@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3464@t))) (n2eb6@syntax-dispatch n3464@t '(_ (any . each-any) any . each-any)))) n3460@x))) '#f))) (set! n2e86@define-enumeration-macro (lambda (n34de@stx) ((lambda (n34e1@set? n34e3@remove-dups) (begin (set! n34e1@set? (lambda (n34fa@x) (or (null? n34fa@x) (and (not (memq (car n34fa@x) (cdr n34fa@x))) (n34e1@set? (cdr n34fa@x)))))) (set! n34e3@remove-dups (lambda (n34f8@ls) (if (null? n34f8@ls) '() (cons (car n34f8@ls) (n34e3@remove-dups (remq (car n34f8@ls) (cdr n34f8@ls))))))) ((lambda (n34e4@t) ((lambda (n34e6@ls/false) (if (and n34e6@ls/false (apply (lambda (n34e8@name n34e9@id* n34ea@maker) (and (n2cab@id? n34e8@name) (n2cab@id? n34ea@maker) (for-all n2cab@id? n34e9@id*))) n34e6@ls/false)) (apply (lambda (n34ee@name n34ef@id* n34f0@maker) ((lambda (n34f4@name* n34f5@mk) (n2e6c@bless (list 'begin (list 'define n34f5@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote n34f4@name*)))) (list 'define-syntax n34ee@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote n34f4@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote n34ee@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax n34f0@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote n34f0@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote n34f4@name*)) (cons 'syntax-violation (cons (list 'quote n34f0@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons n34f5@mk '('(n* ...)))))))))))) (n34e3@remove-dups (n2fa5@syntax->datum n34ef@id*)) (gensym))) n34e6@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n34e4@t))) (n2eb6@syntax-dispatch n34e4@t '(_ any each-any any)))) n34de@stx))) '#f '#f))) (set! n2e88@time-macro (lambda (n34fc@stx) ((lambda (n34fe@t) ((lambda (n3500@ls/false) (if n3500@ls/false (apply (lambda (n3502@expr) (n2e6c@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() n3502@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) n3500@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n34fe@t))) (n2eb6@syntax-dispatch n34fe@t '(_ any)))) n34fc@stx))) (set! n2e8a@delay-macro (lambda (n3504@stx) ((lambda (n3506@t) ((lambda (n3508@ls/false) (if n3508@ls/false (apply (lambda (n350a@expr) (n2e6c@bless (list 'make-promise (list 'lambda '() n350a@expr)))) n3508@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3506@t))) (n2eb6@syntax-dispatch n3506@t '(_ any)))) n3504@stx))) (set! n2e8c@assert-macro (lambda (n350c@stx) ((lambda (n350e@t) ((lambda (n3510@ls/false) (if n3510@ls/false (apply (lambda (n3512@expr) ((lambda (n3514@pos) (n2e6c@bless (list 'unless n3512@expr (list 'assertion-error (list 'quote n3512@expr) (list 'quote n3514@pos))))) (or (n2f97@expression-position n350c@stx) (n2f97@expression-position n3512@expr)))) n3510@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n350e@t))) (n2eb6@syntax-dispatch n350e@t '(_ any)))) n350c@stx))) (set! n2e8e@endianness-macro (lambda (n3516@stx) ((lambda (n3518@t) ((lambda (n351a@ls/false) (if n351a@ls/false (apply (lambda (n351c@e) ((lambda (n351e@t) (if (memv n351e@t '(little)) (n2e6c@bless ''little) (if (memv n351e@t '(big)) (n2e6c@bless ''big) (n2f9f@syntax-violation '#f '"endianness must be big or little" n3516@stx)))) (n2fa5@syntax->datum n351c@e))) n351a@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3518@t))) (n2eb6@syntax-dispatch n3518@t '(_ any)))) n3516@stx))) (set! n2e90@identifier-syntax-macro (lambda (n3520@stx) ((lambda (n3522@t) ((lambda (n3524@ls/false) (if n3524@ls/false (apply (lambda (n3526@expr) (n2e6c@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax n3526@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax n3526@expr) '((syntax (e* ...)))))))))) n3524@ls/false) ((lambda (n3528@t) ((lambda (n352a@ls/false) (if (and n352a@ls/false (apply (lambda (n352c@id1 n352d@expr1 n352e@id2 n352f@expr2 n3530@expr3) (and (n2cab@id? n352c@id1) (n2cab@id? n352e@id2) (n2cab@id? n352f@expr2))) n352a@ls/false)) (apply (lambda (n3536@id1 n3537@expr1 n3538@id2 n3539@expr2 n353a@expr3) (n2e6c@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax n3537@expr1)) (list (list 'set! 'id n3539@expr2) (list 'syntax n353a@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons n3537@expr1 '(e* ...))))))))) n352a@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3528@t))) (n2eb6@syntax-dispatch n3528@t '(_ (any any) ((#(scheme-id set!) any any) any))))) n3522@t))) (n2eb6@syntax-dispatch n3522@t '(_ any)))) n3520@stx))) (set! n2e92@do-macro (lambda (n3540@stx) ((lambda (n3543@bind) (begin (set! n3543@bind (lambda (n355a@x) ((lambda (n355c@t) ((lambda (n355e@ls/false) (if n355e@ls/false (apply (lambda (n3560@x n3561@init) (list n3560@x n3561@init n3560@x)) n355e@ls/false) ((lambda (n3564@t) ((lambda (n3566@ls/false) (if n3566@ls/false (apply (lambda (n3568@x n3569@init n356a@step) (list n3568@x n3569@init n356a@step)) n3566@ls/false) ((lambda (n356e@t) ((lambda (n3570@ls/false) (if n3570@ls/false (apply (lambda () (n2f9f@syntax-violation '#f '"invalid binding" n3540@stx)) n3570@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n356e@t))) (n2eb6@syntax-dispatch n356e@t '_))) n3564@t))) (n2eb6@syntax-dispatch n3564@t '(any any any)))) n355c@t))) (n2eb6@syntax-dispatch n355c@t '(any any)))) n355a@x))) ((lambda (n3544@t) ((lambda (n3546@ls/false) (if n3546@ls/false (apply (lambda (n3548@binding* n3549@test n354a@expr* n354b@command*) ((lambda (n3550@t) ((lambda (n3552@ls/false) (if n3552@ls/false (apply (lambda (n3554@x* n3555@init* n3556@step*) (if (n2cb5@valid-bound-ids? n3554@x*) (n2e6c@bless (list 'letrec (list (list 'loop (list 'lambda n3554@x* (list 'if n3549@test (cons 'begin (cons '(if #f #f) n354a@expr*)) (cons 'begin (append n354b@command* (list (cons 'loop n3556@step*)))))))) (cons 'loop n3555@init*))) (n2f9f@syntax-violation '#f '"invalid bindings" n3540@stx))) n3552@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3550@t))) (n2eb6@syntax-dispatch n3550@t '#(each (any any any))))) (map n3543@bind n3548@binding*))) n3546@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3544@t))) (n2eb6@syntax-dispatch n3544@t '(_ each-any (any . each-any) . each-any)))) n3540@stx))) '#f))) (set! n2e94@let*-macro (lambda (n3572@stx) ((lambda (n3574@t) ((lambda (n3576@ls/false) (if (and n3576@ls/false (apply (lambda (n3578@lhs* n3579@rhs* n357a@b n357b@b*) (for-all n2cab@id? n3578@lhs*)) n3576@ls/false)) (apply (lambda (n3580@lhs* n3581@rhs* n3582@b n3583@b*) (n2e6c@bless ((letrec ((n3588@f (lambda (n358a@x*) (if (null? n358a@x*) (cons 'let (cons '() (cons n3582@b n3583@b*))) (list 'let (list (car n358a@x*)) (n3588@f (cdr n358a@x*))))))) n3588@f) (map list n3580@lhs* n3581@rhs*)))) n3576@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3574@t))) (n2eb6@syntax-dispatch n3574@t '(_ #(each (any any)) any . each-any)))) n3572@stx))) (set! n2e96@or-macro (lambda (n358c@stx) ((lambda (n358e@t) ((lambda (n3590@ls/false) (if n3590@ls/false (apply (lambda () '#f) n3590@ls/false) ((lambda (n3592@t) ((lambda (n3594@ls/false) (if n3594@ls/false (apply (lambda (n3596@e n3597@e*) (n2e6c@bless ((letrec ((n359a@f (lambda (n359c@e n359d@e*) (if (null? n359d@e*) (list 'begin '#f n359c@e) (list 'let (list (list 't n359c@e)) (list 'if 't 't (n359a@f (car n359d@e*) (cdr n359d@e*)))))))) n359a@f) n3596@e n3597@e*))) n3594@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3592@t))) (n2eb6@syntax-dispatch n3592@t '(_ any . each-any)))) n358e@t))) (n2eb6@syntax-dispatch n358e@t '(_)))) n358c@stx))) (set! n2e98@and-macro (lambda (n35a0@stx) ((lambda (n35a2@t) ((lambda (n35a4@ls/false) (if n35a4@ls/false (apply (lambda () '#t) n35a4@ls/false) ((lambda (n35a6@t) ((lambda (n35a8@ls/false) (if n35a8@ls/false (apply (lambda (n35aa@e n35ab@e*) (n2e6c@bless ((letrec ((n35ae@f (lambda (n35b0@e n35b1@e*) (if (null? n35b1@e*) (list 'begin '#f n35b0@e) (cons 'if (cons n35b0@e (cons (n35ae@f (car n35b1@e*) (cdr n35b1@e*)) '(#f)))))))) n35ae@f) n35aa@e n35ab@e*))) n35a8@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n35a6@t))) (n2eb6@syntax-dispatch n35a6@t '(_ any . each-any)))) n35a2@t))) (n2eb6@syntax-dispatch n35a2@t '(_)))) n35a0@stx))) (set! n2e9a@cond-macro (lambda (n35b4@stx) ((lambda (n35b6@t) ((lambda (n35b8@ls/false) (if n35b8@ls/false (apply (lambda (n35ba@cls n35bb@cls*) (n2e6c@bless ((letrec ((n35be@f (lambda (n35c0@cls n35c1@cls*) (if (null? n35c1@cls*) ((lambda (n35c4@t) ((lambda (n35c6@ls/false) (if n35c6@ls/false (apply (lambda (n35c8@e n35c9@e*) (cons 'begin (cons n35c8@e n35c9@e*))) n35c6@ls/false) ((lambda (n35cc@t) ((lambda (n35ce@ls/false) (if n35ce@ls/false (apply (lambda (n35d0@e n35d1@p) (list 'let (list (list 't n35d0@e)) (list 'if 't (cons n35d1@p '(t))))) n35ce@ls/false) ((lambda (n35d4@t) ((lambda (n35d6@ls/false) (if n35d6@ls/false (apply (lambda (n35d8@e) (cons 'or (cons n35d8@e '((if #f #f))))) n35d6@ls/false) ((lambda (n35da@t) ((lambda (n35dc@ls/false) (if n35dc@ls/false (apply (lambda (n35de@e n35df@e*) (list 'if n35de@e (cons 'begin n35df@e*))) n35dc@ls/false) ((lambda (n35e2@t) ((lambda (n35e4@ls/false) (if n35e4@ls/false (apply (lambda () (n2f9f@syntax-violation '#f '"invalid last clause" n35b4@stx)) n35e4@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n35e2@t))) (n2eb6@syntax-dispatch n35e2@t '_))) n35da@t))) (n2eb6@syntax-dispatch n35da@t '(any . each-any)))) n35d4@t))) (n2eb6@syntax-dispatch n35d4@t '(any)))) n35cc@t))) (n2eb6@syntax-dispatch n35cc@t '(any #(scheme-id =>) any)))) n35c4@t))) (n2eb6@syntax-dispatch n35c4@t '(#(scheme-id else) any . each-any)))) n35c0@cls) ((lambda (n35e6@t) ((lambda (n35e8@ls/false) (if n35e8@ls/false (apply (lambda (n35ea@e n35eb@e*) (n2f9f@syntax-violation '#f '"incorrect position of keyword else" n35b4@stx)) n35e8@ls/false) ((lambda (n35ee@t) ((lambda (n35f0@ls/false) (if n35f0@ls/false (apply (lambda (n35f2@e n35f3@p) (list 'let (list (list 't n35f2@e)) (list 'if 't (cons n35f3@p '(t)) (n35be@f (car n35c1@cls*) (cdr n35c1@cls*))))) n35f0@ls/false) ((lambda (n35f6@t) ((lambda (n35f8@ls/false) (if n35f8@ls/false (apply (lambda (n35fa@e) (list 'or n35fa@e (n35be@f (car n35c1@cls*) (cdr n35c1@cls*)))) n35f8@ls/false) ((lambda (n35fc@t) ((lambda (n35fe@ls/false) (if n35fe@ls/false (apply (lambda (n3600@e n3601@e*) (list 'if n3600@e (cons 'begin n3601@e*) (n35be@f (car n35c1@cls*) (cdr n35c1@cls*)))) n35fe@ls/false) ((lambda (n3604@t) ((lambda (n3606@ls/false) (if n3606@ls/false (apply (lambda () (n2f9f@syntax-violation '#f '"invalid last clause" n35b4@stx)) n3606@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3604@t))) (n2eb6@syntax-dispatch n3604@t '_))) n35fc@t))) (n2eb6@syntax-dispatch n35fc@t '(any . each-any)))) n35f6@t))) (n2eb6@syntax-dispatch n35f6@t '(any)))) n35ee@t))) (n2eb6@syntax-dispatch n35ee@t '(any #(scheme-id =>) any)))) n35e6@t))) (n2eb6@syntax-dispatch n35e6@t '(#(scheme-id else) any . each-any)))) n35c0@cls))))) n35be@f) n35ba@cls n35bb@cls*))) n35b8@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n35b6@t))) (n2eb6@syntax-dispatch n35b6@t '(_ any . each-any)))) n35b4@stx))) (set! n2e9c@do-include (lambda (n3608@stx n3609@id n360a@filename) ((lambda (n360e@filename) (begin (if (not (and (string? n360e@filename) (n2cab@id? n3609@id))) (n2f9f@syntax-violation '#f '"invalid syntax" n3608@stx) (void)) (cons (n2e6c@bless 'begin) (with-input-from-file n360e@filename (lambda () ((letrec ((n3610@f (lambda (n3612@ls) ((lambda (n3614@x) (if (eof-object? n3614@x) (reverse n3612@ls) (n3610@f (cons (n2c89@datum->stx n3609@id n3614@x) n3612@ls)))) (n2848@n2765@read-annotated))))) n3610@f) '())))))) (n2cc1@stx->datum n360a@filename)))) (set! n2e9e@include-macro (lambda (n3616@e) ((lambda (n3618@t) ((lambda (n361a@ls/false) (if n361a@ls/false (apply (lambda (n361c@id n361d@filename) (n2e9c@do-include n3616@e n361c@id n361d@filename)) n361a@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3618@t))) (n2eb6@syntax-dispatch n3618@t '(any any)))) n3616@e))) (set! n2ea0@include-into-macro (lambda (n3620@e) ((lambda (n3622@t) ((lambda (n3624@ls/false) (if n3624@ls/false (apply (lambda (n3626@id n3627@filename) (n2e9c@do-include n3620@e n3626@id n3627@filename)) n3624@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3622@t))) (n2eb6@syntax-dispatch n3622@t '(_ any any)))) n3620@e))) (set! n2ea2@syntax-rules-macro (lambda (n362a@e) ((lambda (n362c@t) ((lambda (n362e@ls/false) (if n362e@ls/false (apply (lambda (n3630@lits n3631@pat* n3632@tmp*) (begin (n2ebc@verify-literals n3630@lits n362a@e) (n2e6c@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons n3630@lits (map (lambda (n3636@pat n3637@tmp) ((lambda (n363a@t) ((lambda (n363c@ls/false) (if n363c@ls/false (apply (lambda (n363e@rest) (list (cons 'g n363e@rest) (list 'syntax n3637@tmp))) n363c@ls/false) ((lambda (n3640@t) ((lambda (n3642@ls/false) (if n3642@ls/false (apply (lambda () (n2f9f@syntax-violation '#f '"invalid syntax-rules pattern" n362a@e n3636@pat)) n3642@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3640@t))) (n2eb6@syntax-dispatch n3640@t '_))) n363a@t))) (n2eb6@syntax-dispatch n363a@t '(_ . any)))) n3636@pat)) n3631@pat* n3632@tmp*)))))))) n362e@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n362c@t))) (n2eb6@syntax-dispatch n362c@t '(_ each-any . #(each (any any)))))) n362a@e))) (set! n2ea4@quasiquote-macro ((lambda () ((lambda (n3645@datum n3661@quasicons* n3663@quasicons n3665@quasiappend n3667@quasivector n3669@vquasi n366b@quasi) (begin (set! n3645@datum (lambda (n3746@x) (list (n2e40@scheme-stx 'quote) (n2c93@mkstx n3746@x '() '() '())))) (set! n3661@quasicons* (lambda (n373e@x n373f@y) ((letrec ((n3742@f (lambda (n3744@x) (if (null? n3744@x) n373f@y (n3663@quasicons (car n3744@x) (n3742@f (cdr n3744@x))))))) n3742@f) n373e@x))) (set! n3663@quasicons (lambda (n3718@x n3719@y) ((lambda (n371c@t) ((lambda (n371e@ls/false) (if n371e@ls/false (apply (lambda (n3720@dy) ((lambda (n3722@t) ((lambda (n3724@ls/false) (if n3724@ls/false (apply (lambda (n3726@dx) (list (n2e40@scheme-stx 'quote) (cons n3726@dx n3720@dy))) n3724@ls/false) ((lambda (n3728@t) ((lambda (n372a@ls/false) (if n372a@ls/false (apply (lambda () ((lambda (n372c@t) ((lambda (n372e@ls/false) (if n372e@ls/false (apply (lambda () (list (n2e40@scheme-stx 'list) n3718@x)) n372e@ls/false) ((lambda (n3730@t) ((lambda (n3732@ls/false) (if n3732@ls/false (apply (lambda () (list (n2e40@scheme-stx 'cons) n3718@x n3719@y)) n3732@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3730@t))) (n2eb6@syntax-dispatch n3730@t '_))) n372c@t))) (n2eb6@syntax-dispatch n372c@t '()))) n3720@dy)) n372a@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3728@t))) (n2eb6@syntax-dispatch n3728@t '_))) n3722@t))) (n2eb6@syntax-dispatch n3722@t '(#(scheme-id quote) any)))) n3718@x)) n371e@ls/false) ((lambda (n3734@t) ((lambda (n3736@ls/false) (if n3736@ls/false (apply (lambda (n3738@stuff) (cons* (n2e40@scheme-stx 'list) n3718@x n3738@stuff)) n3736@ls/false) ((lambda (n373a@t) ((lambda (n373c@ls/false) (if n373c@ls/false (apply (lambda () (list (n2e40@scheme-stx 'cons) n3718@x n3719@y)) n373c@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n373a@t))) (n2eb6@syntax-dispatch n373a@t '_))) n3734@t))) (n2eb6@syntax-dispatch n3734@t '(#(scheme-id list) . each-any)))) n371c@t))) (n2eb6@syntax-dispatch n371c@t '(#(scheme-id quote) any)))) n3719@y))) (set! n3665@quasiappend (lambda (n36fe@x n36ff@y) ((lambda (n3702@ls) (if (null? n3702@ls) (list (n2e40@scheme-stx 'quote) '()) (if (null? (cdr n3702@ls)) (car n3702@ls) (cons* (n2e40@scheme-stx 'append) n3702@ls)))) ((letrec ((n3704@f (lambda (n3706@x) (if (null? n3706@x) ((lambda (n3708@t) ((lambda (n370a@ls/false) (if n370a@ls/false (apply (lambda () '()) n370a@ls/false) ((lambda (n370c@t) ((lambda (n370e@ls/false) (if n370e@ls/false (apply (lambda () (list n36ff@y)) n370e@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n370c@t))) (n2eb6@syntax-dispatch n370c@t '_))) n3708@t))) (n2eb6@syntax-dispatch n3708@t '(#(scheme-id quote) ())))) n36ff@y) ((lambda (n3710@t) ((lambda (n3712@ls/false) (if n3712@ls/false (apply (lambda () (n3704@f (cdr n3706@x))) n3712@ls/false) ((lambda (n3714@t) ((lambda (n3716@ls/false) (if n3716@ls/false (apply (lambda () (cons (car n3706@x) (n3704@f (cdr n3706@x)))) n3716@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3714@t))) (n2eb6@syntax-dispatch n3714@t '_))) n3710@t))) (n2eb6@syntax-dispatch n3710@t '(#(scheme-id quote) ())))) (car n3706@x)))))) n3704@f) n36fe@x)))) (set! n3667@quasivector (lambda (n36cc@x) ((lambda (n36ce@pat-x) ((lambda (n36d0@t) ((lambda (n36d2@ls/false) (if n36d2@ls/false (apply (lambda (n36d4@x*) (list (n2e40@scheme-stx 'quote) (list->vector n36d4@x*))) n36d2@ls/false) ((lambda (n36d6@t) ((lambda (n36d8@ls/false) (if n36d8@ls/false (apply (lambda () ((letrec ((n36da@f (lambda (n36dc@x n36dd@k) ((lambda (n36e0@t) ((lambda (n36e2@ls/false) (if n36e2@ls/false (apply (lambda (n36e4@x*) (n36dd@k (map (lambda (n36e6@x) (list (n2e40@scheme-stx 'quote) n36e6@x)) n36e4@x*))) n36e2@ls/false) ((lambda (n36e8@t) ((lambda (n36ea@ls/false) (if n36ea@ls/false (apply (lambda (n36ec@x*) (n36dd@k n36ec@x*)) n36ea@ls/false) ((lambda (n36ee@t) ((lambda (n36f0@ls/false) (if n36f0@ls/false (apply (lambda (n36f2@x n36f3@y) (n36da@f n36f3@y (lambda (n36f6@ls) (n36dd@k (cons n36f2@x n36f6@ls))))) n36f0@ls/false) ((lambda (n36f8@t) ((lambda (n36fa@ls/false) (if n36fa@ls/false (apply (lambda () (list (n2e40@scheme-stx 'list->vector) n36ce@pat-x)) n36fa@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n36f8@t))) (n2eb6@syntax-dispatch n36f8@t '_))) n36ee@t))) (n2eb6@syntax-dispatch n36ee@t '(#(scheme-id cons) any any)))) n36e8@t))) (n2eb6@syntax-dispatch n36e8@t '(#(scheme-id list) . each-any)))) n36e0@t))) (n2eb6@syntax-dispatch n36e0@t '(#(scheme-id quote) each-any)))) n36dc@x)))) n36da@f) n36cc@x (lambda (n36fc@ls) (cons* (n2e40@scheme-stx 'vector) n36fc@ls)))) n36d8@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n36d6@t))) (n2eb6@syntax-dispatch n36d6@t '_))) n36d0@t))) (n2eb6@syntax-dispatch n36d0@t '(#(scheme-id quote) each-any)))) n36ce@pat-x)) n36cc@x))) (set! n3669@vquasi (lambda (n36aa@p n36ab@lev) ((lambda (n36ae@t) ((lambda (n36b0@ls/false) (if n36b0@ls/false (apply (lambda (n36b2@p n36b3@q) ((lambda (n36b6@t) ((lambda (n36b8@ls/false) (if n36b8@ls/false (apply (lambda (n36ba@p) (if (= n36ab@lev '0) (n3661@quasicons* n36ba@p (n3669@vquasi n36b3@q n36ab@lev)) (n3663@quasicons (n3663@quasicons (n3645@datum 'unquote) (n366b@quasi n36ba@p (- n36ab@lev '1))) (n3669@vquasi n36b3@q n36ab@lev)))) n36b8@ls/false) ((lambda (n36bc@t) ((lambda (n36be@ls/false) (if n36be@ls/false (apply (lambda (n36c0@p) (if (= n36ab@lev '0) (n3665@quasiappend n36c0@p (n3669@vquasi n36b3@q n36ab@lev)) (n3663@quasicons (n3663@quasicons (n3645@datum 'unquote-splicing) (n366b@quasi n36c0@p (- n36ab@lev '1))) (n3669@vquasi n36b3@q n36ab@lev)))) n36be@ls/false) ((lambda (n36c2@t) ((lambda (n36c4@ls/false) (if n36c4@ls/false (apply (lambda (n36c6@p) (n3663@quasicons (n366b@quasi n36c6@p n36ab@lev) (n3669@vquasi n36b3@q n36ab@lev))) n36c4@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n36c2@t))) (n2eb6@syntax-dispatch n36c2@t 'any))) n36bc@t))) (n2eb6@syntax-dispatch n36bc@t '(#(scheme-id unquote-splicing) . each-any)))) n36b6@t))) (n2eb6@syntax-dispatch n36b6@t '(#(scheme-id unquote) . each-any)))) n36b2@p)) n36b0@ls/false) ((lambda (n36c8@t) ((lambda (n36ca@ls/false) (if n36ca@ls/false (apply (lambda () (list (n2e40@scheme-stx 'quote) '())) n36ca@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n36c8@t))) (n2eb6@syntax-dispatch n36c8@t '()))) n36ae@t))) (n2eb6@syntax-dispatch n36ae@t '(any . any)))) n36aa@p))) (set! n366b@quasi (lambda (n3674@p n3675@lev) ((lambda (n3678@t) ((lambda (n367a@ls/false) (if n367a@ls/false (apply (lambda (n367c@p) (if (= n3675@lev '0) n367c@p (n3663@quasicons (n3645@datum 'unquote) (n366b@quasi (list n367c@p) (- n3675@lev '1))))) n367a@ls/false) ((lambda (n367e@t) ((lambda (n3680@ls/false) (if n3680@ls/false (apply (lambda (n3682@p n3683@q) (if (= n3675@lev '0) (n3661@quasicons* n3682@p (n366b@quasi n3683@q n3675@lev)) (n3663@quasicons (n3663@quasicons (n3645@datum 'unquote) (n366b@quasi n3682@p (- n3675@lev '1))) (n366b@quasi n3683@q n3675@lev)))) n3680@ls/false) ((lambda (n3686@t) ((lambda (n3688@ls/false) (if n3688@ls/false (apply (lambda (n368a@p n368b@q) (if (= n3675@lev '0) (n3665@quasiappend n368a@p (n366b@quasi n368b@q n3675@lev)) (n3663@quasicons (n3663@quasicons (n3645@datum 'unquote-splicing) (n366b@quasi n368a@p (- n3675@lev '1))) (n366b@quasi n368b@q n3675@lev)))) n3688@ls/false) ((lambda (n368e@t) ((lambda (n3690@ls/false) (if n3690@ls/false (apply (lambda (n3692@p) (n3663@quasicons (n3645@datum 'quasiquote) (n366b@quasi (list n3692@p) (+ n3675@lev '1)))) n3690@ls/false) ((lambda (n3694@t) ((lambda (n3696@ls/false) (if n3696@ls/false (apply (lambda (n3698@p n3699@q) (n3663@quasicons (n366b@quasi n3698@p n3675@lev) (n366b@quasi n3699@q n3675@lev))) n3696@ls/false) ((lambda (n369c@t) ((lambda (n369e@ls/false) (if (and n369e@ls/false (apply (lambda (n36a0@x) (not (n2c73@stx? n36a0@x))) n369e@ls/false)) (apply (lambda (n36a2@x) (n3667@quasivector (n3669@vquasi n36a2@x n3675@lev))) n369e@ls/false) ((lambda (n36a4@t) ((lambda (n36a6@ls/false) (if n36a6@ls/false (apply (lambda (n36a8@p) (list (n2e40@scheme-stx 'quote) n36a8@p)) n36a6@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n36a4@t))) (n2eb6@syntax-dispatch n36a4@t 'any))) n369c@t))) (n2eb6@syntax-dispatch n369c@t '#(vector each-any)))) n3694@t))) (n2eb6@syntax-dispatch n3694@t '(any . any)))) n368e@t))) (n2eb6@syntax-dispatch n368e@t '(#(scheme-id quasiquote) any)))) n3686@t))) (n2eb6@syntax-dispatch n3686@t '((#(scheme-id unquote-splicing) . each-any) . any)))) n367e@t))) (n2eb6@syntax-dispatch n367e@t '((#(scheme-id unquote) . each-any) . any)))) n3678@t))) (n2eb6@syntax-dispatch n3678@t '(#(scheme-id unquote) any)))) n3674@p))) (lambda (n366c@x) ((lambda (n366e@t) ((lambda (n3670@ls/false) (if n3670@ls/false (apply (lambda (n3672@e) (n366b@quasi n3672@e '0)) n3670@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n366e@t))) (n2eb6@syntax-dispatch n366e@t '(_ any)))) n366c@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! n2ea6@quasisyntax-macro ((lambda () ((lambda (n3749@quasi) (begin (set! n3749@quasi (lambda (n3764@p n3765@lev) ((lambda (n3768@t) ((lambda (n376a@ls/false) (if n376a@ls/false (apply (lambda (n376c@p) (if (= n3765@lev '0) ((lambda (n376e@g) (values (list n376e@g) (list n376c@p) n376e@g)) (gensym)) (call-with-values (lambda () (n3749@quasi n376c@p (- n3765@lev '1))) (lambda (n3776@n3771 n3777@n3773 n3778@n3775) ((lambda (n377c@p n377d@rhs* n377e@lhs*) (values n377e@lhs* n377d@rhs* (list 'unsyntax n377c@p))) n3778@n3775 n3777@n3773 n3776@n3771))))) n376a@ls/false) ((lambda (n3782@t) ((lambda (n3784@ls/false) (if (and n3784@ls/false (apply (lambda () (= n3765@lev '0)) n3784@ls/false)) (apply (lambda () (n2f9f@syntax-violation '#f '"incorrect use of unsyntax" n3764@p)) n3784@ls/false) ((lambda (n3786@t) ((lambda (n3788@ls/false) (if n3788@ls/false (apply (lambda (n378a@p* n378b@q) (call-with-values (lambda () (n3749@quasi n378b@q n3765@lev)) (lambda (n3794@n378f n3795@n3791 n3796@n3793) ((lambda (n379a@q n379b@rhs* n379c@lhs*) (if (= n3765@lev '0) ((lambda (n37a0@g*) (values (append n37a0@g* n379c@lhs*) (append n378a@p* n379b@rhs*) (append n37a0@g* n379a@q))) (map (lambda (n37a2@x) (gensym)) n378a@p*)) (call-with-values (lambda () (n3749@quasi n378a@p* (- n3765@lev '1))) (lambda (n37aa@n37a5 n37ab@n37a7 n37ac@n37a9) ((lambda (n37b0@p* n37b1@rhs2* n37b2@lhs2*) (values (append n37b2@lhs2* n379c@lhs*) (append n37b1@rhs2* n379b@rhs*) (cons (cons 'unsyntax n37b0@p*) n379a@q))) n37ac@n37a9 n37ab@n37a7 n37aa@n37a5))))) n3796@n3793 n3795@n3791 n3794@n378f)))) n3788@ls/false) ((lambda (n37b6@t) ((lambda (n37b8@ls/false) (if n37b8@ls/false (apply (lambda (n37ba@p* n37bb@q) (call-with-values (lambda () (n3749@quasi n37bb@q n3765@lev)) (lambda (n37c4@n37bf n37c5@n37c1 n37c6@n37c3) ((lambda (n37ca@q n37cb@rhs* n37cc@lhs*) (if (= n3765@lev '0) ((lambda (n37d0@g*) (values (append (map (lambda (n37d2@g) (cons n37d2@g '(...))) n37d0@g*) n37cc@lhs*) (append n37ba@p* n37cb@rhs*) (append (apply append (map (lambda (n37d4@g) (cons n37d4@g '(...))) n37d0@g*)) n37ca@q))) (map (lambda (n37d6@x) (gensym)) n37ba@p*)) (call-with-values (lambda () (n3749@quasi n37ba@p* (- n3765@lev '1))) (lambda (n37de@n37d9 n37df@n37db n37e0@n37dd) ((lambda (n37e4@p* n37e5@rhs2* n37e6@lhs2*) (values (append n37e6@lhs2* n37cc@lhs*) (append n37e5@rhs2* n37cb@rhs*) (cons (cons 'unsyntax-splicing n37e4@p*) n37ca@q))) n37e0@n37dd n37df@n37db n37de@n37d9))))) n37c6@n37c3 n37c5@n37c1 n37c4@n37bf)))) n37b8@ls/false) ((lambda (n37ea@t) ((lambda (n37ec@ls/false) (if (and n37ec@ls/false (apply (lambda () (= n3765@lev '0)) n37ec@ls/false)) (apply (lambda () (n2f9f@syntax-violation '#f '"incorrect use of unsyntax-splicing" n3764@p)) n37ec@ls/false) ((lambda (n37ee@t) ((lambda (n37f0@ls/false) (if n37f0@ls/false (apply (lambda (n37f2@p) (call-with-values (lambda () (n3749@quasi n37f2@p (+ n3765@lev '1))) (lambda (n37fa@n37f5 n37fb@n37f7 n37fc@n37f9) ((lambda (n3800@p n3801@rhs* n3802@lhs*) (values n3802@lhs* n3801@rhs* (list 'quasisyntax n3800@p))) n37fc@n37f9 n37fb@n37f7 n37fa@n37f5)))) n37f0@ls/false) ((lambda (n3806@t) ((lambda (n3808@ls/false) (if n3808@ls/false (apply (lambda (n380a@p n380b@q) (call-with-values (lambda () (n3749@quasi n380a@p n3765@lev)) (lambda (n381a@n380f n381b@n3811 n381c@n3813) (call-with-values (lambda () (n3749@quasi n380b@q n3765@lev)) (lambda (n3820@n3815 n3821@n3817 n3822@n3819) ((lambda (n3826@q n3827@rhs2* n3828@lhs2* n3829@p n382a@rhs* n382b@lhs*) (values (append n3828@lhs2* n382b@lhs*) (append n3827@rhs2* n382a@rhs*) (cons n3829@p n3826@q))) n3822@n3819 n3821@n3817 n3820@n3815 n381c@n3813 n381b@n3811 n381a@n380f)))))) n3808@ls/false) ((lambda (n3832@t) ((lambda (n3834@ls/false) (if n3834@ls/false (apply (lambda (n3836@x*) (call-with-values (lambda () (n3749@quasi n3836@x* n3765@lev)) (lambda (n383e@n3839 n383f@n383b n3840@n383d) ((lambda (n3844@x* n3845@rhs* n3846@lhs*) (values n3846@lhs* n3845@rhs* (list->vector n3844@x*))) n3840@n383d n383f@n383b n383e@n3839)))) n3834@ls/false) ((lambda (n384a@t) ((lambda (n384c@ls/false) (if n384c@ls/false (apply (lambda () (values '() '() n3764@p)) n384c@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n384a@t))) (n2eb6@syntax-dispatch n384a@t '_))) n3832@t))) (n2eb6@syntax-dispatch n3832@t '#(vector each-any)))) n3806@t))) (n2eb6@syntax-dispatch n3806@t '(any . any)))) n37ee@t))) (n2eb6@syntax-dispatch n37ee@t '(#(scheme-id quasisyntax) any)))) n37ea@t))) (n2eb6@syntax-dispatch n37ea@t '#(scheme-id unsyntax-splicing)))) n37b6@t))) (n2eb6@syntax-dispatch n37b6@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) n3786@t))) (n2eb6@syntax-dispatch n3786@t '((#(scheme-id unsyntax) . each-any) . any)))) n3782@t))) (n2eb6@syntax-dispatch n3782@t '#(scheme-id unsyntax)))) n3768@t))) (n2eb6@syntax-dispatch n3768@t '(#(scheme-id unsyntax) any)))) n3764@p))) (lambda (n374a@x) ((lambda (n374c@t) ((lambda (n374e@ls/false) (if n374e@ls/false (apply (lambda (n3750@e) (call-with-values (lambda () (n3749@quasi n3750@e '0)) (lambda (n3758@n3753 n3759@n3755 n375a@n3757) ((lambda (n375e@v n375f@rhs* n3760@lhs*) (n2e6c@bless (list 'syntax-case (cons 'list n375f@rhs*) '() (list n3760@lhs* (list 'syntax n375e@v))))) n375a@n3757 n3759@n3755 n3758@n3753)))) n374e@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n374c@t))) (n2eb6@syntax-dispatch n374c@t '(_ any)))) n374a@x)))) '#f)))) (set! n2ea8@define-struct-macro (lambda (n384e@stx) (n2f9f@syntax-violation '#f '"define-struct not supported" n384e@stx))) (set! n2eaa@define-record-type-macro (lambda (n3850@x) ((lambda (n3853@id n3855@get-record-name n3857@get-record-constructor-name n3859@get-record-predicate-name n385b@get-clause n385d@foo-rtd-code n385f@parent-rtd-code n3861@parent-rcd-code n3863@foo-rcd-code n3865@get-protocol-code n3867@get-fields n3869@get-mutator-indices n386b@get-mutators n386d@get-accessors n386f@enumerate n3871@do-define-record n3873@verify-clauses) (begin (set! n3853@id (lambda (n3a46@ctxt . n3a48@str*) (n2fa3@datum->syntax n3a46@ctxt (string->symbol (apply string-append (map (lambda (n3a4a@x) (if (symbol? n3a4a@x) (symbol->string n3a4a@x) (if (string? n3a4a@x) n3a4a@x (assertion-violation 'define-record-type '"BUG")))) n3a48@str*)))))) (set! n3855@get-record-name (lambda (n3a34@spec) ((lambda (n3a36@t) ((lambda (n3a38@ls/false) (if n3a38@ls/false (apply (lambda (n3a3a@foo n3a3b@make-foo n3a3c@foo?) n3a3a@foo) n3a38@ls/false) ((lambda (n3a40@t) ((lambda (n3a42@ls/false) (if n3a42@ls/false (apply (lambda (n3a44@foo) n3a44@foo) n3a42@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3a40@t))) (n2eb6@syntax-dispatch n3a40@t 'any))) n3a36@t))) (n2eb6@syntax-dispatch n3a36@t '(any any any)))) n3a34@spec))) (set! n3857@get-record-constructor-name (lambda (n3a20@spec) ((lambda (n3a22@t) ((lambda (n3a24@ls/false) (if n3a24@ls/false (apply (lambda (n3a26@foo n3a27@make-foo n3a28@foo?) n3a27@make-foo) n3a24@ls/false) ((lambda (n3a2c@t) ((lambda (n3a2e@ls/false) (if (and n3a2e@ls/false (apply (lambda (n3a30@foo) (n2cab@id? n3a30@foo)) n3a2e@ls/false)) (apply (lambda (n3a32@foo) (n3853@id n3a32@foo '"make-" (n2cc1@stx->datum n3a32@foo))) n3a2e@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3a2c@t))) (n2eb6@syntax-dispatch n3a2c@t 'any))) n3a22@t))) (n2eb6@syntax-dispatch n3a22@t '(any any any)))) n3a20@spec))) (set! n3859@get-record-predicate-name (lambda (n3a0c@spec) ((lambda (n3a0e@t) ((lambda (n3a10@ls/false) (if n3a10@ls/false (apply (lambda (n3a12@foo n3a13@make-foo n3a14@foo?) n3a14@foo?) n3a10@ls/false) ((lambda (n3a18@t) ((lambda (n3a1a@ls/false) (if (and n3a1a@ls/false (apply (lambda (n3a1c@foo) (n2cab@id? n3a1c@foo)) n3a1a@ls/false)) (apply (lambda (n3a1e@foo) (n3853@id n3a1e@foo (n2cc1@stx->datum n3a1e@foo) '"?")) n3a1a@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3a18@t))) (n2eb6@syntax-dispatch n3a18@t 'any))) n3a0e@t))) (n2eb6@syntax-dispatch n3a0e@t '(any any any)))) n3a0c@spec))) (set! n385b@get-clause (lambda (n39fa@id n39fb@ls) ((lambda (n39fe@t) ((lambda (n3a00@ls/false) (if n3a00@ls/false (apply (lambda () '#f) n3a00@ls/false) ((lambda (n3a02@t) ((lambda (n3a04@ls/false) (if n3a04@ls/false (apply (lambda (n3a06@x n3a07@rest n3a08@ls) (if (n2cb3@free-id=? (n2e6c@bless n39fa@id) n3a06@x) (cons n3a06@x n3a07@rest) (n385b@get-clause n39fa@id n3a08@ls))) n3a04@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3a02@t))) (n2eb6@syntax-dispatch n3a02@t '((any . any) . any)))) n39fe@t))) (n2eb6@syntax-dispatch n39fe@t '()))) n39fb@ls))) (set! n385d@foo-rtd-code (lambda (n39a8@name n39a9@clause* n39aa@parent-rtd-code) ((lambda (n39af@convert-field-spec*) (begin (set! n39af@convert-field-spec* (lambda (n39e0@ls) (list->vector (map (lambda (n39e2@x) ((lambda (n39e4@t) ((lambda (n39e6@ls/false) (if n39e6@ls/false (apply (lambda (n39e8@name n39e9@rest) (list 'mutable n39e8@name)) n39e6@ls/false) ((lambda (n39ec@t) ((lambda (n39ee@ls/false) (if n39ee@ls/false (apply (lambda (n39f0@name n39f1@rest) (list 'immutable n39f0@name)) n39ee@ls/false) ((lambda (n39f4@t) ((lambda (n39f6@ls/false) (if n39f6@ls/false (apply (lambda (n39f8@name) (list 'immutable n39f8@name)) n39f6@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n39f4@t))) (n2eb6@syntax-dispatch n39f4@t 'any))) n39ec@t))) (n2eb6@syntax-dispatch n39ec@t '(#(scheme-id immutable) any . any)))) n39e4@t))) (n2eb6@syntax-dispatch n39e4@t '(#(scheme-id mutable) any . any)))) n39e2@x)) n39e0@ls)))) ((lambda (n39b0@uid-code n39b1@sealed? n39b2@opaque? n39b3@fields) (n2e6c@bless (list 'make-record-type-descriptor (list 'quote n39a8@name) n39aa@parent-rtd-code n39b0@uid-code n39b1@sealed? n39b2@opaque? n39b3@fields))) ((lambda (n39b8@t) ((lambda (n39ba@ls/false) (if n39ba@ls/false (apply (lambda () (list 'quote (gensym))) n39ba@ls/false) ((lambda (n39bc@t) ((lambda (n39be@ls/false) (if n39be@ls/false (apply (lambda (n39c0@uid) (list 'quote n39c0@uid)) n39be@ls/false) ((lambda (n39c2@t) ((lambda (n39c4@ls/false) (if n39c4@ls/false (apply (lambda () '#f) n39c4@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n39c2@t))) (n2eb6@syntax-dispatch n39c2@t '_))) n39bc@t))) (n2eb6@syntax-dispatch n39bc@t '(_ any)))) n39b8@t))) (n2eb6@syntax-dispatch n39b8@t '(_)))) (n385b@get-clause 'nongenerative n39a9@clause*)) ((lambda (n39c6@t) ((lambda (n39c8@ls/false) (if n39c8@ls/false (apply (lambda () '#t) n39c8@ls/false) ((lambda (n39ca@t) ((lambda (n39cc@ls/false) (if n39cc@ls/false (apply (lambda () '#f) n39cc@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n39ca@t))) (n2eb6@syntax-dispatch n39ca@t '_))) n39c6@t))) (n2eb6@syntax-dispatch n39c6@t '(_ #(atom #t))))) (n385b@get-clause 'sealed n39a9@clause*)) ((lambda (n39ce@t) ((lambda (n39d0@ls/false) (if n39d0@ls/false (apply (lambda () '#t) n39d0@ls/false) ((lambda (n39d2@t) ((lambda (n39d4@ls/false) (if n39d4@ls/false (apply (lambda () '#f) n39d4@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n39d2@t))) (n2eb6@syntax-dispatch n39d2@t '_))) n39ce@t))) (n2eb6@syntax-dispatch n39ce@t '(_ #(atom #t))))) (n385b@get-clause 'opaque n39a9@clause*)) ((lambda (n39d6@t) ((lambda (n39d8@ls/false) (if n39d8@ls/false (apply (lambda (n39da@field-spec*) (list 'quote (n39af@convert-field-spec* n39da@field-spec*))) n39d8@ls/false) ((lambda (n39dc@t) ((lambda (n39de@ls/false) (if n39de@ls/false (apply (lambda () ''#()) n39de@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n39dc@t))) (n2eb6@syntax-dispatch n39dc@t '_))) n39d6@t))) (n2eb6@syntax-dispatch n39d6@t '(_ . each-any)))) (n385b@get-clause 'fields n39a9@clause*))))) '#f))) (set! n385f@parent-rtd-code (lambda (n3990@clause*) ((lambda (n3992@t) ((lambda (n3994@ls/false) (if n3994@ls/false (apply (lambda (n3996@name) (list 'record-type-descriptor n3996@name)) n3994@ls/false) ((lambda (n3998@t) ((lambda (n399a@ls/false) (if n399a@ls/false (apply (lambda () ((lambda (n399c@t) ((lambda (n399e@ls/false) (if n399e@ls/false (apply (lambda (n39a0@rtd n39a1@rcd) n39a0@rtd) n399e@ls/false) ((lambda (n39a4@t) ((lambda (n39a6@ls/false) (if n39a6@ls/false (apply (lambda () '#f) n39a6@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n39a4@t))) (n2eb6@syntax-dispatch n39a4@t '#(atom #f)))) n399c@t))) (n2eb6@syntax-dispatch n399c@t '(_ any any)))) (n385b@get-clause 'parent-rtd n3990@clause*))) n399a@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3998@t))) (n2eb6@syntax-dispatch n3998@t '#(atom #f)))) n3992@t))) (n2eb6@syntax-dispatch n3992@t '(_ any)))) (n385b@get-clause 'parent n3990@clause*)))) (set! n3861@parent-rcd-code (lambda (n3978@clause*) ((lambda (n397a@t) ((lambda (n397c@ls/false) (if n397c@ls/false (apply (lambda (n397e@name) (list 'record-constructor-descriptor n397e@name)) n397c@ls/false) ((lambda (n3980@t) ((lambda (n3982@ls/false) (if n3982@ls/false (apply (lambda () ((lambda (n3984@t) ((lambda (n3986@ls/false) (if n3986@ls/false (apply (lambda (n3988@rtd n3989@rcd) n3989@rcd) n3986@ls/false) ((lambda (n398c@t) ((lambda (n398e@ls/false) (if n398e@ls/false (apply (lambda () '#f) n398e@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n398c@t))) (n2eb6@syntax-dispatch n398c@t '#(atom #f)))) n3984@t))) (n2eb6@syntax-dispatch n3984@t '(_ any any)))) (n385b@get-clause 'parent-rtd n3978@clause*))) n3982@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3980@t))) (n2eb6@syntax-dispatch n3980@t '#(atom #f)))) n397a@t))) (n2eb6@syntax-dispatch n397a@t '(_ any)))) (n385b@get-clause 'parent n3978@clause*)))) (set! n3863@foo-rcd-code (lambda (n3970@clause* n3971@foo-rtd n3972@protocol n3973@parent-rcd-code) (list 'make-record-constructor-descriptor n3971@foo-rtd n3973@parent-rcd-code n3972@protocol))) (set! n3865@get-protocol-code (lambda (n3964@clause*) ((lambda (n3966@t) ((lambda (n3968@ls/false) (if n3968@ls/false (apply (lambda (n396a@expr) n396a@expr) n3968@ls/false) ((lambda (n396c@t) ((lambda (n396e@ls/false) (if n396e@ls/false (apply (lambda () '#f) n396e@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n396c@t))) (n2eb6@syntax-dispatch n396c@t '_))) n3966@t))) (n2eb6@syntax-dispatch n3966@t '(_ any)))) (n385b@get-clause 'protocol n3964@clause*)))) (set! n3867@get-fields (lambda (n3952@clause*) ((lambda (n3954@t) ((lambda (n3956@ls/false) (if n3956@ls/false (apply (lambda () '()) n3956@ls/false) ((lambda (n3958@t) ((lambda (n395a@ls/false) (if n395a@ls/false (apply (lambda (n395c@f*) n395c@f*) n395a@ls/false) ((lambda (n395e@t) ((lambda (n3960@ls/false) (if n3960@ls/false (apply (lambda (n3962@rest) (n3867@get-fields n3962@rest)) n3960@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n395e@t))) (n2eb6@syntax-dispatch n395e@t '(_ . any)))) n3958@t))) (n2eb6@syntax-dispatch n3958@t '((#(scheme-id fields) . each-any) . _)))) n3954@t))) (n2eb6@syntax-dispatch n3954@t '()))) n3952@clause*))) (set! n3869@get-mutator-indices (lambda (n393a@fields) ((letrec ((n393c@f (lambda (n393e@fields n393f@i) ((lambda (n3942@t) ((lambda (n3944@ls/false) (if n3944@ls/false (apply (lambda () '()) n3944@ls/false) ((lambda (n3946@t) ((lambda (n3948@ls/false) (if n3948@ls/false (apply (lambda (n394a@rest) (cons n393f@i (n393c@f n394a@rest (+ n393f@i '1)))) n3948@ls/false) ((lambda (n394c@t) ((lambda (n394e@ls/false) (if n394e@ls/false (apply (lambda (n3950@rest) (n393c@f n3950@rest (+ n393f@i '1))) n394e@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n394c@t))) (n2eb6@syntax-dispatch n394c@t '(_ . any)))) n3946@t))) (n2eb6@syntax-dispatch n3946@t '((#(scheme-id mutable) . _) . any)))) n3942@t))) (n2eb6@syntax-dispatch n3942@t '()))) n393e@fields)))) n393c@f) n393a@fields '0))) (set! n386b@get-mutators (lambda (n3910@foo n3911@fields) ((lambda (n3915@gen-name) (begin (set! n3915@gen-name (lambda (n3938@x) (n2fa3@datum->syntax n3910@foo (string->symbol (string-append (symbol->string (n2fa5@syntax->datum n3910@foo)) '"-" (symbol->string (n2fa5@syntax->datum n3938@x)) '"-set!"))))) ((letrec ((n3916@f (lambda (n3918@fields) ((lambda (n391a@t) ((lambda (n391c@ls/false) (if n391c@ls/false (apply (lambda () '()) n391c@ls/false) ((lambda (n391e@t) ((lambda (n3920@ls/false) (if n3920@ls/false (apply (lambda (n3922@name n3923@accessor n3924@mutator n3925@rest) (cons n3924@mutator (n3916@f n3925@rest))) n3920@ls/false) ((lambda (n392a@t) ((lambda (n392c@ls/false) (if n392c@ls/false (apply (lambda (n392e@name n392f@rest) (cons (n3915@gen-name n392e@name) (n3916@f n392f@rest))) n392c@ls/false) ((lambda (n3932@t) ((lambda (n3934@ls/false) (if n3934@ls/false (apply (lambda (n3936@rest) (n3916@f n3936@rest)) n3934@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3932@t))) (n2eb6@syntax-dispatch n3932@t '(_ . any)))) n392a@t))) (n2eb6@syntax-dispatch n392a@t '((#(scheme-id mutable) any) . any)))) n391e@t))) (n2eb6@syntax-dispatch n391e@t '((#(scheme-id mutable) any any any) . any)))) n391a@t))) (n2eb6@syntax-dispatch n391a@t '()))) n3918@fields)))) n3916@f) n3911@fields))) '#f))) (set! n386d@get-accessors (lambda (n38cc@foo n38cd@fields) ((lambda (n38d1@gen-name) (begin (set! n38d1@gen-name (lambda (n390e@x) (n2fa3@datum->syntax n38cc@foo (string->symbol (string-append (symbol->string (n2fa5@syntax->datum n38cc@foo)) '"-" (symbol->string (n2fa5@syntax->datum n390e@x))))))) (map (lambda (n38d2@field) ((lambda (n38d4@t) ((lambda (n38d6@ls/false) (if (and n38d6@ls/false (apply (lambda (n38d8@name n38d9@accessor n38da@mutator) (n2cab@id? n38d9@accessor)) n38d6@ls/false)) (apply (lambda (n38de@name n38df@accessor n38e0@mutator) n38df@accessor) n38d6@ls/false) ((lambda (n38e4@t) ((lambda (n38e6@ls/false) (if (and n38e6@ls/false (apply (lambda (n38e8@name n38e9@accessor) (n2cab@id? n38e9@accessor)) n38e6@ls/false)) (apply (lambda (n38ec@name n38ed@accessor) n38ed@accessor) n38e6@ls/false) ((lambda (n38f0@t) ((lambda (n38f2@ls/false) (if (and n38f2@ls/false (apply (lambda (n38f4@name) (n2cab@id? n38f4@name)) n38f2@ls/false)) (apply (lambda (n38f6@name) (n38d1@gen-name n38f6@name)) n38f2@ls/false) ((lambda (n38f8@t) ((lambda (n38fa@ls/false) (if (and n38fa@ls/false (apply (lambda (n38fc@name) (n2cab@id? n38fc@name)) n38fa@ls/false)) (apply (lambda (n38fe@name) (n38d1@gen-name n38fe@name)) n38fa@ls/false) ((lambda (n3900@t) ((lambda (n3902@ls/false) (if (and n3902@ls/false (apply (lambda (n3904@name) (n2cab@id? n3904@name)) n3902@ls/false)) (apply (lambda (n3906@name) (n38d1@gen-name n3906@name)) n3902@ls/false) ((lambda (n3908@t) ((lambda (n390a@ls/false) (if n390a@ls/false (apply (lambda (n390c@others) (n2f9f@syntax-violation '#f '"invalid field spec" n38d2@field)) n390a@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3908@t))) (n2eb6@syntax-dispatch n3908@t 'any))) n3900@t))) (n2eb6@syntax-dispatch n3900@t 'any))) n38f8@t))) (n2eb6@syntax-dispatch n38f8@t '(#(scheme-id immutable) any)))) n38f0@t))) (n2eb6@syntax-dispatch n38f0@t '(#(scheme-id mutable) any)))) n38e4@t))) (n2eb6@syntax-dispatch n38e4@t '(#(scheme-id immutable) any any)))) n38d4@t))) (n2eb6@syntax-dispatch n38d4@t '(#(scheme-id mutable) any any any)))) n38d2@field)) n38cd@fields))) '#f))) (set! n386f@enumerate (lambda (n38c4@ls) ((letrec ((n38c6@f (lambda (n38c8@ls n38c9@i) (if (null? n38c8@ls) '() (cons n38c9@i (n38c6@f (cdr n38c8@ls) (+ n38c9@i '1))))))) n38c6@f) n38c4@ls '0))) (set! n3871@do-define-record (lambda (n389c@namespec n389d@clause*) ((lambda (n38a0@foo) ((lambda (n38a2@foo-rtd) ((lambda (n38a4@foo-rcd) ((lambda (n38a6@protocol) ((lambda (n38a8@make-foo) ((lambda (n38aa@fields) ((lambda (n38ac@idx*) ((lambda (n38ae@foo-x*) ((lambda (n38b0@set-foo-x!*) ((lambda (n38b2@set-foo-idx*) ((lambda (n38b4@foo?) ((lambda (n38b6@foo-rtd-code) ((lambda (n38b8@foo-rcd-code) ((lambda (n38ba@protocol-code) ((lambda () (n2e6c@bless (cons 'begin (cons (list 'define n38a2@foo-rtd n38b6@foo-rtd-code) (cons (list 'define n38a6@protocol n38ba@protocol-code) (cons (list 'define n38a4@foo-rcd n38b8@foo-rcd-code) (cons (list 'define-syntax n38a0@foo (list 'list ''$rtd (list 'syntax n38a2@foo-rtd) (list 'syntax n38a4@foo-rcd))) (cons (list 'define n38b4@foo? (list 'record-predicate n38a2@foo-rtd)) (cons (list 'define n38a8@make-foo (list 'record-constructor n38a4@foo-rcd)) (append (map (lambda (n38bc@foo-x n38bd@idx) (list 'define n38bc@foo-x (list 'record-accessor n38a2@foo-rtd n38bd@idx))) n38ae@foo-x* n38ac@idx*) (map (lambda (n38c0@set-foo-x! n38c1@idx) (list 'define n38c0@set-foo-x! (list 'record-mutator n38a2@foo-rtd n38c1@idx))) n38b0@set-foo-x!* n38b2@set-foo-idx*))))))))))))) (n3865@get-protocol-code n389d@clause*))) (n3863@foo-rcd-code n389d@clause* n38a2@foo-rtd n38a6@protocol (n3861@parent-rcd-code n389d@clause*)))) (n385d@foo-rtd-code n38a0@foo n389d@clause* (n385f@parent-rtd-code n389d@clause*)))) (n3859@get-record-predicate-name n389c@namespec))) (n3869@get-mutator-indices n38aa@fields))) (n386b@get-mutators n38a0@foo n38aa@fields))) (n386d@get-accessors n38a0@foo n38aa@fields))) (n386f@enumerate n38aa@fields))) (n3867@get-fields n389d@clause*))) (n3857@get-record-constructor-name n389c@namespec))) (gensym))) (gensym))) (gensym))) (n3855@get-record-name n389c@namespec)))) (set! n3873@verify-clauses (lambda (n387c@x n387d@cls*) ((lambda (n3881@valid-kwds n3883@free-id-member?) (begin (set! n3881@valid-kwds (map n2e6c@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! n3883@free-id-member? (lambda (n3898@x n3899@ls) (and (pair? n3899@ls) (or (n2cb3@free-id=? n3898@x (car n3899@ls)) (n3883@free-id-member? n3898@x (cdr n3899@ls)))))) ((letrec ((n3884@f (lambda (n3886@cls* n3887@seen*) (if (not (null? n3886@cls*)) ((lambda (n388a@t) ((lambda (n388c@ls/false) (if n388c@ls/false (apply (lambda (n388e@kwd n388f@rest) (if (or (not (n2cab@id? n388e@kwd)) (not (n3883@free-id-member? n388e@kwd n3881@valid-kwds))) (n2f9f@syntax-violation '#f '"not a valid define-record-type keyword" n388e@kwd) (if (n2cb9@bound-id-member? n388e@kwd n3887@seen*) (n2f9f@syntax-violation '#f '"duplicate use of keyword " n387c@x n388e@kwd) (n3884@f (cdr n3886@cls*) (cons n388e@kwd n3887@seen*))))) n388c@ls/false) ((lambda (n3892@t) ((lambda (n3894@ls/false) (if n3894@ls/false (apply (lambda (n3896@cls) (n2f9f@syntax-violation '#f '"malformed define-record-type clause" n3896@cls)) n3894@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3892@t))) (n2eb6@syntax-dispatch n3892@t 'any))) n388a@t))) (n2eb6@syntax-dispatch n388a@t '(any . any)))) (car n3886@cls*)) (void))))) n3884@f) n387d@cls* '()))) '#f '#f))) ((lambda (n3874@t) ((lambda (n3876@ls/false) (if n3876@ls/false (apply (lambda (n3878@namespec n3879@clause*) (begin (n3873@verify-clauses n3850@x n3879@clause*) (n3871@do-define-record n3878@namespec n3879@clause*))) n3876@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3874@t))) (n2eb6@syntax-dispatch n3874@t '(_ any . each-any)))) n3850@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! n2eac@define-condition-type-macro (lambda (n3a4c@x) ((lambda (n3a4f@mkname) (begin (set! n3a4f@mkname (lambda (n3a7c@name n3a7d@suffix) (n2fa3@datum->syntax n3a7c@name (string->symbol (string-append (symbol->string (n2fa5@syntax->datum n3a7c@name)) n3a7d@suffix))))) ((lambda (n3a50@t) ((lambda (n3a52@ls/false) (if (and n3a52@ls/false (apply (lambda (n3a54@ctxt n3a55@name n3a56@super n3a57@constructor n3a58@predicate n3a59@field* n3a5a@accessor*) (and (n2cab@id? n3a55@name) (n2cab@id? n3a56@super) (n2cab@id? n3a57@constructor) (n2cab@id? n3a58@predicate) (for-all n2cab@id? n3a59@field*) (for-all n2cab@id? n3a5a@accessor*))) n3a52@ls/false)) (apply (lambda (n3a62@ctxt n3a63@name n3a64@super n3a65@constructor n3a66@predicate n3a67@field* n3a68@accessor*) ((lambda (n3a70@aux-accessor*) (n2e6c@bless (cons 'begin (cons (cons 'define-record-type (cons (list n3a63@name n3a65@constructor (gensym)) (cons (list 'parent n3a64@super) (cons (cons 'fields (map (lambda (n3a72@field n3a73@aux) (list 'immutable n3a72@field n3a73@aux)) n3a67@field* n3a70@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define n3a66@predicate (list 'condition-predicate (list 'record-type-descriptor n3a63@name))) (map (lambda (n3a76@accessor n3a77@aux) (list 'define n3a76@accessor (list 'condition-accessor (list 'record-type-descriptor n3a63@name) n3a77@aux))) n3a68@accessor* n3a70@aux-accessor*)))))) (map (lambda (n3a7a@x) (gensym)) n3a68@accessor*))) n3a52@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3a50@t))) (n2eb6@syntax-dispatch n3a50@t '(any any any any any . #(each (any any)))))) n3a4c@x))) '#f))) (set! n2eae@incorrect-usage-macro (lambda (n3a80@e) (n2f9f@syntax-violation '#f '"incorrect usage of auxiliary keyword" n3a80@e))) (set! n2eb0@parameterize-macro (lambda (n3a82@e) ((lambda (n3a84@t) ((lambda (n3a86@ls/false) (if n3a86@ls/false (apply (lambda (n3a88@b n3a89@b*) (n2e6c@bless (cons 'let (cons '() (cons n3a88@b n3a89@b*))))) n3a86@ls/false) ((lambda (n3a8c@t) ((lambda (n3a8e@ls/false) (if n3a8e@ls/false (apply (lambda (n3a90@olhs* n3a91@orhs* n3a92@b n3a93@b*) ((lambda (n3a98@lhs* n3a99@rhs*) (n2e6c@bless (cons (list 'lambda (append n3a98@lhs* n3a99@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (n3a9c@lhs n3a9d@rhs) (list 'let (list (list 't (list n3a9c@lhs))) (list n3a9c@lhs n3a9d@rhs) (cons 'set! (cons n3a9d@rhs '(t))))) n3a98@lhs* n3a99@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons n3a92@b n3a93@b*))) '(swap)))))) (append n3a90@olhs* n3a91@orhs*)))) (n2f8d@generate-temporaries n3a90@olhs*) (n2f8d@generate-temporaries n3a91@orhs*))) n3a8e@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3a8c@t))) (n2eb6@syntax-dispatch n3a8c@t '(_ #(each (any any)) any . each-any)))) n3a84@t))) (n2eb6@syntax-dispatch n3a84@t '(_ () any . each-any)))) n3a82@e))) (set! n2eb2@foreign-call-transformer (lambda (n3aa0@e n3aa1@r n3aa2@mr) ((lambda (n3aa6@t) ((lambda (n3aa8@ls/false) (if n3aa8@ls/false (apply (lambda (n3aaa@name n3aab@arg*) (cons 'foreign-call (cons (n2ed8@chi-expr n3aaa@name n3aa1@r n3aa2@mr) (n2ed4@chi-expr* n3aab@arg* n3aa1@r n3aa2@mr)))) n3aa8@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3aa6@t))) (n2eb6@syntax-dispatch n3aa6@t '(_ any . each-any)))) n3aa0@e))) (set! n2eb4@convert-pattern (lambda (n3aae@pattern n3aaf@keys) ((lambda (n3ab3@cvt* n3ab5@cvt) (begin (set! n3ab3@cvt* (lambda (n3b52@p* n3b53@n n3b54@ids) (if (null? n3b52@p*) (values '() n3b54@ids) (call-with-values (lambda () (n3ab3@cvt* (cdr n3b52@p*) n3b53@n n3b54@ids)) (lambda (n3b5c@n3b59 n3b5d@n3b5b) ((lambda (n3b60@ids n3b61@y) (call-with-values (lambda () (n3ab5@cvt (car n3b52@p*) n3b53@n n3b60@ids)) (lambda (n3b68@n3b65 n3b69@n3b67) ((lambda (n3b6c@ids n3b6d@x) (values (cons n3b6d@x n3b61@y) n3b6c@ids)) n3b69@n3b67 n3b68@n3b65)))) n3b5d@n3b5b n3b5c@n3b59)))))) (set! n3ab5@cvt (lambda (n3ab6@p n3ab7@n n3ab8@ids) ((lambda (n3abc@t) ((lambda (n3abe@ls/false) (if (and n3abe@ls/false (apply (lambda (n3ac0@id) (n2cab@id? n3ac0@id)) n3abe@ls/false)) (apply (lambda (n3ac2@id) (if (n2cb9@bound-id-member? n3ab6@p n3aaf@keys) (values (vector 'free-id n3ab6@p) n3ab8@ids) (if (n2cb3@free-id=? n3ab6@p (n2e40@scheme-stx '_)) (values '_ n3ab8@ids) (values 'any (cons (cons n3ab6@p n3ab7@n) n3ab8@ids))))) n3abe@ls/false) ((lambda (n3ac4@t) ((lambda (n3ac6@ls/false) (if (and n3ac6@ls/false (apply (lambda (n3ac8@p n3ac9@dots) (n2eb8@ellipsis? n3ac9@dots)) n3ac6@ls/false)) (apply (lambda (n3acc@p n3acd@dots) (call-with-values (lambda () (n3ab5@cvt n3acc@p (+ n3ab7@n '1) n3ab8@ids)) (lambda (n3ad4@n3ad1 n3ad5@n3ad3) ((lambda (n3ad8@ids n3ad9@p) (values (if (eq? n3ad9@p 'any) 'each-any (vector 'each n3ad9@p)) n3ad8@ids)) n3ad5@n3ad3 n3ad4@n3ad1)))) n3ac6@ls/false) ((lambda (n3adc@t) ((lambda (n3ade@ls/false) (if (and n3ade@ls/false (apply (lambda (n3ae0@x n3ae1@dots n3ae2@ys n3ae3@z) (n2eb8@ellipsis? n3ae1@dots)) n3ade@ls/false)) (apply (lambda (n3ae8@x n3ae9@dots n3aea@ys n3aeb@z) (call-with-values (lambda () (n3ab5@cvt n3aeb@z n3ab7@n n3ab8@ids)) (lambda (n3af4@n3af1 n3af5@n3af3) ((lambda (n3af8@ids n3af9@z) (call-with-values (lambda () (n3ab3@cvt* n3aea@ys n3ab7@n n3af8@ids)) (lambda (n3b00@n3afd n3b01@n3aff) ((lambda (n3b04@ids n3b05@ys) (call-with-values (lambda () (n3ab5@cvt n3ae8@x (+ n3ab7@n '1) n3b04@ids)) (lambda (n3b0c@n3b09 n3b0d@n3b0b) ((lambda (n3b10@ids n3b11@x) (values (vector 'each+ n3b11@x (reverse n3b05@ys) n3af9@z) n3b10@ids)) n3b0d@n3b0b n3b0c@n3b09)))) n3b01@n3aff n3b00@n3afd)))) n3af5@n3af3 n3af4@n3af1)))) n3ade@ls/false) ((lambda (n3b14@t) ((lambda (n3b16@ls/false) (if n3b16@ls/false (apply (lambda (n3b18@x n3b19@y) (call-with-values (lambda () (n3ab5@cvt n3b19@y n3ab7@n n3ab8@ids)) (lambda (n3b20@n3b1d n3b21@n3b1f) ((lambda (n3b24@ids n3b25@y) (call-with-values (lambda () (n3ab5@cvt n3b18@x n3ab7@n n3b24@ids)) (lambda (n3b2c@n3b29 n3b2d@n3b2b) ((lambda (n3b30@ids n3b31@x) (values (cons n3b31@x n3b25@y) n3b30@ids)) n3b2d@n3b2b n3b2c@n3b29)))) n3b21@n3b1f n3b20@n3b1d)))) n3b16@ls/false) ((lambda (n3b34@t) ((lambda (n3b36@ls/false) (if n3b36@ls/false (apply (lambda () (values '() n3ab8@ids)) n3b36@ls/false) ((lambda (n3b38@t) ((lambda (n3b3a@ls/false) (if (and n3b3a@ls/false (apply (lambda (n3b3c@p) (not (n2c73@stx? n3b3c@p))) n3b3a@ls/false)) (apply (lambda (n3b3e@p) (call-with-values (lambda () (n3ab5@cvt n3b3e@p n3ab7@n n3ab8@ids)) (lambda (n3b44@n3b41 n3b45@n3b43) ((lambda (n3b48@ids n3b49@p) (values (vector 'vector n3b49@p) n3b48@ids)) n3b45@n3b43 n3b44@n3b41)))) n3b3a@ls/false) ((lambda (n3b4c@t) ((lambda (n3b4e@ls/false) (if n3b4e@ls/false (apply (lambda (n3b50@datum) (values (vector 'atom (n2cc1@stx->datum n3b50@datum)) n3ab8@ids)) n3b4e@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3b4c@t))) (n2eb6@syntax-dispatch n3b4c@t 'any))) n3b38@t))) (n2eb6@syntax-dispatch n3b38@t '#(vector each-any)))) n3b34@t))) (n2eb6@syntax-dispatch n3b34@t '()))) n3b14@t))) (n2eb6@syntax-dispatch n3b14@t '(any . any)))) n3adc@t))) (n2eb6@syntax-dispatch n3adc@t '(any any . #(each+ any () any))))) n3ac4@t))) (n2eb6@syntax-dispatch n3ac4@t '(any any)))) n3abc@t))) (n2eb6@syntax-dispatch n3abc@t 'any))) n3ab6@p))) (n3ab5@cvt n3aae@pattern '0 '()))) '#f '#f))) (set! n2eb6@syntax-dispatch ((lambda () ((lambda (n3b71@stx^ n3b73@match-each n3b75@match-each+ n3b77@match-each-any n3b79@match-empty n3b7b@combine n3b7d@match* n3b7f@match) (begin (set! n3b71@stx^ (lambda (n3c4c@e n3c4d@m* n3c4e@s* n3c4f@ae*) (if (and (null? n3c4d@m*) (null? n3c4e@s*) (null? n3c4f@ae*)) n3c4c@e (n2c93@mkstx n3c4c@e n3c4d@m* n3c4e@s* n3c4f@ae*)))) (set! n3b73@match-each (lambda (n3c2c@e n3c2d@p n3c2e@m* n3c2f@s* n3c30@ae*) (if (pair? n3c2c@e) ((lambda (n3c36@first) (and n3c36@first ((lambda (n3c38@rest) (and n3c38@rest (cons n3c36@first n3c38@rest))) (n3b73@match-each (cdr n3c2c@e) n3c2d@p n3c2e@m* n3c2f@s* n3c30@ae*)))) (n3b7f@match (car n3c2c@e) n3c2d@p n3c2e@m* n3c2f@s* n3c30@ae* '())) (if (null? n3c2c@e) '() (if (n2c73@stx? n3c2c@e) (and (not (n2c29@top-marked? n3c2e@m*)) (call-with-values (lambda () (n2c91@join-wraps n3c2e@m* n3c2f@s* n3c30@ae* n3c2c@e)) (lambda (n3c40@n3c3b n3c41@n3c3d n3c42@n3c3f) ((lambda (n3c46@ae* n3c47@s* n3c48@m*) (n3b73@match-each (n2c77@stx-expr n3c2c@e) n3c2d@p n3c48@m* n3c47@s* n3c46@ae*)) n3c42@n3c3f n3c41@n3c3d n3c40@n3c3b)))) (if (n284a@n2769@annotation? n3c2c@e) (n3b73@match-each (n284c@n276d@annotation-expression n3c2c@e) n3c2d@p n3c2e@m* n3c2f@s* n3c30@ae*) '#f)))))) (set! n3b75@match-each+ (lambda (n3bec@e n3bed@x-pat n3bee@y-pat n3bef@z-pat n3bf0@m* n3bf1@s* n3bf2@ae* n3bf3@r) ((letrec ((n3bfc@f (lambda (n3bfe@e n3bff@m* n3c00@s* n3c01@ae*) (if (pair? n3bfe@e) (call-with-values (lambda () (n3bfc@f (cdr n3bfe@e) n3bff@m* n3c00@s* n3c01@ae*)) (lambda (n3c0c@n3c07 n3c0d@n3c09 n3c0e@n3c0b) ((lambda (n3c12@r n3c13@y-pat n3c14@xr*) (if n3c12@r (if (null? n3c13@y-pat) ((lambda (n3c18@xr) (if n3c18@xr (values (cons n3c18@xr n3c14@xr*) n3c13@y-pat n3c12@r) (values '#f '#f '#f))) (n3b7f@match (car n3bfe@e) n3bed@x-pat n3bff@m* n3c00@s* n3c01@ae* '())) (values '() (cdr n3c13@y-pat) (n3b7f@match (car n3bfe@e) (car n3c13@y-pat) n3bff@m* n3c00@s* n3c01@ae* n3c12@r))) (values '#f '#f '#f))) n3c0e@n3c0b n3c0d@n3c09 n3c0c@n3c07))) (if (n2c73@stx? n3bfe@e) (if (n2c29@top-marked? n3bff@m*) (values '() n3bee@y-pat (n3b7f@match n3bfe@e n3bef@z-pat n3bff@m* n3c00@s* n3c01@ae* n3bf3@r)) (call-with-values (lambda () (n2c91@join-wraps n3bff@m* n3c00@s* n3c01@ae* n3bfe@e)) (lambda (n3c20@n3c1b n3c21@n3c1d n3c22@n3c1f) ((lambda (n3c26@ae* n3c27@s* n3c28@m*) (n3bfc@f (n2c77@stx-expr n3bfe@e) n3c28@m* n3c27@s* n3c26@ae*)) n3c22@n3c1f n3c21@n3c1d n3c20@n3c1b)))) (if (n284a@n2769@annotation? n3bfe@e) (n3bfc@f (n284c@n276d@annotation-expression n3bfe@e) n3bff@m* n3c00@s* n3c01@ae*) (values '() n3bee@y-pat (n3b7f@match n3bfe@e n3bef@z-pat n3bff@m* n3c00@s* n3c01@ae* n3bf3@r)))))))) n3bfc@f) n3bec@e n3bf0@m* n3bf1@s* n3bf2@ae*))) (set! n3b77@match-each-any (lambda (n3bd0@e n3bd1@m* n3bd2@s* n3bd3@ae*) (if (pair? n3bd0@e) ((lambda (n3bd8@l) (and n3bd8@l (cons (n3b71@stx^ (car n3bd0@e) n3bd1@m* n3bd2@s* n3bd3@ae*) n3bd8@l))) (n3b77@match-each-any (cdr n3bd0@e) n3bd1@m* n3bd2@s* n3bd3@ae*)) (if (null? n3bd0@e) '() (if (n2c73@stx? n3bd0@e) (and (not (n2c29@top-marked? n3bd1@m*)) (call-with-values (lambda () (n2c91@join-wraps n3bd1@m* n3bd2@s* n3bd3@ae* n3bd0@e)) (lambda (n3be0@n3bdb n3be1@n3bdd n3be2@n3bdf) ((lambda (n3be6@ae* n3be7@s* n3be8@m*) (n3b77@match-each-any (n2c77@stx-expr n3bd0@e) n3be8@m* n3be7@s* n3be6@ae*)) n3be2@n3bdf n3be1@n3bdd n3be0@n3bdb)))) (if (n284a@n2769@annotation? n3bd0@e) (n3b77@match-each-any (n284c@n276d@annotation-expression n3bd0@e) n3bd1@m* n3bd2@s* n3bd3@ae*) '#f)))))) (set! n3b79@match-empty (lambda (n3bca@p n3bcb@r) (if (null? n3bca@p) n3bcb@r (if (eq? n3bca@p '_) n3bcb@r (if (eq? n3bca@p 'any) (cons '() n3bcb@r) (if (pair? n3bca@p) (n3b79@match-empty (car n3bca@p) (n3b79@match-empty (cdr n3bca@p) n3bcb@r)) (if (eq? n3bca@p 'each-any) (cons '() n3bcb@r) ((lambda (n3bce@t) (if (memv n3bce@t '(each)) (n3b79@match-empty (vector-ref n3bca@p '1) n3bcb@r) (if (memv n3bce@t '(each+)) (n3b79@match-empty (vector-ref n3bca@p '1) (n3b79@match-empty (reverse (vector-ref n3bca@p '2)) (n3b79@match-empty (vector-ref n3bca@p '3) n3bcb@r))) (if (memv n3bce@t '(free-id atom)) n3bcb@r (if (memv n3bce@t '(scheme-id atom)) n3bcb@r (if (memv n3bce@t '(vector)) (n3b79@match-empty (vector-ref n3bca@p '1) n3bcb@r) (assertion-violation 'syntax-dispatch '"invalid pattern" n3bca@p))))))) (vector-ref n3bca@p '0))))))))) (set! n3b7b@combine (lambda (n3bc6@r* n3bc7@r) (if (null? (car n3bc6@r*)) n3bc7@r (cons (map car n3bc6@r*) (n3b7b@combine (map cdr n3bc6@r*) n3bc7@r))))) (set! n3b7d@match* (lambda (n3ba2@e n3ba3@p n3ba4@m* n3ba5@s* n3ba6@ae* n3ba7@r) (if (null? n3ba3@p) (and (null? n3ba2@e) n3ba7@r) (if (pair? n3ba3@p) (and (pair? n3ba2@e) (n3b7f@match (car n3ba2@e) (car n3ba3@p) n3ba4@m* n3ba5@s* n3ba6@ae* (n3b7f@match (cdr n3ba2@e) (cdr n3ba3@p) n3ba4@m* n3ba5@s* n3ba6@ae* n3ba7@r))) (if (eq? n3ba3@p 'each-any) ((lambda (n3bae@l) (and n3bae@l (cons n3bae@l n3ba7@r))) (n3b77@match-each-any n3ba2@e n3ba4@m* n3ba5@s* n3ba6@ae*)) ((lambda (n3bb0@t) (if (memv n3bb0@t '(each)) (if (null? n3ba2@e) (n3b79@match-empty (vector-ref n3ba3@p '1) n3ba7@r) ((lambda (n3bb2@r*) (and n3bb2@r* (n3b7b@combine n3bb2@r* n3ba7@r))) (n3b73@match-each n3ba2@e (vector-ref n3ba3@p '1) n3ba4@m* n3ba5@s* n3ba6@ae*))) (if (memv n3bb0@t '(free-id)) (and (symbol? n3ba2@e) (n2c29@top-marked? n3ba4@m*) (n2cb3@free-id=? (n3b71@stx^ n3ba2@e n3ba4@m* n3ba5@s* n3ba6@ae*) (vector-ref n3ba3@p '1)) n3ba7@r) (if (memv n3bb0@t '(scheme-id)) (and (symbol? n3ba2@e) (n2c29@top-marked? n3ba4@m*) (n2cb3@free-id=? (n3b71@stx^ n3ba2@e n3ba4@m* n3ba5@s* n3ba6@ae*) (n2e40@scheme-stx (vector-ref n3ba3@p '1))) n3ba7@r) (if (memv n3bb0@t '(each+)) (call-with-values (lambda () (n3b75@match-each+ n3ba2@e (vector-ref n3ba3@p '1) (vector-ref n3ba3@p '2) (vector-ref n3ba3@p '3) n3ba4@m* n3ba5@s* n3ba6@ae* n3ba7@r)) (lambda (n3bba@n3bb5 n3bbb@n3bb7 n3bbc@n3bb9) ((lambda (n3bc0@r n3bc1@y-pat n3bc2@xr*) (and n3bc0@r (null? n3bc1@y-pat) (if (null? n3bc2@xr*) (n3b79@match-empty (vector-ref n3ba3@p '1) n3bc0@r) (n3b7b@combine n3bc2@xr* n3bc0@r)))) n3bbc@n3bb9 n3bbb@n3bb7 n3bba@n3bb5))) (if (memv n3bb0@t '(atom)) (and (fast-equal? (vector-ref n3ba3@p '1) (n2cbf@strip n3ba2@e n3ba4@m*)) n3ba7@r) (if (memv n3bb0@t '(vector)) (and (vector? n3ba2@e) (n3b7f@match (vector->list n3ba2@e) (vector-ref n3ba3@p '1) n3ba4@m* n3ba5@s* n3ba6@ae* n3ba7@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" n3ba3@p)))))))) (vector-ref n3ba3@p '0))))))) (set! n3b7f@match (lambda (n3b84@e n3b85@p n3b86@m* n3b87@s* n3b88@ae* n3b89@r) (if (not n3b89@r) '#f (if (eq? n3b85@p '_) n3b89@r (if (eq? n3b85@p 'any) (cons (n3b71@stx^ n3b84@e n3b86@m* n3b87@s* n3b88@ae*) n3b89@r) (if (n2c73@stx? n3b84@e) (and (not (n2c29@top-marked? n3b86@m*)) (call-with-values (lambda () (n2c91@join-wraps n3b86@m* n3b87@s* n3b88@ae* n3b84@e)) (lambda (n3b96@n3b91 n3b97@n3b93 n3b98@n3b95) ((lambda (n3b9c@ae* n3b9d@s* n3b9e@m*) (n3b7f@match (n2c77@stx-expr n3b84@e) n3b85@p n3b9e@m* n3b9d@s* n3b9c@ae* n3b89@r)) n3b98@n3b95 n3b97@n3b93 n3b96@n3b91)))) (if (n284a@n2769@annotation? n3b84@e) (n3b7f@match (n284c@n276d@annotation-expression n3b84@e) n3b85@p n3b86@m* n3b87@s* n3b88@ae* n3b89@r) (n3b7d@match* n3b84@e n3b85@p n3b86@m* n3b87@s* n3b88@ae* n3b89@r)))))))) (lambda (n3b80@e n3b81@p) (n3b7f@match n3b80@e n3b81@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! n2eb8@ellipsis? (lambda (n3c54@x) (and (n2cab@id? n3c54@x) (n2cb3@free-id=? n3c54@x (n2e40@scheme-stx '...))))) (set! n2eba@underscore? (lambda (n3c56@x) (and (n2cab@id? n3c56@x) (n2cb3@free-id=? n3c56@x (n2e40@scheme-stx '_))))) (set! n2ebc@verify-literals (lambda (n3c58@lits n3c59@expr) (for-each (lambda (n3c5c@x) (if (or (not (n2cab@id? n3c5c@x)) (n2eb8@ellipsis? n3c5c@x) (n2eba@underscore? n3c5c@x)) (n2f9f@syntax-violation '#f '"invalid literal" n3c59@expr n3c5c@x) (void))) n3c58@lits))) (set! n2ebe@syntax-case-transformer ((lambda () ((lambda (n3c5f@build-dispatch-call n3c61@invalid-ids-error n3c63@gen-clause n3c65@gen-syntax-case) (begin (set! n3c5f@build-dispatch-call (lambda (n3cd0@pvars n3cd1@expr n3cd2@y n3cd3@r n3cd4@mr) ((lambda (n3cda@ids n3cdb@levels) ((lambda (n3cde@labels n3cdf@new-vars) ((lambda (n3ce2@body) (list '(primitive apply) (n2c07@n2b47@build-lambda '#f n3cdf@new-vars n3ce2@body) n3cd2@y)) (n2ed8@chi-expr (n2c97@add-subst (n2c66@make-full-rib n3cda@ids n3cde@labels) n3cd1@expr) (append (map (lambda (n3ce4@label n3ce5@var n3ce6@level) (cons n3ce4@label (n2ccb@make-binding 'syntax (cons n3ce5@var n3ce6@level)))) n3cde@labels n3cdf@new-vars (map cdr n3cd0@pvars)) n3cd3@r) n3cd4@mr))) (map n2c2f@gen-label n3cda@ids) (map n2c2b@gen-lexical n3cda@ids))) (map car n3cd0@pvars) (map cdr n3cd0@pvars)))) (set! n3c61@invalid-ids-error (lambda (n3cc4@id* n3cc5@e n3cc6@class) ((letrec ((n3cca@find (lambda (n3ccc@id* n3ccd@ok*) (if (null? n3ccc@id*) (n2f9f@syntax-violation '#f '"invalid syntax" n3cc5@e) (if (n2cab@id? (car n3ccc@id*)) (if (n2cb9@bound-id-member? (car n3ccc@id*) n3ccd@ok*) (n2f9b@syntax-error (car n3ccc@id*) '"duplicate " n3cc6@class) (n3cca@find (cdr n3ccc@id*) (cons (car n3ccc@id*) n3ccd@ok*))) (n2f9b@syntax-error (car n3ccc@id*) '"invalid " n3cc6@class)))))) n3cca@find) n3cc4@id* '()))) (set! n3c63@gen-clause (lambda (n3c9c@x n3c9d@keys n3c9e@clauses n3c9f@r n3ca0@mr n3ca1@pat n3ca2@fender n3ca3@expr) (call-with-values (lambda () (n2eb4@convert-pattern n3ca1@pat n3c9d@keys)) (lambda (n3cb0@n3cad n3cb1@n3caf) ((lambda (n3cb4@pvars n3cb5@p) (if (not (n2cb7@distinct-bound-ids? (map car n3cb4@pvars))) (n3c61@invalid-ids-error (map car n3cb4@pvars) n3ca1@pat '"pattern variable") (if (not (for-all (lambda (n3cb8@x) (not (n2eb8@ellipsis? (car n3cb8@x)))) n3cb4@pvars)) (n2f9f@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" n3ca1@pat) ((lambda (n3cba@y) ((lambda (n3cbc@test) ((lambda (n3cbe@conseq) ((lambda (n3cc0@altern) (list (n2c07@n2b47@build-lambda '#f (list n3cba@y) (list 'if n3cbc@test n3cbe@conseq n3cc0@altern)) (list '(primitive syntax-dispatch) n3c9c@x (list 'quote n3cb5@p)))) (n3c65@gen-syntax-case n3c9c@x n3c9d@keys n3c9e@clauses n3c9f@r n3ca0@mr))) (n3c5f@build-dispatch-call n3cb4@pvars n3ca3@expr n3cba@y n3c9f@r n3ca0@mr))) (if (eq? n3ca2@fender '#t) n3cba@y ((lambda (n3cc2@call) (list 'if n3cba@y n3cc2@call (list 'quote '#f))) (n3c5f@build-dispatch-call n3cb4@pvars n3ca2@fender n3cba@y n3c9f@r n3ca0@mr))))) (n2c2b@gen-lexical 'tmp))))) n3cb1@n3caf n3cb0@n3cad))))) (set! n3c65@gen-syntax-case (lambda (n3c7a@x n3c7b@keys n3c7c@clauses n3c7d@r n3c7e@mr) (if (null? n3c7c@clauses) (list '(primitive syntax-error) n3c7a@x) ((lambda (n3c84@t) ((lambda (n3c86@ls/false) (if n3c86@ls/false (apply (lambda (n3c88@pat n3c89@expr) (if (and (n2cab@id? n3c88@pat) (not (n2cb9@bound-id-member? n3c88@pat n3c7b@keys)) (not (n2eb8@ellipsis? n3c88@pat))) (if (n2cb3@free-id=? n3c88@pat (n2e40@scheme-stx '_)) (n2ed8@chi-expr n3c89@expr n3c7d@r n3c7e@mr) ((lambda (n3c8c@lab n3c8d@lex) ((lambda (n3c90@body) (list (n2c07@n2b47@build-lambda '#f (list n3c8d@lex) n3c90@body) n3c7a@x)) (n2ed8@chi-expr (n2c97@add-subst (n2c66@make-full-rib (list n3c88@pat) (list n3c8c@lab)) n3c89@expr) (cons (cons n3c8c@lab (n2ccb@make-binding 'syntax (cons n3c8d@lex '0))) n3c7d@r) n3c7e@mr))) (n2c2f@gen-label n3c88@pat) (n2c2b@gen-lexical n3c88@pat))) (n3c63@gen-clause n3c7a@x n3c7b@keys (cdr n3c7c@clauses) n3c7d@r n3c7e@mr n3c88@pat '#t n3c89@expr))) n3c86@ls/false) ((lambda (n3c92@t) ((lambda (n3c94@ls/false) (if n3c94@ls/false (apply (lambda (n3c96@pat n3c97@fender n3c98@expr) (n3c63@gen-clause n3c7a@x n3c7b@keys (cdr n3c7c@clauses) n3c7d@r n3c7e@mr n3c96@pat n3c97@fender n3c98@expr)) n3c94@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3c92@t))) (n2eb6@syntax-dispatch n3c92@t '(any any any)))) n3c84@t))) (n2eb6@syntax-dispatch n3c84@t '(any any)))) (car n3c7c@clauses))))) (lambda (n3c66@e n3c67@r n3c68@mr) ((lambda (n3c6c@t) ((lambda (n3c6e@ls/false) (if n3c6e@ls/false (apply (lambda (n3c70@expr n3c71@keys n3c72@clauses) (begin (n2ebc@verify-literals n3c71@keys n3c66@e) ((lambda (n3c76@x) ((lambda (n3c78@body) (list (n2c07@n2b47@build-lambda '#f (list n3c76@x) n3c78@body) (n2ed8@chi-expr n3c70@expr n3c67@r n3c68@mr))) (n3c65@gen-syntax-case n3c76@x n3c71@keys n3c72@clauses n3c67@r n3c68@mr))) (n2c2b@gen-lexical 'tmp)))) n3c6e@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3c6c@t))) (n2eb6@syntax-dispatch n3c6c@t '(_ any each-any . each-any)))) n3c66@e)))) '#f '#f '#f '#f)))) (set! n2ec0@ellipsis-map (lambda (n3cea@proc n3ceb@ls . n3cee@ls*) ((lambda (n3cf1@who) (begin (set! n3cf1@who '...) (begin (if (not (list? n3ceb@ls)) (assertion-violation n3cf1@who '"not a list" n3ceb@ls) (void)) (if (not (null? n3cee@ls*)) ((lambda (n3cf2@n) (for-each (lambda (n3cf4@x) (begin (if (not (list? n3cf4@x)) (assertion-violation n3cf1@who '"not a list" n3cf4@x) (void)) (if (not (= (length n3cf4@x) n3cf2@n)) (assertion-violation n3cf1@who '"length mismatch" n3ceb@ls n3cf4@x) (void)))) n3cee@ls*)) (length n3ceb@ls)) (void)) (apply map n3cea@proc n3ceb@ls n3cee@ls*)))) '#f))) (set! n2ec2@syntax-transformer ((lambda () ((lambda (n3cf7@gen-syntax n3cf9@gen-ref n3cfb@gen-append n3cfd@gen-mappend n3cff@gen-map n3d01@gen-cons n3d03@gen-vector n3d05@regen) (begin (set! n3cf7@gen-syntax (lambda (n3d6e@src n3d6f@e n3d70@r n3d71@maps n3d72@ellipsis? n3d73@vec?) ((lambda (n3d7a@t) ((lambda (n3d7c@ls/false) (if (and n3d7c@ls/false (apply (lambda (n3d7e@dots) (n3d72@ellipsis? n3d7e@dots)) n3d7c@ls/false)) (apply (lambda (n3d80@dots) (n2f9f@syntax-violation '#f '"misplaced ellipsis in syntax form" n3d6e@src)) n3d7c@ls/false) ((lambda (n3d82@t) ((lambda (n3d84@ls/false) (if (and n3d84@ls/false (apply (lambda (n3d86@id) (n2cab@id? n3d86@id)) n3d84@ls/false)) (apply (lambda (n3d88@id) ((lambda (n3d8a@label) ((lambda (n3d8c@b) ((lambda () (if (eq? (n2ccd@binding-type n3d8c@b) 'syntax) (call-with-values (lambda () ((lambda (n3d92@var.lev) (n3cf9@gen-ref n3d6e@src (car n3d92@var.lev) (cdr n3d92@var.lev) n3d71@maps)) (n2ccf@binding-value n3d8c@b))) (lambda (n3d94@n3d8f n3d95@n3d91) ((lambda (n3d98@maps n3d99@var) (values (list 'ref n3d99@var) n3d98@maps)) n3d95@n3d91 n3d94@n3d8f))) (values (list 'quote n3d6f@e) n3d71@maps))))) (n2cc9@label->binding n3d8a@label n3d70@r))) (n2cc5@id->label n3d6f@e))) n3d84@ls/false) ((lambda (n3d9c@t) ((lambda (n3d9e@ls/false) (if (and n3d9e@ls/false (apply (lambda (n3da0@dots n3da1@e) (n3d72@ellipsis? n3da0@dots)) n3d9e@ls/false)) (apply (lambda (n3da4@dots n3da5@e) (if n3d73@vec? (n2f9f@syntax-violation '#f '"misplaced ellipsis in syntax form" n3d6e@src) (n3cf7@gen-syntax n3d6e@src n3da5@e n3d70@r n3d71@maps (lambda (n3da8@x) '#f) '#f))) n3d9e@ls/false) ((lambda (n3daa@t) ((lambda (n3dac@ls/false) (if (and n3dac@ls/false (apply (lambda (n3dae@x n3daf@dots n3db0@y) (n3d72@ellipsis? n3daf@dots)) n3dac@ls/false)) (apply (lambda (n3db4@x n3db5@dots n3db6@y) ((letrec ((n3dba@f (lambda (n3dbc@y n3dbd@k) ((lambda (n3dc0@t) ((lambda (n3dc2@ls/false) (if n3dc2@ls/false (apply (lambda () (n3dbd@k n3d71@maps)) n3dc2@ls/false) ((lambda (n3dc4@t) ((lambda (n3dc6@ls/false) (if (and n3dc6@ls/false (apply (lambda (n3dc8@dots n3dc9@y) (n3d72@ellipsis? n3dc8@dots)) n3dc6@ls/false)) (apply (lambda (n3dcc@dots n3dcd@y) (n3dba@f n3dcd@y (lambda (n3dd0@maps) (call-with-values (lambda () (n3dbd@k (cons '() n3dd0@maps))) (lambda (n3dd6@n3dd3 n3dd7@n3dd5) ((lambda (n3dda@maps n3ddb@x) (if (null? (car n3dda@maps)) (n2f9f@syntax-violation '#f '"extra ellipsis in syntax form" n3d6e@src) (values (n3cfd@gen-mappend n3ddb@x (car n3dda@maps)) (cdr n3dda@maps)))) n3dd7@n3dd5 n3dd6@n3dd3)))))) n3dc6@ls/false) ((lambda (n3dde@t) ((lambda (n3de0@ls/false) (if n3de0@ls/false (apply (lambda () (call-with-values (lambda () (n3cf7@gen-syntax n3d6e@src n3dbc@y n3d70@r n3d71@maps n3d72@ellipsis? n3d73@vec?)) (lambda (n3de6@n3de3 n3de7@n3de5) ((lambda (n3dea@maps n3deb@y) (call-with-values (lambda () (n3dbd@k n3dea@maps)) (lambda (n3df2@n3def n3df3@n3df1) ((lambda (n3df6@maps n3df7@x) (values (n3cfb@gen-append n3df7@x n3deb@y) n3df6@maps)) n3df3@n3df1 n3df2@n3def)))) n3de7@n3de5 n3de6@n3de3)))) n3de0@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3dde@t))) (n2eb6@syntax-dispatch n3dde@t '_))) n3dc4@t))) (n2eb6@syntax-dispatch n3dc4@t '(any . any)))) n3dc0@t))) (n2eb6@syntax-dispatch n3dc0@t '()))) n3dbc@y)))) n3dba@f) n3db6@y (lambda (n3dfa@maps) (call-with-values (lambda () (n3cf7@gen-syntax n3d6e@src n3db4@x n3d70@r (cons '() n3dfa@maps) n3d72@ellipsis? '#f)) (lambda (n3e00@n3dfd n3e01@n3dff) ((lambda (n3e04@maps n3e05@x) (if (null? (car n3e04@maps)) (n2f9f@syntax-violation '#f '"extra ellipsis in syntax form" n3d6e@src) (values (n3cff@gen-map n3e05@x (car n3e04@maps)) (cdr n3e04@maps)))) n3e01@n3dff n3e00@n3dfd)))))) n3dac@ls/false) ((lambda (n3e08@t) ((lambda (n3e0a@ls/false) (if n3e0a@ls/false (apply (lambda (n3e0c@x n3e0d@y) (call-with-values (lambda () (n3cf7@gen-syntax n3d6e@src n3e0c@x n3d70@r n3d71@maps n3d72@ellipsis? '#f)) (lambda (n3e14@n3e11 n3e15@n3e13) ((lambda (n3e18@maps n3e19@xnew) (call-with-values (lambda () (n3cf7@gen-syntax n3d6e@src n3e0d@y n3d70@r n3e18@maps n3d72@ellipsis? n3d73@vec?)) (lambda (n3e20@n3e1d n3e21@n3e1f) ((lambda (n3e24@maps n3e25@ynew) (values (n3d01@gen-cons n3d6f@e n3e0c@x n3e0d@y n3e19@xnew n3e25@ynew) n3e24@maps)) n3e21@n3e1f n3e20@n3e1d)))) n3e15@n3e13 n3e14@n3e11)))) n3e0a@ls/false) ((lambda (n3e28@t) ((lambda (n3e2a@ls/false) (if n3e2a@ls/false (apply (lambda (n3e2c@ls) (call-with-values (lambda () (n3cf7@gen-syntax n3d6e@src n3e2c@ls n3d70@r n3d71@maps n3d72@ellipsis? '#t)) (lambda (n3e32@n3e2f n3e33@n3e31) ((lambda (n3e36@maps n3e37@lsnew) (values (n3d03@gen-vector n3d6f@e n3e2c@ls n3e37@lsnew) n3e36@maps)) n3e33@n3e31 n3e32@n3e2f)))) n3e2a@ls/false) ((lambda (n3e3a@t) ((lambda (n3e3c@ls/false) (if n3e3c@ls/false (apply (lambda () (values (list 'quote n3d6f@e) n3d71@maps)) n3e3c@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3e3a@t))) (n2eb6@syntax-dispatch n3e3a@t '_))) n3e28@t))) (n2eb6@syntax-dispatch n3e28@t '#(vector each-any)))) n3e08@t))) (n2eb6@syntax-dispatch n3e08@t '(any . any)))) n3daa@t))) (n2eb6@syntax-dispatch n3daa@t '(any any . any)))) n3d9c@t))) (n2eb6@syntax-dispatch n3d9c@t '(any any)))) n3d82@t))) (n2eb6@syntax-dispatch n3d82@t 'any))) n3d7a@t))) (n2eb6@syntax-dispatch n3d7a@t 'any))) n3d6f@e))) (set! n3cf9@gen-ref (lambda (n3d54@src n3d55@var n3d56@level n3d57@maps) (if (= n3d56@level '0) (values n3d55@var n3d57@maps) (if (null? n3d57@maps) (n2f9f@syntax-violation '#f '"missing ellipsis in syntax form" n3d54@src) (call-with-values (lambda () (n3cf9@gen-ref n3d54@src n3d55@var (- n3d56@level '1) (cdr n3d57@maps))) (lambda (n3d60@n3d5d n3d61@n3d5f) ((lambda (n3d64@outer-maps n3d65@outer-var) ((lambda (n3d68@t) (if n3d68@t ((lambda (n3d6a@b) (values (cdr n3d6a@b) n3d57@maps)) n3d68@t) ((lambda (n3d6c@inner-var) (values n3d6c@inner-var (cons (cons (cons n3d65@outer-var n3d6c@inner-var) (car n3d57@maps)) n3d64@outer-maps))) (n2c2b@gen-lexical 'tmp)))) (assq n3d65@outer-var (car n3d57@maps)))) n3d61@n3d5f n3d60@n3d5d))))))) (set! n3cfb@gen-append (lambda (n3d50@x n3d51@y) (if (fast-equal? n3d51@y ''()) n3d50@x (list 'append n3d50@x n3d51@y)))) (set! n3cfd@gen-mappend (lambda (n3d4c@e n3d4d@map-env) (list 'apply '(primitive append) (n3cff@gen-map n3d4c@e n3d4d@map-env)))) (set! n3cff@gen-map (lambda (n3d3a@e n3d3b@map-env) ((lambda (n3d3e@formals n3d3f@actuals) (if (eq? (car n3d3a@e) 'ref) (car n3d3f@actuals) (if (for-all (lambda (n3d42@x) (and (eq? (car n3d42@x) 'ref) (memq (cadr n3d42@x) n3d3e@formals))) (cdr n3d3a@e)) ((lambda (n3d44@args) (cons 'map (cons (list 'primitive (car n3d3a@e)) n3d44@args))) (map ((lambda (n3d46@r) (lambda (n3d48@x) (cdr (assq (cadr n3d48@x) n3d46@r)))) (map cons n3d3e@formals n3d3f@actuals)) (cdr n3d3a@e))) (cons* 'map (list 'lambda n3d3e@formals n3d3a@e) n3d3f@actuals)))) (map cdr n3d3b@map-env) (map (lambda (n3d4a@x) (list 'ref (car n3d4a@x))) n3d3b@map-env)))) (set! n3d01@gen-cons (lambda (n3d2a@e n3d2b@x n3d2c@y n3d2d@xnew n3d2e@ynew) ((lambda (n3d34@t) (if (memv n3d34@t '(quote)) (if (eq? (car n3d2d@xnew) 'quote) ((lambda (n3d36@xnew n3d37@ynew) (if (and (eq? n3d36@xnew n3d2b@x) (eq? n3d37@ynew n3d2c@y)) (list 'quote n3d2a@e) (list 'quote (cons n3d36@xnew n3d37@ynew)))) (cadr n3d2d@xnew) (cadr n3d2e@ynew)) (if (null? (cadr n3d2e@ynew)) (list 'list n3d2d@xnew) (list 'cons n3d2d@xnew n3d2e@ynew))) (if (memv n3d34@t '(list)) (cons 'list (cons n3d2d@xnew (cdr n3d2e@ynew))) (list 'cons n3d2d@xnew n3d2e@ynew)))) (car n3d2e@ynew)))) (set! n3d03@gen-vector (lambda (n3d24@e n3d25@ls n3d26@lsnew) (if (eq? (car n3d26@lsnew) 'quote) (if (eq? (cadr n3d26@lsnew) n3d25@ls) (list 'quote n3d24@e) (list 'quote (list->vector (cadr n3d26@lsnew)))) (if (eq? (car n3d26@lsnew) 'list) (cons 'vector (cdr n3d26@lsnew)) (list 'list->vector n3d26@lsnew))))) (set! n3d05@regen (lambda (n3d1e@x) ((lambda (n3d20@t) (if (memv n3d20@t '(ref)) (cadr n3d1e@x) (if (memv n3d20@t '(primitive)) (list 'primitive (cadr n3d1e@x)) (if (memv n3d20@t '(quote)) (list 'quote (cadr n3d1e@x)) (if (memv n3d20@t '(lambda)) (n2c07@n2b47@build-lambda '#f (cadr n3d1e@x) (n3d05@regen (caddr n3d1e@x))) (if (memv n3d20@t '(map)) ((lambda (n3d22@ls) (cons '(primitive ellipsis-map) n3d22@ls)) (map n3d05@regen (cdr n3d1e@x))) (cons (list 'primitive (car n3d1e@x)) (map n3d05@regen (cdr n3d1e@x))))))))) (car n3d1e@x)))) (lambda (n3d06@e n3d07@r n3d08@mr) ((lambda (n3d0c@t) ((lambda (n3d0e@ls/false) (if n3d0e@ls/false (apply (lambda (n3d10@x) (call-with-values (lambda () (n3cf7@gen-syntax n3d06@e n3d10@x n3d07@r '() n2eb8@ellipsis? '#f)) (lambda (n3d16@n3d13 n3d17@n3d15) ((lambda (n3d1a@maps n3d1b@e) (n3d05@regen n3d1b@e)) n3d17@n3d15 n3d16@n3d13)))) n3d0e@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3d0c@t))) (n2eb6@syntax-dispatch n3d0c@t '(_ any)))) n3d06@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! n2ec4@core-macro-transformer (lambda (n3e3e@name) ((lambda (n3e40@t) (if (memv n3e40@t '(quote)) n2e66@quote-transformer (if (memv n3e40@t '(lambda)) n2e6a@lambda-transformer (if (memv n3e40@t '(case-lambda)) n2e68@case-lambda-transformer (if (memv n3e40@t '(letrec)) n2e4e@letrec-transformer (if (memv n3e40@t '(letrec*)) n2e50@letrec*-transformer (if (memv n3e40@t '(if)) n2e5e@if-transformer (if (memv n3e40@t '(and)) n2e60@and-transformer (if (memv n3e40@t '(or)) n2e62@or-transformer (if (memv n3e40@t '(foreign-call)) n2eb2@foreign-call-transformer (if (memv n3e40@t '(syntax-case)) n2ebe@syntax-case-transformer (if (memv n3e40@t '(syntax)) n2ec2@syntax-transformer (if (memv n3e40@t '(type-descriptor)) n2e54@type-descriptor-transformer (if (memv n3e40@t '(record-type-descriptor)) n2e56@record-type-descriptor-transformer (if (memv n3e40@t '(record-constructor-descriptor)) n2e58@record-constructor-descriptor-transformer (if (memv n3e40@t '(fluid-let-syntax)) n2e52@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" n3e3e@name))))))))))))))))) n3e3e@name))) (set! n2ec6@symbol-macro (lambda (n3e42@x n3e43@set) ((lambda (n3e46@t) ((lambda (n3e48@ls/false) (if (and n3e48@ls/false (apply (lambda (n3e4a@name) (and (n2cab@id? n3e4a@name) (memq (n2cad@id->sym n3e4a@name) n3e43@set))) n3e48@ls/false)) (apply (lambda (n3e4c@name) (n2e6c@bless (list 'quote n3e4c@name))) n3e48@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3e46@t))) (n2eb6@syntax-dispatch n3e46@t '(_ any)))) n3e42@x))) (set! n2ec8@macro-transformer (lambda (n3e4e@x) (if (procedure? n3e4e@x) n3e4e@x (if (symbol? n3e4e@x) ((lambda (n3e50@t) (if (memv n3e50@t '(define-record-type)) n2eaa@define-record-type-macro (if (memv n3e50@t '(define-struct)) n2ea8@define-struct-macro (if (memv n3e50@t '(include)) n2e9e@include-macro (if (memv n3e50@t '(cond)) n2e9a@cond-macro (if (memv n3e50@t '(let)) n2e72@let-macro (if (memv n3e50@t '(do)) n2e92@do-macro (if (memv n3e50@t '(or)) n2e96@or-macro (if (memv n3e50@t '(and)) n2e98@and-macro (if (memv n3e50@t '(let*)) n2e94@let*-macro (if (memv n3e50@t '(let-values)) n2e74@let-values-macro (if (memv n3e50@t '(let*-values)) n2e76@let*-values-macro (if (memv n3e50@t '(syntax-rules)) n2ea2@syntax-rules-macro (if (memv n3e50@t '(quasiquote)) n2ea4@quasiquote-macro (if (memv n3e50@t '(quasisyntax)) n2ea6@quasisyntax-macro (if (memv n3e50@t '(with-syntax)) n2e6e@with-syntax-macro (if (memv n3e50@t '(when)) n2e5a@when-macro (if (memv n3e50@t '(unless)) n2e5c@unless-macro (if (memv n3e50@t '(case)) n2e64@case-macro (if (memv n3e50@t '(identifier-syntax)) n2e90@identifier-syntax-macro (if (memv n3e50@t '(time)) n2e88@time-macro (if (memv n3e50@t '(delay)) n2e8a@delay-macro (if (memv n3e50@t '(assert)) n2e8c@assert-macro (if (memv n3e50@t '(endianness)) n2e8e@endianness-macro (if (memv n3e50@t '(guard)) n2e84@guard-macro (if (memv n3e50@t '(define-enumeration)) n2e86@define-enumeration-macro (if (memv n3e50@t '(trace-lambda)) n2e78@trace-lambda-macro (if (memv n3e50@t '(trace-define)) n2e7a@trace-define-macro (if (memv n3e50@t '(trace-define-syntax)) n2e7c@trace-define-syntax-macro (if (memv n3e50@t '(trace-let-syntax)) n2e80@trace-let-syntax-macro (if (memv n3e50@t '(trace-letrec-syntax)) n2e82@trace-letrec-syntax-macro (if (memv n3e50@t '(define-condition-type)) n2eac@define-condition-type-macro (if (memv n3e50@t '(parameterize)) n2eb0@parameterize-macro (if (memv n3e50@t '(include-into)) n2ea0@include-into-macro (if (memv n3e50@t '(eol-style)) (lambda (n3e52@x) (n2ec6@symbol-macro n3e52@x '(none lf cr crlf nel crnel ls))) (if (memv n3e50@t '(error-handling-mode)) (lambda (n3e54@x) (n2ec6@symbol-macro n3e54@x '(ignore raise replace))) (if (memv n3e50@t '(buffer-mode)) (lambda (n3e56@x) (n2ec6@symbol-macro n3e56@x '(none line block))) (if (memv n3e50@t '(file-options)) n2c1e@file-options-macro (if (memv n3e50@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) n2eae@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" n3e4e@x)))))))))))))))))))))))))))))))))))))))) n3e4e@x) (error 'core-macro-transformer '"BUG: invalid macro" n3e4e@x))))) (set! n2eca@local-macro-transformer (lambda (n3e58@x) (car n3e58@x))) (set! n2ecc@do-macro-call (lambda (n3e5a@transformer n3e5b@expr) ((lambda (n3e5e@out) (begin ((letrec ((n3e60@f (lambda (n3e62@x) (if (not (n2c73@stx? n3e62@x)) (if (pair? n3e62@x) (begin (n3e60@f (car n3e62@x)) (n3e60@f (cdr n3e62@x))) (if (vector? n3e62@x) (vector-for-each n3e60@f n3e62@x) (if (symbol? n3e62@x) (n2f9f@syntax-violation '#f '"raw symbol encountered in output of macro" n3e5b@expr n3e62@x) (void)))) (void))))) n3e60@f) n3e5e@out) (n2c95@add-mark (n2c8b@gen-mark) n3e5e@out n3e5b@expr))) (n3e5a@transformer (n2c95@add-mark n2c8d@anti-mark n3e5b@expr '#f))))) (set! n2ece@chi-macro (lambda (n3e64@p n3e65@e) (n2ecc@do-macro-call (n2ec8@macro-transformer n3e64@p) n3e65@e))) (set! n2ed0@chi-local-macro (lambda (n3e68@p n3e69@e) (n2ecc@do-macro-call (n2eca@local-macro-transformer n3e68@p) n3e69@e))) (set! n2ed2@chi-global-macro (lambda (n3e6c@p n3e6d@e) ((lambda (n3e70@lib n3e71@loc) (begin (n2ad0@n2972@visit-library n3e70@lib) ((lambda (n3e74@x) ((lambda (n3e76@transformer) (n2ecc@do-macro-call n3e76@transformer n3e6d@e)) (if (procedure? n3e74@x) n3e74@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" n3e74@x)))) (symbol-value n3e71@loc)))) (car n3e6c@p) (cdr n3e6c@p)))) (set! n2ed4@chi-expr* (lambda (n3e78@e* n3e79@r n3e7a@mr) (if (null? n3e78@e*) '() ((lambda (n3e7e@e) (cons n3e7e@e (n2ed4@chi-expr* (cdr n3e78@e*) n3e79@r n3e7a@mr))) (n2ed8@chi-expr (car n3e78@e*) n3e79@r n3e7a@mr))))) (set! n2ed6@chi-application (lambda (n3e80@e n3e81@r n3e82@mr) ((lambda (n3e86@t) ((lambda (n3e88@ls/false) (if n3e88@ls/false (apply (lambda (n3e8a@rator n3e8b@rands) ((lambda (n3e8e@rator) (cons n3e8e@rator (n2ed4@chi-expr* n3e8b@rands n3e81@r n3e82@mr))) (n2ed8@chi-expr n3e8a@rator n3e81@r n3e82@mr))) n3e88@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3e86@t))) (n2eb6@syntax-dispatch n3e86@t '(any . each-any)))) n3e80@e))) (set! n2ed8@chi-expr (lambda (n3e90@e n3e91@r n3e92@mr) (call-with-values (lambda () (n2cd3@syntax-type n3e90@e n3e91@r)) (lambda (n3e9c@n3e97 n3e9d@n3e99 n3e9e@n3e9b) ((lambda (n3ea2@kwd n3ea3@value n3ea4@type) ((lambda (n3ea8@t) (if (memv n3ea8@t '(core-macro)) ((lambda (n3eaa@transformer) (n3eaa@transformer n3e90@e n3e91@r n3e92@mr)) (n2ec4@core-macro-transformer n3ea3@value)) (if (memv n3ea8@t '(global)) ((lambda (n3eac@lib) ((lambda (n3eae@loc) ((lambda () (begin ((n2f21@inv-collector) n3eac@lib) n3eae@loc)))) (cdr n3ea3@value))) (car n3ea3@value)) (if (memv n3ea8@t '(core-prim)) ((lambda (n3eb0@name) (list 'primitive n3eb0@name)) n3ea3@value) (if (memv n3ea8@t '(call)) (n2ed6@chi-application n3e90@e n3e91@r n3e92@mr) (if (memv n3ea8@t '(lexical)) ((lambda (n3eb2@lex) n3eb2@lex) (n2e42@lexical-var n3ea3@value)) (if (memv n3ea8@t '(global-macro global-macro!)) (n2ed8@chi-expr (n2ed2@chi-global-macro n3ea3@value n3e90@e) n3e91@r n3e92@mr) (if (memv n3ea8@t '(local-macro local-macro!)) (n2ed8@chi-expr (n2ed0@chi-local-macro n3ea3@value n3e90@e) n3e91@r n3e92@mr) (if (memv n3ea8@t '(macro macro!)) (n2ed8@chi-expr (n2ece@chi-macro n3ea3@value n3e90@e) n3e91@r n3e92@mr) (if (memv n3ea8@t '(constant)) ((lambda (n3eb4@datum) (list 'quote n3eb4@datum)) n3ea3@value) (if (memv n3ea8@t '(set!)) (n2eda@chi-set! n3e90@e n3e91@r n3e92@mr) (if (memv n3ea8@t '(begin)) ((lambda (n3eb6@t) ((lambda (n3eb8@ls/false) (if n3eb8@ls/false (apply (lambda (n3eba@x n3ebb@x*) (n2c0a@n2b79@build-sequence '#f (n2ed4@chi-expr* (cons n3eba@x n3ebb@x*) n3e91@r n3e92@mr))) n3eb8@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3eb6@t))) (n2eb6@syntax-dispatch n3eb6@t '(_ any . each-any)))) n3e90@e) (if (memv n3ea8@t '(let-syntax letrec-syntax)) ((lambda (n3ebe@t) ((lambda (n3ec0@ls/false) (if (and n3ec0@ls/false (apply (lambda (n3ec2@xlhs* n3ec3@xrhs* n3ec4@xbody n3ec5@xbody*) (if (not (n2cb5@valid-bound-ids? n3ec2@xlhs*)) (n2f9f@syntax-violation '#f '"invalid identifiers" n3e90@e) (void))) n3ec0@ls/false)) (apply (lambda (n3eca@xlhs* n3ecb@xrhs* n3ecc@xbody n3ecd@xbody*) ((lambda (n3ed2@xlab*) ((lambda (n3ed4@xrib) ((lambda (n3ed6@xb*) ((lambda () (n2c0a@n2b79@build-sequence '#f (n2ed4@chi-expr* (map (lambda (n3ed8@x) (n2c97@add-subst n3ed4@xrib n3ed8@x)) (cons n3ecc@xbody n3ecd@xbody*)) (append (map cons n3ed2@xlab* n3ed6@xb*) n3e91@r) (append (map cons n3ed2@xlab* n3ed6@xb*) n3e92@mr)))))) (map (lambda (n3eda@x) (n2ce9@make-eval-transformer (n2f13@expand-transformer (if (eq? n3ea4@type 'let-syntax) n3eda@x (n2c97@add-subst n3ed4@xrib n3eda@x)) n3e92@mr))) n3ecb@xrhs*))) (n2c66@make-full-rib n3eca@xlhs* n3ed2@xlab*))) (map n2c2f@gen-label n3eca@xlhs*))) n3ec0@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3ebe@t))) (n2eb6@syntax-dispatch n3ebe@t '(_ #(each (any any)) any . each-any)))) n3e90@e) (if (memv n3ea8@t '(displaced-lexical)) (n2f9f@syntax-violation '#f '"identifier out of context" n3e90@e) (if (memv n3ea8@t '(syntax)) (n2f9f@syntax-violation '#f '"reference to pattern variable outside a syntax form" n3e90@e) (if (memv n3ea8@t '(define define-syntax module import library)) (n2f9f@syntax-violation '#f (string-append ((lambda (n3edc@t) (if (memv n3edc@t '(define)) '"a definition" (if (memv n3edc@t '(define-syntax)) '"a define-syntax" (if (memv n3edc@t '(module)) '"a module definition" (if (memv n3edc@t '(library)) '"a library definition" (if (memv n3edc@t '(import)) '"an import declaration" (if (memv n3edc@t '(export)) '"an export declaration" '"a non-expression"))))))) n3ea4@type) '" was found where an expression was expected") n3e90@e) (if (memv n3ea8@t '(mutable)) (n2f9f@syntax-violation '#f '"attempt to reference an unexportable variable" n3e90@e) (n2f9f@syntax-violation '#f '"invalid expression" n3e90@e)))))))))))))))))) n3ea4@type)) n3e9e@n3e9b n3e9d@n3e99 n3e9c@n3e97))))) (set! n2eda@chi-set! (lambda (n3ede@e n3edf@r n3ee0@mr) ((lambda (n3ee4@t) ((lambda (n3ee6@ls/false) (if (and n3ee6@ls/false (apply (lambda (n3ee8@x n3ee9@v) (n2cab@id? n3ee8@x)) n3ee6@ls/false)) (apply (lambda (n3eec@x n3eed@v) (call-with-values (lambda () (n2cd3@syntax-type n3eec@x n3edf@r)) (lambda (n3ef6@n3ef1 n3ef7@n3ef3 n3ef8@n3ef5) ((lambda (n3efc@kwd n3efd@value n3efe@type) ((lambda (n3f02@t) (if (memv n3f02@t '(lexical)) (begin (n2e46@set-lexical-mutable! n3efd@value '#t) (list 'set! (n2e42@lexical-var n3efd@value) (n2ed8@chi-expr n3eed@v n3edf@r n3ee0@mr))) (if (memv n3f02@t '(core-prim)) (n2f9f@syntax-violation '#f '"cannot modify imported core primitive" n3ede@e) (if (memv n3f02@t '(global)) (n2f9f@syntax-violation '#f '"attempt to modify imported binding" n3ede@e) (if (memv n3f02@t '(global-macro!)) (n2ed8@chi-expr (n2ed2@chi-global-macro n3efd@value n3ede@e) n3edf@r n3ee0@mr) (if (memv n3f02@t '(local-macro!)) (n2ed8@chi-expr (n2ed0@chi-local-macro n3efd@value n3ede@e) n3edf@r n3ee0@mr) (if (memv n3f02@t '(mutable)) (n2f9f@syntax-violation '#f '"attempt to assign to an unexportable variable" n3ede@e) (n2f9f@syntax-violation '#f '"invalid syntax" n3ede@e)))))))) n3efe@type)) n3ef8@n3ef5 n3ef7@n3ef3 n3ef6@n3ef1)))) n3ee6@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3ee4@t))) (n2eb6@syntax-dispatch n3ee4@t '(_ any any)))) n3ede@e))) (set! n2edc@verify-formals (lambda (n3f04@fmls n3f05@stx) ((lambda (n3f08@t) ((lambda (n3f0a@ls/false) (if n3f0a@ls/false (apply (lambda (n3f0c@x*) (if (not (n2cb5@valid-bound-ids? n3f0c@x*)) (n2e70@invalid-fmls-error n3f05@stx n3f04@fmls) (void))) n3f0a@ls/false) ((lambda (n3f0e@t) ((lambda (n3f10@ls/false) (if n3f10@ls/false (apply (lambda (n3f12@x* n3f13@x) (if (not (n2cb5@valid-bound-ids? (cons n3f13@x n3f12@x*))) (n2e70@invalid-fmls-error n3f05@stx n3f04@fmls) (void))) n3f10@ls/false) ((lambda (n3f16@t) ((lambda (n3f18@ls/false) (if n3f18@ls/false (apply (lambda () (n2f9f@syntax-violation '#f '"invalid syntax" n3f05@stx)) n3f18@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3f16@t))) (n2eb6@syntax-dispatch n3f16@t '_))) n3f0e@t))) (n2eb6@syntax-dispatch n3f0e@t '#(each+ any () any)))) n3f08@t))) (n2eb6@syntax-dispatch n3f08@t 'each-any))) n3f04@fmls))) (set! n2ede@chi-lambda-clause (lambda (n3f1a@stx n3f1b@fmls n3f1c@body* n3f1d@r n3f1e@mr) ((lambda (n3f24@t) ((lambda (n3f26@ls/false) (if n3f26@ls/false (apply (lambda (n3f28@x*) (begin (n2edc@verify-formals n3f1b@fmls n3f1a@stx) ((lambda (n3f2a@lex* n3f2b@lab*) (values n3f2a@lex* (n2eee@chi-internal (n2c97@add-subst (n2c66@make-full-rib n3f28@x* n3f2b@lab*) n3f1c@body*) (n2e4a@add-lexicals n3f2b@lab* n3f2a@lex* n3f1d@r) n3f1e@mr))) (map n2c2b@gen-lexical n3f28@x*) (map n2c2f@gen-label n3f28@x*)))) n3f26@ls/false) ((lambda (n3f2e@t) ((lambda (n3f30@ls/false) (if n3f30@ls/false (apply (lambda (n3f32@x* n3f33@x) (begin (n2edc@verify-formals n3f1b@fmls n3f1a@stx) ((lambda (n3f36@lex* n3f37@lab* n3f38@lex n3f39@lab) (values (append n3f36@lex* n3f38@lex) (n2eee@chi-internal (n2c97@add-subst (n2c66@make-full-rib (cons n3f33@x n3f32@x*) (cons n3f39@lab n3f37@lab*)) n3f1c@body*) (n2e4a@add-lexicals (cons n3f39@lab n3f37@lab*) (cons n3f38@lex n3f36@lex*) n3f1d@r) n3f1e@mr))) (map n2c2b@gen-lexical n3f32@x*) (map n2c2f@gen-label n3f32@x*) (n2c2b@gen-lexical n3f33@x) (n2c2f@gen-label n3f33@x)))) n3f30@ls/false) ((lambda (n3f3e@t) ((lambda (n3f40@ls/false) (if n3f40@ls/false (apply (lambda () (n2f9f@syntax-violation '#f '"invalid syntax" n3f1b@fmls)) n3f40@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n3f3e@t))) (n2eb6@syntax-dispatch n3f3e@t '_))) n3f2e@t))) (n2eb6@syntax-dispatch n3f2e@t '#(each+ any () any)))) n3f24@t))) (n2eb6@syntax-dispatch n3f24@t 'each-any))) n3f1b@fmls))) (set! n2ee0@chi-lambda-clause* (lambda (n3f42@stx n3f43@fmls* n3f44@body** n3f45@r n3f46@mr) (if (null? n3f43@fmls*) (values '() '()) (call-with-values (lambda () (n2ede@chi-lambda-clause n3f42@stx (car n3f43@fmls*) (car n3f44@body**) n3f45@r n3f46@mr)) (lambda (n3f50@n3f4d n3f51@n3f4f) ((lambda (n3f54@b n3f55@a) (call-with-values (lambda () (n2ee0@chi-lambda-clause* n3f42@stx (cdr n3f43@fmls*) (cdr n3f44@body**) n3f45@r n3f46@mr)) (lambda (n3f5c@n3f59 n3f5d@n3f5b) ((lambda (n3f60@b* n3f61@a*) (values (cons n3f55@a n3f61@a*) (cons n3f54@b n3f60@b*))) n3f5d@n3f5b n3f5c@n3f59)))) n3f51@n3f4f n3f50@n3f4d)))))) (set! n2ee2@chi-defun (lambda (n3f64@x n3f65@r n3f66@mr) ((lambda (n3f6a@fmls n3f6b@body*) (call-with-values (lambda () (n2ede@chi-lambda-clause n3f6a@fmls n3f6a@fmls n3f6b@body* n3f65@r n3f66@mr)) (lambda (n3f72@n3f6f n3f73@n3f71) ((lambda (n3f76@body n3f77@fmls) (n2c07@n2b47@build-lambda '#f n3f77@fmls n3f76@body)) n3f73@n3f71 n3f72@n3f6f)))) (car n3f64@x) (cdr n3f64@x)))) (set! n2ee4@chi-rhs (lambda (n3f7a@rhs n3f7b@r n3f7c@mr) ((lambda (n3f80@t) (if (memv n3f80@t '(defun)) (n2ee2@chi-defun (cdr n3f7a@rhs) n3f7b@r n3f7c@mr) (if (memv n3f80@t '(expr)) ((lambda (n3f82@expr) (n2ed8@chi-expr n3f82@expr n3f7b@r n3f7c@mr)) (cdr n3f7a@rhs)) (if (memv n3f80@t '(top-expr)) ((lambda (n3f84@expr) (n2c0a@n2b79@build-sequence '#f (list (n2ed8@chi-expr n3f84@expr n3f7b@r n3f7c@mr) (n2c0b@n2b7b@build-void)))) (cdr n3f7a@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" n3f7a@rhs))))) (car n3f7a@rhs)))) (set! n2ee6@expand-interaction-rhs*/init* (lambda (n3f86@lhs* n3f87@rhs* n3f88@init* n3f89@r n3f8a@mr) ((letrec ((n3f90@f (lambda (n3f92@lhs* n3f93@rhs*) (if (null? n3f92@lhs*) (map (lambda (n3f96@x) (n2ed8@chi-expr n3f96@x n3f89@r n3f8a@mr)) n3f88@init*) ((lambda (n3f98@lhs n3f99@rhs) ((lambda (n3f9c@t) (if (memv n3f9c@t '(defun)) ((lambda (n3f9e@rhs) (cons (list 'set! n3f98@lhs n3f9e@rhs) (n3f90@f (cdr n3f92@lhs*) (cdr n3f93@rhs*)))) (n2ee2@chi-defun (cdr n3f99@rhs) n3f89@r n3f8a@mr)) (if (memv n3f9c@t '(expr)) ((lambda (n3fa0@rhs) (cons (list 'set! n3f98@lhs n3fa0@rhs) (n3f90@f (cdr n3f92@lhs*) (cdr n3f93@rhs*)))) (n2ed8@chi-expr (cdr n3f99@rhs) n3f89@r n3f8a@mr)) (if (memv n3f9c@t '(top-expr)) ((lambda (n3fa2@e) (cons n3fa2@e (n3f90@f (cdr n3f92@lhs*) (cdr n3f93@rhs*)))) (n2ed8@chi-expr (cdr n3f99@rhs) n3f89@r n3f8a@mr)) (error 'expand-interaction '"invallid" n3f99@rhs))))) (car n3f99@rhs))) (car n3f92@lhs*) (car n3f93@rhs*)))))) n3f90@f) n3f86@lhs* n3f87@rhs*))) (set! n2ee8@chi-rhs* (lambda (n3fa4@rhs* n3fa5@r n3fa6@mr) ((letrec ((n3faa@f (lambda (n3fac@ls) (if (null? n3fac@ls) '() ((lambda (n3fae@a) (cons n3fae@a (n3faa@f (cdr n3fac@ls)))) (n2ee4@chi-rhs (car n3fac@ls) n3fa5@r n3fa6@mr)))))) n3faa@f) n3fa4@rhs*))) (set! n2eea@find-bound=? (lambda (n3fb0@x n3fb1@lhs* n3fb2@rhs*) (if (null? n3fb1@lhs*) '#f (if (n2cb1@bound-id=? n3fb0@x (car n3fb1@lhs*)) (car n3fb2@rhs*) (n2eea@find-bound=? n3fb0@x (cdr n3fb1@lhs*) (cdr n3fb2@rhs*)))))) (set! n2eec@find-dups (lambda (n3fb6@ls) ((letrec ((n3fb8@f (lambda (n3fba@ls n3fbb@dups) (if (null? n3fba@ls) n3fbb@dups ((lambda (n3fbe@t) (if n3fbe@t ((lambda (n3fc0@x) (n3fb8@f (cdr n3fba@ls) (cons (list (car n3fba@ls) n3fc0@x) n3fbb@dups))) n3fbe@t) (n3fb8@f (cdr n3fba@ls) n3fbb@dups))) (n2eea@find-bound=? (car n3fba@ls) (cdr n3fba@ls) (cdr n3fba@ls))))))) n3fb8@f) n3fb6@ls '()))) (set! n2eee@chi-internal (lambda (n3fc2@e* n3fc3@r n3fc4@mr) ((lambda (n3fc8@rib) (call-with-values (lambda () (n2f11@chi-body* (map (lambda (n3fda@x) (n2c97@add-subst n3fc8@rib n3fda@x)) (n2ca9@syntax->list n3fc2@e*)) n3fc3@r n3fc4@mr '() '() '() '() '() n3fc8@rib '#f)) (lambda (n3fdc@n3fcb n3fdd@n3fcd n3fde@n3fcf n3fdf@n3fd1 n3fe0@n3fd3 n3fe1@n3fd5 n3fe2@n3fd7 n3fe3@n3fd9) ((lambda (n3fec@_exp* n3fed@kwd* n3fee@mod** n3fef@rhs* n3ff0@lex* n3ff1@mr n3ff2@r n3ff3@e*) (begin (if (null? n3ff3@e*) (n2f9f@syntax-violation '#f '"no expression in body" n3ff3@e*) (void)) ((lambda (n3ffc@init*) ((lambda (n3ffe@rhs*) ((lambda () (n2c0d@n2b7f@build-letrec* '#f (reverse n3ff0@lex*) (reverse n3ffe@rhs*) (n2c0a@n2b79@build-sequence '#f n3ffc@init*))))) (n2ee8@chi-rhs* n3fef@rhs* n3ff2@r n3ff1@mr))) (n2ed4@chi-expr* (append (apply append (reverse n3fee@mod**)) n3ff3@e*) n3ff2@r n3ff1@mr)))) n3fe3@n3fd9 n3fe2@n3fd7 n3fe1@n3fd5 n3fe0@n3fd3 n3fdf@n3fd1 n3fde@n3fcf n3fdd@n3fcd n3fdc@n3fcb)))) (n2c5a@make-empty-rib)))) (set! n2ef0@parse-module (lambda (n4000@e) ((lambda (n4002@t) ((lambda (n4004@ls/false) (if n4004@ls/false (apply (lambda (n4006@export* n4007@b*) (begin (if (not (for-all n2cab@id? n4006@export*)) (n2f9f@syntax-violation '#f '"module exports must be identifiers" n4000@e) (void)) (values '#f (list->vector n4006@export*) n4007@b*))) n4004@ls/false) ((lambda (n400a@t) ((lambda (n400c@ls/false) (if n400c@ls/false (apply (lambda (n400e@name n400f@export* n4010@b*) (begin (if (not (n2cab@id? n400e@name)) (n2f9f@syntax-violation '#f '"module name must be an identifier" n4000@e) (void)) (if (not (for-all n2cab@id? n400f@export*)) (n2f9f@syntax-violation '#f '"module exports must be identifiers" n4000@e) (void)) (values n400e@name (list->vector n400f@export*) n4010@b*))) n400c@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n400a@t))) (n2eb6@syntax-dispatch n400a@t '(_ any each-any . each-any)))) n4002@t))) (n2eb6@syntax-dispatch n4002@t '(_ each-any . each-any)))) n4000@e))) (set! n2ef6@n2ef1 (make-record-type-descriptor 'module-interface '#f 'n2ef4 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! n2ef8@n2ef3 '#f) (set! n2efa@n2ef2 (make-record-constructor-descriptor n2ef6@n2ef1 '#f n2ef8@n2ef3)) (set! n2efd@module-interface? (record-predicate n2ef6@n2ef1)) (set! n2eff@make-module-interface (record-constructor n2efa@n2ef2)) (set! n2f01@module-interface-first-mark (record-accessor n2ef6@n2ef1 '0)) (set! n2f03@module-interface-exp-id-vec (record-accessor n2ef6@n2ef1 '1)) (set! n2f05@module-interface-exp-lab-vec (record-accessor n2ef6@n2ef1 '2)) (set! n2f07@set-module-interface-first-mark! (record-mutator n2ef6@n2ef1 '0)) (set! n2f09@set-module-interface-exp-id-vec! (record-mutator n2ef6@n2ef1 '1)) (set! n2f0b@set-module-interface-exp-lab-vec! (record-mutator n2ef6@n2ef1 '2)) (set! n2f0d@module-interface-exp-id* (lambda (n4014@iface n4015@id) ((lambda (n4019@diff-marks) (begin (set! n4019@diff-marks (lambda (n4020@ls n4021@x) (begin (if (null? n4020@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (n4024@a) (if (eq? n4024@a n4021@x) '() (cons n4024@a (n4019@diff-marks (cdr n4020@ls) n4021@x)))) (car n4020@ls))))) ((lambda (n401a@diff n401b@id-vec) (if (null? n401a@diff) n401b@id-vec (vector-map (lambda (n401e@x) (n2c75@make-stx (n2c77@stx-expr n401e@x) (append n401a@diff (n2c79@stx-mark* n401e@x)) '() '())) n401b@id-vec))) (n4019@diff-marks (n2c79@stx-mark* n4015@id) (n2f01@module-interface-first-mark n4014@iface)) (n2f03@module-interface-exp-id-vec n4014@iface)))) '#f))) (set! n2f0f@chi-internal-module (lambda (n4026@e n4027@r n4028@mr n4029@lex* n402a@rhs* n402b@mod** n402c@kwd*) (call-with-values (lambda () (n2ef0@parse-module n4026@e)) (lambda (n403a@n4035 n403b@n4037 n403c@n4039) ((lambda (n4040@e* n4041@exp-id* n4042@name) ((lambda (n4046@rib) ((lambda (n4048@e*) ((lambda () (call-with-values (lambda () (n2f11@chi-body* n4048@e* n4027@r n4028@mr n4029@lex* n402a@rhs* n402b@mod** n402c@kwd* '() n4046@rib '#f)) (lambda (n405a@n404b n405b@n404d n405c@n404f n405d@n4051 n405e@n4053 n405f@n4055 n4060@n4057 n4061@n4059) ((lambda (n406a@_exp* n406b@kwd* n406c@mod** n406d@rhs* n406e@lex* n406f@mr n4070@r n4071@e*) ((lambda (n407a@exp-lab* n407b@mod**) (if (not n4042@name) (values n406e@lex* n406d@rhs* n4041@exp-id* n407a@exp-lab* n4070@r n406f@mr n407b@mod** n406b@kwd*) ((lambda (n407e@lab n407f@iface) (values n406e@lex* n406d@rhs* (vector n4042@name) (vector n407e@lab) (cons (cons n407e@lab (cons '$module n407f@iface)) n4070@r) (cons (cons n407e@lab (cons '$module n407f@iface)) n406f@mr) n407b@mod** n406b@kwd*)) (n2c2f@gen-label 'module) (n2eff@make-module-interface (car (n2c79@stx-mark* n4042@name)) (vector-map (lambda (n4082@x) (n2c75@make-stx (n2c77@stx-expr n4082@x) (n2c79@stx-mark* n4082@x) '() '())) n4041@exp-id*) n407a@exp-lab*)))) (vector-map (lambda (n4084@x) (or (n2cc5@id->label (n2c75@make-stx (n2cad@id->sym n4084@x) (n2c79@stx-mark* n4084@x) (list n4046@rib) '())) (n2f9f@syntax-violation '#f '"cannot find module export" n4084@x))) n4041@exp-id*) (cons n4071@e* n406c@mod**))) n4061@n4059 n4060@n4057 n405f@n4055 n405e@n4053 n405d@n4051 n405c@n404f n405b@n404d n405a@n404b)))))) (map (lambda (n4086@x) (n2c97@add-subst n4046@rib n4086@x)) (n2ca9@syntax->list n4040@e*)))) (n2c5a@make-empty-rib))) n403c@n4039 n403b@n4037 n403a@n4035))))) (set! n2f11@chi-body* (lambda (n4088@e* n4089@r n408a@mr n408b@lex* n408c@rhs* n408d@mod** n408e@kwd* n408f@exp* n4090@rib n4091@top?) (if (null? n4088@e*) (values n4088@e* n4089@r n408a@mr n408b@lex* n408c@rhs* n408d@mod** n408e@kwd* n408f@exp*) ((lambda (n409c@e) (call-with-values (lambda () (n2cd3@syntax-type n409c@e n4089@r)) (lambda (n40a4@n409f n40a5@n40a1 n40a6@n40a3) ((lambda (n40aa@kwd n40ab@value n40ac@type) ((lambda (n40b0@kwd*) ((lambda (n40b2@t) (if (memv n40b2@t '(define)) (call-with-values (lambda () (n2e3a@parse-define n409c@e)) (lambda (n40b8@n40b5 n40b9@n40b7) ((lambda (n40bc@rhs n40bd@id) (begin (if (n2cb9@bound-id-member? n40bd@id n40b0@kwd*) (n2f9f@syntax-violation '#f '"cannot redefine keyword" n409c@e) (void)) (call-with-values (lambda () (n2c33@gen-define-label+loc n40bd@id n4090@rib)) (lambda (n40c4@n40c1 n40c5@n40c3) ((lambda (n40c8@lex n40c9@lab) (begin (n2c5c@extend-rib! n4090@rib n40bd@id n40c9@lab) (n2f11@chi-body* (cdr n4088@e*) (n2e48@add-lexical n40c9@lab n40c8@lex n4089@r) n408a@mr (cons n40c8@lex n408b@lex*) (cons n40bc@rhs n408c@rhs*) n408d@mod** n40b0@kwd* n408f@exp* n4090@rib n4091@top?))) n40c5@n40c3 n40c4@n40c1))))) n40b9@n40b7 n40b8@n40b5))) (if (memv n40b2@t '(define-syntax)) (call-with-values (lambda () (n2e3c@parse-define-syntax n409c@e)) (lambda (n40d0@n40cd n40d1@n40cf) ((lambda (n40d4@rhs n40d5@id) (begin (if (n2cb9@bound-id-member? n40d5@id n40b0@kwd*) (n2f9f@syntax-violation '#f '"cannot redefine keyword" n409c@e) (void)) ((lambda (n40d8@lab n40d9@expanded-rhs) (begin (n2c5c@extend-rib! n4090@rib n40d5@id n40d8@lab) ((lambda (n40dc@b) (n2f11@chi-body* (cdr n4088@e*) (cons (cons n40d8@lab n40dc@b) n4089@r) (cons (cons n40d8@lab n40dc@b) n408a@mr) n408b@lex* n408c@rhs* n408d@mod** n40b0@kwd* n408f@exp* n4090@rib n4091@top?)) (n2ce9@make-eval-transformer n40d9@expanded-rhs)))) (n2c35@gen-define-label n40d5@id n4090@rib) (n2f13@expand-transformer n40d4@rhs n408a@mr)))) n40d1@n40cf n40d0@n40cd))) (if (memv n40b2@t '(let-syntax letrec-syntax)) ((lambda (n40de@t) ((lambda (n40e0@ls/false) (if (and n40e0@ls/false (apply (lambda (n40e2@xlhs* n40e3@xrhs* n40e4@xbody*) (if (not (n2cb5@valid-bound-ids? n40e2@xlhs*)) (n2f9f@syntax-violation '#f '"invalid identifiers" n409c@e) (void))) n40e0@ls/false)) (apply (lambda (n40e8@xlhs* n40e9@xrhs* n40ea@xbody*) ((lambda (n40ee@xlab*) ((lambda (n40f0@xrib) ((lambda (n40f2@xb*) ((lambda () (n2f11@chi-body* (append (map (lambda (n40f4@x) (n2c97@add-subst n40f0@xrib n40f4@x)) n40ea@xbody*) (cdr n4088@e*)) (append (map cons n40ee@xlab* n40f2@xb*) n4089@r) (append (map cons n40ee@xlab* n40f2@xb*) n408a@mr) n408b@lex* n408c@rhs* n408d@mod** n40b0@kwd* n408f@exp* n4090@rib n4091@top?)))) (map (lambda (n40f6@x) (n2ce9@make-eval-transformer (n2f13@expand-transformer (if (eq? n40ac@type 'let-syntax) n40f6@x (n2c97@add-subst n40f0@xrib n40f6@x)) n408a@mr))) n40e9@xrhs*))) (n2c66@make-full-rib n40e8@xlhs* n40ee@xlab*))) (map n2c2f@gen-label n40e8@xlhs*))) n40e0@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n40de@t))) (n2eb6@syntax-dispatch n40de@t '(_ #(each (any any)) . each-any)))) n409c@e) (if (memv n40b2@t '(begin)) ((lambda (n40f8@t) ((lambda (n40fa@ls/false) (if n40fa@ls/false (apply (lambda (n40fc@x*) (n2f11@chi-body* (append n40fc@x* (cdr n4088@e*)) n4089@r n408a@mr n408b@lex* n408c@rhs* n408d@mod** n40b0@kwd* n408f@exp* n4090@rib n4091@top?)) n40fa@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n40f8@t))) (n2eb6@syntax-dispatch n40f8@t '(_ . each-any)))) n409c@e) (if (memv n40b2@t '(global-macro global-macro!)) (n2f11@chi-body* (cons (n2c97@add-subst n4090@rib (n2ed2@chi-global-macro n40ab@value n409c@e)) (cdr n4088@e*)) n4089@r n408a@mr n408b@lex* n408c@rhs* n408d@mod** n40b0@kwd* n408f@exp* n4090@rib n4091@top?) (if (memv n40b2@t '(local-macro local-macro!)) (n2f11@chi-body* (cons (n2c97@add-subst n4090@rib (n2ed0@chi-local-macro n40ab@value n409c@e)) (cdr n4088@e*)) n4089@r n408a@mr n408b@lex* n408c@rhs* n408d@mod** n40b0@kwd* n408f@exp* n4090@rib n4091@top?) (if (memv n40b2@t '(macro macro!)) (n2f11@chi-body* (cons (n2c97@add-subst n4090@rib (n2ece@chi-macro n40ab@value n409c@e)) (cdr n4088@e*)) n4089@r n408a@mr n408b@lex* n408c@rhs* n408d@mod** n40b0@kwd* n408f@exp* n4090@rib n4091@top?) (if (memv n40b2@t '(module)) (call-with-values (lambda () (n2f0f@chi-internal-module n409c@e n4089@r n408a@mr n408b@lex* n408c@rhs* n408d@mod** n40b0@kwd*)) (lambda (n410e@n40ff n410f@n4101 n4110@n4103 n4111@n4105 n4112@n4107 n4113@n4109 n4114@n410b n4115@n410d) ((lambda (n411e@kwd* n411f@mod** n4120@mr n4121@r n4122@m-exp-lab* n4123@m-exp-id* n4124@rhs* n4125@lex*) (begin (vector-for-each (lambda (n412e@id n412f@lab) (n2c5c@extend-rib! n4090@rib n412e@id n412f@lab)) n4123@m-exp-id* n4122@m-exp-lab*) (n2f11@chi-body* (cdr n4088@e*) n4121@r n4120@mr n4125@lex* n4124@rhs* n411f@mod** n411e@kwd* n408f@exp* n4090@rib n4091@top?))) n4115@n410d n4114@n410b n4113@n4109 n4112@n4107 n4111@n4105 n4110@n4103 n410f@n4101 n410e@n40ff))) (if (memv n40b2@t '(library)) (begin (n2f81@library-expander (n2cc1@stx->datum n409c@e)) (n2f11@chi-body* (cdr n4088@e*) n4089@r n408a@mr n408b@lex* n408c@rhs* n408d@mod** n40b0@kwd* n408f@exp* n4090@rib n4091@top?)) (if (memv n40b2@t '(export)) ((lambda (n4132@t) ((lambda (n4134@ls/false) (if n4134@ls/false (apply (lambda (n4136@exp-decl*) (n2f11@chi-body* (cdr n4088@e*) n4089@r n408a@mr n408b@lex* n408c@rhs* n408d@mod** n40b0@kwd* (append n4136@exp-decl* n408f@exp*) n4090@rib n4091@top?)) n4134@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n4132@t))) (n2eb6@syntax-dispatch n4132@t '(_ . each-any)))) n409c@e) (if (memv n40b2@t '(import)) ((lambda () ((lambda (n4139@module-import? n413b@module-import n413d@library-import) (begin (set! n4139@module-import? (lambda (n418c@e) ((lambda (n418e@t) ((lambda (n4190@ls/false) (if (and n4190@ls/false (apply (lambda (n4192@id) (n2cab@id? n4192@id)) n4190@ls/false)) (apply (lambda (n4194@id) '#t) n4190@ls/false) ((lambda (n4196@t) ((lambda (n4198@ls/false) (if n4198@ls/false (apply (lambda (n419a@imp*) '#f) n4198@ls/false) ((lambda (n419c@t) ((lambda (n419e@ls/false) (if n419e@ls/false (apply (lambda () (n2f9f@syntax-violation '#f '"malformed import form" n418c@e)) n419e@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n419c@t))) (n2eb6@syntax-dispatch n419c@t '_))) n4196@t))) (n2eb6@syntax-dispatch n4196@t '(_ . each-any)))) n418e@t))) (n2eb6@syntax-dispatch n418e@t '(_ any)))) n418c@e))) (set! n413b@module-import (lambda (n416a@e n416b@r) ((lambda (n416e@t) ((lambda (n4170@ls/false) (if (and n4170@ls/false (apply (lambda (n4172@id) (n2cab@id? n4172@id)) n4170@ls/false)) (apply (lambda (n4174@id) (call-with-values (lambda () (n2cd3@syntax-type n4174@id n416b@r)) (lambda (n417c@n4177 n417d@n4179 n417e@n417b) ((lambda (n4182@kwd n4183@value n4184@type) ((lambda (n4188@t) (if (memv n4188@t '($module)) ((lambda (n418a@iface) (values (n2f0d@module-interface-exp-id* n418a@iface n4174@id) (n2f05@module-interface-exp-lab-vec n418a@iface))) n4183@value) (n2f9f@syntax-violation '#f '"invalid import" n416a@e))) n4184@type)) n417e@n417b n417d@n4179 n417c@n4177)))) n4170@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n416e@t))) (n2eb6@syntax-dispatch n416e@t '(_ any)))) n416a@e))) (set! n413d@library-import (lambda (n414e@e) ((lambda (n4150@t) ((lambda (n4152@ls/false) (if n4152@ls/false (apply (lambda (n4154@ctxt n4155@imp*) (call-with-values (lambda () (n2f1b@parse-import-spec* (n2fa5@syntax->datum n4155@imp*))) (lambda (n415c@n4159 n415d@n415b) ((lambda (n4160@subst-labels n4161@subst-names) (values (vector-map (lambda (n4164@name) (n2c89@datum->stx n4154@ctxt n4164@name)) n4161@subst-names) n4160@subst-labels)) n415d@n415b n415c@n4159)))) n4152@ls/false) ((lambda (n4166@t) ((lambda (n4168@ls/false) (if n4168@ls/false (apply (lambda () (n2f9f@syntax-violation '#f '"invalid import form" n414e@e)) n4168@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n4166@t))) (n2eb6@syntax-dispatch n4166@t '_))) n4150@t))) (n2eb6@syntax-dispatch n4150@t '(any . each-any)))) n414e@e))) (begin (call-with-values (lambda () (if (n4139@module-import? n409c@e) (n413b@module-import n409c@e n4089@r) (n413d@library-import n409c@e))) (lambda (n4142@n413f n4143@n4141) ((lambda (n4146@lab* n4147@id*) (vector-for-each (lambda (n414a@id n414b@lab) (n2c5c@extend-rib! n4090@rib n414a@id n414b@lab)) n4147@id* n4146@lab*)) n4143@n4141 n4142@n413f))) (n2f11@chi-body* (cdr n4088@e*) n4089@r n408a@mr n408b@lex* n408c@rhs* n408d@mod** n40b0@kwd* n408f@exp* n4090@rib n4091@top?)))) '#f '#f '#f))) (if n4091@top? (n2f11@chi-body* (cdr n4088@e*) n4089@r n408a@mr (cons (n2c2b@gen-lexical 'dummy) n408b@lex*) (cons (cons 'top-expr n409c@e) n408c@rhs*) n408d@mod** n40b0@kwd* n408f@exp* n4090@rib n4091@top?) (values n4088@e* n4089@r n408a@mr n408b@lex* n408c@rhs* n408d@mod** n40b0@kwd* n408f@exp*)))))))))))))) n40ac@type)) (if (n2cab@id? n40aa@kwd) (cons n40aa@kwd n408e@kwd*) n408e@kwd*))) n40a6@n40a3 n40a5@n40a1 n40a4@n409f)))) (car n4088@e*))))) (set! n2f13@expand-transformer (lambda (n41a0@expr n41a1@r) ((lambda (n41a4@rtc) ((lambda (n41a6@expanded-rhs) (begin (for-each ((lambda (n41a8@mark-visit) (lambda (n41aa@x) (begin (n2acf@n2970@invoke-library n41aa@x) (n41a8@mark-visit n41aa@x)))) (n2f23@vis-collector)) (n41a4@rtc)) n41a6@expanded-rhs)) ((lambda (n41b4@n41ad n41b5@n41af n41b6@n41b1 n41b7@n41b3) ((lambda (n41bc@swap) (dynamic-wind n41bc@swap (lambda () (n2ed8@chi-expr n41a0@expr n41a1@r n41a1@r)) n41bc@swap)) (lambda () (begin ((lambda (n41be@t) (begin (n41b4@n41ad n41b6@n41b1) (set! n41b6@n41b1 n41be@t))) (n41b4@n41ad)) ((lambda (n41c0@t) (begin (n41b5@n41af n41b7@n41b3) (set! n41b7@n41b3 n41c0@t))) (n41b5@n41af)))))) n2f21@inv-collector n2f23@vis-collector n41a4@rtc (lambda (n41c2@x) (values))))) (n2f1f@make-collector)))) (set! n2f15@parse-exports (lambda (n41c4@exp*) ((letrec ((n41c6@f (lambda (n41c8@exp* n41c9@int* n41ca@ext*) (if (null? n41c8@exp*) (begin (if (not (n2cb5@valid-bound-ids? n41ca@ext*)) (n2f9f@syntax-violation 'export '"invalid exports" (n2eec@find-dups n41ca@ext*)) (void)) (values (map n2fa5@syntax->datum n41ca@ext*) n41c9@int*)) ((lambda (n41ce@t) ((lambda (n41d0@ls/false) (if n41d0@ls/false (apply (lambda (n41d2@rename n41d3@i* n41d4@e*) (begin (if (not (and (eq? (n2fa5@syntax->datum n41d2@rename) 'rename) (for-all n2cab@id? n41d3@i*) (for-all n2cab@id? n41d4@e*))) (n2f9f@syntax-violation 'export '"invalid export specifier" (car n41c8@exp*)) (void)) (n41c6@f (cdr n41c8@exp*) (append n41d3@i* n41c9@int*) (append n41d4@e* n41ca@ext*)))) n41d0@ls/false) ((lambda (n41d8@t) ((lambda (n41da@ls/false) (if n41da@ls/false (apply (lambda (n41dc@ie) (begin (if (not (n2cab@id? n41dc@ie)) (n2f9f@syntax-violation 'export '"invalid export" n41dc@ie) (void)) (n41c6@f (cdr n41c8@exp*) (cons n41dc@ie n41c9@int*) (cons n41dc@ie n41ca@ext*)))) n41da@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n41d8@t))) (n2eb6@syntax-dispatch n41d8@t 'any))) n41ce@t))) (n2eb6@syntax-dispatch n41ce@t '(any . #(each (any any)))))) (car n41c8@exp*)))))) n41c6@f) n41c4@exp* '() '()))) (set! n2f17@parse-library-name (lambda (n41de@spec) ((lambda (n41e1@parse) (begin (set! n41e1@parse (lambda (n41ee@x) ((lambda (n41f0@t) ((lambda (n41f2@ls/false) (if (and n41f2@ls/false (apply (lambda (n41f4@v*) (for-all (lambda (n41f6@x) ((lambda (n41f8@x) (and (integer? n41f8@x) (exact? n41f8@x))) (n2fa5@syntax->datum n41f6@x))) n41f4@v*)) n41f2@ls/false)) (apply (lambda (n41fa@v*) (values '() (map n2fa5@syntax->datum n41fa@v*))) n41f2@ls/false) ((lambda (n41fc@t) ((lambda (n41fe@ls/false) (if (and n41fe@ls/false (apply (lambda (n4200@x n4201@rest) (symbol? (n2fa5@syntax->datum n4200@x))) n41fe@ls/false)) (apply (lambda (n4204@x n4205@rest) (call-with-values (lambda () (n41e1@parse n4205@rest)) (lambda (n420c@n4209 n420d@n420b) ((lambda (n4210@v* n4211@x*) (values (cons (n2fa5@syntax->datum n4204@x) n4211@x*) n4210@v*)) n420d@n420b n420c@n4209)))) n41fe@ls/false) ((lambda (n4214@t) ((lambda (n4216@ls/false) (if n4216@ls/false (apply (lambda () (values '() '())) n4216@ls/false) ((lambda (n4218@t) ((lambda (n421a@ls/false) (if n421a@ls/false (apply (lambda () (n2f9f@syntax-violation '#f '"invalid library name" n41de@spec)) n421a@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n4218@t))) (n2eb6@syntax-dispatch n4218@t '_))) n4214@t))) (n2eb6@syntax-dispatch n4214@t '()))) n41fc@t))) (n2eb6@syntax-dispatch n41fc@t '(any . any)))) n41f0@t))) (n2eb6@syntax-dispatch n41f0@t '(each-any)))) n41ee@x))) (call-with-values (lambda () (n41e1@parse n41de@spec)) (lambda (n41e6@n41e3 n41e7@n41e5) ((lambda (n41ea@ver* n41eb@name*) (begin (if (null? n41eb@name*) (n2f9f@syntax-violation '#f '"empty library name" n41de@spec) (void)) (values n41eb@name* n41ea@ver*))) n41e7@n41e5 n41e6@n41e3))))) '#f))) (set! n2f19@parse-library (lambda (n421c@e) ((lambda (n421e@t) ((lambda (n4220@ls/false) (if (and n4220@ls/false (apply (lambda (n4222@library n4223@name* n4224@export n4225@exp* n4226@import n4227@imp* n4228@b*) (and (eq? (n2fa5@syntax->datum n4224@export) 'export) (eq? (n2fa5@syntax->datum n4226@import) 'import) (eq? (n2fa5@syntax->datum n4222@library) 'library))) n4220@ls/false)) (apply (lambda (n4230@library n4231@name* n4232@export n4233@exp* n4234@import n4235@imp* n4236@b*) (values n4231@name* n4233@exp* n4235@imp* n4236@b*)) n4220@ls/false) ((lambda (n423e@t) ((lambda (n4240@ls/false) (if n4240@ls/false (apply (lambda () (n2f9f@syntax-violation '#f '"malformed library" n421c@e)) n4240@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n423e@t))) (n2eb6@syntax-dispatch n423e@t '_))) n421e@t))) (n2eb6@syntax-dispatch n421e@t '(any each-any (any . each-any) (any . each-any) . each-any)))) n421c@e))) (set! n2f1b@parse-import-spec* ((lambda () ((lambda (n4243@idsyn? n4245@dup-error n4247@merge-substs n4249@exclude* n424b@find* n424d@rem* n424f@remove-dups n4251@parse-library-name n4253@import-library n4255@get-import n4257@add-imports!) (begin (set! n4243@idsyn? (lambda (n444c@x) (symbol? (n2fa5@syntax->datum n444c@x)))) (set! n4245@dup-error (lambda (n444a@name) (n2f9f@syntax-violation 'import '"two imports with different bindings" n444a@name))) (set! n4247@merge-substs (lambda (n4438@s n4439@subst) ((lambda (n443d@insert-to-subst) (begin (set! n443d@insert-to-subst (lambda (n443e@a n443f@subst) ((lambda (n4442@name n4443@label) ((lambda (n4446@t) (if n4446@t ((lambda (n4448@x) (if (eq? (cdr n4448@x) n4443@label) n443f@subst (n4245@dup-error n4442@name))) n4446@t) (cons n443e@a n443f@subst))) (assq n4442@name n443f@subst))) (car n443e@a) (cdr n443e@a)))) (if (null? n4438@s) n4439@subst (n443d@insert-to-subst (car n4438@s) (n4247@merge-substs (cdr n4438@s) n4439@subst))))) '#f))) (set! n4249@exclude* (lambda (n4408@sym* n4409@subst) ((lambda (n440d@exclude) (begin (set! n440d@exclude (lambda (n4426@sym n4427@subst) (if (null? n4427@subst) (n2f9f@syntax-violation 'import '"cannot rename unbound identifier" n4426@sym) (if (eq? n4426@sym (caar n4427@subst)) (values (cdar n4427@subst) (cdr n4427@subst)) ((lambda (n442a@a) (call-with-values (lambda () (n440d@exclude n4426@sym (cdr n4427@subst))) (lambda (n4430@n442d n4431@n442f) ((lambda (n4434@subst n4435@old) (values n4435@old (cons n442a@a n4434@subst))) n4431@n442f n4430@n442d)))) (car n4427@subst)))))) (if (null? n4408@sym*) (values '() n4409@subst) (call-with-values (lambda () (n440d@exclude (car n4408@sym*) n4409@subst)) (lambda (n4412@n440f n4413@n4411) ((lambda (n4416@subst n4417@old) (call-with-values (lambda () (n4249@exclude* (cdr n4408@sym*) n4416@subst)) (lambda (n441e@n441b n441f@n441d) ((lambda (n4422@subst n4423@old*) (values (cons n4417@old n4423@old*) n4422@subst)) n441f@n441d n441e@n441b)))) n4413@n4411 n4412@n440f)))))) '#f))) (set! n424b@find* (lambda (n4400@sym* n4401@subst) (map (lambda (n4404@x) ((lambda (n4406@t) (if n4406@t (cdr n4406@t) (n2f9f@syntax-violation 'import '"cannot find identifier" n4404@x))) (assq n4404@x n4401@subst))) n4400@sym*))) (set! n424d@rem* (lambda (n43f8@sym* n43f9@subst) ((letrec ((n43fc@f (lambda (n43fe@subst) (if (null? n43fe@subst) '() (if (memq (caar n43fe@subst) n43f8@sym*) (n43fc@f (cdr n43fe@subst)) (cons (car n43fe@subst) (n43fc@f (cdr n43fe@subst)))))))) n43fc@f) n43f9@subst))) (set! n424f@remove-dups (lambda (n43f6@ls) (if (null? n43f6@ls) '() (if (memq (car n43f6@ls) (cdr n43f6@ls)) (n424f@remove-dups (cdr n43f6@ls)) (cons (car n43f6@ls) (n424f@remove-dups (cdr n43f6@ls))))))) (set! n4251@parse-library-name (lambda (n430e@spec) ((lambda (n4311@subversion? n4313@subversion-pred n4315@version-pred) (begin (set! n4311@subversion? (lambda (n43f2@x) ((lambda (n43f4@x) (and (integer? n43f4@x) (exact? n43f4@x) (>= n43f4@x '0))) (n2fa5@syntax->datum n43f2@x)))) (set! n4313@subversion-pred (lambda (n4392@x*) ((lambda (n4394@t) ((lambda (n4396@ls/false) (if (and n4396@ls/false (apply (lambda (n4398@n) (n4311@subversion? n4398@n)) n4396@ls/false)) (apply (lambda (n439a@n) (lambda (n439c@x) (= n439c@x (n2fa5@syntax->datum n439a@n)))) n4396@ls/false) ((lambda (n439e@t) ((lambda (n43a0@ls/false) (if (and n43a0@ls/false (apply (lambda (n43a2@p? n43a3@sub*) (eq? (n2fa5@syntax->datum n43a2@p?) 'and)) n43a0@ls/false)) (apply (lambda (n43a6@p? n43a7@sub*) ((lambda (n43aa@p*) (lambda (n43ac@x) (for-all (lambda (n43ae@p) (n43ae@p n43ac@x)) n43aa@p*))) (map n4313@subversion-pred n43a7@sub*))) n43a0@ls/false) ((lambda (n43b0@t) ((lambda (n43b2@ls/false) (if (and n43b2@ls/false (apply (lambda (n43b4@p? n43b5@sub*) (eq? (n2fa5@syntax->datum n43b4@p?) 'or)) n43b2@ls/false)) (apply (lambda (n43b8@p? n43b9@sub*) ((lambda (n43bc@p*) (lambda (n43be@x) (exists (lambda (n43c0@p) (n43c0@p n43be@x)) n43bc@p*))) (map n4313@subversion-pred n43b9@sub*))) n43b2@ls/false) ((lambda (n43c2@t) ((lambda (n43c4@ls/false) (if (and n43c4@ls/false (apply (lambda (n43c6@p? n43c7@sub) (eq? (n2fa5@syntax->datum n43c6@p?) 'not)) n43c4@ls/false)) (apply (lambda (n43ca@p? n43cb@sub) ((lambda (n43ce@p) (lambda (n43d0@x) (not (n43ce@p n43d0@x)))) (n4313@subversion-pred n43cb@sub))) n43c4@ls/false) ((lambda (n43d2@t) ((lambda (n43d4@ls/false) (if (and n43d4@ls/false (apply (lambda (n43d6@p? n43d7@n) (and (eq? (n2fa5@syntax->datum n43d6@p?) '<=) (n4311@subversion? n43d7@n))) n43d4@ls/false)) (apply (lambda (n43da@p? n43db@n) (lambda (n43de@x) (<= n43de@x (n2fa5@syntax->datum n43db@n)))) n43d4@ls/false) ((lambda (n43e0@t) ((lambda (n43e2@ls/false) (if (and n43e2@ls/false (apply (lambda (n43e4@p? n43e5@n) (and (eq? (n2fa5@syntax->datum n43e4@p?) '>=) (n4311@subversion? n43e5@n))) n43e2@ls/false)) (apply (lambda (n43e8@p? n43e9@n) (lambda (n43ec@x) (>= n43ec@x (n2fa5@syntax->datum n43e9@n)))) n43e2@ls/false) ((lambda (n43ee@t) ((lambda (n43f0@ls/false) (if n43f0@ls/false (apply (lambda () (n2f9f@syntax-violation 'import '"invalid sub-version spec" n430e@spec n4392@x*)) n43f0@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n43ee@t))) (n2eb6@syntax-dispatch n43ee@t '_))) n43e0@t))) (n2eb6@syntax-dispatch n43e0@t '(any any)))) n43d2@t))) (n2eb6@syntax-dispatch n43d2@t '(any any)))) n43c2@t))) (n2eb6@syntax-dispatch n43c2@t '(any any)))) n43b0@t))) (n2eb6@syntax-dispatch n43b0@t '(any . each-any)))) n439e@t))) (n2eb6@syntax-dispatch n439e@t '(any . each-any)))) n4394@t))) (n2eb6@syntax-dispatch n4394@t 'any))) n4392@x*))) (set! n4315@version-pred (lambda (n4342@x*) ((lambda (n4344@t) ((lambda (n4346@ls/false) (if n4346@ls/false (apply (lambda () (lambda (n4348@x) '#t)) n4346@ls/false) ((lambda (n434a@t) ((lambda (n434c@ls/false) (if (and n434c@ls/false (apply (lambda (n434e@c n434f@ver*) (eq? (n2fa5@syntax->datum n434e@c) 'and)) n434c@ls/false)) (apply (lambda (n4352@c n4353@ver*) ((lambda (n4356@p*) (lambda (n4358@x) (for-all (lambda (n435a@p) (n435a@p n4358@x)) n4356@p*))) (map n4315@version-pred n4353@ver*))) n434c@ls/false) ((lambda (n435c@t) ((lambda (n435e@ls/false) (if (and n435e@ls/false (apply (lambda (n4360@c n4361@ver*) (eq? (n2fa5@syntax->datum n4360@c) 'or)) n435e@ls/false)) (apply (lambda (n4364@c n4365@ver*) ((lambda (n4368@p*) (lambda (n436a@x) (exists (lambda (n436c@p) (n436c@p n436a@x)) n4368@p*))) (map n4315@version-pred n4365@ver*))) n435e@ls/false) ((lambda (n436e@t) ((lambda (n4370@ls/false) (if (and n4370@ls/false (apply (lambda (n4372@c n4373@ver) (eq? (n2fa5@syntax->datum n4372@c) 'not)) n4370@ls/false)) (apply (lambda (n4376@c n4377@ver) ((lambda (n437a@p) (lambda (n437c@x) (not (n437a@p n437c@x)))) (n4315@version-pred n4377@ver))) n4370@ls/false) ((lambda (n437e@t) ((lambda (n4380@ls/false) (if n4380@ls/false (apply (lambda (n4382@sub*) ((lambda (n4384@p*) (lambda (n4386@x) ((letrec ((n4388@f (lambda (n438a@p* n438b@x) (if (null? n438a@p*) '#t (if (null? n438b@x) '#f (and ((car n438a@p*) (car n438b@x)) (n4388@f (cdr n438a@p*) (cdr n438b@x)))))))) n4388@f) n4384@p* n4386@x))) (map n4313@subversion-pred n4382@sub*))) n4380@ls/false) ((lambda (n438e@t) ((lambda (n4390@ls/false) (if n4390@ls/false (apply (lambda () (n2f9f@syntax-violation 'import '"invalid version spec" n430e@spec n4342@x*)) n4390@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n438e@t))) (n2eb6@syntax-dispatch n438e@t '_))) n437e@t))) (n2eb6@syntax-dispatch n437e@t 'each-any))) n436e@t))) (n2eb6@syntax-dispatch n436e@t '(any any)))) n435c@t))) (n2eb6@syntax-dispatch n435c@t '(any . each-any)))) n434a@t))) (n2eb6@syntax-dispatch n434a@t '(any . each-any)))) n4344@t))) (n2eb6@syntax-dispatch n4344@t '()))) n4342@x*))) ((letrec ((n4316@f (lambda (n4318@x) ((lambda (n431a@t) ((lambda (n431c@ls/false) (if n431c@ls/false (apply (lambda (n431e@version-spec*) (values '() (n4315@version-pred n431e@version-spec*))) n431c@ls/false) ((lambda (n4320@t) ((lambda (n4322@ls/false) (if (and n4322@ls/false (apply (lambda (n4324@x n4325@x*) (n4243@idsyn? n4324@x)) n4322@ls/false)) (apply (lambda (n4328@x n4329@x*) (call-with-values (lambda () (n4316@f n4329@x*)) (lambda (n4330@n432d n4331@n432f) ((lambda (n4334@pred n4335@name) (values (cons (n2fa5@syntax->datum n4328@x) n4335@name) n4334@pred)) n4331@n432f n4330@n432d)))) n4322@ls/false) ((lambda (n4338@t) ((lambda (n433a@ls/false) (if n433a@ls/false (apply (lambda () (values '() (lambda (n433c@x) '#t))) n433a@ls/false) ((lambda (n433e@t) ((lambda (n4340@ls/false) (if n4340@ls/false (apply (lambda () (n2f9f@syntax-violation '#f '"invalid import spec" n430e@spec)) n4340@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n433e@t))) (n2eb6@syntax-dispatch n433e@t '_))) n4338@t))) (n2eb6@syntax-dispatch n4338@t '()))) n4320@t))) (n2eb6@syntax-dispatch n4320@t '(any . any)))) n431a@t))) (n2eb6@syntax-dispatch n431a@t '(each-any)))) n4318@x)))) n4316@f) n430e@spec))) '#f '#f '#f))) (set! n4253@import-library (lambda (n42fe@spec*) (call-with-values (lambda () (n4251@parse-library-name n42fe@spec*)) (lambda (n4304@n4301 n4305@n4303) ((lambda (n4308@pred n4309@name) (begin (if (null? n4309@name) (n2f9f@syntax-violation 'import '"empty library name" n42fe@spec*) (void)) ((lambda (n430c@lib) (begin (if (not n430c@lib) (n2f9f@syntax-violation 'import '"cannot find library with required name" n4309@name) (void)) (if (not (n4308@pred (n2aa0@n2912@library-version n430c@lib))) (n2f9f@syntax-violation 'import '"library does not satisfy version specification" n42fe@spec* n430c@lib) (void)) ((n2f25@imp-collector) n430c@lib) (n2aa4@n291a@library-subst n430c@lib))) (n2ac8@n2962@find-library-by-name n4309@name)))) n4305@n4303 n4304@n4301))))) (set! n4255@get-import (lambda (n4270@spec) ((lambda (n4272@t) ((lambda (n4274@ls/false) (if (and n4274@ls/false (apply (lambda (n4276@x n4277@x*) (not (memq (n2fa5@syntax->datum n4276@x) '(for rename except only prefix library)))) n4274@ls/false)) (apply (lambda (n427a@x n427b@x*) (n4253@import-library (cons n427a@x n427b@x*))) n4274@ls/false) ((lambda (n427e@t) ((lambda (n4280@ls/false) (if (and n4280@ls/false (apply (lambda (n4282@rename n4283@isp n4284@old* n4285@new*) (and (eq? (n2fa5@syntax->datum n4282@rename) 'rename) (for-all n4243@idsyn? n4284@old*) (for-all n4243@idsyn? n4285@new*))) n4280@ls/false)) (apply (lambda (n428a@rename n428b@isp n428c@old* n428d@new*) ((lambda (n4292@subst n4293@old* n4294@new*) ((lambda (n4298@old-label*) ((lambda (n429a@subst) (n4247@merge-substs (map cons n4294@new* n4298@old-label*) n429a@subst)) (n424d@rem* n4293@old* n4292@subst))) (n424b@find* n4293@old* n4292@subst))) (n4255@get-import n428b@isp) (map n2fa5@syntax->datum n428c@old*) (map n2fa5@syntax->datum n428d@new*))) n4280@ls/false) ((lambda (n429c@t) ((lambda (n429e@ls/false) (if (and n429e@ls/false (apply (lambda (n42a0@except n42a1@isp n42a2@sym*) (and (eq? (n2fa5@syntax->datum n42a0@except) 'except) (for-all n4243@idsyn? n42a2@sym*))) n429e@ls/false)) (apply (lambda (n42a6@except n42a7@isp n42a8@sym*) ((lambda (n42ac@subst) (n424d@rem* (map n2fa5@syntax->datum n42a8@sym*) n42ac@subst)) (n4255@get-import n42a7@isp))) n429e@ls/false) ((lambda (n42ae@t) ((lambda (n42b0@ls/false) (if (and n42b0@ls/false (apply (lambda (n42b2@only n42b3@isp n42b4@sym*) (and (eq? (n2fa5@syntax->datum n42b2@only) 'only) (for-all n4243@idsyn? n42b4@sym*))) n42b0@ls/false)) (apply (lambda (n42b8@only n42b9@isp n42ba@sym*) ((lambda (n42be@subst n42bf@sym*) ((lambda (n42c2@sym*) ((lambda (n42c4@lab*) (map cons n42c2@sym* n42c4@lab*)) (n424b@find* n42c2@sym* n42be@subst))) (n424f@remove-dups n42bf@sym*))) (n4255@get-import n42b9@isp) (map n2fa5@syntax->datum n42ba@sym*))) n42b0@ls/false) ((lambda (n42c6@t) ((lambda (n42c8@ls/false) (if (and n42c8@ls/false (apply (lambda (n42ca@prefix n42cb@isp n42cc@p) (and (eq? (n2fa5@syntax->datum n42ca@prefix) 'prefix) (n4243@idsyn? n42cc@p))) n42c8@ls/false)) (apply (lambda (n42d0@prefix n42d1@isp n42d2@p) ((lambda (n42d6@subst n42d7@prefix) (map (lambda (n42da@x) (cons (string->symbol (string-append n42d7@prefix (symbol->string (car n42da@x)))) (cdr n42da@x))) n42d6@subst)) (n4255@get-import n42d1@isp) (symbol->string (n2fa5@syntax->datum n42d2@p)))) n42c8@ls/false) ((lambda (n42dc@t) ((lambda (n42de@ls/false) (if (and n42de@ls/false (apply (lambda (n42e0@library n42e1@spec*) (eq? (n2fa5@syntax->datum n42e0@library) 'library)) n42de@ls/false)) (apply (lambda (n42e4@library n42e5@spec*) (n4253@import-library n42e5@spec*)) n42de@ls/false) ((lambda (n42e8@t) ((lambda (n42ea@ls/false) (if (and n42ea@ls/false (apply (lambda (n42ec@for n42ed@isp n42ee@rest) (eq? (n2fa5@syntax->datum n42ec@for) 'for)) n42ea@ls/false)) (apply (lambda (n42f2@for n42f3@isp n42f4@rest) (n4255@get-import n42f3@isp)) n42ea@ls/false) ((lambda (n42f8@t) ((lambda (n42fa@ls/false) (if n42fa@ls/false (apply (lambda (n42fc@spec) (n2f9f@syntax-violation 'import '"invalid import spec" n42fc@spec)) n42fa@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n42f8@t))) (n2eb6@syntax-dispatch n42f8@t 'any))) n42e8@t))) (n2eb6@syntax-dispatch n42e8@t '(any any . any)))) n42dc@t))) (n2eb6@syntax-dispatch n42dc@t '(any each-any)))) n42c6@t))) (n2eb6@syntax-dispatch n42c6@t '(any any any)))) n42ae@t))) (n2eb6@syntax-dispatch n42ae@t '(any any . each-any)))) n429c@t))) (n2eb6@syntax-dispatch n429c@t '(any any . each-any)))) n427e@t))) (n2eb6@syntax-dispatch n427e@t '(any any . #(each (any any)))))) n4272@t))) (n2eb6@syntax-dispatch n4272@t '(any . each-any)))) n4270@spec))) (set! n4257@add-imports! (lambda (n4260@imp n4261@h) ((lambda (n4264@subst) (for-each (lambda (n4266@x) ((lambda (n4268@name n4269@label) ((lambda (n426c@t) (if n426c@t ((lambda (n426e@l) (if (not (eq? n426e@l n4269@label)) (n4245@dup-error n4268@name) (void))) n426c@t) (hashtable-set! n4261@h n4268@name n4269@label))) (hashtable-ref n4261@h n4268@name '#f))) (car n4266@x) (cdr n4266@x))) n4264@subst)) (n4255@get-import n4260@imp)))) (lambda (n4258@imp*) ((letrec ((n425a@f (lambda (n425c@imp* n425d@h) (if (null? n425c@imp*) (hashtable-entries n425d@h) (begin (n4257@add-imports! (car n425c@imp*) n425d@h) (n425a@f (cdr n425c@imp*) n425d@h)))))) n425a@f) n4258@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! n2f1d@make-top-rib (lambda (n444e@names n444f@labels) ((lambda (n4452@rib) (begin (vector-for-each (lambda (n4454@name n4455@label) (begin (if (not (symbol? n4454@name)) (error 'make-top-rib '"BUG: not a symbol" n4454@name) (void)) (n2c5e@extend-rib/nc! n4452@rib (n2c75@make-stx n4454@name n2c27@top-mark* '() '()) n4455@label))) n444e@names n444f@labels) n4452@rib)) (n2c5a@make-empty-rib)))) (set! n2f1f@make-collector (lambda () ((lambda (n4458@ls) (lambda n445c ((lambda (n445d) (if (= n445d '0) (apply (lambda () n4458@ls) n445c) (if (= n445d '1) (apply (lambda (n445a@x) (set! n4458@ls (n2c20@set-cons n445a@x n4458@ls))) n445c) (error 'apply '"invalid arg count")))) (length n445c)))) '()))) (set! n2f21@inv-collector (n2855@n277f@make-parameter (lambda n445e@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (n4460@x) (begin (if (not (procedure? n4460@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" n4460@x) (void)) n4460@x)))) (set! n2f23@vis-collector (n2855@n277f@make-parameter (lambda n4462@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (n4464@x) (begin (if (not (procedure? n4464@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" n4464@x) (void)) n4464@x)))) (set! n2f25@imp-collector (n2855@n277f@make-parameter (lambda n4466@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (n4468@x) (begin (if (not (procedure? n4468@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" n4468@x) (void)) n4468@x)))) (set! n2f27@chi-library-internal (lambda (n446a@e* n446b@rib n446c@top?) (call-with-values (lambda () (n2f11@chi-body* n446a@e* '() '() '() '() '() '() '() n446b@rib n446c@top?)) (lambda (n4480@n4471 n4481@n4473 n4482@n4475 n4483@n4477 n4484@n4479 n4485@n447b n4486@n447d n4487@n447f) ((lambda (n4490@exp* n4491@_kwd* n4492@mod** n4493@rhs* n4494@lex* n4495@mr n4496@r n4497@e*) (values (append (apply append (reverse n4492@mod**)) n4497@e*) n4496@r n4495@mr (reverse n4494@lex*) (reverse n4493@rhs*) n4490@exp*)) n4487@n447f n4486@n447d n4485@n447b n4484@n4479 n4483@n4477 n4482@n4475 n4481@n4473 n4480@n4471))))) (set! n2f29@chi-interaction-expr (lambda (n44a0@e n44a1@rib n44a2@r) (call-with-values (lambda () (n2f11@chi-body* (list n44a0@e) n44a2@r n44a2@r '() '() '() '() '() n44a1@rib '#t)) (lambda (n44b6@n44a7 n44b7@n44a9 n44b8@n44ab n44b9@n44ad n44ba@n44af n44bb@n44b1 n44bc@n44b3 n44bd@n44b5) ((lambda (n44c6@_exp* n44c7@_kwd* n44c8@mod** n44c9@rhs* n44ca@lex* n44cb@mr n44cc@r n44cd@e*) ((lambda (n44d6@e*) ((lambda (n44d8@e) (values n44d8@e n44cc@r)) (if (null? n44d6@e*) (n2c0b@n2b7b@build-void) (if (null? (cdr n44d6@e*)) (car n44d6@e*) (n2c0a@n2b79@build-sequence '#f n44d6@e*))))) (n2ee6@expand-interaction-rhs*/init* (reverse n44ca@lex*) (reverse n44c9@rhs*) (append (apply append (reverse n44c8@mod**)) n44cd@e*) n44cc@r n44cb@mr))) n44bd@n44b5 n44bc@n44b3 n44bb@n44b1 n44ba@n44af n44b9@n44ad n44b8@n44ab n44b7@n44a9 n44b6@n44a7))))) (set! n2f2b@library-body-expander (lambda (n44da@name n44db@main-exp* n44dc@imp* n44dd@b* n44de@top?) ((lambda (n44e5@itc) (begin (set! n44e5@itc (n2f1f@make-collector)) ((lambda (n44ee@n44e7 n44ef@n44e9 n44f0@n44eb n44f1@n44ed) ((lambda (n44f6@swap) (dynamic-wind n44f6@swap (lambda () (call-with-values (lambda () (n2f1b@parse-import-spec* n44dc@imp*)) (lambda (n44fc@n44f9 n44fd@n44fb) ((lambda (n4500@subst-labels n4501@subst-names) ((lambda (n4504@rib) ((lambda (n4507@wrap) (begin (set! n4507@wrap (lambda (n4582@x) (n2c75@make-stx n4582@x n2c27@top-mark* (list n4504@rib) '()))) ((lambda (n4508@b* n4509@main-exp* n450a@rtc n450b@vtc) ((lambda (n4518@n4511 n4519@n4513 n451a@n4515 n451b@n4517) ((lambda (n4520@swap) (dynamic-wind n4520@swap (lambda () (call-with-values (lambda () (n2f27@chi-library-internal n4508@b* n4504@rib n44de@top?)) (lambda (n452e@n4523 n452f@n4525 n4530@n4527 n4531@n4529 n4532@n452b n4533@n452d) ((lambda (n453a@internal-exp* n453b@rhs* n453c@lex* n453d@mr n453e@r n453f@init*) (call-with-values (lambda () (n2f15@parse-exports (append n4509@main-exp* n453a@internal-exp*))) (lambda (n454a@n4547 n454b@n4549) ((lambda (n454e@exp-id* n454f@exp-name*) (begin (n2c62@seal-rib! n4504@rib) ((lambda (n4552@init*) ((lambda (n4554@rhs*) ((lambda () (begin (n2c64@unseal-rib! n4504@rib) ((lambda (n4556@loc* n4557@export-subst) ((lambda (n455b@errstr) (begin (set! n455b@errstr '"attempt to export mutated variable") (call-with-values (lambda () (n2f8b@make-export-env/macros n453c@lex* n4556@loc* n453e@r)) (lambda (n4562@n455d n4563@n455f n4564@n4561) ((lambda (n4568@macro* n4569@global* n456a@export-env) (begin (for-each (lambda (n456e@s) ((lambda (n4570@name n4571@label) ((lambda (n4574@p) (if n4574@p ((lambda (n4576@b) ((lambda (n4578@type) (if (eq? n4578@type 'mutable) (n2f9f@syntax-violation 'export n455b@errstr n4570@name) (void))) (car n4576@b))) (cdr n4574@p)) (void))) (assq n4571@label n456a@export-env))) (car n456e@s) (cdr n456e@s))) n4557@export-subst) ((lambda (n457a@invoke-body n457b@invoke-definitions) (values (n44e5@itc) (n450a@rtc) (n450b@vtc) (n2c0a@n2b79@build-sequence '#f (append n457b@invoke-definitions (list n457a@invoke-body))) n4568@macro* n4557@export-subst n456a@export-env)) (n2c0d@n2b7f@build-letrec* '#f n453c@lex* n4554@rhs* (n2f87@build-exports n4569@global* n4552@init*)) (map n2c06@n2ad6@build-global-define (map cdr n4569@global*))))) n4564@n4561 n4563@n455f n4562@n455d))))) '#f)) (map n2c2d@gen-global n453c@lex*) (n2f89@make-export-subst n454f@exp-name* n454e@exp-id*)))))) (n2ee8@chi-rhs* n453b@rhs* n453e@r n453d@mr))) (n2ed4@chi-expr* n453f@init* n453e@r n453d@mr)))) n454b@n4549 n454a@n4547)))) n4533@n452d n4532@n452b n4531@n4529 n4530@n4527 n452f@n4525 n452e@n4523)))) n4520@swap)) (lambda () (begin ((lambda (n457e@t) (begin (n4518@n4511 n451a@n4515) (set! n451a@n4515 n457e@t))) (n4518@n4511)) ((lambda (n4580@t) (begin (n4519@n4513 n451b@n4517) (set! n451b@n4517 n4580@t))) (n4519@n4513)))))) n2f21@inv-collector n2f23@vis-collector n450a@rtc n450b@vtc)) (map n4507@wrap n44dd@b*) (map n4507@wrap n44db@main-exp*) (n2f1f@make-collector) (n2f1f@make-collector)))) '#f)) (n2f1d@make-top-rib n4501@subst-names n4500@subst-labels))) n44fd@n44fb n44fc@n44f9)))) n44f6@swap)) (lambda () (begin ((lambda (n4584@t) (begin (n44ee@n44e7 n44f0@n44eb) (set! n44f0@n44eb n4584@t))) (n44ee@n44e7)) ((lambda (n4586@t) (begin (n44ef@n44e9 n44f1@n44ed) (set! n44f1@n44ed n4586@t))) (n44ef@n44e9)))))) n2f25@imp-collector n2fad@top-level-context n44e5@itc '#f))) '#f))) (set! n2f2d@core-library-expander (lambda (n4588@e n4589@verify-name) (call-with-values (lambda () (n2f19@parse-library n4588@e)) (lambda (n4594@n458d n4595@n458f n4596@n4591 n4597@n4593) ((lambda (n459c@b* n459d@imp* n459e@exp* n459f@name*) (call-with-values (lambda () (n2f17@parse-library-name n459f@name*)) (lambda (n45a8@n45a5 n45a9@n45a7) ((lambda (n45ac@ver n45ad@name) (begin (n4589@verify-name n45ad@name) (call-with-values (lambda () (n2f2b@library-body-expander n45ad@name n459e@exp* n459d@imp* n459c@b* '#f)) (lambda (n45be@n45b1 n45bf@n45b3 n45c0@n45b5 n45c1@n45b7 n45c2@n45b9 n45c3@n45bb n45c4@n45bd) ((lambda (n45cc@export-env n45cd@export-subst n45ce@visit-code n45cf@invoke-code n45d0@visit-req* n45d1@invoke-req* n45d2@imp*) (values n45ad@name n45ac@ver n45d2@imp* n45d1@invoke-req* n45d0@visit-req* n45cf@invoke-code n45ce@visit-code n45cd@export-subst n45cc@export-env)) n45c4@n45bd n45c3@n45bb n45c2@n45b9 n45c1@n45b7 n45c0@n45b5 n45bf@n45b3 n45be@n45b1))))) n45a9@n45a7 n45a8@n45a5)))) n4597@n4593 n4596@n4591 n4595@n458f n4594@n458d))))) (set! n2f2f@parse-top-level-program (lambda (n45da@e*) ((lambda (n45dc@t) ((lambda (n45de@ls/false) (if (and n45de@ls/false (apply (lambda (n45e0@import n45e1@imp* n45e2@b*) (eq? (n2fa5@syntax->datum n45e0@import) 'import)) n45de@ls/false)) (apply (lambda (n45e6@import n45e7@imp* n45e8@b*) (values n45e7@imp* n45e8@b*)) n45de@ls/false) ((lambda (n45ec@t) ((lambda (n45ee@ls/false) (if (and n45ee@ls/false (apply (lambda (n45f0@import n45f1@x n45f2@y) (eq? (n2fa5@syntax->datum n45f0@import) 'import)) n45ee@ls/false)) (apply (lambda (n45f6@import n45f7@x n45f8@y) (n2f9f@syntax-violation 'expander '"invalid syntax of top-level program" (n2ca5@syntax-car n45da@e*))) n45ee@ls/false) ((lambda (n45fc@t) ((lambda (n45fe@ls/false) (if n45fe@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) n45fe@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n45fc@t))) (n2eb6@syntax-dispatch n45fc@t '_))) n45ec@t))) (n2eb6@syntax-dispatch n45ec@t '((any . any) . any)))) n45dc@t))) (n2eb6@syntax-dispatch n45dc@t '((any . each-any) . each-any)))) n45da@e*))) (set! n2f31@top-level-expander (lambda (n4600@e*) (call-with-values (lambda () (n2f2f@parse-top-level-program n4600@e*)) (lambda (n4606@n4603 n4607@n4605) ((lambda (n460a@b* n460b@imp*) (call-with-values (lambda () (n2f2b@library-body-expander '() '() n460b@imp* n460a@b* '#t)) (lambda (n461c@n460f n461d@n4611 n461e@n4613 n461f@n4615 n4620@n4617 n4621@n4619 n4622@n461b) ((lambda (n462a@export-env n462b@export-subst n462c@visit-code n462d@invoke-code n462e@visit-req* n462f@invoke-req* n4630@imp*) (values n462f@invoke-req* n462d@invoke-code)) n4622@n461b n4621@n4619 n4620@n4617 n461f@n4615 n461e@n4613 n461d@n4611 n461c@n460f)))) n4607@n4605 n4606@n4603))))) (set! n2f37@n2f32 (make-record-type-descriptor 'env '#f 'n2f35 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! n2f39@n2f34 '#f) (set! n2f3b@n2f33 (make-record-constructor-descriptor n2f37@n2f32 '#f n2f39@n2f34)) (set! n2f3e@env? (record-predicate n2f37@n2f32)) (set! n2f40@make-env (record-constructor n2f3b@n2f33)) (set! n2f42@env-names (record-accessor n2f37@n2f32 '0)) (set! n2f44@env-labels (record-accessor n2f37@n2f32 '1)) (set! n2f46@env-itc (record-accessor n2f37@n2f32 '2)) (set! n2f48@set-env-names! (record-mutator n2f37@n2f32 '0)) (set! n2f4a@set-env-labels! (record-mutator n2f37@n2f32 '1)) (set! n2f4c@set-env-itc! (record-mutator n2f37@n2f32 '2)) (set! n2f4e@rp (n2852@n2779@make-record-printer 'env (lambda (n4638@x n4639@p n463a@wr) (display '"#<environment>" n4639@p)))) (set! n2f54@n2f4f (make-record-type-descriptor 'interaction-env '#f 'n2f52 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! n2f56@n2f51 '#f) (set! n2f58@n2f50 (make-record-constructor-descriptor n2f54@n2f4f '#f n2f56@n2f51)) (set! n2f5b@interaction-env? (record-predicate n2f54@n2f4f)) (set! n2f5d@make-interaction-env (record-constructor n2f58@n2f50)) (set! n2f5f@interaction-env-rib (record-accessor n2f54@n2f4f '0)) (set! n2f61@interaction-env-r (record-accessor n2f54@n2f4f '1)) (set! n2f63@interaction-env-locs (record-accessor n2f54@n2f4f '2)) (set! n2f65@set-interaction-env-rib! (record-mutator n2f54@n2f4f '0)) (set! n2f67@set-interaction-env-r! (record-mutator n2f54@n2f4f '1)) (set! n2f69@set-interaction-env-locs! (record-mutator n2f54@n2f4f '2)) (set! n2f6b@rp (n2852@n2779@make-record-printer 'interaction-env (lambda (n463e@x n463f@p n4640@wr) (display '"#<environment>" n463f@p)))) (set! n2f6d@interaction-environment-symbols (lambda () (n2f75@environment-symbols (n2fab@interaction-environment)))) (set! n2f6f@environment-bindings (lambda (n4644@e) (vector->list (vector-map (lambda (n4646@name n4647@label) (n2f71@parse-binding (cons n4646@name (n2ace@n296e@imported-label->binding n4647@label)))) (n2f42@env-names n4644@e) (n2f44@env-labels n4644@e))))) (set! n2f71@parse-binding (lambda (n464a@b) (cons (car n464a@b) ((lambda (n464c@t) (if (memv n464c@t '(core-prim global)) 'procedure (if (memv n464c@t '(core-macro macro global-macro)) 'syntax (if (memv n464c@t '($core-rtd)) 'record (if (eq? (car n464a@b) (cadr n464a@b)) 'syntax 'unknown))))) (cadr n464a@b))))) (set! n2f73@environment? (lambda (n464e@x) (or (n2f3e@env? n464e@x) (n2f5b@interaction-env? n464e@x)))) (set! n2f75@environment-symbols (lambda (n4650@x) (if (n2f3e@env? n4650@x) (vector->list (n2f42@env-names n4650@x)) (if (n2f5b@interaction-env? n4650@x) (map values (n2c46@rib-sym* (n2f5f@interaction-env-rib n4650@x))) (assertion-violation 'environment-symbols '"not an environment" n4650@x))))) (set! n2f77@environment (lambda n4652@imp* ((lambda (n4654@itc) ((lambda (n465a@n4657 n465b@n4659) ((lambda (n465e@swap) (dynamic-wind n465e@swap (lambda () (call-with-values (lambda () (n2f1b@parse-import-spec* n4652@imp*)) (lambda (n4664@n4661 n4665@n4663) ((lambda (n4668@subst-labels n4669@subst-names) (n2f40@make-env n4669@subst-names n4668@subst-labels n4654@itc)) n4665@n4663 n4664@n4661)))) n465e@swap)) (lambda () ((lambda (n466c@t) (begin (n465a@n4657 n465b@n4659) (set! n465b@n4659 n466c@t))) (n465a@n4657))))) n2f25@imp-collector n4654@itc)) (n2f1f@make-collector)))) (set! n2f79@null-environment (lambda (n466e@n) (begin (if (not (eqv? n466e@n '5)) (assertion-violation 'null-environment '"not 5" n466e@n) (void)) (n2f77@environment '(psyntax null-environment-5))))) (set! n2f7b@scheme-report-environment (lambda (n4670@n) (begin (if (not (eqv? n4670@n '5)) (assertion-violation 'scheme-report-environment '"not 5" n4670@n) (void)) (n2f77@environment '(psyntax scheme-report-environment-5))))) (set! n2f7d@expand (lambda (n4672@x n4673@env) (if (n2f3e@env? n4673@env) ((lambda (n4676@rib) ((lambda (n4678@x n4679@itc n467a@rtc n467b@vtc) ((lambda (n4680@x) (begin (n2c62@seal-rib! n4676@rib) (values n4680@x (n467a@rtc)))) ((lambda (n4692@n4683 n4693@n4685 n4694@n4687 n4695@n4689 n4696@n468b n4697@n468d n4698@n468f n4699@n4691) ((lambda (n46a2@swap) (dynamic-wind n46a2@swap (lambda () (n2ed8@chi-expr n4678@x '() '())) n46a2@swap)) (lambda () (begin ((lambda (n46a4@t) (begin (n4692@n4683 n4696@n468b) (set! n4696@n468b n46a4@t))) (n4692@n4683)) ((lambda (n46a6@t) (begin (n4693@n4685 n4697@n468d) (set! n4697@n468d n46a6@t))) (n4693@n4685)) ((lambda (n46a8@t) (begin (n4694@n4687 n4698@n468f) (set! n4698@n468f n46a8@t))) (n4694@n4687)) ((lambda (n46aa@t) (begin (n4695@n4689 n4699@n4691) (set! n4699@n4691 n46aa@t))) (n4695@n4689)))))) n2fad@top-level-context n2f21@inv-collector n2f23@vis-collector n2f25@imp-collector '#f n467a@rtc n467b@vtc n4679@itc))) (n2c75@make-stx n4672@x n2c27@top-mark* (list n4676@rib) '()) (n2f46@env-itc n4673@env) (n2f1f@make-collector) (n2f1f@make-collector))) (n2f1d@make-top-rib (n2f42@env-names n4673@env) (n2f44@env-labels n4673@env))) (if (n2f5b@interaction-env? n4673@env) ((lambda (n46ac@rib n46ad@r n46ae@rtc) ((lambda (n46b2@x) (call-with-values (lambda () ((lambda (n46c8@n46b9 n46c9@n46bb n46ca@n46bd n46cb@n46bf n46cc@n46c1 n46cd@n46c3 n46ce@n46c5 n46cf@n46c7) ((lambda (n46d8@swap) (dynamic-wind n46d8@swap (lambda () (n2f29@chi-interaction-expr n46b2@x n46ac@rib n46ad@r)) n46d8@swap)) (lambda () (begin ((lambda (n46da@t) (begin (n46c8@n46b9 n46cc@n46c1) (set! n46cc@n46c1 n46da@t))) (n46c8@n46b9)) ((lambda (n46dc@t) (begin (n46c9@n46bb n46cd@n46c3) (set! n46cd@n46c3 n46dc@t))) (n46c9@n46bb)) ((lambda (n46de@t) (begin (n46ca@n46bd n46ce@n46c5) (set! n46ce@n46c5 n46de@t))) (n46ca@n46bd)) ((lambda (n46e0@t) (begin (n46cb@n46bf n46cf@n46c7) (set! n46cf@n46c7 n46e0@t))) (n46cb@n46bf)))))) n2fad@top-level-context n2f21@inv-collector n2f23@vis-collector n2f25@imp-collector n4673@env n46ae@rtc (n2f1f@make-collector) (n2f1f@make-collector))) (lambda (n46e2@n46b5 n46e3@n46b7) ((lambda (n46e6@r^ n46e7@e) (begin (n2f67@set-interaction-env-r! n4673@env n46e6@r^) (values n46e7@e (n46ae@rtc)))) n46e3@n46b7 n46e2@n46b5)))) (n2c75@make-stx n4672@x n2c27@top-mark* (list n46ac@rib) '()))) (n2f5f@interaction-env-rib n4673@env) (n2f61@interaction-env-r n4673@env) (n2f1f@make-collector)) (assertion-violation 'expand '"not an environment" n4673@env))))) (set! n2f7f@eval (lambda (n46ea@x n46eb@env) (begin (if (not (n2f73@environment? n46eb@env)) (error 'eval '"not an environment" n46eb@env) (void)) (call-with-values (lambda () (n2f7d@expand n46ea@x n46eb@env)) (lambda (n46f2@n46ef n46f3@n46f1) ((lambda (n46f6@invoke-req* n46f7@x) (begin (for-each n2acf@n2970@invoke-library n46f6@invoke-req*) (eval-core (n28a9@n2861@expanded->core n46f7@x)))) n46f3@n46f1 n46f2@n46ef)))))) (set! n2f81@library-expander (lambda n4768 ((lambda (n4769) (if (= n4769 '3) (apply (lambda (n46fa@x n46fb@filename n46fc@verify-name) ((lambda (n4701@build-visit-code n4703@visit!) (begin (set! n4701@build-visit-code (lambda (n4756@macro*) (if (null? n4756@macro*) (n2c0b@n2b7b@build-void) (n2c0a@n2b79@build-sequence '#f (map (lambda (n4758@x) ((lambda (n475a@loc n475b@src) (list 'set! n475a@loc n475b@src)) (car n4758@x) (cddr n4758@x))) n4756@macro*))))) (set! n4703@visit! (lambda (n474e@macro*) (for-each (lambda (n4750@x) ((lambda (n4752@loc n4753@proc) (set-symbol-value! n4752@loc n4753@proc)) (car n4750@x) (cadr n4750@x))) n474e@macro*))) (call-with-values (lambda () (n2f2d@core-library-expander n46fa@x n46fc@verify-name)) (lambda (n4716@n4705 n4717@n4707 n4718@n4709 n4719@n470b n471a@n470d n471b@n470f n471c@n4711 n471d@n4713 n471e@n4715) ((lambda (n4728@export-env n4729@export-subst n472a@macro* n472b@invoke-code n472c@vis* n472d@inv* n472e@imp* n472f@ver n4730@name) ((lambda (n473a@id n473b@name n473c@ver n473d@imp* n473e@vis* n473f@inv* n4740@visit-proc n4741@invoke-proc n4742@visit-code n4743@invoke-code) (begin (n2acd@n296c@install-library n473a@id n473b@name n473c@ver n473d@imp* n473e@vis* n473f@inv* n4729@export-subst n4728@export-env n4740@visit-proc n4741@invoke-proc n4742@visit-code n4743@invoke-code '#t n46fb@filename) (values n473a@id n473b@name n473c@ver n473d@imp* n473e@vis* n473f@inv* n4743@invoke-code n4742@visit-code n4729@export-subst n4728@export-env))) (gensym) n4730@name n472f@ver (map n2ad3@n2978@library-spec n472e@imp*) (map n2ad3@n2978@library-spec n472c@vis*) (map n2ad3@n2978@library-spec n472d@inv*) (lambda () (n4703@visit! n472a@macro*)) (lambda () (eval-core (n28a9@n2861@expanded->core n472b@invoke-code))) (n4701@build-visit-code n472a@macro*) n472b@invoke-code)) n471e@n4715 n471d@n4713 n471c@n4711 n471b@n470f n471a@n470d n4719@n470b n4718@n4709 n4717@n4707 n4716@n4705))))) '#f '#f)) n4768) (if (= n4769 '2) (apply (lambda (n475e@x n475f@filename) (n2f81@library-expander n475e@x n475f@filename (lambda (n4762@x) (values)))) n4768) (if (= n4769 '1) (apply (lambda (n4764@x) (n2f81@library-expander n4764@x '#f (lambda (n4766@x) (values)))) n4768) (error 'apply '"invalid arg count"))))) (length n4768)))) (set! n2f83@boot-library-expand (lambda (n476a@x) (call-with-values (lambda () (n2f81@library-expander n476a@x)) (lambda (n4780@n476d n4781@n476f n4782@n4771 n4783@n4773 n4784@n4775 n4785@n4777 n4786@n4779 n4787@n477b n4788@n477d n4789@n477f) ((lambda (n4794@export-env n4795@export-subst n4796@visit-code n4797@invoke-code n4798@inv* n4799@vis* n479a@imp* n479b@ver n479c@name n479d@id) (values n479c@name n4797@invoke-code n4795@export-subst n4794@export-env)) n4789@n477f n4788@n477d n4787@n477b n4786@n4779 n4785@n4777 n4784@n4775 n4783@n4773 n4782@n4771 n4781@n476f n4780@n476d))))) (set! n2f85@rev-map-append (lambda (n47a8@f n47a9@ls n47aa@ac) (if (null? n47a9@ls) n47aa@ac (n2f85@rev-map-append n47a8@f (cdr n47a9@ls) (cons (n47a8@f (car n47a9@ls)) n47aa@ac))))) (set! n2f87@build-exports (lambda (n47ae@lex*+loc* n47af@init*) (n2c0a@n2b79@build-sequence '#f (cons (n2c0b@n2b7b@build-void) (n2f85@rev-map-append (lambda (n47b2@x) (list 'set! (cdr n47b2@x) (car n47b2@x))) n47ae@lex*+loc* n47af@init*))))) (set! n2f89@make-export-subst (lambda (n47b4@name* n47b5@id*) (map (lambda (n47b8@name n47b9@id) ((lambda (n47bc@label) (begin (if (not n47bc@label) (n2f9f@syntax-violation '#f '"cannot export unbound identifier" n47b9@id) (void)) (cons n47b8@name n47bc@label))) (n2cc5@id->label n47b9@id))) n47b4@name* n47b5@id*))) (set! n2f8b@make-export-env/macros (lambda (n47be@lex* n47bf@loc* n47c0@r) ((lambda (n47c5@lookup) (begin (set! n47c5@lookup (lambda (n47e2@x) ((letrec ((n47e4@f (lambda (n47e6@x n47e7@lex* n47e8@loc*) (if (pair? n47e7@lex*) (if (eq? n47e6@x (car n47e7@lex*)) (car n47e8@loc*) (n47e4@f n47e6@x (cdr n47e7@lex*) (cdr n47e8@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) n47e4@f) n47e2@x n47be@lex* n47bf@loc*))) ((letrec ((n47c6@f (lambda (n47c8@r n47c9@env n47ca@global* n47cb@macro*) (if (null? n47c8@r) (values n47c9@env n47ca@global* n47cb@macro*) ((lambda (n47d0@x) ((lambda (n47d2@label n47d3@b) ((lambda (n47d6@t) (if (memv n47d6@t '(lexical)) ((lambda (n47d8@v) ((lambda (n47da@loc n47db@type) (n47c6@f (cdr n47c8@r) (cons (cons* n47d2@label n47db@type n47da@loc) n47c9@env) (cons (cons (n2e42@lexical-var n47d8@v) n47da@loc) n47ca@global*) n47cb@macro*)) (n47c5@lookup (n2e42@lexical-var n47d8@v)) (if (n2e44@lexical-mutable? n47d8@v) 'mutable 'global))) (n2ccf@binding-value n47d3@b)) (if (memv n47d6@t '(local-macro)) ((lambda (n47de@loc) (n47c6@f (cdr n47c8@r) (cons (cons* n47d2@label 'global-macro n47de@loc) n47c9@env) n47ca@global* (cons (cons n47de@loc (n2ccf@binding-value n47d3@b)) n47cb@macro*))) (gensym)) (if (memv n47d6@t '(local-macro!)) ((lambda (n47e0@loc) (n47c6@f (cdr n47c8@r) (cons (cons* n47d2@label 'global-macro! n47e0@loc) n47c9@env) n47ca@global* (cons (cons n47e0@loc (n2ccf@binding-value n47d3@b)) n47cb@macro*))) (gensym)) (if (memv n47d6@t '($rtd $module)) (n47c6@f (cdr n47c8@r) (cons n47d0@x n47c9@env) n47ca@global* n47cb@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (n2ccd@binding-type n47d3@b) (n2ccf@binding-value n47d3@b))))))) (n2ccd@binding-type n47d3@b))) (car n47d0@x) (cdr n47d0@x))) (car n47c8@r)))))) n47c6@f) n47c0@r '() '() '()))) '#f))) (set! n2f8d@generate-temporaries (lambda (n47ec@ls) ((lambda (n47ee@t) ((lambda (n47f0@ls/false) (if n47f0@ls/false (apply (lambda (n47f2@ls) (map (lambda (n47f4@x) (n2c75@make-stx ((lambda (n47f6@x) (if (or (symbol? n47f6@x) (string? n47f6@x)) (gensym n47f6@x) (gensym 't))) (n2fa5@syntax->datum n47f4@x)) n2c27@top-mark* '() '())) n47f2@ls)) n47f0@ls/false) ((lambda (n47f8@t) ((lambda (n47fa@ls/false) (if n47fa@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) n47fa@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n47f8@t))) (n2eb6@syntax-dispatch n47f8@t '_))) n47ee@t))) (n2eb6@syntax-dispatch n47ee@t 'each-any))) n47ec@ls))) (set! n2f8f@free-identifier=? (lambda (n47fc@x n47fd@y) (if (n2cab@id? n47fc@x) (if (n2cab@id? n47fd@y) (n2cb3@free-id=? n47fc@x n47fd@y) (assertion-violation 'free-identifier=? '"not an identifier" n47fd@y)) (assertion-violation 'free-identifier=? '"not an identifier" n47fc@x)))) (set! n2f91@bound-identifier=? (lambda (n4800@x n4801@y) (if (n2cab@id? n4800@x) (if (n2cab@id? n4801@y) (n2cb1@bound-id=? n4800@x n4801@y) (assertion-violation 'bound-identifier=? '"not an identifier" n4801@y)) (assertion-violation 'bound-identifier=? '"not an identifier" n4800@x)))) (set! n2f93@make-source-condition (lambda (n4804@x) ((lambda (n480e@n4809 n4810@n480b n4812@n480a n4815@n4808 n4817@make-source-condition n4819@n4806 n481b@n4807 n481d@source-condition? n481f@source-filename n4821@source-character) (begin (set! n480e@n4809 (make-record-type-descriptor '&source-information n4c6c@n49b3@&condition-rtd 'n480c '#f '#f '#((immutable file-name) (immutable character)))) (set! n4810@n480b '#f) (set! n4812@n480a (make-record-constructor-descriptor n480e@n4809 n4c6d@n49b5@&condition-rcd n4810@n480b)) (set! n4815@n4808 (record-predicate n480e@n4809)) (set! n4817@make-source-condition (record-constructor n4812@n480a)) (set! n4819@n4806 (record-accessor n480e@n4809 '0)) (set! n481b@n4807 (record-accessor n480e@n4809 '1)) (set! n481d@source-condition? (condition-predicate n480e@n4809)) (set! n481f@source-filename (condition-accessor n480e@n4809 n4819@n4806)) (set! n4821@source-character (condition-accessor n480e@n4809 n481b@n4807)) (if (pair? n4804@x) (n4817@make-source-condition (car n4804@x) (cdr n4804@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! n2f95@extract-position-condition (lambda (n4822@x) (n2f93@make-source-condition (n2f97@expression-position n4822@x)))) (set! n2f97@expression-position (lambda (n4824@x) (and (n2c73@stx? n4824@x) ((lambda (n4826@x) (and (n284a@n2769@annotation? n4826@x) (n284b@n276b@annotation-source n4826@x))) (n2c77@stx-expr n4824@x))))) (set! n2f99@assertion-error (lambda (n4828@expr n4829@pos) (raise (condition (n4c9c@n4a77@make-assertion-violation) (n4cae@n4aa9@make-who-condition 'assert) (n4c72@n4a0a@make-message-condition '"assertion failed") (n4ca4@n4a8e@make-irritants-condition (list n4828@expr)) (n2f93@make-source-condition n4829@pos))))) (set! n2f9b@syntax-error (lambda (n482c@x . n482e@args) (begin (if (not (for-all string? n482e@args)) (assertion-violation 'syntax-error '"invalid argument" n482e@args) (void)) (raise (condition (n4c72@n4a0a@make-message-condition (if (null? n482e@args) '"invalid syntax" (apply string-append n482e@args))) (n4cd0@n4b05@make-syntax-violation (n2fa5@syntax->datum n482c@x) '#f) (n2f95@extract-position-condition n482c@x)))))) (set! n2f9d@syntax-violation* (lambda (n4830@who n4831@msg n4832@form n4833@condition-object) (begin (if (not (string? n4831@msg)) (assertion-violation 'syntax-violation '"message is not a string" n4831@msg) (void)) ((lambda (n4838@who) (raise (condition (if n4838@who (n4cae@n4aa9@make-who-condition n4838@who) (condition)) (n4c72@n4a0a@make-message-condition n4831@msg) n4833@condition-object (n2f95@extract-position-condition n4832@form)))) (if (or (string? n4830@who) (symbol? n4830@who)) n4830@who (if (not n4830@who) ((lambda (n483a@t) ((lambda (n483c@ls/false) (if (and n483c@ls/false (apply (lambda (n483e@id) (n2cab@id? n483e@id)) n483c@ls/false)) (apply (lambda (n4840@id) (n2fa5@syntax->datum n4840@id)) n483c@ls/false) ((lambda (n4842@t) ((lambda (n4844@ls/false) (if (and n4844@ls/false (apply (lambda (n4846@id n4847@rest) (n2cab@id? n4846@id)) n4844@ls/false)) (apply (lambda (n484a@id n484b@rest) (n2fa5@syntax->datum n484a@id)) n4844@ls/false) ((lambda (n484e@t) ((lambda (n4850@ls/false) (if n4850@ls/false (apply (lambda () '#f) n4850@ls/false) (n2f9f@syntax-violation '#f '"invalid syntax" n484e@t))) (n2eb6@syntax-dispatch n484e@t '_))) n4842@t))) (n2eb6@syntax-dispatch n4842@t '(any . any)))) n483a@t))) (n2eb6@syntax-dispatch n483a@t 'any))) n4832@form) (assertion-violation 'syntax-violation '"invalid who argument" n4830@who))))))) (set! n2f9f@syntax-violation (lambda n4860 ((lambda (n4861) (if (= n4861 '3) (apply (lambda (n4852@who n4853@msg n4854@form) (n2f9f@syntax-violation n4852@who n4853@msg n4854@form '#f)) n4860) (if (= n4861 '4) (apply (lambda (n4858@who n4859@msg n485a@form n485b@subform) (n2f9d@syntax-violation* n4858@who n4859@msg n485a@form (n4cd0@n4b05@make-syntax-violation (n2fa5@syntax->datum n485a@form) (n2fa5@syntax->datum n485b@subform)))) n4860) (error 'apply '"invalid arg count")))) (length n4860)))) (set! n2fa1@identifier? (lambda (n4862@x) (n2cab@id? n4862@x))) (set! n2fa3@datum->syntax (lambda (n4864@id n4865@datum) (if (n2cab@id? n4864@id) (n2c89@datum->stx n4864@id n4865@datum) (assertion-violation 'datum->syntax '"not an identifier" n4864@id)))) (set! n2fa5@syntax->datum (lambda (n4868@x) (n2cc1@stx->datum n4868@x))) (set! n2fa7@compile-r6rs-top-level (lambda (n486a@x*) (call-with-values (lambda () (n2f31@top-level-expander n486a@x*)) (lambda (n4870@n486d n4871@n486f) ((lambda (n4874@invoke-code n4875@lib*) (lambda () (begin (for-each n2acf@n2970@invoke-library n4875@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (n28a9@n2861@expanded->core n4874@invoke-code)) (void)) (eval-core (n28a9@n2861@expanded->core n4874@invoke-code))))) n4871@n486f n4870@n486d))))) (set! n2fa9@pre-compile-r6rs-top-level (lambda (n4878@x*) (call-with-values (lambda () (n2f31@top-level-expander n4878@x*)) (lambda (n487e@n487b n487f@n487d) ((lambda (n4882@invoke-code n4883@lib*) (begin (for-each n2acf@n2970@invoke-library n4883@lib*) (n2853@n277b@compile-core (n28a9@n2861@expanded->core n4882@invoke-code)))) n487f@n487d n487e@n487b))))) (set! n2fab@interaction-environment ((lambda (n4886@the-env) (lambda () (or n4886@the-env ((lambda (n4888@lib n4889@rib) (begin ((lambda (n488c@subst) (begin (n2c50@set-rib-sym*! n4889@rib (map car n488c@subst)) (n2c52@set-rib-mark**! n4889@rib (map (lambda (n488e@x) n2c27@top-mark*) n488c@subst)) (n2c54@set-rib-label*! n4889@rib (map cdr n488c@subst)))) (n2aa4@n291a@library-subst n4888@lib)) ((lambda (n4890@env) (begin (set! n4886@the-env n4890@env) n4890@env)) (n2f5d@make-interaction-env n4889@rib '() '())))) (n2ac8@n2962@find-library-by-name '(mosh interaction)) (n2c5a@make-empty-rib))))) '#f)) (set! n2fad@top-level-context (n2855@n277f@make-parameter '#f)) (begin (set! n499e@n2fad@top-level-context n2fad@top-level-context) (set! n499d@n2fab@interaction-environment n2fab@interaction-environment) (set! n499c@n2fa9@pre-compile-r6rs-top-level n2fa9@pre-compile-r6rs-top-level) (set! n499b@n2fa7@compile-r6rs-top-level n2fa7@compile-r6rs-top-level) (set! n499a@n2fa5@syntax->datum n2fa5@syntax->datum) (set! n4999@n2fa3@datum->syntax n2fa3@datum->syntax) (set! n4998@n2fa1@identifier? n2fa1@identifier?) (set! n4997@n2f9f@syntax-violation n2f9f@syntax-violation) (set! n4996@n2f9d@syntax-violation* n2f9d@syntax-violation*) (set! n4995@n2f9b@syntax-error n2f9b@syntax-error) (set! n4994@n2f99@assertion-error n2f99@assertion-error) (set! n4993@n2f97@expression-position n2f97@expression-position) (set! n4992@n2f95@extract-position-condition n2f95@extract-position-condition) (set! n4991@n2f93@make-source-condition n2f93@make-source-condition) (set! n4990@n2f91@bound-identifier=? n2f91@bound-identifier=?) (set! n498f@n2f8f@free-identifier=? n2f8f@free-identifier=?) (set! n498e@n2f8d@generate-temporaries n2f8d@generate-temporaries) (set! n498d@n2f8b@make-export-env/macros n2f8b@make-export-env/macros) (set! n498c@n2f89@make-export-subst n2f89@make-export-subst) (set! n498b@n2f87@build-exports n2f87@build-exports) (set! n498a@n2f85@rev-map-append n2f85@rev-map-append) (set! n4989@n2f83@boot-library-expand n2f83@boot-library-expand) (set! n4988@n2f81@library-expander n2f81@library-expander) (set! n4987@n2f7f@eval n2f7f@eval) (set! n4986@n2f7d@expand n2f7d@expand) (set! n4985@n2f7b@scheme-report-environment n2f7b@scheme-report-environment) (set! n4984@n2f79@null-environment n2f79@null-environment) (set! n4983@n2f77@environment n2f77@environment) (set! n4982@n2f75@environment-symbols n2f75@environment-symbols) (set! n4981@n2f73@environment? n2f73@environment?) (set! n4980@n2f71@parse-binding n2f71@parse-binding) (set! n497f@n2f6f@environment-bindings n2f6f@environment-bindings) (set! n497e@n2f6d@interaction-environment-symbols n2f6d@interaction-environment-symbols) (set! n497d@n2f6b@rp n2f6b@rp) (set! n497c@n2f69@set-interaction-env-locs! n2f69@set-interaction-env-locs!) (set! n497b@n2f67@set-interaction-env-r! n2f67@set-interaction-env-r!) (set! n497a@n2f65@set-interaction-env-rib! n2f65@set-interaction-env-rib!) (set! n4979@n2f63@interaction-env-locs n2f63@interaction-env-locs) (set! n4978@n2f61@interaction-env-r n2f61@interaction-env-r) (set! n4977@n2f5f@interaction-env-rib n2f5f@interaction-env-rib) (set! n4976@n2f5d@make-interaction-env n2f5d@make-interaction-env) (set! n4975@n2f5b@interaction-env? n2f5b@interaction-env?) (set! n4974@n2f58@n2f50 n2f58@n2f50) (set! n4973@n2f56@n2f51 n2f56@n2f51) (set! n4972@n2f54@n2f4f n2f54@n2f4f) (set! n4971@n2f4e@rp n2f4e@rp) (set! n4970@n2f4c@set-env-itc! n2f4c@set-env-itc!) (set! n496f@n2f4a@set-env-labels! n2f4a@set-env-labels!) (set! n496e@n2f48@set-env-names! n2f48@set-env-names!) (set! n496d@n2f46@env-itc n2f46@env-itc) (set! n496c@n2f44@env-labels n2f44@env-labels) (set! n496b@n2f42@env-names n2f42@env-names) (set! n496a@n2f40@make-env n2f40@make-env) (set! n4969@n2f3e@env? n2f3e@env?) (set! n4968@n2f3b@n2f33 n2f3b@n2f33) (set! n4967@n2f39@n2f34 n2f39@n2f34) (set! n4966@n2f37@n2f32 n2f37@n2f32) (set! n4965@n2f31@top-level-expander n2f31@top-level-expander) (set! n4964@n2f2f@parse-top-level-program n2f2f@parse-top-level-program) (set! n4963@n2f2d@core-library-expander n2f2d@core-library-expander) (set! n4962@n2f2b@library-body-expander n2f2b@library-body-expander) (set! n4961@n2f29@chi-interaction-expr n2f29@chi-interaction-expr) (set! n4960@n2f27@chi-library-internal n2f27@chi-library-internal) (set! n495f@n2f25@imp-collector n2f25@imp-collector) (set! n495e@n2f23@vis-collector n2f23@vis-collector) (set! n495d@n2f21@inv-collector n2f21@inv-collector) (set! n495c@n2f1f@make-collector n2f1f@make-collector) (set! n495b@n2f1d@make-top-rib n2f1d@make-top-rib) (set! n495a@n2f1b@parse-import-spec* n2f1b@parse-import-spec*) (set! n4959@n2f19@parse-library n2f19@parse-library) (set! n4958@n2f17@parse-library-name n2f17@parse-library-name) (set! n4957@n2f15@parse-exports n2f15@parse-exports) (set! n4956@n2f13@expand-transformer n2f13@expand-transformer) (set! n4955@n2f11@chi-body* n2f11@chi-body*) (set! n4954@n2f0f@chi-internal-module n2f0f@chi-internal-module) (set! n4953@n2f0d@module-interface-exp-id* n2f0d@module-interface-exp-id*) (set! n4952@n2f0b@set-module-interface-exp-lab-vec! n2f0b@set-module-interface-exp-lab-vec!) (set! n4951@n2f09@set-module-interface-exp-id-vec! n2f09@set-module-interface-exp-id-vec!) (set! n4950@n2f07@set-module-interface-first-mark! n2f07@set-module-interface-first-mark!) (set! n494f@n2f05@module-interface-exp-lab-vec n2f05@module-interface-exp-lab-vec) (set! n494e@n2f03@module-interface-exp-id-vec n2f03@module-interface-exp-id-vec) (set! n494d@n2f01@module-interface-first-mark n2f01@module-interface-first-mark) (set! n494c@n2eff@make-module-interface n2eff@make-module-interface) (set! n494b@n2efd@module-interface? n2efd@module-interface?) (set! n494a@n2efa@n2ef2 n2efa@n2ef2) (set! n4949@n2ef8@n2ef3 n2ef8@n2ef3) (set! n4948@n2ef6@n2ef1 n2ef6@n2ef1) (set! n4947@n2ef0@parse-module n2ef0@parse-module) (set! n4946@n2eee@chi-internal n2eee@chi-internal) (set! n4945@n2eec@find-dups n2eec@find-dups) (set! n4944@n2eea@find-bound=? n2eea@find-bound=?) (set! n4943@n2ee8@chi-rhs* n2ee8@chi-rhs*) (set! n4942@n2ee6@expand-interaction-rhs*/init* n2ee6@expand-interaction-rhs*/init*) (set! n4941@n2ee4@chi-rhs n2ee4@chi-rhs) (set! n4940@n2ee2@chi-defun n2ee2@chi-defun) (set! n493f@n2ee0@chi-lambda-clause* n2ee0@chi-lambda-clause*) (set! n493e@n2ede@chi-lambda-clause n2ede@chi-lambda-clause) (set! n493d@n2edc@verify-formals n2edc@verify-formals) (set! n493c@n2eda@chi-set! n2eda@chi-set!) (set! n493b@n2ed8@chi-expr n2ed8@chi-expr) (set! n493a@n2ed6@chi-application n2ed6@chi-application) (set! n4939@n2ed4@chi-expr* n2ed4@chi-expr*) (set! n4938@n2ed2@chi-global-macro n2ed2@chi-global-macro) (set! n4937@n2ed0@chi-local-macro n2ed0@chi-local-macro) (set! n4936@n2ece@chi-macro n2ece@chi-macro) (set! n4935@n2ecc@do-macro-call n2ecc@do-macro-call) (set! n4934@n2eca@local-macro-transformer n2eca@local-macro-transformer) (set! n4933@n2ec8@macro-transformer n2ec8@macro-transformer) (set! n4932@n2ec6@symbol-macro n2ec6@symbol-macro) (set! n4931@n2ec4@core-macro-transformer n2ec4@core-macro-transformer) (set! n4930@n2ec2@syntax-transformer n2ec2@syntax-transformer) (set! n492f@n2ec0@ellipsis-map n2ec0@ellipsis-map) (set! n492e@n2ebe@syntax-case-transformer n2ebe@syntax-case-transformer) (set! n492d@n2ebc@verify-literals n2ebc@verify-literals) (set! n492c@n2eba@underscore? n2eba@underscore?) (set! n492b@n2eb8@ellipsis? n2eb8@ellipsis?) (set! n492a@n2eb6@syntax-dispatch n2eb6@syntax-dispatch) (set! n4929@n2eb4@convert-pattern n2eb4@convert-pattern) (set! n4928@n2eb2@foreign-call-transformer n2eb2@foreign-call-transformer) (set! n4927@n2eb0@parameterize-macro n2eb0@parameterize-macro) (set! n4926@n2eae@incorrect-usage-macro n2eae@incorrect-usage-macro) (set! n4925@n2eac@define-condition-type-macro n2eac@define-condition-type-macro) (set! n4924@n2eaa@define-record-type-macro n2eaa@define-record-type-macro) (set! n4923@n2ea8@define-struct-macro n2ea8@define-struct-macro) (set! n4922@n2ea6@quasisyntax-macro n2ea6@quasisyntax-macro) (set! n4921@n2ea4@quasiquote-macro n2ea4@quasiquote-macro) (set! n4920@n2ea2@syntax-rules-macro n2ea2@syntax-rules-macro) (set! n491f@n2ea0@include-into-macro n2ea0@include-into-macro) (set! n491e@n2e9e@include-macro n2e9e@include-macro) (set! n491d@n2e9c@do-include n2e9c@do-include) (set! n491c@n2e9a@cond-macro n2e9a@cond-macro) (set! n491b@n2e98@and-macro n2e98@and-macro) (set! n491a@n2e96@or-macro n2e96@or-macro) (set! n4919@n2e94@let*-macro n2e94@let*-macro) (set! n4918@n2e92@do-macro n2e92@do-macro) (set! n4917@n2e90@identifier-syntax-macro n2e90@identifier-syntax-macro) (set! n4916@n2e8e@endianness-macro n2e8e@endianness-macro) (set! n4915@n2e8c@assert-macro n2e8c@assert-macro) (set! n4914@n2e8a@delay-macro n2e8a@delay-macro) (set! n4913@n2e88@time-macro n2e88@time-macro) (set! n4912@n2e86@define-enumeration-macro n2e86@define-enumeration-macro) (set! n4911@n2e84@guard-macro n2e84@guard-macro) (set! n4910@n2e82@trace-letrec-syntax-macro n2e82@trace-letrec-syntax-macro) (set! n490f@n2e80@trace-let-syntax-macro n2e80@trace-let-syntax-macro) (set! n490e@n2e7e@trace-let/rec-syntax n2e7e@trace-let/rec-syntax) (set! n490d@n2e7c@trace-define-syntax-macro n2e7c@trace-define-syntax-macro) (set! n490c@n2e7a@trace-define-macro n2e7a@trace-define-macro) (set! n490b@n2e78@trace-lambda-macro n2e78@trace-lambda-macro) (set! n490a@n2e76@let*-values-macro n2e76@let*-values-macro) (set! n4909@n2e74@let-values-macro n2e74@let-values-macro) (set! n4908@n2e72@let-macro n2e72@let-macro) (set! n4907@n2e70@invalid-fmls-error n2e70@invalid-fmls-error) (set! n4906@n2e6e@with-syntax-macro n2e6e@with-syntax-macro) (set! n4905@n2e6c@bless n2e6c@bless) (set! n4904@n2e6a@lambda-transformer n2e6a@lambda-transformer) (set! n4903@n2e68@case-lambda-transformer n2e68@case-lambda-transformer) (set! n4902@n2e66@quote-transformer n2e66@quote-transformer) (set! n4901@n2e64@case-macro n2e64@case-macro) (set! n4900@n2e62@or-transformer n2e62@or-transformer) (set! n48ff@n2e60@and-transformer n2e60@and-transformer) (set! n48fe@n2e5e@if-transformer n2e5e@if-transformer) (set! n48fd@n2e5c@unless-macro n2e5c@unless-macro) (set! n48fc@n2e5a@when-macro n2e5a@when-macro) (set! n48fb@n2e58@record-constructor-descriptor-transformer n2e58@record-constructor-descriptor-transformer) (set! n48fa@n2e56@record-type-descriptor-transformer n2e56@record-type-descriptor-transformer) (set! n48f9@n2e54@type-descriptor-transformer n2e54@type-descriptor-transformer) (set! n48f8@n2e52@fluid-let-syntax-transformer n2e52@fluid-let-syntax-transformer) (set! n48f7@n2e50@letrec*-transformer n2e50@letrec*-transformer) (set! n48f6@n2e4e@letrec-transformer n2e4e@letrec-transformer) (set! n48f5@n2e4c@letrec-helper n2e4c@letrec-helper) (set! n48f4@n2e4a@add-lexicals n2e4a@add-lexicals) (set! n48f3@n2e48@add-lexical n2e48@add-lexical) (set! n48f2@n2e46@set-lexical-mutable! n2e46@set-lexical-mutable!) (set! n48f1@n2e44@lexical-mutable? n2e44@lexical-mutable?) (set! n48f0@n2e42@lexical-var n2e42@lexical-var) (set! n48ef@n2e40@scheme-stx n2e40@scheme-stx) (set! n48ee@n2e3e@scheme-stx-hashtable n2e3e@scheme-stx-hashtable) (set! n48ed@n2e3c@parse-define-syntax n2e3c@parse-define-syntax) (set! n48ec@n2e3a@parse-define n2e3a@parse-define) (set! n48eb@n2ce9@make-eval-transformer n2ce9@make-eval-transformer) (set! n48ea@n2ce7@variable-transformer-procedure n2ce7@variable-transformer-procedure) (set! n48e9@n2ce5@variable-transformer? n2ce5@variable-transformer?) (set! n48e8@n2ce3@make-variable-transformer n2ce3@make-variable-transformer) (set! n48e7@n2ce1@sanitize-binding n2ce1@sanitize-binding) (set! n48e6@n2cd3@syntax-type n2cd3@syntax-type) (set! n48e5@n2cd1@raise-unbound-error n2cd1@raise-unbound-error) (set! n48e4@n2ccf@binding-value n2ccf@binding-value) (set! n48e3@n2ccd@binding-type n2ccd@binding-type) (set! n48e2@n2ccb@make-binding n2ccb@make-binding) (set! n48e1@n2cc9@label->binding n2cc9@label->binding) (set! n48e0@n2cc7@id->real-label n2cc7@id->real-label) (set! n48df@n2cc5@id->label n2cc5@id->label) (set! n48de@n2cc3@same-marks*? n2cc3@same-marks*?) (set! n48dd@n2cc1@stx->datum n2cc1@stx->datum) (set! n48dc@n2cbf@strip n2cbf@strip) (set! n48db@n2cbd@strip-annotations n2cbd@strip-annotations) (set! n48da@n2cbb@self-evaluating? n2cbb@self-evaluating?) (set! n48d9@n2cb9@bound-id-member? n2cb9@bound-id-member?) (set! n48d8@n2cb7@distinct-bound-ids? n2cb7@distinct-bound-ids?) (set! n48d7@n2cb5@valid-bound-ids? n2cb5@valid-bound-ids?) (set! n48d6@n2cb3@free-id=? n2cb3@free-id=?) (set! n48d5@n2cb1@bound-id=? n2cb1@bound-id=?) (set! n48d4@n2caf@same-marks? n2caf@same-marks?) (set! n48d3@n2cad@id->sym n2cad@id->sym) (set! n48d2@n2cab@id? n2cab@id?) (set! n48d1@n2ca9@syntax->list n2ca9@syntax->list) (set! n48d0@n2ca7@syntax-cdr n2ca7@syntax-cdr) (set! n48cf@n2ca5@syntax-car n2ca5@syntax-car) (set! n48ce@n2ca3@syntax-list? n2ca3@syntax-list?) (set! n48cd@n2ca1@syntax-null? n2ca1@syntax-null?) (set! n48cc@n2c9f@syntax-vector? n2c9f@syntax-vector?) (set! n48cb@n2c9d@syntax-pair? n2c9d@syntax-pair?) (set! n48ca@n2c9b@syntax-vector->list n2c9b@syntax-vector->list) (set! n48c9@n2c99@syntax-kind? n2c99@syntax-kind?) (set! n48c8@n2c97@add-subst n2c97@add-subst) (set! n48c7@n2c95@add-mark n2c95@add-mark) (set! n48c6@n2c93@mkstx n2c93@mkstx) (set! n48c5@n2c91@join-wraps n2c91@join-wraps) (set! n48c4@n2c8f@anti-mark? n2c8f@anti-mark?) (set! n48c3@n2c8d@anti-mark n2c8d@anti-mark) (set! n48c2@n2c8b@gen-mark n2c8b@gen-mark) (set! n48c1@n2c89@datum->stx n2c89@datum->stx) (set! n48c0@n2c87@rp n2c87@rp) (set! n48bf@n2c85@set-stx-ae*! n2c85@set-stx-ae*!) (set! n48be@n2c83@set-stx-subst*! n2c83@set-stx-subst*!) (set! n48bd@n2c81@set-stx-mark*! n2c81@set-stx-mark*!) (set! n48bc@n2c7f@set-stx-expr! n2c7f@set-stx-expr!) (set! n48bb@n2c7d@stx-ae* n2c7d@stx-ae*) (set! n48ba@n2c7b@stx-subst* n2c7b@stx-subst*) (set! n48b9@n2c79@stx-mark* n2c79@stx-mark*) (set! n48b8@n2c77@stx-expr n2c77@stx-expr) (set! n48b7@n2c75@make-stx n2c75@make-stx) (set! n48b6@n2c73@stx? n2c73@stx?) (set! n48b5@n2c70@n2c68 n2c70@n2c68) (set! n48b4@n2c6e@n2c69 n2c6e@n2c69) (set! n48b3@n2c6c@n2c67 n2c6c@n2c67) (set! n48b2@n2c66@make-full-rib n2c66@make-full-rib) (set! n48b1@n2c64@unseal-rib! n2c64@unseal-rib!) (set! n48b0@n2c62@seal-rib! n2c62@seal-rib!) (set! n48af@n2c60@make-rib-map n2c60@make-rib-map) (set! n48ae@n2c5e@extend-rib/nc! n2c5e@extend-rib/nc!) (set! n48ad@n2c5c@extend-rib! n2c5c@extend-rib!) (set! n48ac@n2c5a@make-empty-rib n2c5a@make-empty-rib) (set! n48ab@n2c58@set-rib-cache! n2c58@set-rib-cache!) (set! n48aa@n2c56@set-rib-sealed/freq! n2c56@set-rib-sealed/freq!) (set! n48a9@n2c54@set-rib-label*! n2c54@set-rib-label*!) (set! n48a8@n2c52@set-rib-mark**! n2c52@set-rib-mark**!) (set! n48a7@n2c50@set-rib-sym*! n2c50@set-rib-sym*!) (set! n48a6@n2c4e@rib-cache n2c4e@rib-cache) (set! n48a5@n2c4c@rib-sealed/freq n2c4c@rib-sealed/freq) (set! n48a4@n2c4a@rib-label* n2c4a@rib-label*) (set! n48a3@n2c48@rib-mark** n2c48@rib-mark**) (set! n48a2@n2c46@rib-sym* n2c46@rib-sym*) (set! n48a1@n2c44@make-rib n2c44@make-rib) (set! n48a0@n2c42@rib? n2c42@rib?) (set! n489f@n2c3f@n2c37 n2c3f@n2c37) (set! n489e@n2c3d@n2c38 n2c3d@n2c38) (set! n489d@n2c3b@n2c36 n2c3b@n2c36) (set! n489c@n2c35@gen-define-label n2c35@gen-define-label) (set! n489b@n2c33@gen-define-label+loc n2c33@gen-define-label+loc) (set! n489a@n2c31@gen-top-level-label n2c31@gen-top-level-label) (set! n4899@n2c2f@gen-label n2c2f@gen-label) (set! n4898@n2c2d@gen-global n2c2d@gen-global) (set! n4897@n2c2b@gen-lexical n2c2b@gen-lexical) (set! n4896@n2c29@top-marked? n2c29@top-marked?) (set! n4895@n2c27@top-mark* n2c27@top-mark*) (set! n4894@n2c22@set-union n2c22@set-union) (set! n4893@n2c20@set-cons n2c20@set-cons) (set! n4892@n2c1e@file-options-macro n2c1e@file-options-macro) (n2ac5@n295c@current-library-expander n2f81@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (n49a8@n49a3 n49aa@n49a5 n49ac@n49a4 n49af@&condition? n49b1@make-&condition n49b3@&condition-rtd n49b5@&condition-rcd n4a01@n49fc n4a03@n49fe n4a05@n49fd n4a08@p? n4a0a@make-message-condition n4a0c@n49fb n4a0e@message-condition? n4a10@condition-message n4a12@&message-rtd n4a14@&message-rcd n4a1a@n4a15 n4a1c@n4a17 n4a1e@n4a16 n4a21@p? n4a23@make-warning n4a25@warning? n4a27@&warning-rtd n4a29@&warning-rcd n4a2f@n4a2a n4a31@n4a2c n4a33@n4a2b n4a36@p? n4a38@make-serious-condition n4a3a@serious-condition? n4a3c@&serious-rtd n4a3e@&serious-rcd n4a44@n4a3f n4a46@n4a41 n4a48@n4a40 n4a4b@p? n4a4d@make-error n4a4f@error? n4a51@&error-rtd n4a53@&error-rcd n4a59@n4a54 n4a5b@n4a56 n4a5d@n4a55 n4a60@p? n4a62@make-violation n4a64@violation? n4a66@&violation-rtd n4a68@&violation-rcd n4a6e@n4a69 n4a70@n4a6b n4a72@n4a6a n4a75@p? n4a77@make-assertion-violation n4a79@assertion-violation? n4a7b@&assertion-rtd n4a7d@&assertion-rcd n4a85@n4a80 n4a87@n4a82 n4a89@n4a81 n4a8c@p? n4a8e@make-irritants-condition n4a90@n4a7f n4a92@irritants-condition? n4a94@condition-irritants n4a96@&irritants-rtd n4a98@&irritants-rcd n4aa0@n4a9b n4aa2@n4a9d n4aa4@n4a9c n4aa7@p? n4aa9@make-who-condition n4aab@n4a9a n4aad@who-condition? n4aaf@condition-who n4ab1@&who-rtd n4ab3@&who-rcd n4ab9@n4ab4 n4abb@n4ab6 n4abd@n4ab5 n4ac0@p? n4ac2@make-non-continuable-violation n4ac4@non-continuable-violation? n4ac6@&non-continuable-rtd n4ac8@&non-continuable-rcd n4ace@n4ac9 n4ad0@n4acb n4ad2@n4aca n4ad5@p? n4ad7@make-implementation-restriction-violation n4ad9@implementation-restriction-violation? n4adb@&implementation-restriction-rtd n4add@&implementation-restriction-rcd n4ae3@n4ade n4ae5@n4ae0 n4ae7@n4adf n4aea@p? n4aec@make-lexical-violation n4aee@lexical-violation? n4af0@&lexical-rtd n4af2@&lexical-rcd n4afc@n4af7 n4afe@n4af9 n4b00@n4af8 n4b03@p? n4b05@make-syntax-violation n4b07@n4af4 n4b09@n4af6 n4b0b@syntax-violation? n4b0d@syntax-violation-form n4b0f@syntax-violation-subform n4b11@&syntax-rtd n4b13@&syntax-rcd n4b19@n4b14 n4b1b@n4b16 n4b1d@n4b15 n4b20@p? n4b22@make-undefined-violation n4b24@undefined-violation? n4b26@&undefined-rtd n4b28@&undefined-rcd n4b2e@n4b29 n4b30@n4b2b n4b32@n4b2a n4b35@p? n4b37@make-i/o-error n4b39@i/o-error? n4b3b@&i/o-rtd n4b3d@&i/o-rcd n4b43@n4b3e n4b45@n4b40 n4b47@n4b3f n4b4a@p? n4b4c@make-i/o-read-error n4b4e@i/o-read-error? n4b50@&i/o-read-rtd n4b52@&i/o-read-rcd n4b58@n4b53 n4b5a@n4b55 n4b5c@n4b54 n4b5f@p? n4b61@make-i/o-write-error n4b63@i/o-write-error? n4b65@&i/o-write-rtd n4b67@&i/o-write-rcd n4b6f@n4b6a n4b71@n4b6c n4b73@n4b6b n4b76@p? n4b78@make-i/o-invalid-position-error n4b7a@n4b69 n4b7c@i/o-invalid-position-error? n4b7e@i/o-error-position n4b80@&i/o-invalid-position-rtd n4b82@&i/o-invalid-position-rcd n4b8a@n4b85 n4b8c@n4b87 n4b8e@n4b86 n4b91@p? n4b93@make-i/o-filename-error n4b95@n4b84 n4b97@i/o-filename-error? n4b99@i/o-error-filename n4b9b@&i/o-filename-rtd n4b9d@&i/o-filename-rcd n4ba3@n4b9e n4ba5@n4ba0 n4ba7@n4b9f n4baa@p? n4bac@make-i/o-file-protection-error n4bae@i/o-file-protection-error? n4bb0@&i/o-file-protection-rtd n4bb2@&i/o-file-protection-rcd n4bb8@n4bb3 n4bba@n4bb5 n4bbc@n4bb4 n4bbf@p? n4bc1@make-i/o-file-is-read-only-error n4bc3@i/o-file-is-read-only-error? n4bc5@&i/o-file-is-read-only-rtd n4bc7@&i/o-file-is-read-only-rcd n4bcd@n4bc8 n4bcf@n4bca n4bd1@n4bc9 n4bd4@p? n4bd6@make-i/o-file-already-exists-error n4bd8@i/o-file-already-exists-error? n4bda@&i/o-file-already-exists-rtd n4bdc@&i/o-file-already-exists-rcd n4be2@n4bdd n4be4@n4bdf n4be6@n4bde n4be9@p? n4beb@make-i/o-file-does-not-exist-error n4bed@i/o-file-does-not-exist-error? n4bef@&i/o-file-does-not-exist-rtd n4bf1@&i/o-file-does-not-exist-rcd n4bf9@n4bf4 n4bfb@n4bf6 n4bfd@n4bf5 n4c00@p? n4c02@make-i/o-port-error n4c04@n4bf3 n4c06@i/o-port-error? n4c08@i/o-error-port n4c0a@&i/o-port-rtd n4c0c@&i/o-port-rcd n4c12@n4c0d n4c14@n4c0f n4c16@n4c0e n4c19@p? n4c1b@make-i/o-decoding-error n4c1d@i/o-decoding-error? n4c1f@&i/o-decoding-rtd n4c21@&i/o-decoding-rcd n4c29@n4c24 n4c2b@n4c26 n4c2d@n4c25 n4c30@p? n4c32@make-i/o-encoding-error n4c34@n4c23 n4c36@i/o-encoding-error? n4c38@i/o-encoding-error-char n4c3a@&i/o-encoding-rtd n4c3c@&i/o-encoding-rcd n4c42@n4c3d n4c44@n4c3f n4c46@n4c3e n4c49@p? n4c4b@make-no-infinities-violation n4c4d@no-infinities-violation? n4c4f@&no-infinities-rtd n4c51@&no-infinities-rcd n4c57@n4c52 n4c59@n4c54 n4c5b@n4c53 n4c5e@p? n4c60@make-no-nans-violation n4c62@no-nans-violation? n4c64@&no-nans-rtd n4c66@&no-nans-rcd) (begin (set! n49a8@n49a3 (make-record-type-descriptor '&condition '#f 'n49a6 '#f '#f '#())) (set! n49aa@n49a5 '#f) (set! n49ac@n49a4 (make-record-constructor-descriptor n49a8@n49a3 '#f n49aa@n49a5)) (set! n49af@&condition? (record-predicate n49a8@n49a3)) (set! n49b1@make-&condition (record-constructor n49ac@n49a4)) (set! n49b3@&condition-rtd n49a8@n49a3) (set! n49b5@&condition-rcd n49ac@n49a4) (set! n4a01@n49fc (make-record-type-descriptor '&message n49a8@n49a3 'n49ff '#f '#f '#((immutable message)))) (set! n4a03@n49fe '#f) (set! n4a05@n49fd (make-record-constructor-descriptor n4a01@n49fc n49ac@n49a4 n4a03@n49fe)) (set! n4a08@p? (record-predicate n4a01@n49fc)) (set! n4a0a@make-message-condition (record-constructor n4a05@n49fd)) (set! n4a0c@n49fb (record-accessor n4a01@n49fc '0)) (set! n4a0e@message-condition? (condition-predicate n4a01@n49fc)) (set! n4a10@condition-message (condition-accessor n4a01@n49fc n4a0c@n49fb)) (set! n4a12@&message-rtd n4a01@n49fc) (set! n4a14@&message-rcd n4a05@n49fd) (set! n4a1a@n4a15 (make-record-type-descriptor '&warning n49a8@n49a3 'n4a18 '#f '#f '#())) (set! n4a1c@n4a17 '#f) (set! n4a1e@n4a16 (make-record-constructor-descriptor n4a1a@n4a15 n49ac@n49a4 n4a1c@n4a17)) (set! n4a21@p? (record-predicate n4a1a@n4a15)) (set! n4a23@make-warning (record-constructor n4a1e@n4a16)) (set! n4a25@warning? (condition-predicate n4a1a@n4a15)) (set! n4a27@&warning-rtd n4a1a@n4a15) (set! n4a29@&warning-rcd n4a1e@n4a16) (set! n4a2f@n4a2a (make-record-type-descriptor '&serious n49a8@n49a3 'n4a2d '#f '#f '#())) (set! n4a31@n4a2c '#f) (set! n4a33@n4a2b (make-record-constructor-descriptor n4a2f@n4a2a n49ac@n49a4 n4a31@n4a2c)) (set! n4a36@p? (record-predicate n4a2f@n4a2a)) (set! n4a38@make-serious-condition (record-constructor n4a33@n4a2b)) (set! n4a3a@serious-condition? (condition-predicate n4a2f@n4a2a)) (set! n4a3c@&serious-rtd n4a2f@n4a2a) (set! n4a3e@&serious-rcd n4a33@n4a2b) (set! n4a44@n4a3f (make-record-type-descriptor '&error n4a2f@n4a2a 'n4a42 '#f '#f '#())) (set! n4a46@n4a41 '#f) (set! n4a48@n4a40 (make-record-constructor-descriptor n4a44@n4a3f n4a33@n4a2b n4a46@n4a41)) (set! n4a4b@p? (record-predicate n4a44@n4a3f)) (set! n4a4d@make-error (record-constructor n4a48@n4a40)) (set! n4a4f@error? (condition-predicate n4a44@n4a3f)) (set! n4a51@&error-rtd n4a44@n4a3f) (set! n4a53@&error-rcd n4a48@n4a40) (set! n4a59@n4a54 (make-record-type-descriptor '&violation n4a2f@n4a2a 'n4a57 '#f '#f '#())) (set! n4a5b@n4a56 '#f) (set! n4a5d@n4a55 (make-record-constructor-descriptor n4a59@n4a54 n4a33@n4a2b n4a5b@n4a56)) (set! n4a60@p? (record-predicate n4a59@n4a54)) (set! n4a62@make-violation (record-constructor n4a5d@n4a55)) (set! n4a64@violation? (condition-predicate n4a59@n4a54)) (set! n4a66@&violation-rtd n4a59@n4a54) (set! n4a68@&violation-rcd n4a5d@n4a55) (set! n4a6e@n4a69 (make-record-type-descriptor '&assertion n4a59@n4a54 'n4a6c '#f '#f '#())) (set! n4a70@n4a6b '#f) (set! n4a72@n4a6a (make-record-constructor-descriptor n4a6e@n4a69 n4a5d@n4a55 n4a70@n4a6b)) (set! n4a75@p? (record-predicate n4a6e@n4a69)) (set! n4a77@make-assertion-violation (record-constructor n4a72@n4a6a)) (set! n4a79@assertion-violation? (condition-predicate n4a6e@n4a69)) (set! n4a7b@&assertion-rtd n4a6e@n4a69) (set! n4a7d@&assertion-rcd n4a72@n4a6a) (set! n4a85@n4a80 (make-record-type-descriptor '&irritants n49a8@n49a3 'n4a83 '#f '#f '#((immutable irritants)))) (set! n4a87@n4a82 '#f) (set! n4a89@n4a81 (make-record-constructor-descriptor n4a85@n4a80 n49ac@n49a4 n4a87@n4a82)) (set! n4a8c@p? (record-predicate n4a85@n4a80)) (set! n4a8e@make-irritants-condition (record-constructor n4a89@n4a81)) (set! n4a90@n4a7f (record-accessor n4a85@n4a80 '0)) (set! n4a92@irritants-condition? (condition-predicate n4a85@n4a80)) (set! n4a94@condition-irritants (condition-accessor n4a85@n4a80 n4a90@n4a7f)) (set! n4a96@&irritants-rtd n4a85@n4a80) (set! n4a98@&irritants-rcd n4a89@n4a81) (set! n4aa0@n4a9b (make-record-type-descriptor '&who n49a8@n49a3 'n4a9e '#f '#f '#((immutable who)))) (set! n4aa2@n4a9d '#f) (set! n4aa4@n4a9c (make-record-constructor-descriptor n4aa0@n4a9b n49ac@n49a4 n4aa2@n4a9d)) (set! n4aa7@p? (record-predicate n4aa0@n4a9b)) (set! n4aa9@make-who-condition (record-constructor n4aa4@n4a9c)) (set! n4aab@n4a9a (record-accessor n4aa0@n4a9b '0)) (set! n4aad@who-condition? (condition-predicate n4aa0@n4a9b)) (set! n4aaf@condition-who (condition-accessor n4aa0@n4a9b n4aab@n4a9a)) (set! n4ab1@&who-rtd n4aa0@n4a9b) (set! n4ab3@&who-rcd n4aa4@n4a9c) (set! n4ab9@n4ab4 (make-record-type-descriptor '&non-continuable n4a59@n4a54 'n4ab7 '#f '#f '#())) (set! n4abb@n4ab6 '#f) (set! n4abd@n4ab5 (make-record-constructor-descriptor n4ab9@n4ab4 n4a5d@n4a55 n4abb@n4ab6)) (set! n4ac0@p? (record-predicate n4ab9@n4ab4)) (set! n4ac2@make-non-continuable-violation (record-constructor n4abd@n4ab5)) (set! n4ac4@non-continuable-violation? (condition-predicate n4ab9@n4ab4)) (set! n4ac6@&non-continuable-rtd n4ab9@n4ab4) (set! n4ac8@&non-continuable-rcd n4abd@n4ab5) (set! n4ace@n4ac9 (make-record-type-descriptor '&implementation-restriction n4a59@n4a54 'n4acc '#f '#f '#())) (set! n4ad0@n4acb '#f) (set! n4ad2@n4aca (make-record-constructor-descriptor n4ace@n4ac9 n4a5d@n4a55 n4ad0@n4acb)) (set! n4ad5@p? (record-predicate n4ace@n4ac9)) (set! n4ad7@make-implementation-restriction-violation (record-constructor n4ad2@n4aca)) (set! n4ad9@implementation-restriction-violation? (condition-predicate n4ace@n4ac9)) (set! n4adb@&implementation-restriction-rtd n4ace@n4ac9) (set! n4add@&implementation-restriction-rcd n4ad2@n4aca) (set! n4ae3@n4ade (make-record-type-descriptor '&lexical n4a59@n4a54 'n4ae1 '#f '#f '#())) (set! n4ae5@n4ae0 '#f) (set! n4ae7@n4adf (make-record-constructor-descriptor n4ae3@n4ade n4a5d@n4a55 n4ae5@n4ae0)) (set! n4aea@p? (record-predicate n4ae3@n4ade)) (set! n4aec@make-lexical-violation (record-constructor n4ae7@n4adf)) (set! n4aee@lexical-violation? (condition-predicate n4ae3@n4ade)) (set! n4af0@&lexical-rtd n4ae3@n4ade) (set! n4af2@&lexical-rcd n4ae7@n4adf) (set! n4afc@n4af7 (make-record-type-descriptor '&syntax n4a59@n4a54 'n4afa '#f '#f '#((immutable form) (immutable subform)))) (set! n4afe@n4af9 '#f) (set! n4b00@n4af8 (make-record-constructor-descriptor n4afc@n4af7 n4a5d@n4a55 n4afe@n4af9)) (set! n4b03@p? (record-predicate n4afc@n4af7)) (set! n4b05@make-syntax-violation (record-constructor n4b00@n4af8)) (set! n4b07@n4af4 (record-accessor n4afc@n4af7 '0)) (set! n4b09@n4af6 (record-accessor n4afc@n4af7 '1)) (set! n4b0b@syntax-violation? (condition-predicate n4afc@n4af7)) (set! n4b0d@syntax-violation-form (condition-accessor n4afc@n4af7 n4b07@n4af4)) (set! n4b0f@syntax-violation-subform (condition-accessor n4afc@n4af7 n4b09@n4af6)) (set! n4b11@&syntax-rtd n4afc@n4af7) (set! n4b13@&syntax-rcd n4b00@n4af8) (set! n4b19@n4b14 (make-record-type-descriptor '&undefined n4a59@n4a54 'n4b17 '#f '#f '#())) (set! n4b1b@n4b16 '#f) (set! n4b1d@n4b15 (make-record-constructor-descriptor n4b19@n4b14 n4a5d@n4a55 n4b1b@n4b16)) (set! n4b20@p? (record-predicate n4b19@n4b14)) (set! n4b22@make-undefined-violation (record-constructor n4b1d@n4b15)) (set! n4b24@undefined-violation? (condition-predicate n4b19@n4b14)) (set! n4b26@&undefined-rtd n4b19@n4b14) (set! n4b28@&undefined-rcd n4b1d@n4b15) (set! n4b2e@n4b29 (make-record-type-descriptor '&i/o n4a44@n4a3f 'n4b2c '#f '#f '#())) (set! n4b30@n4b2b '#f) (set! n4b32@n4b2a (make-record-constructor-descriptor n4b2e@n4b29 n4a48@n4a40 n4b30@n4b2b)) (set! n4b35@p? (record-predicate n4b2e@n4b29)) (set! n4b37@make-i/o-error (record-constructor n4b32@n4b2a)) (set! n4b39@i/o-error? (condition-predicate n4b2e@n4b29)) (set! n4b3b@&i/o-rtd n4b2e@n4b29) (set! n4b3d@&i/o-rcd n4b32@n4b2a) (set! n4b43@n4b3e (make-record-type-descriptor '&i/o-read n4b2e@n4b29 'n4b41 '#f '#f '#())) (set! n4b45@n4b40 '#f) (set! n4b47@n4b3f (make-record-constructor-descriptor n4b43@n4b3e n4b32@n4b2a n4b45@n4b40)) (set! n4b4a@p? (record-predicate n4b43@n4b3e)) (set! n4b4c@make-i/o-read-error (record-constructor n4b47@n4b3f)) (set! n4b4e@i/o-read-error? (condition-predicate n4b43@n4b3e)) (set! n4b50@&i/o-read-rtd n4b43@n4b3e) (set! n4b52@&i/o-read-rcd n4b47@n4b3f) (set! n4b58@n4b53 (make-record-type-descriptor '&i/o-write n4b2e@n4b29 'n4b56 '#f '#f '#())) (set! n4b5a@n4b55 '#f) (set! n4b5c@n4b54 (make-record-constructor-descriptor n4b58@n4b53 n4b32@n4b2a n4b5a@n4b55)) (set! n4b5f@p? (record-predicate n4b58@n4b53)) (set! n4b61@make-i/o-write-error (record-constructor n4b5c@n4b54)) (set! n4b63@i/o-write-error? (condition-predicate n4b58@n4b53)) (set! n4b65@&i/o-write-rtd n4b58@n4b53) (set! n4b67@&i/o-write-rcd n4b5c@n4b54) (set! n4b6f@n4b6a (make-record-type-descriptor '&i/o-invalid-position n4b2e@n4b29 'n4b6d '#f '#f '#((immutable position)))) (set! n4b71@n4b6c '#f) (set! n4b73@n4b6b (make-record-constructor-descriptor n4b6f@n4b6a n4b32@n4b2a n4b71@n4b6c)) (set! n4b76@p? (record-predicate n4b6f@n4b6a)) (set! n4b78@make-i/o-invalid-position-error (record-constructor n4b73@n4b6b)) (set! n4b7a@n4b69 (record-accessor n4b6f@n4b6a '0)) (set! n4b7c@i/o-invalid-position-error? (condition-predicate n4b6f@n4b6a)) (set! n4b7e@i/o-error-position (condition-accessor n4b6f@n4b6a n4b7a@n4b69)) (set! n4b80@&i/o-invalid-position-rtd n4b6f@n4b6a) (set! n4b82@&i/o-invalid-position-rcd n4b73@n4b6b) (set! n4b8a@n4b85 (make-record-type-descriptor '&i/o-filename n4b2e@n4b29 'n4b88 '#f '#f '#((immutable filename)))) (set! n4b8c@n4b87 '#f) (set! n4b8e@n4b86 (make-record-constructor-descriptor n4b8a@n4b85 n4b32@n4b2a n4b8c@n4b87)) (set! n4b91@p? (record-predicate n4b8a@n4b85)) (set! n4b93@make-i/o-filename-error (record-constructor n4b8e@n4b86)) (set! n4b95@n4b84 (record-accessor n4b8a@n4b85 '0)) (set! n4b97@i/o-filename-error? (condition-predicate n4b8a@n4b85)) (set! n4b99@i/o-error-filename (condition-accessor n4b8a@n4b85 n4b95@n4b84)) (set! n4b9b@&i/o-filename-rtd n4b8a@n4b85) (set! n4b9d@&i/o-filename-rcd n4b8e@n4b86) (set! n4ba3@n4b9e (make-record-type-descriptor '&i/o-file-protection n4b8a@n4b85 'n4ba1 '#f '#f '#())) (set! n4ba5@n4ba0 '#f) (set! n4ba7@n4b9f (make-record-constructor-descriptor n4ba3@n4b9e n4b8e@n4b86 n4ba5@n4ba0)) (set! n4baa@p? (record-predicate n4ba3@n4b9e)) (set! n4bac@make-i/o-file-protection-error (record-constructor n4ba7@n4b9f)) (set! n4bae@i/o-file-protection-error? (condition-predicate n4ba3@n4b9e)) (set! n4bb0@&i/o-file-protection-rtd n4ba3@n4b9e) (set! n4bb2@&i/o-file-protection-rcd n4ba7@n4b9f) (set! n4bb8@n4bb3 (make-record-type-descriptor '&i/o-file-is-read-only n4ba3@n4b9e 'n4bb6 '#f '#f '#())) (set! n4bba@n4bb5 '#f) (set! n4bbc@n4bb4 (make-record-constructor-descriptor n4bb8@n4bb3 n4ba7@n4b9f n4bba@n4bb5)) (set! n4bbf@p? (record-predicate n4bb8@n4bb3)) (set! n4bc1@make-i/o-file-is-read-only-error (record-constructor n4bbc@n4bb4)) (set! n4bc3@i/o-file-is-read-only-error? (condition-predicate n4bb8@n4bb3)) (set! n4bc5@&i/o-file-is-read-only-rtd n4bb8@n4bb3) (set! n4bc7@&i/o-file-is-read-only-rcd n4bbc@n4bb4) (set! n4bcd@n4bc8 (make-record-type-descriptor '&i/o-file-already-exists n4b8a@n4b85 'n4bcb '#f '#f '#())) (set! n4bcf@n4bca '#f) (set! n4bd1@n4bc9 (make-record-constructor-descriptor n4bcd@n4bc8 n4b8e@n4b86 n4bcf@n4bca)) (set! n4bd4@p? (record-predicate n4bcd@n4bc8)) (set! n4bd6@make-i/o-file-already-exists-error (record-constructor n4bd1@n4bc9)) (set! n4bd8@i/o-file-already-exists-error? (condition-predicate n4bcd@n4bc8)) (set! n4bda@&i/o-file-already-exists-rtd n4bcd@n4bc8) (set! n4bdc@&i/o-file-already-exists-rcd n4bd1@n4bc9) (set! n4be2@n4bdd (make-record-type-descriptor '&i/o-file-does-not-exist n4b8a@n4b85 'n4be0 '#f '#f '#())) (set! n4be4@n4bdf '#f) (set! n4be6@n4bde (make-record-constructor-descriptor n4be2@n4bdd n4b8e@n4b86 n4be4@n4bdf)) (set! n4be9@p? (record-predicate n4be2@n4bdd)) (set! n4beb@make-i/o-file-does-not-exist-error (record-constructor n4be6@n4bde)) (set! n4bed@i/o-file-does-not-exist-error? (condition-predicate n4be2@n4bdd)) (set! n4bef@&i/o-file-does-not-exist-rtd n4be2@n4bdd) (set! n4bf1@&i/o-file-does-not-exist-rcd n4be6@n4bde) (set! n4bf9@n4bf4 (make-record-type-descriptor '&i/o-port n4b2e@n4b29 'n4bf7 '#f '#f '#((immutable port)))) (set! n4bfb@n4bf6 '#f) (set! n4bfd@n4bf5 (make-record-constructor-descriptor n4bf9@n4bf4 n4b32@n4b2a n4bfb@n4bf6)) (set! n4c00@p? (record-predicate n4bf9@n4bf4)) (set! n4c02@make-i/o-port-error (record-constructor n4bfd@n4bf5)) (set! n4c04@n4bf3 (record-accessor n4bf9@n4bf4 '0)) (set! n4c06@i/o-port-error? (condition-predicate n4bf9@n4bf4)) (set! n4c08@i/o-error-port (condition-accessor n4bf9@n4bf4 n4c04@n4bf3)) (set! n4c0a@&i/o-port-rtd n4bf9@n4bf4) (set! n4c0c@&i/o-port-rcd n4bfd@n4bf5) (set! n4c12@n4c0d (make-record-type-descriptor '&i/o-decoding n4bf9@n4bf4 'n4c10 '#f '#f '#())) (set! n4c14@n4c0f '#f) (set! n4c16@n4c0e (make-record-constructor-descriptor n4c12@n4c0d n4bfd@n4bf5 n4c14@n4c0f)) (set! n4c19@p? (record-predicate n4c12@n4c0d)) (set! n4c1b@make-i/o-decoding-error (record-constructor n4c16@n4c0e)) (set! n4c1d@i/o-decoding-error? (condition-predicate n4c12@n4c0d)) (set! n4c1f@&i/o-decoding-rtd n4c12@n4c0d) (set! n4c21@&i/o-decoding-rcd n4c16@n4c0e) (set! n4c29@n4c24 (make-record-type-descriptor '&i/o-encoding n4bf9@n4bf4 'n4c27 '#f '#f '#((immutable char)))) (set! n4c2b@n4c26 '#f) (set! n4c2d@n4c25 (make-record-constructor-descriptor n4c29@n4c24 n4bfd@n4bf5 n4c2b@n4c26)) (set! n4c30@p? (record-predicate n4c29@n4c24)) (set! n4c32@make-i/o-encoding-error (record-constructor n4c2d@n4c25)) (set! n4c34@n4c23 (record-accessor n4c29@n4c24 '0)) (set! n4c36@i/o-encoding-error? (condition-predicate n4c29@n4c24)) (set! n4c38@i/o-encoding-error-char (condition-accessor n4c29@n4c24 n4c34@n4c23)) (set! n4c3a@&i/o-encoding-rtd n4c29@n4c24) (set! n4c3c@&i/o-encoding-rcd n4c2d@n4c25) (set! n4c42@n4c3d (make-record-type-descriptor '&no-infinities n4ace@n4ac9 'n4c40 '#f '#f '#())) (set! n4c44@n4c3f '#f) (set! n4c46@n4c3e (make-record-constructor-descriptor n4c42@n4c3d n4ad2@n4aca n4c44@n4c3f)) (set! n4c49@p? (record-predicate n4c42@n4c3d)) (set! n4c4b@make-no-infinities-violation (record-constructor n4c46@n4c3e)) (set! n4c4d@no-infinities-violation? (condition-predicate n4c42@n4c3d)) (set! n4c4f@&no-infinities-rtd n4c42@n4c3d) (set! n4c51@&no-infinities-rcd n4c46@n4c3e) (set! n4c57@n4c52 (make-record-type-descriptor '&no-nans n4ace@n4ac9 'n4c55 '#f '#f '#())) (set! n4c59@n4c54 '#f) (set! n4c5b@n4c53 (make-record-constructor-descriptor n4c57@n4c52 n4ad2@n4aca n4c59@n4c54)) (set! n4c5e@p? (record-predicate n4c57@n4c52)) (set! n4c60@make-no-nans-violation (record-constructor n4c5b@n4c53)) (set! n4c62@no-nans-violation? (condition-predicate n4c57@n4c52)) (set! n4c64@&no-nans-rtd n4c57@n4c52) (set! n4c66@&no-nans-rcd n4c5b@n4c53) (begin (set! n4d57@n4c66@&no-nans-rcd n4c66@&no-nans-rcd) (set! n4d56@n4c64@&no-nans-rtd n4c64@&no-nans-rtd) (set! n4d55@n4c62@no-nans-violation? n4c62@no-nans-violation?) (set! n4d54@n4c60@make-no-nans-violation n4c60@make-no-nans-violation) (set! n4d53@n4c5e@p? n4c5e@p?) (set! n4d52@n4c5b@n4c53 n4c5b@n4c53) (set! n4d51@n4c59@n4c54 n4c59@n4c54) (set! n4d50@n4c57@n4c52 n4c57@n4c52) (set! n4d4f@n4c51@&no-infinities-rcd n4c51@&no-infinities-rcd) (set! n4d4e@n4c4f@&no-infinities-rtd n4c4f@&no-infinities-rtd) (set! n4d4d@n4c4d@no-infinities-violation? n4c4d@no-infinities-violation?) (set! n4d4c@n4c4b@make-no-infinities-violation n4c4b@make-no-infinities-violation) (set! n4d4b@n4c49@p? n4c49@p?) (set! n4d4a@n4c46@n4c3e n4c46@n4c3e) (set! n4d49@n4c44@n4c3f n4c44@n4c3f) (set! n4d48@n4c42@n4c3d n4c42@n4c3d) (set! n4d47@n4c3c@&i/o-encoding-rcd n4c3c@&i/o-encoding-rcd) (set! n4d46@n4c3a@&i/o-encoding-rtd n4c3a@&i/o-encoding-rtd) (set! n4d45@n4c38@i/o-encoding-error-char n4c38@i/o-encoding-error-char) (set! n4d44@n4c36@i/o-encoding-error? n4c36@i/o-encoding-error?) (set! n4d43@n4c34@n4c23 n4c34@n4c23) (set! n4d42@n4c32@make-i/o-encoding-error n4c32@make-i/o-encoding-error) (set! n4d41@n4c30@p? n4c30@p?) (set! n4d40@n4c2d@n4c25 n4c2d@n4c25) (set! n4d3f@n4c2b@n4c26 n4c2b@n4c26) (set! n4d3e@n4c29@n4c24 n4c29@n4c24) (set! n4d3d@n4c21@&i/o-decoding-rcd n4c21@&i/o-decoding-rcd) (set! n4d3c@n4c1f@&i/o-decoding-rtd n4c1f@&i/o-decoding-rtd) (set! n4d3b@n4c1d@i/o-decoding-error? n4c1d@i/o-decoding-error?) (set! n4d3a@n4c1b@make-i/o-decoding-error n4c1b@make-i/o-decoding-error) (set! n4d39@n4c19@p? n4c19@p?) (set! n4d38@n4c16@n4c0e n4c16@n4c0e) (set! n4d37@n4c14@n4c0f n4c14@n4c0f) (set! n4d36@n4c12@n4c0d n4c12@n4c0d) (set! n4d35@n4c0c@&i/o-port-rcd n4c0c@&i/o-port-rcd) (set! n4d34@n4c0a@&i/o-port-rtd n4c0a@&i/o-port-rtd) (set! n4d33@n4c08@i/o-error-port n4c08@i/o-error-port) (set! n4d32@n4c06@i/o-port-error? n4c06@i/o-port-error?) (set! n4d31@n4c04@n4bf3 n4c04@n4bf3) (set! n4d30@n4c02@make-i/o-port-error n4c02@make-i/o-port-error) (set! n4d2f@n4c00@p? n4c00@p?) (set! n4d2e@n4bfd@n4bf5 n4bfd@n4bf5) (set! n4d2d@n4bfb@n4bf6 n4bfb@n4bf6) (set! n4d2c@n4bf9@n4bf4 n4bf9@n4bf4) (set! n4d2b@n4bf1@&i/o-file-does-not-exist-rcd n4bf1@&i/o-file-does-not-exist-rcd) (set! n4d2a@n4bef@&i/o-file-does-not-exist-rtd n4bef@&i/o-file-does-not-exist-rtd) (set! n4d29@n4bed@i/o-file-does-not-exist-error? n4bed@i/o-file-does-not-exist-error?) (set! n4d28@n4beb@make-i/o-file-does-not-exist-error n4beb@make-i/o-file-does-not-exist-error) (set! n4d27@n4be9@p? n4be9@p?) (set! n4d26@n4be6@n4bde n4be6@n4bde) (set! n4d25@n4be4@n4bdf n4be4@n4bdf) (set! n4d24@n4be2@n4bdd n4be2@n4bdd) (set! n4d23@n4bdc@&i/o-file-already-exists-rcd n4bdc@&i/o-file-already-exists-rcd) (set! n4d22@n4bda@&i/o-file-already-exists-rtd n4bda@&i/o-file-already-exists-rtd) (set! n4d21@n4bd8@i/o-file-already-exists-error? n4bd8@i/o-file-already-exists-error?) (set! n4d20@n4bd6@make-i/o-file-already-exists-error n4bd6@make-i/o-file-already-exists-error) (set! n4d1f@n4bd4@p? n4bd4@p?) (set! n4d1e@n4bd1@n4bc9 n4bd1@n4bc9) (set! n4d1d@n4bcf@n4bca n4bcf@n4bca) (set! n4d1c@n4bcd@n4bc8 n4bcd@n4bc8) (set! n4d1b@n4bc7@&i/o-file-is-read-only-rcd n4bc7@&i/o-file-is-read-only-rcd) (set! n4d1a@n4bc5@&i/o-file-is-read-only-rtd n4bc5@&i/o-file-is-read-only-rtd) (set! n4d19@n4bc3@i/o-file-is-read-only-error? n4bc3@i/o-file-is-read-only-error?) (set! n4d18@n4bc1@make-i/o-file-is-read-only-error n4bc1@make-i/o-file-is-read-only-error) (set! n4d17@n4bbf@p? n4bbf@p?) (set! n4d16@n4bbc@n4bb4 n4bbc@n4bb4) (set! n4d15@n4bba@n4bb5 n4bba@n4bb5) (set! n4d14@n4bb8@n4bb3 n4bb8@n4bb3) (set! n4d13@n4bb2@&i/o-file-protection-rcd n4bb2@&i/o-file-protection-rcd) (set! n4d12@n4bb0@&i/o-file-protection-rtd n4bb0@&i/o-file-protection-rtd) (set! n4d11@n4bae@i/o-file-protection-error? n4bae@i/o-file-protection-error?) (set! n4d10@n4bac@make-i/o-file-protection-error n4bac@make-i/o-file-protection-error) (set! n4d0f@n4baa@p? n4baa@p?) (set! n4d0e@n4ba7@n4b9f n4ba7@n4b9f) (set! n4d0d@n4ba5@n4ba0 n4ba5@n4ba0) (set! n4d0c@n4ba3@n4b9e n4ba3@n4b9e) (set! n4d0b@n4b9d@&i/o-filename-rcd n4b9d@&i/o-filename-rcd) (set! n4d0a@n4b9b@&i/o-filename-rtd n4b9b@&i/o-filename-rtd) (set! n4d09@n4b99@i/o-error-filename n4b99@i/o-error-filename) (set! n4d08@n4b97@i/o-filename-error? n4b97@i/o-filename-error?) (set! n4d07@n4b95@n4b84 n4b95@n4b84) (set! n4d06@n4b93@make-i/o-filename-error n4b93@make-i/o-filename-error) (set! n4d05@n4b91@p? n4b91@p?) (set! n4d04@n4b8e@n4b86 n4b8e@n4b86) (set! n4d03@n4b8c@n4b87 n4b8c@n4b87) (set! n4d02@n4b8a@n4b85 n4b8a@n4b85) (set! n4d01@n4b82@&i/o-invalid-position-rcd n4b82@&i/o-invalid-position-rcd) (set! n4d00@n4b80@&i/o-invalid-position-rtd n4b80@&i/o-invalid-position-rtd) (set! n4cff@n4b7e@i/o-error-position n4b7e@i/o-error-position) (set! n4cfe@n4b7c@i/o-invalid-position-error? n4b7c@i/o-invalid-position-error?) (set! n4cfd@n4b7a@n4b69 n4b7a@n4b69) (set! n4cfc@n4b78@make-i/o-invalid-position-error n4b78@make-i/o-invalid-position-error) (set! n4cfb@n4b76@p? n4b76@p?) (set! n4cfa@n4b73@n4b6b n4b73@n4b6b) (set! n4cf9@n4b71@n4b6c n4b71@n4b6c) (set! n4cf8@n4b6f@n4b6a n4b6f@n4b6a) (set! n4cf7@n4b67@&i/o-write-rcd n4b67@&i/o-write-rcd) (set! n4cf6@n4b65@&i/o-write-rtd n4b65@&i/o-write-rtd) (set! n4cf5@n4b63@i/o-write-error? n4b63@i/o-write-error?) (set! n4cf4@n4b61@make-i/o-write-error n4b61@make-i/o-write-error) (set! n4cf3@n4b5f@p? n4b5f@p?) (set! n4cf2@n4b5c@n4b54 n4b5c@n4b54) (set! n4cf1@n4b5a@n4b55 n4b5a@n4b55) (set! n4cf0@n4b58@n4b53 n4b58@n4b53) (set! n4cef@n4b52@&i/o-read-rcd n4b52@&i/o-read-rcd) (set! n4cee@n4b50@&i/o-read-rtd n4b50@&i/o-read-rtd) (set! n4ced@n4b4e@i/o-read-error? n4b4e@i/o-read-error?) (set! n4cec@n4b4c@make-i/o-read-error n4b4c@make-i/o-read-error) (set! n4ceb@n4b4a@p? n4b4a@p?) (set! n4cea@n4b47@n4b3f n4b47@n4b3f) (set! n4ce9@n4b45@n4b40 n4b45@n4b40) (set! n4ce8@n4b43@n4b3e n4b43@n4b3e) (set! n4ce7@n4b3d@&i/o-rcd n4b3d@&i/o-rcd) (set! n4ce6@n4b3b@&i/o-rtd n4b3b@&i/o-rtd) (set! n4ce5@n4b39@i/o-error? n4b39@i/o-error?) (set! n4ce4@n4b37@make-i/o-error n4b37@make-i/o-error) (set! n4ce3@n4b35@p? n4b35@p?) (set! n4ce2@n4b32@n4b2a n4b32@n4b2a) (set! n4ce1@n4b30@n4b2b n4b30@n4b2b) (set! n4ce0@n4b2e@n4b29 n4b2e@n4b29) (set! n4cdf@n4b28@&undefined-rcd n4b28@&undefined-rcd) (set! n4cde@n4b26@&undefined-rtd n4b26@&undefined-rtd) (set! n4cdd@n4b24@undefined-violation? n4b24@undefined-violation?) (set! n4cdc@n4b22@make-undefined-violation n4b22@make-undefined-violation) (set! n4cdb@n4b20@p? n4b20@p?) (set! n4cda@n4b1d@n4b15 n4b1d@n4b15) (set! n4cd9@n4b1b@n4b16 n4b1b@n4b16) (set! n4cd8@n4b19@n4b14 n4b19@n4b14) (set! n4cd7@n4b13@&syntax-rcd n4b13@&syntax-rcd) (set! n4cd6@n4b11@&syntax-rtd n4b11@&syntax-rtd) (set! n4cd5@n4b0f@syntax-violation-subform n4b0f@syntax-violation-subform) (set! n4cd4@n4b0d@syntax-violation-form n4b0d@syntax-violation-form) (set! n4cd3@n4b0b@syntax-violation? n4b0b@syntax-violation?) (set! n4cd2@n4b09@n4af6 n4b09@n4af6) (set! n4cd1@n4b07@n4af4 n4b07@n4af4) (set! n4cd0@n4b05@make-syntax-violation n4b05@make-syntax-violation) (set! n4ccf@n4b03@p? n4b03@p?) (set! n4cce@n4b00@n4af8 n4b00@n4af8) (set! n4ccd@n4afe@n4af9 n4afe@n4af9) (set! n4ccc@n4afc@n4af7 n4afc@n4af7) (set! n4ccb@n4af2@&lexical-rcd n4af2@&lexical-rcd) (set! n4cca@n4af0@&lexical-rtd n4af0@&lexical-rtd) (set! n4cc9@n4aee@lexical-violation? n4aee@lexical-violation?) (set! n4cc8@n4aec@make-lexical-violation n4aec@make-lexical-violation) (set! n4cc7@n4aea@p? n4aea@p?) (set! n4cc6@n4ae7@n4adf n4ae7@n4adf) (set! n4cc5@n4ae5@n4ae0 n4ae5@n4ae0) (set! n4cc4@n4ae3@n4ade n4ae3@n4ade) (set! n4cc3@n4add@&implementation-restriction-rcd n4add@&implementation-restriction-rcd) (set! n4cc2@n4adb@&implementation-restriction-rtd n4adb@&implementation-restriction-rtd) (set! n4cc1@n4ad9@implementation-restriction-violation? n4ad9@implementation-restriction-violation?) (set! n4cc0@n4ad7@make-implementation-restriction-violation n4ad7@make-implementation-restriction-violation) (set! n4cbf@n4ad5@p? n4ad5@p?) (set! n4cbe@n4ad2@n4aca n4ad2@n4aca) (set! n4cbd@n4ad0@n4acb n4ad0@n4acb) (set! n4cbc@n4ace@n4ac9 n4ace@n4ac9) (set! n4cbb@n4ac8@&non-continuable-rcd n4ac8@&non-continuable-rcd) (set! n4cba@n4ac6@&non-continuable-rtd n4ac6@&non-continuable-rtd) (set! n4cb9@n4ac4@non-continuable-violation? n4ac4@non-continuable-violation?) (set! n4cb8@n4ac2@make-non-continuable-violation n4ac2@make-non-continuable-violation) (set! n4cb7@n4ac0@p? n4ac0@p?) (set! n4cb6@n4abd@n4ab5 n4abd@n4ab5) (set! n4cb5@n4abb@n4ab6 n4abb@n4ab6) (set! n4cb4@n4ab9@n4ab4 n4ab9@n4ab4) (set! n4cb3@n4ab3@&who-rcd n4ab3@&who-rcd) (set! n4cb2@n4ab1@&who-rtd n4ab1@&who-rtd) (set! n4cb1@n4aaf@condition-who n4aaf@condition-who) (set! n4cb0@n4aad@who-condition? n4aad@who-condition?) (set! n4caf@n4aab@n4a9a n4aab@n4a9a) (set! n4cae@n4aa9@make-who-condition n4aa9@make-who-condition) (set! n4cad@n4aa7@p? n4aa7@p?) (set! n4cac@n4aa4@n4a9c n4aa4@n4a9c) (set! n4cab@n4aa2@n4a9d n4aa2@n4a9d) (set! n4caa@n4aa0@n4a9b n4aa0@n4a9b) (set! n4ca9@n4a98@&irritants-rcd n4a98@&irritants-rcd) (set! n4ca8@n4a96@&irritants-rtd n4a96@&irritants-rtd) (set! n4ca7@n4a94@condition-irritants n4a94@condition-irritants) (set! n4ca6@n4a92@irritants-condition? n4a92@irritants-condition?) (set! n4ca5@n4a90@n4a7f n4a90@n4a7f) (set! n4ca4@n4a8e@make-irritants-condition n4a8e@make-irritants-condition) (set! n4ca3@n4a8c@p? n4a8c@p?) (set! n4ca2@n4a89@n4a81 n4a89@n4a81) (set! n4ca1@n4a87@n4a82 n4a87@n4a82) (set! n4ca0@n4a85@n4a80 n4a85@n4a80) (set! n4c9f@n4a7d@&assertion-rcd n4a7d@&assertion-rcd) (set! n4c9e@n4a7b@&assertion-rtd n4a7b@&assertion-rtd) (set! n4c9d@n4a79@assertion-violation? n4a79@assertion-violation?) (set! n4c9c@n4a77@make-assertion-violation n4a77@make-assertion-violation) (set! n4c9b@n4a75@p? n4a75@p?) (set! n4c9a@n4a72@n4a6a n4a72@n4a6a) (set! n4c99@n4a70@n4a6b n4a70@n4a6b) (set! n4c98@n4a6e@n4a69 n4a6e@n4a69) (set! n4c97@n4a68@&violation-rcd n4a68@&violation-rcd) (set! n4c96@n4a66@&violation-rtd n4a66@&violation-rtd) (set! n4c95@n4a64@violation? n4a64@violation?) (set! n4c94@n4a62@make-violation n4a62@make-violation) (set! n4c93@n4a60@p? n4a60@p?) (set! n4c92@n4a5d@n4a55 n4a5d@n4a55) (set! n4c91@n4a5b@n4a56 n4a5b@n4a56) (set! n4c90@n4a59@n4a54 n4a59@n4a54) (set! n4c8f@n4a53@&error-rcd n4a53@&error-rcd) (set! n4c8e@n4a51@&error-rtd n4a51@&error-rtd) (set! n4c8d@n4a4f@error? n4a4f@error?) (set! n4c8c@n4a4d@make-error n4a4d@make-error) (set! n4c8b@n4a4b@p? n4a4b@p?) (set! n4c8a@n4a48@n4a40 n4a48@n4a40) (set! n4c89@n4a46@n4a41 n4a46@n4a41) (set! n4c88@n4a44@n4a3f n4a44@n4a3f) (set! n4c87@n4a3e@&serious-rcd n4a3e@&serious-rcd) (set! n4c86@n4a3c@&serious-rtd n4a3c@&serious-rtd) (set! n4c85@n4a3a@serious-condition? n4a3a@serious-condition?) (set! n4c84@n4a38@make-serious-condition n4a38@make-serious-condition) (set! n4c83@n4a36@p? n4a36@p?) (set! n4c82@n4a33@n4a2b n4a33@n4a2b) (set! n4c81@n4a31@n4a2c n4a31@n4a2c) (set! n4c80@n4a2f@n4a2a n4a2f@n4a2a) (set! n4c7f@n4a29@&warning-rcd n4a29@&warning-rcd) (set! n4c7e@n4a27@&warning-rtd n4a27@&warning-rtd) (set! n4c7d@n4a25@warning? n4a25@warning?) (set! n4c7c@n4a23@make-warning n4a23@make-warning) (set! n4c7b@n4a21@p? n4a21@p?) (set! n4c7a@n4a1e@n4a16 n4a1e@n4a16) (set! n4c79@n4a1c@n4a17 n4a1c@n4a17) (set! n4c78@n4a1a@n4a15 n4a1a@n4a15) (set! n4c77@n4a14@&message-rcd n4a14@&message-rcd) (set! n4c76@n4a12@&message-rtd n4a12@&message-rtd) (set! n4c75@n4a10@condition-message n4a10@condition-message) (set! n4c74@n4a0e@message-condition? n4a0e@message-condition?) (set! n4c73@n4a0c@n49fb n4a0c@n49fb) (set! n4c72@n4a0a@make-message-condition n4a0a@make-message-condition) (set! n4c71@n4a08@p? n4a08@p?) (set! n4c70@n4a05@n49fd n4a05@n49fd) (set! n4c6f@n4a03@n49fe n4a03@n49fe) (set! n4c6e@n4a01@n49fc n4a01@n49fc) (set! n4c6d@n49b5@&condition-rcd n49b5@&condition-rcd) (set! n4c6c@n49b3@&condition-rtd n49b3@&condition-rtd) (set! n4c6b@n49b1@make-&condition n49b1@make-&condition) (set! n4c6a@n49af@&condition? n49af@&condition?) (set! n4c69@n49ac@n49a4 n49ac@n49a4) (set! n4c68@n49aa@n49a5 n49aa@n49a5) (set! n4c67@n49a8@n49a3 n49a8@n49a3)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (n28a6@n285b@current-primitive-locations (lambda (n5184@x) ((lambda (n5186@t) (if n5186@t (cdr n5186@t) '#f)) (assq n5184@x '((&no-nans-rcd . n4d57@n4c66@&no-nans-rcd) (&no-nans-rtd . n4d56@n4c64@&no-nans-rtd) (&no-infinities-rcd . n4d4f@n4c51@&no-infinities-rcd) (&no-infinities-rtd . n4d4e@n4c4f@&no-infinities-rtd) (&i/o-encoding-rcd . n4d47@n4c3c@&i/o-encoding-rcd) (&i/o-encoding-rtd . n4d46@n4c3a@&i/o-encoding-rtd) (&i/o-decoding-rcd . n4d3d@n4c21@&i/o-decoding-rcd) (&i/o-decoding-rtd . n4d3c@n4c1f@&i/o-decoding-rtd) (&i/o-port-rcd . n4d35@n4c0c@&i/o-port-rcd) (&i/o-port-rtd . n4d34@n4c0a@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . n4d2b@n4bf1@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . n4d2a@n4bef@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . n4d23@n4bdc@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . n4d22@n4bda@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . n4d1b@n4bc7@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . n4d1a@n4bc5@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . n4d13@n4bb2@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . n4d12@n4bb0@&i/o-file-protection-rtd) (&i/o-filename-rcd . n4d0b@n4b9d@&i/o-filename-rcd) (&i/o-filename-rtd . n4d0a@n4b9b@&i/o-filename-rtd) (&i/o-invalid-position-rcd . n4d01@n4b82@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . n4d00@n4b80@&i/o-invalid-position-rtd) (&i/o-write-rcd . n4cf7@n4b67@&i/o-write-rcd) (&i/o-write-rtd . n4cf6@n4b65@&i/o-write-rtd) (&i/o-read-rcd . n4cef@n4b52@&i/o-read-rcd) (&i/o-read-rtd . n4cee@n4b50@&i/o-read-rtd) (&i/o-rcd . n4ce7@n4b3d@&i/o-rcd) (&i/o-rtd . n4ce6@n4b3b@&i/o-rtd) (&undefined-rcd . n4cdf@n4b28@&undefined-rcd) (&undefined-rtd . n4cde@n4b26@&undefined-rtd) (&syntax-rcd . n4cd7@n4b13@&syntax-rcd) (&syntax-rtd . n4cd6@n4b11@&syntax-rtd) (&lexical-rcd . n4ccb@n4af2@&lexical-rcd) (&lexical-rtd . n4cca@n4af0@&lexical-rtd) (&implementation-restriction-rcd . n4cc3@n4add@&implementation-restriction-rcd) (&implementation-restriction-rtd . n4cc2@n4adb@&implementation-restriction-rtd) (&non-continuable-rcd . n4cbb@n4ac8@&non-continuable-rcd) (&non-continuable-rtd . n4cba@n4ac6@&non-continuable-rtd) (&who-rcd . n4cb3@n4ab3@&who-rcd) (&who-rtd . n4cb2@n4ab1@&who-rtd) (&irritants-rcd . n4ca9@n4a98@&irritants-rcd) (&irritants-rtd . n4ca8@n4a96@&irritants-rtd) (&assertion-rcd . n4c9f@n4a7d@&assertion-rcd) (&assertion-rtd . n4c9e@n4a7b@&assertion-rtd) (&violation-rcd . n4c97@n4a68@&violation-rcd) (&violation-rtd . n4c96@n4a66@&violation-rtd) (&error-rcd . n4c8f@n4a53@&error-rcd) (&error-rtd . n4c8e@n4a51@&error-rtd) (&serious-rcd . n4c87@n4a3e@&serious-rcd) (&serious-rtd . n4c86@n4a3c@&serious-rtd) (&warning-rcd . n4c7f@n4a29@&warning-rcd) (&warning-rtd . n4c7e@n4a27@&warning-rtd) (&message-rcd . n4c77@n4a14@&message-rcd) (&message-rtd . n4c76@n4a12@&message-rtd) (&condition-rcd . n4c6d@n49b5@&condition-rcd) (&condition-rtd . n4c6c@n49b3@&condition-rtd) (syntax-error . n4995@n2f9b@syntax-error) (syntax-dispatch . n492a@n2eb6@syntax-dispatch) (load . n4e88@n4d73@load) (interaction-environment . n499d@n2fab@interaction-environment) (library-path . n2abd@n294c@library-path) (make-parameter . n2855@n277f@make-parameter) (make-variable-transformer . n48e8@n2ce3@make-variable-transformer) (identifier? . n4998@n2fa1@identifier?) (generate-temporaries . n498e@n2f8d@generate-temporaries) (free-identifier=? . n498f@n2f8f@free-identifier=?) (syntax->datum . n499a@n2fa5@syntax->datum) (datum->syntax . n4999@n2fa3@datum->syntax) (bound-identifier=? . n4990@n2f91@bound-identifier=?) (make-i/o-write-error . n4cf4@n4b61@make-i/o-write-error) (make-i/o-read-error . n4cec@n4b4c@make-i/o-read-error) (make-i/o-port-error . n4d30@n4c02@make-i/o-port-error) (make-i/o-invalid-position-error . n4cfc@n4b78@make-i/o-invalid-position-error) (make-i/o-filename-error . n4d06@n4b93@make-i/o-filename-error) (make-i/o-file-protection-error . n4d10@n4bac@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . n4d18@n4bc1@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . n4d28@n4beb@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . n4d20@n4bd6@make-i/o-file-already-exists-error) (make-i/o-error . n4ce4@n4b37@make-i/o-error) (make-i/o-encoding-error . n4d42@n4c32@make-i/o-encoding-error) (make-i/o-decoding-error . n4d3a@n4c1b@make-i/o-decoding-error) (i/o-write-error? . n4cf5@n4b63@i/o-write-error?) (i/o-read-error? . n4ced@n4b4e@i/o-read-error?) (i/o-port-error? . n4d32@n4c06@i/o-port-error?) (i/o-invalid-position-error? . n4cfe@n4b7c@i/o-invalid-position-error?) (i/o-filename-error? . n4d08@n4b97@i/o-filename-error?) (i/o-file-protection-error? . n4d11@n4bae@i/o-file-protection-error?) (i/o-file-is-read-only-error? . n4d19@n4bc3@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . n4d29@n4bed@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . n4d21@n4bd8@i/o-file-already-exists-error?) (i/o-error? . n4ce5@n4b39@i/o-error?) (i/o-error-position . n4cff@n4b7e@i/o-error-position) (i/o-error-port . n4d33@n4c08@i/o-error-port) (i/o-error-filename . n4d09@n4b99@i/o-error-filename) (i/o-encoding-error? . n4d44@n4c36@i/o-encoding-error?) (i/o-encoding-error-char . n4d45@n4c38@i/o-encoding-error-char) (i/o-decoding-error? . n4d3b@n4c1d@i/o-decoding-error?) (scheme-report-environment . n4985@n2f7b@scheme-report-environment) (null-environment . n4984@n2f79@null-environment) (command-line . n4e85@n4d6d@command-line) (eval . n4987@n2f7f@eval) (environment . n4983@n2f77@environment) (who-condition? . n4cb0@n4aad@who-condition?) (warning? . n4c7d@n4a25@warning?) (violation? . n4c95@n4a64@violation?) (undefined-violation? . n4cdd@n4b24@undefined-violation?) (syntax-violation? . n4cd3@n4b0b@syntax-violation?) (syntax-violation-subform . n4cd5@n4b0f@syntax-violation-subform) (syntax-violation-form . n4cd4@n4b0d@syntax-violation-form) (syntax-violation . n4997@n2f9f@syntax-violation) (serious-condition? . n4c85@n4a3a@serious-condition?) (non-continuable-violation? . n4cb9@n4ac4@non-continuable-violation?) (message-condition? . n4c74@n4a0e@message-condition?) (make-who-condition . n4cae@n4aa9@make-who-condition) (make-warning . n4c7c@n4a23@make-warning) (make-violation . n4c94@n4a62@make-violation) (make-undefined-violation . n4cdc@n4b22@make-undefined-violation) (make-syntax-violation . n4cd0@n4b05@make-syntax-violation) (make-serious-condition . n4c84@n4a38@make-serious-condition) (make-non-continuable-violation . n4cb8@n4ac2@make-non-continuable-violation) (make-message-condition . n4c72@n4a0a@make-message-condition) (make-lexical-violation . n4cc8@n4aec@make-lexical-violation) (make-irritants-condition . n4ca4@n4a8e@make-irritants-condition) (make-implementation-restriction-violation . n4cc0@n4ad7@make-implementation-restriction-violation) (make-error . n4c8c@n4a4d@make-error) (make-assertion-violation . n4c9c@n4a77@make-assertion-violation) (lexical-violation? . n4cc9@n4aee@lexical-violation?) (irritants-condition? . n4ca6@n4a92@irritants-condition?) (implementation-restriction-violation? . n4cc1@n4ad9@implementation-restriction-violation?) (error? . n4c8d@n4a4f@error?) (condition-who . n4cb1@n4aaf@condition-who) (condition-message . n4c75@n4a10@condition-message) (condition-irritants . n4ca7@n4a94@condition-irritants) (assertion-violation? . n4c9d@n4a79@assertion-violation?) (no-nans-violation? . n4d55@n4c62@no-nans-violation?) (no-infinities-violation? . n4d4d@n4c4d@no-infinities-violation?) (make-no-nans-violation . n4d54@n4c60@make-no-nans-violation) (make-no-infinities-violation . n4d4c@n4c4b@make-no-infinities-violation) (assertion-error . n4994@n2f99@assertion-error)))))) (n2acd@n296c@install-library 'n5161 '(mosh interaction) '() '() '() '() '((regexp? . n5159) (alist->eq-hash-table . n5156) (format . n5153) (string-split . n5148) (call-process . n5142) (set-current-directory! . n513e) (expand-path . n513d) (current-directory . n513c) (%spawn . n513b) (%waitpid . n513a) (%ffi-supported? . n5139) (%ffi-pointer-ref . n5138) (%ffi-pointer->string . n5137) (%ffi-call->string-or-zero . n5136) (%ffi-call->double . n5135) (%ffi-call->void* . n5134) (%ffi-call->void . n5133) (%ffi-call->int . n5132) (%ffi-lookup . n5131) (%ffi-open . n5130) (%fork . n512f) (%pipe . n512e) (p . n512d) (string-upcase . n510f) (string-titlecase . n510e) (string-normalize-nfkd . n510d) (string-normalize-nfkc . n510c) (string-normalize-nfd . n510b) (string-normalize-nfc . n510a) (string-foldcase . n5109) (string-downcase . n5108) (string-ci>? . n5107) (string-ci>=? . n5106) (string-ci=? . n5105) (string-ci<? . n5104) (string-ci<=? . n5103) (char-whitespace? . n5102) (char-upper-case? . n5101) (char-title-case? . n5100) (char-numeric? . n50ff) (char-lower-case? . n50fe) (char-general-category . n50fd) (char-upcase . n50fc) (char-titlecase . n50fb) (char-foldcase . n50fa) (char-downcase . n50f9) (char-ci>? . n50f8) (char-ci>=? . n50f7) (char-ci=? . n50f6) (char-ci<? . n50f5) (char-ci<=? . n50f4) (char-alphabetic? . n50f3) (make-variable-transformer . n2ce2) (identifier? . n2fa0) (generate-temporaries . n2f8c) (free-identifier=? . n2f8e) (syntax->datum . n2fa4) (datum->syntax . n2fa2) (bound-identifier=? . n2f90) (record-type-descriptor? . n50f2) (record-predicate . n50f1) (record-mutator . n50f0) (record-constructor . n50ef) (record-accessor . n50ee) (make-record-type-descriptor . n50ed) (make-record-constructor-descriptor . n50ec) (record? . n50eb) (record-type-uid . n50ea) (record-type-sealed? . n50e9) (record-type-parent . n50e8) (record-type-opaque? . n50e7) (record-type-name . n50e6) (record-type-generative? . n50e5) (record-type-field-names . n50e4) (record-rtd . n50e3) (record-field-mutable? . n50e2) (delete-file . n50e1) (file-exists? . n50e0) (vector-sort! . n50df) (vector-sort . n50de) (list-sort . n50dd) (symbol-hash . n50dc) (string-ci-hash . n50db) (string-hash . n50da) (equal-hash . n50d9) (hashtable-equivalence-function . n50d8) (make-hashtable . n50d7) (hashtable-hash-function . n50d6) (make-eqv-hashtable . n50d5) (make-eq-hashtable . n50d4) (hashtable? . n50d3) (hashtable-update! . n50d2) (hashtable-size . n50d1) (hashtable-set! . n50d0) (hashtable-ref . n50cf) (hashtable-mutable? . n50ce) (hashtable-keys . n50cd) (hashtable-entries . n50cc) (hashtable-delete! . n50cb) (hashtable-copy . n50ca) (hashtable-contains? . n50c9) (hashtable-clear! . n50c8) (call-with-output-file . n50c7) (call-with-input-file . n50c6) (write-char . n50c5) (write . n50c4) (with-output-to-file . n50c3) (with-input-from-file . n50c2) (read-char . n50c1) (read . n50c0) (peek-char . n50bf) (open-output-file . n50be) (open-input-file . n50bd) (newline . n50bc) (display . n50bb) (close-output-port . n50ba) (close-input-port . n50b9) (eof-object? . n50b8) (eof-object . n50b7) (current-error-port . n50b6) (current-output-port . n50b5) (current-input-port . n50b4) (output-port? . n50b3) (input-port? . n50b2) (utf-8-codec . n50b1) (utf-16-codec . n50b0) (transcoder-error-handling-mode . n50af) (transcoder-eol-style . n50ae) (transcoder-codec . n50ad) (transcoded-port . n50ac) (textual-port? . n50ab) (string->bytevector . n50aa) (standard-output-port . n50a9) (standard-input-port . n50a8) (standard-error-port . n50a7) (set-port-position! . n50a6) (put-u8 . n50a5) (put-string . n50a4) (put-datum . n50a3) (put-char . n50a2) (put-bytevector . n50a1) (port? . n50a0) (port-transcoder . n509f) (port-position . n509e) (port-has-set-port-position!? . n509d) (port-has-port-position? . n509c) (port-eof? . n509b) (output-port-buffer-mode . n509a) (open-string-output-port . n5099) (open-string-input-port . n5098) (open-file-output-port . n5097) (open-file-input/output-port . n5096) (open-file-input-port . n5095) (open-bytevector-output-port . n5094) (open-bytevector-input-port . n5093) (native-transcoder . n5092) (native-eol-style . n5091) (make-transcoder . n5090) (latin-1-codec . n508f) (make-i/o-write-error . n4b60) (make-i/o-read-error . n4b4b) (make-i/o-port-error . n4c01) (make-i/o-invalid-position-error . n4b77) (make-i/o-filename-error . n4b92) (make-i/o-file-protection-error . n4bab) (make-i/o-file-is-read-only-error . n4bc0) (make-i/o-file-does-not-exist-error . n4bea) (make-i/o-file-already-exists-error . n4bd5) (make-i/o-error . n4b36) (make-i/o-encoding-error . n4c31) (make-i/o-decoding-error . n4c1a) (make-custom-textual-output-port . n508e) (make-custom-textual-input/output-port . n508d) (make-custom-textual-input-port . n508c) (make-custom-binary-output-port . n508b) (make-custom-binary-input/output-port . n508a) (make-custom-binary-input-port . n5089) (make-bytevector . n5088) (lookahead-u8 . n5087) (lookahead-char . n5086) (i/o-write-error? . n4b62) (i/o-read-error? . n4b4d) (i/o-port-error? . n4c05) (i/o-invalid-position-error? . n4b7b) (i/o-filename-error? . n4b96) (i/o-file-protection-error? . n4bad) (i/o-file-is-read-only-error? . n4bc2) (i/o-file-does-not-exist-error? . n4bec) (i/o-file-already-exists-error? . n4bd7) (i/o-error? . n4b38) (i/o-error-position . n4b7d) (i/o-error-port . n4c07) (i/o-error-filename . n4b98) (i/o-encoding-error? . n4c35) (i/o-encoding-error-char . n4c37) (i/o-decoding-error? . n4c1c) (get-u8 . n5085) (get-string-n! . n5084) (get-string-n . n5083) (get-string-all . n5082) (get-line . n5081) (get-datum . n5080) (get-char . n507f) (get-bytevector-some . n507e) (get-bytevector-n! . n507d) (get-bytevector-n . n507c) (get-bytevector-all . n507b) (flush-output-port . n507a) (close-port . n5079) (exit . n5071) (command-line . n4d6c) (string-fill! . n5070) (string-set! . n506f) (set-cdr! . n506e) (set-car! . n506d) (remove . n506c) (remv . n506b) (remp . n506a) (remq . n5069) (partition . n5068) (memv . n5067) (memq . n5066) (memp . n5065) (member . n5064) (exists . n5063) (for-all . n5062) (fold-right . n5061) (fold-left . n5060) (find . n505f) (filter . n505e) (cons* . n505d) (assv . n505c) (assq . n505b) (assp . n505a) (assoc . n5059) (call-with-string-output-port . n5058) (call-with-port . n5057) (call-with-bytevector-output-port . n5056) (bytevector->string . n5055) (buffer-mode? . n5054) (binary-port? . n5053) (with-exception-handler . n5052) (raise-continuable . n5051) (raise . n5050) (eval . n2f7e) (environment . n2f76) (make-enumeration . n504f) (enum-set=? . n504e) (enum-set-universe . n504d) (enum-set-union . n504c) (enum-set-subset? . n504b) (enum-set-projection . n504a) (enum-set-member? . n5049) (enum-set-intersection . n5048) (enum-set-indexer . n5047) (enum-set-difference . n5046) (enum-set-constructor . n5045) (enum-set-complement . n5044) (enum-set->list . n5043) (who-condition? . n4aac) (warning? . n4a24) (violation? . n4a63) (undefined-violation? . n4b23) (syntax-violation? . n4b0a) (syntax-violation-subform . n4b0e) (syntax-violation-form . n4b0c) (syntax-violation . n2f9e) (simple-conditions . n5042) (serious-condition? . n4a39) (non-continuable-violation? . n4ac3) (message-condition? . n4a0d) (make-who-condition . n4aa8) (make-warning . n4a22) (make-violation . n4a61) (make-undefined-violation . n4b21) (make-syntax-violation . n4b04) (make-serious-condition . n4a37) (make-non-continuable-violation . n4ac1) (make-message-condition . n4a09) (make-lexical-violation . n4aeb) (make-irritants-condition . n4a8d) (make-implementation-restriction-violation . n4ad6) (make-error . n4a4c) (make-assertion-violation . n4a76) (lexical-violation? . n4aed) (irritants-condition? . n4a91) (implementation-restriction-violation? . n4ad8) (error? . n4a4e) (condition-who . n4aae) (condition-predicate . n5041) (condition-message . n4a0f) (condition-irritants . n4a93) (condition-accessor . n5040) (condition . n503f) (assertion-violation? . n4a78) (condition? . n503e) (utf32->string . n503d) (utf16->string . n503c) (utf8->string . n503b) (uint-list->bytevector . n503a) (u8-list->bytevector . n5039) (string->utf8 . n5038) (string->utf32 . n5037) (string->utf16 . n5036) (sint-list->bytevector . n5035) (native-endianness . n5034) (bytevector? . n5033) (bytevector=? . n5032) (bytevector-uint-set! . n5031) (bytevector-uint-ref . n5030) (bytevector-u8-set! . n502f) (bytevector-u8-ref . n502e) (bytevector-u64-set! . n502d) (bytevector-u64-ref . n502c) (bytevector-u64-native-set! . n502b) (bytevector-u64-native-ref . n502a) (bytevector-u32-set! . n5029) (bytevector-u32-ref . n5028) (bytevector-u32-native-set! . n5027) (bytevector-u32-native-ref . n5026) (bytevector-u16-set! . n5025) (bytevector-u16-ref . n5024) (bytevector-u16-native-set! . n5023) (bytevector-u16-native-ref . n5022) (bytevector-sint-set! . n5021) (bytevector-sint-ref . n5020) (bytevector-s8-set! . n501f) (bytevector-s8-ref . n501e) (bytevector-s64-set! . n501d) (bytevector-s64-ref . n501c) (bytevector-s64-native-set! . n501b) (bytevector-s64-native-ref . n501a) (bytevector-s32-set! . n5019) (bytevector-s32-ref . n5018) (bytevector-s32-native-set! . n5017) (bytevector-s32-native-ref . n5016) (bytevector-s16-set! . n5015) (bytevector-s16-ref . n5014) (bytevector-s16-native-set! . n5013) (bytevector-s16-native-ref . n5012) (bytevector-length . n5011) (bytevector-ieee-single-ref . n5010) (bytevector-ieee-single-set! . n500f) (bytevector-ieee-single-native-set! . n500e) (bytevector-ieee-single-native-ref . n500d) (bytevector-ieee-double-set! . n500c) (bytevector-ieee-double-ref . n500b) (bytevector-ieee-double-native-set! . n500a) (bytevector-ieee-double-native-ref . n5009) (bytevector-fill! . n5008) (bytevector-copy! . n5007) (bytevector-copy . n5006) (bytevector->uint-list . n5005) (bytevector->u8-list . n5004) (bytevector->sint-list . n5003) (no-nans-violation? . n4c61) (no-infinities-violation? . n4c4c) (make-no-nans-violation . n4c5f) (make-no-infinities-violation . n4c4a) (real->flonum . n5002) (flzero? . n5001) (fltruncate . n5000) (fltan . n4fff) (flsqrt . n4ffe) (flsin . n4ffd) (flround . n4ffc) (flpositive? . n4ffb) (flonum? . n4ffa) (flodd? . n4ff9) (flnumerator . n4ff8) (flnegative? . n4ff7) (flnan? . n4ff6) (flmod0 . n4ff5) (flmod . n4ff4) (flmin . n4ff3) (flmax . n4ff2) (fllog . n4ff1) (flinteger? . n4ff0) (flinfinite? . n4fef) (flfloor . n4fee) (flfinite? . n4fed) (flexpt . n4fec) (flexp . n4feb) (fleven? . n4fea) (fldiv0-and-mod0 . n4fe9) (fldiv0 . n4fe8) (fldiv-and-mod . n4fe7) (fldiv . n4fe6) (fldenominator . n4fe5) (flcos . n4fe4) (flceiling . n4fe3) (flatan . n4fe2) (flasin . n4fe1) (flacos . n4fe0) (flabs . n4fdf) (fl>? . n4fde) (fl>=? . n4fdd) (fl=? . n4fdc) (fl<? . n4fdb) (fl<=? . n4fda) (fl/ . n4fd9) (fl- . n4fd8) (fl+ . n4fd7) (fl* . n4fd6) (fixnum->flonum . n4fd5) (fxzero? . n4fd4) (fxxor . n4fd3) (fxrotate-bit-field . n4fd2) (fxreverse-bit-field . n4fd1) (fxpositive? . n4fd0) (fxodd? . n4fcf) (fxnot . n4fce) (fxnegative? . n4fcd) (fxmod0 . n4fcc) (fxmod . n4fcb) (fxmin . n4fca) (fxmax . n4fc9) (fxlength . n4fc8) (fxior . n4fc7) (fxif . n4fc6) (fxfirst-bit-set . n4fc5) (fxeven? . n4fc4) (fxdiv0-and-mod0 . n4fc3) (fxdiv0 . n4fc2) (fxdiv-and-mod . n4fc1) (fxdiv . n4fc0) (fxcopy-bit-field . n4fbf) (fxcopy-bit . n4fbe) (fxbit-set? . n4fbd) (fxbit-field . n4fbc) (fxbit-count . n4fbb) (fxarithmetic-shift-right . n4fba) (fxarithmetic-shift-left . n4fb9) (fxarithmetic-shift . n4fb8) (fxand . n4fb7) (fx>? . n4fb6) (fx>=? . n4fb5) (fx=? . n4fb4) (fx<? . n4fb3) (fx<=? . n4fb2) (fx-/carry . n4fb1) (fx- . n4fb0) (fx+/carry . n4faf) (fx+ . n4fae) (fx*/carry . n4fad) (fx* . n4fac) (greatest-fixnum . n4fab) (least-fixnum . n4faa) (fixnum-width . n4fa9) (fixnum? . n4fa8) (bitwise-rotate-bit-field . n4fa7) (bitwise-reverse-bit-field . n4fa6) (bitwise-length . n4fa5) (bitwise-if . n4fa4) (bitwise-first-bit-set . n4fa3) (bitwise-copy-bit-field . n4fa2) (bitwise-copy-bit . n4fa1) (bitwise-bit-set? . n4fa0) (bitwise-bit-field . n4f9f) (bitwise-bit-count . n4f9e) (bitwise-xor . n4f9d) (bitwise-ior . n4f9c) (bitwise-and . n4f9b) (bitwise-not . n4f9a) (bitwise-arithmetic-shift-right . n4f99) (bitwise-arithmetic-shift-left . n4f98) (bitwise-arithmetic-shift . n4f97) (zero? . n4f96) (vector? . n4f95) (vector-set! . n4f94) (vector-ref . n4f93) (vector-map . n4f92) (vector-length . n4f91) (vector-for-each . n4f90) (vector-fill! . n4f8f) (vector->list . n4f8e) (vector . n4f8d) (values . n4f8c) (truncate . n4f8b) (tan . n4f8a) (symbol? . n4f89) (symbol=? . n4f88) (symbol->string . n4f87) (substring . n4f86) (string? . n4f85) (string>? . n4f84) (string>=? . n4f83) (string=? . n4f82) (string<? . n4f81) (string<=? . n4f80) (string-ref . n4f7f) (string-length . n4f7e) (string-for-each . n4f7d) (string-copy . n4f7c) (string-append . n4f7b) (string->symbol . n4f7a) (string->number . n4f79) (string->list . n4f78) (string . n4f77) (sqrt . n4f76) (sin . n4f75) (round . n4f74) (reverse . n4f73) (real? . n4f72) (real-valued? . n4f71) (real-part . n4f70) (rationalize . n4f6f) (rational? . n4f6e) (rational-valued? . n4f6d) (procedure? . n4f6c) (positive? . n4f6b) (pair? . n4f6a) (odd? . n4f69) (numerator . n4f68) (number? . n4f67) (number->string . n4f66) (null? . n4f65) (not . n4f64) (negative? . n4f63) (nan? . n4f62) (min . n4f61) (max . n4f60) (map . n4f5f) (make-vector . n4f5e) (make-string . n4f5d) (make-rectangular . n4f5c) (make-polar . n4f5b) (magnitude . n4f5a) (log . n4f59) (list? . n4f58) (list-tail . n4f57) (list-ref . n4f56) (list->vector . n4f55) (list->string . n4f54) (list . n4f53) (length . n4f52) (lcm . n4f51) (integer? . n4f50) (integer-valued? . n4f4f) (integer->char . n4f4e) (infinite? . n4f4d) (inexact? . n4f4c) (inexact . n4f4b) (imag-part . n4f4a) (gcd . n4f49) (for-each . n4f48) (floor . n4f47) (finite? . n4f46) (expt . n4f45) (exp . n4f44) (exact? . n4f43) (exact-integer-sqrt . n4f42) (exact . n4f41) (even? . n4f40) (error . n4f3f) (eqv? . n4f3e) (equal? . n4f3d) (eq? . n4f3c) (dynamic-wind . n4f3b) (div0-and-mod0 . n4f3a) (mod0 . n4f39) (div0 . n4f38) (div-and-mod . n4f37) (mod . n4f36) (div . n4f35) (denominator . n4f34) (cos . n4f33) (cons . n4f32) (complex? . n4f31) (char? . n4f30) (char>? . n4f2f) (char>=? . n4f2e) (char=? . n4f2d) (char<? . n4f2c) (char<=? . n4f2b) (char->integer . n4f2a) (ceiling . n4f29) (call-with-values . n4f28) (call/cc . n4f27) (call-with-current-continuation . n4f26) (cddddr . n4f25) (cdddar . n4f24) (cddadr . n4f23) (cddaar . n4f22) (cdaddr . n4f21) (cdadar . n4f20) (cdaadr . n4f1f) (cdaaar . n4f1e) (cadddr . n4f1d) (caddar . n4f1c) (cadadr . n4f1b) (cadaar . n4f1a) (caaddr . n4f19) (caadar . n4f18) (caaadr . n4f17) (caaaar . n4f16) (cdddr . n4f15) (cddar . n4f14) (cdadr . n4f13) (cdaar . n4f12) (caddr . n4f11) (cadar . n4f10) (caadr . n4f0f) (caaar . n4f0e) (cddr . n4f0d) (cdar . n4f0c) (cadr . n4f0b) (caar . n4f0a) (cdr . n4f09) (car . n4f08) (boolean? . n4f07) (boolean=? . n4f06) (atan . n4f05) (assertion-violation . n4f04) (asin . n4f03) (apply . n4f02) (append . n4f01) (angle . n4f00) (acos . n4eff) (abs . n4efe) (/ . n4efd) (* . n4efc) (- . n4efb) (+ . n4efa) (>= . n4ef9) (> . n4ef8) (= . n4ef7) (<= . n4ef6) (< . n4ef5) (library . n4ef4) (&no-nans . n4ef3) (&no-infinities . n4ef2) (&i/o-encoding . n4ef1) (&i/o-decoding . n4ef0) (&i/o-port . n4eef) (&i/o-file-does-not-exist . n4eee) (&i/o-file-already-exists . n4eed) (&i/o-file-is-read-only . n4eec) (&i/o-file-protection . n4eeb) (&i/o-filename . n4eea) (&i/o-invalid-position . n4ee9) (&i/o-write . n4ee8) (&i/o-read . n4ee7) (&i/o . n4ee6) (&undefined . n4ee5) (&syntax . n4ee4) (&lexical . n4ee3) (&implementation-restriction . n4ee2) (&non-continuable . n4ee1) (&who . n4ee0) (&irritants . n4edf) (&assertion . n4ede) (&violation . n4edd) (&error . n4edc) (&serious . n4edb) (&warning . n4eda) (&message . n4ed9) (&condition . n4ed8) (define-condition-type . n4ed7) (define-enumeration . n4ed6) (define-record-type . n4ed5) (parent-rtd . n4ed4) (nongenerative . n4ed3) (opaque . n4ed2) (sealed . n4ed1) (protocol . n4ed0) (parent . n4ecf) (immutable . n4ece) (mutable . n4ecd) (fields . n4ecc) (error-handling-mode . n4ecb) (file-options . n4eca) (buffer-mode . n4ec9) (eol-style . n4ec8) (guard . n4ec7) (unsyntax-splicing . n4ec4) (unsyntax . n4ec3) (unquote-splicing . n4ec2) (unquote . n4ec1) (_ . n4ec0) (else . n4ebf) (=> . n4ebe) (... . n4ebd) (assert . n4ebc) (endianness . n4ebb) (time . n4eb9) (do . n4eb8) (cond . n4eb7) (let* . n4eb6) (let . n4eb5) (let*-values . n4eb4) (let-values . n4eb3) (identifier-syntax . n4eb2) (with-syntax . n4eb1) (quasisyntax . n4eb0) (quasiquote . n4eaf) (syntax-rules . n4eae) (include . n4ead) (record-constructor-descriptor . n4eab) (record-type-descriptor . n4eaa) (case . n4ea9) (unless . n4ea7) (when . n4ea6) (or . n4ea5) (and . n4ea4) (if . n4ea3) (letrec* . n4ea2) (letrec . n4ea1) (case-lambda . n4e9f) (lambda . n4e9e) (syntax . n4e9d) (syntax-case . n4e9c) (quote . n4e9b) (letrec-syntax . n4e99) (let-syntax . n4e98) (set! . n4e97) (import . n4e96) (begin . n4e95) (define-syntax . n4e93) (define . n4e92)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5162 '(psyntax null-environment-5) '() '() '() '() '((make-promise . n5072) (unquote-splicing . n4ec2) (unquote . n4ec1) (_ . n4ec0) (else . n4ebf) (=> . n4ebe) (... . n4ebd) (delay . n4eba) (do . n4eb8) (cond . n4eb7) (let* . n4eb6) (let . n4eb5) (quasiquote . n4eaf) (syntax-rules . n4eae) (case . n4ea9) (or . n4ea5) (and . n4ea4) (if . n4ea3) (letrec . n4ea1) (lambda . n4e9e) (quote . n4e9b) (letrec-syntax . n4e99) (let-syntax . n4e98) (set! . n4e97) (begin . n4e95) (define-syntax . n4e93) (define . n4e92)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5163 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . n5107) (string-ci>=? . n5106) (string-ci=? . n5105) (string-ci<? . n5104) (string-ci<=? . n5103) (char-whitespace? . n5102) (char-upper-case? . n5101) (char-numeric? . n50ff) (char-lower-case? . n50fe) (char-upcase . n50fc) (char-downcase . n50f9) (char-ci>? . n50f8) (char-ci>=? . n50f7) (char-ci=? . n50f6) (char-ci<? . n50f5) (char-ci<=? . n50f4) (char-alphabetic? . n50f3) (call-with-output-file . n50c7) (call-with-input-file . n50c6) (write-char . n50c5) (write . n50c4) (with-output-to-file . n50c3) (with-input-from-file . n50c2) (read-char . n50c1) (read . n50c0) (peek-char . n50bf) (open-output-file . n50be) (open-input-file . n50bd) (newline . n50bc) (display . n50bb) (close-output-port . n50ba) (close-input-port . n50b9) (eof-object . n50b7) (current-output-port . n50b5) (current-input-port . n50b4) (output-port? . n50b3) (input-port? . n50b2) (scheme-report-environment . n2f7a) (quotient . n5078) (null-environment . n2f78) (remainder . n5077) (modulo . n5076) (inexact->exact . n5075) (force . n5074) (exact->inexact . n5073) (make-promise . n5072) (string-fill! . n5070) (string-set! . n506f) (set-cdr! . n506e) (set-car! . n506d) (memv . n5067) (memq . n5066) (member . n5064) (assv . n505c) (assq . n505b) (assoc . n5059) (eval . n2f7e) (zero? . n4f96) (vector? . n4f95) (vector-set! . n4f94) (vector-ref . n4f93) (vector-length . n4f91) (vector-fill! . n4f8f) (vector->list . n4f8e) (vector . n4f8d) (values . n4f8c) (truncate . n4f8b) (tan . n4f8a) (symbol? . n4f89) (symbol->string . n4f87) (substring . n4f86) (string? . n4f85) (string>? . n4f84) (string>=? . n4f83) (string=? . n4f82) (string<? . n4f81) (string<=? . n4f80) (string-ref . n4f7f) (string-length . n4f7e) (string-copy . n4f7c) (string-append . n4f7b) (string->symbol . n4f7a) (string->number . n4f79) (string->list . n4f78) (string . n4f77) (sqrt . n4f76) (sin . n4f75) (round . n4f74) (reverse . n4f73) (real? . n4f72) (real-part . n4f70) (rationalize . n4f6f) (rational? . n4f6e) (procedure? . n4f6c) (positive? . n4f6b) (pair? . n4f6a) (odd? . n4f69) (numerator . n4f68) (number? . n4f67) (number->string . n4f66) (not . n4f64) (negative? . n4f63) (min . n4f61) (max . n4f60) (map . n4f5f) (make-vector . n4f5e) (make-string . n4f5d) (make-rectangular . n4f5c) (make-polar . n4f5b) (magnitude . n4f5a) (log . n4f59) (list? . n4f58) (list-tail . n4f57) (list-ref . n4f56) (list->vector . n4f55) (list->string . n4f54) (list . n4f53) (length . n4f52) (lcm . n4f51) (integer? . n4f50) (integer->char . n4f4e) (inexact? . n4f4c) (imag-part . n4f4a) (gcd . n4f49) (for-each . n4f48) (floor . n4f47) (expt . n4f45) (exp . n4f44) (exact? . n4f43) (even? . n4f40) (eqv? . n4f3e) (equal? . n4f3d) (eq? . n4f3c) (dynamic-wind . n4f3b) (denominator . n4f34) (cos . n4f33) (cons . n4f32) (complex? . n4f31) (char? . n4f30) (char>? . n4f2f) (char>=? . n4f2e) (char=? . n4f2d) (char<? . n4f2c) (char<=? . n4f2b) (char->integer . n4f2a) (ceiling . n4f29) (call-with-values . n4f28) (call-with-current-continuation . n4f26) (cddddr . n4f25) (cdddar . n4f24) (cddadr . n4f23) (cddaar . n4f22) (cdaddr . n4f21) (cdadar . n4f20) (cdaadr . n4f1f) (cdaaar . n4f1e) (cadddr . n4f1d) (caddar . n4f1c) (cadadr . n4f1b) (cadaar . n4f1a) (caaddr . n4f19) (caadar . n4f18) (caaadr . n4f17) (caaaar . n4f16) (cdddr . n4f15) (cddar . n4f14) (cdadr . n4f13) (cdaar . n4f12) (caddr . n4f11) (cadar . n4f10) (caadr . n4f0f) (caaar . n4f0e) (cddr . n4f0d) (cdar . n4f0c) (cadr . n4f0b) (caar . n4f0a) (cdr . n4f09) (car . n4f08) (boolean? . n4f07) (atan . n4f05) (asin . n4f03) (apply . n4f02) (append . n4f01) (angle . n4f00) (acos . n4eff) (abs . n4efe) (/ . n4efd) (* . n4efc) (- . n4efb) (+ . n4efa) (>= . n4ef9) (> . n4ef8) (= . n4ef7) (<= . n4ef6) (< . n4ef5) (unquote-splicing . n4ec2) (unquote . n4ec1) (else . n4ebf) (=> . n4ebe) (... . n4ebd) (delay . n4eba) (do . n4eb8) (cond . n4eb7) (let* . n4eb6) (let . n4eb5) (quasiquote . n4eaf) (syntax-rules . n4eae) (case . n4ea9) (or . n4ea5) (and . n4ea4) (if . n4ea3) (letrec . n4ea1) (lambda . n4e9e) (quote . n4e9b) (letrec-syntax . n4e99) (let-syntax . n4e98) (set! . n4e97) (begin . n4e95) (define-syntax . n4e93) (define . n4e92)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5164 '(psyntax modules) '() '() '() '() '((module . n4e94)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5165 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5166 '(rnrs) '(6) '() '() '() '((regexp? . n5159) (string-upcase . n510f) (string-titlecase . n510e) (string-normalize-nfkd . n510d) (string-normalize-nfkc . n510c) (string-normalize-nfd . n510b) (string-normalize-nfc . n510a) (string-foldcase . n5109) (string-downcase . n5108) (string-ci>? . n5107) (string-ci>=? . n5106) (string-ci=? . n5105) (string-ci<? . n5104) (string-ci<=? . n5103) (char-whitespace? . n5102) (char-upper-case? . n5101) (char-title-case? . n5100) (char-numeric? . n50ff) (char-lower-case? . n50fe) (char-general-category . n50fd) (char-upcase . n50fc) (char-titlecase . n50fb) (char-foldcase . n50fa) (char-downcase . n50f9) (char-ci>? . n50f8) (char-ci>=? . n50f7) (char-ci=? . n50f6) (char-ci<? . n50f5) (char-ci<=? . n50f4) (char-alphabetic? . n50f3) (make-variable-transformer . n2ce2) (identifier? . n2fa0) (generate-temporaries . n2f8c) (free-identifier=? . n2f8e) (syntax->datum . n2fa4) (datum->syntax . n2fa2) (bound-identifier=? . n2f90) (record-type-descriptor? . n50f2) (record-predicate . n50f1) (record-mutator . n50f0) (record-constructor . n50ef) (record-accessor . n50ee) (make-record-type-descriptor . n50ed) (make-record-constructor-descriptor . n50ec) (record? . n50eb) (record-type-uid . n50ea) (record-type-sealed? . n50e9) (record-type-parent . n50e8) (record-type-opaque? . n50e7) (record-type-name . n50e6) (record-type-generative? . n50e5) (record-type-field-names . n50e4) (record-rtd . n50e3) (record-field-mutable? . n50e2) (delete-file . n50e1) (file-exists? . n50e0) (vector-sort! . n50df) (vector-sort . n50de) (list-sort . n50dd) (symbol-hash . n50dc) (string-ci-hash . n50db) (string-hash . n50da) (equal-hash . n50d9) (hashtable-equivalence-function . n50d8) (make-hashtable . n50d7) (hashtable-hash-function . n50d6) (make-eqv-hashtable . n50d5) (make-eq-hashtable . n50d4) (hashtable? . n50d3) (hashtable-update! . n50d2) (hashtable-size . n50d1) (hashtable-set! . n50d0) (hashtable-ref . n50cf) (hashtable-mutable? . n50ce) (hashtable-keys . n50cd) (hashtable-entries . n50cc) (hashtable-delete! . n50cb) (hashtable-copy . n50ca) (hashtable-contains? . n50c9) (hashtable-clear! . n50c8) (call-with-output-file . n50c7) (call-with-input-file . n50c6) (write-char . n50c5) (write . n50c4) (with-output-to-file . n50c3) (with-input-from-file . n50c2) (read-char . n50c1) (read . n50c0) (peek-char . n50bf) (open-output-file . n50be) (open-input-file . n50bd) (newline . n50bc) (display . n50bb) (close-output-port . n50ba) (close-input-port . n50b9) (eof-object? . n50b8) (eof-object . n50b7) (current-error-port . n50b6) (current-output-port . n50b5) (current-input-port . n50b4) (output-port? . n50b3) (input-port? . n50b2) (utf-8-codec . n50b1) (utf-16-codec . n50b0) (transcoder-error-handling-mode . n50af) (transcoder-eol-style . n50ae) (transcoder-codec . n50ad) (transcoded-port . n50ac) (textual-port? . n50ab) (string->bytevector . n50aa) (standard-output-port . n50a9) (standard-input-port . n50a8) (standard-error-port . n50a7) (set-port-position! . n50a6) (put-u8 . n50a5) (put-string . n50a4) (put-datum . n50a3) (put-char . n50a2) (put-bytevector . n50a1) (port? . n50a0) (port-transcoder . n509f) (port-position . n509e) (port-has-set-port-position!? . n509d) (port-has-port-position? . n509c) (port-eof? . n509b) (output-port-buffer-mode . n509a) (open-string-output-port . n5099) (open-string-input-port . n5098) (open-file-output-port . n5097) (open-file-input/output-port . n5096) (open-file-input-port . n5095) (open-bytevector-output-port . n5094) (open-bytevector-input-port . n5093) (native-transcoder . n5092) (native-eol-style . n5091) (make-transcoder . n5090) (latin-1-codec . n508f) (make-i/o-write-error . n4b60) (make-i/o-read-error . n4b4b) (make-i/o-port-error . n4c01) (make-i/o-invalid-position-error . n4b77) (make-i/o-filename-error . n4b92) (make-i/o-file-protection-error . n4bab) (make-i/o-file-is-read-only-error . n4bc0) (make-i/o-file-does-not-exist-error . n4bea) (make-i/o-file-already-exists-error . n4bd5) (make-i/o-error . n4b36) (make-i/o-encoding-error . n4c31) (make-i/o-decoding-error . n4c1a) (make-custom-textual-output-port . n508e) (make-custom-textual-input/output-port . n508d) (make-custom-textual-input-port . n508c) (make-custom-binary-output-port . n508b) (make-custom-binary-input/output-port . n508a) (make-custom-binary-input-port . n5089) (make-bytevector . n5088) (lookahead-u8 . n5087) (lookahead-char . n5086) (i/o-write-error? . n4b62) (i/o-read-error? . n4b4d) (i/o-port-error? . n4c05) (i/o-invalid-position-error? . n4b7b) (i/o-filename-error? . n4b96) (i/o-file-protection-error? . n4bad) (i/o-file-is-read-only-error? . n4bc2) (i/o-file-does-not-exist-error? . n4bec) (i/o-file-already-exists-error? . n4bd7) (i/o-error? . n4b38) (i/o-error-position . n4b7d) (i/o-error-port . n4c07) (i/o-error-filename . n4b98) (i/o-encoding-error? . n4c35) (i/o-encoding-error-char . n4c37) (i/o-decoding-error? . n4c1c) (get-u8 . n5085) (get-string-n! . n5084) (get-string-n . n5083) (get-string-all . n5082) (get-line . n5081) (get-datum . n5080) (get-char . n507f) (get-bytevector-some . n507e) (get-bytevector-n! . n507d) (get-bytevector-n . n507c) (get-bytevector-all . n507b) (flush-output-port . n507a) (close-port . n5079) (exit . n5071) (command-line . n4d6c) (remove . n506c) (remv . n506b) (remp . n506a) (remq . n5069) (partition . n5068) (memv . n5067) (memq . n5066) (memp . n5065) (member . n5064) (exists . n5063) (for-all . n5062) (fold-right . n5061) (fold-left . n5060) (find . n505f) (filter . n505e) (cons* . n505d) (assv . n505c) (assq . n505b) (assp . n505a) (assoc . n5059) (call-with-string-output-port . n5058) (call-with-port . n5057) (call-with-bytevector-output-port . n5056) (bytevector->string . n5055) (buffer-mode? . n5054) (binary-port? . n5053) (with-exception-handler . n5052) (raise-continuable . n5051) (raise . n5050) (make-enumeration . n504f) (enum-set=? . n504e) (enum-set-universe . n504d) (enum-set-union . n504c) (enum-set-subset? . n504b) (enum-set-projection . n504a) (enum-set-member? . n5049) (enum-set-intersection . n5048) (enum-set-indexer . n5047) (enum-set-difference . n5046) (enum-set-constructor . n5045) (enum-set-complement . n5044) (enum-set->list . n5043) (who-condition? . n4aac) (warning? . n4a24) (violation? . n4a63) (undefined-violation? . n4b23) (syntax-violation? . n4b0a) (syntax-violation-subform . n4b0e) (syntax-violation-form . n4b0c) (syntax-violation . n2f9e) (simple-conditions . n5042) (serious-condition? . n4a39) (non-continuable-violation? . n4ac3) (message-condition? . n4a0d) (make-who-condition . n4aa8) (make-warning . n4a22) (make-violation . n4a61) (make-undefined-violation . n4b21) (make-syntax-violation . n4b04) (make-serious-condition . n4a37) (make-non-continuable-violation . n4ac1) (make-message-condition . n4a09) (make-lexical-violation . n4aeb) (make-irritants-condition . n4a8d) (make-implementation-restriction-violation . n4ad6) (make-error . n4a4c) (make-assertion-violation . n4a76) (lexical-violation? . n4aed) (irritants-condition? . n4a91) (implementation-restriction-violation? . n4ad8) (error? . n4a4e) (condition-who . n4aae) (condition-predicate . n5041) (condition-message . n4a0f) (condition-irritants . n4a93) (condition-accessor . n5040) (condition . n503f) (assertion-violation? . n4a78) (condition? . n503e) (utf32->string . n503d) (utf16->string . n503c) (utf8->string . n503b) (uint-list->bytevector . n503a) (u8-list->bytevector . n5039) (string->utf8 . n5038) (string->utf32 . n5037) (string->utf16 . n5036) (sint-list->bytevector . n5035) (native-endianness . n5034) (bytevector? . n5033) (bytevector=? . n5032) (bytevector-uint-set! . n5031) (bytevector-uint-ref . n5030) (bytevector-u8-set! . n502f) (bytevector-u8-ref . n502e) (bytevector-u64-set! . n502d) (bytevector-u64-ref . n502c) (bytevector-u64-native-set! . n502b) (bytevector-u64-native-ref . n502a) (bytevector-u32-set! . n5029) (bytevector-u32-ref . n5028) (bytevector-u32-native-set! . n5027) (bytevector-u32-native-ref . n5026) (bytevector-u16-set! . n5025) (bytevector-u16-ref . n5024) (bytevector-u16-native-set! . n5023) (bytevector-u16-native-ref . n5022) (bytevector-sint-set! . n5021) (bytevector-sint-ref . n5020) (bytevector-s8-set! . n501f) (bytevector-s8-ref . n501e) (bytevector-s64-set! . n501d) (bytevector-s64-ref . n501c) (bytevector-s64-native-set! . n501b) (bytevector-s64-native-ref . n501a) (bytevector-s32-set! . n5019) (bytevector-s32-ref . n5018) (bytevector-s32-native-set! . n5017) (bytevector-s32-native-ref . n5016) (bytevector-s16-set! . n5015) (bytevector-s16-ref . n5014) (bytevector-s16-native-set! . n5013) (bytevector-s16-native-ref . n5012) (bytevector-length . n5011) (bytevector-ieee-single-ref . n5010) (bytevector-ieee-single-set! . n500f) (bytevector-ieee-single-native-set! . n500e) (bytevector-ieee-single-native-ref . n500d) (bytevector-ieee-double-set! . n500c) (bytevector-ieee-double-ref . n500b) (bytevector-ieee-double-native-set! . n500a) (bytevector-ieee-double-native-ref . n5009) (bytevector-fill! . n5008) (bytevector-copy! . n5007) (bytevector-copy . n5006) (bytevector->uint-list . n5005) (bytevector->u8-list . n5004) (bytevector->sint-list . n5003) (no-nans-violation? . n4c61) (no-infinities-violation? . n4c4c) (make-no-nans-violation . n4c5f) (make-no-infinities-violation . n4c4a) (real->flonum . n5002) (flzero? . n5001) (fltruncate . n5000) (fltan . n4fff) (flsqrt . n4ffe) (flsin . n4ffd) (flround . n4ffc) (flpositive? . n4ffb) (flonum? . n4ffa) (flodd? . n4ff9) (flnumerator . n4ff8) (flnegative? . n4ff7) (flnan? . n4ff6) (flmod0 . n4ff5) (flmod . n4ff4) (flmin . n4ff3) (flmax . n4ff2) (fllog . n4ff1) (flinteger? . n4ff0) (flinfinite? . n4fef) (flfloor . n4fee) (flfinite? . n4fed) (flexpt . n4fec) (flexp . n4feb) (fleven? . n4fea) (fldiv0-and-mod0 . n4fe9) (fldiv0 . n4fe8) (fldiv-and-mod . n4fe7) (fldiv . n4fe6) (fldenominator . n4fe5) (flcos . n4fe4) (flceiling . n4fe3) (flatan . n4fe2) (flasin . n4fe1) (flacos . n4fe0) (flabs . n4fdf) (fl>? . n4fde) (fl>=? . n4fdd) (fl=? . n4fdc) (fl<? . n4fdb) (fl<=? . n4fda) (fl/ . n4fd9) (fl- . n4fd8) (fl+ . n4fd7) (fl* . n4fd6) (fixnum->flonum . n4fd5) (fxzero? . n4fd4) (fxxor . n4fd3) (fxrotate-bit-field . n4fd2) (fxreverse-bit-field . n4fd1) (fxpositive? . n4fd0) (fxodd? . n4fcf) (fxnot . n4fce) (fxnegative? . n4fcd) (fxmod0 . n4fcc) (fxmod . n4fcb) (fxmin . n4fca) (fxmax . n4fc9) (fxlength . n4fc8) (fxior . n4fc7) (fxif . n4fc6) (fxfirst-bit-set . n4fc5) (fxeven? . n4fc4) (fxdiv0-and-mod0 . n4fc3) (fxdiv0 . n4fc2) (fxdiv-and-mod . n4fc1) (fxdiv . n4fc0) (fxcopy-bit-field . n4fbf) (fxcopy-bit . n4fbe) (fxbit-set? . n4fbd) (fxbit-field . n4fbc) (fxbit-count . n4fbb) (fxarithmetic-shift-right . n4fba) (fxarithmetic-shift-left . n4fb9) (fxarithmetic-shift . n4fb8) (fxand . n4fb7) (fx>? . n4fb6) (fx>=? . n4fb5) (fx=? . n4fb4) (fx<? . n4fb3) (fx<=? . n4fb2) (fx-/carry . n4fb1) (fx- . n4fb0) (fx+/carry . n4faf) (fx+ . n4fae) (fx*/carry . n4fad) (fx* . n4fac) (greatest-fixnum . n4fab) (least-fixnum . n4faa) (fixnum-width . n4fa9) (fixnum? . n4fa8) (bitwise-rotate-bit-field . n4fa7) (bitwise-reverse-bit-field . n4fa6) (bitwise-length . n4fa5) (bitwise-if . n4fa4) (bitwise-first-bit-set . n4fa3) (bitwise-copy-bit-field . n4fa2) (bitwise-copy-bit . n4fa1) (bitwise-bit-set? . n4fa0) (bitwise-bit-field . n4f9f) (bitwise-bit-count . n4f9e) (bitwise-xor . n4f9d) (bitwise-ior . n4f9c) (bitwise-and . n4f9b) (bitwise-not . n4f9a) (bitwise-arithmetic-shift-right . n4f99) (bitwise-arithmetic-shift-left . n4f98) (bitwise-arithmetic-shift . n4f97) (zero? . n4f96) (vector? . n4f95) (vector-set! . n4f94) (vector-ref . n4f93) (vector-map . n4f92) (vector-length . n4f91) (vector-for-each . n4f90) (vector-fill! . n4f8f) (vector->list . n4f8e) (vector . n4f8d) (values . n4f8c) (truncate . n4f8b) (tan . n4f8a) (symbol? . n4f89) (symbol=? . n4f88) (symbol->string . n4f87) (substring . n4f86) (string? . n4f85) (string>? . n4f84) (string>=? . n4f83) (string=? . n4f82) (string<? . n4f81) (string<=? . n4f80) (string-ref . n4f7f) (string-length . n4f7e) (string-for-each . n4f7d) (string-copy . n4f7c) (string-append . n4f7b) (string->symbol . n4f7a) (string->number . n4f79) (string->list . n4f78) (string . n4f77) (sqrt . n4f76) (sin . n4f75) (round . n4f74) (reverse . n4f73) (real? . n4f72) (real-valued? . n4f71) (real-part . n4f70) (rationalize . n4f6f) (rational? . n4f6e) (rational-valued? . n4f6d) (procedure? . n4f6c) (positive? . n4f6b) (pair? . n4f6a) (odd? . n4f69) (numerator . n4f68) (number? . n4f67) (number->string . n4f66) (null? . n4f65) (not . n4f64) (negative? . n4f63) (nan? . n4f62) (min . n4f61) (max . n4f60) (map . n4f5f) (make-vector . n4f5e) (make-string . n4f5d) (make-rectangular . n4f5c) (make-polar . n4f5b) (magnitude . n4f5a) (log . n4f59) (list? . n4f58) (list-tail . n4f57) (list-ref . n4f56) (list->vector . n4f55) (list->string . n4f54) (list . n4f53) (length . n4f52) (lcm . n4f51) (integer? . n4f50) (integer-valued? . n4f4f) (integer->char . n4f4e) (infinite? . n4f4d) (inexact? . n4f4c) (inexact . n4f4b) (imag-part . n4f4a) (gcd . n4f49) (for-each . n4f48) (floor . n4f47) (finite? . n4f46) (expt . n4f45) (exp . n4f44) (exact? . n4f43) (exact-integer-sqrt . n4f42) (exact . n4f41) (even? . n4f40) (error . n4f3f) (eqv? . n4f3e) (equal? . n4f3d) (eq? . n4f3c) (dynamic-wind . n4f3b) (div0-and-mod0 . n4f3a) (mod0 . n4f39) (div0 . n4f38) (div-and-mod . n4f37) (mod . n4f36) (div . n4f35) (denominator . n4f34) (cos . n4f33) (cons . n4f32) (complex? . n4f31) (char? . n4f30) (char>? . n4f2f) (char>=? . n4f2e) (char=? . n4f2d) (char<? . n4f2c) (char<=? . n4f2b) (char->integer . n4f2a) (ceiling . n4f29) (call-with-values . n4f28) (call/cc . n4f27) (call-with-current-continuation . n4f26) (cddddr . n4f25) (cdddar . n4f24) (cddadr . n4f23) (cddaar . n4f22) (cdaddr . n4f21) (cdadar . n4f20) (cdaadr . n4f1f) (cdaaar . n4f1e) (cadddr . n4f1d) (caddar . n4f1c) (cadadr . n4f1b) (cadaar . n4f1a) (caaddr . n4f19) (caadar . n4f18) (caaadr . n4f17) (caaaar . n4f16) (cdddr . n4f15) (cddar . n4f14) (cdadr . n4f13) (cdaar . n4f12) (caddr . n4f11) (cadar . n4f10) (caadr . n4f0f) (caaar . n4f0e) (cddr . n4f0d) (cdar . n4f0c) (cadr . n4f0b) (caar . n4f0a) (cdr . n4f09) (car . n4f08) (boolean? . n4f07) (boolean=? . n4f06) (atan . n4f05) (assertion-violation . n4f04) (asin . n4f03) (apply . n4f02) (append . n4f01) (angle . n4f00) (acos . n4eff) (abs . n4efe) (/ . n4efd) (* . n4efc) (- . n4efb) (+ . n4efa) (>= . n4ef9) (> . n4ef8) (= . n4ef7) (<= . n4ef6) (< . n4ef5) (&no-nans . n4ef3) (&no-infinities . n4ef2) (&i/o-encoding . n4ef1) (&i/o-decoding . n4ef0) (&i/o-port . n4eef) (&i/o-file-does-not-exist . n4eee) (&i/o-file-already-exists . n4eed) (&i/o-file-is-read-only . n4eec) (&i/o-file-protection . n4eeb) (&i/o-filename . n4eea) (&i/o-invalid-position . n4ee9) (&i/o-write . n4ee8) (&i/o-read . n4ee7) (&i/o . n4ee6) (&undefined . n4ee5) (&syntax . n4ee4) (&lexical . n4ee3) (&implementation-restriction . n4ee2) (&non-continuable . n4ee1) (&who . n4ee0) (&irritants . n4edf) (&assertion . n4ede) (&violation . n4edd) (&error . n4edc) (&serious . n4edb) (&warning . n4eda) (&message . n4ed9) (&condition . n4ed8) (define-condition-type . n4ed7) (define-enumeration . n4ed6) (define-record-type . n4ed5) (parent-rtd . n4ed4) (nongenerative . n4ed3) (opaque . n4ed2) (sealed . n4ed1) (protocol . n4ed0) (parent . n4ecf) (immutable . n4ece) (mutable . n4ecd) (fields . n4ecc) (error-handling-mode . n4ecb) (file-options . n4eca) (buffer-mode . n4ec9) (eol-style . n4ec8) (guard . n4ec7) (unsyntax-splicing . n4ec4) (unsyntax . n4ec3) (unquote-splicing . n4ec2) (unquote . n4ec1) (_ . n4ec0) (else . n4ebf) (=> . n4ebe) (... . n4ebd) (assert . n4ebc) (endianness . n4ebb) (do . n4eb8) (cond . n4eb7) (let* . n4eb6) (let . n4eb5) (let*-values . n4eb4) (let-values . n4eb3) (identifier-syntax . n4eb2) (with-syntax . n4eb1) (quasisyntax . n4eb0) (quasiquote . n4eaf) (syntax-rules . n4eae) (record-constructor-descriptor . n4eab) (record-type-descriptor . n4eaa) (case . n4ea9) (unless . n4ea7) (when . n4ea6) (or . n4ea5) (and . n4ea4) (if . n4ea3) (letrec* . n4ea2) (letrec . n4ea1) (case-lambda . n4e9f) (lambda . n4e9e) (syntax . n4e9d) (syntax-case . n4e9c) (quote . n4e9b) (letrec-syntax . n4e99) (let-syntax . n4e98) (set! . n4e97) (begin . n4e95) (define-syntax . n4e93) (define . n4e92)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5167 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . n2f7a) (quotient . n5078) (null-environment . n2f78) (remainder . n5077) (modulo . n5076) (inexact->exact . n5075) (force . n5074) (exact->inexact . n5073) (make-promise . n5072) (delay . n4eba)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5168 '(rnrs control) '(6) '() '() '() '((do . n4eb8) (unless . n4ea7) (when . n4ea6) (case-lambda . n4e9f)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5169 '(rnrs eval) '(6) '() '() '() '((eval . n2f7e) (environment . n2f76)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n516a '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . n506e) (set-car! . n506d)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n516b '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . n5070) (string-set! . n506f)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n516c '(rnrs programs) '(6) '() '() '() '((exit . n5071) (command-line . n4d6c)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n516d '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . n2ce2) (identifier? . n2fa0) (generate-temporaries . n2f8c) (free-identifier=? . n2f8e) (syntax->datum . n2fa4) (datum->syntax . n2fa2) (bound-identifier=? . n2f90) (syntax-violation . n2f9e) (unsyntax-splicing . n4ec4) (unsyntax . n4ec3) (_ . n4ec0) (... . n4ebd) (with-syntax . n4eb1) (quasisyntax . n4eb0) (syntax . n4e9d) (syntax-case . n4e9c)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n516e '(rnrs files) '(6) '() '() '() '((delete-file . n50e1) (file-exists? . n50e0) (make-i/o-write-error . n4b60) (make-i/o-read-error . n4b4b) (make-i/o-port-error . n4c01) (make-i/o-invalid-position-error . n4b77) (make-i/o-filename-error . n4b92) (make-i/o-file-protection-error . n4bab) (make-i/o-file-is-read-only-error . n4bc0) (make-i/o-file-does-not-exist-error . n4bea) (make-i/o-file-already-exists-error . n4bd5) (make-i/o-error . n4b36) (i/o-write-error? . n4b62) (i/o-read-error? . n4b4d) (i/o-port-error? . n4c05) (i/o-invalid-position-error? . n4b7b) (i/o-filename-error? . n4b96) (i/o-file-protection-error? . n4bad) (i/o-file-is-read-only-error? . n4bc2) (i/o-file-does-not-exist-error? . n4bec) (i/o-file-already-exists-error? . n4bd7) (i/o-error? . n4b38) (i/o-error-position . n4b7d) (i/o-error-port . n4c07) (i/o-error-filename . n4b98) (&i/o-port . n4eef) (&i/o-file-does-not-exist . n4eee) (&i/o-file-already-exists . n4eed) (&i/o-file-is-read-only . n4eec) (&i/o-file-protection . n4eeb) (&i/o-filename . n4eea) (&i/o-invalid-position . n4ee9) (&i/o-write . n4ee8) (&i/o-read . n4ee7) (&i/o . n4ee6)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n516f '(rnrs sorting) '(6) '() '() '() '((vector-sort! . n50df) (vector-sort . n50de) (list-sort . n50dd)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5170 '(rnrs base) '(6) '() '() '() '((zero? . n4f96) (vector? . n4f95) (vector-set! . n4f94) (vector-ref . n4f93) (vector-map . n4f92) (vector-length . n4f91) (vector-for-each . n4f90) (vector-fill! . n4f8f) (vector->list . n4f8e) (vector . n4f8d) (values . n4f8c) (truncate . n4f8b) (tan . n4f8a) (symbol? . n4f89) (symbol=? . n4f88) (symbol->string . n4f87) (substring . n4f86) (string? . n4f85) (string>? . n4f84) (string>=? . n4f83) (string=? . n4f82) (string<? . n4f81) (string<=? . n4f80) (string-ref . n4f7f) (string-length . n4f7e) (string-for-each . n4f7d) (string-copy . n4f7c) (string-append . n4f7b) (string->symbol . n4f7a) (string->number . n4f79) (string->list . n4f78) (string . n4f77) (sqrt . n4f76) (sin . n4f75) (round . n4f74) (reverse . n4f73) (real? . n4f72) (real-valued? . n4f71) (real-part . n4f70) (rationalize . n4f6f) (rational? . n4f6e) (rational-valued? . n4f6d) (procedure? . n4f6c) (positive? . n4f6b) (pair? . n4f6a) (odd? . n4f69) (numerator . n4f68) (number? . n4f67) (number->string . n4f66) (null? . n4f65) (not . n4f64) (negative? . n4f63) (nan? . n4f62) (min . n4f61) (max . n4f60) (map . n4f5f) (make-vector . n4f5e) (make-string . n4f5d) (make-rectangular . n4f5c) (make-polar . n4f5b) (magnitude . n4f5a) (log . n4f59) (list? . n4f58) (list-tail . n4f57) (list-ref . n4f56) (list->vector . n4f55) (list->string . n4f54) (list . n4f53) (length . n4f52) (lcm . n4f51) (integer? . n4f50) (integer-valued? . n4f4f) (integer->char . n4f4e) (infinite? . n4f4d) (inexact? . n4f4c) (inexact . n4f4b) (imag-part . n4f4a) (gcd . n4f49) (for-each . n4f48) (floor . n4f47) (finite? . n4f46) (expt . n4f45) (exp . n4f44) (exact? . n4f43) (exact-integer-sqrt . n4f42) (exact . n4f41) (even? . n4f40) (error . n4f3f) (eqv? . n4f3e) (equal? . n4f3d) (eq? . n4f3c) (dynamic-wind . n4f3b) (div0-and-mod0 . n4f3a) (mod0 . n4f39) (div0 . n4f38) (div-and-mod . n4f37) (mod . n4f36) (div . n4f35) (denominator . n4f34) (cos . n4f33) (cons . n4f32) (complex? . n4f31) (char? . n4f30) (char>? . n4f2f) (char>=? . n4f2e) (char=? . n4f2d) (char<? . n4f2c) (char<=? . n4f2b) (char->integer . n4f2a) (ceiling . n4f29) (call-with-values . n4f28) (call/cc . n4f27) (call-with-current-continuation . n4f26) (cddddr . n4f25) (cdddar . n4f24) (cddadr . n4f23) (cddaar . n4f22) (cdaddr . n4f21) (cdadar . n4f20) (cdaadr . n4f1f) (cdaaar . n4f1e) (cadddr . n4f1d) (caddar . n4f1c) (cadadr . n4f1b) (cadaar . n4f1a) (caaddr . n4f19) (caadar . n4f18) (caaadr . n4f17) (caaaar . n4f16) (cdddr . n4f15) (cddar . n4f14) (cdadr . n4f13) (cdaar . n4f12) (caddr . n4f11) (cadar . n4f10) (caadr . n4f0f) (caaar . n4f0e) (cddr . n4f0d) (cdar . n4f0c) (cadr . n4f0b) (caar . n4f0a) (cdr . n4f09) (car . n4f08) (boolean? . n4f07) (boolean=? . n4f06) (atan . n4f05) (assertion-violation . n4f04) (asin . n4f03) (apply . n4f02) (append . n4f01) (angle . n4f00) (acos . n4eff) (abs . n4efe) (/ . n4efd) (* . n4efc) (- . n4efb) (+ . n4efa) (>= . n4ef9) (> . n4ef8) (= . n4ef7) (<= . n4ef6) (< . n4ef5) (unquote-splicing . n4ec2) (unquote . n4ec1) (_ . n4ec0) (else . n4ebf) (=> . n4ebe) (... . n4ebd) (assert . n4ebc) (cond . n4eb7) (let* . n4eb6) (let . n4eb5) (let*-values . n4eb4) (let-values . n4eb3) (identifier-syntax . n4eb2) (quasiquote . n4eaf) (syntax-rules . n4eae) (case . n4ea9) (or . n4ea5) (and . n4ea4) (if . n4ea3) (letrec* . n4ea2) (letrec . n4ea1) (lambda . n4e9e) (quote . n4e9b) (letrec-syntax . n4e99) (let-syntax . n4e98) (set! . n4e97) (begin . n4e95) (define-syntax . n4e93) (define . n4e92)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5171 '(rnrs lists) '(6) '() '() '() '((remove . n506c) (remv . n506b) (remp . n506a) (remq . n5069) (partition . n5068) (memv . n5067) (memq . n5066) (memp . n5065) (member . n5064) (exists . n5063) (for-all . n5062) (fold-right . n5061) (fold-left . n5060) (find . n505f) (filter . n505e) (cons* . n505d) (assv . n505c) (assq . n505b) (assp . n505a) (assoc . n5059)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5172 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . n50c7) (call-with-input-file . n50c6) (write-char . n50c5) (write . n50c4) (with-output-to-file . n50c3) (with-input-from-file . n50c2) (read-char . n50c1) (read . n50c0) (peek-char . n50bf) (open-output-file . n50be) (open-input-file . n50bd) (newline . n50bc) (display . n50bb) (close-output-port . n50ba) (close-input-port . n50b9) (eof-object? . n50b8) (eof-object . n50b7) (current-error-port . n50b6) (current-output-port . n50b5) (current-input-port . n50b4) (output-port? . n50b3) (input-port? . n50b2) (make-i/o-write-error . n4b60) (make-i/o-read-error . n4b4b) (make-i/o-port-error . n4c01) (make-i/o-invalid-position-error . n4b77) (make-i/o-filename-error . n4b92) (make-i/o-file-protection-error . n4bab) (make-i/o-file-is-read-only-error . n4bc0) (make-i/o-file-does-not-exist-error . n4bea) (make-i/o-file-already-exists-error . n4bd5) (make-i/o-error . n4b36) (i/o-write-error? . n4b62) (i/o-read-error? . n4b4d) (i/o-port-error? . n4c05) (i/o-invalid-position-error? . n4b7b) (i/o-filename-error? . n4b96) (i/o-file-protection-error? . n4bad) (i/o-file-is-read-only-error? . n4bc2) (i/o-file-does-not-exist-error? . n4bec) (i/o-file-already-exists-error? . n4bd7) (i/o-error? . n4b38) (i/o-error-position . n4b7d) (i/o-error-port . n4c07) (i/o-error-filename . n4b98) (&i/o-port . n4eef) (&i/o-file-does-not-exist . n4eee) (&i/o-file-already-exists . n4eed) (&i/o-file-is-read-only . n4eec) (&i/o-file-protection . n4eeb) (&i/o-filename . n4eea) (&i/o-invalid-position . n4ee9) (&i/o-write . n4ee8) (&i/o-read . n4ee7) (&i/o . n4ee6)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5173 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . n5088) (utf32->string . n503d) (utf16->string . n503c) (utf8->string . n503b) (uint-list->bytevector . n503a) (u8-list->bytevector . n5039) (string->utf8 . n5038) (string->utf32 . n5037) (string->utf16 . n5036) (sint-list->bytevector . n5035) (native-endianness . n5034) (bytevector? . n5033) (bytevector=? . n5032) (bytevector-uint-set! . n5031) (bytevector-uint-ref . n5030) (bytevector-u8-set! . n502f) (bytevector-u8-ref . n502e) (bytevector-u64-set! . n502d) (bytevector-u64-ref . n502c) (bytevector-u64-native-set! . n502b) (bytevector-u64-native-ref . n502a) (bytevector-u32-set! . n5029) (bytevector-u32-ref . n5028) (bytevector-u32-native-set! . n5027) (bytevector-u32-native-ref . n5026) (bytevector-u16-set! . n5025) (bytevector-u16-ref . n5024) (bytevector-u16-native-set! . n5023) (bytevector-u16-native-ref . n5022) (bytevector-sint-set! . n5021) (bytevector-sint-ref . n5020) (bytevector-s8-set! . n501f) (bytevector-s8-ref . n501e) (bytevector-s64-set! . n501d) (bytevector-s64-ref . n501c) (bytevector-s64-native-set! . n501b) (bytevector-s64-native-ref . n501a) (bytevector-s32-set! . n5019) (bytevector-s32-ref . n5018) (bytevector-s32-native-set! . n5017) (bytevector-s32-native-ref . n5016) (bytevector-s16-set! . n5015) (bytevector-s16-ref . n5014) (bytevector-s16-native-set! . n5013) (bytevector-s16-native-ref . n5012) (bytevector-length . n5011) (bytevector-ieee-single-ref . n5010) (bytevector-ieee-single-set! . n500f) (bytevector-ieee-single-native-set! . n500e) (bytevector-ieee-single-native-ref . n500d) (bytevector-ieee-double-set! . n500c) (bytevector-ieee-double-ref . n500b) (bytevector-ieee-double-native-set! . n500a) (bytevector-ieee-double-native-ref . n5009) (bytevector-fill! . n5008) (bytevector-copy! . n5007) (bytevector-copy . n5006) (bytevector->uint-list . n5005) (bytevector->u8-list . n5004) (bytevector->sint-list . n5003) (endianness . n4ebb)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5174 '(rnrs unicode) '(6) '() '() '() '((string-upcase . n510f) (string-titlecase . n510e) (string-normalize-nfkd . n510d) (string-normalize-nfkc . n510c) (string-normalize-nfd . n510b) (string-normalize-nfc . n510a) (string-foldcase . n5109) (string-downcase . n5108) (string-ci>? . n5107) (string-ci>=? . n5106) (string-ci=? . n5105) (string-ci<? . n5104) (string-ci<=? . n5103) (char-whitespace? . n5102) (char-upper-case? . n5101) (char-title-case? . n5100) (char-numeric? . n50ff) (char-lower-case? . n50fe) (char-general-category . n50fd) (char-upcase . n50fc) (char-titlecase . n50fb) (char-foldcase . n50fa) (char-downcase . n50f9) (char-ci>? . n50f8) (char-ci>=? . n50f7) (char-ci=? . n50f6) (char-ci<? . n50f5) (char-ci<=? . n50f4) (char-alphabetic? . n50f3)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5175 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . n5052) (raise-continuable . n5051) (raise . n5050) (guard . n4ec7) (else . n4ebf) (=> . n4ebe)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5176 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . n4fa7) (bitwise-reverse-bit-field . n4fa6) (bitwise-length . n4fa5) (bitwise-if . n4fa4) (bitwise-first-bit-set . n4fa3) (bitwise-copy-bit-field . n4fa2) (bitwise-copy-bit . n4fa1) (bitwise-bit-set? . n4fa0) (bitwise-bit-field . n4f9f) (bitwise-bit-count . n4f9e) (bitwise-xor . n4f9d) (bitwise-ior . n4f9c) (bitwise-and . n4f9b) (bitwise-not . n4f9a) (bitwise-arithmetic-shift-right . n4f99) (bitwise-arithmetic-shift-left . n4f98) (bitwise-arithmetic-shift . n4f97)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5177 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . n4fd4) (fxxor . n4fd3) (fxrotate-bit-field . n4fd2) (fxreverse-bit-field . n4fd1) (fxpositive? . n4fd0) (fxodd? . n4fcf) (fxnot . n4fce) (fxnegative? . n4fcd) (fxmod0 . n4fcc) (fxmod . n4fcb) (fxmin . n4fca) (fxmax . n4fc9) (fxlength . n4fc8) (fxior . n4fc7) (fxif . n4fc6) (fxfirst-bit-set . n4fc5) (fxeven? . n4fc4) (fxdiv0-and-mod0 . n4fc3) (fxdiv0 . n4fc2) (fxdiv-and-mod . n4fc1) (fxdiv . n4fc0) (fxcopy-bit-field . n4fbf) (fxcopy-bit . n4fbe) (fxbit-set? . n4fbd) (fxbit-field . n4fbc) (fxbit-count . n4fbb) (fxarithmetic-shift-right . n4fba) (fxarithmetic-shift-left . n4fb9) (fxarithmetic-shift . n4fb8) (fxand . n4fb7) (fx>? . n4fb6) (fx>=? . n4fb5) (fx=? . n4fb4) (fx<? . n4fb3) (fx<=? . n4fb2) (fx-/carry . n4fb1) (fx- . n4fb0) (fx+/carry . n4faf) (fx+ . n4fae) (fx*/carry . n4fad) (fx* . n4fac) (greatest-fixnum . n4fab) (least-fixnum . n4faa) (fixnum-width . n4fa9) (fixnum? . n4fa8)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5178 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . n4c61) (no-infinities-violation? . n4c4c) (make-no-nans-violation . n4c5f) (make-no-infinities-violation . n4c4a) (real->flonum . n5002) (flzero? . n5001) (fltruncate . n5000) (fltan . n4fff) (flsqrt . n4ffe) (flsin . n4ffd) (flround . n4ffc) (flpositive? . n4ffb) (flonum? . n4ffa) (flodd? . n4ff9) (flnumerator . n4ff8) (flnegative? . n4ff7) (flnan? . n4ff6) (flmod0 . n4ff5) (flmod . n4ff4) (flmin . n4ff3) (flmax . n4ff2) (fllog . n4ff1) (flinteger? . n4ff0) (flinfinite? . n4fef) (flfloor . n4fee) (flfinite? . n4fed) (flexpt . n4fec) (flexp . n4feb) (fleven? . n4fea) (fldiv0-and-mod0 . n4fe9) (fldiv0 . n4fe8) (fldiv-and-mod . n4fe7) (fldiv . n4fe6) (fldenominator . n4fe5) (flcos . n4fe4) (flceiling . n4fe3) (flatan . n4fe2) (flasin . n4fe1) (flacos . n4fe0) (flabs . n4fdf) (fl>? . n4fde) (fl>=? . n4fdd) (fl=? . n4fdc) (fl<? . n4fdb) (fl<=? . n4fda) (fl/ . n4fd9) (fl- . n4fd8) (fl+ . n4fd7) (fl* . n4fd6) (fixnum->flonum . n4fd5) (&no-nans . n4ef3) (&no-infinities . n4ef2)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5179 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . n50dc) (string-ci-hash . n50db) (string-hash . n50da) (equal-hash . n50d9) (hashtable-equivalence-function . n50d8) (make-hashtable . n50d7) (hashtable-hash-function . n50d6) (make-eqv-hashtable . n50d5) (make-eq-hashtable . n50d4) (hashtable? . n50d3) (hashtable-update! . n50d2) (hashtable-size . n50d1) (hashtable-set! . n50d0) (hashtable-ref . n50cf) (hashtable-mutable? . n50ce) (hashtable-keys . n50cd) (hashtable-entries . n50cc) (hashtable-delete! . n50cb) (hashtable-copy . n50ca) (hashtable-contains? . n50c9) (hashtable-clear! . n50c8)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n517a '(rnrs io ports) '(6) '() '() '() '((eof-object? . n50b8) (eof-object . n50b7) (current-error-port . n50b6) (current-output-port . n50b5) (current-input-port . n50b4) (output-port? . n50b3) (input-port? . n50b2) (utf-8-codec . n50b1) (utf-16-codec . n50b0) (transcoder-error-handling-mode . n50af) (transcoder-eol-style . n50ae) (transcoder-codec . n50ad) (transcoded-port . n50ac) (textual-port? . n50ab) (string->bytevector . n50aa) (standard-output-port . n50a9) (standard-input-port . n50a8) (standard-error-port . n50a7) (set-port-position! . n50a6) (put-u8 . n50a5) (put-string . n50a4) (put-datum . n50a3) (put-char . n50a2) (put-bytevector . n50a1) (port? . n50a0) (port-transcoder . n509f) (port-position . n509e) (port-has-set-port-position!? . n509d) (port-has-port-position? . n509c) (port-eof? . n509b) (output-port-buffer-mode . n509a) (open-string-output-port . n5099) (open-string-input-port . n5098) (open-file-output-port . n5097) (open-file-input/output-port . n5096) (open-file-input-port . n5095) (open-bytevector-output-port . n5094) (open-bytevector-input-port . n5093) (native-transcoder . n5092) (native-eol-style . n5091) (make-transcoder . n5090) (latin-1-codec . n508f) (make-i/o-write-error . n4b60) (make-i/o-read-error . n4b4b) (make-i/o-port-error . n4c01) (make-i/o-invalid-position-error . n4b77) (make-i/o-filename-error . n4b92) (make-i/o-file-protection-error . n4bab) (make-i/o-file-is-read-only-error . n4bc0) (make-i/o-file-does-not-exist-error . n4bea) (make-i/o-file-already-exists-error . n4bd5) (make-i/o-error . n4b36) (make-i/o-encoding-error . n4c31) (make-i/o-decoding-error . n4c1a) (make-custom-textual-output-port . n508e) (make-custom-textual-input/output-port . n508d) (make-custom-textual-input-port . n508c) (make-custom-binary-output-port . n508b) (make-custom-binary-input/output-port . n508a) (make-custom-binary-input-port . n5089) (lookahead-u8 . n5087) (lookahead-char . n5086) (i/o-write-error? . n4b62) (i/o-read-error? . n4b4d) (i/o-port-error? . n4c05) (i/o-invalid-position-error? . n4b7b) (i/o-filename-error? . n4b96) (i/o-file-protection-error? . n4bad) (i/o-file-is-read-only-error? . n4bc2) (i/o-file-does-not-exist-error? . n4bec) (i/o-file-already-exists-error? . n4bd7) (i/o-error? . n4b38) (i/o-error-position . n4b7d) (i/o-error-port . n4c07) (i/o-error-filename . n4b98) (i/o-encoding-error? . n4c35) (i/o-encoding-error-char . n4c37) (i/o-decoding-error? . n4c1c) (get-u8 . n5085) (get-string-n! . n5084) (get-string-n . n5083) (get-string-all . n5082) (get-line . n5081) (get-datum . n5080) (get-char . n507f) (get-bytevector-some . n507e) (get-bytevector-n! . n507d) (get-bytevector-n . n507c) (get-bytevector-all . n507b) (flush-output-port . n507a) (close-port . n5079) (call-with-string-output-port . n5058) (call-with-port . n5057) (call-with-bytevector-output-port . n5056) (bytevector->string . n5055) (buffer-mode? . n5054) (binary-port? . n5053) (&i/o-encoding . n4ef1) (&i/o-decoding . n4ef0) (&i/o-port . n4eef) (&i/o-file-does-not-exist . n4eee) (&i/o-file-already-exists . n4eed) (&i/o-file-is-read-only . n4eec) (&i/o-file-protection . n4eeb) (&i/o-filename . n4eea) (&i/o-invalid-position . n4ee9) (&i/o-write . n4ee8) (&i/o-read . n4ee7) (&i/o . n4ee6) (error-handling-mode . n4ecb) (file-options . n4eca) (buffer-mode . n4ec9) (eol-style . n4ec8)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n517b '(rnrs enums) '(6) '() '() '() '((make-enumeration . n504f) (enum-set=? . n504e) (enum-set-universe . n504d) (enum-set-union . n504c) (enum-set-subset? . n504b) (enum-set-projection . n504a) (enum-set-member? . n5049) (enum-set-intersection . n5048) (enum-set-indexer . n5047) (enum-set-difference . n5046) (enum-set-constructor . n5045) (enum-set-complement . n5044) (enum-set->list . n5043) (define-enumeration . n4ed6)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n517c '(rnrs conditions) '(6) '() '() '() '((who-condition? . n4aac) (warning? . n4a24) (violation? . n4a63) (undefined-violation? . n4b23) (syntax-violation? . n4b0a) (syntax-violation-subform . n4b0e) (syntax-violation-form . n4b0c) (syntax-violation . n2f9e) (simple-conditions . n5042) (serious-condition? . n4a39) (non-continuable-violation? . n4ac3) (message-condition? . n4a0d) (make-who-condition . n4aa8) (make-warning . n4a22) (make-violation . n4a61) (make-undefined-violation . n4b21) (make-syntax-violation . n4b04) (make-serious-condition . n4a37) (make-non-continuable-violation . n4ac1) (make-message-condition . n4a09) (make-lexical-violation . n4aeb) (make-irritants-condition . n4a8d) (make-implementation-restriction-violation . n4ad6) (make-error . n4a4c) (make-assertion-violation . n4a76) (lexical-violation? . n4aed) (irritants-condition? . n4a91) (implementation-restriction-violation? . n4ad8) (error? . n4a4e) (condition-who . n4aae) (condition-predicate . n5041) (condition-message . n4a0f) (condition-irritants . n4a93) (condition-accessor . n5040) (condition . n503f) (assertion-violation? . n4a78) (condition? . n503e) (&undefined . n4ee5) (&syntax . n4ee4) (&lexical . n4ee3) (&implementation-restriction . n4ee2) (&non-continuable . n4ee1) (&who . n4ee0) (&irritants . n4edf) (&assertion . n4ede) (&violation . n4edd) (&error . n4edc) (&serious . n4edb) (&warning . n4eda) (&message . n4ed9) (&condition . n4ed8) (define-condition-type . n4ed7)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n517d '(rnrs records inspection) '(6) '() '() '() '((record? . n50eb) (record-type-uid . n50ea) (record-type-sealed? . n50e9) (record-type-parent . n50e8) (record-type-opaque? . n50e7) (record-type-name . n50e6) (record-type-generative? . n50e5) (record-type-field-names . n50e4) (record-rtd . n50e3) (record-field-mutable? . n50e2)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n517e '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . n50f2) (record-predicate . n50f1) (record-mutator . n50f0) (record-constructor . n50ef) (record-accessor . n50ee) (make-record-type-descriptor . n50ed) (make-record-constructor-descriptor . n50ec)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n517f '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . n4ed5) (parent-rtd . n4ed4) (nongenerative . n4ed3) (opaque . n4ed2) (sealed . n4ed1) (protocol . n4ed0) (parent . n4ecf) (immutable . n4ece) (mutable . n4ecd) (fields . n4ecc) (record-constructor-descriptor . n4eab) (record-type-descriptor . n4eaa)) '() values values '#f '#f '#t '#f) (n2acd@n296c@install-library 'n5180 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . n4c65) (&no-nans-rtd . n4c63) (&no-infinities-rcd . n4c50) (&no-infinities-rtd . n4c4e) (&i/o-encoding-rcd . n4c3b) (&i/o-encoding-rtd . n4c39) (&i/o-decoding-rcd . n4c20) (&i/o-decoding-rtd . n4c1e) (&i/o-port-rcd . n4c0b) (&i/o-port-rtd . n4c09) (&i/o-file-does-not-exist-rcd . n4bf0) (&i/o-file-does-not-exist-rtd . n4bee) (&i/o-file-already-exists-rcd . n4bdb) (&i/o-file-already-exists-rtd . n4bd9) (&i/o-file-is-read-only-rcd . n4bc6) (&i/o-file-is-read-only-rtd . n4bc4) (&i/o-file-protection-rcd . n4bb1) (&i/o-file-protection-rtd . n4baf) (&i/o-filename-rcd . n4b9c) (&i/o-filename-rtd . n4b9a) (&i/o-invalid-position-rcd . n4b81) (&i/o-invalid-position-rtd . n4b7f) (&i/o-write-rcd . n4b66) (&i/o-write-rtd . n4b64) (&i/o-read-rcd . n4b51) (&i/o-read-rtd . n4b4f) (&i/o-rcd . n4b3c) (&i/o-rtd . n4b3a) (&undefined-rcd . n4b27) (&undefined-rtd . n4b25) (&syntax-rcd . n4b12) (&syntax-rtd . n4b10) (&lexical-rcd . n4af1) (&lexical-rtd . n4aef) (&implementation-restriction-rcd . n4adc) (&implementation-restriction-rtd . n4ada) (&non-continuable-rcd . n4ac7) (&non-continuable-rtd . n4ac5) (&who-rcd . n4ab2) (&who-rtd . n4ab0) (&irritants-rcd . n4a97) (&irritants-rtd . n4a95) (&assertion-rcd . n4a7c) (&assertion-rtd . n4a7a) (&violation-rcd . n4a67) (&violation-rtd . n4a65) (&error-rcd . n4a52) (&error-rtd . n4a50) (&serious-rcd . n4a3d) (&serious-rtd . n4a3b) (&warning-rcd . n4a28) (&warning-rtd . n4a26) (&message-rcd . n4a13) (&message-rtd . n4a11) (&condition-rcd . n49b4) (&condition-rtd . n49b2) (syntax-error . n2f9a) (syntax-dispatch . n2eb5) (pretty-print . n5160) (eval-core . n515f) (set-symbol-value! . n515e) (symbol-value . n515d) (gensym . n515c) (void . n515b) (load . n4d72) (interaction-environment . n2faa) (char-ready? . n515a) (regexp? . n5159) (read-line . n5158) (ungensym . n5157) (alist->eq-hash-table . n5156) (assoc-ref . n5155) (print . n5154) (format . n5153) (host-os . n5152) (library-path . n294b) (standard-library-path . n5151) (file-newer? . n5150) (stat-mtime . n514f) (write-to-file . n514e) (file->list . n514d) (file->string . n514c) (digit->integer . n514b) (call-with-string-input-port . n514a) (call-with-string-io . n5149) (string-split . n5148) (bytevector-for-each . n5147) (string->regexp . n5146) (rxmatch . n5145) (regexp-replace-all . n5144) (hashtable-for-each . n5143) (call-process . n5142) (local-tz-offset . n5141) (microseconds . n5140) (readdir . n513f) (set-current-directory! . n513e) (expand-path . n513d) (current-directory . n513c) (%spawn . n513b) (%waitpid . n513a) (%ffi-supported? . n5139) (%ffi-pointer-ref . n5138) (%ffi-pointer->string . n5137) (%ffi-call->string-or-zero . n5136) (%ffi-call->double . n5135) (%ffi-call->void* . n5134) (%ffi-call->void . n5133) (%ffi-call->int . n5132) (%ffi-lookup . n5131) (%ffi-open . n5130) (%fork . n512f) (%pipe . n512e) (p . n512d) (open-output-string . n512c) (get-output-string . n512b) (get-environment-variables . n512a) (get-environment-variable . n5129) (get-timeofday . n5128) (get-command-line . n5127) (sys-display . n5126) (mosh-executable-path . n5125) (make-file-options . n5124) (source-info . n5123) (make-compiler-instruction . n5122) (make-instruction . n5121) (set-source-info! . n5120) (bignum? . n511f) (fast-equal? . n511e) (fasl-read . n511d) (fasl-write . n511c) (time-usage . n511b) (os-constant . n511a) (make-parameter . n277e) (socket-port . n5119) (socket-shutdown . n5118) (socket-close . n5117) (socket-send . n5116) (socket-recv! . n5115) (socket-recv . n5114) (make-server-socket . n5113) (make-client-socket . n5112) (socket-accept . n5111) (socket? . n5110) (string-upcase . n510f) (string-titlecase . n510e) (string-normalize-nfkd . n510d) (string-normalize-nfkc . n510c) (string-normalize-nfd . n510b) (string-normalize-nfc . n510a) (string-foldcase . n5109) (string-downcase . n5108) (string-ci>? . n5107) (string-ci>=? . n5106) (string-ci=? . n5105) (string-ci<? . n5104) (string-ci<=? . n5103) (char-whitespace? . n5102) (char-upper-case? . n5101) (char-title-case? . n5100) (char-numeric? . n50ff) (char-lower-case? . n50fe) (char-general-category . n50fd) (char-upcase . n50fc) (char-titlecase . n50fb) (char-foldcase . n50fa) (char-downcase . n50f9) (char-ci>? . n50f8) (char-ci>=? . n50f7) (char-ci=? . n50f6) (char-ci<? . n50f5) (char-ci<=? . n50f4) (char-alphabetic? . n50f3) (make-variable-transformer . n2ce2) (identifier? . n2fa0) (generate-temporaries . n2f8c) (free-identifier=? . n2f8e) (syntax->datum . n2fa4) (datum->syntax . n2fa2) (bound-identifier=? . n2f90) (record-type-descriptor? . n50f2) (record-predicate . n50f1) (record-mutator . n50f0) (record-constructor . n50ef) (record-accessor . n50ee) (make-record-type-descriptor . n50ed) (make-record-constructor-descriptor . n50ec) (record? . n50eb) (record-type-uid . n50ea) (record-type-sealed? . n50e9) (record-type-parent . n50e8) (record-type-opaque? . n50e7) (record-type-name . n50e6) (record-type-generative? . n50e5) (record-type-field-names . n50e4) (record-rtd . n50e3) (record-field-mutable? . n50e2) (delete-file . n50e1) (file-exists? . n50e0) (vector-sort! . n50df) (vector-sort . n50de) (list-sort . n50dd) (symbol-hash . n50dc) (string-ci-hash . n50db) (string-hash . n50da) (equal-hash . n50d9) (hashtable-equivalence-function . n50d8) (make-hashtable . n50d7) (hashtable-hash-function . n50d6) (make-eqv-hashtable . n50d5) (make-eq-hashtable . n50d4) (hashtable? . n50d3) (hashtable-update! . n50d2) (hashtable-size . n50d1) (hashtable-set! . n50d0) (hashtable-ref . n50cf) (hashtable-mutable? . n50ce) (hashtable-keys . n50cd) (hashtable-entries . n50cc) (hashtable-delete! . n50cb) (hashtable-copy . n50ca) (hashtable-contains? . n50c9) (hashtable-clear! . n50c8) (call-with-output-file . n50c7) (call-with-input-file . n50c6) (write-char . n50c5) (write . n50c4) (with-output-to-file . n50c3) (with-input-from-file . n50c2) (read-char . n50c1) (read . n50c0) (peek-char . n50bf) (open-output-file . n50be) (open-input-file . n50bd) (newline . n50bc) (display . n50bb) (close-output-port . n50ba) (close-input-port . n50b9) (eof-object? . n50b8) (eof-object . n50b7) (current-error-port . n50b6) (current-output-port . n50b5) (current-input-port . n50b4) (output-port? . n50b3) (input-port? . n50b2) (utf-8-codec . n50b1) (utf-16-codec . n50b0) (transcoder-error-handling-mode . n50af) (transcoder-eol-style . n50ae) (transcoder-codec . n50ad) (transcoded-port . n50ac) (textual-port? . n50ab) (string->bytevector . n50aa) (standard-output-port . n50a9) (standard-input-port . n50a8) (standard-error-port . n50a7) (set-port-position! . n50a6) (put-u8 . n50a5) (put-string . n50a4) (put-datum . n50a3) (put-char . n50a2) (put-bytevector . n50a1) (port? . n50a0) (port-transcoder . n509f) (port-position . n509e) (port-has-set-port-position!? . n509d) (port-has-port-position? . n509c) (port-eof? . n509b) (output-port-buffer-mode . n509a) (open-string-output-port . n5099) (open-string-input-port . n5098) (open-file-output-port . n5097) (open-file-input/output-port . n5096) (open-file-input-port . n5095) (open-bytevector-output-port . n5094) (open-bytevector-input-port . n5093) (native-transcoder . n5092) (native-eol-style . n5091) (make-transcoder . n5090) (latin-1-codec . n508f) (make-i/o-write-error . n4b60) (make-i/o-read-error . n4b4b) (make-i/o-port-error . n4c01) (make-i/o-invalid-position-error . n4b77) (make-i/o-filename-error . n4b92) (make-i/o-file-protection-error . n4bab) (make-i/o-file-is-read-only-error . n4bc0) (make-i/o-file-does-not-exist-error . n4bea) (make-i/o-file-already-exists-error . n4bd5) (make-i/o-error . n4b36) (make-i/o-encoding-error . n4c31) (make-i/o-decoding-error . n4c1a) (make-custom-textual-output-port . n508e) (make-custom-textual-input/output-port . n508d) (make-custom-textual-input-port . n508c) (make-custom-binary-output-port . n508b) (make-custom-binary-input/output-port . n508a) (make-custom-binary-input-port . n5089) (make-bytevector . n5088) (lookahead-u8 . n5087) (lookahead-char . n5086) (i/o-write-error? . n4b62) (i/o-read-error? . n4b4d) (i/o-port-error? . n4c05) (i/o-invalid-position-error? . n4b7b) (i/o-filename-error? . n4b96) (i/o-file-protection-error? . n4bad) (i/o-file-is-read-only-error? . n4bc2) (i/o-file-does-not-exist-error? . n4bec) (i/o-file-already-exists-error? . n4bd7) (i/o-error? . n4b38) (i/o-error-position . n4b7d) (i/o-error-port . n4c07) (i/o-error-filename . n4b98) (i/o-encoding-error? . n4c35) (i/o-encoding-error-char . n4c37) (i/o-decoding-error? . n4c1c) (get-u8 . n5085) (get-string-n! . n5084) (get-string-n . n5083) (get-string-all . n5082) (get-line . n5081) (get-datum . n5080) (get-char . n507f) (get-bytevector-some . n507e) (get-bytevector-n! . n507d) (get-bytevector-n . n507c) (get-bytevector-all . n507b) (flush-output-port . n507a) (close-port . n5079) (scheme-report-environment . n2f7a) (quotient . n5078) (null-environment . n2f78) (remainder . n5077) (modulo . n5076) (inexact->exact . n5075) (force . n5074) (exact->inexact . n5073) (make-promise . n5072) (exit . n5071) (command-line . n4d6c) (string-fill! . n5070) (string-set! . n506f) (set-cdr! . n506e) (set-car! . n506d) (remove . n506c) (remv . n506b) (remp . n506a) (remq . n5069) (partition . n5068) (memv . n5067) (memq . n5066) (memp . n5065) (member . n5064) (exists . n5063) (for-all . n5062) (fold-right . n5061) (fold-left . n5060) (find . n505f) (filter . n505e) (cons* . n505d) (assv . n505c) (assq . n505b) (assp . n505a) (assoc . n5059) (call-with-string-output-port . n5058) (call-with-port . n5057) (call-with-bytevector-output-port . n5056) (bytevector->string . n5055) (buffer-mode? . n5054) (binary-port? . n5053) (with-exception-handler . n5052) (raise-continuable . n5051) (raise . n5050) (eval . n2f7e) (environment . n2f76) (make-enumeration . n504f) (enum-set=? . n504e) (enum-set-universe . n504d) (enum-set-union . n504c) (enum-set-subset? . n504b) (enum-set-projection . n504a) (enum-set-member? . n5049) (enum-set-intersection . n5048) (enum-set-indexer . n5047) (enum-set-difference . n5046) (enum-set-constructor . n5045) (enum-set-complement . n5044) (enum-set->list . n5043) (who-condition? . n4aac) (warning? . n4a24) (violation? . n4a63) (undefined-violation? . n4b23) (syntax-violation? . n4b0a) (syntax-violation-subform . n4b0e) (syntax-violation-form . n4b0c) (syntax-violation . n2f9e) (simple-conditions . n5042) (serious-condition? . n4a39) (non-continuable-violation? . n4ac3) (message-condition? . n4a0d) (make-who-condition . n4aa8) (make-warning . n4a22) (make-violation . n4a61) (make-undefined-violation . n4b21) (make-syntax-violation . n4b04) (make-serious-condition . n4a37) (make-non-continuable-violation . n4ac1) (make-message-condition . n4a09) (make-lexical-violation . n4aeb) (make-irritants-condition . n4a8d) (make-implementation-restriction-violation . n4ad6) (make-error . n4a4c) (make-assertion-violation . n4a76) (lexical-violation? . n4aed) (irritants-condition? . n4a91) (implementation-restriction-violation? . n4ad8) (error? . n4a4e) (condition-who . n4aae) (condition-predicate . n5041) (condition-message . n4a0f) (condition-irritants . n4a93) (condition-accessor . n5040) (condition . n503f) (assertion-violation? . n4a78) (condition? . n503e) (utf32->string . n503d) (utf16->string . n503c) (utf8->string . n503b) (uint-list->bytevector . n503a) (u8-list->bytevector . n5039) (string->utf8 . n5038) (string->utf32 . n5037) (string->utf16 . n5036) (sint-list->bytevector . n5035) (native-endianness . n5034) (bytevector? . n5033) (bytevector=? . n5032) (bytevector-uint-set! . n5031) (bytevector-uint-ref . n5030) (bytevector-u8-set! . n502f) (bytevector-u8-ref . n502e) (bytevector-u64-set! . n502d) (bytevector-u64-ref . n502c) (bytevector-u64-native-set! . n502b) (bytevector-u64-native-ref . n502a) (bytevector-u32-set! . n5029) (bytevector-u32-ref . n5028) (bytevector-u32-native-set! . n5027) (bytevector-u32-native-ref . n5026) (bytevector-u16-set! . n5025) (bytevector-u16-ref . n5024) (bytevector-u16-native-set! . n5023) (bytevector-u16-native-ref . n5022) (bytevector-sint-set! . n5021) (bytevector-sint-ref . n5020) (bytevector-s8-set! . n501f) (bytevector-s8-ref . n501e) (bytevector-s64-set! . n501d) (bytevector-s64-ref . n501c) (bytevector-s64-native-set! . n501b) (bytevector-s64-native-ref . n501a) (bytevector-s32-set! . n5019) (bytevector-s32-ref . n5018) (bytevector-s32-native-set! . n5017) (bytevector-s32-native-ref . n5016) (bytevector-s16-set! . n5015) (bytevector-s16-ref . n5014) (bytevector-s16-native-set! . n5013) (bytevector-s16-native-ref . n5012) (bytevector-length . n5011) (bytevector-ieee-single-ref . n5010) (bytevector-ieee-single-set! . n500f) (bytevector-ieee-single-native-set! . n500e) (bytevector-ieee-single-native-ref . n500d) (bytevector-ieee-double-set! . n500c) (bytevector-ieee-double-ref . n500b) (bytevector-ieee-double-native-set! . n500a) (bytevector-ieee-double-native-ref . n5009) (bytevector-fill! . n5008) (bytevector-copy! . n5007) (bytevector-copy . n5006) (bytevector->uint-list . n5005) (bytevector->u8-list . n5004) (bytevector->sint-list . n5003) (no-nans-violation? . n4c61) (no-infinities-violation? . n4c4c) (make-no-nans-violation . n4c5f) (make-no-infinities-violation . n4c4a) (real->flonum . n5002) (flzero? . n5001) (fltruncate . n5000) (fltan . n4fff) (flsqrt . n4ffe) (flsin . n4ffd) (flround . n4ffc) (flpositive? . n4ffb) (flonum? . n4ffa) (flodd? . n4ff9) (flnumerator . n4ff8) (flnegative? . n4ff7) (flnan? . n4ff6) (flmod0 . n4ff5) (flmod . n4ff4) (flmin . n4ff3) (flmax . n4ff2) (fllog . n4ff1) (flinteger? . n4ff0) (flinfinite? . n4fef) (flfloor . n4fee) (flfinite? . n4fed) (flexpt . n4fec) (flexp . n4feb) (fleven? . n4fea) (fldiv0-and-mod0 . n4fe9) (fldiv0 . n4fe8) (fldiv-and-mod . n4fe7) (fldiv . n4fe6) (fldenominator . n4fe5) (flcos . n4fe4) (flceiling . n4fe3) (flatan . n4fe2) (flasin . n4fe1) (flacos . n4fe0) (flabs . n4fdf) (fl>? . n4fde) (fl>=? . n4fdd) (fl=? . n4fdc) (fl<? . n4fdb) (fl<=? . n4fda) (fl/ . n4fd9) (fl- . n4fd8) (fl+ . n4fd7) (fl* . n4fd6) (fixnum->flonum . n4fd5) (fxzero? . n4fd4) (fxxor . n4fd3) (fxrotate-bit-field . n4fd2) (fxreverse-bit-field . n4fd1) (fxpositive? . n4fd0) (fxodd? . n4fcf) (fxnot . n4fce) (fxnegative? . n4fcd) (fxmod0 . n4fcc) (fxmod . n4fcb) (fxmin . n4fca) (fxmax . n4fc9) (fxlength . n4fc8) (fxior . n4fc7) (fxif . n4fc6) (fxfirst-bit-set . n4fc5) (fxeven? . n4fc4) (fxdiv0-and-mod0 . n4fc3) (fxdiv0 . n4fc2) (fxdiv-and-mod . n4fc1) (fxdiv . n4fc0) (fxcopy-bit-field . n4fbf) (fxcopy-bit . n4fbe) (fxbit-set? . n4fbd) (fxbit-field . n4fbc) (fxbit-count . n4fbb) (fxarithmetic-shift-right . n4fba) (fxarithmetic-shift-left . n4fb9) (fxarithmetic-shift . n4fb8) (fxand . n4fb7) (fx>? . n4fb6) (fx>=? . n4fb5) (fx=? . n4fb4) (fx<? . n4fb3) (fx<=? . n4fb2) (fx-/carry . n4fb1) (fx- . n4fb0) (fx+/carry . n4faf) (fx+ . n4fae) (fx*/carry . n4fad) (fx* . n4fac) (greatest-fixnum . n4fab) (least-fixnum . n4faa) (fixnum-width . n4fa9) (fixnum? . n4fa8) (bitwise-rotate-bit-field . n4fa7) (bitwise-reverse-bit-field . n4fa6) (bitwise-length . n4fa5) (bitwise-if . n4fa4) (bitwise-first-bit-set . n4fa3) (bitwise-copy-bit-field . n4fa2) (bitwise-copy-bit . n4fa1) (bitwise-bit-set? . n4fa0) (bitwise-bit-field . n4f9f) (bitwise-bit-count . n4f9e) (bitwise-xor . n4f9d) (bitwise-ior . n4f9c) (bitwise-and . n4f9b) (bitwise-not . n4f9a) (bitwise-arithmetic-shift-right . n4f99) (bitwise-arithmetic-shift-left . n4f98) (bitwise-arithmetic-shift . n4f97) (zero? . n4f96) (vector? . n4f95) (vector-set! . n4f94) (vector-ref . n4f93) (vector-map . n4f92) (vector-length . n4f91) (vector-for-each . n4f90) (vector-fill! . n4f8f) (vector->list . n4f8e) (vector . n4f8d) (values . n4f8c) (truncate . n4f8b) (tan . n4f8a) (symbol? . n4f89) (symbol=? . n4f88) (symbol->string . n4f87) (substring . n4f86) (string? . n4f85) (string>? . n4f84) (string>=? . n4f83) (string=? . n4f82) (string<? . n4f81) (string<=? . n4f80) (string-ref . n4f7f) (string-length . n4f7e) (string-for-each . n4f7d) (string-copy . n4f7c) (string-append . n4f7b) (string->symbol . n4f7a) (string->number . n4f79) (string->list . n4f78) (string . n4f77) (sqrt . n4f76) (sin . n4f75) (round . n4f74) (reverse . n4f73) (real? . n4f72) (real-valued? . n4f71) (real-part . n4f70) (rationalize . n4f6f) (rational? . n4f6e) (rational-valued? . n4f6d) (procedure? . n4f6c) (positive? . n4f6b) (pair? . n4f6a) (odd? . n4f69) (numerator . n4f68) (number? . n4f67) (number->string . n4f66) (null? . n4f65) (not . n4f64) (negative? . n4f63) (nan? . n4f62) (min . n4f61) (max . n4f60) (map . n4f5f) (make-vector . n4f5e) (make-string . n4f5d) (make-rectangular . n4f5c) (make-polar . n4f5b) (magnitude . n4f5a) (log . n4f59) (list? . n4f58) (list-tail . n4f57) (list-ref . n4f56) (list->vector . n4f55) (list->string . n4f54) (list . n4f53) (length . n4f52) (lcm . n4f51) (integer? . n4f50) (integer-valued? . n4f4f) (integer->char . n4f4e) (infinite? . n4f4d) (inexact? . n4f4c) (inexact . n4f4b) (imag-part . n4f4a) (gcd . n4f49) (for-each . n4f48) (floor . n4f47) (finite? . n4f46) (expt . n4f45) (exp . n4f44) (exact? . n4f43) (exact-integer-sqrt . n4f42) (exact . n4f41) (even? . n4f40) (error . n4f3f) (eqv? . n4f3e) (equal? . n4f3d) (eq? . n4f3c) (dynamic-wind . n4f3b) (div0-and-mod0 . n4f3a) (mod0 . n4f39) (div0 . n4f38) (div-and-mod . n4f37) (mod . n4f36) (div . n4f35) (denominator . n4f34) (cos . n4f33) (cons . n4f32) (complex? . n4f31) (char? . n4f30) (char>? . n4f2f) (char>=? . n4f2e) (char=? . n4f2d) (char<? . n4f2c) (char<=? . n4f2b) (char->integer . n4f2a) (ceiling . n4f29) (call-with-values . n4f28) (call/cc . n4f27) (call-with-current-continuation . n4f26) (cddddr . n4f25) (cdddar . n4f24) (cddadr . n4f23) (cddaar . n4f22) (cdaddr . n4f21) (cdadar . n4f20) (cdaadr . n4f1f) (cdaaar . n4f1e) (cadddr . n4f1d) (caddar . n4f1c) (cadadr . n4f1b) (cadaar . n4f1a) (caaddr . n4f19) (caadar . n4f18) (caaadr . n4f17) (caaaar . n4f16) (cdddr . n4f15) (cddar . n4f14) (cdadr . n4f13) (cdaar . n4f12) (caddr . n4f11) (cadar . n4f10) (caadr . n4f0f) (caaar . n4f0e) (cddr . n4f0d) (cdar . n4f0c) (cadr . n4f0b) (caar . n4f0a) (cdr . n4f09) (car . n4f08) (boolean? . n4f07) (boolean=? . n4f06) (atan . n4f05) (assertion-violation . n4f04) (assertion-error . n2f98) (asin . n4f03) (apply . n4f02) (append . n4f01) (angle . n4f00) (acos . n4eff) (abs . n4efe) (/ . n4efd) (* . n4efc) (- . n4efb) (+ . n4efa) (>= . n4ef9) (> . n4ef8) (= . n4ef7) (<= . n4ef6) (< . n4ef5) (library . n4ef4) (&no-nans . n4ef3) (&no-infinities . n4ef2) (&i/o-encoding . n4ef1) (&i/o-decoding . n4ef0) (&i/o-port . n4eef) (&i/o-file-does-not-exist . n4eee) (&i/o-file-already-exists . n4eed) (&i/o-file-is-read-only . n4eec) (&i/o-file-protection . n4eeb) (&i/o-filename . n4eea) (&i/o-invalid-position . n4ee9) (&i/o-write . n4ee8) (&i/o-read . n4ee7) (&i/o . n4ee6) (&undefined . n4ee5) (&syntax . n4ee4) (&lexical . n4ee3) (&implementation-restriction . n4ee2) (&non-continuable . n4ee1) (&who . n4ee0) (&irritants . n4edf) (&assertion . n4ede) (&violation . n4edd) (&error . n4edc) (&serious . n4edb) (&warning . n4eda) (&message . n4ed9) (&condition . n4ed8) (define-condition-type . n4ed7) (define-enumeration . n4ed6) (define-record-type . n4ed5) (parent-rtd . n4ed4) (nongenerative . n4ed3) (opaque . n4ed2) (sealed . n4ed1) (protocol . n4ed0) (parent . n4ecf) (immutable . n4ece) (mutable . n4ecd) (fields . n4ecc) (error-handling-mode . n4ecb) (file-options . n4eca) (buffer-mode . n4ec9) (eol-style . n4ec8) (guard . n4ec7) (trace-define . n4ec6) (trace-lambda . n4ec5) (unsyntax-splicing . n4ec4) (unsyntax . n4ec3) (unquote-splicing . n4ec2) (unquote . n4ec1) (_ . n4ec0) (else . n4ebf) (=> . n4ebe) (... . n4ebd) (assert . n4ebc) (endianness . n4ebb) (delay . n4eba) (time . n4eb9) (do . n4eb8) (cond . n4eb7) (let* . n4eb6) (let . n4eb5) (let*-values . n4eb4) (let-values . n4eb3) (identifier-syntax . n4eb2) (with-syntax . n4eb1) (quasisyntax . n4eb0) (quasiquote . n4eaf) (syntax-rules . n4eae) (include . n4ead) (define-struct . n4eac) (record-constructor-descriptor . n4eab) (record-type-descriptor . n4eaa) (case . n4ea9) (parameterize . n4ea8) (unless . n4ea7) (when . n4ea6) (or . n4ea5) (and . n4ea4) (if . n4ea3) (letrec* . n4ea2) (letrec . n4ea1) (type-descriptor . n4ea0) (case-lambda . n4e9f) (lambda . n4e9e) (syntax . n4e9d) (syntax-case . n4e9c) (quote . n4e9b) (foreign-call . n4e9a) (letrec-syntax . n4e99) (let-syntax . n4e98) (set! . n4e97) (import . n4e96) (begin . n4e95) (module . n4e94) (define-syntax . n4e93) (define . n4e92)) '((n4c65 core-prim . &no-nans-rcd) (n4c63 core-prim . &no-nans-rtd) (n4c50 core-prim . &no-infinities-rcd) (n4c4e core-prim . &no-infinities-rtd) (n4c3b core-prim . &i/o-encoding-rcd) (n4c39 core-prim . &i/o-encoding-rtd) (n4c20 core-prim . &i/o-decoding-rcd) (n4c1e core-prim . &i/o-decoding-rtd) (n4c0b core-prim . &i/o-port-rcd) (n4c09 core-prim . &i/o-port-rtd) (n4bf0 core-prim . &i/o-file-does-not-exist-rcd) (n4bee core-prim . &i/o-file-does-not-exist-rtd) (n4bdb core-prim . &i/o-file-already-exists-rcd) (n4bd9 core-prim . &i/o-file-already-exists-rtd) (n4bc6 core-prim . &i/o-file-is-read-only-rcd) (n4bc4 core-prim . &i/o-file-is-read-only-rtd) (n4bb1 core-prim . &i/o-file-protection-rcd) (n4baf core-prim . &i/o-file-protection-rtd) (n4b9c core-prim . &i/o-filename-rcd) (n4b9a core-prim . &i/o-filename-rtd) (n4b81 core-prim . &i/o-invalid-position-rcd) (n4b7f core-prim . &i/o-invalid-position-rtd) (n4b66 core-prim . &i/o-write-rcd) (n4b64 core-prim . &i/o-write-rtd) (n4b51 core-prim . &i/o-read-rcd) (n4b4f core-prim . &i/o-read-rtd) (n4b3c core-prim . &i/o-rcd) (n4b3a core-prim . &i/o-rtd) (n4b27 core-prim . &undefined-rcd) (n4b25 core-prim . &undefined-rtd) (n4b12 core-prim . &syntax-rcd) (n4b10 core-prim . &syntax-rtd) (n4af1 core-prim . &lexical-rcd) (n4aef core-prim . &lexical-rtd) (n4adc core-prim . &implementation-restriction-rcd) (n4ada core-prim . &implementation-restriction-rtd) (n4ac7 core-prim . &non-continuable-rcd) (n4ac5 core-prim . &non-continuable-rtd) (n4ab2 core-prim . &who-rcd) (n4ab0 core-prim . &who-rtd) (n4a97 core-prim . &irritants-rcd) (n4a95 core-prim . &irritants-rtd) (n4a7c core-prim . &assertion-rcd) (n4a7a core-prim . &assertion-rtd) (n4a67 core-prim . &violation-rcd) (n4a65 core-prim . &violation-rtd) (n4a52 core-prim . &error-rcd) (n4a50 core-prim . &error-rtd) (n4a3d core-prim . &serious-rcd) (n4a3b core-prim . &serious-rtd) (n4a28 core-prim . &warning-rcd) (n4a26 core-prim . &warning-rtd) (n4a13 core-prim . &message-rcd) (n4a11 core-prim . &message-rtd) (n49b4 core-prim . &condition-rcd) (n49b2 core-prim . &condition-rtd) (n2f9a core-prim . syntax-error) (n2eb5 core-prim . syntax-dispatch) (n5160 core-prim . pretty-print) (n515f core-prim . eval-core) (n515e core-prim . set-symbol-value!) (n515d core-prim . symbol-value) (n515c core-prim . gensym) (n515b core-prim . void) (n4d72 core-prim . load) (n2faa core-prim . interaction-environment) (n515a core-prim . char-ready?) (n5159 core-prim . regexp?) (n5158 core-prim . read-line) (n5157 core-prim . ungensym) (n5156 core-prim . alist->eq-hash-table) (n5155 core-prim . assoc-ref) (n5154 core-prim . print) (n5153 core-prim . format) (n5152 core-prim . host-os) (n294b core-prim . library-path) (n5151 core-prim . standard-library-path) (n5150 core-prim . file-newer?) (n514f core-prim . stat-mtime) (n514e core-prim . write-to-file) (n514d core-prim . file->list) (n514c core-prim . file->string) (n514b core-prim . digit->integer) (n514a core-prim . call-with-string-input-port) (n5149 core-prim . call-with-string-io) (n5148 core-prim . string-split) (n5147 core-prim . bytevector-for-each) (n5146 core-prim . string->regexp) (n5145 core-prim . rxmatch) (n5144 core-prim . regexp-replace-all) (n5143 core-prim . hashtable-for-each) (n5142 core-prim . call-process) (n5141 core-prim . local-tz-offset) (n5140 core-prim . microseconds) (n513f core-prim . readdir) (n513e core-prim . set-current-directory!) (n513d core-prim . expand-path) (n513c core-prim . current-directory) (n513b core-prim . %spawn) (n513a core-prim . %waitpid) (n5139 core-prim . %ffi-supported?) (n5138 core-prim . %ffi-pointer-ref) (n5137 core-prim . %ffi-pointer->string) (n5136 core-prim . %ffi-call->string-or-zero) (n5135 core-prim . %ffi-call->double) (n5134 core-prim . %ffi-call->void*) (n5133 core-prim . %ffi-call->void) (n5132 core-prim . %ffi-call->int) (n5131 core-prim . %ffi-lookup) (n5130 core-prim . %ffi-open) (n512f core-prim . %fork) (n512e core-prim . %pipe) (n512d core-prim . p) (n512c core-prim . open-output-string) (n512b core-prim . get-output-string) (n512a core-prim . get-environment-variables) (n5129 core-prim . get-environment-variable) (n5128 core-prim . get-timeofday) (n5127 core-prim . get-command-line) (n5126 core-prim . sys-display) (n5125 core-prim . mosh-executable-path) (n5124 core-prim . make-file-options) (n5123 core-prim . source-info) (n5122 core-prim . make-compiler-instruction) (n5121 core-prim . make-instruction) (n5120 core-prim . set-source-info!) (n511f core-prim . bignum?) (n511e core-prim . fast-equal?) (n511d core-prim . fasl-read) (n511c core-prim . fasl-write) (n511b core-prim . time-usage) (n511a core-prim . os-constant) (n277e core-prim . make-parameter) (n5119 core-prim . socket-port) (n5118 core-prim . socket-shutdown) (n5117 core-prim . socket-close) (n5116 core-prim . socket-send) (n5115 core-prim . socket-recv!) (n5114 core-prim . socket-recv) (n5113 core-prim . make-server-socket) (n5112 core-prim . make-client-socket) (n5111 core-prim . socket-accept) (n5110 core-prim . socket?) (n510f core-prim . string-upcase) (n510e core-prim . string-titlecase) (n510d core-prim . string-normalize-nfkd) (n510c core-prim . string-normalize-nfkc) (n510b core-prim . string-normalize-nfd) (n510a core-prim . string-normalize-nfc) (n5109 core-prim . string-foldcase) (n5108 core-prim . string-downcase) (n5107 core-prim . string-ci>?) (n5106 core-prim . string-ci>=?) (n5105 core-prim . string-ci=?) (n5104 core-prim . string-ci<?) (n5103 core-prim . string-ci<=?) (n5102 core-prim . char-whitespace?) (n5101 core-prim . char-upper-case?) (n5100 core-prim . char-title-case?) (n50ff core-prim . char-numeric?) (n50fe core-prim . char-lower-case?) (n50fd core-prim . char-general-category) (n50fc core-prim . char-upcase) (n50fb core-prim . char-titlecase) (n50fa core-prim . char-foldcase) (n50f9 core-prim . char-downcase) (n50f8 core-prim . char-ci>?) (n50f7 core-prim . char-ci>=?) (n50f6 core-prim . char-ci=?) (n50f5 core-prim . char-ci<?) (n50f4 core-prim . char-ci<=?) (n50f3 core-prim . char-alphabetic?) (n2ce2 core-prim . make-variable-transformer) (n2fa0 core-prim . identifier?) (n2f8c core-prim . generate-temporaries) (n2f8e core-prim . free-identifier=?) (n2fa4 core-prim . syntax->datum) (n2fa2 core-prim . datum->syntax) (n2f90 core-prim . bound-identifier=?) (n50f2 core-prim . record-type-descriptor?) (n50f1 core-prim . record-predicate) (n50f0 core-prim . record-mutator) (n50ef core-prim . record-constructor) (n50ee core-prim . record-accessor) (n50ed core-prim . make-record-type-descriptor) (n50ec core-prim . make-record-constructor-descriptor) (n50eb core-prim . record?) (n50ea core-prim . record-type-uid) (n50e9 core-prim . record-type-sealed?) (n50e8 core-prim . record-type-parent) (n50e7 core-prim . record-type-opaque?) (n50e6 core-prim . record-type-name) (n50e5 core-prim . record-type-generative?) (n50e4 core-prim . record-type-field-names) (n50e3 core-prim . record-rtd) (n50e2 core-prim . record-field-mutable?) (n50e1 core-prim . delete-file) (n50e0 core-prim . file-exists?) (n50df core-prim . vector-sort!) (n50de core-prim . vector-sort) (n50dd core-prim . list-sort) (n50dc core-prim . symbol-hash) (n50db core-prim . string-ci-hash) (n50da core-prim . string-hash) (n50d9 core-prim . equal-hash) (n50d8 core-prim . hashtable-equivalence-function) (n50d7 core-prim . make-hashtable) (n50d6 core-prim . hashtable-hash-function) (n50d5 core-prim . make-eqv-hashtable) (n50d4 core-prim . make-eq-hashtable) (n50d3 core-prim . hashtable?) (n50d2 core-prim . hashtable-update!) (n50d1 core-prim . hashtable-size) (n50d0 core-prim . hashtable-set!) (n50cf core-prim . hashtable-ref) (n50ce core-prim . hashtable-mutable?) (n50cd core-prim . hashtable-keys) (n50cc core-prim . hashtable-entries) (n50cb core-prim . hashtable-delete!) (n50ca core-prim . hashtable-copy) (n50c9 core-prim . hashtable-contains?) (n50c8 core-prim . hashtable-clear!) (n50c7 core-prim . call-with-output-file) (n50c6 core-prim . call-with-input-file) (n50c5 core-prim . write-char) (n50c4 core-prim . write) (n50c3 core-prim . with-output-to-file) (n50c2 core-prim . with-input-from-file) (n50c1 core-prim . read-char) (n50c0 core-prim . read) (n50bf core-prim . peek-char) (n50be core-prim . open-output-file) (n50bd core-prim . open-input-file) (n50bc core-prim . newline) (n50bb core-prim . display) (n50ba core-prim . close-output-port) (n50b9 core-prim . close-input-port) (n50b8 core-prim . eof-object?) (n50b7 core-prim . eof-object) (n50b6 core-prim . current-error-port) (n50b5 core-prim . current-output-port) (n50b4 core-prim . current-input-port) (n50b3 core-prim . output-port?) (n50b2 core-prim . input-port?) (n50b1 core-prim . utf-8-codec) (n50b0 core-prim . utf-16-codec) (n50af core-prim . transcoder-error-handling-mode) (n50ae core-prim . transcoder-eol-style) (n50ad core-prim . transcoder-codec) (n50ac core-prim . transcoded-port) (n50ab core-prim . textual-port?) (n50aa core-prim . string->bytevector) (n50a9 core-prim . standard-output-port) (n50a8 core-prim . standard-input-port) (n50a7 core-prim . standard-error-port) (n50a6 core-prim . set-port-position!) (n50a5 core-prim . put-u8) (n50a4 core-prim . put-string) (n50a3 core-prim . put-datum) (n50a2 core-prim . put-char) (n50a1 core-prim . put-bytevector) (n50a0 core-prim . port?) (n509f core-prim . port-transcoder) (n509e core-prim . port-position) (n509d core-prim . port-has-set-port-position!?) (n509c core-prim . port-has-port-position?) (n509b core-prim . port-eof?) (n509a core-prim . output-port-buffer-mode) (n5099 core-prim . open-string-output-port) (n5098 core-prim . open-string-input-port) (n5097 core-prim . open-file-output-port) (n5096 core-prim . open-file-input/output-port) (n5095 core-prim . open-file-input-port) (n5094 core-prim . open-bytevector-output-port) (n5093 core-prim . open-bytevector-input-port) (n5092 core-prim . native-transcoder) (n5091 core-prim . native-eol-style) (n5090 core-prim . make-transcoder) (n508f core-prim . latin-1-codec) (n4b60 core-prim . make-i/o-write-error) (n4b4b core-prim . make-i/o-read-error) (n4c01 core-prim . make-i/o-port-error) (n4b77 core-prim . make-i/o-invalid-position-error) (n4b92 core-prim . make-i/o-filename-error) (n4bab core-prim . make-i/o-file-protection-error) (n4bc0 core-prim . make-i/o-file-is-read-only-error) (n4bea core-prim . make-i/o-file-does-not-exist-error) (n4bd5 core-prim . make-i/o-file-already-exists-error) (n4b36 core-prim . make-i/o-error) (n4c31 core-prim . make-i/o-encoding-error) (n4c1a core-prim . make-i/o-decoding-error) (n508e core-prim . make-custom-textual-output-port) (n508d core-prim . make-custom-textual-input/output-port) (n508c core-prim . make-custom-textual-input-port) (n508b core-prim . make-custom-binary-output-port) (n508a core-prim . make-custom-binary-input/output-port) (n5089 core-prim . make-custom-binary-input-port) (n5088 core-prim . make-bytevector) (n5087 core-prim . lookahead-u8) (n5086 core-prim . lookahead-char) (n4b62 core-prim . i/o-write-error?) (n4b4d core-prim . i/o-read-error?) (n4c05 core-prim . i/o-port-error?) (n4b7b core-prim . i/o-invalid-position-error?) (n4b96 core-prim . i/o-filename-error?) (n4bad core-prim . i/o-file-protection-error?) (n4bc2 core-prim . i/o-file-is-read-only-error?) (n4bec core-prim . i/o-file-does-not-exist-error?) (n4bd7 core-prim . i/o-file-already-exists-error?) (n4b38 core-prim . i/o-error?) (n4b7d core-prim . i/o-error-position) (n4c07 core-prim . i/o-error-port) (n4b98 core-prim . i/o-error-filename) (n4c35 core-prim . i/o-encoding-error?) (n4c37 core-prim . i/o-encoding-error-char) (n4c1c core-prim . i/o-decoding-error?) (n5085 core-prim . get-u8) (n5084 core-prim . get-string-n!) (n5083 core-prim . get-string-n) (n5082 core-prim . get-string-all) (n5081 core-prim . get-line) (n5080 core-prim . get-datum) (n507f core-prim . get-char) (n507e core-prim . get-bytevector-some) (n507d core-prim . get-bytevector-n!) (n507c core-prim . get-bytevector-n) (n507b core-prim . get-bytevector-all) (n507a core-prim . flush-output-port) (n5079 core-prim . close-port) (n2f7a core-prim . scheme-report-environment) (n5078 core-prim . quotient) (n2f78 core-prim . null-environment) (n5077 core-prim . remainder) (n5076 core-prim . modulo) (n5075 core-prim . inexact->exact) (n5074 core-prim . force) (n5073 core-prim . exact->inexact) (n5072 core-prim . make-promise) (n5071 core-prim . exit) (n4d6c core-prim . command-line) (n5070 core-prim . string-fill!) (n506f core-prim . string-set!) (n506e core-prim . set-cdr!) (n506d core-prim . set-car!) (n506c core-prim . remove) (n506b core-prim . remv) (n506a core-prim . remp) (n5069 core-prim . remq) (n5068 core-prim . partition) (n5067 core-prim . memv) (n5066 core-prim . memq) (n5065 core-prim . memp) (n5064 core-prim . member) (n5063 core-prim . exists) (n5062 core-prim . for-all) (n5061 core-prim . fold-right) (n5060 core-prim . fold-left) (n505f core-prim . find) (n505e core-prim . filter) (n505d core-prim . cons*) (n505c core-prim . assv) (n505b core-prim . assq) (n505a core-prim . assp) (n5059 core-prim . assoc) (n5058 core-prim . call-with-string-output-port) (n5057 core-prim . call-with-port) (n5056 core-prim . call-with-bytevector-output-port) (n5055 core-prim . bytevector->string) (n5054 core-prim . buffer-mode?) (n5053 core-prim . binary-port?) (n5052 core-prim . with-exception-handler) (n5051 core-prim . raise-continuable) (n5050 core-prim . raise) (n2f7e core-prim . eval) (n2f76 core-prim . environment) (n504f core-prim . make-enumeration) (n504e core-prim . enum-set=?) (n504d core-prim . enum-set-universe) (n504c core-prim . enum-set-union) (n504b core-prim . enum-set-subset?) (n504a core-prim . enum-set-projection) (n5049 core-prim . enum-set-member?) (n5048 core-prim . enum-set-intersection) (n5047 core-prim . enum-set-indexer) (n5046 core-prim . enum-set-difference) (n5045 core-prim . enum-set-constructor) (n5044 core-prim . enum-set-complement) (n5043 core-prim . enum-set->list) (n4aac core-prim . who-condition?) (n4a24 core-prim . warning?) (n4a63 core-prim . violation?) (n4b23 core-prim . undefined-violation?) (n4b0a core-prim . syntax-violation?) (n4b0e core-prim . syntax-violation-subform) (n4b0c core-prim . syntax-violation-form) (n2f9e core-prim . syntax-violation) (n5042 core-prim . simple-conditions) (n4a39 core-prim . serious-condition?) (n4ac3 core-prim . non-continuable-violation?) (n4a0d core-prim . message-condition?) (n4aa8 core-prim . make-who-condition) (n4a22 core-prim . make-warning) (n4a61 core-prim . make-violation) (n4b21 core-prim . make-undefined-violation) (n4b04 core-prim . make-syntax-violation) (n4a37 core-prim . make-serious-condition) (n4ac1 core-prim . make-non-continuable-violation) (n4a09 core-prim . make-message-condition) (n4aeb core-prim . make-lexical-violation) (n4a8d core-prim . make-irritants-condition) (n4ad6 core-prim . make-implementation-restriction-violation) (n4a4c core-prim . make-error) (n4a76 core-prim . make-assertion-violation) (n4aed core-prim . lexical-violation?) (n4a91 core-prim . irritants-condition?) (n4ad8 core-prim . implementation-restriction-violation?) (n4a4e core-prim . error?) (n4aae core-prim . condition-who) (n5041 core-prim . condition-predicate) (n4a0f core-prim . condition-message) (n4a93 core-prim . condition-irritants) (n5040 core-prim . condition-accessor) (n503f core-prim . condition) (n4a78 core-prim . assertion-violation?) (n503e core-prim . condition?) (n503d core-prim . utf32->string) (n503c core-prim . utf16->string) (n503b core-prim . utf8->string) (n503a core-prim . uint-list->bytevector) (n5039 core-prim . u8-list->bytevector) (n5038 core-prim . string->utf8) (n5037 core-prim . string->utf32) (n5036 core-prim . string->utf16) (n5035 core-prim . sint-list->bytevector) (n5034 core-prim . native-endianness) (n5033 core-prim . bytevector?) (n5032 core-prim . bytevector=?) (n5031 core-prim . bytevector-uint-set!) (n5030 core-prim . bytevector-uint-ref) (n502f core-prim . bytevector-u8-set!) (n502e core-prim . bytevector-u8-ref) (n502d core-prim . bytevector-u64-set!) (n502c core-prim . bytevector-u64-ref) (n502b core-prim . bytevector-u64-native-set!) (n502a core-prim . bytevector-u64-native-ref) (n5029 core-prim . bytevector-u32-set!) (n5028 core-prim . bytevector-u32-ref) (n5027 core-prim . bytevector-u32-native-set!) (n5026 core-prim . bytevector-u32-native-ref) (n5025 core-prim . bytevector-u16-set!) (n5024 core-prim . bytevector-u16-ref) (n5023 core-prim . bytevector-u16-native-set!) (n5022 core-prim . bytevector-u16-native-ref) (n5021 core-prim . bytevector-sint-set!) (n5020 core-prim . bytevector-sint-ref) (n501f core-prim . bytevector-s8-set!) (n501e core-prim . bytevector-s8-ref) (n501d core-prim . bytevector-s64-set!) (n501c core-prim . bytevector-s64-ref) (n501b core-prim . bytevector-s64-native-set!) (n501a core-prim . bytevector-s64-native-ref) (n5019 core-prim . bytevector-s32-set!) (n5018 core-prim . bytevector-s32-ref) (n5017 core-prim . bytevector-s32-native-set!) (n5016 core-prim . bytevector-s32-native-ref) (n5015 core-prim . bytevector-s16-set!) (n5014 core-prim . bytevector-s16-ref) (n5013 core-prim . bytevector-s16-native-set!) (n5012 core-prim . bytevector-s16-native-ref) (n5011 core-prim . bytevector-length) (n5010 core-prim . bytevector-ieee-single-ref) (n500f core-prim . bytevector-ieee-single-set!) (n500e core-prim . bytevector-ieee-single-native-set!) (n500d core-prim . bytevector-ieee-single-native-ref) (n500c core-prim . bytevector-ieee-double-set!) (n500b core-prim . bytevector-ieee-double-ref) (n500a core-prim . bytevector-ieee-double-native-set!) (n5009 core-prim . bytevector-ieee-double-native-ref) (n5008 core-prim . bytevector-fill!) (n5007 core-prim . bytevector-copy!) (n5006 core-prim . bytevector-copy) (n5005 core-prim . bytevector->uint-list) (n5004 core-prim . bytevector->u8-list) (n5003 core-prim . bytevector->sint-list) (n4c61 core-prim . no-nans-violation?) (n4c4c core-prim . no-infinities-violation?) (n4c5f core-prim . make-no-nans-violation) (n4c4a core-prim . make-no-infinities-violation) (n5002 core-prim . real->flonum) (n5001 core-prim . flzero?) (n5000 core-prim . fltruncate) (n4fff core-prim . fltan) (n4ffe core-prim . flsqrt) (n4ffd core-prim . flsin) (n4ffc core-prim . flround) (n4ffb core-prim . flpositive?) (n4ffa core-prim . flonum?) (n4ff9 core-prim . flodd?) (n4ff8 core-prim . flnumerator) (n4ff7 core-prim . flnegative?) (n4ff6 core-prim . flnan?) (n4ff5 core-prim . flmod0) (n4ff4 core-prim . flmod) (n4ff3 core-prim . flmin) (n4ff2 core-prim . flmax) (n4ff1 core-prim . fllog) (n4ff0 core-prim . flinteger?) (n4fef core-prim . flinfinite?) (n4fee core-prim . flfloor) (n4fed core-prim . flfinite?) (n4fec core-prim . flexpt) (n4feb core-prim . flexp) (n4fea core-prim . fleven?) (n4fe9 core-prim . fldiv0-and-mod0) (n4fe8 core-prim . fldiv0) (n4fe7 core-prim . fldiv-and-mod) (n4fe6 core-prim . fldiv) (n4fe5 core-prim . fldenominator) (n4fe4 core-prim . flcos) (n4fe3 core-prim . flceiling) (n4fe2 core-prim . flatan) (n4fe1 core-prim . flasin) (n4fe0 core-prim . flacos) (n4fdf core-prim . flabs) (n4fde core-prim . fl>?) (n4fdd core-prim . fl>=?) (n4fdc core-prim . fl=?) (n4fdb core-prim . fl<?) (n4fda core-prim . fl<=?) (n4fd9 core-prim . fl/) (n4fd8 core-prim . fl-) (n4fd7 core-prim . fl+) (n4fd6 core-prim . fl*) (n4fd5 core-prim . fixnum->flonum) (n4fd4 core-prim . fxzero?) (n4fd3 core-prim . fxxor) (n4fd2 core-prim . fxrotate-bit-field) (n4fd1 core-prim . fxreverse-bit-field) (n4fd0 core-prim . fxpositive?) (n4fcf core-prim . fxodd?) (n4fce core-prim . fxnot) (n4fcd core-prim . fxnegative?) (n4fcc core-prim . fxmod0) (n4fcb core-prim . fxmod) (n4fca core-prim . fxmin) (n4fc9 core-prim . fxmax) (n4fc8 core-prim . fxlength) (n4fc7 core-prim . fxior) (n4fc6 core-prim . fxif) (n4fc5 core-prim . fxfirst-bit-set) (n4fc4 core-prim . fxeven?) (n4fc3 core-prim . fxdiv0-and-mod0) (n4fc2 core-prim . fxdiv0) (n4fc1 core-prim . fxdiv-and-mod) (n4fc0 core-prim . fxdiv) (n4fbf core-prim . fxcopy-bit-field) (n4fbe core-prim . fxcopy-bit) (n4fbd core-prim . fxbit-set?) (n4fbc core-prim . fxbit-field) (n4fbb core-prim . fxbit-count) (n4fba core-prim . fxarithmetic-shift-right) (n4fb9 core-prim . fxarithmetic-shift-left) (n4fb8 core-prim . fxarithmetic-shift) (n4fb7 core-prim . fxand) (n4fb6 core-prim . fx>?) (n4fb5 core-prim . fx>=?) (n4fb4 core-prim . fx=?) (n4fb3 core-prim . fx<?) (n4fb2 core-prim . fx<=?) (n4fb1 core-prim . fx-/carry) (n4fb0 core-prim . fx-) (n4faf core-prim . fx+/carry) (n4fae core-prim . fx+) (n4fad core-prim . fx*/carry) (n4fac core-prim . fx*) (n4fab core-prim . greatest-fixnum) (n4faa core-prim . least-fixnum) (n4fa9 core-prim . fixnum-width) (n4fa8 core-prim . fixnum?) (n4fa7 core-prim . bitwise-rotate-bit-field) (n4fa6 core-prim . bitwise-reverse-bit-field) (n4fa5 core-prim . bitwise-length) (n4fa4 core-prim . bitwise-if) (n4fa3 core-prim . bitwise-first-bit-set) (n4fa2 core-prim . bitwise-copy-bit-field) (n4fa1 core-prim . bitwise-copy-bit) (n4fa0 core-prim . bitwise-bit-set?) (n4f9f core-prim . bitwise-bit-field) (n4f9e core-prim . bitwise-bit-count) (n4f9d core-prim . bitwise-xor) (n4f9c core-prim . bitwise-ior) (n4f9b core-prim . bitwise-and) (n4f9a core-prim . bitwise-not) (n4f99 core-prim . bitwise-arithmetic-shift-right) (n4f98 core-prim . bitwise-arithmetic-shift-left) (n4f97 core-prim . bitwise-arithmetic-shift) (n4f96 core-prim . zero?) (n4f95 core-prim . vector?) (n4f94 core-prim . vector-set!) (n4f93 core-prim . vector-ref) (n4f92 core-prim . vector-map) (n4f91 core-prim . vector-length) (n4f90 core-prim . vector-for-each) (n4f8f core-prim . vector-fill!) (n4f8e core-prim . vector->list) (n4f8d core-prim . vector) (n4f8c core-prim . values) (n4f8b core-prim . truncate) (n4f8a core-prim . tan) (n4f89 core-prim . symbol?) (n4f88 core-prim . symbol=?) (n4f87 core-prim . symbol->string) (n4f86 core-prim . substring) (n4f85 core-prim . string?) (n4f84 core-prim . string>?) (n4f83 core-prim . string>=?) (n4f82 core-prim . string=?) (n4f81 core-prim . string<?) (n4f80 core-prim . string<=?) (n4f7f core-prim . string-ref) (n4f7e core-prim . string-length) (n4f7d core-prim . string-for-each) (n4f7c core-prim . string-copy) (n4f7b core-prim . string-append) (n4f7a core-prim . string->symbol) (n4f79 core-prim . string->number) (n4f78 core-prim . string->list) (n4f77 core-prim . string) (n4f76 core-prim . sqrt) (n4f75 core-prim . sin) (n4f74 core-prim . round) (n4f73 core-prim . reverse) (n4f72 core-prim . real?) (n4f71 core-prim . real-valued?) (n4f70 core-prim . real-part) (n4f6f core-prim . rationalize) (n4f6e core-prim . rational?) (n4f6d core-prim . rational-valued?) (n4f6c core-prim . procedure?) (n4f6b core-prim . positive?) (n4f6a core-prim . pair?) (n4f69 core-prim . odd?) (n4f68 core-prim . numerator) (n4f67 core-prim . number?) (n4f66 core-prim . number->string) (n4f65 core-prim . null?) (n4f64 core-prim . not) (n4f63 core-prim . negative?) (n4f62 core-prim . nan?) (n4f61 core-prim . min) (n4f60 core-prim . max) (n4f5f core-prim . map) (n4f5e core-prim . make-vector) (n4f5d core-prim . make-string) (n4f5c core-prim . make-rectangular) (n4f5b core-prim . make-polar) (n4f5a core-prim . magnitude) (n4f59 core-prim . log) (n4f58 core-prim . list?) (n4f57 core-prim . list-tail) (n4f56 core-prim . list-ref) (n4f55 core-prim . list->vector) (n4f54 core-prim . list->string) (n4f53 core-prim . list) (n4f52 core-prim . length) (n4f51 core-prim . lcm) (n4f50 core-prim . integer?) (n4f4f core-prim . integer-valued?) (n4f4e core-prim . integer->char) (n4f4d core-prim . infinite?) (n4f4c core-prim . inexact?) (n4f4b core-prim . inexact) (n4f4a core-prim . imag-part) (n4f49 core-prim . gcd) (n4f48 core-prim . for-each) (n4f47 core-prim . floor) (n4f46 core-prim . finite?) (n4f45 core-prim . expt) (n4f44 core-prim . exp) (n4f43 core-prim . exact?) (n4f42 core-prim . exact-integer-sqrt) (n4f41 core-prim . exact) (n4f40 core-prim . even?) (n4f3f core-prim . error) (n4f3e core-prim . eqv?) (n4f3d core-prim . equal?) (n4f3c core-prim . eq?) (n4f3b core-prim . dynamic-wind) (n4f3a core-prim . div0-and-mod0) (n4f39 core-prim . mod0) (n4f38 core-prim . div0) (n4f37 core-prim . div-and-mod) (n4f36 core-prim . mod) (n4f35 core-prim . div) (n4f34 core-prim . denominator) (n4f33 core-prim . cos) (n4f32 core-prim . cons) (n4f31 core-prim . complex?) (n4f30 core-prim . char?) (n4f2f core-prim . char>?) (n4f2e core-prim . char>=?) (n4f2d core-prim . char=?) (n4f2c core-prim . char<?) (n4f2b core-prim . char<=?) (n4f2a core-prim . char->integer) (n4f29 core-prim . ceiling) (n4f28 core-prim . call-with-values) (n4f27 core-prim . call/cc) (n4f26 core-prim . call-with-current-continuation) (n4f25 core-prim . cddddr) (n4f24 core-prim . cdddar) (n4f23 core-prim . cddadr) (n4f22 core-prim . cddaar) (n4f21 core-prim . cdaddr) (n4f20 core-prim . cdadar) (n4f1f core-prim . cdaadr) (n4f1e core-prim . cdaaar) (n4f1d core-prim . cadddr) (n4f1c core-prim . caddar) (n4f1b core-prim . cadadr) (n4f1a core-prim . cadaar) (n4f19 core-prim . caaddr) (n4f18 core-prim . caadar) (n4f17 core-prim . caaadr) (n4f16 core-prim . caaaar) (n4f15 core-prim . cdddr) (n4f14 core-prim . cddar) (n4f13 core-prim . cdadr) (n4f12 core-prim . cdaar) (n4f11 core-prim . caddr) (n4f10 core-prim . cadar) (n4f0f core-prim . caadr) (n4f0e core-prim . caaar) (n4f0d core-prim . cddr) (n4f0c core-prim . cdar) (n4f0b core-prim . cadr) (n4f0a core-prim . caar) (n4f09 core-prim . cdr) (n4f08 core-prim . car) (n4f07 core-prim . boolean?) (n4f06 core-prim . boolean=?) (n4f05 core-prim . atan) (n4f04 core-prim . assertion-violation) (n2f98 core-prim . assertion-error) (n4f03 core-prim . asin) (n4f02 core-prim . apply) (n4f01 core-prim . append) (n4f00 core-prim . angle) (n4eff core-prim . acos) (n4efe core-prim . abs) (n4efd core-prim . /) (n4efc core-prim . *) (n4efb core-prim . -) (n4efa core-prim . +) (n4ef9 core-prim . >=) (n4ef8 core-prim . >) (n4ef7 core-prim . =) (n4ef6 core-prim . <=) (n4ef5 core-prim . <) (n4ef4 core-prim . library) (n4ef3 $core-rtd &no-nans-rtd &no-nans-rcd) (n4ef2 $core-rtd &no-infinities-rtd &no-infinities-rcd) (n4ef1 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (n4ef0 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (n4eef $core-rtd &i/o-port-rtd &i/o-port-rcd) (n4eee $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (n4eed $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (n4eec $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (n4eeb $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (n4eea $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (n4ee9 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (n4ee8 $core-rtd &i/o-write-rtd &i/o-write-rcd) (n4ee7 $core-rtd &i/o-read-rtd &i/o-read-rcd) (n4ee6 $core-rtd &i/o-rtd &i/o-rcd) (n4ee5 $core-rtd &undefined-rtd &undefined-rcd) (n4ee4 $core-rtd &syntax-rtd &syntax-rcd) (n4ee3 $core-rtd &lexical-rtd &lexical-rcd) (n4ee2 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (n4ee1 $core-rtd &non-continuable-rtd &non-continuable-rcd) (n4ee0 $core-rtd &who-rtd &who-rcd) (n4edf $core-rtd &irritants-rtd &irritants-rcd) (n4ede $core-rtd &assertion-rtd &assertion-rcd) (n4edd $core-rtd &violation-rtd &violation-rcd) (n4edc $core-rtd &error-rtd &error-rcd) (n4edb $core-rtd &serious-rtd &serious-rcd) (n4eda $core-rtd &warning-rtd &warning-rcd) (n4ed9 $core-rtd &message-rtd &message-rcd) (n4ed8 $core-rtd &condition-rtd &condition-rcd) (n4ed7 macro . define-condition-type) (n4ed6 macro . define-enumeration) (n4ed5 macro . define-record-type) (n4ed4 macro . parent-rtd) (n4ed3 macro . nongenerative) (n4ed2 macro . opaque) (n4ed1 macro . sealed) (n4ed0 macro . protocol) (n4ecf macro . parent) (n4ece macro . immutable) (n4ecd macro . mutable) (n4ecc macro . fields) (n4ecb macro . error-handling-mode) (n4eca macro . file-options) (n4ec9 macro . buffer-mode) (n4ec8 macro . eol-style) (n4ec7 macro . guard) (n4ec6 macro . trace-define) (n4ec5 macro . trace-lambda) (n4ec4 macro . unsyntax-splicing) (n4ec3 macro . unsyntax) (n4ec2 macro . unquote-splicing) (n4ec1 macro . unquote) (n4ec0 macro . _) (n4ebf macro . else) (n4ebe macro . =>) (n4ebd macro . ...) (n4ebc macro . assert) (n4ebb macro . endianness) (n4eba macro . delay) (n4eb9 macro . time) (n4eb8 macro . do) (n4eb7 macro . cond) (n4eb6 macro . let*) (n4eb5 macro . let) (n4eb4 macro . let*-values) (n4eb3 macro . let-values) (n4eb2 macro . identifier-syntax) (n4eb1 macro . with-syntax) (n4eb0 macro . quasisyntax) (n4eaf macro . quasiquote) (n4eae macro . syntax-rules) (n4ead macro . include) (n4eac macro . define-struct) (n4eab core-macro . record-constructor-descriptor) (n4eaa core-macro . record-type-descriptor) (n4ea9 macro . case) (n4ea8 macro . parameterize) (n4ea7 macro . unless) (n4ea6 macro . when) (n4ea5 core-macro . or) (n4ea4 core-macro . and) (n4ea3 core-macro . if) (n4ea2 core-macro . letrec*) (n4ea1 core-macro . letrec) (n4ea0 core-macro . type-descriptor) (n4e9f core-macro . case-lambda) (n4e9e core-macro . lambda) (n4e9d core-macro . syntax) (n4e9c core-macro . syntax-case) (n4e9b core-macro . quote) (n4e9a core-macro . foreign-call) (n4e99 letrec-syntax) (n4e98 let-syntax) (n4e97 set!) (n4e96 import) (n4e95 begin) (n4e94 module) (n4e93 define-syntax) (n4e92 define)) values values '#f '#f '#f '#f) (n2acd@n296c@install-library 'n5181 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . n5160) (eval-core . n515f) (set-symbol-value! . n515e) (symbol-value . n515d) (gensym . n515c) (void . n515b)) '() values values '#f '#f '#f '#f) (n2acd@n296c@install-library 'n5182 '(mosh) '() '() '() '() '((set-symbol-value! . n515e) (symbol-value . n515d) (regexp? . n5159) (read-line . n5158) (ungensym . n5157) (alist->eq-hash-table . n5156) (assoc-ref . n5155) (print . n5154) (format . n5153) (host-os . n5152) (library-path . n294b) (standard-library-path . n5151) (file-newer? . n5150) (stat-mtime . n514f) (write-to-file . n514e) (file->list . n514d) (file->string . n514c) (digit->integer . n514b) (call-with-string-input-port . n514a) (call-with-string-io . n5149) (string-split . n5148) (bytevector-for-each . n5147) (string->regexp . n5146) (rxmatch . n5145) (regexp-replace-all . n5144) (hashtable-for-each . n5143) (readdir . n513f) (set-current-directory! . n513e) (expand-path . n513d) (current-directory . n513c) (p . n512d) (get-timeofday . n5128) (get-command-line . n5127) (sys-display . n5126) (mosh-executable-path . n5125) (make-file-options . n5124) (source-info . n5123) (make-compiler-instruction . n5122) (make-instruction . n5121) (set-source-info! . n5120) (bignum? . n511f) (fast-equal? . n511e) (fasl-read . n511d) (fasl-write . n511c) (time-usage . n511b) (os-constant . n511a) (time . n4eb9) (include . n4ead)) '() values values '#f '#f '#f '#f) (n2acd@n296c@install-library 'n5183 '(system) '() '() '() '() '((call-process . n5142) (local-tz-offset . n5141) (microseconds . n5140) (expand-path . n513d) (%spawn . n513b) (%waitpid . n513a) (%ffi-supported? . n5139) (%ffi-pointer-ref . n5138) (%ffi-pointer->string . n5137) (%ffi-call->string-or-zero . n5136) (%ffi-call->double . n5135) (%ffi-call->void* . n5134) (%ffi-call->void . n5133) (%ffi-call->int . n5132) (%ffi-lookup . n5131) (%ffi-open . n5130) (%fork . n512f) (%pipe . n512e) (open-output-string . n512c) (get-output-string . n512b) (get-environment-variables . n512a) (get-environment-variable . n5129) (make-parameter . n277e) (socket-port . n5119) (socket-shutdown . n5118) (socket-close . n5117) (socket-send . n5116) (socket-recv! . n5115) (socket-recv . n5114) (make-server-socket . n5113) (make-client-socket . n5112) (socket-accept . n5111) (socket? . n5110) (parameterize . n4ea8)) '() values values '#f '#f '#f '#f))
((lambda (n4d5b@add-library-path! n4d5d@parse-and-add-library-path n4d5f@for-each-with-index n4d61@rpad n4d63@condition-printer n4d65@record->field-alist n4d67@map-with-index n4d69@repl n4d6b@trace-printer n4d6d@command-line n4d6f@local-library-path n4d71@load/args n4d73@load n4d75@ironscheme-build n4d77@eval-top-level n4d79@compile-system-libraries n4d7b@compile n4d7d@compile->closure n4d7f@pre-compile-r6rs-file n4d81@load-r6rs-top-level n4d83@load-r6rs-top-level-sexp) (begin (set! n4d5b@add-library-path! (lambda (n4da6@path) (n2abd@n294c@library-path (append (n2abd@n294c@library-path) (list n4da6@path))))) (set! n4d5d@parse-and-add-library-path (lambda (n4da8@paths n4da9@message) ((lambda (n4dac@t) (if n4dac@t ((lambda (n4dae@paths) (for-each (lambda (n4db0@path) (if (file-exists? n4db0@path) (n4d5b@add-library-path! (expand-path n4db0@path)) (format (current-error-port) n4da9@message n4db0@path))) (reverse (string-split n4dae@paths '#\:)))) n4dac@t) (void))) n4da8@paths))) (set! n4d5f@for-each-with-index (lambda (n4db2@proc n4db3@lst) (letrec ((n4db6@loop (lambda (n4db8@i n4db9@lst) (if (null? n4db9@lst) (if '#f '#f (void)) (begin (n4db2@proc n4db8@i (car n4db9@lst)) (n4db6@loop (+ n4db8@i '1) (cdr n4db9@lst))))))) (n4db6@loop '1 n4db3@lst)))) (set! n4d61@rpad (lambda (n4dbc@str n4dbd@pad n4dbe@n) ((lambda (n4dc2@rest) ((letrec ((n4dc4@loop (lambda (n4dc6@rest n4dc7@ret) (if (<= n4dc6@rest '0) n4dc7@ret (n4dc4@loop (- n4dc6@rest '1) (string-append n4dc7@ret n4dbd@pad)))))) n4dc4@loop) n4dc2@rest (format '"~a" n4dbc@str))) (- n4dbe@n (string-length (format '"~a" n4dbc@str)))))) (set! n4d63@condition-printer (lambda (n4dca@e n4dcb@port) ((lambda (n4dcf@max-condition-len) (begin (set! n4dcf@max-condition-len (apply max (map (lambda (n4de0@c) (string-length (symbol->string (record-type-name (record-rtd n4de0@c))))) (simple-conditions n4dca@e)))) (begin (display '" Condition components:\n" n4dcb@port) (n4d5f@for-each-with-index (lambda (n4dd0@i n4dd1@x) ((lambda (n4dd4@rtd n4dd5@fields-alist) (begin (format n4dcb@port '" ~d. ~a" n4dd0@i (n4d61@rpad (symbol->string (record-type-name n4dd4@rtd)) '" " n4dcf@max-condition-len)) (if (null? n4dd5@fields-alist) (newline n4dcb@port) (void)) ((letrec ((n4dd8@loop (lambda (n4dda@first n4ddb@fields-alist) (if (null? n4ddb@fields-alist) '() ((lambda (n4dde@field) (begin (if (not n4dda@first) (display (n4d61@rpad '"" '" " (+ '4 n4dcf@max-condition-len)) n4dcb@port) (void)) (display '"       " n4dcb@port) (display (car n4dde@field) n4dcb@port) (display '": " n4dcb@port) (write (cdr n4dde@field) n4dcb@port) (newline n4dcb@port) (n4dd8@loop '#f (cdr n4ddb@fields-alist)))) (car n4ddb@fields-alist)))))) n4dd8@loop) '#t n4dd5@fields-alist))) (record-rtd n4dd1@x) (n4d65@record->field-alist n4dd1@x))) (simple-conditions n4dca@e))))) '#f))) (set! n4d65@record->field-alist (lambda (n4de2@r) ((lambda (n4de5@ref) (begin (set! n4de5@ref (lambda (n4df0@rtd n4df1@i n4df2@x) ((lambda (n4df6@val) (if (symbol? n4df6@val) (ungensym n4df6@val) n4df6@val)) ((record-accessor n4df0@rtd n4df1@i) n4df2@x)))) ((letrec ((n4de6@loop (lambda (n4de8@ret n4de9@rtd) (if n4de9@rtd (n4de6@loop (append n4de8@ret (n4d67@map-with-index (lambda (n4dec@i n4ded@field) (cons n4ded@field (n4de5@ref n4de9@rtd n4dec@i n4de2@r))) (vector->list (record-type-field-names n4de9@rtd)))) (record-type-parent n4de9@rtd)) n4de8@ret)))) n4de6@loop) '() (record-rtd n4de2@r)))) '#f))) (set! n4d67@map-with-index (lambda (n4df8@proc n4df9@lst) ((letrec ((n4dfc@loop (lambda (n4dfe@i n4dff@lst n4e00@ret) (if (null? n4dff@lst) (reverse n4e00@ret) (n4dfc@loop (+ n4dfe@i '1) (cdr n4dff@lst) (cons (n4df8@proc n4dfe@i (car n4dff@lst)) n4e00@ret)))))) n4dfc@loop) '0 n4df9@lst '()))) (set! n4d69@repl (lambda n4e04@x ((lambda (n4e07@rec) (begin (set! n4e07@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (n4e0a@n4e08) (lambda () (with-exception-handler (lambda (n4e0c@e) ((call/cc (lambda (n4e0e@n4e09) (n4e0a@n4e08 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? n4e0c@e) (n4d63@condition-printer n4e0c@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" n4e0c@e))) (n4e0e@n4e09 (lambda () (raise-continuable n4e0c@e)))))))))) (lambda () ((letrec ((n4e10@loop (lambda (n4e12@line n4e13@accum) ((lambda (n4e17@parentheses-ok? n4e19@eval-string-print) (begin (set! n4e17@parentheses-ok? (lambda (n4e1e@text) ((letrec ((n4e20@loop (lambda (n4e22@chars n4e23@p0 n4e24@p1) (if (null? n4e22@chars) (= '0 n4e23@p0 n4e24@p1) ((lambda (n4e28@t) (if (memv n4e28@t '(#\()) (n4e20@loop (cdr n4e22@chars) (+ n4e23@p0 '1) n4e24@p1) (if (memv n4e28@t '(#\))) (n4e20@loop (cdr n4e22@chars) (- n4e23@p0 '1) n4e24@p1) (if (memv n4e28@t '(#\[)) (n4e20@loop (cdr n4e22@chars) n4e23@p0 (+ n4e24@p1 '1)) (if (memv n4e28@t '(#\])) (n4e20@loop (cdr n4e22@chars) n4e23@p0 (- n4e24@p1 '1)) (n4e20@loop (cdr n4e22@chars) n4e23@p0 n4e24@p1)))))) (car n4e22@chars)))))) n4e20@loop) (string->list n4e1e@text) '0 '0))) (set! n4e19@eval-string-print (lambda (n4e1c@text) (if (not (or (string=? '"\n" n4e1c@text) (= '0 (string-length n4e1c@text)))) (write (n4d77@eval-top-level (call-with-port (open-string-input-port n4e1c@text) read))) (void)))) (if (eof-object? n4e12@line) (begin (n4e19@eval-string-print n4e13@accum) (exit)) ((lambda (n4e1a@current) (if (n4e17@parentheses-ok? n4e1a@current) (n4e19@eval-string-print n4e1a@current) (n4e10@loop (get-line (current-input-port)) n4e1a@current))) (string-append n4e13@accum n4e12@line))))) '#f '#f)))) n4e10@loop) (get-line (current-input-port)) '""))))))) (newline) (n4e07@rec)))) (n4e07@rec))) '#f))) (set! n4d6b@trace-printer (n2855@n277f@make-parameter write)) (set! n4d6d@command-line (n2855@n277f@make-parameter (get-command-line))) (set! n4d6f@local-library-path (lambda (n4e2a@filename) (cons (expand-path '".") (n2abd@n294c@library-path)))) (set! n4d71@load/args (lambda (n4e2c@filename . n4e2e@args) (begin (apply n4d81@load-r6rs-top-level n4e2c@filename 'load n4e2e@args) (void)))) (set! n4d73@load (lambda (n4e30@filename) (begin (apply n4d81@load-r6rs-top-level n4e30@filename 'load (n4d6d@command-line)) (void)))) (set! n4d75@ironscheme-build (lambda () (n4d73@load '"ironscheme-buildscript.ss"))) (set! n4d77@eval-top-level (lambda (n4e32@x) (n4987@n2f7f@eval n4e32@x (n499d@n2fab@interaction-environment)))) (set! n4d79@compile-system-libraries (lambda () (n4d77@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! n4d7b@compile (lambda (n4e34@filename) (n4d81@load-r6rs-top-level n4e34@filename 'compile))) (set! n4d7d@compile->closure (lambda (n4e36@filename) (n4d81@load-r6rs-top-level n4e36@filename 'closure))) (set! n4d7f@pre-compile-r6rs-file (lambda (n4e38@filename) (n4d81@load-r6rs-top-level n4e38@filename 'compile))) (set! n4d81@load-r6rs-top-level (lambda (n4e3a@filename n4e3b@how . n4e3e@args) ((lambda (n4e44@n4e41 n4e45@n4e43) ((lambda (n4e48@swap) (dynamic-wind n4e48@swap (lambda () ((lambda (n4e4a@x*) ((lambda (n4e4c@t) (if (memv n4e4c@t '(closure)) (n499c@n2fa9@pre-compile-r6rs-top-level n4e4a@x*) (if (memv n4e4c@t '(load)) ((lambda (n4e52@n4e4f n4e53@n4e51) ((lambda (n4e56@swap) (dynamic-wind n4e56@swap (lambda () ((n499b@n2fa7@compile-r6rs-top-level n4e4a@x*))) n4e56@swap)) (lambda () ((lambda (n4e58@t) (begin (n4e52@n4e4f n4e53@n4e51) (set! n4e53@n4e51 n4e58@t))) (n4e52@n4e4f))))) n4d6d@command-line (cons n4e3a@filename (car n4e3e@args))) (if (memv n4e4c@t '(compile)) (begin (n499b@n2fa7@compile-r6rs-top-level n4e4a@x*) (n2ac1@n2954@serialize-all n2850@n2775@serialize-library n28aa@n2863@compile-core-expr)) (if '#f '#f (void)))))) n4e3b@how)) (with-input-from-file n4e3a@filename (lambda () ((letrec ((n4e5a@f (lambda () ((lambda (n4e5c@x) (if (eof-object? n4e5c@x) '() (cons n4e5c@x (n4e5a@f)))) (n2848@n2765@read-annotated))))) n4e5a@f)))))) n4e48@swap)) (lambda () ((lambda (n4e5e@t) (begin (n4e44@n4e41 n4e45@n4e43) (set! n4e45@n4e43 n4e5e@t))) (n4e44@n4e41))))) n2abd@n294c@library-path (n4d6f@local-library-path n4e3a@filename)))) (set! n4d83@load-r6rs-top-level-sexp (lambda (n4e60@import-spec n4e61@thunk) ((lambda (n4e68@n4e65 n4e69@n4e67) ((lambda (n4e6c@swap) (dynamic-wind n4e6c@swap (lambda () ((lambda (n4e72@n4e6f n4e73@n4e71) ((lambda (n4e76@swap) (dynamic-wind n4e76@swap (lambda () (begin (display (list (cons 'import n4e60@import-spec) (list n4e61@thunk))) ((n499b@n2fa7@compile-r6rs-top-level (list (cons 'import n4e60@import-spec) (list n4e61@thunk)))))) n4e76@swap)) (lambda () ((lambda (n4e78@t) (begin (n4e72@n4e6f n4e73@n4e71) (set! n4e73@n4e71 n4e78@t))) (n4e72@n4e6f))))) n4d6d@command-line '())) n4e6c@swap)) (lambda () ((lambda (n4e7a@t) (begin (n4e68@n4e65 n4e69@n4e67) (set! n4e69@n4e67 n4e7a@t))) (n4e68@n4e65))))) n2abd@n294c@library-path (n4d6f@local-library-path '"")))) (begin (set! n4e90@n4d83@load-r6rs-top-level-sexp n4d83@load-r6rs-top-level-sexp) (set! n4e8f@n4d81@load-r6rs-top-level n4d81@load-r6rs-top-level) (set! n4e8e@n4d7f@pre-compile-r6rs-file n4d7f@pre-compile-r6rs-file) (set! n4e8d@n4d7d@compile->closure n4d7d@compile->closure) (set! n4e8c@n4d7b@compile n4d7b@compile) (set! n4e8b@n4d79@compile-system-libraries n4d79@compile-system-libraries) (set! n4e8a@n4d77@eval-top-level n4d77@eval-top-level) (set! n4e89@n4d75@ironscheme-build n4d75@ironscheme-build) (set! n4e88@n4d73@load n4d73@load) (set! n4e87@n4d71@load/args n4d71@load/args) (set! n4e86@n4d6f@local-library-path n4d6f@local-library-path) (set! n4e85@n4d6d@command-line n4d6d@command-line) (set! n4e84@n4d6b@trace-printer n4d6b@trace-printer) (set! n4e83@n4d69@repl n4d69@repl) (set! n4e82@n4d67@map-with-index n4d67@map-with-index) (set! n4e81@n4d65@record->field-alist n4d65@record->field-alist) (set! n4e80@n4d63@condition-printer n4d63@condition-printer) (set! n4e7f@n4d61@rpad n4d61@rpad) (set! n4e7e@n4d5f@for-each-with-index n4d5f@for-each-with-index) (set! n4e7d@n4d5d@parse-and-add-library-path n4d5d@parse-and-add-library-path) (set! n4e7c@n4d5b@add-library-path! n4d5b@add-library-path!) (n2ac2@n2956@current-precompiled-library-loader n2851@n2777@load-serialized-library) (set-symbol-value! 'load n4d73@load) (set-symbol-value! 'pre-compile-r6rs-file n4d7f@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs n4d77@eval-top-level) (set-symbol-value! 'int-env-syms n497e@n2f6d@interaction-environment-symbols) (set-symbol-value! 'expanded2core n28a9@n2861@expanded->core) (set-symbol-value! 'trace-printer n4d6b@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (n4d84@c) (condition (n4cb8@n4ac2@make-non-continuable-violation) (n4cae@n4aa9@make-who-condition 'raise) (n4c72@n4a0a@make-message-condition '"returned from non-continuable exception") (n4ca4@n4a8e@make-irritants-condition (list n4d84@c))))) (n4d5d@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (n4d5d@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (n4d5b@add-library-path! (string-append (mosh-executable-path) '"/lib")) (n4d5b@add-library-path! (string-append (current-directory) '"/lib"))) (n4d5b@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (n4d86@prefix) (n2abe@n294e@library-extensions (n4d86@prefix '".mosh" (n2abe@n294e@library-extensions)))) (lambda (n4d88@ext n4d89@ls) (append (map (lambda (n4d8c@x) (string-append n4d88@ext n4d8c@x)) n4d89@ls) n4d89@ls))) ((lambda (n4d8e@args n4d8f@port) ((lambda (n4d93@ref) (begin (set! n4d93@ref (lambda (n4d9e@rtd n4d9f@i n4da0@x) ((lambda (n4da4@val) (if (symbol? n4da4@val) (ungensym n4da4@val) n4da4@val)) ((record-accessor n4d9e@rtd n4d9f@i) n4da0@x)))) (with-exception-handler (lambda (n4d94@c) (if (condition? n4d94@c) (n4d63@condition-printer n4d94@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" n4d94@c))) (lambda () (if ((call/cc (lambda (n4d98@n4d96) (lambda () (with-exception-handler (lambda (n4d9a@c) ((call/cc (lambda (n4d9c@n4d97) (n4d98@n4d96 (lambda () (if '#t '#f (n4d9c@n4d97 (lambda () (raise-continuable n4d9a@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (display (n4d83@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk))) (if (null? n4d8e@args) (n4d69@repl) (n4d81@load-r6rs-top-level (car n4d8e@args) 'load (cdr n4d8e@args)))))))) '#f)) (n4d6d@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
