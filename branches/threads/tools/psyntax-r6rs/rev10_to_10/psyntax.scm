;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (q2769@read-annotated q276b@annotation-stripped q276d@annotation? q276f@annotation-source q2771@annotation-expression q2773@scm->fasl q2775@fasl-save q2777@fasl-load q2779@serialize-library q277b@load-serialized-library q277d@make-record-printer q277f@compile-core q2781@read-library-source-file q2783@make-parameter q27eb@file-options-spec) (begin (set! q2769@read-annotated read) (set! q276b@annotation-stripped (lambda (q27ec@x) (q2771@annotation-expression q27ec@x))) (set! q276d@annotation? (lambda (q27ee@x) (source-info q27ee@x))) (set! q276f@annotation-source (lambda (q27f0@x) (source-info q27f0@x))) (set! q2771@annotation-expression (lambda (q27f2@x) (if (pair? q27f2@x) (cons (car q27f2@x) (cdr q27f2@x)) (display '"line:46\n")))) (set! q2773@scm->fasl (lambda (q27f4@filename) (string-append q27f4@filename '".fasl"))) (set! q2775@fasl-save (lambda (q27f6@filename q27f7@obj) (call-with-port (open-file-output-port q27f6@filename) (lambda (q27fa@port) ((symbol-value 'fasl-write!) q27f7@obj q27fa@port))))) (set! q2777@fasl-load (lambda (q27fc@filename) (call-with-port (open-file-input-port q27fc@filename) (symbol-value 'fasl-read!)))) (set! q2779@serialize-library (lambda (q27fe@filename q27ff@obj) (begin (format '#t '"serialize-library ~a\n..." q27fe@filename) ((lambda (q2802@expanded2core) ((lambda (q2804@compile) ((lambda (q2806@code) ((lambda (q2808@pivot) ((lambda (q280a@visit) ((lambda () (begin (set-car! q2808@pivot q280a@visit) ((lambda (q280c@pivot) ((lambda (q280e@invoke) ((lambda () (set-car! q280c@pivot q280e@invoke)))) (q2804@compile (q2802@expanded2core (car q280c@pivot))))) (cdr q2808@pivot)))))) (q2804@compile (q2802@expanded2core (car q2808@pivot))))) (cddddr (cddddr q2806@code)))) q27ff@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (q2810@fasl-file) (begin (if (file-exists? q2810@fasl-file) (delete-file q2810@fasl-file) (void)) ((call/cc (lambda (q2814@q2812) (lambda () (with-exception-handler (lambda (q2816@c) ((call/cc (lambda (q2818@q2813) (q2814@q2812 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " q27fe@filename) (if (file-exists? q2810@fasl-file) (delete-file q2810@fasl-file) (void)) '#f) (q2818@q2813 (lambda () (raise-continuable q2816@c)))))))))) (lambda () (begin (q2775@fasl-save q2810@fasl-file q27ff@obj) (display '"OK\n")))))))))) (q2773@scm->fasl q27fe@filename))))) (set! q277b@load-serialized-library (lambda (q281a@filename q281b@obj) ((lambda (q281e@fasl-file) (if (and (file-exists? q281e@fasl-file) ((symbol-value 'file-newer?) q281e@fasl-file q281a@filename)) ((lambda (q2820@expanded2core) ((lambda (q2822@eval-compiled-core) ((lambda (q2824@code) ((lambda (q2826@pivot) ((lambda (q2828@visit) ((lambda (q282a@visit-proc) ((lambda () (begin (set-car! q2826@pivot q282a@visit-proc) ((lambda (q282c@pivot) ((lambda (q282e@invoke) ((lambda () (begin (set-car! q282c@pivot (lambda () (q2822@eval-compiled-core q282e@invoke))) (apply q281b@obj q2824@code))))) (car q282c@pivot))) (cdr q2826@pivot)) '#t)))) (lambda () (q2822@eval-compiled-core q2828@visit)))) (car q2826@pivot))) (cddddr (cddddr q2824@code)))) (q2777@fasl-load q281e@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (q2773@scm->fasl q281a@filename)))) (set! q277d@make-record-printer (lambda (q2830@name q2831@printer) (lambda q2834@x (begin (display '"record printer") (for-each display q2834@x))))) (set! q277f@compile-core (lambda q2836@x (apply error 'comile-core '"not implementated" q2836@x))) (set! q2781@read-library-source-file (lambda (q2838@file-name) (with-input-from-file q2838@file-name q2769@read-annotated))) (set! q2783@make-parameter (lambda q2848 ((lambda (q2849) (if (= q2849 '1) (apply (lambda (q283a@x) (q2783@make-parameter q283a@x (lambda (q283c@x) q283c@x))) q2848) (if (= q2849 '2) (apply (lambda (q283e@x q283f@fender) ((lambda (q2842@x) (lambda q2846 ((lambda (q2847) (if (= q2847 '0) (apply (lambda () q2842@x) q2846) (if (= q2847 '1) (apply (lambda (q2844@v) (set! q2842@x (q283f@fender q2844@v))) q2846) (error 'apply '"invalid arg count")))) (length q2846)))) (q283f@fender q283e@x))) q2848) (error 'apply '"invalid arg count")))) (length q2848)))) (set! q27eb@file-options-spec (lambda (q284a@x) q284a@x)) (begin (set! q285a@q27eb@file-options-spec q27eb@file-options-spec) (set! q2859@q2783@make-parameter q2783@make-parameter) (set! q2858@q2781@read-library-source-file q2781@read-library-source-file) (set! q2857@q277f@compile-core q277f@compile-core) (set! q2856@q277d@make-record-printer q277d@make-record-printer) (set! q2855@q277b@load-serialized-library q277b@load-serialized-library) (set! q2854@q2779@serialize-library q2779@serialize-library) (set! q2853@q2777@fasl-load q2777@fasl-load) (set! q2852@q2775@fasl-save q2775@fasl-save) (set! q2851@q2773@scm->fasl q2773@scm->fasl) (set! q2850@q2771@annotation-expression q2771@annotation-expression) (set! q284f@q276f@annotation-source q276f@annotation-source) (set! q284e@q276d@annotation? q276d@annotation?) (set! q284d@q276b@annotation-stripped q276b@annotation-stripped) (set! q284c@q2769@read-annotated q2769@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q285f@current-primitive-locations q2861@mutable? q2863@rewriter q2865@expanded->core q2867@compile-core-expr q2869@pretty-print q286b@compile-core-expr-to-port) (begin (set! q285f@current-primitive-locations (q2859@q2783@make-parameter (lambda (q286c@x) '#f) (lambda (q286e@p) q286e@p))) (set! q2861@mutable? (lambda (q2870@x) (or (pair? q2870@x) (vector? q2870@x) (hashtable? q2870@x)))) (set! q2863@rewriter (lambda (q2872@quote-hack?) ((lambda (q2875@f) (begin (set! q2875@f (lambda (q2876@x) (if (pair? q2876@x) ((lambda (q2878@t) (if (memv q2878@t '(quote)) (if (and q2872@quote-hack? (q2861@mutable? (cadr q2876@x))) ((lambda (q287a@g) (begin (set-symbol-value! q287a@g (cadr q2876@x)) q287a@g)) (gensym)) q2876@x) (if (memv q2878@t '(case-lambda)) (cons 'case-lambda (map (lambda (q287c@x) (cons (car q287c@x) (map q2875@f (cdr q287c@x)))) (cdr q2876@x))) (if (memv q2878@t '(lambda)) (cons* 'lambda (cadr q2876@x) (map q2875@f (cddr q2876@x))) (if (memv q2878@t '(letrec)) ((lambda (q287e@bindings q287f@body*) ((lambda (q2882@lhs* q2883@rhs*) (cons* 'letrec (map list q2882@lhs* (map q2875@f q2883@rhs*)) (map q2875@f q287f@body*))) (map car q287e@bindings) (map cadr q287e@bindings))) (cadr q2876@x) (cddr q2876@x)) (if (memv q2878@t '(letrec*)) ((lambda (q2886@bindings q2887@body*) ((lambda (q288a@lhs* q288b@rhs*) (cons* 'letrec* (map list q288a@lhs* (map q2875@f q288b@rhs*)) (map q2875@f q2887@body*))) (map car q2886@bindings) (map cadr q2886@bindings))) (cadr q2876@x) (cddr q2876@x)) (if (memv q2878@t '(library-letrec*)) ((lambda (q288e@name q288f@x) ((lambda (q2892@bindings q2893@body*) ((lambda (q2896@lhs* q2897@lhs** q2898@rhs*) (cons* 'library-letrec* q288e@name (map list q2896@lhs* q2897@lhs** (map q2875@f q2898@rhs*)) (map q2875@f q2893@body*))) (map car q2892@bindings) (map cadr q2892@bindings) (map caddr q2892@bindings))) (cadr q288f@x) (cddr q288f@x))) (cadr q2876@x) (cdr q2876@x)) (if (memv q2878@t '(begin)) (cons 'begin (map q2875@f (cdr q2876@x))) (if (memv q2878@t '(set!)) (list 'set! (cadr q2876@x) (q2875@f (caddr q2876@x))) (if (memv q2878@t '(primitive)) ((lambda (q289c@op) ((lambda (q289e@t) (if q289e@t ((lambda (q28a0@loc) q28a0@loc) q289e@t) q289c@op)) ((q285f@current-primitive-locations) q289c@op))) (cadr q2876@x)) (if (memv q2878@t '(define)) q2876@x (if (list? q2876@x) (map q2875@f q2876@x) (error 'rewrite '"invalid form ~s ~s" q2876@x (list? q2876@x)))))))))))))) (car q2876@x)) q2876@x))) q2875@f)) '#f))) (set! q2865@expanded->core (lambda (q28a2@x) ((q2863@rewriter '#f) q28a2@x))) (set! q2867@compile-core-expr (lambda (q28a4@x) ((q2863@rewriter '#f) q28a4@x))) (set! q2869@pretty-print write) (set! q286b@compile-core-expr-to-port (lambda (q28a6@x q28a7@p) (q2869@pretty-print ((q2863@rewriter '#f) q28a6@x) q28a7@p))) (begin (set! q28b0@q286b@compile-core-expr-to-port q286b@compile-core-expr-to-port) (set! q28af@q2869@pretty-print q2869@pretty-print) (set! q28ae@q2867@compile-core-expr q2867@compile-core-expr) (set! q28ad@q2865@expanded->core q2865@expanded->core) (set! q28ac@q2863@rewriter q2863@rewriter) (set! q28ab@q2861@mutable? q2861@mutable?) (set! q28aa@q285f@current-primitive-locations q285f@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (q28ff@make-collection q2901@current-library-collection q2907@q2902 q2909@q2904 q290b@q2903 q290e@library? q2910@make-library q2912@library-id q2914@library-name q2916@library-version q2918@library-imp* q291a@library-vis* q291c@library-inv* q291e@library-subst q2920@library-env q2922@library-visit-state q2924@library-invoke-state q2926@library-visit-code q2928@library-invoke-code q292a@library-visible? q292c@library-source-file-name q292e@set-library-id! q2930@set-library-name! q2932@set-library-version! q2934@set-library-imp*! q2936@set-library-vis*! q2938@set-library-inv*! q293a@set-library-subst! q293c@set-library-env! q293e@set-library-visit-state! q2940@set-library-invoke-state! q2942@set-library-visit-code! q2944@set-library-invoke-code! q2946@set-library-visible?! q2948@set-library-source-file-name! q294a@rp q294c@find-dependencies q294e@find-library-by q2950@library-path q2952@library-extensions q2954@library-name->file-name q2956@file-locator q2958@serialize-all q295a@current-precompiled-library-loader q295c@try-load-from-file q295e@library-loader q2960@current-library-expander q2962@external-pending-libraries q2964@find-external-library q2966@find-library-by-name q2968@library-exists? q296a@find-library-by-spec/die q296c@label->binding-table q296e@install-library-record q2970@install-library q2972@imported-label->binding q2974@invoke-library q2976@visit-library q2978@invoke-library-by-spec q297a@installed-libraries q297c@library-spec) (begin (set! q28ff@make-collection (lambda () ((lambda (q297d@set) ((lambda (q2980@set-cons) (begin (set! q2980@set-cons (lambda (q2985@x q2986@ls) (if (memq q2985@x q2986@ls) q2986@ls (cons q2985@x q2986@ls)))) (lambda q2983 ((lambda (q2984) (if (= q2984 '0) (apply (lambda () q297d@set) q2983) (if (= q2984 '1) (apply (lambda (q2981@x) (set! q297d@set (q2980@set-cons q2981@x q297d@set))) q2983) (error 'apply '"invalid arg count")))) (length q2983))))) '#f)) '()))) (set! q2901@current-library-collection (q2859@q2783@make-parameter (q28ff@make-collection) (lambda (q2989@x) (begin (if (not (procedure? q2989@x)) (assertion-violation 'current-library-collection '"not a procedure" q2989@x) (void)) q2989@x)))) (set! q2907@q2902 (make-record-type-descriptor 'library '#f 'q2905 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! q2909@q2904 '#f) (set! q290b@q2903 (make-record-constructor-descriptor q2907@q2902 '#f q2909@q2904)) (set! q290e@library? (record-predicate q2907@q2902)) (set! q2910@make-library (record-constructor q290b@q2903)) (set! q2912@library-id (record-accessor q2907@q2902 '0)) (set! q2914@library-name (record-accessor q2907@q2902 '1)) (set! q2916@library-version (record-accessor q2907@q2902 '2)) (set! q2918@library-imp* (record-accessor q2907@q2902 '3)) (set! q291a@library-vis* (record-accessor q2907@q2902 '4)) (set! q291c@library-inv* (record-accessor q2907@q2902 '5)) (set! q291e@library-subst (record-accessor q2907@q2902 '6)) (set! q2920@library-env (record-accessor q2907@q2902 '7)) (set! q2922@library-visit-state (record-accessor q2907@q2902 '8)) (set! q2924@library-invoke-state (record-accessor q2907@q2902 '9)) (set! q2926@library-visit-code (record-accessor q2907@q2902 '10)) (set! q2928@library-invoke-code (record-accessor q2907@q2902 '11)) (set! q292a@library-visible? (record-accessor q2907@q2902 '12)) (set! q292c@library-source-file-name (record-accessor q2907@q2902 '13)) (set! q292e@set-library-id! (record-mutator q2907@q2902 '0)) (set! q2930@set-library-name! (record-mutator q2907@q2902 '1)) (set! q2932@set-library-version! (record-mutator q2907@q2902 '2)) (set! q2934@set-library-imp*! (record-mutator q2907@q2902 '3)) (set! q2936@set-library-vis*! (record-mutator q2907@q2902 '4)) (set! q2938@set-library-inv*! (record-mutator q2907@q2902 '5)) (set! q293a@set-library-subst! (record-mutator q2907@q2902 '6)) (set! q293c@set-library-env! (record-mutator q2907@q2902 '7)) (set! q293e@set-library-visit-state! (record-mutator q2907@q2902 '8)) (set! q2940@set-library-invoke-state! (record-mutator q2907@q2902 '9)) (set! q2942@set-library-visit-code! (record-mutator q2907@q2902 '10)) (set! q2944@set-library-invoke-code! (record-mutator q2907@q2902 '11)) (set! q2946@set-library-visible?! (record-mutator q2907@q2902 '12)) (set! q2948@set-library-source-file-name! (record-mutator q2907@q2902 '13)) (set! q294a@rp (q2856@q277d@make-record-printer 'library (lambda (q298b@x q298c@p q298d@wr) (begin (if (not (q290e@library? q298b@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (q2916@library-version q298b@x)) (q2914@library-name q298b@x) (append (q2914@library-name q298b@x) (list (q2916@library-version q298b@x))))) q298c@p))))) (set! q294c@find-dependencies (lambda (q2991@ls) (if (null? q2991@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! q294e@find-library-by (lambda (q2993@pred) ((letrec ((q2995@f (lambda (q2997@ls) (if (null? q2997@ls) '#f (if (q2993@pred (car q2997@ls)) (car q2997@ls) (q2995@f (cdr q2997@ls))))))) q2995@f) ((q2901@current-library-collection))))) (set! q2950@library-path (q2859@q2783@make-parameter '(".") (lambda (q2999@x) (if (and (list? q2999@x) (for-all string? q2999@x)) (map (lambda (q299b@x) q299b@x) q2999@x) (assertion-violation 'library-path '"not a list of strings" q2999@x))))) (set! q2952@library-extensions (q2859@q2783@make-parameter '(".sls" ".ss" ".scm") (lambda (q299d@x) (if (and (list? q299d@x) (for-all string? q299d@x)) (map (lambda (q299f@x) q299f@x) q299d@x) (assertion-violation 'library-extensions '"not a list of strings" q299d@x))))) (set! q2954@library-name->file-name (lambda (q29a1@x) (call-with-values (lambda () (open-string-output-port)) (lambda (q29a7@q29a4 q29a8@q29a6) ((lambda (q29ab@extract q29ac@p) ((lambda (q29b0@display-hex) (begin (set! q29b0@display-hex (lambda (q29b9@n) (if (<= '0 q29b9@n '9) (display q29b9@n q29ac@p) (display (integer->char (+ (char->integer '#\a) (- q29b9@n '10))) q29ac@p)))) (begin ((letrec ((q29b1@f (lambda (q29b3@ls) (if (not (null? q29b3@ls)) (begin (display '"/" q29ac@p) (for-each (lambda (q29b5@c) (if (or (char<=? '#\a q29b5@c '#\z) (char<=? '#\A q29b5@c '#\Z) (char<=? '#\0 q29b5@c '#\9) (memv q29b5@c '(#\- #\. #\_ #\~))) (display q29b5@c q29ac@p) (begin (display '"%" q29ac@p) ((lambda (q29b7@n) (begin (q29b0@display-hex (quotient q29b7@n '16)) (q29b0@display-hex (remainder q29b7@n '16)))) (char->integer q29b5@c))))) (string->list (symbol->string (car q29b3@ls)))) (q29b1@f (cdr q29b3@ls))) (void))))) q29b1@f) q29a1@x) (q29ab@extract)))) '#f)) q29a8@q29a6 q29a7@q29a4))))) (set! q2956@file-locator (q2859@q2783@make-parameter (lambda (q29bb@x) ((lambda (q29bd@str) ((letrec ((q29bf@f (lambda (q29c1@ls q29c2@exts q29c3@failed-list) (if (null? q29c1@ls) ((lambda () ((lambda (q29cf@q29ca q29d1@q29cc q29d3@q29cb q29d6@q29c9 q29d8@make-library-resolution-condition q29da@q29c7 q29dc@q29c8 q29de@library-resolution-condition? q29e0@condition-library q29e2@condition-files) (begin (set! q29cf@q29ca (make-record-type-descriptor '&library-resolution q4c70@q49b7@&condition-rtd 'q29cd '#f '#f '#((immutable library) (immutable files)))) (set! q29d1@q29cc '#f) (set! q29d3@q29cb (make-record-constructor-descriptor q29cf@q29ca q4c71@q49b9@&condition-rcd q29d1@q29cc)) (set! q29d6@q29c9 (record-predicate q29cf@q29ca)) (set! q29d8@make-library-resolution-condition (record-constructor q29d3@q29cb)) (set! q29da@q29c7 (record-accessor q29cf@q29ca '0)) (set! q29dc@q29c8 (record-accessor q29cf@q29ca '1)) (set! q29de@library-resolution-condition? (condition-predicate q29cf@q29ca)) (set! q29e0@condition-library (condition-accessor q29cf@q29ca q29da@q29c7)) (set! q29e2@condition-files (condition-accessor q29cf@q29ca q29dc@q29c8)) (raise (condition (q4c90@q4a51@make-error) (q4cb2@q4aad@make-who-condition 'expander) (q4c76@q4a0e@make-message-condition '"cannot locate library in library-path") (q29d8@make-library-resolution-condition q29bb@x (reverse q29c3@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? q29c2@exts) (q29bf@f (cdr q29c1@ls) (q2952@library-extensions) q29c3@failed-list) ((lambda (q29e3@name) (if (file-exists? q29e3@name) q29e3@name (q29bf@f q29c1@ls (cdr q29c2@exts) (cons q29e3@name q29c3@failed-list)))) (string-append (car q29c1@ls) q29bd@str (car q29c2@exts)))))))) q29bf@f) (q2950@library-path) (q2952@library-extensions) '())) (q2954@library-name->file-name q29bb@x))) (lambda (q29e5@f) (if (procedure? q29e5@f) q29e5@f (assertion-violation 'file-locator '"not a procedure" q29e5@f))))) (set! q2958@serialize-all (lambda (q29e7@serialize q29e8@compile) ((lambda (q29ec@library-desc) (begin (set! q29ec@library-desc (lambda (q29ef@x) (list (q2912@library-id q29ef@x) (q2914@library-name q29ef@x)))) (for-each (lambda (q29ed@x) (if (q292c@library-source-file-name q29ed@x) (q29e7@serialize (q292c@library-source-file-name q29ed@x) (list (q2912@library-id q29ed@x) (q2914@library-name q29ed@x) (q2916@library-version q29ed@x) (map q29ec@library-desc (q2918@library-imp* q29ed@x)) (map q29ec@library-desc (q291a@library-vis* q29ed@x)) (map q29ec@library-desc (q291c@library-inv* q29ed@x)) (q291e@library-subst q29ed@x) (q2920@library-env q29ed@x) (q29e8@compile (q2926@library-visit-code q29ed@x)) (q29e8@compile (q2928@library-invoke-code q29ed@x)) (q292a@library-visible? q29ed@x))) (void))) ((q2901@current-library-collection))))) '#f))) (set! q295a@current-precompiled-library-loader (q2859@q2783@make-parameter (lambda (q29f1@filename q29f2@sk) '#f))) (set! q295c@try-load-from-file (lambda (q29f5@filename) ((q295a@current-precompiled-library-loader) q29f5@filename (lambda q2a1b ((lambda (q2a1c) (if (= q2a1c '11) (apply (lambda (q29f7@id q29f8@name q29f9@ver q29fa@imp* q29fb@vis* q29fc@inv* q29fd@exp-subst q29fe@exp-env q29ff@visit-proc q2a00@invoke-proc q2a01@visible?) ((letrec ((q2a0d@f (lambda (q2a0f@deps) (if (null? q2a0f@deps) (begin (q2970@install-library q29f7@id q29f8@name q29f9@ver q29fa@imp* q29fb@vis* q29fc@inv* q29fd@exp-subst q29fe@exp-env q29ff@visit-proc q2a00@invoke-proc '#f '#f q2a01@visible? '#f) '#t) ((lambda (q2a11@d) ((lambda (q2a13@label q2a14@dname) ((lambda (q2a17@l) (if (and (q290e@library? q2a17@l) (eq? q2a13@label (q2912@library-id q2a17@l))) (q2a0d@f (cdr q2a0f@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" q29f8@name q2a14@dname q29f5@filename q2a17@l q2a13@label (q2912@library-id q2a17@l)) '#f))) (q2966@find-library-by-name q2a14@dname))) (car q2a11@d) (cadr q2a11@d))) (car q2a0f@deps)))))) q2a0d@f) (append q29fa@imp* q29fb@vis* q29fc@inv*))) q2a1b) (if (>= q2a1c '0) (apply (lambda q2a19@others '#f) q2a1b) (error 'apply '"invalid arg count")))) (length q2a1b)))))) (set! q295e@library-loader (q2859@q2783@make-parameter (lambda (q2a1d@x) ((lambda (q2a1f@file-name) (if (not q2a1f@file-name) (assertion-violation '#f '"cannot file library" q2a1d@x) (or (q295c@try-load-from-file q2a1f@file-name) ((q2960@current-library-expander) (q2858@q2781@read-library-source-file q2a1f@file-name) q2a1f@file-name (lambda (q2a21@name) (if (not (fast-equal? q2a21@name q2a1d@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (q2a27@q2a24 q2a28@q2a26) ((lambda (q2a2b@e q2a2c@p) (begin (display '"expected to find library " q2a2c@p) (write q2a1d@x q2a2c@p) (display '" in file " q2a2c@p) (display q2a1f@file-name q2a2c@p) (display '", found " q2a2c@p) (write q2a21@name q2a2c@p) (display '" instead" q2a2c@p) (q2a2b@e))) q2a28@q2a26 q2a27@q2a24)))) (void))))))) ((q2956@file-locator) q2a1d@x))) (lambda (q2a2f@f) (if (procedure? q2a2f@f) q2a2f@f (assertion-violation 'library-locator '"not a procedure" q2a2f@f))))) (set! q2960@current-library-expander (q2859@q2783@make-parameter (lambda (q2a31@x) (assertion-violation 'library-expander '"not initialized")) (lambda (q2a33@f) (if (procedure? q2a33@f) q2a33@f (assertion-violation 'library-expander '"not a procedure" q2a33@f))))) (set! q2962@external-pending-libraries (q2859@q2783@make-parameter '())) (set! q2964@find-external-library (lambda (q2a35@name) (begin (if (member q2a35@name (q2962@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" q2a35@name) (void)) ((lambda (q2a3b@q2a38 q2a3c@q2a3a) ((lambda (q2a3f@swap) (dynamic-wind q2a3f@swap (lambda () (begin ((q295e@library-loader) q2a35@name) (or (q294e@find-library-by (lambda (q2a41@x) (fast-equal? (q2914@library-name q2a41@x) q2a35@name))) (assertion-violation '#f '"handling external library did not yield the correct library" q2a35@name)))) q2a3f@swap)) (lambda () ((lambda (q2a43@t) (begin (q2a3b@q2a38 q2a3c@q2a3a) (set! q2a3c@q2a3a q2a43@t))) (q2a3b@q2a38))))) q2962@external-pending-libraries (cons q2a35@name (q2962@external-pending-libraries)))))) (set! q2966@find-library-by-name (lambda (q2a45@name) (or (q294e@find-library-by (lambda (q2a47@x) (fast-equal? (q2914@library-name q2a47@x) q2a45@name))) (q2964@find-external-library q2a45@name)))) (set! q2968@library-exists? (lambda (q2a49@name) (and (q294e@find-library-by (lambda (q2a4b@x) (fast-equal? (q2914@library-name q2a4b@x) q2a49@name))) '#t))) (set! q296a@find-library-by-spec/die (lambda (q2a4d@spec) ((lambda (q2a4f@id) (or (q294e@find-library-by (lambda (q2a51@x) (eq? q2a4f@id (q2912@library-id q2a51@x)))) (assertion-violation '#f '"cannot find library with required spec" q2a4d@spec))) (car q2a4d@spec)))) (set! q296c@label->binding-table (make-eq-hashtable)) (set! q296e@install-library-record (lambda (q2a53@lib) (begin ((lambda (q2a55@exp-env) (for-each (lambda (q2a57@x) ((lambda (q2a59@label q2a5a@binding) ((lambda (q2a5d@binding) (begin (if (hashtable-ref q296c@label->binding-table q2a59@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" q2a59@label (hashtable-ref q296c@label->binding-table q2a59@label '#f) q2a5d@binding) (exit)) (void)) (hashtable-set! q296c@label->binding-table q2a59@label q2a5d@binding))) ((lambda (q2a5f@t) (if (memv q2a5f@t '(global)) (cons 'global (cons q2a53@lib (cdr q2a5a@binding))) (if (memv q2a5f@t '(global-macro)) (cons 'global-macro (cons q2a53@lib (cdr q2a5a@binding))) (if (memv q2a5f@t '(global-macro!)) (cons 'global-macro! (cons q2a53@lib (cdr q2a5a@binding))) q2a5a@binding)))) (car q2a5a@binding)))) (car q2a57@x) (cdr q2a57@x))) q2a55@exp-env)) (q2920@library-env q2a53@lib)) ((q2901@current-library-collection) q2a53@lib)))) (set! q2970@install-library (lambda (q2a61@id q2a62@name q2a63@ver q2a64@imp* q2a65@vis* q2a66@inv* q2a67@exp-subst q2a68@exp-env q2a69@visit-proc q2a6a@invoke-proc q2a6b@visit-code q2a6c@invoke-code q2a6d@visible? q2a6e@source-file-name) ((lambda (q2a7d@imp-lib* q2a7e@vis-lib* q2a7f@inv-lib*) (begin (if (not (and (symbol? q2a61@id) (list? q2a62@name) (list? q2a63@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" q2a61@id q2a62@name q2a63@ver) (void)) (if (q2968@library-exists? q2a62@name) (assertion-violation 'install-library '"library is already installed" q2a62@name) (void)) ((lambda (q2a83@lib) (q296e@install-library-record q2a83@lib)) (q2910@make-library q2a61@id q2a62@name q2a63@ver q2a7d@imp-lib* q2a7e@vis-lib* q2a7f@inv-lib* q2a67@exp-subst q2a68@exp-env q2a69@visit-proc q2a6a@invoke-proc q2a6b@visit-code q2a6c@invoke-code q2a6d@visible? q2a6e@source-file-name)))) (map q296a@find-library-by-spec/die q2a64@imp*) (map q296a@find-library-by-spec/die q2a65@vis*) (map q296a@find-library-by-spec/die q2a66@inv*)))) (set! q2972@imported-label->binding (lambda (q2a85@lab) (hashtable-ref q296c@label->binding-table q2a85@lab '#f))) (set! q2974@invoke-library (lambda (q2a87@lib) ((lambda (q2a89@invoke) (if (procedure? q2a89@invoke) (begin (q2940@set-library-invoke-state! q2a87@lib (lambda () (assertion-violation 'invoke '"circularity detected" q2a87@lib))) (for-each q2974@invoke-library (q291c@library-inv* q2a87@lib)) (q2940@set-library-invoke-state! q2a87@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" q2a87@lib))) (q2a89@invoke) (q2940@set-library-invoke-state! q2a87@lib '#t)) (void))) (q2924@library-invoke-state q2a87@lib)))) (set! q2976@visit-library (lambda (q2a8b@lib) ((lambda (q2a8d@visit) (if (procedure? q2a8d@visit) (begin (q293e@set-library-visit-state! q2a8b@lib (lambda () (assertion-violation 'visit '"circularity detected" q2a8b@lib))) (for-each q2974@invoke-library (q291a@library-vis* q2a8b@lib)) (q293e@set-library-visit-state! q2a8b@lib (lambda () (assertion-violation 'invoke '"first visit did not return" q2a8b@lib))) (q2a8d@visit) (q293e@set-library-visit-state! q2a8b@lib '#t)) (void))) (q2922@library-visit-state q2a8b@lib)))) (set! q2978@invoke-library-by-spec (lambda (q2a8f@spec) (q2974@invoke-library (q296a@find-library-by-spec/die q2a8f@spec)))) (set! q297a@installed-libraries (lambda q2a97 ((lambda (q2a98) (if (= q2a98 '1) (apply (lambda (q2a91@all?) ((letrec ((q2a93@f (lambda (q2a95@ls) (if (null? q2a95@ls) '() (if (or q2a91@all? (q292a@library-visible? (car q2a95@ls))) (cons (car q2a95@ls) (q2a93@f (cdr q2a95@ls))) (q2a93@f (cdr q2a95@ls))))))) q2a93@f) ((q2901@current-library-collection)))) q2a97) (if (= q2a98 '0) (apply (lambda () (q297a@installed-libraries '#f)) q2a97) (error 'apply '"invalid arg count")))) (length q2a97)))) (set! q297c@library-spec (lambda (q2a99@x) (begin (if (not (q290e@library? q2a99@x)) (assertion-violation 'library-spec '"not a library" q2a99@x) (void)) (list (q2912@library-id q2a99@x) (q2914@library-name q2a99@x) (q2916@library-version q2a99@x))))) (begin (set! q2ad7@q297c@library-spec q297c@library-spec) (set! q2ad6@q297a@installed-libraries q297a@installed-libraries) (set! q2ad5@q2978@invoke-library-by-spec q2978@invoke-library-by-spec) (set! q2ad4@q2976@visit-library q2976@visit-library) (set! q2ad3@q2974@invoke-library q2974@invoke-library) (set! q2ad2@q2972@imported-label->binding q2972@imported-label->binding) (set! q2ad1@q2970@install-library q2970@install-library) (set! q2ad0@q296e@install-library-record q296e@install-library-record) (set! q2acf@q296c@label->binding-table q296c@label->binding-table) (set! q2ace@q296a@find-library-by-spec/die q296a@find-library-by-spec/die) (set! q2acd@q2968@library-exists? q2968@library-exists?) (set! q2acc@q2966@find-library-by-name q2966@find-library-by-name) (set! q2acb@q2964@find-external-library q2964@find-external-library) (set! q2aca@q2962@external-pending-libraries q2962@external-pending-libraries) (set! q2ac9@q2960@current-library-expander q2960@current-library-expander) (set! q2ac8@q295e@library-loader q295e@library-loader) (set! q2ac7@q295c@try-load-from-file q295c@try-load-from-file) (set! q2ac6@q295a@current-precompiled-library-loader q295a@current-precompiled-library-loader) (set! q2ac5@q2958@serialize-all q2958@serialize-all) (set! q2ac4@q2956@file-locator q2956@file-locator) (set! q2ac3@q2954@library-name->file-name q2954@library-name->file-name) (set! q2ac2@q2952@library-extensions q2952@library-extensions) (set! q2ac1@q2950@library-path q2950@library-path) (set! q2ac0@q294e@find-library-by q294e@find-library-by) (set! q2abf@q294c@find-dependencies q294c@find-dependencies) (set! q2abe@q294a@rp q294a@rp) (set! q2abd@q2948@set-library-source-file-name! q2948@set-library-source-file-name!) (set! q2abc@q2946@set-library-visible?! q2946@set-library-visible?!) (set! q2abb@q2944@set-library-invoke-code! q2944@set-library-invoke-code!) (set! q2aba@q2942@set-library-visit-code! q2942@set-library-visit-code!) (set! q2ab9@q2940@set-library-invoke-state! q2940@set-library-invoke-state!) (set! q2ab8@q293e@set-library-visit-state! q293e@set-library-visit-state!) (set! q2ab7@q293c@set-library-env! q293c@set-library-env!) (set! q2ab6@q293a@set-library-subst! q293a@set-library-subst!) (set! q2ab5@q2938@set-library-inv*! q2938@set-library-inv*!) (set! q2ab4@q2936@set-library-vis*! q2936@set-library-vis*!) (set! q2ab3@q2934@set-library-imp*! q2934@set-library-imp*!) (set! q2ab2@q2932@set-library-version! q2932@set-library-version!) (set! q2ab1@q2930@set-library-name! q2930@set-library-name!) (set! q2ab0@q292e@set-library-id! q292e@set-library-id!) (set! q2aaf@q292c@library-source-file-name q292c@library-source-file-name) (set! q2aae@q292a@library-visible? q292a@library-visible?) (set! q2aad@q2928@library-invoke-code q2928@library-invoke-code) (set! q2aac@q2926@library-visit-code q2926@library-visit-code) (set! q2aab@q2924@library-invoke-state q2924@library-invoke-state) (set! q2aaa@q2922@library-visit-state q2922@library-visit-state) (set! q2aa9@q2920@library-env q2920@library-env) (set! q2aa8@q291e@library-subst q291e@library-subst) (set! q2aa7@q291c@library-inv* q291c@library-inv*) (set! q2aa6@q291a@library-vis* q291a@library-vis*) (set! q2aa5@q2918@library-imp* q2918@library-imp*) (set! q2aa4@q2916@library-version q2916@library-version) (set! q2aa3@q2914@library-name q2914@library-name) (set! q2aa2@q2912@library-id q2912@library-id) (set! q2aa1@q2910@make-library q2910@make-library) (set! q2aa0@q290e@library? q290e@library?) (set! q2a9f@q290b@q2903 q290b@q2903) (set! q2a9e@q2909@q2904 q2909@q2904) (set! q2a9d@q2907@q2902 q2907@q2902) (set! q2a9c@q2901@current-library-collection q2901@current-library-collection) (set! q2a9b@q28ff@make-collection q28ff@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q2ada@build-global-define q2b4b@build-lambda q2b4d@build-case-lambda q2b4f@build-let q2b7d@build-sequence q2b7f@build-void q2b81@build-letrec q2b83@build-letrec* q2b85@build-library-letrec* q2b87@build-receive) (begin (set! q2ada@build-global-define (lambda (q2b88@x) (q2b7f@build-void))) (set! q2b4b@build-lambda (lambda (q2b8a@ae q2b8b@vars q2b8c@exp) (list 'lambda q2b8b@vars q2b8c@exp))) (set! q2b4d@build-case-lambda (lambda (q2b90@ae q2b91@vars* q2b92@exp*) ((lambda (q2b97@build-error q2b99@build-pred q2b9b@build-apply q2b9d@expand-case-lambda) (begin (set! q2b97@build-error (lambda (q2bce@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! q2b99@build-pred (lambda (q2bb6@ae q2bb7@n q2bb8@vars) (call-with-values (lambda () ((letrec ((q2bc0@f (lambda (q2bc2@vars q2bc3@count) (if (pair? q2bc2@vars) (q2bc0@f (cdr q2bc2@vars) (+ q2bc3@count '1)) (if (null? q2bc2@vars) (values q2bc3@count '=) (values q2bc3@count '>=)))))) q2bc0@f) q2bb8@vars '0)) (lambda (q2bc6@q2bbd q2bc7@q2bbf) ((lambda (q2bca@pred q2bcb@count) (list (list 'primitive q2bca@pred) q2bb7@n (list 'quote q2bcb@count))) q2bc7@q2bbf q2bc6@q2bbd))))) (set! q2b9b@build-apply (lambda (q2bae@ae q2baf@g q2bb0@vars q2bb1@exp) (list '(primitive apply) (q2b4b@build-lambda q2bae@ae q2bb0@vars q2bb1@exp) q2baf@g))) (set! q2b9d@expand-case-lambda (lambda (q2b9e@ae q2b9f@vars q2ba0@exp*) ((lambda (q2ba4@g q2ba5@n) (list 'lambda q2ba4@g (q2b4f@build-let q2b9e@ae (list q2ba5@n) (list (list '(primitive length) q2ba4@g)) ((letrec ((q2ba8@f (lambda (q2baa@vars* q2bab@exp*) (if (null? q2baa@vars*) (q2b97@build-error q2b9e@ae) (list 'if (q2b99@build-pred q2b9e@ae q2ba5@n (car q2baa@vars*)) (q2b9b@build-apply q2b9e@ae q2ba4@g (car q2baa@vars*) (car q2bab@exp*)) (q2ba8@f (cdr q2baa@vars*) (cdr q2bab@exp*))))))) q2ba8@f) q2b91@vars* q2ba0@exp*)))) (gensym) (gensym)))) (if (= (length q2b92@exp*) '1) (q2b4b@build-lambda q2b90@ae (car q2b91@vars*) (car q2b92@exp*)) (q2b9d@expand-case-lambda q2b90@ae q2b91@vars* q2b92@exp*)))) '#f '#f '#f '#f))) (set! q2b4f@build-let (lambda (q2bd0@ae q2bd1@lhs* q2bd2@rhs* q2bd3@body) (cons (q2b4b@build-lambda q2bd0@ae q2bd1@lhs* q2bd3@body) q2bd2@rhs*))) (set! q2b7d@build-sequence (lambda (q2bd8@ae q2bd9@exps) ((letrec ((q2bdc@loop (lambda (q2bde@exps) (if (null? (cdr q2bde@exps)) (car q2bde@exps) (if (equal? (car q2bde@exps) (q2b7f@build-void)) (q2bdc@loop (cdr q2bde@exps)) (cons 'begin q2bde@exps)))))) q2bdc@loop) q2bd9@exps))) (set! q2b7f@build-void (lambda () '((primitive void)))) (set! q2b81@build-letrec (lambda (q2be0@ae q2be1@vars q2be2@val-exps q2be3@body-exp) (if (null? q2be1@vars) q2be3@body-exp (list 'letrec (map list q2be1@vars q2be2@val-exps) q2be3@body-exp)))) (set! q2b83@build-letrec* (lambda (q2be8@ae q2be9@vars q2bea@val-exps q2beb@body-exp) (if (null? q2be9@vars) q2beb@body-exp (q2b4f@build-let q2be8@ae q2be9@vars (map (lambda (q2bf0@x) (list 'quote '#f)) q2be9@vars) (q2b7d@build-sequence q2be8@ae (append (map (lambda (q2bf2@lhs q2bf3@rhs) (list 'set! q2bf2@lhs q2bf3@rhs)) q2be9@vars q2bea@val-exps) (list q2beb@body-exp))))))) (set! q2b85@build-library-letrec* (lambda (q2bf6@ae q2bf7@name q2bf8@vars q2bf9@locs q2bfa@val-exps q2bfb@body-exp) (list 'library-letrec* q2bf7@name (map list q2bf8@vars q2bf9@locs q2bfa@val-exps) q2bfb@body-exp))) (set! q2b87@build-receive (lambda (q2c02@ae q2c03@vars q2c04@producer q2c05@body*) (begin (display '"************** in ") (cons 'receive (cons q2c03@vars (cons q2c04@producer q2c05@body*)))))) (begin (set! q2c13@q2b87@build-receive q2b87@build-receive) (set! q2c12@q2b85@build-library-letrec* q2b85@build-library-letrec*) (set! q2c11@q2b83@build-letrec* q2b83@build-letrec*) (set! q2c10@q2b81@build-letrec q2b81@build-letrec) (set! q2c0f@q2b7f@build-void q2b7f@build-void) (set! q2c0e@q2b7d@build-sequence q2b7d@build-sequence) (set! q2c0d@q2b4f@build-let q2b4f@build-let) (set! q2c0c@q2b4d@build-case-lambda q2b4d@build-case-lambda) (set! q2c0b@q2b4b@build-lambda q2b4b@build-lambda) (set! q2c0a@q2ada@build-global-define q2ada@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q2c22@file-options-macro q2c24@set-cons q2c26@set-union q2c2b@top-mark* q2c2d@top-marked? q2c2f@gen-lexical q2c31@gen-global q2c33@gen-label q2c35@gen-top-level-label q2c37@gen-define-label+loc q2c39@gen-define-label q2c3f@q2c3a q2c41@q2c3c q2c43@q2c3b q2c46@rib? q2c48@make-rib q2c4a@rib-sym* q2c4c@rib-mark** q2c4e@rib-label* q2c50@rib-sealed/freq q2c52@rib-cache q2c54@set-rib-sym*! q2c56@set-rib-mark**! q2c58@set-rib-label*! q2c5a@set-rib-sealed/freq! q2c5c@set-rib-cache! q2c5e@make-empty-rib q2c60@extend-rib! q2c62@extend-rib/nc! q2c64@make-rib-map q2c66@seal-rib! q2c68@unseal-rib! q2c6a@make-full-rib q2c70@q2c6b q2c72@q2c6d q2c74@q2c6c q2c77@stx? q2c79@make-stx q2c7b@stx-expr q2c7d@stx-mark* q2c7f@stx-subst* q2c81@stx-ae* q2c83@set-stx-expr! q2c85@set-stx-mark*! q2c87@set-stx-subst*! q2c89@set-stx-ae*! q2c8b@rp q2c8d@datum->stx q2c8f@gen-mark q2c91@anti-mark q2c93@anti-mark? q2c95@join-wraps q2c97@mkstx q2c99@add-mark q2c9b@add-subst q2c9d@syntax-kind? q2c9f@syntax-vector->list q2ca1@syntax-pair? q2ca3@syntax-vector? q2ca5@syntax-null? q2ca7@syntax-list? q2ca9@syntax-car q2cab@syntax-cdr q2cad@syntax->list q2caf@id? q2cb1@id->sym q2cb3@same-marks? q2cb5@bound-id=? q2cb7@free-id=? q2cb9@valid-bound-ids? q2cbb@distinct-bound-ids? q2cbd@bound-id-member? q2cbf@self-evaluating? q2cc1@strip-annotations q2cc3@strip q2cc5@stx->datum q2cc7@same-marks*? q2cc9@id->label q2ccb@id->real-label q2ccd@label->binding q2ccf@make-binding q2cd1@binding-type q2cd3@binding-value q2cd5@raise-unbound-error q2cd7@syntax-type q2ce5@sanitize-binding q2ce7@make-variable-transformer q2ce9@variable-transformer? q2ceb@variable-transformer-procedure q2ced@make-eval-transformer q2e3e@parse-define q2e40@parse-define-syntax q2e42@scheme-stx-hashtable q2e44@scheme-stx q2e46@lexical-var q2e48@lexical-mutable? q2e4a@set-lexical-mutable! q2e4c@add-lexical q2e4e@add-lexicals q2e50@letrec-helper q2e52@letrec-transformer q2e54@letrec*-transformer q2e56@fluid-let-syntax-transformer q2e58@type-descriptor-transformer q2e5a@record-type-descriptor-transformer q2e5c@record-constructor-descriptor-transformer q2e5e@when-macro q2e60@unless-macro q2e62@if-transformer q2e64@and-transformer q2e66@or-transformer q2e68@case-macro q2e6a@quote-transformer q2e6c@case-lambda-transformer q2e6e@lambda-transformer q2e70@bless q2e72@with-syntax-macro q2e74@invalid-fmls-error q2e76@let-macro q2e78@let-values-macro q2e7a@let*-values-macro q2e7c@trace-lambda-macro q2e7e@trace-define-macro q2e80@trace-define-syntax-macro q2e82@trace-let/rec-syntax q2e84@trace-let-syntax-macro q2e86@trace-letrec-syntax-macro q2e88@guard-macro q2e8a@define-enumeration-macro q2e8c@time-macro q2e8e@delay-macro q2e90@assert-macro q2e92@endianness-macro q2e94@identifier-syntax-macro q2e96@do-macro q2e98@let*-macro q2e9a@or-macro q2e9c@and-macro q2e9e@cond-macro q2ea0@do-include q2ea2@include-macro q2ea4@include-into-macro q2ea6@syntax-rules-macro q2ea8@quasiquote-macro q2eaa@quasisyntax-macro q2eac@define-struct-macro q2eae@define-record-type-macro q2eb0@define-condition-type-macro q2eb2@incorrect-usage-macro q2eb4@parameterize-macro q2eb6@foreign-call-transformer q2eb8@convert-pattern q2eba@syntax-dispatch q2ebc@ellipsis? q2ebe@underscore? q2ec0@verify-literals q2ec2@syntax-case-transformer q2ec4@ellipsis-map q2ec6@syntax-transformer q2ec8@core-macro-transformer q2eca@symbol-macro q2ecc@macro-transformer q2ece@local-macro-transformer q2ed0@do-macro-call q2ed2@chi-macro q2ed4@chi-local-macro q2ed6@chi-global-macro q2ed8@chi-expr* q2eda@chi-application q2edc@chi-expr q2ede@chi-set! q2ee0@verify-formals q2ee2@chi-lambda-clause q2ee4@chi-lambda-clause* q2ee6@chi-defun q2ee8@chi-rhs q2eea@expand-interaction-rhs*/init* q2eec@chi-rhs* q2eee@find-bound=? q2ef0@find-dups q2ef2@chi-internal q2ef4@parse-module q2efa@q2ef5 q2efc@q2ef7 q2efe@q2ef6 q2f01@module-interface? q2f03@make-module-interface q2f05@module-interface-first-mark q2f07@module-interface-exp-id-vec q2f09@module-interface-exp-lab-vec q2f0b@set-module-interface-first-mark! q2f0d@set-module-interface-exp-id-vec! q2f0f@set-module-interface-exp-lab-vec! q2f11@module-interface-exp-id* q2f13@chi-internal-module q2f15@chi-body* q2f17@expand-transformer q2f19@parse-exports q2f1b@parse-library-name q2f1d@parse-library q2f1f@parse-import-spec* q2f21@make-top-rib q2f23@make-collector q2f25@inv-collector q2f27@vis-collector q2f29@imp-collector q2f2b@chi-library-internal q2f2d@chi-interaction-expr q2f2f@library-body-expander q2f31@core-library-expander q2f33@parse-top-level-program q2f35@top-level-expander q2f3b@q2f36 q2f3d@q2f38 q2f3f@q2f37 q2f42@env? q2f44@make-env q2f46@env-names q2f48@env-labels q2f4a@env-itc q2f4c@set-env-names! q2f4e@set-env-labels! q2f50@set-env-itc! q2f52@rp q2f58@q2f53 q2f5a@q2f55 q2f5c@q2f54 q2f5f@interaction-env? q2f61@make-interaction-env q2f63@interaction-env-rib q2f65@interaction-env-r q2f67@interaction-env-locs q2f69@set-interaction-env-rib! q2f6b@set-interaction-env-r! q2f6d@set-interaction-env-locs! q2f6f@rp q2f71@interaction-environment-symbols q2f73@environment-bindings q2f75@parse-binding q2f77@environment? q2f79@environment-symbols q2f7b@environment q2f7d@null-environment q2f7f@scheme-report-environment q2f81@expand q2f83@eval q2f85@library-expander q2f87@boot-library-expand q2f89@rev-map-append q2f8b@build-exports q2f8d@make-export-subst q2f8f@make-export-env/macros q2f91@generate-temporaries q2f93@free-identifier=? q2f95@bound-identifier=? q2f97@make-source-condition q2f99@extract-position-condition q2f9b@expression-position q2f9d@assertion-error q2f9f@syntax-error q2fa1@syntax-violation* q2fa3@syntax-violation q2fa5@identifier? q2fa7@datum->syntax q2fa9@syntax->datum q2fab@compile-r6rs-top-level q2fad@pre-compile-r6rs-top-level q2faf@interaction-environment q2fb1@top-level-context) (begin (set! q2c22@file-options-macro (lambda (q2fb2@x) ((lambda (q2fb5@valid-option?) (begin (set! q2fb5@valid-option? (lambda (q2fbe@x) (and (q2caf@id? q2fbe@x) (memq (q2cb1@id->sym q2fbe@x) '(no-fail no-create no-truncate))))) ((lambda (q2fb6@t) ((lambda (q2fb8@ls/false) (if (and q2fb8@ls/false (apply (lambda (q2fba@opt*) (for-all q2fb5@valid-option? q2fba@opt*)) q2fb8@ls/false)) (apply (lambda (q2fbc@opt*) (q2e70@bless (list 'make-file-options (list 'quote q2fbc@opt*)))) q2fb8@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q2fb6@t))) (q2eba@syntax-dispatch q2fb6@t '(_ . each-any)))) q2fb2@x))) '#f))) (set! q2c24@set-cons (lambda (q2fc0@x q2fc1@ls) (if (memq q2fc0@x q2fc1@ls) q2fc1@ls (cons q2fc0@x q2fc1@ls)))) (set! q2c26@set-union (lambda (q2fc4@ls1 q2fc5@ls2) (if (null? q2fc4@ls1) q2fc5@ls2 (if (memq (car q2fc4@ls1) q2fc5@ls2) (q2c26@set-union (cdr q2fc4@ls1) q2fc5@ls2) (cons (car q2fc4@ls1) (q2c26@set-union (cdr q2fc4@ls1) q2fc5@ls2)))))) (set! q2c2b@top-mark* '(top)) (set! q2c2d@top-marked? (lambda (q2fc8@m*) (memq 'top q2fc8@m*))) (set! q2c2f@gen-lexical (lambda (q2fca@sym) (if (symbol? q2fca@sym) (gensym q2fca@sym) (if (q2c77@stx? q2fca@sym) (q2c2f@gen-lexical (q2cb1@id->sym q2fca@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" q2fca@sym))))) (set! q2c31@gen-global (lambda (q2fcc@x) (q2c2f@gen-lexical q2fcc@x))) (set! q2c33@gen-label (lambda (q2fce@_) (gensym))) (set! q2c35@gen-top-level-label (lambda (q2fd0@id q2fd1@rib) ((lambda (q2fd5@find) (begin (set! q2fd5@find (lambda (q2fe0@sym q2fe1@mark* q2fe2@sym* q2fe3@mark** q2fe4@label*) (and (pair? q2fe2@sym*) (if (and (eq? q2fe0@sym (car q2fe2@sym*)) (q2cb3@same-marks? q2fe1@mark* (car q2fe3@mark**))) (car q2fe4@label*) (q2fd5@find q2fe0@sym q2fe1@mark* (cdr q2fe2@sym*) (cdr q2fe3@mark**) (cdr q2fe4@label*)))))) ((lambda (q2fd6@sym q2fd7@mark*) ((lambda (q2fda@sym*) ((lambda (q2fdc@t) (if q2fdc@t ((lambda (q2fde@label) (if (q2ad2@q2972@imported-label->binding q2fde@label) (gensym) q2fde@label)) q2fdc@t) (gensym))) (and (memq q2fd6@sym (q2c4a@rib-sym* q2fd1@rib)) (q2fd5@find q2fd6@sym q2fd7@mark* q2fda@sym* (q2c4c@rib-mark** q2fd1@rib) (q2c4e@rib-label* q2fd1@rib))))) (q2c4a@rib-sym* q2fd1@rib))) (q2cb1@id->sym q2fd0@id) (q2c7d@stx-mark* q2fd0@id)))) '#f))) (set! q2c37@gen-define-label+loc (lambda (q2fea@id q2feb@rib) ((lambda (q2fee@t) (if q2fee@t ((lambda (q2ff0@env) ((lambda (q2ff2@label q2ff3@locs) (values q2ff2@label ((lambda (q2ff6@t) (if q2ff6@t (cdr q2ff6@t) ((lambda (q2ff8@loc) (begin (q2f6d@set-interaction-env-locs! q2ff0@env (cons (cons q2ff2@label q2ff8@loc) q2ff3@locs)) q2ff8@loc)) (q2c2f@gen-lexical q2fea@id)))) (assq q2ff2@label q2ff3@locs)))) (q2c35@gen-top-level-label q2fea@id q2feb@rib) (q2f67@interaction-env-locs q2ff0@env))) q2fee@t) (values (gensym) (q2c2f@gen-lexical q2fea@id)))) (q2fb1@top-level-context)))) (set! q2c39@gen-define-label (lambda (q2ffa@id q2ffb@rib) (if (q2fb1@top-level-context) (q2c35@gen-top-level-label q2ffa@id q2ffb@rib) (gensym)))) (set! q2c3f@q2c3a (make-record-type-descriptor 'rib '#f 'q2c3d '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! q2c41@q2c3c '#f) (set! q2c43@q2c3b (make-record-constructor-descriptor q2c3f@q2c3a '#f q2c41@q2c3c)) (set! q2c46@rib? (record-predicate q2c3f@q2c3a)) (set! q2c48@make-rib (record-constructor q2c43@q2c3b)) (set! q2c4a@rib-sym* (record-accessor q2c3f@q2c3a '0)) (set! q2c4c@rib-mark** (record-accessor q2c3f@q2c3a '1)) (set! q2c4e@rib-label* (record-accessor q2c3f@q2c3a '2)) (set! q2c50@rib-sealed/freq (record-accessor q2c3f@q2c3a '3)) (set! q2c52@rib-cache (record-accessor q2c3f@q2c3a '4)) (set! q2c54@set-rib-sym*! (record-mutator q2c3f@q2c3a '0)) (set! q2c56@set-rib-mark**! (record-mutator q2c3f@q2c3a '1)) (set! q2c58@set-rib-label*! (record-mutator q2c3f@q2c3a '2)) (set! q2c5a@set-rib-sealed/freq! (record-mutator q2c3f@q2c3a '3)) (set! q2c5c@set-rib-cache! (record-mutator q2c3f@q2c3a '4)) (set! q2c5e@make-empty-rib (lambda () (q2c48@make-rib '() '() '() '#f '#f))) (set! q2c60@extend-rib! (lambda (q2ffe@rib q2fff@id q3000@label) ((lambda (q3005@find) (begin (set! q3005@find (lambda (q3012@sym q3013@mark* q3014@sym* q3015@mark** q3016@label*) (and (pair? q3014@sym*) (if (and (eq? q3012@sym (car q3014@sym*)) (q2cb3@same-marks? q3013@mark* (car q3015@mark**))) q3016@label* (q3005@find q3012@sym q3013@mark* (cdr q3014@sym*) (cdr q3015@mark**) (cdr q3016@label*)))))) (begin (if (q2c50@rib-sealed/freq q2ffe@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" q2ffe@rib) (void)) ((lambda (q3006@sym q3007@mark*) ((lambda (q300a@sym*) ((lambda (q300c@t) (if q300c@t ((lambda (q300e@p) (if (not (eq? q3000@label (car q300e@p))) (if (q2fb1@top-level-context) (set-car! q300e@p q3000@label) (q2fa3@syntax-violation '#f '"multiple definitions of identifier" q2fff@id)) (void))) q300c@t) (begin (if (q2c52@rib-cache q2ffe@rib) (hashtable-update! (q2c52@rib-cache q2ffe@rib) q3006@sym (lambda (q3010@e) (cons (cons q3007@mark* q3000@label) q3010@e)) '()) (void)) (q2c54@set-rib-sym*! q2ffe@rib (cons q3006@sym q300a@sym*)) (q2c56@set-rib-mark**! q2ffe@rib (cons q3007@mark* (q2c4c@rib-mark** q2ffe@rib))) (q2c58@set-rib-label*! q2ffe@rib (cons q3000@label (q2c4e@rib-label* q2ffe@rib)))))) (and (memq q3006@sym (q2c4a@rib-sym* q2ffe@rib)) (q3005@find q3006@sym q3007@mark* q300a@sym* (q2c4c@rib-mark** q2ffe@rib) (q2c4e@rib-label* q2ffe@rib))))) (q2c4a@rib-sym* q2ffe@rib))) (q2cb1@id->sym q2fff@id) (q2c7d@stx-mark* q2fff@id))))) '#f))) (set! q2c62@extend-rib/nc! (lambda (q301c@rib q301d@id q301e@label) ((lambda (q3022@sym q3023@mark*) ((lambda (q3026@sym*) (begin (if (q2c52@rib-cache q301c@rib) (hashtable-update! (q2c52@rib-cache q301c@rib) q3022@sym (lambda (q3028@e) (cons (cons q3023@mark* q301e@label) q3028@e)) '()) (void)) (q2c54@set-rib-sym*! q301c@rib (cons q3022@sym q3026@sym*)) (q2c56@set-rib-mark**! q301c@rib (cons q3023@mark* (q2c4c@rib-mark** q301c@rib))) (q2c58@set-rib-label*! q301c@rib (cons q301e@label (q2c4e@rib-label* q301c@rib))))) (q2c4a@rib-sym* q301c@rib))) (q2cb1@id->sym q301d@id) (q2c7d@stx-mark* q301d@id)))) (set! q2c64@make-rib-map (lambda (q302a@sym*) ((lambda (q302c@ht) ((letrec ((q302e@f (lambda (q3030@i q3031@sym*) (if (null? q3031@sym*) q302c@ht (begin (hashtable-update! q302c@ht (car q3031@sym*) (lambda (q3034@x) (cons q3030@i q3034@x)) '()) (q302e@f (+ q3030@i '1) (cdr q3031@sym*))))))) q302e@f) '0 q302a@sym*)) (make-eq-hashtable)))) (set! q2c66@seal-rib! (lambda (q3036@rib) ((lambda (q3038@sym*) (if (not (null? q3038@sym*)) (begin (q2c54@set-rib-sym*! q3036@rib (list->vector q3038@sym*)) (q2c56@set-rib-mark**! q3036@rib (list->vector (q2c4c@rib-mark** q3036@rib))) (q2c58@set-rib-label*! q3036@rib (list->vector (q2c4e@rib-label* q3036@rib))) (q2c5a@set-rib-sealed/freq! q3036@rib (q2c64@make-rib-map q3038@sym*))) (void))) (q2c4a@rib-sym* q3036@rib)))) (set! q2c68@unseal-rib! (lambda (q303a@rib) (if (q2c50@rib-sealed/freq q303a@rib) (begin (q2c5a@set-rib-sealed/freq! q303a@rib '#f) (q2c54@set-rib-sym*! q303a@rib (vector->list (q2c4a@rib-sym* q303a@rib))) (q2c56@set-rib-mark**! q303a@rib (vector->list (q2c4c@rib-mark** q303a@rib))) (q2c58@set-rib-label*! q303a@rib (vector->list (q2c4e@rib-label* q303a@rib)))) (void)))) (set! q2c6a@make-full-rib (lambda (q303c@id* q303d@label*) ((lambda (q3040@r) (begin (q2c66@seal-rib! q3040@r) q3040@r)) (q2c48@make-rib (map q2cb1@id->sym q303c@id*) (map q2c7d@stx-mark* q303c@id*) q303d@label* '#f '#f)))) (set! q2c70@q2c6b (make-record-type-descriptor 'stx '#f 'q2c6e '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! q2c72@q2c6d '#f) (set! q2c74@q2c6c (make-record-constructor-descriptor q2c70@q2c6b '#f q2c72@q2c6d)) (set! q2c77@stx? (record-predicate q2c70@q2c6b)) (set! q2c79@make-stx (record-constructor q2c74@q2c6c)) (set! q2c7b@stx-expr (record-accessor q2c70@q2c6b '0)) (set! q2c7d@stx-mark* (record-accessor q2c70@q2c6b '1)) (set! q2c7f@stx-subst* (record-accessor q2c70@q2c6b '2)) (set! q2c81@stx-ae* (record-accessor q2c70@q2c6b '3)) (set! q2c83@set-stx-expr! (record-mutator q2c70@q2c6b '0)) (set! q2c85@set-stx-mark*! (record-mutator q2c70@q2c6b '1)) (set! q2c87@set-stx-subst*! (record-mutator q2c70@q2c6b '2)) (set! q2c89@set-stx-ae*! (record-mutator q2c70@q2c6b '3)) (set! q2c8b@rp (q2856@q277d@make-record-printer 'stx (lambda (q3042@x q3043@p q3044@wr) (begin (display '"#<syntax " q3043@p) (write (q2cc5@stx->datum q3042@x) q3043@p) ((lambda (q3048@expr) (if (q284e@q276d@annotation? q3048@expr) ((lambda (q304a@src) (if (pair? q304a@src) (begin (display '" [" q3043@p) (display (cdr q304a@src) q3043@p) (display '" of " q3043@p) (display (car q304a@src) q3043@p) (display '"]" q3043@p)) (void))) (q284f@q276f@annotation-source q3048@expr)) (void))) (q2c7b@stx-expr q3042@x)) (display '">" q3043@p))))) (set! q2c8d@datum->stx (lambda (q304c@id q304d@datum) (q2c79@make-stx q304d@datum (q2c7d@stx-mark* q304c@id) (q2c7f@stx-subst* q304c@id) (q2c81@stx-ae* q304c@id)))) (set! q2c8f@gen-mark (lambda () (string '#\m))) (set! q2c91@anti-mark '#f) (set! q2c93@anti-mark? not) (set! q2c95@join-wraps (lambda (q3050@m1* q3051@s1* q3052@ae1* q3053@e) ((lambda (q3059@cancel) (begin (set! q3059@cancel (lambda (q3060@ls1 q3061@ls2) ((letrec ((q3064@f (lambda (q3066@x q3067@ls1) (if (null? q3067@ls1) (cdr q3061@ls2) (cons q3066@x (q3064@f (car q3067@ls1) (cdr q3067@ls1))))))) q3064@f) (car q3060@ls1) (cdr q3060@ls1)))) ((lambda (q305a@m2* q305b@s2* q305c@ae2*) (if (and (not (null? q3050@m1*)) (not (null? q305a@m2*)) (q2c93@anti-mark? (car q305a@m2*))) (values (q3059@cancel q3050@m1* q305a@m2*) (q3059@cancel q3051@s1* q305b@s2*) (q3059@cancel q3052@ae1* q305c@ae2*)) (values (append q3050@m1* q305a@m2*) (append q3051@s1* q305b@s2*) (append q3052@ae1* q305c@ae2*)))) (q2c7d@stx-mark* q3053@e) (q2c7f@stx-subst* q3053@e) (q2c81@stx-ae* q3053@e)))) '#f))) (set! q2c97@mkstx (lambda (q306a@e q306b@m* q306c@s* q306d@ae*) (if (and (q2c77@stx? q306a@e) (not (q2c2d@top-marked? q306b@m*))) (call-with-values (lambda () (q2c95@join-wraps q306b@m* q306c@s* q306d@ae* q306a@e)) (lambda (q3078@q3073 q3079@q3075 q307a@q3077) ((lambda (q307e@ae* q307f@s* q3080@m*) (q2c79@make-stx (q2c7b@stx-expr q306a@e) q3080@m* q307f@s* q307e@ae*)) q307a@q3077 q3079@q3075 q3078@q3073))) (q2c79@make-stx q306a@e q306b@m* q306c@s* q306d@ae*)))) (set! q2c99@add-mark (lambda (q3084@m q3085@e q3086@ae) (q2c97@mkstx q3085@e (list q3084@m) '(shift) (list q3086@ae)))) (set! q2c9b@add-subst (lambda (q308a@subst q308b@e) (q2c97@mkstx q308b@e '() (list q308a@subst) '()))) (set! q2c9d@syntax-kind? (lambda (q308e@x q308f@p?) (if (q2c77@stx? q308e@x) (q2c9d@syntax-kind? (q2c7b@stx-expr q308e@x) q308f@p?) (if (q284e@q276d@annotation? q308e@x) (q2c9d@syntax-kind? (q2850@q2771@annotation-expression q308e@x) q308f@p?) (q308f@p? q308e@x))))) (set! q2c9f@syntax-vector->list (lambda (q3092@x) (if (q2c77@stx? q3092@x) ((lambda (q3094@ls q3095@m* q3096@s* q3097@ae*) (map (lambda (q309c@x) (q2c97@mkstx q309c@x q3095@m* q3096@s* q3097@ae*)) q3094@ls)) (q2c9f@syntax-vector->list (q2c7b@stx-expr q3092@x)) (q2c7d@stx-mark* q3092@x) (q2c7f@stx-subst* q3092@x) (q2c81@stx-ae* q3092@x)) (if (q284e@q276d@annotation? q3092@x) (q2c9f@syntax-vector->list (q2850@q2771@annotation-expression q3092@x)) (if (vector? q3092@x) (vector->list q3092@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" q3092@x)))))) (set! q2ca1@syntax-pair? (lambda (q309e@x) (q2c9d@syntax-kind? q309e@x pair?))) (set! q2ca3@syntax-vector? (lambda (q30a0@x) (q2c9d@syntax-kind? q30a0@x vector?))) (set! q2ca5@syntax-null? (lambda (q30a2@x) (q2c9d@syntax-kind? q30a2@x null?))) (set! q2ca7@syntax-list? (lambda (q30a4@x) (or (q2ca5@syntax-null? q30a4@x) (and (q2ca1@syntax-pair? q30a4@x) (q2ca7@syntax-list? (q2cab@syntax-cdr q30a4@x)))))) (set! q2ca9@syntax-car (lambda (q30a6@x) (if (q2c77@stx? q30a6@x) (q2c97@mkstx (q2ca9@syntax-car (q2c7b@stx-expr q30a6@x)) (q2c7d@stx-mark* q30a6@x) (q2c7f@stx-subst* q30a6@x) (q2c81@stx-ae* q30a6@x)) (if (q284e@q276d@annotation? q30a6@x) (q2ca9@syntax-car (q2850@q2771@annotation-expression q30a6@x)) (if (pair? q30a6@x) (car q30a6@x) (assertion-violation 'syntax-car '"BUG: not a pair" q30a6@x)))))) (set! q2cab@syntax-cdr (lambda (q30a8@x) (if (q2c77@stx? q30a8@x) (q2c97@mkstx (q2cab@syntax-cdr (q2c7b@stx-expr q30a8@x)) (q2c7d@stx-mark* q30a8@x) (q2c7f@stx-subst* q30a8@x) (q2c81@stx-ae* q30a8@x)) (if (q284e@q276d@annotation? q30a8@x) (q2cab@syntax-cdr (q2850@q2771@annotation-expression q30a8@x)) (if (pair? q30a8@x) (cdr q30a8@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" q30a8@x)))))) (set! q2cad@syntax->list (lambda (q30aa@x) (if (q2ca1@syntax-pair? q30aa@x) (cons (q2ca9@syntax-car q30aa@x) (q2cad@syntax->list (q2cab@syntax-cdr q30aa@x))) (if (q2ca5@syntax-null? q30aa@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" q30aa@x))))) (set! q2caf@id? (lambda (q30ac@x) (and (q2c77@stx? q30ac@x) ((lambda (q30ae@expr) (symbol? (if (q284e@q276d@annotation? q30ae@expr) (q284d@q276b@annotation-stripped q30ae@expr) q30ae@expr))) (q2c7b@stx-expr q30ac@x))))) (set! q2cb1@id->sym (lambda (q30b0@x) (begin (if (not (q2c77@stx? q30b0@x)) (error 'id->sym '"BUG in ikarus: not an id" q30b0@x) (void)) ((lambda (q30b2@expr) ((lambda (q30b4@sym) (if (symbol? q30b4@sym) q30b4@sym (error 'id->sym '"BUG in ikarus: not an id" q30b0@x))) (if (q284e@q276d@annotation? q30b2@expr) (q284d@q276b@annotation-stripped q30b2@expr) q30b2@expr))) (q2c7b@stx-expr q30b0@x))))) (set! q2cb3@same-marks? (lambda (q30b6@x q30b7@y) (or (and (null? q30b6@x) (null? q30b7@y)) (and (pair? q30b6@x) (pair? q30b7@y) (eq? (car q30b6@x) (car q30b7@y)) (q2cb3@same-marks? (cdr q30b6@x) (cdr q30b7@y)))))) (set! q2cb5@bound-id=? (lambda (q30ba@x q30bb@y) (and (eq? (q2cb1@id->sym q30ba@x) (q2cb1@id->sym q30bb@y)) (q2cb3@same-marks? (q2c7d@stx-mark* q30ba@x) (q2c7d@stx-mark* q30bb@y))))) (set! q2cb7@free-id=? (lambda (q30be@i q30bf@j) ((lambda (q30c2@t0 q30c3@t1) (if (or q30c2@t0 q30c3@t1) (eq? q30c2@t0 q30c3@t1) (eq? (q2cb1@id->sym q30be@i) (q2cb1@id->sym q30bf@j)))) (q2ccb@id->real-label q30be@i) (q2ccb@id->real-label q30bf@j)))) (set! q2cb9@valid-bound-ids? (lambda (q30c6@id*) (and (for-all q2caf@id? q30c6@id*) (q2cbb@distinct-bound-ids? q30c6@id*)))) (set! q2cbb@distinct-bound-ids? (lambda (q30c8@id*) (or (null? q30c8@id*) (and (not (q2cbd@bound-id-member? (car q30c8@id*) (cdr q30c8@id*))) (q2cbb@distinct-bound-ids? (cdr q30c8@id*)))))) (set! q2cbd@bound-id-member? (lambda (q30ca@id q30cb@id*) (and (pair? q30cb@id*) (or (q2cb5@bound-id=? q30ca@id (car q30cb@id*)) (q2cbd@bound-id-member? q30ca@id (cdr q30cb@id*)))))) (set! q2cbf@self-evaluating? (lambda (q30ce@x) (or (number? q30ce@x) (string? q30ce@x) (char? q30ce@x) (boolean? q30ce@x) (regexp? q30ce@x) (bytevector? q30ce@x)))) (set! q2cc1@strip-annotations (lambda (q30d0@x) (if (pair? q30d0@x) (cons (q2cc1@strip-annotations (car q30d0@x)) (q2cc1@strip-annotations (cdr q30d0@x))) (if (vector? q30d0@x) (vector-map q2cc1@strip-annotations q30d0@x) (if (q284e@q276d@annotation? q30d0@x) (q284d@q276b@annotation-stripped q30d0@x) q30d0@x))))) (set! q2cc3@strip (lambda (q30d2@x q30d3@m*) (if (q2c2d@top-marked? q30d3@m*) (if (or (q284e@q276d@annotation? q30d2@x) (and (pair? q30d2@x) (q284e@q276d@annotation? (car q30d2@x))) (and (vector? q30d2@x) (> (vector-length q30d2@x) '0) (q284e@q276d@annotation? (vector-ref q30d2@x '0)))) (q2cc1@strip-annotations q30d2@x) q30d2@x) ((letrec ((q30d6@f (lambda (q30d8@x) (if (q2c77@stx? q30d8@x) (q2cc3@strip (q2c7b@stx-expr q30d8@x) (q2c7d@stx-mark* q30d8@x)) (if (q284e@q276d@annotation? q30d8@x) (q284d@q276b@annotation-stripped q30d8@x) (if (pair? q30d8@x) ((lambda (q30da@a q30db@d) (if (and (eq? q30da@a (car q30d8@x)) (eq? q30db@d (cdr q30d8@x))) q30d8@x (cons q30da@a q30db@d))) (q30d6@f (car q30d8@x)) (q30d6@f (cdr q30d8@x))) (if (vector? q30d8@x) ((lambda (q30de@old) ((lambda (q30e0@new) (if (for-all eq? q30de@old q30e0@new) q30d8@x (list->vector q30e0@new))) (map q30d6@f q30de@old))) (vector->list q30d8@x)) q30d8@x))))))) q30d6@f) q30d2@x)))) (set! q2cc5@stx->datum (lambda (q30e2@x) (q2cc3@strip q30e2@x '()))) (set! q2cc7@same-marks*? (lambda (q30e4@mark* q30e5@mark** q30e6@si) (if (null? q30e6@si) '#f (if (q2cb3@same-marks? q30e4@mark* (vector-ref q30e5@mark** (car q30e6@si))) (car q30e6@si) (q2cc7@same-marks*? q30e4@mark* q30e5@mark** (cdr q30e6@si)))))) (set! q2cc9@id->label (lambda (q30ea@id) (or (q2ccb@id->real-label q30ea@id) ((lambda (q30ec@t) (if q30ec@t ((lambda (q30ee@env) ((lambda (q30f0@rib) (call-with-values (lambda () (q2c37@gen-define-label+loc q30ea@id q30f0@rib)) (lambda (q30f6@q30f3 q30f7@q30f5) ((lambda (q30fa@loc_ q30fb@lab) (begin (q2c60@extend-rib! q30f0@rib q30ea@id q30fb@lab) q30fb@lab)) q30f7@q30f5 q30f6@q30f3)))) (q2f63@interaction-env-rib q30ee@env))) q30ec@t) '#f)) (q2fb1@top-level-context))))) (set! q2ccb@id->real-label (lambda (q30fe@id) ((lambda (q3100@sym) ((letrec ((q3102@search (lambda (q3104@subst* q3105@mark*) (if (null? q3104@subst*) '#f (if (eq? (car q3104@subst*) 'shift) (q3102@search (cdr q3104@subst*) (cdr q3105@mark*)) ((lambda (q3108@rib) ((lambda (q310a@t) (if q310a@t ((lambda (q310c@ht) ((lambda (q310e@si) ((lambda (q3110@i) (if q3110@i (vector-ref (q2c4e@rib-label* q3108@rib) q3110@i) (q3102@search (cdr q3104@subst*) q3105@mark*))) (and q310e@si (q2cc7@same-marks*? q3105@mark* (q2c4c@rib-mark** q3108@rib) (reverse q310e@si))))) (hashtable-ref q310c@ht q3100@sym '#f))) q310a@t) ((letrec ((q3112@f (lambda (q3114@sym* q3115@mark** q3116@label*) (if (null? q3114@sym*) (q3102@search (cdr q3104@subst*) q3105@mark*) (if (and (eq? (car q3114@sym*) q3100@sym) (q2cb3@same-marks? (car q3115@mark**) q3105@mark*)) (car q3116@label*) (q3112@f (cdr q3114@sym*) (cdr q3115@mark**) (cdr q3116@label*))))))) q3112@f) (q2c4a@rib-sym* q3108@rib) (q2c4c@rib-mark** q3108@rib) (q2c4e@rib-label* q3108@rib)))) (q2c50@rib-sealed/freq q3108@rib))) (car q3104@subst*))))))) q3102@search) (q2c7f@stx-subst* q30fe@id) (q2c7d@stx-mark* q30fe@id))) (q2cb1@id->sym q30fe@id)))) (set! q2ccd@label->binding (lambda (q311a@x q311b@r) ((lambda (q311e@t) (if q311e@t ((lambda (q3120@b) (if (and (pair? q3120@b) (eq? (car q3120@b) '$core-rtd)) (cons '$rtd (map q2e70@bless (cdr q3120@b))) (if (and (pair? q3120@b) (eq? (car q3120@b) 'global-rtd)) ((lambda (q3122@lib q3123@loc) (cons '$rtd (symbol-value q3123@loc))) (cadr q3120@b) (cddr q3120@b)) q3120@b))) q311e@t) ((lambda (q3126@t) (if q3126@t (cdr q3126@t) ((lambda (q3128@t) (if q3128@t ((lambda (q312a@env) ((lambda (q312c@t) (if q312c@t ((lambda (q312e@p) (cons* 'lexical (cdr q312e@p) '#f)) q312c@t) '(displaced-lexical . #f))) (assq q311a@x (q2f67@interaction-env-locs q312a@env)))) q3128@t) '(displaced-lexical . #f))) (q2fb1@top-level-context)))) (assq q311a@x q311b@r)))) (q2ad2@q2972@imported-label->binding q311a@x)))) (set! q2ccf@make-binding cons) (set! q2cd1@binding-type car) (set! q2cd3@binding-value cdr) (set! q2cd5@raise-unbound-error (lambda (q3130@id) (q2fa1@syntax-violation* '#f '"unbound identifier" q3130@id (q4ce0@q4b26@make-undefined-violation)))) (set! q2cd7@syntax-type (lambda (q3132@e q3133@r) (if (q2caf@id? q3132@e) ((lambda (q3136@id) ((lambda (q3138@label) ((lambda (q313a@b) ((lambda (q313c@type) ((lambda () (begin (if (not q3138@label) (q2cd5@raise-unbound-error q3136@id) (void)) ((lambda (q313e@t) (if (memv q313e@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values q313c@type (q2cd3@binding-value q313a@b) q3136@id) (values 'other '#f '#f))) q313c@type))))) (q2cd1@binding-type q313a@b))) (q2ccd@label->binding q3138@label q3133@r))) (q2cc9@id->label q3136@id))) q3132@e) (if (q2ca1@syntax-pair? q3132@e) ((lambda (q3140@id) (if (q2caf@id? q3140@id) ((lambda (q3142@label) ((lambda (q3144@b) ((lambda (q3146@type) ((lambda () (begin (if (not q3142@label) (q2cd5@raise-unbound-error q3140@id) (void)) ((lambda (q3148@t) (if (memv q3148@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values q3146@type (q2cd3@binding-value q3144@b) q3140@id) (values 'call '#f '#f))) q3146@type))))) (q2cd1@binding-type q3144@b))) (q2ccd@label->binding q3142@label q3133@r))) (q2cc9@id->label q3140@id)) (values 'call '#f '#f))) (q2ca9@syntax-car q3132@e)) ((lambda (q314a@d) (if (q2cbf@self-evaluating? q314a@d) (values 'constant q314a@d '#f) (values 'other '#f '#f))) (q2cc5@stx->datum q3132@e)))))) (set! q2ce5@sanitize-binding (lambda (q314c@x q314d@src) (if (procedure? q314c@x) (cons* 'local-macro q314c@x q314d@src) (if (and (pair? q314c@x) (eq? (car q314c@x) 'macro!) (procedure? (cdr q314c@x))) (cons* 'local-macro! (cdr q314c@x) q314d@src) (if (and (pair? q314c@x) (eq? (car q314c@x) '$rtd)) q314c@x (assertion-violation 'expand '"invalid transformer" q314c@x)))))) (set! q2ce7@make-variable-transformer (lambda (q3150@x) (if (procedure? q3150@x) (cons 'macro! q3150@x) (assertion-violation 'make-variable-transformer '"not a procedure" q3150@x)))) (set! q2ce9@variable-transformer? (lambda (q3152@x) (and (pair? q3152@x) (eq? (car q3152@x) 'macro!) (procedure? (cdr q3152@x))))) (set! q2ceb@variable-transformer-procedure (lambda (q3154@x) (if (q2ce9@variable-transformer? q3154@x) (cdr q3154@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" q3154@x)))) (set! q2ced@make-eval-transformer (lambda (q3156@x) (q2ce5@sanitize-binding (eval-core (q28ad@q2865@expanded->core q3156@x)) q3156@x))) (set! q2e3e@parse-define (lambda (q3158@x) ((lambda (q315a@t) ((lambda (q315c@ls/false) (if (and q315c@ls/false (apply (lambda (q315e@id q315f@fmls q3160@b q3161@b*) (q2caf@id? q315e@id)) q315c@ls/false)) (apply (lambda (q3166@id q3167@fmls q3168@b q3169@b*) (begin (q2ee0@verify-formals q3167@fmls q3158@x) (values q3166@id (cons 'defun (cons q3167@fmls (cons q3168@b q3169@b*)))))) q315c@ls/false) ((lambda (q316e@t) ((lambda (q3170@ls/false) (if (and q3170@ls/false (apply (lambda (q3172@id q3173@val) (q2caf@id? q3172@id)) q3170@ls/false)) (apply (lambda (q3176@id q3177@val) (values q3176@id (cons 'expr q3177@val))) q3170@ls/false) ((lambda (q317a@t) ((lambda (q317c@ls/false) (if (and q317c@ls/false (apply (lambda (q317e@id) (q2caf@id? q317e@id)) q317c@ls/false)) (apply (lambda (q3180@id) (values q3180@id (cons 'expr (q2e70@bless '(void))))) q317c@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q317a@t))) (q2eba@syntax-dispatch q317a@t '(_ any)))) q316e@t))) (q2eba@syntax-dispatch q316e@t '(_ any any)))) q315a@t))) (q2eba@syntax-dispatch q315a@t '(_ (any . any) any . each-any)))) q3158@x))) (set! q2e40@parse-define-syntax (lambda (q3182@x) ((lambda (q3184@t) ((lambda (q3186@ls/false) (if (and q3186@ls/false (apply (lambda (q3188@id q3189@val) (q2caf@id? q3188@id)) q3186@ls/false)) (apply (lambda (q318c@id q318d@val) (values q318c@id q318d@val)) q3186@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3184@t))) (q2eba@syntax-dispatch q3184@t '(_ any any)))) q3182@x))) (set! q2e42@scheme-stx-hashtable (make-eq-hashtable)) (set! q2e44@scheme-stx (lambda (q3190@sym) (or (hashtable-ref q2e42@scheme-stx-hashtable q3190@sym '#f) ((lambda (q3192@subst) ((lambda (q3194@stx) ((lambda (q3196@stx) ((lambda () (begin (hashtable-set! q2e42@scheme-stx-hashtable q3190@sym q3196@stx) q3196@stx)))) ((lambda (q3198@t) (if q3198@t ((lambda (q319a@x) ((lambda (q319c@name q319d@label) (q2c9b@add-subst (q2c48@make-rib (list q319c@name) (list q2c2b@top-mark*) (list q319d@label) '#f '#f) q3194@stx)) (car q319a@x) (cdr q319a@x))) q3198@t) q3194@stx)) (assq q3190@sym q3192@subst)))) (q2c79@make-stx q3190@sym q2c2b@top-mark* '() '()))) (q2aa8@q291e@library-subst (q2acc@q2966@find-library-by-name '(psyntax system $all))))))) (set! q2e46@lexical-var car) (set! q2e48@lexical-mutable? cdr) (set! q2e4a@set-lexical-mutable! set-cdr!) (set! q2e4c@add-lexical (lambda (q31a0@lab q31a1@lex q31a2@r) (cons (cons* q31a0@lab 'lexical q31a1@lex '#f) q31a2@r))) (set! q2e4e@add-lexicals (lambda (q31a6@lab* q31a7@lex* q31a8@r) (if (null? q31a6@lab*) q31a8@r (q2e4e@add-lexicals (cdr q31a6@lab*) (cdr q31a7@lex*) (q2e4c@add-lexical (car q31a6@lab*) (car q31a7@lex*) q31a8@r))))) (set! q2e50@letrec-helper (lambda (q31ac@e q31ad@r q31ae@mr q31af@build) ((lambda (q31b4@t) ((lambda (q31b6@ls/false) (if q31b6@ls/false (apply (lambda (q31b8@lhs* q31b9@rhs* q31ba@b q31bb@b*) (if (not (q2cb9@valid-bound-ids? q31b8@lhs*)) (q2e74@invalid-fmls-error q31ac@e q31b8@lhs*) ((lambda (q31c0@lex* q31c1@lab*) ((lambda (q31c4@rib q31c5@r) ((lambda (q31c8@body q31c9@rhs*) (q31af@build '#f q31c0@lex* q31c9@rhs* q31c8@body)) (q2ef2@chi-internal (q2c9b@add-subst q31c4@rib (cons q31ba@b q31bb@b*)) q31c5@r q31ae@mr) (q2ed8@chi-expr* (map (lambda (q31cc@x) (q2c9b@add-subst q31c4@rib q31cc@x)) q31b9@rhs*) q31c5@r q31ae@mr))) (q2c6a@make-full-rib q31b8@lhs* q31c1@lab*) (q2e4e@add-lexicals q31c1@lab* q31c0@lex* q31ad@r))) (map q2c2f@gen-lexical q31b8@lhs*) (map q2c33@gen-label q31b8@lhs*)))) q31b6@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q31b4@t))) (q2eba@syntax-dispatch q31b4@t '(_ #(each (any any)) any . each-any)))) q31ac@e))) (set! q2e52@letrec-transformer (lambda (q31ce@e q31cf@r q31d0@mr) (q2e50@letrec-helper q31ce@e q31cf@r q31d0@mr q2c10@q2b81@build-letrec))) (set! q2e54@letrec*-transformer (lambda (q31d4@e q31d5@r q31d6@mr) (q2e50@letrec-helper q31d4@e q31d5@r q31d6@mr q2c11@q2b83@build-letrec*))) (set! q2e56@fluid-let-syntax-transformer (lambda (q31da@e q31db@r q31dc@mr) ((lambda (q31e1@lookup) (begin (set! q31e1@lookup (lambda (q31f4@x) (or (q2cc9@id->label q31f4@x) (q2fa3@syntax-violation '#f '"unbound identifier" q31da@e q31f4@x)))) ((lambda (q31e2@t) ((lambda (q31e4@ls/false) (if q31e4@ls/false (apply (lambda (q31e6@lhs* q31e7@rhs* q31e8@b q31e9@b*) (if (not (q2cb9@valid-bound-ids? q31e6@lhs*)) (q2e74@invalid-fmls-error q31da@e q31e6@lhs*) ((lambda (q31ee@lab* q31ef@rhs*) (q2ef2@chi-internal (cons q31e8@b q31e9@b*) (append (map cons q31ee@lab* q31ef@rhs*) q31db@r) (append (map cons q31ee@lab* q31ef@rhs*) q31dc@mr))) (map q31e1@lookup q31e6@lhs*) (map (lambda (q31f2@x) (q2ced@make-eval-transformer (q2f17@expand-transformer q31f2@x q31dc@mr))) q31e7@rhs*)))) q31e4@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q31e2@t))) (q2eba@syntax-dispatch q31e2@t '(_ #(each (any any)) any . each-any)))) q31da@e))) '#f))) (set! q2e58@type-descriptor-transformer (lambda (q31f6@e q31f7@r q31f8@mr) ((lambda (q31fc@t) ((lambda (q31fe@ls/false) (if (and q31fe@ls/false (apply (lambda (q3200@id) (q2caf@id? q3200@id)) q31fe@ls/false)) (apply (lambda (q3202@id) ((lambda (q3204@lab) ((lambda (q3206@b) ((lambda (q3208@type) ((lambda () (begin (if (not q3204@lab) (q2cd5@raise-unbound-error q3202@id) (void)) (if (not (and (eq? q3208@type '$rtd) (not (list? (q2cd3@binding-value q3206@b))))) (q2fa3@syntax-violation '#f '"not a record type" q31f6@e) (void)) (list 'quote (q2cd3@binding-value q3206@b)))))) (q2cd1@binding-type q3206@b))) (q2ccd@label->binding q3204@lab q31f7@r))) (q2cc9@id->label q3202@id))) q31fe@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q31fc@t))) (q2eba@syntax-dispatch q31fc@t '(_ any)))) q31f6@e))) (set! q2e5a@record-type-descriptor-transformer (lambda (q320a@e q320b@r q320c@mr) ((lambda (q3210@t) ((lambda (q3212@ls/false) (if (and q3212@ls/false (apply (lambda (q3214@id) (q2caf@id? q3214@id)) q3212@ls/false)) (apply (lambda (q3216@id) ((lambda (q3218@lab) ((lambda (q321a@b) ((lambda (q321c@type) ((lambda () (begin (if (not q3218@lab) (q2cd5@raise-unbound-error q3216@id) (void)) (if (not (and (eq? q321c@type '$rtd) (list? (q2cd3@binding-value q321a@b)))) (q2fa3@syntax-violation '#f '"not a record type" q320a@e) (void)) (q2edc@chi-expr (car (q2cd3@binding-value q321a@b)) q320b@r q320c@mr))))) (q2cd1@binding-type q321a@b))) (q2ccd@label->binding q3218@lab q320b@r))) (q2cc9@id->label q3216@id))) q3212@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3210@t))) (q2eba@syntax-dispatch q3210@t '(_ any)))) q320a@e))) (set! q2e5c@record-constructor-descriptor-transformer (lambda (q321e@e q321f@r q3220@mr) ((lambda (q3224@t) ((lambda (q3226@ls/false) (if (and q3226@ls/false (apply (lambda (q3228@id) (q2caf@id? q3228@id)) q3226@ls/false)) (apply (lambda (q322a@id) ((lambda (q322c@lab) ((lambda (q322e@b) ((lambda (q3230@type) ((lambda () (begin (if (not q322c@lab) (q2cd5@raise-unbound-error q322a@id) (void)) (if (not (and (eq? q3230@type '$rtd) (list? (q2cd3@binding-value q322e@b)))) (q2fa3@syntax-violation '#f '"invalid type" q321e@e) (void)) (q2edc@chi-expr (cadr (q2cd3@binding-value q322e@b)) q321f@r q3220@mr))))) (q2cd1@binding-type q322e@b))) (q2ccd@label->binding q322c@lab q321f@r))) (q2cc9@id->label q322a@id))) q3226@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3224@t))) (q2eba@syntax-dispatch q3224@t '(_ any)))) q321e@e))) (set! q2e5e@when-macro (lambda (q3232@e) ((lambda (q3234@t) ((lambda (q3236@ls/false) (if q3236@ls/false (apply (lambda (q3238@test q3239@e q323a@e*) (q2e70@bless (list 'if q3238@test (cons 'begin (cons q3239@e q323a@e*))))) q3236@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3234@t))) (q2eba@syntax-dispatch q3234@t '(_ any any . each-any)))) q3232@e))) (set! q2e60@unless-macro (lambda (q323e@e) ((lambda (q3240@t) ((lambda (q3242@ls/false) (if q3242@ls/false (apply (lambda (q3244@test q3245@e q3246@e*) (q2e70@bless (list 'if (list 'not q3244@test) (cons 'begin (cons q3245@e q3246@e*))))) q3242@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3240@t))) (q2eba@syntax-dispatch q3240@t '(_ any any . each-any)))) q323e@e))) (set! q2e62@if-transformer (lambda (q324a@e q324b@r q324c@mr) ((lambda (q3250@t) ((lambda (q3252@ls/false) (if q3252@ls/false (apply (lambda (q3254@e0 q3255@e1 q3256@e2) (list 'if (q2edc@chi-expr q3254@e0 q324b@r q324c@mr) (q2edc@chi-expr q3255@e1 q324b@r q324c@mr) (q2edc@chi-expr q3256@e2 q324b@r q324c@mr))) q3252@ls/false) ((lambda (q325a@t) ((lambda (q325c@ls/false) (if q325c@ls/false (apply (lambda (q325e@e0 q325f@e1) (list 'if (q2edc@chi-expr q325e@e0 q324b@r q324c@mr) (q2edc@chi-expr q325f@e1 q324b@r q324c@mr) (q2c0f@q2b7f@build-void))) q325c@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q325a@t))) (q2eba@syntax-dispatch q325a@t '(_ any any)))) q3250@t))) (q2eba@syntax-dispatch q3250@t '(_ any any any)))) q324a@e))) (set! q2e64@and-transformer (lambda (q3262@e q3263@r q3264@mr) ((lambda (q3268@t) ((lambda (q326a@ls/false) (if q326a@ls/false (apply (lambda (q326c@e*) (cons 'and (q2ed8@chi-expr* q326c@e* q3263@r q3264@mr))) q326a@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3268@t))) (q2eba@syntax-dispatch q3268@t '(_ . each-any)))) q3262@e))) (set! q2e66@or-transformer (lambda (q326e@e q326f@r q3270@mr) ((lambda (q3274@t) ((lambda (q3276@ls/false) (if q3276@ls/false (apply (lambda (q3278@e*) (cons 'or (q2ed8@chi-expr* q3278@e* q326f@r q3270@mr))) q3276@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3274@t))) (q2eba@syntax-dispatch q3274@t '(_ . each-any)))) q326e@e))) (set! q2e68@case-macro (lambda (q327a@e) ((lambda (q327d@build-last q327f@build-one) (begin (set! q327d@build-last (lambda (q32a4@cls) ((lambda (q32a6@t) ((lambda (q32a8@ls/false) (if q32a8@ls/false (apply (lambda (q32aa@e q32ab@e*) (cons 'begin (cons q32aa@e q32ab@e*))) q32a8@ls/false) ((lambda (q32ae@t) ((lambda (q32b0@ls/false) (if q32b0@ls/false (apply (lambda () (q327f@build-one q32a4@cls '(if #f #f))) q32b0@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q32ae@t))) (q2eba@syntax-dispatch q32ae@t '_))) q32a6@t))) (q2eba@syntax-dispatch q32a6@t '(#(scheme-id else) any . each-any)))) q32a4@cls))) (set! q327f@build-one (lambda (q3296@cls q3297@k) ((lambda (q329a@t) ((lambda (q329c@ls/false) (if q329c@ls/false (apply (lambda (q329e@d* q329f@e q32a0@e*) (list 'if (list 'memv 't (list 'quote q329e@d*)) (cons 'begin (cons q329f@e q32a0@e*)) q3297@k)) q329c@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q329a@t))) (q2eba@syntax-dispatch q329a@t '(each-any any . each-any)))) q3296@cls))) ((lambda (q3280@t) ((lambda (q3282@ls/false) (if q3282@ls/false (apply (lambda (q3284@expr) (q2e70@bless (cons 'let (cons (list (list 't q3284@expr)) '((if #f #f)))))) q3282@ls/false) ((lambda (q3286@t) ((lambda (q3288@ls/false) (if q3288@ls/false (apply (lambda (q328a@expr q328b@cls q328c@cls*) (q2e70@bless (list 'let (list (list 't q328a@expr)) ((letrec ((q3290@f (lambda (q3292@cls q3293@cls*) (if (null? q3293@cls*) (q327d@build-last q3292@cls) (q327f@build-one q3292@cls (q3290@f (car q3293@cls*) (cdr q3293@cls*))))))) q3290@f) q328b@cls q328c@cls*)))) q3288@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3286@t))) (q2eba@syntax-dispatch q3286@t '(_ any any . each-any)))) q3280@t))) (q2eba@syntax-dispatch q3280@t '(_ any)))) q327a@e))) '#f '#f))) (set! q2e6a@quote-transformer (lambda (q32b2@e q32b3@r q32b4@mr) ((lambda (q32b8@t) ((lambda (q32ba@ls/false) (if q32ba@ls/false (apply (lambda (q32bc@datum) (list 'quote (q2cc5@stx->datum q32bc@datum))) q32ba@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q32b8@t))) (q2eba@syntax-dispatch q32b8@t '(_ any)))) q32b2@e))) (set! q2e6c@case-lambda-transformer (lambda (q32be@e q32bf@r q32c0@mr) ((lambda (q32c4@t) ((lambda (q32c6@ls/false) (if q32c6@ls/false (apply (lambda (q32c8@fmls* q32c9@b* q32ca@b**) (call-with-values (lambda () (q2ee4@chi-lambda-clause* q32be@e q32c8@fmls* (map cons q32c9@b* q32ca@b**) q32bf@r q32c0@mr)) (lambda (q32d2@q32cf q32d3@q32d1) ((lambda (q32d6@body* q32d7@fmls*) (q2c0c@q2b4d@build-case-lambda '#f q32d7@fmls* q32d6@body*)) q32d3@q32d1 q32d2@q32cf)))) q32c6@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q32c4@t))) (q2eba@syntax-dispatch q32c4@t '(_ . #(each (any any . each-any)))))) q32be@e))) (set! q2e6e@lambda-transformer (lambda (q32da@e q32db@r q32dc@mr) ((lambda (q32e0@t) ((lambda (q32e2@ls/false) (if q32e2@ls/false (apply (lambda (q32e4@fmls q32e5@b q32e6@b*) (call-with-values (lambda () (q2ee2@chi-lambda-clause q32da@e q32e4@fmls (cons q32e5@b q32e6@b*) q32db@r q32dc@mr)) (lambda (q32ee@q32eb q32ef@q32ed) ((lambda (q32f2@body q32f3@fmls) (q2c0b@q2b4b@build-lambda '#f q32f3@fmls q32f2@body)) q32ef@q32ed q32ee@q32eb)))) q32e2@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q32e0@t))) (q2eba@syntax-dispatch q32e0@t '(_ any any . each-any)))) q32da@e))) (set! q2e70@bless (lambda (q32f6@x) (q2c97@mkstx ((letrec ((q32f8@f (lambda (q32fa@x) (if (q2c77@stx? q32fa@x) q32fa@x (if (pair? q32fa@x) (cons (q32f8@f (car q32fa@x)) (q32f8@f (cdr q32fa@x))) (if (symbol? q32fa@x) (q2e44@scheme-stx q32fa@x) (if (vector? q32fa@x) (vector-map q32f8@f q32fa@x) q32fa@x))))))) q32f8@f) q32f6@x) '() '() '()))) (set! q2e72@with-syntax-macro (lambda (q32fc@e) ((lambda (q32fe@t) ((lambda (q3300@ls/false) (if q3300@ls/false (apply (lambda (q3302@pat* q3303@expr* q3304@b q3305@b*) ((lambda (q330a@idn*) (begin (q2ee0@verify-formals (map car q330a@idn*) q32fc@e) ((lambda (q330c@t*) (q2e70@bless (list 'let (map list q330c@t* q3303@expr*) ((letrec ((q330e@f (lambda (q3310@pat* q3311@t*) (if (null? q3310@pat*) (cons 'begin (cons '#f (cons q3304@b q3305@b*))) (list 'syntax-case (car q3311@t*) '() (list (car q3310@pat*) (q330e@f (cdr q3310@pat*) (cdr q3311@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car q3310@pat*)) (car q3311@t*)))))))) q330e@f) q3302@pat* q330c@t*)))) (q2f91@generate-temporaries q3303@expr*)))) ((letrec ((q3314@f (lambda (q3316@pat*) (if (null? q3316@pat*) '() (call-with-values (lambda () (q2eb8@convert-pattern (car q3316@pat*) '())) (lambda (q331c@q3319 q331d@q331b) ((lambda (q3320@idn* q3321@pat) (append q3320@idn* (q3314@f (cdr q3316@pat*)))) q331d@q331b q331c@q3319))))))) q3314@f) q3302@pat*))) q3300@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q32fe@t))) (q2eba@syntax-dispatch q32fe@t '(_ #(each (any any)) any . each-any)))) q32fc@e))) (set! q2e74@invalid-fmls-error (lambda (q3324@stx q3325@fmls) ((lambda (q3328@t) ((lambda (q332a@ls/false) (if q332a@ls/false (apply (lambda (q332c@id* q332d@last) ((letrec ((q3330@f (lambda (q3332@id*) (if (null? q3332@id*) (values) (if (not (q2caf@id? (car q3332@id*))) (q2fa3@syntax-violation '#f '"not an identifier" q3324@stx (car q3332@id*)) (begin (q3330@f (cdr q3332@id*)) (if (q2cbd@bound-id-member? (car q3332@id*) (cdr q3332@id*)) (q2fa3@syntax-violation '#f '"duplicate binding" q3324@stx (car q3332@id*)) (void)))))))) q3330@f) (if (q2caf@id? q332d@last) (cons q332d@last q332c@id*) (if (q2ca5@syntax-null? q332d@last) q332c@id* (q2fa3@syntax-violation '#f '"not an identifier" q3324@stx q332d@last))))) q332a@ls/false) ((lambda (q3334@t) ((lambda (q3336@ls/false) (if q3336@ls/false (apply (lambda () (q2fa3@syntax-violation '#f '"malformed binding form" q3324@stx q3325@fmls)) q3336@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3334@t))) (q2eba@syntax-dispatch q3334@t '_))) q3328@t))) (q2eba@syntax-dispatch q3328@t '#(each+ any () any)))) q3325@fmls))) (set! q2e76@let-macro (lambda (q3338@stx) ((lambda (q333a@t) ((lambda (q333c@ls/false) (if q333c@ls/false (apply (lambda (q333e@lhs* q333f@rhs* q3340@b q3341@b*) (if (q2cb9@valid-bound-ids? q333e@lhs*) (q2e70@bless (cons (cons 'lambda (cons q333e@lhs* (cons q3340@b q3341@b*))) q333f@rhs*)) (q2e74@invalid-fmls-error q3338@stx q333e@lhs*))) q333c@ls/false) ((lambda (q3346@t) ((lambda (q3348@ls/false) (if (and q3348@ls/false (apply (lambda (q334a@f q334b@lhs* q334c@rhs* q334d@b q334e@b*) (q2caf@id? q334a@f)) q3348@ls/false)) (apply (lambda (q3354@f q3355@lhs* q3356@rhs* q3357@b q3358@b*) (if (q2cb9@valid-bound-ids? q3355@lhs*) (q2e70@bless (cons (list 'letrec (list (list q3354@f (cons 'lambda (cons q3355@lhs* (cons q3357@b q3358@b*))))) q3354@f) q3356@rhs*)) (q2e74@invalid-fmls-error q3338@stx q3355@lhs*))) q3348@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3346@t))) (q2eba@syntax-dispatch q3346@t '(_ any #(each (any any)) any . each-any)))) q333a@t))) (q2eba@syntax-dispatch q333a@t '(_ #(each (any any)) any . each-any)))) q3338@stx))) (set! q2e78@let-values-macro (lambda (q335e@stx) ((lambda (q3361@rename q3363@rename*) (begin (set! q3361@rename (lambda (q33c6@x q33c7@old* q33c8@new*) (begin (if (not (q2caf@id? q33c6@x)) (q2fa3@syntax-violation '#f '"not an indentifier" q335e@stx q33c6@x) (void)) (if (q2cbd@bound-id-member? q33c6@x q33c7@old*) (q2fa3@syntax-violation '#f '"duplicate binding" q335e@stx q33c6@x) (void)) ((lambda (q33cc@y) (values q33cc@y (cons q33c6@x q33c7@old*) (cons q33cc@y q33c8@new*))) (gensym (q2fa9@syntax->datum q33c6@x)))))) (set! q3363@rename* (lambda (q33b4@x* q33b5@old* q33b6@new*) (if (null? q33b4@x*) (values '() q33b5@old* q33b6@new*) (call-with-values (lambda () (q3361@rename (car q33b4@x*) q33b5@old* q33b6@new*)) (lambda (q33ba@x q33bb@old* q33bc@new*) (call-with-values (lambda () (q3363@rename* (cdr q33b4@x*) q33bb@old* q33bc@new*)) (lambda (q33c0@x* q33c1@old* q33c2@new*) (values (cons q33ba@x q33c0@x*) q33c1@old* q33c2@new*)))))))) ((lambda (q3364@t) ((lambda (q3366@ls/false) (if q3366@ls/false (apply (lambda (q3368@b q3369@b*) (cons* (q2e70@bless 'let) '() q3368@b q3369@b*)) q3366@ls/false) ((lambda (q336c@t) ((lambda (q336e@ls/false) (if q336e@ls/false (apply (lambda (q3370@lhs* q3371@rhs* q3372@b q3373@b*) (q2e70@bless ((letrec ((q3378@f (lambda (q337a@lhs* q337b@rhs* q337c@old* q337d@new*) (if (null? q337a@lhs*) (cons 'let (cons (map list q337c@old* q337d@new*) (cons q3372@b q3373@b*))) ((lambda (q3382@t) ((lambda (q3384@ls/false) (if q3384@ls/false (apply (lambda (q3386@x*) (call-with-values (lambda () (q3363@rename* q3386@x* q337c@old* q337d@new*)) (lambda (q338e@q3389 q338f@q338b q3390@q338d) ((lambda (q3394@new* q3395@old* q3396@y*) (list 'call-with-values (list 'lambda '() (car q337b@rhs*)) (list 'lambda q3396@y* (q3378@f (cdr q337a@lhs*) (cdr q337b@rhs*) q3395@old* q3394@new*)))) q3390@q338d q338f@q338b q338e@q3389)))) q3384@ls/false) ((lambda (q339a@t) ((lambda (q339c@ls/false) (if q339c@ls/false (apply (lambda (q339e@x* q339f@x) (call-with-values (lambda () (q3361@rename q339f@x q337c@old* q337d@new*)) (lambda (q33a2@y q33a3@old* q33a4@new*) (call-with-values (lambda () (q3363@rename* q339e@x* q33a3@old* q33a4@new*)) (lambda (q33a8@y* q33a9@old* q33aa@new*) (list 'call-with-values (list 'lambda '() (car q337b@rhs*)) (list 'lambda (append q33a8@y* q33a2@y) (q3378@f (cdr q337a@lhs*) (cdr q337b@rhs*) q33a9@old* q33aa@new*)))))))) q339c@ls/false) ((lambda (q33ae@t) ((lambda (q33b0@ls/false) (if q33b0@ls/false (apply (lambda (q33b2@others) (q2fa3@syntax-violation '#f '"malformed bindings" q335e@stx q33b2@others)) q33b0@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q33ae@t))) (q2eba@syntax-dispatch q33ae@t 'any))) q339a@t))) (q2eba@syntax-dispatch q339a@t '#(each+ any () any)))) q3382@t))) (q2eba@syntax-dispatch q3382@t 'each-any))) (car q337a@lhs*)))))) q3378@f) q3370@lhs* q3371@rhs* '() '()))) q336e@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q336c@t))) (q2eba@syntax-dispatch q336c@t '(_ #(each (any any)) any . each-any)))) q3364@t))) (q2eba@syntax-dispatch q3364@t '(_ () any . each-any)))) q335e@stx))) '#f '#f))) (set! q2e7a@let*-values-macro (lambda (q33ce@stx) ((lambda (q33d1@check) (begin (set! q33d1@check (lambda (q3400@x*) (if (not (null? q3400@x*)) ((lambda (q3402@x) (begin (if (not (q2caf@id? q3402@x)) (q2fa3@syntax-violation '#f '"not an identifier" q33ce@stx q3402@x) (void)) (q33d1@check (cdr q3400@x*)) (if (q2cbd@bound-id-member? q3402@x (cdr q3400@x*)) (q2fa3@syntax-violation '#f '"duplicate identifier" q33ce@stx q3402@x) (void)))) (car q3400@x*)) (void)))) ((lambda (q33d2@t) ((lambda (q33d4@ls/false) (if q33d4@ls/false (apply (lambda (q33d6@b q33d7@b*) (cons* (q2e70@bless 'let) '() q33d6@b q33d7@b*)) q33d4@ls/false) ((lambda (q33da@t) ((lambda (q33dc@ls/false) (if q33dc@ls/false (apply (lambda (q33de@lhs* q33df@rhs* q33e0@b q33e1@b*) (q2e70@bless ((letrec ((q33e6@f (lambda (q33e8@lhs* q33e9@rhs*) (if (null? q33e8@lhs*) (cons 'begin (cons q33e0@b q33e1@b*)) ((lambda (q33ec@t) ((lambda (q33ee@ls/false) (if q33ee@ls/false (apply (lambda (q33f0@x*) (begin (q33d1@check q33f0@x*) (list 'call-with-values (list 'lambda '() (car q33e9@rhs*)) (list 'lambda q33f0@x* (q33e6@f (cdr q33e8@lhs*) (cdr q33e9@rhs*)))))) q33ee@ls/false) ((lambda (q33f2@t) ((lambda (q33f4@ls/false) (if q33f4@ls/false (apply (lambda (q33f6@x* q33f7@x) (begin (q33d1@check (cons q33f7@x q33f6@x*)) (list 'call-with-values (list 'lambda '() (car q33e9@rhs*)) (list 'lambda (append q33f6@x* q33f7@x) (q33e6@f (cdr q33e8@lhs*) (cdr q33e9@rhs*)))))) q33f4@ls/false) ((lambda (q33fa@t) ((lambda (q33fc@ls/false) (if q33fc@ls/false (apply (lambda (q33fe@others) (q2fa3@syntax-violation '#f '"malformed bindings" q33ce@stx q33fe@others)) q33fc@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q33fa@t))) (q2eba@syntax-dispatch q33fa@t 'any))) q33f2@t))) (q2eba@syntax-dispatch q33f2@t '#(each+ any () any)))) q33ec@t))) (q2eba@syntax-dispatch q33ec@t 'each-any))) (car q33e8@lhs*)))))) q33e6@f) q33de@lhs* q33df@rhs*))) q33dc@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q33da@t))) (q2eba@syntax-dispatch q33da@t '(_ #(each (any any)) any . each-any)))) q33d2@t))) (q2eba@syntax-dispatch q33d2@t '(_ () any . each-any)))) q33ce@stx))) '#f))) (set! q2e7c@trace-lambda-macro (lambda (q3404@stx) ((lambda (q3406@t) ((lambda (q3408@ls/false) (if q3408@ls/false (apply (lambda (q340a@who q340b@fmls q340c@b q340d@b*) (if (q2cb9@valid-bound-ids? q340b@fmls) (q2e70@bless (list 'make-traced-procedure (list 'quote q340a@who) (cons 'lambda (cons q340b@fmls (cons q340c@b q340d@b*))))) (q2e74@invalid-fmls-error q3404@stx q340b@fmls))) q3408@ls/false) ((lambda (q3412@t) ((lambda (q3414@ls/false) (if q3414@ls/false (apply (lambda (q3416@who q3417@fmls q3418@last q3419@b q341a@b*) (if (q2cb9@valid-bound-ids? (cons q3418@last q3417@fmls)) (q2e70@bless (list 'make-traced-procedure (list 'quote q3416@who) (cons 'lambda (cons (append q3417@fmls q3418@last) (cons q3419@b q341a@b*))))) (q2e74@invalid-fmls-error q3404@stx (append q3417@fmls q3418@last)))) q3414@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3412@t))) (q2eba@syntax-dispatch q3412@t '(_ any #(each+ any () any) any . each-any)))) q3406@t))) (q2eba@syntax-dispatch q3406@t '(_ any each-any any . each-any)))) q3404@stx))) (set! q2e7e@trace-define-macro (lambda (q3420@stx) ((lambda (q3422@t) ((lambda (q3424@ls/false) (if q3424@ls/false (apply (lambda (q3426@who q3427@fmls q3428@b q3429@b*) (if (q2cb9@valid-bound-ids? q3427@fmls) (q2e70@bless (list 'define q3426@who (list 'make-traced-procedure (list 'quote q3426@who) (cons 'lambda (cons q3427@fmls (cons q3428@b q3429@b*)))))) (q2e74@invalid-fmls-error q3420@stx q3427@fmls))) q3424@ls/false) ((lambda (q342e@t) ((lambda (q3430@ls/false) (if q3430@ls/false (apply (lambda (q3432@who q3433@fmls q3434@last q3435@b q3436@b*) (if (q2cb9@valid-bound-ids? (cons q3434@last q3433@fmls)) (q2e70@bless (list 'define q3432@who (list 'make-traced-procedure (list 'quote q3432@who) (cons 'lambda (cons (append q3433@fmls q3434@last) (cons q3435@b q3436@b*)))))) (q2e74@invalid-fmls-error q3420@stx (append q3433@fmls q3434@last)))) q3430@ls/false) ((lambda (q343c@t) ((lambda (q343e@ls/false) (if q343e@ls/false (apply (lambda (q3440@who q3441@expr) (if (q2caf@id? q3440@who) (q2e70@bless (list 'define q3440@who (list 'let (list (list 'v q3441@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote q3440@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (q2fa3@syntax-violation '#f '"invalid name" q3420@stx))) q343e@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q343c@t))) (q2eba@syntax-dispatch q343c@t '(_ any any)))) q342e@t))) (q2eba@syntax-dispatch q342e@t '(_ (any . #(each+ any () any)) any . each-any)))) q3422@t))) (q2eba@syntax-dispatch q3422@t '(_ (any . each-any) any . each-any)))) q3420@stx))) (set! q2e80@trace-define-syntax-macro (lambda (q3444@stx) ((lambda (q3446@t) ((lambda (q3448@ls/false) (if q3448@ls/false (apply (lambda (q344a@who q344b@expr) (if (q2caf@id? q344a@who) (q2e70@bless (list 'define-syntax q344a@who (list 'make-traced-macro (list 'quote q344a@who) q344b@expr))) (q2fa3@syntax-violation '#f '"invalid name" q3444@stx))) q3448@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3446@t))) (q2eba@syntax-dispatch q3446@t '(_ any any)))) q3444@stx))) (set! q2e82@trace-let/rec-syntax (lambda (q344e@who) (lambda (q3450@stx) ((lambda (q3452@t) ((lambda (q3454@ls/false) (if q3454@ls/false (apply (lambda (q3456@lhs* q3457@rhs* q3458@b q3459@b*) (if (q2cb9@valid-bound-ids? q3456@lhs*) ((lambda (q345e@rhs*) (q2e70@bless (cons q344e@who (cons (map list q3456@lhs* q345e@rhs*) (cons q3458@b q3459@b*))))) (map (lambda (q3460@lhs q3461@rhs) (list 'make-traced-macro (list 'quote q3460@lhs) q3461@rhs)) q3456@lhs* q3457@rhs*)) (q2e74@invalid-fmls-error q3450@stx q3456@lhs*))) q3454@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3452@t))) (q2eba@syntax-dispatch q3452@t '(_ #(each (any any)) any . each-any)))) q3450@stx)))) (set! q2e84@trace-let-syntax-macro (q2e82@trace-let/rec-syntax 'let-syntax)) (set! q2e86@trace-letrec-syntax-macro (q2e82@trace-let/rec-syntax 'letrec-syntax)) (set! q2e88@guard-macro (lambda (q3464@x) ((lambda (q3467@gen-clauses) (begin (set! q3467@gen-clauses (lambda (q347e@con q347f@outerk q3480@clause*) ((lambda (q3485@f q3487@f*) (begin (set! q3485@f (lambda (q34be@x q34bf@k) ((lambda (q34c2@t) ((lambda (q34c4@ls/false) (if q34c4@ls/false (apply (lambda (q34c6@e q34c7@p) ((lambda (q34ca@t) (list 'let (list (list q34ca@t q34c6@e)) (list 'if q34ca@t (list q34c7@p q34ca@t) q34bf@k))) (gensym))) q34c4@ls/false) ((lambda (q34cc@t) ((lambda (q34ce@ls/false) (if q34ce@ls/false (apply (lambda (q34d0@e) ((lambda (q34d2@t) (list 'let (list (list q34d2@t q34d0@e)) (list 'if q34d2@t q34d2@t q34bf@k))) (gensym))) q34ce@ls/false) ((lambda (q34d4@t) ((lambda (q34d6@ls/false) (if q34d6@ls/false (apply (lambda (q34d8@e q34d9@v q34da@v*) (list 'if q34d8@e (cons 'begin (cons q34d9@v q34da@v*)) q34bf@k)) q34d6@ls/false) ((lambda (q34de@t) ((lambda (q34e0@ls/false) (if q34e0@ls/false (apply (lambda () (q2fa3@syntax-violation '#f '"invalid guard clause" q34be@x)) q34e0@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q34de@t))) (q2eba@syntax-dispatch q34de@t '_))) q34d4@t))) (q2eba@syntax-dispatch q34d4@t '(any any . each-any)))) q34cc@t))) (q2eba@syntax-dispatch q34cc@t '(any)))) q34c2@t))) (q2eba@syntax-dispatch q34c2@t '(any #(scheme-id =>) any)))) q34be@x))) (set! q3487@f* (lambda (q3494@x*) ((lambda (q3496@t) ((lambda (q3498@ls/false) (if q3498@ls/false (apply (lambda () ((lambda (q349a@g) (values (list q349a@g (list 'lambda '() (list 'raise-continuable q347e@con))) q349a@g)) (gensym))) q3498@ls/false) ((lambda (q349c@t) ((lambda (q349e@ls/false) (if q349e@ls/false (apply (lambda (q34a0@e q34a1@e*) (values (cons 'begin (cons q34a0@e q34a1@e*)) '#f)) q349e@ls/false) ((lambda (q34a4@t) ((lambda (q34a6@ls/false) (if q34a6@ls/false (apply (lambda (q34a8@cls q34a9@cls*) (call-with-values (lambda () (q3487@f* q34a9@cls*)) (lambda (q34b0@q34ad q34b1@q34af) ((lambda (q34b4@g q34b5@e) (values (q3485@f q34a8@cls q34b5@e) q34b4@g)) q34b1@q34af q34b0@q34ad)))) q34a6@ls/false) ((lambda (q34b8@t) ((lambda (q34ba@ls/false) (if q34ba@ls/false (apply (lambda (q34bc@others) (q2fa3@syntax-violation '#f '"invalid guard clause" q34bc@others)) q34ba@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q34b8@t))) (q2eba@syntax-dispatch q34b8@t 'any))) q34a4@t))) (q2eba@syntax-dispatch q34a4@t '(any . any)))) q349c@t))) (q2eba@syntax-dispatch q349c@t '((#(scheme-id else) any . each-any))))) q3496@t))) (q2eba@syntax-dispatch q3496@t '()))) q3494@x*))) (call-with-values (lambda () (q3487@f* q3480@clause*)) (lambda (q348c@q3489 q348d@q348b) ((lambda (q3490@raisek q3491@code) (if q3490@raisek (list (list 'call/cc (list 'lambda (list q3490@raisek) (list q347f@outerk (list 'lambda '() q3491@code))))) (list q347f@outerk (list 'lambda '() q3491@code)))) q348d@q348b q348c@q3489))))) '#f '#f))) ((lambda (q3468@t) ((lambda (q346a@ls/false) (if (and q346a@ls/false (apply (lambda (q346c@con q346d@clause* q346e@b q346f@b*) (q2caf@id? q346c@con)) q346a@ls/false)) (apply (lambda (q3474@con q3475@clause* q3476@b q3477@b*) ((lambda (q347c@outerk) (q2e70@bless (list (list 'call/cc (list 'lambda (list q347c@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list q3474@con) (q3467@gen-clauses q3474@con q347c@outerk q3475@clause*)) (cons 'lambda (cons '() (cons q3476@b q3477@b*)))))))))) (gensym))) q346a@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3468@t))) (q2eba@syntax-dispatch q3468@t '(_ (any . each-any) any . each-any)))) q3464@x))) '#f))) (set! q2e8a@define-enumeration-macro (lambda (q34e2@stx) ((lambda (q34e5@set? q34e7@remove-dups) (begin (set! q34e5@set? (lambda (q34fe@x) (or (null? q34fe@x) (and (not (memq (car q34fe@x) (cdr q34fe@x))) (q34e5@set? (cdr q34fe@x)))))) (set! q34e7@remove-dups (lambda (q34fc@ls) (if (null? q34fc@ls) '() (cons (car q34fc@ls) (q34e7@remove-dups (remq (car q34fc@ls) (cdr q34fc@ls))))))) ((lambda (q34e8@t) ((lambda (q34ea@ls/false) (if (and q34ea@ls/false (apply (lambda (q34ec@name q34ed@id* q34ee@maker) (and (q2caf@id? q34ec@name) (q2caf@id? q34ee@maker) (for-all q2caf@id? q34ed@id*))) q34ea@ls/false)) (apply (lambda (q34f2@name q34f3@id* q34f4@maker) ((lambda (q34f8@name* q34f9@mk) (q2e70@bless (list 'begin (list 'define q34f9@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote q34f8@name*)))) (list 'define-syntax q34f2@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote q34f8@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote q34f2@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax q34f4@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote q34f4@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote q34f8@name*)) (cons 'syntax-violation (cons (list 'quote q34f4@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons q34f9@mk '('(n* ...)))))))))))) (q34e7@remove-dups (q2fa9@syntax->datum q34f3@id*)) (gensym))) q34ea@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q34e8@t))) (q2eba@syntax-dispatch q34e8@t '(_ any each-any any)))) q34e2@stx))) '#f '#f))) (set! q2e8c@time-macro (lambda (q3500@stx) ((lambda (q3502@t) ((lambda (q3504@ls/false) (if q3504@ls/false (apply (lambda (q3506@expr) (q2e70@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() q3506@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) q3504@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3502@t))) (q2eba@syntax-dispatch q3502@t '(_ any)))) q3500@stx))) (set! q2e8e@delay-macro (lambda (q3508@stx) ((lambda (q350a@t) ((lambda (q350c@ls/false) (if q350c@ls/false (apply (lambda (q350e@expr) (q2e70@bless (list 'make-promise (list 'lambda '() q350e@expr)))) q350c@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q350a@t))) (q2eba@syntax-dispatch q350a@t '(_ any)))) q3508@stx))) (set! q2e90@assert-macro (lambda (q3510@stx) ((lambda (q3512@t) ((lambda (q3514@ls/false) (if q3514@ls/false (apply (lambda (q3516@expr) ((lambda (q3518@pos) (q2e70@bless (list 'unless q3516@expr (list 'assertion-error (list 'quote q3516@expr) (list 'quote q3518@pos))))) (or (q2f9b@expression-position q3510@stx) (q2f9b@expression-position q3516@expr)))) q3514@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3512@t))) (q2eba@syntax-dispatch q3512@t '(_ any)))) q3510@stx))) (set! q2e92@endianness-macro (lambda (q351a@stx) ((lambda (q351c@t) ((lambda (q351e@ls/false) (if q351e@ls/false (apply (lambda (q3520@e) ((lambda (q3522@t) (if (memv q3522@t '(little)) (q2e70@bless ''little) (if (memv q3522@t '(big)) (q2e70@bless ''big) (q2fa3@syntax-violation '#f '"endianness must be big or little" q351a@stx)))) (q2fa9@syntax->datum q3520@e))) q351e@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q351c@t))) (q2eba@syntax-dispatch q351c@t '(_ any)))) q351a@stx))) (set! q2e94@identifier-syntax-macro (lambda (q3524@stx) ((lambda (q3526@t) ((lambda (q3528@ls/false) (if q3528@ls/false (apply (lambda (q352a@expr) (q2e70@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax q352a@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax q352a@expr) '((syntax (e* ...)))))))))) q3528@ls/false) ((lambda (q352c@t) ((lambda (q352e@ls/false) (if (and q352e@ls/false (apply (lambda (q3530@id1 q3531@expr1 q3532@id2 q3533@expr2 q3534@expr3) (and (q2caf@id? q3530@id1) (q2caf@id? q3532@id2) (q2caf@id? q3533@expr2))) q352e@ls/false)) (apply (lambda (q353a@id1 q353b@expr1 q353c@id2 q353d@expr2 q353e@expr3) (q2e70@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax q353b@expr1)) (list (list 'set! 'id q353d@expr2) (list 'syntax q353e@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons q353b@expr1 '(e* ...))))))))) q352e@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q352c@t))) (q2eba@syntax-dispatch q352c@t '(_ (any any) ((#(scheme-id set!) any any) any))))) q3526@t))) (q2eba@syntax-dispatch q3526@t '(_ any)))) q3524@stx))) (set! q2e96@do-macro (lambda (q3544@stx) ((lambda (q3547@bind) (begin (set! q3547@bind (lambda (q355e@x) ((lambda (q3560@t) ((lambda (q3562@ls/false) (if q3562@ls/false (apply (lambda (q3564@x q3565@init) (list q3564@x q3565@init q3564@x)) q3562@ls/false) ((lambda (q3568@t) ((lambda (q356a@ls/false) (if q356a@ls/false (apply (lambda (q356c@x q356d@init q356e@step) (list q356c@x q356d@init q356e@step)) q356a@ls/false) ((lambda (q3572@t) ((lambda (q3574@ls/false) (if q3574@ls/false (apply (lambda () (q2fa3@syntax-violation '#f '"invalid binding" q3544@stx)) q3574@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3572@t))) (q2eba@syntax-dispatch q3572@t '_))) q3568@t))) (q2eba@syntax-dispatch q3568@t '(any any any)))) q3560@t))) (q2eba@syntax-dispatch q3560@t '(any any)))) q355e@x))) ((lambda (q3548@t) ((lambda (q354a@ls/false) (if q354a@ls/false (apply (lambda (q354c@binding* q354d@test q354e@expr* q354f@command*) ((lambda (q3554@t) ((lambda (q3556@ls/false) (if q3556@ls/false (apply (lambda (q3558@x* q3559@init* q355a@step*) (if (q2cb9@valid-bound-ids? q3558@x*) (q2e70@bless (list 'letrec (list (list 'loop (list 'lambda q3558@x* (list 'if q354d@test (cons 'begin (cons '(if #f #f) q354e@expr*)) (cons 'begin (append q354f@command* (list (cons 'loop q355a@step*)))))))) (cons 'loop q3559@init*))) (q2fa3@syntax-violation '#f '"invalid bindings" q3544@stx))) q3556@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3554@t))) (q2eba@syntax-dispatch q3554@t '#(each (any any any))))) (map q3547@bind q354c@binding*))) q354a@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3548@t))) (q2eba@syntax-dispatch q3548@t '(_ each-any (any . each-any) . each-any)))) q3544@stx))) '#f))) (set! q2e98@let*-macro (lambda (q3576@stx) ((lambda (q3578@t) ((lambda (q357a@ls/false) (if (and q357a@ls/false (apply (lambda (q357c@lhs* q357d@rhs* q357e@b q357f@b*) (for-all q2caf@id? q357c@lhs*)) q357a@ls/false)) (apply (lambda (q3584@lhs* q3585@rhs* q3586@b q3587@b*) (q2e70@bless ((letrec ((q358c@f (lambda (q358e@x*) (if (null? q358e@x*) (cons 'let (cons '() (cons q3586@b q3587@b*))) (list 'let (list (car q358e@x*)) (q358c@f (cdr q358e@x*))))))) q358c@f) (map list q3584@lhs* q3585@rhs*)))) q357a@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3578@t))) (q2eba@syntax-dispatch q3578@t '(_ #(each (any any)) any . each-any)))) q3576@stx))) (set! q2e9a@or-macro (lambda (q3590@stx) ((lambda (q3592@t) ((lambda (q3594@ls/false) (if q3594@ls/false (apply (lambda () '#f) q3594@ls/false) ((lambda (q3596@t) ((lambda (q3598@ls/false) (if q3598@ls/false (apply (lambda (q359a@e q359b@e*) (q2e70@bless ((letrec ((q359e@f (lambda (q35a0@e q35a1@e*) (if (null? q35a1@e*) (list 'begin '#f q35a0@e) (list 'let (list (list 't q35a0@e)) (list 'if 't 't (q359e@f (car q35a1@e*) (cdr q35a1@e*)))))))) q359e@f) q359a@e q359b@e*))) q3598@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3596@t))) (q2eba@syntax-dispatch q3596@t '(_ any . each-any)))) q3592@t))) (q2eba@syntax-dispatch q3592@t '(_)))) q3590@stx))) (set! q2e9c@and-macro (lambda (q35a4@stx) ((lambda (q35a6@t) ((lambda (q35a8@ls/false) (if q35a8@ls/false (apply (lambda () '#t) q35a8@ls/false) ((lambda (q35aa@t) ((lambda (q35ac@ls/false) (if q35ac@ls/false (apply (lambda (q35ae@e q35af@e*) (q2e70@bless ((letrec ((q35b2@f (lambda (q35b4@e q35b5@e*) (if (null? q35b5@e*) (list 'begin '#f q35b4@e) (cons 'if (cons q35b4@e (cons (q35b2@f (car q35b5@e*) (cdr q35b5@e*)) '(#f)))))))) q35b2@f) q35ae@e q35af@e*))) q35ac@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q35aa@t))) (q2eba@syntax-dispatch q35aa@t '(_ any . each-any)))) q35a6@t))) (q2eba@syntax-dispatch q35a6@t '(_)))) q35a4@stx))) (set! q2e9e@cond-macro (lambda (q35b8@stx) ((lambda (q35ba@t) ((lambda (q35bc@ls/false) (if q35bc@ls/false (apply (lambda (q35be@cls q35bf@cls*) (q2e70@bless ((letrec ((q35c2@f (lambda (q35c4@cls q35c5@cls*) (if (null? q35c5@cls*) ((lambda (q35c8@t) ((lambda (q35ca@ls/false) (if q35ca@ls/false (apply (lambda (q35cc@e q35cd@e*) (cons 'begin (cons q35cc@e q35cd@e*))) q35ca@ls/false) ((lambda (q35d0@t) ((lambda (q35d2@ls/false) (if q35d2@ls/false (apply (lambda (q35d4@e q35d5@p) (list 'let (list (list 't q35d4@e)) (list 'if 't (cons q35d5@p '(t))))) q35d2@ls/false) ((lambda (q35d8@t) ((lambda (q35da@ls/false) (if q35da@ls/false (apply (lambda (q35dc@e) (cons 'or (cons q35dc@e '((if #f #f))))) q35da@ls/false) ((lambda (q35de@t) ((lambda (q35e0@ls/false) (if q35e0@ls/false (apply (lambda (q35e2@e q35e3@e*) (list 'if q35e2@e (cons 'begin q35e3@e*))) q35e0@ls/false) ((lambda (q35e6@t) ((lambda (q35e8@ls/false) (if q35e8@ls/false (apply (lambda () (q2fa3@syntax-violation '#f '"invalid last clause" q35b8@stx)) q35e8@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q35e6@t))) (q2eba@syntax-dispatch q35e6@t '_))) q35de@t))) (q2eba@syntax-dispatch q35de@t '(any . each-any)))) q35d8@t))) (q2eba@syntax-dispatch q35d8@t '(any)))) q35d0@t))) (q2eba@syntax-dispatch q35d0@t '(any #(scheme-id =>) any)))) q35c8@t))) (q2eba@syntax-dispatch q35c8@t '(#(scheme-id else) any . each-any)))) q35c4@cls) ((lambda (q35ea@t) ((lambda (q35ec@ls/false) (if q35ec@ls/false (apply (lambda (q35ee@e q35ef@e*) (q2fa3@syntax-violation '#f '"incorrect position of keyword else" q35b8@stx)) q35ec@ls/false) ((lambda (q35f2@t) ((lambda (q35f4@ls/false) (if q35f4@ls/false (apply (lambda (q35f6@e q35f7@p) (list 'let (list (list 't q35f6@e)) (list 'if 't (cons q35f7@p '(t)) (q35c2@f (car q35c5@cls*) (cdr q35c5@cls*))))) q35f4@ls/false) ((lambda (q35fa@t) ((lambda (q35fc@ls/false) (if q35fc@ls/false (apply (lambda (q35fe@e) (list 'or q35fe@e (q35c2@f (car q35c5@cls*) (cdr q35c5@cls*)))) q35fc@ls/false) ((lambda (q3600@t) ((lambda (q3602@ls/false) (if q3602@ls/false (apply (lambda (q3604@e q3605@e*) (list 'if q3604@e (cons 'begin q3605@e*) (q35c2@f (car q35c5@cls*) (cdr q35c5@cls*)))) q3602@ls/false) ((lambda (q3608@t) ((lambda (q360a@ls/false) (if q360a@ls/false (apply (lambda () (q2fa3@syntax-violation '#f '"invalid last clause" q35b8@stx)) q360a@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3608@t))) (q2eba@syntax-dispatch q3608@t '_))) q3600@t))) (q2eba@syntax-dispatch q3600@t '(any . each-any)))) q35fa@t))) (q2eba@syntax-dispatch q35fa@t '(any)))) q35f2@t))) (q2eba@syntax-dispatch q35f2@t '(any #(scheme-id =>) any)))) q35ea@t))) (q2eba@syntax-dispatch q35ea@t '(#(scheme-id else) any . each-any)))) q35c4@cls))))) q35c2@f) q35be@cls q35bf@cls*))) q35bc@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q35ba@t))) (q2eba@syntax-dispatch q35ba@t '(_ any . each-any)))) q35b8@stx))) (set! q2ea0@do-include (lambda (q360c@stx q360d@id q360e@filename) ((lambda (q3612@filename) (begin (if (not (and (string? q3612@filename) (q2caf@id? q360d@id))) (q2fa3@syntax-violation '#f '"invalid syntax" q360c@stx) (void)) (cons (q2e70@bless 'begin) (with-input-from-file q3612@filename (lambda () ((letrec ((q3614@f (lambda (q3616@ls) ((lambda (q3618@x) (if (eof-object? q3618@x) (reverse q3616@ls) (q3614@f (cons (q2c8d@datum->stx q360d@id q3618@x) q3616@ls)))) (q284c@q2769@read-annotated))))) q3614@f) '())))))) (q2cc5@stx->datum q360e@filename)))) (set! q2ea2@include-macro (lambda (q361a@e) ((lambda (q361c@t) ((lambda (q361e@ls/false) (if q361e@ls/false (apply (lambda (q3620@id q3621@filename) (q2ea0@do-include q361a@e q3620@id q3621@filename)) q361e@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q361c@t))) (q2eba@syntax-dispatch q361c@t '(any any)))) q361a@e))) (set! q2ea4@include-into-macro (lambda (q3624@e) ((lambda (q3626@t) ((lambda (q3628@ls/false) (if q3628@ls/false (apply (lambda (q362a@id q362b@filename) (q2ea0@do-include q3624@e q362a@id q362b@filename)) q3628@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3626@t))) (q2eba@syntax-dispatch q3626@t '(_ any any)))) q3624@e))) (set! q2ea6@syntax-rules-macro (lambda (q362e@e) ((lambda (q3630@t) ((lambda (q3632@ls/false) (if q3632@ls/false (apply (lambda (q3634@lits q3635@pat* q3636@tmp*) (begin (q2ec0@verify-literals q3634@lits q362e@e) (q2e70@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons q3634@lits (map (lambda (q363a@pat q363b@tmp) ((lambda (q363e@t) ((lambda (q3640@ls/false) (if q3640@ls/false (apply (lambda (q3642@rest) (list (cons 'g q3642@rest) (list 'syntax q363b@tmp))) q3640@ls/false) ((lambda (q3644@t) ((lambda (q3646@ls/false) (if q3646@ls/false (apply (lambda () (q2fa3@syntax-violation '#f '"invalid syntax-rules pattern" q362e@e q363a@pat)) q3646@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3644@t))) (q2eba@syntax-dispatch q3644@t '_))) q363e@t))) (q2eba@syntax-dispatch q363e@t '(_ . any)))) q363a@pat)) q3635@pat* q3636@tmp*)))))))) q3632@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3630@t))) (q2eba@syntax-dispatch q3630@t '(_ each-any . #(each (any any)))))) q362e@e))) (set! q2ea8@quasiquote-macro ((lambda () ((lambda (q3649@datum q3665@quasicons* q3667@quasicons q3669@quasiappend q366b@quasivector q366d@vquasi q366f@quasi) (begin (set! q3649@datum (lambda (q374a@x) (list (q2e44@scheme-stx 'quote) (q2c97@mkstx q374a@x '() '() '())))) (set! q3665@quasicons* (lambda (q3742@x q3743@y) ((letrec ((q3746@f (lambda (q3748@x) (if (null? q3748@x) q3743@y (q3667@quasicons (car q3748@x) (q3746@f (cdr q3748@x))))))) q3746@f) q3742@x))) (set! q3667@quasicons (lambda (q371c@x q371d@y) ((lambda (q3720@t) ((lambda (q3722@ls/false) (if q3722@ls/false (apply (lambda (q3724@dy) ((lambda (q3726@t) ((lambda (q3728@ls/false) (if q3728@ls/false (apply (lambda (q372a@dx) (list (q2e44@scheme-stx 'quote) (cons q372a@dx q3724@dy))) q3728@ls/false) ((lambda (q372c@t) ((lambda (q372e@ls/false) (if q372e@ls/false (apply (lambda () ((lambda (q3730@t) ((lambda (q3732@ls/false) (if q3732@ls/false (apply (lambda () (list (q2e44@scheme-stx 'list) q371c@x)) q3732@ls/false) ((lambda (q3734@t) ((lambda (q3736@ls/false) (if q3736@ls/false (apply (lambda () (list (q2e44@scheme-stx 'cons) q371c@x q371d@y)) q3736@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3734@t))) (q2eba@syntax-dispatch q3734@t '_))) q3730@t))) (q2eba@syntax-dispatch q3730@t '()))) q3724@dy)) q372e@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q372c@t))) (q2eba@syntax-dispatch q372c@t '_))) q3726@t))) (q2eba@syntax-dispatch q3726@t '(#(scheme-id quote) any)))) q371c@x)) q3722@ls/false) ((lambda (q3738@t) ((lambda (q373a@ls/false) (if q373a@ls/false (apply (lambda (q373c@stuff) (cons* (q2e44@scheme-stx 'list) q371c@x q373c@stuff)) q373a@ls/false) ((lambda (q373e@t) ((lambda (q3740@ls/false) (if q3740@ls/false (apply (lambda () (list (q2e44@scheme-stx 'cons) q371c@x q371d@y)) q3740@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q373e@t))) (q2eba@syntax-dispatch q373e@t '_))) q3738@t))) (q2eba@syntax-dispatch q3738@t '(#(scheme-id list) . each-any)))) q3720@t))) (q2eba@syntax-dispatch q3720@t '(#(scheme-id quote) any)))) q371d@y))) (set! q3669@quasiappend (lambda (q3702@x q3703@y) ((lambda (q3706@ls) (if (null? q3706@ls) (list (q2e44@scheme-stx 'quote) '()) (if (null? (cdr q3706@ls)) (car q3706@ls) (cons* (q2e44@scheme-stx 'append) q3706@ls)))) ((letrec ((q3708@f (lambda (q370a@x) (if (null? q370a@x) ((lambda (q370c@t) ((lambda (q370e@ls/false) (if q370e@ls/false (apply (lambda () '()) q370e@ls/false) ((lambda (q3710@t) ((lambda (q3712@ls/false) (if q3712@ls/false (apply (lambda () (list q3703@y)) q3712@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3710@t))) (q2eba@syntax-dispatch q3710@t '_))) q370c@t))) (q2eba@syntax-dispatch q370c@t '(#(scheme-id quote) ())))) q3703@y) ((lambda (q3714@t) ((lambda (q3716@ls/false) (if q3716@ls/false (apply (lambda () (q3708@f (cdr q370a@x))) q3716@ls/false) ((lambda (q3718@t) ((lambda (q371a@ls/false) (if q371a@ls/false (apply (lambda () (cons (car q370a@x) (q3708@f (cdr q370a@x)))) q371a@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3718@t))) (q2eba@syntax-dispatch q3718@t '_))) q3714@t))) (q2eba@syntax-dispatch q3714@t '(#(scheme-id quote) ())))) (car q370a@x)))))) q3708@f) q3702@x)))) (set! q366b@quasivector (lambda (q36d0@x) ((lambda (q36d2@pat-x) ((lambda (q36d4@t) ((lambda (q36d6@ls/false) (if q36d6@ls/false (apply (lambda (q36d8@x*) (list (q2e44@scheme-stx 'quote) (list->vector q36d8@x*))) q36d6@ls/false) ((lambda (q36da@t) ((lambda (q36dc@ls/false) (if q36dc@ls/false (apply (lambda () ((letrec ((q36de@f (lambda (q36e0@x q36e1@k) ((lambda (q36e4@t) ((lambda (q36e6@ls/false) (if q36e6@ls/false (apply (lambda (q36e8@x*) (q36e1@k (map (lambda (q36ea@x) (list (q2e44@scheme-stx 'quote) q36ea@x)) q36e8@x*))) q36e6@ls/false) ((lambda (q36ec@t) ((lambda (q36ee@ls/false) (if q36ee@ls/false (apply (lambda (q36f0@x*) (q36e1@k q36f0@x*)) q36ee@ls/false) ((lambda (q36f2@t) ((lambda (q36f4@ls/false) (if q36f4@ls/false (apply (lambda (q36f6@x q36f7@y) (q36de@f q36f7@y (lambda (q36fa@ls) (q36e1@k (cons q36f6@x q36fa@ls))))) q36f4@ls/false) ((lambda (q36fc@t) ((lambda (q36fe@ls/false) (if q36fe@ls/false (apply (lambda () (list (q2e44@scheme-stx 'list->vector) q36d2@pat-x)) q36fe@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q36fc@t))) (q2eba@syntax-dispatch q36fc@t '_))) q36f2@t))) (q2eba@syntax-dispatch q36f2@t '(#(scheme-id cons) any any)))) q36ec@t))) (q2eba@syntax-dispatch q36ec@t '(#(scheme-id list) . each-any)))) q36e4@t))) (q2eba@syntax-dispatch q36e4@t '(#(scheme-id quote) each-any)))) q36e0@x)))) q36de@f) q36d0@x (lambda (q3700@ls) (cons* (q2e44@scheme-stx 'vector) q3700@ls)))) q36dc@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q36da@t))) (q2eba@syntax-dispatch q36da@t '_))) q36d4@t))) (q2eba@syntax-dispatch q36d4@t '(#(scheme-id quote) each-any)))) q36d2@pat-x)) q36d0@x))) (set! q366d@vquasi (lambda (q36ae@p q36af@lev) ((lambda (q36b2@t) ((lambda (q36b4@ls/false) (if q36b4@ls/false (apply (lambda (q36b6@p q36b7@q) ((lambda (q36ba@t) ((lambda (q36bc@ls/false) (if q36bc@ls/false (apply (lambda (q36be@p) (if (= q36af@lev '0) (q3665@quasicons* q36be@p (q366d@vquasi q36b7@q q36af@lev)) (q3667@quasicons (q3667@quasicons (q3649@datum 'unquote) (q366f@quasi q36be@p (- q36af@lev '1))) (q366d@vquasi q36b7@q q36af@lev)))) q36bc@ls/false) ((lambda (q36c0@t) ((lambda (q36c2@ls/false) (if q36c2@ls/false (apply (lambda (q36c4@p) (if (= q36af@lev '0) (q3669@quasiappend q36c4@p (q366d@vquasi q36b7@q q36af@lev)) (q3667@quasicons (q3667@quasicons (q3649@datum 'unquote-splicing) (q366f@quasi q36c4@p (- q36af@lev '1))) (q366d@vquasi q36b7@q q36af@lev)))) q36c2@ls/false) ((lambda (q36c6@t) ((lambda (q36c8@ls/false) (if q36c8@ls/false (apply (lambda (q36ca@p) (q3667@quasicons (q366f@quasi q36ca@p q36af@lev) (q366d@vquasi q36b7@q q36af@lev))) q36c8@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q36c6@t))) (q2eba@syntax-dispatch q36c6@t 'any))) q36c0@t))) (q2eba@syntax-dispatch q36c0@t '(#(scheme-id unquote-splicing) . each-any)))) q36ba@t))) (q2eba@syntax-dispatch q36ba@t '(#(scheme-id unquote) . each-any)))) q36b6@p)) q36b4@ls/false) ((lambda (q36cc@t) ((lambda (q36ce@ls/false) (if q36ce@ls/false (apply (lambda () (list (q2e44@scheme-stx 'quote) '())) q36ce@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q36cc@t))) (q2eba@syntax-dispatch q36cc@t '()))) q36b2@t))) (q2eba@syntax-dispatch q36b2@t '(any . any)))) q36ae@p))) (set! q366f@quasi (lambda (q3678@p q3679@lev) ((lambda (q367c@t) ((lambda (q367e@ls/false) (if q367e@ls/false (apply (lambda (q3680@p) (if (= q3679@lev '0) q3680@p (q3667@quasicons (q3649@datum 'unquote) (q366f@quasi (list q3680@p) (- q3679@lev '1))))) q367e@ls/false) ((lambda (q3682@t) ((lambda (q3684@ls/false) (if q3684@ls/false (apply (lambda (q3686@p q3687@q) (if (= q3679@lev '0) (q3665@quasicons* q3686@p (q366f@quasi q3687@q q3679@lev)) (q3667@quasicons (q3667@quasicons (q3649@datum 'unquote) (q366f@quasi q3686@p (- q3679@lev '1))) (q366f@quasi q3687@q q3679@lev)))) q3684@ls/false) ((lambda (q368a@t) ((lambda (q368c@ls/false) (if q368c@ls/false (apply (lambda (q368e@p q368f@q) (if (= q3679@lev '0) (q3669@quasiappend q368e@p (q366f@quasi q368f@q q3679@lev)) (q3667@quasicons (q3667@quasicons (q3649@datum 'unquote-splicing) (q366f@quasi q368e@p (- q3679@lev '1))) (q366f@quasi q368f@q q3679@lev)))) q368c@ls/false) ((lambda (q3692@t) ((lambda (q3694@ls/false) (if q3694@ls/false (apply (lambda (q3696@p) (q3667@quasicons (q3649@datum 'quasiquote) (q366f@quasi (list q3696@p) (+ q3679@lev '1)))) q3694@ls/false) ((lambda (q3698@t) ((lambda (q369a@ls/false) (if q369a@ls/false (apply (lambda (q369c@p q369d@q) (q3667@quasicons (q366f@quasi q369c@p q3679@lev) (q366f@quasi q369d@q q3679@lev))) q369a@ls/false) ((lambda (q36a0@t) ((lambda (q36a2@ls/false) (if (and q36a2@ls/false (apply (lambda (q36a4@x) (not (q2c77@stx? q36a4@x))) q36a2@ls/false)) (apply (lambda (q36a6@x) (q366b@quasivector (q366d@vquasi q36a6@x q3679@lev))) q36a2@ls/false) ((lambda (q36a8@t) ((lambda (q36aa@ls/false) (if q36aa@ls/false (apply (lambda (q36ac@p) (list (q2e44@scheme-stx 'quote) q36ac@p)) q36aa@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q36a8@t))) (q2eba@syntax-dispatch q36a8@t 'any))) q36a0@t))) (q2eba@syntax-dispatch q36a0@t '#(vector each-any)))) q3698@t))) (q2eba@syntax-dispatch q3698@t '(any . any)))) q3692@t))) (q2eba@syntax-dispatch q3692@t '(#(scheme-id quasiquote) any)))) q368a@t))) (q2eba@syntax-dispatch q368a@t '((#(scheme-id unquote-splicing) . each-any) . any)))) q3682@t))) (q2eba@syntax-dispatch q3682@t '((#(scheme-id unquote) . each-any) . any)))) q367c@t))) (q2eba@syntax-dispatch q367c@t '(#(scheme-id unquote) any)))) q3678@p))) (lambda (q3670@x) ((lambda (q3672@t) ((lambda (q3674@ls/false) (if q3674@ls/false (apply (lambda (q3676@e) (q366f@quasi q3676@e '0)) q3674@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3672@t))) (q2eba@syntax-dispatch q3672@t '(_ any)))) q3670@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! q2eaa@quasisyntax-macro ((lambda () ((lambda (q374d@quasi) (begin (set! q374d@quasi (lambda (q3768@p q3769@lev) ((lambda (q376c@t) ((lambda (q376e@ls/false) (if q376e@ls/false (apply (lambda (q3770@p) (if (= q3769@lev '0) ((lambda (q3772@g) (values (list q3772@g) (list q3770@p) q3772@g)) (gensym)) (call-with-values (lambda () (q374d@quasi q3770@p (- q3769@lev '1))) (lambda (q377a@q3775 q377b@q3777 q377c@q3779) ((lambda (q3780@p q3781@rhs* q3782@lhs*) (values q3782@lhs* q3781@rhs* (list 'unsyntax q3780@p))) q377c@q3779 q377b@q3777 q377a@q3775))))) q376e@ls/false) ((lambda (q3786@t) ((lambda (q3788@ls/false) (if (and q3788@ls/false (apply (lambda () (= q3769@lev '0)) q3788@ls/false)) (apply (lambda () (q2fa3@syntax-violation '#f '"incorrect use of unsyntax" q3768@p)) q3788@ls/false) ((lambda (q378a@t) ((lambda (q378c@ls/false) (if q378c@ls/false (apply (lambda (q378e@p* q378f@q) (call-with-values (lambda () (q374d@quasi q378f@q q3769@lev)) (lambda (q3798@q3793 q3799@q3795 q379a@q3797) ((lambda (q379e@q q379f@rhs* q37a0@lhs*) (if (= q3769@lev '0) ((lambda (q37a4@g*) (values (append q37a4@g* q37a0@lhs*) (append q378e@p* q379f@rhs*) (append q37a4@g* q379e@q))) (map (lambda (q37a6@x) (gensym)) q378e@p*)) (call-with-values (lambda () (q374d@quasi q378e@p* (- q3769@lev '1))) (lambda (q37ae@q37a9 q37af@q37ab q37b0@q37ad) ((lambda (q37b4@p* q37b5@rhs2* q37b6@lhs2*) (values (append q37b6@lhs2* q37a0@lhs*) (append q37b5@rhs2* q379f@rhs*) (cons (cons 'unsyntax q37b4@p*) q379e@q))) q37b0@q37ad q37af@q37ab q37ae@q37a9))))) q379a@q3797 q3799@q3795 q3798@q3793)))) q378c@ls/false) ((lambda (q37ba@t) ((lambda (q37bc@ls/false) (if q37bc@ls/false (apply (lambda (q37be@p* q37bf@q) (call-with-values (lambda () (q374d@quasi q37bf@q q3769@lev)) (lambda (q37c8@q37c3 q37c9@q37c5 q37ca@q37c7) ((lambda (q37ce@q q37cf@rhs* q37d0@lhs*) (if (= q3769@lev '0) ((lambda (q37d4@g*) (values (append (map (lambda (q37d6@g) (cons q37d6@g '(...))) q37d4@g*) q37d0@lhs*) (append q37be@p* q37cf@rhs*) (append (apply append (map (lambda (q37d8@g) (cons q37d8@g '(...))) q37d4@g*)) q37ce@q))) (map (lambda (q37da@x) (gensym)) q37be@p*)) (call-with-values (lambda () (q374d@quasi q37be@p* (- q3769@lev '1))) (lambda (q37e2@q37dd q37e3@q37df q37e4@q37e1) ((lambda (q37e8@p* q37e9@rhs2* q37ea@lhs2*) (values (append q37ea@lhs2* q37d0@lhs*) (append q37e9@rhs2* q37cf@rhs*) (cons (cons 'unsyntax-splicing q37e8@p*) q37ce@q))) q37e4@q37e1 q37e3@q37df q37e2@q37dd))))) q37ca@q37c7 q37c9@q37c5 q37c8@q37c3)))) q37bc@ls/false) ((lambda (q37ee@t) ((lambda (q37f0@ls/false) (if (and q37f0@ls/false (apply (lambda () (= q3769@lev '0)) q37f0@ls/false)) (apply (lambda () (q2fa3@syntax-violation '#f '"incorrect use of unsyntax-splicing" q3768@p)) q37f0@ls/false) ((lambda (q37f2@t) ((lambda (q37f4@ls/false) (if q37f4@ls/false (apply (lambda (q37f6@p) (call-with-values (lambda () (q374d@quasi q37f6@p (+ q3769@lev '1))) (lambda (q37fe@q37f9 q37ff@q37fb q3800@q37fd) ((lambda (q3804@p q3805@rhs* q3806@lhs*) (values q3806@lhs* q3805@rhs* (list 'quasisyntax q3804@p))) q3800@q37fd q37ff@q37fb q37fe@q37f9)))) q37f4@ls/false) ((lambda (q380a@t) ((lambda (q380c@ls/false) (if q380c@ls/false (apply (lambda (q380e@p q380f@q) (call-with-values (lambda () (q374d@quasi q380e@p q3769@lev)) (lambda (q381e@q3813 q381f@q3815 q3820@q3817) (call-with-values (lambda () (q374d@quasi q380f@q q3769@lev)) (lambda (q3824@q3819 q3825@q381b q3826@q381d) ((lambda (q382a@q q382b@rhs2* q382c@lhs2* q382d@p q382e@rhs* q382f@lhs*) (values (append q382c@lhs2* q382f@lhs*) (append q382b@rhs2* q382e@rhs*) (cons q382d@p q382a@q))) q3826@q381d q3825@q381b q3824@q3819 q3820@q3817 q381f@q3815 q381e@q3813)))))) q380c@ls/false) ((lambda (q3836@t) ((lambda (q3838@ls/false) (if q3838@ls/false (apply (lambda (q383a@x*) (call-with-values (lambda () (q374d@quasi q383a@x* q3769@lev)) (lambda (q3842@q383d q3843@q383f q3844@q3841) ((lambda (q3848@x* q3849@rhs* q384a@lhs*) (values q384a@lhs* q3849@rhs* (list->vector q3848@x*))) q3844@q3841 q3843@q383f q3842@q383d)))) q3838@ls/false) ((lambda (q384e@t) ((lambda (q3850@ls/false) (if q3850@ls/false (apply (lambda () (values '() '() q3768@p)) q3850@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q384e@t))) (q2eba@syntax-dispatch q384e@t '_))) q3836@t))) (q2eba@syntax-dispatch q3836@t '#(vector each-any)))) q380a@t))) (q2eba@syntax-dispatch q380a@t '(any . any)))) q37f2@t))) (q2eba@syntax-dispatch q37f2@t '(#(scheme-id quasisyntax) any)))) q37ee@t))) (q2eba@syntax-dispatch q37ee@t '#(scheme-id unsyntax-splicing)))) q37ba@t))) (q2eba@syntax-dispatch q37ba@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) q378a@t))) (q2eba@syntax-dispatch q378a@t '((#(scheme-id unsyntax) . each-any) . any)))) q3786@t))) (q2eba@syntax-dispatch q3786@t '#(scheme-id unsyntax)))) q376c@t))) (q2eba@syntax-dispatch q376c@t '(#(scheme-id unsyntax) any)))) q3768@p))) (lambda (q374e@x) ((lambda (q3750@t) ((lambda (q3752@ls/false) (if q3752@ls/false (apply (lambda (q3754@e) (call-with-values (lambda () (q374d@quasi q3754@e '0)) (lambda (q375c@q3757 q375d@q3759 q375e@q375b) ((lambda (q3762@v q3763@rhs* q3764@lhs*) (q2e70@bless (list 'syntax-case (cons 'list q3763@rhs*) '() (list q3764@lhs* (list 'syntax q3762@v))))) q375e@q375b q375d@q3759 q375c@q3757)))) q3752@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3750@t))) (q2eba@syntax-dispatch q3750@t '(_ any)))) q374e@x)))) '#f)))) (set! q2eac@define-struct-macro (lambda (q3852@stx) (q2fa3@syntax-violation '#f '"define-struct not supported" q3852@stx))) (set! q2eae@define-record-type-macro (lambda (q3854@x) ((lambda (q3857@id q3859@get-record-name q385b@get-record-constructor-name q385d@get-record-predicate-name q385f@get-clause q3861@foo-rtd-code q3863@parent-rtd-code q3865@parent-rcd-code q3867@foo-rcd-code q3869@get-protocol-code q386b@get-fields q386d@get-mutator-indices q386f@get-mutators q3871@get-accessors q3873@enumerate q3875@do-define-record q3877@verify-clauses) (begin (set! q3857@id (lambda (q3a4a@ctxt . q3a4c@str*) (q2fa7@datum->syntax q3a4a@ctxt (string->symbol (apply string-append (map (lambda (q3a4e@x) (if (symbol? q3a4e@x) (symbol->string q3a4e@x) (if (string? q3a4e@x) q3a4e@x (assertion-violation 'define-record-type '"BUG")))) q3a4c@str*)))))) (set! q3859@get-record-name (lambda (q3a38@spec) ((lambda (q3a3a@t) ((lambda (q3a3c@ls/false) (if q3a3c@ls/false (apply (lambda (q3a3e@foo q3a3f@make-foo q3a40@foo?) q3a3e@foo) q3a3c@ls/false) ((lambda (q3a44@t) ((lambda (q3a46@ls/false) (if q3a46@ls/false (apply (lambda (q3a48@foo) q3a48@foo) q3a46@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3a44@t))) (q2eba@syntax-dispatch q3a44@t 'any))) q3a3a@t))) (q2eba@syntax-dispatch q3a3a@t '(any any any)))) q3a38@spec))) (set! q385b@get-record-constructor-name (lambda (q3a24@spec) ((lambda (q3a26@t) ((lambda (q3a28@ls/false) (if q3a28@ls/false (apply (lambda (q3a2a@foo q3a2b@make-foo q3a2c@foo?) q3a2b@make-foo) q3a28@ls/false) ((lambda (q3a30@t) ((lambda (q3a32@ls/false) (if (and q3a32@ls/false (apply (lambda (q3a34@foo) (q2caf@id? q3a34@foo)) q3a32@ls/false)) (apply (lambda (q3a36@foo) (q3857@id q3a36@foo '"make-" (q2cc5@stx->datum q3a36@foo))) q3a32@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3a30@t))) (q2eba@syntax-dispatch q3a30@t 'any))) q3a26@t))) (q2eba@syntax-dispatch q3a26@t '(any any any)))) q3a24@spec))) (set! q385d@get-record-predicate-name (lambda (q3a10@spec) ((lambda (q3a12@t) ((lambda (q3a14@ls/false) (if q3a14@ls/false (apply (lambda (q3a16@foo q3a17@make-foo q3a18@foo?) q3a18@foo?) q3a14@ls/false) ((lambda (q3a1c@t) ((lambda (q3a1e@ls/false) (if (and q3a1e@ls/false (apply (lambda (q3a20@foo) (q2caf@id? q3a20@foo)) q3a1e@ls/false)) (apply (lambda (q3a22@foo) (q3857@id q3a22@foo (q2cc5@stx->datum q3a22@foo) '"?")) q3a1e@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3a1c@t))) (q2eba@syntax-dispatch q3a1c@t 'any))) q3a12@t))) (q2eba@syntax-dispatch q3a12@t '(any any any)))) q3a10@spec))) (set! q385f@get-clause (lambda (q39fe@id q39ff@ls) ((lambda (q3a02@t) ((lambda (q3a04@ls/false) (if q3a04@ls/false (apply (lambda () '#f) q3a04@ls/false) ((lambda (q3a06@t) ((lambda (q3a08@ls/false) (if q3a08@ls/false (apply (lambda (q3a0a@x q3a0b@rest q3a0c@ls) (if (q2cb7@free-id=? (q2e70@bless q39fe@id) q3a0a@x) (cons q3a0a@x q3a0b@rest) (q385f@get-clause q39fe@id q3a0c@ls))) q3a08@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3a06@t))) (q2eba@syntax-dispatch q3a06@t '((any . any) . any)))) q3a02@t))) (q2eba@syntax-dispatch q3a02@t '()))) q39ff@ls))) (set! q3861@foo-rtd-code (lambda (q39ac@name q39ad@clause* q39ae@parent-rtd-code) ((lambda (q39b3@convert-field-spec*) (begin (set! q39b3@convert-field-spec* (lambda (q39e4@ls) (list->vector (map (lambda (q39e6@x) ((lambda (q39e8@t) ((lambda (q39ea@ls/false) (if q39ea@ls/false (apply (lambda (q39ec@name q39ed@rest) (list 'mutable q39ec@name)) q39ea@ls/false) ((lambda (q39f0@t) ((lambda (q39f2@ls/false) (if q39f2@ls/false (apply (lambda (q39f4@name q39f5@rest) (list 'immutable q39f4@name)) q39f2@ls/false) ((lambda (q39f8@t) ((lambda (q39fa@ls/false) (if q39fa@ls/false (apply (lambda (q39fc@name) (list 'immutable q39fc@name)) q39fa@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q39f8@t))) (q2eba@syntax-dispatch q39f8@t 'any))) q39f0@t))) (q2eba@syntax-dispatch q39f0@t '(#(scheme-id immutable) any . any)))) q39e8@t))) (q2eba@syntax-dispatch q39e8@t '(#(scheme-id mutable) any . any)))) q39e6@x)) q39e4@ls)))) ((lambda (q39b4@uid-code q39b5@sealed? q39b6@opaque? q39b7@fields) (q2e70@bless (list 'make-record-type-descriptor (list 'quote q39ac@name) q39ae@parent-rtd-code q39b4@uid-code q39b5@sealed? q39b6@opaque? q39b7@fields))) ((lambda (q39bc@t) ((lambda (q39be@ls/false) (if q39be@ls/false (apply (lambda () (list 'quote (gensym))) q39be@ls/false) ((lambda (q39c0@t) ((lambda (q39c2@ls/false) (if q39c2@ls/false (apply (lambda (q39c4@uid) (list 'quote q39c4@uid)) q39c2@ls/false) ((lambda (q39c6@t) ((lambda (q39c8@ls/false) (if q39c8@ls/false (apply (lambda () '#f) q39c8@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q39c6@t))) (q2eba@syntax-dispatch q39c6@t '_))) q39c0@t))) (q2eba@syntax-dispatch q39c0@t '(_ any)))) q39bc@t))) (q2eba@syntax-dispatch q39bc@t '(_)))) (q385f@get-clause 'nongenerative q39ad@clause*)) ((lambda (q39ca@t) ((lambda (q39cc@ls/false) (if q39cc@ls/false (apply (lambda () '#t) q39cc@ls/false) ((lambda (q39ce@t) ((lambda (q39d0@ls/false) (if q39d0@ls/false (apply (lambda () '#f) q39d0@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q39ce@t))) (q2eba@syntax-dispatch q39ce@t '_))) q39ca@t))) (q2eba@syntax-dispatch q39ca@t '(_ #(atom #t))))) (q385f@get-clause 'sealed q39ad@clause*)) ((lambda (q39d2@t) ((lambda (q39d4@ls/false) (if q39d4@ls/false (apply (lambda () '#t) q39d4@ls/false) ((lambda (q39d6@t) ((lambda (q39d8@ls/false) (if q39d8@ls/false (apply (lambda () '#f) q39d8@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q39d6@t))) (q2eba@syntax-dispatch q39d6@t '_))) q39d2@t))) (q2eba@syntax-dispatch q39d2@t '(_ #(atom #t))))) (q385f@get-clause 'opaque q39ad@clause*)) ((lambda (q39da@t) ((lambda (q39dc@ls/false) (if q39dc@ls/false (apply (lambda (q39de@field-spec*) (list 'quote (q39b3@convert-field-spec* q39de@field-spec*))) q39dc@ls/false) ((lambda (q39e0@t) ((lambda (q39e2@ls/false) (if q39e2@ls/false (apply (lambda () ''#()) q39e2@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q39e0@t))) (q2eba@syntax-dispatch q39e0@t '_))) q39da@t))) (q2eba@syntax-dispatch q39da@t '(_ . each-any)))) (q385f@get-clause 'fields q39ad@clause*))))) '#f))) (set! q3863@parent-rtd-code (lambda (q3994@clause*) ((lambda (q3996@t) ((lambda (q3998@ls/false) (if q3998@ls/false (apply (lambda (q399a@name) (list 'record-type-descriptor q399a@name)) q3998@ls/false) ((lambda (q399c@t) ((lambda (q399e@ls/false) (if q399e@ls/false (apply (lambda () ((lambda (q39a0@t) ((lambda (q39a2@ls/false) (if q39a2@ls/false (apply (lambda (q39a4@rtd q39a5@rcd) q39a4@rtd) q39a2@ls/false) ((lambda (q39a8@t) ((lambda (q39aa@ls/false) (if q39aa@ls/false (apply (lambda () '#f) q39aa@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q39a8@t))) (q2eba@syntax-dispatch q39a8@t '#(atom #f)))) q39a0@t))) (q2eba@syntax-dispatch q39a0@t '(_ any any)))) (q385f@get-clause 'parent-rtd q3994@clause*))) q399e@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q399c@t))) (q2eba@syntax-dispatch q399c@t '#(atom #f)))) q3996@t))) (q2eba@syntax-dispatch q3996@t '(_ any)))) (q385f@get-clause 'parent q3994@clause*)))) (set! q3865@parent-rcd-code (lambda (q397c@clause*) ((lambda (q397e@t) ((lambda (q3980@ls/false) (if q3980@ls/false (apply (lambda (q3982@name) (list 'record-constructor-descriptor q3982@name)) q3980@ls/false) ((lambda (q3984@t) ((lambda (q3986@ls/false) (if q3986@ls/false (apply (lambda () ((lambda (q3988@t) ((lambda (q398a@ls/false) (if q398a@ls/false (apply (lambda (q398c@rtd q398d@rcd) q398d@rcd) q398a@ls/false) ((lambda (q3990@t) ((lambda (q3992@ls/false) (if q3992@ls/false (apply (lambda () '#f) q3992@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3990@t))) (q2eba@syntax-dispatch q3990@t '#(atom #f)))) q3988@t))) (q2eba@syntax-dispatch q3988@t '(_ any any)))) (q385f@get-clause 'parent-rtd q397c@clause*))) q3986@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3984@t))) (q2eba@syntax-dispatch q3984@t '#(atom #f)))) q397e@t))) (q2eba@syntax-dispatch q397e@t '(_ any)))) (q385f@get-clause 'parent q397c@clause*)))) (set! q3867@foo-rcd-code (lambda (q3974@clause* q3975@foo-rtd q3976@protocol q3977@parent-rcd-code) (list 'make-record-constructor-descriptor q3975@foo-rtd q3977@parent-rcd-code q3976@protocol))) (set! q3869@get-protocol-code (lambda (q3968@clause*) ((lambda (q396a@t) ((lambda (q396c@ls/false) (if q396c@ls/false (apply (lambda (q396e@expr) q396e@expr) q396c@ls/false) ((lambda (q3970@t) ((lambda (q3972@ls/false) (if q3972@ls/false (apply (lambda () '#f) q3972@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3970@t))) (q2eba@syntax-dispatch q3970@t '_))) q396a@t))) (q2eba@syntax-dispatch q396a@t '(_ any)))) (q385f@get-clause 'protocol q3968@clause*)))) (set! q386b@get-fields (lambda (q3956@clause*) ((lambda (q3958@t) ((lambda (q395a@ls/false) (if q395a@ls/false (apply (lambda () '()) q395a@ls/false) ((lambda (q395c@t) ((lambda (q395e@ls/false) (if q395e@ls/false (apply (lambda (q3960@f*) q3960@f*) q395e@ls/false) ((lambda (q3962@t) ((lambda (q3964@ls/false) (if q3964@ls/false (apply (lambda (q3966@rest) (q386b@get-fields q3966@rest)) q3964@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3962@t))) (q2eba@syntax-dispatch q3962@t '(_ . any)))) q395c@t))) (q2eba@syntax-dispatch q395c@t '((#(scheme-id fields) . each-any) . _)))) q3958@t))) (q2eba@syntax-dispatch q3958@t '()))) q3956@clause*))) (set! q386d@get-mutator-indices (lambda (q393e@fields) ((letrec ((q3940@f (lambda (q3942@fields q3943@i) ((lambda (q3946@t) ((lambda (q3948@ls/false) (if q3948@ls/false (apply (lambda () '()) q3948@ls/false) ((lambda (q394a@t) ((lambda (q394c@ls/false) (if q394c@ls/false (apply (lambda (q394e@rest) (cons q3943@i (q3940@f q394e@rest (+ q3943@i '1)))) q394c@ls/false) ((lambda (q3950@t) ((lambda (q3952@ls/false) (if q3952@ls/false (apply (lambda (q3954@rest) (q3940@f q3954@rest (+ q3943@i '1))) q3952@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3950@t))) (q2eba@syntax-dispatch q3950@t '(_ . any)))) q394a@t))) (q2eba@syntax-dispatch q394a@t '((#(scheme-id mutable) . _) . any)))) q3946@t))) (q2eba@syntax-dispatch q3946@t '()))) q3942@fields)))) q3940@f) q393e@fields '0))) (set! q386f@get-mutators (lambda (q3914@foo q3915@fields) ((lambda (q3919@gen-name) (begin (set! q3919@gen-name (lambda (q393c@x) (q2fa7@datum->syntax q3914@foo (string->symbol (string-append (symbol->string (q2fa9@syntax->datum q3914@foo)) '"-" (symbol->string (q2fa9@syntax->datum q393c@x)) '"-set!"))))) ((letrec ((q391a@f (lambda (q391c@fields) ((lambda (q391e@t) ((lambda (q3920@ls/false) (if q3920@ls/false (apply (lambda () '()) q3920@ls/false) ((lambda (q3922@t) ((lambda (q3924@ls/false) (if q3924@ls/false (apply (lambda (q3926@name q3927@accessor q3928@mutator q3929@rest) (cons q3928@mutator (q391a@f q3929@rest))) q3924@ls/false) ((lambda (q392e@t) ((lambda (q3930@ls/false) (if q3930@ls/false (apply (lambda (q3932@name q3933@rest) (cons (q3919@gen-name q3932@name) (q391a@f q3933@rest))) q3930@ls/false) ((lambda (q3936@t) ((lambda (q3938@ls/false) (if q3938@ls/false (apply (lambda (q393a@rest) (q391a@f q393a@rest)) q3938@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3936@t))) (q2eba@syntax-dispatch q3936@t '(_ . any)))) q392e@t))) (q2eba@syntax-dispatch q392e@t '((#(scheme-id mutable) any) . any)))) q3922@t))) (q2eba@syntax-dispatch q3922@t '((#(scheme-id mutable) any any any) . any)))) q391e@t))) (q2eba@syntax-dispatch q391e@t '()))) q391c@fields)))) q391a@f) q3915@fields))) '#f))) (set! q3871@get-accessors (lambda (q38d0@foo q38d1@fields) ((lambda (q38d5@gen-name) (begin (set! q38d5@gen-name (lambda (q3912@x) (q2fa7@datum->syntax q38d0@foo (string->symbol (string-append (symbol->string (q2fa9@syntax->datum q38d0@foo)) '"-" (symbol->string (q2fa9@syntax->datum q3912@x))))))) (map (lambda (q38d6@field) ((lambda (q38d8@t) ((lambda (q38da@ls/false) (if (and q38da@ls/false (apply (lambda (q38dc@name q38dd@accessor q38de@mutator) (q2caf@id? q38dd@accessor)) q38da@ls/false)) (apply (lambda (q38e2@name q38e3@accessor q38e4@mutator) q38e3@accessor) q38da@ls/false) ((lambda (q38e8@t) ((lambda (q38ea@ls/false) (if (and q38ea@ls/false (apply (lambda (q38ec@name q38ed@accessor) (q2caf@id? q38ed@accessor)) q38ea@ls/false)) (apply (lambda (q38f0@name q38f1@accessor) q38f1@accessor) q38ea@ls/false) ((lambda (q38f4@t) ((lambda (q38f6@ls/false) (if (and q38f6@ls/false (apply (lambda (q38f8@name) (q2caf@id? q38f8@name)) q38f6@ls/false)) (apply (lambda (q38fa@name) (q38d5@gen-name q38fa@name)) q38f6@ls/false) ((lambda (q38fc@t) ((lambda (q38fe@ls/false) (if (and q38fe@ls/false (apply (lambda (q3900@name) (q2caf@id? q3900@name)) q38fe@ls/false)) (apply (lambda (q3902@name) (q38d5@gen-name q3902@name)) q38fe@ls/false) ((lambda (q3904@t) ((lambda (q3906@ls/false) (if (and q3906@ls/false (apply (lambda (q3908@name) (q2caf@id? q3908@name)) q3906@ls/false)) (apply (lambda (q390a@name) (q38d5@gen-name q390a@name)) q3906@ls/false) ((lambda (q390c@t) ((lambda (q390e@ls/false) (if q390e@ls/false (apply (lambda (q3910@others) (q2fa3@syntax-violation '#f '"invalid field spec" q38d6@field)) q390e@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q390c@t))) (q2eba@syntax-dispatch q390c@t 'any))) q3904@t))) (q2eba@syntax-dispatch q3904@t 'any))) q38fc@t))) (q2eba@syntax-dispatch q38fc@t '(#(scheme-id immutable) any)))) q38f4@t))) (q2eba@syntax-dispatch q38f4@t '(#(scheme-id mutable) any)))) q38e8@t))) (q2eba@syntax-dispatch q38e8@t '(#(scheme-id immutable) any any)))) q38d8@t))) (q2eba@syntax-dispatch q38d8@t '(#(scheme-id mutable) any any any)))) q38d6@field)) q38d1@fields))) '#f))) (set! q3873@enumerate (lambda (q38c8@ls) ((letrec ((q38ca@f (lambda (q38cc@ls q38cd@i) (if (null? q38cc@ls) '() (cons q38cd@i (q38ca@f (cdr q38cc@ls) (+ q38cd@i '1))))))) q38ca@f) q38c8@ls '0))) (set! q3875@do-define-record (lambda (q38a0@namespec q38a1@clause*) ((lambda (q38a4@foo) ((lambda (q38a6@foo-rtd) ((lambda (q38a8@foo-rcd) ((lambda (q38aa@protocol) ((lambda (q38ac@make-foo) ((lambda (q38ae@fields) ((lambda (q38b0@idx*) ((lambda (q38b2@foo-x*) ((lambda (q38b4@set-foo-x!*) ((lambda (q38b6@set-foo-idx*) ((lambda (q38b8@foo?) ((lambda (q38ba@foo-rtd-code) ((lambda (q38bc@foo-rcd-code) ((lambda (q38be@protocol-code) ((lambda () (q2e70@bless (cons 'begin (cons (list 'define q38a6@foo-rtd q38ba@foo-rtd-code) (cons (list 'define q38aa@protocol q38be@protocol-code) (cons (list 'define q38a8@foo-rcd q38bc@foo-rcd-code) (cons (list 'define-syntax q38a4@foo (list 'list ''$rtd (list 'syntax q38a6@foo-rtd) (list 'syntax q38a8@foo-rcd))) (cons (list 'define q38b8@foo? (list 'record-predicate q38a6@foo-rtd)) (cons (list 'define q38ac@make-foo (list 'record-constructor q38a8@foo-rcd)) (append (map (lambda (q38c0@foo-x q38c1@idx) (list 'define q38c0@foo-x (list 'record-accessor q38a6@foo-rtd q38c1@idx))) q38b2@foo-x* q38b0@idx*) (map (lambda (q38c4@set-foo-x! q38c5@idx) (list 'define q38c4@set-foo-x! (list 'record-mutator q38a6@foo-rtd q38c5@idx))) q38b4@set-foo-x!* q38b6@set-foo-idx*))))))))))))) (q3869@get-protocol-code q38a1@clause*))) (q3867@foo-rcd-code q38a1@clause* q38a6@foo-rtd q38aa@protocol (q3865@parent-rcd-code q38a1@clause*)))) (q3861@foo-rtd-code q38a4@foo q38a1@clause* (q3863@parent-rtd-code q38a1@clause*)))) (q385d@get-record-predicate-name q38a0@namespec))) (q386d@get-mutator-indices q38ae@fields))) (q386f@get-mutators q38a4@foo q38ae@fields))) (q3871@get-accessors q38a4@foo q38ae@fields))) (q3873@enumerate q38ae@fields))) (q386b@get-fields q38a1@clause*))) (q385b@get-record-constructor-name q38a0@namespec))) (gensym))) (gensym))) (gensym))) (q3859@get-record-name q38a0@namespec)))) (set! q3877@verify-clauses (lambda (q3880@x q3881@cls*) ((lambda (q3885@valid-kwds q3887@free-id-member?) (begin (set! q3885@valid-kwds (map q2e70@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! q3887@free-id-member? (lambda (q389c@x q389d@ls) (and (pair? q389d@ls) (or (q2cb7@free-id=? q389c@x (car q389d@ls)) (q3887@free-id-member? q389c@x (cdr q389d@ls)))))) ((letrec ((q3888@f (lambda (q388a@cls* q388b@seen*) (if (not (null? q388a@cls*)) ((lambda (q388e@t) ((lambda (q3890@ls/false) (if q3890@ls/false (apply (lambda (q3892@kwd q3893@rest) (if (or (not (q2caf@id? q3892@kwd)) (not (q3887@free-id-member? q3892@kwd q3885@valid-kwds))) (q2fa3@syntax-violation '#f '"not a valid define-record-type keyword" q3892@kwd) (if (q2cbd@bound-id-member? q3892@kwd q388b@seen*) (q2fa3@syntax-violation '#f '"duplicate use of keyword " q3880@x q3892@kwd) (q3888@f (cdr q388a@cls*) (cons q3892@kwd q388b@seen*))))) q3890@ls/false) ((lambda (q3896@t) ((lambda (q3898@ls/false) (if q3898@ls/false (apply (lambda (q389a@cls) (q2fa3@syntax-violation '#f '"malformed define-record-type clause" q389a@cls)) q3898@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3896@t))) (q2eba@syntax-dispatch q3896@t 'any))) q388e@t))) (q2eba@syntax-dispatch q388e@t '(any . any)))) (car q388a@cls*)) (void))))) q3888@f) q3881@cls* '()))) '#f '#f))) ((lambda (q3878@t) ((lambda (q387a@ls/false) (if q387a@ls/false (apply (lambda (q387c@namespec q387d@clause*) (begin (q3877@verify-clauses q3854@x q387d@clause*) (q3875@do-define-record q387c@namespec q387d@clause*))) q387a@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3878@t))) (q2eba@syntax-dispatch q3878@t '(_ any . each-any)))) q3854@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! q2eb0@define-condition-type-macro (lambda (q3a50@x) ((lambda (q3a53@mkname) (begin (set! q3a53@mkname (lambda (q3a80@name q3a81@suffix) (q2fa7@datum->syntax q3a80@name (string->symbol (string-append (symbol->string (q2fa9@syntax->datum q3a80@name)) q3a81@suffix))))) ((lambda (q3a54@t) ((lambda (q3a56@ls/false) (if (and q3a56@ls/false (apply (lambda (q3a58@ctxt q3a59@name q3a5a@super q3a5b@constructor q3a5c@predicate q3a5d@field* q3a5e@accessor*) (and (q2caf@id? q3a59@name) (q2caf@id? q3a5a@super) (q2caf@id? q3a5b@constructor) (q2caf@id? q3a5c@predicate) (for-all q2caf@id? q3a5d@field*) (for-all q2caf@id? q3a5e@accessor*))) q3a56@ls/false)) (apply (lambda (q3a66@ctxt q3a67@name q3a68@super q3a69@constructor q3a6a@predicate q3a6b@field* q3a6c@accessor*) ((lambda (q3a74@aux-accessor*) (q2e70@bless (cons 'begin (cons (cons 'define-record-type (cons (list q3a67@name q3a69@constructor (gensym)) (cons (list 'parent q3a68@super) (cons (cons 'fields (map (lambda (q3a76@field q3a77@aux) (list 'immutable q3a76@field q3a77@aux)) q3a6b@field* q3a74@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define q3a6a@predicate (list 'condition-predicate (list 'record-type-descriptor q3a67@name))) (map (lambda (q3a7a@accessor q3a7b@aux) (list 'define q3a7a@accessor (list 'condition-accessor (list 'record-type-descriptor q3a67@name) q3a7b@aux))) q3a6c@accessor* q3a74@aux-accessor*)))))) (map (lambda (q3a7e@x) (gensym)) q3a6c@accessor*))) q3a56@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3a54@t))) (q2eba@syntax-dispatch q3a54@t '(any any any any any . #(each (any any)))))) q3a50@x))) '#f))) (set! q2eb2@incorrect-usage-macro (lambda (q3a84@e) (q2fa3@syntax-violation '#f '"incorrect usage of auxiliary keyword" q3a84@e))) (set! q2eb4@parameterize-macro (lambda (q3a86@e) ((lambda (q3a88@t) ((lambda (q3a8a@ls/false) (if q3a8a@ls/false (apply (lambda (q3a8c@b q3a8d@b*) (q2e70@bless (cons 'let (cons '() (cons q3a8c@b q3a8d@b*))))) q3a8a@ls/false) ((lambda (q3a90@t) ((lambda (q3a92@ls/false) (if q3a92@ls/false (apply (lambda (q3a94@olhs* q3a95@orhs* q3a96@b q3a97@b*) ((lambda (q3a9c@lhs* q3a9d@rhs*) (q2e70@bless (cons (list 'lambda (append q3a9c@lhs* q3a9d@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (q3aa0@lhs q3aa1@rhs) (list 'let (list (list 't (list q3aa0@lhs))) (list q3aa0@lhs q3aa1@rhs) (cons 'set! (cons q3aa1@rhs '(t))))) q3a9c@lhs* q3a9d@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons q3a96@b q3a97@b*))) '(swap)))))) (append q3a94@olhs* q3a95@orhs*)))) (q2f91@generate-temporaries q3a94@olhs*) (q2f91@generate-temporaries q3a95@orhs*))) q3a92@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3a90@t))) (q2eba@syntax-dispatch q3a90@t '(_ #(each (any any)) any . each-any)))) q3a88@t))) (q2eba@syntax-dispatch q3a88@t '(_ () any . each-any)))) q3a86@e))) (set! q2eb6@foreign-call-transformer (lambda (q3aa4@e q3aa5@r q3aa6@mr) ((lambda (q3aaa@t) ((lambda (q3aac@ls/false) (if q3aac@ls/false (apply (lambda (q3aae@name q3aaf@arg*) (cons 'foreign-call (cons (q2edc@chi-expr q3aae@name q3aa5@r q3aa6@mr) (q2ed8@chi-expr* q3aaf@arg* q3aa5@r q3aa6@mr)))) q3aac@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3aaa@t))) (q2eba@syntax-dispatch q3aaa@t '(_ any . each-any)))) q3aa4@e))) (set! q2eb8@convert-pattern (lambda (q3ab2@pattern q3ab3@keys) ((lambda (q3ab7@cvt* q3ab9@cvt) (begin (set! q3ab7@cvt* (lambda (q3b56@p* q3b57@n q3b58@ids) (if (null? q3b56@p*) (values '() q3b58@ids) (call-with-values (lambda () (q3ab7@cvt* (cdr q3b56@p*) q3b57@n q3b58@ids)) (lambda (q3b60@q3b5d q3b61@q3b5f) ((lambda (q3b64@ids q3b65@y) (call-with-values (lambda () (q3ab9@cvt (car q3b56@p*) q3b57@n q3b64@ids)) (lambda (q3b6c@q3b69 q3b6d@q3b6b) ((lambda (q3b70@ids q3b71@x) (values (cons q3b71@x q3b65@y) q3b70@ids)) q3b6d@q3b6b q3b6c@q3b69)))) q3b61@q3b5f q3b60@q3b5d)))))) (set! q3ab9@cvt (lambda (q3aba@p q3abb@n q3abc@ids) ((lambda (q3ac0@t) ((lambda (q3ac2@ls/false) (if (and q3ac2@ls/false (apply (lambda (q3ac4@id) (q2caf@id? q3ac4@id)) q3ac2@ls/false)) (apply (lambda (q3ac6@id) (if (q2cbd@bound-id-member? q3aba@p q3ab3@keys) (values (vector 'free-id q3aba@p) q3abc@ids) (if (q2cb7@free-id=? q3aba@p (q2e44@scheme-stx '_)) (values '_ q3abc@ids) (values 'any (cons (cons q3aba@p q3abb@n) q3abc@ids))))) q3ac2@ls/false) ((lambda (q3ac8@t) ((lambda (q3aca@ls/false) (if (and q3aca@ls/false (apply (lambda (q3acc@p q3acd@dots) (q2ebc@ellipsis? q3acd@dots)) q3aca@ls/false)) (apply (lambda (q3ad0@p q3ad1@dots) (call-with-values (lambda () (q3ab9@cvt q3ad0@p (+ q3abb@n '1) q3abc@ids)) (lambda (q3ad8@q3ad5 q3ad9@q3ad7) ((lambda (q3adc@ids q3add@p) (values (if (eq? q3add@p 'any) 'each-any (vector 'each q3add@p)) q3adc@ids)) q3ad9@q3ad7 q3ad8@q3ad5)))) q3aca@ls/false) ((lambda (q3ae0@t) ((lambda (q3ae2@ls/false) (if (and q3ae2@ls/false (apply (lambda (q3ae4@x q3ae5@dots q3ae6@ys q3ae7@z) (q2ebc@ellipsis? q3ae5@dots)) q3ae2@ls/false)) (apply (lambda (q3aec@x q3aed@dots q3aee@ys q3aef@z) (call-with-values (lambda () (q3ab9@cvt q3aef@z q3abb@n q3abc@ids)) (lambda (q3af8@q3af5 q3af9@q3af7) ((lambda (q3afc@ids q3afd@z) (call-with-values (lambda () (q3ab7@cvt* q3aee@ys q3abb@n q3afc@ids)) (lambda (q3b04@q3b01 q3b05@q3b03) ((lambda (q3b08@ids q3b09@ys) (call-with-values (lambda () (q3ab9@cvt q3aec@x (+ q3abb@n '1) q3b08@ids)) (lambda (q3b10@q3b0d q3b11@q3b0f) ((lambda (q3b14@ids q3b15@x) (values (vector 'each+ q3b15@x (reverse q3b09@ys) q3afd@z) q3b14@ids)) q3b11@q3b0f q3b10@q3b0d)))) q3b05@q3b03 q3b04@q3b01)))) q3af9@q3af7 q3af8@q3af5)))) q3ae2@ls/false) ((lambda (q3b18@t) ((lambda (q3b1a@ls/false) (if q3b1a@ls/false (apply (lambda (q3b1c@x q3b1d@y) (call-with-values (lambda () (q3ab9@cvt q3b1d@y q3abb@n q3abc@ids)) (lambda (q3b24@q3b21 q3b25@q3b23) ((lambda (q3b28@ids q3b29@y) (call-with-values (lambda () (q3ab9@cvt q3b1c@x q3abb@n q3b28@ids)) (lambda (q3b30@q3b2d q3b31@q3b2f) ((lambda (q3b34@ids q3b35@x) (values (cons q3b35@x q3b29@y) q3b34@ids)) q3b31@q3b2f q3b30@q3b2d)))) q3b25@q3b23 q3b24@q3b21)))) q3b1a@ls/false) ((lambda (q3b38@t) ((lambda (q3b3a@ls/false) (if q3b3a@ls/false (apply (lambda () (values '() q3abc@ids)) q3b3a@ls/false) ((lambda (q3b3c@t) ((lambda (q3b3e@ls/false) (if (and q3b3e@ls/false (apply (lambda (q3b40@p) (not (q2c77@stx? q3b40@p))) q3b3e@ls/false)) (apply (lambda (q3b42@p) (call-with-values (lambda () (q3ab9@cvt q3b42@p q3abb@n q3abc@ids)) (lambda (q3b48@q3b45 q3b49@q3b47) ((lambda (q3b4c@ids q3b4d@p) (values (vector 'vector q3b4d@p) q3b4c@ids)) q3b49@q3b47 q3b48@q3b45)))) q3b3e@ls/false) ((lambda (q3b50@t) ((lambda (q3b52@ls/false) (if q3b52@ls/false (apply (lambda (q3b54@datum) (values (vector 'atom (q2cc5@stx->datum q3b54@datum)) q3abc@ids)) q3b52@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3b50@t))) (q2eba@syntax-dispatch q3b50@t 'any))) q3b3c@t))) (q2eba@syntax-dispatch q3b3c@t '#(vector each-any)))) q3b38@t))) (q2eba@syntax-dispatch q3b38@t '()))) q3b18@t))) (q2eba@syntax-dispatch q3b18@t '(any . any)))) q3ae0@t))) (q2eba@syntax-dispatch q3ae0@t '(any any . #(each+ any () any))))) q3ac8@t))) (q2eba@syntax-dispatch q3ac8@t '(any any)))) q3ac0@t))) (q2eba@syntax-dispatch q3ac0@t 'any))) q3aba@p))) (q3ab9@cvt q3ab2@pattern '0 '()))) '#f '#f))) (set! q2eba@syntax-dispatch ((lambda () ((lambda (q3b75@stx^ q3b77@match-each q3b79@match-each+ q3b7b@match-each-any q3b7d@match-empty q3b7f@combine q3b81@match* q3b83@match) (begin (set! q3b75@stx^ (lambda (q3c50@e q3c51@m* q3c52@s* q3c53@ae*) (if (and (null? q3c51@m*) (null? q3c52@s*) (null? q3c53@ae*)) q3c50@e (q2c97@mkstx q3c50@e q3c51@m* q3c52@s* q3c53@ae*)))) (set! q3b77@match-each (lambda (q3c30@e q3c31@p q3c32@m* q3c33@s* q3c34@ae*) (if (pair? q3c30@e) ((lambda (q3c3a@first) (and q3c3a@first ((lambda (q3c3c@rest) (and q3c3c@rest (cons q3c3a@first q3c3c@rest))) (q3b77@match-each (cdr q3c30@e) q3c31@p q3c32@m* q3c33@s* q3c34@ae*)))) (q3b83@match (car q3c30@e) q3c31@p q3c32@m* q3c33@s* q3c34@ae* '())) (if (null? q3c30@e) '() (if (q2c77@stx? q3c30@e) (and (not (q2c2d@top-marked? q3c32@m*)) (call-with-values (lambda () (q2c95@join-wraps q3c32@m* q3c33@s* q3c34@ae* q3c30@e)) (lambda (q3c44@q3c3f q3c45@q3c41 q3c46@q3c43) ((lambda (q3c4a@ae* q3c4b@s* q3c4c@m*) (q3b77@match-each (q2c7b@stx-expr q3c30@e) q3c31@p q3c4c@m* q3c4b@s* q3c4a@ae*)) q3c46@q3c43 q3c45@q3c41 q3c44@q3c3f)))) (if (q284e@q276d@annotation? q3c30@e) (q3b77@match-each (q2850@q2771@annotation-expression q3c30@e) q3c31@p q3c32@m* q3c33@s* q3c34@ae*) '#f)))))) (set! q3b79@match-each+ (lambda (q3bf0@e q3bf1@x-pat q3bf2@y-pat q3bf3@z-pat q3bf4@m* q3bf5@s* q3bf6@ae* q3bf7@r) ((letrec ((q3c00@f (lambda (q3c02@e q3c03@m* q3c04@s* q3c05@ae*) (if (pair? q3c02@e) (call-with-values (lambda () (q3c00@f (cdr q3c02@e) q3c03@m* q3c04@s* q3c05@ae*)) (lambda (q3c10@q3c0b q3c11@q3c0d q3c12@q3c0f) ((lambda (q3c16@r q3c17@y-pat q3c18@xr*) (if q3c16@r (if (null? q3c17@y-pat) ((lambda (q3c1c@xr) (if q3c1c@xr (values (cons q3c1c@xr q3c18@xr*) q3c17@y-pat q3c16@r) (values '#f '#f '#f))) (q3b83@match (car q3c02@e) q3bf1@x-pat q3c03@m* q3c04@s* q3c05@ae* '())) (values '() (cdr q3c17@y-pat) (q3b83@match (car q3c02@e) (car q3c17@y-pat) q3c03@m* q3c04@s* q3c05@ae* q3c16@r))) (values '#f '#f '#f))) q3c12@q3c0f q3c11@q3c0d q3c10@q3c0b))) (if (q2c77@stx? q3c02@e) (if (q2c2d@top-marked? q3c03@m*) (values '() q3bf2@y-pat (q3b83@match q3c02@e q3bf3@z-pat q3c03@m* q3c04@s* q3c05@ae* q3bf7@r)) (call-with-values (lambda () (q2c95@join-wraps q3c03@m* q3c04@s* q3c05@ae* q3c02@e)) (lambda (q3c24@q3c1f q3c25@q3c21 q3c26@q3c23) ((lambda (q3c2a@ae* q3c2b@s* q3c2c@m*) (q3c00@f (q2c7b@stx-expr q3c02@e) q3c2c@m* q3c2b@s* q3c2a@ae*)) q3c26@q3c23 q3c25@q3c21 q3c24@q3c1f)))) (if (q284e@q276d@annotation? q3c02@e) (q3c00@f (q2850@q2771@annotation-expression q3c02@e) q3c03@m* q3c04@s* q3c05@ae*) (values '() q3bf2@y-pat (q3b83@match q3c02@e q3bf3@z-pat q3c03@m* q3c04@s* q3c05@ae* q3bf7@r)))))))) q3c00@f) q3bf0@e q3bf4@m* q3bf5@s* q3bf6@ae*))) (set! q3b7b@match-each-any (lambda (q3bd4@e q3bd5@m* q3bd6@s* q3bd7@ae*) (if (pair? q3bd4@e) ((lambda (q3bdc@l) (and q3bdc@l (cons (q3b75@stx^ (car q3bd4@e) q3bd5@m* q3bd6@s* q3bd7@ae*) q3bdc@l))) (q3b7b@match-each-any (cdr q3bd4@e) q3bd5@m* q3bd6@s* q3bd7@ae*)) (if (null? q3bd4@e) '() (if (q2c77@stx? q3bd4@e) (and (not (q2c2d@top-marked? q3bd5@m*)) (call-with-values (lambda () (q2c95@join-wraps q3bd5@m* q3bd6@s* q3bd7@ae* q3bd4@e)) (lambda (q3be4@q3bdf q3be5@q3be1 q3be6@q3be3) ((lambda (q3bea@ae* q3beb@s* q3bec@m*) (q3b7b@match-each-any (q2c7b@stx-expr q3bd4@e) q3bec@m* q3beb@s* q3bea@ae*)) q3be6@q3be3 q3be5@q3be1 q3be4@q3bdf)))) (if (q284e@q276d@annotation? q3bd4@e) (q3b7b@match-each-any (q2850@q2771@annotation-expression q3bd4@e) q3bd5@m* q3bd6@s* q3bd7@ae*) '#f)))))) (set! q3b7d@match-empty (lambda (q3bce@p q3bcf@r) (if (null? q3bce@p) q3bcf@r (if (eq? q3bce@p '_) q3bcf@r (if (eq? q3bce@p 'any) (cons '() q3bcf@r) (if (pair? q3bce@p) (q3b7d@match-empty (car q3bce@p) (q3b7d@match-empty (cdr q3bce@p) q3bcf@r)) (if (eq? q3bce@p 'each-any) (cons '() q3bcf@r) ((lambda (q3bd2@t) (if (memv q3bd2@t '(each)) (q3b7d@match-empty (vector-ref q3bce@p '1) q3bcf@r) (if (memv q3bd2@t '(each+)) (q3b7d@match-empty (vector-ref q3bce@p '1) (q3b7d@match-empty (reverse (vector-ref q3bce@p '2)) (q3b7d@match-empty (vector-ref q3bce@p '3) q3bcf@r))) (if (memv q3bd2@t '(free-id atom)) q3bcf@r (if (memv q3bd2@t '(scheme-id atom)) q3bcf@r (if (memv q3bd2@t '(vector)) (q3b7d@match-empty (vector-ref q3bce@p '1) q3bcf@r) (assertion-violation 'syntax-dispatch '"invalid pattern" q3bce@p))))))) (vector-ref q3bce@p '0))))))))) (set! q3b7f@combine (lambda (q3bca@r* q3bcb@r) (if (null? (car q3bca@r*)) q3bcb@r (cons (map car q3bca@r*) (q3b7f@combine (map cdr q3bca@r*) q3bcb@r))))) (set! q3b81@match* (lambda (q3ba6@e q3ba7@p q3ba8@m* q3ba9@s* q3baa@ae* q3bab@r) (if (null? q3ba7@p) (and (null? q3ba6@e) q3bab@r) (if (pair? q3ba7@p) (and (pair? q3ba6@e) (q3b83@match (car q3ba6@e) (car q3ba7@p) q3ba8@m* q3ba9@s* q3baa@ae* (q3b83@match (cdr q3ba6@e) (cdr q3ba7@p) q3ba8@m* q3ba9@s* q3baa@ae* q3bab@r))) (if (eq? q3ba7@p 'each-any) ((lambda (q3bb2@l) (and q3bb2@l (cons q3bb2@l q3bab@r))) (q3b7b@match-each-any q3ba6@e q3ba8@m* q3ba9@s* q3baa@ae*)) ((lambda (q3bb4@t) (if (memv q3bb4@t '(each)) (if (null? q3ba6@e) (q3b7d@match-empty (vector-ref q3ba7@p '1) q3bab@r) ((lambda (q3bb6@r*) (and q3bb6@r* (q3b7f@combine q3bb6@r* q3bab@r))) (q3b77@match-each q3ba6@e (vector-ref q3ba7@p '1) q3ba8@m* q3ba9@s* q3baa@ae*))) (if (memv q3bb4@t '(free-id)) (and (symbol? q3ba6@e) (q2c2d@top-marked? q3ba8@m*) (q2cb7@free-id=? (q3b75@stx^ q3ba6@e q3ba8@m* q3ba9@s* q3baa@ae*) (vector-ref q3ba7@p '1)) q3bab@r) (if (memv q3bb4@t '(scheme-id)) (and (symbol? q3ba6@e) (q2c2d@top-marked? q3ba8@m*) (q2cb7@free-id=? (q3b75@stx^ q3ba6@e q3ba8@m* q3ba9@s* q3baa@ae*) (q2e44@scheme-stx (vector-ref q3ba7@p '1))) q3bab@r) (if (memv q3bb4@t '(each+)) (call-with-values (lambda () (q3b79@match-each+ q3ba6@e (vector-ref q3ba7@p '1) (vector-ref q3ba7@p '2) (vector-ref q3ba7@p '3) q3ba8@m* q3ba9@s* q3baa@ae* q3bab@r)) (lambda (q3bbe@q3bb9 q3bbf@q3bbb q3bc0@q3bbd) ((lambda (q3bc4@r q3bc5@y-pat q3bc6@xr*) (and q3bc4@r (null? q3bc5@y-pat) (if (null? q3bc6@xr*) (q3b7d@match-empty (vector-ref q3ba7@p '1) q3bc4@r) (q3b7f@combine q3bc6@xr* q3bc4@r)))) q3bc0@q3bbd q3bbf@q3bbb q3bbe@q3bb9))) (if (memv q3bb4@t '(atom)) (and (fast-equal? (vector-ref q3ba7@p '1) (q2cc3@strip q3ba6@e q3ba8@m*)) q3bab@r) (if (memv q3bb4@t '(vector)) (and (vector? q3ba6@e) (q3b83@match (vector->list q3ba6@e) (vector-ref q3ba7@p '1) q3ba8@m* q3ba9@s* q3baa@ae* q3bab@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" q3ba7@p)))))))) (vector-ref q3ba7@p '0))))))) (set! q3b83@match (lambda (q3b88@e q3b89@p q3b8a@m* q3b8b@s* q3b8c@ae* q3b8d@r) (if (not q3b8d@r) '#f (if (eq? q3b89@p '_) q3b8d@r (if (eq? q3b89@p 'any) (cons (q3b75@stx^ q3b88@e q3b8a@m* q3b8b@s* q3b8c@ae*) q3b8d@r) (if (q2c77@stx? q3b88@e) (and (not (q2c2d@top-marked? q3b8a@m*)) (call-with-values (lambda () (q2c95@join-wraps q3b8a@m* q3b8b@s* q3b8c@ae* q3b88@e)) (lambda (q3b9a@q3b95 q3b9b@q3b97 q3b9c@q3b99) ((lambda (q3ba0@ae* q3ba1@s* q3ba2@m*) (q3b83@match (q2c7b@stx-expr q3b88@e) q3b89@p q3ba2@m* q3ba1@s* q3ba0@ae* q3b8d@r)) q3b9c@q3b99 q3b9b@q3b97 q3b9a@q3b95)))) (if (q284e@q276d@annotation? q3b88@e) (q3b83@match (q2850@q2771@annotation-expression q3b88@e) q3b89@p q3b8a@m* q3b8b@s* q3b8c@ae* q3b8d@r) (q3b81@match* q3b88@e q3b89@p q3b8a@m* q3b8b@s* q3b8c@ae* q3b8d@r)))))))) (lambda (q3b84@e q3b85@p) (q3b83@match q3b84@e q3b85@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! q2ebc@ellipsis? (lambda (q3c58@x) (and (q2caf@id? q3c58@x) (q2cb7@free-id=? q3c58@x (q2e44@scheme-stx '...))))) (set! q2ebe@underscore? (lambda (q3c5a@x) (and (q2caf@id? q3c5a@x) (q2cb7@free-id=? q3c5a@x (q2e44@scheme-stx '_))))) (set! q2ec0@verify-literals (lambda (q3c5c@lits q3c5d@expr) (for-each (lambda (q3c60@x) (if (or (not (q2caf@id? q3c60@x)) (q2ebc@ellipsis? q3c60@x) (q2ebe@underscore? q3c60@x)) (q2fa3@syntax-violation '#f '"invalid literal" q3c5d@expr q3c60@x) (void))) q3c5c@lits))) (set! q2ec2@syntax-case-transformer ((lambda () ((lambda (q3c63@build-dispatch-call q3c65@invalid-ids-error q3c67@gen-clause q3c69@gen-syntax-case) (begin (set! q3c63@build-dispatch-call (lambda (q3cd4@pvars q3cd5@expr q3cd6@y q3cd7@r q3cd8@mr) ((lambda (q3cde@ids q3cdf@levels) ((lambda (q3ce2@labels q3ce3@new-vars) ((lambda (q3ce6@body) (list '(primitive apply) (q2c0b@q2b4b@build-lambda '#f q3ce3@new-vars q3ce6@body) q3cd6@y)) (q2edc@chi-expr (q2c9b@add-subst (q2c6a@make-full-rib q3cde@ids q3ce2@labels) q3cd5@expr) (append (map (lambda (q3ce8@label q3ce9@var q3cea@level) (cons q3ce8@label (q2ccf@make-binding 'syntax (cons q3ce9@var q3cea@level)))) q3ce2@labels q3ce3@new-vars (map cdr q3cd4@pvars)) q3cd7@r) q3cd8@mr))) (map q2c33@gen-label q3cde@ids) (map q2c2f@gen-lexical q3cde@ids))) (map car q3cd4@pvars) (map cdr q3cd4@pvars)))) (set! q3c65@invalid-ids-error (lambda (q3cc8@id* q3cc9@e q3cca@class) ((letrec ((q3cce@find (lambda (q3cd0@id* q3cd1@ok*) (if (null? q3cd0@id*) (q2fa3@syntax-violation '#f '"invalid syntax" q3cc9@e) (if (q2caf@id? (car q3cd0@id*)) (if (q2cbd@bound-id-member? (car q3cd0@id*) q3cd1@ok*) (q2f9f@syntax-error (car q3cd0@id*) '"duplicate " q3cca@class) (q3cce@find (cdr q3cd0@id*) (cons (car q3cd0@id*) q3cd1@ok*))) (q2f9f@syntax-error (car q3cd0@id*) '"invalid " q3cca@class)))))) q3cce@find) q3cc8@id* '()))) (set! q3c67@gen-clause (lambda (q3ca0@x q3ca1@keys q3ca2@clauses q3ca3@r q3ca4@mr q3ca5@pat q3ca6@fender q3ca7@expr) (call-with-values (lambda () (q2eb8@convert-pattern q3ca5@pat q3ca1@keys)) (lambda (q3cb4@q3cb1 q3cb5@q3cb3) ((lambda (q3cb8@pvars q3cb9@p) (if (not (q2cbb@distinct-bound-ids? (map car q3cb8@pvars))) (q3c65@invalid-ids-error (map car q3cb8@pvars) q3ca5@pat '"pattern variable") (if (not (for-all (lambda (q3cbc@x) (not (q2ebc@ellipsis? (car q3cbc@x)))) q3cb8@pvars)) (q2fa3@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" q3ca5@pat) ((lambda (q3cbe@y) ((lambda (q3cc0@test) ((lambda (q3cc2@conseq) ((lambda (q3cc4@altern) (list (q2c0b@q2b4b@build-lambda '#f (list q3cbe@y) (list 'if q3cc0@test q3cc2@conseq q3cc4@altern)) (list '(primitive syntax-dispatch) q3ca0@x (list 'quote q3cb9@p)))) (q3c69@gen-syntax-case q3ca0@x q3ca1@keys q3ca2@clauses q3ca3@r q3ca4@mr))) (q3c63@build-dispatch-call q3cb8@pvars q3ca7@expr q3cbe@y q3ca3@r q3ca4@mr))) (if (eq? q3ca6@fender '#t) q3cbe@y ((lambda (q3cc6@call) (list 'if q3cbe@y q3cc6@call (list 'quote '#f))) (q3c63@build-dispatch-call q3cb8@pvars q3ca6@fender q3cbe@y q3ca3@r q3ca4@mr))))) (q2c2f@gen-lexical 'tmp))))) q3cb5@q3cb3 q3cb4@q3cb1))))) (set! q3c69@gen-syntax-case (lambda (q3c7e@x q3c7f@keys q3c80@clauses q3c81@r q3c82@mr) (if (null? q3c80@clauses) (list '(primitive syntax-error) q3c7e@x) ((lambda (q3c88@t) ((lambda (q3c8a@ls/false) (if q3c8a@ls/false (apply (lambda (q3c8c@pat q3c8d@expr) (if (and (q2caf@id? q3c8c@pat) (not (q2cbd@bound-id-member? q3c8c@pat q3c7f@keys)) (not (q2ebc@ellipsis? q3c8c@pat))) (if (q2cb7@free-id=? q3c8c@pat (q2e44@scheme-stx '_)) (q2edc@chi-expr q3c8d@expr q3c81@r q3c82@mr) ((lambda (q3c90@lab q3c91@lex) ((lambda (q3c94@body) (list (q2c0b@q2b4b@build-lambda '#f (list q3c91@lex) q3c94@body) q3c7e@x)) (q2edc@chi-expr (q2c9b@add-subst (q2c6a@make-full-rib (list q3c8c@pat) (list q3c90@lab)) q3c8d@expr) (cons (cons q3c90@lab (q2ccf@make-binding 'syntax (cons q3c91@lex '0))) q3c81@r) q3c82@mr))) (q2c33@gen-label q3c8c@pat) (q2c2f@gen-lexical q3c8c@pat))) (q3c67@gen-clause q3c7e@x q3c7f@keys (cdr q3c80@clauses) q3c81@r q3c82@mr q3c8c@pat '#t q3c8d@expr))) q3c8a@ls/false) ((lambda (q3c96@t) ((lambda (q3c98@ls/false) (if q3c98@ls/false (apply (lambda (q3c9a@pat q3c9b@fender q3c9c@expr) (q3c67@gen-clause q3c7e@x q3c7f@keys (cdr q3c80@clauses) q3c81@r q3c82@mr q3c9a@pat q3c9b@fender q3c9c@expr)) q3c98@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3c96@t))) (q2eba@syntax-dispatch q3c96@t '(any any any)))) q3c88@t))) (q2eba@syntax-dispatch q3c88@t '(any any)))) (car q3c80@clauses))))) (lambda (q3c6a@e q3c6b@r q3c6c@mr) ((lambda (q3c70@t) ((lambda (q3c72@ls/false) (if q3c72@ls/false (apply (lambda (q3c74@expr q3c75@keys q3c76@clauses) (begin (q2ec0@verify-literals q3c75@keys q3c6a@e) ((lambda (q3c7a@x) ((lambda (q3c7c@body) (list (q2c0b@q2b4b@build-lambda '#f (list q3c7a@x) q3c7c@body) (q2edc@chi-expr q3c74@expr q3c6b@r q3c6c@mr))) (q3c69@gen-syntax-case q3c7a@x q3c75@keys q3c76@clauses q3c6b@r q3c6c@mr))) (q2c2f@gen-lexical 'tmp)))) q3c72@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3c70@t))) (q2eba@syntax-dispatch q3c70@t '(_ any each-any . each-any)))) q3c6a@e)))) '#f '#f '#f '#f)))) (set! q2ec4@ellipsis-map (lambda (q3cee@proc q3cef@ls . q3cf2@ls*) ((lambda (q3cf5@who) (begin (set! q3cf5@who '...) (begin (if (not (list? q3cef@ls)) (assertion-violation q3cf5@who '"not a list" q3cef@ls) (void)) (if (not (null? q3cf2@ls*)) ((lambda (q3cf6@n) (for-each (lambda (q3cf8@x) (begin (if (not (list? q3cf8@x)) (assertion-violation q3cf5@who '"not a list" q3cf8@x) (void)) (if (not (= (length q3cf8@x) q3cf6@n)) (assertion-violation q3cf5@who '"length mismatch" q3cef@ls q3cf8@x) (void)))) q3cf2@ls*)) (length q3cef@ls)) (void)) (apply map q3cee@proc q3cef@ls q3cf2@ls*)))) '#f))) (set! q2ec6@syntax-transformer ((lambda () ((lambda (q3cfb@gen-syntax q3cfd@gen-ref q3cff@gen-append q3d01@gen-mappend q3d03@gen-map q3d05@gen-cons q3d07@gen-vector q3d09@regen) (begin (set! q3cfb@gen-syntax (lambda (q3d72@src q3d73@e q3d74@r q3d75@maps q3d76@ellipsis? q3d77@vec?) ((lambda (q3d7e@t) ((lambda (q3d80@ls/false) (if (and q3d80@ls/false (apply (lambda (q3d82@dots) (q3d76@ellipsis? q3d82@dots)) q3d80@ls/false)) (apply (lambda (q3d84@dots) (q2fa3@syntax-violation '#f '"misplaced ellipsis in syntax form" q3d72@src)) q3d80@ls/false) ((lambda (q3d86@t) ((lambda (q3d88@ls/false) (if (and q3d88@ls/false (apply (lambda (q3d8a@id) (q2caf@id? q3d8a@id)) q3d88@ls/false)) (apply (lambda (q3d8c@id) ((lambda (q3d8e@label) ((lambda (q3d90@b) ((lambda () (if (eq? (q2cd1@binding-type q3d90@b) 'syntax) (call-with-values (lambda () ((lambda (q3d96@var.lev) (q3cfd@gen-ref q3d72@src (car q3d96@var.lev) (cdr q3d96@var.lev) q3d75@maps)) (q2cd3@binding-value q3d90@b))) (lambda (q3d98@q3d93 q3d99@q3d95) ((lambda (q3d9c@maps q3d9d@var) (values (list 'ref q3d9d@var) q3d9c@maps)) q3d99@q3d95 q3d98@q3d93))) (values (list 'quote q3d73@e) q3d75@maps))))) (q2ccd@label->binding q3d8e@label q3d74@r))) (q2cc9@id->label q3d73@e))) q3d88@ls/false) ((lambda (q3da0@t) ((lambda (q3da2@ls/false) (if (and q3da2@ls/false (apply (lambda (q3da4@dots q3da5@e) (q3d76@ellipsis? q3da4@dots)) q3da2@ls/false)) (apply (lambda (q3da8@dots q3da9@e) (if q3d77@vec? (q2fa3@syntax-violation '#f '"misplaced ellipsis in syntax form" q3d72@src) (q3cfb@gen-syntax q3d72@src q3da9@e q3d74@r q3d75@maps (lambda (q3dac@x) '#f) '#f))) q3da2@ls/false) ((lambda (q3dae@t) ((lambda (q3db0@ls/false) (if (and q3db0@ls/false (apply (lambda (q3db2@x q3db3@dots q3db4@y) (q3d76@ellipsis? q3db3@dots)) q3db0@ls/false)) (apply (lambda (q3db8@x q3db9@dots q3dba@y) ((letrec ((q3dbe@f (lambda (q3dc0@y q3dc1@k) ((lambda (q3dc4@t) ((lambda (q3dc6@ls/false) (if q3dc6@ls/false (apply (lambda () (q3dc1@k q3d75@maps)) q3dc6@ls/false) ((lambda (q3dc8@t) ((lambda (q3dca@ls/false) (if (and q3dca@ls/false (apply (lambda (q3dcc@dots q3dcd@y) (q3d76@ellipsis? q3dcc@dots)) q3dca@ls/false)) (apply (lambda (q3dd0@dots q3dd1@y) (q3dbe@f q3dd1@y (lambda (q3dd4@maps) (call-with-values (lambda () (q3dc1@k (cons '() q3dd4@maps))) (lambda (q3dda@q3dd7 q3ddb@q3dd9) ((lambda (q3dde@maps q3ddf@x) (if (null? (car q3dde@maps)) (q2fa3@syntax-violation '#f '"extra ellipsis in syntax form" q3d72@src) (values (q3d01@gen-mappend q3ddf@x (car q3dde@maps)) (cdr q3dde@maps)))) q3ddb@q3dd9 q3dda@q3dd7)))))) q3dca@ls/false) ((lambda (q3de2@t) ((lambda (q3de4@ls/false) (if q3de4@ls/false (apply (lambda () (call-with-values (lambda () (q3cfb@gen-syntax q3d72@src q3dc0@y q3d74@r q3d75@maps q3d76@ellipsis? q3d77@vec?)) (lambda (q3dea@q3de7 q3deb@q3de9) ((lambda (q3dee@maps q3def@y) (call-with-values (lambda () (q3dc1@k q3dee@maps)) (lambda (q3df6@q3df3 q3df7@q3df5) ((lambda (q3dfa@maps q3dfb@x) (values (q3cff@gen-append q3dfb@x q3def@y) q3dfa@maps)) q3df7@q3df5 q3df6@q3df3)))) q3deb@q3de9 q3dea@q3de7)))) q3de4@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3de2@t))) (q2eba@syntax-dispatch q3de2@t '_))) q3dc8@t))) (q2eba@syntax-dispatch q3dc8@t '(any . any)))) q3dc4@t))) (q2eba@syntax-dispatch q3dc4@t '()))) q3dc0@y)))) q3dbe@f) q3dba@y (lambda (q3dfe@maps) (call-with-values (lambda () (q3cfb@gen-syntax q3d72@src q3db8@x q3d74@r (cons '() q3dfe@maps) q3d76@ellipsis? '#f)) (lambda (q3e04@q3e01 q3e05@q3e03) ((lambda (q3e08@maps q3e09@x) (if (null? (car q3e08@maps)) (q2fa3@syntax-violation '#f '"extra ellipsis in syntax form" q3d72@src) (values (q3d03@gen-map q3e09@x (car q3e08@maps)) (cdr q3e08@maps)))) q3e05@q3e03 q3e04@q3e01)))))) q3db0@ls/false) ((lambda (q3e0c@t) ((lambda (q3e0e@ls/false) (if q3e0e@ls/false (apply (lambda (q3e10@x q3e11@y) (call-with-values (lambda () (q3cfb@gen-syntax q3d72@src q3e10@x q3d74@r q3d75@maps q3d76@ellipsis? '#f)) (lambda (q3e18@q3e15 q3e19@q3e17) ((lambda (q3e1c@maps q3e1d@xnew) (call-with-values (lambda () (q3cfb@gen-syntax q3d72@src q3e11@y q3d74@r q3e1c@maps q3d76@ellipsis? q3d77@vec?)) (lambda (q3e24@q3e21 q3e25@q3e23) ((lambda (q3e28@maps q3e29@ynew) (values (q3d05@gen-cons q3d73@e q3e10@x q3e11@y q3e1d@xnew q3e29@ynew) q3e28@maps)) q3e25@q3e23 q3e24@q3e21)))) q3e19@q3e17 q3e18@q3e15)))) q3e0e@ls/false) ((lambda (q3e2c@t) ((lambda (q3e2e@ls/false) (if q3e2e@ls/false (apply (lambda (q3e30@ls) (call-with-values (lambda () (q3cfb@gen-syntax q3d72@src q3e30@ls q3d74@r q3d75@maps q3d76@ellipsis? '#t)) (lambda (q3e36@q3e33 q3e37@q3e35) ((lambda (q3e3a@maps q3e3b@lsnew) (values (q3d07@gen-vector q3d73@e q3e30@ls q3e3b@lsnew) q3e3a@maps)) q3e37@q3e35 q3e36@q3e33)))) q3e2e@ls/false) ((lambda (q3e3e@t) ((lambda (q3e40@ls/false) (if q3e40@ls/false (apply (lambda () (values (list 'quote q3d73@e) q3d75@maps)) q3e40@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3e3e@t))) (q2eba@syntax-dispatch q3e3e@t '_))) q3e2c@t))) (q2eba@syntax-dispatch q3e2c@t '#(vector each-any)))) q3e0c@t))) (q2eba@syntax-dispatch q3e0c@t '(any . any)))) q3dae@t))) (q2eba@syntax-dispatch q3dae@t '(any any . any)))) q3da0@t))) (q2eba@syntax-dispatch q3da0@t '(any any)))) q3d86@t))) (q2eba@syntax-dispatch q3d86@t 'any))) q3d7e@t))) (q2eba@syntax-dispatch q3d7e@t 'any))) q3d73@e))) (set! q3cfd@gen-ref (lambda (q3d58@src q3d59@var q3d5a@level q3d5b@maps) (if (= q3d5a@level '0) (values q3d59@var q3d5b@maps) (if (null? q3d5b@maps) (q2fa3@syntax-violation '#f '"missing ellipsis in syntax form" q3d58@src) (call-with-values (lambda () (q3cfd@gen-ref q3d58@src q3d59@var (- q3d5a@level '1) (cdr q3d5b@maps))) (lambda (q3d64@q3d61 q3d65@q3d63) ((lambda (q3d68@outer-maps q3d69@outer-var) ((lambda (q3d6c@t) (if q3d6c@t ((lambda (q3d6e@b) (values (cdr q3d6e@b) q3d5b@maps)) q3d6c@t) ((lambda (q3d70@inner-var) (values q3d70@inner-var (cons (cons (cons q3d69@outer-var q3d70@inner-var) (car q3d5b@maps)) q3d68@outer-maps))) (q2c2f@gen-lexical 'tmp)))) (assq q3d69@outer-var (car q3d5b@maps)))) q3d65@q3d63 q3d64@q3d61))))))) (set! q3cff@gen-append (lambda (q3d54@x q3d55@y) (if (fast-equal? q3d55@y ''()) q3d54@x (list 'append q3d54@x q3d55@y)))) (set! q3d01@gen-mappend (lambda (q3d50@e q3d51@map-env) (list 'apply '(primitive append) (q3d03@gen-map q3d50@e q3d51@map-env)))) (set! q3d03@gen-map (lambda (q3d3e@e q3d3f@map-env) ((lambda (q3d42@formals q3d43@actuals) (if (eq? (car q3d3e@e) 'ref) (car q3d43@actuals) (if (for-all (lambda (q3d46@x) (and (eq? (car q3d46@x) 'ref) (memq (cadr q3d46@x) q3d42@formals))) (cdr q3d3e@e)) ((lambda (q3d48@args) (cons 'map (cons (list 'primitive (car q3d3e@e)) q3d48@args))) (map ((lambda (q3d4a@r) (lambda (q3d4c@x) (cdr (assq (cadr q3d4c@x) q3d4a@r)))) (map cons q3d42@formals q3d43@actuals)) (cdr q3d3e@e))) (cons* 'map (list 'lambda q3d42@formals q3d3e@e) q3d43@actuals)))) (map cdr q3d3f@map-env) (map (lambda (q3d4e@x) (list 'ref (car q3d4e@x))) q3d3f@map-env)))) (set! q3d05@gen-cons (lambda (q3d2e@e q3d2f@x q3d30@y q3d31@xnew q3d32@ynew) ((lambda (q3d38@t) (if (memv q3d38@t '(quote)) (if (eq? (car q3d31@xnew) 'quote) ((lambda (q3d3a@xnew q3d3b@ynew) (if (and (eq? q3d3a@xnew q3d2f@x) (eq? q3d3b@ynew q3d30@y)) (list 'quote q3d2e@e) (list 'quote (cons q3d3a@xnew q3d3b@ynew)))) (cadr q3d31@xnew) (cadr q3d32@ynew)) (if (null? (cadr q3d32@ynew)) (list 'list q3d31@xnew) (list 'cons q3d31@xnew q3d32@ynew))) (if (memv q3d38@t '(list)) (cons 'list (cons q3d31@xnew (cdr q3d32@ynew))) (list 'cons q3d31@xnew q3d32@ynew)))) (car q3d32@ynew)))) (set! q3d07@gen-vector (lambda (q3d28@e q3d29@ls q3d2a@lsnew) (if (eq? (car q3d2a@lsnew) 'quote) (if (eq? (cadr q3d2a@lsnew) q3d29@ls) (list 'quote q3d28@e) (list 'quote (list->vector (cadr q3d2a@lsnew)))) (if (eq? (car q3d2a@lsnew) 'list) (cons 'vector (cdr q3d2a@lsnew)) (list 'list->vector q3d2a@lsnew))))) (set! q3d09@regen (lambda (q3d22@x) ((lambda (q3d24@t) (if (memv q3d24@t '(ref)) (cadr q3d22@x) (if (memv q3d24@t '(primitive)) (list 'primitive (cadr q3d22@x)) (if (memv q3d24@t '(quote)) (list 'quote (cadr q3d22@x)) (if (memv q3d24@t '(lambda)) (q2c0b@q2b4b@build-lambda '#f (cadr q3d22@x) (q3d09@regen (caddr q3d22@x))) (if (memv q3d24@t '(map)) ((lambda (q3d26@ls) (cons '(primitive ellipsis-map) q3d26@ls)) (map q3d09@regen (cdr q3d22@x))) (cons (list 'primitive (car q3d22@x)) (map q3d09@regen (cdr q3d22@x))))))))) (car q3d22@x)))) (lambda (q3d0a@e q3d0b@r q3d0c@mr) ((lambda (q3d10@t) ((lambda (q3d12@ls/false) (if q3d12@ls/false (apply (lambda (q3d14@x) (call-with-values (lambda () (q3cfb@gen-syntax q3d0a@e q3d14@x q3d0b@r '() q2ebc@ellipsis? '#f)) (lambda (q3d1a@q3d17 q3d1b@q3d19) ((lambda (q3d1e@maps q3d1f@e) (q3d09@regen q3d1f@e)) q3d1b@q3d19 q3d1a@q3d17)))) q3d12@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3d10@t))) (q2eba@syntax-dispatch q3d10@t '(_ any)))) q3d0a@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! q2ec8@core-macro-transformer (lambda (q3e42@name) ((lambda (q3e44@t) (if (memv q3e44@t '(quote)) q2e6a@quote-transformer (if (memv q3e44@t '(lambda)) q2e6e@lambda-transformer (if (memv q3e44@t '(case-lambda)) q2e6c@case-lambda-transformer (if (memv q3e44@t '(letrec)) q2e52@letrec-transformer (if (memv q3e44@t '(letrec*)) q2e54@letrec*-transformer (if (memv q3e44@t '(if)) q2e62@if-transformer (if (memv q3e44@t '(and)) q2e64@and-transformer (if (memv q3e44@t '(or)) q2e66@or-transformer (if (memv q3e44@t '(foreign-call)) q2eb6@foreign-call-transformer (if (memv q3e44@t '(syntax-case)) q2ec2@syntax-case-transformer (if (memv q3e44@t '(syntax)) q2ec6@syntax-transformer (if (memv q3e44@t '(type-descriptor)) q2e58@type-descriptor-transformer (if (memv q3e44@t '(record-type-descriptor)) q2e5a@record-type-descriptor-transformer (if (memv q3e44@t '(record-constructor-descriptor)) q2e5c@record-constructor-descriptor-transformer (if (memv q3e44@t '(fluid-let-syntax)) q2e56@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" q3e42@name))))))))))))))))) q3e42@name))) (set! q2eca@symbol-macro (lambda (q3e46@x q3e47@set) ((lambda (q3e4a@t) ((lambda (q3e4c@ls/false) (if (and q3e4c@ls/false (apply (lambda (q3e4e@name) (and (q2caf@id? q3e4e@name) (memq (q2cb1@id->sym q3e4e@name) q3e47@set))) q3e4c@ls/false)) (apply (lambda (q3e50@name) (q2e70@bless (list 'quote q3e50@name))) q3e4c@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3e4a@t))) (q2eba@syntax-dispatch q3e4a@t '(_ any)))) q3e46@x))) (set! q2ecc@macro-transformer (lambda (q3e52@x) (if (procedure? q3e52@x) q3e52@x (if (symbol? q3e52@x) ((lambda (q3e54@t) (if (memv q3e54@t '(define-record-type)) q2eae@define-record-type-macro (if (memv q3e54@t '(define-struct)) q2eac@define-struct-macro (if (memv q3e54@t '(include)) q2ea2@include-macro (if (memv q3e54@t '(cond)) q2e9e@cond-macro (if (memv q3e54@t '(let)) q2e76@let-macro (if (memv q3e54@t '(do)) q2e96@do-macro (if (memv q3e54@t '(or)) q2e9a@or-macro (if (memv q3e54@t '(and)) q2e9c@and-macro (if (memv q3e54@t '(let*)) q2e98@let*-macro (if (memv q3e54@t '(let-values)) q2e78@let-values-macro (if (memv q3e54@t '(let*-values)) q2e7a@let*-values-macro (if (memv q3e54@t '(syntax-rules)) q2ea6@syntax-rules-macro (if (memv q3e54@t '(quasiquote)) q2ea8@quasiquote-macro (if (memv q3e54@t '(quasisyntax)) q2eaa@quasisyntax-macro (if (memv q3e54@t '(with-syntax)) q2e72@with-syntax-macro (if (memv q3e54@t '(when)) q2e5e@when-macro (if (memv q3e54@t '(unless)) q2e60@unless-macro (if (memv q3e54@t '(case)) q2e68@case-macro (if (memv q3e54@t '(identifier-syntax)) q2e94@identifier-syntax-macro (if (memv q3e54@t '(time)) q2e8c@time-macro (if (memv q3e54@t '(delay)) q2e8e@delay-macro (if (memv q3e54@t '(assert)) q2e90@assert-macro (if (memv q3e54@t '(endianness)) q2e92@endianness-macro (if (memv q3e54@t '(guard)) q2e88@guard-macro (if (memv q3e54@t '(define-enumeration)) q2e8a@define-enumeration-macro (if (memv q3e54@t '(trace-lambda)) q2e7c@trace-lambda-macro (if (memv q3e54@t '(trace-define)) q2e7e@trace-define-macro (if (memv q3e54@t '(trace-define-syntax)) q2e80@trace-define-syntax-macro (if (memv q3e54@t '(trace-let-syntax)) q2e84@trace-let-syntax-macro (if (memv q3e54@t '(trace-letrec-syntax)) q2e86@trace-letrec-syntax-macro (if (memv q3e54@t '(define-condition-type)) q2eb0@define-condition-type-macro (if (memv q3e54@t '(parameterize)) q2eb4@parameterize-macro (if (memv q3e54@t '(include-into)) q2ea4@include-into-macro (if (memv q3e54@t '(eol-style)) (lambda (q3e56@x) (q2eca@symbol-macro q3e56@x '(none lf cr crlf nel crnel ls))) (if (memv q3e54@t '(error-handling-mode)) (lambda (q3e58@x) (q2eca@symbol-macro q3e58@x '(ignore raise replace))) (if (memv q3e54@t '(buffer-mode)) (lambda (q3e5a@x) (q2eca@symbol-macro q3e5a@x '(none line block))) (if (memv q3e54@t '(file-options)) q2c22@file-options-macro (if (memv q3e54@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) q2eb2@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" q3e52@x)))))))))))))))))))))))))))))))))))))))) q3e52@x) (error 'core-macro-transformer '"BUG: invalid macro" q3e52@x))))) (set! q2ece@local-macro-transformer (lambda (q3e5c@x) (car q3e5c@x))) (set! q2ed0@do-macro-call (lambda (q3e5e@transformer q3e5f@expr) ((lambda (q3e62@out) (begin ((letrec ((q3e64@f (lambda (q3e66@x) (if (not (q2c77@stx? q3e66@x)) (if (pair? q3e66@x) (begin (q3e64@f (car q3e66@x)) (q3e64@f (cdr q3e66@x))) (if (vector? q3e66@x) (vector-for-each q3e64@f q3e66@x) (if (symbol? q3e66@x) (q2fa3@syntax-violation '#f '"raw symbol encountered in output of macro" q3e5f@expr q3e66@x) (void)))) (void))))) q3e64@f) q3e62@out) (q2c99@add-mark (q2c8f@gen-mark) q3e62@out q3e5f@expr))) (q3e5e@transformer (q2c99@add-mark q2c91@anti-mark q3e5f@expr '#f))))) (set! q2ed2@chi-macro (lambda (q3e68@p q3e69@e) (q2ed0@do-macro-call (q2ecc@macro-transformer q3e68@p) q3e69@e))) (set! q2ed4@chi-local-macro (lambda (q3e6c@p q3e6d@e) (q2ed0@do-macro-call (q2ece@local-macro-transformer q3e6c@p) q3e6d@e))) (set! q2ed6@chi-global-macro (lambda (q3e70@p q3e71@e) ((lambda (q3e74@lib q3e75@loc) (begin (q2ad4@q2976@visit-library q3e74@lib) ((lambda (q3e78@x) ((lambda (q3e7a@transformer) (q2ed0@do-macro-call q3e7a@transformer q3e71@e)) (if (procedure? q3e78@x) q3e78@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" q3e78@x)))) (symbol-value q3e75@loc)))) (car q3e70@p) (cdr q3e70@p)))) (set! q2ed8@chi-expr* (lambda (q3e7c@e* q3e7d@r q3e7e@mr) (if (null? q3e7c@e*) '() ((lambda (q3e82@e) (cons q3e82@e (q2ed8@chi-expr* (cdr q3e7c@e*) q3e7d@r q3e7e@mr))) (q2edc@chi-expr (car q3e7c@e*) q3e7d@r q3e7e@mr))))) (set! q2eda@chi-application (lambda (q3e84@e q3e85@r q3e86@mr) ((lambda (q3e8a@t) ((lambda (q3e8c@ls/false) (if q3e8c@ls/false (apply (lambda (q3e8e@rator q3e8f@rands) ((lambda (q3e92@rator) (cons q3e92@rator (q2ed8@chi-expr* q3e8f@rands q3e85@r q3e86@mr))) (q2edc@chi-expr q3e8e@rator q3e85@r q3e86@mr))) q3e8c@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3e8a@t))) (q2eba@syntax-dispatch q3e8a@t '(any . each-any)))) q3e84@e))) (set! q2edc@chi-expr (lambda (q3e94@e q3e95@r q3e96@mr) (call-with-values (lambda () (q2cd7@syntax-type q3e94@e q3e95@r)) (lambda (q3ea0@q3e9b q3ea1@q3e9d q3ea2@q3e9f) ((lambda (q3ea6@kwd q3ea7@value q3ea8@type) ((lambda (q3eac@t) (if (memv q3eac@t '(core-macro)) ((lambda (q3eae@transformer) (q3eae@transformer q3e94@e q3e95@r q3e96@mr)) (q2ec8@core-macro-transformer q3ea7@value)) (if (memv q3eac@t '(global)) ((lambda (q3eb0@lib) ((lambda (q3eb2@loc) ((lambda () (begin ((q2f25@inv-collector) q3eb0@lib) q3eb2@loc)))) (cdr q3ea7@value))) (car q3ea7@value)) (if (memv q3eac@t '(core-prim)) ((lambda (q3eb4@name) (list 'primitive q3eb4@name)) q3ea7@value) (if (memv q3eac@t '(call)) (q2eda@chi-application q3e94@e q3e95@r q3e96@mr) (if (memv q3eac@t '(lexical)) ((lambda (q3eb6@lex) q3eb6@lex) (q2e46@lexical-var q3ea7@value)) (if (memv q3eac@t '(global-macro global-macro!)) (q2edc@chi-expr (q2ed6@chi-global-macro q3ea7@value q3e94@e) q3e95@r q3e96@mr) (if (memv q3eac@t '(local-macro local-macro!)) (q2edc@chi-expr (q2ed4@chi-local-macro q3ea7@value q3e94@e) q3e95@r q3e96@mr) (if (memv q3eac@t '(macro macro!)) (q2edc@chi-expr (q2ed2@chi-macro q3ea7@value q3e94@e) q3e95@r q3e96@mr) (if (memv q3eac@t '(constant)) ((lambda (q3eb8@datum) (list 'quote q3eb8@datum)) q3ea7@value) (if (memv q3eac@t '(set!)) (q2ede@chi-set! q3e94@e q3e95@r q3e96@mr) (if (memv q3eac@t '(begin)) ((lambda (q3eba@t) ((lambda (q3ebc@ls/false) (if q3ebc@ls/false (apply (lambda (q3ebe@x q3ebf@x*) (q2c0e@q2b7d@build-sequence '#f (q2ed8@chi-expr* (cons q3ebe@x q3ebf@x*) q3e95@r q3e96@mr))) q3ebc@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3eba@t))) (q2eba@syntax-dispatch q3eba@t '(_ any . each-any)))) q3e94@e) (if (memv q3eac@t '(let-syntax letrec-syntax)) ((lambda (q3ec2@t) ((lambda (q3ec4@ls/false) (if (and q3ec4@ls/false (apply (lambda (q3ec6@xlhs* q3ec7@xrhs* q3ec8@xbody q3ec9@xbody*) (if (not (q2cb9@valid-bound-ids? q3ec6@xlhs*)) (q2fa3@syntax-violation '#f '"invalid identifiers" q3e94@e) (void))) q3ec4@ls/false)) (apply (lambda (q3ece@xlhs* q3ecf@xrhs* q3ed0@xbody q3ed1@xbody*) ((lambda (q3ed6@xlab*) ((lambda (q3ed8@xrib) ((lambda (q3eda@xb*) ((lambda () (q2c0e@q2b7d@build-sequence '#f (q2ed8@chi-expr* (map (lambda (q3edc@x) (q2c9b@add-subst q3ed8@xrib q3edc@x)) (cons q3ed0@xbody q3ed1@xbody*)) (append (map cons q3ed6@xlab* q3eda@xb*) q3e95@r) (append (map cons q3ed6@xlab* q3eda@xb*) q3e96@mr)))))) (map (lambda (q3ede@x) (q2ced@make-eval-transformer (q2f17@expand-transformer (if (eq? q3ea8@type 'let-syntax) q3ede@x (q2c9b@add-subst q3ed8@xrib q3ede@x)) q3e96@mr))) q3ecf@xrhs*))) (q2c6a@make-full-rib q3ece@xlhs* q3ed6@xlab*))) (map q2c33@gen-label q3ece@xlhs*))) q3ec4@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3ec2@t))) (q2eba@syntax-dispatch q3ec2@t '(_ #(each (any any)) any . each-any)))) q3e94@e) (if (memv q3eac@t '(displaced-lexical)) (q2fa3@syntax-violation '#f '"identifier out of context" q3e94@e) (if (memv q3eac@t '(syntax)) (q2fa3@syntax-violation '#f '"reference to pattern variable outside a syntax form" q3e94@e) (if (memv q3eac@t '(define define-syntax module import library)) (q2fa3@syntax-violation '#f (string-append ((lambda (q3ee0@t) (if (memv q3ee0@t '(define)) '"a definition" (if (memv q3ee0@t '(define-syntax)) '"a define-syntax" (if (memv q3ee0@t '(module)) '"a module definition" (if (memv q3ee0@t '(library)) '"a library definition" (if (memv q3ee0@t '(import)) '"an import declaration" (if (memv q3ee0@t '(export)) '"an export declaration" '"a non-expression"))))))) q3ea8@type) '" was found where an expression was expected") q3e94@e) (if (memv q3eac@t '(mutable)) (q2fa3@syntax-violation '#f '"attempt to reference an unexportable variable" q3e94@e) (q2fa3@syntax-violation '#f '"invalid expression" q3e94@e)))))))))))))))))) q3ea8@type)) q3ea2@q3e9f q3ea1@q3e9d q3ea0@q3e9b))))) (set! q2ede@chi-set! (lambda (q3ee2@e q3ee3@r q3ee4@mr) ((lambda (q3ee8@t) ((lambda (q3eea@ls/false) (if (and q3eea@ls/false (apply (lambda (q3eec@x q3eed@v) (q2caf@id? q3eec@x)) q3eea@ls/false)) (apply (lambda (q3ef0@x q3ef1@v) (call-with-values (lambda () (q2cd7@syntax-type q3ef0@x q3ee3@r)) (lambda (q3efa@q3ef5 q3efb@q3ef7 q3efc@q3ef9) ((lambda (q3f00@kwd q3f01@value q3f02@type) ((lambda (q3f06@t) (if (memv q3f06@t '(lexical)) (begin (q2e4a@set-lexical-mutable! q3f01@value '#t) (list 'set! (q2e46@lexical-var q3f01@value) (q2edc@chi-expr q3ef1@v q3ee3@r q3ee4@mr))) (if (memv q3f06@t '(core-prim)) (q2fa3@syntax-violation '#f '"cannot modify imported core primitive" q3ee2@e) (if (memv q3f06@t '(global)) (q2fa3@syntax-violation '#f '"attempt to modify imported binding" q3ee2@e) (if (memv q3f06@t '(global-macro!)) (q2edc@chi-expr (q2ed6@chi-global-macro q3f01@value q3ee2@e) q3ee3@r q3ee4@mr) (if (memv q3f06@t '(local-macro!)) (q2edc@chi-expr (q2ed4@chi-local-macro q3f01@value q3ee2@e) q3ee3@r q3ee4@mr) (if (memv q3f06@t '(mutable)) (q2fa3@syntax-violation '#f '"attempt to assign to an unexportable variable" q3ee2@e) (q2fa3@syntax-violation '#f '"invalid syntax" q3ee2@e)))))))) q3f02@type)) q3efc@q3ef9 q3efb@q3ef7 q3efa@q3ef5)))) q3eea@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3ee8@t))) (q2eba@syntax-dispatch q3ee8@t '(_ any any)))) q3ee2@e))) (set! q2ee0@verify-formals (lambda (q3f08@fmls q3f09@stx) ((lambda (q3f0c@t) ((lambda (q3f0e@ls/false) (if q3f0e@ls/false (apply (lambda (q3f10@x*) (if (not (q2cb9@valid-bound-ids? q3f10@x*)) (q2e74@invalid-fmls-error q3f09@stx q3f08@fmls) (void))) q3f0e@ls/false) ((lambda (q3f12@t) ((lambda (q3f14@ls/false) (if q3f14@ls/false (apply (lambda (q3f16@x* q3f17@x) (if (not (q2cb9@valid-bound-ids? (cons q3f17@x q3f16@x*))) (q2e74@invalid-fmls-error q3f09@stx q3f08@fmls) (void))) q3f14@ls/false) ((lambda (q3f1a@t) ((lambda (q3f1c@ls/false) (if q3f1c@ls/false (apply (lambda () (q2fa3@syntax-violation '#f '"invalid syntax" q3f09@stx)) q3f1c@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3f1a@t))) (q2eba@syntax-dispatch q3f1a@t '_))) q3f12@t))) (q2eba@syntax-dispatch q3f12@t '#(each+ any () any)))) q3f0c@t))) (q2eba@syntax-dispatch q3f0c@t 'each-any))) q3f08@fmls))) (set! q2ee2@chi-lambda-clause (lambda (q3f1e@stx q3f1f@fmls q3f20@body* q3f21@r q3f22@mr) ((lambda (q3f28@t) ((lambda (q3f2a@ls/false) (if q3f2a@ls/false (apply (lambda (q3f2c@x*) (begin (q2ee0@verify-formals q3f1f@fmls q3f1e@stx) ((lambda (q3f2e@lex* q3f2f@lab*) (values q3f2e@lex* (q2ef2@chi-internal (q2c9b@add-subst (q2c6a@make-full-rib q3f2c@x* q3f2f@lab*) q3f20@body*) (q2e4e@add-lexicals q3f2f@lab* q3f2e@lex* q3f21@r) q3f22@mr))) (map q2c2f@gen-lexical q3f2c@x*) (map q2c33@gen-label q3f2c@x*)))) q3f2a@ls/false) ((lambda (q3f32@t) ((lambda (q3f34@ls/false) (if q3f34@ls/false (apply (lambda (q3f36@x* q3f37@x) (begin (q2ee0@verify-formals q3f1f@fmls q3f1e@stx) ((lambda (q3f3a@lex* q3f3b@lab* q3f3c@lex q3f3d@lab) (values (append q3f3a@lex* q3f3c@lex) (q2ef2@chi-internal (q2c9b@add-subst (q2c6a@make-full-rib (cons q3f37@x q3f36@x*) (cons q3f3d@lab q3f3b@lab*)) q3f20@body*) (q2e4e@add-lexicals (cons q3f3d@lab q3f3b@lab*) (cons q3f3c@lex q3f3a@lex*) q3f21@r) q3f22@mr))) (map q2c2f@gen-lexical q3f36@x*) (map q2c33@gen-label q3f36@x*) (q2c2f@gen-lexical q3f37@x) (q2c33@gen-label q3f37@x)))) q3f34@ls/false) ((lambda (q3f42@t) ((lambda (q3f44@ls/false) (if q3f44@ls/false (apply (lambda () (q2fa3@syntax-violation '#f '"invalid syntax" q3f1f@fmls)) q3f44@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q3f42@t))) (q2eba@syntax-dispatch q3f42@t '_))) q3f32@t))) (q2eba@syntax-dispatch q3f32@t '#(each+ any () any)))) q3f28@t))) (q2eba@syntax-dispatch q3f28@t 'each-any))) q3f1f@fmls))) (set! q2ee4@chi-lambda-clause* (lambda (q3f46@stx q3f47@fmls* q3f48@body** q3f49@r q3f4a@mr) (if (null? q3f47@fmls*) (values '() '()) (call-with-values (lambda () (q2ee2@chi-lambda-clause q3f46@stx (car q3f47@fmls*) (car q3f48@body**) q3f49@r q3f4a@mr)) (lambda (q3f54@q3f51 q3f55@q3f53) ((lambda (q3f58@b q3f59@a) (call-with-values (lambda () (q2ee4@chi-lambda-clause* q3f46@stx (cdr q3f47@fmls*) (cdr q3f48@body**) q3f49@r q3f4a@mr)) (lambda (q3f60@q3f5d q3f61@q3f5f) ((lambda (q3f64@b* q3f65@a*) (values (cons q3f59@a q3f65@a*) (cons q3f58@b q3f64@b*))) q3f61@q3f5f q3f60@q3f5d)))) q3f55@q3f53 q3f54@q3f51)))))) (set! q2ee6@chi-defun (lambda (q3f68@x q3f69@r q3f6a@mr) ((lambda (q3f6e@fmls q3f6f@body*) (call-with-values (lambda () (q2ee2@chi-lambda-clause q3f6e@fmls q3f6e@fmls q3f6f@body* q3f69@r q3f6a@mr)) (lambda (q3f76@q3f73 q3f77@q3f75) ((lambda (q3f7a@body q3f7b@fmls) (q2c0b@q2b4b@build-lambda '#f q3f7b@fmls q3f7a@body)) q3f77@q3f75 q3f76@q3f73)))) (car q3f68@x) (cdr q3f68@x)))) (set! q2ee8@chi-rhs (lambda (q3f7e@rhs q3f7f@r q3f80@mr) ((lambda (q3f84@t) (if (memv q3f84@t '(defun)) (q2ee6@chi-defun (cdr q3f7e@rhs) q3f7f@r q3f80@mr) (if (memv q3f84@t '(expr)) ((lambda (q3f86@expr) (q2edc@chi-expr q3f86@expr q3f7f@r q3f80@mr)) (cdr q3f7e@rhs)) (if (memv q3f84@t '(top-expr)) ((lambda (q3f88@expr) (q2c0e@q2b7d@build-sequence '#f (list (q2edc@chi-expr q3f88@expr q3f7f@r q3f80@mr) (q2c0f@q2b7f@build-void)))) (cdr q3f7e@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" q3f7e@rhs))))) (car q3f7e@rhs)))) (set! q2eea@expand-interaction-rhs*/init* (lambda (q3f8a@lhs* q3f8b@rhs* q3f8c@init* q3f8d@r q3f8e@mr) ((letrec ((q3f94@f (lambda (q3f96@lhs* q3f97@rhs*) (if (null? q3f96@lhs*) (map (lambda (q3f9a@x) (q2edc@chi-expr q3f9a@x q3f8d@r q3f8e@mr)) q3f8c@init*) ((lambda (q3f9c@lhs q3f9d@rhs) ((lambda (q3fa0@t) (if (memv q3fa0@t '(defun)) ((lambda (q3fa2@rhs) (cons (list 'set! q3f9c@lhs q3fa2@rhs) (q3f94@f (cdr q3f96@lhs*) (cdr q3f97@rhs*)))) (q2ee6@chi-defun (cdr q3f9d@rhs) q3f8d@r q3f8e@mr)) (if (memv q3fa0@t '(expr)) ((lambda (q3fa4@rhs) (cons (list 'set! q3f9c@lhs q3fa4@rhs) (q3f94@f (cdr q3f96@lhs*) (cdr q3f97@rhs*)))) (q2edc@chi-expr (cdr q3f9d@rhs) q3f8d@r q3f8e@mr)) (if (memv q3fa0@t '(top-expr)) ((lambda (q3fa6@e) (cons q3fa6@e (q3f94@f (cdr q3f96@lhs*) (cdr q3f97@rhs*)))) (q2edc@chi-expr (cdr q3f9d@rhs) q3f8d@r q3f8e@mr)) (error 'expand-interaction '"invallid" q3f9d@rhs))))) (car q3f9d@rhs))) (car q3f96@lhs*) (car q3f97@rhs*)))))) q3f94@f) q3f8a@lhs* q3f8b@rhs*))) (set! q2eec@chi-rhs* (lambda (q3fa8@rhs* q3fa9@r q3faa@mr) ((letrec ((q3fae@f (lambda (q3fb0@ls) (if (null? q3fb0@ls) '() ((lambda (q3fb2@a) (cons q3fb2@a (q3fae@f (cdr q3fb0@ls)))) (q2ee8@chi-rhs (car q3fb0@ls) q3fa9@r q3faa@mr)))))) q3fae@f) q3fa8@rhs*))) (set! q2eee@find-bound=? (lambda (q3fb4@x q3fb5@lhs* q3fb6@rhs*) (if (null? q3fb5@lhs*) '#f (if (q2cb5@bound-id=? q3fb4@x (car q3fb5@lhs*)) (car q3fb6@rhs*) (q2eee@find-bound=? q3fb4@x (cdr q3fb5@lhs*) (cdr q3fb6@rhs*)))))) (set! q2ef0@find-dups (lambda (q3fba@ls) ((letrec ((q3fbc@f (lambda (q3fbe@ls q3fbf@dups) (if (null? q3fbe@ls) q3fbf@dups ((lambda (q3fc2@t) (if q3fc2@t ((lambda (q3fc4@x) (q3fbc@f (cdr q3fbe@ls) (cons (list (car q3fbe@ls) q3fc4@x) q3fbf@dups))) q3fc2@t) (q3fbc@f (cdr q3fbe@ls) q3fbf@dups))) (q2eee@find-bound=? (car q3fbe@ls) (cdr q3fbe@ls) (cdr q3fbe@ls))))))) q3fbc@f) q3fba@ls '()))) (set! q2ef2@chi-internal (lambda (q3fc6@e* q3fc7@r q3fc8@mr) ((lambda (q3fcc@rib) (call-with-values (lambda () (q2f15@chi-body* (map (lambda (q3fde@x) (q2c9b@add-subst q3fcc@rib q3fde@x)) (q2cad@syntax->list q3fc6@e*)) q3fc7@r q3fc8@mr '() '() '() '() '() q3fcc@rib '#f)) (lambda (q3fe0@q3fcf q3fe1@q3fd1 q3fe2@q3fd3 q3fe3@q3fd5 q3fe4@q3fd7 q3fe5@q3fd9 q3fe6@q3fdb q3fe7@q3fdd) ((lambda (q3ff0@_exp* q3ff1@kwd* q3ff2@mod** q3ff3@rhs* q3ff4@lex* q3ff5@mr q3ff6@r q3ff7@e*) (begin (if (null? q3ff7@e*) (q2fa3@syntax-violation '#f '"no expression in body" q3ff7@e*) (void)) ((lambda (q4000@init*) ((lambda (q4002@rhs*) ((lambda () (q2c11@q2b83@build-letrec* '#f (reverse q3ff4@lex*) (reverse q4002@rhs*) (q2c0e@q2b7d@build-sequence '#f q4000@init*))))) (q2eec@chi-rhs* q3ff3@rhs* q3ff6@r q3ff5@mr))) (q2ed8@chi-expr* (append (apply append (reverse q3ff2@mod**)) q3ff7@e*) q3ff6@r q3ff5@mr)))) q3fe7@q3fdd q3fe6@q3fdb q3fe5@q3fd9 q3fe4@q3fd7 q3fe3@q3fd5 q3fe2@q3fd3 q3fe1@q3fd1 q3fe0@q3fcf)))) (q2c5e@make-empty-rib)))) (set! q2ef4@parse-module (lambda (q4004@e) ((lambda (q4006@t) ((lambda (q4008@ls/false) (if q4008@ls/false (apply (lambda (q400a@export* q400b@b*) (begin (if (not (for-all q2caf@id? q400a@export*)) (q2fa3@syntax-violation '#f '"module exports must be identifiers" q4004@e) (void)) (values '#f (list->vector q400a@export*) q400b@b*))) q4008@ls/false) ((lambda (q400e@t) ((lambda (q4010@ls/false) (if q4010@ls/false (apply (lambda (q4012@name q4013@export* q4014@b*) (begin (if (not (q2caf@id? q4012@name)) (q2fa3@syntax-violation '#f '"module name must be an identifier" q4004@e) (void)) (if (not (for-all q2caf@id? q4013@export*)) (q2fa3@syntax-violation '#f '"module exports must be identifiers" q4004@e) (void)) (values q4012@name (list->vector q4013@export*) q4014@b*))) q4010@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q400e@t))) (q2eba@syntax-dispatch q400e@t '(_ any each-any . each-any)))) q4006@t))) (q2eba@syntax-dispatch q4006@t '(_ each-any . each-any)))) q4004@e))) (set! q2efa@q2ef5 (make-record-type-descriptor 'module-interface '#f 'q2ef8 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! q2efc@q2ef7 '#f) (set! q2efe@q2ef6 (make-record-constructor-descriptor q2efa@q2ef5 '#f q2efc@q2ef7)) (set! q2f01@module-interface? (record-predicate q2efa@q2ef5)) (set! q2f03@make-module-interface (record-constructor q2efe@q2ef6)) (set! q2f05@module-interface-first-mark (record-accessor q2efa@q2ef5 '0)) (set! q2f07@module-interface-exp-id-vec (record-accessor q2efa@q2ef5 '1)) (set! q2f09@module-interface-exp-lab-vec (record-accessor q2efa@q2ef5 '2)) (set! q2f0b@set-module-interface-first-mark! (record-mutator q2efa@q2ef5 '0)) (set! q2f0d@set-module-interface-exp-id-vec! (record-mutator q2efa@q2ef5 '1)) (set! q2f0f@set-module-interface-exp-lab-vec! (record-mutator q2efa@q2ef5 '2)) (set! q2f11@module-interface-exp-id* (lambda (q4018@iface q4019@id) ((lambda (q401d@diff-marks) (begin (set! q401d@diff-marks (lambda (q4024@ls q4025@x) (begin (if (null? q4024@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (q4028@a) (if (eq? q4028@a q4025@x) '() (cons q4028@a (q401d@diff-marks (cdr q4024@ls) q4025@x)))) (car q4024@ls))))) ((lambda (q401e@diff q401f@id-vec) (if (null? q401e@diff) q401f@id-vec (vector-map (lambda (q4022@x) (q2c79@make-stx (q2c7b@stx-expr q4022@x) (append q401e@diff (q2c7d@stx-mark* q4022@x)) '() '())) q401f@id-vec))) (q401d@diff-marks (q2c7d@stx-mark* q4019@id) (q2f05@module-interface-first-mark q4018@iface)) (q2f07@module-interface-exp-id-vec q4018@iface)))) '#f))) (set! q2f13@chi-internal-module (lambda (q402a@e q402b@r q402c@mr q402d@lex* q402e@rhs* q402f@mod** q4030@kwd*) (call-with-values (lambda () (q2ef4@parse-module q402a@e)) (lambda (q403e@q4039 q403f@q403b q4040@q403d) ((lambda (q4044@e* q4045@exp-id* q4046@name) ((lambda (q404a@rib) ((lambda (q404c@e*) ((lambda () (call-with-values (lambda () (q2f15@chi-body* q404c@e* q402b@r q402c@mr q402d@lex* q402e@rhs* q402f@mod** q4030@kwd* '() q404a@rib '#f)) (lambda (q405e@q404f q405f@q4051 q4060@q4053 q4061@q4055 q4062@q4057 q4063@q4059 q4064@q405b q4065@q405d) ((lambda (q406e@_exp* q406f@kwd* q4070@mod** q4071@rhs* q4072@lex* q4073@mr q4074@r q4075@e*) ((lambda (q407e@exp-lab* q407f@mod**) (if (not q4046@name) (values q4072@lex* q4071@rhs* q4045@exp-id* q407e@exp-lab* q4074@r q4073@mr q407f@mod** q406f@kwd*) ((lambda (q4082@lab q4083@iface) (values q4072@lex* q4071@rhs* (vector q4046@name) (vector q4082@lab) (cons (cons q4082@lab (cons '$module q4083@iface)) q4074@r) (cons (cons q4082@lab (cons '$module q4083@iface)) q4073@mr) q407f@mod** q406f@kwd*)) (q2c33@gen-label 'module) (q2f03@make-module-interface (car (q2c7d@stx-mark* q4046@name)) (vector-map (lambda (q4086@x) (q2c79@make-stx (q2c7b@stx-expr q4086@x) (q2c7d@stx-mark* q4086@x) '() '())) q4045@exp-id*) q407e@exp-lab*)))) (vector-map (lambda (q4088@x) (or (q2cc9@id->label (q2c79@make-stx (q2cb1@id->sym q4088@x) (q2c7d@stx-mark* q4088@x) (list q404a@rib) '())) (q2fa3@syntax-violation '#f '"cannot find module export" q4088@x))) q4045@exp-id*) (cons q4075@e* q4070@mod**))) q4065@q405d q4064@q405b q4063@q4059 q4062@q4057 q4061@q4055 q4060@q4053 q405f@q4051 q405e@q404f)))))) (map (lambda (q408a@x) (q2c9b@add-subst q404a@rib q408a@x)) (q2cad@syntax->list q4044@e*)))) (q2c5e@make-empty-rib))) q4040@q403d q403f@q403b q403e@q4039))))) (set! q2f15@chi-body* (lambda (q408c@e* q408d@r q408e@mr q408f@lex* q4090@rhs* q4091@mod** q4092@kwd* q4093@exp* q4094@rib q4095@top?) (if (null? q408c@e*) (values q408c@e* q408d@r q408e@mr q408f@lex* q4090@rhs* q4091@mod** q4092@kwd* q4093@exp*) ((lambda (q40a0@e) (call-with-values (lambda () (q2cd7@syntax-type q40a0@e q408d@r)) (lambda (q40a8@q40a3 q40a9@q40a5 q40aa@q40a7) ((lambda (q40ae@kwd q40af@value q40b0@type) ((lambda (q40b4@kwd*) ((lambda (q40b6@t) (if (memv q40b6@t '(define)) (call-with-values (lambda () (q2e3e@parse-define q40a0@e)) (lambda (q40bc@q40b9 q40bd@q40bb) ((lambda (q40c0@rhs q40c1@id) (begin (if (q2cbd@bound-id-member? q40c1@id q40b4@kwd*) (q2fa3@syntax-violation '#f '"cannot redefine keyword" q40a0@e) (void)) (call-with-values (lambda () (q2c37@gen-define-label+loc q40c1@id q4094@rib)) (lambda (q40c8@q40c5 q40c9@q40c7) ((lambda (q40cc@lex q40cd@lab) (begin (q2c60@extend-rib! q4094@rib q40c1@id q40cd@lab) (q2f15@chi-body* (cdr q408c@e*) (q2e4c@add-lexical q40cd@lab q40cc@lex q408d@r) q408e@mr (cons q40cc@lex q408f@lex*) (cons q40c0@rhs q4090@rhs*) q4091@mod** q40b4@kwd* q4093@exp* q4094@rib q4095@top?))) q40c9@q40c7 q40c8@q40c5))))) q40bd@q40bb q40bc@q40b9))) (if (memv q40b6@t '(define-syntax)) (call-with-values (lambda () (q2e40@parse-define-syntax q40a0@e)) (lambda (q40d4@q40d1 q40d5@q40d3) ((lambda (q40d8@rhs q40d9@id) (begin (if (q2cbd@bound-id-member? q40d9@id q40b4@kwd*) (q2fa3@syntax-violation '#f '"cannot redefine keyword" q40a0@e) (void)) ((lambda (q40dc@lab q40dd@expanded-rhs) (begin (q2c60@extend-rib! q4094@rib q40d9@id q40dc@lab) ((lambda (q40e0@b) (q2f15@chi-body* (cdr q408c@e*) (cons (cons q40dc@lab q40e0@b) q408d@r) (cons (cons q40dc@lab q40e0@b) q408e@mr) q408f@lex* q4090@rhs* q4091@mod** q40b4@kwd* q4093@exp* q4094@rib q4095@top?)) (q2ced@make-eval-transformer q40dd@expanded-rhs)))) (q2c39@gen-define-label q40d9@id q4094@rib) (q2f17@expand-transformer q40d8@rhs q408e@mr)))) q40d5@q40d3 q40d4@q40d1))) (if (memv q40b6@t '(let-syntax letrec-syntax)) ((lambda (q40e2@t) ((lambda (q40e4@ls/false) (if (and q40e4@ls/false (apply (lambda (q40e6@xlhs* q40e7@xrhs* q40e8@xbody*) (if (not (q2cb9@valid-bound-ids? q40e6@xlhs*)) (q2fa3@syntax-violation '#f '"invalid identifiers" q40a0@e) (void))) q40e4@ls/false)) (apply (lambda (q40ec@xlhs* q40ed@xrhs* q40ee@xbody*) ((lambda (q40f2@xlab*) ((lambda (q40f4@xrib) ((lambda (q40f6@xb*) ((lambda () (q2f15@chi-body* (append (map (lambda (q40f8@x) (q2c9b@add-subst q40f4@xrib q40f8@x)) q40ee@xbody*) (cdr q408c@e*)) (append (map cons q40f2@xlab* q40f6@xb*) q408d@r) (append (map cons q40f2@xlab* q40f6@xb*) q408e@mr) q408f@lex* q4090@rhs* q4091@mod** q40b4@kwd* q4093@exp* q4094@rib q4095@top?)))) (map (lambda (q40fa@x) (q2ced@make-eval-transformer (q2f17@expand-transformer (if (eq? q40b0@type 'let-syntax) q40fa@x (q2c9b@add-subst q40f4@xrib q40fa@x)) q408e@mr))) q40ed@xrhs*))) (q2c6a@make-full-rib q40ec@xlhs* q40f2@xlab*))) (map q2c33@gen-label q40ec@xlhs*))) q40e4@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q40e2@t))) (q2eba@syntax-dispatch q40e2@t '(_ #(each (any any)) . each-any)))) q40a0@e) (if (memv q40b6@t '(begin)) ((lambda (q40fc@t) ((lambda (q40fe@ls/false) (if q40fe@ls/false (apply (lambda (q4100@x*) (q2f15@chi-body* (append q4100@x* (cdr q408c@e*)) q408d@r q408e@mr q408f@lex* q4090@rhs* q4091@mod** q40b4@kwd* q4093@exp* q4094@rib q4095@top?)) q40fe@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q40fc@t))) (q2eba@syntax-dispatch q40fc@t '(_ . each-any)))) q40a0@e) (if (memv q40b6@t '(global-macro global-macro!)) (q2f15@chi-body* (cons (q2c9b@add-subst q4094@rib (q2ed6@chi-global-macro q40af@value q40a0@e)) (cdr q408c@e*)) q408d@r q408e@mr q408f@lex* q4090@rhs* q4091@mod** q40b4@kwd* q4093@exp* q4094@rib q4095@top?) (if (memv q40b6@t '(local-macro local-macro!)) (q2f15@chi-body* (cons (q2c9b@add-subst q4094@rib (q2ed4@chi-local-macro q40af@value q40a0@e)) (cdr q408c@e*)) q408d@r q408e@mr q408f@lex* q4090@rhs* q4091@mod** q40b4@kwd* q4093@exp* q4094@rib q4095@top?) (if (memv q40b6@t '(macro macro!)) (q2f15@chi-body* (cons (q2c9b@add-subst q4094@rib (q2ed2@chi-macro q40af@value q40a0@e)) (cdr q408c@e*)) q408d@r q408e@mr q408f@lex* q4090@rhs* q4091@mod** q40b4@kwd* q4093@exp* q4094@rib q4095@top?) (if (memv q40b6@t '(module)) (call-with-values (lambda () (q2f13@chi-internal-module q40a0@e q408d@r q408e@mr q408f@lex* q4090@rhs* q4091@mod** q40b4@kwd*)) (lambda (q4112@q4103 q4113@q4105 q4114@q4107 q4115@q4109 q4116@q410b q4117@q410d q4118@q410f q4119@q4111) ((lambda (q4122@kwd* q4123@mod** q4124@mr q4125@r q4126@m-exp-lab* q4127@m-exp-id* q4128@rhs* q4129@lex*) (begin (vector-for-each (lambda (q4132@id q4133@lab) (q2c60@extend-rib! q4094@rib q4132@id q4133@lab)) q4127@m-exp-id* q4126@m-exp-lab*) (q2f15@chi-body* (cdr q408c@e*) q4125@r q4124@mr q4129@lex* q4128@rhs* q4123@mod** q4122@kwd* q4093@exp* q4094@rib q4095@top?))) q4119@q4111 q4118@q410f q4117@q410d q4116@q410b q4115@q4109 q4114@q4107 q4113@q4105 q4112@q4103))) (if (memv q40b6@t '(library)) (begin (q2f85@library-expander (q2cc5@stx->datum q40a0@e)) (q2f15@chi-body* (cdr q408c@e*) q408d@r q408e@mr q408f@lex* q4090@rhs* q4091@mod** q40b4@kwd* q4093@exp* q4094@rib q4095@top?)) (if (memv q40b6@t '(export)) ((lambda (q4136@t) ((lambda (q4138@ls/false) (if q4138@ls/false (apply (lambda (q413a@exp-decl*) (q2f15@chi-body* (cdr q408c@e*) q408d@r q408e@mr q408f@lex* q4090@rhs* q4091@mod** q40b4@kwd* (append q413a@exp-decl* q4093@exp*) q4094@rib q4095@top?)) q4138@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q4136@t))) (q2eba@syntax-dispatch q4136@t '(_ . each-any)))) q40a0@e) (if (memv q40b6@t '(import)) ((lambda () ((lambda (q413d@module-import? q413f@module-import q4141@library-import) (begin (set! q413d@module-import? (lambda (q4190@e) ((lambda (q4192@t) ((lambda (q4194@ls/false) (if (and q4194@ls/false (apply (lambda (q4196@id) (q2caf@id? q4196@id)) q4194@ls/false)) (apply (lambda (q4198@id) '#t) q4194@ls/false) ((lambda (q419a@t) ((lambda (q419c@ls/false) (if q419c@ls/false (apply (lambda (q419e@imp*) '#f) q419c@ls/false) ((lambda (q41a0@t) ((lambda (q41a2@ls/false) (if q41a2@ls/false (apply (lambda () (q2fa3@syntax-violation '#f '"malformed import form" q4190@e)) q41a2@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q41a0@t))) (q2eba@syntax-dispatch q41a0@t '_))) q419a@t))) (q2eba@syntax-dispatch q419a@t '(_ . each-any)))) q4192@t))) (q2eba@syntax-dispatch q4192@t '(_ any)))) q4190@e))) (set! q413f@module-import (lambda (q416e@e q416f@r) ((lambda (q4172@t) ((lambda (q4174@ls/false) (if (and q4174@ls/false (apply (lambda (q4176@id) (q2caf@id? q4176@id)) q4174@ls/false)) (apply (lambda (q4178@id) (call-with-values (lambda () (q2cd7@syntax-type q4178@id q416f@r)) (lambda (q4180@q417b q4181@q417d q4182@q417f) ((lambda (q4186@kwd q4187@value q4188@type) ((lambda (q418c@t) (if (memv q418c@t '($module)) ((lambda (q418e@iface) (values (q2f11@module-interface-exp-id* q418e@iface q4178@id) (q2f09@module-interface-exp-lab-vec q418e@iface))) q4187@value) (q2fa3@syntax-violation '#f '"invalid import" q416e@e))) q4188@type)) q4182@q417f q4181@q417d q4180@q417b)))) q4174@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q4172@t))) (q2eba@syntax-dispatch q4172@t '(_ any)))) q416e@e))) (set! q4141@library-import (lambda (q4152@e) ((lambda (q4154@t) ((lambda (q4156@ls/false) (if q4156@ls/false (apply (lambda (q4158@ctxt q4159@imp*) (call-with-values (lambda () (q2f1f@parse-import-spec* (q2fa9@syntax->datum q4159@imp*))) (lambda (q4160@q415d q4161@q415f) ((lambda (q4164@subst-labels q4165@subst-names) (values (vector-map (lambda (q4168@name) (q2c8d@datum->stx q4158@ctxt q4168@name)) q4165@subst-names) q4164@subst-labels)) q4161@q415f q4160@q415d)))) q4156@ls/false) ((lambda (q416a@t) ((lambda (q416c@ls/false) (if q416c@ls/false (apply (lambda () (q2fa3@syntax-violation '#f '"invalid import form" q4152@e)) q416c@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q416a@t))) (q2eba@syntax-dispatch q416a@t '_))) q4154@t))) (q2eba@syntax-dispatch q4154@t '(any . each-any)))) q4152@e))) (begin (call-with-values (lambda () (if (q413d@module-import? q40a0@e) (q413f@module-import q40a0@e q408d@r) (q4141@library-import q40a0@e))) (lambda (q4146@q4143 q4147@q4145) ((lambda (q414a@lab* q414b@id*) (vector-for-each (lambda (q414e@id q414f@lab) (q2c60@extend-rib! q4094@rib q414e@id q414f@lab)) q414b@id* q414a@lab*)) q4147@q4145 q4146@q4143))) (q2f15@chi-body* (cdr q408c@e*) q408d@r q408e@mr q408f@lex* q4090@rhs* q4091@mod** q40b4@kwd* q4093@exp* q4094@rib q4095@top?)))) '#f '#f '#f))) (if q4095@top? (q2f15@chi-body* (cdr q408c@e*) q408d@r q408e@mr (cons (q2c2f@gen-lexical 'dummy) q408f@lex*) (cons (cons 'top-expr q40a0@e) q4090@rhs*) q4091@mod** q40b4@kwd* q4093@exp* q4094@rib q4095@top?) (values q408c@e* q408d@r q408e@mr q408f@lex* q4090@rhs* q4091@mod** q40b4@kwd* q4093@exp*)))))))))))))) q40b0@type)) (if (q2caf@id? q40ae@kwd) (cons q40ae@kwd q4092@kwd*) q4092@kwd*))) q40aa@q40a7 q40a9@q40a5 q40a8@q40a3)))) (car q408c@e*))))) (set! q2f17@expand-transformer (lambda (q41a4@expr q41a5@r) ((lambda (q41a8@rtc) ((lambda (q41aa@expanded-rhs) (begin (for-each ((lambda (q41ac@mark-visit) (lambda (q41ae@x) (begin (q2ad3@q2974@invoke-library q41ae@x) (q41ac@mark-visit q41ae@x)))) (q2f27@vis-collector)) (q41a8@rtc)) q41aa@expanded-rhs)) ((lambda (q41b8@q41b1 q41b9@q41b3 q41ba@q41b5 q41bb@q41b7) ((lambda (q41c0@swap) (dynamic-wind q41c0@swap (lambda () (q2edc@chi-expr q41a4@expr q41a5@r q41a5@r)) q41c0@swap)) (lambda () (begin ((lambda (q41c2@t) (begin (q41b8@q41b1 q41ba@q41b5) (set! q41ba@q41b5 q41c2@t))) (q41b8@q41b1)) ((lambda (q41c4@t) (begin (q41b9@q41b3 q41bb@q41b7) (set! q41bb@q41b7 q41c4@t))) (q41b9@q41b3)))))) q2f25@inv-collector q2f27@vis-collector q41a8@rtc (lambda (q41c6@x) (values))))) (q2f23@make-collector)))) (set! q2f19@parse-exports (lambda (q41c8@exp*) ((letrec ((q41ca@f (lambda (q41cc@exp* q41cd@int* q41ce@ext*) (if (null? q41cc@exp*) (begin (if (not (q2cb9@valid-bound-ids? q41ce@ext*)) (q2fa3@syntax-violation 'export '"invalid exports" (q2ef0@find-dups q41ce@ext*)) (void)) (values (map q2fa9@syntax->datum q41ce@ext*) q41cd@int*)) ((lambda (q41d2@t) ((lambda (q41d4@ls/false) (if q41d4@ls/false (apply (lambda (q41d6@rename q41d7@i* q41d8@e*) (begin (if (not (and (eq? (q2fa9@syntax->datum q41d6@rename) 'rename) (for-all q2caf@id? q41d7@i*) (for-all q2caf@id? q41d8@e*))) (q2fa3@syntax-violation 'export '"invalid export specifier" (car q41cc@exp*)) (void)) (q41ca@f (cdr q41cc@exp*) (append q41d7@i* q41cd@int*) (append q41d8@e* q41ce@ext*)))) q41d4@ls/false) ((lambda (q41dc@t) ((lambda (q41de@ls/false) (if q41de@ls/false (apply (lambda (q41e0@ie) (begin (if (not (q2caf@id? q41e0@ie)) (q2fa3@syntax-violation 'export '"invalid export" q41e0@ie) (void)) (q41ca@f (cdr q41cc@exp*) (cons q41e0@ie q41cd@int*) (cons q41e0@ie q41ce@ext*)))) q41de@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q41dc@t))) (q2eba@syntax-dispatch q41dc@t 'any))) q41d2@t))) (q2eba@syntax-dispatch q41d2@t '(any . #(each (any any)))))) (car q41cc@exp*)))))) q41ca@f) q41c8@exp* '() '()))) (set! q2f1b@parse-library-name (lambda (q41e2@spec) ((lambda (q41e5@parse) (begin (set! q41e5@parse (lambda (q41f2@x) ((lambda (q41f4@t) ((lambda (q41f6@ls/false) (if (and q41f6@ls/false (apply (lambda (q41f8@v*) (for-all (lambda (q41fa@x) ((lambda (q41fc@x) (and (integer? q41fc@x) (exact? q41fc@x))) (q2fa9@syntax->datum q41fa@x))) q41f8@v*)) q41f6@ls/false)) (apply (lambda (q41fe@v*) (values '() (map q2fa9@syntax->datum q41fe@v*))) q41f6@ls/false) ((lambda (q4200@t) ((lambda (q4202@ls/false) (if (and q4202@ls/false (apply (lambda (q4204@x q4205@rest) (symbol? (q2fa9@syntax->datum q4204@x))) q4202@ls/false)) (apply (lambda (q4208@x q4209@rest) (call-with-values (lambda () (q41e5@parse q4209@rest)) (lambda (q4210@q420d q4211@q420f) ((lambda (q4214@v* q4215@x*) (values (cons (q2fa9@syntax->datum q4208@x) q4215@x*) q4214@v*)) q4211@q420f q4210@q420d)))) q4202@ls/false) ((lambda (q4218@t) ((lambda (q421a@ls/false) (if q421a@ls/false (apply (lambda () (values '() '())) q421a@ls/false) ((lambda (q421c@t) ((lambda (q421e@ls/false) (if q421e@ls/false (apply (lambda () (q2fa3@syntax-violation '#f '"invalid library name" q41e2@spec)) q421e@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q421c@t))) (q2eba@syntax-dispatch q421c@t '_))) q4218@t))) (q2eba@syntax-dispatch q4218@t '()))) q4200@t))) (q2eba@syntax-dispatch q4200@t '(any . any)))) q41f4@t))) (q2eba@syntax-dispatch q41f4@t '(each-any)))) q41f2@x))) (call-with-values (lambda () (q41e5@parse q41e2@spec)) (lambda (q41ea@q41e7 q41eb@q41e9) ((lambda (q41ee@ver* q41ef@name*) (begin (if (null? q41ef@name*) (q2fa3@syntax-violation '#f '"empty library name" q41e2@spec) (void)) (values q41ef@name* q41ee@ver*))) q41eb@q41e9 q41ea@q41e7))))) '#f))) (set! q2f1d@parse-library (lambda (q4220@e) ((lambda (q4222@t) ((lambda (q4224@ls/false) (if (and q4224@ls/false (apply (lambda (q4226@library q4227@name* q4228@export q4229@exp* q422a@import q422b@imp* q422c@b*) (and (eq? (q2fa9@syntax->datum q4228@export) 'export) (eq? (q2fa9@syntax->datum q422a@import) 'import) (eq? (q2fa9@syntax->datum q4226@library) 'library))) q4224@ls/false)) (apply (lambda (q4234@library q4235@name* q4236@export q4237@exp* q4238@import q4239@imp* q423a@b*) (values q4235@name* q4237@exp* q4239@imp* q423a@b*)) q4224@ls/false) ((lambda (q4242@t) ((lambda (q4244@ls/false) (if q4244@ls/false (apply (lambda () (q2fa3@syntax-violation '#f '"malformed library" q4220@e)) q4244@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q4242@t))) (q2eba@syntax-dispatch q4242@t '_))) q4222@t))) (q2eba@syntax-dispatch q4222@t '(any each-any (any . each-any) (any . each-any) . each-any)))) q4220@e))) (set! q2f1f@parse-import-spec* ((lambda () ((lambda (q4247@idsyn? q4249@dup-error q424b@merge-substs q424d@exclude* q424f@find* q4251@rem* q4253@remove-dups q4255@parse-library-name q4257@import-library q4259@get-import q425b@add-imports!) (begin (set! q4247@idsyn? (lambda (q4450@x) (symbol? (q2fa9@syntax->datum q4450@x)))) (set! q4249@dup-error (lambda (q444e@name) (q2fa3@syntax-violation 'import '"two imports with different bindings" q444e@name))) (set! q424b@merge-substs (lambda (q443c@s q443d@subst) ((lambda (q4441@insert-to-subst) (begin (set! q4441@insert-to-subst (lambda (q4442@a q4443@subst) ((lambda (q4446@name q4447@label) ((lambda (q444a@t) (if q444a@t ((lambda (q444c@x) (if (eq? (cdr q444c@x) q4447@label) q4443@subst (q4249@dup-error q4446@name))) q444a@t) (cons q4442@a q4443@subst))) (assq q4446@name q4443@subst))) (car q4442@a) (cdr q4442@a)))) (if (null? q443c@s) q443d@subst (q4441@insert-to-subst (car q443c@s) (q424b@merge-substs (cdr q443c@s) q443d@subst))))) '#f))) (set! q424d@exclude* (lambda (q440c@sym* q440d@subst) ((lambda (q4411@exclude) (begin (set! q4411@exclude (lambda (q442a@sym q442b@subst) (if (null? q442b@subst) (q2fa3@syntax-violation 'import '"cannot rename unbound identifier" q442a@sym) (if (eq? q442a@sym (caar q442b@subst)) (values (cdar q442b@subst) (cdr q442b@subst)) ((lambda (q442e@a) (call-with-values (lambda () (q4411@exclude q442a@sym (cdr q442b@subst))) (lambda (q4434@q4431 q4435@q4433) ((lambda (q4438@subst q4439@old) (values q4439@old (cons q442e@a q4438@subst))) q4435@q4433 q4434@q4431)))) (car q442b@subst)))))) (if (null? q440c@sym*) (values '() q440d@subst) (call-with-values (lambda () (q4411@exclude (car q440c@sym*) q440d@subst)) (lambda (q4416@q4413 q4417@q4415) ((lambda (q441a@subst q441b@old) (call-with-values (lambda () (q424d@exclude* (cdr q440c@sym*) q441a@subst)) (lambda (q4422@q441f q4423@q4421) ((lambda (q4426@subst q4427@old*) (values (cons q441b@old q4427@old*) q4426@subst)) q4423@q4421 q4422@q441f)))) q4417@q4415 q4416@q4413)))))) '#f))) (set! q424f@find* (lambda (q4404@sym* q4405@subst) (map (lambda (q4408@x) ((lambda (q440a@t) (if q440a@t (cdr q440a@t) (q2fa3@syntax-violation 'import '"cannot find identifier" q4408@x))) (assq q4408@x q4405@subst))) q4404@sym*))) (set! q4251@rem* (lambda (q43fc@sym* q43fd@subst) ((letrec ((q4400@f (lambda (q4402@subst) (if (null? q4402@subst) '() (if (memq (caar q4402@subst) q43fc@sym*) (q4400@f (cdr q4402@subst)) (cons (car q4402@subst) (q4400@f (cdr q4402@subst)))))))) q4400@f) q43fd@subst))) (set! q4253@remove-dups (lambda (q43fa@ls) (if (null? q43fa@ls) '() (if (memq (car q43fa@ls) (cdr q43fa@ls)) (q4253@remove-dups (cdr q43fa@ls)) (cons (car q43fa@ls) (q4253@remove-dups (cdr q43fa@ls))))))) (set! q4255@parse-library-name (lambda (q4312@spec) ((lambda (q4315@subversion? q4317@subversion-pred q4319@version-pred) (begin (set! q4315@subversion? (lambda (q43f6@x) ((lambda (q43f8@x) (and (integer? q43f8@x) (exact? q43f8@x) (>= q43f8@x '0))) (q2fa9@syntax->datum q43f6@x)))) (set! q4317@subversion-pred (lambda (q4396@x*) ((lambda (q4398@t) ((lambda (q439a@ls/false) (if (and q439a@ls/false (apply (lambda (q439c@n) (q4315@subversion? q439c@n)) q439a@ls/false)) (apply (lambda (q439e@n) (lambda (q43a0@x) (= q43a0@x (q2fa9@syntax->datum q439e@n)))) q439a@ls/false) ((lambda (q43a2@t) ((lambda (q43a4@ls/false) (if (and q43a4@ls/false (apply (lambda (q43a6@p? q43a7@sub*) (eq? (q2fa9@syntax->datum q43a6@p?) 'and)) q43a4@ls/false)) (apply (lambda (q43aa@p? q43ab@sub*) ((lambda (q43ae@p*) (lambda (q43b0@x) (for-all (lambda (q43b2@p) (q43b2@p q43b0@x)) q43ae@p*))) (map q4317@subversion-pred q43ab@sub*))) q43a4@ls/false) ((lambda (q43b4@t) ((lambda (q43b6@ls/false) (if (and q43b6@ls/false (apply (lambda (q43b8@p? q43b9@sub*) (eq? (q2fa9@syntax->datum q43b8@p?) 'or)) q43b6@ls/false)) (apply (lambda (q43bc@p? q43bd@sub*) ((lambda (q43c0@p*) (lambda (q43c2@x) (exists (lambda (q43c4@p) (q43c4@p q43c2@x)) q43c0@p*))) (map q4317@subversion-pred q43bd@sub*))) q43b6@ls/false) ((lambda (q43c6@t) ((lambda (q43c8@ls/false) (if (and q43c8@ls/false (apply (lambda (q43ca@p? q43cb@sub) (eq? (q2fa9@syntax->datum q43ca@p?) 'not)) q43c8@ls/false)) (apply (lambda (q43ce@p? q43cf@sub) ((lambda (q43d2@p) (lambda (q43d4@x) (not (q43d2@p q43d4@x)))) (q4317@subversion-pred q43cf@sub))) q43c8@ls/false) ((lambda (q43d6@t) ((lambda (q43d8@ls/false) (if (and q43d8@ls/false (apply (lambda (q43da@p? q43db@n) (and (eq? (q2fa9@syntax->datum q43da@p?) '<=) (q4315@subversion? q43db@n))) q43d8@ls/false)) (apply (lambda (q43de@p? q43df@n) (lambda (q43e2@x) (<= q43e2@x (q2fa9@syntax->datum q43df@n)))) q43d8@ls/false) ((lambda (q43e4@t) ((lambda (q43e6@ls/false) (if (and q43e6@ls/false (apply (lambda (q43e8@p? q43e9@n) (and (eq? (q2fa9@syntax->datum q43e8@p?) '>=) (q4315@subversion? q43e9@n))) q43e6@ls/false)) (apply (lambda (q43ec@p? q43ed@n) (lambda (q43f0@x) (>= q43f0@x (q2fa9@syntax->datum q43ed@n)))) q43e6@ls/false) ((lambda (q43f2@t) ((lambda (q43f4@ls/false) (if q43f4@ls/false (apply (lambda () (q2fa3@syntax-violation 'import '"invalid sub-version spec" q4312@spec q4396@x*)) q43f4@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q43f2@t))) (q2eba@syntax-dispatch q43f2@t '_))) q43e4@t))) (q2eba@syntax-dispatch q43e4@t '(any any)))) q43d6@t))) (q2eba@syntax-dispatch q43d6@t '(any any)))) q43c6@t))) (q2eba@syntax-dispatch q43c6@t '(any any)))) q43b4@t))) (q2eba@syntax-dispatch q43b4@t '(any . each-any)))) q43a2@t))) (q2eba@syntax-dispatch q43a2@t '(any . each-any)))) q4398@t))) (q2eba@syntax-dispatch q4398@t 'any))) q4396@x*))) (set! q4319@version-pred (lambda (q4346@x*) ((lambda (q4348@t) ((lambda (q434a@ls/false) (if q434a@ls/false (apply (lambda () (lambda (q434c@x) '#t)) q434a@ls/false) ((lambda (q434e@t) ((lambda (q4350@ls/false) (if (and q4350@ls/false (apply (lambda (q4352@c q4353@ver*) (eq? (q2fa9@syntax->datum q4352@c) 'and)) q4350@ls/false)) (apply (lambda (q4356@c q4357@ver*) ((lambda (q435a@p*) (lambda (q435c@x) (for-all (lambda (q435e@p) (q435e@p q435c@x)) q435a@p*))) (map q4319@version-pred q4357@ver*))) q4350@ls/false) ((lambda (q4360@t) ((lambda (q4362@ls/false) (if (and q4362@ls/false (apply (lambda (q4364@c q4365@ver*) (eq? (q2fa9@syntax->datum q4364@c) 'or)) q4362@ls/false)) (apply (lambda (q4368@c q4369@ver*) ((lambda (q436c@p*) (lambda (q436e@x) (exists (lambda (q4370@p) (q4370@p q436e@x)) q436c@p*))) (map q4319@version-pred q4369@ver*))) q4362@ls/false) ((lambda (q4372@t) ((lambda (q4374@ls/false) (if (and q4374@ls/false (apply (lambda (q4376@c q4377@ver) (eq? (q2fa9@syntax->datum q4376@c) 'not)) q4374@ls/false)) (apply (lambda (q437a@c q437b@ver) ((lambda (q437e@p) (lambda (q4380@x) (not (q437e@p q4380@x)))) (q4319@version-pred q437b@ver))) q4374@ls/false) ((lambda (q4382@t) ((lambda (q4384@ls/false) (if q4384@ls/false (apply (lambda (q4386@sub*) ((lambda (q4388@p*) (lambda (q438a@x) ((letrec ((q438c@f (lambda (q438e@p* q438f@x) (if (null? q438e@p*) '#t (if (null? q438f@x) '#f (and ((car q438e@p*) (car q438f@x)) (q438c@f (cdr q438e@p*) (cdr q438f@x)))))))) q438c@f) q4388@p* q438a@x))) (map q4317@subversion-pred q4386@sub*))) q4384@ls/false) ((lambda (q4392@t) ((lambda (q4394@ls/false) (if q4394@ls/false (apply (lambda () (q2fa3@syntax-violation 'import '"invalid version spec" q4312@spec q4346@x*)) q4394@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q4392@t))) (q2eba@syntax-dispatch q4392@t '_))) q4382@t))) (q2eba@syntax-dispatch q4382@t 'each-any))) q4372@t))) (q2eba@syntax-dispatch q4372@t '(any any)))) q4360@t))) (q2eba@syntax-dispatch q4360@t '(any . each-any)))) q434e@t))) (q2eba@syntax-dispatch q434e@t '(any . each-any)))) q4348@t))) (q2eba@syntax-dispatch q4348@t '()))) q4346@x*))) ((letrec ((q431a@f (lambda (q431c@x) ((lambda (q431e@t) ((lambda (q4320@ls/false) (if q4320@ls/false (apply (lambda (q4322@version-spec*) (values '() (q4319@version-pred q4322@version-spec*))) q4320@ls/false) ((lambda (q4324@t) ((lambda (q4326@ls/false) (if (and q4326@ls/false (apply (lambda (q4328@x q4329@x*) (q4247@idsyn? q4328@x)) q4326@ls/false)) (apply (lambda (q432c@x q432d@x*) (call-with-values (lambda () (q431a@f q432d@x*)) (lambda (q4334@q4331 q4335@q4333) ((lambda (q4338@pred q4339@name) (values (cons (q2fa9@syntax->datum q432c@x) q4339@name) q4338@pred)) q4335@q4333 q4334@q4331)))) q4326@ls/false) ((lambda (q433c@t) ((lambda (q433e@ls/false) (if q433e@ls/false (apply (lambda () (values '() (lambda (q4340@x) '#t))) q433e@ls/false) ((lambda (q4342@t) ((lambda (q4344@ls/false) (if q4344@ls/false (apply (lambda () (q2fa3@syntax-violation '#f '"invalid import spec" q4312@spec)) q4344@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q4342@t))) (q2eba@syntax-dispatch q4342@t '_))) q433c@t))) (q2eba@syntax-dispatch q433c@t '()))) q4324@t))) (q2eba@syntax-dispatch q4324@t '(any . any)))) q431e@t))) (q2eba@syntax-dispatch q431e@t '(each-any)))) q431c@x)))) q431a@f) q4312@spec))) '#f '#f '#f))) (set! q4257@import-library (lambda (q4302@spec*) (call-with-values (lambda () (q4255@parse-library-name q4302@spec*)) (lambda (q4308@q4305 q4309@q4307) ((lambda (q430c@pred q430d@name) (begin (if (null? q430d@name) (q2fa3@syntax-violation 'import '"empty library name" q4302@spec*) (void)) ((lambda (q4310@lib) (begin (if (not q4310@lib) (q2fa3@syntax-violation 'import '"cannot find library with required name" q430d@name) (void)) (if (not (q430c@pred (q2aa4@q2916@library-version q4310@lib))) (q2fa3@syntax-violation 'import '"library does not satisfy version specification" q4302@spec* q4310@lib) (void)) ((q2f29@imp-collector) q4310@lib) (q2aa8@q291e@library-subst q4310@lib))) (q2acc@q2966@find-library-by-name q430d@name)))) q4309@q4307 q4308@q4305))))) (set! q4259@get-import (lambda (q4274@spec) ((lambda (q4276@t) ((lambda (q4278@ls/false) (if (and q4278@ls/false (apply (lambda (q427a@x q427b@x*) (not (memq (q2fa9@syntax->datum q427a@x) '(for rename except only prefix library)))) q4278@ls/false)) (apply (lambda (q427e@x q427f@x*) (q4257@import-library (cons q427e@x q427f@x*))) q4278@ls/false) ((lambda (q4282@t) ((lambda (q4284@ls/false) (if (and q4284@ls/false (apply (lambda (q4286@rename q4287@isp q4288@old* q4289@new*) (and (eq? (q2fa9@syntax->datum q4286@rename) 'rename) (for-all q4247@idsyn? q4288@old*) (for-all q4247@idsyn? q4289@new*))) q4284@ls/false)) (apply (lambda (q428e@rename q428f@isp q4290@old* q4291@new*) ((lambda (q4296@subst q4297@old* q4298@new*) ((lambda (q429c@old-label*) ((lambda (q429e@subst) (q424b@merge-substs (map cons q4298@new* q429c@old-label*) q429e@subst)) (q4251@rem* q4297@old* q4296@subst))) (q424f@find* q4297@old* q4296@subst))) (q4259@get-import q428f@isp) (map q2fa9@syntax->datum q4290@old*) (map q2fa9@syntax->datum q4291@new*))) q4284@ls/false) ((lambda (q42a0@t) ((lambda (q42a2@ls/false) (if (and q42a2@ls/false (apply (lambda (q42a4@except q42a5@isp q42a6@sym*) (and (eq? (q2fa9@syntax->datum q42a4@except) 'except) (for-all q4247@idsyn? q42a6@sym*))) q42a2@ls/false)) (apply (lambda (q42aa@except q42ab@isp q42ac@sym*) ((lambda (q42b0@subst) (q4251@rem* (map q2fa9@syntax->datum q42ac@sym*) q42b0@subst)) (q4259@get-import q42ab@isp))) q42a2@ls/false) ((lambda (q42b2@t) ((lambda (q42b4@ls/false) (if (and q42b4@ls/false (apply (lambda (q42b6@only q42b7@isp q42b8@sym*) (and (eq? (q2fa9@syntax->datum q42b6@only) 'only) (for-all q4247@idsyn? q42b8@sym*))) q42b4@ls/false)) (apply (lambda (q42bc@only q42bd@isp q42be@sym*) ((lambda (q42c2@subst q42c3@sym*) ((lambda (q42c6@sym*) ((lambda (q42c8@lab*) (map cons q42c6@sym* q42c8@lab*)) (q424f@find* q42c6@sym* q42c2@subst))) (q4253@remove-dups q42c3@sym*))) (q4259@get-import q42bd@isp) (map q2fa9@syntax->datum q42be@sym*))) q42b4@ls/false) ((lambda (q42ca@t) ((lambda (q42cc@ls/false) (if (and q42cc@ls/false (apply (lambda (q42ce@prefix q42cf@isp q42d0@p) (and (eq? (q2fa9@syntax->datum q42ce@prefix) 'prefix) (q4247@idsyn? q42d0@p))) q42cc@ls/false)) (apply (lambda (q42d4@prefix q42d5@isp q42d6@p) ((lambda (q42da@subst q42db@prefix) (map (lambda (q42de@x) (cons (string->symbol (string-append q42db@prefix (symbol->string (car q42de@x)))) (cdr q42de@x))) q42da@subst)) (q4259@get-import q42d5@isp) (symbol->string (q2fa9@syntax->datum q42d6@p)))) q42cc@ls/false) ((lambda (q42e0@t) ((lambda (q42e2@ls/false) (if (and q42e2@ls/false (apply (lambda (q42e4@library q42e5@spec*) (eq? (q2fa9@syntax->datum q42e4@library) 'library)) q42e2@ls/false)) (apply (lambda (q42e8@library q42e9@spec*) (q4257@import-library q42e9@spec*)) q42e2@ls/false) ((lambda (q42ec@t) ((lambda (q42ee@ls/false) (if (and q42ee@ls/false (apply (lambda (q42f0@for q42f1@isp q42f2@rest) (eq? (q2fa9@syntax->datum q42f0@for) 'for)) q42ee@ls/false)) (apply (lambda (q42f6@for q42f7@isp q42f8@rest) (q4259@get-import q42f7@isp)) q42ee@ls/false) ((lambda (q42fc@t) ((lambda (q42fe@ls/false) (if q42fe@ls/false (apply (lambda (q4300@spec) (q2fa3@syntax-violation 'import '"invalid import spec" q4300@spec)) q42fe@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q42fc@t))) (q2eba@syntax-dispatch q42fc@t 'any))) q42ec@t))) (q2eba@syntax-dispatch q42ec@t '(any any . any)))) q42e0@t))) (q2eba@syntax-dispatch q42e0@t '(any each-any)))) q42ca@t))) (q2eba@syntax-dispatch q42ca@t '(any any any)))) q42b2@t))) (q2eba@syntax-dispatch q42b2@t '(any any . each-any)))) q42a0@t))) (q2eba@syntax-dispatch q42a0@t '(any any . each-any)))) q4282@t))) (q2eba@syntax-dispatch q4282@t '(any any . #(each (any any)))))) q4276@t))) (q2eba@syntax-dispatch q4276@t '(any . each-any)))) q4274@spec))) (set! q425b@add-imports! (lambda (q4264@imp q4265@h) ((lambda (q4268@subst) (for-each (lambda (q426a@x) ((lambda (q426c@name q426d@label) ((lambda (q4270@t) (if q4270@t ((lambda (q4272@l) (if (not (eq? q4272@l q426d@label)) (q4249@dup-error q426c@name) (void))) q4270@t) (hashtable-set! q4265@h q426c@name q426d@label))) (hashtable-ref q4265@h q426c@name '#f))) (car q426a@x) (cdr q426a@x))) q4268@subst)) (q4259@get-import q4264@imp)))) (lambda (q425c@imp*) ((letrec ((q425e@f (lambda (q4260@imp* q4261@h) (if (null? q4260@imp*) (hashtable-entries q4261@h) (begin (q425b@add-imports! (car q4260@imp*) q4261@h) (q425e@f (cdr q4260@imp*) q4261@h)))))) q425e@f) q425c@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! q2f21@make-top-rib (lambda (q4452@names q4453@labels) ((lambda (q4456@rib) (begin (vector-for-each (lambda (q4458@name q4459@label) (begin (if (not (symbol? q4458@name)) (error 'make-top-rib '"BUG: not a symbol" q4458@name) (void)) (q2c62@extend-rib/nc! q4456@rib (q2c79@make-stx q4458@name q2c2b@top-mark* '() '()) q4459@label))) q4452@names q4453@labels) q4456@rib)) (q2c5e@make-empty-rib)))) (set! q2f23@make-collector (lambda () ((lambda (q445c@ls) (lambda q4460 ((lambda (q4461) (if (= q4461 '0) (apply (lambda () q445c@ls) q4460) (if (= q4461 '1) (apply (lambda (q445e@x) (set! q445c@ls (q2c24@set-cons q445e@x q445c@ls))) q4460) (error 'apply '"invalid arg count")))) (length q4460)))) '()))) (set! q2f25@inv-collector (q2859@q2783@make-parameter (lambda q4462@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (q4464@x) (begin (if (not (procedure? q4464@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" q4464@x) (void)) q4464@x)))) (set! q2f27@vis-collector (q2859@q2783@make-parameter (lambda q4466@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (q4468@x) (begin (if (not (procedure? q4468@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" q4468@x) (void)) q4468@x)))) (set! q2f29@imp-collector (q2859@q2783@make-parameter (lambda q446a@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (q446c@x) (begin (if (not (procedure? q446c@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" q446c@x) (void)) q446c@x)))) (set! q2f2b@chi-library-internal (lambda (q446e@e* q446f@rib q4470@top?) (call-with-values (lambda () (q2f15@chi-body* q446e@e* '() '() '() '() '() '() '() q446f@rib q4470@top?)) (lambda (q4484@q4475 q4485@q4477 q4486@q4479 q4487@q447b q4488@q447d q4489@q447f q448a@q4481 q448b@q4483) ((lambda (q4494@exp* q4495@_kwd* q4496@mod** q4497@rhs* q4498@lex* q4499@mr q449a@r q449b@e*) (values (append (apply append (reverse q4496@mod**)) q449b@e*) q449a@r q4499@mr (reverse q4498@lex*) (reverse q4497@rhs*) q4494@exp*)) q448b@q4483 q448a@q4481 q4489@q447f q4488@q447d q4487@q447b q4486@q4479 q4485@q4477 q4484@q4475))))) (set! q2f2d@chi-interaction-expr (lambda (q44a4@e q44a5@rib q44a6@r) (call-with-values (lambda () (q2f15@chi-body* (list q44a4@e) q44a6@r q44a6@r '() '() '() '() '() q44a5@rib '#t)) (lambda (q44ba@q44ab q44bb@q44ad q44bc@q44af q44bd@q44b1 q44be@q44b3 q44bf@q44b5 q44c0@q44b7 q44c1@q44b9) ((lambda (q44ca@_exp* q44cb@_kwd* q44cc@mod** q44cd@rhs* q44ce@lex* q44cf@mr q44d0@r q44d1@e*) ((lambda (q44da@e*) ((lambda (q44dc@e) (values q44dc@e q44d0@r)) (if (null? q44da@e*) (q2c0f@q2b7f@build-void) (if (null? (cdr q44da@e*)) (car q44da@e*) (q2c0e@q2b7d@build-sequence '#f q44da@e*))))) (q2eea@expand-interaction-rhs*/init* (reverse q44ce@lex*) (reverse q44cd@rhs*) (append (apply append (reverse q44cc@mod**)) q44d1@e*) q44d0@r q44cf@mr))) q44c1@q44b9 q44c0@q44b7 q44bf@q44b5 q44be@q44b3 q44bd@q44b1 q44bc@q44af q44bb@q44ad q44ba@q44ab))))) (set! q2f2f@library-body-expander (lambda (q44de@name q44df@main-exp* q44e0@imp* q44e1@b* q44e2@top?) ((lambda (q44e9@itc) (begin (set! q44e9@itc (q2f23@make-collector)) ((lambda (q44f2@q44eb q44f3@q44ed q44f4@q44ef q44f5@q44f1) ((lambda (q44fa@swap) (dynamic-wind q44fa@swap (lambda () (call-with-values (lambda () (q2f1f@parse-import-spec* q44e0@imp*)) (lambda (q4500@q44fd q4501@q44ff) ((lambda (q4504@subst-labels q4505@subst-names) ((lambda (q4508@rib) ((lambda (q450b@wrap) (begin (set! q450b@wrap (lambda (q4586@x) (q2c79@make-stx q4586@x q2c2b@top-mark* (list q4508@rib) '()))) ((lambda (q450c@b* q450d@main-exp* q450e@rtc q450f@vtc) ((lambda (q451c@q4515 q451d@q4517 q451e@q4519 q451f@q451b) ((lambda (q4524@swap) (dynamic-wind q4524@swap (lambda () (call-with-values (lambda () (q2f2b@chi-library-internal q450c@b* q4508@rib q44e2@top?)) (lambda (q4532@q4527 q4533@q4529 q4534@q452b q4535@q452d q4536@q452f q4537@q4531) ((lambda (q453e@internal-exp* q453f@rhs* q4540@lex* q4541@mr q4542@r q4543@init*) (call-with-values (lambda () (q2f19@parse-exports (append q450d@main-exp* q453e@internal-exp*))) (lambda (q454e@q454b q454f@q454d) ((lambda (q4552@exp-id* q4553@exp-name*) (begin (q2c66@seal-rib! q4508@rib) ((lambda (q4556@init*) ((lambda (q4558@rhs*) ((lambda () (begin (q2c68@unseal-rib! q4508@rib) ((lambda (q455a@loc* q455b@export-subst) ((lambda (q455f@errstr) (begin (set! q455f@errstr '"attempt to export mutated variable") (call-with-values (lambda () (q2f8f@make-export-env/macros q4540@lex* q455a@loc* q4542@r)) (lambda (q4566@q4561 q4567@q4563 q4568@q4565) ((lambda (q456c@macro* q456d@global* q456e@export-env) (begin (for-each (lambda (q4572@s) ((lambda (q4574@name q4575@label) ((lambda (q4578@p) (if q4578@p ((lambda (q457a@b) ((lambda (q457c@type) (if (eq? q457c@type 'mutable) (q2fa3@syntax-violation 'export q455f@errstr q4574@name) (void))) (car q457a@b))) (cdr q4578@p)) (void))) (assq q4575@label q456e@export-env))) (car q4572@s) (cdr q4572@s))) q455b@export-subst) ((lambda (q457e@invoke-body q457f@invoke-definitions) (values (q44e9@itc) (q450e@rtc) (q450f@vtc) (q2c0e@q2b7d@build-sequence '#f (append q457f@invoke-definitions (list q457e@invoke-body))) q456c@macro* q455b@export-subst q456e@export-env)) (q2c11@q2b83@build-letrec* '#f q4540@lex* q4558@rhs* (q2f8b@build-exports q456d@global* q4556@init*)) (map q2c0a@q2ada@build-global-define (map cdr q456d@global*))))) q4568@q4565 q4567@q4563 q4566@q4561))))) '#f)) (map q2c31@gen-global q4540@lex*) (q2f8d@make-export-subst q4553@exp-name* q4552@exp-id*)))))) (q2eec@chi-rhs* q453f@rhs* q4542@r q4541@mr))) (q2ed8@chi-expr* q4543@init* q4542@r q4541@mr)))) q454f@q454d q454e@q454b)))) q4537@q4531 q4536@q452f q4535@q452d q4534@q452b q4533@q4529 q4532@q4527)))) q4524@swap)) (lambda () (begin ((lambda (q4582@t) (begin (q451c@q4515 q451e@q4519) (set! q451e@q4519 q4582@t))) (q451c@q4515)) ((lambda (q4584@t) (begin (q451d@q4517 q451f@q451b) (set! q451f@q451b q4584@t))) (q451d@q4517)))))) q2f25@inv-collector q2f27@vis-collector q450e@rtc q450f@vtc)) (map q450b@wrap q44e1@b*) (map q450b@wrap q44df@main-exp*) (q2f23@make-collector) (q2f23@make-collector)))) '#f)) (q2f21@make-top-rib q4505@subst-names q4504@subst-labels))) q4501@q44ff q4500@q44fd)))) q44fa@swap)) (lambda () (begin ((lambda (q4588@t) (begin (q44f2@q44eb q44f4@q44ef) (set! q44f4@q44ef q4588@t))) (q44f2@q44eb)) ((lambda (q458a@t) (begin (q44f3@q44ed q44f5@q44f1) (set! q44f5@q44f1 q458a@t))) (q44f3@q44ed)))))) q2f29@imp-collector q2fb1@top-level-context q44e9@itc '#f))) '#f))) (set! q2f31@core-library-expander (lambda (q458c@e q458d@verify-name) (call-with-values (lambda () (q2f1d@parse-library q458c@e)) (lambda (q4598@q4591 q4599@q4593 q459a@q4595 q459b@q4597) ((lambda (q45a0@b* q45a1@imp* q45a2@exp* q45a3@name*) (call-with-values (lambda () (q2f1b@parse-library-name q45a3@name*)) (lambda (q45ac@q45a9 q45ad@q45ab) ((lambda (q45b0@ver q45b1@name) (begin (q458d@verify-name q45b1@name) (call-with-values (lambda () (q2f2f@library-body-expander q45b1@name q45a2@exp* q45a1@imp* q45a0@b* '#f)) (lambda (q45c2@q45b5 q45c3@q45b7 q45c4@q45b9 q45c5@q45bb q45c6@q45bd q45c7@q45bf q45c8@q45c1) ((lambda (q45d0@export-env q45d1@export-subst q45d2@visit-code q45d3@invoke-code q45d4@visit-req* q45d5@invoke-req* q45d6@imp*) (values q45b1@name q45b0@ver q45d6@imp* q45d5@invoke-req* q45d4@visit-req* q45d3@invoke-code q45d2@visit-code q45d1@export-subst q45d0@export-env)) q45c8@q45c1 q45c7@q45bf q45c6@q45bd q45c5@q45bb q45c4@q45b9 q45c3@q45b7 q45c2@q45b5))))) q45ad@q45ab q45ac@q45a9)))) q459b@q4597 q459a@q4595 q4599@q4593 q4598@q4591))))) (set! q2f33@parse-top-level-program (lambda (q45de@e*) ((lambda (q45e0@t) ((lambda (q45e2@ls/false) (if (and q45e2@ls/false (apply (lambda (q45e4@import q45e5@imp* q45e6@b*) (eq? (q2fa9@syntax->datum q45e4@import) 'import)) q45e2@ls/false)) (apply (lambda (q45ea@import q45eb@imp* q45ec@b*) (values q45eb@imp* q45ec@b*)) q45e2@ls/false) ((lambda (q45f0@t) ((lambda (q45f2@ls/false) (if (and q45f2@ls/false (apply (lambda (q45f4@import q45f5@x q45f6@y) (eq? (q2fa9@syntax->datum q45f4@import) 'import)) q45f2@ls/false)) (apply (lambda (q45fa@import q45fb@x q45fc@y) (q2fa3@syntax-violation 'expander '"invalid syntax of top-level program" (q2ca9@syntax-car q45de@e*))) q45f2@ls/false) ((lambda (q4600@t) ((lambda (q4602@ls/false) (if q4602@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) q4602@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q4600@t))) (q2eba@syntax-dispatch q4600@t '_))) q45f0@t))) (q2eba@syntax-dispatch q45f0@t '((any . any) . any)))) q45e0@t))) (q2eba@syntax-dispatch q45e0@t '((any . each-any) . each-any)))) q45de@e*))) (set! q2f35@top-level-expander (lambda (q4604@e*) (call-with-values (lambda () (q2f33@parse-top-level-program q4604@e*)) (lambda (q460a@q4607 q460b@q4609) ((lambda (q460e@b* q460f@imp*) (call-with-values (lambda () (q2f2f@library-body-expander '() '() q460f@imp* q460e@b* '#t)) (lambda (q4620@q4613 q4621@q4615 q4622@q4617 q4623@q4619 q4624@q461b q4625@q461d q4626@q461f) ((lambda (q462e@export-env q462f@export-subst q4630@visit-code q4631@invoke-code q4632@visit-req* q4633@invoke-req* q4634@imp*) (values q4633@invoke-req* q4631@invoke-code)) q4626@q461f q4625@q461d q4624@q461b q4623@q4619 q4622@q4617 q4621@q4615 q4620@q4613)))) q460b@q4609 q460a@q4607))))) (set! q2f3b@q2f36 (make-record-type-descriptor 'env '#f 'q2f39 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! q2f3d@q2f38 '#f) (set! q2f3f@q2f37 (make-record-constructor-descriptor q2f3b@q2f36 '#f q2f3d@q2f38)) (set! q2f42@env? (record-predicate q2f3b@q2f36)) (set! q2f44@make-env (record-constructor q2f3f@q2f37)) (set! q2f46@env-names (record-accessor q2f3b@q2f36 '0)) (set! q2f48@env-labels (record-accessor q2f3b@q2f36 '1)) (set! q2f4a@env-itc (record-accessor q2f3b@q2f36 '2)) (set! q2f4c@set-env-names! (record-mutator q2f3b@q2f36 '0)) (set! q2f4e@set-env-labels! (record-mutator q2f3b@q2f36 '1)) (set! q2f50@set-env-itc! (record-mutator q2f3b@q2f36 '2)) (set! q2f52@rp (q2856@q277d@make-record-printer 'env (lambda (q463c@x q463d@p q463e@wr) (display '"#<environment>" q463d@p)))) (set! q2f58@q2f53 (make-record-type-descriptor 'interaction-env '#f 'q2f56 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! q2f5a@q2f55 '#f) (set! q2f5c@q2f54 (make-record-constructor-descriptor q2f58@q2f53 '#f q2f5a@q2f55)) (set! q2f5f@interaction-env? (record-predicate q2f58@q2f53)) (set! q2f61@make-interaction-env (record-constructor q2f5c@q2f54)) (set! q2f63@interaction-env-rib (record-accessor q2f58@q2f53 '0)) (set! q2f65@interaction-env-r (record-accessor q2f58@q2f53 '1)) (set! q2f67@interaction-env-locs (record-accessor q2f58@q2f53 '2)) (set! q2f69@set-interaction-env-rib! (record-mutator q2f58@q2f53 '0)) (set! q2f6b@set-interaction-env-r! (record-mutator q2f58@q2f53 '1)) (set! q2f6d@set-interaction-env-locs! (record-mutator q2f58@q2f53 '2)) (set! q2f6f@rp (q2856@q277d@make-record-printer 'interaction-env (lambda (q4642@x q4643@p q4644@wr) (display '"#<environment>" q4643@p)))) (set! q2f71@interaction-environment-symbols (lambda () (q2f79@environment-symbols (q2faf@interaction-environment)))) (set! q2f73@environment-bindings (lambda (q4648@e) (vector->list (vector-map (lambda (q464a@name q464b@label) (q2f75@parse-binding (cons q464a@name (q2ad2@q2972@imported-label->binding q464b@label)))) (q2f46@env-names q4648@e) (q2f48@env-labels q4648@e))))) (set! q2f75@parse-binding (lambda (q464e@b) (cons (car q464e@b) ((lambda (q4650@t) (if (memv q4650@t '(core-prim global)) 'procedure (if (memv q4650@t '(core-macro macro global-macro)) 'syntax (if (memv q4650@t '($core-rtd)) 'record (if (eq? (car q464e@b) (cadr q464e@b)) 'syntax 'unknown))))) (cadr q464e@b))))) (set! q2f77@environment? (lambda (q4652@x) (or (q2f42@env? q4652@x) (q2f5f@interaction-env? q4652@x)))) (set! q2f79@environment-symbols (lambda (q4654@x) (if (q2f42@env? q4654@x) (vector->list (q2f46@env-names q4654@x)) (if (q2f5f@interaction-env? q4654@x) (map values (q2c4a@rib-sym* (q2f63@interaction-env-rib q4654@x))) (assertion-violation 'environment-symbols '"not an environment" q4654@x))))) (set! q2f7b@environment (lambda q4656@imp* ((lambda (q4658@itc) ((lambda (q465e@q465b q465f@q465d) ((lambda (q4662@swap) (dynamic-wind q4662@swap (lambda () (call-with-values (lambda () (q2f1f@parse-import-spec* q4656@imp*)) (lambda (q4668@q4665 q4669@q4667) ((lambda (q466c@subst-labels q466d@subst-names) (q2f44@make-env q466d@subst-names q466c@subst-labels q4658@itc)) q4669@q4667 q4668@q4665)))) q4662@swap)) (lambda () ((lambda (q4670@t) (begin (q465e@q465b q465f@q465d) (set! q465f@q465d q4670@t))) (q465e@q465b))))) q2f29@imp-collector q4658@itc)) (q2f23@make-collector)))) (set! q2f7d@null-environment (lambda (q4672@n) (begin (if (not (eqv? q4672@n '5)) (assertion-violation 'null-environment '"not 5" q4672@n) (void)) (q2f7b@environment '(psyntax null-environment-5))))) (set! q2f7f@scheme-report-environment (lambda (q4674@n) (begin (if (not (eqv? q4674@n '5)) (assertion-violation 'scheme-report-environment '"not 5" q4674@n) (void)) (q2f7b@environment '(psyntax scheme-report-environment-5))))) (set! q2f81@expand (lambda (q4676@x q4677@env) (if (q2f42@env? q4677@env) ((lambda (q467a@rib) ((lambda (q467c@x q467d@itc q467e@rtc q467f@vtc) ((lambda (q4684@x) (begin (q2c66@seal-rib! q467a@rib) (values q4684@x (q467e@rtc)))) ((lambda (q4696@q4687 q4697@q4689 q4698@q468b q4699@q468d q469a@q468f q469b@q4691 q469c@q4693 q469d@q4695) ((lambda (q46a6@swap) (dynamic-wind q46a6@swap (lambda () (q2edc@chi-expr q467c@x '() '())) q46a6@swap)) (lambda () (begin ((lambda (q46a8@t) (begin (q4696@q4687 q469a@q468f) (set! q469a@q468f q46a8@t))) (q4696@q4687)) ((lambda (q46aa@t) (begin (q4697@q4689 q469b@q4691) (set! q469b@q4691 q46aa@t))) (q4697@q4689)) ((lambda (q46ac@t) (begin (q4698@q468b q469c@q4693) (set! q469c@q4693 q46ac@t))) (q4698@q468b)) ((lambda (q46ae@t) (begin (q4699@q468d q469d@q4695) (set! q469d@q4695 q46ae@t))) (q4699@q468d)))))) q2fb1@top-level-context q2f25@inv-collector q2f27@vis-collector q2f29@imp-collector '#f q467e@rtc q467f@vtc q467d@itc))) (q2c79@make-stx q4676@x q2c2b@top-mark* (list q467a@rib) '()) (q2f4a@env-itc q4677@env) (q2f23@make-collector) (q2f23@make-collector))) (q2f21@make-top-rib (q2f46@env-names q4677@env) (q2f48@env-labels q4677@env))) (if (q2f5f@interaction-env? q4677@env) ((lambda (q46b0@rib q46b1@r q46b2@rtc) ((lambda (q46b6@x) (call-with-values (lambda () ((lambda (q46cc@q46bd q46cd@q46bf q46ce@q46c1 q46cf@q46c3 q46d0@q46c5 q46d1@q46c7 q46d2@q46c9 q46d3@q46cb) ((lambda (q46dc@swap) (dynamic-wind q46dc@swap (lambda () (q2f2d@chi-interaction-expr q46b6@x q46b0@rib q46b1@r)) q46dc@swap)) (lambda () (begin ((lambda (q46de@t) (begin (q46cc@q46bd q46d0@q46c5) (set! q46d0@q46c5 q46de@t))) (q46cc@q46bd)) ((lambda (q46e0@t) (begin (q46cd@q46bf q46d1@q46c7) (set! q46d1@q46c7 q46e0@t))) (q46cd@q46bf)) ((lambda (q46e2@t) (begin (q46ce@q46c1 q46d2@q46c9) (set! q46d2@q46c9 q46e2@t))) (q46ce@q46c1)) ((lambda (q46e4@t) (begin (q46cf@q46c3 q46d3@q46cb) (set! q46d3@q46cb q46e4@t))) (q46cf@q46c3)))))) q2fb1@top-level-context q2f25@inv-collector q2f27@vis-collector q2f29@imp-collector q4677@env q46b2@rtc (q2f23@make-collector) (q2f23@make-collector))) (lambda (q46e6@q46b9 q46e7@q46bb) ((lambda (q46ea@r^ q46eb@e) (begin (q2f6b@set-interaction-env-r! q4677@env q46ea@r^) (values q46eb@e (q46b2@rtc)))) q46e7@q46bb q46e6@q46b9)))) (q2c79@make-stx q4676@x q2c2b@top-mark* (list q46b0@rib) '()))) (q2f63@interaction-env-rib q4677@env) (q2f65@interaction-env-r q4677@env) (q2f23@make-collector)) (assertion-violation 'expand '"not an environment" q4677@env))))) (set! q2f83@eval (lambda (q46ee@x q46ef@env) (begin (if (not (q2f77@environment? q46ef@env)) (error 'eval '"not an environment" q46ef@env) (void)) (call-with-values (lambda () (q2f81@expand q46ee@x q46ef@env)) (lambda (q46f6@q46f3 q46f7@q46f5) ((lambda (q46fa@invoke-req* q46fb@x) (begin (for-each q2ad3@q2974@invoke-library q46fa@invoke-req*) (eval-core (q28ad@q2865@expanded->core q46fb@x)))) q46f7@q46f5 q46f6@q46f3)))))) (set! q2f85@library-expander (lambda q476c ((lambda (q476d) (if (= q476d '3) (apply (lambda (q46fe@x q46ff@filename q4700@verify-name) ((lambda (q4705@build-visit-code q4707@visit!) (begin (set! q4705@build-visit-code (lambda (q475a@macro*) (if (null? q475a@macro*) (q2c0f@q2b7f@build-void) (q2c0e@q2b7d@build-sequence '#f (map (lambda (q475c@x) ((lambda (q475e@loc q475f@src) (list 'set! q475e@loc q475f@src)) (car q475c@x) (cddr q475c@x))) q475a@macro*))))) (set! q4707@visit! (lambda (q4752@macro*) (for-each (lambda (q4754@x) ((lambda (q4756@loc q4757@proc) (set-symbol-value! q4756@loc q4757@proc)) (car q4754@x) (cadr q4754@x))) q4752@macro*))) (call-with-values (lambda () (q2f31@core-library-expander q46fe@x q4700@verify-name)) (lambda (q471a@q4709 q471b@q470b q471c@q470d q471d@q470f q471e@q4711 q471f@q4713 q4720@q4715 q4721@q4717 q4722@q4719) ((lambda (q472c@export-env q472d@export-subst q472e@macro* q472f@invoke-code q4730@vis* q4731@inv* q4732@imp* q4733@ver q4734@name) ((lambda (q473e@id q473f@name q4740@ver q4741@imp* q4742@vis* q4743@inv* q4744@visit-proc q4745@invoke-proc q4746@visit-code q4747@invoke-code) (begin (q2ad1@q2970@install-library q473e@id q473f@name q4740@ver q4741@imp* q4742@vis* q4743@inv* q472d@export-subst q472c@export-env q4744@visit-proc q4745@invoke-proc q4746@visit-code q4747@invoke-code '#t q46ff@filename) (values q473e@id q473f@name q4740@ver q4741@imp* q4742@vis* q4743@inv* q4747@invoke-code q4746@visit-code q472d@export-subst q472c@export-env))) (gensym) q4734@name q4733@ver (map q2ad7@q297c@library-spec q4732@imp*) (map q2ad7@q297c@library-spec q4730@vis*) (map q2ad7@q297c@library-spec q4731@inv*) (lambda () (q4707@visit! q472e@macro*)) (lambda () (eval-core (q28ad@q2865@expanded->core q472f@invoke-code))) (q4705@build-visit-code q472e@macro*) q472f@invoke-code)) q4722@q4719 q4721@q4717 q4720@q4715 q471f@q4713 q471e@q4711 q471d@q470f q471c@q470d q471b@q470b q471a@q4709))))) '#f '#f)) q476c) (if (= q476d '2) (apply (lambda (q4762@x q4763@filename) (q2f85@library-expander q4762@x q4763@filename (lambda (q4766@x) (values)))) q476c) (if (= q476d '1) (apply (lambda (q4768@x) (q2f85@library-expander q4768@x '#f (lambda (q476a@x) (values)))) q476c) (error 'apply '"invalid arg count"))))) (length q476c)))) (set! q2f87@boot-library-expand (lambda (q476e@x) (call-with-values (lambda () (q2f85@library-expander q476e@x)) (lambda (q4784@q4771 q4785@q4773 q4786@q4775 q4787@q4777 q4788@q4779 q4789@q477b q478a@q477d q478b@q477f q478c@q4781 q478d@q4783) ((lambda (q4798@export-env q4799@export-subst q479a@visit-code q479b@invoke-code q479c@inv* q479d@vis* q479e@imp* q479f@ver q47a0@name q47a1@id) (values q47a0@name q479b@invoke-code q4799@export-subst q4798@export-env)) q478d@q4783 q478c@q4781 q478b@q477f q478a@q477d q4789@q477b q4788@q4779 q4787@q4777 q4786@q4775 q4785@q4773 q4784@q4771))))) (set! q2f89@rev-map-append (lambda (q47ac@f q47ad@ls q47ae@ac) (if (null? q47ad@ls) q47ae@ac (q2f89@rev-map-append q47ac@f (cdr q47ad@ls) (cons (q47ac@f (car q47ad@ls)) q47ae@ac))))) (set! q2f8b@build-exports (lambda (q47b2@lex*+loc* q47b3@init*) (q2c0e@q2b7d@build-sequence '#f (cons (q2c0f@q2b7f@build-void) (q2f89@rev-map-append (lambda (q47b6@x) (list 'set! (cdr q47b6@x) (car q47b6@x))) q47b2@lex*+loc* q47b3@init*))))) (set! q2f8d@make-export-subst (lambda (q47b8@name* q47b9@id*) (map (lambda (q47bc@name q47bd@id) ((lambda (q47c0@label) (begin (if (not q47c0@label) (q2fa3@syntax-violation '#f '"cannot export unbound identifier" q47bd@id) (void)) (cons q47bc@name q47c0@label))) (q2cc9@id->label q47bd@id))) q47b8@name* q47b9@id*))) (set! q2f8f@make-export-env/macros (lambda (q47c2@lex* q47c3@loc* q47c4@r) ((lambda (q47c9@lookup) (begin (set! q47c9@lookup (lambda (q47e6@x) ((letrec ((q47e8@f (lambda (q47ea@x q47eb@lex* q47ec@loc*) (if (pair? q47eb@lex*) (if (eq? q47ea@x (car q47eb@lex*)) (car q47ec@loc*) (q47e8@f q47ea@x (cdr q47eb@lex*) (cdr q47ec@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) q47e8@f) q47e6@x q47c2@lex* q47c3@loc*))) ((letrec ((q47ca@f (lambda (q47cc@r q47cd@env q47ce@global* q47cf@macro*) (if (null? q47cc@r) (values q47cd@env q47ce@global* q47cf@macro*) ((lambda (q47d4@x) ((lambda (q47d6@label q47d7@b) ((lambda (q47da@t) (if (memv q47da@t '(lexical)) ((lambda (q47dc@v) ((lambda (q47de@loc q47df@type) (q47ca@f (cdr q47cc@r) (cons (cons* q47d6@label q47df@type q47de@loc) q47cd@env) (cons (cons (q2e46@lexical-var q47dc@v) q47de@loc) q47ce@global*) q47cf@macro*)) (q47c9@lookup (q2e46@lexical-var q47dc@v)) (if (q2e48@lexical-mutable? q47dc@v) 'mutable 'global))) (q2cd3@binding-value q47d7@b)) (if (memv q47da@t '(local-macro)) ((lambda (q47e2@loc) (q47ca@f (cdr q47cc@r) (cons (cons* q47d6@label 'global-macro q47e2@loc) q47cd@env) q47ce@global* (cons (cons q47e2@loc (q2cd3@binding-value q47d7@b)) q47cf@macro*))) (gensym)) (if (memv q47da@t '(local-macro!)) ((lambda (q47e4@loc) (q47ca@f (cdr q47cc@r) (cons (cons* q47d6@label 'global-macro! q47e4@loc) q47cd@env) q47ce@global* (cons (cons q47e4@loc (q2cd3@binding-value q47d7@b)) q47cf@macro*))) (gensym)) (if (memv q47da@t '($rtd $module)) (q47ca@f (cdr q47cc@r) (cons q47d4@x q47cd@env) q47ce@global* q47cf@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (q2cd1@binding-type q47d7@b) (q2cd3@binding-value q47d7@b))))))) (q2cd1@binding-type q47d7@b))) (car q47d4@x) (cdr q47d4@x))) (car q47cc@r)))))) q47ca@f) q47c4@r '() '() '()))) '#f))) (set! q2f91@generate-temporaries (lambda (q47f0@ls) ((lambda (q47f2@t) ((lambda (q47f4@ls/false) (if q47f4@ls/false (apply (lambda (q47f6@ls) (map (lambda (q47f8@x) (q2c79@make-stx ((lambda (q47fa@x) (if (or (symbol? q47fa@x) (string? q47fa@x)) (gensym q47fa@x) (gensym 't))) (q2fa9@syntax->datum q47f8@x)) q2c2b@top-mark* '() '())) q47f6@ls)) q47f4@ls/false) ((lambda (q47fc@t) ((lambda (q47fe@ls/false) (if q47fe@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) q47fe@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q47fc@t))) (q2eba@syntax-dispatch q47fc@t '_))) q47f2@t))) (q2eba@syntax-dispatch q47f2@t 'each-any))) q47f0@ls))) (set! q2f93@free-identifier=? (lambda (q4800@x q4801@y) (if (q2caf@id? q4800@x) (if (q2caf@id? q4801@y) (q2cb7@free-id=? q4800@x q4801@y) (assertion-violation 'free-identifier=? '"not an identifier" q4801@y)) (assertion-violation 'free-identifier=? '"not an identifier" q4800@x)))) (set! q2f95@bound-identifier=? (lambda (q4804@x q4805@y) (if (q2caf@id? q4804@x) (if (q2caf@id? q4805@y) (q2cb5@bound-id=? q4804@x q4805@y) (assertion-violation 'bound-identifier=? '"not an identifier" q4805@y)) (assertion-violation 'bound-identifier=? '"not an identifier" q4804@x)))) (set! q2f97@make-source-condition (lambda (q4808@x) ((lambda (q4812@q480d q4814@q480f q4816@q480e q4819@q480c q481b@make-source-condition q481d@q480a q481f@q480b q4821@source-condition? q4823@source-filename q4825@source-character) (begin (set! q4812@q480d (make-record-type-descriptor '&source-information q4c70@q49b7@&condition-rtd 'q4810 '#f '#f '#((immutable file-name) (immutable character)))) (set! q4814@q480f '#f) (set! q4816@q480e (make-record-constructor-descriptor q4812@q480d q4c71@q49b9@&condition-rcd q4814@q480f)) (set! q4819@q480c (record-predicate q4812@q480d)) (set! q481b@make-source-condition (record-constructor q4816@q480e)) (set! q481d@q480a (record-accessor q4812@q480d '0)) (set! q481f@q480b (record-accessor q4812@q480d '1)) (set! q4821@source-condition? (condition-predicate q4812@q480d)) (set! q4823@source-filename (condition-accessor q4812@q480d q481d@q480a)) (set! q4825@source-character (condition-accessor q4812@q480d q481f@q480b)) (if (pair? q4808@x) (q481b@make-source-condition (car q4808@x) (cdr q4808@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! q2f99@extract-position-condition (lambda (q4826@x) (q2f97@make-source-condition (q2f9b@expression-position q4826@x)))) (set! q2f9b@expression-position (lambda (q4828@x) (and (q2c77@stx? q4828@x) ((lambda (q482a@x) (and (q284e@q276d@annotation? q482a@x) (q284f@q276f@annotation-source q482a@x))) (q2c7b@stx-expr q4828@x))))) (set! q2f9d@assertion-error (lambda (q482c@expr q482d@pos) (raise (condition (q4ca0@q4a7b@make-assertion-violation) (q4cb2@q4aad@make-who-condition 'assert) (q4c76@q4a0e@make-message-condition '"assertion failed") (q4ca8@q4a92@make-irritants-condition (list q482c@expr)) (q2f97@make-source-condition q482d@pos))))) (set! q2f9f@syntax-error (lambda (q4830@x . q4832@args) (begin (if (not (for-all string? q4832@args)) (assertion-violation 'syntax-error '"invalid argument" q4832@args) (void)) (raise (condition (q4c76@q4a0e@make-message-condition (if (null? q4832@args) '"invalid syntax" (apply string-append q4832@args))) (q4cd4@q4b09@make-syntax-violation (q2fa9@syntax->datum q4830@x) '#f) (q2f99@extract-position-condition q4830@x)))))) (set! q2fa1@syntax-violation* (lambda (q4834@who q4835@msg q4836@form q4837@condition-object) (begin (if (not (string? q4835@msg)) (assertion-violation 'syntax-violation '"message is not a string" q4835@msg) (void)) ((lambda (q483c@who) (raise (condition (if q483c@who (q4cb2@q4aad@make-who-condition q483c@who) (condition)) (q4c76@q4a0e@make-message-condition q4835@msg) q4837@condition-object (q2f99@extract-position-condition q4836@form)))) (if (or (string? q4834@who) (symbol? q4834@who)) q4834@who (if (not q4834@who) ((lambda (q483e@t) ((lambda (q4840@ls/false) (if (and q4840@ls/false (apply (lambda (q4842@id) (q2caf@id? q4842@id)) q4840@ls/false)) (apply (lambda (q4844@id) (q2fa9@syntax->datum q4844@id)) q4840@ls/false) ((lambda (q4846@t) ((lambda (q4848@ls/false) (if (and q4848@ls/false (apply (lambda (q484a@id q484b@rest) (q2caf@id? q484a@id)) q4848@ls/false)) (apply (lambda (q484e@id q484f@rest) (q2fa9@syntax->datum q484e@id)) q4848@ls/false) ((lambda (q4852@t) ((lambda (q4854@ls/false) (if q4854@ls/false (apply (lambda () '#f) q4854@ls/false) (q2fa3@syntax-violation '#f '"invalid syntax" q4852@t))) (q2eba@syntax-dispatch q4852@t '_))) q4846@t))) (q2eba@syntax-dispatch q4846@t '(any . any)))) q483e@t))) (q2eba@syntax-dispatch q483e@t 'any))) q4836@form) (assertion-violation 'syntax-violation '"invalid who argument" q4834@who))))))) (set! q2fa3@syntax-violation (lambda q4864 ((lambda (q4865) (if (= q4865 '3) (apply (lambda (q4856@who q4857@msg q4858@form) (q2fa3@syntax-violation q4856@who q4857@msg q4858@form '#f)) q4864) (if (= q4865 '4) (apply (lambda (q485c@who q485d@msg q485e@form q485f@subform) (q2fa1@syntax-violation* q485c@who q485d@msg q485e@form (q4cd4@q4b09@make-syntax-violation (q2fa9@syntax->datum q485e@form) (q2fa9@syntax->datum q485f@subform)))) q4864) (error 'apply '"invalid arg count")))) (length q4864)))) (set! q2fa5@identifier? (lambda (q4866@x) (q2caf@id? q4866@x))) (set! q2fa7@datum->syntax (lambda (q4868@id q4869@datum) (if (q2caf@id? q4868@id) (q2c8d@datum->stx q4868@id q4869@datum) (assertion-violation 'datum->syntax '"not an identifier" q4868@id)))) (set! q2fa9@syntax->datum (lambda (q486c@x) (q2cc5@stx->datum q486c@x))) (set! q2fab@compile-r6rs-top-level (lambda (q486e@x*) (call-with-values (lambda () (q2f35@top-level-expander q486e@x*)) (lambda (q4874@q4871 q4875@q4873) ((lambda (q4878@invoke-code q4879@lib*) (lambda () (begin (for-each q2ad3@q2974@invoke-library q4879@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (q28ad@q2865@expanded->core q4878@invoke-code)) (void)) (eval-core (q28ad@q2865@expanded->core q4878@invoke-code))))) q4875@q4873 q4874@q4871))))) (set! q2fad@pre-compile-r6rs-top-level (lambda (q487c@x*) (call-with-values (lambda () (q2f35@top-level-expander q487c@x*)) (lambda (q4882@q487f q4883@q4881) ((lambda (q4886@invoke-code q4887@lib*) (begin (for-each q2ad3@q2974@invoke-library q4887@lib*) (q2857@q277f@compile-core (q28ad@q2865@expanded->core q4886@invoke-code)))) q4883@q4881 q4882@q487f))))) (set! q2faf@interaction-environment ((lambda (q488a@the-env) (lambda () (or q488a@the-env ((lambda (q488c@lib q488d@rib) (begin ((lambda (q4890@subst) (begin (q2c54@set-rib-sym*! q488d@rib (map car q4890@subst)) (q2c56@set-rib-mark**! q488d@rib (map (lambda (q4892@x) q2c2b@top-mark*) q4890@subst)) (q2c58@set-rib-label*! q488d@rib (map cdr q4890@subst)))) (q2aa8@q291e@library-subst q488c@lib)) ((lambda (q4894@env) (begin (set! q488a@the-env q4894@env) q4894@env)) (q2f61@make-interaction-env q488d@rib '() '())))) (q2acc@q2966@find-library-by-name '(mosh interaction)) (q2c5e@make-empty-rib))))) '#f)) (set! q2fb1@top-level-context (q2859@q2783@make-parameter '#f)) (begin (set! q49a2@q2fb1@top-level-context q2fb1@top-level-context) (set! q49a1@q2faf@interaction-environment q2faf@interaction-environment) (set! q49a0@q2fad@pre-compile-r6rs-top-level q2fad@pre-compile-r6rs-top-level) (set! q499f@q2fab@compile-r6rs-top-level q2fab@compile-r6rs-top-level) (set! q499e@q2fa9@syntax->datum q2fa9@syntax->datum) (set! q499d@q2fa7@datum->syntax q2fa7@datum->syntax) (set! q499c@q2fa5@identifier? q2fa5@identifier?) (set! q499b@q2fa3@syntax-violation q2fa3@syntax-violation) (set! q499a@q2fa1@syntax-violation* q2fa1@syntax-violation*) (set! q4999@q2f9f@syntax-error q2f9f@syntax-error) (set! q4998@q2f9d@assertion-error q2f9d@assertion-error) (set! q4997@q2f9b@expression-position q2f9b@expression-position) (set! q4996@q2f99@extract-position-condition q2f99@extract-position-condition) (set! q4995@q2f97@make-source-condition q2f97@make-source-condition) (set! q4994@q2f95@bound-identifier=? q2f95@bound-identifier=?) (set! q4993@q2f93@free-identifier=? q2f93@free-identifier=?) (set! q4992@q2f91@generate-temporaries q2f91@generate-temporaries) (set! q4991@q2f8f@make-export-env/macros q2f8f@make-export-env/macros) (set! q4990@q2f8d@make-export-subst q2f8d@make-export-subst) (set! q498f@q2f8b@build-exports q2f8b@build-exports) (set! q498e@q2f89@rev-map-append q2f89@rev-map-append) (set! q498d@q2f87@boot-library-expand q2f87@boot-library-expand) (set! q498c@q2f85@library-expander q2f85@library-expander) (set! q498b@q2f83@eval q2f83@eval) (set! q498a@q2f81@expand q2f81@expand) (set! q4989@q2f7f@scheme-report-environment q2f7f@scheme-report-environment) (set! q4988@q2f7d@null-environment q2f7d@null-environment) (set! q4987@q2f7b@environment q2f7b@environment) (set! q4986@q2f79@environment-symbols q2f79@environment-symbols) (set! q4985@q2f77@environment? q2f77@environment?) (set! q4984@q2f75@parse-binding q2f75@parse-binding) (set! q4983@q2f73@environment-bindings q2f73@environment-bindings) (set! q4982@q2f71@interaction-environment-symbols q2f71@interaction-environment-symbols) (set! q4981@q2f6f@rp q2f6f@rp) (set! q4980@q2f6d@set-interaction-env-locs! q2f6d@set-interaction-env-locs!) (set! q497f@q2f6b@set-interaction-env-r! q2f6b@set-interaction-env-r!) (set! q497e@q2f69@set-interaction-env-rib! q2f69@set-interaction-env-rib!) (set! q497d@q2f67@interaction-env-locs q2f67@interaction-env-locs) (set! q497c@q2f65@interaction-env-r q2f65@interaction-env-r) (set! q497b@q2f63@interaction-env-rib q2f63@interaction-env-rib) (set! q497a@q2f61@make-interaction-env q2f61@make-interaction-env) (set! q4979@q2f5f@interaction-env? q2f5f@interaction-env?) (set! q4978@q2f5c@q2f54 q2f5c@q2f54) (set! q4977@q2f5a@q2f55 q2f5a@q2f55) (set! q4976@q2f58@q2f53 q2f58@q2f53) (set! q4975@q2f52@rp q2f52@rp) (set! q4974@q2f50@set-env-itc! q2f50@set-env-itc!) (set! q4973@q2f4e@set-env-labels! q2f4e@set-env-labels!) (set! q4972@q2f4c@set-env-names! q2f4c@set-env-names!) (set! q4971@q2f4a@env-itc q2f4a@env-itc) (set! q4970@q2f48@env-labels q2f48@env-labels) (set! q496f@q2f46@env-names q2f46@env-names) (set! q496e@q2f44@make-env q2f44@make-env) (set! q496d@q2f42@env? q2f42@env?) (set! q496c@q2f3f@q2f37 q2f3f@q2f37) (set! q496b@q2f3d@q2f38 q2f3d@q2f38) (set! q496a@q2f3b@q2f36 q2f3b@q2f36) (set! q4969@q2f35@top-level-expander q2f35@top-level-expander) (set! q4968@q2f33@parse-top-level-program q2f33@parse-top-level-program) (set! q4967@q2f31@core-library-expander q2f31@core-library-expander) (set! q4966@q2f2f@library-body-expander q2f2f@library-body-expander) (set! q4965@q2f2d@chi-interaction-expr q2f2d@chi-interaction-expr) (set! q4964@q2f2b@chi-library-internal q2f2b@chi-library-internal) (set! q4963@q2f29@imp-collector q2f29@imp-collector) (set! q4962@q2f27@vis-collector q2f27@vis-collector) (set! q4961@q2f25@inv-collector q2f25@inv-collector) (set! q4960@q2f23@make-collector q2f23@make-collector) (set! q495f@q2f21@make-top-rib q2f21@make-top-rib) (set! q495e@q2f1f@parse-import-spec* q2f1f@parse-import-spec*) (set! q495d@q2f1d@parse-library q2f1d@parse-library) (set! q495c@q2f1b@parse-library-name q2f1b@parse-library-name) (set! q495b@q2f19@parse-exports q2f19@parse-exports) (set! q495a@q2f17@expand-transformer q2f17@expand-transformer) (set! q4959@q2f15@chi-body* q2f15@chi-body*) (set! q4958@q2f13@chi-internal-module q2f13@chi-internal-module) (set! q4957@q2f11@module-interface-exp-id* q2f11@module-interface-exp-id*) (set! q4956@q2f0f@set-module-interface-exp-lab-vec! q2f0f@set-module-interface-exp-lab-vec!) (set! q4955@q2f0d@set-module-interface-exp-id-vec! q2f0d@set-module-interface-exp-id-vec!) (set! q4954@q2f0b@set-module-interface-first-mark! q2f0b@set-module-interface-first-mark!) (set! q4953@q2f09@module-interface-exp-lab-vec q2f09@module-interface-exp-lab-vec) (set! q4952@q2f07@module-interface-exp-id-vec q2f07@module-interface-exp-id-vec) (set! q4951@q2f05@module-interface-first-mark q2f05@module-interface-first-mark) (set! q4950@q2f03@make-module-interface q2f03@make-module-interface) (set! q494f@q2f01@module-interface? q2f01@module-interface?) (set! q494e@q2efe@q2ef6 q2efe@q2ef6) (set! q494d@q2efc@q2ef7 q2efc@q2ef7) (set! q494c@q2efa@q2ef5 q2efa@q2ef5) (set! q494b@q2ef4@parse-module q2ef4@parse-module) (set! q494a@q2ef2@chi-internal q2ef2@chi-internal) (set! q4949@q2ef0@find-dups q2ef0@find-dups) (set! q4948@q2eee@find-bound=? q2eee@find-bound=?) (set! q4947@q2eec@chi-rhs* q2eec@chi-rhs*) (set! q4946@q2eea@expand-interaction-rhs*/init* q2eea@expand-interaction-rhs*/init*) (set! q4945@q2ee8@chi-rhs q2ee8@chi-rhs) (set! q4944@q2ee6@chi-defun q2ee6@chi-defun) (set! q4943@q2ee4@chi-lambda-clause* q2ee4@chi-lambda-clause*) (set! q4942@q2ee2@chi-lambda-clause q2ee2@chi-lambda-clause) (set! q4941@q2ee0@verify-formals q2ee0@verify-formals) (set! q4940@q2ede@chi-set! q2ede@chi-set!) (set! q493f@q2edc@chi-expr q2edc@chi-expr) (set! q493e@q2eda@chi-application q2eda@chi-application) (set! q493d@q2ed8@chi-expr* q2ed8@chi-expr*) (set! q493c@q2ed6@chi-global-macro q2ed6@chi-global-macro) (set! q493b@q2ed4@chi-local-macro q2ed4@chi-local-macro) (set! q493a@q2ed2@chi-macro q2ed2@chi-macro) (set! q4939@q2ed0@do-macro-call q2ed0@do-macro-call) (set! q4938@q2ece@local-macro-transformer q2ece@local-macro-transformer) (set! q4937@q2ecc@macro-transformer q2ecc@macro-transformer) (set! q4936@q2eca@symbol-macro q2eca@symbol-macro) (set! q4935@q2ec8@core-macro-transformer q2ec8@core-macro-transformer) (set! q4934@q2ec6@syntax-transformer q2ec6@syntax-transformer) (set! q4933@q2ec4@ellipsis-map q2ec4@ellipsis-map) (set! q4932@q2ec2@syntax-case-transformer q2ec2@syntax-case-transformer) (set! q4931@q2ec0@verify-literals q2ec0@verify-literals) (set! q4930@q2ebe@underscore? q2ebe@underscore?) (set! q492f@q2ebc@ellipsis? q2ebc@ellipsis?) (set! q492e@q2eba@syntax-dispatch q2eba@syntax-dispatch) (set! q492d@q2eb8@convert-pattern q2eb8@convert-pattern) (set! q492c@q2eb6@foreign-call-transformer q2eb6@foreign-call-transformer) (set! q492b@q2eb4@parameterize-macro q2eb4@parameterize-macro) (set! q492a@q2eb2@incorrect-usage-macro q2eb2@incorrect-usage-macro) (set! q4929@q2eb0@define-condition-type-macro q2eb0@define-condition-type-macro) (set! q4928@q2eae@define-record-type-macro q2eae@define-record-type-macro) (set! q4927@q2eac@define-struct-macro q2eac@define-struct-macro) (set! q4926@q2eaa@quasisyntax-macro q2eaa@quasisyntax-macro) (set! q4925@q2ea8@quasiquote-macro q2ea8@quasiquote-macro) (set! q4924@q2ea6@syntax-rules-macro q2ea6@syntax-rules-macro) (set! q4923@q2ea4@include-into-macro q2ea4@include-into-macro) (set! q4922@q2ea2@include-macro q2ea2@include-macro) (set! q4921@q2ea0@do-include q2ea0@do-include) (set! q4920@q2e9e@cond-macro q2e9e@cond-macro) (set! q491f@q2e9c@and-macro q2e9c@and-macro) (set! q491e@q2e9a@or-macro q2e9a@or-macro) (set! q491d@q2e98@let*-macro q2e98@let*-macro) (set! q491c@q2e96@do-macro q2e96@do-macro) (set! q491b@q2e94@identifier-syntax-macro q2e94@identifier-syntax-macro) (set! q491a@q2e92@endianness-macro q2e92@endianness-macro) (set! q4919@q2e90@assert-macro q2e90@assert-macro) (set! q4918@q2e8e@delay-macro q2e8e@delay-macro) (set! q4917@q2e8c@time-macro q2e8c@time-macro) (set! q4916@q2e8a@define-enumeration-macro q2e8a@define-enumeration-macro) (set! q4915@q2e88@guard-macro q2e88@guard-macro) (set! q4914@q2e86@trace-letrec-syntax-macro q2e86@trace-letrec-syntax-macro) (set! q4913@q2e84@trace-let-syntax-macro q2e84@trace-let-syntax-macro) (set! q4912@q2e82@trace-let/rec-syntax q2e82@trace-let/rec-syntax) (set! q4911@q2e80@trace-define-syntax-macro q2e80@trace-define-syntax-macro) (set! q4910@q2e7e@trace-define-macro q2e7e@trace-define-macro) (set! q490f@q2e7c@trace-lambda-macro q2e7c@trace-lambda-macro) (set! q490e@q2e7a@let*-values-macro q2e7a@let*-values-macro) (set! q490d@q2e78@let-values-macro q2e78@let-values-macro) (set! q490c@q2e76@let-macro q2e76@let-macro) (set! q490b@q2e74@invalid-fmls-error q2e74@invalid-fmls-error) (set! q490a@q2e72@with-syntax-macro q2e72@with-syntax-macro) (set! q4909@q2e70@bless q2e70@bless) (set! q4908@q2e6e@lambda-transformer q2e6e@lambda-transformer) (set! q4907@q2e6c@case-lambda-transformer q2e6c@case-lambda-transformer) (set! q4906@q2e6a@quote-transformer q2e6a@quote-transformer) (set! q4905@q2e68@case-macro q2e68@case-macro) (set! q4904@q2e66@or-transformer q2e66@or-transformer) (set! q4903@q2e64@and-transformer q2e64@and-transformer) (set! q4902@q2e62@if-transformer q2e62@if-transformer) (set! q4901@q2e60@unless-macro q2e60@unless-macro) (set! q4900@q2e5e@when-macro q2e5e@when-macro) (set! q48ff@q2e5c@record-constructor-descriptor-transformer q2e5c@record-constructor-descriptor-transformer) (set! q48fe@q2e5a@record-type-descriptor-transformer q2e5a@record-type-descriptor-transformer) (set! q48fd@q2e58@type-descriptor-transformer q2e58@type-descriptor-transformer) (set! q48fc@q2e56@fluid-let-syntax-transformer q2e56@fluid-let-syntax-transformer) (set! q48fb@q2e54@letrec*-transformer q2e54@letrec*-transformer) (set! q48fa@q2e52@letrec-transformer q2e52@letrec-transformer) (set! q48f9@q2e50@letrec-helper q2e50@letrec-helper) (set! q48f8@q2e4e@add-lexicals q2e4e@add-lexicals) (set! q48f7@q2e4c@add-lexical q2e4c@add-lexical) (set! q48f6@q2e4a@set-lexical-mutable! q2e4a@set-lexical-mutable!) (set! q48f5@q2e48@lexical-mutable? q2e48@lexical-mutable?) (set! q48f4@q2e46@lexical-var q2e46@lexical-var) (set! q48f3@q2e44@scheme-stx q2e44@scheme-stx) (set! q48f2@q2e42@scheme-stx-hashtable q2e42@scheme-stx-hashtable) (set! q48f1@q2e40@parse-define-syntax q2e40@parse-define-syntax) (set! q48f0@q2e3e@parse-define q2e3e@parse-define) (set! q48ef@q2ced@make-eval-transformer q2ced@make-eval-transformer) (set! q48ee@q2ceb@variable-transformer-procedure q2ceb@variable-transformer-procedure) (set! q48ed@q2ce9@variable-transformer? q2ce9@variable-transformer?) (set! q48ec@q2ce7@make-variable-transformer q2ce7@make-variable-transformer) (set! q48eb@q2ce5@sanitize-binding q2ce5@sanitize-binding) (set! q48ea@q2cd7@syntax-type q2cd7@syntax-type) (set! q48e9@q2cd5@raise-unbound-error q2cd5@raise-unbound-error) (set! q48e8@q2cd3@binding-value q2cd3@binding-value) (set! q48e7@q2cd1@binding-type q2cd1@binding-type) (set! q48e6@q2ccf@make-binding q2ccf@make-binding) (set! q48e5@q2ccd@label->binding q2ccd@label->binding) (set! q48e4@q2ccb@id->real-label q2ccb@id->real-label) (set! q48e3@q2cc9@id->label q2cc9@id->label) (set! q48e2@q2cc7@same-marks*? q2cc7@same-marks*?) (set! q48e1@q2cc5@stx->datum q2cc5@stx->datum) (set! q48e0@q2cc3@strip q2cc3@strip) (set! q48df@q2cc1@strip-annotations q2cc1@strip-annotations) (set! q48de@q2cbf@self-evaluating? q2cbf@self-evaluating?) (set! q48dd@q2cbd@bound-id-member? q2cbd@bound-id-member?) (set! q48dc@q2cbb@distinct-bound-ids? q2cbb@distinct-bound-ids?) (set! q48db@q2cb9@valid-bound-ids? q2cb9@valid-bound-ids?) (set! q48da@q2cb7@free-id=? q2cb7@free-id=?) (set! q48d9@q2cb5@bound-id=? q2cb5@bound-id=?) (set! q48d8@q2cb3@same-marks? q2cb3@same-marks?) (set! q48d7@q2cb1@id->sym q2cb1@id->sym) (set! q48d6@q2caf@id? q2caf@id?) (set! q48d5@q2cad@syntax->list q2cad@syntax->list) (set! q48d4@q2cab@syntax-cdr q2cab@syntax-cdr) (set! q48d3@q2ca9@syntax-car q2ca9@syntax-car) (set! q48d2@q2ca7@syntax-list? q2ca7@syntax-list?) (set! q48d1@q2ca5@syntax-null? q2ca5@syntax-null?) (set! q48d0@q2ca3@syntax-vector? q2ca3@syntax-vector?) (set! q48cf@q2ca1@syntax-pair? q2ca1@syntax-pair?) (set! q48ce@q2c9f@syntax-vector->list q2c9f@syntax-vector->list) (set! q48cd@q2c9d@syntax-kind? q2c9d@syntax-kind?) (set! q48cc@q2c9b@add-subst q2c9b@add-subst) (set! q48cb@q2c99@add-mark q2c99@add-mark) (set! q48ca@q2c97@mkstx q2c97@mkstx) (set! q48c9@q2c95@join-wraps q2c95@join-wraps) (set! q48c8@q2c93@anti-mark? q2c93@anti-mark?) (set! q48c7@q2c91@anti-mark q2c91@anti-mark) (set! q48c6@q2c8f@gen-mark q2c8f@gen-mark) (set! q48c5@q2c8d@datum->stx q2c8d@datum->stx) (set! q48c4@q2c8b@rp q2c8b@rp) (set! q48c3@q2c89@set-stx-ae*! q2c89@set-stx-ae*!) (set! q48c2@q2c87@set-stx-subst*! q2c87@set-stx-subst*!) (set! q48c1@q2c85@set-stx-mark*! q2c85@set-stx-mark*!) (set! q48c0@q2c83@set-stx-expr! q2c83@set-stx-expr!) (set! q48bf@q2c81@stx-ae* q2c81@stx-ae*) (set! q48be@q2c7f@stx-subst* q2c7f@stx-subst*) (set! q48bd@q2c7d@stx-mark* q2c7d@stx-mark*) (set! q48bc@q2c7b@stx-expr q2c7b@stx-expr) (set! q48bb@q2c79@make-stx q2c79@make-stx) (set! q48ba@q2c77@stx? q2c77@stx?) (set! q48b9@q2c74@q2c6c q2c74@q2c6c) (set! q48b8@q2c72@q2c6d q2c72@q2c6d) (set! q48b7@q2c70@q2c6b q2c70@q2c6b) (set! q48b6@q2c6a@make-full-rib q2c6a@make-full-rib) (set! q48b5@q2c68@unseal-rib! q2c68@unseal-rib!) (set! q48b4@q2c66@seal-rib! q2c66@seal-rib!) (set! q48b3@q2c64@make-rib-map q2c64@make-rib-map) (set! q48b2@q2c62@extend-rib/nc! q2c62@extend-rib/nc!) (set! q48b1@q2c60@extend-rib! q2c60@extend-rib!) (set! q48b0@q2c5e@make-empty-rib q2c5e@make-empty-rib) (set! q48af@q2c5c@set-rib-cache! q2c5c@set-rib-cache!) (set! q48ae@q2c5a@set-rib-sealed/freq! q2c5a@set-rib-sealed/freq!) (set! q48ad@q2c58@set-rib-label*! q2c58@set-rib-label*!) (set! q48ac@q2c56@set-rib-mark**! q2c56@set-rib-mark**!) (set! q48ab@q2c54@set-rib-sym*! q2c54@set-rib-sym*!) (set! q48aa@q2c52@rib-cache q2c52@rib-cache) (set! q48a9@q2c50@rib-sealed/freq q2c50@rib-sealed/freq) (set! q48a8@q2c4e@rib-label* q2c4e@rib-label*) (set! q48a7@q2c4c@rib-mark** q2c4c@rib-mark**) (set! q48a6@q2c4a@rib-sym* q2c4a@rib-sym*) (set! q48a5@q2c48@make-rib q2c48@make-rib) (set! q48a4@q2c46@rib? q2c46@rib?) (set! q48a3@q2c43@q2c3b q2c43@q2c3b) (set! q48a2@q2c41@q2c3c q2c41@q2c3c) (set! q48a1@q2c3f@q2c3a q2c3f@q2c3a) (set! q48a0@q2c39@gen-define-label q2c39@gen-define-label) (set! q489f@q2c37@gen-define-label+loc q2c37@gen-define-label+loc) (set! q489e@q2c35@gen-top-level-label q2c35@gen-top-level-label) (set! q489d@q2c33@gen-label q2c33@gen-label) (set! q489c@q2c31@gen-global q2c31@gen-global) (set! q489b@q2c2f@gen-lexical q2c2f@gen-lexical) (set! q489a@q2c2d@top-marked? q2c2d@top-marked?) (set! q4899@q2c2b@top-mark* q2c2b@top-mark*) (set! q4898@q2c26@set-union q2c26@set-union) (set! q4897@q2c24@set-cons q2c24@set-cons) (set! q4896@q2c22@file-options-macro q2c22@file-options-macro) (q2ac9@q2960@current-library-expander q2f85@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q49ac@q49a7 q49ae@q49a9 q49b0@q49a8 q49b3@&condition? q49b5@make-&condition q49b7@&condition-rtd q49b9@&condition-rcd q4a05@q4a00 q4a07@q4a02 q4a09@q4a01 q4a0c@p? q4a0e@make-message-condition q4a10@q49ff q4a12@message-condition? q4a14@condition-message q4a16@&message-rtd q4a18@&message-rcd q4a1e@q4a19 q4a20@q4a1b q4a22@q4a1a q4a25@p? q4a27@make-warning q4a29@warning? q4a2b@&warning-rtd q4a2d@&warning-rcd q4a33@q4a2e q4a35@q4a30 q4a37@q4a2f q4a3a@p? q4a3c@make-serious-condition q4a3e@serious-condition? q4a40@&serious-rtd q4a42@&serious-rcd q4a48@q4a43 q4a4a@q4a45 q4a4c@q4a44 q4a4f@p? q4a51@make-error q4a53@error? q4a55@&error-rtd q4a57@&error-rcd q4a5d@q4a58 q4a5f@q4a5a q4a61@q4a59 q4a64@p? q4a66@make-violation q4a68@violation? q4a6a@&violation-rtd q4a6c@&violation-rcd q4a72@q4a6d q4a74@q4a6f q4a76@q4a6e q4a79@p? q4a7b@make-assertion-violation q4a7d@assertion-violation? q4a7f@&assertion-rtd q4a81@&assertion-rcd q4a89@q4a84 q4a8b@q4a86 q4a8d@q4a85 q4a90@p? q4a92@make-irritants-condition q4a94@q4a83 q4a96@irritants-condition? q4a98@condition-irritants q4a9a@&irritants-rtd q4a9c@&irritants-rcd q4aa4@q4a9f q4aa6@q4aa1 q4aa8@q4aa0 q4aab@p? q4aad@make-who-condition q4aaf@q4a9e q4ab1@who-condition? q4ab3@condition-who q4ab5@&who-rtd q4ab7@&who-rcd q4abd@q4ab8 q4abf@q4aba q4ac1@q4ab9 q4ac4@p? q4ac6@make-non-continuable-violation q4ac8@non-continuable-violation? q4aca@&non-continuable-rtd q4acc@&non-continuable-rcd q4ad2@q4acd q4ad4@q4acf q4ad6@q4ace q4ad9@p? q4adb@make-implementation-restriction-violation q4add@implementation-restriction-violation? q4adf@&implementation-restriction-rtd q4ae1@&implementation-restriction-rcd q4ae7@q4ae2 q4ae9@q4ae4 q4aeb@q4ae3 q4aee@p? q4af0@make-lexical-violation q4af2@lexical-violation? q4af4@&lexical-rtd q4af6@&lexical-rcd q4b00@q4afb q4b02@q4afd q4b04@q4afc q4b07@p? q4b09@make-syntax-violation q4b0b@q4af8 q4b0d@q4afa q4b0f@syntax-violation? q4b11@syntax-violation-form q4b13@syntax-violation-subform q4b15@&syntax-rtd q4b17@&syntax-rcd q4b1d@q4b18 q4b1f@q4b1a q4b21@q4b19 q4b24@p? q4b26@make-undefined-violation q4b28@undefined-violation? q4b2a@&undefined-rtd q4b2c@&undefined-rcd q4b32@q4b2d q4b34@q4b2f q4b36@q4b2e q4b39@p? q4b3b@make-i/o-error q4b3d@i/o-error? q4b3f@&i/o-rtd q4b41@&i/o-rcd q4b47@q4b42 q4b49@q4b44 q4b4b@q4b43 q4b4e@p? q4b50@make-i/o-read-error q4b52@i/o-read-error? q4b54@&i/o-read-rtd q4b56@&i/o-read-rcd q4b5c@q4b57 q4b5e@q4b59 q4b60@q4b58 q4b63@p? q4b65@make-i/o-write-error q4b67@i/o-write-error? q4b69@&i/o-write-rtd q4b6b@&i/o-write-rcd q4b73@q4b6e q4b75@q4b70 q4b77@q4b6f q4b7a@p? q4b7c@make-i/o-invalid-position-error q4b7e@q4b6d q4b80@i/o-invalid-position-error? q4b82@i/o-error-position q4b84@&i/o-invalid-position-rtd q4b86@&i/o-invalid-position-rcd q4b8e@q4b89 q4b90@q4b8b q4b92@q4b8a q4b95@p? q4b97@make-i/o-filename-error q4b99@q4b88 q4b9b@i/o-filename-error? q4b9d@i/o-error-filename q4b9f@&i/o-filename-rtd q4ba1@&i/o-filename-rcd q4ba7@q4ba2 q4ba9@q4ba4 q4bab@q4ba3 q4bae@p? q4bb0@make-i/o-file-protection-error q4bb2@i/o-file-protection-error? q4bb4@&i/o-file-protection-rtd q4bb6@&i/o-file-protection-rcd q4bbc@q4bb7 q4bbe@q4bb9 q4bc0@q4bb8 q4bc3@p? q4bc5@make-i/o-file-is-read-only-error q4bc7@i/o-file-is-read-only-error? q4bc9@&i/o-file-is-read-only-rtd q4bcb@&i/o-file-is-read-only-rcd q4bd1@q4bcc q4bd3@q4bce q4bd5@q4bcd q4bd8@p? q4bda@make-i/o-file-already-exists-error q4bdc@i/o-file-already-exists-error? q4bde@&i/o-file-already-exists-rtd q4be0@&i/o-file-already-exists-rcd q4be6@q4be1 q4be8@q4be3 q4bea@q4be2 q4bed@p? q4bef@make-i/o-file-does-not-exist-error q4bf1@i/o-file-does-not-exist-error? q4bf3@&i/o-file-does-not-exist-rtd q4bf5@&i/o-file-does-not-exist-rcd q4bfd@q4bf8 q4bff@q4bfa q4c01@q4bf9 q4c04@p? q4c06@make-i/o-port-error q4c08@q4bf7 q4c0a@i/o-port-error? q4c0c@i/o-error-port q4c0e@&i/o-port-rtd q4c10@&i/o-port-rcd q4c16@q4c11 q4c18@q4c13 q4c1a@q4c12 q4c1d@p? q4c1f@make-i/o-decoding-error q4c21@i/o-decoding-error? q4c23@&i/o-decoding-rtd q4c25@&i/o-decoding-rcd q4c2d@q4c28 q4c2f@q4c2a q4c31@q4c29 q4c34@p? q4c36@make-i/o-encoding-error q4c38@q4c27 q4c3a@i/o-encoding-error? q4c3c@i/o-encoding-error-char q4c3e@&i/o-encoding-rtd q4c40@&i/o-encoding-rcd q4c46@q4c41 q4c48@q4c43 q4c4a@q4c42 q4c4d@p? q4c4f@make-no-infinities-violation q4c51@no-infinities-violation? q4c53@&no-infinities-rtd q4c55@&no-infinities-rcd q4c5b@q4c56 q4c5d@q4c58 q4c5f@q4c57 q4c62@p? q4c64@make-no-nans-violation q4c66@no-nans-violation? q4c68@&no-nans-rtd q4c6a@&no-nans-rcd) (begin (set! q49ac@q49a7 (make-record-type-descriptor '&condition '#f 'q49aa '#f '#f '#())) (set! q49ae@q49a9 '#f) (set! q49b0@q49a8 (make-record-constructor-descriptor q49ac@q49a7 '#f q49ae@q49a9)) (set! q49b3@&condition? (record-predicate q49ac@q49a7)) (set! q49b5@make-&condition (record-constructor q49b0@q49a8)) (set! q49b7@&condition-rtd q49ac@q49a7) (set! q49b9@&condition-rcd q49b0@q49a8) (set! q4a05@q4a00 (make-record-type-descriptor '&message q49ac@q49a7 'q4a03 '#f '#f '#((immutable message)))) (set! q4a07@q4a02 '#f) (set! q4a09@q4a01 (make-record-constructor-descriptor q4a05@q4a00 q49b0@q49a8 q4a07@q4a02)) (set! q4a0c@p? (record-predicate q4a05@q4a00)) (set! q4a0e@make-message-condition (record-constructor q4a09@q4a01)) (set! q4a10@q49ff (record-accessor q4a05@q4a00 '0)) (set! q4a12@message-condition? (condition-predicate q4a05@q4a00)) (set! q4a14@condition-message (condition-accessor q4a05@q4a00 q4a10@q49ff)) (set! q4a16@&message-rtd q4a05@q4a00) (set! q4a18@&message-rcd q4a09@q4a01) (set! q4a1e@q4a19 (make-record-type-descriptor '&warning q49ac@q49a7 'q4a1c '#f '#f '#())) (set! q4a20@q4a1b '#f) (set! q4a22@q4a1a (make-record-constructor-descriptor q4a1e@q4a19 q49b0@q49a8 q4a20@q4a1b)) (set! q4a25@p? (record-predicate q4a1e@q4a19)) (set! q4a27@make-warning (record-constructor q4a22@q4a1a)) (set! q4a29@warning? (condition-predicate q4a1e@q4a19)) (set! q4a2b@&warning-rtd q4a1e@q4a19) (set! q4a2d@&warning-rcd q4a22@q4a1a) (set! q4a33@q4a2e (make-record-type-descriptor '&serious q49ac@q49a7 'q4a31 '#f '#f '#())) (set! q4a35@q4a30 '#f) (set! q4a37@q4a2f (make-record-constructor-descriptor q4a33@q4a2e q49b0@q49a8 q4a35@q4a30)) (set! q4a3a@p? (record-predicate q4a33@q4a2e)) (set! q4a3c@make-serious-condition (record-constructor q4a37@q4a2f)) (set! q4a3e@serious-condition? (condition-predicate q4a33@q4a2e)) (set! q4a40@&serious-rtd q4a33@q4a2e) (set! q4a42@&serious-rcd q4a37@q4a2f) (set! q4a48@q4a43 (make-record-type-descriptor '&error q4a33@q4a2e 'q4a46 '#f '#f '#())) (set! q4a4a@q4a45 '#f) (set! q4a4c@q4a44 (make-record-constructor-descriptor q4a48@q4a43 q4a37@q4a2f q4a4a@q4a45)) (set! q4a4f@p? (record-predicate q4a48@q4a43)) (set! q4a51@make-error (record-constructor q4a4c@q4a44)) (set! q4a53@error? (condition-predicate q4a48@q4a43)) (set! q4a55@&error-rtd q4a48@q4a43) (set! q4a57@&error-rcd q4a4c@q4a44) (set! q4a5d@q4a58 (make-record-type-descriptor '&violation q4a33@q4a2e 'q4a5b '#f '#f '#())) (set! q4a5f@q4a5a '#f) (set! q4a61@q4a59 (make-record-constructor-descriptor q4a5d@q4a58 q4a37@q4a2f q4a5f@q4a5a)) (set! q4a64@p? (record-predicate q4a5d@q4a58)) (set! q4a66@make-violation (record-constructor q4a61@q4a59)) (set! q4a68@violation? (condition-predicate q4a5d@q4a58)) (set! q4a6a@&violation-rtd q4a5d@q4a58) (set! q4a6c@&violation-rcd q4a61@q4a59) (set! q4a72@q4a6d (make-record-type-descriptor '&assertion q4a5d@q4a58 'q4a70 '#f '#f '#())) (set! q4a74@q4a6f '#f) (set! q4a76@q4a6e (make-record-constructor-descriptor q4a72@q4a6d q4a61@q4a59 q4a74@q4a6f)) (set! q4a79@p? (record-predicate q4a72@q4a6d)) (set! q4a7b@make-assertion-violation (record-constructor q4a76@q4a6e)) (set! q4a7d@assertion-violation? (condition-predicate q4a72@q4a6d)) (set! q4a7f@&assertion-rtd q4a72@q4a6d) (set! q4a81@&assertion-rcd q4a76@q4a6e) (set! q4a89@q4a84 (make-record-type-descriptor '&irritants q49ac@q49a7 'q4a87 '#f '#f '#((immutable irritants)))) (set! q4a8b@q4a86 '#f) (set! q4a8d@q4a85 (make-record-constructor-descriptor q4a89@q4a84 q49b0@q49a8 q4a8b@q4a86)) (set! q4a90@p? (record-predicate q4a89@q4a84)) (set! q4a92@make-irritants-condition (record-constructor q4a8d@q4a85)) (set! q4a94@q4a83 (record-accessor q4a89@q4a84 '0)) (set! q4a96@irritants-condition? (condition-predicate q4a89@q4a84)) (set! q4a98@condition-irritants (condition-accessor q4a89@q4a84 q4a94@q4a83)) (set! q4a9a@&irritants-rtd q4a89@q4a84) (set! q4a9c@&irritants-rcd q4a8d@q4a85) (set! q4aa4@q4a9f (make-record-type-descriptor '&who q49ac@q49a7 'q4aa2 '#f '#f '#((immutable who)))) (set! q4aa6@q4aa1 '#f) (set! q4aa8@q4aa0 (make-record-constructor-descriptor q4aa4@q4a9f q49b0@q49a8 q4aa6@q4aa1)) (set! q4aab@p? (record-predicate q4aa4@q4a9f)) (set! q4aad@make-who-condition (record-constructor q4aa8@q4aa0)) (set! q4aaf@q4a9e (record-accessor q4aa4@q4a9f '0)) (set! q4ab1@who-condition? (condition-predicate q4aa4@q4a9f)) (set! q4ab3@condition-who (condition-accessor q4aa4@q4a9f q4aaf@q4a9e)) (set! q4ab5@&who-rtd q4aa4@q4a9f) (set! q4ab7@&who-rcd q4aa8@q4aa0) (set! q4abd@q4ab8 (make-record-type-descriptor '&non-continuable q4a5d@q4a58 'q4abb '#f '#f '#())) (set! q4abf@q4aba '#f) (set! q4ac1@q4ab9 (make-record-constructor-descriptor q4abd@q4ab8 q4a61@q4a59 q4abf@q4aba)) (set! q4ac4@p? (record-predicate q4abd@q4ab8)) (set! q4ac6@make-non-continuable-violation (record-constructor q4ac1@q4ab9)) (set! q4ac8@non-continuable-violation? (condition-predicate q4abd@q4ab8)) (set! q4aca@&non-continuable-rtd q4abd@q4ab8) (set! q4acc@&non-continuable-rcd q4ac1@q4ab9) (set! q4ad2@q4acd (make-record-type-descriptor '&implementation-restriction q4a5d@q4a58 'q4ad0 '#f '#f '#())) (set! q4ad4@q4acf '#f) (set! q4ad6@q4ace (make-record-constructor-descriptor q4ad2@q4acd q4a61@q4a59 q4ad4@q4acf)) (set! q4ad9@p? (record-predicate q4ad2@q4acd)) (set! q4adb@make-implementation-restriction-violation (record-constructor q4ad6@q4ace)) (set! q4add@implementation-restriction-violation? (condition-predicate q4ad2@q4acd)) (set! q4adf@&implementation-restriction-rtd q4ad2@q4acd) (set! q4ae1@&implementation-restriction-rcd q4ad6@q4ace) (set! q4ae7@q4ae2 (make-record-type-descriptor '&lexical q4a5d@q4a58 'q4ae5 '#f '#f '#())) (set! q4ae9@q4ae4 '#f) (set! q4aeb@q4ae3 (make-record-constructor-descriptor q4ae7@q4ae2 q4a61@q4a59 q4ae9@q4ae4)) (set! q4aee@p? (record-predicate q4ae7@q4ae2)) (set! q4af0@make-lexical-violation (record-constructor q4aeb@q4ae3)) (set! q4af2@lexical-violation? (condition-predicate q4ae7@q4ae2)) (set! q4af4@&lexical-rtd q4ae7@q4ae2) (set! q4af6@&lexical-rcd q4aeb@q4ae3) (set! q4b00@q4afb (make-record-type-descriptor '&syntax q4a5d@q4a58 'q4afe '#f '#f '#((immutable form) (immutable subform)))) (set! q4b02@q4afd '#f) (set! q4b04@q4afc (make-record-constructor-descriptor q4b00@q4afb q4a61@q4a59 q4b02@q4afd)) (set! q4b07@p? (record-predicate q4b00@q4afb)) (set! q4b09@make-syntax-violation (record-constructor q4b04@q4afc)) (set! q4b0b@q4af8 (record-accessor q4b00@q4afb '0)) (set! q4b0d@q4afa (record-accessor q4b00@q4afb '1)) (set! q4b0f@syntax-violation? (condition-predicate q4b00@q4afb)) (set! q4b11@syntax-violation-form (condition-accessor q4b00@q4afb q4b0b@q4af8)) (set! q4b13@syntax-violation-subform (condition-accessor q4b00@q4afb q4b0d@q4afa)) (set! q4b15@&syntax-rtd q4b00@q4afb) (set! q4b17@&syntax-rcd q4b04@q4afc) (set! q4b1d@q4b18 (make-record-type-descriptor '&undefined q4a5d@q4a58 'q4b1b '#f '#f '#())) (set! q4b1f@q4b1a '#f) (set! q4b21@q4b19 (make-record-constructor-descriptor q4b1d@q4b18 q4a61@q4a59 q4b1f@q4b1a)) (set! q4b24@p? (record-predicate q4b1d@q4b18)) (set! q4b26@make-undefined-violation (record-constructor q4b21@q4b19)) (set! q4b28@undefined-violation? (condition-predicate q4b1d@q4b18)) (set! q4b2a@&undefined-rtd q4b1d@q4b18) (set! q4b2c@&undefined-rcd q4b21@q4b19) (set! q4b32@q4b2d (make-record-type-descriptor '&i/o q4a48@q4a43 'q4b30 '#f '#f '#())) (set! q4b34@q4b2f '#f) (set! q4b36@q4b2e (make-record-constructor-descriptor q4b32@q4b2d q4a4c@q4a44 q4b34@q4b2f)) (set! q4b39@p? (record-predicate q4b32@q4b2d)) (set! q4b3b@make-i/o-error (record-constructor q4b36@q4b2e)) (set! q4b3d@i/o-error? (condition-predicate q4b32@q4b2d)) (set! q4b3f@&i/o-rtd q4b32@q4b2d) (set! q4b41@&i/o-rcd q4b36@q4b2e) (set! q4b47@q4b42 (make-record-type-descriptor '&i/o-read q4b32@q4b2d 'q4b45 '#f '#f '#())) (set! q4b49@q4b44 '#f) (set! q4b4b@q4b43 (make-record-constructor-descriptor q4b47@q4b42 q4b36@q4b2e q4b49@q4b44)) (set! q4b4e@p? (record-predicate q4b47@q4b42)) (set! q4b50@make-i/o-read-error (record-constructor q4b4b@q4b43)) (set! q4b52@i/o-read-error? (condition-predicate q4b47@q4b42)) (set! q4b54@&i/o-read-rtd q4b47@q4b42) (set! q4b56@&i/o-read-rcd q4b4b@q4b43) (set! q4b5c@q4b57 (make-record-type-descriptor '&i/o-write q4b32@q4b2d 'q4b5a '#f '#f '#())) (set! q4b5e@q4b59 '#f) (set! q4b60@q4b58 (make-record-constructor-descriptor q4b5c@q4b57 q4b36@q4b2e q4b5e@q4b59)) (set! q4b63@p? (record-predicate q4b5c@q4b57)) (set! q4b65@make-i/o-write-error (record-constructor q4b60@q4b58)) (set! q4b67@i/o-write-error? (condition-predicate q4b5c@q4b57)) (set! q4b69@&i/o-write-rtd q4b5c@q4b57) (set! q4b6b@&i/o-write-rcd q4b60@q4b58) (set! q4b73@q4b6e (make-record-type-descriptor '&i/o-invalid-position q4b32@q4b2d 'q4b71 '#f '#f '#((immutable position)))) (set! q4b75@q4b70 '#f) (set! q4b77@q4b6f (make-record-constructor-descriptor q4b73@q4b6e q4b36@q4b2e q4b75@q4b70)) (set! q4b7a@p? (record-predicate q4b73@q4b6e)) (set! q4b7c@make-i/o-invalid-position-error (record-constructor q4b77@q4b6f)) (set! q4b7e@q4b6d (record-accessor q4b73@q4b6e '0)) (set! q4b80@i/o-invalid-position-error? (condition-predicate q4b73@q4b6e)) (set! q4b82@i/o-error-position (condition-accessor q4b73@q4b6e q4b7e@q4b6d)) (set! q4b84@&i/o-invalid-position-rtd q4b73@q4b6e) (set! q4b86@&i/o-invalid-position-rcd q4b77@q4b6f) (set! q4b8e@q4b89 (make-record-type-descriptor '&i/o-filename q4b32@q4b2d 'q4b8c '#f '#f '#((immutable filename)))) (set! q4b90@q4b8b '#f) (set! q4b92@q4b8a (make-record-constructor-descriptor q4b8e@q4b89 q4b36@q4b2e q4b90@q4b8b)) (set! q4b95@p? (record-predicate q4b8e@q4b89)) (set! q4b97@make-i/o-filename-error (record-constructor q4b92@q4b8a)) (set! q4b99@q4b88 (record-accessor q4b8e@q4b89 '0)) (set! q4b9b@i/o-filename-error? (condition-predicate q4b8e@q4b89)) (set! q4b9d@i/o-error-filename (condition-accessor q4b8e@q4b89 q4b99@q4b88)) (set! q4b9f@&i/o-filename-rtd q4b8e@q4b89) (set! q4ba1@&i/o-filename-rcd q4b92@q4b8a) (set! q4ba7@q4ba2 (make-record-type-descriptor '&i/o-file-protection q4b8e@q4b89 'q4ba5 '#f '#f '#())) (set! q4ba9@q4ba4 '#f) (set! q4bab@q4ba3 (make-record-constructor-descriptor q4ba7@q4ba2 q4b92@q4b8a q4ba9@q4ba4)) (set! q4bae@p? (record-predicate q4ba7@q4ba2)) (set! q4bb0@make-i/o-file-protection-error (record-constructor q4bab@q4ba3)) (set! q4bb2@i/o-file-protection-error? (condition-predicate q4ba7@q4ba2)) (set! q4bb4@&i/o-file-protection-rtd q4ba7@q4ba2) (set! q4bb6@&i/o-file-protection-rcd q4bab@q4ba3) (set! q4bbc@q4bb7 (make-record-type-descriptor '&i/o-file-is-read-only q4ba7@q4ba2 'q4bba '#f '#f '#())) (set! q4bbe@q4bb9 '#f) (set! q4bc0@q4bb8 (make-record-constructor-descriptor q4bbc@q4bb7 q4bab@q4ba3 q4bbe@q4bb9)) (set! q4bc3@p? (record-predicate q4bbc@q4bb7)) (set! q4bc5@make-i/o-file-is-read-only-error (record-constructor q4bc0@q4bb8)) (set! q4bc7@i/o-file-is-read-only-error? (condition-predicate q4bbc@q4bb7)) (set! q4bc9@&i/o-file-is-read-only-rtd q4bbc@q4bb7) (set! q4bcb@&i/o-file-is-read-only-rcd q4bc0@q4bb8) (set! q4bd1@q4bcc (make-record-type-descriptor '&i/o-file-already-exists q4b8e@q4b89 'q4bcf '#f '#f '#())) (set! q4bd3@q4bce '#f) (set! q4bd5@q4bcd (make-record-constructor-descriptor q4bd1@q4bcc q4b92@q4b8a q4bd3@q4bce)) (set! q4bd8@p? (record-predicate q4bd1@q4bcc)) (set! q4bda@make-i/o-file-already-exists-error (record-constructor q4bd5@q4bcd)) (set! q4bdc@i/o-file-already-exists-error? (condition-predicate q4bd1@q4bcc)) (set! q4bde@&i/o-file-already-exists-rtd q4bd1@q4bcc) (set! q4be0@&i/o-file-already-exists-rcd q4bd5@q4bcd) (set! q4be6@q4be1 (make-record-type-descriptor '&i/o-file-does-not-exist q4b8e@q4b89 'q4be4 '#f '#f '#())) (set! q4be8@q4be3 '#f) (set! q4bea@q4be2 (make-record-constructor-descriptor q4be6@q4be1 q4b92@q4b8a q4be8@q4be3)) (set! q4bed@p? (record-predicate q4be6@q4be1)) (set! q4bef@make-i/o-file-does-not-exist-error (record-constructor q4bea@q4be2)) (set! q4bf1@i/o-file-does-not-exist-error? (condition-predicate q4be6@q4be1)) (set! q4bf3@&i/o-file-does-not-exist-rtd q4be6@q4be1) (set! q4bf5@&i/o-file-does-not-exist-rcd q4bea@q4be2) (set! q4bfd@q4bf8 (make-record-type-descriptor '&i/o-port q4b32@q4b2d 'q4bfb '#f '#f '#((immutable port)))) (set! q4bff@q4bfa '#f) (set! q4c01@q4bf9 (make-record-constructor-descriptor q4bfd@q4bf8 q4b36@q4b2e q4bff@q4bfa)) (set! q4c04@p? (record-predicate q4bfd@q4bf8)) (set! q4c06@make-i/o-port-error (record-constructor q4c01@q4bf9)) (set! q4c08@q4bf7 (record-accessor q4bfd@q4bf8 '0)) (set! q4c0a@i/o-port-error? (condition-predicate q4bfd@q4bf8)) (set! q4c0c@i/o-error-port (condition-accessor q4bfd@q4bf8 q4c08@q4bf7)) (set! q4c0e@&i/o-port-rtd q4bfd@q4bf8) (set! q4c10@&i/o-port-rcd q4c01@q4bf9) (set! q4c16@q4c11 (make-record-type-descriptor '&i/o-decoding q4bfd@q4bf8 'q4c14 '#f '#f '#())) (set! q4c18@q4c13 '#f) (set! q4c1a@q4c12 (make-record-constructor-descriptor q4c16@q4c11 q4c01@q4bf9 q4c18@q4c13)) (set! q4c1d@p? (record-predicate q4c16@q4c11)) (set! q4c1f@make-i/o-decoding-error (record-constructor q4c1a@q4c12)) (set! q4c21@i/o-decoding-error? (condition-predicate q4c16@q4c11)) (set! q4c23@&i/o-decoding-rtd q4c16@q4c11) (set! q4c25@&i/o-decoding-rcd q4c1a@q4c12) (set! q4c2d@q4c28 (make-record-type-descriptor '&i/o-encoding q4bfd@q4bf8 'q4c2b '#f '#f '#((immutable char)))) (set! q4c2f@q4c2a '#f) (set! q4c31@q4c29 (make-record-constructor-descriptor q4c2d@q4c28 q4c01@q4bf9 q4c2f@q4c2a)) (set! q4c34@p? (record-predicate q4c2d@q4c28)) (set! q4c36@make-i/o-encoding-error (record-constructor q4c31@q4c29)) (set! q4c38@q4c27 (record-accessor q4c2d@q4c28 '0)) (set! q4c3a@i/o-encoding-error? (condition-predicate q4c2d@q4c28)) (set! q4c3c@i/o-encoding-error-char (condition-accessor q4c2d@q4c28 q4c38@q4c27)) (set! q4c3e@&i/o-encoding-rtd q4c2d@q4c28) (set! q4c40@&i/o-encoding-rcd q4c31@q4c29) (set! q4c46@q4c41 (make-record-type-descriptor '&no-infinities q4ad2@q4acd 'q4c44 '#f '#f '#())) (set! q4c48@q4c43 '#f) (set! q4c4a@q4c42 (make-record-constructor-descriptor q4c46@q4c41 q4ad6@q4ace q4c48@q4c43)) (set! q4c4d@p? (record-predicate q4c46@q4c41)) (set! q4c4f@make-no-infinities-violation (record-constructor q4c4a@q4c42)) (set! q4c51@no-infinities-violation? (condition-predicate q4c46@q4c41)) (set! q4c53@&no-infinities-rtd q4c46@q4c41) (set! q4c55@&no-infinities-rcd q4c4a@q4c42) (set! q4c5b@q4c56 (make-record-type-descriptor '&no-nans q4ad2@q4acd 'q4c59 '#f '#f '#())) (set! q4c5d@q4c58 '#f) (set! q4c5f@q4c57 (make-record-constructor-descriptor q4c5b@q4c56 q4ad6@q4ace q4c5d@q4c58)) (set! q4c62@p? (record-predicate q4c5b@q4c56)) (set! q4c64@make-no-nans-violation (record-constructor q4c5f@q4c57)) (set! q4c66@no-nans-violation? (condition-predicate q4c5b@q4c56)) (set! q4c68@&no-nans-rtd q4c5b@q4c56) (set! q4c6a@&no-nans-rcd q4c5f@q4c57) (begin (set! q4d5b@q4c6a@&no-nans-rcd q4c6a@&no-nans-rcd) (set! q4d5a@q4c68@&no-nans-rtd q4c68@&no-nans-rtd) (set! q4d59@q4c66@no-nans-violation? q4c66@no-nans-violation?) (set! q4d58@q4c64@make-no-nans-violation q4c64@make-no-nans-violation) (set! q4d57@q4c62@p? q4c62@p?) (set! q4d56@q4c5f@q4c57 q4c5f@q4c57) (set! q4d55@q4c5d@q4c58 q4c5d@q4c58) (set! q4d54@q4c5b@q4c56 q4c5b@q4c56) (set! q4d53@q4c55@&no-infinities-rcd q4c55@&no-infinities-rcd) (set! q4d52@q4c53@&no-infinities-rtd q4c53@&no-infinities-rtd) (set! q4d51@q4c51@no-infinities-violation? q4c51@no-infinities-violation?) (set! q4d50@q4c4f@make-no-infinities-violation q4c4f@make-no-infinities-violation) (set! q4d4f@q4c4d@p? q4c4d@p?) (set! q4d4e@q4c4a@q4c42 q4c4a@q4c42) (set! q4d4d@q4c48@q4c43 q4c48@q4c43) (set! q4d4c@q4c46@q4c41 q4c46@q4c41) (set! q4d4b@q4c40@&i/o-encoding-rcd q4c40@&i/o-encoding-rcd) (set! q4d4a@q4c3e@&i/o-encoding-rtd q4c3e@&i/o-encoding-rtd) (set! q4d49@q4c3c@i/o-encoding-error-char q4c3c@i/o-encoding-error-char) (set! q4d48@q4c3a@i/o-encoding-error? q4c3a@i/o-encoding-error?) (set! q4d47@q4c38@q4c27 q4c38@q4c27) (set! q4d46@q4c36@make-i/o-encoding-error q4c36@make-i/o-encoding-error) (set! q4d45@q4c34@p? q4c34@p?) (set! q4d44@q4c31@q4c29 q4c31@q4c29) (set! q4d43@q4c2f@q4c2a q4c2f@q4c2a) (set! q4d42@q4c2d@q4c28 q4c2d@q4c28) (set! q4d41@q4c25@&i/o-decoding-rcd q4c25@&i/o-decoding-rcd) (set! q4d40@q4c23@&i/o-decoding-rtd q4c23@&i/o-decoding-rtd) (set! q4d3f@q4c21@i/o-decoding-error? q4c21@i/o-decoding-error?) (set! q4d3e@q4c1f@make-i/o-decoding-error q4c1f@make-i/o-decoding-error) (set! q4d3d@q4c1d@p? q4c1d@p?) (set! q4d3c@q4c1a@q4c12 q4c1a@q4c12) (set! q4d3b@q4c18@q4c13 q4c18@q4c13) (set! q4d3a@q4c16@q4c11 q4c16@q4c11) (set! q4d39@q4c10@&i/o-port-rcd q4c10@&i/o-port-rcd) (set! q4d38@q4c0e@&i/o-port-rtd q4c0e@&i/o-port-rtd) (set! q4d37@q4c0c@i/o-error-port q4c0c@i/o-error-port) (set! q4d36@q4c0a@i/o-port-error? q4c0a@i/o-port-error?) (set! q4d35@q4c08@q4bf7 q4c08@q4bf7) (set! q4d34@q4c06@make-i/o-port-error q4c06@make-i/o-port-error) (set! q4d33@q4c04@p? q4c04@p?) (set! q4d32@q4c01@q4bf9 q4c01@q4bf9) (set! q4d31@q4bff@q4bfa q4bff@q4bfa) (set! q4d30@q4bfd@q4bf8 q4bfd@q4bf8) (set! q4d2f@q4bf5@&i/o-file-does-not-exist-rcd q4bf5@&i/o-file-does-not-exist-rcd) (set! q4d2e@q4bf3@&i/o-file-does-not-exist-rtd q4bf3@&i/o-file-does-not-exist-rtd) (set! q4d2d@q4bf1@i/o-file-does-not-exist-error? q4bf1@i/o-file-does-not-exist-error?) (set! q4d2c@q4bef@make-i/o-file-does-not-exist-error q4bef@make-i/o-file-does-not-exist-error) (set! q4d2b@q4bed@p? q4bed@p?) (set! q4d2a@q4bea@q4be2 q4bea@q4be2) (set! q4d29@q4be8@q4be3 q4be8@q4be3) (set! q4d28@q4be6@q4be1 q4be6@q4be1) (set! q4d27@q4be0@&i/o-file-already-exists-rcd q4be0@&i/o-file-already-exists-rcd) (set! q4d26@q4bde@&i/o-file-already-exists-rtd q4bde@&i/o-file-already-exists-rtd) (set! q4d25@q4bdc@i/o-file-already-exists-error? q4bdc@i/o-file-already-exists-error?) (set! q4d24@q4bda@make-i/o-file-already-exists-error q4bda@make-i/o-file-already-exists-error) (set! q4d23@q4bd8@p? q4bd8@p?) (set! q4d22@q4bd5@q4bcd q4bd5@q4bcd) (set! q4d21@q4bd3@q4bce q4bd3@q4bce) (set! q4d20@q4bd1@q4bcc q4bd1@q4bcc) (set! q4d1f@q4bcb@&i/o-file-is-read-only-rcd q4bcb@&i/o-file-is-read-only-rcd) (set! q4d1e@q4bc9@&i/o-file-is-read-only-rtd q4bc9@&i/o-file-is-read-only-rtd) (set! q4d1d@q4bc7@i/o-file-is-read-only-error? q4bc7@i/o-file-is-read-only-error?) (set! q4d1c@q4bc5@make-i/o-file-is-read-only-error q4bc5@make-i/o-file-is-read-only-error) (set! q4d1b@q4bc3@p? q4bc3@p?) (set! q4d1a@q4bc0@q4bb8 q4bc0@q4bb8) (set! q4d19@q4bbe@q4bb9 q4bbe@q4bb9) (set! q4d18@q4bbc@q4bb7 q4bbc@q4bb7) (set! q4d17@q4bb6@&i/o-file-protection-rcd q4bb6@&i/o-file-protection-rcd) (set! q4d16@q4bb4@&i/o-file-protection-rtd q4bb4@&i/o-file-protection-rtd) (set! q4d15@q4bb2@i/o-file-protection-error? q4bb2@i/o-file-protection-error?) (set! q4d14@q4bb0@make-i/o-file-protection-error q4bb0@make-i/o-file-protection-error) (set! q4d13@q4bae@p? q4bae@p?) (set! q4d12@q4bab@q4ba3 q4bab@q4ba3) (set! q4d11@q4ba9@q4ba4 q4ba9@q4ba4) (set! q4d10@q4ba7@q4ba2 q4ba7@q4ba2) (set! q4d0f@q4ba1@&i/o-filename-rcd q4ba1@&i/o-filename-rcd) (set! q4d0e@q4b9f@&i/o-filename-rtd q4b9f@&i/o-filename-rtd) (set! q4d0d@q4b9d@i/o-error-filename q4b9d@i/o-error-filename) (set! q4d0c@q4b9b@i/o-filename-error? q4b9b@i/o-filename-error?) (set! q4d0b@q4b99@q4b88 q4b99@q4b88) (set! q4d0a@q4b97@make-i/o-filename-error q4b97@make-i/o-filename-error) (set! q4d09@q4b95@p? q4b95@p?) (set! q4d08@q4b92@q4b8a q4b92@q4b8a) (set! q4d07@q4b90@q4b8b q4b90@q4b8b) (set! q4d06@q4b8e@q4b89 q4b8e@q4b89) (set! q4d05@q4b86@&i/o-invalid-position-rcd q4b86@&i/o-invalid-position-rcd) (set! q4d04@q4b84@&i/o-invalid-position-rtd q4b84@&i/o-invalid-position-rtd) (set! q4d03@q4b82@i/o-error-position q4b82@i/o-error-position) (set! q4d02@q4b80@i/o-invalid-position-error? q4b80@i/o-invalid-position-error?) (set! q4d01@q4b7e@q4b6d q4b7e@q4b6d) (set! q4d00@q4b7c@make-i/o-invalid-position-error q4b7c@make-i/o-invalid-position-error) (set! q4cff@q4b7a@p? q4b7a@p?) (set! q4cfe@q4b77@q4b6f q4b77@q4b6f) (set! q4cfd@q4b75@q4b70 q4b75@q4b70) (set! q4cfc@q4b73@q4b6e q4b73@q4b6e) (set! q4cfb@q4b6b@&i/o-write-rcd q4b6b@&i/o-write-rcd) (set! q4cfa@q4b69@&i/o-write-rtd q4b69@&i/o-write-rtd) (set! q4cf9@q4b67@i/o-write-error? q4b67@i/o-write-error?) (set! q4cf8@q4b65@make-i/o-write-error q4b65@make-i/o-write-error) (set! q4cf7@q4b63@p? q4b63@p?) (set! q4cf6@q4b60@q4b58 q4b60@q4b58) (set! q4cf5@q4b5e@q4b59 q4b5e@q4b59) (set! q4cf4@q4b5c@q4b57 q4b5c@q4b57) (set! q4cf3@q4b56@&i/o-read-rcd q4b56@&i/o-read-rcd) (set! q4cf2@q4b54@&i/o-read-rtd q4b54@&i/o-read-rtd) (set! q4cf1@q4b52@i/o-read-error? q4b52@i/o-read-error?) (set! q4cf0@q4b50@make-i/o-read-error q4b50@make-i/o-read-error) (set! q4cef@q4b4e@p? q4b4e@p?) (set! q4cee@q4b4b@q4b43 q4b4b@q4b43) (set! q4ced@q4b49@q4b44 q4b49@q4b44) (set! q4cec@q4b47@q4b42 q4b47@q4b42) (set! q4ceb@q4b41@&i/o-rcd q4b41@&i/o-rcd) (set! q4cea@q4b3f@&i/o-rtd q4b3f@&i/o-rtd) (set! q4ce9@q4b3d@i/o-error? q4b3d@i/o-error?) (set! q4ce8@q4b3b@make-i/o-error q4b3b@make-i/o-error) (set! q4ce7@q4b39@p? q4b39@p?) (set! q4ce6@q4b36@q4b2e q4b36@q4b2e) (set! q4ce5@q4b34@q4b2f q4b34@q4b2f) (set! q4ce4@q4b32@q4b2d q4b32@q4b2d) (set! q4ce3@q4b2c@&undefined-rcd q4b2c@&undefined-rcd) (set! q4ce2@q4b2a@&undefined-rtd q4b2a@&undefined-rtd) (set! q4ce1@q4b28@undefined-violation? q4b28@undefined-violation?) (set! q4ce0@q4b26@make-undefined-violation q4b26@make-undefined-violation) (set! q4cdf@q4b24@p? q4b24@p?) (set! q4cde@q4b21@q4b19 q4b21@q4b19) (set! q4cdd@q4b1f@q4b1a q4b1f@q4b1a) (set! q4cdc@q4b1d@q4b18 q4b1d@q4b18) (set! q4cdb@q4b17@&syntax-rcd q4b17@&syntax-rcd) (set! q4cda@q4b15@&syntax-rtd q4b15@&syntax-rtd) (set! q4cd9@q4b13@syntax-violation-subform q4b13@syntax-violation-subform) (set! q4cd8@q4b11@syntax-violation-form q4b11@syntax-violation-form) (set! q4cd7@q4b0f@syntax-violation? q4b0f@syntax-violation?) (set! q4cd6@q4b0d@q4afa q4b0d@q4afa) (set! q4cd5@q4b0b@q4af8 q4b0b@q4af8) (set! q4cd4@q4b09@make-syntax-violation q4b09@make-syntax-violation) (set! q4cd3@q4b07@p? q4b07@p?) (set! q4cd2@q4b04@q4afc q4b04@q4afc) (set! q4cd1@q4b02@q4afd q4b02@q4afd) (set! q4cd0@q4b00@q4afb q4b00@q4afb) (set! q4ccf@q4af6@&lexical-rcd q4af6@&lexical-rcd) (set! q4cce@q4af4@&lexical-rtd q4af4@&lexical-rtd) (set! q4ccd@q4af2@lexical-violation? q4af2@lexical-violation?) (set! q4ccc@q4af0@make-lexical-violation q4af0@make-lexical-violation) (set! q4ccb@q4aee@p? q4aee@p?) (set! q4cca@q4aeb@q4ae3 q4aeb@q4ae3) (set! q4cc9@q4ae9@q4ae4 q4ae9@q4ae4) (set! q4cc8@q4ae7@q4ae2 q4ae7@q4ae2) (set! q4cc7@q4ae1@&implementation-restriction-rcd q4ae1@&implementation-restriction-rcd) (set! q4cc6@q4adf@&implementation-restriction-rtd q4adf@&implementation-restriction-rtd) (set! q4cc5@q4add@implementation-restriction-violation? q4add@implementation-restriction-violation?) (set! q4cc4@q4adb@make-implementation-restriction-violation q4adb@make-implementation-restriction-violation) (set! q4cc3@q4ad9@p? q4ad9@p?) (set! q4cc2@q4ad6@q4ace q4ad6@q4ace) (set! q4cc1@q4ad4@q4acf q4ad4@q4acf) (set! q4cc0@q4ad2@q4acd q4ad2@q4acd) (set! q4cbf@q4acc@&non-continuable-rcd q4acc@&non-continuable-rcd) (set! q4cbe@q4aca@&non-continuable-rtd q4aca@&non-continuable-rtd) (set! q4cbd@q4ac8@non-continuable-violation? q4ac8@non-continuable-violation?) (set! q4cbc@q4ac6@make-non-continuable-violation q4ac6@make-non-continuable-violation) (set! q4cbb@q4ac4@p? q4ac4@p?) (set! q4cba@q4ac1@q4ab9 q4ac1@q4ab9) (set! q4cb9@q4abf@q4aba q4abf@q4aba) (set! q4cb8@q4abd@q4ab8 q4abd@q4ab8) (set! q4cb7@q4ab7@&who-rcd q4ab7@&who-rcd) (set! q4cb6@q4ab5@&who-rtd q4ab5@&who-rtd) (set! q4cb5@q4ab3@condition-who q4ab3@condition-who) (set! q4cb4@q4ab1@who-condition? q4ab1@who-condition?) (set! q4cb3@q4aaf@q4a9e q4aaf@q4a9e) (set! q4cb2@q4aad@make-who-condition q4aad@make-who-condition) (set! q4cb1@q4aab@p? q4aab@p?) (set! q4cb0@q4aa8@q4aa0 q4aa8@q4aa0) (set! q4caf@q4aa6@q4aa1 q4aa6@q4aa1) (set! q4cae@q4aa4@q4a9f q4aa4@q4a9f) (set! q4cad@q4a9c@&irritants-rcd q4a9c@&irritants-rcd) (set! q4cac@q4a9a@&irritants-rtd q4a9a@&irritants-rtd) (set! q4cab@q4a98@condition-irritants q4a98@condition-irritants) (set! q4caa@q4a96@irritants-condition? q4a96@irritants-condition?) (set! q4ca9@q4a94@q4a83 q4a94@q4a83) (set! q4ca8@q4a92@make-irritants-condition q4a92@make-irritants-condition) (set! q4ca7@q4a90@p? q4a90@p?) (set! q4ca6@q4a8d@q4a85 q4a8d@q4a85) (set! q4ca5@q4a8b@q4a86 q4a8b@q4a86) (set! q4ca4@q4a89@q4a84 q4a89@q4a84) (set! q4ca3@q4a81@&assertion-rcd q4a81@&assertion-rcd) (set! q4ca2@q4a7f@&assertion-rtd q4a7f@&assertion-rtd) (set! q4ca1@q4a7d@assertion-violation? q4a7d@assertion-violation?) (set! q4ca0@q4a7b@make-assertion-violation q4a7b@make-assertion-violation) (set! q4c9f@q4a79@p? q4a79@p?) (set! q4c9e@q4a76@q4a6e q4a76@q4a6e) (set! q4c9d@q4a74@q4a6f q4a74@q4a6f) (set! q4c9c@q4a72@q4a6d q4a72@q4a6d) (set! q4c9b@q4a6c@&violation-rcd q4a6c@&violation-rcd) (set! q4c9a@q4a6a@&violation-rtd q4a6a@&violation-rtd) (set! q4c99@q4a68@violation? q4a68@violation?) (set! q4c98@q4a66@make-violation q4a66@make-violation) (set! q4c97@q4a64@p? q4a64@p?) (set! q4c96@q4a61@q4a59 q4a61@q4a59) (set! q4c95@q4a5f@q4a5a q4a5f@q4a5a) (set! q4c94@q4a5d@q4a58 q4a5d@q4a58) (set! q4c93@q4a57@&error-rcd q4a57@&error-rcd) (set! q4c92@q4a55@&error-rtd q4a55@&error-rtd) (set! q4c91@q4a53@error? q4a53@error?) (set! q4c90@q4a51@make-error q4a51@make-error) (set! q4c8f@q4a4f@p? q4a4f@p?) (set! q4c8e@q4a4c@q4a44 q4a4c@q4a44) (set! q4c8d@q4a4a@q4a45 q4a4a@q4a45) (set! q4c8c@q4a48@q4a43 q4a48@q4a43) (set! q4c8b@q4a42@&serious-rcd q4a42@&serious-rcd) (set! q4c8a@q4a40@&serious-rtd q4a40@&serious-rtd) (set! q4c89@q4a3e@serious-condition? q4a3e@serious-condition?) (set! q4c88@q4a3c@make-serious-condition q4a3c@make-serious-condition) (set! q4c87@q4a3a@p? q4a3a@p?) (set! q4c86@q4a37@q4a2f q4a37@q4a2f) (set! q4c85@q4a35@q4a30 q4a35@q4a30) (set! q4c84@q4a33@q4a2e q4a33@q4a2e) (set! q4c83@q4a2d@&warning-rcd q4a2d@&warning-rcd) (set! q4c82@q4a2b@&warning-rtd q4a2b@&warning-rtd) (set! q4c81@q4a29@warning? q4a29@warning?) (set! q4c80@q4a27@make-warning q4a27@make-warning) (set! q4c7f@q4a25@p? q4a25@p?) (set! q4c7e@q4a22@q4a1a q4a22@q4a1a) (set! q4c7d@q4a20@q4a1b q4a20@q4a1b) (set! q4c7c@q4a1e@q4a19 q4a1e@q4a19) (set! q4c7b@q4a18@&message-rcd q4a18@&message-rcd) (set! q4c7a@q4a16@&message-rtd q4a16@&message-rtd) (set! q4c79@q4a14@condition-message q4a14@condition-message) (set! q4c78@q4a12@message-condition? q4a12@message-condition?) (set! q4c77@q4a10@q49ff q4a10@q49ff) (set! q4c76@q4a0e@make-message-condition q4a0e@make-message-condition) (set! q4c75@q4a0c@p? q4a0c@p?) (set! q4c74@q4a09@q4a01 q4a09@q4a01) (set! q4c73@q4a07@q4a02 q4a07@q4a02) (set! q4c72@q4a05@q4a00 q4a05@q4a00) (set! q4c71@q49b9@&condition-rcd q49b9@&condition-rcd) (set! q4c70@q49b7@&condition-rtd q49b7@&condition-rtd) (set! q4c6f@q49b5@make-&condition q49b5@make-&condition) (set! q4c6e@q49b3@&condition? q49b3@&condition?) (set! q4c6d@q49b0@q49a8 q49b0@q49a8) (set! q4c6c@q49ae@q49a9 q49ae@q49a9) (set! q4c6b@q49ac@q49a7 q49ac@q49a7)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (q28aa@q285f@current-primitive-locations (lambda (q518c@x) ((lambda (q518e@t) (if q518e@t (cdr q518e@t) '#f)) (assq q518c@x '((&no-nans-rcd . q4d5b@q4c6a@&no-nans-rcd) (&no-nans-rtd . q4d5a@q4c68@&no-nans-rtd) (&no-infinities-rcd . q4d53@q4c55@&no-infinities-rcd) (&no-infinities-rtd . q4d52@q4c53@&no-infinities-rtd) (&i/o-encoding-rcd . q4d4b@q4c40@&i/o-encoding-rcd) (&i/o-encoding-rtd . q4d4a@q4c3e@&i/o-encoding-rtd) (&i/o-decoding-rcd . q4d41@q4c25@&i/o-decoding-rcd) (&i/o-decoding-rtd . q4d40@q4c23@&i/o-decoding-rtd) (&i/o-port-rcd . q4d39@q4c10@&i/o-port-rcd) (&i/o-port-rtd . q4d38@q4c0e@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . q4d2f@q4bf5@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . q4d2e@q4bf3@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . q4d27@q4be0@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . q4d26@q4bde@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . q4d1f@q4bcb@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . q4d1e@q4bc9@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . q4d17@q4bb6@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . q4d16@q4bb4@&i/o-file-protection-rtd) (&i/o-filename-rcd . q4d0f@q4ba1@&i/o-filename-rcd) (&i/o-filename-rtd . q4d0e@q4b9f@&i/o-filename-rtd) (&i/o-invalid-position-rcd . q4d05@q4b86@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . q4d04@q4b84@&i/o-invalid-position-rtd) (&i/o-write-rcd . q4cfb@q4b6b@&i/o-write-rcd) (&i/o-write-rtd . q4cfa@q4b69@&i/o-write-rtd) (&i/o-read-rcd . q4cf3@q4b56@&i/o-read-rcd) (&i/o-read-rtd . q4cf2@q4b54@&i/o-read-rtd) (&i/o-rcd . q4ceb@q4b41@&i/o-rcd) (&i/o-rtd . q4cea@q4b3f@&i/o-rtd) (&undefined-rcd . q4ce3@q4b2c@&undefined-rcd) (&undefined-rtd . q4ce2@q4b2a@&undefined-rtd) (&syntax-rcd . q4cdb@q4b17@&syntax-rcd) (&syntax-rtd . q4cda@q4b15@&syntax-rtd) (&lexical-rcd . q4ccf@q4af6@&lexical-rcd) (&lexical-rtd . q4cce@q4af4@&lexical-rtd) (&implementation-restriction-rcd . q4cc7@q4ae1@&implementation-restriction-rcd) (&implementation-restriction-rtd . q4cc6@q4adf@&implementation-restriction-rtd) (&non-continuable-rcd . q4cbf@q4acc@&non-continuable-rcd) (&non-continuable-rtd . q4cbe@q4aca@&non-continuable-rtd) (&who-rcd . q4cb7@q4ab7@&who-rcd) (&who-rtd . q4cb6@q4ab5@&who-rtd) (&irritants-rcd . q4cad@q4a9c@&irritants-rcd) (&irritants-rtd . q4cac@q4a9a@&irritants-rtd) (&assertion-rcd . q4ca3@q4a81@&assertion-rcd) (&assertion-rtd . q4ca2@q4a7f@&assertion-rtd) (&violation-rcd . q4c9b@q4a6c@&violation-rcd) (&violation-rtd . q4c9a@q4a6a@&violation-rtd) (&error-rcd . q4c93@q4a57@&error-rcd) (&error-rtd . q4c92@q4a55@&error-rtd) (&serious-rcd . q4c8b@q4a42@&serious-rcd) (&serious-rtd . q4c8a@q4a40@&serious-rtd) (&warning-rcd . q4c83@q4a2d@&warning-rcd) (&warning-rtd . q4c82@q4a2b@&warning-rtd) (&message-rcd . q4c7b@q4a18@&message-rcd) (&message-rtd . q4c7a@q4a16@&message-rtd) (&condition-rcd . q4c71@q49b9@&condition-rcd) (&condition-rtd . q4c70@q49b7@&condition-rtd) (syntax-error . q4999@q2f9f@syntax-error) (syntax-dispatch . q492e@q2eba@syntax-dispatch) (load . q4e8c@q4d77@load) (interaction-environment . q49a1@q2faf@interaction-environment) (library-path . q2ac1@q2950@library-path) (make-parameter . q2859@q2783@make-parameter) (make-variable-transformer . q48ec@q2ce7@make-variable-transformer) (identifier? . q499c@q2fa5@identifier?) (generate-temporaries . q4992@q2f91@generate-temporaries) (free-identifier=? . q4993@q2f93@free-identifier=?) (syntax->datum . q499e@q2fa9@syntax->datum) (datum->syntax . q499d@q2fa7@datum->syntax) (bound-identifier=? . q4994@q2f95@bound-identifier=?) (make-i/o-write-error . q4cf8@q4b65@make-i/o-write-error) (make-i/o-read-error . q4cf0@q4b50@make-i/o-read-error) (make-i/o-port-error . q4d34@q4c06@make-i/o-port-error) (make-i/o-invalid-position-error . q4d00@q4b7c@make-i/o-invalid-position-error) (make-i/o-filename-error . q4d0a@q4b97@make-i/o-filename-error) (make-i/o-file-protection-error . q4d14@q4bb0@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . q4d1c@q4bc5@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . q4d2c@q4bef@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . q4d24@q4bda@make-i/o-file-already-exists-error) (make-i/o-error . q4ce8@q4b3b@make-i/o-error) (make-i/o-encoding-error . q4d46@q4c36@make-i/o-encoding-error) (make-i/o-decoding-error . q4d3e@q4c1f@make-i/o-decoding-error) (i/o-write-error? . q4cf9@q4b67@i/o-write-error?) (i/o-read-error? . q4cf1@q4b52@i/o-read-error?) (i/o-port-error? . q4d36@q4c0a@i/o-port-error?) (i/o-invalid-position-error? . q4d02@q4b80@i/o-invalid-position-error?) (i/o-filename-error? . q4d0c@q4b9b@i/o-filename-error?) (i/o-file-protection-error? . q4d15@q4bb2@i/o-file-protection-error?) (i/o-file-is-read-only-error? . q4d1d@q4bc7@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . q4d2d@q4bf1@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . q4d25@q4bdc@i/o-file-already-exists-error?) (i/o-error? . q4ce9@q4b3d@i/o-error?) (i/o-error-position . q4d03@q4b82@i/o-error-position) (i/o-error-port . q4d37@q4c0c@i/o-error-port) (i/o-error-filename . q4d0d@q4b9d@i/o-error-filename) (i/o-encoding-error? . q4d48@q4c3a@i/o-encoding-error?) (i/o-encoding-error-char . q4d49@q4c3c@i/o-encoding-error-char) (i/o-decoding-error? . q4d3f@q4c21@i/o-decoding-error?) (scheme-report-environment . q4989@q2f7f@scheme-report-environment) (null-environment . q4988@q2f7d@null-environment) (command-line . q4e89@q4d71@command-line) (eval . q498b@q2f83@eval) (environment . q4987@q2f7b@environment) (who-condition? . q4cb4@q4ab1@who-condition?) (warning? . q4c81@q4a29@warning?) (violation? . q4c99@q4a68@violation?) (undefined-violation? . q4ce1@q4b28@undefined-violation?) (syntax-violation? . q4cd7@q4b0f@syntax-violation?) (syntax-violation-subform . q4cd9@q4b13@syntax-violation-subform) (syntax-violation-form . q4cd8@q4b11@syntax-violation-form) (syntax-violation . q499b@q2fa3@syntax-violation) (serious-condition? . q4c89@q4a3e@serious-condition?) (non-continuable-violation? . q4cbd@q4ac8@non-continuable-violation?) (message-condition? . q4c78@q4a12@message-condition?) (make-who-condition . q4cb2@q4aad@make-who-condition) (make-warning . q4c80@q4a27@make-warning) (make-violation . q4c98@q4a66@make-violation) (make-undefined-violation . q4ce0@q4b26@make-undefined-violation) (make-syntax-violation . q4cd4@q4b09@make-syntax-violation) (make-serious-condition . q4c88@q4a3c@make-serious-condition) (make-non-continuable-violation . q4cbc@q4ac6@make-non-continuable-violation) (make-message-condition . q4c76@q4a0e@make-message-condition) (make-lexical-violation . q4ccc@q4af0@make-lexical-violation) (make-irritants-condition . q4ca8@q4a92@make-irritants-condition) (make-implementation-restriction-violation . q4cc4@q4adb@make-implementation-restriction-violation) (make-error . q4c90@q4a51@make-error) (make-assertion-violation . q4ca0@q4a7b@make-assertion-violation) (lexical-violation? . q4ccd@q4af2@lexical-violation?) (irritants-condition? . q4caa@q4a96@irritants-condition?) (implementation-restriction-violation? . q4cc5@q4add@implementation-restriction-violation?) (error? . q4c91@q4a53@error?) (condition-who . q4cb5@q4ab3@condition-who) (condition-message . q4c79@q4a14@condition-message) (condition-irritants . q4cab@q4a98@condition-irritants) (assertion-violation? . q4ca1@q4a7d@assertion-violation?) (no-nans-violation? . q4d59@q4c66@no-nans-violation?) (no-infinities-violation? . q4d51@q4c51@no-infinities-violation?) (make-no-nans-violation . q4d58@q4c64@make-no-nans-violation) (make-no-infinities-violation . q4d50@q4c4f@make-no-infinities-violation) (assertion-error . q4998@q2f9d@assertion-error)))))) (q2ad1@q2970@install-library 'q5169 '(mosh interaction) '() '() '() '() '((regexp? . q5161) (alist->eq-hash-table . q515e) (format . q515b) (string-split . q5150) (call-process . q514a) (set-current-directory! . q5146) (expand-path . q5145) (current-directory . q5144) (%spawn . q5143) (%waitpid . q5142) (%ffi-supported? . q5141) (%ffi-pointer-ref . q5140) (%ffi-pointer->string . q513f) (%ffi-call->string-or-zero . q513e) (%ffi-call->double . q513d) (%ffi-call->void* . q513c) (%ffi-call->void . q513b) (%ffi-call->int . q513a) (%ffi-lookup . q5139) (%ffi-open . q5138) (%fork . q5137) (%pipe . q5136) (p . q5135) (condition-variable-notify-all! . q512d) (condition-variable-notify! . q512c) (condition-variable-wait! . q512b) (make-condition-variable . q512a) (string-upcase . q5113) (string-titlecase . q5112) (string-normalize-nfkd . q5111) (string-normalize-nfkc . q5110) (string-normalize-nfd . q510f) (string-normalize-nfc . q510e) (string-foldcase . q510d) (string-downcase . q510c) (string-ci>? . q510b) (string-ci>=? . q510a) (string-ci=? . q5109) (string-ci<? . q5108) (string-ci<=? . q5107) (char-whitespace? . q5106) (char-upper-case? . q5105) (char-title-case? . q5104) (char-numeric? . q5103) (char-lower-case? . q5102) (char-general-category . q5101) (char-upcase . q5100) (char-titlecase . q50ff) (char-foldcase . q50fe) (char-downcase . q50fd) (char-ci>? . q50fc) (char-ci>=? . q50fb) (char-ci=? . q50fa) (char-ci<? . q50f9) (char-ci<=? . q50f8) (char-alphabetic? . q50f7) (make-variable-transformer . q2ce6) (identifier? . q2fa4) (generate-temporaries . q2f90) (free-identifier=? . q2f92) (syntax->datum . q2fa8) (datum->syntax . q2fa6) (bound-identifier=? . q2f94) (record-type-descriptor? . q50f6) (record-predicate . q50f5) (record-mutator . q50f4) (record-constructor . q50f3) (record-accessor . q50f2) (make-record-type-descriptor . q50f1) (make-record-constructor-descriptor . q50f0) (record? . q50ef) (record-type-uid . q50ee) (record-type-sealed? . q50ed) (record-type-parent . q50ec) (record-type-opaque? . q50eb) (record-type-name . q50ea) (record-type-generative? . q50e9) (record-type-field-names . q50e8) (record-rtd . q50e7) (record-field-mutable? . q50e6) (delete-file . q50e5) (file-exists? . q50e4) (vector-sort! . q50e3) (vector-sort . q50e2) (list-sort . q50e1) (symbol-hash . q50e0) (string-ci-hash . q50df) (string-hash . q50de) (equal-hash . q50dd) (hashtable-equivalence-function . q50dc) (make-hashtable . q50db) (hashtable-hash-function . q50da) (make-eqv-hashtable . q50d9) (make-eq-hashtable . q50d8) (hashtable? . q50d7) (hashtable-update! . q50d6) (hashtable-size . q50d5) (hashtable-set! . q50d4) (hashtable-ref . q50d3) (hashtable-mutable? . q50d2) (hashtable-keys . q50d1) (hashtable-entries . q50d0) (hashtable-delete! . q50cf) (hashtable-copy . q50ce) (hashtable-contains? . q50cd) (hashtable-clear! . q50cc) (call-with-output-file . q50cb) (call-with-input-file . q50ca) (write-char . q50c9) (write . q50c8) (with-output-to-file . q50c7) (with-input-from-file . q50c6) (read-char . q50c5) (read . q50c4) (peek-char . q50c3) (open-output-file . q50c2) (open-input-file . q50c1) (newline . q50c0) (display . q50bf) (close-output-port . q50be) (close-input-port . q50bd) (eof-object? . q50bc) (eof-object . q50bb) (current-error-port . q50ba) (current-output-port . q50b9) (current-input-port . q50b8) (output-port? . q50b7) (input-port? . q50b6) (utf-8-codec . q50b5) (utf-16-codec . q50b4) (transcoder-error-handling-mode . q50b3) (transcoder-eol-style . q50b2) (transcoder-codec . q50b1) (transcoded-port . q50b0) (textual-port? . q50af) (string->bytevector . q50ae) (standard-output-port . q50ad) (standard-input-port . q50ac) (standard-error-port . q50ab) (set-port-position! . q50aa) (put-u8 . q50a9) (put-string . q50a8) (put-datum . q50a7) (put-char . q50a6) (put-bytevector . q50a5) (port? . q50a4) (port-transcoder . q50a3) (port-position . q50a2) (port-has-set-port-position!? . q50a1) (port-has-port-position? . q50a0) (port-eof? . q509f) (output-port-buffer-mode . q509e) (open-string-output-port . q509d) (open-string-input-port . q509c) (open-file-output-port . q509b) (open-file-input/output-port . q509a) (open-file-input-port . q5099) (open-bytevector-output-port . q5098) (open-bytevector-input-port . q5097) (native-transcoder . q5096) (native-eol-style . q5095) (make-transcoder . q5094) (latin-1-codec . q5093) (make-i/o-write-error . q4b64) (make-i/o-read-error . q4b4f) (make-i/o-port-error . q4c05) (make-i/o-invalid-position-error . q4b7b) (make-i/o-filename-error . q4b96) (make-i/o-file-protection-error . q4baf) (make-i/o-file-is-read-only-error . q4bc4) (make-i/o-file-does-not-exist-error . q4bee) (make-i/o-file-already-exists-error . q4bd9) (make-i/o-error . q4b3a) (make-i/o-encoding-error . q4c35) (make-i/o-decoding-error . q4c1e) (make-custom-textual-output-port . q5092) (make-custom-textual-input/output-port . q5091) (make-custom-textual-input-port . q5090) (make-custom-binary-output-port . q508f) (make-custom-binary-input/output-port . q508e) (make-custom-binary-input-port . q508d) (make-bytevector . q508c) (lookahead-u8 . q508b) (lookahead-char . q508a) (i/o-write-error? . q4b66) (i/o-read-error? . q4b51) (i/o-port-error? . q4c09) (i/o-invalid-position-error? . q4b7f) (i/o-filename-error? . q4b9a) (i/o-file-protection-error? . q4bb1) (i/o-file-is-read-only-error? . q4bc6) (i/o-file-does-not-exist-error? . q4bf0) (i/o-file-already-exists-error? . q4bdb) (i/o-error? . q4b3c) (i/o-error-position . q4b81) (i/o-error-port . q4c0b) (i/o-error-filename . q4b9c) (i/o-encoding-error? . q4c39) (i/o-encoding-error-char . q4c3b) (i/o-decoding-error? . q4c20) (get-u8 . q5089) (get-string-n! . q5088) (get-string-n . q5087) (get-string-all . q5086) (get-line . q5085) (get-datum . q5084) (get-char . q5083) (get-bytevector-some . q5082) (get-bytevector-n! . q5081) (get-bytevector-n . q5080) (get-bytevector-all . q507f) (flush-output-port . q507e) (close-port . q507d) (exit . q5075) (command-line . q4d70) (string-fill! . q5074) (string-set! . q5073) (set-cdr! . q5072) (set-car! . q5071) (remove . q5070) (remv . q506f) (remp . q506e) (remq . q506d) (partition . q506c) (memv . q506b) (memq . q506a) (memp . q5069) (member . q5068) (exists . q5067) (for-all . q5066) (fold-right . q5065) (fold-left . q5064) (find . q5063) (filter . q5062) (cons* . q5061) (assv . q5060) (assq . q505f) (assp . q505e) (assoc . q505d) (call-with-string-output-port . q505c) (call-with-port . q505b) (call-with-bytevector-output-port . q505a) (bytevector->string . q5059) (buffer-mode? . q5058) (binary-port? . q5057) (with-exception-handler . q5056) (raise-continuable . q5055) (raise . q5054) (eval . q2f82) (environment . q2f7a) (make-enumeration . q5053) (enum-set=? . q5052) (enum-set-universe . q5051) (enum-set-union . q5050) (enum-set-subset? . q504f) (enum-set-projection . q504e) (enum-set-member? . q504d) (enum-set-intersection . q504c) (enum-set-indexer . q504b) (enum-set-difference . q504a) (enum-set-constructor . q5049) (enum-set-complement . q5048) (enum-set->list . q5047) (who-condition? . q4ab0) (warning? . q4a28) (violation? . q4a67) (undefined-violation? . q4b27) (syntax-violation? . q4b0e) (syntax-violation-subform . q4b12) (syntax-violation-form . q4b10) (syntax-violation . q2fa2) (simple-conditions . q5046) (serious-condition? . q4a3d) (non-continuable-violation? . q4ac7) (message-condition? . q4a11) (make-who-condition . q4aac) (make-warning . q4a26) (make-violation . q4a65) (make-undefined-violation . q4b25) (make-syntax-violation . q4b08) (make-serious-condition . q4a3b) (make-non-continuable-violation . q4ac5) (make-message-condition . q4a0d) (make-lexical-violation . q4aef) (make-irritants-condition . q4a91) (make-implementation-restriction-violation . q4ada) (make-error . q4a50) (make-assertion-violation . q4a7a) (lexical-violation? . q4af1) (irritants-condition? . q4a95) (implementation-restriction-violation? . q4adc) (error? . q4a52) (condition-who . q4ab2) (condition-predicate . q5045) (condition-message . q4a13) (condition-irritants . q4a97) (condition-accessor . q5044) (condition . q5043) (assertion-violation? . q4a7c) (condition? . q5042) (utf32->string . q5041) (utf16->string . q5040) (utf8->string . q503f) (uint-list->bytevector . q503e) (u8-list->bytevector . q503d) (string->utf8 . q503c) (string->utf32 . q503b) (string->utf16 . q503a) (sint-list->bytevector . q5039) (native-endianness . q5038) (bytevector? . q5037) (bytevector=? . q5036) (bytevector-uint-set! . q5035) (bytevector-uint-ref . q5034) (bytevector-u8-set! . q5033) (bytevector-u8-ref . q5032) (bytevector-u64-set! . q5031) (bytevector-u64-ref . q5030) (bytevector-u64-native-set! . q502f) (bytevector-u64-native-ref . q502e) (bytevector-u32-set! . q502d) (bytevector-u32-ref . q502c) (bytevector-u32-native-set! . q502b) (bytevector-u32-native-ref . q502a) (bytevector-u16-set! . q5029) (bytevector-u16-ref . q5028) (bytevector-u16-native-set! . q5027) (bytevector-u16-native-ref . q5026) (bytevector-sint-set! . q5025) (bytevector-sint-ref . q5024) (bytevector-s8-set! . q5023) (bytevector-s8-ref . q5022) (bytevector-s64-set! . q5021) (bytevector-s64-ref . q5020) (bytevector-s64-native-set! . q501f) (bytevector-s64-native-ref . q501e) (bytevector-s32-set! . q501d) (bytevector-s32-ref . q501c) (bytevector-s32-native-set! . q501b) (bytevector-s32-native-ref . q501a) (bytevector-s16-set! . q5019) (bytevector-s16-ref . q5018) (bytevector-s16-native-set! . q5017) (bytevector-s16-native-ref . q5016) (bytevector-length . q5015) (bytevector-ieee-single-ref . q5014) (bytevector-ieee-single-set! . q5013) (bytevector-ieee-single-native-set! . q5012) (bytevector-ieee-single-native-ref . q5011) (bytevector-ieee-double-set! . q5010) (bytevector-ieee-double-ref . q500f) (bytevector-ieee-double-native-set! . q500e) (bytevector-ieee-double-native-ref . q500d) (bytevector-fill! . q500c) (bytevector-copy! . q500b) (bytevector-copy . q500a) (bytevector->uint-list . q5009) (bytevector->u8-list . q5008) (bytevector->sint-list . q5007) (no-nans-violation? . q4c65) (no-infinities-violation? . q4c50) (make-no-nans-violation . q4c63) (make-no-infinities-violation . q4c4e) (real->flonum . q5006) (flzero? . q5005) (fltruncate . q5004) (fltan . q5003) (flsqrt . q5002) (flsin . q5001) (flround . q5000) (flpositive? . q4fff) (flonum? . q4ffe) (flodd? . q4ffd) (flnumerator . q4ffc) (flnegative? . q4ffb) (flnan? . q4ffa) (flmod0 . q4ff9) (flmod . q4ff8) (flmin . q4ff7) (flmax . q4ff6) (fllog . q4ff5) (flinteger? . q4ff4) (flinfinite? . q4ff3) (flfloor . q4ff2) (flfinite? . q4ff1) (flexpt . q4ff0) (flexp . q4fef) (fleven? . q4fee) (fldiv0-and-mod0 . q4fed) (fldiv0 . q4fec) (fldiv-and-mod . q4feb) (fldiv . q4fea) (fldenominator . q4fe9) (flcos . q4fe8) (flceiling . q4fe7) (flatan . q4fe6) (flasin . q4fe5) (flacos . q4fe4) (flabs . q4fe3) (fl>? . q4fe2) (fl>=? . q4fe1) (fl=? . q4fe0) (fl<? . q4fdf) (fl<=? . q4fde) (fl/ . q4fdd) (fl- . q4fdc) (fl+ . q4fdb) (fl* . q4fda) (fixnum->flonum . q4fd9) (fxzero? . q4fd8) (fxxor . q4fd7) (fxrotate-bit-field . q4fd6) (fxreverse-bit-field . q4fd5) (fxpositive? . q4fd4) (fxodd? . q4fd3) (fxnot . q4fd2) (fxnegative? . q4fd1) (fxmod0 . q4fd0) (fxmod . q4fcf) (fxmin . q4fce) (fxmax . q4fcd) (fxlength . q4fcc) (fxior . q4fcb) (fxif . q4fca) (fxfirst-bit-set . q4fc9) (fxeven? . q4fc8) (fxdiv0-and-mod0 . q4fc7) (fxdiv0 . q4fc6) (fxdiv-and-mod . q4fc5) (fxdiv . q4fc4) (fxcopy-bit-field . q4fc3) (fxcopy-bit . q4fc2) (fxbit-set? . q4fc1) (fxbit-field . q4fc0) (fxbit-count . q4fbf) (fxarithmetic-shift-right . q4fbe) (fxarithmetic-shift-left . q4fbd) (fxarithmetic-shift . q4fbc) (fxand . q4fbb) (fx>? . q4fba) (fx>=? . q4fb9) (fx=? . q4fb8) (fx<? . q4fb7) (fx<=? . q4fb6) (fx-/carry . q4fb5) (fx- . q4fb4) (fx+/carry . q4fb3) (fx+ . q4fb2) (fx*/carry . q4fb1) (fx* . q4fb0) (greatest-fixnum . q4faf) (least-fixnum . q4fae) (fixnum-width . q4fad) (fixnum? . q4fac) (bitwise-rotate-bit-field . q4fab) (bitwise-reverse-bit-field . q4faa) (bitwise-length . q4fa9) (bitwise-if . q4fa8) (bitwise-first-bit-set . q4fa7) (bitwise-copy-bit-field . q4fa6) (bitwise-copy-bit . q4fa5) (bitwise-bit-set? . q4fa4) (bitwise-bit-field . q4fa3) (bitwise-bit-count . q4fa2) (bitwise-xor . q4fa1) (bitwise-ior . q4fa0) (bitwise-and . q4f9f) (bitwise-not . q4f9e) (bitwise-arithmetic-shift-right . q4f9d) (bitwise-arithmetic-shift-left . q4f9c) (bitwise-arithmetic-shift . q4f9b) (zero? . q4f9a) (vector? . q4f99) (vector-set! . q4f98) (vector-ref . q4f97) (vector-map . q4f96) (vector-length . q4f95) (vector-for-each . q4f94) (vector-fill! . q4f93) (vector->list . q4f92) (vector . q4f91) (values . q4f90) (truncate . q4f8f) (tan . q4f8e) (symbol? . q4f8d) (symbol=? . q4f8c) (symbol->string . q4f8b) (substring . q4f8a) (string? . q4f89) (string>? . q4f88) (string>=? . q4f87) (string=? . q4f86) (string<? . q4f85) (string<=? . q4f84) (string-ref . q4f83) (string-length . q4f82) (string-for-each . q4f81) (string-copy . q4f80) (string-append . q4f7f) (string->symbol . q4f7e) (string->number . q4f7d) (string->list . q4f7c) (string . q4f7b) (sqrt . q4f7a) (sin . q4f79) (round . q4f78) (reverse . q4f77) (real? . q4f76) (real-valued? . q4f75) (real-part . q4f74) (rationalize . q4f73) (rational? . q4f72) (rational-valued? . q4f71) (procedure? . q4f70) (positive? . q4f6f) (pair? . q4f6e) (odd? . q4f6d) (numerator . q4f6c) (number? . q4f6b) (number->string . q4f6a) (null? . q4f69) (not . q4f68) (negative? . q4f67) (nan? . q4f66) (min . q4f65) (max . q4f64) (map . q4f63) (make-vector . q4f62) (make-string . q4f61) (make-rectangular . q4f60) (make-polar . q4f5f) (magnitude . q4f5e) (log . q4f5d) (list? . q4f5c) (list-tail . q4f5b) (list-ref . q4f5a) (list->vector . q4f59) (list->string . q4f58) (list . q4f57) (length . q4f56) (lcm . q4f55) (integer? . q4f54) (integer-valued? . q4f53) (integer->char . q4f52) (infinite? . q4f51) (inexact? . q4f50) (inexact . q4f4f) (imag-part . q4f4e) (gcd . q4f4d) (for-each . q4f4c) (floor . q4f4b) (finite? . q4f4a) (expt . q4f49) (exp . q4f48) (exact? . q4f47) (exact-integer-sqrt . q4f46) (exact . q4f45) (even? . q4f44) (error . q4f43) (eqv? . q4f42) (equal? . q4f41) (eq? . q4f40) (dynamic-wind . q4f3f) (div0-and-mod0 . q4f3e) (mod0 . q4f3d) (div0 . q4f3c) (div-and-mod . q4f3b) (mod . q4f3a) (div . q4f39) (denominator . q4f38) (cos . q4f37) (cons . q4f36) (complex? . q4f35) (char? . q4f34) (char>? . q4f33) (char>=? . q4f32) (char=? . q4f31) (char<? . q4f30) (char<=? . q4f2f) (char->integer . q4f2e) (ceiling . q4f2d) (call-with-values . q4f2c) (call/cc . q4f2b) (call-with-current-continuation . q4f2a) (cddddr . q4f29) (cdddar . q4f28) (cddadr . q4f27) (cddaar . q4f26) (cdaddr . q4f25) (cdadar . q4f24) (cdaadr . q4f23) (cdaaar . q4f22) (cadddr . q4f21) (caddar . q4f20) (cadadr . q4f1f) (cadaar . q4f1e) (caaddr . q4f1d) (caadar . q4f1c) (caaadr . q4f1b) (caaaar . q4f1a) (cdddr . q4f19) (cddar . q4f18) (cdadr . q4f17) (cdaar . q4f16) (caddr . q4f15) (cadar . q4f14) (caadr . q4f13) (caaar . q4f12) (cddr . q4f11) (cdar . q4f10) (cadr . q4f0f) (caar . q4f0e) (cdr . q4f0d) (car . q4f0c) (boolean? . q4f0b) (boolean=? . q4f0a) (atan . q4f09) (assertion-violation . q4f08) (asin . q4f07) (apply . q4f06) (append . q4f05) (angle . q4f04) (acos . q4f03) (abs . q4f02) (/ . q4f01) (* . q4f00) (- . q4eff) (+ . q4efe) (>= . q4efd) (> . q4efc) (= . q4efb) (<= . q4efa) (< . q4ef9) (library . q4ef8) (&no-nans . q4ef7) (&no-infinities . q4ef6) (&i/o-encoding . q4ef5) (&i/o-decoding . q4ef4) (&i/o-port . q4ef3) (&i/o-file-does-not-exist . q4ef2) (&i/o-file-already-exists . q4ef1) (&i/o-file-is-read-only . q4ef0) (&i/o-file-protection . q4eef) (&i/o-filename . q4eee) (&i/o-invalid-position . q4eed) (&i/o-write . q4eec) (&i/o-read . q4eeb) (&i/o . q4eea) (&undefined . q4ee9) (&syntax . q4ee8) (&lexical . q4ee7) (&implementation-restriction . q4ee6) (&non-continuable . q4ee5) (&who . q4ee4) (&irritants . q4ee3) (&assertion . q4ee2) (&violation . q4ee1) (&error . q4ee0) (&serious . q4edf) (&warning . q4ede) (&message . q4edd) (&condition . q4edc) (define-condition-type . q4edb) (define-enumeration . q4eda) (define-record-type . q4ed9) (parent-rtd . q4ed8) (nongenerative . q4ed7) (opaque . q4ed6) (sealed . q4ed5) (protocol . q4ed4) (parent . q4ed3) (immutable . q4ed2) (mutable . q4ed1) (fields . q4ed0) (error-handling-mode . q4ecf) (file-options . q4ece) (buffer-mode . q4ecd) (eol-style . q4ecc) (guard . q4ecb) (unsyntax-splicing . q4ec8) (unsyntax . q4ec7) (unquote-splicing . q4ec6) (unquote . q4ec5) (_ . q4ec4) (else . q4ec3) (=> . q4ec2) (... . q4ec1) (assert . q4ec0) (endianness . q4ebf) (time . q4ebd) (do . q4ebc) (cond . q4ebb) (let* . q4eba) (let . q4eb9) (let*-values . q4eb8) (let-values . q4eb7) (identifier-syntax . q4eb6) (with-syntax . q4eb5) (quasisyntax . q4eb4) (quasiquote . q4eb3) (syntax-rules . q4eb2) (include . q4eb1) (record-constructor-descriptor . q4eaf) (record-type-descriptor . q4eae) (case . q4ead) (unless . q4eab) (when . q4eaa) (or . q4ea9) (and . q4ea8) (if . q4ea7) (letrec* . q4ea6) (letrec . q4ea5) (case-lambda . q4ea3) (lambda . q4ea2) (syntax . q4ea1) (syntax-case . q4ea0) (quote . q4e9f) (letrec-syntax . q4e9d) (let-syntax . q4e9c) (set! . q4e9b) (import . q4e9a) (begin . q4e99) (define-syntax . q4e97) (define . q4e96)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q516a '(psyntax null-environment-5) '() '() '() '() '((make-promise . q5076) (unquote-splicing . q4ec6) (unquote . q4ec5) (_ . q4ec4) (else . q4ec3) (=> . q4ec2) (... . q4ec1) (delay . q4ebe) (do . q4ebc) (cond . q4ebb) (let* . q4eba) (let . q4eb9) (quasiquote . q4eb3) (syntax-rules . q4eb2) (case . q4ead) (or . q4ea9) (and . q4ea8) (if . q4ea7) (letrec . q4ea5) (lambda . q4ea2) (quote . q4e9f) (letrec-syntax . q4e9d) (let-syntax . q4e9c) (set! . q4e9b) (begin . q4e99) (define-syntax . q4e97) (define . q4e96)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q516b '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . q510b) (string-ci>=? . q510a) (string-ci=? . q5109) (string-ci<? . q5108) (string-ci<=? . q5107) (char-whitespace? . q5106) (char-upper-case? . q5105) (char-numeric? . q5103) (char-lower-case? . q5102) (char-upcase . q5100) (char-downcase . q50fd) (char-ci>? . q50fc) (char-ci>=? . q50fb) (char-ci=? . q50fa) (char-ci<? . q50f9) (char-ci<=? . q50f8) (char-alphabetic? . q50f7) (call-with-output-file . q50cb) (call-with-input-file . q50ca) (write-char . q50c9) (write . q50c8) (with-output-to-file . q50c7) (with-input-from-file . q50c6) (read-char . q50c5) (read . q50c4) (peek-char . q50c3) (open-output-file . q50c2) (open-input-file . q50c1) (newline . q50c0) (display . q50bf) (close-output-port . q50be) (close-input-port . q50bd) (eof-object . q50bb) (current-output-port . q50b9) (current-input-port . q50b8) (output-port? . q50b7) (input-port? . q50b6) (scheme-report-environment . q2f7e) (quotient . q507c) (null-environment . q2f7c) (remainder . q507b) (modulo . q507a) (inexact->exact . q5079) (force . q5078) (exact->inexact . q5077) (make-promise . q5076) (string-fill! . q5074) (string-set! . q5073) (set-cdr! . q5072) (set-car! . q5071) (memv . q506b) (memq . q506a) (member . q5068) (assv . q5060) (assq . q505f) (assoc . q505d) (eval . q2f82) (zero? . q4f9a) (vector? . q4f99) (vector-set! . q4f98) (vector-ref . q4f97) (vector-length . q4f95) (vector-fill! . q4f93) (vector->list . q4f92) (vector . q4f91) (values . q4f90) (truncate . q4f8f) (tan . q4f8e) (symbol? . q4f8d) (symbol->string . q4f8b) (substring . q4f8a) (string? . q4f89) (string>? . q4f88) (string>=? . q4f87) (string=? . q4f86) (string<? . q4f85) (string<=? . q4f84) (string-ref . q4f83) (string-length . q4f82) (string-copy . q4f80) (string-append . q4f7f) (string->symbol . q4f7e) (string->number . q4f7d) (string->list . q4f7c) (string . q4f7b) (sqrt . q4f7a) (sin . q4f79) (round . q4f78) (reverse . q4f77) (real? . q4f76) (real-part . q4f74) (rationalize . q4f73) (rational? . q4f72) (procedure? . q4f70) (positive? . q4f6f) (pair? . q4f6e) (odd? . q4f6d) (numerator . q4f6c) (number? . q4f6b) (number->string . q4f6a) (not . q4f68) (negative? . q4f67) (min . q4f65) (max . q4f64) (map . q4f63) (make-vector . q4f62) (make-string . q4f61) (make-rectangular . q4f60) (make-polar . q4f5f) (magnitude . q4f5e) (log . q4f5d) (list? . q4f5c) (list-tail . q4f5b) (list-ref . q4f5a) (list->vector . q4f59) (list->string . q4f58) (list . q4f57) (length . q4f56) (lcm . q4f55) (integer? . q4f54) (integer->char . q4f52) (inexact? . q4f50) (imag-part . q4f4e) (gcd . q4f4d) (for-each . q4f4c) (floor . q4f4b) (expt . q4f49) (exp . q4f48) (exact? . q4f47) (even? . q4f44) (eqv? . q4f42) (equal? . q4f41) (eq? . q4f40) (dynamic-wind . q4f3f) (denominator . q4f38) (cos . q4f37) (cons . q4f36) (complex? . q4f35) (char? . q4f34) (char>? . q4f33) (char>=? . q4f32) (char=? . q4f31) (char<? . q4f30) (char<=? . q4f2f) (char->integer . q4f2e) (ceiling . q4f2d) (call-with-values . q4f2c) (call-with-current-continuation . q4f2a) (cddddr . q4f29) (cdddar . q4f28) (cddadr . q4f27) (cddaar . q4f26) (cdaddr . q4f25) (cdadar . q4f24) (cdaadr . q4f23) (cdaaar . q4f22) (cadddr . q4f21) (caddar . q4f20) (cadadr . q4f1f) (cadaar . q4f1e) (caaddr . q4f1d) (caadar . q4f1c) (caaadr . q4f1b) (caaaar . q4f1a) (cdddr . q4f19) (cddar . q4f18) (cdadr . q4f17) (cdaar . q4f16) (caddr . q4f15) (cadar . q4f14) (caadr . q4f13) (caaar . q4f12) (cddr . q4f11) (cdar . q4f10) (cadr . q4f0f) (caar . q4f0e) (cdr . q4f0d) (car . q4f0c) (boolean? . q4f0b) (atan . q4f09) (asin . q4f07) (apply . q4f06) (append . q4f05) (angle . q4f04) (acos . q4f03) (abs . q4f02) (/ . q4f01) (* . q4f00) (- . q4eff) (+ . q4efe) (>= . q4efd) (> . q4efc) (= . q4efb) (<= . q4efa) (< . q4ef9) (unquote-splicing . q4ec6) (unquote . q4ec5) (else . q4ec3) (=> . q4ec2) (... . q4ec1) (delay . q4ebe) (do . q4ebc) (cond . q4ebb) (let* . q4eba) (let . q4eb9) (quasiquote . q4eb3) (syntax-rules . q4eb2) (case . q4ead) (or . q4ea9) (and . q4ea8) (if . q4ea7) (letrec . q4ea5) (lambda . q4ea2) (quote . q4e9f) (letrec-syntax . q4e9d) (let-syntax . q4e9c) (set! . q4e9b) (begin . q4e99) (define-syntax . q4e97) (define . q4e96)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q516c '(psyntax modules) '() '() '() '() '((module . q4e98)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q516d '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q516e '(rnrs) '(6) '() '() '() '((regexp? . q5161) (string-upcase . q5113) (string-titlecase . q5112) (string-normalize-nfkd . q5111) (string-normalize-nfkc . q5110) (string-normalize-nfd . q510f) (string-normalize-nfc . q510e) (string-foldcase . q510d) (string-downcase . q510c) (string-ci>? . q510b) (string-ci>=? . q510a) (string-ci=? . q5109) (string-ci<? . q5108) (string-ci<=? . q5107) (char-whitespace? . q5106) (char-upper-case? . q5105) (char-title-case? . q5104) (char-numeric? . q5103) (char-lower-case? . q5102) (char-general-category . q5101) (char-upcase . q5100) (char-titlecase . q50ff) (char-foldcase . q50fe) (char-downcase . q50fd) (char-ci>? . q50fc) (char-ci>=? . q50fb) (char-ci=? . q50fa) (char-ci<? . q50f9) (char-ci<=? . q50f8) (char-alphabetic? . q50f7) (make-variable-transformer . q2ce6) (identifier? . q2fa4) (generate-temporaries . q2f90) (free-identifier=? . q2f92) (syntax->datum . q2fa8) (datum->syntax . q2fa6) (bound-identifier=? . q2f94) (record-type-descriptor? . q50f6) (record-predicate . q50f5) (record-mutator . q50f4) (record-constructor . q50f3) (record-accessor . q50f2) (make-record-type-descriptor . q50f1) (make-record-constructor-descriptor . q50f0) (record? . q50ef) (record-type-uid . q50ee) (record-type-sealed? . q50ed) (record-type-parent . q50ec) (record-type-opaque? . q50eb) (record-type-name . q50ea) (record-type-generative? . q50e9) (record-type-field-names . q50e8) (record-rtd . q50e7) (record-field-mutable? . q50e6) (delete-file . q50e5) (file-exists? . q50e4) (vector-sort! . q50e3) (vector-sort . q50e2) (list-sort . q50e1) (symbol-hash . q50e0) (string-ci-hash . q50df) (string-hash . q50de) (equal-hash . q50dd) (hashtable-equivalence-function . q50dc) (make-hashtable . q50db) (hashtable-hash-function . q50da) (make-eqv-hashtable . q50d9) (make-eq-hashtable . q50d8) (hashtable? . q50d7) (hashtable-update! . q50d6) (hashtable-size . q50d5) (hashtable-set! . q50d4) (hashtable-ref . q50d3) (hashtable-mutable? . q50d2) (hashtable-keys . q50d1) (hashtable-entries . q50d0) (hashtable-delete! . q50cf) (hashtable-copy . q50ce) (hashtable-contains? . q50cd) (hashtable-clear! . q50cc) (call-with-output-file . q50cb) (call-with-input-file . q50ca) (write-char . q50c9) (write . q50c8) (with-output-to-file . q50c7) (with-input-from-file . q50c6) (read-char . q50c5) (read . q50c4) (peek-char . q50c3) (open-output-file . q50c2) (open-input-file . q50c1) (newline . q50c0) (display . q50bf) (close-output-port . q50be) (close-input-port . q50bd) (eof-object? . q50bc) (eof-object . q50bb) (current-error-port . q50ba) (current-output-port . q50b9) (current-input-port . q50b8) (output-port? . q50b7) (input-port? . q50b6) (utf-8-codec . q50b5) (utf-16-codec . q50b4) (transcoder-error-handling-mode . q50b3) (transcoder-eol-style . q50b2) (transcoder-codec . q50b1) (transcoded-port . q50b0) (textual-port? . q50af) (string->bytevector . q50ae) (standard-output-port . q50ad) (standard-input-port . q50ac) (standard-error-port . q50ab) (set-port-position! . q50aa) (put-u8 . q50a9) (put-string . q50a8) (put-datum . q50a7) (put-char . q50a6) (put-bytevector . q50a5) (port? . q50a4) (port-transcoder . q50a3) (port-position . q50a2) (port-has-set-port-position!? . q50a1) (port-has-port-position? . q50a0) (port-eof? . q509f) (output-port-buffer-mode . q509e) (open-string-output-port . q509d) (open-string-input-port . q509c) (open-file-output-port . q509b) (open-file-input/output-port . q509a) (open-file-input-port . q5099) (open-bytevector-output-port . q5098) (open-bytevector-input-port . q5097) (native-transcoder . q5096) (native-eol-style . q5095) (make-transcoder . q5094) (latin-1-codec . q5093) (make-i/o-write-error . q4b64) (make-i/o-read-error . q4b4f) (make-i/o-port-error . q4c05) (make-i/o-invalid-position-error . q4b7b) (make-i/o-filename-error . q4b96) (make-i/o-file-protection-error . q4baf) (make-i/o-file-is-read-only-error . q4bc4) (make-i/o-file-does-not-exist-error . q4bee) (make-i/o-file-already-exists-error . q4bd9) (make-i/o-error . q4b3a) (make-i/o-encoding-error . q4c35) (make-i/o-decoding-error . q4c1e) (make-custom-textual-output-port . q5092) (make-custom-textual-input/output-port . q5091) (make-custom-textual-input-port . q5090) (make-custom-binary-output-port . q508f) (make-custom-binary-input/output-port . q508e) (make-custom-binary-input-port . q508d) (make-bytevector . q508c) (lookahead-u8 . q508b) (lookahead-char . q508a) (i/o-write-error? . q4b66) (i/o-read-error? . q4b51) (i/o-port-error? . q4c09) (i/o-invalid-position-error? . q4b7f) (i/o-filename-error? . q4b9a) (i/o-file-protection-error? . q4bb1) (i/o-file-is-read-only-error? . q4bc6) (i/o-file-does-not-exist-error? . q4bf0) (i/o-file-already-exists-error? . q4bdb) (i/o-error? . q4b3c) (i/o-error-position . q4b81) (i/o-error-port . q4c0b) (i/o-error-filename . q4b9c) (i/o-encoding-error? . q4c39) (i/o-encoding-error-char . q4c3b) (i/o-decoding-error? . q4c20) (get-u8 . q5089) (get-string-n! . q5088) (get-string-n . q5087) (get-string-all . q5086) (get-line . q5085) (get-datum . q5084) (get-char . q5083) (get-bytevector-some . q5082) (get-bytevector-n! . q5081) (get-bytevector-n . q5080) (get-bytevector-all . q507f) (flush-output-port . q507e) (close-port . q507d) (exit . q5075) (command-line . q4d70) (remove . q5070) (remv . q506f) (remp . q506e) (remq . q506d) (partition . q506c) (memv . q506b) (memq . q506a) (memp . q5069) (member . q5068) (exists . q5067) (for-all . q5066) (fold-right . q5065) (fold-left . q5064) (find . q5063) (filter . q5062) (cons* . q5061) (assv . q5060) (assq . q505f) (assp . q505e) (assoc . q505d) (call-with-string-output-port . q505c) (call-with-port . q505b) (call-with-bytevector-output-port . q505a) (bytevector->string . q5059) (buffer-mode? . q5058) (binary-port? . q5057) (with-exception-handler . q5056) (raise-continuable . q5055) (raise . q5054) (make-enumeration . q5053) (enum-set=? . q5052) (enum-set-universe . q5051) (enum-set-union . q5050) (enum-set-subset? . q504f) (enum-set-projection . q504e) (enum-set-member? . q504d) (enum-set-intersection . q504c) (enum-set-indexer . q504b) (enum-set-difference . q504a) (enum-set-constructor . q5049) (enum-set-complement . q5048) (enum-set->list . q5047) (who-condition? . q4ab0) (warning? . q4a28) (violation? . q4a67) (undefined-violation? . q4b27) (syntax-violation? . q4b0e) (syntax-violation-subform . q4b12) (syntax-violation-form . q4b10) (syntax-violation . q2fa2) (simple-conditions . q5046) (serious-condition? . q4a3d) (non-continuable-violation? . q4ac7) (message-condition? . q4a11) (make-who-condition . q4aac) (make-warning . q4a26) (make-violation . q4a65) (make-undefined-violation . q4b25) (make-syntax-violation . q4b08) (make-serious-condition . q4a3b) (make-non-continuable-violation . q4ac5) (make-message-condition . q4a0d) (make-lexical-violation . q4aef) (make-irritants-condition . q4a91) (make-implementation-restriction-violation . q4ada) (make-error . q4a50) (make-assertion-violation . q4a7a) (lexical-violation? . q4af1) (irritants-condition? . q4a95) (implementation-restriction-violation? . q4adc) (error? . q4a52) (condition-who . q4ab2) (condition-predicate . q5045) (condition-message . q4a13) (condition-irritants . q4a97) (condition-accessor . q5044) (condition . q5043) (assertion-violation? . q4a7c) (condition? . q5042) (utf32->string . q5041) (utf16->string . q5040) (utf8->string . q503f) (uint-list->bytevector . q503e) (u8-list->bytevector . q503d) (string->utf8 . q503c) (string->utf32 . q503b) (string->utf16 . q503a) (sint-list->bytevector . q5039) (native-endianness . q5038) (bytevector? . q5037) (bytevector=? . q5036) (bytevector-uint-set! . q5035) (bytevector-uint-ref . q5034) (bytevector-u8-set! . q5033) (bytevector-u8-ref . q5032) (bytevector-u64-set! . q5031) (bytevector-u64-ref . q5030) (bytevector-u64-native-set! . q502f) (bytevector-u64-native-ref . q502e) (bytevector-u32-set! . q502d) (bytevector-u32-ref . q502c) (bytevector-u32-native-set! . q502b) (bytevector-u32-native-ref . q502a) (bytevector-u16-set! . q5029) (bytevector-u16-ref . q5028) (bytevector-u16-native-set! . q5027) (bytevector-u16-native-ref . q5026) (bytevector-sint-set! . q5025) (bytevector-sint-ref . q5024) (bytevector-s8-set! . q5023) (bytevector-s8-ref . q5022) (bytevector-s64-set! . q5021) (bytevector-s64-ref . q5020) (bytevector-s64-native-set! . q501f) (bytevector-s64-native-ref . q501e) (bytevector-s32-set! . q501d) (bytevector-s32-ref . q501c) (bytevector-s32-native-set! . q501b) (bytevector-s32-native-ref . q501a) (bytevector-s16-set! . q5019) (bytevector-s16-ref . q5018) (bytevector-s16-native-set! . q5017) (bytevector-s16-native-ref . q5016) (bytevector-length . q5015) (bytevector-ieee-single-ref . q5014) (bytevector-ieee-single-set! . q5013) (bytevector-ieee-single-native-set! . q5012) (bytevector-ieee-single-native-ref . q5011) (bytevector-ieee-double-set! . q5010) (bytevector-ieee-double-ref . q500f) (bytevector-ieee-double-native-set! . q500e) (bytevector-ieee-double-native-ref . q500d) (bytevector-fill! . q500c) (bytevector-copy! . q500b) (bytevector-copy . q500a) (bytevector->uint-list . q5009) (bytevector->u8-list . q5008) (bytevector->sint-list . q5007) (no-nans-violation? . q4c65) (no-infinities-violation? . q4c50) (make-no-nans-violation . q4c63) (make-no-infinities-violation . q4c4e) (real->flonum . q5006) (flzero? . q5005) (fltruncate . q5004) (fltan . q5003) (flsqrt . q5002) (flsin . q5001) (flround . q5000) (flpositive? . q4fff) (flonum? . q4ffe) (flodd? . q4ffd) (flnumerator . q4ffc) (flnegative? . q4ffb) (flnan? . q4ffa) (flmod0 . q4ff9) (flmod . q4ff8) (flmin . q4ff7) (flmax . q4ff6) (fllog . q4ff5) (flinteger? . q4ff4) (flinfinite? . q4ff3) (flfloor . q4ff2) (flfinite? . q4ff1) (flexpt . q4ff0) (flexp . q4fef) (fleven? . q4fee) (fldiv0-and-mod0 . q4fed) (fldiv0 . q4fec) (fldiv-and-mod . q4feb) (fldiv . q4fea) (fldenominator . q4fe9) (flcos . q4fe8) (flceiling . q4fe7) (flatan . q4fe6) (flasin . q4fe5) (flacos . q4fe4) (flabs . q4fe3) (fl>? . q4fe2) (fl>=? . q4fe1) (fl=? . q4fe0) (fl<? . q4fdf) (fl<=? . q4fde) (fl/ . q4fdd) (fl- . q4fdc) (fl+ . q4fdb) (fl* . q4fda) (fixnum->flonum . q4fd9) (fxzero? . q4fd8) (fxxor . q4fd7) (fxrotate-bit-field . q4fd6) (fxreverse-bit-field . q4fd5) (fxpositive? . q4fd4) (fxodd? . q4fd3) (fxnot . q4fd2) (fxnegative? . q4fd1) (fxmod0 . q4fd0) (fxmod . q4fcf) (fxmin . q4fce) (fxmax . q4fcd) (fxlength . q4fcc) (fxior . q4fcb) (fxif . q4fca) (fxfirst-bit-set . q4fc9) (fxeven? . q4fc8) (fxdiv0-and-mod0 . q4fc7) (fxdiv0 . q4fc6) (fxdiv-and-mod . q4fc5) (fxdiv . q4fc4) (fxcopy-bit-field . q4fc3) (fxcopy-bit . q4fc2) (fxbit-set? . q4fc1) (fxbit-field . q4fc0) (fxbit-count . q4fbf) (fxarithmetic-shift-right . q4fbe) (fxarithmetic-shift-left . q4fbd) (fxarithmetic-shift . q4fbc) (fxand . q4fbb) (fx>? . q4fba) (fx>=? . q4fb9) (fx=? . q4fb8) (fx<? . q4fb7) (fx<=? . q4fb6) (fx-/carry . q4fb5) (fx- . q4fb4) (fx+/carry . q4fb3) (fx+ . q4fb2) (fx*/carry . q4fb1) (fx* . q4fb0) (greatest-fixnum . q4faf) (least-fixnum . q4fae) (fixnum-width . q4fad) (fixnum? . q4fac) (bitwise-rotate-bit-field . q4fab) (bitwise-reverse-bit-field . q4faa) (bitwise-length . q4fa9) (bitwise-if . q4fa8) (bitwise-first-bit-set . q4fa7) (bitwise-copy-bit-field . q4fa6) (bitwise-copy-bit . q4fa5) (bitwise-bit-set? . q4fa4) (bitwise-bit-field . q4fa3) (bitwise-bit-count . q4fa2) (bitwise-xor . q4fa1) (bitwise-ior . q4fa0) (bitwise-and . q4f9f) (bitwise-not . q4f9e) (bitwise-arithmetic-shift-right . q4f9d) (bitwise-arithmetic-shift-left . q4f9c) (bitwise-arithmetic-shift . q4f9b) (zero? . q4f9a) (vector? . q4f99) (vector-set! . q4f98) (vector-ref . q4f97) (vector-map . q4f96) (vector-length . q4f95) (vector-for-each . q4f94) (vector-fill! . q4f93) (vector->list . q4f92) (vector . q4f91) (values . q4f90) (truncate . q4f8f) (tan . q4f8e) (symbol? . q4f8d) (symbol=? . q4f8c) (symbol->string . q4f8b) (substring . q4f8a) (string? . q4f89) (string>? . q4f88) (string>=? . q4f87) (string=? . q4f86) (string<? . q4f85) (string<=? . q4f84) (string-ref . q4f83) (string-length . q4f82) (string-for-each . q4f81) (string-copy . q4f80) (string-append . q4f7f) (string->symbol . q4f7e) (string->number . q4f7d) (string->list . q4f7c) (string . q4f7b) (sqrt . q4f7a) (sin . q4f79) (round . q4f78) (reverse . q4f77) (real? . q4f76) (real-valued? . q4f75) (real-part . q4f74) (rationalize . q4f73) (rational? . q4f72) (rational-valued? . q4f71) (procedure? . q4f70) (positive? . q4f6f) (pair? . q4f6e) (odd? . q4f6d) (numerator . q4f6c) (number? . q4f6b) (number->string . q4f6a) (null? . q4f69) (not . q4f68) (negative? . q4f67) (nan? . q4f66) (min . q4f65) (max . q4f64) (map . q4f63) (make-vector . q4f62) (make-string . q4f61) (make-rectangular . q4f60) (make-polar . q4f5f) (magnitude . q4f5e) (log . q4f5d) (list? . q4f5c) (list-tail . q4f5b) (list-ref . q4f5a) (list->vector . q4f59) (list->string . q4f58) (list . q4f57) (length . q4f56) (lcm . q4f55) (integer? . q4f54) (integer-valued? . q4f53) (integer->char . q4f52) (infinite? . q4f51) (inexact? . q4f50) (inexact . q4f4f) (imag-part . q4f4e) (gcd . q4f4d) (for-each . q4f4c) (floor . q4f4b) (finite? . q4f4a) (expt . q4f49) (exp . q4f48) (exact? . q4f47) (exact-integer-sqrt . q4f46) (exact . q4f45) (even? . q4f44) (error . q4f43) (eqv? . q4f42) (equal? . q4f41) (eq? . q4f40) (dynamic-wind . q4f3f) (div0-and-mod0 . q4f3e) (mod0 . q4f3d) (div0 . q4f3c) (div-and-mod . q4f3b) (mod . q4f3a) (div . q4f39) (denominator . q4f38) (cos . q4f37) (cons . q4f36) (complex? . q4f35) (char? . q4f34) (char>? . q4f33) (char>=? . q4f32) (char=? . q4f31) (char<? . q4f30) (char<=? . q4f2f) (char->integer . q4f2e) (ceiling . q4f2d) (call-with-values . q4f2c) (call/cc . q4f2b) (call-with-current-continuation . q4f2a) (cddddr . q4f29) (cdddar . q4f28) (cddadr . q4f27) (cddaar . q4f26) (cdaddr . q4f25) (cdadar . q4f24) (cdaadr . q4f23) (cdaaar . q4f22) (cadddr . q4f21) (caddar . q4f20) (cadadr . q4f1f) (cadaar . q4f1e) (caaddr . q4f1d) (caadar . q4f1c) (caaadr . q4f1b) (caaaar . q4f1a) (cdddr . q4f19) (cddar . q4f18) (cdadr . q4f17) (cdaar . q4f16) (caddr . q4f15) (cadar . q4f14) (caadr . q4f13) (caaar . q4f12) (cddr . q4f11) (cdar . q4f10) (cadr . q4f0f) (caar . q4f0e) (cdr . q4f0d) (car . q4f0c) (boolean? . q4f0b) (boolean=? . q4f0a) (atan . q4f09) (assertion-violation . q4f08) (asin . q4f07) (apply . q4f06) (append . q4f05) (angle . q4f04) (acos . q4f03) (abs . q4f02) (/ . q4f01) (* . q4f00) (- . q4eff) (+ . q4efe) (>= . q4efd) (> . q4efc) (= . q4efb) (<= . q4efa) (< . q4ef9) (&no-nans . q4ef7) (&no-infinities . q4ef6) (&i/o-encoding . q4ef5) (&i/o-decoding . q4ef4) (&i/o-port . q4ef3) (&i/o-file-does-not-exist . q4ef2) (&i/o-file-already-exists . q4ef1) (&i/o-file-is-read-only . q4ef0) (&i/o-file-protection . q4eef) (&i/o-filename . q4eee) (&i/o-invalid-position . q4eed) (&i/o-write . q4eec) (&i/o-read . q4eeb) (&i/o . q4eea) (&undefined . q4ee9) (&syntax . q4ee8) (&lexical . q4ee7) (&implementation-restriction . q4ee6) (&non-continuable . q4ee5) (&who . q4ee4) (&irritants . q4ee3) (&assertion . q4ee2) (&violation . q4ee1) (&error . q4ee0) (&serious . q4edf) (&warning . q4ede) (&message . q4edd) (&condition . q4edc) (define-condition-type . q4edb) (define-enumeration . q4eda) (define-record-type . q4ed9) (parent-rtd . q4ed8) (nongenerative . q4ed7) (opaque . q4ed6) (sealed . q4ed5) (protocol . q4ed4) (parent . q4ed3) (immutable . q4ed2) (mutable . q4ed1) (fields . q4ed0) (error-handling-mode . q4ecf) (file-options . q4ece) (buffer-mode . q4ecd) (eol-style . q4ecc) (guard . q4ecb) (unsyntax-splicing . q4ec8) (unsyntax . q4ec7) (unquote-splicing . q4ec6) (unquote . q4ec5) (_ . q4ec4) (else . q4ec3) (=> . q4ec2) (... . q4ec1) (assert . q4ec0) (endianness . q4ebf) (do . q4ebc) (cond . q4ebb) (let* . q4eba) (let . q4eb9) (let*-values . q4eb8) (let-values . q4eb7) (identifier-syntax . q4eb6) (with-syntax . q4eb5) (quasisyntax . q4eb4) (quasiquote . q4eb3) (syntax-rules . q4eb2) (record-constructor-descriptor . q4eaf) (record-type-descriptor . q4eae) (case . q4ead) (unless . q4eab) (when . q4eaa) (or . q4ea9) (and . q4ea8) (if . q4ea7) (letrec* . q4ea6) (letrec . q4ea5) (case-lambda . q4ea3) (lambda . q4ea2) (syntax . q4ea1) (syntax-case . q4ea0) (quote . q4e9f) (letrec-syntax . q4e9d) (let-syntax . q4e9c) (set! . q4e9b) (begin . q4e99) (define-syntax . q4e97) (define . q4e96)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q516f '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . q2f7e) (quotient . q507c) (null-environment . q2f7c) (remainder . q507b) (modulo . q507a) (inexact->exact . q5079) (force . q5078) (exact->inexact . q5077) (make-promise . q5076) (delay . q4ebe)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5170 '(rnrs control) '(6) '() '() '() '((do . q4ebc) (unless . q4eab) (when . q4eaa) (case-lambda . q4ea3)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5171 '(rnrs eval) '(6) '() '() '() '((eval . q2f82) (environment . q2f7a)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5172 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . q5072) (set-car! . q5071)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5173 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . q5074) (string-set! . q5073)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5174 '(rnrs programs) '(6) '() '() '() '((exit . q5075) (command-line . q4d70)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5175 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . q2ce6) (identifier? . q2fa4) (generate-temporaries . q2f90) (free-identifier=? . q2f92) (syntax->datum . q2fa8) (datum->syntax . q2fa6) (bound-identifier=? . q2f94) (syntax-violation . q2fa2) (unsyntax-splicing . q4ec8) (unsyntax . q4ec7) (_ . q4ec4) (... . q4ec1) (with-syntax . q4eb5) (quasisyntax . q4eb4) (syntax . q4ea1) (syntax-case . q4ea0)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5176 '(rnrs files) '(6) '() '() '() '((delete-file . q50e5) (file-exists? . q50e4) (make-i/o-write-error . q4b64) (make-i/o-read-error . q4b4f) (make-i/o-port-error . q4c05) (make-i/o-invalid-position-error . q4b7b) (make-i/o-filename-error . q4b96) (make-i/o-file-protection-error . q4baf) (make-i/o-file-is-read-only-error . q4bc4) (make-i/o-file-does-not-exist-error . q4bee) (make-i/o-file-already-exists-error . q4bd9) (make-i/o-error . q4b3a) (i/o-write-error? . q4b66) (i/o-read-error? . q4b51) (i/o-port-error? . q4c09) (i/o-invalid-position-error? . q4b7f) (i/o-filename-error? . q4b9a) (i/o-file-protection-error? . q4bb1) (i/o-file-is-read-only-error? . q4bc6) (i/o-file-does-not-exist-error? . q4bf0) (i/o-file-already-exists-error? . q4bdb) (i/o-error? . q4b3c) (i/o-error-position . q4b81) (i/o-error-port . q4c0b) (i/o-error-filename . q4b9c) (&i/o-port . q4ef3) (&i/o-file-does-not-exist . q4ef2) (&i/o-file-already-exists . q4ef1) (&i/o-file-is-read-only . q4ef0) (&i/o-file-protection . q4eef) (&i/o-filename . q4eee) (&i/o-invalid-position . q4eed) (&i/o-write . q4eec) (&i/o-read . q4eeb) (&i/o . q4eea)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5177 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . q50e3) (vector-sort . q50e2) (list-sort . q50e1)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5178 '(rnrs base) '(6) '() '() '() '((zero? . q4f9a) (vector? . q4f99) (vector-set! . q4f98) (vector-ref . q4f97) (vector-map . q4f96) (vector-length . q4f95) (vector-for-each . q4f94) (vector-fill! . q4f93) (vector->list . q4f92) (vector . q4f91) (values . q4f90) (truncate . q4f8f) (tan . q4f8e) (symbol? . q4f8d) (symbol=? . q4f8c) (symbol->string . q4f8b) (substring . q4f8a) (string? . q4f89) (string>? . q4f88) (string>=? . q4f87) (string=? . q4f86) (string<? . q4f85) (string<=? . q4f84) (string-ref . q4f83) (string-length . q4f82) (string-for-each . q4f81) (string-copy . q4f80) (string-append . q4f7f) (string->symbol . q4f7e) (string->number . q4f7d) (string->list . q4f7c) (string . q4f7b) (sqrt . q4f7a) (sin . q4f79) (round . q4f78) (reverse . q4f77) (real? . q4f76) (real-valued? . q4f75) (real-part . q4f74) (rationalize . q4f73) (rational? . q4f72) (rational-valued? . q4f71) (procedure? . q4f70) (positive? . q4f6f) (pair? . q4f6e) (odd? . q4f6d) (numerator . q4f6c) (number? . q4f6b) (number->string . q4f6a) (null? . q4f69) (not . q4f68) (negative? . q4f67) (nan? . q4f66) (min . q4f65) (max . q4f64) (map . q4f63) (make-vector . q4f62) (make-string . q4f61) (make-rectangular . q4f60) (make-polar . q4f5f) (magnitude . q4f5e) (log . q4f5d) (list? . q4f5c) (list-tail . q4f5b) (list-ref . q4f5a) (list->vector . q4f59) (list->string . q4f58) (list . q4f57) (length . q4f56) (lcm . q4f55) (integer? . q4f54) (integer-valued? . q4f53) (integer->char . q4f52) (infinite? . q4f51) (inexact? . q4f50) (inexact . q4f4f) (imag-part . q4f4e) (gcd . q4f4d) (for-each . q4f4c) (floor . q4f4b) (finite? . q4f4a) (expt . q4f49) (exp . q4f48) (exact? . q4f47) (exact-integer-sqrt . q4f46) (exact . q4f45) (even? . q4f44) (error . q4f43) (eqv? . q4f42) (equal? . q4f41) (eq? . q4f40) (dynamic-wind . q4f3f) (div0-and-mod0 . q4f3e) (mod0 . q4f3d) (div0 . q4f3c) (div-and-mod . q4f3b) (mod . q4f3a) (div . q4f39) (denominator . q4f38) (cos . q4f37) (cons . q4f36) (complex? . q4f35) (char? . q4f34) (char>? . q4f33) (char>=? . q4f32) (char=? . q4f31) (char<? . q4f30) (char<=? . q4f2f) (char->integer . q4f2e) (ceiling . q4f2d) (call-with-values . q4f2c) (call/cc . q4f2b) (call-with-current-continuation . q4f2a) (cddddr . q4f29) (cdddar . q4f28) (cddadr . q4f27) (cddaar . q4f26) (cdaddr . q4f25) (cdadar . q4f24) (cdaadr . q4f23) (cdaaar . q4f22) (cadddr . q4f21) (caddar . q4f20) (cadadr . q4f1f) (cadaar . q4f1e) (caaddr . q4f1d) (caadar . q4f1c) (caaadr . q4f1b) (caaaar . q4f1a) (cdddr . q4f19) (cddar . q4f18) (cdadr . q4f17) (cdaar . q4f16) (caddr . q4f15) (cadar . q4f14) (caadr . q4f13) (caaar . q4f12) (cddr . q4f11) (cdar . q4f10) (cadr . q4f0f) (caar . q4f0e) (cdr . q4f0d) (car . q4f0c) (boolean? . q4f0b) (boolean=? . q4f0a) (atan . q4f09) (assertion-violation . q4f08) (asin . q4f07) (apply . q4f06) (append . q4f05) (angle . q4f04) (acos . q4f03) (abs . q4f02) (/ . q4f01) (* . q4f00) (- . q4eff) (+ . q4efe) (>= . q4efd) (> . q4efc) (= . q4efb) (<= . q4efa) (< . q4ef9) (unquote-splicing . q4ec6) (unquote . q4ec5) (_ . q4ec4) (else . q4ec3) (=> . q4ec2) (... . q4ec1) (assert . q4ec0) (cond . q4ebb) (let* . q4eba) (let . q4eb9) (let*-values . q4eb8) (let-values . q4eb7) (identifier-syntax . q4eb6) (quasiquote . q4eb3) (syntax-rules . q4eb2) (case . q4ead) (or . q4ea9) (and . q4ea8) (if . q4ea7) (letrec* . q4ea6) (letrec . q4ea5) (lambda . q4ea2) (quote . q4e9f) (letrec-syntax . q4e9d) (let-syntax . q4e9c) (set! . q4e9b) (begin . q4e99) (define-syntax . q4e97) (define . q4e96)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5179 '(rnrs lists) '(6) '() '() '() '((remove . q5070) (remv . q506f) (remp . q506e) (remq . q506d) (partition . q506c) (memv . q506b) (memq . q506a) (memp . q5069) (member . q5068) (exists . q5067) (for-all . q5066) (fold-right . q5065) (fold-left . q5064) (find . q5063) (filter . q5062) (cons* . q5061) (assv . q5060) (assq . q505f) (assp . q505e) (assoc . q505d)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q517a '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . q50cb) (call-with-input-file . q50ca) (write-char . q50c9) (write . q50c8) (with-output-to-file . q50c7) (with-input-from-file . q50c6) (read-char . q50c5) (read . q50c4) (peek-char . q50c3) (open-output-file . q50c2) (open-input-file . q50c1) (newline . q50c0) (display . q50bf) (close-output-port . q50be) (close-input-port . q50bd) (eof-object? . q50bc) (eof-object . q50bb) (current-error-port . q50ba) (current-output-port . q50b9) (current-input-port . q50b8) (output-port? . q50b7) (input-port? . q50b6) (make-i/o-write-error . q4b64) (make-i/o-read-error . q4b4f) (make-i/o-port-error . q4c05) (make-i/o-invalid-position-error . q4b7b) (make-i/o-filename-error . q4b96) (make-i/o-file-protection-error . q4baf) (make-i/o-file-is-read-only-error . q4bc4) (make-i/o-file-does-not-exist-error . q4bee) (make-i/o-file-already-exists-error . q4bd9) (make-i/o-error . q4b3a) (i/o-write-error? . q4b66) (i/o-read-error? . q4b51) (i/o-port-error? . q4c09) (i/o-invalid-position-error? . q4b7f) (i/o-filename-error? . q4b9a) (i/o-file-protection-error? . q4bb1) (i/o-file-is-read-only-error? . q4bc6) (i/o-file-does-not-exist-error? . q4bf0) (i/o-file-already-exists-error? . q4bdb) (i/o-error? . q4b3c) (i/o-error-position . q4b81) (i/o-error-port . q4c0b) (i/o-error-filename . q4b9c) (&i/o-port . q4ef3) (&i/o-file-does-not-exist . q4ef2) (&i/o-file-already-exists . q4ef1) (&i/o-file-is-read-only . q4ef0) (&i/o-file-protection . q4eef) (&i/o-filename . q4eee) (&i/o-invalid-position . q4eed) (&i/o-write . q4eec) (&i/o-read . q4eeb) (&i/o . q4eea)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q517b '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . q508c) (utf32->string . q5041) (utf16->string . q5040) (utf8->string . q503f) (uint-list->bytevector . q503e) (u8-list->bytevector . q503d) (string->utf8 . q503c) (string->utf32 . q503b) (string->utf16 . q503a) (sint-list->bytevector . q5039) (native-endianness . q5038) (bytevector? . q5037) (bytevector=? . q5036) (bytevector-uint-set! . q5035) (bytevector-uint-ref . q5034) (bytevector-u8-set! . q5033) (bytevector-u8-ref . q5032) (bytevector-u64-set! . q5031) (bytevector-u64-ref . q5030) (bytevector-u64-native-set! . q502f) (bytevector-u64-native-ref . q502e) (bytevector-u32-set! . q502d) (bytevector-u32-ref . q502c) (bytevector-u32-native-set! . q502b) (bytevector-u32-native-ref . q502a) (bytevector-u16-set! . q5029) (bytevector-u16-ref . q5028) (bytevector-u16-native-set! . q5027) (bytevector-u16-native-ref . q5026) (bytevector-sint-set! . q5025) (bytevector-sint-ref . q5024) (bytevector-s8-set! . q5023) (bytevector-s8-ref . q5022) (bytevector-s64-set! . q5021) (bytevector-s64-ref . q5020) (bytevector-s64-native-set! . q501f) (bytevector-s64-native-ref . q501e) (bytevector-s32-set! . q501d) (bytevector-s32-ref . q501c) (bytevector-s32-native-set! . q501b) (bytevector-s32-native-ref . q501a) (bytevector-s16-set! . q5019) (bytevector-s16-ref . q5018) (bytevector-s16-native-set! . q5017) (bytevector-s16-native-ref . q5016) (bytevector-length . q5015) (bytevector-ieee-single-ref . q5014) (bytevector-ieee-single-set! . q5013) (bytevector-ieee-single-native-set! . q5012) (bytevector-ieee-single-native-ref . q5011) (bytevector-ieee-double-set! . q5010) (bytevector-ieee-double-ref . q500f) (bytevector-ieee-double-native-set! . q500e) (bytevector-ieee-double-native-ref . q500d) (bytevector-fill! . q500c) (bytevector-copy! . q500b) (bytevector-copy . q500a) (bytevector->uint-list . q5009) (bytevector->u8-list . q5008) (bytevector->sint-list . q5007) (endianness . q4ebf)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q517c '(rnrs unicode) '(6) '() '() '() '((string-upcase . q5113) (string-titlecase . q5112) (string-normalize-nfkd . q5111) (string-normalize-nfkc . q5110) (string-normalize-nfd . q510f) (string-normalize-nfc . q510e) (string-foldcase . q510d) (string-downcase . q510c) (string-ci>? . q510b) (string-ci>=? . q510a) (string-ci=? . q5109) (string-ci<? . q5108) (string-ci<=? . q5107) (char-whitespace? . q5106) (char-upper-case? . q5105) (char-title-case? . q5104) (char-numeric? . q5103) (char-lower-case? . q5102) (char-general-category . q5101) (char-upcase . q5100) (char-titlecase . q50ff) (char-foldcase . q50fe) (char-downcase . q50fd) (char-ci>? . q50fc) (char-ci>=? . q50fb) (char-ci=? . q50fa) (char-ci<? . q50f9) (char-ci<=? . q50f8) (char-alphabetic? . q50f7)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q517d '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . q5056) (raise-continuable . q5055) (raise . q5054) (guard . q4ecb) (else . q4ec3) (=> . q4ec2)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q517e '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . q4fab) (bitwise-reverse-bit-field . q4faa) (bitwise-length . q4fa9) (bitwise-if . q4fa8) (bitwise-first-bit-set . q4fa7) (bitwise-copy-bit-field . q4fa6) (bitwise-copy-bit . q4fa5) (bitwise-bit-set? . q4fa4) (bitwise-bit-field . q4fa3) (bitwise-bit-count . q4fa2) (bitwise-xor . q4fa1) (bitwise-ior . q4fa0) (bitwise-and . q4f9f) (bitwise-not . q4f9e) (bitwise-arithmetic-shift-right . q4f9d) (bitwise-arithmetic-shift-left . q4f9c) (bitwise-arithmetic-shift . q4f9b)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q517f '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . q4fd8) (fxxor . q4fd7) (fxrotate-bit-field . q4fd6) (fxreverse-bit-field . q4fd5) (fxpositive? . q4fd4) (fxodd? . q4fd3) (fxnot . q4fd2) (fxnegative? . q4fd1) (fxmod0 . q4fd0) (fxmod . q4fcf) (fxmin . q4fce) (fxmax . q4fcd) (fxlength . q4fcc) (fxior . q4fcb) (fxif . q4fca) (fxfirst-bit-set . q4fc9) (fxeven? . q4fc8) (fxdiv0-and-mod0 . q4fc7) (fxdiv0 . q4fc6) (fxdiv-and-mod . q4fc5) (fxdiv . q4fc4) (fxcopy-bit-field . q4fc3) (fxcopy-bit . q4fc2) (fxbit-set? . q4fc1) (fxbit-field . q4fc0) (fxbit-count . q4fbf) (fxarithmetic-shift-right . q4fbe) (fxarithmetic-shift-left . q4fbd) (fxarithmetic-shift . q4fbc) (fxand . q4fbb) (fx>? . q4fba) (fx>=? . q4fb9) (fx=? . q4fb8) (fx<? . q4fb7) (fx<=? . q4fb6) (fx-/carry . q4fb5) (fx- . q4fb4) (fx+/carry . q4fb3) (fx+ . q4fb2) (fx*/carry . q4fb1) (fx* . q4fb0) (greatest-fixnum . q4faf) (least-fixnum . q4fae) (fixnum-width . q4fad) (fixnum? . q4fac)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5180 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . q4c65) (no-infinities-violation? . q4c50) (make-no-nans-violation . q4c63) (make-no-infinities-violation . q4c4e) (real->flonum . q5006) (flzero? . q5005) (fltruncate . q5004) (fltan . q5003) (flsqrt . q5002) (flsin . q5001) (flround . q5000) (flpositive? . q4fff) (flonum? . q4ffe) (flodd? . q4ffd) (flnumerator . q4ffc) (flnegative? . q4ffb) (flnan? . q4ffa) (flmod0 . q4ff9) (flmod . q4ff8) (flmin . q4ff7) (flmax . q4ff6) (fllog . q4ff5) (flinteger? . q4ff4) (flinfinite? . q4ff3) (flfloor . q4ff2) (flfinite? . q4ff1) (flexpt . q4ff0) (flexp . q4fef) (fleven? . q4fee) (fldiv0-and-mod0 . q4fed) (fldiv0 . q4fec) (fldiv-and-mod . q4feb) (fldiv . q4fea) (fldenominator . q4fe9) (flcos . q4fe8) (flceiling . q4fe7) (flatan . q4fe6) (flasin . q4fe5) (flacos . q4fe4) (flabs . q4fe3) (fl>? . q4fe2) (fl>=? . q4fe1) (fl=? . q4fe0) (fl<? . q4fdf) (fl<=? . q4fde) (fl/ . q4fdd) (fl- . q4fdc) (fl+ . q4fdb) (fl* . q4fda) (fixnum->flonum . q4fd9) (&no-nans . q4ef7) (&no-infinities . q4ef6)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5181 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . q50e0) (string-ci-hash . q50df) (string-hash . q50de) (equal-hash . q50dd) (hashtable-equivalence-function . q50dc) (make-hashtable . q50db) (hashtable-hash-function . q50da) (make-eqv-hashtable . q50d9) (make-eq-hashtable . q50d8) (hashtable? . q50d7) (hashtable-update! . q50d6) (hashtable-size . q50d5) (hashtable-set! . q50d4) (hashtable-ref . q50d3) (hashtable-mutable? . q50d2) (hashtable-keys . q50d1) (hashtable-entries . q50d0) (hashtable-delete! . q50cf) (hashtable-copy . q50ce) (hashtable-contains? . q50cd) (hashtable-clear! . q50cc)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5182 '(rnrs io ports) '(6) '() '() '() '((eof-object? . q50bc) (eof-object . q50bb) (current-error-port . q50ba) (current-output-port . q50b9) (current-input-port . q50b8) (output-port? . q50b7) (input-port? . q50b6) (utf-8-codec . q50b5) (utf-16-codec . q50b4) (transcoder-error-handling-mode . q50b3) (transcoder-eol-style . q50b2) (transcoder-codec . q50b1) (transcoded-port . q50b0) (textual-port? . q50af) (string->bytevector . q50ae) (standard-output-port . q50ad) (standard-input-port . q50ac) (standard-error-port . q50ab) (set-port-position! . q50aa) (put-u8 . q50a9) (put-string . q50a8) (put-datum . q50a7) (put-char . q50a6) (put-bytevector . q50a5) (port? . q50a4) (port-transcoder . q50a3) (port-position . q50a2) (port-has-set-port-position!? . q50a1) (port-has-port-position? . q50a0) (port-eof? . q509f) (output-port-buffer-mode . q509e) (open-string-output-port . q509d) (open-string-input-port . q509c) (open-file-output-port . q509b) (open-file-input/output-port . q509a) (open-file-input-port . q5099) (open-bytevector-output-port . q5098) (open-bytevector-input-port . q5097) (native-transcoder . q5096) (native-eol-style . q5095) (make-transcoder . q5094) (latin-1-codec . q5093) (make-i/o-write-error . q4b64) (make-i/o-read-error . q4b4f) (make-i/o-port-error . q4c05) (make-i/o-invalid-position-error . q4b7b) (make-i/o-filename-error . q4b96) (make-i/o-file-protection-error . q4baf) (make-i/o-file-is-read-only-error . q4bc4) (make-i/o-file-does-not-exist-error . q4bee) (make-i/o-file-already-exists-error . q4bd9) (make-i/o-error . q4b3a) (make-i/o-encoding-error . q4c35) (make-i/o-decoding-error . q4c1e) (make-custom-textual-output-port . q5092) (make-custom-textual-input/output-port . q5091) (make-custom-textual-input-port . q5090) (make-custom-binary-output-port . q508f) (make-custom-binary-input/output-port . q508e) (make-custom-binary-input-port . q508d) (lookahead-u8 . q508b) (lookahead-char . q508a) (i/o-write-error? . q4b66) (i/o-read-error? . q4b51) (i/o-port-error? . q4c09) (i/o-invalid-position-error? . q4b7f) (i/o-filename-error? . q4b9a) (i/o-file-protection-error? . q4bb1) (i/o-file-is-read-only-error? . q4bc6) (i/o-file-does-not-exist-error? . q4bf0) (i/o-file-already-exists-error? . q4bdb) (i/o-error? . q4b3c) (i/o-error-position . q4b81) (i/o-error-port . q4c0b) (i/o-error-filename . q4b9c) (i/o-encoding-error? . q4c39) (i/o-encoding-error-char . q4c3b) (i/o-decoding-error? . q4c20) (get-u8 . q5089) (get-string-n! . q5088) (get-string-n . q5087) (get-string-all . q5086) (get-line . q5085) (get-datum . q5084) (get-char . q5083) (get-bytevector-some . q5082) (get-bytevector-n! . q5081) (get-bytevector-n . q5080) (get-bytevector-all . q507f) (flush-output-port . q507e) (close-port . q507d) (call-with-string-output-port . q505c) (call-with-port . q505b) (call-with-bytevector-output-port . q505a) (bytevector->string . q5059) (buffer-mode? . q5058) (binary-port? . q5057) (&i/o-encoding . q4ef5) (&i/o-decoding . q4ef4) (&i/o-port . q4ef3) (&i/o-file-does-not-exist . q4ef2) (&i/o-file-already-exists . q4ef1) (&i/o-file-is-read-only . q4ef0) (&i/o-file-protection . q4eef) (&i/o-filename . q4eee) (&i/o-invalid-position . q4eed) (&i/o-write . q4eec) (&i/o-read . q4eeb) (&i/o . q4eea) (error-handling-mode . q4ecf) (file-options . q4ece) (buffer-mode . q4ecd) (eol-style . q4ecc)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5183 '(rnrs enums) '(6) '() '() '() '((make-enumeration . q5053) (enum-set=? . q5052) (enum-set-universe . q5051) (enum-set-union . q5050) (enum-set-subset? . q504f) (enum-set-projection . q504e) (enum-set-member? . q504d) (enum-set-intersection . q504c) (enum-set-indexer . q504b) (enum-set-difference . q504a) (enum-set-constructor . q5049) (enum-set-complement . q5048) (enum-set->list . q5047) (define-enumeration . q4eda)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5184 '(rnrs conditions) '(6) '() '() '() '((who-condition? . q4ab0) (warning? . q4a28) (violation? . q4a67) (undefined-violation? . q4b27) (syntax-violation? . q4b0e) (syntax-violation-subform . q4b12) (syntax-violation-form . q4b10) (syntax-violation . q2fa2) (simple-conditions . q5046) (serious-condition? . q4a3d) (non-continuable-violation? . q4ac7) (message-condition? . q4a11) (make-who-condition . q4aac) (make-warning . q4a26) (make-violation . q4a65) (make-undefined-violation . q4b25) (make-syntax-violation . q4b08) (make-serious-condition . q4a3b) (make-non-continuable-violation . q4ac5) (make-message-condition . q4a0d) (make-lexical-violation . q4aef) (make-irritants-condition . q4a91) (make-implementation-restriction-violation . q4ada) (make-error . q4a50) (make-assertion-violation . q4a7a) (lexical-violation? . q4af1) (irritants-condition? . q4a95) (implementation-restriction-violation? . q4adc) (error? . q4a52) (condition-who . q4ab2) (condition-predicate . q5045) (condition-message . q4a13) (condition-irritants . q4a97) (condition-accessor . q5044) (condition . q5043) (assertion-violation? . q4a7c) (condition? . q5042) (&undefined . q4ee9) (&syntax . q4ee8) (&lexical . q4ee7) (&implementation-restriction . q4ee6) (&non-continuable . q4ee5) (&who . q4ee4) (&irritants . q4ee3) (&assertion . q4ee2) (&violation . q4ee1) (&error . q4ee0) (&serious . q4edf) (&warning . q4ede) (&message . q4edd) (&condition . q4edc) (define-condition-type . q4edb)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5185 '(rnrs records inspection) '(6) '() '() '() '((record? . q50ef) (record-type-uid . q50ee) (record-type-sealed? . q50ed) (record-type-parent . q50ec) (record-type-opaque? . q50eb) (record-type-name . q50ea) (record-type-generative? . q50e9) (record-type-field-names . q50e8) (record-rtd . q50e7) (record-field-mutable? . q50e6)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5186 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . q50f6) (record-predicate . q50f5) (record-mutator . q50f4) (record-constructor . q50f3) (record-accessor . q50f2) (make-record-type-descriptor . q50f1) (make-record-constructor-descriptor . q50f0)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5187 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . q4ed9) (parent-rtd . q4ed8) (nongenerative . q4ed7) (opaque . q4ed6) (sealed . q4ed5) (protocol . q4ed4) (parent . q4ed3) (immutable . q4ed2) (mutable . q4ed1) (fields . q4ed0) (record-constructor-descriptor . q4eaf) (record-type-descriptor . q4eae)) '() values values '#f '#f '#t '#f) (q2ad1@q2970@install-library 'q5188 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . q4c69) (&no-nans-rtd . q4c67) (&no-infinities-rcd . q4c54) (&no-infinities-rtd . q4c52) (&i/o-encoding-rcd . q4c3f) (&i/o-encoding-rtd . q4c3d) (&i/o-decoding-rcd . q4c24) (&i/o-decoding-rtd . q4c22) (&i/o-port-rcd . q4c0f) (&i/o-port-rtd . q4c0d) (&i/o-file-does-not-exist-rcd . q4bf4) (&i/o-file-does-not-exist-rtd . q4bf2) (&i/o-file-already-exists-rcd . q4bdf) (&i/o-file-already-exists-rtd . q4bdd) (&i/o-file-is-read-only-rcd . q4bca) (&i/o-file-is-read-only-rtd . q4bc8) (&i/o-file-protection-rcd . q4bb5) (&i/o-file-protection-rtd . q4bb3) (&i/o-filename-rcd . q4ba0) (&i/o-filename-rtd . q4b9e) (&i/o-invalid-position-rcd . q4b85) (&i/o-invalid-position-rtd . q4b83) (&i/o-write-rcd . q4b6a) (&i/o-write-rtd . q4b68) (&i/o-read-rcd . q4b55) (&i/o-read-rtd . q4b53) (&i/o-rcd . q4b40) (&i/o-rtd . q4b3e) (&undefined-rcd . q4b2b) (&undefined-rtd . q4b29) (&syntax-rcd . q4b16) (&syntax-rtd . q4b14) (&lexical-rcd . q4af5) (&lexical-rtd . q4af3) (&implementation-restriction-rcd . q4ae0) (&implementation-restriction-rtd . q4ade) (&non-continuable-rcd . q4acb) (&non-continuable-rtd . q4ac9) (&who-rcd . q4ab6) (&who-rtd . q4ab4) (&irritants-rcd . q4a9b) (&irritants-rtd . q4a99) (&assertion-rcd . q4a80) (&assertion-rtd . q4a7e) (&violation-rcd . q4a6b) (&violation-rtd . q4a69) (&error-rcd . q4a56) (&error-rtd . q4a54) (&serious-rcd . q4a41) (&serious-rtd . q4a3f) (&warning-rcd . q4a2c) (&warning-rtd . q4a2a) (&message-rcd . q4a17) (&message-rtd . q4a15) (&condition-rcd . q49b8) (&condition-rtd . q49b6) (syntax-error . q2f9e) (syntax-dispatch . q2eb9) (pretty-print . q5168) (eval-core . q5167) (set-symbol-value! . q5166) (symbol-value . q5165) (gensym . q5164) (void . q5163) (load . q4d76) (interaction-environment . q2fae) (char-ready? . q5162) (regexp? . q5161) (read-line . q5160) (ungensym . q515f) (alist->eq-hash-table . q515e) (assoc-ref . q515d) (print . q515c) (format . q515b) (host-os . q515a) (library-path . q294f) (standard-library-path . q5159) (file-newer? . q5158) (stat-mtime . q5157) (write-to-file . q5156) (file->list . q5155) (file->string . q5154) (digit->integer . q5153) (call-with-string-input-port . q5152) (call-with-string-io . q5151) (string-split . q5150) (bytevector-for-each . q514f) (string->regexp . q514e) (rxmatch . q514d) (regexp-replace-all . q514c) (hashtable-for-each . q514b) (call-process . q514a) (local-tz-offset . q5149) (microseconds . q5148) (readdir . q5147) (set-current-directory! . q5146) (expand-path . q5145) (current-directory . q5144) (%spawn . q5143) (%waitpid . q5142) (%ffi-supported? . q5141) (%ffi-pointer-ref . q5140) (%ffi-pointer->string . q513f) (%ffi-call->string-or-zero . q513e) (%ffi-call->double . q513d) (%ffi-call->void* . q513c) (%ffi-call->void . q513b) (%ffi-call->int . q513a) (%ffi-lookup . q5139) (%ffi-open . q5138) (%fork . q5137) (%pipe . q5136) (p . q5135) (open-output-string . q5134) (get-output-string . q5133) (get-environment-variables . q5132) (get-environment-variable . q5131) (get-timeofday . q5130) (get-command-line . q512f) (sys-display . q512e) (condition-variable-notify-all! . q512d) (condition-variable-notify! . q512c) (condition-variable-wait! . q512b) (make-condition-variable . q512a) (mosh-executable-path . q5129) (make-file-options . q5128) (source-info . q5127) (make-compiler-instruction . q5126) (make-instruction . q5125) (set-source-info! . q5124) (bignum? . q5123) (fast-equal? . q5122) (fasl-read . q5121) (fasl-write . q5120) (time-usage . q511f) (os-constant . q511e) (make-parameter . q2782) (socket-port . q511d) (socket-shutdown . q511c) (socket-close . q511b) (socket-send . q511a) (socket-recv! . q5119) (socket-recv . q5118) (make-server-socket . q5117) (make-client-socket . q5116) (socket-accept . q5115) (socket? . q5114) (string-upcase . q5113) (string-titlecase . q5112) (string-normalize-nfkd . q5111) (string-normalize-nfkc . q5110) (string-normalize-nfd . q510f) (string-normalize-nfc . q510e) (string-foldcase . q510d) (string-downcase . q510c) (string-ci>? . q510b) (string-ci>=? . q510a) (string-ci=? . q5109) (string-ci<? . q5108) (string-ci<=? . q5107) (char-whitespace? . q5106) (char-upper-case? . q5105) (char-title-case? . q5104) (char-numeric? . q5103) (char-lower-case? . q5102) (char-general-category . q5101) (char-upcase . q5100) (char-titlecase . q50ff) (char-foldcase . q50fe) (char-downcase . q50fd) (char-ci>? . q50fc) (char-ci>=? . q50fb) (char-ci=? . q50fa) (char-ci<? . q50f9) (char-ci<=? . q50f8) (char-alphabetic? . q50f7) (make-variable-transformer . q2ce6) (identifier? . q2fa4) (generate-temporaries . q2f90) (free-identifier=? . q2f92) (syntax->datum . q2fa8) (datum->syntax . q2fa6) (bound-identifier=? . q2f94) (record-type-descriptor? . q50f6) (record-predicate . q50f5) (record-mutator . q50f4) (record-constructor . q50f3) (record-accessor . q50f2) (make-record-type-descriptor . q50f1) (make-record-constructor-descriptor . q50f0) (record? . q50ef) (record-type-uid . q50ee) (record-type-sealed? . q50ed) (record-type-parent . q50ec) (record-type-opaque? . q50eb) (record-type-name . q50ea) (record-type-generative? . q50e9) (record-type-field-names . q50e8) (record-rtd . q50e7) (record-field-mutable? . q50e6) (delete-file . q50e5) (file-exists? . q50e4) (vector-sort! . q50e3) (vector-sort . q50e2) (list-sort . q50e1) (symbol-hash . q50e0) (string-ci-hash . q50df) (string-hash . q50de) (equal-hash . q50dd) (hashtable-equivalence-function . q50dc) (make-hashtable . q50db) (hashtable-hash-function . q50da) (make-eqv-hashtable . q50d9) (make-eq-hashtable . q50d8) (hashtable? . q50d7) (hashtable-update! . q50d6) (hashtable-size . q50d5) (hashtable-set! . q50d4) (hashtable-ref . q50d3) (hashtable-mutable? . q50d2) (hashtable-keys . q50d1) (hashtable-entries . q50d0) (hashtable-delete! . q50cf) (hashtable-copy . q50ce) (hashtable-contains? . q50cd) (hashtable-clear! . q50cc) (call-with-output-file . q50cb) (call-with-input-file . q50ca) (write-char . q50c9) (write . q50c8) (with-output-to-file . q50c7) (with-input-from-file . q50c6) (read-char . q50c5) (read . q50c4) (peek-char . q50c3) (open-output-file . q50c2) (open-input-file . q50c1) (newline . q50c0) (display . q50bf) (close-output-port . q50be) (close-input-port . q50bd) (eof-object? . q50bc) (eof-object . q50bb) (current-error-port . q50ba) (current-output-port . q50b9) (current-input-port . q50b8) (output-port? . q50b7) (input-port? . q50b6) (utf-8-codec . q50b5) (utf-16-codec . q50b4) (transcoder-error-handling-mode . q50b3) (transcoder-eol-style . q50b2) (transcoder-codec . q50b1) (transcoded-port . q50b0) (textual-port? . q50af) (string->bytevector . q50ae) (standard-output-port . q50ad) (standard-input-port . q50ac) (standard-error-port . q50ab) (set-port-position! . q50aa) (put-u8 . q50a9) (put-string . q50a8) (put-datum . q50a7) (put-char . q50a6) (put-bytevector . q50a5) (port? . q50a4) (port-transcoder . q50a3) (port-position . q50a2) (port-has-set-port-position!? . q50a1) (port-has-port-position? . q50a0) (port-eof? . q509f) (output-port-buffer-mode . q509e) (open-string-output-port . q509d) (open-string-input-port . q509c) (open-file-output-port . q509b) (open-file-input/output-port . q509a) (open-file-input-port . q5099) (open-bytevector-output-port . q5098) (open-bytevector-input-port . q5097) (native-transcoder . q5096) (native-eol-style . q5095) (make-transcoder . q5094) (latin-1-codec . q5093) (make-i/o-write-error . q4b64) (make-i/o-read-error . q4b4f) (make-i/o-port-error . q4c05) (make-i/o-invalid-position-error . q4b7b) (make-i/o-filename-error . q4b96) (make-i/o-file-protection-error . q4baf) (make-i/o-file-is-read-only-error . q4bc4) (make-i/o-file-does-not-exist-error . q4bee) (make-i/o-file-already-exists-error . q4bd9) (make-i/o-error . q4b3a) (make-i/o-encoding-error . q4c35) (make-i/o-decoding-error . q4c1e) (make-custom-textual-output-port . q5092) (make-custom-textual-input/output-port . q5091) (make-custom-textual-input-port . q5090) (make-custom-binary-output-port . q508f) (make-custom-binary-input/output-port . q508e) (make-custom-binary-input-port . q508d) (make-bytevector . q508c) (lookahead-u8 . q508b) (lookahead-char . q508a) (i/o-write-error? . q4b66) (i/o-read-error? . q4b51) (i/o-port-error? . q4c09) (i/o-invalid-position-error? . q4b7f) (i/o-filename-error? . q4b9a) (i/o-file-protection-error? . q4bb1) (i/o-file-is-read-only-error? . q4bc6) (i/o-file-does-not-exist-error? . q4bf0) (i/o-file-already-exists-error? . q4bdb) (i/o-error? . q4b3c) (i/o-error-position . q4b81) (i/o-error-port . q4c0b) (i/o-error-filename . q4b9c) (i/o-encoding-error? . q4c39) (i/o-encoding-error-char . q4c3b) (i/o-decoding-error? . q4c20) (get-u8 . q5089) (get-string-n! . q5088) (get-string-n . q5087) (get-string-all . q5086) (get-line . q5085) (get-datum . q5084) (get-char . q5083) (get-bytevector-some . q5082) (get-bytevector-n! . q5081) (get-bytevector-n . q5080) (get-bytevector-all . q507f) (flush-output-port . q507e) (close-port . q507d) (scheme-report-environment . q2f7e) (quotient . q507c) (null-environment . q2f7c) (remainder . q507b) (modulo . q507a) (inexact->exact . q5079) (force . q5078) (exact->inexact . q5077) (make-promise . q5076) (exit . q5075) (command-line . q4d70) (string-fill! . q5074) (string-set! . q5073) (set-cdr! . q5072) (set-car! . q5071) (remove . q5070) (remv . q506f) (remp . q506e) (remq . q506d) (partition . q506c) (memv . q506b) (memq . q506a) (memp . q5069) (member . q5068) (exists . q5067) (for-all . q5066) (fold-right . q5065) (fold-left . q5064) (find . q5063) (filter . q5062) (cons* . q5061) (assv . q5060) (assq . q505f) (assp . q505e) (assoc . q505d) (call-with-string-output-port . q505c) (call-with-port . q505b) (call-with-bytevector-output-port . q505a) (bytevector->string . q5059) (buffer-mode? . q5058) (binary-port? . q5057) (with-exception-handler . q5056) (raise-continuable . q5055) (raise . q5054) (eval . q2f82) (environment . q2f7a) (make-enumeration . q5053) (enum-set=? . q5052) (enum-set-universe . q5051) (enum-set-union . q5050) (enum-set-subset? . q504f) (enum-set-projection . q504e) (enum-set-member? . q504d) (enum-set-intersection . q504c) (enum-set-indexer . q504b) (enum-set-difference . q504a) (enum-set-constructor . q5049) (enum-set-complement . q5048) (enum-set->list . q5047) (who-condition? . q4ab0) (warning? . q4a28) (violation? . q4a67) (undefined-violation? . q4b27) (syntax-violation? . q4b0e) (syntax-violation-subform . q4b12) (syntax-violation-form . q4b10) (syntax-violation . q2fa2) (simple-conditions . q5046) (serious-condition? . q4a3d) (non-continuable-violation? . q4ac7) (message-condition? . q4a11) (make-who-condition . q4aac) (make-warning . q4a26) (make-violation . q4a65) (make-undefined-violation . q4b25) (make-syntax-violation . q4b08) (make-serious-condition . q4a3b) (make-non-continuable-violation . q4ac5) (make-message-condition . q4a0d) (make-lexical-violation . q4aef) (make-irritants-condition . q4a91) (make-implementation-restriction-violation . q4ada) (make-error . q4a50) (make-assertion-violation . q4a7a) (lexical-violation? . q4af1) (irritants-condition? . q4a95) (implementation-restriction-violation? . q4adc) (error? . q4a52) (condition-who . q4ab2) (condition-predicate . q5045) (condition-message . q4a13) (condition-irritants . q4a97) (condition-accessor . q5044) (condition . q5043) (assertion-violation? . q4a7c) (condition? . q5042) (utf32->string . q5041) (utf16->string . q5040) (utf8->string . q503f) (uint-list->bytevector . q503e) (u8-list->bytevector . q503d) (string->utf8 . q503c) (string->utf32 . q503b) (string->utf16 . q503a) (sint-list->bytevector . q5039) (native-endianness . q5038) (bytevector? . q5037) (bytevector=? . q5036) (bytevector-uint-set! . q5035) (bytevector-uint-ref . q5034) (bytevector-u8-set! . q5033) (bytevector-u8-ref . q5032) (bytevector-u64-set! . q5031) (bytevector-u64-ref . q5030) (bytevector-u64-native-set! . q502f) (bytevector-u64-native-ref . q502e) (bytevector-u32-set! . q502d) (bytevector-u32-ref . q502c) (bytevector-u32-native-set! . q502b) (bytevector-u32-native-ref . q502a) (bytevector-u16-set! . q5029) (bytevector-u16-ref . q5028) (bytevector-u16-native-set! . q5027) (bytevector-u16-native-ref . q5026) (bytevector-sint-set! . q5025) (bytevector-sint-ref . q5024) (bytevector-s8-set! . q5023) (bytevector-s8-ref . q5022) (bytevector-s64-set! . q5021) (bytevector-s64-ref . q5020) (bytevector-s64-native-set! . q501f) (bytevector-s64-native-ref . q501e) (bytevector-s32-set! . q501d) (bytevector-s32-ref . q501c) (bytevector-s32-native-set! . q501b) (bytevector-s32-native-ref . q501a) (bytevector-s16-set! . q5019) (bytevector-s16-ref . q5018) (bytevector-s16-native-set! . q5017) (bytevector-s16-native-ref . q5016) (bytevector-length . q5015) (bytevector-ieee-single-ref . q5014) (bytevector-ieee-single-set! . q5013) (bytevector-ieee-single-native-set! . q5012) (bytevector-ieee-single-native-ref . q5011) (bytevector-ieee-double-set! . q5010) (bytevector-ieee-double-ref . q500f) (bytevector-ieee-double-native-set! . q500e) (bytevector-ieee-double-native-ref . q500d) (bytevector-fill! . q500c) (bytevector-copy! . q500b) (bytevector-copy . q500a) (bytevector->uint-list . q5009) (bytevector->u8-list . q5008) (bytevector->sint-list . q5007) (no-nans-violation? . q4c65) (no-infinities-violation? . q4c50) (make-no-nans-violation . q4c63) (make-no-infinities-violation . q4c4e) (real->flonum . q5006) (flzero? . q5005) (fltruncate . q5004) (fltan . q5003) (flsqrt . q5002) (flsin . q5001) (flround . q5000) (flpositive? . q4fff) (flonum? . q4ffe) (flodd? . q4ffd) (flnumerator . q4ffc) (flnegative? . q4ffb) (flnan? . q4ffa) (flmod0 . q4ff9) (flmod . q4ff8) (flmin . q4ff7) (flmax . q4ff6) (fllog . q4ff5) (flinteger? . q4ff4) (flinfinite? . q4ff3) (flfloor . q4ff2) (flfinite? . q4ff1) (flexpt . q4ff0) (flexp . q4fef) (fleven? . q4fee) (fldiv0-and-mod0 . q4fed) (fldiv0 . q4fec) (fldiv-and-mod . q4feb) (fldiv . q4fea) (fldenominator . q4fe9) (flcos . q4fe8) (flceiling . q4fe7) (flatan . q4fe6) (flasin . q4fe5) (flacos . q4fe4) (flabs . q4fe3) (fl>? . q4fe2) (fl>=? . q4fe1) (fl=? . q4fe0) (fl<? . q4fdf) (fl<=? . q4fde) (fl/ . q4fdd) (fl- . q4fdc) (fl+ . q4fdb) (fl* . q4fda) (fixnum->flonum . q4fd9) (fxzero? . q4fd8) (fxxor . q4fd7) (fxrotate-bit-field . q4fd6) (fxreverse-bit-field . q4fd5) (fxpositive? . q4fd4) (fxodd? . q4fd3) (fxnot . q4fd2) (fxnegative? . q4fd1) (fxmod0 . q4fd0) (fxmod . q4fcf) (fxmin . q4fce) (fxmax . q4fcd) (fxlength . q4fcc) (fxior . q4fcb) (fxif . q4fca) (fxfirst-bit-set . q4fc9) (fxeven? . q4fc8) (fxdiv0-and-mod0 . q4fc7) (fxdiv0 . q4fc6) (fxdiv-and-mod . q4fc5) (fxdiv . q4fc4) (fxcopy-bit-field . q4fc3) (fxcopy-bit . q4fc2) (fxbit-set? . q4fc1) (fxbit-field . q4fc0) (fxbit-count . q4fbf) (fxarithmetic-shift-right . q4fbe) (fxarithmetic-shift-left . q4fbd) (fxarithmetic-shift . q4fbc) (fxand . q4fbb) (fx>? . q4fba) (fx>=? . q4fb9) (fx=? . q4fb8) (fx<? . q4fb7) (fx<=? . q4fb6) (fx-/carry . q4fb5) (fx- . q4fb4) (fx+/carry . q4fb3) (fx+ . q4fb2) (fx*/carry . q4fb1) (fx* . q4fb0) (greatest-fixnum . q4faf) (least-fixnum . q4fae) (fixnum-width . q4fad) (fixnum? . q4fac) (bitwise-rotate-bit-field . q4fab) (bitwise-reverse-bit-field . q4faa) (bitwise-length . q4fa9) (bitwise-if . q4fa8) (bitwise-first-bit-set . q4fa7) (bitwise-copy-bit-field . q4fa6) (bitwise-copy-bit . q4fa5) (bitwise-bit-set? . q4fa4) (bitwise-bit-field . q4fa3) (bitwise-bit-count . q4fa2) (bitwise-xor . q4fa1) (bitwise-ior . q4fa0) (bitwise-and . q4f9f) (bitwise-not . q4f9e) (bitwise-arithmetic-shift-right . q4f9d) (bitwise-arithmetic-shift-left . q4f9c) (bitwise-arithmetic-shift . q4f9b) (zero? . q4f9a) (vector? . q4f99) (vector-set! . q4f98) (vector-ref . q4f97) (vector-map . q4f96) (vector-length . q4f95) (vector-for-each . q4f94) (vector-fill! . q4f93) (vector->list . q4f92) (vector . q4f91) (values . q4f90) (truncate . q4f8f) (tan . q4f8e) (symbol? . q4f8d) (symbol=? . q4f8c) (symbol->string . q4f8b) (substring . q4f8a) (string? . q4f89) (string>? . q4f88) (string>=? . q4f87) (string=? . q4f86) (string<? . q4f85) (string<=? . q4f84) (string-ref . q4f83) (string-length . q4f82) (string-for-each . q4f81) (string-copy . q4f80) (string-append . q4f7f) (string->symbol . q4f7e) (string->number . q4f7d) (string->list . q4f7c) (string . q4f7b) (sqrt . q4f7a) (sin . q4f79) (round . q4f78) (reverse . q4f77) (real? . q4f76) (real-valued? . q4f75) (real-part . q4f74) (rationalize . q4f73) (rational? . q4f72) (rational-valued? . q4f71) (procedure? . q4f70) (positive? . q4f6f) (pair? . q4f6e) (odd? . q4f6d) (numerator . q4f6c) (number? . q4f6b) (number->string . q4f6a) (null? . q4f69) (not . q4f68) (negative? . q4f67) (nan? . q4f66) (min . q4f65) (max . q4f64) (map . q4f63) (make-vector . q4f62) (make-string . q4f61) (make-rectangular . q4f60) (make-polar . q4f5f) (magnitude . q4f5e) (log . q4f5d) (list? . q4f5c) (list-tail . q4f5b) (list-ref . q4f5a) (list->vector . q4f59) (list->string . q4f58) (list . q4f57) (length . q4f56) (lcm . q4f55) (integer? . q4f54) (integer-valued? . q4f53) (integer->char . q4f52) (infinite? . q4f51) (inexact? . q4f50) (inexact . q4f4f) (imag-part . q4f4e) (gcd . q4f4d) (for-each . q4f4c) (floor . q4f4b) (finite? . q4f4a) (expt . q4f49) (exp . q4f48) (exact? . q4f47) (exact-integer-sqrt . q4f46) (exact . q4f45) (even? . q4f44) (error . q4f43) (eqv? . q4f42) (equal? . q4f41) (eq? . q4f40) (dynamic-wind . q4f3f) (div0-and-mod0 . q4f3e) (mod0 . q4f3d) (div0 . q4f3c) (div-and-mod . q4f3b) (mod . q4f3a) (div . q4f39) (denominator . q4f38) (cos . q4f37) (cons . q4f36) (complex? . q4f35) (char? . q4f34) (char>? . q4f33) (char>=? . q4f32) (char=? . q4f31) (char<? . q4f30) (char<=? . q4f2f) (char->integer . q4f2e) (ceiling . q4f2d) (call-with-values . q4f2c) (call/cc . q4f2b) (call-with-current-continuation . q4f2a) (cddddr . q4f29) (cdddar . q4f28) (cddadr . q4f27) (cddaar . q4f26) (cdaddr . q4f25) (cdadar . q4f24) (cdaadr . q4f23) (cdaaar . q4f22) (cadddr . q4f21) (caddar . q4f20) (cadadr . q4f1f) (cadaar . q4f1e) (caaddr . q4f1d) (caadar . q4f1c) (caaadr . q4f1b) (caaaar . q4f1a) (cdddr . q4f19) (cddar . q4f18) (cdadr . q4f17) (cdaar . q4f16) (caddr . q4f15) (cadar . q4f14) (caadr . q4f13) (caaar . q4f12) (cddr . q4f11) (cdar . q4f10) (cadr . q4f0f) (caar . q4f0e) (cdr . q4f0d) (car . q4f0c) (boolean? . q4f0b) (boolean=? . q4f0a) (atan . q4f09) (assertion-violation . q4f08) (assertion-error . q2f9c) (asin . q4f07) (apply . q4f06) (append . q4f05) (angle . q4f04) (acos . q4f03) (abs . q4f02) (/ . q4f01) (* . q4f00) (- . q4eff) (+ . q4efe) (>= . q4efd) (> . q4efc) (= . q4efb) (<= . q4efa) (< . q4ef9) (library . q4ef8) (&no-nans . q4ef7) (&no-infinities . q4ef6) (&i/o-encoding . q4ef5) (&i/o-decoding . q4ef4) (&i/o-port . q4ef3) (&i/o-file-does-not-exist . q4ef2) (&i/o-file-already-exists . q4ef1) (&i/o-file-is-read-only . q4ef0) (&i/o-file-protection . q4eef) (&i/o-filename . q4eee) (&i/o-invalid-position . q4eed) (&i/o-write . q4eec) (&i/o-read . q4eeb) (&i/o . q4eea) (&undefined . q4ee9) (&syntax . q4ee8) (&lexical . q4ee7) (&implementation-restriction . q4ee6) (&non-continuable . q4ee5) (&who . q4ee4) (&irritants . q4ee3) (&assertion . q4ee2) (&violation . q4ee1) (&error . q4ee0) (&serious . q4edf) (&warning . q4ede) (&message . q4edd) (&condition . q4edc) (define-condition-type . q4edb) (define-enumeration . q4eda) (define-record-type . q4ed9) (parent-rtd . q4ed8) (nongenerative . q4ed7) (opaque . q4ed6) (sealed . q4ed5) (protocol . q4ed4) (parent . q4ed3) (immutable . q4ed2) (mutable . q4ed1) (fields . q4ed0) (error-handling-mode . q4ecf) (file-options . q4ece) (buffer-mode . q4ecd) (eol-style . q4ecc) (guard . q4ecb) (trace-define . q4eca) (trace-lambda . q4ec9) (unsyntax-splicing . q4ec8) (unsyntax . q4ec7) (unquote-splicing . q4ec6) (unquote . q4ec5) (_ . q4ec4) (else . q4ec3) (=> . q4ec2) (... . q4ec1) (assert . q4ec0) (endianness . q4ebf) (delay . q4ebe) (time . q4ebd) (do . q4ebc) (cond . q4ebb) (let* . q4eba) (let . q4eb9) (let*-values . q4eb8) (let-values . q4eb7) (identifier-syntax . q4eb6) (with-syntax . q4eb5) (quasisyntax . q4eb4) (quasiquote . q4eb3) (syntax-rules . q4eb2) (include . q4eb1) (define-struct . q4eb0) (record-constructor-descriptor . q4eaf) (record-type-descriptor . q4eae) (case . q4ead) (parameterize . q4eac) (unless . q4eab) (when . q4eaa) (or . q4ea9) (and . q4ea8) (if . q4ea7) (letrec* . q4ea6) (letrec . q4ea5) (type-descriptor . q4ea4) (case-lambda . q4ea3) (lambda . q4ea2) (syntax . q4ea1) (syntax-case . q4ea0) (quote . q4e9f) (foreign-call . q4e9e) (letrec-syntax . q4e9d) (let-syntax . q4e9c) (set! . q4e9b) (import . q4e9a) (begin . q4e99) (module . q4e98) (define-syntax . q4e97) (define . q4e96)) '((q4c69 core-prim . &no-nans-rcd) (q4c67 core-prim . &no-nans-rtd) (q4c54 core-prim . &no-infinities-rcd) (q4c52 core-prim . &no-infinities-rtd) (q4c3f core-prim . &i/o-encoding-rcd) (q4c3d core-prim . &i/o-encoding-rtd) (q4c24 core-prim . &i/o-decoding-rcd) (q4c22 core-prim . &i/o-decoding-rtd) (q4c0f core-prim . &i/o-port-rcd) (q4c0d core-prim . &i/o-port-rtd) (q4bf4 core-prim . &i/o-file-does-not-exist-rcd) (q4bf2 core-prim . &i/o-file-does-not-exist-rtd) (q4bdf core-prim . &i/o-file-already-exists-rcd) (q4bdd core-prim . &i/o-file-already-exists-rtd) (q4bca core-prim . &i/o-file-is-read-only-rcd) (q4bc8 core-prim . &i/o-file-is-read-only-rtd) (q4bb5 core-prim . &i/o-file-protection-rcd) (q4bb3 core-prim . &i/o-file-protection-rtd) (q4ba0 core-prim . &i/o-filename-rcd) (q4b9e core-prim . &i/o-filename-rtd) (q4b85 core-prim . &i/o-invalid-position-rcd) (q4b83 core-prim . &i/o-invalid-position-rtd) (q4b6a core-prim . &i/o-write-rcd) (q4b68 core-prim . &i/o-write-rtd) (q4b55 core-prim . &i/o-read-rcd) (q4b53 core-prim . &i/o-read-rtd) (q4b40 core-prim . &i/o-rcd) (q4b3e core-prim . &i/o-rtd) (q4b2b core-prim . &undefined-rcd) (q4b29 core-prim . &undefined-rtd) (q4b16 core-prim . &syntax-rcd) (q4b14 core-prim . &syntax-rtd) (q4af5 core-prim . &lexical-rcd) (q4af3 core-prim . &lexical-rtd) (q4ae0 core-prim . &implementation-restriction-rcd) (q4ade core-prim . &implementation-restriction-rtd) (q4acb core-prim . &non-continuable-rcd) (q4ac9 core-prim . &non-continuable-rtd) (q4ab6 core-prim . &who-rcd) (q4ab4 core-prim . &who-rtd) (q4a9b core-prim . &irritants-rcd) (q4a99 core-prim . &irritants-rtd) (q4a80 core-prim . &assertion-rcd) (q4a7e core-prim . &assertion-rtd) (q4a6b core-prim . &violation-rcd) (q4a69 core-prim . &violation-rtd) (q4a56 core-prim . &error-rcd) (q4a54 core-prim . &error-rtd) (q4a41 core-prim . &serious-rcd) (q4a3f core-prim . &serious-rtd) (q4a2c core-prim . &warning-rcd) (q4a2a core-prim . &warning-rtd) (q4a17 core-prim . &message-rcd) (q4a15 core-prim . &message-rtd) (q49b8 core-prim . &condition-rcd) (q49b6 core-prim . &condition-rtd) (q2f9e core-prim . syntax-error) (q2eb9 core-prim . syntax-dispatch) (q5168 core-prim . pretty-print) (q5167 core-prim . eval-core) (q5166 core-prim . set-symbol-value!) (q5165 core-prim . symbol-value) (q5164 core-prim . gensym) (q5163 core-prim . void) (q4d76 core-prim . load) (q2fae core-prim . interaction-environment) (q5162 core-prim . char-ready?) (q5161 core-prim . regexp?) (q5160 core-prim . read-line) (q515f core-prim . ungensym) (q515e core-prim . alist->eq-hash-table) (q515d core-prim . assoc-ref) (q515c core-prim . print) (q515b core-prim . format) (q515a core-prim . host-os) (q294f core-prim . library-path) (q5159 core-prim . standard-library-path) (q5158 core-prim . file-newer?) (q5157 core-prim . stat-mtime) (q5156 core-prim . write-to-file) (q5155 core-prim . file->list) (q5154 core-prim . file->string) (q5153 core-prim . digit->integer) (q5152 core-prim . call-with-string-input-port) (q5151 core-prim . call-with-string-io) (q5150 core-prim . string-split) (q514f core-prim . bytevector-for-each) (q514e core-prim . string->regexp) (q514d core-prim . rxmatch) (q514c core-prim . regexp-replace-all) (q514b core-prim . hashtable-for-each) (q514a core-prim . call-process) (q5149 core-prim . local-tz-offset) (q5148 core-prim . microseconds) (q5147 core-prim . readdir) (q5146 core-prim . set-current-directory!) (q5145 core-prim . expand-path) (q5144 core-prim . current-directory) (q5143 core-prim . %spawn) (q5142 core-prim . %waitpid) (q5141 core-prim . %ffi-supported?) (q5140 core-prim . %ffi-pointer-ref) (q513f core-prim . %ffi-pointer->string) (q513e core-prim . %ffi-call->string-or-zero) (q513d core-prim . %ffi-call->double) (q513c core-prim . %ffi-call->void*) (q513b core-prim . %ffi-call->void) (q513a core-prim . %ffi-call->int) (q5139 core-prim . %ffi-lookup) (q5138 core-prim . %ffi-open) (q5137 core-prim . %fork) (q5136 core-prim . %pipe) (q5135 core-prim . p) (q5134 core-prim . open-output-string) (q5133 core-prim . get-output-string) (q5132 core-prim . get-environment-variables) (q5131 core-prim . get-environment-variable) (q5130 core-prim . get-timeofday) (q512f core-prim . get-command-line) (q512e core-prim . sys-display) (q512d core-prim . condition-variable-notify-all!) (q512c core-prim . condition-variable-notify!) (q512b core-prim . condition-variable-wait!) (q512a core-prim . make-condition-variable) (q5129 core-prim . mosh-executable-path) (q5128 core-prim . make-file-options) (q5127 core-prim . source-info) (q5126 core-prim . make-compiler-instruction) (q5125 core-prim . make-instruction) (q5124 core-prim . set-source-info!) (q5123 core-prim . bignum?) (q5122 core-prim . fast-equal?) (q5121 core-prim . fasl-read) (q5120 core-prim . fasl-write) (q511f core-prim . time-usage) (q511e core-prim . os-constant) (q2782 core-prim . make-parameter) (q511d core-prim . socket-port) (q511c core-prim . socket-shutdown) (q511b core-prim . socket-close) (q511a core-prim . socket-send) (q5119 core-prim . socket-recv!) (q5118 core-prim . socket-recv) (q5117 core-prim . make-server-socket) (q5116 core-prim . make-client-socket) (q5115 core-prim . socket-accept) (q5114 core-prim . socket?) (q5113 core-prim . string-upcase) (q5112 core-prim . string-titlecase) (q5111 core-prim . string-normalize-nfkd) (q5110 core-prim . string-normalize-nfkc) (q510f core-prim . string-normalize-nfd) (q510e core-prim . string-normalize-nfc) (q510d core-prim . string-foldcase) (q510c core-prim . string-downcase) (q510b core-prim . string-ci>?) (q510a core-prim . string-ci>=?) (q5109 core-prim . string-ci=?) (q5108 core-prim . string-ci<?) (q5107 core-prim . string-ci<=?) (q5106 core-prim . char-whitespace?) (q5105 core-prim . char-upper-case?) (q5104 core-prim . char-title-case?) (q5103 core-prim . char-numeric?) (q5102 core-prim . char-lower-case?) (q5101 core-prim . char-general-category) (q5100 core-prim . char-upcase) (q50ff core-prim . char-titlecase) (q50fe core-prim . char-foldcase) (q50fd core-prim . char-downcase) (q50fc core-prim . char-ci>?) (q50fb core-prim . char-ci>=?) (q50fa core-prim . char-ci=?) (q50f9 core-prim . char-ci<?) (q50f8 core-prim . char-ci<=?) (q50f7 core-prim . char-alphabetic?) (q2ce6 core-prim . make-variable-transformer) (q2fa4 core-prim . identifier?) (q2f90 core-prim . generate-temporaries) (q2f92 core-prim . free-identifier=?) (q2fa8 core-prim . syntax->datum) (q2fa6 core-prim . datum->syntax) (q2f94 core-prim . bound-identifier=?) (q50f6 core-prim . record-type-descriptor?) (q50f5 core-prim . record-predicate) (q50f4 core-prim . record-mutator) (q50f3 core-prim . record-constructor) (q50f2 core-prim . record-accessor) (q50f1 core-prim . make-record-type-descriptor) (q50f0 core-prim . make-record-constructor-descriptor) (q50ef core-prim . record?) (q50ee core-prim . record-type-uid) (q50ed core-prim . record-type-sealed?) (q50ec core-prim . record-type-parent) (q50eb core-prim . record-type-opaque?) (q50ea core-prim . record-type-name) (q50e9 core-prim . record-type-generative?) (q50e8 core-prim . record-type-field-names) (q50e7 core-prim . record-rtd) (q50e6 core-prim . record-field-mutable?) (q50e5 core-prim . delete-file) (q50e4 core-prim . file-exists?) (q50e3 core-prim . vector-sort!) (q50e2 core-prim . vector-sort) (q50e1 core-prim . list-sort) (q50e0 core-prim . symbol-hash) (q50df core-prim . string-ci-hash) (q50de core-prim . string-hash) (q50dd core-prim . equal-hash) (q50dc core-prim . hashtable-equivalence-function) (q50db core-prim . make-hashtable) (q50da core-prim . hashtable-hash-function) (q50d9 core-prim . make-eqv-hashtable) (q50d8 core-prim . make-eq-hashtable) (q50d7 core-prim . hashtable?) (q50d6 core-prim . hashtable-update!) (q50d5 core-prim . hashtable-size) (q50d4 core-prim . hashtable-set!) (q50d3 core-prim . hashtable-ref) (q50d2 core-prim . hashtable-mutable?) (q50d1 core-prim . hashtable-keys) (q50d0 core-prim . hashtable-entries) (q50cf core-prim . hashtable-delete!) (q50ce core-prim . hashtable-copy) (q50cd core-prim . hashtable-contains?) (q50cc core-prim . hashtable-clear!) (q50cb core-prim . call-with-output-file) (q50ca core-prim . call-with-input-file) (q50c9 core-prim . write-char) (q50c8 core-prim . write) (q50c7 core-prim . with-output-to-file) (q50c6 core-prim . with-input-from-file) (q50c5 core-prim . read-char) (q50c4 core-prim . read) (q50c3 core-prim . peek-char) (q50c2 core-prim . open-output-file) (q50c1 core-prim . open-input-file) (q50c0 core-prim . newline) (q50bf core-prim . display) (q50be core-prim . close-output-port) (q50bd core-prim . close-input-port) (q50bc core-prim . eof-object?) (q50bb core-prim . eof-object) (q50ba core-prim . current-error-port) (q50b9 core-prim . current-output-port) (q50b8 core-prim . current-input-port) (q50b7 core-prim . output-port?) (q50b6 core-prim . input-port?) (q50b5 core-prim . utf-8-codec) (q50b4 core-prim . utf-16-codec) (q50b3 core-prim . transcoder-error-handling-mode) (q50b2 core-prim . transcoder-eol-style) (q50b1 core-prim . transcoder-codec) (q50b0 core-prim . transcoded-port) (q50af core-prim . textual-port?) (q50ae core-prim . string->bytevector) (q50ad core-prim . standard-output-port) (q50ac core-prim . standard-input-port) (q50ab core-prim . standard-error-port) (q50aa core-prim . set-port-position!) (q50a9 core-prim . put-u8) (q50a8 core-prim . put-string) (q50a7 core-prim . put-datum) (q50a6 core-prim . put-char) (q50a5 core-prim . put-bytevector) (q50a4 core-prim . port?) (q50a3 core-prim . port-transcoder) (q50a2 core-prim . port-position) (q50a1 core-prim . port-has-set-port-position!?) (q50a0 core-prim . port-has-port-position?) (q509f core-prim . port-eof?) (q509e core-prim . output-port-buffer-mode) (q509d core-prim . open-string-output-port) (q509c core-prim . open-string-input-port) (q509b core-prim . open-file-output-port) (q509a core-prim . open-file-input/output-port) (q5099 core-prim . open-file-input-port) (q5098 core-prim . open-bytevector-output-port) (q5097 core-prim . open-bytevector-input-port) (q5096 core-prim . native-transcoder) (q5095 core-prim . native-eol-style) (q5094 core-prim . make-transcoder) (q5093 core-prim . latin-1-codec) (q4b64 core-prim . make-i/o-write-error) (q4b4f core-prim . make-i/o-read-error) (q4c05 core-prim . make-i/o-port-error) (q4b7b core-prim . make-i/o-invalid-position-error) (q4b96 core-prim . make-i/o-filename-error) (q4baf core-prim . make-i/o-file-protection-error) (q4bc4 core-prim . make-i/o-file-is-read-only-error) (q4bee core-prim . make-i/o-file-does-not-exist-error) (q4bd9 core-prim . make-i/o-file-already-exists-error) (q4b3a core-prim . make-i/o-error) (q4c35 core-prim . make-i/o-encoding-error) (q4c1e core-prim . make-i/o-decoding-error) (q5092 core-prim . make-custom-textual-output-port) (q5091 core-prim . make-custom-textual-input/output-port) (q5090 core-prim . make-custom-textual-input-port) (q508f core-prim . make-custom-binary-output-port) (q508e core-prim . make-custom-binary-input/output-port) (q508d core-prim . make-custom-binary-input-port) (q508c core-prim . make-bytevector) (q508b core-prim . lookahead-u8) (q508a core-prim . lookahead-char) (q4b66 core-prim . i/o-write-error?) (q4b51 core-prim . i/o-read-error?) (q4c09 core-prim . i/o-port-error?) (q4b7f core-prim . i/o-invalid-position-error?) (q4b9a core-prim . i/o-filename-error?) (q4bb1 core-prim . i/o-file-protection-error?) (q4bc6 core-prim . i/o-file-is-read-only-error?) (q4bf0 core-prim . i/o-file-does-not-exist-error?) (q4bdb core-prim . i/o-file-already-exists-error?) (q4b3c core-prim . i/o-error?) (q4b81 core-prim . i/o-error-position) (q4c0b core-prim . i/o-error-port) (q4b9c core-prim . i/o-error-filename) (q4c39 core-prim . i/o-encoding-error?) (q4c3b core-prim . i/o-encoding-error-char) (q4c20 core-prim . i/o-decoding-error?) (q5089 core-prim . get-u8) (q5088 core-prim . get-string-n!) (q5087 core-prim . get-string-n) (q5086 core-prim . get-string-all) (q5085 core-prim . get-line) (q5084 core-prim . get-datum) (q5083 core-prim . get-char) (q5082 core-prim . get-bytevector-some) (q5081 core-prim . get-bytevector-n!) (q5080 core-prim . get-bytevector-n) (q507f core-prim . get-bytevector-all) (q507e core-prim . flush-output-port) (q507d core-prim . close-port) (q2f7e core-prim . scheme-report-environment) (q507c core-prim . quotient) (q2f7c core-prim . null-environment) (q507b core-prim . remainder) (q507a core-prim . modulo) (q5079 core-prim . inexact->exact) (q5078 core-prim . force) (q5077 core-prim . exact->inexact) (q5076 core-prim . make-promise) (q5075 core-prim . exit) (q4d70 core-prim . command-line) (q5074 core-prim . string-fill!) (q5073 core-prim . string-set!) (q5072 core-prim . set-cdr!) (q5071 core-prim . set-car!) (q5070 core-prim . remove) (q506f core-prim . remv) (q506e core-prim . remp) (q506d core-prim . remq) (q506c core-prim . partition) (q506b core-prim . memv) (q506a core-prim . memq) (q5069 core-prim . memp) (q5068 core-prim . member) (q5067 core-prim . exists) (q5066 core-prim . for-all) (q5065 core-prim . fold-right) (q5064 core-prim . fold-left) (q5063 core-prim . find) (q5062 core-prim . filter) (q5061 core-prim . cons*) (q5060 core-prim . assv) (q505f core-prim . assq) (q505e core-prim . assp) (q505d core-prim . assoc) (q505c core-prim . call-with-string-output-port) (q505b core-prim . call-with-port) (q505a core-prim . call-with-bytevector-output-port) (q5059 core-prim . bytevector->string) (q5058 core-prim . buffer-mode?) (q5057 core-prim . binary-port?) (q5056 core-prim . with-exception-handler) (q5055 core-prim . raise-continuable) (q5054 core-prim . raise) (q2f82 core-prim . eval) (q2f7a core-prim . environment) (q5053 core-prim . make-enumeration) (q5052 core-prim . enum-set=?) (q5051 core-prim . enum-set-universe) (q5050 core-prim . enum-set-union) (q504f core-prim . enum-set-subset?) (q504e core-prim . enum-set-projection) (q504d core-prim . enum-set-member?) (q504c core-prim . enum-set-intersection) (q504b core-prim . enum-set-indexer) (q504a core-prim . enum-set-difference) (q5049 core-prim . enum-set-constructor) (q5048 core-prim . enum-set-complement) (q5047 core-prim . enum-set->list) (q4ab0 core-prim . who-condition?) (q4a28 core-prim . warning?) (q4a67 core-prim . violation?) (q4b27 core-prim . undefined-violation?) (q4b0e core-prim . syntax-violation?) (q4b12 core-prim . syntax-violation-subform) (q4b10 core-prim . syntax-violation-form) (q2fa2 core-prim . syntax-violation) (q5046 core-prim . simple-conditions) (q4a3d core-prim . serious-condition?) (q4ac7 core-prim . non-continuable-violation?) (q4a11 core-prim . message-condition?) (q4aac core-prim . make-who-condition) (q4a26 core-prim . make-warning) (q4a65 core-prim . make-violation) (q4b25 core-prim . make-undefined-violation) (q4b08 core-prim . make-syntax-violation) (q4a3b core-prim . make-serious-condition) (q4ac5 core-prim . make-non-continuable-violation) (q4a0d core-prim . make-message-condition) (q4aef core-prim . make-lexical-violation) (q4a91 core-prim . make-irritants-condition) (q4ada core-prim . make-implementation-restriction-violation) (q4a50 core-prim . make-error) (q4a7a core-prim . make-assertion-violation) (q4af1 core-prim . lexical-violation?) (q4a95 core-prim . irritants-condition?) (q4adc core-prim . implementation-restriction-violation?) (q4a52 core-prim . error?) (q4ab2 core-prim . condition-who) (q5045 core-prim . condition-predicate) (q4a13 core-prim . condition-message) (q4a97 core-prim . condition-irritants) (q5044 core-prim . condition-accessor) (q5043 core-prim . condition) (q4a7c core-prim . assertion-violation?) (q5042 core-prim . condition?) (q5041 core-prim . utf32->string) (q5040 core-prim . utf16->string) (q503f core-prim . utf8->string) (q503e core-prim . uint-list->bytevector) (q503d core-prim . u8-list->bytevector) (q503c core-prim . string->utf8) (q503b core-prim . string->utf32) (q503a core-prim . string->utf16) (q5039 core-prim . sint-list->bytevector) (q5038 core-prim . native-endianness) (q5037 core-prim . bytevector?) (q5036 core-prim . bytevector=?) (q5035 core-prim . bytevector-uint-set!) (q5034 core-prim . bytevector-uint-ref) (q5033 core-prim . bytevector-u8-set!) (q5032 core-prim . bytevector-u8-ref) (q5031 core-prim . bytevector-u64-set!) (q5030 core-prim . bytevector-u64-ref) (q502f core-prim . bytevector-u64-native-set!) (q502e core-prim . bytevector-u64-native-ref) (q502d core-prim . bytevector-u32-set!) (q502c core-prim . bytevector-u32-ref) (q502b core-prim . bytevector-u32-native-set!) (q502a core-prim . bytevector-u32-native-ref) (q5029 core-prim . bytevector-u16-set!) (q5028 core-prim . bytevector-u16-ref) (q5027 core-prim . bytevector-u16-native-set!) (q5026 core-prim . bytevector-u16-native-ref) (q5025 core-prim . bytevector-sint-set!) (q5024 core-prim . bytevector-sint-ref) (q5023 core-prim . bytevector-s8-set!) (q5022 core-prim . bytevector-s8-ref) (q5021 core-prim . bytevector-s64-set!) (q5020 core-prim . bytevector-s64-ref) (q501f core-prim . bytevector-s64-native-set!) (q501e core-prim . bytevector-s64-native-ref) (q501d core-prim . bytevector-s32-set!) (q501c core-prim . bytevector-s32-ref) (q501b core-prim . bytevector-s32-native-set!) (q501a core-prim . bytevector-s32-native-ref) (q5019 core-prim . bytevector-s16-set!) (q5018 core-prim . bytevector-s16-ref) (q5017 core-prim . bytevector-s16-native-set!) (q5016 core-prim . bytevector-s16-native-ref) (q5015 core-prim . bytevector-length) (q5014 core-prim . bytevector-ieee-single-ref) (q5013 core-prim . bytevector-ieee-single-set!) (q5012 core-prim . bytevector-ieee-single-native-set!) (q5011 core-prim . bytevector-ieee-single-native-ref) (q5010 core-prim . bytevector-ieee-double-set!) (q500f core-prim . bytevector-ieee-double-ref) (q500e core-prim . bytevector-ieee-double-native-set!) (q500d core-prim . bytevector-ieee-double-native-ref) (q500c core-prim . bytevector-fill!) (q500b core-prim . bytevector-copy!) (q500a core-prim . bytevector-copy) (q5009 core-prim . bytevector->uint-list) (q5008 core-prim . bytevector->u8-list) (q5007 core-prim . bytevector->sint-list) (q4c65 core-prim . no-nans-violation?) (q4c50 core-prim . no-infinities-violation?) (q4c63 core-prim . make-no-nans-violation) (q4c4e core-prim . make-no-infinities-violation) (q5006 core-prim . real->flonum) (q5005 core-prim . flzero?) (q5004 core-prim . fltruncate) (q5003 core-prim . fltan) (q5002 core-prim . flsqrt) (q5001 core-prim . flsin) (q5000 core-prim . flround) (q4fff core-prim . flpositive?) (q4ffe core-prim . flonum?) (q4ffd core-prim . flodd?) (q4ffc core-prim . flnumerator) (q4ffb core-prim . flnegative?) (q4ffa core-prim . flnan?) (q4ff9 core-prim . flmod0) (q4ff8 core-prim . flmod) (q4ff7 core-prim . flmin) (q4ff6 core-prim . flmax) (q4ff5 core-prim . fllog) (q4ff4 core-prim . flinteger?) (q4ff3 core-prim . flinfinite?) (q4ff2 core-prim . flfloor) (q4ff1 core-prim . flfinite?) (q4ff0 core-prim . flexpt) (q4fef core-prim . flexp) (q4fee core-prim . fleven?) (q4fed core-prim . fldiv0-and-mod0) (q4fec core-prim . fldiv0) (q4feb core-prim . fldiv-and-mod) (q4fea core-prim . fldiv) (q4fe9 core-prim . fldenominator) (q4fe8 core-prim . flcos) (q4fe7 core-prim . flceiling) (q4fe6 core-prim . flatan) (q4fe5 core-prim . flasin) (q4fe4 core-prim . flacos) (q4fe3 core-prim . flabs) (q4fe2 core-prim . fl>?) (q4fe1 core-prim . fl>=?) (q4fe0 core-prim . fl=?) (q4fdf core-prim . fl<?) (q4fde core-prim . fl<=?) (q4fdd core-prim . fl/) (q4fdc core-prim . fl-) (q4fdb core-prim . fl+) (q4fda core-prim . fl*) (q4fd9 core-prim . fixnum->flonum) (q4fd8 core-prim . fxzero?) (q4fd7 core-prim . fxxor) (q4fd6 core-prim . fxrotate-bit-field) (q4fd5 core-prim . fxreverse-bit-field) (q4fd4 core-prim . fxpositive?) (q4fd3 core-prim . fxodd?) (q4fd2 core-prim . fxnot) (q4fd1 core-prim . fxnegative?) (q4fd0 core-prim . fxmod0) (q4fcf core-prim . fxmod) (q4fce core-prim . fxmin) (q4fcd core-prim . fxmax) (q4fcc core-prim . fxlength) (q4fcb core-prim . fxior) (q4fca core-prim . fxif) (q4fc9 core-prim . fxfirst-bit-set) (q4fc8 core-prim . fxeven?) (q4fc7 core-prim . fxdiv0-and-mod0) (q4fc6 core-prim . fxdiv0) (q4fc5 core-prim . fxdiv-and-mod) (q4fc4 core-prim . fxdiv) (q4fc3 core-prim . fxcopy-bit-field) (q4fc2 core-prim . fxcopy-bit) (q4fc1 core-prim . fxbit-set?) (q4fc0 core-prim . fxbit-field) (q4fbf core-prim . fxbit-count) (q4fbe core-prim . fxarithmetic-shift-right) (q4fbd core-prim . fxarithmetic-shift-left) (q4fbc core-prim . fxarithmetic-shift) (q4fbb core-prim . fxand) (q4fba core-prim . fx>?) (q4fb9 core-prim . fx>=?) (q4fb8 core-prim . fx=?) (q4fb7 core-prim . fx<?) (q4fb6 core-prim . fx<=?) (q4fb5 core-prim . fx-/carry) (q4fb4 core-prim . fx-) (q4fb3 core-prim . fx+/carry) (q4fb2 core-prim . fx+) (q4fb1 core-prim . fx*/carry) (q4fb0 core-prim . fx*) (q4faf core-prim . greatest-fixnum) (q4fae core-prim . least-fixnum) (q4fad core-prim . fixnum-width) (q4fac core-prim . fixnum?) (q4fab core-prim . bitwise-rotate-bit-field) (q4faa core-prim . bitwise-reverse-bit-field) (q4fa9 core-prim . bitwise-length) (q4fa8 core-prim . bitwise-if) (q4fa7 core-prim . bitwise-first-bit-set) (q4fa6 core-prim . bitwise-copy-bit-field) (q4fa5 core-prim . bitwise-copy-bit) (q4fa4 core-prim . bitwise-bit-set?) (q4fa3 core-prim . bitwise-bit-field) (q4fa2 core-prim . bitwise-bit-count) (q4fa1 core-prim . bitwise-xor) (q4fa0 core-prim . bitwise-ior) (q4f9f core-prim . bitwise-and) (q4f9e core-prim . bitwise-not) (q4f9d core-prim . bitwise-arithmetic-shift-right) (q4f9c core-prim . bitwise-arithmetic-shift-left) (q4f9b core-prim . bitwise-arithmetic-shift) (q4f9a core-prim . zero?) (q4f99 core-prim . vector?) (q4f98 core-prim . vector-set!) (q4f97 core-prim . vector-ref) (q4f96 core-prim . vector-map) (q4f95 core-prim . vector-length) (q4f94 core-prim . vector-for-each) (q4f93 core-prim . vector-fill!) (q4f92 core-prim . vector->list) (q4f91 core-prim . vector) (q4f90 core-prim . values) (q4f8f core-prim . truncate) (q4f8e core-prim . tan) (q4f8d core-prim . symbol?) (q4f8c core-prim . symbol=?) (q4f8b core-prim . symbol->string) (q4f8a core-prim . substring) (q4f89 core-prim . string?) (q4f88 core-prim . string>?) (q4f87 core-prim . string>=?) (q4f86 core-prim . string=?) (q4f85 core-prim . string<?) (q4f84 core-prim . string<=?) (q4f83 core-prim . string-ref) (q4f82 core-prim . string-length) (q4f81 core-prim . string-for-each) (q4f80 core-prim . string-copy) (q4f7f core-prim . string-append) (q4f7e core-prim . string->symbol) (q4f7d core-prim . string->number) (q4f7c core-prim . string->list) (q4f7b core-prim . string) (q4f7a core-prim . sqrt) (q4f79 core-prim . sin) (q4f78 core-prim . round) (q4f77 core-prim . reverse) (q4f76 core-prim . real?) (q4f75 core-prim . real-valued?) (q4f74 core-prim . real-part) (q4f73 core-prim . rationalize) (q4f72 core-prim . rational?) (q4f71 core-prim . rational-valued?) (q4f70 core-prim . procedure?) (q4f6f core-prim . positive?) (q4f6e core-prim . pair?) (q4f6d core-prim . odd?) (q4f6c core-prim . numerator) (q4f6b core-prim . number?) (q4f6a core-prim . number->string) (q4f69 core-prim . null?) (q4f68 core-prim . not) (q4f67 core-prim . negative?) (q4f66 core-prim . nan?) (q4f65 core-prim . min) (q4f64 core-prim . max) (q4f63 core-prim . map) (q4f62 core-prim . make-vector) (q4f61 core-prim . make-string) (q4f60 core-prim . make-rectangular) (q4f5f core-prim . make-polar) (q4f5e core-prim . magnitude) (q4f5d core-prim . log) (q4f5c core-prim . list?) (q4f5b core-prim . list-tail) (q4f5a core-prim . list-ref) (q4f59 core-prim . list->vector) (q4f58 core-prim . list->string) (q4f57 core-prim . list) (q4f56 core-prim . length) (q4f55 core-prim . lcm) (q4f54 core-prim . integer?) (q4f53 core-prim . integer-valued?) (q4f52 core-prim . integer->char) (q4f51 core-prim . infinite?) (q4f50 core-prim . inexact?) (q4f4f core-prim . inexact) (q4f4e core-prim . imag-part) (q4f4d core-prim . gcd) (q4f4c core-prim . for-each) (q4f4b core-prim . floor) (q4f4a core-prim . finite?) (q4f49 core-prim . expt) (q4f48 core-prim . exp) (q4f47 core-prim . exact?) (q4f46 core-prim . exact-integer-sqrt) (q4f45 core-prim . exact) (q4f44 core-prim . even?) (q4f43 core-prim . error) (q4f42 core-prim . eqv?) (q4f41 core-prim . equal?) (q4f40 core-prim . eq?) (q4f3f core-prim . dynamic-wind) (q4f3e core-prim . div0-and-mod0) (q4f3d core-prim . mod0) (q4f3c core-prim . div0) (q4f3b core-prim . div-and-mod) (q4f3a core-prim . mod) (q4f39 core-prim . div) (q4f38 core-prim . denominator) (q4f37 core-prim . cos) (q4f36 core-prim . cons) (q4f35 core-prim . complex?) (q4f34 core-prim . char?) (q4f33 core-prim . char>?) (q4f32 core-prim . char>=?) (q4f31 core-prim . char=?) (q4f30 core-prim . char<?) (q4f2f core-prim . char<=?) (q4f2e core-prim . char->integer) (q4f2d core-prim . ceiling) (q4f2c core-prim . call-with-values) (q4f2b core-prim . call/cc) (q4f2a core-prim . call-with-current-continuation) (q4f29 core-prim . cddddr) (q4f28 core-prim . cdddar) (q4f27 core-prim . cddadr) (q4f26 core-prim . cddaar) (q4f25 core-prim . cdaddr) (q4f24 core-prim . cdadar) (q4f23 core-prim . cdaadr) (q4f22 core-prim . cdaaar) (q4f21 core-prim . cadddr) (q4f20 core-prim . caddar) (q4f1f core-prim . cadadr) (q4f1e core-prim . cadaar) (q4f1d core-prim . caaddr) (q4f1c core-prim . caadar) (q4f1b core-prim . caaadr) (q4f1a core-prim . caaaar) (q4f19 core-prim . cdddr) (q4f18 core-prim . cddar) (q4f17 core-prim . cdadr) (q4f16 core-prim . cdaar) (q4f15 core-prim . caddr) (q4f14 core-prim . cadar) (q4f13 core-prim . caadr) (q4f12 core-prim . caaar) (q4f11 core-prim . cddr) (q4f10 core-prim . cdar) (q4f0f core-prim . cadr) (q4f0e core-prim . caar) (q4f0d core-prim . cdr) (q4f0c core-prim . car) (q4f0b core-prim . boolean?) (q4f0a core-prim . boolean=?) (q4f09 core-prim . atan) (q4f08 core-prim . assertion-violation) (q2f9c core-prim . assertion-error) (q4f07 core-prim . asin) (q4f06 core-prim . apply) (q4f05 core-prim . append) (q4f04 core-prim . angle) (q4f03 core-prim . acos) (q4f02 core-prim . abs) (q4f01 core-prim . /) (q4f00 core-prim . *) (q4eff core-prim . -) (q4efe core-prim . +) (q4efd core-prim . >=) (q4efc core-prim . >) (q4efb core-prim . =) (q4efa core-prim . <=) (q4ef9 core-prim . <) (q4ef8 core-prim . library) (q4ef7 $core-rtd &no-nans-rtd &no-nans-rcd) (q4ef6 $core-rtd &no-infinities-rtd &no-infinities-rcd) (q4ef5 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (q4ef4 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (q4ef3 $core-rtd &i/o-port-rtd &i/o-port-rcd) (q4ef2 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (q4ef1 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (q4ef0 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (q4eef $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (q4eee $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (q4eed $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (q4eec $core-rtd &i/o-write-rtd &i/o-write-rcd) (q4eeb $core-rtd &i/o-read-rtd &i/o-read-rcd) (q4eea $core-rtd &i/o-rtd &i/o-rcd) (q4ee9 $core-rtd &undefined-rtd &undefined-rcd) (q4ee8 $core-rtd &syntax-rtd &syntax-rcd) (q4ee7 $core-rtd &lexical-rtd &lexical-rcd) (q4ee6 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (q4ee5 $core-rtd &non-continuable-rtd &non-continuable-rcd) (q4ee4 $core-rtd &who-rtd &who-rcd) (q4ee3 $core-rtd &irritants-rtd &irritants-rcd) (q4ee2 $core-rtd &assertion-rtd &assertion-rcd) (q4ee1 $core-rtd &violation-rtd &violation-rcd) (q4ee0 $core-rtd &error-rtd &error-rcd) (q4edf $core-rtd &serious-rtd &serious-rcd) (q4ede $core-rtd &warning-rtd &warning-rcd) (q4edd $core-rtd &message-rtd &message-rcd) (q4edc $core-rtd &condition-rtd &condition-rcd) (q4edb macro . define-condition-type) (q4eda macro . define-enumeration) (q4ed9 macro . define-record-type) (q4ed8 macro . parent-rtd) (q4ed7 macro . nongenerative) (q4ed6 macro . opaque) (q4ed5 macro . sealed) (q4ed4 macro . protocol) (q4ed3 macro . parent) (q4ed2 macro . immutable) (q4ed1 macro . mutable) (q4ed0 macro . fields) (q4ecf macro . error-handling-mode) (q4ece macro . file-options) (q4ecd macro . buffer-mode) (q4ecc macro . eol-style) (q4ecb macro . guard) (q4eca macro . trace-define) (q4ec9 macro . trace-lambda) (q4ec8 macro . unsyntax-splicing) (q4ec7 macro . unsyntax) (q4ec6 macro . unquote-splicing) (q4ec5 macro . unquote) (q4ec4 macro . _) (q4ec3 macro . else) (q4ec2 macro . =>) (q4ec1 macro . ...) (q4ec0 macro . assert) (q4ebf macro . endianness) (q4ebe macro . delay) (q4ebd macro . time) (q4ebc macro . do) (q4ebb macro . cond) (q4eba macro . let*) (q4eb9 macro . let) (q4eb8 macro . let*-values) (q4eb7 macro . let-values) (q4eb6 macro . identifier-syntax) (q4eb5 macro . with-syntax) (q4eb4 macro . quasisyntax) (q4eb3 macro . quasiquote) (q4eb2 macro . syntax-rules) (q4eb1 macro . include) (q4eb0 macro . define-struct) (q4eaf core-macro . record-constructor-descriptor) (q4eae core-macro . record-type-descriptor) (q4ead macro . case) (q4eac macro . parameterize) (q4eab macro . unless) (q4eaa macro . when) (q4ea9 core-macro . or) (q4ea8 core-macro . and) (q4ea7 core-macro . if) (q4ea6 core-macro . letrec*) (q4ea5 core-macro . letrec) (q4ea4 core-macro . type-descriptor) (q4ea3 core-macro . case-lambda) (q4ea2 core-macro . lambda) (q4ea1 core-macro . syntax) (q4ea0 core-macro . syntax-case) (q4e9f core-macro . quote) (q4e9e core-macro . foreign-call) (q4e9d letrec-syntax) (q4e9c let-syntax) (q4e9b set!) (q4e9a import) (q4e99 begin) (q4e98 module) (q4e97 define-syntax) (q4e96 define)) values values '#f '#f '#f '#f) (q2ad1@q2970@install-library 'q5189 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . q5168) (eval-core . q5167) (set-symbol-value! . q5166) (symbol-value . q5165) (gensym . q5164) (void . q5163)) '() values values '#f '#f '#f '#f) (q2ad1@q2970@install-library 'q518a '(mosh) '() '() '() '() '((set-symbol-value! . q5166) (symbol-value . q5165) (regexp? . q5161) (read-line . q5160) (ungensym . q515f) (alist->eq-hash-table . q515e) (assoc-ref . q515d) (print . q515c) (format . q515b) (host-os . q515a) (library-path . q294f) (standard-library-path . q5159) (file-newer? . q5158) (stat-mtime . q5157) (write-to-file . q5156) (file->list . q5155) (file->string . q5154) (digit->integer . q5153) (call-with-string-input-port . q5152) (call-with-string-io . q5151) (string-split . q5150) (bytevector-for-each . q514f) (string->regexp . q514e) (rxmatch . q514d) (regexp-replace-all . q514c) (hashtable-for-each . q514b) (readdir . q5147) (set-current-directory! . q5146) (expand-path . q5145) (current-directory . q5144) (p . q5135) (get-timeofday . q5130) (get-command-line . q512f) (sys-display . q512e) (condition-variable-notify-all! . q512d) (condition-variable-notify! . q512c) (condition-variable-wait! . q512b) (make-condition-variable . q512a) (mosh-executable-path . q5129) (make-file-options . q5128) (source-info . q5127) (make-compiler-instruction . q5126) (make-instruction . q5125) (set-source-info! . q5124) (bignum? . q5123) (fast-equal? . q5122) (fasl-read . q5121) (fasl-write . q5120) (time-usage . q511f) (os-constant . q511e) (time . q4ebd) (include . q4eb1)) '() values values '#f '#f '#f '#f) (q2ad1@q2970@install-library 'q518b '(system) '() '() '() '() '((call-process . q514a) (local-tz-offset . q5149) (microseconds . q5148) (expand-path . q5145) (%spawn . q5143) (%waitpid . q5142) (%ffi-supported? . q5141) (%ffi-pointer-ref . q5140) (%ffi-pointer->string . q513f) (%ffi-call->string-or-zero . q513e) (%ffi-call->double . q513d) (%ffi-call->void* . q513c) (%ffi-call->void . q513b) (%ffi-call->int . q513a) (%ffi-lookup . q5139) (%ffi-open . q5138) (%fork . q5137) (%pipe . q5136) (open-output-string . q5134) (get-output-string . q5133) (get-environment-variables . q5132) (get-environment-variable . q5131) (make-parameter . q2782) (socket-port . q511d) (socket-shutdown . q511c) (socket-close . q511b) (socket-send . q511a) (socket-recv! . q5119) (socket-recv . q5118) (make-server-socket . q5117) (make-client-socket . q5116) (socket-accept . q5115) (socket? . q5114) (parameterize . q4eac)) '() values values '#f '#f '#f '#f))
((lambda (q4d5f@add-library-path! q4d61@parse-and-add-library-path q4d63@for-each-with-index q4d65@rpad q4d67@condition-printer q4d69@record->field-alist q4d6b@map-with-index q4d6d@repl q4d6f@trace-printer q4d71@command-line q4d73@local-library-path q4d75@load/args q4d77@load q4d79@ironscheme-build q4d7b@eval-top-level q4d7d@compile-system-libraries q4d7f@compile q4d81@compile->closure q4d83@pre-compile-r6rs-file q4d85@load-r6rs-top-level q4d87@load-r6rs-top-level-sexp) (begin (set! q4d5f@add-library-path! (lambda (q4daa@path) (q2ac1@q2950@library-path (append (q2ac1@q2950@library-path) (list q4daa@path))))) (set! q4d61@parse-and-add-library-path (lambda (q4dac@paths q4dad@message) ((lambda (q4db0@t) (if q4db0@t ((lambda (q4db2@paths) (for-each (lambda (q4db4@path) (if (file-exists? q4db4@path) (q4d5f@add-library-path! (expand-path q4db4@path)) (format (current-error-port) q4dad@message q4db4@path))) (reverse (string-split q4db2@paths '#\:)))) q4db0@t) (void))) q4dac@paths))) (set! q4d63@for-each-with-index (lambda (q4db6@proc q4db7@lst) (letrec ((q4dba@loop (lambda (q4dbc@i q4dbd@lst) (if (null? q4dbd@lst) (if '#f '#f (void)) (begin (q4db6@proc q4dbc@i (car q4dbd@lst)) (q4dba@loop (+ q4dbc@i '1) (cdr q4dbd@lst))))))) (q4dba@loop '1 q4db7@lst)))) (set! q4d65@rpad (lambda (q4dc0@str q4dc1@pad q4dc2@n) ((lambda (q4dc6@rest) ((letrec ((q4dc8@loop (lambda (q4dca@rest q4dcb@ret) (if (<= q4dca@rest '0) q4dcb@ret (q4dc8@loop (- q4dca@rest '1) (string-append q4dcb@ret q4dc1@pad)))))) q4dc8@loop) q4dc6@rest (format '"~a" q4dc0@str))) (- q4dc2@n (string-length (format '"~a" q4dc0@str)))))) (set! q4d67@condition-printer (lambda (q4dce@e q4dcf@port) ((lambda (q4dd3@max-condition-len) (begin (set! q4dd3@max-condition-len (apply max (map (lambda (q4de4@c) (string-length (symbol->string (record-type-name (record-rtd q4de4@c))))) (simple-conditions q4dce@e)))) (begin (display '" Condition components:\n" q4dcf@port) (q4d63@for-each-with-index (lambda (q4dd4@i q4dd5@x) ((lambda (q4dd8@rtd q4dd9@fields-alist) (begin (format q4dcf@port '" ~d. ~a" q4dd4@i (q4d65@rpad (symbol->string (record-type-name q4dd8@rtd)) '" " q4dd3@max-condition-len)) (if (null? q4dd9@fields-alist) (newline q4dcf@port) (void)) ((letrec ((q4ddc@loop (lambda (q4dde@first q4ddf@fields-alist) (if (null? q4ddf@fields-alist) '() ((lambda (q4de2@field) (begin (if (not q4dde@first) (display (q4d65@rpad '"" '" " (+ '4 q4dd3@max-condition-len)) q4dcf@port) (void)) (display '"       " q4dcf@port) (display (car q4de2@field) q4dcf@port) (display '": " q4dcf@port) (write (cdr q4de2@field) q4dcf@port) (newline q4dcf@port) (q4ddc@loop '#f (cdr q4ddf@fields-alist)))) (car q4ddf@fields-alist)))))) q4ddc@loop) '#t q4dd9@fields-alist))) (record-rtd q4dd5@x) (q4d69@record->field-alist q4dd5@x))) (simple-conditions q4dce@e))))) '#f))) (set! q4d69@record->field-alist (lambda (q4de6@r) ((lambda (q4de9@ref) (begin (set! q4de9@ref (lambda (q4df4@rtd q4df5@i q4df6@x) ((lambda (q4dfa@val) (if (symbol? q4dfa@val) (ungensym q4dfa@val) q4dfa@val)) ((record-accessor q4df4@rtd q4df5@i) q4df6@x)))) ((letrec ((q4dea@loop (lambda (q4dec@ret q4ded@rtd) (if q4ded@rtd (q4dea@loop (append q4dec@ret (q4d6b@map-with-index (lambda (q4df0@i q4df1@field) (cons q4df1@field (q4de9@ref q4ded@rtd q4df0@i q4de6@r))) (vector->list (record-type-field-names q4ded@rtd)))) (record-type-parent q4ded@rtd)) q4dec@ret)))) q4dea@loop) '() (record-rtd q4de6@r)))) '#f))) (set! q4d6b@map-with-index (lambda (q4dfc@proc q4dfd@lst) ((letrec ((q4e00@loop (lambda (q4e02@i q4e03@lst q4e04@ret) (if (null? q4e03@lst) (reverse q4e04@ret) (q4e00@loop (+ q4e02@i '1) (cdr q4e03@lst) (cons (q4dfc@proc q4e02@i (car q4e03@lst)) q4e04@ret)))))) q4e00@loop) '0 q4dfd@lst '()))) (set! q4d6d@repl (lambda q4e08@x ((lambda (q4e0b@rec) (begin (set! q4e0b@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (q4e0e@q4e0c) (lambda () (with-exception-handler (lambda (q4e10@e) ((call/cc (lambda (q4e12@q4e0d) (q4e0e@q4e0c (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? q4e10@e) (q4d67@condition-printer q4e10@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" q4e10@e))) (q4e12@q4e0d (lambda () (raise-continuable q4e10@e)))))))))) (lambda () ((letrec ((q4e14@loop (lambda (q4e16@line q4e17@accum) ((lambda (q4e1b@parentheses-ok? q4e1d@eval-string-print) (begin (set! q4e1b@parentheses-ok? (lambda (q4e22@text) ((letrec ((q4e24@loop (lambda (q4e26@chars q4e27@p0 q4e28@p1) (if (null? q4e26@chars) (= '0 q4e27@p0 q4e28@p1) ((lambda (q4e2c@t) (if (memv q4e2c@t '(#\()) (q4e24@loop (cdr q4e26@chars) (+ q4e27@p0 '1) q4e28@p1) (if (memv q4e2c@t '(#\))) (q4e24@loop (cdr q4e26@chars) (- q4e27@p0 '1) q4e28@p1) (if (memv q4e2c@t '(#\[)) (q4e24@loop (cdr q4e26@chars) q4e27@p0 (+ q4e28@p1 '1)) (if (memv q4e2c@t '(#\])) (q4e24@loop (cdr q4e26@chars) q4e27@p0 (- q4e28@p1 '1)) (q4e24@loop (cdr q4e26@chars) q4e27@p0 q4e28@p1)))))) (car q4e26@chars)))))) q4e24@loop) (string->list q4e22@text) '0 '0))) (set! q4e1d@eval-string-print (lambda (q4e20@text) (if (not (or (string=? '"\n" q4e20@text) (= '0 (string-length q4e20@text)))) (write (q4d7b@eval-top-level (call-with-port (open-string-input-port q4e20@text) read))) (void)))) (if (eof-object? q4e16@line) (begin (q4e1d@eval-string-print q4e17@accum) (exit)) ((lambda (q4e1e@current) (if (q4e1b@parentheses-ok? q4e1e@current) (q4e1d@eval-string-print q4e1e@current) (q4e14@loop (get-line (current-input-port)) q4e1e@current))) (string-append q4e17@accum q4e16@line))))) '#f '#f)))) q4e14@loop) (get-line (current-input-port)) '""))))))) (newline) (q4e0b@rec)))) (q4e0b@rec))) '#f))) (set! q4d6f@trace-printer (q2859@q2783@make-parameter write)) (set! q4d71@command-line (q2859@q2783@make-parameter (get-command-line))) (set! q4d73@local-library-path (lambda (q4e2e@filename) (cons (expand-path '".") (q2ac1@q2950@library-path)))) (set! q4d75@load/args (lambda (q4e30@filename . q4e32@args) (begin (apply q4d85@load-r6rs-top-level q4e30@filename 'load q4e32@args) (void)))) (set! q4d77@load (lambda (q4e34@filename) (begin (apply q4d85@load-r6rs-top-level q4e34@filename 'load (q4d71@command-line)) (void)))) (set! q4d79@ironscheme-build (lambda () (q4d77@load '"ironscheme-buildscript.ss"))) (set! q4d7b@eval-top-level (lambda (q4e36@x) (q498b@q2f83@eval q4e36@x (q49a1@q2faf@interaction-environment)))) (set! q4d7d@compile-system-libraries (lambda () (q4d7b@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! q4d7f@compile (lambda (q4e38@filename) (q4d85@load-r6rs-top-level q4e38@filename 'compile))) (set! q4d81@compile->closure (lambda (q4e3a@filename) (q4d85@load-r6rs-top-level q4e3a@filename 'closure))) (set! q4d83@pre-compile-r6rs-file (lambda (q4e3c@filename) (q4d85@load-r6rs-top-level q4e3c@filename 'compile))) (set! q4d85@load-r6rs-top-level (lambda (q4e3e@filename q4e3f@how . q4e42@args) ((lambda (q4e48@q4e45 q4e49@q4e47) ((lambda (q4e4c@swap) (dynamic-wind q4e4c@swap (lambda () ((lambda (q4e4e@x*) ((lambda (q4e50@t) (if (memv q4e50@t '(closure)) (q49a0@q2fad@pre-compile-r6rs-top-level q4e4e@x*) (if (memv q4e50@t '(load)) ((lambda (q4e56@q4e53 q4e57@q4e55) ((lambda (q4e5a@swap) (dynamic-wind q4e5a@swap (lambda () ((q499f@q2fab@compile-r6rs-top-level q4e4e@x*))) q4e5a@swap)) (lambda () ((lambda (q4e5c@t) (begin (q4e56@q4e53 q4e57@q4e55) (set! q4e57@q4e55 q4e5c@t))) (q4e56@q4e53))))) q4d71@command-line (cons q4e3e@filename (car q4e42@args))) (if (memv q4e50@t '(compile)) (begin (q499f@q2fab@compile-r6rs-top-level q4e4e@x*) (q2ac5@q2958@serialize-all q2854@q2779@serialize-library q28ae@q2867@compile-core-expr)) (if '#f '#f (void)))))) q4e3f@how)) (with-input-from-file q4e3e@filename (lambda () ((letrec ((q4e5e@f (lambda () ((lambda (q4e60@x) (if (eof-object? q4e60@x) '() (cons q4e60@x (q4e5e@f)))) (q284c@q2769@read-annotated))))) q4e5e@f)))))) q4e4c@swap)) (lambda () ((lambda (q4e62@t) (begin (q4e48@q4e45 q4e49@q4e47) (set! q4e49@q4e47 q4e62@t))) (q4e48@q4e45))))) q2ac1@q2950@library-path (q4d73@local-library-path q4e3e@filename)))) (set! q4d87@load-r6rs-top-level-sexp (lambda (q4e64@import-spec q4e65@thunk) ((lambda (q4e6c@q4e69 q4e6d@q4e6b) ((lambda (q4e70@swap) (dynamic-wind q4e70@swap (lambda () ((lambda (q4e76@q4e73 q4e77@q4e75) ((lambda (q4e7a@swap) (dynamic-wind q4e7a@swap (lambda () ((q499f@q2fab@compile-r6rs-top-level (list (cons 'import q4e64@import-spec) (list q4e65@thunk))))) q4e7a@swap)) (lambda () ((lambda (q4e7c@t) (begin (q4e76@q4e73 q4e77@q4e75) (set! q4e77@q4e75 q4e7c@t))) (q4e76@q4e73))))) q4d71@command-line '())) q4e70@swap)) (lambda () ((lambda (q4e7e@t) (begin (q4e6c@q4e69 q4e6d@q4e6b) (set! q4e6d@q4e6b q4e7e@t))) (q4e6c@q4e69))))) q2ac1@q2950@library-path (q4d73@local-library-path '"")))) (begin (set! q4e94@q4d87@load-r6rs-top-level-sexp q4d87@load-r6rs-top-level-sexp) (set! q4e93@q4d85@load-r6rs-top-level q4d85@load-r6rs-top-level) (set! q4e92@q4d83@pre-compile-r6rs-file q4d83@pre-compile-r6rs-file) (set! q4e91@q4d81@compile->closure q4d81@compile->closure) (set! q4e90@q4d7f@compile q4d7f@compile) (set! q4e8f@q4d7d@compile-system-libraries q4d7d@compile-system-libraries) (set! q4e8e@q4d7b@eval-top-level q4d7b@eval-top-level) (set! q4e8d@q4d79@ironscheme-build q4d79@ironscheme-build) (set! q4e8c@q4d77@load q4d77@load) (set! q4e8b@q4d75@load/args q4d75@load/args) (set! q4e8a@q4d73@local-library-path q4d73@local-library-path) (set! q4e89@q4d71@command-line q4d71@command-line) (set! q4e88@q4d6f@trace-printer q4d6f@trace-printer) (set! q4e87@q4d6d@repl q4d6d@repl) (set! q4e86@q4d6b@map-with-index q4d6b@map-with-index) (set! q4e85@q4d69@record->field-alist q4d69@record->field-alist) (set! q4e84@q4d67@condition-printer q4d67@condition-printer) (set! q4e83@q4d65@rpad q4d65@rpad) (set! q4e82@q4d63@for-each-with-index q4d63@for-each-with-index) (set! q4e81@q4d61@parse-and-add-library-path q4d61@parse-and-add-library-path) (set! q4e80@q4d5f@add-library-path! q4d5f@add-library-path!) (q2ac6@q295a@current-precompiled-library-loader q2855@q277b@load-serialized-library) (set-symbol-value! 'load q4d77@load) (set-symbol-value! 'pre-compile-r6rs-file q4d83@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs q4d7b@eval-top-level) (set-symbol-value! 'int-env-syms q4982@q2f71@interaction-environment-symbols) (set-symbol-value! 'expanded2core q28ad@q2865@expanded->core) (set-symbol-value! 'trace-printer q4d6f@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (q4d88@c) (condition (q4cbc@q4ac6@make-non-continuable-violation) (q4cb2@q4aad@make-who-condition 'raise) (q4c76@q4a0e@make-message-condition '"returned from non-continuable exception") (q4ca8@q4a92@make-irritants-condition (list q4d88@c))))) (q4d61@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (q4d61@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (q4d5f@add-library-path! (string-append (mosh-executable-path) '"/lib")) (q4d5f@add-library-path! (string-append (current-directory) '"/lib"))) (q4d5f@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (q4d8a@prefix) (q2ac2@q2952@library-extensions (q4d8a@prefix '".mosh" (q2ac2@q2952@library-extensions)))) (lambda (q4d8c@ext q4d8d@ls) (append (map (lambda (q4d90@x) (string-append q4d8c@ext q4d90@x)) q4d8d@ls) q4d8d@ls))) ((lambda (q4d92@args q4d93@port) ((lambda (q4d97@ref) (begin (set! q4d97@ref (lambda (q4da2@rtd q4da3@i q4da4@x) ((lambda (q4da8@val) (if (symbol? q4da8@val) (ungensym q4da8@val) q4da8@val)) ((record-accessor q4da2@rtd q4da3@i) q4da4@x)))) (with-exception-handler (lambda (q4d98@c) (if (condition? q4d98@c) (q4d67@condition-printer q4d98@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" q4d98@c))) (lambda () (if ((call/cc (lambda (q4d9c@q4d9a) (lambda () (with-exception-handler (lambda (q4d9e@c) ((call/cc (lambda (q4da0@q4d9b) (q4d9c@q4d9a (lambda () (if '#t '#f (q4da0@q4d9b (lambda () (raise-continuable q4d9e@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (q4d87@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? q4d92@args) (q4d6d@repl) (q4d85@load-r6rs-top-level (car q4d92@args) 'load (cdr q4d92@args)))))))) '#f)) (q4d71@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
