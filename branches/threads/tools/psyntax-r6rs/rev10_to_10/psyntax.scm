;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (e2777@read-annotated e2779@annotation-stripped e277b@annotation? e277d@annotation-source e277f@annotation-expression e2781@scm->fasl e2783@fasl-save e2785@fasl-load e2787@serialize-library e2789@load-serialized-library e278b@make-record-printer e278d@compile-core e278f@read-library-source-file e2791@make-parameter e27f9@file-options-spec) (begin (set! e2777@read-annotated read) (set! e2779@annotation-stripped (lambda (e27fa@x) (e277f@annotation-expression e27fa@x))) (set! e277b@annotation? (lambda (e27fc@x) (source-info e27fc@x))) (set! e277d@annotation-source (lambda (e27fe@x) (source-info e27fe@x))) (set! e277f@annotation-expression (lambda (e2800@x) (if (pair? e2800@x) (cons (car e2800@x) (cdr e2800@x)) (display '"line:46\n")))) (set! e2781@scm->fasl (lambda (e2802@filename) (string-append e2802@filename '".fasl"))) (set! e2783@fasl-save (lambda (e2804@filename e2805@obj) (call-with-port (open-file-output-port e2804@filename) (lambda (e2808@port) ((symbol-value 'fasl-write!) e2805@obj e2808@port))))) (set! e2785@fasl-load (lambda (e280a@filename) (call-with-port (open-file-input-port e280a@filename) (symbol-value 'fasl-read!)))) (set! e2787@serialize-library (lambda (e280c@filename e280d@obj) (begin (format '#t '"serialize-library ~a\n..." e280c@filename) ((lambda (e2810@expanded2core) ((lambda (e2812@compile) ((lambda (e2814@code) ((lambda (e2816@pivot) ((lambda (e2818@visit) ((lambda () (begin (set-car! e2816@pivot e2818@visit) ((lambda (e281a@pivot) ((lambda (e281c@invoke) ((lambda () (set-car! e281a@pivot e281c@invoke)))) (e2812@compile (e2810@expanded2core (car e281a@pivot))))) (cdr e2816@pivot)))))) (e2812@compile (e2810@expanded2core (car e2816@pivot))))) (cddddr (cddddr e2814@code)))) e280d@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (e281e@fasl-file) (begin (if (file-exists? e281e@fasl-file) (delete-file e281e@fasl-file) (void)) ((call/cc (lambda (e2822@e2820) (lambda () (with-exception-handler (lambda (e2824@c) ((call/cc (lambda (e2826@e2821) (e2822@e2820 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " e280c@filename) (if (file-exists? e281e@fasl-file) (delete-file e281e@fasl-file) (void)) '#f) (e2826@e2821 (lambda () (raise-continuable e2824@c)))))))))) (lambda () (begin (e2783@fasl-save e281e@fasl-file e280d@obj) (display '"OK\n")))))))))) (e2781@scm->fasl e280c@filename))))) (set! e2789@load-serialized-library (lambda (e2828@filename e2829@obj) ((lambda (e282c@fasl-file) (if (and (file-exists? e282c@fasl-file) ((symbol-value 'file-newer?) e282c@fasl-file e2828@filename)) ((lambda (e282e@expanded2core) ((lambda (e2830@eval-compiled-core) ((lambda (e2832@code) ((lambda (e2834@pivot) ((lambda (e2836@visit) ((lambda (e2838@visit-proc) ((lambda () (begin (set-car! e2834@pivot e2838@visit-proc) ((lambda (e283a@pivot) ((lambda (e283c@invoke) ((lambda () (begin (set-car! e283a@pivot (lambda () (e2830@eval-compiled-core e283c@invoke))) (apply e2829@obj e2832@code))))) (car e283a@pivot))) (cdr e2834@pivot)) '#t)))) (lambda () (e2830@eval-compiled-core e2836@visit)))) (car e2834@pivot))) (cddddr (cddddr e2832@code)))) (e2785@fasl-load e282c@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (e2781@scm->fasl e2828@filename)))) (set! e278b@make-record-printer (lambda (e283e@name e283f@printer) (lambda e2842@x (begin (display '"record printer") (for-each display e2842@x))))) (set! e278d@compile-core (lambda e2844@x (apply error 'comile-core '"not implementated" e2844@x))) (set! e278f@read-library-source-file (lambda (e2846@file-name) (with-input-from-file e2846@file-name e2777@read-annotated))) (set! e2791@make-parameter (lambda e2856 ((lambda (e2857) (if (= e2857 '1) (apply (lambda (e2848@x) (e2791@make-parameter e2848@x (lambda (e284a@x) e284a@x))) e2856) (if (= e2857 '2) (apply (lambda (e284c@x e284d@fender) ((lambda (e2850@x) (lambda e2854 ((lambda (e2855) (if (= e2855 '0) (apply (lambda () e2850@x) e2854) (if (= e2855 '1) (apply (lambda (e2852@v) (set! e2850@x (e284d@fender e2852@v))) e2854) (error 'apply '"invalid arg count")))) (length e2854)))) (e284d@fender e284c@x))) e2856) (error 'apply '"invalid arg count")))) (length e2856)))) (set! e27f9@file-options-spec (lambda (e2858@x) e2858@x)) (begin (set! e2868@e27f9@file-options-spec e27f9@file-options-spec) (set! e2867@e2791@make-parameter e2791@make-parameter) (set! e2866@e278f@read-library-source-file e278f@read-library-source-file) (set! e2865@e278d@compile-core e278d@compile-core) (set! e2864@e278b@make-record-printer e278b@make-record-printer) (set! e2863@e2789@load-serialized-library e2789@load-serialized-library) (set! e2862@e2787@serialize-library e2787@serialize-library) (set! e2861@e2785@fasl-load e2785@fasl-load) (set! e2860@e2783@fasl-save e2783@fasl-save) (set! e285f@e2781@scm->fasl e2781@scm->fasl) (set! e285e@e277f@annotation-expression e277f@annotation-expression) (set! e285d@e277d@annotation-source e277d@annotation-source) (set! e285c@e277b@annotation? e277b@annotation?) (set! e285b@e2779@annotation-stripped e2779@annotation-stripped) (set! e285a@e2777@read-annotated e2777@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (e286d@current-primitive-locations e286f@mutable? e2871@rewriter e2873@expanded->core e2875@compile-core-expr e2877@pretty-print e2879@compile-core-expr-to-port) (begin (set! e286d@current-primitive-locations (e2867@e2791@make-parameter (lambda (e287a@x) '#f) (lambda (e287c@p) e287c@p))) (set! e286f@mutable? (lambda (e287e@x) (or (pair? e287e@x) (vector? e287e@x) (hashtable? e287e@x)))) (set! e2871@rewriter (lambda (e2880@quote-hack?) ((lambda (e2883@f) (begin (set! e2883@f (lambda (e2884@x) (if (pair? e2884@x) ((lambda (e2886@t) (if (memv e2886@t '(quote)) (if (and e2880@quote-hack? (e286f@mutable? (cadr e2884@x))) ((lambda (e2888@g) (begin (set-symbol-value! e2888@g (cadr e2884@x)) e2888@g)) (gensym)) e2884@x) (if (memv e2886@t '(case-lambda)) (cons 'case-lambda (map (lambda (e288a@x) (cons (car e288a@x) (map e2883@f (cdr e288a@x)))) (cdr e2884@x))) (if (memv e2886@t '(lambda)) (cons* 'lambda (cadr e2884@x) (map e2883@f (cddr e2884@x))) (if (memv e2886@t '(letrec)) ((lambda (e288c@bindings e288d@body*) ((lambda (e2890@lhs* e2891@rhs*) (cons* 'letrec (map list e2890@lhs* (map e2883@f e2891@rhs*)) (map e2883@f e288d@body*))) (map car e288c@bindings) (map cadr e288c@bindings))) (cadr e2884@x) (cddr e2884@x)) (if (memv e2886@t '(letrec*)) ((lambda (e2894@bindings e2895@body*) ((lambda (e2898@lhs* e2899@rhs*) (cons* 'letrec* (map list e2898@lhs* (map e2883@f e2899@rhs*)) (map e2883@f e2895@body*))) (map car e2894@bindings) (map cadr e2894@bindings))) (cadr e2884@x) (cddr e2884@x)) (if (memv e2886@t '(library-letrec*)) ((lambda (e289c@name e289d@x) ((lambda (e28a0@bindings e28a1@body*) ((lambda (e28a4@lhs* e28a5@lhs** e28a6@rhs*) (cons* 'library-letrec* e289c@name (map list e28a4@lhs* e28a5@lhs** (map e2883@f e28a6@rhs*)) (map e2883@f e28a1@body*))) (map car e28a0@bindings) (map cadr e28a0@bindings) (map caddr e28a0@bindings))) (cadr e289d@x) (cddr e289d@x))) (cadr e2884@x) (cdr e2884@x)) (if (memv e2886@t '(begin)) (cons 'begin (map e2883@f (cdr e2884@x))) (if (memv e2886@t '(set!)) (list 'set! (cadr e2884@x) (e2883@f (caddr e2884@x))) (if (memv e2886@t '(primitive)) ((lambda (e28aa@op) ((lambda (e28ac@t) (if e28ac@t ((lambda (e28ae@loc) e28ae@loc) e28ac@t) e28aa@op)) ((e286d@current-primitive-locations) e28aa@op))) (cadr e2884@x)) (if (memv e2886@t '(define)) e2884@x (if (list? e2884@x) (map e2883@f e2884@x) (error 'rewrite '"invalid form ~s ~s" e2884@x (list? e2884@x)))))))))))))) (car e2884@x)) e2884@x))) e2883@f)) '#f))) (set! e2873@expanded->core (lambda (e28b0@x) ((e2871@rewriter '#f) e28b0@x))) (set! e2875@compile-core-expr (lambda (e28b2@x) ((e2871@rewriter '#f) e28b2@x))) (set! e2877@pretty-print write) (set! e2879@compile-core-expr-to-port (lambda (e28b4@x e28b5@p) (e2877@pretty-print ((e2871@rewriter '#f) e28b4@x) e28b5@p))) (begin (set! e28be@e2879@compile-core-expr-to-port e2879@compile-core-expr-to-port) (set! e28bd@e2877@pretty-print e2877@pretty-print) (set! e28bc@e2875@compile-core-expr e2875@compile-core-expr) (set! e28bb@e2873@expanded->core e2873@expanded->core) (set! e28ba@e2871@rewriter e2871@rewriter) (set! e28b9@e286f@mutable? e286f@mutable?) (set! e28b8@e286d@current-primitive-locations e286d@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (e290d@make-collection e290f@current-library-collection e2915@e2910 e2917@e2912 e2919@e2911 e291c@library? e291e@make-library e2920@library-id e2922@library-name e2924@library-version e2926@library-imp* e2928@library-vis* e292a@library-inv* e292c@library-subst e292e@library-env e2930@library-visit-state e2932@library-invoke-state e2934@library-visit-code e2936@library-invoke-code e2938@library-visible? e293a@library-source-file-name e293c@set-library-id! e293e@set-library-name! e2940@set-library-version! e2942@set-library-imp*! e2944@set-library-vis*! e2946@set-library-inv*! e2948@set-library-subst! e294a@set-library-env! e294c@set-library-visit-state! e294e@set-library-invoke-state! e2950@set-library-visit-code! e2952@set-library-invoke-code! e2954@set-library-visible?! e2956@set-library-source-file-name! e2958@rp e295a@find-dependencies e295c@find-library-by e295e@library-path e2960@library-extensions e2962@library-name->file-name e2964@file-locator e2966@serialize-all e2968@current-precompiled-library-loader e296a@try-load-from-file e296c@library-loader e296e@current-library-expander e2970@external-pending-libraries e2972@find-external-library e2974@find-library-by-name e2976@library-exists? e2978@find-library-by-spec/die e297a@label->binding-table e297c@install-library-record e297e@install-library e2980@imported-label->binding e2982@invoke-library e2984@visit-library e2986@invoke-library-by-spec e2988@installed-libraries e298a@library-spec) (begin (set! e290d@make-collection (lambda () ((lambda (e298b@set) ((lambda (e298e@set-cons) (begin (set! e298e@set-cons (lambda (e2993@x e2994@ls) (if (memq e2993@x e2994@ls) e2994@ls (cons e2993@x e2994@ls)))) (lambda e2991 ((lambda (e2992) (if (= e2992 '0) (apply (lambda () e298b@set) e2991) (if (= e2992 '1) (apply (lambda (e298f@x) (set! e298b@set (e298e@set-cons e298f@x e298b@set))) e2991) (error 'apply '"invalid arg count")))) (length e2991))))) '#f)) '()))) (set! e290f@current-library-collection (e2867@e2791@make-parameter (e290d@make-collection) (lambda (e2997@x) (begin (if (not (procedure? e2997@x)) (assertion-violation 'current-library-collection '"not a procedure" e2997@x) (void)) e2997@x)))) (set! e2915@e2910 (make-record-type-descriptor 'library '#f 'e2913 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! e2917@e2912 '#f) (set! e2919@e2911 (make-record-constructor-descriptor e2915@e2910 '#f e2917@e2912)) (set! e291c@library? (record-predicate e2915@e2910)) (set! e291e@make-library (record-constructor e2919@e2911)) (set! e2920@library-id (record-accessor e2915@e2910 '0)) (set! e2922@library-name (record-accessor e2915@e2910 '1)) (set! e2924@library-version (record-accessor e2915@e2910 '2)) (set! e2926@library-imp* (record-accessor e2915@e2910 '3)) (set! e2928@library-vis* (record-accessor e2915@e2910 '4)) (set! e292a@library-inv* (record-accessor e2915@e2910 '5)) (set! e292c@library-subst (record-accessor e2915@e2910 '6)) (set! e292e@library-env (record-accessor e2915@e2910 '7)) (set! e2930@library-visit-state (record-accessor e2915@e2910 '8)) (set! e2932@library-invoke-state (record-accessor e2915@e2910 '9)) (set! e2934@library-visit-code (record-accessor e2915@e2910 '10)) (set! e2936@library-invoke-code (record-accessor e2915@e2910 '11)) (set! e2938@library-visible? (record-accessor e2915@e2910 '12)) (set! e293a@library-source-file-name (record-accessor e2915@e2910 '13)) (set! e293c@set-library-id! (record-mutator e2915@e2910 '0)) (set! e293e@set-library-name! (record-mutator e2915@e2910 '1)) (set! e2940@set-library-version! (record-mutator e2915@e2910 '2)) (set! e2942@set-library-imp*! (record-mutator e2915@e2910 '3)) (set! e2944@set-library-vis*! (record-mutator e2915@e2910 '4)) (set! e2946@set-library-inv*! (record-mutator e2915@e2910 '5)) (set! e2948@set-library-subst! (record-mutator e2915@e2910 '6)) (set! e294a@set-library-env! (record-mutator e2915@e2910 '7)) (set! e294c@set-library-visit-state! (record-mutator e2915@e2910 '8)) (set! e294e@set-library-invoke-state! (record-mutator e2915@e2910 '9)) (set! e2950@set-library-visit-code! (record-mutator e2915@e2910 '10)) (set! e2952@set-library-invoke-code! (record-mutator e2915@e2910 '11)) (set! e2954@set-library-visible?! (record-mutator e2915@e2910 '12)) (set! e2956@set-library-source-file-name! (record-mutator e2915@e2910 '13)) (set! e2958@rp (e2864@e278b@make-record-printer 'library (lambda (e2999@x e299a@p e299b@wr) (begin (if (not (e291c@library? e2999@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (e2924@library-version e2999@x)) (e2922@library-name e2999@x) (append (e2922@library-name e2999@x) (list (e2924@library-version e2999@x))))) e299a@p))))) (set! e295a@find-dependencies (lambda (e299f@ls) (if (null? e299f@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! e295c@find-library-by (lambda (e29a1@pred) ((letrec ((e29a3@f (lambda (e29a5@ls) (if (null? e29a5@ls) '#f (if (e29a1@pred (car e29a5@ls)) (car e29a5@ls) (e29a3@f (cdr e29a5@ls))))))) e29a3@f) ((e290f@current-library-collection))))) (set! e295e@library-path (e2867@e2791@make-parameter '(".") (lambda (e29a7@x) (if (and (list? e29a7@x) (for-all string? e29a7@x)) (map (lambda (e29a9@x) e29a9@x) e29a7@x) (assertion-violation 'library-path '"not a list of strings" e29a7@x))))) (set! e2960@library-extensions (e2867@e2791@make-parameter '(".sls" ".ss" ".scm") (lambda (e29ab@x) (if (and (list? e29ab@x) (for-all string? e29ab@x)) (map (lambda (e29ad@x) e29ad@x) e29ab@x) (assertion-violation 'library-extensions '"not a list of strings" e29ab@x))))) (set! e2962@library-name->file-name (lambda (e29af@x) (call-with-values (lambda () (open-string-output-port)) (lambda (e29b5@e29b2 e29b6@e29b4) ((lambda (e29b9@extract e29ba@p) ((lambda (e29be@display-hex) (begin (set! e29be@display-hex (lambda (e29c7@n) (if (<= '0 e29c7@n '9) (display e29c7@n e29ba@p) (display (integer->char (+ (char->integer '#\a) (- e29c7@n '10))) e29ba@p)))) (begin ((letrec ((e29bf@f (lambda (e29c1@ls) (if (not (null? e29c1@ls)) (begin (display '"/" e29ba@p) (for-each (lambda (e29c3@c) (if (or (char<=? '#\a e29c3@c '#\z) (char<=? '#\A e29c3@c '#\Z) (char<=? '#\0 e29c3@c '#\9) (memv e29c3@c '(#\- #\. #\_ #\~))) (display e29c3@c e29ba@p) (begin (display '"%" e29ba@p) ((lambda (e29c5@n) (begin (e29be@display-hex (quotient e29c5@n '16)) (e29be@display-hex (remainder e29c5@n '16)))) (char->integer e29c3@c))))) (string->list (symbol->string (car e29c1@ls)))) (e29bf@f (cdr e29c1@ls))) (void))))) e29bf@f) e29af@x) (e29b9@extract)))) '#f)) e29b6@e29b4 e29b5@e29b2))))) (set! e2964@file-locator (e2867@e2791@make-parameter (lambda (e29c9@x) ((lambda (e29cb@str) ((letrec ((e29cd@f (lambda (e29cf@ls e29d0@exts e29d1@failed-list) (if (null? e29cf@ls) ((lambda () ((lambda (e29dd@e29d8 e29df@e29da e29e1@e29d9 e29e4@e29d7 e29e6@make-library-resolution-condition e29e8@e29d5 e29ea@e29d6 e29ec@library-resolution-condition? e29ee@condition-library e29f0@condition-files) (begin (set! e29dd@e29d8 (make-record-type-descriptor '&library-resolution e4c7e@e49c5@&condition-rtd 'e29db '#f '#f '#((immutable library) (immutable files)))) (set! e29df@e29da '#f) (set! e29e1@e29d9 (make-record-constructor-descriptor e29dd@e29d8 e4c7f@e49c7@&condition-rcd e29df@e29da)) (set! e29e4@e29d7 (record-predicate e29dd@e29d8)) (set! e29e6@make-library-resolution-condition (record-constructor e29e1@e29d9)) (set! e29e8@e29d5 (record-accessor e29dd@e29d8 '0)) (set! e29ea@e29d6 (record-accessor e29dd@e29d8 '1)) (set! e29ec@library-resolution-condition? (condition-predicate e29dd@e29d8)) (set! e29ee@condition-library (condition-accessor e29dd@e29d8 e29e8@e29d5)) (set! e29f0@condition-files (condition-accessor e29dd@e29d8 e29ea@e29d6)) (raise (condition (e4c9e@e4a5f@make-error) (e4cc0@e4abb@make-who-condition 'expander) (e4c84@e4a1c@make-message-condition '"cannot locate library in library-path") (e29e6@make-library-resolution-condition e29c9@x (reverse e29d1@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? e29d0@exts) (e29cd@f (cdr e29cf@ls) (e2960@library-extensions) e29d1@failed-list) ((lambda (e29f1@name) (if (file-exists? e29f1@name) e29f1@name (e29cd@f e29cf@ls (cdr e29d0@exts) (cons e29f1@name e29d1@failed-list)))) (string-append (car e29cf@ls) e29cb@str (car e29d0@exts)))))))) e29cd@f) (e295e@library-path) (e2960@library-extensions) '())) (e2962@library-name->file-name e29c9@x))) (lambda (e29f3@f) (if (procedure? e29f3@f) e29f3@f (assertion-violation 'file-locator '"not a procedure" e29f3@f))))) (set! e2966@serialize-all (lambda (e29f5@serialize e29f6@compile) ((lambda (e29fa@library-desc) (begin (set! e29fa@library-desc (lambda (e29fd@x) (list (e2920@library-id e29fd@x) (e2922@library-name e29fd@x)))) (for-each (lambda (e29fb@x) (if (e293a@library-source-file-name e29fb@x) (e29f5@serialize (e293a@library-source-file-name e29fb@x) (list (e2920@library-id e29fb@x) (e2922@library-name e29fb@x) (e2924@library-version e29fb@x) (map e29fa@library-desc (e2926@library-imp* e29fb@x)) (map e29fa@library-desc (e2928@library-vis* e29fb@x)) (map e29fa@library-desc (e292a@library-inv* e29fb@x)) (e292c@library-subst e29fb@x) (e292e@library-env e29fb@x) (e29f6@compile (e2934@library-visit-code e29fb@x)) (e29f6@compile (e2936@library-invoke-code e29fb@x)) (e2938@library-visible? e29fb@x))) (void))) ((e290f@current-library-collection))))) '#f))) (set! e2968@current-precompiled-library-loader (e2867@e2791@make-parameter (lambda (e29ff@filename e2a00@sk) '#f))) (set! e296a@try-load-from-file (lambda (e2a03@filename) ((e2968@current-precompiled-library-loader) e2a03@filename (lambda e2a29 ((lambda (e2a2a) (if (= e2a2a '11) (apply (lambda (e2a05@id e2a06@name e2a07@ver e2a08@imp* e2a09@vis* e2a0a@inv* e2a0b@exp-subst e2a0c@exp-env e2a0d@visit-proc e2a0e@invoke-proc e2a0f@visible?) ((letrec ((e2a1b@f (lambda (e2a1d@deps) (if (null? e2a1d@deps) (begin (e297e@install-library e2a05@id e2a06@name e2a07@ver e2a08@imp* e2a09@vis* e2a0a@inv* e2a0b@exp-subst e2a0c@exp-env e2a0d@visit-proc e2a0e@invoke-proc '#f '#f e2a0f@visible? '#f) '#t) ((lambda (e2a1f@d) ((lambda (e2a21@label e2a22@dname) ((lambda (e2a25@l) (if (and (e291c@library? e2a25@l) (eq? e2a21@label (e2920@library-id e2a25@l))) (e2a1b@f (cdr e2a1d@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" e2a06@name e2a22@dname e2a03@filename e2a25@l e2a21@label (e2920@library-id e2a25@l)) '#f))) (e2974@find-library-by-name e2a22@dname))) (car e2a1f@d) (cadr e2a1f@d))) (car e2a1d@deps)))))) e2a1b@f) (append e2a08@imp* e2a09@vis* e2a0a@inv*))) e2a29) (if (>= e2a2a '0) (apply (lambda e2a27@others '#f) e2a29) (error 'apply '"invalid arg count")))) (length e2a29)))))) (set! e296c@library-loader (e2867@e2791@make-parameter (lambda (e2a2b@x) ((lambda (e2a2d@file-name) (if (not e2a2d@file-name) (assertion-violation '#f '"cannot file library" e2a2b@x) (or (e296a@try-load-from-file e2a2d@file-name) ((e296e@current-library-expander) (e2866@e278f@read-library-source-file e2a2d@file-name) e2a2d@file-name (lambda (e2a2f@name) (if (not (fast-equal? e2a2f@name e2a2b@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (e2a35@e2a32 e2a36@e2a34) ((lambda (e2a39@e e2a3a@p) (begin (display '"expected to find library " e2a3a@p) (write e2a2b@x e2a3a@p) (display '" in file " e2a3a@p) (display e2a2d@file-name e2a3a@p) (display '", found " e2a3a@p) (write e2a2f@name e2a3a@p) (display '" instead" e2a3a@p) (e2a39@e))) e2a36@e2a34 e2a35@e2a32)))) (void))))))) ((e2964@file-locator) e2a2b@x))) (lambda (e2a3d@f) (if (procedure? e2a3d@f) e2a3d@f (assertion-violation 'library-locator '"not a procedure" e2a3d@f))))) (set! e296e@current-library-expander (e2867@e2791@make-parameter (lambda (e2a3f@x) (assertion-violation 'library-expander '"not initialized")) (lambda (e2a41@f) (if (procedure? e2a41@f) e2a41@f (assertion-violation 'library-expander '"not a procedure" e2a41@f))))) (set! e2970@external-pending-libraries (e2867@e2791@make-parameter '())) (set! e2972@find-external-library (lambda (e2a43@name) (begin (if (member e2a43@name (e2970@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" e2a43@name) (void)) ((lambda (e2a49@e2a46 e2a4a@e2a48) ((lambda (e2a4d@swap) (dynamic-wind e2a4d@swap (lambda () (begin ((e296c@library-loader) e2a43@name) (or (e295c@find-library-by (lambda (e2a4f@x) (fast-equal? (e2922@library-name e2a4f@x) e2a43@name))) (assertion-violation '#f '"handling external library did not yield the correct library" e2a43@name)))) e2a4d@swap)) (lambda () ((lambda (e2a51@t) (begin (e2a49@e2a46 e2a4a@e2a48) (set! e2a4a@e2a48 e2a51@t))) (e2a49@e2a46))))) e2970@external-pending-libraries (cons e2a43@name (e2970@external-pending-libraries)))))) (set! e2974@find-library-by-name (lambda (e2a53@name) (or (e295c@find-library-by (lambda (e2a55@x) (fast-equal? (e2922@library-name e2a55@x) e2a53@name))) (e2972@find-external-library e2a53@name)))) (set! e2976@library-exists? (lambda (e2a57@name) (and (e295c@find-library-by (lambda (e2a59@x) (fast-equal? (e2922@library-name e2a59@x) e2a57@name))) '#t))) (set! e2978@find-library-by-spec/die (lambda (e2a5b@spec) ((lambda (e2a5d@id) (or (e295c@find-library-by (lambda (e2a5f@x) (eq? e2a5d@id (e2920@library-id e2a5f@x)))) (assertion-violation '#f '"cannot find library with required spec" e2a5b@spec))) (car e2a5b@spec)))) (set! e297a@label->binding-table (make-eq-hashtable)) (set! e297c@install-library-record (lambda (e2a61@lib) (begin ((lambda (e2a63@exp-env) (for-each (lambda (e2a65@x) ((lambda (e2a67@label e2a68@binding) ((lambda (e2a6b@binding) (begin (if (hashtable-ref e297a@label->binding-table e2a67@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" e2a67@label (hashtable-ref e297a@label->binding-table e2a67@label '#f) e2a6b@binding) (exit)) (void)) (hashtable-set! e297a@label->binding-table e2a67@label e2a6b@binding))) ((lambda (e2a6d@t) (if (memv e2a6d@t '(global)) (cons 'global (cons e2a61@lib (cdr e2a68@binding))) (if (memv e2a6d@t '(global-macro)) (cons 'global-macro (cons e2a61@lib (cdr e2a68@binding))) (if (memv e2a6d@t '(global-macro!)) (cons 'global-macro! (cons e2a61@lib (cdr e2a68@binding))) e2a68@binding)))) (car e2a68@binding)))) (car e2a65@x) (cdr e2a65@x))) e2a63@exp-env)) (e292e@library-env e2a61@lib)) ((e290f@current-library-collection) e2a61@lib)))) (set! e297e@install-library (lambda (e2a6f@id e2a70@name e2a71@ver e2a72@imp* e2a73@vis* e2a74@inv* e2a75@exp-subst e2a76@exp-env e2a77@visit-proc e2a78@invoke-proc e2a79@visit-code e2a7a@invoke-code e2a7b@visible? e2a7c@source-file-name) ((lambda (e2a8b@imp-lib* e2a8c@vis-lib* e2a8d@inv-lib*) (begin (if (not (and (symbol? e2a6f@id) (list? e2a70@name) (list? e2a71@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" e2a6f@id e2a70@name e2a71@ver) (void)) (if (e2976@library-exists? e2a70@name) (assertion-violation 'install-library '"library is already installed" e2a70@name) (void)) ((lambda (e2a91@lib) (e297c@install-library-record e2a91@lib)) (e291e@make-library e2a6f@id e2a70@name e2a71@ver e2a8b@imp-lib* e2a8c@vis-lib* e2a8d@inv-lib* e2a75@exp-subst e2a76@exp-env e2a77@visit-proc e2a78@invoke-proc e2a79@visit-code e2a7a@invoke-code e2a7b@visible? e2a7c@source-file-name)))) (map e2978@find-library-by-spec/die e2a72@imp*) (map e2978@find-library-by-spec/die e2a73@vis*) (map e2978@find-library-by-spec/die e2a74@inv*)))) (set! e2980@imported-label->binding (lambda (e2a93@lab) (hashtable-ref e297a@label->binding-table e2a93@lab '#f))) (set! e2982@invoke-library (lambda (e2a95@lib) ((lambda (e2a97@invoke) (if (procedure? e2a97@invoke) (begin (e294e@set-library-invoke-state! e2a95@lib (lambda () (assertion-violation 'invoke '"circularity detected" e2a95@lib))) (for-each e2982@invoke-library (e292a@library-inv* e2a95@lib)) (e294e@set-library-invoke-state! e2a95@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" e2a95@lib))) (e2a97@invoke) (e294e@set-library-invoke-state! e2a95@lib '#t)) (void))) (e2932@library-invoke-state e2a95@lib)))) (set! e2984@visit-library (lambda (e2a99@lib) ((lambda (e2a9b@visit) (if (procedure? e2a9b@visit) (begin (e294c@set-library-visit-state! e2a99@lib (lambda () (assertion-violation 'visit '"circularity detected" e2a99@lib))) (for-each e2982@invoke-library (e2928@library-vis* e2a99@lib)) (e294c@set-library-visit-state! e2a99@lib (lambda () (assertion-violation 'invoke '"first visit did not return" e2a99@lib))) (e2a9b@visit) (e294c@set-library-visit-state! e2a99@lib '#t)) (void))) (e2930@library-visit-state e2a99@lib)))) (set! e2986@invoke-library-by-spec (lambda (e2a9d@spec) (e2982@invoke-library (e2978@find-library-by-spec/die e2a9d@spec)))) (set! e2988@installed-libraries (lambda e2aa5 ((lambda (e2aa6) (if (= e2aa6 '1) (apply (lambda (e2a9f@all?) ((letrec ((e2aa1@f (lambda (e2aa3@ls) (if (null? e2aa3@ls) '() (if (or e2a9f@all? (e2938@library-visible? (car e2aa3@ls))) (cons (car e2aa3@ls) (e2aa1@f (cdr e2aa3@ls))) (e2aa1@f (cdr e2aa3@ls))))))) e2aa1@f) ((e290f@current-library-collection)))) e2aa5) (if (= e2aa6 '0) (apply (lambda () (e2988@installed-libraries '#f)) e2aa5) (error 'apply '"invalid arg count")))) (length e2aa5)))) (set! e298a@library-spec (lambda (e2aa7@x) (begin (if (not (e291c@library? e2aa7@x)) (assertion-violation 'library-spec '"not a library" e2aa7@x) (void)) (list (e2920@library-id e2aa7@x) (e2922@library-name e2aa7@x) (e2924@library-version e2aa7@x))))) (begin (set! e2ae5@e298a@library-spec e298a@library-spec) (set! e2ae4@e2988@installed-libraries e2988@installed-libraries) (set! e2ae3@e2986@invoke-library-by-spec e2986@invoke-library-by-spec) (set! e2ae2@e2984@visit-library e2984@visit-library) (set! e2ae1@e2982@invoke-library e2982@invoke-library) (set! e2ae0@e2980@imported-label->binding e2980@imported-label->binding) (set! e2adf@e297e@install-library e297e@install-library) (set! e2ade@e297c@install-library-record e297c@install-library-record) (set! e2add@e297a@label->binding-table e297a@label->binding-table) (set! e2adc@e2978@find-library-by-spec/die e2978@find-library-by-spec/die) (set! e2adb@e2976@library-exists? e2976@library-exists?) (set! e2ada@e2974@find-library-by-name e2974@find-library-by-name) (set! e2ad9@e2972@find-external-library e2972@find-external-library) (set! e2ad8@e2970@external-pending-libraries e2970@external-pending-libraries) (set! e2ad7@e296e@current-library-expander e296e@current-library-expander) (set! e2ad6@e296c@library-loader e296c@library-loader) (set! e2ad5@e296a@try-load-from-file e296a@try-load-from-file) (set! e2ad4@e2968@current-precompiled-library-loader e2968@current-precompiled-library-loader) (set! e2ad3@e2966@serialize-all e2966@serialize-all) (set! e2ad2@e2964@file-locator e2964@file-locator) (set! e2ad1@e2962@library-name->file-name e2962@library-name->file-name) (set! e2ad0@e2960@library-extensions e2960@library-extensions) (set! e2acf@e295e@library-path e295e@library-path) (set! e2ace@e295c@find-library-by e295c@find-library-by) (set! e2acd@e295a@find-dependencies e295a@find-dependencies) (set! e2acc@e2958@rp e2958@rp) (set! e2acb@e2956@set-library-source-file-name! e2956@set-library-source-file-name!) (set! e2aca@e2954@set-library-visible?! e2954@set-library-visible?!) (set! e2ac9@e2952@set-library-invoke-code! e2952@set-library-invoke-code!) (set! e2ac8@e2950@set-library-visit-code! e2950@set-library-visit-code!) (set! e2ac7@e294e@set-library-invoke-state! e294e@set-library-invoke-state!) (set! e2ac6@e294c@set-library-visit-state! e294c@set-library-visit-state!) (set! e2ac5@e294a@set-library-env! e294a@set-library-env!) (set! e2ac4@e2948@set-library-subst! e2948@set-library-subst!) (set! e2ac3@e2946@set-library-inv*! e2946@set-library-inv*!) (set! e2ac2@e2944@set-library-vis*! e2944@set-library-vis*!) (set! e2ac1@e2942@set-library-imp*! e2942@set-library-imp*!) (set! e2ac0@e2940@set-library-version! e2940@set-library-version!) (set! e2abf@e293e@set-library-name! e293e@set-library-name!) (set! e2abe@e293c@set-library-id! e293c@set-library-id!) (set! e2abd@e293a@library-source-file-name e293a@library-source-file-name) (set! e2abc@e2938@library-visible? e2938@library-visible?) (set! e2abb@e2936@library-invoke-code e2936@library-invoke-code) (set! e2aba@e2934@library-visit-code e2934@library-visit-code) (set! e2ab9@e2932@library-invoke-state e2932@library-invoke-state) (set! e2ab8@e2930@library-visit-state e2930@library-visit-state) (set! e2ab7@e292e@library-env e292e@library-env) (set! e2ab6@e292c@library-subst e292c@library-subst) (set! e2ab5@e292a@library-inv* e292a@library-inv*) (set! e2ab4@e2928@library-vis* e2928@library-vis*) (set! e2ab3@e2926@library-imp* e2926@library-imp*) (set! e2ab2@e2924@library-version e2924@library-version) (set! e2ab1@e2922@library-name e2922@library-name) (set! e2ab0@e2920@library-id e2920@library-id) (set! e2aaf@e291e@make-library e291e@make-library) (set! e2aae@e291c@library? e291c@library?) (set! e2aad@e2919@e2911 e2919@e2911) (set! e2aac@e2917@e2912 e2917@e2912) (set! e2aab@e2915@e2910 e2915@e2910) (set! e2aaa@e290f@current-library-collection e290f@current-library-collection) (set! e2aa9@e290d@make-collection e290d@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (e2ae8@build-global-define e2b59@build-lambda e2b5b@build-case-lambda e2b5d@build-let e2b8b@build-sequence e2b8d@build-void e2b8f@build-letrec e2b91@build-letrec* e2b93@build-library-letrec* e2b95@build-receive) (begin (set! e2ae8@build-global-define (lambda (e2b96@x) (e2b8d@build-void))) (set! e2b59@build-lambda (lambda (e2b98@ae e2b99@vars e2b9a@exp) (list 'lambda e2b99@vars e2b9a@exp))) (set! e2b5b@build-case-lambda (lambda (e2b9e@ae e2b9f@vars* e2ba0@exp*) ((lambda (e2ba5@build-error e2ba7@build-pred e2ba9@build-apply e2bab@expand-case-lambda) (begin (set! e2ba5@build-error (lambda (e2bdc@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! e2ba7@build-pred (lambda (e2bc4@ae e2bc5@n e2bc6@vars) (call-with-values (lambda () ((letrec ((e2bce@f (lambda (e2bd0@vars e2bd1@count) (if (pair? e2bd0@vars) (e2bce@f (cdr e2bd0@vars) (+ e2bd1@count '1)) (if (null? e2bd0@vars) (values e2bd1@count '=) (values e2bd1@count '>=)))))) e2bce@f) e2bc6@vars '0)) (lambda (e2bd4@e2bcb e2bd5@e2bcd) ((lambda (e2bd8@pred e2bd9@count) (list (list 'primitive e2bd8@pred) e2bc5@n (list 'quote e2bd9@count))) e2bd5@e2bcd e2bd4@e2bcb))))) (set! e2ba9@build-apply (lambda (e2bbc@ae e2bbd@g e2bbe@vars e2bbf@exp) (list '(primitive apply) (e2b59@build-lambda e2bbc@ae e2bbe@vars e2bbf@exp) e2bbd@g))) (set! e2bab@expand-case-lambda (lambda (e2bac@ae e2bad@vars e2bae@exp*) ((lambda (e2bb2@g e2bb3@n) (list 'lambda e2bb2@g (e2b5d@build-let e2bac@ae (list e2bb3@n) (list (list '(primitive length) e2bb2@g)) ((letrec ((e2bb6@f (lambda (e2bb8@vars* e2bb9@exp*) (if (null? e2bb8@vars*) (e2ba5@build-error e2bac@ae) (list 'if (e2ba7@build-pred e2bac@ae e2bb3@n (car e2bb8@vars*)) (e2ba9@build-apply e2bac@ae e2bb2@g (car e2bb8@vars*) (car e2bb9@exp*)) (e2bb6@f (cdr e2bb8@vars*) (cdr e2bb9@exp*))))))) e2bb6@f) e2b9f@vars* e2bae@exp*)))) (gensym) (gensym)))) (if (= (length e2ba0@exp*) '1) (e2b59@build-lambda e2b9e@ae (car e2b9f@vars*) (car e2ba0@exp*)) (e2bab@expand-case-lambda e2b9e@ae e2b9f@vars* e2ba0@exp*)))) '#f '#f '#f '#f))) (set! e2b5d@build-let (lambda (e2bde@ae e2bdf@lhs* e2be0@rhs* e2be1@body) (cons (e2b59@build-lambda e2bde@ae e2bdf@lhs* e2be1@body) e2be0@rhs*))) (set! e2b8b@build-sequence (lambda (e2be6@ae e2be7@exps) ((letrec ((e2bea@loop (lambda (e2bec@exps) (if (null? (cdr e2bec@exps)) (car e2bec@exps) (if (equal? (car e2bec@exps) (e2b8d@build-void)) (e2bea@loop (cdr e2bec@exps)) (cons 'begin e2bec@exps)))))) e2bea@loop) e2be7@exps))) (set! e2b8d@build-void (lambda () '((primitive void)))) (set! e2b8f@build-letrec (lambda (e2bee@ae e2bef@vars e2bf0@val-exps e2bf1@body-exp) (if (null? e2bef@vars) e2bf1@body-exp (list 'letrec (map list e2bef@vars e2bf0@val-exps) e2bf1@body-exp)))) (set! e2b91@build-letrec* (lambda (e2bf6@ae e2bf7@vars e2bf8@val-exps e2bf9@body-exp) (if (null? e2bf7@vars) e2bf9@body-exp (e2b5d@build-let e2bf6@ae e2bf7@vars (map (lambda (e2bfe@x) (list 'quote '#f)) e2bf7@vars) (e2b8b@build-sequence e2bf6@ae (append (map (lambda (e2c00@lhs e2c01@rhs) (list 'set! e2c00@lhs e2c01@rhs)) e2bf7@vars e2bf8@val-exps) (list e2bf9@body-exp))))))) (set! e2b93@build-library-letrec* (lambda (e2c04@ae e2c05@name e2c06@vars e2c07@locs e2c08@val-exps e2c09@body-exp) (list 'library-letrec* e2c05@name (map list e2c06@vars e2c07@locs e2c08@val-exps) e2c09@body-exp))) (set! e2b95@build-receive (lambda (e2c10@ae e2c11@vars e2c12@producer e2c13@body*) (begin (display '"************** in ") (cons 'receive (cons e2c11@vars (cons e2c12@producer e2c13@body*)))))) (begin (set! e2c21@e2b95@build-receive e2b95@build-receive) (set! e2c20@e2b93@build-library-letrec* e2b93@build-library-letrec*) (set! e2c1f@e2b91@build-letrec* e2b91@build-letrec*) (set! e2c1e@e2b8f@build-letrec e2b8f@build-letrec) (set! e2c1d@e2b8d@build-void e2b8d@build-void) (set! e2c1c@e2b8b@build-sequence e2b8b@build-sequence) (set! e2c1b@e2b5d@build-let e2b5d@build-let) (set! e2c1a@e2b5b@build-case-lambda e2b5b@build-case-lambda) (set! e2c19@e2b59@build-lambda e2b59@build-lambda) (set! e2c18@e2ae8@build-global-define e2ae8@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (e2c30@file-options-macro e2c32@set-cons e2c34@set-union e2c39@top-mark* e2c3b@top-marked? e2c3d@gen-lexical e2c3f@gen-global e2c41@gen-label e2c43@gen-top-level-label e2c45@gen-define-label+loc e2c47@gen-define-label e2c4d@e2c48 e2c4f@e2c4a e2c51@e2c49 e2c54@rib? e2c56@make-rib e2c58@rib-sym* e2c5a@rib-mark** e2c5c@rib-label* e2c5e@rib-sealed/freq e2c60@rib-cache e2c62@set-rib-sym*! e2c64@set-rib-mark**! e2c66@set-rib-label*! e2c68@set-rib-sealed/freq! e2c6a@set-rib-cache! e2c6c@make-empty-rib e2c6e@extend-rib! e2c70@extend-rib/nc! e2c72@make-rib-map e2c74@seal-rib! e2c76@unseal-rib! e2c78@make-full-rib e2c7e@e2c79 e2c80@e2c7b e2c82@e2c7a e2c85@stx? e2c87@make-stx e2c89@stx-expr e2c8b@stx-mark* e2c8d@stx-subst* e2c8f@stx-ae* e2c91@set-stx-expr! e2c93@set-stx-mark*! e2c95@set-stx-subst*! e2c97@set-stx-ae*! e2c99@rp e2c9b@datum->stx e2c9d@gen-mark e2c9f@anti-mark e2ca1@anti-mark? e2ca3@join-wraps e2ca5@mkstx e2ca7@add-mark e2ca9@add-subst e2cab@syntax-kind? e2cad@syntax-vector->list e2caf@syntax-pair? e2cb1@syntax-vector? e2cb3@syntax-null? e2cb5@syntax-list? e2cb7@syntax-car e2cb9@syntax-cdr e2cbb@syntax->list e2cbd@id? e2cbf@id->sym e2cc1@same-marks? e2cc3@bound-id=? e2cc5@free-id=? e2cc7@valid-bound-ids? e2cc9@distinct-bound-ids? e2ccb@bound-id-member? e2ccd@self-evaluating? e2ccf@strip-annotations e2cd1@strip e2cd3@stx->datum e2cd5@same-marks*? e2cd7@id->label e2cd9@id->real-label e2cdb@label->binding e2cdd@make-binding e2cdf@binding-type e2ce1@binding-value e2ce3@raise-unbound-error e2ce5@syntax-type e2cf3@sanitize-binding e2cf5@make-variable-transformer e2cf7@variable-transformer? e2cf9@variable-transformer-procedure e2cfb@make-eval-transformer e2e4c@parse-define e2e4e@parse-define-syntax e2e50@scheme-stx-hashtable e2e52@scheme-stx e2e54@lexical-var e2e56@lexical-mutable? e2e58@set-lexical-mutable! e2e5a@add-lexical e2e5c@add-lexicals e2e5e@letrec-helper e2e60@letrec-transformer e2e62@letrec*-transformer e2e64@fluid-let-syntax-transformer e2e66@type-descriptor-transformer e2e68@record-type-descriptor-transformer e2e6a@record-constructor-descriptor-transformer e2e6c@when-macro e2e6e@unless-macro e2e70@if-transformer e2e72@and-transformer e2e74@or-transformer e2e76@case-macro e2e78@quote-transformer e2e7a@case-lambda-transformer e2e7c@lambda-transformer e2e7e@bless e2e80@with-syntax-macro e2e82@invalid-fmls-error e2e84@let-macro e2e86@let-values-macro e2e88@let*-values-macro e2e8a@trace-lambda-macro e2e8c@trace-define-macro e2e8e@trace-define-syntax-macro e2e90@trace-let/rec-syntax e2e92@trace-let-syntax-macro e2e94@trace-letrec-syntax-macro e2e96@guard-macro e2e98@define-enumeration-macro e2e9a@time-macro e2e9c@delay-macro e2e9e@assert-macro e2ea0@endianness-macro e2ea2@identifier-syntax-macro e2ea4@do-macro e2ea6@let*-macro e2ea8@or-macro e2eaa@and-macro e2eac@cond-macro e2eae@do-include e2eb0@include-macro e2eb2@include-into-macro e2eb4@syntax-rules-macro e2eb6@quasiquote-macro e2eb8@quasisyntax-macro e2eba@define-struct-macro e2ebc@define-record-type-macro e2ebe@define-condition-type-macro e2ec0@incorrect-usage-macro e2ec2@parameterize-macro e2ec4@foreign-call-transformer e2ec6@convert-pattern e2ec8@syntax-dispatch e2eca@ellipsis? e2ecc@underscore? e2ece@verify-literals e2ed0@syntax-case-transformer e2ed2@ellipsis-map e2ed4@syntax-transformer e2ed6@core-macro-transformer e2ed8@symbol-macro e2eda@macro-transformer e2edc@local-macro-transformer e2ede@do-macro-call e2ee0@chi-macro e2ee2@chi-local-macro e2ee4@chi-global-macro e2ee6@chi-expr* e2ee8@chi-application e2eea@chi-expr e2eec@chi-set! e2eee@verify-formals e2ef0@chi-lambda-clause e2ef2@chi-lambda-clause* e2ef4@chi-defun e2ef6@chi-rhs e2ef8@expand-interaction-rhs*/init* e2efa@chi-rhs* e2efc@find-bound=? e2efe@find-dups e2f00@chi-internal e2f02@parse-module e2f08@e2f03 e2f0a@e2f05 e2f0c@e2f04 e2f0f@module-interface? e2f11@make-module-interface e2f13@module-interface-first-mark e2f15@module-interface-exp-id-vec e2f17@module-interface-exp-lab-vec e2f19@set-module-interface-first-mark! e2f1b@set-module-interface-exp-id-vec! e2f1d@set-module-interface-exp-lab-vec! e2f1f@module-interface-exp-id* e2f21@chi-internal-module e2f23@chi-body* e2f25@expand-transformer e2f27@parse-exports e2f29@parse-library-name e2f2b@parse-library e2f2d@parse-import-spec* e2f2f@make-top-rib e2f31@make-collector e2f33@inv-collector e2f35@vis-collector e2f37@imp-collector e2f39@chi-library-internal e2f3b@chi-interaction-expr e2f3d@library-body-expander e2f3f@core-library-expander e2f41@parse-top-level-program e2f43@top-level-expander e2f49@e2f44 e2f4b@e2f46 e2f4d@e2f45 e2f50@env? e2f52@make-env e2f54@env-names e2f56@env-labels e2f58@env-itc e2f5a@set-env-names! e2f5c@set-env-labels! e2f5e@set-env-itc! e2f60@rp e2f66@e2f61 e2f68@e2f63 e2f6a@e2f62 e2f6d@interaction-env? e2f6f@make-interaction-env e2f71@interaction-env-rib e2f73@interaction-env-r e2f75@interaction-env-locs e2f77@set-interaction-env-rib! e2f79@set-interaction-env-r! e2f7b@set-interaction-env-locs! e2f7d@rp e2f7f@interaction-environment-symbols e2f81@environment-bindings e2f83@parse-binding e2f85@environment? e2f87@environment-symbols e2f89@environment e2f8b@null-environment e2f8d@scheme-report-environment e2f8f@expand e2f91@eval e2f93@library-expander e2f95@boot-library-expand e2f97@rev-map-append e2f99@build-exports e2f9b@make-export-subst e2f9d@make-export-env/macros e2f9f@generate-temporaries e2fa1@free-identifier=? e2fa3@bound-identifier=? e2fa5@make-source-condition e2fa7@extract-position-condition e2fa9@expression-position e2fab@assertion-error e2fad@syntax-error e2faf@syntax-violation* e2fb1@syntax-violation e2fb3@identifier? e2fb5@datum->syntax e2fb7@syntax->datum e2fb9@compile-r6rs-top-level e2fbb@pre-compile-r6rs-top-level e2fbd@interaction-environment e2fbf@top-level-context) (begin (set! e2c30@file-options-macro (lambda (e2fc0@x) ((lambda (e2fc3@valid-option?) (begin (set! e2fc3@valid-option? (lambda (e2fcc@x) (and (e2cbd@id? e2fcc@x) (memq (e2cbf@id->sym e2fcc@x) '(no-fail no-create no-truncate))))) ((lambda (e2fc4@t) ((lambda (e2fc6@ls/false) (if (and e2fc6@ls/false (apply (lambda (e2fc8@opt*) (for-all e2fc3@valid-option? e2fc8@opt*)) e2fc6@ls/false)) (apply (lambda (e2fca@opt*) (e2e7e@bless (list 'make-file-options (list 'quote e2fca@opt*)))) e2fc6@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e2fc4@t))) (e2ec8@syntax-dispatch e2fc4@t '(_ . each-any)))) e2fc0@x))) '#f))) (set! e2c32@set-cons (lambda (e2fce@x e2fcf@ls) (if (memq e2fce@x e2fcf@ls) e2fcf@ls (cons e2fce@x e2fcf@ls)))) (set! e2c34@set-union (lambda (e2fd2@ls1 e2fd3@ls2) (if (null? e2fd2@ls1) e2fd3@ls2 (if (memq (car e2fd2@ls1) e2fd3@ls2) (e2c34@set-union (cdr e2fd2@ls1) e2fd3@ls2) (cons (car e2fd2@ls1) (e2c34@set-union (cdr e2fd2@ls1) e2fd3@ls2)))))) (set! e2c39@top-mark* '(top)) (set! e2c3b@top-marked? (lambda (e2fd6@m*) (memq 'top e2fd6@m*))) (set! e2c3d@gen-lexical (lambda (e2fd8@sym) (if (symbol? e2fd8@sym) (gensym e2fd8@sym) (if (e2c85@stx? e2fd8@sym) (e2c3d@gen-lexical (e2cbf@id->sym e2fd8@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" e2fd8@sym))))) (set! e2c3f@gen-global (lambda (e2fda@x) (e2c3d@gen-lexical e2fda@x))) (set! e2c41@gen-label (lambda (e2fdc@_) (gensym))) (set! e2c43@gen-top-level-label (lambda (e2fde@id e2fdf@rib) ((lambda (e2fe3@find) (begin (set! e2fe3@find (lambda (e2fee@sym e2fef@mark* e2ff0@sym* e2ff1@mark** e2ff2@label*) (and (pair? e2ff0@sym*) (if (and (eq? e2fee@sym (car e2ff0@sym*)) (e2cc1@same-marks? e2fef@mark* (car e2ff1@mark**))) (car e2ff2@label*) (e2fe3@find e2fee@sym e2fef@mark* (cdr e2ff0@sym*) (cdr e2ff1@mark**) (cdr e2ff2@label*)))))) ((lambda (e2fe4@sym e2fe5@mark*) ((lambda (e2fe8@sym*) ((lambda (e2fea@t) (if e2fea@t ((lambda (e2fec@label) (if (e2ae0@e2980@imported-label->binding e2fec@label) (gensym) e2fec@label)) e2fea@t) (gensym))) (and (memq e2fe4@sym (e2c58@rib-sym* e2fdf@rib)) (e2fe3@find e2fe4@sym e2fe5@mark* e2fe8@sym* (e2c5a@rib-mark** e2fdf@rib) (e2c5c@rib-label* e2fdf@rib))))) (e2c58@rib-sym* e2fdf@rib))) (e2cbf@id->sym e2fde@id) (e2c8b@stx-mark* e2fde@id)))) '#f))) (set! e2c45@gen-define-label+loc (lambda (e2ff8@id e2ff9@rib) ((lambda (e2ffc@t) (if e2ffc@t ((lambda (e2ffe@env) ((lambda (e3000@label e3001@locs) (values e3000@label ((lambda (e3004@t) (if e3004@t (cdr e3004@t) ((lambda (e3006@loc) (begin (e2f7b@set-interaction-env-locs! e2ffe@env (cons (cons e3000@label e3006@loc) e3001@locs)) e3006@loc)) (e2c3d@gen-lexical e2ff8@id)))) (assq e3000@label e3001@locs)))) (e2c43@gen-top-level-label e2ff8@id e2ff9@rib) (e2f75@interaction-env-locs e2ffe@env))) e2ffc@t) (values (gensym) (e2c3d@gen-lexical e2ff8@id)))) (e2fbf@top-level-context)))) (set! e2c47@gen-define-label (lambda (e3008@id e3009@rib) (if (e2fbf@top-level-context) (e2c43@gen-top-level-label e3008@id e3009@rib) (gensym)))) (set! e2c4d@e2c48 (make-record-type-descriptor 'rib '#f 'e2c4b '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! e2c4f@e2c4a '#f) (set! e2c51@e2c49 (make-record-constructor-descriptor e2c4d@e2c48 '#f e2c4f@e2c4a)) (set! e2c54@rib? (record-predicate e2c4d@e2c48)) (set! e2c56@make-rib (record-constructor e2c51@e2c49)) (set! e2c58@rib-sym* (record-accessor e2c4d@e2c48 '0)) (set! e2c5a@rib-mark** (record-accessor e2c4d@e2c48 '1)) (set! e2c5c@rib-label* (record-accessor e2c4d@e2c48 '2)) (set! e2c5e@rib-sealed/freq (record-accessor e2c4d@e2c48 '3)) (set! e2c60@rib-cache (record-accessor e2c4d@e2c48 '4)) (set! e2c62@set-rib-sym*! (record-mutator e2c4d@e2c48 '0)) (set! e2c64@set-rib-mark**! (record-mutator e2c4d@e2c48 '1)) (set! e2c66@set-rib-label*! (record-mutator e2c4d@e2c48 '2)) (set! e2c68@set-rib-sealed/freq! (record-mutator e2c4d@e2c48 '3)) (set! e2c6a@set-rib-cache! (record-mutator e2c4d@e2c48 '4)) (set! e2c6c@make-empty-rib (lambda () (e2c56@make-rib '() '() '() '#f '#f))) (set! e2c6e@extend-rib! (lambda (e300c@rib e300d@id e300e@label) ((lambda (e3013@find) (begin (set! e3013@find (lambda (e3020@sym e3021@mark* e3022@sym* e3023@mark** e3024@label*) (and (pair? e3022@sym*) (if (and (eq? e3020@sym (car e3022@sym*)) (e2cc1@same-marks? e3021@mark* (car e3023@mark**))) e3024@label* (e3013@find e3020@sym e3021@mark* (cdr e3022@sym*) (cdr e3023@mark**) (cdr e3024@label*)))))) (begin (if (e2c5e@rib-sealed/freq e300c@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" e300c@rib) (void)) ((lambda (e3014@sym e3015@mark*) ((lambda (e3018@sym*) ((lambda (e301a@t) (if e301a@t ((lambda (e301c@p) (if (not (eq? e300e@label (car e301c@p))) (if (e2fbf@top-level-context) (set-car! e301c@p e300e@label) (e2fb1@syntax-violation '#f '"multiple definitions of identifier" e300d@id)) (void))) e301a@t) (begin (if (e2c60@rib-cache e300c@rib) (hashtable-update! (e2c60@rib-cache e300c@rib) e3014@sym (lambda (e301e@e) (cons (cons e3015@mark* e300e@label) e301e@e)) '()) (void)) (e2c62@set-rib-sym*! e300c@rib (cons e3014@sym e3018@sym*)) (e2c64@set-rib-mark**! e300c@rib (cons e3015@mark* (e2c5a@rib-mark** e300c@rib))) (e2c66@set-rib-label*! e300c@rib (cons e300e@label (e2c5c@rib-label* e300c@rib)))))) (and (memq e3014@sym (e2c58@rib-sym* e300c@rib)) (e3013@find e3014@sym e3015@mark* e3018@sym* (e2c5a@rib-mark** e300c@rib) (e2c5c@rib-label* e300c@rib))))) (e2c58@rib-sym* e300c@rib))) (e2cbf@id->sym e300d@id) (e2c8b@stx-mark* e300d@id))))) '#f))) (set! e2c70@extend-rib/nc! (lambda (e302a@rib e302b@id e302c@label) ((lambda (e3030@sym e3031@mark*) ((lambda (e3034@sym*) (begin (if (e2c60@rib-cache e302a@rib) (hashtable-update! (e2c60@rib-cache e302a@rib) e3030@sym (lambda (e3036@e) (cons (cons e3031@mark* e302c@label) e3036@e)) '()) (void)) (e2c62@set-rib-sym*! e302a@rib (cons e3030@sym e3034@sym*)) (e2c64@set-rib-mark**! e302a@rib (cons e3031@mark* (e2c5a@rib-mark** e302a@rib))) (e2c66@set-rib-label*! e302a@rib (cons e302c@label (e2c5c@rib-label* e302a@rib))))) (e2c58@rib-sym* e302a@rib))) (e2cbf@id->sym e302b@id) (e2c8b@stx-mark* e302b@id)))) (set! e2c72@make-rib-map (lambda (e3038@sym*) ((lambda (e303a@ht) ((letrec ((e303c@f (lambda (e303e@i e303f@sym*) (if (null? e303f@sym*) e303a@ht (begin (hashtable-update! e303a@ht (car e303f@sym*) (lambda (e3042@x) (cons e303e@i e3042@x)) '()) (e303c@f (+ e303e@i '1) (cdr e303f@sym*))))))) e303c@f) '0 e3038@sym*)) (make-eq-hashtable)))) (set! e2c74@seal-rib! (lambda (e3044@rib) ((lambda (e3046@sym*) (if (not (null? e3046@sym*)) (begin (e2c62@set-rib-sym*! e3044@rib (list->vector e3046@sym*)) (e2c64@set-rib-mark**! e3044@rib (list->vector (e2c5a@rib-mark** e3044@rib))) (e2c66@set-rib-label*! e3044@rib (list->vector (e2c5c@rib-label* e3044@rib))) (e2c68@set-rib-sealed/freq! e3044@rib (e2c72@make-rib-map e3046@sym*))) (void))) (e2c58@rib-sym* e3044@rib)))) (set! e2c76@unseal-rib! (lambda (e3048@rib) (if (e2c5e@rib-sealed/freq e3048@rib) (begin (e2c68@set-rib-sealed/freq! e3048@rib '#f) (e2c62@set-rib-sym*! e3048@rib (vector->list (e2c58@rib-sym* e3048@rib))) (e2c64@set-rib-mark**! e3048@rib (vector->list (e2c5a@rib-mark** e3048@rib))) (e2c66@set-rib-label*! e3048@rib (vector->list (e2c5c@rib-label* e3048@rib)))) (void)))) (set! e2c78@make-full-rib (lambda (e304a@id* e304b@label*) ((lambda (e304e@r) (begin (e2c74@seal-rib! e304e@r) e304e@r)) (e2c56@make-rib (map e2cbf@id->sym e304a@id*) (map e2c8b@stx-mark* e304a@id*) e304b@label* '#f '#f)))) (set! e2c7e@e2c79 (make-record-type-descriptor 'stx '#f 'e2c7c '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! e2c80@e2c7b '#f) (set! e2c82@e2c7a (make-record-constructor-descriptor e2c7e@e2c79 '#f e2c80@e2c7b)) (set! e2c85@stx? (record-predicate e2c7e@e2c79)) (set! e2c87@make-stx (record-constructor e2c82@e2c7a)) (set! e2c89@stx-expr (record-accessor e2c7e@e2c79 '0)) (set! e2c8b@stx-mark* (record-accessor e2c7e@e2c79 '1)) (set! e2c8d@stx-subst* (record-accessor e2c7e@e2c79 '2)) (set! e2c8f@stx-ae* (record-accessor e2c7e@e2c79 '3)) (set! e2c91@set-stx-expr! (record-mutator e2c7e@e2c79 '0)) (set! e2c93@set-stx-mark*! (record-mutator e2c7e@e2c79 '1)) (set! e2c95@set-stx-subst*! (record-mutator e2c7e@e2c79 '2)) (set! e2c97@set-stx-ae*! (record-mutator e2c7e@e2c79 '3)) (set! e2c99@rp (e2864@e278b@make-record-printer 'stx (lambda (e3050@x e3051@p e3052@wr) (begin (display '"#<syntax " e3051@p) (write (e2cd3@stx->datum e3050@x) e3051@p) ((lambda (e3056@expr) (if (e285c@e277b@annotation? e3056@expr) ((lambda (e3058@src) (if (pair? e3058@src) (begin (display '" [" e3051@p) (display (cdr e3058@src) e3051@p) (display '" of " e3051@p) (display (car e3058@src) e3051@p) (display '"]" e3051@p)) (void))) (e285d@e277d@annotation-source e3056@expr)) (void))) (e2c89@stx-expr e3050@x)) (display '">" e3051@p))))) (set! e2c9b@datum->stx (lambda (e305a@id e305b@datum) (e2c87@make-stx e305b@datum (e2c8b@stx-mark* e305a@id) (e2c8d@stx-subst* e305a@id) (e2c8f@stx-ae* e305a@id)))) (set! e2c9d@gen-mark (lambda () (string '#\m))) (set! e2c9f@anti-mark '#f) (set! e2ca1@anti-mark? not) (set! e2ca3@join-wraps (lambda (e305e@m1* e305f@s1* e3060@ae1* e3061@e) ((lambda (e3067@cancel) (begin (set! e3067@cancel (lambda (e306e@ls1 e306f@ls2) ((letrec ((e3072@f (lambda (e3074@x e3075@ls1) (if (null? e3075@ls1) (cdr e306f@ls2) (cons e3074@x (e3072@f (car e3075@ls1) (cdr e3075@ls1))))))) e3072@f) (car e306e@ls1) (cdr e306e@ls1)))) ((lambda (e3068@m2* e3069@s2* e306a@ae2*) (if (and (not (null? e305e@m1*)) (not (null? e3068@m2*)) (e2ca1@anti-mark? (car e3068@m2*))) (values (e3067@cancel e305e@m1* e3068@m2*) (e3067@cancel e305f@s1* e3069@s2*) (e3067@cancel e3060@ae1* e306a@ae2*)) (values (append e305e@m1* e3068@m2*) (append e305f@s1* e3069@s2*) (append e3060@ae1* e306a@ae2*)))) (e2c8b@stx-mark* e3061@e) (e2c8d@stx-subst* e3061@e) (e2c8f@stx-ae* e3061@e)))) '#f))) (set! e2ca5@mkstx (lambda (e3078@e e3079@m* e307a@s* e307b@ae*) (if (and (e2c85@stx? e3078@e) (not (e2c3b@top-marked? e3079@m*))) (call-with-values (lambda () (e2ca3@join-wraps e3079@m* e307a@s* e307b@ae* e3078@e)) (lambda (e3086@e3081 e3087@e3083 e3088@e3085) ((lambda (e308c@ae* e308d@s* e308e@m*) (e2c87@make-stx (e2c89@stx-expr e3078@e) e308e@m* e308d@s* e308c@ae*)) e3088@e3085 e3087@e3083 e3086@e3081))) (e2c87@make-stx e3078@e e3079@m* e307a@s* e307b@ae*)))) (set! e2ca7@add-mark (lambda (e3092@m e3093@e e3094@ae) (e2ca5@mkstx e3093@e (list e3092@m) '(shift) (list e3094@ae)))) (set! e2ca9@add-subst (lambda (e3098@subst e3099@e) (e2ca5@mkstx e3099@e '() (list e3098@subst) '()))) (set! e2cab@syntax-kind? (lambda (e309c@x e309d@p?) (if (e2c85@stx? e309c@x) (e2cab@syntax-kind? (e2c89@stx-expr e309c@x) e309d@p?) (if (e285c@e277b@annotation? e309c@x) (e2cab@syntax-kind? (e285e@e277f@annotation-expression e309c@x) e309d@p?) (e309d@p? e309c@x))))) (set! e2cad@syntax-vector->list (lambda (e30a0@x) (if (e2c85@stx? e30a0@x) ((lambda (e30a2@ls e30a3@m* e30a4@s* e30a5@ae*) (map (lambda (e30aa@x) (e2ca5@mkstx e30aa@x e30a3@m* e30a4@s* e30a5@ae*)) e30a2@ls)) (e2cad@syntax-vector->list (e2c89@stx-expr e30a0@x)) (e2c8b@stx-mark* e30a0@x) (e2c8d@stx-subst* e30a0@x) (e2c8f@stx-ae* e30a0@x)) (if (e285c@e277b@annotation? e30a0@x) (e2cad@syntax-vector->list (e285e@e277f@annotation-expression e30a0@x)) (if (vector? e30a0@x) (vector->list e30a0@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" e30a0@x)))))) (set! e2caf@syntax-pair? (lambda (e30ac@x) (e2cab@syntax-kind? e30ac@x pair?))) (set! e2cb1@syntax-vector? (lambda (e30ae@x) (e2cab@syntax-kind? e30ae@x vector?))) (set! e2cb3@syntax-null? (lambda (e30b0@x) (e2cab@syntax-kind? e30b0@x null?))) (set! e2cb5@syntax-list? (lambda (e30b2@x) (or (e2cb3@syntax-null? e30b2@x) (and (e2caf@syntax-pair? e30b2@x) (e2cb5@syntax-list? (e2cb9@syntax-cdr e30b2@x)))))) (set! e2cb7@syntax-car (lambda (e30b4@x) (if (e2c85@stx? e30b4@x) (e2ca5@mkstx (e2cb7@syntax-car (e2c89@stx-expr e30b4@x)) (e2c8b@stx-mark* e30b4@x) (e2c8d@stx-subst* e30b4@x) (e2c8f@stx-ae* e30b4@x)) (if (e285c@e277b@annotation? e30b4@x) (e2cb7@syntax-car (e285e@e277f@annotation-expression e30b4@x)) (if (pair? e30b4@x) (car e30b4@x) (assertion-violation 'syntax-car '"BUG: not a pair" e30b4@x)))))) (set! e2cb9@syntax-cdr (lambda (e30b6@x) (if (e2c85@stx? e30b6@x) (e2ca5@mkstx (e2cb9@syntax-cdr (e2c89@stx-expr e30b6@x)) (e2c8b@stx-mark* e30b6@x) (e2c8d@stx-subst* e30b6@x) (e2c8f@stx-ae* e30b6@x)) (if (e285c@e277b@annotation? e30b6@x) (e2cb9@syntax-cdr (e285e@e277f@annotation-expression e30b6@x)) (if (pair? e30b6@x) (cdr e30b6@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" e30b6@x)))))) (set! e2cbb@syntax->list (lambda (e30b8@x) (if (e2caf@syntax-pair? e30b8@x) (cons (e2cb7@syntax-car e30b8@x) (e2cbb@syntax->list (e2cb9@syntax-cdr e30b8@x))) (if (e2cb3@syntax-null? e30b8@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" e30b8@x))))) (set! e2cbd@id? (lambda (e30ba@x) (and (e2c85@stx? e30ba@x) ((lambda (e30bc@expr) (symbol? (if (e285c@e277b@annotation? e30bc@expr) (e285b@e2779@annotation-stripped e30bc@expr) e30bc@expr))) (e2c89@stx-expr e30ba@x))))) (set! e2cbf@id->sym (lambda (e30be@x) (begin (if (not (e2c85@stx? e30be@x)) (error 'id->sym '"BUG in ikarus: not an id" e30be@x) (void)) ((lambda (e30c0@expr) ((lambda (e30c2@sym) (if (symbol? e30c2@sym) e30c2@sym (error 'id->sym '"BUG in ikarus: not an id" e30be@x))) (if (e285c@e277b@annotation? e30c0@expr) (e285b@e2779@annotation-stripped e30c0@expr) e30c0@expr))) (e2c89@stx-expr e30be@x))))) (set! e2cc1@same-marks? (lambda (e30c4@x e30c5@y) (or (and (null? e30c4@x) (null? e30c5@y)) (and (pair? e30c4@x) (pair? e30c5@y) (eq? (car e30c4@x) (car e30c5@y)) (e2cc1@same-marks? (cdr e30c4@x) (cdr e30c5@y)))))) (set! e2cc3@bound-id=? (lambda (e30c8@x e30c9@y) (and (eq? (e2cbf@id->sym e30c8@x) (e2cbf@id->sym e30c9@y)) (e2cc1@same-marks? (e2c8b@stx-mark* e30c8@x) (e2c8b@stx-mark* e30c9@y))))) (set! e2cc5@free-id=? (lambda (e30cc@i e30cd@j) ((lambda (e30d0@t0 e30d1@t1) (if (or e30d0@t0 e30d1@t1) (eq? e30d0@t0 e30d1@t1) (eq? (e2cbf@id->sym e30cc@i) (e2cbf@id->sym e30cd@j)))) (e2cd9@id->real-label e30cc@i) (e2cd9@id->real-label e30cd@j)))) (set! e2cc7@valid-bound-ids? (lambda (e30d4@id*) (and (for-all e2cbd@id? e30d4@id*) (e2cc9@distinct-bound-ids? e30d4@id*)))) (set! e2cc9@distinct-bound-ids? (lambda (e30d6@id*) (or (null? e30d6@id*) (and (not (e2ccb@bound-id-member? (car e30d6@id*) (cdr e30d6@id*))) (e2cc9@distinct-bound-ids? (cdr e30d6@id*)))))) (set! e2ccb@bound-id-member? (lambda (e30d8@id e30d9@id*) (and (pair? e30d9@id*) (or (e2cc3@bound-id=? e30d8@id (car e30d9@id*)) (e2ccb@bound-id-member? e30d8@id (cdr e30d9@id*)))))) (set! e2ccd@self-evaluating? (lambda (e30dc@x) (or (number? e30dc@x) (string? e30dc@x) (char? e30dc@x) (boolean? e30dc@x) (regexp? e30dc@x) (bytevector? e30dc@x)))) (set! e2ccf@strip-annotations (lambda (e30de@x) (if (pair? e30de@x) (cons (e2ccf@strip-annotations (car e30de@x)) (e2ccf@strip-annotations (cdr e30de@x))) (if (vector? e30de@x) (vector-map e2ccf@strip-annotations e30de@x) (if (e285c@e277b@annotation? e30de@x) (e285b@e2779@annotation-stripped e30de@x) e30de@x))))) (set! e2cd1@strip (lambda (e30e0@x e30e1@m*) (if (e2c3b@top-marked? e30e1@m*) (if (or (e285c@e277b@annotation? e30e0@x) (and (pair? e30e0@x) (e285c@e277b@annotation? (car e30e0@x))) (and (vector? e30e0@x) (> (vector-length e30e0@x) '0) (e285c@e277b@annotation? (vector-ref e30e0@x '0)))) (e2ccf@strip-annotations e30e0@x) e30e0@x) ((letrec ((e30e4@f (lambda (e30e6@x) (if (e2c85@stx? e30e6@x) (e2cd1@strip (e2c89@stx-expr e30e6@x) (e2c8b@stx-mark* e30e6@x)) (if (e285c@e277b@annotation? e30e6@x) (e285b@e2779@annotation-stripped e30e6@x) (if (pair? e30e6@x) ((lambda (e30e8@a e30e9@d) (if (and (eq? e30e8@a (car e30e6@x)) (eq? e30e9@d (cdr e30e6@x))) e30e6@x (cons e30e8@a e30e9@d))) (e30e4@f (car e30e6@x)) (e30e4@f (cdr e30e6@x))) (if (vector? e30e6@x) ((lambda (e30ec@old) ((lambda (e30ee@new) (if (for-all eq? e30ec@old e30ee@new) e30e6@x (list->vector e30ee@new))) (map e30e4@f e30ec@old))) (vector->list e30e6@x)) e30e6@x))))))) e30e4@f) e30e0@x)))) (set! e2cd3@stx->datum (lambda (e30f0@x) (e2cd1@strip e30f0@x '()))) (set! e2cd5@same-marks*? (lambda (e30f2@mark* e30f3@mark** e30f4@si) (if (null? e30f4@si) '#f (if (e2cc1@same-marks? e30f2@mark* (vector-ref e30f3@mark** (car e30f4@si))) (car e30f4@si) (e2cd5@same-marks*? e30f2@mark* e30f3@mark** (cdr e30f4@si)))))) (set! e2cd7@id->label (lambda (e30f8@id) (or (e2cd9@id->real-label e30f8@id) ((lambda (e30fa@t) (if e30fa@t ((lambda (e30fc@env) ((lambda (e30fe@rib) (call-with-values (lambda () (e2c45@gen-define-label+loc e30f8@id e30fe@rib)) (lambda (e3104@e3101 e3105@e3103) ((lambda (e3108@loc_ e3109@lab) (begin (e2c6e@extend-rib! e30fe@rib e30f8@id e3109@lab) e3109@lab)) e3105@e3103 e3104@e3101)))) (e2f71@interaction-env-rib e30fc@env))) e30fa@t) '#f)) (e2fbf@top-level-context))))) (set! e2cd9@id->real-label (lambda (e310c@id) ((lambda (e310e@sym) ((letrec ((e3110@search (lambda (e3112@subst* e3113@mark*) (if (null? e3112@subst*) '#f (if (eq? (car e3112@subst*) 'shift) (e3110@search (cdr e3112@subst*) (cdr e3113@mark*)) ((lambda (e3116@rib) ((lambda (e3118@t) (if e3118@t ((lambda (e311a@ht) ((lambda (e311c@si) ((lambda (e311e@i) (if e311e@i (vector-ref (e2c5c@rib-label* e3116@rib) e311e@i) (e3110@search (cdr e3112@subst*) e3113@mark*))) (and e311c@si (e2cd5@same-marks*? e3113@mark* (e2c5a@rib-mark** e3116@rib) (reverse e311c@si))))) (hashtable-ref e311a@ht e310e@sym '#f))) e3118@t) ((letrec ((e3120@f (lambda (e3122@sym* e3123@mark** e3124@label*) (if (null? e3122@sym*) (e3110@search (cdr e3112@subst*) e3113@mark*) (if (and (eq? (car e3122@sym*) e310e@sym) (e2cc1@same-marks? (car e3123@mark**) e3113@mark*)) (car e3124@label*) (e3120@f (cdr e3122@sym*) (cdr e3123@mark**) (cdr e3124@label*))))))) e3120@f) (e2c58@rib-sym* e3116@rib) (e2c5a@rib-mark** e3116@rib) (e2c5c@rib-label* e3116@rib)))) (e2c5e@rib-sealed/freq e3116@rib))) (car e3112@subst*))))))) e3110@search) (e2c8d@stx-subst* e310c@id) (e2c8b@stx-mark* e310c@id))) (e2cbf@id->sym e310c@id)))) (set! e2cdb@label->binding (lambda (e3128@x e3129@r) ((lambda (e312c@t) (if e312c@t ((lambda (e312e@b) (if (and (pair? e312e@b) (eq? (car e312e@b) '$core-rtd)) (cons '$rtd (map e2e7e@bless (cdr e312e@b))) (if (and (pair? e312e@b) (eq? (car e312e@b) 'global-rtd)) ((lambda (e3130@lib e3131@loc) (cons '$rtd (symbol-value e3131@loc))) (cadr e312e@b) (cddr e312e@b)) e312e@b))) e312c@t) ((lambda (e3134@t) (if e3134@t (cdr e3134@t) ((lambda (e3136@t) (if e3136@t ((lambda (e3138@env) ((lambda (e313a@t) (if e313a@t ((lambda (e313c@p) (cons* 'lexical (cdr e313c@p) '#f)) e313a@t) '(displaced-lexical . #f))) (assq e3128@x (e2f75@interaction-env-locs e3138@env)))) e3136@t) '(displaced-lexical . #f))) (e2fbf@top-level-context)))) (assq e3128@x e3129@r)))) (e2ae0@e2980@imported-label->binding e3128@x)))) (set! e2cdd@make-binding cons) (set! e2cdf@binding-type car) (set! e2ce1@binding-value cdr) (set! e2ce3@raise-unbound-error (lambda (e313e@id) (e2faf@syntax-violation* '#f '"unbound identifier" e313e@id (e4cee@e4b34@make-undefined-violation)))) (set! e2ce5@syntax-type (lambda (e3140@e e3141@r) (if (e2cbd@id? e3140@e) ((lambda (e3144@id) ((lambda (e3146@label) ((lambda (e3148@b) ((lambda (e314a@type) ((lambda () (begin (if (not e3146@label) (e2ce3@raise-unbound-error e3144@id) (void)) ((lambda (e314c@t) (if (memv e314c@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values e314a@type (e2ce1@binding-value e3148@b) e3144@id) (values 'other '#f '#f))) e314a@type))))) (e2cdf@binding-type e3148@b))) (e2cdb@label->binding e3146@label e3141@r))) (e2cd7@id->label e3144@id))) e3140@e) (if (e2caf@syntax-pair? e3140@e) ((lambda (e314e@id) (if (e2cbd@id? e314e@id) ((lambda (e3150@label) ((lambda (e3152@b) ((lambda (e3154@type) ((lambda () (begin (if (not e3150@label) (e2ce3@raise-unbound-error e314e@id) (void)) ((lambda (e3156@t) (if (memv e3156@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values e3154@type (e2ce1@binding-value e3152@b) e314e@id) (values 'call '#f '#f))) e3154@type))))) (e2cdf@binding-type e3152@b))) (e2cdb@label->binding e3150@label e3141@r))) (e2cd7@id->label e314e@id)) (values 'call '#f '#f))) (e2cb7@syntax-car e3140@e)) ((lambda (e3158@d) (if (e2ccd@self-evaluating? e3158@d) (values 'constant e3158@d '#f) (values 'other '#f '#f))) (e2cd3@stx->datum e3140@e)))))) (set! e2cf3@sanitize-binding (lambda (e315a@x e315b@src) (if (procedure? e315a@x) (cons* 'local-macro e315a@x e315b@src) (if (and (pair? e315a@x) (eq? (car e315a@x) 'macro!) (procedure? (cdr e315a@x))) (cons* 'local-macro! (cdr e315a@x) e315b@src) (if (and (pair? e315a@x) (eq? (car e315a@x) '$rtd)) e315a@x (assertion-violation 'expand '"invalid transformer" e315a@x)))))) (set! e2cf5@make-variable-transformer (lambda (e315e@x) (if (procedure? e315e@x) (cons 'macro! e315e@x) (assertion-violation 'make-variable-transformer '"not a procedure" e315e@x)))) (set! e2cf7@variable-transformer? (lambda (e3160@x) (and (pair? e3160@x) (eq? (car e3160@x) 'macro!) (procedure? (cdr e3160@x))))) (set! e2cf9@variable-transformer-procedure (lambda (e3162@x) (if (e2cf7@variable-transformer? e3162@x) (cdr e3162@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" e3162@x)))) (set! e2cfb@make-eval-transformer (lambda (e3164@x) (e2cf3@sanitize-binding (eval-core (e28bb@e2873@expanded->core e3164@x)) e3164@x))) (set! e2e4c@parse-define (lambda (e3166@x) ((lambda (e3168@t) ((lambda (e316a@ls/false) (if (and e316a@ls/false (apply (lambda (e316c@id e316d@fmls e316e@b e316f@b*) (e2cbd@id? e316c@id)) e316a@ls/false)) (apply (lambda (e3174@id e3175@fmls e3176@b e3177@b*) (begin (e2eee@verify-formals e3175@fmls e3166@x) (values e3174@id (cons 'defun (cons e3175@fmls (cons e3176@b e3177@b*)))))) e316a@ls/false) ((lambda (e317c@t) ((lambda (e317e@ls/false) (if (and e317e@ls/false (apply (lambda (e3180@id e3181@val) (e2cbd@id? e3180@id)) e317e@ls/false)) (apply (lambda (e3184@id e3185@val) (values e3184@id (cons 'expr e3185@val))) e317e@ls/false) ((lambda (e3188@t) ((lambda (e318a@ls/false) (if (and e318a@ls/false (apply (lambda (e318c@id) (e2cbd@id? e318c@id)) e318a@ls/false)) (apply (lambda (e318e@id) (values e318e@id (cons 'expr (e2e7e@bless '(void))))) e318a@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3188@t))) (e2ec8@syntax-dispatch e3188@t '(_ any)))) e317c@t))) (e2ec8@syntax-dispatch e317c@t '(_ any any)))) e3168@t))) (e2ec8@syntax-dispatch e3168@t '(_ (any . any) any . each-any)))) e3166@x))) (set! e2e4e@parse-define-syntax (lambda (e3190@x) ((lambda (e3192@t) ((lambda (e3194@ls/false) (if (and e3194@ls/false (apply (lambda (e3196@id e3197@val) (e2cbd@id? e3196@id)) e3194@ls/false)) (apply (lambda (e319a@id e319b@val) (values e319a@id e319b@val)) e3194@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3192@t))) (e2ec8@syntax-dispatch e3192@t '(_ any any)))) e3190@x))) (set! e2e50@scheme-stx-hashtable (make-eq-hashtable)) (set! e2e52@scheme-stx (lambda (e319e@sym) (or (hashtable-ref e2e50@scheme-stx-hashtable e319e@sym '#f) ((lambda (e31a0@subst) ((lambda (e31a2@stx) ((lambda (e31a4@stx) ((lambda () (begin (hashtable-set! e2e50@scheme-stx-hashtable e319e@sym e31a4@stx) e31a4@stx)))) ((lambda (e31a6@t) (if e31a6@t ((lambda (e31a8@x) ((lambda (e31aa@name e31ab@label) (e2ca9@add-subst (e2c56@make-rib (list e31aa@name) (list e2c39@top-mark*) (list e31ab@label) '#f '#f) e31a2@stx)) (car e31a8@x) (cdr e31a8@x))) e31a6@t) e31a2@stx)) (assq e319e@sym e31a0@subst)))) (e2c87@make-stx e319e@sym e2c39@top-mark* '() '()))) (e2ab6@e292c@library-subst (e2ada@e2974@find-library-by-name '(psyntax system $all))))))) (set! e2e54@lexical-var car) (set! e2e56@lexical-mutable? cdr) (set! e2e58@set-lexical-mutable! set-cdr!) (set! e2e5a@add-lexical (lambda (e31ae@lab e31af@lex e31b0@r) (cons (cons* e31ae@lab 'lexical e31af@lex '#f) e31b0@r))) (set! e2e5c@add-lexicals (lambda (e31b4@lab* e31b5@lex* e31b6@r) (if (null? e31b4@lab*) e31b6@r (e2e5c@add-lexicals (cdr e31b4@lab*) (cdr e31b5@lex*) (e2e5a@add-lexical (car e31b4@lab*) (car e31b5@lex*) e31b6@r))))) (set! e2e5e@letrec-helper (lambda (e31ba@e e31bb@r e31bc@mr e31bd@build) ((lambda (e31c2@t) ((lambda (e31c4@ls/false) (if e31c4@ls/false (apply (lambda (e31c6@lhs* e31c7@rhs* e31c8@b e31c9@b*) (if (not (e2cc7@valid-bound-ids? e31c6@lhs*)) (e2e82@invalid-fmls-error e31ba@e e31c6@lhs*) ((lambda (e31ce@lex* e31cf@lab*) ((lambda (e31d2@rib e31d3@r) ((lambda (e31d6@body e31d7@rhs*) (e31bd@build '#f e31ce@lex* e31d7@rhs* e31d6@body)) (e2f00@chi-internal (e2ca9@add-subst e31d2@rib (cons e31c8@b e31c9@b*)) e31d3@r e31bc@mr) (e2ee6@chi-expr* (map (lambda (e31da@x) (e2ca9@add-subst e31d2@rib e31da@x)) e31c7@rhs*) e31d3@r e31bc@mr))) (e2c78@make-full-rib e31c6@lhs* e31cf@lab*) (e2e5c@add-lexicals e31cf@lab* e31ce@lex* e31bb@r))) (map e2c3d@gen-lexical e31c6@lhs*) (map e2c41@gen-label e31c6@lhs*)))) e31c4@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e31c2@t))) (e2ec8@syntax-dispatch e31c2@t '(_ #(each (any any)) any . each-any)))) e31ba@e))) (set! e2e60@letrec-transformer (lambda (e31dc@e e31dd@r e31de@mr) (e2e5e@letrec-helper e31dc@e e31dd@r e31de@mr e2c1e@e2b8f@build-letrec))) (set! e2e62@letrec*-transformer (lambda (e31e2@e e31e3@r e31e4@mr) (e2e5e@letrec-helper e31e2@e e31e3@r e31e4@mr e2c1f@e2b91@build-letrec*))) (set! e2e64@fluid-let-syntax-transformer (lambda (e31e8@e e31e9@r e31ea@mr) ((lambda (e31ef@lookup) (begin (set! e31ef@lookup (lambda (e3202@x) (or (e2cd7@id->label e3202@x) (e2fb1@syntax-violation '#f '"unbound identifier" e31e8@e e3202@x)))) ((lambda (e31f0@t) ((lambda (e31f2@ls/false) (if e31f2@ls/false (apply (lambda (e31f4@lhs* e31f5@rhs* e31f6@b e31f7@b*) (if (not (e2cc7@valid-bound-ids? e31f4@lhs*)) (e2e82@invalid-fmls-error e31e8@e e31f4@lhs*) ((lambda (e31fc@lab* e31fd@rhs*) (e2f00@chi-internal (cons e31f6@b e31f7@b*) (append (map cons e31fc@lab* e31fd@rhs*) e31e9@r) (append (map cons e31fc@lab* e31fd@rhs*) e31ea@mr))) (map e31ef@lookup e31f4@lhs*) (map (lambda (e3200@x) (e2cfb@make-eval-transformer (e2f25@expand-transformer e3200@x e31ea@mr))) e31f5@rhs*)))) e31f2@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e31f0@t))) (e2ec8@syntax-dispatch e31f0@t '(_ #(each (any any)) any . each-any)))) e31e8@e))) '#f))) (set! e2e66@type-descriptor-transformer (lambda (e3204@e e3205@r e3206@mr) ((lambda (e320a@t) ((lambda (e320c@ls/false) (if (and e320c@ls/false (apply (lambda (e320e@id) (e2cbd@id? e320e@id)) e320c@ls/false)) (apply (lambda (e3210@id) ((lambda (e3212@lab) ((lambda (e3214@b) ((lambda (e3216@type) ((lambda () (begin (if (not e3212@lab) (e2ce3@raise-unbound-error e3210@id) (void)) (if (not (and (eq? e3216@type '$rtd) (not (list? (e2ce1@binding-value e3214@b))))) (e2fb1@syntax-violation '#f '"not a record type" e3204@e) (void)) (list 'quote (e2ce1@binding-value e3214@b)))))) (e2cdf@binding-type e3214@b))) (e2cdb@label->binding e3212@lab e3205@r))) (e2cd7@id->label e3210@id))) e320c@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e320a@t))) (e2ec8@syntax-dispatch e320a@t '(_ any)))) e3204@e))) (set! e2e68@record-type-descriptor-transformer (lambda (e3218@e e3219@r e321a@mr) ((lambda (e321e@t) ((lambda (e3220@ls/false) (if (and e3220@ls/false (apply (lambda (e3222@id) (e2cbd@id? e3222@id)) e3220@ls/false)) (apply (lambda (e3224@id) ((lambda (e3226@lab) ((lambda (e3228@b) ((lambda (e322a@type) ((lambda () (begin (if (not e3226@lab) (e2ce3@raise-unbound-error e3224@id) (void)) (if (not (and (eq? e322a@type '$rtd) (list? (e2ce1@binding-value e3228@b)))) (e2fb1@syntax-violation '#f '"not a record type" e3218@e) (void)) (e2eea@chi-expr (car (e2ce1@binding-value e3228@b)) e3219@r e321a@mr))))) (e2cdf@binding-type e3228@b))) (e2cdb@label->binding e3226@lab e3219@r))) (e2cd7@id->label e3224@id))) e3220@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e321e@t))) (e2ec8@syntax-dispatch e321e@t '(_ any)))) e3218@e))) (set! e2e6a@record-constructor-descriptor-transformer (lambda (e322c@e e322d@r e322e@mr) ((lambda (e3232@t) ((lambda (e3234@ls/false) (if (and e3234@ls/false (apply (lambda (e3236@id) (e2cbd@id? e3236@id)) e3234@ls/false)) (apply (lambda (e3238@id) ((lambda (e323a@lab) ((lambda (e323c@b) ((lambda (e323e@type) ((lambda () (begin (if (not e323a@lab) (e2ce3@raise-unbound-error e3238@id) (void)) (if (not (and (eq? e323e@type '$rtd) (list? (e2ce1@binding-value e323c@b)))) (e2fb1@syntax-violation '#f '"invalid type" e322c@e) (void)) (e2eea@chi-expr (cadr (e2ce1@binding-value e323c@b)) e322d@r e322e@mr))))) (e2cdf@binding-type e323c@b))) (e2cdb@label->binding e323a@lab e322d@r))) (e2cd7@id->label e3238@id))) e3234@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3232@t))) (e2ec8@syntax-dispatch e3232@t '(_ any)))) e322c@e))) (set! e2e6c@when-macro (lambda (e3240@e) ((lambda (e3242@t) ((lambda (e3244@ls/false) (if e3244@ls/false (apply (lambda (e3246@test e3247@e e3248@e*) (e2e7e@bless (list 'if e3246@test (cons 'begin (cons e3247@e e3248@e*))))) e3244@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3242@t))) (e2ec8@syntax-dispatch e3242@t '(_ any any . each-any)))) e3240@e))) (set! e2e6e@unless-macro (lambda (e324c@e) ((lambda (e324e@t) ((lambda (e3250@ls/false) (if e3250@ls/false (apply (lambda (e3252@test e3253@e e3254@e*) (e2e7e@bless (list 'if (list 'not e3252@test) (cons 'begin (cons e3253@e e3254@e*))))) e3250@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e324e@t))) (e2ec8@syntax-dispatch e324e@t '(_ any any . each-any)))) e324c@e))) (set! e2e70@if-transformer (lambda (e3258@e e3259@r e325a@mr) ((lambda (e325e@t) ((lambda (e3260@ls/false) (if e3260@ls/false (apply (lambda (e3262@e0 e3263@e1 e3264@e2) (list 'if (e2eea@chi-expr e3262@e0 e3259@r e325a@mr) (e2eea@chi-expr e3263@e1 e3259@r e325a@mr) (e2eea@chi-expr e3264@e2 e3259@r e325a@mr))) e3260@ls/false) ((lambda (e3268@t) ((lambda (e326a@ls/false) (if e326a@ls/false (apply (lambda (e326c@e0 e326d@e1) (list 'if (e2eea@chi-expr e326c@e0 e3259@r e325a@mr) (e2eea@chi-expr e326d@e1 e3259@r e325a@mr) (e2c1d@e2b8d@build-void))) e326a@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3268@t))) (e2ec8@syntax-dispatch e3268@t '(_ any any)))) e325e@t))) (e2ec8@syntax-dispatch e325e@t '(_ any any any)))) e3258@e))) (set! e2e72@and-transformer (lambda (e3270@e e3271@r e3272@mr) ((lambda (e3276@t) ((lambda (e3278@ls/false) (if e3278@ls/false (apply (lambda (e327a@e*) (cons 'and (e2ee6@chi-expr* e327a@e* e3271@r e3272@mr))) e3278@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3276@t))) (e2ec8@syntax-dispatch e3276@t '(_ . each-any)))) e3270@e))) (set! e2e74@or-transformer (lambda (e327c@e e327d@r e327e@mr) ((lambda (e3282@t) ((lambda (e3284@ls/false) (if e3284@ls/false (apply (lambda (e3286@e*) (cons 'or (e2ee6@chi-expr* e3286@e* e327d@r e327e@mr))) e3284@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3282@t))) (e2ec8@syntax-dispatch e3282@t '(_ . each-any)))) e327c@e))) (set! e2e76@case-macro (lambda (e3288@e) ((lambda (e328b@build-last e328d@build-one) (begin (set! e328b@build-last (lambda (e32b2@cls) ((lambda (e32b4@t) ((lambda (e32b6@ls/false) (if e32b6@ls/false (apply (lambda (e32b8@e e32b9@e*) (cons 'begin (cons e32b8@e e32b9@e*))) e32b6@ls/false) ((lambda (e32bc@t) ((lambda (e32be@ls/false) (if e32be@ls/false (apply (lambda () (e328d@build-one e32b2@cls '(if #f #f))) e32be@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e32bc@t))) (e2ec8@syntax-dispatch e32bc@t '_))) e32b4@t))) (e2ec8@syntax-dispatch e32b4@t '(#(scheme-id else) any . each-any)))) e32b2@cls))) (set! e328d@build-one (lambda (e32a4@cls e32a5@k) ((lambda (e32a8@t) ((lambda (e32aa@ls/false) (if e32aa@ls/false (apply (lambda (e32ac@d* e32ad@e e32ae@e*) (list 'if (list 'memv 't (list 'quote e32ac@d*)) (cons 'begin (cons e32ad@e e32ae@e*)) e32a5@k)) e32aa@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e32a8@t))) (e2ec8@syntax-dispatch e32a8@t '(each-any any . each-any)))) e32a4@cls))) ((lambda (e328e@t) ((lambda (e3290@ls/false) (if e3290@ls/false (apply (lambda (e3292@expr) (e2e7e@bless (cons 'let (cons (list (list 't e3292@expr)) '((if #f #f)))))) e3290@ls/false) ((lambda (e3294@t) ((lambda (e3296@ls/false) (if e3296@ls/false (apply (lambda (e3298@expr e3299@cls e329a@cls*) (e2e7e@bless (list 'let (list (list 't e3298@expr)) ((letrec ((e329e@f (lambda (e32a0@cls e32a1@cls*) (if (null? e32a1@cls*) (e328b@build-last e32a0@cls) (e328d@build-one e32a0@cls (e329e@f (car e32a1@cls*) (cdr e32a1@cls*))))))) e329e@f) e3299@cls e329a@cls*)))) e3296@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3294@t))) (e2ec8@syntax-dispatch e3294@t '(_ any any . each-any)))) e328e@t))) (e2ec8@syntax-dispatch e328e@t '(_ any)))) e3288@e))) '#f '#f))) (set! e2e78@quote-transformer (lambda (e32c0@e e32c1@r e32c2@mr) ((lambda (e32c6@t) ((lambda (e32c8@ls/false) (if e32c8@ls/false (apply (lambda (e32ca@datum) (list 'quote (e2cd3@stx->datum e32ca@datum))) e32c8@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e32c6@t))) (e2ec8@syntax-dispatch e32c6@t '(_ any)))) e32c0@e))) (set! e2e7a@case-lambda-transformer (lambda (e32cc@e e32cd@r e32ce@mr) ((lambda (e32d2@t) ((lambda (e32d4@ls/false) (if e32d4@ls/false (apply (lambda (e32d6@fmls* e32d7@b* e32d8@b**) (call-with-values (lambda () (e2ef2@chi-lambda-clause* e32cc@e e32d6@fmls* (map cons e32d7@b* e32d8@b**) e32cd@r e32ce@mr)) (lambda (e32e0@e32dd e32e1@e32df) ((lambda (e32e4@body* e32e5@fmls*) (e2c1a@e2b5b@build-case-lambda '#f e32e5@fmls* e32e4@body*)) e32e1@e32df e32e0@e32dd)))) e32d4@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e32d2@t))) (e2ec8@syntax-dispatch e32d2@t '(_ . #(each (any any . each-any)))))) e32cc@e))) (set! e2e7c@lambda-transformer (lambda (e32e8@e e32e9@r e32ea@mr) ((lambda (e32ee@t) ((lambda (e32f0@ls/false) (if e32f0@ls/false (apply (lambda (e32f2@fmls e32f3@b e32f4@b*) (call-with-values (lambda () (e2ef0@chi-lambda-clause e32e8@e e32f2@fmls (cons e32f3@b e32f4@b*) e32e9@r e32ea@mr)) (lambda (e32fc@e32f9 e32fd@e32fb) ((lambda (e3300@body e3301@fmls) (e2c19@e2b59@build-lambda '#f e3301@fmls e3300@body)) e32fd@e32fb e32fc@e32f9)))) e32f0@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e32ee@t))) (e2ec8@syntax-dispatch e32ee@t '(_ any any . each-any)))) e32e8@e))) (set! e2e7e@bless (lambda (e3304@x) (e2ca5@mkstx ((letrec ((e3306@f (lambda (e3308@x) (if (e2c85@stx? e3308@x) e3308@x (if (pair? e3308@x) (cons (e3306@f (car e3308@x)) (e3306@f (cdr e3308@x))) (if (symbol? e3308@x) (e2e52@scheme-stx e3308@x) (if (vector? e3308@x) (vector-map e3306@f e3308@x) e3308@x))))))) e3306@f) e3304@x) '() '() '()))) (set! e2e80@with-syntax-macro (lambda (e330a@e) ((lambda (e330c@t) ((lambda (e330e@ls/false) (if e330e@ls/false (apply (lambda (e3310@pat* e3311@expr* e3312@b e3313@b*) ((lambda (e3318@idn*) (begin (e2eee@verify-formals (map car e3318@idn*) e330a@e) ((lambda (e331a@t*) (e2e7e@bless (list 'let (map list e331a@t* e3311@expr*) ((letrec ((e331c@f (lambda (e331e@pat* e331f@t*) (if (null? e331e@pat*) (cons 'begin (cons '#f (cons e3312@b e3313@b*))) (list 'syntax-case (car e331f@t*) '() (list (car e331e@pat*) (e331c@f (cdr e331e@pat*) (cdr e331f@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car e331e@pat*)) (car e331f@t*)))))))) e331c@f) e3310@pat* e331a@t*)))) (e2f9f@generate-temporaries e3311@expr*)))) ((letrec ((e3322@f (lambda (e3324@pat*) (if (null? e3324@pat*) '() (call-with-values (lambda () (e2ec6@convert-pattern (car e3324@pat*) '())) (lambda (e332a@e3327 e332b@e3329) ((lambda (e332e@idn* e332f@pat) (append e332e@idn* (e3322@f (cdr e3324@pat*)))) e332b@e3329 e332a@e3327))))))) e3322@f) e3310@pat*))) e330e@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e330c@t))) (e2ec8@syntax-dispatch e330c@t '(_ #(each (any any)) any . each-any)))) e330a@e))) (set! e2e82@invalid-fmls-error (lambda (e3332@stx e3333@fmls) ((lambda (e3336@t) ((lambda (e3338@ls/false) (if e3338@ls/false (apply (lambda (e333a@id* e333b@last) ((letrec ((e333e@f (lambda (e3340@id*) (if (null? e3340@id*) (values) (if (not (e2cbd@id? (car e3340@id*))) (e2fb1@syntax-violation '#f '"not an identifier" e3332@stx (car e3340@id*)) (begin (e333e@f (cdr e3340@id*)) (if (e2ccb@bound-id-member? (car e3340@id*) (cdr e3340@id*)) (e2fb1@syntax-violation '#f '"duplicate binding" e3332@stx (car e3340@id*)) (void)))))))) e333e@f) (if (e2cbd@id? e333b@last) (cons e333b@last e333a@id*) (if (e2cb3@syntax-null? e333b@last) e333a@id* (e2fb1@syntax-violation '#f '"not an identifier" e3332@stx e333b@last))))) e3338@ls/false) ((lambda (e3342@t) ((lambda (e3344@ls/false) (if e3344@ls/false (apply (lambda () (e2fb1@syntax-violation '#f '"malformed binding form" e3332@stx e3333@fmls)) e3344@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3342@t))) (e2ec8@syntax-dispatch e3342@t '_))) e3336@t))) (e2ec8@syntax-dispatch e3336@t '#(each+ any () any)))) e3333@fmls))) (set! e2e84@let-macro (lambda (e3346@stx) ((lambda (e3348@t) ((lambda (e334a@ls/false) (if e334a@ls/false (apply (lambda (e334c@lhs* e334d@rhs* e334e@b e334f@b*) (if (e2cc7@valid-bound-ids? e334c@lhs*) (e2e7e@bless (cons (cons 'lambda (cons e334c@lhs* (cons e334e@b e334f@b*))) e334d@rhs*)) (e2e82@invalid-fmls-error e3346@stx e334c@lhs*))) e334a@ls/false) ((lambda (e3354@t) ((lambda (e3356@ls/false) (if (and e3356@ls/false (apply (lambda (e3358@f e3359@lhs* e335a@rhs* e335b@b e335c@b*) (e2cbd@id? e3358@f)) e3356@ls/false)) (apply (lambda (e3362@f e3363@lhs* e3364@rhs* e3365@b e3366@b*) (if (e2cc7@valid-bound-ids? e3363@lhs*) (e2e7e@bless (cons (list 'letrec (list (list e3362@f (cons 'lambda (cons e3363@lhs* (cons e3365@b e3366@b*))))) e3362@f) e3364@rhs*)) (e2e82@invalid-fmls-error e3346@stx e3363@lhs*))) e3356@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3354@t))) (e2ec8@syntax-dispatch e3354@t '(_ any #(each (any any)) any . each-any)))) e3348@t))) (e2ec8@syntax-dispatch e3348@t '(_ #(each (any any)) any . each-any)))) e3346@stx))) (set! e2e86@let-values-macro (lambda (e336c@stx) ((lambda (e336f@rename e3371@rename*) (begin (set! e336f@rename (lambda (e33d4@x e33d5@old* e33d6@new*) (begin (if (not (e2cbd@id? e33d4@x)) (e2fb1@syntax-violation '#f '"not an indentifier" e336c@stx e33d4@x) (void)) (if (e2ccb@bound-id-member? e33d4@x e33d5@old*) (e2fb1@syntax-violation '#f '"duplicate binding" e336c@stx e33d4@x) (void)) ((lambda (e33da@y) (values e33da@y (cons e33d4@x e33d5@old*) (cons e33da@y e33d6@new*))) (gensym (e2fb7@syntax->datum e33d4@x)))))) (set! e3371@rename* (lambda (e33c2@x* e33c3@old* e33c4@new*) (if (null? e33c2@x*) (values '() e33c3@old* e33c4@new*) (call-with-values (lambda () (e336f@rename (car e33c2@x*) e33c3@old* e33c4@new*)) (lambda (e33c8@x e33c9@old* e33ca@new*) (call-with-values (lambda () (e3371@rename* (cdr e33c2@x*) e33c9@old* e33ca@new*)) (lambda (e33ce@x* e33cf@old* e33d0@new*) (values (cons e33c8@x e33ce@x*) e33cf@old* e33d0@new*)))))))) ((lambda (e3372@t) ((lambda (e3374@ls/false) (if e3374@ls/false (apply (lambda (e3376@b e3377@b*) (cons* (e2e7e@bless 'let) '() e3376@b e3377@b*)) e3374@ls/false) ((lambda (e337a@t) ((lambda (e337c@ls/false) (if e337c@ls/false (apply (lambda (e337e@lhs* e337f@rhs* e3380@b e3381@b*) (e2e7e@bless ((letrec ((e3386@f (lambda (e3388@lhs* e3389@rhs* e338a@old* e338b@new*) (if (null? e3388@lhs*) (cons 'let (cons (map list e338a@old* e338b@new*) (cons e3380@b e3381@b*))) ((lambda (e3390@t) ((lambda (e3392@ls/false) (if e3392@ls/false (apply (lambda (e3394@x*) (call-with-values (lambda () (e3371@rename* e3394@x* e338a@old* e338b@new*)) (lambda (e339c@e3397 e339d@e3399 e339e@e339b) ((lambda (e33a2@new* e33a3@old* e33a4@y*) (list 'call-with-values (list 'lambda '() (car e3389@rhs*)) (list 'lambda e33a4@y* (e3386@f (cdr e3388@lhs*) (cdr e3389@rhs*) e33a3@old* e33a2@new*)))) e339e@e339b e339d@e3399 e339c@e3397)))) e3392@ls/false) ((lambda (e33a8@t) ((lambda (e33aa@ls/false) (if e33aa@ls/false (apply (lambda (e33ac@x* e33ad@x) (call-with-values (lambda () (e336f@rename e33ad@x e338a@old* e338b@new*)) (lambda (e33b0@y e33b1@old* e33b2@new*) (call-with-values (lambda () (e3371@rename* e33ac@x* e33b1@old* e33b2@new*)) (lambda (e33b6@y* e33b7@old* e33b8@new*) (list 'call-with-values (list 'lambda '() (car e3389@rhs*)) (list 'lambda (append e33b6@y* e33b0@y) (e3386@f (cdr e3388@lhs*) (cdr e3389@rhs*) e33b7@old* e33b8@new*)))))))) e33aa@ls/false) ((lambda (e33bc@t) ((lambda (e33be@ls/false) (if e33be@ls/false (apply (lambda (e33c0@others) (e2fb1@syntax-violation '#f '"malformed bindings" e336c@stx e33c0@others)) e33be@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e33bc@t))) (e2ec8@syntax-dispatch e33bc@t 'any))) e33a8@t))) (e2ec8@syntax-dispatch e33a8@t '#(each+ any () any)))) e3390@t))) (e2ec8@syntax-dispatch e3390@t 'each-any))) (car e3388@lhs*)))))) e3386@f) e337e@lhs* e337f@rhs* '() '()))) e337c@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e337a@t))) (e2ec8@syntax-dispatch e337a@t '(_ #(each (any any)) any . each-any)))) e3372@t))) (e2ec8@syntax-dispatch e3372@t '(_ () any . each-any)))) e336c@stx))) '#f '#f))) (set! e2e88@let*-values-macro (lambda (e33dc@stx) ((lambda (e33df@check) (begin (set! e33df@check (lambda (e340e@x*) (if (not (null? e340e@x*)) ((lambda (e3410@x) (begin (if (not (e2cbd@id? e3410@x)) (e2fb1@syntax-violation '#f '"not an identifier" e33dc@stx e3410@x) (void)) (e33df@check (cdr e340e@x*)) (if (e2ccb@bound-id-member? e3410@x (cdr e340e@x*)) (e2fb1@syntax-violation '#f '"duplicate identifier" e33dc@stx e3410@x) (void)))) (car e340e@x*)) (void)))) ((lambda (e33e0@t) ((lambda (e33e2@ls/false) (if e33e2@ls/false (apply (lambda (e33e4@b e33e5@b*) (cons* (e2e7e@bless 'let) '() e33e4@b e33e5@b*)) e33e2@ls/false) ((lambda (e33e8@t) ((lambda (e33ea@ls/false) (if e33ea@ls/false (apply (lambda (e33ec@lhs* e33ed@rhs* e33ee@b e33ef@b*) (e2e7e@bless ((letrec ((e33f4@f (lambda (e33f6@lhs* e33f7@rhs*) (if (null? e33f6@lhs*) (cons 'begin (cons e33ee@b e33ef@b*)) ((lambda (e33fa@t) ((lambda (e33fc@ls/false) (if e33fc@ls/false (apply (lambda (e33fe@x*) (begin (e33df@check e33fe@x*) (list 'call-with-values (list 'lambda '() (car e33f7@rhs*)) (list 'lambda e33fe@x* (e33f4@f (cdr e33f6@lhs*) (cdr e33f7@rhs*)))))) e33fc@ls/false) ((lambda (e3400@t) ((lambda (e3402@ls/false) (if e3402@ls/false (apply (lambda (e3404@x* e3405@x) (begin (e33df@check (cons e3405@x e3404@x*)) (list 'call-with-values (list 'lambda '() (car e33f7@rhs*)) (list 'lambda (append e3404@x* e3405@x) (e33f4@f (cdr e33f6@lhs*) (cdr e33f7@rhs*)))))) e3402@ls/false) ((lambda (e3408@t) ((lambda (e340a@ls/false) (if e340a@ls/false (apply (lambda (e340c@others) (e2fb1@syntax-violation '#f '"malformed bindings" e33dc@stx e340c@others)) e340a@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3408@t))) (e2ec8@syntax-dispatch e3408@t 'any))) e3400@t))) (e2ec8@syntax-dispatch e3400@t '#(each+ any () any)))) e33fa@t))) (e2ec8@syntax-dispatch e33fa@t 'each-any))) (car e33f6@lhs*)))))) e33f4@f) e33ec@lhs* e33ed@rhs*))) e33ea@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e33e8@t))) (e2ec8@syntax-dispatch e33e8@t '(_ #(each (any any)) any . each-any)))) e33e0@t))) (e2ec8@syntax-dispatch e33e0@t '(_ () any . each-any)))) e33dc@stx))) '#f))) (set! e2e8a@trace-lambda-macro (lambda (e3412@stx) ((lambda (e3414@t) ((lambda (e3416@ls/false) (if e3416@ls/false (apply (lambda (e3418@who e3419@fmls e341a@b e341b@b*) (if (e2cc7@valid-bound-ids? e3419@fmls) (e2e7e@bless (list 'make-traced-procedure (list 'quote e3418@who) (cons 'lambda (cons e3419@fmls (cons e341a@b e341b@b*))))) (e2e82@invalid-fmls-error e3412@stx e3419@fmls))) e3416@ls/false) ((lambda (e3420@t) ((lambda (e3422@ls/false) (if e3422@ls/false (apply (lambda (e3424@who e3425@fmls e3426@last e3427@b e3428@b*) (if (e2cc7@valid-bound-ids? (cons e3426@last e3425@fmls)) (e2e7e@bless (list 'make-traced-procedure (list 'quote e3424@who) (cons 'lambda (cons (append e3425@fmls e3426@last) (cons e3427@b e3428@b*))))) (e2e82@invalid-fmls-error e3412@stx (append e3425@fmls e3426@last)))) e3422@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3420@t))) (e2ec8@syntax-dispatch e3420@t '(_ any #(each+ any () any) any . each-any)))) e3414@t))) (e2ec8@syntax-dispatch e3414@t '(_ any each-any any . each-any)))) e3412@stx))) (set! e2e8c@trace-define-macro (lambda (e342e@stx) ((lambda (e3430@t) ((lambda (e3432@ls/false) (if e3432@ls/false (apply (lambda (e3434@who e3435@fmls e3436@b e3437@b*) (if (e2cc7@valid-bound-ids? e3435@fmls) (e2e7e@bless (list 'define e3434@who (list 'make-traced-procedure (list 'quote e3434@who) (cons 'lambda (cons e3435@fmls (cons e3436@b e3437@b*)))))) (e2e82@invalid-fmls-error e342e@stx e3435@fmls))) e3432@ls/false) ((lambda (e343c@t) ((lambda (e343e@ls/false) (if e343e@ls/false (apply (lambda (e3440@who e3441@fmls e3442@last e3443@b e3444@b*) (if (e2cc7@valid-bound-ids? (cons e3442@last e3441@fmls)) (e2e7e@bless (list 'define e3440@who (list 'make-traced-procedure (list 'quote e3440@who) (cons 'lambda (cons (append e3441@fmls e3442@last) (cons e3443@b e3444@b*)))))) (e2e82@invalid-fmls-error e342e@stx (append e3441@fmls e3442@last)))) e343e@ls/false) ((lambda (e344a@t) ((lambda (e344c@ls/false) (if e344c@ls/false (apply (lambda (e344e@who e344f@expr) (if (e2cbd@id? e344e@who) (e2e7e@bless (list 'define e344e@who (list 'let (list (list 'v e344f@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote e344e@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (e2fb1@syntax-violation '#f '"invalid name" e342e@stx))) e344c@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e344a@t))) (e2ec8@syntax-dispatch e344a@t '(_ any any)))) e343c@t))) (e2ec8@syntax-dispatch e343c@t '(_ (any . #(each+ any () any)) any . each-any)))) e3430@t))) (e2ec8@syntax-dispatch e3430@t '(_ (any . each-any) any . each-any)))) e342e@stx))) (set! e2e8e@trace-define-syntax-macro (lambda (e3452@stx) ((lambda (e3454@t) ((lambda (e3456@ls/false) (if e3456@ls/false (apply (lambda (e3458@who e3459@expr) (if (e2cbd@id? e3458@who) (e2e7e@bless (list 'define-syntax e3458@who (list 'make-traced-macro (list 'quote e3458@who) e3459@expr))) (e2fb1@syntax-violation '#f '"invalid name" e3452@stx))) e3456@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3454@t))) (e2ec8@syntax-dispatch e3454@t '(_ any any)))) e3452@stx))) (set! e2e90@trace-let/rec-syntax (lambda (e345c@who) (lambda (e345e@stx) ((lambda (e3460@t) ((lambda (e3462@ls/false) (if e3462@ls/false (apply (lambda (e3464@lhs* e3465@rhs* e3466@b e3467@b*) (if (e2cc7@valid-bound-ids? e3464@lhs*) ((lambda (e346c@rhs*) (e2e7e@bless (cons e345c@who (cons (map list e3464@lhs* e346c@rhs*) (cons e3466@b e3467@b*))))) (map (lambda (e346e@lhs e346f@rhs) (list 'make-traced-macro (list 'quote e346e@lhs) e346f@rhs)) e3464@lhs* e3465@rhs*)) (e2e82@invalid-fmls-error e345e@stx e3464@lhs*))) e3462@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3460@t))) (e2ec8@syntax-dispatch e3460@t '(_ #(each (any any)) any . each-any)))) e345e@stx)))) (set! e2e92@trace-let-syntax-macro (e2e90@trace-let/rec-syntax 'let-syntax)) (set! e2e94@trace-letrec-syntax-macro (e2e90@trace-let/rec-syntax 'letrec-syntax)) (set! e2e96@guard-macro (lambda (e3472@x) ((lambda (e3475@gen-clauses) (begin (set! e3475@gen-clauses (lambda (e348c@con e348d@outerk e348e@clause*) ((lambda (e3493@f e3495@f*) (begin (set! e3493@f (lambda (e34cc@x e34cd@k) ((lambda (e34d0@t) ((lambda (e34d2@ls/false) (if e34d2@ls/false (apply (lambda (e34d4@e e34d5@p) ((lambda (e34d8@t) (list 'let (list (list e34d8@t e34d4@e)) (list 'if e34d8@t (list e34d5@p e34d8@t) e34cd@k))) (gensym))) e34d2@ls/false) ((lambda (e34da@t) ((lambda (e34dc@ls/false) (if e34dc@ls/false (apply (lambda (e34de@e) ((lambda (e34e0@t) (list 'let (list (list e34e0@t e34de@e)) (list 'if e34e0@t e34e0@t e34cd@k))) (gensym))) e34dc@ls/false) ((lambda (e34e2@t) ((lambda (e34e4@ls/false) (if e34e4@ls/false (apply (lambda (e34e6@e e34e7@v e34e8@v*) (list 'if e34e6@e (cons 'begin (cons e34e7@v e34e8@v*)) e34cd@k)) e34e4@ls/false) ((lambda (e34ec@t) ((lambda (e34ee@ls/false) (if e34ee@ls/false (apply (lambda () (e2fb1@syntax-violation '#f '"invalid guard clause" e34cc@x)) e34ee@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e34ec@t))) (e2ec8@syntax-dispatch e34ec@t '_))) e34e2@t))) (e2ec8@syntax-dispatch e34e2@t '(any any . each-any)))) e34da@t))) (e2ec8@syntax-dispatch e34da@t '(any)))) e34d0@t))) (e2ec8@syntax-dispatch e34d0@t '(any #(scheme-id =>) any)))) e34cc@x))) (set! e3495@f* (lambda (e34a2@x*) ((lambda (e34a4@t) ((lambda (e34a6@ls/false) (if e34a6@ls/false (apply (lambda () ((lambda (e34a8@g) (values (list e34a8@g (list 'lambda '() (list 'raise-continuable e348c@con))) e34a8@g)) (gensym))) e34a6@ls/false) ((lambda (e34aa@t) ((lambda (e34ac@ls/false) (if e34ac@ls/false (apply (lambda (e34ae@e e34af@e*) (values (cons 'begin (cons e34ae@e e34af@e*)) '#f)) e34ac@ls/false) ((lambda (e34b2@t) ((lambda (e34b4@ls/false) (if e34b4@ls/false (apply (lambda (e34b6@cls e34b7@cls*) (call-with-values (lambda () (e3495@f* e34b7@cls*)) (lambda (e34be@e34bb e34bf@e34bd) ((lambda (e34c2@g e34c3@e) (values (e3493@f e34b6@cls e34c3@e) e34c2@g)) e34bf@e34bd e34be@e34bb)))) e34b4@ls/false) ((lambda (e34c6@t) ((lambda (e34c8@ls/false) (if e34c8@ls/false (apply (lambda (e34ca@others) (e2fb1@syntax-violation '#f '"invalid guard clause" e34ca@others)) e34c8@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e34c6@t))) (e2ec8@syntax-dispatch e34c6@t 'any))) e34b2@t))) (e2ec8@syntax-dispatch e34b2@t '(any . any)))) e34aa@t))) (e2ec8@syntax-dispatch e34aa@t '((#(scheme-id else) any . each-any))))) e34a4@t))) (e2ec8@syntax-dispatch e34a4@t '()))) e34a2@x*))) (call-with-values (lambda () (e3495@f* e348e@clause*)) (lambda (e349a@e3497 e349b@e3499) ((lambda (e349e@raisek e349f@code) (if e349e@raisek (list (list 'call/cc (list 'lambda (list e349e@raisek) (list e348d@outerk (list 'lambda '() e349f@code))))) (list e348d@outerk (list 'lambda '() e349f@code)))) e349b@e3499 e349a@e3497))))) '#f '#f))) ((lambda (e3476@t) ((lambda (e3478@ls/false) (if (and e3478@ls/false (apply (lambda (e347a@con e347b@clause* e347c@b e347d@b*) (e2cbd@id? e347a@con)) e3478@ls/false)) (apply (lambda (e3482@con e3483@clause* e3484@b e3485@b*) ((lambda (e348a@outerk) (e2e7e@bless (list (list 'call/cc (list 'lambda (list e348a@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list e3482@con) (e3475@gen-clauses e3482@con e348a@outerk e3483@clause*)) (cons 'lambda (cons '() (cons e3484@b e3485@b*)))))))))) (gensym))) e3478@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3476@t))) (e2ec8@syntax-dispatch e3476@t '(_ (any . each-any) any . each-any)))) e3472@x))) '#f))) (set! e2e98@define-enumeration-macro (lambda (e34f0@stx) ((lambda (e34f3@set? e34f5@remove-dups) (begin (set! e34f3@set? (lambda (e350c@x) (or (null? e350c@x) (and (not (memq (car e350c@x) (cdr e350c@x))) (e34f3@set? (cdr e350c@x)))))) (set! e34f5@remove-dups (lambda (e350a@ls) (if (null? e350a@ls) '() (cons (car e350a@ls) (e34f5@remove-dups (remq (car e350a@ls) (cdr e350a@ls))))))) ((lambda (e34f6@t) ((lambda (e34f8@ls/false) (if (and e34f8@ls/false (apply (lambda (e34fa@name e34fb@id* e34fc@maker) (and (e2cbd@id? e34fa@name) (e2cbd@id? e34fc@maker) (for-all e2cbd@id? e34fb@id*))) e34f8@ls/false)) (apply (lambda (e3500@name e3501@id* e3502@maker) ((lambda (e3506@name* e3507@mk) (e2e7e@bless (list 'begin (list 'define e3507@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote e3506@name*)))) (list 'define-syntax e3500@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote e3506@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote e3500@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax e3502@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote e3502@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote e3506@name*)) (cons 'syntax-violation (cons (list 'quote e3502@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons e3507@mk '('(n* ...)))))))))))) (e34f5@remove-dups (e2fb7@syntax->datum e3501@id*)) (gensym))) e34f8@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e34f6@t))) (e2ec8@syntax-dispatch e34f6@t '(_ any each-any any)))) e34f0@stx))) '#f '#f))) (set! e2e9a@time-macro (lambda (e350e@stx) ((lambda (e3510@t) ((lambda (e3512@ls/false) (if e3512@ls/false (apply (lambda (e3514@expr) (e2e7e@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() e3514@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) e3512@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3510@t))) (e2ec8@syntax-dispatch e3510@t '(_ any)))) e350e@stx))) (set! e2e9c@delay-macro (lambda (e3516@stx) ((lambda (e3518@t) ((lambda (e351a@ls/false) (if e351a@ls/false (apply (lambda (e351c@expr) (e2e7e@bless (list 'make-promise (list 'lambda '() e351c@expr)))) e351a@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3518@t))) (e2ec8@syntax-dispatch e3518@t '(_ any)))) e3516@stx))) (set! e2e9e@assert-macro (lambda (e351e@stx) ((lambda (e3520@t) ((lambda (e3522@ls/false) (if e3522@ls/false (apply (lambda (e3524@expr) ((lambda (e3526@pos) (e2e7e@bless (list 'unless e3524@expr (list 'assertion-error (list 'quote e3524@expr) (list 'quote e3526@pos))))) (or (e2fa9@expression-position e351e@stx) (e2fa9@expression-position e3524@expr)))) e3522@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3520@t))) (e2ec8@syntax-dispatch e3520@t '(_ any)))) e351e@stx))) (set! e2ea0@endianness-macro (lambda (e3528@stx) ((lambda (e352a@t) ((lambda (e352c@ls/false) (if e352c@ls/false (apply (lambda (e352e@e) ((lambda (e3530@t) (if (memv e3530@t '(little)) (e2e7e@bless ''little) (if (memv e3530@t '(big)) (e2e7e@bless ''big) (e2fb1@syntax-violation '#f '"endianness must be big or little" e3528@stx)))) (e2fb7@syntax->datum e352e@e))) e352c@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e352a@t))) (e2ec8@syntax-dispatch e352a@t '(_ any)))) e3528@stx))) (set! e2ea2@identifier-syntax-macro (lambda (e3532@stx) ((lambda (e3534@t) ((lambda (e3536@ls/false) (if e3536@ls/false (apply (lambda (e3538@expr) (e2e7e@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax e3538@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax e3538@expr) '((syntax (e* ...)))))))))) e3536@ls/false) ((lambda (e353a@t) ((lambda (e353c@ls/false) (if (and e353c@ls/false (apply (lambda (e353e@id1 e353f@expr1 e3540@id2 e3541@expr2 e3542@expr3) (and (e2cbd@id? e353e@id1) (e2cbd@id? e3540@id2) (e2cbd@id? e3541@expr2))) e353c@ls/false)) (apply (lambda (e3548@id1 e3549@expr1 e354a@id2 e354b@expr2 e354c@expr3) (e2e7e@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax e3549@expr1)) (list (list 'set! 'id e354b@expr2) (list 'syntax e354c@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons e3549@expr1 '(e* ...))))))))) e353c@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e353a@t))) (e2ec8@syntax-dispatch e353a@t '(_ (any any) ((#(scheme-id set!) any any) any))))) e3534@t))) (e2ec8@syntax-dispatch e3534@t '(_ any)))) e3532@stx))) (set! e2ea4@do-macro (lambda (e3552@stx) ((lambda (e3555@bind) (begin (set! e3555@bind (lambda (e356c@x) ((lambda (e356e@t) ((lambda (e3570@ls/false) (if e3570@ls/false (apply (lambda (e3572@x e3573@init) (list e3572@x e3573@init e3572@x)) e3570@ls/false) ((lambda (e3576@t) ((lambda (e3578@ls/false) (if e3578@ls/false (apply (lambda (e357a@x e357b@init e357c@step) (list e357a@x e357b@init e357c@step)) e3578@ls/false) ((lambda (e3580@t) ((lambda (e3582@ls/false) (if e3582@ls/false (apply (lambda () (e2fb1@syntax-violation '#f '"invalid binding" e3552@stx)) e3582@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3580@t))) (e2ec8@syntax-dispatch e3580@t '_))) e3576@t))) (e2ec8@syntax-dispatch e3576@t '(any any any)))) e356e@t))) (e2ec8@syntax-dispatch e356e@t '(any any)))) e356c@x))) ((lambda (e3556@t) ((lambda (e3558@ls/false) (if e3558@ls/false (apply (lambda (e355a@binding* e355b@test e355c@expr* e355d@command*) ((lambda (e3562@t) ((lambda (e3564@ls/false) (if e3564@ls/false (apply (lambda (e3566@x* e3567@init* e3568@step*) (if (e2cc7@valid-bound-ids? e3566@x*) (e2e7e@bless (list 'letrec (list (list 'loop (list 'lambda e3566@x* (list 'if e355b@test (cons 'begin (cons '(if #f #f) e355c@expr*)) (cons 'begin (append e355d@command* (list (cons 'loop e3568@step*)))))))) (cons 'loop e3567@init*))) (e2fb1@syntax-violation '#f '"invalid bindings" e3552@stx))) e3564@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3562@t))) (e2ec8@syntax-dispatch e3562@t '#(each (any any any))))) (map e3555@bind e355a@binding*))) e3558@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3556@t))) (e2ec8@syntax-dispatch e3556@t '(_ each-any (any . each-any) . each-any)))) e3552@stx))) '#f))) (set! e2ea6@let*-macro (lambda (e3584@stx) ((lambda (e3586@t) ((lambda (e3588@ls/false) (if (and e3588@ls/false (apply (lambda (e358a@lhs* e358b@rhs* e358c@b e358d@b*) (for-all e2cbd@id? e358a@lhs*)) e3588@ls/false)) (apply (lambda (e3592@lhs* e3593@rhs* e3594@b e3595@b*) (e2e7e@bless ((letrec ((e359a@f (lambda (e359c@x*) (if (null? e359c@x*) (cons 'let (cons '() (cons e3594@b e3595@b*))) (list 'let (list (car e359c@x*)) (e359a@f (cdr e359c@x*))))))) e359a@f) (map list e3592@lhs* e3593@rhs*)))) e3588@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3586@t))) (e2ec8@syntax-dispatch e3586@t '(_ #(each (any any)) any . each-any)))) e3584@stx))) (set! e2ea8@or-macro (lambda (e359e@stx) ((lambda (e35a0@t) ((lambda (e35a2@ls/false) (if e35a2@ls/false (apply (lambda () '#f) e35a2@ls/false) ((lambda (e35a4@t) ((lambda (e35a6@ls/false) (if e35a6@ls/false (apply (lambda (e35a8@e e35a9@e*) (e2e7e@bless ((letrec ((e35ac@f (lambda (e35ae@e e35af@e*) (if (null? e35af@e*) (list 'begin '#f e35ae@e) (list 'let (list (list 't e35ae@e)) (list 'if 't 't (e35ac@f (car e35af@e*) (cdr e35af@e*)))))))) e35ac@f) e35a8@e e35a9@e*))) e35a6@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e35a4@t))) (e2ec8@syntax-dispatch e35a4@t '(_ any . each-any)))) e35a0@t))) (e2ec8@syntax-dispatch e35a0@t '(_)))) e359e@stx))) (set! e2eaa@and-macro (lambda (e35b2@stx) ((lambda (e35b4@t) ((lambda (e35b6@ls/false) (if e35b6@ls/false (apply (lambda () '#t) e35b6@ls/false) ((lambda (e35b8@t) ((lambda (e35ba@ls/false) (if e35ba@ls/false (apply (lambda (e35bc@e e35bd@e*) (e2e7e@bless ((letrec ((e35c0@f (lambda (e35c2@e e35c3@e*) (if (null? e35c3@e*) (list 'begin '#f e35c2@e) (cons 'if (cons e35c2@e (cons (e35c0@f (car e35c3@e*) (cdr e35c3@e*)) '(#f)))))))) e35c0@f) e35bc@e e35bd@e*))) e35ba@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e35b8@t))) (e2ec8@syntax-dispatch e35b8@t '(_ any . each-any)))) e35b4@t))) (e2ec8@syntax-dispatch e35b4@t '(_)))) e35b2@stx))) (set! e2eac@cond-macro (lambda (e35c6@stx) ((lambda (e35c8@t) ((lambda (e35ca@ls/false) (if e35ca@ls/false (apply (lambda (e35cc@cls e35cd@cls*) (e2e7e@bless ((letrec ((e35d0@f (lambda (e35d2@cls e35d3@cls*) (if (null? e35d3@cls*) ((lambda (e35d6@t) ((lambda (e35d8@ls/false) (if e35d8@ls/false (apply (lambda (e35da@e e35db@e*) (cons 'begin (cons e35da@e e35db@e*))) e35d8@ls/false) ((lambda (e35de@t) ((lambda (e35e0@ls/false) (if e35e0@ls/false (apply (lambda (e35e2@e e35e3@p) (list 'let (list (list 't e35e2@e)) (list 'if 't (cons e35e3@p '(t))))) e35e0@ls/false) ((lambda (e35e6@t) ((lambda (e35e8@ls/false) (if e35e8@ls/false (apply (lambda (e35ea@e) (cons 'or (cons e35ea@e '((if #f #f))))) e35e8@ls/false) ((lambda (e35ec@t) ((lambda (e35ee@ls/false) (if e35ee@ls/false (apply (lambda (e35f0@e e35f1@e*) (list 'if e35f0@e (cons 'begin e35f1@e*))) e35ee@ls/false) ((lambda (e35f4@t) ((lambda (e35f6@ls/false) (if e35f6@ls/false (apply (lambda () (e2fb1@syntax-violation '#f '"invalid last clause" e35c6@stx)) e35f6@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e35f4@t))) (e2ec8@syntax-dispatch e35f4@t '_))) e35ec@t))) (e2ec8@syntax-dispatch e35ec@t '(any . each-any)))) e35e6@t))) (e2ec8@syntax-dispatch e35e6@t '(any)))) e35de@t))) (e2ec8@syntax-dispatch e35de@t '(any #(scheme-id =>) any)))) e35d6@t))) (e2ec8@syntax-dispatch e35d6@t '(#(scheme-id else) any . each-any)))) e35d2@cls) ((lambda (e35f8@t) ((lambda (e35fa@ls/false) (if e35fa@ls/false (apply (lambda (e35fc@e e35fd@e*) (e2fb1@syntax-violation '#f '"incorrect position of keyword else" e35c6@stx)) e35fa@ls/false) ((lambda (e3600@t) ((lambda (e3602@ls/false) (if e3602@ls/false (apply (lambda (e3604@e e3605@p) (list 'let (list (list 't e3604@e)) (list 'if 't (cons e3605@p '(t)) (e35d0@f (car e35d3@cls*) (cdr e35d3@cls*))))) e3602@ls/false) ((lambda (e3608@t) ((lambda (e360a@ls/false) (if e360a@ls/false (apply (lambda (e360c@e) (list 'or e360c@e (e35d0@f (car e35d3@cls*) (cdr e35d3@cls*)))) e360a@ls/false) ((lambda (e360e@t) ((lambda (e3610@ls/false) (if e3610@ls/false (apply (lambda (e3612@e e3613@e*) (list 'if e3612@e (cons 'begin e3613@e*) (e35d0@f (car e35d3@cls*) (cdr e35d3@cls*)))) e3610@ls/false) ((lambda (e3616@t) ((lambda (e3618@ls/false) (if e3618@ls/false (apply (lambda () (e2fb1@syntax-violation '#f '"invalid last clause" e35c6@stx)) e3618@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3616@t))) (e2ec8@syntax-dispatch e3616@t '_))) e360e@t))) (e2ec8@syntax-dispatch e360e@t '(any . each-any)))) e3608@t))) (e2ec8@syntax-dispatch e3608@t '(any)))) e3600@t))) (e2ec8@syntax-dispatch e3600@t '(any #(scheme-id =>) any)))) e35f8@t))) (e2ec8@syntax-dispatch e35f8@t '(#(scheme-id else) any . each-any)))) e35d2@cls))))) e35d0@f) e35cc@cls e35cd@cls*))) e35ca@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e35c8@t))) (e2ec8@syntax-dispatch e35c8@t '(_ any . each-any)))) e35c6@stx))) (set! e2eae@do-include (lambda (e361a@stx e361b@id e361c@filename) ((lambda (e3620@filename) (begin (if (not (and (string? e3620@filename) (e2cbd@id? e361b@id))) (e2fb1@syntax-violation '#f '"invalid syntax" e361a@stx) (void)) (cons (e2e7e@bless 'begin) (with-input-from-file e3620@filename (lambda () ((letrec ((e3622@f (lambda (e3624@ls) ((lambda (e3626@x) (if (eof-object? e3626@x) (reverse e3624@ls) (e3622@f (cons (e2c9b@datum->stx e361b@id e3626@x) e3624@ls)))) (e285a@e2777@read-annotated))))) e3622@f) '())))))) (e2cd3@stx->datum e361c@filename)))) (set! e2eb0@include-macro (lambda (e3628@e) ((lambda (e362a@t) ((lambda (e362c@ls/false) (if e362c@ls/false (apply (lambda (e362e@id e362f@filename) (e2eae@do-include e3628@e e362e@id e362f@filename)) e362c@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e362a@t))) (e2ec8@syntax-dispatch e362a@t '(any any)))) e3628@e))) (set! e2eb2@include-into-macro (lambda (e3632@e) ((lambda (e3634@t) ((lambda (e3636@ls/false) (if e3636@ls/false (apply (lambda (e3638@id e3639@filename) (e2eae@do-include e3632@e e3638@id e3639@filename)) e3636@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3634@t))) (e2ec8@syntax-dispatch e3634@t '(_ any any)))) e3632@e))) (set! e2eb4@syntax-rules-macro (lambda (e363c@e) ((lambda (e363e@t) ((lambda (e3640@ls/false) (if e3640@ls/false (apply (lambda (e3642@lits e3643@pat* e3644@tmp*) (begin (e2ece@verify-literals e3642@lits e363c@e) (e2e7e@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons e3642@lits (map (lambda (e3648@pat e3649@tmp) ((lambda (e364c@t) ((lambda (e364e@ls/false) (if e364e@ls/false (apply (lambda (e3650@rest) (list (cons 'g e3650@rest) (list 'syntax e3649@tmp))) e364e@ls/false) ((lambda (e3652@t) ((lambda (e3654@ls/false) (if e3654@ls/false (apply (lambda () (e2fb1@syntax-violation '#f '"invalid syntax-rules pattern" e363c@e e3648@pat)) e3654@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3652@t))) (e2ec8@syntax-dispatch e3652@t '_))) e364c@t))) (e2ec8@syntax-dispatch e364c@t '(_ . any)))) e3648@pat)) e3643@pat* e3644@tmp*)))))))) e3640@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e363e@t))) (e2ec8@syntax-dispatch e363e@t '(_ each-any . #(each (any any)))))) e363c@e))) (set! e2eb6@quasiquote-macro ((lambda () ((lambda (e3657@datum e3673@quasicons* e3675@quasicons e3677@quasiappend e3679@quasivector e367b@vquasi e367d@quasi) (begin (set! e3657@datum (lambda (e3758@x) (list (e2e52@scheme-stx 'quote) (e2ca5@mkstx e3758@x '() '() '())))) (set! e3673@quasicons* (lambda (e3750@x e3751@y) ((letrec ((e3754@f (lambda (e3756@x) (if (null? e3756@x) e3751@y (e3675@quasicons (car e3756@x) (e3754@f (cdr e3756@x))))))) e3754@f) e3750@x))) (set! e3675@quasicons (lambda (e372a@x e372b@y) ((lambda (e372e@t) ((lambda (e3730@ls/false) (if e3730@ls/false (apply (lambda (e3732@dy) ((lambda (e3734@t) ((lambda (e3736@ls/false) (if e3736@ls/false (apply (lambda (e3738@dx) (list (e2e52@scheme-stx 'quote) (cons e3738@dx e3732@dy))) e3736@ls/false) ((lambda (e373a@t) ((lambda (e373c@ls/false) (if e373c@ls/false (apply (lambda () ((lambda (e373e@t) ((lambda (e3740@ls/false) (if e3740@ls/false (apply (lambda () (list (e2e52@scheme-stx 'list) e372a@x)) e3740@ls/false) ((lambda (e3742@t) ((lambda (e3744@ls/false) (if e3744@ls/false (apply (lambda () (list (e2e52@scheme-stx 'cons) e372a@x e372b@y)) e3744@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3742@t))) (e2ec8@syntax-dispatch e3742@t '_))) e373e@t))) (e2ec8@syntax-dispatch e373e@t '()))) e3732@dy)) e373c@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e373a@t))) (e2ec8@syntax-dispatch e373a@t '_))) e3734@t))) (e2ec8@syntax-dispatch e3734@t '(#(scheme-id quote) any)))) e372a@x)) e3730@ls/false) ((lambda (e3746@t) ((lambda (e3748@ls/false) (if e3748@ls/false (apply (lambda (e374a@stuff) (cons* (e2e52@scheme-stx 'list) e372a@x e374a@stuff)) e3748@ls/false) ((lambda (e374c@t) ((lambda (e374e@ls/false) (if e374e@ls/false (apply (lambda () (list (e2e52@scheme-stx 'cons) e372a@x e372b@y)) e374e@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e374c@t))) (e2ec8@syntax-dispatch e374c@t '_))) e3746@t))) (e2ec8@syntax-dispatch e3746@t '(#(scheme-id list) . each-any)))) e372e@t))) (e2ec8@syntax-dispatch e372e@t '(#(scheme-id quote) any)))) e372b@y))) (set! e3677@quasiappend (lambda (e3710@x e3711@y) ((lambda (e3714@ls) (if (null? e3714@ls) (list (e2e52@scheme-stx 'quote) '()) (if (null? (cdr e3714@ls)) (car e3714@ls) (cons* (e2e52@scheme-stx 'append) e3714@ls)))) ((letrec ((e3716@f (lambda (e3718@x) (if (null? e3718@x) ((lambda (e371a@t) ((lambda (e371c@ls/false) (if e371c@ls/false (apply (lambda () '()) e371c@ls/false) ((lambda (e371e@t) ((lambda (e3720@ls/false) (if e3720@ls/false (apply (lambda () (list e3711@y)) e3720@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e371e@t))) (e2ec8@syntax-dispatch e371e@t '_))) e371a@t))) (e2ec8@syntax-dispatch e371a@t '(#(scheme-id quote) ())))) e3711@y) ((lambda (e3722@t) ((lambda (e3724@ls/false) (if e3724@ls/false (apply (lambda () (e3716@f (cdr e3718@x))) e3724@ls/false) ((lambda (e3726@t) ((lambda (e3728@ls/false) (if e3728@ls/false (apply (lambda () (cons (car e3718@x) (e3716@f (cdr e3718@x)))) e3728@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3726@t))) (e2ec8@syntax-dispatch e3726@t '_))) e3722@t))) (e2ec8@syntax-dispatch e3722@t '(#(scheme-id quote) ())))) (car e3718@x)))))) e3716@f) e3710@x)))) (set! e3679@quasivector (lambda (e36de@x) ((lambda (e36e0@pat-x) ((lambda (e36e2@t) ((lambda (e36e4@ls/false) (if e36e4@ls/false (apply (lambda (e36e6@x*) (list (e2e52@scheme-stx 'quote) (list->vector e36e6@x*))) e36e4@ls/false) ((lambda (e36e8@t) ((lambda (e36ea@ls/false) (if e36ea@ls/false (apply (lambda () ((letrec ((e36ec@f (lambda (e36ee@x e36ef@k) ((lambda (e36f2@t) ((lambda (e36f4@ls/false) (if e36f4@ls/false (apply (lambda (e36f6@x*) (e36ef@k (map (lambda (e36f8@x) (list (e2e52@scheme-stx 'quote) e36f8@x)) e36f6@x*))) e36f4@ls/false) ((lambda (e36fa@t) ((lambda (e36fc@ls/false) (if e36fc@ls/false (apply (lambda (e36fe@x*) (e36ef@k e36fe@x*)) e36fc@ls/false) ((lambda (e3700@t) ((lambda (e3702@ls/false) (if e3702@ls/false (apply (lambda (e3704@x e3705@y) (e36ec@f e3705@y (lambda (e3708@ls) (e36ef@k (cons e3704@x e3708@ls))))) e3702@ls/false) ((lambda (e370a@t) ((lambda (e370c@ls/false) (if e370c@ls/false (apply (lambda () (list (e2e52@scheme-stx 'list->vector) e36e0@pat-x)) e370c@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e370a@t))) (e2ec8@syntax-dispatch e370a@t '_))) e3700@t))) (e2ec8@syntax-dispatch e3700@t '(#(scheme-id cons) any any)))) e36fa@t))) (e2ec8@syntax-dispatch e36fa@t '(#(scheme-id list) . each-any)))) e36f2@t))) (e2ec8@syntax-dispatch e36f2@t '(#(scheme-id quote) each-any)))) e36ee@x)))) e36ec@f) e36de@x (lambda (e370e@ls) (cons* (e2e52@scheme-stx 'vector) e370e@ls)))) e36ea@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e36e8@t))) (e2ec8@syntax-dispatch e36e8@t '_))) e36e2@t))) (e2ec8@syntax-dispatch e36e2@t '(#(scheme-id quote) each-any)))) e36e0@pat-x)) e36de@x))) (set! e367b@vquasi (lambda (e36bc@p e36bd@lev) ((lambda (e36c0@t) ((lambda (e36c2@ls/false) (if e36c2@ls/false (apply (lambda (e36c4@p e36c5@q) ((lambda (e36c8@t) ((lambda (e36ca@ls/false) (if e36ca@ls/false (apply (lambda (e36cc@p) (if (= e36bd@lev '0) (e3673@quasicons* e36cc@p (e367b@vquasi e36c5@q e36bd@lev)) (e3675@quasicons (e3675@quasicons (e3657@datum 'unquote) (e367d@quasi e36cc@p (- e36bd@lev '1))) (e367b@vquasi e36c5@q e36bd@lev)))) e36ca@ls/false) ((lambda (e36ce@t) ((lambda (e36d0@ls/false) (if e36d0@ls/false (apply (lambda (e36d2@p) (if (= e36bd@lev '0) (e3677@quasiappend e36d2@p (e367b@vquasi e36c5@q e36bd@lev)) (e3675@quasicons (e3675@quasicons (e3657@datum 'unquote-splicing) (e367d@quasi e36d2@p (- e36bd@lev '1))) (e367b@vquasi e36c5@q e36bd@lev)))) e36d0@ls/false) ((lambda (e36d4@t) ((lambda (e36d6@ls/false) (if e36d6@ls/false (apply (lambda (e36d8@p) (e3675@quasicons (e367d@quasi e36d8@p e36bd@lev) (e367b@vquasi e36c5@q e36bd@lev))) e36d6@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e36d4@t))) (e2ec8@syntax-dispatch e36d4@t 'any))) e36ce@t))) (e2ec8@syntax-dispatch e36ce@t '(#(scheme-id unquote-splicing) . each-any)))) e36c8@t))) (e2ec8@syntax-dispatch e36c8@t '(#(scheme-id unquote) . each-any)))) e36c4@p)) e36c2@ls/false) ((lambda (e36da@t) ((lambda (e36dc@ls/false) (if e36dc@ls/false (apply (lambda () (list (e2e52@scheme-stx 'quote) '())) e36dc@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e36da@t))) (e2ec8@syntax-dispatch e36da@t '()))) e36c0@t))) (e2ec8@syntax-dispatch e36c0@t '(any . any)))) e36bc@p))) (set! e367d@quasi (lambda (e3686@p e3687@lev) ((lambda (e368a@t) ((lambda (e368c@ls/false) (if e368c@ls/false (apply (lambda (e368e@p) (if (= e3687@lev '0) e368e@p (e3675@quasicons (e3657@datum 'unquote) (e367d@quasi (list e368e@p) (- e3687@lev '1))))) e368c@ls/false) ((lambda (e3690@t) ((lambda (e3692@ls/false) (if e3692@ls/false (apply (lambda (e3694@p e3695@q) (if (= e3687@lev '0) (e3673@quasicons* e3694@p (e367d@quasi e3695@q e3687@lev)) (e3675@quasicons (e3675@quasicons (e3657@datum 'unquote) (e367d@quasi e3694@p (- e3687@lev '1))) (e367d@quasi e3695@q e3687@lev)))) e3692@ls/false) ((lambda (e3698@t) ((lambda (e369a@ls/false) (if e369a@ls/false (apply (lambda (e369c@p e369d@q) (if (= e3687@lev '0) (e3677@quasiappend e369c@p (e367d@quasi e369d@q e3687@lev)) (e3675@quasicons (e3675@quasicons (e3657@datum 'unquote-splicing) (e367d@quasi e369c@p (- e3687@lev '1))) (e367d@quasi e369d@q e3687@lev)))) e369a@ls/false) ((lambda (e36a0@t) ((lambda (e36a2@ls/false) (if e36a2@ls/false (apply (lambda (e36a4@p) (e3675@quasicons (e3657@datum 'quasiquote) (e367d@quasi (list e36a4@p) (+ e3687@lev '1)))) e36a2@ls/false) ((lambda (e36a6@t) ((lambda (e36a8@ls/false) (if e36a8@ls/false (apply (lambda (e36aa@p e36ab@q) (e3675@quasicons (e367d@quasi e36aa@p e3687@lev) (e367d@quasi e36ab@q e3687@lev))) e36a8@ls/false) ((lambda (e36ae@t) ((lambda (e36b0@ls/false) (if (and e36b0@ls/false (apply (lambda (e36b2@x) (not (e2c85@stx? e36b2@x))) e36b0@ls/false)) (apply (lambda (e36b4@x) (e3679@quasivector (e367b@vquasi e36b4@x e3687@lev))) e36b0@ls/false) ((lambda (e36b6@t) ((lambda (e36b8@ls/false) (if e36b8@ls/false (apply (lambda (e36ba@p) (list (e2e52@scheme-stx 'quote) e36ba@p)) e36b8@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e36b6@t))) (e2ec8@syntax-dispatch e36b6@t 'any))) e36ae@t))) (e2ec8@syntax-dispatch e36ae@t '#(vector each-any)))) e36a6@t))) (e2ec8@syntax-dispatch e36a6@t '(any . any)))) e36a0@t))) (e2ec8@syntax-dispatch e36a0@t '(#(scheme-id quasiquote) any)))) e3698@t))) (e2ec8@syntax-dispatch e3698@t '((#(scheme-id unquote-splicing) . each-any) . any)))) e3690@t))) (e2ec8@syntax-dispatch e3690@t '((#(scheme-id unquote) . each-any) . any)))) e368a@t))) (e2ec8@syntax-dispatch e368a@t '(#(scheme-id unquote) any)))) e3686@p))) (lambda (e367e@x) ((lambda (e3680@t) ((lambda (e3682@ls/false) (if e3682@ls/false (apply (lambda (e3684@e) (e367d@quasi e3684@e '0)) e3682@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3680@t))) (e2ec8@syntax-dispatch e3680@t '(_ any)))) e367e@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! e2eb8@quasisyntax-macro ((lambda () ((lambda (e375b@quasi) (begin (set! e375b@quasi (lambda (e3776@p e3777@lev) ((lambda (e377a@t) ((lambda (e377c@ls/false) (if e377c@ls/false (apply (lambda (e377e@p) (if (= e3777@lev '0) ((lambda (e3780@g) (values (list e3780@g) (list e377e@p) e3780@g)) (gensym)) (call-with-values (lambda () (e375b@quasi e377e@p (- e3777@lev '1))) (lambda (e3788@e3783 e3789@e3785 e378a@e3787) ((lambda (e378e@p e378f@rhs* e3790@lhs*) (values e3790@lhs* e378f@rhs* (list 'unsyntax e378e@p))) e378a@e3787 e3789@e3785 e3788@e3783))))) e377c@ls/false) ((lambda (e3794@t) ((lambda (e3796@ls/false) (if (and e3796@ls/false (apply (lambda () (= e3777@lev '0)) e3796@ls/false)) (apply (lambda () (e2fb1@syntax-violation '#f '"incorrect use of unsyntax" e3776@p)) e3796@ls/false) ((lambda (e3798@t) ((lambda (e379a@ls/false) (if e379a@ls/false (apply (lambda (e379c@p* e379d@q) (call-with-values (lambda () (e375b@quasi e379d@q e3777@lev)) (lambda (e37a6@e37a1 e37a7@e37a3 e37a8@e37a5) ((lambda (e37ac@q e37ad@rhs* e37ae@lhs*) (if (= e3777@lev '0) ((lambda (e37b2@g*) (values (append e37b2@g* e37ae@lhs*) (append e379c@p* e37ad@rhs*) (append e37b2@g* e37ac@q))) (map (lambda (e37b4@x) (gensym)) e379c@p*)) (call-with-values (lambda () (e375b@quasi e379c@p* (- e3777@lev '1))) (lambda (e37bc@e37b7 e37bd@e37b9 e37be@e37bb) ((lambda (e37c2@p* e37c3@rhs2* e37c4@lhs2*) (values (append e37c4@lhs2* e37ae@lhs*) (append e37c3@rhs2* e37ad@rhs*) (cons (cons 'unsyntax e37c2@p*) e37ac@q))) e37be@e37bb e37bd@e37b9 e37bc@e37b7))))) e37a8@e37a5 e37a7@e37a3 e37a6@e37a1)))) e379a@ls/false) ((lambda (e37c8@t) ((lambda (e37ca@ls/false) (if e37ca@ls/false (apply (lambda (e37cc@p* e37cd@q) (call-with-values (lambda () (e375b@quasi e37cd@q e3777@lev)) (lambda (e37d6@e37d1 e37d7@e37d3 e37d8@e37d5) ((lambda (e37dc@q e37dd@rhs* e37de@lhs*) (if (= e3777@lev '0) ((lambda (e37e2@g*) (values (append (map (lambda (e37e4@g) (cons e37e4@g '(...))) e37e2@g*) e37de@lhs*) (append e37cc@p* e37dd@rhs*) (append (apply append (map (lambda (e37e6@g) (cons e37e6@g '(...))) e37e2@g*)) e37dc@q))) (map (lambda (e37e8@x) (gensym)) e37cc@p*)) (call-with-values (lambda () (e375b@quasi e37cc@p* (- e3777@lev '1))) (lambda (e37f0@e37eb e37f1@e37ed e37f2@e37ef) ((lambda (e37f6@p* e37f7@rhs2* e37f8@lhs2*) (values (append e37f8@lhs2* e37de@lhs*) (append e37f7@rhs2* e37dd@rhs*) (cons (cons 'unsyntax-splicing e37f6@p*) e37dc@q))) e37f2@e37ef e37f1@e37ed e37f0@e37eb))))) e37d8@e37d5 e37d7@e37d3 e37d6@e37d1)))) e37ca@ls/false) ((lambda (e37fc@t) ((lambda (e37fe@ls/false) (if (and e37fe@ls/false (apply (lambda () (= e3777@lev '0)) e37fe@ls/false)) (apply (lambda () (e2fb1@syntax-violation '#f '"incorrect use of unsyntax-splicing" e3776@p)) e37fe@ls/false) ((lambda (e3800@t) ((lambda (e3802@ls/false) (if e3802@ls/false (apply (lambda (e3804@p) (call-with-values (lambda () (e375b@quasi e3804@p (+ e3777@lev '1))) (lambda (e380c@e3807 e380d@e3809 e380e@e380b) ((lambda (e3812@p e3813@rhs* e3814@lhs*) (values e3814@lhs* e3813@rhs* (list 'quasisyntax e3812@p))) e380e@e380b e380d@e3809 e380c@e3807)))) e3802@ls/false) ((lambda (e3818@t) ((lambda (e381a@ls/false) (if e381a@ls/false (apply (lambda (e381c@p e381d@q) (call-with-values (lambda () (e375b@quasi e381c@p e3777@lev)) (lambda (e382c@e3821 e382d@e3823 e382e@e3825) (call-with-values (lambda () (e375b@quasi e381d@q e3777@lev)) (lambda (e3832@e3827 e3833@e3829 e3834@e382b) ((lambda (e3838@q e3839@rhs2* e383a@lhs2* e383b@p e383c@rhs* e383d@lhs*) (values (append e383a@lhs2* e383d@lhs*) (append e3839@rhs2* e383c@rhs*) (cons e383b@p e3838@q))) e3834@e382b e3833@e3829 e3832@e3827 e382e@e3825 e382d@e3823 e382c@e3821)))))) e381a@ls/false) ((lambda (e3844@t) ((lambda (e3846@ls/false) (if e3846@ls/false (apply (lambda (e3848@x*) (call-with-values (lambda () (e375b@quasi e3848@x* e3777@lev)) (lambda (e3850@e384b e3851@e384d e3852@e384f) ((lambda (e3856@x* e3857@rhs* e3858@lhs*) (values e3858@lhs* e3857@rhs* (list->vector e3856@x*))) e3852@e384f e3851@e384d e3850@e384b)))) e3846@ls/false) ((lambda (e385c@t) ((lambda (e385e@ls/false) (if e385e@ls/false (apply (lambda () (values '() '() e3776@p)) e385e@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e385c@t))) (e2ec8@syntax-dispatch e385c@t '_))) e3844@t))) (e2ec8@syntax-dispatch e3844@t '#(vector each-any)))) e3818@t))) (e2ec8@syntax-dispatch e3818@t '(any . any)))) e3800@t))) (e2ec8@syntax-dispatch e3800@t '(#(scheme-id quasisyntax) any)))) e37fc@t))) (e2ec8@syntax-dispatch e37fc@t '#(scheme-id unsyntax-splicing)))) e37c8@t))) (e2ec8@syntax-dispatch e37c8@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) e3798@t))) (e2ec8@syntax-dispatch e3798@t '((#(scheme-id unsyntax) . each-any) . any)))) e3794@t))) (e2ec8@syntax-dispatch e3794@t '#(scheme-id unsyntax)))) e377a@t))) (e2ec8@syntax-dispatch e377a@t '(#(scheme-id unsyntax) any)))) e3776@p))) (lambda (e375c@x) ((lambda (e375e@t) ((lambda (e3760@ls/false) (if e3760@ls/false (apply (lambda (e3762@e) (call-with-values (lambda () (e375b@quasi e3762@e '0)) (lambda (e376a@e3765 e376b@e3767 e376c@e3769) ((lambda (e3770@v e3771@rhs* e3772@lhs*) (e2e7e@bless (list 'syntax-case (cons 'list e3771@rhs*) '() (list e3772@lhs* (list 'syntax e3770@v))))) e376c@e3769 e376b@e3767 e376a@e3765)))) e3760@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e375e@t))) (e2ec8@syntax-dispatch e375e@t '(_ any)))) e375c@x)))) '#f)))) (set! e2eba@define-struct-macro (lambda (e3860@stx) (e2fb1@syntax-violation '#f '"define-struct not supported" e3860@stx))) (set! e2ebc@define-record-type-macro (lambda (e3862@x) ((lambda (e3865@id e3867@get-record-name e3869@get-record-constructor-name e386b@get-record-predicate-name e386d@get-clause e386f@foo-rtd-code e3871@parent-rtd-code e3873@parent-rcd-code e3875@foo-rcd-code e3877@get-protocol-code e3879@get-fields e387b@get-mutator-indices e387d@get-mutators e387f@get-accessors e3881@enumerate e3883@do-define-record e3885@verify-clauses) (begin (set! e3865@id (lambda (e3a58@ctxt . e3a5a@str*) (e2fb5@datum->syntax e3a58@ctxt (string->symbol (apply string-append (map (lambda (e3a5c@x) (if (symbol? e3a5c@x) (symbol->string e3a5c@x) (if (string? e3a5c@x) e3a5c@x (assertion-violation 'define-record-type '"BUG")))) e3a5a@str*)))))) (set! e3867@get-record-name (lambda (e3a46@spec) ((lambda (e3a48@t) ((lambda (e3a4a@ls/false) (if e3a4a@ls/false (apply (lambda (e3a4c@foo e3a4d@make-foo e3a4e@foo?) e3a4c@foo) e3a4a@ls/false) ((lambda (e3a52@t) ((lambda (e3a54@ls/false) (if e3a54@ls/false (apply (lambda (e3a56@foo) e3a56@foo) e3a54@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3a52@t))) (e2ec8@syntax-dispatch e3a52@t 'any))) e3a48@t))) (e2ec8@syntax-dispatch e3a48@t '(any any any)))) e3a46@spec))) (set! e3869@get-record-constructor-name (lambda (e3a32@spec) ((lambda (e3a34@t) ((lambda (e3a36@ls/false) (if e3a36@ls/false (apply (lambda (e3a38@foo e3a39@make-foo e3a3a@foo?) e3a39@make-foo) e3a36@ls/false) ((lambda (e3a3e@t) ((lambda (e3a40@ls/false) (if (and e3a40@ls/false (apply (lambda (e3a42@foo) (e2cbd@id? e3a42@foo)) e3a40@ls/false)) (apply (lambda (e3a44@foo) (e3865@id e3a44@foo '"make-" (e2cd3@stx->datum e3a44@foo))) e3a40@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3a3e@t))) (e2ec8@syntax-dispatch e3a3e@t 'any))) e3a34@t))) (e2ec8@syntax-dispatch e3a34@t '(any any any)))) e3a32@spec))) (set! e386b@get-record-predicate-name (lambda (e3a1e@spec) ((lambda (e3a20@t) ((lambda (e3a22@ls/false) (if e3a22@ls/false (apply (lambda (e3a24@foo e3a25@make-foo e3a26@foo?) e3a26@foo?) e3a22@ls/false) ((lambda (e3a2a@t) ((lambda (e3a2c@ls/false) (if (and e3a2c@ls/false (apply (lambda (e3a2e@foo) (e2cbd@id? e3a2e@foo)) e3a2c@ls/false)) (apply (lambda (e3a30@foo) (e3865@id e3a30@foo (e2cd3@stx->datum e3a30@foo) '"?")) e3a2c@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3a2a@t))) (e2ec8@syntax-dispatch e3a2a@t 'any))) e3a20@t))) (e2ec8@syntax-dispatch e3a20@t '(any any any)))) e3a1e@spec))) (set! e386d@get-clause (lambda (e3a0c@id e3a0d@ls) ((lambda (e3a10@t) ((lambda (e3a12@ls/false) (if e3a12@ls/false (apply (lambda () '#f) e3a12@ls/false) ((lambda (e3a14@t) ((lambda (e3a16@ls/false) (if e3a16@ls/false (apply (lambda (e3a18@x e3a19@rest e3a1a@ls) (if (e2cc5@free-id=? (e2e7e@bless e3a0c@id) e3a18@x) (cons e3a18@x e3a19@rest) (e386d@get-clause e3a0c@id e3a1a@ls))) e3a16@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3a14@t))) (e2ec8@syntax-dispatch e3a14@t '((any . any) . any)))) e3a10@t))) (e2ec8@syntax-dispatch e3a10@t '()))) e3a0d@ls))) (set! e386f@foo-rtd-code (lambda (e39ba@name e39bb@clause* e39bc@parent-rtd-code) ((lambda (e39c1@convert-field-spec*) (begin (set! e39c1@convert-field-spec* (lambda (e39f2@ls) (list->vector (map (lambda (e39f4@x) ((lambda (e39f6@t) ((lambda (e39f8@ls/false) (if e39f8@ls/false (apply (lambda (e39fa@name e39fb@rest) (list 'mutable e39fa@name)) e39f8@ls/false) ((lambda (e39fe@t) ((lambda (e3a00@ls/false) (if e3a00@ls/false (apply (lambda (e3a02@name e3a03@rest) (list 'immutable e3a02@name)) e3a00@ls/false) ((lambda (e3a06@t) ((lambda (e3a08@ls/false) (if e3a08@ls/false (apply (lambda (e3a0a@name) (list 'immutable e3a0a@name)) e3a08@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3a06@t))) (e2ec8@syntax-dispatch e3a06@t 'any))) e39fe@t))) (e2ec8@syntax-dispatch e39fe@t '(#(scheme-id immutable) any . any)))) e39f6@t))) (e2ec8@syntax-dispatch e39f6@t '(#(scheme-id mutable) any . any)))) e39f4@x)) e39f2@ls)))) ((lambda (e39c2@uid-code e39c3@sealed? e39c4@opaque? e39c5@fields) (e2e7e@bless (list 'make-record-type-descriptor (list 'quote e39ba@name) e39bc@parent-rtd-code e39c2@uid-code e39c3@sealed? e39c4@opaque? e39c5@fields))) ((lambda (e39ca@t) ((lambda (e39cc@ls/false) (if e39cc@ls/false (apply (lambda () (list 'quote (gensym))) e39cc@ls/false) ((lambda (e39ce@t) ((lambda (e39d0@ls/false) (if e39d0@ls/false (apply (lambda (e39d2@uid) (list 'quote e39d2@uid)) e39d0@ls/false) ((lambda (e39d4@t) ((lambda (e39d6@ls/false) (if e39d6@ls/false (apply (lambda () '#f) e39d6@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e39d4@t))) (e2ec8@syntax-dispatch e39d4@t '_))) e39ce@t))) (e2ec8@syntax-dispatch e39ce@t '(_ any)))) e39ca@t))) (e2ec8@syntax-dispatch e39ca@t '(_)))) (e386d@get-clause 'nongenerative e39bb@clause*)) ((lambda (e39d8@t) ((lambda (e39da@ls/false) (if e39da@ls/false (apply (lambda () '#t) e39da@ls/false) ((lambda (e39dc@t) ((lambda (e39de@ls/false) (if e39de@ls/false (apply (lambda () '#f) e39de@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e39dc@t))) (e2ec8@syntax-dispatch e39dc@t '_))) e39d8@t))) (e2ec8@syntax-dispatch e39d8@t '(_ #(atom #t))))) (e386d@get-clause 'sealed e39bb@clause*)) ((lambda (e39e0@t) ((lambda (e39e2@ls/false) (if e39e2@ls/false (apply (lambda () '#t) e39e2@ls/false) ((lambda (e39e4@t) ((lambda (e39e6@ls/false) (if e39e6@ls/false (apply (lambda () '#f) e39e6@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e39e4@t))) (e2ec8@syntax-dispatch e39e4@t '_))) e39e0@t))) (e2ec8@syntax-dispatch e39e0@t '(_ #(atom #t))))) (e386d@get-clause 'opaque e39bb@clause*)) ((lambda (e39e8@t) ((lambda (e39ea@ls/false) (if e39ea@ls/false (apply (lambda (e39ec@field-spec*) (list 'quote (e39c1@convert-field-spec* e39ec@field-spec*))) e39ea@ls/false) ((lambda (e39ee@t) ((lambda (e39f0@ls/false) (if e39f0@ls/false (apply (lambda () ''#()) e39f0@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e39ee@t))) (e2ec8@syntax-dispatch e39ee@t '_))) e39e8@t))) (e2ec8@syntax-dispatch e39e8@t '(_ . each-any)))) (e386d@get-clause 'fields e39bb@clause*))))) '#f))) (set! e3871@parent-rtd-code (lambda (e39a2@clause*) ((lambda (e39a4@t) ((lambda (e39a6@ls/false) (if e39a6@ls/false (apply (lambda (e39a8@name) (list 'record-type-descriptor e39a8@name)) e39a6@ls/false) ((lambda (e39aa@t) ((lambda (e39ac@ls/false) (if e39ac@ls/false (apply (lambda () ((lambda (e39ae@t) ((lambda (e39b0@ls/false) (if e39b0@ls/false (apply (lambda (e39b2@rtd e39b3@rcd) e39b2@rtd) e39b0@ls/false) ((lambda (e39b6@t) ((lambda (e39b8@ls/false) (if e39b8@ls/false (apply (lambda () '#f) e39b8@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e39b6@t))) (e2ec8@syntax-dispatch e39b6@t '#(atom #f)))) e39ae@t))) (e2ec8@syntax-dispatch e39ae@t '(_ any any)))) (e386d@get-clause 'parent-rtd e39a2@clause*))) e39ac@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e39aa@t))) (e2ec8@syntax-dispatch e39aa@t '#(atom #f)))) e39a4@t))) (e2ec8@syntax-dispatch e39a4@t '(_ any)))) (e386d@get-clause 'parent e39a2@clause*)))) (set! e3873@parent-rcd-code (lambda (e398a@clause*) ((lambda (e398c@t) ((lambda (e398e@ls/false) (if e398e@ls/false (apply (lambda (e3990@name) (list 'record-constructor-descriptor e3990@name)) e398e@ls/false) ((lambda (e3992@t) ((lambda (e3994@ls/false) (if e3994@ls/false (apply (lambda () ((lambda (e3996@t) ((lambda (e3998@ls/false) (if e3998@ls/false (apply (lambda (e399a@rtd e399b@rcd) e399b@rcd) e3998@ls/false) ((lambda (e399e@t) ((lambda (e39a0@ls/false) (if e39a0@ls/false (apply (lambda () '#f) e39a0@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e399e@t))) (e2ec8@syntax-dispatch e399e@t '#(atom #f)))) e3996@t))) (e2ec8@syntax-dispatch e3996@t '(_ any any)))) (e386d@get-clause 'parent-rtd e398a@clause*))) e3994@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3992@t))) (e2ec8@syntax-dispatch e3992@t '#(atom #f)))) e398c@t))) (e2ec8@syntax-dispatch e398c@t '(_ any)))) (e386d@get-clause 'parent e398a@clause*)))) (set! e3875@foo-rcd-code (lambda (e3982@clause* e3983@foo-rtd e3984@protocol e3985@parent-rcd-code) (list 'make-record-constructor-descriptor e3983@foo-rtd e3985@parent-rcd-code e3984@protocol))) (set! e3877@get-protocol-code (lambda (e3976@clause*) ((lambda (e3978@t) ((lambda (e397a@ls/false) (if e397a@ls/false (apply (lambda (e397c@expr) e397c@expr) e397a@ls/false) ((lambda (e397e@t) ((lambda (e3980@ls/false) (if e3980@ls/false (apply (lambda () '#f) e3980@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e397e@t))) (e2ec8@syntax-dispatch e397e@t '_))) e3978@t))) (e2ec8@syntax-dispatch e3978@t '(_ any)))) (e386d@get-clause 'protocol e3976@clause*)))) (set! e3879@get-fields (lambda (e3964@clause*) ((lambda (e3966@t) ((lambda (e3968@ls/false) (if e3968@ls/false (apply (lambda () '()) e3968@ls/false) ((lambda (e396a@t) ((lambda (e396c@ls/false) (if e396c@ls/false (apply (lambda (e396e@f*) e396e@f*) e396c@ls/false) ((lambda (e3970@t) ((lambda (e3972@ls/false) (if e3972@ls/false (apply (lambda (e3974@rest) (e3879@get-fields e3974@rest)) e3972@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3970@t))) (e2ec8@syntax-dispatch e3970@t '(_ . any)))) e396a@t))) (e2ec8@syntax-dispatch e396a@t '((#(scheme-id fields) . each-any) . _)))) e3966@t))) (e2ec8@syntax-dispatch e3966@t '()))) e3964@clause*))) (set! e387b@get-mutator-indices (lambda (e394c@fields) ((letrec ((e394e@f (lambda (e3950@fields e3951@i) ((lambda (e3954@t) ((lambda (e3956@ls/false) (if e3956@ls/false (apply (lambda () '()) e3956@ls/false) ((lambda (e3958@t) ((lambda (e395a@ls/false) (if e395a@ls/false (apply (lambda (e395c@rest) (cons e3951@i (e394e@f e395c@rest (+ e3951@i '1)))) e395a@ls/false) ((lambda (e395e@t) ((lambda (e3960@ls/false) (if e3960@ls/false (apply (lambda (e3962@rest) (e394e@f e3962@rest (+ e3951@i '1))) e3960@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e395e@t))) (e2ec8@syntax-dispatch e395e@t '(_ . any)))) e3958@t))) (e2ec8@syntax-dispatch e3958@t '((#(scheme-id mutable) . _) . any)))) e3954@t))) (e2ec8@syntax-dispatch e3954@t '()))) e3950@fields)))) e394e@f) e394c@fields '0))) (set! e387d@get-mutators (lambda (e3922@foo e3923@fields) ((lambda (e3927@gen-name) (begin (set! e3927@gen-name (lambda (e394a@x) (e2fb5@datum->syntax e3922@foo (string->symbol (string-append (symbol->string (e2fb7@syntax->datum e3922@foo)) '"-" (symbol->string (e2fb7@syntax->datum e394a@x)) '"-set!"))))) ((letrec ((e3928@f (lambda (e392a@fields) ((lambda (e392c@t) ((lambda (e392e@ls/false) (if e392e@ls/false (apply (lambda () '()) e392e@ls/false) ((lambda (e3930@t) ((lambda (e3932@ls/false) (if e3932@ls/false (apply (lambda (e3934@name e3935@accessor e3936@mutator e3937@rest) (cons e3936@mutator (e3928@f e3937@rest))) e3932@ls/false) ((lambda (e393c@t) ((lambda (e393e@ls/false) (if e393e@ls/false (apply (lambda (e3940@name e3941@rest) (cons (e3927@gen-name e3940@name) (e3928@f e3941@rest))) e393e@ls/false) ((lambda (e3944@t) ((lambda (e3946@ls/false) (if e3946@ls/false (apply (lambda (e3948@rest) (e3928@f e3948@rest)) e3946@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3944@t))) (e2ec8@syntax-dispatch e3944@t '(_ . any)))) e393c@t))) (e2ec8@syntax-dispatch e393c@t '((#(scheme-id mutable) any) . any)))) e3930@t))) (e2ec8@syntax-dispatch e3930@t '((#(scheme-id mutable) any any any) . any)))) e392c@t))) (e2ec8@syntax-dispatch e392c@t '()))) e392a@fields)))) e3928@f) e3923@fields))) '#f))) (set! e387f@get-accessors (lambda (e38de@foo e38df@fields) ((lambda (e38e3@gen-name) (begin (set! e38e3@gen-name (lambda (e3920@x) (e2fb5@datum->syntax e38de@foo (string->symbol (string-append (symbol->string (e2fb7@syntax->datum e38de@foo)) '"-" (symbol->string (e2fb7@syntax->datum e3920@x))))))) (map (lambda (e38e4@field) ((lambda (e38e6@t) ((lambda (e38e8@ls/false) (if (and e38e8@ls/false (apply (lambda (e38ea@name e38eb@accessor e38ec@mutator) (e2cbd@id? e38eb@accessor)) e38e8@ls/false)) (apply (lambda (e38f0@name e38f1@accessor e38f2@mutator) e38f1@accessor) e38e8@ls/false) ((lambda (e38f6@t) ((lambda (e38f8@ls/false) (if (and e38f8@ls/false (apply (lambda (e38fa@name e38fb@accessor) (e2cbd@id? e38fb@accessor)) e38f8@ls/false)) (apply (lambda (e38fe@name e38ff@accessor) e38ff@accessor) e38f8@ls/false) ((lambda (e3902@t) ((lambda (e3904@ls/false) (if (and e3904@ls/false (apply (lambda (e3906@name) (e2cbd@id? e3906@name)) e3904@ls/false)) (apply (lambda (e3908@name) (e38e3@gen-name e3908@name)) e3904@ls/false) ((lambda (e390a@t) ((lambda (e390c@ls/false) (if (and e390c@ls/false (apply (lambda (e390e@name) (e2cbd@id? e390e@name)) e390c@ls/false)) (apply (lambda (e3910@name) (e38e3@gen-name e3910@name)) e390c@ls/false) ((lambda (e3912@t) ((lambda (e3914@ls/false) (if (and e3914@ls/false (apply (lambda (e3916@name) (e2cbd@id? e3916@name)) e3914@ls/false)) (apply (lambda (e3918@name) (e38e3@gen-name e3918@name)) e3914@ls/false) ((lambda (e391a@t) ((lambda (e391c@ls/false) (if e391c@ls/false (apply (lambda (e391e@others) (e2fb1@syntax-violation '#f '"invalid field spec" e38e4@field)) e391c@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e391a@t))) (e2ec8@syntax-dispatch e391a@t 'any))) e3912@t))) (e2ec8@syntax-dispatch e3912@t 'any))) e390a@t))) (e2ec8@syntax-dispatch e390a@t '(#(scheme-id immutable) any)))) e3902@t))) (e2ec8@syntax-dispatch e3902@t '(#(scheme-id mutable) any)))) e38f6@t))) (e2ec8@syntax-dispatch e38f6@t '(#(scheme-id immutable) any any)))) e38e6@t))) (e2ec8@syntax-dispatch e38e6@t '(#(scheme-id mutable) any any any)))) e38e4@field)) e38df@fields))) '#f))) (set! e3881@enumerate (lambda (e38d6@ls) ((letrec ((e38d8@f (lambda (e38da@ls e38db@i) (if (null? e38da@ls) '() (cons e38db@i (e38d8@f (cdr e38da@ls) (+ e38db@i '1))))))) e38d8@f) e38d6@ls '0))) (set! e3883@do-define-record (lambda (e38ae@namespec e38af@clause*) ((lambda (e38b2@foo) ((lambda (e38b4@foo-rtd) ((lambda (e38b6@foo-rcd) ((lambda (e38b8@protocol) ((lambda (e38ba@make-foo) ((lambda (e38bc@fields) ((lambda (e38be@idx*) ((lambda (e38c0@foo-x*) ((lambda (e38c2@set-foo-x!*) ((lambda (e38c4@set-foo-idx*) ((lambda (e38c6@foo?) ((lambda (e38c8@foo-rtd-code) ((lambda (e38ca@foo-rcd-code) ((lambda (e38cc@protocol-code) ((lambda () (e2e7e@bless (cons 'begin (cons (list 'define e38b4@foo-rtd e38c8@foo-rtd-code) (cons (list 'define e38b8@protocol e38cc@protocol-code) (cons (list 'define e38b6@foo-rcd e38ca@foo-rcd-code) (cons (list 'define-syntax e38b2@foo (list 'list ''$rtd (list 'syntax e38b4@foo-rtd) (list 'syntax e38b6@foo-rcd))) (cons (list 'define e38c6@foo? (list 'record-predicate e38b4@foo-rtd)) (cons (list 'define e38ba@make-foo (list 'record-constructor e38b6@foo-rcd)) (append (map (lambda (e38ce@foo-x e38cf@idx) (list 'define e38ce@foo-x (list 'record-accessor e38b4@foo-rtd e38cf@idx))) e38c0@foo-x* e38be@idx*) (map (lambda (e38d2@set-foo-x! e38d3@idx) (list 'define e38d2@set-foo-x! (list 'record-mutator e38b4@foo-rtd e38d3@idx))) e38c2@set-foo-x!* e38c4@set-foo-idx*))))))))))))) (e3877@get-protocol-code e38af@clause*))) (e3875@foo-rcd-code e38af@clause* e38b4@foo-rtd e38b8@protocol (e3873@parent-rcd-code e38af@clause*)))) (e386f@foo-rtd-code e38b2@foo e38af@clause* (e3871@parent-rtd-code e38af@clause*)))) (e386b@get-record-predicate-name e38ae@namespec))) (e387b@get-mutator-indices e38bc@fields))) (e387d@get-mutators e38b2@foo e38bc@fields))) (e387f@get-accessors e38b2@foo e38bc@fields))) (e3881@enumerate e38bc@fields))) (e3879@get-fields e38af@clause*))) (e3869@get-record-constructor-name e38ae@namespec))) (gensym))) (gensym))) (gensym))) (e3867@get-record-name e38ae@namespec)))) (set! e3885@verify-clauses (lambda (e388e@x e388f@cls*) ((lambda (e3893@valid-kwds e3895@free-id-member?) (begin (set! e3893@valid-kwds (map e2e7e@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! e3895@free-id-member? (lambda (e38aa@x e38ab@ls) (and (pair? e38ab@ls) (or (e2cc5@free-id=? e38aa@x (car e38ab@ls)) (e3895@free-id-member? e38aa@x (cdr e38ab@ls)))))) ((letrec ((e3896@f (lambda (e3898@cls* e3899@seen*) (if (not (null? e3898@cls*)) ((lambda (e389c@t) ((lambda (e389e@ls/false) (if e389e@ls/false (apply (lambda (e38a0@kwd e38a1@rest) (if (or (not (e2cbd@id? e38a0@kwd)) (not (e3895@free-id-member? e38a0@kwd e3893@valid-kwds))) (e2fb1@syntax-violation '#f '"not a valid define-record-type keyword" e38a0@kwd) (if (e2ccb@bound-id-member? e38a0@kwd e3899@seen*) (e2fb1@syntax-violation '#f '"duplicate use of keyword " e388e@x e38a0@kwd) (e3896@f (cdr e3898@cls*) (cons e38a0@kwd e3899@seen*))))) e389e@ls/false) ((lambda (e38a4@t) ((lambda (e38a6@ls/false) (if e38a6@ls/false (apply (lambda (e38a8@cls) (e2fb1@syntax-violation '#f '"malformed define-record-type clause" e38a8@cls)) e38a6@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e38a4@t))) (e2ec8@syntax-dispatch e38a4@t 'any))) e389c@t))) (e2ec8@syntax-dispatch e389c@t '(any . any)))) (car e3898@cls*)) (void))))) e3896@f) e388f@cls* '()))) '#f '#f))) ((lambda (e3886@t) ((lambda (e3888@ls/false) (if e3888@ls/false (apply (lambda (e388a@namespec e388b@clause*) (begin (e3885@verify-clauses e3862@x e388b@clause*) (e3883@do-define-record e388a@namespec e388b@clause*))) e3888@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3886@t))) (e2ec8@syntax-dispatch e3886@t '(_ any . each-any)))) e3862@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! e2ebe@define-condition-type-macro (lambda (e3a5e@x) ((lambda (e3a61@mkname) (begin (set! e3a61@mkname (lambda (e3a8e@name e3a8f@suffix) (e2fb5@datum->syntax e3a8e@name (string->symbol (string-append (symbol->string (e2fb7@syntax->datum e3a8e@name)) e3a8f@suffix))))) ((lambda (e3a62@t) ((lambda (e3a64@ls/false) (if (and e3a64@ls/false (apply (lambda (e3a66@ctxt e3a67@name e3a68@super e3a69@constructor e3a6a@predicate e3a6b@field* e3a6c@accessor*) (and (e2cbd@id? e3a67@name) (e2cbd@id? e3a68@super) (e2cbd@id? e3a69@constructor) (e2cbd@id? e3a6a@predicate) (for-all e2cbd@id? e3a6b@field*) (for-all e2cbd@id? e3a6c@accessor*))) e3a64@ls/false)) (apply (lambda (e3a74@ctxt e3a75@name e3a76@super e3a77@constructor e3a78@predicate e3a79@field* e3a7a@accessor*) ((lambda (e3a82@aux-accessor*) (e2e7e@bless (cons 'begin (cons (cons 'define-record-type (cons (list e3a75@name e3a77@constructor (gensym)) (cons (list 'parent e3a76@super) (cons (cons 'fields (map (lambda (e3a84@field e3a85@aux) (list 'immutable e3a84@field e3a85@aux)) e3a79@field* e3a82@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define e3a78@predicate (list 'condition-predicate (list 'record-type-descriptor e3a75@name))) (map (lambda (e3a88@accessor e3a89@aux) (list 'define e3a88@accessor (list 'condition-accessor (list 'record-type-descriptor e3a75@name) e3a89@aux))) e3a7a@accessor* e3a82@aux-accessor*)))))) (map (lambda (e3a8c@x) (gensym)) e3a7a@accessor*))) e3a64@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3a62@t))) (e2ec8@syntax-dispatch e3a62@t '(any any any any any . #(each (any any)))))) e3a5e@x))) '#f))) (set! e2ec0@incorrect-usage-macro (lambda (e3a92@e) (e2fb1@syntax-violation '#f '"incorrect usage of auxiliary keyword" e3a92@e))) (set! e2ec2@parameterize-macro (lambda (e3a94@e) ((lambda (e3a96@t) ((lambda (e3a98@ls/false) (if e3a98@ls/false (apply (lambda (e3a9a@b e3a9b@b*) (e2e7e@bless (cons 'let (cons '() (cons e3a9a@b e3a9b@b*))))) e3a98@ls/false) ((lambda (e3a9e@t) ((lambda (e3aa0@ls/false) (if e3aa0@ls/false (apply (lambda (e3aa2@olhs* e3aa3@orhs* e3aa4@b e3aa5@b*) ((lambda (e3aaa@lhs* e3aab@rhs*) (e2e7e@bless (cons (list 'lambda (append e3aaa@lhs* e3aab@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (e3aae@lhs e3aaf@rhs) (list 'let (list (list 't (list e3aae@lhs))) (list e3aae@lhs e3aaf@rhs) (cons 'set! (cons e3aaf@rhs '(t))))) e3aaa@lhs* e3aab@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons e3aa4@b e3aa5@b*))) '(swap)))))) (append e3aa2@olhs* e3aa3@orhs*)))) (e2f9f@generate-temporaries e3aa2@olhs*) (e2f9f@generate-temporaries e3aa3@orhs*))) e3aa0@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3a9e@t))) (e2ec8@syntax-dispatch e3a9e@t '(_ #(each (any any)) any . each-any)))) e3a96@t))) (e2ec8@syntax-dispatch e3a96@t '(_ () any . each-any)))) e3a94@e))) (set! e2ec4@foreign-call-transformer (lambda (e3ab2@e e3ab3@r e3ab4@mr) ((lambda (e3ab8@t) ((lambda (e3aba@ls/false) (if e3aba@ls/false (apply (lambda (e3abc@name e3abd@arg*) (cons 'foreign-call (cons (e2eea@chi-expr e3abc@name e3ab3@r e3ab4@mr) (e2ee6@chi-expr* e3abd@arg* e3ab3@r e3ab4@mr)))) e3aba@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3ab8@t))) (e2ec8@syntax-dispatch e3ab8@t '(_ any . each-any)))) e3ab2@e))) (set! e2ec6@convert-pattern (lambda (e3ac0@pattern e3ac1@keys) ((lambda (e3ac5@cvt* e3ac7@cvt) (begin (set! e3ac5@cvt* (lambda (e3b64@p* e3b65@n e3b66@ids) (if (null? e3b64@p*) (values '() e3b66@ids) (call-with-values (lambda () (e3ac5@cvt* (cdr e3b64@p*) e3b65@n e3b66@ids)) (lambda (e3b6e@e3b6b e3b6f@e3b6d) ((lambda (e3b72@ids e3b73@y) (call-with-values (lambda () (e3ac7@cvt (car e3b64@p*) e3b65@n e3b72@ids)) (lambda (e3b7a@e3b77 e3b7b@e3b79) ((lambda (e3b7e@ids e3b7f@x) (values (cons e3b7f@x e3b73@y) e3b7e@ids)) e3b7b@e3b79 e3b7a@e3b77)))) e3b6f@e3b6d e3b6e@e3b6b)))))) (set! e3ac7@cvt (lambda (e3ac8@p e3ac9@n e3aca@ids) ((lambda (e3ace@t) ((lambda (e3ad0@ls/false) (if (and e3ad0@ls/false (apply (lambda (e3ad2@id) (e2cbd@id? e3ad2@id)) e3ad0@ls/false)) (apply (lambda (e3ad4@id) (if (e2ccb@bound-id-member? e3ac8@p e3ac1@keys) (values (vector 'free-id e3ac8@p) e3aca@ids) (if (e2cc5@free-id=? e3ac8@p (e2e52@scheme-stx '_)) (values '_ e3aca@ids) (values 'any (cons (cons e3ac8@p e3ac9@n) e3aca@ids))))) e3ad0@ls/false) ((lambda (e3ad6@t) ((lambda (e3ad8@ls/false) (if (and e3ad8@ls/false (apply (lambda (e3ada@p e3adb@dots) (e2eca@ellipsis? e3adb@dots)) e3ad8@ls/false)) (apply (lambda (e3ade@p e3adf@dots) (call-with-values (lambda () (e3ac7@cvt e3ade@p (+ e3ac9@n '1) e3aca@ids)) (lambda (e3ae6@e3ae3 e3ae7@e3ae5) ((lambda (e3aea@ids e3aeb@p) (values (if (eq? e3aeb@p 'any) 'each-any (vector 'each e3aeb@p)) e3aea@ids)) e3ae7@e3ae5 e3ae6@e3ae3)))) e3ad8@ls/false) ((lambda (e3aee@t) ((lambda (e3af0@ls/false) (if (and e3af0@ls/false (apply (lambda (e3af2@x e3af3@dots e3af4@ys e3af5@z) (e2eca@ellipsis? e3af3@dots)) e3af0@ls/false)) (apply (lambda (e3afa@x e3afb@dots e3afc@ys e3afd@z) (call-with-values (lambda () (e3ac7@cvt e3afd@z e3ac9@n e3aca@ids)) (lambda (e3b06@e3b03 e3b07@e3b05) ((lambda (e3b0a@ids e3b0b@z) (call-with-values (lambda () (e3ac5@cvt* e3afc@ys e3ac9@n e3b0a@ids)) (lambda (e3b12@e3b0f e3b13@e3b11) ((lambda (e3b16@ids e3b17@ys) (call-with-values (lambda () (e3ac7@cvt e3afa@x (+ e3ac9@n '1) e3b16@ids)) (lambda (e3b1e@e3b1b e3b1f@e3b1d) ((lambda (e3b22@ids e3b23@x) (values (vector 'each+ e3b23@x (reverse e3b17@ys) e3b0b@z) e3b22@ids)) e3b1f@e3b1d e3b1e@e3b1b)))) e3b13@e3b11 e3b12@e3b0f)))) e3b07@e3b05 e3b06@e3b03)))) e3af0@ls/false) ((lambda (e3b26@t) ((lambda (e3b28@ls/false) (if e3b28@ls/false (apply (lambda (e3b2a@x e3b2b@y) (call-with-values (lambda () (e3ac7@cvt e3b2b@y e3ac9@n e3aca@ids)) (lambda (e3b32@e3b2f e3b33@e3b31) ((lambda (e3b36@ids e3b37@y) (call-with-values (lambda () (e3ac7@cvt e3b2a@x e3ac9@n e3b36@ids)) (lambda (e3b3e@e3b3b e3b3f@e3b3d) ((lambda (e3b42@ids e3b43@x) (values (cons e3b43@x e3b37@y) e3b42@ids)) e3b3f@e3b3d e3b3e@e3b3b)))) e3b33@e3b31 e3b32@e3b2f)))) e3b28@ls/false) ((lambda (e3b46@t) ((lambda (e3b48@ls/false) (if e3b48@ls/false (apply (lambda () (values '() e3aca@ids)) e3b48@ls/false) ((lambda (e3b4a@t) ((lambda (e3b4c@ls/false) (if (and e3b4c@ls/false (apply (lambda (e3b4e@p) (not (e2c85@stx? e3b4e@p))) e3b4c@ls/false)) (apply (lambda (e3b50@p) (call-with-values (lambda () (e3ac7@cvt e3b50@p e3ac9@n e3aca@ids)) (lambda (e3b56@e3b53 e3b57@e3b55) ((lambda (e3b5a@ids e3b5b@p) (values (vector 'vector e3b5b@p) e3b5a@ids)) e3b57@e3b55 e3b56@e3b53)))) e3b4c@ls/false) ((lambda (e3b5e@t) ((lambda (e3b60@ls/false) (if e3b60@ls/false (apply (lambda (e3b62@datum) (values (vector 'atom (e2cd3@stx->datum e3b62@datum)) e3aca@ids)) e3b60@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3b5e@t))) (e2ec8@syntax-dispatch e3b5e@t 'any))) e3b4a@t))) (e2ec8@syntax-dispatch e3b4a@t '#(vector each-any)))) e3b46@t))) (e2ec8@syntax-dispatch e3b46@t '()))) e3b26@t))) (e2ec8@syntax-dispatch e3b26@t '(any . any)))) e3aee@t))) (e2ec8@syntax-dispatch e3aee@t '(any any . #(each+ any () any))))) e3ad6@t))) (e2ec8@syntax-dispatch e3ad6@t '(any any)))) e3ace@t))) (e2ec8@syntax-dispatch e3ace@t 'any))) e3ac8@p))) (e3ac7@cvt e3ac0@pattern '0 '()))) '#f '#f))) (set! e2ec8@syntax-dispatch ((lambda () ((lambda (e3b83@stx^ e3b85@match-each e3b87@match-each+ e3b89@match-each-any e3b8b@match-empty e3b8d@combine e3b8f@match* e3b91@match) (begin (set! e3b83@stx^ (lambda (e3c5e@e e3c5f@m* e3c60@s* e3c61@ae*) (if (and (null? e3c5f@m*) (null? e3c60@s*) (null? e3c61@ae*)) e3c5e@e (e2ca5@mkstx e3c5e@e e3c5f@m* e3c60@s* e3c61@ae*)))) (set! e3b85@match-each (lambda (e3c3e@e e3c3f@p e3c40@m* e3c41@s* e3c42@ae*) (if (pair? e3c3e@e) ((lambda (e3c48@first) (and e3c48@first ((lambda (e3c4a@rest) (and e3c4a@rest (cons e3c48@first e3c4a@rest))) (e3b85@match-each (cdr e3c3e@e) e3c3f@p e3c40@m* e3c41@s* e3c42@ae*)))) (e3b91@match (car e3c3e@e) e3c3f@p e3c40@m* e3c41@s* e3c42@ae* '())) (if (null? e3c3e@e) '() (if (e2c85@stx? e3c3e@e) (and (not (e2c3b@top-marked? e3c40@m*)) (call-with-values (lambda () (e2ca3@join-wraps e3c40@m* e3c41@s* e3c42@ae* e3c3e@e)) (lambda (e3c52@e3c4d e3c53@e3c4f e3c54@e3c51) ((lambda (e3c58@ae* e3c59@s* e3c5a@m*) (e3b85@match-each (e2c89@stx-expr e3c3e@e) e3c3f@p e3c5a@m* e3c59@s* e3c58@ae*)) e3c54@e3c51 e3c53@e3c4f e3c52@e3c4d)))) (if (e285c@e277b@annotation? e3c3e@e) (e3b85@match-each (e285e@e277f@annotation-expression e3c3e@e) e3c3f@p e3c40@m* e3c41@s* e3c42@ae*) '#f)))))) (set! e3b87@match-each+ (lambda (e3bfe@e e3bff@x-pat e3c00@y-pat e3c01@z-pat e3c02@m* e3c03@s* e3c04@ae* e3c05@r) ((letrec ((e3c0e@f (lambda (e3c10@e e3c11@m* e3c12@s* e3c13@ae*) (if (pair? e3c10@e) (call-with-values (lambda () (e3c0e@f (cdr e3c10@e) e3c11@m* e3c12@s* e3c13@ae*)) (lambda (e3c1e@e3c19 e3c1f@e3c1b e3c20@e3c1d) ((lambda (e3c24@r e3c25@y-pat e3c26@xr*) (if e3c24@r (if (null? e3c25@y-pat) ((lambda (e3c2a@xr) (if e3c2a@xr (values (cons e3c2a@xr e3c26@xr*) e3c25@y-pat e3c24@r) (values '#f '#f '#f))) (e3b91@match (car e3c10@e) e3bff@x-pat e3c11@m* e3c12@s* e3c13@ae* '())) (values '() (cdr e3c25@y-pat) (e3b91@match (car e3c10@e) (car e3c25@y-pat) e3c11@m* e3c12@s* e3c13@ae* e3c24@r))) (values '#f '#f '#f))) e3c20@e3c1d e3c1f@e3c1b e3c1e@e3c19))) (if (e2c85@stx? e3c10@e) (if (e2c3b@top-marked? e3c11@m*) (values '() e3c00@y-pat (e3b91@match e3c10@e e3c01@z-pat e3c11@m* e3c12@s* e3c13@ae* e3c05@r)) (call-with-values (lambda () (e2ca3@join-wraps e3c11@m* e3c12@s* e3c13@ae* e3c10@e)) (lambda (e3c32@e3c2d e3c33@e3c2f e3c34@e3c31) ((lambda (e3c38@ae* e3c39@s* e3c3a@m*) (e3c0e@f (e2c89@stx-expr e3c10@e) e3c3a@m* e3c39@s* e3c38@ae*)) e3c34@e3c31 e3c33@e3c2f e3c32@e3c2d)))) (if (e285c@e277b@annotation? e3c10@e) (e3c0e@f (e285e@e277f@annotation-expression e3c10@e) e3c11@m* e3c12@s* e3c13@ae*) (values '() e3c00@y-pat (e3b91@match e3c10@e e3c01@z-pat e3c11@m* e3c12@s* e3c13@ae* e3c05@r)))))))) e3c0e@f) e3bfe@e e3c02@m* e3c03@s* e3c04@ae*))) (set! e3b89@match-each-any (lambda (e3be2@e e3be3@m* e3be4@s* e3be5@ae*) (if (pair? e3be2@e) ((lambda (e3bea@l) (and e3bea@l (cons (e3b83@stx^ (car e3be2@e) e3be3@m* e3be4@s* e3be5@ae*) e3bea@l))) (e3b89@match-each-any (cdr e3be2@e) e3be3@m* e3be4@s* e3be5@ae*)) (if (null? e3be2@e) '() (if (e2c85@stx? e3be2@e) (and (not (e2c3b@top-marked? e3be3@m*)) (call-with-values (lambda () (e2ca3@join-wraps e3be3@m* e3be4@s* e3be5@ae* e3be2@e)) (lambda (e3bf2@e3bed e3bf3@e3bef e3bf4@e3bf1) ((lambda (e3bf8@ae* e3bf9@s* e3bfa@m*) (e3b89@match-each-any (e2c89@stx-expr e3be2@e) e3bfa@m* e3bf9@s* e3bf8@ae*)) e3bf4@e3bf1 e3bf3@e3bef e3bf2@e3bed)))) (if (e285c@e277b@annotation? e3be2@e) (e3b89@match-each-any (e285e@e277f@annotation-expression e3be2@e) e3be3@m* e3be4@s* e3be5@ae*) '#f)))))) (set! e3b8b@match-empty (lambda (e3bdc@p e3bdd@r) (if (null? e3bdc@p) e3bdd@r (if (eq? e3bdc@p '_) e3bdd@r (if (eq? e3bdc@p 'any) (cons '() e3bdd@r) (if (pair? e3bdc@p) (e3b8b@match-empty (car e3bdc@p) (e3b8b@match-empty (cdr e3bdc@p) e3bdd@r)) (if (eq? e3bdc@p 'each-any) (cons '() e3bdd@r) ((lambda (e3be0@t) (if (memv e3be0@t '(each)) (e3b8b@match-empty (vector-ref e3bdc@p '1) e3bdd@r) (if (memv e3be0@t '(each+)) (e3b8b@match-empty (vector-ref e3bdc@p '1) (e3b8b@match-empty (reverse (vector-ref e3bdc@p '2)) (e3b8b@match-empty (vector-ref e3bdc@p '3) e3bdd@r))) (if (memv e3be0@t '(free-id atom)) e3bdd@r (if (memv e3be0@t '(scheme-id atom)) e3bdd@r (if (memv e3be0@t '(vector)) (e3b8b@match-empty (vector-ref e3bdc@p '1) e3bdd@r) (assertion-violation 'syntax-dispatch '"invalid pattern" e3bdc@p))))))) (vector-ref e3bdc@p '0))))))))) (set! e3b8d@combine (lambda (e3bd8@r* e3bd9@r) (if (null? (car e3bd8@r*)) e3bd9@r (cons (map car e3bd8@r*) (e3b8d@combine (map cdr e3bd8@r*) e3bd9@r))))) (set! e3b8f@match* (lambda (e3bb4@e e3bb5@p e3bb6@m* e3bb7@s* e3bb8@ae* e3bb9@r) (if (null? e3bb5@p) (and (null? e3bb4@e) e3bb9@r) (if (pair? e3bb5@p) (and (pair? e3bb4@e) (e3b91@match (car e3bb4@e) (car e3bb5@p) e3bb6@m* e3bb7@s* e3bb8@ae* (e3b91@match (cdr e3bb4@e) (cdr e3bb5@p) e3bb6@m* e3bb7@s* e3bb8@ae* e3bb9@r))) (if (eq? e3bb5@p 'each-any) ((lambda (e3bc0@l) (and e3bc0@l (cons e3bc0@l e3bb9@r))) (e3b89@match-each-any e3bb4@e e3bb6@m* e3bb7@s* e3bb8@ae*)) ((lambda (e3bc2@t) (if (memv e3bc2@t '(each)) (if (null? e3bb4@e) (e3b8b@match-empty (vector-ref e3bb5@p '1) e3bb9@r) ((lambda (e3bc4@r*) (and e3bc4@r* (e3b8d@combine e3bc4@r* e3bb9@r))) (e3b85@match-each e3bb4@e (vector-ref e3bb5@p '1) e3bb6@m* e3bb7@s* e3bb8@ae*))) (if (memv e3bc2@t '(free-id)) (and (symbol? e3bb4@e) (e2c3b@top-marked? e3bb6@m*) (e2cc5@free-id=? (e3b83@stx^ e3bb4@e e3bb6@m* e3bb7@s* e3bb8@ae*) (vector-ref e3bb5@p '1)) e3bb9@r) (if (memv e3bc2@t '(scheme-id)) (and (symbol? e3bb4@e) (e2c3b@top-marked? e3bb6@m*) (e2cc5@free-id=? (e3b83@stx^ e3bb4@e e3bb6@m* e3bb7@s* e3bb8@ae*) (e2e52@scheme-stx (vector-ref e3bb5@p '1))) e3bb9@r) (if (memv e3bc2@t '(each+)) (call-with-values (lambda () (e3b87@match-each+ e3bb4@e (vector-ref e3bb5@p '1) (vector-ref e3bb5@p '2) (vector-ref e3bb5@p '3) e3bb6@m* e3bb7@s* e3bb8@ae* e3bb9@r)) (lambda (e3bcc@e3bc7 e3bcd@e3bc9 e3bce@e3bcb) ((lambda (e3bd2@r e3bd3@y-pat e3bd4@xr*) (and e3bd2@r (null? e3bd3@y-pat) (if (null? e3bd4@xr*) (e3b8b@match-empty (vector-ref e3bb5@p '1) e3bd2@r) (e3b8d@combine e3bd4@xr* e3bd2@r)))) e3bce@e3bcb e3bcd@e3bc9 e3bcc@e3bc7))) (if (memv e3bc2@t '(atom)) (and (fast-equal? (vector-ref e3bb5@p '1) (e2cd1@strip e3bb4@e e3bb6@m*)) e3bb9@r) (if (memv e3bc2@t '(vector)) (and (vector? e3bb4@e) (e3b91@match (vector->list e3bb4@e) (vector-ref e3bb5@p '1) e3bb6@m* e3bb7@s* e3bb8@ae* e3bb9@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" e3bb5@p)))))))) (vector-ref e3bb5@p '0))))))) (set! e3b91@match (lambda (e3b96@e e3b97@p e3b98@m* e3b99@s* e3b9a@ae* e3b9b@r) (if (not e3b9b@r) '#f (if (eq? e3b97@p '_) e3b9b@r (if (eq? e3b97@p 'any) (cons (e3b83@stx^ e3b96@e e3b98@m* e3b99@s* e3b9a@ae*) e3b9b@r) (if (e2c85@stx? e3b96@e) (and (not (e2c3b@top-marked? e3b98@m*)) (call-with-values (lambda () (e2ca3@join-wraps e3b98@m* e3b99@s* e3b9a@ae* e3b96@e)) (lambda (e3ba8@e3ba3 e3ba9@e3ba5 e3baa@e3ba7) ((lambda (e3bae@ae* e3baf@s* e3bb0@m*) (e3b91@match (e2c89@stx-expr e3b96@e) e3b97@p e3bb0@m* e3baf@s* e3bae@ae* e3b9b@r)) e3baa@e3ba7 e3ba9@e3ba5 e3ba8@e3ba3)))) (if (e285c@e277b@annotation? e3b96@e) (e3b91@match (e285e@e277f@annotation-expression e3b96@e) e3b97@p e3b98@m* e3b99@s* e3b9a@ae* e3b9b@r) (e3b8f@match* e3b96@e e3b97@p e3b98@m* e3b99@s* e3b9a@ae* e3b9b@r)))))))) (lambda (e3b92@e e3b93@p) (e3b91@match e3b92@e e3b93@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! e2eca@ellipsis? (lambda (e3c66@x) (and (e2cbd@id? e3c66@x) (e2cc5@free-id=? e3c66@x (e2e52@scheme-stx '...))))) (set! e2ecc@underscore? (lambda (e3c68@x) (and (e2cbd@id? e3c68@x) (e2cc5@free-id=? e3c68@x (e2e52@scheme-stx '_))))) (set! e2ece@verify-literals (lambda (e3c6a@lits e3c6b@expr) (for-each (lambda (e3c6e@x) (if (or (not (e2cbd@id? e3c6e@x)) (e2eca@ellipsis? e3c6e@x) (e2ecc@underscore? e3c6e@x)) (e2fb1@syntax-violation '#f '"invalid literal" e3c6b@expr e3c6e@x) (void))) e3c6a@lits))) (set! e2ed0@syntax-case-transformer ((lambda () ((lambda (e3c71@build-dispatch-call e3c73@invalid-ids-error e3c75@gen-clause e3c77@gen-syntax-case) (begin (set! e3c71@build-dispatch-call (lambda (e3ce2@pvars e3ce3@expr e3ce4@y e3ce5@r e3ce6@mr) ((lambda (e3cec@ids e3ced@levels) ((lambda (e3cf0@labels e3cf1@new-vars) ((lambda (e3cf4@body) (list '(primitive apply) (e2c19@e2b59@build-lambda '#f e3cf1@new-vars e3cf4@body) e3ce4@y)) (e2eea@chi-expr (e2ca9@add-subst (e2c78@make-full-rib e3cec@ids e3cf0@labels) e3ce3@expr) (append (map (lambda (e3cf6@label e3cf7@var e3cf8@level) (cons e3cf6@label (e2cdd@make-binding 'syntax (cons e3cf7@var e3cf8@level)))) e3cf0@labels e3cf1@new-vars (map cdr e3ce2@pvars)) e3ce5@r) e3ce6@mr))) (map e2c41@gen-label e3cec@ids) (map e2c3d@gen-lexical e3cec@ids))) (map car e3ce2@pvars) (map cdr e3ce2@pvars)))) (set! e3c73@invalid-ids-error (lambda (e3cd6@id* e3cd7@e e3cd8@class) ((letrec ((e3cdc@find (lambda (e3cde@id* e3cdf@ok*) (if (null? e3cde@id*) (e2fb1@syntax-violation '#f '"invalid syntax" e3cd7@e) (if (e2cbd@id? (car e3cde@id*)) (if (e2ccb@bound-id-member? (car e3cde@id*) e3cdf@ok*) (e2fad@syntax-error (car e3cde@id*) '"duplicate " e3cd8@class) (e3cdc@find (cdr e3cde@id*) (cons (car e3cde@id*) e3cdf@ok*))) (e2fad@syntax-error (car e3cde@id*) '"invalid " e3cd8@class)))))) e3cdc@find) e3cd6@id* '()))) (set! e3c75@gen-clause (lambda (e3cae@x e3caf@keys e3cb0@clauses e3cb1@r e3cb2@mr e3cb3@pat e3cb4@fender e3cb5@expr) (call-with-values (lambda () (e2ec6@convert-pattern e3cb3@pat e3caf@keys)) (lambda (e3cc2@e3cbf e3cc3@e3cc1) ((lambda (e3cc6@pvars e3cc7@p) (if (not (e2cc9@distinct-bound-ids? (map car e3cc6@pvars))) (e3c73@invalid-ids-error (map car e3cc6@pvars) e3cb3@pat '"pattern variable") (if (not (for-all (lambda (e3cca@x) (not (e2eca@ellipsis? (car e3cca@x)))) e3cc6@pvars)) (e2fb1@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" e3cb3@pat) ((lambda (e3ccc@y) ((lambda (e3cce@test) ((lambda (e3cd0@conseq) ((lambda (e3cd2@altern) (list (e2c19@e2b59@build-lambda '#f (list e3ccc@y) (list 'if e3cce@test e3cd0@conseq e3cd2@altern)) (list '(primitive syntax-dispatch) e3cae@x (list 'quote e3cc7@p)))) (e3c77@gen-syntax-case e3cae@x e3caf@keys e3cb0@clauses e3cb1@r e3cb2@mr))) (e3c71@build-dispatch-call e3cc6@pvars e3cb5@expr e3ccc@y e3cb1@r e3cb2@mr))) (if (eq? e3cb4@fender '#t) e3ccc@y ((lambda (e3cd4@call) (list 'if e3ccc@y e3cd4@call (list 'quote '#f))) (e3c71@build-dispatch-call e3cc6@pvars e3cb4@fender e3ccc@y e3cb1@r e3cb2@mr))))) (e2c3d@gen-lexical 'tmp))))) e3cc3@e3cc1 e3cc2@e3cbf))))) (set! e3c77@gen-syntax-case (lambda (e3c8c@x e3c8d@keys e3c8e@clauses e3c8f@r e3c90@mr) (if (null? e3c8e@clauses) (list '(primitive syntax-error) e3c8c@x) ((lambda (e3c96@t) ((lambda (e3c98@ls/false) (if e3c98@ls/false (apply (lambda (e3c9a@pat e3c9b@expr) (if (and (e2cbd@id? e3c9a@pat) (not (e2ccb@bound-id-member? e3c9a@pat e3c8d@keys)) (not (e2eca@ellipsis? e3c9a@pat))) (if (e2cc5@free-id=? e3c9a@pat (e2e52@scheme-stx '_)) (e2eea@chi-expr e3c9b@expr e3c8f@r e3c90@mr) ((lambda (e3c9e@lab e3c9f@lex) ((lambda (e3ca2@body) (list (e2c19@e2b59@build-lambda '#f (list e3c9f@lex) e3ca2@body) e3c8c@x)) (e2eea@chi-expr (e2ca9@add-subst (e2c78@make-full-rib (list e3c9a@pat) (list e3c9e@lab)) e3c9b@expr) (cons (cons e3c9e@lab (e2cdd@make-binding 'syntax (cons e3c9f@lex '0))) e3c8f@r) e3c90@mr))) (e2c41@gen-label e3c9a@pat) (e2c3d@gen-lexical e3c9a@pat))) (e3c75@gen-clause e3c8c@x e3c8d@keys (cdr e3c8e@clauses) e3c8f@r e3c90@mr e3c9a@pat '#t e3c9b@expr))) e3c98@ls/false) ((lambda (e3ca4@t) ((lambda (e3ca6@ls/false) (if e3ca6@ls/false (apply (lambda (e3ca8@pat e3ca9@fender e3caa@expr) (e3c75@gen-clause e3c8c@x e3c8d@keys (cdr e3c8e@clauses) e3c8f@r e3c90@mr e3ca8@pat e3ca9@fender e3caa@expr)) e3ca6@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3ca4@t))) (e2ec8@syntax-dispatch e3ca4@t '(any any any)))) e3c96@t))) (e2ec8@syntax-dispatch e3c96@t '(any any)))) (car e3c8e@clauses))))) (lambda (e3c78@e e3c79@r e3c7a@mr) ((lambda (e3c7e@t) ((lambda (e3c80@ls/false) (if e3c80@ls/false (apply (lambda (e3c82@expr e3c83@keys e3c84@clauses) (begin (e2ece@verify-literals e3c83@keys e3c78@e) ((lambda (e3c88@x) ((lambda (e3c8a@body) (list (e2c19@e2b59@build-lambda '#f (list e3c88@x) e3c8a@body) (e2eea@chi-expr e3c82@expr e3c79@r e3c7a@mr))) (e3c77@gen-syntax-case e3c88@x e3c83@keys e3c84@clauses e3c79@r e3c7a@mr))) (e2c3d@gen-lexical 'tmp)))) e3c80@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3c7e@t))) (e2ec8@syntax-dispatch e3c7e@t '(_ any each-any . each-any)))) e3c78@e)))) '#f '#f '#f '#f)))) (set! e2ed2@ellipsis-map (lambda (e3cfc@proc e3cfd@ls . e3d00@ls*) ((lambda (e3d03@who) (begin (set! e3d03@who '...) (begin (if (not (list? e3cfd@ls)) (assertion-violation e3d03@who '"not a list" e3cfd@ls) (void)) (if (not (null? e3d00@ls*)) ((lambda (e3d04@n) (for-each (lambda (e3d06@x) (begin (if (not (list? e3d06@x)) (assertion-violation e3d03@who '"not a list" e3d06@x) (void)) (if (not (= (length e3d06@x) e3d04@n)) (assertion-violation e3d03@who '"length mismatch" e3cfd@ls e3d06@x) (void)))) e3d00@ls*)) (length e3cfd@ls)) (void)) (apply map e3cfc@proc e3cfd@ls e3d00@ls*)))) '#f))) (set! e2ed4@syntax-transformer ((lambda () ((lambda (e3d09@gen-syntax e3d0b@gen-ref e3d0d@gen-append e3d0f@gen-mappend e3d11@gen-map e3d13@gen-cons e3d15@gen-vector e3d17@regen) (begin (set! e3d09@gen-syntax (lambda (e3d80@src e3d81@e e3d82@r e3d83@maps e3d84@ellipsis? e3d85@vec?) ((lambda (e3d8c@t) ((lambda (e3d8e@ls/false) (if (and e3d8e@ls/false (apply (lambda (e3d90@dots) (e3d84@ellipsis? e3d90@dots)) e3d8e@ls/false)) (apply (lambda (e3d92@dots) (e2fb1@syntax-violation '#f '"misplaced ellipsis in syntax form" e3d80@src)) e3d8e@ls/false) ((lambda (e3d94@t) ((lambda (e3d96@ls/false) (if (and e3d96@ls/false (apply (lambda (e3d98@id) (e2cbd@id? e3d98@id)) e3d96@ls/false)) (apply (lambda (e3d9a@id) ((lambda (e3d9c@label) ((lambda (e3d9e@b) ((lambda () (if (eq? (e2cdf@binding-type e3d9e@b) 'syntax) (call-with-values (lambda () ((lambda (e3da4@var.lev) (e3d0b@gen-ref e3d80@src (car e3da4@var.lev) (cdr e3da4@var.lev) e3d83@maps)) (e2ce1@binding-value e3d9e@b))) (lambda (e3da6@e3da1 e3da7@e3da3) ((lambda (e3daa@maps e3dab@var) (values (list 'ref e3dab@var) e3daa@maps)) e3da7@e3da3 e3da6@e3da1))) (values (list 'quote e3d81@e) e3d83@maps))))) (e2cdb@label->binding e3d9c@label e3d82@r))) (e2cd7@id->label e3d81@e))) e3d96@ls/false) ((lambda (e3dae@t) ((lambda (e3db0@ls/false) (if (and e3db0@ls/false (apply (lambda (e3db2@dots e3db3@e) (e3d84@ellipsis? e3db2@dots)) e3db0@ls/false)) (apply (lambda (e3db6@dots e3db7@e) (if e3d85@vec? (e2fb1@syntax-violation '#f '"misplaced ellipsis in syntax form" e3d80@src) (e3d09@gen-syntax e3d80@src e3db7@e e3d82@r e3d83@maps (lambda (e3dba@x) '#f) '#f))) e3db0@ls/false) ((lambda (e3dbc@t) ((lambda (e3dbe@ls/false) (if (and e3dbe@ls/false (apply (lambda (e3dc0@x e3dc1@dots e3dc2@y) (e3d84@ellipsis? e3dc1@dots)) e3dbe@ls/false)) (apply (lambda (e3dc6@x e3dc7@dots e3dc8@y) ((letrec ((e3dcc@f (lambda (e3dce@y e3dcf@k) ((lambda (e3dd2@t) ((lambda (e3dd4@ls/false) (if e3dd4@ls/false (apply (lambda () (e3dcf@k e3d83@maps)) e3dd4@ls/false) ((lambda (e3dd6@t) ((lambda (e3dd8@ls/false) (if (and e3dd8@ls/false (apply (lambda (e3dda@dots e3ddb@y) (e3d84@ellipsis? e3dda@dots)) e3dd8@ls/false)) (apply (lambda (e3dde@dots e3ddf@y) (e3dcc@f e3ddf@y (lambda (e3de2@maps) (call-with-values (lambda () (e3dcf@k (cons '() e3de2@maps))) (lambda (e3de8@e3de5 e3de9@e3de7) ((lambda (e3dec@maps e3ded@x) (if (null? (car e3dec@maps)) (e2fb1@syntax-violation '#f '"extra ellipsis in syntax form" e3d80@src) (values (e3d0f@gen-mappend e3ded@x (car e3dec@maps)) (cdr e3dec@maps)))) e3de9@e3de7 e3de8@e3de5)))))) e3dd8@ls/false) ((lambda (e3df0@t) ((lambda (e3df2@ls/false) (if e3df2@ls/false (apply (lambda () (call-with-values (lambda () (e3d09@gen-syntax e3d80@src e3dce@y e3d82@r e3d83@maps e3d84@ellipsis? e3d85@vec?)) (lambda (e3df8@e3df5 e3df9@e3df7) ((lambda (e3dfc@maps e3dfd@y) (call-with-values (lambda () (e3dcf@k e3dfc@maps)) (lambda (e3e04@e3e01 e3e05@e3e03) ((lambda (e3e08@maps e3e09@x) (values (e3d0d@gen-append e3e09@x e3dfd@y) e3e08@maps)) e3e05@e3e03 e3e04@e3e01)))) e3df9@e3df7 e3df8@e3df5)))) e3df2@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3df0@t))) (e2ec8@syntax-dispatch e3df0@t '_))) e3dd6@t))) (e2ec8@syntax-dispatch e3dd6@t '(any . any)))) e3dd2@t))) (e2ec8@syntax-dispatch e3dd2@t '()))) e3dce@y)))) e3dcc@f) e3dc8@y (lambda (e3e0c@maps) (call-with-values (lambda () (e3d09@gen-syntax e3d80@src e3dc6@x e3d82@r (cons '() e3e0c@maps) e3d84@ellipsis? '#f)) (lambda (e3e12@e3e0f e3e13@e3e11) ((lambda (e3e16@maps e3e17@x) (if (null? (car e3e16@maps)) (e2fb1@syntax-violation '#f '"extra ellipsis in syntax form" e3d80@src) (values (e3d11@gen-map e3e17@x (car e3e16@maps)) (cdr e3e16@maps)))) e3e13@e3e11 e3e12@e3e0f)))))) e3dbe@ls/false) ((lambda (e3e1a@t) ((lambda (e3e1c@ls/false) (if e3e1c@ls/false (apply (lambda (e3e1e@x e3e1f@y) (call-with-values (lambda () (e3d09@gen-syntax e3d80@src e3e1e@x e3d82@r e3d83@maps e3d84@ellipsis? '#f)) (lambda (e3e26@e3e23 e3e27@e3e25) ((lambda (e3e2a@maps e3e2b@xnew) (call-with-values (lambda () (e3d09@gen-syntax e3d80@src e3e1f@y e3d82@r e3e2a@maps e3d84@ellipsis? e3d85@vec?)) (lambda (e3e32@e3e2f e3e33@e3e31) ((lambda (e3e36@maps e3e37@ynew) (values (e3d13@gen-cons e3d81@e e3e1e@x e3e1f@y e3e2b@xnew e3e37@ynew) e3e36@maps)) e3e33@e3e31 e3e32@e3e2f)))) e3e27@e3e25 e3e26@e3e23)))) e3e1c@ls/false) ((lambda (e3e3a@t) ((lambda (e3e3c@ls/false) (if e3e3c@ls/false (apply (lambda (e3e3e@ls) (call-with-values (lambda () (e3d09@gen-syntax e3d80@src e3e3e@ls e3d82@r e3d83@maps e3d84@ellipsis? '#t)) (lambda (e3e44@e3e41 e3e45@e3e43) ((lambda (e3e48@maps e3e49@lsnew) (values (e3d15@gen-vector e3d81@e e3e3e@ls e3e49@lsnew) e3e48@maps)) e3e45@e3e43 e3e44@e3e41)))) e3e3c@ls/false) ((lambda (e3e4c@t) ((lambda (e3e4e@ls/false) (if e3e4e@ls/false (apply (lambda () (values (list 'quote e3d81@e) e3d83@maps)) e3e4e@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3e4c@t))) (e2ec8@syntax-dispatch e3e4c@t '_))) e3e3a@t))) (e2ec8@syntax-dispatch e3e3a@t '#(vector each-any)))) e3e1a@t))) (e2ec8@syntax-dispatch e3e1a@t '(any . any)))) e3dbc@t))) (e2ec8@syntax-dispatch e3dbc@t '(any any . any)))) e3dae@t))) (e2ec8@syntax-dispatch e3dae@t '(any any)))) e3d94@t))) (e2ec8@syntax-dispatch e3d94@t 'any))) e3d8c@t))) (e2ec8@syntax-dispatch e3d8c@t 'any))) e3d81@e))) (set! e3d0b@gen-ref (lambda (e3d66@src e3d67@var e3d68@level e3d69@maps) (if (= e3d68@level '0) (values e3d67@var e3d69@maps) (if (null? e3d69@maps) (e2fb1@syntax-violation '#f '"missing ellipsis in syntax form" e3d66@src) (call-with-values (lambda () (e3d0b@gen-ref e3d66@src e3d67@var (- e3d68@level '1) (cdr e3d69@maps))) (lambda (e3d72@e3d6f e3d73@e3d71) ((lambda (e3d76@outer-maps e3d77@outer-var) ((lambda (e3d7a@t) (if e3d7a@t ((lambda (e3d7c@b) (values (cdr e3d7c@b) e3d69@maps)) e3d7a@t) ((lambda (e3d7e@inner-var) (values e3d7e@inner-var (cons (cons (cons e3d77@outer-var e3d7e@inner-var) (car e3d69@maps)) e3d76@outer-maps))) (e2c3d@gen-lexical 'tmp)))) (assq e3d77@outer-var (car e3d69@maps)))) e3d73@e3d71 e3d72@e3d6f))))))) (set! e3d0d@gen-append (lambda (e3d62@x e3d63@y) (if (fast-equal? e3d63@y ''()) e3d62@x (list 'append e3d62@x e3d63@y)))) (set! e3d0f@gen-mappend (lambda (e3d5e@e e3d5f@map-env) (list 'apply '(primitive append) (e3d11@gen-map e3d5e@e e3d5f@map-env)))) (set! e3d11@gen-map (lambda (e3d4c@e e3d4d@map-env) ((lambda (e3d50@formals e3d51@actuals) (if (eq? (car e3d4c@e) 'ref) (car e3d51@actuals) (if (for-all (lambda (e3d54@x) (and (eq? (car e3d54@x) 'ref) (memq (cadr e3d54@x) e3d50@formals))) (cdr e3d4c@e)) ((lambda (e3d56@args) (cons 'map (cons (list 'primitive (car e3d4c@e)) e3d56@args))) (map ((lambda (e3d58@r) (lambda (e3d5a@x) (cdr (assq (cadr e3d5a@x) e3d58@r)))) (map cons e3d50@formals e3d51@actuals)) (cdr e3d4c@e))) (cons* 'map (list 'lambda e3d50@formals e3d4c@e) e3d51@actuals)))) (map cdr e3d4d@map-env) (map (lambda (e3d5c@x) (list 'ref (car e3d5c@x))) e3d4d@map-env)))) (set! e3d13@gen-cons (lambda (e3d3c@e e3d3d@x e3d3e@y e3d3f@xnew e3d40@ynew) ((lambda (e3d46@t) (if (memv e3d46@t '(quote)) (if (eq? (car e3d3f@xnew) 'quote) ((lambda (e3d48@xnew e3d49@ynew) (if (and (eq? e3d48@xnew e3d3d@x) (eq? e3d49@ynew e3d3e@y)) (list 'quote e3d3c@e) (list 'quote (cons e3d48@xnew e3d49@ynew)))) (cadr e3d3f@xnew) (cadr e3d40@ynew)) (if (null? (cadr e3d40@ynew)) (list 'list e3d3f@xnew) (list 'cons e3d3f@xnew e3d40@ynew))) (if (memv e3d46@t '(list)) (cons 'list (cons e3d3f@xnew (cdr e3d40@ynew))) (list 'cons e3d3f@xnew e3d40@ynew)))) (car e3d40@ynew)))) (set! e3d15@gen-vector (lambda (e3d36@e e3d37@ls e3d38@lsnew) (if (eq? (car e3d38@lsnew) 'quote) (if (eq? (cadr e3d38@lsnew) e3d37@ls) (list 'quote e3d36@e) (list 'quote (list->vector (cadr e3d38@lsnew)))) (if (eq? (car e3d38@lsnew) 'list) (cons 'vector (cdr e3d38@lsnew)) (list 'list->vector e3d38@lsnew))))) (set! e3d17@regen (lambda (e3d30@x) ((lambda (e3d32@t) (if (memv e3d32@t '(ref)) (cadr e3d30@x) (if (memv e3d32@t '(primitive)) (list 'primitive (cadr e3d30@x)) (if (memv e3d32@t '(quote)) (list 'quote (cadr e3d30@x)) (if (memv e3d32@t '(lambda)) (e2c19@e2b59@build-lambda '#f (cadr e3d30@x) (e3d17@regen (caddr e3d30@x))) (if (memv e3d32@t '(map)) ((lambda (e3d34@ls) (cons '(primitive ellipsis-map) e3d34@ls)) (map e3d17@regen (cdr e3d30@x))) (cons (list 'primitive (car e3d30@x)) (map e3d17@regen (cdr e3d30@x))))))))) (car e3d30@x)))) (lambda (e3d18@e e3d19@r e3d1a@mr) ((lambda (e3d1e@t) ((lambda (e3d20@ls/false) (if e3d20@ls/false (apply (lambda (e3d22@x) (call-with-values (lambda () (e3d09@gen-syntax e3d18@e e3d22@x e3d19@r '() e2eca@ellipsis? '#f)) (lambda (e3d28@e3d25 e3d29@e3d27) ((lambda (e3d2c@maps e3d2d@e) (e3d17@regen e3d2d@e)) e3d29@e3d27 e3d28@e3d25)))) e3d20@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3d1e@t))) (e2ec8@syntax-dispatch e3d1e@t '(_ any)))) e3d18@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! e2ed6@core-macro-transformer (lambda (e3e50@name) ((lambda (e3e52@t) (if (memv e3e52@t '(quote)) e2e78@quote-transformer (if (memv e3e52@t '(lambda)) e2e7c@lambda-transformer (if (memv e3e52@t '(case-lambda)) e2e7a@case-lambda-transformer (if (memv e3e52@t '(letrec)) e2e60@letrec-transformer (if (memv e3e52@t '(letrec*)) e2e62@letrec*-transformer (if (memv e3e52@t '(if)) e2e70@if-transformer (if (memv e3e52@t '(and)) e2e72@and-transformer (if (memv e3e52@t '(or)) e2e74@or-transformer (if (memv e3e52@t '(foreign-call)) e2ec4@foreign-call-transformer (if (memv e3e52@t '(syntax-case)) e2ed0@syntax-case-transformer (if (memv e3e52@t '(syntax)) e2ed4@syntax-transformer (if (memv e3e52@t '(type-descriptor)) e2e66@type-descriptor-transformer (if (memv e3e52@t '(record-type-descriptor)) e2e68@record-type-descriptor-transformer (if (memv e3e52@t '(record-constructor-descriptor)) e2e6a@record-constructor-descriptor-transformer (if (memv e3e52@t '(fluid-let-syntax)) e2e64@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" e3e50@name))))))))))))))))) e3e50@name))) (set! e2ed8@symbol-macro (lambda (e3e54@x e3e55@set) ((lambda (e3e58@t) ((lambda (e3e5a@ls/false) (if (and e3e5a@ls/false (apply (lambda (e3e5c@name) (and (e2cbd@id? e3e5c@name) (memq (e2cbf@id->sym e3e5c@name) e3e55@set))) e3e5a@ls/false)) (apply (lambda (e3e5e@name) (e2e7e@bless (list 'quote e3e5e@name))) e3e5a@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3e58@t))) (e2ec8@syntax-dispatch e3e58@t '(_ any)))) e3e54@x))) (set! e2eda@macro-transformer (lambda (e3e60@x) (if (procedure? e3e60@x) e3e60@x (if (symbol? e3e60@x) ((lambda (e3e62@t) (if (memv e3e62@t '(define-record-type)) e2ebc@define-record-type-macro (if (memv e3e62@t '(define-struct)) e2eba@define-struct-macro (if (memv e3e62@t '(include)) e2eb0@include-macro (if (memv e3e62@t '(cond)) e2eac@cond-macro (if (memv e3e62@t '(let)) e2e84@let-macro (if (memv e3e62@t '(do)) e2ea4@do-macro (if (memv e3e62@t '(or)) e2ea8@or-macro (if (memv e3e62@t '(and)) e2eaa@and-macro (if (memv e3e62@t '(let*)) e2ea6@let*-macro (if (memv e3e62@t '(let-values)) e2e86@let-values-macro (if (memv e3e62@t '(let*-values)) e2e88@let*-values-macro (if (memv e3e62@t '(syntax-rules)) e2eb4@syntax-rules-macro (if (memv e3e62@t '(quasiquote)) e2eb6@quasiquote-macro (if (memv e3e62@t '(quasisyntax)) e2eb8@quasisyntax-macro (if (memv e3e62@t '(with-syntax)) e2e80@with-syntax-macro (if (memv e3e62@t '(when)) e2e6c@when-macro (if (memv e3e62@t '(unless)) e2e6e@unless-macro (if (memv e3e62@t '(case)) e2e76@case-macro (if (memv e3e62@t '(identifier-syntax)) e2ea2@identifier-syntax-macro (if (memv e3e62@t '(time)) e2e9a@time-macro (if (memv e3e62@t '(delay)) e2e9c@delay-macro (if (memv e3e62@t '(assert)) e2e9e@assert-macro (if (memv e3e62@t '(endianness)) e2ea0@endianness-macro (if (memv e3e62@t '(guard)) e2e96@guard-macro (if (memv e3e62@t '(define-enumeration)) e2e98@define-enumeration-macro (if (memv e3e62@t '(trace-lambda)) e2e8a@trace-lambda-macro (if (memv e3e62@t '(trace-define)) e2e8c@trace-define-macro (if (memv e3e62@t '(trace-define-syntax)) e2e8e@trace-define-syntax-macro (if (memv e3e62@t '(trace-let-syntax)) e2e92@trace-let-syntax-macro (if (memv e3e62@t '(trace-letrec-syntax)) e2e94@trace-letrec-syntax-macro (if (memv e3e62@t '(define-condition-type)) e2ebe@define-condition-type-macro (if (memv e3e62@t '(parameterize)) e2ec2@parameterize-macro (if (memv e3e62@t '(include-into)) e2eb2@include-into-macro (if (memv e3e62@t '(eol-style)) (lambda (e3e64@x) (e2ed8@symbol-macro e3e64@x '(none lf cr crlf nel crnel ls))) (if (memv e3e62@t '(error-handling-mode)) (lambda (e3e66@x) (e2ed8@symbol-macro e3e66@x '(ignore raise replace))) (if (memv e3e62@t '(buffer-mode)) (lambda (e3e68@x) (e2ed8@symbol-macro e3e68@x '(none line block))) (if (memv e3e62@t '(file-options)) e2c30@file-options-macro (if (memv e3e62@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) e2ec0@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" e3e60@x)))))))))))))))))))))))))))))))))))))))) e3e60@x) (error 'core-macro-transformer '"BUG: invalid macro" e3e60@x))))) (set! e2edc@local-macro-transformer (lambda (e3e6a@x) (car e3e6a@x))) (set! e2ede@do-macro-call (lambda (e3e6c@transformer e3e6d@expr) ((lambda (e3e70@out) (begin ((letrec ((e3e72@f (lambda (e3e74@x) (if (not (e2c85@stx? e3e74@x)) (if (pair? e3e74@x) (begin (e3e72@f (car e3e74@x)) (e3e72@f (cdr e3e74@x))) (if (vector? e3e74@x) (vector-for-each e3e72@f e3e74@x) (if (symbol? e3e74@x) (e2fb1@syntax-violation '#f '"raw symbol encountered in output of macro" e3e6d@expr e3e74@x) (void)))) (void))))) e3e72@f) e3e70@out) (e2ca7@add-mark (e2c9d@gen-mark) e3e70@out e3e6d@expr))) (e3e6c@transformer (e2ca7@add-mark e2c9f@anti-mark e3e6d@expr '#f))))) (set! e2ee0@chi-macro (lambda (e3e76@p e3e77@e) (e2ede@do-macro-call (e2eda@macro-transformer e3e76@p) e3e77@e))) (set! e2ee2@chi-local-macro (lambda (e3e7a@p e3e7b@e) (e2ede@do-macro-call (e2edc@local-macro-transformer e3e7a@p) e3e7b@e))) (set! e2ee4@chi-global-macro (lambda (e3e7e@p e3e7f@e) ((lambda (e3e82@lib e3e83@loc) (begin (e2ae2@e2984@visit-library e3e82@lib) ((lambda (e3e86@x) ((lambda (e3e88@transformer) (e2ede@do-macro-call e3e88@transformer e3e7f@e)) (if (procedure? e3e86@x) e3e86@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" e3e86@x)))) (symbol-value e3e83@loc)))) (car e3e7e@p) (cdr e3e7e@p)))) (set! e2ee6@chi-expr* (lambda (e3e8a@e* e3e8b@r e3e8c@mr) (if (null? e3e8a@e*) '() ((lambda (e3e90@e) (cons e3e90@e (e2ee6@chi-expr* (cdr e3e8a@e*) e3e8b@r e3e8c@mr))) (e2eea@chi-expr (car e3e8a@e*) e3e8b@r e3e8c@mr))))) (set! e2ee8@chi-application (lambda (e3e92@e e3e93@r e3e94@mr) ((lambda (e3e98@t) ((lambda (e3e9a@ls/false) (if e3e9a@ls/false (apply (lambda (e3e9c@rator e3e9d@rands) ((lambda (e3ea0@rator) (cons e3ea0@rator (e2ee6@chi-expr* e3e9d@rands e3e93@r e3e94@mr))) (e2eea@chi-expr e3e9c@rator e3e93@r e3e94@mr))) e3e9a@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3e98@t))) (e2ec8@syntax-dispatch e3e98@t '(any . each-any)))) e3e92@e))) (set! e2eea@chi-expr (lambda (e3ea2@e e3ea3@r e3ea4@mr) (call-with-values (lambda () (e2ce5@syntax-type e3ea2@e e3ea3@r)) (lambda (e3eae@e3ea9 e3eaf@e3eab e3eb0@e3ead) ((lambda (e3eb4@kwd e3eb5@value e3eb6@type) ((lambda (e3eba@t) (if (memv e3eba@t '(core-macro)) ((lambda (e3ebc@transformer) (e3ebc@transformer e3ea2@e e3ea3@r e3ea4@mr)) (e2ed6@core-macro-transformer e3eb5@value)) (if (memv e3eba@t '(global)) ((lambda (e3ebe@lib) ((lambda (e3ec0@loc) ((lambda () (begin ((e2f33@inv-collector) e3ebe@lib) e3ec0@loc)))) (cdr e3eb5@value))) (car e3eb5@value)) (if (memv e3eba@t '(core-prim)) ((lambda (e3ec2@name) (list 'primitive e3ec2@name)) e3eb5@value) (if (memv e3eba@t '(call)) (e2ee8@chi-application e3ea2@e e3ea3@r e3ea4@mr) (if (memv e3eba@t '(lexical)) ((lambda (e3ec4@lex) e3ec4@lex) (e2e54@lexical-var e3eb5@value)) (if (memv e3eba@t '(global-macro global-macro!)) (e2eea@chi-expr (e2ee4@chi-global-macro e3eb5@value e3ea2@e) e3ea3@r e3ea4@mr) (if (memv e3eba@t '(local-macro local-macro!)) (e2eea@chi-expr (e2ee2@chi-local-macro e3eb5@value e3ea2@e) e3ea3@r e3ea4@mr) (if (memv e3eba@t '(macro macro!)) (e2eea@chi-expr (e2ee0@chi-macro e3eb5@value e3ea2@e) e3ea3@r e3ea4@mr) (if (memv e3eba@t '(constant)) ((lambda (e3ec6@datum) (list 'quote e3ec6@datum)) e3eb5@value) (if (memv e3eba@t '(set!)) (e2eec@chi-set! e3ea2@e e3ea3@r e3ea4@mr) (if (memv e3eba@t '(begin)) ((lambda (e3ec8@t) ((lambda (e3eca@ls/false) (if e3eca@ls/false (apply (lambda (e3ecc@x e3ecd@x*) (e2c1c@e2b8b@build-sequence '#f (e2ee6@chi-expr* (cons e3ecc@x e3ecd@x*) e3ea3@r e3ea4@mr))) e3eca@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3ec8@t))) (e2ec8@syntax-dispatch e3ec8@t '(_ any . each-any)))) e3ea2@e) (if (memv e3eba@t '(let-syntax letrec-syntax)) ((lambda (e3ed0@t) ((lambda (e3ed2@ls/false) (if (and e3ed2@ls/false (apply (lambda (e3ed4@xlhs* e3ed5@xrhs* e3ed6@xbody e3ed7@xbody*) (if (not (e2cc7@valid-bound-ids? e3ed4@xlhs*)) (e2fb1@syntax-violation '#f '"invalid identifiers" e3ea2@e) (void))) e3ed2@ls/false)) (apply (lambda (e3edc@xlhs* e3edd@xrhs* e3ede@xbody e3edf@xbody*) ((lambda (e3ee4@xlab*) ((lambda (e3ee6@xrib) ((lambda (e3ee8@xb*) ((lambda () (e2c1c@e2b8b@build-sequence '#f (e2ee6@chi-expr* (map (lambda (e3eea@x) (e2ca9@add-subst e3ee6@xrib e3eea@x)) (cons e3ede@xbody e3edf@xbody*)) (append (map cons e3ee4@xlab* e3ee8@xb*) e3ea3@r) (append (map cons e3ee4@xlab* e3ee8@xb*) e3ea4@mr)))))) (map (lambda (e3eec@x) (e2cfb@make-eval-transformer (e2f25@expand-transformer (if (eq? e3eb6@type 'let-syntax) e3eec@x (e2ca9@add-subst e3ee6@xrib e3eec@x)) e3ea4@mr))) e3edd@xrhs*))) (e2c78@make-full-rib e3edc@xlhs* e3ee4@xlab*))) (map e2c41@gen-label e3edc@xlhs*))) e3ed2@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3ed0@t))) (e2ec8@syntax-dispatch e3ed0@t '(_ #(each (any any)) any . each-any)))) e3ea2@e) (if (memv e3eba@t '(displaced-lexical)) (e2fb1@syntax-violation '#f '"identifier out of context" e3ea2@e) (if (memv e3eba@t '(syntax)) (e2fb1@syntax-violation '#f '"reference to pattern variable outside a syntax form" e3ea2@e) (if (memv e3eba@t '(define define-syntax module import library)) (e2fb1@syntax-violation '#f (string-append ((lambda (e3eee@t) (if (memv e3eee@t '(define)) '"a definition" (if (memv e3eee@t '(define-syntax)) '"a define-syntax" (if (memv e3eee@t '(module)) '"a module definition" (if (memv e3eee@t '(library)) '"a library definition" (if (memv e3eee@t '(import)) '"an import declaration" (if (memv e3eee@t '(export)) '"an export declaration" '"a non-expression"))))))) e3eb6@type) '" was found where an expression was expected") e3ea2@e) (if (memv e3eba@t '(mutable)) (e2fb1@syntax-violation '#f '"attempt to reference an unexportable variable" e3ea2@e) (e2fb1@syntax-violation '#f '"invalid expression" e3ea2@e)))))))))))))))))) e3eb6@type)) e3eb0@e3ead e3eaf@e3eab e3eae@e3ea9))))) (set! e2eec@chi-set! (lambda (e3ef0@e e3ef1@r e3ef2@mr) ((lambda (e3ef6@t) ((lambda (e3ef8@ls/false) (if (and e3ef8@ls/false (apply (lambda (e3efa@x e3efb@v) (e2cbd@id? e3efa@x)) e3ef8@ls/false)) (apply (lambda (e3efe@x e3eff@v) (call-with-values (lambda () (e2ce5@syntax-type e3efe@x e3ef1@r)) (lambda (e3f08@e3f03 e3f09@e3f05 e3f0a@e3f07) ((lambda (e3f0e@kwd e3f0f@value e3f10@type) ((lambda (e3f14@t) (if (memv e3f14@t '(lexical)) (begin (e2e58@set-lexical-mutable! e3f0f@value '#t) (list 'set! (e2e54@lexical-var e3f0f@value) (e2eea@chi-expr e3eff@v e3ef1@r e3ef2@mr))) (if (memv e3f14@t '(core-prim)) (e2fb1@syntax-violation '#f '"cannot modify imported core primitive" e3ef0@e) (if (memv e3f14@t '(global)) (e2fb1@syntax-violation '#f '"attempt to modify imported binding" e3ef0@e) (if (memv e3f14@t '(global-macro!)) (e2eea@chi-expr (e2ee4@chi-global-macro e3f0f@value e3ef0@e) e3ef1@r e3ef2@mr) (if (memv e3f14@t '(local-macro!)) (e2eea@chi-expr (e2ee2@chi-local-macro e3f0f@value e3ef0@e) e3ef1@r e3ef2@mr) (if (memv e3f14@t '(mutable)) (e2fb1@syntax-violation '#f '"attempt to assign to an unexportable variable" e3ef0@e) (e2fb1@syntax-violation '#f '"invalid syntax" e3ef0@e)))))))) e3f10@type)) e3f0a@e3f07 e3f09@e3f05 e3f08@e3f03)))) e3ef8@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3ef6@t))) (e2ec8@syntax-dispatch e3ef6@t '(_ any any)))) e3ef0@e))) (set! e2eee@verify-formals (lambda (e3f16@fmls e3f17@stx) ((lambda (e3f1a@t) ((lambda (e3f1c@ls/false) (if e3f1c@ls/false (apply (lambda (e3f1e@x*) (if (not (e2cc7@valid-bound-ids? e3f1e@x*)) (e2e82@invalid-fmls-error e3f17@stx e3f16@fmls) (void))) e3f1c@ls/false) ((lambda (e3f20@t) ((lambda (e3f22@ls/false) (if e3f22@ls/false (apply (lambda (e3f24@x* e3f25@x) (if (not (e2cc7@valid-bound-ids? (cons e3f25@x e3f24@x*))) (e2e82@invalid-fmls-error e3f17@stx e3f16@fmls) (void))) e3f22@ls/false) ((lambda (e3f28@t) ((lambda (e3f2a@ls/false) (if e3f2a@ls/false (apply (lambda () (e2fb1@syntax-violation '#f '"invalid syntax" e3f17@stx)) e3f2a@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3f28@t))) (e2ec8@syntax-dispatch e3f28@t '_))) e3f20@t))) (e2ec8@syntax-dispatch e3f20@t '#(each+ any () any)))) e3f1a@t))) (e2ec8@syntax-dispatch e3f1a@t 'each-any))) e3f16@fmls))) (set! e2ef0@chi-lambda-clause (lambda (e3f2c@stx e3f2d@fmls e3f2e@body* e3f2f@r e3f30@mr) ((lambda (e3f36@t) ((lambda (e3f38@ls/false) (if e3f38@ls/false (apply (lambda (e3f3a@x*) (begin (e2eee@verify-formals e3f2d@fmls e3f2c@stx) ((lambda (e3f3c@lex* e3f3d@lab*) (values e3f3c@lex* (e2f00@chi-internal (e2ca9@add-subst (e2c78@make-full-rib e3f3a@x* e3f3d@lab*) e3f2e@body*) (e2e5c@add-lexicals e3f3d@lab* e3f3c@lex* e3f2f@r) e3f30@mr))) (map e2c3d@gen-lexical e3f3a@x*) (map e2c41@gen-label e3f3a@x*)))) e3f38@ls/false) ((lambda (e3f40@t) ((lambda (e3f42@ls/false) (if e3f42@ls/false (apply (lambda (e3f44@x* e3f45@x) (begin (e2eee@verify-formals e3f2d@fmls e3f2c@stx) ((lambda (e3f48@lex* e3f49@lab* e3f4a@lex e3f4b@lab) (values (append e3f48@lex* e3f4a@lex) (e2f00@chi-internal (e2ca9@add-subst (e2c78@make-full-rib (cons e3f45@x e3f44@x*) (cons e3f4b@lab e3f49@lab*)) e3f2e@body*) (e2e5c@add-lexicals (cons e3f4b@lab e3f49@lab*) (cons e3f4a@lex e3f48@lex*) e3f2f@r) e3f30@mr))) (map e2c3d@gen-lexical e3f44@x*) (map e2c41@gen-label e3f44@x*) (e2c3d@gen-lexical e3f45@x) (e2c41@gen-label e3f45@x)))) e3f42@ls/false) ((lambda (e3f50@t) ((lambda (e3f52@ls/false) (if e3f52@ls/false (apply (lambda () (e2fb1@syntax-violation '#f '"invalid syntax" e3f2d@fmls)) e3f52@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e3f50@t))) (e2ec8@syntax-dispatch e3f50@t '_))) e3f40@t))) (e2ec8@syntax-dispatch e3f40@t '#(each+ any () any)))) e3f36@t))) (e2ec8@syntax-dispatch e3f36@t 'each-any))) e3f2d@fmls))) (set! e2ef2@chi-lambda-clause* (lambda (e3f54@stx e3f55@fmls* e3f56@body** e3f57@r e3f58@mr) (if (null? e3f55@fmls*) (values '() '()) (call-with-values (lambda () (e2ef0@chi-lambda-clause e3f54@stx (car e3f55@fmls*) (car e3f56@body**) e3f57@r e3f58@mr)) (lambda (e3f62@e3f5f e3f63@e3f61) ((lambda (e3f66@b e3f67@a) (call-with-values (lambda () (e2ef2@chi-lambda-clause* e3f54@stx (cdr e3f55@fmls*) (cdr e3f56@body**) e3f57@r e3f58@mr)) (lambda (e3f6e@e3f6b e3f6f@e3f6d) ((lambda (e3f72@b* e3f73@a*) (values (cons e3f67@a e3f73@a*) (cons e3f66@b e3f72@b*))) e3f6f@e3f6d e3f6e@e3f6b)))) e3f63@e3f61 e3f62@e3f5f)))))) (set! e2ef4@chi-defun (lambda (e3f76@x e3f77@r e3f78@mr) ((lambda (e3f7c@fmls e3f7d@body*) (call-with-values (lambda () (e2ef0@chi-lambda-clause e3f7c@fmls e3f7c@fmls e3f7d@body* e3f77@r e3f78@mr)) (lambda (e3f84@e3f81 e3f85@e3f83) ((lambda (e3f88@body e3f89@fmls) (e2c19@e2b59@build-lambda '#f e3f89@fmls e3f88@body)) e3f85@e3f83 e3f84@e3f81)))) (car e3f76@x) (cdr e3f76@x)))) (set! e2ef6@chi-rhs (lambda (e3f8c@rhs e3f8d@r e3f8e@mr) ((lambda (e3f92@t) (if (memv e3f92@t '(defun)) (e2ef4@chi-defun (cdr e3f8c@rhs) e3f8d@r e3f8e@mr) (if (memv e3f92@t '(expr)) ((lambda (e3f94@expr) (e2eea@chi-expr e3f94@expr e3f8d@r e3f8e@mr)) (cdr e3f8c@rhs)) (if (memv e3f92@t '(top-expr)) ((lambda (e3f96@expr) (e2c1c@e2b8b@build-sequence '#f (list (e2eea@chi-expr e3f96@expr e3f8d@r e3f8e@mr) (e2c1d@e2b8d@build-void)))) (cdr e3f8c@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" e3f8c@rhs))))) (car e3f8c@rhs)))) (set! e2ef8@expand-interaction-rhs*/init* (lambda (e3f98@lhs* e3f99@rhs* e3f9a@init* e3f9b@r e3f9c@mr) ((letrec ((e3fa2@f (lambda (e3fa4@lhs* e3fa5@rhs*) (if (null? e3fa4@lhs*) (map (lambda (e3fa8@x) (e2eea@chi-expr e3fa8@x e3f9b@r e3f9c@mr)) e3f9a@init*) ((lambda (e3faa@lhs e3fab@rhs) ((lambda (e3fae@t) (if (memv e3fae@t '(defun)) ((lambda (e3fb0@rhs) (cons (list 'set! e3faa@lhs e3fb0@rhs) (e3fa2@f (cdr e3fa4@lhs*) (cdr e3fa5@rhs*)))) (e2ef4@chi-defun (cdr e3fab@rhs) e3f9b@r e3f9c@mr)) (if (memv e3fae@t '(expr)) ((lambda (e3fb2@rhs) (cons (list 'set! e3faa@lhs e3fb2@rhs) (e3fa2@f (cdr e3fa4@lhs*) (cdr e3fa5@rhs*)))) (e2eea@chi-expr (cdr e3fab@rhs) e3f9b@r e3f9c@mr)) (if (memv e3fae@t '(top-expr)) ((lambda (e3fb4@e) (cons e3fb4@e (e3fa2@f (cdr e3fa4@lhs*) (cdr e3fa5@rhs*)))) (e2eea@chi-expr (cdr e3fab@rhs) e3f9b@r e3f9c@mr)) (error 'expand-interaction '"invallid" e3fab@rhs))))) (car e3fab@rhs))) (car e3fa4@lhs*) (car e3fa5@rhs*)))))) e3fa2@f) e3f98@lhs* e3f99@rhs*))) (set! e2efa@chi-rhs* (lambda (e3fb6@rhs* e3fb7@r e3fb8@mr) ((letrec ((e3fbc@f (lambda (e3fbe@ls) (if (null? e3fbe@ls) '() ((lambda (e3fc0@a) (cons e3fc0@a (e3fbc@f (cdr e3fbe@ls)))) (e2ef6@chi-rhs (car e3fbe@ls) e3fb7@r e3fb8@mr)))))) e3fbc@f) e3fb6@rhs*))) (set! e2efc@find-bound=? (lambda (e3fc2@x e3fc3@lhs* e3fc4@rhs*) (if (null? e3fc3@lhs*) '#f (if (e2cc3@bound-id=? e3fc2@x (car e3fc3@lhs*)) (car e3fc4@rhs*) (e2efc@find-bound=? e3fc2@x (cdr e3fc3@lhs*) (cdr e3fc4@rhs*)))))) (set! e2efe@find-dups (lambda (e3fc8@ls) ((letrec ((e3fca@f (lambda (e3fcc@ls e3fcd@dups) (if (null? e3fcc@ls) e3fcd@dups ((lambda (e3fd0@t) (if e3fd0@t ((lambda (e3fd2@x) (e3fca@f (cdr e3fcc@ls) (cons (list (car e3fcc@ls) e3fd2@x) e3fcd@dups))) e3fd0@t) (e3fca@f (cdr e3fcc@ls) e3fcd@dups))) (e2efc@find-bound=? (car e3fcc@ls) (cdr e3fcc@ls) (cdr e3fcc@ls))))))) e3fca@f) e3fc8@ls '()))) (set! e2f00@chi-internal (lambda (e3fd4@e* e3fd5@r e3fd6@mr) ((lambda (e3fda@rib) (call-with-values (lambda () (e2f23@chi-body* (map (lambda (e3fec@x) (e2ca9@add-subst e3fda@rib e3fec@x)) (e2cbb@syntax->list e3fd4@e*)) e3fd5@r e3fd6@mr '() '() '() '() '() e3fda@rib '#f)) (lambda (e3fee@e3fdd e3fef@e3fdf e3ff0@e3fe1 e3ff1@e3fe3 e3ff2@e3fe5 e3ff3@e3fe7 e3ff4@e3fe9 e3ff5@e3feb) ((lambda (e3ffe@_exp* e3fff@kwd* e4000@mod** e4001@rhs* e4002@lex* e4003@mr e4004@r e4005@e*) (begin (if (null? e4005@e*) (e2fb1@syntax-violation '#f '"no expression in body" e4005@e*) (void)) ((lambda (e400e@init*) ((lambda (e4010@rhs*) ((lambda () (e2c1f@e2b91@build-letrec* '#f (reverse e4002@lex*) (reverse e4010@rhs*) (e2c1c@e2b8b@build-sequence '#f e400e@init*))))) (e2efa@chi-rhs* e4001@rhs* e4004@r e4003@mr))) (e2ee6@chi-expr* (append (apply append (reverse e4000@mod**)) e4005@e*) e4004@r e4003@mr)))) e3ff5@e3feb e3ff4@e3fe9 e3ff3@e3fe7 e3ff2@e3fe5 e3ff1@e3fe3 e3ff0@e3fe1 e3fef@e3fdf e3fee@e3fdd)))) (e2c6c@make-empty-rib)))) (set! e2f02@parse-module (lambda (e4012@e) ((lambda (e4014@t) ((lambda (e4016@ls/false) (if e4016@ls/false (apply (lambda (e4018@export* e4019@b*) (begin (if (not (for-all e2cbd@id? e4018@export*)) (e2fb1@syntax-violation '#f '"module exports must be identifiers" e4012@e) (void)) (values '#f (list->vector e4018@export*) e4019@b*))) e4016@ls/false) ((lambda (e401c@t) ((lambda (e401e@ls/false) (if e401e@ls/false (apply (lambda (e4020@name e4021@export* e4022@b*) (begin (if (not (e2cbd@id? e4020@name)) (e2fb1@syntax-violation '#f '"module name must be an identifier" e4012@e) (void)) (if (not (for-all e2cbd@id? e4021@export*)) (e2fb1@syntax-violation '#f '"module exports must be identifiers" e4012@e) (void)) (values e4020@name (list->vector e4021@export*) e4022@b*))) e401e@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e401c@t))) (e2ec8@syntax-dispatch e401c@t '(_ any each-any . each-any)))) e4014@t))) (e2ec8@syntax-dispatch e4014@t '(_ each-any . each-any)))) e4012@e))) (set! e2f08@e2f03 (make-record-type-descriptor 'module-interface '#f 'e2f06 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! e2f0a@e2f05 '#f) (set! e2f0c@e2f04 (make-record-constructor-descriptor e2f08@e2f03 '#f e2f0a@e2f05)) (set! e2f0f@module-interface? (record-predicate e2f08@e2f03)) (set! e2f11@make-module-interface (record-constructor e2f0c@e2f04)) (set! e2f13@module-interface-first-mark (record-accessor e2f08@e2f03 '0)) (set! e2f15@module-interface-exp-id-vec (record-accessor e2f08@e2f03 '1)) (set! e2f17@module-interface-exp-lab-vec (record-accessor e2f08@e2f03 '2)) (set! e2f19@set-module-interface-first-mark! (record-mutator e2f08@e2f03 '0)) (set! e2f1b@set-module-interface-exp-id-vec! (record-mutator e2f08@e2f03 '1)) (set! e2f1d@set-module-interface-exp-lab-vec! (record-mutator e2f08@e2f03 '2)) (set! e2f1f@module-interface-exp-id* (lambda (e4026@iface e4027@id) ((lambda (e402b@diff-marks) (begin (set! e402b@diff-marks (lambda (e4032@ls e4033@x) (begin (if (null? e4032@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (e4036@a) (if (eq? e4036@a e4033@x) '() (cons e4036@a (e402b@diff-marks (cdr e4032@ls) e4033@x)))) (car e4032@ls))))) ((lambda (e402c@diff e402d@id-vec) (if (null? e402c@diff) e402d@id-vec (vector-map (lambda (e4030@x) (e2c87@make-stx (e2c89@stx-expr e4030@x) (append e402c@diff (e2c8b@stx-mark* e4030@x)) '() '())) e402d@id-vec))) (e402b@diff-marks (e2c8b@stx-mark* e4027@id) (e2f13@module-interface-first-mark e4026@iface)) (e2f15@module-interface-exp-id-vec e4026@iface)))) '#f))) (set! e2f21@chi-internal-module (lambda (e4038@e e4039@r e403a@mr e403b@lex* e403c@rhs* e403d@mod** e403e@kwd*) (call-with-values (lambda () (e2f02@parse-module e4038@e)) (lambda (e404c@e4047 e404d@e4049 e404e@e404b) ((lambda (e4052@e* e4053@exp-id* e4054@name) ((lambda (e4058@rib) ((lambda (e405a@e*) ((lambda () (call-with-values (lambda () (e2f23@chi-body* e405a@e* e4039@r e403a@mr e403b@lex* e403c@rhs* e403d@mod** e403e@kwd* '() e4058@rib '#f)) (lambda (e406c@e405d e406d@e405f e406e@e4061 e406f@e4063 e4070@e4065 e4071@e4067 e4072@e4069 e4073@e406b) ((lambda (e407c@_exp* e407d@kwd* e407e@mod** e407f@rhs* e4080@lex* e4081@mr e4082@r e4083@e*) ((lambda (e408c@exp-lab* e408d@mod**) (if (not e4054@name) (values e4080@lex* e407f@rhs* e4053@exp-id* e408c@exp-lab* e4082@r e4081@mr e408d@mod** e407d@kwd*) ((lambda (e4090@lab e4091@iface) (values e4080@lex* e407f@rhs* (vector e4054@name) (vector e4090@lab) (cons (cons e4090@lab (cons '$module e4091@iface)) e4082@r) (cons (cons e4090@lab (cons '$module e4091@iface)) e4081@mr) e408d@mod** e407d@kwd*)) (e2c41@gen-label 'module) (e2f11@make-module-interface (car (e2c8b@stx-mark* e4054@name)) (vector-map (lambda (e4094@x) (e2c87@make-stx (e2c89@stx-expr e4094@x) (e2c8b@stx-mark* e4094@x) '() '())) e4053@exp-id*) e408c@exp-lab*)))) (vector-map (lambda (e4096@x) (or (e2cd7@id->label (e2c87@make-stx (e2cbf@id->sym e4096@x) (e2c8b@stx-mark* e4096@x) (list e4058@rib) '())) (e2fb1@syntax-violation '#f '"cannot find module export" e4096@x))) e4053@exp-id*) (cons e4083@e* e407e@mod**))) e4073@e406b e4072@e4069 e4071@e4067 e4070@e4065 e406f@e4063 e406e@e4061 e406d@e405f e406c@e405d)))))) (map (lambda (e4098@x) (e2ca9@add-subst e4058@rib e4098@x)) (e2cbb@syntax->list e4052@e*)))) (e2c6c@make-empty-rib))) e404e@e404b e404d@e4049 e404c@e4047))))) (set! e2f23@chi-body* (lambda (e409a@e* e409b@r e409c@mr e409d@lex* e409e@rhs* e409f@mod** e40a0@kwd* e40a1@exp* e40a2@rib e40a3@top?) (if (null? e409a@e*) (values e409a@e* e409b@r e409c@mr e409d@lex* e409e@rhs* e409f@mod** e40a0@kwd* e40a1@exp*) ((lambda (e40ae@e) (call-with-values (lambda () (e2ce5@syntax-type e40ae@e e409b@r)) (lambda (e40b6@e40b1 e40b7@e40b3 e40b8@e40b5) ((lambda (e40bc@kwd e40bd@value e40be@type) ((lambda (e40c2@kwd*) ((lambda (e40c4@t) (if (memv e40c4@t '(define)) (call-with-values (lambda () (e2e4c@parse-define e40ae@e)) (lambda (e40ca@e40c7 e40cb@e40c9) ((lambda (e40ce@rhs e40cf@id) (begin (if (e2ccb@bound-id-member? e40cf@id e40c2@kwd*) (e2fb1@syntax-violation '#f '"cannot redefine keyword" e40ae@e) (void)) (call-with-values (lambda () (e2c45@gen-define-label+loc e40cf@id e40a2@rib)) (lambda (e40d6@e40d3 e40d7@e40d5) ((lambda (e40da@lex e40db@lab) (begin (e2c6e@extend-rib! e40a2@rib e40cf@id e40db@lab) (e2f23@chi-body* (cdr e409a@e*) (e2e5a@add-lexical e40db@lab e40da@lex e409b@r) e409c@mr (cons e40da@lex e409d@lex*) (cons e40ce@rhs e409e@rhs*) e409f@mod** e40c2@kwd* e40a1@exp* e40a2@rib e40a3@top?))) e40d7@e40d5 e40d6@e40d3))))) e40cb@e40c9 e40ca@e40c7))) (if (memv e40c4@t '(define-syntax)) (call-with-values (lambda () (e2e4e@parse-define-syntax e40ae@e)) (lambda (e40e2@e40df e40e3@e40e1) ((lambda (e40e6@rhs e40e7@id) (begin (if (e2ccb@bound-id-member? e40e7@id e40c2@kwd*) (e2fb1@syntax-violation '#f '"cannot redefine keyword" e40ae@e) (void)) ((lambda (e40ea@lab e40eb@expanded-rhs) (begin (e2c6e@extend-rib! e40a2@rib e40e7@id e40ea@lab) ((lambda (e40ee@b) (e2f23@chi-body* (cdr e409a@e*) (cons (cons e40ea@lab e40ee@b) e409b@r) (cons (cons e40ea@lab e40ee@b) e409c@mr) e409d@lex* e409e@rhs* e409f@mod** e40c2@kwd* e40a1@exp* e40a2@rib e40a3@top?)) (e2cfb@make-eval-transformer e40eb@expanded-rhs)))) (e2c47@gen-define-label e40e7@id e40a2@rib) (e2f25@expand-transformer e40e6@rhs e409c@mr)))) e40e3@e40e1 e40e2@e40df))) (if (memv e40c4@t '(let-syntax letrec-syntax)) ((lambda (e40f0@t) ((lambda (e40f2@ls/false) (if (and e40f2@ls/false (apply (lambda (e40f4@xlhs* e40f5@xrhs* e40f6@xbody*) (if (not (e2cc7@valid-bound-ids? e40f4@xlhs*)) (e2fb1@syntax-violation '#f '"invalid identifiers" e40ae@e) (void))) e40f2@ls/false)) (apply (lambda (e40fa@xlhs* e40fb@xrhs* e40fc@xbody*) ((lambda (e4100@xlab*) ((lambda (e4102@xrib) ((lambda (e4104@xb*) ((lambda () (e2f23@chi-body* (append (map (lambda (e4106@x) (e2ca9@add-subst e4102@xrib e4106@x)) e40fc@xbody*) (cdr e409a@e*)) (append (map cons e4100@xlab* e4104@xb*) e409b@r) (append (map cons e4100@xlab* e4104@xb*) e409c@mr) e409d@lex* e409e@rhs* e409f@mod** e40c2@kwd* e40a1@exp* e40a2@rib e40a3@top?)))) (map (lambda (e4108@x) (e2cfb@make-eval-transformer (e2f25@expand-transformer (if (eq? e40be@type 'let-syntax) e4108@x (e2ca9@add-subst e4102@xrib e4108@x)) e409c@mr))) e40fb@xrhs*))) (e2c78@make-full-rib e40fa@xlhs* e4100@xlab*))) (map e2c41@gen-label e40fa@xlhs*))) e40f2@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e40f0@t))) (e2ec8@syntax-dispatch e40f0@t '(_ #(each (any any)) . each-any)))) e40ae@e) (if (memv e40c4@t '(begin)) ((lambda (e410a@t) ((lambda (e410c@ls/false) (if e410c@ls/false (apply (lambda (e410e@x*) (e2f23@chi-body* (append e410e@x* (cdr e409a@e*)) e409b@r e409c@mr e409d@lex* e409e@rhs* e409f@mod** e40c2@kwd* e40a1@exp* e40a2@rib e40a3@top?)) e410c@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e410a@t))) (e2ec8@syntax-dispatch e410a@t '(_ . each-any)))) e40ae@e) (if (memv e40c4@t '(global-macro global-macro!)) (e2f23@chi-body* (cons (e2ca9@add-subst e40a2@rib (e2ee4@chi-global-macro e40bd@value e40ae@e)) (cdr e409a@e*)) e409b@r e409c@mr e409d@lex* e409e@rhs* e409f@mod** e40c2@kwd* e40a1@exp* e40a2@rib e40a3@top?) (if (memv e40c4@t '(local-macro local-macro!)) (e2f23@chi-body* (cons (e2ca9@add-subst e40a2@rib (e2ee2@chi-local-macro e40bd@value e40ae@e)) (cdr e409a@e*)) e409b@r e409c@mr e409d@lex* e409e@rhs* e409f@mod** e40c2@kwd* e40a1@exp* e40a2@rib e40a3@top?) (if (memv e40c4@t '(macro macro!)) (e2f23@chi-body* (cons (e2ca9@add-subst e40a2@rib (e2ee0@chi-macro e40bd@value e40ae@e)) (cdr e409a@e*)) e409b@r e409c@mr e409d@lex* e409e@rhs* e409f@mod** e40c2@kwd* e40a1@exp* e40a2@rib e40a3@top?) (if (memv e40c4@t '(module)) (call-with-values (lambda () (e2f21@chi-internal-module e40ae@e e409b@r e409c@mr e409d@lex* e409e@rhs* e409f@mod** e40c2@kwd*)) (lambda (e4120@e4111 e4121@e4113 e4122@e4115 e4123@e4117 e4124@e4119 e4125@e411b e4126@e411d e4127@e411f) ((lambda (e4130@kwd* e4131@mod** e4132@mr e4133@r e4134@m-exp-lab* e4135@m-exp-id* e4136@rhs* e4137@lex*) (begin (vector-for-each (lambda (e4140@id e4141@lab) (e2c6e@extend-rib! e40a2@rib e4140@id e4141@lab)) e4135@m-exp-id* e4134@m-exp-lab*) (e2f23@chi-body* (cdr e409a@e*) e4133@r e4132@mr e4137@lex* e4136@rhs* e4131@mod** e4130@kwd* e40a1@exp* e40a2@rib e40a3@top?))) e4127@e411f e4126@e411d e4125@e411b e4124@e4119 e4123@e4117 e4122@e4115 e4121@e4113 e4120@e4111))) (if (memv e40c4@t '(library)) (begin (e2f93@library-expander (e2cd3@stx->datum e40ae@e)) (e2f23@chi-body* (cdr e409a@e*) e409b@r e409c@mr e409d@lex* e409e@rhs* e409f@mod** e40c2@kwd* e40a1@exp* e40a2@rib e40a3@top?)) (if (memv e40c4@t '(export)) ((lambda (e4144@t) ((lambda (e4146@ls/false) (if e4146@ls/false (apply (lambda (e4148@exp-decl*) (e2f23@chi-body* (cdr e409a@e*) e409b@r e409c@mr e409d@lex* e409e@rhs* e409f@mod** e40c2@kwd* (append e4148@exp-decl* e40a1@exp*) e40a2@rib e40a3@top?)) e4146@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e4144@t))) (e2ec8@syntax-dispatch e4144@t '(_ . each-any)))) e40ae@e) (if (memv e40c4@t '(import)) ((lambda () ((lambda (e414b@module-import? e414d@module-import e414f@library-import) (begin (set! e414b@module-import? (lambda (e419e@e) ((lambda (e41a0@t) ((lambda (e41a2@ls/false) (if (and e41a2@ls/false (apply (lambda (e41a4@id) (e2cbd@id? e41a4@id)) e41a2@ls/false)) (apply (lambda (e41a6@id) '#t) e41a2@ls/false) ((lambda (e41a8@t) ((lambda (e41aa@ls/false) (if e41aa@ls/false (apply (lambda (e41ac@imp*) '#f) e41aa@ls/false) ((lambda (e41ae@t) ((lambda (e41b0@ls/false) (if e41b0@ls/false (apply (lambda () (e2fb1@syntax-violation '#f '"malformed import form" e419e@e)) e41b0@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e41ae@t))) (e2ec8@syntax-dispatch e41ae@t '_))) e41a8@t))) (e2ec8@syntax-dispatch e41a8@t '(_ . each-any)))) e41a0@t))) (e2ec8@syntax-dispatch e41a0@t '(_ any)))) e419e@e))) (set! e414d@module-import (lambda (e417c@e e417d@r) ((lambda (e4180@t) ((lambda (e4182@ls/false) (if (and e4182@ls/false (apply (lambda (e4184@id) (e2cbd@id? e4184@id)) e4182@ls/false)) (apply (lambda (e4186@id) (call-with-values (lambda () (e2ce5@syntax-type e4186@id e417d@r)) (lambda (e418e@e4189 e418f@e418b e4190@e418d) ((lambda (e4194@kwd e4195@value e4196@type) ((lambda (e419a@t) (if (memv e419a@t '($module)) ((lambda (e419c@iface) (values (e2f1f@module-interface-exp-id* e419c@iface e4186@id) (e2f17@module-interface-exp-lab-vec e419c@iface))) e4195@value) (e2fb1@syntax-violation '#f '"invalid import" e417c@e))) e4196@type)) e4190@e418d e418f@e418b e418e@e4189)))) e4182@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e4180@t))) (e2ec8@syntax-dispatch e4180@t '(_ any)))) e417c@e))) (set! e414f@library-import (lambda (e4160@e) ((lambda (e4162@t) ((lambda (e4164@ls/false) (if e4164@ls/false (apply (lambda (e4166@ctxt e4167@imp*) (call-with-values (lambda () (e2f2d@parse-import-spec* (e2fb7@syntax->datum e4167@imp*))) (lambda (e416e@e416b e416f@e416d) ((lambda (e4172@subst-labels e4173@subst-names) (values (vector-map (lambda (e4176@name) (e2c9b@datum->stx e4166@ctxt e4176@name)) e4173@subst-names) e4172@subst-labels)) e416f@e416d e416e@e416b)))) e4164@ls/false) ((lambda (e4178@t) ((lambda (e417a@ls/false) (if e417a@ls/false (apply (lambda () (e2fb1@syntax-violation '#f '"invalid import form" e4160@e)) e417a@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e4178@t))) (e2ec8@syntax-dispatch e4178@t '_))) e4162@t))) (e2ec8@syntax-dispatch e4162@t '(any . each-any)))) e4160@e))) (begin (call-with-values (lambda () (if (e414b@module-import? e40ae@e) (e414d@module-import e40ae@e e409b@r) (e414f@library-import e40ae@e))) (lambda (e4154@e4151 e4155@e4153) ((lambda (e4158@lab* e4159@id*) (vector-for-each (lambda (e415c@id e415d@lab) (e2c6e@extend-rib! e40a2@rib e415c@id e415d@lab)) e4159@id* e4158@lab*)) e4155@e4153 e4154@e4151))) (e2f23@chi-body* (cdr e409a@e*) e409b@r e409c@mr e409d@lex* e409e@rhs* e409f@mod** e40c2@kwd* e40a1@exp* e40a2@rib e40a3@top?)))) '#f '#f '#f))) (if e40a3@top? (e2f23@chi-body* (cdr e409a@e*) e409b@r e409c@mr (cons (e2c3d@gen-lexical 'dummy) e409d@lex*) (cons (cons 'top-expr e40ae@e) e409e@rhs*) e409f@mod** e40c2@kwd* e40a1@exp* e40a2@rib e40a3@top?) (values e409a@e* e409b@r e409c@mr e409d@lex* e409e@rhs* e409f@mod** e40c2@kwd* e40a1@exp*)))))))))))))) e40be@type)) (if (e2cbd@id? e40bc@kwd) (cons e40bc@kwd e40a0@kwd*) e40a0@kwd*))) e40b8@e40b5 e40b7@e40b3 e40b6@e40b1)))) (car e409a@e*))))) (set! e2f25@expand-transformer (lambda (e41b2@expr e41b3@r) ((lambda (e41b6@rtc) ((lambda (e41b8@expanded-rhs) (begin (for-each ((lambda (e41ba@mark-visit) (lambda (e41bc@x) (begin (e2ae1@e2982@invoke-library e41bc@x) (e41ba@mark-visit e41bc@x)))) (e2f35@vis-collector)) (e41b6@rtc)) e41b8@expanded-rhs)) ((lambda (e41c6@e41bf e41c7@e41c1 e41c8@e41c3 e41c9@e41c5) ((lambda (e41ce@swap) (dynamic-wind e41ce@swap (lambda () (e2eea@chi-expr e41b2@expr e41b3@r e41b3@r)) e41ce@swap)) (lambda () (begin ((lambda (e41d0@t) (begin (e41c6@e41bf e41c8@e41c3) (set! e41c8@e41c3 e41d0@t))) (e41c6@e41bf)) ((lambda (e41d2@t) (begin (e41c7@e41c1 e41c9@e41c5) (set! e41c9@e41c5 e41d2@t))) (e41c7@e41c1)))))) e2f33@inv-collector e2f35@vis-collector e41b6@rtc (lambda (e41d4@x) (values))))) (e2f31@make-collector)))) (set! e2f27@parse-exports (lambda (e41d6@exp*) ((letrec ((e41d8@f (lambda (e41da@exp* e41db@int* e41dc@ext*) (if (null? e41da@exp*) (begin (if (not (e2cc7@valid-bound-ids? e41dc@ext*)) (e2fb1@syntax-violation 'export '"invalid exports" (e2efe@find-dups e41dc@ext*)) (void)) (values (map e2fb7@syntax->datum e41dc@ext*) e41db@int*)) ((lambda (e41e0@t) ((lambda (e41e2@ls/false) (if e41e2@ls/false (apply (lambda (e41e4@rename e41e5@i* e41e6@e*) (begin (if (not (and (eq? (e2fb7@syntax->datum e41e4@rename) 'rename) (for-all e2cbd@id? e41e5@i*) (for-all e2cbd@id? e41e6@e*))) (e2fb1@syntax-violation 'export '"invalid export specifier" (car e41da@exp*)) (void)) (e41d8@f (cdr e41da@exp*) (append e41e5@i* e41db@int*) (append e41e6@e* e41dc@ext*)))) e41e2@ls/false) ((lambda (e41ea@t) ((lambda (e41ec@ls/false) (if e41ec@ls/false (apply (lambda (e41ee@ie) (begin (if (not (e2cbd@id? e41ee@ie)) (e2fb1@syntax-violation 'export '"invalid export" e41ee@ie) (void)) (e41d8@f (cdr e41da@exp*) (cons e41ee@ie e41db@int*) (cons e41ee@ie e41dc@ext*)))) e41ec@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e41ea@t))) (e2ec8@syntax-dispatch e41ea@t 'any))) e41e0@t))) (e2ec8@syntax-dispatch e41e0@t '(any . #(each (any any)))))) (car e41da@exp*)))))) e41d8@f) e41d6@exp* '() '()))) (set! e2f29@parse-library-name (lambda (e41f0@spec) ((lambda (e41f3@parse) (begin (set! e41f3@parse (lambda (e4200@x) ((lambda (e4202@t) ((lambda (e4204@ls/false) (if (and e4204@ls/false (apply (lambda (e4206@v*) (for-all (lambda (e4208@x) ((lambda (e420a@x) (and (integer? e420a@x) (exact? e420a@x))) (e2fb7@syntax->datum e4208@x))) e4206@v*)) e4204@ls/false)) (apply (lambda (e420c@v*) (values '() (map e2fb7@syntax->datum e420c@v*))) e4204@ls/false) ((lambda (e420e@t) ((lambda (e4210@ls/false) (if (and e4210@ls/false (apply (lambda (e4212@x e4213@rest) (symbol? (e2fb7@syntax->datum e4212@x))) e4210@ls/false)) (apply (lambda (e4216@x e4217@rest) (call-with-values (lambda () (e41f3@parse e4217@rest)) (lambda (e421e@e421b e421f@e421d) ((lambda (e4222@v* e4223@x*) (values (cons (e2fb7@syntax->datum e4216@x) e4223@x*) e4222@v*)) e421f@e421d e421e@e421b)))) e4210@ls/false) ((lambda (e4226@t) ((lambda (e4228@ls/false) (if e4228@ls/false (apply (lambda () (values '() '())) e4228@ls/false) ((lambda (e422a@t) ((lambda (e422c@ls/false) (if e422c@ls/false (apply (lambda () (e2fb1@syntax-violation '#f '"invalid library name" e41f0@spec)) e422c@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e422a@t))) (e2ec8@syntax-dispatch e422a@t '_))) e4226@t))) (e2ec8@syntax-dispatch e4226@t '()))) e420e@t))) (e2ec8@syntax-dispatch e420e@t '(any . any)))) e4202@t))) (e2ec8@syntax-dispatch e4202@t '(each-any)))) e4200@x))) (call-with-values (lambda () (e41f3@parse e41f0@spec)) (lambda (e41f8@e41f5 e41f9@e41f7) ((lambda (e41fc@ver* e41fd@name*) (begin (if (null? e41fd@name*) (e2fb1@syntax-violation '#f '"empty library name" e41f0@spec) (void)) (values e41fd@name* e41fc@ver*))) e41f9@e41f7 e41f8@e41f5))))) '#f))) (set! e2f2b@parse-library (lambda (e422e@e) ((lambda (e4230@t) ((lambda (e4232@ls/false) (if (and e4232@ls/false (apply (lambda (e4234@library e4235@name* e4236@export e4237@exp* e4238@import e4239@imp* e423a@b*) (and (eq? (e2fb7@syntax->datum e4236@export) 'export) (eq? (e2fb7@syntax->datum e4238@import) 'import) (eq? (e2fb7@syntax->datum e4234@library) 'library))) e4232@ls/false)) (apply (lambda (e4242@library e4243@name* e4244@export e4245@exp* e4246@import e4247@imp* e4248@b*) (values e4243@name* e4245@exp* e4247@imp* e4248@b*)) e4232@ls/false) ((lambda (e4250@t) ((lambda (e4252@ls/false) (if e4252@ls/false (apply (lambda () (e2fb1@syntax-violation '#f '"malformed library" e422e@e)) e4252@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e4250@t))) (e2ec8@syntax-dispatch e4250@t '_))) e4230@t))) (e2ec8@syntax-dispatch e4230@t '(any each-any (any . each-any) (any . each-any) . each-any)))) e422e@e))) (set! e2f2d@parse-import-spec* ((lambda () ((lambda (e4255@idsyn? e4257@dup-error e4259@merge-substs e425b@exclude* e425d@find* e425f@rem* e4261@remove-dups e4263@parse-library-name e4265@import-library e4267@get-import e4269@add-imports!) (begin (set! e4255@idsyn? (lambda (e445e@x) (symbol? (e2fb7@syntax->datum e445e@x)))) (set! e4257@dup-error (lambda (e445c@name) (e2fb1@syntax-violation 'import '"two imports with different bindings" e445c@name))) (set! e4259@merge-substs (lambda (e444a@s e444b@subst) ((lambda (e444f@insert-to-subst) (begin (set! e444f@insert-to-subst (lambda (e4450@a e4451@subst) ((lambda (e4454@name e4455@label) ((lambda (e4458@t) (if e4458@t ((lambda (e445a@x) (if (eq? (cdr e445a@x) e4455@label) e4451@subst (e4257@dup-error e4454@name))) e4458@t) (cons e4450@a e4451@subst))) (assq e4454@name e4451@subst))) (car e4450@a) (cdr e4450@a)))) (if (null? e444a@s) e444b@subst (e444f@insert-to-subst (car e444a@s) (e4259@merge-substs (cdr e444a@s) e444b@subst))))) '#f))) (set! e425b@exclude* (lambda (e441a@sym* e441b@subst) ((lambda (e441f@exclude) (begin (set! e441f@exclude (lambda (e4438@sym e4439@subst) (if (null? e4439@subst) (e2fb1@syntax-violation 'import '"cannot rename unbound identifier" e4438@sym) (if (eq? e4438@sym (caar e4439@subst)) (values (cdar e4439@subst) (cdr e4439@subst)) ((lambda (e443c@a) (call-with-values (lambda () (e441f@exclude e4438@sym (cdr e4439@subst))) (lambda (e4442@e443f e4443@e4441) ((lambda (e4446@subst e4447@old) (values e4447@old (cons e443c@a e4446@subst))) e4443@e4441 e4442@e443f)))) (car e4439@subst)))))) (if (null? e441a@sym*) (values '() e441b@subst) (call-with-values (lambda () (e441f@exclude (car e441a@sym*) e441b@subst)) (lambda (e4424@e4421 e4425@e4423) ((lambda (e4428@subst e4429@old) (call-with-values (lambda () (e425b@exclude* (cdr e441a@sym*) e4428@subst)) (lambda (e4430@e442d e4431@e442f) ((lambda (e4434@subst e4435@old*) (values (cons e4429@old e4435@old*) e4434@subst)) e4431@e442f e4430@e442d)))) e4425@e4423 e4424@e4421)))))) '#f))) (set! e425d@find* (lambda (e4412@sym* e4413@subst) (map (lambda (e4416@x) ((lambda (e4418@t) (if e4418@t (cdr e4418@t) (e2fb1@syntax-violation 'import '"cannot find identifier" e4416@x))) (assq e4416@x e4413@subst))) e4412@sym*))) (set! e425f@rem* (lambda (e440a@sym* e440b@subst) ((letrec ((e440e@f (lambda (e4410@subst) (if (null? e4410@subst) '() (if (memq (caar e4410@subst) e440a@sym*) (e440e@f (cdr e4410@subst)) (cons (car e4410@subst) (e440e@f (cdr e4410@subst)))))))) e440e@f) e440b@subst))) (set! e4261@remove-dups (lambda (e4408@ls) (if (null? e4408@ls) '() (if (memq (car e4408@ls) (cdr e4408@ls)) (e4261@remove-dups (cdr e4408@ls)) (cons (car e4408@ls) (e4261@remove-dups (cdr e4408@ls))))))) (set! e4263@parse-library-name (lambda (e4320@spec) ((lambda (e4323@subversion? e4325@subversion-pred e4327@version-pred) (begin (set! e4323@subversion? (lambda (e4404@x) ((lambda (e4406@x) (and (integer? e4406@x) (exact? e4406@x) (>= e4406@x '0))) (e2fb7@syntax->datum e4404@x)))) (set! e4325@subversion-pred (lambda (e43a4@x*) ((lambda (e43a6@t) ((lambda (e43a8@ls/false) (if (and e43a8@ls/false (apply (lambda (e43aa@n) (e4323@subversion? e43aa@n)) e43a8@ls/false)) (apply (lambda (e43ac@n) (lambda (e43ae@x) (= e43ae@x (e2fb7@syntax->datum e43ac@n)))) e43a8@ls/false) ((lambda (e43b0@t) ((lambda (e43b2@ls/false) (if (and e43b2@ls/false (apply (lambda (e43b4@p? e43b5@sub*) (eq? (e2fb7@syntax->datum e43b4@p?) 'and)) e43b2@ls/false)) (apply (lambda (e43b8@p? e43b9@sub*) ((lambda (e43bc@p*) (lambda (e43be@x) (for-all (lambda (e43c0@p) (e43c0@p e43be@x)) e43bc@p*))) (map e4325@subversion-pred e43b9@sub*))) e43b2@ls/false) ((lambda (e43c2@t) ((lambda (e43c4@ls/false) (if (and e43c4@ls/false (apply (lambda (e43c6@p? e43c7@sub*) (eq? (e2fb7@syntax->datum e43c6@p?) 'or)) e43c4@ls/false)) (apply (lambda (e43ca@p? e43cb@sub*) ((lambda (e43ce@p*) (lambda (e43d0@x) (exists (lambda (e43d2@p) (e43d2@p e43d0@x)) e43ce@p*))) (map e4325@subversion-pred e43cb@sub*))) e43c4@ls/false) ((lambda (e43d4@t) ((lambda (e43d6@ls/false) (if (and e43d6@ls/false (apply (lambda (e43d8@p? e43d9@sub) (eq? (e2fb7@syntax->datum e43d8@p?) 'not)) e43d6@ls/false)) (apply (lambda (e43dc@p? e43dd@sub) ((lambda (e43e0@p) (lambda (e43e2@x) (not (e43e0@p e43e2@x)))) (e4325@subversion-pred e43dd@sub))) e43d6@ls/false) ((lambda (e43e4@t) ((lambda (e43e6@ls/false) (if (and e43e6@ls/false (apply (lambda (e43e8@p? e43e9@n) (and (eq? (e2fb7@syntax->datum e43e8@p?) '<=) (e4323@subversion? e43e9@n))) e43e6@ls/false)) (apply (lambda (e43ec@p? e43ed@n) (lambda (e43f0@x) (<= e43f0@x (e2fb7@syntax->datum e43ed@n)))) e43e6@ls/false) ((lambda (e43f2@t) ((lambda (e43f4@ls/false) (if (and e43f4@ls/false (apply (lambda (e43f6@p? e43f7@n) (and (eq? (e2fb7@syntax->datum e43f6@p?) '>=) (e4323@subversion? e43f7@n))) e43f4@ls/false)) (apply (lambda (e43fa@p? e43fb@n) (lambda (e43fe@x) (>= e43fe@x (e2fb7@syntax->datum e43fb@n)))) e43f4@ls/false) ((lambda (e4400@t) ((lambda (e4402@ls/false) (if e4402@ls/false (apply (lambda () (e2fb1@syntax-violation 'import '"invalid sub-version spec" e4320@spec e43a4@x*)) e4402@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e4400@t))) (e2ec8@syntax-dispatch e4400@t '_))) e43f2@t))) (e2ec8@syntax-dispatch e43f2@t '(any any)))) e43e4@t))) (e2ec8@syntax-dispatch e43e4@t '(any any)))) e43d4@t))) (e2ec8@syntax-dispatch e43d4@t '(any any)))) e43c2@t))) (e2ec8@syntax-dispatch e43c2@t '(any . each-any)))) e43b0@t))) (e2ec8@syntax-dispatch e43b0@t '(any . each-any)))) e43a6@t))) (e2ec8@syntax-dispatch e43a6@t 'any))) e43a4@x*))) (set! e4327@version-pred (lambda (e4354@x*) ((lambda (e4356@t) ((lambda (e4358@ls/false) (if e4358@ls/false (apply (lambda () (lambda (e435a@x) '#t)) e4358@ls/false) ((lambda (e435c@t) ((lambda (e435e@ls/false) (if (and e435e@ls/false (apply (lambda (e4360@c e4361@ver*) (eq? (e2fb7@syntax->datum e4360@c) 'and)) e435e@ls/false)) (apply (lambda (e4364@c e4365@ver*) ((lambda (e4368@p*) (lambda (e436a@x) (for-all (lambda (e436c@p) (e436c@p e436a@x)) e4368@p*))) (map e4327@version-pred e4365@ver*))) e435e@ls/false) ((lambda (e436e@t) ((lambda (e4370@ls/false) (if (and e4370@ls/false (apply (lambda (e4372@c e4373@ver*) (eq? (e2fb7@syntax->datum e4372@c) 'or)) e4370@ls/false)) (apply (lambda (e4376@c e4377@ver*) ((lambda (e437a@p*) (lambda (e437c@x) (exists (lambda (e437e@p) (e437e@p e437c@x)) e437a@p*))) (map e4327@version-pred e4377@ver*))) e4370@ls/false) ((lambda (e4380@t) ((lambda (e4382@ls/false) (if (and e4382@ls/false (apply (lambda (e4384@c e4385@ver) (eq? (e2fb7@syntax->datum e4384@c) 'not)) e4382@ls/false)) (apply (lambda (e4388@c e4389@ver) ((lambda (e438c@p) (lambda (e438e@x) (not (e438c@p e438e@x)))) (e4327@version-pred e4389@ver))) e4382@ls/false) ((lambda (e4390@t) ((lambda (e4392@ls/false) (if e4392@ls/false (apply (lambda (e4394@sub*) ((lambda (e4396@p*) (lambda (e4398@x) ((letrec ((e439a@f (lambda (e439c@p* e439d@x) (if (null? e439c@p*) '#t (if (null? e439d@x) '#f (and ((car e439c@p*) (car e439d@x)) (e439a@f (cdr e439c@p*) (cdr e439d@x)))))))) e439a@f) e4396@p* e4398@x))) (map e4325@subversion-pred e4394@sub*))) e4392@ls/false) ((lambda (e43a0@t) ((lambda (e43a2@ls/false) (if e43a2@ls/false (apply (lambda () (e2fb1@syntax-violation 'import '"invalid version spec" e4320@spec e4354@x*)) e43a2@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e43a0@t))) (e2ec8@syntax-dispatch e43a0@t '_))) e4390@t))) (e2ec8@syntax-dispatch e4390@t 'each-any))) e4380@t))) (e2ec8@syntax-dispatch e4380@t '(any any)))) e436e@t))) (e2ec8@syntax-dispatch e436e@t '(any . each-any)))) e435c@t))) (e2ec8@syntax-dispatch e435c@t '(any . each-any)))) e4356@t))) (e2ec8@syntax-dispatch e4356@t '()))) e4354@x*))) ((letrec ((e4328@f (lambda (e432a@x) ((lambda (e432c@t) ((lambda (e432e@ls/false) (if e432e@ls/false (apply (lambda (e4330@version-spec*) (values '() (e4327@version-pred e4330@version-spec*))) e432e@ls/false) ((lambda (e4332@t) ((lambda (e4334@ls/false) (if (and e4334@ls/false (apply (lambda (e4336@x e4337@x*) (e4255@idsyn? e4336@x)) e4334@ls/false)) (apply (lambda (e433a@x e433b@x*) (call-with-values (lambda () (e4328@f e433b@x*)) (lambda (e4342@e433f e4343@e4341) ((lambda (e4346@pred e4347@name) (values (cons (e2fb7@syntax->datum e433a@x) e4347@name) e4346@pred)) e4343@e4341 e4342@e433f)))) e4334@ls/false) ((lambda (e434a@t) ((lambda (e434c@ls/false) (if e434c@ls/false (apply (lambda () (values '() (lambda (e434e@x) '#t))) e434c@ls/false) ((lambda (e4350@t) ((lambda (e4352@ls/false) (if e4352@ls/false (apply (lambda () (e2fb1@syntax-violation '#f '"invalid import spec" e4320@spec)) e4352@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e4350@t))) (e2ec8@syntax-dispatch e4350@t '_))) e434a@t))) (e2ec8@syntax-dispatch e434a@t '()))) e4332@t))) (e2ec8@syntax-dispatch e4332@t '(any . any)))) e432c@t))) (e2ec8@syntax-dispatch e432c@t '(each-any)))) e432a@x)))) e4328@f) e4320@spec))) '#f '#f '#f))) (set! e4265@import-library (lambda (e4310@spec*) (call-with-values (lambda () (e4263@parse-library-name e4310@spec*)) (lambda (e4316@e4313 e4317@e4315) ((lambda (e431a@pred e431b@name) (begin (if (null? e431b@name) (e2fb1@syntax-violation 'import '"empty library name" e4310@spec*) (void)) ((lambda (e431e@lib) (begin (if (not e431e@lib) (e2fb1@syntax-violation 'import '"cannot find library with required name" e431b@name) (void)) (if (not (e431a@pred (e2ab2@e2924@library-version e431e@lib))) (e2fb1@syntax-violation 'import '"library does not satisfy version specification" e4310@spec* e431e@lib) (void)) ((e2f37@imp-collector) e431e@lib) (e2ab6@e292c@library-subst e431e@lib))) (e2ada@e2974@find-library-by-name e431b@name)))) e4317@e4315 e4316@e4313))))) (set! e4267@get-import (lambda (e4282@spec) ((lambda (e4284@t) ((lambda (e4286@ls/false) (if (and e4286@ls/false (apply (lambda (e4288@x e4289@x*) (not (memq (e2fb7@syntax->datum e4288@x) '(for rename except only prefix library)))) e4286@ls/false)) (apply (lambda (e428c@x e428d@x*) (e4265@import-library (cons e428c@x e428d@x*))) e4286@ls/false) ((lambda (e4290@t) ((lambda (e4292@ls/false) (if (and e4292@ls/false (apply (lambda (e4294@rename e4295@isp e4296@old* e4297@new*) (and (eq? (e2fb7@syntax->datum e4294@rename) 'rename) (for-all e4255@idsyn? e4296@old*) (for-all e4255@idsyn? e4297@new*))) e4292@ls/false)) (apply (lambda (e429c@rename e429d@isp e429e@old* e429f@new*) ((lambda (e42a4@subst e42a5@old* e42a6@new*) ((lambda (e42aa@old-label*) ((lambda (e42ac@subst) (e4259@merge-substs (map cons e42a6@new* e42aa@old-label*) e42ac@subst)) (e425f@rem* e42a5@old* e42a4@subst))) (e425d@find* e42a5@old* e42a4@subst))) (e4267@get-import e429d@isp) (map e2fb7@syntax->datum e429e@old*) (map e2fb7@syntax->datum e429f@new*))) e4292@ls/false) ((lambda (e42ae@t) ((lambda (e42b0@ls/false) (if (and e42b0@ls/false (apply (lambda (e42b2@except e42b3@isp e42b4@sym*) (and (eq? (e2fb7@syntax->datum e42b2@except) 'except) (for-all e4255@idsyn? e42b4@sym*))) e42b0@ls/false)) (apply (lambda (e42b8@except e42b9@isp e42ba@sym*) ((lambda (e42be@subst) (e425f@rem* (map e2fb7@syntax->datum e42ba@sym*) e42be@subst)) (e4267@get-import e42b9@isp))) e42b0@ls/false) ((lambda (e42c0@t) ((lambda (e42c2@ls/false) (if (and e42c2@ls/false (apply (lambda (e42c4@only e42c5@isp e42c6@sym*) (and (eq? (e2fb7@syntax->datum e42c4@only) 'only) (for-all e4255@idsyn? e42c6@sym*))) e42c2@ls/false)) (apply (lambda (e42ca@only e42cb@isp e42cc@sym*) ((lambda (e42d0@subst e42d1@sym*) ((lambda (e42d4@sym*) ((lambda (e42d6@lab*) (map cons e42d4@sym* e42d6@lab*)) (e425d@find* e42d4@sym* e42d0@subst))) (e4261@remove-dups e42d1@sym*))) (e4267@get-import e42cb@isp) (map e2fb7@syntax->datum e42cc@sym*))) e42c2@ls/false) ((lambda (e42d8@t) ((lambda (e42da@ls/false) (if (and e42da@ls/false (apply (lambda (e42dc@prefix e42dd@isp e42de@p) (and (eq? (e2fb7@syntax->datum e42dc@prefix) 'prefix) (e4255@idsyn? e42de@p))) e42da@ls/false)) (apply (lambda (e42e2@prefix e42e3@isp e42e4@p) ((lambda (e42e8@subst e42e9@prefix) (map (lambda (e42ec@x) (cons (string->symbol (string-append e42e9@prefix (symbol->string (car e42ec@x)))) (cdr e42ec@x))) e42e8@subst)) (e4267@get-import e42e3@isp) (symbol->string (e2fb7@syntax->datum e42e4@p)))) e42da@ls/false) ((lambda (e42ee@t) ((lambda (e42f0@ls/false) (if (and e42f0@ls/false (apply (lambda (e42f2@library e42f3@spec*) (eq? (e2fb7@syntax->datum e42f2@library) 'library)) e42f0@ls/false)) (apply (lambda (e42f6@library e42f7@spec*) (e4265@import-library e42f7@spec*)) e42f0@ls/false) ((lambda (e42fa@t) ((lambda (e42fc@ls/false) (if (and e42fc@ls/false (apply (lambda (e42fe@for e42ff@isp e4300@rest) (eq? (e2fb7@syntax->datum e42fe@for) 'for)) e42fc@ls/false)) (apply (lambda (e4304@for e4305@isp e4306@rest) (e4267@get-import e4305@isp)) e42fc@ls/false) ((lambda (e430a@t) ((lambda (e430c@ls/false) (if e430c@ls/false (apply (lambda (e430e@spec) (e2fb1@syntax-violation 'import '"invalid import spec" e430e@spec)) e430c@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e430a@t))) (e2ec8@syntax-dispatch e430a@t 'any))) e42fa@t))) (e2ec8@syntax-dispatch e42fa@t '(any any . any)))) e42ee@t))) (e2ec8@syntax-dispatch e42ee@t '(any each-any)))) e42d8@t))) (e2ec8@syntax-dispatch e42d8@t '(any any any)))) e42c0@t))) (e2ec8@syntax-dispatch e42c0@t '(any any . each-any)))) e42ae@t))) (e2ec8@syntax-dispatch e42ae@t '(any any . each-any)))) e4290@t))) (e2ec8@syntax-dispatch e4290@t '(any any . #(each (any any)))))) e4284@t))) (e2ec8@syntax-dispatch e4284@t '(any . each-any)))) e4282@spec))) (set! e4269@add-imports! (lambda (e4272@imp e4273@h) ((lambda (e4276@subst) (for-each (lambda (e4278@x) ((lambda (e427a@name e427b@label) ((lambda (e427e@t) (if e427e@t ((lambda (e4280@l) (if (not (eq? e4280@l e427b@label)) (e4257@dup-error e427a@name) (void))) e427e@t) (hashtable-set! e4273@h e427a@name e427b@label))) (hashtable-ref e4273@h e427a@name '#f))) (car e4278@x) (cdr e4278@x))) e4276@subst)) (e4267@get-import e4272@imp)))) (lambda (e426a@imp*) ((letrec ((e426c@f (lambda (e426e@imp* e426f@h) (if (null? e426e@imp*) (hashtable-entries e426f@h) (begin (e4269@add-imports! (car e426e@imp*) e426f@h) (e426c@f (cdr e426e@imp*) e426f@h)))))) e426c@f) e426a@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! e2f2f@make-top-rib (lambda (e4460@names e4461@labels) ((lambda (e4464@rib) (begin (vector-for-each (lambda (e4466@name e4467@label) (begin (if (not (symbol? e4466@name)) (error 'make-top-rib '"BUG: not a symbol" e4466@name) (void)) (e2c70@extend-rib/nc! e4464@rib (e2c87@make-stx e4466@name e2c39@top-mark* '() '()) e4467@label))) e4460@names e4461@labels) e4464@rib)) (e2c6c@make-empty-rib)))) (set! e2f31@make-collector (lambda () ((lambda (e446a@ls) (lambda e446e ((lambda (e446f) (if (= e446f '0) (apply (lambda () e446a@ls) e446e) (if (= e446f '1) (apply (lambda (e446c@x) (set! e446a@ls (e2c32@set-cons e446c@x e446a@ls))) e446e) (error 'apply '"invalid arg count")))) (length e446e)))) '()))) (set! e2f33@inv-collector (e2867@e2791@make-parameter (lambda e4470@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (e4472@x) (begin (if (not (procedure? e4472@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" e4472@x) (void)) e4472@x)))) (set! e2f35@vis-collector (e2867@e2791@make-parameter (lambda e4474@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (e4476@x) (begin (if (not (procedure? e4476@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" e4476@x) (void)) e4476@x)))) (set! e2f37@imp-collector (e2867@e2791@make-parameter (lambda e4478@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (e447a@x) (begin (if (not (procedure? e447a@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" e447a@x) (void)) e447a@x)))) (set! e2f39@chi-library-internal (lambda (e447c@e* e447d@rib e447e@top?) (call-with-values (lambda () (e2f23@chi-body* e447c@e* '() '() '() '() '() '() '() e447d@rib e447e@top?)) (lambda (e4492@e4483 e4493@e4485 e4494@e4487 e4495@e4489 e4496@e448b e4497@e448d e4498@e448f e4499@e4491) ((lambda (e44a2@exp* e44a3@_kwd* e44a4@mod** e44a5@rhs* e44a6@lex* e44a7@mr e44a8@r e44a9@e*) (values (append (apply append (reverse e44a4@mod**)) e44a9@e*) e44a8@r e44a7@mr (reverse e44a6@lex*) (reverse e44a5@rhs*) e44a2@exp*)) e4499@e4491 e4498@e448f e4497@e448d e4496@e448b e4495@e4489 e4494@e4487 e4493@e4485 e4492@e4483))))) (set! e2f3b@chi-interaction-expr (lambda (e44b2@e e44b3@rib e44b4@r) (call-with-values (lambda () (e2f23@chi-body* (list e44b2@e) e44b4@r e44b4@r '() '() '() '() '() e44b3@rib '#t)) (lambda (e44c8@e44b9 e44c9@e44bb e44ca@e44bd e44cb@e44bf e44cc@e44c1 e44cd@e44c3 e44ce@e44c5 e44cf@e44c7) ((lambda (e44d8@_exp* e44d9@_kwd* e44da@mod** e44db@rhs* e44dc@lex* e44dd@mr e44de@r e44df@e*) ((lambda (e44e8@e*) ((lambda (e44ea@e) (values e44ea@e e44de@r)) (if (null? e44e8@e*) (e2c1d@e2b8d@build-void) (if (null? (cdr e44e8@e*)) (car e44e8@e*) (e2c1c@e2b8b@build-sequence '#f e44e8@e*))))) (e2ef8@expand-interaction-rhs*/init* (reverse e44dc@lex*) (reverse e44db@rhs*) (append (apply append (reverse e44da@mod**)) e44df@e*) e44de@r e44dd@mr))) e44cf@e44c7 e44ce@e44c5 e44cd@e44c3 e44cc@e44c1 e44cb@e44bf e44ca@e44bd e44c9@e44bb e44c8@e44b9))))) (set! e2f3d@library-body-expander (lambda (e44ec@name e44ed@main-exp* e44ee@imp* e44ef@b* e44f0@top?) ((lambda (e44f7@itc) (begin (set! e44f7@itc (e2f31@make-collector)) ((lambda (e4500@e44f9 e4501@e44fb e4502@e44fd e4503@e44ff) ((lambda (e4508@swap) (dynamic-wind e4508@swap (lambda () (call-with-values (lambda () (e2f2d@parse-import-spec* e44ee@imp*)) (lambda (e450e@e450b e450f@e450d) ((lambda (e4512@subst-labels e4513@subst-names) ((lambda (e4516@rib) ((lambda (e4519@wrap) (begin (set! e4519@wrap (lambda (e4594@x) (e2c87@make-stx e4594@x e2c39@top-mark* (list e4516@rib) '()))) ((lambda (e451a@b* e451b@main-exp* e451c@rtc e451d@vtc) ((lambda (e452a@e4523 e452b@e4525 e452c@e4527 e452d@e4529) ((lambda (e4532@swap) (dynamic-wind e4532@swap (lambda () (call-with-values (lambda () (e2f39@chi-library-internal e451a@b* e4516@rib e44f0@top?)) (lambda (e4540@e4535 e4541@e4537 e4542@e4539 e4543@e453b e4544@e453d e4545@e453f) ((lambda (e454c@internal-exp* e454d@rhs* e454e@lex* e454f@mr e4550@r e4551@init*) (call-with-values (lambda () (e2f27@parse-exports (append e451b@main-exp* e454c@internal-exp*))) (lambda (e455c@e4559 e455d@e455b) ((lambda (e4560@exp-id* e4561@exp-name*) (begin (e2c74@seal-rib! e4516@rib) ((lambda (e4564@init*) ((lambda (e4566@rhs*) ((lambda () (begin (e2c76@unseal-rib! e4516@rib) ((lambda (e4568@loc* e4569@export-subst) ((lambda (e456d@errstr) (begin (set! e456d@errstr '"attempt to export mutated variable") (call-with-values (lambda () (e2f9d@make-export-env/macros e454e@lex* e4568@loc* e4550@r)) (lambda (e4574@e456f e4575@e4571 e4576@e4573) ((lambda (e457a@macro* e457b@global* e457c@export-env) (begin (for-each (lambda (e4580@s) ((lambda (e4582@name e4583@label) ((lambda (e4586@p) (if e4586@p ((lambda (e4588@b) ((lambda (e458a@type) (if (eq? e458a@type 'mutable) (e2fb1@syntax-violation 'export e456d@errstr e4582@name) (void))) (car e4588@b))) (cdr e4586@p)) (void))) (assq e4583@label e457c@export-env))) (car e4580@s) (cdr e4580@s))) e4569@export-subst) ((lambda (e458c@invoke-body e458d@invoke-definitions) (values (e44f7@itc) (e451c@rtc) (e451d@vtc) (e2c1c@e2b8b@build-sequence '#f (append e458d@invoke-definitions (list e458c@invoke-body))) e457a@macro* e4569@export-subst e457c@export-env)) (e2c1f@e2b91@build-letrec* '#f e454e@lex* e4566@rhs* (e2f99@build-exports e457b@global* e4564@init*)) (map e2c18@e2ae8@build-global-define (map cdr e457b@global*))))) e4576@e4573 e4575@e4571 e4574@e456f))))) '#f)) (map e2c3f@gen-global e454e@lex*) (e2f9b@make-export-subst e4561@exp-name* e4560@exp-id*)))))) (e2efa@chi-rhs* e454d@rhs* e4550@r e454f@mr))) (e2ee6@chi-expr* e4551@init* e4550@r e454f@mr)))) e455d@e455b e455c@e4559)))) e4545@e453f e4544@e453d e4543@e453b e4542@e4539 e4541@e4537 e4540@e4535)))) e4532@swap)) (lambda () (begin ((lambda (e4590@t) (begin (e452a@e4523 e452c@e4527) (set! e452c@e4527 e4590@t))) (e452a@e4523)) ((lambda (e4592@t) (begin (e452b@e4525 e452d@e4529) (set! e452d@e4529 e4592@t))) (e452b@e4525)))))) e2f33@inv-collector e2f35@vis-collector e451c@rtc e451d@vtc)) (map e4519@wrap e44ef@b*) (map e4519@wrap e44ed@main-exp*) (e2f31@make-collector) (e2f31@make-collector)))) '#f)) (e2f2f@make-top-rib e4513@subst-names e4512@subst-labels))) e450f@e450d e450e@e450b)))) e4508@swap)) (lambda () (begin ((lambda (e4596@t) (begin (e4500@e44f9 e4502@e44fd) (set! e4502@e44fd e4596@t))) (e4500@e44f9)) ((lambda (e4598@t) (begin (e4501@e44fb e4503@e44ff) (set! e4503@e44ff e4598@t))) (e4501@e44fb)))))) e2f37@imp-collector e2fbf@top-level-context e44f7@itc '#f))) '#f))) (set! e2f3f@core-library-expander (lambda (e459a@e e459b@verify-name) (call-with-values (lambda () (e2f2b@parse-library e459a@e)) (lambda (e45a6@e459f e45a7@e45a1 e45a8@e45a3 e45a9@e45a5) ((lambda (e45ae@b* e45af@imp* e45b0@exp* e45b1@name*) (call-with-values (lambda () (e2f29@parse-library-name e45b1@name*)) (lambda (e45ba@e45b7 e45bb@e45b9) ((lambda (e45be@ver e45bf@name) (begin (e459b@verify-name e45bf@name) (call-with-values (lambda () (e2f3d@library-body-expander e45bf@name e45b0@exp* e45af@imp* e45ae@b* '#f)) (lambda (e45d0@e45c3 e45d1@e45c5 e45d2@e45c7 e45d3@e45c9 e45d4@e45cb e45d5@e45cd e45d6@e45cf) ((lambda (e45de@export-env e45df@export-subst e45e0@visit-code e45e1@invoke-code e45e2@visit-req* e45e3@invoke-req* e45e4@imp*) (values e45bf@name e45be@ver e45e4@imp* e45e3@invoke-req* e45e2@visit-req* e45e1@invoke-code e45e0@visit-code e45df@export-subst e45de@export-env)) e45d6@e45cf e45d5@e45cd e45d4@e45cb e45d3@e45c9 e45d2@e45c7 e45d1@e45c5 e45d0@e45c3))))) e45bb@e45b9 e45ba@e45b7)))) e45a9@e45a5 e45a8@e45a3 e45a7@e45a1 e45a6@e459f))))) (set! e2f41@parse-top-level-program (lambda (e45ec@e*) ((lambda (e45ee@t) ((lambda (e45f0@ls/false) (if (and e45f0@ls/false (apply (lambda (e45f2@import e45f3@imp* e45f4@b*) (eq? (e2fb7@syntax->datum e45f2@import) 'import)) e45f0@ls/false)) (apply (lambda (e45f8@import e45f9@imp* e45fa@b*) (values e45f9@imp* e45fa@b*)) e45f0@ls/false) ((lambda (e45fe@t) ((lambda (e4600@ls/false) (if (and e4600@ls/false (apply (lambda (e4602@import e4603@x e4604@y) (eq? (e2fb7@syntax->datum e4602@import) 'import)) e4600@ls/false)) (apply (lambda (e4608@import e4609@x e460a@y) (e2fb1@syntax-violation 'expander '"invalid syntax of top-level program" (e2cb7@syntax-car e45ec@e*))) e4600@ls/false) ((lambda (e460e@t) ((lambda (e4610@ls/false) (if e4610@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) e4610@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e460e@t))) (e2ec8@syntax-dispatch e460e@t '_))) e45fe@t))) (e2ec8@syntax-dispatch e45fe@t '((any . any) . any)))) e45ee@t))) (e2ec8@syntax-dispatch e45ee@t '((any . each-any) . each-any)))) e45ec@e*))) (set! e2f43@top-level-expander (lambda (e4612@e*) (call-with-values (lambda () (e2f41@parse-top-level-program e4612@e*)) (lambda (e4618@e4615 e4619@e4617) ((lambda (e461c@b* e461d@imp*) (call-with-values (lambda () (e2f3d@library-body-expander '() '() e461d@imp* e461c@b* '#t)) (lambda (e462e@e4621 e462f@e4623 e4630@e4625 e4631@e4627 e4632@e4629 e4633@e462b e4634@e462d) ((lambda (e463c@export-env e463d@export-subst e463e@visit-code e463f@invoke-code e4640@visit-req* e4641@invoke-req* e4642@imp*) (values e4641@invoke-req* e463f@invoke-code)) e4634@e462d e4633@e462b e4632@e4629 e4631@e4627 e4630@e4625 e462f@e4623 e462e@e4621)))) e4619@e4617 e4618@e4615))))) (set! e2f49@e2f44 (make-record-type-descriptor 'env '#f 'e2f47 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! e2f4b@e2f46 '#f) (set! e2f4d@e2f45 (make-record-constructor-descriptor e2f49@e2f44 '#f e2f4b@e2f46)) (set! e2f50@env? (record-predicate e2f49@e2f44)) (set! e2f52@make-env (record-constructor e2f4d@e2f45)) (set! e2f54@env-names (record-accessor e2f49@e2f44 '0)) (set! e2f56@env-labels (record-accessor e2f49@e2f44 '1)) (set! e2f58@env-itc (record-accessor e2f49@e2f44 '2)) (set! e2f5a@set-env-names! (record-mutator e2f49@e2f44 '0)) (set! e2f5c@set-env-labels! (record-mutator e2f49@e2f44 '1)) (set! e2f5e@set-env-itc! (record-mutator e2f49@e2f44 '2)) (set! e2f60@rp (e2864@e278b@make-record-printer 'env (lambda (e464a@x e464b@p e464c@wr) (display '"#<environment>" e464b@p)))) (set! e2f66@e2f61 (make-record-type-descriptor 'interaction-env '#f 'e2f64 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! e2f68@e2f63 '#f) (set! e2f6a@e2f62 (make-record-constructor-descriptor e2f66@e2f61 '#f e2f68@e2f63)) (set! e2f6d@interaction-env? (record-predicate e2f66@e2f61)) (set! e2f6f@make-interaction-env (record-constructor e2f6a@e2f62)) (set! e2f71@interaction-env-rib (record-accessor e2f66@e2f61 '0)) (set! e2f73@interaction-env-r (record-accessor e2f66@e2f61 '1)) (set! e2f75@interaction-env-locs (record-accessor e2f66@e2f61 '2)) (set! e2f77@set-interaction-env-rib! (record-mutator e2f66@e2f61 '0)) (set! e2f79@set-interaction-env-r! (record-mutator e2f66@e2f61 '1)) (set! e2f7b@set-interaction-env-locs! (record-mutator e2f66@e2f61 '2)) (set! e2f7d@rp (e2864@e278b@make-record-printer 'interaction-env (lambda (e4650@x e4651@p e4652@wr) (display '"#<environment>" e4651@p)))) (set! e2f7f@interaction-environment-symbols (lambda () (e2f87@environment-symbols (e2fbd@interaction-environment)))) (set! e2f81@environment-bindings (lambda (e4656@e) (vector->list (vector-map (lambda (e4658@name e4659@label) (e2f83@parse-binding (cons e4658@name (e2ae0@e2980@imported-label->binding e4659@label)))) (e2f54@env-names e4656@e) (e2f56@env-labels e4656@e))))) (set! e2f83@parse-binding (lambda (e465c@b) (cons (car e465c@b) ((lambda (e465e@t) (if (memv e465e@t '(core-prim global)) 'procedure (if (memv e465e@t '(core-macro macro global-macro)) 'syntax (if (memv e465e@t '($core-rtd)) 'record (if (eq? (car e465c@b) (cadr e465c@b)) 'syntax 'unknown))))) (cadr e465c@b))))) (set! e2f85@environment? (lambda (e4660@x) (or (e2f50@env? e4660@x) (e2f6d@interaction-env? e4660@x)))) (set! e2f87@environment-symbols (lambda (e4662@x) (if (e2f50@env? e4662@x) (vector->list (e2f54@env-names e4662@x)) (if (e2f6d@interaction-env? e4662@x) (map values (e2c58@rib-sym* (e2f71@interaction-env-rib e4662@x))) (assertion-violation 'environment-symbols '"not an environment" e4662@x))))) (set! e2f89@environment (lambda e4664@imp* ((lambda (e4666@itc) ((lambda (e466c@e4669 e466d@e466b) ((lambda (e4670@swap) (dynamic-wind e4670@swap (lambda () (call-with-values (lambda () (e2f2d@parse-import-spec* e4664@imp*)) (lambda (e4676@e4673 e4677@e4675) ((lambda (e467a@subst-labels e467b@subst-names) (e2f52@make-env e467b@subst-names e467a@subst-labels e4666@itc)) e4677@e4675 e4676@e4673)))) e4670@swap)) (lambda () ((lambda (e467e@t) (begin (e466c@e4669 e466d@e466b) (set! e466d@e466b e467e@t))) (e466c@e4669))))) e2f37@imp-collector e4666@itc)) (e2f31@make-collector)))) (set! e2f8b@null-environment (lambda (e4680@n) (begin (if (not (eqv? e4680@n '5)) (assertion-violation 'null-environment '"not 5" e4680@n) (void)) (e2f89@environment '(psyntax null-environment-5))))) (set! e2f8d@scheme-report-environment (lambda (e4682@n) (begin (if (not (eqv? e4682@n '5)) (assertion-violation 'scheme-report-environment '"not 5" e4682@n) (void)) (e2f89@environment '(psyntax scheme-report-environment-5))))) (set! e2f8f@expand (lambda (e4684@x e4685@env) (if (e2f50@env? e4685@env) ((lambda (e4688@rib) ((lambda (e468a@x e468b@itc e468c@rtc e468d@vtc) ((lambda (e4692@x) (begin (e2c74@seal-rib! e4688@rib) (values e4692@x (e468c@rtc)))) ((lambda (e46a4@e4695 e46a5@e4697 e46a6@e4699 e46a7@e469b e46a8@e469d e46a9@e469f e46aa@e46a1 e46ab@e46a3) ((lambda (e46b4@swap) (dynamic-wind e46b4@swap (lambda () (e2eea@chi-expr e468a@x '() '())) e46b4@swap)) (lambda () (begin ((lambda (e46b6@t) (begin (e46a4@e4695 e46a8@e469d) (set! e46a8@e469d e46b6@t))) (e46a4@e4695)) ((lambda (e46b8@t) (begin (e46a5@e4697 e46a9@e469f) (set! e46a9@e469f e46b8@t))) (e46a5@e4697)) ((lambda (e46ba@t) (begin (e46a6@e4699 e46aa@e46a1) (set! e46aa@e46a1 e46ba@t))) (e46a6@e4699)) ((lambda (e46bc@t) (begin (e46a7@e469b e46ab@e46a3) (set! e46ab@e46a3 e46bc@t))) (e46a7@e469b)))))) e2fbf@top-level-context e2f33@inv-collector e2f35@vis-collector e2f37@imp-collector '#f e468c@rtc e468d@vtc e468b@itc))) (e2c87@make-stx e4684@x e2c39@top-mark* (list e4688@rib) '()) (e2f58@env-itc e4685@env) (e2f31@make-collector) (e2f31@make-collector))) (e2f2f@make-top-rib (e2f54@env-names e4685@env) (e2f56@env-labels e4685@env))) (if (e2f6d@interaction-env? e4685@env) ((lambda (e46be@rib e46bf@r e46c0@rtc) ((lambda (e46c4@x) (call-with-values (lambda () ((lambda (e46da@e46cb e46db@e46cd e46dc@e46cf e46dd@e46d1 e46de@e46d3 e46df@e46d5 e46e0@e46d7 e46e1@e46d9) ((lambda (e46ea@swap) (dynamic-wind e46ea@swap (lambda () (e2f3b@chi-interaction-expr e46c4@x e46be@rib e46bf@r)) e46ea@swap)) (lambda () (begin ((lambda (e46ec@t) (begin (e46da@e46cb e46de@e46d3) (set! e46de@e46d3 e46ec@t))) (e46da@e46cb)) ((lambda (e46ee@t) (begin (e46db@e46cd e46df@e46d5) (set! e46df@e46d5 e46ee@t))) (e46db@e46cd)) ((lambda (e46f0@t) (begin (e46dc@e46cf e46e0@e46d7) (set! e46e0@e46d7 e46f0@t))) (e46dc@e46cf)) ((lambda (e46f2@t) (begin (e46dd@e46d1 e46e1@e46d9) (set! e46e1@e46d9 e46f2@t))) (e46dd@e46d1)))))) e2fbf@top-level-context e2f33@inv-collector e2f35@vis-collector e2f37@imp-collector e4685@env e46c0@rtc (e2f31@make-collector) (e2f31@make-collector))) (lambda (e46f4@e46c7 e46f5@e46c9) ((lambda (e46f8@r^ e46f9@e) (begin (e2f79@set-interaction-env-r! e4685@env e46f8@r^) (values e46f9@e (e46c0@rtc)))) e46f5@e46c9 e46f4@e46c7)))) (e2c87@make-stx e4684@x e2c39@top-mark* (list e46be@rib) '()))) (e2f71@interaction-env-rib e4685@env) (e2f73@interaction-env-r e4685@env) (e2f31@make-collector)) (assertion-violation 'expand '"not an environment" e4685@env))))) (set! e2f91@eval (lambda (e46fc@x e46fd@env) (begin (if (not (e2f85@environment? e46fd@env)) (error 'eval '"not an environment" e46fd@env) (void)) (call-with-values (lambda () (e2f8f@expand e46fc@x e46fd@env)) (lambda (e4704@e4701 e4705@e4703) ((lambda (e4708@invoke-req* e4709@x) (begin (for-each e2ae1@e2982@invoke-library e4708@invoke-req*) (eval-core (e28bb@e2873@expanded->core e4709@x)))) e4705@e4703 e4704@e4701)))))) (set! e2f93@library-expander (lambda e477a ((lambda (e477b) (if (= e477b '3) (apply (lambda (e470c@x e470d@filename e470e@verify-name) ((lambda (e4713@build-visit-code e4715@visit!) (begin (set! e4713@build-visit-code (lambda (e4768@macro*) (if (null? e4768@macro*) (e2c1d@e2b8d@build-void) (e2c1c@e2b8b@build-sequence '#f (map (lambda (e476a@x) ((lambda (e476c@loc e476d@src) (list 'set! e476c@loc e476d@src)) (car e476a@x) (cddr e476a@x))) e4768@macro*))))) (set! e4715@visit! (lambda (e4760@macro*) (for-each (lambda (e4762@x) ((lambda (e4764@loc e4765@proc) (set-symbol-value! e4764@loc e4765@proc)) (car e4762@x) (cadr e4762@x))) e4760@macro*))) (call-with-values (lambda () (e2f3f@core-library-expander e470c@x e470e@verify-name)) (lambda (e4728@e4717 e4729@e4719 e472a@e471b e472b@e471d e472c@e471f e472d@e4721 e472e@e4723 e472f@e4725 e4730@e4727) ((lambda (e473a@export-env e473b@export-subst e473c@macro* e473d@invoke-code e473e@vis* e473f@inv* e4740@imp* e4741@ver e4742@name) ((lambda (e474c@id e474d@name e474e@ver e474f@imp* e4750@vis* e4751@inv* e4752@visit-proc e4753@invoke-proc e4754@visit-code e4755@invoke-code) (begin (e2adf@e297e@install-library e474c@id e474d@name e474e@ver e474f@imp* e4750@vis* e4751@inv* e473b@export-subst e473a@export-env e4752@visit-proc e4753@invoke-proc e4754@visit-code e4755@invoke-code '#t e470d@filename) (values e474c@id e474d@name e474e@ver e474f@imp* e4750@vis* e4751@inv* e4755@invoke-code e4754@visit-code e473b@export-subst e473a@export-env))) (gensym) e4742@name e4741@ver (map e2ae5@e298a@library-spec e4740@imp*) (map e2ae5@e298a@library-spec e473e@vis*) (map e2ae5@e298a@library-spec e473f@inv*) (lambda () (e4715@visit! e473c@macro*)) (lambda () (eval-core (e28bb@e2873@expanded->core e473d@invoke-code))) (e4713@build-visit-code e473c@macro*) e473d@invoke-code)) e4730@e4727 e472f@e4725 e472e@e4723 e472d@e4721 e472c@e471f e472b@e471d e472a@e471b e4729@e4719 e4728@e4717))))) '#f '#f)) e477a) (if (= e477b '2) (apply (lambda (e4770@x e4771@filename) (e2f93@library-expander e4770@x e4771@filename (lambda (e4774@x) (values)))) e477a) (if (= e477b '1) (apply (lambda (e4776@x) (e2f93@library-expander e4776@x '#f (lambda (e4778@x) (values)))) e477a) (error 'apply '"invalid arg count"))))) (length e477a)))) (set! e2f95@boot-library-expand (lambda (e477c@x) (call-with-values (lambda () (e2f93@library-expander e477c@x)) (lambda (e4792@e477f e4793@e4781 e4794@e4783 e4795@e4785 e4796@e4787 e4797@e4789 e4798@e478b e4799@e478d e479a@e478f e479b@e4791) ((lambda (e47a6@export-env e47a7@export-subst e47a8@visit-code e47a9@invoke-code e47aa@inv* e47ab@vis* e47ac@imp* e47ad@ver e47ae@name e47af@id) (values e47ae@name e47a9@invoke-code e47a7@export-subst e47a6@export-env)) e479b@e4791 e479a@e478f e4799@e478d e4798@e478b e4797@e4789 e4796@e4787 e4795@e4785 e4794@e4783 e4793@e4781 e4792@e477f))))) (set! e2f97@rev-map-append (lambda (e47ba@f e47bb@ls e47bc@ac) (if (null? e47bb@ls) e47bc@ac (e2f97@rev-map-append e47ba@f (cdr e47bb@ls) (cons (e47ba@f (car e47bb@ls)) e47bc@ac))))) (set! e2f99@build-exports (lambda (e47c0@lex*+loc* e47c1@init*) (e2c1c@e2b8b@build-sequence '#f (cons (e2c1d@e2b8d@build-void) (e2f97@rev-map-append (lambda (e47c4@x) (list 'set! (cdr e47c4@x) (car e47c4@x))) e47c0@lex*+loc* e47c1@init*))))) (set! e2f9b@make-export-subst (lambda (e47c6@name* e47c7@id*) (map (lambda (e47ca@name e47cb@id) ((lambda (e47ce@label) (begin (if (not e47ce@label) (e2fb1@syntax-violation '#f '"cannot export unbound identifier" e47cb@id) (void)) (cons e47ca@name e47ce@label))) (e2cd7@id->label e47cb@id))) e47c6@name* e47c7@id*))) (set! e2f9d@make-export-env/macros (lambda (e47d0@lex* e47d1@loc* e47d2@r) ((lambda (e47d7@lookup) (begin (set! e47d7@lookup (lambda (e47f4@x) ((letrec ((e47f6@f (lambda (e47f8@x e47f9@lex* e47fa@loc*) (if (pair? e47f9@lex*) (if (eq? e47f8@x (car e47f9@lex*)) (car e47fa@loc*) (e47f6@f e47f8@x (cdr e47f9@lex*) (cdr e47fa@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) e47f6@f) e47f4@x e47d0@lex* e47d1@loc*))) ((letrec ((e47d8@f (lambda (e47da@r e47db@env e47dc@global* e47dd@macro*) (if (null? e47da@r) (values e47db@env e47dc@global* e47dd@macro*) ((lambda (e47e2@x) ((lambda (e47e4@label e47e5@b) ((lambda (e47e8@t) (if (memv e47e8@t '(lexical)) ((lambda (e47ea@v) ((lambda (e47ec@loc e47ed@type) (e47d8@f (cdr e47da@r) (cons (cons* e47e4@label e47ed@type e47ec@loc) e47db@env) (cons (cons (e2e54@lexical-var e47ea@v) e47ec@loc) e47dc@global*) e47dd@macro*)) (e47d7@lookup (e2e54@lexical-var e47ea@v)) (if (e2e56@lexical-mutable? e47ea@v) 'mutable 'global))) (e2ce1@binding-value e47e5@b)) (if (memv e47e8@t '(local-macro)) ((lambda (e47f0@loc) (e47d8@f (cdr e47da@r) (cons (cons* e47e4@label 'global-macro e47f0@loc) e47db@env) e47dc@global* (cons (cons e47f0@loc (e2ce1@binding-value e47e5@b)) e47dd@macro*))) (gensym)) (if (memv e47e8@t '(local-macro!)) ((lambda (e47f2@loc) (e47d8@f (cdr e47da@r) (cons (cons* e47e4@label 'global-macro! e47f2@loc) e47db@env) e47dc@global* (cons (cons e47f2@loc (e2ce1@binding-value e47e5@b)) e47dd@macro*))) (gensym)) (if (memv e47e8@t '($rtd $module)) (e47d8@f (cdr e47da@r) (cons e47e2@x e47db@env) e47dc@global* e47dd@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (e2cdf@binding-type e47e5@b) (e2ce1@binding-value e47e5@b))))))) (e2cdf@binding-type e47e5@b))) (car e47e2@x) (cdr e47e2@x))) (car e47da@r)))))) e47d8@f) e47d2@r '() '() '()))) '#f))) (set! e2f9f@generate-temporaries (lambda (e47fe@ls) ((lambda (e4800@t) ((lambda (e4802@ls/false) (if e4802@ls/false (apply (lambda (e4804@ls) (map (lambda (e4806@x) (e2c87@make-stx ((lambda (e4808@x) (if (or (symbol? e4808@x) (string? e4808@x)) (gensym e4808@x) (gensym 't))) (e2fb7@syntax->datum e4806@x)) e2c39@top-mark* '() '())) e4804@ls)) e4802@ls/false) ((lambda (e480a@t) ((lambda (e480c@ls/false) (if e480c@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) e480c@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e480a@t))) (e2ec8@syntax-dispatch e480a@t '_))) e4800@t))) (e2ec8@syntax-dispatch e4800@t 'each-any))) e47fe@ls))) (set! e2fa1@free-identifier=? (lambda (e480e@x e480f@y) (if (e2cbd@id? e480e@x) (if (e2cbd@id? e480f@y) (e2cc5@free-id=? e480e@x e480f@y) (assertion-violation 'free-identifier=? '"not an identifier" e480f@y)) (assertion-violation 'free-identifier=? '"not an identifier" e480e@x)))) (set! e2fa3@bound-identifier=? (lambda (e4812@x e4813@y) (if (e2cbd@id? e4812@x) (if (e2cbd@id? e4813@y) (e2cc3@bound-id=? e4812@x e4813@y) (assertion-violation 'bound-identifier=? '"not an identifier" e4813@y)) (assertion-violation 'bound-identifier=? '"not an identifier" e4812@x)))) (set! e2fa5@make-source-condition (lambda (e4816@x) ((lambda (e4820@e481b e4822@e481d e4824@e481c e4827@e481a e4829@make-source-condition e482b@e4818 e482d@e4819 e482f@source-condition? e4831@source-filename e4833@source-character) (begin (set! e4820@e481b (make-record-type-descriptor '&source-information e4c7e@e49c5@&condition-rtd 'e481e '#f '#f '#((immutable file-name) (immutable character)))) (set! e4822@e481d '#f) (set! e4824@e481c (make-record-constructor-descriptor e4820@e481b e4c7f@e49c7@&condition-rcd e4822@e481d)) (set! e4827@e481a (record-predicate e4820@e481b)) (set! e4829@make-source-condition (record-constructor e4824@e481c)) (set! e482b@e4818 (record-accessor e4820@e481b '0)) (set! e482d@e4819 (record-accessor e4820@e481b '1)) (set! e482f@source-condition? (condition-predicate e4820@e481b)) (set! e4831@source-filename (condition-accessor e4820@e481b e482b@e4818)) (set! e4833@source-character (condition-accessor e4820@e481b e482d@e4819)) (if (pair? e4816@x) (e4829@make-source-condition (car e4816@x) (cdr e4816@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! e2fa7@extract-position-condition (lambda (e4834@x) (e2fa5@make-source-condition (e2fa9@expression-position e4834@x)))) (set! e2fa9@expression-position (lambda (e4836@x) (and (e2c85@stx? e4836@x) ((lambda (e4838@x) (and (e285c@e277b@annotation? e4838@x) (e285d@e277d@annotation-source e4838@x))) (e2c89@stx-expr e4836@x))))) (set! e2fab@assertion-error (lambda (e483a@expr e483b@pos) (raise (condition (e4cae@e4a89@make-assertion-violation) (e4cc0@e4abb@make-who-condition 'assert) (e4c84@e4a1c@make-message-condition '"assertion failed") (e4cb6@e4aa0@make-irritants-condition (list e483a@expr)) (e2fa5@make-source-condition e483b@pos))))) (set! e2fad@syntax-error (lambda (e483e@x . e4840@args) (begin (if (not (for-all string? e4840@args)) (assertion-violation 'syntax-error '"invalid argument" e4840@args) (void)) (raise (condition (e4c84@e4a1c@make-message-condition (if (null? e4840@args) '"invalid syntax" (apply string-append e4840@args))) (e4ce2@e4b17@make-syntax-violation (e2fb7@syntax->datum e483e@x) '#f) (e2fa7@extract-position-condition e483e@x)))))) (set! e2faf@syntax-violation* (lambda (e4842@who e4843@msg e4844@form e4845@condition-object) (begin (if (not (string? e4843@msg)) (assertion-violation 'syntax-violation '"message is not a string" e4843@msg) (void)) ((lambda (e484a@who) (raise (condition (if e484a@who (e4cc0@e4abb@make-who-condition e484a@who) (condition)) (e4c84@e4a1c@make-message-condition e4843@msg) e4845@condition-object (e2fa7@extract-position-condition e4844@form)))) (if (or (string? e4842@who) (symbol? e4842@who)) e4842@who (if (not e4842@who) ((lambda (e484c@t) ((lambda (e484e@ls/false) (if (and e484e@ls/false (apply (lambda (e4850@id) (e2cbd@id? e4850@id)) e484e@ls/false)) (apply (lambda (e4852@id) (e2fb7@syntax->datum e4852@id)) e484e@ls/false) ((lambda (e4854@t) ((lambda (e4856@ls/false) (if (and e4856@ls/false (apply (lambda (e4858@id e4859@rest) (e2cbd@id? e4858@id)) e4856@ls/false)) (apply (lambda (e485c@id e485d@rest) (e2fb7@syntax->datum e485c@id)) e4856@ls/false) ((lambda (e4860@t) ((lambda (e4862@ls/false) (if e4862@ls/false (apply (lambda () '#f) e4862@ls/false) (e2fb1@syntax-violation '#f '"invalid syntax" e4860@t))) (e2ec8@syntax-dispatch e4860@t '_))) e4854@t))) (e2ec8@syntax-dispatch e4854@t '(any . any)))) e484c@t))) (e2ec8@syntax-dispatch e484c@t 'any))) e4844@form) (assertion-violation 'syntax-violation '"invalid who argument" e4842@who))))))) (set! e2fb1@syntax-violation (lambda e4872 ((lambda (e4873) (if (= e4873 '3) (apply (lambda (e4864@who e4865@msg e4866@form) (e2fb1@syntax-violation e4864@who e4865@msg e4866@form '#f)) e4872) (if (= e4873 '4) (apply (lambda (e486a@who e486b@msg e486c@form e486d@subform) (e2faf@syntax-violation* e486a@who e486b@msg e486c@form (e4ce2@e4b17@make-syntax-violation (e2fb7@syntax->datum e486c@form) (e2fb7@syntax->datum e486d@subform)))) e4872) (error 'apply '"invalid arg count")))) (length e4872)))) (set! e2fb3@identifier? (lambda (e4874@x) (e2cbd@id? e4874@x))) (set! e2fb5@datum->syntax (lambda (e4876@id e4877@datum) (if (e2cbd@id? e4876@id) (e2c9b@datum->stx e4876@id e4877@datum) (assertion-violation 'datum->syntax '"not an identifier" e4876@id)))) (set! e2fb7@syntax->datum (lambda (e487a@x) (e2cd3@stx->datum e487a@x))) (set! e2fb9@compile-r6rs-top-level (lambda (e487c@x*) (call-with-values (lambda () (e2f43@top-level-expander e487c@x*)) (lambda (e4882@e487f e4883@e4881) ((lambda (e4886@invoke-code e4887@lib*) (lambda () (begin (for-each e2ae1@e2982@invoke-library e4887@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (e28bb@e2873@expanded->core e4886@invoke-code)) (void)) (eval-core (e28bb@e2873@expanded->core e4886@invoke-code))))) e4883@e4881 e4882@e487f))))) (set! e2fbb@pre-compile-r6rs-top-level (lambda (e488a@x*) (call-with-values (lambda () (e2f43@top-level-expander e488a@x*)) (lambda (e4890@e488d e4891@e488f) ((lambda (e4894@invoke-code e4895@lib*) (begin (for-each e2ae1@e2982@invoke-library e4895@lib*) (e2865@e278d@compile-core (e28bb@e2873@expanded->core e4894@invoke-code)))) e4891@e488f e4890@e488d))))) (set! e2fbd@interaction-environment ((lambda (e4898@the-env) (lambda () (or e4898@the-env ((lambda (e489a@lib e489b@rib) (begin ((lambda (e489e@subst) (begin (e2c62@set-rib-sym*! e489b@rib (map car e489e@subst)) (e2c64@set-rib-mark**! e489b@rib (map (lambda (e48a0@x) e2c39@top-mark*) e489e@subst)) (e2c66@set-rib-label*! e489b@rib (map cdr e489e@subst)))) (e2ab6@e292c@library-subst e489a@lib)) ((lambda (e48a2@env) (begin (set! e4898@the-env e48a2@env) e48a2@env)) (e2f6f@make-interaction-env e489b@rib '() '())))) (e2ada@e2974@find-library-by-name '(mosh interaction)) (e2c6c@make-empty-rib))))) '#f)) (set! e2fbf@top-level-context (e2867@e2791@make-parameter '#f)) (begin (set! e49b0@e2fbf@top-level-context e2fbf@top-level-context) (set! e49af@e2fbd@interaction-environment e2fbd@interaction-environment) (set! e49ae@e2fbb@pre-compile-r6rs-top-level e2fbb@pre-compile-r6rs-top-level) (set! e49ad@e2fb9@compile-r6rs-top-level e2fb9@compile-r6rs-top-level) (set! e49ac@e2fb7@syntax->datum e2fb7@syntax->datum) (set! e49ab@e2fb5@datum->syntax e2fb5@datum->syntax) (set! e49aa@e2fb3@identifier? e2fb3@identifier?) (set! e49a9@e2fb1@syntax-violation e2fb1@syntax-violation) (set! e49a8@e2faf@syntax-violation* e2faf@syntax-violation*) (set! e49a7@e2fad@syntax-error e2fad@syntax-error) (set! e49a6@e2fab@assertion-error e2fab@assertion-error) (set! e49a5@e2fa9@expression-position e2fa9@expression-position) (set! e49a4@e2fa7@extract-position-condition e2fa7@extract-position-condition) (set! e49a3@e2fa5@make-source-condition e2fa5@make-source-condition) (set! e49a2@e2fa3@bound-identifier=? e2fa3@bound-identifier=?) (set! e49a1@e2fa1@free-identifier=? e2fa1@free-identifier=?) (set! e49a0@e2f9f@generate-temporaries e2f9f@generate-temporaries) (set! e499f@e2f9d@make-export-env/macros e2f9d@make-export-env/macros) (set! e499e@e2f9b@make-export-subst e2f9b@make-export-subst) (set! e499d@e2f99@build-exports e2f99@build-exports) (set! e499c@e2f97@rev-map-append e2f97@rev-map-append) (set! e499b@e2f95@boot-library-expand e2f95@boot-library-expand) (set! e499a@e2f93@library-expander e2f93@library-expander) (set! e4999@e2f91@eval e2f91@eval) (set! e4998@e2f8f@expand e2f8f@expand) (set! e4997@e2f8d@scheme-report-environment e2f8d@scheme-report-environment) (set! e4996@e2f8b@null-environment e2f8b@null-environment) (set! e4995@e2f89@environment e2f89@environment) (set! e4994@e2f87@environment-symbols e2f87@environment-symbols) (set! e4993@e2f85@environment? e2f85@environment?) (set! e4992@e2f83@parse-binding e2f83@parse-binding) (set! e4991@e2f81@environment-bindings e2f81@environment-bindings) (set! e4990@e2f7f@interaction-environment-symbols e2f7f@interaction-environment-symbols) (set! e498f@e2f7d@rp e2f7d@rp) (set! e498e@e2f7b@set-interaction-env-locs! e2f7b@set-interaction-env-locs!) (set! e498d@e2f79@set-interaction-env-r! e2f79@set-interaction-env-r!) (set! e498c@e2f77@set-interaction-env-rib! e2f77@set-interaction-env-rib!) (set! e498b@e2f75@interaction-env-locs e2f75@interaction-env-locs) (set! e498a@e2f73@interaction-env-r e2f73@interaction-env-r) (set! e4989@e2f71@interaction-env-rib e2f71@interaction-env-rib) (set! e4988@e2f6f@make-interaction-env e2f6f@make-interaction-env) (set! e4987@e2f6d@interaction-env? e2f6d@interaction-env?) (set! e4986@e2f6a@e2f62 e2f6a@e2f62) (set! e4985@e2f68@e2f63 e2f68@e2f63) (set! e4984@e2f66@e2f61 e2f66@e2f61) (set! e4983@e2f60@rp e2f60@rp) (set! e4982@e2f5e@set-env-itc! e2f5e@set-env-itc!) (set! e4981@e2f5c@set-env-labels! e2f5c@set-env-labels!) (set! e4980@e2f5a@set-env-names! e2f5a@set-env-names!) (set! e497f@e2f58@env-itc e2f58@env-itc) (set! e497e@e2f56@env-labels e2f56@env-labels) (set! e497d@e2f54@env-names e2f54@env-names) (set! e497c@e2f52@make-env e2f52@make-env) (set! e497b@e2f50@env? e2f50@env?) (set! e497a@e2f4d@e2f45 e2f4d@e2f45) (set! e4979@e2f4b@e2f46 e2f4b@e2f46) (set! e4978@e2f49@e2f44 e2f49@e2f44) (set! e4977@e2f43@top-level-expander e2f43@top-level-expander) (set! e4976@e2f41@parse-top-level-program e2f41@parse-top-level-program) (set! e4975@e2f3f@core-library-expander e2f3f@core-library-expander) (set! e4974@e2f3d@library-body-expander e2f3d@library-body-expander) (set! e4973@e2f3b@chi-interaction-expr e2f3b@chi-interaction-expr) (set! e4972@e2f39@chi-library-internal e2f39@chi-library-internal) (set! e4971@e2f37@imp-collector e2f37@imp-collector) (set! e4970@e2f35@vis-collector e2f35@vis-collector) (set! e496f@e2f33@inv-collector e2f33@inv-collector) (set! e496e@e2f31@make-collector e2f31@make-collector) (set! e496d@e2f2f@make-top-rib e2f2f@make-top-rib) (set! e496c@e2f2d@parse-import-spec* e2f2d@parse-import-spec*) (set! e496b@e2f2b@parse-library e2f2b@parse-library) (set! e496a@e2f29@parse-library-name e2f29@parse-library-name) (set! e4969@e2f27@parse-exports e2f27@parse-exports) (set! e4968@e2f25@expand-transformer e2f25@expand-transformer) (set! e4967@e2f23@chi-body* e2f23@chi-body*) (set! e4966@e2f21@chi-internal-module e2f21@chi-internal-module) (set! e4965@e2f1f@module-interface-exp-id* e2f1f@module-interface-exp-id*) (set! e4964@e2f1d@set-module-interface-exp-lab-vec! e2f1d@set-module-interface-exp-lab-vec!) (set! e4963@e2f1b@set-module-interface-exp-id-vec! e2f1b@set-module-interface-exp-id-vec!) (set! e4962@e2f19@set-module-interface-first-mark! e2f19@set-module-interface-first-mark!) (set! e4961@e2f17@module-interface-exp-lab-vec e2f17@module-interface-exp-lab-vec) (set! e4960@e2f15@module-interface-exp-id-vec e2f15@module-interface-exp-id-vec) (set! e495f@e2f13@module-interface-first-mark e2f13@module-interface-first-mark) (set! e495e@e2f11@make-module-interface e2f11@make-module-interface) (set! e495d@e2f0f@module-interface? e2f0f@module-interface?) (set! e495c@e2f0c@e2f04 e2f0c@e2f04) (set! e495b@e2f0a@e2f05 e2f0a@e2f05) (set! e495a@e2f08@e2f03 e2f08@e2f03) (set! e4959@e2f02@parse-module e2f02@parse-module) (set! e4958@e2f00@chi-internal e2f00@chi-internal) (set! e4957@e2efe@find-dups e2efe@find-dups) (set! e4956@e2efc@find-bound=? e2efc@find-bound=?) (set! e4955@e2efa@chi-rhs* e2efa@chi-rhs*) (set! e4954@e2ef8@expand-interaction-rhs*/init* e2ef8@expand-interaction-rhs*/init*) (set! e4953@e2ef6@chi-rhs e2ef6@chi-rhs) (set! e4952@e2ef4@chi-defun e2ef4@chi-defun) (set! e4951@e2ef2@chi-lambda-clause* e2ef2@chi-lambda-clause*) (set! e4950@e2ef0@chi-lambda-clause e2ef0@chi-lambda-clause) (set! e494f@e2eee@verify-formals e2eee@verify-formals) (set! e494e@e2eec@chi-set! e2eec@chi-set!) (set! e494d@e2eea@chi-expr e2eea@chi-expr) (set! e494c@e2ee8@chi-application e2ee8@chi-application) (set! e494b@e2ee6@chi-expr* e2ee6@chi-expr*) (set! e494a@e2ee4@chi-global-macro e2ee4@chi-global-macro) (set! e4949@e2ee2@chi-local-macro e2ee2@chi-local-macro) (set! e4948@e2ee0@chi-macro e2ee0@chi-macro) (set! e4947@e2ede@do-macro-call e2ede@do-macro-call) (set! e4946@e2edc@local-macro-transformer e2edc@local-macro-transformer) (set! e4945@e2eda@macro-transformer e2eda@macro-transformer) (set! e4944@e2ed8@symbol-macro e2ed8@symbol-macro) (set! e4943@e2ed6@core-macro-transformer e2ed6@core-macro-transformer) (set! e4942@e2ed4@syntax-transformer e2ed4@syntax-transformer) (set! e4941@e2ed2@ellipsis-map e2ed2@ellipsis-map) (set! e4940@e2ed0@syntax-case-transformer e2ed0@syntax-case-transformer) (set! e493f@e2ece@verify-literals e2ece@verify-literals) (set! e493e@e2ecc@underscore? e2ecc@underscore?) (set! e493d@e2eca@ellipsis? e2eca@ellipsis?) (set! e493c@e2ec8@syntax-dispatch e2ec8@syntax-dispatch) (set! e493b@e2ec6@convert-pattern e2ec6@convert-pattern) (set! e493a@e2ec4@foreign-call-transformer e2ec4@foreign-call-transformer) (set! e4939@e2ec2@parameterize-macro e2ec2@parameterize-macro) (set! e4938@e2ec0@incorrect-usage-macro e2ec0@incorrect-usage-macro) (set! e4937@e2ebe@define-condition-type-macro e2ebe@define-condition-type-macro) (set! e4936@e2ebc@define-record-type-macro e2ebc@define-record-type-macro) (set! e4935@e2eba@define-struct-macro e2eba@define-struct-macro) (set! e4934@e2eb8@quasisyntax-macro e2eb8@quasisyntax-macro) (set! e4933@e2eb6@quasiquote-macro e2eb6@quasiquote-macro) (set! e4932@e2eb4@syntax-rules-macro e2eb4@syntax-rules-macro) (set! e4931@e2eb2@include-into-macro e2eb2@include-into-macro) (set! e4930@e2eb0@include-macro e2eb0@include-macro) (set! e492f@e2eae@do-include e2eae@do-include) (set! e492e@e2eac@cond-macro e2eac@cond-macro) (set! e492d@e2eaa@and-macro e2eaa@and-macro) (set! e492c@e2ea8@or-macro e2ea8@or-macro) (set! e492b@e2ea6@let*-macro e2ea6@let*-macro) (set! e492a@e2ea4@do-macro e2ea4@do-macro) (set! e4929@e2ea2@identifier-syntax-macro e2ea2@identifier-syntax-macro) (set! e4928@e2ea0@endianness-macro e2ea0@endianness-macro) (set! e4927@e2e9e@assert-macro e2e9e@assert-macro) (set! e4926@e2e9c@delay-macro e2e9c@delay-macro) (set! e4925@e2e9a@time-macro e2e9a@time-macro) (set! e4924@e2e98@define-enumeration-macro e2e98@define-enumeration-macro) (set! e4923@e2e96@guard-macro e2e96@guard-macro) (set! e4922@e2e94@trace-letrec-syntax-macro e2e94@trace-letrec-syntax-macro) (set! e4921@e2e92@trace-let-syntax-macro e2e92@trace-let-syntax-macro) (set! e4920@e2e90@trace-let/rec-syntax e2e90@trace-let/rec-syntax) (set! e491f@e2e8e@trace-define-syntax-macro e2e8e@trace-define-syntax-macro) (set! e491e@e2e8c@trace-define-macro e2e8c@trace-define-macro) (set! e491d@e2e8a@trace-lambda-macro e2e8a@trace-lambda-macro) (set! e491c@e2e88@let*-values-macro e2e88@let*-values-macro) (set! e491b@e2e86@let-values-macro e2e86@let-values-macro) (set! e491a@e2e84@let-macro e2e84@let-macro) (set! e4919@e2e82@invalid-fmls-error e2e82@invalid-fmls-error) (set! e4918@e2e80@with-syntax-macro e2e80@with-syntax-macro) (set! e4917@e2e7e@bless e2e7e@bless) (set! e4916@e2e7c@lambda-transformer e2e7c@lambda-transformer) (set! e4915@e2e7a@case-lambda-transformer e2e7a@case-lambda-transformer) (set! e4914@e2e78@quote-transformer e2e78@quote-transformer) (set! e4913@e2e76@case-macro e2e76@case-macro) (set! e4912@e2e74@or-transformer e2e74@or-transformer) (set! e4911@e2e72@and-transformer e2e72@and-transformer) (set! e4910@e2e70@if-transformer e2e70@if-transformer) (set! e490f@e2e6e@unless-macro e2e6e@unless-macro) (set! e490e@e2e6c@when-macro e2e6c@when-macro) (set! e490d@e2e6a@record-constructor-descriptor-transformer e2e6a@record-constructor-descriptor-transformer) (set! e490c@e2e68@record-type-descriptor-transformer e2e68@record-type-descriptor-transformer) (set! e490b@e2e66@type-descriptor-transformer e2e66@type-descriptor-transformer) (set! e490a@e2e64@fluid-let-syntax-transformer e2e64@fluid-let-syntax-transformer) (set! e4909@e2e62@letrec*-transformer e2e62@letrec*-transformer) (set! e4908@e2e60@letrec-transformer e2e60@letrec-transformer) (set! e4907@e2e5e@letrec-helper e2e5e@letrec-helper) (set! e4906@e2e5c@add-lexicals e2e5c@add-lexicals) (set! e4905@e2e5a@add-lexical e2e5a@add-lexical) (set! e4904@e2e58@set-lexical-mutable! e2e58@set-lexical-mutable!) (set! e4903@e2e56@lexical-mutable? e2e56@lexical-mutable?) (set! e4902@e2e54@lexical-var e2e54@lexical-var) (set! e4901@e2e52@scheme-stx e2e52@scheme-stx) (set! e4900@e2e50@scheme-stx-hashtable e2e50@scheme-stx-hashtable) (set! e48ff@e2e4e@parse-define-syntax e2e4e@parse-define-syntax) (set! e48fe@e2e4c@parse-define e2e4c@parse-define) (set! e48fd@e2cfb@make-eval-transformer e2cfb@make-eval-transformer) (set! e48fc@e2cf9@variable-transformer-procedure e2cf9@variable-transformer-procedure) (set! e48fb@e2cf7@variable-transformer? e2cf7@variable-transformer?) (set! e48fa@e2cf5@make-variable-transformer e2cf5@make-variable-transformer) (set! e48f9@e2cf3@sanitize-binding e2cf3@sanitize-binding) (set! e48f8@e2ce5@syntax-type e2ce5@syntax-type) (set! e48f7@e2ce3@raise-unbound-error e2ce3@raise-unbound-error) (set! e48f6@e2ce1@binding-value e2ce1@binding-value) (set! e48f5@e2cdf@binding-type e2cdf@binding-type) (set! e48f4@e2cdd@make-binding e2cdd@make-binding) (set! e48f3@e2cdb@label->binding e2cdb@label->binding) (set! e48f2@e2cd9@id->real-label e2cd9@id->real-label) (set! e48f1@e2cd7@id->label e2cd7@id->label) (set! e48f0@e2cd5@same-marks*? e2cd5@same-marks*?) (set! e48ef@e2cd3@stx->datum e2cd3@stx->datum) (set! e48ee@e2cd1@strip e2cd1@strip) (set! e48ed@e2ccf@strip-annotations e2ccf@strip-annotations) (set! e48ec@e2ccd@self-evaluating? e2ccd@self-evaluating?) (set! e48eb@e2ccb@bound-id-member? e2ccb@bound-id-member?) (set! e48ea@e2cc9@distinct-bound-ids? e2cc9@distinct-bound-ids?) (set! e48e9@e2cc7@valid-bound-ids? e2cc7@valid-bound-ids?) (set! e48e8@e2cc5@free-id=? e2cc5@free-id=?) (set! e48e7@e2cc3@bound-id=? e2cc3@bound-id=?) (set! e48e6@e2cc1@same-marks? e2cc1@same-marks?) (set! e48e5@e2cbf@id->sym e2cbf@id->sym) (set! e48e4@e2cbd@id? e2cbd@id?) (set! e48e3@e2cbb@syntax->list e2cbb@syntax->list) (set! e48e2@e2cb9@syntax-cdr e2cb9@syntax-cdr) (set! e48e1@e2cb7@syntax-car e2cb7@syntax-car) (set! e48e0@e2cb5@syntax-list? e2cb5@syntax-list?) (set! e48df@e2cb3@syntax-null? e2cb3@syntax-null?) (set! e48de@e2cb1@syntax-vector? e2cb1@syntax-vector?) (set! e48dd@e2caf@syntax-pair? e2caf@syntax-pair?) (set! e48dc@e2cad@syntax-vector->list e2cad@syntax-vector->list) (set! e48db@e2cab@syntax-kind? e2cab@syntax-kind?) (set! e48da@e2ca9@add-subst e2ca9@add-subst) (set! e48d9@e2ca7@add-mark e2ca7@add-mark) (set! e48d8@e2ca5@mkstx e2ca5@mkstx) (set! e48d7@e2ca3@join-wraps e2ca3@join-wraps) (set! e48d6@e2ca1@anti-mark? e2ca1@anti-mark?) (set! e48d5@e2c9f@anti-mark e2c9f@anti-mark) (set! e48d4@e2c9d@gen-mark e2c9d@gen-mark) (set! e48d3@e2c9b@datum->stx e2c9b@datum->stx) (set! e48d2@e2c99@rp e2c99@rp) (set! e48d1@e2c97@set-stx-ae*! e2c97@set-stx-ae*!) (set! e48d0@e2c95@set-stx-subst*! e2c95@set-stx-subst*!) (set! e48cf@e2c93@set-stx-mark*! e2c93@set-stx-mark*!) (set! e48ce@e2c91@set-stx-expr! e2c91@set-stx-expr!) (set! e48cd@e2c8f@stx-ae* e2c8f@stx-ae*) (set! e48cc@e2c8d@stx-subst* e2c8d@stx-subst*) (set! e48cb@e2c8b@stx-mark* e2c8b@stx-mark*) (set! e48ca@e2c89@stx-expr e2c89@stx-expr) (set! e48c9@e2c87@make-stx e2c87@make-stx) (set! e48c8@e2c85@stx? e2c85@stx?) (set! e48c7@e2c82@e2c7a e2c82@e2c7a) (set! e48c6@e2c80@e2c7b e2c80@e2c7b) (set! e48c5@e2c7e@e2c79 e2c7e@e2c79) (set! e48c4@e2c78@make-full-rib e2c78@make-full-rib) (set! e48c3@e2c76@unseal-rib! e2c76@unseal-rib!) (set! e48c2@e2c74@seal-rib! e2c74@seal-rib!) (set! e48c1@e2c72@make-rib-map e2c72@make-rib-map) (set! e48c0@e2c70@extend-rib/nc! e2c70@extend-rib/nc!) (set! e48bf@e2c6e@extend-rib! e2c6e@extend-rib!) (set! e48be@e2c6c@make-empty-rib e2c6c@make-empty-rib) (set! e48bd@e2c6a@set-rib-cache! e2c6a@set-rib-cache!) (set! e48bc@e2c68@set-rib-sealed/freq! e2c68@set-rib-sealed/freq!) (set! e48bb@e2c66@set-rib-label*! e2c66@set-rib-label*!) (set! e48ba@e2c64@set-rib-mark**! e2c64@set-rib-mark**!) (set! e48b9@e2c62@set-rib-sym*! e2c62@set-rib-sym*!) (set! e48b8@e2c60@rib-cache e2c60@rib-cache) (set! e48b7@e2c5e@rib-sealed/freq e2c5e@rib-sealed/freq) (set! e48b6@e2c5c@rib-label* e2c5c@rib-label*) (set! e48b5@e2c5a@rib-mark** e2c5a@rib-mark**) (set! e48b4@e2c58@rib-sym* e2c58@rib-sym*) (set! e48b3@e2c56@make-rib e2c56@make-rib) (set! e48b2@e2c54@rib? e2c54@rib?) (set! e48b1@e2c51@e2c49 e2c51@e2c49) (set! e48b0@e2c4f@e2c4a e2c4f@e2c4a) (set! e48af@e2c4d@e2c48 e2c4d@e2c48) (set! e48ae@e2c47@gen-define-label e2c47@gen-define-label) (set! e48ad@e2c45@gen-define-label+loc e2c45@gen-define-label+loc) (set! e48ac@e2c43@gen-top-level-label e2c43@gen-top-level-label) (set! e48ab@e2c41@gen-label e2c41@gen-label) (set! e48aa@e2c3f@gen-global e2c3f@gen-global) (set! e48a9@e2c3d@gen-lexical e2c3d@gen-lexical) (set! e48a8@e2c3b@top-marked? e2c3b@top-marked?) (set! e48a7@e2c39@top-mark* e2c39@top-mark*) (set! e48a6@e2c34@set-union e2c34@set-union) (set! e48a5@e2c32@set-cons e2c32@set-cons) (set! e48a4@e2c30@file-options-macro e2c30@file-options-macro) (e2ad7@e296e@current-library-expander e2f93@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (e49ba@e49b5 e49bc@e49b7 e49be@e49b6 e49c1@&condition? e49c3@make-&condition e49c5@&condition-rtd e49c7@&condition-rcd e4a13@e4a0e e4a15@e4a10 e4a17@e4a0f e4a1a@p? e4a1c@make-message-condition e4a1e@e4a0d e4a20@message-condition? e4a22@condition-message e4a24@&message-rtd e4a26@&message-rcd e4a2c@e4a27 e4a2e@e4a29 e4a30@e4a28 e4a33@p? e4a35@make-warning e4a37@warning? e4a39@&warning-rtd e4a3b@&warning-rcd e4a41@e4a3c e4a43@e4a3e e4a45@e4a3d e4a48@p? e4a4a@make-serious-condition e4a4c@serious-condition? e4a4e@&serious-rtd e4a50@&serious-rcd e4a56@e4a51 e4a58@e4a53 e4a5a@e4a52 e4a5d@p? e4a5f@make-error e4a61@error? e4a63@&error-rtd e4a65@&error-rcd e4a6b@e4a66 e4a6d@e4a68 e4a6f@e4a67 e4a72@p? e4a74@make-violation e4a76@violation? e4a78@&violation-rtd e4a7a@&violation-rcd e4a80@e4a7b e4a82@e4a7d e4a84@e4a7c e4a87@p? e4a89@make-assertion-violation e4a8b@assertion-violation? e4a8d@&assertion-rtd e4a8f@&assertion-rcd e4a97@e4a92 e4a99@e4a94 e4a9b@e4a93 e4a9e@p? e4aa0@make-irritants-condition e4aa2@e4a91 e4aa4@irritants-condition? e4aa6@condition-irritants e4aa8@&irritants-rtd e4aaa@&irritants-rcd e4ab2@e4aad e4ab4@e4aaf e4ab6@e4aae e4ab9@p? e4abb@make-who-condition e4abd@e4aac e4abf@who-condition? e4ac1@condition-who e4ac3@&who-rtd e4ac5@&who-rcd e4acb@e4ac6 e4acd@e4ac8 e4acf@e4ac7 e4ad2@p? e4ad4@make-non-continuable-violation e4ad6@non-continuable-violation? e4ad8@&non-continuable-rtd e4ada@&non-continuable-rcd e4ae0@e4adb e4ae2@e4add e4ae4@e4adc e4ae7@p? e4ae9@make-implementation-restriction-violation e4aeb@implementation-restriction-violation? e4aed@&implementation-restriction-rtd e4aef@&implementation-restriction-rcd e4af5@e4af0 e4af7@e4af2 e4af9@e4af1 e4afc@p? e4afe@make-lexical-violation e4b00@lexical-violation? e4b02@&lexical-rtd e4b04@&lexical-rcd e4b0e@e4b09 e4b10@e4b0b e4b12@e4b0a e4b15@p? e4b17@make-syntax-violation e4b19@e4b06 e4b1b@e4b08 e4b1d@syntax-violation? e4b1f@syntax-violation-form e4b21@syntax-violation-subform e4b23@&syntax-rtd e4b25@&syntax-rcd e4b2b@e4b26 e4b2d@e4b28 e4b2f@e4b27 e4b32@p? e4b34@make-undefined-violation e4b36@undefined-violation? e4b38@&undefined-rtd e4b3a@&undefined-rcd e4b40@e4b3b e4b42@e4b3d e4b44@e4b3c e4b47@p? e4b49@make-i/o-error e4b4b@i/o-error? e4b4d@&i/o-rtd e4b4f@&i/o-rcd e4b55@e4b50 e4b57@e4b52 e4b59@e4b51 e4b5c@p? e4b5e@make-i/o-read-error e4b60@i/o-read-error? e4b62@&i/o-read-rtd e4b64@&i/o-read-rcd e4b6a@e4b65 e4b6c@e4b67 e4b6e@e4b66 e4b71@p? e4b73@make-i/o-write-error e4b75@i/o-write-error? e4b77@&i/o-write-rtd e4b79@&i/o-write-rcd e4b81@e4b7c e4b83@e4b7e e4b85@e4b7d e4b88@p? e4b8a@make-i/o-invalid-position-error e4b8c@e4b7b e4b8e@i/o-invalid-position-error? e4b90@i/o-error-position e4b92@&i/o-invalid-position-rtd e4b94@&i/o-invalid-position-rcd e4b9c@e4b97 e4b9e@e4b99 e4ba0@e4b98 e4ba3@p? e4ba5@make-i/o-filename-error e4ba7@e4b96 e4ba9@i/o-filename-error? e4bab@i/o-error-filename e4bad@&i/o-filename-rtd e4baf@&i/o-filename-rcd e4bb5@e4bb0 e4bb7@e4bb2 e4bb9@e4bb1 e4bbc@p? e4bbe@make-i/o-file-protection-error e4bc0@i/o-file-protection-error? e4bc2@&i/o-file-protection-rtd e4bc4@&i/o-file-protection-rcd e4bca@e4bc5 e4bcc@e4bc7 e4bce@e4bc6 e4bd1@p? e4bd3@make-i/o-file-is-read-only-error e4bd5@i/o-file-is-read-only-error? e4bd7@&i/o-file-is-read-only-rtd e4bd9@&i/o-file-is-read-only-rcd e4bdf@e4bda e4be1@e4bdc e4be3@e4bdb e4be6@p? e4be8@make-i/o-file-already-exists-error e4bea@i/o-file-already-exists-error? e4bec@&i/o-file-already-exists-rtd e4bee@&i/o-file-already-exists-rcd e4bf4@e4bef e4bf6@e4bf1 e4bf8@e4bf0 e4bfb@p? e4bfd@make-i/o-file-does-not-exist-error e4bff@i/o-file-does-not-exist-error? e4c01@&i/o-file-does-not-exist-rtd e4c03@&i/o-file-does-not-exist-rcd e4c0b@e4c06 e4c0d@e4c08 e4c0f@e4c07 e4c12@p? e4c14@make-i/o-port-error e4c16@e4c05 e4c18@i/o-port-error? e4c1a@i/o-error-port e4c1c@&i/o-port-rtd e4c1e@&i/o-port-rcd e4c24@e4c1f e4c26@e4c21 e4c28@e4c20 e4c2b@p? e4c2d@make-i/o-decoding-error e4c2f@i/o-decoding-error? e4c31@&i/o-decoding-rtd e4c33@&i/o-decoding-rcd e4c3b@e4c36 e4c3d@e4c38 e4c3f@e4c37 e4c42@p? e4c44@make-i/o-encoding-error e4c46@e4c35 e4c48@i/o-encoding-error? e4c4a@i/o-encoding-error-char e4c4c@&i/o-encoding-rtd e4c4e@&i/o-encoding-rcd e4c54@e4c4f e4c56@e4c51 e4c58@e4c50 e4c5b@p? e4c5d@make-no-infinities-violation e4c5f@no-infinities-violation? e4c61@&no-infinities-rtd e4c63@&no-infinities-rcd e4c69@e4c64 e4c6b@e4c66 e4c6d@e4c65 e4c70@p? e4c72@make-no-nans-violation e4c74@no-nans-violation? e4c76@&no-nans-rtd e4c78@&no-nans-rcd) (begin (set! e49ba@e49b5 (make-record-type-descriptor '&condition '#f 'e49b8 '#f '#f '#())) (set! e49bc@e49b7 '#f) (set! e49be@e49b6 (make-record-constructor-descriptor e49ba@e49b5 '#f e49bc@e49b7)) (set! e49c1@&condition? (record-predicate e49ba@e49b5)) (set! e49c3@make-&condition (record-constructor e49be@e49b6)) (set! e49c5@&condition-rtd e49ba@e49b5) (set! e49c7@&condition-rcd e49be@e49b6) (set! e4a13@e4a0e (make-record-type-descriptor '&message e49ba@e49b5 'e4a11 '#f '#f '#((immutable message)))) (set! e4a15@e4a10 '#f) (set! e4a17@e4a0f (make-record-constructor-descriptor e4a13@e4a0e e49be@e49b6 e4a15@e4a10)) (set! e4a1a@p? (record-predicate e4a13@e4a0e)) (set! e4a1c@make-message-condition (record-constructor e4a17@e4a0f)) (set! e4a1e@e4a0d (record-accessor e4a13@e4a0e '0)) (set! e4a20@message-condition? (condition-predicate e4a13@e4a0e)) (set! e4a22@condition-message (condition-accessor e4a13@e4a0e e4a1e@e4a0d)) (set! e4a24@&message-rtd e4a13@e4a0e) (set! e4a26@&message-rcd e4a17@e4a0f) (set! e4a2c@e4a27 (make-record-type-descriptor '&warning e49ba@e49b5 'e4a2a '#f '#f '#())) (set! e4a2e@e4a29 '#f) (set! e4a30@e4a28 (make-record-constructor-descriptor e4a2c@e4a27 e49be@e49b6 e4a2e@e4a29)) (set! e4a33@p? (record-predicate e4a2c@e4a27)) (set! e4a35@make-warning (record-constructor e4a30@e4a28)) (set! e4a37@warning? (condition-predicate e4a2c@e4a27)) (set! e4a39@&warning-rtd e4a2c@e4a27) (set! e4a3b@&warning-rcd e4a30@e4a28) (set! e4a41@e4a3c (make-record-type-descriptor '&serious e49ba@e49b5 'e4a3f '#f '#f '#())) (set! e4a43@e4a3e '#f) (set! e4a45@e4a3d (make-record-constructor-descriptor e4a41@e4a3c e49be@e49b6 e4a43@e4a3e)) (set! e4a48@p? (record-predicate e4a41@e4a3c)) (set! e4a4a@make-serious-condition (record-constructor e4a45@e4a3d)) (set! e4a4c@serious-condition? (condition-predicate e4a41@e4a3c)) (set! e4a4e@&serious-rtd e4a41@e4a3c) (set! e4a50@&serious-rcd e4a45@e4a3d) (set! e4a56@e4a51 (make-record-type-descriptor '&error e4a41@e4a3c 'e4a54 '#f '#f '#())) (set! e4a58@e4a53 '#f) (set! e4a5a@e4a52 (make-record-constructor-descriptor e4a56@e4a51 e4a45@e4a3d e4a58@e4a53)) (set! e4a5d@p? (record-predicate e4a56@e4a51)) (set! e4a5f@make-error (record-constructor e4a5a@e4a52)) (set! e4a61@error? (condition-predicate e4a56@e4a51)) (set! e4a63@&error-rtd e4a56@e4a51) (set! e4a65@&error-rcd e4a5a@e4a52) (set! e4a6b@e4a66 (make-record-type-descriptor '&violation e4a41@e4a3c 'e4a69 '#f '#f '#())) (set! e4a6d@e4a68 '#f) (set! e4a6f@e4a67 (make-record-constructor-descriptor e4a6b@e4a66 e4a45@e4a3d e4a6d@e4a68)) (set! e4a72@p? (record-predicate e4a6b@e4a66)) (set! e4a74@make-violation (record-constructor e4a6f@e4a67)) (set! e4a76@violation? (condition-predicate e4a6b@e4a66)) (set! e4a78@&violation-rtd e4a6b@e4a66) (set! e4a7a@&violation-rcd e4a6f@e4a67) (set! e4a80@e4a7b (make-record-type-descriptor '&assertion e4a6b@e4a66 'e4a7e '#f '#f '#())) (set! e4a82@e4a7d '#f) (set! e4a84@e4a7c (make-record-constructor-descriptor e4a80@e4a7b e4a6f@e4a67 e4a82@e4a7d)) (set! e4a87@p? (record-predicate e4a80@e4a7b)) (set! e4a89@make-assertion-violation (record-constructor e4a84@e4a7c)) (set! e4a8b@assertion-violation? (condition-predicate e4a80@e4a7b)) (set! e4a8d@&assertion-rtd e4a80@e4a7b) (set! e4a8f@&assertion-rcd e4a84@e4a7c) (set! e4a97@e4a92 (make-record-type-descriptor '&irritants e49ba@e49b5 'e4a95 '#f '#f '#((immutable irritants)))) (set! e4a99@e4a94 '#f) (set! e4a9b@e4a93 (make-record-constructor-descriptor e4a97@e4a92 e49be@e49b6 e4a99@e4a94)) (set! e4a9e@p? (record-predicate e4a97@e4a92)) (set! e4aa0@make-irritants-condition (record-constructor e4a9b@e4a93)) (set! e4aa2@e4a91 (record-accessor e4a97@e4a92 '0)) (set! e4aa4@irritants-condition? (condition-predicate e4a97@e4a92)) (set! e4aa6@condition-irritants (condition-accessor e4a97@e4a92 e4aa2@e4a91)) (set! e4aa8@&irritants-rtd e4a97@e4a92) (set! e4aaa@&irritants-rcd e4a9b@e4a93) (set! e4ab2@e4aad (make-record-type-descriptor '&who e49ba@e49b5 'e4ab0 '#f '#f '#((immutable who)))) (set! e4ab4@e4aaf '#f) (set! e4ab6@e4aae (make-record-constructor-descriptor e4ab2@e4aad e49be@e49b6 e4ab4@e4aaf)) (set! e4ab9@p? (record-predicate e4ab2@e4aad)) (set! e4abb@make-who-condition (record-constructor e4ab6@e4aae)) (set! e4abd@e4aac (record-accessor e4ab2@e4aad '0)) (set! e4abf@who-condition? (condition-predicate e4ab2@e4aad)) (set! e4ac1@condition-who (condition-accessor e4ab2@e4aad e4abd@e4aac)) (set! e4ac3@&who-rtd e4ab2@e4aad) (set! e4ac5@&who-rcd e4ab6@e4aae) (set! e4acb@e4ac6 (make-record-type-descriptor '&non-continuable e4a6b@e4a66 'e4ac9 '#f '#f '#())) (set! e4acd@e4ac8 '#f) (set! e4acf@e4ac7 (make-record-constructor-descriptor e4acb@e4ac6 e4a6f@e4a67 e4acd@e4ac8)) (set! e4ad2@p? (record-predicate e4acb@e4ac6)) (set! e4ad4@make-non-continuable-violation (record-constructor e4acf@e4ac7)) (set! e4ad6@non-continuable-violation? (condition-predicate e4acb@e4ac6)) (set! e4ad8@&non-continuable-rtd e4acb@e4ac6) (set! e4ada@&non-continuable-rcd e4acf@e4ac7) (set! e4ae0@e4adb (make-record-type-descriptor '&implementation-restriction e4a6b@e4a66 'e4ade '#f '#f '#())) (set! e4ae2@e4add '#f) (set! e4ae4@e4adc (make-record-constructor-descriptor e4ae0@e4adb e4a6f@e4a67 e4ae2@e4add)) (set! e4ae7@p? (record-predicate e4ae0@e4adb)) (set! e4ae9@make-implementation-restriction-violation (record-constructor e4ae4@e4adc)) (set! e4aeb@implementation-restriction-violation? (condition-predicate e4ae0@e4adb)) (set! e4aed@&implementation-restriction-rtd e4ae0@e4adb) (set! e4aef@&implementation-restriction-rcd e4ae4@e4adc) (set! e4af5@e4af0 (make-record-type-descriptor '&lexical e4a6b@e4a66 'e4af3 '#f '#f '#())) (set! e4af7@e4af2 '#f) (set! e4af9@e4af1 (make-record-constructor-descriptor e4af5@e4af0 e4a6f@e4a67 e4af7@e4af2)) (set! e4afc@p? (record-predicate e4af5@e4af0)) (set! e4afe@make-lexical-violation (record-constructor e4af9@e4af1)) (set! e4b00@lexical-violation? (condition-predicate e4af5@e4af0)) (set! e4b02@&lexical-rtd e4af5@e4af0) (set! e4b04@&lexical-rcd e4af9@e4af1) (set! e4b0e@e4b09 (make-record-type-descriptor '&syntax e4a6b@e4a66 'e4b0c '#f '#f '#((immutable form) (immutable subform)))) (set! e4b10@e4b0b '#f) (set! e4b12@e4b0a (make-record-constructor-descriptor e4b0e@e4b09 e4a6f@e4a67 e4b10@e4b0b)) (set! e4b15@p? (record-predicate e4b0e@e4b09)) (set! e4b17@make-syntax-violation (record-constructor e4b12@e4b0a)) (set! e4b19@e4b06 (record-accessor e4b0e@e4b09 '0)) (set! e4b1b@e4b08 (record-accessor e4b0e@e4b09 '1)) (set! e4b1d@syntax-violation? (condition-predicate e4b0e@e4b09)) (set! e4b1f@syntax-violation-form (condition-accessor e4b0e@e4b09 e4b19@e4b06)) (set! e4b21@syntax-violation-subform (condition-accessor e4b0e@e4b09 e4b1b@e4b08)) (set! e4b23@&syntax-rtd e4b0e@e4b09) (set! e4b25@&syntax-rcd e4b12@e4b0a) (set! e4b2b@e4b26 (make-record-type-descriptor '&undefined e4a6b@e4a66 'e4b29 '#f '#f '#())) (set! e4b2d@e4b28 '#f) (set! e4b2f@e4b27 (make-record-constructor-descriptor e4b2b@e4b26 e4a6f@e4a67 e4b2d@e4b28)) (set! e4b32@p? (record-predicate e4b2b@e4b26)) (set! e4b34@make-undefined-violation (record-constructor e4b2f@e4b27)) (set! e4b36@undefined-violation? (condition-predicate e4b2b@e4b26)) (set! e4b38@&undefined-rtd e4b2b@e4b26) (set! e4b3a@&undefined-rcd e4b2f@e4b27) (set! e4b40@e4b3b (make-record-type-descriptor '&i/o e4a56@e4a51 'e4b3e '#f '#f '#())) (set! e4b42@e4b3d '#f) (set! e4b44@e4b3c (make-record-constructor-descriptor e4b40@e4b3b e4a5a@e4a52 e4b42@e4b3d)) (set! e4b47@p? (record-predicate e4b40@e4b3b)) (set! e4b49@make-i/o-error (record-constructor e4b44@e4b3c)) (set! e4b4b@i/o-error? (condition-predicate e4b40@e4b3b)) (set! e4b4d@&i/o-rtd e4b40@e4b3b) (set! e4b4f@&i/o-rcd e4b44@e4b3c) (set! e4b55@e4b50 (make-record-type-descriptor '&i/o-read e4b40@e4b3b 'e4b53 '#f '#f '#())) (set! e4b57@e4b52 '#f) (set! e4b59@e4b51 (make-record-constructor-descriptor e4b55@e4b50 e4b44@e4b3c e4b57@e4b52)) (set! e4b5c@p? (record-predicate e4b55@e4b50)) (set! e4b5e@make-i/o-read-error (record-constructor e4b59@e4b51)) (set! e4b60@i/o-read-error? (condition-predicate e4b55@e4b50)) (set! e4b62@&i/o-read-rtd e4b55@e4b50) (set! e4b64@&i/o-read-rcd e4b59@e4b51) (set! e4b6a@e4b65 (make-record-type-descriptor '&i/o-write e4b40@e4b3b 'e4b68 '#f '#f '#())) (set! e4b6c@e4b67 '#f) (set! e4b6e@e4b66 (make-record-constructor-descriptor e4b6a@e4b65 e4b44@e4b3c e4b6c@e4b67)) (set! e4b71@p? (record-predicate e4b6a@e4b65)) (set! e4b73@make-i/o-write-error (record-constructor e4b6e@e4b66)) (set! e4b75@i/o-write-error? (condition-predicate e4b6a@e4b65)) (set! e4b77@&i/o-write-rtd e4b6a@e4b65) (set! e4b79@&i/o-write-rcd e4b6e@e4b66) (set! e4b81@e4b7c (make-record-type-descriptor '&i/o-invalid-position e4b40@e4b3b 'e4b7f '#f '#f '#((immutable position)))) (set! e4b83@e4b7e '#f) (set! e4b85@e4b7d (make-record-constructor-descriptor e4b81@e4b7c e4b44@e4b3c e4b83@e4b7e)) (set! e4b88@p? (record-predicate e4b81@e4b7c)) (set! e4b8a@make-i/o-invalid-position-error (record-constructor e4b85@e4b7d)) (set! e4b8c@e4b7b (record-accessor e4b81@e4b7c '0)) (set! e4b8e@i/o-invalid-position-error? (condition-predicate e4b81@e4b7c)) (set! e4b90@i/o-error-position (condition-accessor e4b81@e4b7c e4b8c@e4b7b)) (set! e4b92@&i/o-invalid-position-rtd e4b81@e4b7c) (set! e4b94@&i/o-invalid-position-rcd e4b85@e4b7d) (set! e4b9c@e4b97 (make-record-type-descriptor '&i/o-filename e4b40@e4b3b 'e4b9a '#f '#f '#((immutable filename)))) (set! e4b9e@e4b99 '#f) (set! e4ba0@e4b98 (make-record-constructor-descriptor e4b9c@e4b97 e4b44@e4b3c e4b9e@e4b99)) (set! e4ba3@p? (record-predicate e4b9c@e4b97)) (set! e4ba5@make-i/o-filename-error (record-constructor e4ba0@e4b98)) (set! e4ba7@e4b96 (record-accessor e4b9c@e4b97 '0)) (set! e4ba9@i/o-filename-error? (condition-predicate e4b9c@e4b97)) (set! e4bab@i/o-error-filename (condition-accessor e4b9c@e4b97 e4ba7@e4b96)) (set! e4bad@&i/o-filename-rtd e4b9c@e4b97) (set! e4baf@&i/o-filename-rcd e4ba0@e4b98) (set! e4bb5@e4bb0 (make-record-type-descriptor '&i/o-file-protection e4b9c@e4b97 'e4bb3 '#f '#f '#())) (set! e4bb7@e4bb2 '#f) (set! e4bb9@e4bb1 (make-record-constructor-descriptor e4bb5@e4bb0 e4ba0@e4b98 e4bb7@e4bb2)) (set! e4bbc@p? (record-predicate e4bb5@e4bb0)) (set! e4bbe@make-i/o-file-protection-error (record-constructor e4bb9@e4bb1)) (set! e4bc0@i/o-file-protection-error? (condition-predicate e4bb5@e4bb0)) (set! e4bc2@&i/o-file-protection-rtd e4bb5@e4bb0) (set! e4bc4@&i/o-file-protection-rcd e4bb9@e4bb1) (set! e4bca@e4bc5 (make-record-type-descriptor '&i/o-file-is-read-only e4bb5@e4bb0 'e4bc8 '#f '#f '#())) (set! e4bcc@e4bc7 '#f) (set! e4bce@e4bc6 (make-record-constructor-descriptor e4bca@e4bc5 e4bb9@e4bb1 e4bcc@e4bc7)) (set! e4bd1@p? (record-predicate e4bca@e4bc5)) (set! e4bd3@make-i/o-file-is-read-only-error (record-constructor e4bce@e4bc6)) (set! e4bd5@i/o-file-is-read-only-error? (condition-predicate e4bca@e4bc5)) (set! e4bd7@&i/o-file-is-read-only-rtd e4bca@e4bc5) (set! e4bd9@&i/o-file-is-read-only-rcd e4bce@e4bc6) (set! e4bdf@e4bda (make-record-type-descriptor '&i/o-file-already-exists e4b9c@e4b97 'e4bdd '#f '#f '#())) (set! e4be1@e4bdc '#f) (set! e4be3@e4bdb (make-record-constructor-descriptor e4bdf@e4bda e4ba0@e4b98 e4be1@e4bdc)) (set! e4be6@p? (record-predicate e4bdf@e4bda)) (set! e4be8@make-i/o-file-already-exists-error (record-constructor e4be3@e4bdb)) (set! e4bea@i/o-file-already-exists-error? (condition-predicate e4bdf@e4bda)) (set! e4bec@&i/o-file-already-exists-rtd e4bdf@e4bda) (set! e4bee@&i/o-file-already-exists-rcd e4be3@e4bdb) (set! e4bf4@e4bef (make-record-type-descriptor '&i/o-file-does-not-exist e4b9c@e4b97 'e4bf2 '#f '#f '#())) (set! e4bf6@e4bf1 '#f) (set! e4bf8@e4bf0 (make-record-constructor-descriptor e4bf4@e4bef e4ba0@e4b98 e4bf6@e4bf1)) (set! e4bfb@p? (record-predicate e4bf4@e4bef)) (set! e4bfd@make-i/o-file-does-not-exist-error (record-constructor e4bf8@e4bf0)) (set! e4bff@i/o-file-does-not-exist-error? (condition-predicate e4bf4@e4bef)) (set! e4c01@&i/o-file-does-not-exist-rtd e4bf4@e4bef) (set! e4c03@&i/o-file-does-not-exist-rcd e4bf8@e4bf0) (set! e4c0b@e4c06 (make-record-type-descriptor '&i/o-port e4b40@e4b3b 'e4c09 '#f '#f '#((immutable port)))) (set! e4c0d@e4c08 '#f) (set! e4c0f@e4c07 (make-record-constructor-descriptor e4c0b@e4c06 e4b44@e4b3c e4c0d@e4c08)) (set! e4c12@p? (record-predicate e4c0b@e4c06)) (set! e4c14@make-i/o-port-error (record-constructor e4c0f@e4c07)) (set! e4c16@e4c05 (record-accessor e4c0b@e4c06 '0)) (set! e4c18@i/o-port-error? (condition-predicate e4c0b@e4c06)) (set! e4c1a@i/o-error-port (condition-accessor e4c0b@e4c06 e4c16@e4c05)) (set! e4c1c@&i/o-port-rtd e4c0b@e4c06) (set! e4c1e@&i/o-port-rcd e4c0f@e4c07) (set! e4c24@e4c1f (make-record-type-descriptor '&i/o-decoding e4c0b@e4c06 'e4c22 '#f '#f '#())) (set! e4c26@e4c21 '#f) (set! e4c28@e4c20 (make-record-constructor-descriptor e4c24@e4c1f e4c0f@e4c07 e4c26@e4c21)) (set! e4c2b@p? (record-predicate e4c24@e4c1f)) (set! e4c2d@make-i/o-decoding-error (record-constructor e4c28@e4c20)) (set! e4c2f@i/o-decoding-error? (condition-predicate e4c24@e4c1f)) (set! e4c31@&i/o-decoding-rtd e4c24@e4c1f) (set! e4c33@&i/o-decoding-rcd e4c28@e4c20) (set! e4c3b@e4c36 (make-record-type-descriptor '&i/o-encoding e4c0b@e4c06 'e4c39 '#f '#f '#((immutable char)))) (set! e4c3d@e4c38 '#f) (set! e4c3f@e4c37 (make-record-constructor-descriptor e4c3b@e4c36 e4c0f@e4c07 e4c3d@e4c38)) (set! e4c42@p? (record-predicate e4c3b@e4c36)) (set! e4c44@make-i/o-encoding-error (record-constructor e4c3f@e4c37)) (set! e4c46@e4c35 (record-accessor e4c3b@e4c36 '0)) (set! e4c48@i/o-encoding-error? (condition-predicate e4c3b@e4c36)) (set! e4c4a@i/o-encoding-error-char (condition-accessor e4c3b@e4c36 e4c46@e4c35)) (set! e4c4c@&i/o-encoding-rtd e4c3b@e4c36) (set! e4c4e@&i/o-encoding-rcd e4c3f@e4c37) (set! e4c54@e4c4f (make-record-type-descriptor '&no-infinities e4ae0@e4adb 'e4c52 '#f '#f '#())) (set! e4c56@e4c51 '#f) (set! e4c58@e4c50 (make-record-constructor-descriptor e4c54@e4c4f e4ae4@e4adc e4c56@e4c51)) (set! e4c5b@p? (record-predicate e4c54@e4c4f)) (set! e4c5d@make-no-infinities-violation (record-constructor e4c58@e4c50)) (set! e4c5f@no-infinities-violation? (condition-predicate e4c54@e4c4f)) (set! e4c61@&no-infinities-rtd e4c54@e4c4f) (set! e4c63@&no-infinities-rcd e4c58@e4c50) (set! e4c69@e4c64 (make-record-type-descriptor '&no-nans e4ae0@e4adb 'e4c67 '#f '#f '#())) (set! e4c6b@e4c66 '#f) (set! e4c6d@e4c65 (make-record-constructor-descriptor e4c69@e4c64 e4ae4@e4adc e4c6b@e4c66)) (set! e4c70@p? (record-predicate e4c69@e4c64)) (set! e4c72@make-no-nans-violation (record-constructor e4c6d@e4c65)) (set! e4c74@no-nans-violation? (condition-predicate e4c69@e4c64)) (set! e4c76@&no-nans-rtd e4c69@e4c64) (set! e4c78@&no-nans-rcd e4c6d@e4c65) (begin (set! e4d69@e4c78@&no-nans-rcd e4c78@&no-nans-rcd) (set! e4d68@e4c76@&no-nans-rtd e4c76@&no-nans-rtd) (set! e4d67@e4c74@no-nans-violation? e4c74@no-nans-violation?) (set! e4d66@e4c72@make-no-nans-violation e4c72@make-no-nans-violation) (set! e4d65@e4c70@p? e4c70@p?) (set! e4d64@e4c6d@e4c65 e4c6d@e4c65) (set! e4d63@e4c6b@e4c66 e4c6b@e4c66) (set! e4d62@e4c69@e4c64 e4c69@e4c64) (set! e4d61@e4c63@&no-infinities-rcd e4c63@&no-infinities-rcd) (set! e4d60@e4c61@&no-infinities-rtd e4c61@&no-infinities-rtd) (set! e4d5f@e4c5f@no-infinities-violation? e4c5f@no-infinities-violation?) (set! e4d5e@e4c5d@make-no-infinities-violation e4c5d@make-no-infinities-violation) (set! e4d5d@e4c5b@p? e4c5b@p?) (set! e4d5c@e4c58@e4c50 e4c58@e4c50) (set! e4d5b@e4c56@e4c51 e4c56@e4c51) (set! e4d5a@e4c54@e4c4f e4c54@e4c4f) (set! e4d59@e4c4e@&i/o-encoding-rcd e4c4e@&i/o-encoding-rcd) (set! e4d58@e4c4c@&i/o-encoding-rtd e4c4c@&i/o-encoding-rtd) (set! e4d57@e4c4a@i/o-encoding-error-char e4c4a@i/o-encoding-error-char) (set! e4d56@e4c48@i/o-encoding-error? e4c48@i/o-encoding-error?) (set! e4d55@e4c46@e4c35 e4c46@e4c35) (set! e4d54@e4c44@make-i/o-encoding-error e4c44@make-i/o-encoding-error) (set! e4d53@e4c42@p? e4c42@p?) (set! e4d52@e4c3f@e4c37 e4c3f@e4c37) (set! e4d51@e4c3d@e4c38 e4c3d@e4c38) (set! e4d50@e4c3b@e4c36 e4c3b@e4c36) (set! e4d4f@e4c33@&i/o-decoding-rcd e4c33@&i/o-decoding-rcd) (set! e4d4e@e4c31@&i/o-decoding-rtd e4c31@&i/o-decoding-rtd) (set! e4d4d@e4c2f@i/o-decoding-error? e4c2f@i/o-decoding-error?) (set! e4d4c@e4c2d@make-i/o-decoding-error e4c2d@make-i/o-decoding-error) (set! e4d4b@e4c2b@p? e4c2b@p?) (set! e4d4a@e4c28@e4c20 e4c28@e4c20) (set! e4d49@e4c26@e4c21 e4c26@e4c21) (set! e4d48@e4c24@e4c1f e4c24@e4c1f) (set! e4d47@e4c1e@&i/o-port-rcd e4c1e@&i/o-port-rcd) (set! e4d46@e4c1c@&i/o-port-rtd e4c1c@&i/o-port-rtd) (set! e4d45@e4c1a@i/o-error-port e4c1a@i/o-error-port) (set! e4d44@e4c18@i/o-port-error? e4c18@i/o-port-error?) (set! e4d43@e4c16@e4c05 e4c16@e4c05) (set! e4d42@e4c14@make-i/o-port-error e4c14@make-i/o-port-error) (set! e4d41@e4c12@p? e4c12@p?) (set! e4d40@e4c0f@e4c07 e4c0f@e4c07) (set! e4d3f@e4c0d@e4c08 e4c0d@e4c08) (set! e4d3e@e4c0b@e4c06 e4c0b@e4c06) (set! e4d3d@e4c03@&i/o-file-does-not-exist-rcd e4c03@&i/o-file-does-not-exist-rcd) (set! e4d3c@e4c01@&i/o-file-does-not-exist-rtd e4c01@&i/o-file-does-not-exist-rtd) (set! e4d3b@e4bff@i/o-file-does-not-exist-error? e4bff@i/o-file-does-not-exist-error?) (set! e4d3a@e4bfd@make-i/o-file-does-not-exist-error e4bfd@make-i/o-file-does-not-exist-error) (set! e4d39@e4bfb@p? e4bfb@p?) (set! e4d38@e4bf8@e4bf0 e4bf8@e4bf0) (set! e4d37@e4bf6@e4bf1 e4bf6@e4bf1) (set! e4d36@e4bf4@e4bef e4bf4@e4bef) (set! e4d35@e4bee@&i/o-file-already-exists-rcd e4bee@&i/o-file-already-exists-rcd) (set! e4d34@e4bec@&i/o-file-already-exists-rtd e4bec@&i/o-file-already-exists-rtd) (set! e4d33@e4bea@i/o-file-already-exists-error? e4bea@i/o-file-already-exists-error?) (set! e4d32@e4be8@make-i/o-file-already-exists-error e4be8@make-i/o-file-already-exists-error) (set! e4d31@e4be6@p? e4be6@p?) (set! e4d30@e4be3@e4bdb e4be3@e4bdb) (set! e4d2f@e4be1@e4bdc e4be1@e4bdc) (set! e4d2e@e4bdf@e4bda e4bdf@e4bda) (set! e4d2d@e4bd9@&i/o-file-is-read-only-rcd e4bd9@&i/o-file-is-read-only-rcd) (set! e4d2c@e4bd7@&i/o-file-is-read-only-rtd e4bd7@&i/o-file-is-read-only-rtd) (set! e4d2b@e4bd5@i/o-file-is-read-only-error? e4bd5@i/o-file-is-read-only-error?) (set! e4d2a@e4bd3@make-i/o-file-is-read-only-error e4bd3@make-i/o-file-is-read-only-error) (set! e4d29@e4bd1@p? e4bd1@p?) (set! e4d28@e4bce@e4bc6 e4bce@e4bc6) (set! e4d27@e4bcc@e4bc7 e4bcc@e4bc7) (set! e4d26@e4bca@e4bc5 e4bca@e4bc5) (set! e4d25@e4bc4@&i/o-file-protection-rcd e4bc4@&i/o-file-protection-rcd) (set! e4d24@e4bc2@&i/o-file-protection-rtd e4bc2@&i/o-file-protection-rtd) (set! e4d23@e4bc0@i/o-file-protection-error? e4bc0@i/o-file-protection-error?) (set! e4d22@e4bbe@make-i/o-file-protection-error e4bbe@make-i/o-file-protection-error) (set! e4d21@e4bbc@p? e4bbc@p?) (set! e4d20@e4bb9@e4bb1 e4bb9@e4bb1) (set! e4d1f@e4bb7@e4bb2 e4bb7@e4bb2) (set! e4d1e@e4bb5@e4bb0 e4bb5@e4bb0) (set! e4d1d@e4baf@&i/o-filename-rcd e4baf@&i/o-filename-rcd) (set! e4d1c@e4bad@&i/o-filename-rtd e4bad@&i/o-filename-rtd) (set! e4d1b@e4bab@i/o-error-filename e4bab@i/o-error-filename) (set! e4d1a@e4ba9@i/o-filename-error? e4ba9@i/o-filename-error?) (set! e4d19@e4ba7@e4b96 e4ba7@e4b96) (set! e4d18@e4ba5@make-i/o-filename-error e4ba5@make-i/o-filename-error) (set! e4d17@e4ba3@p? e4ba3@p?) (set! e4d16@e4ba0@e4b98 e4ba0@e4b98) (set! e4d15@e4b9e@e4b99 e4b9e@e4b99) (set! e4d14@e4b9c@e4b97 e4b9c@e4b97) (set! e4d13@e4b94@&i/o-invalid-position-rcd e4b94@&i/o-invalid-position-rcd) (set! e4d12@e4b92@&i/o-invalid-position-rtd e4b92@&i/o-invalid-position-rtd) (set! e4d11@e4b90@i/o-error-position e4b90@i/o-error-position) (set! e4d10@e4b8e@i/o-invalid-position-error? e4b8e@i/o-invalid-position-error?) (set! e4d0f@e4b8c@e4b7b e4b8c@e4b7b) (set! e4d0e@e4b8a@make-i/o-invalid-position-error e4b8a@make-i/o-invalid-position-error) (set! e4d0d@e4b88@p? e4b88@p?) (set! e4d0c@e4b85@e4b7d e4b85@e4b7d) (set! e4d0b@e4b83@e4b7e e4b83@e4b7e) (set! e4d0a@e4b81@e4b7c e4b81@e4b7c) (set! e4d09@e4b79@&i/o-write-rcd e4b79@&i/o-write-rcd) (set! e4d08@e4b77@&i/o-write-rtd e4b77@&i/o-write-rtd) (set! e4d07@e4b75@i/o-write-error? e4b75@i/o-write-error?) (set! e4d06@e4b73@make-i/o-write-error e4b73@make-i/o-write-error) (set! e4d05@e4b71@p? e4b71@p?) (set! e4d04@e4b6e@e4b66 e4b6e@e4b66) (set! e4d03@e4b6c@e4b67 e4b6c@e4b67) (set! e4d02@e4b6a@e4b65 e4b6a@e4b65) (set! e4d01@e4b64@&i/o-read-rcd e4b64@&i/o-read-rcd) (set! e4d00@e4b62@&i/o-read-rtd e4b62@&i/o-read-rtd) (set! e4cff@e4b60@i/o-read-error? e4b60@i/o-read-error?) (set! e4cfe@e4b5e@make-i/o-read-error e4b5e@make-i/o-read-error) (set! e4cfd@e4b5c@p? e4b5c@p?) (set! e4cfc@e4b59@e4b51 e4b59@e4b51) (set! e4cfb@e4b57@e4b52 e4b57@e4b52) (set! e4cfa@e4b55@e4b50 e4b55@e4b50) (set! e4cf9@e4b4f@&i/o-rcd e4b4f@&i/o-rcd) (set! e4cf8@e4b4d@&i/o-rtd e4b4d@&i/o-rtd) (set! e4cf7@e4b4b@i/o-error? e4b4b@i/o-error?) (set! e4cf6@e4b49@make-i/o-error e4b49@make-i/o-error) (set! e4cf5@e4b47@p? e4b47@p?) (set! e4cf4@e4b44@e4b3c e4b44@e4b3c) (set! e4cf3@e4b42@e4b3d e4b42@e4b3d) (set! e4cf2@e4b40@e4b3b e4b40@e4b3b) (set! e4cf1@e4b3a@&undefined-rcd e4b3a@&undefined-rcd) (set! e4cf0@e4b38@&undefined-rtd e4b38@&undefined-rtd) (set! e4cef@e4b36@undefined-violation? e4b36@undefined-violation?) (set! e4cee@e4b34@make-undefined-violation e4b34@make-undefined-violation) (set! e4ced@e4b32@p? e4b32@p?) (set! e4cec@e4b2f@e4b27 e4b2f@e4b27) (set! e4ceb@e4b2d@e4b28 e4b2d@e4b28) (set! e4cea@e4b2b@e4b26 e4b2b@e4b26) (set! e4ce9@e4b25@&syntax-rcd e4b25@&syntax-rcd) (set! e4ce8@e4b23@&syntax-rtd e4b23@&syntax-rtd) (set! e4ce7@e4b21@syntax-violation-subform e4b21@syntax-violation-subform) (set! e4ce6@e4b1f@syntax-violation-form e4b1f@syntax-violation-form) (set! e4ce5@e4b1d@syntax-violation? e4b1d@syntax-violation?) (set! e4ce4@e4b1b@e4b08 e4b1b@e4b08) (set! e4ce3@e4b19@e4b06 e4b19@e4b06) (set! e4ce2@e4b17@make-syntax-violation e4b17@make-syntax-violation) (set! e4ce1@e4b15@p? e4b15@p?) (set! e4ce0@e4b12@e4b0a e4b12@e4b0a) (set! e4cdf@e4b10@e4b0b e4b10@e4b0b) (set! e4cde@e4b0e@e4b09 e4b0e@e4b09) (set! e4cdd@e4b04@&lexical-rcd e4b04@&lexical-rcd) (set! e4cdc@e4b02@&lexical-rtd e4b02@&lexical-rtd) (set! e4cdb@e4b00@lexical-violation? e4b00@lexical-violation?) (set! e4cda@e4afe@make-lexical-violation e4afe@make-lexical-violation) (set! e4cd9@e4afc@p? e4afc@p?) (set! e4cd8@e4af9@e4af1 e4af9@e4af1) (set! e4cd7@e4af7@e4af2 e4af7@e4af2) (set! e4cd6@e4af5@e4af0 e4af5@e4af0) (set! e4cd5@e4aef@&implementation-restriction-rcd e4aef@&implementation-restriction-rcd) (set! e4cd4@e4aed@&implementation-restriction-rtd e4aed@&implementation-restriction-rtd) (set! e4cd3@e4aeb@implementation-restriction-violation? e4aeb@implementation-restriction-violation?) (set! e4cd2@e4ae9@make-implementation-restriction-violation e4ae9@make-implementation-restriction-violation) (set! e4cd1@e4ae7@p? e4ae7@p?) (set! e4cd0@e4ae4@e4adc e4ae4@e4adc) (set! e4ccf@e4ae2@e4add e4ae2@e4add) (set! e4cce@e4ae0@e4adb e4ae0@e4adb) (set! e4ccd@e4ada@&non-continuable-rcd e4ada@&non-continuable-rcd) (set! e4ccc@e4ad8@&non-continuable-rtd e4ad8@&non-continuable-rtd) (set! e4ccb@e4ad6@non-continuable-violation? e4ad6@non-continuable-violation?) (set! e4cca@e4ad4@make-non-continuable-violation e4ad4@make-non-continuable-violation) (set! e4cc9@e4ad2@p? e4ad2@p?) (set! e4cc8@e4acf@e4ac7 e4acf@e4ac7) (set! e4cc7@e4acd@e4ac8 e4acd@e4ac8) (set! e4cc6@e4acb@e4ac6 e4acb@e4ac6) (set! e4cc5@e4ac5@&who-rcd e4ac5@&who-rcd) (set! e4cc4@e4ac3@&who-rtd e4ac3@&who-rtd) (set! e4cc3@e4ac1@condition-who e4ac1@condition-who) (set! e4cc2@e4abf@who-condition? e4abf@who-condition?) (set! e4cc1@e4abd@e4aac e4abd@e4aac) (set! e4cc0@e4abb@make-who-condition e4abb@make-who-condition) (set! e4cbf@e4ab9@p? e4ab9@p?) (set! e4cbe@e4ab6@e4aae e4ab6@e4aae) (set! e4cbd@e4ab4@e4aaf e4ab4@e4aaf) (set! e4cbc@e4ab2@e4aad e4ab2@e4aad) (set! e4cbb@e4aaa@&irritants-rcd e4aaa@&irritants-rcd) (set! e4cba@e4aa8@&irritants-rtd e4aa8@&irritants-rtd) (set! e4cb9@e4aa6@condition-irritants e4aa6@condition-irritants) (set! e4cb8@e4aa4@irritants-condition? e4aa4@irritants-condition?) (set! e4cb7@e4aa2@e4a91 e4aa2@e4a91) (set! e4cb6@e4aa0@make-irritants-condition e4aa0@make-irritants-condition) (set! e4cb5@e4a9e@p? e4a9e@p?) (set! e4cb4@e4a9b@e4a93 e4a9b@e4a93) (set! e4cb3@e4a99@e4a94 e4a99@e4a94) (set! e4cb2@e4a97@e4a92 e4a97@e4a92) (set! e4cb1@e4a8f@&assertion-rcd e4a8f@&assertion-rcd) (set! e4cb0@e4a8d@&assertion-rtd e4a8d@&assertion-rtd) (set! e4caf@e4a8b@assertion-violation? e4a8b@assertion-violation?) (set! e4cae@e4a89@make-assertion-violation e4a89@make-assertion-violation) (set! e4cad@e4a87@p? e4a87@p?) (set! e4cac@e4a84@e4a7c e4a84@e4a7c) (set! e4cab@e4a82@e4a7d e4a82@e4a7d) (set! e4caa@e4a80@e4a7b e4a80@e4a7b) (set! e4ca9@e4a7a@&violation-rcd e4a7a@&violation-rcd) (set! e4ca8@e4a78@&violation-rtd e4a78@&violation-rtd) (set! e4ca7@e4a76@violation? e4a76@violation?) (set! e4ca6@e4a74@make-violation e4a74@make-violation) (set! e4ca5@e4a72@p? e4a72@p?) (set! e4ca4@e4a6f@e4a67 e4a6f@e4a67) (set! e4ca3@e4a6d@e4a68 e4a6d@e4a68) (set! e4ca2@e4a6b@e4a66 e4a6b@e4a66) (set! e4ca1@e4a65@&error-rcd e4a65@&error-rcd) (set! e4ca0@e4a63@&error-rtd e4a63@&error-rtd) (set! e4c9f@e4a61@error? e4a61@error?) (set! e4c9e@e4a5f@make-error e4a5f@make-error) (set! e4c9d@e4a5d@p? e4a5d@p?) (set! e4c9c@e4a5a@e4a52 e4a5a@e4a52) (set! e4c9b@e4a58@e4a53 e4a58@e4a53) (set! e4c9a@e4a56@e4a51 e4a56@e4a51) (set! e4c99@e4a50@&serious-rcd e4a50@&serious-rcd) (set! e4c98@e4a4e@&serious-rtd e4a4e@&serious-rtd) (set! e4c97@e4a4c@serious-condition? e4a4c@serious-condition?) (set! e4c96@e4a4a@make-serious-condition e4a4a@make-serious-condition) (set! e4c95@e4a48@p? e4a48@p?) (set! e4c94@e4a45@e4a3d e4a45@e4a3d) (set! e4c93@e4a43@e4a3e e4a43@e4a3e) (set! e4c92@e4a41@e4a3c e4a41@e4a3c) (set! e4c91@e4a3b@&warning-rcd e4a3b@&warning-rcd) (set! e4c90@e4a39@&warning-rtd e4a39@&warning-rtd) (set! e4c8f@e4a37@warning? e4a37@warning?) (set! e4c8e@e4a35@make-warning e4a35@make-warning) (set! e4c8d@e4a33@p? e4a33@p?) (set! e4c8c@e4a30@e4a28 e4a30@e4a28) (set! e4c8b@e4a2e@e4a29 e4a2e@e4a29) (set! e4c8a@e4a2c@e4a27 e4a2c@e4a27) (set! e4c89@e4a26@&message-rcd e4a26@&message-rcd) (set! e4c88@e4a24@&message-rtd e4a24@&message-rtd) (set! e4c87@e4a22@condition-message e4a22@condition-message) (set! e4c86@e4a20@message-condition? e4a20@message-condition?) (set! e4c85@e4a1e@e4a0d e4a1e@e4a0d) (set! e4c84@e4a1c@make-message-condition e4a1c@make-message-condition) (set! e4c83@e4a1a@p? e4a1a@p?) (set! e4c82@e4a17@e4a0f e4a17@e4a0f) (set! e4c81@e4a15@e4a10 e4a15@e4a10) (set! e4c80@e4a13@e4a0e e4a13@e4a0e) (set! e4c7f@e49c7@&condition-rcd e49c7@&condition-rcd) (set! e4c7e@e49c5@&condition-rtd e49c5@&condition-rtd) (set! e4c7d@e49c3@make-&condition e49c3@make-&condition) (set! e4c7c@e49c1@&condition? e49c1@&condition?) (set! e4c7b@e49be@e49b6 e49be@e49b6) (set! e4c7a@e49bc@e49b7 e49bc@e49b7) (set! e4c79@e49ba@e49b5 e49ba@e49b5)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (e28b8@e286d@current-primitive-locations (lambda (e51a8@x) ((lambda (e51aa@t) (if e51aa@t (cdr e51aa@t) '#f)) (assq e51a8@x '((&no-nans-rcd . e4d69@e4c78@&no-nans-rcd) (&no-nans-rtd . e4d68@e4c76@&no-nans-rtd) (&no-infinities-rcd . e4d61@e4c63@&no-infinities-rcd) (&no-infinities-rtd . e4d60@e4c61@&no-infinities-rtd) (&i/o-encoding-rcd . e4d59@e4c4e@&i/o-encoding-rcd) (&i/o-encoding-rtd . e4d58@e4c4c@&i/o-encoding-rtd) (&i/o-decoding-rcd . e4d4f@e4c33@&i/o-decoding-rcd) (&i/o-decoding-rtd . e4d4e@e4c31@&i/o-decoding-rtd) (&i/o-port-rcd . e4d47@e4c1e@&i/o-port-rcd) (&i/o-port-rtd . e4d46@e4c1c@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . e4d3d@e4c03@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . e4d3c@e4c01@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . e4d35@e4bee@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . e4d34@e4bec@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . e4d2d@e4bd9@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . e4d2c@e4bd7@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . e4d25@e4bc4@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . e4d24@e4bc2@&i/o-file-protection-rtd) (&i/o-filename-rcd . e4d1d@e4baf@&i/o-filename-rcd) (&i/o-filename-rtd . e4d1c@e4bad@&i/o-filename-rtd) (&i/o-invalid-position-rcd . e4d13@e4b94@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . e4d12@e4b92@&i/o-invalid-position-rtd) (&i/o-write-rcd . e4d09@e4b79@&i/o-write-rcd) (&i/o-write-rtd . e4d08@e4b77@&i/o-write-rtd) (&i/o-read-rcd . e4d01@e4b64@&i/o-read-rcd) (&i/o-read-rtd . e4d00@e4b62@&i/o-read-rtd) (&i/o-rcd . e4cf9@e4b4f@&i/o-rcd) (&i/o-rtd . e4cf8@e4b4d@&i/o-rtd) (&undefined-rcd . e4cf1@e4b3a@&undefined-rcd) (&undefined-rtd . e4cf0@e4b38@&undefined-rtd) (&syntax-rcd . e4ce9@e4b25@&syntax-rcd) (&syntax-rtd . e4ce8@e4b23@&syntax-rtd) (&lexical-rcd . e4cdd@e4b04@&lexical-rcd) (&lexical-rtd . e4cdc@e4b02@&lexical-rtd) (&implementation-restriction-rcd . e4cd5@e4aef@&implementation-restriction-rcd) (&implementation-restriction-rtd . e4cd4@e4aed@&implementation-restriction-rtd) (&non-continuable-rcd . e4ccd@e4ada@&non-continuable-rcd) (&non-continuable-rtd . e4ccc@e4ad8@&non-continuable-rtd) (&who-rcd . e4cc5@e4ac5@&who-rcd) (&who-rtd . e4cc4@e4ac3@&who-rtd) (&irritants-rcd . e4cbb@e4aaa@&irritants-rcd) (&irritants-rtd . e4cba@e4aa8@&irritants-rtd) (&assertion-rcd . e4cb1@e4a8f@&assertion-rcd) (&assertion-rtd . e4cb0@e4a8d@&assertion-rtd) (&violation-rcd . e4ca9@e4a7a@&violation-rcd) (&violation-rtd . e4ca8@e4a78@&violation-rtd) (&error-rcd . e4ca1@e4a65@&error-rcd) (&error-rtd . e4ca0@e4a63@&error-rtd) (&serious-rcd . e4c99@e4a50@&serious-rcd) (&serious-rtd . e4c98@e4a4e@&serious-rtd) (&warning-rcd . e4c91@e4a3b@&warning-rcd) (&warning-rtd . e4c90@e4a39@&warning-rtd) (&message-rcd . e4c89@e4a26@&message-rcd) (&message-rtd . e4c88@e4a24@&message-rtd) (&condition-rcd . e4c7f@e49c7@&condition-rcd) (&condition-rtd . e4c7e@e49c5@&condition-rtd) (syntax-error . e49a7@e2fad@syntax-error) (syntax-dispatch . e493c@e2ec8@syntax-dispatch) (load . e4e9a@e4d85@load) (interaction-environment . e49af@e2fbd@interaction-environment) (library-path . e2acf@e295e@library-path) (make-parameter . e2867@e2791@make-parameter) (make-variable-transformer . e48fa@e2cf5@make-variable-transformer) (identifier? . e49aa@e2fb3@identifier?) (generate-temporaries . e49a0@e2f9f@generate-temporaries) (free-identifier=? . e49a1@e2fa1@free-identifier=?) (syntax->datum . e49ac@e2fb7@syntax->datum) (datum->syntax . e49ab@e2fb5@datum->syntax) (bound-identifier=? . e49a2@e2fa3@bound-identifier=?) (make-i/o-write-error . e4d06@e4b73@make-i/o-write-error) (make-i/o-read-error . e4cfe@e4b5e@make-i/o-read-error) (make-i/o-port-error . e4d42@e4c14@make-i/o-port-error) (make-i/o-invalid-position-error . e4d0e@e4b8a@make-i/o-invalid-position-error) (make-i/o-filename-error . e4d18@e4ba5@make-i/o-filename-error) (make-i/o-file-protection-error . e4d22@e4bbe@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . e4d2a@e4bd3@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . e4d3a@e4bfd@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . e4d32@e4be8@make-i/o-file-already-exists-error) (make-i/o-error . e4cf6@e4b49@make-i/o-error) (make-i/o-encoding-error . e4d54@e4c44@make-i/o-encoding-error) (make-i/o-decoding-error . e4d4c@e4c2d@make-i/o-decoding-error) (i/o-write-error? . e4d07@e4b75@i/o-write-error?) (i/o-read-error? . e4cff@e4b60@i/o-read-error?) (i/o-port-error? . e4d44@e4c18@i/o-port-error?) (i/o-invalid-position-error? . e4d10@e4b8e@i/o-invalid-position-error?) (i/o-filename-error? . e4d1a@e4ba9@i/o-filename-error?) (i/o-file-protection-error? . e4d23@e4bc0@i/o-file-protection-error?) (i/o-file-is-read-only-error? . e4d2b@e4bd5@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . e4d3b@e4bff@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . e4d33@e4bea@i/o-file-already-exists-error?) (i/o-error? . e4cf7@e4b4b@i/o-error?) (i/o-error-position . e4d11@e4b90@i/o-error-position) (i/o-error-port . e4d45@e4c1a@i/o-error-port) (i/o-error-filename . e4d1b@e4bab@i/o-error-filename) (i/o-encoding-error? . e4d56@e4c48@i/o-encoding-error?) (i/o-encoding-error-char . e4d57@e4c4a@i/o-encoding-error-char) (i/o-decoding-error? . e4d4d@e4c2f@i/o-decoding-error?) (scheme-report-environment . e4997@e2f8d@scheme-report-environment) (null-environment . e4996@e2f8b@null-environment) (command-line . e4e97@e4d7f@command-line) (eval . e4999@e2f91@eval) (environment . e4995@e2f89@environment) (who-condition? . e4cc2@e4abf@who-condition?) (warning? . e4c8f@e4a37@warning?) (violation? . e4ca7@e4a76@violation?) (undefined-violation? . e4cef@e4b36@undefined-violation?) (syntax-violation? . e4ce5@e4b1d@syntax-violation?) (syntax-violation-subform . e4ce7@e4b21@syntax-violation-subform) (syntax-violation-form . e4ce6@e4b1f@syntax-violation-form) (syntax-violation . e49a9@e2fb1@syntax-violation) (serious-condition? . e4c97@e4a4c@serious-condition?) (non-continuable-violation? . e4ccb@e4ad6@non-continuable-violation?) (message-condition? . e4c86@e4a20@message-condition?) (make-who-condition . e4cc0@e4abb@make-who-condition) (make-warning . e4c8e@e4a35@make-warning) (make-violation . e4ca6@e4a74@make-violation) (make-undefined-violation . e4cee@e4b34@make-undefined-violation) (make-syntax-violation . e4ce2@e4b17@make-syntax-violation) (make-serious-condition . e4c96@e4a4a@make-serious-condition) (make-non-continuable-violation . e4cca@e4ad4@make-non-continuable-violation) (make-message-condition . e4c84@e4a1c@make-message-condition) (make-lexical-violation . e4cda@e4afe@make-lexical-violation) (make-irritants-condition . e4cb6@e4aa0@make-irritants-condition) (make-implementation-restriction-violation . e4cd2@e4ae9@make-implementation-restriction-violation) (make-error . e4c9e@e4a5f@make-error) (make-assertion-violation . e4cae@e4a89@make-assertion-violation) (lexical-violation? . e4cdb@e4b00@lexical-violation?) (irritants-condition? . e4cb8@e4aa4@irritants-condition?) (implementation-restriction-violation? . e4cd3@e4aeb@implementation-restriction-violation?) (error? . e4c9f@e4a61@error?) (condition-who . e4cc3@e4ac1@condition-who) (condition-message . e4c87@e4a22@condition-message) (condition-irritants . e4cb9@e4aa6@condition-irritants) (assertion-violation? . e4caf@e4a8b@assertion-violation?) (no-nans-violation? . e4d67@e4c74@no-nans-violation?) (no-infinities-violation? . e4d5f@e4c5f@no-infinities-violation?) (make-no-nans-violation . e4d66@e4c72@make-no-nans-violation) (make-no-infinities-violation . e4d5e@e4c5d@make-no-infinities-violation) (assertion-error . e49a6@e2fab@assertion-error)))))) (e2adf@e297e@install-library 'e5185 '(mosh interaction) '() '() '() '() '((regexp? . e517d) (alist->eq-hash-table . e517a) (format . e5177) (string-split . e516c) (call-process . e5166) (set-current-directory! . e5162) (expand-path . e5161) (current-directory . e5160) (%spawn . e515f) (%waitpid . e515e) (%ffi-supported? . e515d) (%ffi-pointer-ref . e515c) (%ffi-pointer->string . e515b) (%ffi-call->string-or-zero . e515a) (%ffi-call->double . e5159) (%ffi-call->void* . e5158) (%ffi-call->void . e5157) (%ffi-call->int . e5156) (%ffi-lookup . e5155) (%ffi-open . e5154) (%fork . e5153) (%pipe . e5152) (p . e5151) (whereis . e5149) (register . e5148) (vm-join! . e5147) (vm-set-value! . e5146) (vm? . e5145) (main-vm? . e5144) (vm-self . e5143) (vm-start! . e5142) (make-vm . e5141) (mutex-try-lock! . e5140) (mutex-unlock! . e513f) (mutex-lock! . e513e) (mutex? . e513d) (make-mutex . e513c) (condition-variable-notify-all! . e513b) (condition-variable-notify! . e513a) (condition-variable-wait! . e5139) (make-condition-variable . e5138) (string-upcase . e5121) (string-titlecase . e5120) (string-normalize-nfkd . e511f) (string-normalize-nfkc . e511e) (string-normalize-nfd . e511d) (string-normalize-nfc . e511c) (string-foldcase . e511b) (string-downcase . e511a) (string-ci>? . e5119) (string-ci>=? . e5118) (string-ci=? . e5117) (string-ci<? . e5116) (string-ci<=? . e5115) (char-whitespace? . e5114) (char-upper-case? . e5113) (char-title-case? . e5112) (char-numeric? . e5111) (char-lower-case? . e5110) (char-general-category . e510f) (char-upcase . e510e) (char-titlecase . e510d) (char-foldcase . e510c) (char-downcase . e510b) (char-ci>? . e510a) (char-ci>=? . e5109) (char-ci=? . e5108) (char-ci<? . e5107) (char-ci<=? . e5106) (char-alphabetic? . e5105) (make-variable-transformer . e2cf4) (identifier? . e2fb2) (generate-temporaries . e2f9e) (free-identifier=? . e2fa0) (syntax->datum . e2fb6) (datum->syntax . e2fb4) (bound-identifier=? . e2fa2) (record-type-descriptor? . e5104) (record-predicate . e5103) (record-mutator . e5102) (record-constructor . e5101) (record-accessor . e5100) (make-record-type-descriptor . e50ff) (make-record-constructor-descriptor . e50fe) (record? . e50fd) (record-type-uid . e50fc) (record-type-sealed? . e50fb) (record-type-parent . e50fa) (record-type-opaque? . e50f9) (record-type-name . e50f8) (record-type-generative? . e50f7) (record-type-field-names . e50f6) (record-rtd . e50f5) (record-field-mutable? . e50f4) (delete-file . e50f3) (file-exists? . e50f2) (vector-sort! . e50f1) (vector-sort . e50f0) (list-sort . e50ef) (symbol-hash . e50ee) (string-ci-hash . e50ed) (string-hash . e50ec) (equal-hash . e50eb) (hashtable-equivalence-function . e50ea) (make-hashtable . e50e9) (hashtable-hash-function . e50e8) (make-eqv-hashtable . e50e7) (make-eq-hashtable . e50e6) (hashtable? . e50e5) (hashtable-update! . e50e4) (hashtable-size . e50e3) (hashtable-set! . e50e2) (hashtable-ref . e50e1) (hashtable-mutable? . e50e0) (hashtable-keys . e50df) (hashtable-entries . e50de) (hashtable-delete! . e50dd) (hashtable-copy . e50dc) (hashtable-contains? . e50db) (hashtable-clear! . e50da) (call-with-output-file . e50d9) (call-with-input-file . e50d8) (write-char . e50d7) (write . e50d6) (with-output-to-file . e50d5) (with-input-from-file . e50d4) (read-char . e50d3) (read . e50d2) (peek-char . e50d1) (open-output-file . e50d0) (open-input-file . e50cf) (newline . e50ce) (display . e50cd) (close-output-port . e50cc) (close-input-port . e50cb) (eof-object? . e50ca) (eof-object . e50c9) (current-error-port . e50c8) (current-output-port . e50c7) (current-input-port . e50c6) (output-port? . e50c5) (input-port? . e50c4) (utf-8-codec . e50c3) (utf-16-codec . e50c2) (transcoder-error-handling-mode . e50c1) (transcoder-eol-style . e50c0) (transcoder-codec . e50bf) (transcoded-port . e50be) (textual-port? . e50bd) (string->bytevector . e50bc) (standard-output-port . e50bb) (standard-input-port . e50ba) (standard-error-port . e50b9) (set-port-position! . e50b8) (put-u8 . e50b7) (put-string . e50b6) (put-datum . e50b5) (put-char . e50b4) (put-bytevector . e50b3) (port? . e50b2) (port-transcoder . e50b1) (port-position . e50b0) (port-has-set-port-position!? . e50af) (port-has-port-position? . e50ae) (port-eof? . e50ad) (output-port-buffer-mode . e50ac) (open-string-output-port . e50ab) (open-string-input-port . e50aa) (open-file-output-port . e50a9) (open-file-input/output-port . e50a8) (open-file-input-port . e50a7) (open-bytevector-output-port . e50a6) (open-bytevector-input-port . e50a5) (native-transcoder . e50a4) (native-eol-style . e50a3) (make-transcoder . e50a2) (latin-1-codec . e50a1) (make-i/o-write-error . e4b72) (make-i/o-read-error . e4b5d) (make-i/o-port-error . e4c13) (make-i/o-invalid-position-error . e4b89) (make-i/o-filename-error . e4ba4) (make-i/o-file-protection-error . e4bbd) (make-i/o-file-is-read-only-error . e4bd2) (make-i/o-file-does-not-exist-error . e4bfc) (make-i/o-file-already-exists-error . e4be7) (make-i/o-error . e4b48) (make-i/o-encoding-error . e4c43) (make-i/o-decoding-error . e4c2c) (make-custom-textual-output-port . e50a0) (make-custom-textual-input/output-port . e509f) (make-custom-textual-input-port . e509e) (make-custom-binary-output-port . e509d) (make-custom-binary-input/output-port . e509c) (make-custom-binary-input-port . e509b) (make-bytevector . e509a) (lookahead-u8 . e5099) (lookahead-char . e5098) (i/o-write-error? . e4b74) (i/o-read-error? . e4b5f) (i/o-port-error? . e4c17) (i/o-invalid-position-error? . e4b8d) (i/o-filename-error? . e4ba8) (i/o-file-protection-error? . e4bbf) (i/o-file-is-read-only-error? . e4bd4) (i/o-file-does-not-exist-error? . e4bfe) (i/o-file-already-exists-error? . e4be9) (i/o-error? . e4b4a) (i/o-error-position . e4b8f) (i/o-error-port . e4c19) (i/o-error-filename . e4baa) (i/o-encoding-error? . e4c47) (i/o-encoding-error-char . e4c49) (i/o-decoding-error? . e4c2e) (get-u8 . e5097) (get-string-n! . e5096) (get-string-n . e5095) (get-string-all . e5094) (get-line . e5093) (get-datum . e5092) (get-char . e5091) (get-bytevector-some . e5090) (get-bytevector-n! . e508f) (get-bytevector-n . e508e) (get-bytevector-all . e508d) (flush-output-port . e508c) (close-port . e508b) (exit . e5083) (command-line . e4d7e) (string-fill! . e5082) (string-set! . e5081) (set-cdr! . e5080) (set-car! . e507f) (remove . e507e) (remv . e507d) (remp . e507c) (remq . e507b) (partition . e507a) (memv . e5079) (memq . e5078) (memp . e5077) (member . e5076) (exists . e5075) (for-all . e5074) (fold-right . e5073) (fold-left . e5072) (find . e5071) (filter . e5070) (cons* . e506f) (assv . e506e) (assq . e506d) (assp . e506c) (assoc . e506b) (call-with-string-output-port . e506a) (call-with-port . e5069) (call-with-bytevector-output-port . e5068) (bytevector->string . e5067) (buffer-mode? . e5066) (binary-port? . e5065) (with-exception-handler . e5064) (raise-continuable . e5063) (raise . e5062) (eval . e2f90) (environment . e2f88) (make-enumeration . e5061) (enum-set=? . e5060) (enum-set-universe . e505f) (enum-set-union . e505e) (enum-set-subset? . e505d) (enum-set-projection . e505c) (enum-set-member? . e505b) (enum-set-intersection . e505a) (enum-set-indexer . e5059) (enum-set-difference . e5058) (enum-set-constructor . e5057) (enum-set-complement . e5056) (enum-set->list . e5055) (who-condition? . e4abe) (warning? . e4a36) (violation? . e4a75) (undefined-violation? . e4b35) (syntax-violation? . e4b1c) (syntax-violation-subform . e4b20) (syntax-violation-form . e4b1e) (syntax-violation . e2fb0) (simple-conditions . e5054) (serious-condition? . e4a4b) (non-continuable-violation? . e4ad5) (message-condition? . e4a1f) (make-who-condition . e4aba) (make-warning . e4a34) (make-violation . e4a73) (make-undefined-violation . e4b33) (make-syntax-violation . e4b16) (make-serious-condition . e4a49) (make-non-continuable-violation . e4ad3) (make-message-condition . e4a1b) (make-lexical-violation . e4afd) (make-irritants-condition . e4a9f) (make-implementation-restriction-violation . e4ae8) (make-error . e4a5e) (make-assertion-violation . e4a88) (lexical-violation? . e4aff) (irritants-condition? . e4aa3) (implementation-restriction-violation? . e4aea) (error? . e4a60) (condition-who . e4ac0) (condition-predicate . e5053) (condition-message . e4a21) (condition-irritants . e4aa5) (condition-accessor . e5052) (condition . e5051) (assertion-violation? . e4a8a) (condition? . e5050) (utf32->string . e504f) (utf16->string . e504e) (utf8->string . e504d) (uint-list->bytevector . e504c) (u8-list->bytevector . e504b) (string->utf8 . e504a) (string->utf32 . e5049) (string->utf16 . e5048) (sint-list->bytevector . e5047) (native-endianness . e5046) (bytevector? . e5045) (bytevector=? . e5044) (bytevector-uint-set! . e5043) (bytevector-uint-ref . e5042) (bytevector-u8-set! . e5041) (bytevector-u8-ref . e5040) (bytevector-u64-set! . e503f) (bytevector-u64-ref . e503e) (bytevector-u64-native-set! . e503d) (bytevector-u64-native-ref . e503c) (bytevector-u32-set! . e503b) (bytevector-u32-ref . e503a) (bytevector-u32-native-set! . e5039) (bytevector-u32-native-ref . e5038) (bytevector-u16-set! . e5037) (bytevector-u16-ref . e5036) (bytevector-u16-native-set! . e5035) (bytevector-u16-native-ref . e5034) (bytevector-sint-set! . e5033) (bytevector-sint-ref . e5032) (bytevector-s8-set! . e5031) (bytevector-s8-ref . e5030) (bytevector-s64-set! . e502f) (bytevector-s64-ref . e502e) (bytevector-s64-native-set! . e502d) (bytevector-s64-native-ref . e502c) (bytevector-s32-set! . e502b) (bytevector-s32-ref . e502a) (bytevector-s32-native-set! . e5029) (bytevector-s32-native-ref . e5028) (bytevector-s16-set! . e5027) (bytevector-s16-ref . e5026) (bytevector-s16-native-set! . e5025) (bytevector-s16-native-ref . e5024) (bytevector-length . e5023) (bytevector-ieee-single-ref . e5022) (bytevector-ieee-single-set! . e5021) (bytevector-ieee-single-native-set! . e5020) (bytevector-ieee-single-native-ref . e501f) (bytevector-ieee-double-set! . e501e) (bytevector-ieee-double-ref . e501d) (bytevector-ieee-double-native-set! . e501c) (bytevector-ieee-double-native-ref . e501b) (bytevector-fill! . e501a) (bytevector-copy! . e5019) (bytevector-copy . e5018) (bytevector->uint-list . e5017) (bytevector->u8-list . e5016) (bytevector->sint-list . e5015) (no-nans-violation? . e4c73) (no-infinities-violation? . e4c5e) (make-no-nans-violation . e4c71) (make-no-infinities-violation . e4c5c) (real->flonum . e5014) (flzero? . e5013) (fltruncate . e5012) (fltan . e5011) (flsqrt . e5010) (flsin . e500f) (flround . e500e) (flpositive? . e500d) (flonum? . e500c) (flodd? . e500b) (flnumerator . e500a) (flnegative? . e5009) (flnan? . e5008) (flmod0 . e5007) (flmod . e5006) (flmin . e5005) (flmax . e5004) (fllog . e5003) (flinteger? . e5002) (flinfinite? . e5001) (flfloor . e5000) (flfinite? . e4fff) (flexpt . e4ffe) (flexp . e4ffd) (fleven? . e4ffc) (fldiv0-and-mod0 . e4ffb) (fldiv0 . e4ffa) (fldiv-and-mod . e4ff9) (fldiv . e4ff8) (fldenominator . e4ff7) (flcos . e4ff6) (flceiling . e4ff5) (flatan . e4ff4) (flasin . e4ff3) (flacos . e4ff2) (flabs . e4ff1) (fl>? . e4ff0) (fl>=? . e4fef) (fl=? . e4fee) (fl<? . e4fed) (fl<=? . e4fec) (fl/ . e4feb) (fl- . e4fea) (fl+ . e4fe9) (fl* . e4fe8) (fixnum->flonum . e4fe7) (fxzero? . e4fe6) (fxxor . e4fe5) (fxrotate-bit-field . e4fe4) (fxreverse-bit-field . e4fe3) (fxpositive? . e4fe2) (fxodd? . e4fe1) (fxnot . e4fe0) (fxnegative? . e4fdf) (fxmod0 . e4fde) (fxmod . e4fdd) (fxmin . e4fdc) (fxmax . e4fdb) (fxlength . e4fda) (fxior . e4fd9) (fxif . e4fd8) (fxfirst-bit-set . e4fd7) (fxeven? . e4fd6) (fxdiv0-and-mod0 . e4fd5) (fxdiv0 . e4fd4) (fxdiv-and-mod . e4fd3) (fxdiv . e4fd2) (fxcopy-bit-field . e4fd1) (fxcopy-bit . e4fd0) (fxbit-set? . e4fcf) (fxbit-field . e4fce) (fxbit-count . e4fcd) (fxarithmetic-shift-right . e4fcc) (fxarithmetic-shift-left . e4fcb) (fxarithmetic-shift . e4fca) (fxand . e4fc9) (fx>? . e4fc8) (fx>=? . e4fc7) (fx=? . e4fc6) (fx<? . e4fc5) (fx<=? . e4fc4) (fx-/carry . e4fc3) (fx- . e4fc2) (fx+/carry . e4fc1) (fx+ . e4fc0) (fx*/carry . e4fbf) (fx* . e4fbe) (greatest-fixnum . e4fbd) (least-fixnum . e4fbc) (fixnum-width . e4fbb) (fixnum? . e4fba) (bitwise-rotate-bit-field . e4fb9) (bitwise-reverse-bit-field . e4fb8) (bitwise-length . e4fb7) (bitwise-if . e4fb6) (bitwise-first-bit-set . e4fb5) (bitwise-copy-bit-field . e4fb4) (bitwise-copy-bit . e4fb3) (bitwise-bit-set? . e4fb2) (bitwise-bit-field . e4fb1) (bitwise-bit-count . e4fb0) (bitwise-xor . e4faf) (bitwise-ior . e4fae) (bitwise-and . e4fad) (bitwise-not . e4fac) (bitwise-arithmetic-shift-right . e4fab) (bitwise-arithmetic-shift-left . e4faa) (bitwise-arithmetic-shift . e4fa9) (zero? . e4fa8) (vector? . e4fa7) (vector-set! . e4fa6) (vector-ref . e4fa5) (vector-map . e4fa4) (vector-length . e4fa3) (vector-for-each . e4fa2) (vector-fill! . e4fa1) (vector->list . e4fa0) (vector . e4f9f) (values . e4f9e) (truncate . e4f9d) (tan . e4f9c) (symbol? . e4f9b) (symbol=? . e4f9a) (symbol->string . e4f99) (substring . e4f98) (string? . e4f97) (string>? . e4f96) (string>=? . e4f95) (string=? . e4f94) (string<? . e4f93) (string<=? . e4f92) (string-ref . e4f91) (string-length . e4f90) (string-for-each . e4f8f) (string-copy . e4f8e) (string-append . e4f8d) (string->symbol . e4f8c) (string->number . e4f8b) (string->list . e4f8a) (string . e4f89) (sqrt . e4f88) (sin . e4f87) (round . e4f86) (reverse . e4f85) (real? . e4f84) (real-valued? . e4f83) (real-part . e4f82) (rationalize . e4f81) (rational? . e4f80) (rational-valued? . e4f7f) (procedure? . e4f7e) (positive? . e4f7d) (pair? . e4f7c) (odd? . e4f7b) (numerator . e4f7a) (number? . e4f79) (number->string . e4f78) (null? . e4f77) (not . e4f76) (negative? . e4f75) (nan? . e4f74) (min . e4f73) (max . e4f72) (map . e4f71) (make-vector . e4f70) (make-string . e4f6f) (make-rectangular . e4f6e) (make-polar . e4f6d) (magnitude . e4f6c) (log . e4f6b) (list? . e4f6a) (list-tail . e4f69) (list-ref . e4f68) (list->vector . e4f67) (list->string . e4f66) (list . e4f65) (length . e4f64) (lcm . e4f63) (integer? . e4f62) (integer-valued? . e4f61) (integer->char . e4f60) (infinite? . e4f5f) (inexact? . e4f5e) (inexact . e4f5d) (imag-part . e4f5c) (gcd . e4f5b) (for-each . e4f5a) (floor . e4f59) (finite? . e4f58) (expt . e4f57) (exp . e4f56) (exact? . e4f55) (exact-integer-sqrt . e4f54) (exact . e4f53) (even? . e4f52) (error . e4f51) (eqv? . e4f50) (equal? . e4f4f) (eq? . e4f4e) (dynamic-wind . e4f4d) (div0-and-mod0 . e4f4c) (mod0 . e4f4b) (div0 . e4f4a) (div-and-mod . e4f49) (mod . e4f48) (div . e4f47) (denominator . e4f46) (cos . e4f45) (cons . e4f44) (complex? . e4f43) (char? . e4f42) (char>? . e4f41) (char>=? . e4f40) (char=? . e4f3f) (char<? . e4f3e) (char<=? . e4f3d) (char->integer . e4f3c) (ceiling . e4f3b) (call-with-values . e4f3a) (call/cc . e4f39) (call-with-current-continuation . e4f38) (cddddr . e4f37) (cdddar . e4f36) (cddadr . e4f35) (cddaar . e4f34) (cdaddr . e4f33) (cdadar . e4f32) (cdaadr . e4f31) (cdaaar . e4f30) (cadddr . e4f2f) (caddar . e4f2e) (cadadr . e4f2d) (cadaar . e4f2c) (caaddr . e4f2b) (caadar . e4f2a) (caaadr . e4f29) (caaaar . e4f28) (cdddr . e4f27) (cddar . e4f26) (cdadr . e4f25) (cdaar . e4f24) (caddr . e4f23) (cadar . e4f22) (caadr . e4f21) (caaar . e4f20) (cddr . e4f1f) (cdar . e4f1e) (cadr . e4f1d) (caar . e4f1c) (cdr . e4f1b) (car . e4f1a) (boolean? . e4f19) (boolean=? . e4f18) (atan . e4f17) (assertion-violation . e4f16) (asin . e4f15) (apply . e4f14) (append . e4f13) (angle . e4f12) (acos . e4f11) (abs . e4f10) (/ . e4f0f) (* . e4f0e) (- . e4f0d) (+ . e4f0c) (>= . e4f0b) (> . e4f0a) (= . e4f09) (<= . e4f08) (< . e4f07) (library . e4f06) (&no-nans . e4f05) (&no-infinities . e4f04) (&i/o-encoding . e4f03) (&i/o-decoding . e4f02) (&i/o-port . e4f01) (&i/o-file-does-not-exist . e4f00) (&i/o-file-already-exists . e4eff) (&i/o-file-is-read-only . e4efe) (&i/o-file-protection . e4efd) (&i/o-filename . e4efc) (&i/o-invalid-position . e4efb) (&i/o-write . e4efa) (&i/o-read . e4ef9) (&i/o . e4ef8) (&undefined . e4ef7) (&syntax . e4ef6) (&lexical . e4ef5) (&implementation-restriction . e4ef4) (&non-continuable . e4ef3) (&who . e4ef2) (&irritants . e4ef1) (&assertion . e4ef0) (&violation . e4eef) (&error . e4eee) (&serious . e4eed) (&warning . e4eec) (&message . e4eeb) (&condition . e4eea) (define-condition-type . e4ee9) (define-enumeration . e4ee8) (define-record-type . e4ee7) (parent-rtd . e4ee6) (nongenerative . e4ee5) (opaque . e4ee4) (sealed . e4ee3) (protocol . e4ee2) (parent . e4ee1) (immutable . e4ee0) (mutable . e4edf) (fields . e4ede) (error-handling-mode . e4edd) (file-options . e4edc) (buffer-mode . e4edb) (eol-style . e4eda) (guard . e4ed9) (unsyntax-splicing . e4ed6) (unsyntax . e4ed5) (unquote-splicing . e4ed4) (unquote . e4ed3) (_ . e4ed2) (else . e4ed1) (=> . e4ed0) (... . e4ecf) (assert . e4ece) (endianness . e4ecd) (time . e4ecb) (do . e4eca) (cond . e4ec9) (let* . e4ec8) (let . e4ec7) (let*-values . e4ec6) (let-values . e4ec5) (identifier-syntax . e4ec4) (with-syntax . e4ec3) (quasisyntax . e4ec2) (quasiquote . e4ec1) (syntax-rules . e4ec0) (include . e4ebf) (record-constructor-descriptor . e4ebd) (record-type-descriptor . e4ebc) (case . e4ebb) (unless . e4eb9) (when . e4eb8) (or . e4eb7) (and . e4eb6) (if . e4eb5) (letrec* . e4eb4) (letrec . e4eb3) (case-lambda . e4eb1) (lambda . e4eb0) (syntax . e4eaf) (syntax-case . e4eae) (quote . e4ead) (letrec-syntax . e4eab) (let-syntax . e4eaa) (set! . e4ea9) (import . e4ea8) (begin . e4ea7) (define-syntax . e4ea5) (define . e4ea4)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e5186 '(psyntax null-environment-5) '() '() '() '() '((make-promise . e5084) (unquote-splicing . e4ed4) (unquote . e4ed3) (_ . e4ed2) (else . e4ed1) (=> . e4ed0) (... . e4ecf) (delay . e4ecc) (do . e4eca) (cond . e4ec9) (let* . e4ec8) (let . e4ec7) (quasiquote . e4ec1) (syntax-rules . e4ec0) (case . e4ebb) (or . e4eb7) (and . e4eb6) (if . e4eb5) (letrec . e4eb3) (lambda . e4eb0) (quote . e4ead) (letrec-syntax . e4eab) (let-syntax . e4eaa) (set! . e4ea9) (begin . e4ea7) (define-syntax . e4ea5) (define . e4ea4)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e5187 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . e5119) (string-ci>=? . e5118) (string-ci=? . e5117) (string-ci<? . e5116) (string-ci<=? . e5115) (char-whitespace? . e5114) (char-upper-case? . e5113) (char-numeric? . e5111) (char-lower-case? . e5110) (char-upcase . e510e) (char-downcase . e510b) (char-ci>? . e510a) (char-ci>=? . e5109) (char-ci=? . e5108) (char-ci<? . e5107) (char-ci<=? . e5106) (char-alphabetic? . e5105) (call-with-output-file . e50d9) (call-with-input-file . e50d8) (write-char . e50d7) (write . e50d6) (with-output-to-file . e50d5) (with-input-from-file . e50d4) (read-char . e50d3) (read . e50d2) (peek-char . e50d1) (open-output-file . e50d0) (open-input-file . e50cf) (newline . e50ce) (display . e50cd) (close-output-port . e50cc) (close-input-port . e50cb) (eof-object . e50c9) (current-output-port . e50c7) (current-input-port . e50c6) (output-port? . e50c5) (input-port? . e50c4) (scheme-report-environment . e2f8c) (quotient . e508a) (null-environment . e2f8a) (remainder . e5089) (modulo . e5088) (inexact->exact . e5087) (force . e5086) (exact->inexact . e5085) (make-promise . e5084) (string-fill! . e5082) (string-set! . e5081) (set-cdr! . e5080) (set-car! . e507f) (memv . e5079) (memq . e5078) (member . e5076) (assv . e506e) (assq . e506d) (assoc . e506b) (eval . e2f90) (zero? . e4fa8) (vector? . e4fa7) (vector-set! . e4fa6) (vector-ref . e4fa5) (vector-length . e4fa3) (vector-fill! . e4fa1) (vector->list . e4fa0) (vector . e4f9f) (values . e4f9e) (truncate . e4f9d) (tan . e4f9c) (symbol? . e4f9b) (symbol->string . e4f99) (substring . e4f98) (string? . e4f97) (string>? . e4f96) (string>=? . e4f95) (string=? . e4f94) (string<? . e4f93) (string<=? . e4f92) (string-ref . e4f91) (string-length . e4f90) (string-copy . e4f8e) (string-append . e4f8d) (string->symbol . e4f8c) (string->number . e4f8b) (string->list . e4f8a) (string . e4f89) (sqrt . e4f88) (sin . e4f87) (round . e4f86) (reverse . e4f85) (real? . e4f84) (real-part . e4f82) (rationalize . e4f81) (rational? . e4f80) (procedure? . e4f7e) (positive? . e4f7d) (pair? . e4f7c) (odd? . e4f7b) (numerator . e4f7a) (number? . e4f79) (number->string . e4f78) (not . e4f76) (negative? . e4f75) (min . e4f73) (max . e4f72) (map . e4f71) (make-vector . e4f70) (make-string . e4f6f) (make-rectangular . e4f6e) (make-polar . e4f6d) (magnitude . e4f6c) (log . e4f6b) (list? . e4f6a) (list-tail . e4f69) (list-ref . e4f68) (list->vector . e4f67) (list->string . e4f66) (list . e4f65) (length . e4f64) (lcm . e4f63) (integer? . e4f62) (integer->char . e4f60) (inexact? . e4f5e) (imag-part . e4f5c) (gcd . e4f5b) (for-each . e4f5a) (floor . e4f59) (expt . e4f57) (exp . e4f56) (exact? . e4f55) (even? . e4f52) (eqv? . e4f50) (equal? . e4f4f) (eq? . e4f4e) (dynamic-wind . e4f4d) (denominator . e4f46) (cos . e4f45) (cons . e4f44) (complex? . e4f43) (char? . e4f42) (char>? . e4f41) (char>=? . e4f40) (char=? . e4f3f) (char<? . e4f3e) (char<=? . e4f3d) (char->integer . e4f3c) (ceiling . e4f3b) (call-with-values . e4f3a) (call-with-current-continuation . e4f38) (cddddr . e4f37) (cdddar . e4f36) (cddadr . e4f35) (cddaar . e4f34) (cdaddr . e4f33) (cdadar . e4f32) (cdaadr . e4f31) (cdaaar . e4f30) (cadddr . e4f2f) (caddar . e4f2e) (cadadr . e4f2d) (cadaar . e4f2c) (caaddr . e4f2b) (caadar . e4f2a) (caaadr . e4f29) (caaaar . e4f28) (cdddr . e4f27) (cddar . e4f26) (cdadr . e4f25) (cdaar . e4f24) (caddr . e4f23) (cadar . e4f22) (caadr . e4f21) (caaar . e4f20) (cddr . e4f1f) (cdar . e4f1e) (cadr . e4f1d) (caar . e4f1c) (cdr . e4f1b) (car . e4f1a) (boolean? . e4f19) (atan . e4f17) (asin . e4f15) (apply . e4f14) (append . e4f13) (angle . e4f12) (acos . e4f11) (abs . e4f10) (/ . e4f0f) (* . e4f0e) (- . e4f0d) (+ . e4f0c) (>= . e4f0b) (> . e4f0a) (= . e4f09) (<= . e4f08) (< . e4f07) (unquote-splicing . e4ed4) (unquote . e4ed3) (else . e4ed1) (=> . e4ed0) (... . e4ecf) (delay . e4ecc) (do . e4eca) (cond . e4ec9) (let* . e4ec8) (let . e4ec7) (quasiquote . e4ec1) (syntax-rules . e4ec0) (case . e4ebb) (or . e4eb7) (and . e4eb6) (if . e4eb5) (letrec . e4eb3) (lambda . e4eb0) (quote . e4ead) (letrec-syntax . e4eab) (let-syntax . e4eaa) (set! . e4ea9) (begin . e4ea7) (define-syntax . e4ea5) (define . e4ea4)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e5188 '(psyntax modules) '() '() '() '() '((module . e4ea6)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e5189 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e518a '(rnrs) '(6) '() '() '() '((regexp? . e517d) (string-upcase . e5121) (string-titlecase . e5120) (string-normalize-nfkd . e511f) (string-normalize-nfkc . e511e) (string-normalize-nfd . e511d) (string-normalize-nfc . e511c) (string-foldcase . e511b) (string-downcase . e511a) (string-ci>? . e5119) (string-ci>=? . e5118) (string-ci=? . e5117) (string-ci<? . e5116) (string-ci<=? . e5115) (char-whitespace? . e5114) (char-upper-case? . e5113) (char-title-case? . e5112) (char-numeric? . e5111) (char-lower-case? . e5110) (char-general-category . e510f) (char-upcase . e510e) (char-titlecase . e510d) (char-foldcase . e510c) (char-downcase . e510b) (char-ci>? . e510a) (char-ci>=? . e5109) (char-ci=? . e5108) (char-ci<? . e5107) (char-ci<=? . e5106) (char-alphabetic? . e5105) (make-variable-transformer . e2cf4) (identifier? . e2fb2) (generate-temporaries . e2f9e) (free-identifier=? . e2fa0) (syntax->datum . e2fb6) (datum->syntax . e2fb4) (bound-identifier=? . e2fa2) (record-type-descriptor? . e5104) (record-predicate . e5103) (record-mutator . e5102) (record-constructor . e5101) (record-accessor . e5100) (make-record-type-descriptor . e50ff) (make-record-constructor-descriptor . e50fe) (record? . e50fd) (record-type-uid . e50fc) (record-type-sealed? . e50fb) (record-type-parent . e50fa) (record-type-opaque? . e50f9) (record-type-name . e50f8) (record-type-generative? . e50f7) (record-type-field-names . e50f6) (record-rtd . e50f5) (record-field-mutable? . e50f4) (delete-file . e50f3) (file-exists? . e50f2) (vector-sort! . e50f1) (vector-sort . e50f0) (list-sort . e50ef) (symbol-hash . e50ee) (string-ci-hash . e50ed) (string-hash . e50ec) (equal-hash . e50eb) (hashtable-equivalence-function . e50ea) (make-hashtable . e50e9) (hashtable-hash-function . e50e8) (make-eqv-hashtable . e50e7) (make-eq-hashtable . e50e6) (hashtable? . e50e5) (hashtable-update! . e50e4) (hashtable-size . e50e3) (hashtable-set! . e50e2) (hashtable-ref . e50e1) (hashtable-mutable? . e50e0) (hashtable-keys . e50df) (hashtable-entries . e50de) (hashtable-delete! . e50dd) (hashtable-copy . e50dc) (hashtable-contains? . e50db) (hashtable-clear! . e50da) (call-with-output-file . e50d9) (call-with-input-file . e50d8) (write-char . e50d7) (write . e50d6) (with-output-to-file . e50d5) (with-input-from-file . e50d4) (read-char . e50d3) (read . e50d2) (peek-char . e50d1) (open-output-file . e50d0) (open-input-file . e50cf) (newline . e50ce) (display . e50cd) (close-output-port . e50cc) (close-input-port . e50cb) (eof-object? . e50ca) (eof-object . e50c9) (current-error-port . e50c8) (current-output-port . e50c7) (current-input-port . e50c6) (output-port? . e50c5) (input-port? . e50c4) (utf-8-codec . e50c3) (utf-16-codec . e50c2) (transcoder-error-handling-mode . e50c1) (transcoder-eol-style . e50c0) (transcoder-codec . e50bf) (transcoded-port . e50be) (textual-port? . e50bd) (string->bytevector . e50bc) (standard-output-port . e50bb) (standard-input-port . e50ba) (standard-error-port . e50b9) (set-port-position! . e50b8) (put-u8 . e50b7) (put-string . e50b6) (put-datum . e50b5) (put-char . e50b4) (put-bytevector . e50b3) (port? . e50b2) (port-transcoder . e50b1) (port-position . e50b0) (port-has-set-port-position!? . e50af) (port-has-port-position? . e50ae) (port-eof? . e50ad) (output-port-buffer-mode . e50ac) (open-string-output-port . e50ab) (open-string-input-port . e50aa) (open-file-output-port . e50a9) (open-file-input/output-port . e50a8) (open-file-input-port . e50a7) (open-bytevector-output-port . e50a6) (open-bytevector-input-port . e50a5) (native-transcoder . e50a4) (native-eol-style . e50a3) (make-transcoder . e50a2) (latin-1-codec . e50a1) (make-i/o-write-error . e4b72) (make-i/o-read-error . e4b5d) (make-i/o-port-error . e4c13) (make-i/o-invalid-position-error . e4b89) (make-i/o-filename-error . e4ba4) (make-i/o-file-protection-error . e4bbd) (make-i/o-file-is-read-only-error . e4bd2) (make-i/o-file-does-not-exist-error . e4bfc) (make-i/o-file-already-exists-error . e4be7) (make-i/o-error . e4b48) (make-i/o-encoding-error . e4c43) (make-i/o-decoding-error . e4c2c) (make-custom-textual-output-port . e50a0) (make-custom-textual-input/output-port . e509f) (make-custom-textual-input-port . e509e) (make-custom-binary-output-port . e509d) (make-custom-binary-input/output-port . e509c) (make-custom-binary-input-port . e509b) (make-bytevector . e509a) (lookahead-u8 . e5099) (lookahead-char . e5098) (i/o-write-error? . e4b74) (i/o-read-error? . e4b5f) (i/o-port-error? . e4c17) (i/o-invalid-position-error? . e4b8d) (i/o-filename-error? . e4ba8) (i/o-file-protection-error? . e4bbf) (i/o-file-is-read-only-error? . e4bd4) (i/o-file-does-not-exist-error? . e4bfe) (i/o-file-already-exists-error? . e4be9) (i/o-error? . e4b4a) (i/o-error-position . e4b8f) (i/o-error-port . e4c19) (i/o-error-filename . e4baa) (i/o-encoding-error? . e4c47) (i/o-encoding-error-char . e4c49) (i/o-decoding-error? . e4c2e) (get-u8 . e5097) (get-string-n! . e5096) (get-string-n . e5095) (get-string-all . e5094) (get-line . e5093) (get-datum . e5092) (get-char . e5091) (get-bytevector-some . e5090) (get-bytevector-n! . e508f) (get-bytevector-n . e508e) (get-bytevector-all . e508d) (flush-output-port . e508c) (close-port . e508b) (exit . e5083) (command-line . e4d7e) (remove . e507e) (remv . e507d) (remp . e507c) (remq . e507b) (partition . e507a) (memv . e5079) (memq . e5078) (memp . e5077) (member . e5076) (exists . e5075) (for-all . e5074) (fold-right . e5073) (fold-left . e5072) (find . e5071) (filter . e5070) (cons* . e506f) (assv . e506e) (assq . e506d) (assp . e506c) (assoc . e506b) (call-with-string-output-port . e506a) (call-with-port . e5069) (call-with-bytevector-output-port . e5068) (bytevector->string . e5067) (buffer-mode? . e5066) (binary-port? . e5065) (with-exception-handler . e5064) (raise-continuable . e5063) (raise . e5062) (make-enumeration . e5061) (enum-set=? . e5060) (enum-set-universe . e505f) (enum-set-union . e505e) (enum-set-subset? . e505d) (enum-set-projection . e505c) (enum-set-member? . e505b) (enum-set-intersection . e505a) (enum-set-indexer . e5059) (enum-set-difference . e5058) (enum-set-constructor . e5057) (enum-set-complement . e5056) (enum-set->list . e5055) (who-condition? . e4abe) (warning? . e4a36) (violation? . e4a75) (undefined-violation? . e4b35) (syntax-violation? . e4b1c) (syntax-violation-subform . e4b20) (syntax-violation-form . e4b1e) (syntax-violation . e2fb0) (simple-conditions . e5054) (serious-condition? . e4a4b) (non-continuable-violation? . e4ad5) (message-condition? . e4a1f) (make-who-condition . e4aba) (make-warning . e4a34) (make-violation . e4a73) (make-undefined-violation . e4b33) (make-syntax-violation . e4b16) (make-serious-condition . e4a49) (make-non-continuable-violation . e4ad3) (make-message-condition . e4a1b) (make-lexical-violation . e4afd) (make-irritants-condition . e4a9f) (make-implementation-restriction-violation . e4ae8) (make-error . e4a5e) (make-assertion-violation . e4a88) (lexical-violation? . e4aff) (irritants-condition? . e4aa3) (implementation-restriction-violation? . e4aea) (error? . e4a60) (condition-who . e4ac0) (condition-predicate . e5053) (condition-message . e4a21) (condition-irritants . e4aa5) (condition-accessor . e5052) (condition . e5051) (assertion-violation? . e4a8a) (condition? . e5050) (utf32->string . e504f) (utf16->string . e504e) (utf8->string . e504d) (uint-list->bytevector . e504c) (u8-list->bytevector . e504b) (string->utf8 . e504a) (string->utf32 . e5049) (string->utf16 . e5048) (sint-list->bytevector . e5047) (native-endianness . e5046) (bytevector? . e5045) (bytevector=? . e5044) (bytevector-uint-set! . e5043) (bytevector-uint-ref . e5042) (bytevector-u8-set! . e5041) (bytevector-u8-ref . e5040) (bytevector-u64-set! . e503f) (bytevector-u64-ref . e503e) (bytevector-u64-native-set! . e503d) (bytevector-u64-native-ref . e503c) (bytevector-u32-set! . e503b) (bytevector-u32-ref . e503a) (bytevector-u32-native-set! . e5039) (bytevector-u32-native-ref . e5038) (bytevector-u16-set! . e5037) (bytevector-u16-ref . e5036) (bytevector-u16-native-set! . e5035) (bytevector-u16-native-ref . e5034) (bytevector-sint-set! . e5033) (bytevector-sint-ref . e5032) (bytevector-s8-set! . e5031) (bytevector-s8-ref . e5030) (bytevector-s64-set! . e502f) (bytevector-s64-ref . e502e) (bytevector-s64-native-set! . e502d) (bytevector-s64-native-ref . e502c) (bytevector-s32-set! . e502b) (bytevector-s32-ref . e502a) (bytevector-s32-native-set! . e5029) (bytevector-s32-native-ref . e5028) (bytevector-s16-set! . e5027) (bytevector-s16-ref . e5026) (bytevector-s16-native-set! . e5025) (bytevector-s16-native-ref . e5024) (bytevector-length . e5023) (bytevector-ieee-single-ref . e5022) (bytevector-ieee-single-set! . e5021) (bytevector-ieee-single-native-set! . e5020) (bytevector-ieee-single-native-ref . e501f) (bytevector-ieee-double-set! . e501e) (bytevector-ieee-double-ref . e501d) (bytevector-ieee-double-native-set! . e501c) (bytevector-ieee-double-native-ref . e501b) (bytevector-fill! . e501a) (bytevector-copy! . e5019) (bytevector-copy . e5018) (bytevector->uint-list . e5017) (bytevector->u8-list . e5016) (bytevector->sint-list . e5015) (no-nans-violation? . e4c73) (no-infinities-violation? . e4c5e) (make-no-nans-violation . e4c71) (make-no-infinities-violation . e4c5c) (real->flonum . e5014) (flzero? . e5013) (fltruncate . e5012) (fltan . e5011) (flsqrt . e5010) (flsin . e500f) (flround . e500e) (flpositive? . e500d) (flonum? . e500c) (flodd? . e500b) (flnumerator . e500a) (flnegative? . e5009) (flnan? . e5008) (flmod0 . e5007) (flmod . e5006) (flmin . e5005) (flmax . e5004) (fllog . e5003) (flinteger? . e5002) (flinfinite? . e5001) (flfloor . e5000) (flfinite? . e4fff) (flexpt . e4ffe) (flexp . e4ffd) (fleven? . e4ffc) (fldiv0-and-mod0 . e4ffb) (fldiv0 . e4ffa) (fldiv-and-mod . e4ff9) (fldiv . e4ff8) (fldenominator . e4ff7) (flcos . e4ff6) (flceiling . e4ff5) (flatan . e4ff4) (flasin . e4ff3) (flacos . e4ff2) (flabs . e4ff1) (fl>? . e4ff0) (fl>=? . e4fef) (fl=? . e4fee) (fl<? . e4fed) (fl<=? . e4fec) (fl/ . e4feb) (fl- . e4fea) (fl+ . e4fe9) (fl* . e4fe8) (fixnum->flonum . e4fe7) (fxzero? . e4fe6) (fxxor . e4fe5) (fxrotate-bit-field . e4fe4) (fxreverse-bit-field . e4fe3) (fxpositive? . e4fe2) (fxodd? . e4fe1) (fxnot . e4fe0) (fxnegative? . e4fdf) (fxmod0 . e4fde) (fxmod . e4fdd) (fxmin . e4fdc) (fxmax . e4fdb) (fxlength . e4fda) (fxior . e4fd9) (fxif . e4fd8) (fxfirst-bit-set . e4fd7) (fxeven? . e4fd6) (fxdiv0-and-mod0 . e4fd5) (fxdiv0 . e4fd4) (fxdiv-and-mod . e4fd3) (fxdiv . e4fd2) (fxcopy-bit-field . e4fd1) (fxcopy-bit . e4fd0) (fxbit-set? . e4fcf) (fxbit-field . e4fce) (fxbit-count . e4fcd) (fxarithmetic-shift-right . e4fcc) (fxarithmetic-shift-left . e4fcb) (fxarithmetic-shift . e4fca) (fxand . e4fc9) (fx>? . e4fc8) (fx>=? . e4fc7) (fx=? . e4fc6) (fx<? . e4fc5) (fx<=? . e4fc4) (fx-/carry . e4fc3) (fx- . e4fc2) (fx+/carry . e4fc1) (fx+ . e4fc0) (fx*/carry . e4fbf) (fx* . e4fbe) (greatest-fixnum . e4fbd) (least-fixnum . e4fbc) (fixnum-width . e4fbb) (fixnum? . e4fba) (bitwise-rotate-bit-field . e4fb9) (bitwise-reverse-bit-field . e4fb8) (bitwise-length . e4fb7) (bitwise-if . e4fb6) (bitwise-first-bit-set . e4fb5) (bitwise-copy-bit-field . e4fb4) (bitwise-copy-bit . e4fb3) (bitwise-bit-set? . e4fb2) (bitwise-bit-field . e4fb1) (bitwise-bit-count . e4fb0) (bitwise-xor . e4faf) (bitwise-ior . e4fae) (bitwise-and . e4fad) (bitwise-not . e4fac) (bitwise-arithmetic-shift-right . e4fab) (bitwise-arithmetic-shift-left . e4faa) (bitwise-arithmetic-shift . e4fa9) (zero? . e4fa8) (vector? . e4fa7) (vector-set! . e4fa6) (vector-ref . e4fa5) (vector-map . e4fa4) (vector-length . e4fa3) (vector-for-each . e4fa2) (vector-fill! . e4fa1) (vector->list . e4fa0) (vector . e4f9f) (values . e4f9e) (truncate . e4f9d) (tan . e4f9c) (symbol? . e4f9b) (symbol=? . e4f9a) (symbol->string . e4f99) (substring . e4f98) (string? . e4f97) (string>? . e4f96) (string>=? . e4f95) (string=? . e4f94) (string<? . e4f93) (string<=? . e4f92) (string-ref . e4f91) (string-length . e4f90) (string-for-each . e4f8f) (string-copy . e4f8e) (string-append . e4f8d) (string->symbol . e4f8c) (string->number . e4f8b) (string->list . e4f8a) (string . e4f89) (sqrt . e4f88) (sin . e4f87) (round . e4f86) (reverse . e4f85) (real? . e4f84) (real-valued? . e4f83) (real-part . e4f82) (rationalize . e4f81) (rational? . e4f80) (rational-valued? . e4f7f) (procedure? . e4f7e) (positive? . e4f7d) (pair? . e4f7c) (odd? . e4f7b) (numerator . e4f7a) (number? . e4f79) (number->string . e4f78) (null? . e4f77) (not . e4f76) (negative? . e4f75) (nan? . e4f74) (min . e4f73) (max . e4f72) (map . e4f71) (make-vector . e4f70) (make-string . e4f6f) (make-rectangular . e4f6e) (make-polar . e4f6d) (magnitude . e4f6c) (log . e4f6b) (list? . e4f6a) (list-tail . e4f69) (list-ref . e4f68) (list->vector . e4f67) (list->string . e4f66) (list . e4f65) (length . e4f64) (lcm . e4f63) (integer? . e4f62) (integer-valued? . e4f61) (integer->char . e4f60) (infinite? . e4f5f) (inexact? . e4f5e) (inexact . e4f5d) (imag-part . e4f5c) (gcd . e4f5b) (for-each . e4f5a) (floor . e4f59) (finite? . e4f58) (expt . e4f57) (exp . e4f56) (exact? . e4f55) (exact-integer-sqrt . e4f54) (exact . e4f53) (even? . e4f52) (error . e4f51) (eqv? . e4f50) (equal? . e4f4f) (eq? . e4f4e) (dynamic-wind . e4f4d) (div0-and-mod0 . e4f4c) (mod0 . e4f4b) (div0 . e4f4a) (div-and-mod . e4f49) (mod . e4f48) (div . e4f47) (denominator . e4f46) (cos . e4f45) (cons . e4f44) (complex? . e4f43) (char? . e4f42) (char>? . e4f41) (char>=? . e4f40) (char=? . e4f3f) (char<? . e4f3e) (char<=? . e4f3d) (char->integer . e4f3c) (ceiling . e4f3b) (call-with-values . e4f3a) (call/cc . e4f39) (call-with-current-continuation . e4f38) (cddddr . e4f37) (cdddar . e4f36) (cddadr . e4f35) (cddaar . e4f34) (cdaddr . e4f33) (cdadar . e4f32) (cdaadr . e4f31) (cdaaar . e4f30) (cadddr . e4f2f) (caddar . e4f2e) (cadadr . e4f2d) (cadaar . e4f2c) (caaddr . e4f2b) (caadar . e4f2a) (caaadr . e4f29) (caaaar . e4f28) (cdddr . e4f27) (cddar . e4f26) (cdadr . e4f25) (cdaar . e4f24) (caddr . e4f23) (cadar . e4f22) (caadr . e4f21) (caaar . e4f20) (cddr . e4f1f) (cdar . e4f1e) (cadr . e4f1d) (caar . e4f1c) (cdr . e4f1b) (car . e4f1a) (boolean? . e4f19) (boolean=? . e4f18) (atan . e4f17) (assertion-violation . e4f16) (asin . e4f15) (apply . e4f14) (append . e4f13) (angle . e4f12) (acos . e4f11) (abs . e4f10) (/ . e4f0f) (* . e4f0e) (- . e4f0d) (+ . e4f0c) (>= . e4f0b) (> . e4f0a) (= . e4f09) (<= . e4f08) (< . e4f07) (&no-nans . e4f05) (&no-infinities . e4f04) (&i/o-encoding . e4f03) (&i/o-decoding . e4f02) (&i/o-port . e4f01) (&i/o-file-does-not-exist . e4f00) (&i/o-file-already-exists . e4eff) (&i/o-file-is-read-only . e4efe) (&i/o-file-protection . e4efd) (&i/o-filename . e4efc) (&i/o-invalid-position . e4efb) (&i/o-write . e4efa) (&i/o-read . e4ef9) (&i/o . e4ef8) (&undefined . e4ef7) (&syntax . e4ef6) (&lexical . e4ef5) (&implementation-restriction . e4ef4) (&non-continuable . e4ef3) (&who . e4ef2) (&irritants . e4ef1) (&assertion . e4ef0) (&violation . e4eef) (&error . e4eee) (&serious . e4eed) (&warning . e4eec) (&message . e4eeb) (&condition . e4eea) (define-condition-type . e4ee9) (define-enumeration . e4ee8) (define-record-type . e4ee7) (parent-rtd . e4ee6) (nongenerative . e4ee5) (opaque . e4ee4) (sealed . e4ee3) (protocol . e4ee2) (parent . e4ee1) (immutable . e4ee0) (mutable . e4edf) (fields . e4ede) (error-handling-mode . e4edd) (file-options . e4edc) (buffer-mode . e4edb) (eol-style . e4eda) (guard . e4ed9) (unsyntax-splicing . e4ed6) (unsyntax . e4ed5) (unquote-splicing . e4ed4) (unquote . e4ed3) (_ . e4ed2) (else . e4ed1) (=> . e4ed0) (... . e4ecf) (assert . e4ece) (endianness . e4ecd) (do . e4eca) (cond . e4ec9) (let* . e4ec8) (let . e4ec7) (let*-values . e4ec6) (let-values . e4ec5) (identifier-syntax . e4ec4) (with-syntax . e4ec3) (quasisyntax . e4ec2) (quasiquote . e4ec1) (syntax-rules . e4ec0) (record-constructor-descriptor . e4ebd) (record-type-descriptor . e4ebc) (case . e4ebb) (unless . e4eb9) (when . e4eb8) (or . e4eb7) (and . e4eb6) (if . e4eb5) (letrec* . e4eb4) (letrec . e4eb3) (case-lambda . e4eb1) (lambda . e4eb0) (syntax . e4eaf) (syntax-case . e4eae) (quote . e4ead) (letrec-syntax . e4eab) (let-syntax . e4eaa) (set! . e4ea9) (begin . e4ea7) (define-syntax . e4ea5) (define . e4ea4)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e518b '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . e2f8c) (quotient . e508a) (null-environment . e2f8a) (remainder . e5089) (modulo . e5088) (inexact->exact . e5087) (force . e5086) (exact->inexact . e5085) (make-promise . e5084) (delay . e4ecc)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e518c '(rnrs control) '(6) '() '() '() '((do . e4eca) (unless . e4eb9) (when . e4eb8) (case-lambda . e4eb1)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e518d '(rnrs eval) '(6) '() '() '() '((eval . e2f90) (environment . e2f88)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e518e '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . e5080) (set-car! . e507f)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e518f '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . e5082) (string-set! . e5081)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e5190 '(rnrs programs) '(6) '() '() '() '((exit . e5083) (command-line . e4d7e)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e5191 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . e2cf4) (identifier? . e2fb2) (generate-temporaries . e2f9e) (free-identifier=? . e2fa0) (syntax->datum . e2fb6) (datum->syntax . e2fb4) (bound-identifier=? . e2fa2) (syntax-violation . e2fb0) (unsyntax-splicing . e4ed6) (unsyntax . e4ed5) (_ . e4ed2) (... . e4ecf) (with-syntax . e4ec3) (quasisyntax . e4ec2) (syntax . e4eaf) (syntax-case . e4eae)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e5192 '(rnrs files) '(6) '() '() '() '((delete-file . e50f3) (file-exists? . e50f2) (make-i/o-write-error . e4b72) (make-i/o-read-error . e4b5d) (make-i/o-port-error . e4c13) (make-i/o-invalid-position-error . e4b89) (make-i/o-filename-error . e4ba4) (make-i/o-file-protection-error . e4bbd) (make-i/o-file-is-read-only-error . e4bd2) (make-i/o-file-does-not-exist-error . e4bfc) (make-i/o-file-already-exists-error . e4be7) (make-i/o-error . e4b48) (i/o-write-error? . e4b74) (i/o-read-error? . e4b5f) (i/o-port-error? . e4c17) (i/o-invalid-position-error? . e4b8d) (i/o-filename-error? . e4ba8) (i/o-file-protection-error? . e4bbf) (i/o-file-is-read-only-error? . e4bd4) (i/o-file-does-not-exist-error? . e4bfe) (i/o-file-already-exists-error? . e4be9) (i/o-error? . e4b4a) (i/o-error-position . e4b8f) (i/o-error-port . e4c19) (i/o-error-filename . e4baa) (&i/o-port . e4f01) (&i/o-file-does-not-exist . e4f00) (&i/o-file-already-exists . e4eff) (&i/o-file-is-read-only . e4efe) (&i/o-file-protection . e4efd) (&i/o-filename . e4efc) (&i/o-invalid-position . e4efb) (&i/o-write . e4efa) (&i/o-read . e4ef9) (&i/o . e4ef8)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e5193 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . e50f1) (vector-sort . e50f0) (list-sort . e50ef)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e5194 '(rnrs base) '(6) '() '() '() '((zero? . e4fa8) (vector? . e4fa7) (vector-set! . e4fa6) (vector-ref . e4fa5) (vector-map . e4fa4) (vector-length . e4fa3) (vector-for-each . e4fa2) (vector-fill! . e4fa1) (vector->list . e4fa0) (vector . e4f9f) (values . e4f9e) (truncate . e4f9d) (tan . e4f9c) (symbol? . e4f9b) (symbol=? . e4f9a) (symbol->string . e4f99) (substring . e4f98) (string? . e4f97) (string>? . e4f96) (string>=? . e4f95) (string=? . e4f94) (string<? . e4f93) (string<=? . e4f92) (string-ref . e4f91) (string-length . e4f90) (string-for-each . e4f8f) (string-copy . e4f8e) (string-append . e4f8d) (string->symbol . e4f8c) (string->number . e4f8b) (string->list . e4f8a) (string . e4f89) (sqrt . e4f88) (sin . e4f87) (round . e4f86) (reverse . e4f85) (real? . e4f84) (real-valued? . e4f83) (real-part . e4f82) (rationalize . e4f81) (rational? . e4f80) (rational-valued? . e4f7f) (procedure? . e4f7e) (positive? . e4f7d) (pair? . e4f7c) (odd? . e4f7b) (numerator . e4f7a) (number? . e4f79) (number->string . e4f78) (null? . e4f77) (not . e4f76) (negative? . e4f75) (nan? . e4f74) (min . e4f73) (max . e4f72) (map . e4f71) (make-vector . e4f70) (make-string . e4f6f) (make-rectangular . e4f6e) (make-polar . e4f6d) (magnitude . e4f6c) (log . e4f6b) (list? . e4f6a) (list-tail . e4f69) (list-ref . e4f68) (list->vector . e4f67) (list->string . e4f66) (list . e4f65) (length . e4f64) (lcm . e4f63) (integer? . e4f62) (integer-valued? . e4f61) (integer->char . e4f60) (infinite? . e4f5f) (inexact? . e4f5e) (inexact . e4f5d) (imag-part . e4f5c) (gcd . e4f5b) (for-each . e4f5a) (floor . e4f59) (finite? . e4f58) (expt . e4f57) (exp . e4f56) (exact? . e4f55) (exact-integer-sqrt . e4f54) (exact . e4f53) (even? . e4f52) (error . e4f51) (eqv? . e4f50) (equal? . e4f4f) (eq? . e4f4e) (dynamic-wind . e4f4d) (div0-and-mod0 . e4f4c) (mod0 . e4f4b) (div0 . e4f4a) (div-and-mod . e4f49) (mod . e4f48) (div . e4f47) (denominator . e4f46) (cos . e4f45) (cons . e4f44) (complex? . e4f43) (char? . e4f42) (char>? . e4f41) (char>=? . e4f40) (char=? . e4f3f) (char<? . e4f3e) (char<=? . e4f3d) (char->integer . e4f3c) (ceiling . e4f3b) (call-with-values . e4f3a) (call/cc . e4f39) (call-with-current-continuation . e4f38) (cddddr . e4f37) (cdddar . e4f36) (cddadr . e4f35) (cddaar . e4f34) (cdaddr . e4f33) (cdadar . e4f32) (cdaadr . e4f31) (cdaaar . e4f30) (cadddr . e4f2f) (caddar . e4f2e) (cadadr . e4f2d) (cadaar . e4f2c) (caaddr . e4f2b) (caadar . e4f2a) (caaadr . e4f29) (caaaar . e4f28) (cdddr . e4f27) (cddar . e4f26) (cdadr . e4f25) (cdaar . e4f24) (caddr . e4f23) (cadar . e4f22) (caadr . e4f21) (caaar . e4f20) (cddr . e4f1f) (cdar . e4f1e) (cadr . e4f1d) (caar . e4f1c) (cdr . e4f1b) (car . e4f1a) (boolean? . e4f19) (boolean=? . e4f18) (atan . e4f17) (assertion-violation . e4f16) (asin . e4f15) (apply . e4f14) (append . e4f13) (angle . e4f12) (acos . e4f11) (abs . e4f10) (/ . e4f0f) (* . e4f0e) (- . e4f0d) (+ . e4f0c) (>= . e4f0b) (> . e4f0a) (= . e4f09) (<= . e4f08) (< . e4f07) (unquote-splicing . e4ed4) (unquote . e4ed3) (_ . e4ed2) (else . e4ed1) (=> . e4ed0) (... . e4ecf) (assert . e4ece) (cond . e4ec9) (let* . e4ec8) (let . e4ec7) (let*-values . e4ec6) (let-values . e4ec5) (identifier-syntax . e4ec4) (quasiquote . e4ec1) (syntax-rules . e4ec0) (case . e4ebb) (or . e4eb7) (and . e4eb6) (if . e4eb5) (letrec* . e4eb4) (letrec . e4eb3) (lambda . e4eb0) (quote . e4ead) (letrec-syntax . e4eab) (let-syntax . e4eaa) (set! . e4ea9) (begin . e4ea7) (define-syntax . e4ea5) (define . e4ea4)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e5195 '(rnrs lists) '(6) '() '() '() '((remove . e507e) (remv . e507d) (remp . e507c) (remq . e507b) (partition . e507a) (memv . e5079) (memq . e5078) (memp . e5077) (member . e5076) (exists . e5075) (for-all . e5074) (fold-right . e5073) (fold-left . e5072) (find . e5071) (filter . e5070) (cons* . e506f) (assv . e506e) (assq . e506d) (assp . e506c) (assoc . e506b)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e5196 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . e50d9) (call-with-input-file . e50d8) (write-char . e50d7) (write . e50d6) (with-output-to-file . e50d5) (with-input-from-file . e50d4) (read-char . e50d3) (read . e50d2) (peek-char . e50d1) (open-output-file . e50d0) (open-input-file . e50cf) (newline . e50ce) (display . e50cd) (close-output-port . e50cc) (close-input-port . e50cb) (eof-object? . e50ca) (eof-object . e50c9) (current-error-port . e50c8) (current-output-port . e50c7) (current-input-port . e50c6) (output-port? . e50c5) (input-port? . e50c4) (make-i/o-write-error . e4b72) (make-i/o-read-error . e4b5d) (make-i/o-port-error . e4c13) (make-i/o-invalid-position-error . e4b89) (make-i/o-filename-error . e4ba4) (make-i/o-file-protection-error . e4bbd) (make-i/o-file-is-read-only-error . e4bd2) (make-i/o-file-does-not-exist-error . e4bfc) (make-i/o-file-already-exists-error . e4be7) (make-i/o-error . e4b48) (i/o-write-error? . e4b74) (i/o-read-error? . e4b5f) (i/o-port-error? . e4c17) (i/o-invalid-position-error? . e4b8d) (i/o-filename-error? . e4ba8) (i/o-file-protection-error? . e4bbf) (i/o-file-is-read-only-error? . e4bd4) (i/o-file-does-not-exist-error? . e4bfe) (i/o-file-already-exists-error? . e4be9) (i/o-error? . e4b4a) (i/o-error-position . e4b8f) (i/o-error-port . e4c19) (i/o-error-filename . e4baa) (&i/o-port . e4f01) (&i/o-file-does-not-exist . e4f00) (&i/o-file-already-exists . e4eff) (&i/o-file-is-read-only . e4efe) (&i/o-file-protection . e4efd) (&i/o-filename . e4efc) (&i/o-invalid-position . e4efb) (&i/o-write . e4efa) (&i/o-read . e4ef9) (&i/o . e4ef8)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e5197 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . e509a) (utf32->string . e504f) (utf16->string . e504e) (utf8->string . e504d) (uint-list->bytevector . e504c) (u8-list->bytevector . e504b) (string->utf8 . e504a) (string->utf32 . e5049) (string->utf16 . e5048) (sint-list->bytevector . e5047) (native-endianness . e5046) (bytevector? . e5045) (bytevector=? . e5044) (bytevector-uint-set! . e5043) (bytevector-uint-ref . e5042) (bytevector-u8-set! . e5041) (bytevector-u8-ref . e5040) (bytevector-u64-set! . e503f) (bytevector-u64-ref . e503e) (bytevector-u64-native-set! . e503d) (bytevector-u64-native-ref . e503c) (bytevector-u32-set! . e503b) (bytevector-u32-ref . e503a) (bytevector-u32-native-set! . e5039) (bytevector-u32-native-ref . e5038) (bytevector-u16-set! . e5037) (bytevector-u16-ref . e5036) (bytevector-u16-native-set! . e5035) (bytevector-u16-native-ref . e5034) (bytevector-sint-set! . e5033) (bytevector-sint-ref . e5032) (bytevector-s8-set! . e5031) (bytevector-s8-ref . e5030) (bytevector-s64-set! . e502f) (bytevector-s64-ref . e502e) (bytevector-s64-native-set! . e502d) (bytevector-s64-native-ref . e502c) (bytevector-s32-set! . e502b) (bytevector-s32-ref . e502a) (bytevector-s32-native-set! . e5029) (bytevector-s32-native-ref . e5028) (bytevector-s16-set! . e5027) (bytevector-s16-ref . e5026) (bytevector-s16-native-set! . e5025) (bytevector-s16-native-ref . e5024) (bytevector-length . e5023) (bytevector-ieee-single-ref . e5022) (bytevector-ieee-single-set! . e5021) (bytevector-ieee-single-native-set! . e5020) (bytevector-ieee-single-native-ref . e501f) (bytevector-ieee-double-set! . e501e) (bytevector-ieee-double-ref . e501d) (bytevector-ieee-double-native-set! . e501c) (bytevector-ieee-double-native-ref . e501b) (bytevector-fill! . e501a) (bytevector-copy! . e5019) (bytevector-copy . e5018) (bytevector->uint-list . e5017) (bytevector->u8-list . e5016) (bytevector->sint-list . e5015) (endianness . e4ecd)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e5198 '(rnrs unicode) '(6) '() '() '() '((string-upcase . e5121) (string-titlecase . e5120) (string-normalize-nfkd . e511f) (string-normalize-nfkc . e511e) (string-normalize-nfd . e511d) (string-normalize-nfc . e511c) (string-foldcase . e511b) (string-downcase . e511a) (string-ci>? . e5119) (string-ci>=? . e5118) (string-ci=? . e5117) (string-ci<? . e5116) (string-ci<=? . e5115) (char-whitespace? . e5114) (char-upper-case? . e5113) (char-title-case? . e5112) (char-numeric? . e5111) (char-lower-case? . e5110) (char-general-category . e510f) (char-upcase . e510e) (char-titlecase . e510d) (char-foldcase . e510c) (char-downcase . e510b) (char-ci>? . e510a) (char-ci>=? . e5109) (char-ci=? . e5108) (char-ci<? . e5107) (char-ci<=? . e5106) (char-alphabetic? . e5105)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e5199 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . e5064) (raise-continuable . e5063) (raise . e5062) (guard . e4ed9) (else . e4ed1) (=> . e4ed0)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e519a '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . e4fb9) (bitwise-reverse-bit-field . e4fb8) (bitwise-length . e4fb7) (bitwise-if . e4fb6) (bitwise-first-bit-set . e4fb5) (bitwise-copy-bit-field . e4fb4) (bitwise-copy-bit . e4fb3) (bitwise-bit-set? . e4fb2) (bitwise-bit-field . e4fb1) (bitwise-bit-count . e4fb0) (bitwise-xor . e4faf) (bitwise-ior . e4fae) (bitwise-and . e4fad) (bitwise-not . e4fac) (bitwise-arithmetic-shift-right . e4fab) (bitwise-arithmetic-shift-left . e4faa) (bitwise-arithmetic-shift . e4fa9)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e519b '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . e4fe6) (fxxor . e4fe5) (fxrotate-bit-field . e4fe4) (fxreverse-bit-field . e4fe3) (fxpositive? . e4fe2) (fxodd? . e4fe1) (fxnot . e4fe0) (fxnegative? . e4fdf) (fxmod0 . e4fde) (fxmod . e4fdd) (fxmin . e4fdc) (fxmax . e4fdb) (fxlength . e4fda) (fxior . e4fd9) (fxif . e4fd8) (fxfirst-bit-set . e4fd7) (fxeven? . e4fd6) (fxdiv0-and-mod0 . e4fd5) (fxdiv0 . e4fd4) (fxdiv-and-mod . e4fd3) (fxdiv . e4fd2) (fxcopy-bit-field . e4fd1) (fxcopy-bit . e4fd0) (fxbit-set? . e4fcf) (fxbit-field . e4fce) (fxbit-count . e4fcd) (fxarithmetic-shift-right . e4fcc) (fxarithmetic-shift-left . e4fcb) (fxarithmetic-shift . e4fca) (fxand . e4fc9) (fx>? . e4fc8) (fx>=? . e4fc7) (fx=? . e4fc6) (fx<? . e4fc5) (fx<=? . e4fc4) (fx-/carry . e4fc3) (fx- . e4fc2) (fx+/carry . e4fc1) (fx+ . e4fc0) (fx*/carry . e4fbf) (fx* . e4fbe) (greatest-fixnum . e4fbd) (least-fixnum . e4fbc) (fixnum-width . e4fbb) (fixnum? . e4fba)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e519c '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . e4c73) (no-infinities-violation? . e4c5e) (make-no-nans-violation . e4c71) (make-no-infinities-violation . e4c5c) (real->flonum . e5014) (flzero? . e5013) (fltruncate . e5012) (fltan . e5011) (flsqrt . e5010) (flsin . e500f) (flround . e500e) (flpositive? . e500d) (flonum? . e500c) (flodd? . e500b) (flnumerator . e500a) (flnegative? . e5009) (flnan? . e5008) (flmod0 . e5007) (flmod . e5006) (flmin . e5005) (flmax . e5004) (fllog . e5003) (flinteger? . e5002) (flinfinite? . e5001) (flfloor . e5000) (flfinite? . e4fff) (flexpt . e4ffe) (flexp . e4ffd) (fleven? . e4ffc) (fldiv0-and-mod0 . e4ffb) (fldiv0 . e4ffa) (fldiv-and-mod . e4ff9) (fldiv . e4ff8) (fldenominator . e4ff7) (flcos . e4ff6) (flceiling . e4ff5) (flatan . e4ff4) (flasin . e4ff3) (flacos . e4ff2) (flabs . e4ff1) (fl>? . e4ff0) (fl>=? . e4fef) (fl=? . e4fee) (fl<? . e4fed) (fl<=? . e4fec) (fl/ . e4feb) (fl- . e4fea) (fl+ . e4fe9) (fl* . e4fe8) (fixnum->flonum . e4fe7) (&no-nans . e4f05) (&no-infinities . e4f04)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e519d '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . e50ee) (string-ci-hash . e50ed) (string-hash . e50ec) (equal-hash . e50eb) (hashtable-equivalence-function . e50ea) (make-hashtable . e50e9) (hashtable-hash-function . e50e8) (make-eqv-hashtable . e50e7) (make-eq-hashtable . e50e6) (hashtable? . e50e5) (hashtable-update! . e50e4) (hashtable-size . e50e3) (hashtable-set! . e50e2) (hashtable-ref . e50e1) (hashtable-mutable? . e50e0) (hashtable-keys . e50df) (hashtable-entries . e50de) (hashtable-delete! . e50dd) (hashtable-copy . e50dc) (hashtable-contains? . e50db) (hashtable-clear! . e50da)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e519e '(rnrs io ports) '(6) '() '() '() '((eof-object? . e50ca) (eof-object . e50c9) (current-error-port . e50c8) (current-output-port . e50c7) (current-input-port . e50c6) (output-port? . e50c5) (input-port? . e50c4) (utf-8-codec . e50c3) (utf-16-codec . e50c2) (transcoder-error-handling-mode . e50c1) (transcoder-eol-style . e50c0) (transcoder-codec . e50bf) (transcoded-port . e50be) (textual-port? . e50bd) (string->bytevector . e50bc) (standard-output-port . e50bb) (standard-input-port . e50ba) (standard-error-port . e50b9) (set-port-position! . e50b8) (put-u8 . e50b7) (put-string . e50b6) (put-datum . e50b5) (put-char . e50b4) (put-bytevector . e50b3) (port? . e50b2) (port-transcoder . e50b1) (port-position . e50b0) (port-has-set-port-position!? . e50af) (port-has-port-position? . e50ae) (port-eof? . e50ad) (output-port-buffer-mode . e50ac) (open-string-output-port . e50ab) (open-string-input-port . e50aa) (open-file-output-port . e50a9) (open-file-input/output-port . e50a8) (open-file-input-port . e50a7) (open-bytevector-output-port . e50a6) (open-bytevector-input-port . e50a5) (native-transcoder . e50a4) (native-eol-style . e50a3) (make-transcoder . e50a2) (latin-1-codec . e50a1) (make-i/o-write-error . e4b72) (make-i/o-read-error . e4b5d) (make-i/o-port-error . e4c13) (make-i/o-invalid-position-error . e4b89) (make-i/o-filename-error . e4ba4) (make-i/o-file-protection-error . e4bbd) (make-i/o-file-is-read-only-error . e4bd2) (make-i/o-file-does-not-exist-error . e4bfc) (make-i/o-file-already-exists-error . e4be7) (make-i/o-error . e4b48) (make-i/o-encoding-error . e4c43) (make-i/o-decoding-error . e4c2c) (make-custom-textual-output-port . e50a0) (make-custom-textual-input/output-port . e509f) (make-custom-textual-input-port . e509e) (make-custom-binary-output-port . e509d) (make-custom-binary-input/output-port . e509c) (make-custom-binary-input-port . e509b) (lookahead-u8 . e5099) (lookahead-char . e5098) (i/o-write-error? . e4b74) (i/o-read-error? . e4b5f) (i/o-port-error? . e4c17) (i/o-invalid-position-error? . e4b8d) (i/o-filename-error? . e4ba8) (i/o-file-protection-error? . e4bbf) (i/o-file-is-read-only-error? . e4bd4) (i/o-file-does-not-exist-error? . e4bfe) (i/o-file-already-exists-error? . e4be9) (i/o-error? . e4b4a) (i/o-error-position . e4b8f) (i/o-error-port . e4c19) (i/o-error-filename . e4baa) (i/o-encoding-error? . e4c47) (i/o-encoding-error-char . e4c49) (i/o-decoding-error? . e4c2e) (get-u8 . e5097) (get-string-n! . e5096) (get-string-n . e5095) (get-string-all . e5094) (get-line . e5093) (get-datum . e5092) (get-char . e5091) (get-bytevector-some . e5090) (get-bytevector-n! . e508f) (get-bytevector-n . e508e) (get-bytevector-all . e508d) (flush-output-port . e508c) (close-port . e508b) (call-with-string-output-port . e506a) (call-with-port . e5069) (call-with-bytevector-output-port . e5068) (bytevector->string . e5067) (buffer-mode? . e5066) (binary-port? . e5065) (&i/o-encoding . e4f03) (&i/o-decoding . e4f02) (&i/o-port . e4f01) (&i/o-file-does-not-exist . e4f00) (&i/o-file-already-exists . e4eff) (&i/o-file-is-read-only . e4efe) (&i/o-file-protection . e4efd) (&i/o-filename . e4efc) (&i/o-invalid-position . e4efb) (&i/o-write . e4efa) (&i/o-read . e4ef9) (&i/o . e4ef8) (error-handling-mode . e4edd) (file-options . e4edc) (buffer-mode . e4edb) (eol-style . e4eda)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e519f '(rnrs enums) '(6) '() '() '() '((make-enumeration . e5061) (enum-set=? . e5060) (enum-set-universe . e505f) (enum-set-union . e505e) (enum-set-subset? . e505d) (enum-set-projection . e505c) (enum-set-member? . e505b) (enum-set-intersection . e505a) (enum-set-indexer . e5059) (enum-set-difference . e5058) (enum-set-constructor . e5057) (enum-set-complement . e5056) (enum-set->list . e5055) (define-enumeration . e4ee8)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e51a0 '(rnrs conditions) '(6) '() '() '() '((who-condition? . e4abe) (warning? . e4a36) (violation? . e4a75) (undefined-violation? . e4b35) (syntax-violation? . e4b1c) (syntax-violation-subform . e4b20) (syntax-violation-form . e4b1e) (syntax-violation . e2fb0) (simple-conditions . e5054) (serious-condition? . e4a4b) (non-continuable-violation? . e4ad5) (message-condition? . e4a1f) (make-who-condition . e4aba) (make-warning . e4a34) (make-violation . e4a73) (make-undefined-violation . e4b33) (make-syntax-violation . e4b16) (make-serious-condition . e4a49) (make-non-continuable-violation . e4ad3) (make-message-condition . e4a1b) (make-lexical-violation . e4afd) (make-irritants-condition . e4a9f) (make-implementation-restriction-violation . e4ae8) (make-error . e4a5e) (make-assertion-violation . e4a88) (lexical-violation? . e4aff) (irritants-condition? . e4aa3) (implementation-restriction-violation? . e4aea) (error? . e4a60) (condition-who . e4ac0) (condition-predicate . e5053) (condition-message . e4a21) (condition-irritants . e4aa5) (condition-accessor . e5052) (condition . e5051) (assertion-violation? . e4a8a) (condition? . e5050) (&undefined . e4ef7) (&syntax . e4ef6) (&lexical . e4ef5) (&implementation-restriction . e4ef4) (&non-continuable . e4ef3) (&who . e4ef2) (&irritants . e4ef1) (&assertion . e4ef0) (&violation . e4eef) (&error . e4eee) (&serious . e4eed) (&warning . e4eec) (&message . e4eeb) (&condition . e4eea) (define-condition-type . e4ee9)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e51a1 '(rnrs records inspection) '(6) '() '() '() '((record? . e50fd) (record-type-uid . e50fc) (record-type-sealed? . e50fb) (record-type-parent . e50fa) (record-type-opaque? . e50f9) (record-type-name . e50f8) (record-type-generative? . e50f7) (record-type-field-names . e50f6) (record-rtd . e50f5) (record-field-mutable? . e50f4)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e51a2 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . e5104) (record-predicate . e5103) (record-mutator . e5102) (record-constructor . e5101) (record-accessor . e5100) (make-record-type-descriptor . e50ff) (make-record-constructor-descriptor . e50fe)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e51a3 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . e4ee7) (parent-rtd . e4ee6) (nongenerative . e4ee5) (opaque . e4ee4) (sealed . e4ee3) (protocol . e4ee2) (parent . e4ee1) (immutable . e4ee0) (mutable . e4edf) (fields . e4ede) (record-constructor-descriptor . e4ebd) (record-type-descriptor . e4ebc)) '() values values '#f '#f '#t '#f) (e2adf@e297e@install-library 'e51a4 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . e4c77) (&no-nans-rtd . e4c75) (&no-infinities-rcd . e4c62) (&no-infinities-rtd . e4c60) (&i/o-encoding-rcd . e4c4d) (&i/o-encoding-rtd . e4c4b) (&i/o-decoding-rcd . e4c32) (&i/o-decoding-rtd . e4c30) (&i/o-port-rcd . e4c1d) (&i/o-port-rtd . e4c1b) (&i/o-file-does-not-exist-rcd . e4c02) (&i/o-file-does-not-exist-rtd . e4c00) (&i/o-file-already-exists-rcd . e4bed) (&i/o-file-already-exists-rtd . e4beb) (&i/o-file-is-read-only-rcd . e4bd8) (&i/o-file-is-read-only-rtd . e4bd6) (&i/o-file-protection-rcd . e4bc3) (&i/o-file-protection-rtd . e4bc1) (&i/o-filename-rcd . e4bae) (&i/o-filename-rtd . e4bac) (&i/o-invalid-position-rcd . e4b93) (&i/o-invalid-position-rtd . e4b91) (&i/o-write-rcd . e4b78) (&i/o-write-rtd . e4b76) (&i/o-read-rcd . e4b63) (&i/o-read-rtd . e4b61) (&i/o-rcd . e4b4e) (&i/o-rtd . e4b4c) (&undefined-rcd . e4b39) (&undefined-rtd . e4b37) (&syntax-rcd . e4b24) (&syntax-rtd . e4b22) (&lexical-rcd . e4b03) (&lexical-rtd . e4b01) (&implementation-restriction-rcd . e4aee) (&implementation-restriction-rtd . e4aec) (&non-continuable-rcd . e4ad9) (&non-continuable-rtd . e4ad7) (&who-rcd . e4ac4) (&who-rtd . e4ac2) (&irritants-rcd . e4aa9) (&irritants-rtd . e4aa7) (&assertion-rcd . e4a8e) (&assertion-rtd . e4a8c) (&violation-rcd . e4a79) (&violation-rtd . e4a77) (&error-rcd . e4a64) (&error-rtd . e4a62) (&serious-rcd . e4a4f) (&serious-rtd . e4a4d) (&warning-rcd . e4a3a) (&warning-rtd . e4a38) (&message-rcd . e4a25) (&message-rtd . e4a23) (&condition-rcd . e49c6) (&condition-rtd . e49c4) (syntax-error . e2fac) (syntax-dispatch . e2ec7) (pretty-print . e5184) (eval-core . e5183) (set-symbol-value! . e5182) (symbol-value . e5181) (gensym . e5180) (void . e517f) (load . e4d84) (interaction-environment . e2fbc) (char-ready? . e517e) (regexp? . e517d) (read-line . e517c) (ungensym . e517b) (alist->eq-hash-table . e517a) (assoc-ref . e5179) (print . e5178) (format . e5177) (host-os . e5176) (library-path . e295d) (standard-library-path . e5175) (file-newer? . e5174) (stat-mtime . e5173) (write-to-file . e5172) (file->list . e5171) (file->string . e5170) (digit->integer . e516f) (call-with-string-input-port . e516e) (call-with-string-io . e516d) (string-split . e516c) (bytevector-for-each . e516b) (string->regexp . e516a) (rxmatch . e5169) (regexp-replace-all . e5168) (hashtable-for-each . e5167) (call-process . e5166) (local-tz-offset . e5165) (microseconds . e5164) (readdir . e5163) (set-current-directory! . e5162) (expand-path . e5161) (current-directory . e5160) (%spawn . e515f) (%waitpid . e515e) (%ffi-supported? . e515d) (%ffi-pointer-ref . e515c) (%ffi-pointer->string . e515b) (%ffi-call->string-or-zero . e515a) (%ffi-call->double . e5159) (%ffi-call->void* . e5158) (%ffi-call->void . e5157) (%ffi-call->int . e5156) (%ffi-lookup . e5155) (%ffi-open . e5154) (%fork . e5153) (%pipe . e5152) (p . e5151) (open-output-string . e5150) (get-output-string . e514f) (get-environment-variables . e514e) (get-environment-variable . e514d) (get-timeofday . e514c) (get-command-line . e514b) (sys-display . e514a) (whereis . e5149) (register . e5148) (vm-join! . e5147) (vm-set-value! . e5146) (vm? . e5145) (main-vm? . e5144) (vm-self . e5143) (vm-start! . e5142) (make-vm . e5141) (mutex-try-lock! . e5140) (mutex-unlock! . e513f) (mutex-lock! . e513e) (mutex? . e513d) (make-mutex . e513c) (condition-variable-notify-all! . e513b) (condition-variable-notify! . e513a) (condition-variable-wait! . e5139) (make-condition-variable . e5138) (mosh-executable-path . e5137) (make-file-options . e5136) (source-info . e5135) (make-compiler-instruction . e5134) (make-instruction . e5133) (set-source-info! . e5132) (bignum? . e5131) (fast-equal? . e5130) (fasl-read . e512f) (fasl-write . e512e) (time-usage . e512d) (os-constant . e512c) (make-parameter . e2790) (socket-port . e512b) (socket-shutdown . e512a) (socket-close . e5129) (socket-send . e5128) (socket-recv! . e5127) (socket-recv . e5126) (make-server-socket . e5125) (make-client-socket . e5124) (socket-accept . e5123) (socket? . e5122) (string-upcase . e5121) (string-titlecase . e5120) (string-normalize-nfkd . e511f) (string-normalize-nfkc . e511e) (string-normalize-nfd . e511d) (string-normalize-nfc . e511c) (string-foldcase . e511b) (string-downcase . e511a) (string-ci>? . e5119) (string-ci>=? . e5118) (string-ci=? . e5117) (string-ci<? . e5116) (string-ci<=? . e5115) (char-whitespace? . e5114) (char-upper-case? . e5113) (char-title-case? . e5112) (char-numeric? . e5111) (char-lower-case? . e5110) (char-general-category . e510f) (char-upcase . e510e) (char-titlecase . e510d) (char-foldcase . e510c) (char-downcase . e510b) (char-ci>? . e510a) (char-ci>=? . e5109) (char-ci=? . e5108) (char-ci<? . e5107) (char-ci<=? . e5106) (char-alphabetic? . e5105) (make-variable-transformer . e2cf4) (identifier? . e2fb2) (generate-temporaries . e2f9e) (free-identifier=? . e2fa0) (syntax->datum . e2fb6) (datum->syntax . e2fb4) (bound-identifier=? . e2fa2) (record-type-descriptor? . e5104) (record-predicate . e5103) (record-mutator . e5102) (record-constructor . e5101) (record-accessor . e5100) (make-record-type-descriptor . e50ff) (make-record-constructor-descriptor . e50fe) (record? . e50fd) (record-type-uid . e50fc) (record-type-sealed? . e50fb) (record-type-parent . e50fa) (record-type-opaque? . e50f9) (record-type-name . e50f8) (record-type-generative? . e50f7) (record-type-field-names . e50f6) (record-rtd . e50f5) (record-field-mutable? . e50f4) (delete-file . e50f3) (file-exists? . e50f2) (vector-sort! . e50f1) (vector-sort . e50f0) (list-sort . e50ef) (symbol-hash . e50ee) (string-ci-hash . e50ed) (string-hash . e50ec) (equal-hash . e50eb) (hashtable-equivalence-function . e50ea) (make-hashtable . e50e9) (hashtable-hash-function . e50e8) (make-eqv-hashtable . e50e7) (make-eq-hashtable . e50e6) (hashtable? . e50e5) (hashtable-update! . e50e4) (hashtable-size . e50e3) (hashtable-set! . e50e2) (hashtable-ref . e50e1) (hashtable-mutable? . e50e0) (hashtable-keys . e50df) (hashtable-entries . e50de) (hashtable-delete! . e50dd) (hashtable-copy . e50dc) (hashtable-contains? . e50db) (hashtable-clear! . e50da) (call-with-output-file . e50d9) (call-with-input-file . e50d8) (write-char . e50d7) (write . e50d6) (with-output-to-file . e50d5) (with-input-from-file . e50d4) (read-char . e50d3) (read . e50d2) (peek-char . e50d1) (open-output-file . e50d0) (open-input-file . e50cf) (newline . e50ce) (display . e50cd) (close-output-port . e50cc) (close-input-port . e50cb) (eof-object? . e50ca) (eof-object . e50c9) (current-error-port . e50c8) (current-output-port . e50c7) (current-input-port . e50c6) (output-port? . e50c5) (input-port? . e50c4) (utf-8-codec . e50c3) (utf-16-codec . e50c2) (transcoder-error-handling-mode . e50c1) (transcoder-eol-style . e50c0) (transcoder-codec . e50bf) (transcoded-port . e50be) (textual-port? . e50bd) (string->bytevector . e50bc) (standard-output-port . e50bb) (standard-input-port . e50ba) (standard-error-port . e50b9) (set-port-position! . e50b8) (put-u8 . e50b7) (put-string . e50b6) (put-datum . e50b5) (put-char . e50b4) (put-bytevector . e50b3) (port? . e50b2) (port-transcoder . e50b1) (port-position . e50b0) (port-has-set-port-position!? . e50af) (port-has-port-position? . e50ae) (port-eof? . e50ad) (output-port-buffer-mode . e50ac) (open-string-output-port . e50ab) (open-string-input-port . e50aa) (open-file-output-port . e50a9) (open-file-input/output-port . e50a8) (open-file-input-port . e50a7) (open-bytevector-output-port . e50a6) (open-bytevector-input-port . e50a5) (native-transcoder . e50a4) (native-eol-style . e50a3) (make-transcoder . e50a2) (latin-1-codec . e50a1) (make-i/o-write-error . e4b72) (make-i/o-read-error . e4b5d) (make-i/o-port-error . e4c13) (make-i/o-invalid-position-error . e4b89) (make-i/o-filename-error . e4ba4) (make-i/o-file-protection-error . e4bbd) (make-i/o-file-is-read-only-error . e4bd2) (make-i/o-file-does-not-exist-error . e4bfc) (make-i/o-file-already-exists-error . e4be7) (make-i/o-error . e4b48) (make-i/o-encoding-error . e4c43) (make-i/o-decoding-error . e4c2c) (make-custom-textual-output-port . e50a0) (make-custom-textual-input/output-port . e509f) (make-custom-textual-input-port . e509e) (make-custom-binary-output-port . e509d) (make-custom-binary-input/output-port . e509c) (make-custom-binary-input-port . e509b) (make-bytevector . e509a) (lookahead-u8 . e5099) (lookahead-char . e5098) (i/o-write-error? . e4b74) (i/o-read-error? . e4b5f) (i/o-port-error? . e4c17) (i/o-invalid-position-error? . e4b8d) (i/o-filename-error? . e4ba8) (i/o-file-protection-error? . e4bbf) (i/o-file-is-read-only-error? . e4bd4) (i/o-file-does-not-exist-error? . e4bfe) (i/o-file-already-exists-error? . e4be9) (i/o-error? . e4b4a) (i/o-error-position . e4b8f) (i/o-error-port . e4c19) (i/o-error-filename . e4baa) (i/o-encoding-error? . e4c47) (i/o-encoding-error-char . e4c49) (i/o-decoding-error? . e4c2e) (get-u8 . e5097) (get-string-n! . e5096) (get-string-n . e5095) (get-string-all . e5094) (get-line . e5093) (get-datum . e5092) (get-char . e5091) (get-bytevector-some . e5090) (get-bytevector-n! . e508f) (get-bytevector-n . e508e) (get-bytevector-all . e508d) (flush-output-port . e508c) (close-port . e508b) (scheme-report-environment . e2f8c) (quotient . e508a) (null-environment . e2f8a) (remainder . e5089) (modulo . e5088) (inexact->exact . e5087) (force . e5086) (exact->inexact . e5085) (make-promise . e5084) (exit . e5083) (command-line . e4d7e) (string-fill! . e5082) (string-set! . e5081) (set-cdr! . e5080) (set-car! . e507f) (remove . e507e) (remv . e507d) (remp . e507c) (remq . e507b) (partition . e507a) (memv . e5079) (memq . e5078) (memp . e5077) (member . e5076) (exists . e5075) (for-all . e5074) (fold-right . e5073) (fold-left . e5072) (find . e5071) (filter . e5070) (cons* . e506f) (assv . e506e) (assq . e506d) (assp . e506c) (assoc . e506b) (call-with-string-output-port . e506a) (call-with-port . e5069) (call-with-bytevector-output-port . e5068) (bytevector->string . e5067) (buffer-mode? . e5066) (binary-port? . e5065) (with-exception-handler . e5064) (raise-continuable . e5063) (raise . e5062) (eval . e2f90) (environment . e2f88) (make-enumeration . e5061) (enum-set=? . e5060) (enum-set-universe . e505f) (enum-set-union . e505e) (enum-set-subset? . e505d) (enum-set-projection . e505c) (enum-set-member? . e505b) (enum-set-intersection . e505a) (enum-set-indexer . e5059) (enum-set-difference . e5058) (enum-set-constructor . e5057) (enum-set-complement . e5056) (enum-set->list . e5055) (who-condition? . e4abe) (warning? . e4a36) (violation? . e4a75) (undefined-violation? . e4b35) (syntax-violation? . e4b1c) (syntax-violation-subform . e4b20) (syntax-violation-form . e4b1e) (syntax-violation . e2fb0) (simple-conditions . e5054) (serious-condition? . e4a4b) (non-continuable-violation? . e4ad5) (message-condition? . e4a1f) (make-who-condition . e4aba) (make-warning . e4a34) (make-violation . e4a73) (make-undefined-violation . e4b33) (make-syntax-violation . e4b16) (make-serious-condition . e4a49) (make-non-continuable-violation . e4ad3) (make-message-condition . e4a1b) (make-lexical-violation . e4afd) (make-irritants-condition . e4a9f) (make-implementation-restriction-violation . e4ae8) (make-error . e4a5e) (make-assertion-violation . e4a88) (lexical-violation? . e4aff) (irritants-condition? . e4aa3) (implementation-restriction-violation? . e4aea) (error? . e4a60) (condition-who . e4ac0) (condition-predicate . e5053) (condition-message . e4a21) (condition-irritants . e4aa5) (condition-accessor . e5052) (condition . e5051) (assertion-violation? . e4a8a) (condition? . e5050) (utf32->string . e504f) (utf16->string . e504e) (utf8->string . e504d) (uint-list->bytevector . e504c) (u8-list->bytevector . e504b) (string->utf8 . e504a) (string->utf32 . e5049) (string->utf16 . e5048) (sint-list->bytevector . e5047) (native-endianness . e5046) (bytevector? . e5045) (bytevector=? . e5044) (bytevector-uint-set! . e5043) (bytevector-uint-ref . e5042) (bytevector-u8-set! . e5041) (bytevector-u8-ref . e5040) (bytevector-u64-set! . e503f) (bytevector-u64-ref . e503e) (bytevector-u64-native-set! . e503d) (bytevector-u64-native-ref . e503c) (bytevector-u32-set! . e503b) (bytevector-u32-ref . e503a) (bytevector-u32-native-set! . e5039) (bytevector-u32-native-ref . e5038) (bytevector-u16-set! . e5037) (bytevector-u16-ref . e5036) (bytevector-u16-native-set! . e5035) (bytevector-u16-native-ref . e5034) (bytevector-sint-set! . e5033) (bytevector-sint-ref . e5032) (bytevector-s8-set! . e5031) (bytevector-s8-ref . e5030) (bytevector-s64-set! . e502f) (bytevector-s64-ref . e502e) (bytevector-s64-native-set! . e502d) (bytevector-s64-native-ref . e502c) (bytevector-s32-set! . e502b) (bytevector-s32-ref . e502a) (bytevector-s32-native-set! . e5029) (bytevector-s32-native-ref . e5028) (bytevector-s16-set! . e5027) (bytevector-s16-ref . e5026) (bytevector-s16-native-set! . e5025) (bytevector-s16-native-ref . e5024) (bytevector-length . e5023) (bytevector-ieee-single-ref . e5022) (bytevector-ieee-single-set! . e5021) (bytevector-ieee-single-native-set! . e5020) (bytevector-ieee-single-native-ref . e501f) (bytevector-ieee-double-set! . e501e) (bytevector-ieee-double-ref . e501d) (bytevector-ieee-double-native-set! . e501c) (bytevector-ieee-double-native-ref . e501b) (bytevector-fill! . e501a) (bytevector-copy! . e5019) (bytevector-copy . e5018) (bytevector->uint-list . e5017) (bytevector->u8-list . e5016) (bytevector->sint-list . e5015) (no-nans-violation? . e4c73) (no-infinities-violation? . e4c5e) (make-no-nans-violation . e4c71) (make-no-infinities-violation . e4c5c) (real->flonum . e5014) (flzero? . e5013) (fltruncate . e5012) (fltan . e5011) (flsqrt . e5010) (flsin . e500f) (flround . e500e) (flpositive? . e500d) (flonum? . e500c) (flodd? . e500b) (flnumerator . e500a) (flnegative? . e5009) (flnan? . e5008) (flmod0 . e5007) (flmod . e5006) (flmin . e5005) (flmax . e5004) (fllog . e5003) (flinteger? . e5002) (flinfinite? . e5001) (flfloor . e5000) (flfinite? . e4fff) (flexpt . e4ffe) (flexp . e4ffd) (fleven? . e4ffc) (fldiv0-and-mod0 . e4ffb) (fldiv0 . e4ffa) (fldiv-and-mod . e4ff9) (fldiv . e4ff8) (fldenominator . e4ff7) (flcos . e4ff6) (flceiling . e4ff5) (flatan . e4ff4) (flasin . e4ff3) (flacos . e4ff2) (flabs . e4ff1) (fl>? . e4ff0) (fl>=? . e4fef) (fl=? . e4fee) (fl<? . e4fed) (fl<=? . e4fec) (fl/ . e4feb) (fl- . e4fea) (fl+ . e4fe9) (fl* . e4fe8) (fixnum->flonum . e4fe7) (fxzero? . e4fe6) (fxxor . e4fe5) (fxrotate-bit-field . e4fe4) (fxreverse-bit-field . e4fe3) (fxpositive? . e4fe2) (fxodd? . e4fe1) (fxnot . e4fe0) (fxnegative? . e4fdf) (fxmod0 . e4fde) (fxmod . e4fdd) (fxmin . e4fdc) (fxmax . e4fdb) (fxlength . e4fda) (fxior . e4fd9) (fxif . e4fd8) (fxfirst-bit-set . e4fd7) (fxeven? . e4fd6) (fxdiv0-and-mod0 . e4fd5) (fxdiv0 . e4fd4) (fxdiv-and-mod . e4fd3) (fxdiv . e4fd2) (fxcopy-bit-field . e4fd1) (fxcopy-bit . e4fd0) (fxbit-set? . e4fcf) (fxbit-field . e4fce) (fxbit-count . e4fcd) (fxarithmetic-shift-right . e4fcc) (fxarithmetic-shift-left . e4fcb) (fxarithmetic-shift . e4fca) (fxand . e4fc9) (fx>? . e4fc8) (fx>=? . e4fc7) (fx=? . e4fc6) (fx<? . e4fc5) (fx<=? . e4fc4) (fx-/carry . e4fc3) (fx- . e4fc2) (fx+/carry . e4fc1) (fx+ . e4fc0) (fx*/carry . e4fbf) (fx* . e4fbe) (greatest-fixnum . e4fbd) (least-fixnum . e4fbc) (fixnum-width . e4fbb) (fixnum? . e4fba) (bitwise-rotate-bit-field . e4fb9) (bitwise-reverse-bit-field . e4fb8) (bitwise-length . e4fb7) (bitwise-if . e4fb6) (bitwise-first-bit-set . e4fb5) (bitwise-copy-bit-field . e4fb4) (bitwise-copy-bit . e4fb3) (bitwise-bit-set? . e4fb2) (bitwise-bit-field . e4fb1) (bitwise-bit-count . e4fb0) (bitwise-xor . e4faf) (bitwise-ior . e4fae) (bitwise-and . e4fad) (bitwise-not . e4fac) (bitwise-arithmetic-shift-right . e4fab) (bitwise-arithmetic-shift-left . e4faa) (bitwise-arithmetic-shift . e4fa9) (zero? . e4fa8) (vector? . e4fa7) (vector-set! . e4fa6) (vector-ref . e4fa5) (vector-map . e4fa4) (vector-length . e4fa3) (vector-for-each . e4fa2) (vector-fill! . e4fa1) (vector->list . e4fa0) (vector . e4f9f) (values . e4f9e) (truncate . e4f9d) (tan . e4f9c) (symbol? . e4f9b) (symbol=? . e4f9a) (symbol->string . e4f99) (substring . e4f98) (string? . e4f97) (string>? . e4f96) (string>=? . e4f95) (string=? . e4f94) (string<? . e4f93) (string<=? . e4f92) (string-ref . e4f91) (string-length . e4f90) (string-for-each . e4f8f) (string-copy . e4f8e) (string-append . e4f8d) (string->symbol . e4f8c) (string->number . e4f8b) (string->list . e4f8a) (string . e4f89) (sqrt . e4f88) (sin . e4f87) (round . e4f86) (reverse . e4f85) (real? . e4f84) (real-valued? . e4f83) (real-part . e4f82) (rationalize . e4f81) (rational? . e4f80) (rational-valued? . e4f7f) (procedure? . e4f7e) (positive? . e4f7d) (pair? . e4f7c) (odd? . e4f7b) (numerator . e4f7a) (number? . e4f79) (number->string . e4f78) (null? . e4f77) (not . e4f76) (negative? . e4f75) (nan? . e4f74) (min . e4f73) (max . e4f72) (map . e4f71) (make-vector . e4f70) (make-string . e4f6f) (make-rectangular . e4f6e) (make-polar . e4f6d) (magnitude . e4f6c) (log . e4f6b) (list? . e4f6a) (list-tail . e4f69) (list-ref . e4f68) (list->vector . e4f67) (list->string . e4f66) (list . e4f65) (length . e4f64) (lcm . e4f63) (integer? . e4f62) (integer-valued? . e4f61) (integer->char . e4f60) (infinite? . e4f5f) (inexact? . e4f5e) (inexact . e4f5d) (imag-part . e4f5c) (gcd . e4f5b) (for-each . e4f5a) (floor . e4f59) (finite? . e4f58) (expt . e4f57) (exp . e4f56) (exact? . e4f55) (exact-integer-sqrt . e4f54) (exact . e4f53) (even? . e4f52) (error . e4f51) (eqv? . e4f50) (equal? . e4f4f) (eq? . e4f4e) (dynamic-wind . e4f4d) (div0-and-mod0 . e4f4c) (mod0 . e4f4b) (div0 . e4f4a) (div-and-mod . e4f49) (mod . e4f48) (div . e4f47) (denominator . e4f46) (cos . e4f45) (cons . e4f44) (complex? . e4f43) (char? . e4f42) (char>? . e4f41) (char>=? . e4f40) (char=? . e4f3f) (char<? . e4f3e) (char<=? . e4f3d) (char->integer . e4f3c) (ceiling . e4f3b) (call-with-values . e4f3a) (call/cc . e4f39) (call-with-current-continuation . e4f38) (cddddr . e4f37) (cdddar . e4f36) (cddadr . e4f35) (cddaar . e4f34) (cdaddr . e4f33) (cdadar . e4f32) (cdaadr . e4f31) (cdaaar . e4f30) (cadddr . e4f2f) (caddar . e4f2e) (cadadr . e4f2d) (cadaar . e4f2c) (caaddr . e4f2b) (caadar . e4f2a) (caaadr . e4f29) (caaaar . e4f28) (cdddr . e4f27) (cddar . e4f26) (cdadr . e4f25) (cdaar . e4f24) (caddr . e4f23) (cadar . e4f22) (caadr . e4f21) (caaar . e4f20) (cddr . e4f1f) (cdar . e4f1e) (cadr . e4f1d) (caar . e4f1c) (cdr . e4f1b) (car . e4f1a) (boolean? . e4f19) (boolean=? . e4f18) (atan . e4f17) (assertion-violation . e4f16) (assertion-error . e2faa) (asin . e4f15) (apply . e4f14) (append . e4f13) (angle . e4f12) (acos . e4f11) (abs . e4f10) (/ . e4f0f) (* . e4f0e) (- . e4f0d) (+ . e4f0c) (>= . e4f0b) (> . e4f0a) (= . e4f09) (<= . e4f08) (< . e4f07) (library . e4f06) (&no-nans . e4f05) (&no-infinities . e4f04) (&i/o-encoding . e4f03) (&i/o-decoding . e4f02) (&i/o-port . e4f01) (&i/o-file-does-not-exist . e4f00) (&i/o-file-already-exists . e4eff) (&i/o-file-is-read-only . e4efe) (&i/o-file-protection . e4efd) (&i/o-filename . e4efc) (&i/o-invalid-position . e4efb) (&i/o-write . e4efa) (&i/o-read . e4ef9) (&i/o . e4ef8) (&undefined . e4ef7) (&syntax . e4ef6) (&lexical . e4ef5) (&implementation-restriction . e4ef4) (&non-continuable . e4ef3) (&who . e4ef2) (&irritants . e4ef1) (&assertion . e4ef0) (&violation . e4eef) (&error . e4eee) (&serious . e4eed) (&warning . e4eec) (&message . e4eeb) (&condition . e4eea) (define-condition-type . e4ee9) (define-enumeration . e4ee8) (define-record-type . e4ee7) (parent-rtd . e4ee6) (nongenerative . e4ee5) (opaque . e4ee4) (sealed . e4ee3) (protocol . e4ee2) (parent . e4ee1) (immutable . e4ee0) (mutable . e4edf) (fields . e4ede) (error-handling-mode . e4edd) (file-options . e4edc) (buffer-mode . e4edb) (eol-style . e4eda) (guard . e4ed9) (trace-define . e4ed8) (trace-lambda . e4ed7) (unsyntax-splicing . e4ed6) (unsyntax . e4ed5) (unquote-splicing . e4ed4) (unquote . e4ed3) (_ . e4ed2) (else . e4ed1) (=> . e4ed0) (... . e4ecf) (assert . e4ece) (endianness . e4ecd) (delay . e4ecc) (time . e4ecb) (do . e4eca) (cond . e4ec9) (let* . e4ec8) (let . e4ec7) (let*-values . e4ec6) (let-values . e4ec5) (identifier-syntax . e4ec4) (with-syntax . e4ec3) (quasisyntax . e4ec2) (quasiquote . e4ec1) (syntax-rules . e4ec0) (include . e4ebf) (define-struct . e4ebe) (record-constructor-descriptor . e4ebd) (record-type-descriptor . e4ebc) (case . e4ebb) (parameterize . e4eba) (unless . e4eb9) (when . e4eb8) (or . e4eb7) (and . e4eb6) (if . e4eb5) (letrec* . e4eb4) (letrec . e4eb3) (type-descriptor . e4eb2) (case-lambda . e4eb1) (lambda . e4eb0) (syntax . e4eaf) (syntax-case . e4eae) (quote . e4ead) (foreign-call . e4eac) (letrec-syntax . e4eab) (let-syntax . e4eaa) (set! . e4ea9) (import . e4ea8) (begin . e4ea7) (module . e4ea6) (define-syntax . e4ea5) (define . e4ea4)) '((e4c77 core-prim . &no-nans-rcd) (e4c75 core-prim . &no-nans-rtd) (e4c62 core-prim . &no-infinities-rcd) (e4c60 core-prim . &no-infinities-rtd) (e4c4d core-prim . &i/o-encoding-rcd) (e4c4b core-prim . &i/o-encoding-rtd) (e4c32 core-prim . &i/o-decoding-rcd) (e4c30 core-prim . &i/o-decoding-rtd) (e4c1d core-prim . &i/o-port-rcd) (e4c1b core-prim . &i/o-port-rtd) (e4c02 core-prim . &i/o-file-does-not-exist-rcd) (e4c00 core-prim . &i/o-file-does-not-exist-rtd) (e4bed core-prim . &i/o-file-already-exists-rcd) (e4beb core-prim . &i/o-file-already-exists-rtd) (e4bd8 core-prim . &i/o-file-is-read-only-rcd) (e4bd6 core-prim . &i/o-file-is-read-only-rtd) (e4bc3 core-prim . &i/o-file-protection-rcd) (e4bc1 core-prim . &i/o-file-protection-rtd) (e4bae core-prim . &i/o-filename-rcd) (e4bac core-prim . &i/o-filename-rtd) (e4b93 core-prim . &i/o-invalid-position-rcd) (e4b91 core-prim . &i/o-invalid-position-rtd) (e4b78 core-prim . &i/o-write-rcd) (e4b76 core-prim . &i/o-write-rtd) (e4b63 core-prim . &i/o-read-rcd) (e4b61 core-prim . &i/o-read-rtd) (e4b4e core-prim . &i/o-rcd) (e4b4c core-prim . &i/o-rtd) (e4b39 core-prim . &undefined-rcd) (e4b37 core-prim . &undefined-rtd) (e4b24 core-prim . &syntax-rcd) (e4b22 core-prim . &syntax-rtd) (e4b03 core-prim . &lexical-rcd) (e4b01 core-prim . &lexical-rtd) (e4aee core-prim . &implementation-restriction-rcd) (e4aec core-prim . &implementation-restriction-rtd) (e4ad9 core-prim . &non-continuable-rcd) (e4ad7 core-prim . &non-continuable-rtd) (e4ac4 core-prim . &who-rcd) (e4ac2 core-prim . &who-rtd) (e4aa9 core-prim . &irritants-rcd) (e4aa7 core-prim . &irritants-rtd) (e4a8e core-prim . &assertion-rcd) (e4a8c core-prim . &assertion-rtd) (e4a79 core-prim . &violation-rcd) (e4a77 core-prim . &violation-rtd) (e4a64 core-prim . &error-rcd) (e4a62 core-prim . &error-rtd) (e4a4f core-prim . &serious-rcd) (e4a4d core-prim . &serious-rtd) (e4a3a core-prim . &warning-rcd) (e4a38 core-prim . &warning-rtd) (e4a25 core-prim . &message-rcd) (e4a23 core-prim . &message-rtd) (e49c6 core-prim . &condition-rcd) (e49c4 core-prim . &condition-rtd) (e2fac core-prim . syntax-error) (e2ec7 core-prim . syntax-dispatch) (e5184 core-prim . pretty-print) (e5183 core-prim . eval-core) (e5182 core-prim . set-symbol-value!) (e5181 core-prim . symbol-value) (e5180 core-prim . gensym) (e517f core-prim . void) (e4d84 core-prim . load) (e2fbc core-prim . interaction-environment) (e517e core-prim . char-ready?) (e517d core-prim . regexp?) (e517c core-prim . read-line) (e517b core-prim . ungensym) (e517a core-prim . alist->eq-hash-table) (e5179 core-prim . assoc-ref) (e5178 core-prim . print) (e5177 core-prim . format) (e5176 core-prim . host-os) (e295d core-prim . library-path) (e5175 core-prim . standard-library-path) (e5174 core-prim . file-newer?) (e5173 core-prim . stat-mtime) (e5172 core-prim . write-to-file) (e5171 core-prim . file->list) (e5170 core-prim . file->string) (e516f core-prim . digit->integer) (e516e core-prim . call-with-string-input-port) (e516d core-prim . call-with-string-io) (e516c core-prim . string-split) (e516b core-prim . bytevector-for-each) (e516a core-prim . string->regexp) (e5169 core-prim . rxmatch) (e5168 core-prim . regexp-replace-all) (e5167 core-prim . hashtable-for-each) (e5166 core-prim . call-process) (e5165 core-prim . local-tz-offset) (e5164 core-prim . microseconds) (e5163 core-prim . readdir) (e5162 core-prim . set-current-directory!) (e5161 core-prim . expand-path) (e5160 core-prim . current-directory) (e515f core-prim . %spawn) (e515e core-prim . %waitpid) (e515d core-prim . %ffi-supported?) (e515c core-prim . %ffi-pointer-ref) (e515b core-prim . %ffi-pointer->string) (e515a core-prim . %ffi-call->string-or-zero) (e5159 core-prim . %ffi-call->double) (e5158 core-prim . %ffi-call->void*) (e5157 core-prim . %ffi-call->void) (e5156 core-prim . %ffi-call->int) (e5155 core-prim . %ffi-lookup) (e5154 core-prim . %ffi-open) (e5153 core-prim . %fork) (e5152 core-prim . %pipe) (e5151 core-prim . p) (e5150 core-prim . open-output-string) (e514f core-prim . get-output-string) (e514e core-prim . get-environment-variables) (e514d core-prim . get-environment-variable) (e514c core-prim . get-timeofday) (e514b core-prim . get-command-line) (e514a core-prim . sys-display) (e5149 core-prim . whereis) (e5148 core-prim . register) (e5147 core-prim . vm-join!) (e5146 core-prim . vm-set-value!) (e5145 core-prim . vm?) (e5144 core-prim . main-vm?) (e5143 core-prim . vm-self) (e5142 core-prim . vm-start!) (e5141 core-prim . make-vm) (e5140 core-prim . mutex-try-lock!) (e513f core-prim . mutex-unlock!) (e513e core-prim . mutex-lock!) (e513d core-prim . mutex?) (e513c core-prim . make-mutex) (e513b core-prim . condition-variable-notify-all!) (e513a core-prim . condition-variable-notify!) (e5139 core-prim . condition-variable-wait!) (e5138 core-prim . make-condition-variable) (e5137 core-prim . mosh-executable-path) (e5136 core-prim . make-file-options) (e5135 core-prim . source-info) (e5134 core-prim . make-compiler-instruction) (e5133 core-prim . make-instruction) (e5132 core-prim . set-source-info!) (e5131 core-prim . bignum?) (e5130 core-prim . fast-equal?) (e512f core-prim . fasl-read) (e512e core-prim . fasl-write) (e512d core-prim . time-usage) (e512c core-prim . os-constant) (e2790 core-prim . make-parameter) (e512b core-prim . socket-port) (e512a core-prim . socket-shutdown) (e5129 core-prim . socket-close) (e5128 core-prim . socket-send) (e5127 core-prim . socket-recv!) (e5126 core-prim . socket-recv) (e5125 core-prim . make-server-socket) (e5124 core-prim . make-client-socket) (e5123 core-prim . socket-accept) (e5122 core-prim . socket?) (e5121 core-prim . string-upcase) (e5120 core-prim . string-titlecase) (e511f core-prim . string-normalize-nfkd) (e511e core-prim . string-normalize-nfkc) (e511d core-prim . string-normalize-nfd) (e511c core-prim . string-normalize-nfc) (e511b core-prim . string-foldcase) (e511a core-prim . string-downcase) (e5119 core-prim . string-ci>?) (e5118 core-prim . string-ci>=?) (e5117 core-prim . string-ci=?) (e5116 core-prim . string-ci<?) (e5115 core-prim . string-ci<=?) (e5114 core-prim . char-whitespace?) (e5113 core-prim . char-upper-case?) (e5112 core-prim . char-title-case?) (e5111 core-prim . char-numeric?) (e5110 core-prim . char-lower-case?) (e510f core-prim . char-general-category) (e510e core-prim . char-upcase) (e510d core-prim . char-titlecase) (e510c core-prim . char-foldcase) (e510b core-prim . char-downcase) (e510a core-prim . char-ci>?) (e5109 core-prim . char-ci>=?) (e5108 core-prim . char-ci=?) (e5107 core-prim . char-ci<?) (e5106 core-prim . char-ci<=?) (e5105 core-prim . char-alphabetic?) (e2cf4 core-prim . make-variable-transformer) (e2fb2 core-prim . identifier?) (e2f9e core-prim . generate-temporaries) (e2fa0 core-prim . free-identifier=?) (e2fb6 core-prim . syntax->datum) (e2fb4 core-prim . datum->syntax) (e2fa2 core-prim . bound-identifier=?) (e5104 core-prim . record-type-descriptor?) (e5103 core-prim . record-predicate) (e5102 core-prim . record-mutator) (e5101 core-prim . record-constructor) (e5100 core-prim . record-accessor) (e50ff core-prim . make-record-type-descriptor) (e50fe core-prim . make-record-constructor-descriptor) (e50fd core-prim . record?) (e50fc core-prim . record-type-uid) (e50fb core-prim . record-type-sealed?) (e50fa core-prim . record-type-parent) (e50f9 core-prim . record-type-opaque?) (e50f8 core-prim . record-type-name) (e50f7 core-prim . record-type-generative?) (e50f6 core-prim . record-type-field-names) (e50f5 core-prim . record-rtd) (e50f4 core-prim . record-field-mutable?) (e50f3 core-prim . delete-file) (e50f2 core-prim . file-exists?) (e50f1 core-prim . vector-sort!) (e50f0 core-prim . vector-sort) (e50ef core-prim . list-sort) (e50ee core-prim . symbol-hash) (e50ed core-prim . string-ci-hash) (e50ec core-prim . string-hash) (e50eb core-prim . equal-hash) (e50ea core-prim . hashtable-equivalence-function) (e50e9 core-prim . make-hashtable) (e50e8 core-prim . hashtable-hash-function) (e50e7 core-prim . make-eqv-hashtable) (e50e6 core-prim . make-eq-hashtable) (e50e5 core-prim . hashtable?) (e50e4 core-prim . hashtable-update!) (e50e3 core-prim . hashtable-size) (e50e2 core-prim . hashtable-set!) (e50e1 core-prim . hashtable-ref) (e50e0 core-prim . hashtable-mutable?) (e50df core-prim . hashtable-keys) (e50de core-prim . hashtable-entries) (e50dd core-prim . hashtable-delete!) (e50dc core-prim . hashtable-copy) (e50db core-prim . hashtable-contains?) (e50da core-prim . hashtable-clear!) (e50d9 core-prim . call-with-output-file) (e50d8 core-prim . call-with-input-file) (e50d7 core-prim . write-char) (e50d6 core-prim . write) (e50d5 core-prim . with-output-to-file) (e50d4 core-prim . with-input-from-file) (e50d3 core-prim . read-char) (e50d2 core-prim . read) (e50d1 core-prim . peek-char) (e50d0 core-prim . open-output-file) (e50cf core-prim . open-input-file) (e50ce core-prim . newline) (e50cd core-prim . display) (e50cc core-prim . close-output-port) (e50cb core-prim . close-input-port) (e50ca core-prim . eof-object?) (e50c9 core-prim . eof-object) (e50c8 core-prim . current-error-port) (e50c7 core-prim . current-output-port) (e50c6 core-prim . current-input-port) (e50c5 core-prim . output-port?) (e50c4 core-prim . input-port?) (e50c3 core-prim . utf-8-codec) (e50c2 core-prim . utf-16-codec) (e50c1 core-prim . transcoder-error-handling-mode) (e50c0 core-prim . transcoder-eol-style) (e50bf core-prim . transcoder-codec) (e50be core-prim . transcoded-port) (e50bd core-prim . textual-port?) (e50bc core-prim . string->bytevector) (e50bb core-prim . standard-output-port) (e50ba core-prim . standard-input-port) (e50b9 core-prim . standard-error-port) (e50b8 core-prim . set-port-position!) (e50b7 core-prim . put-u8) (e50b6 core-prim . put-string) (e50b5 core-prim . put-datum) (e50b4 core-prim . put-char) (e50b3 core-prim . put-bytevector) (e50b2 core-prim . port?) (e50b1 core-prim . port-transcoder) (e50b0 core-prim . port-position) (e50af core-prim . port-has-set-port-position!?) (e50ae core-prim . port-has-port-position?) (e50ad core-prim . port-eof?) (e50ac core-prim . output-port-buffer-mode) (e50ab core-prim . open-string-output-port) (e50aa core-prim . open-string-input-port) (e50a9 core-prim . open-file-output-port) (e50a8 core-prim . open-file-input/output-port) (e50a7 core-prim . open-file-input-port) (e50a6 core-prim . open-bytevector-output-port) (e50a5 core-prim . open-bytevector-input-port) (e50a4 core-prim . native-transcoder) (e50a3 core-prim . native-eol-style) (e50a2 core-prim . make-transcoder) (e50a1 core-prim . latin-1-codec) (e4b72 core-prim . make-i/o-write-error) (e4b5d core-prim . make-i/o-read-error) (e4c13 core-prim . make-i/o-port-error) (e4b89 core-prim . make-i/o-invalid-position-error) (e4ba4 core-prim . make-i/o-filename-error) (e4bbd core-prim . make-i/o-file-protection-error) (e4bd2 core-prim . make-i/o-file-is-read-only-error) (e4bfc core-prim . make-i/o-file-does-not-exist-error) (e4be7 core-prim . make-i/o-file-already-exists-error) (e4b48 core-prim . make-i/o-error) (e4c43 core-prim . make-i/o-encoding-error) (e4c2c core-prim . make-i/o-decoding-error) (e50a0 core-prim . make-custom-textual-output-port) (e509f core-prim . make-custom-textual-input/output-port) (e509e core-prim . make-custom-textual-input-port) (e509d core-prim . make-custom-binary-output-port) (e509c core-prim . make-custom-binary-input/output-port) (e509b core-prim . make-custom-binary-input-port) (e509a core-prim . make-bytevector) (e5099 core-prim . lookahead-u8) (e5098 core-prim . lookahead-char) (e4b74 core-prim . i/o-write-error?) (e4b5f core-prim . i/o-read-error?) (e4c17 core-prim . i/o-port-error?) (e4b8d core-prim . i/o-invalid-position-error?) (e4ba8 core-prim . i/o-filename-error?) (e4bbf core-prim . i/o-file-protection-error?) (e4bd4 core-prim . i/o-file-is-read-only-error?) (e4bfe core-prim . i/o-file-does-not-exist-error?) (e4be9 core-prim . i/o-file-already-exists-error?) (e4b4a core-prim . i/o-error?) (e4b8f core-prim . i/o-error-position) (e4c19 core-prim . i/o-error-port) (e4baa core-prim . i/o-error-filename) (e4c47 core-prim . i/o-encoding-error?) (e4c49 core-prim . i/o-encoding-error-char) (e4c2e core-prim . i/o-decoding-error?) (e5097 core-prim . get-u8) (e5096 core-prim . get-string-n!) (e5095 core-prim . get-string-n) (e5094 core-prim . get-string-all) (e5093 core-prim . get-line) (e5092 core-prim . get-datum) (e5091 core-prim . get-char) (e5090 core-prim . get-bytevector-some) (e508f core-prim . get-bytevector-n!) (e508e core-prim . get-bytevector-n) (e508d core-prim . get-bytevector-all) (e508c core-prim . flush-output-port) (e508b core-prim . close-port) (e2f8c core-prim . scheme-report-environment) (e508a core-prim . quotient) (e2f8a core-prim . null-environment) (e5089 core-prim . remainder) (e5088 core-prim . modulo) (e5087 core-prim . inexact->exact) (e5086 core-prim . force) (e5085 core-prim . exact->inexact) (e5084 core-prim . make-promise) (e5083 core-prim . exit) (e4d7e core-prim . command-line) (e5082 core-prim . string-fill!) (e5081 core-prim . string-set!) (e5080 core-prim . set-cdr!) (e507f core-prim . set-car!) (e507e core-prim . remove) (e507d core-prim . remv) (e507c core-prim . remp) (e507b core-prim . remq) (e507a core-prim . partition) (e5079 core-prim . memv) (e5078 core-prim . memq) (e5077 core-prim . memp) (e5076 core-prim . member) (e5075 core-prim . exists) (e5074 core-prim . for-all) (e5073 core-prim . fold-right) (e5072 core-prim . fold-left) (e5071 core-prim . find) (e5070 core-prim . filter) (e506f core-prim . cons*) (e506e core-prim . assv) (e506d core-prim . assq) (e506c core-prim . assp) (e506b core-prim . assoc) (e506a core-prim . call-with-string-output-port) (e5069 core-prim . call-with-port) (e5068 core-prim . call-with-bytevector-output-port) (e5067 core-prim . bytevector->string) (e5066 core-prim . buffer-mode?) (e5065 core-prim . binary-port?) (e5064 core-prim . with-exception-handler) (e5063 core-prim . raise-continuable) (e5062 core-prim . raise) (e2f90 core-prim . eval) (e2f88 core-prim . environment) (e5061 core-prim . make-enumeration) (e5060 core-prim . enum-set=?) (e505f core-prim . enum-set-universe) (e505e core-prim . enum-set-union) (e505d core-prim . enum-set-subset?) (e505c core-prim . enum-set-projection) (e505b core-prim . enum-set-member?) (e505a core-prim . enum-set-intersection) (e5059 core-prim . enum-set-indexer) (e5058 core-prim . enum-set-difference) (e5057 core-prim . enum-set-constructor) (e5056 core-prim . enum-set-complement) (e5055 core-prim . enum-set->list) (e4abe core-prim . who-condition?) (e4a36 core-prim . warning?) (e4a75 core-prim . violation?) (e4b35 core-prim . undefined-violation?) (e4b1c core-prim . syntax-violation?) (e4b20 core-prim . syntax-violation-subform) (e4b1e core-prim . syntax-violation-form) (e2fb0 core-prim . syntax-violation) (e5054 core-prim . simple-conditions) (e4a4b core-prim . serious-condition?) (e4ad5 core-prim . non-continuable-violation?) (e4a1f core-prim . message-condition?) (e4aba core-prim . make-who-condition) (e4a34 core-prim . make-warning) (e4a73 core-prim . make-violation) (e4b33 core-prim . make-undefined-violation) (e4b16 core-prim . make-syntax-violation) (e4a49 core-prim . make-serious-condition) (e4ad3 core-prim . make-non-continuable-violation) (e4a1b core-prim . make-message-condition) (e4afd core-prim . make-lexical-violation) (e4a9f core-prim . make-irritants-condition) (e4ae8 core-prim . make-implementation-restriction-violation) (e4a5e core-prim . make-error) (e4a88 core-prim . make-assertion-violation) (e4aff core-prim . lexical-violation?) (e4aa3 core-prim . irritants-condition?) (e4aea core-prim . implementation-restriction-violation?) (e4a60 core-prim . error?) (e4ac0 core-prim . condition-who) (e5053 core-prim . condition-predicate) (e4a21 core-prim . condition-message) (e4aa5 core-prim . condition-irritants) (e5052 core-prim . condition-accessor) (e5051 core-prim . condition) (e4a8a core-prim . assertion-violation?) (e5050 core-prim . condition?) (e504f core-prim . utf32->string) (e504e core-prim . utf16->string) (e504d core-prim . utf8->string) (e504c core-prim . uint-list->bytevector) (e504b core-prim . u8-list->bytevector) (e504a core-prim . string->utf8) (e5049 core-prim . string->utf32) (e5048 core-prim . string->utf16) (e5047 core-prim . sint-list->bytevector) (e5046 core-prim . native-endianness) (e5045 core-prim . bytevector?) (e5044 core-prim . bytevector=?) (e5043 core-prim . bytevector-uint-set!) (e5042 core-prim . bytevector-uint-ref) (e5041 core-prim . bytevector-u8-set!) (e5040 core-prim . bytevector-u8-ref) (e503f core-prim . bytevector-u64-set!) (e503e core-prim . bytevector-u64-ref) (e503d core-prim . bytevector-u64-native-set!) (e503c core-prim . bytevector-u64-native-ref) (e503b core-prim . bytevector-u32-set!) (e503a core-prim . bytevector-u32-ref) (e5039 core-prim . bytevector-u32-native-set!) (e5038 core-prim . bytevector-u32-native-ref) (e5037 core-prim . bytevector-u16-set!) (e5036 core-prim . bytevector-u16-ref) (e5035 core-prim . bytevector-u16-native-set!) (e5034 core-prim . bytevector-u16-native-ref) (e5033 core-prim . bytevector-sint-set!) (e5032 core-prim . bytevector-sint-ref) (e5031 core-prim . bytevector-s8-set!) (e5030 core-prim . bytevector-s8-ref) (e502f core-prim . bytevector-s64-set!) (e502e core-prim . bytevector-s64-ref) (e502d core-prim . bytevector-s64-native-set!) (e502c core-prim . bytevector-s64-native-ref) (e502b core-prim . bytevector-s32-set!) (e502a core-prim . bytevector-s32-ref) (e5029 core-prim . bytevector-s32-native-set!) (e5028 core-prim . bytevector-s32-native-ref) (e5027 core-prim . bytevector-s16-set!) (e5026 core-prim . bytevector-s16-ref) (e5025 core-prim . bytevector-s16-native-set!) (e5024 core-prim . bytevector-s16-native-ref) (e5023 core-prim . bytevector-length) (e5022 core-prim . bytevector-ieee-single-ref) (e5021 core-prim . bytevector-ieee-single-set!) (e5020 core-prim . bytevector-ieee-single-native-set!) (e501f core-prim . bytevector-ieee-single-native-ref) (e501e core-prim . bytevector-ieee-double-set!) (e501d core-prim . bytevector-ieee-double-ref) (e501c core-prim . bytevector-ieee-double-native-set!) (e501b core-prim . bytevector-ieee-double-native-ref) (e501a core-prim . bytevector-fill!) (e5019 core-prim . bytevector-copy!) (e5018 core-prim . bytevector-copy) (e5017 core-prim . bytevector->uint-list) (e5016 core-prim . bytevector->u8-list) (e5015 core-prim . bytevector->sint-list) (e4c73 core-prim . no-nans-violation?) (e4c5e core-prim . no-infinities-violation?) (e4c71 core-prim . make-no-nans-violation) (e4c5c core-prim . make-no-infinities-violation) (e5014 core-prim . real->flonum) (e5013 core-prim . flzero?) (e5012 core-prim . fltruncate) (e5011 core-prim . fltan) (e5010 core-prim . flsqrt) (e500f core-prim . flsin) (e500e core-prim . flround) (e500d core-prim . flpositive?) (e500c core-prim . flonum?) (e500b core-prim . flodd?) (e500a core-prim . flnumerator) (e5009 core-prim . flnegative?) (e5008 core-prim . flnan?) (e5007 core-prim . flmod0) (e5006 core-prim . flmod) (e5005 core-prim . flmin) (e5004 core-prim . flmax) (e5003 core-prim . fllog) (e5002 core-prim . flinteger?) (e5001 core-prim . flinfinite?) (e5000 core-prim . flfloor) (e4fff core-prim . flfinite?) (e4ffe core-prim . flexpt) (e4ffd core-prim . flexp) (e4ffc core-prim . fleven?) (e4ffb core-prim . fldiv0-and-mod0) (e4ffa core-prim . fldiv0) (e4ff9 core-prim . fldiv-and-mod) (e4ff8 core-prim . fldiv) (e4ff7 core-prim . fldenominator) (e4ff6 core-prim . flcos) (e4ff5 core-prim . flceiling) (e4ff4 core-prim . flatan) (e4ff3 core-prim . flasin) (e4ff2 core-prim . flacos) (e4ff1 core-prim . flabs) (e4ff0 core-prim . fl>?) (e4fef core-prim . fl>=?) (e4fee core-prim . fl=?) (e4fed core-prim . fl<?) (e4fec core-prim . fl<=?) (e4feb core-prim . fl/) (e4fea core-prim . fl-) (e4fe9 core-prim . fl+) (e4fe8 core-prim . fl*) (e4fe7 core-prim . fixnum->flonum) (e4fe6 core-prim . fxzero?) (e4fe5 core-prim . fxxor) (e4fe4 core-prim . fxrotate-bit-field) (e4fe3 core-prim . fxreverse-bit-field) (e4fe2 core-prim . fxpositive?) (e4fe1 core-prim . fxodd?) (e4fe0 core-prim . fxnot) (e4fdf core-prim . fxnegative?) (e4fde core-prim . fxmod0) (e4fdd core-prim . fxmod) (e4fdc core-prim . fxmin) (e4fdb core-prim . fxmax) (e4fda core-prim . fxlength) (e4fd9 core-prim . fxior) (e4fd8 core-prim . fxif) (e4fd7 core-prim . fxfirst-bit-set) (e4fd6 core-prim . fxeven?) (e4fd5 core-prim . fxdiv0-and-mod0) (e4fd4 core-prim . fxdiv0) (e4fd3 core-prim . fxdiv-and-mod) (e4fd2 core-prim . fxdiv) (e4fd1 core-prim . fxcopy-bit-field) (e4fd0 core-prim . fxcopy-bit) (e4fcf core-prim . fxbit-set?) (e4fce core-prim . fxbit-field) (e4fcd core-prim . fxbit-count) (e4fcc core-prim . fxarithmetic-shift-right) (e4fcb core-prim . fxarithmetic-shift-left) (e4fca core-prim . fxarithmetic-shift) (e4fc9 core-prim . fxand) (e4fc8 core-prim . fx>?) (e4fc7 core-prim . fx>=?) (e4fc6 core-prim . fx=?) (e4fc5 core-prim . fx<?) (e4fc4 core-prim . fx<=?) (e4fc3 core-prim . fx-/carry) (e4fc2 core-prim . fx-) (e4fc1 core-prim . fx+/carry) (e4fc0 core-prim . fx+) (e4fbf core-prim . fx*/carry) (e4fbe core-prim . fx*) (e4fbd core-prim . greatest-fixnum) (e4fbc core-prim . least-fixnum) (e4fbb core-prim . fixnum-width) (e4fba core-prim . fixnum?) (e4fb9 core-prim . bitwise-rotate-bit-field) (e4fb8 core-prim . bitwise-reverse-bit-field) (e4fb7 core-prim . bitwise-length) (e4fb6 core-prim . bitwise-if) (e4fb5 core-prim . bitwise-first-bit-set) (e4fb4 core-prim . bitwise-copy-bit-field) (e4fb3 core-prim . bitwise-copy-bit) (e4fb2 core-prim . bitwise-bit-set?) (e4fb1 core-prim . bitwise-bit-field) (e4fb0 core-prim . bitwise-bit-count) (e4faf core-prim . bitwise-xor) (e4fae core-prim . bitwise-ior) (e4fad core-prim . bitwise-and) (e4fac core-prim . bitwise-not) (e4fab core-prim . bitwise-arithmetic-shift-right) (e4faa core-prim . bitwise-arithmetic-shift-left) (e4fa9 core-prim . bitwise-arithmetic-shift) (e4fa8 core-prim . zero?) (e4fa7 core-prim . vector?) (e4fa6 core-prim . vector-set!) (e4fa5 core-prim . vector-ref) (e4fa4 core-prim . vector-map) (e4fa3 core-prim . vector-length) (e4fa2 core-prim . vector-for-each) (e4fa1 core-prim . vector-fill!) (e4fa0 core-prim . vector->list) (e4f9f core-prim . vector) (e4f9e core-prim . values) (e4f9d core-prim . truncate) (e4f9c core-prim . tan) (e4f9b core-prim . symbol?) (e4f9a core-prim . symbol=?) (e4f99 core-prim . symbol->string) (e4f98 core-prim . substring) (e4f97 core-prim . string?) (e4f96 core-prim . string>?) (e4f95 core-prim . string>=?) (e4f94 core-prim . string=?) (e4f93 core-prim . string<?) (e4f92 core-prim . string<=?) (e4f91 core-prim . string-ref) (e4f90 core-prim . string-length) (e4f8f core-prim . string-for-each) (e4f8e core-prim . string-copy) (e4f8d core-prim . string-append) (e4f8c core-prim . string->symbol) (e4f8b core-prim . string->number) (e4f8a core-prim . string->list) (e4f89 core-prim . string) (e4f88 core-prim . sqrt) (e4f87 core-prim . sin) (e4f86 core-prim . round) (e4f85 core-prim . reverse) (e4f84 core-prim . real?) (e4f83 core-prim . real-valued?) (e4f82 core-prim . real-part) (e4f81 core-prim . rationalize) (e4f80 core-prim . rational?) (e4f7f core-prim . rational-valued?) (e4f7e core-prim . procedure?) (e4f7d core-prim . positive?) (e4f7c core-prim . pair?) (e4f7b core-prim . odd?) (e4f7a core-prim . numerator) (e4f79 core-prim . number?) (e4f78 core-prim . number->string) (e4f77 core-prim . null?) (e4f76 core-prim . not) (e4f75 core-prim . negative?) (e4f74 core-prim . nan?) (e4f73 core-prim . min) (e4f72 core-prim . max) (e4f71 core-prim . map) (e4f70 core-prim . make-vector) (e4f6f core-prim . make-string) (e4f6e core-prim . make-rectangular) (e4f6d core-prim . make-polar) (e4f6c core-prim . magnitude) (e4f6b core-prim . log) (e4f6a core-prim . list?) (e4f69 core-prim . list-tail) (e4f68 core-prim . list-ref) (e4f67 core-prim . list->vector) (e4f66 core-prim . list->string) (e4f65 core-prim . list) (e4f64 core-prim . length) (e4f63 core-prim . lcm) (e4f62 core-prim . integer?) (e4f61 core-prim . integer-valued?) (e4f60 core-prim . integer->char) (e4f5f core-prim . infinite?) (e4f5e core-prim . inexact?) (e4f5d core-prim . inexact) (e4f5c core-prim . imag-part) (e4f5b core-prim . gcd) (e4f5a core-prim . for-each) (e4f59 core-prim . floor) (e4f58 core-prim . finite?) (e4f57 core-prim . expt) (e4f56 core-prim . exp) (e4f55 core-prim . exact?) (e4f54 core-prim . exact-integer-sqrt) (e4f53 core-prim . exact) (e4f52 core-prim . even?) (e4f51 core-prim . error) (e4f50 core-prim . eqv?) (e4f4f core-prim . equal?) (e4f4e core-prim . eq?) (e4f4d core-prim . dynamic-wind) (e4f4c core-prim . div0-and-mod0) (e4f4b core-prim . mod0) (e4f4a core-prim . div0) (e4f49 core-prim . div-and-mod) (e4f48 core-prim . mod) (e4f47 core-prim . div) (e4f46 core-prim . denominator) (e4f45 core-prim . cos) (e4f44 core-prim . cons) (e4f43 core-prim . complex?) (e4f42 core-prim . char?) (e4f41 core-prim . char>?) (e4f40 core-prim . char>=?) (e4f3f core-prim . char=?) (e4f3e core-prim . char<?) (e4f3d core-prim . char<=?) (e4f3c core-prim . char->integer) (e4f3b core-prim . ceiling) (e4f3a core-prim . call-with-values) (e4f39 core-prim . call/cc) (e4f38 core-prim . call-with-current-continuation) (e4f37 core-prim . cddddr) (e4f36 core-prim . cdddar) (e4f35 core-prim . cddadr) (e4f34 core-prim . cddaar) (e4f33 core-prim . cdaddr) (e4f32 core-prim . cdadar) (e4f31 core-prim . cdaadr) (e4f30 core-prim . cdaaar) (e4f2f core-prim . cadddr) (e4f2e core-prim . caddar) (e4f2d core-prim . cadadr) (e4f2c core-prim . cadaar) (e4f2b core-prim . caaddr) (e4f2a core-prim . caadar) (e4f29 core-prim . caaadr) (e4f28 core-prim . caaaar) (e4f27 core-prim . cdddr) (e4f26 core-prim . cddar) (e4f25 core-prim . cdadr) (e4f24 core-prim . cdaar) (e4f23 core-prim . caddr) (e4f22 core-prim . cadar) (e4f21 core-prim . caadr) (e4f20 core-prim . caaar) (e4f1f core-prim . cddr) (e4f1e core-prim . cdar) (e4f1d core-prim . cadr) (e4f1c core-prim . caar) (e4f1b core-prim . cdr) (e4f1a core-prim . car) (e4f19 core-prim . boolean?) (e4f18 core-prim . boolean=?) (e4f17 core-prim . atan) (e4f16 core-prim . assertion-violation) (e2faa core-prim . assertion-error) (e4f15 core-prim . asin) (e4f14 core-prim . apply) (e4f13 core-prim . append) (e4f12 core-prim . angle) (e4f11 core-prim . acos) (e4f10 core-prim . abs) (e4f0f core-prim . /) (e4f0e core-prim . *) (e4f0d core-prim . -) (e4f0c core-prim . +) (e4f0b core-prim . >=) (e4f0a core-prim . >) (e4f09 core-prim . =) (e4f08 core-prim . <=) (e4f07 core-prim . <) (e4f06 core-prim . library) (e4f05 $core-rtd &no-nans-rtd &no-nans-rcd) (e4f04 $core-rtd &no-infinities-rtd &no-infinities-rcd) (e4f03 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (e4f02 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (e4f01 $core-rtd &i/o-port-rtd &i/o-port-rcd) (e4f00 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (e4eff $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (e4efe $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (e4efd $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (e4efc $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (e4efb $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (e4efa $core-rtd &i/o-write-rtd &i/o-write-rcd) (e4ef9 $core-rtd &i/o-read-rtd &i/o-read-rcd) (e4ef8 $core-rtd &i/o-rtd &i/o-rcd) (e4ef7 $core-rtd &undefined-rtd &undefined-rcd) (e4ef6 $core-rtd &syntax-rtd &syntax-rcd) (e4ef5 $core-rtd &lexical-rtd &lexical-rcd) (e4ef4 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (e4ef3 $core-rtd &non-continuable-rtd &non-continuable-rcd) (e4ef2 $core-rtd &who-rtd &who-rcd) (e4ef1 $core-rtd &irritants-rtd &irritants-rcd) (e4ef0 $core-rtd &assertion-rtd &assertion-rcd) (e4eef $core-rtd &violation-rtd &violation-rcd) (e4eee $core-rtd &error-rtd &error-rcd) (e4eed $core-rtd &serious-rtd &serious-rcd) (e4eec $core-rtd &warning-rtd &warning-rcd) (e4eeb $core-rtd &message-rtd &message-rcd) (e4eea $core-rtd &condition-rtd &condition-rcd) (e4ee9 macro . define-condition-type) (e4ee8 macro . define-enumeration) (e4ee7 macro . define-record-type) (e4ee6 macro . parent-rtd) (e4ee5 macro . nongenerative) (e4ee4 macro . opaque) (e4ee3 macro . sealed) (e4ee2 macro . protocol) (e4ee1 macro . parent) (e4ee0 macro . immutable) (e4edf macro . mutable) (e4ede macro . fields) (e4edd macro . error-handling-mode) (e4edc macro . file-options) (e4edb macro . buffer-mode) (e4eda macro . eol-style) (e4ed9 macro . guard) (e4ed8 macro . trace-define) (e4ed7 macro . trace-lambda) (e4ed6 macro . unsyntax-splicing) (e4ed5 macro . unsyntax) (e4ed4 macro . unquote-splicing) (e4ed3 macro . unquote) (e4ed2 macro . _) (e4ed1 macro . else) (e4ed0 macro . =>) (e4ecf macro . ...) (e4ece macro . assert) (e4ecd macro . endianness) (e4ecc macro . delay) (e4ecb macro . time) (e4eca macro . do) (e4ec9 macro . cond) (e4ec8 macro . let*) (e4ec7 macro . let) (e4ec6 macro . let*-values) (e4ec5 macro . let-values) (e4ec4 macro . identifier-syntax) (e4ec3 macro . with-syntax) (e4ec2 macro . quasisyntax) (e4ec1 macro . quasiquote) (e4ec0 macro . syntax-rules) (e4ebf macro . include) (e4ebe macro . define-struct) (e4ebd core-macro . record-constructor-descriptor) (e4ebc core-macro . record-type-descriptor) (e4ebb macro . case) (e4eba macro . parameterize) (e4eb9 macro . unless) (e4eb8 macro . when) (e4eb7 core-macro . or) (e4eb6 core-macro . and) (e4eb5 core-macro . if) (e4eb4 core-macro . letrec*) (e4eb3 core-macro . letrec) (e4eb2 core-macro . type-descriptor) (e4eb1 core-macro . case-lambda) (e4eb0 core-macro . lambda) (e4eaf core-macro . syntax) (e4eae core-macro . syntax-case) (e4ead core-macro . quote) (e4eac core-macro . foreign-call) (e4eab letrec-syntax) (e4eaa let-syntax) (e4ea9 set!) (e4ea8 import) (e4ea7 begin) (e4ea6 module) (e4ea5 define-syntax) (e4ea4 define)) values values '#f '#f '#f '#f) (e2adf@e297e@install-library 'e51a5 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . e5184) (eval-core . e5183) (set-symbol-value! . e5182) (symbol-value . e5181) (gensym . e5180) (void . e517f)) '() values values '#f '#f '#f '#f) (e2adf@e297e@install-library 'e51a6 '(mosh) '() '() '() '() '((set-symbol-value! . e5182) (symbol-value . e5181) (regexp? . e517d) (read-line . e517c) (ungensym . e517b) (alist->eq-hash-table . e517a) (assoc-ref . e5179) (print . e5178) (format . e5177) (host-os . e5176) (library-path . e295d) (standard-library-path . e5175) (file-newer? . e5174) (stat-mtime . e5173) (write-to-file . e5172) (file->list . e5171) (file->string . e5170) (digit->integer . e516f) (call-with-string-input-port . e516e) (call-with-string-io . e516d) (string-split . e516c) (bytevector-for-each . e516b) (string->regexp . e516a) (rxmatch . e5169) (regexp-replace-all . e5168) (hashtable-for-each . e5167) (readdir . e5163) (set-current-directory! . e5162) (expand-path . e5161) (current-directory . e5160) (p . e5151) (get-timeofday . e514c) (get-command-line . e514b) (sys-display . e514a) (whereis . e5149) (register . e5148) (vm-join! . e5147) (vm-set-value! . e5146) (vm? . e5145) (main-vm? . e5144) (vm-self . e5143) (vm-start! . e5142) (make-vm . e5141) (mutex-try-lock! . e5140) (mutex-unlock! . e513f) (mutex-lock! . e513e) (mutex? . e513d) (make-mutex . e513c) (condition-variable-notify-all! . e513b) (condition-variable-notify! . e513a) (condition-variable-wait! . e5139) (make-condition-variable . e5138) (mosh-executable-path . e5137) (make-file-options . e5136) (source-info . e5135) (make-compiler-instruction . e5134) (make-instruction . e5133) (set-source-info! . e5132) (bignum? . e5131) (fast-equal? . e5130) (fasl-read . e512f) (fasl-write . e512e) (time-usage . e512d) (os-constant . e512c) (time . e4ecb) (include . e4ebf)) '() values values '#f '#f '#f '#f) (e2adf@e297e@install-library 'e51a7 '(system) '() '() '() '() '((call-process . e5166) (local-tz-offset . e5165) (microseconds . e5164) (expand-path . e5161) (%spawn . e515f) (%waitpid . e515e) (%ffi-supported? . e515d) (%ffi-pointer-ref . e515c) (%ffi-pointer->string . e515b) (%ffi-call->string-or-zero . e515a) (%ffi-call->double . e5159) (%ffi-call->void* . e5158) (%ffi-call->void . e5157) (%ffi-call->int . e5156) (%ffi-lookup . e5155) (%ffi-open . e5154) (%fork . e5153) (%pipe . e5152) (open-output-string . e5150) (get-output-string . e514f) (get-environment-variables . e514e) (get-environment-variable . e514d) (make-parameter . e2790) (socket-port . e512b) (socket-shutdown . e512a) (socket-close . e5129) (socket-send . e5128) (socket-recv! . e5127) (socket-recv . e5126) (make-server-socket . e5125) (make-client-socket . e5124) (socket-accept . e5123) (socket? . e5122) (parameterize . e4eba)) '() values values '#f '#f '#f '#f))
((lambda (e4d6d@add-library-path! e4d6f@parse-and-add-library-path e4d71@for-each-with-index e4d73@rpad e4d75@condition-printer e4d77@record->field-alist e4d79@map-with-index e4d7b@repl e4d7d@trace-printer e4d7f@command-line e4d81@local-library-path e4d83@load/args e4d85@load e4d87@ironscheme-build e4d89@eval-top-level e4d8b@compile-system-libraries e4d8d@compile e4d8f@compile->closure e4d91@pre-compile-r6rs-file e4d93@load-r6rs-top-level e4d95@load-r6rs-top-level-sexp) (begin (set! e4d6d@add-library-path! (lambda (e4db8@path) (e2acf@e295e@library-path (append (e2acf@e295e@library-path) (list e4db8@path))))) (set! e4d6f@parse-and-add-library-path (lambda (e4dba@paths e4dbb@message) ((lambda (e4dbe@t) (if e4dbe@t ((lambda (e4dc0@paths) (for-each (lambda (e4dc2@path) (if (file-exists? e4dc2@path) (e4d6d@add-library-path! (expand-path e4dc2@path)) (format (current-error-port) e4dbb@message e4dc2@path))) (reverse (string-split e4dc0@paths '#\:)))) e4dbe@t) (void))) e4dba@paths))) (set! e4d71@for-each-with-index (lambda (e4dc4@proc e4dc5@lst) (letrec ((e4dc8@loop (lambda (e4dca@i e4dcb@lst) (if (null? e4dcb@lst) (if '#f '#f (void)) (begin (e4dc4@proc e4dca@i (car e4dcb@lst)) (e4dc8@loop (+ e4dca@i '1) (cdr e4dcb@lst))))))) (e4dc8@loop '1 e4dc5@lst)))) (set! e4d73@rpad (lambda (e4dce@str e4dcf@pad e4dd0@n) ((lambda (e4dd4@rest) ((letrec ((e4dd6@loop (lambda (e4dd8@rest e4dd9@ret) (if (<= e4dd8@rest '0) e4dd9@ret (e4dd6@loop (- e4dd8@rest '1) (string-append e4dd9@ret e4dcf@pad)))))) e4dd6@loop) e4dd4@rest (format '"~a" e4dce@str))) (- e4dd0@n (string-length (format '"~a" e4dce@str)))))) (set! e4d75@condition-printer (lambda (e4ddc@e e4ddd@port) ((lambda (e4de1@max-condition-len) (begin (set! e4de1@max-condition-len (apply max (map (lambda (e4df2@c) (string-length (symbol->string (record-type-name (record-rtd e4df2@c))))) (simple-conditions e4ddc@e)))) (begin (display '" Condition components:\n" e4ddd@port) (e4d71@for-each-with-index (lambda (e4de2@i e4de3@x) ((lambda (e4de6@rtd e4de7@fields-alist) (begin (format e4ddd@port '" ~d. ~a" e4de2@i (e4d73@rpad (symbol->string (record-type-name e4de6@rtd)) '" " e4de1@max-condition-len)) (if (null? e4de7@fields-alist) (newline e4ddd@port) (void)) ((letrec ((e4dea@loop (lambda (e4dec@first e4ded@fields-alist) (if (null? e4ded@fields-alist) '() ((lambda (e4df0@field) (begin (if (not e4dec@first) (display (e4d73@rpad '"" '" " (+ '4 e4de1@max-condition-len)) e4ddd@port) (void)) (display '"       " e4ddd@port) (display (car e4df0@field) e4ddd@port) (display '": " e4ddd@port) (write (cdr e4df0@field) e4ddd@port) (newline e4ddd@port) (e4dea@loop '#f (cdr e4ded@fields-alist)))) (car e4ded@fields-alist)))))) e4dea@loop) '#t e4de7@fields-alist))) (record-rtd e4de3@x) (e4d77@record->field-alist e4de3@x))) (simple-conditions e4ddc@e))))) '#f))) (set! e4d77@record->field-alist (lambda (e4df4@r) ((lambda (e4df7@ref) (begin (set! e4df7@ref (lambda (e4e02@rtd e4e03@i e4e04@x) ((lambda (e4e08@val) (if (symbol? e4e08@val) (ungensym e4e08@val) e4e08@val)) ((record-accessor e4e02@rtd e4e03@i) e4e04@x)))) ((letrec ((e4df8@loop (lambda (e4dfa@ret e4dfb@rtd) (if e4dfb@rtd (e4df8@loop (append e4dfa@ret (e4d79@map-with-index (lambda (e4dfe@i e4dff@field) (cons e4dff@field (e4df7@ref e4dfb@rtd e4dfe@i e4df4@r))) (vector->list (record-type-field-names e4dfb@rtd)))) (record-type-parent e4dfb@rtd)) e4dfa@ret)))) e4df8@loop) '() (record-rtd e4df4@r)))) '#f))) (set! e4d79@map-with-index (lambda (e4e0a@proc e4e0b@lst) ((letrec ((e4e0e@loop (lambda (e4e10@i e4e11@lst e4e12@ret) (if (null? e4e11@lst) (reverse e4e12@ret) (e4e0e@loop (+ e4e10@i '1) (cdr e4e11@lst) (cons (e4e0a@proc e4e10@i (car e4e11@lst)) e4e12@ret)))))) e4e0e@loop) '0 e4e0b@lst '()))) (set! e4d7b@repl (lambda e4e16@x ((lambda (e4e19@rec) (begin (set! e4e19@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (e4e1c@e4e1a) (lambda () (with-exception-handler (lambda (e4e1e@e) ((call/cc (lambda (e4e20@e4e1b) (e4e1c@e4e1a (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? e4e1e@e) (e4d75@condition-printer e4e1e@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" e4e1e@e))) (e4e20@e4e1b (lambda () (raise-continuable e4e1e@e)))))))))) (lambda () ((letrec ((e4e22@loop (lambda (e4e24@line e4e25@accum) ((lambda (e4e29@parentheses-ok? e4e2b@eval-string-print) (begin (set! e4e29@parentheses-ok? (lambda (e4e30@text) ((letrec ((e4e32@loop (lambda (e4e34@chars e4e35@p0 e4e36@p1) (if (null? e4e34@chars) (= '0 e4e35@p0 e4e36@p1) ((lambda (e4e3a@t) (if (memv e4e3a@t '(#\()) (e4e32@loop (cdr e4e34@chars) (+ e4e35@p0 '1) e4e36@p1) (if (memv e4e3a@t '(#\))) (e4e32@loop (cdr e4e34@chars) (- e4e35@p0 '1) e4e36@p1) (if (memv e4e3a@t '(#\[)) (e4e32@loop (cdr e4e34@chars) e4e35@p0 (+ e4e36@p1 '1)) (if (memv e4e3a@t '(#\])) (e4e32@loop (cdr e4e34@chars) e4e35@p0 (- e4e36@p1 '1)) (e4e32@loop (cdr e4e34@chars) e4e35@p0 e4e36@p1)))))) (car e4e34@chars)))))) e4e32@loop) (string->list e4e30@text) '0 '0))) (set! e4e2b@eval-string-print (lambda (e4e2e@text) (if (not (or (string=? '"\n" e4e2e@text) (= '0 (string-length e4e2e@text)))) (write (e4d89@eval-top-level (call-with-port (open-string-input-port e4e2e@text) read))) (void)))) (if (eof-object? e4e24@line) (begin (e4e2b@eval-string-print e4e25@accum) (exit)) ((lambda (e4e2c@current) (if (e4e29@parentheses-ok? e4e2c@current) (e4e2b@eval-string-print e4e2c@current) (e4e22@loop (get-line (current-input-port)) e4e2c@current))) (string-append e4e25@accum e4e24@line))))) '#f '#f)))) e4e22@loop) (get-line (current-input-port)) '""))))))) (newline) (e4e19@rec)))) (e4e19@rec))) '#f))) (set! e4d7d@trace-printer (e2867@e2791@make-parameter write)) (set! e4d7f@command-line (e2867@e2791@make-parameter (get-command-line))) (set! e4d81@local-library-path (lambda (e4e3c@filename) (cons (expand-path '".") (e2acf@e295e@library-path)))) (set! e4d83@load/args (lambda (e4e3e@filename . e4e40@args) (begin (apply e4d93@load-r6rs-top-level e4e3e@filename 'load e4e40@args) (void)))) (set! e4d85@load (lambda (e4e42@filename) (begin (apply e4d93@load-r6rs-top-level e4e42@filename 'load (e4d7f@command-line)) (void)))) (set! e4d87@ironscheme-build (lambda () (e4d85@load '"ironscheme-buildscript.ss"))) (set! e4d89@eval-top-level (lambda (e4e44@x) (e4999@e2f91@eval e4e44@x (e49af@e2fbd@interaction-environment)))) (set! e4d8b@compile-system-libraries (lambda () (e4d89@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! e4d8d@compile (lambda (e4e46@filename) (e4d93@load-r6rs-top-level e4e46@filename 'compile))) (set! e4d8f@compile->closure (lambda (e4e48@filename) (e4d93@load-r6rs-top-level e4e48@filename 'closure))) (set! e4d91@pre-compile-r6rs-file (lambda (e4e4a@filename) (e4d93@load-r6rs-top-level e4e4a@filename 'compile))) (set! e4d93@load-r6rs-top-level (lambda (e4e4c@filename e4e4d@how . e4e50@args) ((lambda (e4e56@e4e53 e4e57@e4e55) ((lambda (e4e5a@swap) (dynamic-wind e4e5a@swap (lambda () ((lambda (e4e5c@x*) ((lambda (e4e5e@t) (if (memv e4e5e@t '(closure)) (e49ae@e2fbb@pre-compile-r6rs-top-level e4e5c@x*) (if (memv e4e5e@t '(load)) ((lambda (e4e64@e4e61 e4e65@e4e63) ((lambda (e4e68@swap) (dynamic-wind e4e68@swap (lambda () ((e49ad@e2fb9@compile-r6rs-top-level e4e5c@x*))) e4e68@swap)) (lambda () ((lambda (e4e6a@t) (begin (e4e64@e4e61 e4e65@e4e63) (set! e4e65@e4e63 e4e6a@t))) (e4e64@e4e61))))) e4d7f@command-line (cons e4e4c@filename (car e4e50@args))) (if (memv e4e5e@t '(compile)) (begin (e49ad@e2fb9@compile-r6rs-top-level e4e5c@x*) (e2ad3@e2966@serialize-all e2862@e2787@serialize-library e28bc@e2875@compile-core-expr)) (if '#f '#f (void)))))) e4e4d@how)) (with-input-from-file e4e4c@filename (lambda () ((letrec ((e4e6c@f (lambda () ((lambda (e4e6e@x) (if (eof-object? e4e6e@x) '() (cons e4e6e@x (e4e6c@f)))) (e285a@e2777@read-annotated))))) e4e6c@f)))))) e4e5a@swap)) (lambda () ((lambda (e4e70@t) (begin (e4e56@e4e53 e4e57@e4e55) (set! e4e57@e4e55 e4e70@t))) (e4e56@e4e53))))) e2acf@e295e@library-path (e4d81@local-library-path e4e4c@filename)))) (set! e4d95@load-r6rs-top-level-sexp (lambda (e4e72@import-spec e4e73@thunk) ((lambda (e4e7a@e4e77 e4e7b@e4e79) ((lambda (e4e7e@swap) (dynamic-wind e4e7e@swap (lambda () ((lambda (e4e84@e4e81 e4e85@e4e83) ((lambda (e4e88@swap) (dynamic-wind e4e88@swap (lambda () ((e49ad@e2fb9@compile-r6rs-top-level (list (cons 'import e4e72@import-spec) (list e4e73@thunk))))) e4e88@swap)) (lambda () ((lambda (e4e8a@t) (begin (e4e84@e4e81 e4e85@e4e83) (set! e4e85@e4e83 e4e8a@t))) (e4e84@e4e81))))) e4d7f@command-line '())) e4e7e@swap)) (lambda () ((lambda (e4e8c@t) (begin (e4e7a@e4e77 e4e7b@e4e79) (set! e4e7b@e4e79 e4e8c@t))) (e4e7a@e4e77))))) e2acf@e295e@library-path (e4d81@local-library-path '"")))) (begin (set! e4ea2@e4d95@load-r6rs-top-level-sexp e4d95@load-r6rs-top-level-sexp) (set! e4ea1@e4d93@load-r6rs-top-level e4d93@load-r6rs-top-level) (set! e4ea0@e4d91@pre-compile-r6rs-file e4d91@pre-compile-r6rs-file) (set! e4e9f@e4d8f@compile->closure e4d8f@compile->closure) (set! e4e9e@e4d8d@compile e4d8d@compile) (set! e4e9d@e4d8b@compile-system-libraries e4d8b@compile-system-libraries) (set! e4e9c@e4d89@eval-top-level e4d89@eval-top-level) (set! e4e9b@e4d87@ironscheme-build e4d87@ironscheme-build) (set! e4e9a@e4d85@load e4d85@load) (set! e4e99@e4d83@load/args e4d83@load/args) (set! e4e98@e4d81@local-library-path e4d81@local-library-path) (set! e4e97@e4d7f@command-line e4d7f@command-line) (set! e4e96@e4d7d@trace-printer e4d7d@trace-printer) (set! e4e95@e4d7b@repl e4d7b@repl) (set! e4e94@e4d79@map-with-index e4d79@map-with-index) (set! e4e93@e4d77@record->field-alist e4d77@record->field-alist) (set! e4e92@e4d75@condition-printer e4d75@condition-printer) (set! e4e91@e4d73@rpad e4d73@rpad) (set! e4e90@e4d71@for-each-with-index e4d71@for-each-with-index) (set! e4e8f@e4d6f@parse-and-add-library-path e4d6f@parse-and-add-library-path) (set! e4e8e@e4d6d@add-library-path! e4d6d@add-library-path!) (e2ad4@e2968@current-precompiled-library-loader e2863@e2789@load-serialized-library) (set-symbol-value! 'load e4d85@load) (set-symbol-value! 'pre-compile-r6rs-file e4d91@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs e4d89@eval-top-level) (set-symbol-value! 'int-env-syms e4990@e2f7f@interaction-environment-symbols) (set-symbol-value! 'expanded2core e28bb@e2873@expanded->core) (set-symbol-value! 'trace-printer e4d7d@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (e4d96@c) (condition (e4cca@e4ad4@make-non-continuable-violation) (e4cc0@e4abb@make-who-condition 'raise) (e4c84@e4a1c@make-message-condition '"returned from non-continuable exception") (e4cb6@e4aa0@make-irritants-condition (list e4d96@c))))) (e4d6f@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (e4d6f@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (e4d6d@add-library-path! (string-append (mosh-executable-path) '"/lib")) (e4d6d@add-library-path! (string-append (current-directory) '"/lib"))) (e4d6d@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (e4d98@prefix) (e2ad0@e2960@library-extensions (e4d98@prefix '".mosh" (e2ad0@e2960@library-extensions)))) (lambda (e4d9a@ext e4d9b@ls) (append (map (lambda (e4d9e@x) (string-append e4d9a@ext e4d9e@x)) e4d9b@ls) e4d9b@ls))) ((lambda (e4da0@args e4da1@port) ((lambda (e4da5@ref) (begin (set! e4da5@ref (lambda (e4db0@rtd e4db1@i e4db2@x) ((lambda (e4db6@val) (if (symbol? e4db6@val) (ungensym e4db6@val) e4db6@val)) ((record-accessor e4db0@rtd e4db1@i) e4db2@x)))) (with-exception-handler (lambda (e4da6@c) (if (condition? e4da6@c) (e4d75@condition-printer e4da6@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" e4da6@c))) (lambda () (if ((call/cc (lambda (e4daa@e4da8) (lambda () (with-exception-handler (lambda (e4dac@c) ((call/cc (lambda (e4dae@e4da9) (e4daa@e4da8 (lambda () (if '#t '#f (e4dae@e4da9 (lambda () (raise-continuable e4dac@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (e4d95@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? e4da0@args) (e4d7b@repl) (e4d93@load-r6rs-top-level (car e4da0@args) 'load (cdr e4da0@args)))))))) '#f)) (e4d7f@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
