;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (r276e@read-annotated r2770@annotation-stripped r2772@annotation? r2774@annotation-source r2776@annotation-expression r2778@scm->fasl r277a@fasl-save r277c@fasl-load r277e@serialize-library r2780@load-serialized-library r2782@make-record-printer r2784@compile-core r2786@read-library-source-file r2788@make-parameter r27f0@file-options-spec) (begin (set! r276e@read-annotated read) (set! r2770@annotation-stripped (lambda (r27f1@x) (r2776@annotation-expression r27f1@x))) (set! r2772@annotation? (lambda (r27f3@x) (source-info r27f3@x))) (set! r2774@annotation-source (lambda (r27f5@x) (source-info r27f5@x))) (set! r2776@annotation-expression (lambda (r27f7@x) (if (pair? r27f7@x) (cons (car r27f7@x) (cdr r27f7@x)) (display '"line:46\n")))) (set! r2778@scm->fasl (lambda (r27f9@filename) (string-append r27f9@filename '".fasl"))) (set! r277a@fasl-save (lambda (r27fb@filename r27fc@obj) (call-with-port (open-file-output-port r27fb@filename) (lambda (r27ff@port) ((symbol-value 'fasl-write!) r27fc@obj r27ff@port))))) (set! r277c@fasl-load (lambda (r2801@filename) (call-with-port (open-file-input-port r2801@filename) (symbol-value 'fasl-read!)))) (set! r277e@serialize-library (lambda (r2803@filename r2804@obj) (begin (format '#t '"serialize-library ~a\n..." r2803@filename) ((lambda (r2807@expanded2core) ((lambda (r2809@compile) ((lambda (r280b@code) ((lambda (r280d@pivot) ((lambda (r280f@visit) ((lambda () (begin (set-car! r280d@pivot r280f@visit) ((lambda (r2811@pivot) ((lambda (r2813@invoke) ((lambda () (set-car! r2811@pivot r2813@invoke)))) (r2809@compile (r2807@expanded2core (car r2811@pivot))))) (cdr r280d@pivot)))))) (r2809@compile (r2807@expanded2core (car r280d@pivot))))) (cddddr (cddddr r280b@code)))) r2804@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (r2815@fasl-file) (begin (if (file-exists? r2815@fasl-file) (delete-file r2815@fasl-file) (void)) ((call/cc (lambda (r2819@r2817) (lambda () (with-exception-handler (lambda (r281b@c) ((call/cc (lambda (r281d@r2818) (r2819@r2817 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " r2803@filename) (if (file-exists? r2815@fasl-file) (delete-file r2815@fasl-file) (void)) '#f) (r281d@r2818 (lambda () (raise-continuable r281b@c)))))))))) (lambda () (begin (r277a@fasl-save r2815@fasl-file r2804@obj) (display '"OK\n")))))))))) (r2778@scm->fasl r2803@filename))))) (set! r2780@load-serialized-library (lambda (r281f@filename r2820@obj) ((lambda (r2823@fasl-file) (if (and (file-exists? r2823@fasl-file) ((symbol-value 'file-newer?) r2823@fasl-file r281f@filename)) ((lambda (r2825@expanded2core) ((lambda (r2827@eval-compiled-core) ((lambda (r2829@code) ((lambda (r282b@pivot) ((lambda (r282d@visit) ((lambda (r282f@visit-proc) ((lambda () (begin (set-car! r282b@pivot r282f@visit-proc) ((lambda (r2831@pivot) ((lambda (r2833@invoke) ((lambda () (begin (set-car! r2831@pivot (lambda () (r2827@eval-compiled-core r2833@invoke))) (apply r2820@obj r2829@code))))) (car r2831@pivot))) (cdr r282b@pivot)) '#t)))) (lambda () (r2827@eval-compiled-core r282d@visit)))) (car r282b@pivot))) (cddddr (cddddr r2829@code)))) (r277c@fasl-load r2823@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (r2778@scm->fasl r281f@filename)))) (set! r2782@make-record-printer (lambda (r2835@name r2836@printer) (lambda r2839@x (begin (display '"record printer") (for-each display r2839@x))))) (set! r2784@compile-core (lambda r283b@x (apply error 'comile-core '"not implementated" r283b@x))) (set! r2786@read-library-source-file (lambda (r283d@file-name) (with-input-from-file r283d@file-name r276e@read-annotated))) (set! r2788@make-parameter (lambda r284d ((lambda (r284e) (if (= r284e '1) (apply (lambda (r283f@x) (r2788@make-parameter r283f@x (lambda (r2841@x) r2841@x))) r284d) (if (= r284e '2) (apply (lambda (r2843@x r2844@fender) ((lambda (r2847@x) (lambda r284b ((lambda (r284c) (if (= r284c '0) (apply (lambda () r2847@x) r284b) (if (= r284c '1) (apply (lambda (r2849@v) (set! r2847@x (r2844@fender r2849@v))) r284b) (error 'apply '"invalid arg count")))) (length r284b)))) (r2844@fender r2843@x))) r284d) (error 'apply '"invalid arg count")))) (length r284d)))) (set! r27f0@file-options-spec (lambda (r284f@x) r284f@x)) (begin (set! r285f@r27f0@file-options-spec r27f0@file-options-spec) (set! r285e@r2788@make-parameter r2788@make-parameter) (set! r285d@r2786@read-library-source-file r2786@read-library-source-file) (set! r285c@r2784@compile-core r2784@compile-core) (set! r285b@r2782@make-record-printer r2782@make-record-printer) (set! r285a@r2780@load-serialized-library r2780@load-serialized-library) (set! r2859@r277e@serialize-library r277e@serialize-library) (set! r2858@r277c@fasl-load r277c@fasl-load) (set! r2857@r277a@fasl-save r277a@fasl-save) (set! r2856@r2778@scm->fasl r2778@scm->fasl) (set! r2855@r2776@annotation-expression r2776@annotation-expression) (set! r2854@r2774@annotation-source r2774@annotation-source) (set! r2853@r2772@annotation? r2772@annotation?) (set! r2852@r2770@annotation-stripped r2770@annotation-stripped) (set! r2851@r276e@read-annotated r276e@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (r2864@current-primitive-locations r2866@mutable? r2868@rewriter r286a@expanded->core r286c@compile-core-expr r286e@pretty-print r2870@compile-core-expr-to-port) (begin (set! r2864@current-primitive-locations (r285e@r2788@make-parameter (lambda (r2871@x) '#f) (lambda (r2873@p) r2873@p))) (set! r2866@mutable? (lambda (r2875@x) (or (pair? r2875@x) (vector? r2875@x) (hashtable? r2875@x)))) (set! r2868@rewriter (lambda (r2877@quote-hack?) ((lambda (r287a@f) (begin (set! r287a@f (lambda (r287b@x) (if (pair? r287b@x) ((lambda (r287d@t) (if (memv r287d@t '(quote)) (if (and r2877@quote-hack? (r2866@mutable? (cadr r287b@x))) ((lambda (r287f@g) (begin (set-symbol-value! r287f@g (cadr r287b@x)) r287f@g)) (gensym)) r287b@x) (if (memv r287d@t '(case-lambda)) (cons 'case-lambda (map (lambda (r2881@x) (cons (car r2881@x) (map r287a@f (cdr r2881@x)))) (cdr r287b@x))) (if (memv r287d@t '(lambda)) (cons* 'lambda (cadr r287b@x) (map r287a@f (cddr r287b@x))) (if (memv r287d@t '(letrec)) ((lambda (r2883@bindings r2884@body*) ((lambda (r2887@lhs* r2888@rhs*) (cons* 'letrec (map list r2887@lhs* (map r287a@f r2888@rhs*)) (map r287a@f r2884@body*))) (map car r2883@bindings) (map cadr r2883@bindings))) (cadr r287b@x) (cddr r287b@x)) (if (memv r287d@t '(letrec*)) ((lambda (r288b@bindings r288c@body*) ((lambda (r288f@lhs* r2890@rhs*) (cons* 'letrec* (map list r288f@lhs* (map r287a@f r2890@rhs*)) (map r287a@f r288c@body*))) (map car r288b@bindings) (map cadr r288b@bindings))) (cadr r287b@x) (cddr r287b@x)) (if (memv r287d@t '(library-letrec*)) ((lambda (r2893@name r2894@x) ((lambda (r2897@bindings r2898@body*) ((lambda (r289b@lhs* r289c@lhs** r289d@rhs*) (cons* 'library-letrec* r2893@name (map list r289b@lhs* r289c@lhs** (map r287a@f r289d@rhs*)) (map r287a@f r2898@body*))) (map car r2897@bindings) (map cadr r2897@bindings) (map caddr r2897@bindings))) (cadr r2894@x) (cddr r2894@x))) (cadr r287b@x) (cdr r287b@x)) (if (memv r287d@t '(begin)) (cons 'begin (map r287a@f (cdr r287b@x))) (if (memv r287d@t '(set!)) (list 'set! (cadr r287b@x) (r287a@f (caddr r287b@x))) (if (memv r287d@t '(primitive)) ((lambda (r28a1@op) ((lambda (r28a3@t) (if r28a3@t ((lambda (r28a5@loc) r28a5@loc) r28a3@t) r28a1@op)) ((r2864@current-primitive-locations) r28a1@op))) (cadr r287b@x)) (if (memv r287d@t '(define)) r287b@x (if (list? r287b@x) (map r287a@f r287b@x) (error 'rewrite '"invalid form ~s ~s" r287b@x (list? r287b@x)))))))))))))) (car r287b@x)) r287b@x))) r287a@f)) '#f))) (set! r286a@expanded->core (lambda (r28a7@x) ((r2868@rewriter '#f) r28a7@x))) (set! r286c@compile-core-expr (lambda (r28a9@x) ((r2868@rewriter '#f) r28a9@x))) (set! r286e@pretty-print write) (set! r2870@compile-core-expr-to-port (lambda (r28ab@x r28ac@p) (r286e@pretty-print ((r2868@rewriter '#f) r28ab@x) r28ac@p))) (begin (set! r28b5@r2870@compile-core-expr-to-port r2870@compile-core-expr-to-port) (set! r28b4@r286e@pretty-print r286e@pretty-print) (set! r28b3@r286c@compile-core-expr r286c@compile-core-expr) (set! r28b2@r286a@expanded->core r286a@expanded->core) (set! r28b1@r2868@rewriter r2868@rewriter) (set! r28b0@r2866@mutable? r2866@mutable?) (set! r28af@r2864@current-primitive-locations r2864@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (r2904@make-collection r2906@current-library-collection r290c@r2907 r290e@r2909 r2910@r2908 r2913@library? r2915@make-library r2917@library-id r2919@library-name r291b@library-version r291d@library-imp* r291f@library-vis* r2921@library-inv* r2923@library-subst r2925@library-env r2927@library-visit-state r2929@library-invoke-state r292b@library-visit-code r292d@library-invoke-code r292f@library-visible? r2931@library-source-file-name r2933@set-library-id! r2935@set-library-name! r2937@set-library-version! r2939@set-library-imp*! r293b@set-library-vis*! r293d@set-library-inv*! r293f@set-library-subst! r2941@set-library-env! r2943@set-library-visit-state! r2945@set-library-invoke-state! r2947@set-library-visit-code! r2949@set-library-invoke-code! r294b@set-library-visible?! r294d@set-library-source-file-name! r294f@rp r2951@find-dependencies r2953@find-library-by r2955@library-path r2957@library-extensions r2959@library-name->file-name r295b@file-locator r295d@serialize-all r295f@current-precompiled-library-loader r2961@try-load-from-file r2963@library-loader r2965@current-library-expander r2967@external-pending-libraries r2969@find-external-library r296b@find-library-by-name r296d@library-exists? r296f@find-library-by-spec/die r2971@label->binding-table r2973@install-library-record r2975@install-library r2977@imported-label->binding r2979@invoke-library r297b@visit-library r297d@invoke-library-by-spec r297f@installed-libraries r2981@library-spec) (begin (set! r2904@make-collection (lambda () ((lambda (r2982@set) ((lambda (r2985@set-cons) (begin (set! r2985@set-cons (lambda (r298a@x r298b@ls) (if (memq r298a@x r298b@ls) r298b@ls (cons r298a@x r298b@ls)))) (lambda r2988 ((lambda (r2989) (if (= r2989 '0) (apply (lambda () r2982@set) r2988) (if (= r2989 '1) (apply (lambda (r2986@x) (set! r2982@set (r2985@set-cons r2986@x r2982@set))) r2988) (error 'apply '"invalid arg count")))) (length r2988))))) '#f)) '()))) (set! r2906@current-library-collection (r285e@r2788@make-parameter (r2904@make-collection) (lambda (r298e@x) (begin (if (not (procedure? r298e@x)) (assertion-violation 'current-library-collection '"not a procedure" r298e@x) (void)) r298e@x)))) (set! r290c@r2907 (make-record-type-descriptor 'library '#f 'r290a '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! r290e@r2909 '#f) (set! r2910@r2908 (make-record-constructor-descriptor r290c@r2907 '#f r290e@r2909)) (set! r2913@library? (record-predicate r290c@r2907)) (set! r2915@make-library (record-constructor r2910@r2908)) (set! r2917@library-id (record-accessor r290c@r2907 '0)) (set! r2919@library-name (record-accessor r290c@r2907 '1)) (set! r291b@library-version (record-accessor r290c@r2907 '2)) (set! r291d@library-imp* (record-accessor r290c@r2907 '3)) (set! r291f@library-vis* (record-accessor r290c@r2907 '4)) (set! r2921@library-inv* (record-accessor r290c@r2907 '5)) (set! r2923@library-subst (record-accessor r290c@r2907 '6)) (set! r2925@library-env (record-accessor r290c@r2907 '7)) (set! r2927@library-visit-state (record-accessor r290c@r2907 '8)) (set! r2929@library-invoke-state (record-accessor r290c@r2907 '9)) (set! r292b@library-visit-code (record-accessor r290c@r2907 '10)) (set! r292d@library-invoke-code (record-accessor r290c@r2907 '11)) (set! r292f@library-visible? (record-accessor r290c@r2907 '12)) (set! r2931@library-source-file-name (record-accessor r290c@r2907 '13)) (set! r2933@set-library-id! (record-mutator r290c@r2907 '0)) (set! r2935@set-library-name! (record-mutator r290c@r2907 '1)) (set! r2937@set-library-version! (record-mutator r290c@r2907 '2)) (set! r2939@set-library-imp*! (record-mutator r290c@r2907 '3)) (set! r293b@set-library-vis*! (record-mutator r290c@r2907 '4)) (set! r293d@set-library-inv*! (record-mutator r290c@r2907 '5)) (set! r293f@set-library-subst! (record-mutator r290c@r2907 '6)) (set! r2941@set-library-env! (record-mutator r290c@r2907 '7)) (set! r2943@set-library-visit-state! (record-mutator r290c@r2907 '8)) (set! r2945@set-library-invoke-state! (record-mutator r290c@r2907 '9)) (set! r2947@set-library-visit-code! (record-mutator r290c@r2907 '10)) (set! r2949@set-library-invoke-code! (record-mutator r290c@r2907 '11)) (set! r294b@set-library-visible?! (record-mutator r290c@r2907 '12)) (set! r294d@set-library-source-file-name! (record-mutator r290c@r2907 '13)) (set! r294f@rp (r285b@r2782@make-record-printer 'library (lambda (r2990@x r2991@p r2992@wr) (begin (if (not (r2913@library? r2990@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (r291b@library-version r2990@x)) (r2919@library-name r2990@x) (append (r2919@library-name r2990@x) (list (r291b@library-version r2990@x))))) r2991@p))))) (set! r2951@find-dependencies (lambda (r2996@ls) (if (null? r2996@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! r2953@find-library-by (lambda (r2998@pred) ((letrec ((r299a@f (lambda (r299c@ls) (if (null? r299c@ls) '#f (if (r2998@pred (car r299c@ls)) (car r299c@ls) (r299a@f (cdr r299c@ls))))))) r299a@f) ((r2906@current-library-collection))))) (set! r2955@library-path (r285e@r2788@make-parameter '(".") (lambda (r299e@x) (if (and (list? r299e@x) (for-all string? r299e@x)) (map (lambda (r29a0@x) r29a0@x) r299e@x) (assertion-violation 'library-path '"not a list of strings" r299e@x))))) (set! r2957@library-extensions (r285e@r2788@make-parameter '(".sls" ".ss" ".scm") (lambda (r29a2@x) (if (and (list? r29a2@x) (for-all string? r29a2@x)) (map (lambda (r29a4@x) r29a4@x) r29a2@x) (assertion-violation 'library-extensions '"not a list of strings" r29a2@x))))) (set! r2959@library-name->file-name (lambda (r29a6@x) (call-with-values (lambda () (open-string-output-port)) (lambda (r29ac@r29a9 r29ad@r29ab) ((lambda (r29b0@extract r29b1@p) ((lambda (r29b5@display-hex) (begin (set! r29b5@display-hex (lambda (r29be@n) (if (<= '0 r29be@n '9) (display r29be@n r29b1@p) (display (integer->char (+ (char->integer '#\a) (- r29be@n '10))) r29b1@p)))) (begin ((letrec ((r29b6@f (lambda (r29b8@ls) (if (not (null? r29b8@ls)) (begin (display '"/" r29b1@p) (for-each (lambda (r29ba@c) (if (or (char<=? '#\a r29ba@c '#\z) (char<=? '#\A r29ba@c '#\Z) (char<=? '#\0 r29ba@c '#\9) (memv r29ba@c '(#\- #\. #\_ #\~))) (display r29ba@c r29b1@p) (begin (display '"%" r29b1@p) ((lambda (r29bc@n) (begin (r29b5@display-hex (quotient r29bc@n '16)) (r29b5@display-hex (remainder r29bc@n '16)))) (char->integer r29ba@c))))) (string->list (symbol->string (car r29b8@ls)))) (r29b6@f (cdr r29b8@ls))) (void))))) r29b6@f) r29a6@x) (r29b0@extract)))) '#f)) r29ad@r29ab r29ac@r29a9))))) (set! r295b@file-locator (r285e@r2788@make-parameter (lambda (r29c0@x) ((lambda (r29c2@str) ((letrec ((r29c4@f (lambda (r29c6@ls r29c7@exts r29c8@failed-list) (if (null? r29c6@ls) ((lambda () ((lambda (r29d4@r29cf r29d6@r29d1 r29d8@r29d0 r29db@r29ce r29dd@make-library-resolution-condition r29df@r29cc r29e1@r29cd r29e3@library-resolution-condition? r29e5@condition-library r29e7@condition-files) (begin (set! r29d4@r29cf (make-record-type-descriptor '&library-resolution r4c75@r49bc@&condition-rtd 'r29d2 '#f '#f '#((immutable library) (immutable files)))) (set! r29d6@r29d1 '#f) (set! r29d8@r29d0 (make-record-constructor-descriptor r29d4@r29cf r4c76@r49be@&condition-rcd r29d6@r29d1)) (set! r29db@r29ce (record-predicate r29d4@r29cf)) (set! r29dd@make-library-resolution-condition (record-constructor r29d8@r29d0)) (set! r29df@r29cc (record-accessor r29d4@r29cf '0)) (set! r29e1@r29cd (record-accessor r29d4@r29cf '1)) (set! r29e3@library-resolution-condition? (condition-predicate r29d4@r29cf)) (set! r29e5@condition-library (condition-accessor r29d4@r29cf r29df@r29cc)) (set! r29e7@condition-files (condition-accessor r29d4@r29cf r29e1@r29cd)) (raise (condition (r4c95@r4a56@make-error) (r4cb7@r4ab2@make-who-condition 'expander) (r4c7b@r4a13@make-message-condition '"cannot locate library in library-path") (r29dd@make-library-resolution-condition r29c0@x (reverse r29c8@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? r29c7@exts) (r29c4@f (cdr r29c6@ls) (r2957@library-extensions) r29c8@failed-list) ((lambda (r29e8@name) (if (file-exists? r29e8@name) r29e8@name (r29c4@f r29c6@ls (cdr r29c7@exts) (cons r29e8@name r29c8@failed-list)))) (string-append (car r29c6@ls) r29c2@str (car r29c7@exts)))))))) r29c4@f) (r2955@library-path) (r2957@library-extensions) '())) (r2959@library-name->file-name r29c0@x))) (lambda (r29ea@f) (if (procedure? r29ea@f) r29ea@f (assertion-violation 'file-locator '"not a procedure" r29ea@f))))) (set! r295d@serialize-all (lambda (r29ec@serialize r29ed@compile) ((lambda (r29f1@library-desc) (begin (set! r29f1@library-desc (lambda (r29f4@x) (list (r2917@library-id r29f4@x) (r2919@library-name r29f4@x)))) (for-each (lambda (r29f2@x) (if (r2931@library-source-file-name r29f2@x) (r29ec@serialize (r2931@library-source-file-name r29f2@x) (list (r2917@library-id r29f2@x) (r2919@library-name r29f2@x) (r291b@library-version r29f2@x) (map r29f1@library-desc (r291d@library-imp* r29f2@x)) (map r29f1@library-desc (r291f@library-vis* r29f2@x)) (map r29f1@library-desc (r2921@library-inv* r29f2@x)) (r2923@library-subst r29f2@x) (r2925@library-env r29f2@x) (r29ed@compile (r292b@library-visit-code r29f2@x)) (r29ed@compile (r292d@library-invoke-code r29f2@x)) (r292f@library-visible? r29f2@x))) (void))) ((r2906@current-library-collection))))) '#f))) (set! r295f@current-precompiled-library-loader (r285e@r2788@make-parameter (lambda (r29f6@filename r29f7@sk) '#f))) (set! r2961@try-load-from-file (lambda (r29fa@filename) ((r295f@current-precompiled-library-loader) r29fa@filename (lambda r2a20 ((lambda (r2a21) (if (= r2a21 '11) (apply (lambda (r29fc@id r29fd@name r29fe@ver r29ff@imp* r2a00@vis* r2a01@inv* r2a02@exp-subst r2a03@exp-env r2a04@visit-proc r2a05@invoke-proc r2a06@visible?) ((letrec ((r2a12@f (lambda (r2a14@deps) (if (null? r2a14@deps) (begin (r2975@install-library r29fc@id r29fd@name r29fe@ver r29ff@imp* r2a00@vis* r2a01@inv* r2a02@exp-subst r2a03@exp-env r2a04@visit-proc r2a05@invoke-proc '#f '#f r2a06@visible? '#f) '#t) ((lambda (r2a16@d) ((lambda (r2a18@label r2a19@dname) ((lambda (r2a1c@l) (if (and (r2913@library? r2a1c@l) (eq? r2a18@label (r2917@library-id r2a1c@l))) (r2a12@f (cdr r2a14@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" r29fd@name r2a19@dname r29fa@filename r2a1c@l r2a18@label (r2917@library-id r2a1c@l)) '#f))) (r296b@find-library-by-name r2a19@dname))) (car r2a16@d) (cadr r2a16@d))) (car r2a14@deps)))))) r2a12@f) (append r29ff@imp* r2a00@vis* r2a01@inv*))) r2a20) (if (>= r2a21 '0) (apply (lambda r2a1e@others '#f) r2a20) (error 'apply '"invalid arg count")))) (length r2a20)))))) (set! r2963@library-loader (r285e@r2788@make-parameter (lambda (r2a22@x) ((lambda (r2a24@file-name) (if (not r2a24@file-name) (assertion-violation '#f '"cannot file library" r2a22@x) (or (r2961@try-load-from-file r2a24@file-name) ((r2965@current-library-expander) (r285d@r2786@read-library-source-file r2a24@file-name) r2a24@file-name (lambda (r2a26@name) (if (not (fast-equal? r2a26@name r2a22@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (r2a2c@r2a29 r2a2d@r2a2b) ((lambda (r2a30@e r2a31@p) (begin (display '"expected to find library " r2a31@p) (write r2a22@x r2a31@p) (display '" in file " r2a31@p) (display r2a24@file-name r2a31@p) (display '", found " r2a31@p) (write r2a26@name r2a31@p) (display '" instead" r2a31@p) (r2a30@e))) r2a2d@r2a2b r2a2c@r2a29)))) (void))))))) ((r295b@file-locator) r2a22@x))) (lambda (r2a34@f) (if (procedure? r2a34@f) r2a34@f (assertion-violation 'library-locator '"not a procedure" r2a34@f))))) (set! r2965@current-library-expander (r285e@r2788@make-parameter (lambda (r2a36@x) (assertion-violation 'library-expander '"not initialized")) (lambda (r2a38@f) (if (procedure? r2a38@f) r2a38@f (assertion-violation 'library-expander '"not a procedure" r2a38@f))))) (set! r2967@external-pending-libraries (r285e@r2788@make-parameter '())) (set! r2969@find-external-library (lambda (r2a3a@name) (begin (if (member r2a3a@name (r2967@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" r2a3a@name) (void)) ((lambda (r2a40@r2a3d r2a41@r2a3f) ((lambda (r2a44@swap) (dynamic-wind r2a44@swap (lambda () (begin ((r2963@library-loader) r2a3a@name) (or (r2953@find-library-by (lambda (r2a46@x) (fast-equal? (r2919@library-name r2a46@x) r2a3a@name))) (assertion-violation '#f '"handling external library did not yield the correct library" r2a3a@name)))) r2a44@swap)) (lambda () ((lambda (r2a48@t) (begin (r2a40@r2a3d r2a41@r2a3f) (set! r2a41@r2a3f r2a48@t))) (r2a40@r2a3d))))) r2967@external-pending-libraries (cons r2a3a@name (r2967@external-pending-libraries)))))) (set! r296b@find-library-by-name (lambda (r2a4a@name) (or (r2953@find-library-by (lambda (r2a4c@x) (fast-equal? (r2919@library-name r2a4c@x) r2a4a@name))) (r2969@find-external-library r2a4a@name)))) (set! r296d@library-exists? (lambda (r2a4e@name) (and (r2953@find-library-by (lambda (r2a50@x) (fast-equal? (r2919@library-name r2a50@x) r2a4e@name))) '#t))) (set! r296f@find-library-by-spec/die (lambda (r2a52@spec) ((lambda (r2a54@id) (or (r2953@find-library-by (lambda (r2a56@x) (eq? r2a54@id (r2917@library-id r2a56@x)))) (assertion-violation '#f '"cannot find library with required spec" r2a52@spec))) (car r2a52@spec)))) (set! r2971@label->binding-table (make-eq-hashtable)) (set! r2973@install-library-record (lambda (r2a58@lib) (begin ((lambda (r2a5a@exp-env) (for-each (lambda (r2a5c@x) ((lambda (r2a5e@label r2a5f@binding) ((lambda (r2a62@binding) (begin (if (hashtable-ref r2971@label->binding-table r2a5e@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" r2a5e@label (hashtable-ref r2971@label->binding-table r2a5e@label '#f) r2a62@binding) (exit)) (void)) (hashtable-set! r2971@label->binding-table r2a5e@label r2a62@binding))) ((lambda (r2a64@t) (if (memv r2a64@t '(global)) (cons 'global (cons r2a58@lib (cdr r2a5f@binding))) (if (memv r2a64@t '(global-macro)) (cons 'global-macro (cons r2a58@lib (cdr r2a5f@binding))) (if (memv r2a64@t '(global-macro!)) (cons 'global-macro! (cons r2a58@lib (cdr r2a5f@binding))) r2a5f@binding)))) (car r2a5f@binding)))) (car r2a5c@x) (cdr r2a5c@x))) r2a5a@exp-env)) (r2925@library-env r2a58@lib)) ((r2906@current-library-collection) r2a58@lib)))) (set! r2975@install-library (lambda (r2a66@id r2a67@name r2a68@ver r2a69@imp* r2a6a@vis* r2a6b@inv* r2a6c@exp-subst r2a6d@exp-env r2a6e@visit-proc r2a6f@invoke-proc r2a70@visit-code r2a71@invoke-code r2a72@visible? r2a73@source-file-name) ((lambda (r2a82@imp-lib* r2a83@vis-lib* r2a84@inv-lib*) (begin (if (not (and (symbol? r2a66@id) (list? r2a67@name) (list? r2a68@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" r2a66@id r2a67@name r2a68@ver) (void)) (if (r296d@library-exists? r2a67@name) (assertion-violation 'install-library '"library is already installed" r2a67@name) (void)) ((lambda (r2a88@lib) (r2973@install-library-record r2a88@lib)) (r2915@make-library r2a66@id r2a67@name r2a68@ver r2a82@imp-lib* r2a83@vis-lib* r2a84@inv-lib* r2a6c@exp-subst r2a6d@exp-env r2a6e@visit-proc r2a6f@invoke-proc r2a70@visit-code r2a71@invoke-code r2a72@visible? r2a73@source-file-name)))) (map r296f@find-library-by-spec/die r2a69@imp*) (map r296f@find-library-by-spec/die r2a6a@vis*) (map r296f@find-library-by-spec/die r2a6b@inv*)))) (set! r2977@imported-label->binding (lambda (r2a8a@lab) (hashtable-ref r2971@label->binding-table r2a8a@lab '#f))) (set! r2979@invoke-library (lambda (r2a8c@lib) ((lambda (r2a8e@invoke) (if (procedure? r2a8e@invoke) (begin (r2945@set-library-invoke-state! r2a8c@lib (lambda () (assertion-violation 'invoke '"circularity detected" r2a8c@lib))) (for-each r2979@invoke-library (r2921@library-inv* r2a8c@lib)) (r2945@set-library-invoke-state! r2a8c@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" r2a8c@lib))) (r2a8e@invoke) (r2945@set-library-invoke-state! r2a8c@lib '#t)) (void))) (r2929@library-invoke-state r2a8c@lib)))) (set! r297b@visit-library (lambda (r2a90@lib) ((lambda (r2a92@visit) (if (procedure? r2a92@visit) (begin (r2943@set-library-visit-state! r2a90@lib (lambda () (assertion-violation 'visit '"circularity detected" r2a90@lib))) (for-each r2979@invoke-library (r291f@library-vis* r2a90@lib)) (r2943@set-library-visit-state! r2a90@lib (lambda () (assertion-violation 'invoke '"first visit did not return" r2a90@lib))) (r2a92@visit) (r2943@set-library-visit-state! r2a90@lib '#t)) (void))) (r2927@library-visit-state r2a90@lib)))) (set! r297d@invoke-library-by-spec (lambda (r2a94@spec) (r2979@invoke-library (r296f@find-library-by-spec/die r2a94@spec)))) (set! r297f@installed-libraries (lambda r2a9c ((lambda (r2a9d) (if (= r2a9d '1) (apply (lambda (r2a96@all?) ((letrec ((r2a98@f (lambda (r2a9a@ls) (if (null? r2a9a@ls) '() (if (or r2a96@all? (r292f@library-visible? (car r2a9a@ls))) (cons (car r2a9a@ls) (r2a98@f (cdr r2a9a@ls))) (r2a98@f (cdr r2a9a@ls))))))) r2a98@f) ((r2906@current-library-collection)))) r2a9c) (if (= r2a9d '0) (apply (lambda () (r297f@installed-libraries '#f)) r2a9c) (error 'apply '"invalid arg count")))) (length r2a9c)))) (set! r2981@library-spec (lambda (r2a9e@x) (begin (if (not (r2913@library? r2a9e@x)) (assertion-violation 'library-spec '"not a library" r2a9e@x) (void)) (list (r2917@library-id r2a9e@x) (r2919@library-name r2a9e@x) (r291b@library-version r2a9e@x))))) (begin (set! r2adc@r2981@library-spec r2981@library-spec) (set! r2adb@r297f@installed-libraries r297f@installed-libraries) (set! r2ada@r297d@invoke-library-by-spec r297d@invoke-library-by-spec) (set! r2ad9@r297b@visit-library r297b@visit-library) (set! r2ad8@r2979@invoke-library r2979@invoke-library) (set! r2ad7@r2977@imported-label->binding r2977@imported-label->binding) (set! r2ad6@r2975@install-library r2975@install-library) (set! r2ad5@r2973@install-library-record r2973@install-library-record) (set! r2ad4@r2971@label->binding-table r2971@label->binding-table) (set! r2ad3@r296f@find-library-by-spec/die r296f@find-library-by-spec/die) (set! r2ad2@r296d@library-exists? r296d@library-exists?) (set! r2ad1@r296b@find-library-by-name r296b@find-library-by-name) (set! r2ad0@r2969@find-external-library r2969@find-external-library) (set! r2acf@r2967@external-pending-libraries r2967@external-pending-libraries) (set! r2ace@r2965@current-library-expander r2965@current-library-expander) (set! r2acd@r2963@library-loader r2963@library-loader) (set! r2acc@r2961@try-load-from-file r2961@try-load-from-file) (set! r2acb@r295f@current-precompiled-library-loader r295f@current-precompiled-library-loader) (set! r2aca@r295d@serialize-all r295d@serialize-all) (set! r2ac9@r295b@file-locator r295b@file-locator) (set! r2ac8@r2959@library-name->file-name r2959@library-name->file-name) (set! r2ac7@r2957@library-extensions r2957@library-extensions) (set! r2ac6@r2955@library-path r2955@library-path) (set! r2ac5@r2953@find-library-by r2953@find-library-by) (set! r2ac4@r2951@find-dependencies r2951@find-dependencies) (set! r2ac3@r294f@rp r294f@rp) (set! r2ac2@r294d@set-library-source-file-name! r294d@set-library-source-file-name!) (set! r2ac1@r294b@set-library-visible?! r294b@set-library-visible?!) (set! r2ac0@r2949@set-library-invoke-code! r2949@set-library-invoke-code!) (set! r2abf@r2947@set-library-visit-code! r2947@set-library-visit-code!) (set! r2abe@r2945@set-library-invoke-state! r2945@set-library-invoke-state!) (set! r2abd@r2943@set-library-visit-state! r2943@set-library-visit-state!) (set! r2abc@r2941@set-library-env! r2941@set-library-env!) (set! r2abb@r293f@set-library-subst! r293f@set-library-subst!) (set! r2aba@r293d@set-library-inv*! r293d@set-library-inv*!) (set! r2ab9@r293b@set-library-vis*! r293b@set-library-vis*!) (set! r2ab8@r2939@set-library-imp*! r2939@set-library-imp*!) (set! r2ab7@r2937@set-library-version! r2937@set-library-version!) (set! r2ab6@r2935@set-library-name! r2935@set-library-name!) (set! r2ab5@r2933@set-library-id! r2933@set-library-id!) (set! r2ab4@r2931@library-source-file-name r2931@library-source-file-name) (set! r2ab3@r292f@library-visible? r292f@library-visible?) (set! r2ab2@r292d@library-invoke-code r292d@library-invoke-code) (set! r2ab1@r292b@library-visit-code r292b@library-visit-code) (set! r2ab0@r2929@library-invoke-state r2929@library-invoke-state) (set! r2aaf@r2927@library-visit-state r2927@library-visit-state) (set! r2aae@r2925@library-env r2925@library-env) (set! r2aad@r2923@library-subst r2923@library-subst) (set! r2aac@r2921@library-inv* r2921@library-inv*) (set! r2aab@r291f@library-vis* r291f@library-vis*) (set! r2aaa@r291d@library-imp* r291d@library-imp*) (set! r2aa9@r291b@library-version r291b@library-version) (set! r2aa8@r2919@library-name r2919@library-name) (set! r2aa7@r2917@library-id r2917@library-id) (set! r2aa6@r2915@make-library r2915@make-library) (set! r2aa5@r2913@library? r2913@library?) (set! r2aa4@r2910@r2908 r2910@r2908) (set! r2aa3@r290e@r2909 r290e@r2909) (set! r2aa2@r290c@r2907 r290c@r2907) (set! r2aa1@r2906@current-library-collection r2906@current-library-collection) (set! r2aa0@r2904@make-collection r2904@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (r2adf@build-global-define r2b50@build-lambda r2b52@build-case-lambda r2b54@build-let r2b82@build-sequence r2b84@build-void r2b86@build-letrec r2b88@build-letrec* r2b8a@build-library-letrec* r2b8c@build-receive) (begin (set! r2adf@build-global-define (lambda (r2b8d@x) (r2b84@build-void))) (set! r2b50@build-lambda (lambda (r2b8f@ae r2b90@vars r2b91@exp) (list 'lambda r2b90@vars r2b91@exp))) (set! r2b52@build-case-lambda (lambda (r2b95@ae r2b96@vars* r2b97@exp*) ((lambda (r2b9c@build-error r2b9e@build-pred r2ba0@build-apply r2ba2@expand-case-lambda) (begin (set! r2b9c@build-error (lambda (r2bd3@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! r2b9e@build-pred (lambda (r2bbb@ae r2bbc@n r2bbd@vars) (call-with-values (lambda () ((letrec ((r2bc5@f (lambda (r2bc7@vars r2bc8@count) (if (pair? r2bc7@vars) (r2bc5@f (cdr r2bc7@vars) (+ r2bc8@count '1)) (if (null? r2bc7@vars) (values r2bc8@count '=) (values r2bc8@count '>=)))))) r2bc5@f) r2bbd@vars '0)) (lambda (r2bcb@r2bc2 r2bcc@r2bc4) ((lambda (r2bcf@pred r2bd0@count) (list (list 'primitive r2bcf@pred) r2bbc@n (list 'quote r2bd0@count))) r2bcc@r2bc4 r2bcb@r2bc2))))) (set! r2ba0@build-apply (lambda (r2bb3@ae r2bb4@g r2bb5@vars r2bb6@exp) (list '(primitive apply) (r2b50@build-lambda r2bb3@ae r2bb5@vars r2bb6@exp) r2bb4@g))) (set! r2ba2@expand-case-lambda (lambda (r2ba3@ae r2ba4@vars r2ba5@exp*) ((lambda (r2ba9@g r2baa@n) (list 'lambda r2ba9@g (r2b54@build-let r2ba3@ae (list r2baa@n) (list (list '(primitive length) r2ba9@g)) ((letrec ((r2bad@f (lambda (r2baf@vars* r2bb0@exp*) (if (null? r2baf@vars*) (r2b9c@build-error r2ba3@ae) (list 'if (r2b9e@build-pred r2ba3@ae r2baa@n (car r2baf@vars*)) (r2ba0@build-apply r2ba3@ae r2ba9@g (car r2baf@vars*) (car r2bb0@exp*)) (r2bad@f (cdr r2baf@vars*) (cdr r2bb0@exp*))))))) r2bad@f) r2b96@vars* r2ba5@exp*)))) (gensym) (gensym)))) (if (= (length r2b97@exp*) '1) (r2b50@build-lambda r2b95@ae (car r2b96@vars*) (car r2b97@exp*)) (r2ba2@expand-case-lambda r2b95@ae r2b96@vars* r2b97@exp*)))) '#f '#f '#f '#f))) (set! r2b54@build-let (lambda (r2bd5@ae r2bd6@lhs* r2bd7@rhs* r2bd8@body) (cons (r2b50@build-lambda r2bd5@ae r2bd6@lhs* r2bd8@body) r2bd7@rhs*))) (set! r2b82@build-sequence (lambda (r2bdd@ae r2bde@exps) ((letrec ((r2be1@loop (lambda (r2be3@exps) (if (null? (cdr r2be3@exps)) (car r2be3@exps) (if (equal? (car r2be3@exps) (r2b84@build-void)) (r2be1@loop (cdr r2be3@exps)) (cons 'begin r2be3@exps)))))) r2be1@loop) r2bde@exps))) (set! r2b84@build-void (lambda () '((primitive void)))) (set! r2b86@build-letrec (lambda (r2be5@ae r2be6@vars r2be7@val-exps r2be8@body-exp) (if (null? r2be6@vars) r2be8@body-exp (list 'letrec (map list r2be6@vars r2be7@val-exps) r2be8@body-exp)))) (set! r2b88@build-letrec* (lambda (r2bed@ae r2bee@vars r2bef@val-exps r2bf0@body-exp) (if (null? r2bee@vars) r2bf0@body-exp (r2b54@build-let r2bed@ae r2bee@vars (map (lambda (r2bf5@x) (list 'quote '#f)) r2bee@vars) (r2b82@build-sequence r2bed@ae (append (map (lambda (r2bf7@lhs r2bf8@rhs) (list 'set! r2bf7@lhs r2bf8@rhs)) r2bee@vars r2bef@val-exps) (list r2bf0@body-exp))))))) (set! r2b8a@build-library-letrec* (lambda (r2bfb@ae r2bfc@name r2bfd@vars r2bfe@locs r2bff@val-exps r2c00@body-exp) (list 'library-letrec* r2bfc@name (map list r2bfd@vars r2bfe@locs r2bff@val-exps) r2c00@body-exp))) (set! r2b8c@build-receive (lambda (r2c07@ae r2c08@vars r2c09@producer r2c0a@body*) (begin (display '"************** in ") (cons 'receive (cons r2c08@vars (cons r2c09@producer r2c0a@body*)))))) (begin (set! r2c18@r2b8c@build-receive r2b8c@build-receive) (set! r2c17@r2b8a@build-library-letrec* r2b8a@build-library-letrec*) (set! r2c16@r2b88@build-letrec* r2b88@build-letrec*) (set! r2c15@r2b86@build-letrec r2b86@build-letrec) (set! r2c14@r2b84@build-void r2b84@build-void) (set! r2c13@r2b82@build-sequence r2b82@build-sequence) (set! r2c12@r2b54@build-let r2b54@build-let) (set! r2c11@r2b52@build-case-lambda r2b52@build-case-lambda) (set! r2c10@r2b50@build-lambda r2b50@build-lambda) (set! r2c0f@r2adf@build-global-define r2adf@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (r2c27@file-options-macro r2c29@set-cons r2c2b@set-union r2c30@top-mark* r2c32@top-marked? r2c34@gen-lexical r2c36@gen-global r2c38@gen-label r2c3a@gen-top-level-label r2c3c@gen-define-label+loc r2c3e@gen-define-label r2c44@r2c3f r2c46@r2c41 r2c48@r2c40 r2c4b@rib? r2c4d@make-rib r2c4f@rib-sym* r2c51@rib-mark** r2c53@rib-label* r2c55@rib-sealed/freq r2c57@rib-cache r2c59@set-rib-sym*! r2c5b@set-rib-mark**! r2c5d@set-rib-label*! r2c5f@set-rib-sealed/freq! r2c61@set-rib-cache! r2c63@make-empty-rib r2c65@extend-rib! r2c67@extend-rib/nc! r2c69@make-rib-map r2c6b@seal-rib! r2c6d@unseal-rib! r2c6f@make-full-rib r2c75@r2c70 r2c77@r2c72 r2c79@r2c71 r2c7c@stx? r2c7e@make-stx r2c80@stx-expr r2c82@stx-mark* r2c84@stx-subst* r2c86@stx-ae* r2c88@set-stx-expr! r2c8a@set-stx-mark*! r2c8c@set-stx-subst*! r2c8e@set-stx-ae*! r2c90@rp r2c92@datum->stx r2c94@gen-mark r2c96@anti-mark r2c98@anti-mark? r2c9a@join-wraps r2c9c@mkstx r2c9e@add-mark r2ca0@add-subst r2ca2@syntax-kind? r2ca4@syntax-vector->list r2ca6@syntax-pair? r2ca8@syntax-vector? r2caa@syntax-null? r2cac@syntax-list? r2cae@syntax-car r2cb0@syntax-cdr r2cb2@syntax->list r2cb4@id? r2cb6@id->sym r2cb8@same-marks? r2cba@bound-id=? r2cbc@free-id=? r2cbe@valid-bound-ids? r2cc0@distinct-bound-ids? r2cc2@bound-id-member? r2cc4@self-evaluating? r2cc6@strip-annotations r2cc8@strip r2cca@stx->datum r2ccc@same-marks*? r2cce@id->label r2cd0@id->real-label r2cd2@label->binding r2cd4@make-binding r2cd6@binding-type r2cd8@binding-value r2cda@raise-unbound-error r2cdc@syntax-type r2cea@sanitize-binding r2cec@make-variable-transformer r2cee@variable-transformer? r2cf0@variable-transformer-procedure r2cf2@make-eval-transformer r2e43@parse-define r2e45@parse-define-syntax r2e47@scheme-stx-hashtable r2e49@scheme-stx r2e4b@lexical-var r2e4d@lexical-mutable? r2e4f@set-lexical-mutable! r2e51@add-lexical r2e53@add-lexicals r2e55@letrec-helper r2e57@letrec-transformer r2e59@letrec*-transformer r2e5b@fluid-let-syntax-transformer r2e5d@type-descriptor-transformer r2e5f@record-type-descriptor-transformer r2e61@record-constructor-descriptor-transformer r2e63@when-macro r2e65@unless-macro r2e67@if-transformer r2e69@and-transformer r2e6b@or-transformer r2e6d@case-macro r2e6f@quote-transformer r2e71@case-lambda-transformer r2e73@lambda-transformer r2e75@bless r2e77@with-syntax-macro r2e79@invalid-fmls-error r2e7b@let-macro r2e7d@let-values-macro r2e7f@let*-values-macro r2e81@trace-lambda-macro r2e83@trace-define-macro r2e85@trace-define-syntax-macro r2e87@trace-let/rec-syntax r2e89@trace-let-syntax-macro r2e8b@trace-letrec-syntax-macro r2e8d@guard-macro r2e8f@define-enumeration-macro r2e91@time-macro r2e93@delay-macro r2e95@assert-macro r2e97@endianness-macro r2e99@identifier-syntax-macro r2e9b@do-macro r2e9d@let*-macro r2e9f@or-macro r2ea1@and-macro r2ea3@cond-macro r2ea5@do-include r2ea7@include-macro r2ea9@include-into-macro r2eab@syntax-rules-macro r2ead@quasiquote-macro r2eaf@quasisyntax-macro r2eb1@define-struct-macro r2eb3@define-record-type-macro r2eb5@define-condition-type-macro r2eb7@incorrect-usage-macro r2eb9@parameterize-macro r2ebb@foreign-call-transformer r2ebd@convert-pattern r2ebf@syntax-dispatch r2ec1@ellipsis? r2ec3@underscore? r2ec5@verify-literals r2ec7@syntax-case-transformer r2ec9@ellipsis-map r2ecb@syntax-transformer r2ecd@core-macro-transformer r2ecf@symbol-macro r2ed1@macro-transformer r2ed3@local-macro-transformer r2ed5@do-macro-call r2ed7@chi-macro r2ed9@chi-local-macro r2edb@chi-global-macro r2edd@chi-expr* r2edf@chi-application r2ee1@chi-expr r2ee3@chi-set! r2ee5@verify-formals r2ee7@chi-lambda-clause r2ee9@chi-lambda-clause* r2eeb@chi-defun r2eed@chi-rhs r2eef@expand-interaction-rhs*/init* r2ef1@chi-rhs* r2ef3@find-bound=? r2ef5@find-dups r2ef7@chi-internal r2ef9@parse-module r2eff@r2efa r2f01@r2efc r2f03@r2efb r2f06@module-interface? r2f08@make-module-interface r2f0a@module-interface-first-mark r2f0c@module-interface-exp-id-vec r2f0e@module-interface-exp-lab-vec r2f10@set-module-interface-first-mark! r2f12@set-module-interface-exp-id-vec! r2f14@set-module-interface-exp-lab-vec! r2f16@module-interface-exp-id* r2f18@chi-internal-module r2f1a@chi-body* r2f1c@expand-transformer r2f1e@parse-exports r2f20@parse-library-name r2f22@parse-library r2f24@parse-import-spec* r2f26@make-top-rib r2f28@make-collector r2f2a@inv-collector r2f2c@vis-collector r2f2e@imp-collector r2f30@chi-library-internal r2f32@chi-interaction-expr r2f34@library-body-expander r2f36@core-library-expander r2f38@parse-top-level-program r2f3a@top-level-expander r2f40@r2f3b r2f42@r2f3d r2f44@r2f3c r2f47@env? r2f49@make-env r2f4b@env-names r2f4d@env-labels r2f4f@env-itc r2f51@set-env-names! r2f53@set-env-labels! r2f55@set-env-itc! r2f57@rp r2f5d@r2f58 r2f5f@r2f5a r2f61@r2f59 r2f64@interaction-env? r2f66@make-interaction-env r2f68@interaction-env-rib r2f6a@interaction-env-r r2f6c@interaction-env-locs r2f6e@set-interaction-env-rib! r2f70@set-interaction-env-r! r2f72@set-interaction-env-locs! r2f74@rp r2f76@interaction-environment-symbols r2f78@environment-bindings r2f7a@parse-binding r2f7c@environment? r2f7e@environment-symbols r2f80@environment r2f82@null-environment r2f84@scheme-report-environment r2f86@expand r2f88@eval r2f8a@library-expander r2f8c@boot-library-expand r2f8e@rev-map-append r2f90@build-exports r2f92@make-export-subst r2f94@make-export-env/macros r2f96@generate-temporaries r2f98@free-identifier=? r2f9a@bound-identifier=? r2f9c@make-source-condition r2f9e@extract-position-condition r2fa0@expression-position r2fa2@assertion-error r2fa4@syntax-error r2fa6@syntax-violation* r2fa8@syntax-violation r2faa@identifier? r2fac@datum->syntax r2fae@syntax->datum r2fb0@compile-r6rs-top-level r2fb2@pre-compile-r6rs-top-level r2fb4@interaction-environment r2fb6@top-level-context) (begin (set! r2c27@file-options-macro (lambda (r2fb7@x) ((lambda (r2fba@valid-option?) (begin (set! r2fba@valid-option? (lambda (r2fc3@x) (and (r2cb4@id? r2fc3@x) (memq (r2cb6@id->sym r2fc3@x) '(no-fail no-create no-truncate))))) ((lambda (r2fbb@t) ((lambda (r2fbd@ls/false) (if (and r2fbd@ls/false (apply (lambda (r2fbf@opt*) (for-all r2fba@valid-option? r2fbf@opt*)) r2fbd@ls/false)) (apply (lambda (r2fc1@opt*) (r2e75@bless (list 'make-file-options (list 'quote r2fc1@opt*)))) r2fbd@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r2fbb@t))) (r2ebf@syntax-dispatch r2fbb@t '(_ . each-any)))) r2fb7@x))) '#f))) (set! r2c29@set-cons (lambda (r2fc5@x r2fc6@ls) (if (memq r2fc5@x r2fc6@ls) r2fc6@ls (cons r2fc5@x r2fc6@ls)))) (set! r2c2b@set-union (lambda (r2fc9@ls1 r2fca@ls2) (if (null? r2fc9@ls1) r2fca@ls2 (if (memq (car r2fc9@ls1) r2fca@ls2) (r2c2b@set-union (cdr r2fc9@ls1) r2fca@ls2) (cons (car r2fc9@ls1) (r2c2b@set-union (cdr r2fc9@ls1) r2fca@ls2)))))) (set! r2c30@top-mark* '(top)) (set! r2c32@top-marked? (lambda (r2fcd@m*) (memq 'top r2fcd@m*))) (set! r2c34@gen-lexical (lambda (r2fcf@sym) (if (symbol? r2fcf@sym) (gensym r2fcf@sym) (if (r2c7c@stx? r2fcf@sym) (r2c34@gen-lexical (r2cb6@id->sym r2fcf@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" r2fcf@sym))))) (set! r2c36@gen-global (lambda (r2fd1@x) (r2c34@gen-lexical r2fd1@x))) (set! r2c38@gen-label (lambda (r2fd3@_) (gensym))) (set! r2c3a@gen-top-level-label (lambda (r2fd5@id r2fd6@rib) ((lambda (r2fda@find) (begin (set! r2fda@find (lambda (r2fe5@sym r2fe6@mark* r2fe7@sym* r2fe8@mark** r2fe9@label*) (and (pair? r2fe7@sym*) (if (and (eq? r2fe5@sym (car r2fe7@sym*)) (r2cb8@same-marks? r2fe6@mark* (car r2fe8@mark**))) (car r2fe9@label*) (r2fda@find r2fe5@sym r2fe6@mark* (cdr r2fe7@sym*) (cdr r2fe8@mark**) (cdr r2fe9@label*)))))) ((lambda (r2fdb@sym r2fdc@mark*) ((lambda (r2fdf@sym*) ((lambda (r2fe1@t) (if r2fe1@t ((lambda (r2fe3@label) (if (r2ad7@r2977@imported-label->binding r2fe3@label) (gensym) r2fe3@label)) r2fe1@t) (gensym))) (and (memq r2fdb@sym (r2c4f@rib-sym* r2fd6@rib)) (r2fda@find r2fdb@sym r2fdc@mark* r2fdf@sym* (r2c51@rib-mark** r2fd6@rib) (r2c53@rib-label* r2fd6@rib))))) (r2c4f@rib-sym* r2fd6@rib))) (r2cb6@id->sym r2fd5@id) (r2c82@stx-mark* r2fd5@id)))) '#f))) (set! r2c3c@gen-define-label+loc (lambda (r2fef@id r2ff0@rib) ((lambda (r2ff3@t) (if r2ff3@t ((lambda (r2ff5@env) ((lambda (r2ff7@label r2ff8@locs) (values r2ff7@label ((lambda (r2ffb@t) (if r2ffb@t (cdr r2ffb@t) ((lambda (r2ffd@loc) (begin (r2f72@set-interaction-env-locs! r2ff5@env (cons (cons r2ff7@label r2ffd@loc) r2ff8@locs)) r2ffd@loc)) (r2c34@gen-lexical r2fef@id)))) (assq r2ff7@label r2ff8@locs)))) (r2c3a@gen-top-level-label r2fef@id r2ff0@rib) (r2f6c@interaction-env-locs r2ff5@env))) r2ff3@t) (values (gensym) (r2c34@gen-lexical r2fef@id)))) (r2fb6@top-level-context)))) (set! r2c3e@gen-define-label (lambda (r2fff@id r3000@rib) (if (r2fb6@top-level-context) (r2c3a@gen-top-level-label r2fff@id r3000@rib) (gensym)))) (set! r2c44@r2c3f (make-record-type-descriptor 'rib '#f 'r2c42 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! r2c46@r2c41 '#f) (set! r2c48@r2c40 (make-record-constructor-descriptor r2c44@r2c3f '#f r2c46@r2c41)) (set! r2c4b@rib? (record-predicate r2c44@r2c3f)) (set! r2c4d@make-rib (record-constructor r2c48@r2c40)) (set! r2c4f@rib-sym* (record-accessor r2c44@r2c3f '0)) (set! r2c51@rib-mark** (record-accessor r2c44@r2c3f '1)) (set! r2c53@rib-label* (record-accessor r2c44@r2c3f '2)) (set! r2c55@rib-sealed/freq (record-accessor r2c44@r2c3f '3)) (set! r2c57@rib-cache (record-accessor r2c44@r2c3f '4)) (set! r2c59@set-rib-sym*! (record-mutator r2c44@r2c3f '0)) (set! r2c5b@set-rib-mark**! (record-mutator r2c44@r2c3f '1)) (set! r2c5d@set-rib-label*! (record-mutator r2c44@r2c3f '2)) (set! r2c5f@set-rib-sealed/freq! (record-mutator r2c44@r2c3f '3)) (set! r2c61@set-rib-cache! (record-mutator r2c44@r2c3f '4)) (set! r2c63@make-empty-rib (lambda () (r2c4d@make-rib '() '() '() '#f '#f))) (set! r2c65@extend-rib! (lambda (r3003@rib r3004@id r3005@label) ((lambda (r300a@find) (begin (set! r300a@find (lambda (r3017@sym r3018@mark* r3019@sym* r301a@mark** r301b@label*) (and (pair? r3019@sym*) (if (and (eq? r3017@sym (car r3019@sym*)) (r2cb8@same-marks? r3018@mark* (car r301a@mark**))) r301b@label* (r300a@find r3017@sym r3018@mark* (cdr r3019@sym*) (cdr r301a@mark**) (cdr r301b@label*)))))) (begin (if (r2c55@rib-sealed/freq r3003@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" r3003@rib) (void)) ((lambda (r300b@sym r300c@mark*) ((lambda (r300f@sym*) ((lambda (r3011@t) (if r3011@t ((lambda (r3013@p) (if (not (eq? r3005@label (car r3013@p))) (if (r2fb6@top-level-context) (set-car! r3013@p r3005@label) (r2fa8@syntax-violation '#f '"multiple definitions of identifier" r3004@id)) (void))) r3011@t) (begin (if (r2c57@rib-cache r3003@rib) (hashtable-update! (r2c57@rib-cache r3003@rib) r300b@sym (lambda (r3015@e) (cons (cons r300c@mark* r3005@label) r3015@e)) '()) (void)) (r2c59@set-rib-sym*! r3003@rib (cons r300b@sym r300f@sym*)) (r2c5b@set-rib-mark**! r3003@rib (cons r300c@mark* (r2c51@rib-mark** r3003@rib))) (r2c5d@set-rib-label*! r3003@rib (cons r3005@label (r2c53@rib-label* r3003@rib)))))) (and (memq r300b@sym (r2c4f@rib-sym* r3003@rib)) (r300a@find r300b@sym r300c@mark* r300f@sym* (r2c51@rib-mark** r3003@rib) (r2c53@rib-label* r3003@rib))))) (r2c4f@rib-sym* r3003@rib))) (r2cb6@id->sym r3004@id) (r2c82@stx-mark* r3004@id))))) '#f))) (set! r2c67@extend-rib/nc! (lambda (r3021@rib r3022@id r3023@label) ((lambda (r3027@sym r3028@mark*) ((lambda (r302b@sym*) (begin (if (r2c57@rib-cache r3021@rib) (hashtable-update! (r2c57@rib-cache r3021@rib) r3027@sym (lambda (r302d@e) (cons (cons r3028@mark* r3023@label) r302d@e)) '()) (void)) (r2c59@set-rib-sym*! r3021@rib (cons r3027@sym r302b@sym*)) (r2c5b@set-rib-mark**! r3021@rib (cons r3028@mark* (r2c51@rib-mark** r3021@rib))) (r2c5d@set-rib-label*! r3021@rib (cons r3023@label (r2c53@rib-label* r3021@rib))))) (r2c4f@rib-sym* r3021@rib))) (r2cb6@id->sym r3022@id) (r2c82@stx-mark* r3022@id)))) (set! r2c69@make-rib-map (lambda (r302f@sym*) ((lambda (r3031@ht) ((letrec ((r3033@f (lambda (r3035@i r3036@sym*) (if (null? r3036@sym*) r3031@ht (begin (hashtable-update! r3031@ht (car r3036@sym*) (lambda (r3039@x) (cons r3035@i r3039@x)) '()) (r3033@f (+ r3035@i '1) (cdr r3036@sym*))))))) r3033@f) '0 r302f@sym*)) (make-eq-hashtable)))) (set! r2c6b@seal-rib! (lambda (r303b@rib) ((lambda (r303d@sym*) (if (not (null? r303d@sym*)) (begin (r2c59@set-rib-sym*! r303b@rib (list->vector r303d@sym*)) (r2c5b@set-rib-mark**! r303b@rib (list->vector (r2c51@rib-mark** r303b@rib))) (r2c5d@set-rib-label*! r303b@rib (list->vector (r2c53@rib-label* r303b@rib))) (r2c5f@set-rib-sealed/freq! r303b@rib (r2c69@make-rib-map r303d@sym*))) (void))) (r2c4f@rib-sym* r303b@rib)))) (set! r2c6d@unseal-rib! (lambda (r303f@rib) (if (r2c55@rib-sealed/freq r303f@rib) (begin (r2c5f@set-rib-sealed/freq! r303f@rib '#f) (r2c59@set-rib-sym*! r303f@rib (vector->list (r2c4f@rib-sym* r303f@rib))) (r2c5b@set-rib-mark**! r303f@rib (vector->list (r2c51@rib-mark** r303f@rib))) (r2c5d@set-rib-label*! r303f@rib (vector->list (r2c53@rib-label* r303f@rib)))) (void)))) (set! r2c6f@make-full-rib (lambda (r3041@id* r3042@label*) ((lambda (r3045@r) (begin (r2c6b@seal-rib! r3045@r) r3045@r)) (r2c4d@make-rib (map r2cb6@id->sym r3041@id*) (map r2c82@stx-mark* r3041@id*) r3042@label* '#f '#f)))) (set! r2c75@r2c70 (make-record-type-descriptor 'stx '#f 'r2c73 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! r2c77@r2c72 '#f) (set! r2c79@r2c71 (make-record-constructor-descriptor r2c75@r2c70 '#f r2c77@r2c72)) (set! r2c7c@stx? (record-predicate r2c75@r2c70)) (set! r2c7e@make-stx (record-constructor r2c79@r2c71)) (set! r2c80@stx-expr (record-accessor r2c75@r2c70 '0)) (set! r2c82@stx-mark* (record-accessor r2c75@r2c70 '1)) (set! r2c84@stx-subst* (record-accessor r2c75@r2c70 '2)) (set! r2c86@stx-ae* (record-accessor r2c75@r2c70 '3)) (set! r2c88@set-stx-expr! (record-mutator r2c75@r2c70 '0)) (set! r2c8a@set-stx-mark*! (record-mutator r2c75@r2c70 '1)) (set! r2c8c@set-stx-subst*! (record-mutator r2c75@r2c70 '2)) (set! r2c8e@set-stx-ae*! (record-mutator r2c75@r2c70 '3)) (set! r2c90@rp (r285b@r2782@make-record-printer 'stx (lambda (r3047@x r3048@p r3049@wr) (begin (display '"#<syntax " r3048@p) (write (r2cca@stx->datum r3047@x) r3048@p) ((lambda (r304d@expr) (if (r2853@r2772@annotation? r304d@expr) ((lambda (r304f@src) (if (pair? r304f@src) (begin (display '" [" r3048@p) (display (cdr r304f@src) r3048@p) (display '" of " r3048@p) (display (car r304f@src) r3048@p) (display '"]" r3048@p)) (void))) (r2854@r2774@annotation-source r304d@expr)) (void))) (r2c80@stx-expr r3047@x)) (display '">" r3048@p))))) (set! r2c92@datum->stx (lambda (r3051@id r3052@datum) (r2c7e@make-stx r3052@datum (r2c82@stx-mark* r3051@id) (r2c84@stx-subst* r3051@id) (r2c86@stx-ae* r3051@id)))) (set! r2c94@gen-mark (lambda () (string '#\m))) (set! r2c96@anti-mark '#f) (set! r2c98@anti-mark? not) (set! r2c9a@join-wraps (lambda (r3055@m1* r3056@s1* r3057@ae1* r3058@e) ((lambda (r305e@cancel) (begin (set! r305e@cancel (lambda (r3065@ls1 r3066@ls2) ((letrec ((r3069@f (lambda (r306b@x r306c@ls1) (if (null? r306c@ls1) (cdr r3066@ls2) (cons r306b@x (r3069@f (car r306c@ls1) (cdr r306c@ls1))))))) r3069@f) (car r3065@ls1) (cdr r3065@ls1)))) ((lambda (r305f@m2* r3060@s2* r3061@ae2*) (if (and (not (null? r3055@m1*)) (not (null? r305f@m2*)) (r2c98@anti-mark? (car r305f@m2*))) (values (r305e@cancel r3055@m1* r305f@m2*) (r305e@cancel r3056@s1* r3060@s2*) (r305e@cancel r3057@ae1* r3061@ae2*)) (values (append r3055@m1* r305f@m2*) (append r3056@s1* r3060@s2*) (append r3057@ae1* r3061@ae2*)))) (r2c82@stx-mark* r3058@e) (r2c84@stx-subst* r3058@e) (r2c86@stx-ae* r3058@e)))) '#f))) (set! r2c9c@mkstx (lambda (r306f@e r3070@m* r3071@s* r3072@ae*) (if (and (r2c7c@stx? r306f@e) (not (r2c32@top-marked? r3070@m*))) (call-with-values (lambda () (r2c9a@join-wraps r3070@m* r3071@s* r3072@ae* r306f@e)) (lambda (r307d@r3078 r307e@r307a r307f@r307c) ((lambda (r3083@ae* r3084@s* r3085@m*) (r2c7e@make-stx (r2c80@stx-expr r306f@e) r3085@m* r3084@s* r3083@ae*)) r307f@r307c r307e@r307a r307d@r3078))) (r2c7e@make-stx r306f@e r3070@m* r3071@s* r3072@ae*)))) (set! r2c9e@add-mark (lambda (r3089@m r308a@e r308b@ae) (r2c9c@mkstx r308a@e (list r3089@m) '(shift) (list r308b@ae)))) (set! r2ca0@add-subst (lambda (r308f@subst r3090@e) (r2c9c@mkstx r3090@e '() (list r308f@subst) '()))) (set! r2ca2@syntax-kind? (lambda (r3093@x r3094@p?) (if (r2c7c@stx? r3093@x) (r2ca2@syntax-kind? (r2c80@stx-expr r3093@x) r3094@p?) (if (r2853@r2772@annotation? r3093@x) (r2ca2@syntax-kind? (r2855@r2776@annotation-expression r3093@x) r3094@p?) (r3094@p? r3093@x))))) (set! r2ca4@syntax-vector->list (lambda (r3097@x) (if (r2c7c@stx? r3097@x) ((lambda (r3099@ls r309a@m* r309b@s* r309c@ae*) (map (lambda (r30a1@x) (r2c9c@mkstx r30a1@x r309a@m* r309b@s* r309c@ae*)) r3099@ls)) (r2ca4@syntax-vector->list (r2c80@stx-expr r3097@x)) (r2c82@stx-mark* r3097@x) (r2c84@stx-subst* r3097@x) (r2c86@stx-ae* r3097@x)) (if (r2853@r2772@annotation? r3097@x) (r2ca4@syntax-vector->list (r2855@r2776@annotation-expression r3097@x)) (if (vector? r3097@x) (vector->list r3097@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" r3097@x)))))) (set! r2ca6@syntax-pair? (lambda (r30a3@x) (r2ca2@syntax-kind? r30a3@x pair?))) (set! r2ca8@syntax-vector? (lambda (r30a5@x) (r2ca2@syntax-kind? r30a5@x vector?))) (set! r2caa@syntax-null? (lambda (r30a7@x) (r2ca2@syntax-kind? r30a7@x null?))) (set! r2cac@syntax-list? (lambda (r30a9@x) (or (r2caa@syntax-null? r30a9@x) (and (r2ca6@syntax-pair? r30a9@x) (r2cac@syntax-list? (r2cb0@syntax-cdr r30a9@x)))))) (set! r2cae@syntax-car (lambda (r30ab@x) (if (r2c7c@stx? r30ab@x) (r2c9c@mkstx (r2cae@syntax-car (r2c80@stx-expr r30ab@x)) (r2c82@stx-mark* r30ab@x) (r2c84@stx-subst* r30ab@x) (r2c86@stx-ae* r30ab@x)) (if (r2853@r2772@annotation? r30ab@x) (r2cae@syntax-car (r2855@r2776@annotation-expression r30ab@x)) (if (pair? r30ab@x) (car r30ab@x) (assertion-violation 'syntax-car '"BUG: not a pair" r30ab@x)))))) (set! r2cb0@syntax-cdr (lambda (r30ad@x) (if (r2c7c@stx? r30ad@x) (r2c9c@mkstx (r2cb0@syntax-cdr (r2c80@stx-expr r30ad@x)) (r2c82@stx-mark* r30ad@x) (r2c84@stx-subst* r30ad@x) (r2c86@stx-ae* r30ad@x)) (if (r2853@r2772@annotation? r30ad@x) (r2cb0@syntax-cdr (r2855@r2776@annotation-expression r30ad@x)) (if (pair? r30ad@x) (cdr r30ad@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" r30ad@x)))))) (set! r2cb2@syntax->list (lambda (r30af@x) (if (r2ca6@syntax-pair? r30af@x) (cons (r2cae@syntax-car r30af@x) (r2cb2@syntax->list (r2cb0@syntax-cdr r30af@x))) (if (r2caa@syntax-null? r30af@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" r30af@x))))) (set! r2cb4@id? (lambda (r30b1@x) (and (r2c7c@stx? r30b1@x) ((lambda (r30b3@expr) (symbol? (if (r2853@r2772@annotation? r30b3@expr) (r2852@r2770@annotation-stripped r30b3@expr) r30b3@expr))) (r2c80@stx-expr r30b1@x))))) (set! r2cb6@id->sym (lambda (r30b5@x) (begin (if (not (r2c7c@stx? r30b5@x)) (error 'id->sym '"BUG in ikarus: not an id" r30b5@x) (void)) ((lambda (r30b7@expr) ((lambda (r30b9@sym) (if (symbol? r30b9@sym) r30b9@sym (error 'id->sym '"BUG in ikarus: not an id" r30b5@x))) (if (r2853@r2772@annotation? r30b7@expr) (r2852@r2770@annotation-stripped r30b7@expr) r30b7@expr))) (r2c80@stx-expr r30b5@x))))) (set! r2cb8@same-marks? (lambda (r30bb@x r30bc@y) (or (and (null? r30bb@x) (null? r30bc@y)) (and (pair? r30bb@x) (pair? r30bc@y) (eq? (car r30bb@x) (car r30bc@y)) (r2cb8@same-marks? (cdr r30bb@x) (cdr r30bc@y)))))) (set! r2cba@bound-id=? (lambda (r30bf@x r30c0@y) (and (eq? (r2cb6@id->sym r30bf@x) (r2cb6@id->sym r30c0@y)) (r2cb8@same-marks? (r2c82@stx-mark* r30bf@x) (r2c82@stx-mark* r30c0@y))))) (set! r2cbc@free-id=? (lambda (r30c3@i r30c4@j) ((lambda (r30c7@t0 r30c8@t1) (if (or r30c7@t0 r30c8@t1) (eq? r30c7@t0 r30c8@t1) (eq? (r2cb6@id->sym r30c3@i) (r2cb6@id->sym r30c4@j)))) (r2cd0@id->real-label r30c3@i) (r2cd0@id->real-label r30c4@j)))) (set! r2cbe@valid-bound-ids? (lambda (r30cb@id*) (and (for-all r2cb4@id? r30cb@id*) (r2cc0@distinct-bound-ids? r30cb@id*)))) (set! r2cc0@distinct-bound-ids? (lambda (r30cd@id*) (or (null? r30cd@id*) (and (not (r2cc2@bound-id-member? (car r30cd@id*) (cdr r30cd@id*))) (r2cc0@distinct-bound-ids? (cdr r30cd@id*)))))) (set! r2cc2@bound-id-member? (lambda (r30cf@id r30d0@id*) (and (pair? r30d0@id*) (or (r2cba@bound-id=? r30cf@id (car r30d0@id*)) (r2cc2@bound-id-member? r30cf@id (cdr r30d0@id*)))))) (set! r2cc4@self-evaluating? (lambda (r30d3@x) (or (number? r30d3@x) (string? r30d3@x) (char? r30d3@x) (boolean? r30d3@x) (regexp? r30d3@x) (bytevector? r30d3@x)))) (set! r2cc6@strip-annotations (lambda (r30d5@x) (if (pair? r30d5@x) (cons (r2cc6@strip-annotations (car r30d5@x)) (r2cc6@strip-annotations (cdr r30d5@x))) (if (vector? r30d5@x) (vector-map r2cc6@strip-annotations r30d5@x) (if (r2853@r2772@annotation? r30d5@x) (r2852@r2770@annotation-stripped r30d5@x) r30d5@x))))) (set! r2cc8@strip (lambda (r30d7@x r30d8@m*) (if (r2c32@top-marked? r30d8@m*) (if (or (r2853@r2772@annotation? r30d7@x) (and (pair? r30d7@x) (r2853@r2772@annotation? (car r30d7@x))) (and (vector? r30d7@x) (> (vector-length r30d7@x) '0) (r2853@r2772@annotation? (vector-ref r30d7@x '0)))) (r2cc6@strip-annotations r30d7@x) r30d7@x) ((letrec ((r30db@f (lambda (r30dd@x) (if (r2c7c@stx? r30dd@x) (r2cc8@strip (r2c80@stx-expr r30dd@x) (r2c82@stx-mark* r30dd@x)) (if (r2853@r2772@annotation? r30dd@x) (r2852@r2770@annotation-stripped r30dd@x) (if (pair? r30dd@x) ((lambda (r30df@a r30e0@d) (if (and (eq? r30df@a (car r30dd@x)) (eq? r30e0@d (cdr r30dd@x))) r30dd@x (cons r30df@a r30e0@d))) (r30db@f (car r30dd@x)) (r30db@f (cdr r30dd@x))) (if (vector? r30dd@x) ((lambda (r30e3@old) ((lambda (r30e5@new) (if (for-all eq? r30e3@old r30e5@new) r30dd@x (list->vector r30e5@new))) (map r30db@f r30e3@old))) (vector->list r30dd@x)) r30dd@x))))))) r30db@f) r30d7@x)))) (set! r2cca@stx->datum (lambda (r30e7@x) (r2cc8@strip r30e7@x '()))) (set! r2ccc@same-marks*? (lambda (r30e9@mark* r30ea@mark** r30eb@si) (if (null? r30eb@si) '#f (if (r2cb8@same-marks? r30e9@mark* (vector-ref r30ea@mark** (car r30eb@si))) (car r30eb@si) (r2ccc@same-marks*? r30e9@mark* r30ea@mark** (cdr r30eb@si)))))) (set! r2cce@id->label (lambda (r30ef@id) (or (r2cd0@id->real-label r30ef@id) ((lambda (r30f1@t) (if r30f1@t ((lambda (r30f3@env) ((lambda (r30f5@rib) (call-with-values (lambda () (r2c3c@gen-define-label+loc r30ef@id r30f5@rib)) (lambda (r30fb@r30f8 r30fc@r30fa) ((lambda (r30ff@loc_ r3100@lab) (begin (r2c65@extend-rib! r30f5@rib r30ef@id r3100@lab) r3100@lab)) r30fc@r30fa r30fb@r30f8)))) (r2f68@interaction-env-rib r30f3@env))) r30f1@t) '#f)) (r2fb6@top-level-context))))) (set! r2cd0@id->real-label (lambda (r3103@id) ((lambda (r3105@sym) ((letrec ((r3107@search (lambda (r3109@subst* r310a@mark*) (if (null? r3109@subst*) '#f (if (eq? (car r3109@subst*) 'shift) (r3107@search (cdr r3109@subst*) (cdr r310a@mark*)) ((lambda (r310d@rib) ((lambda (r310f@t) (if r310f@t ((lambda (r3111@ht) ((lambda (r3113@si) ((lambda (r3115@i) (if r3115@i (vector-ref (r2c53@rib-label* r310d@rib) r3115@i) (r3107@search (cdr r3109@subst*) r310a@mark*))) (and r3113@si (r2ccc@same-marks*? r310a@mark* (r2c51@rib-mark** r310d@rib) (reverse r3113@si))))) (hashtable-ref r3111@ht r3105@sym '#f))) r310f@t) ((letrec ((r3117@f (lambda (r3119@sym* r311a@mark** r311b@label*) (if (null? r3119@sym*) (r3107@search (cdr r3109@subst*) r310a@mark*) (if (and (eq? (car r3119@sym*) r3105@sym) (r2cb8@same-marks? (car r311a@mark**) r310a@mark*)) (car r311b@label*) (r3117@f (cdr r3119@sym*) (cdr r311a@mark**) (cdr r311b@label*))))))) r3117@f) (r2c4f@rib-sym* r310d@rib) (r2c51@rib-mark** r310d@rib) (r2c53@rib-label* r310d@rib)))) (r2c55@rib-sealed/freq r310d@rib))) (car r3109@subst*))))))) r3107@search) (r2c84@stx-subst* r3103@id) (r2c82@stx-mark* r3103@id))) (r2cb6@id->sym r3103@id)))) (set! r2cd2@label->binding (lambda (r311f@x r3120@r) ((lambda (r3123@t) (if r3123@t ((lambda (r3125@b) (if (and (pair? r3125@b) (eq? (car r3125@b) '$core-rtd)) (cons '$rtd (map r2e75@bless (cdr r3125@b))) (if (and (pair? r3125@b) (eq? (car r3125@b) 'global-rtd)) ((lambda (r3127@lib r3128@loc) (cons '$rtd (symbol-value r3128@loc))) (cadr r3125@b) (cddr r3125@b)) r3125@b))) r3123@t) ((lambda (r312b@t) (if r312b@t (cdr r312b@t) ((lambda (r312d@t) (if r312d@t ((lambda (r312f@env) ((lambda (r3131@t) (if r3131@t ((lambda (r3133@p) (cons* 'lexical (cdr r3133@p) '#f)) r3131@t) '(displaced-lexical . #f))) (assq r311f@x (r2f6c@interaction-env-locs r312f@env)))) r312d@t) '(displaced-lexical . #f))) (r2fb6@top-level-context)))) (assq r311f@x r3120@r)))) (r2ad7@r2977@imported-label->binding r311f@x)))) (set! r2cd4@make-binding cons) (set! r2cd6@binding-type car) (set! r2cd8@binding-value cdr) (set! r2cda@raise-unbound-error (lambda (r3135@id) (r2fa6@syntax-violation* '#f '"unbound identifier" r3135@id (r4ce5@r4b2b@make-undefined-violation)))) (set! r2cdc@syntax-type (lambda (r3137@e r3138@r) (if (r2cb4@id? r3137@e) ((lambda (r313b@id) ((lambda (r313d@label) ((lambda (r313f@b) ((lambda (r3141@type) ((lambda () (begin (if (not r313d@label) (r2cda@raise-unbound-error r313b@id) (void)) ((lambda (r3143@t) (if (memv r3143@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values r3141@type (r2cd8@binding-value r313f@b) r313b@id) (values 'other '#f '#f))) r3141@type))))) (r2cd6@binding-type r313f@b))) (r2cd2@label->binding r313d@label r3138@r))) (r2cce@id->label r313b@id))) r3137@e) (if (r2ca6@syntax-pair? r3137@e) ((lambda (r3145@id) (if (r2cb4@id? r3145@id) ((lambda (r3147@label) ((lambda (r3149@b) ((lambda (r314b@type) ((lambda () (begin (if (not r3147@label) (r2cda@raise-unbound-error r3145@id) (void)) ((lambda (r314d@t) (if (memv r314d@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values r314b@type (r2cd8@binding-value r3149@b) r3145@id) (values 'call '#f '#f))) r314b@type))))) (r2cd6@binding-type r3149@b))) (r2cd2@label->binding r3147@label r3138@r))) (r2cce@id->label r3145@id)) (values 'call '#f '#f))) (r2cae@syntax-car r3137@e)) ((lambda (r314f@d) (if (r2cc4@self-evaluating? r314f@d) (values 'constant r314f@d '#f) (values 'other '#f '#f))) (r2cca@stx->datum r3137@e)))))) (set! r2cea@sanitize-binding (lambda (r3151@x r3152@src) (if (procedure? r3151@x) (cons* 'local-macro r3151@x r3152@src) (if (and (pair? r3151@x) (eq? (car r3151@x) 'macro!) (procedure? (cdr r3151@x))) (cons* 'local-macro! (cdr r3151@x) r3152@src) (if (and (pair? r3151@x) (eq? (car r3151@x) '$rtd)) r3151@x (assertion-violation 'expand '"invalid transformer" r3151@x)))))) (set! r2cec@make-variable-transformer (lambda (r3155@x) (if (procedure? r3155@x) (cons 'macro! r3155@x) (assertion-violation 'make-variable-transformer '"not a procedure" r3155@x)))) (set! r2cee@variable-transformer? (lambda (r3157@x) (and (pair? r3157@x) (eq? (car r3157@x) 'macro!) (procedure? (cdr r3157@x))))) (set! r2cf0@variable-transformer-procedure (lambda (r3159@x) (if (r2cee@variable-transformer? r3159@x) (cdr r3159@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" r3159@x)))) (set! r2cf2@make-eval-transformer (lambda (r315b@x) (r2cea@sanitize-binding (eval-core (r28b2@r286a@expanded->core r315b@x)) r315b@x))) (set! r2e43@parse-define (lambda (r315d@x) ((lambda (r315f@t) ((lambda (r3161@ls/false) (if (and r3161@ls/false (apply (lambda (r3163@id r3164@fmls r3165@b r3166@b*) (r2cb4@id? r3163@id)) r3161@ls/false)) (apply (lambda (r316b@id r316c@fmls r316d@b r316e@b*) (begin (r2ee5@verify-formals r316c@fmls r315d@x) (values r316b@id (cons 'defun (cons r316c@fmls (cons r316d@b r316e@b*)))))) r3161@ls/false) ((lambda (r3173@t) ((lambda (r3175@ls/false) (if (and r3175@ls/false (apply (lambda (r3177@id r3178@val) (r2cb4@id? r3177@id)) r3175@ls/false)) (apply (lambda (r317b@id r317c@val) (values r317b@id (cons 'expr r317c@val))) r3175@ls/false) ((lambda (r317f@t) ((lambda (r3181@ls/false) (if (and r3181@ls/false (apply (lambda (r3183@id) (r2cb4@id? r3183@id)) r3181@ls/false)) (apply (lambda (r3185@id) (values r3185@id (cons 'expr (r2e75@bless '(void))))) r3181@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r317f@t))) (r2ebf@syntax-dispatch r317f@t '(_ any)))) r3173@t))) (r2ebf@syntax-dispatch r3173@t '(_ any any)))) r315f@t))) (r2ebf@syntax-dispatch r315f@t '(_ (any . any) any . each-any)))) r315d@x))) (set! r2e45@parse-define-syntax (lambda (r3187@x) ((lambda (r3189@t) ((lambda (r318b@ls/false) (if (and r318b@ls/false (apply (lambda (r318d@id r318e@val) (r2cb4@id? r318d@id)) r318b@ls/false)) (apply (lambda (r3191@id r3192@val) (values r3191@id r3192@val)) r318b@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3189@t))) (r2ebf@syntax-dispatch r3189@t '(_ any any)))) r3187@x))) (set! r2e47@scheme-stx-hashtable (make-eq-hashtable)) (set! r2e49@scheme-stx (lambda (r3195@sym) (or (hashtable-ref r2e47@scheme-stx-hashtable r3195@sym '#f) ((lambda (r3197@subst) ((lambda (r3199@stx) ((lambda (r319b@stx) ((lambda () (begin (hashtable-set! r2e47@scheme-stx-hashtable r3195@sym r319b@stx) r319b@stx)))) ((lambda (r319d@t) (if r319d@t ((lambda (r319f@x) ((lambda (r31a1@name r31a2@label) (r2ca0@add-subst (r2c4d@make-rib (list r31a1@name) (list r2c30@top-mark*) (list r31a2@label) '#f '#f) r3199@stx)) (car r319f@x) (cdr r319f@x))) r319d@t) r3199@stx)) (assq r3195@sym r3197@subst)))) (r2c7e@make-stx r3195@sym r2c30@top-mark* '() '()))) (r2aad@r2923@library-subst (r2ad1@r296b@find-library-by-name '(psyntax system $all))))))) (set! r2e4b@lexical-var car) (set! r2e4d@lexical-mutable? cdr) (set! r2e4f@set-lexical-mutable! set-cdr!) (set! r2e51@add-lexical (lambda (r31a5@lab r31a6@lex r31a7@r) (cons (cons* r31a5@lab 'lexical r31a6@lex '#f) r31a7@r))) (set! r2e53@add-lexicals (lambda (r31ab@lab* r31ac@lex* r31ad@r) (if (null? r31ab@lab*) r31ad@r (r2e53@add-lexicals (cdr r31ab@lab*) (cdr r31ac@lex*) (r2e51@add-lexical (car r31ab@lab*) (car r31ac@lex*) r31ad@r))))) (set! r2e55@letrec-helper (lambda (r31b1@e r31b2@r r31b3@mr r31b4@build) ((lambda (r31b9@t) ((lambda (r31bb@ls/false) (if r31bb@ls/false (apply (lambda (r31bd@lhs* r31be@rhs* r31bf@b r31c0@b*) (if (not (r2cbe@valid-bound-ids? r31bd@lhs*)) (r2e79@invalid-fmls-error r31b1@e r31bd@lhs*) ((lambda (r31c5@lex* r31c6@lab*) ((lambda (r31c9@rib r31ca@r) ((lambda (r31cd@body r31ce@rhs*) (r31b4@build '#f r31c5@lex* r31ce@rhs* r31cd@body)) (r2ef7@chi-internal (r2ca0@add-subst r31c9@rib (cons r31bf@b r31c0@b*)) r31ca@r r31b3@mr) (r2edd@chi-expr* (map (lambda (r31d1@x) (r2ca0@add-subst r31c9@rib r31d1@x)) r31be@rhs*) r31ca@r r31b3@mr))) (r2c6f@make-full-rib r31bd@lhs* r31c6@lab*) (r2e53@add-lexicals r31c6@lab* r31c5@lex* r31b2@r))) (map r2c34@gen-lexical r31bd@lhs*) (map r2c38@gen-label r31bd@lhs*)))) r31bb@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r31b9@t))) (r2ebf@syntax-dispatch r31b9@t '(_ #(each (any any)) any . each-any)))) r31b1@e))) (set! r2e57@letrec-transformer (lambda (r31d3@e r31d4@r r31d5@mr) (r2e55@letrec-helper r31d3@e r31d4@r r31d5@mr r2c15@r2b86@build-letrec))) (set! r2e59@letrec*-transformer (lambda (r31d9@e r31da@r r31db@mr) (r2e55@letrec-helper r31d9@e r31da@r r31db@mr r2c16@r2b88@build-letrec*))) (set! r2e5b@fluid-let-syntax-transformer (lambda (r31df@e r31e0@r r31e1@mr) ((lambda (r31e6@lookup) (begin (set! r31e6@lookup (lambda (r31f9@x) (or (r2cce@id->label r31f9@x) (r2fa8@syntax-violation '#f '"unbound identifier" r31df@e r31f9@x)))) ((lambda (r31e7@t) ((lambda (r31e9@ls/false) (if r31e9@ls/false (apply (lambda (r31eb@lhs* r31ec@rhs* r31ed@b r31ee@b*) (if (not (r2cbe@valid-bound-ids? r31eb@lhs*)) (r2e79@invalid-fmls-error r31df@e r31eb@lhs*) ((lambda (r31f3@lab* r31f4@rhs*) (r2ef7@chi-internal (cons r31ed@b r31ee@b*) (append (map cons r31f3@lab* r31f4@rhs*) r31e0@r) (append (map cons r31f3@lab* r31f4@rhs*) r31e1@mr))) (map r31e6@lookup r31eb@lhs*) (map (lambda (r31f7@x) (r2cf2@make-eval-transformer (r2f1c@expand-transformer r31f7@x r31e1@mr))) r31ec@rhs*)))) r31e9@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r31e7@t))) (r2ebf@syntax-dispatch r31e7@t '(_ #(each (any any)) any . each-any)))) r31df@e))) '#f))) (set! r2e5d@type-descriptor-transformer (lambda (r31fb@e r31fc@r r31fd@mr) ((lambda (r3201@t) ((lambda (r3203@ls/false) (if (and r3203@ls/false (apply (lambda (r3205@id) (r2cb4@id? r3205@id)) r3203@ls/false)) (apply (lambda (r3207@id) ((lambda (r3209@lab) ((lambda (r320b@b) ((lambda (r320d@type) ((lambda () (begin (if (not r3209@lab) (r2cda@raise-unbound-error r3207@id) (void)) (if (not (and (eq? r320d@type '$rtd) (not (list? (r2cd8@binding-value r320b@b))))) (r2fa8@syntax-violation '#f '"not a record type" r31fb@e) (void)) (list 'quote (r2cd8@binding-value r320b@b)))))) (r2cd6@binding-type r320b@b))) (r2cd2@label->binding r3209@lab r31fc@r))) (r2cce@id->label r3207@id))) r3203@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3201@t))) (r2ebf@syntax-dispatch r3201@t '(_ any)))) r31fb@e))) (set! r2e5f@record-type-descriptor-transformer (lambda (r320f@e r3210@r r3211@mr) ((lambda (r3215@t) ((lambda (r3217@ls/false) (if (and r3217@ls/false (apply (lambda (r3219@id) (r2cb4@id? r3219@id)) r3217@ls/false)) (apply (lambda (r321b@id) ((lambda (r321d@lab) ((lambda (r321f@b) ((lambda (r3221@type) ((lambda () (begin (if (not r321d@lab) (r2cda@raise-unbound-error r321b@id) (void)) (if (not (and (eq? r3221@type '$rtd) (list? (r2cd8@binding-value r321f@b)))) (r2fa8@syntax-violation '#f '"not a record type" r320f@e) (void)) (r2ee1@chi-expr (car (r2cd8@binding-value r321f@b)) r3210@r r3211@mr))))) (r2cd6@binding-type r321f@b))) (r2cd2@label->binding r321d@lab r3210@r))) (r2cce@id->label r321b@id))) r3217@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3215@t))) (r2ebf@syntax-dispatch r3215@t '(_ any)))) r320f@e))) (set! r2e61@record-constructor-descriptor-transformer (lambda (r3223@e r3224@r r3225@mr) ((lambda (r3229@t) ((lambda (r322b@ls/false) (if (and r322b@ls/false (apply (lambda (r322d@id) (r2cb4@id? r322d@id)) r322b@ls/false)) (apply (lambda (r322f@id) ((lambda (r3231@lab) ((lambda (r3233@b) ((lambda (r3235@type) ((lambda () (begin (if (not r3231@lab) (r2cda@raise-unbound-error r322f@id) (void)) (if (not (and (eq? r3235@type '$rtd) (list? (r2cd8@binding-value r3233@b)))) (r2fa8@syntax-violation '#f '"invalid type" r3223@e) (void)) (r2ee1@chi-expr (cadr (r2cd8@binding-value r3233@b)) r3224@r r3225@mr))))) (r2cd6@binding-type r3233@b))) (r2cd2@label->binding r3231@lab r3224@r))) (r2cce@id->label r322f@id))) r322b@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3229@t))) (r2ebf@syntax-dispatch r3229@t '(_ any)))) r3223@e))) (set! r2e63@when-macro (lambda (r3237@e) ((lambda (r3239@t) ((lambda (r323b@ls/false) (if r323b@ls/false (apply (lambda (r323d@test r323e@e r323f@e*) (r2e75@bless (list 'if r323d@test (cons 'begin (cons r323e@e r323f@e*))))) r323b@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3239@t))) (r2ebf@syntax-dispatch r3239@t '(_ any any . each-any)))) r3237@e))) (set! r2e65@unless-macro (lambda (r3243@e) ((lambda (r3245@t) ((lambda (r3247@ls/false) (if r3247@ls/false (apply (lambda (r3249@test r324a@e r324b@e*) (r2e75@bless (list 'if (list 'not r3249@test) (cons 'begin (cons r324a@e r324b@e*))))) r3247@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3245@t))) (r2ebf@syntax-dispatch r3245@t '(_ any any . each-any)))) r3243@e))) (set! r2e67@if-transformer (lambda (r324f@e r3250@r r3251@mr) ((lambda (r3255@t) ((lambda (r3257@ls/false) (if r3257@ls/false (apply (lambda (r3259@e0 r325a@e1 r325b@e2) (list 'if (r2ee1@chi-expr r3259@e0 r3250@r r3251@mr) (r2ee1@chi-expr r325a@e1 r3250@r r3251@mr) (r2ee1@chi-expr r325b@e2 r3250@r r3251@mr))) r3257@ls/false) ((lambda (r325f@t) ((lambda (r3261@ls/false) (if r3261@ls/false (apply (lambda (r3263@e0 r3264@e1) (list 'if (r2ee1@chi-expr r3263@e0 r3250@r r3251@mr) (r2ee1@chi-expr r3264@e1 r3250@r r3251@mr) (r2c14@r2b84@build-void))) r3261@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r325f@t))) (r2ebf@syntax-dispatch r325f@t '(_ any any)))) r3255@t))) (r2ebf@syntax-dispatch r3255@t '(_ any any any)))) r324f@e))) (set! r2e69@and-transformer (lambda (r3267@e r3268@r r3269@mr) ((lambda (r326d@t) ((lambda (r326f@ls/false) (if r326f@ls/false (apply (lambda (r3271@e*) (cons 'and (r2edd@chi-expr* r3271@e* r3268@r r3269@mr))) r326f@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r326d@t))) (r2ebf@syntax-dispatch r326d@t '(_ . each-any)))) r3267@e))) (set! r2e6b@or-transformer (lambda (r3273@e r3274@r r3275@mr) ((lambda (r3279@t) ((lambda (r327b@ls/false) (if r327b@ls/false (apply (lambda (r327d@e*) (cons 'or (r2edd@chi-expr* r327d@e* r3274@r r3275@mr))) r327b@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3279@t))) (r2ebf@syntax-dispatch r3279@t '(_ . each-any)))) r3273@e))) (set! r2e6d@case-macro (lambda (r327f@e) ((lambda (r3282@build-last r3284@build-one) (begin (set! r3282@build-last (lambda (r32a9@cls) ((lambda (r32ab@t) ((lambda (r32ad@ls/false) (if r32ad@ls/false (apply (lambda (r32af@e r32b0@e*) (cons 'begin (cons r32af@e r32b0@e*))) r32ad@ls/false) ((lambda (r32b3@t) ((lambda (r32b5@ls/false) (if r32b5@ls/false (apply (lambda () (r3284@build-one r32a9@cls '(if #f #f))) r32b5@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r32b3@t))) (r2ebf@syntax-dispatch r32b3@t '_))) r32ab@t))) (r2ebf@syntax-dispatch r32ab@t '(#(scheme-id else) any . each-any)))) r32a9@cls))) (set! r3284@build-one (lambda (r329b@cls r329c@k) ((lambda (r329f@t) ((lambda (r32a1@ls/false) (if r32a1@ls/false (apply (lambda (r32a3@d* r32a4@e r32a5@e*) (list 'if (list 'memv 't (list 'quote r32a3@d*)) (cons 'begin (cons r32a4@e r32a5@e*)) r329c@k)) r32a1@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r329f@t))) (r2ebf@syntax-dispatch r329f@t '(each-any any . each-any)))) r329b@cls))) ((lambda (r3285@t) ((lambda (r3287@ls/false) (if r3287@ls/false (apply (lambda (r3289@expr) (r2e75@bless (cons 'let (cons (list (list 't r3289@expr)) '((if #f #f)))))) r3287@ls/false) ((lambda (r328b@t) ((lambda (r328d@ls/false) (if r328d@ls/false (apply (lambda (r328f@expr r3290@cls r3291@cls*) (r2e75@bless (list 'let (list (list 't r328f@expr)) ((letrec ((r3295@f (lambda (r3297@cls r3298@cls*) (if (null? r3298@cls*) (r3282@build-last r3297@cls) (r3284@build-one r3297@cls (r3295@f (car r3298@cls*) (cdr r3298@cls*))))))) r3295@f) r3290@cls r3291@cls*)))) r328d@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r328b@t))) (r2ebf@syntax-dispatch r328b@t '(_ any any . each-any)))) r3285@t))) (r2ebf@syntax-dispatch r3285@t '(_ any)))) r327f@e))) '#f '#f))) (set! r2e6f@quote-transformer (lambda (r32b7@e r32b8@r r32b9@mr) ((lambda (r32bd@t) ((lambda (r32bf@ls/false) (if r32bf@ls/false (apply (lambda (r32c1@datum) (list 'quote (r2cca@stx->datum r32c1@datum))) r32bf@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r32bd@t))) (r2ebf@syntax-dispatch r32bd@t '(_ any)))) r32b7@e))) (set! r2e71@case-lambda-transformer (lambda (r32c3@e r32c4@r r32c5@mr) ((lambda (r32c9@t) ((lambda (r32cb@ls/false) (if r32cb@ls/false (apply (lambda (r32cd@fmls* r32ce@b* r32cf@b**) (call-with-values (lambda () (r2ee9@chi-lambda-clause* r32c3@e r32cd@fmls* (map cons r32ce@b* r32cf@b**) r32c4@r r32c5@mr)) (lambda (r32d7@r32d4 r32d8@r32d6) ((lambda (r32db@body* r32dc@fmls*) (r2c11@r2b52@build-case-lambda '#f r32dc@fmls* r32db@body*)) r32d8@r32d6 r32d7@r32d4)))) r32cb@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r32c9@t))) (r2ebf@syntax-dispatch r32c9@t '(_ . #(each (any any . each-any)))))) r32c3@e))) (set! r2e73@lambda-transformer (lambda (r32df@e r32e0@r r32e1@mr) ((lambda (r32e5@t) ((lambda (r32e7@ls/false) (if r32e7@ls/false (apply (lambda (r32e9@fmls r32ea@b r32eb@b*) (call-with-values (lambda () (r2ee7@chi-lambda-clause r32df@e r32e9@fmls (cons r32ea@b r32eb@b*) r32e0@r r32e1@mr)) (lambda (r32f3@r32f0 r32f4@r32f2) ((lambda (r32f7@body r32f8@fmls) (r2c10@r2b50@build-lambda '#f r32f8@fmls r32f7@body)) r32f4@r32f2 r32f3@r32f0)))) r32e7@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r32e5@t))) (r2ebf@syntax-dispatch r32e5@t '(_ any any . each-any)))) r32df@e))) (set! r2e75@bless (lambda (r32fb@x) (r2c9c@mkstx ((letrec ((r32fd@f (lambda (r32ff@x) (if (r2c7c@stx? r32ff@x) r32ff@x (if (pair? r32ff@x) (cons (r32fd@f (car r32ff@x)) (r32fd@f (cdr r32ff@x))) (if (symbol? r32ff@x) (r2e49@scheme-stx r32ff@x) (if (vector? r32ff@x) (vector-map r32fd@f r32ff@x) r32ff@x))))))) r32fd@f) r32fb@x) '() '() '()))) (set! r2e77@with-syntax-macro (lambda (r3301@e) ((lambda (r3303@t) ((lambda (r3305@ls/false) (if r3305@ls/false (apply (lambda (r3307@pat* r3308@expr* r3309@b r330a@b*) ((lambda (r330f@idn*) (begin (r2ee5@verify-formals (map car r330f@idn*) r3301@e) ((lambda (r3311@t*) (r2e75@bless (list 'let (map list r3311@t* r3308@expr*) ((letrec ((r3313@f (lambda (r3315@pat* r3316@t*) (if (null? r3315@pat*) (cons 'begin (cons '#f (cons r3309@b r330a@b*))) (list 'syntax-case (car r3316@t*) '() (list (car r3315@pat*) (r3313@f (cdr r3315@pat*) (cdr r3316@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car r3315@pat*)) (car r3316@t*)))))))) r3313@f) r3307@pat* r3311@t*)))) (r2f96@generate-temporaries r3308@expr*)))) ((letrec ((r3319@f (lambda (r331b@pat*) (if (null? r331b@pat*) '() (call-with-values (lambda () (r2ebd@convert-pattern (car r331b@pat*) '())) (lambda (r3321@r331e r3322@r3320) ((lambda (r3325@idn* r3326@pat) (append r3325@idn* (r3319@f (cdr r331b@pat*)))) r3322@r3320 r3321@r331e))))))) r3319@f) r3307@pat*))) r3305@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3303@t))) (r2ebf@syntax-dispatch r3303@t '(_ #(each (any any)) any . each-any)))) r3301@e))) (set! r2e79@invalid-fmls-error (lambda (r3329@stx r332a@fmls) ((lambda (r332d@t) ((lambda (r332f@ls/false) (if r332f@ls/false (apply (lambda (r3331@id* r3332@last) ((letrec ((r3335@f (lambda (r3337@id*) (if (null? r3337@id*) (values) (if (not (r2cb4@id? (car r3337@id*))) (r2fa8@syntax-violation '#f '"not an identifier" r3329@stx (car r3337@id*)) (begin (r3335@f (cdr r3337@id*)) (if (r2cc2@bound-id-member? (car r3337@id*) (cdr r3337@id*)) (r2fa8@syntax-violation '#f '"duplicate binding" r3329@stx (car r3337@id*)) (void)))))))) r3335@f) (if (r2cb4@id? r3332@last) (cons r3332@last r3331@id*) (if (r2caa@syntax-null? r3332@last) r3331@id* (r2fa8@syntax-violation '#f '"not an identifier" r3329@stx r3332@last))))) r332f@ls/false) ((lambda (r3339@t) ((lambda (r333b@ls/false) (if r333b@ls/false (apply (lambda () (r2fa8@syntax-violation '#f '"malformed binding form" r3329@stx r332a@fmls)) r333b@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3339@t))) (r2ebf@syntax-dispatch r3339@t '_))) r332d@t))) (r2ebf@syntax-dispatch r332d@t '#(each+ any () any)))) r332a@fmls))) (set! r2e7b@let-macro (lambda (r333d@stx) ((lambda (r333f@t) ((lambda (r3341@ls/false) (if r3341@ls/false (apply (lambda (r3343@lhs* r3344@rhs* r3345@b r3346@b*) (if (r2cbe@valid-bound-ids? r3343@lhs*) (r2e75@bless (cons (cons 'lambda (cons r3343@lhs* (cons r3345@b r3346@b*))) r3344@rhs*)) (r2e79@invalid-fmls-error r333d@stx r3343@lhs*))) r3341@ls/false) ((lambda (r334b@t) ((lambda (r334d@ls/false) (if (and r334d@ls/false (apply (lambda (r334f@f r3350@lhs* r3351@rhs* r3352@b r3353@b*) (r2cb4@id? r334f@f)) r334d@ls/false)) (apply (lambda (r3359@f r335a@lhs* r335b@rhs* r335c@b r335d@b*) (if (r2cbe@valid-bound-ids? r335a@lhs*) (r2e75@bless (cons (list 'letrec (list (list r3359@f (cons 'lambda (cons r335a@lhs* (cons r335c@b r335d@b*))))) r3359@f) r335b@rhs*)) (r2e79@invalid-fmls-error r333d@stx r335a@lhs*))) r334d@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r334b@t))) (r2ebf@syntax-dispatch r334b@t '(_ any #(each (any any)) any . each-any)))) r333f@t))) (r2ebf@syntax-dispatch r333f@t '(_ #(each (any any)) any . each-any)))) r333d@stx))) (set! r2e7d@let-values-macro (lambda (r3363@stx) ((lambda (r3366@rename r3368@rename*) (begin (set! r3366@rename (lambda (r33cb@x r33cc@old* r33cd@new*) (begin (if (not (r2cb4@id? r33cb@x)) (r2fa8@syntax-violation '#f '"not an indentifier" r3363@stx r33cb@x) (void)) (if (r2cc2@bound-id-member? r33cb@x r33cc@old*) (r2fa8@syntax-violation '#f '"duplicate binding" r3363@stx r33cb@x) (void)) ((lambda (r33d1@y) (values r33d1@y (cons r33cb@x r33cc@old*) (cons r33d1@y r33cd@new*))) (gensym (r2fae@syntax->datum r33cb@x)))))) (set! r3368@rename* (lambda (r33b9@x* r33ba@old* r33bb@new*) (if (null? r33b9@x*) (values '() r33ba@old* r33bb@new*) (call-with-values (lambda () (r3366@rename (car r33b9@x*) r33ba@old* r33bb@new*)) (lambda (r33bf@x r33c0@old* r33c1@new*) (call-with-values (lambda () (r3368@rename* (cdr r33b9@x*) r33c0@old* r33c1@new*)) (lambda (r33c5@x* r33c6@old* r33c7@new*) (values (cons r33bf@x r33c5@x*) r33c6@old* r33c7@new*)))))))) ((lambda (r3369@t) ((lambda (r336b@ls/false) (if r336b@ls/false (apply (lambda (r336d@b r336e@b*) (cons* (r2e75@bless 'let) '() r336d@b r336e@b*)) r336b@ls/false) ((lambda (r3371@t) ((lambda (r3373@ls/false) (if r3373@ls/false (apply (lambda (r3375@lhs* r3376@rhs* r3377@b r3378@b*) (r2e75@bless ((letrec ((r337d@f (lambda (r337f@lhs* r3380@rhs* r3381@old* r3382@new*) (if (null? r337f@lhs*) (cons 'let (cons (map list r3381@old* r3382@new*) (cons r3377@b r3378@b*))) ((lambda (r3387@t) ((lambda (r3389@ls/false) (if r3389@ls/false (apply (lambda (r338b@x*) (call-with-values (lambda () (r3368@rename* r338b@x* r3381@old* r3382@new*)) (lambda (r3393@r338e r3394@r3390 r3395@r3392) ((lambda (r3399@new* r339a@old* r339b@y*) (list 'call-with-values (list 'lambda '() (car r3380@rhs*)) (list 'lambda r339b@y* (r337d@f (cdr r337f@lhs*) (cdr r3380@rhs*) r339a@old* r3399@new*)))) r3395@r3392 r3394@r3390 r3393@r338e)))) r3389@ls/false) ((lambda (r339f@t) ((lambda (r33a1@ls/false) (if r33a1@ls/false (apply (lambda (r33a3@x* r33a4@x) (call-with-values (lambda () (r3366@rename r33a4@x r3381@old* r3382@new*)) (lambda (r33a7@y r33a8@old* r33a9@new*) (call-with-values (lambda () (r3368@rename* r33a3@x* r33a8@old* r33a9@new*)) (lambda (r33ad@y* r33ae@old* r33af@new*) (list 'call-with-values (list 'lambda '() (car r3380@rhs*)) (list 'lambda (append r33ad@y* r33a7@y) (r337d@f (cdr r337f@lhs*) (cdr r3380@rhs*) r33ae@old* r33af@new*)))))))) r33a1@ls/false) ((lambda (r33b3@t) ((lambda (r33b5@ls/false) (if r33b5@ls/false (apply (lambda (r33b7@others) (r2fa8@syntax-violation '#f '"malformed bindings" r3363@stx r33b7@others)) r33b5@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r33b3@t))) (r2ebf@syntax-dispatch r33b3@t 'any))) r339f@t))) (r2ebf@syntax-dispatch r339f@t '#(each+ any () any)))) r3387@t))) (r2ebf@syntax-dispatch r3387@t 'each-any))) (car r337f@lhs*)))))) r337d@f) r3375@lhs* r3376@rhs* '() '()))) r3373@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3371@t))) (r2ebf@syntax-dispatch r3371@t '(_ #(each (any any)) any . each-any)))) r3369@t))) (r2ebf@syntax-dispatch r3369@t '(_ () any . each-any)))) r3363@stx))) '#f '#f))) (set! r2e7f@let*-values-macro (lambda (r33d3@stx) ((lambda (r33d6@check) (begin (set! r33d6@check (lambda (r3405@x*) (if (not (null? r3405@x*)) ((lambda (r3407@x) (begin (if (not (r2cb4@id? r3407@x)) (r2fa8@syntax-violation '#f '"not an identifier" r33d3@stx r3407@x) (void)) (r33d6@check (cdr r3405@x*)) (if (r2cc2@bound-id-member? r3407@x (cdr r3405@x*)) (r2fa8@syntax-violation '#f '"duplicate identifier" r33d3@stx r3407@x) (void)))) (car r3405@x*)) (void)))) ((lambda (r33d7@t) ((lambda (r33d9@ls/false) (if r33d9@ls/false (apply (lambda (r33db@b r33dc@b*) (cons* (r2e75@bless 'let) '() r33db@b r33dc@b*)) r33d9@ls/false) ((lambda (r33df@t) ((lambda (r33e1@ls/false) (if r33e1@ls/false (apply (lambda (r33e3@lhs* r33e4@rhs* r33e5@b r33e6@b*) (r2e75@bless ((letrec ((r33eb@f (lambda (r33ed@lhs* r33ee@rhs*) (if (null? r33ed@lhs*) (cons 'begin (cons r33e5@b r33e6@b*)) ((lambda (r33f1@t) ((lambda (r33f3@ls/false) (if r33f3@ls/false (apply (lambda (r33f5@x*) (begin (r33d6@check r33f5@x*) (list 'call-with-values (list 'lambda '() (car r33ee@rhs*)) (list 'lambda r33f5@x* (r33eb@f (cdr r33ed@lhs*) (cdr r33ee@rhs*)))))) r33f3@ls/false) ((lambda (r33f7@t) ((lambda (r33f9@ls/false) (if r33f9@ls/false (apply (lambda (r33fb@x* r33fc@x) (begin (r33d6@check (cons r33fc@x r33fb@x*)) (list 'call-with-values (list 'lambda '() (car r33ee@rhs*)) (list 'lambda (append r33fb@x* r33fc@x) (r33eb@f (cdr r33ed@lhs*) (cdr r33ee@rhs*)))))) r33f9@ls/false) ((lambda (r33ff@t) ((lambda (r3401@ls/false) (if r3401@ls/false (apply (lambda (r3403@others) (r2fa8@syntax-violation '#f '"malformed bindings" r33d3@stx r3403@others)) r3401@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r33ff@t))) (r2ebf@syntax-dispatch r33ff@t 'any))) r33f7@t))) (r2ebf@syntax-dispatch r33f7@t '#(each+ any () any)))) r33f1@t))) (r2ebf@syntax-dispatch r33f1@t 'each-any))) (car r33ed@lhs*)))))) r33eb@f) r33e3@lhs* r33e4@rhs*))) r33e1@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r33df@t))) (r2ebf@syntax-dispatch r33df@t '(_ #(each (any any)) any . each-any)))) r33d7@t))) (r2ebf@syntax-dispatch r33d7@t '(_ () any . each-any)))) r33d3@stx))) '#f))) (set! r2e81@trace-lambda-macro (lambda (r3409@stx) ((lambda (r340b@t) ((lambda (r340d@ls/false) (if r340d@ls/false (apply (lambda (r340f@who r3410@fmls r3411@b r3412@b*) (if (r2cbe@valid-bound-ids? r3410@fmls) (r2e75@bless (list 'make-traced-procedure (list 'quote r340f@who) (cons 'lambda (cons r3410@fmls (cons r3411@b r3412@b*))))) (r2e79@invalid-fmls-error r3409@stx r3410@fmls))) r340d@ls/false) ((lambda (r3417@t) ((lambda (r3419@ls/false) (if r3419@ls/false (apply (lambda (r341b@who r341c@fmls r341d@last r341e@b r341f@b*) (if (r2cbe@valid-bound-ids? (cons r341d@last r341c@fmls)) (r2e75@bless (list 'make-traced-procedure (list 'quote r341b@who) (cons 'lambda (cons (append r341c@fmls r341d@last) (cons r341e@b r341f@b*))))) (r2e79@invalid-fmls-error r3409@stx (append r341c@fmls r341d@last)))) r3419@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3417@t))) (r2ebf@syntax-dispatch r3417@t '(_ any #(each+ any () any) any . each-any)))) r340b@t))) (r2ebf@syntax-dispatch r340b@t '(_ any each-any any . each-any)))) r3409@stx))) (set! r2e83@trace-define-macro (lambda (r3425@stx) ((lambda (r3427@t) ((lambda (r3429@ls/false) (if r3429@ls/false (apply (lambda (r342b@who r342c@fmls r342d@b r342e@b*) (if (r2cbe@valid-bound-ids? r342c@fmls) (r2e75@bless (list 'define r342b@who (list 'make-traced-procedure (list 'quote r342b@who) (cons 'lambda (cons r342c@fmls (cons r342d@b r342e@b*)))))) (r2e79@invalid-fmls-error r3425@stx r342c@fmls))) r3429@ls/false) ((lambda (r3433@t) ((lambda (r3435@ls/false) (if r3435@ls/false (apply (lambda (r3437@who r3438@fmls r3439@last r343a@b r343b@b*) (if (r2cbe@valid-bound-ids? (cons r3439@last r3438@fmls)) (r2e75@bless (list 'define r3437@who (list 'make-traced-procedure (list 'quote r3437@who) (cons 'lambda (cons (append r3438@fmls r3439@last) (cons r343a@b r343b@b*)))))) (r2e79@invalid-fmls-error r3425@stx (append r3438@fmls r3439@last)))) r3435@ls/false) ((lambda (r3441@t) ((lambda (r3443@ls/false) (if r3443@ls/false (apply (lambda (r3445@who r3446@expr) (if (r2cb4@id? r3445@who) (r2e75@bless (list 'define r3445@who (list 'let (list (list 'v r3446@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote r3445@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (r2fa8@syntax-violation '#f '"invalid name" r3425@stx))) r3443@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3441@t))) (r2ebf@syntax-dispatch r3441@t '(_ any any)))) r3433@t))) (r2ebf@syntax-dispatch r3433@t '(_ (any . #(each+ any () any)) any . each-any)))) r3427@t))) (r2ebf@syntax-dispatch r3427@t '(_ (any . each-any) any . each-any)))) r3425@stx))) (set! r2e85@trace-define-syntax-macro (lambda (r3449@stx) ((lambda (r344b@t) ((lambda (r344d@ls/false) (if r344d@ls/false (apply (lambda (r344f@who r3450@expr) (if (r2cb4@id? r344f@who) (r2e75@bless (list 'define-syntax r344f@who (list 'make-traced-macro (list 'quote r344f@who) r3450@expr))) (r2fa8@syntax-violation '#f '"invalid name" r3449@stx))) r344d@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r344b@t))) (r2ebf@syntax-dispatch r344b@t '(_ any any)))) r3449@stx))) (set! r2e87@trace-let/rec-syntax (lambda (r3453@who) (lambda (r3455@stx) ((lambda (r3457@t) ((lambda (r3459@ls/false) (if r3459@ls/false (apply (lambda (r345b@lhs* r345c@rhs* r345d@b r345e@b*) (if (r2cbe@valid-bound-ids? r345b@lhs*) ((lambda (r3463@rhs*) (r2e75@bless (cons r3453@who (cons (map list r345b@lhs* r3463@rhs*) (cons r345d@b r345e@b*))))) (map (lambda (r3465@lhs r3466@rhs) (list 'make-traced-macro (list 'quote r3465@lhs) r3466@rhs)) r345b@lhs* r345c@rhs*)) (r2e79@invalid-fmls-error r3455@stx r345b@lhs*))) r3459@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3457@t))) (r2ebf@syntax-dispatch r3457@t '(_ #(each (any any)) any . each-any)))) r3455@stx)))) (set! r2e89@trace-let-syntax-macro (r2e87@trace-let/rec-syntax 'let-syntax)) (set! r2e8b@trace-letrec-syntax-macro (r2e87@trace-let/rec-syntax 'letrec-syntax)) (set! r2e8d@guard-macro (lambda (r3469@x) ((lambda (r346c@gen-clauses) (begin (set! r346c@gen-clauses (lambda (r3483@con r3484@outerk r3485@clause*) ((lambda (r348a@f r348c@f*) (begin (set! r348a@f (lambda (r34c3@x r34c4@k) ((lambda (r34c7@t) ((lambda (r34c9@ls/false) (if r34c9@ls/false (apply (lambda (r34cb@e r34cc@p) ((lambda (r34cf@t) (list 'let (list (list r34cf@t r34cb@e)) (list 'if r34cf@t (list r34cc@p r34cf@t) r34c4@k))) (gensym))) r34c9@ls/false) ((lambda (r34d1@t) ((lambda (r34d3@ls/false) (if r34d3@ls/false (apply (lambda (r34d5@e) ((lambda (r34d7@t) (list 'let (list (list r34d7@t r34d5@e)) (list 'if r34d7@t r34d7@t r34c4@k))) (gensym))) r34d3@ls/false) ((lambda (r34d9@t) ((lambda (r34db@ls/false) (if r34db@ls/false (apply (lambda (r34dd@e r34de@v r34df@v*) (list 'if r34dd@e (cons 'begin (cons r34de@v r34df@v*)) r34c4@k)) r34db@ls/false) ((lambda (r34e3@t) ((lambda (r34e5@ls/false) (if r34e5@ls/false (apply (lambda () (r2fa8@syntax-violation '#f '"invalid guard clause" r34c3@x)) r34e5@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r34e3@t))) (r2ebf@syntax-dispatch r34e3@t '_))) r34d9@t))) (r2ebf@syntax-dispatch r34d9@t '(any any . each-any)))) r34d1@t))) (r2ebf@syntax-dispatch r34d1@t '(any)))) r34c7@t))) (r2ebf@syntax-dispatch r34c7@t '(any #(scheme-id =>) any)))) r34c3@x))) (set! r348c@f* (lambda (r3499@x*) ((lambda (r349b@t) ((lambda (r349d@ls/false) (if r349d@ls/false (apply (lambda () ((lambda (r349f@g) (values (list r349f@g (list 'lambda '() (list 'raise-continuable r3483@con))) r349f@g)) (gensym))) r349d@ls/false) ((lambda (r34a1@t) ((lambda (r34a3@ls/false) (if r34a3@ls/false (apply (lambda (r34a5@e r34a6@e*) (values (cons 'begin (cons r34a5@e r34a6@e*)) '#f)) r34a3@ls/false) ((lambda (r34a9@t) ((lambda (r34ab@ls/false) (if r34ab@ls/false (apply (lambda (r34ad@cls r34ae@cls*) (call-with-values (lambda () (r348c@f* r34ae@cls*)) (lambda (r34b5@r34b2 r34b6@r34b4) ((lambda (r34b9@g r34ba@e) (values (r348a@f r34ad@cls r34ba@e) r34b9@g)) r34b6@r34b4 r34b5@r34b2)))) r34ab@ls/false) ((lambda (r34bd@t) ((lambda (r34bf@ls/false) (if r34bf@ls/false (apply (lambda (r34c1@others) (r2fa8@syntax-violation '#f '"invalid guard clause" r34c1@others)) r34bf@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r34bd@t))) (r2ebf@syntax-dispatch r34bd@t 'any))) r34a9@t))) (r2ebf@syntax-dispatch r34a9@t '(any . any)))) r34a1@t))) (r2ebf@syntax-dispatch r34a1@t '((#(scheme-id else) any . each-any))))) r349b@t))) (r2ebf@syntax-dispatch r349b@t '()))) r3499@x*))) (call-with-values (lambda () (r348c@f* r3485@clause*)) (lambda (r3491@r348e r3492@r3490) ((lambda (r3495@raisek r3496@code) (if r3495@raisek (list (list 'call/cc (list 'lambda (list r3495@raisek) (list r3484@outerk (list 'lambda '() r3496@code))))) (list r3484@outerk (list 'lambda '() r3496@code)))) r3492@r3490 r3491@r348e))))) '#f '#f))) ((lambda (r346d@t) ((lambda (r346f@ls/false) (if (and r346f@ls/false (apply (lambda (r3471@con r3472@clause* r3473@b r3474@b*) (r2cb4@id? r3471@con)) r346f@ls/false)) (apply (lambda (r3479@con r347a@clause* r347b@b r347c@b*) ((lambda (r3481@outerk) (r2e75@bless (list (list 'call/cc (list 'lambda (list r3481@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list r3479@con) (r346c@gen-clauses r3479@con r3481@outerk r347a@clause*)) (cons 'lambda (cons '() (cons r347b@b r347c@b*)))))))))) (gensym))) r346f@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r346d@t))) (r2ebf@syntax-dispatch r346d@t '(_ (any . each-any) any . each-any)))) r3469@x))) '#f))) (set! r2e8f@define-enumeration-macro (lambda (r34e7@stx) ((lambda (r34ea@set? r34ec@remove-dups) (begin (set! r34ea@set? (lambda (r3503@x) (or (null? r3503@x) (and (not (memq (car r3503@x) (cdr r3503@x))) (r34ea@set? (cdr r3503@x)))))) (set! r34ec@remove-dups (lambda (r3501@ls) (if (null? r3501@ls) '() (cons (car r3501@ls) (r34ec@remove-dups (remq (car r3501@ls) (cdr r3501@ls))))))) ((lambda (r34ed@t) ((lambda (r34ef@ls/false) (if (and r34ef@ls/false (apply (lambda (r34f1@name r34f2@id* r34f3@maker) (and (r2cb4@id? r34f1@name) (r2cb4@id? r34f3@maker) (for-all r2cb4@id? r34f2@id*))) r34ef@ls/false)) (apply (lambda (r34f7@name r34f8@id* r34f9@maker) ((lambda (r34fd@name* r34fe@mk) (r2e75@bless (list 'begin (list 'define r34fe@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote r34fd@name*)))) (list 'define-syntax r34f7@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote r34fd@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote r34f7@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax r34f9@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote r34f9@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote r34fd@name*)) (cons 'syntax-violation (cons (list 'quote r34f9@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons r34fe@mk '('(n* ...)))))))))))) (r34ec@remove-dups (r2fae@syntax->datum r34f8@id*)) (gensym))) r34ef@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r34ed@t))) (r2ebf@syntax-dispatch r34ed@t '(_ any each-any any)))) r34e7@stx))) '#f '#f))) (set! r2e91@time-macro (lambda (r3505@stx) ((lambda (r3507@t) ((lambda (r3509@ls/false) (if r3509@ls/false (apply (lambda (r350b@expr) (r2e75@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() r350b@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) r3509@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3507@t))) (r2ebf@syntax-dispatch r3507@t '(_ any)))) r3505@stx))) (set! r2e93@delay-macro (lambda (r350d@stx) ((lambda (r350f@t) ((lambda (r3511@ls/false) (if r3511@ls/false (apply (lambda (r3513@expr) (r2e75@bless (list 'make-promise (list 'lambda '() r3513@expr)))) r3511@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r350f@t))) (r2ebf@syntax-dispatch r350f@t '(_ any)))) r350d@stx))) (set! r2e95@assert-macro (lambda (r3515@stx) ((lambda (r3517@t) ((lambda (r3519@ls/false) (if r3519@ls/false (apply (lambda (r351b@expr) ((lambda (r351d@pos) (r2e75@bless (list 'unless r351b@expr (list 'assertion-error (list 'quote r351b@expr) (list 'quote r351d@pos))))) (or (r2fa0@expression-position r3515@stx) (r2fa0@expression-position r351b@expr)))) r3519@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3517@t))) (r2ebf@syntax-dispatch r3517@t '(_ any)))) r3515@stx))) (set! r2e97@endianness-macro (lambda (r351f@stx) ((lambda (r3521@t) ((lambda (r3523@ls/false) (if r3523@ls/false (apply (lambda (r3525@e) ((lambda (r3527@t) (if (memv r3527@t '(little)) (r2e75@bless ''little) (if (memv r3527@t '(big)) (r2e75@bless ''big) (r2fa8@syntax-violation '#f '"endianness must be big or little" r351f@stx)))) (r2fae@syntax->datum r3525@e))) r3523@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3521@t))) (r2ebf@syntax-dispatch r3521@t '(_ any)))) r351f@stx))) (set! r2e99@identifier-syntax-macro (lambda (r3529@stx) ((lambda (r352b@t) ((lambda (r352d@ls/false) (if r352d@ls/false (apply (lambda (r352f@expr) (r2e75@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax r352f@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax r352f@expr) '((syntax (e* ...)))))))))) r352d@ls/false) ((lambda (r3531@t) ((lambda (r3533@ls/false) (if (and r3533@ls/false (apply (lambda (r3535@id1 r3536@expr1 r3537@id2 r3538@expr2 r3539@expr3) (and (r2cb4@id? r3535@id1) (r2cb4@id? r3537@id2) (r2cb4@id? r3538@expr2))) r3533@ls/false)) (apply (lambda (r353f@id1 r3540@expr1 r3541@id2 r3542@expr2 r3543@expr3) (r2e75@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax r3540@expr1)) (list (list 'set! 'id r3542@expr2) (list 'syntax r3543@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons r3540@expr1 '(e* ...))))))))) r3533@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3531@t))) (r2ebf@syntax-dispatch r3531@t '(_ (any any) ((#(scheme-id set!) any any) any))))) r352b@t))) (r2ebf@syntax-dispatch r352b@t '(_ any)))) r3529@stx))) (set! r2e9b@do-macro (lambda (r3549@stx) ((lambda (r354c@bind) (begin (set! r354c@bind (lambda (r3563@x) ((lambda (r3565@t) ((lambda (r3567@ls/false) (if r3567@ls/false (apply (lambda (r3569@x r356a@init) (list r3569@x r356a@init r3569@x)) r3567@ls/false) ((lambda (r356d@t) ((lambda (r356f@ls/false) (if r356f@ls/false (apply (lambda (r3571@x r3572@init r3573@step) (list r3571@x r3572@init r3573@step)) r356f@ls/false) ((lambda (r3577@t) ((lambda (r3579@ls/false) (if r3579@ls/false (apply (lambda () (r2fa8@syntax-violation '#f '"invalid binding" r3549@stx)) r3579@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3577@t))) (r2ebf@syntax-dispatch r3577@t '_))) r356d@t))) (r2ebf@syntax-dispatch r356d@t '(any any any)))) r3565@t))) (r2ebf@syntax-dispatch r3565@t '(any any)))) r3563@x))) ((lambda (r354d@t) ((lambda (r354f@ls/false) (if r354f@ls/false (apply (lambda (r3551@binding* r3552@test r3553@expr* r3554@command*) ((lambda (r3559@t) ((lambda (r355b@ls/false) (if r355b@ls/false (apply (lambda (r355d@x* r355e@init* r355f@step*) (if (r2cbe@valid-bound-ids? r355d@x*) (r2e75@bless (list 'letrec (list (list 'loop (list 'lambda r355d@x* (list 'if r3552@test (cons 'begin (cons '(if #f #f) r3553@expr*)) (cons 'begin (append r3554@command* (list (cons 'loop r355f@step*)))))))) (cons 'loop r355e@init*))) (r2fa8@syntax-violation '#f '"invalid bindings" r3549@stx))) r355b@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3559@t))) (r2ebf@syntax-dispatch r3559@t '#(each (any any any))))) (map r354c@bind r3551@binding*))) r354f@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r354d@t))) (r2ebf@syntax-dispatch r354d@t '(_ each-any (any . each-any) . each-any)))) r3549@stx))) '#f))) (set! r2e9d@let*-macro (lambda (r357b@stx) ((lambda (r357d@t) ((lambda (r357f@ls/false) (if (and r357f@ls/false (apply (lambda (r3581@lhs* r3582@rhs* r3583@b r3584@b*) (for-all r2cb4@id? r3581@lhs*)) r357f@ls/false)) (apply (lambda (r3589@lhs* r358a@rhs* r358b@b r358c@b*) (r2e75@bless ((letrec ((r3591@f (lambda (r3593@x*) (if (null? r3593@x*) (cons 'let (cons '() (cons r358b@b r358c@b*))) (list 'let (list (car r3593@x*)) (r3591@f (cdr r3593@x*))))))) r3591@f) (map list r3589@lhs* r358a@rhs*)))) r357f@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r357d@t))) (r2ebf@syntax-dispatch r357d@t '(_ #(each (any any)) any . each-any)))) r357b@stx))) (set! r2e9f@or-macro (lambda (r3595@stx) ((lambda (r3597@t) ((lambda (r3599@ls/false) (if r3599@ls/false (apply (lambda () '#f) r3599@ls/false) ((lambda (r359b@t) ((lambda (r359d@ls/false) (if r359d@ls/false (apply (lambda (r359f@e r35a0@e*) (r2e75@bless ((letrec ((r35a3@f (lambda (r35a5@e r35a6@e*) (if (null? r35a6@e*) (list 'begin '#f r35a5@e) (list 'let (list (list 't r35a5@e)) (list 'if 't 't (r35a3@f (car r35a6@e*) (cdr r35a6@e*)))))))) r35a3@f) r359f@e r35a0@e*))) r359d@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r359b@t))) (r2ebf@syntax-dispatch r359b@t '(_ any . each-any)))) r3597@t))) (r2ebf@syntax-dispatch r3597@t '(_)))) r3595@stx))) (set! r2ea1@and-macro (lambda (r35a9@stx) ((lambda (r35ab@t) ((lambda (r35ad@ls/false) (if r35ad@ls/false (apply (lambda () '#t) r35ad@ls/false) ((lambda (r35af@t) ((lambda (r35b1@ls/false) (if r35b1@ls/false (apply (lambda (r35b3@e r35b4@e*) (r2e75@bless ((letrec ((r35b7@f (lambda (r35b9@e r35ba@e*) (if (null? r35ba@e*) (list 'begin '#f r35b9@e) (cons 'if (cons r35b9@e (cons (r35b7@f (car r35ba@e*) (cdr r35ba@e*)) '(#f)))))))) r35b7@f) r35b3@e r35b4@e*))) r35b1@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r35af@t))) (r2ebf@syntax-dispatch r35af@t '(_ any . each-any)))) r35ab@t))) (r2ebf@syntax-dispatch r35ab@t '(_)))) r35a9@stx))) (set! r2ea3@cond-macro (lambda (r35bd@stx) ((lambda (r35bf@t) ((lambda (r35c1@ls/false) (if r35c1@ls/false (apply (lambda (r35c3@cls r35c4@cls*) (r2e75@bless ((letrec ((r35c7@f (lambda (r35c9@cls r35ca@cls*) (if (null? r35ca@cls*) ((lambda (r35cd@t) ((lambda (r35cf@ls/false) (if r35cf@ls/false (apply (lambda (r35d1@e r35d2@e*) (cons 'begin (cons r35d1@e r35d2@e*))) r35cf@ls/false) ((lambda (r35d5@t) ((lambda (r35d7@ls/false) (if r35d7@ls/false (apply (lambda (r35d9@e r35da@p) (list 'let (list (list 't r35d9@e)) (list 'if 't (cons r35da@p '(t))))) r35d7@ls/false) ((lambda (r35dd@t) ((lambda (r35df@ls/false) (if r35df@ls/false (apply (lambda (r35e1@e) (cons 'or (cons r35e1@e '((if #f #f))))) r35df@ls/false) ((lambda (r35e3@t) ((lambda (r35e5@ls/false) (if r35e5@ls/false (apply (lambda (r35e7@e r35e8@e*) (list 'if r35e7@e (cons 'begin r35e8@e*))) r35e5@ls/false) ((lambda (r35eb@t) ((lambda (r35ed@ls/false) (if r35ed@ls/false (apply (lambda () (r2fa8@syntax-violation '#f '"invalid last clause" r35bd@stx)) r35ed@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r35eb@t))) (r2ebf@syntax-dispatch r35eb@t '_))) r35e3@t))) (r2ebf@syntax-dispatch r35e3@t '(any . each-any)))) r35dd@t))) (r2ebf@syntax-dispatch r35dd@t '(any)))) r35d5@t))) (r2ebf@syntax-dispatch r35d5@t '(any #(scheme-id =>) any)))) r35cd@t))) (r2ebf@syntax-dispatch r35cd@t '(#(scheme-id else) any . each-any)))) r35c9@cls) ((lambda (r35ef@t) ((lambda (r35f1@ls/false) (if r35f1@ls/false (apply (lambda (r35f3@e r35f4@e*) (r2fa8@syntax-violation '#f '"incorrect position of keyword else" r35bd@stx)) r35f1@ls/false) ((lambda (r35f7@t) ((lambda (r35f9@ls/false) (if r35f9@ls/false (apply (lambda (r35fb@e r35fc@p) (list 'let (list (list 't r35fb@e)) (list 'if 't (cons r35fc@p '(t)) (r35c7@f (car r35ca@cls*) (cdr r35ca@cls*))))) r35f9@ls/false) ((lambda (r35ff@t) ((lambda (r3601@ls/false) (if r3601@ls/false (apply (lambda (r3603@e) (list 'or r3603@e (r35c7@f (car r35ca@cls*) (cdr r35ca@cls*)))) r3601@ls/false) ((lambda (r3605@t) ((lambda (r3607@ls/false) (if r3607@ls/false (apply (lambda (r3609@e r360a@e*) (list 'if r3609@e (cons 'begin r360a@e*) (r35c7@f (car r35ca@cls*) (cdr r35ca@cls*)))) r3607@ls/false) ((lambda (r360d@t) ((lambda (r360f@ls/false) (if r360f@ls/false (apply (lambda () (r2fa8@syntax-violation '#f '"invalid last clause" r35bd@stx)) r360f@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r360d@t))) (r2ebf@syntax-dispatch r360d@t '_))) r3605@t))) (r2ebf@syntax-dispatch r3605@t '(any . each-any)))) r35ff@t))) (r2ebf@syntax-dispatch r35ff@t '(any)))) r35f7@t))) (r2ebf@syntax-dispatch r35f7@t '(any #(scheme-id =>) any)))) r35ef@t))) (r2ebf@syntax-dispatch r35ef@t '(#(scheme-id else) any . each-any)))) r35c9@cls))))) r35c7@f) r35c3@cls r35c4@cls*))) r35c1@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r35bf@t))) (r2ebf@syntax-dispatch r35bf@t '(_ any . each-any)))) r35bd@stx))) (set! r2ea5@do-include (lambda (r3611@stx r3612@id r3613@filename) ((lambda (r3617@filename) (begin (if (not (and (string? r3617@filename) (r2cb4@id? r3612@id))) (r2fa8@syntax-violation '#f '"invalid syntax" r3611@stx) (void)) (cons (r2e75@bless 'begin) (with-input-from-file r3617@filename (lambda () ((letrec ((r3619@f (lambda (r361b@ls) ((lambda (r361d@x) (if (eof-object? r361d@x) (reverse r361b@ls) (r3619@f (cons (r2c92@datum->stx r3612@id r361d@x) r361b@ls)))) (r2851@r276e@read-annotated))))) r3619@f) '())))))) (r2cca@stx->datum r3613@filename)))) (set! r2ea7@include-macro (lambda (r361f@e) ((lambda (r3621@t) ((lambda (r3623@ls/false) (if r3623@ls/false (apply (lambda (r3625@id r3626@filename) (r2ea5@do-include r361f@e r3625@id r3626@filename)) r3623@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3621@t))) (r2ebf@syntax-dispatch r3621@t '(any any)))) r361f@e))) (set! r2ea9@include-into-macro (lambda (r3629@e) ((lambda (r362b@t) ((lambda (r362d@ls/false) (if r362d@ls/false (apply (lambda (r362f@id r3630@filename) (r2ea5@do-include r3629@e r362f@id r3630@filename)) r362d@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r362b@t))) (r2ebf@syntax-dispatch r362b@t '(_ any any)))) r3629@e))) (set! r2eab@syntax-rules-macro (lambda (r3633@e) ((lambda (r3635@t) ((lambda (r3637@ls/false) (if r3637@ls/false (apply (lambda (r3639@lits r363a@pat* r363b@tmp*) (begin (r2ec5@verify-literals r3639@lits r3633@e) (r2e75@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons r3639@lits (map (lambda (r363f@pat r3640@tmp) ((lambda (r3643@t) ((lambda (r3645@ls/false) (if r3645@ls/false (apply (lambda (r3647@rest) (list (cons 'g r3647@rest) (list 'syntax r3640@tmp))) r3645@ls/false) ((lambda (r3649@t) ((lambda (r364b@ls/false) (if r364b@ls/false (apply (lambda () (r2fa8@syntax-violation '#f '"invalid syntax-rules pattern" r3633@e r363f@pat)) r364b@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3649@t))) (r2ebf@syntax-dispatch r3649@t '_))) r3643@t))) (r2ebf@syntax-dispatch r3643@t '(_ . any)))) r363f@pat)) r363a@pat* r363b@tmp*)))))))) r3637@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3635@t))) (r2ebf@syntax-dispatch r3635@t '(_ each-any . #(each (any any)))))) r3633@e))) (set! r2ead@quasiquote-macro ((lambda () ((lambda (r364e@datum r366a@quasicons* r366c@quasicons r366e@quasiappend r3670@quasivector r3672@vquasi r3674@quasi) (begin (set! r364e@datum (lambda (r374f@x) (list (r2e49@scheme-stx 'quote) (r2c9c@mkstx r374f@x '() '() '())))) (set! r366a@quasicons* (lambda (r3747@x r3748@y) ((letrec ((r374b@f (lambda (r374d@x) (if (null? r374d@x) r3748@y (r366c@quasicons (car r374d@x) (r374b@f (cdr r374d@x))))))) r374b@f) r3747@x))) (set! r366c@quasicons (lambda (r3721@x r3722@y) ((lambda (r3725@t) ((lambda (r3727@ls/false) (if r3727@ls/false (apply (lambda (r3729@dy) ((lambda (r372b@t) ((lambda (r372d@ls/false) (if r372d@ls/false (apply (lambda (r372f@dx) (list (r2e49@scheme-stx 'quote) (cons r372f@dx r3729@dy))) r372d@ls/false) ((lambda (r3731@t) ((lambda (r3733@ls/false) (if r3733@ls/false (apply (lambda () ((lambda (r3735@t) ((lambda (r3737@ls/false) (if r3737@ls/false (apply (lambda () (list (r2e49@scheme-stx 'list) r3721@x)) r3737@ls/false) ((lambda (r3739@t) ((lambda (r373b@ls/false) (if r373b@ls/false (apply (lambda () (list (r2e49@scheme-stx 'cons) r3721@x r3722@y)) r373b@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3739@t))) (r2ebf@syntax-dispatch r3739@t '_))) r3735@t))) (r2ebf@syntax-dispatch r3735@t '()))) r3729@dy)) r3733@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3731@t))) (r2ebf@syntax-dispatch r3731@t '_))) r372b@t))) (r2ebf@syntax-dispatch r372b@t '(#(scheme-id quote) any)))) r3721@x)) r3727@ls/false) ((lambda (r373d@t) ((lambda (r373f@ls/false) (if r373f@ls/false (apply (lambda (r3741@stuff) (cons* (r2e49@scheme-stx 'list) r3721@x r3741@stuff)) r373f@ls/false) ((lambda (r3743@t) ((lambda (r3745@ls/false) (if r3745@ls/false (apply (lambda () (list (r2e49@scheme-stx 'cons) r3721@x r3722@y)) r3745@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3743@t))) (r2ebf@syntax-dispatch r3743@t '_))) r373d@t))) (r2ebf@syntax-dispatch r373d@t '(#(scheme-id list) . each-any)))) r3725@t))) (r2ebf@syntax-dispatch r3725@t '(#(scheme-id quote) any)))) r3722@y))) (set! r366e@quasiappend (lambda (r3707@x r3708@y) ((lambda (r370b@ls) (if (null? r370b@ls) (list (r2e49@scheme-stx 'quote) '()) (if (null? (cdr r370b@ls)) (car r370b@ls) (cons* (r2e49@scheme-stx 'append) r370b@ls)))) ((letrec ((r370d@f (lambda (r370f@x) (if (null? r370f@x) ((lambda (r3711@t) ((lambda (r3713@ls/false) (if r3713@ls/false (apply (lambda () '()) r3713@ls/false) ((lambda (r3715@t) ((lambda (r3717@ls/false) (if r3717@ls/false (apply (lambda () (list r3708@y)) r3717@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3715@t))) (r2ebf@syntax-dispatch r3715@t '_))) r3711@t))) (r2ebf@syntax-dispatch r3711@t '(#(scheme-id quote) ())))) r3708@y) ((lambda (r3719@t) ((lambda (r371b@ls/false) (if r371b@ls/false (apply (lambda () (r370d@f (cdr r370f@x))) r371b@ls/false) ((lambda (r371d@t) ((lambda (r371f@ls/false) (if r371f@ls/false (apply (lambda () (cons (car r370f@x) (r370d@f (cdr r370f@x)))) r371f@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r371d@t))) (r2ebf@syntax-dispatch r371d@t '_))) r3719@t))) (r2ebf@syntax-dispatch r3719@t '(#(scheme-id quote) ())))) (car r370f@x)))))) r370d@f) r3707@x)))) (set! r3670@quasivector (lambda (r36d5@x) ((lambda (r36d7@pat-x) ((lambda (r36d9@t) ((lambda (r36db@ls/false) (if r36db@ls/false (apply (lambda (r36dd@x*) (list (r2e49@scheme-stx 'quote) (list->vector r36dd@x*))) r36db@ls/false) ((lambda (r36df@t) ((lambda (r36e1@ls/false) (if r36e1@ls/false (apply (lambda () ((letrec ((r36e3@f (lambda (r36e5@x r36e6@k) ((lambda (r36e9@t) ((lambda (r36eb@ls/false) (if r36eb@ls/false (apply (lambda (r36ed@x*) (r36e6@k (map (lambda (r36ef@x) (list (r2e49@scheme-stx 'quote) r36ef@x)) r36ed@x*))) r36eb@ls/false) ((lambda (r36f1@t) ((lambda (r36f3@ls/false) (if r36f3@ls/false (apply (lambda (r36f5@x*) (r36e6@k r36f5@x*)) r36f3@ls/false) ((lambda (r36f7@t) ((lambda (r36f9@ls/false) (if r36f9@ls/false (apply (lambda (r36fb@x r36fc@y) (r36e3@f r36fc@y (lambda (r36ff@ls) (r36e6@k (cons r36fb@x r36ff@ls))))) r36f9@ls/false) ((lambda (r3701@t) ((lambda (r3703@ls/false) (if r3703@ls/false (apply (lambda () (list (r2e49@scheme-stx 'list->vector) r36d7@pat-x)) r3703@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3701@t))) (r2ebf@syntax-dispatch r3701@t '_))) r36f7@t))) (r2ebf@syntax-dispatch r36f7@t '(#(scheme-id cons) any any)))) r36f1@t))) (r2ebf@syntax-dispatch r36f1@t '(#(scheme-id list) . each-any)))) r36e9@t))) (r2ebf@syntax-dispatch r36e9@t '(#(scheme-id quote) each-any)))) r36e5@x)))) r36e3@f) r36d5@x (lambda (r3705@ls) (cons* (r2e49@scheme-stx 'vector) r3705@ls)))) r36e1@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r36df@t))) (r2ebf@syntax-dispatch r36df@t '_))) r36d9@t))) (r2ebf@syntax-dispatch r36d9@t '(#(scheme-id quote) each-any)))) r36d7@pat-x)) r36d5@x))) (set! r3672@vquasi (lambda (r36b3@p r36b4@lev) ((lambda (r36b7@t) ((lambda (r36b9@ls/false) (if r36b9@ls/false (apply (lambda (r36bb@p r36bc@q) ((lambda (r36bf@t) ((lambda (r36c1@ls/false) (if r36c1@ls/false (apply (lambda (r36c3@p) (if (= r36b4@lev '0) (r366a@quasicons* r36c3@p (r3672@vquasi r36bc@q r36b4@lev)) (r366c@quasicons (r366c@quasicons (r364e@datum 'unquote) (r3674@quasi r36c3@p (- r36b4@lev '1))) (r3672@vquasi r36bc@q r36b4@lev)))) r36c1@ls/false) ((lambda (r36c5@t) ((lambda (r36c7@ls/false) (if r36c7@ls/false (apply (lambda (r36c9@p) (if (= r36b4@lev '0) (r366e@quasiappend r36c9@p (r3672@vquasi r36bc@q r36b4@lev)) (r366c@quasicons (r366c@quasicons (r364e@datum 'unquote-splicing) (r3674@quasi r36c9@p (- r36b4@lev '1))) (r3672@vquasi r36bc@q r36b4@lev)))) r36c7@ls/false) ((lambda (r36cb@t) ((lambda (r36cd@ls/false) (if r36cd@ls/false (apply (lambda (r36cf@p) (r366c@quasicons (r3674@quasi r36cf@p r36b4@lev) (r3672@vquasi r36bc@q r36b4@lev))) r36cd@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r36cb@t))) (r2ebf@syntax-dispatch r36cb@t 'any))) r36c5@t))) (r2ebf@syntax-dispatch r36c5@t '(#(scheme-id unquote-splicing) . each-any)))) r36bf@t))) (r2ebf@syntax-dispatch r36bf@t '(#(scheme-id unquote) . each-any)))) r36bb@p)) r36b9@ls/false) ((lambda (r36d1@t) ((lambda (r36d3@ls/false) (if r36d3@ls/false (apply (lambda () (list (r2e49@scheme-stx 'quote) '())) r36d3@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r36d1@t))) (r2ebf@syntax-dispatch r36d1@t '()))) r36b7@t))) (r2ebf@syntax-dispatch r36b7@t '(any . any)))) r36b3@p))) (set! r3674@quasi (lambda (r367d@p r367e@lev) ((lambda (r3681@t) ((lambda (r3683@ls/false) (if r3683@ls/false (apply (lambda (r3685@p) (if (= r367e@lev '0) r3685@p (r366c@quasicons (r364e@datum 'unquote) (r3674@quasi (list r3685@p) (- r367e@lev '1))))) r3683@ls/false) ((lambda (r3687@t) ((lambda (r3689@ls/false) (if r3689@ls/false (apply (lambda (r368b@p r368c@q) (if (= r367e@lev '0) (r366a@quasicons* r368b@p (r3674@quasi r368c@q r367e@lev)) (r366c@quasicons (r366c@quasicons (r364e@datum 'unquote) (r3674@quasi r368b@p (- r367e@lev '1))) (r3674@quasi r368c@q r367e@lev)))) r3689@ls/false) ((lambda (r368f@t) ((lambda (r3691@ls/false) (if r3691@ls/false (apply (lambda (r3693@p r3694@q) (if (= r367e@lev '0) (r366e@quasiappend r3693@p (r3674@quasi r3694@q r367e@lev)) (r366c@quasicons (r366c@quasicons (r364e@datum 'unquote-splicing) (r3674@quasi r3693@p (- r367e@lev '1))) (r3674@quasi r3694@q r367e@lev)))) r3691@ls/false) ((lambda (r3697@t) ((lambda (r3699@ls/false) (if r3699@ls/false (apply (lambda (r369b@p) (r366c@quasicons (r364e@datum 'quasiquote) (r3674@quasi (list r369b@p) (+ r367e@lev '1)))) r3699@ls/false) ((lambda (r369d@t) ((lambda (r369f@ls/false) (if r369f@ls/false (apply (lambda (r36a1@p r36a2@q) (r366c@quasicons (r3674@quasi r36a1@p r367e@lev) (r3674@quasi r36a2@q r367e@lev))) r369f@ls/false) ((lambda (r36a5@t) ((lambda (r36a7@ls/false) (if (and r36a7@ls/false (apply (lambda (r36a9@x) (not (r2c7c@stx? r36a9@x))) r36a7@ls/false)) (apply (lambda (r36ab@x) (r3670@quasivector (r3672@vquasi r36ab@x r367e@lev))) r36a7@ls/false) ((lambda (r36ad@t) ((lambda (r36af@ls/false) (if r36af@ls/false (apply (lambda (r36b1@p) (list (r2e49@scheme-stx 'quote) r36b1@p)) r36af@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r36ad@t))) (r2ebf@syntax-dispatch r36ad@t 'any))) r36a5@t))) (r2ebf@syntax-dispatch r36a5@t '#(vector each-any)))) r369d@t))) (r2ebf@syntax-dispatch r369d@t '(any . any)))) r3697@t))) (r2ebf@syntax-dispatch r3697@t '(#(scheme-id quasiquote) any)))) r368f@t))) (r2ebf@syntax-dispatch r368f@t '((#(scheme-id unquote-splicing) . each-any) . any)))) r3687@t))) (r2ebf@syntax-dispatch r3687@t '((#(scheme-id unquote) . each-any) . any)))) r3681@t))) (r2ebf@syntax-dispatch r3681@t '(#(scheme-id unquote) any)))) r367d@p))) (lambda (r3675@x) ((lambda (r3677@t) ((lambda (r3679@ls/false) (if r3679@ls/false (apply (lambda (r367b@e) (r3674@quasi r367b@e '0)) r3679@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3677@t))) (r2ebf@syntax-dispatch r3677@t '(_ any)))) r3675@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! r2eaf@quasisyntax-macro ((lambda () ((lambda (r3752@quasi) (begin (set! r3752@quasi (lambda (r376d@p r376e@lev) ((lambda (r3771@t) ((lambda (r3773@ls/false) (if r3773@ls/false (apply (lambda (r3775@p) (if (= r376e@lev '0) ((lambda (r3777@g) (values (list r3777@g) (list r3775@p) r3777@g)) (gensym)) (call-with-values (lambda () (r3752@quasi r3775@p (- r376e@lev '1))) (lambda (r377f@r377a r3780@r377c r3781@r377e) ((lambda (r3785@p r3786@rhs* r3787@lhs*) (values r3787@lhs* r3786@rhs* (list 'unsyntax r3785@p))) r3781@r377e r3780@r377c r377f@r377a))))) r3773@ls/false) ((lambda (r378b@t) ((lambda (r378d@ls/false) (if (and r378d@ls/false (apply (lambda () (= r376e@lev '0)) r378d@ls/false)) (apply (lambda () (r2fa8@syntax-violation '#f '"incorrect use of unsyntax" r376d@p)) r378d@ls/false) ((lambda (r378f@t) ((lambda (r3791@ls/false) (if r3791@ls/false (apply (lambda (r3793@p* r3794@q) (call-with-values (lambda () (r3752@quasi r3794@q r376e@lev)) (lambda (r379d@r3798 r379e@r379a r379f@r379c) ((lambda (r37a3@q r37a4@rhs* r37a5@lhs*) (if (= r376e@lev '0) ((lambda (r37a9@g*) (values (append r37a9@g* r37a5@lhs*) (append r3793@p* r37a4@rhs*) (append r37a9@g* r37a3@q))) (map (lambda (r37ab@x) (gensym)) r3793@p*)) (call-with-values (lambda () (r3752@quasi r3793@p* (- r376e@lev '1))) (lambda (r37b3@r37ae r37b4@r37b0 r37b5@r37b2) ((lambda (r37b9@p* r37ba@rhs2* r37bb@lhs2*) (values (append r37bb@lhs2* r37a5@lhs*) (append r37ba@rhs2* r37a4@rhs*) (cons (cons 'unsyntax r37b9@p*) r37a3@q))) r37b5@r37b2 r37b4@r37b0 r37b3@r37ae))))) r379f@r379c r379e@r379a r379d@r3798)))) r3791@ls/false) ((lambda (r37bf@t) ((lambda (r37c1@ls/false) (if r37c1@ls/false (apply (lambda (r37c3@p* r37c4@q) (call-with-values (lambda () (r3752@quasi r37c4@q r376e@lev)) (lambda (r37cd@r37c8 r37ce@r37ca r37cf@r37cc) ((lambda (r37d3@q r37d4@rhs* r37d5@lhs*) (if (= r376e@lev '0) ((lambda (r37d9@g*) (values (append (map (lambda (r37db@g) (cons r37db@g '(...))) r37d9@g*) r37d5@lhs*) (append r37c3@p* r37d4@rhs*) (append (apply append (map (lambda (r37dd@g) (cons r37dd@g '(...))) r37d9@g*)) r37d3@q))) (map (lambda (r37df@x) (gensym)) r37c3@p*)) (call-with-values (lambda () (r3752@quasi r37c3@p* (- r376e@lev '1))) (lambda (r37e7@r37e2 r37e8@r37e4 r37e9@r37e6) ((lambda (r37ed@p* r37ee@rhs2* r37ef@lhs2*) (values (append r37ef@lhs2* r37d5@lhs*) (append r37ee@rhs2* r37d4@rhs*) (cons (cons 'unsyntax-splicing r37ed@p*) r37d3@q))) r37e9@r37e6 r37e8@r37e4 r37e7@r37e2))))) r37cf@r37cc r37ce@r37ca r37cd@r37c8)))) r37c1@ls/false) ((lambda (r37f3@t) ((lambda (r37f5@ls/false) (if (and r37f5@ls/false (apply (lambda () (= r376e@lev '0)) r37f5@ls/false)) (apply (lambda () (r2fa8@syntax-violation '#f '"incorrect use of unsyntax-splicing" r376d@p)) r37f5@ls/false) ((lambda (r37f7@t) ((lambda (r37f9@ls/false) (if r37f9@ls/false (apply (lambda (r37fb@p) (call-with-values (lambda () (r3752@quasi r37fb@p (+ r376e@lev '1))) (lambda (r3803@r37fe r3804@r3800 r3805@r3802) ((lambda (r3809@p r380a@rhs* r380b@lhs*) (values r380b@lhs* r380a@rhs* (list 'quasisyntax r3809@p))) r3805@r3802 r3804@r3800 r3803@r37fe)))) r37f9@ls/false) ((lambda (r380f@t) ((lambda (r3811@ls/false) (if r3811@ls/false (apply (lambda (r3813@p r3814@q) (call-with-values (lambda () (r3752@quasi r3813@p r376e@lev)) (lambda (r3823@r3818 r3824@r381a r3825@r381c) (call-with-values (lambda () (r3752@quasi r3814@q r376e@lev)) (lambda (r3829@r381e r382a@r3820 r382b@r3822) ((lambda (r382f@q r3830@rhs2* r3831@lhs2* r3832@p r3833@rhs* r3834@lhs*) (values (append r3831@lhs2* r3834@lhs*) (append r3830@rhs2* r3833@rhs*) (cons r3832@p r382f@q))) r382b@r3822 r382a@r3820 r3829@r381e r3825@r381c r3824@r381a r3823@r3818)))))) r3811@ls/false) ((lambda (r383b@t) ((lambda (r383d@ls/false) (if r383d@ls/false (apply (lambda (r383f@x*) (call-with-values (lambda () (r3752@quasi r383f@x* r376e@lev)) (lambda (r3847@r3842 r3848@r3844 r3849@r3846) ((lambda (r384d@x* r384e@rhs* r384f@lhs*) (values r384f@lhs* r384e@rhs* (list->vector r384d@x*))) r3849@r3846 r3848@r3844 r3847@r3842)))) r383d@ls/false) ((lambda (r3853@t) ((lambda (r3855@ls/false) (if r3855@ls/false (apply (lambda () (values '() '() r376d@p)) r3855@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3853@t))) (r2ebf@syntax-dispatch r3853@t '_))) r383b@t))) (r2ebf@syntax-dispatch r383b@t '#(vector each-any)))) r380f@t))) (r2ebf@syntax-dispatch r380f@t '(any . any)))) r37f7@t))) (r2ebf@syntax-dispatch r37f7@t '(#(scheme-id quasisyntax) any)))) r37f3@t))) (r2ebf@syntax-dispatch r37f3@t '#(scheme-id unsyntax-splicing)))) r37bf@t))) (r2ebf@syntax-dispatch r37bf@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) r378f@t))) (r2ebf@syntax-dispatch r378f@t '((#(scheme-id unsyntax) . each-any) . any)))) r378b@t))) (r2ebf@syntax-dispatch r378b@t '#(scheme-id unsyntax)))) r3771@t))) (r2ebf@syntax-dispatch r3771@t '(#(scheme-id unsyntax) any)))) r376d@p))) (lambda (r3753@x) ((lambda (r3755@t) ((lambda (r3757@ls/false) (if r3757@ls/false (apply (lambda (r3759@e) (call-with-values (lambda () (r3752@quasi r3759@e '0)) (lambda (r3761@r375c r3762@r375e r3763@r3760) ((lambda (r3767@v r3768@rhs* r3769@lhs*) (r2e75@bless (list 'syntax-case (cons 'list r3768@rhs*) '() (list r3769@lhs* (list 'syntax r3767@v))))) r3763@r3760 r3762@r375e r3761@r375c)))) r3757@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3755@t))) (r2ebf@syntax-dispatch r3755@t '(_ any)))) r3753@x)))) '#f)))) (set! r2eb1@define-struct-macro (lambda (r3857@stx) (r2fa8@syntax-violation '#f '"define-struct not supported" r3857@stx))) (set! r2eb3@define-record-type-macro (lambda (r3859@x) ((lambda (r385c@id r385e@get-record-name r3860@get-record-constructor-name r3862@get-record-predicate-name r3864@get-clause r3866@foo-rtd-code r3868@parent-rtd-code r386a@parent-rcd-code r386c@foo-rcd-code r386e@get-protocol-code r3870@get-fields r3872@get-mutator-indices r3874@get-mutators r3876@get-accessors r3878@enumerate r387a@do-define-record r387c@verify-clauses) (begin (set! r385c@id (lambda (r3a4f@ctxt . r3a51@str*) (r2fac@datum->syntax r3a4f@ctxt (string->symbol (apply string-append (map (lambda (r3a53@x) (if (symbol? r3a53@x) (symbol->string r3a53@x) (if (string? r3a53@x) r3a53@x (assertion-violation 'define-record-type '"BUG")))) r3a51@str*)))))) (set! r385e@get-record-name (lambda (r3a3d@spec) ((lambda (r3a3f@t) ((lambda (r3a41@ls/false) (if r3a41@ls/false (apply (lambda (r3a43@foo r3a44@make-foo r3a45@foo?) r3a43@foo) r3a41@ls/false) ((lambda (r3a49@t) ((lambda (r3a4b@ls/false) (if r3a4b@ls/false (apply (lambda (r3a4d@foo) r3a4d@foo) r3a4b@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3a49@t))) (r2ebf@syntax-dispatch r3a49@t 'any))) r3a3f@t))) (r2ebf@syntax-dispatch r3a3f@t '(any any any)))) r3a3d@spec))) (set! r3860@get-record-constructor-name (lambda (r3a29@spec) ((lambda (r3a2b@t) ((lambda (r3a2d@ls/false) (if r3a2d@ls/false (apply (lambda (r3a2f@foo r3a30@make-foo r3a31@foo?) r3a30@make-foo) r3a2d@ls/false) ((lambda (r3a35@t) ((lambda (r3a37@ls/false) (if (and r3a37@ls/false (apply (lambda (r3a39@foo) (r2cb4@id? r3a39@foo)) r3a37@ls/false)) (apply (lambda (r3a3b@foo) (r385c@id r3a3b@foo '"make-" (r2cca@stx->datum r3a3b@foo))) r3a37@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3a35@t))) (r2ebf@syntax-dispatch r3a35@t 'any))) r3a2b@t))) (r2ebf@syntax-dispatch r3a2b@t '(any any any)))) r3a29@spec))) (set! r3862@get-record-predicate-name (lambda (r3a15@spec) ((lambda (r3a17@t) ((lambda (r3a19@ls/false) (if r3a19@ls/false (apply (lambda (r3a1b@foo r3a1c@make-foo r3a1d@foo?) r3a1d@foo?) r3a19@ls/false) ((lambda (r3a21@t) ((lambda (r3a23@ls/false) (if (and r3a23@ls/false (apply (lambda (r3a25@foo) (r2cb4@id? r3a25@foo)) r3a23@ls/false)) (apply (lambda (r3a27@foo) (r385c@id r3a27@foo (r2cca@stx->datum r3a27@foo) '"?")) r3a23@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3a21@t))) (r2ebf@syntax-dispatch r3a21@t 'any))) r3a17@t))) (r2ebf@syntax-dispatch r3a17@t '(any any any)))) r3a15@spec))) (set! r3864@get-clause (lambda (r3a03@id r3a04@ls) ((lambda (r3a07@t) ((lambda (r3a09@ls/false) (if r3a09@ls/false (apply (lambda () '#f) r3a09@ls/false) ((lambda (r3a0b@t) ((lambda (r3a0d@ls/false) (if r3a0d@ls/false (apply (lambda (r3a0f@x r3a10@rest r3a11@ls) (if (r2cbc@free-id=? (r2e75@bless r3a03@id) r3a0f@x) (cons r3a0f@x r3a10@rest) (r3864@get-clause r3a03@id r3a11@ls))) r3a0d@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3a0b@t))) (r2ebf@syntax-dispatch r3a0b@t '((any . any) . any)))) r3a07@t))) (r2ebf@syntax-dispatch r3a07@t '()))) r3a04@ls))) (set! r3866@foo-rtd-code (lambda (r39b1@name r39b2@clause* r39b3@parent-rtd-code) ((lambda (r39b8@convert-field-spec*) (begin (set! r39b8@convert-field-spec* (lambda (r39e9@ls) (list->vector (map (lambda (r39eb@x) ((lambda (r39ed@t) ((lambda (r39ef@ls/false) (if r39ef@ls/false (apply (lambda (r39f1@name r39f2@rest) (list 'mutable r39f1@name)) r39ef@ls/false) ((lambda (r39f5@t) ((lambda (r39f7@ls/false) (if r39f7@ls/false (apply (lambda (r39f9@name r39fa@rest) (list 'immutable r39f9@name)) r39f7@ls/false) ((lambda (r39fd@t) ((lambda (r39ff@ls/false) (if r39ff@ls/false (apply (lambda (r3a01@name) (list 'immutable r3a01@name)) r39ff@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r39fd@t))) (r2ebf@syntax-dispatch r39fd@t 'any))) r39f5@t))) (r2ebf@syntax-dispatch r39f5@t '(#(scheme-id immutable) any . any)))) r39ed@t))) (r2ebf@syntax-dispatch r39ed@t '(#(scheme-id mutable) any . any)))) r39eb@x)) r39e9@ls)))) ((lambda (r39b9@uid-code r39ba@sealed? r39bb@opaque? r39bc@fields) (r2e75@bless (list 'make-record-type-descriptor (list 'quote r39b1@name) r39b3@parent-rtd-code r39b9@uid-code r39ba@sealed? r39bb@opaque? r39bc@fields))) ((lambda (r39c1@t) ((lambda (r39c3@ls/false) (if r39c3@ls/false (apply (lambda () (list 'quote (gensym))) r39c3@ls/false) ((lambda (r39c5@t) ((lambda (r39c7@ls/false) (if r39c7@ls/false (apply (lambda (r39c9@uid) (list 'quote r39c9@uid)) r39c7@ls/false) ((lambda (r39cb@t) ((lambda (r39cd@ls/false) (if r39cd@ls/false (apply (lambda () '#f) r39cd@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r39cb@t))) (r2ebf@syntax-dispatch r39cb@t '_))) r39c5@t))) (r2ebf@syntax-dispatch r39c5@t '(_ any)))) r39c1@t))) (r2ebf@syntax-dispatch r39c1@t '(_)))) (r3864@get-clause 'nongenerative r39b2@clause*)) ((lambda (r39cf@t) ((lambda (r39d1@ls/false) (if r39d1@ls/false (apply (lambda () '#t) r39d1@ls/false) ((lambda (r39d3@t) ((lambda (r39d5@ls/false) (if r39d5@ls/false (apply (lambda () '#f) r39d5@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r39d3@t))) (r2ebf@syntax-dispatch r39d3@t '_))) r39cf@t))) (r2ebf@syntax-dispatch r39cf@t '(_ #(atom #t))))) (r3864@get-clause 'sealed r39b2@clause*)) ((lambda (r39d7@t) ((lambda (r39d9@ls/false) (if r39d9@ls/false (apply (lambda () '#t) r39d9@ls/false) ((lambda (r39db@t) ((lambda (r39dd@ls/false) (if r39dd@ls/false (apply (lambda () '#f) r39dd@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r39db@t))) (r2ebf@syntax-dispatch r39db@t '_))) r39d7@t))) (r2ebf@syntax-dispatch r39d7@t '(_ #(atom #t))))) (r3864@get-clause 'opaque r39b2@clause*)) ((lambda (r39df@t) ((lambda (r39e1@ls/false) (if r39e1@ls/false (apply (lambda (r39e3@field-spec*) (list 'quote (r39b8@convert-field-spec* r39e3@field-spec*))) r39e1@ls/false) ((lambda (r39e5@t) ((lambda (r39e7@ls/false) (if r39e7@ls/false (apply (lambda () ''#()) r39e7@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r39e5@t))) (r2ebf@syntax-dispatch r39e5@t '_))) r39df@t))) (r2ebf@syntax-dispatch r39df@t '(_ . each-any)))) (r3864@get-clause 'fields r39b2@clause*))))) '#f))) (set! r3868@parent-rtd-code (lambda (r3999@clause*) ((lambda (r399b@t) ((lambda (r399d@ls/false) (if r399d@ls/false (apply (lambda (r399f@name) (list 'record-type-descriptor r399f@name)) r399d@ls/false) ((lambda (r39a1@t) ((lambda (r39a3@ls/false) (if r39a3@ls/false (apply (lambda () ((lambda (r39a5@t) ((lambda (r39a7@ls/false) (if r39a7@ls/false (apply (lambda (r39a9@rtd r39aa@rcd) r39a9@rtd) r39a7@ls/false) ((lambda (r39ad@t) ((lambda (r39af@ls/false) (if r39af@ls/false (apply (lambda () '#f) r39af@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r39ad@t))) (r2ebf@syntax-dispatch r39ad@t '#(atom #f)))) r39a5@t))) (r2ebf@syntax-dispatch r39a5@t '(_ any any)))) (r3864@get-clause 'parent-rtd r3999@clause*))) r39a3@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r39a1@t))) (r2ebf@syntax-dispatch r39a1@t '#(atom #f)))) r399b@t))) (r2ebf@syntax-dispatch r399b@t '(_ any)))) (r3864@get-clause 'parent r3999@clause*)))) (set! r386a@parent-rcd-code (lambda (r3981@clause*) ((lambda (r3983@t) ((lambda (r3985@ls/false) (if r3985@ls/false (apply (lambda (r3987@name) (list 'record-constructor-descriptor r3987@name)) r3985@ls/false) ((lambda (r3989@t) ((lambda (r398b@ls/false) (if r398b@ls/false (apply (lambda () ((lambda (r398d@t) ((lambda (r398f@ls/false) (if r398f@ls/false (apply (lambda (r3991@rtd r3992@rcd) r3992@rcd) r398f@ls/false) ((lambda (r3995@t) ((lambda (r3997@ls/false) (if r3997@ls/false (apply (lambda () '#f) r3997@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3995@t))) (r2ebf@syntax-dispatch r3995@t '#(atom #f)))) r398d@t))) (r2ebf@syntax-dispatch r398d@t '(_ any any)))) (r3864@get-clause 'parent-rtd r3981@clause*))) r398b@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3989@t))) (r2ebf@syntax-dispatch r3989@t '#(atom #f)))) r3983@t))) (r2ebf@syntax-dispatch r3983@t '(_ any)))) (r3864@get-clause 'parent r3981@clause*)))) (set! r386c@foo-rcd-code (lambda (r3979@clause* r397a@foo-rtd r397b@protocol r397c@parent-rcd-code) (list 'make-record-constructor-descriptor r397a@foo-rtd r397c@parent-rcd-code r397b@protocol))) (set! r386e@get-protocol-code (lambda (r396d@clause*) ((lambda (r396f@t) ((lambda (r3971@ls/false) (if r3971@ls/false (apply (lambda (r3973@expr) r3973@expr) r3971@ls/false) ((lambda (r3975@t) ((lambda (r3977@ls/false) (if r3977@ls/false (apply (lambda () '#f) r3977@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3975@t))) (r2ebf@syntax-dispatch r3975@t '_))) r396f@t))) (r2ebf@syntax-dispatch r396f@t '(_ any)))) (r3864@get-clause 'protocol r396d@clause*)))) (set! r3870@get-fields (lambda (r395b@clause*) ((lambda (r395d@t) ((lambda (r395f@ls/false) (if r395f@ls/false (apply (lambda () '()) r395f@ls/false) ((lambda (r3961@t) ((lambda (r3963@ls/false) (if r3963@ls/false (apply (lambda (r3965@f*) r3965@f*) r3963@ls/false) ((lambda (r3967@t) ((lambda (r3969@ls/false) (if r3969@ls/false (apply (lambda (r396b@rest) (r3870@get-fields r396b@rest)) r3969@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3967@t))) (r2ebf@syntax-dispatch r3967@t '(_ . any)))) r3961@t))) (r2ebf@syntax-dispatch r3961@t '((#(scheme-id fields) . each-any) . _)))) r395d@t))) (r2ebf@syntax-dispatch r395d@t '()))) r395b@clause*))) (set! r3872@get-mutator-indices (lambda (r3943@fields) ((letrec ((r3945@f (lambda (r3947@fields r3948@i) ((lambda (r394b@t) ((lambda (r394d@ls/false) (if r394d@ls/false (apply (lambda () '()) r394d@ls/false) ((lambda (r394f@t) ((lambda (r3951@ls/false) (if r3951@ls/false (apply (lambda (r3953@rest) (cons r3948@i (r3945@f r3953@rest (+ r3948@i '1)))) r3951@ls/false) ((lambda (r3955@t) ((lambda (r3957@ls/false) (if r3957@ls/false (apply (lambda (r3959@rest) (r3945@f r3959@rest (+ r3948@i '1))) r3957@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3955@t))) (r2ebf@syntax-dispatch r3955@t '(_ . any)))) r394f@t))) (r2ebf@syntax-dispatch r394f@t '((#(scheme-id mutable) . _) . any)))) r394b@t))) (r2ebf@syntax-dispatch r394b@t '()))) r3947@fields)))) r3945@f) r3943@fields '0))) (set! r3874@get-mutators (lambda (r3919@foo r391a@fields) ((lambda (r391e@gen-name) (begin (set! r391e@gen-name (lambda (r3941@x) (r2fac@datum->syntax r3919@foo (string->symbol (string-append (symbol->string (r2fae@syntax->datum r3919@foo)) '"-" (symbol->string (r2fae@syntax->datum r3941@x)) '"-set!"))))) ((letrec ((r391f@f (lambda (r3921@fields) ((lambda (r3923@t) ((lambda (r3925@ls/false) (if r3925@ls/false (apply (lambda () '()) r3925@ls/false) ((lambda (r3927@t) ((lambda (r3929@ls/false) (if r3929@ls/false (apply (lambda (r392b@name r392c@accessor r392d@mutator r392e@rest) (cons r392d@mutator (r391f@f r392e@rest))) r3929@ls/false) ((lambda (r3933@t) ((lambda (r3935@ls/false) (if r3935@ls/false (apply (lambda (r3937@name r3938@rest) (cons (r391e@gen-name r3937@name) (r391f@f r3938@rest))) r3935@ls/false) ((lambda (r393b@t) ((lambda (r393d@ls/false) (if r393d@ls/false (apply (lambda (r393f@rest) (r391f@f r393f@rest)) r393d@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r393b@t))) (r2ebf@syntax-dispatch r393b@t '(_ . any)))) r3933@t))) (r2ebf@syntax-dispatch r3933@t '((#(scheme-id mutable) any) . any)))) r3927@t))) (r2ebf@syntax-dispatch r3927@t '((#(scheme-id mutable) any any any) . any)))) r3923@t))) (r2ebf@syntax-dispatch r3923@t '()))) r3921@fields)))) r391f@f) r391a@fields))) '#f))) (set! r3876@get-accessors (lambda (r38d5@foo r38d6@fields) ((lambda (r38da@gen-name) (begin (set! r38da@gen-name (lambda (r3917@x) (r2fac@datum->syntax r38d5@foo (string->symbol (string-append (symbol->string (r2fae@syntax->datum r38d5@foo)) '"-" (symbol->string (r2fae@syntax->datum r3917@x))))))) (map (lambda (r38db@field) ((lambda (r38dd@t) ((lambda (r38df@ls/false) (if (and r38df@ls/false (apply (lambda (r38e1@name r38e2@accessor r38e3@mutator) (r2cb4@id? r38e2@accessor)) r38df@ls/false)) (apply (lambda (r38e7@name r38e8@accessor r38e9@mutator) r38e8@accessor) r38df@ls/false) ((lambda (r38ed@t) ((lambda (r38ef@ls/false) (if (and r38ef@ls/false (apply (lambda (r38f1@name r38f2@accessor) (r2cb4@id? r38f2@accessor)) r38ef@ls/false)) (apply (lambda (r38f5@name r38f6@accessor) r38f6@accessor) r38ef@ls/false) ((lambda (r38f9@t) ((lambda (r38fb@ls/false) (if (and r38fb@ls/false (apply (lambda (r38fd@name) (r2cb4@id? r38fd@name)) r38fb@ls/false)) (apply (lambda (r38ff@name) (r38da@gen-name r38ff@name)) r38fb@ls/false) ((lambda (r3901@t) ((lambda (r3903@ls/false) (if (and r3903@ls/false (apply (lambda (r3905@name) (r2cb4@id? r3905@name)) r3903@ls/false)) (apply (lambda (r3907@name) (r38da@gen-name r3907@name)) r3903@ls/false) ((lambda (r3909@t) ((lambda (r390b@ls/false) (if (and r390b@ls/false (apply (lambda (r390d@name) (r2cb4@id? r390d@name)) r390b@ls/false)) (apply (lambda (r390f@name) (r38da@gen-name r390f@name)) r390b@ls/false) ((lambda (r3911@t) ((lambda (r3913@ls/false) (if r3913@ls/false (apply (lambda (r3915@others) (r2fa8@syntax-violation '#f '"invalid field spec" r38db@field)) r3913@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3911@t))) (r2ebf@syntax-dispatch r3911@t 'any))) r3909@t))) (r2ebf@syntax-dispatch r3909@t 'any))) r3901@t))) (r2ebf@syntax-dispatch r3901@t '(#(scheme-id immutable) any)))) r38f9@t))) (r2ebf@syntax-dispatch r38f9@t '(#(scheme-id mutable) any)))) r38ed@t))) (r2ebf@syntax-dispatch r38ed@t '(#(scheme-id immutable) any any)))) r38dd@t))) (r2ebf@syntax-dispatch r38dd@t '(#(scheme-id mutable) any any any)))) r38db@field)) r38d6@fields))) '#f))) (set! r3878@enumerate (lambda (r38cd@ls) ((letrec ((r38cf@f (lambda (r38d1@ls r38d2@i) (if (null? r38d1@ls) '() (cons r38d2@i (r38cf@f (cdr r38d1@ls) (+ r38d2@i '1))))))) r38cf@f) r38cd@ls '0))) (set! r387a@do-define-record (lambda (r38a5@namespec r38a6@clause*) ((lambda (r38a9@foo) ((lambda (r38ab@foo-rtd) ((lambda (r38ad@foo-rcd) ((lambda (r38af@protocol) ((lambda (r38b1@make-foo) ((lambda (r38b3@fields) ((lambda (r38b5@idx*) ((lambda (r38b7@foo-x*) ((lambda (r38b9@set-foo-x!*) ((lambda (r38bb@set-foo-idx*) ((lambda (r38bd@foo?) ((lambda (r38bf@foo-rtd-code) ((lambda (r38c1@foo-rcd-code) ((lambda (r38c3@protocol-code) ((lambda () (r2e75@bless (cons 'begin (cons (list 'define r38ab@foo-rtd r38bf@foo-rtd-code) (cons (list 'define r38af@protocol r38c3@protocol-code) (cons (list 'define r38ad@foo-rcd r38c1@foo-rcd-code) (cons (list 'define-syntax r38a9@foo (list 'list ''$rtd (list 'syntax r38ab@foo-rtd) (list 'syntax r38ad@foo-rcd))) (cons (list 'define r38bd@foo? (list 'record-predicate r38ab@foo-rtd)) (cons (list 'define r38b1@make-foo (list 'record-constructor r38ad@foo-rcd)) (append (map (lambda (r38c5@foo-x r38c6@idx) (list 'define r38c5@foo-x (list 'record-accessor r38ab@foo-rtd r38c6@idx))) r38b7@foo-x* r38b5@idx*) (map (lambda (r38c9@set-foo-x! r38ca@idx) (list 'define r38c9@set-foo-x! (list 'record-mutator r38ab@foo-rtd r38ca@idx))) r38b9@set-foo-x!* r38bb@set-foo-idx*))))))))))))) (r386e@get-protocol-code r38a6@clause*))) (r386c@foo-rcd-code r38a6@clause* r38ab@foo-rtd r38af@protocol (r386a@parent-rcd-code r38a6@clause*)))) (r3866@foo-rtd-code r38a9@foo r38a6@clause* (r3868@parent-rtd-code r38a6@clause*)))) (r3862@get-record-predicate-name r38a5@namespec))) (r3872@get-mutator-indices r38b3@fields))) (r3874@get-mutators r38a9@foo r38b3@fields))) (r3876@get-accessors r38a9@foo r38b3@fields))) (r3878@enumerate r38b3@fields))) (r3870@get-fields r38a6@clause*))) (r3860@get-record-constructor-name r38a5@namespec))) (gensym))) (gensym))) (gensym))) (r385e@get-record-name r38a5@namespec)))) (set! r387c@verify-clauses (lambda (r3885@x r3886@cls*) ((lambda (r388a@valid-kwds r388c@free-id-member?) (begin (set! r388a@valid-kwds (map r2e75@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! r388c@free-id-member? (lambda (r38a1@x r38a2@ls) (and (pair? r38a2@ls) (or (r2cbc@free-id=? r38a1@x (car r38a2@ls)) (r388c@free-id-member? r38a1@x (cdr r38a2@ls)))))) ((letrec ((r388d@f (lambda (r388f@cls* r3890@seen*) (if (not (null? r388f@cls*)) ((lambda (r3893@t) ((lambda (r3895@ls/false) (if r3895@ls/false (apply (lambda (r3897@kwd r3898@rest) (if (or (not (r2cb4@id? r3897@kwd)) (not (r388c@free-id-member? r3897@kwd r388a@valid-kwds))) (r2fa8@syntax-violation '#f '"not a valid define-record-type keyword" r3897@kwd) (if (r2cc2@bound-id-member? r3897@kwd r3890@seen*) (r2fa8@syntax-violation '#f '"duplicate use of keyword " r3885@x r3897@kwd) (r388d@f (cdr r388f@cls*) (cons r3897@kwd r3890@seen*))))) r3895@ls/false) ((lambda (r389b@t) ((lambda (r389d@ls/false) (if r389d@ls/false (apply (lambda (r389f@cls) (r2fa8@syntax-violation '#f '"malformed define-record-type clause" r389f@cls)) r389d@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r389b@t))) (r2ebf@syntax-dispatch r389b@t 'any))) r3893@t))) (r2ebf@syntax-dispatch r3893@t '(any . any)))) (car r388f@cls*)) (void))))) r388d@f) r3886@cls* '()))) '#f '#f))) ((lambda (r387d@t) ((lambda (r387f@ls/false) (if r387f@ls/false (apply (lambda (r3881@namespec r3882@clause*) (begin (r387c@verify-clauses r3859@x r3882@clause*) (r387a@do-define-record r3881@namespec r3882@clause*))) r387f@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r387d@t))) (r2ebf@syntax-dispatch r387d@t '(_ any . each-any)))) r3859@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! r2eb5@define-condition-type-macro (lambda (r3a55@x) ((lambda (r3a58@mkname) (begin (set! r3a58@mkname (lambda (r3a85@name r3a86@suffix) (r2fac@datum->syntax r3a85@name (string->symbol (string-append (symbol->string (r2fae@syntax->datum r3a85@name)) r3a86@suffix))))) ((lambda (r3a59@t) ((lambda (r3a5b@ls/false) (if (and r3a5b@ls/false (apply (lambda (r3a5d@ctxt r3a5e@name r3a5f@super r3a60@constructor r3a61@predicate r3a62@field* r3a63@accessor*) (and (r2cb4@id? r3a5e@name) (r2cb4@id? r3a5f@super) (r2cb4@id? r3a60@constructor) (r2cb4@id? r3a61@predicate) (for-all r2cb4@id? r3a62@field*) (for-all r2cb4@id? r3a63@accessor*))) r3a5b@ls/false)) (apply (lambda (r3a6b@ctxt r3a6c@name r3a6d@super r3a6e@constructor r3a6f@predicate r3a70@field* r3a71@accessor*) ((lambda (r3a79@aux-accessor*) (r2e75@bless (cons 'begin (cons (cons 'define-record-type (cons (list r3a6c@name r3a6e@constructor (gensym)) (cons (list 'parent r3a6d@super) (cons (cons 'fields (map (lambda (r3a7b@field r3a7c@aux) (list 'immutable r3a7b@field r3a7c@aux)) r3a70@field* r3a79@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define r3a6f@predicate (list 'condition-predicate (list 'record-type-descriptor r3a6c@name))) (map (lambda (r3a7f@accessor r3a80@aux) (list 'define r3a7f@accessor (list 'condition-accessor (list 'record-type-descriptor r3a6c@name) r3a80@aux))) r3a71@accessor* r3a79@aux-accessor*)))))) (map (lambda (r3a83@x) (gensym)) r3a71@accessor*))) r3a5b@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3a59@t))) (r2ebf@syntax-dispatch r3a59@t '(any any any any any . #(each (any any)))))) r3a55@x))) '#f))) (set! r2eb7@incorrect-usage-macro (lambda (r3a89@e) (r2fa8@syntax-violation '#f '"incorrect usage of auxiliary keyword" r3a89@e))) (set! r2eb9@parameterize-macro (lambda (r3a8b@e) ((lambda (r3a8d@t) ((lambda (r3a8f@ls/false) (if r3a8f@ls/false (apply (lambda (r3a91@b r3a92@b*) (r2e75@bless (cons 'let (cons '() (cons r3a91@b r3a92@b*))))) r3a8f@ls/false) ((lambda (r3a95@t) ((lambda (r3a97@ls/false) (if r3a97@ls/false (apply (lambda (r3a99@olhs* r3a9a@orhs* r3a9b@b r3a9c@b*) ((lambda (r3aa1@lhs* r3aa2@rhs*) (r2e75@bless (cons (list 'lambda (append r3aa1@lhs* r3aa2@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (r3aa5@lhs r3aa6@rhs) (list 'let (list (list 't (list r3aa5@lhs))) (list r3aa5@lhs r3aa6@rhs) (cons 'set! (cons r3aa6@rhs '(t))))) r3aa1@lhs* r3aa2@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons r3a9b@b r3a9c@b*))) '(swap)))))) (append r3a99@olhs* r3a9a@orhs*)))) (r2f96@generate-temporaries r3a99@olhs*) (r2f96@generate-temporaries r3a9a@orhs*))) r3a97@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3a95@t))) (r2ebf@syntax-dispatch r3a95@t '(_ #(each (any any)) any . each-any)))) r3a8d@t))) (r2ebf@syntax-dispatch r3a8d@t '(_ () any . each-any)))) r3a8b@e))) (set! r2ebb@foreign-call-transformer (lambda (r3aa9@e r3aaa@r r3aab@mr) ((lambda (r3aaf@t) ((lambda (r3ab1@ls/false) (if r3ab1@ls/false (apply (lambda (r3ab3@name r3ab4@arg*) (cons 'foreign-call (cons (r2ee1@chi-expr r3ab3@name r3aaa@r r3aab@mr) (r2edd@chi-expr* r3ab4@arg* r3aaa@r r3aab@mr)))) r3ab1@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3aaf@t))) (r2ebf@syntax-dispatch r3aaf@t '(_ any . each-any)))) r3aa9@e))) (set! r2ebd@convert-pattern (lambda (r3ab7@pattern r3ab8@keys) ((lambda (r3abc@cvt* r3abe@cvt) (begin (set! r3abc@cvt* (lambda (r3b5b@p* r3b5c@n r3b5d@ids) (if (null? r3b5b@p*) (values '() r3b5d@ids) (call-with-values (lambda () (r3abc@cvt* (cdr r3b5b@p*) r3b5c@n r3b5d@ids)) (lambda (r3b65@r3b62 r3b66@r3b64) ((lambda (r3b69@ids r3b6a@y) (call-with-values (lambda () (r3abe@cvt (car r3b5b@p*) r3b5c@n r3b69@ids)) (lambda (r3b71@r3b6e r3b72@r3b70) ((lambda (r3b75@ids r3b76@x) (values (cons r3b76@x r3b6a@y) r3b75@ids)) r3b72@r3b70 r3b71@r3b6e)))) r3b66@r3b64 r3b65@r3b62)))))) (set! r3abe@cvt (lambda (r3abf@p r3ac0@n r3ac1@ids) ((lambda (r3ac5@t) ((lambda (r3ac7@ls/false) (if (and r3ac7@ls/false (apply (lambda (r3ac9@id) (r2cb4@id? r3ac9@id)) r3ac7@ls/false)) (apply (lambda (r3acb@id) (if (r2cc2@bound-id-member? r3abf@p r3ab8@keys) (values (vector 'free-id r3abf@p) r3ac1@ids) (if (r2cbc@free-id=? r3abf@p (r2e49@scheme-stx '_)) (values '_ r3ac1@ids) (values 'any (cons (cons r3abf@p r3ac0@n) r3ac1@ids))))) r3ac7@ls/false) ((lambda (r3acd@t) ((lambda (r3acf@ls/false) (if (and r3acf@ls/false (apply (lambda (r3ad1@p r3ad2@dots) (r2ec1@ellipsis? r3ad2@dots)) r3acf@ls/false)) (apply (lambda (r3ad5@p r3ad6@dots) (call-with-values (lambda () (r3abe@cvt r3ad5@p (+ r3ac0@n '1) r3ac1@ids)) (lambda (r3add@r3ada r3ade@r3adc) ((lambda (r3ae1@ids r3ae2@p) (values (if (eq? r3ae2@p 'any) 'each-any (vector 'each r3ae2@p)) r3ae1@ids)) r3ade@r3adc r3add@r3ada)))) r3acf@ls/false) ((lambda (r3ae5@t) ((lambda (r3ae7@ls/false) (if (and r3ae7@ls/false (apply (lambda (r3ae9@x r3aea@dots r3aeb@ys r3aec@z) (r2ec1@ellipsis? r3aea@dots)) r3ae7@ls/false)) (apply (lambda (r3af1@x r3af2@dots r3af3@ys r3af4@z) (call-with-values (lambda () (r3abe@cvt r3af4@z r3ac0@n r3ac1@ids)) (lambda (r3afd@r3afa r3afe@r3afc) ((lambda (r3b01@ids r3b02@z) (call-with-values (lambda () (r3abc@cvt* r3af3@ys r3ac0@n r3b01@ids)) (lambda (r3b09@r3b06 r3b0a@r3b08) ((lambda (r3b0d@ids r3b0e@ys) (call-with-values (lambda () (r3abe@cvt r3af1@x (+ r3ac0@n '1) r3b0d@ids)) (lambda (r3b15@r3b12 r3b16@r3b14) ((lambda (r3b19@ids r3b1a@x) (values (vector 'each+ r3b1a@x (reverse r3b0e@ys) r3b02@z) r3b19@ids)) r3b16@r3b14 r3b15@r3b12)))) r3b0a@r3b08 r3b09@r3b06)))) r3afe@r3afc r3afd@r3afa)))) r3ae7@ls/false) ((lambda (r3b1d@t) ((lambda (r3b1f@ls/false) (if r3b1f@ls/false (apply (lambda (r3b21@x r3b22@y) (call-with-values (lambda () (r3abe@cvt r3b22@y r3ac0@n r3ac1@ids)) (lambda (r3b29@r3b26 r3b2a@r3b28) ((lambda (r3b2d@ids r3b2e@y) (call-with-values (lambda () (r3abe@cvt r3b21@x r3ac0@n r3b2d@ids)) (lambda (r3b35@r3b32 r3b36@r3b34) ((lambda (r3b39@ids r3b3a@x) (values (cons r3b3a@x r3b2e@y) r3b39@ids)) r3b36@r3b34 r3b35@r3b32)))) r3b2a@r3b28 r3b29@r3b26)))) r3b1f@ls/false) ((lambda (r3b3d@t) ((lambda (r3b3f@ls/false) (if r3b3f@ls/false (apply (lambda () (values '() r3ac1@ids)) r3b3f@ls/false) ((lambda (r3b41@t) ((lambda (r3b43@ls/false) (if (and r3b43@ls/false (apply (lambda (r3b45@p) (not (r2c7c@stx? r3b45@p))) r3b43@ls/false)) (apply (lambda (r3b47@p) (call-with-values (lambda () (r3abe@cvt r3b47@p r3ac0@n r3ac1@ids)) (lambda (r3b4d@r3b4a r3b4e@r3b4c) ((lambda (r3b51@ids r3b52@p) (values (vector 'vector r3b52@p) r3b51@ids)) r3b4e@r3b4c r3b4d@r3b4a)))) r3b43@ls/false) ((lambda (r3b55@t) ((lambda (r3b57@ls/false) (if r3b57@ls/false (apply (lambda (r3b59@datum) (values (vector 'atom (r2cca@stx->datum r3b59@datum)) r3ac1@ids)) r3b57@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3b55@t))) (r2ebf@syntax-dispatch r3b55@t 'any))) r3b41@t))) (r2ebf@syntax-dispatch r3b41@t '#(vector each-any)))) r3b3d@t))) (r2ebf@syntax-dispatch r3b3d@t '()))) r3b1d@t))) (r2ebf@syntax-dispatch r3b1d@t '(any . any)))) r3ae5@t))) (r2ebf@syntax-dispatch r3ae5@t '(any any . #(each+ any () any))))) r3acd@t))) (r2ebf@syntax-dispatch r3acd@t '(any any)))) r3ac5@t))) (r2ebf@syntax-dispatch r3ac5@t 'any))) r3abf@p))) (r3abe@cvt r3ab7@pattern '0 '()))) '#f '#f))) (set! r2ebf@syntax-dispatch ((lambda () ((lambda (r3b7a@stx^ r3b7c@match-each r3b7e@match-each+ r3b80@match-each-any r3b82@match-empty r3b84@combine r3b86@match* r3b88@match) (begin (set! r3b7a@stx^ (lambda (r3c55@e r3c56@m* r3c57@s* r3c58@ae*) (if (and (null? r3c56@m*) (null? r3c57@s*) (null? r3c58@ae*)) r3c55@e (r2c9c@mkstx r3c55@e r3c56@m* r3c57@s* r3c58@ae*)))) (set! r3b7c@match-each (lambda (r3c35@e r3c36@p r3c37@m* r3c38@s* r3c39@ae*) (if (pair? r3c35@e) ((lambda (r3c3f@first) (and r3c3f@first ((lambda (r3c41@rest) (and r3c41@rest (cons r3c3f@first r3c41@rest))) (r3b7c@match-each (cdr r3c35@e) r3c36@p r3c37@m* r3c38@s* r3c39@ae*)))) (r3b88@match (car r3c35@e) r3c36@p r3c37@m* r3c38@s* r3c39@ae* '())) (if (null? r3c35@e) '() (if (r2c7c@stx? r3c35@e) (and (not (r2c32@top-marked? r3c37@m*)) (call-with-values (lambda () (r2c9a@join-wraps r3c37@m* r3c38@s* r3c39@ae* r3c35@e)) (lambda (r3c49@r3c44 r3c4a@r3c46 r3c4b@r3c48) ((lambda (r3c4f@ae* r3c50@s* r3c51@m*) (r3b7c@match-each (r2c80@stx-expr r3c35@e) r3c36@p r3c51@m* r3c50@s* r3c4f@ae*)) r3c4b@r3c48 r3c4a@r3c46 r3c49@r3c44)))) (if (r2853@r2772@annotation? r3c35@e) (r3b7c@match-each (r2855@r2776@annotation-expression r3c35@e) r3c36@p r3c37@m* r3c38@s* r3c39@ae*) '#f)))))) (set! r3b7e@match-each+ (lambda (r3bf5@e r3bf6@x-pat r3bf7@y-pat r3bf8@z-pat r3bf9@m* r3bfa@s* r3bfb@ae* r3bfc@r) ((letrec ((r3c05@f (lambda (r3c07@e r3c08@m* r3c09@s* r3c0a@ae*) (if (pair? r3c07@e) (call-with-values (lambda () (r3c05@f (cdr r3c07@e) r3c08@m* r3c09@s* r3c0a@ae*)) (lambda (r3c15@r3c10 r3c16@r3c12 r3c17@r3c14) ((lambda (r3c1b@r r3c1c@y-pat r3c1d@xr*) (if r3c1b@r (if (null? r3c1c@y-pat) ((lambda (r3c21@xr) (if r3c21@xr (values (cons r3c21@xr r3c1d@xr*) r3c1c@y-pat r3c1b@r) (values '#f '#f '#f))) (r3b88@match (car r3c07@e) r3bf6@x-pat r3c08@m* r3c09@s* r3c0a@ae* '())) (values '() (cdr r3c1c@y-pat) (r3b88@match (car r3c07@e) (car r3c1c@y-pat) r3c08@m* r3c09@s* r3c0a@ae* r3c1b@r))) (values '#f '#f '#f))) r3c17@r3c14 r3c16@r3c12 r3c15@r3c10))) (if (r2c7c@stx? r3c07@e) (if (r2c32@top-marked? r3c08@m*) (values '() r3bf7@y-pat (r3b88@match r3c07@e r3bf8@z-pat r3c08@m* r3c09@s* r3c0a@ae* r3bfc@r)) (call-with-values (lambda () (r2c9a@join-wraps r3c08@m* r3c09@s* r3c0a@ae* r3c07@e)) (lambda (r3c29@r3c24 r3c2a@r3c26 r3c2b@r3c28) ((lambda (r3c2f@ae* r3c30@s* r3c31@m*) (r3c05@f (r2c80@stx-expr r3c07@e) r3c31@m* r3c30@s* r3c2f@ae*)) r3c2b@r3c28 r3c2a@r3c26 r3c29@r3c24)))) (if (r2853@r2772@annotation? r3c07@e) (r3c05@f (r2855@r2776@annotation-expression r3c07@e) r3c08@m* r3c09@s* r3c0a@ae*) (values '() r3bf7@y-pat (r3b88@match r3c07@e r3bf8@z-pat r3c08@m* r3c09@s* r3c0a@ae* r3bfc@r)))))))) r3c05@f) r3bf5@e r3bf9@m* r3bfa@s* r3bfb@ae*))) (set! r3b80@match-each-any (lambda (r3bd9@e r3bda@m* r3bdb@s* r3bdc@ae*) (if (pair? r3bd9@e) ((lambda (r3be1@l) (and r3be1@l (cons (r3b7a@stx^ (car r3bd9@e) r3bda@m* r3bdb@s* r3bdc@ae*) r3be1@l))) (r3b80@match-each-any (cdr r3bd9@e) r3bda@m* r3bdb@s* r3bdc@ae*)) (if (null? r3bd9@e) '() (if (r2c7c@stx? r3bd9@e) (and (not (r2c32@top-marked? r3bda@m*)) (call-with-values (lambda () (r2c9a@join-wraps r3bda@m* r3bdb@s* r3bdc@ae* r3bd9@e)) (lambda (r3be9@r3be4 r3bea@r3be6 r3beb@r3be8) ((lambda (r3bef@ae* r3bf0@s* r3bf1@m*) (r3b80@match-each-any (r2c80@stx-expr r3bd9@e) r3bf1@m* r3bf0@s* r3bef@ae*)) r3beb@r3be8 r3bea@r3be6 r3be9@r3be4)))) (if (r2853@r2772@annotation? r3bd9@e) (r3b80@match-each-any (r2855@r2776@annotation-expression r3bd9@e) r3bda@m* r3bdb@s* r3bdc@ae*) '#f)))))) (set! r3b82@match-empty (lambda (r3bd3@p r3bd4@r) (if (null? r3bd3@p) r3bd4@r (if (eq? r3bd3@p '_) r3bd4@r (if (eq? r3bd3@p 'any) (cons '() r3bd4@r) (if (pair? r3bd3@p) (r3b82@match-empty (car r3bd3@p) (r3b82@match-empty (cdr r3bd3@p) r3bd4@r)) (if (eq? r3bd3@p 'each-any) (cons '() r3bd4@r) ((lambda (r3bd7@t) (if (memv r3bd7@t '(each)) (r3b82@match-empty (vector-ref r3bd3@p '1) r3bd4@r) (if (memv r3bd7@t '(each+)) (r3b82@match-empty (vector-ref r3bd3@p '1) (r3b82@match-empty (reverse (vector-ref r3bd3@p '2)) (r3b82@match-empty (vector-ref r3bd3@p '3) r3bd4@r))) (if (memv r3bd7@t '(free-id atom)) r3bd4@r (if (memv r3bd7@t '(scheme-id atom)) r3bd4@r (if (memv r3bd7@t '(vector)) (r3b82@match-empty (vector-ref r3bd3@p '1) r3bd4@r) (assertion-violation 'syntax-dispatch '"invalid pattern" r3bd3@p))))))) (vector-ref r3bd3@p '0))))))))) (set! r3b84@combine (lambda (r3bcf@r* r3bd0@r) (if (null? (car r3bcf@r*)) r3bd0@r (cons (map car r3bcf@r*) (r3b84@combine (map cdr r3bcf@r*) r3bd0@r))))) (set! r3b86@match* (lambda (r3bab@e r3bac@p r3bad@m* r3bae@s* r3baf@ae* r3bb0@r) (if (null? r3bac@p) (and (null? r3bab@e) r3bb0@r) (if (pair? r3bac@p) (and (pair? r3bab@e) (r3b88@match (car r3bab@e) (car r3bac@p) r3bad@m* r3bae@s* r3baf@ae* (r3b88@match (cdr r3bab@e) (cdr r3bac@p) r3bad@m* r3bae@s* r3baf@ae* r3bb0@r))) (if (eq? r3bac@p 'each-any) ((lambda (r3bb7@l) (and r3bb7@l (cons r3bb7@l r3bb0@r))) (r3b80@match-each-any r3bab@e r3bad@m* r3bae@s* r3baf@ae*)) ((lambda (r3bb9@t) (if (memv r3bb9@t '(each)) (if (null? r3bab@e) (r3b82@match-empty (vector-ref r3bac@p '1) r3bb0@r) ((lambda (r3bbb@r*) (and r3bbb@r* (r3b84@combine r3bbb@r* r3bb0@r))) (r3b7c@match-each r3bab@e (vector-ref r3bac@p '1) r3bad@m* r3bae@s* r3baf@ae*))) (if (memv r3bb9@t '(free-id)) (and (symbol? r3bab@e) (r2c32@top-marked? r3bad@m*) (r2cbc@free-id=? (r3b7a@stx^ r3bab@e r3bad@m* r3bae@s* r3baf@ae*) (vector-ref r3bac@p '1)) r3bb0@r) (if (memv r3bb9@t '(scheme-id)) (and (symbol? r3bab@e) (r2c32@top-marked? r3bad@m*) (r2cbc@free-id=? (r3b7a@stx^ r3bab@e r3bad@m* r3bae@s* r3baf@ae*) (r2e49@scheme-stx (vector-ref r3bac@p '1))) r3bb0@r) (if (memv r3bb9@t '(each+)) (call-with-values (lambda () (r3b7e@match-each+ r3bab@e (vector-ref r3bac@p '1) (vector-ref r3bac@p '2) (vector-ref r3bac@p '3) r3bad@m* r3bae@s* r3baf@ae* r3bb0@r)) (lambda (r3bc3@r3bbe r3bc4@r3bc0 r3bc5@r3bc2) ((lambda (r3bc9@r r3bca@y-pat r3bcb@xr*) (and r3bc9@r (null? r3bca@y-pat) (if (null? r3bcb@xr*) (r3b82@match-empty (vector-ref r3bac@p '1) r3bc9@r) (r3b84@combine r3bcb@xr* r3bc9@r)))) r3bc5@r3bc2 r3bc4@r3bc0 r3bc3@r3bbe))) (if (memv r3bb9@t '(atom)) (and (fast-equal? (vector-ref r3bac@p '1) (r2cc8@strip r3bab@e r3bad@m*)) r3bb0@r) (if (memv r3bb9@t '(vector)) (and (vector? r3bab@e) (r3b88@match (vector->list r3bab@e) (vector-ref r3bac@p '1) r3bad@m* r3bae@s* r3baf@ae* r3bb0@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" r3bac@p)))))))) (vector-ref r3bac@p '0))))))) (set! r3b88@match (lambda (r3b8d@e r3b8e@p r3b8f@m* r3b90@s* r3b91@ae* r3b92@r) (if (not r3b92@r) '#f (if (eq? r3b8e@p '_) r3b92@r (if (eq? r3b8e@p 'any) (cons (r3b7a@stx^ r3b8d@e r3b8f@m* r3b90@s* r3b91@ae*) r3b92@r) (if (r2c7c@stx? r3b8d@e) (and (not (r2c32@top-marked? r3b8f@m*)) (call-with-values (lambda () (r2c9a@join-wraps r3b8f@m* r3b90@s* r3b91@ae* r3b8d@e)) (lambda (r3b9f@r3b9a r3ba0@r3b9c r3ba1@r3b9e) ((lambda (r3ba5@ae* r3ba6@s* r3ba7@m*) (r3b88@match (r2c80@stx-expr r3b8d@e) r3b8e@p r3ba7@m* r3ba6@s* r3ba5@ae* r3b92@r)) r3ba1@r3b9e r3ba0@r3b9c r3b9f@r3b9a)))) (if (r2853@r2772@annotation? r3b8d@e) (r3b88@match (r2855@r2776@annotation-expression r3b8d@e) r3b8e@p r3b8f@m* r3b90@s* r3b91@ae* r3b92@r) (r3b86@match* r3b8d@e r3b8e@p r3b8f@m* r3b90@s* r3b91@ae* r3b92@r)))))))) (lambda (r3b89@e r3b8a@p) (r3b88@match r3b89@e r3b8a@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! r2ec1@ellipsis? (lambda (r3c5d@x) (and (r2cb4@id? r3c5d@x) (r2cbc@free-id=? r3c5d@x (r2e49@scheme-stx '...))))) (set! r2ec3@underscore? (lambda (r3c5f@x) (and (r2cb4@id? r3c5f@x) (r2cbc@free-id=? r3c5f@x (r2e49@scheme-stx '_))))) (set! r2ec5@verify-literals (lambda (r3c61@lits r3c62@expr) (for-each (lambda (r3c65@x) (if (or (not (r2cb4@id? r3c65@x)) (r2ec1@ellipsis? r3c65@x) (r2ec3@underscore? r3c65@x)) (r2fa8@syntax-violation '#f '"invalid literal" r3c62@expr r3c65@x) (void))) r3c61@lits))) (set! r2ec7@syntax-case-transformer ((lambda () ((lambda (r3c68@build-dispatch-call r3c6a@invalid-ids-error r3c6c@gen-clause r3c6e@gen-syntax-case) (begin (set! r3c68@build-dispatch-call (lambda (r3cd9@pvars r3cda@expr r3cdb@y r3cdc@r r3cdd@mr) ((lambda (r3ce3@ids r3ce4@levels) ((lambda (r3ce7@labels r3ce8@new-vars) ((lambda (r3ceb@body) (list '(primitive apply) (r2c10@r2b50@build-lambda '#f r3ce8@new-vars r3ceb@body) r3cdb@y)) (r2ee1@chi-expr (r2ca0@add-subst (r2c6f@make-full-rib r3ce3@ids r3ce7@labels) r3cda@expr) (append (map (lambda (r3ced@label r3cee@var r3cef@level) (cons r3ced@label (r2cd4@make-binding 'syntax (cons r3cee@var r3cef@level)))) r3ce7@labels r3ce8@new-vars (map cdr r3cd9@pvars)) r3cdc@r) r3cdd@mr))) (map r2c38@gen-label r3ce3@ids) (map r2c34@gen-lexical r3ce3@ids))) (map car r3cd9@pvars) (map cdr r3cd9@pvars)))) (set! r3c6a@invalid-ids-error (lambda (r3ccd@id* r3cce@e r3ccf@class) ((letrec ((r3cd3@find (lambda (r3cd5@id* r3cd6@ok*) (if (null? r3cd5@id*) (r2fa8@syntax-violation '#f '"invalid syntax" r3cce@e) (if (r2cb4@id? (car r3cd5@id*)) (if (r2cc2@bound-id-member? (car r3cd5@id*) r3cd6@ok*) (r2fa4@syntax-error (car r3cd5@id*) '"duplicate " r3ccf@class) (r3cd3@find (cdr r3cd5@id*) (cons (car r3cd5@id*) r3cd6@ok*))) (r2fa4@syntax-error (car r3cd5@id*) '"invalid " r3ccf@class)))))) r3cd3@find) r3ccd@id* '()))) (set! r3c6c@gen-clause (lambda (r3ca5@x r3ca6@keys r3ca7@clauses r3ca8@r r3ca9@mr r3caa@pat r3cab@fender r3cac@expr) (call-with-values (lambda () (r2ebd@convert-pattern r3caa@pat r3ca6@keys)) (lambda (r3cb9@r3cb6 r3cba@r3cb8) ((lambda (r3cbd@pvars r3cbe@p) (if (not (r2cc0@distinct-bound-ids? (map car r3cbd@pvars))) (r3c6a@invalid-ids-error (map car r3cbd@pvars) r3caa@pat '"pattern variable") (if (not (for-all (lambda (r3cc1@x) (not (r2ec1@ellipsis? (car r3cc1@x)))) r3cbd@pvars)) (r2fa8@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" r3caa@pat) ((lambda (r3cc3@y) ((lambda (r3cc5@test) ((lambda (r3cc7@conseq) ((lambda (r3cc9@altern) (list (r2c10@r2b50@build-lambda '#f (list r3cc3@y) (list 'if r3cc5@test r3cc7@conseq r3cc9@altern)) (list '(primitive syntax-dispatch) r3ca5@x (list 'quote r3cbe@p)))) (r3c6e@gen-syntax-case r3ca5@x r3ca6@keys r3ca7@clauses r3ca8@r r3ca9@mr))) (r3c68@build-dispatch-call r3cbd@pvars r3cac@expr r3cc3@y r3ca8@r r3ca9@mr))) (if (eq? r3cab@fender '#t) r3cc3@y ((lambda (r3ccb@call) (list 'if r3cc3@y r3ccb@call (list 'quote '#f))) (r3c68@build-dispatch-call r3cbd@pvars r3cab@fender r3cc3@y r3ca8@r r3ca9@mr))))) (r2c34@gen-lexical 'tmp))))) r3cba@r3cb8 r3cb9@r3cb6))))) (set! r3c6e@gen-syntax-case (lambda (r3c83@x r3c84@keys r3c85@clauses r3c86@r r3c87@mr) (if (null? r3c85@clauses) (list '(primitive syntax-error) r3c83@x) ((lambda (r3c8d@t) ((lambda (r3c8f@ls/false) (if r3c8f@ls/false (apply (lambda (r3c91@pat r3c92@expr) (if (and (r2cb4@id? r3c91@pat) (not (r2cc2@bound-id-member? r3c91@pat r3c84@keys)) (not (r2ec1@ellipsis? r3c91@pat))) (if (r2cbc@free-id=? r3c91@pat (r2e49@scheme-stx '_)) (r2ee1@chi-expr r3c92@expr r3c86@r r3c87@mr) ((lambda (r3c95@lab r3c96@lex) ((lambda (r3c99@body) (list (r2c10@r2b50@build-lambda '#f (list r3c96@lex) r3c99@body) r3c83@x)) (r2ee1@chi-expr (r2ca0@add-subst (r2c6f@make-full-rib (list r3c91@pat) (list r3c95@lab)) r3c92@expr) (cons (cons r3c95@lab (r2cd4@make-binding 'syntax (cons r3c96@lex '0))) r3c86@r) r3c87@mr))) (r2c38@gen-label r3c91@pat) (r2c34@gen-lexical r3c91@pat))) (r3c6c@gen-clause r3c83@x r3c84@keys (cdr r3c85@clauses) r3c86@r r3c87@mr r3c91@pat '#t r3c92@expr))) r3c8f@ls/false) ((lambda (r3c9b@t) ((lambda (r3c9d@ls/false) (if r3c9d@ls/false (apply (lambda (r3c9f@pat r3ca0@fender r3ca1@expr) (r3c6c@gen-clause r3c83@x r3c84@keys (cdr r3c85@clauses) r3c86@r r3c87@mr r3c9f@pat r3ca0@fender r3ca1@expr)) r3c9d@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3c9b@t))) (r2ebf@syntax-dispatch r3c9b@t '(any any any)))) r3c8d@t))) (r2ebf@syntax-dispatch r3c8d@t '(any any)))) (car r3c85@clauses))))) (lambda (r3c6f@e r3c70@r r3c71@mr) ((lambda (r3c75@t) ((lambda (r3c77@ls/false) (if r3c77@ls/false (apply (lambda (r3c79@expr r3c7a@keys r3c7b@clauses) (begin (r2ec5@verify-literals r3c7a@keys r3c6f@e) ((lambda (r3c7f@x) ((lambda (r3c81@body) (list (r2c10@r2b50@build-lambda '#f (list r3c7f@x) r3c81@body) (r2ee1@chi-expr r3c79@expr r3c70@r r3c71@mr))) (r3c6e@gen-syntax-case r3c7f@x r3c7a@keys r3c7b@clauses r3c70@r r3c71@mr))) (r2c34@gen-lexical 'tmp)))) r3c77@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3c75@t))) (r2ebf@syntax-dispatch r3c75@t '(_ any each-any . each-any)))) r3c6f@e)))) '#f '#f '#f '#f)))) (set! r2ec9@ellipsis-map (lambda (r3cf3@proc r3cf4@ls . r3cf7@ls*) ((lambda (r3cfa@who) (begin (set! r3cfa@who '...) (begin (if (not (list? r3cf4@ls)) (assertion-violation r3cfa@who '"not a list" r3cf4@ls) (void)) (if (not (null? r3cf7@ls*)) ((lambda (r3cfb@n) (for-each (lambda (r3cfd@x) (begin (if (not (list? r3cfd@x)) (assertion-violation r3cfa@who '"not a list" r3cfd@x) (void)) (if (not (= (length r3cfd@x) r3cfb@n)) (assertion-violation r3cfa@who '"length mismatch" r3cf4@ls r3cfd@x) (void)))) r3cf7@ls*)) (length r3cf4@ls)) (void)) (apply map r3cf3@proc r3cf4@ls r3cf7@ls*)))) '#f))) (set! r2ecb@syntax-transformer ((lambda () ((lambda (r3d00@gen-syntax r3d02@gen-ref r3d04@gen-append r3d06@gen-mappend r3d08@gen-map r3d0a@gen-cons r3d0c@gen-vector r3d0e@regen) (begin (set! r3d00@gen-syntax (lambda (r3d77@src r3d78@e r3d79@r r3d7a@maps r3d7b@ellipsis? r3d7c@vec?) ((lambda (r3d83@t) ((lambda (r3d85@ls/false) (if (and r3d85@ls/false (apply (lambda (r3d87@dots) (r3d7b@ellipsis? r3d87@dots)) r3d85@ls/false)) (apply (lambda (r3d89@dots) (r2fa8@syntax-violation '#f '"misplaced ellipsis in syntax form" r3d77@src)) r3d85@ls/false) ((lambda (r3d8b@t) ((lambda (r3d8d@ls/false) (if (and r3d8d@ls/false (apply (lambda (r3d8f@id) (r2cb4@id? r3d8f@id)) r3d8d@ls/false)) (apply (lambda (r3d91@id) ((lambda (r3d93@label) ((lambda (r3d95@b) ((lambda () (if (eq? (r2cd6@binding-type r3d95@b) 'syntax) (call-with-values (lambda () ((lambda (r3d9b@var.lev) (r3d02@gen-ref r3d77@src (car r3d9b@var.lev) (cdr r3d9b@var.lev) r3d7a@maps)) (r2cd8@binding-value r3d95@b))) (lambda (r3d9d@r3d98 r3d9e@r3d9a) ((lambda (r3da1@maps r3da2@var) (values (list 'ref r3da2@var) r3da1@maps)) r3d9e@r3d9a r3d9d@r3d98))) (values (list 'quote r3d78@e) r3d7a@maps))))) (r2cd2@label->binding r3d93@label r3d79@r))) (r2cce@id->label r3d78@e))) r3d8d@ls/false) ((lambda (r3da5@t) ((lambda (r3da7@ls/false) (if (and r3da7@ls/false (apply (lambda (r3da9@dots r3daa@e) (r3d7b@ellipsis? r3da9@dots)) r3da7@ls/false)) (apply (lambda (r3dad@dots r3dae@e) (if r3d7c@vec? (r2fa8@syntax-violation '#f '"misplaced ellipsis in syntax form" r3d77@src) (r3d00@gen-syntax r3d77@src r3dae@e r3d79@r r3d7a@maps (lambda (r3db1@x) '#f) '#f))) r3da7@ls/false) ((lambda (r3db3@t) ((lambda (r3db5@ls/false) (if (and r3db5@ls/false (apply (lambda (r3db7@x r3db8@dots r3db9@y) (r3d7b@ellipsis? r3db8@dots)) r3db5@ls/false)) (apply (lambda (r3dbd@x r3dbe@dots r3dbf@y) ((letrec ((r3dc3@f (lambda (r3dc5@y r3dc6@k) ((lambda (r3dc9@t) ((lambda (r3dcb@ls/false) (if r3dcb@ls/false (apply (lambda () (r3dc6@k r3d7a@maps)) r3dcb@ls/false) ((lambda (r3dcd@t) ((lambda (r3dcf@ls/false) (if (and r3dcf@ls/false (apply (lambda (r3dd1@dots r3dd2@y) (r3d7b@ellipsis? r3dd1@dots)) r3dcf@ls/false)) (apply (lambda (r3dd5@dots r3dd6@y) (r3dc3@f r3dd6@y (lambda (r3dd9@maps) (call-with-values (lambda () (r3dc6@k (cons '() r3dd9@maps))) (lambda (r3ddf@r3ddc r3de0@r3dde) ((lambda (r3de3@maps r3de4@x) (if (null? (car r3de3@maps)) (r2fa8@syntax-violation '#f '"extra ellipsis in syntax form" r3d77@src) (values (r3d06@gen-mappend r3de4@x (car r3de3@maps)) (cdr r3de3@maps)))) r3de0@r3dde r3ddf@r3ddc)))))) r3dcf@ls/false) ((lambda (r3de7@t) ((lambda (r3de9@ls/false) (if r3de9@ls/false (apply (lambda () (call-with-values (lambda () (r3d00@gen-syntax r3d77@src r3dc5@y r3d79@r r3d7a@maps r3d7b@ellipsis? r3d7c@vec?)) (lambda (r3def@r3dec r3df0@r3dee) ((lambda (r3df3@maps r3df4@y) (call-with-values (lambda () (r3dc6@k r3df3@maps)) (lambda (r3dfb@r3df8 r3dfc@r3dfa) ((lambda (r3dff@maps r3e00@x) (values (r3d04@gen-append r3e00@x r3df4@y) r3dff@maps)) r3dfc@r3dfa r3dfb@r3df8)))) r3df0@r3dee r3def@r3dec)))) r3de9@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3de7@t))) (r2ebf@syntax-dispatch r3de7@t '_))) r3dcd@t))) (r2ebf@syntax-dispatch r3dcd@t '(any . any)))) r3dc9@t))) (r2ebf@syntax-dispatch r3dc9@t '()))) r3dc5@y)))) r3dc3@f) r3dbf@y (lambda (r3e03@maps) (call-with-values (lambda () (r3d00@gen-syntax r3d77@src r3dbd@x r3d79@r (cons '() r3e03@maps) r3d7b@ellipsis? '#f)) (lambda (r3e09@r3e06 r3e0a@r3e08) ((lambda (r3e0d@maps r3e0e@x) (if (null? (car r3e0d@maps)) (r2fa8@syntax-violation '#f '"extra ellipsis in syntax form" r3d77@src) (values (r3d08@gen-map r3e0e@x (car r3e0d@maps)) (cdr r3e0d@maps)))) r3e0a@r3e08 r3e09@r3e06)))))) r3db5@ls/false) ((lambda (r3e11@t) ((lambda (r3e13@ls/false) (if r3e13@ls/false (apply (lambda (r3e15@x r3e16@y) (call-with-values (lambda () (r3d00@gen-syntax r3d77@src r3e15@x r3d79@r r3d7a@maps r3d7b@ellipsis? '#f)) (lambda (r3e1d@r3e1a r3e1e@r3e1c) ((lambda (r3e21@maps r3e22@xnew) (call-with-values (lambda () (r3d00@gen-syntax r3d77@src r3e16@y r3d79@r r3e21@maps r3d7b@ellipsis? r3d7c@vec?)) (lambda (r3e29@r3e26 r3e2a@r3e28) ((lambda (r3e2d@maps r3e2e@ynew) (values (r3d0a@gen-cons r3d78@e r3e15@x r3e16@y r3e22@xnew r3e2e@ynew) r3e2d@maps)) r3e2a@r3e28 r3e29@r3e26)))) r3e1e@r3e1c r3e1d@r3e1a)))) r3e13@ls/false) ((lambda (r3e31@t) ((lambda (r3e33@ls/false) (if r3e33@ls/false (apply (lambda (r3e35@ls) (call-with-values (lambda () (r3d00@gen-syntax r3d77@src r3e35@ls r3d79@r r3d7a@maps r3d7b@ellipsis? '#t)) (lambda (r3e3b@r3e38 r3e3c@r3e3a) ((lambda (r3e3f@maps r3e40@lsnew) (values (r3d0c@gen-vector r3d78@e r3e35@ls r3e40@lsnew) r3e3f@maps)) r3e3c@r3e3a r3e3b@r3e38)))) r3e33@ls/false) ((lambda (r3e43@t) ((lambda (r3e45@ls/false) (if r3e45@ls/false (apply (lambda () (values (list 'quote r3d78@e) r3d7a@maps)) r3e45@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3e43@t))) (r2ebf@syntax-dispatch r3e43@t '_))) r3e31@t))) (r2ebf@syntax-dispatch r3e31@t '#(vector each-any)))) r3e11@t))) (r2ebf@syntax-dispatch r3e11@t '(any . any)))) r3db3@t))) (r2ebf@syntax-dispatch r3db3@t '(any any . any)))) r3da5@t))) (r2ebf@syntax-dispatch r3da5@t '(any any)))) r3d8b@t))) (r2ebf@syntax-dispatch r3d8b@t 'any))) r3d83@t))) (r2ebf@syntax-dispatch r3d83@t 'any))) r3d78@e))) (set! r3d02@gen-ref (lambda (r3d5d@src r3d5e@var r3d5f@level r3d60@maps) (if (= r3d5f@level '0) (values r3d5e@var r3d60@maps) (if (null? r3d60@maps) (r2fa8@syntax-violation '#f '"missing ellipsis in syntax form" r3d5d@src) (call-with-values (lambda () (r3d02@gen-ref r3d5d@src r3d5e@var (- r3d5f@level '1) (cdr r3d60@maps))) (lambda (r3d69@r3d66 r3d6a@r3d68) ((lambda (r3d6d@outer-maps r3d6e@outer-var) ((lambda (r3d71@t) (if r3d71@t ((lambda (r3d73@b) (values (cdr r3d73@b) r3d60@maps)) r3d71@t) ((lambda (r3d75@inner-var) (values r3d75@inner-var (cons (cons (cons r3d6e@outer-var r3d75@inner-var) (car r3d60@maps)) r3d6d@outer-maps))) (r2c34@gen-lexical 'tmp)))) (assq r3d6e@outer-var (car r3d60@maps)))) r3d6a@r3d68 r3d69@r3d66))))))) (set! r3d04@gen-append (lambda (r3d59@x r3d5a@y) (if (fast-equal? r3d5a@y ''()) r3d59@x (list 'append r3d59@x r3d5a@y)))) (set! r3d06@gen-mappend (lambda (r3d55@e r3d56@map-env) (list 'apply '(primitive append) (r3d08@gen-map r3d55@e r3d56@map-env)))) (set! r3d08@gen-map (lambda (r3d43@e r3d44@map-env) ((lambda (r3d47@formals r3d48@actuals) (if (eq? (car r3d43@e) 'ref) (car r3d48@actuals) (if (for-all (lambda (r3d4b@x) (and (eq? (car r3d4b@x) 'ref) (memq (cadr r3d4b@x) r3d47@formals))) (cdr r3d43@e)) ((lambda (r3d4d@args) (cons 'map (cons (list 'primitive (car r3d43@e)) r3d4d@args))) (map ((lambda (r3d4f@r) (lambda (r3d51@x) (cdr (assq (cadr r3d51@x) r3d4f@r)))) (map cons r3d47@formals r3d48@actuals)) (cdr r3d43@e))) (cons* 'map (list 'lambda r3d47@formals r3d43@e) r3d48@actuals)))) (map cdr r3d44@map-env) (map (lambda (r3d53@x) (list 'ref (car r3d53@x))) r3d44@map-env)))) (set! r3d0a@gen-cons (lambda (r3d33@e r3d34@x r3d35@y r3d36@xnew r3d37@ynew) ((lambda (r3d3d@t) (if (memv r3d3d@t '(quote)) (if (eq? (car r3d36@xnew) 'quote) ((lambda (r3d3f@xnew r3d40@ynew) (if (and (eq? r3d3f@xnew r3d34@x) (eq? r3d40@ynew r3d35@y)) (list 'quote r3d33@e) (list 'quote (cons r3d3f@xnew r3d40@ynew)))) (cadr r3d36@xnew) (cadr r3d37@ynew)) (if (null? (cadr r3d37@ynew)) (list 'list r3d36@xnew) (list 'cons r3d36@xnew r3d37@ynew))) (if (memv r3d3d@t '(list)) (cons 'list (cons r3d36@xnew (cdr r3d37@ynew))) (list 'cons r3d36@xnew r3d37@ynew)))) (car r3d37@ynew)))) (set! r3d0c@gen-vector (lambda (r3d2d@e r3d2e@ls r3d2f@lsnew) (if (eq? (car r3d2f@lsnew) 'quote) (if (eq? (cadr r3d2f@lsnew) r3d2e@ls) (list 'quote r3d2d@e) (list 'quote (list->vector (cadr r3d2f@lsnew)))) (if (eq? (car r3d2f@lsnew) 'list) (cons 'vector (cdr r3d2f@lsnew)) (list 'list->vector r3d2f@lsnew))))) (set! r3d0e@regen (lambda (r3d27@x) ((lambda (r3d29@t) (if (memv r3d29@t '(ref)) (cadr r3d27@x) (if (memv r3d29@t '(primitive)) (list 'primitive (cadr r3d27@x)) (if (memv r3d29@t '(quote)) (list 'quote (cadr r3d27@x)) (if (memv r3d29@t '(lambda)) (r2c10@r2b50@build-lambda '#f (cadr r3d27@x) (r3d0e@regen (caddr r3d27@x))) (if (memv r3d29@t '(map)) ((lambda (r3d2b@ls) (cons '(primitive ellipsis-map) r3d2b@ls)) (map r3d0e@regen (cdr r3d27@x))) (cons (list 'primitive (car r3d27@x)) (map r3d0e@regen (cdr r3d27@x))))))))) (car r3d27@x)))) (lambda (r3d0f@e r3d10@r r3d11@mr) ((lambda (r3d15@t) ((lambda (r3d17@ls/false) (if r3d17@ls/false (apply (lambda (r3d19@x) (call-with-values (lambda () (r3d00@gen-syntax r3d0f@e r3d19@x r3d10@r '() r2ec1@ellipsis? '#f)) (lambda (r3d1f@r3d1c r3d20@r3d1e) ((lambda (r3d23@maps r3d24@e) (r3d0e@regen r3d24@e)) r3d20@r3d1e r3d1f@r3d1c)))) r3d17@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3d15@t))) (r2ebf@syntax-dispatch r3d15@t '(_ any)))) r3d0f@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! r2ecd@core-macro-transformer (lambda (r3e47@name) ((lambda (r3e49@t) (if (memv r3e49@t '(quote)) r2e6f@quote-transformer (if (memv r3e49@t '(lambda)) r2e73@lambda-transformer (if (memv r3e49@t '(case-lambda)) r2e71@case-lambda-transformer (if (memv r3e49@t '(letrec)) r2e57@letrec-transformer (if (memv r3e49@t '(letrec*)) r2e59@letrec*-transformer (if (memv r3e49@t '(if)) r2e67@if-transformer (if (memv r3e49@t '(and)) r2e69@and-transformer (if (memv r3e49@t '(or)) r2e6b@or-transformer (if (memv r3e49@t '(foreign-call)) r2ebb@foreign-call-transformer (if (memv r3e49@t '(syntax-case)) r2ec7@syntax-case-transformer (if (memv r3e49@t '(syntax)) r2ecb@syntax-transformer (if (memv r3e49@t '(type-descriptor)) r2e5d@type-descriptor-transformer (if (memv r3e49@t '(record-type-descriptor)) r2e5f@record-type-descriptor-transformer (if (memv r3e49@t '(record-constructor-descriptor)) r2e61@record-constructor-descriptor-transformer (if (memv r3e49@t '(fluid-let-syntax)) r2e5b@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" r3e47@name))))))))))))))))) r3e47@name))) (set! r2ecf@symbol-macro (lambda (r3e4b@x r3e4c@set) ((lambda (r3e4f@t) ((lambda (r3e51@ls/false) (if (and r3e51@ls/false (apply (lambda (r3e53@name) (and (r2cb4@id? r3e53@name) (memq (r2cb6@id->sym r3e53@name) r3e4c@set))) r3e51@ls/false)) (apply (lambda (r3e55@name) (r2e75@bless (list 'quote r3e55@name))) r3e51@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3e4f@t))) (r2ebf@syntax-dispatch r3e4f@t '(_ any)))) r3e4b@x))) (set! r2ed1@macro-transformer (lambda (r3e57@x) (if (procedure? r3e57@x) r3e57@x (if (symbol? r3e57@x) ((lambda (r3e59@t) (if (memv r3e59@t '(define-record-type)) r2eb3@define-record-type-macro (if (memv r3e59@t '(define-struct)) r2eb1@define-struct-macro (if (memv r3e59@t '(include)) r2ea7@include-macro (if (memv r3e59@t '(cond)) r2ea3@cond-macro (if (memv r3e59@t '(let)) r2e7b@let-macro (if (memv r3e59@t '(do)) r2e9b@do-macro (if (memv r3e59@t '(or)) r2e9f@or-macro (if (memv r3e59@t '(and)) r2ea1@and-macro (if (memv r3e59@t '(let*)) r2e9d@let*-macro (if (memv r3e59@t '(let-values)) r2e7d@let-values-macro (if (memv r3e59@t '(let*-values)) r2e7f@let*-values-macro (if (memv r3e59@t '(syntax-rules)) r2eab@syntax-rules-macro (if (memv r3e59@t '(quasiquote)) r2ead@quasiquote-macro (if (memv r3e59@t '(quasisyntax)) r2eaf@quasisyntax-macro (if (memv r3e59@t '(with-syntax)) r2e77@with-syntax-macro (if (memv r3e59@t '(when)) r2e63@when-macro (if (memv r3e59@t '(unless)) r2e65@unless-macro (if (memv r3e59@t '(case)) r2e6d@case-macro (if (memv r3e59@t '(identifier-syntax)) r2e99@identifier-syntax-macro (if (memv r3e59@t '(time)) r2e91@time-macro (if (memv r3e59@t '(delay)) r2e93@delay-macro (if (memv r3e59@t '(assert)) r2e95@assert-macro (if (memv r3e59@t '(endianness)) r2e97@endianness-macro (if (memv r3e59@t '(guard)) r2e8d@guard-macro (if (memv r3e59@t '(define-enumeration)) r2e8f@define-enumeration-macro (if (memv r3e59@t '(trace-lambda)) r2e81@trace-lambda-macro (if (memv r3e59@t '(trace-define)) r2e83@trace-define-macro (if (memv r3e59@t '(trace-define-syntax)) r2e85@trace-define-syntax-macro (if (memv r3e59@t '(trace-let-syntax)) r2e89@trace-let-syntax-macro (if (memv r3e59@t '(trace-letrec-syntax)) r2e8b@trace-letrec-syntax-macro (if (memv r3e59@t '(define-condition-type)) r2eb5@define-condition-type-macro (if (memv r3e59@t '(parameterize)) r2eb9@parameterize-macro (if (memv r3e59@t '(include-into)) r2ea9@include-into-macro (if (memv r3e59@t '(eol-style)) (lambda (r3e5b@x) (r2ecf@symbol-macro r3e5b@x '(none lf cr crlf nel crnel ls))) (if (memv r3e59@t '(error-handling-mode)) (lambda (r3e5d@x) (r2ecf@symbol-macro r3e5d@x '(ignore raise replace))) (if (memv r3e59@t '(buffer-mode)) (lambda (r3e5f@x) (r2ecf@symbol-macro r3e5f@x '(none line block))) (if (memv r3e59@t '(file-options)) r2c27@file-options-macro (if (memv r3e59@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) r2eb7@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" r3e57@x)))))))))))))))))))))))))))))))))))))))) r3e57@x) (error 'core-macro-transformer '"BUG: invalid macro" r3e57@x))))) (set! r2ed3@local-macro-transformer (lambda (r3e61@x) (car r3e61@x))) (set! r2ed5@do-macro-call (lambda (r3e63@transformer r3e64@expr) ((lambda (r3e67@out) (begin ((letrec ((r3e69@f (lambda (r3e6b@x) (if (not (r2c7c@stx? r3e6b@x)) (if (pair? r3e6b@x) (begin (r3e69@f (car r3e6b@x)) (r3e69@f (cdr r3e6b@x))) (if (vector? r3e6b@x) (vector-for-each r3e69@f r3e6b@x) (if (symbol? r3e6b@x) (r2fa8@syntax-violation '#f '"raw symbol encountered in output of macro" r3e64@expr r3e6b@x) (void)))) (void))))) r3e69@f) r3e67@out) (r2c9e@add-mark (r2c94@gen-mark) r3e67@out r3e64@expr))) (r3e63@transformer (r2c9e@add-mark r2c96@anti-mark r3e64@expr '#f))))) (set! r2ed7@chi-macro (lambda (r3e6d@p r3e6e@e) (r2ed5@do-macro-call (r2ed1@macro-transformer r3e6d@p) r3e6e@e))) (set! r2ed9@chi-local-macro (lambda (r3e71@p r3e72@e) (r2ed5@do-macro-call (r2ed3@local-macro-transformer r3e71@p) r3e72@e))) (set! r2edb@chi-global-macro (lambda (r3e75@p r3e76@e) ((lambda (r3e79@lib r3e7a@loc) (begin (r2ad9@r297b@visit-library r3e79@lib) ((lambda (r3e7d@x) ((lambda (r3e7f@transformer) (r2ed5@do-macro-call r3e7f@transformer r3e76@e)) (if (procedure? r3e7d@x) r3e7d@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" r3e7d@x)))) (symbol-value r3e7a@loc)))) (car r3e75@p) (cdr r3e75@p)))) (set! r2edd@chi-expr* (lambda (r3e81@e* r3e82@r r3e83@mr) (if (null? r3e81@e*) '() ((lambda (r3e87@e) (cons r3e87@e (r2edd@chi-expr* (cdr r3e81@e*) r3e82@r r3e83@mr))) (r2ee1@chi-expr (car r3e81@e*) r3e82@r r3e83@mr))))) (set! r2edf@chi-application (lambda (r3e89@e r3e8a@r r3e8b@mr) ((lambda (r3e8f@t) ((lambda (r3e91@ls/false) (if r3e91@ls/false (apply (lambda (r3e93@rator r3e94@rands) ((lambda (r3e97@rator) (cons r3e97@rator (r2edd@chi-expr* r3e94@rands r3e8a@r r3e8b@mr))) (r2ee1@chi-expr r3e93@rator r3e8a@r r3e8b@mr))) r3e91@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3e8f@t))) (r2ebf@syntax-dispatch r3e8f@t '(any . each-any)))) r3e89@e))) (set! r2ee1@chi-expr (lambda (r3e99@e r3e9a@r r3e9b@mr) (call-with-values (lambda () (r2cdc@syntax-type r3e99@e r3e9a@r)) (lambda (r3ea5@r3ea0 r3ea6@r3ea2 r3ea7@r3ea4) ((lambda (r3eab@kwd r3eac@value r3ead@type) ((lambda (r3eb1@t) (if (memv r3eb1@t '(core-macro)) ((lambda (r3eb3@transformer) (r3eb3@transformer r3e99@e r3e9a@r r3e9b@mr)) (r2ecd@core-macro-transformer r3eac@value)) (if (memv r3eb1@t '(global)) ((lambda (r3eb5@lib) ((lambda (r3eb7@loc) ((lambda () (begin ((r2f2a@inv-collector) r3eb5@lib) r3eb7@loc)))) (cdr r3eac@value))) (car r3eac@value)) (if (memv r3eb1@t '(core-prim)) ((lambda (r3eb9@name) (list 'primitive r3eb9@name)) r3eac@value) (if (memv r3eb1@t '(call)) (r2edf@chi-application r3e99@e r3e9a@r r3e9b@mr) (if (memv r3eb1@t '(lexical)) ((lambda (r3ebb@lex) r3ebb@lex) (r2e4b@lexical-var r3eac@value)) (if (memv r3eb1@t '(global-macro global-macro!)) (r2ee1@chi-expr (r2edb@chi-global-macro r3eac@value r3e99@e) r3e9a@r r3e9b@mr) (if (memv r3eb1@t '(local-macro local-macro!)) (r2ee1@chi-expr (r2ed9@chi-local-macro r3eac@value r3e99@e) r3e9a@r r3e9b@mr) (if (memv r3eb1@t '(macro macro!)) (r2ee1@chi-expr (r2ed7@chi-macro r3eac@value r3e99@e) r3e9a@r r3e9b@mr) (if (memv r3eb1@t '(constant)) ((lambda (r3ebd@datum) (list 'quote r3ebd@datum)) r3eac@value) (if (memv r3eb1@t '(set!)) (r2ee3@chi-set! r3e99@e r3e9a@r r3e9b@mr) (if (memv r3eb1@t '(begin)) ((lambda (r3ebf@t) ((lambda (r3ec1@ls/false) (if r3ec1@ls/false (apply (lambda (r3ec3@x r3ec4@x*) (r2c13@r2b82@build-sequence '#f (r2edd@chi-expr* (cons r3ec3@x r3ec4@x*) r3e9a@r r3e9b@mr))) r3ec1@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3ebf@t))) (r2ebf@syntax-dispatch r3ebf@t '(_ any . each-any)))) r3e99@e) (if (memv r3eb1@t '(let-syntax letrec-syntax)) ((lambda (r3ec7@t) ((lambda (r3ec9@ls/false) (if (and r3ec9@ls/false (apply (lambda (r3ecb@xlhs* r3ecc@xrhs* r3ecd@xbody r3ece@xbody*) (if (not (r2cbe@valid-bound-ids? r3ecb@xlhs*)) (r2fa8@syntax-violation '#f '"invalid identifiers" r3e99@e) (void))) r3ec9@ls/false)) (apply (lambda (r3ed3@xlhs* r3ed4@xrhs* r3ed5@xbody r3ed6@xbody*) ((lambda (r3edb@xlab*) ((lambda (r3edd@xrib) ((lambda (r3edf@xb*) ((lambda () (r2c13@r2b82@build-sequence '#f (r2edd@chi-expr* (map (lambda (r3ee1@x) (r2ca0@add-subst r3edd@xrib r3ee1@x)) (cons r3ed5@xbody r3ed6@xbody*)) (append (map cons r3edb@xlab* r3edf@xb*) r3e9a@r) (append (map cons r3edb@xlab* r3edf@xb*) r3e9b@mr)))))) (map (lambda (r3ee3@x) (r2cf2@make-eval-transformer (r2f1c@expand-transformer (if (eq? r3ead@type 'let-syntax) r3ee3@x (r2ca0@add-subst r3edd@xrib r3ee3@x)) r3e9b@mr))) r3ed4@xrhs*))) (r2c6f@make-full-rib r3ed3@xlhs* r3edb@xlab*))) (map r2c38@gen-label r3ed3@xlhs*))) r3ec9@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3ec7@t))) (r2ebf@syntax-dispatch r3ec7@t '(_ #(each (any any)) any . each-any)))) r3e99@e) (if (memv r3eb1@t '(displaced-lexical)) (r2fa8@syntax-violation '#f '"identifier out of context" r3e99@e) (if (memv r3eb1@t '(syntax)) (r2fa8@syntax-violation '#f '"reference to pattern variable outside a syntax form" r3e99@e) (if (memv r3eb1@t '(define define-syntax module import library)) (r2fa8@syntax-violation '#f (string-append ((lambda (r3ee5@t) (if (memv r3ee5@t '(define)) '"a definition" (if (memv r3ee5@t '(define-syntax)) '"a define-syntax" (if (memv r3ee5@t '(module)) '"a module definition" (if (memv r3ee5@t '(library)) '"a library definition" (if (memv r3ee5@t '(import)) '"an import declaration" (if (memv r3ee5@t '(export)) '"an export declaration" '"a non-expression"))))))) r3ead@type) '" was found where an expression was expected") r3e99@e) (if (memv r3eb1@t '(mutable)) (r2fa8@syntax-violation '#f '"attempt to reference an unexportable variable" r3e99@e) (r2fa8@syntax-violation '#f '"invalid expression" r3e99@e)))))))))))))))))) r3ead@type)) r3ea7@r3ea4 r3ea6@r3ea2 r3ea5@r3ea0))))) (set! r2ee3@chi-set! (lambda (r3ee7@e r3ee8@r r3ee9@mr) ((lambda (r3eed@t) ((lambda (r3eef@ls/false) (if (and r3eef@ls/false (apply (lambda (r3ef1@x r3ef2@v) (r2cb4@id? r3ef1@x)) r3eef@ls/false)) (apply (lambda (r3ef5@x r3ef6@v) (call-with-values (lambda () (r2cdc@syntax-type r3ef5@x r3ee8@r)) (lambda (r3eff@r3efa r3f00@r3efc r3f01@r3efe) ((lambda (r3f05@kwd r3f06@value r3f07@type) ((lambda (r3f0b@t) (if (memv r3f0b@t '(lexical)) (begin (r2e4f@set-lexical-mutable! r3f06@value '#t) (list 'set! (r2e4b@lexical-var r3f06@value) (r2ee1@chi-expr r3ef6@v r3ee8@r r3ee9@mr))) (if (memv r3f0b@t '(core-prim)) (r2fa8@syntax-violation '#f '"cannot modify imported core primitive" r3ee7@e) (if (memv r3f0b@t '(global)) (r2fa8@syntax-violation '#f '"attempt to modify imported binding" r3ee7@e) (if (memv r3f0b@t '(global-macro!)) (r2ee1@chi-expr (r2edb@chi-global-macro r3f06@value r3ee7@e) r3ee8@r r3ee9@mr) (if (memv r3f0b@t '(local-macro!)) (r2ee1@chi-expr (r2ed9@chi-local-macro r3f06@value r3ee7@e) r3ee8@r r3ee9@mr) (if (memv r3f0b@t '(mutable)) (r2fa8@syntax-violation '#f '"attempt to assign to an unexportable variable" r3ee7@e) (r2fa8@syntax-violation '#f '"invalid syntax" r3ee7@e)))))))) r3f07@type)) r3f01@r3efe r3f00@r3efc r3eff@r3efa)))) r3eef@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3eed@t))) (r2ebf@syntax-dispatch r3eed@t '(_ any any)))) r3ee7@e))) (set! r2ee5@verify-formals (lambda (r3f0d@fmls r3f0e@stx) ((lambda (r3f11@t) ((lambda (r3f13@ls/false) (if r3f13@ls/false (apply (lambda (r3f15@x*) (if (not (r2cbe@valid-bound-ids? r3f15@x*)) (r2e79@invalid-fmls-error r3f0e@stx r3f0d@fmls) (void))) r3f13@ls/false) ((lambda (r3f17@t) ((lambda (r3f19@ls/false) (if r3f19@ls/false (apply (lambda (r3f1b@x* r3f1c@x) (if (not (r2cbe@valid-bound-ids? (cons r3f1c@x r3f1b@x*))) (r2e79@invalid-fmls-error r3f0e@stx r3f0d@fmls) (void))) r3f19@ls/false) ((lambda (r3f1f@t) ((lambda (r3f21@ls/false) (if r3f21@ls/false (apply (lambda () (r2fa8@syntax-violation '#f '"invalid syntax" r3f0e@stx)) r3f21@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3f1f@t))) (r2ebf@syntax-dispatch r3f1f@t '_))) r3f17@t))) (r2ebf@syntax-dispatch r3f17@t '#(each+ any () any)))) r3f11@t))) (r2ebf@syntax-dispatch r3f11@t 'each-any))) r3f0d@fmls))) (set! r2ee7@chi-lambda-clause (lambda (r3f23@stx r3f24@fmls r3f25@body* r3f26@r r3f27@mr) ((lambda (r3f2d@t) ((lambda (r3f2f@ls/false) (if r3f2f@ls/false (apply (lambda (r3f31@x*) (begin (r2ee5@verify-formals r3f24@fmls r3f23@stx) ((lambda (r3f33@lex* r3f34@lab*) (values r3f33@lex* (r2ef7@chi-internal (r2ca0@add-subst (r2c6f@make-full-rib r3f31@x* r3f34@lab*) r3f25@body*) (r2e53@add-lexicals r3f34@lab* r3f33@lex* r3f26@r) r3f27@mr))) (map r2c34@gen-lexical r3f31@x*) (map r2c38@gen-label r3f31@x*)))) r3f2f@ls/false) ((lambda (r3f37@t) ((lambda (r3f39@ls/false) (if r3f39@ls/false (apply (lambda (r3f3b@x* r3f3c@x) (begin (r2ee5@verify-formals r3f24@fmls r3f23@stx) ((lambda (r3f3f@lex* r3f40@lab* r3f41@lex r3f42@lab) (values (append r3f3f@lex* r3f41@lex) (r2ef7@chi-internal (r2ca0@add-subst (r2c6f@make-full-rib (cons r3f3c@x r3f3b@x*) (cons r3f42@lab r3f40@lab*)) r3f25@body*) (r2e53@add-lexicals (cons r3f42@lab r3f40@lab*) (cons r3f41@lex r3f3f@lex*) r3f26@r) r3f27@mr))) (map r2c34@gen-lexical r3f3b@x*) (map r2c38@gen-label r3f3b@x*) (r2c34@gen-lexical r3f3c@x) (r2c38@gen-label r3f3c@x)))) r3f39@ls/false) ((lambda (r3f47@t) ((lambda (r3f49@ls/false) (if r3f49@ls/false (apply (lambda () (r2fa8@syntax-violation '#f '"invalid syntax" r3f24@fmls)) r3f49@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r3f47@t))) (r2ebf@syntax-dispatch r3f47@t '_))) r3f37@t))) (r2ebf@syntax-dispatch r3f37@t '#(each+ any () any)))) r3f2d@t))) (r2ebf@syntax-dispatch r3f2d@t 'each-any))) r3f24@fmls))) (set! r2ee9@chi-lambda-clause* (lambda (r3f4b@stx r3f4c@fmls* r3f4d@body** r3f4e@r r3f4f@mr) (if (null? r3f4c@fmls*) (values '() '()) (call-with-values (lambda () (r2ee7@chi-lambda-clause r3f4b@stx (car r3f4c@fmls*) (car r3f4d@body**) r3f4e@r r3f4f@mr)) (lambda (r3f59@r3f56 r3f5a@r3f58) ((lambda (r3f5d@b r3f5e@a) (call-with-values (lambda () (r2ee9@chi-lambda-clause* r3f4b@stx (cdr r3f4c@fmls*) (cdr r3f4d@body**) r3f4e@r r3f4f@mr)) (lambda (r3f65@r3f62 r3f66@r3f64) ((lambda (r3f69@b* r3f6a@a*) (values (cons r3f5e@a r3f6a@a*) (cons r3f5d@b r3f69@b*))) r3f66@r3f64 r3f65@r3f62)))) r3f5a@r3f58 r3f59@r3f56)))))) (set! r2eeb@chi-defun (lambda (r3f6d@x r3f6e@r r3f6f@mr) ((lambda (r3f73@fmls r3f74@body*) (call-with-values (lambda () (r2ee7@chi-lambda-clause r3f73@fmls r3f73@fmls r3f74@body* r3f6e@r r3f6f@mr)) (lambda (r3f7b@r3f78 r3f7c@r3f7a) ((lambda (r3f7f@body r3f80@fmls) (r2c10@r2b50@build-lambda '#f r3f80@fmls r3f7f@body)) r3f7c@r3f7a r3f7b@r3f78)))) (car r3f6d@x) (cdr r3f6d@x)))) (set! r2eed@chi-rhs (lambda (r3f83@rhs r3f84@r r3f85@mr) ((lambda (r3f89@t) (if (memv r3f89@t '(defun)) (r2eeb@chi-defun (cdr r3f83@rhs) r3f84@r r3f85@mr) (if (memv r3f89@t '(expr)) ((lambda (r3f8b@expr) (r2ee1@chi-expr r3f8b@expr r3f84@r r3f85@mr)) (cdr r3f83@rhs)) (if (memv r3f89@t '(top-expr)) ((lambda (r3f8d@expr) (r2c13@r2b82@build-sequence '#f (list (r2ee1@chi-expr r3f8d@expr r3f84@r r3f85@mr) (r2c14@r2b84@build-void)))) (cdr r3f83@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" r3f83@rhs))))) (car r3f83@rhs)))) (set! r2eef@expand-interaction-rhs*/init* (lambda (r3f8f@lhs* r3f90@rhs* r3f91@init* r3f92@r r3f93@mr) ((letrec ((r3f99@f (lambda (r3f9b@lhs* r3f9c@rhs*) (if (null? r3f9b@lhs*) (map (lambda (r3f9f@x) (r2ee1@chi-expr r3f9f@x r3f92@r r3f93@mr)) r3f91@init*) ((lambda (r3fa1@lhs r3fa2@rhs) ((lambda (r3fa5@t) (if (memv r3fa5@t '(defun)) ((lambda (r3fa7@rhs) (cons (list 'set! r3fa1@lhs r3fa7@rhs) (r3f99@f (cdr r3f9b@lhs*) (cdr r3f9c@rhs*)))) (r2eeb@chi-defun (cdr r3fa2@rhs) r3f92@r r3f93@mr)) (if (memv r3fa5@t '(expr)) ((lambda (r3fa9@rhs) (cons (list 'set! r3fa1@lhs r3fa9@rhs) (r3f99@f (cdr r3f9b@lhs*) (cdr r3f9c@rhs*)))) (r2ee1@chi-expr (cdr r3fa2@rhs) r3f92@r r3f93@mr)) (if (memv r3fa5@t '(top-expr)) ((lambda (r3fab@e) (cons r3fab@e (r3f99@f (cdr r3f9b@lhs*) (cdr r3f9c@rhs*)))) (r2ee1@chi-expr (cdr r3fa2@rhs) r3f92@r r3f93@mr)) (error 'expand-interaction '"invallid" r3fa2@rhs))))) (car r3fa2@rhs))) (car r3f9b@lhs*) (car r3f9c@rhs*)))))) r3f99@f) r3f8f@lhs* r3f90@rhs*))) (set! r2ef1@chi-rhs* (lambda (r3fad@rhs* r3fae@r r3faf@mr) ((letrec ((r3fb3@f (lambda (r3fb5@ls) (if (null? r3fb5@ls) '() ((lambda (r3fb7@a) (cons r3fb7@a (r3fb3@f (cdr r3fb5@ls)))) (r2eed@chi-rhs (car r3fb5@ls) r3fae@r r3faf@mr)))))) r3fb3@f) r3fad@rhs*))) (set! r2ef3@find-bound=? (lambda (r3fb9@x r3fba@lhs* r3fbb@rhs*) (if (null? r3fba@lhs*) '#f (if (r2cba@bound-id=? r3fb9@x (car r3fba@lhs*)) (car r3fbb@rhs*) (r2ef3@find-bound=? r3fb9@x (cdr r3fba@lhs*) (cdr r3fbb@rhs*)))))) (set! r2ef5@find-dups (lambda (r3fbf@ls) ((letrec ((r3fc1@f (lambda (r3fc3@ls r3fc4@dups) (if (null? r3fc3@ls) r3fc4@dups ((lambda (r3fc7@t) (if r3fc7@t ((lambda (r3fc9@x) (r3fc1@f (cdr r3fc3@ls) (cons (list (car r3fc3@ls) r3fc9@x) r3fc4@dups))) r3fc7@t) (r3fc1@f (cdr r3fc3@ls) r3fc4@dups))) (r2ef3@find-bound=? (car r3fc3@ls) (cdr r3fc3@ls) (cdr r3fc3@ls))))))) r3fc1@f) r3fbf@ls '()))) (set! r2ef7@chi-internal (lambda (r3fcb@e* r3fcc@r r3fcd@mr) ((lambda (r3fd1@rib) (call-with-values (lambda () (r2f1a@chi-body* (map (lambda (r3fe3@x) (r2ca0@add-subst r3fd1@rib r3fe3@x)) (r2cb2@syntax->list r3fcb@e*)) r3fcc@r r3fcd@mr '() '() '() '() '() r3fd1@rib '#f)) (lambda (r3fe5@r3fd4 r3fe6@r3fd6 r3fe7@r3fd8 r3fe8@r3fda r3fe9@r3fdc r3fea@r3fde r3feb@r3fe0 r3fec@r3fe2) ((lambda (r3ff5@_exp* r3ff6@kwd* r3ff7@mod** r3ff8@rhs* r3ff9@lex* r3ffa@mr r3ffb@r r3ffc@e*) (begin (if (null? r3ffc@e*) (r2fa8@syntax-violation '#f '"no expression in body" r3ffc@e*) (void)) ((lambda (r4005@init*) ((lambda (r4007@rhs*) ((lambda () (r2c16@r2b88@build-letrec* '#f (reverse r3ff9@lex*) (reverse r4007@rhs*) (r2c13@r2b82@build-sequence '#f r4005@init*))))) (r2ef1@chi-rhs* r3ff8@rhs* r3ffb@r r3ffa@mr))) (r2edd@chi-expr* (append (apply append (reverse r3ff7@mod**)) r3ffc@e*) r3ffb@r r3ffa@mr)))) r3fec@r3fe2 r3feb@r3fe0 r3fea@r3fde r3fe9@r3fdc r3fe8@r3fda r3fe7@r3fd8 r3fe6@r3fd6 r3fe5@r3fd4)))) (r2c63@make-empty-rib)))) (set! r2ef9@parse-module (lambda (r4009@e) ((lambda (r400b@t) ((lambda (r400d@ls/false) (if r400d@ls/false (apply (lambda (r400f@export* r4010@b*) (begin (if (not (for-all r2cb4@id? r400f@export*)) (r2fa8@syntax-violation '#f '"module exports must be identifiers" r4009@e) (void)) (values '#f (list->vector r400f@export*) r4010@b*))) r400d@ls/false) ((lambda (r4013@t) ((lambda (r4015@ls/false) (if r4015@ls/false (apply (lambda (r4017@name r4018@export* r4019@b*) (begin (if (not (r2cb4@id? r4017@name)) (r2fa8@syntax-violation '#f '"module name must be an identifier" r4009@e) (void)) (if (not (for-all r2cb4@id? r4018@export*)) (r2fa8@syntax-violation '#f '"module exports must be identifiers" r4009@e) (void)) (values r4017@name (list->vector r4018@export*) r4019@b*))) r4015@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r4013@t))) (r2ebf@syntax-dispatch r4013@t '(_ any each-any . each-any)))) r400b@t))) (r2ebf@syntax-dispatch r400b@t '(_ each-any . each-any)))) r4009@e))) (set! r2eff@r2efa (make-record-type-descriptor 'module-interface '#f 'r2efd '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! r2f01@r2efc '#f) (set! r2f03@r2efb (make-record-constructor-descriptor r2eff@r2efa '#f r2f01@r2efc)) (set! r2f06@module-interface? (record-predicate r2eff@r2efa)) (set! r2f08@make-module-interface (record-constructor r2f03@r2efb)) (set! r2f0a@module-interface-first-mark (record-accessor r2eff@r2efa '0)) (set! r2f0c@module-interface-exp-id-vec (record-accessor r2eff@r2efa '1)) (set! r2f0e@module-interface-exp-lab-vec (record-accessor r2eff@r2efa '2)) (set! r2f10@set-module-interface-first-mark! (record-mutator r2eff@r2efa '0)) (set! r2f12@set-module-interface-exp-id-vec! (record-mutator r2eff@r2efa '1)) (set! r2f14@set-module-interface-exp-lab-vec! (record-mutator r2eff@r2efa '2)) (set! r2f16@module-interface-exp-id* (lambda (r401d@iface r401e@id) ((lambda (r4022@diff-marks) (begin (set! r4022@diff-marks (lambda (r4029@ls r402a@x) (begin (if (null? r4029@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (r402d@a) (if (eq? r402d@a r402a@x) '() (cons r402d@a (r4022@diff-marks (cdr r4029@ls) r402a@x)))) (car r4029@ls))))) ((lambda (r4023@diff r4024@id-vec) (if (null? r4023@diff) r4024@id-vec (vector-map (lambda (r4027@x) (r2c7e@make-stx (r2c80@stx-expr r4027@x) (append r4023@diff (r2c82@stx-mark* r4027@x)) '() '())) r4024@id-vec))) (r4022@diff-marks (r2c82@stx-mark* r401e@id) (r2f0a@module-interface-first-mark r401d@iface)) (r2f0c@module-interface-exp-id-vec r401d@iface)))) '#f))) (set! r2f18@chi-internal-module (lambda (r402f@e r4030@r r4031@mr r4032@lex* r4033@rhs* r4034@mod** r4035@kwd*) (call-with-values (lambda () (r2ef9@parse-module r402f@e)) (lambda (r4043@r403e r4044@r4040 r4045@r4042) ((lambda (r4049@e* r404a@exp-id* r404b@name) ((lambda (r404f@rib) ((lambda (r4051@e*) ((lambda () (call-with-values (lambda () (r2f1a@chi-body* r4051@e* r4030@r r4031@mr r4032@lex* r4033@rhs* r4034@mod** r4035@kwd* '() r404f@rib '#f)) (lambda (r4063@r4054 r4064@r4056 r4065@r4058 r4066@r405a r4067@r405c r4068@r405e r4069@r4060 r406a@r4062) ((lambda (r4073@_exp* r4074@kwd* r4075@mod** r4076@rhs* r4077@lex* r4078@mr r4079@r r407a@e*) ((lambda (r4083@exp-lab* r4084@mod**) (if (not r404b@name) (values r4077@lex* r4076@rhs* r404a@exp-id* r4083@exp-lab* r4079@r r4078@mr r4084@mod** r4074@kwd*) ((lambda (r4087@lab r4088@iface) (values r4077@lex* r4076@rhs* (vector r404b@name) (vector r4087@lab) (cons (cons r4087@lab (cons '$module r4088@iface)) r4079@r) (cons (cons r4087@lab (cons '$module r4088@iface)) r4078@mr) r4084@mod** r4074@kwd*)) (r2c38@gen-label 'module) (r2f08@make-module-interface (car (r2c82@stx-mark* r404b@name)) (vector-map (lambda (r408b@x) (r2c7e@make-stx (r2c80@stx-expr r408b@x) (r2c82@stx-mark* r408b@x) '() '())) r404a@exp-id*) r4083@exp-lab*)))) (vector-map (lambda (r408d@x) (or (r2cce@id->label (r2c7e@make-stx (r2cb6@id->sym r408d@x) (r2c82@stx-mark* r408d@x) (list r404f@rib) '())) (r2fa8@syntax-violation '#f '"cannot find module export" r408d@x))) r404a@exp-id*) (cons r407a@e* r4075@mod**))) r406a@r4062 r4069@r4060 r4068@r405e r4067@r405c r4066@r405a r4065@r4058 r4064@r4056 r4063@r4054)))))) (map (lambda (r408f@x) (r2ca0@add-subst r404f@rib r408f@x)) (r2cb2@syntax->list r4049@e*)))) (r2c63@make-empty-rib))) r4045@r4042 r4044@r4040 r4043@r403e))))) (set! r2f1a@chi-body* (lambda (r4091@e* r4092@r r4093@mr r4094@lex* r4095@rhs* r4096@mod** r4097@kwd* r4098@exp* r4099@rib r409a@top?) (if (null? r4091@e*) (values r4091@e* r4092@r r4093@mr r4094@lex* r4095@rhs* r4096@mod** r4097@kwd* r4098@exp*) ((lambda (r40a5@e) (call-with-values (lambda () (r2cdc@syntax-type r40a5@e r4092@r)) (lambda (r40ad@r40a8 r40ae@r40aa r40af@r40ac) ((lambda (r40b3@kwd r40b4@value r40b5@type) ((lambda (r40b9@kwd*) ((lambda (r40bb@t) (if (memv r40bb@t '(define)) (call-with-values (lambda () (r2e43@parse-define r40a5@e)) (lambda (r40c1@r40be r40c2@r40c0) ((lambda (r40c5@rhs r40c6@id) (begin (if (r2cc2@bound-id-member? r40c6@id r40b9@kwd*) (r2fa8@syntax-violation '#f '"cannot redefine keyword" r40a5@e) (void)) (call-with-values (lambda () (r2c3c@gen-define-label+loc r40c6@id r4099@rib)) (lambda (r40cd@r40ca r40ce@r40cc) ((lambda (r40d1@lex r40d2@lab) (begin (r2c65@extend-rib! r4099@rib r40c6@id r40d2@lab) (r2f1a@chi-body* (cdr r4091@e*) (r2e51@add-lexical r40d2@lab r40d1@lex r4092@r) r4093@mr (cons r40d1@lex r4094@lex*) (cons r40c5@rhs r4095@rhs*) r4096@mod** r40b9@kwd* r4098@exp* r4099@rib r409a@top?))) r40ce@r40cc r40cd@r40ca))))) r40c2@r40c0 r40c1@r40be))) (if (memv r40bb@t '(define-syntax)) (call-with-values (lambda () (r2e45@parse-define-syntax r40a5@e)) (lambda (r40d9@r40d6 r40da@r40d8) ((lambda (r40dd@rhs r40de@id) (begin (if (r2cc2@bound-id-member? r40de@id r40b9@kwd*) (r2fa8@syntax-violation '#f '"cannot redefine keyword" r40a5@e) (void)) ((lambda (r40e1@lab r40e2@expanded-rhs) (begin (r2c65@extend-rib! r4099@rib r40de@id r40e1@lab) ((lambda (r40e5@b) (r2f1a@chi-body* (cdr r4091@e*) (cons (cons r40e1@lab r40e5@b) r4092@r) (cons (cons r40e1@lab r40e5@b) r4093@mr) r4094@lex* r4095@rhs* r4096@mod** r40b9@kwd* r4098@exp* r4099@rib r409a@top?)) (r2cf2@make-eval-transformer r40e2@expanded-rhs)))) (r2c3e@gen-define-label r40de@id r4099@rib) (r2f1c@expand-transformer r40dd@rhs r4093@mr)))) r40da@r40d8 r40d9@r40d6))) (if (memv r40bb@t '(let-syntax letrec-syntax)) ((lambda (r40e7@t) ((lambda (r40e9@ls/false) (if (and r40e9@ls/false (apply (lambda (r40eb@xlhs* r40ec@xrhs* r40ed@xbody*) (if (not (r2cbe@valid-bound-ids? r40eb@xlhs*)) (r2fa8@syntax-violation '#f '"invalid identifiers" r40a5@e) (void))) r40e9@ls/false)) (apply (lambda (r40f1@xlhs* r40f2@xrhs* r40f3@xbody*) ((lambda (r40f7@xlab*) ((lambda (r40f9@xrib) ((lambda (r40fb@xb*) ((lambda () (r2f1a@chi-body* (append (map (lambda (r40fd@x) (r2ca0@add-subst r40f9@xrib r40fd@x)) r40f3@xbody*) (cdr r4091@e*)) (append (map cons r40f7@xlab* r40fb@xb*) r4092@r) (append (map cons r40f7@xlab* r40fb@xb*) r4093@mr) r4094@lex* r4095@rhs* r4096@mod** r40b9@kwd* r4098@exp* r4099@rib r409a@top?)))) (map (lambda (r40ff@x) (r2cf2@make-eval-transformer (r2f1c@expand-transformer (if (eq? r40b5@type 'let-syntax) r40ff@x (r2ca0@add-subst r40f9@xrib r40ff@x)) r4093@mr))) r40f2@xrhs*))) (r2c6f@make-full-rib r40f1@xlhs* r40f7@xlab*))) (map r2c38@gen-label r40f1@xlhs*))) r40e9@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r40e7@t))) (r2ebf@syntax-dispatch r40e7@t '(_ #(each (any any)) . each-any)))) r40a5@e) (if (memv r40bb@t '(begin)) ((lambda (r4101@t) ((lambda (r4103@ls/false) (if r4103@ls/false (apply (lambda (r4105@x*) (r2f1a@chi-body* (append r4105@x* (cdr r4091@e*)) r4092@r r4093@mr r4094@lex* r4095@rhs* r4096@mod** r40b9@kwd* r4098@exp* r4099@rib r409a@top?)) r4103@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r4101@t))) (r2ebf@syntax-dispatch r4101@t '(_ . each-any)))) r40a5@e) (if (memv r40bb@t '(global-macro global-macro!)) (r2f1a@chi-body* (cons (r2ca0@add-subst r4099@rib (r2edb@chi-global-macro r40b4@value r40a5@e)) (cdr r4091@e*)) r4092@r r4093@mr r4094@lex* r4095@rhs* r4096@mod** r40b9@kwd* r4098@exp* r4099@rib r409a@top?) (if (memv r40bb@t '(local-macro local-macro!)) (r2f1a@chi-body* (cons (r2ca0@add-subst r4099@rib (r2ed9@chi-local-macro r40b4@value r40a5@e)) (cdr r4091@e*)) r4092@r r4093@mr r4094@lex* r4095@rhs* r4096@mod** r40b9@kwd* r4098@exp* r4099@rib r409a@top?) (if (memv r40bb@t '(macro macro!)) (r2f1a@chi-body* (cons (r2ca0@add-subst r4099@rib (r2ed7@chi-macro r40b4@value r40a5@e)) (cdr r4091@e*)) r4092@r r4093@mr r4094@lex* r4095@rhs* r4096@mod** r40b9@kwd* r4098@exp* r4099@rib r409a@top?) (if (memv r40bb@t '(module)) (call-with-values (lambda () (r2f18@chi-internal-module r40a5@e r4092@r r4093@mr r4094@lex* r4095@rhs* r4096@mod** r40b9@kwd*)) (lambda (r4117@r4108 r4118@r410a r4119@r410c r411a@r410e r411b@r4110 r411c@r4112 r411d@r4114 r411e@r4116) ((lambda (r4127@kwd* r4128@mod** r4129@mr r412a@r r412b@m-exp-lab* r412c@m-exp-id* r412d@rhs* r412e@lex*) (begin (vector-for-each (lambda (r4137@id r4138@lab) (r2c65@extend-rib! r4099@rib r4137@id r4138@lab)) r412c@m-exp-id* r412b@m-exp-lab*) (r2f1a@chi-body* (cdr r4091@e*) r412a@r r4129@mr r412e@lex* r412d@rhs* r4128@mod** r4127@kwd* r4098@exp* r4099@rib r409a@top?))) r411e@r4116 r411d@r4114 r411c@r4112 r411b@r4110 r411a@r410e r4119@r410c r4118@r410a r4117@r4108))) (if (memv r40bb@t '(library)) (begin (r2f8a@library-expander (r2cca@stx->datum r40a5@e)) (r2f1a@chi-body* (cdr r4091@e*) r4092@r r4093@mr r4094@lex* r4095@rhs* r4096@mod** r40b9@kwd* r4098@exp* r4099@rib r409a@top?)) (if (memv r40bb@t '(export)) ((lambda (r413b@t) ((lambda (r413d@ls/false) (if r413d@ls/false (apply (lambda (r413f@exp-decl*) (r2f1a@chi-body* (cdr r4091@e*) r4092@r r4093@mr r4094@lex* r4095@rhs* r4096@mod** r40b9@kwd* (append r413f@exp-decl* r4098@exp*) r4099@rib r409a@top?)) r413d@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r413b@t))) (r2ebf@syntax-dispatch r413b@t '(_ . each-any)))) r40a5@e) (if (memv r40bb@t '(import)) ((lambda () ((lambda (r4142@module-import? r4144@module-import r4146@library-import) (begin (set! r4142@module-import? (lambda (r4195@e) ((lambda (r4197@t) ((lambda (r4199@ls/false) (if (and r4199@ls/false (apply (lambda (r419b@id) (r2cb4@id? r419b@id)) r4199@ls/false)) (apply (lambda (r419d@id) '#t) r4199@ls/false) ((lambda (r419f@t) ((lambda (r41a1@ls/false) (if r41a1@ls/false (apply (lambda (r41a3@imp*) '#f) r41a1@ls/false) ((lambda (r41a5@t) ((lambda (r41a7@ls/false) (if r41a7@ls/false (apply (lambda () (r2fa8@syntax-violation '#f '"malformed import form" r4195@e)) r41a7@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r41a5@t))) (r2ebf@syntax-dispatch r41a5@t '_))) r419f@t))) (r2ebf@syntax-dispatch r419f@t '(_ . each-any)))) r4197@t))) (r2ebf@syntax-dispatch r4197@t '(_ any)))) r4195@e))) (set! r4144@module-import (lambda (r4173@e r4174@r) ((lambda (r4177@t) ((lambda (r4179@ls/false) (if (and r4179@ls/false (apply (lambda (r417b@id) (r2cb4@id? r417b@id)) r4179@ls/false)) (apply (lambda (r417d@id) (call-with-values (lambda () (r2cdc@syntax-type r417d@id r4174@r)) (lambda (r4185@r4180 r4186@r4182 r4187@r4184) ((lambda (r418b@kwd r418c@value r418d@type) ((lambda (r4191@t) (if (memv r4191@t '($module)) ((lambda (r4193@iface) (values (r2f16@module-interface-exp-id* r4193@iface r417d@id) (r2f0e@module-interface-exp-lab-vec r4193@iface))) r418c@value) (r2fa8@syntax-violation '#f '"invalid import" r4173@e))) r418d@type)) r4187@r4184 r4186@r4182 r4185@r4180)))) r4179@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r4177@t))) (r2ebf@syntax-dispatch r4177@t '(_ any)))) r4173@e))) (set! r4146@library-import (lambda (r4157@e) ((lambda (r4159@t) ((lambda (r415b@ls/false) (if r415b@ls/false (apply (lambda (r415d@ctxt r415e@imp*) (call-with-values (lambda () (r2f24@parse-import-spec* (r2fae@syntax->datum r415e@imp*))) (lambda (r4165@r4162 r4166@r4164) ((lambda (r4169@subst-labels r416a@subst-names) (values (vector-map (lambda (r416d@name) (r2c92@datum->stx r415d@ctxt r416d@name)) r416a@subst-names) r4169@subst-labels)) r4166@r4164 r4165@r4162)))) r415b@ls/false) ((lambda (r416f@t) ((lambda (r4171@ls/false) (if r4171@ls/false (apply (lambda () (r2fa8@syntax-violation '#f '"invalid import form" r4157@e)) r4171@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r416f@t))) (r2ebf@syntax-dispatch r416f@t '_))) r4159@t))) (r2ebf@syntax-dispatch r4159@t '(any . each-any)))) r4157@e))) (begin (call-with-values (lambda () (if (r4142@module-import? r40a5@e) (r4144@module-import r40a5@e r4092@r) (r4146@library-import r40a5@e))) (lambda (r414b@r4148 r414c@r414a) ((lambda (r414f@lab* r4150@id*) (vector-for-each (lambda (r4153@id r4154@lab) (r2c65@extend-rib! r4099@rib r4153@id r4154@lab)) r4150@id* r414f@lab*)) r414c@r414a r414b@r4148))) (r2f1a@chi-body* (cdr r4091@e*) r4092@r r4093@mr r4094@lex* r4095@rhs* r4096@mod** r40b9@kwd* r4098@exp* r4099@rib r409a@top?)))) '#f '#f '#f))) (if r409a@top? (r2f1a@chi-body* (cdr r4091@e*) r4092@r r4093@mr (cons (r2c34@gen-lexical 'dummy) r4094@lex*) (cons (cons 'top-expr r40a5@e) r4095@rhs*) r4096@mod** r40b9@kwd* r4098@exp* r4099@rib r409a@top?) (values r4091@e* r4092@r r4093@mr r4094@lex* r4095@rhs* r4096@mod** r40b9@kwd* r4098@exp*)))))))))))))) r40b5@type)) (if (r2cb4@id? r40b3@kwd) (cons r40b3@kwd r4097@kwd*) r4097@kwd*))) r40af@r40ac r40ae@r40aa r40ad@r40a8)))) (car r4091@e*))))) (set! r2f1c@expand-transformer (lambda (r41a9@expr r41aa@r) ((lambda (r41ad@rtc) ((lambda (r41af@expanded-rhs) (begin (for-each ((lambda (r41b1@mark-visit) (lambda (r41b3@x) (begin (r2ad8@r2979@invoke-library r41b3@x) (r41b1@mark-visit r41b3@x)))) (r2f2c@vis-collector)) (r41ad@rtc)) r41af@expanded-rhs)) ((lambda (r41bd@r41b6 r41be@r41b8 r41bf@r41ba r41c0@r41bc) ((lambda (r41c5@swap) (dynamic-wind r41c5@swap (lambda () (r2ee1@chi-expr r41a9@expr r41aa@r r41aa@r)) r41c5@swap)) (lambda () (begin ((lambda (r41c7@t) (begin (r41bd@r41b6 r41bf@r41ba) (set! r41bf@r41ba r41c7@t))) (r41bd@r41b6)) ((lambda (r41c9@t) (begin (r41be@r41b8 r41c0@r41bc) (set! r41c0@r41bc r41c9@t))) (r41be@r41b8)))))) r2f2a@inv-collector r2f2c@vis-collector r41ad@rtc (lambda (r41cb@x) (values))))) (r2f28@make-collector)))) (set! r2f1e@parse-exports (lambda (r41cd@exp*) ((letrec ((r41cf@f (lambda (r41d1@exp* r41d2@int* r41d3@ext*) (if (null? r41d1@exp*) (begin (if (not (r2cbe@valid-bound-ids? r41d3@ext*)) (r2fa8@syntax-violation 'export '"invalid exports" (r2ef5@find-dups r41d3@ext*)) (void)) (values (map r2fae@syntax->datum r41d3@ext*) r41d2@int*)) ((lambda (r41d7@t) ((lambda (r41d9@ls/false) (if r41d9@ls/false (apply (lambda (r41db@rename r41dc@i* r41dd@e*) (begin (if (not (and (eq? (r2fae@syntax->datum r41db@rename) 'rename) (for-all r2cb4@id? r41dc@i*) (for-all r2cb4@id? r41dd@e*))) (r2fa8@syntax-violation 'export '"invalid export specifier" (car r41d1@exp*)) (void)) (r41cf@f (cdr r41d1@exp*) (append r41dc@i* r41d2@int*) (append r41dd@e* r41d3@ext*)))) r41d9@ls/false) ((lambda (r41e1@t) ((lambda (r41e3@ls/false) (if r41e3@ls/false (apply (lambda (r41e5@ie) (begin (if (not (r2cb4@id? r41e5@ie)) (r2fa8@syntax-violation 'export '"invalid export" r41e5@ie) (void)) (r41cf@f (cdr r41d1@exp*) (cons r41e5@ie r41d2@int*) (cons r41e5@ie r41d3@ext*)))) r41e3@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r41e1@t))) (r2ebf@syntax-dispatch r41e1@t 'any))) r41d7@t))) (r2ebf@syntax-dispatch r41d7@t '(any . #(each (any any)))))) (car r41d1@exp*)))))) r41cf@f) r41cd@exp* '() '()))) (set! r2f20@parse-library-name (lambda (r41e7@spec) ((lambda (r41ea@parse) (begin (set! r41ea@parse (lambda (r41f7@x) ((lambda (r41f9@t) ((lambda (r41fb@ls/false) (if (and r41fb@ls/false (apply (lambda (r41fd@v*) (for-all (lambda (r41ff@x) ((lambda (r4201@x) (and (integer? r4201@x) (exact? r4201@x))) (r2fae@syntax->datum r41ff@x))) r41fd@v*)) r41fb@ls/false)) (apply (lambda (r4203@v*) (values '() (map r2fae@syntax->datum r4203@v*))) r41fb@ls/false) ((lambda (r4205@t) ((lambda (r4207@ls/false) (if (and r4207@ls/false (apply (lambda (r4209@x r420a@rest) (symbol? (r2fae@syntax->datum r4209@x))) r4207@ls/false)) (apply (lambda (r420d@x r420e@rest) (call-with-values (lambda () (r41ea@parse r420e@rest)) (lambda (r4215@r4212 r4216@r4214) ((lambda (r4219@v* r421a@x*) (values (cons (r2fae@syntax->datum r420d@x) r421a@x*) r4219@v*)) r4216@r4214 r4215@r4212)))) r4207@ls/false) ((lambda (r421d@t) ((lambda (r421f@ls/false) (if r421f@ls/false (apply (lambda () (values '() '())) r421f@ls/false) ((lambda (r4221@t) ((lambda (r4223@ls/false) (if r4223@ls/false (apply (lambda () (r2fa8@syntax-violation '#f '"invalid library name" r41e7@spec)) r4223@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r4221@t))) (r2ebf@syntax-dispatch r4221@t '_))) r421d@t))) (r2ebf@syntax-dispatch r421d@t '()))) r4205@t))) (r2ebf@syntax-dispatch r4205@t '(any . any)))) r41f9@t))) (r2ebf@syntax-dispatch r41f9@t '(each-any)))) r41f7@x))) (call-with-values (lambda () (r41ea@parse r41e7@spec)) (lambda (r41ef@r41ec r41f0@r41ee) ((lambda (r41f3@ver* r41f4@name*) (begin (if (null? r41f4@name*) (r2fa8@syntax-violation '#f '"empty library name" r41e7@spec) (void)) (values r41f4@name* r41f3@ver*))) r41f0@r41ee r41ef@r41ec))))) '#f))) (set! r2f22@parse-library (lambda (r4225@e) ((lambda (r4227@t) ((lambda (r4229@ls/false) (if (and r4229@ls/false (apply (lambda (r422b@library r422c@name* r422d@export r422e@exp* r422f@import r4230@imp* r4231@b*) (and (eq? (r2fae@syntax->datum r422d@export) 'export) (eq? (r2fae@syntax->datum r422f@import) 'import) (eq? (r2fae@syntax->datum r422b@library) 'library))) r4229@ls/false)) (apply (lambda (r4239@library r423a@name* r423b@export r423c@exp* r423d@import r423e@imp* r423f@b*) (values r423a@name* r423c@exp* r423e@imp* r423f@b*)) r4229@ls/false) ((lambda (r4247@t) ((lambda (r4249@ls/false) (if r4249@ls/false (apply (lambda () (r2fa8@syntax-violation '#f '"malformed library" r4225@e)) r4249@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r4247@t))) (r2ebf@syntax-dispatch r4247@t '_))) r4227@t))) (r2ebf@syntax-dispatch r4227@t '(any each-any (any . each-any) (any . each-any) . each-any)))) r4225@e))) (set! r2f24@parse-import-spec* ((lambda () ((lambda (r424c@idsyn? r424e@dup-error r4250@merge-substs r4252@exclude* r4254@find* r4256@rem* r4258@remove-dups r425a@parse-library-name r425c@import-library r425e@get-import r4260@add-imports!) (begin (set! r424c@idsyn? (lambda (r4455@x) (symbol? (r2fae@syntax->datum r4455@x)))) (set! r424e@dup-error (lambda (r4453@name) (r2fa8@syntax-violation 'import '"two imports with different bindings" r4453@name))) (set! r4250@merge-substs (lambda (r4441@s r4442@subst) ((lambda (r4446@insert-to-subst) (begin (set! r4446@insert-to-subst (lambda (r4447@a r4448@subst) ((lambda (r444b@name r444c@label) ((lambda (r444f@t) (if r444f@t ((lambda (r4451@x) (if (eq? (cdr r4451@x) r444c@label) r4448@subst (r424e@dup-error r444b@name))) r444f@t) (cons r4447@a r4448@subst))) (assq r444b@name r4448@subst))) (car r4447@a) (cdr r4447@a)))) (if (null? r4441@s) r4442@subst (r4446@insert-to-subst (car r4441@s) (r4250@merge-substs (cdr r4441@s) r4442@subst))))) '#f))) (set! r4252@exclude* (lambda (r4411@sym* r4412@subst) ((lambda (r4416@exclude) (begin (set! r4416@exclude (lambda (r442f@sym r4430@subst) (if (null? r4430@subst) (r2fa8@syntax-violation 'import '"cannot rename unbound identifier" r442f@sym) (if (eq? r442f@sym (caar r4430@subst)) (values (cdar r4430@subst) (cdr r4430@subst)) ((lambda (r4433@a) (call-with-values (lambda () (r4416@exclude r442f@sym (cdr r4430@subst))) (lambda (r4439@r4436 r443a@r4438) ((lambda (r443d@subst r443e@old) (values r443e@old (cons r4433@a r443d@subst))) r443a@r4438 r4439@r4436)))) (car r4430@subst)))))) (if (null? r4411@sym*) (values '() r4412@subst) (call-with-values (lambda () (r4416@exclude (car r4411@sym*) r4412@subst)) (lambda (r441b@r4418 r441c@r441a) ((lambda (r441f@subst r4420@old) (call-with-values (lambda () (r4252@exclude* (cdr r4411@sym*) r441f@subst)) (lambda (r4427@r4424 r4428@r4426) ((lambda (r442b@subst r442c@old*) (values (cons r4420@old r442c@old*) r442b@subst)) r4428@r4426 r4427@r4424)))) r441c@r441a r441b@r4418)))))) '#f))) (set! r4254@find* (lambda (r4409@sym* r440a@subst) (map (lambda (r440d@x) ((lambda (r440f@t) (if r440f@t (cdr r440f@t) (r2fa8@syntax-violation 'import '"cannot find identifier" r440d@x))) (assq r440d@x r440a@subst))) r4409@sym*))) (set! r4256@rem* (lambda (r4401@sym* r4402@subst) ((letrec ((r4405@f (lambda (r4407@subst) (if (null? r4407@subst) '() (if (memq (caar r4407@subst) r4401@sym*) (r4405@f (cdr r4407@subst)) (cons (car r4407@subst) (r4405@f (cdr r4407@subst)))))))) r4405@f) r4402@subst))) (set! r4258@remove-dups (lambda (r43ff@ls) (if (null? r43ff@ls) '() (if (memq (car r43ff@ls) (cdr r43ff@ls)) (r4258@remove-dups (cdr r43ff@ls)) (cons (car r43ff@ls) (r4258@remove-dups (cdr r43ff@ls))))))) (set! r425a@parse-library-name (lambda (r4317@spec) ((lambda (r431a@subversion? r431c@subversion-pred r431e@version-pred) (begin (set! r431a@subversion? (lambda (r43fb@x) ((lambda (r43fd@x) (and (integer? r43fd@x) (exact? r43fd@x) (>= r43fd@x '0))) (r2fae@syntax->datum r43fb@x)))) (set! r431c@subversion-pred (lambda (r439b@x*) ((lambda (r439d@t) ((lambda (r439f@ls/false) (if (and r439f@ls/false (apply (lambda (r43a1@n) (r431a@subversion? r43a1@n)) r439f@ls/false)) (apply (lambda (r43a3@n) (lambda (r43a5@x) (= r43a5@x (r2fae@syntax->datum r43a3@n)))) r439f@ls/false) ((lambda (r43a7@t) ((lambda (r43a9@ls/false) (if (and r43a9@ls/false (apply (lambda (r43ab@p? r43ac@sub*) (eq? (r2fae@syntax->datum r43ab@p?) 'and)) r43a9@ls/false)) (apply (lambda (r43af@p? r43b0@sub*) ((lambda (r43b3@p*) (lambda (r43b5@x) (for-all (lambda (r43b7@p) (r43b7@p r43b5@x)) r43b3@p*))) (map r431c@subversion-pred r43b0@sub*))) r43a9@ls/false) ((lambda (r43b9@t) ((lambda (r43bb@ls/false) (if (and r43bb@ls/false (apply (lambda (r43bd@p? r43be@sub*) (eq? (r2fae@syntax->datum r43bd@p?) 'or)) r43bb@ls/false)) (apply (lambda (r43c1@p? r43c2@sub*) ((lambda (r43c5@p*) (lambda (r43c7@x) (exists (lambda (r43c9@p) (r43c9@p r43c7@x)) r43c5@p*))) (map r431c@subversion-pred r43c2@sub*))) r43bb@ls/false) ((lambda (r43cb@t) ((lambda (r43cd@ls/false) (if (and r43cd@ls/false (apply (lambda (r43cf@p? r43d0@sub) (eq? (r2fae@syntax->datum r43cf@p?) 'not)) r43cd@ls/false)) (apply (lambda (r43d3@p? r43d4@sub) ((lambda (r43d7@p) (lambda (r43d9@x) (not (r43d7@p r43d9@x)))) (r431c@subversion-pred r43d4@sub))) r43cd@ls/false) ((lambda (r43db@t) ((lambda (r43dd@ls/false) (if (and r43dd@ls/false (apply (lambda (r43df@p? r43e0@n) (and (eq? (r2fae@syntax->datum r43df@p?) '<=) (r431a@subversion? r43e0@n))) r43dd@ls/false)) (apply (lambda (r43e3@p? r43e4@n) (lambda (r43e7@x) (<= r43e7@x (r2fae@syntax->datum r43e4@n)))) r43dd@ls/false) ((lambda (r43e9@t) ((lambda (r43eb@ls/false) (if (and r43eb@ls/false (apply (lambda (r43ed@p? r43ee@n) (and (eq? (r2fae@syntax->datum r43ed@p?) '>=) (r431a@subversion? r43ee@n))) r43eb@ls/false)) (apply (lambda (r43f1@p? r43f2@n) (lambda (r43f5@x) (>= r43f5@x (r2fae@syntax->datum r43f2@n)))) r43eb@ls/false) ((lambda (r43f7@t) ((lambda (r43f9@ls/false) (if r43f9@ls/false (apply (lambda () (r2fa8@syntax-violation 'import '"invalid sub-version spec" r4317@spec r439b@x*)) r43f9@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r43f7@t))) (r2ebf@syntax-dispatch r43f7@t '_))) r43e9@t))) (r2ebf@syntax-dispatch r43e9@t '(any any)))) r43db@t))) (r2ebf@syntax-dispatch r43db@t '(any any)))) r43cb@t))) (r2ebf@syntax-dispatch r43cb@t '(any any)))) r43b9@t))) (r2ebf@syntax-dispatch r43b9@t '(any . each-any)))) r43a7@t))) (r2ebf@syntax-dispatch r43a7@t '(any . each-any)))) r439d@t))) (r2ebf@syntax-dispatch r439d@t 'any))) r439b@x*))) (set! r431e@version-pred (lambda (r434b@x*) ((lambda (r434d@t) ((lambda (r434f@ls/false) (if r434f@ls/false (apply (lambda () (lambda (r4351@x) '#t)) r434f@ls/false) ((lambda (r4353@t) ((lambda (r4355@ls/false) (if (and r4355@ls/false (apply (lambda (r4357@c r4358@ver*) (eq? (r2fae@syntax->datum r4357@c) 'and)) r4355@ls/false)) (apply (lambda (r435b@c r435c@ver*) ((lambda (r435f@p*) (lambda (r4361@x) (for-all (lambda (r4363@p) (r4363@p r4361@x)) r435f@p*))) (map r431e@version-pred r435c@ver*))) r4355@ls/false) ((lambda (r4365@t) ((lambda (r4367@ls/false) (if (and r4367@ls/false (apply (lambda (r4369@c r436a@ver*) (eq? (r2fae@syntax->datum r4369@c) 'or)) r4367@ls/false)) (apply (lambda (r436d@c r436e@ver*) ((lambda (r4371@p*) (lambda (r4373@x) (exists (lambda (r4375@p) (r4375@p r4373@x)) r4371@p*))) (map r431e@version-pred r436e@ver*))) r4367@ls/false) ((lambda (r4377@t) ((lambda (r4379@ls/false) (if (and r4379@ls/false (apply (lambda (r437b@c r437c@ver) (eq? (r2fae@syntax->datum r437b@c) 'not)) r4379@ls/false)) (apply (lambda (r437f@c r4380@ver) ((lambda (r4383@p) (lambda (r4385@x) (not (r4383@p r4385@x)))) (r431e@version-pred r4380@ver))) r4379@ls/false) ((lambda (r4387@t) ((lambda (r4389@ls/false) (if r4389@ls/false (apply (lambda (r438b@sub*) ((lambda (r438d@p*) (lambda (r438f@x) ((letrec ((r4391@f (lambda (r4393@p* r4394@x) (if (null? r4393@p*) '#t (if (null? r4394@x) '#f (and ((car r4393@p*) (car r4394@x)) (r4391@f (cdr r4393@p*) (cdr r4394@x)))))))) r4391@f) r438d@p* r438f@x))) (map r431c@subversion-pred r438b@sub*))) r4389@ls/false) ((lambda (r4397@t) ((lambda (r4399@ls/false) (if r4399@ls/false (apply (lambda () (r2fa8@syntax-violation 'import '"invalid version spec" r4317@spec r434b@x*)) r4399@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r4397@t))) (r2ebf@syntax-dispatch r4397@t '_))) r4387@t))) (r2ebf@syntax-dispatch r4387@t 'each-any))) r4377@t))) (r2ebf@syntax-dispatch r4377@t '(any any)))) r4365@t))) (r2ebf@syntax-dispatch r4365@t '(any . each-any)))) r4353@t))) (r2ebf@syntax-dispatch r4353@t '(any . each-any)))) r434d@t))) (r2ebf@syntax-dispatch r434d@t '()))) r434b@x*))) ((letrec ((r431f@f (lambda (r4321@x) ((lambda (r4323@t) ((lambda (r4325@ls/false) (if r4325@ls/false (apply (lambda (r4327@version-spec*) (values '() (r431e@version-pred r4327@version-spec*))) r4325@ls/false) ((lambda (r4329@t) ((lambda (r432b@ls/false) (if (and r432b@ls/false (apply (lambda (r432d@x r432e@x*) (r424c@idsyn? r432d@x)) r432b@ls/false)) (apply (lambda (r4331@x r4332@x*) (call-with-values (lambda () (r431f@f r4332@x*)) (lambda (r4339@r4336 r433a@r4338) ((lambda (r433d@pred r433e@name) (values (cons (r2fae@syntax->datum r4331@x) r433e@name) r433d@pred)) r433a@r4338 r4339@r4336)))) r432b@ls/false) ((lambda (r4341@t) ((lambda (r4343@ls/false) (if r4343@ls/false (apply (lambda () (values '() (lambda (r4345@x) '#t))) r4343@ls/false) ((lambda (r4347@t) ((lambda (r4349@ls/false) (if r4349@ls/false (apply (lambda () (r2fa8@syntax-violation '#f '"invalid import spec" r4317@spec)) r4349@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r4347@t))) (r2ebf@syntax-dispatch r4347@t '_))) r4341@t))) (r2ebf@syntax-dispatch r4341@t '()))) r4329@t))) (r2ebf@syntax-dispatch r4329@t '(any . any)))) r4323@t))) (r2ebf@syntax-dispatch r4323@t '(each-any)))) r4321@x)))) r431f@f) r4317@spec))) '#f '#f '#f))) (set! r425c@import-library (lambda (r4307@spec*) (call-with-values (lambda () (r425a@parse-library-name r4307@spec*)) (lambda (r430d@r430a r430e@r430c) ((lambda (r4311@pred r4312@name) (begin (if (null? r4312@name) (r2fa8@syntax-violation 'import '"empty library name" r4307@spec*) (void)) ((lambda (r4315@lib) (begin (if (not r4315@lib) (r2fa8@syntax-violation 'import '"cannot find library with required name" r4312@name) (void)) (if (not (r4311@pred (r2aa9@r291b@library-version r4315@lib))) (r2fa8@syntax-violation 'import '"library does not satisfy version specification" r4307@spec* r4315@lib) (void)) ((r2f2e@imp-collector) r4315@lib) (r2aad@r2923@library-subst r4315@lib))) (r2ad1@r296b@find-library-by-name r4312@name)))) r430e@r430c r430d@r430a))))) (set! r425e@get-import (lambda (r4279@spec) ((lambda (r427b@t) ((lambda (r427d@ls/false) (if (and r427d@ls/false (apply (lambda (r427f@x r4280@x*) (not (memq (r2fae@syntax->datum r427f@x) '(for rename except only prefix library)))) r427d@ls/false)) (apply (lambda (r4283@x r4284@x*) (r425c@import-library (cons r4283@x r4284@x*))) r427d@ls/false) ((lambda (r4287@t) ((lambda (r4289@ls/false) (if (and r4289@ls/false (apply (lambda (r428b@rename r428c@isp r428d@old* r428e@new*) (and (eq? (r2fae@syntax->datum r428b@rename) 'rename) (for-all r424c@idsyn? r428d@old*) (for-all r424c@idsyn? r428e@new*))) r4289@ls/false)) (apply (lambda (r4293@rename r4294@isp r4295@old* r4296@new*) ((lambda (r429b@subst r429c@old* r429d@new*) ((lambda (r42a1@old-label*) ((lambda (r42a3@subst) (r4250@merge-substs (map cons r429d@new* r42a1@old-label*) r42a3@subst)) (r4256@rem* r429c@old* r429b@subst))) (r4254@find* r429c@old* r429b@subst))) (r425e@get-import r4294@isp) (map r2fae@syntax->datum r4295@old*) (map r2fae@syntax->datum r4296@new*))) r4289@ls/false) ((lambda (r42a5@t) ((lambda (r42a7@ls/false) (if (and r42a7@ls/false (apply (lambda (r42a9@except r42aa@isp r42ab@sym*) (and (eq? (r2fae@syntax->datum r42a9@except) 'except) (for-all r424c@idsyn? r42ab@sym*))) r42a7@ls/false)) (apply (lambda (r42af@except r42b0@isp r42b1@sym*) ((lambda (r42b5@subst) (r4256@rem* (map r2fae@syntax->datum r42b1@sym*) r42b5@subst)) (r425e@get-import r42b0@isp))) r42a7@ls/false) ((lambda (r42b7@t) ((lambda (r42b9@ls/false) (if (and r42b9@ls/false (apply (lambda (r42bb@only r42bc@isp r42bd@sym*) (and (eq? (r2fae@syntax->datum r42bb@only) 'only) (for-all r424c@idsyn? r42bd@sym*))) r42b9@ls/false)) (apply (lambda (r42c1@only r42c2@isp r42c3@sym*) ((lambda (r42c7@subst r42c8@sym*) ((lambda (r42cb@sym*) ((lambda (r42cd@lab*) (map cons r42cb@sym* r42cd@lab*)) (r4254@find* r42cb@sym* r42c7@subst))) (r4258@remove-dups r42c8@sym*))) (r425e@get-import r42c2@isp) (map r2fae@syntax->datum r42c3@sym*))) r42b9@ls/false) ((lambda (r42cf@t) ((lambda (r42d1@ls/false) (if (and r42d1@ls/false (apply (lambda (r42d3@prefix r42d4@isp r42d5@p) (and (eq? (r2fae@syntax->datum r42d3@prefix) 'prefix) (r424c@idsyn? r42d5@p))) r42d1@ls/false)) (apply (lambda (r42d9@prefix r42da@isp r42db@p) ((lambda (r42df@subst r42e0@prefix) (map (lambda (r42e3@x) (cons (string->symbol (string-append r42e0@prefix (symbol->string (car r42e3@x)))) (cdr r42e3@x))) r42df@subst)) (r425e@get-import r42da@isp) (symbol->string (r2fae@syntax->datum r42db@p)))) r42d1@ls/false) ((lambda (r42e5@t) ((lambda (r42e7@ls/false) (if (and r42e7@ls/false (apply (lambda (r42e9@library r42ea@spec*) (eq? (r2fae@syntax->datum r42e9@library) 'library)) r42e7@ls/false)) (apply (lambda (r42ed@library r42ee@spec*) (r425c@import-library r42ee@spec*)) r42e7@ls/false) ((lambda (r42f1@t) ((lambda (r42f3@ls/false) (if (and r42f3@ls/false (apply (lambda (r42f5@for r42f6@isp r42f7@rest) (eq? (r2fae@syntax->datum r42f5@for) 'for)) r42f3@ls/false)) (apply (lambda (r42fb@for r42fc@isp r42fd@rest) (r425e@get-import r42fc@isp)) r42f3@ls/false) ((lambda (r4301@t) ((lambda (r4303@ls/false) (if r4303@ls/false (apply (lambda (r4305@spec) (r2fa8@syntax-violation 'import '"invalid import spec" r4305@spec)) r4303@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r4301@t))) (r2ebf@syntax-dispatch r4301@t 'any))) r42f1@t))) (r2ebf@syntax-dispatch r42f1@t '(any any . any)))) r42e5@t))) (r2ebf@syntax-dispatch r42e5@t '(any each-any)))) r42cf@t))) (r2ebf@syntax-dispatch r42cf@t '(any any any)))) r42b7@t))) (r2ebf@syntax-dispatch r42b7@t '(any any . each-any)))) r42a5@t))) (r2ebf@syntax-dispatch r42a5@t '(any any . each-any)))) r4287@t))) (r2ebf@syntax-dispatch r4287@t '(any any . #(each (any any)))))) r427b@t))) (r2ebf@syntax-dispatch r427b@t '(any . each-any)))) r4279@spec))) (set! r4260@add-imports! (lambda (r4269@imp r426a@h) ((lambda (r426d@subst) (for-each (lambda (r426f@x) ((lambda (r4271@name r4272@label) ((lambda (r4275@t) (if r4275@t ((lambda (r4277@l) (if (not (eq? r4277@l r4272@label)) (r424e@dup-error r4271@name) (void))) r4275@t) (hashtable-set! r426a@h r4271@name r4272@label))) (hashtable-ref r426a@h r4271@name '#f))) (car r426f@x) (cdr r426f@x))) r426d@subst)) (r425e@get-import r4269@imp)))) (lambda (r4261@imp*) ((letrec ((r4263@f (lambda (r4265@imp* r4266@h) (if (null? r4265@imp*) (hashtable-entries r4266@h) (begin (r4260@add-imports! (car r4265@imp*) r4266@h) (r4263@f (cdr r4265@imp*) r4266@h)))))) r4263@f) r4261@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! r2f26@make-top-rib (lambda (r4457@names r4458@labels) ((lambda (r445b@rib) (begin (vector-for-each (lambda (r445d@name r445e@label) (begin (if (not (symbol? r445d@name)) (error 'make-top-rib '"BUG: not a symbol" r445d@name) (void)) (r2c67@extend-rib/nc! r445b@rib (r2c7e@make-stx r445d@name r2c30@top-mark* '() '()) r445e@label))) r4457@names r4458@labels) r445b@rib)) (r2c63@make-empty-rib)))) (set! r2f28@make-collector (lambda () ((lambda (r4461@ls) (lambda r4465 ((lambda (r4466) (if (= r4466 '0) (apply (lambda () r4461@ls) r4465) (if (= r4466 '1) (apply (lambda (r4463@x) (set! r4461@ls (r2c29@set-cons r4463@x r4461@ls))) r4465) (error 'apply '"invalid arg count")))) (length r4465)))) '()))) (set! r2f2a@inv-collector (r285e@r2788@make-parameter (lambda r4467@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (r4469@x) (begin (if (not (procedure? r4469@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" r4469@x) (void)) r4469@x)))) (set! r2f2c@vis-collector (r285e@r2788@make-parameter (lambda r446b@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (r446d@x) (begin (if (not (procedure? r446d@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" r446d@x) (void)) r446d@x)))) (set! r2f2e@imp-collector (r285e@r2788@make-parameter (lambda r446f@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (r4471@x) (begin (if (not (procedure? r4471@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" r4471@x) (void)) r4471@x)))) (set! r2f30@chi-library-internal (lambda (r4473@e* r4474@rib r4475@top?) (call-with-values (lambda () (r2f1a@chi-body* r4473@e* '() '() '() '() '() '() '() r4474@rib r4475@top?)) (lambda (r4489@r447a r448a@r447c r448b@r447e r448c@r4480 r448d@r4482 r448e@r4484 r448f@r4486 r4490@r4488) ((lambda (r4499@exp* r449a@_kwd* r449b@mod** r449c@rhs* r449d@lex* r449e@mr r449f@r r44a0@e*) (values (append (apply append (reverse r449b@mod**)) r44a0@e*) r449f@r r449e@mr (reverse r449d@lex*) (reverse r449c@rhs*) r4499@exp*)) r4490@r4488 r448f@r4486 r448e@r4484 r448d@r4482 r448c@r4480 r448b@r447e r448a@r447c r4489@r447a))))) (set! r2f32@chi-interaction-expr (lambda (r44a9@e r44aa@rib r44ab@r) (call-with-values (lambda () (r2f1a@chi-body* (list r44a9@e) r44ab@r r44ab@r '() '() '() '() '() r44aa@rib '#t)) (lambda (r44bf@r44b0 r44c0@r44b2 r44c1@r44b4 r44c2@r44b6 r44c3@r44b8 r44c4@r44ba r44c5@r44bc r44c6@r44be) ((lambda (r44cf@_exp* r44d0@_kwd* r44d1@mod** r44d2@rhs* r44d3@lex* r44d4@mr r44d5@r r44d6@e*) ((lambda (r44df@e*) ((lambda (r44e1@e) (values r44e1@e r44d5@r)) (if (null? r44df@e*) (r2c14@r2b84@build-void) (if (null? (cdr r44df@e*)) (car r44df@e*) (r2c13@r2b82@build-sequence '#f r44df@e*))))) (r2eef@expand-interaction-rhs*/init* (reverse r44d3@lex*) (reverse r44d2@rhs*) (append (apply append (reverse r44d1@mod**)) r44d6@e*) r44d5@r r44d4@mr))) r44c6@r44be r44c5@r44bc r44c4@r44ba r44c3@r44b8 r44c2@r44b6 r44c1@r44b4 r44c0@r44b2 r44bf@r44b0))))) (set! r2f34@library-body-expander (lambda (r44e3@name r44e4@main-exp* r44e5@imp* r44e6@b* r44e7@top?) ((lambda (r44ee@itc) (begin (set! r44ee@itc (r2f28@make-collector)) ((lambda (r44f7@r44f0 r44f8@r44f2 r44f9@r44f4 r44fa@r44f6) ((lambda (r44ff@swap) (dynamic-wind r44ff@swap (lambda () (call-with-values (lambda () (r2f24@parse-import-spec* r44e5@imp*)) (lambda (r4505@r4502 r4506@r4504) ((lambda (r4509@subst-labels r450a@subst-names) ((lambda (r450d@rib) ((lambda (r4510@wrap) (begin (set! r4510@wrap (lambda (r458b@x) (r2c7e@make-stx r458b@x r2c30@top-mark* (list r450d@rib) '()))) ((lambda (r4511@b* r4512@main-exp* r4513@rtc r4514@vtc) ((lambda (r4521@r451a r4522@r451c r4523@r451e r4524@r4520) ((lambda (r4529@swap) (dynamic-wind r4529@swap (lambda () (call-with-values (lambda () (r2f30@chi-library-internal r4511@b* r450d@rib r44e7@top?)) (lambda (r4537@r452c r4538@r452e r4539@r4530 r453a@r4532 r453b@r4534 r453c@r4536) ((lambda (r4543@internal-exp* r4544@rhs* r4545@lex* r4546@mr r4547@r r4548@init*) (call-with-values (lambda () (r2f1e@parse-exports (append r4512@main-exp* r4543@internal-exp*))) (lambda (r4553@r4550 r4554@r4552) ((lambda (r4557@exp-id* r4558@exp-name*) (begin (r2c6b@seal-rib! r450d@rib) ((lambda (r455b@init*) ((lambda (r455d@rhs*) ((lambda () (begin (r2c6d@unseal-rib! r450d@rib) ((lambda (r455f@loc* r4560@export-subst) ((lambda (r4564@errstr) (begin (set! r4564@errstr '"attempt to export mutated variable") (call-with-values (lambda () (r2f94@make-export-env/macros r4545@lex* r455f@loc* r4547@r)) (lambda (r456b@r4566 r456c@r4568 r456d@r456a) ((lambda (r4571@macro* r4572@global* r4573@export-env) (begin (for-each (lambda (r4577@s) ((lambda (r4579@name r457a@label) ((lambda (r457d@p) (if r457d@p ((lambda (r457f@b) ((lambda (r4581@type) (if (eq? r4581@type 'mutable) (r2fa8@syntax-violation 'export r4564@errstr r4579@name) (void))) (car r457f@b))) (cdr r457d@p)) (void))) (assq r457a@label r4573@export-env))) (car r4577@s) (cdr r4577@s))) r4560@export-subst) ((lambda (r4583@invoke-body r4584@invoke-definitions) (values (r44ee@itc) (r4513@rtc) (r4514@vtc) (r2c13@r2b82@build-sequence '#f (append r4584@invoke-definitions (list r4583@invoke-body))) r4571@macro* r4560@export-subst r4573@export-env)) (r2c16@r2b88@build-letrec* '#f r4545@lex* r455d@rhs* (r2f90@build-exports r4572@global* r455b@init*)) (map r2c0f@r2adf@build-global-define (map cdr r4572@global*))))) r456d@r456a r456c@r4568 r456b@r4566))))) '#f)) (map r2c36@gen-global r4545@lex*) (r2f92@make-export-subst r4558@exp-name* r4557@exp-id*)))))) (r2ef1@chi-rhs* r4544@rhs* r4547@r r4546@mr))) (r2edd@chi-expr* r4548@init* r4547@r r4546@mr)))) r4554@r4552 r4553@r4550)))) r453c@r4536 r453b@r4534 r453a@r4532 r4539@r4530 r4538@r452e r4537@r452c)))) r4529@swap)) (lambda () (begin ((lambda (r4587@t) (begin (r4521@r451a r4523@r451e) (set! r4523@r451e r4587@t))) (r4521@r451a)) ((lambda (r4589@t) (begin (r4522@r451c r4524@r4520) (set! r4524@r4520 r4589@t))) (r4522@r451c)))))) r2f2a@inv-collector r2f2c@vis-collector r4513@rtc r4514@vtc)) (map r4510@wrap r44e6@b*) (map r4510@wrap r44e4@main-exp*) (r2f28@make-collector) (r2f28@make-collector)))) '#f)) (r2f26@make-top-rib r450a@subst-names r4509@subst-labels))) r4506@r4504 r4505@r4502)))) r44ff@swap)) (lambda () (begin ((lambda (r458d@t) (begin (r44f7@r44f0 r44f9@r44f4) (set! r44f9@r44f4 r458d@t))) (r44f7@r44f0)) ((lambda (r458f@t) (begin (r44f8@r44f2 r44fa@r44f6) (set! r44fa@r44f6 r458f@t))) (r44f8@r44f2)))))) r2f2e@imp-collector r2fb6@top-level-context r44ee@itc '#f))) '#f))) (set! r2f36@core-library-expander (lambda (r4591@e r4592@verify-name) (call-with-values (lambda () (r2f22@parse-library r4591@e)) (lambda (r459d@r4596 r459e@r4598 r459f@r459a r45a0@r459c) ((lambda (r45a5@b* r45a6@imp* r45a7@exp* r45a8@name*) (call-with-values (lambda () (r2f20@parse-library-name r45a8@name*)) (lambda (r45b1@r45ae r45b2@r45b0) ((lambda (r45b5@ver r45b6@name) (begin (r4592@verify-name r45b6@name) (call-with-values (lambda () (r2f34@library-body-expander r45b6@name r45a7@exp* r45a6@imp* r45a5@b* '#f)) (lambda (r45c7@r45ba r45c8@r45bc r45c9@r45be r45ca@r45c0 r45cb@r45c2 r45cc@r45c4 r45cd@r45c6) ((lambda (r45d5@export-env r45d6@export-subst r45d7@visit-code r45d8@invoke-code r45d9@visit-req* r45da@invoke-req* r45db@imp*) (values r45b6@name r45b5@ver r45db@imp* r45da@invoke-req* r45d9@visit-req* r45d8@invoke-code r45d7@visit-code r45d6@export-subst r45d5@export-env)) r45cd@r45c6 r45cc@r45c4 r45cb@r45c2 r45ca@r45c0 r45c9@r45be r45c8@r45bc r45c7@r45ba))))) r45b2@r45b0 r45b1@r45ae)))) r45a0@r459c r459f@r459a r459e@r4598 r459d@r4596))))) (set! r2f38@parse-top-level-program (lambda (r45e3@e*) ((lambda (r45e5@t) ((lambda (r45e7@ls/false) (if (and r45e7@ls/false (apply (lambda (r45e9@import r45ea@imp* r45eb@b*) (eq? (r2fae@syntax->datum r45e9@import) 'import)) r45e7@ls/false)) (apply (lambda (r45ef@import r45f0@imp* r45f1@b*) (values r45f0@imp* r45f1@b*)) r45e7@ls/false) ((lambda (r45f5@t) ((lambda (r45f7@ls/false) (if (and r45f7@ls/false (apply (lambda (r45f9@import r45fa@x r45fb@y) (eq? (r2fae@syntax->datum r45f9@import) 'import)) r45f7@ls/false)) (apply (lambda (r45ff@import r4600@x r4601@y) (r2fa8@syntax-violation 'expander '"invalid syntax of top-level program" (r2cae@syntax-car r45e3@e*))) r45f7@ls/false) ((lambda (r4605@t) ((lambda (r4607@ls/false) (if r4607@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) r4607@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r4605@t))) (r2ebf@syntax-dispatch r4605@t '_))) r45f5@t))) (r2ebf@syntax-dispatch r45f5@t '((any . any) . any)))) r45e5@t))) (r2ebf@syntax-dispatch r45e5@t '((any . each-any) . each-any)))) r45e3@e*))) (set! r2f3a@top-level-expander (lambda (r4609@e*) (call-with-values (lambda () (r2f38@parse-top-level-program r4609@e*)) (lambda (r460f@r460c r4610@r460e) ((lambda (r4613@b* r4614@imp*) (call-with-values (lambda () (r2f34@library-body-expander '() '() r4614@imp* r4613@b* '#t)) (lambda (r4625@r4618 r4626@r461a r4627@r461c r4628@r461e r4629@r4620 r462a@r4622 r462b@r4624) ((lambda (r4633@export-env r4634@export-subst r4635@visit-code r4636@invoke-code r4637@visit-req* r4638@invoke-req* r4639@imp*) (values r4638@invoke-req* r4636@invoke-code)) r462b@r4624 r462a@r4622 r4629@r4620 r4628@r461e r4627@r461c r4626@r461a r4625@r4618)))) r4610@r460e r460f@r460c))))) (set! r2f40@r2f3b (make-record-type-descriptor 'env '#f 'r2f3e '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! r2f42@r2f3d '#f) (set! r2f44@r2f3c (make-record-constructor-descriptor r2f40@r2f3b '#f r2f42@r2f3d)) (set! r2f47@env? (record-predicate r2f40@r2f3b)) (set! r2f49@make-env (record-constructor r2f44@r2f3c)) (set! r2f4b@env-names (record-accessor r2f40@r2f3b '0)) (set! r2f4d@env-labels (record-accessor r2f40@r2f3b '1)) (set! r2f4f@env-itc (record-accessor r2f40@r2f3b '2)) (set! r2f51@set-env-names! (record-mutator r2f40@r2f3b '0)) (set! r2f53@set-env-labels! (record-mutator r2f40@r2f3b '1)) (set! r2f55@set-env-itc! (record-mutator r2f40@r2f3b '2)) (set! r2f57@rp (r285b@r2782@make-record-printer 'env (lambda (r4641@x r4642@p r4643@wr) (display '"#<environment>" r4642@p)))) (set! r2f5d@r2f58 (make-record-type-descriptor 'interaction-env '#f 'r2f5b '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! r2f5f@r2f5a '#f) (set! r2f61@r2f59 (make-record-constructor-descriptor r2f5d@r2f58 '#f r2f5f@r2f5a)) (set! r2f64@interaction-env? (record-predicate r2f5d@r2f58)) (set! r2f66@make-interaction-env (record-constructor r2f61@r2f59)) (set! r2f68@interaction-env-rib (record-accessor r2f5d@r2f58 '0)) (set! r2f6a@interaction-env-r (record-accessor r2f5d@r2f58 '1)) (set! r2f6c@interaction-env-locs (record-accessor r2f5d@r2f58 '2)) (set! r2f6e@set-interaction-env-rib! (record-mutator r2f5d@r2f58 '0)) (set! r2f70@set-interaction-env-r! (record-mutator r2f5d@r2f58 '1)) (set! r2f72@set-interaction-env-locs! (record-mutator r2f5d@r2f58 '2)) (set! r2f74@rp (r285b@r2782@make-record-printer 'interaction-env (lambda (r4647@x r4648@p r4649@wr) (display '"#<environment>" r4648@p)))) (set! r2f76@interaction-environment-symbols (lambda () (r2f7e@environment-symbols (r2fb4@interaction-environment)))) (set! r2f78@environment-bindings (lambda (r464d@e) (vector->list (vector-map (lambda (r464f@name r4650@label) (r2f7a@parse-binding (cons r464f@name (r2ad7@r2977@imported-label->binding r4650@label)))) (r2f4b@env-names r464d@e) (r2f4d@env-labels r464d@e))))) (set! r2f7a@parse-binding (lambda (r4653@b) (cons (car r4653@b) ((lambda (r4655@t) (if (memv r4655@t '(core-prim global)) 'procedure (if (memv r4655@t '(core-macro macro global-macro)) 'syntax (if (memv r4655@t '($core-rtd)) 'record (if (eq? (car r4653@b) (cadr r4653@b)) 'syntax 'unknown))))) (cadr r4653@b))))) (set! r2f7c@environment? (lambda (r4657@x) (or (r2f47@env? r4657@x) (r2f64@interaction-env? r4657@x)))) (set! r2f7e@environment-symbols (lambda (r4659@x) (if (r2f47@env? r4659@x) (vector->list (r2f4b@env-names r4659@x)) (if (r2f64@interaction-env? r4659@x) (map values (r2c4f@rib-sym* (r2f68@interaction-env-rib r4659@x))) (assertion-violation 'environment-symbols '"not an environment" r4659@x))))) (set! r2f80@environment (lambda r465b@imp* ((lambda (r465d@itc) ((lambda (r4663@r4660 r4664@r4662) ((lambda (r4667@swap) (dynamic-wind r4667@swap (lambda () (call-with-values (lambda () (r2f24@parse-import-spec* r465b@imp*)) (lambda (r466d@r466a r466e@r466c) ((lambda (r4671@subst-labels r4672@subst-names) (r2f49@make-env r4672@subst-names r4671@subst-labels r465d@itc)) r466e@r466c r466d@r466a)))) r4667@swap)) (lambda () ((lambda (r4675@t) (begin (r4663@r4660 r4664@r4662) (set! r4664@r4662 r4675@t))) (r4663@r4660))))) r2f2e@imp-collector r465d@itc)) (r2f28@make-collector)))) (set! r2f82@null-environment (lambda (r4677@n) (begin (if (not (eqv? r4677@n '5)) (assertion-violation 'null-environment '"not 5" r4677@n) (void)) (r2f80@environment '(psyntax null-environment-5))))) (set! r2f84@scheme-report-environment (lambda (r4679@n) (begin (if (not (eqv? r4679@n '5)) (assertion-violation 'scheme-report-environment '"not 5" r4679@n) (void)) (r2f80@environment '(psyntax scheme-report-environment-5))))) (set! r2f86@expand (lambda (r467b@x r467c@env) (if (r2f47@env? r467c@env) ((lambda (r467f@rib) ((lambda (r4681@x r4682@itc r4683@rtc r4684@vtc) ((lambda (r4689@x) (begin (r2c6b@seal-rib! r467f@rib) (values r4689@x (r4683@rtc)))) ((lambda (r469b@r468c r469c@r468e r469d@r4690 r469e@r4692 r469f@r4694 r46a0@r4696 r46a1@r4698 r46a2@r469a) ((lambda (r46ab@swap) (dynamic-wind r46ab@swap (lambda () (r2ee1@chi-expr r4681@x '() '())) r46ab@swap)) (lambda () (begin ((lambda (r46ad@t) (begin (r469b@r468c r469f@r4694) (set! r469f@r4694 r46ad@t))) (r469b@r468c)) ((lambda (r46af@t) (begin (r469c@r468e r46a0@r4696) (set! r46a0@r4696 r46af@t))) (r469c@r468e)) ((lambda (r46b1@t) (begin (r469d@r4690 r46a1@r4698) (set! r46a1@r4698 r46b1@t))) (r469d@r4690)) ((lambda (r46b3@t) (begin (r469e@r4692 r46a2@r469a) (set! r46a2@r469a r46b3@t))) (r469e@r4692)))))) r2fb6@top-level-context r2f2a@inv-collector r2f2c@vis-collector r2f2e@imp-collector '#f r4683@rtc r4684@vtc r4682@itc))) (r2c7e@make-stx r467b@x r2c30@top-mark* (list r467f@rib) '()) (r2f4f@env-itc r467c@env) (r2f28@make-collector) (r2f28@make-collector))) (r2f26@make-top-rib (r2f4b@env-names r467c@env) (r2f4d@env-labels r467c@env))) (if (r2f64@interaction-env? r467c@env) ((lambda (r46b5@rib r46b6@r r46b7@rtc) ((lambda (r46bb@x) (call-with-values (lambda () ((lambda (r46d1@r46c2 r46d2@r46c4 r46d3@r46c6 r46d4@r46c8 r46d5@r46ca r46d6@r46cc r46d7@r46ce r46d8@r46d0) ((lambda (r46e1@swap) (dynamic-wind r46e1@swap (lambda () (r2f32@chi-interaction-expr r46bb@x r46b5@rib r46b6@r)) r46e1@swap)) (lambda () (begin ((lambda (r46e3@t) (begin (r46d1@r46c2 r46d5@r46ca) (set! r46d5@r46ca r46e3@t))) (r46d1@r46c2)) ((lambda (r46e5@t) (begin (r46d2@r46c4 r46d6@r46cc) (set! r46d6@r46cc r46e5@t))) (r46d2@r46c4)) ((lambda (r46e7@t) (begin (r46d3@r46c6 r46d7@r46ce) (set! r46d7@r46ce r46e7@t))) (r46d3@r46c6)) ((lambda (r46e9@t) (begin (r46d4@r46c8 r46d8@r46d0) (set! r46d8@r46d0 r46e9@t))) (r46d4@r46c8)))))) r2fb6@top-level-context r2f2a@inv-collector r2f2c@vis-collector r2f2e@imp-collector r467c@env r46b7@rtc (r2f28@make-collector) (r2f28@make-collector))) (lambda (r46eb@r46be r46ec@r46c0) ((lambda (r46ef@r^ r46f0@e) (begin (r2f70@set-interaction-env-r! r467c@env r46ef@r^) (values r46f0@e (r46b7@rtc)))) r46ec@r46c0 r46eb@r46be)))) (r2c7e@make-stx r467b@x r2c30@top-mark* (list r46b5@rib) '()))) (r2f68@interaction-env-rib r467c@env) (r2f6a@interaction-env-r r467c@env) (r2f28@make-collector)) (assertion-violation 'expand '"not an environment" r467c@env))))) (set! r2f88@eval (lambda (r46f3@x r46f4@env) (begin (if (not (r2f7c@environment? r46f4@env)) (error 'eval '"not an environment" r46f4@env) (void)) (call-with-values (lambda () (r2f86@expand r46f3@x r46f4@env)) (lambda (r46fb@r46f8 r46fc@r46fa) ((lambda (r46ff@invoke-req* r4700@x) (begin (for-each r2ad8@r2979@invoke-library r46ff@invoke-req*) (eval-core (r28b2@r286a@expanded->core r4700@x)))) r46fc@r46fa r46fb@r46f8)))))) (set! r2f8a@library-expander (lambda r4771 ((lambda (r4772) (if (= r4772 '3) (apply (lambda (r4703@x r4704@filename r4705@verify-name) ((lambda (r470a@build-visit-code r470c@visit!) (begin (set! r470a@build-visit-code (lambda (r475f@macro*) (if (null? r475f@macro*) (r2c14@r2b84@build-void) (r2c13@r2b82@build-sequence '#f (map (lambda (r4761@x) ((lambda (r4763@loc r4764@src) (list 'set! r4763@loc r4764@src)) (car r4761@x) (cddr r4761@x))) r475f@macro*))))) (set! r470c@visit! (lambda (r4757@macro*) (for-each (lambda (r4759@x) ((lambda (r475b@loc r475c@proc) (set-symbol-value! r475b@loc r475c@proc)) (car r4759@x) (cadr r4759@x))) r4757@macro*))) (call-with-values (lambda () (r2f36@core-library-expander r4703@x r4705@verify-name)) (lambda (r471f@r470e r4720@r4710 r4721@r4712 r4722@r4714 r4723@r4716 r4724@r4718 r4725@r471a r4726@r471c r4727@r471e) ((lambda (r4731@export-env r4732@export-subst r4733@macro* r4734@invoke-code r4735@vis* r4736@inv* r4737@imp* r4738@ver r4739@name) ((lambda (r4743@id r4744@name r4745@ver r4746@imp* r4747@vis* r4748@inv* r4749@visit-proc r474a@invoke-proc r474b@visit-code r474c@invoke-code) (begin (r2ad6@r2975@install-library r4743@id r4744@name r4745@ver r4746@imp* r4747@vis* r4748@inv* r4732@export-subst r4731@export-env r4749@visit-proc r474a@invoke-proc r474b@visit-code r474c@invoke-code '#t r4704@filename) (values r4743@id r4744@name r4745@ver r4746@imp* r4747@vis* r4748@inv* r474c@invoke-code r474b@visit-code r4732@export-subst r4731@export-env))) (gensym) r4739@name r4738@ver (map r2adc@r2981@library-spec r4737@imp*) (map r2adc@r2981@library-spec r4735@vis*) (map r2adc@r2981@library-spec r4736@inv*) (lambda () (r470c@visit! r4733@macro*)) (lambda () (eval-core (r28b2@r286a@expanded->core r4734@invoke-code))) (r470a@build-visit-code r4733@macro*) r4734@invoke-code)) r4727@r471e r4726@r471c r4725@r471a r4724@r4718 r4723@r4716 r4722@r4714 r4721@r4712 r4720@r4710 r471f@r470e))))) '#f '#f)) r4771) (if (= r4772 '2) (apply (lambda (r4767@x r4768@filename) (r2f8a@library-expander r4767@x r4768@filename (lambda (r476b@x) (values)))) r4771) (if (= r4772 '1) (apply (lambda (r476d@x) (r2f8a@library-expander r476d@x '#f (lambda (r476f@x) (values)))) r4771) (error 'apply '"invalid arg count"))))) (length r4771)))) (set! r2f8c@boot-library-expand (lambda (r4773@x) (call-with-values (lambda () (r2f8a@library-expander r4773@x)) (lambda (r4789@r4776 r478a@r4778 r478b@r477a r478c@r477c r478d@r477e r478e@r4780 r478f@r4782 r4790@r4784 r4791@r4786 r4792@r4788) ((lambda (r479d@export-env r479e@export-subst r479f@visit-code r47a0@invoke-code r47a1@inv* r47a2@vis* r47a3@imp* r47a4@ver r47a5@name r47a6@id) (values r47a5@name r47a0@invoke-code r479e@export-subst r479d@export-env)) r4792@r4788 r4791@r4786 r4790@r4784 r478f@r4782 r478e@r4780 r478d@r477e r478c@r477c r478b@r477a r478a@r4778 r4789@r4776))))) (set! r2f8e@rev-map-append (lambda (r47b1@f r47b2@ls r47b3@ac) (if (null? r47b2@ls) r47b3@ac (r2f8e@rev-map-append r47b1@f (cdr r47b2@ls) (cons (r47b1@f (car r47b2@ls)) r47b3@ac))))) (set! r2f90@build-exports (lambda (r47b7@lex*+loc* r47b8@init*) (r2c13@r2b82@build-sequence '#f (cons (r2c14@r2b84@build-void) (r2f8e@rev-map-append (lambda (r47bb@x) (list 'set! (cdr r47bb@x) (car r47bb@x))) r47b7@lex*+loc* r47b8@init*))))) (set! r2f92@make-export-subst (lambda (r47bd@name* r47be@id*) (map (lambda (r47c1@name r47c2@id) ((lambda (r47c5@label) (begin (if (not r47c5@label) (r2fa8@syntax-violation '#f '"cannot export unbound identifier" r47c2@id) (void)) (cons r47c1@name r47c5@label))) (r2cce@id->label r47c2@id))) r47bd@name* r47be@id*))) (set! r2f94@make-export-env/macros (lambda (r47c7@lex* r47c8@loc* r47c9@r) ((lambda (r47ce@lookup) (begin (set! r47ce@lookup (lambda (r47eb@x) ((letrec ((r47ed@f (lambda (r47ef@x r47f0@lex* r47f1@loc*) (if (pair? r47f0@lex*) (if (eq? r47ef@x (car r47f0@lex*)) (car r47f1@loc*) (r47ed@f r47ef@x (cdr r47f0@lex*) (cdr r47f1@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) r47ed@f) r47eb@x r47c7@lex* r47c8@loc*))) ((letrec ((r47cf@f (lambda (r47d1@r r47d2@env r47d3@global* r47d4@macro*) (if (null? r47d1@r) (values r47d2@env r47d3@global* r47d4@macro*) ((lambda (r47d9@x) ((lambda (r47db@label r47dc@b) ((lambda (r47df@t) (if (memv r47df@t '(lexical)) ((lambda (r47e1@v) ((lambda (r47e3@loc r47e4@type) (r47cf@f (cdr r47d1@r) (cons (cons* r47db@label r47e4@type r47e3@loc) r47d2@env) (cons (cons (r2e4b@lexical-var r47e1@v) r47e3@loc) r47d3@global*) r47d4@macro*)) (r47ce@lookup (r2e4b@lexical-var r47e1@v)) (if (r2e4d@lexical-mutable? r47e1@v) 'mutable 'global))) (r2cd8@binding-value r47dc@b)) (if (memv r47df@t '(local-macro)) ((lambda (r47e7@loc) (r47cf@f (cdr r47d1@r) (cons (cons* r47db@label 'global-macro r47e7@loc) r47d2@env) r47d3@global* (cons (cons r47e7@loc (r2cd8@binding-value r47dc@b)) r47d4@macro*))) (gensym)) (if (memv r47df@t '(local-macro!)) ((lambda (r47e9@loc) (r47cf@f (cdr r47d1@r) (cons (cons* r47db@label 'global-macro! r47e9@loc) r47d2@env) r47d3@global* (cons (cons r47e9@loc (r2cd8@binding-value r47dc@b)) r47d4@macro*))) (gensym)) (if (memv r47df@t '($rtd $module)) (r47cf@f (cdr r47d1@r) (cons r47d9@x r47d2@env) r47d3@global* r47d4@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (r2cd6@binding-type r47dc@b) (r2cd8@binding-value r47dc@b))))))) (r2cd6@binding-type r47dc@b))) (car r47d9@x) (cdr r47d9@x))) (car r47d1@r)))))) r47cf@f) r47c9@r '() '() '()))) '#f))) (set! r2f96@generate-temporaries (lambda (r47f5@ls) ((lambda (r47f7@t) ((lambda (r47f9@ls/false) (if r47f9@ls/false (apply (lambda (r47fb@ls) (map (lambda (r47fd@x) (r2c7e@make-stx ((lambda (r47ff@x) (if (or (symbol? r47ff@x) (string? r47ff@x)) (gensym r47ff@x) (gensym 't))) (r2fae@syntax->datum r47fd@x)) r2c30@top-mark* '() '())) r47fb@ls)) r47f9@ls/false) ((lambda (r4801@t) ((lambda (r4803@ls/false) (if r4803@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) r4803@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r4801@t))) (r2ebf@syntax-dispatch r4801@t '_))) r47f7@t))) (r2ebf@syntax-dispatch r47f7@t 'each-any))) r47f5@ls))) (set! r2f98@free-identifier=? (lambda (r4805@x r4806@y) (if (r2cb4@id? r4805@x) (if (r2cb4@id? r4806@y) (r2cbc@free-id=? r4805@x r4806@y) (assertion-violation 'free-identifier=? '"not an identifier" r4806@y)) (assertion-violation 'free-identifier=? '"not an identifier" r4805@x)))) (set! r2f9a@bound-identifier=? (lambda (r4809@x r480a@y) (if (r2cb4@id? r4809@x) (if (r2cb4@id? r480a@y) (r2cba@bound-id=? r4809@x r480a@y) (assertion-violation 'bound-identifier=? '"not an identifier" r480a@y)) (assertion-violation 'bound-identifier=? '"not an identifier" r4809@x)))) (set! r2f9c@make-source-condition (lambda (r480d@x) ((lambda (r4817@r4812 r4819@r4814 r481b@r4813 r481e@r4811 r4820@make-source-condition r4822@r480f r4824@r4810 r4826@source-condition? r4828@source-filename r482a@source-character) (begin (set! r4817@r4812 (make-record-type-descriptor '&source-information r4c75@r49bc@&condition-rtd 'r4815 '#f '#f '#((immutable file-name) (immutable character)))) (set! r4819@r4814 '#f) (set! r481b@r4813 (make-record-constructor-descriptor r4817@r4812 r4c76@r49be@&condition-rcd r4819@r4814)) (set! r481e@r4811 (record-predicate r4817@r4812)) (set! r4820@make-source-condition (record-constructor r481b@r4813)) (set! r4822@r480f (record-accessor r4817@r4812 '0)) (set! r4824@r4810 (record-accessor r4817@r4812 '1)) (set! r4826@source-condition? (condition-predicate r4817@r4812)) (set! r4828@source-filename (condition-accessor r4817@r4812 r4822@r480f)) (set! r482a@source-character (condition-accessor r4817@r4812 r4824@r4810)) (if (pair? r480d@x) (r4820@make-source-condition (car r480d@x) (cdr r480d@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! r2f9e@extract-position-condition (lambda (r482b@x) (r2f9c@make-source-condition (r2fa0@expression-position r482b@x)))) (set! r2fa0@expression-position (lambda (r482d@x) (and (r2c7c@stx? r482d@x) ((lambda (r482f@x) (and (r2853@r2772@annotation? r482f@x) (r2854@r2774@annotation-source r482f@x))) (r2c80@stx-expr r482d@x))))) (set! r2fa2@assertion-error (lambda (r4831@expr r4832@pos) (raise (condition (r4ca5@r4a80@make-assertion-violation) (r4cb7@r4ab2@make-who-condition 'assert) (r4c7b@r4a13@make-message-condition '"assertion failed") (r4cad@r4a97@make-irritants-condition (list r4831@expr)) (r2f9c@make-source-condition r4832@pos))))) (set! r2fa4@syntax-error (lambda (r4835@x . r4837@args) (begin (if (not (for-all string? r4837@args)) (assertion-violation 'syntax-error '"invalid argument" r4837@args) (void)) (raise (condition (r4c7b@r4a13@make-message-condition (if (null? r4837@args) '"invalid syntax" (apply string-append r4837@args))) (r4cd9@r4b0e@make-syntax-violation (r2fae@syntax->datum r4835@x) '#f) (r2f9e@extract-position-condition r4835@x)))))) (set! r2fa6@syntax-violation* (lambda (r4839@who r483a@msg r483b@form r483c@condition-object) (begin (if (not (string? r483a@msg)) (assertion-violation 'syntax-violation '"message is not a string" r483a@msg) (void)) ((lambda (r4841@who) (raise (condition (if r4841@who (r4cb7@r4ab2@make-who-condition r4841@who) (condition)) (r4c7b@r4a13@make-message-condition r483a@msg) r483c@condition-object (r2f9e@extract-position-condition r483b@form)))) (if (or (string? r4839@who) (symbol? r4839@who)) r4839@who (if (not r4839@who) ((lambda (r4843@t) ((lambda (r4845@ls/false) (if (and r4845@ls/false (apply (lambda (r4847@id) (r2cb4@id? r4847@id)) r4845@ls/false)) (apply (lambda (r4849@id) (r2fae@syntax->datum r4849@id)) r4845@ls/false) ((lambda (r484b@t) ((lambda (r484d@ls/false) (if (and r484d@ls/false (apply (lambda (r484f@id r4850@rest) (r2cb4@id? r484f@id)) r484d@ls/false)) (apply (lambda (r4853@id r4854@rest) (r2fae@syntax->datum r4853@id)) r484d@ls/false) ((lambda (r4857@t) ((lambda (r4859@ls/false) (if r4859@ls/false (apply (lambda () '#f) r4859@ls/false) (r2fa8@syntax-violation '#f '"invalid syntax" r4857@t))) (r2ebf@syntax-dispatch r4857@t '_))) r484b@t))) (r2ebf@syntax-dispatch r484b@t '(any . any)))) r4843@t))) (r2ebf@syntax-dispatch r4843@t 'any))) r483b@form) (assertion-violation 'syntax-violation '"invalid who argument" r4839@who))))))) (set! r2fa8@syntax-violation (lambda r4869 ((lambda (r486a) (if (= r486a '3) (apply (lambda (r485b@who r485c@msg r485d@form) (r2fa8@syntax-violation r485b@who r485c@msg r485d@form '#f)) r4869) (if (= r486a '4) (apply (lambda (r4861@who r4862@msg r4863@form r4864@subform) (r2fa6@syntax-violation* r4861@who r4862@msg r4863@form (r4cd9@r4b0e@make-syntax-violation (r2fae@syntax->datum r4863@form) (r2fae@syntax->datum r4864@subform)))) r4869) (error 'apply '"invalid arg count")))) (length r4869)))) (set! r2faa@identifier? (lambda (r486b@x) (r2cb4@id? r486b@x))) (set! r2fac@datum->syntax (lambda (r486d@id r486e@datum) (if (r2cb4@id? r486d@id) (r2c92@datum->stx r486d@id r486e@datum) (assertion-violation 'datum->syntax '"not an identifier" r486d@id)))) (set! r2fae@syntax->datum (lambda (r4871@x) (r2cca@stx->datum r4871@x))) (set! r2fb0@compile-r6rs-top-level (lambda (r4873@x*) (call-with-values (lambda () (r2f3a@top-level-expander r4873@x*)) (lambda (r4879@r4876 r487a@r4878) ((lambda (r487d@invoke-code r487e@lib*) (lambda () (begin (for-each r2ad8@r2979@invoke-library r487e@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (r28b2@r286a@expanded->core r487d@invoke-code)) (void)) (eval-core (r28b2@r286a@expanded->core r487d@invoke-code))))) r487a@r4878 r4879@r4876))))) (set! r2fb2@pre-compile-r6rs-top-level (lambda (r4881@x*) (call-with-values (lambda () (r2f3a@top-level-expander r4881@x*)) (lambda (r4887@r4884 r4888@r4886) ((lambda (r488b@invoke-code r488c@lib*) (begin (for-each r2ad8@r2979@invoke-library r488c@lib*) (r285c@r2784@compile-core (r28b2@r286a@expanded->core r488b@invoke-code)))) r4888@r4886 r4887@r4884))))) (set! r2fb4@interaction-environment ((lambda (r488f@the-env) (lambda () (or r488f@the-env ((lambda (r4891@lib r4892@rib) (begin ((lambda (r4895@subst) (begin (r2c59@set-rib-sym*! r4892@rib (map car r4895@subst)) (r2c5b@set-rib-mark**! r4892@rib (map (lambda (r4897@x) r2c30@top-mark*) r4895@subst)) (r2c5d@set-rib-label*! r4892@rib (map cdr r4895@subst)))) (r2aad@r2923@library-subst r4891@lib)) ((lambda (r4899@env) (begin (set! r488f@the-env r4899@env) r4899@env)) (r2f66@make-interaction-env r4892@rib '() '())))) (r2ad1@r296b@find-library-by-name '(mosh interaction)) (r2c63@make-empty-rib))))) '#f)) (set! r2fb6@top-level-context (r285e@r2788@make-parameter '#f)) (begin (set! r49a7@r2fb6@top-level-context r2fb6@top-level-context) (set! r49a6@r2fb4@interaction-environment r2fb4@interaction-environment) (set! r49a5@r2fb2@pre-compile-r6rs-top-level r2fb2@pre-compile-r6rs-top-level) (set! r49a4@r2fb0@compile-r6rs-top-level r2fb0@compile-r6rs-top-level) (set! r49a3@r2fae@syntax->datum r2fae@syntax->datum) (set! r49a2@r2fac@datum->syntax r2fac@datum->syntax) (set! r49a1@r2faa@identifier? r2faa@identifier?) (set! r49a0@r2fa8@syntax-violation r2fa8@syntax-violation) (set! r499f@r2fa6@syntax-violation* r2fa6@syntax-violation*) (set! r499e@r2fa4@syntax-error r2fa4@syntax-error) (set! r499d@r2fa2@assertion-error r2fa2@assertion-error) (set! r499c@r2fa0@expression-position r2fa0@expression-position) (set! r499b@r2f9e@extract-position-condition r2f9e@extract-position-condition) (set! r499a@r2f9c@make-source-condition r2f9c@make-source-condition) (set! r4999@r2f9a@bound-identifier=? r2f9a@bound-identifier=?) (set! r4998@r2f98@free-identifier=? r2f98@free-identifier=?) (set! r4997@r2f96@generate-temporaries r2f96@generate-temporaries) (set! r4996@r2f94@make-export-env/macros r2f94@make-export-env/macros) (set! r4995@r2f92@make-export-subst r2f92@make-export-subst) (set! r4994@r2f90@build-exports r2f90@build-exports) (set! r4993@r2f8e@rev-map-append r2f8e@rev-map-append) (set! r4992@r2f8c@boot-library-expand r2f8c@boot-library-expand) (set! r4991@r2f8a@library-expander r2f8a@library-expander) (set! r4990@r2f88@eval r2f88@eval) (set! r498f@r2f86@expand r2f86@expand) (set! r498e@r2f84@scheme-report-environment r2f84@scheme-report-environment) (set! r498d@r2f82@null-environment r2f82@null-environment) (set! r498c@r2f80@environment r2f80@environment) (set! r498b@r2f7e@environment-symbols r2f7e@environment-symbols) (set! r498a@r2f7c@environment? r2f7c@environment?) (set! r4989@r2f7a@parse-binding r2f7a@parse-binding) (set! r4988@r2f78@environment-bindings r2f78@environment-bindings) (set! r4987@r2f76@interaction-environment-symbols r2f76@interaction-environment-symbols) (set! r4986@r2f74@rp r2f74@rp) (set! r4985@r2f72@set-interaction-env-locs! r2f72@set-interaction-env-locs!) (set! r4984@r2f70@set-interaction-env-r! r2f70@set-interaction-env-r!) (set! r4983@r2f6e@set-interaction-env-rib! r2f6e@set-interaction-env-rib!) (set! r4982@r2f6c@interaction-env-locs r2f6c@interaction-env-locs) (set! r4981@r2f6a@interaction-env-r r2f6a@interaction-env-r) (set! r4980@r2f68@interaction-env-rib r2f68@interaction-env-rib) (set! r497f@r2f66@make-interaction-env r2f66@make-interaction-env) (set! r497e@r2f64@interaction-env? r2f64@interaction-env?) (set! r497d@r2f61@r2f59 r2f61@r2f59) (set! r497c@r2f5f@r2f5a r2f5f@r2f5a) (set! r497b@r2f5d@r2f58 r2f5d@r2f58) (set! r497a@r2f57@rp r2f57@rp) (set! r4979@r2f55@set-env-itc! r2f55@set-env-itc!) (set! r4978@r2f53@set-env-labels! r2f53@set-env-labels!) (set! r4977@r2f51@set-env-names! r2f51@set-env-names!) (set! r4976@r2f4f@env-itc r2f4f@env-itc) (set! r4975@r2f4d@env-labels r2f4d@env-labels) (set! r4974@r2f4b@env-names r2f4b@env-names) (set! r4973@r2f49@make-env r2f49@make-env) (set! r4972@r2f47@env? r2f47@env?) (set! r4971@r2f44@r2f3c r2f44@r2f3c) (set! r4970@r2f42@r2f3d r2f42@r2f3d) (set! r496f@r2f40@r2f3b r2f40@r2f3b) (set! r496e@r2f3a@top-level-expander r2f3a@top-level-expander) (set! r496d@r2f38@parse-top-level-program r2f38@parse-top-level-program) (set! r496c@r2f36@core-library-expander r2f36@core-library-expander) (set! r496b@r2f34@library-body-expander r2f34@library-body-expander) (set! r496a@r2f32@chi-interaction-expr r2f32@chi-interaction-expr) (set! r4969@r2f30@chi-library-internal r2f30@chi-library-internal) (set! r4968@r2f2e@imp-collector r2f2e@imp-collector) (set! r4967@r2f2c@vis-collector r2f2c@vis-collector) (set! r4966@r2f2a@inv-collector r2f2a@inv-collector) (set! r4965@r2f28@make-collector r2f28@make-collector) (set! r4964@r2f26@make-top-rib r2f26@make-top-rib) (set! r4963@r2f24@parse-import-spec* r2f24@parse-import-spec*) (set! r4962@r2f22@parse-library r2f22@parse-library) (set! r4961@r2f20@parse-library-name r2f20@parse-library-name) (set! r4960@r2f1e@parse-exports r2f1e@parse-exports) (set! r495f@r2f1c@expand-transformer r2f1c@expand-transformer) (set! r495e@r2f1a@chi-body* r2f1a@chi-body*) (set! r495d@r2f18@chi-internal-module r2f18@chi-internal-module) (set! r495c@r2f16@module-interface-exp-id* r2f16@module-interface-exp-id*) (set! r495b@r2f14@set-module-interface-exp-lab-vec! r2f14@set-module-interface-exp-lab-vec!) (set! r495a@r2f12@set-module-interface-exp-id-vec! r2f12@set-module-interface-exp-id-vec!) (set! r4959@r2f10@set-module-interface-first-mark! r2f10@set-module-interface-first-mark!) (set! r4958@r2f0e@module-interface-exp-lab-vec r2f0e@module-interface-exp-lab-vec) (set! r4957@r2f0c@module-interface-exp-id-vec r2f0c@module-interface-exp-id-vec) (set! r4956@r2f0a@module-interface-first-mark r2f0a@module-interface-first-mark) (set! r4955@r2f08@make-module-interface r2f08@make-module-interface) (set! r4954@r2f06@module-interface? r2f06@module-interface?) (set! r4953@r2f03@r2efb r2f03@r2efb) (set! r4952@r2f01@r2efc r2f01@r2efc) (set! r4951@r2eff@r2efa r2eff@r2efa) (set! r4950@r2ef9@parse-module r2ef9@parse-module) (set! r494f@r2ef7@chi-internal r2ef7@chi-internal) (set! r494e@r2ef5@find-dups r2ef5@find-dups) (set! r494d@r2ef3@find-bound=? r2ef3@find-bound=?) (set! r494c@r2ef1@chi-rhs* r2ef1@chi-rhs*) (set! r494b@r2eef@expand-interaction-rhs*/init* r2eef@expand-interaction-rhs*/init*) (set! r494a@r2eed@chi-rhs r2eed@chi-rhs) (set! r4949@r2eeb@chi-defun r2eeb@chi-defun) (set! r4948@r2ee9@chi-lambda-clause* r2ee9@chi-lambda-clause*) (set! r4947@r2ee7@chi-lambda-clause r2ee7@chi-lambda-clause) (set! r4946@r2ee5@verify-formals r2ee5@verify-formals) (set! r4945@r2ee3@chi-set! r2ee3@chi-set!) (set! r4944@r2ee1@chi-expr r2ee1@chi-expr) (set! r4943@r2edf@chi-application r2edf@chi-application) (set! r4942@r2edd@chi-expr* r2edd@chi-expr*) (set! r4941@r2edb@chi-global-macro r2edb@chi-global-macro) (set! r4940@r2ed9@chi-local-macro r2ed9@chi-local-macro) (set! r493f@r2ed7@chi-macro r2ed7@chi-macro) (set! r493e@r2ed5@do-macro-call r2ed5@do-macro-call) (set! r493d@r2ed3@local-macro-transformer r2ed3@local-macro-transformer) (set! r493c@r2ed1@macro-transformer r2ed1@macro-transformer) (set! r493b@r2ecf@symbol-macro r2ecf@symbol-macro) (set! r493a@r2ecd@core-macro-transformer r2ecd@core-macro-transformer) (set! r4939@r2ecb@syntax-transformer r2ecb@syntax-transformer) (set! r4938@r2ec9@ellipsis-map r2ec9@ellipsis-map) (set! r4937@r2ec7@syntax-case-transformer r2ec7@syntax-case-transformer) (set! r4936@r2ec5@verify-literals r2ec5@verify-literals) (set! r4935@r2ec3@underscore? r2ec3@underscore?) (set! r4934@r2ec1@ellipsis? r2ec1@ellipsis?) (set! r4933@r2ebf@syntax-dispatch r2ebf@syntax-dispatch) (set! r4932@r2ebd@convert-pattern r2ebd@convert-pattern) (set! r4931@r2ebb@foreign-call-transformer r2ebb@foreign-call-transformer) (set! r4930@r2eb9@parameterize-macro r2eb9@parameterize-macro) (set! r492f@r2eb7@incorrect-usage-macro r2eb7@incorrect-usage-macro) (set! r492e@r2eb5@define-condition-type-macro r2eb5@define-condition-type-macro) (set! r492d@r2eb3@define-record-type-macro r2eb3@define-record-type-macro) (set! r492c@r2eb1@define-struct-macro r2eb1@define-struct-macro) (set! r492b@r2eaf@quasisyntax-macro r2eaf@quasisyntax-macro) (set! r492a@r2ead@quasiquote-macro r2ead@quasiquote-macro) (set! r4929@r2eab@syntax-rules-macro r2eab@syntax-rules-macro) (set! r4928@r2ea9@include-into-macro r2ea9@include-into-macro) (set! r4927@r2ea7@include-macro r2ea7@include-macro) (set! r4926@r2ea5@do-include r2ea5@do-include) (set! r4925@r2ea3@cond-macro r2ea3@cond-macro) (set! r4924@r2ea1@and-macro r2ea1@and-macro) (set! r4923@r2e9f@or-macro r2e9f@or-macro) (set! r4922@r2e9d@let*-macro r2e9d@let*-macro) (set! r4921@r2e9b@do-macro r2e9b@do-macro) (set! r4920@r2e99@identifier-syntax-macro r2e99@identifier-syntax-macro) (set! r491f@r2e97@endianness-macro r2e97@endianness-macro) (set! r491e@r2e95@assert-macro r2e95@assert-macro) (set! r491d@r2e93@delay-macro r2e93@delay-macro) (set! r491c@r2e91@time-macro r2e91@time-macro) (set! r491b@r2e8f@define-enumeration-macro r2e8f@define-enumeration-macro) (set! r491a@r2e8d@guard-macro r2e8d@guard-macro) (set! r4919@r2e8b@trace-letrec-syntax-macro r2e8b@trace-letrec-syntax-macro) (set! r4918@r2e89@trace-let-syntax-macro r2e89@trace-let-syntax-macro) (set! r4917@r2e87@trace-let/rec-syntax r2e87@trace-let/rec-syntax) (set! r4916@r2e85@trace-define-syntax-macro r2e85@trace-define-syntax-macro) (set! r4915@r2e83@trace-define-macro r2e83@trace-define-macro) (set! r4914@r2e81@trace-lambda-macro r2e81@trace-lambda-macro) (set! r4913@r2e7f@let*-values-macro r2e7f@let*-values-macro) (set! r4912@r2e7d@let-values-macro r2e7d@let-values-macro) (set! r4911@r2e7b@let-macro r2e7b@let-macro) (set! r4910@r2e79@invalid-fmls-error r2e79@invalid-fmls-error) (set! r490f@r2e77@with-syntax-macro r2e77@with-syntax-macro) (set! r490e@r2e75@bless r2e75@bless) (set! r490d@r2e73@lambda-transformer r2e73@lambda-transformer) (set! r490c@r2e71@case-lambda-transformer r2e71@case-lambda-transformer) (set! r490b@r2e6f@quote-transformer r2e6f@quote-transformer) (set! r490a@r2e6d@case-macro r2e6d@case-macro) (set! r4909@r2e6b@or-transformer r2e6b@or-transformer) (set! r4908@r2e69@and-transformer r2e69@and-transformer) (set! r4907@r2e67@if-transformer r2e67@if-transformer) (set! r4906@r2e65@unless-macro r2e65@unless-macro) (set! r4905@r2e63@when-macro r2e63@when-macro) (set! r4904@r2e61@record-constructor-descriptor-transformer r2e61@record-constructor-descriptor-transformer) (set! r4903@r2e5f@record-type-descriptor-transformer r2e5f@record-type-descriptor-transformer) (set! r4902@r2e5d@type-descriptor-transformer r2e5d@type-descriptor-transformer) (set! r4901@r2e5b@fluid-let-syntax-transformer r2e5b@fluid-let-syntax-transformer) (set! r4900@r2e59@letrec*-transformer r2e59@letrec*-transformer) (set! r48ff@r2e57@letrec-transformer r2e57@letrec-transformer) (set! r48fe@r2e55@letrec-helper r2e55@letrec-helper) (set! r48fd@r2e53@add-lexicals r2e53@add-lexicals) (set! r48fc@r2e51@add-lexical r2e51@add-lexical) (set! r48fb@r2e4f@set-lexical-mutable! r2e4f@set-lexical-mutable!) (set! r48fa@r2e4d@lexical-mutable? r2e4d@lexical-mutable?) (set! r48f9@r2e4b@lexical-var r2e4b@lexical-var) (set! r48f8@r2e49@scheme-stx r2e49@scheme-stx) (set! r48f7@r2e47@scheme-stx-hashtable r2e47@scheme-stx-hashtable) (set! r48f6@r2e45@parse-define-syntax r2e45@parse-define-syntax) (set! r48f5@r2e43@parse-define r2e43@parse-define) (set! r48f4@r2cf2@make-eval-transformer r2cf2@make-eval-transformer) (set! r48f3@r2cf0@variable-transformer-procedure r2cf0@variable-transformer-procedure) (set! r48f2@r2cee@variable-transformer? r2cee@variable-transformer?) (set! r48f1@r2cec@make-variable-transformer r2cec@make-variable-transformer) (set! r48f0@r2cea@sanitize-binding r2cea@sanitize-binding) (set! r48ef@r2cdc@syntax-type r2cdc@syntax-type) (set! r48ee@r2cda@raise-unbound-error r2cda@raise-unbound-error) (set! r48ed@r2cd8@binding-value r2cd8@binding-value) (set! r48ec@r2cd6@binding-type r2cd6@binding-type) (set! r48eb@r2cd4@make-binding r2cd4@make-binding) (set! r48ea@r2cd2@label->binding r2cd2@label->binding) (set! r48e9@r2cd0@id->real-label r2cd0@id->real-label) (set! r48e8@r2cce@id->label r2cce@id->label) (set! r48e7@r2ccc@same-marks*? r2ccc@same-marks*?) (set! r48e6@r2cca@stx->datum r2cca@stx->datum) (set! r48e5@r2cc8@strip r2cc8@strip) (set! r48e4@r2cc6@strip-annotations r2cc6@strip-annotations) (set! r48e3@r2cc4@self-evaluating? r2cc4@self-evaluating?) (set! r48e2@r2cc2@bound-id-member? r2cc2@bound-id-member?) (set! r48e1@r2cc0@distinct-bound-ids? r2cc0@distinct-bound-ids?) (set! r48e0@r2cbe@valid-bound-ids? r2cbe@valid-bound-ids?) (set! r48df@r2cbc@free-id=? r2cbc@free-id=?) (set! r48de@r2cba@bound-id=? r2cba@bound-id=?) (set! r48dd@r2cb8@same-marks? r2cb8@same-marks?) (set! r48dc@r2cb6@id->sym r2cb6@id->sym) (set! r48db@r2cb4@id? r2cb4@id?) (set! r48da@r2cb2@syntax->list r2cb2@syntax->list) (set! r48d9@r2cb0@syntax-cdr r2cb0@syntax-cdr) (set! r48d8@r2cae@syntax-car r2cae@syntax-car) (set! r48d7@r2cac@syntax-list? r2cac@syntax-list?) (set! r48d6@r2caa@syntax-null? r2caa@syntax-null?) (set! r48d5@r2ca8@syntax-vector? r2ca8@syntax-vector?) (set! r48d4@r2ca6@syntax-pair? r2ca6@syntax-pair?) (set! r48d3@r2ca4@syntax-vector->list r2ca4@syntax-vector->list) (set! r48d2@r2ca2@syntax-kind? r2ca2@syntax-kind?) (set! r48d1@r2ca0@add-subst r2ca0@add-subst) (set! r48d0@r2c9e@add-mark r2c9e@add-mark) (set! r48cf@r2c9c@mkstx r2c9c@mkstx) (set! r48ce@r2c9a@join-wraps r2c9a@join-wraps) (set! r48cd@r2c98@anti-mark? r2c98@anti-mark?) (set! r48cc@r2c96@anti-mark r2c96@anti-mark) (set! r48cb@r2c94@gen-mark r2c94@gen-mark) (set! r48ca@r2c92@datum->stx r2c92@datum->stx) (set! r48c9@r2c90@rp r2c90@rp) (set! r48c8@r2c8e@set-stx-ae*! r2c8e@set-stx-ae*!) (set! r48c7@r2c8c@set-stx-subst*! r2c8c@set-stx-subst*!) (set! r48c6@r2c8a@set-stx-mark*! r2c8a@set-stx-mark*!) (set! r48c5@r2c88@set-stx-expr! r2c88@set-stx-expr!) (set! r48c4@r2c86@stx-ae* r2c86@stx-ae*) (set! r48c3@r2c84@stx-subst* r2c84@stx-subst*) (set! r48c2@r2c82@stx-mark* r2c82@stx-mark*) (set! r48c1@r2c80@stx-expr r2c80@stx-expr) (set! r48c0@r2c7e@make-stx r2c7e@make-stx) (set! r48bf@r2c7c@stx? r2c7c@stx?) (set! r48be@r2c79@r2c71 r2c79@r2c71) (set! r48bd@r2c77@r2c72 r2c77@r2c72) (set! r48bc@r2c75@r2c70 r2c75@r2c70) (set! r48bb@r2c6f@make-full-rib r2c6f@make-full-rib) (set! r48ba@r2c6d@unseal-rib! r2c6d@unseal-rib!) (set! r48b9@r2c6b@seal-rib! r2c6b@seal-rib!) (set! r48b8@r2c69@make-rib-map r2c69@make-rib-map) (set! r48b7@r2c67@extend-rib/nc! r2c67@extend-rib/nc!) (set! r48b6@r2c65@extend-rib! r2c65@extend-rib!) (set! r48b5@r2c63@make-empty-rib r2c63@make-empty-rib) (set! r48b4@r2c61@set-rib-cache! r2c61@set-rib-cache!) (set! r48b3@r2c5f@set-rib-sealed/freq! r2c5f@set-rib-sealed/freq!) (set! r48b2@r2c5d@set-rib-label*! r2c5d@set-rib-label*!) (set! r48b1@r2c5b@set-rib-mark**! r2c5b@set-rib-mark**!) (set! r48b0@r2c59@set-rib-sym*! r2c59@set-rib-sym*!) (set! r48af@r2c57@rib-cache r2c57@rib-cache) (set! r48ae@r2c55@rib-sealed/freq r2c55@rib-sealed/freq) (set! r48ad@r2c53@rib-label* r2c53@rib-label*) (set! r48ac@r2c51@rib-mark** r2c51@rib-mark**) (set! r48ab@r2c4f@rib-sym* r2c4f@rib-sym*) (set! r48aa@r2c4d@make-rib r2c4d@make-rib) (set! r48a9@r2c4b@rib? r2c4b@rib?) (set! r48a8@r2c48@r2c40 r2c48@r2c40) (set! r48a7@r2c46@r2c41 r2c46@r2c41) (set! r48a6@r2c44@r2c3f r2c44@r2c3f) (set! r48a5@r2c3e@gen-define-label r2c3e@gen-define-label) (set! r48a4@r2c3c@gen-define-label+loc r2c3c@gen-define-label+loc) (set! r48a3@r2c3a@gen-top-level-label r2c3a@gen-top-level-label) (set! r48a2@r2c38@gen-label r2c38@gen-label) (set! r48a1@r2c36@gen-global r2c36@gen-global) (set! r48a0@r2c34@gen-lexical r2c34@gen-lexical) (set! r489f@r2c32@top-marked? r2c32@top-marked?) (set! r489e@r2c30@top-mark* r2c30@top-mark*) (set! r489d@r2c2b@set-union r2c2b@set-union) (set! r489c@r2c29@set-cons r2c29@set-cons) (set! r489b@r2c27@file-options-macro r2c27@file-options-macro) (r2ace@r2965@current-library-expander r2f8a@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (r49b1@r49ac r49b3@r49ae r49b5@r49ad r49b8@&condition? r49ba@make-&condition r49bc@&condition-rtd r49be@&condition-rcd r4a0a@r4a05 r4a0c@r4a07 r4a0e@r4a06 r4a11@p? r4a13@make-message-condition r4a15@r4a04 r4a17@message-condition? r4a19@condition-message r4a1b@&message-rtd r4a1d@&message-rcd r4a23@r4a1e r4a25@r4a20 r4a27@r4a1f r4a2a@p? r4a2c@make-warning r4a2e@warning? r4a30@&warning-rtd r4a32@&warning-rcd r4a38@r4a33 r4a3a@r4a35 r4a3c@r4a34 r4a3f@p? r4a41@make-serious-condition r4a43@serious-condition? r4a45@&serious-rtd r4a47@&serious-rcd r4a4d@r4a48 r4a4f@r4a4a r4a51@r4a49 r4a54@p? r4a56@make-error r4a58@error? r4a5a@&error-rtd r4a5c@&error-rcd r4a62@r4a5d r4a64@r4a5f r4a66@r4a5e r4a69@p? r4a6b@make-violation r4a6d@violation? r4a6f@&violation-rtd r4a71@&violation-rcd r4a77@r4a72 r4a79@r4a74 r4a7b@r4a73 r4a7e@p? r4a80@make-assertion-violation r4a82@assertion-violation? r4a84@&assertion-rtd r4a86@&assertion-rcd r4a8e@r4a89 r4a90@r4a8b r4a92@r4a8a r4a95@p? r4a97@make-irritants-condition r4a99@r4a88 r4a9b@irritants-condition? r4a9d@condition-irritants r4a9f@&irritants-rtd r4aa1@&irritants-rcd r4aa9@r4aa4 r4aab@r4aa6 r4aad@r4aa5 r4ab0@p? r4ab2@make-who-condition r4ab4@r4aa3 r4ab6@who-condition? r4ab8@condition-who r4aba@&who-rtd r4abc@&who-rcd r4ac2@r4abd r4ac4@r4abf r4ac6@r4abe r4ac9@p? r4acb@make-non-continuable-violation r4acd@non-continuable-violation? r4acf@&non-continuable-rtd r4ad1@&non-continuable-rcd r4ad7@r4ad2 r4ad9@r4ad4 r4adb@r4ad3 r4ade@p? r4ae0@make-implementation-restriction-violation r4ae2@implementation-restriction-violation? r4ae4@&implementation-restriction-rtd r4ae6@&implementation-restriction-rcd r4aec@r4ae7 r4aee@r4ae9 r4af0@r4ae8 r4af3@p? r4af5@make-lexical-violation r4af7@lexical-violation? r4af9@&lexical-rtd r4afb@&lexical-rcd r4b05@r4b00 r4b07@r4b02 r4b09@r4b01 r4b0c@p? r4b0e@make-syntax-violation r4b10@r4afd r4b12@r4aff r4b14@syntax-violation? r4b16@syntax-violation-form r4b18@syntax-violation-subform r4b1a@&syntax-rtd r4b1c@&syntax-rcd r4b22@r4b1d r4b24@r4b1f r4b26@r4b1e r4b29@p? r4b2b@make-undefined-violation r4b2d@undefined-violation? r4b2f@&undefined-rtd r4b31@&undefined-rcd r4b37@r4b32 r4b39@r4b34 r4b3b@r4b33 r4b3e@p? r4b40@make-i/o-error r4b42@i/o-error? r4b44@&i/o-rtd r4b46@&i/o-rcd r4b4c@r4b47 r4b4e@r4b49 r4b50@r4b48 r4b53@p? r4b55@make-i/o-read-error r4b57@i/o-read-error? r4b59@&i/o-read-rtd r4b5b@&i/o-read-rcd r4b61@r4b5c r4b63@r4b5e r4b65@r4b5d r4b68@p? r4b6a@make-i/o-write-error r4b6c@i/o-write-error? r4b6e@&i/o-write-rtd r4b70@&i/o-write-rcd r4b78@r4b73 r4b7a@r4b75 r4b7c@r4b74 r4b7f@p? r4b81@make-i/o-invalid-position-error r4b83@r4b72 r4b85@i/o-invalid-position-error? r4b87@i/o-error-position r4b89@&i/o-invalid-position-rtd r4b8b@&i/o-invalid-position-rcd r4b93@r4b8e r4b95@r4b90 r4b97@r4b8f r4b9a@p? r4b9c@make-i/o-filename-error r4b9e@r4b8d r4ba0@i/o-filename-error? r4ba2@i/o-error-filename r4ba4@&i/o-filename-rtd r4ba6@&i/o-filename-rcd r4bac@r4ba7 r4bae@r4ba9 r4bb0@r4ba8 r4bb3@p? r4bb5@make-i/o-file-protection-error r4bb7@i/o-file-protection-error? r4bb9@&i/o-file-protection-rtd r4bbb@&i/o-file-protection-rcd r4bc1@r4bbc r4bc3@r4bbe r4bc5@r4bbd r4bc8@p? r4bca@make-i/o-file-is-read-only-error r4bcc@i/o-file-is-read-only-error? r4bce@&i/o-file-is-read-only-rtd r4bd0@&i/o-file-is-read-only-rcd r4bd6@r4bd1 r4bd8@r4bd3 r4bda@r4bd2 r4bdd@p? r4bdf@make-i/o-file-already-exists-error r4be1@i/o-file-already-exists-error? r4be3@&i/o-file-already-exists-rtd r4be5@&i/o-file-already-exists-rcd r4beb@r4be6 r4bed@r4be8 r4bef@r4be7 r4bf2@p? r4bf4@make-i/o-file-does-not-exist-error r4bf6@i/o-file-does-not-exist-error? r4bf8@&i/o-file-does-not-exist-rtd r4bfa@&i/o-file-does-not-exist-rcd r4c02@r4bfd r4c04@r4bff r4c06@r4bfe r4c09@p? r4c0b@make-i/o-port-error r4c0d@r4bfc r4c0f@i/o-port-error? r4c11@i/o-error-port r4c13@&i/o-port-rtd r4c15@&i/o-port-rcd r4c1b@r4c16 r4c1d@r4c18 r4c1f@r4c17 r4c22@p? r4c24@make-i/o-decoding-error r4c26@i/o-decoding-error? r4c28@&i/o-decoding-rtd r4c2a@&i/o-decoding-rcd r4c32@r4c2d r4c34@r4c2f r4c36@r4c2e r4c39@p? r4c3b@make-i/o-encoding-error r4c3d@r4c2c r4c3f@i/o-encoding-error? r4c41@i/o-encoding-error-char r4c43@&i/o-encoding-rtd r4c45@&i/o-encoding-rcd r4c4b@r4c46 r4c4d@r4c48 r4c4f@r4c47 r4c52@p? r4c54@make-no-infinities-violation r4c56@no-infinities-violation? r4c58@&no-infinities-rtd r4c5a@&no-infinities-rcd r4c60@r4c5b r4c62@r4c5d r4c64@r4c5c r4c67@p? r4c69@make-no-nans-violation r4c6b@no-nans-violation? r4c6d@&no-nans-rtd r4c6f@&no-nans-rcd) (begin (set! r49b1@r49ac (make-record-type-descriptor '&condition '#f 'r49af '#f '#f '#())) (set! r49b3@r49ae '#f) (set! r49b5@r49ad (make-record-constructor-descriptor r49b1@r49ac '#f r49b3@r49ae)) (set! r49b8@&condition? (record-predicate r49b1@r49ac)) (set! r49ba@make-&condition (record-constructor r49b5@r49ad)) (set! r49bc@&condition-rtd r49b1@r49ac) (set! r49be@&condition-rcd r49b5@r49ad) (set! r4a0a@r4a05 (make-record-type-descriptor '&message r49b1@r49ac 'r4a08 '#f '#f '#((immutable message)))) (set! r4a0c@r4a07 '#f) (set! r4a0e@r4a06 (make-record-constructor-descriptor r4a0a@r4a05 r49b5@r49ad r4a0c@r4a07)) (set! r4a11@p? (record-predicate r4a0a@r4a05)) (set! r4a13@make-message-condition (record-constructor r4a0e@r4a06)) (set! r4a15@r4a04 (record-accessor r4a0a@r4a05 '0)) (set! r4a17@message-condition? (condition-predicate r4a0a@r4a05)) (set! r4a19@condition-message (condition-accessor r4a0a@r4a05 r4a15@r4a04)) (set! r4a1b@&message-rtd r4a0a@r4a05) (set! r4a1d@&message-rcd r4a0e@r4a06) (set! r4a23@r4a1e (make-record-type-descriptor '&warning r49b1@r49ac 'r4a21 '#f '#f '#())) (set! r4a25@r4a20 '#f) (set! r4a27@r4a1f (make-record-constructor-descriptor r4a23@r4a1e r49b5@r49ad r4a25@r4a20)) (set! r4a2a@p? (record-predicate r4a23@r4a1e)) (set! r4a2c@make-warning (record-constructor r4a27@r4a1f)) (set! r4a2e@warning? (condition-predicate r4a23@r4a1e)) (set! r4a30@&warning-rtd r4a23@r4a1e) (set! r4a32@&warning-rcd r4a27@r4a1f) (set! r4a38@r4a33 (make-record-type-descriptor '&serious r49b1@r49ac 'r4a36 '#f '#f '#())) (set! r4a3a@r4a35 '#f) (set! r4a3c@r4a34 (make-record-constructor-descriptor r4a38@r4a33 r49b5@r49ad r4a3a@r4a35)) (set! r4a3f@p? (record-predicate r4a38@r4a33)) (set! r4a41@make-serious-condition (record-constructor r4a3c@r4a34)) (set! r4a43@serious-condition? (condition-predicate r4a38@r4a33)) (set! r4a45@&serious-rtd r4a38@r4a33) (set! r4a47@&serious-rcd r4a3c@r4a34) (set! r4a4d@r4a48 (make-record-type-descriptor '&error r4a38@r4a33 'r4a4b '#f '#f '#())) (set! r4a4f@r4a4a '#f) (set! r4a51@r4a49 (make-record-constructor-descriptor r4a4d@r4a48 r4a3c@r4a34 r4a4f@r4a4a)) (set! r4a54@p? (record-predicate r4a4d@r4a48)) (set! r4a56@make-error (record-constructor r4a51@r4a49)) (set! r4a58@error? (condition-predicate r4a4d@r4a48)) (set! r4a5a@&error-rtd r4a4d@r4a48) (set! r4a5c@&error-rcd r4a51@r4a49) (set! r4a62@r4a5d (make-record-type-descriptor '&violation r4a38@r4a33 'r4a60 '#f '#f '#())) (set! r4a64@r4a5f '#f) (set! r4a66@r4a5e (make-record-constructor-descriptor r4a62@r4a5d r4a3c@r4a34 r4a64@r4a5f)) (set! r4a69@p? (record-predicate r4a62@r4a5d)) (set! r4a6b@make-violation (record-constructor r4a66@r4a5e)) (set! r4a6d@violation? (condition-predicate r4a62@r4a5d)) (set! r4a6f@&violation-rtd r4a62@r4a5d) (set! r4a71@&violation-rcd r4a66@r4a5e) (set! r4a77@r4a72 (make-record-type-descriptor '&assertion r4a62@r4a5d 'r4a75 '#f '#f '#())) (set! r4a79@r4a74 '#f) (set! r4a7b@r4a73 (make-record-constructor-descriptor r4a77@r4a72 r4a66@r4a5e r4a79@r4a74)) (set! r4a7e@p? (record-predicate r4a77@r4a72)) (set! r4a80@make-assertion-violation (record-constructor r4a7b@r4a73)) (set! r4a82@assertion-violation? (condition-predicate r4a77@r4a72)) (set! r4a84@&assertion-rtd r4a77@r4a72) (set! r4a86@&assertion-rcd r4a7b@r4a73) (set! r4a8e@r4a89 (make-record-type-descriptor '&irritants r49b1@r49ac 'r4a8c '#f '#f '#((immutable irritants)))) (set! r4a90@r4a8b '#f) (set! r4a92@r4a8a (make-record-constructor-descriptor r4a8e@r4a89 r49b5@r49ad r4a90@r4a8b)) (set! r4a95@p? (record-predicate r4a8e@r4a89)) (set! r4a97@make-irritants-condition (record-constructor r4a92@r4a8a)) (set! r4a99@r4a88 (record-accessor r4a8e@r4a89 '0)) (set! r4a9b@irritants-condition? (condition-predicate r4a8e@r4a89)) (set! r4a9d@condition-irritants (condition-accessor r4a8e@r4a89 r4a99@r4a88)) (set! r4a9f@&irritants-rtd r4a8e@r4a89) (set! r4aa1@&irritants-rcd r4a92@r4a8a) (set! r4aa9@r4aa4 (make-record-type-descriptor '&who r49b1@r49ac 'r4aa7 '#f '#f '#((immutable who)))) (set! r4aab@r4aa6 '#f) (set! r4aad@r4aa5 (make-record-constructor-descriptor r4aa9@r4aa4 r49b5@r49ad r4aab@r4aa6)) (set! r4ab0@p? (record-predicate r4aa9@r4aa4)) (set! r4ab2@make-who-condition (record-constructor r4aad@r4aa5)) (set! r4ab4@r4aa3 (record-accessor r4aa9@r4aa4 '0)) (set! r4ab6@who-condition? (condition-predicate r4aa9@r4aa4)) (set! r4ab8@condition-who (condition-accessor r4aa9@r4aa4 r4ab4@r4aa3)) (set! r4aba@&who-rtd r4aa9@r4aa4) (set! r4abc@&who-rcd r4aad@r4aa5) (set! r4ac2@r4abd (make-record-type-descriptor '&non-continuable r4a62@r4a5d 'r4ac0 '#f '#f '#())) (set! r4ac4@r4abf '#f) (set! r4ac6@r4abe (make-record-constructor-descriptor r4ac2@r4abd r4a66@r4a5e r4ac4@r4abf)) (set! r4ac9@p? (record-predicate r4ac2@r4abd)) (set! r4acb@make-non-continuable-violation (record-constructor r4ac6@r4abe)) (set! r4acd@non-continuable-violation? (condition-predicate r4ac2@r4abd)) (set! r4acf@&non-continuable-rtd r4ac2@r4abd) (set! r4ad1@&non-continuable-rcd r4ac6@r4abe) (set! r4ad7@r4ad2 (make-record-type-descriptor '&implementation-restriction r4a62@r4a5d 'r4ad5 '#f '#f '#())) (set! r4ad9@r4ad4 '#f) (set! r4adb@r4ad3 (make-record-constructor-descriptor r4ad7@r4ad2 r4a66@r4a5e r4ad9@r4ad4)) (set! r4ade@p? (record-predicate r4ad7@r4ad2)) (set! r4ae0@make-implementation-restriction-violation (record-constructor r4adb@r4ad3)) (set! r4ae2@implementation-restriction-violation? (condition-predicate r4ad7@r4ad2)) (set! r4ae4@&implementation-restriction-rtd r4ad7@r4ad2) (set! r4ae6@&implementation-restriction-rcd r4adb@r4ad3) (set! r4aec@r4ae7 (make-record-type-descriptor '&lexical r4a62@r4a5d 'r4aea '#f '#f '#())) (set! r4aee@r4ae9 '#f) (set! r4af0@r4ae8 (make-record-constructor-descriptor r4aec@r4ae7 r4a66@r4a5e r4aee@r4ae9)) (set! r4af3@p? (record-predicate r4aec@r4ae7)) (set! r4af5@make-lexical-violation (record-constructor r4af0@r4ae8)) (set! r4af7@lexical-violation? (condition-predicate r4aec@r4ae7)) (set! r4af9@&lexical-rtd r4aec@r4ae7) (set! r4afb@&lexical-rcd r4af0@r4ae8) (set! r4b05@r4b00 (make-record-type-descriptor '&syntax r4a62@r4a5d 'r4b03 '#f '#f '#((immutable form) (immutable subform)))) (set! r4b07@r4b02 '#f) (set! r4b09@r4b01 (make-record-constructor-descriptor r4b05@r4b00 r4a66@r4a5e r4b07@r4b02)) (set! r4b0c@p? (record-predicate r4b05@r4b00)) (set! r4b0e@make-syntax-violation (record-constructor r4b09@r4b01)) (set! r4b10@r4afd (record-accessor r4b05@r4b00 '0)) (set! r4b12@r4aff (record-accessor r4b05@r4b00 '1)) (set! r4b14@syntax-violation? (condition-predicate r4b05@r4b00)) (set! r4b16@syntax-violation-form (condition-accessor r4b05@r4b00 r4b10@r4afd)) (set! r4b18@syntax-violation-subform (condition-accessor r4b05@r4b00 r4b12@r4aff)) (set! r4b1a@&syntax-rtd r4b05@r4b00) (set! r4b1c@&syntax-rcd r4b09@r4b01) (set! r4b22@r4b1d (make-record-type-descriptor '&undefined r4a62@r4a5d 'r4b20 '#f '#f '#())) (set! r4b24@r4b1f '#f) (set! r4b26@r4b1e (make-record-constructor-descriptor r4b22@r4b1d r4a66@r4a5e r4b24@r4b1f)) (set! r4b29@p? (record-predicate r4b22@r4b1d)) (set! r4b2b@make-undefined-violation (record-constructor r4b26@r4b1e)) (set! r4b2d@undefined-violation? (condition-predicate r4b22@r4b1d)) (set! r4b2f@&undefined-rtd r4b22@r4b1d) (set! r4b31@&undefined-rcd r4b26@r4b1e) (set! r4b37@r4b32 (make-record-type-descriptor '&i/o r4a4d@r4a48 'r4b35 '#f '#f '#())) (set! r4b39@r4b34 '#f) (set! r4b3b@r4b33 (make-record-constructor-descriptor r4b37@r4b32 r4a51@r4a49 r4b39@r4b34)) (set! r4b3e@p? (record-predicate r4b37@r4b32)) (set! r4b40@make-i/o-error (record-constructor r4b3b@r4b33)) (set! r4b42@i/o-error? (condition-predicate r4b37@r4b32)) (set! r4b44@&i/o-rtd r4b37@r4b32) (set! r4b46@&i/o-rcd r4b3b@r4b33) (set! r4b4c@r4b47 (make-record-type-descriptor '&i/o-read r4b37@r4b32 'r4b4a '#f '#f '#())) (set! r4b4e@r4b49 '#f) (set! r4b50@r4b48 (make-record-constructor-descriptor r4b4c@r4b47 r4b3b@r4b33 r4b4e@r4b49)) (set! r4b53@p? (record-predicate r4b4c@r4b47)) (set! r4b55@make-i/o-read-error (record-constructor r4b50@r4b48)) (set! r4b57@i/o-read-error? (condition-predicate r4b4c@r4b47)) (set! r4b59@&i/o-read-rtd r4b4c@r4b47) (set! r4b5b@&i/o-read-rcd r4b50@r4b48) (set! r4b61@r4b5c (make-record-type-descriptor '&i/o-write r4b37@r4b32 'r4b5f '#f '#f '#())) (set! r4b63@r4b5e '#f) (set! r4b65@r4b5d (make-record-constructor-descriptor r4b61@r4b5c r4b3b@r4b33 r4b63@r4b5e)) (set! r4b68@p? (record-predicate r4b61@r4b5c)) (set! r4b6a@make-i/o-write-error (record-constructor r4b65@r4b5d)) (set! r4b6c@i/o-write-error? (condition-predicate r4b61@r4b5c)) (set! r4b6e@&i/o-write-rtd r4b61@r4b5c) (set! r4b70@&i/o-write-rcd r4b65@r4b5d) (set! r4b78@r4b73 (make-record-type-descriptor '&i/o-invalid-position r4b37@r4b32 'r4b76 '#f '#f '#((immutable position)))) (set! r4b7a@r4b75 '#f) (set! r4b7c@r4b74 (make-record-constructor-descriptor r4b78@r4b73 r4b3b@r4b33 r4b7a@r4b75)) (set! r4b7f@p? (record-predicate r4b78@r4b73)) (set! r4b81@make-i/o-invalid-position-error (record-constructor r4b7c@r4b74)) (set! r4b83@r4b72 (record-accessor r4b78@r4b73 '0)) (set! r4b85@i/o-invalid-position-error? (condition-predicate r4b78@r4b73)) (set! r4b87@i/o-error-position (condition-accessor r4b78@r4b73 r4b83@r4b72)) (set! r4b89@&i/o-invalid-position-rtd r4b78@r4b73) (set! r4b8b@&i/o-invalid-position-rcd r4b7c@r4b74) (set! r4b93@r4b8e (make-record-type-descriptor '&i/o-filename r4b37@r4b32 'r4b91 '#f '#f '#((immutable filename)))) (set! r4b95@r4b90 '#f) (set! r4b97@r4b8f (make-record-constructor-descriptor r4b93@r4b8e r4b3b@r4b33 r4b95@r4b90)) (set! r4b9a@p? (record-predicate r4b93@r4b8e)) (set! r4b9c@make-i/o-filename-error (record-constructor r4b97@r4b8f)) (set! r4b9e@r4b8d (record-accessor r4b93@r4b8e '0)) (set! r4ba0@i/o-filename-error? (condition-predicate r4b93@r4b8e)) (set! r4ba2@i/o-error-filename (condition-accessor r4b93@r4b8e r4b9e@r4b8d)) (set! r4ba4@&i/o-filename-rtd r4b93@r4b8e) (set! r4ba6@&i/o-filename-rcd r4b97@r4b8f) (set! r4bac@r4ba7 (make-record-type-descriptor '&i/o-file-protection r4b93@r4b8e 'r4baa '#f '#f '#())) (set! r4bae@r4ba9 '#f) (set! r4bb0@r4ba8 (make-record-constructor-descriptor r4bac@r4ba7 r4b97@r4b8f r4bae@r4ba9)) (set! r4bb3@p? (record-predicate r4bac@r4ba7)) (set! r4bb5@make-i/o-file-protection-error (record-constructor r4bb0@r4ba8)) (set! r4bb7@i/o-file-protection-error? (condition-predicate r4bac@r4ba7)) (set! r4bb9@&i/o-file-protection-rtd r4bac@r4ba7) (set! r4bbb@&i/o-file-protection-rcd r4bb0@r4ba8) (set! r4bc1@r4bbc (make-record-type-descriptor '&i/o-file-is-read-only r4bac@r4ba7 'r4bbf '#f '#f '#())) (set! r4bc3@r4bbe '#f) (set! r4bc5@r4bbd (make-record-constructor-descriptor r4bc1@r4bbc r4bb0@r4ba8 r4bc3@r4bbe)) (set! r4bc8@p? (record-predicate r4bc1@r4bbc)) (set! r4bca@make-i/o-file-is-read-only-error (record-constructor r4bc5@r4bbd)) (set! r4bcc@i/o-file-is-read-only-error? (condition-predicate r4bc1@r4bbc)) (set! r4bce@&i/o-file-is-read-only-rtd r4bc1@r4bbc) (set! r4bd0@&i/o-file-is-read-only-rcd r4bc5@r4bbd) (set! r4bd6@r4bd1 (make-record-type-descriptor '&i/o-file-already-exists r4b93@r4b8e 'r4bd4 '#f '#f '#())) (set! r4bd8@r4bd3 '#f) (set! r4bda@r4bd2 (make-record-constructor-descriptor r4bd6@r4bd1 r4b97@r4b8f r4bd8@r4bd3)) (set! r4bdd@p? (record-predicate r4bd6@r4bd1)) (set! r4bdf@make-i/o-file-already-exists-error (record-constructor r4bda@r4bd2)) (set! r4be1@i/o-file-already-exists-error? (condition-predicate r4bd6@r4bd1)) (set! r4be3@&i/o-file-already-exists-rtd r4bd6@r4bd1) (set! r4be5@&i/o-file-already-exists-rcd r4bda@r4bd2) (set! r4beb@r4be6 (make-record-type-descriptor '&i/o-file-does-not-exist r4b93@r4b8e 'r4be9 '#f '#f '#())) (set! r4bed@r4be8 '#f) (set! r4bef@r4be7 (make-record-constructor-descriptor r4beb@r4be6 r4b97@r4b8f r4bed@r4be8)) (set! r4bf2@p? (record-predicate r4beb@r4be6)) (set! r4bf4@make-i/o-file-does-not-exist-error (record-constructor r4bef@r4be7)) (set! r4bf6@i/o-file-does-not-exist-error? (condition-predicate r4beb@r4be6)) (set! r4bf8@&i/o-file-does-not-exist-rtd r4beb@r4be6) (set! r4bfa@&i/o-file-does-not-exist-rcd r4bef@r4be7) (set! r4c02@r4bfd (make-record-type-descriptor '&i/o-port r4b37@r4b32 'r4c00 '#f '#f '#((immutable port)))) (set! r4c04@r4bff '#f) (set! r4c06@r4bfe (make-record-constructor-descriptor r4c02@r4bfd r4b3b@r4b33 r4c04@r4bff)) (set! r4c09@p? (record-predicate r4c02@r4bfd)) (set! r4c0b@make-i/o-port-error (record-constructor r4c06@r4bfe)) (set! r4c0d@r4bfc (record-accessor r4c02@r4bfd '0)) (set! r4c0f@i/o-port-error? (condition-predicate r4c02@r4bfd)) (set! r4c11@i/o-error-port (condition-accessor r4c02@r4bfd r4c0d@r4bfc)) (set! r4c13@&i/o-port-rtd r4c02@r4bfd) (set! r4c15@&i/o-port-rcd r4c06@r4bfe) (set! r4c1b@r4c16 (make-record-type-descriptor '&i/o-decoding r4c02@r4bfd 'r4c19 '#f '#f '#())) (set! r4c1d@r4c18 '#f) (set! r4c1f@r4c17 (make-record-constructor-descriptor r4c1b@r4c16 r4c06@r4bfe r4c1d@r4c18)) (set! r4c22@p? (record-predicate r4c1b@r4c16)) (set! r4c24@make-i/o-decoding-error (record-constructor r4c1f@r4c17)) (set! r4c26@i/o-decoding-error? (condition-predicate r4c1b@r4c16)) (set! r4c28@&i/o-decoding-rtd r4c1b@r4c16) (set! r4c2a@&i/o-decoding-rcd r4c1f@r4c17) (set! r4c32@r4c2d (make-record-type-descriptor '&i/o-encoding r4c02@r4bfd 'r4c30 '#f '#f '#((immutable char)))) (set! r4c34@r4c2f '#f) (set! r4c36@r4c2e (make-record-constructor-descriptor r4c32@r4c2d r4c06@r4bfe r4c34@r4c2f)) (set! r4c39@p? (record-predicate r4c32@r4c2d)) (set! r4c3b@make-i/o-encoding-error (record-constructor r4c36@r4c2e)) (set! r4c3d@r4c2c (record-accessor r4c32@r4c2d '0)) (set! r4c3f@i/o-encoding-error? (condition-predicate r4c32@r4c2d)) (set! r4c41@i/o-encoding-error-char (condition-accessor r4c32@r4c2d r4c3d@r4c2c)) (set! r4c43@&i/o-encoding-rtd r4c32@r4c2d) (set! r4c45@&i/o-encoding-rcd r4c36@r4c2e) (set! r4c4b@r4c46 (make-record-type-descriptor '&no-infinities r4ad7@r4ad2 'r4c49 '#f '#f '#())) (set! r4c4d@r4c48 '#f) (set! r4c4f@r4c47 (make-record-constructor-descriptor r4c4b@r4c46 r4adb@r4ad3 r4c4d@r4c48)) (set! r4c52@p? (record-predicate r4c4b@r4c46)) (set! r4c54@make-no-infinities-violation (record-constructor r4c4f@r4c47)) (set! r4c56@no-infinities-violation? (condition-predicate r4c4b@r4c46)) (set! r4c58@&no-infinities-rtd r4c4b@r4c46) (set! r4c5a@&no-infinities-rcd r4c4f@r4c47) (set! r4c60@r4c5b (make-record-type-descriptor '&no-nans r4ad7@r4ad2 'r4c5e '#f '#f '#())) (set! r4c62@r4c5d '#f) (set! r4c64@r4c5c (make-record-constructor-descriptor r4c60@r4c5b r4adb@r4ad3 r4c62@r4c5d)) (set! r4c67@p? (record-predicate r4c60@r4c5b)) (set! r4c69@make-no-nans-violation (record-constructor r4c64@r4c5c)) (set! r4c6b@no-nans-violation? (condition-predicate r4c60@r4c5b)) (set! r4c6d@&no-nans-rtd r4c60@r4c5b) (set! r4c6f@&no-nans-rcd r4c64@r4c5c) (begin (set! r4d60@r4c6f@&no-nans-rcd r4c6f@&no-nans-rcd) (set! r4d5f@r4c6d@&no-nans-rtd r4c6d@&no-nans-rtd) (set! r4d5e@r4c6b@no-nans-violation? r4c6b@no-nans-violation?) (set! r4d5d@r4c69@make-no-nans-violation r4c69@make-no-nans-violation) (set! r4d5c@r4c67@p? r4c67@p?) (set! r4d5b@r4c64@r4c5c r4c64@r4c5c) (set! r4d5a@r4c62@r4c5d r4c62@r4c5d) (set! r4d59@r4c60@r4c5b r4c60@r4c5b) (set! r4d58@r4c5a@&no-infinities-rcd r4c5a@&no-infinities-rcd) (set! r4d57@r4c58@&no-infinities-rtd r4c58@&no-infinities-rtd) (set! r4d56@r4c56@no-infinities-violation? r4c56@no-infinities-violation?) (set! r4d55@r4c54@make-no-infinities-violation r4c54@make-no-infinities-violation) (set! r4d54@r4c52@p? r4c52@p?) (set! r4d53@r4c4f@r4c47 r4c4f@r4c47) (set! r4d52@r4c4d@r4c48 r4c4d@r4c48) (set! r4d51@r4c4b@r4c46 r4c4b@r4c46) (set! r4d50@r4c45@&i/o-encoding-rcd r4c45@&i/o-encoding-rcd) (set! r4d4f@r4c43@&i/o-encoding-rtd r4c43@&i/o-encoding-rtd) (set! r4d4e@r4c41@i/o-encoding-error-char r4c41@i/o-encoding-error-char) (set! r4d4d@r4c3f@i/o-encoding-error? r4c3f@i/o-encoding-error?) (set! r4d4c@r4c3d@r4c2c r4c3d@r4c2c) (set! r4d4b@r4c3b@make-i/o-encoding-error r4c3b@make-i/o-encoding-error) (set! r4d4a@r4c39@p? r4c39@p?) (set! r4d49@r4c36@r4c2e r4c36@r4c2e) (set! r4d48@r4c34@r4c2f r4c34@r4c2f) (set! r4d47@r4c32@r4c2d r4c32@r4c2d) (set! r4d46@r4c2a@&i/o-decoding-rcd r4c2a@&i/o-decoding-rcd) (set! r4d45@r4c28@&i/o-decoding-rtd r4c28@&i/o-decoding-rtd) (set! r4d44@r4c26@i/o-decoding-error? r4c26@i/o-decoding-error?) (set! r4d43@r4c24@make-i/o-decoding-error r4c24@make-i/o-decoding-error) (set! r4d42@r4c22@p? r4c22@p?) (set! r4d41@r4c1f@r4c17 r4c1f@r4c17) (set! r4d40@r4c1d@r4c18 r4c1d@r4c18) (set! r4d3f@r4c1b@r4c16 r4c1b@r4c16) (set! r4d3e@r4c15@&i/o-port-rcd r4c15@&i/o-port-rcd) (set! r4d3d@r4c13@&i/o-port-rtd r4c13@&i/o-port-rtd) (set! r4d3c@r4c11@i/o-error-port r4c11@i/o-error-port) (set! r4d3b@r4c0f@i/o-port-error? r4c0f@i/o-port-error?) (set! r4d3a@r4c0d@r4bfc r4c0d@r4bfc) (set! r4d39@r4c0b@make-i/o-port-error r4c0b@make-i/o-port-error) (set! r4d38@r4c09@p? r4c09@p?) (set! r4d37@r4c06@r4bfe r4c06@r4bfe) (set! r4d36@r4c04@r4bff r4c04@r4bff) (set! r4d35@r4c02@r4bfd r4c02@r4bfd) (set! r4d34@r4bfa@&i/o-file-does-not-exist-rcd r4bfa@&i/o-file-does-not-exist-rcd) (set! r4d33@r4bf8@&i/o-file-does-not-exist-rtd r4bf8@&i/o-file-does-not-exist-rtd) (set! r4d32@r4bf6@i/o-file-does-not-exist-error? r4bf6@i/o-file-does-not-exist-error?) (set! r4d31@r4bf4@make-i/o-file-does-not-exist-error r4bf4@make-i/o-file-does-not-exist-error) (set! r4d30@r4bf2@p? r4bf2@p?) (set! r4d2f@r4bef@r4be7 r4bef@r4be7) (set! r4d2e@r4bed@r4be8 r4bed@r4be8) (set! r4d2d@r4beb@r4be6 r4beb@r4be6) (set! r4d2c@r4be5@&i/o-file-already-exists-rcd r4be5@&i/o-file-already-exists-rcd) (set! r4d2b@r4be3@&i/o-file-already-exists-rtd r4be3@&i/o-file-already-exists-rtd) (set! r4d2a@r4be1@i/o-file-already-exists-error? r4be1@i/o-file-already-exists-error?) (set! r4d29@r4bdf@make-i/o-file-already-exists-error r4bdf@make-i/o-file-already-exists-error) (set! r4d28@r4bdd@p? r4bdd@p?) (set! r4d27@r4bda@r4bd2 r4bda@r4bd2) (set! r4d26@r4bd8@r4bd3 r4bd8@r4bd3) (set! r4d25@r4bd6@r4bd1 r4bd6@r4bd1) (set! r4d24@r4bd0@&i/o-file-is-read-only-rcd r4bd0@&i/o-file-is-read-only-rcd) (set! r4d23@r4bce@&i/o-file-is-read-only-rtd r4bce@&i/o-file-is-read-only-rtd) (set! r4d22@r4bcc@i/o-file-is-read-only-error? r4bcc@i/o-file-is-read-only-error?) (set! r4d21@r4bca@make-i/o-file-is-read-only-error r4bca@make-i/o-file-is-read-only-error) (set! r4d20@r4bc8@p? r4bc8@p?) (set! r4d1f@r4bc5@r4bbd r4bc5@r4bbd) (set! r4d1e@r4bc3@r4bbe r4bc3@r4bbe) (set! r4d1d@r4bc1@r4bbc r4bc1@r4bbc) (set! r4d1c@r4bbb@&i/o-file-protection-rcd r4bbb@&i/o-file-protection-rcd) (set! r4d1b@r4bb9@&i/o-file-protection-rtd r4bb9@&i/o-file-protection-rtd) (set! r4d1a@r4bb7@i/o-file-protection-error? r4bb7@i/o-file-protection-error?) (set! r4d19@r4bb5@make-i/o-file-protection-error r4bb5@make-i/o-file-protection-error) (set! r4d18@r4bb3@p? r4bb3@p?) (set! r4d17@r4bb0@r4ba8 r4bb0@r4ba8) (set! r4d16@r4bae@r4ba9 r4bae@r4ba9) (set! r4d15@r4bac@r4ba7 r4bac@r4ba7) (set! r4d14@r4ba6@&i/o-filename-rcd r4ba6@&i/o-filename-rcd) (set! r4d13@r4ba4@&i/o-filename-rtd r4ba4@&i/o-filename-rtd) (set! r4d12@r4ba2@i/o-error-filename r4ba2@i/o-error-filename) (set! r4d11@r4ba0@i/o-filename-error? r4ba0@i/o-filename-error?) (set! r4d10@r4b9e@r4b8d r4b9e@r4b8d) (set! r4d0f@r4b9c@make-i/o-filename-error r4b9c@make-i/o-filename-error) (set! r4d0e@r4b9a@p? r4b9a@p?) (set! r4d0d@r4b97@r4b8f r4b97@r4b8f) (set! r4d0c@r4b95@r4b90 r4b95@r4b90) (set! r4d0b@r4b93@r4b8e r4b93@r4b8e) (set! r4d0a@r4b8b@&i/o-invalid-position-rcd r4b8b@&i/o-invalid-position-rcd) (set! r4d09@r4b89@&i/o-invalid-position-rtd r4b89@&i/o-invalid-position-rtd) (set! r4d08@r4b87@i/o-error-position r4b87@i/o-error-position) (set! r4d07@r4b85@i/o-invalid-position-error? r4b85@i/o-invalid-position-error?) (set! r4d06@r4b83@r4b72 r4b83@r4b72) (set! r4d05@r4b81@make-i/o-invalid-position-error r4b81@make-i/o-invalid-position-error) (set! r4d04@r4b7f@p? r4b7f@p?) (set! r4d03@r4b7c@r4b74 r4b7c@r4b74) (set! r4d02@r4b7a@r4b75 r4b7a@r4b75) (set! r4d01@r4b78@r4b73 r4b78@r4b73) (set! r4d00@r4b70@&i/o-write-rcd r4b70@&i/o-write-rcd) (set! r4cff@r4b6e@&i/o-write-rtd r4b6e@&i/o-write-rtd) (set! r4cfe@r4b6c@i/o-write-error? r4b6c@i/o-write-error?) (set! r4cfd@r4b6a@make-i/o-write-error r4b6a@make-i/o-write-error) (set! r4cfc@r4b68@p? r4b68@p?) (set! r4cfb@r4b65@r4b5d r4b65@r4b5d) (set! r4cfa@r4b63@r4b5e r4b63@r4b5e) (set! r4cf9@r4b61@r4b5c r4b61@r4b5c) (set! r4cf8@r4b5b@&i/o-read-rcd r4b5b@&i/o-read-rcd) (set! r4cf7@r4b59@&i/o-read-rtd r4b59@&i/o-read-rtd) (set! r4cf6@r4b57@i/o-read-error? r4b57@i/o-read-error?) (set! r4cf5@r4b55@make-i/o-read-error r4b55@make-i/o-read-error) (set! r4cf4@r4b53@p? r4b53@p?) (set! r4cf3@r4b50@r4b48 r4b50@r4b48) (set! r4cf2@r4b4e@r4b49 r4b4e@r4b49) (set! r4cf1@r4b4c@r4b47 r4b4c@r4b47) (set! r4cf0@r4b46@&i/o-rcd r4b46@&i/o-rcd) (set! r4cef@r4b44@&i/o-rtd r4b44@&i/o-rtd) (set! r4cee@r4b42@i/o-error? r4b42@i/o-error?) (set! r4ced@r4b40@make-i/o-error r4b40@make-i/o-error) (set! r4cec@r4b3e@p? r4b3e@p?) (set! r4ceb@r4b3b@r4b33 r4b3b@r4b33) (set! r4cea@r4b39@r4b34 r4b39@r4b34) (set! r4ce9@r4b37@r4b32 r4b37@r4b32) (set! r4ce8@r4b31@&undefined-rcd r4b31@&undefined-rcd) (set! r4ce7@r4b2f@&undefined-rtd r4b2f@&undefined-rtd) (set! r4ce6@r4b2d@undefined-violation? r4b2d@undefined-violation?) (set! r4ce5@r4b2b@make-undefined-violation r4b2b@make-undefined-violation) (set! r4ce4@r4b29@p? r4b29@p?) (set! r4ce3@r4b26@r4b1e r4b26@r4b1e) (set! r4ce2@r4b24@r4b1f r4b24@r4b1f) (set! r4ce1@r4b22@r4b1d r4b22@r4b1d) (set! r4ce0@r4b1c@&syntax-rcd r4b1c@&syntax-rcd) (set! r4cdf@r4b1a@&syntax-rtd r4b1a@&syntax-rtd) (set! r4cde@r4b18@syntax-violation-subform r4b18@syntax-violation-subform) (set! r4cdd@r4b16@syntax-violation-form r4b16@syntax-violation-form) (set! r4cdc@r4b14@syntax-violation? r4b14@syntax-violation?) (set! r4cdb@r4b12@r4aff r4b12@r4aff) (set! r4cda@r4b10@r4afd r4b10@r4afd) (set! r4cd9@r4b0e@make-syntax-violation r4b0e@make-syntax-violation) (set! r4cd8@r4b0c@p? r4b0c@p?) (set! r4cd7@r4b09@r4b01 r4b09@r4b01) (set! r4cd6@r4b07@r4b02 r4b07@r4b02) (set! r4cd5@r4b05@r4b00 r4b05@r4b00) (set! r4cd4@r4afb@&lexical-rcd r4afb@&lexical-rcd) (set! r4cd3@r4af9@&lexical-rtd r4af9@&lexical-rtd) (set! r4cd2@r4af7@lexical-violation? r4af7@lexical-violation?) (set! r4cd1@r4af5@make-lexical-violation r4af5@make-lexical-violation) (set! r4cd0@r4af3@p? r4af3@p?) (set! r4ccf@r4af0@r4ae8 r4af0@r4ae8) (set! r4cce@r4aee@r4ae9 r4aee@r4ae9) (set! r4ccd@r4aec@r4ae7 r4aec@r4ae7) (set! r4ccc@r4ae6@&implementation-restriction-rcd r4ae6@&implementation-restriction-rcd) (set! r4ccb@r4ae4@&implementation-restriction-rtd r4ae4@&implementation-restriction-rtd) (set! r4cca@r4ae2@implementation-restriction-violation? r4ae2@implementation-restriction-violation?) (set! r4cc9@r4ae0@make-implementation-restriction-violation r4ae0@make-implementation-restriction-violation) (set! r4cc8@r4ade@p? r4ade@p?) (set! r4cc7@r4adb@r4ad3 r4adb@r4ad3) (set! r4cc6@r4ad9@r4ad4 r4ad9@r4ad4) (set! r4cc5@r4ad7@r4ad2 r4ad7@r4ad2) (set! r4cc4@r4ad1@&non-continuable-rcd r4ad1@&non-continuable-rcd) (set! r4cc3@r4acf@&non-continuable-rtd r4acf@&non-continuable-rtd) (set! r4cc2@r4acd@non-continuable-violation? r4acd@non-continuable-violation?) (set! r4cc1@r4acb@make-non-continuable-violation r4acb@make-non-continuable-violation) (set! r4cc0@r4ac9@p? r4ac9@p?) (set! r4cbf@r4ac6@r4abe r4ac6@r4abe) (set! r4cbe@r4ac4@r4abf r4ac4@r4abf) (set! r4cbd@r4ac2@r4abd r4ac2@r4abd) (set! r4cbc@r4abc@&who-rcd r4abc@&who-rcd) (set! r4cbb@r4aba@&who-rtd r4aba@&who-rtd) (set! r4cba@r4ab8@condition-who r4ab8@condition-who) (set! r4cb9@r4ab6@who-condition? r4ab6@who-condition?) (set! r4cb8@r4ab4@r4aa3 r4ab4@r4aa3) (set! r4cb7@r4ab2@make-who-condition r4ab2@make-who-condition) (set! r4cb6@r4ab0@p? r4ab0@p?) (set! r4cb5@r4aad@r4aa5 r4aad@r4aa5) (set! r4cb4@r4aab@r4aa6 r4aab@r4aa6) (set! r4cb3@r4aa9@r4aa4 r4aa9@r4aa4) (set! r4cb2@r4aa1@&irritants-rcd r4aa1@&irritants-rcd) (set! r4cb1@r4a9f@&irritants-rtd r4a9f@&irritants-rtd) (set! r4cb0@r4a9d@condition-irritants r4a9d@condition-irritants) (set! r4caf@r4a9b@irritants-condition? r4a9b@irritants-condition?) (set! r4cae@r4a99@r4a88 r4a99@r4a88) (set! r4cad@r4a97@make-irritants-condition r4a97@make-irritants-condition) (set! r4cac@r4a95@p? r4a95@p?) (set! r4cab@r4a92@r4a8a r4a92@r4a8a) (set! r4caa@r4a90@r4a8b r4a90@r4a8b) (set! r4ca9@r4a8e@r4a89 r4a8e@r4a89) (set! r4ca8@r4a86@&assertion-rcd r4a86@&assertion-rcd) (set! r4ca7@r4a84@&assertion-rtd r4a84@&assertion-rtd) (set! r4ca6@r4a82@assertion-violation? r4a82@assertion-violation?) (set! r4ca5@r4a80@make-assertion-violation r4a80@make-assertion-violation) (set! r4ca4@r4a7e@p? r4a7e@p?) (set! r4ca3@r4a7b@r4a73 r4a7b@r4a73) (set! r4ca2@r4a79@r4a74 r4a79@r4a74) (set! r4ca1@r4a77@r4a72 r4a77@r4a72) (set! r4ca0@r4a71@&violation-rcd r4a71@&violation-rcd) (set! r4c9f@r4a6f@&violation-rtd r4a6f@&violation-rtd) (set! r4c9e@r4a6d@violation? r4a6d@violation?) (set! r4c9d@r4a6b@make-violation r4a6b@make-violation) (set! r4c9c@r4a69@p? r4a69@p?) (set! r4c9b@r4a66@r4a5e r4a66@r4a5e) (set! r4c9a@r4a64@r4a5f r4a64@r4a5f) (set! r4c99@r4a62@r4a5d r4a62@r4a5d) (set! r4c98@r4a5c@&error-rcd r4a5c@&error-rcd) (set! r4c97@r4a5a@&error-rtd r4a5a@&error-rtd) (set! r4c96@r4a58@error? r4a58@error?) (set! r4c95@r4a56@make-error r4a56@make-error) (set! r4c94@r4a54@p? r4a54@p?) (set! r4c93@r4a51@r4a49 r4a51@r4a49) (set! r4c92@r4a4f@r4a4a r4a4f@r4a4a) (set! r4c91@r4a4d@r4a48 r4a4d@r4a48) (set! r4c90@r4a47@&serious-rcd r4a47@&serious-rcd) (set! r4c8f@r4a45@&serious-rtd r4a45@&serious-rtd) (set! r4c8e@r4a43@serious-condition? r4a43@serious-condition?) (set! r4c8d@r4a41@make-serious-condition r4a41@make-serious-condition) (set! r4c8c@r4a3f@p? r4a3f@p?) (set! r4c8b@r4a3c@r4a34 r4a3c@r4a34) (set! r4c8a@r4a3a@r4a35 r4a3a@r4a35) (set! r4c89@r4a38@r4a33 r4a38@r4a33) (set! r4c88@r4a32@&warning-rcd r4a32@&warning-rcd) (set! r4c87@r4a30@&warning-rtd r4a30@&warning-rtd) (set! r4c86@r4a2e@warning? r4a2e@warning?) (set! r4c85@r4a2c@make-warning r4a2c@make-warning) (set! r4c84@r4a2a@p? r4a2a@p?) (set! r4c83@r4a27@r4a1f r4a27@r4a1f) (set! r4c82@r4a25@r4a20 r4a25@r4a20) (set! r4c81@r4a23@r4a1e r4a23@r4a1e) (set! r4c80@r4a1d@&message-rcd r4a1d@&message-rcd) (set! r4c7f@r4a1b@&message-rtd r4a1b@&message-rtd) (set! r4c7e@r4a19@condition-message r4a19@condition-message) (set! r4c7d@r4a17@message-condition? r4a17@message-condition?) (set! r4c7c@r4a15@r4a04 r4a15@r4a04) (set! r4c7b@r4a13@make-message-condition r4a13@make-message-condition) (set! r4c7a@r4a11@p? r4a11@p?) (set! r4c79@r4a0e@r4a06 r4a0e@r4a06) (set! r4c78@r4a0c@r4a07 r4a0c@r4a07) (set! r4c77@r4a0a@r4a05 r4a0a@r4a05) (set! r4c76@r49be@&condition-rcd r49be@&condition-rcd) (set! r4c75@r49bc@&condition-rtd r49bc@&condition-rtd) (set! r4c74@r49ba@make-&condition r49ba@make-&condition) (set! r4c73@r49b8@&condition? r49b8@&condition?) (set! r4c72@r49b5@r49ad r49b5@r49ad) (set! r4c71@r49b3@r49ae r49b3@r49ae) (set! r4c70@r49b1@r49ac r49b1@r49ac)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (r28af@r2864@current-primitive-locations (lambda (r5196@x) ((lambda (r5198@t) (if r5198@t (cdr r5198@t) '#f)) (assq r5196@x '((&no-nans-rcd . r4d60@r4c6f@&no-nans-rcd) (&no-nans-rtd . r4d5f@r4c6d@&no-nans-rtd) (&no-infinities-rcd . r4d58@r4c5a@&no-infinities-rcd) (&no-infinities-rtd . r4d57@r4c58@&no-infinities-rtd) (&i/o-encoding-rcd . r4d50@r4c45@&i/o-encoding-rcd) (&i/o-encoding-rtd . r4d4f@r4c43@&i/o-encoding-rtd) (&i/o-decoding-rcd . r4d46@r4c2a@&i/o-decoding-rcd) (&i/o-decoding-rtd . r4d45@r4c28@&i/o-decoding-rtd) (&i/o-port-rcd . r4d3e@r4c15@&i/o-port-rcd) (&i/o-port-rtd . r4d3d@r4c13@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . r4d34@r4bfa@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . r4d33@r4bf8@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . r4d2c@r4be5@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . r4d2b@r4be3@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . r4d24@r4bd0@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . r4d23@r4bce@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . r4d1c@r4bbb@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . r4d1b@r4bb9@&i/o-file-protection-rtd) (&i/o-filename-rcd . r4d14@r4ba6@&i/o-filename-rcd) (&i/o-filename-rtd . r4d13@r4ba4@&i/o-filename-rtd) (&i/o-invalid-position-rcd . r4d0a@r4b8b@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . r4d09@r4b89@&i/o-invalid-position-rtd) (&i/o-write-rcd . r4d00@r4b70@&i/o-write-rcd) (&i/o-write-rtd . r4cff@r4b6e@&i/o-write-rtd) (&i/o-read-rcd . r4cf8@r4b5b@&i/o-read-rcd) (&i/o-read-rtd . r4cf7@r4b59@&i/o-read-rtd) (&i/o-rcd . r4cf0@r4b46@&i/o-rcd) (&i/o-rtd . r4cef@r4b44@&i/o-rtd) (&undefined-rcd . r4ce8@r4b31@&undefined-rcd) (&undefined-rtd . r4ce7@r4b2f@&undefined-rtd) (&syntax-rcd . r4ce0@r4b1c@&syntax-rcd) (&syntax-rtd . r4cdf@r4b1a@&syntax-rtd) (&lexical-rcd . r4cd4@r4afb@&lexical-rcd) (&lexical-rtd . r4cd3@r4af9@&lexical-rtd) (&implementation-restriction-rcd . r4ccc@r4ae6@&implementation-restriction-rcd) (&implementation-restriction-rtd . r4ccb@r4ae4@&implementation-restriction-rtd) (&non-continuable-rcd . r4cc4@r4ad1@&non-continuable-rcd) (&non-continuable-rtd . r4cc3@r4acf@&non-continuable-rtd) (&who-rcd . r4cbc@r4abc@&who-rcd) (&who-rtd . r4cbb@r4aba@&who-rtd) (&irritants-rcd . r4cb2@r4aa1@&irritants-rcd) (&irritants-rtd . r4cb1@r4a9f@&irritants-rtd) (&assertion-rcd . r4ca8@r4a86@&assertion-rcd) (&assertion-rtd . r4ca7@r4a84@&assertion-rtd) (&violation-rcd . r4ca0@r4a71@&violation-rcd) (&violation-rtd . r4c9f@r4a6f@&violation-rtd) (&error-rcd . r4c98@r4a5c@&error-rcd) (&error-rtd . r4c97@r4a5a@&error-rtd) (&serious-rcd . r4c90@r4a47@&serious-rcd) (&serious-rtd . r4c8f@r4a45@&serious-rtd) (&warning-rcd . r4c88@r4a32@&warning-rcd) (&warning-rtd . r4c87@r4a30@&warning-rtd) (&message-rcd . r4c80@r4a1d@&message-rcd) (&message-rtd . r4c7f@r4a1b@&message-rtd) (&condition-rcd . r4c76@r49be@&condition-rcd) (&condition-rtd . r4c75@r49bc@&condition-rtd) (syntax-error . r499e@r2fa4@syntax-error) (syntax-dispatch . r4933@r2ebf@syntax-dispatch) (load . r4e91@r4d7c@load) (interaction-environment . r49a6@r2fb4@interaction-environment) (library-path . r2ac6@r2955@library-path) (make-parameter . r285e@r2788@make-parameter) (make-variable-transformer . r48f1@r2cec@make-variable-transformer) (identifier? . r49a1@r2faa@identifier?) (generate-temporaries . r4997@r2f96@generate-temporaries) (free-identifier=? . r4998@r2f98@free-identifier=?) (syntax->datum . r49a3@r2fae@syntax->datum) (datum->syntax . r49a2@r2fac@datum->syntax) (bound-identifier=? . r4999@r2f9a@bound-identifier=?) (make-i/o-write-error . r4cfd@r4b6a@make-i/o-write-error) (make-i/o-read-error . r4cf5@r4b55@make-i/o-read-error) (make-i/o-port-error . r4d39@r4c0b@make-i/o-port-error) (make-i/o-invalid-position-error . r4d05@r4b81@make-i/o-invalid-position-error) (make-i/o-filename-error . r4d0f@r4b9c@make-i/o-filename-error) (make-i/o-file-protection-error . r4d19@r4bb5@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . r4d21@r4bca@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . r4d31@r4bf4@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . r4d29@r4bdf@make-i/o-file-already-exists-error) (make-i/o-error . r4ced@r4b40@make-i/o-error) (make-i/o-encoding-error . r4d4b@r4c3b@make-i/o-encoding-error) (make-i/o-decoding-error . r4d43@r4c24@make-i/o-decoding-error) (i/o-write-error? . r4cfe@r4b6c@i/o-write-error?) (i/o-read-error? . r4cf6@r4b57@i/o-read-error?) (i/o-port-error? . r4d3b@r4c0f@i/o-port-error?) (i/o-invalid-position-error? . r4d07@r4b85@i/o-invalid-position-error?) (i/o-filename-error? . r4d11@r4ba0@i/o-filename-error?) (i/o-file-protection-error? . r4d1a@r4bb7@i/o-file-protection-error?) (i/o-file-is-read-only-error? . r4d22@r4bcc@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . r4d32@r4bf6@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . r4d2a@r4be1@i/o-file-already-exists-error?) (i/o-error? . r4cee@r4b42@i/o-error?) (i/o-error-position . r4d08@r4b87@i/o-error-position) (i/o-error-port . r4d3c@r4c11@i/o-error-port) (i/o-error-filename . r4d12@r4ba2@i/o-error-filename) (i/o-encoding-error? . r4d4d@r4c3f@i/o-encoding-error?) (i/o-encoding-error-char . r4d4e@r4c41@i/o-encoding-error-char) (i/o-decoding-error? . r4d44@r4c26@i/o-decoding-error?) (scheme-report-environment . r498e@r2f84@scheme-report-environment) (null-environment . r498d@r2f82@null-environment) (command-line . r4e8e@r4d76@command-line) (eval . r4990@r2f88@eval) (environment . r498c@r2f80@environment) (who-condition? . r4cb9@r4ab6@who-condition?) (warning? . r4c86@r4a2e@warning?) (violation? . r4c9e@r4a6d@violation?) (undefined-violation? . r4ce6@r4b2d@undefined-violation?) (syntax-violation? . r4cdc@r4b14@syntax-violation?) (syntax-violation-subform . r4cde@r4b18@syntax-violation-subform) (syntax-violation-form . r4cdd@r4b16@syntax-violation-form) (syntax-violation . r49a0@r2fa8@syntax-violation) (serious-condition? . r4c8e@r4a43@serious-condition?) (non-continuable-violation? . r4cc2@r4acd@non-continuable-violation?) (message-condition? . r4c7d@r4a17@message-condition?) (make-who-condition . r4cb7@r4ab2@make-who-condition) (make-warning . r4c85@r4a2c@make-warning) (make-violation . r4c9d@r4a6b@make-violation) (make-undefined-violation . r4ce5@r4b2b@make-undefined-violation) (make-syntax-violation . r4cd9@r4b0e@make-syntax-violation) (make-serious-condition . r4c8d@r4a41@make-serious-condition) (make-non-continuable-violation . r4cc1@r4acb@make-non-continuable-violation) (make-message-condition . r4c7b@r4a13@make-message-condition) (make-lexical-violation . r4cd1@r4af5@make-lexical-violation) (make-irritants-condition . r4cad@r4a97@make-irritants-condition) (make-implementation-restriction-violation . r4cc9@r4ae0@make-implementation-restriction-violation) (make-error . r4c95@r4a56@make-error) (make-assertion-violation . r4ca5@r4a80@make-assertion-violation) (lexical-violation? . r4cd2@r4af7@lexical-violation?) (irritants-condition? . r4caf@r4a9b@irritants-condition?) (implementation-restriction-violation? . r4cca@r4ae2@implementation-restriction-violation?) (error? . r4c96@r4a58@error?) (condition-who . r4cba@r4ab8@condition-who) (condition-message . r4c7e@r4a19@condition-message) (condition-irritants . r4cb0@r4a9d@condition-irritants) (assertion-violation? . r4ca6@r4a82@assertion-violation?) (no-nans-violation? . r4d5e@r4c6b@no-nans-violation?) (no-infinities-violation? . r4d56@r4c56@no-infinities-violation?) (make-no-nans-violation . r4d5d@r4c69@make-no-nans-violation) (make-no-infinities-violation . r4d55@r4c54@make-no-infinities-violation) (assertion-error . r499d@r2fa2@assertion-error)))))) (r2ad6@r2975@install-library 'r5173 '(mosh interaction) '() '() '() '() '((regexp? . r516b) (alist->eq-hash-table . r5168) (format . r5165) (string-split . r515a) (call-process . r5154) (set-current-directory! . r5150) (expand-path . r514f) (current-directory . r514e) (%spawn . r514d) (%waitpid . r514c) (%ffi-supported? . r514b) (%ffi-pointer-ref . r514a) (%ffi-pointer->string . r5149) (%ffi-call->string-or-zero . r5148) (%ffi-call->double . r5147) (%ffi-call->void* . r5146) (%ffi-call->void . r5145) (%ffi-call->int . r5144) (%ffi-lookup . r5143) (%ffi-open . r5142) (%fork . r5141) (%pipe . r5140) (p . r513f) (mutex-try-lock! . r5137) (mutex-unlock! . r5136) (mutex-lock! . r5135) (mutex? . r5134) (make-mutex . r5133) (condition-variable-notify-all! . r5132) (condition-variable-notify! . r5131) (condition-variable-wait! . r5130) (make-condition-variable . r512f) (string-upcase . r5118) (string-titlecase . r5117) (string-normalize-nfkd . r5116) (string-normalize-nfkc . r5115) (string-normalize-nfd . r5114) (string-normalize-nfc . r5113) (string-foldcase . r5112) (string-downcase . r5111) (string-ci>? . r5110) (string-ci>=? . r510f) (string-ci=? . r510e) (string-ci<? . r510d) (string-ci<=? . r510c) (char-whitespace? . r510b) (char-upper-case? . r510a) (char-title-case? . r5109) (char-numeric? . r5108) (char-lower-case? . r5107) (char-general-category . r5106) (char-upcase . r5105) (char-titlecase . r5104) (char-foldcase . r5103) (char-downcase . r5102) (char-ci>? . r5101) (char-ci>=? . r5100) (char-ci=? . r50ff) (char-ci<? . r50fe) (char-ci<=? . r50fd) (char-alphabetic? . r50fc) (make-variable-transformer . r2ceb) (identifier? . r2fa9) (generate-temporaries . r2f95) (free-identifier=? . r2f97) (syntax->datum . r2fad) (datum->syntax . r2fab) (bound-identifier=? . r2f99) (record-type-descriptor? . r50fb) (record-predicate . r50fa) (record-mutator . r50f9) (record-constructor . r50f8) (record-accessor . r50f7) (make-record-type-descriptor . r50f6) (make-record-constructor-descriptor . r50f5) (record? . r50f4) (record-type-uid . r50f3) (record-type-sealed? . r50f2) (record-type-parent . r50f1) (record-type-opaque? . r50f0) (record-type-name . r50ef) (record-type-generative? . r50ee) (record-type-field-names . r50ed) (record-rtd . r50ec) (record-field-mutable? . r50eb) (delete-file . r50ea) (file-exists? . r50e9) (vector-sort! . r50e8) (vector-sort . r50e7) (list-sort . r50e6) (symbol-hash . r50e5) (string-ci-hash . r50e4) (string-hash . r50e3) (equal-hash . r50e2) (hashtable-equivalence-function . r50e1) (make-hashtable . r50e0) (hashtable-hash-function . r50df) (make-eqv-hashtable . r50de) (make-eq-hashtable . r50dd) (hashtable? . r50dc) (hashtable-update! . r50db) (hashtable-size . r50da) (hashtable-set! . r50d9) (hashtable-ref . r50d8) (hashtable-mutable? . r50d7) (hashtable-keys . r50d6) (hashtable-entries . r50d5) (hashtable-delete! . r50d4) (hashtable-copy . r50d3) (hashtable-contains? . r50d2) (hashtable-clear! . r50d1) (call-with-output-file . r50d0) (call-with-input-file . r50cf) (write-char . r50ce) (write . r50cd) (with-output-to-file . r50cc) (with-input-from-file . r50cb) (read-char . r50ca) (read . r50c9) (peek-char . r50c8) (open-output-file . r50c7) (open-input-file . r50c6) (newline . r50c5) (display . r50c4) (close-output-port . r50c3) (close-input-port . r50c2) (eof-object? . r50c1) (eof-object . r50c0) (current-error-port . r50bf) (current-output-port . r50be) (current-input-port . r50bd) (output-port? . r50bc) (input-port? . r50bb) (utf-8-codec . r50ba) (utf-16-codec . r50b9) (transcoder-error-handling-mode . r50b8) (transcoder-eol-style . r50b7) (transcoder-codec . r50b6) (transcoded-port . r50b5) (textual-port? . r50b4) (string->bytevector . r50b3) (standard-output-port . r50b2) (standard-input-port . r50b1) (standard-error-port . r50b0) (set-port-position! . r50af) (put-u8 . r50ae) (put-string . r50ad) (put-datum . r50ac) (put-char . r50ab) (put-bytevector . r50aa) (port? . r50a9) (port-transcoder . r50a8) (port-position . r50a7) (port-has-set-port-position!? . r50a6) (port-has-port-position? . r50a5) (port-eof? . r50a4) (output-port-buffer-mode . r50a3) (open-string-output-port . r50a2) (open-string-input-port . r50a1) (open-file-output-port . r50a0) (open-file-input/output-port . r509f) (open-file-input-port . r509e) (open-bytevector-output-port . r509d) (open-bytevector-input-port . r509c) (native-transcoder . r509b) (native-eol-style . r509a) (make-transcoder . r5099) (latin-1-codec . r5098) (make-i/o-write-error . r4b69) (make-i/o-read-error . r4b54) (make-i/o-port-error . r4c0a) (make-i/o-invalid-position-error . r4b80) (make-i/o-filename-error . r4b9b) (make-i/o-file-protection-error . r4bb4) (make-i/o-file-is-read-only-error . r4bc9) (make-i/o-file-does-not-exist-error . r4bf3) (make-i/o-file-already-exists-error . r4bde) (make-i/o-error . r4b3f) (make-i/o-encoding-error . r4c3a) (make-i/o-decoding-error . r4c23) (make-custom-textual-output-port . r5097) (make-custom-textual-input/output-port . r5096) (make-custom-textual-input-port . r5095) (make-custom-binary-output-port . r5094) (make-custom-binary-input/output-port . r5093) (make-custom-binary-input-port . r5092) (make-bytevector . r5091) (lookahead-u8 . r5090) (lookahead-char . r508f) (i/o-write-error? . r4b6b) (i/o-read-error? . r4b56) (i/o-port-error? . r4c0e) (i/o-invalid-position-error? . r4b84) (i/o-filename-error? . r4b9f) (i/o-file-protection-error? . r4bb6) (i/o-file-is-read-only-error? . r4bcb) (i/o-file-does-not-exist-error? . r4bf5) (i/o-file-already-exists-error? . r4be0) (i/o-error? . r4b41) (i/o-error-position . r4b86) (i/o-error-port . r4c10) (i/o-error-filename . r4ba1) (i/o-encoding-error? . r4c3e) (i/o-encoding-error-char . r4c40) (i/o-decoding-error? . r4c25) (get-u8 . r508e) (get-string-n! . r508d) (get-string-n . r508c) (get-string-all . r508b) (get-line . r508a) (get-datum . r5089) (get-char . r5088) (get-bytevector-some . r5087) (get-bytevector-n! . r5086) (get-bytevector-n . r5085) (get-bytevector-all . r5084) (flush-output-port . r5083) (close-port . r5082) (exit . r507a) (command-line . r4d75) (string-fill! . r5079) (string-set! . r5078) (set-cdr! . r5077) (set-car! . r5076) (remove . r5075) (remv . r5074) (remp . r5073) (remq . r5072) (partition . r5071) (memv . r5070) (memq . r506f) (memp . r506e) (member . r506d) (exists . r506c) (for-all . r506b) (fold-right . r506a) (fold-left . r5069) (find . r5068) (filter . r5067) (cons* . r5066) (assv . r5065) (assq . r5064) (assp . r5063) (assoc . r5062) (call-with-string-output-port . r5061) (call-with-port . r5060) (call-with-bytevector-output-port . r505f) (bytevector->string . r505e) (buffer-mode? . r505d) (binary-port? . r505c) (with-exception-handler . r505b) (raise-continuable . r505a) (raise . r5059) (eval . r2f87) (environment . r2f7f) (make-enumeration . r5058) (enum-set=? . r5057) (enum-set-universe . r5056) (enum-set-union . r5055) (enum-set-subset? . r5054) (enum-set-projection . r5053) (enum-set-member? . r5052) (enum-set-intersection . r5051) (enum-set-indexer . r5050) (enum-set-difference . r504f) (enum-set-constructor . r504e) (enum-set-complement . r504d) (enum-set->list . r504c) (who-condition? . r4ab5) (warning? . r4a2d) (violation? . r4a6c) (undefined-violation? . r4b2c) (syntax-violation? . r4b13) (syntax-violation-subform . r4b17) (syntax-violation-form . r4b15) (syntax-violation . r2fa7) (simple-conditions . r504b) (serious-condition? . r4a42) (non-continuable-violation? . r4acc) (message-condition? . r4a16) (make-who-condition . r4ab1) (make-warning . r4a2b) (make-violation . r4a6a) (make-undefined-violation . r4b2a) (make-syntax-violation . r4b0d) (make-serious-condition . r4a40) (make-non-continuable-violation . r4aca) (make-message-condition . r4a12) (make-lexical-violation . r4af4) (make-irritants-condition . r4a96) (make-implementation-restriction-violation . r4adf) (make-error . r4a55) (make-assertion-violation . r4a7f) (lexical-violation? . r4af6) (irritants-condition? . r4a9a) (implementation-restriction-violation? . r4ae1) (error? . r4a57) (condition-who . r4ab7) (condition-predicate . r504a) (condition-message . r4a18) (condition-irritants . r4a9c) (condition-accessor . r5049) (condition . r5048) (assertion-violation? . r4a81) (condition? . r5047) (utf32->string . r5046) (utf16->string . r5045) (utf8->string . r5044) (uint-list->bytevector . r5043) (u8-list->bytevector . r5042) (string->utf8 . r5041) (string->utf32 . r5040) (string->utf16 . r503f) (sint-list->bytevector . r503e) (native-endianness . r503d) (bytevector? . r503c) (bytevector=? . r503b) (bytevector-uint-set! . r503a) (bytevector-uint-ref . r5039) (bytevector-u8-set! . r5038) (bytevector-u8-ref . r5037) (bytevector-u64-set! . r5036) (bytevector-u64-ref . r5035) (bytevector-u64-native-set! . r5034) (bytevector-u64-native-ref . r5033) (bytevector-u32-set! . r5032) (bytevector-u32-ref . r5031) (bytevector-u32-native-set! . r5030) (bytevector-u32-native-ref . r502f) (bytevector-u16-set! . r502e) (bytevector-u16-ref . r502d) (bytevector-u16-native-set! . r502c) (bytevector-u16-native-ref . r502b) (bytevector-sint-set! . r502a) (bytevector-sint-ref . r5029) (bytevector-s8-set! . r5028) (bytevector-s8-ref . r5027) (bytevector-s64-set! . r5026) (bytevector-s64-ref . r5025) (bytevector-s64-native-set! . r5024) (bytevector-s64-native-ref . r5023) (bytevector-s32-set! . r5022) (bytevector-s32-ref . r5021) (bytevector-s32-native-set! . r5020) (bytevector-s32-native-ref . r501f) (bytevector-s16-set! . r501e) (bytevector-s16-ref . r501d) (bytevector-s16-native-set! . r501c) (bytevector-s16-native-ref . r501b) (bytevector-length . r501a) (bytevector-ieee-single-ref . r5019) (bytevector-ieee-single-set! . r5018) (bytevector-ieee-single-native-set! . r5017) (bytevector-ieee-single-native-ref . r5016) (bytevector-ieee-double-set! . r5015) (bytevector-ieee-double-ref . r5014) (bytevector-ieee-double-native-set! . r5013) (bytevector-ieee-double-native-ref . r5012) (bytevector-fill! . r5011) (bytevector-copy! . r5010) (bytevector-copy . r500f) (bytevector->uint-list . r500e) (bytevector->u8-list . r500d) (bytevector->sint-list . r500c) (no-nans-violation? . r4c6a) (no-infinities-violation? . r4c55) (make-no-nans-violation . r4c68) (make-no-infinities-violation . r4c53) (real->flonum . r500b) (flzero? . r500a) (fltruncate . r5009) (fltan . r5008) (flsqrt . r5007) (flsin . r5006) (flround . r5005) (flpositive? . r5004) (flonum? . r5003) (flodd? . r5002) (flnumerator . r5001) (flnegative? . r5000) (flnan? . r4fff) (flmod0 . r4ffe) (flmod . r4ffd) (flmin . r4ffc) (flmax . r4ffb) (fllog . r4ffa) (flinteger? . r4ff9) (flinfinite? . r4ff8) (flfloor . r4ff7) (flfinite? . r4ff6) (flexpt . r4ff5) (flexp . r4ff4) (fleven? . r4ff3) (fldiv0-and-mod0 . r4ff2) (fldiv0 . r4ff1) (fldiv-and-mod . r4ff0) (fldiv . r4fef) (fldenominator . r4fee) (flcos . r4fed) (flceiling . r4fec) (flatan . r4feb) (flasin . r4fea) (flacos . r4fe9) (flabs . r4fe8) (fl>? . r4fe7) (fl>=? . r4fe6) (fl=? . r4fe5) (fl<? . r4fe4) (fl<=? . r4fe3) (fl/ . r4fe2) (fl- . r4fe1) (fl+ . r4fe0) (fl* . r4fdf) (fixnum->flonum . r4fde) (fxzero? . r4fdd) (fxxor . r4fdc) (fxrotate-bit-field . r4fdb) (fxreverse-bit-field . r4fda) (fxpositive? . r4fd9) (fxodd? . r4fd8) (fxnot . r4fd7) (fxnegative? . r4fd6) (fxmod0 . r4fd5) (fxmod . r4fd4) (fxmin . r4fd3) (fxmax . r4fd2) (fxlength . r4fd1) (fxior . r4fd0) (fxif . r4fcf) (fxfirst-bit-set . r4fce) (fxeven? . r4fcd) (fxdiv0-and-mod0 . r4fcc) (fxdiv0 . r4fcb) (fxdiv-and-mod . r4fca) (fxdiv . r4fc9) (fxcopy-bit-field . r4fc8) (fxcopy-bit . r4fc7) (fxbit-set? . r4fc6) (fxbit-field . r4fc5) (fxbit-count . r4fc4) (fxarithmetic-shift-right . r4fc3) (fxarithmetic-shift-left . r4fc2) (fxarithmetic-shift . r4fc1) (fxand . r4fc0) (fx>? . r4fbf) (fx>=? . r4fbe) (fx=? . r4fbd) (fx<? . r4fbc) (fx<=? . r4fbb) (fx-/carry . r4fba) (fx- . r4fb9) (fx+/carry . r4fb8) (fx+ . r4fb7) (fx*/carry . r4fb6) (fx* . r4fb5) (greatest-fixnum . r4fb4) (least-fixnum . r4fb3) (fixnum-width . r4fb2) (fixnum? . r4fb1) (bitwise-rotate-bit-field . r4fb0) (bitwise-reverse-bit-field . r4faf) (bitwise-length . r4fae) (bitwise-if . r4fad) (bitwise-first-bit-set . r4fac) (bitwise-copy-bit-field . r4fab) (bitwise-copy-bit . r4faa) (bitwise-bit-set? . r4fa9) (bitwise-bit-field . r4fa8) (bitwise-bit-count . r4fa7) (bitwise-xor . r4fa6) (bitwise-ior . r4fa5) (bitwise-and . r4fa4) (bitwise-not . r4fa3) (bitwise-arithmetic-shift-right . r4fa2) (bitwise-arithmetic-shift-left . r4fa1) (bitwise-arithmetic-shift . r4fa0) (zero? . r4f9f) (vector? . r4f9e) (vector-set! . r4f9d) (vector-ref . r4f9c) (vector-map . r4f9b) (vector-length . r4f9a) (vector-for-each . r4f99) (vector-fill! . r4f98) (vector->list . r4f97) (vector . r4f96) (values . r4f95) (truncate . r4f94) (tan . r4f93) (symbol? . r4f92) (symbol=? . r4f91) (symbol->string . r4f90) (substring . r4f8f) (string? . r4f8e) (string>? . r4f8d) (string>=? . r4f8c) (string=? . r4f8b) (string<? . r4f8a) (string<=? . r4f89) (string-ref . r4f88) (string-length . r4f87) (string-for-each . r4f86) (string-copy . r4f85) (string-append . r4f84) (string->symbol . r4f83) (string->number . r4f82) (string->list . r4f81) (string . r4f80) (sqrt . r4f7f) (sin . r4f7e) (round . r4f7d) (reverse . r4f7c) (real? . r4f7b) (real-valued? . r4f7a) (real-part . r4f79) (rationalize . r4f78) (rational? . r4f77) (rational-valued? . r4f76) (procedure? . r4f75) (positive? . r4f74) (pair? . r4f73) (odd? . r4f72) (numerator . r4f71) (number? . r4f70) (number->string . r4f6f) (null? . r4f6e) (not . r4f6d) (negative? . r4f6c) (nan? . r4f6b) (min . r4f6a) (max . r4f69) (map . r4f68) (make-vector . r4f67) (make-string . r4f66) (make-rectangular . r4f65) (make-polar . r4f64) (magnitude . r4f63) (log . r4f62) (list? . r4f61) (list-tail . r4f60) (list-ref . r4f5f) (list->vector . r4f5e) (list->string . r4f5d) (list . r4f5c) (length . r4f5b) (lcm . r4f5a) (integer? . r4f59) (integer-valued? . r4f58) (integer->char . r4f57) (infinite? . r4f56) (inexact? . r4f55) (inexact . r4f54) (imag-part . r4f53) (gcd . r4f52) (for-each . r4f51) (floor . r4f50) (finite? . r4f4f) (expt . r4f4e) (exp . r4f4d) (exact? . r4f4c) (exact-integer-sqrt . r4f4b) (exact . r4f4a) (even? . r4f49) (error . r4f48) (eqv? . r4f47) (equal? . r4f46) (eq? . r4f45) (dynamic-wind . r4f44) (div0-and-mod0 . r4f43) (mod0 . r4f42) (div0 . r4f41) (div-and-mod . r4f40) (mod . r4f3f) (div . r4f3e) (denominator . r4f3d) (cos . r4f3c) (cons . r4f3b) (complex? . r4f3a) (char? . r4f39) (char>? . r4f38) (char>=? . r4f37) (char=? . r4f36) (char<? . r4f35) (char<=? . r4f34) (char->integer . r4f33) (ceiling . r4f32) (call-with-values . r4f31) (call/cc . r4f30) (call-with-current-continuation . r4f2f) (cddddr . r4f2e) (cdddar . r4f2d) (cddadr . r4f2c) (cddaar . r4f2b) (cdaddr . r4f2a) (cdadar . r4f29) (cdaadr . r4f28) (cdaaar . r4f27) (cadddr . r4f26) (caddar . r4f25) (cadadr . r4f24) (cadaar . r4f23) (caaddr . r4f22) (caadar . r4f21) (caaadr . r4f20) (caaaar . r4f1f) (cdddr . r4f1e) (cddar . r4f1d) (cdadr . r4f1c) (cdaar . r4f1b) (caddr . r4f1a) (cadar . r4f19) (caadr . r4f18) (caaar . r4f17) (cddr . r4f16) (cdar . r4f15) (cadr . r4f14) (caar . r4f13) (cdr . r4f12) (car . r4f11) (boolean? . r4f10) (boolean=? . r4f0f) (atan . r4f0e) (assertion-violation . r4f0d) (asin . r4f0c) (apply . r4f0b) (append . r4f0a) (angle . r4f09) (acos . r4f08) (abs . r4f07) (/ . r4f06) (* . r4f05) (- . r4f04) (+ . r4f03) (>= . r4f02) (> . r4f01) (= . r4f00) (<= . r4eff) (< . r4efe) (library . r4efd) (&no-nans . r4efc) (&no-infinities . r4efb) (&i/o-encoding . r4efa) (&i/o-decoding . r4ef9) (&i/o-port . r4ef8) (&i/o-file-does-not-exist . r4ef7) (&i/o-file-already-exists . r4ef6) (&i/o-file-is-read-only . r4ef5) (&i/o-file-protection . r4ef4) (&i/o-filename . r4ef3) (&i/o-invalid-position . r4ef2) (&i/o-write . r4ef1) (&i/o-read . r4ef0) (&i/o . r4eef) (&undefined . r4eee) (&syntax . r4eed) (&lexical . r4eec) (&implementation-restriction . r4eeb) (&non-continuable . r4eea) (&who . r4ee9) (&irritants . r4ee8) (&assertion . r4ee7) (&violation . r4ee6) (&error . r4ee5) (&serious . r4ee4) (&warning . r4ee3) (&message . r4ee2) (&condition . r4ee1) (define-condition-type . r4ee0) (define-enumeration . r4edf) (define-record-type . r4ede) (parent-rtd . r4edd) (nongenerative . r4edc) (opaque . r4edb) (sealed . r4eda) (protocol . r4ed9) (parent . r4ed8) (immutable . r4ed7) (mutable . r4ed6) (fields . r4ed5) (error-handling-mode . r4ed4) (file-options . r4ed3) (buffer-mode . r4ed2) (eol-style . r4ed1) (guard . r4ed0) (unsyntax-splicing . r4ecd) (unsyntax . r4ecc) (unquote-splicing . r4ecb) (unquote . r4eca) (_ . r4ec9) (else . r4ec8) (=> . r4ec7) (... . r4ec6) (assert . r4ec5) (endianness . r4ec4) (time . r4ec2) (do . r4ec1) (cond . r4ec0) (let* . r4ebf) (let . r4ebe) (let*-values . r4ebd) (let-values . r4ebc) (identifier-syntax . r4ebb) (with-syntax . r4eba) (quasisyntax . r4eb9) (quasiquote . r4eb8) (syntax-rules . r4eb7) (include . r4eb6) (record-constructor-descriptor . r4eb4) (record-type-descriptor . r4eb3) (case . r4eb2) (unless . r4eb0) (when . r4eaf) (or . r4eae) (and . r4ead) (if . r4eac) (letrec* . r4eab) (letrec . r4eaa) (case-lambda . r4ea8) (lambda . r4ea7) (syntax . r4ea6) (syntax-case . r4ea5) (quote . r4ea4) (letrec-syntax . r4ea2) (let-syntax . r4ea1) (set! . r4ea0) (import . r4e9f) (begin . r4e9e) (define-syntax . r4e9c) (define . r4e9b)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5174 '(psyntax null-environment-5) '() '() '() '() '((make-promise . r507b) (unquote-splicing . r4ecb) (unquote . r4eca) (_ . r4ec9) (else . r4ec8) (=> . r4ec7) (... . r4ec6) (delay . r4ec3) (do . r4ec1) (cond . r4ec0) (let* . r4ebf) (let . r4ebe) (quasiquote . r4eb8) (syntax-rules . r4eb7) (case . r4eb2) (or . r4eae) (and . r4ead) (if . r4eac) (letrec . r4eaa) (lambda . r4ea7) (quote . r4ea4) (letrec-syntax . r4ea2) (let-syntax . r4ea1) (set! . r4ea0) (begin . r4e9e) (define-syntax . r4e9c) (define . r4e9b)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5175 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . r5110) (string-ci>=? . r510f) (string-ci=? . r510e) (string-ci<? . r510d) (string-ci<=? . r510c) (char-whitespace? . r510b) (char-upper-case? . r510a) (char-numeric? . r5108) (char-lower-case? . r5107) (char-upcase . r5105) (char-downcase . r5102) (char-ci>? . r5101) (char-ci>=? . r5100) (char-ci=? . r50ff) (char-ci<? . r50fe) (char-ci<=? . r50fd) (char-alphabetic? . r50fc) (call-with-output-file . r50d0) (call-with-input-file . r50cf) (write-char . r50ce) (write . r50cd) (with-output-to-file . r50cc) (with-input-from-file . r50cb) (read-char . r50ca) (read . r50c9) (peek-char . r50c8) (open-output-file . r50c7) (open-input-file . r50c6) (newline . r50c5) (display . r50c4) (close-output-port . r50c3) (close-input-port . r50c2) (eof-object . r50c0) (current-output-port . r50be) (current-input-port . r50bd) (output-port? . r50bc) (input-port? . r50bb) (scheme-report-environment . r2f83) (quotient . r5081) (null-environment . r2f81) (remainder . r5080) (modulo . r507f) (inexact->exact . r507e) (force . r507d) (exact->inexact . r507c) (make-promise . r507b) (string-fill! . r5079) (string-set! . r5078) (set-cdr! . r5077) (set-car! . r5076) (memv . r5070) (memq . r506f) (member . r506d) (assv . r5065) (assq . r5064) (assoc . r5062) (eval . r2f87) (zero? . r4f9f) (vector? . r4f9e) (vector-set! . r4f9d) (vector-ref . r4f9c) (vector-length . r4f9a) (vector-fill! . r4f98) (vector->list . r4f97) (vector . r4f96) (values . r4f95) (truncate . r4f94) (tan . r4f93) (symbol? . r4f92) (symbol->string . r4f90) (substring . r4f8f) (string? . r4f8e) (string>? . r4f8d) (string>=? . r4f8c) (string=? . r4f8b) (string<? . r4f8a) (string<=? . r4f89) (string-ref . r4f88) (string-length . r4f87) (string-copy . r4f85) (string-append . r4f84) (string->symbol . r4f83) (string->number . r4f82) (string->list . r4f81) (string . r4f80) (sqrt . r4f7f) (sin . r4f7e) (round . r4f7d) (reverse . r4f7c) (real? . r4f7b) (real-part . r4f79) (rationalize . r4f78) (rational? . r4f77) (procedure? . r4f75) (positive? . r4f74) (pair? . r4f73) (odd? . r4f72) (numerator . r4f71) (number? . r4f70) (number->string . r4f6f) (not . r4f6d) (negative? . r4f6c) (min . r4f6a) (max . r4f69) (map . r4f68) (make-vector . r4f67) (make-string . r4f66) (make-rectangular . r4f65) (make-polar . r4f64) (magnitude . r4f63) (log . r4f62) (list? . r4f61) (list-tail . r4f60) (list-ref . r4f5f) (list->vector . r4f5e) (list->string . r4f5d) (list . r4f5c) (length . r4f5b) (lcm . r4f5a) (integer? . r4f59) (integer->char . r4f57) (inexact? . r4f55) (imag-part . r4f53) (gcd . r4f52) (for-each . r4f51) (floor . r4f50) (expt . r4f4e) (exp . r4f4d) (exact? . r4f4c) (even? . r4f49) (eqv? . r4f47) (equal? . r4f46) (eq? . r4f45) (dynamic-wind . r4f44) (denominator . r4f3d) (cos . r4f3c) (cons . r4f3b) (complex? . r4f3a) (char? . r4f39) (char>? . r4f38) (char>=? . r4f37) (char=? . r4f36) (char<? . r4f35) (char<=? . r4f34) (char->integer . r4f33) (ceiling . r4f32) (call-with-values . r4f31) (call-with-current-continuation . r4f2f) (cddddr . r4f2e) (cdddar . r4f2d) (cddadr . r4f2c) (cddaar . r4f2b) (cdaddr . r4f2a) (cdadar . r4f29) (cdaadr . r4f28) (cdaaar . r4f27) (cadddr . r4f26) (caddar . r4f25) (cadadr . r4f24) (cadaar . r4f23) (caaddr . r4f22) (caadar . r4f21) (caaadr . r4f20) (caaaar . r4f1f) (cdddr . r4f1e) (cddar . r4f1d) (cdadr . r4f1c) (cdaar . r4f1b) (caddr . r4f1a) (cadar . r4f19) (caadr . r4f18) (caaar . r4f17) (cddr . r4f16) (cdar . r4f15) (cadr . r4f14) (caar . r4f13) (cdr . r4f12) (car . r4f11) (boolean? . r4f10) (atan . r4f0e) (asin . r4f0c) (apply . r4f0b) (append . r4f0a) (angle . r4f09) (acos . r4f08) (abs . r4f07) (/ . r4f06) (* . r4f05) (- . r4f04) (+ . r4f03) (>= . r4f02) (> . r4f01) (= . r4f00) (<= . r4eff) (< . r4efe) (unquote-splicing . r4ecb) (unquote . r4eca) (else . r4ec8) (=> . r4ec7) (... . r4ec6) (delay . r4ec3) (do . r4ec1) (cond . r4ec0) (let* . r4ebf) (let . r4ebe) (quasiquote . r4eb8) (syntax-rules . r4eb7) (case . r4eb2) (or . r4eae) (and . r4ead) (if . r4eac) (letrec . r4eaa) (lambda . r4ea7) (quote . r4ea4) (letrec-syntax . r4ea2) (let-syntax . r4ea1) (set! . r4ea0) (begin . r4e9e) (define-syntax . r4e9c) (define . r4e9b)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5176 '(psyntax modules) '() '() '() '() '((module . r4e9d)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5177 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5178 '(rnrs) '(6) '() '() '() '((regexp? . r516b) (string-upcase . r5118) (string-titlecase . r5117) (string-normalize-nfkd . r5116) (string-normalize-nfkc . r5115) (string-normalize-nfd . r5114) (string-normalize-nfc . r5113) (string-foldcase . r5112) (string-downcase . r5111) (string-ci>? . r5110) (string-ci>=? . r510f) (string-ci=? . r510e) (string-ci<? . r510d) (string-ci<=? . r510c) (char-whitespace? . r510b) (char-upper-case? . r510a) (char-title-case? . r5109) (char-numeric? . r5108) (char-lower-case? . r5107) (char-general-category . r5106) (char-upcase . r5105) (char-titlecase . r5104) (char-foldcase . r5103) (char-downcase . r5102) (char-ci>? . r5101) (char-ci>=? . r5100) (char-ci=? . r50ff) (char-ci<? . r50fe) (char-ci<=? . r50fd) (char-alphabetic? . r50fc) (make-variable-transformer . r2ceb) (identifier? . r2fa9) (generate-temporaries . r2f95) (free-identifier=? . r2f97) (syntax->datum . r2fad) (datum->syntax . r2fab) (bound-identifier=? . r2f99) (record-type-descriptor? . r50fb) (record-predicate . r50fa) (record-mutator . r50f9) (record-constructor . r50f8) (record-accessor . r50f7) (make-record-type-descriptor . r50f6) (make-record-constructor-descriptor . r50f5) (record? . r50f4) (record-type-uid . r50f3) (record-type-sealed? . r50f2) (record-type-parent . r50f1) (record-type-opaque? . r50f0) (record-type-name . r50ef) (record-type-generative? . r50ee) (record-type-field-names . r50ed) (record-rtd . r50ec) (record-field-mutable? . r50eb) (delete-file . r50ea) (file-exists? . r50e9) (vector-sort! . r50e8) (vector-sort . r50e7) (list-sort . r50e6) (symbol-hash . r50e5) (string-ci-hash . r50e4) (string-hash . r50e3) (equal-hash . r50e2) (hashtable-equivalence-function . r50e1) (make-hashtable . r50e0) (hashtable-hash-function . r50df) (make-eqv-hashtable . r50de) (make-eq-hashtable . r50dd) (hashtable? . r50dc) (hashtable-update! . r50db) (hashtable-size . r50da) (hashtable-set! . r50d9) (hashtable-ref . r50d8) (hashtable-mutable? . r50d7) (hashtable-keys . r50d6) (hashtable-entries . r50d5) (hashtable-delete! . r50d4) (hashtable-copy . r50d3) (hashtable-contains? . r50d2) (hashtable-clear! . r50d1) (call-with-output-file . r50d0) (call-with-input-file . r50cf) (write-char . r50ce) (write . r50cd) (with-output-to-file . r50cc) (with-input-from-file . r50cb) (read-char . r50ca) (read . r50c9) (peek-char . r50c8) (open-output-file . r50c7) (open-input-file . r50c6) (newline . r50c5) (display . r50c4) (close-output-port . r50c3) (close-input-port . r50c2) (eof-object? . r50c1) (eof-object . r50c0) (current-error-port . r50bf) (current-output-port . r50be) (current-input-port . r50bd) (output-port? . r50bc) (input-port? . r50bb) (utf-8-codec . r50ba) (utf-16-codec . r50b9) (transcoder-error-handling-mode . r50b8) (transcoder-eol-style . r50b7) (transcoder-codec . r50b6) (transcoded-port . r50b5) (textual-port? . r50b4) (string->bytevector . r50b3) (standard-output-port . r50b2) (standard-input-port . r50b1) (standard-error-port . r50b0) (set-port-position! . r50af) (put-u8 . r50ae) (put-string . r50ad) (put-datum . r50ac) (put-char . r50ab) (put-bytevector . r50aa) (port? . r50a9) (port-transcoder . r50a8) (port-position . r50a7) (port-has-set-port-position!? . r50a6) (port-has-port-position? . r50a5) (port-eof? . r50a4) (output-port-buffer-mode . r50a3) (open-string-output-port . r50a2) (open-string-input-port . r50a1) (open-file-output-port . r50a0) (open-file-input/output-port . r509f) (open-file-input-port . r509e) (open-bytevector-output-port . r509d) (open-bytevector-input-port . r509c) (native-transcoder . r509b) (native-eol-style . r509a) (make-transcoder . r5099) (latin-1-codec . r5098) (make-i/o-write-error . r4b69) (make-i/o-read-error . r4b54) (make-i/o-port-error . r4c0a) (make-i/o-invalid-position-error . r4b80) (make-i/o-filename-error . r4b9b) (make-i/o-file-protection-error . r4bb4) (make-i/o-file-is-read-only-error . r4bc9) (make-i/o-file-does-not-exist-error . r4bf3) (make-i/o-file-already-exists-error . r4bde) (make-i/o-error . r4b3f) (make-i/o-encoding-error . r4c3a) (make-i/o-decoding-error . r4c23) (make-custom-textual-output-port . r5097) (make-custom-textual-input/output-port . r5096) (make-custom-textual-input-port . r5095) (make-custom-binary-output-port . r5094) (make-custom-binary-input/output-port . r5093) (make-custom-binary-input-port . r5092) (make-bytevector . r5091) (lookahead-u8 . r5090) (lookahead-char . r508f) (i/o-write-error? . r4b6b) (i/o-read-error? . r4b56) (i/o-port-error? . r4c0e) (i/o-invalid-position-error? . r4b84) (i/o-filename-error? . r4b9f) (i/o-file-protection-error? . r4bb6) (i/o-file-is-read-only-error? . r4bcb) (i/o-file-does-not-exist-error? . r4bf5) (i/o-file-already-exists-error? . r4be0) (i/o-error? . r4b41) (i/o-error-position . r4b86) (i/o-error-port . r4c10) (i/o-error-filename . r4ba1) (i/o-encoding-error? . r4c3e) (i/o-encoding-error-char . r4c40) (i/o-decoding-error? . r4c25) (get-u8 . r508e) (get-string-n! . r508d) (get-string-n . r508c) (get-string-all . r508b) (get-line . r508a) (get-datum . r5089) (get-char . r5088) (get-bytevector-some . r5087) (get-bytevector-n! . r5086) (get-bytevector-n . r5085) (get-bytevector-all . r5084) (flush-output-port . r5083) (close-port . r5082) (exit . r507a) (command-line . r4d75) (remove . r5075) (remv . r5074) (remp . r5073) (remq . r5072) (partition . r5071) (memv . r5070) (memq . r506f) (memp . r506e) (member . r506d) (exists . r506c) (for-all . r506b) (fold-right . r506a) (fold-left . r5069) (find . r5068) (filter . r5067) (cons* . r5066) (assv . r5065) (assq . r5064) (assp . r5063) (assoc . r5062) (call-with-string-output-port . r5061) (call-with-port . r5060) (call-with-bytevector-output-port . r505f) (bytevector->string . r505e) (buffer-mode? . r505d) (binary-port? . r505c) (with-exception-handler . r505b) (raise-continuable . r505a) (raise . r5059) (make-enumeration . r5058) (enum-set=? . r5057) (enum-set-universe . r5056) (enum-set-union . r5055) (enum-set-subset? . r5054) (enum-set-projection . r5053) (enum-set-member? . r5052) (enum-set-intersection . r5051) (enum-set-indexer . r5050) (enum-set-difference . r504f) (enum-set-constructor . r504e) (enum-set-complement . r504d) (enum-set->list . r504c) (who-condition? . r4ab5) (warning? . r4a2d) (violation? . r4a6c) (undefined-violation? . r4b2c) (syntax-violation? . r4b13) (syntax-violation-subform . r4b17) (syntax-violation-form . r4b15) (syntax-violation . r2fa7) (simple-conditions . r504b) (serious-condition? . r4a42) (non-continuable-violation? . r4acc) (message-condition? . r4a16) (make-who-condition . r4ab1) (make-warning . r4a2b) (make-violation . r4a6a) (make-undefined-violation . r4b2a) (make-syntax-violation . r4b0d) (make-serious-condition . r4a40) (make-non-continuable-violation . r4aca) (make-message-condition . r4a12) (make-lexical-violation . r4af4) (make-irritants-condition . r4a96) (make-implementation-restriction-violation . r4adf) (make-error . r4a55) (make-assertion-violation . r4a7f) (lexical-violation? . r4af6) (irritants-condition? . r4a9a) (implementation-restriction-violation? . r4ae1) (error? . r4a57) (condition-who . r4ab7) (condition-predicate . r504a) (condition-message . r4a18) (condition-irritants . r4a9c) (condition-accessor . r5049) (condition . r5048) (assertion-violation? . r4a81) (condition? . r5047) (utf32->string . r5046) (utf16->string . r5045) (utf8->string . r5044) (uint-list->bytevector . r5043) (u8-list->bytevector . r5042) (string->utf8 . r5041) (string->utf32 . r5040) (string->utf16 . r503f) (sint-list->bytevector . r503e) (native-endianness . r503d) (bytevector? . r503c) (bytevector=? . r503b) (bytevector-uint-set! . r503a) (bytevector-uint-ref . r5039) (bytevector-u8-set! . r5038) (bytevector-u8-ref . r5037) (bytevector-u64-set! . r5036) (bytevector-u64-ref . r5035) (bytevector-u64-native-set! . r5034) (bytevector-u64-native-ref . r5033) (bytevector-u32-set! . r5032) (bytevector-u32-ref . r5031) (bytevector-u32-native-set! . r5030) (bytevector-u32-native-ref . r502f) (bytevector-u16-set! . r502e) (bytevector-u16-ref . r502d) (bytevector-u16-native-set! . r502c) (bytevector-u16-native-ref . r502b) (bytevector-sint-set! . r502a) (bytevector-sint-ref . r5029) (bytevector-s8-set! . r5028) (bytevector-s8-ref . r5027) (bytevector-s64-set! . r5026) (bytevector-s64-ref . r5025) (bytevector-s64-native-set! . r5024) (bytevector-s64-native-ref . r5023) (bytevector-s32-set! . r5022) (bytevector-s32-ref . r5021) (bytevector-s32-native-set! . r5020) (bytevector-s32-native-ref . r501f) (bytevector-s16-set! . r501e) (bytevector-s16-ref . r501d) (bytevector-s16-native-set! . r501c) (bytevector-s16-native-ref . r501b) (bytevector-length . r501a) (bytevector-ieee-single-ref . r5019) (bytevector-ieee-single-set! . r5018) (bytevector-ieee-single-native-set! . r5017) (bytevector-ieee-single-native-ref . r5016) (bytevector-ieee-double-set! . r5015) (bytevector-ieee-double-ref . r5014) (bytevector-ieee-double-native-set! . r5013) (bytevector-ieee-double-native-ref . r5012) (bytevector-fill! . r5011) (bytevector-copy! . r5010) (bytevector-copy . r500f) (bytevector->uint-list . r500e) (bytevector->u8-list . r500d) (bytevector->sint-list . r500c) (no-nans-violation? . r4c6a) (no-infinities-violation? . r4c55) (make-no-nans-violation . r4c68) (make-no-infinities-violation . r4c53) (real->flonum . r500b) (flzero? . r500a) (fltruncate . r5009) (fltan . r5008) (flsqrt . r5007) (flsin . r5006) (flround . r5005) (flpositive? . r5004) (flonum? . r5003) (flodd? . r5002) (flnumerator . r5001) (flnegative? . r5000) (flnan? . r4fff) (flmod0 . r4ffe) (flmod . r4ffd) (flmin . r4ffc) (flmax . r4ffb) (fllog . r4ffa) (flinteger? . r4ff9) (flinfinite? . r4ff8) (flfloor . r4ff7) (flfinite? . r4ff6) (flexpt . r4ff5) (flexp . r4ff4) (fleven? . r4ff3) (fldiv0-and-mod0 . r4ff2) (fldiv0 . r4ff1) (fldiv-and-mod . r4ff0) (fldiv . r4fef) (fldenominator . r4fee) (flcos . r4fed) (flceiling . r4fec) (flatan . r4feb) (flasin . r4fea) (flacos . r4fe9) (flabs . r4fe8) (fl>? . r4fe7) (fl>=? . r4fe6) (fl=? . r4fe5) (fl<? . r4fe4) (fl<=? . r4fe3) (fl/ . r4fe2) (fl- . r4fe1) (fl+ . r4fe0) (fl* . r4fdf) (fixnum->flonum . r4fde) (fxzero? . r4fdd) (fxxor . r4fdc) (fxrotate-bit-field . r4fdb) (fxreverse-bit-field . r4fda) (fxpositive? . r4fd9) (fxodd? . r4fd8) (fxnot . r4fd7) (fxnegative? . r4fd6) (fxmod0 . r4fd5) (fxmod . r4fd4) (fxmin . r4fd3) (fxmax . r4fd2) (fxlength . r4fd1) (fxior . r4fd0) (fxif . r4fcf) (fxfirst-bit-set . r4fce) (fxeven? . r4fcd) (fxdiv0-and-mod0 . r4fcc) (fxdiv0 . r4fcb) (fxdiv-and-mod . r4fca) (fxdiv . r4fc9) (fxcopy-bit-field . r4fc8) (fxcopy-bit . r4fc7) (fxbit-set? . r4fc6) (fxbit-field . r4fc5) (fxbit-count . r4fc4) (fxarithmetic-shift-right . r4fc3) (fxarithmetic-shift-left . r4fc2) (fxarithmetic-shift . r4fc1) (fxand . r4fc0) (fx>? . r4fbf) (fx>=? . r4fbe) (fx=? . r4fbd) (fx<? . r4fbc) (fx<=? . r4fbb) (fx-/carry . r4fba) (fx- . r4fb9) (fx+/carry . r4fb8) (fx+ . r4fb7) (fx*/carry . r4fb6) (fx* . r4fb5) (greatest-fixnum . r4fb4) (least-fixnum . r4fb3) (fixnum-width . r4fb2) (fixnum? . r4fb1) (bitwise-rotate-bit-field . r4fb0) (bitwise-reverse-bit-field . r4faf) (bitwise-length . r4fae) (bitwise-if . r4fad) (bitwise-first-bit-set . r4fac) (bitwise-copy-bit-field . r4fab) (bitwise-copy-bit . r4faa) (bitwise-bit-set? . r4fa9) (bitwise-bit-field . r4fa8) (bitwise-bit-count . r4fa7) (bitwise-xor . r4fa6) (bitwise-ior . r4fa5) (bitwise-and . r4fa4) (bitwise-not . r4fa3) (bitwise-arithmetic-shift-right . r4fa2) (bitwise-arithmetic-shift-left . r4fa1) (bitwise-arithmetic-shift . r4fa0) (zero? . r4f9f) (vector? . r4f9e) (vector-set! . r4f9d) (vector-ref . r4f9c) (vector-map . r4f9b) (vector-length . r4f9a) (vector-for-each . r4f99) (vector-fill! . r4f98) (vector->list . r4f97) (vector . r4f96) (values . r4f95) (truncate . r4f94) (tan . r4f93) (symbol? . r4f92) (symbol=? . r4f91) (symbol->string . r4f90) (substring . r4f8f) (string? . r4f8e) (string>? . r4f8d) (string>=? . r4f8c) (string=? . r4f8b) (string<? . r4f8a) (string<=? . r4f89) (string-ref . r4f88) (string-length . r4f87) (string-for-each . r4f86) (string-copy . r4f85) (string-append . r4f84) (string->symbol . r4f83) (string->number . r4f82) (string->list . r4f81) (string . r4f80) (sqrt . r4f7f) (sin . r4f7e) (round . r4f7d) (reverse . r4f7c) (real? . r4f7b) (real-valued? . r4f7a) (real-part . r4f79) (rationalize . r4f78) (rational? . r4f77) (rational-valued? . r4f76) (procedure? . r4f75) (positive? . r4f74) (pair? . r4f73) (odd? . r4f72) (numerator . r4f71) (number? . r4f70) (number->string . r4f6f) (null? . r4f6e) (not . r4f6d) (negative? . r4f6c) (nan? . r4f6b) (min . r4f6a) (max . r4f69) (map . r4f68) (make-vector . r4f67) (make-string . r4f66) (make-rectangular . r4f65) (make-polar . r4f64) (magnitude . r4f63) (log . r4f62) (list? . r4f61) (list-tail . r4f60) (list-ref . r4f5f) (list->vector . r4f5e) (list->string . r4f5d) (list . r4f5c) (length . r4f5b) (lcm . r4f5a) (integer? . r4f59) (integer-valued? . r4f58) (integer->char . r4f57) (infinite? . r4f56) (inexact? . r4f55) (inexact . r4f54) (imag-part . r4f53) (gcd . r4f52) (for-each . r4f51) (floor . r4f50) (finite? . r4f4f) (expt . r4f4e) (exp . r4f4d) (exact? . r4f4c) (exact-integer-sqrt . r4f4b) (exact . r4f4a) (even? . r4f49) (error . r4f48) (eqv? . r4f47) (equal? . r4f46) (eq? . r4f45) (dynamic-wind . r4f44) (div0-and-mod0 . r4f43) (mod0 . r4f42) (div0 . r4f41) (div-and-mod . r4f40) (mod . r4f3f) (div . r4f3e) (denominator . r4f3d) (cos . r4f3c) (cons . r4f3b) (complex? . r4f3a) (char? . r4f39) (char>? . r4f38) (char>=? . r4f37) (char=? . r4f36) (char<? . r4f35) (char<=? . r4f34) (char->integer . r4f33) (ceiling . r4f32) (call-with-values . r4f31) (call/cc . r4f30) (call-with-current-continuation . r4f2f) (cddddr . r4f2e) (cdddar . r4f2d) (cddadr . r4f2c) (cddaar . r4f2b) (cdaddr . r4f2a) (cdadar . r4f29) (cdaadr . r4f28) (cdaaar . r4f27) (cadddr . r4f26) (caddar . r4f25) (cadadr . r4f24) (cadaar . r4f23) (caaddr . r4f22) (caadar . r4f21) (caaadr . r4f20) (caaaar . r4f1f) (cdddr . r4f1e) (cddar . r4f1d) (cdadr . r4f1c) (cdaar . r4f1b) (caddr . r4f1a) (cadar . r4f19) (caadr . r4f18) (caaar . r4f17) (cddr . r4f16) (cdar . r4f15) (cadr . r4f14) (caar . r4f13) (cdr . r4f12) (car . r4f11) (boolean? . r4f10) (boolean=? . r4f0f) (atan . r4f0e) (assertion-violation . r4f0d) (asin . r4f0c) (apply . r4f0b) (append . r4f0a) (angle . r4f09) (acos . r4f08) (abs . r4f07) (/ . r4f06) (* . r4f05) (- . r4f04) (+ . r4f03) (>= . r4f02) (> . r4f01) (= . r4f00) (<= . r4eff) (< . r4efe) (&no-nans . r4efc) (&no-infinities . r4efb) (&i/o-encoding . r4efa) (&i/o-decoding . r4ef9) (&i/o-port . r4ef8) (&i/o-file-does-not-exist . r4ef7) (&i/o-file-already-exists . r4ef6) (&i/o-file-is-read-only . r4ef5) (&i/o-file-protection . r4ef4) (&i/o-filename . r4ef3) (&i/o-invalid-position . r4ef2) (&i/o-write . r4ef1) (&i/o-read . r4ef0) (&i/o . r4eef) (&undefined . r4eee) (&syntax . r4eed) (&lexical . r4eec) (&implementation-restriction . r4eeb) (&non-continuable . r4eea) (&who . r4ee9) (&irritants . r4ee8) (&assertion . r4ee7) (&violation . r4ee6) (&error . r4ee5) (&serious . r4ee4) (&warning . r4ee3) (&message . r4ee2) (&condition . r4ee1) (define-condition-type . r4ee0) (define-enumeration . r4edf) (define-record-type . r4ede) (parent-rtd . r4edd) (nongenerative . r4edc) (opaque . r4edb) (sealed . r4eda) (protocol . r4ed9) (parent . r4ed8) (immutable . r4ed7) (mutable . r4ed6) (fields . r4ed5) (error-handling-mode . r4ed4) (file-options . r4ed3) (buffer-mode . r4ed2) (eol-style . r4ed1) (guard . r4ed0) (unsyntax-splicing . r4ecd) (unsyntax . r4ecc) (unquote-splicing . r4ecb) (unquote . r4eca) (_ . r4ec9) (else . r4ec8) (=> . r4ec7) (... . r4ec6) (assert . r4ec5) (endianness . r4ec4) (do . r4ec1) (cond . r4ec0) (let* . r4ebf) (let . r4ebe) (let*-values . r4ebd) (let-values . r4ebc) (identifier-syntax . r4ebb) (with-syntax . r4eba) (quasisyntax . r4eb9) (quasiquote . r4eb8) (syntax-rules . r4eb7) (record-constructor-descriptor . r4eb4) (record-type-descriptor . r4eb3) (case . r4eb2) (unless . r4eb0) (when . r4eaf) (or . r4eae) (and . r4ead) (if . r4eac) (letrec* . r4eab) (letrec . r4eaa) (case-lambda . r4ea8) (lambda . r4ea7) (syntax . r4ea6) (syntax-case . r4ea5) (quote . r4ea4) (letrec-syntax . r4ea2) (let-syntax . r4ea1) (set! . r4ea0) (begin . r4e9e) (define-syntax . r4e9c) (define . r4e9b)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5179 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . r2f83) (quotient . r5081) (null-environment . r2f81) (remainder . r5080) (modulo . r507f) (inexact->exact . r507e) (force . r507d) (exact->inexact . r507c) (make-promise . r507b) (delay . r4ec3)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r517a '(rnrs control) '(6) '() '() '() '((do . r4ec1) (unless . r4eb0) (when . r4eaf) (case-lambda . r4ea8)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r517b '(rnrs eval) '(6) '() '() '() '((eval . r2f87) (environment . r2f7f)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r517c '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . r5077) (set-car! . r5076)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r517d '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . r5079) (string-set! . r5078)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r517e '(rnrs programs) '(6) '() '() '() '((exit . r507a) (command-line . r4d75)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r517f '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . r2ceb) (identifier? . r2fa9) (generate-temporaries . r2f95) (free-identifier=? . r2f97) (syntax->datum . r2fad) (datum->syntax . r2fab) (bound-identifier=? . r2f99) (syntax-violation . r2fa7) (unsyntax-splicing . r4ecd) (unsyntax . r4ecc) (_ . r4ec9) (... . r4ec6) (with-syntax . r4eba) (quasisyntax . r4eb9) (syntax . r4ea6) (syntax-case . r4ea5)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5180 '(rnrs files) '(6) '() '() '() '((delete-file . r50ea) (file-exists? . r50e9) (make-i/o-write-error . r4b69) (make-i/o-read-error . r4b54) (make-i/o-port-error . r4c0a) (make-i/o-invalid-position-error . r4b80) (make-i/o-filename-error . r4b9b) (make-i/o-file-protection-error . r4bb4) (make-i/o-file-is-read-only-error . r4bc9) (make-i/o-file-does-not-exist-error . r4bf3) (make-i/o-file-already-exists-error . r4bde) (make-i/o-error . r4b3f) (i/o-write-error? . r4b6b) (i/o-read-error? . r4b56) (i/o-port-error? . r4c0e) (i/o-invalid-position-error? . r4b84) (i/o-filename-error? . r4b9f) (i/o-file-protection-error? . r4bb6) (i/o-file-is-read-only-error? . r4bcb) (i/o-file-does-not-exist-error? . r4bf5) (i/o-file-already-exists-error? . r4be0) (i/o-error? . r4b41) (i/o-error-position . r4b86) (i/o-error-port . r4c10) (i/o-error-filename . r4ba1) (&i/o-port . r4ef8) (&i/o-file-does-not-exist . r4ef7) (&i/o-file-already-exists . r4ef6) (&i/o-file-is-read-only . r4ef5) (&i/o-file-protection . r4ef4) (&i/o-filename . r4ef3) (&i/o-invalid-position . r4ef2) (&i/o-write . r4ef1) (&i/o-read . r4ef0) (&i/o . r4eef)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5181 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . r50e8) (vector-sort . r50e7) (list-sort . r50e6)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5182 '(rnrs base) '(6) '() '() '() '((zero? . r4f9f) (vector? . r4f9e) (vector-set! . r4f9d) (vector-ref . r4f9c) (vector-map . r4f9b) (vector-length . r4f9a) (vector-for-each . r4f99) (vector-fill! . r4f98) (vector->list . r4f97) (vector . r4f96) (values . r4f95) (truncate . r4f94) (tan . r4f93) (symbol? . r4f92) (symbol=? . r4f91) (symbol->string . r4f90) (substring . r4f8f) (string? . r4f8e) (string>? . r4f8d) (string>=? . r4f8c) (string=? . r4f8b) (string<? . r4f8a) (string<=? . r4f89) (string-ref . r4f88) (string-length . r4f87) (string-for-each . r4f86) (string-copy . r4f85) (string-append . r4f84) (string->symbol . r4f83) (string->number . r4f82) (string->list . r4f81) (string . r4f80) (sqrt . r4f7f) (sin . r4f7e) (round . r4f7d) (reverse . r4f7c) (real? . r4f7b) (real-valued? . r4f7a) (real-part . r4f79) (rationalize . r4f78) (rational? . r4f77) (rational-valued? . r4f76) (procedure? . r4f75) (positive? . r4f74) (pair? . r4f73) (odd? . r4f72) (numerator . r4f71) (number? . r4f70) (number->string . r4f6f) (null? . r4f6e) (not . r4f6d) (negative? . r4f6c) (nan? . r4f6b) (min . r4f6a) (max . r4f69) (map . r4f68) (make-vector . r4f67) (make-string . r4f66) (make-rectangular . r4f65) (make-polar . r4f64) (magnitude . r4f63) (log . r4f62) (list? . r4f61) (list-tail . r4f60) (list-ref . r4f5f) (list->vector . r4f5e) (list->string . r4f5d) (list . r4f5c) (length . r4f5b) (lcm . r4f5a) (integer? . r4f59) (integer-valued? . r4f58) (integer->char . r4f57) (infinite? . r4f56) (inexact? . r4f55) (inexact . r4f54) (imag-part . r4f53) (gcd . r4f52) (for-each . r4f51) (floor . r4f50) (finite? . r4f4f) (expt . r4f4e) (exp . r4f4d) (exact? . r4f4c) (exact-integer-sqrt . r4f4b) (exact . r4f4a) (even? . r4f49) (error . r4f48) (eqv? . r4f47) (equal? . r4f46) (eq? . r4f45) (dynamic-wind . r4f44) (div0-and-mod0 . r4f43) (mod0 . r4f42) (div0 . r4f41) (div-and-mod . r4f40) (mod . r4f3f) (div . r4f3e) (denominator . r4f3d) (cos . r4f3c) (cons . r4f3b) (complex? . r4f3a) (char? . r4f39) (char>? . r4f38) (char>=? . r4f37) (char=? . r4f36) (char<? . r4f35) (char<=? . r4f34) (char->integer . r4f33) (ceiling . r4f32) (call-with-values . r4f31) (call/cc . r4f30) (call-with-current-continuation . r4f2f) (cddddr . r4f2e) (cdddar . r4f2d) (cddadr . r4f2c) (cddaar . r4f2b) (cdaddr . r4f2a) (cdadar . r4f29) (cdaadr . r4f28) (cdaaar . r4f27) (cadddr . r4f26) (caddar . r4f25) (cadadr . r4f24) (cadaar . r4f23) (caaddr . r4f22) (caadar . r4f21) (caaadr . r4f20) (caaaar . r4f1f) (cdddr . r4f1e) (cddar . r4f1d) (cdadr . r4f1c) (cdaar . r4f1b) (caddr . r4f1a) (cadar . r4f19) (caadr . r4f18) (caaar . r4f17) (cddr . r4f16) (cdar . r4f15) (cadr . r4f14) (caar . r4f13) (cdr . r4f12) (car . r4f11) (boolean? . r4f10) (boolean=? . r4f0f) (atan . r4f0e) (assertion-violation . r4f0d) (asin . r4f0c) (apply . r4f0b) (append . r4f0a) (angle . r4f09) (acos . r4f08) (abs . r4f07) (/ . r4f06) (* . r4f05) (- . r4f04) (+ . r4f03) (>= . r4f02) (> . r4f01) (= . r4f00) (<= . r4eff) (< . r4efe) (unquote-splicing . r4ecb) (unquote . r4eca) (_ . r4ec9) (else . r4ec8) (=> . r4ec7) (... . r4ec6) (assert . r4ec5) (cond . r4ec0) (let* . r4ebf) (let . r4ebe) (let*-values . r4ebd) (let-values . r4ebc) (identifier-syntax . r4ebb) (quasiquote . r4eb8) (syntax-rules . r4eb7) (case . r4eb2) (or . r4eae) (and . r4ead) (if . r4eac) (letrec* . r4eab) (letrec . r4eaa) (lambda . r4ea7) (quote . r4ea4) (letrec-syntax . r4ea2) (let-syntax . r4ea1) (set! . r4ea0) (begin . r4e9e) (define-syntax . r4e9c) (define . r4e9b)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5183 '(rnrs lists) '(6) '() '() '() '((remove . r5075) (remv . r5074) (remp . r5073) (remq . r5072) (partition . r5071) (memv . r5070) (memq . r506f) (memp . r506e) (member . r506d) (exists . r506c) (for-all . r506b) (fold-right . r506a) (fold-left . r5069) (find . r5068) (filter . r5067) (cons* . r5066) (assv . r5065) (assq . r5064) (assp . r5063) (assoc . r5062)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5184 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . r50d0) (call-with-input-file . r50cf) (write-char . r50ce) (write . r50cd) (with-output-to-file . r50cc) (with-input-from-file . r50cb) (read-char . r50ca) (read . r50c9) (peek-char . r50c8) (open-output-file . r50c7) (open-input-file . r50c6) (newline . r50c5) (display . r50c4) (close-output-port . r50c3) (close-input-port . r50c2) (eof-object? . r50c1) (eof-object . r50c0) (current-error-port . r50bf) (current-output-port . r50be) (current-input-port . r50bd) (output-port? . r50bc) (input-port? . r50bb) (make-i/o-write-error . r4b69) (make-i/o-read-error . r4b54) (make-i/o-port-error . r4c0a) (make-i/o-invalid-position-error . r4b80) (make-i/o-filename-error . r4b9b) (make-i/o-file-protection-error . r4bb4) (make-i/o-file-is-read-only-error . r4bc9) (make-i/o-file-does-not-exist-error . r4bf3) (make-i/o-file-already-exists-error . r4bde) (make-i/o-error . r4b3f) (i/o-write-error? . r4b6b) (i/o-read-error? . r4b56) (i/o-port-error? . r4c0e) (i/o-invalid-position-error? . r4b84) (i/o-filename-error? . r4b9f) (i/o-file-protection-error? . r4bb6) (i/o-file-is-read-only-error? . r4bcb) (i/o-file-does-not-exist-error? . r4bf5) (i/o-file-already-exists-error? . r4be0) (i/o-error? . r4b41) (i/o-error-position . r4b86) (i/o-error-port . r4c10) (i/o-error-filename . r4ba1) (&i/o-port . r4ef8) (&i/o-file-does-not-exist . r4ef7) (&i/o-file-already-exists . r4ef6) (&i/o-file-is-read-only . r4ef5) (&i/o-file-protection . r4ef4) (&i/o-filename . r4ef3) (&i/o-invalid-position . r4ef2) (&i/o-write . r4ef1) (&i/o-read . r4ef0) (&i/o . r4eef)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5185 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . r5091) (utf32->string . r5046) (utf16->string . r5045) (utf8->string . r5044) (uint-list->bytevector . r5043) (u8-list->bytevector . r5042) (string->utf8 . r5041) (string->utf32 . r5040) (string->utf16 . r503f) (sint-list->bytevector . r503e) (native-endianness . r503d) (bytevector? . r503c) (bytevector=? . r503b) (bytevector-uint-set! . r503a) (bytevector-uint-ref . r5039) (bytevector-u8-set! . r5038) (bytevector-u8-ref . r5037) (bytevector-u64-set! . r5036) (bytevector-u64-ref . r5035) (bytevector-u64-native-set! . r5034) (bytevector-u64-native-ref . r5033) (bytevector-u32-set! . r5032) (bytevector-u32-ref . r5031) (bytevector-u32-native-set! . r5030) (bytevector-u32-native-ref . r502f) (bytevector-u16-set! . r502e) (bytevector-u16-ref . r502d) (bytevector-u16-native-set! . r502c) (bytevector-u16-native-ref . r502b) (bytevector-sint-set! . r502a) (bytevector-sint-ref . r5029) (bytevector-s8-set! . r5028) (bytevector-s8-ref . r5027) (bytevector-s64-set! . r5026) (bytevector-s64-ref . r5025) (bytevector-s64-native-set! . r5024) (bytevector-s64-native-ref . r5023) (bytevector-s32-set! . r5022) (bytevector-s32-ref . r5021) (bytevector-s32-native-set! . r5020) (bytevector-s32-native-ref . r501f) (bytevector-s16-set! . r501e) (bytevector-s16-ref . r501d) (bytevector-s16-native-set! . r501c) (bytevector-s16-native-ref . r501b) (bytevector-length . r501a) (bytevector-ieee-single-ref . r5019) (bytevector-ieee-single-set! . r5018) (bytevector-ieee-single-native-set! . r5017) (bytevector-ieee-single-native-ref . r5016) (bytevector-ieee-double-set! . r5015) (bytevector-ieee-double-ref . r5014) (bytevector-ieee-double-native-set! . r5013) (bytevector-ieee-double-native-ref . r5012) (bytevector-fill! . r5011) (bytevector-copy! . r5010) (bytevector-copy . r500f) (bytevector->uint-list . r500e) (bytevector->u8-list . r500d) (bytevector->sint-list . r500c) (endianness . r4ec4)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5186 '(rnrs unicode) '(6) '() '() '() '((string-upcase . r5118) (string-titlecase . r5117) (string-normalize-nfkd . r5116) (string-normalize-nfkc . r5115) (string-normalize-nfd . r5114) (string-normalize-nfc . r5113) (string-foldcase . r5112) (string-downcase . r5111) (string-ci>? . r5110) (string-ci>=? . r510f) (string-ci=? . r510e) (string-ci<? . r510d) (string-ci<=? . r510c) (char-whitespace? . r510b) (char-upper-case? . r510a) (char-title-case? . r5109) (char-numeric? . r5108) (char-lower-case? . r5107) (char-general-category . r5106) (char-upcase . r5105) (char-titlecase . r5104) (char-foldcase . r5103) (char-downcase . r5102) (char-ci>? . r5101) (char-ci>=? . r5100) (char-ci=? . r50ff) (char-ci<? . r50fe) (char-ci<=? . r50fd) (char-alphabetic? . r50fc)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5187 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . r505b) (raise-continuable . r505a) (raise . r5059) (guard . r4ed0) (else . r4ec8) (=> . r4ec7)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5188 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . r4fb0) (bitwise-reverse-bit-field . r4faf) (bitwise-length . r4fae) (bitwise-if . r4fad) (bitwise-first-bit-set . r4fac) (bitwise-copy-bit-field . r4fab) (bitwise-copy-bit . r4faa) (bitwise-bit-set? . r4fa9) (bitwise-bit-field . r4fa8) (bitwise-bit-count . r4fa7) (bitwise-xor . r4fa6) (bitwise-ior . r4fa5) (bitwise-and . r4fa4) (bitwise-not . r4fa3) (bitwise-arithmetic-shift-right . r4fa2) (bitwise-arithmetic-shift-left . r4fa1) (bitwise-arithmetic-shift . r4fa0)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5189 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . r4fdd) (fxxor . r4fdc) (fxrotate-bit-field . r4fdb) (fxreverse-bit-field . r4fda) (fxpositive? . r4fd9) (fxodd? . r4fd8) (fxnot . r4fd7) (fxnegative? . r4fd6) (fxmod0 . r4fd5) (fxmod . r4fd4) (fxmin . r4fd3) (fxmax . r4fd2) (fxlength . r4fd1) (fxior . r4fd0) (fxif . r4fcf) (fxfirst-bit-set . r4fce) (fxeven? . r4fcd) (fxdiv0-and-mod0 . r4fcc) (fxdiv0 . r4fcb) (fxdiv-and-mod . r4fca) (fxdiv . r4fc9) (fxcopy-bit-field . r4fc8) (fxcopy-bit . r4fc7) (fxbit-set? . r4fc6) (fxbit-field . r4fc5) (fxbit-count . r4fc4) (fxarithmetic-shift-right . r4fc3) (fxarithmetic-shift-left . r4fc2) (fxarithmetic-shift . r4fc1) (fxand . r4fc0) (fx>? . r4fbf) (fx>=? . r4fbe) (fx=? . r4fbd) (fx<? . r4fbc) (fx<=? . r4fbb) (fx-/carry . r4fba) (fx- . r4fb9) (fx+/carry . r4fb8) (fx+ . r4fb7) (fx*/carry . r4fb6) (fx* . r4fb5) (greatest-fixnum . r4fb4) (least-fixnum . r4fb3) (fixnum-width . r4fb2) (fixnum? . r4fb1)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r518a '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . r4c6a) (no-infinities-violation? . r4c55) (make-no-nans-violation . r4c68) (make-no-infinities-violation . r4c53) (real->flonum . r500b) (flzero? . r500a) (fltruncate . r5009) (fltan . r5008) (flsqrt . r5007) (flsin . r5006) (flround . r5005) (flpositive? . r5004) (flonum? . r5003) (flodd? . r5002) (flnumerator . r5001) (flnegative? . r5000) (flnan? . r4fff) (flmod0 . r4ffe) (flmod . r4ffd) (flmin . r4ffc) (flmax . r4ffb) (fllog . r4ffa) (flinteger? . r4ff9) (flinfinite? . r4ff8) (flfloor . r4ff7) (flfinite? . r4ff6) (flexpt . r4ff5) (flexp . r4ff4) (fleven? . r4ff3) (fldiv0-and-mod0 . r4ff2) (fldiv0 . r4ff1) (fldiv-and-mod . r4ff0) (fldiv . r4fef) (fldenominator . r4fee) (flcos . r4fed) (flceiling . r4fec) (flatan . r4feb) (flasin . r4fea) (flacos . r4fe9) (flabs . r4fe8) (fl>? . r4fe7) (fl>=? . r4fe6) (fl=? . r4fe5) (fl<? . r4fe4) (fl<=? . r4fe3) (fl/ . r4fe2) (fl- . r4fe1) (fl+ . r4fe0) (fl* . r4fdf) (fixnum->flonum . r4fde) (&no-nans . r4efc) (&no-infinities . r4efb)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r518b '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . r50e5) (string-ci-hash . r50e4) (string-hash . r50e3) (equal-hash . r50e2) (hashtable-equivalence-function . r50e1) (make-hashtable . r50e0) (hashtable-hash-function . r50df) (make-eqv-hashtable . r50de) (make-eq-hashtable . r50dd) (hashtable? . r50dc) (hashtable-update! . r50db) (hashtable-size . r50da) (hashtable-set! . r50d9) (hashtable-ref . r50d8) (hashtable-mutable? . r50d7) (hashtable-keys . r50d6) (hashtable-entries . r50d5) (hashtable-delete! . r50d4) (hashtable-copy . r50d3) (hashtable-contains? . r50d2) (hashtable-clear! . r50d1)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r518c '(rnrs io ports) '(6) '() '() '() '((eof-object? . r50c1) (eof-object . r50c0) (current-error-port . r50bf) (current-output-port . r50be) (current-input-port . r50bd) (output-port? . r50bc) (input-port? . r50bb) (utf-8-codec . r50ba) (utf-16-codec . r50b9) (transcoder-error-handling-mode . r50b8) (transcoder-eol-style . r50b7) (transcoder-codec . r50b6) (transcoded-port . r50b5) (textual-port? . r50b4) (string->bytevector . r50b3) (standard-output-port . r50b2) (standard-input-port . r50b1) (standard-error-port . r50b0) (set-port-position! . r50af) (put-u8 . r50ae) (put-string . r50ad) (put-datum . r50ac) (put-char . r50ab) (put-bytevector . r50aa) (port? . r50a9) (port-transcoder . r50a8) (port-position . r50a7) (port-has-set-port-position!? . r50a6) (port-has-port-position? . r50a5) (port-eof? . r50a4) (output-port-buffer-mode . r50a3) (open-string-output-port . r50a2) (open-string-input-port . r50a1) (open-file-output-port . r50a0) (open-file-input/output-port . r509f) (open-file-input-port . r509e) (open-bytevector-output-port . r509d) (open-bytevector-input-port . r509c) (native-transcoder . r509b) (native-eol-style . r509a) (make-transcoder . r5099) (latin-1-codec . r5098) (make-i/o-write-error . r4b69) (make-i/o-read-error . r4b54) (make-i/o-port-error . r4c0a) (make-i/o-invalid-position-error . r4b80) (make-i/o-filename-error . r4b9b) (make-i/o-file-protection-error . r4bb4) (make-i/o-file-is-read-only-error . r4bc9) (make-i/o-file-does-not-exist-error . r4bf3) (make-i/o-file-already-exists-error . r4bde) (make-i/o-error . r4b3f) (make-i/o-encoding-error . r4c3a) (make-i/o-decoding-error . r4c23) (make-custom-textual-output-port . r5097) (make-custom-textual-input/output-port . r5096) (make-custom-textual-input-port . r5095) (make-custom-binary-output-port . r5094) (make-custom-binary-input/output-port . r5093) (make-custom-binary-input-port . r5092) (lookahead-u8 . r5090) (lookahead-char . r508f) (i/o-write-error? . r4b6b) (i/o-read-error? . r4b56) (i/o-port-error? . r4c0e) (i/o-invalid-position-error? . r4b84) (i/o-filename-error? . r4b9f) (i/o-file-protection-error? . r4bb6) (i/o-file-is-read-only-error? . r4bcb) (i/o-file-does-not-exist-error? . r4bf5) (i/o-file-already-exists-error? . r4be0) (i/o-error? . r4b41) (i/o-error-position . r4b86) (i/o-error-port . r4c10) (i/o-error-filename . r4ba1) (i/o-encoding-error? . r4c3e) (i/o-encoding-error-char . r4c40) (i/o-decoding-error? . r4c25) (get-u8 . r508e) (get-string-n! . r508d) (get-string-n . r508c) (get-string-all . r508b) (get-line . r508a) (get-datum . r5089) (get-char . r5088) (get-bytevector-some . r5087) (get-bytevector-n! . r5086) (get-bytevector-n . r5085) (get-bytevector-all . r5084) (flush-output-port . r5083) (close-port . r5082) (call-with-string-output-port . r5061) (call-with-port . r5060) (call-with-bytevector-output-port . r505f) (bytevector->string . r505e) (buffer-mode? . r505d) (binary-port? . r505c) (&i/o-encoding . r4efa) (&i/o-decoding . r4ef9) (&i/o-port . r4ef8) (&i/o-file-does-not-exist . r4ef7) (&i/o-file-already-exists . r4ef6) (&i/o-file-is-read-only . r4ef5) (&i/o-file-protection . r4ef4) (&i/o-filename . r4ef3) (&i/o-invalid-position . r4ef2) (&i/o-write . r4ef1) (&i/o-read . r4ef0) (&i/o . r4eef) (error-handling-mode . r4ed4) (file-options . r4ed3) (buffer-mode . r4ed2) (eol-style . r4ed1)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r518d '(rnrs enums) '(6) '() '() '() '((make-enumeration . r5058) (enum-set=? . r5057) (enum-set-universe . r5056) (enum-set-union . r5055) (enum-set-subset? . r5054) (enum-set-projection . r5053) (enum-set-member? . r5052) (enum-set-intersection . r5051) (enum-set-indexer . r5050) (enum-set-difference . r504f) (enum-set-constructor . r504e) (enum-set-complement . r504d) (enum-set->list . r504c) (define-enumeration . r4edf)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r518e '(rnrs conditions) '(6) '() '() '() '((who-condition? . r4ab5) (warning? . r4a2d) (violation? . r4a6c) (undefined-violation? . r4b2c) (syntax-violation? . r4b13) (syntax-violation-subform . r4b17) (syntax-violation-form . r4b15) (syntax-violation . r2fa7) (simple-conditions . r504b) (serious-condition? . r4a42) (non-continuable-violation? . r4acc) (message-condition? . r4a16) (make-who-condition . r4ab1) (make-warning . r4a2b) (make-violation . r4a6a) (make-undefined-violation . r4b2a) (make-syntax-violation . r4b0d) (make-serious-condition . r4a40) (make-non-continuable-violation . r4aca) (make-message-condition . r4a12) (make-lexical-violation . r4af4) (make-irritants-condition . r4a96) (make-implementation-restriction-violation . r4adf) (make-error . r4a55) (make-assertion-violation . r4a7f) (lexical-violation? . r4af6) (irritants-condition? . r4a9a) (implementation-restriction-violation? . r4ae1) (error? . r4a57) (condition-who . r4ab7) (condition-predicate . r504a) (condition-message . r4a18) (condition-irritants . r4a9c) (condition-accessor . r5049) (condition . r5048) (assertion-violation? . r4a81) (condition? . r5047) (&undefined . r4eee) (&syntax . r4eed) (&lexical . r4eec) (&implementation-restriction . r4eeb) (&non-continuable . r4eea) (&who . r4ee9) (&irritants . r4ee8) (&assertion . r4ee7) (&violation . r4ee6) (&error . r4ee5) (&serious . r4ee4) (&warning . r4ee3) (&message . r4ee2) (&condition . r4ee1) (define-condition-type . r4ee0)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r518f '(rnrs records inspection) '(6) '() '() '() '((record? . r50f4) (record-type-uid . r50f3) (record-type-sealed? . r50f2) (record-type-parent . r50f1) (record-type-opaque? . r50f0) (record-type-name . r50ef) (record-type-generative? . r50ee) (record-type-field-names . r50ed) (record-rtd . r50ec) (record-field-mutable? . r50eb)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5190 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . r50fb) (record-predicate . r50fa) (record-mutator . r50f9) (record-constructor . r50f8) (record-accessor . r50f7) (make-record-type-descriptor . r50f6) (make-record-constructor-descriptor . r50f5)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5191 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . r4ede) (parent-rtd . r4edd) (nongenerative . r4edc) (opaque . r4edb) (sealed . r4eda) (protocol . r4ed9) (parent . r4ed8) (immutable . r4ed7) (mutable . r4ed6) (fields . r4ed5) (record-constructor-descriptor . r4eb4) (record-type-descriptor . r4eb3)) '() values values '#f '#f '#t '#f) (r2ad6@r2975@install-library 'r5192 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . r4c6e) (&no-nans-rtd . r4c6c) (&no-infinities-rcd . r4c59) (&no-infinities-rtd . r4c57) (&i/o-encoding-rcd . r4c44) (&i/o-encoding-rtd . r4c42) (&i/o-decoding-rcd . r4c29) (&i/o-decoding-rtd . r4c27) (&i/o-port-rcd . r4c14) (&i/o-port-rtd . r4c12) (&i/o-file-does-not-exist-rcd . r4bf9) (&i/o-file-does-not-exist-rtd . r4bf7) (&i/o-file-already-exists-rcd . r4be4) (&i/o-file-already-exists-rtd . r4be2) (&i/o-file-is-read-only-rcd . r4bcf) (&i/o-file-is-read-only-rtd . r4bcd) (&i/o-file-protection-rcd . r4bba) (&i/o-file-protection-rtd . r4bb8) (&i/o-filename-rcd . r4ba5) (&i/o-filename-rtd . r4ba3) (&i/o-invalid-position-rcd . r4b8a) (&i/o-invalid-position-rtd . r4b88) (&i/o-write-rcd . r4b6f) (&i/o-write-rtd . r4b6d) (&i/o-read-rcd . r4b5a) (&i/o-read-rtd . r4b58) (&i/o-rcd . r4b45) (&i/o-rtd . r4b43) (&undefined-rcd . r4b30) (&undefined-rtd . r4b2e) (&syntax-rcd . r4b1b) (&syntax-rtd . r4b19) (&lexical-rcd . r4afa) (&lexical-rtd . r4af8) (&implementation-restriction-rcd . r4ae5) (&implementation-restriction-rtd . r4ae3) (&non-continuable-rcd . r4ad0) (&non-continuable-rtd . r4ace) (&who-rcd . r4abb) (&who-rtd . r4ab9) (&irritants-rcd . r4aa0) (&irritants-rtd . r4a9e) (&assertion-rcd . r4a85) (&assertion-rtd . r4a83) (&violation-rcd . r4a70) (&violation-rtd . r4a6e) (&error-rcd . r4a5b) (&error-rtd . r4a59) (&serious-rcd . r4a46) (&serious-rtd . r4a44) (&warning-rcd . r4a31) (&warning-rtd . r4a2f) (&message-rcd . r4a1c) (&message-rtd . r4a1a) (&condition-rcd . r49bd) (&condition-rtd . r49bb) (syntax-error . r2fa3) (syntax-dispatch . r2ebe) (pretty-print . r5172) (eval-core . r5171) (set-symbol-value! . r5170) (symbol-value . r516f) (gensym . r516e) (void . r516d) (load . r4d7b) (interaction-environment . r2fb3) (char-ready? . r516c) (regexp? . r516b) (read-line . r516a) (ungensym . r5169) (alist->eq-hash-table . r5168) (assoc-ref . r5167) (print . r5166) (format . r5165) (host-os . r5164) (library-path . r2954) (standard-library-path . r5163) (file-newer? . r5162) (stat-mtime . r5161) (write-to-file . r5160) (file->list . r515f) (file->string . r515e) (digit->integer . r515d) (call-with-string-input-port . r515c) (call-with-string-io . r515b) (string-split . r515a) (bytevector-for-each . r5159) (string->regexp . r5158) (rxmatch . r5157) (regexp-replace-all . r5156) (hashtable-for-each . r5155) (call-process . r5154) (local-tz-offset . r5153) (microseconds . r5152) (readdir . r5151) (set-current-directory! . r5150) (expand-path . r514f) (current-directory . r514e) (%spawn . r514d) (%waitpid . r514c) (%ffi-supported? . r514b) (%ffi-pointer-ref . r514a) (%ffi-pointer->string . r5149) (%ffi-call->string-or-zero . r5148) (%ffi-call->double . r5147) (%ffi-call->void* . r5146) (%ffi-call->void . r5145) (%ffi-call->int . r5144) (%ffi-lookup . r5143) (%ffi-open . r5142) (%fork . r5141) (%pipe . r5140) (p . r513f) (open-output-string . r513e) (get-output-string . r513d) (get-environment-variables . r513c) (get-environment-variable . r513b) (get-timeofday . r513a) (get-command-line . r5139) (sys-display . r5138) (mutex-try-lock! . r5137) (mutex-unlock! . r5136) (mutex-lock! . r5135) (mutex? . r5134) (make-mutex . r5133) (condition-variable-notify-all! . r5132) (condition-variable-notify! . r5131) (condition-variable-wait! . r5130) (make-condition-variable . r512f) (mosh-executable-path . r512e) (make-file-options . r512d) (source-info . r512c) (make-compiler-instruction . r512b) (make-instruction . r512a) (set-source-info! . r5129) (bignum? . r5128) (fast-equal? . r5127) (fasl-read . r5126) (fasl-write . r5125) (time-usage . r5124) (os-constant . r5123) (make-parameter . r2787) (socket-port . r5122) (socket-shutdown . r5121) (socket-close . r5120) (socket-send . r511f) (socket-recv! . r511e) (socket-recv . r511d) (make-server-socket . r511c) (make-client-socket . r511b) (socket-accept . r511a) (socket? . r5119) (string-upcase . r5118) (string-titlecase . r5117) (string-normalize-nfkd . r5116) (string-normalize-nfkc . r5115) (string-normalize-nfd . r5114) (string-normalize-nfc . r5113) (string-foldcase . r5112) (string-downcase . r5111) (string-ci>? . r5110) (string-ci>=? . r510f) (string-ci=? . r510e) (string-ci<? . r510d) (string-ci<=? . r510c) (char-whitespace? . r510b) (char-upper-case? . r510a) (char-title-case? . r5109) (char-numeric? . r5108) (char-lower-case? . r5107) (char-general-category . r5106) (char-upcase . r5105) (char-titlecase . r5104) (char-foldcase . r5103) (char-downcase . r5102) (char-ci>? . r5101) (char-ci>=? . r5100) (char-ci=? . r50ff) (char-ci<? . r50fe) (char-ci<=? . r50fd) (char-alphabetic? . r50fc) (make-variable-transformer . r2ceb) (identifier? . r2fa9) (generate-temporaries . r2f95) (free-identifier=? . r2f97) (syntax->datum . r2fad) (datum->syntax . r2fab) (bound-identifier=? . r2f99) (record-type-descriptor? . r50fb) (record-predicate . r50fa) (record-mutator . r50f9) (record-constructor . r50f8) (record-accessor . r50f7) (make-record-type-descriptor . r50f6) (make-record-constructor-descriptor . r50f5) (record? . r50f4) (record-type-uid . r50f3) (record-type-sealed? . r50f2) (record-type-parent . r50f1) (record-type-opaque? . r50f0) (record-type-name . r50ef) (record-type-generative? . r50ee) (record-type-field-names . r50ed) (record-rtd . r50ec) (record-field-mutable? . r50eb) (delete-file . r50ea) (file-exists? . r50e9) (vector-sort! . r50e8) (vector-sort . r50e7) (list-sort . r50e6) (symbol-hash . r50e5) (string-ci-hash . r50e4) (string-hash . r50e3) (equal-hash . r50e2) (hashtable-equivalence-function . r50e1) (make-hashtable . r50e0) (hashtable-hash-function . r50df) (make-eqv-hashtable . r50de) (make-eq-hashtable . r50dd) (hashtable? . r50dc) (hashtable-update! . r50db) (hashtable-size . r50da) (hashtable-set! . r50d9) (hashtable-ref . r50d8) (hashtable-mutable? . r50d7) (hashtable-keys . r50d6) (hashtable-entries . r50d5) (hashtable-delete! . r50d4) (hashtable-copy . r50d3) (hashtable-contains? . r50d2) (hashtable-clear! . r50d1) (call-with-output-file . r50d0) (call-with-input-file . r50cf) (write-char . r50ce) (write . r50cd) (with-output-to-file . r50cc) (with-input-from-file . r50cb) (read-char . r50ca) (read . r50c9) (peek-char . r50c8) (open-output-file . r50c7) (open-input-file . r50c6) (newline . r50c5) (display . r50c4) (close-output-port . r50c3) (close-input-port . r50c2) (eof-object? . r50c1) (eof-object . r50c0) (current-error-port . r50bf) (current-output-port . r50be) (current-input-port . r50bd) (output-port? . r50bc) (input-port? . r50bb) (utf-8-codec . r50ba) (utf-16-codec . r50b9) (transcoder-error-handling-mode . r50b8) (transcoder-eol-style . r50b7) (transcoder-codec . r50b6) (transcoded-port . r50b5) (textual-port? . r50b4) (string->bytevector . r50b3) (standard-output-port . r50b2) (standard-input-port . r50b1) (standard-error-port . r50b0) (set-port-position! . r50af) (put-u8 . r50ae) (put-string . r50ad) (put-datum . r50ac) (put-char . r50ab) (put-bytevector . r50aa) (port? . r50a9) (port-transcoder . r50a8) (port-position . r50a7) (port-has-set-port-position!? . r50a6) (port-has-port-position? . r50a5) (port-eof? . r50a4) (output-port-buffer-mode . r50a3) (open-string-output-port . r50a2) (open-string-input-port . r50a1) (open-file-output-port . r50a0) (open-file-input/output-port . r509f) (open-file-input-port . r509e) (open-bytevector-output-port . r509d) (open-bytevector-input-port . r509c) (native-transcoder . r509b) (native-eol-style . r509a) (make-transcoder . r5099) (latin-1-codec . r5098) (make-i/o-write-error . r4b69) (make-i/o-read-error . r4b54) (make-i/o-port-error . r4c0a) (make-i/o-invalid-position-error . r4b80) (make-i/o-filename-error . r4b9b) (make-i/o-file-protection-error . r4bb4) (make-i/o-file-is-read-only-error . r4bc9) (make-i/o-file-does-not-exist-error . r4bf3) (make-i/o-file-already-exists-error . r4bde) (make-i/o-error . r4b3f) (make-i/o-encoding-error . r4c3a) (make-i/o-decoding-error . r4c23) (make-custom-textual-output-port . r5097) (make-custom-textual-input/output-port . r5096) (make-custom-textual-input-port . r5095) (make-custom-binary-output-port . r5094) (make-custom-binary-input/output-port . r5093) (make-custom-binary-input-port . r5092) (make-bytevector . r5091) (lookahead-u8 . r5090) (lookahead-char . r508f) (i/o-write-error? . r4b6b) (i/o-read-error? . r4b56) (i/o-port-error? . r4c0e) (i/o-invalid-position-error? . r4b84) (i/o-filename-error? . r4b9f) (i/o-file-protection-error? . r4bb6) (i/o-file-is-read-only-error? . r4bcb) (i/o-file-does-not-exist-error? . r4bf5) (i/o-file-already-exists-error? . r4be0) (i/o-error? . r4b41) (i/o-error-position . r4b86) (i/o-error-port . r4c10) (i/o-error-filename . r4ba1) (i/o-encoding-error? . r4c3e) (i/o-encoding-error-char . r4c40) (i/o-decoding-error? . r4c25) (get-u8 . r508e) (get-string-n! . r508d) (get-string-n . r508c) (get-string-all . r508b) (get-line . r508a) (get-datum . r5089) (get-char . r5088) (get-bytevector-some . r5087) (get-bytevector-n! . r5086) (get-bytevector-n . r5085) (get-bytevector-all . r5084) (flush-output-port . r5083) (close-port . r5082) (scheme-report-environment . r2f83) (quotient . r5081) (null-environment . r2f81) (remainder . r5080) (modulo . r507f) (inexact->exact . r507e) (force . r507d) (exact->inexact . r507c) (make-promise . r507b) (exit . r507a) (command-line . r4d75) (string-fill! . r5079) (string-set! . r5078) (set-cdr! . r5077) (set-car! . r5076) (remove . r5075) (remv . r5074) (remp . r5073) (remq . r5072) (partition . r5071) (memv . r5070) (memq . r506f) (memp . r506e) (member . r506d) (exists . r506c) (for-all . r506b) (fold-right . r506a) (fold-left . r5069) (find . r5068) (filter . r5067) (cons* . r5066) (assv . r5065) (assq . r5064) (assp . r5063) (assoc . r5062) (call-with-string-output-port . r5061) (call-with-port . r5060) (call-with-bytevector-output-port . r505f) (bytevector->string . r505e) (buffer-mode? . r505d) (binary-port? . r505c) (with-exception-handler . r505b) (raise-continuable . r505a) (raise . r5059) (eval . r2f87) (environment . r2f7f) (make-enumeration . r5058) (enum-set=? . r5057) (enum-set-universe . r5056) (enum-set-union . r5055) (enum-set-subset? . r5054) (enum-set-projection . r5053) (enum-set-member? . r5052) (enum-set-intersection . r5051) (enum-set-indexer . r5050) (enum-set-difference . r504f) (enum-set-constructor . r504e) (enum-set-complement . r504d) (enum-set->list . r504c) (who-condition? . r4ab5) (warning? . r4a2d) (violation? . r4a6c) (undefined-violation? . r4b2c) (syntax-violation? . r4b13) (syntax-violation-subform . r4b17) (syntax-violation-form . r4b15) (syntax-violation . r2fa7) (simple-conditions . r504b) (serious-condition? . r4a42) (non-continuable-violation? . r4acc) (message-condition? . r4a16) (make-who-condition . r4ab1) (make-warning . r4a2b) (make-violation . r4a6a) (make-undefined-violation . r4b2a) (make-syntax-violation . r4b0d) (make-serious-condition . r4a40) (make-non-continuable-violation . r4aca) (make-message-condition . r4a12) (make-lexical-violation . r4af4) (make-irritants-condition . r4a96) (make-implementation-restriction-violation . r4adf) (make-error . r4a55) (make-assertion-violation . r4a7f) (lexical-violation? . r4af6) (irritants-condition? . r4a9a) (implementation-restriction-violation? . r4ae1) (error? . r4a57) (condition-who . r4ab7) (condition-predicate . r504a) (condition-message . r4a18) (condition-irritants . r4a9c) (condition-accessor . r5049) (condition . r5048) (assertion-violation? . r4a81) (condition? . r5047) (utf32->string . r5046) (utf16->string . r5045) (utf8->string . r5044) (uint-list->bytevector . r5043) (u8-list->bytevector . r5042) (string->utf8 . r5041) (string->utf32 . r5040) (string->utf16 . r503f) (sint-list->bytevector . r503e) (native-endianness . r503d) (bytevector? . r503c) (bytevector=? . r503b) (bytevector-uint-set! . r503a) (bytevector-uint-ref . r5039) (bytevector-u8-set! . r5038) (bytevector-u8-ref . r5037) (bytevector-u64-set! . r5036) (bytevector-u64-ref . r5035) (bytevector-u64-native-set! . r5034) (bytevector-u64-native-ref . r5033) (bytevector-u32-set! . r5032) (bytevector-u32-ref . r5031) (bytevector-u32-native-set! . r5030) (bytevector-u32-native-ref . r502f) (bytevector-u16-set! . r502e) (bytevector-u16-ref . r502d) (bytevector-u16-native-set! . r502c) (bytevector-u16-native-ref . r502b) (bytevector-sint-set! . r502a) (bytevector-sint-ref . r5029) (bytevector-s8-set! . r5028) (bytevector-s8-ref . r5027) (bytevector-s64-set! . r5026) (bytevector-s64-ref . r5025) (bytevector-s64-native-set! . r5024) (bytevector-s64-native-ref . r5023) (bytevector-s32-set! . r5022) (bytevector-s32-ref . r5021) (bytevector-s32-native-set! . r5020) (bytevector-s32-native-ref . r501f) (bytevector-s16-set! . r501e) (bytevector-s16-ref . r501d) (bytevector-s16-native-set! . r501c) (bytevector-s16-native-ref . r501b) (bytevector-length . r501a) (bytevector-ieee-single-ref . r5019) (bytevector-ieee-single-set! . r5018) (bytevector-ieee-single-native-set! . r5017) (bytevector-ieee-single-native-ref . r5016) (bytevector-ieee-double-set! . r5015) (bytevector-ieee-double-ref . r5014) (bytevector-ieee-double-native-set! . r5013) (bytevector-ieee-double-native-ref . r5012) (bytevector-fill! . r5011) (bytevector-copy! . r5010) (bytevector-copy . r500f) (bytevector->uint-list . r500e) (bytevector->u8-list . r500d) (bytevector->sint-list . r500c) (no-nans-violation? . r4c6a) (no-infinities-violation? . r4c55) (make-no-nans-violation . r4c68) (make-no-infinities-violation . r4c53) (real->flonum . r500b) (flzero? . r500a) (fltruncate . r5009) (fltan . r5008) (flsqrt . r5007) (flsin . r5006) (flround . r5005) (flpositive? . r5004) (flonum? . r5003) (flodd? . r5002) (flnumerator . r5001) (flnegative? . r5000) (flnan? . r4fff) (flmod0 . r4ffe) (flmod . r4ffd) (flmin . r4ffc) (flmax . r4ffb) (fllog . r4ffa) (flinteger? . r4ff9) (flinfinite? . r4ff8) (flfloor . r4ff7) (flfinite? . r4ff6) (flexpt . r4ff5) (flexp . r4ff4) (fleven? . r4ff3) (fldiv0-and-mod0 . r4ff2) (fldiv0 . r4ff1) (fldiv-and-mod . r4ff0) (fldiv . r4fef) (fldenominator . r4fee) (flcos . r4fed) (flceiling . r4fec) (flatan . r4feb) (flasin . r4fea) (flacos . r4fe9) (flabs . r4fe8) (fl>? . r4fe7) (fl>=? . r4fe6) (fl=? . r4fe5) (fl<? . r4fe4) (fl<=? . r4fe3) (fl/ . r4fe2) (fl- . r4fe1) (fl+ . r4fe0) (fl* . r4fdf) (fixnum->flonum . r4fde) (fxzero? . r4fdd) (fxxor . r4fdc) (fxrotate-bit-field . r4fdb) (fxreverse-bit-field . r4fda) (fxpositive? . r4fd9) (fxodd? . r4fd8) (fxnot . r4fd7) (fxnegative? . r4fd6) (fxmod0 . r4fd5) (fxmod . r4fd4) (fxmin . r4fd3) (fxmax . r4fd2) (fxlength . r4fd1) (fxior . r4fd0) (fxif . r4fcf) (fxfirst-bit-set . r4fce) (fxeven? . r4fcd) (fxdiv0-and-mod0 . r4fcc) (fxdiv0 . r4fcb) (fxdiv-and-mod . r4fca) (fxdiv . r4fc9) (fxcopy-bit-field . r4fc8) (fxcopy-bit . r4fc7) (fxbit-set? . r4fc6) (fxbit-field . r4fc5) (fxbit-count . r4fc4) (fxarithmetic-shift-right . r4fc3) (fxarithmetic-shift-left . r4fc2) (fxarithmetic-shift . r4fc1) (fxand . r4fc0) (fx>? . r4fbf) (fx>=? . r4fbe) (fx=? . r4fbd) (fx<? . r4fbc) (fx<=? . r4fbb) (fx-/carry . r4fba) (fx- . r4fb9) (fx+/carry . r4fb8) (fx+ . r4fb7) (fx*/carry . r4fb6) (fx* . r4fb5) (greatest-fixnum . r4fb4) (least-fixnum . r4fb3) (fixnum-width . r4fb2) (fixnum? . r4fb1) (bitwise-rotate-bit-field . r4fb0) (bitwise-reverse-bit-field . r4faf) (bitwise-length . r4fae) (bitwise-if . r4fad) (bitwise-first-bit-set . r4fac) (bitwise-copy-bit-field . r4fab) (bitwise-copy-bit . r4faa) (bitwise-bit-set? . r4fa9) (bitwise-bit-field . r4fa8) (bitwise-bit-count . r4fa7) (bitwise-xor . r4fa6) (bitwise-ior . r4fa5) (bitwise-and . r4fa4) (bitwise-not . r4fa3) (bitwise-arithmetic-shift-right . r4fa2) (bitwise-arithmetic-shift-left . r4fa1) (bitwise-arithmetic-shift . r4fa0) (zero? . r4f9f) (vector? . r4f9e) (vector-set! . r4f9d) (vector-ref . r4f9c) (vector-map . r4f9b) (vector-length . r4f9a) (vector-for-each . r4f99) (vector-fill! . r4f98) (vector->list . r4f97) (vector . r4f96) (values . r4f95) (truncate . r4f94) (tan . r4f93) (symbol? . r4f92) (symbol=? . r4f91) (symbol->string . r4f90) (substring . r4f8f) (string? . r4f8e) (string>? . r4f8d) (string>=? . r4f8c) (string=? . r4f8b) (string<? . r4f8a) (string<=? . r4f89) (string-ref . r4f88) (string-length . r4f87) (string-for-each . r4f86) (string-copy . r4f85) (string-append . r4f84) (string->symbol . r4f83) (string->number . r4f82) (string->list . r4f81) (string . r4f80) (sqrt . r4f7f) (sin . r4f7e) (round . r4f7d) (reverse . r4f7c) (real? . r4f7b) (real-valued? . r4f7a) (real-part . r4f79) (rationalize . r4f78) (rational? . r4f77) (rational-valued? . r4f76) (procedure? . r4f75) (positive? . r4f74) (pair? . r4f73) (odd? . r4f72) (numerator . r4f71) (number? . r4f70) (number->string . r4f6f) (null? . r4f6e) (not . r4f6d) (negative? . r4f6c) (nan? . r4f6b) (min . r4f6a) (max . r4f69) (map . r4f68) (make-vector . r4f67) (make-string . r4f66) (make-rectangular . r4f65) (make-polar . r4f64) (magnitude . r4f63) (log . r4f62) (list? . r4f61) (list-tail . r4f60) (list-ref . r4f5f) (list->vector . r4f5e) (list->string . r4f5d) (list . r4f5c) (length . r4f5b) (lcm . r4f5a) (integer? . r4f59) (integer-valued? . r4f58) (integer->char . r4f57) (infinite? . r4f56) (inexact? . r4f55) (inexact . r4f54) (imag-part . r4f53) (gcd . r4f52) (for-each . r4f51) (floor . r4f50) (finite? . r4f4f) (expt . r4f4e) (exp . r4f4d) (exact? . r4f4c) (exact-integer-sqrt . r4f4b) (exact . r4f4a) (even? . r4f49) (error . r4f48) (eqv? . r4f47) (equal? . r4f46) (eq? . r4f45) (dynamic-wind . r4f44) (div0-and-mod0 . r4f43) (mod0 . r4f42) (div0 . r4f41) (div-and-mod . r4f40) (mod . r4f3f) (div . r4f3e) (denominator . r4f3d) (cos . r4f3c) (cons . r4f3b) (complex? . r4f3a) (char? . r4f39) (char>? . r4f38) (char>=? . r4f37) (char=? . r4f36) (char<? . r4f35) (char<=? . r4f34) (char->integer . r4f33) (ceiling . r4f32) (call-with-values . r4f31) (call/cc . r4f30) (call-with-current-continuation . r4f2f) (cddddr . r4f2e) (cdddar . r4f2d) (cddadr . r4f2c) (cddaar . r4f2b) (cdaddr . r4f2a) (cdadar . r4f29) (cdaadr . r4f28) (cdaaar . r4f27) (cadddr . r4f26) (caddar . r4f25) (cadadr . r4f24) (cadaar . r4f23) (caaddr . r4f22) (caadar . r4f21) (caaadr . r4f20) (caaaar . r4f1f) (cdddr . r4f1e) (cddar . r4f1d) (cdadr . r4f1c) (cdaar . r4f1b) (caddr . r4f1a) (cadar . r4f19) (caadr . r4f18) (caaar . r4f17) (cddr . r4f16) (cdar . r4f15) (cadr . r4f14) (caar . r4f13) (cdr . r4f12) (car . r4f11) (boolean? . r4f10) (boolean=? . r4f0f) (atan . r4f0e) (assertion-violation . r4f0d) (assertion-error . r2fa1) (asin . r4f0c) (apply . r4f0b) (append . r4f0a) (angle . r4f09) (acos . r4f08) (abs . r4f07) (/ . r4f06) (* . r4f05) (- . r4f04) (+ . r4f03) (>= . r4f02) (> . r4f01) (= . r4f00) (<= . r4eff) (< . r4efe) (library . r4efd) (&no-nans . r4efc) (&no-infinities . r4efb) (&i/o-encoding . r4efa) (&i/o-decoding . r4ef9) (&i/o-port . r4ef8) (&i/o-file-does-not-exist . r4ef7) (&i/o-file-already-exists . r4ef6) (&i/o-file-is-read-only . r4ef5) (&i/o-file-protection . r4ef4) (&i/o-filename . r4ef3) (&i/o-invalid-position . r4ef2) (&i/o-write . r4ef1) (&i/o-read . r4ef0) (&i/o . r4eef) (&undefined . r4eee) (&syntax . r4eed) (&lexical . r4eec) (&implementation-restriction . r4eeb) (&non-continuable . r4eea) (&who . r4ee9) (&irritants . r4ee8) (&assertion . r4ee7) (&violation . r4ee6) (&error . r4ee5) (&serious . r4ee4) (&warning . r4ee3) (&message . r4ee2) (&condition . r4ee1) (define-condition-type . r4ee0) (define-enumeration . r4edf) (define-record-type . r4ede) (parent-rtd . r4edd) (nongenerative . r4edc) (opaque . r4edb) (sealed . r4eda) (protocol . r4ed9) (parent . r4ed8) (immutable . r4ed7) (mutable . r4ed6) (fields . r4ed5) (error-handling-mode . r4ed4) (file-options . r4ed3) (buffer-mode . r4ed2) (eol-style . r4ed1) (guard . r4ed0) (trace-define . r4ecf) (trace-lambda . r4ece) (unsyntax-splicing . r4ecd) (unsyntax . r4ecc) (unquote-splicing . r4ecb) (unquote . r4eca) (_ . r4ec9) (else . r4ec8) (=> . r4ec7) (... . r4ec6) (assert . r4ec5) (endianness . r4ec4) (delay . r4ec3) (time . r4ec2) (do . r4ec1) (cond . r4ec0) (let* . r4ebf) (let . r4ebe) (let*-values . r4ebd) (let-values . r4ebc) (identifier-syntax . r4ebb) (with-syntax . r4eba) (quasisyntax . r4eb9) (quasiquote . r4eb8) (syntax-rules . r4eb7) (include . r4eb6) (define-struct . r4eb5) (record-constructor-descriptor . r4eb4) (record-type-descriptor . r4eb3) (case . r4eb2) (parameterize . r4eb1) (unless . r4eb0) (when . r4eaf) (or . r4eae) (and . r4ead) (if . r4eac) (letrec* . r4eab) (letrec . r4eaa) (type-descriptor . r4ea9) (case-lambda . r4ea8) (lambda . r4ea7) (syntax . r4ea6) (syntax-case . r4ea5) (quote . r4ea4) (foreign-call . r4ea3) (letrec-syntax . r4ea2) (let-syntax . r4ea1) (set! . r4ea0) (import . r4e9f) (begin . r4e9e) (module . r4e9d) (define-syntax . r4e9c) (define . r4e9b)) '((r4c6e core-prim . &no-nans-rcd) (r4c6c core-prim . &no-nans-rtd) (r4c59 core-prim . &no-infinities-rcd) (r4c57 core-prim . &no-infinities-rtd) (r4c44 core-prim . &i/o-encoding-rcd) (r4c42 core-prim . &i/o-encoding-rtd) (r4c29 core-prim . &i/o-decoding-rcd) (r4c27 core-prim . &i/o-decoding-rtd) (r4c14 core-prim . &i/o-port-rcd) (r4c12 core-prim . &i/o-port-rtd) (r4bf9 core-prim . &i/o-file-does-not-exist-rcd) (r4bf7 core-prim . &i/o-file-does-not-exist-rtd) (r4be4 core-prim . &i/o-file-already-exists-rcd) (r4be2 core-prim . &i/o-file-already-exists-rtd) (r4bcf core-prim . &i/o-file-is-read-only-rcd) (r4bcd core-prim . &i/o-file-is-read-only-rtd) (r4bba core-prim . &i/o-file-protection-rcd) (r4bb8 core-prim . &i/o-file-protection-rtd) (r4ba5 core-prim . &i/o-filename-rcd) (r4ba3 core-prim . &i/o-filename-rtd) (r4b8a core-prim . &i/o-invalid-position-rcd) (r4b88 core-prim . &i/o-invalid-position-rtd) (r4b6f core-prim . &i/o-write-rcd) (r4b6d core-prim . &i/o-write-rtd) (r4b5a core-prim . &i/o-read-rcd) (r4b58 core-prim . &i/o-read-rtd) (r4b45 core-prim . &i/o-rcd) (r4b43 core-prim . &i/o-rtd) (r4b30 core-prim . &undefined-rcd) (r4b2e core-prim . &undefined-rtd) (r4b1b core-prim . &syntax-rcd) (r4b19 core-prim . &syntax-rtd) (r4afa core-prim . &lexical-rcd) (r4af8 core-prim . &lexical-rtd) (r4ae5 core-prim . &implementation-restriction-rcd) (r4ae3 core-prim . &implementation-restriction-rtd) (r4ad0 core-prim . &non-continuable-rcd) (r4ace core-prim . &non-continuable-rtd) (r4abb core-prim . &who-rcd) (r4ab9 core-prim . &who-rtd) (r4aa0 core-prim . &irritants-rcd) (r4a9e core-prim . &irritants-rtd) (r4a85 core-prim . &assertion-rcd) (r4a83 core-prim . &assertion-rtd) (r4a70 core-prim . &violation-rcd) (r4a6e core-prim . &violation-rtd) (r4a5b core-prim . &error-rcd) (r4a59 core-prim . &error-rtd) (r4a46 core-prim . &serious-rcd) (r4a44 core-prim . &serious-rtd) (r4a31 core-prim . &warning-rcd) (r4a2f core-prim . &warning-rtd) (r4a1c core-prim . &message-rcd) (r4a1a core-prim . &message-rtd) (r49bd core-prim . &condition-rcd) (r49bb core-prim . &condition-rtd) (r2fa3 core-prim . syntax-error) (r2ebe core-prim . syntax-dispatch) (r5172 core-prim . pretty-print) (r5171 core-prim . eval-core) (r5170 core-prim . set-symbol-value!) (r516f core-prim . symbol-value) (r516e core-prim . gensym) (r516d core-prim . void) (r4d7b core-prim . load) (r2fb3 core-prim . interaction-environment) (r516c core-prim . char-ready?) (r516b core-prim . regexp?) (r516a core-prim . read-line) (r5169 core-prim . ungensym) (r5168 core-prim . alist->eq-hash-table) (r5167 core-prim . assoc-ref) (r5166 core-prim . print) (r5165 core-prim . format) (r5164 core-prim . host-os) (r2954 core-prim . library-path) (r5163 core-prim . standard-library-path) (r5162 core-prim . file-newer?) (r5161 core-prim . stat-mtime) (r5160 core-prim . write-to-file) (r515f core-prim . file->list) (r515e core-prim . file->string) (r515d core-prim . digit->integer) (r515c core-prim . call-with-string-input-port) (r515b core-prim . call-with-string-io) (r515a core-prim . string-split) (r5159 core-prim . bytevector-for-each) (r5158 core-prim . string->regexp) (r5157 core-prim . rxmatch) (r5156 core-prim . regexp-replace-all) (r5155 core-prim . hashtable-for-each) (r5154 core-prim . call-process) (r5153 core-prim . local-tz-offset) (r5152 core-prim . microseconds) (r5151 core-prim . readdir) (r5150 core-prim . set-current-directory!) (r514f core-prim . expand-path) (r514e core-prim . current-directory) (r514d core-prim . %spawn) (r514c core-prim . %waitpid) (r514b core-prim . %ffi-supported?) (r514a core-prim . %ffi-pointer-ref) (r5149 core-prim . %ffi-pointer->string) (r5148 core-prim . %ffi-call->string-or-zero) (r5147 core-prim . %ffi-call->double) (r5146 core-prim . %ffi-call->void*) (r5145 core-prim . %ffi-call->void) (r5144 core-prim . %ffi-call->int) (r5143 core-prim . %ffi-lookup) (r5142 core-prim . %ffi-open) (r5141 core-prim . %fork) (r5140 core-prim . %pipe) (r513f core-prim . p) (r513e core-prim . open-output-string) (r513d core-prim . get-output-string) (r513c core-prim . get-environment-variables) (r513b core-prim . get-environment-variable) (r513a core-prim . get-timeofday) (r5139 core-prim . get-command-line) (r5138 core-prim . sys-display) (r5137 core-prim . mutex-try-lock!) (r5136 core-prim . mutex-unlock!) (r5135 core-prim . mutex-lock!) (r5134 core-prim . mutex?) (r5133 core-prim . make-mutex) (r5132 core-prim . condition-variable-notify-all!) (r5131 core-prim . condition-variable-notify!) (r5130 core-prim . condition-variable-wait!) (r512f core-prim . make-condition-variable) (r512e core-prim . mosh-executable-path) (r512d core-prim . make-file-options) (r512c core-prim . source-info) (r512b core-prim . make-compiler-instruction) (r512a core-prim . make-instruction) (r5129 core-prim . set-source-info!) (r5128 core-prim . bignum?) (r5127 core-prim . fast-equal?) (r5126 core-prim . fasl-read) (r5125 core-prim . fasl-write) (r5124 core-prim . time-usage) (r5123 core-prim . os-constant) (r2787 core-prim . make-parameter) (r5122 core-prim . socket-port) (r5121 core-prim . socket-shutdown) (r5120 core-prim . socket-close) (r511f core-prim . socket-send) (r511e core-prim . socket-recv!) (r511d core-prim . socket-recv) (r511c core-prim . make-server-socket) (r511b core-prim . make-client-socket) (r511a core-prim . socket-accept) (r5119 core-prim . socket?) (r5118 core-prim . string-upcase) (r5117 core-prim . string-titlecase) (r5116 core-prim . string-normalize-nfkd) (r5115 core-prim . string-normalize-nfkc) (r5114 core-prim . string-normalize-nfd) (r5113 core-prim . string-normalize-nfc) (r5112 core-prim . string-foldcase) (r5111 core-prim . string-downcase) (r5110 core-prim . string-ci>?) (r510f core-prim . string-ci>=?) (r510e core-prim . string-ci=?) (r510d core-prim . string-ci<?) (r510c core-prim . string-ci<=?) (r510b core-prim . char-whitespace?) (r510a core-prim . char-upper-case?) (r5109 core-prim . char-title-case?) (r5108 core-prim . char-numeric?) (r5107 core-prim . char-lower-case?) (r5106 core-prim . char-general-category) (r5105 core-prim . char-upcase) (r5104 core-prim . char-titlecase) (r5103 core-prim . char-foldcase) (r5102 core-prim . char-downcase) (r5101 core-prim . char-ci>?) (r5100 core-prim . char-ci>=?) (r50ff core-prim . char-ci=?) (r50fe core-prim . char-ci<?) (r50fd core-prim . char-ci<=?) (r50fc core-prim . char-alphabetic?) (r2ceb core-prim . make-variable-transformer) (r2fa9 core-prim . identifier?) (r2f95 core-prim . generate-temporaries) (r2f97 core-prim . free-identifier=?) (r2fad core-prim . syntax->datum) (r2fab core-prim . datum->syntax) (r2f99 core-prim . bound-identifier=?) (r50fb core-prim . record-type-descriptor?) (r50fa core-prim . record-predicate) (r50f9 core-prim . record-mutator) (r50f8 core-prim . record-constructor) (r50f7 core-prim . record-accessor) (r50f6 core-prim . make-record-type-descriptor) (r50f5 core-prim . make-record-constructor-descriptor) (r50f4 core-prim . record?) (r50f3 core-prim . record-type-uid) (r50f2 core-prim . record-type-sealed?) (r50f1 core-prim . record-type-parent) (r50f0 core-prim . record-type-opaque?) (r50ef core-prim . record-type-name) (r50ee core-prim . record-type-generative?) (r50ed core-prim . record-type-field-names) (r50ec core-prim . record-rtd) (r50eb core-prim . record-field-mutable?) (r50ea core-prim . delete-file) (r50e9 core-prim . file-exists?) (r50e8 core-prim . vector-sort!) (r50e7 core-prim . vector-sort) (r50e6 core-prim . list-sort) (r50e5 core-prim . symbol-hash) (r50e4 core-prim . string-ci-hash) (r50e3 core-prim . string-hash) (r50e2 core-prim . equal-hash) (r50e1 core-prim . hashtable-equivalence-function) (r50e0 core-prim . make-hashtable) (r50df core-prim . hashtable-hash-function) (r50de core-prim . make-eqv-hashtable) (r50dd core-prim . make-eq-hashtable) (r50dc core-prim . hashtable?) (r50db core-prim . hashtable-update!) (r50da core-prim . hashtable-size) (r50d9 core-prim . hashtable-set!) (r50d8 core-prim . hashtable-ref) (r50d7 core-prim . hashtable-mutable?) (r50d6 core-prim . hashtable-keys) (r50d5 core-prim . hashtable-entries) (r50d4 core-prim . hashtable-delete!) (r50d3 core-prim . hashtable-copy) (r50d2 core-prim . hashtable-contains?) (r50d1 core-prim . hashtable-clear!) (r50d0 core-prim . call-with-output-file) (r50cf core-prim . call-with-input-file) (r50ce core-prim . write-char) (r50cd core-prim . write) (r50cc core-prim . with-output-to-file) (r50cb core-prim . with-input-from-file) (r50ca core-prim . read-char) (r50c9 core-prim . read) (r50c8 core-prim . peek-char) (r50c7 core-prim . open-output-file) (r50c6 core-prim . open-input-file) (r50c5 core-prim . newline) (r50c4 core-prim . display) (r50c3 core-prim . close-output-port) (r50c2 core-prim . close-input-port) (r50c1 core-prim . eof-object?) (r50c0 core-prim . eof-object) (r50bf core-prim . current-error-port) (r50be core-prim . current-output-port) (r50bd core-prim . current-input-port) (r50bc core-prim . output-port?) (r50bb core-prim . input-port?) (r50ba core-prim . utf-8-codec) (r50b9 core-prim . utf-16-codec) (r50b8 core-prim . transcoder-error-handling-mode) (r50b7 core-prim . transcoder-eol-style) (r50b6 core-prim . transcoder-codec) (r50b5 core-prim . transcoded-port) (r50b4 core-prim . textual-port?) (r50b3 core-prim . string->bytevector) (r50b2 core-prim . standard-output-port) (r50b1 core-prim . standard-input-port) (r50b0 core-prim . standard-error-port) (r50af core-prim . set-port-position!) (r50ae core-prim . put-u8) (r50ad core-prim . put-string) (r50ac core-prim . put-datum) (r50ab core-prim . put-char) (r50aa core-prim . put-bytevector) (r50a9 core-prim . port?) (r50a8 core-prim . port-transcoder) (r50a7 core-prim . port-position) (r50a6 core-prim . port-has-set-port-position!?) (r50a5 core-prim . port-has-port-position?) (r50a4 core-prim . port-eof?) (r50a3 core-prim . output-port-buffer-mode) (r50a2 core-prim . open-string-output-port) (r50a1 core-prim . open-string-input-port) (r50a0 core-prim . open-file-output-port) (r509f core-prim . open-file-input/output-port) (r509e core-prim . open-file-input-port) (r509d core-prim . open-bytevector-output-port) (r509c core-prim . open-bytevector-input-port) (r509b core-prim . native-transcoder) (r509a core-prim . native-eol-style) (r5099 core-prim . make-transcoder) (r5098 core-prim . latin-1-codec) (r4b69 core-prim . make-i/o-write-error) (r4b54 core-prim . make-i/o-read-error) (r4c0a core-prim . make-i/o-port-error) (r4b80 core-prim . make-i/o-invalid-position-error) (r4b9b core-prim . make-i/o-filename-error) (r4bb4 core-prim . make-i/o-file-protection-error) (r4bc9 core-prim . make-i/o-file-is-read-only-error) (r4bf3 core-prim . make-i/o-file-does-not-exist-error) (r4bde core-prim . make-i/o-file-already-exists-error) (r4b3f core-prim . make-i/o-error) (r4c3a core-prim . make-i/o-encoding-error) (r4c23 core-prim . make-i/o-decoding-error) (r5097 core-prim . make-custom-textual-output-port) (r5096 core-prim . make-custom-textual-input/output-port) (r5095 core-prim . make-custom-textual-input-port) (r5094 core-prim . make-custom-binary-output-port) (r5093 core-prim . make-custom-binary-input/output-port) (r5092 core-prim . make-custom-binary-input-port) (r5091 core-prim . make-bytevector) (r5090 core-prim . lookahead-u8) (r508f core-prim . lookahead-char) (r4b6b core-prim . i/o-write-error?) (r4b56 core-prim . i/o-read-error?) (r4c0e core-prim . i/o-port-error?) (r4b84 core-prim . i/o-invalid-position-error?) (r4b9f core-prim . i/o-filename-error?) (r4bb6 core-prim . i/o-file-protection-error?) (r4bcb core-prim . i/o-file-is-read-only-error?) (r4bf5 core-prim . i/o-file-does-not-exist-error?) (r4be0 core-prim . i/o-file-already-exists-error?) (r4b41 core-prim . i/o-error?) (r4b86 core-prim . i/o-error-position) (r4c10 core-prim . i/o-error-port) (r4ba1 core-prim . i/o-error-filename) (r4c3e core-prim . i/o-encoding-error?) (r4c40 core-prim . i/o-encoding-error-char) (r4c25 core-prim . i/o-decoding-error?) (r508e core-prim . get-u8) (r508d core-prim . get-string-n!) (r508c core-prim . get-string-n) (r508b core-prim . get-string-all) (r508a core-prim . get-line) (r5089 core-prim . get-datum) (r5088 core-prim . get-char) (r5087 core-prim . get-bytevector-some) (r5086 core-prim . get-bytevector-n!) (r5085 core-prim . get-bytevector-n) (r5084 core-prim . get-bytevector-all) (r5083 core-prim . flush-output-port) (r5082 core-prim . close-port) (r2f83 core-prim . scheme-report-environment) (r5081 core-prim . quotient) (r2f81 core-prim . null-environment) (r5080 core-prim . remainder) (r507f core-prim . modulo) (r507e core-prim . inexact->exact) (r507d core-prim . force) (r507c core-prim . exact->inexact) (r507b core-prim . make-promise) (r507a core-prim . exit) (r4d75 core-prim . command-line) (r5079 core-prim . string-fill!) (r5078 core-prim . string-set!) (r5077 core-prim . set-cdr!) (r5076 core-prim . set-car!) (r5075 core-prim . remove) (r5074 core-prim . remv) (r5073 core-prim . remp) (r5072 core-prim . remq) (r5071 core-prim . partition) (r5070 core-prim . memv) (r506f core-prim . memq) (r506e core-prim . memp) (r506d core-prim . member) (r506c core-prim . exists) (r506b core-prim . for-all) (r506a core-prim . fold-right) (r5069 core-prim . fold-left) (r5068 core-prim . find) (r5067 core-prim . filter) (r5066 core-prim . cons*) (r5065 core-prim . assv) (r5064 core-prim . assq) (r5063 core-prim . assp) (r5062 core-prim . assoc) (r5061 core-prim . call-with-string-output-port) (r5060 core-prim . call-with-port) (r505f core-prim . call-with-bytevector-output-port) (r505e core-prim . bytevector->string) (r505d core-prim . buffer-mode?) (r505c core-prim . binary-port?) (r505b core-prim . with-exception-handler) (r505a core-prim . raise-continuable) (r5059 core-prim . raise) (r2f87 core-prim . eval) (r2f7f core-prim . environment) (r5058 core-prim . make-enumeration) (r5057 core-prim . enum-set=?) (r5056 core-prim . enum-set-universe) (r5055 core-prim . enum-set-union) (r5054 core-prim . enum-set-subset?) (r5053 core-prim . enum-set-projection) (r5052 core-prim . enum-set-member?) (r5051 core-prim . enum-set-intersection) (r5050 core-prim . enum-set-indexer) (r504f core-prim . enum-set-difference) (r504e core-prim . enum-set-constructor) (r504d core-prim . enum-set-complement) (r504c core-prim . enum-set->list) (r4ab5 core-prim . who-condition?) (r4a2d core-prim . warning?) (r4a6c core-prim . violation?) (r4b2c core-prim . undefined-violation?) (r4b13 core-prim . syntax-violation?) (r4b17 core-prim . syntax-violation-subform) (r4b15 core-prim . syntax-violation-form) (r2fa7 core-prim . syntax-violation) (r504b core-prim . simple-conditions) (r4a42 core-prim . serious-condition?) (r4acc core-prim . non-continuable-violation?) (r4a16 core-prim . message-condition?) (r4ab1 core-prim . make-who-condition) (r4a2b core-prim . make-warning) (r4a6a core-prim . make-violation) (r4b2a core-prim . make-undefined-violation) (r4b0d core-prim . make-syntax-violation) (r4a40 core-prim . make-serious-condition) (r4aca core-prim . make-non-continuable-violation) (r4a12 core-prim . make-message-condition) (r4af4 core-prim . make-lexical-violation) (r4a96 core-prim . make-irritants-condition) (r4adf core-prim . make-implementation-restriction-violation) (r4a55 core-prim . make-error) (r4a7f core-prim . make-assertion-violation) (r4af6 core-prim . lexical-violation?) (r4a9a core-prim . irritants-condition?) (r4ae1 core-prim . implementation-restriction-violation?) (r4a57 core-prim . error?) (r4ab7 core-prim . condition-who) (r504a core-prim . condition-predicate) (r4a18 core-prim . condition-message) (r4a9c core-prim . condition-irritants) (r5049 core-prim . condition-accessor) (r5048 core-prim . condition) (r4a81 core-prim . assertion-violation?) (r5047 core-prim . condition?) (r5046 core-prim . utf32->string) (r5045 core-prim . utf16->string) (r5044 core-prim . utf8->string) (r5043 core-prim . uint-list->bytevector) (r5042 core-prim . u8-list->bytevector) (r5041 core-prim . string->utf8) (r5040 core-prim . string->utf32) (r503f core-prim . string->utf16) (r503e core-prim . sint-list->bytevector) (r503d core-prim . native-endianness) (r503c core-prim . bytevector?) (r503b core-prim . bytevector=?) (r503a core-prim . bytevector-uint-set!) (r5039 core-prim . bytevector-uint-ref) (r5038 core-prim . bytevector-u8-set!) (r5037 core-prim . bytevector-u8-ref) (r5036 core-prim . bytevector-u64-set!) (r5035 core-prim . bytevector-u64-ref) (r5034 core-prim . bytevector-u64-native-set!) (r5033 core-prim . bytevector-u64-native-ref) (r5032 core-prim . bytevector-u32-set!) (r5031 core-prim . bytevector-u32-ref) (r5030 core-prim . bytevector-u32-native-set!) (r502f core-prim . bytevector-u32-native-ref) (r502e core-prim . bytevector-u16-set!) (r502d core-prim . bytevector-u16-ref) (r502c core-prim . bytevector-u16-native-set!) (r502b core-prim . bytevector-u16-native-ref) (r502a core-prim . bytevector-sint-set!) (r5029 core-prim . bytevector-sint-ref) (r5028 core-prim . bytevector-s8-set!) (r5027 core-prim . bytevector-s8-ref) (r5026 core-prim . bytevector-s64-set!) (r5025 core-prim . bytevector-s64-ref) (r5024 core-prim . bytevector-s64-native-set!) (r5023 core-prim . bytevector-s64-native-ref) (r5022 core-prim . bytevector-s32-set!) (r5021 core-prim . bytevector-s32-ref) (r5020 core-prim . bytevector-s32-native-set!) (r501f core-prim . bytevector-s32-native-ref) (r501e core-prim . bytevector-s16-set!) (r501d core-prim . bytevector-s16-ref) (r501c core-prim . bytevector-s16-native-set!) (r501b core-prim . bytevector-s16-native-ref) (r501a core-prim . bytevector-length) (r5019 core-prim . bytevector-ieee-single-ref) (r5018 core-prim . bytevector-ieee-single-set!) (r5017 core-prim . bytevector-ieee-single-native-set!) (r5016 core-prim . bytevector-ieee-single-native-ref) (r5015 core-prim . bytevector-ieee-double-set!) (r5014 core-prim . bytevector-ieee-double-ref) (r5013 core-prim . bytevector-ieee-double-native-set!) (r5012 core-prim . bytevector-ieee-double-native-ref) (r5011 core-prim . bytevector-fill!) (r5010 core-prim . bytevector-copy!) (r500f core-prim . bytevector-copy) (r500e core-prim . bytevector->uint-list) (r500d core-prim . bytevector->u8-list) (r500c core-prim . bytevector->sint-list) (r4c6a core-prim . no-nans-violation?) (r4c55 core-prim . no-infinities-violation?) (r4c68 core-prim . make-no-nans-violation) (r4c53 core-prim . make-no-infinities-violation) (r500b core-prim . real->flonum) (r500a core-prim . flzero?) (r5009 core-prim . fltruncate) (r5008 core-prim . fltan) (r5007 core-prim . flsqrt) (r5006 core-prim . flsin) (r5005 core-prim . flround) (r5004 core-prim . flpositive?) (r5003 core-prim . flonum?) (r5002 core-prim . flodd?) (r5001 core-prim . flnumerator) (r5000 core-prim . flnegative?) (r4fff core-prim . flnan?) (r4ffe core-prim . flmod0) (r4ffd core-prim . flmod) (r4ffc core-prim . flmin) (r4ffb core-prim . flmax) (r4ffa core-prim . fllog) (r4ff9 core-prim . flinteger?) (r4ff8 core-prim . flinfinite?) (r4ff7 core-prim . flfloor) (r4ff6 core-prim . flfinite?) (r4ff5 core-prim . flexpt) (r4ff4 core-prim . flexp) (r4ff3 core-prim . fleven?) (r4ff2 core-prim . fldiv0-and-mod0) (r4ff1 core-prim . fldiv0) (r4ff0 core-prim . fldiv-and-mod) (r4fef core-prim . fldiv) (r4fee core-prim . fldenominator) (r4fed core-prim . flcos) (r4fec core-prim . flceiling) (r4feb core-prim . flatan) (r4fea core-prim . flasin) (r4fe9 core-prim . flacos) (r4fe8 core-prim . flabs) (r4fe7 core-prim . fl>?) (r4fe6 core-prim . fl>=?) (r4fe5 core-prim . fl=?) (r4fe4 core-prim . fl<?) (r4fe3 core-prim . fl<=?) (r4fe2 core-prim . fl/) (r4fe1 core-prim . fl-) (r4fe0 core-prim . fl+) (r4fdf core-prim . fl*) (r4fde core-prim . fixnum->flonum) (r4fdd core-prim . fxzero?) (r4fdc core-prim . fxxor) (r4fdb core-prim . fxrotate-bit-field) (r4fda core-prim . fxreverse-bit-field) (r4fd9 core-prim . fxpositive?) (r4fd8 core-prim . fxodd?) (r4fd7 core-prim . fxnot) (r4fd6 core-prim . fxnegative?) (r4fd5 core-prim . fxmod0) (r4fd4 core-prim . fxmod) (r4fd3 core-prim . fxmin) (r4fd2 core-prim . fxmax) (r4fd1 core-prim . fxlength) (r4fd0 core-prim . fxior) (r4fcf core-prim . fxif) (r4fce core-prim . fxfirst-bit-set) (r4fcd core-prim . fxeven?) (r4fcc core-prim . fxdiv0-and-mod0) (r4fcb core-prim . fxdiv0) (r4fca core-prim . fxdiv-and-mod) (r4fc9 core-prim . fxdiv) (r4fc8 core-prim . fxcopy-bit-field) (r4fc7 core-prim . fxcopy-bit) (r4fc6 core-prim . fxbit-set?) (r4fc5 core-prim . fxbit-field) (r4fc4 core-prim . fxbit-count) (r4fc3 core-prim . fxarithmetic-shift-right) (r4fc2 core-prim . fxarithmetic-shift-left) (r4fc1 core-prim . fxarithmetic-shift) (r4fc0 core-prim . fxand) (r4fbf core-prim . fx>?) (r4fbe core-prim . fx>=?) (r4fbd core-prim . fx=?) (r4fbc core-prim . fx<?) (r4fbb core-prim . fx<=?) (r4fba core-prim . fx-/carry) (r4fb9 core-prim . fx-) (r4fb8 core-prim . fx+/carry) (r4fb7 core-prim . fx+) (r4fb6 core-prim . fx*/carry) (r4fb5 core-prim . fx*) (r4fb4 core-prim . greatest-fixnum) (r4fb3 core-prim . least-fixnum) (r4fb2 core-prim . fixnum-width) (r4fb1 core-prim . fixnum?) (r4fb0 core-prim . bitwise-rotate-bit-field) (r4faf core-prim . bitwise-reverse-bit-field) (r4fae core-prim . bitwise-length) (r4fad core-prim . bitwise-if) (r4fac core-prim . bitwise-first-bit-set) (r4fab core-prim . bitwise-copy-bit-field) (r4faa core-prim . bitwise-copy-bit) (r4fa9 core-prim . bitwise-bit-set?) (r4fa8 core-prim . bitwise-bit-field) (r4fa7 core-prim . bitwise-bit-count) (r4fa6 core-prim . bitwise-xor) (r4fa5 core-prim . bitwise-ior) (r4fa4 core-prim . bitwise-and) (r4fa3 core-prim . bitwise-not) (r4fa2 core-prim . bitwise-arithmetic-shift-right) (r4fa1 core-prim . bitwise-arithmetic-shift-left) (r4fa0 core-prim . bitwise-arithmetic-shift) (r4f9f core-prim . zero?) (r4f9e core-prim . vector?) (r4f9d core-prim . vector-set!) (r4f9c core-prim . vector-ref) (r4f9b core-prim . vector-map) (r4f9a core-prim . vector-length) (r4f99 core-prim . vector-for-each) (r4f98 core-prim . vector-fill!) (r4f97 core-prim . vector->list) (r4f96 core-prim . vector) (r4f95 core-prim . values) (r4f94 core-prim . truncate) (r4f93 core-prim . tan) (r4f92 core-prim . symbol?) (r4f91 core-prim . symbol=?) (r4f90 core-prim . symbol->string) (r4f8f core-prim . substring) (r4f8e core-prim . string?) (r4f8d core-prim . string>?) (r4f8c core-prim . string>=?) (r4f8b core-prim . string=?) (r4f8a core-prim . string<?) (r4f89 core-prim . string<=?) (r4f88 core-prim . string-ref) (r4f87 core-prim . string-length) (r4f86 core-prim . string-for-each) (r4f85 core-prim . string-copy) (r4f84 core-prim . string-append) (r4f83 core-prim . string->symbol) (r4f82 core-prim . string->number) (r4f81 core-prim . string->list) (r4f80 core-prim . string) (r4f7f core-prim . sqrt) (r4f7e core-prim . sin) (r4f7d core-prim . round) (r4f7c core-prim . reverse) (r4f7b core-prim . real?) (r4f7a core-prim . real-valued?) (r4f79 core-prim . real-part) (r4f78 core-prim . rationalize) (r4f77 core-prim . rational?) (r4f76 core-prim . rational-valued?) (r4f75 core-prim . procedure?) (r4f74 core-prim . positive?) (r4f73 core-prim . pair?) (r4f72 core-prim . odd?) (r4f71 core-prim . numerator) (r4f70 core-prim . number?) (r4f6f core-prim . number->string) (r4f6e core-prim . null?) (r4f6d core-prim . not) (r4f6c core-prim . negative?) (r4f6b core-prim . nan?) (r4f6a core-prim . min) (r4f69 core-prim . max) (r4f68 core-prim . map) (r4f67 core-prim . make-vector) (r4f66 core-prim . make-string) (r4f65 core-prim . make-rectangular) (r4f64 core-prim . make-polar) (r4f63 core-prim . magnitude) (r4f62 core-prim . log) (r4f61 core-prim . list?) (r4f60 core-prim . list-tail) (r4f5f core-prim . list-ref) (r4f5e core-prim . list->vector) (r4f5d core-prim . list->string) (r4f5c core-prim . list) (r4f5b core-prim . length) (r4f5a core-prim . lcm) (r4f59 core-prim . integer?) (r4f58 core-prim . integer-valued?) (r4f57 core-prim . integer->char) (r4f56 core-prim . infinite?) (r4f55 core-prim . inexact?) (r4f54 core-prim . inexact) (r4f53 core-prim . imag-part) (r4f52 core-prim . gcd) (r4f51 core-prim . for-each) (r4f50 core-prim . floor) (r4f4f core-prim . finite?) (r4f4e core-prim . expt) (r4f4d core-prim . exp) (r4f4c core-prim . exact?) (r4f4b core-prim . exact-integer-sqrt) (r4f4a core-prim . exact) (r4f49 core-prim . even?) (r4f48 core-prim . error) (r4f47 core-prim . eqv?) (r4f46 core-prim . equal?) (r4f45 core-prim . eq?) (r4f44 core-prim . dynamic-wind) (r4f43 core-prim . div0-and-mod0) (r4f42 core-prim . mod0) (r4f41 core-prim . div0) (r4f40 core-prim . div-and-mod) (r4f3f core-prim . mod) (r4f3e core-prim . div) (r4f3d core-prim . denominator) (r4f3c core-prim . cos) (r4f3b core-prim . cons) (r4f3a core-prim . complex?) (r4f39 core-prim . char?) (r4f38 core-prim . char>?) (r4f37 core-prim . char>=?) (r4f36 core-prim . char=?) (r4f35 core-prim . char<?) (r4f34 core-prim . char<=?) (r4f33 core-prim . char->integer) (r4f32 core-prim . ceiling) (r4f31 core-prim . call-with-values) (r4f30 core-prim . call/cc) (r4f2f core-prim . call-with-current-continuation) (r4f2e core-prim . cddddr) (r4f2d core-prim . cdddar) (r4f2c core-prim . cddadr) (r4f2b core-prim . cddaar) (r4f2a core-prim . cdaddr) (r4f29 core-prim . cdadar) (r4f28 core-prim . cdaadr) (r4f27 core-prim . cdaaar) (r4f26 core-prim . cadddr) (r4f25 core-prim . caddar) (r4f24 core-prim . cadadr) (r4f23 core-prim . cadaar) (r4f22 core-prim . caaddr) (r4f21 core-prim . caadar) (r4f20 core-prim . caaadr) (r4f1f core-prim . caaaar) (r4f1e core-prim . cdddr) (r4f1d core-prim . cddar) (r4f1c core-prim . cdadr) (r4f1b core-prim . cdaar) (r4f1a core-prim . caddr) (r4f19 core-prim . cadar) (r4f18 core-prim . caadr) (r4f17 core-prim . caaar) (r4f16 core-prim . cddr) (r4f15 core-prim . cdar) (r4f14 core-prim . cadr) (r4f13 core-prim . caar) (r4f12 core-prim . cdr) (r4f11 core-prim . car) (r4f10 core-prim . boolean?) (r4f0f core-prim . boolean=?) (r4f0e core-prim . atan) (r4f0d core-prim . assertion-violation) (r2fa1 core-prim . assertion-error) (r4f0c core-prim . asin) (r4f0b core-prim . apply) (r4f0a core-prim . append) (r4f09 core-prim . angle) (r4f08 core-prim . acos) (r4f07 core-prim . abs) (r4f06 core-prim . /) (r4f05 core-prim . *) (r4f04 core-prim . -) (r4f03 core-prim . +) (r4f02 core-prim . >=) (r4f01 core-prim . >) (r4f00 core-prim . =) (r4eff core-prim . <=) (r4efe core-prim . <) (r4efd core-prim . library) (r4efc $core-rtd &no-nans-rtd &no-nans-rcd) (r4efb $core-rtd &no-infinities-rtd &no-infinities-rcd) (r4efa $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (r4ef9 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (r4ef8 $core-rtd &i/o-port-rtd &i/o-port-rcd) (r4ef7 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (r4ef6 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (r4ef5 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (r4ef4 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (r4ef3 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (r4ef2 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (r4ef1 $core-rtd &i/o-write-rtd &i/o-write-rcd) (r4ef0 $core-rtd &i/o-read-rtd &i/o-read-rcd) (r4eef $core-rtd &i/o-rtd &i/o-rcd) (r4eee $core-rtd &undefined-rtd &undefined-rcd) (r4eed $core-rtd &syntax-rtd &syntax-rcd) (r4eec $core-rtd &lexical-rtd &lexical-rcd) (r4eeb $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (r4eea $core-rtd &non-continuable-rtd &non-continuable-rcd) (r4ee9 $core-rtd &who-rtd &who-rcd) (r4ee8 $core-rtd &irritants-rtd &irritants-rcd) (r4ee7 $core-rtd &assertion-rtd &assertion-rcd) (r4ee6 $core-rtd &violation-rtd &violation-rcd) (r4ee5 $core-rtd &error-rtd &error-rcd) (r4ee4 $core-rtd &serious-rtd &serious-rcd) (r4ee3 $core-rtd &warning-rtd &warning-rcd) (r4ee2 $core-rtd &message-rtd &message-rcd) (r4ee1 $core-rtd &condition-rtd &condition-rcd) (r4ee0 macro . define-condition-type) (r4edf macro . define-enumeration) (r4ede macro . define-record-type) (r4edd macro . parent-rtd) (r4edc macro . nongenerative) (r4edb macro . opaque) (r4eda macro . sealed) (r4ed9 macro . protocol) (r4ed8 macro . parent) (r4ed7 macro . immutable) (r4ed6 macro . mutable) (r4ed5 macro . fields) (r4ed4 macro . error-handling-mode) (r4ed3 macro . file-options) (r4ed2 macro . buffer-mode) (r4ed1 macro . eol-style) (r4ed0 macro . guard) (r4ecf macro . trace-define) (r4ece macro . trace-lambda) (r4ecd macro . unsyntax-splicing) (r4ecc macro . unsyntax) (r4ecb macro . unquote-splicing) (r4eca macro . unquote) (r4ec9 macro . _) (r4ec8 macro . else) (r4ec7 macro . =>) (r4ec6 macro . ...) (r4ec5 macro . assert) (r4ec4 macro . endianness) (r4ec3 macro . delay) (r4ec2 macro . time) (r4ec1 macro . do) (r4ec0 macro . cond) (r4ebf macro . let*) (r4ebe macro . let) (r4ebd macro . let*-values) (r4ebc macro . let-values) (r4ebb macro . identifier-syntax) (r4eba macro . with-syntax) (r4eb9 macro . quasisyntax) (r4eb8 macro . quasiquote) (r4eb7 macro . syntax-rules) (r4eb6 macro . include) (r4eb5 macro . define-struct) (r4eb4 core-macro . record-constructor-descriptor) (r4eb3 core-macro . record-type-descriptor) (r4eb2 macro . case) (r4eb1 macro . parameterize) (r4eb0 macro . unless) (r4eaf macro . when) (r4eae core-macro . or) (r4ead core-macro . and) (r4eac core-macro . if) (r4eab core-macro . letrec*) (r4eaa core-macro . letrec) (r4ea9 core-macro . type-descriptor) (r4ea8 core-macro . case-lambda) (r4ea7 core-macro . lambda) (r4ea6 core-macro . syntax) (r4ea5 core-macro . syntax-case) (r4ea4 core-macro . quote) (r4ea3 core-macro . foreign-call) (r4ea2 letrec-syntax) (r4ea1 let-syntax) (r4ea0 set!) (r4e9f import) (r4e9e begin) (r4e9d module) (r4e9c define-syntax) (r4e9b define)) values values '#f '#f '#f '#f) (r2ad6@r2975@install-library 'r5193 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . r5172) (eval-core . r5171) (set-symbol-value! . r5170) (symbol-value . r516f) (gensym . r516e) (void . r516d)) '() values values '#f '#f '#f '#f) (r2ad6@r2975@install-library 'r5194 '(mosh) '() '() '() '() '((set-symbol-value! . r5170) (symbol-value . r516f) (regexp? . r516b) (read-line . r516a) (ungensym . r5169) (alist->eq-hash-table . r5168) (assoc-ref . r5167) (print . r5166) (format . r5165) (host-os . r5164) (library-path . r2954) (standard-library-path . r5163) (file-newer? . r5162) (stat-mtime . r5161) (write-to-file . r5160) (file->list . r515f) (file->string . r515e) (digit->integer . r515d) (call-with-string-input-port . r515c) (call-with-string-io . r515b) (string-split . r515a) (bytevector-for-each . r5159) (string->regexp . r5158) (rxmatch . r5157) (regexp-replace-all . r5156) (hashtable-for-each . r5155) (readdir . r5151) (set-current-directory! . r5150) (expand-path . r514f) (current-directory . r514e) (p . r513f) (get-timeofday . r513a) (get-command-line . r5139) (sys-display . r5138) (mutex-try-lock! . r5137) (mutex-unlock! . r5136) (mutex-lock! . r5135) (mutex? . r5134) (make-mutex . r5133) (condition-variable-notify-all! . r5132) (condition-variable-notify! . r5131) (condition-variable-wait! . r5130) (make-condition-variable . r512f) (mosh-executable-path . r512e) (make-file-options . r512d) (source-info . r512c) (make-compiler-instruction . r512b) (make-instruction . r512a) (set-source-info! . r5129) (bignum? . r5128) (fast-equal? . r5127) (fasl-read . r5126) (fasl-write . r5125) (time-usage . r5124) (os-constant . r5123) (time . r4ec2) (include . r4eb6)) '() values values '#f '#f '#f '#f) (r2ad6@r2975@install-library 'r5195 '(system) '() '() '() '() '((call-process . r5154) (local-tz-offset . r5153) (microseconds . r5152) (expand-path . r514f) (%spawn . r514d) (%waitpid . r514c) (%ffi-supported? . r514b) (%ffi-pointer-ref . r514a) (%ffi-pointer->string . r5149) (%ffi-call->string-or-zero . r5148) (%ffi-call->double . r5147) (%ffi-call->void* . r5146) (%ffi-call->void . r5145) (%ffi-call->int . r5144) (%ffi-lookup . r5143) (%ffi-open . r5142) (%fork . r5141) (%pipe . r5140) (open-output-string . r513e) (get-output-string . r513d) (get-environment-variables . r513c) (get-environment-variable . r513b) (make-parameter . r2787) (socket-port . r5122) (socket-shutdown . r5121) (socket-close . r5120) (socket-send . r511f) (socket-recv! . r511e) (socket-recv . r511d) (make-server-socket . r511c) (make-client-socket . r511b) (socket-accept . r511a) (socket? . r5119) (parameterize . r4eb1)) '() values values '#f '#f '#f '#f))
((lambda (r4d64@add-library-path! r4d66@parse-and-add-library-path r4d68@for-each-with-index r4d6a@rpad r4d6c@condition-printer r4d6e@record->field-alist r4d70@map-with-index r4d72@repl r4d74@trace-printer r4d76@command-line r4d78@local-library-path r4d7a@load/args r4d7c@load r4d7e@ironscheme-build r4d80@eval-top-level r4d82@compile-system-libraries r4d84@compile r4d86@compile->closure r4d88@pre-compile-r6rs-file r4d8a@load-r6rs-top-level r4d8c@load-r6rs-top-level-sexp) (begin (set! r4d64@add-library-path! (lambda (r4daf@path) (r2ac6@r2955@library-path (append (r2ac6@r2955@library-path) (list r4daf@path))))) (set! r4d66@parse-and-add-library-path (lambda (r4db1@paths r4db2@message) ((lambda (r4db5@t) (if r4db5@t ((lambda (r4db7@paths) (for-each (lambda (r4db9@path) (if (file-exists? r4db9@path) (r4d64@add-library-path! (expand-path r4db9@path)) (format (current-error-port) r4db2@message r4db9@path))) (reverse (string-split r4db7@paths '#\:)))) r4db5@t) (void))) r4db1@paths))) (set! r4d68@for-each-with-index (lambda (r4dbb@proc r4dbc@lst) (letrec ((r4dbf@loop (lambda (r4dc1@i r4dc2@lst) (if (null? r4dc2@lst) (if '#f '#f (void)) (begin (r4dbb@proc r4dc1@i (car r4dc2@lst)) (r4dbf@loop (+ r4dc1@i '1) (cdr r4dc2@lst))))))) (r4dbf@loop '1 r4dbc@lst)))) (set! r4d6a@rpad (lambda (r4dc5@str r4dc6@pad r4dc7@n) ((lambda (r4dcb@rest) ((letrec ((r4dcd@loop (lambda (r4dcf@rest r4dd0@ret) (if (<= r4dcf@rest '0) r4dd0@ret (r4dcd@loop (- r4dcf@rest '1) (string-append r4dd0@ret r4dc6@pad)))))) r4dcd@loop) r4dcb@rest (format '"~a" r4dc5@str))) (- r4dc7@n (string-length (format '"~a" r4dc5@str)))))) (set! r4d6c@condition-printer (lambda (r4dd3@e r4dd4@port) ((lambda (r4dd8@max-condition-len) (begin (set! r4dd8@max-condition-len (apply max (map (lambda (r4de9@c) (string-length (symbol->string (record-type-name (record-rtd r4de9@c))))) (simple-conditions r4dd3@e)))) (begin (display '" Condition components:\n" r4dd4@port) (r4d68@for-each-with-index (lambda (r4dd9@i r4dda@x) ((lambda (r4ddd@rtd r4dde@fields-alist) (begin (format r4dd4@port '" ~d. ~a" r4dd9@i (r4d6a@rpad (symbol->string (record-type-name r4ddd@rtd)) '" " r4dd8@max-condition-len)) (if (null? r4dde@fields-alist) (newline r4dd4@port) (void)) ((letrec ((r4de1@loop (lambda (r4de3@first r4de4@fields-alist) (if (null? r4de4@fields-alist) '() ((lambda (r4de7@field) (begin (if (not r4de3@first) (display (r4d6a@rpad '"" '" " (+ '4 r4dd8@max-condition-len)) r4dd4@port) (void)) (display '"       " r4dd4@port) (display (car r4de7@field) r4dd4@port) (display '": " r4dd4@port) (write (cdr r4de7@field) r4dd4@port) (newline r4dd4@port) (r4de1@loop '#f (cdr r4de4@fields-alist)))) (car r4de4@fields-alist)))))) r4de1@loop) '#t r4dde@fields-alist))) (record-rtd r4dda@x) (r4d6e@record->field-alist r4dda@x))) (simple-conditions r4dd3@e))))) '#f))) (set! r4d6e@record->field-alist (lambda (r4deb@r) ((lambda (r4dee@ref) (begin (set! r4dee@ref (lambda (r4df9@rtd r4dfa@i r4dfb@x) ((lambda (r4dff@val) (if (symbol? r4dff@val) (ungensym r4dff@val) r4dff@val)) ((record-accessor r4df9@rtd r4dfa@i) r4dfb@x)))) ((letrec ((r4def@loop (lambda (r4df1@ret r4df2@rtd) (if r4df2@rtd (r4def@loop (append r4df1@ret (r4d70@map-with-index (lambda (r4df5@i r4df6@field) (cons r4df6@field (r4dee@ref r4df2@rtd r4df5@i r4deb@r))) (vector->list (record-type-field-names r4df2@rtd)))) (record-type-parent r4df2@rtd)) r4df1@ret)))) r4def@loop) '() (record-rtd r4deb@r)))) '#f))) (set! r4d70@map-with-index (lambda (r4e01@proc r4e02@lst) ((letrec ((r4e05@loop (lambda (r4e07@i r4e08@lst r4e09@ret) (if (null? r4e08@lst) (reverse r4e09@ret) (r4e05@loop (+ r4e07@i '1) (cdr r4e08@lst) (cons (r4e01@proc r4e07@i (car r4e08@lst)) r4e09@ret)))))) r4e05@loop) '0 r4e02@lst '()))) (set! r4d72@repl (lambda r4e0d@x ((lambda (r4e10@rec) (begin (set! r4e10@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (r4e13@r4e11) (lambda () (with-exception-handler (lambda (r4e15@e) ((call/cc (lambda (r4e17@r4e12) (r4e13@r4e11 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? r4e15@e) (r4d6c@condition-printer r4e15@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" r4e15@e))) (r4e17@r4e12 (lambda () (raise-continuable r4e15@e)))))))))) (lambda () ((letrec ((r4e19@loop (lambda (r4e1b@line r4e1c@accum) ((lambda (r4e20@parentheses-ok? r4e22@eval-string-print) (begin (set! r4e20@parentheses-ok? (lambda (r4e27@text) ((letrec ((r4e29@loop (lambda (r4e2b@chars r4e2c@p0 r4e2d@p1) (if (null? r4e2b@chars) (= '0 r4e2c@p0 r4e2d@p1) ((lambda (r4e31@t) (if (memv r4e31@t '(#\()) (r4e29@loop (cdr r4e2b@chars) (+ r4e2c@p0 '1) r4e2d@p1) (if (memv r4e31@t '(#\))) (r4e29@loop (cdr r4e2b@chars) (- r4e2c@p0 '1) r4e2d@p1) (if (memv r4e31@t '(#\[)) (r4e29@loop (cdr r4e2b@chars) r4e2c@p0 (+ r4e2d@p1 '1)) (if (memv r4e31@t '(#\])) (r4e29@loop (cdr r4e2b@chars) r4e2c@p0 (- r4e2d@p1 '1)) (r4e29@loop (cdr r4e2b@chars) r4e2c@p0 r4e2d@p1)))))) (car r4e2b@chars)))))) r4e29@loop) (string->list r4e27@text) '0 '0))) (set! r4e22@eval-string-print (lambda (r4e25@text) (if (not (or (string=? '"\n" r4e25@text) (= '0 (string-length r4e25@text)))) (write (r4d80@eval-top-level (call-with-port (open-string-input-port r4e25@text) read))) (void)))) (if (eof-object? r4e1b@line) (begin (r4e22@eval-string-print r4e1c@accum) (exit)) ((lambda (r4e23@current) (if (r4e20@parentheses-ok? r4e23@current) (r4e22@eval-string-print r4e23@current) (r4e19@loop (get-line (current-input-port)) r4e23@current))) (string-append r4e1c@accum r4e1b@line))))) '#f '#f)))) r4e19@loop) (get-line (current-input-port)) '""))))))) (newline) (r4e10@rec)))) (r4e10@rec))) '#f))) (set! r4d74@trace-printer (r285e@r2788@make-parameter write)) (set! r4d76@command-line (r285e@r2788@make-parameter (get-command-line))) (set! r4d78@local-library-path (lambda (r4e33@filename) (cons (expand-path '".") (r2ac6@r2955@library-path)))) (set! r4d7a@load/args (lambda (r4e35@filename . r4e37@args) (begin (apply r4d8a@load-r6rs-top-level r4e35@filename 'load r4e37@args) (void)))) (set! r4d7c@load (lambda (r4e39@filename) (begin (apply r4d8a@load-r6rs-top-level r4e39@filename 'load (r4d76@command-line)) (void)))) (set! r4d7e@ironscheme-build (lambda () (r4d7c@load '"ironscheme-buildscript.ss"))) (set! r4d80@eval-top-level (lambda (r4e3b@x) (r4990@r2f88@eval r4e3b@x (r49a6@r2fb4@interaction-environment)))) (set! r4d82@compile-system-libraries (lambda () (r4d80@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! r4d84@compile (lambda (r4e3d@filename) (r4d8a@load-r6rs-top-level r4e3d@filename 'compile))) (set! r4d86@compile->closure (lambda (r4e3f@filename) (r4d8a@load-r6rs-top-level r4e3f@filename 'closure))) (set! r4d88@pre-compile-r6rs-file (lambda (r4e41@filename) (r4d8a@load-r6rs-top-level r4e41@filename 'compile))) (set! r4d8a@load-r6rs-top-level (lambda (r4e43@filename r4e44@how . r4e47@args) ((lambda (r4e4d@r4e4a r4e4e@r4e4c) ((lambda (r4e51@swap) (dynamic-wind r4e51@swap (lambda () ((lambda (r4e53@x*) ((lambda (r4e55@t) (if (memv r4e55@t '(closure)) (r49a5@r2fb2@pre-compile-r6rs-top-level r4e53@x*) (if (memv r4e55@t '(load)) ((lambda (r4e5b@r4e58 r4e5c@r4e5a) ((lambda (r4e5f@swap) (dynamic-wind r4e5f@swap (lambda () ((r49a4@r2fb0@compile-r6rs-top-level r4e53@x*))) r4e5f@swap)) (lambda () ((lambda (r4e61@t) (begin (r4e5b@r4e58 r4e5c@r4e5a) (set! r4e5c@r4e5a r4e61@t))) (r4e5b@r4e58))))) r4d76@command-line (cons r4e43@filename (car r4e47@args))) (if (memv r4e55@t '(compile)) (begin (r49a4@r2fb0@compile-r6rs-top-level r4e53@x*) (r2aca@r295d@serialize-all r2859@r277e@serialize-library r28b3@r286c@compile-core-expr)) (if '#f '#f (void)))))) r4e44@how)) (with-input-from-file r4e43@filename (lambda () ((letrec ((r4e63@f (lambda () ((lambda (r4e65@x) (if (eof-object? r4e65@x) '() (cons r4e65@x (r4e63@f)))) (r2851@r276e@read-annotated))))) r4e63@f)))))) r4e51@swap)) (lambda () ((lambda (r4e67@t) (begin (r4e4d@r4e4a r4e4e@r4e4c) (set! r4e4e@r4e4c r4e67@t))) (r4e4d@r4e4a))))) r2ac6@r2955@library-path (r4d78@local-library-path r4e43@filename)))) (set! r4d8c@load-r6rs-top-level-sexp (lambda (r4e69@import-spec r4e6a@thunk) ((lambda (r4e71@r4e6e r4e72@r4e70) ((lambda (r4e75@swap) (dynamic-wind r4e75@swap (lambda () ((lambda (r4e7b@r4e78 r4e7c@r4e7a) ((lambda (r4e7f@swap) (dynamic-wind r4e7f@swap (lambda () ((r49a4@r2fb0@compile-r6rs-top-level (list (cons 'import r4e69@import-spec) (list r4e6a@thunk))))) r4e7f@swap)) (lambda () ((lambda (r4e81@t) (begin (r4e7b@r4e78 r4e7c@r4e7a) (set! r4e7c@r4e7a r4e81@t))) (r4e7b@r4e78))))) r4d76@command-line '())) r4e75@swap)) (lambda () ((lambda (r4e83@t) (begin (r4e71@r4e6e r4e72@r4e70) (set! r4e72@r4e70 r4e83@t))) (r4e71@r4e6e))))) r2ac6@r2955@library-path (r4d78@local-library-path '"")))) (begin (set! r4e99@r4d8c@load-r6rs-top-level-sexp r4d8c@load-r6rs-top-level-sexp) (set! r4e98@r4d8a@load-r6rs-top-level r4d8a@load-r6rs-top-level) (set! r4e97@r4d88@pre-compile-r6rs-file r4d88@pre-compile-r6rs-file) (set! r4e96@r4d86@compile->closure r4d86@compile->closure) (set! r4e95@r4d84@compile r4d84@compile) (set! r4e94@r4d82@compile-system-libraries r4d82@compile-system-libraries) (set! r4e93@r4d80@eval-top-level r4d80@eval-top-level) (set! r4e92@r4d7e@ironscheme-build r4d7e@ironscheme-build) (set! r4e91@r4d7c@load r4d7c@load) (set! r4e90@r4d7a@load/args r4d7a@load/args) (set! r4e8f@r4d78@local-library-path r4d78@local-library-path) (set! r4e8e@r4d76@command-line r4d76@command-line) (set! r4e8d@r4d74@trace-printer r4d74@trace-printer) (set! r4e8c@r4d72@repl r4d72@repl) (set! r4e8b@r4d70@map-with-index r4d70@map-with-index) (set! r4e8a@r4d6e@record->field-alist r4d6e@record->field-alist) (set! r4e89@r4d6c@condition-printer r4d6c@condition-printer) (set! r4e88@r4d6a@rpad r4d6a@rpad) (set! r4e87@r4d68@for-each-with-index r4d68@for-each-with-index) (set! r4e86@r4d66@parse-and-add-library-path r4d66@parse-and-add-library-path) (set! r4e85@r4d64@add-library-path! r4d64@add-library-path!) (r2acb@r295f@current-precompiled-library-loader r285a@r2780@load-serialized-library) (set-symbol-value! 'load r4d7c@load) (set-symbol-value! 'pre-compile-r6rs-file r4d88@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs r4d80@eval-top-level) (set-symbol-value! 'int-env-syms r4987@r2f76@interaction-environment-symbols) (set-symbol-value! 'expanded2core r28b2@r286a@expanded->core) (set-symbol-value! 'trace-printer r4d74@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (r4d8d@c) (condition (r4cc1@r4acb@make-non-continuable-violation) (r4cb7@r4ab2@make-who-condition 'raise) (r4c7b@r4a13@make-message-condition '"returned from non-continuable exception") (r4cad@r4a97@make-irritants-condition (list r4d8d@c))))) (r4d66@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (r4d66@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (r4d64@add-library-path! (string-append (mosh-executable-path) '"/lib")) (r4d64@add-library-path! (string-append (current-directory) '"/lib"))) (r4d64@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (r4d8f@prefix) (r2ac7@r2957@library-extensions (r4d8f@prefix '".mosh" (r2ac7@r2957@library-extensions)))) (lambda (r4d91@ext r4d92@ls) (append (map (lambda (r4d95@x) (string-append r4d91@ext r4d95@x)) r4d92@ls) r4d92@ls))) ((lambda (r4d97@args r4d98@port) ((lambda (r4d9c@ref) (begin (set! r4d9c@ref (lambda (r4da7@rtd r4da8@i r4da9@x) ((lambda (r4dad@val) (if (symbol? r4dad@val) (ungensym r4dad@val) r4dad@val)) ((record-accessor r4da7@rtd r4da8@i) r4da9@x)))) (with-exception-handler (lambda (r4d9d@c) (if (condition? r4d9d@c) (r4d6c@condition-printer r4d9d@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" r4d9d@c))) (lambda () (if ((call/cc (lambda (r4da1@r4d9f) (lambda () (with-exception-handler (lambda (r4da3@c) ((call/cc (lambda (r4da5@r4da0) (r4da1@r4d9f (lambda () (if '#t '#f (r4da5@r4da0 (lambda () (raise-continuable r4da3@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (r4d8c@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? r4d97@args) (r4d72@repl) (r4d8a@load-r6rs-top-level (car r4d97@args) 'load (cdr r4d97@args)))))))) '#f)) (r4d76@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
