;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (m2765@read-annotated m2767@annotation-stripped m2769@annotation? m276b@annotation-source m276d@annotation-expression m276f@scm->fasl m2771@fasl-save m2773@fasl-load m2775@serialize-library m2777@load-serialized-library m2779@make-record-printer m277b@compile-core m277d@read-library-source-file m277f@make-parameter m27e7@file-options-spec) (begin (set! m2765@read-annotated read) (set! m2767@annotation-stripped (lambda (m27e8@x) (m276d@annotation-expression m27e8@x))) (set! m2769@annotation? (lambda (m27ea@x) (source-info m27ea@x))) (set! m276b@annotation-source (lambda (m27ec@x) (source-info m27ec@x))) (set! m276d@annotation-expression (lambda (m27ee@x) (if (pair? m27ee@x) (cons (car m27ee@x) (cdr m27ee@x)) (display '"line:46\n")))) (set! m276f@scm->fasl (lambda (m27f0@filename) (string-append m27f0@filename '".fasl"))) (set! m2771@fasl-save (lambda (m27f2@filename m27f3@obj) (call-with-port (open-file-output-port m27f2@filename) (lambda (m27f6@port) ((symbol-value 'fasl-write!) m27f3@obj m27f6@port))))) (set! m2773@fasl-load (lambda (m27f8@filename) (call-with-port (open-file-input-port m27f8@filename) (symbol-value 'fasl-read!)))) (set! m2775@serialize-library (lambda (m27fa@filename m27fb@obj) (begin (format '#t '"serialize-library ~a\n..." m27fa@filename) ((lambda (m27fe@expanded2core) ((lambda (m2800@compile) ((lambda (m2802@code) ((lambda (m2804@pivot) ((lambda (m2806@visit) ((lambda () (begin (set-car! m2804@pivot m2806@visit) ((lambda (m2808@pivot) ((lambda (m280a@invoke) ((lambda () (set-car! m2808@pivot m280a@invoke)))) (m2800@compile (m27fe@expanded2core (car m2808@pivot))))) (cdr m2804@pivot)))))) (m2800@compile (m27fe@expanded2core (car m2804@pivot))))) (cddddr (cddddr m2802@code)))) m27fb@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (m280c@fasl-file) (begin (if (file-exists? m280c@fasl-file) (delete-file m280c@fasl-file) (void)) ((call/cc (lambda (m2810@m280e) (lambda () (with-exception-handler (lambda (m2812@c) ((call/cc (lambda (m2814@m280f) (m2810@m280e (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " m27fa@filename) (if (file-exists? m280c@fasl-file) (delete-file m280c@fasl-file) (void)) '#f) (m2814@m280f (lambda () (raise-continuable m2812@c)))))))))) (lambda () (begin (m2771@fasl-save m280c@fasl-file m27fb@obj) (display '"OK\n")))))))))) (m276f@scm->fasl m27fa@filename))))) (set! m2777@load-serialized-library (lambda (m2816@filename m2817@obj) ((lambda (m281a@fasl-file) (if (and (file-exists? m281a@fasl-file) ((symbol-value 'file-newer?) m281a@fasl-file m2816@filename)) ((lambda (m281c@expanded2core) ((lambda (m281e@eval-compiled-core) ((lambda (m2820@code) ((lambda (m2822@pivot) ((lambda (m2824@visit) ((lambda (m2826@visit-proc) ((lambda () (begin (set-car! m2822@pivot m2826@visit-proc) ((lambda (m2828@pivot) ((lambda (m282a@invoke) ((lambda () (begin (set-car! m2828@pivot (lambda () (m281e@eval-compiled-core m282a@invoke))) (apply m2817@obj m2820@code))))) (car m2828@pivot))) (cdr m2822@pivot)) '#t)))) (lambda () (m281e@eval-compiled-core m2824@visit)))) (car m2822@pivot))) (cddddr (cddddr m2820@code)))) (m2773@fasl-load m281a@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (m276f@scm->fasl m2816@filename)))) (set! m2779@make-record-printer (lambda (m282c@name m282d@printer) (lambda m2830@x (begin (display '"record printer") (for-each display m2830@x))))) (set! m277b@compile-core (lambda m2832@x (apply error 'comile-core '"not implementated" m2832@x))) (set! m277d@read-library-source-file (lambda (m2834@file-name) (with-input-from-file m2834@file-name m2765@read-annotated))) (set! m277f@make-parameter (lambda m2844 ((lambda (m2845) (if (= m2845 '1) (apply (lambda (m2836@x) (m277f@make-parameter m2836@x (lambda (m2838@x) m2838@x))) m2844) (if (= m2845 '2) (apply (lambda (m283a@x m283b@fender) ((lambda (m283e@x) (lambda m2842 ((lambda (m2843) (if (= m2843 '0) (apply (lambda () m283e@x) m2842) (if (= m2843 '1) (apply (lambda (m2840@v) (set! m283e@x (m283b@fender m2840@v))) m2842) (error 'apply '"invalid arg count")))) (length m2842)))) (m283b@fender m283a@x))) m2844) (error 'apply '"invalid arg count")))) (length m2844)))) (set! m27e7@file-options-spec (lambda (m2846@x) m2846@x)) (begin (set! m2856@m27e7@file-options-spec m27e7@file-options-spec) (set! m2855@m277f@make-parameter m277f@make-parameter) (set! m2854@m277d@read-library-source-file m277d@read-library-source-file) (set! m2853@m277b@compile-core m277b@compile-core) (set! m2852@m2779@make-record-printer m2779@make-record-printer) (set! m2851@m2777@load-serialized-library m2777@load-serialized-library) (set! m2850@m2775@serialize-library m2775@serialize-library) (set! m284f@m2773@fasl-load m2773@fasl-load) (set! m284e@m2771@fasl-save m2771@fasl-save) (set! m284d@m276f@scm->fasl m276f@scm->fasl) (set! m284c@m276d@annotation-expression m276d@annotation-expression) (set! m284b@m276b@annotation-source m276b@annotation-source) (set! m284a@m2769@annotation? m2769@annotation?) (set! m2849@m2767@annotation-stripped m2767@annotation-stripped) (set! m2848@m2765@read-annotated m2765@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (m285b@current-primitive-locations m285d@mutable? m285f@rewriter m2861@expanded->core m2863@compile-core-expr m2865@pretty-print m2867@compile-core-expr-to-port) (begin (set! m285b@current-primitive-locations (m2855@m277f@make-parameter (lambda (m2868@x) '#f) (lambda (m286a@p) m286a@p))) (set! m285d@mutable? (lambda (m286c@x) (or (pair? m286c@x) (vector? m286c@x) (hashtable? m286c@x)))) (set! m285f@rewriter (lambda (m286e@quote-hack?) ((lambda (m2871@f) (begin (set! m2871@f (lambda (m2872@x) (if (pair? m2872@x) ((lambda (m2874@t) (if (memv m2874@t '(quote)) (if (and m286e@quote-hack? (m285d@mutable? (cadr m2872@x))) ((lambda (m2876@g) (begin (set-symbol-value! m2876@g (cadr m2872@x)) m2876@g)) (gensym)) m2872@x) (if (memv m2874@t '(case-lambda)) (cons 'case-lambda (map (lambda (m2878@x) (cons (car m2878@x) (map m2871@f (cdr m2878@x)))) (cdr m2872@x))) (if (memv m2874@t '(lambda)) (cons* 'lambda (cadr m2872@x) (map m2871@f (cddr m2872@x))) (if (memv m2874@t '(letrec)) ((lambda (m287a@bindings m287b@body*) ((lambda (m287e@lhs* m287f@rhs*) (cons* 'letrec (map list m287e@lhs* (map m2871@f m287f@rhs*)) (map m2871@f m287b@body*))) (map car m287a@bindings) (map cadr m287a@bindings))) (cadr m2872@x) (cddr m2872@x)) (if (memv m2874@t '(letrec*)) ((lambda (m2882@bindings m2883@body*) ((lambda (m2886@lhs* m2887@rhs*) (cons* 'letrec* (map list m2886@lhs* (map m2871@f m2887@rhs*)) (map m2871@f m2883@body*))) (map car m2882@bindings) (map cadr m2882@bindings))) (cadr m2872@x) (cddr m2872@x)) (if (memv m2874@t '(library-letrec*)) ((lambda (m288a@name m288b@x) ((lambda (m288e@bindings m288f@body*) ((lambda (m2892@lhs* m2893@lhs** m2894@rhs*) (cons* 'library-letrec* m288a@name (map list m2892@lhs* m2893@lhs** (map m2871@f m2894@rhs*)) (map m2871@f m288f@body*))) (map car m288e@bindings) (map cadr m288e@bindings) (map caddr m288e@bindings))) (cadr m288b@x) (cddr m288b@x))) (cadr m2872@x) (cdr m2872@x)) (if (memv m2874@t '(begin)) (cons 'begin (map m2871@f (cdr m2872@x))) (if (memv m2874@t '(set!)) (list 'set! (cadr m2872@x) (m2871@f (caddr m2872@x))) (if (memv m2874@t '(primitive)) ((lambda (m2898@op) ((lambda (m289a@t) (if m289a@t ((lambda (m289c@loc) m289c@loc) m289a@t) m2898@op)) ((m285b@current-primitive-locations) m2898@op))) (cadr m2872@x)) (if (memv m2874@t '(define)) m2872@x (if (list? m2872@x) (map m2871@f m2872@x) (error 'rewrite '"invalid form ~s ~s" m2872@x (list? m2872@x)))))))))))))) (car m2872@x)) m2872@x))) m2871@f)) '#f))) (set! m2861@expanded->core (lambda (m289e@x) ((m285f@rewriter '#f) m289e@x))) (set! m2863@compile-core-expr (lambda (m28a0@x) ((m285f@rewriter '#f) m28a0@x))) (set! m2865@pretty-print write) (set! m2867@compile-core-expr-to-port (lambda (m28a2@x m28a3@p) (m2865@pretty-print ((m285f@rewriter '#f) m28a2@x) m28a3@p))) (begin (set! m28ac@m2867@compile-core-expr-to-port m2867@compile-core-expr-to-port) (set! m28ab@m2865@pretty-print m2865@pretty-print) (set! m28aa@m2863@compile-core-expr m2863@compile-core-expr) (set! m28a9@m2861@expanded->core m2861@expanded->core) (set! m28a8@m285f@rewriter m285f@rewriter) (set! m28a7@m285d@mutable? m285d@mutable?) (set! m28a6@m285b@current-primitive-locations m285b@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (m28fb@make-collection m28fd@current-library-collection m2903@m28fe m2905@m2900 m2907@m28ff m290a@library? m290c@make-library m290e@library-id m2910@library-name m2912@library-version m2914@library-imp* m2916@library-vis* m2918@library-inv* m291a@library-subst m291c@library-env m291e@library-visit-state m2920@library-invoke-state m2922@library-visit-code m2924@library-invoke-code m2926@library-visible? m2928@library-source-file-name m292a@set-library-id! m292c@set-library-name! m292e@set-library-version! m2930@set-library-imp*! m2932@set-library-vis*! m2934@set-library-inv*! m2936@set-library-subst! m2938@set-library-env! m293a@set-library-visit-state! m293c@set-library-invoke-state! m293e@set-library-visit-code! m2940@set-library-invoke-code! m2942@set-library-visible?! m2944@set-library-source-file-name! m2946@rp m2948@find-dependencies m294a@find-library-by m294c@library-path m294e@library-extensions m2950@library-name->file-name m2952@file-locator m2954@serialize-all m2956@current-precompiled-library-loader m2958@try-load-from-file m295a@library-loader m295c@current-library-expander m295e@external-pending-libraries m2960@find-external-library m2962@find-library-by-name m2964@library-exists? m2966@find-library-by-spec/die m2968@label->binding-table m296a@install-library-record m296c@install-library m296e@imported-label->binding m2970@invoke-library m2972@visit-library m2974@invoke-library-by-spec m2976@installed-libraries m2978@library-spec) (begin (set! m28fb@make-collection (lambda () ((lambda (m2979@set) ((lambda (m297c@set-cons) (begin (set! m297c@set-cons (lambda (m2981@x m2982@ls) (if (memq m2981@x m2982@ls) m2982@ls (cons m2981@x m2982@ls)))) (lambda m297f ((lambda (m2980) (if (= m2980 '0) (apply (lambda () m2979@set) m297f) (if (= m2980 '1) (apply (lambda (m297d@x) (set! m2979@set (m297c@set-cons m297d@x m2979@set))) m297f) (error 'apply '"invalid arg count")))) (length m297f))))) '#f)) '()))) (set! m28fd@current-library-collection (m2855@m277f@make-parameter (m28fb@make-collection) (lambda (m2985@x) (begin (if (not (procedure? m2985@x)) (assertion-violation 'current-library-collection '"not a procedure" m2985@x) (void)) m2985@x)))) (set! m2903@m28fe (make-record-type-descriptor 'library '#f 'm2901 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! m2905@m2900 '#f) (set! m2907@m28ff (make-record-constructor-descriptor m2903@m28fe '#f m2905@m2900)) (set! m290a@library? (record-predicate m2903@m28fe)) (set! m290c@make-library (record-constructor m2907@m28ff)) (set! m290e@library-id (record-accessor m2903@m28fe '0)) (set! m2910@library-name (record-accessor m2903@m28fe '1)) (set! m2912@library-version (record-accessor m2903@m28fe '2)) (set! m2914@library-imp* (record-accessor m2903@m28fe '3)) (set! m2916@library-vis* (record-accessor m2903@m28fe '4)) (set! m2918@library-inv* (record-accessor m2903@m28fe '5)) (set! m291a@library-subst (record-accessor m2903@m28fe '6)) (set! m291c@library-env (record-accessor m2903@m28fe '7)) (set! m291e@library-visit-state (record-accessor m2903@m28fe '8)) (set! m2920@library-invoke-state (record-accessor m2903@m28fe '9)) (set! m2922@library-visit-code (record-accessor m2903@m28fe '10)) (set! m2924@library-invoke-code (record-accessor m2903@m28fe '11)) (set! m2926@library-visible? (record-accessor m2903@m28fe '12)) (set! m2928@library-source-file-name (record-accessor m2903@m28fe '13)) (set! m292a@set-library-id! (record-mutator m2903@m28fe '0)) (set! m292c@set-library-name! (record-mutator m2903@m28fe '1)) (set! m292e@set-library-version! (record-mutator m2903@m28fe '2)) (set! m2930@set-library-imp*! (record-mutator m2903@m28fe '3)) (set! m2932@set-library-vis*! (record-mutator m2903@m28fe '4)) (set! m2934@set-library-inv*! (record-mutator m2903@m28fe '5)) (set! m2936@set-library-subst! (record-mutator m2903@m28fe '6)) (set! m2938@set-library-env! (record-mutator m2903@m28fe '7)) (set! m293a@set-library-visit-state! (record-mutator m2903@m28fe '8)) (set! m293c@set-library-invoke-state! (record-mutator m2903@m28fe '9)) (set! m293e@set-library-visit-code! (record-mutator m2903@m28fe '10)) (set! m2940@set-library-invoke-code! (record-mutator m2903@m28fe '11)) (set! m2942@set-library-visible?! (record-mutator m2903@m28fe '12)) (set! m2944@set-library-source-file-name! (record-mutator m2903@m28fe '13)) (set! m2946@rp (m2852@m2779@make-record-printer 'library (lambda (m2987@x m2988@p m2989@wr) (begin (if (not (m290a@library? m2987@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (m2912@library-version m2987@x)) (m2910@library-name m2987@x) (append (m2910@library-name m2987@x) (list (m2912@library-version m2987@x))))) m2988@p))))) (set! m2948@find-dependencies (lambda (m298d@ls) (if (null? m298d@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! m294a@find-library-by (lambda (m298f@pred) ((letrec ((m2991@f (lambda (m2993@ls) (if (null? m2993@ls) '#f (if (m298f@pred (car m2993@ls)) (car m2993@ls) (m2991@f (cdr m2993@ls))))))) m2991@f) ((m28fd@current-library-collection))))) (set! m294c@library-path (m2855@m277f@make-parameter '(".") (lambda (m2995@x) (if (and (list? m2995@x) (for-all string? m2995@x)) (map (lambda (m2997@x) m2997@x) m2995@x) (assertion-violation 'library-path '"not a list of strings" m2995@x))))) (set! m294e@library-extensions (m2855@m277f@make-parameter '(".sls" ".ss" ".scm") (lambda (m2999@x) (if (and (list? m2999@x) (for-all string? m2999@x)) (map (lambda (m299b@x) m299b@x) m2999@x) (assertion-violation 'library-extensions '"not a list of strings" m2999@x))))) (set! m2950@library-name->file-name (lambda (m299d@x) (call-with-values (lambda () (open-string-output-port)) (lambda (m29a3@m29a0 m29a4@m29a2) ((lambda (m29a7@extract m29a8@p) ((lambda (m29ac@display-hex) (begin (set! m29ac@display-hex (lambda (m29b5@n) (if (<= '0 m29b5@n '9) (display m29b5@n m29a8@p) (display (integer->char (+ (char->integer '#\a) (- m29b5@n '10))) m29a8@p)))) (begin ((letrec ((m29ad@f (lambda (m29af@ls) (if (not (null? m29af@ls)) (begin (display '"/" m29a8@p) (for-each (lambda (m29b1@c) (if (or (char<=? '#\a m29b1@c '#\z) (char<=? '#\A m29b1@c '#\Z) (char<=? '#\0 m29b1@c '#\9) (memv m29b1@c '(#\- #\. #\_ #\~))) (display m29b1@c m29a8@p) (begin (display '"%" m29a8@p) ((lambda (m29b3@n) (begin (m29ac@display-hex (quotient m29b3@n '16)) (m29ac@display-hex (remainder m29b3@n '16)))) (char->integer m29b1@c))))) (string->list (symbol->string (car m29af@ls)))) (m29ad@f (cdr m29af@ls))) (void))))) m29ad@f) m299d@x) (m29a7@extract)))) '#f)) m29a4@m29a2 m29a3@m29a0))))) (set! m2952@file-locator (m2855@m277f@make-parameter (lambda (m29b7@x) ((lambda (m29b9@str) ((letrec ((m29bb@f (lambda (m29bd@ls m29be@exts m29bf@failed-list) (if (null? m29bd@ls) ((lambda () ((lambda (m29cb@m29c6 m29cd@m29c8 m29cf@m29c7 m29d2@m29c5 m29d4@make-library-resolution-condition m29d6@m29c3 m29d8@m29c4 m29da@library-resolution-condition? m29dc@condition-library m29de@condition-files) (begin (set! m29cb@m29c6 (make-record-type-descriptor '&library-resolution m4c6c@m49b3@&condition-rtd 'm29c9 '#f '#f '#((immutable library) (immutable files)))) (set! m29cd@m29c8 '#f) (set! m29cf@m29c7 (make-record-constructor-descriptor m29cb@m29c6 m4c6d@m49b5@&condition-rcd m29cd@m29c8)) (set! m29d2@m29c5 (record-predicate m29cb@m29c6)) (set! m29d4@make-library-resolution-condition (record-constructor m29cf@m29c7)) (set! m29d6@m29c3 (record-accessor m29cb@m29c6 '0)) (set! m29d8@m29c4 (record-accessor m29cb@m29c6 '1)) (set! m29da@library-resolution-condition? (condition-predicate m29cb@m29c6)) (set! m29dc@condition-library (condition-accessor m29cb@m29c6 m29d6@m29c3)) (set! m29de@condition-files (condition-accessor m29cb@m29c6 m29d8@m29c4)) (raise (condition (m4c8c@m4a4d@make-error) (m4cae@m4aa9@make-who-condition 'expander) (m4c72@m4a0a@make-message-condition '"cannot locate library in library-path") (m29d4@make-library-resolution-condition m29b7@x (reverse m29bf@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? m29be@exts) (m29bb@f (cdr m29bd@ls) (m294e@library-extensions) m29bf@failed-list) ((lambda (m29df@name) (if (file-exists? m29df@name) m29df@name (m29bb@f m29bd@ls (cdr m29be@exts) (cons m29df@name m29bf@failed-list)))) (string-append (car m29bd@ls) m29b9@str (car m29be@exts)))))))) m29bb@f) (m294c@library-path) (m294e@library-extensions) '())) (m2950@library-name->file-name m29b7@x))) (lambda (m29e1@f) (if (procedure? m29e1@f) m29e1@f (assertion-violation 'file-locator '"not a procedure" m29e1@f))))) (set! m2954@serialize-all (lambda (m29e3@serialize m29e4@compile) ((lambda (m29e8@library-desc) (begin (set! m29e8@library-desc (lambda (m29eb@x) (list (m290e@library-id m29eb@x) (m2910@library-name m29eb@x)))) (for-each (lambda (m29e9@x) (if (m2928@library-source-file-name m29e9@x) (m29e3@serialize (m2928@library-source-file-name m29e9@x) (list (m290e@library-id m29e9@x) (m2910@library-name m29e9@x) (m2912@library-version m29e9@x) (map m29e8@library-desc (m2914@library-imp* m29e9@x)) (map m29e8@library-desc (m2916@library-vis* m29e9@x)) (map m29e8@library-desc (m2918@library-inv* m29e9@x)) (m291a@library-subst m29e9@x) (m291c@library-env m29e9@x) (m29e4@compile (m2922@library-visit-code m29e9@x)) (m29e4@compile (m2924@library-invoke-code m29e9@x)) (m2926@library-visible? m29e9@x))) (void))) ((m28fd@current-library-collection))))) '#f))) (set! m2956@current-precompiled-library-loader (m2855@m277f@make-parameter (lambda (m29ed@filename m29ee@sk) '#f))) (set! m2958@try-load-from-file (lambda (m29f1@filename) ((m2956@current-precompiled-library-loader) m29f1@filename (lambda m2a17 ((lambda (m2a18) (if (= m2a18 '11) (apply (lambda (m29f3@id m29f4@name m29f5@ver m29f6@imp* m29f7@vis* m29f8@inv* m29f9@exp-subst m29fa@exp-env m29fb@visit-proc m29fc@invoke-proc m29fd@visible?) ((letrec ((m2a09@f (lambda (m2a0b@deps) (if (null? m2a0b@deps) (begin (m296c@install-library m29f3@id m29f4@name m29f5@ver m29f6@imp* m29f7@vis* m29f8@inv* m29f9@exp-subst m29fa@exp-env m29fb@visit-proc m29fc@invoke-proc '#f '#f m29fd@visible? '#f) '#t) ((lambda (m2a0d@d) ((lambda (m2a0f@label m2a10@dname) ((lambda (m2a13@l) (if (and (m290a@library? m2a13@l) (eq? m2a0f@label (m290e@library-id m2a13@l))) (m2a09@f (cdr m2a0b@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" m29f4@name m2a10@dname m29f1@filename m2a13@l m2a0f@label (m290e@library-id m2a13@l)) '#f))) (m2962@find-library-by-name m2a10@dname))) (car m2a0d@d) (cadr m2a0d@d))) (car m2a0b@deps)))))) m2a09@f) (append m29f6@imp* m29f7@vis* m29f8@inv*))) m2a17) (if (>= m2a18 '0) (apply (lambda m2a15@others '#f) m2a17) (error 'apply '"invalid arg count")))) (length m2a17)))))) (set! m295a@library-loader (m2855@m277f@make-parameter (lambda (m2a19@x) ((lambda (m2a1b@file-name) (if (not m2a1b@file-name) (assertion-violation '#f '"cannot file library" m2a19@x) (or (m2958@try-load-from-file m2a1b@file-name) ((m295c@current-library-expander) (m2854@m277d@read-library-source-file m2a1b@file-name) m2a1b@file-name (lambda (m2a1d@name) (if (not (fast-equal? m2a1d@name m2a19@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (m2a23@m2a20 m2a24@m2a22) ((lambda (m2a27@e m2a28@p) (begin (display '"expected to find library " m2a28@p) (write m2a19@x m2a28@p) (display '" in file " m2a28@p) (display m2a1b@file-name m2a28@p) (display '", found " m2a28@p) (write m2a1d@name m2a28@p) (display '" instead" m2a28@p) (m2a27@e))) m2a24@m2a22 m2a23@m2a20)))) (void))))))) ((m2952@file-locator) m2a19@x))) (lambda (m2a2b@f) (if (procedure? m2a2b@f) m2a2b@f (assertion-violation 'library-locator '"not a procedure" m2a2b@f))))) (set! m295c@current-library-expander (m2855@m277f@make-parameter (lambda (m2a2d@x) (assertion-violation 'library-expander '"not initialized")) (lambda (m2a2f@f) (if (procedure? m2a2f@f) m2a2f@f (assertion-violation 'library-expander '"not a procedure" m2a2f@f))))) (set! m295e@external-pending-libraries (m2855@m277f@make-parameter '())) (set! m2960@find-external-library (lambda (m2a31@name) (begin (if (member m2a31@name (m295e@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" m2a31@name) (void)) ((lambda (m2a37@m2a34 m2a38@m2a36) ((lambda (m2a3b@swap) (dynamic-wind m2a3b@swap (lambda () (begin ((m295a@library-loader) m2a31@name) (or (m294a@find-library-by (lambda (m2a3d@x) (fast-equal? (m2910@library-name m2a3d@x) m2a31@name))) (assertion-violation '#f '"handling external library did not yield the correct library" m2a31@name)))) m2a3b@swap)) (lambda () ((lambda (m2a3f@t) (begin (m2a37@m2a34 m2a38@m2a36) (set! m2a38@m2a36 m2a3f@t))) (m2a37@m2a34))))) m295e@external-pending-libraries (cons m2a31@name (m295e@external-pending-libraries)))))) (set! m2962@find-library-by-name (lambda (m2a41@name) (or (m294a@find-library-by (lambda (m2a43@x) (fast-equal? (m2910@library-name m2a43@x) m2a41@name))) (m2960@find-external-library m2a41@name)))) (set! m2964@library-exists? (lambda (m2a45@name) (and (m294a@find-library-by (lambda (m2a47@x) (fast-equal? (m2910@library-name m2a47@x) m2a45@name))) '#t))) (set! m2966@find-library-by-spec/die (lambda (m2a49@spec) ((lambda (m2a4b@id) (or (m294a@find-library-by (lambda (m2a4d@x) (eq? m2a4b@id (m290e@library-id m2a4d@x)))) (assertion-violation '#f '"cannot find library with required spec" m2a49@spec))) (car m2a49@spec)))) (set! m2968@label->binding-table (make-eq-hashtable)) (set! m296a@install-library-record (lambda (m2a4f@lib) (begin ((lambda (m2a51@exp-env) (for-each (lambda (m2a53@x) ((lambda (m2a55@label m2a56@binding) ((lambda (m2a59@binding) (begin (if (hashtable-ref m2968@label->binding-table m2a55@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" m2a55@label (hashtable-ref m2968@label->binding-table m2a55@label '#f) m2a59@binding) (exit)) (void)) (hashtable-set! m2968@label->binding-table m2a55@label m2a59@binding))) ((lambda (m2a5b@t) (if (memv m2a5b@t '(global)) (cons 'global (cons m2a4f@lib (cdr m2a56@binding))) (if (memv m2a5b@t '(global-macro)) (cons 'global-macro (cons m2a4f@lib (cdr m2a56@binding))) (if (memv m2a5b@t '(global-macro!)) (cons 'global-macro! (cons m2a4f@lib (cdr m2a56@binding))) m2a56@binding)))) (car m2a56@binding)))) (car m2a53@x) (cdr m2a53@x))) m2a51@exp-env)) (m291c@library-env m2a4f@lib)) ((m28fd@current-library-collection) m2a4f@lib)))) (set! m296c@install-library (lambda (m2a5d@id m2a5e@name m2a5f@ver m2a60@imp* m2a61@vis* m2a62@inv* m2a63@exp-subst m2a64@exp-env m2a65@visit-proc m2a66@invoke-proc m2a67@visit-code m2a68@invoke-code m2a69@visible? m2a6a@source-file-name) ((lambda (m2a79@imp-lib* m2a7a@vis-lib* m2a7b@inv-lib*) (begin (if (not (and (symbol? m2a5d@id) (list? m2a5e@name) (list? m2a5f@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" m2a5d@id m2a5e@name m2a5f@ver) (void)) (if (m2964@library-exists? m2a5e@name) (assertion-violation 'install-library '"library is already installed" m2a5e@name) (void)) ((lambda (m2a7f@lib) (m296a@install-library-record m2a7f@lib)) (m290c@make-library m2a5d@id m2a5e@name m2a5f@ver m2a79@imp-lib* m2a7a@vis-lib* m2a7b@inv-lib* m2a63@exp-subst m2a64@exp-env m2a65@visit-proc m2a66@invoke-proc m2a67@visit-code m2a68@invoke-code m2a69@visible? m2a6a@source-file-name)))) (map m2966@find-library-by-spec/die m2a60@imp*) (map m2966@find-library-by-spec/die m2a61@vis*) (map m2966@find-library-by-spec/die m2a62@inv*)))) (set! m296e@imported-label->binding (lambda (m2a81@lab) (hashtable-ref m2968@label->binding-table m2a81@lab '#f))) (set! m2970@invoke-library (lambda (m2a83@lib) ((lambda (m2a85@invoke) (if (procedure? m2a85@invoke) (begin (m293c@set-library-invoke-state! m2a83@lib (lambda () (assertion-violation 'invoke '"circularity detected" m2a83@lib))) (for-each m2970@invoke-library (m2918@library-inv* m2a83@lib)) (m293c@set-library-invoke-state! m2a83@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" m2a83@lib))) (m2a85@invoke) (m293c@set-library-invoke-state! m2a83@lib '#t)) (void))) (m2920@library-invoke-state m2a83@lib)))) (set! m2972@visit-library (lambda (m2a87@lib) ((lambda (m2a89@visit) (if (procedure? m2a89@visit) (begin (m293a@set-library-visit-state! m2a87@lib (lambda () (assertion-violation 'visit '"circularity detected" m2a87@lib))) (for-each m2970@invoke-library (m2916@library-vis* m2a87@lib)) (m293a@set-library-visit-state! m2a87@lib (lambda () (assertion-violation 'invoke '"first visit did not return" m2a87@lib))) (m2a89@visit) (m293a@set-library-visit-state! m2a87@lib '#t)) (void))) (m291e@library-visit-state m2a87@lib)))) (set! m2974@invoke-library-by-spec (lambda (m2a8b@spec) (m2970@invoke-library (m2966@find-library-by-spec/die m2a8b@spec)))) (set! m2976@installed-libraries (lambda m2a93 ((lambda (m2a94) (if (= m2a94 '1) (apply (lambda (m2a8d@all?) ((letrec ((m2a8f@f (lambda (m2a91@ls) (if (null? m2a91@ls) '() (if (or m2a8d@all? (m2926@library-visible? (car m2a91@ls))) (cons (car m2a91@ls) (m2a8f@f (cdr m2a91@ls))) (m2a8f@f (cdr m2a91@ls))))))) m2a8f@f) ((m28fd@current-library-collection)))) m2a93) (if (= m2a94 '0) (apply (lambda () (m2976@installed-libraries '#f)) m2a93) (error 'apply '"invalid arg count")))) (length m2a93)))) (set! m2978@library-spec (lambda (m2a95@x) (begin (if (not (m290a@library? m2a95@x)) (assertion-violation 'library-spec '"not a library" m2a95@x) (void)) (list (m290e@library-id m2a95@x) (m2910@library-name m2a95@x) (m2912@library-version m2a95@x))))) (begin (set! m2ad3@m2978@library-spec m2978@library-spec) (set! m2ad2@m2976@installed-libraries m2976@installed-libraries) (set! m2ad1@m2974@invoke-library-by-spec m2974@invoke-library-by-spec) (set! m2ad0@m2972@visit-library m2972@visit-library) (set! m2acf@m2970@invoke-library m2970@invoke-library) (set! m2ace@m296e@imported-label->binding m296e@imported-label->binding) (set! m2acd@m296c@install-library m296c@install-library) (set! m2acc@m296a@install-library-record m296a@install-library-record) (set! m2acb@m2968@label->binding-table m2968@label->binding-table) (set! m2aca@m2966@find-library-by-spec/die m2966@find-library-by-spec/die) (set! m2ac9@m2964@library-exists? m2964@library-exists?) (set! m2ac8@m2962@find-library-by-name m2962@find-library-by-name) (set! m2ac7@m2960@find-external-library m2960@find-external-library) (set! m2ac6@m295e@external-pending-libraries m295e@external-pending-libraries) (set! m2ac5@m295c@current-library-expander m295c@current-library-expander) (set! m2ac4@m295a@library-loader m295a@library-loader) (set! m2ac3@m2958@try-load-from-file m2958@try-load-from-file) (set! m2ac2@m2956@current-precompiled-library-loader m2956@current-precompiled-library-loader) (set! m2ac1@m2954@serialize-all m2954@serialize-all) (set! m2ac0@m2952@file-locator m2952@file-locator) (set! m2abf@m2950@library-name->file-name m2950@library-name->file-name) (set! m2abe@m294e@library-extensions m294e@library-extensions) (set! m2abd@m294c@library-path m294c@library-path) (set! m2abc@m294a@find-library-by m294a@find-library-by) (set! m2abb@m2948@find-dependencies m2948@find-dependencies) (set! m2aba@m2946@rp m2946@rp) (set! m2ab9@m2944@set-library-source-file-name! m2944@set-library-source-file-name!) (set! m2ab8@m2942@set-library-visible?! m2942@set-library-visible?!) (set! m2ab7@m2940@set-library-invoke-code! m2940@set-library-invoke-code!) (set! m2ab6@m293e@set-library-visit-code! m293e@set-library-visit-code!) (set! m2ab5@m293c@set-library-invoke-state! m293c@set-library-invoke-state!) (set! m2ab4@m293a@set-library-visit-state! m293a@set-library-visit-state!) (set! m2ab3@m2938@set-library-env! m2938@set-library-env!) (set! m2ab2@m2936@set-library-subst! m2936@set-library-subst!) (set! m2ab1@m2934@set-library-inv*! m2934@set-library-inv*!) (set! m2ab0@m2932@set-library-vis*! m2932@set-library-vis*!) (set! m2aaf@m2930@set-library-imp*! m2930@set-library-imp*!) (set! m2aae@m292e@set-library-version! m292e@set-library-version!) (set! m2aad@m292c@set-library-name! m292c@set-library-name!) (set! m2aac@m292a@set-library-id! m292a@set-library-id!) (set! m2aab@m2928@library-source-file-name m2928@library-source-file-name) (set! m2aaa@m2926@library-visible? m2926@library-visible?) (set! m2aa9@m2924@library-invoke-code m2924@library-invoke-code) (set! m2aa8@m2922@library-visit-code m2922@library-visit-code) (set! m2aa7@m2920@library-invoke-state m2920@library-invoke-state) (set! m2aa6@m291e@library-visit-state m291e@library-visit-state) (set! m2aa5@m291c@library-env m291c@library-env) (set! m2aa4@m291a@library-subst m291a@library-subst) (set! m2aa3@m2918@library-inv* m2918@library-inv*) (set! m2aa2@m2916@library-vis* m2916@library-vis*) (set! m2aa1@m2914@library-imp* m2914@library-imp*) (set! m2aa0@m2912@library-version m2912@library-version) (set! m2a9f@m2910@library-name m2910@library-name) (set! m2a9e@m290e@library-id m290e@library-id) (set! m2a9d@m290c@make-library m290c@make-library) (set! m2a9c@m290a@library? m290a@library?) (set! m2a9b@m2907@m28ff m2907@m28ff) (set! m2a9a@m2905@m2900 m2905@m2900) (set! m2a99@m2903@m28fe m2903@m28fe) (set! m2a98@m28fd@current-library-collection m28fd@current-library-collection) (set! m2a97@m28fb@make-collection m28fb@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (m2ad6@build-global-define m2b47@build-lambda m2b49@build-case-lambda m2b4b@build-let m2b79@build-sequence m2b7b@build-void m2b7d@build-letrec m2b7f@build-letrec* m2b81@build-library-letrec* m2b83@build-receive) (begin (set! m2ad6@build-global-define (lambda (m2b84@x) (m2b7b@build-void))) (set! m2b47@build-lambda (lambda (m2b86@ae m2b87@vars m2b88@exp) (list 'lambda m2b87@vars m2b88@exp))) (set! m2b49@build-case-lambda (lambda (m2b8c@ae m2b8d@vars* m2b8e@exp*) ((lambda (m2b93@build-error m2b95@build-pred m2b97@build-apply m2b99@expand-case-lambda) (begin (set! m2b93@build-error (lambda (m2bca@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! m2b95@build-pred (lambda (m2bb2@ae m2bb3@n m2bb4@vars) (call-with-values (lambda () ((letrec ((m2bbc@f (lambda (m2bbe@vars m2bbf@count) (if (pair? m2bbe@vars) (m2bbc@f (cdr m2bbe@vars) (+ m2bbf@count '1)) (if (null? m2bbe@vars) (values m2bbf@count '=) (values m2bbf@count '>=)))))) m2bbc@f) m2bb4@vars '0)) (lambda (m2bc2@m2bb9 m2bc3@m2bbb) ((lambda (m2bc6@pred m2bc7@count) (list (list 'primitive m2bc6@pred) m2bb3@n (list 'quote m2bc7@count))) m2bc3@m2bbb m2bc2@m2bb9))))) (set! m2b97@build-apply (lambda (m2baa@ae m2bab@g m2bac@vars m2bad@exp) (list '(primitive apply) (m2b47@build-lambda m2baa@ae m2bac@vars m2bad@exp) m2bab@g))) (set! m2b99@expand-case-lambda (lambda (m2b9a@ae m2b9b@vars m2b9c@exp*) ((lambda (m2ba0@g m2ba1@n) (list 'lambda m2ba0@g (m2b4b@build-let m2b9a@ae (list m2ba1@n) (list (list '(primitive length) m2ba0@g)) ((letrec ((m2ba4@f (lambda (m2ba6@vars* m2ba7@exp*) (if (null? m2ba6@vars*) (m2b93@build-error m2b9a@ae) (list 'if (m2b95@build-pred m2b9a@ae m2ba1@n (car m2ba6@vars*)) (m2b97@build-apply m2b9a@ae m2ba0@g (car m2ba6@vars*) (car m2ba7@exp*)) (m2ba4@f (cdr m2ba6@vars*) (cdr m2ba7@exp*))))))) m2ba4@f) m2b8d@vars* m2b9c@exp*)))) (gensym) (gensym)))) (if (= (length m2b8e@exp*) '1) (m2b47@build-lambda m2b8c@ae (car m2b8d@vars*) (car m2b8e@exp*)) (m2b99@expand-case-lambda m2b8c@ae m2b8d@vars* m2b8e@exp*)))) '#f '#f '#f '#f))) (set! m2b4b@build-let (lambda (m2bcc@ae m2bcd@lhs* m2bce@rhs* m2bcf@body) (cons (m2b47@build-lambda m2bcc@ae m2bcd@lhs* m2bcf@body) m2bce@rhs*))) (set! m2b79@build-sequence (lambda (m2bd4@ae m2bd5@exps) ((letrec ((m2bd8@loop (lambda (m2bda@exps) (if (null? (cdr m2bda@exps)) (car m2bda@exps) (if (equal? (car m2bda@exps) (m2b7b@build-void)) (m2bd8@loop (cdr m2bda@exps)) (cons 'begin m2bda@exps)))))) m2bd8@loop) m2bd5@exps))) (set! m2b7b@build-void (lambda () '((primitive void)))) (set! m2b7d@build-letrec (lambda (m2bdc@ae m2bdd@vars m2bde@val-exps m2bdf@body-exp) (if (null? m2bdd@vars) m2bdf@body-exp (list 'letrec (map list m2bdd@vars m2bde@val-exps) m2bdf@body-exp)))) (set! m2b7f@build-letrec* (lambda (m2be4@ae m2be5@vars m2be6@val-exps m2be7@body-exp) (if (null? m2be5@vars) m2be7@body-exp (m2b4b@build-let m2be4@ae m2be5@vars (map (lambda (m2bec@x) (list 'quote '#f)) m2be5@vars) (m2b79@build-sequence m2be4@ae (append (map (lambda (m2bee@lhs m2bef@rhs) (list 'set! m2bee@lhs m2bef@rhs)) m2be5@vars m2be6@val-exps) (list m2be7@body-exp))))))) (set! m2b81@build-library-letrec* (lambda (m2bf2@ae m2bf3@name m2bf4@vars m2bf5@locs m2bf6@val-exps m2bf7@body-exp) (list 'library-letrec* m2bf3@name (map list m2bf4@vars m2bf5@locs m2bf6@val-exps) m2bf7@body-exp))) (set! m2b83@build-receive (lambda (m2bfe@ae m2bff@vars m2c00@producer m2c01@body*) (begin (display '"************** in ") (cons 'receive (cons m2bff@vars (cons m2c00@producer m2c01@body*)))))) (begin (set! m2c0f@m2b83@build-receive m2b83@build-receive) (set! m2c0e@m2b81@build-library-letrec* m2b81@build-library-letrec*) (set! m2c0d@m2b7f@build-letrec* m2b7f@build-letrec*) (set! m2c0c@m2b7d@build-letrec m2b7d@build-letrec) (set! m2c0b@m2b7b@build-void m2b7b@build-void) (set! m2c0a@m2b79@build-sequence m2b79@build-sequence) (set! m2c09@m2b4b@build-let m2b4b@build-let) (set! m2c08@m2b49@build-case-lambda m2b49@build-case-lambda) (set! m2c07@m2b47@build-lambda m2b47@build-lambda) (set! m2c06@m2ad6@build-global-define m2ad6@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (m2c1e@file-options-macro m2c20@set-cons m2c22@set-union m2c27@top-mark* m2c29@top-marked? m2c2b@gen-lexical m2c2d@gen-global m2c2f@gen-label m2c31@gen-top-level-label m2c33@gen-define-label+loc m2c35@gen-define-label m2c3b@m2c36 m2c3d@m2c38 m2c3f@m2c37 m2c42@rib? m2c44@make-rib m2c46@rib-sym* m2c48@rib-mark** m2c4a@rib-label* m2c4c@rib-sealed/freq m2c4e@rib-cache m2c50@set-rib-sym*! m2c52@set-rib-mark**! m2c54@set-rib-label*! m2c56@set-rib-sealed/freq! m2c58@set-rib-cache! m2c5a@make-empty-rib m2c5c@extend-rib! m2c5e@extend-rib/nc! m2c60@make-rib-map m2c62@seal-rib! m2c64@unseal-rib! m2c66@make-full-rib m2c6c@m2c67 m2c6e@m2c69 m2c70@m2c68 m2c73@stx? m2c75@make-stx m2c77@stx-expr m2c79@stx-mark* m2c7b@stx-subst* m2c7d@stx-ae* m2c7f@set-stx-expr! m2c81@set-stx-mark*! m2c83@set-stx-subst*! m2c85@set-stx-ae*! m2c87@rp m2c89@datum->stx m2c8b@gen-mark m2c8d@anti-mark m2c8f@anti-mark? m2c91@join-wraps m2c93@mkstx m2c95@add-mark m2c97@add-subst m2c99@syntax-kind? m2c9b@syntax-vector->list m2c9d@syntax-pair? m2c9f@syntax-vector? m2ca1@syntax-null? m2ca3@syntax-list? m2ca5@syntax-car m2ca7@syntax-cdr m2ca9@syntax->list m2cab@id? m2cad@id->sym m2caf@same-marks? m2cb1@bound-id=? m2cb3@free-id=? m2cb5@valid-bound-ids? m2cb7@distinct-bound-ids? m2cb9@bound-id-member? m2cbb@self-evaluating? m2cbd@strip-annotations m2cbf@strip m2cc1@stx->datum m2cc3@same-marks*? m2cc5@id->label m2cc7@id->real-label m2cc9@label->binding m2ccb@make-binding m2ccd@binding-type m2ccf@binding-value m2cd1@raise-unbound-error m2cd3@syntax-type m2ce1@sanitize-binding m2ce3@make-variable-transformer m2ce5@variable-transformer? m2ce7@variable-transformer-procedure m2ce9@make-eval-transformer m2e3a@parse-define m2e3c@parse-define-syntax m2e3e@scheme-stx-hashtable m2e40@scheme-stx m2e42@lexical-var m2e44@lexical-mutable? m2e46@set-lexical-mutable! m2e48@add-lexical m2e4a@add-lexicals m2e4c@letrec-helper m2e4e@letrec-transformer m2e50@letrec*-transformer m2e52@fluid-let-syntax-transformer m2e54@type-descriptor-transformer m2e56@record-type-descriptor-transformer m2e58@record-constructor-descriptor-transformer m2e5a@when-macro m2e5c@unless-macro m2e5e@if-transformer m2e60@and-transformer m2e62@or-transformer m2e64@case-macro m2e66@quote-transformer m2e68@case-lambda-transformer m2e6a@lambda-transformer m2e6c@bless m2e6e@with-syntax-macro m2e70@invalid-fmls-error m2e72@let-macro m2e74@let-values-macro m2e76@let*-values-macro m2e78@trace-lambda-macro m2e7a@trace-define-macro m2e7c@trace-define-syntax-macro m2e7e@trace-let/rec-syntax m2e80@trace-let-syntax-macro m2e82@trace-letrec-syntax-macro m2e84@guard-macro m2e86@define-enumeration-macro m2e88@time-macro m2e8a@delay-macro m2e8c@assert-macro m2e8e@endianness-macro m2e90@identifier-syntax-macro m2e92@do-macro m2e94@let*-macro m2e96@or-macro m2e98@and-macro m2e9a@cond-macro m2e9c@do-include m2e9e@include-macro m2ea0@include-into-macro m2ea2@syntax-rules-macro m2ea4@quasiquote-macro m2ea6@quasisyntax-macro m2ea8@define-struct-macro m2eaa@define-record-type-macro m2eac@define-condition-type-macro m2eae@incorrect-usage-macro m2eb0@parameterize-macro m2eb2@foreign-call-transformer m2eb4@convert-pattern m2eb6@syntax-dispatch m2eb8@ellipsis? m2eba@underscore? m2ebc@verify-literals m2ebe@syntax-case-transformer m2ec0@ellipsis-map m2ec2@syntax-transformer m2ec4@core-macro-transformer m2ec6@symbol-macro m2ec8@macro-transformer m2eca@local-macro-transformer m2ecc@do-macro-call m2ece@chi-macro m2ed0@chi-local-macro m2ed2@chi-global-macro m2ed4@chi-expr* m2ed6@chi-application m2ed8@chi-expr m2eda@chi-set! m2edc@verify-formals m2ede@chi-lambda-clause m2ee0@chi-lambda-clause* m2ee2@chi-defun m2ee4@chi-rhs m2ee6@expand-interaction-rhs*/init* m2ee8@chi-rhs* m2eea@find-bound=? m2eec@find-dups m2eee@chi-internal m2ef0@parse-module m2ef6@m2ef1 m2ef8@m2ef3 m2efa@m2ef2 m2efd@module-interface? m2eff@make-module-interface m2f01@module-interface-first-mark m2f03@module-interface-exp-id-vec m2f05@module-interface-exp-lab-vec m2f07@set-module-interface-first-mark! m2f09@set-module-interface-exp-id-vec! m2f0b@set-module-interface-exp-lab-vec! m2f0d@module-interface-exp-id* m2f0f@chi-internal-module m2f11@chi-body* m2f13@expand-transformer m2f15@parse-exports m2f17@parse-library-name m2f19@parse-library m2f1b@parse-import-spec* m2f1d@make-top-rib m2f1f@make-collector m2f21@inv-collector m2f23@vis-collector m2f25@imp-collector m2f27@chi-library-internal m2f29@chi-interaction-expr m2f2b@library-body-expander m2f2d@core-library-expander m2f2f@parse-top-level-program m2f31@top-level-expander m2f37@m2f32 m2f39@m2f34 m2f3b@m2f33 m2f3e@env? m2f40@make-env m2f42@env-names m2f44@env-labels m2f46@env-itc m2f48@set-env-names! m2f4a@set-env-labels! m2f4c@set-env-itc! m2f4e@rp m2f54@m2f4f m2f56@m2f51 m2f58@m2f50 m2f5b@interaction-env? m2f5d@make-interaction-env m2f5f@interaction-env-rib m2f61@interaction-env-r m2f63@interaction-env-locs m2f65@set-interaction-env-rib! m2f67@set-interaction-env-r! m2f69@set-interaction-env-locs! m2f6b@rp m2f6d@interaction-environment-symbols m2f6f@environment-bindings m2f71@parse-binding m2f73@environment? m2f75@environment-symbols m2f77@environment m2f79@null-environment m2f7b@scheme-report-environment m2f7d@expand m2f7f@eval m2f81@library-expander m2f83@boot-library-expand m2f85@rev-map-append m2f87@build-exports m2f89@make-export-subst m2f8b@make-export-env/macros m2f8d@generate-temporaries m2f8f@free-identifier=? m2f91@bound-identifier=? m2f93@make-source-condition m2f95@extract-position-condition m2f97@expression-position m2f99@assertion-error m2f9b@syntax-error m2f9d@syntax-violation* m2f9f@syntax-violation m2fa1@identifier? m2fa3@datum->syntax m2fa5@syntax->datum m2fa7@compile-r6rs-top-level m2fa9@pre-compile-r6rs-top-level m2fab@interaction-environment m2fad@top-level-context) (begin (set! m2c1e@file-options-macro (lambda (m2fae@x) ((lambda (m2fb1@valid-option?) (begin (set! m2fb1@valid-option? (lambda (m2fba@x) (and (m2cab@id? m2fba@x) (memq (m2cad@id->sym m2fba@x) '(no-fail no-create no-truncate))))) ((lambda (m2fb2@t) ((lambda (m2fb4@ls/false) (if (and m2fb4@ls/false (apply (lambda (m2fb6@opt*) (for-all m2fb1@valid-option? m2fb6@opt*)) m2fb4@ls/false)) (apply (lambda (m2fb8@opt*) (m2e6c@bless (list 'make-file-options (list 'quote m2fb8@opt*)))) m2fb4@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m2fb2@t))) (m2eb6@syntax-dispatch m2fb2@t '(_ . each-any)))) m2fae@x))) '#f))) (set! m2c20@set-cons (lambda (m2fbc@x m2fbd@ls) (if (memq m2fbc@x m2fbd@ls) m2fbd@ls (cons m2fbc@x m2fbd@ls)))) (set! m2c22@set-union (lambda (m2fc0@ls1 m2fc1@ls2) (if (null? m2fc0@ls1) m2fc1@ls2 (if (memq (car m2fc0@ls1) m2fc1@ls2) (m2c22@set-union (cdr m2fc0@ls1) m2fc1@ls2) (cons (car m2fc0@ls1) (m2c22@set-union (cdr m2fc0@ls1) m2fc1@ls2)))))) (set! m2c27@top-mark* '(top)) (set! m2c29@top-marked? (lambda (m2fc4@m*) (memq 'top m2fc4@m*))) (set! m2c2b@gen-lexical (lambda (m2fc6@sym) (if (symbol? m2fc6@sym) (gensym m2fc6@sym) (if (m2c73@stx? m2fc6@sym) (m2c2b@gen-lexical (m2cad@id->sym m2fc6@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" m2fc6@sym))))) (set! m2c2d@gen-global (lambda (m2fc8@x) (m2c2b@gen-lexical m2fc8@x))) (set! m2c2f@gen-label (lambda (m2fca@_) (gensym))) (set! m2c31@gen-top-level-label (lambda (m2fcc@id m2fcd@rib) ((lambda (m2fd1@find) (begin (set! m2fd1@find (lambda (m2fdc@sym m2fdd@mark* m2fde@sym* m2fdf@mark** m2fe0@label*) (and (pair? m2fde@sym*) (if (and (eq? m2fdc@sym (car m2fde@sym*)) (m2caf@same-marks? m2fdd@mark* (car m2fdf@mark**))) (car m2fe0@label*) (m2fd1@find m2fdc@sym m2fdd@mark* (cdr m2fde@sym*) (cdr m2fdf@mark**) (cdr m2fe0@label*)))))) ((lambda (m2fd2@sym m2fd3@mark*) ((lambda (m2fd6@sym*) ((lambda (m2fd8@t) (if m2fd8@t ((lambda (m2fda@label) (if (m2ace@m296e@imported-label->binding m2fda@label) (gensym) m2fda@label)) m2fd8@t) (gensym))) (and (memq m2fd2@sym (m2c46@rib-sym* m2fcd@rib)) (m2fd1@find m2fd2@sym m2fd3@mark* m2fd6@sym* (m2c48@rib-mark** m2fcd@rib) (m2c4a@rib-label* m2fcd@rib))))) (m2c46@rib-sym* m2fcd@rib))) (m2cad@id->sym m2fcc@id) (m2c79@stx-mark* m2fcc@id)))) '#f))) (set! m2c33@gen-define-label+loc (lambda (m2fe6@id m2fe7@rib) ((lambda (m2fea@t) (if m2fea@t ((lambda (m2fec@env) ((lambda (m2fee@label m2fef@locs) (values m2fee@label ((lambda (m2ff2@t) (if m2ff2@t (cdr m2ff2@t) ((lambda (m2ff4@loc) (begin (m2f69@set-interaction-env-locs! m2fec@env (cons (cons m2fee@label m2ff4@loc) m2fef@locs)) m2ff4@loc)) (m2c2b@gen-lexical m2fe6@id)))) (assq m2fee@label m2fef@locs)))) (m2c31@gen-top-level-label m2fe6@id m2fe7@rib) (m2f63@interaction-env-locs m2fec@env))) m2fea@t) (values (gensym) (m2c2b@gen-lexical m2fe6@id)))) (m2fad@top-level-context)))) (set! m2c35@gen-define-label (lambda (m2ff6@id m2ff7@rib) (if (m2fad@top-level-context) (m2c31@gen-top-level-label m2ff6@id m2ff7@rib) (gensym)))) (set! m2c3b@m2c36 (make-record-type-descriptor 'rib '#f 'm2c39 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! m2c3d@m2c38 '#f) (set! m2c3f@m2c37 (make-record-constructor-descriptor m2c3b@m2c36 '#f m2c3d@m2c38)) (set! m2c42@rib? (record-predicate m2c3b@m2c36)) (set! m2c44@make-rib (record-constructor m2c3f@m2c37)) (set! m2c46@rib-sym* (record-accessor m2c3b@m2c36 '0)) (set! m2c48@rib-mark** (record-accessor m2c3b@m2c36 '1)) (set! m2c4a@rib-label* (record-accessor m2c3b@m2c36 '2)) (set! m2c4c@rib-sealed/freq (record-accessor m2c3b@m2c36 '3)) (set! m2c4e@rib-cache (record-accessor m2c3b@m2c36 '4)) (set! m2c50@set-rib-sym*! (record-mutator m2c3b@m2c36 '0)) (set! m2c52@set-rib-mark**! (record-mutator m2c3b@m2c36 '1)) (set! m2c54@set-rib-label*! (record-mutator m2c3b@m2c36 '2)) (set! m2c56@set-rib-sealed/freq! (record-mutator m2c3b@m2c36 '3)) (set! m2c58@set-rib-cache! (record-mutator m2c3b@m2c36 '4)) (set! m2c5a@make-empty-rib (lambda () (m2c44@make-rib '() '() '() '#f '#f))) (set! m2c5c@extend-rib! (lambda (m2ffa@rib m2ffb@id m2ffc@label) ((lambda (m3001@find) (begin (set! m3001@find (lambda (m300e@sym m300f@mark* m3010@sym* m3011@mark** m3012@label*) (and (pair? m3010@sym*) (if (and (eq? m300e@sym (car m3010@sym*)) (m2caf@same-marks? m300f@mark* (car m3011@mark**))) m3012@label* (m3001@find m300e@sym m300f@mark* (cdr m3010@sym*) (cdr m3011@mark**) (cdr m3012@label*)))))) (begin (if (m2c4c@rib-sealed/freq m2ffa@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" m2ffa@rib) (void)) ((lambda (m3002@sym m3003@mark*) ((lambda (m3006@sym*) ((lambda (m3008@t) (if m3008@t ((lambda (m300a@p) (if (not (eq? m2ffc@label (car m300a@p))) (if (m2fad@top-level-context) (set-car! m300a@p m2ffc@label) (m2f9f@syntax-violation '#f '"multiple definitions of identifier" m2ffb@id)) (void))) m3008@t) (begin (if (m2c4e@rib-cache m2ffa@rib) (hashtable-update! (m2c4e@rib-cache m2ffa@rib) m3002@sym (lambda (m300c@e) (cons (cons m3003@mark* m2ffc@label) m300c@e)) '()) (void)) (m2c50@set-rib-sym*! m2ffa@rib (cons m3002@sym m3006@sym*)) (m2c52@set-rib-mark**! m2ffa@rib (cons m3003@mark* (m2c48@rib-mark** m2ffa@rib))) (m2c54@set-rib-label*! m2ffa@rib (cons m2ffc@label (m2c4a@rib-label* m2ffa@rib)))))) (and (memq m3002@sym (m2c46@rib-sym* m2ffa@rib)) (m3001@find m3002@sym m3003@mark* m3006@sym* (m2c48@rib-mark** m2ffa@rib) (m2c4a@rib-label* m2ffa@rib))))) (m2c46@rib-sym* m2ffa@rib))) (m2cad@id->sym m2ffb@id) (m2c79@stx-mark* m2ffb@id))))) '#f))) (set! m2c5e@extend-rib/nc! (lambda (m3018@rib m3019@id m301a@label) ((lambda (m301e@sym m301f@mark*) ((lambda (m3022@sym*) (begin (if (m2c4e@rib-cache m3018@rib) (hashtable-update! (m2c4e@rib-cache m3018@rib) m301e@sym (lambda (m3024@e) (cons (cons m301f@mark* m301a@label) m3024@e)) '()) (void)) (m2c50@set-rib-sym*! m3018@rib (cons m301e@sym m3022@sym*)) (m2c52@set-rib-mark**! m3018@rib (cons m301f@mark* (m2c48@rib-mark** m3018@rib))) (m2c54@set-rib-label*! m3018@rib (cons m301a@label (m2c4a@rib-label* m3018@rib))))) (m2c46@rib-sym* m3018@rib))) (m2cad@id->sym m3019@id) (m2c79@stx-mark* m3019@id)))) (set! m2c60@make-rib-map (lambda (m3026@sym*) ((lambda (m3028@ht) ((letrec ((m302a@f (lambda (m302c@i m302d@sym*) (if (null? m302d@sym*) m3028@ht (begin (hashtable-update! m3028@ht (car m302d@sym*) (lambda (m3030@x) (cons m302c@i m3030@x)) '()) (m302a@f (+ m302c@i '1) (cdr m302d@sym*))))))) m302a@f) '0 m3026@sym*)) (make-eq-hashtable)))) (set! m2c62@seal-rib! (lambda (m3032@rib) ((lambda (m3034@sym*) (if (not (null? m3034@sym*)) (begin (m2c50@set-rib-sym*! m3032@rib (list->vector m3034@sym*)) (m2c52@set-rib-mark**! m3032@rib (list->vector (m2c48@rib-mark** m3032@rib))) (m2c54@set-rib-label*! m3032@rib (list->vector (m2c4a@rib-label* m3032@rib))) (m2c56@set-rib-sealed/freq! m3032@rib (m2c60@make-rib-map m3034@sym*))) (void))) (m2c46@rib-sym* m3032@rib)))) (set! m2c64@unseal-rib! (lambda (m3036@rib) (if (m2c4c@rib-sealed/freq m3036@rib) (begin (m2c56@set-rib-sealed/freq! m3036@rib '#f) (m2c50@set-rib-sym*! m3036@rib (vector->list (m2c46@rib-sym* m3036@rib))) (m2c52@set-rib-mark**! m3036@rib (vector->list (m2c48@rib-mark** m3036@rib))) (m2c54@set-rib-label*! m3036@rib (vector->list (m2c4a@rib-label* m3036@rib)))) (void)))) (set! m2c66@make-full-rib (lambda (m3038@id* m3039@label*) ((lambda (m303c@r) (begin (m2c62@seal-rib! m303c@r) m303c@r)) (m2c44@make-rib (map m2cad@id->sym m3038@id*) (map m2c79@stx-mark* m3038@id*) m3039@label* '#f '#f)))) (set! m2c6c@m2c67 (make-record-type-descriptor 'stx '#f 'm2c6a '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! m2c6e@m2c69 '#f) (set! m2c70@m2c68 (make-record-constructor-descriptor m2c6c@m2c67 '#f m2c6e@m2c69)) (set! m2c73@stx? (record-predicate m2c6c@m2c67)) (set! m2c75@make-stx (record-constructor m2c70@m2c68)) (set! m2c77@stx-expr (record-accessor m2c6c@m2c67 '0)) (set! m2c79@stx-mark* (record-accessor m2c6c@m2c67 '1)) (set! m2c7b@stx-subst* (record-accessor m2c6c@m2c67 '2)) (set! m2c7d@stx-ae* (record-accessor m2c6c@m2c67 '3)) (set! m2c7f@set-stx-expr! (record-mutator m2c6c@m2c67 '0)) (set! m2c81@set-stx-mark*! (record-mutator m2c6c@m2c67 '1)) (set! m2c83@set-stx-subst*! (record-mutator m2c6c@m2c67 '2)) (set! m2c85@set-stx-ae*! (record-mutator m2c6c@m2c67 '3)) (set! m2c87@rp (m2852@m2779@make-record-printer 'stx (lambda (m303e@x m303f@p m3040@wr) (begin (display '"#<syntax " m303f@p) (write (m2cc1@stx->datum m303e@x) m303f@p) ((lambda (m3044@expr) (if (m284a@m2769@annotation? m3044@expr) ((lambda (m3046@src) (if (pair? m3046@src) (begin (display '" [" m303f@p) (display (cdr m3046@src) m303f@p) (display '" of " m303f@p) (display (car m3046@src) m303f@p) (display '"]" m303f@p)) (void))) (m284b@m276b@annotation-source m3044@expr)) (void))) (m2c77@stx-expr m303e@x)) (display '">" m303f@p))))) (set! m2c89@datum->stx (lambda (m3048@id m3049@datum) (m2c75@make-stx m3049@datum (m2c79@stx-mark* m3048@id) (m2c7b@stx-subst* m3048@id) (m2c7d@stx-ae* m3048@id)))) (set! m2c8b@gen-mark (lambda () (string '#\m))) (set! m2c8d@anti-mark '#f) (set! m2c8f@anti-mark? not) (set! m2c91@join-wraps (lambda (m304c@m1* m304d@s1* m304e@ae1* m304f@e) ((lambda (m3055@cancel) (begin (set! m3055@cancel (lambda (m305c@ls1 m305d@ls2) ((letrec ((m3060@f (lambda (m3062@x m3063@ls1) (if (null? m3063@ls1) (cdr m305d@ls2) (cons m3062@x (m3060@f (car m3063@ls1) (cdr m3063@ls1))))))) m3060@f) (car m305c@ls1) (cdr m305c@ls1)))) ((lambda (m3056@m2* m3057@s2* m3058@ae2*) (if (and (not (null? m304c@m1*)) (not (null? m3056@m2*)) (m2c8f@anti-mark? (car m3056@m2*))) (values (m3055@cancel m304c@m1* m3056@m2*) (m3055@cancel m304d@s1* m3057@s2*) (m3055@cancel m304e@ae1* m3058@ae2*)) (values (append m304c@m1* m3056@m2*) (append m304d@s1* m3057@s2*) (append m304e@ae1* m3058@ae2*)))) (m2c79@stx-mark* m304f@e) (m2c7b@stx-subst* m304f@e) (m2c7d@stx-ae* m304f@e)))) '#f))) (set! m2c93@mkstx (lambda (m3066@e m3067@m* m3068@s* m3069@ae*) (if (and (m2c73@stx? m3066@e) (not (m2c29@top-marked? m3067@m*))) (call-with-values (lambda () (m2c91@join-wraps m3067@m* m3068@s* m3069@ae* m3066@e)) (lambda (m3074@m306f m3075@m3071 m3076@m3073) ((lambda (m307a@ae* m307b@s* m307c@m*) (m2c75@make-stx (m2c77@stx-expr m3066@e) m307c@m* m307b@s* m307a@ae*)) m3076@m3073 m3075@m3071 m3074@m306f))) (m2c75@make-stx m3066@e m3067@m* m3068@s* m3069@ae*)))) (set! m2c95@add-mark (lambda (m3080@m m3081@e m3082@ae) (m2c93@mkstx m3081@e (list m3080@m) '(shift) (list m3082@ae)))) (set! m2c97@add-subst (lambda (m3086@subst m3087@e) (m2c93@mkstx m3087@e '() (list m3086@subst) '()))) (set! m2c99@syntax-kind? (lambda (m308a@x m308b@p?) (if (m2c73@stx? m308a@x) (m2c99@syntax-kind? (m2c77@stx-expr m308a@x) m308b@p?) (if (m284a@m2769@annotation? m308a@x) (m2c99@syntax-kind? (m284c@m276d@annotation-expression m308a@x) m308b@p?) (m308b@p? m308a@x))))) (set! m2c9b@syntax-vector->list (lambda (m308e@x) (if (m2c73@stx? m308e@x) ((lambda (m3090@ls m3091@m* m3092@s* m3093@ae*) (map (lambda (m3098@x) (m2c93@mkstx m3098@x m3091@m* m3092@s* m3093@ae*)) m3090@ls)) (m2c9b@syntax-vector->list (m2c77@stx-expr m308e@x)) (m2c79@stx-mark* m308e@x) (m2c7b@stx-subst* m308e@x) (m2c7d@stx-ae* m308e@x)) (if (m284a@m2769@annotation? m308e@x) (m2c9b@syntax-vector->list (m284c@m276d@annotation-expression m308e@x)) (if (vector? m308e@x) (vector->list m308e@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" m308e@x)))))) (set! m2c9d@syntax-pair? (lambda (m309a@x) (m2c99@syntax-kind? m309a@x pair?))) (set! m2c9f@syntax-vector? (lambda (m309c@x) (m2c99@syntax-kind? m309c@x vector?))) (set! m2ca1@syntax-null? (lambda (m309e@x) (m2c99@syntax-kind? m309e@x null?))) (set! m2ca3@syntax-list? (lambda (m30a0@x) (or (m2ca1@syntax-null? m30a0@x) (and (m2c9d@syntax-pair? m30a0@x) (m2ca3@syntax-list? (m2ca7@syntax-cdr m30a0@x)))))) (set! m2ca5@syntax-car (lambda (m30a2@x) (if (m2c73@stx? m30a2@x) (m2c93@mkstx (m2ca5@syntax-car (m2c77@stx-expr m30a2@x)) (m2c79@stx-mark* m30a2@x) (m2c7b@stx-subst* m30a2@x) (m2c7d@stx-ae* m30a2@x)) (if (m284a@m2769@annotation? m30a2@x) (m2ca5@syntax-car (m284c@m276d@annotation-expression m30a2@x)) (if (pair? m30a2@x) (car m30a2@x) (assertion-violation 'syntax-car '"BUG: not a pair" m30a2@x)))))) (set! m2ca7@syntax-cdr (lambda (m30a4@x) (if (m2c73@stx? m30a4@x) (m2c93@mkstx (m2ca7@syntax-cdr (m2c77@stx-expr m30a4@x)) (m2c79@stx-mark* m30a4@x) (m2c7b@stx-subst* m30a4@x) (m2c7d@stx-ae* m30a4@x)) (if (m284a@m2769@annotation? m30a4@x) (m2ca7@syntax-cdr (m284c@m276d@annotation-expression m30a4@x)) (if (pair? m30a4@x) (cdr m30a4@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" m30a4@x)))))) (set! m2ca9@syntax->list (lambda (m30a6@x) (if (m2c9d@syntax-pair? m30a6@x) (cons (m2ca5@syntax-car m30a6@x) (m2ca9@syntax->list (m2ca7@syntax-cdr m30a6@x))) (if (m2ca1@syntax-null? m30a6@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" m30a6@x))))) (set! m2cab@id? (lambda (m30a8@x) (and (m2c73@stx? m30a8@x) ((lambda (m30aa@expr) (symbol? (if (m284a@m2769@annotation? m30aa@expr) (m2849@m2767@annotation-stripped m30aa@expr) m30aa@expr))) (m2c77@stx-expr m30a8@x))))) (set! m2cad@id->sym (lambda (m30ac@x) (begin (if (not (m2c73@stx? m30ac@x)) (error 'id->sym '"BUG in ikarus: not an id" m30ac@x) (void)) ((lambda (m30ae@expr) ((lambda (m30b0@sym) (if (symbol? m30b0@sym) m30b0@sym (error 'id->sym '"BUG in ikarus: not an id" m30ac@x))) (if (m284a@m2769@annotation? m30ae@expr) (m2849@m2767@annotation-stripped m30ae@expr) m30ae@expr))) (m2c77@stx-expr m30ac@x))))) (set! m2caf@same-marks? (lambda (m30b2@x m30b3@y) (or (and (null? m30b2@x) (null? m30b3@y)) (and (pair? m30b2@x) (pair? m30b3@y) (eq? (car m30b2@x) (car m30b3@y)) (m2caf@same-marks? (cdr m30b2@x) (cdr m30b3@y)))))) (set! m2cb1@bound-id=? (lambda (m30b6@x m30b7@y) (and (eq? (m2cad@id->sym m30b6@x) (m2cad@id->sym m30b7@y)) (m2caf@same-marks? (m2c79@stx-mark* m30b6@x) (m2c79@stx-mark* m30b7@y))))) (set! m2cb3@free-id=? (lambda (m30ba@i m30bb@j) ((lambda (m30be@t0 m30bf@t1) (if (or m30be@t0 m30bf@t1) (eq? m30be@t0 m30bf@t1) (eq? (m2cad@id->sym m30ba@i) (m2cad@id->sym m30bb@j)))) (m2cc7@id->real-label m30ba@i) (m2cc7@id->real-label m30bb@j)))) (set! m2cb5@valid-bound-ids? (lambda (m30c2@id*) (and (for-all m2cab@id? m30c2@id*) (m2cb7@distinct-bound-ids? m30c2@id*)))) (set! m2cb7@distinct-bound-ids? (lambda (m30c4@id*) (or (null? m30c4@id*) (and (not (m2cb9@bound-id-member? (car m30c4@id*) (cdr m30c4@id*))) (m2cb7@distinct-bound-ids? (cdr m30c4@id*)))))) (set! m2cb9@bound-id-member? (lambda (m30c6@id m30c7@id*) (and (pair? m30c7@id*) (or (m2cb1@bound-id=? m30c6@id (car m30c7@id*)) (m2cb9@bound-id-member? m30c6@id (cdr m30c7@id*)))))) (set! m2cbb@self-evaluating? (lambda (m30ca@x) (or (number? m30ca@x) (string? m30ca@x) (char? m30ca@x) (boolean? m30ca@x) (regexp? m30ca@x) (bytevector? m30ca@x)))) (set! m2cbd@strip-annotations (lambda (m30cc@x) (if (pair? m30cc@x) (cons (m2cbd@strip-annotations (car m30cc@x)) (m2cbd@strip-annotations (cdr m30cc@x))) (if (vector? m30cc@x) (vector-map m2cbd@strip-annotations m30cc@x) (if (m284a@m2769@annotation? m30cc@x) (m2849@m2767@annotation-stripped m30cc@x) m30cc@x))))) (set! m2cbf@strip (lambda (m30ce@x m30cf@m*) (if (m2c29@top-marked? m30cf@m*) (if (or (m284a@m2769@annotation? m30ce@x) (and (pair? m30ce@x) (m284a@m2769@annotation? (car m30ce@x))) (and (vector? m30ce@x) (> (vector-length m30ce@x) '0) (m284a@m2769@annotation? (vector-ref m30ce@x '0)))) (m2cbd@strip-annotations m30ce@x) m30ce@x) ((letrec ((m30d2@f (lambda (m30d4@x) (if (m2c73@stx? m30d4@x) (m2cbf@strip (m2c77@stx-expr m30d4@x) (m2c79@stx-mark* m30d4@x)) (if (m284a@m2769@annotation? m30d4@x) (m2849@m2767@annotation-stripped m30d4@x) (if (pair? m30d4@x) ((lambda (m30d6@a m30d7@d) (if (and (eq? m30d6@a (car m30d4@x)) (eq? m30d7@d (cdr m30d4@x))) m30d4@x (cons m30d6@a m30d7@d))) (m30d2@f (car m30d4@x)) (m30d2@f (cdr m30d4@x))) (if (vector? m30d4@x) ((lambda (m30da@old) ((lambda (m30dc@new) (if (for-all eq? m30da@old m30dc@new) m30d4@x (list->vector m30dc@new))) (map m30d2@f m30da@old))) (vector->list m30d4@x)) m30d4@x))))))) m30d2@f) m30ce@x)))) (set! m2cc1@stx->datum (lambda (m30de@x) (m2cbf@strip m30de@x '()))) (set! m2cc3@same-marks*? (lambda (m30e0@mark* m30e1@mark** m30e2@si) (if (null? m30e2@si) '#f (if (m2caf@same-marks? m30e0@mark* (vector-ref m30e1@mark** (car m30e2@si))) (car m30e2@si) (m2cc3@same-marks*? m30e0@mark* m30e1@mark** (cdr m30e2@si)))))) (set! m2cc5@id->label (lambda (m30e6@id) (or (m2cc7@id->real-label m30e6@id) ((lambda (m30e8@t) (if m30e8@t ((lambda (m30ea@env) ((lambda (m30ec@rib) (call-with-values (lambda () (m2c33@gen-define-label+loc m30e6@id m30ec@rib)) (lambda (m30f2@m30ef m30f3@m30f1) ((lambda (m30f6@loc_ m30f7@lab) (begin (m2c5c@extend-rib! m30ec@rib m30e6@id m30f7@lab) m30f7@lab)) m30f3@m30f1 m30f2@m30ef)))) (m2f5f@interaction-env-rib m30ea@env))) m30e8@t) '#f)) (m2fad@top-level-context))))) (set! m2cc7@id->real-label (lambda (m30fa@id) ((lambda (m30fc@sym) ((letrec ((m30fe@search (lambda (m3100@subst* m3101@mark*) (if (null? m3100@subst*) '#f (if (eq? (car m3100@subst*) 'shift) (m30fe@search (cdr m3100@subst*) (cdr m3101@mark*)) ((lambda (m3104@rib) ((lambda (m3106@t) (if m3106@t ((lambda (m3108@ht) ((lambda (m310a@si) ((lambda (m310c@i) (if m310c@i (vector-ref (m2c4a@rib-label* m3104@rib) m310c@i) (m30fe@search (cdr m3100@subst*) m3101@mark*))) (and m310a@si (m2cc3@same-marks*? m3101@mark* (m2c48@rib-mark** m3104@rib) (reverse m310a@si))))) (hashtable-ref m3108@ht m30fc@sym '#f))) m3106@t) ((letrec ((m310e@f (lambda (m3110@sym* m3111@mark** m3112@label*) (if (null? m3110@sym*) (m30fe@search (cdr m3100@subst*) m3101@mark*) (if (and (eq? (car m3110@sym*) m30fc@sym) (m2caf@same-marks? (car m3111@mark**) m3101@mark*)) (car m3112@label*) (m310e@f (cdr m3110@sym*) (cdr m3111@mark**) (cdr m3112@label*))))))) m310e@f) (m2c46@rib-sym* m3104@rib) (m2c48@rib-mark** m3104@rib) (m2c4a@rib-label* m3104@rib)))) (m2c4c@rib-sealed/freq m3104@rib))) (car m3100@subst*))))))) m30fe@search) (m2c7b@stx-subst* m30fa@id) (m2c79@stx-mark* m30fa@id))) (m2cad@id->sym m30fa@id)))) (set! m2cc9@label->binding (lambda (m3116@x m3117@r) ((lambda (m311a@t) (if m311a@t ((lambda (m311c@b) (if (and (pair? m311c@b) (eq? (car m311c@b) '$core-rtd)) (cons '$rtd (map m2e6c@bless (cdr m311c@b))) (if (and (pair? m311c@b) (eq? (car m311c@b) 'global-rtd)) ((lambda (m311e@lib m311f@loc) (cons '$rtd (symbol-value m311f@loc))) (cadr m311c@b) (cddr m311c@b)) m311c@b))) m311a@t) ((lambda (m3122@t) (if m3122@t (cdr m3122@t) ((lambda (m3124@t) (if m3124@t ((lambda (m3126@env) ((lambda (m3128@t) (if m3128@t ((lambda (m312a@p) (cons* 'lexical (cdr m312a@p) '#f)) m3128@t) '(displaced-lexical . #f))) (assq m3116@x (m2f63@interaction-env-locs m3126@env)))) m3124@t) '(displaced-lexical . #f))) (m2fad@top-level-context)))) (assq m3116@x m3117@r)))) (m2ace@m296e@imported-label->binding m3116@x)))) (set! m2ccb@make-binding cons) (set! m2ccd@binding-type car) (set! m2ccf@binding-value cdr) (set! m2cd1@raise-unbound-error (lambda (m312c@id) (m2f9d@syntax-violation* '#f '"unbound identifier" m312c@id (m4cdc@m4b22@make-undefined-violation)))) (set! m2cd3@syntax-type (lambda (m312e@e m312f@r) (if (m2cab@id? m312e@e) ((lambda (m3132@id) ((lambda (m3134@label) ((lambda (m3136@b) ((lambda (m3138@type) ((lambda () (begin (if (not m3134@label) (m2cd1@raise-unbound-error m3132@id) (void)) ((lambda (m313a@t) (if (memv m313a@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values m3138@type (m2ccf@binding-value m3136@b) m3132@id) (values 'other '#f '#f))) m3138@type))))) (m2ccd@binding-type m3136@b))) (m2cc9@label->binding m3134@label m312f@r))) (m2cc5@id->label m3132@id))) m312e@e) (if (m2c9d@syntax-pair? m312e@e) ((lambda (m313c@id) (if (m2cab@id? m313c@id) ((lambda (m313e@label) ((lambda (m3140@b) ((lambda (m3142@type) ((lambda () (begin (if (not m313e@label) (m2cd1@raise-unbound-error m313c@id) (void)) ((lambda (m3144@t) (if (memv m3144@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values m3142@type (m2ccf@binding-value m3140@b) m313c@id) (values 'call '#f '#f))) m3142@type))))) (m2ccd@binding-type m3140@b))) (m2cc9@label->binding m313e@label m312f@r))) (m2cc5@id->label m313c@id)) (values 'call '#f '#f))) (m2ca5@syntax-car m312e@e)) ((lambda (m3146@d) (if (m2cbb@self-evaluating? m3146@d) (values 'constant m3146@d '#f) (values 'other '#f '#f))) (m2cc1@stx->datum m312e@e)))))) (set! m2ce1@sanitize-binding (lambda (m3148@x m3149@src) (if (procedure? m3148@x) (cons* 'local-macro m3148@x m3149@src) (if (and (pair? m3148@x) (eq? (car m3148@x) 'macro!) (procedure? (cdr m3148@x))) (cons* 'local-macro! (cdr m3148@x) m3149@src) (if (and (pair? m3148@x) (eq? (car m3148@x) '$rtd)) m3148@x (assertion-violation 'expand '"invalid transformer" m3148@x)))))) (set! m2ce3@make-variable-transformer (lambda (m314c@x) (if (procedure? m314c@x) (cons 'macro! m314c@x) (assertion-violation 'make-variable-transformer '"not a procedure" m314c@x)))) (set! m2ce5@variable-transformer? (lambda (m314e@x) (and (pair? m314e@x) (eq? (car m314e@x) 'macro!) (procedure? (cdr m314e@x))))) (set! m2ce7@variable-transformer-procedure (lambda (m3150@x) (if (m2ce5@variable-transformer? m3150@x) (cdr m3150@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" m3150@x)))) (set! m2ce9@make-eval-transformer (lambda (m3152@x) (m2ce1@sanitize-binding (eval-core (m28a9@m2861@expanded->core m3152@x)) m3152@x))) (set! m2e3a@parse-define (lambda (m3154@x) ((lambda (m3156@t) ((lambda (m3158@ls/false) (if (and m3158@ls/false (apply (lambda (m315a@id m315b@fmls m315c@b m315d@b*) (m2cab@id? m315a@id)) m3158@ls/false)) (apply (lambda (m3162@id m3163@fmls m3164@b m3165@b*) (begin (m2edc@verify-formals m3163@fmls m3154@x) (values m3162@id (cons 'defun (cons m3163@fmls (cons m3164@b m3165@b*)))))) m3158@ls/false) ((lambda (m316a@t) ((lambda (m316c@ls/false) (if (and m316c@ls/false (apply (lambda (m316e@id m316f@val) (m2cab@id? m316e@id)) m316c@ls/false)) (apply (lambda (m3172@id m3173@val) (values m3172@id (cons 'expr m3173@val))) m316c@ls/false) ((lambda (m3176@t) ((lambda (m3178@ls/false) (if (and m3178@ls/false (apply (lambda (m317a@id) (m2cab@id? m317a@id)) m3178@ls/false)) (apply (lambda (m317c@id) (values m317c@id (cons 'expr (m2e6c@bless '(void))))) m3178@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3176@t))) (m2eb6@syntax-dispatch m3176@t '(_ any)))) m316a@t))) (m2eb6@syntax-dispatch m316a@t '(_ any any)))) m3156@t))) (m2eb6@syntax-dispatch m3156@t '(_ (any . any) any . each-any)))) m3154@x))) (set! m2e3c@parse-define-syntax (lambda (m317e@x) ((lambda (m3180@t) ((lambda (m3182@ls/false) (if (and m3182@ls/false (apply (lambda (m3184@id m3185@val) (m2cab@id? m3184@id)) m3182@ls/false)) (apply (lambda (m3188@id m3189@val) (values m3188@id m3189@val)) m3182@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3180@t))) (m2eb6@syntax-dispatch m3180@t '(_ any any)))) m317e@x))) (set! m2e3e@scheme-stx-hashtable (make-eq-hashtable)) (set! m2e40@scheme-stx (lambda (m318c@sym) (or (hashtable-ref m2e3e@scheme-stx-hashtable m318c@sym '#f) ((lambda (m318e@subst) ((lambda (m3190@stx) ((lambda (m3192@stx) ((lambda () (begin (hashtable-set! m2e3e@scheme-stx-hashtable m318c@sym m3192@stx) m3192@stx)))) ((lambda (m3194@t) (if m3194@t ((lambda (m3196@x) ((lambda (m3198@name m3199@label) (m2c97@add-subst (m2c44@make-rib (list m3198@name) (list m2c27@top-mark*) (list m3199@label) '#f '#f) m3190@stx)) (car m3196@x) (cdr m3196@x))) m3194@t) m3190@stx)) (assq m318c@sym m318e@subst)))) (m2c75@make-stx m318c@sym m2c27@top-mark* '() '()))) (m2aa4@m291a@library-subst (m2ac8@m2962@find-library-by-name '(psyntax system $all))))))) (set! m2e42@lexical-var car) (set! m2e44@lexical-mutable? cdr) (set! m2e46@set-lexical-mutable! set-cdr!) (set! m2e48@add-lexical (lambda (m319c@lab m319d@lex m319e@r) (cons (cons* m319c@lab 'lexical m319d@lex '#f) m319e@r))) (set! m2e4a@add-lexicals (lambda (m31a2@lab* m31a3@lex* m31a4@r) (if (null? m31a2@lab*) m31a4@r (m2e4a@add-lexicals (cdr m31a2@lab*) (cdr m31a3@lex*) (m2e48@add-lexical (car m31a2@lab*) (car m31a3@lex*) m31a4@r))))) (set! m2e4c@letrec-helper (lambda (m31a8@e m31a9@r m31aa@mr m31ab@build) ((lambda (m31b0@t) ((lambda (m31b2@ls/false) (if m31b2@ls/false (apply (lambda (m31b4@lhs* m31b5@rhs* m31b6@b m31b7@b*) (if (not (m2cb5@valid-bound-ids? m31b4@lhs*)) (m2e70@invalid-fmls-error m31a8@e m31b4@lhs*) ((lambda (m31bc@lex* m31bd@lab*) ((lambda (m31c0@rib m31c1@r) ((lambda (m31c4@body m31c5@rhs*) (m31ab@build '#f m31bc@lex* m31c5@rhs* m31c4@body)) (m2eee@chi-internal (m2c97@add-subst m31c0@rib (cons m31b6@b m31b7@b*)) m31c1@r m31aa@mr) (m2ed4@chi-expr* (map (lambda (m31c8@x) (m2c97@add-subst m31c0@rib m31c8@x)) m31b5@rhs*) m31c1@r m31aa@mr))) (m2c66@make-full-rib m31b4@lhs* m31bd@lab*) (m2e4a@add-lexicals m31bd@lab* m31bc@lex* m31a9@r))) (map m2c2b@gen-lexical m31b4@lhs*) (map m2c2f@gen-label m31b4@lhs*)))) m31b2@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m31b0@t))) (m2eb6@syntax-dispatch m31b0@t '(_ #(each (any any)) any . each-any)))) m31a8@e))) (set! m2e4e@letrec-transformer (lambda (m31ca@e m31cb@r m31cc@mr) (m2e4c@letrec-helper m31ca@e m31cb@r m31cc@mr m2c0c@m2b7d@build-letrec))) (set! m2e50@letrec*-transformer (lambda (m31d0@e m31d1@r m31d2@mr) (m2e4c@letrec-helper m31d0@e m31d1@r m31d2@mr m2c0d@m2b7f@build-letrec*))) (set! m2e52@fluid-let-syntax-transformer (lambda (m31d6@e m31d7@r m31d8@mr) ((lambda (m31dd@lookup) (begin (set! m31dd@lookup (lambda (m31f0@x) (or (m2cc5@id->label m31f0@x) (m2f9f@syntax-violation '#f '"unbound identifier" m31d6@e m31f0@x)))) ((lambda (m31de@t) ((lambda (m31e0@ls/false) (if m31e0@ls/false (apply (lambda (m31e2@lhs* m31e3@rhs* m31e4@b m31e5@b*) (if (not (m2cb5@valid-bound-ids? m31e2@lhs*)) (m2e70@invalid-fmls-error m31d6@e m31e2@lhs*) ((lambda (m31ea@lab* m31eb@rhs*) (m2eee@chi-internal (cons m31e4@b m31e5@b*) (append (map cons m31ea@lab* m31eb@rhs*) m31d7@r) (append (map cons m31ea@lab* m31eb@rhs*) m31d8@mr))) (map m31dd@lookup m31e2@lhs*) (map (lambda (m31ee@x) (m2ce9@make-eval-transformer (m2f13@expand-transformer m31ee@x m31d8@mr))) m31e3@rhs*)))) m31e0@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m31de@t))) (m2eb6@syntax-dispatch m31de@t '(_ #(each (any any)) any . each-any)))) m31d6@e))) '#f))) (set! m2e54@type-descriptor-transformer (lambda (m31f2@e m31f3@r m31f4@mr) ((lambda (m31f8@t) ((lambda (m31fa@ls/false) (if (and m31fa@ls/false (apply (lambda (m31fc@id) (m2cab@id? m31fc@id)) m31fa@ls/false)) (apply (lambda (m31fe@id) ((lambda (m3200@lab) ((lambda (m3202@b) ((lambda (m3204@type) ((lambda () (begin (if (not m3200@lab) (m2cd1@raise-unbound-error m31fe@id) (void)) (if (not (and (eq? m3204@type '$rtd) (not (list? (m2ccf@binding-value m3202@b))))) (m2f9f@syntax-violation '#f '"not a record type" m31f2@e) (void)) (list 'quote (m2ccf@binding-value m3202@b)))))) (m2ccd@binding-type m3202@b))) (m2cc9@label->binding m3200@lab m31f3@r))) (m2cc5@id->label m31fe@id))) m31fa@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m31f8@t))) (m2eb6@syntax-dispatch m31f8@t '(_ any)))) m31f2@e))) (set! m2e56@record-type-descriptor-transformer (lambda (m3206@e m3207@r m3208@mr) ((lambda (m320c@t) ((lambda (m320e@ls/false) (if (and m320e@ls/false (apply (lambda (m3210@id) (m2cab@id? m3210@id)) m320e@ls/false)) (apply (lambda (m3212@id) ((lambda (m3214@lab) ((lambda (m3216@b) ((lambda (m3218@type) ((lambda () (begin (if (not m3214@lab) (m2cd1@raise-unbound-error m3212@id) (void)) (if (not (and (eq? m3218@type '$rtd) (list? (m2ccf@binding-value m3216@b)))) (m2f9f@syntax-violation '#f '"not a record type" m3206@e) (void)) (m2ed8@chi-expr (car (m2ccf@binding-value m3216@b)) m3207@r m3208@mr))))) (m2ccd@binding-type m3216@b))) (m2cc9@label->binding m3214@lab m3207@r))) (m2cc5@id->label m3212@id))) m320e@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m320c@t))) (m2eb6@syntax-dispatch m320c@t '(_ any)))) m3206@e))) (set! m2e58@record-constructor-descriptor-transformer (lambda (m321a@e m321b@r m321c@mr) ((lambda (m3220@t) ((lambda (m3222@ls/false) (if (and m3222@ls/false (apply (lambda (m3224@id) (m2cab@id? m3224@id)) m3222@ls/false)) (apply (lambda (m3226@id) ((lambda (m3228@lab) ((lambda (m322a@b) ((lambda (m322c@type) ((lambda () (begin (if (not m3228@lab) (m2cd1@raise-unbound-error m3226@id) (void)) (if (not (and (eq? m322c@type '$rtd) (list? (m2ccf@binding-value m322a@b)))) (m2f9f@syntax-violation '#f '"invalid type" m321a@e) (void)) (m2ed8@chi-expr (cadr (m2ccf@binding-value m322a@b)) m321b@r m321c@mr))))) (m2ccd@binding-type m322a@b))) (m2cc9@label->binding m3228@lab m321b@r))) (m2cc5@id->label m3226@id))) m3222@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3220@t))) (m2eb6@syntax-dispatch m3220@t '(_ any)))) m321a@e))) (set! m2e5a@when-macro (lambda (m322e@e) ((lambda (m3230@t) ((lambda (m3232@ls/false) (if m3232@ls/false (apply (lambda (m3234@test m3235@e m3236@e*) (m2e6c@bless (list 'if m3234@test (cons 'begin (cons m3235@e m3236@e*))))) m3232@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3230@t))) (m2eb6@syntax-dispatch m3230@t '(_ any any . each-any)))) m322e@e))) (set! m2e5c@unless-macro (lambda (m323a@e) ((lambda (m323c@t) ((lambda (m323e@ls/false) (if m323e@ls/false (apply (lambda (m3240@test m3241@e m3242@e*) (m2e6c@bless (list 'if (list 'not m3240@test) (cons 'begin (cons m3241@e m3242@e*))))) m323e@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m323c@t))) (m2eb6@syntax-dispatch m323c@t '(_ any any . each-any)))) m323a@e))) (set! m2e5e@if-transformer (lambda (m3246@e m3247@r m3248@mr) ((lambda (m324c@t) ((lambda (m324e@ls/false) (if m324e@ls/false (apply (lambda (m3250@e0 m3251@e1 m3252@e2) (list 'if (m2ed8@chi-expr m3250@e0 m3247@r m3248@mr) (m2ed8@chi-expr m3251@e1 m3247@r m3248@mr) (m2ed8@chi-expr m3252@e2 m3247@r m3248@mr))) m324e@ls/false) ((lambda (m3256@t) ((lambda (m3258@ls/false) (if m3258@ls/false (apply (lambda (m325a@e0 m325b@e1) (list 'if (m2ed8@chi-expr m325a@e0 m3247@r m3248@mr) (m2ed8@chi-expr m325b@e1 m3247@r m3248@mr) (m2c0b@m2b7b@build-void))) m3258@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3256@t))) (m2eb6@syntax-dispatch m3256@t '(_ any any)))) m324c@t))) (m2eb6@syntax-dispatch m324c@t '(_ any any any)))) m3246@e))) (set! m2e60@and-transformer (lambda (m325e@e m325f@r m3260@mr) ((lambda (m3264@t) ((lambda (m3266@ls/false) (if m3266@ls/false (apply (lambda (m3268@e*) (cons 'and (m2ed4@chi-expr* m3268@e* m325f@r m3260@mr))) m3266@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3264@t))) (m2eb6@syntax-dispatch m3264@t '(_ . each-any)))) m325e@e))) (set! m2e62@or-transformer (lambda (m326a@e m326b@r m326c@mr) ((lambda (m3270@t) ((lambda (m3272@ls/false) (if m3272@ls/false (apply (lambda (m3274@e*) (cons 'or (m2ed4@chi-expr* m3274@e* m326b@r m326c@mr))) m3272@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3270@t))) (m2eb6@syntax-dispatch m3270@t '(_ . each-any)))) m326a@e))) (set! m2e64@case-macro (lambda (m3276@e) ((lambda (m3279@build-last m327b@build-one) (begin (set! m3279@build-last (lambda (m32a0@cls) ((lambda (m32a2@t) ((lambda (m32a4@ls/false) (if m32a4@ls/false (apply (lambda (m32a6@e m32a7@e*) (cons 'begin (cons m32a6@e m32a7@e*))) m32a4@ls/false) ((lambda (m32aa@t) ((lambda (m32ac@ls/false) (if m32ac@ls/false (apply (lambda () (m327b@build-one m32a0@cls '(if #f #f))) m32ac@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m32aa@t))) (m2eb6@syntax-dispatch m32aa@t '_))) m32a2@t))) (m2eb6@syntax-dispatch m32a2@t '(#(scheme-id else) any . each-any)))) m32a0@cls))) (set! m327b@build-one (lambda (m3292@cls m3293@k) ((lambda (m3296@t) ((lambda (m3298@ls/false) (if m3298@ls/false (apply (lambda (m329a@d* m329b@e m329c@e*) (list 'if (list 'memv 't (list 'quote m329a@d*)) (cons 'begin (cons m329b@e m329c@e*)) m3293@k)) m3298@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3296@t))) (m2eb6@syntax-dispatch m3296@t '(each-any any . each-any)))) m3292@cls))) ((lambda (m327c@t) ((lambda (m327e@ls/false) (if m327e@ls/false (apply (lambda (m3280@expr) (m2e6c@bless (cons 'let (cons (list (list 't m3280@expr)) '((if #f #f)))))) m327e@ls/false) ((lambda (m3282@t) ((lambda (m3284@ls/false) (if m3284@ls/false (apply (lambda (m3286@expr m3287@cls m3288@cls*) (m2e6c@bless (list 'let (list (list 't m3286@expr)) ((letrec ((m328c@f (lambda (m328e@cls m328f@cls*) (if (null? m328f@cls*) (m3279@build-last m328e@cls) (m327b@build-one m328e@cls (m328c@f (car m328f@cls*) (cdr m328f@cls*))))))) m328c@f) m3287@cls m3288@cls*)))) m3284@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3282@t))) (m2eb6@syntax-dispatch m3282@t '(_ any any . each-any)))) m327c@t))) (m2eb6@syntax-dispatch m327c@t '(_ any)))) m3276@e))) '#f '#f))) (set! m2e66@quote-transformer (lambda (m32ae@e m32af@r m32b0@mr) ((lambda (m32b4@t) ((lambda (m32b6@ls/false) (if m32b6@ls/false (apply (lambda (m32b8@datum) (list 'quote (m2cc1@stx->datum m32b8@datum))) m32b6@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m32b4@t))) (m2eb6@syntax-dispatch m32b4@t '(_ any)))) m32ae@e))) (set! m2e68@case-lambda-transformer (lambda (m32ba@e m32bb@r m32bc@mr) ((lambda (m32c0@t) ((lambda (m32c2@ls/false) (if m32c2@ls/false (apply (lambda (m32c4@fmls* m32c5@b* m32c6@b**) (call-with-values (lambda () (m2ee0@chi-lambda-clause* m32ba@e m32c4@fmls* (map cons m32c5@b* m32c6@b**) m32bb@r m32bc@mr)) (lambda (m32ce@m32cb m32cf@m32cd) ((lambda (m32d2@body* m32d3@fmls*) (m2c08@m2b49@build-case-lambda '#f m32d3@fmls* m32d2@body*)) m32cf@m32cd m32ce@m32cb)))) m32c2@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m32c0@t))) (m2eb6@syntax-dispatch m32c0@t '(_ . #(each (any any . each-any)))))) m32ba@e))) (set! m2e6a@lambda-transformer (lambda (m32d6@e m32d7@r m32d8@mr) ((lambda (m32dc@t) ((lambda (m32de@ls/false) (if m32de@ls/false (apply (lambda (m32e0@fmls m32e1@b m32e2@b*) (call-with-values (lambda () (m2ede@chi-lambda-clause m32d6@e m32e0@fmls (cons m32e1@b m32e2@b*) m32d7@r m32d8@mr)) (lambda (m32ea@m32e7 m32eb@m32e9) ((lambda (m32ee@body m32ef@fmls) (m2c07@m2b47@build-lambda '#f m32ef@fmls m32ee@body)) m32eb@m32e9 m32ea@m32e7)))) m32de@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m32dc@t))) (m2eb6@syntax-dispatch m32dc@t '(_ any any . each-any)))) m32d6@e))) (set! m2e6c@bless (lambda (m32f2@x) (m2c93@mkstx ((letrec ((m32f4@f (lambda (m32f6@x) (if (m2c73@stx? m32f6@x) m32f6@x (if (pair? m32f6@x) (cons (m32f4@f (car m32f6@x)) (m32f4@f (cdr m32f6@x))) (if (symbol? m32f6@x) (m2e40@scheme-stx m32f6@x) (if (vector? m32f6@x) (vector-map m32f4@f m32f6@x) m32f6@x))))))) m32f4@f) m32f2@x) '() '() '()))) (set! m2e6e@with-syntax-macro (lambda (m32f8@e) ((lambda (m32fa@t) ((lambda (m32fc@ls/false) (if m32fc@ls/false (apply (lambda (m32fe@pat* m32ff@expr* m3300@b m3301@b*) ((lambda (m3306@idn*) (begin (m2edc@verify-formals (map car m3306@idn*) m32f8@e) ((lambda (m3308@t*) (m2e6c@bless (list 'let (map list m3308@t* m32ff@expr*) ((letrec ((m330a@f (lambda (m330c@pat* m330d@t*) (if (null? m330c@pat*) (cons 'begin (cons '#f (cons m3300@b m3301@b*))) (list 'syntax-case (car m330d@t*) '() (list (car m330c@pat*) (m330a@f (cdr m330c@pat*) (cdr m330d@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car m330c@pat*)) (car m330d@t*)))))))) m330a@f) m32fe@pat* m3308@t*)))) (m2f8d@generate-temporaries m32ff@expr*)))) ((letrec ((m3310@f (lambda (m3312@pat*) (if (null? m3312@pat*) '() (call-with-values (lambda () (m2eb4@convert-pattern (car m3312@pat*) '())) (lambda (m3318@m3315 m3319@m3317) ((lambda (m331c@idn* m331d@pat) (append m331c@idn* (m3310@f (cdr m3312@pat*)))) m3319@m3317 m3318@m3315))))))) m3310@f) m32fe@pat*))) m32fc@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m32fa@t))) (m2eb6@syntax-dispatch m32fa@t '(_ #(each (any any)) any . each-any)))) m32f8@e))) (set! m2e70@invalid-fmls-error (lambda (m3320@stx m3321@fmls) ((lambda (m3324@t) ((lambda (m3326@ls/false) (if m3326@ls/false (apply (lambda (m3328@id* m3329@last) ((letrec ((m332c@f (lambda (m332e@id*) (if (null? m332e@id*) (values) (if (not (m2cab@id? (car m332e@id*))) (m2f9f@syntax-violation '#f '"not an identifier" m3320@stx (car m332e@id*)) (begin (m332c@f (cdr m332e@id*)) (if (m2cb9@bound-id-member? (car m332e@id*) (cdr m332e@id*)) (m2f9f@syntax-violation '#f '"duplicate binding" m3320@stx (car m332e@id*)) (void)))))))) m332c@f) (if (m2cab@id? m3329@last) (cons m3329@last m3328@id*) (if (m2ca1@syntax-null? m3329@last) m3328@id* (m2f9f@syntax-violation '#f '"not an identifier" m3320@stx m3329@last))))) m3326@ls/false) ((lambda (m3330@t) ((lambda (m3332@ls/false) (if m3332@ls/false (apply (lambda () (m2f9f@syntax-violation '#f '"malformed binding form" m3320@stx m3321@fmls)) m3332@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3330@t))) (m2eb6@syntax-dispatch m3330@t '_))) m3324@t))) (m2eb6@syntax-dispatch m3324@t '#(each+ any () any)))) m3321@fmls))) (set! m2e72@let-macro (lambda (m3334@stx) ((lambda (m3336@t) ((lambda (m3338@ls/false) (if m3338@ls/false (apply (lambda (m333a@lhs* m333b@rhs* m333c@b m333d@b*) (if (m2cb5@valid-bound-ids? m333a@lhs*) (m2e6c@bless (cons (cons 'lambda (cons m333a@lhs* (cons m333c@b m333d@b*))) m333b@rhs*)) (m2e70@invalid-fmls-error m3334@stx m333a@lhs*))) m3338@ls/false) ((lambda (m3342@t) ((lambda (m3344@ls/false) (if (and m3344@ls/false (apply (lambda (m3346@f m3347@lhs* m3348@rhs* m3349@b m334a@b*) (m2cab@id? m3346@f)) m3344@ls/false)) (apply (lambda (m3350@f m3351@lhs* m3352@rhs* m3353@b m3354@b*) (if (m2cb5@valid-bound-ids? m3351@lhs*) (m2e6c@bless (cons (list 'letrec (list (list m3350@f (cons 'lambda (cons m3351@lhs* (cons m3353@b m3354@b*))))) m3350@f) m3352@rhs*)) (m2e70@invalid-fmls-error m3334@stx m3351@lhs*))) m3344@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3342@t))) (m2eb6@syntax-dispatch m3342@t '(_ any #(each (any any)) any . each-any)))) m3336@t))) (m2eb6@syntax-dispatch m3336@t '(_ #(each (any any)) any . each-any)))) m3334@stx))) (set! m2e74@let-values-macro (lambda (m335a@stx) ((lambda (m335d@rename m335f@rename*) (begin (set! m335d@rename (lambda (m33c2@x m33c3@old* m33c4@new*) (begin (if (not (m2cab@id? m33c2@x)) (m2f9f@syntax-violation '#f '"not an indentifier" m335a@stx m33c2@x) (void)) (if (m2cb9@bound-id-member? m33c2@x m33c3@old*) (m2f9f@syntax-violation '#f '"duplicate binding" m335a@stx m33c2@x) (void)) ((lambda (m33c8@y) (values m33c8@y (cons m33c2@x m33c3@old*) (cons m33c8@y m33c4@new*))) (gensym (m2fa5@syntax->datum m33c2@x)))))) (set! m335f@rename* (lambda (m33b0@x* m33b1@old* m33b2@new*) (if (null? m33b0@x*) (values '() m33b1@old* m33b2@new*) (call-with-values (lambda () (m335d@rename (car m33b0@x*) m33b1@old* m33b2@new*)) (lambda (m33b6@x m33b7@old* m33b8@new*) (call-with-values (lambda () (m335f@rename* (cdr m33b0@x*) m33b7@old* m33b8@new*)) (lambda (m33bc@x* m33bd@old* m33be@new*) (values (cons m33b6@x m33bc@x*) m33bd@old* m33be@new*)))))))) ((lambda (m3360@t) ((lambda (m3362@ls/false) (if m3362@ls/false (apply (lambda (m3364@b m3365@b*) (cons* (m2e6c@bless 'let) '() m3364@b m3365@b*)) m3362@ls/false) ((lambda (m3368@t) ((lambda (m336a@ls/false) (if m336a@ls/false (apply (lambda (m336c@lhs* m336d@rhs* m336e@b m336f@b*) (m2e6c@bless ((letrec ((m3374@f (lambda (m3376@lhs* m3377@rhs* m3378@old* m3379@new*) (if (null? m3376@lhs*) (cons 'let (cons (map list m3378@old* m3379@new*) (cons m336e@b m336f@b*))) ((lambda (m337e@t) ((lambda (m3380@ls/false) (if m3380@ls/false (apply (lambda (m3382@x*) (call-with-values (lambda () (m335f@rename* m3382@x* m3378@old* m3379@new*)) (lambda (m338a@m3385 m338b@m3387 m338c@m3389) ((lambda (m3390@new* m3391@old* m3392@y*) (list 'call-with-values (list 'lambda '() (car m3377@rhs*)) (list 'lambda m3392@y* (m3374@f (cdr m3376@lhs*) (cdr m3377@rhs*) m3391@old* m3390@new*)))) m338c@m3389 m338b@m3387 m338a@m3385)))) m3380@ls/false) ((lambda (m3396@t) ((lambda (m3398@ls/false) (if m3398@ls/false (apply (lambda (m339a@x* m339b@x) (call-with-values (lambda () (m335d@rename m339b@x m3378@old* m3379@new*)) (lambda (m339e@y m339f@old* m33a0@new*) (call-with-values (lambda () (m335f@rename* m339a@x* m339f@old* m33a0@new*)) (lambda (m33a4@y* m33a5@old* m33a6@new*) (list 'call-with-values (list 'lambda '() (car m3377@rhs*)) (list 'lambda (append m33a4@y* m339e@y) (m3374@f (cdr m3376@lhs*) (cdr m3377@rhs*) m33a5@old* m33a6@new*)))))))) m3398@ls/false) ((lambda (m33aa@t) ((lambda (m33ac@ls/false) (if m33ac@ls/false (apply (lambda (m33ae@others) (m2f9f@syntax-violation '#f '"malformed bindings" m335a@stx m33ae@others)) m33ac@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m33aa@t))) (m2eb6@syntax-dispatch m33aa@t 'any))) m3396@t))) (m2eb6@syntax-dispatch m3396@t '#(each+ any () any)))) m337e@t))) (m2eb6@syntax-dispatch m337e@t 'each-any))) (car m3376@lhs*)))))) m3374@f) m336c@lhs* m336d@rhs* '() '()))) m336a@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3368@t))) (m2eb6@syntax-dispatch m3368@t '(_ #(each (any any)) any . each-any)))) m3360@t))) (m2eb6@syntax-dispatch m3360@t '(_ () any . each-any)))) m335a@stx))) '#f '#f))) (set! m2e76@let*-values-macro (lambda (m33ca@stx) ((lambda (m33cd@check) (begin (set! m33cd@check (lambda (m33fc@x*) (if (not (null? m33fc@x*)) ((lambda (m33fe@x) (begin (if (not (m2cab@id? m33fe@x)) (m2f9f@syntax-violation '#f '"not an identifier" m33ca@stx m33fe@x) (void)) (m33cd@check (cdr m33fc@x*)) (if (m2cb9@bound-id-member? m33fe@x (cdr m33fc@x*)) (m2f9f@syntax-violation '#f '"duplicate identifier" m33ca@stx m33fe@x) (void)))) (car m33fc@x*)) (void)))) ((lambda (m33ce@t) ((lambda (m33d0@ls/false) (if m33d0@ls/false (apply (lambda (m33d2@b m33d3@b*) (cons* (m2e6c@bless 'let) '() m33d2@b m33d3@b*)) m33d0@ls/false) ((lambda (m33d6@t) ((lambda (m33d8@ls/false) (if m33d8@ls/false (apply (lambda (m33da@lhs* m33db@rhs* m33dc@b m33dd@b*) (m2e6c@bless ((letrec ((m33e2@f (lambda (m33e4@lhs* m33e5@rhs*) (if (null? m33e4@lhs*) (cons 'begin (cons m33dc@b m33dd@b*)) ((lambda (m33e8@t) ((lambda (m33ea@ls/false) (if m33ea@ls/false (apply (lambda (m33ec@x*) (begin (m33cd@check m33ec@x*) (list 'call-with-values (list 'lambda '() (car m33e5@rhs*)) (list 'lambda m33ec@x* (m33e2@f (cdr m33e4@lhs*) (cdr m33e5@rhs*)))))) m33ea@ls/false) ((lambda (m33ee@t) ((lambda (m33f0@ls/false) (if m33f0@ls/false (apply (lambda (m33f2@x* m33f3@x) (begin (m33cd@check (cons m33f3@x m33f2@x*)) (list 'call-with-values (list 'lambda '() (car m33e5@rhs*)) (list 'lambda (append m33f2@x* m33f3@x) (m33e2@f (cdr m33e4@lhs*) (cdr m33e5@rhs*)))))) m33f0@ls/false) ((lambda (m33f6@t) ((lambda (m33f8@ls/false) (if m33f8@ls/false (apply (lambda (m33fa@others) (m2f9f@syntax-violation '#f '"malformed bindings" m33ca@stx m33fa@others)) m33f8@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m33f6@t))) (m2eb6@syntax-dispatch m33f6@t 'any))) m33ee@t))) (m2eb6@syntax-dispatch m33ee@t '#(each+ any () any)))) m33e8@t))) (m2eb6@syntax-dispatch m33e8@t 'each-any))) (car m33e4@lhs*)))))) m33e2@f) m33da@lhs* m33db@rhs*))) m33d8@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m33d6@t))) (m2eb6@syntax-dispatch m33d6@t '(_ #(each (any any)) any . each-any)))) m33ce@t))) (m2eb6@syntax-dispatch m33ce@t '(_ () any . each-any)))) m33ca@stx))) '#f))) (set! m2e78@trace-lambda-macro (lambda (m3400@stx) ((lambda (m3402@t) ((lambda (m3404@ls/false) (if m3404@ls/false (apply (lambda (m3406@who m3407@fmls m3408@b m3409@b*) (if (m2cb5@valid-bound-ids? m3407@fmls) (m2e6c@bless (list 'make-traced-procedure (list 'quote m3406@who) (cons 'lambda (cons m3407@fmls (cons m3408@b m3409@b*))))) (m2e70@invalid-fmls-error m3400@stx m3407@fmls))) m3404@ls/false) ((lambda (m340e@t) ((lambda (m3410@ls/false) (if m3410@ls/false (apply (lambda (m3412@who m3413@fmls m3414@last m3415@b m3416@b*) (if (m2cb5@valid-bound-ids? (cons m3414@last m3413@fmls)) (m2e6c@bless (list 'make-traced-procedure (list 'quote m3412@who) (cons 'lambda (cons (append m3413@fmls m3414@last) (cons m3415@b m3416@b*))))) (m2e70@invalid-fmls-error m3400@stx (append m3413@fmls m3414@last)))) m3410@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m340e@t))) (m2eb6@syntax-dispatch m340e@t '(_ any #(each+ any () any) any . each-any)))) m3402@t))) (m2eb6@syntax-dispatch m3402@t '(_ any each-any any . each-any)))) m3400@stx))) (set! m2e7a@trace-define-macro (lambda (m341c@stx) ((lambda (m341e@t) ((lambda (m3420@ls/false) (if m3420@ls/false (apply (lambda (m3422@who m3423@fmls m3424@b m3425@b*) (if (m2cb5@valid-bound-ids? m3423@fmls) (m2e6c@bless (list 'define m3422@who (list 'make-traced-procedure (list 'quote m3422@who) (cons 'lambda (cons m3423@fmls (cons m3424@b m3425@b*)))))) (m2e70@invalid-fmls-error m341c@stx m3423@fmls))) m3420@ls/false) ((lambda (m342a@t) ((lambda (m342c@ls/false) (if m342c@ls/false (apply (lambda (m342e@who m342f@fmls m3430@last m3431@b m3432@b*) (if (m2cb5@valid-bound-ids? (cons m3430@last m342f@fmls)) (m2e6c@bless (list 'define m342e@who (list 'make-traced-procedure (list 'quote m342e@who) (cons 'lambda (cons (append m342f@fmls m3430@last) (cons m3431@b m3432@b*)))))) (m2e70@invalid-fmls-error m341c@stx (append m342f@fmls m3430@last)))) m342c@ls/false) ((lambda (m3438@t) ((lambda (m343a@ls/false) (if m343a@ls/false (apply (lambda (m343c@who m343d@expr) (if (m2cab@id? m343c@who) (m2e6c@bless (list 'define m343c@who (list 'let (list (list 'v m343d@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote m343c@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (m2f9f@syntax-violation '#f '"invalid name" m341c@stx))) m343a@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3438@t))) (m2eb6@syntax-dispatch m3438@t '(_ any any)))) m342a@t))) (m2eb6@syntax-dispatch m342a@t '(_ (any . #(each+ any () any)) any . each-any)))) m341e@t))) (m2eb6@syntax-dispatch m341e@t '(_ (any . each-any) any . each-any)))) m341c@stx))) (set! m2e7c@trace-define-syntax-macro (lambda (m3440@stx) ((lambda (m3442@t) ((lambda (m3444@ls/false) (if m3444@ls/false (apply (lambda (m3446@who m3447@expr) (if (m2cab@id? m3446@who) (m2e6c@bless (list 'define-syntax m3446@who (list 'make-traced-macro (list 'quote m3446@who) m3447@expr))) (m2f9f@syntax-violation '#f '"invalid name" m3440@stx))) m3444@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3442@t))) (m2eb6@syntax-dispatch m3442@t '(_ any any)))) m3440@stx))) (set! m2e7e@trace-let/rec-syntax (lambda (m344a@who) (lambda (m344c@stx) ((lambda (m344e@t) ((lambda (m3450@ls/false) (if m3450@ls/false (apply (lambda (m3452@lhs* m3453@rhs* m3454@b m3455@b*) (if (m2cb5@valid-bound-ids? m3452@lhs*) ((lambda (m345a@rhs*) (m2e6c@bless (cons m344a@who (cons (map list m3452@lhs* m345a@rhs*) (cons m3454@b m3455@b*))))) (map (lambda (m345c@lhs m345d@rhs) (list 'make-traced-macro (list 'quote m345c@lhs) m345d@rhs)) m3452@lhs* m3453@rhs*)) (m2e70@invalid-fmls-error m344c@stx m3452@lhs*))) m3450@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m344e@t))) (m2eb6@syntax-dispatch m344e@t '(_ #(each (any any)) any . each-any)))) m344c@stx)))) (set! m2e80@trace-let-syntax-macro (m2e7e@trace-let/rec-syntax 'let-syntax)) (set! m2e82@trace-letrec-syntax-macro (m2e7e@trace-let/rec-syntax 'letrec-syntax)) (set! m2e84@guard-macro (lambda (m3460@x) ((lambda (m3463@gen-clauses) (begin (set! m3463@gen-clauses (lambda (m347a@con m347b@outerk m347c@clause*) ((lambda (m3481@f m3483@f*) (begin (set! m3481@f (lambda (m34ba@x m34bb@k) ((lambda (m34be@t) ((lambda (m34c0@ls/false) (if m34c0@ls/false (apply (lambda (m34c2@e m34c3@p) ((lambda (m34c6@t) (list 'let (list (list m34c6@t m34c2@e)) (list 'if m34c6@t (list m34c3@p m34c6@t) m34bb@k))) (gensym))) m34c0@ls/false) ((lambda (m34c8@t) ((lambda (m34ca@ls/false) (if m34ca@ls/false (apply (lambda (m34cc@e) ((lambda (m34ce@t) (list 'let (list (list m34ce@t m34cc@e)) (list 'if m34ce@t m34ce@t m34bb@k))) (gensym))) m34ca@ls/false) ((lambda (m34d0@t) ((lambda (m34d2@ls/false) (if m34d2@ls/false (apply (lambda (m34d4@e m34d5@v m34d6@v*) (list 'if m34d4@e (cons 'begin (cons m34d5@v m34d6@v*)) m34bb@k)) m34d2@ls/false) ((lambda (m34da@t) ((lambda (m34dc@ls/false) (if m34dc@ls/false (apply (lambda () (m2f9f@syntax-violation '#f '"invalid guard clause" m34ba@x)) m34dc@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m34da@t))) (m2eb6@syntax-dispatch m34da@t '_))) m34d0@t))) (m2eb6@syntax-dispatch m34d0@t '(any any . each-any)))) m34c8@t))) (m2eb6@syntax-dispatch m34c8@t '(any)))) m34be@t))) (m2eb6@syntax-dispatch m34be@t '(any #(scheme-id =>) any)))) m34ba@x))) (set! m3483@f* (lambda (m3490@x*) ((lambda (m3492@t) ((lambda (m3494@ls/false) (if m3494@ls/false (apply (lambda () ((lambda (m3496@g) (values (list m3496@g (list 'lambda '() (list 'raise-continuable m347a@con))) m3496@g)) (gensym))) m3494@ls/false) ((lambda (m3498@t) ((lambda (m349a@ls/false) (if m349a@ls/false (apply (lambda (m349c@e m349d@e*) (values (cons 'begin (cons m349c@e m349d@e*)) '#f)) m349a@ls/false) ((lambda (m34a0@t) ((lambda (m34a2@ls/false) (if m34a2@ls/false (apply (lambda (m34a4@cls m34a5@cls*) (call-with-values (lambda () (m3483@f* m34a5@cls*)) (lambda (m34ac@m34a9 m34ad@m34ab) ((lambda (m34b0@g m34b1@e) (values (m3481@f m34a4@cls m34b1@e) m34b0@g)) m34ad@m34ab m34ac@m34a9)))) m34a2@ls/false) ((lambda (m34b4@t) ((lambda (m34b6@ls/false) (if m34b6@ls/false (apply (lambda (m34b8@others) (m2f9f@syntax-violation '#f '"invalid guard clause" m34b8@others)) m34b6@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m34b4@t))) (m2eb6@syntax-dispatch m34b4@t 'any))) m34a0@t))) (m2eb6@syntax-dispatch m34a0@t '(any . any)))) m3498@t))) (m2eb6@syntax-dispatch m3498@t '((#(scheme-id else) any . each-any))))) m3492@t))) (m2eb6@syntax-dispatch m3492@t '()))) m3490@x*))) (call-with-values (lambda () (m3483@f* m347c@clause*)) (lambda (m3488@m3485 m3489@m3487) ((lambda (m348c@raisek m348d@code) (if m348c@raisek (list (list 'call/cc (list 'lambda (list m348c@raisek) (list m347b@outerk (list 'lambda '() m348d@code))))) (list m347b@outerk (list 'lambda '() m348d@code)))) m3489@m3487 m3488@m3485))))) '#f '#f))) ((lambda (m3464@t) ((lambda (m3466@ls/false) (if (and m3466@ls/false (apply (lambda (m3468@con m3469@clause* m346a@b m346b@b*) (m2cab@id? m3468@con)) m3466@ls/false)) (apply (lambda (m3470@con m3471@clause* m3472@b m3473@b*) ((lambda (m3478@outerk) (m2e6c@bless (list (list 'call/cc (list 'lambda (list m3478@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list m3470@con) (m3463@gen-clauses m3470@con m3478@outerk m3471@clause*)) (cons 'lambda (cons '() (cons m3472@b m3473@b*)))))))))) (gensym))) m3466@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3464@t))) (m2eb6@syntax-dispatch m3464@t '(_ (any . each-any) any . each-any)))) m3460@x))) '#f))) (set! m2e86@define-enumeration-macro (lambda (m34de@stx) ((lambda (m34e1@set? m34e3@remove-dups) (begin (set! m34e1@set? (lambda (m34fa@x) (or (null? m34fa@x) (and (not (memq (car m34fa@x) (cdr m34fa@x))) (m34e1@set? (cdr m34fa@x)))))) (set! m34e3@remove-dups (lambda (m34f8@ls) (if (null? m34f8@ls) '() (cons (car m34f8@ls) (m34e3@remove-dups (remq (car m34f8@ls) (cdr m34f8@ls))))))) ((lambda (m34e4@t) ((lambda (m34e6@ls/false) (if (and m34e6@ls/false (apply (lambda (m34e8@name m34e9@id* m34ea@maker) (and (m2cab@id? m34e8@name) (m2cab@id? m34ea@maker) (for-all m2cab@id? m34e9@id*))) m34e6@ls/false)) (apply (lambda (m34ee@name m34ef@id* m34f0@maker) ((lambda (m34f4@name* m34f5@mk) (m2e6c@bless (list 'begin (list 'define m34f5@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote m34f4@name*)))) (list 'define-syntax m34ee@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote m34f4@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote m34ee@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax m34f0@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote m34f0@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote m34f4@name*)) (cons 'syntax-violation (cons (list 'quote m34f0@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons m34f5@mk '('(n* ...)))))))))))) (m34e3@remove-dups (m2fa5@syntax->datum m34ef@id*)) (gensym))) m34e6@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m34e4@t))) (m2eb6@syntax-dispatch m34e4@t '(_ any each-any any)))) m34de@stx))) '#f '#f))) (set! m2e88@time-macro (lambda (m34fc@stx) ((lambda (m34fe@t) ((lambda (m3500@ls/false) (if m3500@ls/false (apply (lambda (m3502@expr) (m2e6c@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() m3502@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) m3500@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m34fe@t))) (m2eb6@syntax-dispatch m34fe@t '(_ any)))) m34fc@stx))) (set! m2e8a@delay-macro (lambda (m3504@stx) ((lambda (m3506@t) ((lambda (m3508@ls/false) (if m3508@ls/false (apply (lambda (m350a@expr) (m2e6c@bless (list 'make-promise (list 'lambda '() m350a@expr)))) m3508@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3506@t))) (m2eb6@syntax-dispatch m3506@t '(_ any)))) m3504@stx))) (set! m2e8c@assert-macro (lambda (m350c@stx) ((lambda (m350e@t) ((lambda (m3510@ls/false) (if m3510@ls/false (apply (lambda (m3512@expr) ((lambda (m3514@pos) (m2e6c@bless (list 'unless m3512@expr (list 'assertion-error (list 'quote m3512@expr) (list 'quote m3514@pos))))) (or (m2f97@expression-position m350c@stx) (m2f97@expression-position m3512@expr)))) m3510@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m350e@t))) (m2eb6@syntax-dispatch m350e@t '(_ any)))) m350c@stx))) (set! m2e8e@endianness-macro (lambda (m3516@stx) ((lambda (m3518@t) ((lambda (m351a@ls/false) (if m351a@ls/false (apply (lambda (m351c@e) ((lambda (m351e@t) (if (memv m351e@t '(little)) (m2e6c@bless ''little) (if (memv m351e@t '(big)) (m2e6c@bless ''big) (m2f9f@syntax-violation '#f '"endianness must be big or little" m3516@stx)))) (m2fa5@syntax->datum m351c@e))) m351a@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3518@t))) (m2eb6@syntax-dispatch m3518@t '(_ any)))) m3516@stx))) (set! m2e90@identifier-syntax-macro (lambda (m3520@stx) ((lambda (m3522@t) ((lambda (m3524@ls/false) (if m3524@ls/false (apply (lambda (m3526@expr) (m2e6c@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax m3526@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax m3526@expr) '((syntax (e* ...)))))))))) m3524@ls/false) ((lambda (m3528@t) ((lambda (m352a@ls/false) (if (and m352a@ls/false (apply (lambda (m352c@id1 m352d@expr1 m352e@id2 m352f@expr2 m3530@expr3) (and (m2cab@id? m352c@id1) (m2cab@id? m352e@id2) (m2cab@id? m352f@expr2))) m352a@ls/false)) (apply (lambda (m3536@id1 m3537@expr1 m3538@id2 m3539@expr2 m353a@expr3) (m2e6c@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax m3537@expr1)) (list (list 'set! 'id m3539@expr2) (list 'syntax m353a@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons m3537@expr1 '(e* ...))))))))) m352a@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3528@t))) (m2eb6@syntax-dispatch m3528@t '(_ (any any) ((#(scheme-id set!) any any) any))))) m3522@t))) (m2eb6@syntax-dispatch m3522@t '(_ any)))) m3520@stx))) (set! m2e92@do-macro (lambda (m3540@stx) ((lambda (m3543@bind) (begin (set! m3543@bind (lambda (m355a@x) ((lambda (m355c@t) ((lambda (m355e@ls/false) (if m355e@ls/false (apply (lambda (m3560@x m3561@init) (list m3560@x m3561@init m3560@x)) m355e@ls/false) ((lambda (m3564@t) ((lambda (m3566@ls/false) (if m3566@ls/false (apply (lambda (m3568@x m3569@init m356a@step) (list m3568@x m3569@init m356a@step)) m3566@ls/false) ((lambda (m356e@t) ((lambda (m3570@ls/false) (if m3570@ls/false (apply (lambda () (m2f9f@syntax-violation '#f '"invalid binding" m3540@stx)) m3570@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m356e@t))) (m2eb6@syntax-dispatch m356e@t '_))) m3564@t))) (m2eb6@syntax-dispatch m3564@t '(any any any)))) m355c@t))) (m2eb6@syntax-dispatch m355c@t '(any any)))) m355a@x))) ((lambda (m3544@t) ((lambda (m3546@ls/false) (if m3546@ls/false (apply (lambda (m3548@binding* m3549@test m354a@expr* m354b@command*) ((lambda (m3550@t) ((lambda (m3552@ls/false) (if m3552@ls/false (apply (lambda (m3554@x* m3555@init* m3556@step*) (if (m2cb5@valid-bound-ids? m3554@x*) (m2e6c@bless (list 'letrec (list (list 'loop (list 'lambda m3554@x* (list 'if m3549@test (cons 'begin (cons '(if #f #f) m354a@expr*)) (cons 'begin (append m354b@command* (list (cons 'loop m3556@step*)))))))) (cons 'loop m3555@init*))) (m2f9f@syntax-violation '#f '"invalid bindings" m3540@stx))) m3552@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3550@t))) (m2eb6@syntax-dispatch m3550@t '#(each (any any any))))) (map m3543@bind m3548@binding*))) m3546@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3544@t))) (m2eb6@syntax-dispatch m3544@t '(_ each-any (any . each-any) . each-any)))) m3540@stx))) '#f))) (set! m2e94@let*-macro (lambda (m3572@stx) ((lambda (m3574@t) ((lambda (m3576@ls/false) (if (and m3576@ls/false (apply (lambda (m3578@lhs* m3579@rhs* m357a@b m357b@b*) (for-all m2cab@id? m3578@lhs*)) m3576@ls/false)) (apply (lambda (m3580@lhs* m3581@rhs* m3582@b m3583@b*) (m2e6c@bless ((letrec ((m3588@f (lambda (m358a@x*) (if (null? m358a@x*) (cons 'let (cons '() (cons m3582@b m3583@b*))) (list 'let (list (car m358a@x*)) (m3588@f (cdr m358a@x*))))))) m3588@f) (map list m3580@lhs* m3581@rhs*)))) m3576@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3574@t))) (m2eb6@syntax-dispatch m3574@t '(_ #(each (any any)) any . each-any)))) m3572@stx))) (set! m2e96@or-macro (lambda (m358c@stx) ((lambda (m358e@t) ((lambda (m3590@ls/false) (if m3590@ls/false (apply (lambda () '#f) m3590@ls/false) ((lambda (m3592@t) ((lambda (m3594@ls/false) (if m3594@ls/false (apply (lambda (m3596@e m3597@e*) (m2e6c@bless ((letrec ((m359a@f (lambda (m359c@e m359d@e*) (if (null? m359d@e*) (list 'begin '#f m359c@e) (list 'let (list (list 't m359c@e)) (list 'if 't 't (m359a@f (car m359d@e*) (cdr m359d@e*)))))))) m359a@f) m3596@e m3597@e*))) m3594@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3592@t))) (m2eb6@syntax-dispatch m3592@t '(_ any . each-any)))) m358e@t))) (m2eb6@syntax-dispatch m358e@t '(_)))) m358c@stx))) (set! m2e98@and-macro (lambda (m35a0@stx) ((lambda (m35a2@t) ((lambda (m35a4@ls/false) (if m35a4@ls/false (apply (lambda () '#t) m35a4@ls/false) ((lambda (m35a6@t) ((lambda (m35a8@ls/false) (if m35a8@ls/false (apply (lambda (m35aa@e m35ab@e*) (m2e6c@bless ((letrec ((m35ae@f (lambda (m35b0@e m35b1@e*) (if (null? m35b1@e*) (list 'begin '#f m35b0@e) (cons 'if (cons m35b0@e (cons (m35ae@f (car m35b1@e*) (cdr m35b1@e*)) '(#f)))))))) m35ae@f) m35aa@e m35ab@e*))) m35a8@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m35a6@t))) (m2eb6@syntax-dispatch m35a6@t '(_ any . each-any)))) m35a2@t))) (m2eb6@syntax-dispatch m35a2@t '(_)))) m35a0@stx))) (set! m2e9a@cond-macro (lambda (m35b4@stx) ((lambda (m35b6@t) ((lambda (m35b8@ls/false) (if m35b8@ls/false (apply (lambda (m35ba@cls m35bb@cls*) (m2e6c@bless ((letrec ((m35be@f (lambda (m35c0@cls m35c1@cls*) (if (null? m35c1@cls*) ((lambda (m35c4@t) ((lambda (m35c6@ls/false) (if m35c6@ls/false (apply (lambda (m35c8@e m35c9@e*) (cons 'begin (cons m35c8@e m35c9@e*))) m35c6@ls/false) ((lambda (m35cc@t) ((lambda (m35ce@ls/false) (if m35ce@ls/false (apply (lambda (m35d0@e m35d1@p) (list 'let (list (list 't m35d0@e)) (list 'if 't (cons m35d1@p '(t))))) m35ce@ls/false) ((lambda (m35d4@t) ((lambda (m35d6@ls/false) (if m35d6@ls/false (apply (lambda (m35d8@e) (cons 'or (cons m35d8@e '((if #f #f))))) m35d6@ls/false) ((lambda (m35da@t) ((lambda (m35dc@ls/false) (if m35dc@ls/false (apply (lambda (m35de@e m35df@e*) (list 'if m35de@e (cons 'begin m35df@e*))) m35dc@ls/false) ((lambda (m35e2@t) ((lambda (m35e4@ls/false) (if m35e4@ls/false (apply (lambda () (m2f9f@syntax-violation '#f '"invalid last clause" m35b4@stx)) m35e4@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m35e2@t))) (m2eb6@syntax-dispatch m35e2@t '_))) m35da@t))) (m2eb6@syntax-dispatch m35da@t '(any . each-any)))) m35d4@t))) (m2eb6@syntax-dispatch m35d4@t '(any)))) m35cc@t))) (m2eb6@syntax-dispatch m35cc@t '(any #(scheme-id =>) any)))) m35c4@t))) (m2eb6@syntax-dispatch m35c4@t '(#(scheme-id else) any . each-any)))) m35c0@cls) ((lambda (m35e6@t) ((lambda (m35e8@ls/false) (if m35e8@ls/false (apply (lambda (m35ea@e m35eb@e*) (m2f9f@syntax-violation '#f '"incorrect position of keyword else" m35b4@stx)) m35e8@ls/false) ((lambda (m35ee@t) ((lambda (m35f0@ls/false) (if m35f0@ls/false (apply (lambda (m35f2@e m35f3@p) (list 'let (list (list 't m35f2@e)) (list 'if 't (cons m35f3@p '(t)) (m35be@f (car m35c1@cls*) (cdr m35c1@cls*))))) m35f0@ls/false) ((lambda (m35f6@t) ((lambda (m35f8@ls/false) (if m35f8@ls/false (apply (lambda (m35fa@e) (list 'or m35fa@e (m35be@f (car m35c1@cls*) (cdr m35c1@cls*)))) m35f8@ls/false) ((lambda (m35fc@t) ((lambda (m35fe@ls/false) (if m35fe@ls/false (apply (lambda (m3600@e m3601@e*) (list 'if m3600@e (cons 'begin m3601@e*) (m35be@f (car m35c1@cls*) (cdr m35c1@cls*)))) m35fe@ls/false) ((lambda (m3604@t) ((lambda (m3606@ls/false) (if m3606@ls/false (apply (lambda () (m2f9f@syntax-violation '#f '"invalid last clause" m35b4@stx)) m3606@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3604@t))) (m2eb6@syntax-dispatch m3604@t '_))) m35fc@t))) (m2eb6@syntax-dispatch m35fc@t '(any . each-any)))) m35f6@t))) (m2eb6@syntax-dispatch m35f6@t '(any)))) m35ee@t))) (m2eb6@syntax-dispatch m35ee@t '(any #(scheme-id =>) any)))) m35e6@t))) (m2eb6@syntax-dispatch m35e6@t '(#(scheme-id else) any . each-any)))) m35c0@cls))))) m35be@f) m35ba@cls m35bb@cls*))) m35b8@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m35b6@t))) (m2eb6@syntax-dispatch m35b6@t '(_ any . each-any)))) m35b4@stx))) (set! m2e9c@do-include (lambda (m3608@stx m3609@id m360a@filename) ((lambda (m360e@filename) (begin (if (not (and (string? m360e@filename) (m2cab@id? m3609@id))) (m2f9f@syntax-violation '#f '"invalid syntax" m3608@stx) (void)) (cons (m2e6c@bless 'begin) (with-input-from-file m360e@filename (lambda () ((letrec ((m3610@f (lambda (m3612@ls) ((lambda (m3614@x) (if (eof-object? m3614@x) (reverse m3612@ls) (m3610@f (cons (m2c89@datum->stx m3609@id m3614@x) m3612@ls)))) (m2848@m2765@read-annotated))))) m3610@f) '())))))) (m2cc1@stx->datum m360a@filename)))) (set! m2e9e@include-macro (lambda (m3616@e) ((lambda (m3618@t) ((lambda (m361a@ls/false) (if m361a@ls/false (apply (lambda (m361c@id m361d@filename) (m2e9c@do-include m3616@e m361c@id m361d@filename)) m361a@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3618@t))) (m2eb6@syntax-dispatch m3618@t '(any any)))) m3616@e))) (set! m2ea0@include-into-macro (lambda (m3620@e) ((lambda (m3622@t) ((lambda (m3624@ls/false) (if m3624@ls/false (apply (lambda (m3626@id m3627@filename) (m2e9c@do-include m3620@e m3626@id m3627@filename)) m3624@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3622@t))) (m2eb6@syntax-dispatch m3622@t '(_ any any)))) m3620@e))) (set! m2ea2@syntax-rules-macro (lambda (m362a@e) ((lambda (m362c@t) ((lambda (m362e@ls/false) (if m362e@ls/false (apply (lambda (m3630@lits m3631@pat* m3632@tmp*) (begin (m2ebc@verify-literals m3630@lits m362a@e) (m2e6c@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons m3630@lits (map (lambda (m3636@pat m3637@tmp) ((lambda (m363a@t) ((lambda (m363c@ls/false) (if m363c@ls/false (apply (lambda (m363e@rest) (list (cons 'g m363e@rest) (list 'syntax m3637@tmp))) m363c@ls/false) ((lambda (m3640@t) ((lambda (m3642@ls/false) (if m3642@ls/false (apply (lambda () (m2f9f@syntax-violation '#f '"invalid syntax-rules pattern" m362a@e m3636@pat)) m3642@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3640@t))) (m2eb6@syntax-dispatch m3640@t '_))) m363a@t))) (m2eb6@syntax-dispatch m363a@t '(_ . any)))) m3636@pat)) m3631@pat* m3632@tmp*)))))))) m362e@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m362c@t))) (m2eb6@syntax-dispatch m362c@t '(_ each-any . #(each (any any)))))) m362a@e))) (set! m2ea4@quasiquote-macro ((lambda () ((lambda (m3645@datum m3661@quasicons* m3663@quasicons m3665@quasiappend m3667@quasivector m3669@vquasi m366b@quasi) (begin (set! m3645@datum (lambda (m3746@x) (list (m2e40@scheme-stx 'quote) (m2c93@mkstx m3746@x '() '() '())))) (set! m3661@quasicons* (lambda (m373e@x m373f@y) ((letrec ((m3742@f (lambda (m3744@x) (if (null? m3744@x) m373f@y (m3663@quasicons (car m3744@x) (m3742@f (cdr m3744@x))))))) m3742@f) m373e@x))) (set! m3663@quasicons (lambda (m3718@x m3719@y) ((lambda (m371c@t) ((lambda (m371e@ls/false) (if m371e@ls/false (apply (lambda (m3720@dy) ((lambda (m3722@t) ((lambda (m3724@ls/false) (if m3724@ls/false (apply (lambda (m3726@dx) (list (m2e40@scheme-stx 'quote) (cons m3726@dx m3720@dy))) m3724@ls/false) ((lambda (m3728@t) ((lambda (m372a@ls/false) (if m372a@ls/false (apply (lambda () ((lambda (m372c@t) ((lambda (m372e@ls/false) (if m372e@ls/false (apply (lambda () (list (m2e40@scheme-stx 'list) m3718@x)) m372e@ls/false) ((lambda (m3730@t) ((lambda (m3732@ls/false) (if m3732@ls/false (apply (lambda () (list (m2e40@scheme-stx 'cons) m3718@x m3719@y)) m3732@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3730@t))) (m2eb6@syntax-dispatch m3730@t '_))) m372c@t))) (m2eb6@syntax-dispatch m372c@t '()))) m3720@dy)) m372a@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3728@t))) (m2eb6@syntax-dispatch m3728@t '_))) m3722@t))) (m2eb6@syntax-dispatch m3722@t '(#(scheme-id quote) any)))) m3718@x)) m371e@ls/false) ((lambda (m3734@t) ((lambda (m3736@ls/false) (if m3736@ls/false (apply (lambda (m3738@stuff) (cons* (m2e40@scheme-stx 'list) m3718@x m3738@stuff)) m3736@ls/false) ((lambda (m373a@t) ((lambda (m373c@ls/false) (if m373c@ls/false (apply (lambda () (list (m2e40@scheme-stx 'cons) m3718@x m3719@y)) m373c@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m373a@t))) (m2eb6@syntax-dispatch m373a@t '_))) m3734@t))) (m2eb6@syntax-dispatch m3734@t '(#(scheme-id list) . each-any)))) m371c@t))) (m2eb6@syntax-dispatch m371c@t '(#(scheme-id quote) any)))) m3719@y))) (set! m3665@quasiappend (lambda (m36fe@x m36ff@y) ((lambda (m3702@ls) (if (null? m3702@ls) (list (m2e40@scheme-stx 'quote) '()) (if (null? (cdr m3702@ls)) (car m3702@ls) (cons* (m2e40@scheme-stx 'append) m3702@ls)))) ((letrec ((m3704@f (lambda (m3706@x) (if (null? m3706@x) ((lambda (m3708@t) ((lambda (m370a@ls/false) (if m370a@ls/false (apply (lambda () '()) m370a@ls/false) ((lambda (m370c@t) ((lambda (m370e@ls/false) (if m370e@ls/false (apply (lambda () (list m36ff@y)) m370e@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m370c@t))) (m2eb6@syntax-dispatch m370c@t '_))) m3708@t))) (m2eb6@syntax-dispatch m3708@t '(#(scheme-id quote) ())))) m36ff@y) ((lambda (m3710@t) ((lambda (m3712@ls/false) (if m3712@ls/false (apply (lambda () (m3704@f (cdr m3706@x))) m3712@ls/false) ((lambda (m3714@t) ((lambda (m3716@ls/false) (if m3716@ls/false (apply (lambda () (cons (car m3706@x) (m3704@f (cdr m3706@x)))) m3716@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3714@t))) (m2eb6@syntax-dispatch m3714@t '_))) m3710@t))) (m2eb6@syntax-dispatch m3710@t '(#(scheme-id quote) ())))) (car m3706@x)))))) m3704@f) m36fe@x)))) (set! m3667@quasivector (lambda (m36cc@x) ((lambda (m36ce@pat-x) ((lambda (m36d0@t) ((lambda (m36d2@ls/false) (if m36d2@ls/false (apply (lambda (m36d4@x*) (list (m2e40@scheme-stx 'quote) (list->vector m36d4@x*))) m36d2@ls/false) ((lambda (m36d6@t) ((lambda (m36d8@ls/false) (if m36d8@ls/false (apply (lambda () ((letrec ((m36da@f (lambda (m36dc@x m36dd@k) ((lambda (m36e0@t) ((lambda (m36e2@ls/false) (if m36e2@ls/false (apply (lambda (m36e4@x*) (m36dd@k (map (lambda (m36e6@x) (list (m2e40@scheme-stx 'quote) m36e6@x)) m36e4@x*))) m36e2@ls/false) ((lambda (m36e8@t) ((lambda (m36ea@ls/false) (if m36ea@ls/false (apply (lambda (m36ec@x*) (m36dd@k m36ec@x*)) m36ea@ls/false) ((lambda (m36ee@t) ((lambda (m36f0@ls/false) (if m36f0@ls/false (apply (lambda (m36f2@x m36f3@y) (m36da@f m36f3@y (lambda (m36f6@ls) (m36dd@k (cons m36f2@x m36f6@ls))))) m36f0@ls/false) ((lambda (m36f8@t) ((lambda (m36fa@ls/false) (if m36fa@ls/false (apply (lambda () (list (m2e40@scheme-stx 'list->vector) m36ce@pat-x)) m36fa@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m36f8@t))) (m2eb6@syntax-dispatch m36f8@t '_))) m36ee@t))) (m2eb6@syntax-dispatch m36ee@t '(#(scheme-id cons) any any)))) m36e8@t))) (m2eb6@syntax-dispatch m36e8@t '(#(scheme-id list) . each-any)))) m36e0@t))) (m2eb6@syntax-dispatch m36e0@t '(#(scheme-id quote) each-any)))) m36dc@x)))) m36da@f) m36cc@x (lambda (m36fc@ls) (cons* (m2e40@scheme-stx 'vector) m36fc@ls)))) m36d8@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m36d6@t))) (m2eb6@syntax-dispatch m36d6@t '_))) m36d0@t))) (m2eb6@syntax-dispatch m36d0@t '(#(scheme-id quote) each-any)))) m36ce@pat-x)) m36cc@x))) (set! m3669@vquasi (lambda (m36aa@p m36ab@lev) ((lambda (m36ae@t) ((lambda (m36b0@ls/false) (if m36b0@ls/false (apply (lambda (m36b2@p m36b3@q) ((lambda (m36b6@t) ((lambda (m36b8@ls/false) (if m36b8@ls/false (apply (lambda (m36ba@p) (if (= m36ab@lev '0) (m3661@quasicons* m36ba@p (m3669@vquasi m36b3@q m36ab@lev)) (m3663@quasicons (m3663@quasicons (m3645@datum 'unquote) (m366b@quasi m36ba@p (- m36ab@lev '1))) (m3669@vquasi m36b3@q m36ab@lev)))) m36b8@ls/false) ((lambda (m36bc@t) ((lambda (m36be@ls/false) (if m36be@ls/false (apply (lambda (m36c0@p) (if (= m36ab@lev '0) (m3665@quasiappend m36c0@p (m3669@vquasi m36b3@q m36ab@lev)) (m3663@quasicons (m3663@quasicons (m3645@datum 'unquote-splicing) (m366b@quasi m36c0@p (- m36ab@lev '1))) (m3669@vquasi m36b3@q m36ab@lev)))) m36be@ls/false) ((lambda (m36c2@t) ((lambda (m36c4@ls/false) (if m36c4@ls/false (apply (lambda (m36c6@p) (m3663@quasicons (m366b@quasi m36c6@p m36ab@lev) (m3669@vquasi m36b3@q m36ab@lev))) m36c4@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m36c2@t))) (m2eb6@syntax-dispatch m36c2@t 'any))) m36bc@t))) (m2eb6@syntax-dispatch m36bc@t '(#(scheme-id unquote-splicing) . each-any)))) m36b6@t))) (m2eb6@syntax-dispatch m36b6@t '(#(scheme-id unquote) . each-any)))) m36b2@p)) m36b0@ls/false) ((lambda (m36c8@t) ((lambda (m36ca@ls/false) (if m36ca@ls/false (apply (lambda () (list (m2e40@scheme-stx 'quote) '())) m36ca@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m36c8@t))) (m2eb6@syntax-dispatch m36c8@t '()))) m36ae@t))) (m2eb6@syntax-dispatch m36ae@t '(any . any)))) m36aa@p))) (set! m366b@quasi (lambda (m3674@p m3675@lev) ((lambda (m3678@t) ((lambda (m367a@ls/false) (if m367a@ls/false (apply (lambda (m367c@p) (if (= m3675@lev '0) m367c@p (m3663@quasicons (m3645@datum 'unquote) (m366b@quasi (list m367c@p) (- m3675@lev '1))))) m367a@ls/false) ((lambda (m367e@t) ((lambda (m3680@ls/false) (if m3680@ls/false (apply (lambda (m3682@p m3683@q) (if (= m3675@lev '0) (m3661@quasicons* m3682@p (m366b@quasi m3683@q m3675@lev)) (m3663@quasicons (m3663@quasicons (m3645@datum 'unquote) (m366b@quasi m3682@p (- m3675@lev '1))) (m366b@quasi m3683@q m3675@lev)))) m3680@ls/false) ((lambda (m3686@t) ((lambda (m3688@ls/false) (if m3688@ls/false (apply (lambda (m368a@p m368b@q) (if (= m3675@lev '0) (m3665@quasiappend m368a@p (m366b@quasi m368b@q m3675@lev)) (m3663@quasicons (m3663@quasicons (m3645@datum 'unquote-splicing) (m366b@quasi m368a@p (- m3675@lev '1))) (m366b@quasi m368b@q m3675@lev)))) m3688@ls/false) ((lambda (m368e@t) ((lambda (m3690@ls/false) (if m3690@ls/false (apply (lambda (m3692@p) (m3663@quasicons (m3645@datum 'quasiquote) (m366b@quasi (list m3692@p) (+ m3675@lev '1)))) m3690@ls/false) ((lambda (m3694@t) ((lambda (m3696@ls/false) (if m3696@ls/false (apply (lambda (m3698@p m3699@q) (m3663@quasicons (m366b@quasi m3698@p m3675@lev) (m366b@quasi m3699@q m3675@lev))) m3696@ls/false) ((lambda (m369c@t) ((lambda (m369e@ls/false) (if (and m369e@ls/false (apply (lambda (m36a0@x) (not (m2c73@stx? m36a0@x))) m369e@ls/false)) (apply (lambda (m36a2@x) (m3667@quasivector (m3669@vquasi m36a2@x m3675@lev))) m369e@ls/false) ((lambda (m36a4@t) ((lambda (m36a6@ls/false) (if m36a6@ls/false (apply (lambda (m36a8@p) (list (m2e40@scheme-stx 'quote) m36a8@p)) m36a6@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m36a4@t))) (m2eb6@syntax-dispatch m36a4@t 'any))) m369c@t))) (m2eb6@syntax-dispatch m369c@t '#(vector each-any)))) m3694@t))) (m2eb6@syntax-dispatch m3694@t '(any . any)))) m368e@t))) (m2eb6@syntax-dispatch m368e@t '(#(scheme-id quasiquote) any)))) m3686@t))) (m2eb6@syntax-dispatch m3686@t '((#(scheme-id unquote-splicing) . each-any) . any)))) m367e@t))) (m2eb6@syntax-dispatch m367e@t '((#(scheme-id unquote) . each-any) . any)))) m3678@t))) (m2eb6@syntax-dispatch m3678@t '(#(scheme-id unquote) any)))) m3674@p))) (lambda (m366c@x) ((lambda (m366e@t) ((lambda (m3670@ls/false) (if m3670@ls/false (apply (lambda (m3672@e) (m366b@quasi m3672@e '0)) m3670@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m366e@t))) (m2eb6@syntax-dispatch m366e@t '(_ any)))) m366c@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! m2ea6@quasisyntax-macro ((lambda () ((lambda (m3749@quasi) (begin (set! m3749@quasi (lambda (m3764@p m3765@lev) ((lambda (m3768@t) ((lambda (m376a@ls/false) (if m376a@ls/false (apply (lambda (m376c@p) (if (= m3765@lev '0) ((lambda (m376e@g) (values (list m376e@g) (list m376c@p) m376e@g)) (gensym)) (call-with-values (lambda () (m3749@quasi m376c@p (- m3765@lev '1))) (lambda (m3776@m3771 m3777@m3773 m3778@m3775) ((lambda (m377c@p m377d@rhs* m377e@lhs*) (values m377e@lhs* m377d@rhs* (list 'unsyntax m377c@p))) m3778@m3775 m3777@m3773 m3776@m3771))))) m376a@ls/false) ((lambda (m3782@t) ((lambda (m3784@ls/false) (if (and m3784@ls/false (apply (lambda () (= m3765@lev '0)) m3784@ls/false)) (apply (lambda () (m2f9f@syntax-violation '#f '"incorrect use of unsyntax" m3764@p)) m3784@ls/false) ((lambda (m3786@t) ((lambda (m3788@ls/false) (if m3788@ls/false (apply (lambda (m378a@p* m378b@q) (call-with-values (lambda () (m3749@quasi m378b@q m3765@lev)) (lambda (m3794@m378f m3795@m3791 m3796@m3793) ((lambda (m379a@q m379b@rhs* m379c@lhs*) (if (= m3765@lev '0) ((lambda (m37a0@g*) (values (append m37a0@g* m379c@lhs*) (append m378a@p* m379b@rhs*) (append m37a0@g* m379a@q))) (map (lambda (m37a2@x) (gensym)) m378a@p*)) (call-with-values (lambda () (m3749@quasi m378a@p* (- m3765@lev '1))) (lambda (m37aa@m37a5 m37ab@m37a7 m37ac@m37a9) ((lambda (m37b0@p* m37b1@rhs2* m37b2@lhs2*) (values (append m37b2@lhs2* m379c@lhs*) (append m37b1@rhs2* m379b@rhs*) (cons (cons 'unsyntax m37b0@p*) m379a@q))) m37ac@m37a9 m37ab@m37a7 m37aa@m37a5))))) m3796@m3793 m3795@m3791 m3794@m378f)))) m3788@ls/false) ((lambda (m37b6@t) ((lambda (m37b8@ls/false) (if m37b8@ls/false (apply (lambda (m37ba@p* m37bb@q) (call-with-values (lambda () (m3749@quasi m37bb@q m3765@lev)) (lambda (m37c4@m37bf m37c5@m37c1 m37c6@m37c3) ((lambda (m37ca@q m37cb@rhs* m37cc@lhs*) (if (= m3765@lev '0) ((lambda (m37d0@g*) (values (append (map (lambda (m37d2@g) (cons m37d2@g '(...))) m37d0@g*) m37cc@lhs*) (append m37ba@p* m37cb@rhs*) (append (apply append (map (lambda (m37d4@g) (cons m37d4@g '(...))) m37d0@g*)) m37ca@q))) (map (lambda (m37d6@x) (gensym)) m37ba@p*)) (call-with-values (lambda () (m3749@quasi m37ba@p* (- m3765@lev '1))) (lambda (m37de@m37d9 m37df@m37db m37e0@m37dd) ((lambda (m37e4@p* m37e5@rhs2* m37e6@lhs2*) (values (append m37e6@lhs2* m37cc@lhs*) (append m37e5@rhs2* m37cb@rhs*) (cons (cons 'unsyntax-splicing m37e4@p*) m37ca@q))) m37e0@m37dd m37df@m37db m37de@m37d9))))) m37c6@m37c3 m37c5@m37c1 m37c4@m37bf)))) m37b8@ls/false) ((lambda (m37ea@t) ((lambda (m37ec@ls/false) (if (and m37ec@ls/false (apply (lambda () (= m3765@lev '0)) m37ec@ls/false)) (apply (lambda () (m2f9f@syntax-violation '#f '"incorrect use of unsyntax-splicing" m3764@p)) m37ec@ls/false) ((lambda (m37ee@t) ((lambda (m37f0@ls/false) (if m37f0@ls/false (apply (lambda (m37f2@p) (call-with-values (lambda () (m3749@quasi m37f2@p (+ m3765@lev '1))) (lambda (m37fa@m37f5 m37fb@m37f7 m37fc@m37f9) ((lambda (m3800@p m3801@rhs* m3802@lhs*) (values m3802@lhs* m3801@rhs* (list 'quasisyntax m3800@p))) m37fc@m37f9 m37fb@m37f7 m37fa@m37f5)))) m37f0@ls/false) ((lambda (m3806@t) ((lambda (m3808@ls/false) (if m3808@ls/false (apply (lambda (m380a@p m380b@q) (call-with-values (lambda () (m3749@quasi m380a@p m3765@lev)) (lambda (m381a@m380f m381b@m3811 m381c@m3813) (call-with-values (lambda () (m3749@quasi m380b@q m3765@lev)) (lambda (m3820@m3815 m3821@m3817 m3822@m3819) ((lambda (m3826@q m3827@rhs2* m3828@lhs2* m3829@p m382a@rhs* m382b@lhs*) (values (append m3828@lhs2* m382b@lhs*) (append m3827@rhs2* m382a@rhs*) (cons m3829@p m3826@q))) m3822@m3819 m3821@m3817 m3820@m3815 m381c@m3813 m381b@m3811 m381a@m380f)))))) m3808@ls/false) ((lambda (m3832@t) ((lambda (m3834@ls/false) (if m3834@ls/false (apply (lambda (m3836@x*) (call-with-values (lambda () (m3749@quasi m3836@x* m3765@lev)) (lambda (m383e@m3839 m383f@m383b m3840@m383d) ((lambda (m3844@x* m3845@rhs* m3846@lhs*) (values m3846@lhs* m3845@rhs* (list->vector m3844@x*))) m3840@m383d m383f@m383b m383e@m3839)))) m3834@ls/false) ((lambda (m384a@t) ((lambda (m384c@ls/false) (if m384c@ls/false (apply (lambda () (values '() '() m3764@p)) m384c@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m384a@t))) (m2eb6@syntax-dispatch m384a@t '_))) m3832@t))) (m2eb6@syntax-dispatch m3832@t '#(vector each-any)))) m3806@t))) (m2eb6@syntax-dispatch m3806@t '(any . any)))) m37ee@t))) (m2eb6@syntax-dispatch m37ee@t '(#(scheme-id quasisyntax) any)))) m37ea@t))) (m2eb6@syntax-dispatch m37ea@t '#(scheme-id unsyntax-splicing)))) m37b6@t))) (m2eb6@syntax-dispatch m37b6@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) m3786@t))) (m2eb6@syntax-dispatch m3786@t '((#(scheme-id unsyntax) . each-any) . any)))) m3782@t))) (m2eb6@syntax-dispatch m3782@t '#(scheme-id unsyntax)))) m3768@t))) (m2eb6@syntax-dispatch m3768@t '(#(scheme-id unsyntax) any)))) m3764@p))) (lambda (m374a@x) ((lambda (m374c@t) ((lambda (m374e@ls/false) (if m374e@ls/false (apply (lambda (m3750@e) (call-with-values (lambda () (m3749@quasi m3750@e '0)) (lambda (m3758@m3753 m3759@m3755 m375a@m3757) ((lambda (m375e@v m375f@rhs* m3760@lhs*) (m2e6c@bless (list 'syntax-case (cons 'list m375f@rhs*) '() (list m3760@lhs* (list 'syntax m375e@v))))) m375a@m3757 m3759@m3755 m3758@m3753)))) m374e@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m374c@t))) (m2eb6@syntax-dispatch m374c@t '(_ any)))) m374a@x)))) '#f)))) (set! m2ea8@define-struct-macro (lambda (m384e@stx) (m2f9f@syntax-violation '#f '"define-struct not supported" m384e@stx))) (set! m2eaa@define-record-type-macro (lambda (m3850@x) ((lambda (m3853@id m3855@get-record-name m3857@get-record-constructor-name m3859@get-record-predicate-name m385b@get-clause m385d@foo-rtd-code m385f@parent-rtd-code m3861@parent-rcd-code m3863@foo-rcd-code m3865@get-protocol-code m3867@get-fields m3869@get-mutator-indices m386b@get-mutators m386d@get-accessors m386f@enumerate m3871@do-define-record m3873@verify-clauses) (begin (set! m3853@id (lambda (m3a46@ctxt . m3a48@str*) (m2fa3@datum->syntax m3a46@ctxt (string->symbol (apply string-append (map (lambda (m3a4a@x) (if (symbol? m3a4a@x) (symbol->string m3a4a@x) (if (string? m3a4a@x) m3a4a@x (assertion-violation 'define-record-type '"BUG")))) m3a48@str*)))))) (set! m3855@get-record-name (lambda (m3a34@spec) ((lambda (m3a36@t) ((lambda (m3a38@ls/false) (if m3a38@ls/false (apply (lambda (m3a3a@foo m3a3b@make-foo m3a3c@foo?) m3a3a@foo) m3a38@ls/false) ((lambda (m3a40@t) ((lambda (m3a42@ls/false) (if m3a42@ls/false (apply (lambda (m3a44@foo) m3a44@foo) m3a42@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3a40@t))) (m2eb6@syntax-dispatch m3a40@t 'any))) m3a36@t))) (m2eb6@syntax-dispatch m3a36@t '(any any any)))) m3a34@spec))) (set! m3857@get-record-constructor-name (lambda (m3a20@spec) ((lambda (m3a22@t) ((lambda (m3a24@ls/false) (if m3a24@ls/false (apply (lambda (m3a26@foo m3a27@make-foo m3a28@foo?) m3a27@make-foo) m3a24@ls/false) ((lambda (m3a2c@t) ((lambda (m3a2e@ls/false) (if (and m3a2e@ls/false (apply (lambda (m3a30@foo) (m2cab@id? m3a30@foo)) m3a2e@ls/false)) (apply (lambda (m3a32@foo) (m3853@id m3a32@foo '"make-" (m2cc1@stx->datum m3a32@foo))) m3a2e@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3a2c@t))) (m2eb6@syntax-dispatch m3a2c@t 'any))) m3a22@t))) (m2eb6@syntax-dispatch m3a22@t '(any any any)))) m3a20@spec))) (set! m3859@get-record-predicate-name (lambda (m3a0c@spec) ((lambda (m3a0e@t) ((lambda (m3a10@ls/false) (if m3a10@ls/false (apply (lambda (m3a12@foo m3a13@make-foo m3a14@foo?) m3a14@foo?) m3a10@ls/false) ((lambda (m3a18@t) ((lambda (m3a1a@ls/false) (if (and m3a1a@ls/false (apply (lambda (m3a1c@foo) (m2cab@id? m3a1c@foo)) m3a1a@ls/false)) (apply (lambda (m3a1e@foo) (m3853@id m3a1e@foo (m2cc1@stx->datum m3a1e@foo) '"?")) m3a1a@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3a18@t))) (m2eb6@syntax-dispatch m3a18@t 'any))) m3a0e@t))) (m2eb6@syntax-dispatch m3a0e@t '(any any any)))) m3a0c@spec))) (set! m385b@get-clause (lambda (m39fa@id m39fb@ls) ((lambda (m39fe@t) ((lambda (m3a00@ls/false) (if m3a00@ls/false (apply (lambda () '#f) m3a00@ls/false) ((lambda (m3a02@t) ((lambda (m3a04@ls/false) (if m3a04@ls/false (apply (lambda (m3a06@x m3a07@rest m3a08@ls) (if (m2cb3@free-id=? (m2e6c@bless m39fa@id) m3a06@x) (cons m3a06@x m3a07@rest) (m385b@get-clause m39fa@id m3a08@ls))) m3a04@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3a02@t))) (m2eb6@syntax-dispatch m3a02@t '((any . any) . any)))) m39fe@t))) (m2eb6@syntax-dispatch m39fe@t '()))) m39fb@ls))) (set! m385d@foo-rtd-code (lambda (m39a8@name m39a9@clause* m39aa@parent-rtd-code) ((lambda (m39af@convert-field-spec*) (begin (set! m39af@convert-field-spec* (lambda (m39e0@ls) (list->vector (map (lambda (m39e2@x) ((lambda (m39e4@t) ((lambda (m39e6@ls/false) (if m39e6@ls/false (apply (lambda (m39e8@name m39e9@rest) (list 'mutable m39e8@name)) m39e6@ls/false) ((lambda (m39ec@t) ((lambda (m39ee@ls/false) (if m39ee@ls/false (apply (lambda (m39f0@name m39f1@rest) (list 'immutable m39f0@name)) m39ee@ls/false) ((lambda (m39f4@t) ((lambda (m39f6@ls/false) (if m39f6@ls/false (apply (lambda (m39f8@name) (list 'immutable m39f8@name)) m39f6@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m39f4@t))) (m2eb6@syntax-dispatch m39f4@t 'any))) m39ec@t))) (m2eb6@syntax-dispatch m39ec@t '(#(scheme-id immutable) any . any)))) m39e4@t))) (m2eb6@syntax-dispatch m39e4@t '(#(scheme-id mutable) any . any)))) m39e2@x)) m39e0@ls)))) ((lambda (m39b0@uid-code m39b1@sealed? m39b2@opaque? m39b3@fields) (m2e6c@bless (list 'make-record-type-descriptor (list 'quote m39a8@name) m39aa@parent-rtd-code m39b0@uid-code m39b1@sealed? m39b2@opaque? m39b3@fields))) ((lambda (m39b8@t) ((lambda (m39ba@ls/false) (if m39ba@ls/false (apply (lambda () (list 'quote (gensym))) m39ba@ls/false) ((lambda (m39bc@t) ((lambda (m39be@ls/false) (if m39be@ls/false (apply (lambda (m39c0@uid) (list 'quote m39c0@uid)) m39be@ls/false) ((lambda (m39c2@t) ((lambda (m39c4@ls/false) (if m39c4@ls/false (apply (lambda () '#f) m39c4@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m39c2@t))) (m2eb6@syntax-dispatch m39c2@t '_))) m39bc@t))) (m2eb6@syntax-dispatch m39bc@t '(_ any)))) m39b8@t))) (m2eb6@syntax-dispatch m39b8@t '(_)))) (m385b@get-clause 'nongenerative m39a9@clause*)) ((lambda (m39c6@t) ((lambda (m39c8@ls/false) (if m39c8@ls/false (apply (lambda () '#t) m39c8@ls/false) ((lambda (m39ca@t) ((lambda (m39cc@ls/false) (if m39cc@ls/false (apply (lambda () '#f) m39cc@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m39ca@t))) (m2eb6@syntax-dispatch m39ca@t '_))) m39c6@t))) (m2eb6@syntax-dispatch m39c6@t '(_ #(atom #t))))) (m385b@get-clause 'sealed m39a9@clause*)) ((lambda (m39ce@t) ((lambda (m39d0@ls/false) (if m39d0@ls/false (apply (lambda () '#t) m39d0@ls/false) ((lambda (m39d2@t) ((lambda (m39d4@ls/false) (if m39d4@ls/false (apply (lambda () '#f) m39d4@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m39d2@t))) (m2eb6@syntax-dispatch m39d2@t '_))) m39ce@t))) (m2eb6@syntax-dispatch m39ce@t '(_ #(atom #t))))) (m385b@get-clause 'opaque m39a9@clause*)) ((lambda (m39d6@t) ((lambda (m39d8@ls/false) (if m39d8@ls/false (apply (lambda (m39da@field-spec*) (list 'quote (m39af@convert-field-spec* m39da@field-spec*))) m39d8@ls/false) ((lambda (m39dc@t) ((lambda (m39de@ls/false) (if m39de@ls/false (apply (lambda () ''#()) m39de@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m39dc@t))) (m2eb6@syntax-dispatch m39dc@t '_))) m39d6@t))) (m2eb6@syntax-dispatch m39d6@t '(_ . each-any)))) (m385b@get-clause 'fields m39a9@clause*))))) '#f))) (set! m385f@parent-rtd-code (lambda (m3990@clause*) ((lambda (m3992@t) ((lambda (m3994@ls/false) (if m3994@ls/false (apply (lambda (m3996@name) (list 'record-type-descriptor m3996@name)) m3994@ls/false) ((lambda (m3998@t) ((lambda (m399a@ls/false) (if m399a@ls/false (apply (lambda () ((lambda (m399c@t) ((lambda (m399e@ls/false) (if m399e@ls/false (apply (lambda (m39a0@rtd m39a1@rcd) m39a0@rtd) m399e@ls/false) ((lambda (m39a4@t) ((lambda (m39a6@ls/false) (if m39a6@ls/false (apply (lambda () '#f) m39a6@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m39a4@t))) (m2eb6@syntax-dispatch m39a4@t '#(atom #f)))) m399c@t))) (m2eb6@syntax-dispatch m399c@t '(_ any any)))) (m385b@get-clause 'parent-rtd m3990@clause*))) m399a@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3998@t))) (m2eb6@syntax-dispatch m3998@t '#(atom #f)))) m3992@t))) (m2eb6@syntax-dispatch m3992@t '(_ any)))) (m385b@get-clause 'parent m3990@clause*)))) (set! m3861@parent-rcd-code (lambda (m3978@clause*) ((lambda (m397a@t) ((lambda (m397c@ls/false) (if m397c@ls/false (apply (lambda (m397e@name) (list 'record-constructor-descriptor m397e@name)) m397c@ls/false) ((lambda (m3980@t) ((lambda (m3982@ls/false) (if m3982@ls/false (apply (lambda () ((lambda (m3984@t) ((lambda (m3986@ls/false) (if m3986@ls/false (apply (lambda (m3988@rtd m3989@rcd) m3989@rcd) m3986@ls/false) ((lambda (m398c@t) ((lambda (m398e@ls/false) (if m398e@ls/false (apply (lambda () '#f) m398e@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m398c@t))) (m2eb6@syntax-dispatch m398c@t '#(atom #f)))) m3984@t))) (m2eb6@syntax-dispatch m3984@t '(_ any any)))) (m385b@get-clause 'parent-rtd m3978@clause*))) m3982@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3980@t))) (m2eb6@syntax-dispatch m3980@t '#(atom #f)))) m397a@t))) (m2eb6@syntax-dispatch m397a@t '(_ any)))) (m385b@get-clause 'parent m3978@clause*)))) (set! m3863@foo-rcd-code (lambda (m3970@clause* m3971@foo-rtd m3972@protocol m3973@parent-rcd-code) (list 'make-record-constructor-descriptor m3971@foo-rtd m3973@parent-rcd-code m3972@protocol))) (set! m3865@get-protocol-code (lambda (m3964@clause*) ((lambda (m3966@t) ((lambda (m3968@ls/false) (if m3968@ls/false (apply (lambda (m396a@expr) m396a@expr) m3968@ls/false) ((lambda (m396c@t) ((lambda (m396e@ls/false) (if m396e@ls/false (apply (lambda () '#f) m396e@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m396c@t))) (m2eb6@syntax-dispatch m396c@t '_))) m3966@t))) (m2eb6@syntax-dispatch m3966@t '(_ any)))) (m385b@get-clause 'protocol m3964@clause*)))) (set! m3867@get-fields (lambda (m3952@clause*) ((lambda (m3954@t) ((lambda (m3956@ls/false) (if m3956@ls/false (apply (lambda () '()) m3956@ls/false) ((lambda (m3958@t) ((lambda (m395a@ls/false) (if m395a@ls/false (apply (lambda (m395c@f*) m395c@f*) m395a@ls/false) ((lambda (m395e@t) ((lambda (m3960@ls/false) (if m3960@ls/false (apply (lambda (m3962@rest) (m3867@get-fields m3962@rest)) m3960@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m395e@t))) (m2eb6@syntax-dispatch m395e@t '(_ . any)))) m3958@t))) (m2eb6@syntax-dispatch m3958@t '((#(scheme-id fields) . each-any) . _)))) m3954@t))) (m2eb6@syntax-dispatch m3954@t '()))) m3952@clause*))) (set! m3869@get-mutator-indices (lambda (m393a@fields) ((letrec ((m393c@f (lambda (m393e@fields m393f@i) ((lambda (m3942@t) ((lambda (m3944@ls/false) (if m3944@ls/false (apply (lambda () '()) m3944@ls/false) ((lambda (m3946@t) ((lambda (m3948@ls/false) (if m3948@ls/false (apply (lambda (m394a@rest) (cons m393f@i (m393c@f m394a@rest (+ m393f@i '1)))) m3948@ls/false) ((lambda (m394c@t) ((lambda (m394e@ls/false) (if m394e@ls/false (apply (lambda (m3950@rest) (m393c@f m3950@rest (+ m393f@i '1))) m394e@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m394c@t))) (m2eb6@syntax-dispatch m394c@t '(_ . any)))) m3946@t))) (m2eb6@syntax-dispatch m3946@t '((#(scheme-id mutable) . _) . any)))) m3942@t))) (m2eb6@syntax-dispatch m3942@t '()))) m393e@fields)))) m393c@f) m393a@fields '0))) (set! m386b@get-mutators (lambda (m3910@foo m3911@fields) ((lambda (m3915@gen-name) (begin (set! m3915@gen-name (lambda (m3938@x) (m2fa3@datum->syntax m3910@foo (string->symbol (string-append (symbol->string (m2fa5@syntax->datum m3910@foo)) '"-" (symbol->string (m2fa5@syntax->datum m3938@x)) '"-set!"))))) ((letrec ((m3916@f (lambda (m3918@fields) ((lambda (m391a@t) ((lambda (m391c@ls/false) (if m391c@ls/false (apply (lambda () '()) m391c@ls/false) ((lambda (m391e@t) ((lambda (m3920@ls/false) (if m3920@ls/false (apply (lambda (m3922@name m3923@accessor m3924@mutator m3925@rest) (cons m3924@mutator (m3916@f m3925@rest))) m3920@ls/false) ((lambda (m392a@t) ((lambda (m392c@ls/false) (if m392c@ls/false (apply (lambda (m392e@name m392f@rest) (cons (m3915@gen-name m392e@name) (m3916@f m392f@rest))) m392c@ls/false) ((lambda (m3932@t) ((lambda (m3934@ls/false) (if m3934@ls/false (apply (lambda (m3936@rest) (m3916@f m3936@rest)) m3934@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3932@t))) (m2eb6@syntax-dispatch m3932@t '(_ . any)))) m392a@t))) (m2eb6@syntax-dispatch m392a@t '((#(scheme-id mutable) any) . any)))) m391e@t))) (m2eb6@syntax-dispatch m391e@t '((#(scheme-id mutable) any any any) . any)))) m391a@t))) (m2eb6@syntax-dispatch m391a@t '()))) m3918@fields)))) m3916@f) m3911@fields))) '#f))) (set! m386d@get-accessors (lambda (m38cc@foo m38cd@fields) ((lambda (m38d1@gen-name) (begin (set! m38d1@gen-name (lambda (m390e@x) (m2fa3@datum->syntax m38cc@foo (string->symbol (string-append (symbol->string (m2fa5@syntax->datum m38cc@foo)) '"-" (symbol->string (m2fa5@syntax->datum m390e@x))))))) (map (lambda (m38d2@field) ((lambda (m38d4@t) ((lambda (m38d6@ls/false) (if (and m38d6@ls/false (apply (lambda (m38d8@name m38d9@accessor m38da@mutator) (m2cab@id? m38d9@accessor)) m38d6@ls/false)) (apply (lambda (m38de@name m38df@accessor m38e0@mutator) m38df@accessor) m38d6@ls/false) ((lambda (m38e4@t) ((lambda (m38e6@ls/false) (if (and m38e6@ls/false (apply (lambda (m38e8@name m38e9@accessor) (m2cab@id? m38e9@accessor)) m38e6@ls/false)) (apply (lambda (m38ec@name m38ed@accessor) m38ed@accessor) m38e6@ls/false) ((lambda (m38f0@t) ((lambda (m38f2@ls/false) (if (and m38f2@ls/false (apply (lambda (m38f4@name) (m2cab@id? m38f4@name)) m38f2@ls/false)) (apply (lambda (m38f6@name) (m38d1@gen-name m38f6@name)) m38f2@ls/false) ((lambda (m38f8@t) ((lambda (m38fa@ls/false) (if (and m38fa@ls/false (apply (lambda (m38fc@name) (m2cab@id? m38fc@name)) m38fa@ls/false)) (apply (lambda (m38fe@name) (m38d1@gen-name m38fe@name)) m38fa@ls/false) ((lambda (m3900@t) ((lambda (m3902@ls/false) (if (and m3902@ls/false (apply (lambda (m3904@name) (m2cab@id? m3904@name)) m3902@ls/false)) (apply (lambda (m3906@name) (m38d1@gen-name m3906@name)) m3902@ls/false) ((lambda (m3908@t) ((lambda (m390a@ls/false) (if m390a@ls/false (apply (lambda (m390c@others) (m2f9f@syntax-violation '#f '"invalid field spec" m38d2@field)) m390a@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3908@t))) (m2eb6@syntax-dispatch m3908@t 'any))) m3900@t))) (m2eb6@syntax-dispatch m3900@t 'any))) m38f8@t))) (m2eb6@syntax-dispatch m38f8@t '(#(scheme-id immutable) any)))) m38f0@t))) (m2eb6@syntax-dispatch m38f0@t '(#(scheme-id mutable) any)))) m38e4@t))) (m2eb6@syntax-dispatch m38e4@t '(#(scheme-id immutable) any any)))) m38d4@t))) (m2eb6@syntax-dispatch m38d4@t '(#(scheme-id mutable) any any any)))) m38d2@field)) m38cd@fields))) '#f))) (set! m386f@enumerate (lambda (m38c4@ls) ((letrec ((m38c6@f (lambda (m38c8@ls m38c9@i) (if (null? m38c8@ls) '() (cons m38c9@i (m38c6@f (cdr m38c8@ls) (+ m38c9@i '1))))))) m38c6@f) m38c4@ls '0))) (set! m3871@do-define-record (lambda (m389c@namespec m389d@clause*) ((lambda (m38a0@foo) ((lambda (m38a2@foo-rtd) ((lambda (m38a4@foo-rcd) ((lambda (m38a6@protocol) ((lambda (m38a8@make-foo) ((lambda (m38aa@fields) ((lambda (m38ac@idx*) ((lambda (m38ae@foo-x*) ((lambda (m38b0@set-foo-x!*) ((lambda (m38b2@set-foo-idx*) ((lambda (m38b4@foo?) ((lambda (m38b6@foo-rtd-code) ((lambda (m38b8@foo-rcd-code) ((lambda (m38ba@protocol-code) ((lambda () (m2e6c@bless (cons 'begin (cons (list 'define m38a2@foo-rtd m38b6@foo-rtd-code) (cons (list 'define m38a6@protocol m38ba@protocol-code) (cons (list 'define m38a4@foo-rcd m38b8@foo-rcd-code) (cons (list 'define-syntax m38a0@foo (list 'list ''$rtd (list 'syntax m38a2@foo-rtd) (list 'syntax m38a4@foo-rcd))) (cons (list 'define m38b4@foo? (list 'record-predicate m38a2@foo-rtd)) (cons (list 'define m38a8@make-foo (list 'record-constructor m38a4@foo-rcd)) (append (map (lambda (m38bc@foo-x m38bd@idx) (list 'define m38bc@foo-x (list 'record-accessor m38a2@foo-rtd m38bd@idx))) m38ae@foo-x* m38ac@idx*) (map (lambda (m38c0@set-foo-x! m38c1@idx) (list 'define m38c0@set-foo-x! (list 'record-mutator m38a2@foo-rtd m38c1@idx))) m38b0@set-foo-x!* m38b2@set-foo-idx*))))))))))))) (m3865@get-protocol-code m389d@clause*))) (m3863@foo-rcd-code m389d@clause* m38a2@foo-rtd m38a6@protocol (m3861@parent-rcd-code m389d@clause*)))) (m385d@foo-rtd-code m38a0@foo m389d@clause* (m385f@parent-rtd-code m389d@clause*)))) (m3859@get-record-predicate-name m389c@namespec))) (m3869@get-mutator-indices m38aa@fields))) (m386b@get-mutators m38a0@foo m38aa@fields))) (m386d@get-accessors m38a0@foo m38aa@fields))) (m386f@enumerate m38aa@fields))) (m3867@get-fields m389d@clause*))) (m3857@get-record-constructor-name m389c@namespec))) (gensym))) (gensym))) (gensym))) (m3855@get-record-name m389c@namespec)))) (set! m3873@verify-clauses (lambda (m387c@x m387d@cls*) ((lambda (m3881@valid-kwds m3883@free-id-member?) (begin (set! m3881@valid-kwds (map m2e6c@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! m3883@free-id-member? (lambda (m3898@x m3899@ls) (and (pair? m3899@ls) (or (m2cb3@free-id=? m3898@x (car m3899@ls)) (m3883@free-id-member? m3898@x (cdr m3899@ls)))))) ((letrec ((m3884@f (lambda (m3886@cls* m3887@seen*) (if (not (null? m3886@cls*)) ((lambda (m388a@t) ((lambda (m388c@ls/false) (if m388c@ls/false (apply (lambda (m388e@kwd m388f@rest) (if (or (not (m2cab@id? m388e@kwd)) (not (m3883@free-id-member? m388e@kwd m3881@valid-kwds))) (m2f9f@syntax-violation '#f '"not a valid define-record-type keyword" m388e@kwd) (if (m2cb9@bound-id-member? m388e@kwd m3887@seen*) (m2f9f@syntax-violation '#f '"duplicate use of keyword " m387c@x m388e@kwd) (m3884@f (cdr m3886@cls*) (cons m388e@kwd m3887@seen*))))) m388c@ls/false) ((lambda (m3892@t) ((lambda (m3894@ls/false) (if m3894@ls/false (apply (lambda (m3896@cls) (m2f9f@syntax-violation '#f '"malformed define-record-type clause" m3896@cls)) m3894@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3892@t))) (m2eb6@syntax-dispatch m3892@t 'any))) m388a@t))) (m2eb6@syntax-dispatch m388a@t '(any . any)))) (car m3886@cls*)) (void))))) m3884@f) m387d@cls* '()))) '#f '#f))) ((lambda (m3874@t) ((lambda (m3876@ls/false) (if m3876@ls/false (apply (lambda (m3878@namespec m3879@clause*) (begin (m3873@verify-clauses m3850@x m3879@clause*) (m3871@do-define-record m3878@namespec m3879@clause*))) m3876@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3874@t))) (m2eb6@syntax-dispatch m3874@t '(_ any . each-any)))) m3850@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! m2eac@define-condition-type-macro (lambda (m3a4c@x) ((lambda (m3a4f@mkname) (begin (set! m3a4f@mkname (lambda (m3a7c@name m3a7d@suffix) (m2fa3@datum->syntax m3a7c@name (string->symbol (string-append (symbol->string (m2fa5@syntax->datum m3a7c@name)) m3a7d@suffix))))) ((lambda (m3a50@t) ((lambda (m3a52@ls/false) (if (and m3a52@ls/false (apply (lambda (m3a54@ctxt m3a55@name m3a56@super m3a57@constructor m3a58@predicate m3a59@field* m3a5a@accessor*) (and (m2cab@id? m3a55@name) (m2cab@id? m3a56@super) (m2cab@id? m3a57@constructor) (m2cab@id? m3a58@predicate) (for-all m2cab@id? m3a59@field*) (for-all m2cab@id? m3a5a@accessor*))) m3a52@ls/false)) (apply (lambda (m3a62@ctxt m3a63@name m3a64@super m3a65@constructor m3a66@predicate m3a67@field* m3a68@accessor*) ((lambda (m3a70@aux-accessor*) (m2e6c@bless (cons 'begin (cons (cons 'define-record-type (cons (list m3a63@name m3a65@constructor (gensym)) (cons (list 'parent m3a64@super) (cons (cons 'fields (map (lambda (m3a72@field m3a73@aux) (list 'immutable m3a72@field m3a73@aux)) m3a67@field* m3a70@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define m3a66@predicate (list 'condition-predicate (list 'record-type-descriptor m3a63@name))) (map (lambda (m3a76@accessor m3a77@aux) (list 'define m3a76@accessor (list 'condition-accessor (list 'record-type-descriptor m3a63@name) m3a77@aux))) m3a68@accessor* m3a70@aux-accessor*)))))) (map (lambda (m3a7a@x) (gensym)) m3a68@accessor*))) m3a52@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3a50@t))) (m2eb6@syntax-dispatch m3a50@t '(any any any any any . #(each (any any)))))) m3a4c@x))) '#f))) (set! m2eae@incorrect-usage-macro (lambda (m3a80@e) (m2f9f@syntax-violation '#f '"incorrect usage of auxiliary keyword" m3a80@e))) (set! m2eb0@parameterize-macro (lambda (m3a82@e) ((lambda (m3a84@t) ((lambda (m3a86@ls/false) (if m3a86@ls/false (apply (lambda (m3a88@b m3a89@b*) (m2e6c@bless (cons 'let (cons '() (cons m3a88@b m3a89@b*))))) m3a86@ls/false) ((lambda (m3a8c@t) ((lambda (m3a8e@ls/false) (if m3a8e@ls/false (apply (lambda (m3a90@olhs* m3a91@orhs* m3a92@b m3a93@b*) ((lambda (m3a98@lhs* m3a99@rhs*) (m2e6c@bless (cons (list 'lambda (append m3a98@lhs* m3a99@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (m3a9c@lhs m3a9d@rhs) (list 'let (list (list 't (list m3a9c@lhs))) (list m3a9c@lhs m3a9d@rhs) (cons 'set! (cons m3a9d@rhs '(t))))) m3a98@lhs* m3a99@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons m3a92@b m3a93@b*))) '(swap)))))) (append m3a90@olhs* m3a91@orhs*)))) (m2f8d@generate-temporaries m3a90@olhs*) (m2f8d@generate-temporaries m3a91@orhs*))) m3a8e@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3a8c@t))) (m2eb6@syntax-dispatch m3a8c@t '(_ #(each (any any)) any . each-any)))) m3a84@t))) (m2eb6@syntax-dispatch m3a84@t '(_ () any . each-any)))) m3a82@e))) (set! m2eb2@foreign-call-transformer (lambda (m3aa0@e m3aa1@r m3aa2@mr) ((lambda (m3aa6@t) ((lambda (m3aa8@ls/false) (if m3aa8@ls/false (apply (lambda (m3aaa@name m3aab@arg*) (cons 'foreign-call (cons (m2ed8@chi-expr m3aaa@name m3aa1@r m3aa2@mr) (m2ed4@chi-expr* m3aab@arg* m3aa1@r m3aa2@mr)))) m3aa8@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3aa6@t))) (m2eb6@syntax-dispatch m3aa6@t '(_ any . each-any)))) m3aa0@e))) (set! m2eb4@convert-pattern (lambda (m3aae@pattern m3aaf@keys) ((lambda (m3ab3@cvt* m3ab5@cvt) (begin (set! m3ab3@cvt* (lambda (m3b52@p* m3b53@n m3b54@ids) (if (null? m3b52@p*) (values '() m3b54@ids) (call-with-values (lambda () (m3ab3@cvt* (cdr m3b52@p*) m3b53@n m3b54@ids)) (lambda (m3b5c@m3b59 m3b5d@m3b5b) ((lambda (m3b60@ids m3b61@y) (call-with-values (lambda () (m3ab5@cvt (car m3b52@p*) m3b53@n m3b60@ids)) (lambda (m3b68@m3b65 m3b69@m3b67) ((lambda (m3b6c@ids m3b6d@x) (values (cons m3b6d@x m3b61@y) m3b6c@ids)) m3b69@m3b67 m3b68@m3b65)))) m3b5d@m3b5b m3b5c@m3b59)))))) (set! m3ab5@cvt (lambda (m3ab6@p m3ab7@n m3ab8@ids) ((lambda (m3abc@t) ((lambda (m3abe@ls/false) (if (and m3abe@ls/false (apply (lambda (m3ac0@id) (m2cab@id? m3ac0@id)) m3abe@ls/false)) (apply (lambda (m3ac2@id) (if (m2cb9@bound-id-member? m3ab6@p m3aaf@keys) (values (vector 'free-id m3ab6@p) m3ab8@ids) (if (m2cb3@free-id=? m3ab6@p (m2e40@scheme-stx '_)) (values '_ m3ab8@ids) (values 'any (cons (cons m3ab6@p m3ab7@n) m3ab8@ids))))) m3abe@ls/false) ((lambda (m3ac4@t) ((lambda (m3ac6@ls/false) (if (and m3ac6@ls/false (apply (lambda (m3ac8@p m3ac9@dots) (m2eb8@ellipsis? m3ac9@dots)) m3ac6@ls/false)) (apply (lambda (m3acc@p m3acd@dots) (call-with-values (lambda () (m3ab5@cvt m3acc@p (+ m3ab7@n '1) m3ab8@ids)) (lambda (m3ad4@m3ad1 m3ad5@m3ad3) ((lambda (m3ad8@ids m3ad9@p) (values (if (eq? m3ad9@p 'any) 'each-any (vector 'each m3ad9@p)) m3ad8@ids)) m3ad5@m3ad3 m3ad4@m3ad1)))) m3ac6@ls/false) ((lambda (m3adc@t) ((lambda (m3ade@ls/false) (if (and m3ade@ls/false (apply (lambda (m3ae0@x m3ae1@dots m3ae2@ys m3ae3@z) (m2eb8@ellipsis? m3ae1@dots)) m3ade@ls/false)) (apply (lambda (m3ae8@x m3ae9@dots m3aea@ys m3aeb@z) (call-with-values (lambda () (m3ab5@cvt m3aeb@z m3ab7@n m3ab8@ids)) (lambda (m3af4@m3af1 m3af5@m3af3) ((lambda (m3af8@ids m3af9@z) (call-with-values (lambda () (m3ab3@cvt* m3aea@ys m3ab7@n m3af8@ids)) (lambda (m3b00@m3afd m3b01@m3aff) ((lambda (m3b04@ids m3b05@ys) (call-with-values (lambda () (m3ab5@cvt m3ae8@x (+ m3ab7@n '1) m3b04@ids)) (lambda (m3b0c@m3b09 m3b0d@m3b0b) ((lambda (m3b10@ids m3b11@x) (values (vector 'each+ m3b11@x (reverse m3b05@ys) m3af9@z) m3b10@ids)) m3b0d@m3b0b m3b0c@m3b09)))) m3b01@m3aff m3b00@m3afd)))) m3af5@m3af3 m3af4@m3af1)))) m3ade@ls/false) ((lambda (m3b14@t) ((lambda (m3b16@ls/false) (if m3b16@ls/false (apply (lambda (m3b18@x m3b19@y) (call-with-values (lambda () (m3ab5@cvt m3b19@y m3ab7@n m3ab8@ids)) (lambda (m3b20@m3b1d m3b21@m3b1f) ((lambda (m3b24@ids m3b25@y) (call-with-values (lambda () (m3ab5@cvt m3b18@x m3ab7@n m3b24@ids)) (lambda (m3b2c@m3b29 m3b2d@m3b2b) ((lambda (m3b30@ids m3b31@x) (values (cons m3b31@x m3b25@y) m3b30@ids)) m3b2d@m3b2b m3b2c@m3b29)))) m3b21@m3b1f m3b20@m3b1d)))) m3b16@ls/false) ((lambda (m3b34@t) ((lambda (m3b36@ls/false) (if m3b36@ls/false (apply (lambda () (values '() m3ab8@ids)) m3b36@ls/false) ((lambda (m3b38@t) ((lambda (m3b3a@ls/false) (if (and m3b3a@ls/false (apply (lambda (m3b3c@p) (not (m2c73@stx? m3b3c@p))) m3b3a@ls/false)) (apply (lambda (m3b3e@p) (call-with-values (lambda () (m3ab5@cvt m3b3e@p m3ab7@n m3ab8@ids)) (lambda (m3b44@m3b41 m3b45@m3b43) ((lambda (m3b48@ids m3b49@p) (values (vector 'vector m3b49@p) m3b48@ids)) m3b45@m3b43 m3b44@m3b41)))) m3b3a@ls/false) ((lambda (m3b4c@t) ((lambda (m3b4e@ls/false) (if m3b4e@ls/false (apply (lambda (m3b50@datum) (values (vector 'atom (m2cc1@stx->datum m3b50@datum)) m3ab8@ids)) m3b4e@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3b4c@t))) (m2eb6@syntax-dispatch m3b4c@t 'any))) m3b38@t))) (m2eb6@syntax-dispatch m3b38@t '#(vector each-any)))) m3b34@t))) (m2eb6@syntax-dispatch m3b34@t '()))) m3b14@t))) (m2eb6@syntax-dispatch m3b14@t '(any . any)))) m3adc@t))) (m2eb6@syntax-dispatch m3adc@t '(any any . #(each+ any () any))))) m3ac4@t))) (m2eb6@syntax-dispatch m3ac4@t '(any any)))) m3abc@t))) (m2eb6@syntax-dispatch m3abc@t 'any))) m3ab6@p))) (m3ab5@cvt m3aae@pattern '0 '()))) '#f '#f))) (set! m2eb6@syntax-dispatch ((lambda () ((lambda (m3b71@stx^ m3b73@match-each m3b75@match-each+ m3b77@match-each-any m3b79@match-empty m3b7b@combine m3b7d@match* m3b7f@match) (begin (set! m3b71@stx^ (lambda (m3c4c@e m3c4d@m* m3c4e@s* m3c4f@ae*) (if (and (null? m3c4d@m*) (null? m3c4e@s*) (null? m3c4f@ae*)) m3c4c@e (m2c93@mkstx m3c4c@e m3c4d@m* m3c4e@s* m3c4f@ae*)))) (set! m3b73@match-each (lambda (m3c2c@e m3c2d@p m3c2e@m* m3c2f@s* m3c30@ae*) (if (pair? m3c2c@e) ((lambda (m3c36@first) (and m3c36@first ((lambda (m3c38@rest) (and m3c38@rest (cons m3c36@first m3c38@rest))) (m3b73@match-each (cdr m3c2c@e) m3c2d@p m3c2e@m* m3c2f@s* m3c30@ae*)))) (m3b7f@match (car m3c2c@e) m3c2d@p m3c2e@m* m3c2f@s* m3c30@ae* '())) (if (null? m3c2c@e) '() (if (m2c73@stx? m3c2c@e) (and (not (m2c29@top-marked? m3c2e@m*)) (call-with-values (lambda () (m2c91@join-wraps m3c2e@m* m3c2f@s* m3c30@ae* m3c2c@e)) (lambda (m3c40@m3c3b m3c41@m3c3d m3c42@m3c3f) ((lambda (m3c46@ae* m3c47@s* m3c48@m*) (m3b73@match-each (m2c77@stx-expr m3c2c@e) m3c2d@p m3c48@m* m3c47@s* m3c46@ae*)) m3c42@m3c3f m3c41@m3c3d m3c40@m3c3b)))) (if (m284a@m2769@annotation? m3c2c@e) (m3b73@match-each (m284c@m276d@annotation-expression m3c2c@e) m3c2d@p m3c2e@m* m3c2f@s* m3c30@ae*) '#f)))))) (set! m3b75@match-each+ (lambda (m3bec@e m3bed@x-pat m3bee@y-pat m3bef@z-pat m3bf0@m* m3bf1@s* m3bf2@ae* m3bf3@r) ((letrec ((m3bfc@f (lambda (m3bfe@e m3bff@m* m3c00@s* m3c01@ae*) (if (pair? m3bfe@e) (call-with-values (lambda () (m3bfc@f (cdr m3bfe@e) m3bff@m* m3c00@s* m3c01@ae*)) (lambda (m3c0c@m3c07 m3c0d@m3c09 m3c0e@m3c0b) ((lambda (m3c12@r m3c13@y-pat m3c14@xr*) (if m3c12@r (if (null? m3c13@y-pat) ((lambda (m3c18@xr) (if m3c18@xr (values (cons m3c18@xr m3c14@xr*) m3c13@y-pat m3c12@r) (values '#f '#f '#f))) (m3b7f@match (car m3bfe@e) m3bed@x-pat m3bff@m* m3c00@s* m3c01@ae* '())) (values '() (cdr m3c13@y-pat) (m3b7f@match (car m3bfe@e) (car m3c13@y-pat) m3bff@m* m3c00@s* m3c01@ae* m3c12@r))) (values '#f '#f '#f))) m3c0e@m3c0b m3c0d@m3c09 m3c0c@m3c07))) (if (m2c73@stx? m3bfe@e) (if (m2c29@top-marked? m3bff@m*) (values '() m3bee@y-pat (m3b7f@match m3bfe@e m3bef@z-pat m3bff@m* m3c00@s* m3c01@ae* m3bf3@r)) (call-with-values (lambda () (m2c91@join-wraps m3bff@m* m3c00@s* m3c01@ae* m3bfe@e)) (lambda (m3c20@m3c1b m3c21@m3c1d m3c22@m3c1f) ((lambda (m3c26@ae* m3c27@s* m3c28@m*) (m3bfc@f (m2c77@stx-expr m3bfe@e) m3c28@m* m3c27@s* m3c26@ae*)) m3c22@m3c1f m3c21@m3c1d m3c20@m3c1b)))) (if (m284a@m2769@annotation? m3bfe@e) (m3bfc@f (m284c@m276d@annotation-expression m3bfe@e) m3bff@m* m3c00@s* m3c01@ae*) (values '() m3bee@y-pat (m3b7f@match m3bfe@e m3bef@z-pat m3bff@m* m3c00@s* m3c01@ae* m3bf3@r)))))))) m3bfc@f) m3bec@e m3bf0@m* m3bf1@s* m3bf2@ae*))) (set! m3b77@match-each-any (lambda (m3bd0@e m3bd1@m* m3bd2@s* m3bd3@ae*) (if (pair? m3bd0@e) ((lambda (m3bd8@l) (and m3bd8@l (cons (m3b71@stx^ (car m3bd0@e) m3bd1@m* m3bd2@s* m3bd3@ae*) m3bd8@l))) (m3b77@match-each-any (cdr m3bd0@e) m3bd1@m* m3bd2@s* m3bd3@ae*)) (if (null? m3bd0@e) '() (if (m2c73@stx? m3bd0@e) (and (not (m2c29@top-marked? m3bd1@m*)) (call-with-values (lambda () (m2c91@join-wraps m3bd1@m* m3bd2@s* m3bd3@ae* m3bd0@e)) (lambda (m3be0@m3bdb m3be1@m3bdd m3be2@m3bdf) ((lambda (m3be6@ae* m3be7@s* m3be8@m*) (m3b77@match-each-any (m2c77@stx-expr m3bd0@e) m3be8@m* m3be7@s* m3be6@ae*)) m3be2@m3bdf m3be1@m3bdd m3be0@m3bdb)))) (if (m284a@m2769@annotation? m3bd0@e) (m3b77@match-each-any (m284c@m276d@annotation-expression m3bd0@e) m3bd1@m* m3bd2@s* m3bd3@ae*) '#f)))))) (set! m3b79@match-empty (lambda (m3bca@p m3bcb@r) (if (null? m3bca@p) m3bcb@r (if (eq? m3bca@p '_) m3bcb@r (if (eq? m3bca@p 'any) (cons '() m3bcb@r) (if (pair? m3bca@p) (m3b79@match-empty (car m3bca@p) (m3b79@match-empty (cdr m3bca@p) m3bcb@r)) (if (eq? m3bca@p 'each-any) (cons '() m3bcb@r) ((lambda (m3bce@t) (if (memv m3bce@t '(each)) (m3b79@match-empty (vector-ref m3bca@p '1) m3bcb@r) (if (memv m3bce@t '(each+)) (m3b79@match-empty (vector-ref m3bca@p '1) (m3b79@match-empty (reverse (vector-ref m3bca@p '2)) (m3b79@match-empty (vector-ref m3bca@p '3) m3bcb@r))) (if (memv m3bce@t '(free-id atom)) m3bcb@r (if (memv m3bce@t '(scheme-id atom)) m3bcb@r (if (memv m3bce@t '(vector)) (m3b79@match-empty (vector-ref m3bca@p '1) m3bcb@r) (assertion-violation 'syntax-dispatch '"invalid pattern" m3bca@p))))))) (vector-ref m3bca@p '0))))))))) (set! m3b7b@combine (lambda (m3bc6@r* m3bc7@r) (if (null? (car m3bc6@r*)) m3bc7@r (cons (map car m3bc6@r*) (m3b7b@combine (map cdr m3bc6@r*) m3bc7@r))))) (set! m3b7d@match* (lambda (m3ba2@e m3ba3@p m3ba4@m* m3ba5@s* m3ba6@ae* m3ba7@r) (if (null? m3ba3@p) (and (null? m3ba2@e) m3ba7@r) (if (pair? m3ba3@p) (and (pair? m3ba2@e) (m3b7f@match (car m3ba2@e) (car m3ba3@p) m3ba4@m* m3ba5@s* m3ba6@ae* (m3b7f@match (cdr m3ba2@e) (cdr m3ba3@p) m3ba4@m* m3ba5@s* m3ba6@ae* m3ba7@r))) (if (eq? m3ba3@p 'each-any) ((lambda (m3bae@l) (and m3bae@l (cons m3bae@l m3ba7@r))) (m3b77@match-each-any m3ba2@e m3ba4@m* m3ba5@s* m3ba6@ae*)) ((lambda (m3bb0@t) (if (memv m3bb0@t '(each)) (if (null? m3ba2@e) (m3b79@match-empty (vector-ref m3ba3@p '1) m3ba7@r) ((lambda (m3bb2@r*) (and m3bb2@r* (m3b7b@combine m3bb2@r* m3ba7@r))) (m3b73@match-each m3ba2@e (vector-ref m3ba3@p '1) m3ba4@m* m3ba5@s* m3ba6@ae*))) (if (memv m3bb0@t '(free-id)) (and (symbol? m3ba2@e) (m2c29@top-marked? m3ba4@m*) (m2cb3@free-id=? (m3b71@stx^ m3ba2@e m3ba4@m* m3ba5@s* m3ba6@ae*) (vector-ref m3ba3@p '1)) m3ba7@r) (if (memv m3bb0@t '(scheme-id)) (and (symbol? m3ba2@e) (m2c29@top-marked? m3ba4@m*) (m2cb3@free-id=? (m3b71@stx^ m3ba2@e m3ba4@m* m3ba5@s* m3ba6@ae*) (m2e40@scheme-stx (vector-ref m3ba3@p '1))) m3ba7@r) (if (memv m3bb0@t '(each+)) (call-with-values (lambda () (m3b75@match-each+ m3ba2@e (vector-ref m3ba3@p '1) (vector-ref m3ba3@p '2) (vector-ref m3ba3@p '3) m3ba4@m* m3ba5@s* m3ba6@ae* m3ba7@r)) (lambda (m3bba@m3bb5 m3bbb@m3bb7 m3bbc@m3bb9) ((lambda (m3bc0@r m3bc1@y-pat m3bc2@xr*) (and m3bc0@r (null? m3bc1@y-pat) (if (null? m3bc2@xr*) (m3b79@match-empty (vector-ref m3ba3@p '1) m3bc0@r) (m3b7b@combine m3bc2@xr* m3bc0@r)))) m3bbc@m3bb9 m3bbb@m3bb7 m3bba@m3bb5))) (if (memv m3bb0@t '(atom)) (and (fast-equal? (vector-ref m3ba3@p '1) (m2cbf@strip m3ba2@e m3ba4@m*)) m3ba7@r) (if (memv m3bb0@t '(vector)) (and (vector? m3ba2@e) (m3b7f@match (vector->list m3ba2@e) (vector-ref m3ba3@p '1) m3ba4@m* m3ba5@s* m3ba6@ae* m3ba7@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" m3ba3@p)))))))) (vector-ref m3ba3@p '0))))))) (set! m3b7f@match (lambda (m3b84@e m3b85@p m3b86@m* m3b87@s* m3b88@ae* m3b89@r) (if (not m3b89@r) '#f (if (eq? m3b85@p '_) m3b89@r (if (eq? m3b85@p 'any) (cons (m3b71@stx^ m3b84@e m3b86@m* m3b87@s* m3b88@ae*) m3b89@r) (if (m2c73@stx? m3b84@e) (and (not (m2c29@top-marked? m3b86@m*)) (call-with-values (lambda () (m2c91@join-wraps m3b86@m* m3b87@s* m3b88@ae* m3b84@e)) (lambda (m3b96@m3b91 m3b97@m3b93 m3b98@m3b95) ((lambda (m3b9c@ae* m3b9d@s* m3b9e@m*) (m3b7f@match (m2c77@stx-expr m3b84@e) m3b85@p m3b9e@m* m3b9d@s* m3b9c@ae* m3b89@r)) m3b98@m3b95 m3b97@m3b93 m3b96@m3b91)))) (if (m284a@m2769@annotation? m3b84@e) (m3b7f@match (m284c@m276d@annotation-expression m3b84@e) m3b85@p m3b86@m* m3b87@s* m3b88@ae* m3b89@r) (m3b7d@match* m3b84@e m3b85@p m3b86@m* m3b87@s* m3b88@ae* m3b89@r)))))))) (lambda (m3b80@e m3b81@p) (m3b7f@match m3b80@e m3b81@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! m2eb8@ellipsis? (lambda (m3c54@x) (and (m2cab@id? m3c54@x) (m2cb3@free-id=? m3c54@x (m2e40@scheme-stx '...))))) (set! m2eba@underscore? (lambda (m3c56@x) (and (m2cab@id? m3c56@x) (m2cb3@free-id=? m3c56@x (m2e40@scheme-stx '_))))) (set! m2ebc@verify-literals (lambda (m3c58@lits m3c59@expr) (for-each (lambda (m3c5c@x) (if (or (not (m2cab@id? m3c5c@x)) (m2eb8@ellipsis? m3c5c@x) (m2eba@underscore? m3c5c@x)) (m2f9f@syntax-violation '#f '"invalid literal" m3c59@expr m3c5c@x) (void))) m3c58@lits))) (set! m2ebe@syntax-case-transformer ((lambda () ((lambda (m3c5f@build-dispatch-call m3c61@invalid-ids-error m3c63@gen-clause m3c65@gen-syntax-case) (begin (set! m3c5f@build-dispatch-call (lambda (m3cd0@pvars m3cd1@expr m3cd2@y m3cd3@r m3cd4@mr) ((lambda (m3cda@ids m3cdb@levels) ((lambda (m3cde@labels m3cdf@new-vars) ((lambda (m3ce2@body) (list '(primitive apply) (m2c07@m2b47@build-lambda '#f m3cdf@new-vars m3ce2@body) m3cd2@y)) (m2ed8@chi-expr (m2c97@add-subst (m2c66@make-full-rib m3cda@ids m3cde@labels) m3cd1@expr) (append (map (lambda (m3ce4@label m3ce5@var m3ce6@level) (cons m3ce4@label (m2ccb@make-binding 'syntax (cons m3ce5@var m3ce6@level)))) m3cde@labels m3cdf@new-vars (map cdr m3cd0@pvars)) m3cd3@r) m3cd4@mr))) (map m2c2f@gen-label m3cda@ids) (map m2c2b@gen-lexical m3cda@ids))) (map car m3cd0@pvars) (map cdr m3cd0@pvars)))) (set! m3c61@invalid-ids-error (lambda (m3cc4@id* m3cc5@e m3cc6@class) ((letrec ((m3cca@find (lambda (m3ccc@id* m3ccd@ok*) (if (null? m3ccc@id*) (m2f9f@syntax-violation '#f '"invalid syntax" m3cc5@e) (if (m2cab@id? (car m3ccc@id*)) (if (m2cb9@bound-id-member? (car m3ccc@id*) m3ccd@ok*) (m2f9b@syntax-error (car m3ccc@id*) '"duplicate " m3cc6@class) (m3cca@find (cdr m3ccc@id*) (cons (car m3ccc@id*) m3ccd@ok*))) (m2f9b@syntax-error (car m3ccc@id*) '"invalid " m3cc6@class)))))) m3cca@find) m3cc4@id* '()))) (set! m3c63@gen-clause (lambda (m3c9c@x m3c9d@keys m3c9e@clauses m3c9f@r m3ca0@mr m3ca1@pat m3ca2@fender m3ca3@expr) (call-with-values (lambda () (m2eb4@convert-pattern m3ca1@pat m3c9d@keys)) (lambda (m3cb0@m3cad m3cb1@m3caf) ((lambda (m3cb4@pvars m3cb5@p) (if (not (m2cb7@distinct-bound-ids? (map car m3cb4@pvars))) (m3c61@invalid-ids-error (map car m3cb4@pvars) m3ca1@pat '"pattern variable") (if (not (for-all (lambda (m3cb8@x) (not (m2eb8@ellipsis? (car m3cb8@x)))) m3cb4@pvars)) (m2f9f@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" m3ca1@pat) ((lambda (m3cba@y) ((lambda (m3cbc@test) ((lambda (m3cbe@conseq) ((lambda (m3cc0@altern) (list (m2c07@m2b47@build-lambda '#f (list m3cba@y) (list 'if m3cbc@test m3cbe@conseq m3cc0@altern)) (list '(primitive syntax-dispatch) m3c9c@x (list 'quote m3cb5@p)))) (m3c65@gen-syntax-case m3c9c@x m3c9d@keys m3c9e@clauses m3c9f@r m3ca0@mr))) (m3c5f@build-dispatch-call m3cb4@pvars m3ca3@expr m3cba@y m3c9f@r m3ca0@mr))) (if (eq? m3ca2@fender '#t) m3cba@y ((lambda (m3cc2@call) (list 'if m3cba@y m3cc2@call (list 'quote '#f))) (m3c5f@build-dispatch-call m3cb4@pvars m3ca2@fender m3cba@y m3c9f@r m3ca0@mr))))) (m2c2b@gen-lexical 'tmp))))) m3cb1@m3caf m3cb0@m3cad))))) (set! m3c65@gen-syntax-case (lambda (m3c7a@x m3c7b@keys m3c7c@clauses m3c7d@r m3c7e@mr) (if (null? m3c7c@clauses) (list '(primitive syntax-error) m3c7a@x) ((lambda (m3c84@t) ((lambda (m3c86@ls/false) (if m3c86@ls/false (apply (lambda (m3c88@pat m3c89@expr) (if (and (m2cab@id? m3c88@pat) (not (m2cb9@bound-id-member? m3c88@pat m3c7b@keys)) (not (m2eb8@ellipsis? m3c88@pat))) (if (m2cb3@free-id=? m3c88@pat (m2e40@scheme-stx '_)) (m2ed8@chi-expr m3c89@expr m3c7d@r m3c7e@mr) ((lambda (m3c8c@lab m3c8d@lex) ((lambda (m3c90@body) (list (m2c07@m2b47@build-lambda '#f (list m3c8d@lex) m3c90@body) m3c7a@x)) (m2ed8@chi-expr (m2c97@add-subst (m2c66@make-full-rib (list m3c88@pat) (list m3c8c@lab)) m3c89@expr) (cons (cons m3c8c@lab (m2ccb@make-binding 'syntax (cons m3c8d@lex '0))) m3c7d@r) m3c7e@mr))) (m2c2f@gen-label m3c88@pat) (m2c2b@gen-lexical m3c88@pat))) (m3c63@gen-clause m3c7a@x m3c7b@keys (cdr m3c7c@clauses) m3c7d@r m3c7e@mr m3c88@pat '#t m3c89@expr))) m3c86@ls/false) ((lambda (m3c92@t) ((lambda (m3c94@ls/false) (if m3c94@ls/false (apply (lambda (m3c96@pat m3c97@fender m3c98@expr) (m3c63@gen-clause m3c7a@x m3c7b@keys (cdr m3c7c@clauses) m3c7d@r m3c7e@mr m3c96@pat m3c97@fender m3c98@expr)) m3c94@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3c92@t))) (m2eb6@syntax-dispatch m3c92@t '(any any any)))) m3c84@t))) (m2eb6@syntax-dispatch m3c84@t '(any any)))) (car m3c7c@clauses))))) (lambda (m3c66@e m3c67@r m3c68@mr) ((lambda (m3c6c@t) ((lambda (m3c6e@ls/false) (if m3c6e@ls/false (apply (lambda (m3c70@expr m3c71@keys m3c72@clauses) (begin (m2ebc@verify-literals m3c71@keys m3c66@e) ((lambda (m3c76@x) ((lambda (m3c78@body) (list (m2c07@m2b47@build-lambda '#f (list m3c76@x) m3c78@body) (m2ed8@chi-expr m3c70@expr m3c67@r m3c68@mr))) (m3c65@gen-syntax-case m3c76@x m3c71@keys m3c72@clauses m3c67@r m3c68@mr))) (m2c2b@gen-lexical 'tmp)))) m3c6e@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3c6c@t))) (m2eb6@syntax-dispatch m3c6c@t '(_ any each-any . each-any)))) m3c66@e)))) '#f '#f '#f '#f)))) (set! m2ec0@ellipsis-map (lambda (m3cea@proc m3ceb@ls . m3cee@ls*) ((lambda (m3cf1@who) (begin (set! m3cf1@who '...) (begin (if (not (list? m3ceb@ls)) (assertion-violation m3cf1@who '"not a list" m3ceb@ls) (void)) (if (not (null? m3cee@ls*)) ((lambda (m3cf2@n) (for-each (lambda (m3cf4@x) (begin (if (not (list? m3cf4@x)) (assertion-violation m3cf1@who '"not a list" m3cf4@x) (void)) (if (not (= (length m3cf4@x) m3cf2@n)) (assertion-violation m3cf1@who '"length mismatch" m3ceb@ls m3cf4@x) (void)))) m3cee@ls*)) (length m3ceb@ls)) (void)) (apply map m3cea@proc m3ceb@ls m3cee@ls*)))) '#f))) (set! m2ec2@syntax-transformer ((lambda () ((lambda (m3cf7@gen-syntax m3cf9@gen-ref m3cfb@gen-append m3cfd@gen-mappend m3cff@gen-map m3d01@gen-cons m3d03@gen-vector m3d05@regen) (begin (set! m3cf7@gen-syntax (lambda (m3d6e@src m3d6f@e m3d70@r m3d71@maps m3d72@ellipsis? m3d73@vec?) ((lambda (m3d7a@t) ((lambda (m3d7c@ls/false) (if (and m3d7c@ls/false (apply (lambda (m3d7e@dots) (m3d72@ellipsis? m3d7e@dots)) m3d7c@ls/false)) (apply (lambda (m3d80@dots) (m2f9f@syntax-violation '#f '"misplaced ellipsis in syntax form" m3d6e@src)) m3d7c@ls/false) ((lambda (m3d82@t) ((lambda (m3d84@ls/false) (if (and m3d84@ls/false (apply (lambda (m3d86@id) (m2cab@id? m3d86@id)) m3d84@ls/false)) (apply (lambda (m3d88@id) ((lambda (m3d8a@label) ((lambda (m3d8c@b) ((lambda () (if (eq? (m2ccd@binding-type m3d8c@b) 'syntax) (call-with-values (lambda () ((lambda (m3d92@var.lev) (m3cf9@gen-ref m3d6e@src (car m3d92@var.lev) (cdr m3d92@var.lev) m3d71@maps)) (m2ccf@binding-value m3d8c@b))) (lambda (m3d94@m3d8f m3d95@m3d91) ((lambda (m3d98@maps m3d99@var) (values (list 'ref m3d99@var) m3d98@maps)) m3d95@m3d91 m3d94@m3d8f))) (values (list 'quote m3d6f@e) m3d71@maps))))) (m2cc9@label->binding m3d8a@label m3d70@r))) (m2cc5@id->label m3d6f@e))) m3d84@ls/false) ((lambda (m3d9c@t) ((lambda (m3d9e@ls/false) (if (and m3d9e@ls/false (apply (lambda (m3da0@dots m3da1@e) (m3d72@ellipsis? m3da0@dots)) m3d9e@ls/false)) (apply (lambda (m3da4@dots m3da5@e) (if m3d73@vec? (m2f9f@syntax-violation '#f '"misplaced ellipsis in syntax form" m3d6e@src) (m3cf7@gen-syntax m3d6e@src m3da5@e m3d70@r m3d71@maps (lambda (m3da8@x) '#f) '#f))) m3d9e@ls/false) ((lambda (m3daa@t) ((lambda (m3dac@ls/false) (if (and m3dac@ls/false (apply (lambda (m3dae@x m3daf@dots m3db0@y) (m3d72@ellipsis? m3daf@dots)) m3dac@ls/false)) (apply (lambda (m3db4@x m3db5@dots m3db6@y) ((letrec ((m3dba@f (lambda (m3dbc@y m3dbd@k) ((lambda (m3dc0@t) ((lambda (m3dc2@ls/false) (if m3dc2@ls/false (apply (lambda () (m3dbd@k m3d71@maps)) m3dc2@ls/false) ((lambda (m3dc4@t) ((lambda (m3dc6@ls/false) (if (and m3dc6@ls/false (apply (lambda (m3dc8@dots m3dc9@y) (m3d72@ellipsis? m3dc8@dots)) m3dc6@ls/false)) (apply (lambda (m3dcc@dots m3dcd@y) (m3dba@f m3dcd@y (lambda (m3dd0@maps) (call-with-values (lambda () (m3dbd@k (cons '() m3dd0@maps))) (lambda (m3dd6@m3dd3 m3dd7@m3dd5) ((lambda (m3dda@maps m3ddb@x) (if (null? (car m3dda@maps)) (m2f9f@syntax-violation '#f '"extra ellipsis in syntax form" m3d6e@src) (values (m3cfd@gen-mappend m3ddb@x (car m3dda@maps)) (cdr m3dda@maps)))) m3dd7@m3dd5 m3dd6@m3dd3)))))) m3dc6@ls/false) ((lambda (m3dde@t) ((lambda (m3de0@ls/false) (if m3de0@ls/false (apply (lambda () (call-with-values (lambda () (m3cf7@gen-syntax m3d6e@src m3dbc@y m3d70@r m3d71@maps m3d72@ellipsis? m3d73@vec?)) (lambda (m3de6@m3de3 m3de7@m3de5) ((lambda (m3dea@maps m3deb@y) (call-with-values (lambda () (m3dbd@k m3dea@maps)) (lambda (m3df2@m3def m3df3@m3df1) ((lambda (m3df6@maps m3df7@x) (values (m3cfb@gen-append m3df7@x m3deb@y) m3df6@maps)) m3df3@m3df1 m3df2@m3def)))) m3de7@m3de5 m3de6@m3de3)))) m3de0@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3dde@t))) (m2eb6@syntax-dispatch m3dde@t '_))) m3dc4@t))) (m2eb6@syntax-dispatch m3dc4@t '(any . any)))) m3dc0@t))) (m2eb6@syntax-dispatch m3dc0@t '()))) m3dbc@y)))) m3dba@f) m3db6@y (lambda (m3dfa@maps) (call-with-values (lambda () (m3cf7@gen-syntax m3d6e@src m3db4@x m3d70@r (cons '() m3dfa@maps) m3d72@ellipsis? '#f)) (lambda (m3e00@m3dfd m3e01@m3dff) ((lambda (m3e04@maps m3e05@x) (if (null? (car m3e04@maps)) (m2f9f@syntax-violation '#f '"extra ellipsis in syntax form" m3d6e@src) (values (m3cff@gen-map m3e05@x (car m3e04@maps)) (cdr m3e04@maps)))) m3e01@m3dff m3e00@m3dfd)))))) m3dac@ls/false) ((lambda (m3e08@t) ((lambda (m3e0a@ls/false) (if m3e0a@ls/false (apply (lambda (m3e0c@x m3e0d@y) (call-with-values (lambda () (m3cf7@gen-syntax m3d6e@src m3e0c@x m3d70@r m3d71@maps m3d72@ellipsis? '#f)) (lambda (m3e14@m3e11 m3e15@m3e13) ((lambda (m3e18@maps m3e19@xnew) (call-with-values (lambda () (m3cf7@gen-syntax m3d6e@src m3e0d@y m3d70@r m3e18@maps m3d72@ellipsis? m3d73@vec?)) (lambda (m3e20@m3e1d m3e21@m3e1f) ((lambda (m3e24@maps m3e25@ynew) (values (m3d01@gen-cons m3d6f@e m3e0c@x m3e0d@y m3e19@xnew m3e25@ynew) m3e24@maps)) m3e21@m3e1f m3e20@m3e1d)))) m3e15@m3e13 m3e14@m3e11)))) m3e0a@ls/false) ((lambda (m3e28@t) ((lambda (m3e2a@ls/false) (if m3e2a@ls/false (apply (lambda (m3e2c@ls) (call-with-values (lambda () (m3cf7@gen-syntax m3d6e@src m3e2c@ls m3d70@r m3d71@maps m3d72@ellipsis? '#t)) (lambda (m3e32@m3e2f m3e33@m3e31) ((lambda (m3e36@maps m3e37@lsnew) (values (m3d03@gen-vector m3d6f@e m3e2c@ls m3e37@lsnew) m3e36@maps)) m3e33@m3e31 m3e32@m3e2f)))) m3e2a@ls/false) ((lambda (m3e3a@t) ((lambda (m3e3c@ls/false) (if m3e3c@ls/false (apply (lambda () (values (list 'quote m3d6f@e) m3d71@maps)) m3e3c@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3e3a@t))) (m2eb6@syntax-dispatch m3e3a@t '_))) m3e28@t))) (m2eb6@syntax-dispatch m3e28@t '#(vector each-any)))) m3e08@t))) (m2eb6@syntax-dispatch m3e08@t '(any . any)))) m3daa@t))) (m2eb6@syntax-dispatch m3daa@t '(any any . any)))) m3d9c@t))) (m2eb6@syntax-dispatch m3d9c@t '(any any)))) m3d82@t))) (m2eb6@syntax-dispatch m3d82@t 'any))) m3d7a@t))) (m2eb6@syntax-dispatch m3d7a@t 'any))) m3d6f@e))) (set! m3cf9@gen-ref (lambda (m3d54@src m3d55@var m3d56@level m3d57@maps) (if (= m3d56@level '0) (values m3d55@var m3d57@maps) (if (null? m3d57@maps) (m2f9f@syntax-violation '#f '"missing ellipsis in syntax form" m3d54@src) (call-with-values (lambda () (m3cf9@gen-ref m3d54@src m3d55@var (- m3d56@level '1) (cdr m3d57@maps))) (lambda (m3d60@m3d5d m3d61@m3d5f) ((lambda (m3d64@outer-maps m3d65@outer-var) ((lambda (m3d68@t) (if m3d68@t ((lambda (m3d6a@b) (values (cdr m3d6a@b) m3d57@maps)) m3d68@t) ((lambda (m3d6c@inner-var) (values m3d6c@inner-var (cons (cons (cons m3d65@outer-var m3d6c@inner-var) (car m3d57@maps)) m3d64@outer-maps))) (m2c2b@gen-lexical 'tmp)))) (assq m3d65@outer-var (car m3d57@maps)))) m3d61@m3d5f m3d60@m3d5d))))))) (set! m3cfb@gen-append (lambda (m3d50@x m3d51@y) (if (fast-equal? m3d51@y ''()) m3d50@x (list 'append m3d50@x m3d51@y)))) (set! m3cfd@gen-mappend (lambda (m3d4c@e m3d4d@map-env) (list 'apply '(primitive append) (m3cff@gen-map m3d4c@e m3d4d@map-env)))) (set! m3cff@gen-map (lambda (m3d3a@e m3d3b@map-env) ((lambda (m3d3e@formals m3d3f@actuals) (if (eq? (car m3d3a@e) 'ref) (car m3d3f@actuals) (if (for-all (lambda (m3d42@x) (and (eq? (car m3d42@x) 'ref) (memq (cadr m3d42@x) m3d3e@formals))) (cdr m3d3a@e)) ((lambda (m3d44@args) (cons 'map (cons (list 'primitive (car m3d3a@e)) m3d44@args))) (map ((lambda (m3d46@r) (lambda (m3d48@x) (cdr (assq (cadr m3d48@x) m3d46@r)))) (map cons m3d3e@formals m3d3f@actuals)) (cdr m3d3a@e))) (cons* 'map (list 'lambda m3d3e@formals m3d3a@e) m3d3f@actuals)))) (map cdr m3d3b@map-env) (map (lambda (m3d4a@x) (list 'ref (car m3d4a@x))) m3d3b@map-env)))) (set! m3d01@gen-cons (lambda (m3d2a@e m3d2b@x m3d2c@y m3d2d@xnew m3d2e@ynew) ((lambda (m3d34@t) (if (memv m3d34@t '(quote)) (if (eq? (car m3d2d@xnew) 'quote) ((lambda (m3d36@xnew m3d37@ynew) (if (and (eq? m3d36@xnew m3d2b@x) (eq? m3d37@ynew m3d2c@y)) (list 'quote m3d2a@e) (list 'quote (cons m3d36@xnew m3d37@ynew)))) (cadr m3d2d@xnew) (cadr m3d2e@ynew)) (if (null? (cadr m3d2e@ynew)) (list 'list m3d2d@xnew) (list 'cons m3d2d@xnew m3d2e@ynew))) (if (memv m3d34@t '(list)) (cons 'list (cons m3d2d@xnew (cdr m3d2e@ynew))) (list 'cons m3d2d@xnew m3d2e@ynew)))) (car m3d2e@ynew)))) (set! m3d03@gen-vector (lambda (m3d24@e m3d25@ls m3d26@lsnew) (if (eq? (car m3d26@lsnew) 'quote) (if (eq? (cadr m3d26@lsnew) m3d25@ls) (list 'quote m3d24@e) (list 'quote (list->vector (cadr m3d26@lsnew)))) (if (eq? (car m3d26@lsnew) 'list) (cons 'vector (cdr m3d26@lsnew)) (list 'list->vector m3d26@lsnew))))) (set! m3d05@regen (lambda (m3d1e@x) ((lambda (m3d20@t) (if (memv m3d20@t '(ref)) (cadr m3d1e@x) (if (memv m3d20@t '(primitive)) (list 'primitive (cadr m3d1e@x)) (if (memv m3d20@t '(quote)) (list 'quote (cadr m3d1e@x)) (if (memv m3d20@t '(lambda)) (m2c07@m2b47@build-lambda '#f (cadr m3d1e@x) (m3d05@regen (caddr m3d1e@x))) (if (memv m3d20@t '(map)) ((lambda (m3d22@ls) (cons '(primitive ellipsis-map) m3d22@ls)) (map m3d05@regen (cdr m3d1e@x))) (cons (list 'primitive (car m3d1e@x)) (map m3d05@regen (cdr m3d1e@x))))))))) (car m3d1e@x)))) (lambda (m3d06@e m3d07@r m3d08@mr) ((lambda (m3d0c@t) ((lambda (m3d0e@ls/false) (if m3d0e@ls/false (apply (lambda (m3d10@x) (call-with-values (lambda () (m3cf7@gen-syntax m3d06@e m3d10@x m3d07@r '() m2eb8@ellipsis? '#f)) (lambda (m3d16@m3d13 m3d17@m3d15) ((lambda (m3d1a@maps m3d1b@e) (m3d05@regen m3d1b@e)) m3d17@m3d15 m3d16@m3d13)))) m3d0e@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3d0c@t))) (m2eb6@syntax-dispatch m3d0c@t '(_ any)))) m3d06@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! m2ec4@core-macro-transformer (lambda (m3e3e@name) ((lambda (m3e40@t) (if (memv m3e40@t '(quote)) m2e66@quote-transformer (if (memv m3e40@t '(lambda)) m2e6a@lambda-transformer (if (memv m3e40@t '(case-lambda)) m2e68@case-lambda-transformer (if (memv m3e40@t '(letrec)) m2e4e@letrec-transformer (if (memv m3e40@t '(letrec*)) m2e50@letrec*-transformer (if (memv m3e40@t '(if)) m2e5e@if-transformer (if (memv m3e40@t '(and)) m2e60@and-transformer (if (memv m3e40@t '(or)) m2e62@or-transformer (if (memv m3e40@t '(foreign-call)) m2eb2@foreign-call-transformer (if (memv m3e40@t '(syntax-case)) m2ebe@syntax-case-transformer (if (memv m3e40@t '(syntax)) m2ec2@syntax-transformer (if (memv m3e40@t '(type-descriptor)) m2e54@type-descriptor-transformer (if (memv m3e40@t '(record-type-descriptor)) m2e56@record-type-descriptor-transformer (if (memv m3e40@t '(record-constructor-descriptor)) m2e58@record-constructor-descriptor-transformer (if (memv m3e40@t '(fluid-let-syntax)) m2e52@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" m3e3e@name))))))))))))))))) m3e3e@name))) (set! m2ec6@symbol-macro (lambda (m3e42@x m3e43@set) ((lambda (m3e46@t) ((lambda (m3e48@ls/false) (if (and m3e48@ls/false (apply (lambda (m3e4a@name) (and (m2cab@id? m3e4a@name) (memq (m2cad@id->sym m3e4a@name) m3e43@set))) m3e48@ls/false)) (apply (lambda (m3e4c@name) (m2e6c@bless (list 'quote m3e4c@name))) m3e48@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3e46@t))) (m2eb6@syntax-dispatch m3e46@t '(_ any)))) m3e42@x))) (set! m2ec8@macro-transformer (lambda (m3e4e@x) (if (procedure? m3e4e@x) m3e4e@x (if (symbol? m3e4e@x) ((lambda (m3e50@t) (if (memv m3e50@t '(define-record-type)) m2eaa@define-record-type-macro (if (memv m3e50@t '(define-struct)) m2ea8@define-struct-macro (if (memv m3e50@t '(include)) m2e9e@include-macro (if (memv m3e50@t '(cond)) m2e9a@cond-macro (if (memv m3e50@t '(let)) m2e72@let-macro (if (memv m3e50@t '(do)) m2e92@do-macro (if (memv m3e50@t '(or)) m2e96@or-macro (if (memv m3e50@t '(and)) m2e98@and-macro (if (memv m3e50@t '(let*)) m2e94@let*-macro (if (memv m3e50@t '(let-values)) m2e74@let-values-macro (if (memv m3e50@t '(let*-values)) m2e76@let*-values-macro (if (memv m3e50@t '(syntax-rules)) m2ea2@syntax-rules-macro (if (memv m3e50@t '(quasiquote)) m2ea4@quasiquote-macro (if (memv m3e50@t '(quasisyntax)) m2ea6@quasisyntax-macro (if (memv m3e50@t '(with-syntax)) m2e6e@with-syntax-macro (if (memv m3e50@t '(when)) m2e5a@when-macro (if (memv m3e50@t '(unless)) m2e5c@unless-macro (if (memv m3e50@t '(case)) m2e64@case-macro (if (memv m3e50@t '(identifier-syntax)) m2e90@identifier-syntax-macro (if (memv m3e50@t '(time)) m2e88@time-macro (if (memv m3e50@t '(delay)) m2e8a@delay-macro (if (memv m3e50@t '(assert)) m2e8c@assert-macro (if (memv m3e50@t '(endianness)) m2e8e@endianness-macro (if (memv m3e50@t '(guard)) m2e84@guard-macro (if (memv m3e50@t '(define-enumeration)) m2e86@define-enumeration-macro (if (memv m3e50@t '(trace-lambda)) m2e78@trace-lambda-macro (if (memv m3e50@t '(trace-define)) m2e7a@trace-define-macro (if (memv m3e50@t '(trace-define-syntax)) m2e7c@trace-define-syntax-macro (if (memv m3e50@t '(trace-let-syntax)) m2e80@trace-let-syntax-macro (if (memv m3e50@t '(trace-letrec-syntax)) m2e82@trace-letrec-syntax-macro (if (memv m3e50@t '(define-condition-type)) m2eac@define-condition-type-macro (if (memv m3e50@t '(parameterize)) m2eb0@parameterize-macro (if (memv m3e50@t '(include-into)) m2ea0@include-into-macro (if (memv m3e50@t '(eol-style)) (lambda (m3e52@x) (m2ec6@symbol-macro m3e52@x '(none lf cr crlf nel crnel ls))) (if (memv m3e50@t '(error-handling-mode)) (lambda (m3e54@x) (m2ec6@symbol-macro m3e54@x '(ignore raise replace))) (if (memv m3e50@t '(buffer-mode)) (lambda (m3e56@x) (m2ec6@symbol-macro m3e56@x '(none line block))) (if (memv m3e50@t '(file-options)) m2c1e@file-options-macro (if (memv m3e50@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) m2eae@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" m3e4e@x)))))))))))))))))))))))))))))))))))))))) m3e4e@x) (error 'core-macro-transformer '"BUG: invalid macro" m3e4e@x))))) (set! m2eca@local-macro-transformer (lambda (m3e58@x) (car m3e58@x))) (set! m2ecc@do-macro-call (lambda (m3e5a@transformer m3e5b@expr) ((lambda (m3e5e@out) (begin ((letrec ((m3e60@f (lambda (m3e62@x) (if (not (m2c73@stx? m3e62@x)) (if (pair? m3e62@x) (begin (m3e60@f (car m3e62@x)) (m3e60@f (cdr m3e62@x))) (if (vector? m3e62@x) (vector-for-each m3e60@f m3e62@x) (if (symbol? m3e62@x) (m2f9f@syntax-violation '#f '"raw symbol encountered in output of macro" m3e5b@expr m3e62@x) (void)))) (void))))) m3e60@f) m3e5e@out) (m2c95@add-mark (m2c8b@gen-mark) m3e5e@out m3e5b@expr))) (m3e5a@transformer (m2c95@add-mark m2c8d@anti-mark m3e5b@expr '#f))))) (set! m2ece@chi-macro (lambda (m3e64@p m3e65@e) (m2ecc@do-macro-call (m2ec8@macro-transformer m3e64@p) m3e65@e))) (set! m2ed0@chi-local-macro (lambda (m3e68@p m3e69@e) (m2ecc@do-macro-call (m2eca@local-macro-transformer m3e68@p) m3e69@e))) (set! m2ed2@chi-global-macro (lambda (m3e6c@p m3e6d@e) ((lambda (m3e70@lib m3e71@loc) (begin (m2ad0@m2972@visit-library m3e70@lib) ((lambda (m3e74@x) ((lambda (m3e76@transformer) (m2ecc@do-macro-call m3e76@transformer m3e6d@e)) (if (procedure? m3e74@x) m3e74@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" m3e74@x)))) (symbol-value m3e71@loc)))) (car m3e6c@p) (cdr m3e6c@p)))) (set! m2ed4@chi-expr* (lambda (m3e78@e* m3e79@r m3e7a@mr) (if (null? m3e78@e*) '() ((lambda (m3e7e@e) (cons m3e7e@e (m2ed4@chi-expr* (cdr m3e78@e*) m3e79@r m3e7a@mr))) (m2ed8@chi-expr (car m3e78@e*) m3e79@r m3e7a@mr))))) (set! m2ed6@chi-application (lambda (m3e80@e m3e81@r m3e82@mr) ((lambda (m3e86@t) ((lambda (m3e88@ls/false) (if m3e88@ls/false (apply (lambda (m3e8a@rator m3e8b@rands) ((lambda (m3e8e@rator) (cons m3e8e@rator (m2ed4@chi-expr* m3e8b@rands m3e81@r m3e82@mr))) (m2ed8@chi-expr m3e8a@rator m3e81@r m3e82@mr))) m3e88@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3e86@t))) (m2eb6@syntax-dispatch m3e86@t '(any . each-any)))) m3e80@e))) (set! m2ed8@chi-expr (lambda (m3e90@e m3e91@r m3e92@mr) (call-with-values (lambda () (m2cd3@syntax-type m3e90@e m3e91@r)) (lambda (m3e9c@m3e97 m3e9d@m3e99 m3e9e@m3e9b) ((lambda (m3ea2@kwd m3ea3@value m3ea4@type) ((lambda (m3ea8@t) (if (memv m3ea8@t '(core-macro)) ((lambda (m3eaa@transformer) (m3eaa@transformer m3e90@e m3e91@r m3e92@mr)) (m2ec4@core-macro-transformer m3ea3@value)) (if (memv m3ea8@t '(global)) ((lambda (m3eac@lib) ((lambda (m3eae@loc) ((lambda () (begin ((m2f21@inv-collector) m3eac@lib) m3eae@loc)))) (cdr m3ea3@value))) (car m3ea3@value)) (if (memv m3ea8@t '(core-prim)) ((lambda (m3eb0@name) (list 'primitive m3eb0@name)) m3ea3@value) (if (memv m3ea8@t '(call)) (m2ed6@chi-application m3e90@e m3e91@r m3e92@mr) (if (memv m3ea8@t '(lexical)) ((lambda (m3eb2@lex) m3eb2@lex) (m2e42@lexical-var m3ea3@value)) (if (memv m3ea8@t '(global-macro global-macro!)) (m2ed8@chi-expr (m2ed2@chi-global-macro m3ea3@value m3e90@e) m3e91@r m3e92@mr) (if (memv m3ea8@t '(local-macro local-macro!)) (m2ed8@chi-expr (m2ed0@chi-local-macro m3ea3@value m3e90@e) m3e91@r m3e92@mr) (if (memv m3ea8@t '(macro macro!)) (m2ed8@chi-expr (m2ece@chi-macro m3ea3@value m3e90@e) m3e91@r m3e92@mr) (if (memv m3ea8@t '(constant)) ((lambda (m3eb4@datum) (list 'quote m3eb4@datum)) m3ea3@value) (if (memv m3ea8@t '(set!)) (m2eda@chi-set! m3e90@e m3e91@r m3e92@mr) (if (memv m3ea8@t '(begin)) ((lambda (m3eb6@t) ((lambda (m3eb8@ls/false) (if m3eb8@ls/false (apply (lambda (m3eba@x m3ebb@x*) (m2c0a@m2b79@build-sequence '#f (m2ed4@chi-expr* (cons m3eba@x m3ebb@x*) m3e91@r m3e92@mr))) m3eb8@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3eb6@t))) (m2eb6@syntax-dispatch m3eb6@t '(_ any . each-any)))) m3e90@e) (if (memv m3ea8@t '(let-syntax letrec-syntax)) ((lambda (m3ebe@t) ((lambda (m3ec0@ls/false) (if (and m3ec0@ls/false (apply (lambda (m3ec2@xlhs* m3ec3@xrhs* m3ec4@xbody m3ec5@xbody*) (if (not (m2cb5@valid-bound-ids? m3ec2@xlhs*)) (m2f9f@syntax-violation '#f '"invalid identifiers" m3e90@e) (void))) m3ec0@ls/false)) (apply (lambda (m3eca@xlhs* m3ecb@xrhs* m3ecc@xbody m3ecd@xbody*) ((lambda (m3ed2@xlab*) ((lambda (m3ed4@xrib) ((lambda (m3ed6@xb*) ((lambda () (m2c0a@m2b79@build-sequence '#f (m2ed4@chi-expr* (map (lambda (m3ed8@x) (m2c97@add-subst m3ed4@xrib m3ed8@x)) (cons m3ecc@xbody m3ecd@xbody*)) (append (map cons m3ed2@xlab* m3ed6@xb*) m3e91@r) (append (map cons m3ed2@xlab* m3ed6@xb*) m3e92@mr)))))) (map (lambda (m3eda@x) (m2ce9@make-eval-transformer (m2f13@expand-transformer (if (eq? m3ea4@type 'let-syntax) m3eda@x (m2c97@add-subst m3ed4@xrib m3eda@x)) m3e92@mr))) m3ecb@xrhs*))) (m2c66@make-full-rib m3eca@xlhs* m3ed2@xlab*))) (map m2c2f@gen-label m3eca@xlhs*))) m3ec0@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3ebe@t))) (m2eb6@syntax-dispatch m3ebe@t '(_ #(each (any any)) any . each-any)))) m3e90@e) (if (memv m3ea8@t '(displaced-lexical)) (m2f9f@syntax-violation '#f '"identifier out of context" m3e90@e) (if (memv m3ea8@t '(syntax)) (m2f9f@syntax-violation '#f '"reference to pattern variable outside a syntax form" m3e90@e) (if (memv m3ea8@t '(define define-syntax module import library)) (m2f9f@syntax-violation '#f (string-append ((lambda (m3edc@t) (if (memv m3edc@t '(define)) '"a definition" (if (memv m3edc@t '(define-syntax)) '"a define-syntax" (if (memv m3edc@t '(module)) '"a module definition" (if (memv m3edc@t '(library)) '"a library definition" (if (memv m3edc@t '(import)) '"an import declaration" (if (memv m3edc@t '(export)) '"an export declaration" '"a non-expression"))))))) m3ea4@type) '" was found where an expression was expected") m3e90@e) (if (memv m3ea8@t '(mutable)) (m2f9f@syntax-violation '#f '"attempt to reference an unexportable variable" m3e90@e) (m2f9f@syntax-violation '#f '"invalid expression" m3e90@e)))))))))))))))))) m3ea4@type)) m3e9e@m3e9b m3e9d@m3e99 m3e9c@m3e97))))) (set! m2eda@chi-set! (lambda (m3ede@e m3edf@r m3ee0@mr) ((lambda (m3ee4@t) ((lambda (m3ee6@ls/false) (if (and m3ee6@ls/false (apply (lambda (m3ee8@x m3ee9@v) (m2cab@id? m3ee8@x)) m3ee6@ls/false)) (apply (lambda (m3eec@x m3eed@v) (call-with-values (lambda () (m2cd3@syntax-type m3eec@x m3edf@r)) (lambda (m3ef6@m3ef1 m3ef7@m3ef3 m3ef8@m3ef5) ((lambda (m3efc@kwd m3efd@value m3efe@type) ((lambda (m3f02@t) (if (memv m3f02@t '(lexical)) (begin (m2e46@set-lexical-mutable! m3efd@value '#t) (list 'set! (m2e42@lexical-var m3efd@value) (m2ed8@chi-expr m3eed@v m3edf@r m3ee0@mr))) (if (memv m3f02@t '(core-prim)) (m2f9f@syntax-violation '#f '"cannot modify imported core primitive" m3ede@e) (if (memv m3f02@t '(global)) (m2f9f@syntax-violation '#f '"attempt to modify imported binding" m3ede@e) (if (memv m3f02@t '(global-macro!)) (m2ed8@chi-expr (m2ed2@chi-global-macro m3efd@value m3ede@e) m3edf@r m3ee0@mr) (if (memv m3f02@t '(local-macro!)) (m2ed8@chi-expr (m2ed0@chi-local-macro m3efd@value m3ede@e) m3edf@r m3ee0@mr) (if (memv m3f02@t '(mutable)) (m2f9f@syntax-violation '#f '"attempt to assign to an unexportable variable" m3ede@e) (m2f9f@syntax-violation '#f '"invalid syntax" m3ede@e)))))))) m3efe@type)) m3ef8@m3ef5 m3ef7@m3ef3 m3ef6@m3ef1)))) m3ee6@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3ee4@t))) (m2eb6@syntax-dispatch m3ee4@t '(_ any any)))) m3ede@e))) (set! m2edc@verify-formals (lambda (m3f04@fmls m3f05@stx) ((lambda (m3f08@t) ((lambda (m3f0a@ls/false) (if m3f0a@ls/false (apply (lambda (m3f0c@x*) (if (not (m2cb5@valid-bound-ids? m3f0c@x*)) (m2e70@invalid-fmls-error m3f05@stx m3f04@fmls) (void))) m3f0a@ls/false) ((lambda (m3f0e@t) ((lambda (m3f10@ls/false) (if m3f10@ls/false (apply (lambda (m3f12@x* m3f13@x) (if (not (m2cb5@valid-bound-ids? (cons m3f13@x m3f12@x*))) (m2e70@invalid-fmls-error m3f05@stx m3f04@fmls) (void))) m3f10@ls/false) ((lambda (m3f16@t) ((lambda (m3f18@ls/false) (if m3f18@ls/false (apply (lambda () (m2f9f@syntax-violation '#f '"invalid syntax" m3f05@stx)) m3f18@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3f16@t))) (m2eb6@syntax-dispatch m3f16@t '_))) m3f0e@t))) (m2eb6@syntax-dispatch m3f0e@t '#(each+ any () any)))) m3f08@t))) (m2eb6@syntax-dispatch m3f08@t 'each-any))) m3f04@fmls))) (set! m2ede@chi-lambda-clause (lambda (m3f1a@stx m3f1b@fmls m3f1c@body* m3f1d@r m3f1e@mr) ((lambda (m3f24@t) ((lambda (m3f26@ls/false) (if m3f26@ls/false (apply (lambda (m3f28@x*) (begin (m2edc@verify-formals m3f1b@fmls m3f1a@stx) ((lambda (m3f2a@lex* m3f2b@lab*) (values m3f2a@lex* (m2eee@chi-internal (m2c97@add-subst (m2c66@make-full-rib m3f28@x* m3f2b@lab*) m3f1c@body*) (m2e4a@add-lexicals m3f2b@lab* m3f2a@lex* m3f1d@r) m3f1e@mr))) (map m2c2b@gen-lexical m3f28@x*) (map m2c2f@gen-label m3f28@x*)))) m3f26@ls/false) ((lambda (m3f2e@t) ((lambda (m3f30@ls/false) (if m3f30@ls/false (apply (lambda (m3f32@x* m3f33@x) (begin (m2edc@verify-formals m3f1b@fmls m3f1a@stx) ((lambda (m3f36@lex* m3f37@lab* m3f38@lex m3f39@lab) (values (append m3f36@lex* m3f38@lex) (m2eee@chi-internal (m2c97@add-subst (m2c66@make-full-rib (cons m3f33@x m3f32@x*) (cons m3f39@lab m3f37@lab*)) m3f1c@body*) (m2e4a@add-lexicals (cons m3f39@lab m3f37@lab*) (cons m3f38@lex m3f36@lex*) m3f1d@r) m3f1e@mr))) (map m2c2b@gen-lexical m3f32@x*) (map m2c2f@gen-label m3f32@x*) (m2c2b@gen-lexical m3f33@x) (m2c2f@gen-label m3f33@x)))) m3f30@ls/false) ((lambda (m3f3e@t) ((lambda (m3f40@ls/false) (if m3f40@ls/false (apply (lambda () (m2f9f@syntax-violation '#f '"invalid syntax" m3f1b@fmls)) m3f40@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m3f3e@t))) (m2eb6@syntax-dispatch m3f3e@t '_))) m3f2e@t))) (m2eb6@syntax-dispatch m3f2e@t '#(each+ any () any)))) m3f24@t))) (m2eb6@syntax-dispatch m3f24@t 'each-any))) m3f1b@fmls))) (set! m2ee0@chi-lambda-clause* (lambda (m3f42@stx m3f43@fmls* m3f44@body** m3f45@r m3f46@mr) (if (null? m3f43@fmls*) (values '() '()) (call-with-values (lambda () (m2ede@chi-lambda-clause m3f42@stx (car m3f43@fmls*) (car m3f44@body**) m3f45@r m3f46@mr)) (lambda (m3f50@m3f4d m3f51@m3f4f) ((lambda (m3f54@b m3f55@a) (call-with-values (lambda () (m2ee0@chi-lambda-clause* m3f42@stx (cdr m3f43@fmls*) (cdr m3f44@body**) m3f45@r m3f46@mr)) (lambda (m3f5c@m3f59 m3f5d@m3f5b) ((lambda (m3f60@b* m3f61@a*) (values (cons m3f55@a m3f61@a*) (cons m3f54@b m3f60@b*))) m3f5d@m3f5b m3f5c@m3f59)))) m3f51@m3f4f m3f50@m3f4d)))))) (set! m2ee2@chi-defun (lambda (m3f64@x m3f65@r m3f66@mr) ((lambda (m3f6a@fmls m3f6b@body*) (call-with-values (lambda () (m2ede@chi-lambda-clause m3f6a@fmls m3f6a@fmls m3f6b@body* m3f65@r m3f66@mr)) (lambda (m3f72@m3f6f m3f73@m3f71) ((lambda (m3f76@body m3f77@fmls) (m2c07@m2b47@build-lambda '#f m3f77@fmls m3f76@body)) m3f73@m3f71 m3f72@m3f6f)))) (car m3f64@x) (cdr m3f64@x)))) (set! m2ee4@chi-rhs (lambda (m3f7a@rhs m3f7b@r m3f7c@mr) ((lambda (m3f80@t) (if (memv m3f80@t '(defun)) (m2ee2@chi-defun (cdr m3f7a@rhs) m3f7b@r m3f7c@mr) (if (memv m3f80@t '(expr)) ((lambda (m3f82@expr) (m2ed8@chi-expr m3f82@expr m3f7b@r m3f7c@mr)) (cdr m3f7a@rhs)) (if (memv m3f80@t '(top-expr)) ((lambda (m3f84@expr) (m2c0a@m2b79@build-sequence '#f (list (m2ed8@chi-expr m3f84@expr m3f7b@r m3f7c@mr) (m2c0b@m2b7b@build-void)))) (cdr m3f7a@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" m3f7a@rhs))))) (car m3f7a@rhs)))) (set! m2ee6@expand-interaction-rhs*/init* (lambda (m3f86@lhs* m3f87@rhs* m3f88@init* m3f89@r m3f8a@mr) ((letrec ((m3f90@f (lambda (m3f92@lhs* m3f93@rhs*) (if (null? m3f92@lhs*) (map (lambda (m3f96@x) (m2ed8@chi-expr m3f96@x m3f89@r m3f8a@mr)) m3f88@init*) ((lambda (m3f98@lhs m3f99@rhs) ((lambda (m3f9c@t) (if (memv m3f9c@t '(defun)) ((lambda (m3f9e@rhs) (cons (list 'set! m3f98@lhs m3f9e@rhs) (m3f90@f (cdr m3f92@lhs*) (cdr m3f93@rhs*)))) (m2ee2@chi-defun (cdr m3f99@rhs) m3f89@r m3f8a@mr)) (if (memv m3f9c@t '(expr)) ((lambda (m3fa0@rhs) (cons (list 'set! m3f98@lhs m3fa0@rhs) (m3f90@f (cdr m3f92@lhs*) (cdr m3f93@rhs*)))) (m2ed8@chi-expr (cdr m3f99@rhs) m3f89@r m3f8a@mr)) (if (memv m3f9c@t '(top-expr)) ((lambda (m3fa2@e) (cons m3fa2@e (m3f90@f (cdr m3f92@lhs*) (cdr m3f93@rhs*)))) (m2ed8@chi-expr (cdr m3f99@rhs) m3f89@r m3f8a@mr)) (error 'expand-interaction '"invallid" m3f99@rhs))))) (car m3f99@rhs))) (car m3f92@lhs*) (car m3f93@rhs*)))))) m3f90@f) m3f86@lhs* m3f87@rhs*))) (set! m2ee8@chi-rhs* (lambda (m3fa4@rhs* m3fa5@r m3fa6@mr) ((letrec ((m3faa@f (lambda (m3fac@ls) (if (null? m3fac@ls) '() ((lambda (m3fae@a) (cons m3fae@a (m3faa@f (cdr m3fac@ls)))) (m2ee4@chi-rhs (car m3fac@ls) m3fa5@r m3fa6@mr)))))) m3faa@f) m3fa4@rhs*))) (set! m2eea@find-bound=? (lambda (m3fb0@x m3fb1@lhs* m3fb2@rhs*) (if (null? m3fb1@lhs*) '#f (if (m2cb1@bound-id=? m3fb0@x (car m3fb1@lhs*)) (car m3fb2@rhs*) (m2eea@find-bound=? m3fb0@x (cdr m3fb1@lhs*) (cdr m3fb2@rhs*)))))) (set! m2eec@find-dups (lambda (m3fb6@ls) ((letrec ((m3fb8@f (lambda (m3fba@ls m3fbb@dups) (if (null? m3fba@ls) m3fbb@dups ((lambda (m3fbe@t) (if m3fbe@t ((lambda (m3fc0@x) (m3fb8@f (cdr m3fba@ls) (cons (list (car m3fba@ls) m3fc0@x) m3fbb@dups))) m3fbe@t) (m3fb8@f (cdr m3fba@ls) m3fbb@dups))) (m2eea@find-bound=? (car m3fba@ls) (cdr m3fba@ls) (cdr m3fba@ls))))))) m3fb8@f) m3fb6@ls '()))) (set! m2eee@chi-internal (lambda (m3fc2@e* m3fc3@r m3fc4@mr) ((lambda (m3fc8@rib) (call-with-values (lambda () (m2f11@chi-body* (map (lambda (m3fda@x) (m2c97@add-subst m3fc8@rib m3fda@x)) (m2ca9@syntax->list m3fc2@e*)) m3fc3@r m3fc4@mr '() '() '() '() '() m3fc8@rib '#f)) (lambda (m3fdc@m3fcb m3fdd@m3fcd m3fde@m3fcf m3fdf@m3fd1 m3fe0@m3fd3 m3fe1@m3fd5 m3fe2@m3fd7 m3fe3@m3fd9) ((lambda (m3fec@_exp* m3fed@kwd* m3fee@mod** m3fef@rhs* m3ff0@lex* m3ff1@mr m3ff2@r m3ff3@e*) (begin (if (null? m3ff3@e*) (m2f9f@syntax-violation '#f '"no expression in body" m3ff3@e*) (void)) ((lambda (m3ffc@init*) ((lambda (m3ffe@rhs*) ((lambda () (m2c0d@m2b7f@build-letrec* '#f (reverse m3ff0@lex*) (reverse m3ffe@rhs*) (m2c0a@m2b79@build-sequence '#f m3ffc@init*))))) (m2ee8@chi-rhs* m3fef@rhs* m3ff2@r m3ff1@mr))) (m2ed4@chi-expr* (append (apply append (reverse m3fee@mod**)) m3ff3@e*) m3ff2@r m3ff1@mr)))) m3fe3@m3fd9 m3fe2@m3fd7 m3fe1@m3fd5 m3fe0@m3fd3 m3fdf@m3fd1 m3fde@m3fcf m3fdd@m3fcd m3fdc@m3fcb)))) (m2c5a@make-empty-rib)))) (set! m2ef0@parse-module (lambda (m4000@e) ((lambda (m4002@t) ((lambda (m4004@ls/false) (if m4004@ls/false (apply (lambda (m4006@export* m4007@b*) (begin (if (not (for-all m2cab@id? m4006@export*)) (m2f9f@syntax-violation '#f '"module exports must be identifiers" m4000@e) (void)) (values '#f (list->vector m4006@export*) m4007@b*))) m4004@ls/false) ((lambda (m400a@t) ((lambda (m400c@ls/false) (if m400c@ls/false (apply (lambda (m400e@name m400f@export* m4010@b*) (begin (if (not (m2cab@id? m400e@name)) (m2f9f@syntax-violation '#f '"module name must be an identifier" m4000@e) (void)) (if (not (for-all m2cab@id? m400f@export*)) (m2f9f@syntax-violation '#f '"module exports must be identifiers" m4000@e) (void)) (values m400e@name (list->vector m400f@export*) m4010@b*))) m400c@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m400a@t))) (m2eb6@syntax-dispatch m400a@t '(_ any each-any . each-any)))) m4002@t))) (m2eb6@syntax-dispatch m4002@t '(_ each-any . each-any)))) m4000@e))) (set! m2ef6@m2ef1 (make-record-type-descriptor 'module-interface '#f 'm2ef4 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! m2ef8@m2ef3 '#f) (set! m2efa@m2ef2 (make-record-constructor-descriptor m2ef6@m2ef1 '#f m2ef8@m2ef3)) (set! m2efd@module-interface? (record-predicate m2ef6@m2ef1)) (set! m2eff@make-module-interface (record-constructor m2efa@m2ef2)) (set! m2f01@module-interface-first-mark (record-accessor m2ef6@m2ef1 '0)) (set! m2f03@module-interface-exp-id-vec (record-accessor m2ef6@m2ef1 '1)) (set! m2f05@module-interface-exp-lab-vec (record-accessor m2ef6@m2ef1 '2)) (set! m2f07@set-module-interface-first-mark! (record-mutator m2ef6@m2ef1 '0)) (set! m2f09@set-module-interface-exp-id-vec! (record-mutator m2ef6@m2ef1 '1)) (set! m2f0b@set-module-interface-exp-lab-vec! (record-mutator m2ef6@m2ef1 '2)) (set! m2f0d@module-interface-exp-id* (lambda (m4014@iface m4015@id) ((lambda (m4019@diff-marks) (begin (set! m4019@diff-marks (lambda (m4020@ls m4021@x) (begin (if (null? m4020@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (m4024@a) (if (eq? m4024@a m4021@x) '() (cons m4024@a (m4019@diff-marks (cdr m4020@ls) m4021@x)))) (car m4020@ls))))) ((lambda (m401a@diff m401b@id-vec) (if (null? m401a@diff) m401b@id-vec (vector-map (lambda (m401e@x) (m2c75@make-stx (m2c77@stx-expr m401e@x) (append m401a@diff (m2c79@stx-mark* m401e@x)) '() '())) m401b@id-vec))) (m4019@diff-marks (m2c79@stx-mark* m4015@id) (m2f01@module-interface-first-mark m4014@iface)) (m2f03@module-interface-exp-id-vec m4014@iface)))) '#f))) (set! m2f0f@chi-internal-module (lambda (m4026@e m4027@r m4028@mr m4029@lex* m402a@rhs* m402b@mod** m402c@kwd*) (call-with-values (lambda () (m2ef0@parse-module m4026@e)) (lambda (m403a@m4035 m403b@m4037 m403c@m4039) ((lambda (m4040@e* m4041@exp-id* m4042@name) ((lambda (m4046@rib) ((lambda (m4048@e*) ((lambda () (call-with-values (lambda () (m2f11@chi-body* m4048@e* m4027@r m4028@mr m4029@lex* m402a@rhs* m402b@mod** m402c@kwd* '() m4046@rib '#f)) (lambda (m405a@m404b m405b@m404d m405c@m404f m405d@m4051 m405e@m4053 m405f@m4055 m4060@m4057 m4061@m4059) ((lambda (m406a@_exp* m406b@kwd* m406c@mod** m406d@rhs* m406e@lex* m406f@mr m4070@r m4071@e*) ((lambda (m407a@exp-lab* m407b@mod**) (if (not m4042@name) (values m406e@lex* m406d@rhs* m4041@exp-id* m407a@exp-lab* m4070@r m406f@mr m407b@mod** m406b@kwd*) ((lambda (m407e@lab m407f@iface) (values m406e@lex* m406d@rhs* (vector m4042@name) (vector m407e@lab) (cons (cons m407e@lab (cons '$module m407f@iface)) m4070@r) (cons (cons m407e@lab (cons '$module m407f@iface)) m406f@mr) m407b@mod** m406b@kwd*)) (m2c2f@gen-label 'module) (m2eff@make-module-interface (car (m2c79@stx-mark* m4042@name)) (vector-map (lambda (m4082@x) (m2c75@make-stx (m2c77@stx-expr m4082@x) (m2c79@stx-mark* m4082@x) '() '())) m4041@exp-id*) m407a@exp-lab*)))) (vector-map (lambda (m4084@x) (or (m2cc5@id->label (m2c75@make-stx (m2cad@id->sym m4084@x) (m2c79@stx-mark* m4084@x) (list m4046@rib) '())) (m2f9f@syntax-violation '#f '"cannot find module export" m4084@x))) m4041@exp-id*) (cons m4071@e* m406c@mod**))) m4061@m4059 m4060@m4057 m405f@m4055 m405e@m4053 m405d@m4051 m405c@m404f m405b@m404d m405a@m404b)))))) (map (lambda (m4086@x) (m2c97@add-subst m4046@rib m4086@x)) (m2ca9@syntax->list m4040@e*)))) (m2c5a@make-empty-rib))) m403c@m4039 m403b@m4037 m403a@m4035))))) (set! m2f11@chi-body* (lambda (m4088@e* m4089@r m408a@mr m408b@lex* m408c@rhs* m408d@mod** m408e@kwd* m408f@exp* m4090@rib m4091@top?) (if (null? m4088@e*) (values m4088@e* m4089@r m408a@mr m408b@lex* m408c@rhs* m408d@mod** m408e@kwd* m408f@exp*) ((lambda (m409c@e) (call-with-values (lambda () (m2cd3@syntax-type m409c@e m4089@r)) (lambda (m40a4@m409f m40a5@m40a1 m40a6@m40a3) ((lambda (m40aa@kwd m40ab@value m40ac@type) ((lambda (m40b0@kwd*) ((lambda (m40b2@t) (if (memv m40b2@t '(define)) (call-with-values (lambda () (m2e3a@parse-define m409c@e)) (lambda (m40b8@m40b5 m40b9@m40b7) ((lambda (m40bc@rhs m40bd@id) (begin (if (m2cb9@bound-id-member? m40bd@id m40b0@kwd*) (m2f9f@syntax-violation '#f '"cannot redefine keyword" m409c@e) (void)) (call-with-values (lambda () (m2c33@gen-define-label+loc m40bd@id m4090@rib)) (lambda (m40c4@m40c1 m40c5@m40c3) ((lambda (m40c8@lex m40c9@lab) (begin (m2c5c@extend-rib! m4090@rib m40bd@id m40c9@lab) (m2f11@chi-body* (cdr m4088@e*) (m2e48@add-lexical m40c9@lab m40c8@lex m4089@r) m408a@mr (cons m40c8@lex m408b@lex*) (cons m40bc@rhs m408c@rhs*) m408d@mod** m40b0@kwd* m408f@exp* m4090@rib m4091@top?))) m40c5@m40c3 m40c4@m40c1))))) m40b9@m40b7 m40b8@m40b5))) (if (memv m40b2@t '(define-syntax)) (call-with-values (lambda () (m2e3c@parse-define-syntax m409c@e)) (lambda (m40d0@m40cd m40d1@m40cf) ((lambda (m40d4@rhs m40d5@id) (begin (if (m2cb9@bound-id-member? m40d5@id m40b0@kwd*) (m2f9f@syntax-violation '#f '"cannot redefine keyword" m409c@e) (void)) ((lambda (m40d8@lab m40d9@expanded-rhs) (begin (m2c5c@extend-rib! m4090@rib m40d5@id m40d8@lab) ((lambda (m40dc@b) (m2f11@chi-body* (cdr m4088@e*) (cons (cons m40d8@lab m40dc@b) m4089@r) (cons (cons m40d8@lab m40dc@b) m408a@mr) m408b@lex* m408c@rhs* m408d@mod** m40b0@kwd* m408f@exp* m4090@rib m4091@top?)) (m2ce9@make-eval-transformer m40d9@expanded-rhs)))) (m2c35@gen-define-label m40d5@id m4090@rib) (m2f13@expand-transformer m40d4@rhs m408a@mr)))) m40d1@m40cf m40d0@m40cd))) (if (memv m40b2@t '(let-syntax letrec-syntax)) ((lambda (m40de@t) ((lambda (m40e0@ls/false) (if (and m40e0@ls/false (apply (lambda (m40e2@xlhs* m40e3@xrhs* m40e4@xbody*) (if (not (m2cb5@valid-bound-ids? m40e2@xlhs*)) (m2f9f@syntax-violation '#f '"invalid identifiers" m409c@e) (void))) m40e0@ls/false)) (apply (lambda (m40e8@xlhs* m40e9@xrhs* m40ea@xbody*) ((lambda (m40ee@xlab*) ((lambda (m40f0@xrib) ((lambda (m40f2@xb*) ((lambda () (m2f11@chi-body* (append (map (lambda (m40f4@x) (m2c97@add-subst m40f0@xrib m40f4@x)) m40ea@xbody*) (cdr m4088@e*)) (append (map cons m40ee@xlab* m40f2@xb*) m4089@r) (append (map cons m40ee@xlab* m40f2@xb*) m408a@mr) m408b@lex* m408c@rhs* m408d@mod** m40b0@kwd* m408f@exp* m4090@rib m4091@top?)))) (map (lambda (m40f6@x) (m2ce9@make-eval-transformer (m2f13@expand-transformer (if (eq? m40ac@type 'let-syntax) m40f6@x (m2c97@add-subst m40f0@xrib m40f6@x)) m408a@mr))) m40e9@xrhs*))) (m2c66@make-full-rib m40e8@xlhs* m40ee@xlab*))) (map m2c2f@gen-label m40e8@xlhs*))) m40e0@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m40de@t))) (m2eb6@syntax-dispatch m40de@t '(_ #(each (any any)) . each-any)))) m409c@e) (if (memv m40b2@t '(begin)) ((lambda (m40f8@t) ((lambda (m40fa@ls/false) (if m40fa@ls/false (apply (lambda (m40fc@x*) (m2f11@chi-body* (append m40fc@x* (cdr m4088@e*)) m4089@r m408a@mr m408b@lex* m408c@rhs* m408d@mod** m40b0@kwd* m408f@exp* m4090@rib m4091@top?)) m40fa@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m40f8@t))) (m2eb6@syntax-dispatch m40f8@t '(_ . each-any)))) m409c@e) (if (memv m40b2@t '(global-macro global-macro!)) (m2f11@chi-body* (cons (m2c97@add-subst m4090@rib (m2ed2@chi-global-macro m40ab@value m409c@e)) (cdr m4088@e*)) m4089@r m408a@mr m408b@lex* m408c@rhs* m408d@mod** m40b0@kwd* m408f@exp* m4090@rib m4091@top?) (if (memv m40b2@t '(local-macro local-macro!)) (m2f11@chi-body* (cons (m2c97@add-subst m4090@rib (m2ed0@chi-local-macro m40ab@value m409c@e)) (cdr m4088@e*)) m4089@r m408a@mr m408b@lex* m408c@rhs* m408d@mod** m40b0@kwd* m408f@exp* m4090@rib m4091@top?) (if (memv m40b2@t '(macro macro!)) (m2f11@chi-body* (cons (m2c97@add-subst m4090@rib (m2ece@chi-macro m40ab@value m409c@e)) (cdr m4088@e*)) m4089@r m408a@mr m408b@lex* m408c@rhs* m408d@mod** m40b0@kwd* m408f@exp* m4090@rib m4091@top?) (if (memv m40b2@t '(module)) (call-with-values (lambda () (m2f0f@chi-internal-module m409c@e m4089@r m408a@mr m408b@lex* m408c@rhs* m408d@mod** m40b0@kwd*)) (lambda (m410e@m40ff m410f@m4101 m4110@m4103 m4111@m4105 m4112@m4107 m4113@m4109 m4114@m410b m4115@m410d) ((lambda (m411e@kwd* m411f@mod** m4120@mr m4121@r m4122@m-exp-lab* m4123@m-exp-id* m4124@rhs* m4125@lex*) (begin (vector-for-each (lambda (m412e@id m412f@lab) (m2c5c@extend-rib! m4090@rib m412e@id m412f@lab)) m4123@m-exp-id* m4122@m-exp-lab*) (m2f11@chi-body* (cdr m4088@e*) m4121@r m4120@mr m4125@lex* m4124@rhs* m411f@mod** m411e@kwd* m408f@exp* m4090@rib m4091@top?))) m4115@m410d m4114@m410b m4113@m4109 m4112@m4107 m4111@m4105 m4110@m4103 m410f@m4101 m410e@m40ff))) (if (memv m40b2@t '(library)) (begin (m2f81@library-expander (m2cc1@stx->datum m409c@e)) (m2f11@chi-body* (cdr m4088@e*) m4089@r m408a@mr m408b@lex* m408c@rhs* m408d@mod** m40b0@kwd* m408f@exp* m4090@rib m4091@top?)) (if (memv m40b2@t '(export)) ((lambda (m4132@t) ((lambda (m4134@ls/false) (if m4134@ls/false (apply (lambda (m4136@exp-decl*) (m2f11@chi-body* (cdr m4088@e*) m4089@r m408a@mr m408b@lex* m408c@rhs* m408d@mod** m40b0@kwd* (append m4136@exp-decl* m408f@exp*) m4090@rib m4091@top?)) m4134@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m4132@t))) (m2eb6@syntax-dispatch m4132@t '(_ . each-any)))) m409c@e) (if (memv m40b2@t '(import)) ((lambda () ((lambda (m4139@module-import? m413b@module-import m413d@library-import) (begin (set! m4139@module-import? (lambda (m418c@e) ((lambda (m418e@t) ((lambda (m4190@ls/false) (if (and m4190@ls/false (apply (lambda (m4192@id) (m2cab@id? m4192@id)) m4190@ls/false)) (apply (lambda (m4194@id) '#t) m4190@ls/false) ((lambda (m4196@t) ((lambda (m4198@ls/false) (if m4198@ls/false (apply (lambda (m419a@imp*) '#f) m4198@ls/false) ((lambda (m419c@t) ((lambda (m419e@ls/false) (if m419e@ls/false (apply (lambda () (m2f9f@syntax-violation '#f '"malformed import form" m418c@e)) m419e@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m419c@t))) (m2eb6@syntax-dispatch m419c@t '_))) m4196@t))) (m2eb6@syntax-dispatch m4196@t '(_ . each-any)))) m418e@t))) (m2eb6@syntax-dispatch m418e@t '(_ any)))) m418c@e))) (set! m413b@module-import (lambda (m416a@e m416b@r) ((lambda (m416e@t) ((lambda (m4170@ls/false) (if (and m4170@ls/false (apply (lambda (m4172@id) (m2cab@id? m4172@id)) m4170@ls/false)) (apply (lambda (m4174@id) (call-with-values (lambda () (m2cd3@syntax-type m4174@id m416b@r)) (lambda (m417c@m4177 m417d@m4179 m417e@m417b) ((lambda (m4182@kwd m4183@value m4184@type) ((lambda (m4188@t) (if (memv m4188@t '($module)) ((lambda (m418a@iface) (values (m2f0d@module-interface-exp-id* m418a@iface m4174@id) (m2f05@module-interface-exp-lab-vec m418a@iface))) m4183@value) (m2f9f@syntax-violation '#f '"invalid import" m416a@e))) m4184@type)) m417e@m417b m417d@m4179 m417c@m4177)))) m4170@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m416e@t))) (m2eb6@syntax-dispatch m416e@t '(_ any)))) m416a@e))) (set! m413d@library-import (lambda (m414e@e) ((lambda (m4150@t) ((lambda (m4152@ls/false) (if m4152@ls/false (apply (lambda (m4154@ctxt m4155@imp*) (call-with-values (lambda () (m2f1b@parse-import-spec* (m2fa5@syntax->datum m4155@imp*))) (lambda (m415c@m4159 m415d@m415b) ((lambda (m4160@subst-labels m4161@subst-names) (values (vector-map (lambda (m4164@name) (m2c89@datum->stx m4154@ctxt m4164@name)) m4161@subst-names) m4160@subst-labels)) m415d@m415b m415c@m4159)))) m4152@ls/false) ((lambda (m4166@t) ((lambda (m4168@ls/false) (if m4168@ls/false (apply (lambda () (m2f9f@syntax-violation '#f '"invalid import form" m414e@e)) m4168@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m4166@t))) (m2eb6@syntax-dispatch m4166@t '_))) m4150@t))) (m2eb6@syntax-dispatch m4150@t '(any . each-any)))) m414e@e))) (begin (call-with-values (lambda () (if (m4139@module-import? m409c@e) (m413b@module-import m409c@e m4089@r) (m413d@library-import m409c@e))) (lambda (m4142@m413f m4143@m4141) ((lambda (m4146@lab* m4147@id*) (vector-for-each (lambda (m414a@id m414b@lab) (m2c5c@extend-rib! m4090@rib m414a@id m414b@lab)) m4147@id* m4146@lab*)) m4143@m4141 m4142@m413f))) (m2f11@chi-body* (cdr m4088@e*) m4089@r m408a@mr m408b@lex* m408c@rhs* m408d@mod** m40b0@kwd* m408f@exp* m4090@rib m4091@top?)))) '#f '#f '#f))) (if m4091@top? (m2f11@chi-body* (cdr m4088@e*) m4089@r m408a@mr (cons (m2c2b@gen-lexical 'dummy) m408b@lex*) (cons (cons 'top-expr m409c@e) m408c@rhs*) m408d@mod** m40b0@kwd* m408f@exp* m4090@rib m4091@top?) (values m4088@e* m4089@r m408a@mr m408b@lex* m408c@rhs* m408d@mod** m40b0@kwd* m408f@exp*)))))))))))))) m40ac@type)) (if (m2cab@id? m40aa@kwd) (cons m40aa@kwd m408e@kwd*) m408e@kwd*))) m40a6@m40a3 m40a5@m40a1 m40a4@m409f)))) (car m4088@e*))))) (set! m2f13@expand-transformer (lambda (m41a0@expr m41a1@r) ((lambda (m41a4@rtc) ((lambda (m41a6@expanded-rhs) (begin (for-each ((lambda (m41a8@mark-visit) (lambda (m41aa@x) (begin (m2acf@m2970@invoke-library m41aa@x) (m41a8@mark-visit m41aa@x)))) (m2f23@vis-collector)) (m41a4@rtc)) m41a6@expanded-rhs)) ((lambda (m41b4@m41ad m41b5@m41af m41b6@m41b1 m41b7@m41b3) ((lambda (m41bc@swap) (dynamic-wind m41bc@swap (lambda () (m2ed8@chi-expr m41a0@expr m41a1@r m41a1@r)) m41bc@swap)) (lambda () (begin ((lambda (m41be@t) (begin (m41b4@m41ad m41b6@m41b1) (set! m41b6@m41b1 m41be@t))) (m41b4@m41ad)) ((lambda (m41c0@t) (begin (m41b5@m41af m41b7@m41b3) (set! m41b7@m41b3 m41c0@t))) (m41b5@m41af)))))) m2f21@inv-collector m2f23@vis-collector m41a4@rtc (lambda (m41c2@x) (values))))) (m2f1f@make-collector)))) (set! m2f15@parse-exports (lambda (m41c4@exp*) ((letrec ((m41c6@f (lambda (m41c8@exp* m41c9@int* m41ca@ext*) (if (null? m41c8@exp*) (begin (if (not (m2cb5@valid-bound-ids? m41ca@ext*)) (m2f9f@syntax-violation 'export '"invalid exports" (m2eec@find-dups m41ca@ext*)) (void)) (values (map m2fa5@syntax->datum m41ca@ext*) m41c9@int*)) ((lambda (m41ce@t) ((lambda (m41d0@ls/false) (if m41d0@ls/false (apply (lambda (m41d2@rename m41d3@i* m41d4@e*) (begin (if (not (and (eq? (m2fa5@syntax->datum m41d2@rename) 'rename) (for-all m2cab@id? m41d3@i*) (for-all m2cab@id? m41d4@e*))) (m2f9f@syntax-violation 'export '"invalid export specifier" (car m41c8@exp*)) (void)) (m41c6@f (cdr m41c8@exp*) (append m41d3@i* m41c9@int*) (append m41d4@e* m41ca@ext*)))) m41d0@ls/false) ((lambda (m41d8@t) ((lambda (m41da@ls/false) (if m41da@ls/false (apply (lambda (m41dc@ie) (begin (if (not (m2cab@id? m41dc@ie)) (m2f9f@syntax-violation 'export '"invalid export" m41dc@ie) (void)) (m41c6@f (cdr m41c8@exp*) (cons m41dc@ie m41c9@int*) (cons m41dc@ie m41ca@ext*)))) m41da@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m41d8@t))) (m2eb6@syntax-dispatch m41d8@t 'any))) m41ce@t))) (m2eb6@syntax-dispatch m41ce@t '(any . #(each (any any)))))) (car m41c8@exp*)))))) m41c6@f) m41c4@exp* '() '()))) (set! m2f17@parse-library-name (lambda (m41de@spec) ((lambda (m41e1@parse) (begin (set! m41e1@parse (lambda (m41ee@x) ((lambda (m41f0@t) ((lambda (m41f2@ls/false) (if (and m41f2@ls/false (apply (lambda (m41f4@v*) (for-all (lambda (m41f6@x) ((lambda (m41f8@x) (and (integer? m41f8@x) (exact? m41f8@x))) (m2fa5@syntax->datum m41f6@x))) m41f4@v*)) m41f2@ls/false)) (apply (lambda (m41fa@v*) (values '() (map m2fa5@syntax->datum m41fa@v*))) m41f2@ls/false) ((lambda (m41fc@t) ((lambda (m41fe@ls/false) (if (and m41fe@ls/false (apply (lambda (m4200@x m4201@rest) (symbol? (m2fa5@syntax->datum m4200@x))) m41fe@ls/false)) (apply (lambda (m4204@x m4205@rest) (call-with-values (lambda () (m41e1@parse m4205@rest)) (lambda (m420c@m4209 m420d@m420b) ((lambda (m4210@v* m4211@x*) (values (cons (m2fa5@syntax->datum m4204@x) m4211@x*) m4210@v*)) m420d@m420b m420c@m4209)))) m41fe@ls/false) ((lambda (m4214@t) ((lambda (m4216@ls/false) (if m4216@ls/false (apply (lambda () (values '() '())) m4216@ls/false) ((lambda (m4218@t) ((lambda (m421a@ls/false) (if m421a@ls/false (apply (lambda () (m2f9f@syntax-violation '#f '"invalid library name" m41de@spec)) m421a@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m4218@t))) (m2eb6@syntax-dispatch m4218@t '_))) m4214@t))) (m2eb6@syntax-dispatch m4214@t '()))) m41fc@t))) (m2eb6@syntax-dispatch m41fc@t '(any . any)))) m41f0@t))) (m2eb6@syntax-dispatch m41f0@t '(each-any)))) m41ee@x))) (call-with-values (lambda () (m41e1@parse m41de@spec)) (lambda (m41e6@m41e3 m41e7@m41e5) ((lambda (m41ea@ver* m41eb@name*) (begin (if (null? m41eb@name*) (m2f9f@syntax-violation '#f '"empty library name" m41de@spec) (void)) (values m41eb@name* m41ea@ver*))) m41e7@m41e5 m41e6@m41e3))))) '#f))) (set! m2f19@parse-library (lambda (m421c@e) ((lambda (m421e@t) ((lambda (m4220@ls/false) (if (and m4220@ls/false (apply (lambda (m4222@library m4223@name* m4224@export m4225@exp* m4226@import m4227@imp* m4228@b*) (and (eq? (m2fa5@syntax->datum m4224@export) 'export) (eq? (m2fa5@syntax->datum m4226@import) 'import) (eq? (m2fa5@syntax->datum m4222@library) 'library))) m4220@ls/false)) (apply (lambda (m4230@library m4231@name* m4232@export m4233@exp* m4234@import m4235@imp* m4236@b*) (values m4231@name* m4233@exp* m4235@imp* m4236@b*)) m4220@ls/false) ((lambda (m423e@t) ((lambda (m4240@ls/false) (if m4240@ls/false (apply (lambda () (m2f9f@syntax-violation '#f '"malformed library" m421c@e)) m4240@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m423e@t))) (m2eb6@syntax-dispatch m423e@t '_))) m421e@t))) (m2eb6@syntax-dispatch m421e@t '(any each-any (any . each-any) (any . each-any) . each-any)))) m421c@e))) (set! m2f1b@parse-import-spec* ((lambda () ((lambda (m4243@idsyn? m4245@dup-error m4247@merge-substs m4249@exclude* m424b@find* m424d@rem* m424f@remove-dups m4251@parse-library-name m4253@import-library m4255@get-import m4257@add-imports!) (begin (set! m4243@idsyn? (lambda (m444c@x) (symbol? (m2fa5@syntax->datum m444c@x)))) (set! m4245@dup-error (lambda (m444a@name) (m2f9f@syntax-violation 'import '"two imports with different bindings" m444a@name))) (set! m4247@merge-substs (lambda (m4438@s m4439@subst) ((lambda (m443d@insert-to-subst) (begin (set! m443d@insert-to-subst (lambda (m443e@a m443f@subst) ((lambda (m4442@name m4443@label) ((lambda (m4446@t) (if m4446@t ((lambda (m4448@x) (if (eq? (cdr m4448@x) m4443@label) m443f@subst (m4245@dup-error m4442@name))) m4446@t) (cons m443e@a m443f@subst))) (assq m4442@name m443f@subst))) (car m443e@a) (cdr m443e@a)))) (if (null? m4438@s) m4439@subst (m443d@insert-to-subst (car m4438@s) (m4247@merge-substs (cdr m4438@s) m4439@subst))))) '#f))) (set! m4249@exclude* (lambda (m4408@sym* m4409@subst) ((lambda (m440d@exclude) (begin (set! m440d@exclude (lambda (m4426@sym m4427@subst) (if (null? m4427@subst) (m2f9f@syntax-violation 'import '"cannot rename unbound identifier" m4426@sym) (if (eq? m4426@sym (caar m4427@subst)) (values (cdar m4427@subst) (cdr m4427@subst)) ((lambda (m442a@a) (call-with-values (lambda () (m440d@exclude m4426@sym (cdr m4427@subst))) (lambda (m4430@m442d m4431@m442f) ((lambda (m4434@subst m4435@old) (values m4435@old (cons m442a@a m4434@subst))) m4431@m442f m4430@m442d)))) (car m4427@subst)))))) (if (null? m4408@sym*) (values '() m4409@subst) (call-with-values (lambda () (m440d@exclude (car m4408@sym*) m4409@subst)) (lambda (m4412@m440f m4413@m4411) ((lambda (m4416@subst m4417@old) (call-with-values (lambda () (m4249@exclude* (cdr m4408@sym*) m4416@subst)) (lambda (m441e@m441b m441f@m441d) ((lambda (m4422@subst m4423@old*) (values (cons m4417@old m4423@old*) m4422@subst)) m441f@m441d m441e@m441b)))) m4413@m4411 m4412@m440f)))))) '#f))) (set! m424b@find* (lambda (m4400@sym* m4401@subst) (map (lambda (m4404@x) ((lambda (m4406@t) (if m4406@t (cdr m4406@t) (m2f9f@syntax-violation 'import '"cannot find identifier" m4404@x))) (assq m4404@x m4401@subst))) m4400@sym*))) (set! m424d@rem* (lambda (m43f8@sym* m43f9@subst) ((letrec ((m43fc@f (lambda (m43fe@subst) (if (null? m43fe@subst) '() (if (memq (caar m43fe@subst) m43f8@sym*) (m43fc@f (cdr m43fe@subst)) (cons (car m43fe@subst) (m43fc@f (cdr m43fe@subst)))))))) m43fc@f) m43f9@subst))) (set! m424f@remove-dups (lambda (m43f6@ls) (if (null? m43f6@ls) '() (if (memq (car m43f6@ls) (cdr m43f6@ls)) (m424f@remove-dups (cdr m43f6@ls)) (cons (car m43f6@ls) (m424f@remove-dups (cdr m43f6@ls))))))) (set! m4251@parse-library-name (lambda (m430e@spec) ((lambda (m4311@subversion? m4313@subversion-pred m4315@version-pred) (begin (set! m4311@subversion? (lambda (m43f2@x) ((lambda (m43f4@x) (and (integer? m43f4@x) (exact? m43f4@x) (>= m43f4@x '0))) (m2fa5@syntax->datum m43f2@x)))) (set! m4313@subversion-pred (lambda (m4392@x*) ((lambda (m4394@t) ((lambda (m4396@ls/false) (if (and m4396@ls/false (apply (lambda (m4398@n) (m4311@subversion? m4398@n)) m4396@ls/false)) (apply (lambda (m439a@n) (lambda (m439c@x) (= m439c@x (m2fa5@syntax->datum m439a@n)))) m4396@ls/false) ((lambda (m439e@t) ((lambda (m43a0@ls/false) (if (and m43a0@ls/false (apply (lambda (m43a2@p? m43a3@sub*) (eq? (m2fa5@syntax->datum m43a2@p?) 'and)) m43a0@ls/false)) (apply (lambda (m43a6@p? m43a7@sub*) ((lambda (m43aa@p*) (lambda (m43ac@x) (for-all (lambda (m43ae@p) (m43ae@p m43ac@x)) m43aa@p*))) (map m4313@subversion-pred m43a7@sub*))) m43a0@ls/false) ((lambda (m43b0@t) ((lambda (m43b2@ls/false) (if (and m43b2@ls/false (apply (lambda (m43b4@p? m43b5@sub*) (eq? (m2fa5@syntax->datum m43b4@p?) 'or)) m43b2@ls/false)) (apply (lambda (m43b8@p? m43b9@sub*) ((lambda (m43bc@p*) (lambda (m43be@x) (exists (lambda (m43c0@p) (m43c0@p m43be@x)) m43bc@p*))) (map m4313@subversion-pred m43b9@sub*))) m43b2@ls/false) ((lambda (m43c2@t) ((lambda (m43c4@ls/false) (if (and m43c4@ls/false (apply (lambda (m43c6@p? m43c7@sub) (eq? (m2fa5@syntax->datum m43c6@p?) 'not)) m43c4@ls/false)) (apply (lambda (m43ca@p? m43cb@sub) ((lambda (m43ce@p) (lambda (m43d0@x) (not (m43ce@p m43d0@x)))) (m4313@subversion-pred m43cb@sub))) m43c4@ls/false) ((lambda (m43d2@t) ((lambda (m43d4@ls/false) (if (and m43d4@ls/false (apply (lambda (m43d6@p? m43d7@n) (and (eq? (m2fa5@syntax->datum m43d6@p?) '<=) (m4311@subversion? m43d7@n))) m43d4@ls/false)) (apply (lambda (m43da@p? m43db@n) (lambda (m43de@x) (<= m43de@x (m2fa5@syntax->datum m43db@n)))) m43d4@ls/false) ((lambda (m43e0@t) ((lambda (m43e2@ls/false) (if (and m43e2@ls/false (apply (lambda (m43e4@p? m43e5@n) (and (eq? (m2fa5@syntax->datum m43e4@p?) '>=) (m4311@subversion? m43e5@n))) m43e2@ls/false)) (apply (lambda (m43e8@p? m43e9@n) (lambda (m43ec@x) (>= m43ec@x (m2fa5@syntax->datum m43e9@n)))) m43e2@ls/false) ((lambda (m43ee@t) ((lambda (m43f0@ls/false) (if m43f0@ls/false (apply (lambda () (m2f9f@syntax-violation 'import '"invalid sub-version spec" m430e@spec m4392@x*)) m43f0@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m43ee@t))) (m2eb6@syntax-dispatch m43ee@t '_))) m43e0@t))) (m2eb6@syntax-dispatch m43e0@t '(any any)))) m43d2@t))) (m2eb6@syntax-dispatch m43d2@t '(any any)))) m43c2@t))) (m2eb6@syntax-dispatch m43c2@t '(any any)))) m43b0@t))) (m2eb6@syntax-dispatch m43b0@t '(any . each-any)))) m439e@t))) (m2eb6@syntax-dispatch m439e@t '(any . each-any)))) m4394@t))) (m2eb6@syntax-dispatch m4394@t 'any))) m4392@x*))) (set! m4315@version-pred (lambda (m4342@x*) ((lambda (m4344@t) ((lambda (m4346@ls/false) (if m4346@ls/false (apply (lambda () (lambda (m4348@x) '#t)) m4346@ls/false) ((lambda (m434a@t) ((lambda (m434c@ls/false) (if (and m434c@ls/false (apply (lambda (m434e@c m434f@ver*) (eq? (m2fa5@syntax->datum m434e@c) 'and)) m434c@ls/false)) (apply (lambda (m4352@c m4353@ver*) ((lambda (m4356@p*) (lambda (m4358@x) (for-all (lambda (m435a@p) (m435a@p m4358@x)) m4356@p*))) (map m4315@version-pred m4353@ver*))) m434c@ls/false) ((lambda (m435c@t) ((lambda (m435e@ls/false) (if (and m435e@ls/false (apply (lambda (m4360@c m4361@ver*) (eq? (m2fa5@syntax->datum m4360@c) 'or)) m435e@ls/false)) (apply (lambda (m4364@c m4365@ver*) ((lambda (m4368@p*) (lambda (m436a@x) (exists (lambda (m436c@p) (m436c@p m436a@x)) m4368@p*))) (map m4315@version-pred m4365@ver*))) m435e@ls/false) ((lambda (m436e@t) ((lambda (m4370@ls/false) (if (and m4370@ls/false (apply (lambda (m4372@c m4373@ver) (eq? (m2fa5@syntax->datum m4372@c) 'not)) m4370@ls/false)) (apply (lambda (m4376@c m4377@ver) ((lambda (m437a@p) (lambda (m437c@x) (not (m437a@p m437c@x)))) (m4315@version-pred m4377@ver))) m4370@ls/false) ((lambda (m437e@t) ((lambda (m4380@ls/false) (if m4380@ls/false (apply (lambda (m4382@sub*) ((lambda (m4384@p*) (lambda (m4386@x) ((letrec ((m4388@f (lambda (m438a@p* m438b@x) (if (null? m438a@p*) '#t (if (null? m438b@x) '#f (and ((car m438a@p*) (car m438b@x)) (m4388@f (cdr m438a@p*) (cdr m438b@x)))))))) m4388@f) m4384@p* m4386@x))) (map m4313@subversion-pred m4382@sub*))) m4380@ls/false) ((lambda (m438e@t) ((lambda (m4390@ls/false) (if m4390@ls/false (apply (lambda () (m2f9f@syntax-violation 'import '"invalid version spec" m430e@spec m4342@x*)) m4390@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m438e@t))) (m2eb6@syntax-dispatch m438e@t '_))) m437e@t))) (m2eb6@syntax-dispatch m437e@t 'each-any))) m436e@t))) (m2eb6@syntax-dispatch m436e@t '(any any)))) m435c@t))) (m2eb6@syntax-dispatch m435c@t '(any . each-any)))) m434a@t))) (m2eb6@syntax-dispatch m434a@t '(any . each-any)))) m4344@t))) (m2eb6@syntax-dispatch m4344@t '()))) m4342@x*))) ((letrec ((m4316@f (lambda (m4318@x) ((lambda (m431a@t) ((lambda (m431c@ls/false) (if m431c@ls/false (apply (lambda (m431e@version-spec*) (values '() (m4315@version-pred m431e@version-spec*))) m431c@ls/false) ((lambda (m4320@t) ((lambda (m4322@ls/false) (if (and m4322@ls/false (apply (lambda (m4324@x m4325@x*) (m4243@idsyn? m4324@x)) m4322@ls/false)) (apply (lambda (m4328@x m4329@x*) (call-with-values (lambda () (m4316@f m4329@x*)) (lambda (m4330@m432d m4331@m432f) ((lambda (m4334@pred m4335@name) (values (cons (m2fa5@syntax->datum m4328@x) m4335@name) m4334@pred)) m4331@m432f m4330@m432d)))) m4322@ls/false) ((lambda (m4338@t) ((lambda (m433a@ls/false) (if m433a@ls/false (apply (lambda () (values '() (lambda (m433c@x) '#t))) m433a@ls/false) ((lambda (m433e@t) ((lambda (m4340@ls/false) (if m4340@ls/false (apply (lambda () (m2f9f@syntax-violation '#f '"invalid import spec" m430e@spec)) m4340@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m433e@t))) (m2eb6@syntax-dispatch m433e@t '_))) m4338@t))) (m2eb6@syntax-dispatch m4338@t '()))) m4320@t))) (m2eb6@syntax-dispatch m4320@t '(any . any)))) m431a@t))) (m2eb6@syntax-dispatch m431a@t '(each-any)))) m4318@x)))) m4316@f) m430e@spec))) '#f '#f '#f))) (set! m4253@import-library (lambda (m42fe@spec*) (call-with-values (lambda () (m4251@parse-library-name m42fe@spec*)) (lambda (m4304@m4301 m4305@m4303) ((lambda (m4308@pred m4309@name) (begin (if (null? m4309@name) (m2f9f@syntax-violation 'import '"empty library name" m42fe@spec*) (void)) ((lambda (m430c@lib) (begin (if (not m430c@lib) (m2f9f@syntax-violation 'import '"cannot find library with required name" m4309@name) (void)) (if (not (m4308@pred (m2aa0@m2912@library-version m430c@lib))) (m2f9f@syntax-violation 'import '"library does not satisfy version specification" m42fe@spec* m430c@lib) (void)) ((m2f25@imp-collector) m430c@lib) (m2aa4@m291a@library-subst m430c@lib))) (m2ac8@m2962@find-library-by-name m4309@name)))) m4305@m4303 m4304@m4301))))) (set! m4255@get-import (lambda (m4270@spec) ((lambda (m4272@t) ((lambda (m4274@ls/false) (if (and m4274@ls/false (apply (lambda (m4276@x m4277@x*) (not (memq (m2fa5@syntax->datum m4276@x) '(for rename except only prefix library)))) m4274@ls/false)) (apply (lambda (m427a@x m427b@x*) (m4253@import-library (cons m427a@x m427b@x*))) m4274@ls/false) ((lambda (m427e@t) ((lambda (m4280@ls/false) (if (and m4280@ls/false (apply (lambda (m4282@rename m4283@isp m4284@old* m4285@new*) (and (eq? (m2fa5@syntax->datum m4282@rename) 'rename) (for-all m4243@idsyn? m4284@old*) (for-all m4243@idsyn? m4285@new*))) m4280@ls/false)) (apply (lambda (m428a@rename m428b@isp m428c@old* m428d@new*) ((lambda (m4292@subst m4293@old* m4294@new*) ((lambda (m4298@old-label*) ((lambda (m429a@subst) (m4247@merge-substs (map cons m4294@new* m4298@old-label*) m429a@subst)) (m424d@rem* m4293@old* m4292@subst))) (m424b@find* m4293@old* m4292@subst))) (m4255@get-import m428b@isp) (map m2fa5@syntax->datum m428c@old*) (map m2fa5@syntax->datum m428d@new*))) m4280@ls/false) ((lambda (m429c@t) ((lambda (m429e@ls/false) (if (and m429e@ls/false (apply (lambda (m42a0@except m42a1@isp m42a2@sym*) (and (eq? (m2fa5@syntax->datum m42a0@except) 'except) (for-all m4243@idsyn? m42a2@sym*))) m429e@ls/false)) (apply (lambda (m42a6@except m42a7@isp m42a8@sym*) ((lambda (m42ac@subst) (m424d@rem* (map m2fa5@syntax->datum m42a8@sym*) m42ac@subst)) (m4255@get-import m42a7@isp))) m429e@ls/false) ((lambda (m42ae@t) ((lambda (m42b0@ls/false) (if (and m42b0@ls/false (apply (lambda (m42b2@only m42b3@isp m42b4@sym*) (and (eq? (m2fa5@syntax->datum m42b2@only) 'only) (for-all m4243@idsyn? m42b4@sym*))) m42b0@ls/false)) (apply (lambda (m42b8@only m42b9@isp m42ba@sym*) ((lambda (m42be@subst m42bf@sym*) ((lambda (m42c2@sym*) ((lambda (m42c4@lab*) (map cons m42c2@sym* m42c4@lab*)) (m424b@find* m42c2@sym* m42be@subst))) (m424f@remove-dups m42bf@sym*))) (m4255@get-import m42b9@isp) (map m2fa5@syntax->datum m42ba@sym*))) m42b0@ls/false) ((lambda (m42c6@t) ((lambda (m42c8@ls/false) (if (and m42c8@ls/false (apply (lambda (m42ca@prefix m42cb@isp m42cc@p) (and (eq? (m2fa5@syntax->datum m42ca@prefix) 'prefix) (m4243@idsyn? m42cc@p))) m42c8@ls/false)) (apply (lambda (m42d0@prefix m42d1@isp m42d2@p) ((lambda (m42d6@subst m42d7@prefix) (map (lambda (m42da@x) (cons (string->symbol (string-append m42d7@prefix (symbol->string (car m42da@x)))) (cdr m42da@x))) m42d6@subst)) (m4255@get-import m42d1@isp) (symbol->string (m2fa5@syntax->datum m42d2@p)))) m42c8@ls/false) ((lambda (m42dc@t) ((lambda (m42de@ls/false) (if (and m42de@ls/false (apply (lambda (m42e0@library m42e1@spec*) (eq? (m2fa5@syntax->datum m42e0@library) 'library)) m42de@ls/false)) (apply (lambda (m42e4@library m42e5@spec*) (m4253@import-library m42e5@spec*)) m42de@ls/false) ((lambda (m42e8@t) ((lambda (m42ea@ls/false) (if (and m42ea@ls/false (apply (lambda (m42ec@for m42ed@isp m42ee@rest) (eq? (m2fa5@syntax->datum m42ec@for) 'for)) m42ea@ls/false)) (apply (lambda (m42f2@for m42f3@isp m42f4@rest) (m4255@get-import m42f3@isp)) m42ea@ls/false) ((lambda (m42f8@t) ((lambda (m42fa@ls/false) (if m42fa@ls/false (apply (lambda (m42fc@spec) (m2f9f@syntax-violation 'import '"invalid import spec" m42fc@spec)) m42fa@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m42f8@t))) (m2eb6@syntax-dispatch m42f8@t 'any))) m42e8@t))) (m2eb6@syntax-dispatch m42e8@t '(any any . any)))) m42dc@t))) (m2eb6@syntax-dispatch m42dc@t '(any each-any)))) m42c6@t))) (m2eb6@syntax-dispatch m42c6@t '(any any any)))) m42ae@t))) (m2eb6@syntax-dispatch m42ae@t '(any any . each-any)))) m429c@t))) (m2eb6@syntax-dispatch m429c@t '(any any . each-any)))) m427e@t))) (m2eb6@syntax-dispatch m427e@t '(any any . #(each (any any)))))) m4272@t))) (m2eb6@syntax-dispatch m4272@t '(any . each-any)))) m4270@spec))) (set! m4257@add-imports! (lambda (m4260@imp m4261@h) ((lambda (m4264@subst) (for-each (lambda (m4266@x) ((lambda (m4268@name m4269@label) ((lambda (m426c@t) (if m426c@t ((lambda (m426e@l) (if (not (eq? m426e@l m4269@label)) (m4245@dup-error m4268@name) (void))) m426c@t) (hashtable-set! m4261@h m4268@name m4269@label))) (hashtable-ref m4261@h m4268@name '#f))) (car m4266@x) (cdr m4266@x))) m4264@subst)) (m4255@get-import m4260@imp)))) (lambda (m4258@imp*) ((letrec ((m425a@f (lambda (m425c@imp* m425d@h) (if (null? m425c@imp*) (hashtable-entries m425d@h) (begin (m4257@add-imports! (car m425c@imp*) m425d@h) (m425a@f (cdr m425c@imp*) m425d@h)))))) m425a@f) m4258@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! m2f1d@make-top-rib (lambda (m444e@names m444f@labels) ((lambda (m4452@rib) (begin (vector-for-each (lambda (m4454@name m4455@label) (begin (if (not (symbol? m4454@name)) (error 'make-top-rib '"BUG: not a symbol" m4454@name) (void)) (m2c5e@extend-rib/nc! m4452@rib (m2c75@make-stx m4454@name m2c27@top-mark* '() '()) m4455@label))) m444e@names m444f@labels) m4452@rib)) (m2c5a@make-empty-rib)))) (set! m2f1f@make-collector (lambda () ((lambda (m4458@ls) (lambda m445c ((lambda (m445d) (if (= m445d '0) (apply (lambda () m4458@ls) m445c) (if (= m445d '1) (apply (lambda (m445a@x) (set! m4458@ls (m2c20@set-cons m445a@x m4458@ls))) m445c) (error 'apply '"invalid arg count")))) (length m445c)))) '()))) (set! m2f21@inv-collector (m2855@m277f@make-parameter (lambda m445e@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (m4460@x) (begin (if (not (procedure? m4460@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" m4460@x) (void)) m4460@x)))) (set! m2f23@vis-collector (m2855@m277f@make-parameter (lambda m4462@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (m4464@x) (begin (if (not (procedure? m4464@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" m4464@x) (void)) m4464@x)))) (set! m2f25@imp-collector (m2855@m277f@make-parameter (lambda m4466@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (m4468@x) (begin (if (not (procedure? m4468@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" m4468@x) (void)) m4468@x)))) (set! m2f27@chi-library-internal (lambda (m446a@e* m446b@rib m446c@top?) (call-with-values (lambda () (m2f11@chi-body* m446a@e* '() '() '() '() '() '() '() m446b@rib m446c@top?)) (lambda (m4480@m4471 m4481@m4473 m4482@m4475 m4483@m4477 m4484@m4479 m4485@m447b m4486@m447d m4487@m447f) ((lambda (m4490@exp* m4491@_kwd* m4492@mod** m4493@rhs* m4494@lex* m4495@mr m4496@r m4497@e*) (values (append (apply append (reverse m4492@mod**)) m4497@e*) m4496@r m4495@mr (reverse m4494@lex*) (reverse m4493@rhs*) m4490@exp*)) m4487@m447f m4486@m447d m4485@m447b m4484@m4479 m4483@m4477 m4482@m4475 m4481@m4473 m4480@m4471))))) (set! m2f29@chi-interaction-expr (lambda (m44a0@e m44a1@rib m44a2@r) (call-with-values (lambda () (m2f11@chi-body* (list m44a0@e) m44a2@r m44a2@r '() '() '() '() '() m44a1@rib '#t)) (lambda (m44b6@m44a7 m44b7@m44a9 m44b8@m44ab m44b9@m44ad m44ba@m44af m44bb@m44b1 m44bc@m44b3 m44bd@m44b5) ((lambda (m44c6@_exp* m44c7@_kwd* m44c8@mod** m44c9@rhs* m44ca@lex* m44cb@mr m44cc@r m44cd@e*) ((lambda (m44d6@e*) ((lambda (m44d8@e) (values m44d8@e m44cc@r)) (if (null? m44d6@e*) (m2c0b@m2b7b@build-void) (if (null? (cdr m44d6@e*)) (car m44d6@e*) (m2c0a@m2b79@build-sequence '#f m44d6@e*))))) (m2ee6@expand-interaction-rhs*/init* (reverse m44ca@lex*) (reverse m44c9@rhs*) (append (apply append (reverse m44c8@mod**)) m44cd@e*) m44cc@r m44cb@mr))) m44bd@m44b5 m44bc@m44b3 m44bb@m44b1 m44ba@m44af m44b9@m44ad m44b8@m44ab m44b7@m44a9 m44b6@m44a7))))) (set! m2f2b@library-body-expander (lambda (m44da@name m44db@main-exp* m44dc@imp* m44dd@b* m44de@top?) ((lambda (m44e5@itc) (begin (set! m44e5@itc (m2f1f@make-collector)) ((lambda (m44ee@m44e7 m44ef@m44e9 m44f0@m44eb m44f1@m44ed) ((lambda (m44f6@swap) (dynamic-wind m44f6@swap (lambda () (call-with-values (lambda () (m2f1b@parse-import-spec* m44dc@imp*)) (lambda (m44fc@m44f9 m44fd@m44fb) ((lambda (m4500@subst-labels m4501@subst-names) ((lambda (m4504@rib) ((lambda (m4507@wrap) (begin (set! m4507@wrap (lambda (m4582@x) (m2c75@make-stx m4582@x m2c27@top-mark* (list m4504@rib) '()))) ((lambda (m4508@b* m4509@main-exp* m450a@rtc m450b@vtc) ((lambda (m4518@m4511 m4519@m4513 m451a@m4515 m451b@m4517) ((lambda (m4520@swap) (dynamic-wind m4520@swap (lambda () (call-with-values (lambda () (m2f27@chi-library-internal m4508@b* m4504@rib m44de@top?)) (lambda (m452e@m4523 m452f@m4525 m4530@m4527 m4531@m4529 m4532@m452b m4533@m452d) ((lambda (m453a@internal-exp* m453b@rhs* m453c@lex* m453d@mr m453e@r m453f@init*) (call-with-values (lambda () (m2f15@parse-exports (append m4509@main-exp* m453a@internal-exp*))) (lambda (m454a@m4547 m454b@m4549) ((lambda (m454e@exp-id* m454f@exp-name*) (begin (m2c62@seal-rib! m4504@rib) ((lambda (m4552@init*) ((lambda (m4554@rhs*) ((lambda () (begin (m2c64@unseal-rib! m4504@rib) ((lambda (m4556@loc* m4557@export-subst) ((lambda (m455b@errstr) (begin (set! m455b@errstr '"attempt to export mutated variable") (call-with-values (lambda () (m2f8b@make-export-env/macros m453c@lex* m4556@loc* m453e@r)) (lambda (m4562@m455d m4563@m455f m4564@m4561) ((lambda (m4568@macro* m4569@global* m456a@export-env) (begin (for-each (lambda (m456e@s) ((lambda (m4570@name m4571@label) ((lambda (m4574@p) (if m4574@p ((lambda (m4576@b) ((lambda (m4578@type) (if (eq? m4578@type 'mutable) (m2f9f@syntax-violation 'export m455b@errstr m4570@name) (void))) (car m4576@b))) (cdr m4574@p)) (void))) (assq m4571@label m456a@export-env))) (car m456e@s) (cdr m456e@s))) m4557@export-subst) ((lambda (m457a@invoke-body m457b@invoke-definitions) (values (m44e5@itc) (m450a@rtc) (m450b@vtc) (m2c0a@m2b79@build-sequence '#f (append m457b@invoke-definitions (list m457a@invoke-body))) m4568@macro* m4557@export-subst m456a@export-env)) (m2c0d@m2b7f@build-letrec* '#f m453c@lex* m4554@rhs* (m2f87@build-exports m4569@global* m4552@init*)) (map m2c06@m2ad6@build-global-define (map cdr m4569@global*))))) m4564@m4561 m4563@m455f m4562@m455d))))) '#f)) (map m2c2d@gen-global m453c@lex*) (m2f89@make-export-subst m454f@exp-name* m454e@exp-id*)))))) (m2ee8@chi-rhs* m453b@rhs* m453e@r m453d@mr))) (m2ed4@chi-expr* m453f@init* m453e@r m453d@mr)))) m454b@m4549 m454a@m4547)))) m4533@m452d m4532@m452b m4531@m4529 m4530@m4527 m452f@m4525 m452e@m4523)))) m4520@swap)) (lambda () (begin ((lambda (m457e@t) (begin (m4518@m4511 m451a@m4515) (set! m451a@m4515 m457e@t))) (m4518@m4511)) ((lambda (m4580@t) (begin (m4519@m4513 m451b@m4517) (set! m451b@m4517 m4580@t))) (m4519@m4513)))))) m2f21@inv-collector m2f23@vis-collector m450a@rtc m450b@vtc)) (map m4507@wrap m44dd@b*) (map m4507@wrap m44db@main-exp*) (m2f1f@make-collector) (m2f1f@make-collector)))) '#f)) (m2f1d@make-top-rib m4501@subst-names m4500@subst-labels))) m44fd@m44fb m44fc@m44f9)))) m44f6@swap)) (lambda () (begin ((lambda (m4584@t) (begin (m44ee@m44e7 m44f0@m44eb) (set! m44f0@m44eb m4584@t))) (m44ee@m44e7)) ((lambda (m4586@t) (begin (m44ef@m44e9 m44f1@m44ed) (set! m44f1@m44ed m4586@t))) (m44ef@m44e9)))))) m2f25@imp-collector m2fad@top-level-context m44e5@itc '#f))) '#f))) (set! m2f2d@core-library-expander (lambda (m4588@e m4589@verify-name) (call-with-values (lambda () (m2f19@parse-library m4588@e)) (lambda (m4594@m458d m4595@m458f m4596@m4591 m4597@m4593) ((lambda (m459c@b* m459d@imp* m459e@exp* m459f@name*) (call-with-values (lambda () (m2f17@parse-library-name m459f@name*)) (lambda (m45a8@m45a5 m45a9@m45a7) ((lambda (m45ac@ver m45ad@name) (begin (m4589@verify-name m45ad@name) (call-with-values (lambda () (m2f2b@library-body-expander m45ad@name m459e@exp* m459d@imp* m459c@b* '#f)) (lambda (m45be@m45b1 m45bf@m45b3 m45c0@m45b5 m45c1@m45b7 m45c2@m45b9 m45c3@m45bb m45c4@m45bd) ((lambda (m45cc@export-env m45cd@export-subst m45ce@visit-code m45cf@invoke-code m45d0@visit-req* m45d1@invoke-req* m45d2@imp*) (values m45ad@name m45ac@ver m45d2@imp* m45d1@invoke-req* m45d0@visit-req* m45cf@invoke-code m45ce@visit-code m45cd@export-subst m45cc@export-env)) m45c4@m45bd m45c3@m45bb m45c2@m45b9 m45c1@m45b7 m45c0@m45b5 m45bf@m45b3 m45be@m45b1))))) m45a9@m45a7 m45a8@m45a5)))) m4597@m4593 m4596@m4591 m4595@m458f m4594@m458d))))) (set! m2f2f@parse-top-level-program (lambda (m45da@e*) ((lambda (m45dc@t) ((lambda (m45de@ls/false) (if (and m45de@ls/false (apply (lambda (m45e0@import m45e1@imp* m45e2@b*) (eq? (m2fa5@syntax->datum m45e0@import) 'import)) m45de@ls/false)) (apply (lambda (m45e6@import m45e7@imp* m45e8@b*) (values m45e7@imp* m45e8@b*)) m45de@ls/false) ((lambda (m45ec@t) ((lambda (m45ee@ls/false) (if (and m45ee@ls/false (apply (lambda (m45f0@import m45f1@x m45f2@y) (eq? (m2fa5@syntax->datum m45f0@import) 'import)) m45ee@ls/false)) (apply (lambda (m45f6@import m45f7@x m45f8@y) (m2f9f@syntax-violation 'expander '"invalid syntax of top-level program" (m2ca5@syntax-car m45da@e*))) m45ee@ls/false) ((lambda (m45fc@t) ((lambda (m45fe@ls/false) (if m45fe@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) m45fe@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m45fc@t))) (m2eb6@syntax-dispatch m45fc@t '_))) m45ec@t))) (m2eb6@syntax-dispatch m45ec@t '((any . any) . any)))) m45dc@t))) (m2eb6@syntax-dispatch m45dc@t '((any . each-any) . each-any)))) m45da@e*))) (set! m2f31@top-level-expander (lambda (m4600@e*) (call-with-values (lambda () (m2f2f@parse-top-level-program m4600@e*)) (lambda (m4606@m4603 m4607@m4605) ((lambda (m460a@b* m460b@imp*) (call-with-values (lambda () (m2f2b@library-body-expander '() '() m460b@imp* m460a@b* '#t)) (lambda (m461c@m460f m461d@m4611 m461e@m4613 m461f@m4615 m4620@m4617 m4621@m4619 m4622@m461b) ((lambda (m462a@export-env m462b@export-subst m462c@visit-code m462d@invoke-code m462e@visit-req* m462f@invoke-req* m4630@imp*) (values m462f@invoke-req* m462d@invoke-code)) m4622@m461b m4621@m4619 m4620@m4617 m461f@m4615 m461e@m4613 m461d@m4611 m461c@m460f)))) m4607@m4605 m4606@m4603))))) (set! m2f37@m2f32 (make-record-type-descriptor 'env '#f 'm2f35 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! m2f39@m2f34 '#f) (set! m2f3b@m2f33 (make-record-constructor-descriptor m2f37@m2f32 '#f m2f39@m2f34)) (set! m2f3e@env? (record-predicate m2f37@m2f32)) (set! m2f40@make-env (record-constructor m2f3b@m2f33)) (set! m2f42@env-names (record-accessor m2f37@m2f32 '0)) (set! m2f44@env-labels (record-accessor m2f37@m2f32 '1)) (set! m2f46@env-itc (record-accessor m2f37@m2f32 '2)) (set! m2f48@set-env-names! (record-mutator m2f37@m2f32 '0)) (set! m2f4a@set-env-labels! (record-mutator m2f37@m2f32 '1)) (set! m2f4c@set-env-itc! (record-mutator m2f37@m2f32 '2)) (set! m2f4e@rp (m2852@m2779@make-record-printer 'env (lambda (m4638@x m4639@p m463a@wr) (display '"#<environment>" m4639@p)))) (set! m2f54@m2f4f (make-record-type-descriptor 'interaction-env '#f 'm2f52 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! m2f56@m2f51 '#f) (set! m2f58@m2f50 (make-record-constructor-descriptor m2f54@m2f4f '#f m2f56@m2f51)) (set! m2f5b@interaction-env? (record-predicate m2f54@m2f4f)) (set! m2f5d@make-interaction-env (record-constructor m2f58@m2f50)) (set! m2f5f@interaction-env-rib (record-accessor m2f54@m2f4f '0)) (set! m2f61@interaction-env-r (record-accessor m2f54@m2f4f '1)) (set! m2f63@interaction-env-locs (record-accessor m2f54@m2f4f '2)) (set! m2f65@set-interaction-env-rib! (record-mutator m2f54@m2f4f '0)) (set! m2f67@set-interaction-env-r! (record-mutator m2f54@m2f4f '1)) (set! m2f69@set-interaction-env-locs! (record-mutator m2f54@m2f4f '2)) (set! m2f6b@rp (m2852@m2779@make-record-printer 'interaction-env (lambda (m463e@x m463f@p m4640@wr) (display '"#<environment>" m463f@p)))) (set! m2f6d@interaction-environment-symbols (lambda () (m2f75@environment-symbols (m2fab@interaction-environment)))) (set! m2f6f@environment-bindings (lambda (m4644@e) (vector->list (vector-map (lambda (m4646@name m4647@label) (m2f71@parse-binding (cons m4646@name (m2ace@m296e@imported-label->binding m4647@label)))) (m2f42@env-names m4644@e) (m2f44@env-labels m4644@e))))) (set! m2f71@parse-binding (lambda (m464a@b) (cons (car m464a@b) ((lambda (m464c@t) (if (memv m464c@t '(core-prim global)) 'procedure (if (memv m464c@t '(core-macro macro global-macro)) 'syntax (if (memv m464c@t '($core-rtd)) 'record (if (eq? (car m464a@b) (cadr m464a@b)) 'syntax 'unknown))))) (cadr m464a@b))))) (set! m2f73@environment? (lambda (m464e@x) (or (m2f3e@env? m464e@x) (m2f5b@interaction-env? m464e@x)))) (set! m2f75@environment-symbols (lambda (m4650@x) (if (m2f3e@env? m4650@x) (vector->list (m2f42@env-names m4650@x)) (if (m2f5b@interaction-env? m4650@x) (map values (m2c46@rib-sym* (m2f5f@interaction-env-rib m4650@x))) (assertion-violation 'environment-symbols '"not an environment" m4650@x))))) (set! m2f77@environment (lambda m4652@imp* ((lambda (m4654@itc) ((lambda (m465a@m4657 m465b@m4659) ((lambda (m465e@swap) (dynamic-wind m465e@swap (lambda () (call-with-values (lambda () (m2f1b@parse-import-spec* m4652@imp*)) (lambda (m4664@m4661 m4665@m4663) ((lambda (m4668@subst-labels m4669@subst-names) (m2f40@make-env m4669@subst-names m4668@subst-labels m4654@itc)) m4665@m4663 m4664@m4661)))) m465e@swap)) (lambda () ((lambda (m466c@t) (begin (m465a@m4657 m465b@m4659) (set! m465b@m4659 m466c@t))) (m465a@m4657))))) m2f25@imp-collector m4654@itc)) (m2f1f@make-collector)))) (set! m2f79@null-environment (lambda (m466e@n) (begin (if (not (eqv? m466e@n '5)) (assertion-violation 'null-environment '"not 5" m466e@n) (void)) (m2f77@environment '(psyntax null-environment-5))))) (set! m2f7b@scheme-report-environment (lambda (m4670@n) (begin (if (not (eqv? m4670@n '5)) (assertion-violation 'scheme-report-environment '"not 5" m4670@n) (void)) (m2f77@environment '(psyntax scheme-report-environment-5))))) (set! m2f7d@expand (lambda (m4672@x m4673@env) (if (m2f3e@env? m4673@env) ((lambda (m4676@rib) ((lambda (m4678@x m4679@itc m467a@rtc m467b@vtc) ((lambda (m4680@x) (begin (m2c62@seal-rib! m4676@rib) (values m4680@x (m467a@rtc)))) ((lambda (m4692@m4683 m4693@m4685 m4694@m4687 m4695@m4689 m4696@m468b m4697@m468d m4698@m468f m4699@m4691) ((lambda (m46a2@swap) (dynamic-wind m46a2@swap (lambda () (m2ed8@chi-expr m4678@x '() '())) m46a2@swap)) (lambda () (begin ((lambda (m46a4@t) (begin (m4692@m4683 m4696@m468b) (set! m4696@m468b m46a4@t))) (m4692@m4683)) ((lambda (m46a6@t) (begin (m4693@m4685 m4697@m468d) (set! m4697@m468d m46a6@t))) (m4693@m4685)) ((lambda (m46a8@t) (begin (m4694@m4687 m4698@m468f) (set! m4698@m468f m46a8@t))) (m4694@m4687)) ((lambda (m46aa@t) (begin (m4695@m4689 m4699@m4691) (set! m4699@m4691 m46aa@t))) (m4695@m4689)))))) m2fad@top-level-context m2f21@inv-collector m2f23@vis-collector m2f25@imp-collector '#f m467a@rtc m467b@vtc m4679@itc))) (m2c75@make-stx m4672@x m2c27@top-mark* (list m4676@rib) '()) (m2f46@env-itc m4673@env) (m2f1f@make-collector) (m2f1f@make-collector))) (m2f1d@make-top-rib (m2f42@env-names m4673@env) (m2f44@env-labels m4673@env))) (if (m2f5b@interaction-env? m4673@env) ((lambda (m46ac@rib m46ad@r m46ae@rtc) ((lambda (m46b2@x) (call-with-values (lambda () ((lambda (m46c8@m46b9 m46c9@m46bb m46ca@m46bd m46cb@m46bf m46cc@m46c1 m46cd@m46c3 m46ce@m46c5 m46cf@m46c7) ((lambda (m46d8@swap) (dynamic-wind m46d8@swap (lambda () (m2f29@chi-interaction-expr m46b2@x m46ac@rib m46ad@r)) m46d8@swap)) (lambda () (begin ((lambda (m46da@t) (begin (m46c8@m46b9 m46cc@m46c1) (set! m46cc@m46c1 m46da@t))) (m46c8@m46b9)) ((lambda (m46dc@t) (begin (m46c9@m46bb m46cd@m46c3) (set! m46cd@m46c3 m46dc@t))) (m46c9@m46bb)) ((lambda (m46de@t) (begin (m46ca@m46bd m46ce@m46c5) (set! m46ce@m46c5 m46de@t))) (m46ca@m46bd)) ((lambda (m46e0@t) (begin (m46cb@m46bf m46cf@m46c7) (set! m46cf@m46c7 m46e0@t))) (m46cb@m46bf)))))) m2fad@top-level-context m2f21@inv-collector m2f23@vis-collector m2f25@imp-collector m4673@env m46ae@rtc (m2f1f@make-collector) (m2f1f@make-collector))) (lambda (m46e2@m46b5 m46e3@m46b7) ((lambda (m46e6@r^ m46e7@e) (begin (m2f67@set-interaction-env-r! m4673@env m46e6@r^) (values m46e7@e (m46ae@rtc)))) m46e3@m46b7 m46e2@m46b5)))) (m2c75@make-stx m4672@x m2c27@top-mark* (list m46ac@rib) '()))) (m2f5f@interaction-env-rib m4673@env) (m2f61@interaction-env-r m4673@env) (m2f1f@make-collector)) (assertion-violation 'expand '"not an environment" m4673@env))))) (set! m2f7f@eval (lambda (m46ea@x m46eb@env) (begin (if (not (m2f73@environment? m46eb@env)) (error 'eval '"not an environment" m46eb@env) (void)) (call-with-values (lambda () (m2f7d@expand m46ea@x m46eb@env)) (lambda (m46f2@m46ef m46f3@m46f1) ((lambda (m46f6@invoke-req* m46f7@x) (begin (for-each m2acf@m2970@invoke-library m46f6@invoke-req*) (eval-core (m28a9@m2861@expanded->core m46f7@x)))) m46f3@m46f1 m46f2@m46ef)))))) (set! m2f81@library-expander (lambda m4768 ((lambda (m4769) (if (= m4769 '3) (apply (lambda (m46fa@x m46fb@filename m46fc@verify-name) ((lambda (m4701@build-visit-code m4703@visit!) (begin (set! m4701@build-visit-code (lambda (m4756@macro*) (if (null? m4756@macro*) (m2c0b@m2b7b@build-void) (m2c0a@m2b79@build-sequence '#f (map (lambda (m4758@x) ((lambda (m475a@loc m475b@src) (list 'set! m475a@loc m475b@src)) (car m4758@x) (cddr m4758@x))) m4756@macro*))))) (set! m4703@visit! (lambda (m474e@macro*) (for-each (lambda (m4750@x) ((lambda (m4752@loc m4753@proc) (set-symbol-value! m4752@loc m4753@proc)) (car m4750@x) (cadr m4750@x))) m474e@macro*))) (call-with-values (lambda () (m2f2d@core-library-expander m46fa@x m46fc@verify-name)) (lambda (m4716@m4705 m4717@m4707 m4718@m4709 m4719@m470b m471a@m470d m471b@m470f m471c@m4711 m471d@m4713 m471e@m4715) ((lambda (m4728@export-env m4729@export-subst m472a@macro* m472b@invoke-code m472c@vis* m472d@inv* m472e@imp* m472f@ver m4730@name) ((lambda (m473a@id m473b@name m473c@ver m473d@imp* m473e@vis* m473f@inv* m4740@visit-proc m4741@invoke-proc m4742@visit-code m4743@invoke-code) (begin (m2acd@m296c@install-library m473a@id m473b@name m473c@ver m473d@imp* m473e@vis* m473f@inv* m4729@export-subst m4728@export-env m4740@visit-proc m4741@invoke-proc m4742@visit-code m4743@invoke-code '#t m46fb@filename) (values m473a@id m473b@name m473c@ver m473d@imp* m473e@vis* m473f@inv* m4743@invoke-code m4742@visit-code m4729@export-subst m4728@export-env))) (gensym) m4730@name m472f@ver (map m2ad3@m2978@library-spec m472e@imp*) (map m2ad3@m2978@library-spec m472c@vis*) (map m2ad3@m2978@library-spec m472d@inv*) (lambda () (m4703@visit! m472a@macro*)) (lambda () (eval-core (m28a9@m2861@expanded->core m472b@invoke-code))) (m4701@build-visit-code m472a@macro*) m472b@invoke-code)) m471e@m4715 m471d@m4713 m471c@m4711 m471b@m470f m471a@m470d m4719@m470b m4718@m4709 m4717@m4707 m4716@m4705))))) '#f '#f)) m4768) (if (= m4769 '2) (apply (lambda (m475e@x m475f@filename) (m2f81@library-expander m475e@x m475f@filename (lambda (m4762@x) (values)))) m4768) (if (= m4769 '1) (apply (lambda (m4764@x) (m2f81@library-expander m4764@x '#f (lambda (m4766@x) (values)))) m4768) (error 'apply '"invalid arg count"))))) (length m4768)))) (set! m2f83@boot-library-expand (lambda (m476a@x) (call-with-values (lambda () (m2f81@library-expander m476a@x)) (lambda (m4780@m476d m4781@m476f m4782@m4771 m4783@m4773 m4784@m4775 m4785@m4777 m4786@m4779 m4787@m477b m4788@m477d m4789@m477f) ((lambda (m4794@export-env m4795@export-subst m4796@visit-code m4797@invoke-code m4798@inv* m4799@vis* m479a@imp* m479b@ver m479c@name m479d@id) (values m479c@name m4797@invoke-code m4795@export-subst m4794@export-env)) m4789@m477f m4788@m477d m4787@m477b m4786@m4779 m4785@m4777 m4784@m4775 m4783@m4773 m4782@m4771 m4781@m476f m4780@m476d))))) (set! m2f85@rev-map-append (lambda (m47a8@f m47a9@ls m47aa@ac) (if (null? m47a9@ls) m47aa@ac (m2f85@rev-map-append m47a8@f (cdr m47a9@ls) (cons (m47a8@f (car m47a9@ls)) m47aa@ac))))) (set! m2f87@build-exports (lambda (m47ae@lex*+loc* m47af@init*) (m2c0a@m2b79@build-sequence '#f (cons (m2c0b@m2b7b@build-void) (m2f85@rev-map-append (lambda (m47b2@x) (list 'set! (cdr m47b2@x) (car m47b2@x))) m47ae@lex*+loc* m47af@init*))))) (set! m2f89@make-export-subst (lambda (m47b4@name* m47b5@id*) (map (lambda (m47b8@name m47b9@id) ((lambda (m47bc@label) (begin (if (not m47bc@label) (m2f9f@syntax-violation '#f '"cannot export unbound identifier" m47b9@id) (void)) (cons m47b8@name m47bc@label))) (m2cc5@id->label m47b9@id))) m47b4@name* m47b5@id*))) (set! m2f8b@make-export-env/macros (lambda (m47be@lex* m47bf@loc* m47c0@r) ((lambda (m47c5@lookup) (begin (set! m47c5@lookup (lambda (m47e2@x) ((letrec ((m47e4@f (lambda (m47e6@x m47e7@lex* m47e8@loc*) (if (pair? m47e7@lex*) (if (eq? m47e6@x (car m47e7@lex*)) (car m47e8@loc*) (m47e4@f m47e6@x (cdr m47e7@lex*) (cdr m47e8@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) m47e4@f) m47e2@x m47be@lex* m47bf@loc*))) ((letrec ((m47c6@f (lambda (m47c8@r m47c9@env m47ca@global* m47cb@macro*) (if (null? m47c8@r) (values m47c9@env m47ca@global* m47cb@macro*) ((lambda (m47d0@x) ((lambda (m47d2@label m47d3@b) ((lambda (m47d6@t) (if (memv m47d6@t '(lexical)) ((lambda (m47d8@v) ((lambda (m47da@loc m47db@type) (m47c6@f (cdr m47c8@r) (cons (cons* m47d2@label m47db@type m47da@loc) m47c9@env) (cons (cons (m2e42@lexical-var m47d8@v) m47da@loc) m47ca@global*) m47cb@macro*)) (m47c5@lookup (m2e42@lexical-var m47d8@v)) (if (m2e44@lexical-mutable? m47d8@v) 'mutable 'global))) (m2ccf@binding-value m47d3@b)) (if (memv m47d6@t '(local-macro)) ((lambda (m47de@loc) (m47c6@f (cdr m47c8@r) (cons (cons* m47d2@label 'global-macro m47de@loc) m47c9@env) m47ca@global* (cons (cons m47de@loc (m2ccf@binding-value m47d3@b)) m47cb@macro*))) (gensym)) (if (memv m47d6@t '(local-macro!)) ((lambda (m47e0@loc) (m47c6@f (cdr m47c8@r) (cons (cons* m47d2@label 'global-macro! m47e0@loc) m47c9@env) m47ca@global* (cons (cons m47e0@loc (m2ccf@binding-value m47d3@b)) m47cb@macro*))) (gensym)) (if (memv m47d6@t '($rtd $module)) (m47c6@f (cdr m47c8@r) (cons m47d0@x m47c9@env) m47ca@global* m47cb@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (m2ccd@binding-type m47d3@b) (m2ccf@binding-value m47d3@b))))))) (m2ccd@binding-type m47d3@b))) (car m47d0@x) (cdr m47d0@x))) (car m47c8@r)))))) m47c6@f) m47c0@r '() '() '()))) '#f))) (set! m2f8d@generate-temporaries (lambda (m47ec@ls) ((lambda (m47ee@t) ((lambda (m47f0@ls/false) (if m47f0@ls/false (apply (lambda (m47f2@ls) (map (lambda (m47f4@x) (m2c75@make-stx ((lambda (m47f6@x) (if (or (symbol? m47f6@x) (string? m47f6@x)) (gensym m47f6@x) (gensym 't))) (m2fa5@syntax->datum m47f4@x)) m2c27@top-mark* '() '())) m47f2@ls)) m47f0@ls/false) ((lambda (m47f8@t) ((lambda (m47fa@ls/false) (if m47fa@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) m47fa@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m47f8@t))) (m2eb6@syntax-dispatch m47f8@t '_))) m47ee@t))) (m2eb6@syntax-dispatch m47ee@t 'each-any))) m47ec@ls))) (set! m2f8f@free-identifier=? (lambda (m47fc@x m47fd@y) (if (m2cab@id? m47fc@x) (if (m2cab@id? m47fd@y) (m2cb3@free-id=? m47fc@x m47fd@y) (assertion-violation 'free-identifier=? '"not an identifier" m47fd@y)) (assertion-violation 'free-identifier=? '"not an identifier" m47fc@x)))) (set! m2f91@bound-identifier=? (lambda (m4800@x m4801@y) (if (m2cab@id? m4800@x) (if (m2cab@id? m4801@y) (m2cb1@bound-id=? m4800@x m4801@y) (assertion-violation 'bound-identifier=? '"not an identifier" m4801@y)) (assertion-violation 'bound-identifier=? '"not an identifier" m4800@x)))) (set! m2f93@make-source-condition (lambda (m4804@x) ((lambda (m480e@m4809 m4810@m480b m4812@m480a m4815@m4808 m4817@make-source-condition m4819@m4806 m481b@m4807 m481d@source-condition? m481f@source-filename m4821@source-character) (begin (set! m480e@m4809 (make-record-type-descriptor '&source-information m4c6c@m49b3@&condition-rtd 'm480c '#f '#f '#((immutable file-name) (immutable character)))) (set! m4810@m480b '#f) (set! m4812@m480a (make-record-constructor-descriptor m480e@m4809 m4c6d@m49b5@&condition-rcd m4810@m480b)) (set! m4815@m4808 (record-predicate m480e@m4809)) (set! m4817@make-source-condition (record-constructor m4812@m480a)) (set! m4819@m4806 (record-accessor m480e@m4809 '0)) (set! m481b@m4807 (record-accessor m480e@m4809 '1)) (set! m481d@source-condition? (condition-predicate m480e@m4809)) (set! m481f@source-filename (condition-accessor m480e@m4809 m4819@m4806)) (set! m4821@source-character (condition-accessor m480e@m4809 m481b@m4807)) (if (pair? m4804@x) (m4817@make-source-condition (car m4804@x) (cdr m4804@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! m2f95@extract-position-condition (lambda (m4822@x) (m2f93@make-source-condition (m2f97@expression-position m4822@x)))) (set! m2f97@expression-position (lambda (m4824@x) (and (m2c73@stx? m4824@x) ((lambda (m4826@x) (and (m284a@m2769@annotation? m4826@x) (m284b@m276b@annotation-source m4826@x))) (m2c77@stx-expr m4824@x))))) (set! m2f99@assertion-error (lambda (m4828@expr m4829@pos) (raise (condition (m4c9c@m4a77@make-assertion-violation) (m4cae@m4aa9@make-who-condition 'assert) (m4c72@m4a0a@make-message-condition '"assertion failed") (m4ca4@m4a8e@make-irritants-condition (list m4828@expr)) (m2f93@make-source-condition m4829@pos))))) (set! m2f9b@syntax-error (lambda (m482c@x . m482e@args) (begin (if (not (for-all string? m482e@args)) (assertion-violation 'syntax-error '"invalid argument" m482e@args) (void)) (raise (condition (m4c72@m4a0a@make-message-condition (if (null? m482e@args) '"invalid syntax" (apply string-append m482e@args))) (m4cd0@m4b05@make-syntax-violation (m2fa5@syntax->datum m482c@x) '#f) (m2f95@extract-position-condition m482c@x)))))) (set! m2f9d@syntax-violation* (lambda (m4830@who m4831@msg m4832@form m4833@condition-object) (begin (if (not (string? m4831@msg)) (assertion-violation 'syntax-violation '"message is not a string" m4831@msg) (void)) ((lambda (m4838@who) (raise (condition (if m4838@who (m4cae@m4aa9@make-who-condition m4838@who) (condition)) (m4c72@m4a0a@make-message-condition m4831@msg) m4833@condition-object (m2f95@extract-position-condition m4832@form)))) (if (or (string? m4830@who) (symbol? m4830@who)) m4830@who (if (not m4830@who) ((lambda (m483a@t) ((lambda (m483c@ls/false) (if (and m483c@ls/false (apply (lambda (m483e@id) (m2cab@id? m483e@id)) m483c@ls/false)) (apply (lambda (m4840@id) (m2fa5@syntax->datum m4840@id)) m483c@ls/false) ((lambda (m4842@t) ((lambda (m4844@ls/false) (if (and m4844@ls/false (apply (lambda (m4846@id m4847@rest) (m2cab@id? m4846@id)) m4844@ls/false)) (apply (lambda (m484a@id m484b@rest) (m2fa5@syntax->datum m484a@id)) m4844@ls/false) ((lambda (m484e@t) ((lambda (m4850@ls/false) (if m4850@ls/false (apply (lambda () '#f) m4850@ls/false) (m2f9f@syntax-violation '#f '"invalid syntax" m484e@t))) (m2eb6@syntax-dispatch m484e@t '_))) m4842@t))) (m2eb6@syntax-dispatch m4842@t '(any . any)))) m483a@t))) (m2eb6@syntax-dispatch m483a@t 'any))) m4832@form) (assertion-violation 'syntax-violation '"invalid who argument" m4830@who))))))) (set! m2f9f@syntax-violation (lambda m4860 ((lambda (m4861) (if (= m4861 '3) (apply (lambda (m4852@who m4853@msg m4854@form) (m2f9f@syntax-violation m4852@who m4853@msg m4854@form '#f)) m4860) (if (= m4861 '4) (apply (lambda (m4858@who m4859@msg m485a@form m485b@subform) (m2f9d@syntax-violation* m4858@who m4859@msg m485a@form (m4cd0@m4b05@make-syntax-violation (m2fa5@syntax->datum m485a@form) (m2fa5@syntax->datum m485b@subform)))) m4860) (error 'apply '"invalid arg count")))) (length m4860)))) (set! m2fa1@identifier? (lambda (m4862@x) (m2cab@id? m4862@x))) (set! m2fa3@datum->syntax (lambda (m4864@id m4865@datum) (if (m2cab@id? m4864@id) (m2c89@datum->stx m4864@id m4865@datum) (assertion-violation 'datum->syntax '"not an identifier" m4864@id)))) (set! m2fa5@syntax->datum (lambda (m4868@x) (m2cc1@stx->datum m4868@x))) (set! m2fa7@compile-r6rs-top-level (lambda (m486a@x*) (call-with-values (lambda () (m2f31@top-level-expander m486a@x*)) (lambda (m4870@m486d m4871@m486f) ((lambda (m4874@invoke-code m4875@lib*) (lambda () (begin (for-each m2acf@m2970@invoke-library m4875@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (m28a9@m2861@expanded->core m4874@invoke-code)) (void)) (eval-core (m28a9@m2861@expanded->core m4874@invoke-code))))) m4871@m486f m4870@m486d))))) (set! m2fa9@pre-compile-r6rs-top-level (lambda (m4878@x*) (call-with-values (lambda () (m2f31@top-level-expander m4878@x*)) (lambda (m487e@m487b m487f@m487d) ((lambda (m4882@invoke-code m4883@lib*) (begin (for-each m2acf@m2970@invoke-library m4883@lib*) (m2853@m277b@compile-core (m28a9@m2861@expanded->core m4882@invoke-code)))) m487f@m487d m487e@m487b))))) (set! m2fab@interaction-environment ((lambda (m4886@the-env) (lambda () (or m4886@the-env ((lambda (m4888@lib m4889@rib) (begin ((lambda (m488c@subst) (begin (m2c50@set-rib-sym*! m4889@rib (map car m488c@subst)) (m2c52@set-rib-mark**! m4889@rib (map (lambda (m488e@x) m2c27@top-mark*) m488c@subst)) (m2c54@set-rib-label*! m4889@rib (map cdr m488c@subst)))) (m2aa4@m291a@library-subst m4888@lib)) ((lambda (m4890@env) (begin (set! m4886@the-env m4890@env) m4890@env)) (m2f5d@make-interaction-env m4889@rib '() '())))) (m2ac8@m2962@find-library-by-name '(mosh interaction)) (m2c5a@make-empty-rib))))) '#f)) (set! m2fad@top-level-context (m2855@m277f@make-parameter '#f)) (begin (set! m499e@m2fad@top-level-context m2fad@top-level-context) (set! m499d@m2fab@interaction-environment m2fab@interaction-environment) (set! m499c@m2fa9@pre-compile-r6rs-top-level m2fa9@pre-compile-r6rs-top-level) (set! m499b@m2fa7@compile-r6rs-top-level m2fa7@compile-r6rs-top-level) (set! m499a@m2fa5@syntax->datum m2fa5@syntax->datum) (set! m4999@m2fa3@datum->syntax m2fa3@datum->syntax) (set! m4998@m2fa1@identifier? m2fa1@identifier?) (set! m4997@m2f9f@syntax-violation m2f9f@syntax-violation) (set! m4996@m2f9d@syntax-violation* m2f9d@syntax-violation*) (set! m4995@m2f9b@syntax-error m2f9b@syntax-error) (set! m4994@m2f99@assertion-error m2f99@assertion-error) (set! m4993@m2f97@expression-position m2f97@expression-position) (set! m4992@m2f95@extract-position-condition m2f95@extract-position-condition) (set! m4991@m2f93@make-source-condition m2f93@make-source-condition) (set! m4990@m2f91@bound-identifier=? m2f91@bound-identifier=?) (set! m498f@m2f8f@free-identifier=? m2f8f@free-identifier=?) (set! m498e@m2f8d@generate-temporaries m2f8d@generate-temporaries) (set! m498d@m2f8b@make-export-env/macros m2f8b@make-export-env/macros) (set! m498c@m2f89@make-export-subst m2f89@make-export-subst) (set! m498b@m2f87@build-exports m2f87@build-exports) (set! m498a@m2f85@rev-map-append m2f85@rev-map-append) (set! m4989@m2f83@boot-library-expand m2f83@boot-library-expand) (set! m4988@m2f81@library-expander m2f81@library-expander) (set! m4987@m2f7f@eval m2f7f@eval) (set! m4986@m2f7d@expand m2f7d@expand) (set! m4985@m2f7b@scheme-report-environment m2f7b@scheme-report-environment) (set! m4984@m2f79@null-environment m2f79@null-environment) (set! m4983@m2f77@environment m2f77@environment) (set! m4982@m2f75@environment-symbols m2f75@environment-symbols) (set! m4981@m2f73@environment? m2f73@environment?) (set! m4980@m2f71@parse-binding m2f71@parse-binding) (set! m497f@m2f6f@environment-bindings m2f6f@environment-bindings) (set! m497e@m2f6d@interaction-environment-symbols m2f6d@interaction-environment-symbols) (set! m497d@m2f6b@rp m2f6b@rp) (set! m497c@m2f69@set-interaction-env-locs! m2f69@set-interaction-env-locs!) (set! m497b@m2f67@set-interaction-env-r! m2f67@set-interaction-env-r!) (set! m497a@m2f65@set-interaction-env-rib! m2f65@set-interaction-env-rib!) (set! m4979@m2f63@interaction-env-locs m2f63@interaction-env-locs) (set! m4978@m2f61@interaction-env-r m2f61@interaction-env-r) (set! m4977@m2f5f@interaction-env-rib m2f5f@interaction-env-rib) (set! m4976@m2f5d@make-interaction-env m2f5d@make-interaction-env) (set! m4975@m2f5b@interaction-env? m2f5b@interaction-env?) (set! m4974@m2f58@m2f50 m2f58@m2f50) (set! m4973@m2f56@m2f51 m2f56@m2f51) (set! m4972@m2f54@m2f4f m2f54@m2f4f) (set! m4971@m2f4e@rp m2f4e@rp) (set! m4970@m2f4c@set-env-itc! m2f4c@set-env-itc!) (set! m496f@m2f4a@set-env-labels! m2f4a@set-env-labels!) (set! m496e@m2f48@set-env-names! m2f48@set-env-names!) (set! m496d@m2f46@env-itc m2f46@env-itc) (set! m496c@m2f44@env-labels m2f44@env-labels) (set! m496b@m2f42@env-names m2f42@env-names) (set! m496a@m2f40@make-env m2f40@make-env) (set! m4969@m2f3e@env? m2f3e@env?) (set! m4968@m2f3b@m2f33 m2f3b@m2f33) (set! m4967@m2f39@m2f34 m2f39@m2f34) (set! m4966@m2f37@m2f32 m2f37@m2f32) (set! m4965@m2f31@top-level-expander m2f31@top-level-expander) (set! m4964@m2f2f@parse-top-level-program m2f2f@parse-top-level-program) (set! m4963@m2f2d@core-library-expander m2f2d@core-library-expander) (set! m4962@m2f2b@library-body-expander m2f2b@library-body-expander) (set! m4961@m2f29@chi-interaction-expr m2f29@chi-interaction-expr) (set! m4960@m2f27@chi-library-internal m2f27@chi-library-internal) (set! m495f@m2f25@imp-collector m2f25@imp-collector) (set! m495e@m2f23@vis-collector m2f23@vis-collector) (set! m495d@m2f21@inv-collector m2f21@inv-collector) (set! m495c@m2f1f@make-collector m2f1f@make-collector) (set! m495b@m2f1d@make-top-rib m2f1d@make-top-rib) (set! m495a@m2f1b@parse-import-spec* m2f1b@parse-import-spec*) (set! m4959@m2f19@parse-library m2f19@parse-library) (set! m4958@m2f17@parse-library-name m2f17@parse-library-name) (set! m4957@m2f15@parse-exports m2f15@parse-exports) (set! m4956@m2f13@expand-transformer m2f13@expand-transformer) (set! m4955@m2f11@chi-body* m2f11@chi-body*) (set! m4954@m2f0f@chi-internal-module m2f0f@chi-internal-module) (set! m4953@m2f0d@module-interface-exp-id* m2f0d@module-interface-exp-id*) (set! m4952@m2f0b@set-module-interface-exp-lab-vec! m2f0b@set-module-interface-exp-lab-vec!) (set! m4951@m2f09@set-module-interface-exp-id-vec! m2f09@set-module-interface-exp-id-vec!) (set! m4950@m2f07@set-module-interface-first-mark! m2f07@set-module-interface-first-mark!) (set! m494f@m2f05@module-interface-exp-lab-vec m2f05@module-interface-exp-lab-vec) (set! m494e@m2f03@module-interface-exp-id-vec m2f03@module-interface-exp-id-vec) (set! m494d@m2f01@module-interface-first-mark m2f01@module-interface-first-mark) (set! m494c@m2eff@make-module-interface m2eff@make-module-interface) (set! m494b@m2efd@module-interface? m2efd@module-interface?) (set! m494a@m2efa@m2ef2 m2efa@m2ef2) (set! m4949@m2ef8@m2ef3 m2ef8@m2ef3) (set! m4948@m2ef6@m2ef1 m2ef6@m2ef1) (set! m4947@m2ef0@parse-module m2ef0@parse-module) (set! m4946@m2eee@chi-internal m2eee@chi-internal) (set! m4945@m2eec@find-dups m2eec@find-dups) (set! m4944@m2eea@find-bound=? m2eea@find-bound=?) (set! m4943@m2ee8@chi-rhs* m2ee8@chi-rhs*) (set! m4942@m2ee6@expand-interaction-rhs*/init* m2ee6@expand-interaction-rhs*/init*) (set! m4941@m2ee4@chi-rhs m2ee4@chi-rhs) (set! m4940@m2ee2@chi-defun m2ee2@chi-defun) (set! m493f@m2ee0@chi-lambda-clause* m2ee0@chi-lambda-clause*) (set! m493e@m2ede@chi-lambda-clause m2ede@chi-lambda-clause) (set! m493d@m2edc@verify-formals m2edc@verify-formals) (set! m493c@m2eda@chi-set! m2eda@chi-set!) (set! m493b@m2ed8@chi-expr m2ed8@chi-expr) (set! m493a@m2ed6@chi-application m2ed6@chi-application) (set! m4939@m2ed4@chi-expr* m2ed4@chi-expr*) (set! m4938@m2ed2@chi-global-macro m2ed2@chi-global-macro) (set! m4937@m2ed0@chi-local-macro m2ed0@chi-local-macro) (set! m4936@m2ece@chi-macro m2ece@chi-macro) (set! m4935@m2ecc@do-macro-call m2ecc@do-macro-call) (set! m4934@m2eca@local-macro-transformer m2eca@local-macro-transformer) (set! m4933@m2ec8@macro-transformer m2ec8@macro-transformer) (set! m4932@m2ec6@symbol-macro m2ec6@symbol-macro) (set! m4931@m2ec4@core-macro-transformer m2ec4@core-macro-transformer) (set! m4930@m2ec2@syntax-transformer m2ec2@syntax-transformer) (set! m492f@m2ec0@ellipsis-map m2ec0@ellipsis-map) (set! m492e@m2ebe@syntax-case-transformer m2ebe@syntax-case-transformer) (set! m492d@m2ebc@verify-literals m2ebc@verify-literals) (set! m492c@m2eba@underscore? m2eba@underscore?) (set! m492b@m2eb8@ellipsis? m2eb8@ellipsis?) (set! m492a@m2eb6@syntax-dispatch m2eb6@syntax-dispatch) (set! m4929@m2eb4@convert-pattern m2eb4@convert-pattern) (set! m4928@m2eb2@foreign-call-transformer m2eb2@foreign-call-transformer) (set! m4927@m2eb0@parameterize-macro m2eb0@parameterize-macro) (set! m4926@m2eae@incorrect-usage-macro m2eae@incorrect-usage-macro) (set! m4925@m2eac@define-condition-type-macro m2eac@define-condition-type-macro) (set! m4924@m2eaa@define-record-type-macro m2eaa@define-record-type-macro) (set! m4923@m2ea8@define-struct-macro m2ea8@define-struct-macro) (set! m4922@m2ea6@quasisyntax-macro m2ea6@quasisyntax-macro) (set! m4921@m2ea4@quasiquote-macro m2ea4@quasiquote-macro) (set! m4920@m2ea2@syntax-rules-macro m2ea2@syntax-rules-macro) (set! m491f@m2ea0@include-into-macro m2ea0@include-into-macro) (set! m491e@m2e9e@include-macro m2e9e@include-macro) (set! m491d@m2e9c@do-include m2e9c@do-include) (set! m491c@m2e9a@cond-macro m2e9a@cond-macro) (set! m491b@m2e98@and-macro m2e98@and-macro) (set! m491a@m2e96@or-macro m2e96@or-macro) (set! m4919@m2e94@let*-macro m2e94@let*-macro) (set! m4918@m2e92@do-macro m2e92@do-macro) (set! m4917@m2e90@identifier-syntax-macro m2e90@identifier-syntax-macro) (set! m4916@m2e8e@endianness-macro m2e8e@endianness-macro) (set! m4915@m2e8c@assert-macro m2e8c@assert-macro) (set! m4914@m2e8a@delay-macro m2e8a@delay-macro) (set! m4913@m2e88@time-macro m2e88@time-macro) (set! m4912@m2e86@define-enumeration-macro m2e86@define-enumeration-macro) (set! m4911@m2e84@guard-macro m2e84@guard-macro) (set! m4910@m2e82@trace-letrec-syntax-macro m2e82@trace-letrec-syntax-macro) (set! m490f@m2e80@trace-let-syntax-macro m2e80@trace-let-syntax-macro) (set! m490e@m2e7e@trace-let/rec-syntax m2e7e@trace-let/rec-syntax) (set! m490d@m2e7c@trace-define-syntax-macro m2e7c@trace-define-syntax-macro) (set! m490c@m2e7a@trace-define-macro m2e7a@trace-define-macro) (set! m490b@m2e78@trace-lambda-macro m2e78@trace-lambda-macro) (set! m490a@m2e76@let*-values-macro m2e76@let*-values-macro) (set! m4909@m2e74@let-values-macro m2e74@let-values-macro) (set! m4908@m2e72@let-macro m2e72@let-macro) (set! m4907@m2e70@invalid-fmls-error m2e70@invalid-fmls-error) (set! m4906@m2e6e@with-syntax-macro m2e6e@with-syntax-macro) (set! m4905@m2e6c@bless m2e6c@bless) (set! m4904@m2e6a@lambda-transformer m2e6a@lambda-transformer) (set! m4903@m2e68@case-lambda-transformer m2e68@case-lambda-transformer) (set! m4902@m2e66@quote-transformer m2e66@quote-transformer) (set! m4901@m2e64@case-macro m2e64@case-macro) (set! m4900@m2e62@or-transformer m2e62@or-transformer) (set! m48ff@m2e60@and-transformer m2e60@and-transformer) (set! m48fe@m2e5e@if-transformer m2e5e@if-transformer) (set! m48fd@m2e5c@unless-macro m2e5c@unless-macro) (set! m48fc@m2e5a@when-macro m2e5a@when-macro) (set! m48fb@m2e58@record-constructor-descriptor-transformer m2e58@record-constructor-descriptor-transformer) (set! m48fa@m2e56@record-type-descriptor-transformer m2e56@record-type-descriptor-transformer) (set! m48f9@m2e54@type-descriptor-transformer m2e54@type-descriptor-transformer) (set! m48f8@m2e52@fluid-let-syntax-transformer m2e52@fluid-let-syntax-transformer) (set! m48f7@m2e50@letrec*-transformer m2e50@letrec*-transformer) (set! m48f6@m2e4e@letrec-transformer m2e4e@letrec-transformer) (set! m48f5@m2e4c@letrec-helper m2e4c@letrec-helper) (set! m48f4@m2e4a@add-lexicals m2e4a@add-lexicals) (set! m48f3@m2e48@add-lexical m2e48@add-lexical) (set! m48f2@m2e46@set-lexical-mutable! m2e46@set-lexical-mutable!) (set! m48f1@m2e44@lexical-mutable? m2e44@lexical-mutable?) (set! m48f0@m2e42@lexical-var m2e42@lexical-var) (set! m48ef@m2e40@scheme-stx m2e40@scheme-stx) (set! m48ee@m2e3e@scheme-stx-hashtable m2e3e@scheme-stx-hashtable) (set! m48ed@m2e3c@parse-define-syntax m2e3c@parse-define-syntax) (set! m48ec@m2e3a@parse-define m2e3a@parse-define) (set! m48eb@m2ce9@make-eval-transformer m2ce9@make-eval-transformer) (set! m48ea@m2ce7@variable-transformer-procedure m2ce7@variable-transformer-procedure) (set! m48e9@m2ce5@variable-transformer? m2ce5@variable-transformer?) (set! m48e8@m2ce3@make-variable-transformer m2ce3@make-variable-transformer) (set! m48e7@m2ce1@sanitize-binding m2ce1@sanitize-binding) (set! m48e6@m2cd3@syntax-type m2cd3@syntax-type) (set! m48e5@m2cd1@raise-unbound-error m2cd1@raise-unbound-error) (set! m48e4@m2ccf@binding-value m2ccf@binding-value) (set! m48e3@m2ccd@binding-type m2ccd@binding-type) (set! m48e2@m2ccb@make-binding m2ccb@make-binding) (set! m48e1@m2cc9@label->binding m2cc9@label->binding) (set! m48e0@m2cc7@id->real-label m2cc7@id->real-label) (set! m48df@m2cc5@id->label m2cc5@id->label) (set! m48de@m2cc3@same-marks*? m2cc3@same-marks*?) (set! m48dd@m2cc1@stx->datum m2cc1@stx->datum) (set! m48dc@m2cbf@strip m2cbf@strip) (set! m48db@m2cbd@strip-annotations m2cbd@strip-annotations) (set! m48da@m2cbb@self-evaluating? m2cbb@self-evaluating?) (set! m48d9@m2cb9@bound-id-member? m2cb9@bound-id-member?) (set! m48d8@m2cb7@distinct-bound-ids? m2cb7@distinct-bound-ids?) (set! m48d7@m2cb5@valid-bound-ids? m2cb5@valid-bound-ids?) (set! m48d6@m2cb3@free-id=? m2cb3@free-id=?) (set! m48d5@m2cb1@bound-id=? m2cb1@bound-id=?) (set! m48d4@m2caf@same-marks? m2caf@same-marks?) (set! m48d3@m2cad@id->sym m2cad@id->sym) (set! m48d2@m2cab@id? m2cab@id?) (set! m48d1@m2ca9@syntax->list m2ca9@syntax->list) (set! m48d0@m2ca7@syntax-cdr m2ca7@syntax-cdr) (set! m48cf@m2ca5@syntax-car m2ca5@syntax-car) (set! m48ce@m2ca3@syntax-list? m2ca3@syntax-list?) (set! m48cd@m2ca1@syntax-null? m2ca1@syntax-null?) (set! m48cc@m2c9f@syntax-vector? m2c9f@syntax-vector?) (set! m48cb@m2c9d@syntax-pair? m2c9d@syntax-pair?) (set! m48ca@m2c9b@syntax-vector->list m2c9b@syntax-vector->list) (set! m48c9@m2c99@syntax-kind? m2c99@syntax-kind?) (set! m48c8@m2c97@add-subst m2c97@add-subst) (set! m48c7@m2c95@add-mark m2c95@add-mark) (set! m48c6@m2c93@mkstx m2c93@mkstx) (set! m48c5@m2c91@join-wraps m2c91@join-wraps) (set! m48c4@m2c8f@anti-mark? m2c8f@anti-mark?) (set! m48c3@m2c8d@anti-mark m2c8d@anti-mark) (set! m48c2@m2c8b@gen-mark m2c8b@gen-mark) (set! m48c1@m2c89@datum->stx m2c89@datum->stx) (set! m48c0@m2c87@rp m2c87@rp) (set! m48bf@m2c85@set-stx-ae*! m2c85@set-stx-ae*!) (set! m48be@m2c83@set-stx-subst*! m2c83@set-stx-subst*!) (set! m48bd@m2c81@set-stx-mark*! m2c81@set-stx-mark*!) (set! m48bc@m2c7f@set-stx-expr! m2c7f@set-stx-expr!) (set! m48bb@m2c7d@stx-ae* m2c7d@stx-ae*) (set! m48ba@m2c7b@stx-subst* m2c7b@stx-subst*) (set! m48b9@m2c79@stx-mark* m2c79@stx-mark*) (set! m48b8@m2c77@stx-expr m2c77@stx-expr) (set! m48b7@m2c75@make-stx m2c75@make-stx) (set! m48b6@m2c73@stx? m2c73@stx?) (set! m48b5@m2c70@m2c68 m2c70@m2c68) (set! m48b4@m2c6e@m2c69 m2c6e@m2c69) (set! m48b3@m2c6c@m2c67 m2c6c@m2c67) (set! m48b2@m2c66@make-full-rib m2c66@make-full-rib) (set! m48b1@m2c64@unseal-rib! m2c64@unseal-rib!) (set! m48b0@m2c62@seal-rib! m2c62@seal-rib!) (set! m48af@m2c60@make-rib-map m2c60@make-rib-map) (set! m48ae@m2c5e@extend-rib/nc! m2c5e@extend-rib/nc!) (set! m48ad@m2c5c@extend-rib! m2c5c@extend-rib!) (set! m48ac@m2c5a@make-empty-rib m2c5a@make-empty-rib) (set! m48ab@m2c58@set-rib-cache! m2c58@set-rib-cache!) (set! m48aa@m2c56@set-rib-sealed/freq! m2c56@set-rib-sealed/freq!) (set! m48a9@m2c54@set-rib-label*! m2c54@set-rib-label*!) (set! m48a8@m2c52@set-rib-mark**! m2c52@set-rib-mark**!) (set! m48a7@m2c50@set-rib-sym*! m2c50@set-rib-sym*!) (set! m48a6@m2c4e@rib-cache m2c4e@rib-cache) (set! m48a5@m2c4c@rib-sealed/freq m2c4c@rib-sealed/freq) (set! m48a4@m2c4a@rib-label* m2c4a@rib-label*) (set! m48a3@m2c48@rib-mark** m2c48@rib-mark**) (set! m48a2@m2c46@rib-sym* m2c46@rib-sym*) (set! m48a1@m2c44@make-rib m2c44@make-rib) (set! m48a0@m2c42@rib? m2c42@rib?) (set! m489f@m2c3f@m2c37 m2c3f@m2c37) (set! m489e@m2c3d@m2c38 m2c3d@m2c38) (set! m489d@m2c3b@m2c36 m2c3b@m2c36) (set! m489c@m2c35@gen-define-label m2c35@gen-define-label) (set! m489b@m2c33@gen-define-label+loc m2c33@gen-define-label+loc) (set! m489a@m2c31@gen-top-level-label m2c31@gen-top-level-label) (set! m4899@m2c2f@gen-label m2c2f@gen-label) (set! m4898@m2c2d@gen-global m2c2d@gen-global) (set! m4897@m2c2b@gen-lexical m2c2b@gen-lexical) (set! m4896@m2c29@top-marked? m2c29@top-marked?) (set! m4895@m2c27@top-mark* m2c27@top-mark*) (set! m4894@m2c22@set-union m2c22@set-union) (set! m4893@m2c20@set-cons m2c20@set-cons) (set! m4892@m2c1e@file-options-macro m2c1e@file-options-macro) (m2ac5@m295c@current-library-expander m2f81@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (m49a8@m49a3 m49aa@m49a5 m49ac@m49a4 m49af@&condition? m49b1@make-&condition m49b3@&condition-rtd m49b5@&condition-rcd m4a01@m49fc m4a03@m49fe m4a05@m49fd m4a08@p? m4a0a@make-message-condition m4a0c@m49fb m4a0e@message-condition? m4a10@condition-message m4a12@&message-rtd m4a14@&message-rcd m4a1a@m4a15 m4a1c@m4a17 m4a1e@m4a16 m4a21@p? m4a23@make-warning m4a25@warning? m4a27@&warning-rtd m4a29@&warning-rcd m4a2f@m4a2a m4a31@m4a2c m4a33@m4a2b m4a36@p? m4a38@make-serious-condition m4a3a@serious-condition? m4a3c@&serious-rtd m4a3e@&serious-rcd m4a44@m4a3f m4a46@m4a41 m4a48@m4a40 m4a4b@p? m4a4d@make-error m4a4f@error? m4a51@&error-rtd m4a53@&error-rcd m4a59@m4a54 m4a5b@m4a56 m4a5d@m4a55 m4a60@p? m4a62@make-violation m4a64@violation? m4a66@&violation-rtd m4a68@&violation-rcd m4a6e@m4a69 m4a70@m4a6b m4a72@m4a6a m4a75@p? m4a77@make-assertion-violation m4a79@assertion-violation? m4a7b@&assertion-rtd m4a7d@&assertion-rcd m4a85@m4a80 m4a87@m4a82 m4a89@m4a81 m4a8c@p? m4a8e@make-irritants-condition m4a90@m4a7f m4a92@irritants-condition? m4a94@condition-irritants m4a96@&irritants-rtd m4a98@&irritants-rcd m4aa0@m4a9b m4aa2@m4a9d m4aa4@m4a9c m4aa7@p? m4aa9@make-who-condition m4aab@m4a9a m4aad@who-condition? m4aaf@condition-who m4ab1@&who-rtd m4ab3@&who-rcd m4ab9@m4ab4 m4abb@m4ab6 m4abd@m4ab5 m4ac0@p? m4ac2@make-non-continuable-violation m4ac4@non-continuable-violation? m4ac6@&non-continuable-rtd m4ac8@&non-continuable-rcd m4ace@m4ac9 m4ad0@m4acb m4ad2@m4aca m4ad5@p? m4ad7@make-implementation-restriction-violation m4ad9@implementation-restriction-violation? m4adb@&implementation-restriction-rtd m4add@&implementation-restriction-rcd m4ae3@m4ade m4ae5@m4ae0 m4ae7@m4adf m4aea@p? m4aec@make-lexical-violation m4aee@lexical-violation? m4af0@&lexical-rtd m4af2@&lexical-rcd m4afc@m4af7 m4afe@m4af9 m4b00@m4af8 m4b03@p? m4b05@make-syntax-violation m4b07@m4af4 m4b09@m4af6 m4b0b@syntax-violation? m4b0d@syntax-violation-form m4b0f@syntax-violation-subform m4b11@&syntax-rtd m4b13@&syntax-rcd m4b19@m4b14 m4b1b@m4b16 m4b1d@m4b15 m4b20@p? m4b22@make-undefined-violation m4b24@undefined-violation? m4b26@&undefined-rtd m4b28@&undefined-rcd m4b2e@m4b29 m4b30@m4b2b m4b32@m4b2a m4b35@p? m4b37@make-i/o-error m4b39@i/o-error? m4b3b@&i/o-rtd m4b3d@&i/o-rcd m4b43@m4b3e m4b45@m4b40 m4b47@m4b3f m4b4a@p? m4b4c@make-i/o-read-error m4b4e@i/o-read-error? m4b50@&i/o-read-rtd m4b52@&i/o-read-rcd m4b58@m4b53 m4b5a@m4b55 m4b5c@m4b54 m4b5f@p? m4b61@make-i/o-write-error m4b63@i/o-write-error? m4b65@&i/o-write-rtd m4b67@&i/o-write-rcd m4b6f@m4b6a m4b71@m4b6c m4b73@m4b6b m4b76@p? m4b78@make-i/o-invalid-position-error m4b7a@m4b69 m4b7c@i/o-invalid-position-error? m4b7e@i/o-error-position m4b80@&i/o-invalid-position-rtd m4b82@&i/o-invalid-position-rcd m4b8a@m4b85 m4b8c@m4b87 m4b8e@m4b86 m4b91@p? m4b93@make-i/o-filename-error m4b95@m4b84 m4b97@i/o-filename-error? m4b99@i/o-error-filename m4b9b@&i/o-filename-rtd m4b9d@&i/o-filename-rcd m4ba3@m4b9e m4ba5@m4ba0 m4ba7@m4b9f m4baa@p? m4bac@make-i/o-file-protection-error m4bae@i/o-file-protection-error? m4bb0@&i/o-file-protection-rtd m4bb2@&i/o-file-protection-rcd m4bb8@m4bb3 m4bba@m4bb5 m4bbc@m4bb4 m4bbf@p? m4bc1@make-i/o-file-is-read-only-error m4bc3@i/o-file-is-read-only-error? m4bc5@&i/o-file-is-read-only-rtd m4bc7@&i/o-file-is-read-only-rcd m4bcd@m4bc8 m4bcf@m4bca m4bd1@m4bc9 m4bd4@p? m4bd6@make-i/o-file-already-exists-error m4bd8@i/o-file-already-exists-error? m4bda@&i/o-file-already-exists-rtd m4bdc@&i/o-file-already-exists-rcd m4be2@m4bdd m4be4@m4bdf m4be6@m4bde m4be9@p? m4beb@make-i/o-file-does-not-exist-error m4bed@i/o-file-does-not-exist-error? m4bef@&i/o-file-does-not-exist-rtd m4bf1@&i/o-file-does-not-exist-rcd m4bf9@m4bf4 m4bfb@m4bf6 m4bfd@m4bf5 m4c00@p? m4c02@make-i/o-port-error m4c04@m4bf3 m4c06@i/o-port-error? m4c08@i/o-error-port m4c0a@&i/o-port-rtd m4c0c@&i/o-port-rcd m4c12@m4c0d m4c14@m4c0f m4c16@m4c0e m4c19@p? m4c1b@make-i/o-decoding-error m4c1d@i/o-decoding-error? m4c1f@&i/o-decoding-rtd m4c21@&i/o-decoding-rcd m4c29@m4c24 m4c2b@m4c26 m4c2d@m4c25 m4c30@p? m4c32@make-i/o-encoding-error m4c34@m4c23 m4c36@i/o-encoding-error? m4c38@i/o-encoding-error-char m4c3a@&i/o-encoding-rtd m4c3c@&i/o-encoding-rcd m4c42@m4c3d m4c44@m4c3f m4c46@m4c3e m4c49@p? m4c4b@make-no-infinities-violation m4c4d@no-infinities-violation? m4c4f@&no-infinities-rtd m4c51@&no-infinities-rcd m4c57@m4c52 m4c59@m4c54 m4c5b@m4c53 m4c5e@p? m4c60@make-no-nans-violation m4c62@no-nans-violation? m4c64@&no-nans-rtd m4c66@&no-nans-rcd) (begin (set! m49a8@m49a3 (make-record-type-descriptor '&condition '#f 'm49a6 '#f '#f '#())) (set! m49aa@m49a5 '#f) (set! m49ac@m49a4 (make-record-constructor-descriptor m49a8@m49a3 '#f m49aa@m49a5)) (set! m49af@&condition? (record-predicate m49a8@m49a3)) (set! m49b1@make-&condition (record-constructor m49ac@m49a4)) (set! m49b3@&condition-rtd m49a8@m49a3) (set! m49b5@&condition-rcd m49ac@m49a4) (set! m4a01@m49fc (make-record-type-descriptor '&message m49a8@m49a3 'm49ff '#f '#f '#((immutable message)))) (set! m4a03@m49fe '#f) (set! m4a05@m49fd (make-record-constructor-descriptor m4a01@m49fc m49ac@m49a4 m4a03@m49fe)) (set! m4a08@p? (record-predicate m4a01@m49fc)) (set! m4a0a@make-message-condition (record-constructor m4a05@m49fd)) (set! m4a0c@m49fb (record-accessor m4a01@m49fc '0)) (set! m4a0e@message-condition? (condition-predicate m4a01@m49fc)) (set! m4a10@condition-message (condition-accessor m4a01@m49fc m4a0c@m49fb)) (set! m4a12@&message-rtd m4a01@m49fc) (set! m4a14@&message-rcd m4a05@m49fd) (set! m4a1a@m4a15 (make-record-type-descriptor '&warning m49a8@m49a3 'm4a18 '#f '#f '#())) (set! m4a1c@m4a17 '#f) (set! m4a1e@m4a16 (make-record-constructor-descriptor m4a1a@m4a15 m49ac@m49a4 m4a1c@m4a17)) (set! m4a21@p? (record-predicate m4a1a@m4a15)) (set! m4a23@make-warning (record-constructor m4a1e@m4a16)) (set! m4a25@warning? (condition-predicate m4a1a@m4a15)) (set! m4a27@&warning-rtd m4a1a@m4a15) (set! m4a29@&warning-rcd m4a1e@m4a16) (set! m4a2f@m4a2a (make-record-type-descriptor '&serious m49a8@m49a3 'm4a2d '#f '#f '#())) (set! m4a31@m4a2c '#f) (set! m4a33@m4a2b (make-record-constructor-descriptor m4a2f@m4a2a m49ac@m49a4 m4a31@m4a2c)) (set! m4a36@p? (record-predicate m4a2f@m4a2a)) (set! m4a38@make-serious-condition (record-constructor m4a33@m4a2b)) (set! m4a3a@serious-condition? (condition-predicate m4a2f@m4a2a)) (set! m4a3c@&serious-rtd m4a2f@m4a2a) (set! m4a3e@&serious-rcd m4a33@m4a2b) (set! m4a44@m4a3f (make-record-type-descriptor '&error m4a2f@m4a2a 'm4a42 '#f '#f '#())) (set! m4a46@m4a41 '#f) (set! m4a48@m4a40 (make-record-constructor-descriptor m4a44@m4a3f m4a33@m4a2b m4a46@m4a41)) (set! m4a4b@p? (record-predicate m4a44@m4a3f)) (set! m4a4d@make-error (record-constructor m4a48@m4a40)) (set! m4a4f@error? (condition-predicate m4a44@m4a3f)) (set! m4a51@&error-rtd m4a44@m4a3f) (set! m4a53@&error-rcd m4a48@m4a40) (set! m4a59@m4a54 (make-record-type-descriptor '&violation m4a2f@m4a2a 'm4a57 '#f '#f '#())) (set! m4a5b@m4a56 '#f) (set! m4a5d@m4a55 (make-record-constructor-descriptor m4a59@m4a54 m4a33@m4a2b m4a5b@m4a56)) (set! m4a60@p? (record-predicate m4a59@m4a54)) (set! m4a62@make-violation (record-constructor m4a5d@m4a55)) (set! m4a64@violation? (condition-predicate m4a59@m4a54)) (set! m4a66@&violation-rtd m4a59@m4a54) (set! m4a68@&violation-rcd m4a5d@m4a55) (set! m4a6e@m4a69 (make-record-type-descriptor '&assertion m4a59@m4a54 'm4a6c '#f '#f '#())) (set! m4a70@m4a6b '#f) (set! m4a72@m4a6a (make-record-constructor-descriptor m4a6e@m4a69 m4a5d@m4a55 m4a70@m4a6b)) (set! m4a75@p? (record-predicate m4a6e@m4a69)) (set! m4a77@make-assertion-violation (record-constructor m4a72@m4a6a)) (set! m4a79@assertion-violation? (condition-predicate m4a6e@m4a69)) (set! m4a7b@&assertion-rtd m4a6e@m4a69) (set! m4a7d@&assertion-rcd m4a72@m4a6a) (set! m4a85@m4a80 (make-record-type-descriptor '&irritants m49a8@m49a3 'm4a83 '#f '#f '#((immutable irritants)))) (set! m4a87@m4a82 '#f) (set! m4a89@m4a81 (make-record-constructor-descriptor m4a85@m4a80 m49ac@m49a4 m4a87@m4a82)) (set! m4a8c@p? (record-predicate m4a85@m4a80)) (set! m4a8e@make-irritants-condition (record-constructor m4a89@m4a81)) (set! m4a90@m4a7f (record-accessor m4a85@m4a80 '0)) (set! m4a92@irritants-condition? (condition-predicate m4a85@m4a80)) (set! m4a94@condition-irritants (condition-accessor m4a85@m4a80 m4a90@m4a7f)) (set! m4a96@&irritants-rtd m4a85@m4a80) (set! m4a98@&irritants-rcd m4a89@m4a81) (set! m4aa0@m4a9b (make-record-type-descriptor '&who m49a8@m49a3 'm4a9e '#f '#f '#((immutable who)))) (set! m4aa2@m4a9d '#f) (set! m4aa4@m4a9c (make-record-constructor-descriptor m4aa0@m4a9b m49ac@m49a4 m4aa2@m4a9d)) (set! m4aa7@p? (record-predicate m4aa0@m4a9b)) (set! m4aa9@make-who-condition (record-constructor m4aa4@m4a9c)) (set! m4aab@m4a9a (record-accessor m4aa0@m4a9b '0)) (set! m4aad@who-condition? (condition-predicate m4aa0@m4a9b)) (set! m4aaf@condition-who (condition-accessor m4aa0@m4a9b m4aab@m4a9a)) (set! m4ab1@&who-rtd m4aa0@m4a9b) (set! m4ab3@&who-rcd m4aa4@m4a9c) (set! m4ab9@m4ab4 (make-record-type-descriptor '&non-continuable m4a59@m4a54 'm4ab7 '#f '#f '#())) (set! m4abb@m4ab6 '#f) (set! m4abd@m4ab5 (make-record-constructor-descriptor m4ab9@m4ab4 m4a5d@m4a55 m4abb@m4ab6)) (set! m4ac0@p? (record-predicate m4ab9@m4ab4)) (set! m4ac2@make-non-continuable-violation (record-constructor m4abd@m4ab5)) (set! m4ac4@non-continuable-violation? (condition-predicate m4ab9@m4ab4)) (set! m4ac6@&non-continuable-rtd m4ab9@m4ab4) (set! m4ac8@&non-continuable-rcd m4abd@m4ab5) (set! m4ace@m4ac9 (make-record-type-descriptor '&implementation-restriction m4a59@m4a54 'm4acc '#f '#f '#())) (set! m4ad0@m4acb '#f) (set! m4ad2@m4aca (make-record-constructor-descriptor m4ace@m4ac9 m4a5d@m4a55 m4ad0@m4acb)) (set! m4ad5@p? (record-predicate m4ace@m4ac9)) (set! m4ad7@make-implementation-restriction-violation (record-constructor m4ad2@m4aca)) (set! m4ad9@implementation-restriction-violation? (condition-predicate m4ace@m4ac9)) (set! m4adb@&implementation-restriction-rtd m4ace@m4ac9) (set! m4add@&implementation-restriction-rcd m4ad2@m4aca) (set! m4ae3@m4ade (make-record-type-descriptor '&lexical m4a59@m4a54 'm4ae1 '#f '#f '#())) (set! m4ae5@m4ae0 '#f) (set! m4ae7@m4adf (make-record-constructor-descriptor m4ae3@m4ade m4a5d@m4a55 m4ae5@m4ae0)) (set! m4aea@p? (record-predicate m4ae3@m4ade)) (set! m4aec@make-lexical-violation (record-constructor m4ae7@m4adf)) (set! m4aee@lexical-violation? (condition-predicate m4ae3@m4ade)) (set! m4af0@&lexical-rtd m4ae3@m4ade) (set! m4af2@&lexical-rcd m4ae7@m4adf) (set! m4afc@m4af7 (make-record-type-descriptor '&syntax m4a59@m4a54 'm4afa '#f '#f '#((immutable form) (immutable subform)))) (set! m4afe@m4af9 '#f) (set! m4b00@m4af8 (make-record-constructor-descriptor m4afc@m4af7 m4a5d@m4a55 m4afe@m4af9)) (set! m4b03@p? (record-predicate m4afc@m4af7)) (set! m4b05@make-syntax-violation (record-constructor m4b00@m4af8)) (set! m4b07@m4af4 (record-accessor m4afc@m4af7 '0)) (set! m4b09@m4af6 (record-accessor m4afc@m4af7 '1)) (set! m4b0b@syntax-violation? (condition-predicate m4afc@m4af7)) (set! m4b0d@syntax-violation-form (condition-accessor m4afc@m4af7 m4b07@m4af4)) (set! m4b0f@syntax-violation-subform (condition-accessor m4afc@m4af7 m4b09@m4af6)) (set! m4b11@&syntax-rtd m4afc@m4af7) (set! m4b13@&syntax-rcd m4b00@m4af8) (set! m4b19@m4b14 (make-record-type-descriptor '&undefined m4a59@m4a54 'm4b17 '#f '#f '#())) (set! m4b1b@m4b16 '#f) (set! m4b1d@m4b15 (make-record-constructor-descriptor m4b19@m4b14 m4a5d@m4a55 m4b1b@m4b16)) (set! m4b20@p? (record-predicate m4b19@m4b14)) (set! m4b22@make-undefined-violation (record-constructor m4b1d@m4b15)) (set! m4b24@undefined-violation? (condition-predicate m4b19@m4b14)) (set! m4b26@&undefined-rtd m4b19@m4b14) (set! m4b28@&undefined-rcd m4b1d@m4b15) (set! m4b2e@m4b29 (make-record-type-descriptor '&i/o m4a44@m4a3f 'm4b2c '#f '#f '#())) (set! m4b30@m4b2b '#f) (set! m4b32@m4b2a (make-record-constructor-descriptor m4b2e@m4b29 m4a48@m4a40 m4b30@m4b2b)) (set! m4b35@p? (record-predicate m4b2e@m4b29)) (set! m4b37@make-i/o-error (record-constructor m4b32@m4b2a)) (set! m4b39@i/o-error? (condition-predicate m4b2e@m4b29)) (set! m4b3b@&i/o-rtd m4b2e@m4b29) (set! m4b3d@&i/o-rcd m4b32@m4b2a) (set! m4b43@m4b3e (make-record-type-descriptor '&i/o-read m4b2e@m4b29 'm4b41 '#f '#f '#())) (set! m4b45@m4b40 '#f) (set! m4b47@m4b3f (make-record-constructor-descriptor m4b43@m4b3e m4b32@m4b2a m4b45@m4b40)) (set! m4b4a@p? (record-predicate m4b43@m4b3e)) (set! m4b4c@make-i/o-read-error (record-constructor m4b47@m4b3f)) (set! m4b4e@i/o-read-error? (condition-predicate m4b43@m4b3e)) (set! m4b50@&i/o-read-rtd m4b43@m4b3e) (set! m4b52@&i/o-read-rcd m4b47@m4b3f) (set! m4b58@m4b53 (make-record-type-descriptor '&i/o-write m4b2e@m4b29 'm4b56 '#f '#f '#())) (set! m4b5a@m4b55 '#f) (set! m4b5c@m4b54 (make-record-constructor-descriptor m4b58@m4b53 m4b32@m4b2a m4b5a@m4b55)) (set! m4b5f@p? (record-predicate m4b58@m4b53)) (set! m4b61@make-i/o-write-error (record-constructor m4b5c@m4b54)) (set! m4b63@i/o-write-error? (condition-predicate m4b58@m4b53)) (set! m4b65@&i/o-write-rtd m4b58@m4b53) (set! m4b67@&i/o-write-rcd m4b5c@m4b54) (set! m4b6f@m4b6a (make-record-type-descriptor '&i/o-invalid-position m4b2e@m4b29 'm4b6d '#f '#f '#((immutable position)))) (set! m4b71@m4b6c '#f) (set! m4b73@m4b6b (make-record-constructor-descriptor m4b6f@m4b6a m4b32@m4b2a m4b71@m4b6c)) (set! m4b76@p? (record-predicate m4b6f@m4b6a)) (set! m4b78@make-i/o-invalid-position-error (record-constructor m4b73@m4b6b)) (set! m4b7a@m4b69 (record-accessor m4b6f@m4b6a '0)) (set! m4b7c@i/o-invalid-position-error? (condition-predicate m4b6f@m4b6a)) (set! m4b7e@i/o-error-position (condition-accessor m4b6f@m4b6a m4b7a@m4b69)) (set! m4b80@&i/o-invalid-position-rtd m4b6f@m4b6a) (set! m4b82@&i/o-invalid-position-rcd m4b73@m4b6b) (set! m4b8a@m4b85 (make-record-type-descriptor '&i/o-filename m4b2e@m4b29 'm4b88 '#f '#f '#((immutable filename)))) (set! m4b8c@m4b87 '#f) (set! m4b8e@m4b86 (make-record-constructor-descriptor m4b8a@m4b85 m4b32@m4b2a m4b8c@m4b87)) (set! m4b91@p? (record-predicate m4b8a@m4b85)) (set! m4b93@make-i/o-filename-error (record-constructor m4b8e@m4b86)) (set! m4b95@m4b84 (record-accessor m4b8a@m4b85 '0)) (set! m4b97@i/o-filename-error? (condition-predicate m4b8a@m4b85)) (set! m4b99@i/o-error-filename (condition-accessor m4b8a@m4b85 m4b95@m4b84)) (set! m4b9b@&i/o-filename-rtd m4b8a@m4b85) (set! m4b9d@&i/o-filename-rcd m4b8e@m4b86) (set! m4ba3@m4b9e (make-record-type-descriptor '&i/o-file-protection m4b8a@m4b85 'm4ba1 '#f '#f '#())) (set! m4ba5@m4ba0 '#f) (set! m4ba7@m4b9f (make-record-constructor-descriptor m4ba3@m4b9e m4b8e@m4b86 m4ba5@m4ba0)) (set! m4baa@p? (record-predicate m4ba3@m4b9e)) (set! m4bac@make-i/o-file-protection-error (record-constructor m4ba7@m4b9f)) (set! m4bae@i/o-file-protection-error? (condition-predicate m4ba3@m4b9e)) (set! m4bb0@&i/o-file-protection-rtd m4ba3@m4b9e) (set! m4bb2@&i/o-file-protection-rcd m4ba7@m4b9f) (set! m4bb8@m4bb3 (make-record-type-descriptor '&i/o-file-is-read-only m4ba3@m4b9e 'm4bb6 '#f '#f '#())) (set! m4bba@m4bb5 '#f) (set! m4bbc@m4bb4 (make-record-constructor-descriptor m4bb8@m4bb3 m4ba7@m4b9f m4bba@m4bb5)) (set! m4bbf@p? (record-predicate m4bb8@m4bb3)) (set! m4bc1@make-i/o-file-is-read-only-error (record-constructor m4bbc@m4bb4)) (set! m4bc3@i/o-file-is-read-only-error? (condition-predicate m4bb8@m4bb3)) (set! m4bc5@&i/o-file-is-read-only-rtd m4bb8@m4bb3) (set! m4bc7@&i/o-file-is-read-only-rcd m4bbc@m4bb4) (set! m4bcd@m4bc8 (make-record-type-descriptor '&i/o-file-already-exists m4b8a@m4b85 'm4bcb '#f '#f '#())) (set! m4bcf@m4bca '#f) (set! m4bd1@m4bc9 (make-record-constructor-descriptor m4bcd@m4bc8 m4b8e@m4b86 m4bcf@m4bca)) (set! m4bd4@p? (record-predicate m4bcd@m4bc8)) (set! m4bd6@make-i/o-file-already-exists-error (record-constructor m4bd1@m4bc9)) (set! m4bd8@i/o-file-already-exists-error? (condition-predicate m4bcd@m4bc8)) (set! m4bda@&i/o-file-already-exists-rtd m4bcd@m4bc8) (set! m4bdc@&i/o-file-already-exists-rcd m4bd1@m4bc9) (set! m4be2@m4bdd (make-record-type-descriptor '&i/o-file-does-not-exist m4b8a@m4b85 'm4be0 '#f '#f '#())) (set! m4be4@m4bdf '#f) (set! m4be6@m4bde (make-record-constructor-descriptor m4be2@m4bdd m4b8e@m4b86 m4be4@m4bdf)) (set! m4be9@p? (record-predicate m4be2@m4bdd)) (set! m4beb@make-i/o-file-does-not-exist-error (record-constructor m4be6@m4bde)) (set! m4bed@i/o-file-does-not-exist-error? (condition-predicate m4be2@m4bdd)) (set! m4bef@&i/o-file-does-not-exist-rtd m4be2@m4bdd) (set! m4bf1@&i/o-file-does-not-exist-rcd m4be6@m4bde) (set! m4bf9@m4bf4 (make-record-type-descriptor '&i/o-port m4b2e@m4b29 'm4bf7 '#f '#f '#((immutable port)))) (set! m4bfb@m4bf6 '#f) (set! m4bfd@m4bf5 (make-record-constructor-descriptor m4bf9@m4bf4 m4b32@m4b2a m4bfb@m4bf6)) (set! m4c00@p? (record-predicate m4bf9@m4bf4)) (set! m4c02@make-i/o-port-error (record-constructor m4bfd@m4bf5)) (set! m4c04@m4bf3 (record-accessor m4bf9@m4bf4 '0)) (set! m4c06@i/o-port-error? (condition-predicate m4bf9@m4bf4)) (set! m4c08@i/o-error-port (condition-accessor m4bf9@m4bf4 m4c04@m4bf3)) (set! m4c0a@&i/o-port-rtd m4bf9@m4bf4) (set! m4c0c@&i/o-port-rcd m4bfd@m4bf5) (set! m4c12@m4c0d (make-record-type-descriptor '&i/o-decoding m4bf9@m4bf4 'm4c10 '#f '#f '#())) (set! m4c14@m4c0f '#f) (set! m4c16@m4c0e (make-record-constructor-descriptor m4c12@m4c0d m4bfd@m4bf5 m4c14@m4c0f)) (set! m4c19@p? (record-predicate m4c12@m4c0d)) (set! m4c1b@make-i/o-decoding-error (record-constructor m4c16@m4c0e)) (set! m4c1d@i/o-decoding-error? (condition-predicate m4c12@m4c0d)) (set! m4c1f@&i/o-decoding-rtd m4c12@m4c0d) (set! m4c21@&i/o-decoding-rcd m4c16@m4c0e) (set! m4c29@m4c24 (make-record-type-descriptor '&i/o-encoding m4bf9@m4bf4 'm4c27 '#f '#f '#((immutable char)))) (set! m4c2b@m4c26 '#f) (set! m4c2d@m4c25 (make-record-constructor-descriptor m4c29@m4c24 m4bfd@m4bf5 m4c2b@m4c26)) (set! m4c30@p? (record-predicate m4c29@m4c24)) (set! m4c32@make-i/o-encoding-error (record-constructor m4c2d@m4c25)) (set! m4c34@m4c23 (record-accessor m4c29@m4c24 '0)) (set! m4c36@i/o-encoding-error? (condition-predicate m4c29@m4c24)) (set! m4c38@i/o-encoding-error-char (condition-accessor m4c29@m4c24 m4c34@m4c23)) (set! m4c3a@&i/o-encoding-rtd m4c29@m4c24) (set! m4c3c@&i/o-encoding-rcd m4c2d@m4c25) (set! m4c42@m4c3d (make-record-type-descriptor '&no-infinities m4ace@m4ac9 'm4c40 '#f '#f '#())) (set! m4c44@m4c3f '#f) (set! m4c46@m4c3e (make-record-constructor-descriptor m4c42@m4c3d m4ad2@m4aca m4c44@m4c3f)) (set! m4c49@p? (record-predicate m4c42@m4c3d)) (set! m4c4b@make-no-infinities-violation (record-constructor m4c46@m4c3e)) (set! m4c4d@no-infinities-violation? (condition-predicate m4c42@m4c3d)) (set! m4c4f@&no-infinities-rtd m4c42@m4c3d) (set! m4c51@&no-infinities-rcd m4c46@m4c3e) (set! m4c57@m4c52 (make-record-type-descriptor '&no-nans m4ace@m4ac9 'm4c55 '#f '#f '#())) (set! m4c59@m4c54 '#f) (set! m4c5b@m4c53 (make-record-constructor-descriptor m4c57@m4c52 m4ad2@m4aca m4c59@m4c54)) (set! m4c5e@p? (record-predicate m4c57@m4c52)) (set! m4c60@make-no-nans-violation (record-constructor m4c5b@m4c53)) (set! m4c62@no-nans-violation? (condition-predicate m4c57@m4c52)) (set! m4c64@&no-nans-rtd m4c57@m4c52) (set! m4c66@&no-nans-rcd m4c5b@m4c53) (begin (set! m4d57@m4c66@&no-nans-rcd m4c66@&no-nans-rcd) (set! m4d56@m4c64@&no-nans-rtd m4c64@&no-nans-rtd) (set! m4d55@m4c62@no-nans-violation? m4c62@no-nans-violation?) (set! m4d54@m4c60@make-no-nans-violation m4c60@make-no-nans-violation) (set! m4d53@m4c5e@p? m4c5e@p?) (set! m4d52@m4c5b@m4c53 m4c5b@m4c53) (set! m4d51@m4c59@m4c54 m4c59@m4c54) (set! m4d50@m4c57@m4c52 m4c57@m4c52) (set! m4d4f@m4c51@&no-infinities-rcd m4c51@&no-infinities-rcd) (set! m4d4e@m4c4f@&no-infinities-rtd m4c4f@&no-infinities-rtd) (set! m4d4d@m4c4d@no-infinities-violation? m4c4d@no-infinities-violation?) (set! m4d4c@m4c4b@make-no-infinities-violation m4c4b@make-no-infinities-violation) (set! m4d4b@m4c49@p? m4c49@p?) (set! m4d4a@m4c46@m4c3e m4c46@m4c3e) (set! m4d49@m4c44@m4c3f m4c44@m4c3f) (set! m4d48@m4c42@m4c3d m4c42@m4c3d) (set! m4d47@m4c3c@&i/o-encoding-rcd m4c3c@&i/o-encoding-rcd) (set! m4d46@m4c3a@&i/o-encoding-rtd m4c3a@&i/o-encoding-rtd) (set! m4d45@m4c38@i/o-encoding-error-char m4c38@i/o-encoding-error-char) (set! m4d44@m4c36@i/o-encoding-error? m4c36@i/o-encoding-error?) (set! m4d43@m4c34@m4c23 m4c34@m4c23) (set! m4d42@m4c32@make-i/o-encoding-error m4c32@make-i/o-encoding-error) (set! m4d41@m4c30@p? m4c30@p?) (set! m4d40@m4c2d@m4c25 m4c2d@m4c25) (set! m4d3f@m4c2b@m4c26 m4c2b@m4c26) (set! m4d3e@m4c29@m4c24 m4c29@m4c24) (set! m4d3d@m4c21@&i/o-decoding-rcd m4c21@&i/o-decoding-rcd) (set! m4d3c@m4c1f@&i/o-decoding-rtd m4c1f@&i/o-decoding-rtd) (set! m4d3b@m4c1d@i/o-decoding-error? m4c1d@i/o-decoding-error?) (set! m4d3a@m4c1b@make-i/o-decoding-error m4c1b@make-i/o-decoding-error) (set! m4d39@m4c19@p? m4c19@p?) (set! m4d38@m4c16@m4c0e m4c16@m4c0e) (set! m4d37@m4c14@m4c0f m4c14@m4c0f) (set! m4d36@m4c12@m4c0d m4c12@m4c0d) (set! m4d35@m4c0c@&i/o-port-rcd m4c0c@&i/o-port-rcd) (set! m4d34@m4c0a@&i/o-port-rtd m4c0a@&i/o-port-rtd) (set! m4d33@m4c08@i/o-error-port m4c08@i/o-error-port) (set! m4d32@m4c06@i/o-port-error? m4c06@i/o-port-error?) (set! m4d31@m4c04@m4bf3 m4c04@m4bf3) (set! m4d30@m4c02@make-i/o-port-error m4c02@make-i/o-port-error) (set! m4d2f@m4c00@p? m4c00@p?) (set! m4d2e@m4bfd@m4bf5 m4bfd@m4bf5) (set! m4d2d@m4bfb@m4bf6 m4bfb@m4bf6) (set! m4d2c@m4bf9@m4bf4 m4bf9@m4bf4) (set! m4d2b@m4bf1@&i/o-file-does-not-exist-rcd m4bf1@&i/o-file-does-not-exist-rcd) (set! m4d2a@m4bef@&i/o-file-does-not-exist-rtd m4bef@&i/o-file-does-not-exist-rtd) (set! m4d29@m4bed@i/o-file-does-not-exist-error? m4bed@i/o-file-does-not-exist-error?) (set! m4d28@m4beb@make-i/o-file-does-not-exist-error m4beb@make-i/o-file-does-not-exist-error) (set! m4d27@m4be9@p? m4be9@p?) (set! m4d26@m4be6@m4bde m4be6@m4bde) (set! m4d25@m4be4@m4bdf m4be4@m4bdf) (set! m4d24@m4be2@m4bdd m4be2@m4bdd) (set! m4d23@m4bdc@&i/o-file-already-exists-rcd m4bdc@&i/o-file-already-exists-rcd) (set! m4d22@m4bda@&i/o-file-already-exists-rtd m4bda@&i/o-file-already-exists-rtd) (set! m4d21@m4bd8@i/o-file-already-exists-error? m4bd8@i/o-file-already-exists-error?) (set! m4d20@m4bd6@make-i/o-file-already-exists-error m4bd6@make-i/o-file-already-exists-error) (set! m4d1f@m4bd4@p? m4bd4@p?) (set! m4d1e@m4bd1@m4bc9 m4bd1@m4bc9) (set! m4d1d@m4bcf@m4bca m4bcf@m4bca) (set! m4d1c@m4bcd@m4bc8 m4bcd@m4bc8) (set! m4d1b@m4bc7@&i/o-file-is-read-only-rcd m4bc7@&i/o-file-is-read-only-rcd) (set! m4d1a@m4bc5@&i/o-file-is-read-only-rtd m4bc5@&i/o-file-is-read-only-rtd) (set! m4d19@m4bc3@i/o-file-is-read-only-error? m4bc3@i/o-file-is-read-only-error?) (set! m4d18@m4bc1@make-i/o-file-is-read-only-error m4bc1@make-i/o-file-is-read-only-error) (set! m4d17@m4bbf@p? m4bbf@p?) (set! m4d16@m4bbc@m4bb4 m4bbc@m4bb4) (set! m4d15@m4bba@m4bb5 m4bba@m4bb5) (set! m4d14@m4bb8@m4bb3 m4bb8@m4bb3) (set! m4d13@m4bb2@&i/o-file-protection-rcd m4bb2@&i/o-file-protection-rcd) (set! m4d12@m4bb0@&i/o-file-protection-rtd m4bb0@&i/o-file-protection-rtd) (set! m4d11@m4bae@i/o-file-protection-error? m4bae@i/o-file-protection-error?) (set! m4d10@m4bac@make-i/o-file-protection-error m4bac@make-i/o-file-protection-error) (set! m4d0f@m4baa@p? m4baa@p?) (set! m4d0e@m4ba7@m4b9f m4ba7@m4b9f) (set! m4d0d@m4ba5@m4ba0 m4ba5@m4ba0) (set! m4d0c@m4ba3@m4b9e m4ba3@m4b9e) (set! m4d0b@m4b9d@&i/o-filename-rcd m4b9d@&i/o-filename-rcd) (set! m4d0a@m4b9b@&i/o-filename-rtd m4b9b@&i/o-filename-rtd) (set! m4d09@m4b99@i/o-error-filename m4b99@i/o-error-filename) (set! m4d08@m4b97@i/o-filename-error? m4b97@i/o-filename-error?) (set! m4d07@m4b95@m4b84 m4b95@m4b84) (set! m4d06@m4b93@make-i/o-filename-error m4b93@make-i/o-filename-error) (set! m4d05@m4b91@p? m4b91@p?) (set! m4d04@m4b8e@m4b86 m4b8e@m4b86) (set! m4d03@m4b8c@m4b87 m4b8c@m4b87) (set! m4d02@m4b8a@m4b85 m4b8a@m4b85) (set! m4d01@m4b82@&i/o-invalid-position-rcd m4b82@&i/o-invalid-position-rcd) (set! m4d00@m4b80@&i/o-invalid-position-rtd m4b80@&i/o-invalid-position-rtd) (set! m4cff@m4b7e@i/o-error-position m4b7e@i/o-error-position) (set! m4cfe@m4b7c@i/o-invalid-position-error? m4b7c@i/o-invalid-position-error?) (set! m4cfd@m4b7a@m4b69 m4b7a@m4b69) (set! m4cfc@m4b78@make-i/o-invalid-position-error m4b78@make-i/o-invalid-position-error) (set! m4cfb@m4b76@p? m4b76@p?) (set! m4cfa@m4b73@m4b6b m4b73@m4b6b) (set! m4cf9@m4b71@m4b6c m4b71@m4b6c) (set! m4cf8@m4b6f@m4b6a m4b6f@m4b6a) (set! m4cf7@m4b67@&i/o-write-rcd m4b67@&i/o-write-rcd) (set! m4cf6@m4b65@&i/o-write-rtd m4b65@&i/o-write-rtd) (set! m4cf5@m4b63@i/o-write-error? m4b63@i/o-write-error?) (set! m4cf4@m4b61@make-i/o-write-error m4b61@make-i/o-write-error) (set! m4cf3@m4b5f@p? m4b5f@p?) (set! m4cf2@m4b5c@m4b54 m4b5c@m4b54) (set! m4cf1@m4b5a@m4b55 m4b5a@m4b55) (set! m4cf0@m4b58@m4b53 m4b58@m4b53) (set! m4cef@m4b52@&i/o-read-rcd m4b52@&i/o-read-rcd) (set! m4cee@m4b50@&i/o-read-rtd m4b50@&i/o-read-rtd) (set! m4ced@m4b4e@i/o-read-error? m4b4e@i/o-read-error?) (set! m4cec@m4b4c@make-i/o-read-error m4b4c@make-i/o-read-error) (set! m4ceb@m4b4a@p? m4b4a@p?) (set! m4cea@m4b47@m4b3f m4b47@m4b3f) (set! m4ce9@m4b45@m4b40 m4b45@m4b40) (set! m4ce8@m4b43@m4b3e m4b43@m4b3e) (set! m4ce7@m4b3d@&i/o-rcd m4b3d@&i/o-rcd) (set! m4ce6@m4b3b@&i/o-rtd m4b3b@&i/o-rtd) (set! m4ce5@m4b39@i/o-error? m4b39@i/o-error?) (set! m4ce4@m4b37@make-i/o-error m4b37@make-i/o-error) (set! m4ce3@m4b35@p? m4b35@p?) (set! m4ce2@m4b32@m4b2a m4b32@m4b2a) (set! m4ce1@m4b30@m4b2b m4b30@m4b2b) (set! m4ce0@m4b2e@m4b29 m4b2e@m4b29) (set! m4cdf@m4b28@&undefined-rcd m4b28@&undefined-rcd) (set! m4cde@m4b26@&undefined-rtd m4b26@&undefined-rtd) (set! m4cdd@m4b24@undefined-violation? m4b24@undefined-violation?) (set! m4cdc@m4b22@make-undefined-violation m4b22@make-undefined-violation) (set! m4cdb@m4b20@p? m4b20@p?) (set! m4cda@m4b1d@m4b15 m4b1d@m4b15) (set! m4cd9@m4b1b@m4b16 m4b1b@m4b16) (set! m4cd8@m4b19@m4b14 m4b19@m4b14) (set! m4cd7@m4b13@&syntax-rcd m4b13@&syntax-rcd) (set! m4cd6@m4b11@&syntax-rtd m4b11@&syntax-rtd) (set! m4cd5@m4b0f@syntax-violation-subform m4b0f@syntax-violation-subform) (set! m4cd4@m4b0d@syntax-violation-form m4b0d@syntax-violation-form) (set! m4cd3@m4b0b@syntax-violation? m4b0b@syntax-violation?) (set! m4cd2@m4b09@m4af6 m4b09@m4af6) (set! m4cd1@m4b07@m4af4 m4b07@m4af4) (set! m4cd0@m4b05@make-syntax-violation m4b05@make-syntax-violation) (set! m4ccf@m4b03@p? m4b03@p?) (set! m4cce@m4b00@m4af8 m4b00@m4af8) (set! m4ccd@m4afe@m4af9 m4afe@m4af9) (set! m4ccc@m4afc@m4af7 m4afc@m4af7) (set! m4ccb@m4af2@&lexical-rcd m4af2@&lexical-rcd) (set! m4cca@m4af0@&lexical-rtd m4af0@&lexical-rtd) (set! m4cc9@m4aee@lexical-violation? m4aee@lexical-violation?) (set! m4cc8@m4aec@make-lexical-violation m4aec@make-lexical-violation) (set! m4cc7@m4aea@p? m4aea@p?) (set! m4cc6@m4ae7@m4adf m4ae7@m4adf) (set! m4cc5@m4ae5@m4ae0 m4ae5@m4ae0) (set! m4cc4@m4ae3@m4ade m4ae3@m4ade) (set! m4cc3@m4add@&implementation-restriction-rcd m4add@&implementation-restriction-rcd) (set! m4cc2@m4adb@&implementation-restriction-rtd m4adb@&implementation-restriction-rtd) (set! m4cc1@m4ad9@implementation-restriction-violation? m4ad9@implementation-restriction-violation?) (set! m4cc0@m4ad7@make-implementation-restriction-violation m4ad7@make-implementation-restriction-violation) (set! m4cbf@m4ad5@p? m4ad5@p?) (set! m4cbe@m4ad2@m4aca m4ad2@m4aca) (set! m4cbd@m4ad0@m4acb m4ad0@m4acb) (set! m4cbc@m4ace@m4ac9 m4ace@m4ac9) (set! m4cbb@m4ac8@&non-continuable-rcd m4ac8@&non-continuable-rcd) (set! m4cba@m4ac6@&non-continuable-rtd m4ac6@&non-continuable-rtd) (set! m4cb9@m4ac4@non-continuable-violation? m4ac4@non-continuable-violation?) (set! m4cb8@m4ac2@make-non-continuable-violation m4ac2@make-non-continuable-violation) (set! m4cb7@m4ac0@p? m4ac0@p?) (set! m4cb6@m4abd@m4ab5 m4abd@m4ab5) (set! m4cb5@m4abb@m4ab6 m4abb@m4ab6) (set! m4cb4@m4ab9@m4ab4 m4ab9@m4ab4) (set! m4cb3@m4ab3@&who-rcd m4ab3@&who-rcd) (set! m4cb2@m4ab1@&who-rtd m4ab1@&who-rtd) (set! m4cb1@m4aaf@condition-who m4aaf@condition-who) (set! m4cb0@m4aad@who-condition? m4aad@who-condition?) (set! m4caf@m4aab@m4a9a m4aab@m4a9a) (set! m4cae@m4aa9@make-who-condition m4aa9@make-who-condition) (set! m4cad@m4aa7@p? m4aa7@p?) (set! m4cac@m4aa4@m4a9c m4aa4@m4a9c) (set! m4cab@m4aa2@m4a9d m4aa2@m4a9d) (set! m4caa@m4aa0@m4a9b m4aa0@m4a9b) (set! m4ca9@m4a98@&irritants-rcd m4a98@&irritants-rcd) (set! m4ca8@m4a96@&irritants-rtd m4a96@&irritants-rtd) (set! m4ca7@m4a94@condition-irritants m4a94@condition-irritants) (set! m4ca6@m4a92@irritants-condition? m4a92@irritants-condition?) (set! m4ca5@m4a90@m4a7f m4a90@m4a7f) (set! m4ca4@m4a8e@make-irritants-condition m4a8e@make-irritants-condition) (set! m4ca3@m4a8c@p? m4a8c@p?) (set! m4ca2@m4a89@m4a81 m4a89@m4a81) (set! m4ca1@m4a87@m4a82 m4a87@m4a82) (set! m4ca0@m4a85@m4a80 m4a85@m4a80) (set! m4c9f@m4a7d@&assertion-rcd m4a7d@&assertion-rcd) (set! m4c9e@m4a7b@&assertion-rtd m4a7b@&assertion-rtd) (set! m4c9d@m4a79@assertion-violation? m4a79@assertion-violation?) (set! m4c9c@m4a77@make-assertion-violation m4a77@make-assertion-violation) (set! m4c9b@m4a75@p? m4a75@p?) (set! m4c9a@m4a72@m4a6a m4a72@m4a6a) (set! m4c99@m4a70@m4a6b m4a70@m4a6b) (set! m4c98@m4a6e@m4a69 m4a6e@m4a69) (set! m4c97@m4a68@&violation-rcd m4a68@&violation-rcd) (set! m4c96@m4a66@&violation-rtd m4a66@&violation-rtd) (set! m4c95@m4a64@violation? m4a64@violation?) (set! m4c94@m4a62@make-violation m4a62@make-violation) (set! m4c93@m4a60@p? m4a60@p?) (set! m4c92@m4a5d@m4a55 m4a5d@m4a55) (set! m4c91@m4a5b@m4a56 m4a5b@m4a56) (set! m4c90@m4a59@m4a54 m4a59@m4a54) (set! m4c8f@m4a53@&error-rcd m4a53@&error-rcd) (set! m4c8e@m4a51@&error-rtd m4a51@&error-rtd) (set! m4c8d@m4a4f@error? m4a4f@error?) (set! m4c8c@m4a4d@make-error m4a4d@make-error) (set! m4c8b@m4a4b@p? m4a4b@p?) (set! m4c8a@m4a48@m4a40 m4a48@m4a40) (set! m4c89@m4a46@m4a41 m4a46@m4a41) (set! m4c88@m4a44@m4a3f m4a44@m4a3f) (set! m4c87@m4a3e@&serious-rcd m4a3e@&serious-rcd) (set! m4c86@m4a3c@&serious-rtd m4a3c@&serious-rtd) (set! m4c85@m4a3a@serious-condition? m4a3a@serious-condition?) (set! m4c84@m4a38@make-serious-condition m4a38@make-serious-condition) (set! m4c83@m4a36@p? m4a36@p?) (set! m4c82@m4a33@m4a2b m4a33@m4a2b) (set! m4c81@m4a31@m4a2c m4a31@m4a2c) (set! m4c80@m4a2f@m4a2a m4a2f@m4a2a) (set! m4c7f@m4a29@&warning-rcd m4a29@&warning-rcd) (set! m4c7e@m4a27@&warning-rtd m4a27@&warning-rtd) (set! m4c7d@m4a25@warning? m4a25@warning?) (set! m4c7c@m4a23@make-warning m4a23@make-warning) (set! m4c7b@m4a21@p? m4a21@p?) (set! m4c7a@m4a1e@m4a16 m4a1e@m4a16) (set! m4c79@m4a1c@m4a17 m4a1c@m4a17) (set! m4c78@m4a1a@m4a15 m4a1a@m4a15) (set! m4c77@m4a14@&message-rcd m4a14@&message-rcd) (set! m4c76@m4a12@&message-rtd m4a12@&message-rtd) (set! m4c75@m4a10@condition-message m4a10@condition-message) (set! m4c74@m4a0e@message-condition? m4a0e@message-condition?) (set! m4c73@m4a0c@m49fb m4a0c@m49fb) (set! m4c72@m4a0a@make-message-condition m4a0a@make-message-condition) (set! m4c71@m4a08@p? m4a08@p?) (set! m4c70@m4a05@m49fd m4a05@m49fd) (set! m4c6f@m4a03@m49fe m4a03@m49fe) (set! m4c6e@m4a01@m49fc m4a01@m49fc) (set! m4c6d@m49b5@&condition-rcd m49b5@&condition-rcd) (set! m4c6c@m49b3@&condition-rtd m49b3@&condition-rtd) (set! m4c6b@m49b1@make-&condition m49b1@make-&condition) (set! m4c6a@m49af@&condition? m49af@&condition?) (set! m4c69@m49ac@m49a4 m49ac@m49a4) (set! m4c68@m49aa@m49a5 m49aa@m49a5) (set! m4c67@m49a8@m49a3 m49a8@m49a3)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (m28a6@m285b@current-primitive-locations (lambda (m5184@x) ((lambda (m5186@t) (if m5186@t (cdr m5186@t) '#f)) (assq m5184@x '((&no-nans-rcd . m4d57@m4c66@&no-nans-rcd) (&no-nans-rtd . m4d56@m4c64@&no-nans-rtd) (&no-infinities-rcd . m4d4f@m4c51@&no-infinities-rcd) (&no-infinities-rtd . m4d4e@m4c4f@&no-infinities-rtd) (&i/o-encoding-rcd . m4d47@m4c3c@&i/o-encoding-rcd) (&i/o-encoding-rtd . m4d46@m4c3a@&i/o-encoding-rtd) (&i/o-decoding-rcd . m4d3d@m4c21@&i/o-decoding-rcd) (&i/o-decoding-rtd . m4d3c@m4c1f@&i/o-decoding-rtd) (&i/o-port-rcd . m4d35@m4c0c@&i/o-port-rcd) (&i/o-port-rtd . m4d34@m4c0a@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . m4d2b@m4bf1@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . m4d2a@m4bef@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . m4d23@m4bdc@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . m4d22@m4bda@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . m4d1b@m4bc7@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . m4d1a@m4bc5@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . m4d13@m4bb2@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . m4d12@m4bb0@&i/o-file-protection-rtd) (&i/o-filename-rcd . m4d0b@m4b9d@&i/o-filename-rcd) (&i/o-filename-rtd . m4d0a@m4b9b@&i/o-filename-rtd) (&i/o-invalid-position-rcd . m4d01@m4b82@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . m4d00@m4b80@&i/o-invalid-position-rtd) (&i/o-write-rcd . m4cf7@m4b67@&i/o-write-rcd) (&i/o-write-rtd . m4cf6@m4b65@&i/o-write-rtd) (&i/o-read-rcd . m4cef@m4b52@&i/o-read-rcd) (&i/o-read-rtd . m4cee@m4b50@&i/o-read-rtd) (&i/o-rcd . m4ce7@m4b3d@&i/o-rcd) (&i/o-rtd . m4ce6@m4b3b@&i/o-rtd) (&undefined-rcd . m4cdf@m4b28@&undefined-rcd) (&undefined-rtd . m4cde@m4b26@&undefined-rtd) (&syntax-rcd . m4cd7@m4b13@&syntax-rcd) (&syntax-rtd . m4cd6@m4b11@&syntax-rtd) (&lexical-rcd . m4ccb@m4af2@&lexical-rcd) (&lexical-rtd . m4cca@m4af0@&lexical-rtd) (&implementation-restriction-rcd . m4cc3@m4add@&implementation-restriction-rcd) (&implementation-restriction-rtd . m4cc2@m4adb@&implementation-restriction-rtd) (&non-continuable-rcd . m4cbb@m4ac8@&non-continuable-rcd) (&non-continuable-rtd . m4cba@m4ac6@&non-continuable-rtd) (&who-rcd . m4cb3@m4ab3@&who-rcd) (&who-rtd . m4cb2@m4ab1@&who-rtd) (&irritants-rcd . m4ca9@m4a98@&irritants-rcd) (&irritants-rtd . m4ca8@m4a96@&irritants-rtd) (&assertion-rcd . m4c9f@m4a7d@&assertion-rcd) (&assertion-rtd . m4c9e@m4a7b@&assertion-rtd) (&violation-rcd . m4c97@m4a68@&violation-rcd) (&violation-rtd . m4c96@m4a66@&violation-rtd) (&error-rcd . m4c8f@m4a53@&error-rcd) (&error-rtd . m4c8e@m4a51@&error-rtd) (&serious-rcd . m4c87@m4a3e@&serious-rcd) (&serious-rtd . m4c86@m4a3c@&serious-rtd) (&warning-rcd . m4c7f@m4a29@&warning-rcd) (&warning-rtd . m4c7e@m4a27@&warning-rtd) (&message-rcd . m4c77@m4a14@&message-rcd) (&message-rtd . m4c76@m4a12@&message-rtd) (&condition-rcd . m4c6d@m49b5@&condition-rcd) (&condition-rtd . m4c6c@m49b3@&condition-rtd) (syntax-error . m4995@m2f9b@syntax-error) (syntax-dispatch . m492a@m2eb6@syntax-dispatch) (load . m4e88@m4d73@load) (interaction-environment . m499d@m2fab@interaction-environment) (library-path . m2abd@m294c@library-path) (make-parameter . m2855@m277f@make-parameter) (make-variable-transformer . m48e8@m2ce3@make-variable-transformer) (identifier? . m4998@m2fa1@identifier?) (generate-temporaries . m498e@m2f8d@generate-temporaries) (free-identifier=? . m498f@m2f8f@free-identifier=?) (syntax->datum . m499a@m2fa5@syntax->datum) (datum->syntax . m4999@m2fa3@datum->syntax) (bound-identifier=? . m4990@m2f91@bound-identifier=?) (make-i/o-write-error . m4cf4@m4b61@make-i/o-write-error) (make-i/o-read-error . m4cec@m4b4c@make-i/o-read-error) (make-i/o-port-error . m4d30@m4c02@make-i/o-port-error) (make-i/o-invalid-position-error . m4cfc@m4b78@make-i/o-invalid-position-error) (make-i/o-filename-error . m4d06@m4b93@make-i/o-filename-error) (make-i/o-file-protection-error . m4d10@m4bac@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . m4d18@m4bc1@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . m4d28@m4beb@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . m4d20@m4bd6@make-i/o-file-already-exists-error) (make-i/o-error . m4ce4@m4b37@make-i/o-error) (make-i/o-encoding-error . m4d42@m4c32@make-i/o-encoding-error) (make-i/o-decoding-error . m4d3a@m4c1b@make-i/o-decoding-error) (i/o-write-error? . m4cf5@m4b63@i/o-write-error?) (i/o-read-error? . m4ced@m4b4e@i/o-read-error?) (i/o-port-error? . m4d32@m4c06@i/o-port-error?) (i/o-invalid-position-error? . m4cfe@m4b7c@i/o-invalid-position-error?) (i/o-filename-error? . m4d08@m4b97@i/o-filename-error?) (i/o-file-protection-error? . m4d11@m4bae@i/o-file-protection-error?) (i/o-file-is-read-only-error? . m4d19@m4bc3@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . m4d29@m4bed@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . m4d21@m4bd8@i/o-file-already-exists-error?) (i/o-error? . m4ce5@m4b39@i/o-error?) (i/o-error-position . m4cff@m4b7e@i/o-error-position) (i/o-error-port . m4d33@m4c08@i/o-error-port) (i/o-error-filename . m4d09@m4b99@i/o-error-filename) (i/o-encoding-error? . m4d44@m4c36@i/o-encoding-error?) (i/o-encoding-error-char . m4d45@m4c38@i/o-encoding-error-char) (i/o-decoding-error? . m4d3b@m4c1d@i/o-decoding-error?) (scheme-report-environment . m4985@m2f7b@scheme-report-environment) (null-environment . m4984@m2f79@null-environment) (command-line . m4e85@m4d6d@command-line) (eval . m4987@m2f7f@eval) (environment . m4983@m2f77@environment) (who-condition? . m4cb0@m4aad@who-condition?) (warning? . m4c7d@m4a25@warning?) (violation? . m4c95@m4a64@violation?) (undefined-violation? . m4cdd@m4b24@undefined-violation?) (syntax-violation? . m4cd3@m4b0b@syntax-violation?) (syntax-violation-subform . m4cd5@m4b0f@syntax-violation-subform) (syntax-violation-form . m4cd4@m4b0d@syntax-violation-form) (syntax-violation . m4997@m2f9f@syntax-violation) (serious-condition? . m4c85@m4a3a@serious-condition?) (non-continuable-violation? . m4cb9@m4ac4@non-continuable-violation?) (message-condition? . m4c74@m4a0e@message-condition?) (make-who-condition . m4cae@m4aa9@make-who-condition) (make-warning . m4c7c@m4a23@make-warning) (make-violation . m4c94@m4a62@make-violation) (make-undefined-violation . m4cdc@m4b22@make-undefined-violation) (make-syntax-violation . m4cd0@m4b05@make-syntax-violation) (make-serious-condition . m4c84@m4a38@make-serious-condition) (make-non-continuable-violation . m4cb8@m4ac2@make-non-continuable-violation) (make-message-condition . m4c72@m4a0a@make-message-condition) (make-lexical-violation . m4cc8@m4aec@make-lexical-violation) (make-irritants-condition . m4ca4@m4a8e@make-irritants-condition) (make-implementation-restriction-violation . m4cc0@m4ad7@make-implementation-restriction-violation) (make-error . m4c8c@m4a4d@make-error) (make-assertion-violation . m4c9c@m4a77@make-assertion-violation) (lexical-violation? . m4cc9@m4aee@lexical-violation?) (irritants-condition? . m4ca6@m4a92@irritants-condition?) (implementation-restriction-violation? . m4cc1@m4ad9@implementation-restriction-violation?) (error? . m4c8d@m4a4f@error?) (condition-who . m4cb1@m4aaf@condition-who) (condition-message . m4c75@m4a10@condition-message) (condition-irritants . m4ca7@m4a94@condition-irritants) (assertion-violation? . m4c9d@m4a79@assertion-violation?) (no-nans-violation? . m4d55@m4c62@no-nans-violation?) (no-infinities-violation? . m4d4d@m4c4d@no-infinities-violation?) (make-no-nans-violation . m4d54@m4c60@make-no-nans-violation) (make-no-infinities-violation . m4d4c@m4c4b@make-no-infinities-violation) (assertion-error . m4994@m2f99@assertion-error)))))) (m2acd@m296c@install-library 'm5161 '(mosh interaction) '() '() '() '() '((regexp? . m5159) (alist->eq-hash-table . m5156) (format . m5153) (string-split . m5148) (call-process . m5142) (set-current-directory! . m513e) (expand-path . m513d) (current-directory . m513c) (%spawn . m513b) (%waitpid . m513a) (%ffi-supported? . m5139) (%ffi-pointer-ref . m5138) (%ffi-pointer->string . m5137) (%ffi-call->string-or-zero . m5136) (%ffi-call->double . m5135) (%ffi-call->void* . m5134) (%ffi-call->void . m5133) (%ffi-call->int . m5132) (%ffi-lookup . m5131) (%ffi-open . m5130) (%fork . m512f) (%pipe . m512e) (p . m512d) (string-upcase . m510f) (string-titlecase . m510e) (string-normalize-nfkd . m510d) (string-normalize-nfkc . m510c) (string-normalize-nfd . m510b) (string-normalize-nfc . m510a) (string-foldcase . m5109) (string-downcase . m5108) (string-ci>? . m5107) (string-ci>=? . m5106) (string-ci=? . m5105) (string-ci<? . m5104) (string-ci<=? . m5103) (char-whitespace? . m5102) (char-upper-case? . m5101) (char-title-case? . m5100) (char-numeric? . m50ff) (char-lower-case? . m50fe) (char-general-category . m50fd) (char-upcase . m50fc) (char-titlecase . m50fb) (char-foldcase . m50fa) (char-downcase . m50f9) (char-ci>? . m50f8) (char-ci>=? . m50f7) (char-ci=? . m50f6) (char-ci<? . m50f5) (char-ci<=? . m50f4) (char-alphabetic? . m50f3) (make-variable-transformer . m2ce2) (identifier? . m2fa0) (generate-temporaries . m2f8c) (free-identifier=? . m2f8e) (syntax->datum . m2fa4) (datum->syntax . m2fa2) (bound-identifier=? . m2f90) (record-type-descriptor? . m50f2) (record-predicate . m50f1) (record-mutator . m50f0) (record-constructor . m50ef) (record-accessor . m50ee) (make-record-type-descriptor . m50ed) (make-record-constructor-descriptor . m50ec) (record? . m50eb) (record-type-uid . m50ea) (record-type-sealed? . m50e9) (record-type-parent . m50e8) (record-type-opaque? . m50e7) (record-type-name . m50e6) (record-type-generative? . m50e5) (record-type-field-names . m50e4) (record-rtd . m50e3) (record-field-mutable? . m50e2) (delete-file . m50e1) (file-exists? . m50e0) (vector-sort! . m50df) (vector-sort . m50de) (list-sort . m50dd) (symbol-hash . m50dc) (string-ci-hash . m50db) (string-hash . m50da) (equal-hash . m50d9) (hashtable-equivalence-function . m50d8) (make-hashtable . m50d7) (hashtable-hash-function . m50d6) (make-eqv-hashtable . m50d5) (make-eq-hashtable . m50d4) (hashtable? . m50d3) (hashtable-update! . m50d2) (hashtable-size . m50d1) (hashtable-set! . m50d0) (hashtable-ref . m50cf) (hashtable-mutable? . m50ce) (hashtable-keys . m50cd) (hashtable-entries . m50cc) (hashtable-delete! . m50cb) (hashtable-copy . m50ca) (hashtable-contains? . m50c9) (hashtable-clear! . m50c8) (call-with-output-file . m50c7) (call-with-input-file . m50c6) (write-char . m50c5) (write . m50c4) (with-output-to-file . m50c3) (with-input-from-file . m50c2) (read-char . m50c1) (read . m50c0) (peek-char . m50bf) (open-output-file . m50be) (open-input-file . m50bd) (newline . m50bc) (display . m50bb) (close-output-port . m50ba) (close-input-port . m50b9) (eof-object? . m50b8) (eof-object . m50b7) (current-error-port . m50b6) (current-output-port . m50b5) (current-input-port . m50b4) (output-port? . m50b3) (input-port? . m50b2) (utf-8-codec . m50b1) (utf-16-codec . m50b0) (transcoder-error-handling-mode . m50af) (transcoder-eol-style . m50ae) (transcoder-codec . m50ad) (transcoded-port . m50ac) (textual-port? . m50ab) (string->bytevector . m50aa) (standard-output-port . m50a9) (standard-input-port . m50a8) (standard-error-port . m50a7) (set-port-position! . m50a6) (put-u8 . m50a5) (put-string . m50a4) (put-datum . m50a3) (put-char . m50a2) (put-bytevector . m50a1) (port? . m50a0) (port-transcoder . m509f) (port-position . m509e) (port-has-set-port-position!? . m509d) (port-has-port-position? . m509c) (port-eof? . m509b) (output-port-buffer-mode . m509a) (open-string-output-port . m5099) (open-string-input-port . m5098) (open-file-output-port . m5097) (open-file-input/output-port . m5096) (open-file-input-port . m5095) (open-bytevector-output-port . m5094) (open-bytevector-input-port . m5093) (native-transcoder . m5092) (native-eol-style . m5091) (make-transcoder . m5090) (latin-1-codec . m508f) (make-i/o-write-error . m4b60) (make-i/o-read-error . m4b4b) (make-i/o-port-error . m4c01) (make-i/o-invalid-position-error . m4b77) (make-i/o-filename-error . m4b92) (make-i/o-file-protection-error . m4bab) (make-i/o-file-is-read-only-error . m4bc0) (make-i/o-file-does-not-exist-error . m4bea) (make-i/o-file-already-exists-error . m4bd5) (make-i/o-error . m4b36) (make-i/o-encoding-error . m4c31) (make-i/o-decoding-error . m4c1a) (make-custom-textual-output-port . m508e) (make-custom-textual-input/output-port . m508d) (make-custom-textual-input-port . m508c) (make-custom-binary-output-port . m508b) (make-custom-binary-input/output-port . m508a) (make-custom-binary-input-port . m5089) (make-bytevector . m5088) (lookahead-u8 . m5087) (lookahead-char . m5086) (i/o-write-error? . m4b62) (i/o-read-error? . m4b4d) (i/o-port-error? . m4c05) (i/o-invalid-position-error? . m4b7b) (i/o-filename-error? . m4b96) (i/o-file-protection-error? . m4bad) (i/o-file-is-read-only-error? . m4bc2) (i/o-file-does-not-exist-error? . m4bec) (i/o-file-already-exists-error? . m4bd7) (i/o-error? . m4b38) (i/o-error-position . m4b7d) (i/o-error-port . m4c07) (i/o-error-filename . m4b98) (i/o-encoding-error? . m4c35) (i/o-encoding-error-char . m4c37) (i/o-decoding-error? . m4c1c) (get-u8 . m5085) (get-string-n! . m5084) (get-string-n . m5083) (get-string-all . m5082) (get-line . m5081) (get-datum . m5080) (get-char . m507f) (get-bytevector-some . m507e) (get-bytevector-n! . m507d) (get-bytevector-n . m507c) (get-bytevector-all . m507b) (flush-output-port . m507a) (close-port . m5079) (exit . m5071) (command-line . m4d6c) (string-fill! . m5070) (string-set! . m506f) (set-cdr! . m506e) (set-car! . m506d) (remove . m506c) (remv . m506b) (remp . m506a) (remq . m5069) (partition . m5068) (memv . m5067) (memq . m5066) (memp . m5065) (member . m5064) (exists . m5063) (for-all . m5062) (fold-right . m5061) (fold-left . m5060) (find . m505f) (filter . m505e) (cons* . m505d) (assv . m505c) (assq . m505b) (assp . m505a) (assoc . m5059) (call-with-string-output-port . m5058) (call-with-port . m5057) (call-with-bytevector-output-port . m5056) (bytevector->string . m5055) (buffer-mode? . m5054) (binary-port? . m5053) (with-exception-handler . m5052) (raise-continuable . m5051) (raise . m5050) (eval . m2f7e) (environment . m2f76) (make-enumeration . m504f) (enum-set=? . m504e) (enum-set-universe . m504d) (enum-set-union . m504c) (enum-set-subset? . m504b) (enum-set-projection . m504a) (enum-set-member? . m5049) (enum-set-intersection . m5048) (enum-set-indexer . m5047) (enum-set-difference . m5046) (enum-set-constructor . m5045) (enum-set-complement . m5044) (enum-set->list . m5043) (who-condition? . m4aac) (warning? . m4a24) (violation? . m4a63) (undefined-violation? . m4b23) (syntax-violation? . m4b0a) (syntax-violation-subform . m4b0e) (syntax-violation-form . m4b0c) (syntax-violation . m2f9e) (simple-conditions . m5042) (serious-condition? . m4a39) (non-continuable-violation? . m4ac3) (message-condition? . m4a0d) (make-who-condition . m4aa8) (make-warning . m4a22) (make-violation . m4a61) (make-undefined-violation . m4b21) (make-syntax-violation . m4b04) (make-serious-condition . m4a37) (make-non-continuable-violation . m4ac1) (make-message-condition . m4a09) (make-lexical-violation . m4aeb) (make-irritants-condition . m4a8d) (make-implementation-restriction-violation . m4ad6) (make-error . m4a4c) (make-assertion-violation . m4a76) (lexical-violation? . m4aed) (irritants-condition? . m4a91) (implementation-restriction-violation? . m4ad8) (error? . m4a4e) (condition-who . m4aae) (condition-predicate . m5041) (condition-message . m4a0f) (condition-irritants . m4a93) (condition-accessor . m5040) (condition . m503f) (assertion-violation? . m4a78) (condition? . m503e) (utf32->string . m503d) (utf16->string . m503c) (utf8->string . m503b) (uint-list->bytevector . m503a) (u8-list->bytevector . m5039) (string->utf8 . m5038) (string->utf32 . m5037) (string->utf16 . m5036) (sint-list->bytevector . m5035) (native-endianness . m5034) (bytevector? . m5033) (bytevector=? . m5032) (bytevector-uint-set! . m5031) (bytevector-uint-ref . m5030) (bytevector-u8-set! . m502f) (bytevector-u8-ref . m502e) (bytevector-u64-set! . m502d) (bytevector-u64-ref . m502c) (bytevector-u64-native-set! . m502b) (bytevector-u64-native-ref . m502a) (bytevector-u32-set! . m5029) (bytevector-u32-ref . m5028) (bytevector-u32-native-set! . m5027) (bytevector-u32-native-ref . m5026) (bytevector-u16-set! . m5025) (bytevector-u16-ref . m5024) (bytevector-u16-native-set! . m5023) (bytevector-u16-native-ref . m5022) (bytevector-sint-set! . m5021) (bytevector-sint-ref . m5020) (bytevector-s8-set! . m501f) (bytevector-s8-ref . m501e) (bytevector-s64-set! . m501d) (bytevector-s64-ref . m501c) (bytevector-s64-native-set! . m501b) (bytevector-s64-native-ref . m501a) (bytevector-s32-set! . m5019) (bytevector-s32-ref . m5018) (bytevector-s32-native-set! . m5017) (bytevector-s32-native-ref . m5016) (bytevector-s16-set! . m5015) (bytevector-s16-ref . m5014) (bytevector-s16-native-set! . m5013) (bytevector-s16-native-ref . m5012) (bytevector-length . m5011) (bytevector-ieee-single-ref . m5010) (bytevector-ieee-single-set! . m500f) (bytevector-ieee-single-native-set! . m500e) (bytevector-ieee-single-native-ref . m500d) (bytevector-ieee-double-set! . m500c) (bytevector-ieee-double-ref . m500b) (bytevector-ieee-double-native-set! . m500a) (bytevector-ieee-double-native-ref . m5009) (bytevector-fill! . m5008) (bytevector-copy! . m5007) (bytevector-copy . m5006) (bytevector->uint-list . m5005) (bytevector->u8-list . m5004) (bytevector->sint-list . m5003) (no-nans-violation? . m4c61) (no-infinities-violation? . m4c4c) (make-no-nans-violation . m4c5f) (make-no-infinities-violation . m4c4a) (real->flonum . m5002) (flzero? . m5001) (fltruncate . m5000) (fltan . m4fff) (flsqrt . m4ffe) (flsin . m4ffd) (flround . m4ffc) (flpositive? . m4ffb) (flonum? . m4ffa) (flodd? . m4ff9) (flnumerator . m4ff8) (flnegative? . m4ff7) (flnan? . m4ff6) (flmod0 . m4ff5) (flmod . m4ff4) (flmin . m4ff3) (flmax . m4ff2) (fllog . m4ff1) (flinteger? . m4ff0) (flinfinite? . m4fef) (flfloor . m4fee) (flfinite? . m4fed) (flexpt . m4fec) (flexp . m4feb) (fleven? . m4fea) (fldiv0-and-mod0 . m4fe9) (fldiv0 . m4fe8) (fldiv-and-mod . m4fe7) (fldiv . m4fe6) (fldenominator . m4fe5) (flcos . m4fe4) (flceiling . m4fe3) (flatan . m4fe2) (flasin . m4fe1) (flacos . m4fe0) (flabs . m4fdf) (fl>? . m4fde) (fl>=? . m4fdd) (fl=? . m4fdc) (fl<? . m4fdb) (fl<=? . m4fda) (fl/ . m4fd9) (fl- . m4fd8) (fl+ . m4fd7) (fl* . m4fd6) (fixnum->flonum . m4fd5) (fxzero? . m4fd4) (fxxor . m4fd3) (fxrotate-bit-field . m4fd2) (fxreverse-bit-field . m4fd1) (fxpositive? . m4fd0) (fxodd? . m4fcf) (fxnot . m4fce) (fxnegative? . m4fcd) (fxmod0 . m4fcc) (fxmod . m4fcb) (fxmin . m4fca) (fxmax . m4fc9) (fxlength . m4fc8) (fxior . m4fc7) (fxif . m4fc6) (fxfirst-bit-set . m4fc5) (fxeven? . m4fc4) (fxdiv0-and-mod0 . m4fc3) (fxdiv0 . m4fc2) (fxdiv-and-mod . m4fc1) (fxdiv . m4fc0) (fxcopy-bit-field . m4fbf) (fxcopy-bit . m4fbe) (fxbit-set? . m4fbd) (fxbit-field . m4fbc) (fxbit-count . m4fbb) (fxarithmetic-shift-right . m4fba) (fxarithmetic-shift-left . m4fb9) (fxarithmetic-shift . m4fb8) (fxand . m4fb7) (fx>? . m4fb6) (fx>=? . m4fb5) (fx=? . m4fb4) (fx<? . m4fb3) (fx<=? . m4fb2) (fx-/carry . m4fb1) (fx- . m4fb0) (fx+/carry . m4faf) (fx+ . m4fae) (fx*/carry . m4fad) (fx* . m4fac) (greatest-fixnum . m4fab) (least-fixnum . m4faa) (fixnum-width . m4fa9) (fixnum? . m4fa8) (bitwise-rotate-bit-field . m4fa7) (bitwise-reverse-bit-field . m4fa6) (bitwise-length . m4fa5) (bitwise-if . m4fa4) (bitwise-first-bit-set . m4fa3) (bitwise-copy-bit-field . m4fa2) (bitwise-copy-bit . m4fa1) (bitwise-bit-set? . m4fa0) (bitwise-bit-field . m4f9f) (bitwise-bit-count . m4f9e) (bitwise-xor . m4f9d) (bitwise-ior . m4f9c) (bitwise-and . m4f9b) (bitwise-not . m4f9a) (bitwise-arithmetic-shift-right . m4f99) (bitwise-arithmetic-shift-left . m4f98) (bitwise-arithmetic-shift . m4f97) (zero? . m4f96) (vector? . m4f95) (vector-set! . m4f94) (vector-ref . m4f93) (vector-map . m4f92) (vector-length . m4f91) (vector-for-each . m4f90) (vector-fill! . m4f8f) (vector->list . m4f8e) (vector . m4f8d) (values . m4f8c) (truncate . m4f8b) (tan . m4f8a) (symbol? . m4f89) (symbol=? . m4f88) (symbol->string . m4f87) (substring . m4f86) (string? . m4f85) (string>? . m4f84) (string>=? . m4f83) (string=? . m4f82) (string<? . m4f81) (string<=? . m4f80) (string-ref . m4f7f) (string-length . m4f7e) (string-for-each . m4f7d) (string-copy . m4f7c) (string-append . m4f7b) (string->symbol . m4f7a) (string->number . m4f79) (string->list . m4f78) (string . m4f77) (sqrt . m4f76) (sin . m4f75) (round . m4f74) (reverse . m4f73) (real? . m4f72) (real-valued? . m4f71) (real-part . m4f70) (rationalize . m4f6f) (rational? . m4f6e) (rational-valued? . m4f6d) (procedure? . m4f6c) (positive? . m4f6b) (pair? . m4f6a) (odd? . m4f69) (numerator . m4f68) (number? . m4f67) (number->string . m4f66) (null? . m4f65) (not . m4f64) (negative? . m4f63) (nan? . m4f62) (min . m4f61) (max . m4f60) (map . m4f5f) (make-vector . m4f5e) (make-string . m4f5d) (make-rectangular . m4f5c) (make-polar . m4f5b) (magnitude . m4f5a) (log . m4f59) (list? . m4f58) (list-tail . m4f57) (list-ref . m4f56) (list->vector . m4f55) (list->string . m4f54) (list . m4f53) (length . m4f52) (lcm . m4f51) (integer? . m4f50) (integer-valued? . m4f4f) (integer->char . m4f4e) (infinite? . m4f4d) (inexact? . m4f4c) (inexact . m4f4b) (imag-part . m4f4a) (gcd . m4f49) (for-each . m4f48) (floor . m4f47) (finite? . m4f46) (expt . m4f45) (exp . m4f44) (exact? . m4f43) (exact-integer-sqrt . m4f42) (exact . m4f41) (even? . m4f40) (error . m4f3f) (eqv? . m4f3e) (equal? . m4f3d) (eq? . m4f3c) (dynamic-wind . m4f3b) (div0-and-mod0 . m4f3a) (mod0 . m4f39) (div0 . m4f38) (div-and-mod . m4f37) (mod . m4f36) (div . m4f35) (denominator . m4f34) (cos . m4f33) (cons . m4f32) (complex? . m4f31) (char? . m4f30) (char>? . m4f2f) (char>=? . m4f2e) (char=? . m4f2d) (char<? . m4f2c) (char<=? . m4f2b) (char->integer . m4f2a) (ceiling . m4f29) (call-with-values . m4f28) (call/cc . m4f27) (call-with-current-continuation . m4f26) (cddddr . m4f25) (cdddar . m4f24) (cddadr . m4f23) (cddaar . m4f22) (cdaddr . m4f21) (cdadar . m4f20) (cdaadr . m4f1f) (cdaaar . m4f1e) (cadddr . m4f1d) (caddar . m4f1c) (cadadr . m4f1b) (cadaar . m4f1a) (caaddr . m4f19) (caadar . m4f18) (caaadr . m4f17) (caaaar . m4f16) (cdddr . m4f15) (cddar . m4f14) (cdadr . m4f13) (cdaar . m4f12) (caddr . m4f11) (cadar . m4f10) (caadr . m4f0f) (caaar . m4f0e) (cddr . m4f0d) (cdar . m4f0c) (cadr . m4f0b) (caar . m4f0a) (cdr . m4f09) (car . m4f08) (boolean? . m4f07) (boolean=? . m4f06) (atan . m4f05) (assertion-violation . m4f04) (asin . m4f03) (apply . m4f02) (append . m4f01) (angle . m4f00) (acos . m4eff) (abs . m4efe) (/ . m4efd) (* . m4efc) (- . m4efb) (+ . m4efa) (>= . m4ef9) (> . m4ef8) (= . m4ef7) (<= . m4ef6) (< . m4ef5) (library . m4ef4) (&no-nans . m4ef3) (&no-infinities . m4ef2) (&i/o-encoding . m4ef1) (&i/o-decoding . m4ef0) (&i/o-port . m4eef) (&i/o-file-does-not-exist . m4eee) (&i/o-file-already-exists . m4eed) (&i/o-file-is-read-only . m4eec) (&i/o-file-protection . m4eeb) (&i/o-filename . m4eea) (&i/o-invalid-position . m4ee9) (&i/o-write . m4ee8) (&i/o-read . m4ee7) (&i/o . m4ee6) (&undefined . m4ee5) (&syntax . m4ee4) (&lexical . m4ee3) (&implementation-restriction . m4ee2) (&non-continuable . m4ee1) (&who . m4ee0) (&irritants . m4edf) (&assertion . m4ede) (&violation . m4edd) (&error . m4edc) (&serious . m4edb) (&warning . m4eda) (&message . m4ed9) (&condition . m4ed8) (define-condition-type . m4ed7) (define-enumeration . m4ed6) (define-record-type . m4ed5) (parent-rtd . m4ed4) (nongenerative . m4ed3) (opaque . m4ed2) (sealed . m4ed1) (protocol . m4ed0) (parent . m4ecf) (immutable . m4ece) (mutable . m4ecd) (fields . m4ecc) (error-handling-mode . m4ecb) (file-options . m4eca) (buffer-mode . m4ec9) (eol-style . m4ec8) (guard . m4ec7) (unsyntax-splicing . m4ec4) (unsyntax . m4ec3) (unquote-splicing . m4ec2) (unquote . m4ec1) (_ . m4ec0) (else . m4ebf) (=> . m4ebe) (... . m4ebd) (assert . m4ebc) (endianness . m4ebb) (time . m4eb9) (do . m4eb8) (cond . m4eb7) (let* . m4eb6) (let . m4eb5) (let*-values . m4eb4) (let-values . m4eb3) (identifier-syntax . m4eb2) (with-syntax . m4eb1) (quasisyntax . m4eb0) (quasiquote . m4eaf) (syntax-rules . m4eae) (include . m4ead) (record-constructor-descriptor . m4eab) (record-type-descriptor . m4eaa) (case . m4ea9) (unless . m4ea7) (when . m4ea6) (or . m4ea5) (and . m4ea4) (if . m4ea3) (letrec* . m4ea2) (letrec . m4ea1) (case-lambda . m4e9f) (lambda . m4e9e) (syntax . m4e9d) (syntax-case . m4e9c) (quote . m4e9b) (letrec-syntax . m4e99) (let-syntax . m4e98) (set! . m4e97) (import . m4e96) (begin . m4e95) (define-syntax . m4e93) (define . m4e92)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5162 '(psyntax null-environment-5) '() '() '() '() '((make-promise . m5072) (unquote-splicing . m4ec2) (unquote . m4ec1) (_ . m4ec0) (else . m4ebf) (=> . m4ebe) (... . m4ebd) (delay . m4eba) (do . m4eb8) (cond . m4eb7) (let* . m4eb6) (let . m4eb5) (quasiquote . m4eaf) (syntax-rules . m4eae) (case . m4ea9) (or . m4ea5) (and . m4ea4) (if . m4ea3) (letrec . m4ea1) (lambda . m4e9e) (quote . m4e9b) (letrec-syntax . m4e99) (let-syntax . m4e98) (set! . m4e97) (begin . m4e95) (define-syntax . m4e93) (define . m4e92)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5163 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . m5107) (string-ci>=? . m5106) (string-ci=? . m5105) (string-ci<? . m5104) (string-ci<=? . m5103) (char-whitespace? . m5102) (char-upper-case? . m5101) (char-numeric? . m50ff) (char-lower-case? . m50fe) (char-upcase . m50fc) (char-downcase . m50f9) (char-ci>? . m50f8) (char-ci>=? . m50f7) (char-ci=? . m50f6) (char-ci<? . m50f5) (char-ci<=? . m50f4) (char-alphabetic? . m50f3) (call-with-output-file . m50c7) (call-with-input-file . m50c6) (write-char . m50c5) (write . m50c4) (with-output-to-file . m50c3) (with-input-from-file . m50c2) (read-char . m50c1) (read . m50c0) (peek-char . m50bf) (open-output-file . m50be) (open-input-file . m50bd) (newline . m50bc) (display . m50bb) (close-output-port . m50ba) (close-input-port . m50b9) (eof-object . m50b7) (current-output-port . m50b5) (current-input-port . m50b4) (output-port? . m50b3) (input-port? . m50b2) (scheme-report-environment . m2f7a) (quotient . m5078) (null-environment . m2f78) (remainder . m5077) (modulo . m5076) (inexact->exact . m5075) (force . m5074) (exact->inexact . m5073) (make-promise . m5072) (string-fill! . m5070) (string-set! . m506f) (set-cdr! . m506e) (set-car! . m506d) (memv . m5067) (memq . m5066) (member . m5064) (assv . m505c) (assq . m505b) (assoc . m5059) (eval . m2f7e) (zero? . m4f96) (vector? . m4f95) (vector-set! . m4f94) (vector-ref . m4f93) (vector-length . m4f91) (vector-fill! . m4f8f) (vector->list . m4f8e) (vector . m4f8d) (values . m4f8c) (truncate . m4f8b) (tan . m4f8a) (symbol? . m4f89) (symbol->string . m4f87) (substring . m4f86) (string? . m4f85) (string>? . m4f84) (string>=? . m4f83) (string=? . m4f82) (string<? . m4f81) (string<=? . m4f80) (string-ref . m4f7f) (string-length . m4f7e) (string-copy . m4f7c) (string-append . m4f7b) (string->symbol . m4f7a) (string->number . m4f79) (string->list . m4f78) (string . m4f77) (sqrt . m4f76) (sin . m4f75) (round . m4f74) (reverse . m4f73) (real? . m4f72) (real-part . m4f70) (rationalize . m4f6f) (rational? . m4f6e) (procedure? . m4f6c) (positive? . m4f6b) (pair? . m4f6a) (odd? . m4f69) (numerator . m4f68) (number? . m4f67) (number->string . m4f66) (not . m4f64) (negative? . m4f63) (min . m4f61) (max . m4f60) (map . m4f5f) (make-vector . m4f5e) (make-string . m4f5d) (make-rectangular . m4f5c) (make-polar . m4f5b) (magnitude . m4f5a) (log . m4f59) (list? . m4f58) (list-tail . m4f57) (list-ref . m4f56) (list->vector . m4f55) (list->string . m4f54) (list . m4f53) (length . m4f52) (lcm . m4f51) (integer? . m4f50) (integer->char . m4f4e) (inexact? . m4f4c) (imag-part . m4f4a) (gcd . m4f49) (for-each . m4f48) (floor . m4f47) (expt . m4f45) (exp . m4f44) (exact? . m4f43) (even? . m4f40) (eqv? . m4f3e) (equal? . m4f3d) (eq? . m4f3c) (dynamic-wind . m4f3b) (denominator . m4f34) (cos . m4f33) (cons . m4f32) (complex? . m4f31) (char? . m4f30) (char>? . m4f2f) (char>=? . m4f2e) (char=? . m4f2d) (char<? . m4f2c) (char<=? . m4f2b) (char->integer . m4f2a) (ceiling . m4f29) (call-with-values . m4f28) (call-with-current-continuation . m4f26) (cddddr . m4f25) (cdddar . m4f24) (cddadr . m4f23) (cddaar . m4f22) (cdaddr . m4f21) (cdadar . m4f20) (cdaadr . m4f1f) (cdaaar . m4f1e) (cadddr . m4f1d) (caddar . m4f1c) (cadadr . m4f1b) (cadaar . m4f1a) (caaddr . m4f19) (caadar . m4f18) (caaadr . m4f17) (caaaar . m4f16) (cdddr . m4f15) (cddar . m4f14) (cdadr . m4f13) (cdaar . m4f12) (caddr . m4f11) (cadar . m4f10) (caadr . m4f0f) (caaar . m4f0e) (cddr . m4f0d) (cdar . m4f0c) (cadr . m4f0b) (caar . m4f0a) (cdr . m4f09) (car . m4f08) (boolean? . m4f07) (atan . m4f05) (asin . m4f03) (apply . m4f02) (append . m4f01) (angle . m4f00) (acos . m4eff) (abs . m4efe) (/ . m4efd) (* . m4efc) (- . m4efb) (+ . m4efa) (>= . m4ef9) (> . m4ef8) (= . m4ef7) (<= . m4ef6) (< . m4ef5) (unquote-splicing . m4ec2) (unquote . m4ec1) (else . m4ebf) (=> . m4ebe) (... . m4ebd) (delay . m4eba) (do . m4eb8) (cond . m4eb7) (let* . m4eb6) (let . m4eb5) (quasiquote . m4eaf) (syntax-rules . m4eae) (case . m4ea9) (or . m4ea5) (and . m4ea4) (if . m4ea3) (letrec . m4ea1) (lambda . m4e9e) (quote . m4e9b) (letrec-syntax . m4e99) (let-syntax . m4e98) (set! . m4e97) (begin . m4e95) (define-syntax . m4e93) (define . m4e92)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5164 '(psyntax modules) '() '() '() '() '((module . m4e94)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5165 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5166 '(rnrs) '(6) '() '() '() '((regexp? . m5159) (string-upcase . m510f) (string-titlecase . m510e) (string-normalize-nfkd . m510d) (string-normalize-nfkc . m510c) (string-normalize-nfd . m510b) (string-normalize-nfc . m510a) (string-foldcase . m5109) (string-downcase . m5108) (string-ci>? . m5107) (string-ci>=? . m5106) (string-ci=? . m5105) (string-ci<? . m5104) (string-ci<=? . m5103) (char-whitespace? . m5102) (char-upper-case? . m5101) (char-title-case? . m5100) (char-numeric? . m50ff) (char-lower-case? . m50fe) (char-general-category . m50fd) (char-upcase . m50fc) (char-titlecase . m50fb) (char-foldcase . m50fa) (char-downcase . m50f9) (char-ci>? . m50f8) (char-ci>=? . m50f7) (char-ci=? . m50f6) (char-ci<? . m50f5) (char-ci<=? . m50f4) (char-alphabetic? . m50f3) (make-variable-transformer . m2ce2) (identifier? . m2fa0) (generate-temporaries . m2f8c) (free-identifier=? . m2f8e) (syntax->datum . m2fa4) (datum->syntax . m2fa2) (bound-identifier=? . m2f90) (record-type-descriptor? . m50f2) (record-predicate . m50f1) (record-mutator . m50f0) (record-constructor . m50ef) (record-accessor . m50ee) (make-record-type-descriptor . m50ed) (make-record-constructor-descriptor . m50ec) (record? . m50eb) (record-type-uid . m50ea) (record-type-sealed? . m50e9) (record-type-parent . m50e8) (record-type-opaque? . m50e7) (record-type-name . m50e6) (record-type-generative? . m50e5) (record-type-field-names . m50e4) (record-rtd . m50e3) (record-field-mutable? . m50e2) (delete-file . m50e1) (file-exists? . m50e0) (vector-sort! . m50df) (vector-sort . m50de) (list-sort . m50dd) (symbol-hash . m50dc) (string-ci-hash . m50db) (string-hash . m50da) (equal-hash . m50d9) (hashtable-equivalence-function . m50d8) (make-hashtable . m50d7) (hashtable-hash-function . m50d6) (make-eqv-hashtable . m50d5) (make-eq-hashtable . m50d4) (hashtable? . m50d3) (hashtable-update! . m50d2) (hashtable-size . m50d1) (hashtable-set! . m50d0) (hashtable-ref . m50cf) (hashtable-mutable? . m50ce) (hashtable-keys . m50cd) (hashtable-entries . m50cc) (hashtable-delete! . m50cb) (hashtable-copy . m50ca) (hashtable-contains? . m50c9) (hashtable-clear! . m50c8) (call-with-output-file . m50c7) (call-with-input-file . m50c6) (write-char . m50c5) (write . m50c4) (with-output-to-file . m50c3) (with-input-from-file . m50c2) (read-char . m50c1) (read . m50c0) (peek-char . m50bf) (open-output-file . m50be) (open-input-file . m50bd) (newline . m50bc) (display . m50bb) (close-output-port . m50ba) (close-input-port . m50b9) (eof-object? . m50b8) (eof-object . m50b7) (current-error-port . m50b6) (current-output-port . m50b5) (current-input-port . m50b4) (output-port? . m50b3) (input-port? . m50b2) (utf-8-codec . m50b1) (utf-16-codec . m50b0) (transcoder-error-handling-mode . m50af) (transcoder-eol-style . m50ae) (transcoder-codec . m50ad) (transcoded-port . m50ac) (textual-port? . m50ab) (string->bytevector . m50aa) (standard-output-port . m50a9) (standard-input-port . m50a8) (standard-error-port . m50a7) (set-port-position! . m50a6) (put-u8 . m50a5) (put-string . m50a4) (put-datum . m50a3) (put-char . m50a2) (put-bytevector . m50a1) (port? . m50a0) (port-transcoder . m509f) (port-position . m509e) (port-has-set-port-position!? . m509d) (port-has-port-position? . m509c) (port-eof? . m509b) (output-port-buffer-mode . m509a) (open-string-output-port . m5099) (open-string-input-port . m5098) (open-file-output-port . m5097) (open-file-input/output-port . m5096) (open-file-input-port . m5095) (open-bytevector-output-port . m5094) (open-bytevector-input-port . m5093) (native-transcoder . m5092) (native-eol-style . m5091) (make-transcoder . m5090) (latin-1-codec . m508f) (make-i/o-write-error . m4b60) (make-i/o-read-error . m4b4b) (make-i/o-port-error . m4c01) (make-i/o-invalid-position-error . m4b77) (make-i/o-filename-error . m4b92) (make-i/o-file-protection-error . m4bab) (make-i/o-file-is-read-only-error . m4bc0) (make-i/o-file-does-not-exist-error . m4bea) (make-i/o-file-already-exists-error . m4bd5) (make-i/o-error . m4b36) (make-i/o-encoding-error . m4c31) (make-i/o-decoding-error . m4c1a) (make-custom-textual-output-port . m508e) (make-custom-textual-input/output-port . m508d) (make-custom-textual-input-port . m508c) (make-custom-binary-output-port . m508b) (make-custom-binary-input/output-port . m508a) (make-custom-binary-input-port . m5089) (make-bytevector . m5088) (lookahead-u8 . m5087) (lookahead-char . m5086) (i/o-write-error? . m4b62) (i/o-read-error? . m4b4d) (i/o-port-error? . m4c05) (i/o-invalid-position-error? . m4b7b) (i/o-filename-error? . m4b96) (i/o-file-protection-error? . m4bad) (i/o-file-is-read-only-error? . m4bc2) (i/o-file-does-not-exist-error? . m4bec) (i/o-file-already-exists-error? . m4bd7) (i/o-error? . m4b38) (i/o-error-position . m4b7d) (i/o-error-port . m4c07) (i/o-error-filename . m4b98) (i/o-encoding-error? . m4c35) (i/o-encoding-error-char . m4c37) (i/o-decoding-error? . m4c1c) (get-u8 . m5085) (get-string-n! . m5084) (get-string-n . m5083) (get-string-all . m5082) (get-line . m5081) (get-datum . m5080) (get-char . m507f) (get-bytevector-some . m507e) (get-bytevector-n! . m507d) (get-bytevector-n . m507c) (get-bytevector-all . m507b) (flush-output-port . m507a) (close-port . m5079) (exit . m5071) (command-line . m4d6c) (remove . m506c) (remv . m506b) (remp . m506a) (remq . m5069) (partition . m5068) (memv . m5067) (memq . m5066) (memp . m5065) (member . m5064) (exists . m5063) (for-all . m5062) (fold-right . m5061) (fold-left . m5060) (find . m505f) (filter . m505e) (cons* . m505d) (assv . m505c) (assq . m505b) (assp . m505a) (assoc . m5059) (call-with-string-output-port . m5058) (call-with-port . m5057) (call-with-bytevector-output-port . m5056) (bytevector->string . m5055) (buffer-mode? . m5054) (binary-port? . m5053) (with-exception-handler . m5052) (raise-continuable . m5051) (raise . m5050) (make-enumeration . m504f) (enum-set=? . m504e) (enum-set-universe . m504d) (enum-set-union . m504c) (enum-set-subset? . m504b) (enum-set-projection . m504a) (enum-set-member? . m5049) (enum-set-intersection . m5048) (enum-set-indexer . m5047) (enum-set-difference . m5046) (enum-set-constructor . m5045) (enum-set-complement . m5044) (enum-set->list . m5043) (who-condition? . m4aac) (warning? . m4a24) (violation? . m4a63) (undefined-violation? . m4b23) (syntax-violation? . m4b0a) (syntax-violation-subform . m4b0e) (syntax-violation-form . m4b0c) (syntax-violation . m2f9e) (simple-conditions . m5042) (serious-condition? . m4a39) (non-continuable-violation? . m4ac3) (message-condition? . m4a0d) (make-who-condition . m4aa8) (make-warning . m4a22) (make-violation . m4a61) (make-undefined-violation . m4b21) (make-syntax-violation . m4b04) (make-serious-condition . m4a37) (make-non-continuable-violation . m4ac1) (make-message-condition . m4a09) (make-lexical-violation . m4aeb) (make-irritants-condition . m4a8d) (make-implementation-restriction-violation . m4ad6) (make-error . m4a4c) (make-assertion-violation . m4a76) (lexical-violation? . m4aed) (irritants-condition? . m4a91) (implementation-restriction-violation? . m4ad8) (error? . m4a4e) (condition-who . m4aae) (condition-predicate . m5041) (condition-message . m4a0f) (condition-irritants . m4a93) (condition-accessor . m5040) (condition . m503f) (assertion-violation? . m4a78) (condition? . m503e) (utf32->string . m503d) (utf16->string . m503c) (utf8->string . m503b) (uint-list->bytevector . m503a) (u8-list->bytevector . m5039) (string->utf8 . m5038) (string->utf32 . m5037) (string->utf16 . m5036) (sint-list->bytevector . m5035) (native-endianness . m5034) (bytevector? . m5033) (bytevector=? . m5032) (bytevector-uint-set! . m5031) (bytevector-uint-ref . m5030) (bytevector-u8-set! . m502f) (bytevector-u8-ref . m502e) (bytevector-u64-set! . m502d) (bytevector-u64-ref . m502c) (bytevector-u64-native-set! . m502b) (bytevector-u64-native-ref . m502a) (bytevector-u32-set! . m5029) (bytevector-u32-ref . m5028) (bytevector-u32-native-set! . m5027) (bytevector-u32-native-ref . m5026) (bytevector-u16-set! . m5025) (bytevector-u16-ref . m5024) (bytevector-u16-native-set! . m5023) (bytevector-u16-native-ref . m5022) (bytevector-sint-set! . m5021) (bytevector-sint-ref . m5020) (bytevector-s8-set! . m501f) (bytevector-s8-ref . m501e) (bytevector-s64-set! . m501d) (bytevector-s64-ref . m501c) (bytevector-s64-native-set! . m501b) (bytevector-s64-native-ref . m501a) (bytevector-s32-set! . m5019) (bytevector-s32-ref . m5018) (bytevector-s32-native-set! . m5017) (bytevector-s32-native-ref . m5016) (bytevector-s16-set! . m5015) (bytevector-s16-ref . m5014) (bytevector-s16-native-set! . m5013) (bytevector-s16-native-ref . m5012) (bytevector-length . m5011) (bytevector-ieee-single-ref . m5010) (bytevector-ieee-single-set! . m500f) (bytevector-ieee-single-native-set! . m500e) (bytevector-ieee-single-native-ref . m500d) (bytevector-ieee-double-set! . m500c) (bytevector-ieee-double-ref . m500b) (bytevector-ieee-double-native-set! . m500a) (bytevector-ieee-double-native-ref . m5009) (bytevector-fill! . m5008) (bytevector-copy! . m5007) (bytevector-copy . m5006) (bytevector->uint-list . m5005) (bytevector->u8-list . m5004) (bytevector->sint-list . m5003) (no-nans-violation? . m4c61) (no-infinities-violation? . m4c4c) (make-no-nans-violation . m4c5f) (make-no-infinities-violation . m4c4a) (real->flonum . m5002) (flzero? . m5001) (fltruncate . m5000) (fltan . m4fff) (flsqrt . m4ffe) (flsin . m4ffd) (flround . m4ffc) (flpositive? . m4ffb) (flonum? . m4ffa) (flodd? . m4ff9) (flnumerator . m4ff8) (flnegative? . m4ff7) (flnan? . m4ff6) (flmod0 . m4ff5) (flmod . m4ff4) (flmin . m4ff3) (flmax . m4ff2) (fllog . m4ff1) (flinteger? . m4ff0) (flinfinite? . m4fef) (flfloor . m4fee) (flfinite? . m4fed) (flexpt . m4fec) (flexp . m4feb) (fleven? . m4fea) (fldiv0-and-mod0 . m4fe9) (fldiv0 . m4fe8) (fldiv-and-mod . m4fe7) (fldiv . m4fe6) (fldenominator . m4fe5) (flcos . m4fe4) (flceiling . m4fe3) (flatan . m4fe2) (flasin . m4fe1) (flacos . m4fe0) (flabs . m4fdf) (fl>? . m4fde) (fl>=? . m4fdd) (fl=? . m4fdc) (fl<? . m4fdb) (fl<=? . m4fda) (fl/ . m4fd9) (fl- . m4fd8) (fl+ . m4fd7) (fl* . m4fd6) (fixnum->flonum . m4fd5) (fxzero? . m4fd4) (fxxor . m4fd3) (fxrotate-bit-field . m4fd2) (fxreverse-bit-field . m4fd1) (fxpositive? . m4fd0) (fxodd? . m4fcf) (fxnot . m4fce) (fxnegative? . m4fcd) (fxmod0 . m4fcc) (fxmod . m4fcb) (fxmin . m4fca) (fxmax . m4fc9) (fxlength . m4fc8) (fxior . m4fc7) (fxif . m4fc6) (fxfirst-bit-set . m4fc5) (fxeven? . m4fc4) (fxdiv0-and-mod0 . m4fc3) (fxdiv0 . m4fc2) (fxdiv-and-mod . m4fc1) (fxdiv . m4fc0) (fxcopy-bit-field . m4fbf) (fxcopy-bit . m4fbe) (fxbit-set? . m4fbd) (fxbit-field . m4fbc) (fxbit-count . m4fbb) (fxarithmetic-shift-right . m4fba) (fxarithmetic-shift-left . m4fb9) (fxarithmetic-shift . m4fb8) (fxand . m4fb7) (fx>? . m4fb6) (fx>=? . m4fb5) (fx=? . m4fb4) (fx<? . m4fb3) (fx<=? . m4fb2) (fx-/carry . m4fb1) (fx- . m4fb0) (fx+/carry . m4faf) (fx+ . m4fae) (fx*/carry . m4fad) (fx* . m4fac) (greatest-fixnum . m4fab) (least-fixnum . m4faa) (fixnum-width . m4fa9) (fixnum? . m4fa8) (bitwise-rotate-bit-field . m4fa7) (bitwise-reverse-bit-field . m4fa6) (bitwise-length . m4fa5) (bitwise-if . m4fa4) (bitwise-first-bit-set . m4fa3) (bitwise-copy-bit-field . m4fa2) (bitwise-copy-bit . m4fa1) (bitwise-bit-set? . m4fa0) (bitwise-bit-field . m4f9f) (bitwise-bit-count . m4f9e) (bitwise-xor . m4f9d) (bitwise-ior . m4f9c) (bitwise-and . m4f9b) (bitwise-not . m4f9a) (bitwise-arithmetic-shift-right . m4f99) (bitwise-arithmetic-shift-left . m4f98) (bitwise-arithmetic-shift . m4f97) (zero? . m4f96) (vector? . m4f95) (vector-set! . m4f94) (vector-ref . m4f93) (vector-map . m4f92) (vector-length . m4f91) (vector-for-each . m4f90) (vector-fill! . m4f8f) (vector->list . m4f8e) (vector . m4f8d) (values . m4f8c) (truncate . m4f8b) (tan . m4f8a) (symbol? . m4f89) (symbol=? . m4f88) (symbol->string . m4f87) (substring . m4f86) (string? . m4f85) (string>? . m4f84) (string>=? . m4f83) (string=? . m4f82) (string<? . m4f81) (string<=? . m4f80) (string-ref . m4f7f) (string-length . m4f7e) (string-for-each . m4f7d) (string-copy . m4f7c) (string-append . m4f7b) (string->symbol . m4f7a) (string->number . m4f79) (string->list . m4f78) (string . m4f77) (sqrt . m4f76) (sin . m4f75) (round . m4f74) (reverse . m4f73) (real? . m4f72) (real-valued? . m4f71) (real-part . m4f70) (rationalize . m4f6f) (rational? . m4f6e) (rational-valued? . m4f6d) (procedure? . m4f6c) (positive? . m4f6b) (pair? . m4f6a) (odd? . m4f69) (numerator . m4f68) (number? . m4f67) (number->string . m4f66) (null? . m4f65) (not . m4f64) (negative? . m4f63) (nan? . m4f62) (min . m4f61) (max . m4f60) (map . m4f5f) (make-vector . m4f5e) (make-string . m4f5d) (make-rectangular . m4f5c) (make-polar . m4f5b) (magnitude . m4f5a) (log . m4f59) (list? . m4f58) (list-tail . m4f57) (list-ref . m4f56) (list->vector . m4f55) (list->string . m4f54) (list . m4f53) (length . m4f52) (lcm . m4f51) (integer? . m4f50) (integer-valued? . m4f4f) (integer->char . m4f4e) (infinite? . m4f4d) (inexact? . m4f4c) (inexact . m4f4b) (imag-part . m4f4a) (gcd . m4f49) (for-each . m4f48) (floor . m4f47) (finite? . m4f46) (expt . m4f45) (exp . m4f44) (exact? . m4f43) (exact-integer-sqrt . m4f42) (exact . m4f41) (even? . m4f40) (error . m4f3f) (eqv? . m4f3e) (equal? . m4f3d) (eq? . m4f3c) (dynamic-wind . m4f3b) (div0-and-mod0 . m4f3a) (mod0 . m4f39) (div0 . m4f38) (div-and-mod . m4f37) (mod . m4f36) (div . m4f35) (denominator . m4f34) (cos . m4f33) (cons . m4f32) (complex? . m4f31) (char? . m4f30) (char>? . m4f2f) (char>=? . m4f2e) (char=? . m4f2d) (char<? . m4f2c) (char<=? . m4f2b) (char->integer . m4f2a) (ceiling . m4f29) (call-with-values . m4f28) (call/cc . m4f27) (call-with-current-continuation . m4f26) (cddddr . m4f25) (cdddar . m4f24) (cddadr . m4f23) (cddaar . m4f22) (cdaddr . m4f21) (cdadar . m4f20) (cdaadr . m4f1f) (cdaaar . m4f1e) (cadddr . m4f1d) (caddar . m4f1c) (cadadr . m4f1b) (cadaar . m4f1a) (caaddr . m4f19) (caadar . m4f18) (caaadr . m4f17) (caaaar . m4f16) (cdddr . m4f15) (cddar . m4f14) (cdadr . m4f13) (cdaar . m4f12) (caddr . m4f11) (cadar . m4f10) (caadr . m4f0f) (caaar . m4f0e) (cddr . m4f0d) (cdar . m4f0c) (cadr . m4f0b) (caar . m4f0a) (cdr . m4f09) (car . m4f08) (boolean? . m4f07) (boolean=? . m4f06) (atan . m4f05) (assertion-violation . m4f04) (asin . m4f03) (apply . m4f02) (append . m4f01) (angle . m4f00) (acos . m4eff) (abs . m4efe) (/ . m4efd) (* . m4efc) (- . m4efb) (+ . m4efa) (>= . m4ef9) (> . m4ef8) (= . m4ef7) (<= . m4ef6) (< . m4ef5) (&no-nans . m4ef3) (&no-infinities . m4ef2) (&i/o-encoding . m4ef1) (&i/o-decoding . m4ef0) (&i/o-port . m4eef) (&i/o-file-does-not-exist . m4eee) (&i/o-file-already-exists . m4eed) (&i/o-file-is-read-only . m4eec) (&i/o-file-protection . m4eeb) (&i/o-filename . m4eea) (&i/o-invalid-position . m4ee9) (&i/o-write . m4ee8) (&i/o-read . m4ee7) (&i/o . m4ee6) (&undefined . m4ee5) (&syntax . m4ee4) (&lexical . m4ee3) (&implementation-restriction . m4ee2) (&non-continuable . m4ee1) (&who . m4ee0) (&irritants . m4edf) (&assertion . m4ede) (&violation . m4edd) (&error . m4edc) (&serious . m4edb) (&warning . m4eda) (&message . m4ed9) (&condition . m4ed8) (define-condition-type . m4ed7) (define-enumeration . m4ed6) (define-record-type . m4ed5) (parent-rtd . m4ed4) (nongenerative . m4ed3) (opaque . m4ed2) (sealed . m4ed1) (protocol . m4ed0) (parent . m4ecf) (immutable . m4ece) (mutable . m4ecd) (fields . m4ecc) (error-handling-mode . m4ecb) (file-options . m4eca) (buffer-mode . m4ec9) (eol-style . m4ec8) (guard . m4ec7) (unsyntax-splicing . m4ec4) (unsyntax . m4ec3) (unquote-splicing . m4ec2) (unquote . m4ec1) (_ . m4ec0) (else . m4ebf) (=> . m4ebe) (... . m4ebd) (assert . m4ebc) (endianness . m4ebb) (do . m4eb8) (cond . m4eb7) (let* . m4eb6) (let . m4eb5) (let*-values . m4eb4) (let-values . m4eb3) (identifier-syntax . m4eb2) (with-syntax . m4eb1) (quasisyntax . m4eb0) (quasiquote . m4eaf) (syntax-rules . m4eae) (record-constructor-descriptor . m4eab) (record-type-descriptor . m4eaa) (case . m4ea9) (unless . m4ea7) (when . m4ea6) (or . m4ea5) (and . m4ea4) (if . m4ea3) (letrec* . m4ea2) (letrec . m4ea1) (case-lambda . m4e9f) (lambda . m4e9e) (syntax . m4e9d) (syntax-case . m4e9c) (quote . m4e9b) (letrec-syntax . m4e99) (let-syntax . m4e98) (set! . m4e97) (begin . m4e95) (define-syntax . m4e93) (define . m4e92)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5167 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . m2f7a) (quotient . m5078) (null-environment . m2f78) (remainder . m5077) (modulo . m5076) (inexact->exact . m5075) (force . m5074) (exact->inexact . m5073) (make-promise . m5072) (delay . m4eba)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5168 '(rnrs control) '(6) '() '() '() '((do . m4eb8) (unless . m4ea7) (when . m4ea6) (case-lambda . m4e9f)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5169 '(rnrs eval) '(6) '() '() '() '((eval . m2f7e) (environment . m2f76)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm516a '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . m506e) (set-car! . m506d)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm516b '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . m5070) (string-set! . m506f)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm516c '(rnrs programs) '(6) '() '() '() '((exit . m5071) (command-line . m4d6c)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm516d '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . m2ce2) (identifier? . m2fa0) (generate-temporaries . m2f8c) (free-identifier=? . m2f8e) (syntax->datum . m2fa4) (datum->syntax . m2fa2) (bound-identifier=? . m2f90) (syntax-violation . m2f9e) (unsyntax-splicing . m4ec4) (unsyntax . m4ec3) (_ . m4ec0) (... . m4ebd) (with-syntax . m4eb1) (quasisyntax . m4eb0) (syntax . m4e9d) (syntax-case . m4e9c)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm516e '(rnrs files) '(6) '() '() '() '((delete-file . m50e1) (file-exists? . m50e0) (make-i/o-write-error . m4b60) (make-i/o-read-error . m4b4b) (make-i/o-port-error . m4c01) (make-i/o-invalid-position-error . m4b77) (make-i/o-filename-error . m4b92) (make-i/o-file-protection-error . m4bab) (make-i/o-file-is-read-only-error . m4bc0) (make-i/o-file-does-not-exist-error . m4bea) (make-i/o-file-already-exists-error . m4bd5) (make-i/o-error . m4b36) (i/o-write-error? . m4b62) (i/o-read-error? . m4b4d) (i/o-port-error? . m4c05) (i/o-invalid-position-error? . m4b7b) (i/o-filename-error? . m4b96) (i/o-file-protection-error? . m4bad) (i/o-file-is-read-only-error? . m4bc2) (i/o-file-does-not-exist-error? . m4bec) (i/o-file-already-exists-error? . m4bd7) (i/o-error? . m4b38) (i/o-error-position . m4b7d) (i/o-error-port . m4c07) (i/o-error-filename . m4b98) (&i/o-port . m4eef) (&i/o-file-does-not-exist . m4eee) (&i/o-file-already-exists . m4eed) (&i/o-file-is-read-only . m4eec) (&i/o-file-protection . m4eeb) (&i/o-filename . m4eea) (&i/o-invalid-position . m4ee9) (&i/o-write . m4ee8) (&i/o-read . m4ee7) (&i/o . m4ee6)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm516f '(rnrs sorting) '(6) '() '() '() '((vector-sort! . m50df) (vector-sort . m50de) (list-sort . m50dd)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5170 '(rnrs base) '(6) '() '() '() '((zero? . m4f96) (vector? . m4f95) (vector-set! . m4f94) (vector-ref . m4f93) (vector-map . m4f92) (vector-length . m4f91) (vector-for-each . m4f90) (vector-fill! . m4f8f) (vector->list . m4f8e) (vector . m4f8d) (values . m4f8c) (truncate . m4f8b) (tan . m4f8a) (symbol? . m4f89) (symbol=? . m4f88) (symbol->string . m4f87) (substring . m4f86) (string? . m4f85) (string>? . m4f84) (string>=? . m4f83) (string=? . m4f82) (string<? . m4f81) (string<=? . m4f80) (string-ref . m4f7f) (string-length . m4f7e) (string-for-each . m4f7d) (string-copy . m4f7c) (string-append . m4f7b) (string->symbol . m4f7a) (string->number . m4f79) (string->list . m4f78) (string . m4f77) (sqrt . m4f76) (sin . m4f75) (round . m4f74) (reverse . m4f73) (real? . m4f72) (real-valued? . m4f71) (real-part . m4f70) (rationalize . m4f6f) (rational? . m4f6e) (rational-valued? . m4f6d) (procedure? . m4f6c) (positive? . m4f6b) (pair? . m4f6a) (odd? . m4f69) (numerator . m4f68) (number? . m4f67) (number->string . m4f66) (null? . m4f65) (not . m4f64) (negative? . m4f63) (nan? . m4f62) (min . m4f61) (max . m4f60) (map . m4f5f) (make-vector . m4f5e) (make-string . m4f5d) (make-rectangular . m4f5c) (make-polar . m4f5b) (magnitude . m4f5a) (log . m4f59) (list? . m4f58) (list-tail . m4f57) (list-ref . m4f56) (list->vector . m4f55) (list->string . m4f54) (list . m4f53) (length . m4f52) (lcm . m4f51) (integer? . m4f50) (integer-valued? . m4f4f) (integer->char . m4f4e) (infinite? . m4f4d) (inexact? . m4f4c) (inexact . m4f4b) (imag-part . m4f4a) (gcd . m4f49) (for-each . m4f48) (floor . m4f47) (finite? . m4f46) (expt . m4f45) (exp . m4f44) (exact? . m4f43) (exact-integer-sqrt . m4f42) (exact . m4f41) (even? . m4f40) (error . m4f3f) (eqv? . m4f3e) (equal? . m4f3d) (eq? . m4f3c) (dynamic-wind . m4f3b) (div0-and-mod0 . m4f3a) (mod0 . m4f39) (div0 . m4f38) (div-and-mod . m4f37) (mod . m4f36) (div . m4f35) (denominator . m4f34) (cos . m4f33) (cons . m4f32) (complex? . m4f31) (char? . m4f30) (char>? . m4f2f) (char>=? . m4f2e) (char=? . m4f2d) (char<? . m4f2c) (char<=? . m4f2b) (char->integer . m4f2a) (ceiling . m4f29) (call-with-values . m4f28) (call/cc . m4f27) (call-with-current-continuation . m4f26) (cddddr . m4f25) (cdddar . m4f24) (cddadr . m4f23) (cddaar . m4f22) (cdaddr . m4f21) (cdadar . m4f20) (cdaadr . m4f1f) (cdaaar . m4f1e) (cadddr . m4f1d) (caddar . m4f1c) (cadadr . m4f1b) (cadaar . m4f1a) (caaddr . m4f19) (caadar . m4f18) (caaadr . m4f17) (caaaar . m4f16) (cdddr . m4f15) (cddar . m4f14) (cdadr . m4f13) (cdaar . m4f12) (caddr . m4f11) (cadar . m4f10) (caadr . m4f0f) (caaar . m4f0e) (cddr . m4f0d) (cdar . m4f0c) (cadr . m4f0b) (caar . m4f0a) (cdr . m4f09) (car . m4f08) (boolean? . m4f07) (boolean=? . m4f06) (atan . m4f05) (assertion-violation . m4f04) (asin . m4f03) (apply . m4f02) (append . m4f01) (angle . m4f00) (acos . m4eff) (abs . m4efe) (/ . m4efd) (* . m4efc) (- . m4efb) (+ . m4efa) (>= . m4ef9) (> . m4ef8) (= . m4ef7) (<= . m4ef6) (< . m4ef5) (unquote-splicing . m4ec2) (unquote . m4ec1) (_ . m4ec0) (else . m4ebf) (=> . m4ebe) (... . m4ebd) (assert . m4ebc) (cond . m4eb7) (let* . m4eb6) (let . m4eb5) (let*-values . m4eb4) (let-values . m4eb3) (identifier-syntax . m4eb2) (quasiquote . m4eaf) (syntax-rules . m4eae) (case . m4ea9) (or . m4ea5) (and . m4ea4) (if . m4ea3) (letrec* . m4ea2) (letrec . m4ea1) (lambda . m4e9e) (quote . m4e9b) (letrec-syntax . m4e99) (let-syntax . m4e98) (set! . m4e97) (begin . m4e95) (define-syntax . m4e93) (define . m4e92)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5171 '(rnrs lists) '(6) '() '() '() '((remove . m506c) (remv . m506b) (remp . m506a) (remq . m5069) (partition . m5068) (memv . m5067) (memq . m5066) (memp . m5065) (member . m5064) (exists . m5063) (for-all . m5062) (fold-right . m5061) (fold-left . m5060) (find . m505f) (filter . m505e) (cons* . m505d) (assv . m505c) (assq . m505b) (assp . m505a) (assoc . m5059)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5172 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . m50c7) (call-with-input-file . m50c6) (write-char . m50c5) (write . m50c4) (with-output-to-file . m50c3) (with-input-from-file . m50c2) (read-char . m50c1) (read . m50c0) (peek-char . m50bf) (open-output-file . m50be) (open-input-file . m50bd) (newline . m50bc) (display . m50bb) (close-output-port . m50ba) (close-input-port . m50b9) (eof-object? . m50b8) (eof-object . m50b7) (current-error-port . m50b6) (current-output-port . m50b5) (current-input-port . m50b4) (output-port? . m50b3) (input-port? . m50b2) (make-i/o-write-error . m4b60) (make-i/o-read-error . m4b4b) (make-i/o-port-error . m4c01) (make-i/o-invalid-position-error . m4b77) (make-i/o-filename-error . m4b92) (make-i/o-file-protection-error . m4bab) (make-i/o-file-is-read-only-error . m4bc0) (make-i/o-file-does-not-exist-error . m4bea) (make-i/o-file-already-exists-error . m4bd5) (make-i/o-error . m4b36) (i/o-write-error? . m4b62) (i/o-read-error? . m4b4d) (i/o-port-error? . m4c05) (i/o-invalid-position-error? . m4b7b) (i/o-filename-error? . m4b96) (i/o-file-protection-error? . m4bad) (i/o-file-is-read-only-error? . m4bc2) (i/o-file-does-not-exist-error? . m4bec) (i/o-file-already-exists-error? . m4bd7) (i/o-error? . m4b38) (i/o-error-position . m4b7d) (i/o-error-port . m4c07) (i/o-error-filename . m4b98) (&i/o-port . m4eef) (&i/o-file-does-not-exist . m4eee) (&i/o-file-already-exists . m4eed) (&i/o-file-is-read-only . m4eec) (&i/o-file-protection . m4eeb) (&i/o-filename . m4eea) (&i/o-invalid-position . m4ee9) (&i/o-write . m4ee8) (&i/o-read . m4ee7) (&i/o . m4ee6)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5173 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . m5088) (utf32->string . m503d) (utf16->string . m503c) (utf8->string . m503b) (uint-list->bytevector . m503a) (u8-list->bytevector . m5039) (string->utf8 . m5038) (string->utf32 . m5037) (string->utf16 . m5036) (sint-list->bytevector . m5035) (native-endianness . m5034) (bytevector? . m5033) (bytevector=? . m5032) (bytevector-uint-set! . m5031) (bytevector-uint-ref . m5030) (bytevector-u8-set! . m502f) (bytevector-u8-ref . m502e) (bytevector-u64-set! . m502d) (bytevector-u64-ref . m502c) (bytevector-u64-native-set! . m502b) (bytevector-u64-native-ref . m502a) (bytevector-u32-set! . m5029) (bytevector-u32-ref . m5028) (bytevector-u32-native-set! . m5027) (bytevector-u32-native-ref . m5026) (bytevector-u16-set! . m5025) (bytevector-u16-ref . m5024) (bytevector-u16-native-set! . m5023) (bytevector-u16-native-ref . m5022) (bytevector-sint-set! . m5021) (bytevector-sint-ref . m5020) (bytevector-s8-set! . m501f) (bytevector-s8-ref . m501e) (bytevector-s64-set! . m501d) (bytevector-s64-ref . m501c) (bytevector-s64-native-set! . m501b) (bytevector-s64-native-ref . m501a) (bytevector-s32-set! . m5019) (bytevector-s32-ref . m5018) (bytevector-s32-native-set! . m5017) (bytevector-s32-native-ref . m5016) (bytevector-s16-set! . m5015) (bytevector-s16-ref . m5014) (bytevector-s16-native-set! . m5013) (bytevector-s16-native-ref . m5012) (bytevector-length . m5011) (bytevector-ieee-single-ref . m5010) (bytevector-ieee-single-set! . m500f) (bytevector-ieee-single-native-set! . m500e) (bytevector-ieee-single-native-ref . m500d) (bytevector-ieee-double-set! . m500c) (bytevector-ieee-double-ref . m500b) (bytevector-ieee-double-native-set! . m500a) (bytevector-ieee-double-native-ref . m5009) (bytevector-fill! . m5008) (bytevector-copy! . m5007) (bytevector-copy . m5006) (bytevector->uint-list . m5005) (bytevector->u8-list . m5004) (bytevector->sint-list . m5003) (endianness . m4ebb)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5174 '(rnrs unicode) '(6) '() '() '() '((string-upcase . m510f) (string-titlecase . m510e) (string-normalize-nfkd . m510d) (string-normalize-nfkc . m510c) (string-normalize-nfd . m510b) (string-normalize-nfc . m510a) (string-foldcase . m5109) (string-downcase . m5108) (string-ci>? . m5107) (string-ci>=? . m5106) (string-ci=? . m5105) (string-ci<? . m5104) (string-ci<=? . m5103) (char-whitespace? . m5102) (char-upper-case? . m5101) (char-title-case? . m5100) (char-numeric? . m50ff) (char-lower-case? . m50fe) (char-general-category . m50fd) (char-upcase . m50fc) (char-titlecase . m50fb) (char-foldcase . m50fa) (char-downcase . m50f9) (char-ci>? . m50f8) (char-ci>=? . m50f7) (char-ci=? . m50f6) (char-ci<? . m50f5) (char-ci<=? . m50f4) (char-alphabetic? . m50f3)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5175 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . m5052) (raise-continuable . m5051) (raise . m5050) (guard . m4ec7) (else . m4ebf) (=> . m4ebe)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5176 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . m4fa7) (bitwise-reverse-bit-field . m4fa6) (bitwise-length . m4fa5) (bitwise-if . m4fa4) (bitwise-first-bit-set . m4fa3) (bitwise-copy-bit-field . m4fa2) (bitwise-copy-bit . m4fa1) (bitwise-bit-set? . m4fa0) (bitwise-bit-field . m4f9f) (bitwise-bit-count . m4f9e) (bitwise-xor . m4f9d) (bitwise-ior . m4f9c) (bitwise-and . m4f9b) (bitwise-not . m4f9a) (bitwise-arithmetic-shift-right . m4f99) (bitwise-arithmetic-shift-left . m4f98) (bitwise-arithmetic-shift . m4f97)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5177 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . m4fd4) (fxxor . m4fd3) (fxrotate-bit-field . m4fd2) (fxreverse-bit-field . m4fd1) (fxpositive? . m4fd0) (fxodd? . m4fcf) (fxnot . m4fce) (fxnegative? . m4fcd) (fxmod0 . m4fcc) (fxmod . m4fcb) (fxmin . m4fca) (fxmax . m4fc9) (fxlength . m4fc8) (fxior . m4fc7) (fxif . m4fc6) (fxfirst-bit-set . m4fc5) (fxeven? . m4fc4) (fxdiv0-and-mod0 . m4fc3) (fxdiv0 . m4fc2) (fxdiv-and-mod . m4fc1) (fxdiv . m4fc0) (fxcopy-bit-field . m4fbf) (fxcopy-bit . m4fbe) (fxbit-set? . m4fbd) (fxbit-field . m4fbc) (fxbit-count . m4fbb) (fxarithmetic-shift-right . m4fba) (fxarithmetic-shift-left . m4fb9) (fxarithmetic-shift . m4fb8) (fxand . m4fb7) (fx>? . m4fb6) (fx>=? . m4fb5) (fx=? . m4fb4) (fx<? . m4fb3) (fx<=? . m4fb2) (fx-/carry . m4fb1) (fx- . m4fb0) (fx+/carry . m4faf) (fx+ . m4fae) (fx*/carry . m4fad) (fx* . m4fac) (greatest-fixnum . m4fab) (least-fixnum . m4faa) (fixnum-width . m4fa9) (fixnum? . m4fa8)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5178 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . m4c61) (no-infinities-violation? . m4c4c) (make-no-nans-violation . m4c5f) (make-no-infinities-violation . m4c4a) (real->flonum . m5002) (flzero? . m5001) (fltruncate . m5000) (fltan . m4fff) (flsqrt . m4ffe) (flsin . m4ffd) (flround . m4ffc) (flpositive? . m4ffb) (flonum? . m4ffa) (flodd? . m4ff9) (flnumerator . m4ff8) (flnegative? . m4ff7) (flnan? . m4ff6) (flmod0 . m4ff5) (flmod . m4ff4) (flmin . m4ff3) (flmax . m4ff2) (fllog . m4ff1) (flinteger? . m4ff0) (flinfinite? . m4fef) (flfloor . m4fee) (flfinite? . m4fed) (flexpt . m4fec) (flexp . m4feb) (fleven? . m4fea) (fldiv0-and-mod0 . m4fe9) (fldiv0 . m4fe8) (fldiv-and-mod . m4fe7) (fldiv . m4fe6) (fldenominator . m4fe5) (flcos . m4fe4) (flceiling . m4fe3) (flatan . m4fe2) (flasin . m4fe1) (flacos . m4fe0) (flabs . m4fdf) (fl>? . m4fde) (fl>=? . m4fdd) (fl=? . m4fdc) (fl<? . m4fdb) (fl<=? . m4fda) (fl/ . m4fd9) (fl- . m4fd8) (fl+ . m4fd7) (fl* . m4fd6) (fixnum->flonum . m4fd5) (&no-nans . m4ef3) (&no-infinities . m4ef2)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5179 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . m50dc) (string-ci-hash . m50db) (string-hash . m50da) (equal-hash . m50d9) (hashtable-equivalence-function . m50d8) (make-hashtable . m50d7) (hashtable-hash-function . m50d6) (make-eqv-hashtable . m50d5) (make-eq-hashtable . m50d4) (hashtable? . m50d3) (hashtable-update! . m50d2) (hashtable-size . m50d1) (hashtable-set! . m50d0) (hashtable-ref . m50cf) (hashtable-mutable? . m50ce) (hashtable-keys . m50cd) (hashtable-entries . m50cc) (hashtable-delete! . m50cb) (hashtable-copy . m50ca) (hashtable-contains? . m50c9) (hashtable-clear! . m50c8)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm517a '(rnrs io ports) '(6) '() '() '() '((eof-object? . m50b8) (eof-object . m50b7) (current-error-port . m50b6) (current-output-port . m50b5) (current-input-port . m50b4) (output-port? . m50b3) (input-port? . m50b2) (utf-8-codec . m50b1) (utf-16-codec . m50b0) (transcoder-error-handling-mode . m50af) (transcoder-eol-style . m50ae) (transcoder-codec . m50ad) (transcoded-port . m50ac) (textual-port? . m50ab) (string->bytevector . m50aa) (standard-output-port . m50a9) (standard-input-port . m50a8) (standard-error-port . m50a7) (set-port-position! . m50a6) (put-u8 . m50a5) (put-string . m50a4) (put-datum . m50a3) (put-char . m50a2) (put-bytevector . m50a1) (port? . m50a0) (port-transcoder . m509f) (port-position . m509e) (port-has-set-port-position!? . m509d) (port-has-port-position? . m509c) (port-eof? . m509b) (output-port-buffer-mode . m509a) (open-string-output-port . m5099) (open-string-input-port . m5098) (open-file-output-port . m5097) (open-file-input/output-port . m5096) (open-file-input-port . m5095) (open-bytevector-output-port . m5094) (open-bytevector-input-port . m5093) (native-transcoder . m5092) (native-eol-style . m5091) (make-transcoder . m5090) (latin-1-codec . m508f) (make-i/o-write-error . m4b60) (make-i/o-read-error . m4b4b) (make-i/o-port-error . m4c01) (make-i/o-invalid-position-error . m4b77) (make-i/o-filename-error . m4b92) (make-i/o-file-protection-error . m4bab) (make-i/o-file-is-read-only-error . m4bc0) (make-i/o-file-does-not-exist-error . m4bea) (make-i/o-file-already-exists-error . m4bd5) (make-i/o-error . m4b36) (make-i/o-encoding-error . m4c31) (make-i/o-decoding-error . m4c1a) (make-custom-textual-output-port . m508e) (make-custom-textual-input/output-port . m508d) (make-custom-textual-input-port . m508c) (make-custom-binary-output-port . m508b) (make-custom-binary-input/output-port . m508a) (make-custom-binary-input-port . m5089) (lookahead-u8 . m5087) (lookahead-char . m5086) (i/o-write-error? . m4b62) (i/o-read-error? . m4b4d) (i/o-port-error? . m4c05) (i/o-invalid-position-error? . m4b7b) (i/o-filename-error? . m4b96) (i/o-file-protection-error? . m4bad) (i/o-file-is-read-only-error? . m4bc2) (i/o-file-does-not-exist-error? . m4bec) (i/o-file-already-exists-error? . m4bd7) (i/o-error? . m4b38) (i/o-error-position . m4b7d) (i/o-error-port . m4c07) (i/o-error-filename . m4b98) (i/o-encoding-error? . m4c35) (i/o-encoding-error-char . m4c37) (i/o-decoding-error? . m4c1c) (get-u8 . m5085) (get-string-n! . m5084) (get-string-n . m5083) (get-string-all . m5082) (get-line . m5081) (get-datum . m5080) (get-char . m507f) (get-bytevector-some . m507e) (get-bytevector-n! . m507d) (get-bytevector-n . m507c) (get-bytevector-all . m507b) (flush-output-port . m507a) (close-port . m5079) (call-with-string-output-port . m5058) (call-with-port . m5057) (call-with-bytevector-output-port . m5056) (bytevector->string . m5055) (buffer-mode? . m5054) (binary-port? . m5053) (&i/o-encoding . m4ef1) (&i/o-decoding . m4ef0) (&i/o-port . m4eef) (&i/o-file-does-not-exist . m4eee) (&i/o-file-already-exists . m4eed) (&i/o-file-is-read-only . m4eec) (&i/o-file-protection . m4eeb) (&i/o-filename . m4eea) (&i/o-invalid-position . m4ee9) (&i/o-write . m4ee8) (&i/o-read . m4ee7) (&i/o . m4ee6) (error-handling-mode . m4ecb) (file-options . m4eca) (buffer-mode . m4ec9) (eol-style . m4ec8)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm517b '(rnrs enums) '(6) '() '() '() '((make-enumeration . m504f) (enum-set=? . m504e) (enum-set-universe . m504d) (enum-set-union . m504c) (enum-set-subset? . m504b) (enum-set-projection . m504a) (enum-set-member? . m5049) (enum-set-intersection . m5048) (enum-set-indexer . m5047) (enum-set-difference . m5046) (enum-set-constructor . m5045) (enum-set-complement . m5044) (enum-set->list . m5043) (define-enumeration . m4ed6)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm517c '(rnrs conditions) '(6) '() '() '() '((who-condition? . m4aac) (warning? . m4a24) (violation? . m4a63) (undefined-violation? . m4b23) (syntax-violation? . m4b0a) (syntax-violation-subform . m4b0e) (syntax-violation-form . m4b0c) (syntax-violation . m2f9e) (simple-conditions . m5042) (serious-condition? . m4a39) (non-continuable-violation? . m4ac3) (message-condition? . m4a0d) (make-who-condition . m4aa8) (make-warning . m4a22) (make-violation . m4a61) (make-undefined-violation . m4b21) (make-syntax-violation . m4b04) (make-serious-condition . m4a37) (make-non-continuable-violation . m4ac1) (make-message-condition . m4a09) (make-lexical-violation . m4aeb) (make-irritants-condition . m4a8d) (make-implementation-restriction-violation . m4ad6) (make-error . m4a4c) (make-assertion-violation . m4a76) (lexical-violation? . m4aed) (irritants-condition? . m4a91) (implementation-restriction-violation? . m4ad8) (error? . m4a4e) (condition-who . m4aae) (condition-predicate . m5041) (condition-message . m4a0f) (condition-irritants . m4a93) (condition-accessor . m5040) (condition . m503f) (assertion-violation? . m4a78) (condition? . m503e) (&undefined . m4ee5) (&syntax . m4ee4) (&lexical . m4ee3) (&implementation-restriction . m4ee2) (&non-continuable . m4ee1) (&who . m4ee0) (&irritants . m4edf) (&assertion . m4ede) (&violation . m4edd) (&error . m4edc) (&serious . m4edb) (&warning . m4eda) (&message . m4ed9) (&condition . m4ed8) (define-condition-type . m4ed7)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm517d '(rnrs records inspection) '(6) '() '() '() '((record? . m50eb) (record-type-uid . m50ea) (record-type-sealed? . m50e9) (record-type-parent . m50e8) (record-type-opaque? . m50e7) (record-type-name . m50e6) (record-type-generative? . m50e5) (record-type-field-names . m50e4) (record-rtd . m50e3) (record-field-mutable? . m50e2)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm517e '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . m50f2) (record-predicate . m50f1) (record-mutator . m50f0) (record-constructor . m50ef) (record-accessor . m50ee) (make-record-type-descriptor . m50ed) (make-record-constructor-descriptor . m50ec)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm517f '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . m4ed5) (parent-rtd . m4ed4) (nongenerative . m4ed3) (opaque . m4ed2) (sealed . m4ed1) (protocol . m4ed0) (parent . m4ecf) (immutable . m4ece) (mutable . m4ecd) (fields . m4ecc) (record-constructor-descriptor . m4eab) (record-type-descriptor . m4eaa)) '() values values '#f '#f '#t '#f) (m2acd@m296c@install-library 'm5180 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . m4c65) (&no-nans-rtd . m4c63) (&no-infinities-rcd . m4c50) (&no-infinities-rtd . m4c4e) (&i/o-encoding-rcd . m4c3b) (&i/o-encoding-rtd . m4c39) (&i/o-decoding-rcd . m4c20) (&i/o-decoding-rtd . m4c1e) (&i/o-port-rcd . m4c0b) (&i/o-port-rtd . m4c09) (&i/o-file-does-not-exist-rcd . m4bf0) (&i/o-file-does-not-exist-rtd . m4bee) (&i/o-file-already-exists-rcd . m4bdb) (&i/o-file-already-exists-rtd . m4bd9) (&i/o-file-is-read-only-rcd . m4bc6) (&i/o-file-is-read-only-rtd . m4bc4) (&i/o-file-protection-rcd . m4bb1) (&i/o-file-protection-rtd . m4baf) (&i/o-filename-rcd . m4b9c) (&i/o-filename-rtd . m4b9a) (&i/o-invalid-position-rcd . m4b81) (&i/o-invalid-position-rtd . m4b7f) (&i/o-write-rcd . m4b66) (&i/o-write-rtd . m4b64) (&i/o-read-rcd . m4b51) (&i/o-read-rtd . m4b4f) (&i/o-rcd . m4b3c) (&i/o-rtd . m4b3a) (&undefined-rcd . m4b27) (&undefined-rtd . m4b25) (&syntax-rcd . m4b12) (&syntax-rtd . m4b10) (&lexical-rcd . m4af1) (&lexical-rtd . m4aef) (&implementation-restriction-rcd . m4adc) (&implementation-restriction-rtd . m4ada) (&non-continuable-rcd . m4ac7) (&non-continuable-rtd . m4ac5) (&who-rcd . m4ab2) (&who-rtd . m4ab0) (&irritants-rcd . m4a97) (&irritants-rtd . m4a95) (&assertion-rcd . m4a7c) (&assertion-rtd . m4a7a) (&violation-rcd . m4a67) (&violation-rtd . m4a65) (&error-rcd . m4a52) (&error-rtd . m4a50) (&serious-rcd . m4a3d) (&serious-rtd . m4a3b) (&warning-rcd . m4a28) (&warning-rtd . m4a26) (&message-rcd . m4a13) (&message-rtd . m4a11) (&condition-rcd . m49b4) (&condition-rtd . m49b2) (syntax-error . m2f9a) (syntax-dispatch . m2eb5) (pretty-print . m5160) (eval-core . m515f) (set-symbol-value! . m515e) (symbol-value . m515d) (gensym . m515c) (void . m515b) (load . m4d72) (interaction-environment . m2faa) (char-ready? . m515a) (regexp? . m5159) (read-line . m5158) (ungensym . m5157) (alist->eq-hash-table . m5156) (assoc-ref . m5155) (print . m5154) (format . m5153) (host-os . m5152) (library-path . m294b) (standard-library-path . m5151) (file-newer? . m5150) (stat-mtime . m514f) (write-to-file . m514e) (file->list . m514d) (file->string . m514c) (digit->integer . m514b) (call-with-string-input-port . m514a) (call-with-string-io . m5149) (string-split . m5148) (bytevector-for-each . m5147) (string->regexp . m5146) (rxmatch . m5145) (regexp-replace-all . m5144) (hashtable-for-each . m5143) (call-process . m5142) (local-tz-offset . m5141) (microseconds . m5140) (readdir . m513f) (set-current-directory! . m513e) (expand-path . m513d) (current-directory . m513c) (%spawn . m513b) (%waitpid . m513a) (%ffi-supported? . m5139) (%ffi-pointer-ref . m5138) (%ffi-pointer->string . m5137) (%ffi-call->string-or-zero . m5136) (%ffi-call->double . m5135) (%ffi-call->void* . m5134) (%ffi-call->void . m5133) (%ffi-call->int . m5132) (%ffi-lookup . m5131) (%ffi-open . m5130) (%fork . m512f) (%pipe . m512e) (p . m512d) (open-output-string . m512c) (get-output-string . m512b) (get-environment-variables . m512a) (get-environment-variable . m5129) (get-timeofday . m5128) (get-command-line . m5127) (sys-display . m5126) (mosh-executable-path . m5125) (make-file-options . m5124) (source-info . m5123) (make-compiler-instruction . m5122) (make-instruction . m5121) (set-source-info! . m5120) (bignum? . m511f) (fast-equal? . m511e) (fasl-read . m511d) (fasl-write . m511c) (time-usage . m511b) (os-constant . m511a) (make-parameter . m277e) (socket-port . m5119) (socket-shutdown . m5118) (socket-close . m5117) (socket-send . m5116) (socket-recv! . m5115) (socket-recv . m5114) (make-server-socket . m5113) (make-client-socket . m5112) (socket-accept . m5111) (socket? . m5110) (string-upcase . m510f) (string-titlecase . m510e) (string-normalize-nfkd . m510d) (string-normalize-nfkc . m510c) (string-normalize-nfd . m510b) (string-normalize-nfc . m510a) (string-foldcase . m5109) (string-downcase . m5108) (string-ci>? . m5107) (string-ci>=? . m5106) (string-ci=? . m5105) (string-ci<? . m5104) (string-ci<=? . m5103) (char-whitespace? . m5102) (char-upper-case? . m5101) (char-title-case? . m5100) (char-numeric? . m50ff) (char-lower-case? . m50fe) (char-general-category . m50fd) (char-upcase . m50fc) (char-titlecase . m50fb) (char-foldcase . m50fa) (char-downcase . m50f9) (char-ci>? . m50f8) (char-ci>=? . m50f7) (char-ci=? . m50f6) (char-ci<? . m50f5) (char-ci<=? . m50f4) (char-alphabetic? . m50f3) (make-variable-transformer . m2ce2) (identifier? . m2fa0) (generate-temporaries . m2f8c) (free-identifier=? . m2f8e) (syntax->datum . m2fa4) (datum->syntax . m2fa2) (bound-identifier=? . m2f90) (record-type-descriptor? . m50f2) (record-predicate . m50f1) (record-mutator . m50f0) (record-constructor . m50ef) (record-accessor . m50ee) (make-record-type-descriptor . m50ed) (make-record-constructor-descriptor . m50ec) (record? . m50eb) (record-type-uid . m50ea) (record-type-sealed? . m50e9) (record-type-parent . m50e8) (record-type-opaque? . m50e7) (record-type-name . m50e6) (record-type-generative? . m50e5) (record-type-field-names . m50e4) (record-rtd . m50e3) (record-field-mutable? . m50e2) (delete-file . m50e1) (file-exists? . m50e0) (vector-sort! . m50df) (vector-sort . m50de) (list-sort . m50dd) (symbol-hash . m50dc) (string-ci-hash . m50db) (string-hash . m50da) (equal-hash . m50d9) (hashtable-equivalence-function . m50d8) (make-hashtable . m50d7) (hashtable-hash-function . m50d6) (make-eqv-hashtable . m50d5) (make-eq-hashtable . m50d4) (hashtable? . m50d3) (hashtable-update! . m50d2) (hashtable-size . m50d1) (hashtable-set! . m50d0) (hashtable-ref . m50cf) (hashtable-mutable? . m50ce) (hashtable-keys . m50cd) (hashtable-entries . m50cc) (hashtable-delete! . m50cb) (hashtable-copy . m50ca) (hashtable-contains? . m50c9) (hashtable-clear! . m50c8) (call-with-output-file . m50c7) (call-with-input-file . m50c6) (write-char . m50c5) (write . m50c4) (with-output-to-file . m50c3) (with-input-from-file . m50c2) (read-char . m50c1) (read . m50c0) (peek-char . m50bf) (open-output-file . m50be) (open-input-file . m50bd) (newline . m50bc) (display . m50bb) (close-output-port . m50ba) (close-input-port . m50b9) (eof-object? . m50b8) (eof-object . m50b7) (current-error-port . m50b6) (current-output-port . m50b5) (current-input-port . m50b4) (output-port? . m50b3) (input-port? . m50b2) (utf-8-codec . m50b1) (utf-16-codec . m50b0) (transcoder-error-handling-mode . m50af) (transcoder-eol-style . m50ae) (transcoder-codec . m50ad) (transcoded-port . m50ac) (textual-port? . m50ab) (string->bytevector . m50aa) (standard-output-port . m50a9) (standard-input-port . m50a8) (standard-error-port . m50a7) (set-port-position! . m50a6) (put-u8 . m50a5) (put-string . m50a4) (put-datum . m50a3) (put-char . m50a2) (put-bytevector . m50a1) (port? . m50a0) (port-transcoder . m509f) (port-position . m509e) (port-has-set-port-position!? . m509d) (port-has-port-position? . m509c) (port-eof? . m509b) (output-port-buffer-mode . m509a) (open-string-output-port . m5099) (open-string-input-port . m5098) (open-file-output-port . m5097) (open-file-input/output-port . m5096) (open-file-input-port . m5095) (open-bytevector-output-port . m5094) (open-bytevector-input-port . m5093) (native-transcoder . m5092) (native-eol-style . m5091) (make-transcoder . m5090) (latin-1-codec . m508f) (make-i/o-write-error . m4b60) (make-i/o-read-error . m4b4b) (make-i/o-port-error . m4c01) (make-i/o-invalid-position-error . m4b77) (make-i/o-filename-error . m4b92) (make-i/o-file-protection-error . m4bab) (make-i/o-file-is-read-only-error . m4bc0) (make-i/o-file-does-not-exist-error . m4bea) (make-i/o-file-already-exists-error . m4bd5) (make-i/o-error . m4b36) (make-i/o-encoding-error . m4c31) (make-i/o-decoding-error . m4c1a) (make-custom-textual-output-port . m508e) (make-custom-textual-input/output-port . m508d) (make-custom-textual-input-port . m508c) (make-custom-binary-output-port . m508b) (make-custom-binary-input/output-port . m508a) (make-custom-binary-input-port . m5089) (make-bytevector . m5088) (lookahead-u8 . m5087) (lookahead-char . m5086) (i/o-write-error? . m4b62) (i/o-read-error? . m4b4d) (i/o-port-error? . m4c05) (i/o-invalid-position-error? . m4b7b) (i/o-filename-error? . m4b96) (i/o-file-protection-error? . m4bad) (i/o-file-is-read-only-error? . m4bc2) (i/o-file-does-not-exist-error? . m4bec) (i/o-file-already-exists-error? . m4bd7) (i/o-error? . m4b38) (i/o-error-position . m4b7d) (i/o-error-port . m4c07) (i/o-error-filename . m4b98) (i/o-encoding-error? . m4c35) (i/o-encoding-error-char . m4c37) (i/o-decoding-error? . m4c1c) (get-u8 . m5085) (get-string-n! . m5084) (get-string-n . m5083) (get-string-all . m5082) (get-line . m5081) (get-datum . m5080) (get-char . m507f) (get-bytevector-some . m507e) (get-bytevector-n! . m507d) (get-bytevector-n . m507c) (get-bytevector-all . m507b) (flush-output-port . m507a) (close-port . m5079) (scheme-report-environment . m2f7a) (quotient . m5078) (null-environment . m2f78) (remainder . m5077) (modulo . m5076) (inexact->exact . m5075) (force . m5074) (exact->inexact . m5073) (make-promise . m5072) (exit . m5071) (command-line . m4d6c) (string-fill! . m5070) (string-set! . m506f) (set-cdr! . m506e) (set-car! . m506d) (remove . m506c) (remv . m506b) (remp . m506a) (remq . m5069) (partition . m5068) (memv . m5067) (memq . m5066) (memp . m5065) (member . m5064) (exists . m5063) (for-all . m5062) (fold-right . m5061) (fold-left . m5060) (find . m505f) (filter . m505e) (cons* . m505d) (assv . m505c) (assq . m505b) (assp . m505a) (assoc . m5059) (call-with-string-output-port . m5058) (call-with-port . m5057) (call-with-bytevector-output-port . m5056) (bytevector->string . m5055) (buffer-mode? . m5054) (binary-port? . m5053) (with-exception-handler . m5052) (raise-continuable . m5051) (raise . m5050) (eval . m2f7e) (environment . m2f76) (make-enumeration . m504f) (enum-set=? . m504e) (enum-set-universe . m504d) (enum-set-union . m504c) (enum-set-subset? . m504b) (enum-set-projection . m504a) (enum-set-member? . m5049) (enum-set-intersection . m5048) (enum-set-indexer . m5047) (enum-set-difference . m5046) (enum-set-constructor . m5045) (enum-set-complement . m5044) (enum-set->list . m5043) (who-condition? . m4aac) (warning? . m4a24) (violation? . m4a63) (undefined-violation? . m4b23) (syntax-violation? . m4b0a) (syntax-violation-subform . m4b0e) (syntax-violation-form . m4b0c) (syntax-violation . m2f9e) (simple-conditions . m5042) (serious-condition? . m4a39) (non-continuable-violation? . m4ac3) (message-condition? . m4a0d) (make-who-condition . m4aa8) (make-warning . m4a22) (make-violation . m4a61) (make-undefined-violation . m4b21) (make-syntax-violation . m4b04) (make-serious-condition . m4a37) (make-non-continuable-violation . m4ac1) (make-message-condition . m4a09) (make-lexical-violation . m4aeb) (make-irritants-condition . m4a8d) (make-implementation-restriction-violation . m4ad6) (make-error . m4a4c) (make-assertion-violation . m4a76) (lexical-violation? . m4aed) (irritants-condition? . m4a91) (implementation-restriction-violation? . m4ad8) (error? . m4a4e) (condition-who . m4aae) (condition-predicate . m5041) (condition-message . m4a0f) (condition-irritants . m4a93) (condition-accessor . m5040) (condition . m503f) (assertion-violation? . m4a78) (condition? . m503e) (utf32->string . m503d) (utf16->string . m503c) (utf8->string . m503b) (uint-list->bytevector . m503a) (u8-list->bytevector . m5039) (string->utf8 . m5038) (string->utf32 . m5037) (string->utf16 . m5036) (sint-list->bytevector . m5035) (native-endianness . m5034) (bytevector? . m5033) (bytevector=? . m5032) (bytevector-uint-set! . m5031) (bytevector-uint-ref . m5030) (bytevector-u8-set! . m502f) (bytevector-u8-ref . m502e) (bytevector-u64-set! . m502d) (bytevector-u64-ref . m502c) (bytevector-u64-native-set! . m502b) (bytevector-u64-native-ref . m502a) (bytevector-u32-set! . m5029) (bytevector-u32-ref . m5028) (bytevector-u32-native-set! . m5027) (bytevector-u32-native-ref . m5026) (bytevector-u16-set! . m5025) (bytevector-u16-ref . m5024) (bytevector-u16-native-set! . m5023) (bytevector-u16-native-ref . m5022) (bytevector-sint-set! . m5021) (bytevector-sint-ref . m5020) (bytevector-s8-set! . m501f) (bytevector-s8-ref . m501e) (bytevector-s64-set! . m501d) (bytevector-s64-ref . m501c) (bytevector-s64-native-set! . m501b) (bytevector-s64-native-ref . m501a) (bytevector-s32-set! . m5019) (bytevector-s32-ref . m5018) (bytevector-s32-native-set! . m5017) (bytevector-s32-native-ref . m5016) (bytevector-s16-set! . m5015) (bytevector-s16-ref . m5014) (bytevector-s16-native-set! . m5013) (bytevector-s16-native-ref . m5012) (bytevector-length . m5011) (bytevector-ieee-single-ref . m5010) (bytevector-ieee-single-set! . m500f) (bytevector-ieee-single-native-set! . m500e) (bytevector-ieee-single-native-ref . m500d) (bytevector-ieee-double-set! . m500c) (bytevector-ieee-double-ref . m500b) (bytevector-ieee-double-native-set! . m500a) (bytevector-ieee-double-native-ref . m5009) (bytevector-fill! . m5008) (bytevector-copy! . m5007) (bytevector-copy . m5006) (bytevector->uint-list . m5005) (bytevector->u8-list . m5004) (bytevector->sint-list . m5003) (no-nans-violation? . m4c61) (no-infinities-violation? . m4c4c) (make-no-nans-violation . m4c5f) (make-no-infinities-violation . m4c4a) (real->flonum . m5002) (flzero? . m5001) (fltruncate . m5000) (fltan . m4fff) (flsqrt . m4ffe) (flsin . m4ffd) (flround . m4ffc) (flpositive? . m4ffb) (flonum? . m4ffa) (flodd? . m4ff9) (flnumerator . m4ff8) (flnegative? . m4ff7) (flnan? . m4ff6) (flmod0 . m4ff5) (flmod . m4ff4) (flmin . m4ff3) (flmax . m4ff2) (fllog . m4ff1) (flinteger? . m4ff0) (flinfinite? . m4fef) (flfloor . m4fee) (flfinite? . m4fed) (flexpt . m4fec) (flexp . m4feb) (fleven? . m4fea) (fldiv0-and-mod0 . m4fe9) (fldiv0 . m4fe8) (fldiv-and-mod . m4fe7) (fldiv . m4fe6) (fldenominator . m4fe5) (flcos . m4fe4) (flceiling . m4fe3) (flatan . m4fe2) (flasin . m4fe1) (flacos . m4fe0) (flabs . m4fdf) (fl>? . m4fde) (fl>=? . m4fdd) (fl=? . m4fdc) (fl<? . m4fdb) (fl<=? . m4fda) (fl/ . m4fd9) (fl- . m4fd8) (fl+ . m4fd7) (fl* . m4fd6) (fixnum->flonum . m4fd5) (fxzero? . m4fd4) (fxxor . m4fd3) (fxrotate-bit-field . m4fd2) (fxreverse-bit-field . m4fd1) (fxpositive? . m4fd0) (fxodd? . m4fcf) (fxnot . m4fce) (fxnegative? . m4fcd) (fxmod0 . m4fcc) (fxmod . m4fcb) (fxmin . m4fca) (fxmax . m4fc9) (fxlength . m4fc8) (fxior . m4fc7) (fxif . m4fc6) (fxfirst-bit-set . m4fc5) (fxeven? . m4fc4) (fxdiv0-and-mod0 . m4fc3) (fxdiv0 . m4fc2) (fxdiv-and-mod . m4fc1) (fxdiv . m4fc0) (fxcopy-bit-field . m4fbf) (fxcopy-bit . m4fbe) (fxbit-set? . m4fbd) (fxbit-field . m4fbc) (fxbit-count . m4fbb) (fxarithmetic-shift-right . m4fba) (fxarithmetic-shift-left . m4fb9) (fxarithmetic-shift . m4fb8) (fxand . m4fb7) (fx>? . m4fb6) (fx>=? . m4fb5) (fx=? . m4fb4) (fx<? . m4fb3) (fx<=? . m4fb2) (fx-/carry . m4fb1) (fx- . m4fb0) (fx+/carry . m4faf) (fx+ . m4fae) (fx*/carry . m4fad) (fx* . m4fac) (greatest-fixnum . m4fab) (least-fixnum . m4faa) (fixnum-width . m4fa9) (fixnum? . m4fa8) (bitwise-rotate-bit-field . m4fa7) (bitwise-reverse-bit-field . m4fa6) (bitwise-length . m4fa5) (bitwise-if . m4fa4) (bitwise-first-bit-set . m4fa3) (bitwise-copy-bit-field . m4fa2) (bitwise-copy-bit . m4fa1) (bitwise-bit-set? . m4fa0) (bitwise-bit-field . m4f9f) (bitwise-bit-count . m4f9e) (bitwise-xor . m4f9d) (bitwise-ior . m4f9c) (bitwise-and . m4f9b) (bitwise-not . m4f9a) (bitwise-arithmetic-shift-right . m4f99) (bitwise-arithmetic-shift-left . m4f98) (bitwise-arithmetic-shift . m4f97) (zero? . m4f96) (vector? . m4f95) (vector-set! . m4f94) (vector-ref . m4f93) (vector-map . m4f92) (vector-length . m4f91) (vector-for-each . m4f90) (vector-fill! . m4f8f) (vector->list . m4f8e) (vector . m4f8d) (values . m4f8c) (truncate . m4f8b) (tan . m4f8a) (symbol? . m4f89) (symbol=? . m4f88) (symbol->string . m4f87) (substring . m4f86) (string? . m4f85) (string>? . m4f84) (string>=? . m4f83) (string=? . m4f82) (string<? . m4f81) (string<=? . m4f80) (string-ref . m4f7f) (string-length . m4f7e) (string-for-each . m4f7d) (string-copy . m4f7c) (string-append . m4f7b) (string->symbol . m4f7a) (string->number . m4f79) (string->list . m4f78) (string . m4f77) (sqrt . m4f76) (sin . m4f75) (round . m4f74) (reverse . m4f73) (real? . m4f72) (real-valued? . m4f71) (real-part . m4f70) (rationalize . m4f6f) (rational? . m4f6e) (rational-valued? . m4f6d) (procedure? . m4f6c) (positive? . m4f6b) (pair? . m4f6a) (odd? . m4f69) (numerator . m4f68) (number? . m4f67) (number->string . m4f66) (null? . m4f65) (not . m4f64) (negative? . m4f63) (nan? . m4f62) (min . m4f61) (max . m4f60) (map . m4f5f) (make-vector . m4f5e) (make-string . m4f5d) (make-rectangular . m4f5c) (make-polar . m4f5b) (magnitude . m4f5a) (log . m4f59) (list? . m4f58) (list-tail . m4f57) (list-ref . m4f56) (list->vector . m4f55) (list->string . m4f54) (list . m4f53) (length . m4f52) (lcm . m4f51) (integer? . m4f50) (integer-valued? . m4f4f) (integer->char . m4f4e) (infinite? . m4f4d) (inexact? . m4f4c) (inexact . m4f4b) (imag-part . m4f4a) (gcd . m4f49) (for-each . m4f48) (floor . m4f47) (finite? . m4f46) (expt . m4f45) (exp . m4f44) (exact? . m4f43) (exact-integer-sqrt . m4f42) (exact . m4f41) (even? . m4f40) (error . m4f3f) (eqv? . m4f3e) (equal? . m4f3d) (eq? . m4f3c) (dynamic-wind . m4f3b) (div0-and-mod0 . m4f3a) (mod0 . m4f39) (div0 . m4f38) (div-and-mod . m4f37) (mod . m4f36) (div . m4f35) (denominator . m4f34) (cos . m4f33) (cons . m4f32) (complex? . m4f31) (char? . m4f30) (char>? . m4f2f) (char>=? . m4f2e) (char=? . m4f2d) (char<? . m4f2c) (char<=? . m4f2b) (char->integer . m4f2a) (ceiling . m4f29) (call-with-values . m4f28) (call/cc . m4f27) (call-with-current-continuation . m4f26) (cddddr . m4f25) (cdddar . m4f24) (cddadr . m4f23) (cddaar . m4f22) (cdaddr . m4f21) (cdadar . m4f20) (cdaadr . m4f1f) (cdaaar . m4f1e) (cadddr . m4f1d) (caddar . m4f1c) (cadadr . m4f1b) (cadaar . m4f1a) (caaddr . m4f19) (caadar . m4f18) (caaadr . m4f17) (caaaar . m4f16) (cdddr . m4f15) (cddar . m4f14) (cdadr . m4f13) (cdaar . m4f12) (caddr . m4f11) (cadar . m4f10) (caadr . m4f0f) (caaar . m4f0e) (cddr . m4f0d) (cdar . m4f0c) (cadr . m4f0b) (caar . m4f0a) (cdr . m4f09) (car . m4f08) (boolean? . m4f07) (boolean=? . m4f06) (atan . m4f05) (assertion-violation . m4f04) (assertion-error . m2f98) (asin . m4f03) (apply . m4f02) (append . m4f01) (angle . m4f00) (acos . m4eff) (abs . m4efe) (/ . m4efd) (* . m4efc) (- . m4efb) (+ . m4efa) (>= . m4ef9) (> . m4ef8) (= . m4ef7) (<= . m4ef6) (< . m4ef5) (library . m4ef4) (&no-nans . m4ef3) (&no-infinities . m4ef2) (&i/o-encoding . m4ef1) (&i/o-decoding . m4ef0) (&i/o-port . m4eef) (&i/o-file-does-not-exist . m4eee) (&i/o-file-already-exists . m4eed) (&i/o-file-is-read-only . m4eec) (&i/o-file-protection . m4eeb) (&i/o-filename . m4eea) (&i/o-invalid-position . m4ee9) (&i/o-write . m4ee8) (&i/o-read . m4ee7) (&i/o . m4ee6) (&undefined . m4ee5) (&syntax . m4ee4) (&lexical . m4ee3) (&implementation-restriction . m4ee2) (&non-continuable . m4ee1) (&who . m4ee0) (&irritants . m4edf) (&assertion . m4ede) (&violation . m4edd) (&error . m4edc) (&serious . m4edb) (&warning . m4eda) (&message . m4ed9) (&condition . m4ed8) (define-condition-type . m4ed7) (define-enumeration . m4ed6) (define-record-type . m4ed5) (parent-rtd . m4ed4) (nongenerative . m4ed3) (opaque . m4ed2) (sealed . m4ed1) (protocol . m4ed0) (parent . m4ecf) (immutable . m4ece) (mutable . m4ecd) (fields . m4ecc) (error-handling-mode . m4ecb) (file-options . m4eca) (buffer-mode . m4ec9) (eol-style . m4ec8) (guard . m4ec7) (trace-define . m4ec6) (trace-lambda . m4ec5) (unsyntax-splicing . m4ec4) (unsyntax . m4ec3) (unquote-splicing . m4ec2) (unquote . m4ec1) (_ . m4ec0) (else . m4ebf) (=> . m4ebe) (... . m4ebd) (assert . m4ebc) (endianness . m4ebb) (delay . m4eba) (time . m4eb9) (do . m4eb8) (cond . m4eb7) (let* . m4eb6) (let . m4eb5) (let*-values . m4eb4) (let-values . m4eb3) (identifier-syntax . m4eb2) (with-syntax . m4eb1) (quasisyntax . m4eb0) (quasiquote . m4eaf) (syntax-rules . m4eae) (include . m4ead) (define-struct . m4eac) (record-constructor-descriptor . m4eab) (record-type-descriptor . m4eaa) (case . m4ea9) (parameterize . m4ea8) (unless . m4ea7) (when . m4ea6) (or . m4ea5) (and . m4ea4) (if . m4ea3) (letrec* . m4ea2) (letrec . m4ea1) (type-descriptor . m4ea0) (case-lambda . m4e9f) (lambda . m4e9e) (syntax . m4e9d) (syntax-case . m4e9c) (quote . m4e9b) (foreign-call . m4e9a) (letrec-syntax . m4e99) (let-syntax . m4e98) (set! . m4e97) (import . m4e96) (begin . m4e95) (module . m4e94) (define-syntax . m4e93) (define . m4e92)) '((m4c65 core-prim . &no-nans-rcd) (m4c63 core-prim . &no-nans-rtd) (m4c50 core-prim . &no-infinities-rcd) (m4c4e core-prim . &no-infinities-rtd) (m4c3b core-prim . &i/o-encoding-rcd) (m4c39 core-prim . &i/o-encoding-rtd) (m4c20 core-prim . &i/o-decoding-rcd) (m4c1e core-prim . &i/o-decoding-rtd) (m4c0b core-prim . &i/o-port-rcd) (m4c09 core-prim . &i/o-port-rtd) (m4bf0 core-prim . &i/o-file-does-not-exist-rcd) (m4bee core-prim . &i/o-file-does-not-exist-rtd) (m4bdb core-prim . &i/o-file-already-exists-rcd) (m4bd9 core-prim . &i/o-file-already-exists-rtd) (m4bc6 core-prim . &i/o-file-is-read-only-rcd) (m4bc4 core-prim . &i/o-file-is-read-only-rtd) (m4bb1 core-prim . &i/o-file-protection-rcd) (m4baf core-prim . &i/o-file-protection-rtd) (m4b9c core-prim . &i/o-filename-rcd) (m4b9a core-prim . &i/o-filename-rtd) (m4b81 core-prim . &i/o-invalid-position-rcd) (m4b7f core-prim . &i/o-invalid-position-rtd) (m4b66 core-prim . &i/o-write-rcd) (m4b64 core-prim . &i/o-write-rtd) (m4b51 core-prim . &i/o-read-rcd) (m4b4f core-prim . &i/o-read-rtd) (m4b3c core-prim . &i/o-rcd) (m4b3a core-prim . &i/o-rtd) (m4b27 core-prim . &undefined-rcd) (m4b25 core-prim . &undefined-rtd) (m4b12 core-prim . &syntax-rcd) (m4b10 core-prim . &syntax-rtd) (m4af1 core-prim . &lexical-rcd) (m4aef core-prim . &lexical-rtd) (m4adc core-prim . &implementation-restriction-rcd) (m4ada core-prim . &implementation-restriction-rtd) (m4ac7 core-prim . &non-continuable-rcd) (m4ac5 core-prim . &non-continuable-rtd) (m4ab2 core-prim . &who-rcd) (m4ab0 core-prim . &who-rtd) (m4a97 core-prim . &irritants-rcd) (m4a95 core-prim . &irritants-rtd) (m4a7c core-prim . &assertion-rcd) (m4a7a core-prim . &assertion-rtd) (m4a67 core-prim . &violation-rcd) (m4a65 core-prim . &violation-rtd) (m4a52 core-prim . &error-rcd) (m4a50 core-prim . &error-rtd) (m4a3d core-prim . &serious-rcd) (m4a3b core-prim . &serious-rtd) (m4a28 core-prim . &warning-rcd) (m4a26 core-prim . &warning-rtd) (m4a13 core-prim . &message-rcd) (m4a11 core-prim . &message-rtd) (m49b4 core-prim . &condition-rcd) (m49b2 core-prim . &condition-rtd) (m2f9a core-prim . syntax-error) (m2eb5 core-prim . syntax-dispatch) (m5160 core-prim . pretty-print) (m515f core-prim . eval-core) (m515e core-prim . set-symbol-value!) (m515d core-prim . symbol-value) (m515c core-prim . gensym) (m515b core-prim . void) (m4d72 core-prim . load) (m2faa core-prim . interaction-environment) (m515a core-prim . char-ready?) (m5159 core-prim . regexp?) (m5158 core-prim . read-line) (m5157 core-prim . ungensym) (m5156 core-prim . alist->eq-hash-table) (m5155 core-prim . assoc-ref) (m5154 core-prim . print) (m5153 core-prim . format) (m5152 core-prim . host-os) (m294b core-prim . library-path) (m5151 core-prim . standard-library-path) (m5150 core-prim . file-newer?) (m514f core-prim . stat-mtime) (m514e core-prim . write-to-file) (m514d core-prim . file->list) (m514c core-prim . file->string) (m514b core-prim . digit->integer) (m514a core-prim . call-with-string-input-port) (m5149 core-prim . call-with-string-io) (m5148 core-prim . string-split) (m5147 core-prim . bytevector-for-each) (m5146 core-prim . string->regexp) (m5145 core-prim . rxmatch) (m5144 core-prim . regexp-replace-all) (m5143 core-prim . hashtable-for-each) (m5142 core-prim . call-process) (m5141 core-prim . local-tz-offset) (m5140 core-prim . microseconds) (m513f core-prim . readdir) (m513e core-prim . set-current-directory!) (m513d core-prim . expand-path) (m513c core-prim . current-directory) (m513b core-prim . %spawn) (m513a core-prim . %waitpid) (m5139 core-prim . %ffi-supported?) (m5138 core-prim . %ffi-pointer-ref) (m5137 core-prim . %ffi-pointer->string) (m5136 core-prim . %ffi-call->string-or-zero) (m5135 core-prim . %ffi-call->double) (m5134 core-prim . %ffi-call->void*) (m5133 core-prim . %ffi-call->void) (m5132 core-prim . %ffi-call->int) (m5131 core-prim . %ffi-lookup) (m5130 core-prim . %ffi-open) (m512f core-prim . %fork) (m512e core-prim . %pipe) (m512d core-prim . p) (m512c core-prim . open-output-string) (m512b core-prim . get-output-string) (m512a core-prim . get-environment-variables) (m5129 core-prim . get-environment-variable) (m5128 core-prim . get-timeofday) (m5127 core-prim . get-command-line) (m5126 core-prim . sys-display) (m5125 core-prim . mosh-executable-path) (m5124 core-prim . make-file-options) (m5123 core-prim . source-info) (m5122 core-prim . make-compiler-instruction) (m5121 core-prim . make-instruction) (m5120 core-prim . set-source-info!) (m511f core-prim . bignum?) (m511e core-prim . fast-equal?) (m511d core-prim . fasl-read) (m511c core-prim . fasl-write) (m511b core-prim . time-usage) (m511a core-prim . os-constant) (m277e core-prim . make-parameter) (m5119 core-prim . socket-port) (m5118 core-prim . socket-shutdown) (m5117 core-prim . socket-close) (m5116 core-prim . socket-send) (m5115 core-prim . socket-recv!) (m5114 core-prim . socket-recv) (m5113 core-prim . make-server-socket) (m5112 core-prim . make-client-socket) (m5111 core-prim . socket-accept) (m5110 core-prim . socket?) (m510f core-prim . string-upcase) (m510e core-prim . string-titlecase) (m510d core-prim . string-normalize-nfkd) (m510c core-prim . string-normalize-nfkc) (m510b core-prim . string-normalize-nfd) (m510a core-prim . string-normalize-nfc) (m5109 core-prim . string-foldcase) (m5108 core-prim . string-downcase) (m5107 core-prim . string-ci>?) (m5106 core-prim . string-ci>=?) (m5105 core-prim . string-ci=?) (m5104 core-prim . string-ci<?) (m5103 core-prim . string-ci<=?) (m5102 core-prim . char-whitespace?) (m5101 core-prim . char-upper-case?) (m5100 core-prim . char-title-case?) (m50ff core-prim . char-numeric?) (m50fe core-prim . char-lower-case?) (m50fd core-prim . char-general-category) (m50fc core-prim . char-upcase) (m50fb core-prim . char-titlecase) (m50fa core-prim . char-foldcase) (m50f9 core-prim . char-downcase) (m50f8 core-prim . char-ci>?) (m50f7 core-prim . char-ci>=?) (m50f6 core-prim . char-ci=?) (m50f5 core-prim . char-ci<?) (m50f4 core-prim . char-ci<=?) (m50f3 core-prim . char-alphabetic?) (m2ce2 core-prim . make-variable-transformer) (m2fa0 core-prim . identifier?) (m2f8c core-prim . generate-temporaries) (m2f8e core-prim . free-identifier=?) (m2fa4 core-prim . syntax->datum) (m2fa2 core-prim . datum->syntax) (m2f90 core-prim . bound-identifier=?) (m50f2 core-prim . record-type-descriptor?) (m50f1 core-prim . record-predicate) (m50f0 core-prim . record-mutator) (m50ef core-prim . record-constructor) (m50ee core-prim . record-accessor) (m50ed core-prim . make-record-type-descriptor) (m50ec core-prim . make-record-constructor-descriptor) (m50eb core-prim . record?) (m50ea core-prim . record-type-uid) (m50e9 core-prim . record-type-sealed?) (m50e8 core-prim . record-type-parent) (m50e7 core-prim . record-type-opaque?) (m50e6 core-prim . record-type-name) (m50e5 core-prim . record-type-generative?) (m50e4 core-prim . record-type-field-names) (m50e3 core-prim . record-rtd) (m50e2 core-prim . record-field-mutable?) (m50e1 core-prim . delete-file) (m50e0 core-prim . file-exists?) (m50df core-prim . vector-sort!) (m50de core-prim . vector-sort) (m50dd core-prim . list-sort) (m50dc core-prim . symbol-hash) (m50db core-prim . string-ci-hash) (m50da core-prim . string-hash) (m50d9 core-prim . equal-hash) (m50d8 core-prim . hashtable-equivalence-function) (m50d7 core-prim . make-hashtable) (m50d6 core-prim . hashtable-hash-function) (m50d5 core-prim . make-eqv-hashtable) (m50d4 core-prim . make-eq-hashtable) (m50d3 core-prim . hashtable?) (m50d2 core-prim . hashtable-update!) (m50d1 core-prim . hashtable-size) (m50d0 core-prim . hashtable-set!) (m50cf core-prim . hashtable-ref) (m50ce core-prim . hashtable-mutable?) (m50cd core-prim . hashtable-keys) (m50cc core-prim . hashtable-entries) (m50cb core-prim . hashtable-delete!) (m50ca core-prim . hashtable-copy) (m50c9 core-prim . hashtable-contains?) (m50c8 core-prim . hashtable-clear!) (m50c7 core-prim . call-with-output-file) (m50c6 core-prim . call-with-input-file) (m50c5 core-prim . write-char) (m50c4 core-prim . write) (m50c3 core-prim . with-output-to-file) (m50c2 core-prim . with-input-from-file) (m50c1 core-prim . read-char) (m50c0 core-prim . read) (m50bf core-prim . peek-char) (m50be core-prim . open-output-file) (m50bd core-prim . open-input-file) (m50bc core-prim . newline) (m50bb core-prim . display) (m50ba core-prim . close-output-port) (m50b9 core-prim . close-input-port) (m50b8 core-prim . eof-object?) (m50b7 core-prim . eof-object) (m50b6 core-prim . current-error-port) (m50b5 core-prim . current-output-port) (m50b4 core-prim . current-input-port) (m50b3 core-prim . output-port?) (m50b2 core-prim . input-port?) (m50b1 core-prim . utf-8-codec) (m50b0 core-prim . utf-16-codec) (m50af core-prim . transcoder-error-handling-mode) (m50ae core-prim . transcoder-eol-style) (m50ad core-prim . transcoder-codec) (m50ac core-prim . transcoded-port) (m50ab core-prim . textual-port?) (m50aa core-prim . string->bytevector) (m50a9 core-prim . standard-output-port) (m50a8 core-prim . standard-input-port) (m50a7 core-prim . standard-error-port) (m50a6 core-prim . set-port-position!) (m50a5 core-prim . put-u8) (m50a4 core-prim . put-string) (m50a3 core-prim . put-datum) (m50a2 core-prim . put-char) (m50a1 core-prim . put-bytevector) (m50a0 core-prim . port?) (m509f core-prim . port-transcoder) (m509e core-prim . port-position) (m509d core-prim . port-has-set-port-position!?) (m509c core-prim . port-has-port-position?) (m509b core-prim . port-eof?) (m509a core-prim . output-port-buffer-mode) (m5099 core-prim . open-string-output-port) (m5098 core-prim . open-string-input-port) (m5097 core-prim . open-file-output-port) (m5096 core-prim . open-file-input/output-port) (m5095 core-prim . open-file-input-port) (m5094 core-prim . open-bytevector-output-port) (m5093 core-prim . open-bytevector-input-port) (m5092 core-prim . native-transcoder) (m5091 core-prim . native-eol-style) (m5090 core-prim . make-transcoder) (m508f core-prim . latin-1-codec) (m4b60 core-prim . make-i/o-write-error) (m4b4b core-prim . make-i/o-read-error) (m4c01 core-prim . make-i/o-port-error) (m4b77 core-prim . make-i/o-invalid-position-error) (m4b92 core-prim . make-i/o-filename-error) (m4bab core-prim . make-i/o-file-protection-error) (m4bc0 core-prim . make-i/o-file-is-read-only-error) (m4bea core-prim . make-i/o-file-does-not-exist-error) (m4bd5 core-prim . make-i/o-file-already-exists-error) (m4b36 core-prim . make-i/o-error) (m4c31 core-prim . make-i/o-encoding-error) (m4c1a core-prim . make-i/o-decoding-error) (m508e core-prim . make-custom-textual-output-port) (m508d core-prim . make-custom-textual-input/output-port) (m508c core-prim . make-custom-textual-input-port) (m508b core-prim . make-custom-binary-output-port) (m508a core-prim . make-custom-binary-input/output-port) (m5089 core-prim . make-custom-binary-input-port) (m5088 core-prim . make-bytevector) (m5087 core-prim . lookahead-u8) (m5086 core-prim . lookahead-char) (m4b62 core-prim . i/o-write-error?) (m4b4d core-prim . i/o-read-error?) (m4c05 core-prim . i/o-port-error?) (m4b7b core-prim . i/o-invalid-position-error?) (m4b96 core-prim . i/o-filename-error?) (m4bad core-prim . i/o-file-protection-error?) (m4bc2 core-prim . i/o-file-is-read-only-error?) (m4bec core-prim . i/o-file-does-not-exist-error?) (m4bd7 core-prim . i/o-file-already-exists-error?) (m4b38 core-prim . i/o-error?) (m4b7d core-prim . i/o-error-position) (m4c07 core-prim . i/o-error-port) (m4b98 core-prim . i/o-error-filename) (m4c35 core-prim . i/o-encoding-error?) (m4c37 core-prim . i/o-encoding-error-char) (m4c1c core-prim . i/o-decoding-error?) (m5085 core-prim . get-u8) (m5084 core-prim . get-string-n!) (m5083 core-prim . get-string-n) (m5082 core-prim . get-string-all) (m5081 core-prim . get-line) (m5080 core-prim . get-datum) (m507f core-prim . get-char) (m507e core-prim . get-bytevector-some) (m507d core-prim . get-bytevector-n!) (m507c core-prim . get-bytevector-n) (m507b core-prim . get-bytevector-all) (m507a core-prim . flush-output-port) (m5079 core-prim . close-port) (m2f7a core-prim . scheme-report-environment) (m5078 core-prim . quotient) (m2f78 core-prim . null-environment) (m5077 core-prim . remainder) (m5076 core-prim . modulo) (m5075 core-prim . inexact->exact) (m5074 core-prim . force) (m5073 core-prim . exact->inexact) (m5072 core-prim . make-promise) (m5071 core-prim . exit) (m4d6c core-prim . command-line) (m5070 core-prim . string-fill!) (m506f core-prim . string-set!) (m506e core-prim . set-cdr!) (m506d core-prim . set-car!) (m506c core-prim . remove) (m506b core-prim . remv) (m506a core-prim . remp) (m5069 core-prim . remq) (m5068 core-prim . partition) (m5067 core-prim . memv) (m5066 core-prim . memq) (m5065 core-prim . memp) (m5064 core-prim . member) (m5063 core-prim . exists) (m5062 core-prim . for-all) (m5061 core-prim . fold-right) (m5060 core-prim . fold-left) (m505f core-prim . find) (m505e core-prim . filter) (m505d core-prim . cons*) (m505c core-prim . assv) (m505b core-prim . assq) (m505a core-prim . assp) (m5059 core-prim . assoc) (m5058 core-prim . call-with-string-output-port) (m5057 core-prim . call-with-port) (m5056 core-prim . call-with-bytevector-output-port) (m5055 core-prim . bytevector->string) (m5054 core-prim . buffer-mode?) (m5053 core-prim . binary-port?) (m5052 core-prim . with-exception-handler) (m5051 core-prim . raise-continuable) (m5050 core-prim . raise) (m2f7e core-prim . eval) (m2f76 core-prim . environment) (m504f core-prim . make-enumeration) (m504e core-prim . enum-set=?) (m504d core-prim . enum-set-universe) (m504c core-prim . enum-set-union) (m504b core-prim . enum-set-subset?) (m504a core-prim . enum-set-projection) (m5049 core-prim . enum-set-member?) (m5048 core-prim . enum-set-intersection) (m5047 core-prim . enum-set-indexer) (m5046 core-prim . enum-set-difference) (m5045 core-prim . enum-set-constructor) (m5044 core-prim . enum-set-complement) (m5043 core-prim . enum-set->list) (m4aac core-prim . who-condition?) (m4a24 core-prim . warning?) (m4a63 core-prim . violation?) (m4b23 core-prim . undefined-violation?) (m4b0a core-prim . syntax-violation?) (m4b0e core-prim . syntax-violation-subform) (m4b0c core-prim . syntax-violation-form) (m2f9e core-prim . syntax-violation) (m5042 core-prim . simple-conditions) (m4a39 core-prim . serious-condition?) (m4ac3 core-prim . non-continuable-violation?) (m4a0d core-prim . message-condition?) (m4aa8 core-prim . make-who-condition) (m4a22 core-prim . make-warning) (m4a61 core-prim . make-violation) (m4b21 core-prim . make-undefined-violation) (m4b04 core-prim . make-syntax-violation) (m4a37 core-prim . make-serious-condition) (m4ac1 core-prim . make-non-continuable-violation) (m4a09 core-prim . make-message-condition) (m4aeb core-prim . make-lexical-violation) (m4a8d core-prim . make-irritants-condition) (m4ad6 core-prim . make-implementation-restriction-violation) (m4a4c core-prim . make-error) (m4a76 core-prim . make-assertion-violation) (m4aed core-prim . lexical-violation?) (m4a91 core-prim . irritants-condition?) (m4ad8 core-prim . implementation-restriction-violation?) (m4a4e core-prim . error?) (m4aae core-prim . condition-who) (m5041 core-prim . condition-predicate) (m4a0f core-prim . condition-message) (m4a93 core-prim . condition-irritants) (m5040 core-prim . condition-accessor) (m503f core-prim . condition) (m4a78 core-prim . assertion-violation?) (m503e core-prim . condition?) (m503d core-prim . utf32->string) (m503c core-prim . utf16->string) (m503b core-prim . utf8->string) (m503a core-prim . uint-list->bytevector) (m5039 core-prim . u8-list->bytevector) (m5038 core-prim . string->utf8) (m5037 core-prim . string->utf32) (m5036 core-prim . string->utf16) (m5035 core-prim . sint-list->bytevector) (m5034 core-prim . native-endianness) (m5033 core-prim . bytevector?) (m5032 core-prim . bytevector=?) (m5031 core-prim . bytevector-uint-set!) (m5030 core-prim . bytevector-uint-ref) (m502f core-prim . bytevector-u8-set!) (m502e core-prim . bytevector-u8-ref) (m502d core-prim . bytevector-u64-set!) (m502c core-prim . bytevector-u64-ref) (m502b core-prim . bytevector-u64-native-set!) (m502a core-prim . bytevector-u64-native-ref) (m5029 core-prim . bytevector-u32-set!) (m5028 core-prim . bytevector-u32-ref) (m5027 core-prim . bytevector-u32-native-set!) (m5026 core-prim . bytevector-u32-native-ref) (m5025 core-prim . bytevector-u16-set!) (m5024 core-prim . bytevector-u16-ref) (m5023 core-prim . bytevector-u16-native-set!) (m5022 core-prim . bytevector-u16-native-ref) (m5021 core-prim . bytevector-sint-set!) (m5020 core-prim . bytevector-sint-ref) (m501f core-prim . bytevector-s8-set!) (m501e core-prim . bytevector-s8-ref) (m501d core-prim . bytevector-s64-set!) (m501c core-prim . bytevector-s64-ref) (m501b core-prim . bytevector-s64-native-set!) (m501a core-prim . bytevector-s64-native-ref) (m5019 core-prim . bytevector-s32-set!) (m5018 core-prim . bytevector-s32-ref) (m5017 core-prim . bytevector-s32-native-set!) (m5016 core-prim . bytevector-s32-native-ref) (m5015 core-prim . bytevector-s16-set!) (m5014 core-prim . bytevector-s16-ref) (m5013 core-prim . bytevector-s16-native-set!) (m5012 core-prim . bytevector-s16-native-ref) (m5011 core-prim . bytevector-length) (m5010 core-prim . bytevector-ieee-single-ref) (m500f core-prim . bytevector-ieee-single-set!) (m500e core-prim . bytevector-ieee-single-native-set!) (m500d core-prim . bytevector-ieee-single-native-ref) (m500c core-prim . bytevector-ieee-double-set!) (m500b core-prim . bytevector-ieee-double-ref) (m500a core-prim . bytevector-ieee-double-native-set!) (m5009 core-prim . bytevector-ieee-double-native-ref) (m5008 core-prim . bytevector-fill!) (m5007 core-prim . bytevector-copy!) (m5006 core-prim . bytevector-copy) (m5005 core-prim . bytevector->uint-list) (m5004 core-prim . bytevector->u8-list) (m5003 core-prim . bytevector->sint-list) (m4c61 core-prim . no-nans-violation?) (m4c4c core-prim . no-infinities-violation?) (m4c5f core-prim . make-no-nans-violation) (m4c4a core-prim . make-no-infinities-violation) (m5002 core-prim . real->flonum) (m5001 core-prim . flzero?) (m5000 core-prim . fltruncate) (m4fff core-prim . fltan) (m4ffe core-prim . flsqrt) (m4ffd core-prim . flsin) (m4ffc core-prim . flround) (m4ffb core-prim . flpositive?) (m4ffa core-prim . flonum?) (m4ff9 core-prim . flodd?) (m4ff8 core-prim . flnumerator) (m4ff7 core-prim . flnegative?) (m4ff6 core-prim . flnan?) (m4ff5 core-prim . flmod0) (m4ff4 core-prim . flmod) (m4ff3 core-prim . flmin) (m4ff2 core-prim . flmax) (m4ff1 core-prim . fllog) (m4ff0 core-prim . flinteger?) (m4fef core-prim . flinfinite?) (m4fee core-prim . flfloor) (m4fed core-prim . flfinite?) (m4fec core-prim . flexpt) (m4feb core-prim . flexp) (m4fea core-prim . fleven?) (m4fe9 core-prim . fldiv0-and-mod0) (m4fe8 core-prim . fldiv0) (m4fe7 core-prim . fldiv-and-mod) (m4fe6 core-prim . fldiv) (m4fe5 core-prim . fldenominator) (m4fe4 core-prim . flcos) (m4fe3 core-prim . flceiling) (m4fe2 core-prim . flatan) (m4fe1 core-prim . flasin) (m4fe0 core-prim . flacos) (m4fdf core-prim . flabs) (m4fde core-prim . fl>?) (m4fdd core-prim . fl>=?) (m4fdc core-prim . fl=?) (m4fdb core-prim . fl<?) (m4fda core-prim . fl<=?) (m4fd9 core-prim . fl/) (m4fd8 core-prim . fl-) (m4fd7 core-prim . fl+) (m4fd6 core-prim . fl*) (m4fd5 core-prim . fixnum->flonum) (m4fd4 core-prim . fxzero?) (m4fd3 core-prim . fxxor) (m4fd2 core-prim . fxrotate-bit-field) (m4fd1 core-prim . fxreverse-bit-field) (m4fd0 core-prim . fxpositive?) (m4fcf core-prim . fxodd?) (m4fce core-prim . fxnot) (m4fcd core-prim . fxnegative?) (m4fcc core-prim . fxmod0) (m4fcb core-prim . fxmod) (m4fca core-prim . fxmin) (m4fc9 core-prim . fxmax) (m4fc8 core-prim . fxlength) (m4fc7 core-prim . fxior) (m4fc6 core-prim . fxif) (m4fc5 core-prim . fxfirst-bit-set) (m4fc4 core-prim . fxeven?) (m4fc3 core-prim . fxdiv0-and-mod0) (m4fc2 core-prim . fxdiv0) (m4fc1 core-prim . fxdiv-and-mod) (m4fc0 core-prim . fxdiv) (m4fbf core-prim . fxcopy-bit-field) (m4fbe core-prim . fxcopy-bit) (m4fbd core-prim . fxbit-set?) (m4fbc core-prim . fxbit-field) (m4fbb core-prim . fxbit-count) (m4fba core-prim . fxarithmetic-shift-right) (m4fb9 core-prim . fxarithmetic-shift-left) (m4fb8 core-prim . fxarithmetic-shift) (m4fb7 core-prim . fxand) (m4fb6 core-prim . fx>?) (m4fb5 core-prim . fx>=?) (m4fb4 core-prim . fx=?) (m4fb3 core-prim . fx<?) (m4fb2 core-prim . fx<=?) (m4fb1 core-prim . fx-/carry) (m4fb0 core-prim . fx-) (m4faf core-prim . fx+/carry) (m4fae core-prim . fx+) (m4fad core-prim . fx*/carry) (m4fac core-prim . fx*) (m4fab core-prim . greatest-fixnum) (m4faa core-prim . least-fixnum) (m4fa9 core-prim . fixnum-width) (m4fa8 core-prim . fixnum?) (m4fa7 core-prim . bitwise-rotate-bit-field) (m4fa6 core-prim . bitwise-reverse-bit-field) (m4fa5 core-prim . bitwise-length) (m4fa4 core-prim . bitwise-if) (m4fa3 core-prim . bitwise-first-bit-set) (m4fa2 core-prim . bitwise-copy-bit-field) (m4fa1 core-prim . bitwise-copy-bit) (m4fa0 core-prim . bitwise-bit-set?) (m4f9f core-prim . bitwise-bit-field) (m4f9e core-prim . bitwise-bit-count) (m4f9d core-prim . bitwise-xor) (m4f9c core-prim . bitwise-ior) (m4f9b core-prim . bitwise-and) (m4f9a core-prim . bitwise-not) (m4f99 core-prim . bitwise-arithmetic-shift-right) (m4f98 core-prim . bitwise-arithmetic-shift-left) (m4f97 core-prim . bitwise-arithmetic-shift) (m4f96 core-prim . zero?) (m4f95 core-prim . vector?) (m4f94 core-prim . vector-set!) (m4f93 core-prim . vector-ref) (m4f92 core-prim . vector-map) (m4f91 core-prim . vector-length) (m4f90 core-prim . vector-for-each) (m4f8f core-prim . vector-fill!) (m4f8e core-prim . vector->list) (m4f8d core-prim . vector) (m4f8c core-prim . values) (m4f8b core-prim . truncate) (m4f8a core-prim . tan) (m4f89 core-prim . symbol?) (m4f88 core-prim . symbol=?) (m4f87 core-prim . symbol->string) (m4f86 core-prim . substring) (m4f85 core-prim . string?) (m4f84 core-prim . string>?) (m4f83 core-prim . string>=?) (m4f82 core-prim . string=?) (m4f81 core-prim . string<?) (m4f80 core-prim . string<=?) (m4f7f core-prim . string-ref) (m4f7e core-prim . string-length) (m4f7d core-prim . string-for-each) (m4f7c core-prim . string-copy) (m4f7b core-prim . string-append) (m4f7a core-prim . string->symbol) (m4f79 core-prim . string->number) (m4f78 core-prim . string->list) (m4f77 core-prim . string) (m4f76 core-prim . sqrt) (m4f75 core-prim . sin) (m4f74 core-prim . round) (m4f73 core-prim . reverse) (m4f72 core-prim . real?) (m4f71 core-prim . real-valued?) (m4f70 core-prim . real-part) (m4f6f core-prim . rationalize) (m4f6e core-prim . rational?) (m4f6d core-prim . rational-valued?) (m4f6c core-prim . procedure?) (m4f6b core-prim . positive?) (m4f6a core-prim . pair?) (m4f69 core-prim . odd?) (m4f68 core-prim . numerator) (m4f67 core-prim . number?) (m4f66 core-prim . number->string) (m4f65 core-prim . null?) (m4f64 core-prim . not) (m4f63 core-prim . negative?) (m4f62 core-prim . nan?) (m4f61 core-prim . min) (m4f60 core-prim . max) (m4f5f core-prim . map) (m4f5e core-prim . make-vector) (m4f5d core-prim . make-string) (m4f5c core-prim . make-rectangular) (m4f5b core-prim . make-polar) (m4f5a core-prim . magnitude) (m4f59 core-prim . log) (m4f58 core-prim . list?) (m4f57 core-prim . list-tail) (m4f56 core-prim . list-ref) (m4f55 core-prim . list->vector) (m4f54 core-prim . list->string) (m4f53 core-prim . list) (m4f52 core-prim . length) (m4f51 core-prim . lcm) (m4f50 core-prim . integer?) (m4f4f core-prim . integer-valued?) (m4f4e core-prim . integer->char) (m4f4d core-prim . infinite?) (m4f4c core-prim . inexact?) (m4f4b core-prim . inexact) (m4f4a core-prim . imag-part) (m4f49 core-prim . gcd) (m4f48 core-prim . for-each) (m4f47 core-prim . floor) (m4f46 core-prim . finite?) (m4f45 core-prim . expt) (m4f44 core-prim . exp) (m4f43 core-prim . exact?) (m4f42 core-prim . exact-integer-sqrt) (m4f41 core-prim . exact) (m4f40 core-prim . even?) (m4f3f core-prim . error) (m4f3e core-prim . eqv?) (m4f3d core-prim . equal?) (m4f3c core-prim . eq?) (m4f3b core-prim . dynamic-wind) (m4f3a core-prim . div0-and-mod0) (m4f39 core-prim . mod0) (m4f38 core-prim . div0) (m4f37 core-prim . div-and-mod) (m4f36 core-prim . mod) (m4f35 core-prim . div) (m4f34 core-prim . denominator) (m4f33 core-prim . cos) (m4f32 core-prim . cons) (m4f31 core-prim . complex?) (m4f30 core-prim . char?) (m4f2f core-prim . char>?) (m4f2e core-prim . char>=?) (m4f2d core-prim . char=?) (m4f2c core-prim . char<?) (m4f2b core-prim . char<=?) (m4f2a core-prim . char->integer) (m4f29 core-prim . ceiling) (m4f28 core-prim . call-with-values) (m4f27 core-prim . call/cc) (m4f26 core-prim . call-with-current-continuation) (m4f25 core-prim . cddddr) (m4f24 core-prim . cdddar) (m4f23 core-prim . cddadr) (m4f22 core-prim . cddaar) (m4f21 core-prim . cdaddr) (m4f20 core-prim . cdadar) (m4f1f core-prim . cdaadr) (m4f1e core-prim . cdaaar) (m4f1d core-prim . cadddr) (m4f1c core-prim . caddar) (m4f1b core-prim . cadadr) (m4f1a core-prim . cadaar) (m4f19 core-prim . caaddr) (m4f18 core-prim . caadar) (m4f17 core-prim . caaadr) (m4f16 core-prim . caaaar) (m4f15 core-prim . cdddr) (m4f14 core-prim . cddar) (m4f13 core-prim . cdadr) (m4f12 core-prim . cdaar) (m4f11 core-prim . caddr) (m4f10 core-prim . cadar) (m4f0f core-prim . caadr) (m4f0e core-prim . caaar) (m4f0d core-prim . cddr) (m4f0c core-prim . cdar) (m4f0b core-prim . cadr) (m4f0a core-prim . caar) (m4f09 core-prim . cdr) (m4f08 core-prim . car) (m4f07 core-prim . boolean?) (m4f06 core-prim . boolean=?) (m4f05 core-prim . atan) (m4f04 core-prim . assertion-violation) (m2f98 core-prim . assertion-error) (m4f03 core-prim . asin) (m4f02 core-prim . apply) (m4f01 core-prim . append) (m4f00 core-prim . angle) (m4eff core-prim . acos) (m4efe core-prim . abs) (m4efd core-prim . /) (m4efc core-prim . *) (m4efb core-prim . -) (m4efa core-prim . +) (m4ef9 core-prim . >=) (m4ef8 core-prim . >) (m4ef7 core-prim . =) (m4ef6 core-prim . <=) (m4ef5 core-prim . <) (m4ef4 core-prim . library) (m4ef3 $core-rtd &no-nans-rtd &no-nans-rcd) (m4ef2 $core-rtd &no-infinities-rtd &no-infinities-rcd) (m4ef1 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (m4ef0 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (m4eef $core-rtd &i/o-port-rtd &i/o-port-rcd) (m4eee $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (m4eed $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (m4eec $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (m4eeb $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (m4eea $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (m4ee9 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (m4ee8 $core-rtd &i/o-write-rtd &i/o-write-rcd) (m4ee7 $core-rtd &i/o-read-rtd &i/o-read-rcd) (m4ee6 $core-rtd &i/o-rtd &i/o-rcd) (m4ee5 $core-rtd &undefined-rtd &undefined-rcd) (m4ee4 $core-rtd &syntax-rtd &syntax-rcd) (m4ee3 $core-rtd &lexical-rtd &lexical-rcd) (m4ee2 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (m4ee1 $core-rtd &non-continuable-rtd &non-continuable-rcd) (m4ee0 $core-rtd &who-rtd &who-rcd) (m4edf $core-rtd &irritants-rtd &irritants-rcd) (m4ede $core-rtd &assertion-rtd &assertion-rcd) (m4edd $core-rtd &violation-rtd &violation-rcd) (m4edc $core-rtd &error-rtd &error-rcd) (m4edb $core-rtd &serious-rtd &serious-rcd) (m4eda $core-rtd &warning-rtd &warning-rcd) (m4ed9 $core-rtd &message-rtd &message-rcd) (m4ed8 $core-rtd &condition-rtd &condition-rcd) (m4ed7 macro . define-condition-type) (m4ed6 macro . define-enumeration) (m4ed5 macro . define-record-type) (m4ed4 macro . parent-rtd) (m4ed3 macro . nongenerative) (m4ed2 macro . opaque) (m4ed1 macro . sealed) (m4ed0 macro . protocol) (m4ecf macro . parent) (m4ece macro . immutable) (m4ecd macro . mutable) (m4ecc macro . fields) (m4ecb macro . error-handling-mode) (m4eca macro . file-options) (m4ec9 macro . buffer-mode) (m4ec8 macro . eol-style) (m4ec7 macro . guard) (m4ec6 macro . trace-define) (m4ec5 macro . trace-lambda) (m4ec4 macro . unsyntax-splicing) (m4ec3 macro . unsyntax) (m4ec2 macro . unquote-splicing) (m4ec1 macro . unquote) (m4ec0 macro . _) (m4ebf macro . else) (m4ebe macro . =>) (m4ebd macro . ...) (m4ebc macro . assert) (m4ebb macro . endianness) (m4eba macro . delay) (m4eb9 macro . time) (m4eb8 macro . do) (m4eb7 macro . cond) (m4eb6 macro . let*) (m4eb5 macro . let) (m4eb4 macro . let*-values) (m4eb3 macro . let-values) (m4eb2 macro . identifier-syntax) (m4eb1 macro . with-syntax) (m4eb0 macro . quasisyntax) (m4eaf macro . quasiquote) (m4eae macro . syntax-rules) (m4ead macro . include) (m4eac macro . define-struct) (m4eab core-macro . record-constructor-descriptor) (m4eaa core-macro . record-type-descriptor) (m4ea9 macro . case) (m4ea8 macro . parameterize) (m4ea7 macro . unless) (m4ea6 macro . when) (m4ea5 core-macro . or) (m4ea4 core-macro . and) (m4ea3 core-macro . if) (m4ea2 core-macro . letrec*) (m4ea1 core-macro . letrec) (m4ea0 core-macro . type-descriptor) (m4e9f core-macro . case-lambda) (m4e9e core-macro . lambda) (m4e9d core-macro . syntax) (m4e9c core-macro . syntax-case) (m4e9b core-macro . quote) (m4e9a core-macro . foreign-call) (m4e99 letrec-syntax) (m4e98 let-syntax) (m4e97 set!) (m4e96 import) (m4e95 begin) (m4e94 module) (m4e93 define-syntax) (m4e92 define)) values values '#f '#f '#f '#f) (m2acd@m296c@install-library 'm5181 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . m5160) (eval-core . m515f) (set-symbol-value! . m515e) (symbol-value . m515d) (gensym . m515c) (void . m515b)) '() values values '#f '#f '#f '#f) (m2acd@m296c@install-library 'm5182 '(mosh) '() '() '() '() '((set-symbol-value! . m515e) (symbol-value . m515d) (regexp? . m5159) (read-line . m5158) (ungensym . m5157) (alist->eq-hash-table . m5156) (assoc-ref . m5155) (print . m5154) (format . m5153) (host-os . m5152) (library-path . m294b) (standard-library-path . m5151) (file-newer? . m5150) (stat-mtime . m514f) (write-to-file . m514e) (file->list . m514d) (file->string . m514c) (digit->integer . m514b) (call-with-string-input-port . m514a) (call-with-string-io . m5149) (string-split . m5148) (bytevector-for-each . m5147) (string->regexp . m5146) (rxmatch . m5145) (regexp-replace-all . m5144) (hashtable-for-each . m5143) (readdir . m513f) (set-current-directory! . m513e) (expand-path . m513d) (current-directory . m513c) (p . m512d) (get-timeofday . m5128) (get-command-line . m5127) (sys-display . m5126) (mosh-executable-path . m5125) (make-file-options . m5124) (source-info . m5123) (make-compiler-instruction . m5122) (make-instruction . m5121) (set-source-info! . m5120) (bignum? . m511f) (fast-equal? . m511e) (fasl-read . m511d) (fasl-write . m511c) (time-usage . m511b) (os-constant . m511a) (time . m4eb9) (include . m4ead)) '() values values '#f '#f '#f '#f) (m2acd@m296c@install-library 'm5183 '(system) '() '() '() '() '((call-process . m5142) (local-tz-offset . m5141) (microseconds . m5140) (expand-path . m513d) (%spawn . m513b) (%waitpid . m513a) (%ffi-supported? . m5139) (%ffi-pointer-ref . m5138) (%ffi-pointer->string . m5137) (%ffi-call->string-or-zero . m5136) (%ffi-call->double . m5135) (%ffi-call->void* . m5134) (%ffi-call->void . m5133) (%ffi-call->int . m5132) (%ffi-lookup . m5131) (%ffi-open . m5130) (%fork . m512f) (%pipe . m512e) (open-output-string . m512c) (get-output-string . m512b) (get-environment-variables . m512a) (get-environment-variable . m5129) (make-parameter . m277e) (socket-port . m5119) (socket-shutdown . m5118) (socket-close . m5117) (socket-send . m5116) (socket-recv! . m5115) (socket-recv . m5114) (make-server-socket . m5113) (make-client-socket . m5112) (socket-accept . m5111) (socket? . m5110) (parameterize . m4ea8)) '() values values '#f '#f '#f '#f))
((lambda (m4d5b@add-library-path! m4d5d@parse-and-add-library-path m4d5f@for-each-with-index m4d61@rpad m4d63@condition-printer m4d65@record->field-alist m4d67@map-with-index m4d69@repl m4d6b@trace-printer m4d6d@command-line m4d6f@local-library-path m4d71@load/args m4d73@load m4d75@ironscheme-build m4d77@eval-top-level m4d79@compile-system-libraries m4d7b@compile m4d7d@compile->closure m4d7f@pre-compile-r6rs-file m4d81@load-r6rs-top-level m4d83@load-r6rs-top-level-sexp) (begin (set! m4d5b@add-library-path! (lambda (m4da6@path) (m2abd@m294c@library-path (append (m2abd@m294c@library-path) (list m4da6@path))))) (set! m4d5d@parse-and-add-library-path (lambda (m4da8@paths m4da9@message) ((lambda (m4dac@t) (if m4dac@t ((lambda (m4dae@paths) (for-each (lambda (m4db0@path) (if (file-exists? m4db0@path) (m4d5b@add-library-path! (expand-path m4db0@path)) (format (current-error-port) m4da9@message m4db0@path))) (reverse (string-split m4dae@paths '#\:)))) m4dac@t) (void))) m4da8@paths))) (set! m4d5f@for-each-with-index (lambda (m4db2@proc m4db3@lst) (letrec ((m4db6@loop (lambda (m4db8@i m4db9@lst) (if (null? m4db9@lst) (if '#f '#f (void)) (begin (m4db2@proc m4db8@i (car m4db9@lst)) (m4db6@loop (+ m4db8@i '1) (cdr m4db9@lst))))))) (m4db6@loop '1 m4db3@lst)))) (set! m4d61@rpad (lambda (m4dbc@str m4dbd@pad m4dbe@n) ((lambda (m4dc2@rest) ((letrec ((m4dc4@loop (lambda (m4dc6@rest m4dc7@ret) (if (<= m4dc6@rest '0) m4dc7@ret (m4dc4@loop (- m4dc6@rest '1) (string-append m4dc7@ret m4dbd@pad)))))) m4dc4@loop) m4dc2@rest (format '"~a" m4dbc@str))) (- m4dbe@n (string-length (format '"~a" m4dbc@str)))))) (set! m4d63@condition-printer (lambda (m4dca@e m4dcb@port) ((lambda (m4dcf@max-condition-len) (begin (set! m4dcf@max-condition-len (apply max (map (lambda (m4de0@c) (string-length (symbol->string (record-type-name (record-rtd m4de0@c))))) (simple-conditions m4dca@e)))) (begin (display '" Condition components:\n" m4dcb@port) (m4d5f@for-each-with-index (lambda (m4dd0@i m4dd1@x) ((lambda (m4dd4@rtd m4dd5@fields-alist) (begin (format m4dcb@port '" ~d. ~a" m4dd0@i (m4d61@rpad (symbol->string (record-type-name m4dd4@rtd)) '" " m4dcf@max-condition-len)) (if (null? m4dd5@fields-alist) (newline m4dcb@port) (void)) ((letrec ((m4dd8@loop (lambda (m4dda@first m4ddb@fields-alist) (if (null? m4ddb@fields-alist) '() ((lambda (m4dde@field) (begin (if (not m4dda@first) (display (m4d61@rpad '"" '" " (+ '4 m4dcf@max-condition-len)) m4dcb@port) (void)) (display '"       " m4dcb@port) (display (car m4dde@field) m4dcb@port) (display '": " m4dcb@port) (write (cdr m4dde@field) m4dcb@port) (newline m4dcb@port) (m4dd8@loop '#f (cdr m4ddb@fields-alist)))) (car m4ddb@fields-alist)))))) m4dd8@loop) '#t m4dd5@fields-alist))) (record-rtd m4dd1@x) (m4d65@record->field-alist m4dd1@x))) (simple-conditions m4dca@e))))) '#f))) (set! m4d65@record->field-alist (lambda (m4de2@r) ((lambda (m4de5@ref) (begin (set! m4de5@ref (lambda (m4df0@rtd m4df1@i m4df2@x) ((lambda (m4df6@val) (if (symbol? m4df6@val) (ungensym m4df6@val) m4df6@val)) ((record-accessor m4df0@rtd m4df1@i) m4df2@x)))) ((letrec ((m4de6@loop (lambda (m4de8@ret m4de9@rtd) (if m4de9@rtd (m4de6@loop (append m4de8@ret (m4d67@map-with-index (lambda (m4dec@i m4ded@field) (cons m4ded@field (m4de5@ref m4de9@rtd m4dec@i m4de2@r))) (vector->list (record-type-field-names m4de9@rtd)))) (record-type-parent m4de9@rtd)) m4de8@ret)))) m4de6@loop) '() (record-rtd m4de2@r)))) '#f))) (set! m4d67@map-with-index (lambda (m4df8@proc m4df9@lst) ((letrec ((m4dfc@loop (lambda (m4dfe@i m4dff@lst m4e00@ret) (if (null? m4dff@lst) (reverse m4e00@ret) (m4dfc@loop (+ m4dfe@i '1) (cdr m4dff@lst) (cons (m4df8@proc m4dfe@i (car m4dff@lst)) m4e00@ret)))))) m4dfc@loop) '0 m4df9@lst '()))) (set! m4d69@repl (lambda m4e04@x ((lambda (m4e07@rec) (begin (set! m4e07@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (m4e0a@m4e08) (lambda () (with-exception-handler (lambda (m4e0c@e) ((call/cc (lambda (m4e0e@m4e09) (m4e0a@m4e08 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? m4e0c@e) (m4d63@condition-printer m4e0c@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" m4e0c@e))) (m4e0e@m4e09 (lambda () (raise-continuable m4e0c@e)))))))))) (lambda () ((letrec ((m4e10@loop (lambda (m4e12@line m4e13@accum) ((lambda (m4e17@parentheses-ok? m4e19@eval-string-print) (begin (set! m4e17@parentheses-ok? (lambda (m4e1e@text) ((letrec ((m4e20@loop (lambda (m4e22@chars m4e23@p0 m4e24@p1) (if (null? m4e22@chars) (= '0 m4e23@p0 m4e24@p1) ((lambda (m4e28@t) (if (memv m4e28@t '(#\()) (m4e20@loop (cdr m4e22@chars) (+ m4e23@p0 '1) m4e24@p1) (if (memv m4e28@t '(#\))) (m4e20@loop (cdr m4e22@chars) (- m4e23@p0 '1) m4e24@p1) (if (memv m4e28@t '(#\[)) (m4e20@loop (cdr m4e22@chars) m4e23@p0 (+ m4e24@p1 '1)) (if (memv m4e28@t '(#\])) (m4e20@loop (cdr m4e22@chars) m4e23@p0 (- m4e24@p1 '1)) (m4e20@loop (cdr m4e22@chars) m4e23@p0 m4e24@p1)))))) (car m4e22@chars)))))) m4e20@loop) (string->list m4e1e@text) '0 '0))) (set! m4e19@eval-string-print (lambda (m4e1c@text) (if (not (or (string=? '"\n" m4e1c@text) (= '0 (string-length m4e1c@text)))) (write (m4d77@eval-top-level (call-with-port (open-string-input-port m4e1c@text) read))) (void)))) (if (eof-object? m4e12@line) (begin (m4e19@eval-string-print m4e13@accum) (exit)) ((lambda (m4e1a@current) (if (m4e17@parentheses-ok? m4e1a@current) (m4e19@eval-string-print m4e1a@current) (m4e10@loop (get-line (current-input-port)) m4e1a@current))) (string-append m4e13@accum m4e12@line))))) '#f '#f)))) m4e10@loop) (get-line (current-input-port)) '""))))))) (newline) (m4e07@rec)))) (m4e07@rec))) '#f))) (set! m4d6b@trace-printer (m2855@m277f@make-parameter write)) (set! m4d6d@command-line (m2855@m277f@make-parameter (get-command-line))) (set! m4d6f@local-library-path (lambda (m4e2a@filename) (cons (expand-path '".") (m2abd@m294c@library-path)))) (set! m4d71@load/args (lambda (m4e2c@filename . m4e2e@args) (begin (apply m4d81@load-r6rs-top-level m4e2c@filename 'load m4e2e@args) (void)))) (set! m4d73@load (lambda (m4e30@filename) (begin (apply m4d81@load-r6rs-top-level m4e30@filename 'load (m4d6d@command-line)) (void)))) (set! m4d75@ironscheme-build (lambda () (m4d73@load '"ironscheme-buildscript.ss"))) (set! m4d77@eval-top-level (lambda (m4e32@x) (m4987@m2f7f@eval m4e32@x (m499d@m2fab@interaction-environment)))) (set! m4d79@compile-system-libraries (lambda () (m4d77@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! m4d7b@compile (lambda (m4e34@filename) (m4d81@load-r6rs-top-level m4e34@filename 'compile))) (set! m4d7d@compile->closure (lambda (m4e36@filename) (m4d81@load-r6rs-top-level m4e36@filename 'closure))) (set! m4d7f@pre-compile-r6rs-file (lambda (m4e38@filename) (m4d81@load-r6rs-top-level m4e38@filename 'compile))) (set! m4d81@load-r6rs-top-level (lambda (m4e3a@filename m4e3b@how . m4e3e@args) ((lambda (m4e44@m4e41 m4e45@m4e43) ((lambda (m4e48@swap) (dynamic-wind m4e48@swap (lambda () ((lambda (m4e4a@x*) ((lambda (m4e4c@t) (if (memv m4e4c@t '(closure)) (m499c@m2fa9@pre-compile-r6rs-top-level m4e4a@x*) (if (memv m4e4c@t '(load)) ((lambda (m4e52@m4e4f m4e53@m4e51) ((lambda (m4e56@swap) (dynamic-wind m4e56@swap (lambda () ((m499b@m2fa7@compile-r6rs-top-level m4e4a@x*))) m4e56@swap)) (lambda () ((lambda (m4e58@t) (begin (m4e52@m4e4f m4e53@m4e51) (set! m4e53@m4e51 m4e58@t))) (m4e52@m4e4f))))) m4d6d@command-line (cons m4e3a@filename (car m4e3e@args))) (if (memv m4e4c@t '(compile)) (begin (m499b@m2fa7@compile-r6rs-top-level m4e4a@x*) (m2ac1@m2954@serialize-all m2850@m2775@serialize-library m28aa@m2863@compile-core-expr)) (if '#f '#f (void)))))) m4e3b@how)) (with-input-from-file m4e3a@filename (lambda () ((letrec ((m4e5a@f (lambda () ((lambda (m4e5c@x) (if (eof-object? m4e5c@x) '() (cons m4e5c@x (m4e5a@f)))) (m2848@m2765@read-annotated))))) m4e5a@f)))))) m4e48@swap)) (lambda () ((lambda (m4e5e@t) (begin (m4e44@m4e41 m4e45@m4e43) (set! m4e45@m4e43 m4e5e@t))) (m4e44@m4e41))))) m2abd@m294c@library-path (m4d6f@local-library-path m4e3a@filename)))) (set! m4d83@load-r6rs-top-level-sexp (lambda (m4e60@import-spec m4e61@thunk) ((lambda (m4e68@m4e65 m4e69@m4e67) ((lambda (m4e6c@swap) (dynamic-wind m4e6c@swap (lambda () ((lambda (m4e72@m4e6f m4e73@m4e71) ((lambda (m4e76@swap) (dynamic-wind m4e76@swap (lambda () (begin (display (list (cons 'import m4e60@import-spec) (list m4e61@thunk))) ((m499b@m2fa7@compile-r6rs-top-level (list (cons 'import m4e60@import-spec) (list m4e61@thunk)))))) m4e76@swap)) (lambda () ((lambda (m4e78@t) (begin (m4e72@m4e6f m4e73@m4e71) (set! m4e73@m4e71 m4e78@t))) (m4e72@m4e6f))))) m4d6d@command-line '())) m4e6c@swap)) (lambda () ((lambda (m4e7a@t) (begin (m4e68@m4e65 m4e69@m4e67) (set! m4e69@m4e67 m4e7a@t))) (m4e68@m4e65))))) m2abd@m294c@library-path (m4d6f@local-library-path '"")))) (begin (set! m4e90@m4d83@load-r6rs-top-level-sexp m4d83@load-r6rs-top-level-sexp) (set! m4e8f@m4d81@load-r6rs-top-level m4d81@load-r6rs-top-level) (set! m4e8e@m4d7f@pre-compile-r6rs-file m4d7f@pre-compile-r6rs-file) (set! m4e8d@m4d7d@compile->closure m4d7d@compile->closure) (set! m4e8c@m4d7b@compile m4d7b@compile) (set! m4e8b@m4d79@compile-system-libraries m4d79@compile-system-libraries) (set! m4e8a@m4d77@eval-top-level m4d77@eval-top-level) (set! m4e89@m4d75@ironscheme-build m4d75@ironscheme-build) (set! m4e88@m4d73@load m4d73@load) (set! m4e87@m4d71@load/args m4d71@load/args) (set! m4e86@m4d6f@local-library-path m4d6f@local-library-path) (set! m4e85@m4d6d@command-line m4d6d@command-line) (set! m4e84@m4d6b@trace-printer m4d6b@trace-printer) (set! m4e83@m4d69@repl m4d69@repl) (set! m4e82@m4d67@map-with-index m4d67@map-with-index) (set! m4e81@m4d65@record->field-alist m4d65@record->field-alist) (set! m4e80@m4d63@condition-printer m4d63@condition-printer) (set! m4e7f@m4d61@rpad m4d61@rpad) (set! m4e7e@m4d5f@for-each-with-index m4d5f@for-each-with-index) (set! m4e7d@m4d5d@parse-and-add-library-path m4d5d@parse-and-add-library-path) (set! m4e7c@m4d5b@add-library-path! m4d5b@add-library-path!) (m2ac2@m2956@current-precompiled-library-loader m2851@m2777@load-serialized-library) (set-symbol-value! 'load m4d73@load) (set-symbol-value! 'pre-compile-r6rs-file m4d7f@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs m4d77@eval-top-level) (set-symbol-value! 'int-env-syms m497e@m2f6d@interaction-environment-symbols) (set-symbol-value! 'expanded2core m28a9@m2861@expanded->core) (set-symbol-value! 'trace-printer m4d6b@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (m4d84@c) (condition (m4cb8@m4ac2@make-non-continuable-violation) (m4cae@m4aa9@make-who-condition 'raise) (m4c72@m4a0a@make-message-condition '"returned from non-continuable exception") (m4ca4@m4a8e@make-irritants-condition (list m4d84@c))))) (m4d5d@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (m4d5d@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (m4d5b@add-library-path! (string-append (mosh-executable-path) '"/lib")) (m4d5b@add-library-path! (string-append (current-directory) '"/lib"))) (m4d5b@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (m4d86@prefix) (m2abe@m294e@library-extensions (m4d86@prefix '".mosh" (m2abe@m294e@library-extensions)))) (lambda (m4d88@ext m4d89@ls) (append (map (lambda (m4d8c@x) (string-append m4d88@ext m4d8c@x)) m4d89@ls) m4d89@ls))) ((lambda (m4d8e@args m4d8f@port) ((lambda (m4d93@ref) (begin (set! m4d93@ref (lambda (m4d9e@rtd m4d9f@i m4da0@x) ((lambda (m4da4@val) (if (symbol? m4da4@val) (ungensym m4da4@val) m4da4@val)) ((record-accessor m4d9e@rtd m4d9f@i) m4da0@x)))) (with-exception-handler (lambda (m4d94@c) (if (condition? m4d94@c) (m4d63@condition-printer m4d94@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" m4d94@c))) (lambda () (if ((call/cc (lambda (m4d98@m4d96) (lambda () (with-exception-handler (lambda (m4d9a@c) ((call/cc (lambda (m4d9c@m4d97) (m4d98@m4d96 (lambda () (if '#t '#f (m4d9c@m4d97 (lambda () (raise-continuable m4d9a@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (m4d83@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? m4d8e@args) (m4d69@repl) (m4d81@load-r6rs-top-level (car m4d8e@args) 'load (cdr m4d8e@args)))))))) '#f)) (m4d6d@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
