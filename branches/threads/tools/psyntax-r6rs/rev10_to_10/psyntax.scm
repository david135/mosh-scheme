;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (c2775@read-annotated c2777@annotation-stripped c2779@annotation? c277b@annotation-source c277d@annotation-expression c277f@scm->fasl c2781@fasl-save c2783@fasl-load c2785@serialize-library c2787@load-serialized-library c2789@make-record-printer c278b@compile-core c278d@read-library-source-file c278f@make-parameter c27f7@file-options-spec) (begin (set! c2775@read-annotated read) (set! c2777@annotation-stripped (lambda (c27f8@x) (c277d@annotation-expression c27f8@x))) (set! c2779@annotation? (lambda (c27fa@x) (source-info c27fa@x))) (set! c277b@annotation-source (lambda (c27fc@x) (source-info c27fc@x))) (set! c277d@annotation-expression (lambda (c27fe@x) (if (pair? c27fe@x) (cons (car c27fe@x) (cdr c27fe@x)) (display '"line:46\n")))) (set! c277f@scm->fasl (lambda (c2800@filename) (string-append c2800@filename '".fasl"))) (set! c2781@fasl-save (lambda (c2802@filename c2803@obj) (call-with-port (open-file-output-port c2802@filename) (lambda (c2806@port) ((symbol-value 'fasl-write!) c2803@obj c2806@port))))) (set! c2783@fasl-load (lambda (c2808@filename) (call-with-port (open-file-input-port c2808@filename) (symbol-value 'fasl-read!)))) (set! c2785@serialize-library (lambda (c280a@filename c280b@obj) (begin (format '#t '"serialize-library ~a\n..." c280a@filename) ((lambda (c280e@expanded2core) ((lambda (c2810@compile) ((lambda (c2812@code) ((lambda (c2814@pivot) ((lambda (c2816@visit) ((lambda () (begin (set-car! c2814@pivot c2816@visit) ((lambda (c2818@pivot) ((lambda (c281a@invoke) ((lambda () (set-car! c2818@pivot c281a@invoke)))) (c2810@compile (c280e@expanded2core (car c2818@pivot))))) (cdr c2814@pivot)))))) (c2810@compile (c280e@expanded2core (car c2814@pivot))))) (cddddr (cddddr c2812@code)))) c280b@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (c281c@fasl-file) (begin (if (file-exists? c281c@fasl-file) (delete-file c281c@fasl-file) (void)) ((call/cc (lambda (c2820@c281e) (lambda () (with-exception-handler (lambda (c2822@c) ((call/cc (lambda (c2824@c281f) (c2820@c281e (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " c280a@filename) (if (file-exists? c281c@fasl-file) (delete-file c281c@fasl-file) (void)) '#f) (c2824@c281f (lambda () (raise-continuable c2822@c)))))))))) (lambda () (begin (c2781@fasl-save c281c@fasl-file c280b@obj) (display '"OK\n")))))))))) (c277f@scm->fasl c280a@filename))))) (set! c2787@load-serialized-library (lambda (c2826@filename c2827@obj) ((lambda (c282a@fasl-file) (if (and (file-exists? c282a@fasl-file) ((symbol-value 'file-newer?) c282a@fasl-file c2826@filename)) ((lambda (c282c@expanded2core) ((lambda (c282e@eval-compiled-core) ((lambda (c2830@code) ((lambda (c2832@pivot) ((lambda (c2834@visit) ((lambda (c2836@visit-proc) ((lambda () (begin (set-car! c2832@pivot c2836@visit-proc) ((lambda (c2838@pivot) ((lambda (c283a@invoke) ((lambda () (begin (set-car! c2838@pivot (lambda () (c282e@eval-compiled-core c283a@invoke))) (apply c2827@obj c2830@code))))) (car c2838@pivot))) (cdr c2832@pivot)) '#t)))) (lambda () (c282e@eval-compiled-core c2834@visit)))) (car c2832@pivot))) (cddddr (cddddr c2830@code)))) (c2783@fasl-load c282a@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (c277f@scm->fasl c2826@filename)))) (set! c2789@make-record-printer (lambda (c283c@name c283d@printer) (lambda c2840@x (begin (display '"record printer") (for-each display c2840@x))))) (set! c278b@compile-core (lambda c2842@x (apply error 'comile-core '"not implementated" c2842@x))) (set! c278d@read-library-source-file (lambda (c2844@file-name) (with-input-from-file c2844@file-name c2775@read-annotated))) (set! c278f@make-parameter (lambda c2854 ((lambda (c2855) (if (= c2855 '1) (apply (lambda (c2846@x) (c278f@make-parameter c2846@x (lambda (c2848@x) c2848@x))) c2854) (if (= c2855 '2) (apply (lambda (c284a@x c284b@fender) ((lambda (c284e@x) (lambda c2852 ((lambda (c2853) (if (= c2853 '0) (apply (lambda () c284e@x) c2852) (if (= c2853 '1) (apply (lambda (c2850@v) (set! c284e@x (c284b@fender c2850@v))) c2852) (error 'apply '"invalid arg count")))) (length c2852)))) (c284b@fender c284a@x))) c2854) (error 'apply '"invalid arg count")))) (length c2854)))) (set! c27f7@file-options-spec (lambda (c2856@x) c2856@x)) (begin (set! c2866@c27f7@file-options-spec c27f7@file-options-spec) (set! c2865@c278f@make-parameter c278f@make-parameter) (set! c2864@c278d@read-library-source-file c278d@read-library-source-file) (set! c2863@c278b@compile-core c278b@compile-core) (set! c2862@c2789@make-record-printer c2789@make-record-printer) (set! c2861@c2787@load-serialized-library c2787@load-serialized-library) (set! c2860@c2785@serialize-library c2785@serialize-library) (set! c285f@c2783@fasl-load c2783@fasl-load) (set! c285e@c2781@fasl-save c2781@fasl-save) (set! c285d@c277f@scm->fasl c277f@scm->fasl) (set! c285c@c277d@annotation-expression c277d@annotation-expression) (set! c285b@c277b@annotation-source c277b@annotation-source) (set! c285a@c2779@annotation? c2779@annotation?) (set! c2859@c2777@annotation-stripped c2777@annotation-stripped) (set! c2858@c2775@read-annotated c2775@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (c286b@current-primitive-locations c286d@mutable? c286f@rewriter c2871@expanded->core c2873@compile-core-expr c2875@pretty-print c2877@compile-core-expr-to-port) (begin (set! c286b@current-primitive-locations (c2865@c278f@make-parameter (lambda (c2878@x) '#f) (lambda (c287a@p) c287a@p))) (set! c286d@mutable? (lambda (c287c@x) (or (pair? c287c@x) (vector? c287c@x) (hashtable? c287c@x)))) (set! c286f@rewriter (lambda (c287e@quote-hack?) ((lambda (c2881@f) (begin (set! c2881@f (lambda (c2882@x) (if (pair? c2882@x) ((lambda (c2884@t) (if (memv c2884@t '(quote)) (if (and c287e@quote-hack? (c286d@mutable? (cadr c2882@x))) ((lambda (c2886@g) (begin (set-symbol-value! c2886@g (cadr c2882@x)) c2886@g)) (gensym)) c2882@x) (if (memv c2884@t '(case-lambda)) (cons 'case-lambda (map (lambda (c2888@x) (cons (car c2888@x) (map c2881@f (cdr c2888@x)))) (cdr c2882@x))) (if (memv c2884@t '(lambda)) (cons* 'lambda (cadr c2882@x) (map c2881@f (cddr c2882@x))) (if (memv c2884@t '(letrec)) ((lambda (c288a@bindings c288b@body*) ((lambda (c288e@lhs* c288f@rhs*) (cons* 'letrec (map list c288e@lhs* (map c2881@f c288f@rhs*)) (map c2881@f c288b@body*))) (map car c288a@bindings) (map cadr c288a@bindings))) (cadr c2882@x) (cddr c2882@x)) (if (memv c2884@t '(letrec*)) ((lambda (c2892@bindings c2893@body*) ((lambda (c2896@lhs* c2897@rhs*) (cons* 'letrec* (map list c2896@lhs* (map c2881@f c2897@rhs*)) (map c2881@f c2893@body*))) (map car c2892@bindings) (map cadr c2892@bindings))) (cadr c2882@x) (cddr c2882@x)) (if (memv c2884@t '(library-letrec*)) ((lambda (c289a@name c289b@x) ((lambda (c289e@bindings c289f@body*) ((lambda (c28a2@lhs* c28a3@lhs** c28a4@rhs*) (cons* 'library-letrec* c289a@name (map list c28a2@lhs* c28a3@lhs** (map c2881@f c28a4@rhs*)) (map c2881@f c289f@body*))) (map car c289e@bindings) (map cadr c289e@bindings) (map caddr c289e@bindings))) (cadr c289b@x) (cddr c289b@x))) (cadr c2882@x) (cdr c2882@x)) (if (memv c2884@t '(begin)) (cons 'begin (map c2881@f (cdr c2882@x))) (if (memv c2884@t '(set!)) (list 'set! (cadr c2882@x) (c2881@f (caddr c2882@x))) (if (memv c2884@t '(primitive)) ((lambda (c28a8@op) ((lambda (c28aa@t) (if c28aa@t ((lambda (c28ac@loc) c28ac@loc) c28aa@t) c28a8@op)) ((c286b@current-primitive-locations) c28a8@op))) (cadr c2882@x)) (if (memv c2884@t '(define)) c2882@x (if (list? c2882@x) (map c2881@f c2882@x) (error 'rewrite '"invalid form ~s ~s" c2882@x (list? c2882@x)))))))))))))) (car c2882@x)) c2882@x))) c2881@f)) '#f))) (set! c2871@expanded->core (lambda (c28ae@x) ((c286f@rewriter '#f) c28ae@x))) (set! c2873@compile-core-expr (lambda (c28b0@x) ((c286f@rewriter '#f) c28b0@x))) (set! c2875@pretty-print write) (set! c2877@compile-core-expr-to-port (lambda (c28b2@x c28b3@p) (c2875@pretty-print ((c286f@rewriter '#f) c28b2@x) c28b3@p))) (begin (set! c28bc@c2877@compile-core-expr-to-port c2877@compile-core-expr-to-port) (set! c28bb@c2875@pretty-print c2875@pretty-print) (set! c28ba@c2873@compile-core-expr c2873@compile-core-expr) (set! c28b9@c2871@expanded->core c2871@expanded->core) (set! c28b8@c286f@rewriter c286f@rewriter) (set! c28b7@c286d@mutable? c286d@mutable?) (set! c28b6@c286b@current-primitive-locations c286b@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (c290b@make-collection c290d@current-library-collection c2913@c290e c2915@c2910 c2917@c290f c291a@library? c291c@make-library c291e@library-id c2920@library-name c2922@library-version c2924@library-imp* c2926@library-vis* c2928@library-inv* c292a@library-subst c292c@library-env c292e@library-visit-state c2930@library-invoke-state c2932@library-visit-code c2934@library-invoke-code c2936@library-visible? c2938@library-source-file-name c293a@set-library-id! c293c@set-library-name! c293e@set-library-version! c2940@set-library-imp*! c2942@set-library-vis*! c2944@set-library-inv*! c2946@set-library-subst! c2948@set-library-env! c294a@set-library-visit-state! c294c@set-library-invoke-state! c294e@set-library-visit-code! c2950@set-library-invoke-code! c2952@set-library-visible?! c2954@set-library-source-file-name! c2956@rp c2958@find-dependencies c295a@find-library-by c295c@library-path c295e@library-extensions c2960@library-name->file-name c2962@file-locator c2964@serialize-all c2966@current-precompiled-library-loader c2968@try-load-from-file c296a@library-loader c296c@current-library-expander c296e@external-pending-libraries c2970@find-external-library c2972@find-library-by-name c2974@library-exists? c2976@find-library-by-spec/die c2978@label->binding-table c297a@install-library-record c297c@install-library c297e@imported-label->binding c2980@invoke-library c2982@visit-library c2984@invoke-library-by-spec c2986@installed-libraries c2988@library-spec) (begin (set! c290b@make-collection (lambda () ((lambda (c2989@set) ((lambda (c298c@set-cons) (begin (set! c298c@set-cons (lambda (c2991@x c2992@ls) (if (memq c2991@x c2992@ls) c2992@ls (cons c2991@x c2992@ls)))) (lambda c298f ((lambda (c2990) (if (= c2990 '0) (apply (lambda () c2989@set) c298f) (if (= c2990 '1) (apply (lambda (c298d@x) (set! c2989@set (c298c@set-cons c298d@x c2989@set))) c298f) (error 'apply '"invalid arg count")))) (length c298f))))) '#f)) '()))) (set! c290d@current-library-collection (c2865@c278f@make-parameter (c290b@make-collection) (lambda (c2995@x) (begin (if (not (procedure? c2995@x)) (assertion-violation 'current-library-collection '"not a procedure" c2995@x) (void)) c2995@x)))) (set! c2913@c290e (make-record-type-descriptor 'library '#f 'c2911 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! c2915@c2910 '#f) (set! c2917@c290f (make-record-constructor-descriptor c2913@c290e '#f c2915@c2910)) (set! c291a@library? (record-predicate c2913@c290e)) (set! c291c@make-library (record-constructor c2917@c290f)) (set! c291e@library-id (record-accessor c2913@c290e '0)) (set! c2920@library-name (record-accessor c2913@c290e '1)) (set! c2922@library-version (record-accessor c2913@c290e '2)) (set! c2924@library-imp* (record-accessor c2913@c290e '3)) (set! c2926@library-vis* (record-accessor c2913@c290e '4)) (set! c2928@library-inv* (record-accessor c2913@c290e '5)) (set! c292a@library-subst (record-accessor c2913@c290e '6)) (set! c292c@library-env (record-accessor c2913@c290e '7)) (set! c292e@library-visit-state (record-accessor c2913@c290e '8)) (set! c2930@library-invoke-state (record-accessor c2913@c290e '9)) (set! c2932@library-visit-code (record-accessor c2913@c290e '10)) (set! c2934@library-invoke-code (record-accessor c2913@c290e '11)) (set! c2936@library-visible? (record-accessor c2913@c290e '12)) (set! c2938@library-source-file-name (record-accessor c2913@c290e '13)) (set! c293a@set-library-id! (record-mutator c2913@c290e '0)) (set! c293c@set-library-name! (record-mutator c2913@c290e '1)) (set! c293e@set-library-version! (record-mutator c2913@c290e '2)) (set! c2940@set-library-imp*! (record-mutator c2913@c290e '3)) (set! c2942@set-library-vis*! (record-mutator c2913@c290e '4)) (set! c2944@set-library-inv*! (record-mutator c2913@c290e '5)) (set! c2946@set-library-subst! (record-mutator c2913@c290e '6)) (set! c2948@set-library-env! (record-mutator c2913@c290e '7)) (set! c294a@set-library-visit-state! (record-mutator c2913@c290e '8)) (set! c294c@set-library-invoke-state! (record-mutator c2913@c290e '9)) (set! c294e@set-library-visit-code! (record-mutator c2913@c290e '10)) (set! c2950@set-library-invoke-code! (record-mutator c2913@c290e '11)) (set! c2952@set-library-visible?! (record-mutator c2913@c290e '12)) (set! c2954@set-library-source-file-name! (record-mutator c2913@c290e '13)) (set! c2956@rp (c2862@c2789@make-record-printer 'library (lambda (c2997@x c2998@p c2999@wr) (begin (if (not (c291a@library? c2997@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (c2922@library-version c2997@x)) (c2920@library-name c2997@x) (append (c2920@library-name c2997@x) (list (c2922@library-version c2997@x))))) c2998@p))))) (set! c2958@find-dependencies (lambda (c299d@ls) (if (null? c299d@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! c295a@find-library-by (lambda (c299f@pred) ((letrec ((c29a1@f (lambda (c29a3@ls) (if (null? c29a3@ls) '#f (if (c299f@pred (car c29a3@ls)) (car c29a3@ls) (c29a1@f (cdr c29a3@ls))))))) c29a1@f) ((c290d@current-library-collection))))) (set! c295c@library-path (c2865@c278f@make-parameter '(".") (lambda (c29a5@x) (if (and (list? c29a5@x) (for-all string? c29a5@x)) (map (lambda (c29a7@x) c29a7@x) c29a5@x) (assertion-violation 'library-path '"not a list of strings" c29a5@x))))) (set! c295e@library-extensions (c2865@c278f@make-parameter '(".sls" ".ss" ".scm") (lambda (c29a9@x) (if (and (list? c29a9@x) (for-all string? c29a9@x)) (map (lambda (c29ab@x) c29ab@x) c29a9@x) (assertion-violation 'library-extensions '"not a list of strings" c29a9@x))))) (set! c2960@library-name->file-name (lambda (c29ad@x) (call-with-values (lambda () (open-string-output-port)) (lambda (c29b3@c29b0 c29b4@c29b2) ((lambda (c29b7@extract c29b8@p) ((lambda (c29bc@display-hex) (begin (set! c29bc@display-hex (lambda (c29c5@n) (if (<= '0 c29c5@n '9) (display c29c5@n c29b8@p) (display (integer->char (+ (char->integer '#\a) (- c29c5@n '10))) c29b8@p)))) (begin ((letrec ((c29bd@f (lambda (c29bf@ls) (if (not (null? c29bf@ls)) (begin (display '"/" c29b8@p) (for-each (lambda (c29c1@c) (if (or (char<=? '#\a c29c1@c '#\z) (char<=? '#\A c29c1@c '#\Z) (char<=? '#\0 c29c1@c '#\9) (memv c29c1@c '(#\- #\. #\_ #\~))) (display c29c1@c c29b8@p) (begin (display '"%" c29b8@p) ((lambda (c29c3@n) (begin (c29bc@display-hex (quotient c29c3@n '16)) (c29bc@display-hex (remainder c29c3@n '16)))) (char->integer c29c1@c))))) (string->list (symbol->string (car c29bf@ls)))) (c29bd@f (cdr c29bf@ls))) (void))))) c29bd@f) c29ad@x) (c29b7@extract)))) '#f)) c29b4@c29b2 c29b3@c29b0))))) (set! c2962@file-locator (c2865@c278f@make-parameter (lambda (c29c7@x) ((lambda (c29c9@str) ((letrec ((c29cb@f (lambda (c29cd@ls c29ce@exts c29cf@failed-list) (if (null? c29cd@ls) ((lambda () ((lambda (c29db@c29d6 c29dd@c29d8 c29df@c29d7 c29e2@c29d5 c29e4@make-library-resolution-condition c29e6@c29d3 c29e8@c29d4 c29ea@library-resolution-condition? c29ec@condition-library c29ee@condition-files) (begin (set! c29db@c29d6 (make-record-type-descriptor '&library-resolution c4c7c@c49c3@&condition-rtd 'c29d9 '#f '#f '#((immutable library) (immutable files)))) (set! c29dd@c29d8 '#f) (set! c29df@c29d7 (make-record-constructor-descriptor c29db@c29d6 c4c7d@c49c5@&condition-rcd c29dd@c29d8)) (set! c29e2@c29d5 (record-predicate c29db@c29d6)) (set! c29e4@make-library-resolution-condition (record-constructor c29df@c29d7)) (set! c29e6@c29d3 (record-accessor c29db@c29d6 '0)) (set! c29e8@c29d4 (record-accessor c29db@c29d6 '1)) (set! c29ea@library-resolution-condition? (condition-predicate c29db@c29d6)) (set! c29ec@condition-library (condition-accessor c29db@c29d6 c29e6@c29d3)) (set! c29ee@condition-files (condition-accessor c29db@c29d6 c29e8@c29d4)) (raise (condition (c4c9c@c4a5d@make-error) (c4cbe@c4ab9@make-who-condition 'expander) (c4c82@c4a1a@make-message-condition '"cannot locate library in library-path") (c29e4@make-library-resolution-condition c29c7@x (reverse c29cf@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? c29ce@exts) (c29cb@f (cdr c29cd@ls) (c295e@library-extensions) c29cf@failed-list) ((lambda (c29ef@name) (if (file-exists? c29ef@name) c29ef@name (c29cb@f c29cd@ls (cdr c29ce@exts) (cons c29ef@name c29cf@failed-list)))) (string-append (car c29cd@ls) c29c9@str (car c29ce@exts)))))))) c29cb@f) (c295c@library-path) (c295e@library-extensions) '())) (c2960@library-name->file-name c29c7@x))) (lambda (c29f1@f) (if (procedure? c29f1@f) c29f1@f (assertion-violation 'file-locator '"not a procedure" c29f1@f))))) (set! c2964@serialize-all (lambda (c29f3@serialize c29f4@compile) ((lambda (c29f8@library-desc) (begin (set! c29f8@library-desc (lambda (c29fb@x) (list (c291e@library-id c29fb@x) (c2920@library-name c29fb@x)))) (for-each (lambda (c29f9@x) (if (c2938@library-source-file-name c29f9@x) (c29f3@serialize (c2938@library-source-file-name c29f9@x) (list (c291e@library-id c29f9@x) (c2920@library-name c29f9@x) (c2922@library-version c29f9@x) (map c29f8@library-desc (c2924@library-imp* c29f9@x)) (map c29f8@library-desc (c2926@library-vis* c29f9@x)) (map c29f8@library-desc (c2928@library-inv* c29f9@x)) (c292a@library-subst c29f9@x) (c292c@library-env c29f9@x) (c29f4@compile (c2932@library-visit-code c29f9@x)) (c29f4@compile (c2934@library-invoke-code c29f9@x)) (c2936@library-visible? c29f9@x))) (void))) ((c290d@current-library-collection))))) '#f))) (set! c2966@current-precompiled-library-loader (c2865@c278f@make-parameter (lambda (c29fd@filename c29fe@sk) '#f))) (set! c2968@try-load-from-file (lambda (c2a01@filename) ((c2966@current-precompiled-library-loader) c2a01@filename (lambda c2a27 ((lambda (c2a28) (if (= c2a28 '11) (apply (lambda (c2a03@id c2a04@name c2a05@ver c2a06@imp* c2a07@vis* c2a08@inv* c2a09@exp-subst c2a0a@exp-env c2a0b@visit-proc c2a0c@invoke-proc c2a0d@visible?) ((letrec ((c2a19@f (lambda (c2a1b@deps) (if (null? c2a1b@deps) (begin (c297c@install-library c2a03@id c2a04@name c2a05@ver c2a06@imp* c2a07@vis* c2a08@inv* c2a09@exp-subst c2a0a@exp-env c2a0b@visit-proc c2a0c@invoke-proc '#f '#f c2a0d@visible? '#f) '#t) ((lambda (c2a1d@d) ((lambda (c2a1f@label c2a20@dname) ((lambda (c2a23@l) (if (and (c291a@library? c2a23@l) (eq? c2a1f@label (c291e@library-id c2a23@l))) (c2a19@f (cdr c2a1b@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" c2a04@name c2a20@dname c2a01@filename c2a23@l c2a1f@label (c291e@library-id c2a23@l)) '#f))) (c2972@find-library-by-name c2a20@dname))) (car c2a1d@d) (cadr c2a1d@d))) (car c2a1b@deps)))))) c2a19@f) (append c2a06@imp* c2a07@vis* c2a08@inv*))) c2a27) (if (>= c2a28 '0) (apply (lambda c2a25@others '#f) c2a27) (error 'apply '"invalid arg count")))) (length c2a27)))))) (set! c296a@library-loader (c2865@c278f@make-parameter (lambda (c2a29@x) ((lambda (c2a2b@file-name) (if (not c2a2b@file-name) (assertion-violation '#f '"cannot file library" c2a29@x) (or (c2968@try-load-from-file c2a2b@file-name) ((c296c@current-library-expander) (c2864@c278d@read-library-source-file c2a2b@file-name) c2a2b@file-name (lambda (c2a2d@name) (if (not (fast-equal? c2a2d@name c2a29@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (c2a33@c2a30 c2a34@c2a32) ((lambda (c2a37@e c2a38@p) (begin (display '"expected to find library " c2a38@p) (write c2a29@x c2a38@p) (display '" in file " c2a38@p) (display c2a2b@file-name c2a38@p) (display '", found " c2a38@p) (write c2a2d@name c2a38@p) (display '" instead" c2a38@p) (c2a37@e))) c2a34@c2a32 c2a33@c2a30)))) (void))))))) ((c2962@file-locator) c2a29@x))) (lambda (c2a3b@f) (if (procedure? c2a3b@f) c2a3b@f (assertion-violation 'library-locator '"not a procedure" c2a3b@f))))) (set! c296c@current-library-expander (c2865@c278f@make-parameter (lambda (c2a3d@x) (assertion-violation 'library-expander '"not initialized")) (lambda (c2a3f@f) (if (procedure? c2a3f@f) c2a3f@f (assertion-violation 'library-expander '"not a procedure" c2a3f@f))))) (set! c296e@external-pending-libraries (c2865@c278f@make-parameter '())) (set! c2970@find-external-library (lambda (c2a41@name) (begin (if (member c2a41@name (c296e@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" c2a41@name) (void)) ((lambda (c2a47@c2a44 c2a48@c2a46) ((lambda (c2a4b@swap) (dynamic-wind c2a4b@swap (lambda () (begin ((c296a@library-loader) c2a41@name) (or (c295a@find-library-by (lambda (c2a4d@x) (fast-equal? (c2920@library-name c2a4d@x) c2a41@name))) (assertion-violation '#f '"handling external library did not yield the correct library" c2a41@name)))) c2a4b@swap)) (lambda () ((lambda (c2a4f@t) (begin (c2a47@c2a44 c2a48@c2a46) (set! c2a48@c2a46 c2a4f@t))) (c2a47@c2a44))))) c296e@external-pending-libraries (cons c2a41@name (c296e@external-pending-libraries)))))) (set! c2972@find-library-by-name (lambda (c2a51@name) (or (c295a@find-library-by (lambda (c2a53@x) (fast-equal? (c2920@library-name c2a53@x) c2a51@name))) (c2970@find-external-library c2a51@name)))) (set! c2974@library-exists? (lambda (c2a55@name) (and (c295a@find-library-by (lambda (c2a57@x) (fast-equal? (c2920@library-name c2a57@x) c2a55@name))) '#t))) (set! c2976@find-library-by-spec/die (lambda (c2a59@spec) ((lambda (c2a5b@id) (or (c295a@find-library-by (lambda (c2a5d@x) (eq? c2a5b@id (c291e@library-id c2a5d@x)))) (assertion-violation '#f '"cannot find library with required spec" c2a59@spec))) (car c2a59@spec)))) (set! c2978@label->binding-table (make-eq-hashtable)) (set! c297a@install-library-record (lambda (c2a5f@lib) (begin ((lambda (c2a61@exp-env) (for-each (lambda (c2a63@x) ((lambda (c2a65@label c2a66@binding) ((lambda (c2a69@binding) (begin (if (hashtable-ref c2978@label->binding-table c2a65@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" c2a65@label (hashtable-ref c2978@label->binding-table c2a65@label '#f) c2a69@binding) (exit)) (void)) (hashtable-set! c2978@label->binding-table c2a65@label c2a69@binding))) ((lambda (c2a6b@t) (if (memv c2a6b@t '(global)) (cons 'global (cons c2a5f@lib (cdr c2a66@binding))) (if (memv c2a6b@t '(global-macro)) (cons 'global-macro (cons c2a5f@lib (cdr c2a66@binding))) (if (memv c2a6b@t '(global-macro!)) (cons 'global-macro! (cons c2a5f@lib (cdr c2a66@binding))) c2a66@binding)))) (car c2a66@binding)))) (car c2a63@x) (cdr c2a63@x))) c2a61@exp-env)) (c292c@library-env c2a5f@lib)) ((c290d@current-library-collection) c2a5f@lib)))) (set! c297c@install-library (lambda (c2a6d@id c2a6e@name c2a6f@ver c2a70@imp* c2a71@vis* c2a72@inv* c2a73@exp-subst c2a74@exp-env c2a75@visit-proc c2a76@invoke-proc c2a77@visit-code c2a78@invoke-code c2a79@visible? c2a7a@source-file-name) ((lambda (c2a89@imp-lib* c2a8a@vis-lib* c2a8b@inv-lib*) (begin (if (not (and (symbol? c2a6d@id) (list? c2a6e@name) (list? c2a6f@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" c2a6d@id c2a6e@name c2a6f@ver) (void)) (if (c2974@library-exists? c2a6e@name) (assertion-violation 'install-library '"library is already installed" c2a6e@name) (void)) ((lambda (c2a8f@lib) (c297a@install-library-record c2a8f@lib)) (c291c@make-library c2a6d@id c2a6e@name c2a6f@ver c2a89@imp-lib* c2a8a@vis-lib* c2a8b@inv-lib* c2a73@exp-subst c2a74@exp-env c2a75@visit-proc c2a76@invoke-proc c2a77@visit-code c2a78@invoke-code c2a79@visible? c2a7a@source-file-name)))) (map c2976@find-library-by-spec/die c2a70@imp*) (map c2976@find-library-by-spec/die c2a71@vis*) (map c2976@find-library-by-spec/die c2a72@inv*)))) (set! c297e@imported-label->binding (lambda (c2a91@lab) (hashtable-ref c2978@label->binding-table c2a91@lab '#f))) (set! c2980@invoke-library (lambda (c2a93@lib) ((lambda (c2a95@invoke) (if (procedure? c2a95@invoke) (begin (c294c@set-library-invoke-state! c2a93@lib (lambda () (assertion-violation 'invoke '"circularity detected" c2a93@lib))) (for-each c2980@invoke-library (c2928@library-inv* c2a93@lib)) (c294c@set-library-invoke-state! c2a93@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" c2a93@lib))) (c2a95@invoke) (c294c@set-library-invoke-state! c2a93@lib '#t)) (void))) (c2930@library-invoke-state c2a93@lib)))) (set! c2982@visit-library (lambda (c2a97@lib) ((lambda (c2a99@visit) (if (procedure? c2a99@visit) (begin (c294a@set-library-visit-state! c2a97@lib (lambda () (assertion-violation 'visit '"circularity detected" c2a97@lib))) (for-each c2980@invoke-library (c2926@library-vis* c2a97@lib)) (c294a@set-library-visit-state! c2a97@lib (lambda () (assertion-violation 'invoke '"first visit did not return" c2a97@lib))) (c2a99@visit) (c294a@set-library-visit-state! c2a97@lib '#t)) (void))) (c292e@library-visit-state c2a97@lib)))) (set! c2984@invoke-library-by-spec (lambda (c2a9b@spec) (c2980@invoke-library (c2976@find-library-by-spec/die c2a9b@spec)))) (set! c2986@installed-libraries (lambda c2aa3 ((lambda (c2aa4) (if (= c2aa4 '1) (apply (lambda (c2a9d@all?) ((letrec ((c2a9f@f (lambda (c2aa1@ls) (if (null? c2aa1@ls) '() (if (or c2a9d@all? (c2936@library-visible? (car c2aa1@ls))) (cons (car c2aa1@ls) (c2a9f@f (cdr c2aa1@ls))) (c2a9f@f (cdr c2aa1@ls))))))) c2a9f@f) ((c290d@current-library-collection)))) c2aa3) (if (= c2aa4 '0) (apply (lambda () (c2986@installed-libraries '#f)) c2aa3) (error 'apply '"invalid arg count")))) (length c2aa3)))) (set! c2988@library-spec (lambda (c2aa5@x) (begin (if (not (c291a@library? c2aa5@x)) (assertion-violation 'library-spec '"not a library" c2aa5@x) (void)) (list (c291e@library-id c2aa5@x) (c2920@library-name c2aa5@x) (c2922@library-version c2aa5@x))))) (begin (set! c2ae3@c2988@library-spec c2988@library-spec) (set! c2ae2@c2986@installed-libraries c2986@installed-libraries) (set! c2ae1@c2984@invoke-library-by-spec c2984@invoke-library-by-spec) (set! c2ae0@c2982@visit-library c2982@visit-library) (set! c2adf@c2980@invoke-library c2980@invoke-library) (set! c2ade@c297e@imported-label->binding c297e@imported-label->binding) (set! c2add@c297c@install-library c297c@install-library) (set! c2adc@c297a@install-library-record c297a@install-library-record) (set! c2adb@c2978@label->binding-table c2978@label->binding-table) (set! c2ada@c2976@find-library-by-spec/die c2976@find-library-by-spec/die) (set! c2ad9@c2974@library-exists? c2974@library-exists?) (set! c2ad8@c2972@find-library-by-name c2972@find-library-by-name) (set! c2ad7@c2970@find-external-library c2970@find-external-library) (set! c2ad6@c296e@external-pending-libraries c296e@external-pending-libraries) (set! c2ad5@c296c@current-library-expander c296c@current-library-expander) (set! c2ad4@c296a@library-loader c296a@library-loader) (set! c2ad3@c2968@try-load-from-file c2968@try-load-from-file) (set! c2ad2@c2966@current-precompiled-library-loader c2966@current-precompiled-library-loader) (set! c2ad1@c2964@serialize-all c2964@serialize-all) (set! c2ad0@c2962@file-locator c2962@file-locator) (set! c2acf@c2960@library-name->file-name c2960@library-name->file-name) (set! c2ace@c295e@library-extensions c295e@library-extensions) (set! c2acd@c295c@library-path c295c@library-path) (set! c2acc@c295a@find-library-by c295a@find-library-by) (set! c2acb@c2958@find-dependencies c2958@find-dependencies) (set! c2aca@c2956@rp c2956@rp) (set! c2ac9@c2954@set-library-source-file-name! c2954@set-library-source-file-name!) (set! c2ac8@c2952@set-library-visible?! c2952@set-library-visible?!) (set! c2ac7@c2950@set-library-invoke-code! c2950@set-library-invoke-code!) (set! c2ac6@c294e@set-library-visit-code! c294e@set-library-visit-code!) (set! c2ac5@c294c@set-library-invoke-state! c294c@set-library-invoke-state!) (set! c2ac4@c294a@set-library-visit-state! c294a@set-library-visit-state!) (set! c2ac3@c2948@set-library-env! c2948@set-library-env!) (set! c2ac2@c2946@set-library-subst! c2946@set-library-subst!) (set! c2ac1@c2944@set-library-inv*! c2944@set-library-inv*!) (set! c2ac0@c2942@set-library-vis*! c2942@set-library-vis*!) (set! c2abf@c2940@set-library-imp*! c2940@set-library-imp*!) (set! c2abe@c293e@set-library-version! c293e@set-library-version!) (set! c2abd@c293c@set-library-name! c293c@set-library-name!) (set! c2abc@c293a@set-library-id! c293a@set-library-id!) (set! c2abb@c2938@library-source-file-name c2938@library-source-file-name) (set! c2aba@c2936@library-visible? c2936@library-visible?) (set! c2ab9@c2934@library-invoke-code c2934@library-invoke-code) (set! c2ab8@c2932@library-visit-code c2932@library-visit-code) (set! c2ab7@c2930@library-invoke-state c2930@library-invoke-state) (set! c2ab6@c292e@library-visit-state c292e@library-visit-state) (set! c2ab5@c292c@library-env c292c@library-env) (set! c2ab4@c292a@library-subst c292a@library-subst) (set! c2ab3@c2928@library-inv* c2928@library-inv*) (set! c2ab2@c2926@library-vis* c2926@library-vis*) (set! c2ab1@c2924@library-imp* c2924@library-imp*) (set! c2ab0@c2922@library-version c2922@library-version) (set! c2aaf@c2920@library-name c2920@library-name) (set! c2aae@c291e@library-id c291e@library-id) (set! c2aad@c291c@make-library c291c@make-library) (set! c2aac@c291a@library? c291a@library?) (set! c2aab@c2917@c290f c2917@c290f) (set! c2aaa@c2915@c2910 c2915@c2910) (set! c2aa9@c2913@c290e c2913@c290e) (set! c2aa8@c290d@current-library-collection c290d@current-library-collection) (set! c2aa7@c290b@make-collection c290b@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (c2ae6@build-global-define c2b57@build-lambda c2b59@build-case-lambda c2b5b@build-let c2b89@build-sequence c2b8b@build-void c2b8d@build-letrec c2b8f@build-letrec* c2b91@build-library-letrec* c2b93@build-receive) (begin (set! c2ae6@build-global-define (lambda (c2b94@x) (c2b8b@build-void))) (set! c2b57@build-lambda (lambda (c2b96@ae c2b97@vars c2b98@exp) (list 'lambda c2b97@vars c2b98@exp))) (set! c2b59@build-case-lambda (lambda (c2b9c@ae c2b9d@vars* c2b9e@exp*) ((lambda (c2ba3@build-error c2ba5@build-pred c2ba7@build-apply c2ba9@expand-case-lambda) (begin (set! c2ba3@build-error (lambda (c2bda@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! c2ba5@build-pred (lambda (c2bc2@ae c2bc3@n c2bc4@vars) (call-with-values (lambda () ((letrec ((c2bcc@f (lambda (c2bce@vars c2bcf@count) (if (pair? c2bce@vars) (c2bcc@f (cdr c2bce@vars) (+ c2bcf@count '1)) (if (null? c2bce@vars) (values c2bcf@count '=) (values c2bcf@count '>=)))))) c2bcc@f) c2bc4@vars '0)) (lambda (c2bd2@c2bc9 c2bd3@c2bcb) ((lambda (c2bd6@pred c2bd7@count) (list (list 'primitive c2bd6@pred) c2bc3@n (list 'quote c2bd7@count))) c2bd3@c2bcb c2bd2@c2bc9))))) (set! c2ba7@build-apply (lambda (c2bba@ae c2bbb@g c2bbc@vars c2bbd@exp) (list '(primitive apply) (c2b57@build-lambda c2bba@ae c2bbc@vars c2bbd@exp) c2bbb@g))) (set! c2ba9@expand-case-lambda (lambda (c2baa@ae c2bab@vars c2bac@exp*) ((lambda (c2bb0@g c2bb1@n) (list 'lambda c2bb0@g (c2b5b@build-let c2baa@ae (list c2bb1@n) (list (list '(primitive length) c2bb0@g)) ((letrec ((c2bb4@f (lambda (c2bb6@vars* c2bb7@exp*) (if (null? c2bb6@vars*) (c2ba3@build-error c2baa@ae) (list 'if (c2ba5@build-pred c2baa@ae c2bb1@n (car c2bb6@vars*)) (c2ba7@build-apply c2baa@ae c2bb0@g (car c2bb6@vars*) (car c2bb7@exp*)) (c2bb4@f (cdr c2bb6@vars*) (cdr c2bb7@exp*))))))) c2bb4@f) c2b9d@vars* c2bac@exp*)))) (gensym) (gensym)))) (if (= (length c2b9e@exp*) '1) (c2b57@build-lambda c2b9c@ae (car c2b9d@vars*) (car c2b9e@exp*)) (c2ba9@expand-case-lambda c2b9c@ae c2b9d@vars* c2b9e@exp*)))) '#f '#f '#f '#f))) (set! c2b5b@build-let (lambda (c2bdc@ae c2bdd@lhs* c2bde@rhs* c2bdf@body) (cons (c2b57@build-lambda c2bdc@ae c2bdd@lhs* c2bdf@body) c2bde@rhs*))) (set! c2b89@build-sequence (lambda (c2be4@ae c2be5@exps) ((letrec ((c2be8@loop (lambda (c2bea@exps) (if (null? (cdr c2bea@exps)) (car c2bea@exps) (if (equal? (car c2bea@exps) (c2b8b@build-void)) (c2be8@loop (cdr c2bea@exps)) (cons 'begin c2bea@exps)))))) c2be8@loop) c2be5@exps))) (set! c2b8b@build-void (lambda () '((primitive void)))) (set! c2b8d@build-letrec (lambda (c2bec@ae c2bed@vars c2bee@val-exps c2bef@body-exp) (if (null? c2bed@vars) c2bef@body-exp (list 'letrec (map list c2bed@vars c2bee@val-exps) c2bef@body-exp)))) (set! c2b8f@build-letrec* (lambda (c2bf4@ae c2bf5@vars c2bf6@val-exps c2bf7@body-exp) (if (null? c2bf5@vars) c2bf7@body-exp (c2b5b@build-let c2bf4@ae c2bf5@vars (map (lambda (c2bfc@x) (list 'quote '#f)) c2bf5@vars) (c2b89@build-sequence c2bf4@ae (append (map (lambda (c2bfe@lhs c2bff@rhs) (list 'set! c2bfe@lhs c2bff@rhs)) c2bf5@vars c2bf6@val-exps) (list c2bf7@body-exp))))))) (set! c2b91@build-library-letrec* (lambda (c2c02@ae c2c03@name c2c04@vars c2c05@locs c2c06@val-exps c2c07@body-exp) (list 'library-letrec* c2c03@name (map list c2c04@vars c2c05@locs c2c06@val-exps) c2c07@body-exp))) (set! c2b93@build-receive (lambda (c2c0e@ae c2c0f@vars c2c10@producer c2c11@body*) (begin (display '"************** in ") (cons 'receive (cons c2c0f@vars (cons c2c10@producer c2c11@body*)))))) (begin (set! c2c1f@c2b93@build-receive c2b93@build-receive) (set! c2c1e@c2b91@build-library-letrec* c2b91@build-library-letrec*) (set! c2c1d@c2b8f@build-letrec* c2b8f@build-letrec*) (set! c2c1c@c2b8d@build-letrec c2b8d@build-letrec) (set! c2c1b@c2b8b@build-void c2b8b@build-void) (set! c2c1a@c2b89@build-sequence c2b89@build-sequence) (set! c2c19@c2b5b@build-let c2b5b@build-let) (set! c2c18@c2b59@build-case-lambda c2b59@build-case-lambda) (set! c2c17@c2b57@build-lambda c2b57@build-lambda) (set! c2c16@c2ae6@build-global-define c2ae6@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (c2c2e@file-options-macro c2c30@set-cons c2c32@set-union c2c37@top-mark* c2c39@top-marked? c2c3b@gen-lexical c2c3d@gen-global c2c3f@gen-label c2c41@gen-top-level-label c2c43@gen-define-label+loc c2c45@gen-define-label c2c4b@c2c46 c2c4d@c2c48 c2c4f@c2c47 c2c52@rib? c2c54@make-rib c2c56@rib-sym* c2c58@rib-mark** c2c5a@rib-label* c2c5c@rib-sealed/freq c2c5e@rib-cache c2c60@set-rib-sym*! c2c62@set-rib-mark**! c2c64@set-rib-label*! c2c66@set-rib-sealed/freq! c2c68@set-rib-cache! c2c6a@make-empty-rib c2c6c@extend-rib! c2c6e@extend-rib/nc! c2c70@make-rib-map c2c72@seal-rib! c2c74@unseal-rib! c2c76@make-full-rib c2c7c@c2c77 c2c7e@c2c79 c2c80@c2c78 c2c83@stx? c2c85@make-stx c2c87@stx-expr c2c89@stx-mark* c2c8b@stx-subst* c2c8d@stx-ae* c2c8f@set-stx-expr! c2c91@set-stx-mark*! c2c93@set-stx-subst*! c2c95@set-stx-ae*! c2c97@rp c2c99@datum->stx c2c9b@gen-mark c2c9d@anti-mark c2c9f@anti-mark? c2ca1@join-wraps c2ca3@mkstx c2ca5@add-mark c2ca7@add-subst c2ca9@syntax-kind? c2cab@syntax-vector->list c2cad@syntax-pair? c2caf@syntax-vector? c2cb1@syntax-null? c2cb3@syntax-list? c2cb5@syntax-car c2cb7@syntax-cdr c2cb9@syntax->list c2cbb@id? c2cbd@id->sym c2cbf@same-marks? c2cc1@bound-id=? c2cc3@free-id=? c2cc5@valid-bound-ids? c2cc7@distinct-bound-ids? c2cc9@bound-id-member? c2ccb@self-evaluating? c2ccd@strip-annotations c2ccf@strip c2cd1@stx->datum c2cd3@same-marks*? c2cd5@id->label c2cd7@id->real-label c2cd9@label->binding c2cdb@make-binding c2cdd@binding-type c2cdf@binding-value c2ce1@raise-unbound-error c2ce3@syntax-type c2cf1@sanitize-binding c2cf3@make-variable-transformer c2cf5@variable-transformer? c2cf7@variable-transformer-procedure c2cf9@make-eval-transformer c2e4a@parse-define c2e4c@parse-define-syntax c2e4e@scheme-stx-hashtable c2e50@scheme-stx c2e52@lexical-var c2e54@lexical-mutable? c2e56@set-lexical-mutable! c2e58@add-lexical c2e5a@add-lexicals c2e5c@letrec-helper c2e5e@letrec-transformer c2e60@letrec*-transformer c2e62@fluid-let-syntax-transformer c2e64@type-descriptor-transformer c2e66@record-type-descriptor-transformer c2e68@record-constructor-descriptor-transformer c2e6a@when-macro c2e6c@unless-macro c2e6e@if-transformer c2e70@and-transformer c2e72@or-transformer c2e74@case-macro c2e76@quote-transformer c2e78@case-lambda-transformer c2e7a@lambda-transformer c2e7c@bless c2e7e@with-syntax-macro c2e80@invalid-fmls-error c2e82@let-macro c2e84@let-values-macro c2e86@let*-values-macro c2e88@trace-lambda-macro c2e8a@trace-define-macro c2e8c@trace-define-syntax-macro c2e8e@trace-let/rec-syntax c2e90@trace-let-syntax-macro c2e92@trace-letrec-syntax-macro c2e94@guard-macro c2e96@define-enumeration-macro c2e98@time-macro c2e9a@delay-macro c2e9c@assert-macro c2e9e@endianness-macro c2ea0@identifier-syntax-macro c2ea2@do-macro c2ea4@let*-macro c2ea6@or-macro c2ea8@and-macro c2eaa@cond-macro c2eac@do-include c2eae@include-macro c2eb0@include-into-macro c2eb2@syntax-rules-macro c2eb4@quasiquote-macro c2eb6@quasisyntax-macro c2eb8@define-struct-macro c2eba@define-record-type-macro c2ebc@define-condition-type-macro c2ebe@incorrect-usage-macro c2ec0@parameterize-macro c2ec2@foreign-call-transformer c2ec4@convert-pattern c2ec6@syntax-dispatch c2ec8@ellipsis? c2eca@underscore? c2ecc@verify-literals c2ece@syntax-case-transformer c2ed0@ellipsis-map c2ed2@syntax-transformer c2ed4@core-macro-transformer c2ed6@symbol-macro c2ed8@macro-transformer c2eda@local-macro-transformer c2edc@do-macro-call c2ede@chi-macro c2ee0@chi-local-macro c2ee2@chi-global-macro c2ee4@chi-expr* c2ee6@chi-application c2ee8@chi-expr c2eea@chi-set! c2eec@verify-formals c2eee@chi-lambda-clause c2ef0@chi-lambda-clause* c2ef2@chi-defun c2ef4@chi-rhs c2ef6@expand-interaction-rhs*/init* c2ef8@chi-rhs* c2efa@find-bound=? c2efc@find-dups c2efe@chi-internal c2f00@parse-module c2f06@c2f01 c2f08@c2f03 c2f0a@c2f02 c2f0d@module-interface? c2f0f@make-module-interface c2f11@module-interface-first-mark c2f13@module-interface-exp-id-vec c2f15@module-interface-exp-lab-vec c2f17@set-module-interface-first-mark! c2f19@set-module-interface-exp-id-vec! c2f1b@set-module-interface-exp-lab-vec! c2f1d@module-interface-exp-id* c2f1f@chi-internal-module c2f21@chi-body* c2f23@expand-transformer c2f25@parse-exports c2f27@parse-library-name c2f29@parse-library c2f2b@parse-import-spec* c2f2d@make-top-rib c2f2f@make-collector c2f31@inv-collector c2f33@vis-collector c2f35@imp-collector c2f37@chi-library-internal c2f39@chi-interaction-expr c2f3b@library-body-expander c2f3d@core-library-expander c2f3f@parse-top-level-program c2f41@top-level-expander c2f47@c2f42 c2f49@c2f44 c2f4b@c2f43 c2f4e@env? c2f50@make-env c2f52@env-names c2f54@env-labels c2f56@env-itc c2f58@set-env-names! c2f5a@set-env-labels! c2f5c@set-env-itc! c2f5e@rp c2f64@c2f5f c2f66@c2f61 c2f68@c2f60 c2f6b@interaction-env? c2f6d@make-interaction-env c2f6f@interaction-env-rib c2f71@interaction-env-r c2f73@interaction-env-locs c2f75@set-interaction-env-rib! c2f77@set-interaction-env-r! c2f79@set-interaction-env-locs! c2f7b@rp c2f7d@interaction-environment-symbols c2f7f@environment-bindings c2f81@parse-binding c2f83@environment? c2f85@environment-symbols c2f87@environment c2f89@null-environment c2f8b@scheme-report-environment c2f8d@expand c2f8f@eval c2f91@library-expander c2f93@boot-library-expand c2f95@rev-map-append c2f97@build-exports c2f99@make-export-subst c2f9b@make-export-env/macros c2f9d@generate-temporaries c2f9f@free-identifier=? c2fa1@bound-identifier=? c2fa3@make-source-condition c2fa5@extract-position-condition c2fa7@expression-position c2fa9@assertion-error c2fab@syntax-error c2fad@syntax-violation* c2faf@syntax-violation c2fb1@identifier? c2fb3@datum->syntax c2fb5@syntax->datum c2fb7@compile-r6rs-top-level c2fb9@pre-compile-r6rs-top-level c2fbb@interaction-environment c2fbd@top-level-context) (begin (set! c2c2e@file-options-macro (lambda (c2fbe@x) ((lambda (c2fc1@valid-option?) (begin (set! c2fc1@valid-option? (lambda (c2fca@x) (and (c2cbb@id? c2fca@x) (memq (c2cbd@id->sym c2fca@x) '(no-fail no-create no-truncate))))) ((lambda (c2fc2@t) ((lambda (c2fc4@ls/false) (if (and c2fc4@ls/false (apply (lambda (c2fc6@opt*) (for-all c2fc1@valid-option? c2fc6@opt*)) c2fc4@ls/false)) (apply (lambda (c2fc8@opt*) (c2e7c@bless (list 'make-file-options (list 'quote c2fc8@opt*)))) c2fc4@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c2fc2@t))) (c2ec6@syntax-dispatch c2fc2@t '(_ . each-any)))) c2fbe@x))) '#f))) (set! c2c30@set-cons (lambda (c2fcc@x c2fcd@ls) (if (memq c2fcc@x c2fcd@ls) c2fcd@ls (cons c2fcc@x c2fcd@ls)))) (set! c2c32@set-union (lambda (c2fd0@ls1 c2fd1@ls2) (if (null? c2fd0@ls1) c2fd1@ls2 (if (memq (car c2fd0@ls1) c2fd1@ls2) (c2c32@set-union (cdr c2fd0@ls1) c2fd1@ls2) (cons (car c2fd0@ls1) (c2c32@set-union (cdr c2fd0@ls1) c2fd1@ls2)))))) (set! c2c37@top-mark* '(top)) (set! c2c39@top-marked? (lambda (c2fd4@m*) (memq 'top c2fd4@m*))) (set! c2c3b@gen-lexical (lambda (c2fd6@sym) (if (symbol? c2fd6@sym) (gensym c2fd6@sym) (if (c2c83@stx? c2fd6@sym) (c2c3b@gen-lexical (c2cbd@id->sym c2fd6@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" c2fd6@sym))))) (set! c2c3d@gen-global (lambda (c2fd8@x) (c2c3b@gen-lexical c2fd8@x))) (set! c2c3f@gen-label (lambda (c2fda@_) (gensym))) (set! c2c41@gen-top-level-label (lambda (c2fdc@id c2fdd@rib) ((lambda (c2fe1@find) (begin (set! c2fe1@find (lambda (c2fec@sym c2fed@mark* c2fee@sym* c2fef@mark** c2ff0@label*) (and (pair? c2fee@sym*) (if (and (eq? c2fec@sym (car c2fee@sym*)) (c2cbf@same-marks? c2fed@mark* (car c2fef@mark**))) (car c2ff0@label*) (c2fe1@find c2fec@sym c2fed@mark* (cdr c2fee@sym*) (cdr c2fef@mark**) (cdr c2ff0@label*)))))) ((lambda (c2fe2@sym c2fe3@mark*) ((lambda (c2fe6@sym*) ((lambda (c2fe8@t) (if c2fe8@t ((lambda (c2fea@label) (if (c2ade@c297e@imported-label->binding c2fea@label) (gensym) c2fea@label)) c2fe8@t) (gensym))) (and (memq c2fe2@sym (c2c56@rib-sym* c2fdd@rib)) (c2fe1@find c2fe2@sym c2fe3@mark* c2fe6@sym* (c2c58@rib-mark** c2fdd@rib) (c2c5a@rib-label* c2fdd@rib))))) (c2c56@rib-sym* c2fdd@rib))) (c2cbd@id->sym c2fdc@id) (c2c89@stx-mark* c2fdc@id)))) '#f))) (set! c2c43@gen-define-label+loc (lambda (c2ff6@id c2ff7@rib) ((lambda (c2ffa@t) (if c2ffa@t ((lambda (c2ffc@env) ((lambda (c2ffe@label c2fff@locs) (values c2ffe@label ((lambda (c3002@t) (if c3002@t (cdr c3002@t) ((lambda (c3004@loc) (begin (c2f79@set-interaction-env-locs! c2ffc@env (cons (cons c2ffe@label c3004@loc) c2fff@locs)) c3004@loc)) (c2c3b@gen-lexical c2ff6@id)))) (assq c2ffe@label c2fff@locs)))) (c2c41@gen-top-level-label c2ff6@id c2ff7@rib) (c2f73@interaction-env-locs c2ffc@env))) c2ffa@t) (values (gensym) (c2c3b@gen-lexical c2ff6@id)))) (c2fbd@top-level-context)))) (set! c2c45@gen-define-label (lambda (c3006@id c3007@rib) (if (c2fbd@top-level-context) (c2c41@gen-top-level-label c3006@id c3007@rib) (gensym)))) (set! c2c4b@c2c46 (make-record-type-descriptor 'rib '#f 'c2c49 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! c2c4d@c2c48 '#f) (set! c2c4f@c2c47 (make-record-constructor-descriptor c2c4b@c2c46 '#f c2c4d@c2c48)) (set! c2c52@rib? (record-predicate c2c4b@c2c46)) (set! c2c54@make-rib (record-constructor c2c4f@c2c47)) (set! c2c56@rib-sym* (record-accessor c2c4b@c2c46 '0)) (set! c2c58@rib-mark** (record-accessor c2c4b@c2c46 '1)) (set! c2c5a@rib-label* (record-accessor c2c4b@c2c46 '2)) (set! c2c5c@rib-sealed/freq (record-accessor c2c4b@c2c46 '3)) (set! c2c5e@rib-cache (record-accessor c2c4b@c2c46 '4)) (set! c2c60@set-rib-sym*! (record-mutator c2c4b@c2c46 '0)) (set! c2c62@set-rib-mark**! (record-mutator c2c4b@c2c46 '1)) (set! c2c64@set-rib-label*! (record-mutator c2c4b@c2c46 '2)) (set! c2c66@set-rib-sealed/freq! (record-mutator c2c4b@c2c46 '3)) (set! c2c68@set-rib-cache! (record-mutator c2c4b@c2c46 '4)) (set! c2c6a@make-empty-rib (lambda () (c2c54@make-rib '() '() '() '#f '#f))) (set! c2c6c@extend-rib! (lambda (c300a@rib c300b@id c300c@label) ((lambda (c3011@find) (begin (set! c3011@find (lambda (c301e@sym c301f@mark* c3020@sym* c3021@mark** c3022@label*) (and (pair? c3020@sym*) (if (and (eq? c301e@sym (car c3020@sym*)) (c2cbf@same-marks? c301f@mark* (car c3021@mark**))) c3022@label* (c3011@find c301e@sym c301f@mark* (cdr c3020@sym*) (cdr c3021@mark**) (cdr c3022@label*)))))) (begin (if (c2c5c@rib-sealed/freq c300a@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" c300a@rib) (void)) ((lambda (c3012@sym c3013@mark*) ((lambda (c3016@sym*) ((lambda (c3018@t) (if c3018@t ((lambda (c301a@p) (if (not (eq? c300c@label (car c301a@p))) (if (c2fbd@top-level-context) (set-car! c301a@p c300c@label) (c2faf@syntax-violation '#f '"multiple definitions of identifier" c300b@id)) (void))) c3018@t) (begin (if (c2c5e@rib-cache c300a@rib) (hashtable-update! (c2c5e@rib-cache c300a@rib) c3012@sym (lambda (c301c@e) (cons (cons c3013@mark* c300c@label) c301c@e)) '()) (void)) (c2c60@set-rib-sym*! c300a@rib (cons c3012@sym c3016@sym*)) (c2c62@set-rib-mark**! c300a@rib (cons c3013@mark* (c2c58@rib-mark** c300a@rib))) (c2c64@set-rib-label*! c300a@rib (cons c300c@label (c2c5a@rib-label* c300a@rib)))))) (and (memq c3012@sym (c2c56@rib-sym* c300a@rib)) (c3011@find c3012@sym c3013@mark* c3016@sym* (c2c58@rib-mark** c300a@rib) (c2c5a@rib-label* c300a@rib))))) (c2c56@rib-sym* c300a@rib))) (c2cbd@id->sym c300b@id) (c2c89@stx-mark* c300b@id))))) '#f))) (set! c2c6e@extend-rib/nc! (lambda (c3028@rib c3029@id c302a@label) ((lambda (c302e@sym c302f@mark*) ((lambda (c3032@sym*) (begin (if (c2c5e@rib-cache c3028@rib) (hashtable-update! (c2c5e@rib-cache c3028@rib) c302e@sym (lambda (c3034@e) (cons (cons c302f@mark* c302a@label) c3034@e)) '()) (void)) (c2c60@set-rib-sym*! c3028@rib (cons c302e@sym c3032@sym*)) (c2c62@set-rib-mark**! c3028@rib (cons c302f@mark* (c2c58@rib-mark** c3028@rib))) (c2c64@set-rib-label*! c3028@rib (cons c302a@label (c2c5a@rib-label* c3028@rib))))) (c2c56@rib-sym* c3028@rib))) (c2cbd@id->sym c3029@id) (c2c89@stx-mark* c3029@id)))) (set! c2c70@make-rib-map (lambda (c3036@sym*) ((lambda (c3038@ht) ((letrec ((c303a@f (lambda (c303c@i c303d@sym*) (if (null? c303d@sym*) c3038@ht (begin (hashtable-update! c3038@ht (car c303d@sym*) (lambda (c3040@x) (cons c303c@i c3040@x)) '()) (c303a@f (+ c303c@i '1) (cdr c303d@sym*))))))) c303a@f) '0 c3036@sym*)) (make-eq-hashtable)))) (set! c2c72@seal-rib! (lambda (c3042@rib) ((lambda (c3044@sym*) (if (not (null? c3044@sym*)) (begin (c2c60@set-rib-sym*! c3042@rib (list->vector c3044@sym*)) (c2c62@set-rib-mark**! c3042@rib (list->vector (c2c58@rib-mark** c3042@rib))) (c2c64@set-rib-label*! c3042@rib (list->vector (c2c5a@rib-label* c3042@rib))) (c2c66@set-rib-sealed/freq! c3042@rib (c2c70@make-rib-map c3044@sym*))) (void))) (c2c56@rib-sym* c3042@rib)))) (set! c2c74@unseal-rib! (lambda (c3046@rib) (if (c2c5c@rib-sealed/freq c3046@rib) (begin (c2c66@set-rib-sealed/freq! c3046@rib '#f) (c2c60@set-rib-sym*! c3046@rib (vector->list (c2c56@rib-sym* c3046@rib))) (c2c62@set-rib-mark**! c3046@rib (vector->list (c2c58@rib-mark** c3046@rib))) (c2c64@set-rib-label*! c3046@rib (vector->list (c2c5a@rib-label* c3046@rib)))) (void)))) (set! c2c76@make-full-rib (lambda (c3048@id* c3049@label*) ((lambda (c304c@r) (begin (c2c72@seal-rib! c304c@r) c304c@r)) (c2c54@make-rib (map c2cbd@id->sym c3048@id*) (map c2c89@stx-mark* c3048@id*) c3049@label* '#f '#f)))) (set! c2c7c@c2c77 (make-record-type-descriptor 'stx '#f 'c2c7a '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! c2c7e@c2c79 '#f) (set! c2c80@c2c78 (make-record-constructor-descriptor c2c7c@c2c77 '#f c2c7e@c2c79)) (set! c2c83@stx? (record-predicate c2c7c@c2c77)) (set! c2c85@make-stx (record-constructor c2c80@c2c78)) (set! c2c87@stx-expr (record-accessor c2c7c@c2c77 '0)) (set! c2c89@stx-mark* (record-accessor c2c7c@c2c77 '1)) (set! c2c8b@stx-subst* (record-accessor c2c7c@c2c77 '2)) (set! c2c8d@stx-ae* (record-accessor c2c7c@c2c77 '3)) (set! c2c8f@set-stx-expr! (record-mutator c2c7c@c2c77 '0)) (set! c2c91@set-stx-mark*! (record-mutator c2c7c@c2c77 '1)) (set! c2c93@set-stx-subst*! (record-mutator c2c7c@c2c77 '2)) (set! c2c95@set-stx-ae*! (record-mutator c2c7c@c2c77 '3)) (set! c2c97@rp (c2862@c2789@make-record-printer 'stx (lambda (c304e@x c304f@p c3050@wr) (begin (display '"#<syntax " c304f@p) (write (c2cd1@stx->datum c304e@x) c304f@p) ((lambda (c3054@expr) (if (c285a@c2779@annotation? c3054@expr) ((lambda (c3056@src) (if (pair? c3056@src) (begin (display '" [" c304f@p) (display (cdr c3056@src) c304f@p) (display '" of " c304f@p) (display (car c3056@src) c304f@p) (display '"]" c304f@p)) (void))) (c285b@c277b@annotation-source c3054@expr)) (void))) (c2c87@stx-expr c304e@x)) (display '">" c304f@p))))) (set! c2c99@datum->stx (lambda (c3058@id c3059@datum) (c2c85@make-stx c3059@datum (c2c89@stx-mark* c3058@id) (c2c8b@stx-subst* c3058@id) (c2c8d@stx-ae* c3058@id)))) (set! c2c9b@gen-mark (lambda () (string '#\m))) (set! c2c9d@anti-mark '#f) (set! c2c9f@anti-mark? not) (set! c2ca1@join-wraps (lambda (c305c@m1* c305d@s1* c305e@ae1* c305f@e) ((lambda (c3065@cancel) (begin (set! c3065@cancel (lambda (c306c@ls1 c306d@ls2) ((letrec ((c3070@f (lambda (c3072@x c3073@ls1) (if (null? c3073@ls1) (cdr c306d@ls2) (cons c3072@x (c3070@f (car c3073@ls1) (cdr c3073@ls1))))))) c3070@f) (car c306c@ls1) (cdr c306c@ls1)))) ((lambda (c3066@m2* c3067@s2* c3068@ae2*) (if (and (not (null? c305c@m1*)) (not (null? c3066@m2*)) (c2c9f@anti-mark? (car c3066@m2*))) (values (c3065@cancel c305c@m1* c3066@m2*) (c3065@cancel c305d@s1* c3067@s2*) (c3065@cancel c305e@ae1* c3068@ae2*)) (values (append c305c@m1* c3066@m2*) (append c305d@s1* c3067@s2*) (append c305e@ae1* c3068@ae2*)))) (c2c89@stx-mark* c305f@e) (c2c8b@stx-subst* c305f@e) (c2c8d@stx-ae* c305f@e)))) '#f))) (set! c2ca3@mkstx (lambda (c3076@e c3077@m* c3078@s* c3079@ae*) (if (and (c2c83@stx? c3076@e) (not (c2c39@top-marked? c3077@m*))) (call-with-values (lambda () (c2ca1@join-wraps c3077@m* c3078@s* c3079@ae* c3076@e)) (lambda (c3084@c307f c3085@c3081 c3086@c3083) ((lambda (c308a@ae* c308b@s* c308c@m*) (c2c85@make-stx (c2c87@stx-expr c3076@e) c308c@m* c308b@s* c308a@ae*)) c3086@c3083 c3085@c3081 c3084@c307f))) (c2c85@make-stx c3076@e c3077@m* c3078@s* c3079@ae*)))) (set! c2ca5@add-mark (lambda (c3090@m c3091@e c3092@ae) (c2ca3@mkstx c3091@e (list c3090@m) '(shift) (list c3092@ae)))) (set! c2ca7@add-subst (lambda (c3096@subst c3097@e) (c2ca3@mkstx c3097@e '() (list c3096@subst) '()))) (set! c2ca9@syntax-kind? (lambda (c309a@x c309b@p?) (if (c2c83@stx? c309a@x) (c2ca9@syntax-kind? (c2c87@stx-expr c309a@x) c309b@p?) (if (c285a@c2779@annotation? c309a@x) (c2ca9@syntax-kind? (c285c@c277d@annotation-expression c309a@x) c309b@p?) (c309b@p? c309a@x))))) (set! c2cab@syntax-vector->list (lambda (c309e@x) (if (c2c83@stx? c309e@x) ((lambda (c30a0@ls c30a1@m* c30a2@s* c30a3@ae*) (map (lambda (c30a8@x) (c2ca3@mkstx c30a8@x c30a1@m* c30a2@s* c30a3@ae*)) c30a0@ls)) (c2cab@syntax-vector->list (c2c87@stx-expr c309e@x)) (c2c89@stx-mark* c309e@x) (c2c8b@stx-subst* c309e@x) (c2c8d@stx-ae* c309e@x)) (if (c285a@c2779@annotation? c309e@x) (c2cab@syntax-vector->list (c285c@c277d@annotation-expression c309e@x)) (if (vector? c309e@x) (vector->list c309e@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" c309e@x)))))) (set! c2cad@syntax-pair? (lambda (c30aa@x) (c2ca9@syntax-kind? c30aa@x pair?))) (set! c2caf@syntax-vector? (lambda (c30ac@x) (c2ca9@syntax-kind? c30ac@x vector?))) (set! c2cb1@syntax-null? (lambda (c30ae@x) (c2ca9@syntax-kind? c30ae@x null?))) (set! c2cb3@syntax-list? (lambda (c30b0@x) (or (c2cb1@syntax-null? c30b0@x) (and (c2cad@syntax-pair? c30b0@x) (c2cb3@syntax-list? (c2cb7@syntax-cdr c30b0@x)))))) (set! c2cb5@syntax-car (lambda (c30b2@x) (if (c2c83@stx? c30b2@x) (c2ca3@mkstx (c2cb5@syntax-car (c2c87@stx-expr c30b2@x)) (c2c89@stx-mark* c30b2@x) (c2c8b@stx-subst* c30b2@x) (c2c8d@stx-ae* c30b2@x)) (if (c285a@c2779@annotation? c30b2@x) (c2cb5@syntax-car (c285c@c277d@annotation-expression c30b2@x)) (if (pair? c30b2@x) (car c30b2@x) (assertion-violation 'syntax-car '"BUG: not a pair" c30b2@x)))))) (set! c2cb7@syntax-cdr (lambda (c30b4@x) (if (c2c83@stx? c30b4@x) (c2ca3@mkstx (c2cb7@syntax-cdr (c2c87@stx-expr c30b4@x)) (c2c89@stx-mark* c30b4@x) (c2c8b@stx-subst* c30b4@x) (c2c8d@stx-ae* c30b4@x)) (if (c285a@c2779@annotation? c30b4@x) (c2cb7@syntax-cdr (c285c@c277d@annotation-expression c30b4@x)) (if (pair? c30b4@x) (cdr c30b4@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" c30b4@x)))))) (set! c2cb9@syntax->list (lambda (c30b6@x) (if (c2cad@syntax-pair? c30b6@x) (cons (c2cb5@syntax-car c30b6@x) (c2cb9@syntax->list (c2cb7@syntax-cdr c30b6@x))) (if (c2cb1@syntax-null? c30b6@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" c30b6@x))))) (set! c2cbb@id? (lambda (c30b8@x) (and (c2c83@stx? c30b8@x) ((lambda (c30ba@expr) (symbol? (if (c285a@c2779@annotation? c30ba@expr) (c2859@c2777@annotation-stripped c30ba@expr) c30ba@expr))) (c2c87@stx-expr c30b8@x))))) (set! c2cbd@id->sym (lambda (c30bc@x) (begin (if (not (c2c83@stx? c30bc@x)) (error 'id->sym '"BUG in ikarus: not an id" c30bc@x) (void)) ((lambda (c30be@expr) ((lambda (c30c0@sym) (if (symbol? c30c0@sym) c30c0@sym (error 'id->sym '"BUG in ikarus: not an id" c30bc@x))) (if (c285a@c2779@annotation? c30be@expr) (c2859@c2777@annotation-stripped c30be@expr) c30be@expr))) (c2c87@stx-expr c30bc@x))))) (set! c2cbf@same-marks? (lambda (c30c2@x c30c3@y) (or (and (null? c30c2@x) (null? c30c3@y)) (and (pair? c30c2@x) (pair? c30c3@y) (eq? (car c30c2@x) (car c30c3@y)) (c2cbf@same-marks? (cdr c30c2@x) (cdr c30c3@y)))))) (set! c2cc1@bound-id=? (lambda (c30c6@x c30c7@y) (and (eq? (c2cbd@id->sym c30c6@x) (c2cbd@id->sym c30c7@y)) (c2cbf@same-marks? (c2c89@stx-mark* c30c6@x) (c2c89@stx-mark* c30c7@y))))) (set! c2cc3@free-id=? (lambda (c30ca@i c30cb@j) ((lambda (c30ce@t0 c30cf@t1) (if (or c30ce@t0 c30cf@t1) (eq? c30ce@t0 c30cf@t1) (eq? (c2cbd@id->sym c30ca@i) (c2cbd@id->sym c30cb@j)))) (c2cd7@id->real-label c30ca@i) (c2cd7@id->real-label c30cb@j)))) (set! c2cc5@valid-bound-ids? (lambda (c30d2@id*) (and (for-all c2cbb@id? c30d2@id*) (c2cc7@distinct-bound-ids? c30d2@id*)))) (set! c2cc7@distinct-bound-ids? (lambda (c30d4@id*) (or (null? c30d4@id*) (and (not (c2cc9@bound-id-member? (car c30d4@id*) (cdr c30d4@id*))) (c2cc7@distinct-bound-ids? (cdr c30d4@id*)))))) (set! c2cc9@bound-id-member? (lambda (c30d6@id c30d7@id*) (and (pair? c30d7@id*) (or (c2cc1@bound-id=? c30d6@id (car c30d7@id*)) (c2cc9@bound-id-member? c30d6@id (cdr c30d7@id*)))))) (set! c2ccb@self-evaluating? (lambda (c30da@x) (or (number? c30da@x) (string? c30da@x) (char? c30da@x) (boolean? c30da@x) (regexp? c30da@x) (bytevector? c30da@x)))) (set! c2ccd@strip-annotations (lambda (c30dc@x) (if (pair? c30dc@x) (cons (c2ccd@strip-annotations (car c30dc@x)) (c2ccd@strip-annotations (cdr c30dc@x))) (if (vector? c30dc@x) (vector-map c2ccd@strip-annotations c30dc@x) (if (c285a@c2779@annotation? c30dc@x) (c2859@c2777@annotation-stripped c30dc@x) c30dc@x))))) (set! c2ccf@strip (lambda (c30de@x c30df@m*) (if (c2c39@top-marked? c30df@m*) (if (or (c285a@c2779@annotation? c30de@x) (and (pair? c30de@x) (c285a@c2779@annotation? (car c30de@x))) (and (vector? c30de@x) (> (vector-length c30de@x) '0) (c285a@c2779@annotation? (vector-ref c30de@x '0)))) (c2ccd@strip-annotations c30de@x) c30de@x) ((letrec ((c30e2@f (lambda (c30e4@x) (if (c2c83@stx? c30e4@x) (c2ccf@strip (c2c87@stx-expr c30e4@x) (c2c89@stx-mark* c30e4@x)) (if (c285a@c2779@annotation? c30e4@x) (c2859@c2777@annotation-stripped c30e4@x) (if (pair? c30e4@x) ((lambda (c30e6@a c30e7@d) (if (and (eq? c30e6@a (car c30e4@x)) (eq? c30e7@d (cdr c30e4@x))) c30e4@x (cons c30e6@a c30e7@d))) (c30e2@f (car c30e4@x)) (c30e2@f (cdr c30e4@x))) (if (vector? c30e4@x) ((lambda (c30ea@old) ((lambda (c30ec@new) (if (for-all eq? c30ea@old c30ec@new) c30e4@x (list->vector c30ec@new))) (map c30e2@f c30ea@old))) (vector->list c30e4@x)) c30e4@x))))))) c30e2@f) c30de@x)))) (set! c2cd1@stx->datum (lambda (c30ee@x) (c2ccf@strip c30ee@x '()))) (set! c2cd3@same-marks*? (lambda (c30f0@mark* c30f1@mark** c30f2@si) (if (null? c30f2@si) '#f (if (c2cbf@same-marks? c30f0@mark* (vector-ref c30f1@mark** (car c30f2@si))) (car c30f2@si) (c2cd3@same-marks*? c30f0@mark* c30f1@mark** (cdr c30f2@si)))))) (set! c2cd5@id->label (lambda (c30f6@id) (or (c2cd7@id->real-label c30f6@id) ((lambda (c30f8@t) (if c30f8@t ((lambda (c30fa@env) ((lambda (c30fc@rib) (call-with-values (lambda () (c2c43@gen-define-label+loc c30f6@id c30fc@rib)) (lambda (c3102@c30ff c3103@c3101) ((lambda (c3106@loc_ c3107@lab) (begin (c2c6c@extend-rib! c30fc@rib c30f6@id c3107@lab) c3107@lab)) c3103@c3101 c3102@c30ff)))) (c2f6f@interaction-env-rib c30fa@env))) c30f8@t) '#f)) (c2fbd@top-level-context))))) (set! c2cd7@id->real-label (lambda (c310a@id) ((lambda (c310c@sym) ((letrec ((c310e@search (lambda (c3110@subst* c3111@mark*) (if (null? c3110@subst*) '#f (if (eq? (car c3110@subst*) 'shift) (c310e@search (cdr c3110@subst*) (cdr c3111@mark*)) ((lambda (c3114@rib) ((lambda (c3116@t) (if c3116@t ((lambda (c3118@ht) ((lambda (c311a@si) ((lambda (c311c@i) (if c311c@i (vector-ref (c2c5a@rib-label* c3114@rib) c311c@i) (c310e@search (cdr c3110@subst*) c3111@mark*))) (and c311a@si (c2cd3@same-marks*? c3111@mark* (c2c58@rib-mark** c3114@rib) (reverse c311a@si))))) (hashtable-ref c3118@ht c310c@sym '#f))) c3116@t) ((letrec ((c311e@f (lambda (c3120@sym* c3121@mark** c3122@label*) (if (null? c3120@sym*) (c310e@search (cdr c3110@subst*) c3111@mark*) (if (and (eq? (car c3120@sym*) c310c@sym) (c2cbf@same-marks? (car c3121@mark**) c3111@mark*)) (car c3122@label*) (c311e@f (cdr c3120@sym*) (cdr c3121@mark**) (cdr c3122@label*))))))) c311e@f) (c2c56@rib-sym* c3114@rib) (c2c58@rib-mark** c3114@rib) (c2c5a@rib-label* c3114@rib)))) (c2c5c@rib-sealed/freq c3114@rib))) (car c3110@subst*))))))) c310e@search) (c2c8b@stx-subst* c310a@id) (c2c89@stx-mark* c310a@id))) (c2cbd@id->sym c310a@id)))) (set! c2cd9@label->binding (lambda (c3126@x c3127@r) ((lambda (c312a@t) (if c312a@t ((lambda (c312c@b) (if (and (pair? c312c@b) (eq? (car c312c@b) '$core-rtd)) (cons '$rtd (map c2e7c@bless (cdr c312c@b))) (if (and (pair? c312c@b) (eq? (car c312c@b) 'global-rtd)) ((lambda (c312e@lib c312f@loc) (cons '$rtd (symbol-value c312f@loc))) (cadr c312c@b) (cddr c312c@b)) c312c@b))) c312a@t) ((lambda (c3132@t) (if c3132@t (cdr c3132@t) ((lambda (c3134@t) (if c3134@t ((lambda (c3136@env) ((lambda (c3138@t) (if c3138@t ((lambda (c313a@p) (cons* 'lexical (cdr c313a@p) '#f)) c3138@t) '(displaced-lexical . #f))) (assq c3126@x (c2f73@interaction-env-locs c3136@env)))) c3134@t) '(displaced-lexical . #f))) (c2fbd@top-level-context)))) (assq c3126@x c3127@r)))) (c2ade@c297e@imported-label->binding c3126@x)))) (set! c2cdb@make-binding cons) (set! c2cdd@binding-type car) (set! c2cdf@binding-value cdr) (set! c2ce1@raise-unbound-error (lambda (c313c@id) (c2fad@syntax-violation* '#f '"unbound identifier" c313c@id (c4cec@c4b32@make-undefined-violation)))) (set! c2ce3@syntax-type (lambda (c313e@e c313f@r) (if (c2cbb@id? c313e@e) ((lambda (c3142@id) ((lambda (c3144@label) ((lambda (c3146@b) ((lambda (c3148@type) ((lambda () (begin (if (not c3144@label) (c2ce1@raise-unbound-error c3142@id) (void)) ((lambda (c314a@t) (if (memv c314a@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values c3148@type (c2cdf@binding-value c3146@b) c3142@id) (values 'other '#f '#f))) c3148@type))))) (c2cdd@binding-type c3146@b))) (c2cd9@label->binding c3144@label c313f@r))) (c2cd5@id->label c3142@id))) c313e@e) (if (c2cad@syntax-pair? c313e@e) ((lambda (c314c@id) (if (c2cbb@id? c314c@id) ((lambda (c314e@label) ((lambda (c3150@b) ((lambda (c3152@type) ((lambda () (begin (if (not c314e@label) (c2ce1@raise-unbound-error c314c@id) (void)) ((lambda (c3154@t) (if (memv c3154@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values c3152@type (c2cdf@binding-value c3150@b) c314c@id) (values 'call '#f '#f))) c3152@type))))) (c2cdd@binding-type c3150@b))) (c2cd9@label->binding c314e@label c313f@r))) (c2cd5@id->label c314c@id)) (values 'call '#f '#f))) (c2cb5@syntax-car c313e@e)) ((lambda (c3156@d) (if (c2ccb@self-evaluating? c3156@d) (values 'constant c3156@d '#f) (values 'other '#f '#f))) (c2cd1@stx->datum c313e@e)))))) (set! c2cf1@sanitize-binding (lambda (c3158@x c3159@src) (if (procedure? c3158@x) (cons* 'local-macro c3158@x c3159@src) (if (and (pair? c3158@x) (eq? (car c3158@x) 'macro!) (procedure? (cdr c3158@x))) (cons* 'local-macro! (cdr c3158@x) c3159@src) (if (and (pair? c3158@x) (eq? (car c3158@x) '$rtd)) c3158@x (assertion-violation 'expand '"invalid transformer" c3158@x)))))) (set! c2cf3@make-variable-transformer (lambda (c315c@x) (if (procedure? c315c@x) (cons 'macro! c315c@x) (assertion-violation 'make-variable-transformer '"not a procedure" c315c@x)))) (set! c2cf5@variable-transformer? (lambda (c315e@x) (and (pair? c315e@x) (eq? (car c315e@x) 'macro!) (procedure? (cdr c315e@x))))) (set! c2cf7@variable-transformer-procedure (lambda (c3160@x) (if (c2cf5@variable-transformer? c3160@x) (cdr c3160@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" c3160@x)))) (set! c2cf9@make-eval-transformer (lambda (c3162@x) (c2cf1@sanitize-binding (eval-core (c28b9@c2871@expanded->core c3162@x)) c3162@x))) (set! c2e4a@parse-define (lambda (c3164@x) ((lambda (c3166@t) ((lambda (c3168@ls/false) (if (and c3168@ls/false (apply (lambda (c316a@id c316b@fmls c316c@b c316d@b*) (c2cbb@id? c316a@id)) c3168@ls/false)) (apply (lambda (c3172@id c3173@fmls c3174@b c3175@b*) (begin (c2eec@verify-formals c3173@fmls c3164@x) (values c3172@id (cons 'defun (cons c3173@fmls (cons c3174@b c3175@b*)))))) c3168@ls/false) ((lambda (c317a@t) ((lambda (c317c@ls/false) (if (and c317c@ls/false (apply (lambda (c317e@id c317f@val) (c2cbb@id? c317e@id)) c317c@ls/false)) (apply (lambda (c3182@id c3183@val) (values c3182@id (cons 'expr c3183@val))) c317c@ls/false) ((lambda (c3186@t) ((lambda (c3188@ls/false) (if (and c3188@ls/false (apply (lambda (c318a@id) (c2cbb@id? c318a@id)) c3188@ls/false)) (apply (lambda (c318c@id) (values c318c@id (cons 'expr (c2e7c@bless '(void))))) c3188@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3186@t))) (c2ec6@syntax-dispatch c3186@t '(_ any)))) c317a@t))) (c2ec6@syntax-dispatch c317a@t '(_ any any)))) c3166@t))) (c2ec6@syntax-dispatch c3166@t '(_ (any . any) any . each-any)))) c3164@x))) (set! c2e4c@parse-define-syntax (lambda (c318e@x) ((lambda (c3190@t) ((lambda (c3192@ls/false) (if (and c3192@ls/false (apply (lambda (c3194@id c3195@val) (c2cbb@id? c3194@id)) c3192@ls/false)) (apply (lambda (c3198@id c3199@val) (values c3198@id c3199@val)) c3192@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3190@t))) (c2ec6@syntax-dispatch c3190@t '(_ any any)))) c318e@x))) (set! c2e4e@scheme-stx-hashtable (make-eq-hashtable)) (set! c2e50@scheme-stx (lambda (c319c@sym) (or (hashtable-ref c2e4e@scheme-stx-hashtable c319c@sym '#f) ((lambda (c319e@subst) ((lambda (c31a0@stx) ((lambda (c31a2@stx) ((lambda () (begin (hashtable-set! c2e4e@scheme-stx-hashtable c319c@sym c31a2@stx) c31a2@stx)))) ((lambda (c31a4@t) (if c31a4@t ((lambda (c31a6@x) ((lambda (c31a8@name c31a9@label) (c2ca7@add-subst (c2c54@make-rib (list c31a8@name) (list c2c37@top-mark*) (list c31a9@label) '#f '#f) c31a0@stx)) (car c31a6@x) (cdr c31a6@x))) c31a4@t) c31a0@stx)) (assq c319c@sym c319e@subst)))) (c2c85@make-stx c319c@sym c2c37@top-mark* '() '()))) (c2ab4@c292a@library-subst (c2ad8@c2972@find-library-by-name '(psyntax system $all))))))) (set! c2e52@lexical-var car) (set! c2e54@lexical-mutable? cdr) (set! c2e56@set-lexical-mutable! set-cdr!) (set! c2e58@add-lexical (lambda (c31ac@lab c31ad@lex c31ae@r) (cons (cons* c31ac@lab 'lexical c31ad@lex '#f) c31ae@r))) (set! c2e5a@add-lexicals (lambda (c31b2@lab* c31b3@lex* c31b4@r) (if (null? c31b2@lab*) c31b4@r (c2e5a@add-lexicals (cdr c31b2@lab*) (cdr c31b3@lex*) (c2e58@add-lexical (car c31b2@lab*) (car c31b3@lex*) c31b4@r))))) (set! c2e5c@letrec-helper (lambda (c31b8@e c31b9@r c31ba@mr c31bb@build) ((lambda (c31c0@t) ((lambda (c31c2@ls/false) (if c31c2@ls/false (apply (lambda (c31c4@lhs* c31c5@rhs* c31c6@b c31c7@b*) (if (not (c2cc5@valid-bound-ids? c31c4@lhs*)) (c2e80@invalid-fmls-error c31b8@e c31c4@lhs*) ((lambda (c31cc@lex* c31cd@lab*) ((lambda (c31d0@rib c31d1@r) ((lambda (c31d4@body c31d5@rhs*) (c31bb@build '#f c31cc@lex* c31d5@rhs* c31d4@body)) (c2efe@chi-internal (c2ca7@add-subst c31d0@rib (cons c31c6@b c31c7@b*)) c31d1@r c31ba@mr) (c2ee4@chi-expr* (map (lambda (c31d8@x) (c2ca7@add-subst c31d0@rib c31d8@x)) c31c5@rhs*) c31d1@r c31ba@mr))) (c2c76@make-full-rib c31c4@lhs* c31cd@lab*) (c2e5a@add-lexicals c31cd@lab* c31cc@lex* c31b9@r))) (map c2c3b@gen-lexical c31c4@lhs*) (map c2c3f@gen-label c31c4@lhs*)))) c31c2@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c31c0@t))) (c2ec6@syntax-dispatch c31c0@t '(_ #(each (any any)) any . each-any)))) c31b8@e))) (set! c2e5e@letrec-transformer (lambda (c31da@e c31db@r c31dc@mr) (c2e5c@letrec-helper c31da@e c31db@r c31dc@mr c2c1c@c2b8d@build-letrec))) (set! c2e60@letrec*-transformer (lambda (c31e0@e c31e1@r c31e2@mr) (c2e5c@letrec-helper c31e0@e c31e1@r c31e2@mr c2c1d@c2b8f@build-letrec*))) (set! c2e62@fluid-let-syntax-transformer (lambda (c31e6@e c31e7@r c31e8@mr) ((lambda (c31ed@lookup) (begin (set! c31ed@lookup (lambda (c3200@x) (or (c2cd5@id->label c3200@x) (c2faf@syntax-violation '#f '"unbound identifier" c31e6@e c3200@x)))) ((lambda (c31ee@t) ((lambda (c31f0@ls/false) (if c31f0@ls/false (apply (lambda (c31f2@lhs* c31f3@rhs* c31f4@b c31f5@b*) (if (not (c2cc5@valid-bound-ids? c31f2@lhs*)) (c2e80@invalid-fmls-error c31e6@e c31f2@lhs*) ((lambda (c31fa@lab* c31fb@rhs*) (c2efe@chi-internal (cons c31f4@b c31f5@b*) (append (map cons c31fa@lab* c31fb@rhs*) c31e7@r) (append (map cons c31fa@lab* c31fb@rhs*) c31e8@mr))) (map c31ed@lookup c31f2@lhs*) (map (lambda (c31fe@x) (c2cf9@make-eval-transformer (c2f23@expand-transformer c31fe@x c31e8@mr))) c31f3@rhs*)))) c31f0@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c31ee@t))) (c2ec6@syntax-dispatch c31ee@t '(_ #(each (any any)) any . each-any)))) c31e6@e))) '#f))) (set! c2e64@type-descriptor-transformer (lambda (c3202@e c3203@r c3204@mr) ((lambda (c3208@t) ((lambda (c320a@ls/false) (if (and c320a@ls/false (apply (lambda (c320c@id) (c2cbb@id? c320c@id)) c320a@ls/false)) (apply (lambda (c320e@id) ((lambda (c3210@lab) ((lambda (c3212@b) ((lambda (c3214@type) ((lambda () (begin (if (not c3210@lab) (c2ce1@raise-unbound-error c320e@id) (void)) (if (not (and (eq? c3214@type '$rtd) (not (list? (c2cdf@binding-value c3212@b))))) (c2faf@syntax-violation '#f '"not a record type" c3202@e) (void)) (list 'quote (c2cdf@binding-value c3212@b)))))) (c2cdd@binding-type c3212@b))) (c2cd9@label->binding c3210@lab c3203@r))) (c2cd5@id->label c320e@id))) c320a@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3208@t))) (c2ec6@syntax-dispatch c3208@t '(_ any)))) c3202@e))) (set! c2e66@record-type-descriptor-transformer (lambda (c3216@e c3217@r c3218@mr) ((lambda (c321c@t) ((lambda (c321e@ls/false) (if (and c321e@ls/false (apply (lambda (c3220@id) (c2cbb@id? c3220@id)) c321e@ls/false)) (apply (lambda (c3222@id) ((lambda (c3224@lab) ((lambda (c3226@b) ((lambda (c3228@type) ((lambda () (begin (if (not c3224@lab) (c2ce1@raise-unbound-error c3222@id) (void)) (if (not (and (eq? c3228@type '$rtd) (list? (c2cdf@binding-value c3226@b)))) (c2faf@syntax-violation '#f '"not a record type" c3216@e) (void)) (c2ee8@chi-expr (car (c2cdf@binding-value c3226@b)) c3217@r c3218@mr))))) (c2cdd@binding-type c3226@b))) (c2cd9@label->binding c3224@lab c3217@r))) (c2cd5@id->label c3222@id))) c321e@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c321c@t))) (c2ec6@syntax-dispatch c321c@t '(_ any)))) c3216@e))) (set! c2e68@record-constructor-descriptor-transformer (lambda (c322a@e c322b@r c322c@mr) ((lambda (c3230@t) ((lambda (c3232@ls/false) (if (and c3232@ls/false (apply (lambda (c3234@id) (c2cbb@id? c3234@id)) c3232@ls/false)) (apply (lambda (c3236@id) ((lambda (c3238@lab) ((lambda (c323a@b) ((lambda (c323c@type) ((lambda () (begin (if (not c3238@lab) (c2ce1@raise-unbound-error c3236@id) (void)) (if (not (and (eq? c323c@type '$rtd) (list? (c2cdf@binding-value c323a@b)))) (c2faf@syntax-violation '#f '"invalid type" c322a@e) (void)) (c2ee8@chi-expr (cadr (c2cdf@binding-value c323a@b)) c322b@r c322c@mr))))) (c2cdd@binding-type c323a@b))) (c2cd9@label->binding c3238@lab c322b@r))) (c2cd5@id->label c3236@id))) c3232@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3230@t))) (c2ec6@syntax-dispatch c3230@t '(_ any)))) c322a@e))) (set! c2e6a@when-macro (lambda (c323e@e) ((lambda (c3240@t) ((lambda (c3242@ls/false) (if c3242@ls/false (apply (lambda (c3244@test c3245@e c3246@e*) (c2e7c@bless (list 'if c3244@test (cons 'begin (cons c3245@e c3246@e*))))) c3242@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3240@t))) (c2ec6@syntax-dispatch c3240@t '(_ any any . each-any)))) c323e@e))) (set! c2e6c@unless-macro (lambda (c324a@e) ((lambda (c324c@t) ((lambda (c324e@ls/false) (if c324e@ls/false (apply (lambda (c3250@test c3251@e c3252@e*) (c2e7c@bless (list 'if (list 'not c3250@test) (cons 'begin (cons c3251@e c3252@e*))))) c324e@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c324c@t))) (c2ec6@syntax-dispatch c324c@t '(_ any any . each-any)))) c324a@e))) (set! c2e6e@if-transformer (lambda (c3256@e c3257@r c3258@mr) ((lambda (c325c@t) ((lambda (c325e@ls/false) (if c325e@ls/false (apply (lambda (c3260@e0 c3261@e1 c3262@e2) (list 'if (c2ee8@chi-expr c3260@e0 c3257@r c3258@mr) (c2ee8@chi-expr c3261@e1 c3257@r c3258@mr) (c2ee8@chi-expr c3262@e2 c3257@r c3258@mr))) c325e@ls/false) ((lambda (c3266@t) ((lambda (c3268@ls/false) (if c3268@ls/false (apply (lambda (c326a@e0 c326b@e1) (list 'if (c2ee8@chi-expr c326a@e0 c3257@r c3258@mr) (c2ee8@chi-expr c326b@e1 c3257@r c3258@mr) (c2c1b@c2b8b@build-void))) c3268@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3266@t))) (c2ec6@syntax-dispatch c3266@t '(_ any any)))) c325c@t))) (c2ec6@syntax-dispatch c325c@t '(_ any any any)))) c3256@e))) (set! c2e70@and-transformer (lambda (c326e@e c326f@r c3270@mr) ((lambda (c3274@t) ((lambda (c3276@ls/false) (if c3276@ls/false (apply (lambda (c3278@e*) (cons 'and (c2ee4@chi-expr* c3278@e* c326f@r c3270@mr))) c3276@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3274@t))) (c2ec6@syntax-dispatch c3274@t '(_ . each-any)))) c326e@e))) (set! c2e72@or-transformer (lambda (c327a@e c327b@r c327c@mr) ((lambda (c3280@t) ((lambda (c3282@ls/false) (if c3282@ls/false (apply (lambda (c3284@e*) (cons 'or (c2ee4@chi-expr* c3284@e* c327b@r c327c@mr))) c3282@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3280@t))) (c2ec6@syntax-dispatch c3280@t '(_ . each-any)))) c327a@e))) (set! c2e74@case-macro (lambda (c3286@e) ((lambda (c3289@build-last c328b@build-one) (begin (set! c3289@build-last (lambda (c32b0@cls) ((lambda (c32b2@t) ((lambda (c32b4@ls/false) (if c32b4@ls/false (apply (lambda (c32b6@e c32b7@e*) (cons 'begin (cons c32b6@e c32b7@e*))) c32b4@ls/false) ((lambda (c32ba@t) ((lambda (c32bc@ls/false) (if c32bc@ls/false (apply (lambda () (c328b@build-one c32b0@cls '(if #f #f))) c32bc@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c32ba@t))) (c2ec6@syntax-dispatch c32ba@t '_))) c32b2@t))) (c2ec6@syntax-dispatch c32b2@t '(#(scheme-id else) any . each-any)))) c32b0@cls))) (set! c328b@build-one (lambda (c32a2@cls c32a3@k) ((lambda (c32a6@t) ((lambda (c32a8@ls/false) (if c32a8@ls/false (apply (lambda (c32aa@d* c32ab@e c32ac@e*) (list 'if (list 'memv 't (list 'quote c32aa@d*)) (cons 'begin (cons c32ab@e c32ac@e*)) c32a3@k)) c32a8@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c32a6@t))) (c2ec6@syntax-dispatch c32a6@t '(each-any any . each-any)))) c32a2@cls))) ((lambda (c328c@t) ((lambda (c328e@ls/false) (if c328e@ls/false (apply (lambda (c3290@expr) (c2e7c@bless (cons 'let (cons (list (list 't c3290@expr)) '((if #f #f)))))) c328e@ls/false) ((lambda (c3292@t) ((lambda (c3294@ls/false) (if c3294@ls/false (apply (lambda (c3296@expr c3297@cls c3298@cls*) (c2e7c@bless (list 'let (list (list 't c3296@expr)) ((letrec ((c329c@f (lambda (c329e@cls c329f@cls*) (if (null? c329f@cls*) (c3289@build-last c329e@cls) (c328b@build-one c329e@cls (c329c@f (car c329f@cls*) (cdr c329f@cls*))))))) c329c@f) c3297@cls c3298@cls*)))) c3294@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3292@t))) (c2ec6@syntax-dispatch c3292@t '(_ any any . each-any)))) c328c@t))) (c2ec6@syntax-dispatch c328c@t '(_ any)))) c3286@e))) '#f '#f))) (set! c2e76@quote-transformer (lambda (c32be@e c32bf@r c32c0@mr) ((lambda (c32c4@t) ((lambda (c32c6@ls/false) (if c32c6@ls/false (apply (lambda (c32c8@datum) (list 'quote (c2cd1@stx->datum c32c8@datum))) c32c6@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c32c4@t))) (c2ec6@syntax-dispatch c32c4@t '(_ any)))) c32be@e))) (set! c2e78@case-lambda-transformer (lambda (c32ca@e c32cb@r c32cc@mr) ((lambda (c32d0@t) ((lambda (c32d2@ls/false) (if c32d2@ls/false (apply (lambda (c32d4@fmls* c32d5@b* c32d6@b**) (call-with-values (lambda () (c2ef0@chi-lambda-clause* c32ca@e c32d4@fmls* (map cons c32d5@b* c32d6@b**) c32cb@r c32cc@mr)) (lambda (c32de@c32db c32df@c32dd) ((lambda (c32e2@body* c32e3@fmls*) (c2c18@c2b59@build-case-lambda '#f c32e3@fmls* c32e2@body*)) c32df@c32dd c32de@c32db)))) c32d2@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c32d0@t))) (c2ec6@syntax-dispatch c32d0@t '(_ . #(each (any any . each-any)))))) c32ca@e))) (set! c2e7a@lambda-transformer (lambda (c32e6@e c32e7@r c32e8@mr) ((lambda (c32ec@t) ((lambda (c32ee@ls/false) (if c32ee@ls/false (apply (lambda (c32f0@fmls c32f1@b c32f2@b*) (call-with-values (lambda () (c2eee@chi-lambda-clause c32e6@e c32f0@fmls (cons c32f1@b c32f2@b*) c32e7@r c32e8@mr)) (lambda (c32fa@c32f7 c32fb@c32f9) ((lambda (c32fe@body c32ff@fmls) (c2c17@c2b57@build-lambda '#f c32ff@fmls c32fe@body)) c32fb@c32f9 c32fa@c32f7)))) c32ee@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c32ec@t))) (c2ec6@syntax-dispatch c32ec@t '(_ any any . each-any)))) c32e6@e))) (set! c2e7c@bless (lambda (c3302@x) (c2ca3@mkstx ((letrec ((c3304@f (lambda (c3306@x) (if (c2c83@stx? c3306@x) c3306@x (if (pair? c3306@x) (cons (c3304@f (car c3306@x)) (c3304@f (cdr c3306@x))) (if (symbol? c3306@x) (c2e50@scheme-stx c3306@x) (if (vector? c3306@x) (vector-map c3304@f c3306@x) c3306@x))))))) c3304@f) c3302@x) '() '() '()))) (set! c2e7e@with-syntax-macro (lambda (c3308@e) ((lambda (c330a@t) ((lambda (c330c@ls/false) (if c330c@ls/false (apply (lambda (c330e@pat* c330f@expr* c3310@b c3311@b*) ((lambda (c3316@idn*) (begin (c2eec@verify-formals (map car c3316@idn*) c3308@e) ((lambda (c3318@t*) (c2e7c@bless (list 'let (map list c3318@t* c330f@expr*) ((letrec ((c331a@f (lambda (c331c@pat* c331d@t*) (if (null? c331c@pat*) (cons 'begin (cons '#f (cons c3310@b c3311@b*))) (list 'syntax-case (car c331d@t*) '() (list (car c331c@pat*) (c331a@f (cdr c331c@pat*) (cdr c331d@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car c331c@pat*)) (car c331d@t*)))))))) c331a@f) c330e@pat* c3318@t*)))) (c2f9d@generate-temporaries c330f@expr*)))) ((letrec ((c3320@f (lambda (c3322@pat*) (if (null? c3322@pat*) '() (call-with-values (lambda () (c2ec4@convert-pattern (car c3322@pat*) '())) (lambda (c3328@c3325 c3329@c3327) ((lambda (c332c@idn* c332d@pat) (append c332c@idn* (c3320@f (cdr c3322@pat*)))) c3329@c3327 c3328@c3325))))))) c3320@f) c330e@pat*))) c330c@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c330a@t))) (c2ec6@syntax-dispatch c330a@t '(_ #(each (any any)) any . each-any)))) c3308@e))) (set! c2e80@invalid-fmls-error (lambda (c3330@stx c3331@fmls) ((lambda (c3334@t) ((lambda (c3336@ls/false) (if c3336@ls/false (apply (lambda (c3338@id* c3339@last) ((letrec ((c333c@f (lambda (c333e@id*) (if (null? c333e@id*) (values) (if (not (c2cbb@id? (car c333e@id*))) (c2faf@syntax-violation '#f '"not an identifier" c3330@stx (car c333e@id*)) (begin (c333c@f (cdr c333e@id*)) (if (c2cc9@bound-id-member? (car c333e@id*) (cdr c333e@id*)) (c2faf@syntax-violation '#f '"duplicate binding" c3330@stx (car c333e@id*)) (void)))))))) c333c@f) (if (c2cbb@id? c3339@last) (cons c3339@last c3338@id*) (if (c2cb1@syntax-null? c3339@last) c3338@id* (c2faf@syntax-violation '#f '"not an identifier" c3330@stx c3339@last))))) c3336@ls/false) ((lambda (c3340@t) ((lambda (c3342@ls/false) (if c3342@ls/false (apply (lambda () (c2faf@syntax-violation '#f '"malformed binding form" c3330@stx c3331@fmls)) c3342@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3340@t))) (c2ec6@syntax-dispatch c3340@t '_))) c3334@t))) (c2ec6@syntax-dispatch c3334@t '#(each+ any () any)))) c3331@fmls))) (set! c2e82@let-macro (lambda (c3344@stx) ((lambda (c3346@t) ((lambda (c3348@ls/false) (if c3348@ls/false (apply (lambda (c334a@lhs* c334b@rhs* c334c@b c334d@b*) (if (c2cc5@valid-bound-ids? c334a@lhs*) (c2e7c@bless (cons (cons 'lambda (cons c334a@lhs* (cons c334c@b c334d@b*))) c334b@rhs*)) (c2e80@invalid-fmls-error c3344@stx c334a@lhs*))) c3348@ls/false) ((lambda (c3352@t) ((lambda (c3354@ls/false) (if (and c3354@ls/false (apply (lambda (c3356@f c3357@lhs* c3358@rhs* c3359@b c335a@b*) (c2cbb@id? c3356@f)) c3354@ls/false)) (apply (lambda (c3360@f c3361@lhs* c3362@rhs* c3363@b c3364@b*) (if (c2cc5@valid-bound-ids? c3361@lhs*) (c2e7c@bless (cons (list 'letrec (list (list c3360@f (cons 'lambda (cons c3361@lhs* (cons c3363@b c3364@b*))))) c3360@f) c3362@rhs*)) (c2e80@invalid-fmls-error c3344@stx c3361@lhs*))) c3354@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3352@t))) (c2ec6@syntax-dispatch c3352@t '(_ any #(each (any any)) any . each-any)))) c3346@t))) (c2ec6@syntax-dispatch c3346@t '(_ #(each (any any)) any . each-any)))) c3344@stx))) (set! c2e84@let-values-macro (lambda (c336a@stx) ((lambda (c336d@rename c336f@rename*) (begin (set! c336d@rename (lambda (c33d2@x c33d3@old* c33d4@new*) (begin (if (not (c2cbb@id? c33d2@x)) (c2faf@syntax-violation '#f '"not an indentifier" c336a@stx c33d2@x) (void)) (if (c2cc9@bound-id-member? c33d2@x c33d3@old*) (c2faf@syntax-violation '#f '"duplicate binding" c336a@stx c33d2@x) (void)) ((lambda (c33d8@y) (values c33d8@y (cons c33d2@x c33d3@old*) (cons c33d8@y c33d4@new*))) (gensym (c2fb5@syntax->datum c33d2@x)))))) (set! c336f@rename* (lambda (c33c0@x* c33c1@old* c33c2@new*) (if (null? c33c0@x*) (values '() c33c1@old* c33c2@new*) (call-with-values (lambda () (c336d@rename (car c33c0@x*) c33c1@old* c33c2@new*)) (lambda (c33c6@x c33c7@old* c33c8@new*) (call-with-values (lambda () (c336f@rename* (cdr c33c0@x*) c33c7@old* c33c8@new*)) (lambda (c33cc@x* c33cd@old* c33ce@new*) (values (cons c33c6@x c33cc@x*) c33cd@old* c33ce@new*)))))))) ((lambda (c3370@t) ((lambda (c3372@ls/false) (if c3372@ls/false (apply (lambda (c3374@b c3375@b*) (cons* (c2e7c@bless 'let) '() c3374@b c3375@b*)) c3372@ls/false) ((lambda (c3378@t) ((lambda (c337a@ls/false) (if c337a@ls/false (apply (lambda (c337c@lhs* c337d@rhs* c337e@b c337f@b*) (c2e7c@bless ((letrec ((c3384@f (lambda (c3386@lhs* c3387@rhs* c3388@old* c3389@new*) (if (null? c3386@lhs*) (cons 'let (cons (map list c3388@old* c3389@new*) (cons c337e@b c337f@b*))) ((lambda (c338e@t) ((lambda (c3390@ls/false) (if c3390@ls/false (apply (lambda (c3392@x*) (call-with-values (lambda () (c336f@rename* c3392@x* c3388@old* c3389@new*)) (lambda (c339a@c3395 c339b@c3397 c339c@c3399) ((lambda (c33a0@new* c33a1@old* c33a2@y*) (list 'call-with-values (list 'lambda '() (car c3387@rhs*)) (list 'lambda c33a2@y* (c3384@f (cdr c3386@lhs*) (cdr c3387@rhs*) c33a1@old* c33a0@new*)))) c339c@c3399 c339b@c3397 c339a@c3395)))) c3390@ls/false) ((lambda (c33a6@t) ((lambda (c33a8@ls/false) (if c33a8@ls/false (apply (lambda (c33aa@x* c33ab@x) (call-with-values (lambda () (c336d@rename c33ab@x c3388@old* c3389@new*)) (lambda (c33ae@y c33af@old* c33b0@new*) (call-with-values (lambda () (c336f@rename* c33aa@x* c33af@old* c33b0@new*)) (lambda (c33b4@y* c33b5@old* c33b6@new*) (list 'call-with-values (list 'lambda '() (car c3387@rhs*)) (list 'lambda (append c33b4@y* c33ae@y) (c3384@f (cdr c3386@lhs*) (cdr c3387@rhs*) c33b5@old* c33b6@new*)))))))) c33a8@ls/false) ((lambda (c33ba@t) ((lambda (c33bc@ls/false) (if c33bc@ls/false (apply (lambda (c33be@others) (c2faf@syntax-violation '#f '"malformed bindings" c336a@stx c33be@others)) c33bc@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c33ba@t))) (c2ec6@syntax-dispatch c33ba@t 'any))) c33a6@t))) (c2ec6@syntax-dispatch c33a6@t '#(each+ any () any)))) c338e@t))) (c2ec6@syntax-dispatch c338e@t 'each-any))) (car c3386@lhs*)))))) c3384@f) c337c@lhs* c337d@rhs* '() '()))) c337a@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3378@t))) (c2ec6@syntax-dispatch c3378@t '(_ #(each (any any)) any . each-any)))) c3370@t))) (c2ec6@syntax-dispatch c3370@t '(_ () any . each-any)))) c336a@stx))) '#f '#f))) (set! c2e86@let*-values-macro (lambda (c33da@stx) ((lambda (c33dd@check) (begin (set! c33dd@check (lambda (c340c@x*) (if (not (null? c340c@x*)) ((lambda (c340e@x) (begin (if (not (c2cbb@id? c340e@x)) (c2faf@syntax-violation '#f '"not an identifier" c33da@stx c340e@x) (void)) (c33dd@check (cdr c340c@x*)) (if (c2cc9@bound-id-member? c340e@x (cdr c340c@x*)) (c2faf@syntax-violation '#f '"duplicate identifier" c33da@stx c340e@x) (void)))) (car c340c@x*)) (void)))) ((lambda (c33de@t) ((lambda (c33e0@ls/false) (if c33e0@ls/false (apply (lambda (c33e2@b c33e3@b*) (cons* (c2e7c@bless 'let) '() c33e2@b c33e3@b*)) c33e0@ls/false) ((lambda (c33e6@t) ((lambda (c33e8@ls/false) (if c33e8@ls/false (apply (lambda (c33ea@lhs* c33eb@rhs* c33ec@b c33ed@b*) (c2e7c@bless ((letrec ((c33f2@f (lambda (c33f4@lhs* c33f5@rhs*) (if (null? c33f4@lhs*) (cons 'begin (cons c33ec@b c33ed@b*)) ((lambda (c33f8@t) ((lambda (c33fa@ls/false) (if c33fa@ls/false (apply (lambda (c33fc@x*) (begin (c33dd@check c33fc@x*) (list 'call-with-values (list 'lambda '() (car c33f5@rhs*)) (list 'lambda c33fc@x* (c33f2@f (cdr c33f4@lhs*) (cdr c33f5@rhs*)))))) c33fa@ls/false) ((lambda (c33fe@t) ((lambda (c3400@ls/false) (if c3400@ls/false (apply (lambda (c3402@x* c3403@x) (begin (c33dd@check (cons c3403@x c3402@x*)) (list 'call-with-values (list 'lambda '() (car c33f5@rhs*)) (list 'lambda (append c3402@x* c3403@x) (c33f2@f (cdr c33f4@lhs*) (cdr c33f5@rhs*)))))) c3400@ls/false) ((lambda (c3406@t) ((lambda (c3408@ls/false) (if c3408@ls/false (apply (lambda (c340a@others) (c2faf@syntax-violation '#f '"malformed bindings" c33da@stx c340a@others)) c3408@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3406@t))) (c2ec6@syntax-dispatch c3406@t 'any))) c33fe@t))) (c2ec6@syntax-dispatch c33fe@t '#(each+ any () any)))) c33f8@t))) (c2ec6@syntax-dispatch c33f8@t 'each-any))) (car c33f4@lhs*)))))) c33f2@f) c33ea@lhs* c33eb@rhs*))) c33e8@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c33e6@t))) (c2ec6@syntax-dispatch c33e6@t '(_ #(each (any any)) any . each-any)))) c33de@t))) (c2ec6@syntax-dispatch c33de@t '(_ () any . each-any)))) c33da@stx))) '#f))) (set! c2e88@trace-lambda-macro (lambda (c3410@stx) ((lambda (c3412@t) ((lambda (c3414@ls/false) (if c3414@ls/false (apply (lambda (c3416@who c3417@fmls c3418@b c3419@b*) (if (c2cc5@valid-bound-ids? c3417@fmls) (c2e7c@bless (list 'make-traced-procedure (list 'quote c3416@who) (cons 'lambda (cons c3417@fmls (cons c3418@b c3419@b*))))) (c2e80@invalid-fmls-error c3410@stx c3417@fmls))) c3414@ls/false) ((lambda (c341e@t) ((lambda (c3420@ls/false) (if c3420@ls/false (apply (lambda (c3422@who c3423@fmls c3424@last c3425@b c3426@b*) (if (c2cc5@valid-bound-ids? (cons c3424@last c3423@fmls)) (c2e7c@bless (list 'make-traced-procedure (list 'quote c3422@who) (cons 'lambda (cons (append c3423@fmls c3424@last) (cons c3425@b c3426@b*))))) (c2e80@invalid-fmls-error c3410@stx (append c3423@fmls c3424@last)))) c3420@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c341e@t))) (c2ec6@syntax-dispatch c341e@t '(_ any #(each+ any () any) any . each-any)))) c3412@t))) (c2ec6@syntax-dispatch c3412@t '(_ any each-any any . each-any)))) c3410@stx))) (set! c2e8a@trace-define-macro (lambda (c342c@stx) ((lambda (c342e@t) ((lambda (c3430@ls/false) (if c3430@ls/false (apply (lambda (c3432@who c3433@fmls c3434@b c3435@b*) (if (c2cc5@valid-bound-ids? c3433@fmls) (c2e7c@bless (list 'define c3432@who (list 'make-traced-procedure (list 'quote c3432@who) (cons 'lambda (cons c3433@fmls (cons c3434@b c3435@b*)))))) (c2e80@invalid-fmls-error c342c@stx c3433@fmls))) c3430@ls/false) ((lambda (c343a@t) ((lambda (c343c@ls/false) (if c343c@ls/false (apply (lambda (c343e@who c343f@fmls c3440@last c3441@b c3442@b*) (if (c2cc5@valid-bound-ids? (cons c3440@last c343f@fmls)) (c2e7c@bless (list 'define c343e@who (list 'make-traced-procedure (list 'quote c343e@who) (cons 'lambda (cons (append c343f@fmls c3440@last) (cons c3441@b c3442@b*)))))) (c2e80@invalid-fmls-error c342c@stx (append c343f@fmls c3440@last)))) c343c@ls/false) ((lambda (c3448@t) ((lambda (c344a@ls/false) (if c344a@ls/false (apply (lambda (c344c@who c344d@expr) (if (c2cbb@id? c344c@who) (c2e7c@bless (list 'define c344c@who (list 'let (list (list 'v c344d@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote c344c@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (c2faf@syntax-violation '#f '"invalid name" c342c@stx))) c344a@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3448@t))) (c2ec6@syntax-dispatch c3448@t '(_ any any)))) c343a@t))) (c2ec6@syntax-dispatch c343a@t '(_ (any . #(each+ any () any)) any . each-any)))) c342e@t))) (c2ec6@syntax-dispatch c342e@t '(_ (any . each-any) any . each-any)))) c342c@stx))) (set! c2e8c@trace-define-syntax-macro (lambda (c3450@stx) ((lambda (c3452@t) ((lambda (c3454@ls/false) (if c3454@ls/false (apply (lambda (c3456@who c3457@expr) (if (c2cbb@id? c3456@who) (c2e7c@bless (list 'define-syntax c3456@who (list 'make-traced-macro (list 'quote c3456@who) c3457@expr))) (c2faf@syntax-violation '#f '"invalid name" c3450@stx))) c3454@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3452@t))) (c2ec6@syntax-dispatch c3452@t '(_ any any)))) c3450@stx))) (set! c2e8e@trace-let/rec-syntax (lambda (c345a@who) (lambda (c345c@stx) ((lambda (c345e@t) ((lambda (c3460@ls/false) (if c3460@ls/false (apply (lambda (c3462@lhs* c3463@rhs* c3464@b c3465@b*) (if (c2cc5@valid-bound-ids? c3462@lhs*) ((lambda (c346a@rhs*) (c2e7c@bless (cons c345a@who (cons (map list c3462@lhs* c346a@rhs*) (cons c3464@b c3465@b*))))) (map (lambda (c346c@lhs c346d@rhs) (list 'make-traced-macro (list 'quote c346c@lhs) c346d@rhs)) c3462@lhs* c3463@rhs*)) (c2e80@invalid-fmls-error c345c@stx c3462@lhs*))) c3460@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c345e@t))) (c2ec6@syntax-dispatch c345e@t '(_ #(each (any any)) any . each-any)))) c345c@stx)))) (set! c2e90@trace-let-syntax-macro (c2e8e@trace-let/rec-syntax 'let-syntax)) (set! c2e92@trace-letrec-syntax-macro (c2e8e@trace-let/rec-syntax 'letrec-syntax)) (set! c2e94@guard-macro (lambda (c3470@x) ((lambda (c3473@gen-clauses) (begin (set! c3473@gen-clauses (lambda (c348a@con c348b@outerk c348c@clause*) ((lambda (c3491@f c3493@f*) (begin (set! c3491@f (lambda (c34ca@x c34cb@k) ((lambda (c34ce@t) ((lambda (c34d0@ls/false) (if c34d0@ls/false (apply (lambda (c34d2@e c34d3@p) ((lambda (c34d6@t) (list 'let (list (list c34d6@t c34d2@e)) (list 'if c34d6@t (list c34d3@p c34d6@t) c34cb@k))) (gensym))) c34d0@ls/false) ((lambda (c34d8@t) ((lambda (c34da@ls/false) (if c34da@ls/false (apply (lambda (c34dc@e) ((lambda (c34de@t) (list 'let (list (list c34de@t c34dc@e)) (list 'if c34de@t c34de@t c34cb@k))) (gensym))) c34da@ls/false) ((lambda (c34e0@t) ((lambda (c34e2@ls/false) (if c34e2@ls/false (apply (lambda (c34e4@e c34e5@v c34e6@v*) (list 'if c34e4@e (cons 'begin (cons c34e5@v c34e6@v*)) c34cb@k)) c34e2@ls/false) ((lambda (c34ea@t) ((lambda (c34ec@ls/false) (if c34ec@ls/false (apply (lambda () (c2faf@syntax-violation '#f '"invalid guard clause" c34ca@x)) c34ec@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c34ea@t))) (c2ec6@syntax-dispatch c34ea@t '_))) c34e0@t))) (c2ec6@syntax-dispatch c34e0@t '(any any . each-any)))) c34d8@t))) (c2ec6@syntax-dispatch c34d8@t '(any)))) c34ce@t))) (c2ec6@syntax-dispatch c34ce@t '(any #(scheme-id =>) any)))) c34ca@x))) (set! c3493@f* (lambda (c34a0@x*) ((lambda (c34a2@t) ((lambda (c34a4@ls/false) (if c34a4@ls/false (apply (lambda () ((lambda (c34a6@g) (values (list c34a6@g (list 'lambda '() (list 'raise-continuable c348a@con))) c34a6@g)) (gensym))) c34a4@ls/false) ((lambda (c34a8@t) ((lambda (c34aa@ls/false) (if c34aa@ls/false (apply (lambda (c34ac@e c34ad@e*) (values (cons 'begin (cons c34ac@e c34ad@e*)) '#f)) c34aa@ls/false) ((lambda (c34b0@t) ((lambda (c34b2@ls/false) (if c34b2@ls/false (apply (lambda (c34b4@cls c34b5@cls*) (call-with-values (lambda () (c3493@f* c34b5@cls*)) (lambda (c34bc@c34b9 c34bd@c34bb) ((lambda (c34c0@g c34c1@e) (values (c3491@f c34b4@cls c34c1@e) c34c0@g)) c34bd@c34bb c34bc@c34b9)))) c34b2@ls/false) ((lambda (c34c4@t) ((lambda (c34c6@ls/false) (if c34c6@ls/false (apply (lambda (c34c8@others) (c2faf@syntax-violation '#f '"invalid guard clause" c34c8@others)) c34c6@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c34c4@t))) (c2ec6@syntax-dispatch c34c4@t 'any))) c34b0@t))) (c2ec6@syntax-dispatch c34b0@t '(any . any)))) c34a8@t))) (c2ec6@syntax-dispatch c34a8@t '((#(scheme-id else) any . each-any))))) c34a2@t))) (c2ec6@syntax-dispatch c34a2@t '()))) c34a0@x*))) (call-with-values (lambda () (c3493@f* c348c@clause*)) (lambda (c3498@c3495 c3499@c3497) ((lambda (c349c@raisek c349d@code) (if c349c@raisek (list (list 'call/cc (list 'lambda (list c349c@raisek) (list c348b@outerk (list 'lambda '() c349d@code))))) (list c348b@outerk (list 'lambda '() c349d@code)))) c3499@c3497 c3498@c3495))))) '#f '#f))) ((lambda (c3474@t) ((lambda (c3476@ls/false) (if (and c3476@ls/false (apply (lambda (c3478@con c3479@clause* c347a@b c347b@b*) (c2cbb@id? c3478@con)) c3476@ls/false)) (apply (lambda (c3480@con c3481@clause* c3482@b c3483@b*) ((lambda (c3488@outerk) (c2e7c@bless (list (list 'call/cc (list 'lambda (list c3488@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list c3480@con) (c3473@gen-clauses c3480@con c3488@outerk c3481@clause*)) (cons 'lambda (cons '() (cons c3482@b c3483@b*)))))))))) (gensym))) c3476@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3474@t))) (c2ec6@syntax-dispatch c3474@t '(_ (any . each-any) any . each-any)))) c3470@x))) '#f))) (set! c2e96@define-enumeration-macro (lambda (c34ee@stx) ((lambda (c34f1@set? c34f3@remove-dups) (begin (set! c34f1@set? (lambda (c350a@x) (or (null? c350a@x) (and (not (memq (car c350a@x) (cdr c350a@x))) (c34f1@set? (cdr c350a@x)))))) (set! c34f3@remove-dups (lambda (c3508@ls) (if (null? c3508@ls) '() (cons (car c3508@ls) (c34f3@remove-dups (remq (car c3508@ls) (cdr c3508@ls))))))) ((lambda (c34f4@t) ((lambda (c34f6@ls/false) (if (and c34f6@ls/false (apply (lambda (c34f8@name c34f9@id* c34fa@maker) (and (c2cbb@id? c34f8@name) (c2cbb@id? c34fa@maker) (for-all c2cbb@id? c34f9@id*))) c34f6@ls/false)) (apply (lambda (c34fe@name c34ff@id* c3500@maker) ((lambda (c3504@name* c3505@mk) (c2e7c@bless (list 'begin (list 'define c3505@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote c3504@name*)))) (list 'define-syntax c34fe@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote c3504@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote c34fe@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax c3500@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote c3500@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote c3504@name*)) (cons 'syntax-violation (cons (list 'quote c3500@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons c3505@mk '('(n* ...)))))))))))) (c34f3@remove-dups (c2fb5@syntax->datum c34ff@id*)) (gensym))) c34f6@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c34f4@t))) (c2ec6@syntax-dispatch c34f4@t '(_ any each-any any)))) c34ee@stx))) '#f '#f))) (set! c2e98@time-macro (lambda (c350c@stx) ((lambda (c350e@t) ((lambda (c3510@ls/false) (if c3510@ls/false (apply (lambda (c3512@expr) (c2e7c@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() c3512@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) c3510@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c350e@t))) (c2ec6@syntax-dispatch c350e@t '(_ any)))) c350c@stx))) (set! c2e9a@delay-macro (lambda (c3514@stx) ((lambda (c3516@t) ((lambda (c3518@ls/false) (if c3518@ls/false (apply (lambda (c351a@expr) (c2e7c@bless (list 'make-promise (list 'lambda '() c351a@expr)))) c3518@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3516@t))) (c2ec6@syntax-dispatch c3516@t '(_ any)))) c3514@stx))) (set! c2e9c@assert-macro (lambda (c351c@stx) ((lambda (c351e@t) ((lambda (c3520@ls/false) (if c3520@ls/false (apply (lambda (c3522@expr) ((lambda (c3524@pos) (c2e7c@bless (list 'unless c3522@expr (list 'assertion-error (list 'quote c3522@expr) (list 'quote c3524@pos))))) (or (c2fa7@expression-position c351c@stx) (c2fa7@expression-position c3522@expr)))) c3520@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c351e@t))) (c2ec6@syntax-dispatch c351e@t '(_ any)))) c351c@stx))) (set! c2e9e@endianness-macro (lambda (c3526@stx) ((lambda (c3528@t) ((lambda (c352a@ls/false) (if c352a@ls/false (apply (lambda (c352c@e) ((lambda (c352e@t) (if (memv c352e@t '(little)) (c2e7c@bless ''little) (if (memv c352e@t '(big)) (c2e7c@bless ''big) (c2faf@syntax-violation '#f '"endianness must be big or little" c3526@stx)))) (c2fb5@syntax->datum c352c@e))) c352a@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3528@t))) (c2ec6@syntax-dispatch c3528@t '(_ any)))) c3526@stx))) (set! c2ea0@identifier-syntax-macro (lambda (c3530@stx) ((lambda (c3532@t) ((lambda (c3534@ls/false) (if c3534@ls/false (apply (lambda (c3536@expr) (c2e7c@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax c3536@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax c3536@expr) '((syntax (e* ...)))))))))) c3534@ls/false) ((lambda (c3538@t) ((lambda (c353a@ls/false) (if (and c353a@ls/false (apply (lambda (c353c@id1 c353d@expr1 c353e@id2 c353f@expr2 c3540@expr3) (and (c2cbb@id? c353c@id1) (c2cbb@id? c353e@id2) (c2cbb@id? c353f@expr2))) c353a@ls/false)) (apply (lambda (c3546@id1 c3547@expr1 c3548@id2 c3549@expr2 c354a@expr3) (c2e7c@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax c3547@expr1)) (list (list 'set! 'id c3549@expr2) (list 'syntax c354a@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons c3547@expr1 '(e* ...))))))))) c353a@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3538@t))) (c2ec6@syntax-dispatch c3538@t '(_ (any any) ((#(scheme-id set!) any any) any))))) c3532@t))) (c2ec6@syntax-dispatch c3532@t '(_ any)))) c3530@stx))) (set! c2ea2@do-macro (lambda (c3550@stx) ((lambda (c3553@bind) (begin (set! c3553@bind (lambda (c356a@x) ((lambda (c356c@t) ((lambda (c356e@ls/false) (if c356e@ls/false (apply (lambda (c3570@x c3571@init) (list c3570@x c3571@init c3570@x)) c356e@ls/false) ((lambda (c3574@t) ((lambda (c3576@ls/false) (if c3576@ls/false (apply (lambda (c3578@x c3579@init c357a@step) (list c3578@x c3579@init c357a@step)) c3576@ls/false) ((lambda (c357e@t) ((lambda (c3580@ls/false) (if c3580@ls/false (apply (lambda () (c2faf@syntax-violation '#f '"invalid binding" c3550@stx)) c3580@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c357e@t))) (c2ec6@syntax-dispatch c357e@t '_))) c3574@t))) (c2ec6@syntax-dispatch c3574@t '(any any any)))) c356c@t))) (c2ec6@syntax-dispatch c356c@t '(any any)))) c356a@x))) ((lambda (c3554@t) ((lambda (c3556@ls/false) (if c3556@ls/false (apply (lambda (c3558@binding* c3559@test c355a@expr* c355b@command*) ((lambda (c3560@t) ((lambda (c3562@ls/false) (if c3562@ls/false (apply (lambda (c3564@x* c3565@init* c3566@step*) (if (c2cc5@valid-bound-ids? c3564@x*) (c2e7c@bless (list 'letrec (list (list 'loop (list 'lambda c3564@x* (list 'if c3559@test (cons 'begin (cons '(if #f #f) c355a@expr*)) (cons 'begin (append c355b@command* (list (cons 'loop c3566@step*)))))))) (cons 'loop c3565@init*))) (c2faf@syntax-violation '#f '"invalid bindings" c3550@stx))) c3562@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3560@t))) (c2ec6@syntax-dispatch c3560@t '#(each (any any any))))) (map c3553@bind c3558@binding*))) c3556@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3554@t))) (c2ec6@syntax-dispatch c3554@t '(_ each-any (any . each-any) . each-any)))) c3550@stx))) '#f))) (set! c2ea4@let*-macro (lambda (c3582@stx) ((lambda (c3584@t) ((lambda (c3586@ls/false) (if (and c3586@ls/false (apply (lambda (c3588@lhs* c3589@rhs* c358a@b c358b@b*) (for-all c2cbb@id? c3588@lhs*)) c3586@ls/false)) (apply (lambda (c3590@lhs* c3591@rhs* c3592@b c3593@b*) (c2e7c@bless ((letrec ((c3598@f (lambda (c359a@x*) (if (null? c359a@x*) (cons 'let (cons '() (cons c3592@b c3593@b*))) (list 'let (list (car c359a@x*)) (c3598@f (cdr c359a@x*))))))) c3598@f) (map list c3590@lhs* c3591@rhs*)))) c3586@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3584@t))) (c2ec6@syntax-dispatch c3584@t '(_ #(each (any any)) any . each-any)))) c3582@stx))) (set! c2ea6@or-macro (lambda (c359c@stx) ((lambda (c359e@t) ((lambda (c35a0@ls/false) (if c35a0@ls/false (apply (lambda () '#f) c35a0@ls/false) ((lambda (c35a2@t) ((lambda (c35a4@ls/false) (if c35a4@ls/false (apply (lambda (c35a6@e c35a7@e*) (c2e7c@bless ((letrec ((c35aa@f (lambda (c35ac@e c35ad@e*) (if (null? c35ad@e*) (list 'begin '#f c35ac@e) (list 'let (list (list 't c35ac@e)) (list 'if 't 't (c35aa@f (car c35ad@e*) (cdr c35ad@e*)))))))) c35aa@f) c35a6@e c35a7@e*))) c35a4@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c35a2@t))) (c2ec6@syntax-dispatch c35a2@t '(_ any . each-any)))) c359e@t))) (c2ec6@syntax-dispatch c359e@t '(_)))) c359c@stx))) (set! c2ea8@and-macro (lambda (c35b0@stx) ((lambda (c35b2@t) ((lambda (c35b4@ls/false) (if c35b4@ls/false (apply (lambda () '#t) c35b4@ls/false) ((lambda (c35b6@t) ((lambda (c35b8@ls/false) (if c35b8@ls/false (apply (lambda (c35ba@e c35bb@e*) (c2e7c@bless ((letrec ((c35be@f (lambda (c35c0@e c35c1@e*) (if (null? c35c1@e*) (list 'begin '#f c35c0@e) (cons 'if (cons c35c0@e (cons (c35be@f (car c35c1@e*) (cdr c35c1@e*)) '(#f)))))))) c35be@f) c35ba@e c35bb@e*))) c35b8@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c35b6@t))) (c2ec6@syntax-dispatch c35b6@t '(_ any . each-any)))) c35b2@t))) (c2ec6@syntax-dispatch c35b2@t '(_)))) c35b0@stx))) (set! c2eaa@cond-macro (lambda (c35c4@stx) ((lambda (c35c6@t) ((lambda (c35c8@ls/false) (if c35c8@ls/false (apply (lambda (c35ca@cls c35cb@cls*) (c2e7c@bless ((letrec ((c35ce@f (lambda (c35d0@cls c35d1@cls*) (if (null? c35d1@cls*) ((lambda (c35d4@t) ((lambda (c35d6@ls/false) (if c35d6@ls/false (apply (lambda (c35d8@e c35d9@e*) (cons 'begin (cons c35d8@e c35d9@e*))) c35d6@ls/false) ((lambda (c35dc@t) ((lambda (c35de@ls/false) (if c35de@ls/false (apply (lambda (c35e0@e c35e1@p) (list 'let (list (list 't c35e0@e)) (list 'if 't (cons c35e1@p '(t))))) c35de@ls/false) ((lambda (c35e4@t) ((lambda (c35e6@ls/false) (if c35e6@ls/false (apply (lambda (c35e8@e) (cons 'or (cons c35e8@e '((if #f #f))))) c35e6@ls/false) ((lambda (c35ea@t) ((lambda (c35ec@ls/false) (if c35ec@ls/false (apply (lambda (c35ee@e c35ef@e*) (list 'if c35ee@e (cons 'begin c35ef@e*))) c35ec@ls/false) ((lambda (c35f2@t) ((lambda (c35f4@ls/false) (if c35f4@ls/false (apply (lambda () (c2faf@syntax-violation '#f '"invalid last clause" c35c4@stx)) c35f4@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c35f2@t))) (c2ec6@syntax-dispatch c35f2@t '_))) c35ea@t))) (c2ec6@syntax-dispatch c35ea@t '(any . each-any)))) c35e4@t))) (c2ec6@syntax-dispatch c35e4@t '(any)))) c35dc@t))) (c2ec6@syntax-dispatch c35dc@t '(any #(scheme-id =>) any)))) c35d4@t))) (c2ec6@syntax-dispatch c35d4@t '(#(scheme-id else) any . each-any)))) c35d0@cls) ((lambda (c35f6@t) ((lambda (c35f8@ls/false) (if c35f8@ls/false (apply (lambda (c35fa@e c35fb@e*) (c2faf@syntax-violation '#f '"incorrect position of keyword else" c35c4@stx)) c35f8@ls/false) ((lambda (c35fe@t) ((lambda (c3600@ls/false) (if c3600@ls/false (apply (lambda (c3602@e c3603@p) (list 'let (list (list 't c3602@e)) (list 'if 't (cons c3603@p '(t)) (c35ce@f (car c35d1@cls*) (cdr c35d1@cls*))))) c3600@ls/false) ((lambda (c3606@t) ((lambda (c3608@ls/false) (if c3608@ls/false (apply (lambda (c360a@e) (list 'or c360a@e (c35ce@f (car c35d1@cls*) (cdr c35d1@cls*)))) c3608@ls/false) ((lambda (c360c@t) ((lambda (c360e@ls/false) (if c360e@ls/false (apply (lambda (c3610@e c3611@e*) (list 'if c3610@e (cons 'begin c3611@e*) (c35ce@f (car c35d1@cls*) (cdr c35d1@cls*)))) c360e@ls/false) ((lambda (c3614@t) ((lambda (c3616@ls/false) (if c3616@ls/false (apply (lambda () (c2faf@syntax-violation '#f '"invalid last clause" c35c4@stx)) c3616@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3614@t))) (c2ec6@syntax-dispatch c3614@t '_))) c360c@t))) (c2ec6@syntax-dispatch c360c@t '(any . each-any)))) c3606@t))) (c2ec6@syntax-dispatch c3606@t '(any)))) c35fe@t))) (c2ec6@syntax-dispatch c35fe@t '(any #(scheme-id =>) any)))) c35f6@t))) (c2ec6@syntax-dispatch c35f6@t '(#(scheme-id else) any . each-any)))) c35d0@cls))))) c35ce@f) c35ca@cls c35cb@cls*))) c35c8@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c35c6@t))) (c2ec6@syntax-dispatch c35c6@t '(_ any . each-any)))) c35c4@stx))) (set! c2eac@do-include (lambda (c3618@stx c3619@id c361a@filename) ((lambda (c361e@filename) (begin (if (not (and (string? c361e@filename) (c2cbb@id? c3619@id))) (c2faf@syntax-violation '#f '"invalid syntax" c3618@stx) (void)) (cons (c2e7c@bless 'begin) (with-input-from-file c361e@filename (lambda () ((letrec ((c3620@f (lambda (c3622@ls) ((lambda (c3624@x) (if (eof-object? c3624@x) (reverse c3622@ls) (c3620@f (cons (c2c99@datum->stx c3619@id c3624@x) c3622@ls)))) (c2858@c2775@read-annotated))))) c3620@f) '())))))) (c2cd1@stx->datum c361a@filename)))) (set! c2eae@include-macro (lambda (c3626@e) ((lambda (c3628@t) ((lambda (c362a@ls/false) (if c362a@ls/false (apply (lambda (c362c@id c362d@filename) (c2eac@do-include c3626@e c362c@id c362d@filename)) c362a@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3628@t))) (c2ec6@syntax-dispatch c3628@t '(any any)))) c3626@e))) (set! c2eb0@include-into-macro (lambda (c3630@e) ((lambda (c3632@t) ((lambda (c3634@ls/false) (if c3634@ls/false (apply (lambda (c3636@id c3637@filename) (c2eac@do-include c3630@e c3636@id c3637@filename)) c3634@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3632@t))) (c2ec6@syntax-dispatch c3632@t '(_ any any)))) c3630@e))) (set! c2eb2@syntax-rules-macro (lambda (c363a@e) ((lambda (c363c@t) ((lambda (c363e@ls/false) (if c363e@ls/false (apply (lambda (c3640@lits c3641@pat* c3642@tmp*) (begin (c2ecc@verify-literals c3640@lits c363a@e) (c2e7c@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons c3640@lits (map (lambda (c3646@pat c3647@tmp) ((lambda (c364a@t) ((lambda (c364c@ls/false) (if c364c@ls/false (apply (lambda (c364e@rest) (list (cons 'g c364e@rest) (list 'syntax c3647@tmp))) c364c@ls/false) ((lambda (c3650@t) ((lambda (c3652@ls/false) (if c3652@ls/false (apply (lambda () (c2faf@syntax-violation '#f '"invalid syntax-rules pattern" c363a@e c3646@pat)) c3652@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3650@t))) (c2ec6@syntax-dispatch c3650@t '_))) c364a@t))) (c2ec6@syntax-dispatch c364a@t '(_ . any)))) c3646@pat)) c3641@pat* c3642@tmp*)))))))) c363e@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c363c@t))) (c2ec6@syntax-dispatch c363c@t '(_ each-any . #(each (any any)))))) c363a@e))) (set! c2eb4@quasiquote-macro ((lambda () ((lambda (c3655@datum c3671@quasicons* c3673@quasicons c3675@quasiappend c3677@quasivector c3679@vquasi c367b@quasi) (begin (set! c3655@datum (lambda (c3756@x) (list (c2e50@scheme-stx 'quote) (c2ca3@mkstx c3756@x '() '() '())))) (set! c3671@quasicons* (lambda (c374e@x c374f@y) ((letrec ((c3752@f (lambda (c3754@x) (if (null? c3754@x) c374f@y (c3673@quasicons (car c3754@x) (c3752@f (cdr c3754@x))))))) c3752@f) c374e@x))) (set! c3673@quasicons (lambda (c3728@x c3729@y) ((lambda (c372c@t) ((lambda (c372e@ls/false) (if c372e@ls/false (apply (lambda (c3730@dy) ((lambda (c3732@t) ((lambda (c3734@ls/false) (if c3734@ls/false (apply (lambda (c3736@dx) (list (c2e50@scheme-stx 'quote) (cons c3736@dx c3730@dy))) c3734@ls/false) ((lambda (c3738@t) ((lambda (c373a@ls/false) (if c373a@ls/false (apply (lambda () ((lambda (c373c@t) ((lambda (c373e@ls/false) (if c373e@ls/false (apply (lambda () (list (c2e50@scheme-stx 'list) c3728@x)) c373e@ls/false) ((lambda (c3740@t) ((lambda (c3742@ls/false) (if c3742@ls/false (apply (lambda () (list (c2e50@scheme-stx 'cons) c3728@x c3729@y)) c3742@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3740@t))) (c2ec6@syntax-dispatch c3740@t '_))) c373c@t))) (c2ec6@syntax-dispatch c373c@t '()))) c3730@dy)) c373a@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3738@t))) (c2ec6@syntax-dispatch c3738@t '_))) c3732@t))) (c2ec6@syntax-dispatch c3732@t '(#(scheme-id quote) any)))) c3728@x)) c372e@ls/false) ((lambda (c3744@t) ((lambda (c3746@ls/false) (if c3746@ls/false (apply (lambda (c3748@stuff) (cons* (c2e50@scheme-stx 'list) c3728@x c3748@stuff)) c3746@ls/false) ((lambda (c374a@t) ((lambda (c374c@ls/false) (if c374c@ls/false (apply (lambda () (list (c2e50@scheme-stx 'cons) c3728@x c3729@y)) c374c@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c374a@t))) (c2ec6@syntax-dispatch c374a@t '_))) c3744@t))) (c2ec6@syntax-dispatch c3744@t '(#(scheme-id list) . each-any)))) c372c@t))) (c2ec6@syntax-dispatch c372c@t '(#(scheme-id quote) any)))) c3729@y))) (set! c3675@quasiappend (lambda (c370e@x c370f@y) ((lambda (c3712@ls) (if (null? c3712@ls) (list (c2e50@scheme-stx 'quote) '()) (if (null? (cdr c3712@ls)) (car c3712@ls) (cons* (c2e50@scheme-stx 'append) c3712@ls)))) ((letrec ((c3714@f (lambda (c3716@x) (if (null? c3716@x) ((lambda (c3718@t) ((lambda (c371a@ls/false) (if c371a@ls/false (apply (lambda () '()) c371a@ls/false) ((lambda (c371c@t) ((lambda (c371e@ls/false) (if c371e@ls/false (apply (lambda () (list c370f@y)) c371e@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c371c@t))) (c2ec6@syntax-dispatch c371c@t '_))) c3718@t))) (c2ec6@syntax-dispatch c3718@t '(#(scheme-id quote) ())))) c370f@y) ((lambda (c3720@t) ((lambda (c3722@ls/false) (if c3722@ls/false (apply (lambda () (c3714@f (cdr c3716@x))) c3722@ls/false) ((lambda (c3724@t) ((lambda (c3726@ls/false) (if c3726@ls/false (apply (lambda () (cons (car c3716@x) (c3714@f (cdr c3716@x)))) c3726@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3724@t))) (c2ec6@syntax-dispatch c3724@t '_))) c3720@t))) (c2ec6@syntax-dispatch c3720@t '(#(scheme-id quote) ())))) (car c3716@x)))))) c3714@f) c370e@x)))) (set! c3677@quasivector (lambda (c36dc@x) ((lambda (c36de@pat-x) ((lambda (c36e0@t) ((lambda (c36e2@ls/false) (if c36e2@ls/false (apply (lambda (c36e4@x*) (list (c2e50@scheme-stx 'quote) (list->vector c36e4@x*))) c36e2@ls/false) ((lambda (c36e6@t) ((lambda (c36e8@ls/false) (if c36e8@ls/false (apply (lambda () ((letrec ((c36ea@f (lambda (c36ec@x c36ed@k) ((lambda (c36f0@t) ((lambda (c36f2@ls/false) (if c36f2@ls/false (apply (lambda (c36f4@x*) (c36ed@k (map (lambda (c36f6@x) (list (c2e50@scheme-stx 'quote) c36f6@x)) c36f4@x*))) c36f2@ls/false) ((lambda (c36f8@t) ((lambda (c36fa@ls/false) (if c36fa@ls/false (apply (lambda (c36fc@x*) (c36ed@k c36fc@x*)) c36fa@ls/false) ((lambda (c36fe@t) ((lambda (c3700@ls/false) (if c3700@ls/false (apply (lambda (c3702@x c3703@y) (c36ea@f c3703@y (lambda (c3706@ls) (c36ed@k (cons c3702@x c3706@ls))))) c3700@ls/false) ((lambda (c3708@t) ((lambda (c370a@ls/false) (if c370a@ls/false (apply (lambda () (list (c2e50@scheme-stx 'list->vector) c36de@pat-x)) c370a@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3708@t))) (c2ec6@syntax-dispatch c3708@t '_))) c36fe@t))) (c2ec6@syntax-dispatch c36fe@t '(#(scheme-id cons) any any)))) c36f8@t))) (c2ec6@syntax-dispatch c36f8@t '(#(scheme-id list) . each-any)))) c36f0@t))) (c2ec6@syntax-dispatch c36f0@t '(#(scheme-id quote) each-any)))) c36ec@x)))) c36ea@f) c36dc@x (lambda (c370c@ls) (cons* (c2e50@scheme-stx 'vector) c370c@ls)))) c36e8@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c36e6@t))) (c2ec6@syntax-dispatch c36e6@t '_))) c36e0@t))) (c2ec6@syntax-dispatch c36e0@t '(#(scheme-id quote) each-any)))) c36de@pat-x)) c36dc@x))) (set! c3679@vquasi (lambda (c36ba@p c36bb@lev) ((lambda (c36be@t) ((lambda (c36c0@ls/false) (if c36c0@ls/false (apply (lambda (c36c2@p c36c3@q) ((lambda (c36c6@t) ((lambda (c36c8@ls/false) (if c36c8@ls/false (apply (lambda (c36ca@p) (if (= c36bb@lev '0) (c3671@quasicons* c36ca@p (c3679@vquasi c36c3@q c36bb@lev)) (c3673@quasicons (c3673@quasicons (c3655@datum 'unquote) (c367b@quasi c36ca@p (- c36bb@lev '1))) (c3679@vquasi c36c3@q c36bb@lev)))) c36c8@ls/false) ((lambda (c36cc@t) ((lambda (c36ce@ls/false) (if c36ce@ls/false (apply (lambda (c36d0@p) (if (= c36bb@lev '0) (c3675@quasiappend c36d0@p (c3679@vquasi c36c3@q c36bb@lev)) (c3673@quasicons (c3673@quasicons (c3655@datum 'unquote-splicing) (c367b@quasi c36d0@p (- c36bb@lev '1))) (c3679@vquasi c36c3@q c36bb@lev)))) c36ce@ls/false) ((lambda (c36d2@t) ((lambda (c36d4@ls/false) (if c36d4@ls/false (apply (lambda (c36d6@p) (c3673@quasicons (c367b@quasi c36d6@p c36bb@lev) (c3679@vquasi c36c3@q c36bb@lev))) c36d4@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c36d2@t))) (c2ec6@syntax-dispatch c36d2@t 'any))) c36cc@t))) (c2ec6@syntax-dispatch c36cc@t '(#(scheme-id unquote-splicing) . each-any)))) c36c6@t))) (c2ec6@syntax-dispatch c36c6@t '(#(scheme-id unquote) . each-any)))) c36c2@p)) c36c0@ls/false) ((lambda (c36d8@t) ((lambda (c36da@ls/false) (if c36da@ls/false (apply (lambda () (list (c2e50@scheme-stx 'quote) '())) c36da@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c36d8@t))) (c2ec6@syntax-dispatch c36d8@t '()))) c36be@t))) (c2ec6@syntax-dispatch c36be@t '(any . any)))) c36ba@p))) (set! c367b@quasi (lambda (c3684@p c3685@lev) ((lambda (c3688@t) ((lambda (c368a@ls/false) (if c368a@ls/false (apply (lambda (c368c@p) (if (= c3685@lev '0) c368c@p (c3673@quasicons (c3655@datum 'unquote) (c367b@quasi (list c368c@p) (- c3685@lev '1))))) c368a@ls/false) ((lambda (c368e@t) ((lambda (c3690@ls/false) (if c3690@ls/false (apply (lambda (c3692@p c3693@q) (if (= c3685@lev '0) (c3671@quasicons* c3692@p (c367b@quasi c3693@q c3685@lev)) (c3673@quasicons (c3673@quasicons (c3655@datum 'unquote) (c367b@quasi c3692@p (- c3685@lev '1))) (c367b@quasi c3693@q c3685@lev)))) c3690@ls/false) ((lambda (c3696@t) ((lambda (c3698@ls/false) (if c3698@ls/false (apply (lambda (c369a@p c369b@q) (if (= c3685@lev '0) (c3675@quasiappend c369a@p (c367b@quasi c369b@q c3685@lev)) (c3673@quasicons (c3673@quasicons (c3655@datum 'unquote-splicing) (c367b@quasi c369a@p (- c3685@lev '1))) (c367b@quasi c369b@q c3685@lev)))) c3698@ls/false) ((lambda (c369e@t) ((lambda (c36a0@ls/false) (if c36a0@ls/false (apply (lambda (c36a2@p) (c3673@quasicons (c3655@datum 'quasiquote) (c367b@quasi (list c36a2@p) (+ c3685@lev '1)))) c36a0@ls/false) ((lambda (c36a4@t) ((lambda (c36a6@ls/false) (if c36a6@ls/false (apply (lambda (c36a8@p c36a9@q) (c3673@quasicons (c367b@quasi c36a8@p c3685@lev) (c367b@quasi c36a9@q c3685@lev))) c36a6@ls/false) ((lambda (c36ac@t) ((lambda (c36ae@ls/false) (if (and c36ae@ls/false (apply (lambda (c36b0@x) (not (c2c83@stx? c36b0@x))) c36ae@ls/false)) (apply (lambda (c36b2@x) (c3677@quasivector (c3679@vquasi c36b2@x c3685@lev))) c36ae@ls/false) ((lambda (c36b4@t) ((lambda (c36b6@ls/false) (if c36b6@ls/false (apply (lambda (c36b8@p) (list (c2e50@scheme-stx 'quote) c36b8@p)) c36b6@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c36b4@t))) (c2ec6@syntax-dispatch c36b4@t 'any))) c36ac@t))) (c2ec6@syntax-dispatch c36ac@t '#(vector each-any)))) c36a4@t))) (c2ec6@syntax-dispatch c36a4@t '(any . any)))) c369e@t))) (c2ec6@syntax-dispatch c369e@t '(#(scheme-id quasiquote) any)))) c3696@t))) (c2ec6@syntax-dispatch c3696@t '((#(scheme-id unquote-splicing) . each-any) . any)))) c368e@t))) (c2ec6@syntax-dispatch c368e@t '((#(scheme-id unquote) . each-any) . any)))) c3688@t))) (c2ec6@syntax-dispatch c3688@t '(#(scheme-id unquote) any)))) c3684@p))) (lambda (c367c@x) ((lambda (c367e@t) ((lambda (c3680@ls/false) (if c3680@ls/false (apply (lambda (c3682@e) (c367b@quasi c3682@e '0)) c3680@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c367e@t))) (c2ec6@syntax-dispatch c367e@t '(_ any)))) c367c@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! c2eb6@quasisyntax-macro ((lambda () ((lambda (c3759@quasi) (begin (set! c3759@quasi (lambda (c3774@p c3775@lev) ((lambda (c3778@t) ((lambda (c377a@ls/false) (if c377a@ls/false (apply (lambda (c377c@p) (if (= c3775@lev '0) ((lambda (c377e@g) (values (list c377e@g) (list c377c@p) c377e@g)) (gensym)) (call-with-values (lambda () (c3759@quasi c377c@p (- c3775@lev '1))) (lambda (c3786@c3781 c3787@c3783 c3788@c3785) ((lambda (c378c@p c378d@rhs* c378e@lhs*) (values c378e@lhs* c378d@rhs* (list 'unsyntax c378c@p))) c3788@c3785 c3787@c3783 c3786@c3781))))) c377a@ls/false) ((lambda (c3792@t) ((lambda (c3794@ls/false) (if (and c3794@ls/false (apply (lambda () (= c3775@lev '0)) c3794@ls/false)) (apply (lambda () (c2faf@syntax-violation '#f '"incorrect use of unsyntax" c3774@p)) c3794@ls/false) ((lambda (c3796@t) ((lambda (c3798@ls/false) (if c3798@ls/false (apply (lambda (c379a@p* c379b@q) (call-with-values (lambda () (c3759@quasi c379b@q c3775@lev)) (lambda (c37a4@c379f c37a5@c37a1 c37a6@c37a3) ((lambda (c37aa@q c37ab@rhs* c37ac@lhs*) (if (= c3775@lev '0) ((lambda (c37b0@g*) (values (append c37b0@g* c37ac@lhs*) (append c379a@p* c37ab@rhs*) (append c37b0@g* c37aa@q))) (map (lambda (c37b2@x) (gensym)) c379a@p*)) (call-with-values (lambda () (c3759@quasi c379a@p* (- c3775@lev '1))) (lambda (c37ba@c37b5 c37bb@c37b7 c37bc@c37b9) ((lambda (c37c0@p* c37c1@rhs2* c37c2@lhs2*) (values (append c37c2@lhs2* c37ac@lhs*) (append c37c1@rhs2* c37ab@rhs*) (cons (cons 'unsyntax c37c0@p*) c37aa@q))) c37bc@c37b9 c37bb@c37b7 c37ba@c37b5))))) c37a6@c37a3 c37a5@c37a1 c37a4@c379f)))) c3798@ls/false) ((lambda (c37c6@t) ((lambda (c37c8@ls/false) (if c37c8@ls/false (apply (lambda (c37ca@p* c37cb@q) (call-with-values (lambda () (c3759@quasi c37cb@q c3775@lev)) (lambda (c37d4@c37cf c37d5@c37d1 c37d6@c37d3) ((lambda (c37da@q c37db@rhs* c37dc@lhs*) (if (= c3775@lev '0) ((lambda (c37e0@g*) (values (append (map (lambda (c37e2@g) (cons c37e2@g '(...))) c37e0@g*) c37dc@lhs*) (append c37ca@p* c37db@rhs*) (append (apply append (map (lambda (c37e4@g) (cons c37e4@g '(...))) c37e0@g*)) c37da@q))) (map (lambda (c37e6@x) (gensym)) c37ca@p*)) (call-with-values (lambda () (c3759@quasi c37ca@p* (- c3775@lev '1))) (lambda (c37ee@c37e9 c37ef@c37eb c37f0@c37ed) ((lambda (c37f4@p* c37f5@rhs2* c37f6@lhs2*) (values (append c37f6@lhs2* c37dc@lhs*) (append c37f5@rhs2* c37db@rhs*) (cons (cons 'unsyntax-splicing c37f4@p*) c37da@q))) c37f0@c37ed c37ef@c37eb c37ee@c37e9))))) c37d6@c37d3 c37d5@c37d1 c37d4@c37cf)))) c37c8@ls/false) ((lambda (c37fa@t) ((lambda (c37fc@ls/false) (if (and c37fc@ls/false (apply (lambda () (= c3775@lev '0)) c37fc@ls/false)) (apply (lambda () (c2faf@syntax-violation '#f '"incorrect use of unsyntax-splicing" c3774@p)) c37fc@ls/false) ((lambda (c37fe@t) ((lambda (c3800@ls/false) (if c3800@ls/false (apply (lambda (c3802@p) (call-with-values (lambda () (c3759@quasi c3802@p (+ c3775@lev '1))) (lambda (c380a@c3805 c380b@c3807 c380c@c3809) ((lambda (c3810@p c3811@rhs* c3812@lhs*) (values c3812@lhs* c3811@rhs* (list 'quasisyntax c3810@p))) c380c@c3809 c380b@c3807 c380a@c3805)))) c3800@ls/false) ((lambda (c3816@t) ((lambda (c3818@ls/false) (if c3818@ls/false (apply (lambda (c381a@p c381b@q) (call-with-values (lambda () (c3759@quasi c381a@p c3775@lev)) (lambda (c382a@c381f c382b@c3821 c382c@c3823) (call-with-values (lambda () (c3759@quasi c381b@q c3775@lev)) (lambda (c3830@c3825 c3831@c3827 c3832@c3829) ((lambda (c3836@q c3837@rhs2* c3838@lhs2* c3839@p c383a@rhs* c383b@lhs*) (values (append c3838@lhs2* c383b@lhs*) (append c3837@rhs2* c383a@rhs*) (cons c3839@p c3836@q))) c3832@c3829 c3831@c3827 c3830@c3825 c382c@c3823 c382b@c3821 c382a@c381f)))))) c3818@ls/false) ((lambda (c3842@t) ((lambda (c3844@ls/false) (if c3844@ls/false (apply (lambda (c3846@x*) (call-with-values (lambda () (c3759@quasi c3846@x* c3775@lev)) (lambda (c384e@c3849 c384f@c384b c3850@c384d) ((lambda (c3854@x* c3855@rhs* c3856@lhs*) (values c3856@lhs* c3855@rhs* (list->vector c3854@x*))) c3850@c384d c384f@c384b c384e@c3849)))) c3844@ls/false) ((lambda (c385a@t) ((lambda (c385c@ls/false) (if c385c@ls/false (apply (lambda () (values '() '() c3774@p)) c385c@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c385a@t))) (c2ec6@syntax-dispatch c385a@t '_))) c3842@t))) (c2ec6@syntax-dispatch c3842@t '#(vector each-any)))) c3816@t))) (c2ec6@syntax-dispatch c3816@t '(any . any)))) c37fe@t))) (c2ec6@syntax-dispatch c37fe@t '(#(scheme-id quasisyntax) any)))) c37fa@t))) (c2ec6@syntax-dispatch c37fa@t '#(scheme-id unsyntax-splicing)))) c37c6@t))) (c2ec6@syntax-dispatch c37c6@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) c3796@t))) (c2ec6@syntax-dispatch c3796@t '((#(scheme-id unsyntax) . each-any) . any)))) c3792@t))) (c2ec6@syntax-dispatch c3792@t '#(scheme-id unsyntax)))) c3778@t))) (c2ec6@syntax-dispatch c3778@t '(#(scheme-id unsyntax) any)))) c3774@p))) (lambda (c375a@x) ((lambda (c375c@t) ((lambda (c375e@ls/false) (if c375e@ls/false (apply (lambda (c3760@e) (call-with-values (lambda () (c3759@quasi c3760@e '0)) (lambda (c3768@c3763 c3769@c3765 c376a@c3767) ((lambda (c376e@v c376f@rhs* c3770@lhs*) (c2e7c@bless (list 'syntax-case (cons 'list c376f@rhs*) '() (list c3770@lhs* (list 'syntax c376e@v))))) c376a@c3767 c3769@c3765 c3768@c3763)))) c375e@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c375c@t))) (c2ec6@syntax-dispatch c375c@t '(_ any)))) c375a@x)))) '#f)))) (set! c2eb8@define-struct-macro (lambda (c385e@stx) (c2faf@syntax-violation '#f '"define-struct not supported" c385e@stx))) (set! c2eba@define-record-type-macro (lambda (c3860@x) ((lambda (c3863@id c3865@get-record-name c3867@get-record-constructor-name c3869@get-record-predicate-name c386b@get-clause c386d@foo-rtd-code c386f@parent-rtd-code c3871@parent-rcd-code c3873@foo-rcd-code c3875@get-protocol-code c3877@get-fields c3879@get-mutator-indices c387b@get-mutators c387d@get-accessors c387f@enumerate c3881@do-define-record c3883@verify-clauses) (begin (set! c3863@id (lambda (c3a56@ctxt . c3a58@str*) (c2fb3@datum->syntax c3a56@ctxt (string->symbol (apply string-append (map (lambda (c3a5a@x) (if (symbol? c3a5a@x) (symbol->string c3a5a@x) (if (string? c3a5a@x) c3a5a@x (assertion-violation 'define-record-type '"BUG")))) c3a58@str*)))))) (set! c3865@get-record-name (lambda (c3a44@spec) ((lambda (c3a46@t) ((lambda (c3a48@ls/false) (if c3a48@ls/false (apply (lambda (c3a4a@foo c3a4b@make-foo c3a4c@foo?) c3a4a@foo) c3a48@ls/false) ((lambda (c3a50@t) ((lambda (c3a52@ls/false) (if c3a52@ls/false (apply (lambda (c3a54@foo) c3a54@foo) c3a52@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3a50@t))) (c2ec6@syntax-dispatch c3a50@t 'any))) c3a46@t))) (c2ec6@syntax-dispatch c3a46@t '(any any any)))) c3a44@spec))) (set! c3867@get-record-constructor-name (lambda (c3a30@spec) ((lambda (c3a32@t) ((lambda (c3a34@ls/false) (if c3a34@ls/false (apply (lambda (c3a36@foo c3a37@make-foo c3a38@foo?) c3a37@make-foo) c3a34@ls/false) ((lambda (c3a3c@t) ((lambda (c3a3e@ls/false) (if (and c3a3e@ls/false (apply (lambda (c3a40@foo) (c2cbb@id? c3a40@foo)) c3a3e@ls/false)) (apply (lambda (c3a42@foo) (c3863@id c3a42@foo '"make-" (c2cd1@stx->datum c3a42@foo))) c3a3e@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3a3c@t))) (c2ec6@syntax-dispatch c3a3c@t 'any))) c3a32@t))) (c2ec6@syntax-dispatch c3a32@t '(any any any)))) c3a30@spec))) (set! c3869@get-record-predicate-name (lambda (c3a1c@spec) ((lambda (c3a1e@t) ((lambda (c3a20@ls/false) (if c3a20@ls/false (apply (lambda (c3a22@foo c3a23@make-foo c3a24@foo?) c3a24@foo?) c3a20@ls/false) ((lambda (c3a28@t) ((lambda (c3a2a@ls/false) (if (and c3a2a@ls/false (apply (lambda (c3a2c@foo) (c2cbb@id? c3a2c@foo)) c3a2a@ls/false)) (apply (lambda (c3a2e@foo) (c3863@id c3a2e@foo (c2cd1@stx->datum c3a2e@foo) '"?")) c3a2a@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3a28@t))) (c2ec6@syntax-dispatch c3a28@t 'any))) c3a1e@t))) (c2ec6@syntax-dispatch c3a1e@t '(any any any)))) c3a1c@spec))) (set! c386b@get-clause (lambda (c3a0a@id c3a0b@ls) ((lambda (c3a0e@t) ((lambda (c3a10@ls/false) (if c3a10@ls/false (apply (lambda () '#f) c3a10@ls/false) ((lambda (c3a12@t) ((lambda (c3a14@ls/false) (if c3a14@ls/false (apply (lambda (c3a16@x c3a17@rest c3a18@ls) (if (c2cc3@free-id=? (c2e7c@bless c3a0a@id) c3a16@x) (cons c3a16@x c3a17@rest) (c386b@get-clause c3a0a@id c3a18@ls))) c3a14@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3a12@t))) (c2ec6@syntax-dispatch c3a12@t '((any . any) . any)))) c3a0e@t))) (c2ec6@syntax-dispatch c3a0e@t '()))) c3a0b@ls))) (set! c386d@foo-rtd-code (lambda (c39b8@name c39b9@clause* c39ba@parent-rtd-code) ((lambda (c39bf@convert-field-spec*) (begin (set! c39bf@convert-field-spec* (lambda (c39f0@ls) (list->vector (map (lambda (c39f2@x) ((lambda (c39f4@t) ((lambda (c39f6@ls/false) (if c39f6@ls/false (apply (lambda (c39f8@name c39f9@rest) (list 'mutable c39f8@name)) c39f6@ls/false) ((lambda (c39fc@t) ((lambda (c39fe@ls/false) (if c39fe@ls/false (apply (lambda (c3a00@name c3a01@rest) (list 'immutable c3a00@name)) c39fe@ls/false) ((lambda (c3a04@t) ((lambda (c3a06@ls/false) (if c3a06@ls/false (apply (lambda (c3a08@name) (list 'immutable c3a08@name)) c3a06@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3a04@t))) (c2ec6@syntax-dispatch c3a04@t 'any))) c39fc@t))) (c2ec6@syntax-dispatch c39fc@t '(#(scheme-id immutable) any . any)))) c39f4@t))) (c2ec6@syntax-dispatch c39f4@t '(#(scheme-id mutable) any . any)))) c39f2@x)) c39f0@ls)))) ((lambda (c39c0@uid-code c39c1@sealed? c39c2@opaque? c39c3@fields) (c2e7c@bless (list 'make-record-type-descriptor (list 'quote c39b8@name) c39ba@parent-rtd-code c39c0@uid-code c39c1@sealed? c39c2@opaque? c39c3@fields))) ((lambda (c39c8@t) ((lambda (c39ca@ls/false) (if c39ca@ls/false (apply (lambda () (list 'quote (gensym))) c39ca@ls/false) ((lambda (c39cc@t) ((lambda (c39ce@ls/false) (if c39ce@ls/false (apply (lambda (c39d0@uid) (list 'quote c39d0@uid)) c39ce@ls/false) ((lambda (c39d2@t) ((lambda (c39d4@ls/false) (if c39d4@ls/false (apply (lambda () '#f) c39d4@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c39d2@t))) (c2ec6@syntax-dispatch c39d2@t '_))) c39cc@t))) (c2ec6@syntax-dispatch c39cc@t '(_ any)))) c39c8@t))) (c2ec6@syntax-dispatch c39c8@t '(_)))) (c386b@get-clause 'nongenerative c39b9@clause*)) ((lambda (c39d6@t) ((lambda (c39d8@ls/false) (if c39d8@ls/false (apply (lambda () '#t) c39d8@ls/false) ((lambda (c39da@t) ((lambda (c39dc@ls/false) (if c39dc@ls/false (apply (lambda () '#f) c39dc@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c39da@t))) (c2ec6@syntax-dispatch c39da@t '_))) c39d6@t))) (c2ec6@syntax-dispatch c39d6@t '(_ #(atom #t))))) (c386b@get-clause 'sealed c39b9@clause*)) ((lambda (c39de@t) ((lambda (c39e0@ls/false) (if c39e0@ls/false (apply (lambda () '#t) c39e0@ls/false) ((lambda (c39e2@t) ((lambda (c39e4@ls/false) (if c39e4@ls/false (apply (lambda () '#f) c39e4@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c39e2@t))) (c2ec6@syntax-dispatch c39e2@t '_))) c39de@t))) (c2ec6@syntax-dispatch c39de@t '(_ #(atom #t))))) (c386b@get-clause 'opaque c39b9@clause*)) ((lambda (c39e6@t) ((lambda (c39e8@ls/false) (if c39e8@ls/false (apply (lambda (c39ea@field-spec*) (list 'quote (c39bf@convert-field-spec* c39ea@field-spec*))) c39e8@ls/false) ((lambda (c39ec@t) ((lambda (c39ee@ls/false) (if c39ee@ls/false (apply (lambda () ''#()) c39ee@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c39ec@t))) (c2ec6@syntax-dispatch c39ec@t '_))) c39e6@t))) (c2ec6@syntax-dispatch c39e6@t '(_ . each-any)))) (c386b@get-clause 'fields c39b9@clause*))))) '#f))) (set! c386f@parent-rtd-code (lambda (c39a0@clause*) ((lambda (c39a2@t) ((lambda (c39a4@ls/false) (if c39a4@ls/false (apply (lambda (c39a6@name) (list 'record-type-descriptor c39a6@name)) c39a4@ls/false) ((lambda (c39a8@t) ((lambda (c39aa@ls/false) (if c39aa@ls/false (apply (lambda () ((lambda (c39ac@t) ((lambda (c39ae@ls/false) (if c39ae@ls/false (apply (lambda (c39b0@rtd c39b1@rcd) c39b0@rtd) c39ae@ls/false) ((lambda (c39b4@t) ((lambda (c39b6@ls/false) (if c39b6@ls/false (apply (lambda () '#f) c39b6@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c39b4@t))) (c2ec6@syntax-dispatch c39b4@t '#(atom #f)))) c39ac@t))) (c2ec6@syntax-dispatch c39ac@t '(_ any any)))) (c386b@get-clause 'parent-rtd c39a0@clause*))) c39aa@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c39a8@t))) (c2ec6@syntax-dispatch c39a8@t '#(atom #f)))) c39a2@t))) (c2ec6@syntax-dispatch c39a2@t '(_ any)))) (c386b@get-clause 'parent c39a0@clause*)))) (set! c3871@parent-rcd-code (lambda (c3988@clause*) ((lambda (c398a@t) ((lambda (c398c@ls/false) (if c398c@ls/false (apply (lambda (c398e@name) (list 'record-constructor-descriptor c398e@name)) c398c@ls/false) ((lambda (c3990@t) ((lambda (c3992@ls/false) (if c3992@ls/false (apply (lambda () ((lambda (c3994@t) ((lambda (c3996@ls/false) (if c3996@ls/false (apply (lambda (c3998@rtd c3999@rcd) c3999@rcd) c3996@ls/false) ((lambda (c399c@t) ((lambda (c399e@ls/false) (if c399e@ls/false (apply (lambda () '#f) c399e@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c399c@t))) (c2ec6@syntax-dispatch c399c@t '#(atom #f)))) c3994@t))) (c2ec6@syntax-dispatch c3994@t '(_ any any)))) (c386b@get-clause 'parent-rtd c3988@clause*))) c3992@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3990@t))) (c2ec6@syntax-dispatch c3990@t '#(atom #f)))) c398a@t))) (c2ec6@syntax-dispatch c398a@t '(_ any)))) (c386b@get-clause 'parent c3988@clause*)))) (set! c3873@foo-rcd-code (lambda (c3980@clause* c3981@foo-rtd c3982@protocol c3983@parent-rcd-code) (list 'make-record-constructor-descriptor c3981@foo-rtd c3983@parent-rcd-code c3982@protocol))) (set! c3875@get-protocol-code (lambda (c3974@clause*) ((lambda (c3976@t) ((lambda (c3978@ls/false) (if c3978@ls/false (apply (lambda (c397a@expr) c397a@expr) c3978@ls/false) ((lambda (c397c@t) ((lambda (c397e@ls/false) (if c397e@ls/false (apply (lambda () '#f) c397e@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c397c@t))) (c2ec6@syntax-dispatch c397c@t '_))) c3976@t))) (c2ec6@syntax-dispatch c3976@t '(_ any)))) (c386b@get-clause 'protocol c3974@clause*)))) (set! c3877@get-fields (lambda (c3962@clause*) ((lambda (c3964@t) ((lambda (c3966@ls/false) (if c3966@ls/false (apply (lambda () '()) c3966@ls/false) ((lambda (c3968@t) ((lambda (c396a@ls/false) (if c396a@ls/false (apply (lambda (c396c@f*) c396c@f*) c396a@ls/false) ((lambda (c396e@t) ((lambda (c3970@ls/false) (if c3970@ls/false (apply (lambda (c3972@rest) (c3877@get-fields c3972@rest)) c3970@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c396e@t))) (c2ec6@syntax-dispatch c396e@t '(_ . any)))) c3968@t))) (c2ec6@syntax-dispatch c3968@t '((#(scheme-id fields) . each-any) . _)))) c3964@t))) (c2ec6@syntax-dispatch c3964@t '()))) c3962@clause*))) (set! c3879@get-mutator-indices (lambda (c394a@fields) ((letrec ((c394c@f (lambda (c394e@fields c394f@i) ((lambda (c3952@t) ((lambda (c3954@ls/false) (if c3954@ls/false (apply (lambda () '()) c3954@ls/false) ((lambda (c3956@t) ((lambda (c3958@ls/false) (if c3958@ls/false (apply (lambda (c395a@rest) (cons c394f@i (c394c@f c395a@rest (+ c394f@i '1)))) c3958@ls/false) ((lambda (c395c@t) ((lambda (c395e@ls/false) (if c395e@ls/false (apply (lambda (c3960@rest) (c394c@f c3960@rest (+ c394f@i '1))) c395e@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c395c@t))) (c2ec6@syntax-dispatch c395c@t '(_ . any)))) c3956@t))) (c2ec6@syntax-dispatch c3956@t '((#(scheme-id mutable) . _) . any)))) c3952@t))) (c2ec6@syntax-dispatch c3952@t '()))) c394e@fields)))) c394c@f) c394a@fields '0))) (set! c387b@get-mutators (lambda (c3920@foo c3921@fields) ((lambda (c3925@gen-name) (begin (set! c3925@gen-name (lambda (c3948@x) (c2fb3@datum->syntax c3920@foo (string->symbol (string-append (symbol->string (c2fb5@syntax->datum c3920@foo)) '"-" (symbol->string (c2fb5@syntax->datum c3948@x)) '"-set!"))))) ((letrec ((c3926@f (lambda (c3928@fields) ((lambda (c392a@t) ((lambda (c392c@ls/false) (if c392c@ls/false (apply (lambda () '()) c392c@ls/false) ((lambda (c392e@t) ((lambda (c3930@ls/false) (if c3930@ls/false (apply (lambda (c3932@name c3933@accessor c3934@mutator c3935@rest) (cons c3934@mutator (c3926@f c3935@rest))) c3930@ls/false) ((lambda (c393a@t) ((lambda (c393c@ls/false) (if c393c@ls/false (apply (lambda (c393e@name c393f@rest) (cons (c3925@gen-name c393e@name) (c3926@f c393f@rest))) c393c@ls/false) ((lambda (c3942@t) ((lambda (c3944@ls/false) (if c3944@ls/false (apply (lambda (c3946@rest) (c3926@f c3946@rest)) c3944@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3942@t))) (c2ec6@syntax-dispatch c3942@t '(_ . any)))) c393a@t))) (c2ec6@syntax-dispatch c393a@t '((#(scheme-id mutable) any) . any)))) c392e@t))) (c2ec6@syntax-dispatch c392e@t '((#(scheme-id mutable) any any any) . any)))) c392a@t))) (c2ec6@syntax-dispatch c392a@t '()))) c3928@fields)))) c3926@f) c3921@fields))) '#f))) (set! c387d@get-accessors (lambda (c38dc@foo c38dd@fields) ((lambda (c38e1@gen-name) (begin (set! c38e1@gen-name (lambda (c391e@x) (c2fb3@datum->syntax c38dc@foo (string->symbol (string-append (symbol->string (c2fb5@syntax->datum c38dc@foo)) '"-" (symbol->string (c2fb5@syntax->datum c391e@x))))))) (map (lambda (c38e2@field) ((lambda (c38e4@t) ((lambda (c38e6@ls/false) (if (and c38e6@ls/false (apply (lambda (c38e8@name c38e9@accessor c38ea@mutator) (c2cbb@id? c38e9@accessor)) c38e6@ls/false)) (apply (lambda (c38ee@name c38ef@accessor c38f0@mutator) c38ef@accessor) c38e6@ls/false) ((lambda (c38f4@t) ((lambda (c38f6@ls/false) (if (and c38f6@ls/false (apply (lambda (c38f8@name c38f9@accessor) (c2cbb@id? c38f9@accessor)) c38f6@ls/false)) (apply (lambda (c38fc@name c38fd@accessor) c38fd@accessor) c38f6@ls/false) ((lambda (c3900@t) ((lambda (c3902@ls/false) (if (and c3902@ls/false (apply (lambda (c3904@name) (c2cbb@id? c3904@name)) c3902@ls/false)) (apply (lambda (c3906@name) (c38e1@gen-name c3906@name)) c3902@ls/false) ((lambda (c3908@t) ((lambda (c390a@ls/false) (if (and c390a@ls/false (apply (lambda (c390c@name) (c2cbb@id? c390c@name)) c390a@ls/false)) (apply (lambda (c390e@name) (c38e1@gen-name c390e@name)) c390a@ls/false) ((lambda (c3910@t) ((lambda (c3912@ls/false) (if (and c3912@ls/false (apply (lambda (c3914@name) (c2cbb@id? c3914@name)) c3912@ls/false)) (apply (lambda (c3916@name) (c38e1@gen-name c3916@name)) c3912@ls/false) ((lambda (c3918@t) ((lambda (c391a@ls/false) (if c391a@ls/false (apply (lambda (c391c@others) (c2faf@syntax-violation '#f '"invalid field spec" c38e2@field)) c391a@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3918@t))) (c2ec6@syntax-dispatch c3918@t 'any))) c3910@t))) (c2ec6@syntax-dispatch c3910@t 'any))) c3908@t))) (c2ec6@syntax-dispatch c3908@t '(#(scheme-id immutable) any)))) c3900@t))) (c2ec6@syntax-dispatch c3900@t '(#(scheme-id mutable) any)))) c38f4@t))) (c2ec6@syntax-dispatch c38f4@t '(#(scheme-id immutable) any any)))) c38e4@t))) (c2ec6@syntax-dispatch c38e4@t '(#(scheme-id mutable) any any any)))) c38e2@field)) c38dd@fields))) '#f))) (set! c387f@enumerate (lambda (c38d4@ls) ((letrec ((c38d6@f (lambda (c38d8@ls c38d9@i) (if (null? c38d8@ls) '() (cons c38d9@i (c38d6@f (cdr c38d8@ls) (+ c38d9@i '1))))))) c38d6@f) c38d4@ls '0))) (set! c3881@do-define-record (lambda (c38ac@namespec c38ad@clause*) ((lambda (c38b0@foo) ((lambda (c38b2@foo-rtd) ((lambda (c38b4@foo-rcd) ((lambda (c38b6@protocol) ((lambda (c38b8@make-foo) ((lambda (c38ba@fields) ((lambda (c38bc@idx*) ((lambda (c38be@foo-x*) ((lambda (c38c0@set-foo-x!*) ((lambda (c38c2@set-foo-idx*) ((lambda (c38c4@foo?) ((lambda (c38c6@foo-rtd-code) ((lambda (c38c8@foo-rcd-code) ((lambda (c38ca@protocol-code) ((lambda () (c2e7c@bless (cons 'begin (cons (list 'define c38b2@foo-rtd c38c6@foo-rtd-code) (cons (list 'define c38b6@protocol c38ca@protocol-code) (cons (list 'define c38b4@foo-rcd c38c8@foo-rcd-code) (cons (list 'define-syntax c38b0@foo (list 'list ''$rtd (list 'syntax c38b2@foo-rtd) (list 'syntax c38b4@foo-rcd))) (cons (list 'define c38c4@foo? (list 'record-predicate c38b2@foo-rtd)) (cons (list 'define c38b8@make-foo (list 'record-constructor c38b4@foo-rcd)) (append (map (lambda (c38cc@foo-x c38cd@idx) (list 'define c38cc@foo-x (list 'record-accessor c38b2@foo-rtd c38cd@idx))) c38be@foo-x* c38bc@idx*) (map (lambda (c38d0@set-foo-x! c38d1@idx) (list 'define c38d0@set-foo-x! (list 'record-mutator c38b2@foo-rtd c38d1@idx))) c38c0@set-foo-x!* c38c2@set-foo-idx*))))))))))))) (c3875@get-protocol-code c38ad@clause*))) (c3873@foo-rcd-code c38ad@clause* c38b2@foo-rtd c38b6@protocol (c3871@parent-rcd-code c38ad@clause*)))) (c386d@foo-rtd-code c38b0@foo c38ad@clause* (c386f@parent-rtd-code c38ad@clause*)))) (c3869@get-record-predicate-name c38ac@namespec))) (c3879@get-mutator-indices c38ba@fields))) (c387b@get-mutators c38b0@foo c38ba@fields))) (c387d@get-accessors c38b0@foo c38ba@fields))) (c387f@enumerate c38ba@fields))) (c3877@get-fields c38ad@clause*))) (c3867@get-record-constructor-name c38ac@namespec))) (gensym))) (gensym))) (gensym))) (c3865@get-record-name c38ac@namespec)))) (set! c3883@verify-clauses (lambda (c388c@x c388d@cls*) ((lambda (c3891@valid-kwds c3893@free-id-member?) (begin (set! c3891@valid-kwds (map c2e7c@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! c3893@free-id-member? (lambda (c38a8@x c38a9@ls) (and (pair? c38a9@ls) (or (c2cc3@free-id=? c38a8@x (car c38a9@ls)) (c3893@free-id-member? c38a8@x (cdr c38a9@ls)))))) ((letrec ((c3894@f (lambda (c3896@cls* c3897@seen*) (if (not (null? c3896@cls*)) ((lambda (c389a@t) ((lambda (c389c@ls/false) (if c389c@ls/false (apply (lambda (c389e@kwd c389f@rest) (if (or (not (c2cbb@id? c389e@kwd)) (not (c3893@free-id-member? c389e@kwd c3891@valid-kwds))) (c2faf@syntax-violation '#f '"not a valid define-record-type keyword" c389e@kwd) (if (c2cc9@bound-id-member? c389e@kwd c3897@seen*) (c2faf@syntax-violation '#f '"duplicate use of keyword " c388c@x c389e@kwd) (c3894@f (cdr c3896@cls*) (cons c389e@kwd c3897@seen*))))) c389c@ls/false) ((lambda (c38a2@t) ((lambda (c38a4@ls/false) (if c38a4@ls/false (apply (lambda (c38a6@cls) (c2faf@syntax-violation '#f '"malformed define-record-type clause" c38a6@cls)) c38a4@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c38a2@t))) (c2ec6@syntax-dispatch c38a2@t 'any))) c389a@t))) (c2ec6@syntax-dispatch c389a@t '(any . any)))) (car c3896@cls*)) (void))))) c3894@f) c388d@cls* '()))) '#f '#f))) ((lambda (c3884@t) ((lambda (c3886@ls/false) (if c3886@ls/false (apply (lambda (c3888@namespec c3889@clause*) (begin (c3883@verify-clauses c3860@x c3889@clause*) (c3881@do-define-record c3888@namespec c3889@clause*))) c3886@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3884@t))) (c2ec6@syntax-dispatch c3884@t '(_ any . each-any)))) c3860@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! c2ebc@define-condition-type-macro (lambda (c3a5c@x) ((lambda (c3a5f@mkname) (begin (set! c3a5f@mkname (lambda (c3a8c@name c3a8d@suffix) (c2fb3@datum->syntax c3a8c@name (string->symbol (string-append (symbol->string (c2fb5@syntax->datum c3a8c@name)) c3a8d@suffix))))) ((lambda (c3a60@t) ((lambda (c3a62@ls/false) (if (and c3a62@ls/false (apply (lambda (c3a64@ctxt c3a65@name c3a66@super c3a67@constructor c3a68@predicate c3a69@field* c3a6a@accessor*) (and (c2cbb@id? c3a65@name) (c2cbb@id? c3a66@super) (c2cbb@id? c3a67@constructor) (c2cbb@id? c3a68@predicate) (for-all c2cbb@id? c3a69@field*) (for-all c2cbb@id? c3a6a@accessor*))) c3a62@ls/false)) (apply (lambda (c3a72@ctxt c3a73@name c3a74@super c3a75@constructor c3a76@predicate c3a77@field* c3a78@accessor*) ((lambda (c3a80@aux-accessor*) (c2e7c@bless (cons 'begin (cons (cons 'define-record-type (cons (list c3a73@name c3a75@constructor (gensym)) (cons (list 'parent c3a74@super) (cons (cons 'fields (map (lambda (c3a82@field c3a83@aux) (list 'immutable c3a82@field c3a83@aux)) c3a77@field* c3a80@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define c3a76@predicate (list 'condition-predicate (list 'record-type-descriptor c3a73@name))) (map (lambda (c3a86@accessor c3a87@aux) (list 'define c3a86@accessor (list 'condition-accessor (list 'record-type-descriptor c3a73@name) c3a87@aux))) c3a78@accessor* c3a80@aux-accessor*)))))) (map (lambda (c3a8a@x) (gensym)) c3a78@accessor*))) c3a62@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3a60@t))) (c2ec6@syntax-dispatch c3a60@t '(any any any any any . #(each (any any)))))) c3a5c@x))) '#f))) (set! c2ebe@incorrect-usage-macro (lambda (c3a90@e) (c2faf@syntax-violation '#f '"incorrect usage of auxiliary keyword" c3a90@e))) (set! c2ec0@parameterize-macro (lambda (c3a92@e) ((lambda (c3a94@t) ((lambda (c3a96@ls/false) (if c3a96@ls/false (apply (lambda (c3a98@b c3a99@b*) (c2e7c@bless (cons 'let (cons '() (cons c3a98@b c3a99@b*))))) c3a96@ls/false) ((lambda (c3a9c@t) ((lambda (c3a9e@ls/false) (if c3a9e@ls/false (apply (lambda (c3aa0@olhs* c3aa1@orhs* c3aa2@b c3aa3@b*) ((lambda (c3aa8@lhs* c3aa9@rhs*) (c2e7c@bless (cons (list 'lambda (append c3aa8@lhs* c3aa9@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (c3aac@lhs c3aad@rhs) (list 'let (list (list 't (list c3aac@lhs))) (list c3aac@lhs c3aad@rhs) (cons 'set! (cons c3aad@rhs '(t))))) c3aa8@lhs* c3aa9@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons c3aa2@b c3aa3@b*))) '(swap)))))) (append c3aa0@olhs* c3aa1@orhs*)))) (c2f9d@generate-temporaries c3aa0@olhs*) (c2f9d@generate-temporaries c3aa1@orhs*))) c3a9e@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3a9c@t))) (c2ec6@syntax-dispatch c3a9c@t '(_ #(each (any any)) any . each-any)))) c3a94@t))) (c2ec6@syntax-dispatch c3a94@t '(_ () any . each-any)))) c3a92@e))) (set! c2ec2@foreign-call-transformer (lambda (c3ab0@e c3ab1@r c3ab2@mr) ((lambda (c3ab6@t) ((lambda (c3ab8@ls/false) (if c3ab8@ls/false (apply (lambda (c3aba@name c3abb@arg*) (cons 'foreign-call (cons (c2ee8@chi-expr c3aba@name c3ab1@r c3ab2@mr) (c2ee4@chi-expr* c3abb@arg* c3ab1@r c3ab2@mr)))) c3ab8@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3ab6@t))) (c2ec6@syntax-dispatch c3ab6@t '(_ any . each-any)))) c3ab0@e))) (set! c2ec4@convert-pattern (lambda (c3abe@pattern c3abf@keys) ((lambda (c3ac3@cvt* c3ac5@cvt) (begin (set! c3ac3@cvt* (lambda (c3b62@p* c3b63@n c3b64@ids) (if (null? c3b62@p*) (values '() c3b64@ids) (call-with-values (lambda () (c3ac3@cvt* (cdr c3b62@p*) c3b63@n c3b64@ids)) (lambda (c3b6c@c3b69 c3b6d@c3b6b) ((lambda (c3b70@ids c3b71@y) (call-with-values (lambda () (c3ac5@cvt (car c3b62@p*) c3b63@n c3b70@ids)) (lambda (c3b78@c3b75 c3b79@c3b77) ((lambda (c3b7c@ids c3b7d@x) (values (cons c3b7d@x c3b71@y) c3b7c@ids)) c3b79@c3b77 c3b78@c3b75)))) c3b6d@c3b6b c3b6c@c3b69)))))) (set! c3ac5@cvt (lambda (c3ac6@p c3ac7@n c3ac8@ids) ((lambda (c3acc@t) ((lambda (c3ace@ls/false) (if (and c3ace@ls/false (apply (lambda (c3ad0@id) (c2cbb@id? c3ad0@id)) c3ace@ls/false)) (apply (lambda (c3ad2@id) (if (c2cc9@bound-id-member? c3ac6@p c3abf@keys) (values (vector 'free-id c3ac6@p) c3ac8@ids) (if (c2cc3@free-id=? c3ac6@p (c2e50@scheme-stx '_)) (values '_ c3ac8@ids) (values 'any (cons (cons c3ac6@p c3ac7@n) c3ac8@ids))))) c3ace@ls/false) ((lambda (c3ad4@t) ((lambda (c3ad6@ls/false) (if (and c3ad6@ls/false (apply (lambda (c3ad8@p c3ad9@dots) (c2ec8@ellipsis? c3ad9@dots)) c3ad6@ls/false)) (apply (lambda (c3adc@p c3add@dots) (call-with-values (lambda () (c3ac5@cvt c3adc@p (+ c3ac7@n '1) c3ac8@ids)) (lambda (c3ae4@c3ae1 c3ae5@c3ae3) ((lambda (c3ae8@ids c3ae9@p) (values (if (eq? c3ae9@p 'any) 'each-any (vector 'each c3ae9@p)) c3ae8@ids)) c3ae5@c3ae3 c3ae4@c3ae1)))) c3ad6@ls/false) ((lambda (c3aec@t) ((lambda (c3aee@ls/false) (if (and c3aee@ls/false (apply (lambda (c3af0@x c3af1@dots c3af2@ys c3af3@z) (c2ec8@ellipsis? c3af1@dots)) c3aee@ls/false)) (apply (lambda (c3af8@x c3af9@dots c3afa@ys c3afb@z) (call-with-values (lambda () (c3ac5@cvt c3afb@z c3ac7@n c3ac8@ids)) (lambda (c3b04@c3b01 c3b05@c3b03) ((lambda (c3b08@ids c3b09@z) (call-with-values (lambda () (c3ac3@cvt* c3afa@ys c3ac7@n c3b08@ids)) (lambda (c3b10@c3b0d c3b11@c3b0f) ((lambda (c3b14@ids c3b15@ys) (call-with-values (lambda () (c3ac5@cvt c3af8@x (+ c3ac7@n '1) c3b14@ids)) (lambda (c3b1c@c3b19 c3b1d@c3b1b) ((lambda (c3b20@ids c3b21@x) (values (vector 'each+ c3b21@x (reverse c3b15@ys) c3b09@z) c3b20@ids)) c3b1d@c3b1b c3b1c@c3b19)))) c3b11@c3b0f c3b10@c3b0d)))) c3b05@c3b03 c3b04@c3b01)))) c3aee@ls/false) ((lambda (c3b24@t) ((lambda (c3b26@ls/false) (if c3b26@ls/false (apply (lambda (c3b28@x c3b29@y) (call-with-values (lambda () (c3ac5@cvt c3b29@y c3ac7@n c3ac8@ids)) (lambda (c3b30@c3b2d c3b31@c3b2f) ((lambda (c3b34@ids c3b35@y) (call-with-values (lambda () (c3ac5@cvt c3b28@x c3ac7@n c3b34@ids)) (lambda (c3b3c@c3b39 c3b3d@c3b3b) ((lambda (c3b40@ids c3b41@x) (values (cons c3b41@x c3b35@y) c3b40@ids)) c3b3d@c3b3b c3b3c@c3b39)))) c3b31@c3b2f c3b30@c3b2d)))) c3b26@ls/false) ((lambda (c3b44@t) ((lambda (c3b46@ls/false) (if c3b46@ls/false (apply (lambda () (values '() c3ac8@ids)) c3b46@ls/false) ((lambda (c3b48@t) ((lambda (c3b4a@ls/false) (if (and c3b4a@ls/false (apply (lambda (c3b4c@p) (not (c2c83@stx? c3b4c@p))) c3b4a@ls/false)) (apply (lambda (c3b4e@p) (call-with-values (lambda () (c3ac5@cvt c3b4e@p c3ac7@n c3ac8@ids)) (lambda (c3b54@c3b51 c3b55@c3b53) ((lambda (c3b58@ids c3b59@p) (values (vector 'vector c3b59@p) c3b58@ids)) c3b55@c3b53 c3b54@c3b51)))) c3b4a@ls/false) ((lambda (c3b5c@t) ((lambda (c3b5e@ls/false) (if c3b5e@ls/false (apply (lambda (c3b60@datum) (values (vector 'atom (c2cd1@stx->datum c3b60@datum)) c3ac8@ids)) c3b5e@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3b5c@t))) (c2ec6@syntax-dispatch c3b5c@t 'any))) c3b48@t))) (c2ec6@syntax-dispatch c3b48@t '#(vector each-any)))) c3b44@t))) (c2ec6@syntax-dispatch c3b44@t '()))) c3b24@t))) (c2ec6@syntax-dispatch c3b24@t '(any . any)))) c3aec@t))) (c2ec6@syntax-dispatch c3aec@t '(any any . #(each+ any () any))))) c3ad4@t))) (c2ec6@syntax-dispatch c3ad4@t '(any any)))) c3acc@t))) (c2ec6@syntax-dispatch c3acc@t 'any))) c3ac6@p))) (c3ac5@cvt c3abe@pattern '0 '()))) '#f '#f))) (set! c2ec6@syntax-dispatch ((lambda () ((lambda (c3b81@stx^ c3b83@match-each c3b85@match-each+ c3b87@match-each-any c3b89@match-empty c3b8b@combine c3b8d@match* c3b8f@match) (begin (set! c3b81@stx^ (lambda (c3c5c@e c3c5d@m* c3c5e@s* c3c5f@ae*) (if (and (null? c3c5d@m*) (null? c3c5e@s*) (null? c3c5f@ae*)) c3c5c@e (c2ca3@mkstx c3c5c@e c3c5d@m* c3c5e@s* c3c5f@ae*)))) (set! c3b83@match-each (lambda (c3c3c@e c3c3d@p c3c3e@m* c3c3f@s* c3c40@ae*) (if (pair? c3c3c@e) ((lambda (c3c46@first) (and c3c46@first ((lambda (c3c48@rest) (and c3c48@rest (cons c3c46@first c3c48@rest))) (c3b83@match-each (cdr c3c3c@e) c3c3d@p c3c3e@m* c3c3f@s* c3c40@ae*)))) (c3b8f@match (car c3c3c@e) c3c3d@p c3c3e@m* c3c3f@s* c3c40@ae* '())) (if (null? c3c3c@e) '() (if (c2c83@stx? c3c3c@e) (and (not (c2c39@top-marked? c3c3e@m*)) (call-with-values (lambda () (c2ca1@join-wraps c3c3e@m* c3c3f@s* c3c40@ae* c3c3c@e)) (lambda (c3c50@c3c4b c3c51@c3c4d c3c52@c3c4f) ((lambda (c3c56@ae* c3c57@s* c3c58@m*) (c3b83@match-each (c2c87@stx-expr c3c3c@e) c3c3d@p c3c58@m* c3c57@s* c3c56@ae*)) c3c52@c3c4f c3c51@c3c4d c3c50@c3c4b)))) (if (c285a@c2779@annotation? c3c3c@e) (c3b83@match-each (c285c@c277d@annotation-expression c3c3c@e) c3c3d@p c3c3e@m* c3c3f@s* c3c40@ae*) '#f)))))) (set! c3b85@match-each+ (lambda (c3bfc@e c3bfd@x-pat c3bfe@y-pat c3bff@z-pat c3c00@m* c3c01@s* c3c02@ae* c3c03@r) ((letrec ((c3c0c@f (lambda (c3c0e@e c3c0f@m* c3c10@s* c3c11@ae*) (if (pair? c3c0e@e) (call-with-values (lambda () (c3c0c@f (cdr c3c0e@e) c3c0f@m* c3c10@s* c3c11@ae*)) (lambda (c3c1c@c3c17 c3c1d@c3c19 c3c1e@c3c1b) ((lambda (c3c22@r c3c23@y-pat c3c24@xr*) (if c3c22@r (if (null? c3c23@y-pat) ((lambda (c3c28@xr) (if c3c28@xr (values (cons c3c28@xr c3c24@xr*) c3c23@y-pat c3c22@r) (values '#f '#f '#f))) (c3b8f@match (car c3c0e@e) c3bfd@x-pat c3c0f@m* c3c10@s* c3c11@ae* '())) (values '() (cdr c3c23@y-pat) (c3b8f@match (car c3c0e@e) (car c3c23@y-pat) c3c0f@m* c3c10@s* c3c11@ae* c3c22@r))) (values '#f '#f '#f))) c3c1e@c3c1b c3c1d@c3c19 c3c1c@c3c17))) (if (c2c83@stx? c3c0e@e) (if (c2c39@top-marked? c3c0f@m*) (values '() c3bfe@y-pat (c3b8f@match c3c0e@e c3bff@z-pat c3c0f@m* c3c10@s* c3c11@ae* c3c03@r)) (call-with-values (lambda () (c2ca1@join-wraps c3c0f@m* c3c10@s* c3c11@ae* c3c0e@e)) (lambda (c3c30@c3c2b c3c31@c3c2d c3c32@c3c2f) ((lambda (c3c36@ae* c3c37@s* c3c38@m*) (c3c0c@f (c2c87@stx-expr c3c0e@e) c3c38@m* c3c37@s* c3c36@ae*)) c3c32@c3c2f c3c31@c3c2d c3c30@c3c2b)))) (if (c285a@c2779@annotation? c3c0e@e) (c3c0c@f (c285c@c277d@annotation-expression c3c0e@e) c3c0f@m* c3c10@s* c3c11@ae*) (values '() c3bfe@y-pat (c3b8f@match c3c0e@e c3bff@z-pat c3c0f@m* c3c10@s* c3c11@ae* c3c03@r)))))))) c3c0c@f) c3bfc@e c3c00@m* c3c01@s* c3c02@ae*))) (set! c3b87@match-each-any (lambda (c3be0@e c3be1@m* c3be2@s* c3be3@ae*) (if (pair? c3be0@e) ((lambda (c3be8@l) (and c3be8@l (cons (c3b81@stx^ (car c3be0@e) c3be1@m* c3be2@s* c3be3@ae*) c3be8@l))) (c3b87@match-each-any (cdr c3be0@e) c3be1@m* c3be2@s* c3be3@ae*)) (if (null? c3be0@e) '() (if (c2c83@stx? c3be0@e) (and (not (c2c39@top-marked? c3be1@m*)) (call-with-values (lambda () (c2ca1@join-wraps c3be1@m* c3be2@s* c3be3@ae* c3be0@e)) (lambda (c3bf0@c3beb c3bf1@c3bed c3bf2@c3bef) ((lambda (c3bf6@ae* c3bf7@s* c3bf8@m*) (c3b87@match-each-any (c2c87@stx-expr c3be0@e) c3bf8@m* c3bf7@s* c3bf6@ae*)) c3bf2@c3bef c3bf1@c3bed c3bf0@c3beb)))) (if (c285a@c2779@annotation? c3be0@e) (c3b87@match-each-any (c285c@c277d@annotation-expression c3be0@e) c3be1@m* c3be2@s* c3be3@ae*) '#f)))))) (set! c3b89@match-empty (lambda (c3bda@p c3bdb@r) (if (null? c3bda@p) c3bdb@r (if (eq? c3bda@p '_) c3bdb@r (if (eq? c3bda@p 'any) (cons '() c3bdb@r) (if (pair? c3bda@p) (c3b89@match-empty (car c3bda@p) (c3b89@match-empty (cdr c3bda@p) c3bdb@r)) (if (eq? c3bda@p 'each-any) (cons '() c3bdb@r) ((lambda (c3bde@t) (if (memv c3bde@t '(each)) (c3b89@match-empty (vector-ref c3bda@p '1) c3bdb@r) (if (memv c3bde@t '(each+)) (c3b89@match-empty (vector-ref c3bda@p '1) (c3b89@match-empty (reverse (vector-ref c3bda@p '2)) (c3b89@match-empty (vector-ref c3bda@p '3) c3bdb@r))) (if (memv c3bde@t '(free-id atom)) c3bdb@r (if (memv c3bde@t '(scheme-id atom)) c3bdb@r (if (memv c3bde@t '(vector)) (c3b89@match-empty (vector-ref c3bda@p '1) c3bdb@r) (assertion-violation 'syntax-dispatch '"invalid pattern" c3bda@p))))))) (vector-ref c3bda@p '0))))))))) (set! c3b8b@combine (lambda (c3bd6@r* c3bd7@r) (if (null? (car c3bd6@r*)) c3bd7@r (cons (map car c3bd6@r*) (c3b8b@combine (map cdr c3bd6@r*) c3bd7@r))))) (set! c3b8d@match* (lambda (c3bb2@e c3bb3@p c3bb4@m* c3bb5@s* c3bb6@ae* c3bb7@r) (if (null? c3bb3@p) (and (null? c3bb2@e) c3bb7@r) (if (pair? c3bb3@p) (and (pair? c3bb2@e) (c3b8f@match (car c3bb2@e) (car c3bb3@p) c3bb4@m* c3bb5@s* c3bb6@ae* (c3b8f@match (cdr c3bb2@e) (cdr c3bb3@p) c3bb4@m* c3bb5@s* c3bb6@ae* c3bb7@r))) (if (eq? c3bb3@p 'each-any) ((lambda (c3bbe@l) (and c3bbe@l (cons c3bbe@l c3bb7@r))) (c3b87@match-each-any c3bb2@e c3bb4@m* c3bb5@s* c3bb6@ae*)) ((lambda (c3bc0@t) (if (memv c3bc0@t '(each)) (if (null? c3bb2@e) (c3b89@match-empty (vector-ref c3bb3@p '1) c3bb7@r) ((lambda (c3bc2@r*) (and c3bc2@r* (c3b8b@combine c3bc2@r* c3bb7@r))) (c3b83@match-each c3bb2@e (vector-ref c3bb3@p '1) c3bb4@m* c3bb5@s* c3bb6@ae*))) (if (memv c3bc0@t '(free-id)) (and (symbol? c3bb2@e) (c2c39@top-marked? c3bb4@m*) (c2cc3@free-id=? (c3b81@stx^ c3bb2@e c3bb4@m* c3bb5@s* c3bb6@ae*) (vector-ref c3bb3@p '1)) c3bb7@r) (if (memv c3bc0@t '(scheme-id)) (and (symbol? c3bb2@e) (c2c39@top-marked? c3bb4@m*) (c2cc3@free-id=? (c3b81@stx^ c3bb2@e c3bb4@m* c3bb5@s* c3bb6@ae*) (c2e50@scheme-stx (vector-ref c3bb3@p '1))) c3bb7@r) (if (memv c3bc0@t '(each+)) (call-with-values (lambda () (c3b85@match-each+ c3bb2@e (vector-ref c3bb3@p '1) (vector-ref c3bb3@p '2) (vector-ref c3bb3@p '3) c3bb4@m* c3bb5@s* c3bb6@ae* c3bb7@r)) (lambda (c3bca@c3bc5 c3bcb@c3bc7 c3bcc@c3bc9) ((lambda (c3bd0@r c3bd1@y-pat c3bd2@xr*) (and c3bd0@r (null? c3bd1@y-pat) (if (null? c3bd2@xr*) (c3b89@match-empty (vector-ref c3bb3@p '1) c3bd0@r) (c3b8b@combine c3bd2@xr* c3bd0@r)))) c3bcc@c3bc9 c3bcb@c3bc7 c3bca@c3bc5))) (if (memv c3bc0@t '(atom)) (and (fast-equal? (vector-ref c3bb3@p '1) (c2ccf@strip c3bb2@e c3bb4@m*)) c3bb7@r) (if (memv c3bc0@t '(vector)) (and (vector? c3bb2@e) (c3b8f@match (vector->list c3bb2@e) (vector-ref c3bb3@p '1) c3bb4@m* c3bb5@s* c3bb6@ae* c3bb7@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" c3bb3@p)))))))) (vector-ref c3bb3@p '0))))))) (set! c3b8f@match (lambda (c3b94@e c3b95@p c3b96@m* c3b97@s* c3b98@ae* c3b99@r) (if (not c3b99@r) '#f (if (eq? c3b95@p '_) c3b99@r (if (eq? c3b95@p 'any) (cons (c3b81@stx^ c3b94@e c3b96@m* c3b97@s* c3b98@ae*) c3b99@r) (if (c2c83@stx? c3b94@e) (and (not (c2c39@top-marked? c3b96@m*)) (call-with-values (lambda () (c2ca1@join-wraps c3b96@m* c3b97@s* c3b98@ae* c3b94@e)) (lambda (c3ba6@c3ba1 c3ba7@c3ba3 c3ba8@c3ba5) ((lambda (c3bac@ae* c3bad@s* c3bae@m*) (c3b8f@match (c2c87@stx-expr c3b94@e) c3b95@p c3bae@m* c3bad@s* c3bac@ae* c3b99@r)) c3ba8@c3ba5 c3ba7@c3ba3 c3ba6@c3ba1)))) (if (c285a@c2779@annotation? c3b94@e) (c3b8f@match (c285c@c277d@annotation-expression c3b94@e) c3b95@p c3b96@m* c3b97@s* c3b98@ae* c3b99@r) (c3b8d@match* c3b94@e c3b95@p c3b96@m* c3b97@s* c3b98@ae* c3b99@r)))))))) (lambda (c3b90@e c3b91@p) (c3b8f@match c3b90@e c3b91@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! c2ec8@ellipsis? (lambda (c3c64@x) (and (c2cbb@id? c3c64@x) (c2cc3@free-id=? c3c64@x (c2e50@scheme-stx '...))))) (set! c2eca@underscore? (lambda (c3c66@x) (and (c2cbb@id? c3c66@x) (c2cc3@free-id=? c3c66@x (c2e50@scheme-stx '_))))) (set! c2ecc@verify-literals (lambda (c3c68@lits c3c69@expr) (for-each (lambda (c3c6c@x) (if (or (not (c2cbb@id? c3c6c@x)) (c2ec8@ellipsis? c3c6c@x) (c2eca@underscore? c3c6c@x)) (c2faf@syntax-violation '#f '"invalid literal" c3c69@expr c3c6c@x) (void))) c3c68@lits))) (set! c2ece@syntax-case-transformer ((lambda () ((lambda (c3c6f@build-dispatch-call c3c71@invalid-ids-error c3c73@gen-clause c3c75@gen-syntax-case) (begin (set! c3c6f@build-dispatch-call (lambda (c3ce0@pvars c3ce1@expr c3ce2@y c3ce3@r c3ce4@mr) ((lambda (c3cea@ids c3ceb@levels) ((lambda (c3cee@labels c3cef@new-vars) ((lambda (c3cf2@body) (list '(primitive apply) (c2c17@c2b57@build-lambda '#f c3cef@new-vars c3cf2@body) c3ce2@y)) (c2ee8@chi-expr (c2ca7@add-subst (c2c76@make-full-rib c3cea@ids c3cee@labels) c3ce1@expr) (append (map (lambda (c3cf4@label c3cf5@var c3cf6@level) (cons c3cf4@label (c2cdb@make-binding 'syntax (cons c3cf5@var c3cf6@level)))) c3cee@labels c3cef@new-vars (map cdr c3ce0@pvars)) c3ce3@r) c3ce4@mr))) (map c2c3f@gen-label c3cea@ids) (map c2c3b@gen-lexical c3cea@ids))) (map car c3ce0@pvars) (map cdr c3ce0@pvars)))) (set! c3c71@invalid-ids-error (lambda (c3cd4@id* c3cd5@e c3cd6@class) ((letrec ((c3cda@find (lambda (c3cdc@id* c3cdd@ok*) (if (null? c3cdc@id*) (c2faf@syntax-violation '#f '"invalid syntax" c3cd5@e) (if (c2cbb@id? (car c3cdc@id*)) (if (c2cc9@bound-id-member? (car c3cdc@id*) c3cdd@ok*) (c2fab@syntax-error (car c3cdc@id*) '"duplicate " c3cd6@class) (c3cda@find (cdr c3cdc@id*) (cons (car c3cdc@id*) c3cdd@ok*))) (c2fab@syntax-error (car c3cdc@id*) '"invalid " c3cd6@class)))))) c3cda@find) c3cd4@id* '()))) (set! c3c73@gen-clause (lambda (c3cac@x c3cad@keys c3cae@clauses c3caf@r c3cb0@mr c3cb1@pat c3cb2@fender c3cb3@expr) (call-with-values (lambda () (c2ec4@convert-pattern c3cb1@pat c3cad@keys)) (lambda (c3cc0@c3cbd c3cc1@c3cbf) ((lambda (c3cc4@pvars c3cc5@p) (if (not (c2cc7@distinct-bound-ids? (map car c3cc4@pvars))) (c3c71@invalid-ids-error (map car c3cc4@pvars) c3cb1@pat '"pattern variable") (if (not (for-all (lambda (c3cc8@x) (not (c2ec8@ellipsis? (car c3cc8@x)))) c3cc4@pvars)) (c2faf@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" c3cb1@pat) ((lambda (c3cca@y) ((lambda (c3ccc@test) ((lambda (c3cce@conseq) ((lambda (c3cd0@altern) (list (c2c17@c2b57@build-lambda '#f (list c3cca@y) (list 'if c3ccc@test c3cce@conseq c3cd0@altern)) (list '(primitive syntax-dispatch) c3cac@x (list 'quote c3cc5@p)))) (c3c75@gen-syntax-case c3cac@x c3cad@keys c3cae@clauses c3caf@r c3cb0@mr))) (c3c6f@build-dispatch-call c3cc4@pvars c3cb3@expr c3cca@y c3caf@r c3cb0@mr))) (if (eq? c3cb2@fender '#t) c3cca@y ((lambda (c3cd2@call) (list 'if c3cca@y c3cd2@call (list 'quote '#f))) (c3c6f@build-dispatch-call c3cc4@pvars c3cb2@fender c3cca@y c3caf@r c3cb0@mr))))) (c2c3b@gen-lexical 'tmp))))) c3cc1@c3cbf c3cc0@c3cbd))))) (set! c3c75@gen-syntax-case (lambda (c3c8a@x c3c8b@keys c3c8c@clauses c3c8d@r c3c8e@mr) (if (null? c3c8c@clauses) (list '(primitive syntax-error) c3c8a@x) ((lambda (c3c94@t) ((lambda (c3c96@ls/false) (if c3c96@ls/false (apply (lambda (c3c98@pat c3c99@expr) (if (and (c2cbb@id? c3c98@pat) (not (c2cc9@bound-id-member? c3c98@pat c3c8b@keys)) (not (c2ec8@ellipsis? c3c98@pat))) (if (c2cc3@free-id=? c3c98@pat (c2e50@scheme-stx '_)) (c2ee8@chi-expr c3c99@expr c3c8d@r c3c8e@mr) ((lambda (c3c9c@lab c3c9d@lex) ((lambda (c3ca0@body) (list (c2c17@c2b57@build-lambda '#f (list c3c9d@lex) c3ca0@body) c3c8a@x)) (c2ee8@chi-expr (c2ca7@add-subst (c2c76@make-full-rib (list c3c98@pat) (list c3c9c@lab)) c3c99@expr) (cons (cons c3c9c@lab (c2cdb@make-binding 'syntax (cons c3c9d@lex '0))) c3c8d@r) c3c8e@mr))) (c2c3f@gen-label c3c98@pat) (c2c3b@gen-lexical c3c98@pat))) (c3c73@gen-clause c3c8a@x c3c8b@keys (cdr c3c8c@clauses) c3c8d@r c3c8e@mr c3c98@pat '#t c3c99@expr))) c3c96@ls/false) ((lambda (c3ca2@t) ((lambda (c3ca4@ls/false) (if c3ca4@ls/false (apply (lambda (c3ca6@pat c3ca7@fender c3ca8@expr) (c3c73@gen-clause c3c8a@x c3c8b@keys (cdr c3c8c@clauses) c3c8d@r c3c8e@mr c3ca6@pat c3ca7@fender c3ca8@expr)) c3ca4@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3ca2@t))) (c2ec6@syntax-dispatch c3ca2@t '(any any any)))) c3c94@t))) (c2ec6@syntax-dispatch c3c94@t '(any any)))) (car c3c8c@clauses))))) (lambda (c3c76@e c3c77@r c3c78@mr) ((lambda (c3c7c@t) ((lambda (c3c7e@ls/false) (if c3c7e@ls/false (apply (lambda (c3c80@expr c3c81@keys c3c82@clauses) (begin (c2ecc@verify-literals c3c81@keys c3c76@e) ((lambda (c3c86@x) ((lambda (c3c88@body) (list (c2c17@c2b57@build-lambda '#f (list c3c86@x) c3c88@body) (c2ee8@chi-expr c3c80@expr c3c77@r c3c78@mr))) (c3c75@gen-syntax-case c3c86@x c3c81@keys c3c82@clauses c3c77@r c3c78@mr))) (c2c3b@gen-lexical 'tmp)))) c3c7e@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3c7c@t))) (c2ec6@syntax-dispatch c3c7c@t '(_ any each-any . each-any)))) c3c76@e)))) '#f '#f '#f '#f)))) (set! c2ed0@ellipsis-map (lambda (c3cfa@proc c3cfb@ls . c3cfe@ls*) ((lambda (c3d01@who) (begin (set! c3d01@who '...) (begin (if (not (list? c3cfb@ls)) (assertion-violation c3d01@who '"not a list" c3cfb@ls) (void)) (if (not (null? c3cfe@ls*)) ((lambda (c3d02@n) (for-each (lambda (c3d04@x) (begin (if (not (list? c3d04@x)) (assertion-violation c3d01@who '"not a list" c3d04@x) (void)) (if (not (= (length c3d04@x) c3d02@n)) (assertion-violation c3d01@who '"length mismatch" c3cfb@ls c3d04@x) (void)))) c3cfe@ls*)) (length c3cfb@ls)) (void)) (apply map c3cfa@proc c3cfb@ls c3cfe@ls*)))) '#f))) (set! c2ed2@syntax-transformer ((lambda () ((lambda (c3d07@gen-syntax c3d09@gen-ref c3d0b@gen-append c3d0d@gen-mappend c3d0f@gen-map c3d11@gen-cons c3d13@gen-vector c3d15@regen) (begin (set! c3d07@gen-syntax (lambda (c3d7e@src c3d7f@e c3d80@r c3d81@maps c3d82@ellipsis? c3d83@vec?) ((lambda (c3d8a@t) ((lambda (c3d8c@ls/false) (if (and c3d8c@ls/false (apply (lambda (c3d8e@dots) (c3d82@ellipsis? c3d8e@dots)) c3d8c@ls/false)) (apply (lambda (c3d90@dots) (c2faf@syntax-violation '#f '"misplaced ellipsis in syntax form" c3d7e@src)) c3d8c@ls/false) ((lambda (c3d92@t) ((lambda (c3d94@ls/false) (if (and c3d94@ls/false (apply (lambda (c3d96@id) (c2cbb@id? c3d96@id)) c3d94@ls/false)) (apply (lambda (c3d98@id) ((lambda (c3d9a@label) ((lambda (c3d9c@b) ((lambda () (if (eq? (c2cdd@binding-type c3d9c@b) 'syntax) (call-with-values (lambda () ((lambda (c3da2@var.lev) (c3d09@gen-ref c3d7e@src (car c3da2@var.lev) (cdr c3da2@var.lev) c3d81@maps)) (c2cdf@binding-value c3d9c@b))) (lambda (c3da4@c3d9f c3da5@c3da1) ((lambda (c3da8@maps c3da9@var) (values (list 'ref c3da9@var) c3da8@maps)) c3da5@c3da1 c3da4@c3d9f))) (values (list 'quote c3d7f@e) c3d81@maps))))) (c2cd9@label->binding c3d9a@label c3d80@r))) (c2cd5@id->label c3d7f@e))) c3d94@ls/false) ((lambda (c3dac@t) ((lambda (c3dae@ls/false) (if (and c3dae@ls/false (apply (lambda (c3db0@dots c3db1@e) (c3d82@ellipsis? c3db0@dots)) c3dae@ls/false)) (apply (lambda (c3db4@dots c3db5@e) (if c3d83@vec? (c2faf@syntax-violation '#f '"misplaced ellipsis in syntax form" c3d7e@src) (c3d07@gen-syntax c3d7e@src c3db5@e c3d80@r c3d81@maps (lambda (c3db8@x) '#f) '#f))) c3dae@ls/false) ((lambda (c3dba@t) ((lambda (c3dbc@ls/false) (if (and c3dbc@ls/false (apply (lambda (c3dbe@x c3dbf@dots c3dc0@y) (c3d82@ellipsis? c3dbf@dots)) c3dbc@ls/false)) (apply (lambda (c3dc4@x c3dc5@dots c3dc6@y) ((letrec ((c3dca@f (lambda (c3dcc@y c3dcd@k) ((lambda (c3dd0@t) ((lambda (c3dd2@ls/false) (if c3dd2@ls/false (apply (lambda () (c3dcd@k c3d81@maps)) c3dd2@ls/false) ((lambda (c3dd4@t) ((lambda (c3dd6@ls/false) (if (and c3dd6@ls/false (apply (lambda (c3dd8@dots c3dd9@y) (c3d82@ellipsis? c3dd8@dots)) c3dd6@ls/false)) (apply (lambda (c3ddc@dots c3ddd@y) (c3dca@f c3ddd@y (lambda (c3de0@maps) (call-with-values (lambda () (c3dcd@k (cons '() c3de0@maps))) (lambda (c3de6@c3de3 c3de7@c3de5) ((lambda (c3dea@maps c3deb@x) (if (null? (car c3dea@maps)) (c2faf@syntax-violation '#f '"extra ellipsis in syntax form" c3d7e@src) (values (c3d0d@gen-mappend c3deb@x (car c3dea@maps)) (cdr c3dea@maps)))) c3de7@c3de5 c3de6@c3de3)))))) c3dd6@ls/false) ((lambda (c3dee@t) ((lambda (c3df0@ls/false) (if c3df0@ls/false (apply (lambda () (call-with-values (lambda () (c3d07@gen-syntax c3d7e@src c3dcc@y c3d80@r c3d81@maps c3d82@ellipsis? c3d83@vec?)) (lambda (c3df6@c3df3 c3df7@c3df5) ((lambda (c3dfa@maps c3dfb@y) (call-with-values (lambda () (c3dcd@k c3dfa@maps)) (lambda (c3e02@c3dff c3e03@c3e01) ((lambda (c3e06@maps c3e07@x) (values (c3d0b@gen-append c3e07@x c3dfb@y) c3e06@maps)) c3e03@c3e01 c3e02@c3dff)))) c3df7@c3df5 c3df6@c3df3)))) c3df0@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3dee@t))) (c2ec6@syntax-dispatch c3dee@t '_))) c3dd4@t))) (c2ec6@syntax-dispatch c3dd4@t '(any . any)))) c3dd0@t))) (c2ec6@syntax-dispatch c3dd0@t '()))) c3dcc@y)))) c3dca@f) c3dc6@y (lambda (c3e0a@maps) (call-with-values (lambda () (c3d07@gen-syntax c3d7e@src c3dc4@x c3d80@r (cons '() c3e0a@maps) c3d82@ellipsis? '#f)) (lambda (c3e10@c3e0d c3e11@c3e0f) ((lambda (c3e14@maps c3e15@x) (if (null? (car c3e14@maps)) (c2faf@syntax-violation '#f '"extra ellipsis in syntax form" c3d7e@src) (values (c3d0f@gen-map c3e15@x (car c3e14@maps)) (cdr c3e14@maps)))) c3e11@c3e0f c3e10@c3e0d)))))) c3dbc@ls/false) ((lambda (c3e18@t) ((lambda (c3e1a@ls/false) (if c3e1a@ls/false (apply (lambda (c3e1c@x c3e1d@y) (call-with-values (lambda () (c3d07@gen-syntax c3d7e@src c3e1c@x c3d80@r c3d81@maps c3d82@ellipsis? '#f)) (lambda (c3e24@c3e21 c3e25@c3e23) ((lambda (c3e28@maps c3e29@xnew) (call-with-values (lambda () (c3d07@gen-syntax c3d7e@src c3e1d@y c3d80@r c3e28@maps c3d82@ellipsis? c3d83@vec?)) (lambda (c3e30@c3e2d c3e31@c3e2f) ((lambda (c3e34@maps c3e35@ynew) (values (c3d11@gen-cons c3d7f@e c3e1c@x c3e1d@y c3e29@xnew c3e35@ynew) c3e34@maps)) c3e31@c3e2f c3e30@c3e2d)))) c3e25@c3e23 c3e24@c3e21)))) c3e1a@ls/false) ((lambda (c3e38@t) ((lambda (c3e3a@ls/false) (if c3e3a@ls/false (apply (lambda (c3e3c@ls) (call-with-values (lambda () (c3d07@gen-syntax c3d7e@src c3e3c@ls c3d80@r c3d81@maps c3d82@ellipsis? '#t)) (lambda (c3e42@c3e3f c3e43@c3e41) ((lambda (c3e46@maps c3e47@lsnew) (values (c3d13@gen-vector c3d7f@e c3e3c@ls c3e47@lsnew) c3e46@maps)) c3e43@c3e41 c3e42@c3e3f)))) c3e3a@ls/false) ((lambda (c3e4a@t) ((lambda (c3e4c@ls/false) (if c3e4c@ls/false (apply (lambda () (values (list 'quote c3d7f@e) c3d81@maps)) c3e4c@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3e4a@t))) (c2ec6@syntax-dispatch c3e4a@t '_))) c3e38@t))) (c2ec6@syntax-dispatch c3e38@t '#(vector each-any)))) c3e18@t))) (c2ec6@syntax-dispatch c3e18@t '(any . any)))) c3dba@t))) (c2ec6@syntax-dispatch c3dba@t '(any any . any)))) c3dac@t))) (c2ec6@syntax-dispatch c3dac@t '(any any)))) c3d92@t))) (c2ec6@syntax-dispatch c3d92@t 'any))) c3d8a@t))) (c2ec6@syntax-dispatch c3d8a@t 'any))) c3d7f@e))) (set! c3d09@gen-ref (lambda (c3d64@src c3d65@var c3d66@level c3d67@maps) (if (= c3d66@level '0) (values c3d65@var c3d67@maps) (if (null? c3d67@maps) (c2faf@syntax-violation '#f '"missing ellipsis in syntax form" c3d64@src) (call-with-values (lambda () (c3d09@gen-ref c3d64@src c3d65@var (- c3d66@level '1) (cdr c3d67@maps))) (lambda (c3d70@c3d6d c3d71@c3d6f) ((lambda (c3d74@outer-maps c3d75@outer-var) ((lambda (c3d78@t) (if c3d78@t ((lambda (c3d7a@b) (values (cdr c3d7a@b) c3d67@maps)) c3d78@t) ((lambda (c3d7c@inner-var) (values c3d7c@inner-var (cons (cons (cons c3d75@outer-var c3d7c@inner-var) (car c3d67@maps)) c3d74@outer-maps))) (c2c3b@gen-lexical 'tmp)))) (assq c3d75@outer-var (car c3d67@maps)))) c3d71@c3d6f c3d70@c3d6d))))))) (set! c3d0b@gen-append (lambda (c3d60@x c3d61@y) (if (fast-equal? c3d61@y ''()) c3d60@x (list 'append c3d60@x c3d61@y)))) (set! c3d0d@gen-mappend (lambda (c3d5c@e c3d5d@map-env) (list 'apply '(primitive append) (c3d0f@gen-map c3d5c@e c3d5d@map-env)))) (set! c3d0f@gen-map (lambda (c3d4a@e c3d4b@map-env) ((lambda (c3d4e@formals c3d4f@actuals) (if (eq? (car c3d4a@e) 'ref) (car c3d4f@actuals) (if (for-all (lambda (c3d52@x) (and (eq? (car c3d52@x) 'ref) (memq (cadr c3d52@x) c3d4e@formals))) (cdr c3d4a@e)) ((lambda (c3d54@args) (cons 'map (cons (list 'primitive (car c3d4a@e)) c3d54@args))) (map ((lambda (c3d56@r) (lambda (c3d58@x) (cdr (assq (cadr c3d58@x) c3d56@r)))) (map cons c3d4e@formals c3d4f@actuals)) (cdr c3d4a@e))) (cons* 'map (list 'lambda c3d4e@formals c3d4a@e) c3d4f@actuals)))) (map cdr c3d4b@map-env) (map (lambda (c3d5a@x) (list 'ref (car c3d5a@x))) c3d4b@map-env)))) (set! c3d11@gen-cons (lambda (c3d3a@e c3d3b@x c3d3c@y c3d3d@xnew c3d3e@ynew) ((lambda (c3d44@t) (if (memv c3d44@t '(quote)) (if (eq? (car c3d3d@xnew) 'quote) ((lambda (c3d46@xnew c3d47@ynew) (if (and (eq? c3d46@xnew c3d3b@x) (eq? c3d47@ynew c3d3c@y)) (list 'quote c3d3a@e) (list 'quote (cons c3d46@xnew c3d47@ynew)))) (cadr c3d3d@xnew) (cadr c3d3e@ynew)) (if (null? (cadr c3d3e@ynew)) (list 'list c3d3d@xnew) (list 'cons c3d3d@xnew c3d3e@ynew))) (if (memv c3d44@t '(list)) (cons 'list (cons c3d3d@xnew (cdr c3d3e@ynew))) (list 'cons c3d3d@xnew c3d3e@ynew)))) (car c3d3e@ynew)))) (set! c3d13@gen-vector (lambda (c3d34@e c3d35@ls c3d36@lsnew) (if (eq? (car c3d36@lsnew) 'quote) (if (eq? (cadr c3d36@lsnew) c3d35@ls) (list 'quote c3d34@e) (list 'quote (list->vector (cadr c3d36@lsnew)))) (if (eq? (car c3d36@lsnew) 'list) (cons 'vector (cdr c3d36@lsnew)) (list 'list->vector c3d36@lsnew))))) (set! c3d15@regen (lambda (c3d2e@x) ((lambda (c3d30@t) (if (memv c3d30@t '(ref)) (cadr c3d2e@x) (if (memv c3d30@t '(primitive)) (list 'primitive (cadr c3d2e@x)) (if (memv c3d30@t '(quote)) (list 'quote (cadr c3d2e@x)) (if (memv c3d30@t '(lambda)) (c2c17@c2b57@build-lambda '#f (cadr c3d2e@x) (c3d15@regen (caddr c3d2e@x))) (if (memv c3d30@t '(map)) ((lambda (c3d32@ls) (cons '(primitive ellipsis-map) c3d32@ls)) (map c3d15@regen (cdr c3d2e@x))) (cons (list 'primitive (car c3d2e@x)) (map c3d15@regen (cdr c3d2e@x))))))))) (car c3d2e@x)))) (lambda (c3d16@e c3d17@r c3d18@mr) ((lambda (c3d1c@t) ((lambda (c3d1e@ls/false) (if c3d1e@ls/false (apply (lambda (c3d20@x) (call-with-values (lambda () (c3d07@gen-syntax c3d16@e c3d20@x c3d17@r '() c2ec8@ellipsis? '#f)) (lambda (c3d26@c3d23 c3d27@c3d25) ((lambda (c3d2a@maps c3d2b@e) (c3d15@regen c3d2b@e)) c3d27@c3d25 c3d26@c3d23)))) c3d1e@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3d1c@t))) (c2ec6@syntax-dispatch c3d1c@t '(_ any)))) c3d16@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! c2ed4@core-macro-transformer (lambda (c3e4e@name) ((lambda (c3e50@t) (if (memv c3e50@t '(quote)) c2e76@quote-transformer (if (memv c3e50@t '(lambda)) c2e7a@lambda-transformer (if (memv c3e50@t '(case-lambda)) c2e78@case-lambda-transformer (if (memv c3e50@t '(letrec)) c2e5e@letrec-transformer (if (memv c3e50@t '(letrec*)) c2e60@letrec*-transformer (if (memv c3e50@t '(if)) c2e6e@if-transformer (if (memv c3e50@t '(and)) c2e70@and-transformer (if (memv c3e50@t '(or)) c2e72@or-transformer (if (memv c3e50@t '(foreign-call)) c2ec2@foreign-call-transformer (if (memv c3e50@t '(syntax-case)) c2ece@syntax-case-transformer (if (memv c3e50@t '(syntax)) c2ed2@syntax-transformer (if (memv c3e50@t '(type-descriptor)) c2e64@type-descriptor-transformer (if (memv c3e50@t '(record-type-descriptor)) c2e66@record-type-descriptor-transformer (if (memv c3e50@t '(record-constructor-descriptor)) c2e68@record-constructor-descriptor-transformer (if (memv c3e50@t '(fluid-let-syntax)) c2e62@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" c3e4e@name))))))))))))))))) c3e4e@name))) (set! c2ed6@symbol-macro (lambda (c3e52@x c3e53@set) ((lambda (c3e56@t) ((lambda (c3e58@ls/false) (if (and c3e58@ls/false (apply (lambda (c3e5a@name) (and (c2cbb@id? c3e5a@name) (memq (c2cbd@id->sym c3e5a@name) c3e53@set))) c3e58@ls/false)) (apply (lambda (c3e5c@name) (c2e7c@bless (list 'quote c3e5c@name))) c3e58@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3e56@t))) (c2ec6@syntax-dispatch c3e56@t '(_ any)))) c3e52@x))) (set! c2ed8@macro-transformer (lambda (c3e5e@x) (if (procedure? c3e5e@x) c3e5e@x (if (symbol? c3e5e@x) ((lambda (c3e60@t) (if (memv c3e60@t '(define-record-type)) c2eba@define-record-type-macro (if (memv c3e60@t '(define-struct)) c2eb8@define-struct-macro (if (memv c3e60@t '(include)) c2eae@include-macro (if (memv c3e60@t '(cond)) c2eaa@cond-macro (if (memv c3e60@t '(let)) c2e82@let-macro (if (memv c3e60@t '(do)) c2ea2@do-macro (if (memv c3e60@t '(or)) c2ea6@or-macro (if (memv c3e60@t '(and)) c2ea8@and-macro (if (memv c3e60@t '(let*)) c2ea4@let*-macro (if (memv c3e60@t '(let-values)) c2e84@let-values-macro (if (memv c3e60@t '(let*-values)) c2e86@let*-values-macro (if (memv c3e60@t '(syntax-rules)) c2eb2@syntax-rules-macro (if (memv c3e60@t '(quasiquote)) c2eb4@quasiquote-macro (if (memv c3e60@t '(quasisyntax)) c2eb6@quasisyntax-macro (if (memv c3e60@t '(with-syntax)) c2e7e@with-syntax-macro (if (memv c3e60@t '(when)) c2e6a@when-macro (if (memv c3e60@t '(unless)) c2e6c@unless-macro (if (memv c3e60@t '(case)) c2e74@case-macro (if (memv c3e60@t '(identifier-syntax)) c2ea0@identifier-syntax-macro (if (memv c3e60@t '(time)) c2e98@time-macro (if (memv c3e60@t '(delay)) c2e9a@delay-macro (if (memv c3e60@t '(assert)) c2e9c@assert-macro (if (memv c3e60@t '(endianness)) c2e9e@endianness-macro (if (memv c3e60@t '(guard)) c2e94@guard-macro (if (memv c3e60@t '(define-enumeration)) c2e96@define-enumeration-macro (if (memv c3e60@t '(trace-lambda)) c2e88@trace-lambda-macro (if (memv c3e60@t '(trace-define)) c2e8a@trace-define-macro (if (memv c3e60@t '(trace-define-syntax)) c2e8c@trace-define-syntax-macro (if (memv c3e60@t '(trace-let-syntax)) c2e90@trace-let-syntax-macro (if (memv c3e60@t '(trace-letrec-syntax)) c2e92@trace-letrec-syntax-macro (if (memv c3e60@t '(define-condition-type)) c2ebc@define-condition-type-macro (if (memv c3e60@t '(parameterize)) c2ec0@parameterize-macro (if (memv c3e60@t '(include-into)) c2eb0@include-into-macro (if (memv c3e60@t '(eol-style)) (lambda (c3e62@x) (c2ed6@symbol-macro c3e62@x '(none lf cr crlf nel crnel ls))) (if (memv c3e60@t '(error-handling-mode)) (lambda (c3e64@x) (c2ed6@symbol-macro c3e64@x '(ignore raise replace))) (if (memv c3e60@t '(buffer-mode)) (lambda (c3e66@x) (c2ed6@symbol-macro c3e66@x '(none line block))) (if (memv c3e60@t '(file-options)) c2c2e@file-options-macro (if (memv c3e60@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) c2ebe@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" c3e5e@x)))))))))))))))))))))))))))))))))))))))) c3e5e@x) (error 'core-macro-transformer '"BUG: invalid macro" c3e5e@x))))) (set! c2eda@local-macro-transformer (lambda (c3e68@x) (car c3e68@x))) (set! c2edc@do-macro-call (lambda (c3e6a@transformer c3e6b@expr) ((lambda (c3e6e@out) (begin ((letrec ((c3e70@f (lambda (c3e72@x) (if (not (c2c83@stx? c3e72@x)) (if (pair? c3e72@x) (begin (c3e70@f (car c3e72@x)) (c3e70@f (cdr c3e72@x))) (if (vector? c3e72@x) (vector-for-each c3e70@f c3e72@x) (if (symbol? c3e72@x) (c2faf@syntax-violation '#f '"raw symbol encountered in output of macro" c3e6b@expr c3e72@x) (void)))) (void))))) c3e70@f) c3e6e@out) (c2ca5@add-mark (c2c9b@gen-mark) c3e6e@out c3e6b@expr))) (c3e6a@transformer (c2ca5@add-mark c2c9d@anti-mark c3e6b@expr '#f))))) (set! c2ede@chi-macro (lambda (c3e74@p c3e75@e) (c2edc@do-macro-call (c2ed8@macro-transformer c3e74@p) c3e75@e))) (set! c2ee0@chi-local-macro (lambda (c3e78@p c3e79@e) (c2edc@do-macro-call (c2eda@local-macro-transformer c3e78@p) c3e79@e))) (set! c2ee2@chi-global-macro (lambda (c3e7c@p c3e7d@e) ((lambda (c3e80@lib c3e81@loc) (begin (c2ae0@c2982@visit-library c3e80@lib) ((lambda (c3e84@x) ((lambda (c3e86@transformer) (c2edc@do-macro-call c3e86@transformer c3e7d@e)) (if (procedure? c3e84@x) c3e84@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" c3e84@x)))) (symbol-value c3e81@loc)))) (car c3e7c@p) (cdr c3e7c@p)))) (set! c2ee4@chi-expr* (lambda (c3e88@e* c3e89@r c3e8a@mr) (if (null? c3e88@e*) '() ((lambda (c3e8e@e) (cons c3e8e@e (c2ee4@chi-expr* (cdr c3e88@e*) c3e89@r c3e8a@mr))) (c2ee8@chi-expr (car c3e88@e*) c3e89@r c3e8a@mr))))) (set! c2ee6@chi-application (lambda (c3e90@e c3e91@r c3e92@mr) ((lambda (c3e96@t) ((lambda (c3e98@ls/false) (if c3e98@ls/false (apply (lambda (c3e9a@rator c3e9b@rands) ((lambda (c3e9e@rator) (cons c3e9e@rator (c2ee4@chi-expr* c3e9b@rands c3e91@r c3e92@mr))) (c2ee8@chi-expr c3e9a@rator c3e91@r c3e92@mr))) c3e98@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3e96@t))) (c2ec6@syntax-dispatch c3e96@t '(any . each-any)))) c3e90@e))) (set! c2ee8@chi-expr (lambda (c3ea0@e c3ea1@r c3ea2@mr) (call-with-values (lambda () (c2ce3@syntax-type c3ea0@e c3ea1@r)) (lambda (c3eac@c3ea7 c3ead@c3ea9 c3eae@c3eab) ((lambda (c3eb2@kwd c3eb3@value c3eb4@type) ((lambda (c3eb8@t) (if (memv c3eb8@t '(core-macro)) ((lambda (c3eba@transformer) (c3eba@transformer c3ea0@e c3ea1@r c3ea2@mr)) (c2ed4@core-macro-transformer c3eb3@value)) (if (memv c3eb8@t '(global)) ((lambda (c3ebc@lib) ((lambda (c3ebe@loc) ((lambda () (begin ((c2f31@inv-collector) c3ebc@lib) c3ebe@loc)))) (cdr c3eb3@value))) (car c3eb3@value)) (if (memv c3eb8@t '(core-prim)) ((lambda (c3ec0@name) (list 'primitive c3ec0@name)) c3eb3@value) (if (memv c3eb8@t '(call)) (c2ee6@chi-application c3ea0@e c3ea1@r c3ea2@mr) (if (memv c3eb8@t '(lexical)) ((lambda (c3ec2@lex) c3ec2@lex) (c2e52@lexical-var c3eb3@value)) (if (memv c3eb8@t '(global-macro global-macro!)) (c2ee8@chi-expr (c2ee2@chi-global-macro c3eb3@value c3ea0@e) c3ea1@r c3ea2@mr) (if (memv c3eb8@t '(local-macro local-macro!)) (c2ee8@chi-expr (c2ee0@chi-local-macro c3eb3@value c3ea0@e) c3ea1@r c3ea2@mr) (if (memv c3eb8@t '(macro macro!)) (c2ee8@chi-expr (c2ede@chi-macro c3eb3@value c3ea0@e) c3ea1@r c3ea2@mr) (if (memv c3eb8@t '(constant)) ((lambda (c3ec4@datum) (list 'quote c3ec4@datum)) c3eb3@value) (if (memv c3eb8@t '(set!)) (c2eea@chi-set! c3ea0@e c3ea1@r c3ea2@mr) (if (memv c3eb8@t '(begin)) ((lambda (c3ec6@t) ((lambda (c3ec8@ls/false) (if c3ec8@ls/false (apply (lambda (c3eca@x c3ecb@x*) (c2c1a@c2b89@build-sequence '#f (c2ee4@chi-expr* (cons c3eca@x c3ecb@x*) c3ea1@r c3ea2@mr))) c3ec8@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3ec6@t))) (c2ec6@syntax-dispatch c3ec6@t '(_ any . each-any)))) c3ea0@e) (if (memv c3eb8@t '(let-syntax letrec-syntax)) ((lambda (c3ece@t) ((lambda (c3ed0@ls/false) (if (and c3ed0@ls/false (apply (lambda (c3ed2@xlhs* c3ed3@xrhs* c3ed4@xbody c3ed5@xbody*) (if (not (c2cc5@valid-bound-ids? c3ed2@xlhs*)) (c2faf@syntax-violation '#f '"invalid identifiers" c3ea0@e) (void))) c3ed0@ls/false)) (apply (lambda (c3eda@xlhs* c3edb@xrhs* c3edc@xbody c3edd@xbody*) ((lambda (c3ee2@xlab*) ((lambda (c3ee4@xrib) ((lambda (c3ee6@xb*) ((lambda () (c2c1a@c2b89@build-sequence '#f (c2ee4@chi-expr* (map (lambda (c3ee8@x) (c2ca7@add-subst c3ee4@xrib c3ee8@x)) (cons c3edc@xbody c3edd@xbody*)) (append (map cons c3ee2@xlab* c3ee6@xb*) c3ea1@r) (append (map cons c3ee2@xlab* c3ee6@xb*) c3ea2@mr)))))) (map (lambda (c3eea@x) (c2cf9@make-eval-transformer (c2f23@expand-transformer (if (eq? c3eb4@type 'let-syntax) c3eea@x (c2ca7@add-subst c3ee4@xrib c3eea@x)) c3ea2@mr))) c3edb@xrhs*))) (c2c76@make-full-rib c3eda@xlhs* c3ee2@xlab*))) (map c2c3f@gen-label c3eda@xlhs*))) c3ed0@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3ece@t))) (c2ec6@syntax-dispatch c3ece@t '(_ #(each (any any)) any . each-any)))) c3ea0@e) (if (memv c3eb8@t '(displaced-lexical)) (c2faf@syntax-violation '#f '"identifier out of context" c3ea0@e) (if (memv c3eb8@t '(syntax)) (c2faf@syntax-violation '#f '"reference to pattern variable outside a syntax form" c3ea0@e) (if (memv c3eb8@t '(define define-syntax module import library)) (c2faf@syntax-violation '#f (string-append ((lambda (c3eec@t) (if (memv c3eec@t '(define)) '"a definition" (if (memv c3eec@t '(define-syntax)) '"a define-syntax" (if (memv c3eec@t '(module)) '"a module definition" (if (memv c3eec@t '(library)) '"a library definition" (if (memv c3eec@t '(import)) '"an import declaration" (if (memv c3eec@t '(export)) '"an export declaration" '"a non-expression"))))))) c3eb4@type) '" was found where an expression was expected") c3ea0@e) (if (memv c3eb8@t '(mutable)) (c2faf@syntax-violation '#f '"attempt to reference an unexportable variable" c3ea0@e) (c2faf@syntax-violation '#f '"invalid expression" c3ea0@e)))))))))))))))))) c3eb4@type)) c3eae@c3eab c3ead@c3ea9 c3eac@c3ea7))))) (set! c2eea@chi-set! (lambda (c3eee@e c3eef@r c3ef0@mr) ((lambda (c3ef4@t) ((lambda (c3ef6@ls/false) (if (and c3ef6@ls/false (apply (lambda (c3ef8@x c3ef9@v) (c2cbb@id? c3ef8@x)) c3ef6@ls/false)) (apply (lambda (c3efc@x c3efd@v) (call-with-values (lambda () (c2ce3@syntax-type c3efc@x c3eef@r)) (lambda (c3f06@c3f01 c3f07@c3f03 c3f08@c3f05) ((lambda (c3f0c@kwd c3f0d@value c3f0e@type) ((lambda (c3f12@t) (if (memv c3f12@t '(lexical)) (begin (c2e56@set-lexical-mutable! c3f0d@value '#t) (list 'set! (c2e52@lexical-var c3f0d@value) (c2ee8@chi-expr c3efd@v c3eef@r c3ef0@mr))) (if (memv c3f12@t '(core-prim)) (c2faf@syntax-violation '#f '"cannot modify imported core primitive" c3eee@e) (if (memv c3f12@t '(global)) (c2faf@syntax-violation '#f '"attempt to modify imported binding" c3eee@e) (if (memv c3f12@t '(global-macro!)) (c2ee8@chi-expr (c2ee2@chi-global-macro c3f0d@value c3eee@e) c3eef@r c3ef0@mr) (if (memv c3f12@t '(local-macro!)) (c2ee8@chi-expr (c2ee0@chi-local-macro c3f0d@value c3eee@e) c3eef@r c3ef0@mr) (if (memv c3f12@t '(mutable)) (c2faf@syntax-violation '#f '"attempt to assign to an unexportable variable" c3eee@e) (c2faf@syntax-violation '#f '"invalid syntax" c3eee@e)))))))) c3f0e@type)) c3f08@c3f05 c3f07@c3f03 c3f06@c3f01)))) c3ef6@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3ef4@t))) (c2ec6@syntax-dispatch c3ef4@t '(_ any any)))) c3eee@e))) (set! c2eec@verify-formals (lambda (c3f14@fmls c3f15@stx) ((lambda (c3f18@t) ((lambda (c3f1a@ls/false) (if c3f1a@ls/false (apply (lambda (c3f1c@x*) (if (not (c2cc5@valid-bound-ids? c3f1c@x*)) (c2e80@invalid-fmls-error c3f15@stx c3f14@fmls) (void))) c3f1a@ls/false) ((lambda (c3f1e@t) ((lambda (c3f20@ls/false) (if c3f20@ls/false (apply (lambda (c3f22@x* c3f23@x) (if (not (c2cc5@valid-bound-ids? (cons c3f23@x c3f22@x*))) (c2e80@invalid-fmls-error c3f15@stx c3f14@fmls) (void))) c3f20@ls/false) ((lambda (c3f26@t) ((lambda (c3f28@ls/false) (if c3f28@ls/false (apply (lambda () (c2faf@syntax-violation '#f '"invalid syntax" c3f15@stx)) c3f28@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3f26@t))) (c2ec6@syntax-dispatch c3f26@t '_))) c3f1e@t))) (c2ec6@syntax-dispatch c3f1e@t '#(each+ any () any)))) c3f18@t))) (c2ec6@syntax-dispatch c3f18@t 'each-any))) c3f14@fmls))) (set! c2eee@chi-lambda-clause (lambda (c3f2a@stx c3f2b@fmls c3f2c@body* c3f2d@r c3f2e@mr) ((lambda (c3f34@t) ((lambda (c3f36@ls/false) (if c3f36@ls/false (apply (lambda (c3f38@x*) (begin (c2eec@verify-formals c3f2b@fmls c3f2a@stx) ((lambda (c3f3a@lex* c3f3b@lab*) (values c3f3a@lex* (c2efe@chi-internal (c2ca7@add-subst (c2c76@make-full-rib c3f38@x* c3f3b@lab*) c3f2c@body*) (c2e5a@add-lexicals c3f3b@lab* c3f3a@lex* c3f2d@r) c3f2e@mr))) (map c2c3b@gen-lexical c3f38@x*) (map c2c3f@gen-label c3f38@x*)))) c3f36@ls/false) ((lambda (c3f3e@t) ((lambda (c3f40@ls/false) (if c3f40@ls/false (apply (lambda (c3f42@x* c3f43@x) (begin (c2eec@verify-formals c3f2b@fmls c3f2a@stx) ((lambda (c3f46@lex* c3f47@lab* c3f48@lex c3f49@lab) (values (append c3f46@lex* c3f48@lex) (c2efe@chi-internal (c2ca7@add-subst (c2c76@make-full-rib (cons c3f43@x c3f42@x*) (cons c3f49@lab c3f47@lab*)) c3f2c@body*) (c2e5a@add-lexicals (cons c3f49@lab c3f47@lab*) (cons c3f48@lex c3f46@lex*) c3f2d@r) c3f2e@mr))) (map c2c3b@gen-lexical c3f42@x*) (map c2c3f@gen-label c3f42@x*) (c2c3b@gen-lexical c3f43@x) (c2c3f@gen-label c3f43@x)))) c3f40@ls/false) ((lambda (c3f4e@t) ((lambda (c3f50@ls/false) (if c3f50@ls/false (apply (lambda () (c2faf@syntax-violation '#f '"invalid syntax" c3f2b@fmls)) c3f50@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c3f4e@t))) (c2ec6@syntax-dispatch c3f4e@t '_))) c3f3e@t))) (c2ec6@syntax-dispatch c3f3e@t '#(each+ any () any)))) c3f34@t))) (c2ec6@syntax-dispatch c3f34@t 'each-any))) c3f2b@fmls))) (set! c2ef0@chi-lambda-clause* (lambda (c3f52@stx c3f53@fmls* c3f54@body** c3f55@r c3f56@mr) (if (null? c3f53@fmls*) (values '() '()) (call-with-values (lambda () (c2eee@chi-lambda-clause c3f52@stx (car c3f53@fmls*) (car c3f54@body**) c3f55@r c3f56@mr)) (lambda (c3f60@c3f5d c3f61@c3f5f) ((lambda (c3f64@b c3f65@a) (call-with-values (lambda () (c2ef0@chi-lambda-clause* c3f52@stx (cdr c3f53@fmls*) (cdr c3f54@body**) c3f55@r c3f56@mr)) (lambda (c3f6c@c3f69 c3f6d@c3f6b) ((lambda (c3f70@b* c3f71@a*) (values (cons c3f65@a c3f71@a*) (cons c3f64@b c3f70@b*))) c3f6d@c3f6b c3f6c@c3f69)))) c3f61@c3f5f c3f60@c3f5d)))))) (set! c2ef2@chi-defun (lambda (c3f74@x c3f75@r c3f76@mr) ((lambda (c3f7a@fmls c3f7b@body*) (call-with-values (lambda () (c2eee@chi-lambda-clause c3f7a@fmls c3f7a@fmls c3f7b@body* c3f75@r c3f76@mr)) (lambda (c3f82@c3f7f c3f83@c3f81) ((lambda (c3f86@body c3f87@fmls) (c2c17@c2b57@build-lambda '#f c3f87@fmls c3f86@body)) c3f83@c3f81 c3f82@c3f7f)))) (car c3f74@x) (cdr c3f74@x)))) (set! c2ef4@chi-rhs (lambda (c3f8a@rhs c3f8b@r c3f8c@mr) ((lambda (c3f90@t) (if (memv c3f90@t '(defun)) (c2ef2@chi-defun (cdr c3f8a@rhs) c3f8b@r c3f8c@mr) (if (memv c3f90@t '(expr)) ((lambda (c3f92@expr) (c2ee8@chi-expr c3f92@expr c3f8b@r c3f8c@mr)) (cdr c3f8a@rhs)) (if (memv c3f90@t '(top-expr)) ((lambda (c3f94@expr) (c2c1a@c2b89@build-sequence '#f (list (c2ee8@chi-expr c3f94@expr c3f8b@r c3f8c@mr) (c2c1b@c2b8b@build-void)))) (cdr c3f8a@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" c3f8a@rhs))))) (car c3f8a@rhs)))) (set! c2ef6@expand-interaction-rhs*/init* (lambda (c3f96@lhs* c3f97@rhs* c3f98@init* c3f99@r c3f9a@mr) ((letrec ((c3fa0@f (lambda (c3fa2@lhs* c3fa3@rhs*) (if (null? c3fa2@lhs*) (map (lambda (c3fa6@x) (c2ee8@chi-expr c3fa6@x c3f99@r c3f9a@mr)) c3f98@init*) ((lambda (c3fa8@lhs c3fa9@rhs) ((lambda (c3fac@t) (if (memv c3fac@t '(defun)) ((lambda (c3fae@rhs) (cons (list 'set! c3fa8@lhs c3fae@rhs) (c3fa0@f (cdr c3fa2@lhs*) (cdr c3fa3@rhs*)))) (c2ef2@chi-defun (cdr c3fa9@rhs) c3f99@r c3f9a@mr)) (if (memv c3fac@t '(expr)) ((lambda (c3fb0@rhs) (cons (list 'set! c3fa8@lhs c3fb0@rhs) (c3fa0@f (cdr c3fa2@lhs*) (cdr c3fa3@rhs*)))) (c2ee8@chi-expr (cdr c3fa9@rhs) c3f99@r c3f9a@mr)) (if (memv c3fac@t '(top-expr)) ((lambda (c3fb2@e) (cons c3fb2@e (c3fa0@f (cdr c3fa2@lhs*) (cdr c3fa3@rhs*)))) (c2ee8@chi-expr (cdr c3fa9@rhs) c3f99@r c3f9a@mr)) (error 'expand-interaction '"invallid" c3fa9@rhs))))) (car c3fa9@rhs))) (car c3fa2@lhs*) (car c3fa3@rhs*)))))) c3fa0@f) c3f96@lhs* c3f97@rhs*))) (set! c2ef8@chi-rhs* (lambda (c3fb4@rhs* c3fb5@r c3fb6@mr) ((letrec ((c3fba@f (lambda (c3fbc@ls) (if (null? c3fbc@ls) '() ((lambda (c3fbe@a) (cons c3fbe@a (c3fba@f (cdr c3fbc@ls)))) (c2ef4@chi-rhs (car c3fbc@ls) c3fb5@r c3fb6@mr)))))) c3fba@f) c3fb4@rhs*))) (set! c2efa@find-bound=? (lambda (c3fc0@x c3fc1@lhs* c3fc2@rhs*) (if (null? c3fc1@lhs*) '#f (if (c2cc1@bound-id=? c3fc0@x (car c3fc1@lhs*)) (car c3fc2@rhs*) (c2efa@find-bound=? c3fc0@x (cdr c3fc1@lhs*) (cdr c3fc2@rhs*)))))) (set! c2efc@find-dups (lambda (c3fc6@ls) ((letrec ((c3fc8@f (lambda (c3fca@ls c3fcb@dups) (if (null? c3fca@ls) c3fcb@dups ((lambda (c3fce@t) (if c3fce@t ((lambda (c3fd0@x) (c3fc8@f (cdr c3fca@ls) (cons (list (car c3fca@ls) c3fd0@x) c3fcb@dups))) c3fce@t) (c3fc8@f (cdr c3fca@ls) c3fcb@dups))) (c2efa@find-bound=? (car c3fca@ls) (cdr c3fca@ls) (cdr c3fca@ls))))))) c3fc8@f) c3fc6@ls '()))) (set! c2efe@chi-internal (lambda (c3fd2@e* c3fd3@r c3fd4@mr) ((lambda (c3fd8@rib) (call-with-values (lambda () (c2f21@chi-body* (map (lambda (c3fea@x) (c2ca7@add-subst c3fd8@rib c3fea@x)) (c2cb9@syntax->list c3fd2@e*)) c3fd3@r c3fd4@mr '() '() '() '() '() c3fd8@rib '#f)) (lambda (c3fec@c3fdb c3fed@c3fdd c3fee@c3fdf c3fef@c3fe1 c3ff0@c3fe3 c3ff1@c3fe5 c3ff2@c3fe7 c3ff3@c3fe9) ((lambda (c3ffc@_exp* c3ffd@kwd* c3ffe@mod** c3fff@rhs* c4000@lex* c4001@mr c4002@r c4003@e*) (begin (if (null? c4003@e*) (c2faf@syntax-violation '#f '"no expression in body" c4003@e*) (void)) ((lambda (c400c@init*) ((lambda (c400e@rhs*) ((lambda () (c2c1d@c2b8f@build-letrec* '#f (reverse c4000@lex*) (reverse c400e@rhs*) (c2c1a@c2b89@build-sequence '#f c400c@init*))))) (c2ef8@chi-rhs* c3fff@rhs* c4002@r c4001@mr))) (c2ee4@chi-expr* (append (apply append (reverse c3ffe@mod**)) c4003@e*) c4002@r c4001@mr)))) c3ff3@c3fe9 c3ff2@c3fe7 c3ff1@c3fe5 c3ff0@c3fe3 c3fef@c3fe1 c3fee@c3fdf c3fed@c3fdd c3fec@c3fdb)))) (c2c6a@make-empty-rib)))) (set! c2f00@parse-module (lambda (c4010@e) ((lambda (c4012@t) ((lambda (c4014@ls/false) (if c4014@ls/false (apply (lambda (c4016@export* c4017@b*) (begin (if (not (for-all c2cbb@id? c4016@export*)) (c2faf@syntax-violation '#f '"module exports must be identifiers" c4010@e) (void)) (values '#f (list->vector c4016@export*) c4017@b*))) c4014@ls/false) ((lambda (c401a@t) ((lambda (c401c@ls/false) (if c401c@ls/false (apply (lambda (c401e@name c401f@export* c4020@b*) (begin (if (not (c2cbb@id? c401e@name)) (c2faf@syntax-violation '#f '"module name must be an identifier" c4010@e) (void)) (if (not (for-all c2cbb@id? c401f@export*)) (c2faf@syntax-violation '#f '"module exports must be identifiers" c4010@e) (void)) (values c401e@name (list->vector c401f@export*) c4020@b*))) c401c@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c401a@t))) (c2ec6@syntax-dispatch c401a@t '(_ any each-any . each-any)))) c4012@t))) (c2ec6@syntax-dispatch c4012@t '(_ each-any . each-any)))) c4010@e))) (set! c2f06@c2f01 (make-record-type-descriptor 'module-interface '#f 'c2f04 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! c2f08@c2f03 '#f) (set! c2f0a@c2f02 (make-record-constructor-descriptor c2f06@c2f01 '#f c2f08@c2f03)) (set! c2f0d@module-interface? (record-predicate c2f06@c2f01)) (set! c2f0f@make-module-interface (record-constructor c2f0a@c2f02)) (set! c2f11@module-interface-first-mark (record-accessor c2f06@c2f01 '0)) (set! c2f13@module-interface-exp-id-vec (record-accessor c2f06@c2f01 '1)) (set! c2f15@module-interface-exp-lab-vec (record-accessor c2f06@c2f01 '2)) (set! c2f17@set-module-interface-first-mark! (record-mutator c2f06@c2f01 '0)) (set! c2f19@set-module-interface-exp-id-vec! (record-mutator c2f06@c2f01 '1)) (set! c2f1b@set-module-interface-exp-lab-vec! (record-mutator c2f06@c2f01 '2)) (set! c2f1d@module-interface-exp-id* (lambda (c4024@iface c4025@id) ((lambda (c4029@diff-marks) (begin (set! c4029@diff-marks (lambda (c4030@ls c4031@x) (begin (if (null? c4030@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (c4034@a) (if (eq? c4034@a c4031@x) '() (cons c4034@a (c4029@diff-marks (cdr c4030@ls) c4031@x)))) (car c4030@ls))))) ((lambda (c402a@diff c402b@id-vec) (if (null? c402a@diff) c402b@id-vec (vector-map (lambda (c402e@x) (c2c85@make-stx (c2c87@stx-expr c402e@x) (append c402a@diff (c2c89@stx-mark* c402e@x)) '() '())) c402b@id-vec))) (c4029@diff-marks (c2c89@stx-mark* c4025@id) (c2f11@module-interface-first-mark c4024@iface)) (c2f13@module-interface-exp-id-vec c4024@iface)))) '#f))) (set! c2f1f@chi-internal-module (lambda (c4036@e c4037@r c4038@mr c4039@lex* c403a@rhs* c403b@mod** c403c@kwd*) (call-with-values (lambda () (c2f00@parse-module c4036@e)) (lambda (c404a@c4045 c404b@c4047 c404c@c4049) ((lambda (c4050@e* c4051@exp-id* c4052@name) ((lambda (c4056@rib) ((lambda (c4058@e*) ((lambda () (call-with-values (lambda () (c2f21@chi-body* c4058@e* c4037@r c4038@mr c4039@lex* c403a@rhs* c403b@mod** c403c@kwd* '() c4056@rib '#f)) (lambda (c406a@c405b c406b@c405d c406c@c405f c406d@c4061 c406e@c4063 c406f@c4065 c4070@c4067 c4071@c4069) ((lambda (c407a@_exp* c407b@kwd* c407c@mod** c407d@rhs* c407e@lex* c407f@mr c4080@r c4081@e*) ((lambda (c408a@exp-lab* c408b@mod**) (if (not c4052@name) (values c407e@lex* c407d@rhs* c4051@exp-id* c408a@exp-lab* c4080@r c407f@mr c408b@mod** c407b@kwd*) ((lambda (c408e@lab c408f@iface) (values c407e@lex* c407d@rhs* (vector c4052@name) (vector c408e@lab) (cons (cons c408e@lab (cons '$module c408f@iface)) c4080@r) (cons (cons c408e@lab (cons '$module c408f@iface)) c407f@mr) c408b@mod** c407b@kwd*)) (c2c3f@gen-label 'module) (c2f0f@make-module-interface (car (c2c89@stx-mark* c4052@name)) (vector-map (lambda (c4092@x) (c2c85@make-stx (c2c87@stx-expr c4092@x) (c2c89@stx-mark* c4092@x) '() '())) c4051@exp-id*) c408a@exp-lab*)))) (vector-map (lambda (c4094@x) (or (c2cd5@id->label (c2c85@make-stx (c2cbd@id->sym c4094@x) (c2c89@stx-mark* c4094@x) (list c4056@rib) '())) (c2faf@syntax-violation '#f '"cannot find module export" c4094@x))) c4051@exp-id*) (cons c4081@e* c407c@mod**))) c4071@c4069 c4070@c4067 c406f@c4065 c406e@c4063 c406d@c4061 c406c@c405f c406b@c405d c406a@c405b)))))) (map (lambda (c4096@x) (c2ca7@add-subst c4056@rib c4096@x)) (c2cb9@syntax->list c4050@e*)))) (c2c6a@make-empty-rib))) c404c@c4049 c404b@c4047 c404a@c4045))))) (set! c2f21@chi-body* (lambda (c4098@e* c4099@r c409a@mr c409b@lex* c409c@rhs* c409d@mod** c409e@kwd* c409f@exp* c40a0@rib c40a1@top?) (if (null? c4098@e*) (values c4098@e* c4099@r c409a@mr c409b@lex* c409c@rhs* c409d@mod** c409e@kwd* c409f@exp*) ((lambda (c40ac@e) (call-with-values (lambda () (c2ce3@syntax-type c40ac@e c4099@r)) (lambda (c40b4@c40af c40b5@c40b1 c40b6@c40b3) ((lambda (c40ba@kwd c40bb@value c40bc@type) ((lambda (c40c0@kwd*) ((lambda (c40c2@t) (if (memv c40c2@t '(define)) (call-with-values (lambda () (c2e4a@parse-define c40ac@e)) (lambda (c40c8@c40c5 c40c9@c40c7) ((lambda (c40cc@rhs c40cd@id) (begin (if (c2cc9@bound-id-member? c40cd@id c40c0@kwd*) (c2faf@syntax-violation '#f '"cannot redefine keyword" c40ac@e) (void)) (call-with-values (lambda () (c2c43@gen-define-label+loc c40cd@id c40a0@rib)) (lambda (c40d4@c40d1 c40d5@c40d3) ((lambda (c40d8@lex c40d9@lab) (begin (c2c6c@extend-rib! c40a0@rib c40cd@id c40d9@lab) (c2f21@chi-body* (cdr c4098@e*) (c2e58@add-lexical c40d9@lab c40d8@lex c4099@r) c409a@mr (cons c40d8@lex c409b@lex*) (cons c40cc@rhs c409c@rhs*) c409d@mod** c40c0@kwd* c409f@exp* c40a0@rib c40a1@top?))) c40d5@c40d3 c40d4@c40d1))))) c40c9@c40c7 c40c8@c40c5))) (if (memv c40c2@t '(define-syntax)) (call-with-values (lambda () (c2e4c@parse-define-syntax c40ac@e)) (lambda (c40e0@c40dd c40e1@c40df) ((lambda (c40e4@rhs c40e5@id) (begin (if (c2cc9@bound-id-member? c40e5@id c40c0@kwd*) (c2faf@syntax-violation '#f '"cannot redefine keyword" c40ac@e) (void)) ((lambda (c40e8@lab c40e9@expanded-rhs) (begin (c2c6c@extend-rib! c40a0@rib c40e5@id c40e8@lab) ((lambda (c40ec@b) (c2f21@chi-body* (cdr c4098@e*) (cons (cons c40e8@lab c40ec@b) c4099@r) (cons (cons c40e8@lab c40ec@b) c409a@mr) c409b@lex* c409c@rhs* c409d@mod** c40c0@kwd* c409f@exp* c40a0@rib c40a1@top?)) (c2cf9@make-eval-transformer c40e9@expanded-rhs)))) (c2c45@gen-define-label c40e5@id c40a0@rib) (c2f23@expand-transformer c40e4@rhs c409a@mr)))) c40e1@c40df c40e0@c40dd))) (if (memv c40c2@t '(let-syntax letrec-syntax)) ((lambda (c40ee@t) ((lambda (c40f0@ls/false) (if (and c40f0@ls/false (apply (lambda (c40f2@xlhs* c40f3@xrhs* c40f4@xbody*) (if (not (c2cc5@valid-bound-ids? c40f2@xlhs*)) (c2faf@syntax-violation '#f '"invalid identifiers" c40ac@e) (void))) c40f0@ls/false)) (apply (lambda (c40f8@xlhs* c40f9@xrhs* c40fa@xbody*) ((lambda (c40fe@xlab*) ((lambda (c4100@xrib) ((lambda (c4102@xb*) ((lambda () (c2f21@chi-body* (append (map (lambda (c4104@x) (c2ca7@add-subst c4100@xrib c4104@x)) c40fa@xbody*) (cdr c4098@e*)) (append (map cons c40fe@xlab* c4102@xb*) c4099@r) (append (map cons c40fe@xlab* c4102@xb*) c409a@mr) c409b@lex* c409c@rhs* c409d@mod** c40c0@kwd* c409f@exp* c40a0@rib c40a1@top?)))) (map (lambda (c4106@x) (c2cf9@make-eval-transformer (c2f23@expand-transformer (if (eq? c40bc@type 'let-syntax) c4106@x (c2ca7@add-subst c4100@xrib c4106@x)) c409a@mr))) c40f9@xrhs*))) (c2c76@make-full-rib c40f8@xlhs* c40fe@xlab*))) (map c2c3f@gen-label c40f8@xlhs*))) c40f0@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c40ee@t))) (c2ec6@syntax-dispatch c40ee@t '(_ #(each (any any)) . each-any)))) c40ac@e) (if (memv c40c2@t '(begin)) ((lambda (c4108@t) ((lambda (c410a@ls/false) (if c410a@ls/false (apply (lambda (c410c@x*) (c2f21@chi-body* (append c410c@x* (cdr c4098@e*)) c4099@r c409a@mr c409b@lex* c409c@rhs* c409d@mod** c40c0@kwd* c409f@exp* c40a0@rib c40a1@top?)) c410a@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c4108@t))) (c2ec6@syntax-dispatch c4108@t '(_ . each-any)))) c40ac@e) (if (memv c40c2@t '(global-macro global-macro!)) (c2f21@chi-body* (cons (c2ca7@add-subst c40a0@rib (c2ee2@chi-global-macro c40bb@value c40ac@e)) (cdr c4098@e*)) c4099@r c409a@mr c409b@lex* c409c@rhs* c409d@mod** c40c0@kwd* c409f@exp* c40a0@rib c40a1@top?) (if (memv c40c2@t '(local-macro local-macro!)) (c2f21@chi-body* (cons (c2ca7@add-subst c40a0@rib (c2ee0@chi-local-macro c40bb@value c40ac@e)) (cdr c4098@e*)) c4099@r c409a@mr c409b@lex* c409c@rhs* c409d@mod** c40c0@kwd* c409f@exp* c40a0@rib c40a1@top?) (if (memv c40c2@t '(macro macro!)) (c2f21@chi-body* (cons (c2ca7@add-subst c40a0@rib (c2ede@chi-macro c40bb@value c40ac@e)) (cdr c4098@e*)) c4099@r c409a@mr c409b@lex* c409c@rhs* c409d@mod** c40c0@kwd* c409f@exp* c40a0@rib c40a1@top?) (if (memv c40c2@t '(module)) (call-with-values (lambda () (c2f1f@chi-internal-module c40ac@e c4099@r c409a@mr c409b@lex* c409c@rhs* c409d@mod** c40c0@kwd*)) (lambda (c411e@c410f c411f@c4111 c4120@c4113 c4121@c4115 c4122@c4117 c4123@c4119 c4124@c411b c4125@c411d) ((lambda (c412e@kwd* c412f@mod** c4130@mr c4131@r c4132@m-exp-lab* c4133@m-exp-id* c4134@rhs* c4135@lex*) (begin (vector-for-each (lambda (c413e@id c413f@lab) (c2c6c@extend-rib! c40a0@rib c413e@id c413f@lab)) c4133@m-exp-id* c4132@m-exp-lab*) (c2f21@chi-body* (cdr c4098@e*) c4131@r c4130@mr c4135@lex* c4134@rhs* c412f@mod** c412e@kwd* c409f@exp* c40a0@rib c40a1@top?))) c4125@c411d c4124@c411b c4123@c4119 c4122@c4117 c4121@c4115 c4120@c4113 c411f@c4111 c411e@c410f))) (if (memv c40c2@t '(library)) (begin (c2f91@library-expander (c2cd1@stx->datum c40ac@e)) (c2f21@chi-body* (cdr c4098@e*) c4099@r c409a@mr c409b@lex* c409c@rhs* c409d@mod** c40c0@kwd* c409f@exp* c40a0@rib c40a1@top?)) (if (memv c40c2@t '(export)) ((lambda (c4142@t) ((lambda (c4144@ls/false) (if c4144@ls/false (apply (lambda (c4146@exp-decl*) (c2f21@chi-body* (cdr c4098@e*) c4099@r c409a@mr c409b@lex* c409c@rhs* c409d@mod** c40c0@kwd* (append c4146@exp-decl* c409f@exp*) c40a0@rib c40a1@top?)) c4144@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c4142@t))) (c2ec6@syntax-dispatch c4142@t '(_ . each-any)))) c40ac@e) (if (memv c40c2@t '(import)) ((lambda () ((lambda (c4149@module-import? c414b@module-import c414d@library-import) (begin (set! c4149@module-import? (lambda (c419c@e) ((lambda (c419e@t) ((lambda (c41a0@ls/false) (if (and c41a0@ls/false (apply (lambda (c41a2@id) (c2cbb@id? c41a2@id)) c41a0@ls/false)) (apply (lambda (c41a4@id) '#t) c41a0@ls/false) ((lambda (c41a6@t) ((lambda (c41a8@ls/false) (if c41a8@ls/false (apply (lambda (c41aa@imp*) '#f) c41a8@ls/false) ((lambda (c41ac@t) ((lambda (c41ae@ls/false) (if c41ae@ls/false (apply (lambda () (c2faf@syntax-violation '#f '"malformed import form" c419c@e)) c41ae@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c41ac@t))) (c2ec6@syntax-dispatch c41ac@t '_))) c41a6@t))) (c2ec6@syntax-dispatch c41a6@t '(_ . each-any)))) c419e@t))) (c2ec6@syntax-dispatch c419e@t '(_ any)))) c419c@e))) (set! c414b@module-import (lambda (c417a@e c417b@r) ((lambda (c417e@t) ((lambda (c4180@ls/false) (if (and c4180@ls/false (apply (lambda (c4182@id) (c2cbb@id? c4182@id)) c4180@ls/false)) (apply (lambda (c4184@id) (call-with-values (lambda () (c2ce3@syntax-type c4184@id c417b@r)) (lambda (c418c@c4187 c418d@c4189 c418e@c418b) ((lambda (c4192@kwd c4193@value c4194@type) ((lambda (c4198@t) (if (memv c4198@t '($module)) ((lambda (c419a@iface) (values (c2f1d@module-interface-exp-id* c419a@iface c4184@id) (c2f15@module-interface-exp-lab-vec c419a@iface))) c4193@value) (c2faf@syntax-violation '#f '"invalid import" c417a@e))) c4194@type)) c418e@c418b c418d@c4189 c418c@c4187)))) c4180@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c417e@t))) (c2ec6@syntax-dispatch c417e@t '(_ any)))) c417a@e))) (set! c414d@library-import (lambda (c415e@e) ((lambda (c4160@t) ((lambda (c4162@ls/false) (if c4162@ls/false (apply (lambda (c4164@ctxt c4165@imp*) (call-with-values (lambda () (c2f2b@parse-import-spec* (c2fb5@syntax->datum c4165@imp*))) (lambda (c416c@c4169 c416d@c416b) ((lambda (c4170@subst-labels c4171@subst-names) (values (vector-map (lambda (c4174@name) (c2c99@datum->stx c4164@ctxt c4174@name)) c4171@subst-names) c4170@subst-labels)) c416d@c416b c416c@c4169)))) c4162@ls/false) ((lambda (c4176@t) ((lambda (c4178@ls/false) (if c4178@ls/false (apply (lambda () (c2faf@syntax-violation '#f '"invalid import form" c415e@e)) c4178@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c4176@t))) (c2ec6@syntax-dispatch c4176@t '_))) c4160@t))) (c2ec6@syntax-dispatch c4160@t '(any . each-any)))) c415e@e))) (begin (call-with-values (lambda () (if (c4149@module-import? c40ac@e) (c414b@module-import c40ac@e c4099@r) (c414d@library-import c40ac@e))) (lambda (c4152@c414f c4153@c4151) ((lambda (c4156@lab* c4157@id*) (vector-for-each (lambda (c415a@id c415b@lab) (c2c6c@extend-rib! c40a0@rib c415a@id c415b@lab)) c4157@id* c4156@lab*)) c4153@c4151 c4152@c414f))) (c2f21@chi-body* (cdr c4098@e*) c4099@r c409a@mr c409b@lex* c409c@rhs* c409d@mod** c40c0@kwd* c409f@exp* c40a0@rib c40a1@top?)))) '#f '#f '#f))) (if c40a1@top? (c2f21@chi-body* (cdr c4098@e*) c4099@r c409a@mr (cons (c2c3b@gen-lexical 'dummy) c409b@lex*) (cons (cons 'top-expr c40ac@e) c409c@rhs*) c409d@mod** c40c0@kwd* c409f@exp* c40a0@rib c40a1@top?) (values c4098@e* c4099@r c409a@mr c409b@lex* c409c@rhs* c409d@mod** c40c0@kwd* c409f@exp*)))))))))))))) c40bc@type)) (if (c2cbb@id? c40ba@kwd) (cons c40ba@kwd c409e@kwd*) c409e@kwd*))) c40b6@c40b3 c40b5@c40b1 c40b4@c40af)))) (car c4098@e*))))) (set! c2f23@expand-transformer (lambda (c41b0@expr c41b1@r) ((lambda (c41b4@rtc) ((lambda (c41b6@expanded-rhs) (begin (for-each ((lambda (c41b8@mark-visit) (lambda (c41ba@x) (begin (c2adf@c2980@invoke-library c41ba@x) (c41b8@mark-visit c41ba@x)))) (c2f33@vis-collector)) (c41b4@rtc)) c41b6@expanded-rhs)) ((lambda (c41c4@c41bd c41c5@c41bf c41c6@c41c1 c41c7@c41c3) ((lambda (c41cc@swap) (dynamic-wind c41cc@swap (lambda () (c2ee8@chi-expr c41b0@expr c41b1@r c41b1@r)) c41cc@swap)) (lambda () (begin ((lambda (c41ce@t) (begin (c41c4@c41bd c41c6@c41c1) (set! c41c6@c41c1 c41ce@t))) (c41c4@c41bd)) ((lambda (c41d0@t) (begin (c41c5@c41bf c41c7@c41c3) (set! c41c7@c41c3 c41d0@t))) (c41c5@c41bf)))))) c2f31@inv-collector c2f33@vis-collector c41b4@rtc (lambda (c41d2@x) (values))))) (c2f2f@make-collector)))) (set! c2f25@parse-exports (lambda (c41d4@exp*) ((letrec ((c41d6@f (lambda (c41d8@exp* c41d9@int* c41da@ext*) (if (null? c41d8@exp*) (begin (if (not (c2cc5@valid-bound-ids? c41da@ext*)) (c2faf@syntax-violation 'export '"invalid exports" (c2efc@find-dups c41da@ext*)) (void)) (values (map c2fb5@syntax->datum c41da@ext*) c41d9@int*)) ((lambda (c41de@t) ((lambda (c41e0@ls/false) (if c41e0@ls/false (apply (lambda (c41e2@rename c41e3@i* c41e4@e*) (begin (if (not (and (eq? (c2fb5@syntax->datum c41e2@rename) 'rename) (for-all c2cbb@id? c41e3@i*) (for-all c2cbb@id? c41e4@e*))) (c2faf@syntax-violation 'export '"invalid export specifier" (car c41d8@exp*)) (void)) (c41d6@f (cdr c41d8@exp*) (append c41e3@i* c41d9@int*) (append c41e4@e* c41da@ext*)))) c41e0@ls/false) ((lambda (c41e8@t) ((lambda (c41ea@ls/false) (if c41ea@ls/false (apply (lambda (c41ec@ie) (begin (if (not (c2cbb@id? c41ec@ie)) (c2faf@syntax-violation 'export '"invalid export" c41ec@ie) (void)) (c41d6@f (cdr c41d8@exp*) (cons c41ec@ie c41d9@int*) (cons c41ec@ie c41da@ext*)))) c41ea@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c41e8@t))) (c2ec6@syntax-dispatch c41e8@t 'any))) c41de@t))) (c2ec6@syntax-dispatch c41de@t '(any . #(each (any any)))))) (car c41d8@exp*)))))) c41d6@f) c41d4@exp* '() '()))) (set! c2f27@parse-library-name (lambda (c41ee@spec) ((lambda (c41f1@parse) (begin (set! c41f1@parse (lambda (c41fe@x) ((lambda (c4200@t) ((lambda (c4202@ls/false) (if (and c4202@ls/false (apply (lambda (c4204@v*) (for-all (lambda (c4206@x) ((lambda (c4208@x) (and (integer? c4208@x) (exact? c4208@x))) (c2fb5@syntax->datum c4206@x))) c4204@v*)) c4202@ls/false)) (apply (lambda (c420a@v*) (values '() (map c2fb5@syntax->datum c420a@v*))) c4202@ls/false) ((lambda (c420c@t) ((lambda (c420e@ls/false) (if (and c420e@ls/false (apply (lambda (c4210@x c4211@rest) (symbol? (c2fb5@syntax->datum c4210@x))) c420e@ls/false)) (apply (lambda (c4214@x c4215@rest) (call-with-values (lambda () (c41f1@parse c4215@rest)) (lambda (c421c@c4219 c421d@c421b) ((lambda (c4220@v* c4221@x*) (values (cons (c2fb5@syntax->datum c4214@x) c4221@x*) c4220@v*)) c421d@c421b c421c@c4219)))) c420e@ls/false) ((lambda (c4224@t) ((lambda (c4226@ls/false) (if c4226@ls/false (apply (lambda () (values '() '())) c4226@ls/false) ((lambda (c4228@t) ((lambda (c422a@ls/false) (if c422a@ls/false (apply (lambda () (c2faf@syntax-violation '#f '"invalid library name" c41ee@spec)) c422a@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c4228@t))) (c2ec6@syntax-dispatch c4228@t '_))) c4224@t))) (c2ec6@syntax-dispatch c4224@t '()))) c420c@t))) (c2ec6@syntax-dispatch c420c@t '(any . any)))) c4200@t))) (c2ec6@syntax-dispatch c4200@t '(each-any)))) c41fe@x))) (call-with-values (lambda () (c41f1@parse c41ee@spec)) (lambda (c41f6@c41f3 c41f7@c41f5) ((lambda (c41fa@ver* c41fb@name*) (begin (if (null? c41fb@name*) (c2faf@syntax-violation '#f '"empty library name" c41ee@spec) (void)) (values c41fb@name* c41fa@ver*))) c41f7@c41f5 c41f6@c41f3))))) '#f))) (set! c2f29@parse-library (lambda (c422c@e) ((lambda (c422e@t) ((lambda (c4230@ls/false) (if (and c4230@ls/false (apply (lambda (c4232@library c4233@name* c4234@export c4235@exp* c4236@import c4237@imp* c4238@b*) (and (eq? (c2fb5@syntax->datum c4234@export) 'export) (eq? (c2fb5@syntax->datum c4236@import) 'import) (eq? (c2fb5@syntax->datum c4232@library) 'library))) c4230@ls/false)) (apply (lambda (c4240@library c4241@name* c4242@export c4243@exp* c4244@import c4245@imp* c4246@b*) (values c4241@name* c4243@exp* c4245@imp* c4246@b*)) c4230@ls/false) ((lambda (c424e@t) ((lambda (c4250@ls/false) (if c4250@ls/false (apply (lambda () (c2faf@syntax-violation '#f '"malformed library" c422c@e)) c4250@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c424e@t))) (c2ec6@syntax-dispatch c424e@t '_))) c422e@t))) (c2ec6@syntax-dispatch c422e@t '(any each-any (any . each-any) (any . each-any) . each-any)))) c422c@e))) (set! c2f2b@parse-import-spec* ((lambda () ((lambda (c4253@idsyn? c4255@dup-error c4257@merge-substs c4259@exclude* c425b@find* c425d@rem* c425f@remove-dups c4261@parse-library-name c4263@import-library c4265@get-import c4267@add-imports!) (begin (set! c4253@idsyn? (lambda (c445c@x) (symbol? (c2fb5@syntax->datum c445c@x)))) (set! c4255@dup-error (lambda (c445a@name) (c2faf@syntax-violation 'import '"two imports with different bindings" c445a@name))) (set! c4257@merge-substs (lambda (c4448@s c4449@subst) ((lambda (c444d@insert-to-subst) (begin (set! c444d@insert-to-subst (lambda (c444e@a c444f@subst) ((lambda (c4452@name c4453@label) ((lambda (c4456@t) (if c4456@t ((lambda (c4458@x) (if (eq? (cdr c4458@x) c4453@label) c444f@subst (c4255@dup-error c4452@name))) c4456@t) (cons c444e@a c444f@subst))) (assq c4452@name c444f@subst))) (car c444e@a) (cdr c444e@a)))) (if (null? c4448@s) c4449@subst (c444d@insert-to-subst (car c4448@s) (c4257@merge-substs (cdr c4448@s) c4449@subst))))) '#f))) (set! c4259@exclude* (lambda (c4418@sym* c4419@subst) ((lambda (c441d@exclude) (begin (set! c441d@exclude (lambda (c4436@sym c4437@subst) (if (null? c4437@subst) (c2faf@syntax-violation 'import '"cannot rename unbound identifier" c4436@sym) (if (eq? c4436@sym (caar c4437@subst)) (values (cdar c4437@subst) (cdr c4437@subst)) ((lambda (c443a@a) (call-with-values (lambda () (c441d@exclude c4436@sym (cdr c4437@subst))) (lambda (c4440@c443d c4441@c443f) ((lambda (c4444@subst c4445@old) (values c4445@old (cons c443a@a c4444@subst))) c4441@c443f c4440@c443d)))) (car c4437@subst)))))) (if (null? c4418@sym*) (values '() c4419@subst) (call-with-values (lambda () (c441d@exclude (car c4418@sym*) c4419@subst)) (lambda (c4422@c441f c4423@c4421) ((lambda (c4426@subst c4427@old) (call-with-values (lambda () (c4259@exclude* (cdr c4418@sym*) c4426@subst)) (lambda (c442e@c442b c442f@c442d) ((lambda (c4432@subst c4433@old*) (values (cons c4427@old c4433@old*) c4432@subst)) c442f@c442d c442e@c442b)))) c4423@c4421 c4422@c441f)))))) '#f))) (set! c425b@find* (lambda (c4410@sym* c4411@subst) (map (lambda (c4414@x) ((lambda (c4416@t) (if c4416@t (cdr c4416@t) (c2faf@syntax-violation 'import '"cannot find identifier" c4414@x))) (assq c4414@x c4411@subst))) c4410@sym*))) (set! c425d@rem* (lambda (c4408@sym* c4409@subst) ((letrec ((c440c@f (lambda (c440e@subst) (if (null? c440e@subst) '() (if (memq (caar c440e@subst) c4408@sym*) (c440c@f (cdr c440e@subst)) (cons (car c440e@subst) (c440c@f (cdr c440e@subst)))))))) c440c@f) c4409@subst))) (set! c425f@remove-dups (lambda (c4406@ls) (if (null? c4406@ls) '() (if (memq (car c4406@ls) (cdr c4406@ls)) (c425f@remove-dups (cdr c4406@ls)) (cons (car c4406@ls) (c425f@remove-dups (cdr c4406@ls))))))) (set! c4261@parse-library-name (lambda (c431e@spec) ((lambda (c4321@subversion? c4323@subversion-pred c4325@version-pred) (begin (set! c4321@subversion? (lambda (c4402@x) ((lambda (c4404@x) (and (integer? c4404@x) (exact? c4404@x) (>= c4404@x '0))) (c2fb5@syntax->datum c4402@x)))) (set! c4323@subversion-pred (lambda (c43a2@x*) ((lambda (c43a4@t) ((lambda (c43a6@ls/false) (if (and c43a6@ls/false (apply (lambda (c43a8@n) (c4321@subversion? c43a8@n)) c43a6@ls/false)) (apply (lambda (c43aa@n) (lambda (c43ac@x) (= c43ac@x (c2fb5@syntax->datum c43aa@n)))) c43a6@ls/false) ((lambda (c43ae@t) ((lambda (c43b0@ls/false) (if (and c43b0@ls/false (apply (lambda (c43b2@p? c43b3@sub*) (eq? (c2fb5@syntax->datum c43b2@p?) 'and)) c43b0@ls/false)) (apply (lambda (c43b6@p? c43b7@sub*) ((lambda (c43ba@p*) (lambda (c43bc@x) (for-all (lambda (c43be@p) (c43be@p c43bc@x)) c43ba@p*))) (map c4323@subversion-pred c43b7@sub*))) c43b0@ls/false) ((lambda (c43c0@t) ((lambda (c43c2@ls/false) (if (and c43c2@ls/false (apply (lambda (c43c4@p? c43c5@sub*) (eq? (c2fb5@syntax->datum c43c4@p?) 'or)) c43c2@ls/false)) (apply (lambda (c43c8@p? c43c9@sub*) ((lambda (c43cc@p*) (lambda (c43ce@x) (exists (lambda (c43d0@p) (c43d0@p c43ce@x)) c43cc@p*))) (map c4323@subversion-pred c43c9@sub*))) c43c2@ls/false) ((lambda (c43d2@t) ((lambda (c43d4@ls/false) (if (and c43d4@ls/false (apply (lambda (c43d6@p? c43d7@sub) (eq? (c2fb5@syntax->datum c43d6@p?) 'not)) c43d4@ls/false)) (apply (lambda (c43da@p? c43db@sub) ((lambda (c43de@p) (lambda (c43e0@x) (not (c43de@p c43e0@x)))) (c4323@subversion-pred c43db@sub))) c43d4@ls/false) ((lambda (c43e2@t) ((lambda (c43e4@ls/false) (if (and c43e4@ls/false (apply (lambda (c43e6@p? c43e7@n) (and (eq? (c2fb5@syntax->datum c43e6@p?) '<=) (c4321@subversion? c43e7@n))) c43e4@ls/false)) (apply (lambda (c43ea@p? c43eb@n) (lambda (c43ee@x) (<= c43ee@x (c2fb5@syntax->datum c43eb@n)))) c43e4@ls/false) ((lambda (c43f0@t) ((lambda (c43f2@ls/false) (if (and c43f2@ls/false (apply (lambda (c43f4@p? c43f5@n) (and (eq? (c2fb5@syntax->datum c43f4@p?) '>=) (c4321@subversion? c43f5@n))) c43f2@ls/false)) (apply (lambda (c43f8@p? c43f9@n) (lambda (c43fc@x) (>= c43fc@x (c2fb5@syntax->datum c43f9@n)))) c43f2@ls/false) ((lambda (c43fe@t) ((lambda (c4400@ls/false) (if c4400@ls/false (apply (lambda () (c2faf@syntax-violation 'import '"invalid sub-version spec" c431e@spec c43a2@x*)) c4400@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c43fe@t))) (c2ec6@syntax-dispatch c43fe@t '_))) c43f0@t))) (c2ec6@syntax-dispatch c43f0@t '(any any)))) c43e2@t))) (c2ec6@syntax-dispatch c43e2@t '(any any)))) c43d2@t))) (c2ec6@syntax-dispatch c43d2@t '(any any)))) c43c0@t))) (c2ec6@syntax-dispatch c43c0@t '(any . each-any)))) c43ae@t))) (c2ec6@syntax-dispatch c43ae@t '(any . each-any)))) c43a4@t))) (c2ec6@syntax-dispatch c43a4@t 'any))) c43a2@x*))) (set! c4325@version-pred (lambda (c4352@x*) ((lambda (c4354@t) ((lambda (c4356@ls/false) (if c4356@ls/false (apply (lambda () (lambda (c4358@x) '#t)) c4356@ls/false) ((lambda (c435a@t) ((lambda (c435c@ls/false) (if (and c435c@ls/false (apply (lambda (c435e@c c435f@ver*) (eq? (c2fb5@syntax->datum c435e@c) 'and)) c435c@ls/false)) (apply (lambda (c4362@c c4363@ver*) ((lambda (c4366@p*) (lambda (c4368@x) (for-all (lambda (c436a@p) (c436a@p c4368@x)) c4366@p*))) (map c4325@version-pred c4363@ver*))) c435c@ls/false) ((lambda (c436c@t) ((lambda (c436e@ls/false) (if (and c436e@ls/false (apply (lambda (c4370@c c4371@ver*) (eq? (c2fb5@syntax->datum c4370@c) 'or)) c436e@ls/false)) (apply (lambda (c4374@c c4375@ver*) ((lambda (c4378@p*) (lambda (c437a@x) (exists (lambda (c437c@p) (c437c@p c437a@x)) c4378@p*))) (map c4325@version-pred c4375@ver*))) c436e@ls/false) ((lambda (c437e@t) ((lambda (c4380@ls/false) (if (and c4380@ls/false (apply (lambda (c4382@c c4383@ver) (eq? (c2fb5@syntax->datum c4382@c) 'not)) c4380@ls/false)) (apply (lambda (c4386@c c4387@ver) ((lambda (c438a@p) (lambda (c438c@x) (not (c438a@p c438c@x)))) (c4325@version-pred c4387@ver))) c4380@ls/false) ((lambda (c438e@t) ((lambda (c4390@ls/false) (if c4390@ls/false (apply (lambda (c4392@sub*) ((lambda (c4394@p*) (lambda (c4396@x) ((letrec ((c4398@f (lambda (c439a@p* c439b@x) (if (null? c439a@p*) '#t (if (null? c439b@x) '#f (and ((car c439a@p*) (car c439b@x)) (c4398@f (cdr c439a@p*) (cdr c439b@x)))))))) c4398@f) c4394@p* c4396@x))) (map c4323@subversion-pred c4392@sub*))) c4390@ls/false) ((lambda (c439e@t) ((lambda (c43a0@ls/false) (if c43a0@ls/false (apply (lambda () (c2faf@syntax-violation 'import '"invalid version spec" c431e@spec c4352@x*)) c43a0@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c439e@t))) (c2ec6@syntax-dispatch c439e@t '_))) c438e@t))) (c2ec6@syntax-dispatch c438e@t 'each-any))) c437e@t))) (c2ec6@syntax-dispatch c437e@t '(any any)))) c436c@t))) (c2ec6@syntax-dispatch c436c@t '(any . each-any)))) c435a@t))) (c2ec6@syntax-dispatch c435a@t '(any . each-any)))) c4354@t))) (c2ec6@syntax-dispatch c4354@t '()))) c4352@x*))) ((letrec ((c4326@f (lambda (c4328@x) ((lambda (c432a@t) ((lambda (c432c@ls/false) (if c432c@ls/false (apply (lambda (c432e@version-spec*) (values '() (c4325@version-pred c432e@version-spec*))) c432c@ls/false) ((lambda (c4330@t) ((lambda (c4332@ls/false) (if (and c4332@ls/false (apply (lambda (c4334@x c4335@x*) (c4253@idsyn? c4334@x)) c4332@ls/false)) (apply (lambda (c4338@x c4339@x*) (call-with-values (lambda () (c4326@f c4339@x*)) (lambda (c4340@c433d c4341@c433f) ((lambda (c4344@pred c4345@name) (values (cons (c2fb5@syntax->datum c4338@x) c4345@name) c4344@pred)) c4341@c433f c4340@c433d)))) c4332@ls/false) ((lambda (c4348@t) ((lambda (c434a@ls/false) (if c434a@ls/false (apply (lambda () (values '() (lambda (c434c@x) '#t))) c434a@ls/false) ((lambda (c434e@t) ((lambda (c4350@ls/false) (if c4350@ls/false (apply (lambda () (c2faf@syntax-violation '#f '"invalid import spec" c431e@spec)) c4350@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c434e@t))) (c2ec6@syntax-dispatch c434e@t '_))) c4348@t))) (c2ec6@syntax-dispatch c4348@t '()))) c4330@t))) (c2ec6@syntax-dispatch c4330@t '(any . any)))) c432a@t))) (c2ec6@syntax-dispatch c432a@t '(each-any)))) c4328@x)))) c4326@f) c431e@spec))) '#f '#f '#f))) (set! c4263@import-library (lambda (c430e@spec*) (call-with-values (lambda () (c4261@parse-library-name c430e@spec*)) (lambda (c4314@c4311 c4315@c4313) ((lambda (c4318@pred c4319@name) (begin (if (null? c4319@name) (c2faf@syntax-violation 'import '"empty library name" c430e@spec*) (void)) ((lambda (c431c@lib) (begin (if (not c431c@lib) (c2faf@syntax-violation 'import '"cannot find library with required name" c4319@name) (void)) (if (not (c4318@pred (c2ab0@c2922@library-version c431c@lib))) (c2faf@syntax-violation 'import '"library does not satisfy version specification" c430e@spec* c431c@lib) (void)) ((c2f35@imp-collector) c431c@lib) (c2ab4@c292a@library-subst c431c@lib))) (c2ad8@c2972@find-library-by-name c4319@name)))) c4315@c4313 c4314@c4311))))) (set! c4265@get-import (lambda (c4280@spec) ((lambda (c4282@t) ((lambda (c4284@ls/false) (if (and c4284@ls/false (apply (lambda (c4286@x c4287@x*) (not (memq (c2fb5@syntax->datum c4286@x) '(for rename except only prefix library)))) c4284@ls/false)) (apply (lambda (c428a@x c428b@x*) (c4263@import-library (cons c428a@x c428b@x*))) c4284@ls/false) ((lambda (c428e@t) ((lambda (c4290@ls/false) (if (and c4290@ls/false (apply (lambda (c4292@rename c4293@isp c4294@old* c4295@new*) (and (eq? (c2fb5@syntax->datum c4292@rename) 'rename) (for-all c4253@idsyn? c4294@old*) (for-all c4253@idsyn? c4295@new*))) c4290@ls/false)) (apply (lambda (c429a@rename c429b@isp c429c@old* c429d@new*) ((lambda (c42a2@subst c42a3@old* c42a4@new*) ((lambda (c42a8@old-label*) ((lambda (c42aa@subst) (c4257@merge-substs (map cons c42a4@new* c42a8@old-label*) c42aa@subst)) (c425d@rem* c42a3@old* c42a2@subst))) (c425b@find* c42a3@old* c42a2@subst))) (c4265@get-import c429b@isp) (map c2fb5@syntax->datum c429c@old*) (map c2fb5@syntax->datum c429d@new*))) c4290@ls/false) ((lambda (c42ac@t) ((lambda (c42ae@ls/false) (if (and c42ae@ls/false (apply (lambda (c42b0@except c42b1@isp c42b2@sym*) (and (eq? (c2fb5@syntax->datum c42b0@except) 'except) (for-all c4253@idsyn? c42b2@sym*))) c42ae@ls/false)) (apply (lambda (c42b6@except c42b7@isp c42b8@sym*) ((lambda (c42bc@subst) (c425d@rem* (map c2fb5@syntax->datum c42b8@sym*) c42bc@subst)) (c4265@get-import c42b7@isp))) c42ae@ls/false) ((lambda (c42be@t) ((lambda (c42c0@ls/false) (if (and c42c0@ls/false (apply (lambda (c42c2@only c42c3@isp c42c4@sym*) (and (eq? (c2fb5@syntax->datum c42c2@only) 'only) (for-all c4253@idsyn? c42c4@sym*))) c42c0@ls/false)) (apply (lambda (c42c8@only c42c9@isp c42ca@sym*) ((lambda (c42ce@subst c42cf@sym*) ((lambda (c42d2@sym*) ((lambda (c42d4@lab*) (map cons c42d2@sym* c42d4@lab*)) (c425b@find* c42d2@sym* c42ce@subst))) (c425f@remove-dups c42cf@sym*))) (c4265@get-import c42c9@isp) (map c2fb5@syntax->datum c42ca@sym*))) c42c0@ls/false) ((lambda (c42d6@t) ((lambda (c42d8@ls/false) (if (and c42d8@ls/false (apply (lambda (c42da@prefix c42db@isp c42dc@p) (and (eq? (c2fb5@syntax->datum c42da@prefix) 'prefix) (c4253@idsyn? c42dc@p))) c42d8@ls/false)) (apply (lambda (c42e0@prefix c42e1@isp c42e2@p) ((lambda (c42e6@subst c42e7@prefix) (map (lambda (c42ea@x) (cons (string->symbol (string-append c42e7@prefix (symbol->string (car c42ea@x)))) (cdr c42ea@x))) c42e6@subst)) (c4265@get-import c42e1@isp) (symbol->string (c2fb5@syntax->datum c42e2@p)))) c42d8@ls/false) ((lambda (c42ec@t) ((lambda (c42ee@ls/false) (if (and c42ee@ls/false (apply (lambda (c42f0@library c42f1@spec*) (eq? (c2fb5@syntax->datum c42f0@library) 'library)) c42ee@ls/false)) (apply (lambda (c42f4@library c42f5@spec*) (c4263@import-library c42f5@spec*)) c42ee@ls/false) ((lambda (c42f8@t) ((lambda (c42fa@ls/false) (if (and c42fa@ls/false (apply (lambda (c42fc@for c42fd@isp c42fe@rest) (eq? (c2fb5@syntax->datum c42fc@for) 'for)) c42fa@ls/false)) (apply (lambda (c4302@for c4303@isp c4304@rest) (c4265@get-import c4303@isp)) c42fa@ls/false) ((lambda (c4308@t) ((lambda (c430a@ls/false) (if c430a@ls/false (apply (lambda (c430c@spec) (c2faf@syntax-violation 'import '"invalid import spec" c430c@spec)) c430a@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c4308@t))) (c2ec6@syntax-dispatch c4308@t 'any))) c42f8@t))) (c2ec6@syntax-dispatch c42f8@t '(any any . any)))) c42ec@t))) (c2ec6@syntax-dispatch c42ec@t '(any each-any)))) c42d6@t))) (c2ec6@syntax-dispatch c42d6@t '(any any any)))) c42be@t))) (c2ec6@syntax-dispatch c42be@t '(any any . each-any)))) c42ac@t))) (c2ec6@syntax-dispatch c42ac@t '(any any . each-any)))) c428e@t))) (c2ec6@syntax-dispatch c428e@t '(any any . #(each (any any)))))) c4282@t))) (c2ec6@syntax-dispatch c4282@t '(any . each-any)))) c4280@spec))) (set! c4267@add-imports! (lambda (c4270@imp c4271@h) ((lambda (c4274@subst) (for-each (lambda (c4276@x) ((lambda (c4278@name c4279@label) ((lambda (c427c@t) (if c427c@t ((lambda (c427e@l) (if (not (eq? c427e@l c4279@label)) (c4255@dup-error c4278@name) (void))) c427c@t) (hashtable-set! c4271@h c4278@name c4279@label))) (hashtable-ref c4271@h c4278@name '#f))) (car c4276@x) (cdr c4276@x))) c4274@subst)) (c4265@get-import c4270@imp)))) (lambda (c4268@imp*) ((letrec ((c426a@f (lambda (c426c@imp* c426d@h) (if (null? c426c@imp*) (hashtable-entries c426d@h) (begin (c4267@add-imports! (car c426c@imp*) c426d@h) (c426a@f (cdr c426c@imp*) c426d@h)))))) c426a@f) c4268@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! c2f2d@make-top-rib (lambda (c445e@names c445f@labels) ((lambda (c4462@rib) (begin (vector-for-each (lambda (c4464@name c4465@label) (begin (if (not (symbol? c4464@name)) (error 'make-top-rib '"BUG: not a symbol" c4464@name) (void)) (c2c6e@extend-rib/nc! c4462@rib (c2c85@make-stx c4464@name c2c37@top-mark* '() '()) c4465@label))) c445e@names c445f@labels) c4462@rib)) (c2c6a@make-empty-rib)))) (set! c2f2f@make-collector (lambda () ((lambda (c4468@ls) (lambda c446c ((lambda (c446d) (if (= c446d '0) (apply (lambda () c4468@ls) c446c) (if (= c446d '1) (apply (lambda (c446a@x) (set! c4468@ls (c2c30@set-cons c446a@x c4468@ls))) c446c) (error 'apply '"invalid arg count")))) (length c446c)))) '()))) (set! c2f31@inv-collector (c2865@c278f@make-parameter (lambda c446e@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (c4470@x) (begin (if (not (procedure? c4470@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" c4470@x) (void)) c4470@x)))) (set! c2f33@vis-collector (c2865@c278f@make-parameter (lambda c4472@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (c4474@x) (begin (if (not (procedure? c4474@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" c4474@x) (void)) c4474@x)))) (set! c2f35@imp-collector (c2865@c278f@make-parameter (lambda c4476@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (c4478@x) (begin (if (not (procedure? c4478@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" c4478@x) (void)) c4478@x)))) (set! c2f37@chi-library-internal (lambda (c447a@e* c447b@rib c447c@top?) (call-with-values (lambda () (c2f21@chi-body* c447a@e* '() '() '() '() '() '() '() c447b@rib c447c@top?)) (lambda (c4490@c4481 c4491@c4483 c4492@c4485 c4493@c4487 c4494@c4489 c4495@c448b c4496@c448d c4497@c448f) ((lambda (c44a0@exp* c44a1@_kwd* c44a2@mod** c44a3@rhs* c44a4@lex* c44a5@mr c44a6@r c44a7@e*) (values (append (apply append (reverse c44a2@mod**)) c44a7@e*) c44a6@r c44a5@mr (reverse c44a4@lex*) (reverse c44a3@rhs*) c44a0@exp*)) c4497@c448f c4496@c448d c4495@c448b c4494@c4489 c4493@c4487 c4492@c4485 c4491@c4483 c4490@c4481))))) (set! c2f39@chi-interaction-expr (lambda (c44b0@e c44b1@rib c44b2@r) (call-with-values (lambda () (c2f21@chi-body* (list c44b0@e) c44b2@r c44b2@r '() '() '() '() '() c44b1@rib '#t)) (lambda (c44c6@c44b7 c44c7@c44b9 c44c8@c44bb c44c9@c44bd c44ca@c44bf c44cb@c44c1 c44cc@c44c3 c44cd@c44c5) ((lambda (c44d6@_exp* c44d7@_kwd* c44d8@mod** c44d9@rhs* c44da@lex* c44db@mr c44dc@r c44dd@e*) ((lambda (c44e6@e*) ((lambda (c44e8@e) (values c44e8@e c44dc@r)) (if (null? c44e6@e*) (c2c1b@c2b8b@build-void) (if (null? (cdr c44e6@e*)) (car c44e6@e*) (c2c1a@c2b89@build-sequence '#f c44e6@e*))))) (c2ef6@expand-interaction-rhs*/init* (reverse c44da@lex*) (reverse c44d9@rhs*) (append (apply append (reverse c44d8@mod**)) c44dd@e*) c44dc@r c44db@mr))) c44cd@c44c5 c44cc@c44c3 c44cb@c44c1 c44ca@c44bf c44c9@c44bd c44c8@c44bb c44c7@c44b9 c44c6@c44b7))))) (set! c2f3b@library-body-expander (lambda (c44ea@name c44eb@main-exp* c44ec@imp* c44ed@b* c44ee@top?) ((lambda (c44f5@itc) (begin (set! c44f5@itc (c2f2f@make-collector)) ((lambda (c44fe@c44f7 c44ff@c44f9 c4500@c44fb c4501@c44fd) ((lambda (c4506@swap) (dynamic-wind c4506@swap (lambda () (call-with-values (lambda () (c2f2b@parse-import-spec* c44ec@imp*)) (lambda (c450c@c4509 c450d@c450b) ((lambda (c4510@subst-labels c4511@subst-names) ((lambda (c4514@rib) ((lambda (c4517@wrap) (begin (set! c4517@wrap (lambda (c4592@x) (c2c85@make-stx c4592@x c2c37@top-mark* (list c4514@rib) '()))) ((lambda (c4518@b* c4519@main-exp* c451a@rtc c451b@vtc) ((lambda (c4528@c4521 c4529@c4523 c452a@c4525 c452b@c4527) ((lambda (c4530@swap) (dynamic-wind c4530@swap (lambda () (call-with-values (lambda () (c2f37@chi-library-internal c4518@b* c4514@rib c44ee@top?)) (lambda (c453e@c4533 c453f@c4535 c4540@c4537 c4541@c4539 c4542@c453b c4543@c453d) ((lambda (c454a@internal-exp* c454b@rhs* c454c@lex* c454d@mr c454e@r c454f@init*) (call-with-values (lambda () (c2f25@parse-exports (append c4519@main-exp* c454a@internal-exp*))) (lambda (c455a@c4557 c455b@c4559) ((lambda (c455e@exp-id* c455f@exp-name*) (begin (c2c72@seal-rib! c4514@rib) ((lambda (c4562@init*) ((lambda (c4564@rhs*) ((lambda () (begin (c2c74@unseal-rib! c4514@rib) ((lambda (c4566@loc* c4567@export-subst) ((lambda (c456b@errstr) (begin (set! c456b@errstr '"attempt to export mutated variable") (call-with-values (lambda () (c2f9b@make-export-env/macros c454c@lex* c4566@loc* c454e@r)) (lambda (c4572@c456d c4573@c456f c4574@c4571) ((lambda (c4578@macro* c4579@global* c457a@export-env) (begin (for-each (lambda (c457e@s) ((lambda (c4580@name c4581@label) ((lambda (c4584@p) (if c4584@p ((lambda (c4586@b) ((lambda (c4588@type) (if (eq? c4588@type 'mutable) (c2faf@syntax-violation 'export c456b@errstr c4580@name) (void))) (car c4586@b))) (cdr c4584@p)) (void))) (assq c4581@label c457a@export-env))) (car c457e@s) (cdr c457e@s))) c4567@export-subst) ((lambda (c458a@invoke-body c458b@invoke-definitions) (values (c44f5@itc) (c451a@rtc) (c451b@vtc) (c2c1a@c2b89@build-sequence '#f (append c458b@invoke-definitions (list c458a@invoke-body))) c4578@macro* c4567@export-subst c457a@export-env)) (c2c1d@c2b8f@build-letrec* '#f c454c@lex* c4564@rhs* (c2f97@build-exports c4579@global* c4562@init*)) (map c2c16@c2ae6@build-global-define (map cdr c4579@global*))))) c4574@c4571 c4573@c456f c4572@c456d))))) '#f)) (map c2c3d@gen-global c454c@lex*) (c2f99@make-export-subst c455f@exp-name* c455e@exp-id*)))))) (c2ef8@chi-rhs* c454b@rhs* c454e@r c454d@mr))) (c2ee4@chi-expr* c454f@init* c454e@r c454d@mr)))) c455b@c4559 c455a@c4557)))) c4543@c453d c4542@c453b c4541@c4539 c4540@c4537 c453f@c4535 c453e@c4533)))) c4530@swap)) (lambda () (begin ((lambda (c458e@t) (begin (c4528@c4521 c452a@c4525) (set! c452a@c4525 c458e@t))) (c4528@c4521)) ((lambda (c4590@t) (begin (c4529@c4523 c452b@c4527) (set! c452b@c4527 c4590@t))) (c4529@c4523)))))) c2f31@inv-collector c2f33@vis-collector c451a@rtc c451b@vtc)) (map c4517@wrap c44ed@b*) (map c4517@wrap c44eb@main-exp*) (c2f2f@make-collector) (c2f2f@make-collector)))) '#f)) (c2f2d@make-top-rib c4511@subst-names c4510@subst-labels))) c450d@c450b c450c@c4509)))) c4506@swap)) (lambda () (begin ((lambda (c4594@t) (begin (c44fe@c44f7 c4500@c44fb) (set! c4500@c44fb c4594@t))) (c44fe@c44f7)) ((lambda (c4596@t) (begin (c44ff@c44f9 c4501@c44fd) (set! c4501@c44fd c4596@t))) (c44ff@c44f9)))))) c2f35@imp-collector c2fbd@top-level-context c44f5@itc '#f))) '#f))) (set! c2f3d@core-library-expander (lambda (c4598@e c4599@verify-name) (call-with-values (lambda () (c2f29@parse-library c4598@e)) (lambda (c45a4@c459d c45a5@c459f c45a6@c45a1 c45a7@c45a3) ((lambda (c45ac@b* c45ad@imp* c45ae@exp* c45af@name*) (call-with-values (lambda () (c2f27@parse-library-name c45af@name*)) (lambda (c45b8@c45b5 c45b9@c45b7) ((lambda (c45bc@ver c45bd@name) (begin (c4599@verify-name c45bd@name) (call-with-values (lambda () (c2f3b@library-body-expander c45bd@name c45ae@exp* c45ad@imp* c45ac@b* '#f)) (lambda (c45ce@c45c1 c45cf@c45c3 c45d0@c45c5 c45d1@c45c7 c45d2@c45c9 c45d3@c45cb c45d4@c45cd) ((lambda (c45dc@export-env c45dd@export-subst c45de@visit-code c45df@invoke-code c45e0@visit-req* c45e1@invoke-req* c45e2@imp*) (values c45bd@name c45bc@ver c45e2@imp* c45e1@invoke-req* c45e0@visit-req* c45df@invoke-code c45de@visit-code c45dd@export-subst c45dc@export-env)) c45d4@c45cd c45d3@c45cb c45d2@c45c9 c45d1@c45c7 c45d0@c45c5 c45cf@c45c3 c45ce@c45c1))))) c45b9@c45b7 c45b8@c45b5)))) c45a7@c45a3 c45a6@c45a1 c45a5@c459f c45a4@c459d))))) (set! c2f3f@parse-top-level-program (lambda (c45ea@e*) ((lambda (c45ec@t) ((lambda (c45ee@ls/false) (if (and c45ee@ls/false (apply (lambda (c45f0@import c45f1@imp* c45f2@b*) (eq? (c2fb5@syntax->datum c45f0@import) 'import)) c45ee@ls/false)) (apply (lambda (c45f6@import c45f7@imp* c45f8@b*) (values c45f7@imp* c45f8@b*)) c45ee@ls/false) ((lambda (c45fc@t) ((lambda (c45fe@ls/false) (if (and c45fe@ls/false (apply (lambda (c4600@import c4601@x c4602@y) (eq? (c2fb5@syntax->datum c4600@import) 'import)) c45fe@ls/false)) (apply (lambda (c4606@import c4607@x c4608@y) (c2faf@syntax-violation 'expander '"invalid syntax of top-level program" (c2cb5@syntax-car c45ea@e*))) c45fe@ls/false) ((lambda (c460c@t) ((lambda (c460e@ls/false) (if c460e@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) c460e@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c460c@t))) (c2ec6@syntax-dispatch c460c@t '_))) c45fc@t))) (c2ec6@syntax-dispatch c45fc@t '((any . any) . any)))) c45ec@t))) (c2ec6@syntax-dispatch c45ec@t '((any . each-any) . each-any)))) c45ea@e*))) (set! c2f41@top-level-expander (lambda (c4610@e*) (call-with-values (lambda () (c2f3f@parse-top-level-program c4610@e*)) (lambda (c4616@c4613 c4617@c4615) ((lambda (c461a@b* c461b@imp*) (call-with-values (lambda () (c2f3b@library-body-expander '() '() c461b@imp* c461a@b* '#t)) (lambda (c462c@c461f c462d@c4621 c462e@c4623 c462f@c4625 c4630@c4627 c4631@c4629 c4632@c462b) ((lambda (c463a@export-env c463b@export-subst c463c@visit-code c463d@invoke-code c463e@visit-req* c463f@invoke-req* c4640@imp*) (values c463f@invoke-req* c463d@invoke-code)) c4632@c462b c4631@c4629 c4630@c4627 c462f@c4625 c462e@c4623 c462d@c4621 c462c@c461f)))) c4617@c4615 c4616@c4613))))) (set! c2f47@c2f42 (make-record-type-descriptor 'env '#f 'c2f45 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! c2f49@c2f44 '#f) (set! c2f4b@c2f43 (make-record-constructor-descriptor c2f47@c2f42 '#f c2f49@c2f44)) (set! c2f4e@env? (record-predicate c2f47@c2f42)) (set! c2f50@make-env (record-constructor c2f4b@c2f43)) (set! c2f52@env-names (record-accessor c2f47@c2f42 '0)) (set! c2f54@env-labels (record-accessor c2f47@c2f42 '1)) (set! c2f56@env-itc (record-accessor c2f47@c2f42 '2)) (set! c2f58@set-env-names! (record-mutator c2f47@c2f42 '0)) (set! c2f5a@set-env-labels! (record-mutator c2f47@c2f42 '1)) (set! c2f5c@set-env-itc! (record-mutator c2f47@c2f42 '2)) (set! c2f5e@rp (c2862@c2789@make-record-printer 'env (lambda (c4648@x c4649@p c464a@wr) (display '"#<environment>" c4649@p)))) (set! c2f64@c2f5f (make-record-type-descriptor 'interaction-env '#f 'c2f62 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! c2f66@c2f61 '#f) (set! c2f68@c2f60 (make-record-constructor-descriptor c2f64@c2f5f '#f c2f66@c2f61)) (set! c2f6b@interaction-env? (record-predicate c2f64@c2f5f)) (set! c2f6d@make-interaction-env (record-constructor c2f68@c2f60)) (set! c2f6f@interaction-env-rib (record-accessor c2f64@c2f5f '0)) (set! c2f71@interaction-env-r (record-accessor c2f64@c2f5f '1)) (set! c2f73@interaction-env-locs (record-accessor c2f64@c2f5f '2)) (set! c2f75@set-interaction-env-rib! (record-mutator c2f64@c2f5f '0)) (set! c2f77@set-interaction-env-r! (record-mutator c2f64@c2f5f '1)) (set! c2f79@set-interaction-env-locs! (record-mutator c2f64@c2f5f '2)) (set! c2f7b@rp (c2862@c2789@make-record-printer 'interaction-env (lambda (c464e@x c464f@p c4650@wr) (display '"#<environment>" c464f@p)))) (set! c2f7d@interaction-environment-symbols (lambda () (c2f85@environment-symbols (c2fbb@interaction-environment)))) (set! c2f7f@environment-bindings (lambda (c4654@e) (vector->list (vector-map (lambda (c4656@name c4657@label) (c2f81@parse-binding (cons c4656@name (c2ade@c297e@imported-label->binding c4657@label)))) (c2f52@env-names c4654@e) (c2f54@env-labels c4654@e))))) (set! c2f81@parse-binding (lambda (c465a@b) (cons (car c465a@b) ((lambda (c465c@t) (if (memv c465c@t '(core-prim global)) 'procedure (if (memv c465c@t '(core-macro macro global-macro)) 'syntax (if (memv c465c@t '($core-rtd)) 'record (if (eq? (car c465a@b) (cadr c465a@b)) 'syntax 'unknown))))) (cadr c465a@b))))) (set! c2f83@environment? (lambda (c465e@x) (or (c2f4e@env? c465e@x) (c2f6b@interaction-env? c465e@x)))) (set! c2f85@environment-symbols (lambda (c4660@x) (if (c2f4e@env? c4660@x) (vector->list (c2f52@env-names c4660@x)) (if (c2f6b@interaction-env? c4660@x) (map values (c2c56@rib-sym* (c2f6f@interaction-env-rib c4660@x))) (assertion-violation 'environment-symbols '"not an environment" c4660@x))))) (set! c2f87@environment (lambda c4662@imp* ((lambda (c4664@itc) ((lambda (c466a@c4667 c466b@c4669) ((lambda (c466e@swap) (dynamic-wind c466e@swap (lambda () (call-with-values (lambda () (c2f2b@parse-import-spec* c4662@imp*)) (lambda (c4674@c4671 c4675@c4673) ((lambda (c4678@subst-labels c4679@subst-names) (c2f50@make-env c4679@subst-names c4678@subst-labels c4664@itc)) c4675@c4673 c4674@c4671)))) c466e@swap)) (lambda () ((lambda (c467c@t) (begin (c466a@c4667 c466b@c4669) (set! c466b@c4669 c467c@t))) (c466a@c4667))))) c2f35@imp-collector c4664@itc)) (c2f2f@make-collector)))) (set! c2f89@null-environment (lambda (c467e@n) (begin (if (not (eqv? c467e@n '5)) (assertion-violation 'null-environment '"not 5" c467e@n) (void)) (c2f87@environment '(psyntax null-environment-5))))) (set! c2f8b@scheme-report-environment (lambda (c4680@n) (begin (if (not (eqv? c4680@n '5)) (assertion-violation 'scheme-report-environment '"not 5" c4680@n) (void)) (c2f87@environment '(psyntax scheme-report-environment-5))))) (set! c2f8d@expand (lambda (c4682@x c4683@env) (if (c2f4e@env? c4683@env) ((lambda (c4686@rib) ((lambda (c4688@x c4689@itc c468a@rtc c468b@vtc) ((lambda (c4690@x) (begin (c2c72@seal-rib! c4686@rib) (values c4690@x (c468a@rtc)))) ((lambda (c46a2@c4693 c46a3@c4695 c46a4@c4697 c46a5@c4699 c46a6@c469b c46a7@c469d c46a8@c469f c46a9@c46a1) ((lambda (c46b2@swap) (dynamic-wind c46b2@swap (lambda () (c2ee8@chi-expr c4688@x '() '())) c46b2@swap)) (lambda () (begin ((lambda (c46b4@t) (begin (c46a2@c4693 c46a6@c469b) (set! c46a6@c469b c46b4@t))) (c46a2@c4693)) ((lambda (c46b6@t) (begin (c46a3@c4695 c46a7@c469d) (set! c46a7@c469d c46b6@t))) (c46a3@c4695)) ((lambda (c46b8@t) (begin (c46a4@c4697 c46a8@c469f) (set! c46a8@c469f c46b8@t))) (c46a4@c4697)) ((lambda (c46ba@t) (begin (c46a5@c4699 c46a9@c46a1) (set! c46a9@c46a1 c46ba@t))) (c46a5@c4699)))))) c2fbd@top-level-context c2f31@inv-collector c2f33@vis-collector c2f35@imp-collector '#f c468a@rtc c468b@vtc c4689@itc))) (c2c85@make-stx c4682@x c2c37@top-mark* (list c4686@rib) '()) (c2f56@env-itc c4683@env) (c2f2f@make-collector) (c2f2f@make-collector))) (c2f2d@make-top-rib (c2f52@env-names c4683@env) (c2f54@env-labels c4683@env))) (if (c2f6b@interaction-env? c4683@env) ((lambda (c46bc@rib c46bd@r c46be@rtc) ((lambda (c46c2@x) (call-with-values (lambda () ((lambda (c46d8@c46c9 c46d9@c46cb c46da@c46cd c46db@c46cf c46dc@c46d1 c46dd@c46d3 c46de@c46d5 c46df@c46d7) ((lambda (c46e8@swap) (dynamic-wind c46e8@swap (lambda () (c2f39@chi-interaction-expr c46c2@x c46bc@rib c46bd@r)) c46e8@swap)) (lambda () (begin ((lambda (c46ea@t) (begin (c46d8@c46c9 c46dc@c46d1) (set! c46dc@c46d1 c46ea@t))) (c46d8@c46c9)) ((lambda (c46ec@t) (begin (c46d9@c46cb c46dd@c46d3) (set! c46dd@c46d3 c46ec@t))) (c46d9@c46cb)) ((lambda (c46ee@t) (begin (c46da@c46cd c46de@c46d5) (set! c46de@c46d5 c46ee@t))) (c46da@c46cd)) ((lambda (c46f0@t) (begin (c46db@c46cf c46df@c46d7) (set! c46df@c46d7 c46f0@t))) (c46db@c46cf)))))) c2fbd@top-level-context c2f31@inv-collector c2f33@vis-collector c2f35@imp-collector c4683@env c46be@rtc (c2f2f@make-collector) (c2f2f@make-collector))) (lambda (c46f2@c46c5 c46f3@c46c7) ((lambda (c46f6@r^ c46f7@e) (begin (c2f77@set-interaction-env-r! c4683@env c46f6@r^) (values c46f7@e (c46be@rtc)))) c46f3@c46c7 c46f2@c46c5)))) (c2c85@make-stx c4682@x c2c37@top-mark* (list c46bc@rib) '()))) (c2f6f@interaction-env-rib c4683@env) (c2f71@interaction-env-r c4683@env) (c2f2f@make-collector)) (assertion-violation 'expand '"not an environment" c4683@env))))) (set! c2f8f@eval (lambda (c46fa@x c46fb@env) (begin (if (not (c2f83@environment? c46fb@env)) (error 'eval '"not an environment" c46fb@env) (void)) (call-with-values (lambda () (c2f8d@expand c46fa@x c46fb@env)) (lambda (c4702@c46ff c4703@c4701) ((lambda (c4706@invoke-req* c4707@x) (begin (for-each c2adf@c2980@invoke-library c4706@invoke-req*) (eval-core (c28b9@c2871@expanded->core c4707@x)))) c4703@c4701 c4702@c46ff)))))) (set! c2f91@library-expander (lambda c4778 ((lambda (c4779) (if (= c4779 '3) (apply (lambda (c470a@x c470b@filename c470c@verify-name) ((lambda (c4711@build-visit-code c4713@visit!) (begin (set! c4711@build-visit-code (lambda (c4766@macro*) (if (null? c4766@macro*) (c2c1b@c2b8b@build-void) (c2c1a@c2b89@build-sequence '#f (map (lambda (c4768@x) ((lambda (c476a@loc c476b@src) (list 'set! c476a@loc c476b@src)) (car c4768@x) (cddr c4768@x))) c4766@macro*))))) (set! c4713@visit! (lambda (c475e@macro*) (for-each (lambda (c4760@x) ((lambda (c4762@loc c4763@proc) (set-symbol-value! c4762@loc c4763@proc)) (car c4760@x) (cadr c4760@x))) c475e@macro*))) (call-with-values (lambda () (c2f3d@core-library-expander c470a@x c470c@verify-name)) (lambda (c4726@c4715 c4727@c4717 c4728@c4719 c4729@c471b c472a@c471d c472b@c471f c472c@c4721 c472d@c4723 c472e@c4725) ((lambda (c4738@export-env c4739@export-subst c473a@macro* c473b@invoke-code c473c@vis* c473d@inv* c473e@imp* c473f@ver c4740@name) ((lambda (c474a@id c474b@name c474c@ver c474d@imp* c474e@vis* c474f@inv* c4750@visit-proc c4751@invoke-proc c4752@visit-code c4753@invoke-code) (begin (c2add@c297c@install-library c474a@id c474b@name c474c@ver c474d@imp* c474e@vis* c474f@inv* c4739@export-subst c4738@export-env c4750@visit-proc c4751@invoke-proc c4752@visit-code c4753@invoke-code '#t c470b@filename) (values c474a@id c474b@name c474c@ver c474d@imp* c474e@vis* c474f@inv* c4753@invoke-code c4752@visit-code c4739@export-subst c4738@export-env))) (gensym) c4740@name c473f@ver (map c2ae3@c2988@library-spec c473e@imp*) (map c2ae3@c2988@library-spec c473c@vis*) (map c2ae3@c2988@library-spec c473d@inv*) (lambda () (c4713@visit! c473a@macro*)) (lambda () (eval-core (c28b9@c2871@expanded->core c473b@invoke-code))) (c4711@build-visit-code c473a@macro*) c473b@invoke-code)) c472e@c4725 c472d@c4723 c472c@c4721 c472b@c471f c472a@c471d c4729@c471b c4728@c4719 c4727@c4717 c4726@c4715))))) '#f '#f)) c4778) (if (= c4779 '2) (apply (lambda (c476e@x c476f@filename) (c2f91@library-expander c476e@x c476f@filename (lambda (c4772@x) (values)))) c4778) (if (= c4779 '1) (apply (lambda (c4774@x) (c2f91@library-expander c4774@x '#f (lambda (c4776@x) (values)))) c4778) (error 'apply '"invalid arg count"))))) (length c4778)))) (set! c2f93@boot-library-expand (lambda (c477a@x) (call-with-values (lambda () (c2f91@library-expander c477a@x)) (lambda (c4790@c477d c4791@c477f c4792@c4781 c4793@c4783 c4794@c4785 c4795@c4787 c4796@c4789 c4797@c478b c4798@c478d c4799@c478f) ((lambda (c47a4@export-env c47a5@export-subst c47a6@visit-code c47a7@invoke-code c47a8@inv* c47a9@vis* c47aa@imp* c47ab@ver c47ac@name c47ad@id) (values c47ac@name c47a7@invoke-code c47a5@export-subst c47a4@export-env)) c4799@c478f c4798@c478d c4797@c478b c4796@c4789 c4795@c4787 c4794@c4785 c4793@c4783 c4792@c4781 c4791@c477f c4790@c477d))))) (set! c2f95@rev-map-append (lambda (c47b8@f c47b9@ls c47ba@ac) (if (null? c47b9@ls) c47ba@ac (c2f95@rev-map-append c47b8@f (cdr c47b9@ls) (cons (c47b8@f (car c47b9@ls)) c47ba@ac))))) (set! c2f97@build-exports (lambda (c47be@lex*+loc* c47bf@init*) (c2c1a@c2b89@build-sequence '#f (cons (c2c1b@c2b8b@build-void) (c2f95@rev-map-append (lambda (c47c2@x) (list 'set! (cdr c47c2@x) (car c47c2@x))) c47be@lex*+loc* c47bf@init*))))) (set! c2f99@make-export-subst (lambda (c47c4@name* c47c5@id*) (map (lambda (c47c8@name c47c9@id) ((lambda (c47cc@label) (begin (if (not c47cc@label) (c2faf@syntax-violation '#f '"cannot export unbound identifier" c47c9@id) (void)) (cons c47c8@name c47cc@label))) (c2cd5@id->label c47c9@id))) c47c4@name* c47c5@id*))) (set! c2f9b@make-export-env/macros (lambda (c47ce@lex* c47cf@loc* c47d0@r) ((lambda (c47d5@lookup) (begin (set! c47d5@lookup (lambda (c47f2@x) ((letrec ((c47f4@f (lambda (c47f6@x c47f7@lex* c47f8@loc*) (if (pair? c47f7@lex*) (if (eq? c47f6@x (car c47f7@lex*)) (car c47f8@loc*) (c47f4@f c47f6@x (cdr c47f7@lex*) (cdr c47f8@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) c47f4@f) c47f2@x c47ce@lex* c47cf@loc*))) ((letrec ((c47d6@f (lambda (c47d8@r c47d9@env c47da@global* c47db@macro*) (if (null? c47d8@r) (values c47d9@env c47da@global* c47db@macro*) ((lambda (c47e0@x) ((lambda (c47e2@label c47e3@b) ((lambda (c47e6@t) (if (memv c47e6@t '(lexical)) ((lambda (c47e8@v) ((lambda (c47ea@loc c47eb@type) (c47d6@f (cdr c47d8@r) (cons (cons* c47e2@label c47eb@type c47ea@loc) c47d9@env) (cons (cons (c2e52@lexical-var c47e8@v) c47ea@loc) c47da@global*) c47db@macro*)) (c47d5@lookup (c2e52@lexical-var c47e8@v)) (if (c2e54@lexical-mutable? c47e8@v) 'mutable 'global))) (c2cdf@binding-value c47e3@b)) (if (memv c47e6@t '(local-macro)) ((lambda (c47ee@loc) (c47d6@f (cdr c47d8@r) (cons (cons* c47e2@label 'global-macro c47ee@loc) c47d9@env) c47da@global* (cons (cons c47ee@loc (c2cdf@binding-value c47e3@b)) c47db@macro*))) (gensym)) (if (memv c47e6@t '(local-macro!)) ((lambda (c47f0@loc) (c47d6@f (cdr c47d8@r) (cons (cons* c47e2@label 'global-macro! c47f0@loc) c47d9@env) c47da@global* (cons (cons c47f0@loc (c2cdf@binding-value c47e3@b)) c47db@macro*))) (gensym)) (if (memv c47e6@t '($rtd $module)) (c47d6@f (cdr c47d8@r) (cons c47e0@x c47d9@env) c47da@global* c47db@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (c2cdd@binding-type c47e3@b) (c2cdf@binding-value c47e3@b))))))) (c2cdd@binding-type c47e3@b))) (car c47e0@x) (cdr c47e0@x))) (car c47d8@r)))))) c47d6@f) c47d0@r '() '() '()))) '#f))) (set! c2f9d@generate-temporaries (lambda (c47fc@ls) ((lambda (c47fe@t) ((lambda (c4800@ls/false) (if c4800@ls/false (apply (lambda (c4802@ls) (map (lambda (c4804@x) (c2c85@make-stx ((lambda (c4806@x) (if (or (symbol? c4806@x) (string? c4806@x)) (gensym c4806@x) (gensym 't))) (c2fb5@syntax->datum c4804@x)) c2c37@top-mark* '() '())) c4802@ls)) c4800@ls/false) ((lambda (c4808@t) ((lambda (c480a@ls/false) (if c480a@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) c480a@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c4808@t))) (c2ec6@syntax-dispatch c4808@t '_))) c47fe@t))) (c2ec6@syntax-dispatch c47fe@t 'each-any))) c47fc@ls))) (set! c2f9f@free-identifier=? (lambda (c480c@x c480d@y) (if (c2cbb@id? c480c@x) (if (c2cbb@id? c480d@y) (c2cc3@free-id=? c480c@x c480d@y) (assertion-violation 'free-identifier=? '"not an identifier" c480d@y)) (assertion-violation 'free-identifier=? '"not an identifier" c480c@x)))) (set! c2fa1@bound-identifier=? (lambda (c4810@x c4811@y) (if (c2cbb@id? c4810@x) (if (c2cbb@id? c4811@y) (c2cc1@bound-id=? c4810@x c4811@y) (assertion-violation 'bound-identifier=? '"not an identifier" c4811@y)) (assertion-violation 'bound-identifier=? '"not an identifier" c4810@x)))) (set! c2fa3@make-source-condition (lambda (c4814@x) ((lambda (c481e@c4819 c4820@c481b c4822@c481a c4825@c4818 c4827@make-source-condition c4829@c4816 c482b@c4817 c482d@source-condition? c482f@source-filename c4831@source-character) (begin (set! c481e@c4819 (make-record-type-descriptor '&source-information c4c7c@c49c3@&condition-rtd 'c481c '#f '#f '#((immutable file-name) (immutable character)))) (set! c4820@c481b '#f) (set! c4822@c481a (make-record-constructor-descriptor c481e@c4819 c4c7d@c49c5@&condition-rcd c4820@c481b)) (set! c4825@c4818 (record-predicate c481e@c4819)) (set! c4827@make-source-condition (record-constructor c4822@c481a)) (set! c4829@c4816 (record-accessor c481e@c4819 '0)) (set! c482b@c4817 (record-accessor c481e@c4819 '1)) (set! c482d@source-condition? (condition-predicate c481e@c4819)) (set! c482f@source-filename (condition-accessor c481e@c4819 c4829@c4816)) (set! c4831@source-character (condition-accessor c481e@c4819 c482b@c4817)) (if (pair? c4814@x) (c4827@make-source-condition (car c4814@x) (cdr c4814@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! c2fa5@extract-position-condition (lambda (c4832@x) (c2fa3@make-source-condition (c2fa7@expression-position c4832@x)))) (set! c2fa7@expression-position (lambda (c4834@x) (and (c2c83@stx? c4834@x) ((lambda (c4836@x) (and (c285a@c2779@annotation? c4836@x) (c285b@c277b@annotation-source c4836@x))) (c2c87@stx-expr c4834@x))))) (set! c2fa9@assertion-error (lambda (c4838@expr c4839@pos) (raise (condition (c4cac@c4a87@make-assertion-violation) (c4cbe@c4ab9@make-who-condition 'assert) (c4c82@c4a1a@make-message-condition '"assertion failed") (c4cb4@c4a9e@make-irritants-condition (list c4838@expr)) (c2fa3@make-source-condition c4839@pos))))) (set! c2fab@syntax-error (lambda (c483c@x . c483e@args) (begin (if (not (for-all string? c483e@args)) (assertion-violation 'syntax-error '"invalid argument" c483e@args) (void)) (raise (condition (c4c82@c4a1a@make-message-condition (if (null? c483e@args) '"invalid syntax" (apply string-append c483e@args))) (c4ce0@c4b15@make-syntax-violation (c2fb5@syntax->datum c483c@x) '#f) (c2fa5@extract-position-condition c483c@x)))))) (set! c2fad@syntax-violation* (lambda (c4840@who c4841@msg c4842@form c4843@condition-object) (begin (if (not (string? c4841@msg)) (assertion-violation 'syntax-violation '"message is not a string" c4841@msg) (void)) ((lambda (c4848@who) (raise (condition (if c4848@who (c4cbe@c4ab9@make-who-condition c4848@who) (condition)) (c4c82@c4a1a@make-message-condition c4841@msg) c4843@condition-object (c2fa5@extract-position-condition c4842@form)))) (if (or (string? c4840@who) (symbol? c4840@who)) c4840@who (if (not c4840@who) ((lambda (c484a@t) ((lambda (c484c@ls/false) (if (and c484c@ls/false (apply (lambda (c484e@id) (c2cbb@id? c484e@id)) c484c@ls/false)) (apply (lambda (c4850@id) (c2fb5@syntax->datum c4850@id)) c484c@ls/false) ((lambda (c4852@t) ((lambda (c4854@ls/false) (if (and c4854@ls/false (apply (lambda (c4856@id c4857@rest) (c2cbb@id? c4856@id)) c4854@ls/false)) (apply (lambda (c485a@id c485b@rest) (c2fb5@syntax->datum c485a@id)) c4854@ls/false) ((lambda (c485e@t) ((lambda (c4860@ls/false) (if c4860@ls/false (apply (lambda () '#f) c4860@ls/false) (c2faf@syntax-violation '#f '"invalid syntax" c485e@t))) (c2ec6@syntax-dispatch c485e@t '_))) c4852@t))) (c2ec6@syntax-dispatch c4852@t '(any . any)))) c484a@t))) (c2ec6@syntax-dispatch c484a@t 'any))) c4842@form) (assertion-violation 'syntax-violation '"invalid who argument" c4840@who))))))) (set! c2faf@syntax-violation (lambda c4870 ((lambda (c4871) (if (= c4871 '3) (apply (lambda (c4862@who c4863@msg c4864@form) (c2faf@syntax-violation c4862@who c4863@msg c4864@form '#f)) c4870) (if (= c4871 '4) (apply (lambda (c4868@who c4869@msg c486a@form c486b@subform) (c2fad@syntax-violation* c4868@who c4869@msg c486a@form (c4ce0@c4b15@make-syntax-violation (c2fb5@syntax->datum c486a@form) (c2fb5@syntax->datum c486b@subform)))) c4870) (error 'apply '"invalid arg count")))) (length c4870)))) (set! c2fb1@identifier? (lambda (c4872@x) (c2cbb@id? c4872@x))) (set! c2fb3@datum->syntax (lambda (c4874@id c4875@datum) (if (c2cbb@id? c4874@id) (c2c99@datum->stx c4874@id c4875@datum) (assertion-violation 'datum->syntax '"not an identifier" c4874@id)))) (set! c2fb5@syntax->datum (lambda (c4878@x) (c2cd1@stx->datum c4878@x))) (set! c2fb7@compile-r6rs-top-level (lambda (c487a@x*) (call-with-values (lambda () (c2f41@top-level-expander c487a@x*)) (lambda (c4880@c487d c4881@c487f) ((lambda (c4884@invoke-code c4885@lib*) (lambda () (begin (for-each c2adf@c2980@invoke-library c4885@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (c28b9@c2871@expanded->core c4884@invoke-code)) (void)) (eval-core (c28b9@c2871@expanded->core c4884@invoke-code))))) c4881@c487f c4880@c487d))))) (set! c2fb9@pre-compile-r6rs-top-level (lambda (c4888@x*) (call-with-values (lambda () (c2f41@top-level-expander c4888@x*)) (lambda (c488e@c488b c488f@c488d) ((lambda (c4892@invoke-code c4893@lib*) (begin (for-each c2adf@c2980@invoke-library c4893@lib*) (c2863@c278b@compile-core (c28b9@c2871@expanded->core c4892@invoke-code)))) c488f@c488d c488e@c488b))))) (set! c2fbb@interaction-environment ((lambda (c4896@the-env) (lambda () (or c4896@the-env ((lambda (c4898@lib c4899@rib) (begin ((lambda (c489c@subst) (begin (c2c60@set-rib-sym*! c4899@rib (map car c489c@subst)) (c2c62@set-rib-mark**! c4899@rib (map (lambda (c489e@x) c2c37@top-mark*) c489c@subst)) (c2c64@set-rib-label*! c4899@rib (map cdr c489c@subst)))) (c2ab4@c292a@library-subst c4898@lib)) ((lambda (c48a0@env) (begin (set! c4896@the-env c48a0@env) c48a0@env)) (c2f6d@make-interaction-env c4899@rib '() '())))) (c2ad8@c2972@find-library-by-name '(mosh interaction)) (c2c6a@make-empty-rib))))) '#f)) (set! c2fbd@top-level-context (c2865@c278f@make-parameter '#f)) (begin (set! c49ae@c2fbd@top-level-context c2fbd@top-level-context) (set! c49ad@c2fbb@interaction-environment c2fbb@interaction-environment) (set! c49ac@c2fb9@pre-compile-r6rs-top-level c2fb9@pre-compile-r6rs-top-level) (set! c49ab@c2fb7@compile-r6rs-top-level c2fb7@compile-r6rs-top-level) (set! c49aa@c2fb5@syntax->datum c2fb5@syntax->datum) (set! c49a9@c2fb3@datum->syntax c2fb3@datum->syntax) (set! c49a8@c2fb1@identifier? c2fb1@identifier?) (set! c49a7@c2faf@syntax-violation c2faf@syntax-violation) (set! c49a6@c2fad@syntax-violation* c2fad@syntax-violation*) (set! c49a5@c2fab@syntax-error c2fab@syntax-error) (set! c49a4@c2fa9@assertion-error c2fa9@assertion-error) (set! c49a3@c2fa7@expression-position c2fa7@expression-position) (set! c49a2@c2fa5@extract-position-condition c2fa5@extract-position-condition) (set! c49a1@c2fa3@make-source-condition c2fa3@make-source-condition) (set! c49a0@c2fa1@bound-identifier=? c2fa1@bound-identifier=?) (set! c499f@c2f9f@free-identifier=? c2f9f@free-identifier=?) (set! c499e@c2f9d@generate-temporaries c2f9d@generate-temporaries) (set! c499d@c2f9b@make-export-env/macros c2f9b@make-export-env/macros) (set! c499c@c2f99@make-export-subst c2f99@make-export-subst) (set! c499b@c2f97@build-exports c2f97@build-exports) (set! c499a@c2f95@rev-map-append c2f95@rev-map-append) (set! c4999@c2f93@boot-library-expand c2f93@boot-library-expand) (set! c4998@c2f91@library-expander c2f91@library-expander) (set! c4997@c2f8f@eval c2f8f@eval) (set! c4996@c2f8d@expand c2f8d@expand) (set! c4995@c2f8b@scheme-report-environment c2f8b@scheme-report-environment) (set! c4994@c2f89@null-environment c2f89@null-environment) (set! c4993@c2f87@environment c2f87@environment) (set! c4992@c2f85@environment-symbols c2f85@environment-symbols) (set! c4991@c2f83@environment? c2f83@environment?) (set! c4990@c2f81@parse-binding c2f81@parse-binding) (set! c498f@c2f7f@environment-bindings c2f7f@environment-bindings) (set! c498e@c2f7d@interaction-environment-symbols c2f7d@interaction-environment-symbols) (set! c498d@c2f7b@rp c2f7b@rp) (set! c498c@c2f79@set-interaction-env-locs! c2f79@set-interaction-env-locs!) (set! c498b@c2f77@set-interaction-env-r! c2f77@set-interaction-env-r!) (set! c498a@c2f75@set-interaction-env-rib! c2f75@set-interaction-env-rib!) (set! c4989@c2f73@interaction-env-locs c2f73@interaction-env-locs) (set! c4988@c2f71@interaction-env-r c2f71@interaction-env-r) (set! c4987@c2f6f@interaction-env-rib c2f6f@interaction-env-rib) (set! c4986@c2f6d@make-interaction-env c2f6d@make-interaction-env) (set! c4985@c2f6b@interaction-env? c2f6b@interaction-env?) (set! c4984@c2f68@c2f60 c2f68@c2f60) (set! c4983@c2f66@c2f61 c2f66@c2f61) (set! c4982@c2f64@c2f5f c2f64@c2f5f) (set! c4981@c2f5e@rp c2f5e@rp) (set! c4980@c2f5c@set-env-itc! c2f5c@set-env-itc!) (set! c497f@c2f5a@set-env-labels! c2f5a@set-env-labels!) (set! c497e@c2f58@set-env-names! c2f58@set-env-names!) (set! c497d@c2f56@env-itc c2f56@env-itc) (set! c497c@c2f54@env-labels c2f54@env-labels) (set! c497b@c2f52@env-names c2f52@env-names) (set! c497a@c2f50@make-env c2f50@make-env) (set! c4979@c2f4e@env? c2f4e@env?) (set! c4978@c2f4b@c2f43 c2f4b@c2f43) (set! c4977@c2f49@c2f44 c2f49@c2f44) (set! c4976@c2f47@c2f42 c2f47@c2f42) (set! c4975@c2f41@top-level-expander c2f41@top-level-expander) (set! c4974@c2f3f@parse-top-level-program c2f3f@parse-top-level-program) (set! c4973@c2f3d@core-library-expander c2f3d@core-library-expander) (set! c4972@c2f3b@library-body-expander c2f3b@library-body-expander) (set! c4971@c2f39@chi-interaction-expr c2f39@chi-interaction-expr) (set! c4970@c2f37@chi-library-internal c2f37@chi-library-internal) (set! c496f@c2f35@imp-collector c2f35@imp-collector) (set! c496e@c2f33@vis-collector c2f33@vis-collector) (set! c496d@c2f31@inv-collector c2f31@inv-collector) (set! c496c@c2f2f@make-collector c2f2f@make-collector) (set! c496b@c2f2d@make-top-rib c2f2d@make-top-rib) (set! c496a@c2f2b@parse-import-spec* c2f2b@parse-import-spec*) (set! c4969@c2f29@parse-library c2f29@parse-library) (set! c4968@c2f27@parse-library-name c2f27@parse-library-name) (set! c4967@c2f25@parse-exports c2f25@parse-exports) (set! c4966@c2f23@expand-transformer c2f23@expand-transformer) (set! c4965@c2f21@chi-body* c2f21@chi-body*) (set! c4964@c2f1f@chi-internal-module c2f1f@chi-internal-module) (set! c4963@c2f1d@module-interface-exp-id* c2f1d@module-interface-exp-id*) (set! c4962@c2f1b@set-module-interface-exp-lab-vec! c2f1b@set-module-interface-exp-lab-vec!) (set! c4961@c2f19@set-module-interface-exp-id-vec! c2f19@set-module-interface-exp-id-vec!) (set! c4960@c2f17@set-module-interface-first-mark! c2f17@set-module-interface-first-mark!) (set! c495f@c2f15@module-interface-exp-lab-vec c2f15@module-interface-exp-lab-vec) (set! c495e@c2f13@module-interface-exp-id-vec c2f13@module-interface-exp-id-vec) (set! c495d@c2f11@module-interface-first-mark c2f11@module-interface-first-mark) (set! c495c@c2f0f@make-module-interface c2f0f@make-module-interface) (set! c495b@c2f0d@module-interface? c2f0d@module-interface?) (set! c495a@c2f0a@c2f02 c2f0a@c2f02) (set! c4959@c2f08@c2f03 c2f08@c2f03) (set! c4958@c2f06@c2f01 c2f06@c2f01) (set! c4957@c2f00@parse-module c2f00@parse-module) (set! c4956@c2efe@chi-internal c2efe@chi-internal) (set! c4955@c2efc@find-dups c2efc@find-dups) (set! c4954@c2efa@find-bound=? c2efa@find-bound=?) (set! c4953@c2ef8@chi-rhs* c2ef8@chi-rhs*) (set! c4952@c2ef6@expand-interaction-rhs*/init* c2ef6@expand-interaction-rhs*/init*) (set! c4951@c2ef4@chi-rhs c2ef4@chi-rhs) (set! c4950@c2ef2@chi-defun c2ef2@chi-defun) (set! c494f@c2ef0@chi-lambda-clause* c2ef0@chi-lambda-clause*) (set! c494e@c2eee@chi-lambda-clause c2eee@chi-lambda-clause) (set! c494d@c2eec@verify-formals c2eec@verify-formals) (set! c494c@c2eea@chi-set! c2eea@chi-set!) (set! c494b@c2ee8@chi-expr c2ee8@chi-expr) (set! c494a@c2ee6@chi-application c2ee6@chi-application) (set! c4949@c2ee4@chi-expr* c2ee4@chi-expr*) (set! c4948@c2ee2@chi-global-macro c2ee2@chi-global-macro) (set! c4947@c2ee0@chi-local-macro c2ee0@chi-local-macro) (set! c4946@c2ede@chi-macro c2ede@chi-macro) (set! c4945@c2edc@do-macro-call c2edc@do-macro-call) (set! c4944@c2eda@local-macro-transformer c2eda@local-macro-transformer) (set! c4943@c2ed8@macro-transformer c2ed8@macro-transformer) (set! c4942@c2ed6@symbol-macro c2ed6@symbol-macro) (set! c4941@c2ed4@core-macro-transformer c2ed4@core-macro-transformer) (set! c4940@c2ed2@syntax-transformer c2ed2@syntax-transformer) (set! c493f@c2ed0@ellipsis-map c2ed0@ellipsis-map) (set! c493e@c2ece@syntax-case-transformer c2ece@syntax-case-transformer) (set! c493d@c2ecc@verify-literals c2ecc@verify-literals) (set! c493c@c2eca@underscore? c2eca@underscore?) (set! c493b@c2ec8@ellipsis? c2ec8@ellipsis?) (set! c493a@c2ec6@syntax-dispatch c2ec6@syntax-dispatch) (set! c4939@c2ec4@convert-pattern c2ec4@convert-pattern) (set! c4938@c2ec2@foreign-call-transformer c2ec2@foreign-call-transformer) (set! c4937@c2ec0@parameterize-macro c2ec0@parameterize-macro) (set! c4936@c2ebe@incorrect-usage-macro c2ebe@incorrect-usage-macro) (set! c4935@c2ebc@define-condition-type-macro c2ebc@define-condition-type-macro) (set! c4934@c2eba@define-record-type-macro c2eba@define-record-type-macro) (set! c4933@c2eb8@define-struct-macro c2eb8@define-struct-macro) (set! c4932@c2eb6@quasisyntax-macro c2eb6@quasisyntax-macro) (set! c4931@c2eb4@quasiquote-macro c2eb4@quasiquote-macro) (set! c4930@c2eb2@syntax-rules-macro c2eb2@syntax-rules-macro) (set! c492f@c2eb0@include-into-macro c2eb0@include-into-macro) (set! c492e@c2eae@include-macro c2eae@include-macro) (set! c492d@c2eac@do-include c2eac@do-include) (set! c492c@c2eaa@cond-macro c2eaa@cond-macro) (set! c492b@c2ea8@and-macro c2ea8@and-macro) (set! c492a@c2ea6@or-macro c2ea6@or-macro) (set! c4929@c2ea4@let*-macro c2ea4@let*-macro) (set! c4928@c2ea2@do-macro c2ea2@do-macro) (set! c4927@c2ea0@identifier-syntax-macro c2ea0@identifier-syntax-macro) (set! c4926@c2e9e@endianness-macro c2e9e@endianness-macro) (set! c4925@c2e9c@assert-macro c2e9c@assert-macro) (set! c4924@c2e9a@delay-macro c2e9a@delay-macro) (set! c4923@c2e98@time-macro c2e98@time-macro) (set! c4922@c2e96@define-enumeration-macro c2e96@define-enumeration-macro) (set! c4921@c2e94@guard-macro c2e94@guard-macro) (set! c4920@c2e92@trace-letrec-syntax-macro c2e92@trace-letrec-syntax-macro) (set! c491f@c2e90@trace-let-syntax-macro c2e90@trace-let-syntax-macro) (set! c491e@c2e8e@trace-let/rec-syntax c2e8e@trace-let/rec-syntax) (set! c491d@c2e8c@trace-define-syntax-macro c2e8c@trace-define-syntax-macro) (set! c491c@c2e8a@trace-define-macro c2e8a@trace-define-macro) (set! c491b@c2e88@trace-lambda-macro c2e88@trace-lambda-macro) (set! c491a@c2e86@let*-values-macro c2e86@let*-values-macro) (set! c4919@c2e84@let-values-macro c2e84@let-values-macro) (set! c4918@c2e82@let-macro c2e82@let-macro) (set! c4917@c2e80@invalid-fmls-error c2e80@invalid-fmls-error) (set! c4916@c2e7e@with-syntax-macro c2e7e@with-syntax-macro) (set! c4915@c2e7c@bless c2e7c@bless) (set! c4914@c2e7a@lambda-transformer c2e7a@lambda-transformer) (set! c4913@c2e78@case-lambda-transformer c2e78@case-lambda-transformer) (set! c4912@c2e76@quote-transformer c2e76@quote-transformer) (set! c4911@c2e74@case-macro c2e74@case-macro) (set! c4910@c2e72@or-transformer c2e72@or-transformer) (set! c490f@c2e70@and-transformer c2e70@and-transformer) (set! c490e@c2e6e@if-transformer c2e6e@if-transformer) (set! c490d@c2e6c@unless-macro c2e6c@unless-macro) (set! c490c@c2e6a@when-macro c2e6a@when-macro) (set! c490b@c2e68@record-constructor-descriptor-transformer c2e68@record-constructor-descriptor-transformer) (set! c490a@c2e66@record-type-descriptor-transformer c2e66@record-type-descriptor-transformer) (set! c4909@c2e64@type-descriptor-transformer c2e64@type-descriptor-transformer) (set! c4908@c2e62@fluid-let-syntax-transformer c2e62@fluid-let-syntax-transformer) (set! c4907@c2e60@letrec*-transformer c2e60@letrec*-transformer) (set! c4906@c2e5e@letrec-transformer c2e5e@letrec-transformer) (set! c4905@c2e5c@letrec-helper c2e5c@letrec-helper) (set! c4904@c2e5a@add-lexicals c2e5a@add-lexicals) (set! c4903@c2e58@add-lexical c2e58@add-lexical) (set! c4902@c2e56@set-lexical-mutable! c2e56@set-lexical-mutable!) (set! c4901@c2e54@lexical-mutable? c2e54@lexical-mutable?) (set! c4900@c2e52@lexical-var c2e52@lexical-var) (set! c48ff@c2e50@scheme-stx c2e50@scheme-stx) (set! c48fe@c2e4e@scheme-stx-hashtable c2e4e@scheme-stx-hashtable) (set! c48fd@c2e4c@parse-define-syntax c2e4c@parse-define-syntax) (set! c48fc@c2e4a@parse-define c2e4a@parse-define) (set! c48fb@c2cf9@make-eval-transformer c2cf9@make-eval-transformer) (set! c48fa@c2cf7@variable-transformer-procedure c2cf7@variable-transformer-procedure) (set! c48f9@c2cf5@variable-transformer? c2cf5@variable-transformer?) (set! c48f8@c2cf3@make-variable-transformer c2cf3@make-variable-transformer) (set! c48f7@c2cf1@sanitize-binding c2cf1@sanitize-binding) (set! c48f6@c2ce3@syntax-type c2ce3@syntax-type) (set! c48f5@c2ce1@raise-unbound-error c2ce1@raise-unbound-error) (set! c48f4@c2cdf@binding-value c2cdf@binding-value) (set! c48f3@c2cdd@binding-type c2cdd@binding-type) (set! c48f2@c2cdb@make-binding c2cdb@make-binding) (set! c48f1@c2cd9@label->binding c2cd9@label->binding) (set! c48f0@c2cd7@id->real-label c2cd7@id->real-label) (set! c48ef@c2cd5@id->label c2cd5@id->label) (set! c48ee@c2cd3@same-marks*? c2cd3@same-marks*?) (set! c48ed@c2cd1@stx->datum c2cd1@stx->datum) (set! c48ec@c2ccf@strip c2ccf@strip) (set! c48eb@c2ccd@strip-annotations c2ccd@strip-annotations) (set! c48ea@c2ccb@self-evaluating? c2ccb@self-evaluating?) (set! c48e9@c2cc9@bound-id-member? c2cc9@bound-id-member?) (set! c48e8@c2cc7@distinct-bound-ids? c2cc7@distinct-bound-ids?) (set! c48e7@c2cc5@valid-bound-ids? c2cc5@valid-bound-ids?) (set! c48e6@c2cc3@free-id=? c2cc3@free-id=?) (set! c48e5@c2cc1@bound-id=? c2cc1@bound-id=?) (set! c48e4@c2cbf@same-marks? c2cbf@same-marks?) (set! c48e3@c2cbd@id->sym c2cbd@id->sym) (set! c48e2@c2cbb@id? c2cbb@id?) (set! c48e1@c2cb9@syntax->list c2cb9@syntax->list) (set! c48e0@c2cb7@syntax-cdr c2cb7@syntax-cdr) (set! c48df@c2cb5@syntax-car c2cb5@syntax-car) (set! c48de@c2cb3@syntax-list? c2cb3@syntax-list?) (set! c48dd@c2cb1@syntax-null? c2cb1@syntax-null?) (set! c48dc@c2caf@syntax-vector? c2caf@syntax-vector?) (set! c48db@c2cad@syntax-pair? c2cad@syntax-pair?) (set! c48da@c2cab@syntax-vector->list c2cab@syntax-vector->list) (set! c48d9@c2ca9@syntax-kind? c2ca9@syntax-kind?) (set! c48d8@c2ca7@add-subst c2ca7@add-subst) (set! c48d7@c2ca5@add-mark c2ca5@add-mark) (set! c48d6@c2ca3@mkstx c2ca3@mkstx) (set! c48d5@c2ca1@join-wraps c2ca1@join-wraps) (set! c48d4@c2c9f@anti-mark? c2c9f@anti-mark?) (set! c48d3@c2c9d@anti-mark c2c9d@anti-mark) (set! c48d2@c2c9b@gen-mark c2c9b@gen-mark) (set! c48d1@c2c99@datum->stx c2c99@datum->stx) (set! c48d0@c2c97@rp c2c97@rp) (set! c48cf@c2c95@set-stx-ae*! c2c95@set-stx-ae*!) (set! c48ce@c2c93@set-stx-subst*! c2c93@set-stx-subst*!) (set! c48cd@c2c91@set-stx-mark*! c2c91@set-stx-mark*!) (set! c48cc@c2c8f@set-stx-expr! c2c8f@set-stx-expr!) (set! c48cb@c2c8d@stx-ae* c2c8d@stx-ae*) (set! c48ca@c2c8b@stx-subst* c2c8b@stx-subst*) (set! c48c9@c2c89@stx-mark* c2c89@stx-mark*) (set! c48c8@c2c87@stx-expr c2c87@stx-expr) (set! c48c7@c2c85@make-stx c2c85@make-stx) (set! c48c6@c2c83@stx? c2c83@stx?) (set! c48c5@c2c80@c2c78 c2c80@c2c78) (set! c48c4@c2c7e@c2c79 c2c7e@c2c79) (set! c48c3@c2c7c@c2c77 c2c7c@c2c77) (set! c48c2@c2c76@make-full-rib c2c76@make-full-rib) (set! c48c1@c2c74@unseal-rib! c2c74@unseal-rib!) (set! c48c0@c2c72@seal-rib! c2c72@seal-rib!) (set! c48bf@c2c70@make-rib-map c2c70@make-rib-map) (set! c48be@c2c6e@extend-rib/nc! c2c6e@extend-rib/nc!) (set! c48bd@c2c6c@extend-rib! c2c6c@extend-rib!) (set! c48bc@c2c6a@make-empty-rib c2c6a@make-empty-rib) (set! c48bb@c2c68@set-rib-cache! c2c68@set-rib-cache!) (set! c48ba@c2c66@set-rib-sealed/freq! c2c66@set-rib-sealed/freq!) (set! c48b9@c2c64@set-rib-label*! c2c64@set-rib-label*!) (set! c48b8@c2c62@set-rib-mark**! c2c62@set-rib-mark**!) (set! c48b7@c2c60@set-rib-sym*! c2c60@set-rib-sym*!) (set! c48b6@c2c5e@rib-cache c2c5e@rib-cache) (set! c48b5@c2c5c@rib-sealed/freq c2c5c@rib-sealed/freq) (set! c48b4@c2c5a@rib-label* c2c5a@rib-label*) (set! c48b3@c2c58@rib-mark** c2c58@rib-mark**) (set! c48b2@c2c56@rib-sym* c2c56@rib-sym*) (set! c48b1@c2c54@make-rib c2c54@make-rib) (set! c48b0@c2c52@rib? c2c52@rib?) (set! c48af@c2c4f@c2c47 c2c4f@c2c47) (set! c48ae@c2c4d@c2c48 c2c4d@c2c48) (set! c48ad@c2c4b@c2c46 c2c4b@c2c46) (set! c48ac@c2c45@gen-define-label c2c45@gen-define-label) (set! c48ab@c2c43@gen-define-label+loc c2c43@gen-define-label+loc) (set! c48aa@c2c41@gen-top-level-label c2c41@gen-top-level-label) (set! c48a9@c2c3f@gen-label c2c3f@gen-label) (set! c48a8@c2c3d@gen-global c2c3d@gen-global) (set! c48a7@c2c3b@gen-lexical c2c3b@gen-lexical) (set! c48a6@c2c39@top-marked? c2c39@top-marked?) (set! c48a5@c2c37@top-mark* c2c37@top-mark*) (set! c48a4@c2c32@set-union c2c32@set-union) (set! c48a3@c2c30@set-cons c2c30@set-cons) (set! c48a2@c2c2e@file-options-macro c2c2e@file-options-macro) (c2ad5@c296c@current-library-expander c2f91@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (c49b8@c49b3 c49ba@c49b5 c49bc@c49b4 c49bf@&condition? c49c1@make-&condition c49c3@&condition-rtd c49c5@&condition-rcd c4a11@c4a0c c4a13@c4a0e c4a15@c4a0d c4a18@p? c4a1a@make-message-condition c4a1c@c4a0b c4a1e@message-condition? c4a20@condition-message c4a22@&message-rtd c4a24@&message-rcd c4a2a@c4a25 c4a2c@c4a27 c4a2e@c4a26 c4a31@p? c4a33@make-warning c4a35@warning? c4a37@&warning-rtd c4a39@&warning-rcd c4a3f@c4a3a c4a41@c4a3c c4a43@c4a3b c4a46@p? c4a48@make-serious-condition c4a4a@serious-condition? c4a4c@&serious-rtd c4a4e@&serious-rcd c4a54@c4a4f c4a56@c4a51 c4a58@c4a50 c4a5b@p? c4a5d@make-error c4a5f@error? c4a61@&error-rtd c4a63@&error-rcd c4a69@c4a64 c4a6b@c4a66 c4a6d@c4a65 c4a70@p? c4a72@make-violation c4a74@violation? c4a76@&violation-rtd c4a78@&violation-rcd c4a7e@c4a79 c4a80@c4a7b c4a82@c4a7a c4a85@p? c4a87@make-assertion-violation c4a89@assertion-violation? c4a8b@&assertion-rtd c4a8d@&assertion-rcd c4a95@c4a90 c4a97@c4a92 c4a99@c4a91 c4a9c@p? c4a9e@make-irritants-condition c4aa0@c4a8f c4aa2@irritants-condition? c4aa4@condition-irritants c4aa6@&irritants-rtd c4aa8@&irritants-rcd c4ab0@c4aab c4ab2@c4aad c4ab4@c4aac c4ab7@p? c4ab9@make-who-condition c4abb@c4aaa c4abd@who-condition? c4abf@condition-who c4ac1@&who-rtd c4ac3@&who-rcd c4ac9@c4ac4 c4acb@c4ac6 c4acd@c4ac5 c4ad0@p? c4ad2@make-non-continuable-violation c4ad4@non-continuable-violation? c4ad6@&non-continuable-rtd c4ad8@&non-continuable-rcd c4ade@c4ad9 c4ae0@c4adb c4ae2@c4ada c4ae5@p? c4ae7@make-implementation-restriction-violation c4ae9@implementation-restriction-violation? c4aeb@&implementation-restriction-rtd c4aed@&implementation-restriction-rcd c4af3@c4aee c4af5@c4af0 c4af7@c4aef c4afa@p? c4afc@make-lexical-violation c4afe@lexical-violation? c4b00@&lexical-rtd c4b02@&lexical-rcd c4b0c@c4b07 c4b0e@c4b09 c4b10@c4b08 c4b13@p? c4b15@make-syntax-violation c4b17@c4b04 c4b19@c4b06 c4b1b@syntax-violation? c4b1d@syntax-violation-form c4b1f@syntax-violation-subform c4b21@&syntax-rtd c4b23@&syntax-rcd c4b29@c4b24 c4b2b@c4b26 c4b2d@c4b25 c4b30@p? c4b32@make-undefined-violation c4b34@undefined-violation? c4b36@&undefined-rtd c4b38@&undefined-rcd c4b3e@c4b39 c4b40@c4b3b c4b42@c4b3a c4b45@p? c4b47@make-i/o-error c4b49@i/o-error? c4b4b@&i/o-rtd c4b4d@&i/o-rcd c4b53@c4b4e c4b55@c4b50 c4b57@c4b4f c4b5a@p? c4b5c@make-i/o-read-error c4b5e@i/o-read-error? c4b60@&i/o-read-rtd c4b62@&i/o-read-rcd c4b68@c4b63 c4b6a@c4b65 c4b6c@c4b64 c4b6f@p? c4b71@make-i/o-write-error c4b73@i/o-write-error? c4b75@&i/o-write-rtd c4b77@&i/o-write-rcd c4b7f@c4b7a c4b81@c4b7c c4b83@c4b7b c4b86@p? c4b88@make-i/o-invalid-position-error c4b8a@c4b79 c4b8c@i/o-invalid-position-error? c4b8e@i/o-error-position c4b90@&i/o-invalid-position-rtd c4b92@&i/o-invalid-position-rcd c4b9a@c4b95 c4b9c@c4b97 c4b9e@c4b96 c4ba1@p? c4ba3@make-i/o-filename-error c4ba5@c4b94 c4ba7@i/o-filename-error? c4ba9@i/o-error-filename c4bab@&i/o-filename-rtd c4bad@&i/o-filename-rcd c4bb3@c4bae c4bb5@c4bb0 c4bb7@c4baf c4bba@p? c4bbc@make-i/o-file-protection-error c4bbe@i/o-file-protection-error? c4bc0@&i/o-file-protection-rtd c4bc2@&i/o-file-protection-rcd c4bc8@c4bc3 c4bca@c4bc5 c4bcc@c4bc4 c4bcf@p? c4bd1@make-i/o-file-is-read-only-error c4bd3@i/o-file-is-read-only-error? c4bd5@&i/o-file-is-read-only-rtd c4bd7@&i/o-file-is-read-only-rcd c4bdd@c4bd8 c4bdf@c4bda c4be1@c4bd9 c4be4@p? c4be6@make-i/o-file-already-exists-error c4be8@i/o-file-already-exists-error? c4bea@&i/o-file-already-exists-rtd c4bec@&i/o-file-already-exists-rcd c4bf2@c4bed c4bf4@c4bef c4bf6@c4bee c4bf9@p? c4bfb@make-i/o-file-does-not-exist-error c4bfd@i/o-file-does-not-exist-error? c4bff@&i/o-file-does-not-exist-rtd c4c01@&i/o-file-does-not-exist-rcd c4c09@c4c04 c4c0b@c4c06 c4c0d@c4c05 c4c10@p? c4c12@make-i/o-port-error c4c14@c4c03 c4c16@i/o-port-error? c4c18@i/o-error-port c4c1a@&i/o-port-rtd c4c1c@&i/o-port-rcd c4c22@c4c1d c4c24@c4c1f c4c26@c4c1e c4c29@p? c4c2b@make-i/o-decoding-error c4c2d@i/o-decoding-error? c4c2f@&i/o-decoding-rtd c4c31@&i/o-decoding-rcd c4c39@c4c34 c4c3b@c4c36 c4c3d@c4c35 c4c40@p? c4c42@make-i/o-encoding-error c4c44@c4c33 c4c46@i/o-encoding-error? c4c48@i/o-encoding-error-char c4c4a@&i/o-encoding-rtd c4c4c@&i/o-encoding-rcd c4c52@c4c4d c4c54@c4c4f c4c56@c4c4e c4c59@p? c4c5b@make-no-infinities-violation c4c5d@no-infinities-violation? c4c5f@&no-infinities-rtd c4c61@&no-infinities-rcd c4c67@c4c62 c4c69@c4c64 c4c6b@c4c63 c4c6e@p? c4c70@make-no-nans-violation c4c72@no-nans-violation? c4c74@&no-nans-rtd c4c76@&no-nans-rcd) (begin (set! c49b8@c49b3 (make-record-type-descriptor '&condition '#f 'c49b6 '#f '#f '#())) (set! c49ba@c49b5 '#f) (set! c49bc@c49b4 (make-record-constructor-descriptor c49b8@c49b3 '#f c49ba@c49b5)) (set! c49bf@&condition? (record-predicate c49b8@c49b3)) (set! c49c1@make-&condition (record-constructor c49bc@c49b4)) (set! c49c3@&condition-rtd c49b8@c49b3) (set! c49c5@&condition-rcd c49bc@c49b4) (set! c4a11@c4a0c (make-record-type-descriptor '&message c49b8@c49b3 'c4a0f '#f '#f '#((immutable message)))) (set! c4a13@c4a0e '#f) (set! c4a15@c4a0d (make-record-constructor-descriptor c4a11@c4a0c c49bc@c49b4 c4a13@c4a0e)) (set! c4a18@p? (record-predicate c4a11@c4a0c)) (set! c4a1a@make-message-condition (record-constructor c4a15@c4a0d)) (set! c4a1c@c4a0b (record-accessor c4a11@c4a0c '0)) (set! c4a1e@message-condition? (condition-predicate c4a11@c4a0c)) (set! c4a20@condition-message (condition-accessor c4a11@c4a0c c4a1c@c4a0b)) (set! c4a22@&message-rtd c4a11@c4a0c) (set! c4a24@&message-rcd c4a15@c4a0d) (set! c4a2a@c4a25 (make-record-type-descriptor '&warning c49b8@c49b3 'c4a28 '#f '#f '#())) (set! c4a2c@c4a27 '#f) (set! c4a2e@c4a26 (make-record-constructor-descriptor c4a2a@c4a25 c49bc@c49b4 c4a2c@c4a27)) (set! c4a31@p? (record-predicate c4a2a@c4a25)) (set! c4a33@make-warning (record-constructor c4a2e@c4a26)) (set! c4a35@warning? (condition-predicate c4a2a@c4a25)) (set! c4a37@&warning-rtd c4a2a@c4a25) (set! c4a39@&warning-rcd c4a2e@c4a26) (set! c4a3f@c4a3a (make-record-type-descriptor '&serious c49b8@c49b3 'c4a3d '#f '#f '#())) (set! c4a41@c4a3c '#f) (set! c4a43@c4a3b (make-record-constructor-descriptor c4a3f@c4a3a c49bc@c49b4 c4a41@c4a3c)) (set! c4a46@p? (record-predicate c4a3f@c4a3a)) (set! c4a48@make-serious-condition (record-constructor c4a43@c4a3b)) (set! c4a4a@serious-condition? (condition-predicate c4a3f@c4a3a)) (set! c4a4c@&serious-rtd c4a3f@c4a3a) (set! c4a4e@&serious-rcd c4a43@c4a3b) (set! c4a54@c4a4f (make-record-type-descriptor '&error c4a3f@c4a3a 'c4a52 '#f '#f '#())) (set! c4a56@c4a51 '#f) (set! c4a58@c4a50 (make-record-constructor-descriptor c4a54@c4a4f c4a43@c4a3b c4a56@c4a51)) (set! c4a5b@p? (record-predicate c4a54@c4a4f)) (set! c4a5d@make-error (record-constructor c4a58@c4a50)) (set! c4a5f@error? (condition-predicate c4a54@c4a4f)) (set! c4a61@&error-rtd c4a54@c4a4f) (set! c4a63@&error-rcd c4a58@c4a50) (set! c4a69@c4a64 (make-record-type-descriptor '&violation c4a3f@c4a3a 'c4a67 '#f '#f '#())) (set! c4a6b@c4a66 '#f) (set! c4a6d@c4a65 (make-record-constructor-descriptor c4a69@c4a64 c4a43@c4a3b c4a6b@c4a66)) (set! c4a70@p? (record-predicate c4a69@c4a64)) (set! c4a72@make-violation (record-constructor c4a6d@c4a65)) (set! c4a74@violation? (condition-predicate c4a69@c4a64)) (set! c4a76@&violation-rtd c4a69@c4a64) (set! c4a78@&violation-rcd c4a6d@c4a65) (set! c4a7e@c4a79 (make-record-type-descriptor '&assertion c4a69@c4a64 'c4a7c '#f '#f '#())) (set! c4a80@c4a7b '#f) (set! c4a82@c4a7a (make-record-constructor-descriptor c4a7e@c4a79 c4a6d@c4a65 c4a80@c4a7b)) (set! c4a85@p? (record-predicate c4a7e@c4a79)) (set! c4a87@make-assertion-violation (record-constructor c4a82@c4a7a)) (set! c4a89@assertion-violation? (condition-predicate c4a7e@c4a79)) (set! c4a8b@&assertion-rtd c4a7e@c4a79) (set! c4a8d@&assertion-rcd c4a82@c4a7a) (set! c4a95@c4a90 (make-record-type-descriptor '&irritants c49b8@c49b3 'c4a93 '#f '#f '#((immutable irritants)))) (set! c4a97@c4a92 '#f) (set! c4a99@c4a91 (make-record-constructor-descriptor c4a95@c4a90 c49bc@c49b4 c4a97@c4a92)) (set! c4a9c@p? (record-predicate c4a95@c4a90)) (set! c4a9e@make-irritants-condition (record-constructor c4a99@c4a91)) (set! c4aa0@c4a8f (record-accessor c4a95@c4a90 '0)) (set! c4aa2@irritants-condition? (condition-predicate c4a95@c4a90)) (set! c4aa4@condition-irritants (condition-accessor c4a95@c4a90 c4aa0@c4a8f)) (set! c4aa6@&irritants-rtd c4a95@c4a90) (set! c4aa8@&irritants-rcd c4a99@c4a91) (set! c4ab0@c4aab (make-record-type-descriptor '&who c49b8@c49b3 'c4aae '#f '#f '#((immutable who)))) (set! c4ab2@c4aad '#f) (set! c4ab4@c4aac (make-record-constructor-descriptor c4ab0@c4aab c49bc@c49b4 c4ab2@c4aad)) (set! c4ab7@p? (record-predicate c4ab0@c4aab)) (set! c4ab9@make-who-condition (record-constructor c4ab4@c4aac)) (set! c4abb@c4aaa (record-accessor c4ab0@c4aab '0)) (set! c4abd@who-condition? (condition-predicate c4ab0@c4aab)) (set! c4abf@condition-who (condition-accessor c4ab0@c4aab c4abb@c4aaa)) (set! c4ac1@&who-rtd c4ab0@c4aab) (set! c4ac3@&who-rcd c4ab4@c4aac) (set! c4ac9@c4ac4 (make-record-type-descriptor '&non-continuable c4a69@c4a64 'c4ac7 '#f '#f '#())) (set! c4acb@c4ac6 '#f) (set! c4acd@c4ac5 (make-record-constructor-descriptor c4ac9@c4ac4 c4a6d@c4a65 c4acb@c4ac6)) (set! c4ad0@p? (record-predicate c4ac9@c4ac4)) (set! c4ad2@make-non-continuable-violation (record-constructor c4acd@c4ac5)) (set! c4ad4@non-continuable-violation? (condition-predicate c4ac9@c4ac4)) (set! c4ad6@&non-continuable-rtd c4ac9@c4ac4) (set! c4ad8@&non-continuable-rcd c4acd@c4ac5) (set! c4ade@c4ad9 (make-record-type-descriptor '&implementation-restriction c4a69@c4a64 'c4adc '#f '#f '#())) (set! c4ae0@c4adb '#f) (set! c4ae2@c4ada (make-record-constructor-descriptor c4ade@c4ad9 c4a6d@c4a65 c4ae0@c4adb)) (set! c4ae5@p? (record-predicate c4ade@c4ad9)) (set! c4ae7@make-implementation-restriction-violation (record-constructor c4ae2@c4ada)) (set! c4ae9@implementation-restriction-violation? (condition-predicate c4ade@c4ad9)) (set! c4aeb@&implementation-restriction-rtd c4ade@c4ad9) (set! c4aed@&implementation-restriction-rcd c4ae2@c4ada) (set! c4af3@c4aee (make-record-type-descriptor '&lexical c4a69@c4a64 'c4af1 '#f '#f '#())) (set! c4af5@c4af0 '#f) (set! c4af7@c4aef (make-record-constructor-descriptor c4af3@c4aee c4a6d@c4a65 c4af5@c4af0)) (set! c4afa@p? (record-predicate c4af3@c4aee)) (set! c4afc@make-lexical-violation (record-constructor c4af7@c4aef)) (set! c4afe@lexical-violation? (condition-predicate c4af3@c4aee)) (set! c4b00@&lexical-rtd c4af3@c4aee) (set! c4b02@&lexical-rcd c4af7@c4aef) (set! c4b0c@c4b07 (make-record-type-descriptor '&syntax c4a69@c4a64 'c4b0a '#f '#f '#((immutable form) (immutable subform)))) (set! c4b0e@c4b09 '#f) (set! c4b10@c4b08 (make-record-constructor-descriptor c4b0c@c4b07 c4a6d@c4a65 c4b0e@c4b09)) (set! c4b13@p? (record-predicate c4b0c@c4b07)) (set! c4b15@make-syntax-violation (record-constructor c4b10@c4b08)) (set! c4b17@c4b04 (record-accessor c4b0c@c4b07 '0)) (set! c4b19@c4b06 (record-accessor c4b0c@c4b07 '1)) (set! c4b1b@syntax-violation? (condition-predicate c4b0c@c4b07)) (set! c4b1d@syntax-violation-form (condition-accessor c4b0c@c4b07 c4b17@c4b04)) (set! c4b1f@syntax-violation-subform (condition-accessor c4b0c@c4b07 c4b19@c4b06)) (set! c4b21@&syntax-rtd c4b0c@c4b07) (set! c4b23@&syntax-rcd c4b10@c4b08) (set! c4b29@c4b24 (make-record-type-descriptor '&undefined c4a69@c4a64 'c4b27 '#f '#f '#())) (set! c4b2b@c4b26 '#f) (set! c4b2d@c4b25 (make-record-constructor-descriptor c4b29@c4b24 c4a6d@c4a65 c4b2b@c4b26)) (set! c4b30@p? (record-predicate c4b29@c4b24)) (set! c4b32@make-undefined-violation (record-constructor c4b2d@c4b25)) (set! c4b34@undefined-violation? (condition-predicate c4b29@c4b24)) (set! c4b36@&undefined-rtd c4b29@c4b24) (set! c4b38@&undefined-rcd c4b2d@c4b25) (set! c4b3e@c4b39 (make-record-type-descriptor '&i/o c4a54@c4a4f 'c4b3c '#f '#f '#())) (set! c4b40@c4b3b '#f) (set! c4b42@c4b3a (make-record-constructor-descriptor c4b3e@c4b39 c4a58@c4a50 c4b40@c4b3b)) (set! c4b45@p? (record-predicate c4b3e@c4b39)) (set! c4b47@make-i/o-error (record-constructor c4b42@c4b3a)) (set! c4b49@i/o-error? (condition-predicate c4b3e@c4b39)) (set! c4b4b@&i/o-rtd c4b3e@c4b39) (set! c4b4d@&i/o-rcd c4b42@c4b3a) (set! c4b53@c4b4e (make-record-type-descriptor '&i/o-read c4b3e@c4b39 'c4b51 '#f '#f '#())) (set! c4b55@c4b50 '#f) (set! c4b57@c4b4f (make-record-constructor-descriptor c4b53@c4b4e c4b42@c4b3a c4b55@c4b50)) (set! c4b5a@p? (record-predicate c4b53@c4b4e)) (set! c4b5c@make-i/o-read-error (record-constructor c4b57@c4b4f)) (set! c4b5e@i/o-read-error? (condition-predicate c4b53@c4b4e)) (set! c4b60@&i/o-read-rtd c4b53@c4b4e) (set! c4b62@&i/o-read-rcd c4b57@c4b4f) (set! c4b68@c4b63 (make-record-type-descriptor '&i/o-write c4b3e@c4b39 'c4b66 '#f '#f '#())) (set! c4b6a@c4b65 '#f) (set! c4b6c@c4b64 (make-record-constructor-descriptor c4b68@c4b63 c4b42@c4b3a c4b6a@c4b65)) (set! c4b6f@p? (record-predicate c4b68@c4b63)) (set! c4b71@make-i/o-write-error (record-constructor c4b6c@c4b64)) (set! c4b73@i/o-write-error? (condition-predicate c4b68@c4b63)) (set! c4b75@&i/o-write-rtd c4b68@c4b63) (set! c4b77@&i/o-write-rcd c4b6c@c4b64) (set! c4b7f@c4b7a (make-record-type-descriptor '&i/o-invalid-position c4b3e@c4b39 'c4b7d '#f '#f '#((immutable position)))) (set! c4b81@c4b7c '#f) (set! c4b83@c4b7b (make-record-constructor-descriptor c4b7f@c4b7a c4b42@c4b3a c4b81@c4b7c)) (set! c4b86@p? (record-predicate c4b7f@c4b7a)) (set! c4b88@make-i/o-invalid-position-error (record-constructor c4b83@c4b7b)) (set! c4b8a@c4b79 (record-accessor c4b7f@c4b7a '0)) (set! c4b8c@i/o-invalid-position-error? (condition-predicate c4b7f@c4b7a)) (set! c4b8e@i/o-error-position (condition-accessor c4b7f@c4b7a c4b8a@c4b79)) (set! c4b90@&i/o-invalid-position-rtd c4b7f@c4b7a) (set! c4b92@&i/o-invalid-position-rcd c4b83@c4b7b) (set! c4b9a@c4b95 (make-record-type-descriptor '&i/o-filename c4b3e@c4b39 'c4b98 '#f '#f '#((immutable filename)))) (set! c4b9c@c4b97 '#f) (set! c4b9e@c4b96 (make-record-constructor-descriptor c4b9a@c4b95 c4b42@c4b3a c4b9c@c4b97)) (set! c4ba1@p? (record-predicate c4b9a@c4b95)) (set! c4ba3@make-i/o-filename-error (record-constructor c4b9e@c4b96)) (set! c4ba5@c4b94 (record-accessor c4b9a@c4b95 '0)) (set! c4ba7@i/o-filename-error? (condition-predicate c4b9a@c4b95)) (set! c4ba9@i/o-error-filename (condition-accessor c4b9a@c4b95 c4ba5@c4b94)) (set! c4bab@&i/o-filename-rtd c4b9a@c4b95) (set! c4bad@&i/o-filename-rcd c4b9e@c4b96) (set! c4bb3@c4bae (make-record-type-descriptor '&i/o-file-protection c4b9a@c4b95 'c4bb1 '#f '#f '#())) (set! c4bb5@c4bb0 '#f) (set! c4bb7@c4baf (make-record-constructor-descriptor c4bb3@c4bae c4b9e@c4b96 c4bb5@c4bb0)) (set! c4bba@p? (record-predicate c4bb3@c4bae)) (set! c4bbc@make-i/o-file-protection-error (record-constructor c4bb7@c4baf)) (set! c4bbe@i/o-file-protection-error? (condition-predicate c4bb3@c4bae)) (set! c4bc0@&i/o-file-protection-rtd c4bb3@c4bae) (set! c4bc2@&i/o-file-protection-rcd c4bb7@c4baf) (set! c4bc8@c4bc3 (make-record-type-descriptor '&i/o-file-is-read-only c4bb3@c4bae 'c4bc6 '#f '#f '#())) (set! c4bca@c4bc5 '#f) (set! c4bcc@c4bc4 (make-record-constructor-descriptor c4bc8@c4bc3 c4bb7@c4baf c4bca@c4bc5)) (set! c4bcf@p? (record-predicate c4bc8@c4bc3)) (set! c4bd1@make-i/o-file-is-read-only-error (record-constructor c4bcc@c4bc4)) (set! c4bd3@i/o-file-is-read-only-error? (condition-predicate c4bc8@c4bc3)) (set! c4bd5@&i/o-file-is-read-only-rtd c4bc8@c4bc3) (set! c4bd7@&i/o-file-is-read-only-rcd c4bcc@c4bc4) (set! c4bdd@c4bd8 (make-record-type-descriptor '&i/o-file-already-exists c4b9a@c4b95 'c4bdb '#f '#f '#())) (set! c4bdf@c4bda '#f) (set! c4be1@c4bd9 (make-record-constructor-descriptor c4bdd@c4bd8 c4b9e@c4b96 c4bdf@c4bda)) (set! c4be4@p? (record-predicate c4bdd@c4bd8)) (set! c4be6@make-i/o-file-already-exists-error (record-constructor c4be1@c4bd9)) (set! c4be8@i/o-file-already-exists-error? (condition-predicate c4bdd@c4bd8)) (set! c4bea@&i/o-file-already-exists-rtd c4bdd@c4bd8) (set! c4bec@&i/o-file-already-exists-rcd c4be1@c4bd9) (set! c4bf2@c4bed (make-record-type-descriptor '&i/o-file-does-not-exist c4b9a@c4b95 'c4bf0 '#f '#f '#())) (set! c4bf4@c4bef '#f) (set! c4bf6@c4bee (make-record-constructor-descriptor c4bf2@c4bed c4b9e@c4b96 c4bf4@c4bef)) (set! c4bf9@p? (record-predicate c4bf2@c4bed)) (set! c4bfb@make-i/o-file-does-not-exist-error (record-constructor c4bf6@c4bee)) (set! c4bfd@i/o-file-does-not-exist-error? (condition-predicate c4bf2@c4bed)) (set! c4bff@&i/o-file-does-not-exist-rtd c4bf2@c4bed) (set! c4c01@&i/o-file-does-not-exist-rcd c4bf6@c4bee) (set! c4c09@c4c04 (make-record-type-descriptor '&i/o-port c4b3e@c4b39 'c4c07 '#f '#f '#((immutable port)))) (set! c4c0b@c4c06 '#f) (set! c4c0d@c4c05 (make-record-constructor-descriptor c4c09@c4c04 c4b42@c4b3a c4c0b@c4c06)) (set! c4c10@p? (record-predicate c4c09@c4c04)) (set! c4c12@make-i/o-port-error (record-constructor c4c0d@c4c05)) (set! c4c14@c4c03 (record-accessor c4c09@c4c04 '0)) (set! c4c16@i/o-port-error? (condition-predicate c4c09@c4c04)) (set! c4c18@i/o-error-port (condition-accessor c4c09@c4c04 c4c14@c4c03)) (set! c4c1a@&i/o-port-rtd c4c09@c4c04) (set! c4c1c@&i/o-port-rcd c4c0d@c4c05) (set! c4c22@c4c1d (make-record-type-descriptor '&i/o-decoding c4c09@c4c04 'c4c20 '#f '#f '#())) (set! c4c24@c4c1f '#f) (set! c4c26@c4c1e (make-record-constructor-descriptor c4c22@c4c1d c4c0d@c4c05 c4c24@c4c1f)) (set! c4c29@p? (record-predicate c4c22@c4c1d)) (set! c4c2b@make-i/o-decoding-error (record-constructor c4c26@c4c1e)) (set! c4c2d@i/o-decoding-error? (condition-predicate c4c22@c4c1d)) (set! c4c2f@&i/o-decoding-rtd c4c22@c4c1d) (set! c4c31@&i/o-decoding-rcd c4c26@c4c1e) (set! c4c39@c4c34 (make-record-type-descriptor '&i/o-encoding c4c09@c4c04 'c4c37 '#f '#f '#((immutable char)))) (set! c4c3b@c4c36 '#f) (set! c4c3d@c4c35 (make-record-constructor-descriptor c4c39@c4c34 c4c0d@c4c05 c4c3b@c4c36)) (set! c4c40@p? (record-predicate c4c39@c4c34)) (set! c4c42@make-i/o-encoding-error (record-constructor c4c3d@c4c35)) (set! c4c44@c4c33 (record-accessor c4c39@c4c34 '0)) (set! c4c46@i/o-encoding-error? (condition-predicate c4c39@c4c34)) (set! c4c48@i/o-encoding-error-char (condition-accessor c4c39@c4c34 c4c44@c4c33)) (set! c4c4a@&i/o-encoding-rtd c4c39@c4c34) (set! c4c4c@&i/o-encoding-rcd c4c3d@c4c35) (set! c4c52@c4c4d (make-record-type-descriptor '&no-infinities c4ade@c4ad9 'c4c50 '#f '#f '#())) (set! c4c54@c4c4f '#f) (set! c4c56@c4c4e (make-record-constructor-descriptor c4c52@c4c4d c4ae2@c4ada c4c54@c4c4f)) (set! c4c59@p? (record-predicate c4c52@c4c4d)) (set! c4c5b@make-no-infinities-violation (record-constructor c4c56@c4c4e)) (set! c4c5d@no-infinities-violation? (condition-predicate c4c52@c4c4d)) (set! c4c5f@&no-infinities-rtd c4c52@c4c4d) (set! c4c61@&no-infinities-rcd c4c56@c4c4e) (set! c4c67@c4c62 (make-record-type-descriptor '&no-nans c4ade@c4ad9 'c4c65 '#f '#f '#())) (set! c4c69@c4c64 '#f) (set! c4c6b@c4c63 (make-record-constructor-descriptor c4c67@c4c62 c4ae2@c4ada c4c69@c4c64)) (set! c4c6e@p? (record-predicate c4c67@c4c62)) (set! c4c70@make-no-nans-violation (record-constructor c4c6b@c4c63)) (set! c4c72@no-nans-violation? (condition-predicate c4c67@c4c62)) (set! c4c74@&no-nans-rtd c4c67@c4c62) (set! c4c76@&no-nans-rcd c4c6b@c4c63) (begin (set! c4d67@c4c76@&no-nans-rcd c4c76@&no-nans-rcd) (set! c4d66@c4c74@&no-nans-rtd c4c74@&no-nans-rtd) (set! c4d65@c4c72@no-nans-violation? c4c72@no-nans-violation?) (set! c4d64@c4c70@make-no-nans-violation c4c70@make-no-nans-violation) (set! c4d63@c4c6e@p? c4c6e@p?) (set! c4d62@c4c6b@c4c63 c4c6b@c4c63) (set! c4d61@c4c69@c4c64 c4c69@c4c64) (set! c4d60@c4c67@c4c62 c4c67@c4c62) (set! c4d5f@c4c61@&no-infinities-rcd c4c61@&no-infinities-rcd) (set! c4d5e@c4c5f@&no-infinities-rtd c4c5f@&no-infinities-rtd) (set! c4d5d@c4c5d@no-infinities-violation? c4c5d@no-infinities-violation?) (set! c4d5c@c4c5b@make-no-infinities-violation c4c5b@make-no-infinities-violation) (set! c4d5b@c4c59@p? c4c59@p?) (set! c4d5a@c4c56@c4c4e c4c56@c4c4e) (set! c4d59@c4c54@c4c4f c4c54@c4c4f) (set! c4d58@c4c52@c4c4d c4c52@c4c4d) (set! c4d57@c4c4c@&i/o-encoding-rcd c4c4c@&i/o-encoding-rcd) (set! c4d56@c4c4a@&i/o-encoding-rtd c4c4a@&i/o-encoding-rtd) (set! c4d55@c4c48@i/o-encoding-error-char c4c48@i/o-encoding-error-char) (set! c4d54@c4c46@i/o-encoding-error? c4c46@i/o-encoding-error?) (set! c4d53@c4c44@c4c33 c4c44@c4c33) (set! c4d52@c4c42@make-i/o-encoding-error c4c42@make-i/o-encoding-error) (set! c4d51@c4c40@p? c4c40@p?) (set! c4d50@c4c3d@c4c35 c4c3d@c4c35) (set! c4d4f@c4c3b@c4c36 c4c3b@c4c36) (set! c4d4e@c4c39@c4c34 c4c39@c4c34) (set! c4d4d@c4c31@&i/o-decoding-rcd c4c31@&i/o-decoding-rcd) (set! c4d4c@c4c2f@&i/o-decoding-rtd c4c2f@&i/o-decoding-rtd) (set! c4d4b@c4c2d@i/o-decoding-error? c4c2d@i/o-decoding-error?) (set! c4d4a@c4c2b@make-i/o-decoding-error c4c2b@make-i/o-decoding-error) (set! c4d49@c4c29@p? c4c29@p?) (set! c4d48@c4c26@c4c1e c4c26@c4c1e) (set! c4d47@c4c24@c4c1f c4c24@c4c1f) (set! c4d46@c4c22@c4c1d c4c22@c4c1d) (set! c4d45@c4c1c@&i/o-port-rcd c4c1c@&i/o-port-rcd) (set! c4d44@c4c1a@&i/o-port-rtd c4c1a@&i/o-port-rtd) (set! c4d43@c4c18@i/o-error-port c4c18@i/o-error-port) (set! c4d42@c4c16@i/o-port-error? c4c16@i/o-port-error?) (set! c4d41@c4c14@c4c03 c4c14@c4c03) (set! c4d40@c4c12@make-i/o-port-error c4c12@make-i/o-port-error) (set! c4d3f@c4c10@p? c4c10@p?) (set! c4d3e@c4c0d@c4c05 c4c0d@c4c05) (set! c4d3d@c4c0b@c4c06 c4c0b@c4c06) (set! c4d3c@c4c09@c4c04 c4c09@c4c04) (set! c4d3b@c4c01@&i/o-file-does-not-exist-rcd c4c01@&i/o-file-does-not-exist-rcd) (set! c4d3a@c4bff@&i/o-file-does-not-exist-rtd c4bff@&i/o-file-does-not-exist-rtd) (set! c4d39@c4bfd@i/o-file-does-not-exist-error? c4bfd@i/o-file-does-not-exist-error?) (set! c4d38@c4bfb@make-i/o-file-does-not-exist-error c4bfb@make-i/o-file-does-not-exist-error) (set! c4d37@c4bf9@p? c4bf9@p?) (set! c4d36@c4bf6@c4bee c4bf6@c4bee) (set! c4d35@c4bf4@c4bef c4bf4@c4bef) (set! c4d34@c4bf2@c4bed c4bf2@c4bed) (set! c4d33@c4bec@&i/o-file-already-exists-rcd c4bec@&i/o-file-already-exists-rcd) (set! c4d32@c4bea@&i/o-file-already-exists-rtd c4bea@&i/o-file-already-exists-rtd) (set! c4d31@c4be8@i/o-file-already-exists-error? c4be8@i/o-file-already-exists-error?) (set! c4d30@c4be6@make-i/o-file-already-exists-error c4be6@make-i/o-file-already-exists-error) (set! c4d2f@c4be4@p? c4be4@p?) (set! c4d2e@c4be1@c4bd9 c4be1@c4bd9) (set! c4d2d@c4bdf@c4bda c4bdf@c4bda) (set! c4d2c@c4bdd@c4bd8 c4bdd@c4bd8) (set! c4d2b@c4bd7@&i/o-file-is-read-only-rcd c4bd7@&i/o-file-is-read-only-rcd) (set! c4d2a@c4bd5@&i/o-file-is-read-only-rtd c4bd5@&i/o-file-is-read-only-rtd) (set! c4d29@c4bd3@i/o-file-is-read-only-error? c4bd3@i/o-file-is-read-only-error?) (set! c4d28@c4bd1@make-i/o-file-is-read-only-error c4bd1@make-i/o-file-is-read-only-error) (set! c4d27@c4bcf@p? c4bcf@p?) (set! c4d26@c4bcc@c4bc4 c4bcc@c4bc4) (set! c4d25@c4bca@c4bc5 c4bca@c4bc5) (set! c4d24@c4bc8@c4bc3 c4bc8@c4bc3) (set! c4d23@c4bc2@&i/o-file-protection-rcd c4bc2@&i/o-file-protection-rcd) (set! c4d22@c4bc0@&i/o-file-protection-rtd c4bc0@&i/o-file-protection-rtd) (set! c4d21@c4bbe@i/o-file-protection-error? c4bbe@i/o-file-protection-error?) (set! c4d20@c4bbc@make-i/o-file-protection-error c4bbc@make-i/o-file-protection-error) (set! c4d1f@c4bba@p? c4bba@p?) (set! c4d1e@c4bb7@c4baf c4bb7@c4baf) (set! c4d1d@c4bb5@c4bb0 c4bb5@c4bb0) (set! c4d1c@c4bb3@c4bae c4bb3@c4bae) (set! c4d1b@c4bad@&i/o-filename-rcd c4bad@&i/o-filename-rcd) (set! c4d1a@c4bab@&i/o-filename-rtd c4bab@&i/o-filename-rtd) (set! c4d19@c4ba9@i/o-error-filename c4ba9@i/o-error-filename) (set! c4d18@c4ba7@i/o-filename-error? c4ba7@i/o-filename-error?) (set! c4d17@c4ba5@c4b94 c4ba5@c4b94) (set! c4d16@c4ba3@make-i/o-filename-error c4ba3@make-i/o-filename-error) (set! c4d15@c4ba1@p? c4ba1@p?) (set! c4d14@c4b9e@c4b96 c4b9e@c4b96) (set! c4d13@c4b9c@c4b97 c4b9c@c4b97) (set! c4d12@c4b9a@c4b95 c4b9a@c4b95) (set! c4d11@c4b92@&i/o-invalid-position-rcd c4b92@&i/o-invalid-position-rcd) (set! c4d10@c4b90@&i/o-invalid-position-rtd c4b90@&i/o-invalid-position-rtd) (set! c4d0f@c4b8e@i/o-error-position c4b8e@i/o-error-position) (set! c4d0e@c4b8c@i/o-invalid-position-error? c4b8c@i/o-invalid-position-error?) (set! c4d0d@c4b8a@c4b79 c4b8a@c4b79) (set! c4d0c@c4b88@make-i/o-invalid-position-error c4b88@make-i/o-invalid-position-error) (set! c4d0b@c4b86@p? c4b86@p?) (set! c4d0a@c4b83@c4b7b c4b83@c4b7b) (set! c4d09@c4b81@c4b7c c4b81@c4b7c) (set! c4d08@c4b7f@c4b7a c4b7f@c4b7a) (set! c4d07@c4b77@&i/o-write-rcd c4b77@&i/o-write-rcd) (set! c4d06@c4b75@&i/o-write-rtd c4b75@&i/o-write-rtd) (set! c4d05@c4b73@i/o-write-error? c4b73@i/o-write-error?) (set! c4d04@c4b71@make-i/o-write-error c4b71@make-i/o-write-error) (set! c4d03@c4b6f@p? c4b6f@p?) (set! c4d02@c4b6c@c4b64 c4b6c@c4b64) (set! c4d01@c4b6a@c4b65 c4b6a@c4b65) (set! c4d00@c4b68@c4b63 c4b68@c4b63) (set! c4cff@c4b62@&i/o-read-rcd c4b62@&i/o-read-rcd) (set! c4cfe@c4b60@&i/o-read-rtd c4b60@&i/o-read-rtd) (set! c4cfd@c4b5e@i/o-read-error? c4b5e@i/o-read-error?) (set! c4cfc@c4b5c@make-i/o-read-error c4b5c@make-i/o-read-error) (set! c4cfb@c4b5a@p? c4b5a@p?) (set! c4cfa@c4b57@c4b4f c4b57@c4b4f) (set! c4cf9@c4b55@c4b50 c4b55@c4b50) (set! c4cf8@c4b53@c4b4e c4b53@c4b4e) (set! c4cf7@c4b4d@&i/o-rcd c4b4d@&i/o-rcd) (set! c4cf6@c4b4b@&i/o-rtd c4b4b@&i/o-rtd) (set! c4cf5@c4b49@i/o-error? c4b49@i/o-error?) (set! c4cf4@c4b47@make-i/o-error c4b47@make-i/o-error) (set! c4cf3@c4b45@p? c4b45@p?) (set! c4cf2@c4b42@c4b3a c4b42@c4b3a) (set! c4cf1@c4b40@c4b3b c4b40@c4b3b) (set! c4cf0@c4b3e@c4b39 c4b3e@c4b39) (set! c4cef@c4b38@&undefined-rcd c4b38@&undefined-rcd) (set! c4cee@c4b36@&undefined-rtd c4b36@&undefined-rtd) (set! c4ced@c4b34@undefined-violation? c4b34@undefined-violation?) (set! c4cec@c4b32@make-undefined-violation c4b32@make-undefined-violation) (set! c4ceb@c4b30@p? c4b30@p?) (set! c4cea@c4b2d@c4b25 c4b2d@c4b25) (set! c4ce9@c4b2b@c4b26 c4b2b@c4b26) (set! c4ce8@c4b29@c4b24 c4b29@c4b24) (set! c4ce7@c4b23@&syntax-rcd c4b23@&syntax-rcd) (set! c4ce6@c4b21@&syntax-rtd c4b21@&syntax-rtd) (set! c4ce5@c4b1f@syntax-violation-subform c4b1f@syntax-violation-subform) (set! c4ce4@c4b1d@syntax-violation-form c4b1d@syntax-violation-form) (set! c4ce3@c4b1b@syntax-violation? c4b1b@syntax-violation?) (set! c4ce2@c4b19@c4b06 c4b19@c4b06) (set! c4ce1@c4b17@c4b04 c4b17@c4b04) (set! c4ce0@c4b15@make-syntax-violation c4b15@make-syntax-violation) (set! c4cdf@c4b13@p? c4b13@p?) (set! c4cde@c4b10@c4b08 c4b10@c4b08) (set! c4cdd@c4b0e@c4b09 c4b0e@c4b09) (set! c4cdc@c4b0c@c4b07 c4b0c@c4b07) (set! c4cdb@c4b02@&lexical-rcd c4b02@&lexical-rcd) (set! c4cda@c4b00@&lexical-rtd c4b00@&lexical-rtd) (set! c4cd9@c4afe@lexical-violation? c4afe@lexical-violation?) (set! c4cd8@c4afc@make-lexical-violation c4afc@make-lexical-violation) (set! c4cd7@c4afa@p? c4afa@p?) (set! c4cd6@c4af7@c4aef c4af7@c4aef) (set! c4cd5@c4af5@c4af0 c4af5@c4af0) (set! c4cd4@c4af3@c4aee c4af3@c4aee) (set! c4cd3@c4aed@&implementation-restriction-rcd c4aed@&implementation-restriction-rcd) (set! c4cd2@c4aeb@&implementation-restriction-rtd c4aeb@&implementation-restriction-rtd) (set! c4cd1@c4ae9@implementation-restriction-violation? c4ae9@implementation-restriction-violation?) (set! c4cd0@c4ae7@make-implementation-restriction-violation c4ae7@make-implementation-restriction-violation) (set! c4ccf@c4ae5@p? c4ae5@p?) (set! c4cce@c4ae2@c4ada c4ae2@c4ada) (set! c4ccd@c4ae0@c4adb c4ae0@c4adb) (set! c4ccc@c4ade@c4ad9 c4ade@c4ad9) (set! c4ccb@c4ad8@&non-continuable-rcd c4ad8@&non-continuable-rcd) (set! c4cca@c4ad6@&non-continuable-rtd c4ad6@&non-continuable-rtd) (set! c4cc9@c4ad4@non-continuable-violation? c4ad4@non-continuable-violation?) (set! c4cc8@c4ad2@make-non-continuable-violation c4ad2@make-non-continuable-violation) (set! c4cc7@c4ad0@p? c4ad0@p?) (set! c4cc6@c4acd@c4ac5 c4acd@c4ac5) (set! c4cc5@c4acb@c4ac6 c4acb@c4ac6) (set! c4cc4@c4ac9@c4ac4 c4ac9@c4ac4) (set! c4cc3@c4ac3@&who-rcd c4ac3@&who-rcd) (set! c4cc2@c4ac1@&who-rtd c4ac1@&who-rtd) (set! c4cc1@c4abf@condition-who c4abf@condition-who) (set! c4cc0@c4abd@who-condition? c4abd@who-condition?) (set! c4cbf@c4abb@c4aaa c4abb@c4aaa) (set! c4cbe@c4ab9@make-who-condition c4ab9@make-who-condition) (set! c4cbd@c4ab7@p? c4ab7@p?) (set! c4cbc@c4ab4@c4aac c4ab4@c4aac) (set! c4cbb@c4ab2@c4aad c4ab2@c4aad) (set! c4cba@c4ab0@c4aab c4ab0@c4aab) (set! c4cb9@c4aa8@&irritants-rcd c4aa8@&irritants-rcd) (set! c4cb8@c4aa6@&irritants-rtd c4aa6@&irritants-rtd) (set! c4cb7@c4aa4@condition-irritants c4aa4@condition-irritants) (set! c4cb6@c4aa2@irritants-condition? c4aa2@irritants-condition?) (set! c4cb5@c4aa0@c4a8f c4aa0@c4a8f) (set! c4cb4@c4a9e@make-irritants-condition c4a9e@make-irritants-condition) (set! c4cb3@c4a9c@p? c4a9c@p?) (set! c4cb2@c4a99@c4a91 c4a99@c4a91) (set! c4cb1@c4a97@c4a92 c4a97@c4a92) (set! c4cb0@c4a95@c4a90 c4a95@c4a90) (set! c4caf@c4a8d@&assertion-rcd c4a8d@&assertion-rcd) (set! c4cae@c4a8b@&assertion-rtd c4a8b@&assertion-rtd) (set! c4cad@c4a89@assertion-violation? c4a89@assertion-violation?) (set! c4cac@c4a87@make-assertion-violation c4a87@make-assertion-violation) (set! c4cab@c4a85@p? c4a85@p?) (set! c4caa@c4a82@c4a7a c4a82@c4a7a) (set! c4ca9@c4a80@c4a7b c4a80@c4a7b) (set! c4ca8@c4a7e@c4a79 c4a7e@c4a79) (set! c4ca7@c4a78@&violation-rcd c4a78@&violation-rcd) (set! c4ca6@c4a76@&violation-rtd c4a76@&violation-rtd) (set! c4ca5@c4a74@violation? c4a74@violation?) (set! c4ca4@c4a72@make-violation c4a72@make-violation) (set! c4ca3@c4a70@p? c4a70@p?) (set! c4ca2@c4a6d@c4a65 c4a6d@c4a65) (set! c4ca1@c4a6b@c4a66 c4a6b@c4a66) (set! c4ca0@c4a69@c4a64 c4a69@c4a64) (set! c4c9f@c4a63@&error-rcd c4a63@&error-rcd) (set! c4c9e@c4a61@&error-rtd c4a61@&error-rtd) (set! c4c9d@c4a5f@error? c4a5f@error?) (set! c4c9c@c4a5d@make-error c4a5d@make-error) (set! c4c9b@c4a5b@p? c4a5b@p?) (set! c4c9a@c4a58@c4a50 c4a58@c4a50) (set! c4c99@c4a56@c4a51 c4a56@c4a51) (set! c4c98@c4a54@c4a4f c4a54@c4a4f) (set! c4c97@c4a4e@&serious-rcd c4a4e@&serious-rcd) (set! c4c96@c4a4c@&serious-rtd c4a4c@&serious-rtd) (set! c4c95@c4a4a@serious-condition? c4a4a@serious-condition?) (set! c4c94@c4a48@make-serious-condition c4a48@make-serious-condition) (set! c4c93@c4a46@p? c4a46@p?) (set! c4c92@c4a43@c4a3b c4a43@c4a3b) (set! c4c91@c4a41@c4a3c c4a41@c4a3c) (set! c4c90@c4a3f@c4a3a c4a3f@c4a3a) (set! c4c8f@c4a39@&warning-rcd c4a39@&warning-rcd) (set! c4c8e@c4a37@&warning-rtd c4a37@&warning-rtd) (set! c4c8d@c4a35@warning? c4a35@warning?) (set! c4c8c@c4a33@make-warning c4a33@make-warning) (set! c4c8b@c4a31@p? c4a31@p?) (set! c4c8a@c4a2e@c4a26 c4a2e@c4a26) (set! c4c89@c4a2c@c4a27 c4a2c@c4a27) (set! c4c88@c4a2a@c4a25 c4a2a@c4a25) (set! c4c87@c4a24@&message-rcd c4a24@&message-rcd) (set! c4c86@c4a22@&message-rtd c4a22@&message-rtd) (set! c4c85@c4a20@condition-message c4a20@condition-message) (set! c4c84@c4a1e@message-condition? c4a1e@message-condition?) (set! c4c83@c4a1c@c4a0b c4a1c@c4a0b) (set! c4c82@c4a1a@make-message-condition c4a1a@make-message-condition) (set! c4c81@c4a18@p? c4a18@p?) (set! c4c80@c4a15@c4a0d c4a15@c4a0d) (set! c4c7f@c4a13@c4a0e c4a13@c4a0e) (set! c4c7e@c4a11@c4a0c c4a11@c4a0c) (set! c4c7d@c49c5@&condition-rcd c49c5@&condition-rcd) (set! c4c7c@c49c3@&condition-rtd c49c3@&condition-rtd) (set! c4c7b@c49c1@make-&condition c49c1@make-&condition) (set! c4c7a@c49bf@&condition? c49bf@&condition?) (set! c4c79@c49bc@c49b4 c49bc@c49b4) (set! c4c78@c49ba@c49b5 c49ba@c49b5) (set! c4c77@c49b8@c49b3 c49b8@c49b3)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (c28b6@c286b@current-primitive-locations (lambda (c51a4@x) ((lambda (c51a6@t) (if c51a6@t (cdr c51a6@t) '#f)) (assq c51a4@x '((&no-nans-rcd . c4d67@c4c76@&no-nans-rcd) (&no-nans-rtd . c4d66@c4c74@&no-nans-rtd) (&no-infinities-rcd . c4d5f@c4c61@&no-infinities-rcd) (&no-infinities-rtd . c4d5e@c4c5f@&no-infinities-rtd) (&i/o-encoding-rcd . c4d57@c4c4c@&i/o-encoding-rcd) (&i/o-encoding-rtd . c4d56@c4c4a@&i/o-encoding-rtd) (&i/o-decoding-rcd . c4d4d@c4c31@&i/o-decoding-rcd) (&i/o-decoding-rtd . c4d4c@c4c2f@&i/o-decoding-rtd) (&i/o-port-rcd . c4d45@c4c1c@&i/o-port-rcd) (&i/o-port-rtd . c4d44@c4c1a@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . c4d3b@c4c01@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . c4d3a@c4bff@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . c4d33@c4bec@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . c4d32@c4bea@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . c4d2b@c4bd7@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . c4d2a@c4bd5@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . c4d23@c4bc2@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . c4d22@c4bc0@&i/o-file-protection-rtd) (&i/o-filename-rcd . c4d1b@c4bad@&i/o-filename-rcd) (&i/o-filename-rtd . c4d1a@c4bab@&i/o-filename-rtd) (&i/o-invalid-position-rcd . c4d11@c4b92@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . c4d10@c4b90@&i/o-invalid-position-rtd) (&i/o-write-rcd . c4d07@c4b77@&i/o-write-rcd) (&i/o-write-rtd . c4d06@c4b75@&i/o-write-rtd) (&i/o-read-rcd . c4cff@c4b62@&i/o-read-rcd) (&i/o-read-rtd . c4cfe@c4b60@&i/o-read-rtd) (&i/o-rcd . c4cf7@c4b4d@&i/o-rcd) (&i/o-rtd . c4cf6@c4b4b@&i/o-rtd) (&undefined-rcd . c4cef@c4b38@&undefined-rcd) (&undefined-rtd . c4cee@c4b36@&undefined-rtd) (&syntax-rcd . c4ce7@c4b23@&syntax-rcd) (&syntax-rtd . c4ce6@c4b21@&syntax-rtd) (&lexical-rcd . c4cdb@c4b02@&lexical-rcd) (&lexical-rtd . c4cda@c4b00@&lexical-rtd) (&implementation-restriction-rcd . c4cd3@c4aed@&implementation-restriction-rcd) (&implementation-restriction-rtd . c4cd2@c4aeb@&implementation-restriction-rtd) (&non-continuable-rcd . c4ccb@c4ad8@&non-continuable-rcd) (&non-continuable-rtd . c4cca@c4ad6@&non-continuable-rtd) (&who-rcd . c4cc3@c4ac3@&who-rcd) (&who-rtd . c4cc2@c4ac1@&who-rtd) (&irritants-rcd . c4cb9@c4aa8@&irritants-rcd) (&irritants-rtd . c4cb8@c4aa6@&irritants-rtd) (&assertion-rcd . c4caf@c4a8d@&assertion-rcd) (&assertion-rtd . c4cae@c4a8b@&assertion-rtd) (&violation-rcd . c4ca7@c4a78@&violation-rcd) (&violation-rtd . c4ca6@c4a76@&violation-rtd) (&error-rcd . c4c9f@c4a63@&error-rcd) (&error-rtd . c4c9e@c4a61@&error-rtd) (&serious-rcd . c4c97@c4a4e@&serious-rcd) (&serious-rtd . c4c96@c4a4c@&serious-rtd) (&warning-rcd . c4c8f@c4a39@&warning-rcd) (&warning-rtd . c4c8e@c4a37@&warning-rtd) (&message-rcd . c4c87@c4a24@&message-rcd) (&message-rtd . c4c86@c4a22@&message-rtd) (&condition-rcd . c4c7d@c49c5@&condition-rcd) (&condition-rtd . c4c7c@c49c3@&condition-rtd) (syntax-error . c49a5@c2fab@syntax-error) (syntax-dispatch . c493a@c2ec6@syntax-dispatch) (load . c4e98@c4d83@load) (interaction-environment . c49ad@c2fbb@interaction-environment) (library-path . c2acd@c295c@library-path) (make-parameter . c2865@c278f@make-parameter) (make-variable-transformer . c48f8@c2cf3@make-variable-transformer) (identifier? . c49a8@c2fb1@identifier?) (generate-temporaries . c499e@c2f9d@generate-temporaries) (free-identifier=? . c499f@c2f9f@free-identifier=?) (syntax->datum . c49aa@c2fb5@syntax->datum) (datum->syntax . c49a9@c2fb3@datum->syntax) (bound-identifier=? . c49a0@c2fa1@bound-identifier=?) (make-i/o-write-error . c4d04@c4b71@make-i/o-write-error) (make-i/o-read-error . c4cfc@c4b5c@make-i/o-read-error) (make-i/o-port-error . c4d40@c4c12@make-i/o-port-error) (make-i/o-invalid-position-error . c4d0c@c4b88@make-i/o-invalid-position-error) (make-i/o-filename-error . c4d16@c4ba3@make-i/o-filename-error) (make-i/o-file-protection-error . c4d20@c4bbc@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . c4d28@c4bd1@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . c4d38@c4bfb@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . c4d30@c4be6@make-i/o-file-already-exists-error) (make-i/o-error . c4cf4@c4b47@make-i/o-error) (make-i/o-encoding-error . c4d52@c4c42@make-i/o-encoding-error) (make-i/o-decoding-error . c4d4a@c4c2b@make-i/o-decoding-error) (i/o-write-error? . c4d05@c4b73@i/o-write-error?) (i/o-read-error? . c4cfd@c4b5e@i/o-read-error?) (i/o-port-error? . c4d42@c4c16@i/o-port-error?) (i/o-invalid-position-error? . c4d0e@c4b8c@i/o-invalid-position-error?) (i/o-filename-error? . c4d18@c4ba7@i/o-filename-error?) (i/o-file-protection-error? . c4d21@c4bbe@i/o-file-protection-error?) (i/o-file-is-read-only-error? . c4d29@c4bd3@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . c4d39@c4bfd@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . c4d31@c4be8@i/o-file-already-exists-error?) (i/o-error? . c4cf5@c4b49@i/o-error?) (i/o-error-position . c4d0f@c4b8e@i/o-error-position) (i/o-error-port . c4d43@c4c18@i/o-error-port) (i/o-error-filename . c4d19@c4ba9@i/o-error-filename) (i/o-encoding-error? . c4d54@c4c46@i/o-encoding-error?) (i/o-encoding-error-char . c4d55@c4c48@i/o-encoding-error-char) (i/o-decoding-error? . c4d4b@c4c2d@i/o-decoding-error?) (scheme-report-environment . c4995@c2f8b@scheme-report-environment) (null-environment . c4994@c2f89@null-environment) (command-line . c4e95@c4d7d@command-line) (eval . c4997@c2f8f@eval) (environment . c4993@c2f87@environment) (who-condition? . c4cc0@c4abd@who-condition?) (warning? . c4c8d@c4a35@warning?) (violation? . c4ca5@c4a74@violation?) (undefined-violation? . c4ced@c4b34@undefined-violation?) (syntax-violation? . c4ce3@c4b1b@syntax-violation?) (syntax-violation-subform . c4ce5@c4b1f@syntax-violation-subform) (syntax-violation-form . c4ce4@c4b1d@syntax-violation-form) (syntax-violation . c49a7@c2faf@syntax-violation) (serious-condition? . c4c95@c4a4a@serious-condition?) (non-continuable-violation? . c4cc9@c4ad4@non-continuable-violation?) (message-condition? . c4c84@c4a1e@message-condition?) (make-who-condition . c4cbe@c4ab9@make-who-condition) (make-warning . c4c8c@c4a33@make-warning) (make-violation . c4ca4@c4a72@make-violation) (make-undefined-violation . c4cec@c4b32@make-undefined-violation) (make-syntax-violation . c4ce0@c4b15@make-syntax-violation) (make-serious-condition . c4c94@c4a48@make-serious-condition) (make-non-continuable-violation . c4cc8@c4ad2@make-non-continuable-violation) (make-message-condition . c4c82@c4a1a@make-message-condition) (make-lexical-violation . c4cd8@c4afc@make-lexical-violation) (make-irritants-condition . c4cb4@c4a9e@make-irritants-condition) (make-implementation-restriction-violation . c4cd0@c4ae7@make-implementation-restriction-violation) (make-error . c4c9c@c4a5d@make-error) (make-assertion-violation . c4cac@c4a87@make-assertion-violation) (lexical-violation? . c4cd9@c4afe@lexical-violation?) (irritants-condition? . c4cb6@c4aa2@irritants-condition?) (implementation-restriction-violation? . c4cd1@c4ae9@implementation-restriction-violation?) (error? . c4c9d@c4a5f@error?) (condition-who . c4cc1@c4abf@condition-who) (condition-message . c4c85@c4a20@condition-message) (condition-irritants . c4cb7@c4aa4@condition-irritants) (assertion-violation? . c4cad@c4a89@assertion-violation?) (no-nans-violation? . c4d65@c4c72@no-nans-violation?) (no-infinities-violation? . c4d5d@c4c5d@no-infinities-violation?) (make-no-nans-violation . c4d64@c4c70@make-no-nans-violation) (make-no-infinities-violation . c4d5c@c4c5b@make-no-infinities-violation) (assertion-error . c49a4@c2fa9@assertion-error)))))) (c2add@c297c@install-library 'c5181 '(mosh interaction) '() '() '() '() '((regexp? . c5179) (alist->eq-hash-table . c5176) (format . c5173) (string-split . c5168) (call-process . c5162) (set-current-directory! . c515e) (expand-path . c515d) (current-directory . c515c) (%spawn . c515b) (%waitpid . c515a) (%ffi-supported? . c5159) (%ffi-pointer-ref . c5158) (%ffi-pointer->string . c5157) (%ffi-call->string-or-zero . c5156) (%ffi-call->double . c5155) (%ffi-call->void* . c5154) (%ffi-call->void . c5153) (%ffi-call->int . c5152) (%ffi-lookup . c5151) (%ffi-open . c5150) (%fork . c514f) (%pipe . c514e) (p . c514d) (vm-join! . c5145) (vm-set-value! . c5144) (vm? . c5143) (main-vm? . c5142) (vm-self . c5141) (vm-start! . c5140) (make-vm . c513f) (mutex-try-lock! . c513e) (mutex-unlock! . c513d) (mutex-lock! . c513c) (mutex? . c513b) (make-mutex . c513a) (condition-variable-notify-all! . c5139) (condition-variable-notify! . c5138) (condition-variable-wait! . c5137) (make-condition-variable . c5136) (string-upcase . c511f) (string-titlecase . c511e) (string-normalize-nfkd . c511d) (string-normalize-nfkc . c511c) (string-normalize-nfd . c511b) (string-normalize-nfc . c511a) (string-foldcase . c5119) (string-downcase . c5118) (string-ci>? . c5117) (string-ci>=? . c5116) (string-ci=? . c5115) (string-ci<? . c5114) (string-ci<=? . c5113) (char-whitespace? . c5112) (char-upper-case? . c5111) (char-title-case? . c5110) (char-numeric? . c510f) (char-lower-case? . c510e) (char-general-category . c510d) (char-upcase . c510c) (char-titlecase . c510b) (char-foldcase . c510a) (char-downcase . c5109) (char-ci>? . c5108) (char-ci>=? . c5107) (char-ci=? . c5106) (char-ci<? . c5105) (char-ci<=? . c5104) (char-alphabetic? . c5103) (make-variable-transformer . c2cf2) (identifier? . c2fb0) (generate-temporaries . c2f9c) (free-identifier=? . c2f9e) (syntax->datum . c2fb4) (datum->syntax . c2fb2) (bound-identifier=? . c2fa0) (record-type-descriptor? . c5102) (record-predicate . c5101) (record-mutator . c5100) (record-constructor . c50ff) (record-accessor . c50fe) (make-record-type-descriptor . c50fd) (make-record-constructor-descriptor . c50fc) (record? . c50fb) (record-type-uid . c50fa) (record-type-sealed? . c50f9) (record-type-parent . c50f8) (record-type-opaque? . c50f7) (record-type-name . c50f6) (record-type-generative? . c50f5) (record-type-field-names . c50f4) (record-rtd . c50f3) (record-field-mutable? . c50f2) (delete-file . c50f1) (file-exists? . c50f0) (vector-sort! . c50ef) (vector-sort . c50ee) (list-sort . c50ed) (symbol-hash . c50ec) (string-ci-hash . c50eb) (string-hash . c50ea) (equal-hash . c50e9) (hashtable-equivalence-function . c50e8) (make-hashtable . c50e7) (hashtable-hash-function . c50e6) (make-eqv-hashtable . c50e5) (make-eq-hashtable . c50e4) (hashtable? . c50e3) (hashtable-update! . c50e2) (hashtable-size . c50e1) (hashtable-set! . c50e0) (hashtable-ref . c50df) (hashtable-mutable? . c50de) (hashtable-keys . c50dd) (hashtable-entries . c50dc) (hashtable-delete! . c50db) (hashtable-copy . c50da) (hashtable-contains? . c50d9) (hashtable-clear! . c50d8) (call-with-output-file . c50d7) (call-with-input-file . c50d6) (write-char . c50d5) (write . c50d4) (with-output-to-file . c50d3) (with-input-from-file . c50d2) (read-char . c50d1) (read . c50d0) (peek-char . c50cf) (open-output-file . c50ce) (open-input-file . c50cd) (newline . c50cc) (display . c50cb) (close-output-port . c50ca) (close-input-port . c50c9) (eof-object? . c50c8) (eof-object . c50c7) (current-error-port . c50c6) (current-output-port . c50c5) (current-input-port . c50c4) (output-port? . c50c3) (input-port? . c50c2) (utf-8-codec . c50c1) (utf-16-codec . c50c0) (transcoder-error-handling-mode . c50bf) (transcoder-eol-style . c50be) (transcoder-codec . c50bd) (transcoded-port . c50bc) (textual-port? . c50bb) (string->bytevector . c50ba) (standard-output-port . c50b9) (standard-input-port . c50b8) (standard-error-port . c50b7) (set-port-position! . c50b6) (put-u8 . c50b5) (put-string . c50b4) (put-datum . c50b3) (put-char . c50b2) (put-bytevector . c50b1) (port? . c50b0) (port-transcoder . c50af) (port-position . c50ae) (port-has-set-port-position!? . c50ad) (port-has-port-position? . c50ac) (port-eof? . c50ab) (output-port-buffer-mode . c50aa) (open-string-output-port . c50a9) (open-string-input-port . c50a8) (open-file-output-port . c50a7) (open-file-input/output-port . c50a6) (open-file-input-port . c50a5) (open-bytevector-output-port . c50a4) (open-bytevector-input-port . c50a3) (native-transcoder . c50a2) (native-eol-style . c50a1) (make-transcoder . c50a0) (latin-1-codec . c509f) (make-i/o-write-error . c4b70) (make-i/o-read-error . c4b5b) (make-i/o-port-error . c4c11) (make-i/o-invalid-position-error . c4b87) (make-i/o-filename-error . c4ba2) (make-i/o-file-protection-error . c4bbb) (make-i/o-file-is-read-only-error . c4bd0) (make-i/o-file-does-not-exist-error . c4bfa) (make-i/o-file-already-exists-error . c4be5) (make-i/o-error . c4b46) (make-i/o-encoding-error . c4c41) (make-i/o-decoding-error . c4c2a) (make-custom-textual-output-port . c509e) (make-custom-textual-input/output-port . c509d) (make-custom-textual-input-port . c509c) (make-custom-binary-output-port . c509b) (make-custom-binary-input/output-port . c509a) (make-custom-binary-input-port . c5099) (make-bytevector . c5098) (lookahead-u8 . c5097) (lookahead-char . c5096) (i/o-write-error? . c4b72) (i/o-read-error? . c4b5d) (i/o-port-error? . c4c15) (i/o-invalid-position-error? . c4b8b) (i/o-filename-error? . c4ba6) (i/o-file-protection-error? . c4bbd) (i/o-file-is-read-only-error? . c4bd2) (i/o-file-does-not-exist-error? . c4bfc) (i/o-file-already-exists-error? . c4be7) (i/o-error? . c4b48) (i/o-error-position . c4b8d) (i/o-error-port . c4c17) (i/o-error-filename . c4ba8) (i/o-encoding-error? . c4c45) (i/o-encoding-error-char . c4c47) (i/o-decoding-error? . c4c2c) (get-u8 . c5095) (get-string-n! . c5094) (get-string-n . c5093) (get-string-all . c5092) (get-line . c5091) (get-datum . c5090) (get-char . c508f) (get-bytevector-some . c508e) (get-bytevector-n! . c508d) (get-bytevector-n . c508c) (get-bytevector-all . c508b) (flush-output-port . c508a) (close-port . c5089) (exit . c5081) (command-line . c4d7c) (string-fill! . c5080) (string-set! . c507f) (set-cdr! . c507e) (set-car! . c507d) (remove . c507c) (remv . c507b) (remp . c507a) (remq . c5079) (partition . c5078) (memv . c5077) (memq . c5076) (memp . c5075) (member . c5074) (exists . c5073) (for-all . c5072) (fold-right . c5071) (fold-left . c5070) (find . c506f) (filter . c506e) (cons* . c506d) (assv . c506c) (assq . c506b) (assp . c506a) (assoc . c5069) (call-with-string-output-port . c5068) (call-with-port . c5067) (call-with-bytevector-output-port . c5066) (bytevector->string . c5065) (buffer-mode? . c5064) (binary-port? . c5063) (with-exception-handler . c5062) (raise-continuable . c5061) (raise . c5060) (eval . c2f8e) (environment . c2f86) (make-enumeration . c505f) (enum-set=? . c505e) (enum-set-universe . c505d) (enum-set-union . c505c) (enum-set-subset? . c505b) (enum-set-projection . c505a) (enum-set-member? . c5059) (enum-set-intersection . c5058) (enum-set-indexer . c5057) (enum-set-difference . c5056) (enum-set-constructor . c5055) (enum-set-complement . c5054) (enum-set->list . c5053) (who-condition? . c4abc) (warning? . c4a34) (violation? . c4a73) (undefined-violation? . c4b33) (syntax-violation? . c4b1a) (syntax-violation-subform . c4b1e) (syntax-violation-form . c4b1c) (syntax-violation . c2fae) (simple-conditions . c5052) (serious-condition? . c4a49) (non-continuable-violation? . c4ad3) (message-condition? . c4a1d) (make-who-condition . c4ab8) (make-warning . c4a32) (make-violation . c4a71) (make-undefined-violation . c4b31) (make-syntax-violation . c4b14) (make-serious-condition . c4a47) (make-non-continuable-violation . c4ad1) (make-message-condition . c4a19) (make-lexical-violation . c4afb) (make-irritants-condition . c4a9d) (make-implementation-restriction-violation . c4ae6) (make-error . c4a5c) (make-assertion-violation . c4a86) (lexical-violation? . c4afd) (irritants-condition? . c4aa1) (implementation-restriction-violation? . c4ae8) (error? . c4a5e) (condition-who . c4abe) (condition-predicate . c5051) (condition-message . c4a1f) (condition-irritants . c4aa3) (condition-accessor . c5050) (condition . c504f) (assertion-violation? . c4a88) (condition? . c504e) (utf32->string . c504d) (utf16->string . c504c) (utf8->string . c504b) (uint-list->bytevector . c504a) (u8-list->bytevector . c5049) (string->utf8 . c5048) (string->utf32 . c5047) (string->utf16 . c5046) (sint-list->bytevector . c5045) (native-endianness . c5044) (bytevector? . c5043) (bytevector=? . c5042) (bytevector-uint-set! . c5041) (bytevector-uint-ref . c5040) (bytevector-u8-set! . c503f) (bytevector-u8-ref . c503e) (bytevector-u64-set! . c503d) (bytevector-u64-ref . c503c) (bytevector-u64-native-set! . c503b) (bytevector-u64-native-ref . c503a) (bytevector-u32-set! . c5039) (bytevector-u32-ref . c5038) (bytevector-u32-native-set! . c5037) (bytevector-u32-native-ref . c5036) (bytevector-u16-set! . c5035) (bytevector-u16-ref . c5034) (bytevector-u16-native-set! . c5033) (bytevector-u16-native-ref . c5032) (bytevector-sint-set! . c5031) (bytevector-sint-ref . c5030) (bytevector-s8-set! . c502f) (bytevector-s8-ref . c502e) (bytevector-s64-set! . c502d) (bytevector-s64-ref . c502c) (bytevector-s64-native-set! . c502b) (bytevector-s64-native-ref . c502a) (bytevector-s32-set! . c5029) (bytevector-s32-ref . c5028) (bytevector-s32-native-set! . c5027) (bytevector-s32-native-ref . c5026) (bytevector-s16-set! . c5025) (bytevector-s16-ref . c5024) (bytevector-s16-native-set! . c5023) (bytevector-s16-native-ref . c5022) (bytevector-length . c5021) (bytevector-ieee-single-ref . c5020) (bytevector-ieee-single-set! . c501f) (bytevector-ieee-single-native-set! . c501e) (bytevector-ieee-single-native-ref . c501d) (bytevector-ieee-double-set! . c501c) (bytevector-ieee-double-ref . c501b) (bytevector-ieee-double-native-set! . c501a) (bytevector-ieee-double-native-ref . c5019) (bytevector-fill! . c5018) (bytevector-copy! . c5017) (bytevector-copy . c5016) (bytevector->uint-list . c5015) (bytevector->u8-list . c5014) (bytevector->sint-list . c5013) (no-nans-violation? . c4c71) (no-infinities-violation? . c4c5c) (make-no-nans-violation . c4c6f) (make-no-infinities-violation . c4c5a) (real->flonum . c5012) (flzero? . c5011) (fltruncate . c5010) (fltan . c500f) (flsqrt . c500e) (flsin . c500d) (flround . c500c) (flpositive? . c500b) (flonum? . c500a) (flodd? . c5009) (flnumerator . c5008) (flnegative? . c5007) (flnan? . c5006) (flmod0 . c5005) (flmod . c5004) (flmin . c5003) (flmax . c5002) (fllog . c5001) (flinteger? . c5000) (flinfinite? . c4fff) (flfloor . c4ffe) (flfinite? . c4ffd) (flexpt . c4ffc) (flexp . c4ffb) (fleven? . c4ffa) (fldiv0-and-mod0 . c4ff9) (fldiv0 . c4ff8) (fldiv-and-mod . c4ff7) (fldiv . c4ff6) (fldenominator . c4ff5) (flcos . c4ff4) (flceiling . c4ff3) (flatan . c4ff2) (flasin . c4ff1) (flacos . c4ff0) (flabs . c4fef) (fl>? . c4fee) (fl>=? . c4fed) (fl=? . c4fec) (fl<? . c4feb) (fl<=? . c4fea) (fl/ . c4fe9) (fl- . c4fe8) (fl+ . c4fe7) (fl* . c4fe6) (fixnum->flonum . c4fe5) (fxzero? . c4fe4) (fxxor . c4fe3) (fxrotate-bit-field . c4fe2) (fxreverse-bit-field . c4fe1) (fxpositive? . c4fe0) (fxodd? . c4fdf) (fxnot . c4fde) (fxnegative? . c4fdd) (fxmod0 . c4fdc) (fxmod . c4fdb) (fxmin . c4fda) (fxmax . c4fd9) (fxlength . c4fd8) (fxior . c4fd7) (fxif . c4fd6) (fxfirst-bit-set . c4fd5) (fxeven? . c4fd4) (fxdiv0-and-mod0 . c4fd3) (fxdiv0 . c4fd2) (fxdiv-and-mod . c4fd1) (fxdiv . c4fd0) (fxcopy-bit-field . c4fcf) (fxcopy-bit . c4fce) (fxbit-set? . c4fcd) (fxbit-field . c4fcc) (fxbit-count . c4fcb) (fxarithmetic-shift-right . c4fca) (fxarithmetic-shift-left . c4fc9) (fxarithmetic-shift . c4fc8) (fxand . c4fc7) (fx>? . c4fc6) (fx>=? . c4fc5) (fx=? . c4fc4) (fx<? . c4fc3) (fx<=? . c4fc2) (fx-/carry . c4fc1) (fx- . c4fc0) (fx+/carry . c4fbf) (fx+ . c4fbe) (fx*/carry . c4fbd) (fx* . c4fbc) (greatest-fixnum . c4fbb) (least-fixnum . c4fba) (fixnum-width . c4fb9) (fixnum? . c4fb8) (bitwise-rotate-bit-field . c4fb7) (bitwise-reverse-bit-field . c4fb6) (bitwise-length . c4fb5) (bitwise-if . c4fb4) (bitwise-first-bit-set . c4fb3) (bitwise-copy-bit-field . c4fb2) (bitwise-copy-bit . c4fb1) (bitwise-bit-set? . c4fb0) (bitwise-bit-field . c4faf) (bitwise-bit-count . c4fae) (bitwise-xor . c4fad) (bitwise-ior . c4fac) (bitwise-and . c4fab) (bitwise-not . c4faa) (bitwise-arithmetic-shift-right . c4fa9) (bitwise-arithmetic-shift-left . c4fa8) (bitwise-arithmetic-shift . c4fa7) (zero? . c4fa6) (vector? . c4fa5) (vector-set! . c4fa4) (vector-ref . c4fa3) (vector-map . c4fa2) (vector-length . c4fa1) (vector-for-each . c4fa0) (vector-fill! . c4f9f) (vector->list . c4f9e) (vector . c4f9d) (values . c4f9c) (truncate . c4f9b) (tan . c4f9a) (symbol? . c4f99) (symbol=? . c4f98) (symbol->string . c4f97) (substring . c4f96) (string? . c4f95) (string>? . c4f94) (string>=? . c4f93) (string=? . c4f92) (string<? . c4f91) (string<=? . c4f90) (string-ref . c4f8f) (string-length . c4f8e) (string-for-each . c4f8d) (string-copy . c4f8c) (string-append . c4f8b) (string->symbol . c4f8a) (string->number . c4f89) (string->list . c4f88) (string . c4f87) (sqrt . c4f86) (sin . c4f85) (round . c4f84) (reverse . c4f83) (real? . c4f82) (real-valued? . c4f81) (real-part . c4f80) (rationalize . c4f7f) (rational? . c4f7e) (rational-valued? . c4f7d) (procedure? . c4f7c) (positive? . c4f7b) (pair? . c4f7a) (odd? . c4f79) (numerator . c4f78) (number? . c4f77) (number->string . c4f76) (null? . c4f75) (not . c4f74) (negative? . c4f73) (nan? . c4f72) (min . c4f71) (max . c4f70) (map . c4f6f) (make-vector . c4f6e) (make-string . c4f6d) (make-rectangular . c4f6c) (make-polar . c4f6b) (magnitude . c4f6a) (log . c4f69) (list? . c4f68) (list-tail . c4f67) (list-ref . c4f66) (list->vector . c4f65) (list->string . c4f64) (list . c4f63) (length . c4f62) (lcm . c4f61) (integer? . c4f60) (integer-valued? . c4f5f) (integer->char . c4f5e) (infinite? . c4f5d) (inexact? . c4f5c) (inexact . c4f5b) (imag-part . c4f5a) (gcd . c4f59) (for-each . c4f58) (floor . c4f57) (finite? . c4f56) (expt . c4f55) (exp . c4f54) (exact? . c4f53) (exact-integer-sqrt . c4f52) (exact . c4f51) (even? . c4f50) (error . c4f4f) (eqv? . c4f4e) (equal? . c4f4d) (eq? . c4f4c) (dynamic-wind . c4f4b) (div0-and-mod0 . c4f4a) (mod0 . c4f49) (div0 . c4f48) (div-and-mod . c4f47) (mod . c4f46) (div . c4f45) (denominator . c4f44) (cos . c4f43) (cons . c4f42) (complex? . c4f41) (char? . c4f40) (char>? . c4f3f) (char>=? . c4f3e) (char=? . c4f3d) (char<? . c4f3c) (char<=? . c4f3b) (char->integer . c4f3a) (ceiling . c4f39) (call-with-values . c4f38) (call/cc . c4f37) (call-with-current-continuation . c4f36) (cddddr . c4f35) (cdddar . c4f34) (cddadr . c4f33) (cddaar . c4f32) (cdaddr . c4f31) (cdadar . c4f30) (cdaadr . c4f2f) (cdaaar . c4f2e) (cadddr . c4f2d) (caddar . c4f2c) (cadadr . c4f2b) (cadaar . c4f2a) (caaddr . c4f29) (caadar . c4f28) (caaadr . c4f27) (caaaar . c4f26) (cdddr . c4f25) (cddar . c4f24) (cdadr . c4f23) (cdaar . c4f22) (caddr . c4f21) (cadar . c4f20) (caadr . c4f1f) (caaar . c4f1e) (cddr . c4f1d) (cdar . c4f1c) (cadr . c4f1b) (caar . c4f1a) (cdr . c4f19) (car . c4f18) (boolean? . c4f17) (boolean=? . c4f16) (atan . c4f15) (assertion-violation . c4f14) (asin . c4f13) (apply . c4f12) (append . c4f11) (angle . c4f10) (acos . c4f0f) (abs . c4f0e) (/ . c4f0d) (* . c4f0c) (- . c4f0b) (+ . c4f0a) (>= . c4f09) (> . c4f08) (= . c4f07) (<= . c4f06) (< . c4f05) (library . c4f04) (&no-nans . c4f03) (&no-infinities . c4f02) (&i/o-encoding . c4f01) (&i/o-decoding . c4f00) (&i/o-port . c4eff) (&i/o-file-does-not-exist . c4efe) (&i/o-file-already-exists . c4efd) (&i/o-file-is-read-only . c4efc) (&i/o-file-protection . c4efb) (&i/o-filename . c4efa) (&i/o-invalid-position . c4ef9) (&i/o-write . c4ef8) (&i/o-read . c4ef7) (&i/o . c4ef6) (&undefined . c4ef5) (&syntax . c4ef4) (&lexical . c4ef3) (&implementation-restriction . c4ef2) (&non-continuable . c4ef1) (&who . c4ef0) (&irritants . c4eef) (&assertion . c4eee) (&violation . c4eed) (&error . c4eec) (&serious . c4eeb) (&warning . c4eea) (&message . c4ee9) (&condition . c4ee8) (define-condition-type . c4ee7) (define-enumeration . c4ee6) (define-record-type . c4ee5) (parent-rtd . c4ee4) (nongenerative . c4ee3) (opaque . c4ee2) (sealed . c4ee1) (protocol . c4ee0) (parent . c4edf) (immutable . c4ede) (mutable . c4edd) (fields . c4edc) (error-handling-mode . c4edb) (file-options . c4eda) (buffer-mode . c4ed9) (eol-style . c4ed8) (guard . c4ed7) (unsyntax-splicing . c4ed4) (unsyntax . c4ed3) (unquote-splicing . c4ed2) (unquote . c4ed1) (_ . c4ed0) (else . c4ecf) (=> . c4ece) (... . c4ecd) (assert . c4ecc) (endianness . c4ecb) (time . c4ec9) (do . c4ec8) (cond . c4ec7) (let* . c4ec6) (let . c4ec5) (let*-values . c4ec4) (let-values . c4ec3) (identifier-syntax . c4ec2) (with-syntax . c4ec1) (quasisyntax . c4ec0) (quasiquote . c4ebf) (syntax-rules . c4ebe) (include . c4ebd) (record-constructor-descriptor . c4ebb) (record-type-descriptor . c4eba) (case . c4eb9) (unless . c4eb7) (when . c4eb6) (or . c4eb5) (and . c4eb4) (if . c4eb3) (letrec* . c4eb2) (letrec . c4eb1) (case-lambda . c4eaf) (lambda . c4eae) (syntax . c4ead) (syntax-case . c4eac) (quote . c4eab) (letrec-syntax . c4ea9) (let-syntax . c4ea8) (set! . c4ea7) (import . c4ea6) (begin . c4ea5) (define-syntax . c4ea3) (define . c4ea2)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5182 '(psyntax null-environment-5) '() '() '() '() '((make-promise . c5082) (unquote-splicing . c4ed2) (unquote . c4ed1) (_ . c4ed0) (else . c4ecf) (=> . c4ece) (... . c4ecd) (delay . c4eca) (do . c4ec8) (cond . c4ec7) (let* . c4ec6) (let . c4ec5) (quasiquote . c4ebf) (syntax-rules . c4ebe) (case . c4eb9) (or . c4eb5) (and . c4eb4) (if . c4eb3) (letrec . c4eb1) (lambda . c4eae) (quote . c4eab) (letrec-syntax . c4ea9) (let-syntax . c4ea8) (set! . c4ea7) (begin . c4ea5) (define-syntax . c4ea3) (define . c4ea2)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5183 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . c5117) (string-ci>=? . c5116) (string-ci=? . c5115) (string-ci<? . c5114) (string-ci<=? . c5113) (char-whitespace? . c5112) (char-upper-case? . c5111) (char-numeric? . c510f) (char-lower-case? . c510e) (char-upcase . c510c) (char-downcase . c5109) (char-ci>? . c5108) (char-ci>=? . c5107) (char-ci=? . c5106) (char-ci<? . c5105) (char-ci<=? . c5104) (char-alphabetic? . c5103) (call-with-output-file . c50d7) (call-with-input-file . c50d6) (write-char . c50d5) (write . c50d4) (with-output-to-file . c50d3) (with-input-from-file . c50d2) (read-char . c50d1) (read . c50d0) (peek-char . c50cf) (open-output-file . c50ce) (open-input-file . c50cd) (newline . c50cc) (display . c50cb) (close-output-port . c50ca) (close-input-port . c50c9) (eof-object . c50c7) (current-output-port . c50c5) (current-input-port . c50c4) (output-port? . c50c3) (input-port? . c50c2) (scheme-report-environment . c2f8a) (quotient . c5088) (null-environment . c2f88) (remainder . c5087) (modulo . c5086) (inexact->exact . c5085) (force . c5084) (exact->inexact . c5083) (make-promise . c5082) (string-fill! . c5080) (string-set! . c507f) (set-cdr! . c507e) (set-car! . c507d) (memv . c5077) (memq . c5076) (member . c5074) (assv . c506c) (assq . c506b) (assoc . c5069) (eval . c2f8e) (zero? . c4fa6) (vector? . c4fa5) (vector-set! . c4fa4) (vector-ref . c4fa3) (vector-length . c4fa1) (vector-fill! . c4f9f) (vector->list . c4f9e) (vector . c4f9d) (values . c4f9c) (truncate . c4f9b) (tan . c4f9a) (symbol? . c4f99) (symbol->string . c4f97) (substring . c4f96) (string? . c4f95) (string>? . c4f94) (string>=? . c4f93) (string=? . c4f92) (string<? . c4f91) (string<=? . c4f90) (string-ref . c4f8f) (string-length . c4f8e) (string-copy . c4f8c) (string-append . c4f8b) (string->symbol . c4f8a) (string->number . c4f89) (string->list . c4f88) (string . c4f87) (sqrt . c4f86) (sin . c4f85) (round . c4f84) (reverse . c4f83) (real? . c4f82) (real-part . c4f80) (rationalize . c4f7f) (rational? . c4f7e) (procedure? . c4f7c) (positive? . c4f7b) (pair? . c4f7a) (odd? . c4f79) (numerator . c4f78) (number? . c4f77) (number->string . c4f76) (not . c4f74) (negative? . c4f73) (min . c4f71) (max . c4f70) (map . c4f6f) (make-vector . c4f6e) (make-string . c4f6d) (make-rectangular . c4f6c) (make-polar . c4f6b) (magnitude . c4f6a) (log . c4f69) (list? . c4f68) (list-tail . c4f67) (list-ref . c4f66) (list->vector . c4f65) (list->string . c4f64) (list . c4f63) (length . c4f62) (lcm . c4f61) (integer? . c4f60) (integer->char . c4f5e) (inexact? . c4f5c) (imag-part . c4f5a) (gcd . c4f59) (for-each . c4f58) (floor . c4f57) (expt . c4f55) (exp . c4f54) (exact? . c4f53) (even? . c4f50) (eqv? . c4f4e) (equal? . c4f4d) (eq? . c4f4c) (dynamic-wind . c4f4b) (denominator . c4f44) (cos . c4f43) (cons . c4f42) (complex? . c4f41) (char? . c4f40) (char>? . c4f3f) (char>=? . c4f3e) (char=? . c4f3d) (char<? . c4f3c) (char<=? . c4f3b) (char->integer . c4f3a) (ceiling . c4f39) (call-with-values . c4f38) (call-with-current-continuation . c4f36) (cddddr . c4f35) (cdddar . c4f34) (cddadr . c4f33) (cddaar . c4f32) (cdaddr . c4f31) (cdadar . c4f30) (cdaadr . c4f2f) (cdaaar . c4f2e) (cadddr . c4f2d) (caddar . c4f2c) (cadadr . c4f2b) (cadaar . c4f2a) (caaddr . c4f29) (caadar . c4f28) (caaadr . c4f27) (caaaar . c4f26) (cdddr . c4f25) (cddar . c4f24) (cdadr . c4f23) (cdaar . c4f22) (caddr . c4f21) (cadar . c4f20) (caadr . c4f1f) (caaar . c4f1e) (cddr . c4f1d) (cdar . c4f1c) (cadr . c4f1b) (caar . c4f1a) (cdr . c4f19) (car . c4f18) (boolean? . c4f17) (atan . c4f15) (asin . c4f13) (apply . c4f12) (append . c4f11) (angle . c4f10) (acos . c4f0f) (abs . c4f0e) (/ . c4f0d) (* . c4f0c) (- . c4f0b) (+ . c4f0a) (>= . c4f09) (> . c4f08) (= . c4f07) (<= . c4f06) (< . c4f05) (unquote-splicing . c4ed2) (unquote . c4ed1) (else . c4ecf) (=> . c4ece) (... . c4ecd) (delay . c4eca) (do . c4ec8) (cond . c4ec7) (let* . c4ec6) (let . c4ec5) (quasiquote . c4ebf) (syntax-rules . c4ebe) (case . c4eb9) (or . c4eb5) (and . c4eb4) (if . c4eb3) (letrec . c4eb1) (lambda . c4eae) (quote . c4eab) (letrec-syntax . c4ea9) (let-syntax . c4ea8) (set! . c4ea7) (begin . c4ea5) (define-syntax . c4ea3) (define . c4ea2)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5184 '(psyntax modules) '() '() '() '() '((module . c4ea4)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5185 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5186 '(rnrs) '(6) '() '() '() '((regexp? . c5179) (string-upcase . c511f) (string-titlecase . c511e) (string-normalize-nfkd . c511d) (string-normalize-nfkc . c511c) (string-normalize-nfd . c511b) (string-normalize-nfc . c511a) (string-foldcase . c5119) (string-downcase . c5118) (string-ci>? . c5117) (string-ci>=? . c5116) (string-ci=? . c5115) (string-ci<? . c5114) (string-ci<=? . c5113) (char-whitespace? . c5112) (char-upper-case? . c5111) (char-title-case? . c5110) (char-numeric? . c510f) (char-lower-case? . c510e) (char-general-category . c510d) (char-upcase . c510c) (char-titlecase . c510b) (char-foldcase . c510a) (char-downcase . c5109) (char-ci>? . c5108) (char-ci>=? . c5107) (char-ci=? . c5106) (char-ci<? . c5105) (char-ci<=? . c5104) (char-alphabetic? . c5103) (make-variable-transformer . c2cf2) (identifier? . c2fb0) (generate-temporaries . c2f9c) (free-identifier=? . c2f9e) (syntax->datum . c2fb4) (datum->syntax . c2fb2) (bound-identifier=? . c2fa0) (record-type-descriptor? . c5102) (record-predicate . c5101) (record-mutator . c5100) (record-constructor . c50ff) (record-accessor . c50fe) (make-record-type-descriptor . c50fd) (make-record-constructor-descriptor . c50fc) (record? . c50fb) (record-type-uid . c50fa) (record-type-sealed? . c50f9) (record-type-parent . c50f8) (record-type-opaque? . c50f7) (record-type-name . c50f6) (record-type-generative? . c50f5) (record-type-field-names . c50f4) (record-rtd . c50f3) (record-field-mutable? . c50f2) (delete-file . c50f1) (file-exists? . c50f0) (vector-sort! . c50ef) (vector-sort . c50ee) (list-sort . c50ed) (symbol-hash . c50ec) (string-ci-hash . c50eb) (string-hash . c50ea) (equal-hash . c50e9) (hashtable-equivalence-function . c50e8) (make-hashtable . c50e7) (hashtable-hash-function . c50e6) (make-eqv-hashtable . c50e5) (make-eq-hashtable . c50e4) (hashtable? . c50e3) (hashtable-update! . c50e2) (hashtable-size . c50e1) (hashtable-set! . c50e0) (hashtable-ref . c50df) (hashtable-mutable? . c50de) (hashtable-keys . c50dd) (hashtable-entries . c50dc) (hashtable-delete! . c50db) (hashtable-copy . c50da) (hashtable-contains? . c50d9) (hashtable-clear! . c50d8) (call-with-output-file . c50d7) (call-with-input-file . c50d6) (write-char . c50d5) (write . c50d4) (with-output-to-file . c50d3) (with-input-from-file . c50d2) (read-char . c50d1) (read . c50d0) (peek-char . c50cf) (open-output-file . c50ce) (open-input-file . c50cd) (newline . c50cc) (display . c50cb) (close-output-port . c50ca) (close-input-port . c50c9) (eof-object? . c50c8) (eof-object . c50c7) (current-error-port . c50c6) (current-output-port . c50c5) (current-input-port . c50c4) (output-port? . c50c3) (input-port? . c50c2) (utf-8-codec . c50c1) (utf-16-codec . c50c0) (transcoder-error-handling-mode . c50bf) (transcoder-eol-style . c50be) (transcoder-codec . c50bd) (transcoded-port . c50bc) (textual-port? . c50bb) (string->bytevector . c50ba) (standard-output-port . c50b9) (standard-input-port . c50b8) (standard-error-port . c50b7) (set-port-position! . c50b6) (put-u8 . c50b5) (put-string . c50b4) (put-datum . c50b3) (put-char . c50b2) (put-bytevector . c50b1) (port? . c50b0) (port-transcoder . c50af) (port-position . c50ae) (port-has-set-port-position!? . c50ad) (port-has-port-position? . c50ac) (port-eof? . c50ab) (output-port-buffer-mode . c50aa) (open-string-output-port . c50a9) (open-string-input-port . c50a8) (open-file-output-port . c50a7) (open-file-input/output-port . c50a6) (open-file-input-port . c50a5) (open-bytevector-output-port . c50a4) (open-bytevector-input-port . c50a3) (native-transcoder . c50a2) (native-eol-style . c50a1) (make-transcoder . c50a0) (latin-1-codec . c509f) (make-i/o-write-error . c4b70) (make-i/o-read-error . c4b5b) (make-i/o-port-error . c4c11) (make-i/o-invalid-position-error . c4b87) (make-i/o-filename-error . c4ba2) (make-i/o-file-protection-error . c4bbb) (make-i/o-file-is-read-only-error . c4bd0) (make-i/o-file-does-not-exist-error . c4bfa) (make-i/o-file-already-exists-error . c4be5) (make-i/o-error . c4b46) (make-i/o-encoding-error . c4c41) (make-i/o-decoding-error . c4c2a) (make-custom-textual-output-port . c509e) (make-custom-textual-input/output-port . c509d) (make-custom-textual-input-port . c509c) (make-custom-binary-output-port . c509b) (make-custom-binary-input/output-port . c509a) (make-custom-binary-input-port . c5099) (make-bytevector . c5098) (lookahead-u8 . c5097) (lookahead-char . c5096) (i/o-write-error? . c4b72) (i/o-read-error? . c4b5d) (i/o-port-error? . c4c15) (i/o-invalid-position-error? . c4b8b) (i/o-filename-error? . c4ba6) (i/o-file-protection-error? . c4bbd) (i/o-file-is-read-only-error? . c4bd2) (i/o-file-does-not-exist-error? . c4bfc) (i/o-file-already-exists-error? . c4be7) (i/o-error? . c4b48) (i/o-error-position . c4b8d) (i/o-error-port . c4c17) (i/o-error-filename . c4ba8) (i/o-encoding-error? . c4c45) (i/o-encoding-error-char . c4c47) (i/o-decoding-error? . c4c2c) (get-u8 . c5095) (get-string-n! . c5094) (get-string-n . c5093) (get-string-all . c5092) (get-line . c5091) (get-datum . c5090) (get-char . c508f) (get-bytevector-some . c508e) (get-bytevector-n! . c508d) (get-bytevector-n . c508c) (get-bytevector-all . c508b) (flush-output-port . c508a) (close-port . c5089) (exit . c5081) (command-line . c4d7c) (remove . c507c) (remv . c507b) (remp . c507a) (remq . c5079) (partition . c5078) (memv . c5077) (memq . c5076) (memp . c5075) (member . c5074) (exists . c5073) (for-all . c5072) (fold-right . c5071) (fold-left . c5070) (find . c506f) (filter . c506e) (cons* . c506d) (assv . c506c) (assq . c506b) (assp . c506a) (assoc . c5069) (call-with-string-output-port . c5068) (call-with-port . c5067) (call-with-bytevector-output-port . c5066) (bytevector->string . c5065) (buffer-mode? . c5064) (binary-port? . c5063) (with-exception-handler . c5062) (raise-continuable . c5061) (raise . c5060) (make-enumeration . c505f) (enum-set=? . c505e) (enum-set-universe . c505d) (enum-set-union . c505c) (enum-set-subset? . c505b) (enum-set-projection . c505a) (enum-set-member? . c5059) (enum-set-intersection . c5058) (enum-set-indexer . c5057) (enum-set-difference . c5056) (enum-set-constructor . c5055) (enum-set-complement . c5054) (enum-set->list . c5053) (who-condition? . c4abc) (warning? . c4a34) (violation? . c4a73) (undefined-violation? . c4b33) (syntax-violation? . c4b1a) (syntax-violation-subform . c4b1e) (syntax-violation-form . c4b1c) (syntax-violation . c2fae) (simple-conditions . c5052) (serious-condition? . c4a49) (non-continuable-violation? . c4ad3) (message-condition? . c4a1d) (make-who-condition . c4ab8) (make-warning . c4a32) (make-violation . c4a71) (make-undefined-violation . c4b31) (make-syntax-violation . c4b14) (make-serious-condition . c4a47) (make-non-continuable-violation . c4ad1) (make-message-condition . c4a19) (make-lexical-violation . c4afb) (make-irritants-condition . c4a9d) (make-implementation-restriction-violation . c4ae6) (make-error . c4a5c) (make-assertion-violation . c4a86) (lexical-violation? . c4afd) (irritants-condition? . c4aa1) (implementation-restriction-violation? . c4ae8) (error? . c4a5e) (condition-who . c4abe) (condition-predicate . c5051) (condition-message . c4a1f) (condition-irritants . c4aa3) (condition-accessor . c5050) (condition . c504f) (assertion-violation? . c4a88) (condition? . c504e) (utf32->string . c504d) (utf16->string . c504c) (utf8->string . c504b) (uint-list->bytevector . c504a) (u8-list->bytevector . c5049) (string->utf8 . c5048) (string->utf32 . c5047) (string->utf16 . c5046) (sint-list->bytevector . c5045) (native-endianness . c5044) (bytevector? . c5043) (bytevector=? . c5042) (bytevector-uint-set! . c5041) (bytevector-uint-ref . c5040) (bytevector-u8-set! . c503f) (bytevector-u8-ref . c503e) (bytevector-u64-set! . c503d) (bytevector-u64-ref . c503c) (bytevector-u64-native-set! . c503b) (bytevector-u64-native-ref . c503a) (bytevector-u32-set! . c5039) (bytevector-u32-ref . c5038) (bytevector-u32-native-set! . c5037) (bytevector-u32-native-ref . c5036) (bytevector-u16-set! . c5035) (bytevector-u16-ref . c5034) (bytevector-u16-native-set! . c5033) (bytevector-u16-native-ref . c5032) (bytevector-sint-set! . c5031) (bytevector-sint-ref . c5030) (bytevector-s8-set! . c502f) (bytevector-s8-ref . c502e) (bytevector-s64-set! . c502d) (bytevector-s64-ref . c502c) (bytevector-s64-native-set! . c502b) (bytevector-s64-native-ref . c502a) (bytevector-s32-set! . c5029) (bytevector-s32-ref . c5028) (bytevector-s32-native-set! . c5027) (bytevector-s32-native-ref . c5026) (bytevector-s16-set! . c5025) (bytevector-s16-ref . c5024) (bytevector-s16-native-set! . c5023) (bytevector-s16-native-ref . c5022) (bytevector-length . c5021) (bytevector-ieee-single-ref . c5020) (bytevector-ieee-single-set! . c501f) (bytevector-ieee-single-native-set! . c501e) (bytevector-ieee-single-native-ref . c501d) (bytevector-ieee-double-set! . c501c) (bytevector-ieee-double-ref . c501b) (bytevector-ieee-double-native-set! . c501a) (bytevector-ieee-double-native-ref . c5019) (bytevector-fill! . c5018) (bytevector-copy! . c5017) (bytevector-copy . c5016) (bytevector->uint-list . c5015) (bytevector->u8-list . c5014) (bytevector->sint-list . c5013) (no-nans-violation? . c4c71) (no-infinities-violation? . c4c5c) (make-no-nans-violation . c4c6f) (make-no-infinities-violation . c4c5a) (real->flonum . c5012) (flzero? . c5011) (fltruncate . c5010) (fltan . c500f) (flsqrt . c500e) (flsin . c500d) (flround . c500c) (flpositive? . c500b) (flonum? . c500a) (flodd? . c5009) (flnumerator . c5008) (flnegative? . c5007) (flnan? . c5006) (flmod0 . c5005) (flmod . c5004) (flmin . c5003) (flmax . c5002) (fllog . c5001) (flinteger? . c5000) (flinfinite? . c4fff) (flfloor . c4ffe) (flfinite? . c4ffd) (flexpt . c4ffc) (flexp . c4ffb) (fleven? . c4ffa) (fldiv0-and-mod0 . c4ff9) (fldiv0 . c4ff8) (fldiv-and-mod . c4ff7) (fldiv . c4ff6) (fldenominator . c4ff5) (flcos . c4ff4) (flceiling . c4ff3) (flatan . c4ff2) (flasin . c4ff1) (flacos . c4ff0) (flabs . c4fef) (fl>? . c4fee) (fl>=? . c4fed) (fl=? . c4fec) (fl<? . c4feb) (fl<=? . c4fea) (fl/ . c4fe9) (fl- . c4fe8) (fl+ . c4fe7) (fl* . c4fe6) (fixnum->flonum . c4fe5) (fxzero? . c4fe4) (fxxor . c4fe3) (fxrotate-bit-field . c4fe2) (fxreverse-bit-field . c4fe1) (fxpositive? . c4fe0) (fxodd? . c4fdf) (fxnot . c4fde) (fxnegative? . c4fdd) (fxmod0 . c4fdc) (fxmod . c4fdb) (fxmin . c4fda) (fxmax . c4fd9) (fxlength . c4fd8) (fxior . c4fd7) (fxif . c4fd6) (fxfirst-bit-set . c4fd5) (fxeven? . c4fd4) (fxdiv0-and-mod0 . c4fd3) (fxdiv0 . c4fd2) (fxdiv-and-mod . c4fd1) (fxdiv . c4fd0) (fxcopy-bit-field . c4fcf) (fxcopy-bit . c4fce) (fxbit-set? . c4fcd) (fxbit-field . c4fcc) (fxbit-count . c4fcb) (fxarithmetic-shift-right . c4fca) (fxarithmetic-shift-left . c4fc9) (fxarithmetic-shift . c4fc8) (fxand . c4fc7) (fx>? . c4fc6) (fx>=? . c4fc5) (fx=? . c4fc4) (fx<? . c4fc3) (fx<=? . c4fc2) (fx-/carry . c4fc1) (fx- . c4fc0) (fx+/carry . c4fbf) (fx+ . c4fbe) (fx*/carry . c4fbd) (fx* . c4fbc) (greatest-fixnum . c4fbb) (least-fixnum . c4fba) (fixnum-width . c4fb9) (fixnum? . c4fb8) (bitwise-rotate-bit-field . c4fb7) (bitwise-reverse-bit-field . c4fb6) (bitwise-length . c4fb5) (bitwise-if . c4fb4) (bitwise-first-bit-set . c4fb3) (bitwise-copy-bit-field . c4fb2) (bitwise-copy-bit . c4fb1) (bitwise-bit-set? . c4fb0) (bitwise-bit-field . c4faf) (bitwise-bit-count . c4fae) (bitwise-xor . c4fad) (bitwise-ior . c4fac) (bitwise-and . c4fab) (bitwise-not . c4faa) (bitwise-arithmetic-shift-right . c4fa9) (bitwise-arithmetic-shift-left . c4fa8) (bitwise-arithmetic-shift . c4fa7) (zero? . c4fa6) (vector? . c4fa5) (vector-set! . c4fa4) (vector-ref . c4fa3) (vector-map . c4fa2) (vector-length . c4fa1) (vector-for-each . c4fa0) (vector-fill! . c4f9f) (vector->list . c4f9e) (vector . c4f9d) (values . c4f9c) (truncate . c4f9b) (tan . c4f9a) (symbol? . c4f99) (symbol=? . c4f98) (symbol->string . c4f97) (substring . c4f96) (string? . c4f95) (string>? . c4f94) (string>=? . c4f93) (string=? . c4f92) (string<? . c4f91) (string<=? . c4f90) (string-ref . c4f8f) (string-length . c4f8e) (string-for-each . c4f8d) (string-copy . c4f8c) (string-append . c4f8b) (string->symbol . c4f8a) (string->number . c4f89) (string->list . c4f88) (string . c4f87) (sqrt . c4f86) (sin . c4f85) (round . c4f84) (reverse . c4f83) (real? . c4f82) (real-valued? . c4f81) (real-part . c4f80) (rationalize . c4f7f) (rational? . c4f7e) (rational-valued? . c4f7d) (procedure? . c4f7c) (positive? . c4f7b) (pair? . c4f7a) (odd? . c4f79) (numerator . c4f78) (number? . c4f77) (number->string . c4f76) (null? . c4f75) (not . c4f74) (negative? . c4f73) (nan? . c4f72) (min . c4f71) (max . c4f70) (map . c4f6f) (make-vector . c4f6e) (make-string . c4f6d) (make-rectangular . c4f6c) (make-polar . c4f6b) (magnitude . c4f6a) (log . c4f69) (list? . c4f68) (list-tail . c4f67) (list-ref . c4f66) (list->vector . c4f65) (list->string . c4f64) (list . c4f63) (length . c4f62) (lcm . c4f61) (integer? . c4f60) (integer-valued? . c4f5f) (integer->char . c4f5e) (infinite? . c4f5d) (inexact? . c4f5c) (inexact . c4f5b) (imag-part . c4f5a) (gcd . c4f59) (for-each . c4f58) (floor . c4f57) (finite? . c4f56) (expt . c4f55) (exp . c4f54) (exact? . c4f53) (exact-integer-sqrt . c4f52) (exact . c4f51) (even? . c4f50) (error . c4f4f) (eqv? . c4f4e) (equal? . c4f4d) (eq? . c4f4c) (dynamic-wind . c4f4b) (div0-and-mod0 . c4f4a) (mod0 . c4f49) (div0 . c4f48) (div-and-mod . c4f47) (mod . c4f46) (div . c4f45) (denominator . c4f44) (cos . c4f43) (cons . c4f42) (complex? . c4f41) (char? . c4f40) (char>? . c4f3f) (char>=? . c4f3e) (char=? . c4f3d) (char<? . c4f3c) (char<=? . c4f3b) (char->integer . c4f3a) (ceiling . c4f39) (call-with-values . c4f38) (call/cc . c4f37) (call-with-current-continuation . c4f36) (cddddr . c4f35) (cdddar . c4f34) (cddadr . c4f33) (cddaar . c4f32) (cdaddr . c4f31) (cdadar . c4f30) (cdaadr . c4f2f) (cdaaar . c4f2e) (cadddr . c4f2d) (caddar . c4f2c) (cadadr . c4f2b) (cadaar . c4f2a) (caaddr . c4f29) (caadar . c4f28) (caaadr . c4f27) (caaaar . c4f26) (cdddr . c4f25) (cddar . c4f24) (cdadr . c4f23) (cdaar . c4f22) (caddr . c4f21) (cadar . c4f20) (caadr . c4f1f) (caaar . c4f1e) (cddr . c4f1d) (cdar . c4f1c) (cadr . c4f1b) (caar . c4f1a) (cdr . c4f19) (car . c4f18) (boolean? . c4f17) (boolean=? . c4f16) (atan . c4f15) (assertion-violation . c4f14) (asin . c4f13) (apply . c4f12) (append . c4f11) (angle . c4f10) (acos . c4f0f) (abs . c4f0e) (/ . c4f0d) (* . c4f0c) (- . c4f0b) (+ . c4f0a) (>= . c4f09) (> . c4f08) (= . c4f07) (<= . c4f06) (< . c4f05) (&no-nans . c4f03) (&no-infinities . c4f02) (&i/o-encoding . c4f01) (&i/o-decoding . c4f00) (&i/o-port . c4eff) (&i/o-file-does-not-exist . c4efe) (&i/o-file-already-exists . c4efd) (&i/o-file-is-read-only . c4efc) (&i/o-file-protection . c4efb) (&i/o-filename . c4efa) (&i/o-invalid-position . c4ef9) (&i/o-write . c4ef8) (&i/o-read . c4ef7) (&i/o . c4ef6) (&undefined . c4ef5) (&syntax . c4ef4) (&lexical . c4ef3) (&implementation-restriction . c4ef2) (&non-continuable . c4ef1) (&who . c4ef0) (&irritants . c4eef) (&assertion . c4eee) (&violation . c4eed) (&error . c4eec) (&serious . c4eeb) (&warning . c4eea) (&message . c4ee9) (&condition . c4ee8) (define-condition-type . c4ee7) (define-enumeration . c4ee6) (define-record-type . c4ee5) (parent-rtd . c4ee4) (nongenerative . c4ee3) (opaque . c4ee2) (sealed . c4ee1) (protocol . c4ee0) (parent . c4edf) (immutable . c4ede) (mutable . c4edd) (fields . c4edc) (error-handling-mode . c4edb) (file-options . c4eda) (buffer-mode . c4ed9) (eol-style . c4ed8) (guard . c4ed7) (unsyntax-splicing . c4ed4) (unsyntax . c4ed3) (unquote-splicing . c4ed2) (unquote . c4ed1) (_ . c4ed0) (else . c4ecf) (=> . c4ece) (... . c4ecd) (assert . c4ecc) (endianness . c4ecb) (do . c4ec8) (cond . c4ec7) (let* . c4ec6) (let . c4ec5) (let*-values . c4ec4) (let-values . c4ec3) (identifier-syntax . c4ec2) (with-syntax . c4ec1) (quasisyntax . c4ec0) (quasiquote . c4ebf) (syntax-rules . c4ebe) (record-constructor-descriptor . c4ebb) (record-type-descriptor . c4eba) (case . c4eb9) (unless . c4eb7) (when . c4eb6) (or . c4eb5) (and . c4eb4) (if . c4eb3) (letrec* . c4eb2) (letrec . c4eb1) (case-lambda . c4eaf) (lambda . c4eae) (syntax . c4ead) (syntax-case . c4eac) (quote . c4eab) (letrec-syntax . c4ea9) (let-syntax . c4ea8) (set! . c4ea7) (begin . c4ea5) (define-syntax . c4ea3) (define . c4ea2)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5187 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . c2f8a) (quotient . c5088) (null-environment . c2f88) (remainder . c5087) (modulo . c5086) (inexact->exact . c5085) (force . c5084) (exact->inexact . c5083) (make-promise . c5082) (delay . c4eca)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5188 '(rnrs control) '(6) '() '() '() '((do . c4ec8) (unless . c4eb7) (when . c4eb6) (case-lambda . c4eaf)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5189 '(rnrs eval) '(6) '() '() '() '((eval . c2f8e) (environment . c2f86)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c518a '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . c507e) (set-car! . c507d)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c518b '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . c5080) (string-set! . c507f)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c518c '(rnrs programs) '(6) '() '() '() '((exit . c5081) (command-line . c4d7c)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c518d '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . c2cf2) (identifier? . c2fb0) (generate-temporaries . c2f9c) (free-identifier=? . c2f9e) (syntax->datum . c2fb4) (datum->syntax . c2fb2) (bound-identifier=? . c2fa0) (syntax-violation . c2fae) (unsyntax-splicing . c4ed4) (unsyntax . c4ed3) (_ . c4ed0) (... . c4ecd) (with-syntax . c4ec1) (quasisyntax . c4ec0) (syntax . c4ead) (syntax-case . c4eac)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c518e '(rnrs files) '(6) '() '() '() '((delete-file . c50f1) (file-exists? . c50f0) (make-i/o-write-error . c4b70) (make-i/o-read-error . c4b5b) (make-i/o-port-error . c4c11) (make-i/o-invalid-position-error . c4b87) (make-i/o-filename-error . c4ba2) (make-i/o-file-protection-error . c4bbb) (make-i/o-file-is-read-only-error . c4bd0) (make-i/o-file-does-not-exist-error . c4bfa) (make-i/o-file-already-exists-error . c4be5) (make-i/o-error . c4b46) (i/o-write-error? . c4b72) (i/o-read-error? . c4b5d) (i/o-port-error? . c4c15) (i/o-invalid-position-error? . c4b8b) (i/o-filename-error? . c4ba6) (i/o-file-protection-error? . c4bbd) (i/o-file-is-read-only-error? . c4bd2) (i/o-file-does-not-exist-error? . c4bfc) (i/o-file-already-exists-error? . c4be7) (i/o-error? . c4b48) (i/o-error-position . c4b8d) (i/o-error-port . c4c17) (i/o-error-filename . c4ba8) (&i/o-port . c4eff) (&i/o-file-does-not-exist . c4efe) (&i/o-file-already-exists . c4efd) (&i/o-file-is-read-only . c4efc) (&i/o-file-protection . c4efb) (&i/o-filename . c4efa) (&i/o-invalid-position . c4ef9) (&i/o-write . c4ef8) (&i/o-read . c4ef7) (&i/o . c4ef6)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c518f '(rnrs sorting) '(6) '() '() '() '((vector-sort! . c50ef) (vector-sort . c50ee) (list-sort . c50ed)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5190 '(rnrs base) '(6) '() '() '() '((zero? . c4fa6) (vector? . c4fa5) (vector-set! . c4fa4) (vector-ref . c4fa3) (vector-map . c4fa2) (vector-length . c4fa1) (vector-for-each . c4fa0) (vector-fill! . c4f9f) (vector->list . c4f9e) (vector . c4f9d) (values . c4f9c) (truncate . c4f9b) (tan . c4f9a) (symbol? . c4f99) (symbol=? . c4f98) (symbol->string . c4f97) (substring . c4f96) (string? . c4f95) (string>? . c4f94) (string>=? . c4f93) (string=? . c4f92) (string<? . c4f91) (string<=? . c4f90) (string-ref . c4f8f) (string-length . c4f8e) (string-for-each . c4f8d) (string-copy . c4f8c) (string-append . c4f8b) (string->symbol . c4f8a) (string->number . c4f89) (string->list . c4f88) (string . c4f87) (sqrt . c4f86) (sin . c4f85) (round . c4f84) (reverse . c4f83) (real? . c4f82) (real-valued? . c4f81) (real-part . c4f80) (rationalize . c4f7f) (rational? . c4f7e) (rational-valued? . c4f7d) (procedure? . c4f7c) (positive? . c4f7b) (pair? . c4f7a) (odd? . c4f79) (numerator . c4f78) (number? . c4f77) (number->string . c4f76) (null? . c4f75) (not . c4f74) (negative? . c4f73) (nan? . c4f72) (min . c4f71) (max . c4f70) (map . c4f6f) (make-vector . c4f6e) (make-string . c4f6d) (make-rectangular . c4f6c) (make-polar . c4f6b) (magnitude . c4f6a) (log . c4f69) (list? . c4f68) (list-tail . c4f67) (list-ref . c4f66) (list->vector . c4f65) (list->string . c4f64) (list . c4f63) (length . c4f62) (lcm . c4f61) (integer? . c4f60) (integer-valued? . c4f5f) (integer->char . c4f5e) (infinite? . c4f5d) (inexact? . c4f5c) (inexact . c4f5b) (imag-part . c4f5a) (gcd . c4f59) (for-each . c4f58) (floor . c4f57) (finite? . c4f56) (expt . c4f55) (exp . c4f54) (exact? . c4f53) (exact-integer-sqrt . c4f52) (exact . c4f51) (even? . c4f50) (error . c4f4f) (eqv? . c4f4e) (equal? . c4f4d) (eq? . c4f4c) (dynamic-wind . c4f4b) (div0-and-mod0 . c4f4a) (mod0 . c4f49) (div0 . c4f48) (div-and-mod . c4f47) (mod . c4f46) (div . c4f45) (denominator . c4f44) (cos . c4f43) (cons . c4f42) (complex? . c4f41) (char? . c4f40) (char>? . c4f3f) (char>=? . c4f3e) (char=? . c4f3d) (char<? . c4f3c) (char<=? . c4f3b) (char->integer . c4f3a) (ceiling . c4f39) (call-with-values . c4f38) (call/cc . c4f37) (call-with-current-continuation . c4f36) (cddddr . c4f35) (cdddar . c4f34) (cddadr . c4f33) (cddaar . c4f32) (cdaddr . c4f31) (cdadar . c4f30) (cdaadr . c4f2f) (cdaaar . c4f2e) (cadddr . c4f2d) (caddar . c4f2c) (cadadr . c4f2b) (cadaar . c4f2a) (caaddr . c4f29) (caadar . c4f28) (caaadr . c4f27) (caaaar . c4f26) (cdddr . c4f25) (cddar . c4f24) (cdadr . c4f23) (cdaar . c4f22) (caddr . c4f21) (cadar . c4f20) (caadr . c4f1f) (caaar . c4f1e) (cddr . c4f1d) (cdar . c4f1c) (cadr . c4f1b) (caar . c4f1a) (cdr . c4f19) (car . c4f18) (boolean? . c4f17) (boolean=? . c4f16) (atan . c4f15) (assertion-violation . c4f14) (asin . c4f13) (apply . c4f12) (append . c4f11) (angle . c4f10) (acos . c4f0f) (abs . c4f0e) (/ . c4f0d) (* . c4f0c) (- . c4f0b) (+ . c4f0a) (>= . c4f09) (> . c4f08) (= . c4f07) (<= . c4f06) (< . c4f05) (unquote-splicing . c4ed2) (unquote . c4ed1) (_ . c4ed0) (else . c4ecf) (=> . c4ece) (... . c4ecd) (assert . c4ecc) (cond . c4ec7) (let* . c4ec6) (let . c4ec5) (let*-values . c4ec4) (let-values . c4ec3) (identifier-syntax . c4ec2) (quasiquote . c4ebf) (syntax-rules . c4ebe) (case . c4eb9) (or . c4eb5) (and . c4eb4) (if . c4eb3) (letrec* . c4eb2) (letrec . c4eb1) (lambda . c4eae) (quote . c4eab) (letrec-syntax . c4ea9) (let-syntax . c4ea8) (set! . c4ea7) (begin . c4ea5) (define-syntax . c4ea3) (define . c4ea2)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5191 '(rnrs lists) '(6) '() '() '() '((remove . c507c) (remv . c507b) (remp . c507a) (remq . c5079) (partition . c5078) (memv . c5077) (memq . c5076) (memp . c5075) (member . c5074) (exists . c5073) (for-all . c5072) (fold-right . c5071) (fold-left . c5070) (find . c506f) (filter . c506e) (cons* . c506d) (assv . c506c) (assq . c506b) (assp . c506a) (assoc . c5069)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5192 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . c50d7) (call-with-input-file . c50d6) (write-char . c50d5) (write . c50d4) (with-output-to-file . c50d3) (with-input-from-file . c50d2) (read-char . c50d1) (read . c50d0) (peek-char . c50cf) (open-output-file . c50ce) (open-input-file . c50cd) (newline . c50cc) (display . c50cb) (close-output-port . c50ca) (close-input-port . c50c9) (eof-object? . c50c8) (eof-object . c50c7) (current-error-port . c50c6) (current-output-port . c50c5) (current-input-port . c50c4) (output-port? . c50c3) (input-port? . c50c2) (make-i/o-write-error . c4b70) (make-i/o-read-error . c4b5b) (make-i/o-port-error . c4c11) (make-i/o-invalid-position-error . c4b87) (make-i/o-filename-error . c4ba2) (make-i/o-file-protection-error . c4bbb) (make-i/o-file-is-read-only-error . c4bd0) (make-i/o-file-does-not-exist-error . c4bfa) (make-i/o-file-already-exists-error . c4be5) (make-i/o-error . c4b46) (i/o-write-error? . c4b72) (i/o-read-error? . c4b5d) (i/o-port-error? . c4c15) (i/o-invalid-position-error? . c4b8b) (i/o-filename-error? . c4ba6) (i/o-file-protection-error? . c4bbd) (i/o-file-is-read-only-error? . c4bd2) (i/o-file-does-not-exist-error? . c4bfc) (i/o-file-already-exists-error? . c4be7) (i/o-error? . c4b48) (i/o-error-position . c4b8d) (i/o-error-port . c4c17) (i/o-error-filename . c4ba8) (&i/o-port . c4eff) (&i/o-file-does-not-exist . c4efe) (&i/o-file-already-exists . c4efd) (&i/o-file-is-read-only . c4efc) (&i/o-file-protection . c4efb) (&i/o-filename . c4efa) (&i/o-invalid-position . c4ef9) (&i/o-write . c4ef8) (&i/o-read . c4ef7) (&i/o . c4ef6)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5193 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . c5098) (utf32->string . c504d) (utf16->string . c504c) (utf8->string . c504b) (uint-list->bytevector . c504a) (u8-list->bytevector . c5049) (string->utf8 . c5048) (string->utf32 . c5047) (string->utf16 . c5046) (sint-list->bytevector . c5045) (native-endianness . c5044) (bytevector? . c5043) (bytevector=? . c5042) (bytevector-uint-set! . c5041) (bytevector-uint-ref . c5040) (bytevector-u8-set! . c503f) (bytevector-u8-ref . c503e) (bytevector-u64-set! . c503d) (bytevector-u64-ref . c503c) (bytevector-u64-native-set! . c503b) (bytevector-u64-native-ref . c503a) (bytevector-u32-set! . c5039) (bytevector-u32-ref . c5038) (bytevector-u32-native-set! . c5037) (bytevector-u32-native-ref . c5036) (bytevector-u16-set! . c5035) (bytevector-u16-ref . c5034) (bytevector-u16-native-set! . c5033) (bytevector-u16-native-ref . c5032) (bytevector-sint-set! . c5031) (bytevector-sint-ref . c5030) (bytevector-s8-set! . c502f) (bytevector-s8-ref . c502e) (bytevector-s64-set! . c502d) (bytevector-s64-ref . c502c) (bytevector-s64-native-set! . c502b) (bytevector-s64-native-ref . c502a) (bytevector-s32-set! . c5029) (bytevector-s32-ref . c5028) (bytevector-s32-native-set! . c5027) (bytevector-s32-native-ref . c5026) (bytevector-s16-set! . c5025) (bytevector-s16-ref . c5024) (bytevector-s16-native-set! . c5023) (bytevector-s16-native-ref . c5022) (bytevector-length . c5021) (bytevector-ieee-single-ref . c5020) (bytevector-ieee-single-set! . c501f) (bytevector-ieee-single-native-set! . c501e) (bytevector-ieee-single-native-ref . c501d) (bytevector-ieee-double-set! . c501c) (bytevector-ieee-double-ref . c501b) (bytevector-ieee-double-native-set! . c501a) (bytevector-ieee-double-native-ref . c5019) (bytevector-fill! . c5018) (bytevector-copy! . c5017) (bytevector-copy . c5016) (bytevector->uint-list . c5015) (bytevector->u8-list . c5014) (bytevector->sint-list . c5013) (endianness . c4ecb)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5194 '(rnrs unicode) '(6) '() '() '() '((string-upcase . c511f) (string-titlecase . c511e) (string-normalize-nfkd . c511d) (string-normalize-nfkc . c511c) (string-normalize-nfd . c511b) (string-normalize-nfc . c511a) (string-foldcase . c5119) (string-downcase . c5118) (string-ci>? . c5117) (string-ci>=? . c5116) (string-ci=? . c5115) (string-ci<? . c5114) (string-ci<=? . c5113) (char-whitespace? . c5112) (char-upper-case? . c5111) (char-title-case? . c5110) (char-numeric? . c510f) (char-lower-case? . c510e) (char-general-category . c510d) (char-upcase . c510c) (char-titlecase . c510b) (char-foldcase . c510a) (char-downcase . c5109) (char-ci>? . c5108) (char-ci>=? . c5107) (char-ci=? . c5106) (char-ci<? . c5105) (char-ci<=? . c5104) (char-alphabetic? . c5103)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5195 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . c5062) (raise-continuable . c5061) (raise . c5060) (guard . c4ed7) (else . c4ecf) (=> . c4ece)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5196 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . c4fb7) (bitwise-reverse-bit-field . c4fb6) (bitwise-length . c4fb5) (bitwise-if . c4fb4) (bitwise-first-bit-set . c4fb3) (bitwise-copy-bit-field . c4fb2) (bitwise-copy-bit . c4fb1) (bitwise-bit-set? . c4fb0) (bitwise-bit-field . c4faf) (bitwise-bit-count . c4fae) (bitwise-xor . c4fad) (bitwise-ior . c4fac) (bitwise-and . c4fab) (bitwise-not . c4faa) (bitwise-arithmetic-shift-right . c4fa9) (bitwise-arithmetic-shift-left . c4fa8) (bitwise-arithmetic-shift . c4fa7)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5197 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . c4fe4) (fxxor . c4fe3) (fxrotate-bit-field . c4fe2) (fxreverse-bit-field . c4fe1) (fxpositive? . c4fe0) (fxodd? . c4fdf) (fxnot . c4fde) (fxnegative? . c4fdd) (fxmod0 . c4fdc) (fxmod . c4fdb) (fxmin . c4fda) (fxmax . c4fd9) (fxlength . c4fd8) (fxior . c4fd7) (fxif . c4fd6) (fxfirst-bit-set . c4fd5) (fxeven? . c4fd4) (fxdiv0-and-mod0 . c4fd3) (fxdiv0 . c4fd2) (fxdiv-and-mod . c4fd1) (fxdiv . c4fd0) (fxcopy-bit-field . c4fcf) (fxcopy-bit . c4fce) (fxbit-set? . c4fcd) (fxbit-field . c4fcc) (fxbit-count . c4fcb) (fxarithmetic-shift-right . c4fca) (fxarithmetic-shift-left . c4fc9) (fxarithmetic-shift . c4fc8) (fxand . c4fc7) (fx>? . c4fc6) (fx>=? . c4fc5) (fx=? . c4fc4) (fx<? . c4fc3) (fx<=? . c4fc2) (fx-/carry . c4fc1) (fx- . c4fc0) (fx+/carry . c4fbf) (fx+ . c4fbe) (fx*/carry . c4fbd) (fx* . c4fbc) (greatest-fixnum . c4fbb) (least-fixnum . c4fba) (fixnum-width . c4fb9) (fixnum? . c4fb8)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5198 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . c4c71) (no-infinities-violation? . c4c5c) (make-no-nans-violation . c4c6f) (make-no-infinities-violation . c4c5a) (real->flonum . c5012) (flzero? . c5011) (fltruncate . c5010) (fltan . c500f) (flsqrt . c500e) (flsin . c500d) (flround . c500c) (flpositive? . c500b) (flonum? . c500a) (flodd? . c5009) (flnumerator . c5008) (flnegative? . c5007) (flnan? . c5006) (flmod0 . c5005) (flmod . c5004) (flmin . c5003) (flmax . c5002) (fllog . c5001) (flinteger? . c5000) (flinfinite? . c4fff) (flfloor . c4ffe) (flfinite? . c4ffd) (flexpt . c4ffc) (flexp . c4ffb) (fleven? . c4ffa) (fldiv0-and-mod0 . c4ff9) (fldiv0 . c4ff8) (fldiv-and-mod . c4ff7) (fldiv . c4ff6) (fldenominator . c4ff5) (flcos . c4ff4) (flceiling . c4ff3) (flatan . c4ff2) (flasin . c4ff1) (flacos . c4ff0) (flabs . c4fef) (fl>? . c4fee) (fl>=? . c4fed) (fl=? . c4fec) (fl<? . c4feb) (fl<=? . c4fea) (fl/ . c4fe9) (fl- . c4fe8) (fl+ . c4fe7) (fl* . c4fe6) (fixnum->flonum . c4fe5) (&no-nans . c4f03) (&no-infinities . c4f02)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c5199 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . c50ec) (string-ci-hash . c50eb) (string-hash . c50ea) (equal-hash . c50e9) (hashtable-equivalence-function . c50e8) (make-hashtable . c50e7) (hashtable-hash-function . c50e6) (make-eqv-hashtable . c50e5) (make-eq-hashtable . c50e4) (hashtable? . c50e3) (hashtable-update! . c50e2) (hashtable-size . c50e1) (hashtable-set! . c50e0) (hashtable-ref . c50df) (hashtable-mutable? . c50de) (hashtable-keys . c50dd) (hashtable-entries . c50dc) (hashtable-delete! . c50db) (hashtable-copy . c50da) (hashtable-contains? . c50d9) (hashtable-clear! . c50d8)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c519a '(rnrs io ports) '(6) '() '() '() '((eof-object? . c50c8) (eof-object . c50c7) (current-error-port . c50c6) (current-output-port . c50c5) (current-input-port . c50c4) (output-port? . c50c3) (input-port? . c50c2) (utf-8-codec . c50c1) (utf-16-codec . c50c0) (transcoder-error-handling-mode . c50bf) (transcoder-eol-style . c50be) (transcoder-codec . c50bd) (transcoded-port . c50bc) (textual-port? . c50bb) (string->bytevector . c50ba) (standard-output-port . c50b9) (standard-input-port . c50b8) (standard-error-port . c50b7) (set-port-position! . c50b6) (put-u8 . c50b5) (put-string . c50b4) (put-datum . c50b3) (put-char . c50b2) (put-bytevector . c50b1) (port? . c50b0) (port-transcoder . c50af) (port-position . c50ae) (port-has-set-port-position!? . c50ad) (port-has-port-position? . c50ac) (port-eof? . c50ab) (output-port-buffer-mode . c50aa) (open-string-output-port . c50a9) (open-string-input-port . c50a8) (open-file-output-port . c50a7) (open-file-input/output-port . c50a6) (open-file-input-port . c50a5) (open-bytevector-output-port . c50a4) (open-bytevector-input-port . c50a3) (native-transcoder . c50a2) (native-eol-style . c50a1) (make-transcoder . c50a0) (latin-1-codec . c509f) (make-i/o-write-error . c4b70) (make-i/o-read-error . c4b5b) (make-i/o-port-error . c4c11) (make-i/o-invalid-position-error . c4b87) (make-i/o-filename-error . c4ba2) (make-i/o-file-protection-error . c4bbb) (make-i/o-file-is-read-only-error . c4bd0) (make-i/o-file-does-not-exist-error . c4bfa) (make-i/o-file-already-exists-error . c4be5) (make-i/o-error . c4b46) (make-i/o-encoding-error . c4c41) (make-i/o-decoding-error . c4c2a) (make-custom-textual-output-port . c509e) (make-custom-textual-input/output-port . c509d) (make-custom-textual-input-port . c509c) (make-custom-binary-output-port . c509b) (make-custom-binary-input/output-port . c509a) (make-custom-binary-input-port . c5099) (lookahead-u8 . c5097) (lookahead-char . c5096) (i/o-write-error? . c4b72) (i/o-read-error? . c4b5d) (i/o-port-error? . c4c15) (i/o-invalid-position-error? . c4b8b) (i/o-filename-error? . c4ba6) (i/o-file-protection-error? . c4bbd) (i/o-file-is-read-only-error? . c4bd2) (i/o-file-does-not-exist-error? . c4bfc) (i/o-file-already-exists-error? . c4be7) (i/o-error? . c4b48) (i/o-error-position . c4b8d) (i/o-error-port . c4c17) (i/o-error-filename . c4ba8) (i/o-encoding-error? . c4c45) (i/o-encoding-error-char . c4c47) (i/o-decoding-error? . c4c2c) (get-u8 . c5095) (get-string-n! . c5094) (get-string-n . c5093) (get-string-all . c5092) (get-line . c5091) (get-datum . c5090) (get-char . c508f) (get-bytevector-some . c508e) (get-bytevector-n! . c508d) (get-bytevector-n . c508c) (get-bytevector-all . c508b) (flush-output-port . c508a) (close-port . c5089) (call-with-string-output-port . c5068) (call-with-port . c5067) (call-with-bytevector-output-port . c5066) (bytevector->string . c5065) (buffer-mode? . c5064) (binary-port? . c5063) (&i/o-encoding . c4f01) (&i/o-decoding . c4f00) (&i/o-port . c4eff) (&i/o-file-does-not-exist . c4efe) (&i/o-file-already-exists . c4efd) (&i/o-file-is-read-only . c4efc) (&i/o-file-protection . c4efb) (&i/o-filename . c4efa) (&i/o-invalid-position . c4ef9) (&i/o-write . c4ef8) (&i/o-read . c4ef7) (&i/o . c4ef6) (error-handling-mode . c4edb) (file-options . c4eda) (buffer-mode . c4ed9) (eol-style . c4ed8)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c519b '(rnrs enums) '(6) '() '() '() '((make-enumeration . c505f) (enum-set=? . c505e) (enum-set-universe . c505d) (enum-set-union . c505c) (enum-set-subset? . c505b) (enum-set-projection . c505a) (enum-set-member? . c5059) (enum-set-intersection . c5058) (enum-set-indexer . c5057) (enum-set-difference . c5056) (enum-set-constructor . c5055) (enum-set-complement . c5054) (enum-set->list . c5053) (define-enumeration . c4ee6)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c519c '(rnrs conditions) '(6) '() '() '() '((who-condition? . c4abc) (warning? . c4a34) (violation? . c4a73) (undefined-violation? . c4b33) (syntax-violation? . c4b1a) (syntax-violation-subform . c4b1e) (syntax-violation-form . c4b1c) (syntax-violation . c2fae) (simple-conditions . c5052) (serious-condition? . c4a49) (non-continuable-violation? . c4ad3) (message-condition? . c4a1d) (make-who-condition . c4ab8) (make-warning . c4a32) (make-violation . c4a71) (make-undefined-violation . c4b31) (make-syntax-violation . c4b14) (make-serious-condition . c4a47) (make-non-continuable-violation . c4ad1) (make-message-condition . c4a19) (make-lexical-violation . c4afb) (make-irritants-condition . c4a9d) (make-implementation-restriction-violation . c4ae6) (make-error . c4a5c) (make-assertion-violation . c4a86) (lexical-violation? . c4afd) (irritants-condition? . c4aa1) (implementation-restriction-violation? . c4ae8) (error? . c4a5e) (condition-who . c4abe) (condition-predicate . c5051) (condition-message . c4a1f) (condition-irritants . c4aa3) (condition-accessor . c5050) (condition . c504f) (assertion-violation? . c4a88) (condition? . c504e) (&undefined . c4ef5) (&syntax . c4ef4) (&lexical . c4ef3) (&implementation-restriction . c4ef2) (&non-continuable . c4ef1) (&who . c4ef0) (&irritants . c4eef) (&assertion . c4eee) (&violation . c4eed) (&error . c4eec) (&serious . c4eeb) (&warning . c4eea) (&message . c4ee9) (&condition . c4ee8) (define-condition-type . c4ee7)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c519d '(rnrs records inspection) '(6) '() '() '() '((record? . c50fb) (record-type-uid . c50fa) (record-type-sealed? . c50f9) (record-type-parent . c50f8) (record-type-opaque? . c50f7) (record-type-name . c50f6) (record-type-generative? . c50f5) (record-type-field-names . c50f4) (record-rtd . c50f3) (record-field-mutable? . c50f2)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c519e '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . c5102) (record-predicate . c5101) (record-mutator . c5100) (record-constructor . c50ff) (record-accessor . c50fe) (make-record-type-descriptor . c50fd) (make-record-constructor-descriptor . c50fc)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c519f '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . c4ee5) (parent-rtd . c4ee4) (nongenerative . c4ee3) (opaque . c4ee2) (sealed . c4ee1) (protocol . c4ee0) (parent . c4edf) (immutable . c4ede) (mutable . c4edd) (fields . c4edc) (record-constructor-descriptor . c4ebb) (record-type-descriptor . c4eba)) '() values values '#f '#f '#t '#f) (c2add@c297c@install-library 'c51a0 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . c4c75) (&no-nans-rtd . c4c73) (&no-infinities-rcd . c4c60) (&no-infinities-rtd . c4c5e) (&i/o-encoding-rcd . c4c4b) (&i/o-encoding-rtd . c4c49) (&i/o-decoding-rcd . c4c30) (&i/o-decoding-rtd . c4c2e) (&i/o-port-rcd . c4c1b) (&i/o-port-rtd . c4c19) (&i/o-file-does-not-exist-rcd . c4c00) (&i/o-file-does-not-exist-rtd . c4bfe) (&i/o-file-already-exists-rcd . c4beb) (&i/o-file-already-exists-rtd . c4be9) (&i/o-file-is-read-only-rcd . c4bd6) (&i/o-file-is-read-only-rtd . c4bd4) (&i/o-file-protection-rcd . c4bc1) (&i/o-file-protection-rtd . c4bbf) (&i/o-filename-rcd . c4bac) (&i/o-filename-rtd . c4baa) (&i/o-invalid-position-rcd . c4b91) (&i/o-invalid-position-rtd . c4b8f) (&i/o-write-rcd . c4b76) (&i/o-write-rtd . c4b74) (&i/o-read-rcd . c4b61) (&i/o-read-rtd . c4b5f) (&i/o-rcd . c4b4c) (&i/o-rtd . c4b4a) (&undefined-rcd . c4b37) (&undefined-rtd . c4b35) (&syntax-rcd . c4b22) (&syntax-rtd . c4b20) (&lexical-rcd . c4b01) (&lexical-rtd . c4aff) (&implementation-restriction-rcd . c4aec) (&implementation-restriction-rtd . c4aea) (&non-continuable-rcd . c4ad7) (&non-continuable-rtd . c4ad5) (&who-rcd . c4ac2) (&who-rtd . c4ac0) (&irritants-rcd . c4aa7) (&irritants-rtd . c4aa5) (&assertion-rcd . c4a8c) (&assertion-rtd . c4a8a) (&violation-rcd . c4a77) (&violation-rtd . c4a75) (&error-rcd . c4a62) (&error-rtd . c4a60) (&serious-rcd . c4a4d) (&serious-rtd . c4a4b) (&warning-rcd . c4a38) (&warning-rtd . c4a36) (&message-rcd . c4a23) (&message-rtd . c4a21) (&condition-rcd . c49c4) (&condition-rtd . c49c2) (syntax-error . c2faa) (syntax-dispatch . c2ec5) (pretty-print . c5180) (eval-core . c517f) (set-symbol-value! . c517e) (symbol-value . c517d) (gensym . c517c) (void . c517b) (load . c4d82) (interaction-environment . c2fba) (char-ready? . c517a) (regexp? . c5179) (read-line . c5178) (ungensym . c5177) (alist->eq-hash-table . c5176) (assoc-ref . c5175) (print . c5174) (format . c5173) (host-os . c5172) (library-path . c295b) (standard-library-path . c5171) (file-newer? . c5170) (stat-mtime . c516f) (write-to-file . c516e) (file->list . c516d) (file->string . c516c) (digit->integer . c516b) (call-with-string-input-port . c516a) (call-with-string-io . c5169) (string-split . c5168) (bytevector-for-each . c5167) (string->regexp . c5166) (rxmatch . c5165) (regexp-replace-all . c5164) (hashtable-for-each . c5163) (call-process . c5162) (local-tz-offset . c5161) (microseconds . c5160) (readdir . c515f) (set-current-directory! . c515e) (expand-path . c515d) (current-directory . c515c) (%spawn . c515b) (%waitpid . c515a) (%ffi-supported? . c5159) (%ffi-pointer-ref . c5158) (%ffi-pointer->string . c5157) (%ffi-call->string-or-zero . c5156) (%ffi-call->double . c5155) (%ffi-call->void* . c5154) (%ffi-call->void . c5153) (%ffi-call->int . c5152) (%ffi-lookup . c5151) (%ffi-open . c5150) (%fork . c514f) (%pipe . c514e) (p . c514d) (open-output-string . c514c) (get-output-string . c514b) (get-environment-variables . c514a) (get-environment-variable . c5149) (get-timeofday . c5148) (get-command-line . c5147) (sys-display . c5146) (vm-join! . c5145) (vm-set-value! . c5144) (vm? . c5143) (main-vm? . c5142) (vm-self . c5141) (vm-start! . c5140) (make-vm . c513f) (mutex-try-lock! . c513e) (mutex-unlock! . c513d) (mutex-lock! . c513c) (mutex? . c513b) (make-mutex . c513a) (condition-variable-notify-all! . c5139) (condition-variable-notify! . c5138) (condition-variable-wait! . c5137) (make-condition-variable . c5136) (mosh-executable-path . c5135) (make-file-options . c5134) (source-info . c5133) (make-compiler-instruction . c5132) (make-instruction . c5131) (set-source-info! . c5130) (bignum? . c512f) (fast-equal? . c512e) (fasl-read . c512d) (fasl-write . c512c) (time-usage . c512b) (os-constant . c512a) (make-parameter . c278e) (socket-port . c5129) (socket-shutdown . c5128) (socket-close . c5127) (socket-send . c5126) (socket-recv! . c5125) (socket-recv . c5124) (make-server-socket . c5123) (make-client-socket . c5122) (socket-accept . c5121) (socket? . c5120) (string-upcase . c511f) (string-titlecase . c511e) (string-normalize-nfkd . c511d) (string-normalize-nfkc . c511c) (string-normalize-nfd . c511b) (string-normalize-nfc . c511a) (string-foldcase . c5119) (string-downcase . c5118) (string-ci>? . c5117) (string-ci>=? . c5116) (string-ci=? . c5115) (string-ci<? . c5114) (string-ci<=? . c5113) (char-whitespace? . c5112) (char-upper-case? . c5111) (char-title-case? . c5110) (char-numeric? . c510f) (char-lower-case? . c510e) (char-general-category . c510d) (char-upcase . c510c) (char-titlecase . c510b) (char-foldcase . c510a) (char-downcase . c5109) (char-ci>? . c5108) (char-ci>=? . c5107) (char-ci=? . c5106) (char-ci<? . c5105) (char-ci<=? . c5104) (char-alphabetic? . c5103) (make-variable-transformer . c2cf2) (identifier? . c2fb0) (generate-temporaries . c2f9c) (free-identifier=? . c2f9e) (syntax->datum . c2fb4) (datum->syntax . c2fb2) (bound-identifier=? . c2fa0) (record-type-descriptor? . c5102) (record-predicate . c5101) (record-mutator . c5100) (record-constructor . c50ff) (record-accessor . c50fe) (make-record-type-descriptor . c50fd) (make-record-constructor-descriptor . c50fc) (record? . c50fb) (record-type-uid . c50fa) (record-type-sealed? . c50f9) (record-type-parent . c50f8) (record-type-opaque? . c50f7) (record-type-name . c50f6) (record-type-generative? . c50f5) (record-type-field-names . c50f4) (record-rtd . c50f3) (record-field-mutable? . c50f2) (delete-file . c50f1) (file-exists? . c50f0) (vector-sort! . c50ef) (vector-sort . c50ee) (list-sort . c50ed) (symbol-hash . c50ec) (string-ci-hash . c50eb) (string-hash . c50ea) (equal-hash . c50e9) (hashtable-equivalence-function . c50e8) (make-hashtable . c50e7) (hashtable-hash-function . c50e6) (make-eqv-hashtable . c50e5) (make-eq-hashtable . c50e4) (hashtable? . c50e3) (hashtable-update! . c50e2) (hashtable-size . c50e1) (hashtable-set! . c50e0) (hashtable-ref . c50df) (hashtable-mutable? . c50de) (hashtable-keys . c50dd) (hashtable-entries . c50dc) (hashtable-delete! . c50db) (hashtable-copy . c50da) (hashtable-contains? . c50d9) (hashtable-clear! . c50d8) (call-with-output-file . c50d7) (call-with-input-file . c50d6) (write-char . c50d5) (write . c50d4) (with-output-to-file . c50d3) (with-input-from-file . c50d2) (read-char . c50d1) (read . c50d0) (peek-char . c50cf) (open-output-file . c50ce) (open-input-file . c50cd) (newline . c50cc) (display . c50cb) (close-output-port . c50ca) (close-input-port . c50c9) (eof-object? . c50c8) (eof-object . c50c7) (current-error-port . c50c6) (current-output-port . c50c5) (current-input-port . c50c4) (output-port? . c50c3) (input-port? . c50c2) (utf-8-codec . c50c1) (utf-16-codec . c50c0) (transcoder-error-handling-mode . c50bf) (transcoder-eol-style . c50be) (transcoder-codec . c50bd) (transcoded-port . c50bc) (textual-port? . c50bb) (string->bytevector . c50ba) (standard-output-port . c50b9) (standard-input-port . c50b8) (standard-error-port . c50b7) (set-port-position! . c50b6) (put-u8 . c50b5) (put-string . c50b4) (put-datum . c50b3) (put-char . c50b2) (put-bytevector . c50b1) (port? . c50b0) (port-transcoder . c50af) (port-position . c50ae) (port-has-set-port-position!? . c50ad) (port-has-port-position? . c50ac) (port-eof? . c50ab) (output-port-buffer-mode . c50aa) (open-string-output-port . c50a9) (open-string-input-port . c50a8) (open-file-output-port . c50a7) (open-file-input/output-port . c50a6) (open-file-input-port . c50a5) (open-bytevector-output-port . c50a4) (open-bytevector-input-port . c50a3) (native-transcoder . c50a2) (native-eol-style . c50a1) (make-transcoder . c50a0) (latin-1-codec . c509f) (make-i/o-write-error . c4b70) (make-i/o-read-error . c4b5b) (make-i/o-port-error . c4c11) (make-i/o-invalid-position-error . c4b87) (make-i/o-filename-error . c4ba2) (make-i/o-file-protection-error . c4bbb) (make-i/o-file-is-read-only-error . c4bd0) (make-i/o-file-does-not-exist-error . c4bfa) (make-i/o-file-already-exists-error . c4be5) (make-i/o-error . c4b46) (make-i/o-encoding-error . c4c41) (make-i/o-decoding-error . c4c2a) (make-custom-textual-output-port . c509e) (make-custom-textual-input/output-port . c509d) (make-custom-textual-input-port . c509c) (make-custom-binary-output-port . c509b) (make-custom-binary-input/output-port . c509a) (make-custom-binary-input-port . c5099) (make-bytevector . c5098) (lookahead-u8 . c5097) (lookahead-char . c5096) (i/o-write-error? . c4b72) (i/o-read-error? . c4b5d) (i/o-port-error? . c4c15) (i/o-invalid-position-error? . c4b8b) (i/o-filename-error? . c4ba6) (i/o-file-protection-error? . c4bbd) (i/o-file-is-read-only-error? . c4bd2) (i/o-file-does-not-exist-error? . c4bfc) (i/o-file-already-exists-error? . c4be7) (i/o-error? . c4b48) (i/o-error-position . c4b8d) (i/o-error-port . c4c17) (i/o-error-filename . c4ba8) (i/o-encoding-error? . c4c45) (i/o-encoding-error-char . c4c47) (i/o-decoding-error? . c4c2c) (get-u8 . c5095) (get-string-n! . c5094) (get-string-n . c5093) (get-string-all . c5092) (get-line . c5091) (get-datum . c5090) (get-char . c508f) (get-bytevector-some . c508e) (get-bytevector-n! . c508d) (get-bytevector-n . c508c) (get-bytevector-all . c508b) (flush-output-port . c508a) (close-port . c5089) (scheme-report-environment . c2f8a) (quotient . c5088) (null-environment . c2f88) (remainder . c5087) (modulo . c5086) (inexact->exact . c5085) (force . c5084) (exact->inexact . c5083) (make-promise . c5082) (exit . c5081) (command-line . c4d7c) (string-fill! . c5080) (string-set! . c507f) (set-cdr! . c507e) (set-car! . c507d) (remove . c507c) (remv . c507b) (remp . c507a) (remq . c5079) (partition . c5078) (memv . c5077) (memq . c5076) (memp . c5075) (member . c5074) (exists . c5073) (for-all . c5072) (fold-right . c5071) (fold-left . c5070) (find . c506f) (filter . c506e) (cons* . c506d) (assv . c506c) (assq . c506b) (assp . c506a) (assoc . c5069) (call-with-string-output-port . c5068) (call-with-port . c5067) (call-with-bytevector-output-port . c5066) (bytevector->string . c5065) (buffer-mode? . c5064) (binary-port? . c5063) (with-exception-handler . c5062) (raise-continuable . c5061) (raise . c5060) (eval . c2f8e) (environment . c2f86) (make-enumeration . c505f) (enum-set=? . c505e) (enum-set-universe . c505d) (enum-set-union . c505c) (enum-set-subset? . c505b) (enum-set-projection . c505a) (enum-set-member? . c5059) (enum-set-intersection . c5058) (enum-set-indexer . c5057) (enum-set-difference . c5056) (enum-set-constructor . c5055) (enum-set-complement . c5054) (enum-set->list . c5053) (who-condition? . c4abc) (warning? . c4a34) (violation? . c4a73) (undefined-violation? . c4b33) (syntax-violation? . c4b1a) (syntax-violation-subform . c4b1e) (syntax-violation-form . c4b1c) (syntax-violation . c2fae) (simple-conditions . c5052) (serious-condition? . c4a49) (non-continuable-violation? . c4ad3) (message-condition? . c4a1d) (make-who-condition . c4ab8) (make-warning . c4a32) (make-violation . c4a71) (make-undefined-violation . c4b31) (make-syntax-violation . c4b14) (make-serious-condition . c4a47) (make-non-continuable-violation . c4ad1) (make-message-condition . c4a19) (make-lexical-violation . c4afb) (make-irritants-condition . c4a9d) (make-implementation-restriction-violation . c4ae6) (make-error . c4a5c) (make-assertion-violation . c4a86) (lexical-violation? . c4afd) (irritants-condition? . c4aa1) (implementation-restriction-violation? . c4ae8) (error? . c4a5e) (condition-who . c4abe) (condition-predicate . c5051) (condition-message . c4a1f) (condition-irritants . c4aa3) (condition-accessor . c5050) (condition . c504f) (assertion-violation? . c4a88) (condition? . c504e) (utf32->string . c504d) (utf16->string . c504c) (utf8->string . c504b) (uint-list->bytevector . c504a) (u8-list->bytevector . c5049) (string->utf8 . c5048) (string->utf32 . c5047) (string->utf16 . c5046) (sint-list->bytevector . c5045) (native-endianness . c5044) (bytevector? . c5043) (bytevector=? . c5042) (bytevector-uint-set! . c5041) (bytevector-uint-ref . c5040) (bytevector-u8-set! . c503f) (bytevector-u8-ref . c503e) (bytevector-u64-set! . c503d) (bytevector-u64-ref . c503c) (bytevector-u64-native-set! . c503b) (bytevector-u64-native-ref . c503a) (bytevector-u32-set! . c5039) (bytevector-u32-ref . c5038) (bytevector-u32-native-set! . c5037) (bytevector-u32-native-ref . c5036) (bytevector-u16-set! . c5035) (bytevector-u16-ref . c5034) (bytevector-u16-native-set! . c5033) (bytevector-u16-native-ref . c5032) (bytevector-sint-set! . c5031) (bytevector-sint-ref . c5030) (bytevector-s8-set! . c502f) (bytevector-s8-ref . c502e) (bytevector-s64-set! . c502d) (bytevector-s64-ref . c502c) (bytevector-s64-native-set! . c502b) (bytevector-s64-native-ref . c502a) (bytevector-s32-set! . c5029) (bytevector-s32-ref . c5028) (bytevector-s32-native-set! . c5027) (bytevector-s32-native-ref . c5026) (bytevector-s16-set! . c5025) (bytevector-s16-ref . c5024) (bytevector-s16-native-set! . c5023) (bytevector-s16-native-ref . c5022) (bytevector-length . c5021) (bytevector-ieee-single-ref . c5020) (bytevector-ieee-single-set! . c501f) (bytevector-ieee-single-native-set! . c501e) (bytevector-ieee-single-native-ref . c501d) (bytevector-ieee-double-set! . c501c) (bytevector-ieee-double-ref . c501b) (bytevector-ieee-double-native-set! . c501a) (bytevector-ieee-double-native-ref . c5019) (bytevector-fill! . c5018) (bytevector-copy! . c5017) (bytevector-copy . c5016) (bytevector->uint-list . c5015) (bytevector->u8-list . c5014) (bytevector->sint-list . c5013) (no-nans-violation? . c4c71) (no-infinities-violation? . c4c5c) (make-no-nans-violation . c4c6f) (make-no-infinities-violation . c4c5a) (real->flonum . c5012) (flzero? . c5011) (fltruncate . c5010) (fltan . c500f) (flsqrt . c500e) (flsin . c500d) (flround . c500c) (flpositive? . c500b) (flonum? . c500a) (flodd? . c5009) (flnumerator . c5008) (flnegative? . c5007) (flnan? . c5006) (flmod0 . c5005) (flmod . c5004) (flmin . c5003) (flmax . c5002) (fllog . c5001) (flinteger? . c5000) (flinfinite? . c4fff) (flfloor . c4ffe) (flfinite? . c4ffd) (flexpt . c4ffc) (flexp . c4ffb) (fleven? . c4ffa) (fldiv0-and-mod0 . c4ff9) (fldiv0 . c4ff8) (fldiv-and-mod . c4ff7) (fldiv . c4ff6) (fldenominator . c4ff5) (flcos . c4ff4) (flceiling . c4ff3) (flatan . c4ff2) (flasin . c4ff1) (flacos . c4ff0) (flabs . c4fef) (fl>? . c4fee) (fl>=? . c4fed) (fl=? . c4fec) (fl<? . c4feb) (fl<=? . c4fea) (fl/ . c4fe9) (fl- . c4fe8) (fl+ . c4fe7) (fl* . c4fe6) (fixnum->flonum . c4fe5) (fxzero? . c4fe4) (fxxor . c4fe3) (fxrotate-bit-field . c4fe2) (fxreverse-bit-field . c4fe1) (fxpositive? . c4fe0) (fxodd? . c4fdf) (fxnot . c4fde) (fxnegative? . c4fdd) (fxmod0 . c4fdc) (fxmod . c4fdb) (fxmin . c4fda) (fxmax . c4fd9) (fxlength . c4fd8) (fxior . c4fd7) (fxif . c4fd6) (fxfirst-bit-set . c4fd5) (fxeven? . c4fd4) (fxdiv0-and-mod0 . c4fd3) (fxdiv0 . c4fd2) (fxdiv-and-mod . c4fd1) (fxdiv . c4fd0) (fxcopy-bit-field . c4fcf) (fxcopy-bit . c4fce) (fxbit-set? . c4fcd) (fxbit-field . c4fcc) (fxbit-count . c4fcb) (fxarithmetic-shift-right . c4fca) (fxarithmetic-shift-left . c4fc9) (fxarithmetic-shift . c4fc8) (fxand . c4fc7) (fx>? . c4fc6) (fx>=? . c4fc5) (fx=? . c4fc4) (fx<? . c4fc3) (fx<=? . c4fc2) (fx-/carry . c4fc1) (fx- . c4fc0) (fx+/carry . c4fbf) (fx+ . c4fbe) (fx*/carry . c4fbd) (fx* . c4fbc) (greatest-fixnum . c4fbb) (least-fixnum . c4fba) (fixnum-width . c4fb9) (fixnum? . c4fb8) (bitwise-rotate-bit-field . c4fb7) (bitwise-reverse-bit-field . c4fb6) (bitwise-length . c4fb5) (bitwise-if . c4fb4) (bitwise-first-bit-set . c4fb3) (bitwise-copy-bit-field . c4fb2) (bitwise-copy-bit . c4fb1) (bitwise-bit-set? . c4fb0) (bitwise-bit-field . c4faf) (bitwise-bit-count . c4fae) (bitwise-xor . c4fad) (bitwise-ior . c4fac) (bitwise-and . c4fab) (bitwise-not . c4faa) (bitwise-arithmetic-shift-right . c4fa9) (bitwise-arithmetic-shift-left . c4fa8) (bitwise-arithmetic-shift . c4fa7) (zero? . c4fa6) (vector? . c4fa5) (vector-set! . c4fa4) (vector-ref . c4fa3) (vector-map . c4fa2) (vector-length . c4fa1) (vector-for-each . c4fa0) (vector-fill! . c4f9f) (vector->list . c4f9e) (vector . c4f9d) (values . c4f9c) (truncate . c4f9b) (tan . c4f9a) (symbol? . c4f99) (symbol=? . c4f98) (symbol->string . c4f97) (substring . c4f96) (string? . c4f95) (string>? . c4f94) (string>=? . c4f93) (string=? . c4f92) (string<? . c4f91) (string<=? . c4f90) (string-ref . c4f8f) (string-length . c4f8e) (string-for-each . c4f8d) (string-copy . c4f8c) (string-append . c4f8b) (string->symbol . c4f8a) (string->number . c4f89) (string->list . c4f88) (string . c4f87) (sqrt . c4f86) (sin . c4f85) (round . c4f84) (reverse . c4f83) (real? . c4f82) (real-valued? . c4f81) (real-part . c4f80) (rationalize . c4f7f) (rational? . c4f7e) (rational-valued? . c4f7d) (procedure? . c4f7c) (positive? . c4f7b) (pair? . c4f7a) (odd? . c4f79) (numerator . c4f78) (number? . c4f77) (number->string . c4f76) (null? . c4f75) (not . c4f74) (negative? . c4f73) (nan? . c4f72) (min . c4f71) (max . c4f70) (map . c4f6f) (make-vector . c4f6e) (make-string . c4f6d) (make-rectangular . c4f6c) (make-polar . c4f6b) (magnitude . c4f6a) (log . c4f69) (list? . c4f68) (list-tail . c4f67) (list-ref . c4f66) (list->vector . c4f65) (list->string . c4f64) (list . c4f63) (length . c4f62) (lcm . c4f61) (integer? . c4f60) (integer-valued? . c4f5f) (integer->char . c4f5e) (infinite? . c4f5d) (inexact? . c4f5c) (inexact . c4f5b) (imag-part . c4f5a) (gcd . c4f59) (for-each . c4f58) (floor . c4f57) (finite? . c4f56) (expt . c4f55) (exp . c4f54) (exact? . c4f53) (exact-integer-sqrt . c4f52) (exact . c4f51) (even? . c4f50) (error . c4f4f) (eqv? . c4f4e) (equal? . c4f4d) (eq? . c4f4c) (dynamic-wind . c4f4b) (div0-and-mod0 . c4f4a) (mod0 . c4f49) (div0 . c4f48) (div-and-mod . c4f47) (mod . c4f46) (div . c4f45) (denominator . c4f44) (cos . c4f43) (cons . c4f42) (complex? . c4f41) (char? . c4f40) (char>? . c4f3f) (char>=? . c4f3e) (char=? . c4f3d) (char<? . c4f3c) (char<=? . c4f3b) (char->integer . c4f3a) (ceiling . c4f39) (call-with-values . c4f38) (call/cc . c4f37) (call-with-current-continuation . c4f36) (cddddr . c4f35) (cdddar . c4f34) (cddadr . c4f33) (cddaar . c4f32) (cdaddr . c4f31) (cdadar . c4f30) (cdaadr . c4f2f) (cdaaar . c4f2e) (cadddr . c4f2d) (caddar . c4f2c) (cadadr . c4f2b) (cadaar . c4f2a) (caaddr . c4f29) (caadar . c4f28) (caaadr . c4f27) (caaaar . c4f26) (cdddr . c4f25) (cddar . c4f24) (cdadr . c4f23) (cdaar . c4f22) (caddr . c4f21) (cadar . c4f20) (caadr . c4f1f) (caaar . c4f1e) (cddr . c4f1d) (cdar . c4f1c) (cadr . c4f1b) (caar . c4f1a) (cdr . c4f19) (car . c4f18) (boolean? . c4f17) (boolean=? . c4f16) (atan . c4f15) (assertion-violation . c4f14) (assertion-error . c2fa8) (asin . c4f13) (apply . c4f12) (append . c4f11) (angle . c4f10) (acos . c4f0f) (abs . c4f0e) (/ . c4f0d) (* . c4f0c) (- . c4f0b) (+ . c4f0a) (>= . c4f09) (> . c4f08) (= . c4f07) (<= . c4f06) (< . c4f05) (library . c4f04) (&no-nans . c4f03) (&no-infinities . c4f02) (&i/o-encoding . c4f01) (&i/o-decoding . c4f00) (&i/o-port . c4eff) (&i/o-file-does-not-exist . c4efe) (&i/o-file-already-exists . c4efd) (&i/o-file-is-read-only . c4efc) (&i/o-file-protection . c4efb) (&i/o-filename . c4efa) (&i/o-invalid-position . c4ef9) (&i/o-write . c4ef8) (&i/o-read . c4ef7) (&i/o . c4ef6) (&undefined . c4ef5) (&syntax . c4ef4) (&lexical . c4ef3) (&implementation-restriction . c4ef2) (&non-continuable . c4ef1) (&who . c4ef0) (&irritants . c4eef) (&assertion . c4eee) (&violation . c4eed) (&error . c4eec) (&serious . c4eeb) (&warning . c4eea) (&message . c4ee9) (&condition . c4ee8) (define-condition-type . c4ee7) (define-enumeration . c4ee6) (define-record-type . c4ee5) (parent-rtd . c4ee4) (nongenerative . c4ee3) (opaque . c4ee2) (sealed . c4ee1) (protocol . c4ee0) (parent . c4edf) (immutable . c4ede) (mutable . c4edd) (fields . c4edc) (error-handling-mode . c4edb) (file-options . c4eda) (buffer-mode . c4ed9) (eol-style . c4ed8) (guard . c4ed7) (trace-define . c4ed6) (trace-lambda . c4ed5) (unsyntax-splicing . c4ed4) (unsyntax . c4ed3) (unquote-splicing . c4ed2) (unquote . c4ed1) (_ . c4ed0) (else . c4ecf) (=> . c4ece) (... . c4ecd) (assert . c4ecc) (endianness . c4ecb) (delay . c4eca) (time . c4ec9) (do . c4ec8) (cond . c4ec7) (let* . c4ec6) (let . c4ec5) (let*-values . c4ec4) (let-values . c4ec3) (identifier-syntax . c4ec2) (with-syntax . c4ec1) (quasisyntax . c4ec0) (quasiquote . c4ebf) (syntax-rules . c4ebe) (include . c4ebd) (define-struct . c4ebc) (record-constructor-descriptor . c4ebb) (record-type-descriptor . c4eba) (case . c4eb9) (parameterize . c4eb8) (unless . c4eb7) (when . c4eb6) (or . c4eb5) (and . c4eb4) (if . c4eb3) (letrec* . c4eb2) (letrec . c4eb1) (type-descriptor . c4eb0) (case-lambda . c4eaf) (lambda . c4eae) (syntax . c4ead) (syntax-case . c4eac) (quote . c4eab) (foreign-call . c4eaa) (letrec-syntax . c4ea9) (let-syntax . c4ea8) (set! . c4ea7) (import . c4ea6) (begin . c4ea5) (module . c4ea4) (define-syntax . c4ea3) (define . c4ea2)) '((c4c75 core-prim . &no-nans-rcd) (c4c73 core-prim . &no-nans-rtd) (c4c60 core-prim . &no-infinities-rcd) (c4c5e core-prim . &no-infinities-rtd) (c4c4b core-prim . &i/o-encoding-rcd) (c4c49 core-prim . &i/o-encoding-rtd) (c4c30 core-prim . &i/o-decoding-rcd) (c4c2e core-prim . &i/o-decoding-rtd) (c4c1b core-prim . &i/o-port-rcd) (c4c19 core-prim . &i/o-port-rtd) (c4c00 core-prim . &i/o-file-does-not-exist-rcd) (c4bfe core-prim . &i/o-file-does-not-exist-rtd) (c4beb core-prim . &i/o-file-already-exists-rcd) (c4be9 core-prim . &i/o-file-already-exists-rtd) (c4bd6 core-prim . &i/o-file-is-read-only-rcd) (c4bd4 core-prim . &i/o-file-is-read-only-rtd) (c4bc1 core-prim . &i/o-file-protection-rcd) (c4bbf core-prim . &i/o-file-protection-rtd) (c4bac core-prim . &i/o-filename-rcd) (c4baa core-prim . &i/o-filename-rtd) (c4b91 core-prim . &i/o-invalid-position-rcd) (c4b8f core-prim . &i/o-invalid-position-rtd) (c4b76 core-prim . &i/o-write-rcd) (c4b74 core-prim . &i/o-write-rtd) (c4b61 core-prim . &i/o-read-rcd) (c4b5f core-prim . &i/o-read-rtd) (c4b4c core-prim . &i/o-rcd) (c4b4a core-prim . &i/o-rtd) (c4b37 core-prim . &undefined-rcd) (c4b35 core-prim . &undefined-rtd) (c4b22 core-prim . &syntax-rcd) (c4b20 core-prim . &syntax-rtd) (c4b01 core-prim . &lexical-rcd) (c4aff core-prim . &lexical-rtd) (c4aec core-prim . &implementation-restriction-rcd) (c4aea core-prim . &implementation-restriction-rtd) (c4ad7 core-prim . &non-continuable-rcd) (c4ad5 core-prim . &non-continuable-rtd) (c4ac2 core-prim . &who-rcd) (c4ac0 core-prim . &who-rtd) (c4aa7 core-prim . &irritants-rcd) (c4aa5 core-prim . &irritants-rtd) (c4a8c core-prim . &assertion-rcd) (c4a8a core-prim . &assertion-rtd) (c4a77 core-prim . &violation-rcd) (c4a75 core-prim . &violation-rtd) (c4a62 core-prim . &error-rcd) (c4a60 core-prim . &error-rtd) (c4a4d core-prim . &serious-rcd) (c4a4b core-prim . &serious-rtd) (c4a38 core-prim . &warning-rcd) (c4a36 core-prim . &warning-rtd) (c4a23 core-prim . &message-rcd) (c4a21 core-prim . &message-rtd) (c49c4 core-prim . &condition-rcd) (c49c2 core-prim . &condition-rtd) (c2faa core-prim . syntax-error) (c2ec5 core-prim . syntax-dispatch) (c5180 core-prim . pretty-print) (c517f core-prim . eval-core) (c517e core-prim . set-symbol-value!) (c517d core-prim . symbol-value) (c517c core-prim . gensym) (c517b core-prim . void) (c4d82 core-prim . load) (c2fba core-prim . interaction-environment) (c517a core-prim . char-ready?) (c5179 core-prim . regexp?) (c5178 core-prim . read-line) (c5177 core-prim . ungensym) (c5176 core-prim . alist->eq-hash-table) (c5175 core-prim . assoc-ref) (c5174 core-prim . print) (c5173 core-prim . format) (c5172 core-prim . host-os) (c295b core-prim . library-path) (c5171 core-prim . standard-library-path) (c5170 core-prim . file-newer?) (c516f core-prim . stat-mtime) (c516e core-prim . write-to-file) (c516d core-prim . file->list) (c516c core-prim . file->string) (c516b core-prim . digit->integer) (c516a core-prim . call-with-string-input-port) (c5169 core-prim . call-with-string-io) (c5168 core-prim . string-split) (c5167 core-prim . bytevector-for-each) (c5166 core-prim . string->regexp) (c5165 core-prim . rxmatch) (c5164 core-prim . regexp-replace-all) (c5163 core-prim . hashtable-for-each) (c5162 core-prim . call-process) (c5161 core-prim . local-tz-offset) (c5160 core-prim . microseconds) (c515f core-prim . readdir) (c515e core-prim . set-current-directory!) (c515d core-prim . expand-path) (c515c core-prim . current-directory) (c515b core-prim . %spawn) (c515a core-prim . %waitpid) (c5159 core-prim . %ffi-supported?) (c5158 core-prim . %ffi-pointer-ref) (c5157 core-prim . %ffi-pointer->string) (c5156 core-prim . %ffi-call->string-or-zero) (c5155 core-prim . %ffi-call->double) (c5154 core-prim . %ffi-call->void*) (c5153 core-prim . %ffi-call->void) (c5152 core-prim . %ffi-call->int) (c5151 core-prim . %ffi-lookup) (c5150 core-prim . %ffi-open) (c514f core-prim . %fork) (c514e core-prim . %pipe) (c514d core-prim . p) (c514c core-prim . open-output-string) (c514b core-prim . get-output-string) (c514a core-prim . get-environment-variables) (c5149 core-prim . get-environment-variable) (c5148 core-prim . get-timeofday) (c5147 core-prim . get-command-line) (c5146 core-prim . sys-display) (c5145 core-prim . vm-join!) (c5144 core-prim . vm-set-value!) (c5143 core-prim . vm?) (c5142 core-prim . main-vm?) (c5141 core-prim . vm-self) (c5140 core-prim . vm-start!) (c513f core-prim . make-vm) (c513e core-prim . mutex-try-lock!) (c513d core-prim . mutex-unlock!) (c513c core-prim . mutex-lock!) (c513b core-prim . mutex?) (c513a core-prim . make-mutex) (c5139 core-prim . condition-variable-notify-all!) (c5138 core-prim . condition-variable-notify!) (c5137 core-prim . condition-variable-wait!) (c5136 core-prim . make-condition-variable) (c5135 core-prim . mosh-executable-path) (c5134 core-prim . make-file-options) (c5133 core-prim . source-info) (c5132 core-prim . make-compiler-instruction) (c5131 core-prim . make-instruction) (c5130 core-prim . set-source-info!) (c512f core-prim . bignum?) (c512e core-prim . fast-equal?) (c512d core-prim . fasl-read) (c512c core-prim . fasl-write) (c512b core-prim . time-usage) (c512a core-prim . os-constant) (c278e core-prim . make-parameter) (c5129 core-prim . socket-port) (c5128 core-prim . socket-shutdown) (c5127 core-prim . socket-close) (c5126 core-prim . socket-send) (c5125 core-prim . socket-recv!) (c5124 core-prim . socket-recv) (c5123 core-prim . make-server-socket) (c5122 core-prim . make-client-socket) (c5121 core-prim . socket-accept) (c5120 core-prim . socket?) (c511f core-prim . string-upcase) (c511e core-prim . string-titlecase) (c511d core-prim . string-normalize-nfkd) (c511c core-prim . string-normalize-nfkc) (c511b core-prim . string-normalize-nfd) (c511a core-prim . string-normalize-nfc) (c5119 core-prim . string-foldcase) (c5118 core-prim . string-downcase) (c5117 core-prim . string-ci>?) (c5116 core-prim . string-ci>=?) (c5115 core-prim . string-ci=?) (c5114 core-prim . string-ci<?) (c5113 core-prim . string-ci<=?) (c5112 core-prim . char-whitespace?) (c5111 core-prim . char-upper-case?) (c5110 core-prim . char-title-case?) (c510f core-prim . char-numeric?) (c510e core-prim . char-lower-case?) (c510d core-prim . char-general-category) (c510c core-prim . char-upcase) (c510b core-prim . char-titlecase) (c510a core-prim . char-foldcase) (c5109 core-prim . char-downcase) (c5108 core-prim . char-ci>?) (c5107 core-prim . char-ci>=?) (c5106 core-prim . char-ci=?) (c5105 core-prim . char-ci<?) (c5104 core-prim . char-ci<=?) (c5103 core-prim . char-alphabetic?) (c2cf2 core-prim . make-variable-transformer) (c2fb0 core-prim . identifier?) (c2f9c core-prim . generate-temporaries) (c2f9e core-prim . free-identifier=?) (c2fb4 core-prim . syntax->datum) (c2fb2 core-prim . datum->syntax) (c2fa0 core-prim . bound-identifier=?) (c5102 core-prim . record-type-descriptor?) (c5101 core-prim . record-predicate) (c5100 core-prim . record-mutator) (c50ff core-prim . record-constructor) (c50fe core-prim . record-accessor) (c50fd core-prim . make-record-type-descriptor) (c50fc core-prim . make-record-constructor-descriptor) (c50fb core-prim . record?) (c50fa core-prim . record-type-uid) (c50f9 core-prim . record-type-sealed?) (c50f8 core-prim . record-type-parent) (c50f7 core-prim . record-type-opaque?) (c50f6 core-prim . record-type-name) (c50f5 core-prim . record-type-generative?) (c50f4 core-prim . record-type-field-names) (c50f3 core-prim . record-rtd) (c50f2 core-prim . record-field-mutable?) (c50f1 core-prim . delete-file) (c50f0 core-prim . file-exists?) (c50ef core-prim . vector-sort!) (c50ee core-prim . vector-sort) (c50ed core-prim . list-sort) (c50ec core-prim . symbol-hash) (c50eb core-prim . string-ci-hash) (c50ea core-prim . string-hash) (c50e9 core-prim . equal-hash) (c50e8 core-prim . hashtable-equivalence-function) (c50e7 core-prim . make-hashtable) (c50e6 core-prim . hashtable-hash-function) (c50e5 core-prim . make-eqv-hashtable) (c50e4 core-prim . make-eq-hashtable) (c50e3 core-prim . hashtable?) (c50e2 core-prim . hashtable-update!) (c50e1 core-prim . hashtable-size) (c50e0 core-prim . hashtable-set!) (c50df core-prim . hashtable-ref) (c50de core-prim . hashtable-mutable?) (c50dd core-prim . hashtable-keys) (c50dc core-prim . hashtable-entries) (c50db core-prim . hashtable-delete!) (c50da core-prim . hashtable-copy) (c50d9 core-prim . hashtable-contains?) (c50d8 core-prim . hashtable-clear!) (c50d7 core-prim . call-with-output-file) (c50d6 core-prim . call-with-input-file) (c50d5 core-prim . write-char) (c50d4 core-prim . write) (c50d3 core-prim . with-output-to-file) (c50d2 core-prim . with-input-from-file) (c50d1 core-prim . read-char) (c50d0 core-prim . read) (c50cf core-prim . peek-char) (c50ce core-prim . open-output-file) (c50cd core-prim . open-input-file) (c50cc core-prim . newline) (c50cb core-prim . display) (c50ca core-prim . close-output-port) (c50c9 core-prim . close-input-port) (c50c8 core-prim . eof-object?) (c50c7 core-prim . eof-object) (c50c6 core-prim . current-error-port) (c50c5 core-prim . current-output-port) (c50c4 core-prim . current-input-port) (c50c3 core-prim . output-port?) (c50c2 core-prim . input-port?) (c50c1 core-prim . utf-8-codec) (c50c0 core-prim . utf-16-codec) (c50bf core-prim . transcoder-error-handling-mode) (c50be core-prim . transcoder-eol-style) (c50bd core-prim . transcoder-codec) (c50bc core-prim . transcoded-port) (c50bb core-prim . textual-port?) (c50ba core-prim . string->bytevector) (c50b9 core-prim . standard-output-port) (c50b8 core-prim . standard-input-port) (c50b7 core-prim . standard-error-port) (c50b6 core-prim . set-port-position!) (c50b5 core-prim . put-u8) (c50b4 core-prim . put-string) (c50b3 core-prim . put-datum) (c50b2 core-prim . put-char) (c50b1 core-prim . put-bytevector) (c50b0 core-prim . port?) (c50af core-prim . port-transcoder) (c50ae core-prim . port-position) (c50ad core-prim . port-has-set-port-position!?) (c50ac core-prim . port-has-port-position?) (c50ab core-prim . port-eof?) (c50aa core-prim . output-port-buffer-mode) (c50a9 core-prim . open-string-output-port) (c50a8 core-prim . open-string-input-port) (c50a7 core-prim . open-file-output-port) (c50a6 core-prim . open-file-input/output-port) (c50a5 core-prim . open-file-input-port) (c50a4 core-prim . open-bytevector-output-port) (c50a3 core-prim . open-bytevector-input-port) (c50a2 core-prim . native-transcoder) (c50a1 core-prim . native-eol-style) (c50a0 core-prim . make-transcoder) (c509f core-prim . latin-1-codec) (c4b70 core-prim . make-i/o-write-error) (c4b5b core-prim . make-i/o-read-error) (c4c11 core-prim . make-i/o-port-error) (c4b87 core-prim . make-i/o-invalid-position-error) (c4ba2 core-prim . make-i/o-filename-error) (c4bbb core-prim . make-i/o-file-protection-error) (c4bd0 core-prim . make-i/o-file-is-read-only-error) (c4bfa core-prim . make-i/o-file-does-not-exist-error) (c4be5 core-prim . make-i/o-file-already-exists-error) (c4b46 core-prim . make-i/o-error) (c4c41 core-prim . make-i/o-encoding-error) (c4c2a core-prim . make-i/o-decoding-error) (c509e core-prim . make-custom-textual-output-port) (c509d core-prim . make-custom-textual-input/output-port) (c509c core-prim . make-custom-textual-input-port) (c509b core-prim . make-custom-binary-output-port) (c509a core-prim . make-custom-binary-input/output-port) (c5099 core-prim . make-custom-binary-input-port) (c5098 core-prim . make-bytevector) (c5097 core-prim . lookahead-u8) (c5096 core-prim . lookahead-char) (c4b72 core-prim . i/o-write-error?) (c4b5d core-prim . i/o-read-error?) (c4c15 core-prim . i/o-port-error?) (c4b8b core-prim . i/o-invalid-position-error?) (c4ba6 core-prim . i/o-filename-error?) (c4bbd core-prim . i/o-file-protection-error?) (c4bd2 core-prim . i/o-file-is-read-only-error?) (c4bfc core-prim . i/o-file-does-not-exist-error?) (c4be7 core-prim . i/o-file-already-exists-error?) (c4b48 core-prim . i/o-error?) (c4b8d core-prim . i/o-error-position) (c4c17 core-prim . i/o-error-port) (c4ba8 core-prim . i/o-error-filename) (c4c45 core-prim . i/o-encoding-error?) (c4c47 core-prim . i/o-encoding-error-char) (c4c2c core-prim . i/o-decoding-error?) (c5095 core-prim . get-u8) (c5094 core-prim . get-string-n!) (c5093 core-prim . get-string-n) (c5092 core-prim . get-string-all) (c5091 core-prim . get-line) (c5090 core-prim . get-datum) (c508f core-prim . get-char) (c508e core-prim . get-bytevector-some) (c508d core-prim . get-bytevector-n!) (c508c core-prim . get-bytevector-n) (c508b core-prim . get-bytevector-all) (c508a core-prim . flush-output-port) (c5089 core-prim . close-port) (c2f8a core-prim . scheme-report-environment) (c5088 core-prim . quotient) (c2f88 core-prim . null-environment) (c5087 core-prim . remainder) (c5086 core-prim . modulo) (c5085 core-prim . inexact->exact) (c5084 core-prim . force) (c5083 core-prim . exact->inexact) (c5082 core-prim . make-promise) (c5081 core-prim . exit) (c4d7c core-prim . command-line) (c5080 core-prim . string-fill!) (c507f core-prim . string-set!) (c507e core-prim . set-cdr!) (c507d core-prim . set-car!) (c507c core-prim . remove) (c507b core-prim . remv) (c507a core-prim . remp) (c5079 core-prim . remq) (c5078 core-prim . partition) (c5077 core-prim . memv) (c5076 core-prim . memq) (c5075 core-prim . memp) (c5074 core-prim . member) (c5073 core-prim . exists) (c5072 core-prim . for-all) (c5071 core-prim . fold-right) (c5070 core-prim . fold-left) (c506f core-prim . find) (c506e core-prim . filter) (c506d core-prim . cons*) (c506c core-prim . assv) (c506b core-prim . assq) (c506a core-prim . assp) (c5069 core-prim . assoc) (c5068 core-prim . call-with-string-output-port) (c5067 core-prim . call-with-port) (c5066 core-prim . call-with-bytevector-output-port) (c5065 core-prim . bytevector->string) (c5064 core-prim . buffer-mode?) (c5063 core-prim . binary-port?) (c5062 core-prim . with-exception-handler) (c5061 core-prim . raise-continuable) (c5060 core-prim . raise) (c2f8e core-prim . eval) (c2f86 core-prim . environment) (c505f core-prim . make-enumeration) (c505e core-prim . enum-set=?) (c505d core-prim . enum-set-universe) (c505c core-prim . enum-set-union) (c505b core-prim . enum-set-subset?) (c505a core-prim . enum-set-projection) (c5059 core-prim . enum-set-member?) (c5058 core-prim . enum-set-intersection) (c5057 core-prim . enum-set-indexer) (c5056 core-prim . enum-set-difference) (c5055 core-prim . enum-set-constructor) (c5054 core-prim . enum-set-complement) (c5053 core-prim . enum-set->list) (c4abc core-prim . who-condition?) (c4a34 core-prim . warning?) (c4a73 core-prim . violation?) (c4b33 core-prim . undefined-violation?) (c4b1a core-prim . syntax-violation?) (c4b1e core-prim . syntax-violation-subform) (c4b1c core-prim . syntax-violation-form) (c2fae core-prim . syntax-violation) (c5052 core-prim . simple-conditions) (c4a49 core-prim . serious-condition?) (c4ad3 core-prim . non-continuable-violation?) (c4a1d core-prim . message-condition?) (c4ab8 core-prim . make-who-condition) (c4a32 core-prim . make-warning) (c4a71 core-prim . make-violation) (c4b31 core-prim . make-undefined-violation) (c4b14 core-prim . make-syntax-violation) (c4a47 core-prim . make-serious-condition) (c4ad1 core-prim . make-non-continuable-violation) (c4a19 core-prim . make-message-condition) (c4afb core-prim . make-lexical-violation) (c4a9d core-prim . make-irritants-condition) (c4ae6 core-prim . make-implementation-restriction-violation) (c4a5c core-prim . make-error) (c4a86 core-prim . make-assertion-violation) (c4afd core-prim . lexical-violation?) (c4aa1 core-prim . irritants-condition?) (c4ae8 core-prim . implementation-restriction-violation?) (c4a5e core-prim . error?) (c4abe core-prim . condition-who) (c5051 core-prim . condition-predicate) (c4a1f core-prim . condition-message) (c4aa3 core-prim . condition-irritants) (c5050 core-prim . condition-accessor) (c504f core-prim . condition) (c4a88 core-prim . assertion-violation?) (c504e core-prim . condition?) (c504d core-prim . utf32->string) (c504c core-prim . utf16->string) (c504b core-prim . utf8->string) (c504a core-prim . uint-list->bytevector) (c5049 core-prim . u8-list->bytevector) (c5048 core-prim . string->utf8) (c5047 core-prim . string->utf32) (c5046 core-prim . string->utf16) (c5045 core-prim . sint-list->bytevector) (c5044 core-prim . native-endianness) (c5043 core-prim . bytevector?) (c5042 core-prim . bytevector=?) (c5041 core-prim . bytevector-uint-set!) (c5040 core-prim . bytevector-uint-ref) (c503f core-prim . bytevector-u8-set!) (c503e core-prim . bytevector-u8-ref) (c503d core-prim . bytevector-u64-set!) (c503c core-prim . bytevector-u64-ref) (c503b core-prim . bytevector-u64-native-set!) (c503a core-prim . bytevector-u64-native-ref) (c5039 core-prim . bytevector-u32-set!) (c5038 core-prim . bytevector-u32-ref) (c5037 core-prim . bytevector-u32-native-set!) (c5036 core-prim . bytevector-u32-native-ref) (c5035 core-prim . bytevector-u16-set!) (c5034 core-prim . bytevector-u16-ref) (c5033 core-prim . bytevector-u16-native-set!) (c5032 core-prim . bytevector-u16-native-ref) (c5031 core-prim . bytevector-sint-set!) (c5030 core-prim . bytevector-sint-ref) (c502f core-prim . bytevector-s8-set!) (c502e core-prim . bytevector-s8-ref) (c502d core-prim . bytevector-s64-set!) (c502c core-prim . bytevector-s64-ref) (c502b core-prim . bytevector-s64-native-set!) (c502a core-prim . bytevector-s64-native-ref) (c5029 core-prim . bytevector-s32-set!) (c5028 core-prim . bytevector-s32-ref) (c5027 core-prim . bytevector-s32-native-set!) (c5026 core-prim . bytevector-s32-native-ref) (c5025 core-prim . bytevector-s16-set!) (c5024 core-prim . bytevector-s16-ref) (c5023 core-prim . bytevector-s16-native-set!) (c5022 core-prim . bytevector-s16-native-ref) (c5021 core-prim . bytevector-length) (c5020 core-prim . bytevector-ieee-single-ref) (c501f core-prim . bytevector-ieee-single-set!) (c501e core-prim . bytevector-ieee-single-native-set!) (c501d core-prim . bytevector-ieee-single-native-ref) (c501c core-prim . bytevector-ieee-double-set!) (c501b core-prim . bytevector-ieee-double-ref) (c501a core-prim . bytevector-ieee-double-native-set!) (c5019 core-prim . bytevector-ieee-double-native-ref) (c5018 core-prim . bytevector-fill!) (c5017 core-prim . bytevector-copy!) (c5016 core-prim . bytevector-copy) (c5015 core-prim . bytevector->uint-list) (c5014 core-prim . bytevector->u8-list) (c5013 core-prim . bytevector->sint-list) (c4c71 core-prim . no-nans-violation?) (c4c5c core-prim . no-infinities-violation?) (c4c6f core-prim . make-no-nans-violation) (c4c5a core-prim . make-no-infinities-violation) (c5012 core-prim . real->flonum) (c5011 core-prim . flzero?) (c5010 core-prim . fltruncate) (c500f core-prim . fltan) (c500e core-prim . flsqrt) (c500d core-prim . flsin) (c500c core-prim . flround) (c500b core-prim . flpositive?) (c500a core-prim . flonum?) (c5009 core-prim . flodd?) (c5008 core-prim . flnumerator) (c5007 core-prim . flnegative?) (c5006 core-prim . flnan?) (c5005 core-prim . flmod0) (c5004 core-prim . flmod) (c5003 core-prim . flmin) (c5002 core-prim . flmax) (c5001 core-prim . fllog) (c5000 core-prim . flinteger?) (c4fff core-prim . flinfinite?) (c4ffe core-prim . flfloor) (c4ffd core-prim . flfinite?) (c4ffc core-prim . flexpt) (c4ffb core-prim . flexp) (c4ffa core-prim . fleven?) (c4ff9 core-prim . fldiv0-and-mod0) (c4ff8 core-prim . fldiv0) (c4ff7 core-prim . fldiv-and-mod) (c4ff6 core-prim . fldiv) (c4ff5 core-prim . fldenominator) (c4ff4 core-prim . flcos) (c4ff3 core-prim . flceiling) (c4ff2 core-prim . flatan) (c4ff1 core-prim . flasin) (c4ff0 core-prim . flacos) (c4fef core-prim . flabs) (c4fee core-prim . fl>?) (c4fed core-prim . fl>=?) (c4fec core-prim . fl=?) (c4feb core-prim . fl<?) (c4fea core-prim . fl<=?) (c4fe9 core-prim . fl/) (c4fe8 core-prim . fl-) (c4fe7 core-prim . fl+) (c4fe6 core-prim . fl*) (c4fe5 core-prim . fixnum->flonum) (c4fe4 core-prim . fxzero?) (c4fe3 core-prim . fxxor) (c4fe2 core-prim . fxrotate-bit-field) (c4fe1 core-prim . fxreverse-bit-field) (c4fe0 core-prim . fxpositive?) (c4fdf core-prim . fxodd?) (c4fde core-prim . fxnot) (c4fdd core-prim . fxnegative?) (c4fdc core-prim . fxmod0) (c4fdb core-prim . fxmod) (c4fda core-prim . fxmin) (c4fd9 core-prim . fxmax) (c4fd8 core-prim . fxlength) (c4fd7 core-prim . fxior) (c4fd6 core-prim . fxif) (c4fd5 core-prim . fxfirst-bit-set) (c4fd4 core-prim . fxeven?) (c4fd3 core-prim . fxdiv0-and-mod0) (c4fd2 core-prim . fxdiv0) (c4fd1 core-prim . fxdiv-and-mod) (c4fd0 core-prim . fxdiv) (c4fcf core-prim . fxcopy-bit-field) (c4fce core-prim . fxcopy-bit) (c4fcd core-prim . fxbit-set?) (c4fcc core-prim . fxbit-field) (c4fcb core-prim . fxbit-count) (c4fca core-prim . fxarithmetic-shift-right) (c4fc9 core-prim . fxarithmetic-shift-left) (c4fc8 core-prim . fxarithmetic-shift) (c4fc7 core-prim . fxand) (c4fc6 core-prim . fx>?) (c4fc5 core-prim . fx>=?) (c4fc4 core-prim . fx=?) (c4fc3 core-prim . fx<?) (c4fc2 core-prim . fx<=?) (c4fc1 core-prim . fx-/carry) (c4fc0 core-prim . fx-) (c4fbf core-prim . fx+/carry) (c4fbe core-prim . fx+) (c4fbd core-prim . fx*/carry) (c4fbc core-prim . fx*) (c4fbb core-prim . greatest-fixnum) (c4fba core-prim . least-fixnum) (c4fb9 core-prim . fixnum-width) (c4fb8 core-prim . fixnum?) (c4fb7 core-prim . bitwise-rotate-bit-field) (c4fb6 core-prim . bitwise-reverse-bit-field) (c4fb5 core-prim . bitwise-length) (c4fb4 core-prim . bitwise-if) (c4fb3 core-prim . bitwise-first-bit-set) (c4fb2 core-prim . bitwise-copy-bit-field) (c4fb1 core-prim . bitwise-copy-bit) (c4fb0 core-prim . bitwise-bit-set?) (c4faf core-prim . bitwise-bit-field) (c4fae core-prim . bitwise-bit-count) (c4fad core-prim . bitwise-xor) (c4fac core-prim . bitwise-ior) (c4fab core-prim . bitwise-and) (c4faa core-prim . bitwise-not) (c4fa9 core-prim . bitwise-arithmetic-shift-right) (c4fa8 core-prim . bitwise-arithmetic-shift-left) (c4fa7 core-prim . bitwise-arithmetic-shift) (c4fa6 core-prim . zero?) (c4fa5 core-prim . vector?) (c4fa4 core-prim . vector-set!) (c4fa3 core-prim . vector-ref) (c4fa2 core-prim . vector-map) (c4fa1 core-prim . vector-length) (c4fa0 core-prim . vector-for-each) (c4f9f core-prim . vector-fill!) (c4f9e core-prim . vector->list) (c4f9d core-prim . vector) (c4f9c core-prim . values) (c4f9b core-prim . truncate) (c4f9a core-prim . tan) (c4f99 core-prim . symbol?) (c4f98 core-prim . symbol=?) (c4f97 core-prim . symbol->string) (c4f96 core-prim . substring) (c4f95 core-prim . string?) (c4f94 core-prim . string>?) (c4f93 core-prim . string>=?) (c4f92 core-prim . string=?) (c4f91 core-prim . string<?) (c4f90 core-prim . string<=?) (c4f8f core-prim . string-ref) (c4f8e core-prim . string-length) (c4f8d core-prim . string-for-each) (c4f8c core-prim . string-copy) (c4f8b core-prim . string-append) (c4f8a core-prim . string->symbol) (c4f89 core-prim . string->number) (c4f88 core-prim . string->list) (c4f87 core-prim . string) (c4f86 core-prim . sqrt) (c4f85 core-prim . sin) (c4f84 core-prim . round) (c4f83 core-prim . reverse) (c4f82 core-prim . real?) (c4f81 core-prim . real-valued?) (c4f80 core-prim . real-part) (c4f7f core-prim . rationalize) (c4f7e core-prim . rational?) (c4f7d core-prim . rational-valued?) (c4f7c core-prim . procedure?) (c4f7b core-prim . positive?) (c4f7a core-prim . pair?) (c4f79 core-prim . odd?) (c4f78 core-prim . numerator) (c4f77 core-prim . number?) (c4f76 core-prim . number->string) (c4f75 core-prim . null?) (c4f74 core-prim . not) (c4f73 core-prim . negative?) (c4f72 core-prim . nan?) (c4f71 core-prim . min) (c4f70 core-prim . max) (c4f6f core-prim . map) (c4f6e core-prim . make-vector) (c4f6d core-prim . make-string) (c4f6c core-prim . make-rectangular) (c4f6b core-prim . make-polar) (c4f6a core-prim . magnitude) (c4f69 core-prim . log) (c4f68 core-prim . list?) (c4f67 core-prim . list-tail) (c4f66 core-prim . list-ref) (c4f65 core-prim . list->vector) (c4f64 core-prim . list->string) (c4f63 core-prim . list) (c4f62 core-prim . length) (c4f61 core-prim . lcm) (c4f60 core-prim . integer?) (c4f5f core-prim . integer-valued?) (c4f5e core-prim . integer->char) (c4f5d core-prim . infinite?) (c4f5c core-prim . inexact?) (c4f5b core-prim . inexact) (c4f5a core-prim . imag-part) (c4f59 core-prim . gcd) (c4f58 core-prim . for-each) (c4f57 core-prim . floor) (c4f56 core-prim . finite?) (c4f55 core-prim . expt) (c4f54 core-prim . exp) (c4f53 core-prim . exact?) (c4f52 core-prim . exact-integer-sqrt) (c4f51 core-prim . exact) (c4f50 core-prim . even?) (c4f4f core-prim . error) (c4f4e core-prim . eqv?) (c4f4d core-prim . equal?) (c4f4c core-prim . eq?) (c4f4b core-prim . dynamic-wind) (c4f4a core-prim . div0-and-mod0) (c4f49 core-prim . mod0) (c4f48 core-prim . div0) (c4f47 core-prim . div-and-mod) (c4f46 core-prim . mod) (c4f45 core-prim . div) (c4f44 core-prim . denominator) (c4f43 core-prim . cos) (c4f42 core-prim . cons) (c4f41 core-prim . complex?) (c4f40 core-prim . char?) (c4f3f core-prim . char>?) (c4f3e core-prim . char>=?) (c4f3d core-prim . char=?) (c4f3c core-prim . char<?) (c4f3b core-prim . char<=?) (c4f3a core-prim . char->integer) (c4f39 core-prim . ceiling) (c4f38 core-prim . call-with-values) (c4f37 core-prim . call/cc) (c4f36 core-prim . call-with-current-continuation) (c4f35 core-prim . cddddr) (c4f34 core-prim . cdddar) (c4f33 core-prim . cddadr) (c4f32 core-prim . cddaar) (c4f31 core-prim . cdaddr) (c4f30 core-prim . cdadar) (c4f2f core-prim . cdaadr) (c4f2e core-prim . cdaaar) (c4f2d core-prim . cadddr) (c4f2c core-prim . caddar) (c4f2b core-prim . cadadr) (c4f2a core-prim . cadaar) (c4f29 core-prim . caaddr) (c4f28 core-prim . caadar) (c4f27 core-prim . caaadr) (c4f26 core-prim . caaaar) (c4f25 core-prim . cdddr) (c4f24 core-prim . cddar) (c4f23 core-prim . cdadr) (c4f22 core-prim . cdaar) (c4f21 core-prim . caddr) (c4f20 core-prim . cadar) (c4f1f core-prim . caadr) (c4f1e core-prim . caaar) (c4f1d core-prim . cddr) (c4f1c core-prim . cdar) (c4f1b core-prim . cadr) (c4f1a core-prim . caar) (c4f19 core-prim . cdr) (c4f18 core-prim . car) (c4f17 core-prim . boolean?) (c4f16 core-prim . boolean=?) (c4f15 core-prim . atan) (c4f14 core-prim . assertion-violation) (c2fa8 core-prim . assertion-error) (c4f13 core-prim . asin) (c4f12 core-prim . apply) (c4f11 core-prim . append) (c4f10 core-prim . angle) (c4f0f core-prim . acos) (c4f0e core-prim . abs) (c4f0d core-prim . /) (c4f0c core-prim . *) (c4f0b core-prim . -) (c4f0a core-prim . +) (c4f09 core-prim . >=) (c4f08 core-prim . >) (c4f07 core-prim . =) (c4f06 core-prim . <=) (c4f05 core-prim . <) (c4f04 core-prim . library) (c4f03 $core-rtd &no-nans-rtd &no-nans-rcd) (c4f02 $core-rtd &no-infinities-rtd &no-infinities-rcd) (c4f01 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (c4f00 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (c4eff $core-rtd &i/o-port-rtd &i/o-port-rcd) (c4efe $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (c4efd $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (c4efc $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (c4efb $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (c4efa $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (c4ef9 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (c4ef8 $core-rtd &i/o-write-rtd &i/o-write-rcd) (c4ef7 $core-rtd &i/o-read-rtd &i/o-read-rcd) (c4ef6 $core-rtd &i/o-rtd &i/o-rcd) (c4ef5 $core-rtd &undefined-rtd &undefined-rcd) (c4ef4 $core-rtd &syntax-rtd &syntax-rcd) (c4ef3 $core-rtd &lexical-rtd &lexical-rcd) (c4ef2 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (c4ef1 $core-rtd &non-continuable-rtd &non-continuable-rcd) (c4ef0 $core-rtd &who-rtd &who-rcd) (c4eef $core-rtd &irritants-rtd &irritants-rcd) (c4eee $core-rtd &assertion-rtd &assertion-rcd) (c4eed $core-rtd &violation-rtd &violation-rcd) (c4eec $core-rtd &error-rtd &error-rcd) (c4eeb $core-rtd &serious-rtd &serious-rcd) (c4eea $core-rtd &warning-rtd &warning-rcd) (c4ee9 $core-rtd &message-rtd &message-rcd) (c4ee8 $core-rtd &condition-rtd &condition-rcd) (c4ee7 macro . define-condition-type) (c4ee6 macro . define-enumeration) (c4ee5 macro . define-record-type) (c4ee4 macro . parent-rtd) (c4ee3 macro . nongenerative) (c4ee2 macro . opaque) (c4ee1 macro . sealed) (c4ee0 macro . protocol) (c4edf macro . parent) (c4ede macro . immutable) (c4edd macro . mutable) (c4edc macro . fields) (c4edb macro . error-handling-mode) (c4eda macro . file-options) (c4ed9 macro . buffer-mode) (c4ed8 macro . eol-style) (c4ed7 macro . guard) (c4ed6 macro . trace-define) (c4ed5 macro . trace-lambda) (c4ed4 macro . unsyntax-splicing) (c4ed3 macro . unsyntax) (c4ed2 macro . unquote-splicing) (c4ed1 macro . unquote) (c4ed0 macro . _) (c4ecf macro . else) (c4ece macro . =>) (c4ecd macro . ...) (c4ecc macro . assert) (c4ecb macro . endianness) (c4eca macro . delay) (c4ec9 macro . time) (c4ec8 macro . do) (c4ec7 macro . cond) (c4ec6 macro . let*) (c4ec5 macro . let) (c4ec4 macro . let*-values) (c4ec3 macro . let-values) (c4ec2 macro . identifier-syntax) (c4ec1 macro . with-syntax) (c4ec0 macro . quasisyntax) (c4ebf macro . quasiquote) (c4ebe macro . syntax-rules) (c4ebd macro . include) (c4ebc macro . define-struct) (c4ebb core-macro . record-constructor-descriptor) (c4eba core-macro . record-type-descriptor) (c4eb9 macro . case) (c4eb8 macro . parameterize) (c4eb7 macro . unless) (c4eb6 macro . when) (c4eb5 core-macro . or) (c4eb4 core-macro . and) (c4eb3 core-macro . if) (c4eb2 core-macro . letrec*) (c4eb1 core-macro . letrec) (c4eb0 core-macro . type-descriptor) (c4eaf core-macro . case-lambda) (c4eae core-macro . lambda) (c4ead core-macro . syntax) (c4eac core-macro . syntax-case) (c4eab core-macro . quote) (c4eaa core-macro . foreign-call) (c4ea9 letrec-syntax) (c4ea8 let-syntax) (c4ea7 set!) (c4ea6 import) (c4ea5 begin) (c4ea4 module) (c4ea3 define-syntax) (c4ea2 define)) values values '#f '#f '#f '#f) (c2add@c297c@install-library 'c51a1 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . c5180) (eval-core . c517f) (set-symbol-value! . c517e) (symbol-value . c517d) (gensym . c517c) (void . c517b)) '() values values '#f '#f '#f '#f) (c2add@c297c@install-library 'c51a2 '(mosh) '() '() '() '() '((set-symbol-value! . c517e) (symbol-value . c517d) (regexp? . c5179) (read-line . c5178) (ungensym . c5177) (alist->eq-hash-table . c5176) (assoc-ref . c5175) (print . c5174) (format . c5173) (host-os . c5172) (library-path . c295b) (standard-library-path . c5171) (file-newer? . c5170) (stat-mtime . c516f) (write-to-file . c516e) (file->list . c516d) (file->string . c516c) (digit->integer . c516b) (call-with-string-input-port . c516a) (call-with-string-io . c5169) (string-split . c5168) (bytevector-for-each . c5167) (string->regexp . c5166) (rxmatch . c5165) (regexp-replace-all . c5164) (hashtable-for-each . c5163) (readdir . c515f) (set-current-directory! . c515e) (expand-path . c515d) (current-directory . c515c) (p . c514d) (get-timeofday . c5148) (get-command-line . c5147) (sys-display . c5146) (vm-join! . c5145) (vm-set-value! . c5144) (vm? . c5143) (main-vm? . c5142) (vm-self . c5141) (vm-start! . c5140) (make-vm . c513f) (mutex-try-lock! . c513e) (mutex-unlock! . c513d) (mutex-lock! . c513c) (mutex? . c513b) (make-mutex . c513a) (condition-variable-notify-all! . c5139) (condition-variable-notify! . c5138) (condition-variable-wait! . c5137) (make-condition-variable . c5136) (mosh-executable-path . c5135) (make-file-options . c5134) (source-info . c5133) (make-compiler-instruction . c5132) (make-instruction . c5131) (set-source-info! . c5130) (bignum? . c512f) (fast-equal? . c512e) (fasl-read . c512d) (fasl-write . c512c) (time-usage . c512b) (os-constant . c512a) (time . c4ec9) (include . c4ebd)) '() values values '#f '#f '#f '#f) (c2add@c297c@install-library 'c51a3 '(system) '() '() '() '() '((call-process . c5162) (local-tz-offset . c5161) (microseconds . c5160) (expand-path . c515d) (%spawn . c515b) (%waitpid . c515a) (%ffi-supported? . c5159) (%ffi-pointer-ref . c5158) (%ffi-pointer->string . c5157) (%ffi-call->string-or-zero . c5156) (%ffi-call->double . c5155) (%ffi-call->void* . c5154) (%ffi-call->void . c5153) (%ffi-call->int . c5152) (%ffi-lookup . c5151) (%ffi-open . c5150) (%fork . c514f) (%pipe . c514e) (open-output-string . c514c) (get-output-string . c514b) (get-environment-variables . c514a) (get-environment-variable . c5149) (make-parameter . c278e) (socket-port . c5129) (socket-shutdown . c5128) (socket-close . c5127) (socket-send . c5126) (socket-recv! . c5125) (socket-recv . c5124) (make-server-socket . c5123) (make-client-socket . c5122) (socket-accept . c5121) (socket? . c5120) (parameterize . c4eb8)) '() values values '#f '#f '#f '#f))
((lambda (c4d6b@add-library-path! c4d6d@parse-and-add-library-path c4d6f@for-each-with-index c4d71@rpad c4d73@condition-printer c4d75@record->field-alist c4d77@map-with-index c4d79@repl c4d7b@trace-printer c4d7d@command-line c4d7f@local-library-path c4d81@load/args c4d83@load c4d85@ironscheme-build c4d87@eval-top-level c4d89@compile-system-libraries c4d8b@compile c4d8d@compile->closure c4d8f@pre-compile-r6rs-file c4d91@load-r6rs-top-level c4d93@load-r6rs-top-level-sexp) (begin (set! c4d6b@add-library-path! (lambda (c4db6@path) (c2acd@c295c@library-path (append (c2acd@c295c@library-path) (list c4db6@path))))) (set! c4d6d@parse-and-add-library-path (lambda (c4db8@paths c4db9@message) ((lambda (c4dbc@t) (if c4dbc@t ((lambda (c4dbe@paths) (for-each (lambda (c4dc0@path) (if (file-exists? c4dc0@path) (c4d6b@add-library-path! (expand-path c4dc0@path)) (format (current-error-port) c4db9@message c4dc0@path))) (reverse (string-split c4dbe@paths '#\:)))) c4dbc@t) (void))) c4db8@paths))) (set! c4d6f@for-each-with-index (lambda (c4dc2@proc c4dc3@lst) (letrec ((c4dc6@loop (lambda (c4dc8@i c4dc9@lst) (if (null? c4dc9@lst) (if '#f '#f (void)) (begin (c4dc2@proc c4dc8@i (car c4dc9@lst)) (c4dc6@loop (+ c4dc8@i '1) (cdr c4dc9@lst))))))) (c4dc6@loop '1 c4dc3@lst)))) (set! c4d71@rpad (lambda (c4dcc@str c4dcd@pad c4dce@n) ((lambda (c4dd2@rest) ((letrec ((c4dd4@loop (lambda (c4dd6@rest c4dd7@ret) (if (<= c4dd6@rest '0) c4dd7@ret (c4dd4@loop (- c4dd6@rest '1) (string-append c4dd7@ret c4dcd@pad)))))) c4dd4@loop) c4dd2@rest (format '"~a" c4dcc@str))) (- c4dce@n (string-length (format '"~a" c4dcc@str)))))) (set! c4d73@condition-printer (lambda (c4dda@e c4ddb@port) ((lambda (c4ddf@max-condition-len) (begin (set! c4ddf@max-condition-len (apply max (map (lambda (c4df0@c) (string-length (symbol->string (record-type-name (record-rtd c4df0@c))))) (simple-conditions c4dda@e)))) (begin (display '" Condition components:\n" c4ddb@port) (c4d6f@for-each-with-index (lambda (c4de0@i c4de1@x) ((lambda (c4de4@rtd c4de5@fields-alist) (begin (format c4ddb@port '" ~d. ~a" c4de0@i (c4d71@rpad (symbol->string (record-type-name c4de4@rtd)) '" " c4ddf@max-condition-len)) (if (null? c4de5@fields-alist) (newline c4ddb@port) (void)) ((letrec ((c4de8@loop (lambda (c4dea@first c4deb@fields-alist) (if (null? c4deb@fields-alist) '() ((lambda (c4dee@field) (begin (if (not c4dea@first) (display (c4d71@rpad '"" '" " (+ '4 c4ddf@max-condition-len)) c4ddb@port) (void)) (display '"       " c4ddb@port) (display (car c4dee@field) c4ddb@port) (display '": " c4ddb@port) (write (cdr c4dee@field) c4ddb@port) (newline c4ddb@port) (c4de8@loop '#f (cdr c4deb@fields-alist)))) (car c4deb@fields-alist)))))) c4de8@loop) '#t c4de5@fields-alist))) (record-rtd c4de1@x) (c4d75@record->field-alist c4de1@x))) (simple-conditions c4dda@e))))) '#f))) (set! c4d75@record->field-alist (lambda (c4df2@r) ((lambda (c4df5@ref) (begin (set! c4df5@ref (lambda (c4e00@rtd c4e01@i c4e02@x) ((lambda (c4e06@val) (if (symbol? c4e06@val) (ungensym c4e06@val) c4e06@val)) ((record-accessor c4e00@rtd c4e01@i) c4e02@x)))) ((letrec ((c4df6@loop (lambda (c4df8@ret c4df9@rtd) (if c4df9@rtd (c4df6@loop (append c4df8@ret (c4d77@map-with-index (lambda (c4dfc@i c4dfd@field) (cons c4dfd@field (c4df5@ref c4df9@rtd c4dfc@i c4df2@r))) (vector->list (record-type-field-names c4df9@rtd)))) (record-type-parent c4df9@rtd)) c4df8@ret)))) c4df6@loop) '() (record-rtd c4df2@r)))) '#f))) (set! c4d77@map-with-index (lambda (c4e08@proc c4e09@lst) ((letrec ((c4e0c@loop (lambda (c4e0e@i c4e0f@lst c4e10@ret) (if (null? c4e0f@lst) (reverse c4e10@ret) (c4e0c@loop (+ c4e0e@i '1) (cdr c4e0f@lst) (cons (c4e08@proc c4e0e@i (car c4e0f@lst)) c4e10@ret)))))) c4e0c@loop) '0 c4e09@lst '()))) (set! c4d79@repl (lambda c4e14@x ((lambda (c4e17@rec) (begin (set! c4e17@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (c4e1a@c4e18) (lambda () (with-exception-handler (lambda (c4e1c@e) ((call/cc (lambda (c4e1e@c4e19) (c4e1a@c4e18 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? c4e1c@e) (c4d73@condition-printer c4e1c@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" c4e1c@e))) (c4e1e@c4e19 (lambda () (raise-continuable c4e1c@e)))))))))) (lambda () ((letrec ((c4e20@loop (lambda (c4e22@line c4e23@accum) ((lambda (c4e27@parentheses-ok? c4e29@eval-string-print) (begin (set! c4e27@parentheses-ok? (lambda (c4e2e@text) ((letrec ((c4e30@loop (lambda (c4e32@chars c4e33@p0 c4e34@p1) (if (null? c4e32@chars) (= '0 c4e33@p0 c4e34@p1) ((lambda (c4e38@t) (if (memv c4e38@t '(#\()) (c4e30@loop (cdr c4e32@chars) (+ c4e33@p0 '1) c4e34@p1) (if (memv c4e38@t '(#\))) (c4e30@loop (cdr c4e32@chars) (- c4e33@p0 '1) c4e34@p1) (if (memv c4e38@t '(#\[)) (c4e30@loop (cdr c4e32@chars) c4e33@p0 (+ c4e34@p1 '1)) (if (memv c4e38@t '(#\])) (c4e30@loop (cdr c4e32@chars) c4e33@p0 (- c4e34@p1 '1)) (c4e30@loop (cdr c4e32@chars) c4e33@p0 c4e34@p1)))))) (car c4e32@chars)))))) c4e30@loop) (string->list c4e2e@text) '0 '0))) (set! c4e29@eval-string-print (lambda (c4e2c@text) (if (not (or (string=? '"\n" c4e2c@text) (= '0 (string-length c4e2c@text)))) (write (c4d87@eval-top-level (call-with-port (open-string-input-port c4e2c@text) read))) (void)))) (if (eof-object? c4e22@line) (begin (c4e29@eval-string-print c4e23@accum) (exit)) ((lambda (c4e2a@current) (if (c4e27@parentheses-ok? c4e2a@current) (c4e29@eval-string-print c4e2a@current) (c4e20@loop (get-line (current-input-port)) c4e2a@current))) (string-append c4e23@accum c4e22@line))))) '#f '#f)))) c4e20@loop) (get-line (current-input-port)) '""))))))) (newline) (c4e17@rec)))) (c4e17@rec))) '#f))) (set! c4d7b@trace-printer (c2865@c278f@make-parameter write)) (set! c4d7d@command-line (c2865@c278f@make-parameter (get-command-line))) (set! c4d7f@local-library-path (lambda (c4e3a@filename) (cons (expand-path '".") (c2acd@c295c@library-path)))) (set! c4d81@load/args (lambda (c4e3c@filename . c4e3e@args) (begin (apply c4d91@load-r6rs-top-level c4e3c@filename 'load c4e3e@args) (void)))) (set! c4d83@load (lambda (c4e40@filename) (begin (apply c4d91@load-r6rs-top-level c4e40@filename 'load (c4d7d@command-line)) (void)))) (set! c4d85@ironscheme-build (lambda () (c4d83@load '"ironscheme-buildscript.ss"))) (set! c4d87@eval-top-level (lambda (c4e42@x) (c4997@c2f8f@eval c4e42@x (c49ad@c2fbb@interaction-environment)))) (set! c4d89@compile-system-libraries (lambda () (c4d87@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! c4d8b@compile (lambda (c4e44@filename) (c4d91@load-r6rs-top-level c4e44@filename 'compile))) (set! c4d8d@compile->closure (lambda (c4e46@filename) (c4d91@load-r6rs-top-level c4e46@filename 'closure))) (set! c4d8f@pre-compile-r6rs-file (lambda (c4e48@filename) (c4d91@load-r6rs-top-level c4e48@filename 'compile))) (set! c4d91@load-r6rs-top-level (lambda (c4e4a@filename c4e4b@how . c4e4e@args) ((lambda (c4e54@c4e51 c4e55@c4e53) ((lambda (c4e58@swap) (dynamic-wind c4e58@swap (lambda () ((lambda (c4e5a@x*) ((lambda (c4e5c@t) (if (memv c4e5c@t '(closure)) (c49ac@c2fb9@pre-compile-r6rs-top-level c4e5a@x*) (if (memv c4e5c@t '(load)) ((lambda (c4e62@c4e5f c4e63@c4e61) ((lambda (c4e66@swap) (dynamic-wind c4e66@swap (lambda () ((c49ab@c2fb7@compile-r6rs-top-level c4e5a@x*))) c4e66@swap)) (lambda () ((lambda (c4e68@t) (begin (c4e62@c4e5f c4e63@c4e61) (set! c4e63@c4e61 c4e68@t))) (c4e62@c4e5f))))) c4d7d@command-line (cons c4e4a@filename (car c4e4e@args))) (if (memv c4e5c@t '(compile)) (begin (c49ab@c2fb7@compile-r6rs-top-level c4e5a@x*) (c2ad1@c2964@serialize-all c2860@c2785@serialize-library c28ba@c2873@compile-core-expr)) (if '#f '#f (void)))))) c4e4b@how)) (with-input-from-file c4e4a@filename (lambda () ((letrec ((c4e6a@f (lambda () ((lambda (c4e6c@x) (if (eof-object? c4e6c@x) '() (cons c4e6c@x (c4e6a@f)))) (c2858@c2775@read-annotated))))) c4e6a@f)))))) c4e58@swap)) (lambda () ((lambda (c4e6e@t) (begin (c4e54@c4e51 c4e55@c4e53) (set! c4e55@c4e53 c4e6e@t))) (c4e54@c4e51))))) c2acd@c295c@library-path (c4d7f@local-library-path c4e4a@filename)))) (set! c4d93@load-r6rs-top-level-sexp (lambda (c4e70@import-spec c4e71@thunk) ((lambda (c4e78@c4e75 c4e79@c4e77) ((lambda (c4e7c@swap) (dynamic-wind c4e7c@swap (lambda () ((lambda (c4e82@c4e7f c4e83@c4e81) ((lambda (c4e86@swap) (dynamic-wind c4e86@swap (lambda () ((c49ab@c2fb7@compile-r6rs-top-level (list (cons 'import c4e70@import-spec) (list c4e71@thunk))))) c4e86@swap)) (lambda () ((lambda (c4e88@t) (begin (c4e82@c4e7f c4e83@c4e81) (set! c4e83@c4e81 c4e88@t))) (c4e82@c4e7f))))) c4d7d@command-line '())) c4e7c@swap)) (lambda () ((lambda (c4e8a@t) (begin (c4e78@c4e75 c4e79@c4e77) (set! c4e79@c4e77 c4e8a@t))) (c4e78@c4e75))))) c2acd@c295c@library-path (c4d7f@local-library-path '"")))) (begin (set! c4ea0@c4d93@load-r6rs-top-level-sexp c4d93@load-r6rs-top-level-sexp) (set! c4e9f@c4d91@load-r6rs-top-level c4d91@load-r6rs-top-level) (set! c4e9e@c4d8f@pre-compile-r6rs-file c4d8f@pre-compile-r6rs-file) (set! c4e9d@c4d8d@compile->closure c4d8d@compile->closure) (set! c4e9c@c4d8b@compile c4d8b@compile) (set! c4e9b@c4d89@compile-system-libraries c4d89@compile-system-libraries) (set! c4e9a@c4d87@eval-top-level c4d87@eval-top-level) (set! c4e99@c4d85@ironscheme-build c4d85@ironscheme-build) (set! c4e98@c4d83@load c4d83@load) (set! c4e97@c4d81@load/args c4d81@load/args) (set! c4e96@c4d7f@local-library-path c4d7f@local-library-path) (set! c4e95@c4d7d@command-line c4d7d@command-line) (set! c4e94@c4d7b@trace-printer c4d7b@trace-printer) (set! c4e93@c4d79@repl c4d79@repl) (set! c4e92@c4d77@map-with-index c4d77@map-with-index) (set! c4e91@c4d75@record->field-alist c4d75@record->field-alist) (set! c4e90@c4d73@condition-printer c4d73@condition-printer) (set! c4e8f@c4d71@rpad c4d71@rpad) (set! c4e8e@c4d6f@for-each-with-index c4d6f@for-each-with-index) (set! c4e8d@c4d6d@parse-and-add-library-path c4d6d@parse-and-add-library-path) (set! c4e8c@c4d6b@add-library-path! c4d6b@add-library-path!) (c2ad2@c2966@current-precompiled-library-loader c2861@c2787@load-serialized-library) (set-symbol-value! 'load c4d83@load) (set-symbol-value! 'pre-compile-r6rs-file c4d8f@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs c4d87@eval-top-level) (set-symbol-value! 'int-env-syms c498e@c2f7d@interaction-environment-symbols) (set-symbol-value! 'expanded2core c28b9@c2871@expanded->core) (set-symbol-value! 'trace-printer c4d7b@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (c4d94@c) (condition (c4cc8@c4ad2@make-non-continuable-violation) (c4cbe@c4ab9@make-who-condition 'raise) (c4c82@c4a1a@make-message-condition '"returned from non-continuable exception") (c4cb4@c4a9e@make-irritants-condition (list c4d94@c))))) (c4d6d@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (c4d6d@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (c4d6b@add-library-path! (string-append (mosh-executable-path) '"/lib")) (c4d6b@add-library-path! (string-append (current-directory) '"/lib"))) (c4d6b@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (c4d96@prefix) (c2ace@c295e@library-extensions (c4d96@prefix '".mosh" (c2ace@c295e@library-extensions)))) (lambda (c4d98@ext c4d99@ls) (append (map (lambda (c4d9c@x) (string-append c4d98@ext c4d9c@x)) c4d99@ls) c4d99@ls))) ((lambda (c4d9e@args c4d9f@port) ((lambda (c4da3@ref) (begin (set! c4da3@ref (lambda (c4dae@rtd c4daf@i c4db0@x) ((lambda (c4db4@val) (if (symbol? c4db4@val) (ungensym c4db4@val) c4db4@val)) ((record-accessor c4dae@rtd c4daf@i) c4db0@x)))) (with-exception-handler (lambda (c4da4@c) (if (condition? c4da4@c) (c4d73@condition-printer c4da4@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" c4da4@c))) (lambda () (if ((call/cc (lambda (c4da8@c4da6) (lambda () (with-exception-handler (lambda (c4daa@c) ((call/cc (lambda (c4dac@c4da7) (c4da8@c4da6 (lambda () (if '#t '#f (c4dac@c4da7 (lambda () (raise-continuable c4daa@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (c4d93@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? c4d9e@args) (c4d79@repl) (c4d91@load-r6rs-top-level (car c4d9e@args) 'load (cdr c4d9e@args)))))))) '#f)) (c4d7d@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
