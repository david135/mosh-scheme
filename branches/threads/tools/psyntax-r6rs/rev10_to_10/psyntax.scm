;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (o2765@read-annotated o2767@annotation-stripped o2769@annotation? o276b@annotation-source o276d@annotation-expression o276f@scm->fasl o2771@fasl-save o2773@fasl-load o2775@serialize-library o2777@load-serialized-library o2779@make-record-printer o277b@compile-core o277d@read-library-source-file o277f@make-parameter o27e7@file-options-spec) (begin (set! o2765@read-annotated read) (set! o2767@annotation-stripped (lambda (o27e8@x) (o276d@annotation-expression o27e8@x))) (set! o2769@annotation? (lambda (o27ea@x) (source-info o27ea@x))) (set! o276b@annotation-source (lambda (o27ec@x) (source-info o27ec@x))) (set! o276d@annotation-expression (lambda (o27ee@x) (if (pair? o27ee@x) (cons (car o27ee@x) (cdr o27ee@x)) (display '"line:46\n")))) (set! o276f@scm->fasl (lambda (o27f0@filename) (string-append o27f0@filename '".fasl"))) (set! o2771@fasl-save (lambda (o27f2@filename o27f3@obj) (call-with-port (open-file-output-port o27f2@filename) (lambda (o27f6@port) ((symbol-value 'fasl-write!) o27f3@obj o27f6@port))))) (set! o2773@fasl-load (lambda (o27f8@filename) (call-with-port (open-file-input-port o27f8@filename) (symbol-value 'fasl-read!)))) (set! o2775@serialize-library (lambda (o27fa@filename o27fb@obj) (begin (format '#t '"serialize-library ~a\n..." o27fa@filename) ((lambda (o27fe@expanded2core) ((lambda (o2800@compile) ((lambda (o2802@code) ((lambda (o2804@pivot) ((lambda (o2806@visit) ((lambda () (begin (set-car! o2804@pivot o2806@visit) ((lambda (o2808@pivot) ((lambda (o280a@invoke) ((lambda () (set-car! o2808@pivot o280a@invoke)))) (o2800@compile (o27fe@expanded2core (car o2808@pivot))))) (cdr o2804@pivot)))))) (o2800@compile (o27fe@expanded2core (car o2804@pivot))))) (cddddr (cddddr o2802@code)))) o27fb@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (o280c@fasl-file) (begin (if (file-exists? o280c@fasl-file) (delete-file o280c@fasl-file) (void)) ((call/cc (lambda (o2810@o280e) (lambda () (with-exception-handler (lambda (o2812@c) ((call/cc (lambda (o2814@o280f) (o2810@o280e (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " o27fa@filename) (if (file-exists? o280c@fasl-file) (delete-file o280c@fasl-file) (void)) '#f) (o2814@o280f (lambda () (raise-continuable o2812@c)))))))))) (lambda () (begin (o2771@fasl-save o280c@fasl-file o27fb@obj) (display '"OK\n")))))))))) (o276f@scm->fasl o27fa@filename))))) (set! o2777@load-serialized-library (lambda (o2816@filename o2817@obj) ((lambda (o281a@fasl-file) (if (and (file-exists? o281a@fasl-file) ((symbol-value 'file-newer?) o281a@fasl-file o2816@filename)) ((lambda (o281c@expanded2core) ((lambda (o281e@eval-compiled-core) ((lambda (o2820@code) ((lambda (o2822@pivot) ((lambda (o2824@visit) ((lambda (o2826@visit-proc) ((lambda () (begin (set-car! o2822@pivot o2826@visit-proc) ((lambda (o2828@pivot) ((lambda (o282a@invoke) ((lambda () (begin (set-car! o2828@pivot (lambda () (o281e@eval-compiled-core o282a@invoke))) (apply o2817@obj o2820@code))))) (car o2828@pivot))) (cdr o2822@pivot)) '#t)))) (lambda () (o281e@eval-compiled-core o2824@visit)))) (car o2822@pivot))) (cddddr (cddddr o2820@code)))) (o2773@fasl-load o281a@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (o276f@scm->fasl o2816@filename)))) (set! o2779@make-record-printer (lambda (o282c@name o282d@printer) (lambda o2830@x (begin (display '"record printer") (for-each display o2830@x))))) (set! o277b@compile-core (lambda o2832@x (apply error 'comile-core '"not implementated" o2832@x))) (set! o277d@read-library-source-file (lambda (o2834@file-name) (with-input-from-file o2834@file-name o2765@read-annotated))) (set! o277f@make-parameter (lambda o2844 ((lambda (o2845) (if (= o2845 '1) (apply (lambda (o2836@x) (o277f@make-parameter o2836@x (lambda (o2838@x) o2838@x))) o2844) (if (= o2845 '2) (apply (lambda (o283a@x o283b@fender) ((lambda (o283e@x) (lambda o2842 ((lambda (o2843) (if (= o2843 '0) (apply (lambda () o283e@x) o2842) (if (= o2843 '1) (apply (lambda (o2840@v) (set! o283e@x (o283b@fender o2840@v))) o2842) (error 'apply '"invalid arg count")))) (length o2842)))) (o283b@fender o283a@x))) o2844) (error 'apply '"invalid arg count")))) (length o2844)))) (set! o27e7@file-options-spec (lambda (o2846@x) o2846@x)) (begin (set! o2856@o27e7@file-options-spec o27e7@file-options-spec) (set! o2855@o277f@make-parameter o277f@make-parameter) (set! o2854@o277d@read-library-source-file o277d@read-library-source-file) (set! o2853@o277b@compile-core o277b@compile-core) (set! o2852@o2779@make-record-printer o2779@make-record-printer) (set! o2851@o2777@load-serialized-library o2777@load-serialized-library) (set! o2850@o2775@serialize-library o2775@serialize-library) (set! o284f@o2773@fasl-load o2773@fasl-load) (set! o284e@o2771@fasl-save o2771@fasl-save) (set! o284d@o276f@scm->fasl o276f@scm->fasl) (set! o284c@o276d@annotation-expression o276d@annotation-expression) (set! o284b@o276b@annotation-source o276b@annotation-source) (set! o284a@o2769@annotation? o2769@annotation?) (set! o2849@o2767@annotation-stripped o2767@annotation-stripped) (set! o2848@o2765@read-annotated o2765@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (o285b@current-primitive-locations o285d@mutable? o285f@rewriter o2861@expanded->core o2863@compile-core-expr o2865@pretty-print o2867@compile-core-expr-to-port) (begin (set! o285b@current-primitive-locations (o2855@o277f@make-parameter (lambda (o2868@x) '#f) (lambda (o286a@p) o286a@p))) (set! o285d@mutable? (lambda (o286c@x) (or (pair? o286c@x) (vector? o286c@x) (hashtable? o286c@x)))) (set! o285f@rewriter (lambda (o286e@quote-hack?) ((lambda (o2871@f) (begin (set! o2871@f (lambda (o2872@x) (if (pair? o2872@x) ((lambda (o2874@t) (if (memv o2874@t '(quote)) (if (and o286e@quote-hack? (o285d@mutable? (cadr o2872@x))) ((lambda (o2876@g) (begin (set-symbol-value! o2876@g (cadr o2872@x)) o2876@g)) (gensym)) o2872@x) (if (memv o2874@t '(case-lambda)) (cons 'case-lambda (map (lambda (o2878@x) (cons (car o2878@x) (map o2871@f (cdr o2878@x)))) (cdr o2872@x))) (if (memv o2874@t '(lambda)) (cons* 'lambda (cadr o2872@x) (map o2871@f (cddr o2872@x))) (if (memv o2874@t '(letrec)) ((lambda (o287a@bindings o287b@body*) ((lambda (o287e@lhs* o287f@rhs*) (cons* 'letrec (map list o287e@lhs* (map o2871@f o287f@rhs*)) (map o2871@f o287b@body*))) (map car o287a@bindings) (map cadr o287a@bindings))) (cadr o2872@x) (cddr o2872@x)) (if (memv o2874@t '(letrec*)) ((lambda (o2882@bindings o2883@body*) ((lambda (o2886@lhs* o2887@rhs*) (cons* 'letrec* (map list o2886@lhs* (map o2871@f o2887@rhs*)) (map o2871@f o2883@body*))) (map car o2882@bindings) (map cadr o2882@bindings))) (cadr o2872@x) (cddr o2872@x)) (if (memv o2874@t '(library-letrec*)) ((lambda (o288a@name o288b@x) ((lambda (o288e@bindings o288f@body*) ((lambda (o2892@lhs* o2893@lhs** o2894@rhs*) (cons* 'library-letrec* o288a@name (map list o2892@lhs* o2893@lhs** (map o2871@f o2894@rhs*)) (map o2871@f o288f@body*))) (map car o288e@bindings) (map cadr o288e@bindings) (map caddr o288e@bindings))) (cadr o288b@x) (cddr o288b@x))) (cadr o2872@x) (cdr o2872@x)) (if (memv o2874@t '(begin)) (cons 'begin (map o2871@f (cdr o2872@x))) (if (memv o2874@t '(set!)) (list 'set! (cadr o2872@x) (o2871@f (caddr o2872@x))) (if (memv o2874@t '(primitive)) ((lambda (o2898@op) ((lambda (o289a@t) (if o289a@t ((lambda (o289c@loc) o289c@loc) o289a@t) o2898@op)) ((o285b@current-primitive-locations) o2898@op))) (cadr o2872@x)) (if (memv o2874@t '(define)) o2872@x (if (list? o2872@x) (map o2871@f o2872@x) (error 'rewrite '"invalid form ~s ~s" o2872@x (list? o2872@x)))))))))))))) (car o2872@x)) o2872@x))) o2871@f)) '#f))) (set! o2861@expanded->core (lambda (o289e@x) ((o285f@rewriter '#f) o289e@x))) (set! o2863@compile-core-expr (lambda (o28a0@x) ((o285f@rewriter '#f) o28a0@x))) (set! o2865@pretty-print write) (set! o2867@compile-core-expr-to-port (lambda (o28a2@x o28a3@p) (o2865@pretty-print ((o285f@rewriter '#f) o28a2@x) o28a3@p))) (begin (set! o28ac@o2867@compile-core-expr-to-port o2867@compile-core-expr-to-port) (set! o28ab@o2865@pretty-print o2865@pretty-print) (set! o28aa@o2863@compile-core-expr o2863@compile-core-expr) (set! o28a9@o2861@expanded->core o2861@expanded->core) (set! o28a8@o285f@rewriter o285f@rewriter) (set! o28a7@o285d@mutable? o285d@mutable?) (set! o28a6@o285b@current-primitive-locations o285b@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (o28fb@make-collection o28fd@current-library-collection o2903@o28fe o2905@o2900 o2907@o28ff o290a@library? o290c@make-library o290e@library-id o2910@library-name o2912@library-version o2914@library-imp* o2916@library-vis* o2918@library-inv* o291a@library-subst o291c@library-env o291e@library-visit-state o2920@library-invoke-state o2922@library-visit-code o2924@library-invoke-code o2926@library-visible? o2928@library-source-file-name o292a@set-library-id! o292c@set-library-name! o292e@set-library-version! o2930@set-library-imp*! o2932@set-library-vis*! o2934@set-library-inv*! o2936@set-library-subst! o2938@set-library-env! o293a@set-library-visit-state! o293c@set-library-invoke-state! o293e@set-library-visit-code! o2940@set-library-invoke-code! o2942@set-library-visible?! o2944@set-library-source-file-name! o2946@rp o2948@find-dependencies o294a@find-library-by o294c@library-path o294e@library-extensions o2950@library-name->file-name o2952@file-locator o2954@serialize-all o2956@current-precompiled-library-loader o2958@try-load-from-file o295a@library-loader o295c@current-library-expander o295e@external-pending-libraries o2960@find-external-library o2962@find-library-by-name o2964@library-exists? o2966@find-library-by-spec/die o2968@label->binding-table o296a@install-library-record o296c@install-library o296e@imported-label->binding o2970@invoke-library o2972@visit-library o2974@invoke-library-by-spec o2976@installed-libraries o2978@library-spec) (begin (set! o28fb@make-collection (lambda () ((lambda (o2979@set) ((lambda (o297c@set-cons) (begin (set! o297c@set-cons (lambda (o2981@x o2982@ls) (if (memq o2981@x o2982@ls) o2982@ls (cons o2981@x o2982@ls)))) (lambda o297f ((lambda (o2980) (if (= o2980 '0) (apply (lambda () o2979@set) o297f) (if (= o2980 '1) (apply (lambda (o297d@x) (set! o2979@set (o297c@set-cons o297d@x o2979@set))) o297f) (error 'apply '"invalid arg count")))) (length o297f))))) '#f)) '()))) (set! o28fd@current-library-collection (o2855@o277f@make-parameter (o28fb@make-collection) (lambda (o2985@x) (begin (if (not (procedure? o2985@x)) (assertion-violation 'current-library-collection '"not a procedure" o2985@x) (void)) o2985@x)))) (set! o2903@o28fe (make-record-type-descriptor 'library '#f 'o2901 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! o2905@o2900 '#f) (set! o2907@o28ff (make-record-constructor-descriptor o2903@o28fe '#f o2905@o2900)) (set! o290a@library? (record-predicate o2903@o28fe)) (set! o290c@make-library (record-constructor o2907@o28ff)) (set! o290e@library-id (record-accessor o2903@o28fe '0)) (set! o2910@library-name (record-accessor o2903@o28fe '1)) (set! o2912@library-version (record-accessor o2903@o28fe '2)) (set! o2914@library-imp* (record-accessor o2903@o28fe '3)) (set! o2916@library-vis* (record-accessor o2903@o28fe '4)) (set! o2918@library-inv* (record-accessor o2903@o28fe '5)) (set! o291a@library-subst (record-accessor o2903@o28fe '6)) (set! o291c@library-env (record-accessor o2903@o28fe '7)) (set! o291e@library-visit-state (record-accessor o2903@o28fe '8)) (set! o2920@library-invoke-state (record-accessor o2903@o28fe '9)) (set! o2922@library-visit-code (record-accessor o2903@o28fe '10)) (set! o2924@library-invoke-code (record-accessor o2903@o28fe '11)) (set! o2926@library-visible? (record-accessor o2903@o28fe '12)) (set! o2928@library-source-file-name (record-accessor o2903@o28fe '13)) (set! o292a@set-library-id! (record-mutator o2903@o28fe '0)) (set! o292c@set-library-name! (record-mutator o2903@o28fe '1)) (set! o292e@set-library-version! (record-mutator o2903@o28fe '2)) (set! o2930@set-library-imp*! (record-mutator o2903@o28fe '3)) (set! o2932@set-library-vis*! (record-mutator o2903@o28fe '4)) (set! o2934@set-library-inv*! (record-mutator o2903@o28fe '5)) (set! o2936@set-library-subst! (record-mutator o2903@o28fe '6)) (set! o2938@set-library-env! (record-mutator o2903@o28fe '7)) (set! o293a@set-library-visit-state! (record-mutator o2903@o28fe '8)) (set! o293c@set-library-invoke-state! (record-mutator o2903@o28fe '9)) (set! o293e@set-library-visit-code! (record-mutator o2903@o28fe '10)) (set! o2940@set-library-invoke-code! (record-mutator o2903@o28fe '11)) (set! o2942@set-library-visible?! (record-mutator o2903@o28fe '12)) (set! o2944@set-library-source-file-name! (record-mutator o2903@o28fe '13)) (set! o2946@rp (o2852@o2779@make-record-printer 'library (lambda (o2987@x o2988@p o2989@wr) (begin (if (not (o290a@library? o2987@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (o2912@library-version o2987@x)) (o2910@library-name o2987@x) (append (o2910@library-name o2987@x) (list (o2912@library-version o2987@x))))) o2988@p))))) (set! o2948@find-dependencies (lambda (o298d@ls) (if (null? o298d@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! o294a@find-library-by (lambda (o298f@pred) ((letrec ((o2991@f (lambda (o2993@ls) (if (null? o2993@ls) '#f (if (o298f@pred (car o2993@ls)) (car o2993@ls) (o2991@f (cdr o2993@ls))))))) o2991@f) ((o28fd@current-library-collection))))) (set! o294c@library-path (o2855@o277f@make-parameter '(".") (lambda (o2995@x) (if (and (list? o2995@x) (for-all string? o2995@x)) (map (lambda (o2997@x) o2997@x) o2995@x) (assertion-violation 'library-path '"not a list of strings" o2995@x))))) (set! o294e@library-extensions (o2855@o277f@make-parameter '(".sls" ".ss" ".scm") (lambda (o2999@x) (if (and (list? o2999@x) (for-all string? o2999@x)) (map (lambda (o299b@x) o299b@x) o2999@x) (assertion-violation 'library-extensions '"not a list of strings" o2999@x))))) (set! o2950@library-name->file-name (lambda (o299d@x) (call-with-values (lambda () (open-string-output-port)) (lambda (o29a3@o29a0 o29a4@o29a2) ((lambda (o29a7@extract o29a8@p) ((lambda (o29ac@display-hex) (begin (set! o29ac@display-hex (lambda (o29b5@n) (if (<= '0 o29b5@n '9) (display o29b5@n o29a8@p) (display (integer->char (+ (char->integer '#\a) (- o29b5@n '10))) o29a8@p)))) (begin ((letrec ((o29ad@f (lambda (o29af@ls) (if (not (null? o29af@ls)) (begin (display '"/" o29a8@p) (for-each (lambda (o29b1@c) (if (or (char<=? '#\a o29b1@c '#\z) (char<=? '#\A o29b1@c '#\Z) (char<=? '#\0 o29b1@c '#\9) (memv o29b1@c '(#\- #\. #\_ #\~))) (display o29b1@c o29a8@p) (begin (display '"%" o29a8@p) ((lambda (o29b3@n) (begin (o29ac@display-hex (quotient o29b3@n '16)) (o29ac@display-hex (remainder o29b3@n '16)))) (char->integer o29b1@c))))) (string->list (symbol->string (car o29af@ls)))) (o29ad@f (cdr o29af@ls))) (void))))) o29ad@f) o299d@x) (o29a7@extract)))) '#f)) o29a4@o29a2 o29a3@o29a0))))) (set! o2952@file-locator (o2855@o277f@make-parameter (lambda (o29b7@x) ((lambda (o29b9@str) ((letrec ((o29bb@f (lambda (o29bd@ls o29be@exts o29bf@failed-list) (if (null? o29bd@ls) ((lambda () ((lambda (o29cb@o29c6 o29cd@o29c8 o29cf@o29c7 o29d2@o29c5 o29d4@make-library-resolution-condition o29d6@o29c3 o29d8@o29c4 o29da@library-resolution-condition? o29dc@condition-library o29de@condition-files) (begin (set! o29cb@o29c6 (make-record-type-descriptor '&library-resolution o4c6c@o49b3@&condition-rtd 'o29c9 '#f '#f '#((immutable library) (immutable files)))) (set! o29cd@o29c8 '#f) (set! o29cf@o29c7 (make-record-constructor-descriptor o29cb@o29c6 o4c6d@o49b5@&condition-rcd o29cd@o29c8)) (set! o29d2@o29c5 (record-predicate o29cb@o29c6)) (set! o29d4@make-library-resolution-condition (record-constructor o29cf@o29c7)) (set! o29d6@o29c3 (record-accessor o29cb@o29c6 '0)) (set! o29d8@o29c4 (record-accessor o29cb@o29c6 '1)) (set! o29da@library-resolution-condition? (condition-predicate o29cb@o29c6)) (set! o29dc@condition-library (condition-accessor o29cb@o29c6 o29d6@o29c3)) (set! o29de@condition-files (condition-accessor o29cb@o29c6 o29d8@o29c4)) (raise (condition (o4c8c@o4a4d@make-error) (o4cae@o4aa9@make-who-condition 'expander) (o4c72@o4a0a@make-message-condition '"cannot locate library in library-path") (o29d4@make-library-resolution-condition o29b7@x (reverse o29bf@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? o29be@exts) (o29bb@f (cdr o29bd@ls) (o294e@library-extensions) o29bf@failed-list) ((lambda (o29df@name) (if (file-exists? o29df@name) o29df@name (o29bb@f o29bd@ls (cdr o29be@exts) (cons o29df@name o29bf@failed-list)))) (string-append (car o29bd@ls) o29b9@str (car o29be@exts)))))))) o29bb@f) (o294c@library-path) (o294e@library-extensions) '())) (o2950@library-name->file-name o29b7@x))) (lambda (o29e1@f) (if (procedure? o29e1@f) o29e1@f (assertion-violation 'file-locator '"not a procedure" o29e1@f))))) (set! o2954@serialize-all (lambda (o29e3@serialize o29e4@compile) ((lambda (o29e8@library-desc) (begin (set! o29e8@library-desc (lambda (o29eb@x) (list (o290e@library-id o29eb@x) (o2910@library-name o29eb@x)))) (for-each (lambda (o29e9@x) (if (o2928@library-source-file-name o29e9@x) (o29e3@serialize (o2928@library-source-file-name o29e9@x) (list (o290e@library-id o29e9@x) (o2910@library-name o29e9@x) (o2912@library-version o29e9@x) (map o29e8@library-desc (o2914@library-imp* o29e9@x)) (map o29e8@library-desc (o2916@library-vis* o29e9@x)) (map o29e8@library-desc (o2918@library-inv* o29e9@x)) (o291a@library-subst o29e9@x) (o291c@library-env o29e9@x) (o29e4@compile (o2922@library-visit-code o29e9@x)) (o29e4@compile (o2924@library-invoke-code o29e9@x)) (o2926@library-visible? o29e9@x))) (void))) ((o28fd@current-library-collection))))) '#f))) (set! o2956@current-precompiled-library-loader (o2855@o277f@make-parameter (lambda (o29ed@filename o29ee@sk) '#f))) (set! o2958@try-load-from-file (lambda (o29f1@filename) ((o2956@current-precompiled-library-loader) o29f1@filename (lambda o2a17 ((lambda (o2a18) (if (= o2a18 '11) (apply (lambda (o29f3@id o29f4@name o29f5@ver o29f6@imp* o29f7@vis* o29f8@inv* o29f9@exp-subst o29fa@exp-env o29fb@visit-proc o29fc@invoke-proc o29fd@visible?) ((letrec ((o2a09@f (lambda (o2a0b@deps) (if (null? o2a0b@deps) (begin (o296c@install-library o29f3@id o29f4@name o29f5@ver o29f6@imp* o29f7@vis* o29f8@inv* o29f9@exp-subst o29fa@exp-env o29fb@visit-proc o29fc@invoke-proc '#f '#f o29fd@visible? '#f) '#t) ((lambda (o2a0d@d) ((lambda (o2a0f@label o2a10@dname) ((lambda (o2a13@l) (if (and (o290a@library? o2a13@l) (eq? o2a0f@label (o290e@library-id o2a13@l))) (o2a09@f (cdr o2a0b@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" o29f4@name o2a10@dname o29f1@filename o2a13@l o2a0f@label (o290e@library-id o2a13@l)) '#f))) (o2962@find-library-by-name o2a10@dname))) (car o2a0d@d) (cadr o2a0d@d))) (car o2a0b@deps)))))) o2a09@f) (append o29f6@imp* o29f7@vis* o29f8@inv*))) o2a17) (if (>= o2a18 '0) (apply (lambda o2a15@others '#f) o2a17) (error 'apply '"invalid arg count")))) (length o2a17)))))) (set! o295a@library-loader (o2855@o277f@make-parameter (lambda (o2a19@x) ((lambda (o2a1b@file-name) (if (not o2a1b@file-name) (assertion-violation '#f '"cannot file library" o2a19@x) (or (o2958@try-load-from-file o2a1b@file-name) ((o295c@current-library-expander) (o2854@o277d@read-library-source-file o2a1b@file-name) o2a1b@file-name (lambda (o2a1d@name) (if (not (fast-equal? o2a1d@name o2a19@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (o2a23@o2a20 o2a24@o2a22) ((lambda (o2a27@e o2a28@p) (begin (display '"expected to find library " o2a28@p) (write o2a19@x o2a28@p) (display '" in file " o2a28@p) (display o2a1b@file-name o2a28@p) (display '", found " o2a28@p) (write o2a1d@name o2a28@p) (display '" instead" o2a28@p) (o2a27@e))) o2a24@o2a22 o2a23@o2a20)))) (void))))))) ((o2952@file-locator) o2a19@x))) (lambda (o2a2b@f) (if (procedure? o2a2b@f) o2a2b@f (assertion-violation 'library-locator '"not a procedure" o2a2b@f))))) (set! o295c@current-library-expander (o2855@o277f@make-parameter (lambda (o2a2d@x) (assertion-violation 'library-expander '"not initialized")) (lambda (o2a2f@f) (if (procedure? o2a2f@f) o2a2f@f (assertion-violation 'library-expander '"not a procedure" o2a2f@f))))) (set! o295e@external-pending-libraries (o2855@o277f@make-parameter '())) (set! o2960@find-external-library (lambda (o2a31@name) (begin (if (member o2a31@name (o295e@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" o2a31@name) (void)) ((lambda (o2a37@o2a34 o2a38@o2a36) ((lambda (o2a3b@swap) (dynamic-wind o2a3b@swap (lambda () (begin ((o295a@library-loader) o2a31@name) (or (o294a@find-library-by (lambda (o2a3d@x) (fast-equal? (o2910@library-name o2a3d@x) o2a31@name))) (assertion-violation '#f '"handling external library did not yield the correct library" o2a31@name)))) o2a3b@swap)) (lambda () ((lambda (o2a3f@t) (begin (o2a37@o2a34 o2a38@o2a36) (set! o2a38@o2a36 o2a3f@t))) (o2a37@o2a34))))) o295e@external-pending-libraries (cons o2a31@name (o295e@external-pending-libraries)))))) (set! o2962@find-library-by-name (lambda (o2a41@name) (or (o294a@find-library-by (lambda (o2a43@x) (fast-equal? (o2910@library-name o2a43@x) o2a41@name))) (o2960@find-external-library o2a41@name)))) (set! o2964@library-exists? (lambda (o2a45@name) (and (o294a@find-library-by (lambda (o2a47@x) (fast-equal? (o2910@library-name o2a47@x) o2a45@name))) '#t))) (set! o2966@find-library-by-spec/die (lambda (o2a49@spec) ((lambda (o2a4b@id) (or (o294a@find-library-by (lambda (o2a4d@x) (eq? o2a4b@id (o290e@library-id o2a4d@x)))) (assertion-violation '#f '"cannot find library with required spec" o2a49@spec))) (car o2a49@spec)))) (set! o2968@label->binding-table (make-eq-hashtable)) (set! o296a@install-library-record (lambda (o2a4f@lib) (begin ((lambda (o2a51@exp-env) (for-each (lambda (o2a53@x) ((lambda (o2a55@label o2a56@binding) ((lambda (o2a59@binding) (begin (if (hashtable-ref o2968@label->binding-table o2a55@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" o2a55@label (hashtable-ref o2968@label->binding-table o2a55@label '#f) o2a59@binding) (exit)) (void)) (hashtable-set! o2968@label->binding-table o2a55@label o2a59@binding))) ((lambda (o2a5b@t) (if (memv o2a5b@t '(global)) (cons 'global (cons o2a4f@lib (cdr o2a56@binding))) (if (memv o2a5b@t '(global-macro)) (cons 'global-macro (cons o2a4f@lib (cdr o2a56@binding))) (if (memv o2a5b@t '(global-macro!)) (cons 'global-macro! (cons o2a4f@lib (cdr o2a56@binding))) o2a56@binding)))) (car o2a56@binding)))) (car o2a53@x) (cdr o2a53@x))) o2a51@exp-env)) (o291c@library-env o2a4f@lib)) ((o28fd@current-library-collection) o2a4f@lib)))) (set! o296c@install-library (lambda (o2a5d@id o2a5e@name o2a5f@ver o2a60@imp* o2a61@vis* o2a62@inv* o2a63@exp-subst o2a64@exp-env o2a65@visit-proc o2a66@invoke-proc o2a67@visit-code o2a68@invoke-code o2a69@visible? o2a6a@source-file-name) ((lambda (o2a79@imp-lib* o2a7a@vis-lib* o2a7b@inv-lib*) (begin (if (not (and (symbol? o2a5d@id) (list? o2a5e@name) (list? o2a5f@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" o2a5d@id o2a5e@name o2a5f@ver) (void)) (if (o2964@library-exists? o2a5e@name) (assertion-violation 'install-library '"library is already installed" o2a5e@name) (void)) ((lambda (o2a7f@lib) (o296a@install-library-record o2a7f@lib)) (o290c@make-library o2a5d@id o2a5e@name o2a5f@ver o2a79@imp-lib* o2a7a@vis-lib* o2a7b@inv-lib* o2a63@exp-subst o2a64@exp-env o2a65@visit-proc o2a66@invoke-proc o2a67@visit-code o2a68@invoke-code o2a69@visible? o2a6a@source-file-name)))) (map o2966@find-library-by-spec/die o2a60@imp*) (map o2966@find-library-by-spec/die o2a61@vis*) (map o2966@find-library-by-spec/die o2a62@inv*)))) (set! o296e@imported-label->binding (lambda (o2a81@lab) (hashtable-ref o2968@label->binding-table o2a81@lab '#f))) (set! o2970@invoke-library (lambda (o2a83@lib) ((lambda (o2a85@invoke) (if (procedure? o2a85@invoke) (begin (o293c@set-library-invoke-state! o2a83@lib (lambda () (assertion-violation 'invoke '"circularity detected" o2a83@lib))) (for-each o2970@invoke-library (o2918@library-inv* o2a83@lib)) (o293c@set-library-invoke-state! o2a83@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" o2a83@lib))) (o2a85@invoke) (o293c@set-library-invoke-state! o2a83@lib '#t)) (void))) (o2920@library-invoke-state o2a83@lib)))) (set! o2972@visit-library (lambda (o2a87@lib) ((lambda (o2a89@visit) (if (procedure? o2a89@visit) (begin (o293a@set-library-visit-state! o2a87@lib (lambda () (assertion-violation 'visit '"circularity detected" o2a87@lib))) (for-each o2970@invoke-library (o2916@library-vis* o2a87@lib)) (o293a@set-library-visit-state! o2a87@lib (lambda () (assertion-violation 'invoke '"first visit did not return" o2a87@lib))) (o2a89@visit) (o293a@set-library-visit-state! o2a87@lib '#t)) (void))) (o291e@library-visit-state o2a87@lib)))) (set! o2974@invoke-library-by-spec (lambda (o2a8b@spec) (o2970@invoke-library (o2966@find-library-by-spec/die o2a8b@spec)))) (set! o2976@installed-libraries (lambda o2a93 ((lambda (o2a94) (if (= o2a94 '1) (apply (lambda (o2a8d@all?) ((letrec ((o2a8f@f (lambda (o2a91@ls) (if (null? o2a91@ls) '() (if (or o2a8d@all? (o2926@library-visible? (car o2a91@ls))) (cons (car o2a91@ls) (o2a8f@f (cdr o2a91@ls))) (o2a8f@f (cdr o2a91@ls))))))) o2a8f@f) ((o28fd@current-library-collection)))) o2a93) (if (= o2a94 '0) (apply (lambda () (o2976@installed-libraries '#f)) o2a93) (error 'apply '"invalid arg count")))) (length o2a93)))) (set! o2978@library-spec (lambda (o2a95@x) (begin (if (not (o290a@library? o2a95@x)) (assertion-violation 'library-spec '"not a library" o2a95@x) (void)) (list (o290e@library-id o2a95@x) (o2910@library-name o2a95@x) (o2912@library-version o2a95@x))))) (begin (set! o2ad3@o2978@library-spec o2978@library-spec) (set! o2ad2@o2976@installed-libraries o2976@installed-libraries) (set! o2ad1@o2974@invoke-library-by-spec o2974@invoke-library-by-spec) (set! o2ad0@o2972@visit-library o2972@visit-library) (set! o2acf@o2970@invoke-library o2970@invoke-library) (set! o2ace@o296e@imported-label->binding o296e@imported-label->binding) (set! o2acd@o296c@install-library o296c@install-library) (set! o2acc@o296a@install-library-record o296a@install-library-record) (set! o2acb@o2968@label->binding-table o2968@label->binding-table) (set! o2aca@o2966@find-library-by-spec/die o2966@find-library-by-spec/die) (set! o2ac9@o2964@library-exists? o2964@library-exists?) (set! o2ac8@o2962@find-library-by-name o2962@find-library-by-name) (set! o2ac7@o2960@find-external-library o2960@find-external-library) (set! o2ac6@o295e@external-pending-libraries o295e@external-pending-libraries) (set! o2ac5@o295c@current-library-expander o295c@current-library-expander) (set! o2ac4@o295a@library-loader o295a@library-loader) (set! o2ac3@o2958@try-load-from-file o2958@try-load-from-file) (set! o2ac2@o2956@current-precompiled-library-loader o2956@current-precompiled-library-loader) (set! o2ac1@o2954@serialize-all o2954@serialize-all) (set! o2ac0@o2952@file-locator o2952@file-locator) (set! o2abf@o2950@library-name->file-name o2950@library-name->file-name) (set! o2abe@o294e@library-extensions o294e@library-extensions) (set! o2abd@o294c@library-path o294c@library-path) (set! o2abc@o294a@find-library-by o294a@find-library-by) (set! o2abb@o2948@find-dependencies o2948@find-dependencies) (set! o2aba@o2946@rp o2946@rp) (set! o2ab9@o2944@set-library-source-file-name! o2944@set-library-source-file-name!) (set! o2ab8@o2942@set-library-visible?! o2942@set-library-visible?!) (set! o2ab7@o2940@set-library-invoke-code! o2940@set-library-invoke-code!) (set! o2ab6@o293e@set-library-visit-code! o293e@set-library-visit-code!) (set! o2ab5@o293c@set-library-invoke-state! o293c@set-library-invoke-state!) (set! o2ab4@o293a@set-library-visit-state! o293a@set-library-visit-state!) (set! o2ab3@o2938@set-library-env! o2938@set-library-env!) (set! o2ab2@o2936@set-library-subst! o2936@set-library-subst!) (set! o2ab1@o2934@set-library-inv*! o2934@set-library-inv*!) (set! o2ab0@o2932@set-library-vis*! o2932@set-library-vis*!) (set! o2aaf@o2930@set-library-imp*! o2930@set-library-imp*!) (set! o2aae@o292e@set-library-version! o292e@set-library-version!) (set! o2aad@o292c@set-library-name! o292c@set-library-name!) (set! o2aac@o292a@set-library-id! o292a@set-library-id!) (set! o2aab@o2928@library-source-file-name o2928@library-source-file-name) (set! o2aaa@o2926@library-visible? o2926@library-visible?) (set! o2aa9@o2924@library-invoke-code o2924@library-invoke-code) (set! o2aa8@o2922@library-visit-code o2922@library-visit-code) (set! o2aa7@o2920@library-invoke-state o2920@library-invoke-state) (set! o2aa6@o291e@library-visit-state o291e@library-visit-state) (set! o2aa5@o291c@library-env o291c@library-env) (set! o2aa4@o291a@library-subst o291a@library-subst) (set! o2aa3@o2918@library-inv* o2918@library-inv*) (set! o2aa2@o2916@library-vis* o2916@library-vis*) (set! o2aa1@o2914@library-imp* o2914@library-imp*) (set! o2aa0@o2912@library-version o2912@library-version) (set! o2a9f@o2910@library-name o2910@library-name) (set! o2a9e@o290e@library-id o290e@library-id) (set! o2a9d@o290c@make-library o290c@make-library) (set! o2a9c@o290a@library? o290a@library?) (set! o2a9b@o2907@o28ff o2907@o28ff) (set! o2a9a@o2905@o2900 o2905@o2900) (set! o2a99@o2903@o28fe o2903@o28fe) (set! o2a98@o28fd@current-library-collection o28fd@current-library-collection) (set! o2a97@o28fb@make-collection o28fb@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (o2ad6@build-global-define o2b47@build-lambda o2b49@build-case-lambda o2b4b@build-let o2b79@build-sequence o2b7b@build-void o2b7d@build-letrec o2b7f@build-letrec* o2b81@build-library-letrec* o2b83@build-receive) (begin (set! o2ad6@build-global-define (lambda (o2b84@x) (o2b7b@build-void))) (set! o2b47@build-lambda (lambda (o2b86@ae o2b87@vars o2b88@exp) (list 'lambda o2b87@vars o2b88@exp))) (set! o2b49@build-case-lambda (lambda (o2b8c@ae o2b8d@vars* o2b8e@exp*) ((lambda (o2b93@build-error o2b95@build-pred o2b97@build-apply o2b99@expand-case-lambda) (begin (set! o2b93@build-error (lambda (o2bca@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! o2b95@build-pred (lambda (o2bb2@ae o2bb3@n o2bb4@vars) (call-with-values (lambda () ((letrec ((o2bbc@f (lambda (o2bbe@vars o2bbf@count) (if (pair? o2bbe@vars) (o2bbc@f (cdr o2bbe@vars) (+ o2bbf@count '1)) (if (null? o2bbe@vars) (values o2bbf@count '=) (values o2bbf@count '>=)))))) o2bbc@f) o2bb4@vars '0)) (lambda (o2bc2@o2bb9 o2bc3@o2bbb) ((lambda (o2bc6@pred o2bc7@count) (list (list 'primitive o2bc6@pred) o2bb3@n (list 'quote o2bc7@count))) o2bc3@o2bbb o2bc2@o2bb9))))) (set! o2b97@build-apply (lambda (o2baa@ae o2bab@g o2bac@vars o2bad@exp) (list '(primitive apply) (o2b47@build-lambda o2baa@ae o2bac@vars o2bad@exp) o2bab@g))) (set! o2b99@expand-case-lambda (lambda (o2b9a@ae o2b9b@vars o2b9c@exp*) ((lambda (o2ba0@g o2ba1@n) (list 'lambda o2ba0@g (o2b4b@build-let o2b9a@ae (list o2ba1@n) (list (list '(primitive length) o2ba0@g)) ((letrec ((o2ba4@f (lambda (o2ba6@vars* o2ba7@exp*) (if (null? o2ba6@vars*) (o2b93@build-error o2b9a@ae) (list 'if (o2b95@build-pred o2b9a@ae o2ba1@n (car o2ba6@vars*)) (o2b97@build-apply o2b9a@ae o2ba0@g (car o2ba6@vars*) (car o2ba7@exp*)) (o2ba4@f (cdr o2ba6@vars*) (cdr o2ba7@exp*))))))) o2ba4@f) o2b8d@vars* o2b9c@exp*)))) (gensym) (gensym)))) (if (= (length o2b8e@exp*) '1) (o2b47@build-lambda o2b8c@ae (car o2b8d@vars*) (car o2b8e@exp*)) (o2b99@expand-case-lambda o2b8c@ae o2b8d@vars* o2b8e@exp*)))) '#f '#f '#f '#f))) (set! o2b4b@build-let (lambda (o2bcc@ae o2bcd@lhs* o2bce@rhs* o2bcf@body) (cons (o2b47@build-lambda o2bcc@ae o2bcd@lhs* o2bcf@body) o2bce@rhs*))) (set! o2b79@build-sequence (lambda (o2bd4@ae o2bd5@exps) ((letrec ((o2bd8@loop (lambda (o2bda@exps) (if (null? (cdr o2bda@exps)) (car o2bda@exps) (if (equal? (car o2bda@exps) (o2b7b@build-void)) (o2bd8@loop (cdr o2bda@exps)) (cons 'begin o2bda@exps)))))) o2bd8@loop) o2bd5@exps))) (set! o2b7b@build-void (lambda () '((primitive void)))) (set! o2b7d@build-letrec (lambda (o2bdc@ae o2bdd@vars o2bde@val-exps o2bdf@body-exp) (if (null? o2bdd@vars) o2bdf@body-exp (list 'letrec (map list o2bdd@vars o2bde@val-exps) o2bdf@body-exp)))) (set! o2b7f@build-letrec* (lambda (o2be4@ae o2be5@vars o2be6@val-exps o2be7@body-exp) (if (null? o2be5@vars) o2be7@body-exp (o2b4b@build-let o2be4@ae o2be5@vars (map (lambda (o2bec@x) (list 'quote '#f)) o2be5@vars) (o2b79@build-sequence o2be4@ae (append (map (lambda (o2bee@lhs o2bef@rhs) (list 'set! o2bee@lhs o2bef@rhs)) o2be5@vars o2be6@val-exps) (list o2be7@body-exp))))))) (set! o2b81@build-library-letrec* (lambda (o2bf2@ae o2bf3@name o2bf4@vars o2bf5@locs o2bf6@val-exps o2bf7@body-exp) (list 'library-letrec* o2bf3@name (map list o2bf4@vars o2bf5@locs o2bf6@val-exps) o2bf7@body-exp))) (set! o2b83@build-receive (lambda (o2bfe@ae o2bff@vars o2c00@producer o2c01@body*) (begin (display '"************** in ") (cons 'receive (cons o2bff@vars (cons o2c00@producer o2c01@body*)))))) (begin (set! o2c0f@o2b83@build-receive o2b83@build-receive) (set! o2c0e@o2b81@build-library-letrec* o2b81@build-library-letrec*) (set! o2c0d@o2b7f@build-letrec* o2b7f@build-letrec*) (set! o2c0c@o2b7d@build-letrec o2b7d@build-letrec) (set! o2c0b@o2b7b@build-void o2b7b@build-void) (set! o2c0a@o2b79@build-sequence o2b79@build-sequence) (set! o2c09@o2b4b@build-let o2b4b@build-let) (set! o2c08@o2b49@build-case-lambda o2b49@build-case-lambda) (set! o2c07@o2b47@build-lambda o2b47@build-lambda) (set! o2c06@o2ad6@build-global-define o2ad6@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (o2c1e@file-options-macro o2c20@set-cons o2c22@set-union o2c27@top-mark* o2c29@top-marked? o2c2b@gen-lexical o2c2d@gen-global o2c2f@gen-label o2c31@gen-top-level-label o2c33@gen-define-label+loc o2c35@gen-define-label o2c3b@o2c36 o2c3d@o2c38 o2c3f@o2c37 o2c42@rib? o2c44@make-rib o2c46@rib-sym* o2c48@rib-mark** o2c4a@rib-label* o2c4c@rib-sealed/freq o2c4e@rib-cache o2c50@set-rib-sym*! o2c52@set-rib-mark**! o2c54@set-rib-label*! o2c56@set-rib-sealed/freq! o2c58@set-rib-cache! o2c5a@make-empty-rib o2c5c@extend-rib! o2c5e@extend-rib/nc! o2c60@make-rib-map o2c62@seal-rib! o2c64@unseal-rib! o2c66@make-full-rib o2c6c@o2c67 o2c6e@o2c69 o2c70@o2c68 o2c73@stx? o2c75@make-stx o2c77@stx-expr o2c79@stx-mark* o2c7b@stx-subst* o2c7d@stx-ae* o2c7f@set-stx-expr! o2c81@set-stx-mark*! o2c83@set-stx-subst*! o2c85@set-stx-ae*! o2c87@rp o2c89@datum->stx o2c8b@gen-mark o2c8d@anti-mark o2c8f@anti-mark? o2c91@join-wraps o2c93@mkstx o2c95@add-mark o2c97@add-subst o2c99@syntax-kind? o2c9b@syntax-vector->list o2c9d@syntax-pair? o2c9f@syntax-vector? o2ca1@syntax-null? o2ca3@syntax-list? o2ca5@syntax-car o2ca7@syntax-cdr o2ca9@syntax->list o2cab@id? o2cad@id->sym o2caf@same-marks? o2cb1@bound-id=? o2cb3@free-id=? o2cb5@valid-bound-ids? o2cb7@distinct-bound-ids? o2cb9@bound-id-member? o2cbb@self-evaluating? o2cbd@strip-annotations o2cbf@strip o2cc1@stx->datum o2cc3@same-marks*? o2cc5@id->label o2cc7@id->real-label o2cc9@label->binding o2ccb@make-binding o2ccd@binding-type o2ccf@binding-value o2cd1@raise-unbound-error o2cd3@syntax-type o2ce1@sanitize-binding o2ce3@make-variable-transformer o2ce5@variable-transformer? o2ce7@variable-transformer-procedure o2ce9@make-eval-transformer o2e3a@parse-define o2e3c@parse-define-syntax o2e3e@scheme-stx-hashtable o2e40@scheme-stx o2e42@lexical-var o2e44@lexical-mutable? o2e46@set-lexical-mutable! o2e48@add-lexical o2e4a@add-lexicals o2e4c@letrec-helper o2e4e@letrec-transformer o2e50@letrec*-transformer o2e52@fluid-let-syntax-transformer o2e54@type-descriptor-transformer o2e56@record-type-descriptor-transformer o2e58@record-constructor-descriptor-transformer o2e5a@when-macro o2e5c@unless-macro o2e5e@if-transformer o2e60@and-transformer o2e62@or-transformer o2e64@case-macro o2e66@quote-transformer o2e68@case-lambda-transformer o2e6a@lambda-transformer o2e6c@bless o2e6e@with-syntax-macro o2e70@invalid-fmls-error o2e72@let-macro o2e74@let-values-macro o2e76@let*-values-macro o2e78@trace-lambda-macro o2e7a@trace-define-macro o2e7c@trace-define-syntax-macro o2e7e@trace-let/rec-syntax o2e80@trace-let-syntax-macro o2e82@trace-letrec-syntax-macro o2e84@guard-macro o2e86@define-enumeration-macro o2e88@time-macro o2e8a@delay-macro o2e8c@assert-macro o2e8e@endianness-macro o2e90@identifier-syntax-macro o2e92@do-macro o2e94@let*-macro o2e96@or-macro o2e98@and-macro o2e9a@cond-macro o2e9c@do-include o2e9e@include-macro o2ea0@include-into-macro o2ea2@syntax-rules-macro o2ea4@quasiquote-macro o2ea6@quasisyntax-macro o2ea8@define-struct-macro o2eaa@define-record-type-macro o2eac@define-condition-type-macro o2eae@incorrect-usage-macro o2eb0@parameterize-macro o2eb2@foreign-call-transformer o2eb4@convert-pattern o2eb6@syntax-dispatch o2eb8@ellipsis? o2eba@underscore? o2ebc@verify-literals o2ebe@syntax-case-transformer o2ec0@ellipsis-map o2ec2@syntax-transformer o2ec4@core-macro-transformer o2ec6@symbol-macro o2ec8@macro-transformer o2eca@local-macro-transformer o2ecc@do-macro-call o2ece@chi-macro o2ed0@chi-local-macro o2ed2@chi-global-macro o2ed4@chi-expr* o2ed6@chi-application o2ed8@chi-expr o2eda@chi-set! o2edc@verify-formals o2ede@chi-lambda-clause o2ee0@chi-lambda-clause* o2ee2@chi-defun o2ee4@chi-rhs o2ee6@expand-interaction-rhs*/init* o2ee8@chi-rhs* o2eea@find-bound=? o2eec@find-dups o2eee@chi-internal o2ef0@parse-module o2ef6@o2ef1 o2ef8@o2ef3 o2efa@o2ef2 o2efd@module-interface? o2eff@make-module-interface o2f01@module-interface-first-mark o2f03@module-interface-exp-id-vec o2f05@module-interface-exp-lab-vec o2f07@set-module-interface-first-mark! o2f09@set-module-interface-exp-id-vec! o2f0b@set-module-interface-exp-lab-vec! o2f0d@module-interface-exp-id* o2f0f@chi-internal-module o2f11@chi-body* o2f13@expand-transformer o2f15@parse-exports o2f17@parse-library-name o2f19@parse-library o2f1b@parse-import-spec* o2f1d@make-top-rib o2f1f@make-collector o2f21@inv-collector o2f23@vis-collector o2f25@imp-collector o2f27@chi-library-internal o2f29@chi-interaction-expr o2f2b@library-body-expander o2f2d@core-library-expander o2f2f@parse-top-level-program o2f31@top-level-expander o2f37@o2f32 o2f39@o2f34 o2f3b@o2f33 o2f3e@env? o2f40@make-env o2f42@env-names o2f44@env-labels o2f46@env-itc o2f48@set-env-names! o2f4a@set-env-labels! o2f4c@set-env-itc! o2f4e@rp o2f54@o2f4f o2f56@o2f51 o2f58@o2f50 o2f5b@interaction-env? o2f5d@make-interaction-env o2f5f@interaction-env-rib o2f61@interaction-env-r o2f63@interaction-env-locs o2f65@set-interaction-env-rib! o2f67@set-interaction-env-r! o2f69@set-interaction-env-locs! o2f6b@rp o2f6d@interaction-environment-symbols o2f6f@environment-bindings o2f71@parse-binding o2f73@environment? o2f75@environment-symbols o2f77@environment o2f79@null-environment o2f7b@scheme-report-environment o2f7d@expand o2f7f@eval o2f81@library-expander o2f83@boot-library-expand o2f85@rev-map-append o2f87@build-exports o2f89@make-export-subst o2f8b@make-export-env/macros o2f8d@generate-temporaries o2f8f@free-identifier=? o2f91@bound-identifier=? o2f93@make-source-condition o2f95@extract-position-condition o2f97@expression-position o2f99@assertion-error o2f9b@syntax-error o2f9d@syntax-violation* o2f9f@syntax-violation o2fa1@identifier? o2fa3@datum->syntax o2fa5@syntax->datum o2fa7@compile-r6rs-top-level o2fa9@pre-compile-r6rs-top-level o2fab@interaction-environment o2fad@top-level-context) (begin (set! o2c1e@file-options-macro (lambda (o2fae@x) ((lambda (o2fb1@valid-option?) (begin (set! o2fb1@valid-option? (lambda (o2fba@x) (and (o2cab@id? o2fba@x) (memq (o2cad@id->sym o2fba@x) '(no-fail no-create no-truncate))))) ((lambda (o2fb2@t) ((lambda (o2fb4@ls/false) (if (and o2fb4@ls/false (apply (lambda (o2fb6@opt*) (for-all o2fb1@valid-option? o2fb6@opt*)) o2fb4@ls/false)) (apply (lambda (o2fb8@opt*) (o2e6c@bless (list 'make-file-options (list 'quote o2fb8@opt*)))) o2fb4@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o2fb2@t))) (o2eb6@syntax-dispatch o2fb2@t '(_ . each-any)))) o2fae@x))) '#f))) (set! o2c20@set-cons (lambda (o2fbc@x o2fbd@ls) (if (memq o2fbc@x o2fbd@ls) o2fbd@ls (cons o2fbc@x o2fbd@ls)))) (set! o2c22@set-union (lambda (o2fc0@ls1 o2fc1@ls2) (if (null? o2fc0@ls1) o2fc1@ls2 (if (memq (car o2fc0@ls1) o2fc1@ls2) (o2c22@set-union (cdr o2fc0@ls1) o2fc1@ls2) (cons (car o2fc0@ls1) (o2c22@set-union (cdr o2fc0@ls1) o2fc1@ls2)))))) (set! o2c27@top-mark* '(top)) (set! o2c29@top-marked? (lambda (o2fc4@m*) (memq 'top o2fc4@m*))) (set! o2c2b@gen-lexical (lambda (o2fc6@sym) (if (symbol? o2fc6@sym) (gensym o2fc6@sym) (if (o2c73@stx? o2fc6@sym) (o2c2b@gen-lexical (o2cad@id->sym o2fc6@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" o2fc6@sym))))) (set! o2c2d@gen-global (lambda (o2fc8@x) (o2c2b@gen-lexical o2fc8@x))) (set! o2c2f@gen-label (lambda (o2fca@_) (gensym))) (set! o2c31@gen-top-level-label (lambda (o2fcc@id o2fcd@rib) ((lambda (o2fd1@find) (begin (set! o2fd1@find (lambda (o2fdc@sym o2fdd@mark* o2fde@sym* o2fdf@mark** o2fe0@label*) (and (pair? o2fde@sym*) (if (and (eq? o2fdc@sym (car o2fde@sym*)) (o2caf@same-marks? o2fdd@mark* (car o2fdf@mark**))) (car o2fe0@label*) (o2fd1@find o2fdc@sym o2fdd@mark* (cdr o2fde@sym*) (cdr o2fdf@mark**) (cdr o2fe0@label*)))))) ((lambda (o2fd2@sym o2fd3@mark*) ((lambda (o2fd6@sym*) ((lambda (o2fd8@t) (if o2fd8@t ((lambda (o2fda@label) (if (o2ace@o296e@imported-label->binding o2fda@label) (gensym) o2fda@label)) o2fd8@t) (gensym))) (and (memq o2fd2@sym (o2c46@rib-sym* o2fcd@rib)) (o2fd1@find o2fd2@sym o2fd3@mark* o2fd6@sym* (o2c48@rib-mark** o2fcd@rib) (o2c4a@rib-label* o2fcd@rib))))) (o2c46@rib-sym* o2fcd@rib))) (o2cad@id->sym o2fcc@id) (o2c79@stx-mark* o2fcc@id)))) '#f))) (set! o2c33@gen-define-label+loc (lambda (o2fe6@id o2fe7@rib) ((lambda (o2fea@t) (if o2fea@t ((lambda (o2fec@env) ((lambda (o2fee@label o2fef@locs) (values o2fee@label ((lambda (o2ff2@t) (if o2ff2@t (cdr o2ff2@t) ((lambda (o2ff4@loc) (begin (o2f69@set-interaction-env-locs! o2fec@env (cons (cons o2fee@label o2ff4@loc) o2fef@locs)) o2ff4@loc)) (o2c2b@gen-lexical o2fe6@id)))) (assq o2fee@label o2fef@locs)))) (o2c31@gen-top-level-label o2fe6@id o2fe7@rib) (o2f63@interaction-env-locs o2fec@env))) o2fea@t) (values (gensym) (o2c2b@gen-lexical o2fe6@id)))) (o2fad@top-level-context)))) (set! o2c35@gen-define-label (lambda (o2ff6@id o2ff7@rib) (if (o2fad@top-level-context) (o2c31@gen-top-level-label o2ff6@id o2ff7@rib) (gensym)))) (set! o2c3b@o2c36 (make-record-type-descriptor 'rib '#f 'o2c39 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! o2c3d@o2c38 '#f) (set! o2c3f@o2c37 (make-record-constructor-descriptor o2c3b@o2c36 '#f o2c3d@o2c38)) (set! o2c42@rib? (record-predicate o2c3b@o2c36)) (set! o2c44@make-rib (record-constructor o2c3f@o2c37)) (set! o2c46@rib-sym* (record-accessor o2c3b@o2c36 '0)) (set! o2c48@rib-mark** (record-accessor o2c3b@o2c36 '1)) (set! o2c4a@rib-label* (record-accessor o2c3b@o2c36 '2)) (set! o2c4c@rib-sealed/freq (record-accessor o2c3b@o2c36 '3)) (set! o2c4e@rib-cache (record-accessor o2c3b@o2c36 '4)) (set! o2c50@set-rib-sym*! (record-mutator o2c3b@o2c36 '0)) (set! o2c52@set-rib-mark**! (record-mutator o2c3b@o2c36 '1)) (set! o2c54@set-rib-label*! (record-mutator o2c3b@o2c36 '2)) (set! o2c56@set-rib-sealed/freq! (record-mutator o2c3b@o2c36 '3)) (set! o2c58@set-rib-cache! (record-mutator o2c3b@o2c36 '4)) (set! o2c5a@make-empty-rib (lambda () (o2c44@make-rib '() '() '() '#f '#f))) (set! o2c5c@extend-rib! (lambda (o2ffa@rib o2ffb@id o2ffc@label) ((lambda (o3001@find) (begin (set! o3001@find (lambda (o300e@sym o300f@mark* o3010@sym* o3011@mark** o3012@label*) (and (pair? o3010@sym*) (if (and (eq? o300e@sym (car o3010@sym*)) (o2caf@same-marks? o300f@mark* (car o3011@mark**))) o3012@label* (o3001@find o300e@sym o300f@mark* (cdr o3010@sym*) (cdr o3011@mark**) (cdr o3012@label*)))))) (begin (if (o2c4c@rib-sealed/freq o2ffa@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" o2ffa@rib) (void)) ((lambda (o3002@sym o3003@mark*) ((lambda (o3006@sym*) ((lambda (o3008@t) (if o3008@t ((lambda (o300a@p) (if (not (eq? o2ffc@label (car o300a@p))) (if (o2fad@top-level-context) (set-car! o300a@p o2ffc@label) (o2f9f@syntax-violation '#f '"multiple definitions of identifier" o2ffb@id)) (void))) o3008@t) (begin (if (o2c4e@rib-cache o2ffa@rib) (hashtable-update! (o2c4e@rib-cache o2ffa@rib) o3002@sym (lambda (o300c@e) (cons (cons o3003@mark* o2ffc@label) o300c@e)) '()) (void)) (o2c50@set-rib-sym*! o2ffa@rib (cons o3002@sym o3006@sym*)) (o2c52@set-rib-mark**! o2ffa@rib (cons o3003@mark* (o2c48@rib-mark** o2ffa@rib))) (o2c54@set-rib-label*! o2ffa@rib (cons o2ffc@label (o2c4a@rib-label* o2ffa@rib)))))) (and (memq o3002@sym (o2c46@rib-sym* o2ffa@rib)) (o3001@find o3002@sym o3003@mark* o3006@sym* (o2c48@rib-mark** o2ffa@rib) (o2c4a@rib-label* o2ffa@rib))))) (o2c46@rib-sym* o2ffa@rib))) (o2cad@id->sym o2ffb@id) (o2c79@stx-mark* o2ffb@id))))) '#f))) (set! o2c5e@extend-rib/nc! (lambda (o3018@rib o3019@id o301a@label) ((lambda (o301e@sym o301f@mark*) ((lambda (o3022@sym*) (begin (if (o2c4e@rib-cache o3018@rib) (hashtable-update! (o2c4e@rib-cache o3018@rib) o301e@sym (lambda (o3024@e) (cons (cons o301f@mark* o301a@label) o3024@e)) '()) (void)) (o2c50@set-rib-sym*! o3018@rib (cons o301e@sym o3022@sym*)) (o2c52@set-rib-mark**! o3018@rib (cons o301f@mark* (o2c48@rib-mark** o3018@rib))) (o2c54@set-rib-label*! o3018@rib (cons o301a@label (o2c4a@rib-label* o3018@rib))))) (o2c46@rib-sym* o3018@rib))) (o2cad@id->sym o3019@id) (o2c79@stx-mark* o3019@id)))) (set! o2c60@make-rib-map (lambda (o3026@sym*) ((lambda (o3028@ht) ((letrec ((o302a@f (lambda (o302c@i o302d@sym*) (if (null? o302d@sym*) o3028@ht (begin (hashtable-update! o3028@ht (car o302d@sym*) (lambda (o3030@x) (cons o302c@i o3030@x)) '()) (o302a@f (+ o302c@i '1) (cdr o302d@sym*))))))) o302a@f) '0 o3026@sym*)) (make-eq-hashtable)))) (set! o2c62@seal-rib! (lambda (o3032@rib) ((lambda (o3034@sym*) (if (not (null? o3034@sym*)) (begin (o2c50@set-rib-sym*! o3032@rib (list->vector o3034@sym*)) (o2c52@set-rib-mark**! o3032@rib (list->vector (o2c48@rib-mark** o3032@rib))) (o2c54@set-rib-label*! o3032@rib (list->vector (o2c4a@rib-label* o3032@rib))) (o2c56@set-rib-sealed/freq! o3032@rib (o2c60@make-rib-map o3034@sym*))) (void))) (o2c46@rib-sym* o3032@rib)))) (set! o2c64@unseal-rib! (lambda (o3036@rib) (if (o2c4c@rib-sealed/freq o3036@rib) (begin (o2c56@set-rib-sealed/freq! o3036@rib '#f) (o2c50@set-rib-sym*! o3036@rib (vector->list (o2c46@rib-sym* o3036@rib))) (o2c52@set-rib-mark**! o3036@rib (vector->list (o2c48@rib-mark** o3036@rib))) (o2c54@set-rib-label*! o3036@rib (vector->list (o2c4a@rib-label* o3036@rib)))) (void)))) (set! o2c66@make-full-rib (lambda (o3038@id* o3039@label*) ((lambda (o303c@r) (begin (o2c62@seal-rib! o303c@r) o303c@r)) (o2c44@make-rib (map o2cad@id->sym o3038@id*) (map o2c79@stx-mark* o3038@id*) o3039@label* '#f '#f)))) (set! o2c6c@o2c67 (make-record-type-descriptor 'stx '#f 'o2c6a '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! o2c6e@o2c69 '#f) (set! o2c70@o2c68 (make-record-constructor-descriptor o2c6c@o2c67 '#f o2c6e@o2c69)) (set! o2c73@stx? (record-predicate o2c6c@o2c67)) (set! o2c75@make-stx (record-constructor o2c70@o2c68)) (set! o2c77@stx-expr (record-accessor o2c6c@o2c67 '0)) (set! o2c79@stx-mark* (record-accessor o2c6c@o2c67 '1)) (set! o2c7b@stx-subst* (record-accessor o2c6c@o2c67 '2)) (set! o2c7d@stx-ae* (record-accessor o2c6c@o2c67 '3)) (set! o2c7f@set-stx-expr! (record-mutator o2c6c@o2c67 '0)) (set! o2c81@set-stx-mark*! (record-mutator o2c6c@o2c67 '1)) (set! o2c83@set-stx-subst*! (record-mutator o2c6c@o2c67 '2)) (set! o2c85@set-stx-ae*! (record-mutator o2c6c@o2c67 '3)) (set! o2c87@rp (o2852@o2779@make-record-printer 'stx (lambda (o303e@x o303f@p o3040@wr) (begin (display '"#<syntax " o303f@p) (write (o2cc1@stx->datum o303e@x) o303f@p) ((lambda (o3044@expr) (if (o284a@o2769@annotation? o3044@expr) ((lambda (o3046@src) (if (pair? o3046@src) (begin (display '" [" o303f@p) (display (cdr o3046@src) o303f@p) (display '" of " o303f@p) (display (car o3046@src) o303f@p) (display '"]" o303f@p)) (void))) (o284b@o276b@annotation-source o3044@expr)) (void))) (o2c77@stx-expr o303e@x)) (display '">" o303f@p))))) (set! o2c89@datum->stx (lambda (o3048@id o3049@datum) (o2c75@make-stx o3049@datum (o2c79@stx-mark* o3048@id) (o2c7b@stx-subst* o3048@id) (o2c7d@stx-ae* o3048@id)))) (set! o2c8b@gen-mark (lambda () (string '#\m))) (set! o2c8d@anti-mark '#f) (set! o2c8f@anti-mark? not) (set! o2c91@join-wraps (lambda (o304c@m1* o304d@s1* o304e@ae1* o304f@e) ((lambda (o3055@cancel) (begin (set! o3055@cancel (lambda (o305c@ls1 o305d@ls2) ((letrec ((o3060@f (lambda (o3062@x o3063@ls1) (if (null? o3063@ls1) (cdr o305d@ls2) (cons o3062@x (o3060@f (car o3063@ls1) (cdr o3063@ls1))))))) o3060@f) (car o305c@ls1) (cdr o305c@ls1)))) ((lambda (o3056@m2* o3057@s2* o3058@ae2*) (if (and (not (null? o304c@m1*)) (not (null? o3056@m2*)) (o2c8f@anti-mark? (car o3056@m2*))) (values (o3055@cancel o304c@m1* o3056@m2*) (o3055@cancel o304d@s1* o3057@s2*) (o3055@cancel o304e@ae1* o3058@ae2*)) (values (append o304c@m1* o3056@m2*) (append o304d@s1* o3057@s2*) (append o304e@ae1* o3058@ae2*)))) (o2c79@stx-mark* o304f@e) (o2c7b@stx-subst* o304f@e) (o2c7d@stx-ae* o304f@e)))) '#f))) (set! o2c93@mkstx (lambda (o3066@e o3067@m* o3068@s* o3069@ae*) (if (and (o2c73@stx? o3066@e) (not (o2c29@top-marked? o3067@m*))) (call-with-values (lambda () (o2c91@join-wraps o3067@m* o3068@s* o3069@ae* o3066@e)) (lambda (o3074@o306f o3075@o3071 o3076@o3073) ((lambda (o307a@ae* o307b@s* o307c@m*) (o2c75@make-stx (o2c77@stx-expr o3066@e) o307c@m* o307b@s* o307a@ae*)) o3076@o3073 o3075@o3071 o3074@o306f))) (o2c75@make-stx o3066@e o3067@m* o3068@s* o3069@ae*)))) (set! o2c95@add-mark (lambda (o3080@m o3081@e o3082@ae) (o2c93@mkstx o3081@e (list o3080@m) '(shift) (list o3082@ae)))) (set! o2c97@add-subst (lambda (o3086@subst o3087@e) (o2c93@mkstx o3087@e '() (list o3086@subst) '()))) (set! o2c99@syntax-kind? (lambda (o308a@x o308b@p?) (if (o2c73@stx? o308a@x) (o2c99@syntax-kind? (o2c77@stx-expr o308a@x) o308b@p?) (if (o284a@o2769@annotation? o308a@x) (o2c99@syntax-kind? (o284c@o276d@annotation-expression o308a@x) o308b@p?) (o308b@p? o308a@x))))) (set! o2c9b@syntax-vector->list (lambda (o308e@x) (if (o2c73@stx? o308e@x) ((lambda (o3090@ls o3091@m* o3092@s* o3093@ae*) (map (lambda (o3098@x) (o2c93@mkstx o3098@x o3091@m* o3092@s* o3093@ae*)) o3090@ls)) (o2c9b@syntax-vector->list (o2c77@stx-expr o308e@x)) (o2c79@stx-mark* o308e@x) (o2c7b@stx-subst* o308e@x) (o2c7d@stx-ae* o308e@x)) (if (o284a@o2769@annotation? o308e@x) (o2c9b@syntax-vector->list (o284c@o276d@annotation-expression o308e@x)) (if (vector? o308e@x) (vector->list o308e@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" o308e@x)))))) (set! o2c9d@syntax-pair? (lambda (o309a@x) (o2c99@syntax-kind? o309a@x pair?))) (set! o2c9f@syntax-vector? (lambda (o309c@x) (o2c99@syntax-kind? o309c@x vector?))) (set! o2ca1@syntax-null? (lambda (o309e@x) (o2c99@syntax-kind? o309e@x null?))) (set! o2ca3@syntax-list? (lambda (o30a0@x) (or (o2ca1@syntax-null? o30a0@x) (and (o2c9d@syntax-pair? o30a0@x) (o2ca3@syntax-list? (o2ca7@syntax-cdr o30a0@x)))))) (set! o2ca5@syntax-car (lambda (o30a2@x) (if (o2c73@stx? o30a2@x) (o2c93@mkstx (o2ca5@syntax-car (o2c77@stx-expr o30a2@x)) (o2c79@stx-mark* o30a2@x) (o2c7b@stx-subst* o30a2@x) (o2c7d@stx-ae* o30a2@x)) (if (o284a@o2769@annotation? o30a2@x) (o2ca5@syntax-car (o284c@o276d@annotation-expression o30a2@x)) (if (pair? o30a2@x) (car o30a2@x) (assertion-violation 'syntax-car '"BUG: not a pair" o30a2@x)))))) (set! o2ca7@syntax-cdr (lambda (o30a4@x) (if (o2c73@stx? o30a4@x) (o2c93@mkstx (o2ca7@syntax-cdr (o2c77@stx-expr o30a4@x)) (o2c79@stx-mark* o30a4@x) (o2c7b@stx-subst* o30a4@x) (o2c7d@stx-ae* o30a4@x)) (if (o284a@o2769@annotation? o30a4@x) (o2ca7@syntax-cdr (o284c@o276d@annotation-expression o30a4@x)) (if (pair? o30a4@x) (cdr o30a4@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" o30a4@x)))))) (set! o2ca9@syntax->list (lambda (o30a6@x) (if (o2c9d@syntax-pair? o30a6@x) (cons (o2ca5@syntax-car o30a6@x) (o2ca9@syntax->list (o2ca7@syntax-cdr o30a6@x))) (if (o2ca1@syntax-null? o30a6@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" o30a6@x))))) (set! o2cab@id? (lambda (o30a8@x) (and (o2c73@stx? o30a8@x) ((lambda (o30aa@expr) (symbol? (if (o284a@o2769@annotation? o30aa@expr) (o2849@o2767@annotation-stripped o30aa@expr) o30aa@expr))) (o2c77@stx-expr o30a8@x))))) (set! o2cad@id->sym (lambda (o30ac@x) (begin (if (not (o2c73@stx? o30ac@x)) (error 'id->sym '"BUG in ikarus: not an id" o30ac@x) (void)) ((lambda (o30ae@expr) ((lambda (o30b0@sym) (if (symbol? o30b0@sym) o30b0@sym (error 'id->sym '"BUG in ikarus: not an id" o30ac@x))) (if (o284a@o2769@annotation? o30ae@expr) (o2849@o2767@annotation-stripped o30ae@expr) o30ae@expr))) (o2c77@stx-expr o30ac@x))))) (set! o2caf@same-marks? (lambda (o30b2@x o30b3@y) (or (and (null? o30b2@x) (null? o30b3@y)) (and (pair? o30b2@x) (pair? o30b3@y) (eq? (car o30b2@x) (car o30b3@y)) (o2caf@same-marks? (cdr o30b2@x) (cdr o30b3@y)))))) (set! o2cb1@bound-id=? (lambda (o30b6@x o30b7@y) (and (eq? (o2cad@id->sym o30b6@x) (o2cad@id->sym o30b7@y)) (o2caf@same-marks? (o2c79@stx-mark* o30b6@x) (o2c79@stx-mark* o30b7@y))))) (set! o2cb3@free-id=? (lambda (o30ba@i o30bb@j) ((lambda (o30be@t0 o30bf@t1) (if (or o30be@t0 o30bf@t1) (eq? o30be@t0 o30bf@t1) (eq? (o2cad@id->sym o30ba@i) (o2cad@id->sym o30bb@j)))) (o2cc7@id->real-label o30ba@i) (o2cc7@id->real-label o30bb@j)))) (set! o2cb5@valid-bound-ids? (lambda (o30c2@id*) (and (for-all o2cab@id? o30c2@id*) (o2cb7@distinct-bound-ids? o30c2@id*)))) (set! o2cb7@distinct-bound-ids? (lambda (o30c4@id*) (or (null? o30c4@id*) (and (not (o2cb9@bound-id-member? (car o30c4@id*) (cdr o30c4@id*))) (o2cb7@distinct-bound-ids? (cdr o30c4@id*)))))) (set! o2cb9@bound-id-member? (lambda (o30c6@id o30c7@id*) (and (pair? o30c7@id*) (or (o2cb1@bound-id=? o30c6@id (car o30c7@id*)) (o2cb9@bound-id-member? o30c6@id (cdr o30c7@id*)))))) (set! o2cbb@self-evaluating? (lambda (o30ca@x) (or (number? o30ca@x) (string? o30ca@x) (char? o30ca@x) (boolean? o30ca@x) (regexp? o30ca@x) (bytevector? o30ca@x)))) (set! o2cbd@strip-annotations (lambda (o30cc@x) (if (pair? o30cc@x) (cons (o2cbd@strip-annotations (car o30cc@x)) (o2cbd@strip-annotations (cdr o30cc@x))) (if (vector? o30cc@x) (vector-map o2cbd@strip-annotations o30cc@x) (if (o284a@o2769@annotation? o30cc@x) (o2849@o2767@annotation-stripped o30cc@x) o30cc@x))))) (set! o2cbf@strip (lambda (o30ce@x o30cf@m*) (if (o2c29@top-marked? o30cf@m*) (if (or (o284a@o2769@annotation? o30ce@x) (and (pair? o30ce@x) (o284a@o2769@annotation? (car o30ce@x))) (and (vector? o30ce@x) (> (vector-length o30ce@x) '0) (o284a@o2769@annotation? (vector-ref o30ce@x '0)))) (o2cbd@strip-annotations o30ce@x) o30ce@x) ((letrec ((o30d2@f (lambda (o30d4@x) (if (o2c73@stx? o30d4@x) (o2cbf@strip (o2c77@stx-expr o30d4@x) (o2c79@stx-mark* o30d4@x)) (if (o284a@o2769@annotation? o30d4@x) (o2849@o2767@annotation-stripped o30d4@x) (if (pair? o30d4@x) ((lambda (o30d6@a o30d7@d) (if (and (eq? o30d6@a (car o30d4@x)) (eq? o30d7@d (cdr o30d4@x))) o30d4@x (cons o30d6@a o30d7@d))) (o30d2@f (car o30d4@x)) (o30d2@f (cdr o30d4@x))) (if (vector? o30d4@x) ((lambda (o30da@old) ((lambda (o30dc@new) (if (for-all eq? o30da@old o30dc@new) o30d4@x (list->vector o30dc@new))) (map o30d2@f o30da@old))) (vector->list o30d4@x)) o30d4@x))))))) o30d2@f) o30ce@x)))) (set! o2cc1@stx->datum (lambda (o30de@x) (o2cbf@strip o30de@x '()))) (set! o2cc3@same-marks*? (lambda (o30e0@mark* o30e1@mark** o30e2@si) (if (null? o30e2@si) '#f (if (o2caf@same-marks? o30e0@mark* (vector-ref o30e1@mark** (car o30e2@si))) (car o30e2@si) (o2cc3@same-marks*? o30e0@mark* o30e1@mark** (cdr o30e2@si)))))) (set! o2cc5@id->label (lambda (o30e6@id) (or (o2cc7@id->real-label o30e6@id) ((lambda (o30e8@t) (if o30e8@t ((lambda (o30ea@env) ((lambda (o30ec@rib) (call-with-values (lambda () (o2c33@gen-define-label+loc o30e6@id o30ec@rib)) (lambda (o30f2@o30ef o30f3@o30f1) ((lambda (o30f6@loc_ o30f7@lab) (begin (o2c5c@extend-rib! o30ec@rib o30e6@id o30f7@lab) o30f7@lab)) o30f3@o30f1 o30f2@o30ef)))) (o2f5f@interaction-env-rib o30ea@env))) o30e8@t) '#f)) (o2fad@top-level-context))))) (set! o2cc7@id->real-label (lambda (o30fa@id) ((lambda (o30fc@sym) ((letrec ((o30fe@search (lambda (o3100@subst* o3101@mark*) (if (null? o3100@subst*) '#f (if (eq? (car o3100@subst*) 'shift) (o30fe@search (cdr o3100@subst*) (cdr o3101@mark*)) ((lambda (o3104@rib) ((lambda (o3106@t) (if o3106@t ((lambda (o3108@ht) ((lambda (o310a@si) ((lambda (o310c@i) (if o310c@i (vector-ref (o2c4a@rib-label* o3104@rib) o310c@i) (o30fe@search (cdr o3100@subst*) o3101@mark*))) (and o310a@si (o2cc3@same-marks*? o3101@mark* (o2c48@rib-mark** o3104@rib) (reverse o310a@si))))) (hashtable-ref o3108@ht o30fc@sym '#f))) o3106@t) ((letrec ((o310e@f (lambda (o3110@sym* o3111@mark** o3112@label*) (if (null? o3110@sym*) (o30fe@search (cdr o3100@subst*) o3101@mark*) (if (and (eq? (car o3110@sym*) o30fc@sym) (o2caf@same-marks? (car o3111@mark**) o3101@mark*)) (car o3112@label*) (o310e@f (cdr o3110@sym*) (cdr o3111@mark**) (cdr o3112@label*))))))) o310e@f) (o2c46@rib-sym* o3104@rib) (o2c48@rib-mark** o3104@rib) (o2c4a@rib-label* o3104@rib)))) (o2c4c@rib-sealed/freq o3104@rib))) (car o3100@subst*))))))) o30fe@search) (o2c7b@stx-subst* o30fa@id) (o2c79@stx-mark* o30fa@id))) (o2cad@id->sym o30fa@id)))) (set! o2cc9@label->binding (lambda (o3116@x o3117@r) ((lambda (o311a@t) (if o311a@t ((lambda (o311c@b) (if (and (pair? o311c@b) (eq? (car o311c@b) '$core-rtd)) (cons '$rtd (map o2e6c@bless (cdr o311c@b))) (if (and (pair? o311c@b) (eq? (car o311c@b) 'global-rtd)) ((lambda (o311e@lib o311f@loc) (cons '$rtd (symbol-value o311f@loc))) (cadr o311c@b) (cddr o311c@b)) o311c@b))) o311a@t) ((lambda (o3122@t) (if o3122@t (cdr o3122@t) ((lambda (o3124@t) (if o3124@t ((lambda (o3126@env) ((lambda (o3128@t) (if o3128@t ((lambda (o312a@p) (cons* 'lexical (cdr o312a@p) '#f)) o3128@t) '(displaced-lexical . #f))) (assq o3116@x (o2f63@interaction-env-locs o3126@env)))) o3124@t) '(displaced-lexical . #f))) (o2fad@top-level-context)))) (assq o3116@x o3117@r)))) (o2ace@o296e@imported-label->binding o3116@x)))) (set! o2ccb@make-binding cons) (set! o2ccd@binding-type car) (set! o2ccf@binding-value cdr) (set! o2cd1@raise-unbound-error (lambda (o312c@id) (o2f9d@syntax-violation* '#f '"unbound identifier" o312c@id (o4cdc@o4b22@make-undefined-violation)))) (set! o2cd3@syntax-type (lambda (o312e@e o312f@r) (if (o2cab@id? o312e@e) ((lambda (o3132@id) ((lambda (o3134@label) ((lambda (o3136@b) ((lambda (o3138@type) ((lambda () (begin (if (not o3134@label) (o2cd1@raise-unbound-error o3132@id) (void)) ((lambda (o313a@t) (if (memv o313a@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values o3138@type (o2ccf@binding-value o3136@b) o3132@id) (values 'other '#f '#f))) o3138@type))))) (o2ccd@binding-type o3136@b))) (o2cc9@label->binding o3134@label o312f@r))) (o2cc5@id->label o3132@id))) o312e@e) (if (o2c9d@syntax-pair? o312e@e) ((lambda (o313c@id) (if (o2cab@id? o313c@id) ((lambda (o313e@label) ((lambda (o3140@b) ((lambda (o3142@type) ((lambda () (begin (if (not o313e@label) (o2cd1@raise-unbound-error o313c@id) (void)) ((lambda (o3144@t) (if (memv o3144@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values o3142@type (o2ccf@binding-value o3140@b) o313c@id) (values 'call '#f '#f))) o3142@type))))) (o2ccd@binding-type o3140@b))) (o2cc9@label->binding o313e@label o312f@r))) (o2cc5@id->label o313c@id)) (values 'call '#f '#f))) (o2ca5@syntax-car o312e@e)) ((lambda (o3146@d) (if (o2cbb@self-evaluating? o3146@d) (values 'constant o3146@d '#f) (values 'other '#f '#f))) (o2cc1@stx->datum o312e@e)))))) (set! o2ce1@sanitize-binding (lambda (o3148@x o3149@src) (if (procedure? o3148@x) (cons* 'local-macro o3148@x o3149@src) (if (and (pair? o3148@x) (eq? (car o3148@x) 'macro!) (procedure? (cdr o3148@x))) (cons* 'local-macro! (cdr o3148@x) o3149@src) (if (and (pair? o3148@x) (eq? (car o3148@x) '$rtd)) o3148@x (assertion-violation 'expand '"invalid transformer" o3148@x)))))) (set! o2ce3@make-variable-transformer (lambda (o314c@x) (if (procedure? o314c@x) (cons 'macro! o314c@x) (assertion-violation 'make-variable-transformer '"not a procedure" o314c@x)))) (set! o2ce5@variable-transformer? (lambda (o314e@x) (and (pair? o314e@x) (eq? (car o314e@x) 'macro!) (procedure? (cdr o314e@x))))) (set! o2ce7@variable-transformer-procedure (lambda (o3150@x) (if (o2ce5@variable-transformer? o3150@x) (cdr o3150@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" o3150@x)))) (set! o2ce9@make-eval-transformer (lambda (o3152@x) (o2ce1@sanitize-binding (eval-core (o28a9@o2861@expanded->core o3152@x)) o3152@x))) (set! o2e3a@parse-define (lambda (o3154@x) ((lambda (o3156@t) ((lambda (o3158@ls/false) (if (and o3158@ls/false (apply (lambda (o315a@id o315b@fmls o315c@b o315d@b*) (o2cab@id? o315a@id)) o3158@ls/false)) (apply (lambda (o3162@id o3163@fmls o3164@b o3165@b*) (begin (o2edc@verify-formals o3163@fmls o3154@x) (values o3162@id (cons 'defun (cons o3163@fmls (cons o3164@b o3165@b*)))))) o3158@ls/false) ((lambda (o316a@t) ((lambda (o316c@ls/false) (if (and o316c@ls/false (apply (lambda (o316e@id o316f@val) (o2cab@id? o316e@id)) o316c@ls/false)) (apply (lambda (o3172@id o3173@val) (values o3172@id (cons 'expr o3173@val))) o316c@ls/false) ((lambda (o3176@t) ((lambda (o3178@ls/false) (if (and o3178@ls/false (apply (lambda (o317a@id) (o2cab@id? o317a@id)) o3178@ls/false)) (apply (lambda (o317c@id) (values o317c@id (cons 'expr (o2e6c@bless '(void))))) o3178@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3176@t))) (o2eb6@syntax-dispatch o3176@t '(_ any)))) o316a@t))) (o2eb6@syntax-dispatch o316a@t '(_ any any)))) o3156@t))) (o2eb6@syntax-dispatch o3156@t '(_ (any . any) any . each-any)))) o3154@x))) (set! o2e3c@parse-define-syntax (lambda (o317e@x) ((lambda (o3180@t) ((lambda (o3182@ls/false) (if (and o3182@ls/false (apply (lambda (o3184@id o3185@val) (o2cab@id? o3184@id)) o3182@ls/false)) (apply (lambda (o3188@id o3189@val) (values o3188@id o3189@val)) o3182@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3180@t))) (o2eb6@syntax-dispatch o3180@t '(_ any any)))) o317e@x))) (set! o2e3e@scheme-stx-hashtable (make-eq-hashtable)) (set! o2e40@scheme-stx (lambda (o318c@sym) (or (hashtable-ref o2e3e@scheme-stx-hashtable o318c@sym '#f) ((lambda (o318e@subst) ((lambda (o3190@stx) ((lambda (o3192@stx) ((lambda () (begin (hashtable-set! o2e3e@scheme-stx-hashtable o318c@sym o3192@stx) o3192@stx)))) ((lambda (o3194@t) (if o3194@t ((lambda (o3196@x) ((lambda (o3198@name o3199@label) (o2c97@add-subst (o2c44@make-rib (list o3198@name) (list o2c27@top-mark*) (list o3199@label) '#f '#f) o3190@stx)) (car o3196@x) (cdr o3196@x))) o3194@t) o3190@stx)) (assq o318c@sym o318e@subst)))) (o2c75@make-stx o318c@sym o2c27@top-mark* '() '()))) (o2aa4@o291a@library-subst (o2ac8@o2962@find-library-by-name '(psyntax system $all))))))) (set! o2e42@lexical-var car) (set! o2e44@lexical-mutable? cdr) (set! o2e46@set-lexical-mutable! set-cdr!) (set! o2e48@add-lexical (lambda (o319c@lab o319d@lex o319e@r) (cons (cons* o319c@lab 'lexical o319d@lex '#f) o319e@r))) (set! o2e4a@add-lexicals (lambda (o31a2@lab* o31a3@lex* o31a4@r) (if (null? o31a2@lab*) o31a4@r (o2e4a@add-lexicals (cdr o31a2@lab*) (cdr o31a3@lex*) (o2e48@add-lexical (car o31a2@lab*) (car o31a3@lex*) o31a4@r))))) (set! o2e4c@letrec-helper (lambda (o31a8@e o31a9@r o31aa@mr o31ab@build) ((lambda (o31b0@t) ((lambda (o31b2@ls/false) (if o31b2@ls/false (apply (lambda (o31b4@lhs* o31b5@rhs* o31b6@b o31b7@b*) (if (not (o2cb5@valid-bound-ids? o31b4@lhs*)) (o2e70@invalid-fmls-error o31a8@e o31b4@lhs*) ((lambda (o31bc@lex* o31bd@lab*) ((lambda (o31c0@rib o31c1@r) ((lambda (o31c4@body o31c5@rhs*) (o31ab@build '#f o31bc@lex* o31c5@rhs* o31c4@body)) (o2eee@chi-internal (o2c97@add-subst o31c0@rib (cons o31b6@b o31b7@b*)) o31c1@r o31aa@mr) (o2ed4@chi-expr* (map (lambda (o31c8@x) (o2c97@add-subst o31c0@rib o31c8@x)) o31b5@rhs*) o31c1@r o31aa@mr))) (o2c66@make-full-rib o31b4@lhs* o31bd@lab*) (o2e4a@add-lexicals o31bd@lab* o31bc@lex* o31a9@r))) (map o2c2b@gen-lexical o31b4@lhs*) (map o2c2f@gen-label o31b4@lhs*)))) o31b2@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o31b0@t))) (o2eb6@syntax-dispatch o31b0@t '(_ #(each (any any)) any . each-any)))) o31a8@e))) (set! o2e4e@letrec-transformer (lambda (o31ca@e o31cb@r o31cc@mr) (o2e4c@letrec-helper o31ca@e o31cb@r o31cc@mr o2c0c@o2b7d@build-letrec))) (set! o2e50@letrec*-transformer (lambda (o31d0@e o31d1@r o31d2@mr) (o2e4c@letrec-helper o31d0@e o31d1@r o31d2@mr o2c0d@o2b7f@build-letrec*))) (set! o2e52@fluid-let-syntax-transformer (lambda (o31d6@e o31d7@r o31d8@mr) ((lambda (o31dd@lookup) (begin (set! o31dd@lookup (lambda (o31f0@x) (or (o2cc5@id->label o31f0@x) (o2f9f@syntax-violation '#f '"unbound identifier" o31d6@e o31f0@x)))) ((lambda (o31de@t) ((lambda (o31e0@ls/false) (if o31e0@ls/false (apply (lambda (o31e2@lhs* o31e3@rhs* o31e4@b o31e5@b*) (if (not (o2cb5@valid-bound-ids? o31e2@lhs*)) (o2e70@invalid-fmls-error o31d6@e o31e2@lhs*) ((lambda (o31ea@lab* o31eb@rhs*) (o2eee@chi-internal (cons o31e4@b o31e5@b*) (append (map cons o31ea@lab* o31eb@rhs*) o31d7@r) (append (map cons o31ea@lab* o31eb@rhs*) o31d8@mr))) (map o31dd@lookup o31e2@lhs*) (map (lambda (o31ee@x) (o2ce9@make-eval-transformer (o2f13@expand-transformer o31ee@x o31d8@mr))) o31e3@rhs*)))) o31e0@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o31de@t))) (o2eb6@syntax-dispatch o31de@t '(_ #(each (any any)) any . each-any)))) o31d6@e))) '#f))) (set! o2e54@type-descriptor-transformer (lambda (o31f2@e o31f3@r o31f4@mr) ((lambda (o31f8@t) ((lambda (o31fa@ls/false) (if (and o31fa@ls/false (apply (lambda (o31fc@id) (o2cab@id? o31fc@id)) o31fa@ls/false)) (apply (lambda (o31fe@id) ((lambda (o3200@lab) ((lambda (o3202@b) ((lambda (o3204@type) ((lambda () (begin (if (not o3200@lab) (o2cd1@raise-unbound-error o31fe@id) (void)) (if (not (and (eq? o3204@type '$rtd) (not (list? (o2ccf@binding-value o3202@b))))) (o2f9f@syntax-violation '#f '"not a record type" o31f2@e) (void)) (list 'quote (o2ccf@binding-value o3202@b)))))) (o2ccd@binding-type o3202@b))) (o2cc9@label->binding o3200@lab o31f3@r))) (o2cc5@id->label o31fe@id))) o31fa@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o31f8@t))) (o2eb6@syntax-dispatch o31f8@t '(_ any)))) o31f2@e))) (set! o2e56@record-type-descriptor-transformer (lambda (o3206@e o3207@r o3208@mr) ((lambda (o320c@t) ((lambda (o320e@ls/false) (if (and o320e@ls/false (apply (lambda (o3210@id) (o2cab@id? o3210@id)) o320e@ls/false)) (apply (lambda (o3212@id) ((lambda (o3214@lab) ((lambda (o3216@b) ((lambda (o3218@type) ((lambda () (begin (if (not o3214@lab) (o2cd1@raise-unbound-error o3212@id) (void)) (if (not (and (eq? o3218@type '$rtd) (list? (o2ccf@binding-value o3216@b)))) (o2f9f@syntax-violation '#f '"not a record type" o3206@e) (void)) (o2ed8@chi-expr (car (o2ccf@binding-value o3216@b)) o3207@r o3208@mr))))) (o2ccd@binding-type o3216@b))) (o2cc9@label->binding o3214@lab o3207@r))) (o2cc5@id->label o3212@id))) o320e@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o320c@t))) (o2eb6@syntax-dispatch o320c@t '(_ any)))) o3206@e))) (set! o2e58@record-constructor-descriptor-transformer (lambda (o321a@e o321b@r o321c@mr) ((lambda (o3220@t) ((lambda (o3222@ls/false) (if (and o3222@ls/false (apply (lambda (o3224@id) (o2cab@id? o3224@id)) o3222@ls/false)) (apply (lambda (o3226@id) ((lambda (o3228@lab) ((lambda (o322a@b) ((lambda (o322c@type) ((lambda () (begin (if (not o3228@lab) (o2cd1@raise-unbound-error o3226@id) (void)) (if (not (and (eq? o322c@type '$rtd) (list? (o2ccf@binding-value o322a@b)))) (o2f9f@syntax-violation '#f '"invalid type" o321a@e) (void)) (o2ed8@chi-expr (cadr (o2ccf@binding-value o322a@b)) o321b@r o321c@mr))))) (o2ccd@binding-type o322a@b))) (o2cc9@label->binding o3228@lab o321b@r))) (o2cc5@id->label o3226@id))) o3222@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3220@t))) (o2eb6@syntax-dispatch o3220@t '(_ any)))) o321a@e))) (set! o2e5a@when-macro (lambda (o322e@e) ((lambda (o3230@t) ((lambda (o3232@ls/false) (if o3232@ls/false (apply (lambda (o3234@test o3235@e o3236@e*) (o2e6c@bless (list 'if o3234@test (cons 'begin (cons o3235@e o3236@e*))))) o3232@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3230@t))) (o2eb6@syntax-dispatch o3230@t '(_ any any . each-any)))) o322e@e))) (set! o2e5c@unless-macro (lambda (o323a@e) ((lambda (o323c@t) ((lambda (o323e@ls/false) (if o323e@ls/false (apply (lambda (o3240@test o3241@e o3242@e*) (o2e6c@bless (list 'if (list 'not o3240@test) (cons 'begin (cons o3241@e o3242@e*))))) o323e@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o323c@t))) (o2eb6@syntax-dispatch o323c@t '(_ any any . each-any)))) o323a@e))) (set! o2e5e@if-transformer (lambda (o3246@e o3247@r o3248@mr) ((lambda (o324c@t) ((lambda (o324e@ls/false) (if o324e@ls/false (apply (lambda (o3250@e0 o3251@e1 o3252@e2) (list 'if (o2ed8@chi-expr o3250@e0 o3247@r o3248@mr) (o2ed8@chi-expr o3251@e1 o3247@r o3248@mr) (o2ed8@chi-expr o3252@e2 o3247@r o3248@mr))) o324e@ls/false) ((lambda (o3256@t) ((lambda (o3258@ls/false) (if o3258@ls/false (apply (lambda (o325a@e0 o325b@e1) (list 'if (o2ed8@chi-expr o325a@e0 o3247@r o3248@mr) (o2ed8@chi-expr o325b@e1 o3247@r o3248@mr) (o2c0b@o2b7b@build-void))) o3258@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3256@t))) (o2eb6@syntax-dispatch o3256@t '(_ any any)))) o324c@t))) (o2eb6@syntax-dispatch o324c@t '(_ any any any)))) o3246@e))) (set! o2e60@and-transformer (lambda (o325e@e o325f@r o3260@mr) ((lambda (o3264@t) ((lambda (o3266@ls/false) (if o3266@ls/false (apply (lambda (o3268@e*) (cons 'and (o2ed4@chi-expr* o3268@e* o325f@r o3260@mr))) o3266@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3264@t))) (o2eb6@syntax-dispatch o3264@t '(_ . each-any)))) o325e@e))) (set! o2e62@or-transformer (lambda (o326a@e o326b@r o326c@mr) ((lambda (o3270@t) ((lambda (o3272@ls/false) (if o3272@ls/false (apply (lambda (o3274@e*) (cons 'or (o2ed4@chi-expr* o3274@e* o326b@r o326c@mr))) o3272@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3270@t))) (o2eb6@syntax-dispatch o3270@t '(_ . each-any)))) o326a@e))) (set! o2e64@case-macro (lambda (o3276@e) ((lambda (o3279@build-last o327b@build-one) (begin (set! o3279@build-last (lambda (o32a0@cls) ((lambda (o32a2@t) ((lambda (o32a4@ls/false) (if o32a4@ls/false (apply (lambda (o32a6@e o32a7@e*) (cons 'begin (cons o32a6@e o32a7@e*))) o32a4@ls/false) ((lambda (o32aa@t) ((lambda (o32ac@ls/false) (if o32ac@ls/false (apply (lambda () (o327b@build-one o32a0@cls '(if #f #f))) o32ac@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o32aa@t))) (o2eb6@syntax-dispatch o32aa@t '_))) o32a2@t))) (o2eb6@syntax-dispatch o32a2@t '(#(scheme-id else) any . each-any)))) o32a0@cls))) (set! o327b@build-one (lambda (o3292@cls o3293@k) ((lambda (o3296@t) ((lambda (o3298@ls/false) (if o3298@ls/false (apply (lambda (o329a@d* o329b@e o329c@e*) (list 'if (list 'memv 't (list 'quote o329a@d*)) (cons 'begin (cons o329b@e o329c@e*)) o3293@k)) o3298@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3296@t))) (o2eb6@syntax-dispatch o3296@t '(each-any any . each-any)))) o3292@cls))) ((lambda (o327c@t) ((lambda (o327e@ls/false) (if o327e@ls/false (apply (lambda (o3280@expr) (o2e6c@bless (cons 'let (cons (list (list 't o3280@expr)) '((if #f #f)))))) o327e@ls/false) ((lambda (o3282@t) ((lambda (o3284@ls/false) (if o3284@ls/false (apply (lambda (o3286@expr o3287@cls o3288@cls*) (o2e6c@bless (list 'let (list (list 't o3286@expr)) ((letrec ((o328c@f (lambda (o328e@cls o328f@cls*) (if (null? o328f@cls*) (o3279@build-last o328e@cls) (o327b@build-one o328e@cls (o328c@f (car o328f@cls*) (cdr o328f@cls*))))))) o328c@f) o3287@cls o3288@cls*)))) o3284@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3282@t))) (o2eb6@syntax-dispatch o3282@t '(_ any any . each-any)))) o327c@t))) (o2eb6@syntax-dispatch o327c@t '(_ any)))) o3276@e))) '#f '#f))) (set! o2e66@quote-transformer (lambda (o32ae@e o32af@r o32b0@mr) ((lambda (o32b4@t) ((lambda (o32b6@ls/false) (if o32b6@ls/false (apply (lambda (o32b8@datum) (list 'quote (o2cc1@stx->datum o32b8@datum))) o32b6@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o32b4@t))) (o2eb6@syntax-dispatch o32b4@t '(_ any)))) o32ae@e))) (set! o2e68@case-lambda-transformer (lambda (o32ba@e o32bb@r o32bc@mr) ((lambda (o32c0@t) ((lambda (o32c2@ls/false) (if o32c2@ls/false (apply (lambda (o32c4@fmls* o32c5@b* o32c6@b**) (call-with-values (lambda () (o2ee0@chi-lambda-clause* o32ba@e o32c4@fmls* (map cons o32c5@b* o32c6@b**) o32bb@r o32bc@mr)) (lambda (o32ce@o32cb o32cf@o32cd) ((lambda (o32d2@body* o32d3@fmls*) (o2c08@o2b49@build-case-lambda '#f o32d3@fmls* o32d2@body*)) o32cf@o32cd o32ce@o32cb)))) o32c2@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o32c0@t))) (o2eb6@syntax-dispatch o32c0@t '(_ . #(each (any any . each-any)))))) o32ba@e))) (set! o2e6a@lambda-transformer (lambda (o32d6@e o32d7@r o32d8@mr) ((lambda (o32dc@t) ((lambda (o32de@ls/false) (if o32de@ls/false (apply (lambda (o32e0@fmls o32e1@b o32e2@b*) (call-with-values (lambda () (o2ede@chi-lambda-clause o32d6@e o32e0@fmls (cons o32e1@b o32e2@b*) o32d7@r o32d8@mr)) (lambda (o32ea@o32e7 o32eb@o32e9) ((lambda (o32ee@body o32ef@fmls) (o2c07@o2b47@build-lambda '#f o32ef@fmls o32ee@body)) o32eb@o32e9 o32ea@o32e7)))) o32de@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o32dc@t))) (o2eb6@syntax-dispatch o32dc@t '(_ any any . each-any)))) o32d6@e))) (set! o2e6c@bless (lambda (o32f2@x) (o2c93@mkstx ((letrec ((o32f4@f (lambda (o32f6@x) (if (o2c73@stx? o32f6@x) o32f6@x (if (pair? o32f6@x) (cons (o32f4@f (car o32f6@x)) (o32f4@f (cdr o32f6@x))) (if (symbol? o32f6@x) (o2e40@scheme-stx o32f6@x) (if (vector? o32f6@x) (vector-map o32f4@f o32f6@x) o32f6@x))))))) o32f4@f) o32f2@x) '() '() '()))) (set! o2e6e@with-syntax-macro (lambda (o32f8@e) ((lambda (o32fa@t) ((lambda (o32fc@ls/false) (if o32fc@ls/false (apply (lambda (o32fe@pat* o32ff@expr* o3300@b o3301@b*) ((lambda (o3306@idn*) (begin (o2edc@verify-formals (map car o3306@idn*) o32f8@e) ((lambda (o3308@t*) (o2e6c@bless (list 'let (map list o3308@t* o32ff@expr*) ((letrec ((o330a@f (lambda (o330c@pat* o330d@t*) (if (null? o330c@pat*) (cons 'begin (cons '#f (cons o3300@b o3301@b*))) (list 'syntax-case (car o330d@t*) '() (list (car o330c@pat*) (o330a@f (cdr o330c@pat*) (cdr o330d@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car o330c@pat*)) (car o330d@t*)))))))) o330a@f) o32fe@pat* o3308@t*)))) (o2f8d@generate-temporaries o32ff@expr*)))) ((letrec ((o3310@f (lambda (o3312@pat*) (if (null? o3312@pat*) '() (call-with-values (lambda () (o2eb4@convert-pattern (car o3312@pat*) '())) (lambda (o3318@o3315 o3319@o3317) ((lambda (o331c@idn* o331d@pat) (append o331c@idn* (o3310@f (cdr o3312@pat*)))) o3319@o3317 o3318@o3315))))))) o3310@f) o32fe@pat*))) o32fc@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o32fa@t))) (o2eb6@syntax-dispatch o32fa@t '(_ #(each (any any)) any . each-any)))) o32f8@e))) (set! o2e70@invalid-fmls-error (lambda (o3320@stx o3321@fmls) ((lambda (o3324@t) ((lambda (o3326@ls/false) (if o3326@ls/false (apply (lambda (o3328@id* o3329@last) ((letrec ((o332c@f (lambda (o332e@id*) (if (null? o332e@id*) (values) (if (not (o2cab@id? (car o332e@id*))) (o2f9f@syntax-violation '#f '"not an identifier" o3320@stx (car o332e@id*)) (begin (o332c@f (cdr o332e@id*)) (if (o2cb9@bound-id-member? (car o332e@id*) (cdr o332e@id*)) (o2f9f@syntax-violation '#f '"duplicate binding" o3320@stx (car o332e@id*)) (void)))))))) o332c@f) (if (o2cab@id? o3329@last) (cons o3329@last o3328@id*) (if (o2ca1@syntax-null? o3329@last) o3328@id* (o2f9f@syntax-violation '#f '"not an identifier" o3320@stx o3329@last))))) o3326@ls/false) ((lambda (o3330@t) ((lambda (o3332@ls/false) (if o3332@ls/false (apply (lambda () (o2f9f@syntax-violation '#f '"malformed binding form" o3320@stx o3321@fmls)) o3332@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3330@t))) (o2eb6@syntax-dispatch o3330@t '_))) o3324@t))) (o2eb6@syntax-dispatch o3324@t '#(each+ any () any)))) o3321@fmls))) (set! o2e72@let-macro (lambda (o3334@stx) ((lambda (o3336@t) ((lambda (o3338@ls/false) (if o3338@ls/false (apply (lambda (o333a@lhs* o333b@rhs* o333c@b o333d@b*) (if (o2cb5@valid-bound-ids? o333a@lhs*) (o2e6c@bless (cons (cons 'lambda (cons o333a@lhs* (cons o333c@b o333d@b*))) o333b@rhs*)) (o2e70@invalid-fmls-error o3334@stx o333a@lhs*))) o3338@ls/false) ((lambda (o3342@t) ((lambda (o3344@ls/false) (if (and o3344@ls/false (apply (lambda (o3346@f o3347@lhs* o3348@rhs* o3349@b o334a@b*) (o2cab@id? o3346@f)) o3344@ls/false)) (apply (lambda (o3350@f o3351@lhs* o3352@rhs* o3353@b o3354@b*) (if (o2cb5@valid-bound-ids? o3351@lhs*) (o2e6c@bless (cons (list 'letrec (list (list o3350@f (cons 'lambda (cons o3351@lhs* (cons o3353@b o3354@b*))))) o3350@f) o3352@rhs*)) (o2e70@invalid-fmls-error o3334@stx o3351@lhs*))) o3344@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3342@t))) (o2eb6@syntax-dispatch o3342@t '(_ any #(each (any any)) any . each-any)))) o3336@t))) (o2eb6@syntax-dispatch o3336@t '(_ #(each (any any)) any . each-any)))) o3334@stx))) (set! o2e74@let-values-macro (lambda (o335a@stx) ((lambda (o335d@rename o335f@rename*) (begin (set! o335d@rename (lambda (o33c2@x o33c3@old* o33c4@new*) (begin (if (not (o2cab@id? o33c2@x)) (o2f9f@syntax-violation '#f '"not an indentifier" o335a@stx o33c2@x) (void)) (if (o2cb9@bound-id-member? o33c2@x o33c3@old*) (o2f9f@syntax-violation '#f '"duplicate binding" o335a@stx o33c2@x) (void)) ((lambda (o33c8@y) (values o33c8@y (cons o33c2@x o33c3@old*) (cons o33c8@y o33c4@new*))) (gensym (o2fa5@syntax->datum o33c2@x)))))) (set! o335f@rename* (lambda (o33b0@x* o33b1@old* o33b2@new*) (if (null? o33b0@x*) (values '() o33b1@old* o33b2@new*) (call-with-values (lambda () (o335d@rename (car o33b0@x*) o33b1@old* o33b2@new*)) (lambda (o33b6@x o33b7@old* o33b8@new*) (call-with-values (lambda () (o335f@rename* (cdr o33b0@x*) o33b7@old* o33b8@new*)) (lambda (o33bc@x* o33bd@old* o33be@new*) (values (cons o33b6@x o33bc@x*) o33bd@old* o33be@new*)))))))) ((lambda (o3360@t) ((lambda (o3362@ls/false) (if o3362@ls/false (apply (lambda (o3364@b o3365@b*) (cons* (o2e6c@bless 'let) '() o3364@b o3365@b*)) o3362@ls/false) ((lambda (o3368@t) ((lambda (o336a@ls/false) (if o336a@ls/false (apply (lambda (o336c@lhs* o336d@rhs* o336e@b o336f@b*) (o2e6c@bless ((letrec ((o3374@f (lambda (o3376@lhs* o3377@rhs* o3378@old* o3379@new*) (if (null? o3376@lhs*) (cons 'let (cons (map list o3378@old* o3379@new*) (cons o336e@b o336f@b*))) ((lambda (o337e@t) ((lambda (o3380@ls/false) (if o3380@ls/false (apply (lambda (o3382@x*) (call-with-values (lambda () (o335f@rename* o3382@x* o3378@old* o3379@new*)) (lambda (o338a@o3385 o338b@o3387 o338c@o3389) ((lambda (o3390@new* o3391@old* o3392@y*) (list 'call-with-values (list 'lambda '() (car o3377@rhs*)) (list 'lambda o3392@y* (o3374@f (cdr o3376@lhs*) (cdr o3377@rhs*) o3391@old* o3390@new*)))) o338c@o3389 o338b@o3387 o338a@o3385)))) o3380@ls/false) ((lambda (o3396@t) ((lambda (o3398@ls/false) (if o3398@ls/false (apply (lambda (o339a@x* o339b@x) (call-with-values (lambda () (o335d@rename o339b@x o3378@old* o3379@new*)) (lambda (o339e@y o339f@old* o33a0@new*) (call-with-values (lambda () (o335f@rename* o339a@x* o339f@old* o33a0@new*)) (lambda (o33a4@y* o33a5@old* o33a6@new*) (list 'call-with-values (list 'lambda '() (car o3377@rhs*)) (list 'lambda (append o33a4@y* o339e@y) (o3374@f (cdr o3376@lhs*) (cdr o3377@rhs*) o33a5@old* o33a6@new*)))))))) o3398@ls/false) ((lambda (o33aa@t) ((lambda (o33ac@ls/false) (if o33ac@ls/false (apply (lambda (o33ae@others) (o2f9f@syntax-violation '#f '"malformed bindings" o335a@stx o33ae@others)) o33ac@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o33aa@t))) (o2eb6@syntax-dispatch o33aa@t 'any))) o3396@t))) (o2eb6@syntax-dispatch o3396@t '#(each+ any () any)))) o337e@t))) (o2eb6@syntax-dispatch o337e@t 'each-any))) (car o3376@lhs*)))))) o3374@f) o336c@lhs* o336d@rhs* '() '()))) o336a@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3368@t))) (o2eb6@syntax-dispatch o3368@t '(_ #(each (any any)) any . each-any)))) o3360@t))) (o2eb6@syntax-dispatch o3360@t '(_ () any . each-any)))) o335a@stx))) '#f '#f))) (set! o2e76@let*-values-macro (lambda (o33ca@stx) ((lambda (o33cd@check) (begin (set! o33cd@check (lambda (o33fc@x*) (if (not (null? o33fc@x*)) ((lambda (o33fe@x) (begin (if (not (o2cab@id? o33fe@x)) (o2f9f@syntax-violation '#f '"not an identifier" o33ca@stx o33fe@x) (void)) (o33cd@check (cdr o33fc@x*)) (if (o2cb9@bound-id-member? o33fe@x (cdr o33fc@x*)) (o2f9f@syntax-violation '#f '"duplicate identifier" o33ca@stx o33fe@x) (void)))) (car o33fc@x*)) (void)))) ((lambda (o33ce@t) ((lambda (o33d0@ls/false) (if o33d0@ls/false (apply (lambda (o33d2@b o33d3@b*) (cons* (o2e6c@bless 'let) '() o33d2@b o33d3@b*)) o33d0@ls/false) ((lambda (o33d6@t) ((lambda (o33d8@ls/false) (if o33d8@ls/false (apply (lambda (o33da@lhs* o33db@rhs* o33dc@b o33dd@b*) (o2e6c@bless ((letrec ((o33e2@f (lambda (o33e4@lhs* o33e5@rhs*) (if (null? o33e4@lhs*) (cons 'begin (cons o33dc@b o33dd@b*)) ((lambda (o33e8@t) ((lambda (o33ea@ls/false) (if o33ea@ls/false (apply (lambda (o33ec@x*) (begin (o33cd@check o33ec@x*) (list 'call-with-values (list 'lambda '() (car o33e5@rhs*)) (list 'lambda o33ec@x* (o33e2@f (cdr o33e4@lhs*) (cdr o33e5@rhs*)))))) o33ea@ls/false) ((lambda (o33ee@t) ((lambda (o33f0@ls/false) (if o33f0@ls/false (apply (lambda (o33f2@x* o33f3@x) (begin (o33cd@check (cons o33f3@x o33f2@x*)) (list 'call-with-values (list 'lambda '() (car o33e5@rhs*)) (list 'lambda (append o33f2@x* o33f3@x) (o33e2@f (cdr o33e4@lhs*) (cdr o33e5@rhs*)))))) o33f0@ls/false) ((lambda (o33f6@t) ((lambda (o33f8@ls/false) (if o33f8@ls/false (apply (lambda (o33fa@others) (o2f9f@syntax-violation '#f '"malformed bindings" o33ca@stx o33fa@others)) o33f8@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o33f6@t))) (o2eb6@syntax-dispatch o33f6@t 'any))) o33ee@t))) (o2eb6@syntax-dispatch o33ee@t '#(each+ any () any)))) o33e8@t))) (o2eb6@syntax-dispatch o33e8@t 'each-any))) (car o33e4@lhs*)))))) o33e2@f) o33da@lhs* o33db@rhs*))) o33d8@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o33d6@t))) (o2eb6@syntax-dispatch o33d6@t '(_ #(each (any any)) any . each-any)))) o33ce@t))) (o2eb6@syntax-dispatch o33ce@t '(_ () any . each-any)))) o33ca@stx))) '#f))) (set! o2e78@trace-lambda-macro (lambda (o3400@stx) ((lambda (o3402@t) ((lambda (o3404@ls/false) (if o3404@ls/false (apply (lambda (o3406@who o3407@fmls o3408@b o3409@b*) (if (o2cb5@valid-bound-ids? o3407@fmls) (o2e6c@bless (list 'make-traced-procedure (list 'quote o3406@who) (cons 'lambda (cons o3407@fmls (cons o3408@b o3409@b*))))) (o2e70@invalid-fmls-error o3400@stx o3407@fmls))) o3404@ls/false) ((lambda (o340e@t) ((lambda (o3410@ls/false) (if o3410@ls/false (apply (lambda (o3412@who o3413@fmls o3414@last o3415@b o3416@b*) (if (o2cb5@valid-bound-ids? (cons o3414@last o3413@fmls)) (o2e6c@bless (list 'make-traced-procedure (list 'quote o3412@who) (cons 'lambda (cons (append o3413@fmls o3414@last) (cons o3415@b o3416@b*))))) (o2e70@invalid-fmls-error o3400@stx (append o3413@fmls o3414@last)))) o3410@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o340e@t))) (o2eb6@syntax-dispatch o340e@t '(_ any #(each+ any () any) any . each-any)))) o3402@t))) (o2eb6@syntax-dispatch o3402@t '(_ any each-any any . each-any)))) o3400@stx))) (set! o2e7a@trace-define-macro (lambda (o341c@stx) ((lambda (o341e@t) ((lambda (o3420@ls/false) (if o3420@ls/false (apply (lambda (o3422@who o3423@fmls o3424@b o3425@b*) (if (o2cb5@valid-bound-ids? o3423@fmls) (o2e6c@bless (list 'define o3422@who (list 'make-traced-procedure (list 'quote o3422@who) (cons 'lambda (cons o3423@fmls (cons o3424@b o3425@b*)))))) (o2e70@invalid-fmls-error o341c@stx o3423@fmls))) o3420@ls/false) ((lambda (o342a@t) ((lambda (o342c@ls/false) (if o342c@ls/false (apply (lambda (o342e@who o342f@fmls o3430@last o3431@b o3432@b*) (if (o2cb5@valid-bound-ids? (cons o3430@last o342f@fmls)) (o2e6c@bless (list 'define o342e@who (list 'make-traced-procedure (list 'quote o342e@who) (cons 'lambda (cons (append o342f@fmls o3430@last) (cons o3431@b o3432@b*)))))) (o2e70@invalid-fmls-error o341c@stx (append o342f@fmls o3430@last)))) o342c@ls/false) ((lambda (o3438@t) ((lambda (o343a@ls/false) (if o343a@ls/false (apply (lambda (o343c@who o343d@expr) (if (o2cab@id? o343c@who) (o2e6c@bless (list 'define o343c@who (list 'let (list (list 'v o343d@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote o343c@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (o2f9f@syntax-violation '#f '"invalid name" o341c@stx))) o343a@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3438@t))) (o2eb6@syntax-dispatch o3438@t '(_ any any)))) o342a@t))) (o2eb6@syntax-dispatch o342a@t '(_ (any . #(each+ any () any)) any . each-any)))) o341e@t))) (o2eb6@syntax-dispatch o341e@t '(_ (any . each-any) any . each-any)))) o341c@stx))) (set! o2e7c@trace-define-syntax-macro (lambda (o3440@stx) ((lambda (o3442@t) ((lambda (o3444@ls/false) (if o3444@ls/false (apply (lambda (o3446@who o3447@expr) (if (o2cab@id? o3446@who) (o2e6c@bless (list 'define-syntax o3446@who (list 'make-traced-macro (list 'quote o3446@who) o3447@expr))) (o2f9f@syntax-violation '#f '"invalid name" o3440@stx))) o3444@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3442@t))) (o2eb6@syntax-dispatch o3442@t '(_ any any)))) o3440@stx))) (set! o2e7e@trace-let/rec-syntax (lambda (o344a@who) (lambda (o344c@stx) ((lambda (o344e@t) ((lambda (o3450@ls/false) (if o3450@ls/false (apply (lambda (o3452@lhs* o3453@rhs* o3454@b o3455@b*) (if (o2cb5@valid-bound-ids? o3452@lhs*) ((lambda (o345a@rhs*) (o2e6c@bless (cons o344a@who (cons (map list o3452@lhs* o345a@rhs*) (cons o3454@b o3455@b*))))) (map (lambda (o345c@lhs o345d@rhs) (list 'make-traced-macro (list 'quote o345c@lhs) o345d@rhs)) o3452@lhs* o3453@rhs*)) (o2e70@invalid-fmls-error o344c@stx o3452@lhs*))) o3450@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o344e@t))) (o2eb6@syntax-dispatch o344e@t '(_ #(each (any any)) any . each-any)))) o344c@stx)))) (set! o2e80@trace-let-syntax-macro (o2e7e@trace-let/rec-syntax 'let-syntax)) (set! o2e82@trace-letrec-syntax-macro (o2e7e@trace-let/rec-syntax 'letrec-syntax)) (set! o2e84@guard-macro (lambda (o3460@x) ((lambda (o3463@gen-clauses) (begin (set! o3463@gen-clauses (lambda (o347a@con o347b@outerk o347c@clause*) ((lambda (o3481@f o3483@f*) (begin (set! o3481@f (lambda (o34ba@x o34bb@k) ((lambda (o34be@t) ((lambda (o34c0@ls/false) (if o34c0@ls/false (apply (lambda (o34c2@e o34c3@p) ((lambda (o34c6@t) (list 'let (list (list o34c6@t o34c2@e)) (list 'if o34c6@t (list o34c3@p o34c6@t) o34bb@k))) (gensym))) o34c0@ls/false) ((lambda (o34c8@t) ((lambda (o34ca@ls/false) (if o34ca@ls/false (apply (lambda (o34cc@e) ((lambda (o34ce@t) (list 'let (list (list o34ce@t o34cc@e)) (list 'if o34ce@t o34ce@t o34bb@k))) (gensym))) o34ca@ls/false) ((lambda (o34d0@t) ((lambda (o34d2@ls/false) (if o34d2@ls/false (apply (lambda (o34d4@e o34d5@v o34d6@v*) (list 'if o34d4@e (cons 'begin (cons o34d5@v o34d6@v*)) o34bb@k)) o34d2@ls/false) ((lambda (o34da@t) ((lambda (o34dc@ls/false) (if o34dc@ls/false (apply (lambda () (o2f9f@syntax-violation '#f '"invalid guard clause" o34ba@x)) o34dc@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o34da@t))) (o2eb6@syntax-dispatch o34da@t '_))) o34d0@t))) (o2eb6@syntax-dispatch o34d0@t '(any any . each-any)))) o34c8@t))) (o2eb6@syntax-dispatch o34c8@t '(any)))) o34be@t))) (o2eb6@syntax-dispatch o34be@t '(any #(scheme-id =>) any)))) o34ba@x))) (set! o3483@f* (lambda (o3490@x*) ((lambda (o3492@t) ((lambda (o3494@ls/false) (if o3494@ls/false (apply (lambda () ((lambda (o3496@g) (values (list o3496@g (list 'lambda '() (list 'raise-continuable o347a@con))) o3496@g)) (gensym))) o3494@ls/false) ((lambda (o3498@t) ((lambda (o349a@ls/false) (if o349a@ls/false (apply (lambda (o349c@e o349d@e*) (values (cons 'begin (cons o349c@e o349d@e*)) '#f)) o349a@ls/false) ((lambda (o34a0@t) ((lambda (o34a2@ls/false) (if o34a2@ls/false (apply (lambda (o34a4@cls o34a5@cls*) (call-with-values (lambda () (o3483@f* o34a5@cls*)) (lambda (o34ac@o34a9 o34ad@o34ab) ((lambda (o34b0@g o34b1@e) (values (o3481@f o34a4@cls o34b1@e) o34b0@g)) o34ad@o34ab o34ac@o34a9)))) o34a2@ls/false) ((lambda (o34b4@t) ((lambda (o34b6@ls/false) (if o34b6@ls/false (apply (lambda (o34b8@others) (o2f9f@syntax-violation '#f '"invalid guard clause" o34b8@others)) o34b6@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o34b4@t))) (o2eb6@syntax-dispatch o34b4@t 'any))) o34a0@t))) (o2eb6@syntax-dispatch o34a0@t '(any . any)))) o3498@t))) (o2eb6@syntax-dispatch o3498@t '((#(scheme-id else) any . each-any))))) o3492@t))) (o2eb6@syntax-dispatch o3492@t '()))) o3490@x*))) (call-with-values (lambda () (o3483@f* o347c@clause*)) (lambda (o3488@o3485 o3489@o3487) ((lambda (o348c@raisek o348d@code) (if o348c@raisek (list (list 'call/cc (list 'lambda (list o348c@raisek) (list o347b@outerk (list 'lambda '() o348d@code))))) (list o347b@outerk (list 'lambda '() o348d@code)))) o3489@o3487 o3488@o3485))))) '#f '#f))) ((lambda (o3464@t) ((lambda (o3466@ls/false) (if (and o3466@ls/false (apply (lambda (o3468@con o3469@clause* o346a@b o346b@b*) (o2cab@id? o3468@con)) o3466@ls/false)) (apply (lambda (o3470@con o3471@clause* o3472@b o3473@b*) ((lambda (o3478@outerk) (o2e6c@bless (list (list 'call/cc (list 'lambda (list o3478@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list o3470@con) (o3463@gen-clauses o3470@con o3478@outerk o3471@clause*)) (cons 'lambda (cons '() (cons o3472@b o3473@b*)))))))))) (gensym))) o3466@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3464@t))) (o2eb6@syntax-dispatch o3464@t '(_ (any . each-any) any . each-any)))) o3460@x))) '#f))) (set! o2e86@define-enumeration-macro (lambda (o34de@stx) ((lambda (o34e1@set? o34e3@remove-dups) (begin (set! o34e1@set? (lambda (o34fa@x) (or (null? o34fa@x) (and (not (memq (car o34fa@x) (cdr o34fa@x))) (o34e1@set? (cdr o34fa@x)))))) (set! o34e3@remove-dups (lambda (o34f8@ls) (if (null? o34f8@ls) '() (cons (car o34f8@ls) (o34e3@remove-dups (remq (car o34f8@ls) (cdr o34f8@ls))))))) ((lambda (o34e4@t) ((lambda (o34e6@ls/false) (if (and o34e6@ls/false (apply (lambda (o34e8@name o34e9@id* o34ea@maker) (and (o2cab@id? o34e8@name) (o2cab@id? o34ea@maker) (for-all o2cab@id? o34e9@id*))) o34e6@ls/false)) (apply (lambda (o34ee@name o34ef@id* o34f0@maker) ((lambda (o34f4@name* o34f5@mk) (o2e6c@bless (list 'begin (list 'define o34f5@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote o34f4@name*)))) (list 'define-syntax o34ee@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote o34f4@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote o34ee@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax o34f0@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote o34f0@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote o34f4@name*)) (cons 'syntax-violation (cons (list 'quote o34f0@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons o34f5@mk '('(n* ...)))))))))))) (o34e3@remove-dups (o2fa5@syntax->datum o34ef@id*)) (gensym))) o34e6@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o34e4@t))) (o2eb6@syntax-dispatch o34e4@t '(_ any each-any any)))) o34de@stx))) '#f '#f))) (set! o2e88@time-macro (lambda (o34fc@stx) ((lambda (o34fe@t) ((lambda (o3500@ls/false) (if o3500@ls/false (apply (lambda (o3502@expr) (o2e6c@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() o3502@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) o3500@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o34fe@t))) (o2eb6@syntax-dispatch o34fe@t '(_ any)))) o34fc@stx))) (set! o2e8a@delay-macro (lambda (o3504@stx) ((lambda (o3506@t) ((lambda (o3508@ls/false) (if o3508@ls/false (apply (lambda (o350a@expr) (o2e6c@bless (list 'make-promise (list 'lambda '() o350a@expr)))) o3508@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3506@t))) (o2eb6@syntax-dispatch o3506@t '(_ any)))) o3504@stx))) (set! o2e8c@assert-macro (lambda (o350c@stx) ((lambda (o350e@t) ((lambda (o3510@ls/false) (if o3510@ls/false (apply (lambda (o3512@expr) ((lambda (o3514@pos) (o2e6c@bless (list 'unless o3512@expr (list 'assertion-error (list 'quote o3512@expr) (list 'quote o3514@pos))))) (or (o2f97@expression-position o350c@stx) (o2f97@expression-position o3512@expr)))) o3510@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o350e@t))) (o2eb6@syntax-dispatch o350e@t '(_ any)))) o350c@stx))) (set! o2e8e@endianness-macro (lambda (o3516@stx) ((lambda (o3518@t) ((lambda (o351a@ls/false) (if o351a@ls/false (apply (lambda (o351c@e) ((lambda (o351e@t) (if (memv o351e@t '(little)) (o2e6c@bless ''little) (if (memv o351e@t '(big)) (o2e6c@bless ''big) (o2f9f@syntax-violation '#f '"endianness must be big or little" o3516@stx)))) (o2fa5@syntax->datum o351c@e))) o351a@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3518@t))) (o2eb6@syntax-dispatch o3518@t '(_ any)))) o3516@stx))) (set! o2e90@identifier-syntax-macro (lambda (o3520@stx) ((lambda (o3522@t) ((lambda (o3524@ls/false) (if o3524@ls/false (apply (lambda (o3526@expr) (o2e6c@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax o3526@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax o3526@expr) '((syntax (e* ...)))))))))) o3524@ls/false) ((lambda (o3528@t) ((lambda (o352a@ls/false) (if (and o352a@ls/false (apply (lambda (o352c@id1 o352d@expr1 o352e@id2 o352f@expr2 o3530@expr3) (and (o2cab@id? o352c@id1) (o2cab@id? o352e@id2) (o2cab@id? o352f@expr2))) o352a@ls/false)) (apply (lambda (o3536@id1 o3537@expr1 o3538@id2 o3539@expr2 o353a@expr3) (o2e6c@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax o3537@expr1)) (list (list 'set! 'id o3539@expr2) (list 'syntax o353a@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons o3537@expr1 '(e* ...))))))))) o352a@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3528@t))) (o2eb6@syntax-dispatch o3528@t '(_ (any any) ((#(scheme-id set!) any any) any))))) o3522@t))) (o2eb6@syntax-dispatch o3522@t '(_ any)))) o3520@stx))) (set! o2e92@do-macro (lambda (o3540@stx) ((lambda (o3543@bind) (begin (set! o3543@bind (lambda (o355a@x) ((lambda (o355c@t) ((lambda (o355e@ls/false) (if o355e@ls/false (apply (lambda (o3560@x o3561@init) (list o3560@x o3561@init o3560@x)) o355e@ls/false) ((lambda (o3564@t) ((lambda (o3566@ls/false) (if o3566@ls/false (apply (lambda (o3568@x o3569@init o356a@step) (list o3568@x o3569@init o356a@step)) o3566@ls/false) ((lambda (o356e@t) ((lambda (o3570@ls/false) (if o3570@ls/false (apply (lambda () (o2f9f@syntax-violation '#f '"invalid binding" o3540@stx)) o3570@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o356e@t))) (o2eb6@syntax-dispatch o356e@t '_))) o3564@t))) (o2eb6@syntax-dispatch o3564@t '(any any any)))) o355c@t))) (o2eb6@syntax-dispatch o355c@t '(any any)))) o355a@x))) ((lambda (o3544@t) ((lambda (o3546@ls/false) (if o3546@ls/false (apply (lambda (o3548@binding* o3549@test o354a@expr* o354b@command*) ((lambda (o3550@t) ((lambda (o3552@ls/false) (if o3552@ls/false (apply (lambda (o3554@x* o3555@init* o3556@step*) (if (o2cb5@valid-bound-ids? o3554@x*) (o2e6c@bless (list 'letrec (list (list 'loop (list 'lambda o3554@x* (list 'if o3549@test (cons 'begin (cons '(if #f #f) o354a@expr*)) (cons 'begin (append o354b@command* (list (cons 'loop o3556@step*)))))))) (cons 'loop o3555@init*))) (o2f9f@syntax-violation '#f '"invalid bindings" o3540@stx))) o3552@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3550@t))) (o2eb6@syntax-dispatch o3550@t '#(each (any any any))))) (map o3543@bind o3548@binding*))) o3546@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3544@t))) (o2eb6@syntax-dispatch o3544@t '(_ each-any (any . each-any) . each-any)))) o3540@stx))) '#f))) (set! o2e94@let*-macro (lambda (o3572@stx) ((lambda (o3574@t) ((lambda (o3576@ls/false) (if (and o3576@ls/false (apply (lambda (o3578@lhs* o3579@rhs* o357a@b o357b@b*) (for-all o2cab@id? o3578@lhs*)) o3576@ls/false)) (apply (lambda (o3580@lhs* o3581@rhs* o3582@b o3583@b*) (o2e6c@bless ((letrec ((o3588@f (lambda (o358a@x*) (if (null? o358a@x*) (cons 'let (cons '() (cons o3582@b o3583@b*))) (list 'let (list (car o358a@x*)) (o3588@f (cdr o358a@x*))))))) o3588@f) (map list o3580@lhs* o3581@rhs*)))) o3576@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3574@t))) (o2eb6@syntax-dispatch o3574@t '(_ #(each (any any)) any . each-any)))) o3572@stx))) (set! o2e96@or-macro (lambda (o358c@stx) ((lambda (o358e@t) ((lambda (o3590@ls/false) (if o3590@ls/false (apply (lambda () '#f) o3590@ls/false) ((lambda (o3592@t) ((lambda (o3594@ls/false) (if o3594@ls/false (apply (lambda (o3596@e o3597@e*) (o2e6c@bless ((letrec ((o359a@f (lambda (o359c@e o359d@e*) (if (null? o359d@e*) (list 'begin '#f o359c@e) (list 'let (list (list 't o359c@e)) (list 'if 't 't (o359a@f (car o359d@e*) (cdr o359d@e*)))))))) o359a@f) o3596@e o3597@e*))) o3594@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3592@t))) (o2eb6@syntax-dispatch o3592@t '(_ any . each-any)))) o358e@t))) (o2eb6@syntax-dispatch o358e@t '(_)))) o358c@stx))) (set! o2e98@and-macro (lambda (o35a0@stx) ((lambda (o35a2@t) ((lambda (o35a4@ls/false) (if o35a4@ls/false (apply (lambda () '#t) o35a4@ls/false) ((lambda (o35a6@t) ((lambda (o35a8@ls/false) (if o35a8@ls/false (apply (lambda (o35aa@e o35ab@e*) (o2e6c@bless ((letrec ((o35ae@f (lambda (o35b0@e o35b1@e*) (if (null? o35b1@e*) (list 'begin '#f o35b0@e) (cons 'if (cons o35b0@e (cons (o35ae@f (car o35b1@e*) (cdr o35b1@e*)) '(#f)))))))) o35ae@f) o35aa@e o35ab@e*))) o35a8@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o35a6@t))) (o2eb6@syntax-dispatch o35a6@t '(_ any . each-any)))) o35a2@t))) (o2eb6@syntax-dispatch o35a2@t '(_)))) o35a0@stx))) (set! o2e9a@cond-macro (lambda (o35b4@stx) ((lambda (o35b6@t) ((lambda (o35b8@ls/false) (if o35b8@ls/false (apply (lambda (o35ba@cls o35bb@cls*) (o2e6c@bless ((letrec ((o35be@f (lambda (o35c0@cls o35c1@cls*) (if (null? o35c1@cls*) ((lambda (o35c4@t) ((lambda (o35c6@ls/false) (if o35c6@ls/false (apply (lambda (o35c8@e o35c9@e*) (cons 'begin (cons o35c8@e o35c9@e*))) o35c6@ls/false) ((lambda (o35cc@t) ((lambda (o35ce@ls/false) (if o35ce@ls/false (apply (lambda (o35d0@e o35d1@p) (list 'let (list (list 't o35d0@e)) (list 'if 't (cons o35d1@p '(t))))) o35ce@ls/false) ((lambda (o35d4@t) ((lambda (o35d6@ls/false) (if o35d6@ls/false (apply (lambda (o35d8@e) (cons 'or (cons o35d8@e '((if #f #f))))) o35d6@ls/false) ((lambda (o35da@t) ((lambda (o35dc@ls/false) (if o35dc@ls/false (apply (lambda (o35de@e o35df@e*) (list 'if o35de@e (cons 'begin o35df@e*))) o35dc@ls/false) ((lambda (o35e2@t) ((lambda (o35e4@ls/false) (if o35e4@ls/false (apply (lambda () (o2f9f@syntax-violation '#f '"invalid last clause" o35b4@stx)) o35e4@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o35e2@t))) (o2eb6@syntax-dispatch o35e2@t '_))) o35da@t))) (o2eb6@syntax-dispatch o35da@t '(any . each-any)))) o35d4@t))) (o2eb6@syntax-dispatch o35d4@t '(any)))) o35cc@t))) (o2eb6@syntax-dispatch o35cc@t '(any #(scheme-id =>) any)))) o35c4@t))) (o2eb6@syntax-dispatch o35c4@t '(#(scheme-id else) any . each-any)))) o35c0@cls) ((lambda (o35e6@t) ((lambda (o35e8@ls/false) (if o35e8@ls/false (apply (lambda (o35ea@e o35eb@e*) (o2f9f@syntax-violation '#f '"incorrect position of keyword else" o35b4@stx)) o35e8@ls/false) ((lambda (o35ee@t) ((lambda (o35f0@ls/false) (if o35f0@ls/false (apply (lambda (o35f2@e o35f3@p) (list 'let (list (list 't o35f2@e)) (list 'if 't (cons o35f3@p '(t)) (o35be@f (car o35c1@cls*) (cdr o35c1@cls*))))) o35f0@ls/false) ((lambda (o35f6@t) ((lambda (o35f8@ls/false) (if o35f8@ls/false (apply (lambda (o35fa@e) (list 'or o35fa@e (o35be@f (car o35c1@cls*) (cdr o35c1@cls*)))) o35f8@ls/false) ((lambda (o35fc@t) ((lambda (o35fe@ls/false) (if o35fe@ls/false (apply (lambda (o3600@e o3601@e*) (list 'if o3600@e (cons 'begin o3601@e*) (o35be@f (car o35c1@cls*) (cdr o35c1@cls*)))) o35fe@ls/false) ((lambda (o3604@t) ((lambda (o3606@ls/false) (if o3606@ls/false (apply (lambda () (o2f9f@syntax-violation '#f '"invalid last clause" o35b4@stx)) o3606@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3604@t))) (o2eb6@syntax-dispatch o3604@t '_))) o35fc@t))) (o2eb6@syntax-dispatch o35fc@t '(any . each-any)))) o35f6@t))) (o2eb6@syntax-dispatch o35f6@t '(any)))) o35ee@t))) (o2eb6@syntax-dispatch o35ee@t '(any #(scheme-id =>) any)))) o35e6@t))) (o2eb6@syntax-dispatch o35e6@t '(#(scheme-id else) any . each-any)))) o35c0@cls))))) o35be@f) o35ba@cls o35bb@cls*))) o35b8@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o35b6@t))) (o2eb6@syntax-dispatch o35b6@t '(_ any . each-any)))) o35b4@stx))) (set! o2e9c@do-include (lambda (o3608@stx o3609@id o360a@filename) ((lambda (o360e@filename) (begin (if (not (and (string? o360e@filename) (o2cab@id? o3609@id))) (o2f9f@syntax-violation '#f '"invalid syntax" o3608@stx) (void)) (cons (o2e6c@bless 'begin) (with-input-from-file o360e@filename (lambda () ((letrec ((o3610@f (lambda (o3612@ls) ((lambda (o3614@x) (if (eof-object? o3614@x) (reverse o3612@ls) (o3610@f (cons (o2c89@datum->stx o3609@id o3614@x) o3612@ls)))) (o2848@o2765@read-annotated))))) o3610@f) '())))))) (o2cc1@stx->datum o360a@filename)))) (set! o2e9e@include-macro (lambda (o3616@e) ((lambda (o3618@t) ((lambda (o361a@ls/false) (if o361a@ls/false (apply (lambda (o361c@id o361d@filename) (o2e9c@do-include o3616@e o361c@id o361d@filename)) o361a@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3618@t))) (o2eb6@syntax-dispatch o3618@t '(any any)))) o3616@e))) (set! o2ea0@include-into-macro (lambda (o3620@e) ((lambda (o3622@t) ((lambda (o3624@ls/false) (if o3624@ls/false (apply (lambda (o3626@id o3627@filename) (o2e9c@do-include o3620@e o3626@id o3627@filename)) o3624@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3622@t))) (o2eb6@syntax-dispatch o3622@t '(_ any any)))) o3620@e))) (set! o2ea2@syntax-rules-macro (lambda (o362a@e) ((lambda (o362c@t) ((lambda (o362e@ls/false) (if o362e@ls/false (apply (lambda (o3630@lits o3631@pat* o3632@tmp*) (begin (o2ebc@verify-literals o3630@lits o362a@e) (o2e6c@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons o3630@lits (map (lambda (o3636@pat o3637@tmp) ((lambda (o363a@t) ((lambda (o363c@ls/false) (if o363c@ls/false (apply (lambda (o363e@rest) (list (cons 'g o363e@rest) (list 'syntax o3637@tmp))) o363c@ls/false) ((lambda (o3640@t) ((lambda (o3642@ls/false) (if o3642@ls/false (apply (lambda () (o2f9f@syntax-violation '#f '"invalid syntax-rules pattern" o362a@e o3636@pat)) o3642@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3640@t))) (o2eb6@syntax-dispatch o3640@t '_))) o363a@t))) (o2eb6@syntax-dispatch o363a@t '(_ . any)))) o3636@pat)) o3631@pat* o3632@tmp*)))))))) o362e@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o362c@t))) (o2eb6@syntax-dispatch o362c@t '(_ each-any . #(each (any any)))))) o362a@e))) (set! o2ea4@quasiquote-macro ((lambda () ((lambda (o3645@datum o3661@quasicons* o3663@quasicons o3665@quasiappend o3667@quasivector o3669@vquasi o366b@quasi) (begin (set! o3645@datum (lambda (o3746@x) (list (o2e40@scheme-stx 'quote) (o2c93@mkstx o3746@x '() '() '())))) (set! o3661@quasicons* (lambda (o373e@x o373f@y) ((letrec ((o3742@f (lambda (o3744@x) (if (null? o3744@x) o373f@y (o3663@quasicons (car o3744@x) (o3742@f (cdr o3744@x))))))) o3742@f) o373e@x))) (set! o3663@quasicons (lambda (o3718@x o3719@y) ((lambda (o371c@t) ((lambda (o371e@ls/false) (if o371e@ls/false (apply (lambda (o3720@dy) ((lambda (o3722@t) ((lambda (o3724@ls/false) (if o3724@ls/false (apply (lambda (o3726@dx) (list (o2e40@scheme-stx 'quote) (cons o3726@dx o3720@dy))) o3724@ls/false) ((lambda (o3728@t) ((lambda (o372a@ls/false) (if o372a@ls/false (apply (lambda () ((lambda (o372c@t) ((lambda (o372e@ls/false) (if o372e@ls/false (apply (lambda () (list (o2e40@scheme-stx 'list) o3718@x)) o372e@ls/false) ((lambda (o3730@t) ((lambda (o3732@ls/false) (if o3732@ls/false (apply (lambda () (list (o2e40@scheme-stx 'cons) o3718@x o3719@y)) o3732@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3730@t))) (o2eb6@syntax-dispatch o3730@t '_))) o372c@t))) (o2eb6@syntax-dispatch o372c@t '()))) o3720@dy)) o372a@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3728@t))) (o2eb6@syntax-dispatch o3728@t '_))) o3722@t))) (o2eb6@syntax-dispatch o3722@t '(#(scheme-id quote) any)))) o3718@x)) o371e@ls/false) ((lambda (o3734@t) ((lambda (o3736@ls/false) (if o3736@ls/false (apply (lambda (o3738@stuff) (cons* (o2e40@scheme-stx 'list) o3718@x o3738@stuff)) o3736@ls/false) ((lambda (o373a@t) ((lambda (o373c@ls/false) (if o373c@ls/false (apply (lambda () (list (o2e40@scheme-stx 'cons) o3718@x o3719@y)) o373c@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o373a@t))) (o2eb6@syntax-dispatch o373a@t '_))) o3734@t))) (o2eb6@syntax-dispatch o3734@t '(#(scheme-id list) . each-any)))) o371c@t))) (o2eb6@syntax-dispatch o371c@t '(#(scheme-id quote) any)))) o3719@y))) (set! o3665@quasiappend (lambda (o36fe@x o36ff@y) ((lambda (o3702@ls) (if (null? o3702@ls) (list (o2e40@scheme-stx 'quote) '()) (if (null? (cdr o3702@ls)) (car o3702@ls) (cons* (o2e40@scheme-stx 'append) o3702@ls)))) ((letrec ((o3704@f (lambda (o3706@x) (if (null? o3706@x) ((lambda (o3708@t) ((lambda (o370a@ls/false) (if o370a@ls/false (apply (lambda () '()) o370a@ls/false) ((lambda (o370c@t) ((lambda (o370e@ls/false) (if o370e@ls/false (apply (lambda () (list o36ff@y)) o370e@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o370c@t))) (o2eb6@syntax-dispatch o370c@t '_))) o3708@t))) (o2eb6@syntax-dispatch o3708@t '(#(scheme-id quote) ())))) o36ff@y) ((lambda (o3710@t) ((lambda (o3712@ls/false) (if o3712@ls/false (apply (lambda () (o3704@f (cdr o3706@x))) o3712@ls/false) ((lambda (o3714@t) ((lambda (o3716@ls/false) (if o3716@ls/false (apply (lambda () (cons (car o3706@x) (o3704@f (cdr o3706@x)))) o3716@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3714@t))) (o2eb6@syntax-dispatch o3714@t '_))) o3710@t))) (o2eb6@syntax-dispatch o3710@t '(#(scheme-id quote) ())))) (car o3706@x)))))) o3704@f) o36fe@x)))) (set! o3667@quasivector (lambda (o36cc@x) ((lambda (o36ce@pat-x) ((lambda (o36d0@t) ((lambda (o36d2@ls/false) (if o36d2@ls/false (apply (lambda (o36d4@x*) (list (o2e40@scheme-stx 'quote) (list->vector o36d4@x*))) o36d2@ls/false) ((lambda (o36d6@t) ((lambda (o36d8@ls/false) (if o36d8@ls/false (apply (lambda () ((letrec ((o36da@f (lambda (o36dc@x o36dd@k) ((lambda (o36e0@t) ((lambda (o36e2@ls/false) (if o36e2@ls/false (apply (lambda (o36e4@x*) (o36dd@k (map (lambda (o36e6@x) (list (o2e40@scheme-stx 'quote) o36e6@x)) o36e4@x*))) o36e2@ls/false) ((lambda (o36e8@t) ((lambda (o36ea@ls/false) (if o36ea@ls/false (apply (lambda (o36ec@x*) (o36dd@k o36ec@x*)) o36ea@ls/false) ((lambda (o36ee@t) ((lambda (o36f0@ls/false) (if o36f0@ls/false (apply (lambda (o36f2@x o36f3@y) (o36da@f o36f3@y (lambda (o36f6@ls) (o36dd@k (cons o36f2@x o36f6@ls))))) o36f0@ls/false) ((lambda (o36f8@t) ((lambda (o36fa@ls/false) (if o36fa@ls/false (apply (lambda () (list (o2e40@scheme-stx 'list->vector) o36ce@pat-x)) o36fa@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o36f8@t))) (o2eb6@syntax-dispatch o36f8@t '_))) o36ee@t))) (o2eb6@syntax-dispatch o36ee@t '(#(scheme-id cons) any any)))) o36e8@t))) (o2eb6@syntax-dispatch o36e8@t '(#(scheme-id list) . each-any)))) o36e0@t))) (o2eb6@syntax-dispatch o36e0@t '(#(scheme-id quote) each-any)))) o36dc@x)))) o36da@f) o36cc@x (lambda (o36fc@ls) (cons* (o2e40@scheme-stx 'vector) o36fc@ls)))) o36d8@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o36d6@t))) (o2eb6@syntax-dispatch o36d6@t '_))) o36d0@t))) (o2eb6@syntax-dispatch o36d0@t '(#(scheme-id quote) each-any)))) o36ce@pat-x)) o36cc@x))) (set! o3669@vquasi (lambda (o36aa@p o36ab@lev) ((lambda (o36ae@t) ((lambda (o36b0@ls/false) (if o36b0@ls/false (apply (lambda (o36b2@p o36b3@q) ((lambda (o36b6@t) ((lambda (o36b8@ls/false) (if o36b8@ls/false (apply (lambda (o36ba@p) (if (= o36ab@lev '0) (o3661@quasicons* o36ba@p (o3669@vquasi o36b3@q o36ab@lev)) (o3663@quasicons (o3663@quasicons (o3645@datum 'unquote) (o366b@quasi o36ba@p (- o36ab@lev '1))) (o3669@vquasi o36b3@q o36ab@lev)))) o36b8@ls/false) ((lambda (o36bc@t) ((lambda (o36be@ls/false) (if o36be@ls/false (apply (lambda (o36c0@p) (if (= o36ab@lev '0) (o3665@quasiappend o36c0@p (o3669@vquasi o36b3@q o36ab@lev)) (o3663@quasicons (o3663@quasicons (o3645@datum 'unquote-splicing) (o366b@quasi o36c0@p (- o36ab@lev '1))) (o3669@vquasi o36b3@q o36ab@lev)))) o36be@ls/false) ((lambda (o36c2@t) ((lambda (o36c4@ls/false) (if o36c4@ls/false (apply (lambda (o36c6@p) (o3663@quasicons (o366b@quasi o36c6@p o36ab@lev) (o3669@vquasi o36b3@q o36ab@lev))) o36c4@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o36c2@t))) (o2eb6@syntax-dispatch o36c2@t 'any))) o36bc@t))) (o2eb6@syntax-dispatch o36bc@t '(#(scheme-id unquote-splicing) . each-any)))) o36b6@t))) (o2eb6@syntax-dispatch o36b6@t '(#(scheme-id unquote) . each-any)))) o36b2@p)) o36b0@ls/false) ((lambda (o36c8@t) ((lambda (o36ca@ls/false) (if o36ca@ls/false (apply (lambda () (list (o2e40@scheme-stx 'quote) '())) o36ca@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o36c8@t))) (o2eb6@syntax-dispatch o36c8@t '()))) o36ae@t))) (o2eb6@syntax-dispatch o36ae@t '(any . any)))) o36aa@p))) (set! o366b@quasi (lambda (o3674@p o3675@lev) ((lambda (o3678@t) ((lambda (o367a@ls/false) (if o367a@ls/false (apply (lambda (o367c@p) (if (= o3675@lev '0) o367c@p (o3663@quasicons (o3645@datum 'unquote) (o366b@quasi (list o367c@p) (- o3675@lev '1))))) o367a@ls/false) ((lambda (o367e@t) ((lambda (o3680@ls/false) (if o3680@ls/false (apply (lambda (o3682@p o3683@q) (if (= o3675@lev '0) (o3661@quasicons* o3682@p (o366b@quasi o3683@q o3675@lev)) (o3663@quasicons (o3663@quasicons (o3645@datum 'unquote) (o366b@quasi o3682@p (- o3675@lev '1))) (o366b@quasi o3683@q o3675@lev)))) o3680@ls/false) ((lambda (o3686@t) ((lambda (o3688@ls/false) (if o3688@ls/false (apply (lambda (o368a@p o368b@q) (if (= o3675@lev '0) (o3665@quasiappend o368a@p (o366b@quasi o368b@q o3675@lev)) (o3663@quasicons (o3663@quasicons (o3645@datum 'unquote-splicing) (o366b@quasi o368a@p (- o3675@lev '1))) (o366b@quasi o368b@q o3675@lev)))) o3688@ls/false) ((lambda (o368e@t) ((lambda (o3690@ls/false) (if o3690@ls/false (apply (lambda (o3692@p) (o3663@quasicons (o3645@datum 'quasiquote) (o366b@quasi (list o3692@p) (+ o3675@lev '1)))) o3690@ls/false) ((lambda (o3694@t) ((lambda (o3696@ls/false) (if o3696@ls/false (apply (lambda (o3698@p o3699@q) (o3663@quasicons (o366b@quasi o3698@p o3675@lev) (o366b@quasi o3699@q o3675@lev))) o3696@ls/false) ((lambda (o369c@t) ((lambda (o369e@ls/false) (if (and o369e@ls/false (apply (lambda (o36a0@x) (not (o2c73@stx? o36a0@x))) o369e@ls/false)) (apply (lambda (o36a2@x) (o3667@quasivector (o3669@vquasi o36a2@x o3675@lev))) o369e@ls/false) ((lambda (o36a4@t) ((lambda (o36a6@ls/false) (if o36a6@ls/false (apply (lambda (o36a8@p) (list (o2e40@scheme-stx 'quote) o36a8@p)) o36a6@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o36a4@t))) (o2eb6@syntax-dispatch o36a4@t 'any))) o369c@t))) (o2eb6@syntax-dispatch o369c@t '#(vector each-any)))) o3694@t))) (o2eb6@syntax-dispatch o3694@t '(any . any)))) o368e@t))) (o2eb6@syntax-dispatch o368e@t '(#(scheme-id quasiquote) any)))) o3686@t))) (o2eb6@syntax-dispatch o3686@t '((#(scheme-id unquote-splicing) . each-any) . any)))) o367e@t))) (o2eb6@syntax-dispatch o367e@t '((#(scheme-id unquote) . each-any) . any)))) o3678@t))) (o2eb6@syntax-dispatch o3678@t '(#(scheme-id unquote) any)))) o3674@p))) (lambda (o366c@x) ((lambda (o366e@t) ((lambda (o3670@ls/false) (if o3670@ls/false (apply (lambda (o3672@e) (o366b@quasi o3672@e '0)) o3670@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o366e@t))) (o2eb6@syntax-dispatch o366e@t '(_ any)))) o366c@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! o2ea6@quasisyntax-macro ((lambda () ((lambda (o3749@quasi) (begin (set! o3749@quasi (lambda (o3764@p o3765@lev) ((lambda (o3768@t) ((lambda (o376a@ls/false) (if o376a@ls/false (apply (lambda (o376c@p) (if (= o3765@lev '0) ((lambda (o376e@g) (values (list o376e@g) (list o376c@p) o376e@g)) (gensym)) (call-with-values (lambda () (o3749@quasi o376c@p (- o3765@lev '1))) (lambda (o3776@o3771 o3777@o3773 o3778@o3775) ((lambda (o377c@p o377d@rhs* o377e@lhs*) (values o377e@lhs* o377d@rhs* (list 'unsyntax o377c@p))) o3778@o3775 o3777@o3773 o3776@o3771))))) o376a@ls/false) ((lambda (o3782@t) ((lambda (o3784@ls/false) (if (and o3784@ls/false (apply (lambda () (= o3765@lev '0)) o3784@ls/false)) (apply (lambda () (o2f9f@syntax-violation '#f '"incorrect use of unsyntax" o3764@p)) o3784@ls/false) ((lambda (o3786@t) ((lambda (o3788@ls/false) (if o3788@ls/false (apply (lambda (o378a@p* o378b@q) (call-with-values (lambda () (o3749@quasi o378b@q o3765@lev)) (lambda (o3794@o378f o3795@o3791 o3796@o3793) ((lambda (o379a@q o379b@rhs* o379c@lhs*) (if (= o3765@lev '0) ((lambda (o37a0@g*) (values (append o37a0@g* o379c@lhs*) (append o378a@p* o379b@rhs*) (append o37a0@g* o379a@q))) (map (lambda (o37a2@x) (gensym)) o378a@p*)) (call-with-values (lambda () (o3749@quasi o378a@p* (- o3765@lev '1))) (lambda (o37aa@o37a5 o37ab@o37a7 o37ac@o37a9) ((lambda (o37b0@p* o37b1@rhs2* o37b2@lhs2*) (values (append o37b2@lhs2* o379c@lhs*) (append o37b1@rhs2* o379b@rhs*) (cons (cons 'unsyntax o37b0@p*) o379a@q))) o37ac@o37a9 o37ab@o37a7 o37aa@o37a5))))) o3796@o3793 o3795@o3791 o3794@o378f)))) o3788@ls/false) ((lambda (o37b6@t) ((lambda (o37b8@ls/false) (if o37b8@ls/false (apply (lambda (o37ba@p* o37bb@q) (call-with-values (lambda () (o3749@quasi o37bb@q o3765@lev)) (lambda (o37c4@o37bf o37c5@o37c1 o37c6@o37c3) ((lambda (o37ca@q o37cb@rhs* o37cc@lhs*) (if (= o3765@lev '0) ((lambda (o37d0@g*) (values (append (map (lambda (o37d2@g) (cons o37d2@g '(...))) o37d0@g*) o37cc@lhs*) (append o37ba@p* o37cb@rhs*) (append (apply append (map (lambda (o37d4@g) (cons o37d4@g '(...))) o37d0@g*)) o37ca@q))) (map (lambda (o37d6@x) (gensym)) o37ba@p*)) (call-with-values (lambda () (o3749@quasi o37ba@p* (- o3765@lev '1))) (lambda (o37de@o37d9 o37df@o37db o37e0@o37dd) ((lambda (o37e4@p* o37e5@rhs2* o37e6@lhs2*) (values (append o37e6@lhs2* o37cc@lhs*) (append o37e5@rhs2* o37cb@rhs*) (cons (cons 'unsyntax-splicing o37e4@p*) o37ca@q))) o37e0@o37dd o37df@o37db o37de@o37d9))))) o37c6@o37c3 o37c5@o37c1 o37c4@o37bf)))) o37b8@ls/false) ((lambda (o37ea@t) ((lambda (o37ec@ls/false) (if (and o37ec@ls/false (apply (lambda () (= o3765@lev '0)) o37ec@ls/false)) (apply (lambda () (o2f9f@syntax-violation '#f '"incorrect use of unsyntax-splicing" o3764@p)) o37ec@ls/false) ((lambda (o37ee@t) ((lambda (o37f0@ls/false) (if o37f0@ls/false (apply (lambda (o37f2@p) (call-with-values (lambda () (o3749@quasi o37f2@p (+ o3765@lev '1))) (lambda (o37fa@o37f5 o37fb@o37f7 o37fc@o37f9) ((lambda (o3800@p o3801@rhs* o3802@lhs*) (values o3802@lhs* o3801@rhs* (list 'quasisyntax o3800@p))) o37fc@o37f9 o37fb@o37f7 o37fa@o37f5)))) o37f0@ls/false) ((lambda (o3806@t) ((lambda (o3808@ls/false) (if o3808@ls/false (apply (lambda (o380a@p o380b@q) (call-with-values (lambda () (o3749@quasi o380a@p o3765@lev)) (lambda (o381a@o380f o381b@o3811 o381c@o3813) (call-with-values (lambda () (o3749@quasi o380b@q o3765@lev)) (lambda (o3820@o3815 o3821@o3817 o3822@o3819) ((lambda (o3826@q o3827@rhs2* o3828@lhs2* o3829@p o382a@rhs* o382b@lhs*) (values (append o3828@lhs2* o382b@lhs*) (append o3827@rhs2* o382a@rhs*) (cons o3829@p o3826@q))) o3822@o3819 o3821@o3817 o3820@o3815 o381c@o3813 o381b@o3811 o381a@o380f)))))) o3808@ls/false) ((lambda (o3832@t) ((lambda (o3834@ls/false) (if o3834@ls/false (apply (lambda (o3836@x*) (call-with-values (lambda () (o3749@quasi o3836@x* o3765@lev)) (lambda (o383e@o3839 o383f@o383b o3840@o383d) ((lambda (o3844@x* o3845@rhs* o3846@lhs*) (values o3846@lhs* o3845@rhs* (list->vector o3844@x*))) o3840@o383d o383f@o383b o383e@o3839)))) o3834@ls/false) ((lambda (o384a@t) ((lambda (o384c@ls/false) (if o384c@ls/false (apply (lambda () (values '() '() o3764@p)) o384c@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o384a@t))) (o2eb6@syntax-dispatch o384a@t '_))) o3832@t))) (o2eb6@syntax-dispatch o3832@t '#(vector each-any)))) o3806@t))) (o2eb6@syntax-dispatch o3806@t '(any . any)))) o37ee@t))) (o2eb6@syntax-dispatch o37ee@t '(#(scheme-id quasisyntax) any)))) o37ea@t))) (o2eb6@syntax-dispatch o37ea@t '#(scheme-id unsyntax-splicing)))) o37b6@t))) (o2eb6@syntax-dispatch o37b6@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) o3786@t))) (o2eb6@syntax-dispatch o3786@t '((#(scheme-id unsyntax) . each-any) . any)))) o3782@t))) (o2eb6@syntax-dispatch o3782@t '#(scheme-id unsyntax)))) o3768@t))) (o2eb6@syntax-dispatch o3768@t '(#(scheme-id unsyntax) any)))) o3764@p))) (lambda (o374a@x) ((lambda (o374c@t) ((lambda (o374e@ls/false) (if o374e@ls/false (apply (lambda (o3750@e) (call-with-values (lambda () (o3749@quasi o3750@e '0)) (lambda (o3758@o3753 o3759@o3755 o375a@o3757) ((lambda (o375e@v o375f@rhs* o3760@lhs*) (o2e6c@bless (list 'syntax-case (cons 'list o375f@rhs*) '() (list o3760@lhs* (list 'syntax o375e@v))))) o375a@o3757 o3759@o3755 o3758@o3753)))) o374e@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o374c@t))) (o2eb6@syntax-dispatch o374c@t '(_ any)))) o374a@x)))) '#f)))) (set! o2ea8@define-struct-macro (lambda (o384e@stx) (o2f9f@syntax-violation '#f '"define-struct not supported" o384e@stx))) (set! o2eaa@define-record-type-macro (lambda (o3850@x) ((lambda (o3853@id o3855@get-record-name o3857@get-record-constructor-name o3859@get-record-predicate-name o385b@get-clause o385d@foo-rtd-code o385f@parent-rtd-code o3861@parent-rcd-code o3863@foo-rcd-code o3865@get-protocol-code o3867@get-fields o3869@get-mutator-indices o386b@get-mutators o386d@get-accessors o386f@enumerate o3871@do-define-record o3873@verify-clauses) (begin (set! o3853@id (lambda (o3a46@ctxt . o3a48@str*) (o2fa3@datum->syntax o3a46@ctxt (string->symbol (apply string-append (map (lambda (o3a4a@x) (if (symbol? o3a4a@x) (symbol->string o3a4a@x) (if (string? o3a4a@x) o3a4a@x (assertion-violation 'define-record-type '"BUG")))) o3a48@str*)))))) (set! o3855@get-record-name (lambda (o3a34@spec) ((lambda (o3a36@t) ((lambda (o3a38@ls/false) (if o3a38@ls/false (apply (lambda (o3a3a@foo o3a3b@make-foo o3a3c@foo?) o3a3a@foo) o3a38@ls/false) ((lambda (o3a40@t) ((lambda (o3a42@ls/false) (if o3a42@ls/false (apply (lambda (o3a44@foo) o3a44@foo) o3a42@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3a40@t))) (o2eb6@syntax-dispatch o3a40@t 'any))) o3a36@t))) (o2eb6@syntax-dispatch o3a36@t '(any any any)))) o3a34@spec))) (set! o3857@get-record-constructor-name (lambda (o3a20@spec) ((lambda (o3a22@t) ((lambda (o3a24@ls/false) (if o3a24@ls/false (apply (lambda (o3a26@foo o3a27@make-foo o3a28@foo?) o3a27@make-foo) o3a24@ls/false) ((lambda (o3a2c@t) ((lambda (o3a2e@ls/false) (if (and o3a2e@ls/false (apply (lambda (o3a30@foo) (o2cab@id? o3a30@foo)) o3a2e@ls/false)) (apply (lambda (o3a32@foo) (o3853@id o3a32@foo '"make-" (o2cc1@stx->datum o3a32@foo))) o3a2e@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3a2c@t))) (o2eb6@syntax-dispatch o3a2c@t 'any))) o3a22@t))) (o2eb6@syntax-dispatch o3a22@t '(any any any)))) o3a20@spec))) (set! o3859@get-record-predicate-name (lambda (o3a0c@spec) ((lambda (o3a0e@t) ((lambda (o3a10@ls/false) (if o3a10@ls/false (apply (lambda (o3a12@foo o3a13@make-foo o3a14@foo?) o3a14@foo?) o3a10@ls/false) ((lambda (o3a18@t) ((lambda (o3a1a@ls/false) (if (and o3a1a@ls/false (apply (lambda (o3a1c@foo) (o2cab@id? o3a1c@foo)) o3a1a@ls/false)) (apply (lambda (o3a1e@foo) (o3853@id o3a1e@foo (o2cc1@stx->datum o3a1e@foo) '"?")) o3a1a@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3a18@t))) (o2eb6@syntax-dispatch o3a18@t 'any))) o3a0e@t))) (o2eb6@syntax-dispatch o3a0e@t '(any any any)))) o3a0c@spec))) (set! o385b@get-clause (lambda (o39fa@id o39fb@ls) ((lambda (o39fe@t) ((lambda (o3a00@ls/false) (if o3a00@ls/false (apply (lambda () '#f) o3a00@ls/false) ((lambda (o3a02@t) ((lambda (o3a04@ls/false) (if o3a04@ls/false (apply (lambda (o3a06@x o3a07@rest o3a08@ls) (if (o2cb3@free-id=? (o2e6c@bless o39fa@id) o3a06@x) (cons o3a06@x o3a07@rest) (o385b@get-clause o39fa@id o3a08@ls))) o3a04@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3a02@t))) (o2eb6@syntax-dispatch o3a02@t '((any . any) . any)))) o39fe@t))) (o2eb6@syntax-dispatch o39fe@t '()))) o39fb@ls))) (set! o385d@foo-rtd-code (lambda (o39a8@name o39a9@clause* o39aa@parent-rtd-code) ((lambda (o39af@convert-field-spec*) (begin (set! o39af@convert-field-spec* (lambda (o39e0@ls) (list->vector (map (lambda (o39e2@x) ((lambda (o39e4@t) ((lambda (o39e6@ls/false) (if o39e6@ls/false (apply (lambda (o39e8@name o39e9@rest) (list 'mutable o39e8@name)) o39e6@ls/false) ((lambda (o39ec@t) ((lambda (o39ee@ls/false) (if o39ee@ls/false (apply (lambda (o39f0@name o39f1@rest) (list 'immutable o39f0@name)) o39ee@ls/false) ((lambda (o39f4@t) ((lambda (o39f6@ls/false) (if o39f6@ls/false (apply (lambda (o39f8@name) (list 'immutable o39f8@name)) o39f6@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o39f4@t))) (o2eb6@syntax-dispatch o39f4@t 'any))) o39ec@t))) (o2eb6@syntax-dispatch o39ec@t '(#(scheme-id immutable) any . any)))) o39e4@t))) (o2eb6@syntax-dispatch o39e4@t '(#(scheme-id mutable) any . any)))) o39e2@x)) o39e0@ls)))) ((lambda (o39b0@uid-code o39b1@sealed? o39b2@opaque? o39b3@fields) (o2e6c@bless (list 'make-record-type-descriptor (list 'quote o39a8@name) o39aa@parent-rtd-code o39b0@uid-code o39b1@sealed? o39b2@opaque? o39b3@fields))) ((lambda (o39b8@t) ((lambda (o39ba@ls/false) (if o39ba@ls/false (apply (lambda () (list 'quote (gensym))) o39ba@ls/false) ((lambda (o39bc@t) ((lambda (o39be@ls/false) (if o39be@ls/false (apply (lambda (o39c0@uid) (list 'quote o39c0@uid)) o39be@ls/false) ((lambda (o39c2@t) ((lambda (o39c4@ls/false) (if o39c4@ls/false (apply (lambda () '#f) o39c4@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o39c2@t))) (o2eb6@syntax-dispatch o39c2@t '_))) o39bc@t))) (o2eb6@syntax-dispatch o39bc@t '(_ any)))) o39b8@t))) (o2eb6@syntax-dispatch o39b8@t '(_)))) (o385b@get-clause 'nongenerative o39a9@clause*)) ((lambda (o39c6@t) ((lambda (o39c8@ls/false) (if o39c8@ls/false (apply (lambda () '#t) o39c8@ls/false) ((lambda (o39ca@t) ((lambda (o39cc@ls/false) (if o39cc@ls/false (apply (lambda () '#f) o39cc@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o39ca@t))) (o2eb6@syntax-dispatch o39ca@t '_))) o39c6@t))) (o2eb6@syntax-dispatch o39c6@t '(_ #(atom #t))))) (o385b@get-clause 'sealed o39a9@clause*)) ((lambda (o39ce@t) ((lambda (o39d0@ls/false) (if o39d0@ls/false (apply (lambda () '#t) o39d0@ls/false) ((lambda (o39d2@t) ((lambda (o39d4@ls/false) (if o39d4@ls/false (apply (lambda () '#f) o39d4@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o39d2@t))) (o2eb6@syntax-dispatch o39d2@t '_))) o39ce@t))) (o2eb6@syntax-dispatch o39ce@t '(_ #(atom #t))))) (o385b@get-clause 'opaque o39a9@clause*)) ((lambda (o39d6@t) ((lambda (o39d8@ls/false) (if o39d8@ls/false (apply (lambda (o39da@field-spec*) (list 'quote (o39af@convert-field-spec* o39da@field-spec*))) o39d8@ls/false) ((lambda (o39dc@t) ((lambda (o39de@ls/false) (if o39de@ls/false (apply (lambda () ''#()) o39de@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o39dc@t))) (o2eb6@syntax-dispatch o39dc@t '_))) o39d6@t))) (o2eb6@syntax-dispatch o39d6@t '(_ . each-any)))) (o385b@get-clause 'fields o39a9@clause*))))) '#f))) (set! o385f@parent-rtd-code (lambda (o3990@clause*) ((lambda (o3992@t) ((lambda (o3994@ls/false) (if o3994@ls/false (apply (lambda (o3996@name) (list 'record-type-descriptor o3996@name)) o3994@ls/false) ((lambda (o3998@t) ((lambda (o399a@ls/false) (if o399a@ls/false (apply (lambda () ((lambda (o399c@t) ((lambda (o399e@ls/false) (if o399e@ls/false (apply (lambda (o39a0@rtd o39a1@rcd) o39a0@rtd) o399e@ls/false) ((lambda (o39a4@t) ((lambda (o39a6@ls/false) (if o39a6@ls/false (apply (lambda () '#f) o39a6@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o39a4@t))) (o2eb6@syntax-dispatch o39a4@t '#(atom #f)))) o399c@t))) (o2eb6@syntax-dispatch o399c@t '(_ any any)))) (o385b@get-clause 'parent-rtd o3990@clause*))) o399a@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3998@t))) (o2eb6@syntax-dispatch o3998@t '#(atom #f)))) o3992@t))) (o2eb6@syntax-dispatch o3992@t '(_ any)))) (o385b@get-clause 'parent o3990@clause*)))) (set! o3861@parent-rcd-code (lambda (o3978@clause*) ((lambda (o397a@t) ((lambda (o397c@ls/false) (if o397c@ls/false (apply (lambda (o397e@name) (list 'record-constructor-descriptor o397e@name)) o397c@ls/false) ((lambda (o3980@t) ((lambda (o3982@ls/false) (if o3982@ls/false (apply (lambda () ((lambda (o3984@t) ((lambda (o3986@ls/false) (if o3986@ls/false (apply (lambda (o3988@rtd o3989@rcd) o3989@rcd) o3986@ls/false) ((lambda (o398c@t) ((lambda (o398e@ls/false) (if o398e@ls/false (apply (lambda () '#f) o398e@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o398c@t))) (o2eb6@syntax-dispatch o398c@t '#(atom #f)))) o3984@t))) (o2eb6@syntax-dispatch o3984@t '(_ any any)))) (o385b@get-clause 'parent-rtd o3978@clause*))) o3982@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3980@t))) (o2eb6@syntax-dispatch o3980@t '#(atom #f)))) o397a@t))) (o2eb6@syntax-dispatch o397a@t '(_ any)))) (o385b@get-clause 'parent o3978@clause*)))) (set! o3863@foo-rcd-code (lambda (o3970@clause* o3971@foo-rtd o3972@protocol o3973@parent-rcd-code) (list 'make-record-constructor-descriptor o3971@foo-rtd o3973@parent-rcd-code o3972@protocol))) (set! o3865@get-protocol-code (lambda (o3964@clause*) ((lambda (o3966@t) ((lambda (o3968@ls/false) (if o3968@ls/false (apply (lambda (o396a@expr) o396a@expr) o3968@ls/false) ((lambda (o396c@t) ((lambda (o396e@ls/false) (if o396e@ls/false (apply (lambda () '#f) o396e@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o396c@t))) (o2eb6@syntax-dispatch o396c@t '_))) o3966@t))) (o2eb6@syntax-dispatch o3966@t '(_ any)))) (o385b@get-clause 'protocol o3964@clause*)))) (set! o3867@get-fields (lambda (o3952@clause*) ((lambda (o3954@t) ((lambda (o3956@ls/false) (if o3956@ls/false (apply (lambda () '()) o3956@ls/false) ((lambda (o3958@t) ((lambda (o395a@ls/false) (if o395a@ls/false (apply (lambda (o395c@f*) o395c@f*) o395a@ls/false) ((lambda (o395e@t) ((lambda (o3960@ls/false) (if o3960@ls/false (apply (lambda (o3962@rest) (o3867@get-fields o3962@rest)) o3960@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o395e@t))) (o2eb6@syntax-dispatch o395e@t '(_ . any)))) o3958@t))) (o2eb6@syntax-dispatch o3958@t '((#(scheme-id fields) . each-any) . _)))) o3954@t))) (o2eb6@syntax-dispatch o3954@t '()))) o3952@clause*))) (set! o3869@get-mutator-indices (lambda (o393a@fields) ((letrec ((o393c@f (lambda (o393e@fields o393f@i) ((lambda (o3942@t) ((lambda (o3944@ls/false) (if o3944@ls/false (apply (lambda () '()) o3944@ls/false) ((lambda (o3946@t) ((lambda (o3948@ls/false) (if o3948@ls/false (apply (lambda (o394a@rest) (cons o393f@i (o393c@f o394a@rest (+ o393f@i '1)))) o3948@ls/false) ((lambda (o394c@t) ((lambda (o394e@ls/false) (if o394e@ls/false (apply (lambda (o3950@rest) (o393c@f o3950@rest (+ o393f@i '1))) o394e@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o394c@t))) (o2eb6@syntax-dispatch o394c@t '(_ . any)))) o3946@t))) (o2eb6@syntax-dispatch o3946@t '((#(scheme-id mutable) . _) . any)))) o3942@t))) (o2eb6@syntax-dispatch o3942@t '()))) o393e@fields)))) o393c@f) o393a@fields '0))) (set! o386b@get-mutators (lambda (o3910@foo o3911@fields) ((lambda (o3915@gen-name) (begin (set! o3915@gen-name (lambda (o3938@x) (o2fa3@datum->syntax o3910@foo (string->symbol (string-append (symbol->string (o2fa5@syntax->datum o3910@foo)) '"-" (symbol->string (o2fa5@syntax->datum o3938@x)) '"-set!"))))) ((letrec ((o3916@f (lambda (o3918@fields) ((lambda (o391a@t) ((lambda (o391c@ls/false) (if o391c@ls/false (apply (lambda () '()) o391c@ls/false) ((lambda (o391e@t) ((lambda (o3920@ls/false) (if o3920@ls/false (apply (lambda (o3922@name o3923@accessor o3924@mutator o3925@rest) (cons o3924@mutator (o3916@f o3925@rest))) o3920@ls/false) ((lambda (o392a@t) ((lambda (o392c@ls/false) (if o392c@ls/false (apply (lambda (o392e@name o392f@rest) (cons (o3915@gen-name o392e@name) (o3916@f o392f@rest))) o392c@ls/false) ((lambda (o3932@t) ((lambda (o3934@ls/false) (if o3934@ls/false (apply (lambda (o3936@rest) (o3916@f o3936@rest)) o3934@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3932@t))) (o2eb6@syntax-dispatch o3932@t '(_ . any)))) o392a@t))) (o2eb6@syntax-dispatch o392a@t '((#(scheme-id mutable) any) . any)))) o391e@t))) (o2eb6@syntax-dispatch o391e@t '((#(scheme-id mutable) any any any) . any)))) o391a@t))) (o2eb6@syntax-dispatch o391a@t '()))) o3918@fields)))) o3916@f) o3911@fields))) '#f))) (set! o386d@get-accessors (lambda (o38cc@foo o38cd@fields) ((lambda (o38d1@gen-name) (begin (set! o38d1@gen-name (lambda (o390e@x) (o2fa3@datum->syntax o38cc@foo (string->symbol (string-append (symbol->string (o2fa5@syntax->datum o38cc@foo)) '"-" (symbol->string (o2fa5@syntax->datum o390e@x))))))) (map (lambda (o38d2@field) ((lambda (o38d4@t) ((lambda (o38d6@ls/false) (if (and o38d6@ls/false (apply (lambda (o38d8@name o38d9@accessor o38da@mutator) (o2cab@id? o38d9@accessor)) o38d6@ls/false)) (apply (lambda (o38de@name o38df@accessor o38e0@mutator) o38df@accessor) o38d6@ls/false) ((lambda (o38e4@t) ((lambda (o38e6@ls/false) (if (and o38e6@ls/false (apply (lambda (o38e8@name o38e9@accessor) (o2cab@id? o38e9@accessor)) o38e6@ls/false)) (apply (lambda (o38ec@name o38ed@accessor) o38ed@accessor) o38e6@ls/false) ((lambda (o38f0@t) ((lambda (o38f2@ls/false) (if (and o38f2@ls/false (apply (lambda (o38f4@name) (o2cab@id? o38f4@name)) o38f2@ls/false)) (apply (lambda (o38f6@name) (o38d1@gen-name o38f6@name)) o38f2@ls/false) ((lambda (o38f8@t) ((lambda (o38fa@ls/false) (if (and o38fa@ls/false (apply (lambda (o38fc@name) (o2cab@id? o38fc@name)) o38fa@ls/false)) (apply (lambda (o38fe@name) (o38d1@gen-name o38fe@name)) o38fa@ls/false) ((lambda (o3900@t) ((lambda (o3902@ls/false) (if (and o3902@ls/false (apply (lambda (o3904@name) (o2cab@id? o3904@name)) o3902@ls/false)) (apply (lambda (o3906@name) (o38d1@gen-name o3906@name)) o3902@ls/false) ((lambda (o3908@t) ((lambda (o390a@ls/false) (if o390a@ls/false (apply (lambda (o390c@others) (o2f9f@syntax-violation '#f '"invalid field spec" o38d2@field)) o390a@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3908@t))) (o2eb6@syntax-dispatch o3908@t 'any))) o3900@t))) (o2eb6@syntax-dispatch o3900@t 'any))) o38f8@t))) (o2eb6@syntax-dispatch o38f8@t '(#(scheme-id immutable) any)))) o38f0@t))) (o2eb6@syntax-dispatch o38f0@t '(#(scheme-id mutable) any)))) o38e4@t))) (o2eb6@syntax-dispatch o38e4@t '(#(scheme-id immutable) any any)))) o38d4@t))) (o2eb6@syntax-dispatch o38d4@t '(#(scheme-id mutable) any any any)))) o38d2@field)) o38cd@fields))) '#f))) (set! o386f@enumerate (lambda (o38c4@ls) ((letrec ((o38c6@f (lambda (o38c8@ls o38c9@i) (if (null? o38c8@ls) '() (cons o38c9@i (o38c6@f (cdr o38c8@ls) (+ o38c9@i '1))))))) o38c6@f) o38c4@ls '0))) (set! o3871@do-define-record (lambda (o389c@namespec o389d@clause*) ((lambda (o38a0@foo) ((lambda (o38a2@foo-rtd) ((lambda (o38a4@foo-rcd) ((lambda (o38a6@protocol) ((lambda (o38a8@make-foo) ((lambda (o38aa@fields) ((lambda (o38ac@idx*) ((lambda (o38ae@foo-x*) ((lambda (o38b0@set-foo-x!*) ((lambda (o38b2@set-foo-idx*) ((lambda (o38b4@foo?) ((lambda (o38b6@foo-rtd-code) ((lambda (o38b8@foo-rcd-code) ((lambda (o38ba@protocol-code) ((lambda () (o2e6c@bless (cons 'begin (cons (list 'define o38a2@foo-rtd o38b6@foo-rtd-code) (cons (list 'define o38a6@protocol o38ba@protocol-code) (cons (list 'define o38a4@foo-rcd o38b8@foo-rcd-code) (cons (list 'define-syntax o38a0@foo (list 'list ''$rtd (list 'syntax o38a2@foo-rtd) (list 'syntax o38a4@foo-rcd))) (cons (list 'define o38b4@foo? (list 'record-predicate o38a2@foo-rtd)) (cons (list 'define o38a8@make-foo (list 'record-constructor o38a4@foo-rcd)) (append (map (lambda (o38bc@foo-x o38bd@idx) (list 'define o38bc@foo-x (list 'record-accessor o38a2@foo-rtd o38bd@idx))) o38ae@foo-x* o38ac@idx*) (map (lambda (o38c0@set-foo-x! o38c1@idx) (list 'define o38c0@set-foo-x! (list 'record-mutator o38a2@foo-rtd o38c1@idx))) o38b0@set-foo-x!* o38b2@set-foo-idx*))))))))))))) (o3865@get-protocol-code o389d@clause*))) (o3863@foo-rcd-code o389d@clause* o38a2@foo-rtd o38a6@protocol (o3861@parent-rcd-code o389d@clause*)))) (o385d@foo-rtd-code o38a0@foo o389d@clause* (o385f@parent-rtd-code o389d@clause*)))) (o3859@get-record-predicate-name o389c@namespec))) (o3869@get-mutator-indices o38aa@fields))) (o386b@get-mutators o38a0@foo o38aa@fields))) (o386d@get-accessors o38a0@foo o38aa@fields))) (o386f@enumerate o38aa@fields))) (o3867@get-fields o389d@clause*))) (o3857@get-record-constructor-name o389c@namespec))) (gensym))) (gensym))) (gensym))) (o3855@get-record-name o389c@namespec)))) (set! o3873@verify-clauses (lambda (o387c@x o387d@cls*) ((lambda (o3881@valid-kwds o3883@free-id-member?) (begin (set! o3881@valid-kwds (map o2e6c@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! o3883@free-id-member? (lambda (o3898@x o3899@ls) (and (pair? o3899@ls) (or (o2cb3@free-id=? o3898@x (car o3899@ls)) (o3883@free-id-member? o3898@x (cdr o3899@ls)))))) ((letrec ((o3884@f (lambda (o3886@cls* o3887@seen*) (if (not (null? o3886@cls*)) ((lambda (o388a@t) ((lambda (o388c@ls/false) (if o388c@ls/false (apply (lambda (o388e@kwd o388f@rest) (if (or (not (o2cab@id? o388e@kwd)) (not (o3883@free-id-member? o388e@kwd o3881@valid-kwds))) (o2f9f@syntax-violation '#f '"not a valid define-record-type keyword" o388e@kwd) (if (o2cb9@bound-id-member? o388e@kwd o3887@seen*) (o2f9f@syntax-violation '#f '"duplicate use of keyword " o387c@x o388e@kwd) (o3884@f (cdr o3886@cls*) (cons o388e@kwd o3887@seen*))))) o388c@ls/false) ((lambda (o3892@t) ((lambda (o3894@ls/false) (if o3894@ls/false (apply (lambda (o3896@cls) (o2f9f@syntax-violation '#f '"malformed define-record-type clause" o3896@cls)) o3894@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3892@t))) (o2eb6@syntax-dispatch o3892@t 'any))) o388a@t))) (o2eb6@syntax-dispatch o388a@t '(any . any)))) (car o3886@cls*)) (void))))) o3884@f) o387d@cls* '()))) '#f '#f))) ((lambda (o3874@t) ((lambda (o3876@ls/false) (if o3876@ls/false (apply (lambda (o3878@namespec o3879@clause*) (begin (o3873@verify-clauses o3850@x o3879@clause*) (o3871@do-define-record o3878@namespec o3879@clause*))) o3876@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3874@t))) (o2eb6@syntax-dispatch o3874@t '(_ any . each-any)))) o3850@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! o2eac@define-condition-type-macro (lambda (o3a4c@x) ((lambda (o3a4f@mkname) (begin (set! o3a4f@mkname (lambda (o3a7c@name o3a7d@suffix) (o2fa3@datum->syntax o3a7c@name (string->symbol (string-append (symbol->string (o2fa5@syntax->datum o3a7c@name)) o3a7d@suffix))))) ((lambda (o3a50@t) ((lambda (o3a52@ls/false) (if (and o3a52@ls/false (apply (lambda (o3a54@ctxt o3a55@name o3a56@super o3a57@constructor o3a58@predicate o3a59@field* o3a5a@accessor*) (and (o2cab@id? o3a55@name) (o2cab@id? o3a56@super) (o2cab@id? o3a57@constructor) (o2cab@id? o3a58@predicate) (for-all o2cab@id? o3a59@field*) (for-all o2cab@id? o3a5a@accessor*))) o3a52@ls/false)) (apply (lambda (o3a62@ctxt o3a63@name o3a64@super o3a65@constructor o3a66@predicate o3a67@field* o3a68@accessor*) ((lambda (o3a70@aux-accessor*) (o2e6c@bless (cons 'begin (cons (cons 'define-record-type (cons (list o3a63@name o3a65@constructor (gensym)) (cons (list 'parent o3a64@super) (cons (cons 'fields (map (lambda (o3a72@field o3a73@aux) (list 'immutable o3a72@field o3a73@aux)) o3a67@field* o3a70@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define o3a66@predicate (list 'condition-predicate (list 'record-type-descriptor o3a63@name))) (map (lambda (o3a76@accessor o3a77@aux) (list 'define o3a76@accessor (list 'condition-accessor (list 'record-type-descriptor o3a63@name) o3a77@aux))) o3a68@accessor* o3a70@aux-accessor*)))))) (map (lambda (o3a7a@x) (gensym)) o3a68@accessor*))) o3a52@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3a50@t))) (o2eb6@syntax-dispatch o3a50@t '(any any any any any . #(each (any any)))))) o3a4c@x))) '#f))) (set! o2eae@incorrect-usage-macro (lambda (o3a80@e) (o2f9f@syntax-violation '#f '"incorrect usage of auxiliary keyword" o3a80@e))) (set! o2eb0@parameterize-macro (lambda (o3a82@e) ((lambda (o3a84@t) ((lambda (o3a86@ls/false) (if o3a86@ls/false (apply (lambda (o3a88@b o3a89@b*) (o2e6c@bless (cons 'let (cons '() (cons o3a88@b o3a89@b*))))) o3a86@ls/false) ((lambda (o3a8c@t) ((lambda (o3a8e@ls/false) (if o3a8e@ls/false (apply (lambda (o3a90@olhs* o3a91@orhs* o3a92@b o3a93@b*) ((lambda (o3a98@lhs* o3a99@rhs*) (o2e6c@bless (cons (list 'lambda (append o3a98@lhs* o3a99@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (o3a9c@lhs o3a9d@rhs) (list 'let (list (list 't (list o3a9c@lhs))) (list o3a9c@lhs o3a9d@rhs) (cons 'set! (cons o3a9d@rhs '(t))))) o3a98@lhs* o3a99@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons o3a92@b o3a93@b*))) '(swap)))))) (append o3a90@olhs* o3a91@orhs*)))) (o2f8d@generate-temporaries o3a90@olhs*) (o2f8d@generate-temporaries o3a91@orhs*))) o3a8e@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3a8c@t))) (o2eb6@syntax-dispatch o3a8c@t '(_ #(each (any any)) any . each-any)))) o3a84@t))) (o2eb6@syntax-dispatch o3a84@t '(_ () any . each-any)))) o3a82@e))) (set! o2eb2@foreign-call-transformer (lambda (o3aa0@e o3aa1@r o3aa2@mr) ((lambda (o3aa6@t) ((lambda (o3aa8@ls/false) (if o3aa8@ls/false (apply (lambda (o3aaa@name o3aab@arg*) (cons 'foreign-call (cons (o2ed8@chi-expr o3aaa@name o3aa1@r o3aa2@mr) (o2ed4@chi-expr* o3aab@arg* o3aa1@r o3aa2@mr)))) o3aa8@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3aa6@t))) (o2eb6@syntax-dispatch o3aa6@t '(_ any . each-any)))) o3aa0@e))) (set! o2eb4@convert-pattern (lambda (o3aae@pattern o3aaf@keys) ((lambda (o3ab3@cvt* o3ab5@cvt) (begin (set! o3ab3@cvt* (lambda (o3b52@p* o3b53@n o3b54@ids) (if (null? o3b52@p*) (values '() o3b54@ids) (call-with-values (lambda () (o3ab3@cvt* (cdr o3b52@p*) o3b53@n o3b54@ids)) (lambda (o3b5c@o3b59 o3b5d@o3b5b) ((lambda (o3b60@ids o3b61@y) (call-with-values (lambda () (o3ab5@cvt (car o3b52@p*) o3b53@n o3b60@ids)) (lambda (o3b68@o3b65 o3b69@o3b67) ((lambda (o3b6c@ids o3b6d@x) (values (cons o3b6d@x o3b61@y) o3b6c@ids)) o3b69@o3b67 o3b68@o3b65)))) o3b5d@o3b5b o3b5c@o3b59)))))) (set! o3ab5@cvt (lambda (o3ab6@p o3ab7@n o3ab8@ids) ((lambda (o3abc@t) ((lambda (o3abe@ls/false) (if (and o3abe@ls/false (apply (lambda (o3ac0@id) (o2cab@id? o3ac0@id)) o3abe@ls/false)) (apply (lambda (o3ac2@id) (if (o2cb9@bound-id-member? o3ab6@p o3aaf@keys) (values (vector 'free-id o3ab6@p) o3ab8@ids) (if (o2cb3@free-id=? o3ab6@p (o2e40@scheme-stx '_)) (values '_ o3ab8@ids) (values 'any (cons (cons o3ab6@p o3ab7@n) o3ab8@ids))))) o3abe@ls/false) ((lambda (o3ac4@t) ((lambda (o3ac6@ls/false) (if (and o3ac6@ls/false (apply (lambda (o3ac8@p o3ac9@dots) (o2eb8@ellipsis? o3ac9@dots)) o3ac6@ls/false)) (apply (lambda (o3acc@p o3acd@dots) (call-with-values (lambda () (o3ab5@cvt o3acc@p (+ o3ab7@n '1) o3ab8@ids)) (lambda (o3ad4@o3ad1 o3ad5@o3ad3) ((lambda (o3ad8@ids o3ad9@p) (values (if (eq? o3ad9@p 'any) 'each-any (vector 'each o3ad9@p)) o3ad8@ids)) o3ad5@o3ad3 o3ad4@o3ad1)))) o3ac6@ls/false) ((lambda (o3adc@t) ((lambda (o3ade@ls/false) (if (and o3ade@ls/false (apply (lambda (o3ae0@x o3ae1@dots o3ae2@ys o3ae3@z) (o2eb8@ellipsis? o3ae1@dots)) o3ade@ls/false)) (apply (lambda (o3ae8@x o3ae9@dots o3aea@ys o3aeb@z) (call-with-values (lambda () (o3ab5@cvt o3aeb@z o3ab7@n o3ab8@ids)) (lambda (o3af4@o3af1 o3af5@o3af3) ((lambda (o3af8@ids o3af9@z) (call-with-values (lambda () (o3ab3@cvt* o3aea@ys o3ab7@n o3af8@ids)) (lambda (o3b00@o3afd o3b01@o3aff) ((lambda (o3b04@ids o3b05@ys) (call-with-values (lambda () (o3ab5@cvt o3ae8@x (+ o3ab7@n '1) o3b04@ids)) (lambda (o3b0c@o3b09 o3b0d@o3b0b) ((lambda (o3b10@ids o3b11@x) (values (vector 'each+ o3b11@x (reverse o3b05@ys) o3af9@z) o3b10@ids)) o3b0d@o3b0b o3b0c@o3b09)))) o3b01@o3aff o3b00@o3afd)))) o3af5@o3af3 o3af4@o3af1)))) o3ade@ls/false) ((lambda (o3b14@t) ((lambda (o3b16@ls/false) (if o3b16@ls/false (apply (lambda (o3b18@x o3b19@y) (call-with-values (lambda () (o3ab5@cvt o3b19@y o3ab7@n o3ab8@ids)) (lambda (o3b20@o3b1d o3b21@o3b1f) ((lambda (o3b24@ids o3b25@y) (call-with-values (lambda () (o3ab5@cvt o3b18@x o3ab7@n o3b24@ids)) (lambda (o3b2c@o3b29 o3b2d@o3b2b) ((lambda (o3b30@ids o3b31@x) (values (cons o3b31@x o3b25@y) o3b30@ids)) o3b2d@o3b2b o3b2c@o3b29)))) o3b21@o3b1f o3b20@o3b1d)))) o3b16@ls/false) ((lambda (o3b34@t) ((lambda (o3b36@ls/false) (if o3b36@ls/false (apply (lambda () (values '() o3ab8@ids)) o3b36@ls/false) ((lambda (o3b38@t) ((lambda (o3b3a@ls/false) (if (and o3b3a@ls/false (apply (lambda (o3b3c@p) (not (o2c73@stx? o3b3c@p))) o3b3a@ls/false)) (apply (lambda (o3b3e@p) (call-with-values (lambda () (o3ab5@cvt o3b3e@p o3ab7@n o3ab8@ids)) (lambda (o3b44@o3b41 o3b45@o3b43) ((lambda (o3b48@ids o3b49@p) (values (vector 'vector o3b49@p) o3b48@ids)) o3b45@o3b43 o3b44@o3b41)))) o3b3a@ls/false) ((lambda (o3b4c@t) ((lambda (o3b4e@ls/false) (if o3b4e@ls/false (apply (lambda (o3b50@datum) (values (vector 'atom (o2cc1@stx->datum o3b50@datum)) o3ab8@ids)) o3b4e@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3b4c@t))) (o2eb6@syntax-dispatch o3b4c@t 'any))) o3b38@t))) (o2eb6@syntax-dispatch o3b38@t '#(vector each-any)))) o3b34@t))) (o2eb6@syntax-dispatch o3b34@t '()))) o3b14@t))) (o2eb6@syntax-dispatch o3b14@t '(any . any)))) o3adc@t))) (o2eb6@syntax-dispatch o3adc@t '(any any . #(each+ any () any))))) o3ac4@t))) (o2eb6@syntax-dispatch o3ac4@t '(any any)))) o3abc@t))) (o2eb6@syntax-dispatch o3abc@t 'any))) o3ab6@p))) (o3ab5@cvt o3aae@pattern '0 '()))) '#f '#f))) (set! o2eb6@syntax-dispatch ((lambda () ((lambda (o3b71@stx^ o3b73@match-each o3b75@match-each+ o3b77@match-each-any o3b79@match-empty o3b7b@combine o3b7d@match* o3b7f@match) (begin (set! o3b71@stx^ (lambda (o3c4c@e o3c4d@m* o3c4e@s* o3c4f@ae*) (if (and (null? o3c4d@m*) (null? o3c4e@s*) (null? o3c4f@ae*)) o3c4c@e (o2c93@mkstx o3c4c@e o3c4d@m* o3c4e@s* o3c4f@ae*)))) (set! o3b73@match-each (lambda (o3c2c@e o3c2d@p o3c2e@m* o3c2f@s* o3c30@ae*) (if (pair? o3c2c@e) ((lambda (o3c36@first) (and o3c36@first ((lambda (o3c38@rest) (and o3c38@rest (cons o3c36@first o3c38@rest))) (o3b73@match-each (cdr o3c2c@e) o3c2d@p o3c2e@m* o3c2f@s* o3c30@ae*)))) (o3b7f@match (car o3c2c@e) o3c2d@p o3c2e@m* o3c2f@s* o3c30@ae* '())) (if (null? o3c2c@e) '() (if (o2c73@stx? o3c2c@e) (and (not (o2c29@top-marked? o3c2e@m*)) (call-with-values (lambda () (o2c91@join-wraps o3c2e@m* o3c2f@s* o3c30@ae* o3c2c@e)) (lambda (o3c40@o3c3b o3c41@o3c3d o3c42@o3c3f) ((lambda (o3c46@ae* o3c47@s* o3c48@m*) (o3b73@match-each (o2c77@stx-expr o3c2c@e) o3c2d@p o3c48@m* o3c47@s* o3c46@ae*)) o3c42@o3c3f o3c41@o3c3d o3c40@o3c3b)))) (if (o284a@o2769@annotation? o3c2c@e) (o3b73@match-each (o284c@o276d@annotation-expression o3c2c@e) o3c2d@p o3c2e@m* o3c2f@s* o3c30@ae*) '#f)))))) (set! o3b75@match-each+ (lambda (o3bec@e o3bed@x-pat o3bee@y-pat o3bef@z-pat o3bf0@m* o3bf1@s* o3bf2@ae* o3bf3@r) ((letrec ((o3bfc@f (lambda (o3bfe@e o3bff@m* o3c00@s* o3c01@ae*) (if (pair? o3bfe@e) (call-with-values (lambda () (o3bfc@f (cdr o3bfe@e) o3bff@m* o3c00@s* o3c01@ae*)) (lambda (o3c0c@o3c07 o3c0d@o3c09 o3c0e@o3c0b) ((lambda (o3c12@r o3c13@y-pat o3c14@xr*) (if o3c12@r (if (null? o3c13@y-pat) ((lambda (o3c18@xr) (if o3c18@xr (values (cons o3c18@xr o3c14@xr*) o3c13@y-pat o3c12@r) (values '#f '#f '#f))) (o3b7f@match (car o3bfe@e) o3bed@x-pat o3bff@m* o3c00@s* o3c01@ae* '())) (values '() (cdr o3c13@y-pat) (o3b7f@match (car o3bfe@e) (car o3c13@y-pat) o3bff@m* o3c00@s* o3c01@ae* o3c12@r))) (values '#f '#f '#f))) o3c0e@o3c0b o3c0d@o3c09 o3c0c@o3c07))) (if (o2c73@stx? o3bfe@e) (if (o2c29@top-marked? o3bff@m*) (values '() o3bee@y-pat (o3b7f@match o3bfe@e o3bef@z-pat o3bff@m* o3c00@s* o3c01@ae* o3bf3@r)) (call-with-values (lambda () (o2c91@join-wraps o3bff@m* o3c00@s* o3c01@ae* o3bfe@e)) (lambda (o3c20@o3c1b o3c21@o3c1d o3c22@o3c1f) ((lambda (o3c26@ae* o3c27@s* o3c28@m*) (o3bfc@f (o2c77@stx-expr o3bfe@e) o3c28@m* o3c27@s* o3c26@ae*)) o3c22@o3c1f o3c21@o3c1d o3c20@o3c1b)))) (if (o284a@o2769@annotation? o3bfe@e) (o3bfc@f (o284c@o276d@annotation-expression o3bfe@e) o3bff@m* o3c00@s* o3c01@ae*) (values '() o3bee@y-pat (o3b7f@match o3bfe@e o3bef@z-pat o3bff@m* o3c00@s* o3c01@ae* o3bf3@r)))))))) o3bfc@f) o3bec@e o3bf0@m* o3bf1@s* o3bf2@ae*))) (set! o3b77@match-each-any (lambda (o3bd0@e o3bd1@m* o3bd2@s* o3bd3@ae*) (if (pair? o3bd0@e) ((lambda (o3bd8@l) (and o3bd8@l (cons (o3b71@stx^ (car o3bd0@e) o3bd1@m* o3bd2@s* o3bd3@ae*) o3bd8@l))) (o3b77@match-each-any (cdr o3bd0@e) o3bd1@m* o3bd2@s* o3bd3@ae*)) (if (null? o3bd0@e) '() (if (o2c73@stx? o3bd0@e) (and (not (o2c29@top-marked? o3bd1@m*)) (call-with-values (lambda () (o2c91@join-wraps o3bd1@m* o3bd2@s* o3bd3@ae* o3bd0@e)) (lambda (o3be0@o3bdb o3be1@o3bdd o3be2@o3bdf) ((lambda (o3be6@ae* o3be7@s* o3be8@m*) (o3b77@match-each-any (o2c77@stx-expr o3bd0@e) o3be8@m* o3be7@s* o3be6@ae*)) o3be2@o3bdf o3be1@o3bdd o3be0@o3bdb)))) (if (o284a@o2769@annotation? o3bd0@e) (o3b77@match-each-any (o284c@o276d@annotation-expression o3bd0@e) o3bd1@m* o3bd2@s* o3bd3@ae*) '#f)))))) (set! o3b79@match-empty (lambda (o3bca@p o3bcb@r) (if (null? o3bca@p) o3bcb@r (if (eq? o3bca@p '_) o3bcb@r (if (eq? o3bca@p 'any) (cons '() o3bcb@r) (if (pair? o3bca@p) (o3b79@match-empty (car o3bca@p) (o3b79@match-empty (cdr o3bca@p) o3bcb@r)) (if (eq? o3bca@p 'each-any) (cons '() o3bcb@r) ((lambda (o3bce@t) (if (memv o3bce@t '(each)) (o3b79@match-empty (vector-ref o3bca@p '1) o3bcb@r) (if (memv o3bce@t '(each+)) (o3b79@match-empty (vector-ref o3bca@p '1) (o3b79@match-empty (reverse (vector-ref o3bca@p '2)) (o3b79@match-empty (vector-ref o3bca@p '3) o3bcb@r))) (if (memv o3bce@t '(free-id atom)) o3bcb@r (if (memv o3bce@t '(scheme-id atom)) o3bcb@r (if (memv o3bce@t '(vector)) (o3b79@match-empty (vector-ref o3bca@p '1) o3bcb@r) (assertion-violation 'syntax-dispatch '"invalid pattern" o3bca@p))))))) (vector-ref o3bca@p '0))))))))) (set! o3b7b@combine (lambda (o3bc6@r* o3bc7@r) (if (null? (car o3bc6@r*)) o3bc7@r (cons (map car o3bc6@r*) (o3b7b@combine (map cdr o3bc6@r*) o3bc7@r))))) (set! o3b7d@match* (lambda (o3ba2@e o3ba3@p o3ba4@m* o3ba5@s* o3ba6@ae* o3ba7@r) (if (null? o3ba3@p) (and (null? o3ba2@e) o3ba7@r) (if (pair? o3ba3@p) (and (pair? o3ba2@e) (o3b7f@match (car o3ba2@e) (car o3ba3@p) o3ba4@m* o3ba5@s* o3ba6@ae* (o3b7f@match (cdr o3ba2@e) (cdr o3ba3@p) o3ba4@m* o3ba5@s* o3ba6@ae* o3ba7@r))) (if (eq? o3ba3@p 'each-any) ((lambda (o3bae@l) (and o3bae@l (cons o3bae@l o3ba7@r))) (o3b77@match-each-any o3ba2@e o3ba4@m* o3ba5@s* o3ba6@ae*)) ((lambda (o3bb0@t) (if (memv o3bb0@t '(each)) (if (null? o3ba2@e) (o3b79@match-empty (vector-ref o3ba3@p '1) o3ba7@r) ((lambda (o3bb2@r*) (and o3bb2@r* (o3b7b@combine o3bb2@r* o3ba7@r))) (o3b73@match-each o3ba2@e (vector-ref o3ba3@p '1) o3ba4@m* o3ba5@s* o3ba6@ae*))) (if (memv o3bb0@t '(free-id)) (and (symbol? o3ba2@e) (o2c29@top-marked? o3ba4@m*) (o2cb3@free-id=? (o3b71@stx^ o3ba2@e o3ba4@m* o3ba5@s* o3ba6@ae*) (vector-ref o3ba3@p '1)) o3ba7@r) (if (memv o3bb0@t '(scheme-id)) (and (symbol? o3ba2@e) (o2c29@top-marked? o3ba4@m*) (o2cb3@free-id=? (o3b71@stx^ o3ba2@e o3ba4@m* o3ba5@s* o3ba6@ae*) (o2e40@scheme-stx (vector-ref o3ba3@p '1))) o3ba7@r) (if (memv o3bb0@t '(each+)) (call-with-values (lambda () (o3b75@match-each+ o3ba2@e (vector-ref o3ba3@p '1) (vector-ref o3ba3@p '2) (vector-ref o3ba3@p '3) o3ba4@m* o3ba5@s* o3ba6@ae* o3ba7@r)) (lambda (o3bba@o3bb5 o3bbb@o3bb7 o3bbc@o3bb9) ((lambda (o3bc0@r o3bc1@y-pat o3bc2@xr*) (and o3bc0@r (null? o3bc1@y-pat) (if (null? o3bc2@xr*) (o3b79@match-empty (vector-ref o3ba3@p '1) o3bc0@r) (o3b7b@combine o3bc2@xr* o3bc0@r)))) o3bbc@o3bb9 o3bbb@o3bb7 o3bba@o3bb5))) (if (memv o3bb0@t '(atom)) (and (fast-equal? (vector-ref o3ba3@p '1) (o2cbf@strip o3ba2@e o3ba4@m*)) o3ba7@r) (if (memv o3bb0@t '(vector)) (and (vector? o3ba2@e) (o3b7f@match (vector->list o3ba2@e) (vector-ref o3ba3@p '1) o3ba4@m* o3ba5@s* o3ba6@ae* o3ba7@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" o3ba3@p)))))))) (vector-ref o3ba3@p '0))))))) (set! o3b7f@match (lambda (o3b84@e o3b85@p o3b86@m* o3b87@s* o3b88@ae* o3b89@r) (if (not o3b89@r) '#f (if (eq? o3b85@p '_) o3b89@r (if (eq? o3b85@p 'any) (cons (o3b71@stx^ o3b84@e o3b86@m* o3b87@s* o3b88@ae*) o3b89@r) (if (o2c73@stx? o3b84@e) (and (not (o2c29@top-marked? o3b86@m*)) (call-with-values (lambda () (o2c91@join-wraps o3b86@m* o3b87@s* o3b88@ae* o3b84@e)) (lambda (o3b96@o3b91 o3b97@o3b93 o3b98@o3b95) ((lambda (o3b9c@ae* o3b9d@s* o3b9e@m*) (o3b7f@match (o2c77@stx-expr o3b84@e) o3b85@p o3b9e@m* o3b9d@s* o3b9c@ae* o3b89@r)) o3b98@o3b95 o3b97@o3b93 o3b96@o3b91)))) (if (o284a@o2769@annotation? o3b84@e) (o3b7f@match (o284c@o276d@annotation-expression o3b84@e) o3b85@p o3b86@m* o3b87@s* o3b88@ae* o3b89@r) (o3b7d@match* o3b84@e o3b85@p o3b86@m* o3b87@s* o3b88@ae* o3b89@r)))))))) (lambda (o3b80@e o3b81@p) (o3b7f@match o3b80@e o3b81@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! o2eb8@ellipsis? (lambda (o3c54@x) (and (o2cab@id? o3c54@x) (o2cb3@free-id=? o3c54@x (o2e40@scheme-stx '...))))) (set! o2eba@underscore? (lambda (o3c56@x) (and (o2cab@id? o3c56@x) (o2cb3@free-id=? o3c56@x (o2e40@scheme-stx '_))))) (set! o2ebc@verify-literals (lambda (o3c58@lits o3c59@expr) (for-each (lambda (o3c5c@x) (if (or (not (o2cab@id? o3c5c@x)) (o2eb8@ellipsis? o3c5c@x) (o2eba@underscore? o3c5c@x)) (o2f9f@syntax-violation '#f '"invalid literal" o3c59@expr o3c5c@x) (void))) o3c58@lits))) (set! o2ebe@syntax-case-transformer ((lambda () ((lambda (o3c5f@build-dispatch-call o3c61@invalid-ids-error o3c63@gen-clause o3c65@gen-syntax-case) (begin (set! o3c5f@build-dispatch-call (lambda (o3cd0@pvars o3cd1@expr o3cd2@y o3cd3@r o3cd4@mr) ((lambda (o3cda@ids o3cdb@levels) ((lambda (o3cde@labels o3cdf@new-vars) ((lambda (o3ce2@body) (list '(primitive apply) (o2c07@o2b47@build-lambda '#f o3cdf@new-vars o3ce2@body) o3cd2@y)) (o2ed8@chi-expr (o2c97@add-subst (o2c66@make-full-rib o3cda@ids o3cde@labels) o3cd1@expr) (append (map (lambda (o3ce4@label o3ce5@var o3ce6@level) (cons o3ce4@label (o2ccb@make-binding 'syntax (cons o3ce5@var o3ce6@level)))) o3cde@labels o3cdf@new-vars (map cdr o3cd0@pvars)) o3cd3@r) o3cd4@mr))) (map o2c2f@gen-label o3cda@ids) (map o2c2b@gen-lexical o3cda@ids))) (map car o3cd0@pvars) (map cdr o3cd0@pvars)))) (set! o3c61@invalid-ids-error (lambda (o3cc4@id* o3cc5@e o3cc6@class) ((letrec ((o3cca@find (lambda (o3ccc@id* o3ccd@ok*) (if (null? o3ccc@id*) (o2f9f@syntax-violation '#f '"invalid syntax" o3cc5@e) (if (o2cab@id? (car o3ccc@id*)) (if (o2cb9@bound-id-member? (car o3ccc@id*) o3ccd@ok*) (o2f9b@syntax-error (car o3ccc@id*) '"duplicate " o3cc6@class) (o3cca@find (cdr o3ccc@id*) (cons (car o3ccc@id*) o3ccd@ok*))) (o2f9b@syntax-error (car o3ccc@id*) '"invalid " o3cc6@class)))))) o3cca@find) o3cc4@id* '()))) (set! o3c63@gen-clause (lambda (o3c9c@x o3c9d@keys o3c9e@clauses o3c9f@r o3ca0@mr o3ca1@pat o3ca2@fender o3ca3@expr) (call-with-values (lambda () (o2eb4@convert-pattern o3ca1@pat o3c9d@keys)) (lambda (o3cb0@o3cad o3cb1@o3caf) ((lambda (o3cb4@pvars o3cb5@p) (if (not (o2cb7@distinct-bound-ids? (map car o3cb4@pvars))) (o3c61@invalid-ids-error (map car o3cb4@pvars) o3ca1@pat '"pattern variable") (if (not (for-all (lambda (o3cb8@x) (not (o2eb8@ellipsis? (car o3cb8@x)))) o3cb4@pvars)) (o2f9f@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" o3ca1@pat) ((lambda (o3cba@y) ((lambda (o3cbc@test) ((lambda (o3cbe@conseq) ((lambda (o3cc0@altern) (list (o2c07@o2b47@build-lambda '#f (list o3cba@y) (list 'if o3cbc@test o3cbe@conseq o3cc0@altern)) (list '(primitive syntax-dispatch) o3c9c@x (list 'quote o3cb5@p)))) (o3c65@gen-syntax-case o3c9c@x o3c9d@keys o3c9e@clauses o3c9f@r o3ca0@mr))) (o3c5f@build-dispatch-call o3cb4@pvars o3ca3@expr o3cba@y o3c9f@r o3ca0@mr))) (if (eq? o3ca2@fender '#t) o3cba@y ((lambda (o3cc2@call) (list 'if o3cba@y o3cc2@call (list 'quote '#f))) (o3c5f@build-dispatch-call o3cb4@pvars o3ca2@fender o3cba@y o3c9f@r o3ca0@mr))))) (o2c2b@gen-lexical 'tmp))))) o3cb1@o3caf o3cb0@o3cad))))) (set! o3c65@gen-syntax-case (lambda (o3c7a@x o3c7b@keys o3c7c@clauses o3c7d@r o3c7e@mr) (if (null? o3c7c@clauses) (list '(primitive syntax-error) o3c7a@x) ((lambda (o3c84@t) ((lambda (o3c86@ls/false) (if o3c86@ls/false (apply (lambda (o3c88@pat o3c89@expr) (if (and (o2cab@id? o3c88@pat) (not (o2cb9@bound-id-member? o3c88@pat o3c7b@keys)) (not (o2eb8@ellipsis? o3c88@pat))) (if (o2cb3@free-id=? o3c88@pat (o2e40@scheme-stx '_)) (o2ed8@chi-expr o3c89@expr o3c7d@r o3c7e@mr) ((lambda (o3c8c@lab o3c8d@lex) ((lambda (o3c90@body) (list (o2c07@o2b47@build-lambda '#f (list o3c8d@lex) o3c90@body) o3c7a@x)) (o2ed8@chi-expr (o2c97@add-subst (o2c66@make-full-rib (list o3c88@pat) (list o3c8c@lab)) o3c89@expr) (cons (cons o3c8c@lab (o2ccb@make-binding 'syntax (cons o3c8d@lex '0))) o3c7d@r) o3c7e@mr))) (o2c2f@gen-label o3c88@pat) (o2c2b@gen-lexical o3c88@pat))) (o3c63@gen-clause o3c7a@x o3c7b@keys (cdr o3c7c@clauses) o3c7d@r o3c7e@mr o3c88@pat '#t o3c89@expr))) o3c86@ls/false) ((lambda (o3c92@t) ((lambda (o3c94@ls/false) (if o3c94@ls/false (apply (lambda (o3c96@pat o3c97@fender o3c98@expr) (o3c63@gen-clause o3c7a@x o3c7b@keys (cdr o3c7c@clauses) o3c7d@r o3c7e@mr o3c96@pat o3c97@fender o3c98@expr)) o3c94@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3c92@t))) (o2eb6@syntax-dispatch o3c92@t '(any any any)))) o3c84@t))) (o2eb6@syntax-dispatch o3c84@t '(any any)))) (car o3c7c@clauses))))) (lambda (o3c66@e o3c67@r o3c68@mr) ((lambda (o3c6c@t) ((lambda (o3c6e@ls/false) (if o3c6e@ls/false (apply (lambda (o3c70@expr o3c71@keys o3c72@clauses) (begin (o2ebc@verify-literals o3c71@keys o3c66@e) ((lambda (o3c76@x) ((lambda (o3c78@body) (list (o2c07@o2b47@build-lambda '#f (list o3c76@x) o3c78@body) (o2ed8@chi-expr o3c70@expr o3c67@r o3c68@mr))) (o3c65@gen-syntax-case o3c76@x o3c71@keys o3c72@clauses o3c67@r o3c68@mr))) (o2c2b@gen-lexical 'tmp)))) o3c6e@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3c6c@t))) (o2eb6@syntax-dispatch o3c6c@t '(_ any each-any . each-any)))) o3c66@e)))) '#f '#f '#f '#f)))) (set! o2ec0@ellipsis-map (lambda (o3cea@proc o3ceb@ls . o3cee@ls*) ((lambda (o3cf1@who) (begin (set! o3cf1@who '...) (begin (if (not (list? o3ceb@ls)) (assertion-violation o3cf1@who '"not a list" o3ceb@ls) (void)) (if (not (null? o3cee@ls*)) ((lambda (o3cf2@n) (for-each (lambda (o3cf4@x) (begin (if (not (list? o3cf4@x)) (assertion-violation o3cf1@who '"not a list" o3cf4@x) (void)) (if (not (= (length o3cf4@x) o3cf2@n)) (assertion-violation o3cf1@who '"length mismatch" o3ceb@ls o3cf4@x) (void)))) o3cee@ls*)) (length o3ceb@ls)) (void)) (apply map o3cea@proc o3ceb@ls o3cee@ls*)))) '#f))) (set! o2ec2@syntax-transformer ((lambda () ((lambda (o3cf7@gen-syntax o3cf9@gen-ref o3cfb@gen-append o3cfd@gen-mappend o3cff@gen-map o3d01@gen-cons o3d03@gen-vector o3d05@regen) (begin (set! o3cf7@gen-syntax (lambda (o3d6e@src o3d6f@e o3d70@r o3d71@maps o3d72@ellipsis? o3d73@vec?) ((lambda (o3d7a@t) ((lambda (o3d7c@ls/false) (if (and o3d7c@ls/false (apply (lambda (o3d7e@dots) (o3d72@ellipsis? o3d7e@dots)) o3d7c@ls/false)) (apply (lambda (o3d80@dots) (o2f9f@syntax-violation '#f '"misplaced ellipsis in syntax form" o3d6e@src)) o3d7c@ls/false) ((lambda (o3d82@t) ((lambda (o3d84@ls/false) (if (and o3d84@ls/false (apply (lambda (o3d86@id) (o2cab@id? o3d86@id)) o3d84@ls/false)) (apply (lambda (o3d88@id) ((lambda (o3d8a@label) ((lambda (o3d8c@b) ((lambda () (if (eq? (o2ccd@binding-type o3d8c@b) 'syntax) (call-with-values (lambda () ((lambda (o3d92@var.lev) (o3cf9@gen-ref o3d6e@src (car o3d92@var.lev) (cdr o3d92@var.lev) o3d71@maps)) (o2ccf@binding-value o3d8c@b))) (lambda (o3d94@o3d8f o3d95@o3d91) ((lambda (o3d98@maps o3d99@var) (values (list 'ref o3d99@var) o3d98@maps)) o3d95@o3d91 o3d94@o3d8f))) (values (list 'quote o3d6f@e) o3d71@maps))))) (o2cc9@label->binding o3d8a@label o3d70@r))) (o2cc5@id->label o3d6f@e))) o3d84@ls/false) ((lambda (o3d9c@t) ((lambda (o3d9e@ls/false) (if (and o3d9e@ls/false (apply (lambda (o3da0@dots o3da1@e) (o3d72@ellipsis? o3da0@dots)) o3d9e@ls/false)) (apply (lambda (o3da4@dots o3da5@e) (if o3d73@vec? (o2f9f@syntax-violation '#f '"misplaced ellipsis in syntax form" o3d6e@src) (o3cf7@gen-syntax o3d6e@src o3da5@e o3d70@r o3d71@maps (lambda (o3da8@x) '#f) '#f))) o3d9e@ls/false) ((lambda (o3daa@t) ((lambda (o3dac@ls/false) (if (and o3dac@ls/false (apply (lambda (o3dae@x o3daf@dots o3db0@y) (o3d72@ellipsis? o3daf@dots)) o3dac@ls/false)) (apply (lambda (o3db4@x o3db5@dots o3db6@y) ((letrec ((o3dba@f (lambda (o3dbc@y o3dbd@k) ((lambda (o3dc0@t) ((lambda (o3dc2@ls/false) (if o3dc2@ls/false (apply (lambda () (o3dbd@k o3d71@maps)) o3dc2@ls/false) ((lambda (o3dc4@t) ((lambda (o3dc6@ls/false) (if (and o3dc6@ls/false (apply (lambda (o3dc8@dots o3dc9@y) (o3d72@ellipsis? o3dc8@dots)) o3dc6@ls/false)) (apply (lambda (o3dcc@dots o3dcd@y) (o3dba@f o3dcd@y (lambda (o3dd0@maps) (call-with-values (lambda () (o3dbd@k (cons '() o3dd0@maps))) (lambda (o3dd6@o3dd3 o3dd7@o3dd5) ((lambda (o3dda@maps o3ddb@x) (if (null? (car o3dda@maps)) (o2f9f@syntax-violation '#f '"extra ellipsis in syntax form" o3d6e@src) (values (o3cfd@gen-mappend o3ddb@x (car o3dda@maps)) (cdr o3dda@maps)))) o3dd7@o3dd5 o3dd6@o3dd3)))))) o3dc6@ls/false) ((lambda (o3dde@t) ((lambda (o3de0@ls/false) (if o3de0@ls/false (apply (lambda () (call-with-values (lambda () (o3cf7@gen-syntax o3d6e@src o3dbc@y o3d70@r o3d71@maps o3d72@ellipsis? o3d73@vec?)) (lambda (o3de6@o3de3 o3de7@o3de5) ((lambda (o3dea@maps o3deb@y) (call-with-values (lambda () (o3dbd@k o3dea@maps)) (lambda (o3df2@o3def o3df3@o3df1) ((lambda (o3df6@maps o3df7@x) (values (o3cfb@gen-append o3df7@x o3deb@y) o3df6@maps)) o3df3@o3df1 o3df2@o3def)))) o3de7@o3de5 o3de6@o3de3)))) o3de0@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3dde@t))) (o2eb6@syntax-dispatch o3dde@t '_))) o3dc4@t))) (o2eb6@syntax-dispatch o3dc4@t '(any . any)))) o3dc0@t))) (o2eb6@syntax-dispatch o3dc0@t '()))) o3dbc@y)))) o3dba@f) o3db6@y (lambda (o3dfa@maps) (call-with-values (lambda () (o3cf7@gen-syntax o3d6e@src o3db4@x o3d70@r (cons '() o3dfa@maps) o3d72@ellipsis? '#f)) (lambda (o3e00@o3dfd o3e01@o3dff) ((lambda (o3e04@maps o3e05@x) (if (null? (car o3e04@maps)) (o2f9f@syntax-violation '#f '"extra ellipsis in syntax form" o3d6e@src) (values (o3cff@gen-map o3e05@x (car o3e04@maps)) (cdr o3e04@maps)))) o3e01@o3dff o3e00@o3dfd)))))) o3dac@ls/false) ((lambda (o3e08@t) ((lambda (o3e0a@ls/false) (if o3e0a@ls/false (apply (lambda (o3e0c@x o3e0d@y) (call-with-values (lambda () (o3cf7@gen-syntax o3d6e@src o3e0c@x o3d70@r o3d71@maps o3d72@ellipsis? '#f)) (lambda (o3e14@o3e11 o3e15@o3e13) ((lambda (o3e18@maps o3e19@xnew) (call-with-values (lambda () (o3cf7@gen-syntax o3d6e@src o3e0d@y o3d70@r o3e18@maps o3d72@ellipsis? o3d73@vec?)) (lambda (o3e20@o3e1d o3e21@o3e1f) ((lambda (o3e24@maps o3e25@ynew) (values (o3d01@gen-cons o3d6f@e o3e0c@x o3e0d@y o3e19@xnew o3e25@ynew) o3e24@maps)) o3e21@o3e1f o3e20@o3e1d)))) o3e15@o3e13 o3e14@o3e11)))) o3e0a@ls/false) ((lambda (o3e28@t) ((lambda (o3e2a@ls/false) (if o3e2a@ls/false (apply (lambda (o3e2c@ls) (call-with-values (lambda () (o3cf7@gen-syntax o3d6e@src o3e2c@ls o3d70@r o3d71@maps o3d72@ellipsis? '#t)) (lambda (o3e32@o3e2f o3e33@o3e31) ((lambda (o3e36@maps o3e37@lsnew) (values (o3d03@gen-vector o3d6f@e o3e2c@ls o3e37@lsnew) o3e36@maps)) o3e33@o3e31 o3e32@o3e2f)))) o3e2a@ls/false) ((lambda (o3e3a@t) ((lambda (o3e3c@ls/false) (if o3e3c@ls/false (apply (lambda () (values (list 'quote o3d6f@e) o3d71@maps)) o3e3c@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3e3a@t))) (o2eb6@syntax-dispatch o3e3a@t '_))) o3e28@t))) (o2eb6@syntax-dispatch o3e28@t '#(vector each-any)))) o3e08@t))) (o2eb6@syntax-dispatch o3e08@t '(any . any)))) o3daa@t))) (o2eb6@syntax-dispatch o3daa@t '(any any . any)))) o3d9c@t))) (o2eb6@syntax-dispatch o3d9c@t '(any any)))) o3d82@t))) (o2eb6@syntax-dispatch o3d82@t 'any))) o3d7a@t))) (o2eb6@syntax-dispatch o3d7a@t 'any))) o3d6f@e))) (set! o3cf9@gen-ref (lambda (o3d54@src o3d55@var o3d56@level o3d57@maps) (if (= o3d56@level '0) (values o3d55@var o3d57@maps) (if (null? o3d57@maps) (o2f9f@syntax-violation '#f '"missing ellipsis in syntax form" o3d54@src) (call-with-values (lambda () (o3cf9@gen-ref o3d54@src o3d55@var (- o3d56@level '1) (cdr o3d57@maps))) (lambda (o3d60@o3d5d o3d61@o3d5f) ((lambda (o3d64@outer-maps o3d65@outer-var) ((lambda (o3d68@t) (if o3d68@t ((lambda (o3d6a@b) (values (cdr o3d6a@b) o3d57@maps)) o3d68@t) ((lambda (o3d6c@inner-var) (values o3d6c@inner-var (cons (cons (cons o3d65@outer-var o3d6c@inner-var) (car o3d57@maps)) o3d64@outer-maps))) (o2c2b@gen-lexical 'tmp)))) (assq o3d65@outer-var (car o3d57@maps)))) o3d61@o3d5f o3d60@o3d5d))))))) (set! o3cfb@gen-append (lambda (o3d50@x o3d51@y) (if (fast-equal? o3d51@y ''()) o3d50@x (list 'append o3d50@x o3d51@y)))) (set! o3cfd@gen-mappend (lambda (o3d4c@e o3d4d@map-env) (list 'apply '(primitive append) (o3cff@gen-map o3d4c@e o3d4d@map-env)))) (set! o3cff@gen-map (lambda (o3d3a@e o3d3b@map-env) ((lambda (o3d3e@formals o3d3f@actuals) (if (eq? (car o3d3a@e) 'ref) (car o3d3f@actuals) (if (for-all (lambda (o3d42@x) (and (eq? (car o3d42@x) 'ref) (memq (cadr o3d42@x) o3d3e@formals))) (cdr o3d3a@e)) ((lambda (o3d44@args) (cons 'map (cons (list 'primitive (car o3d3a@e)) o3d44@args))) (map ((lambda (o3d46@r) (lambda (o3d48@x) (cdr (assq (cadr o3d48@x) o3d46@r)))) (map cons o3d3e@formals o3d3f@actuals)) (cdr o3d3a@e))) (cons* 'map (list 'lambda o3d3e@formals o3d3a@e) o3d3f@actuals)))) (map cdr o3d3b@map-env) (map (lambda (o3d4a@x) (list 'ref (car o3d4a@x))) o3d3b@map-env)))) (set! o3d01@gen-cons (lambda (o3d2a@e o3d2b@x o3d2c@y o3d2d@xnew o3d2e@ynew) ((lambda (o3d34@t) (if (memv o3d34@t '(quote)) (if (eq? (car o3d2d@xnew) 'quote) ((lambda (o3d36@xnew o3d37@ynew) (if (and (eq? o3d36@xnew o3d2b@x) (eq? o3d37@ynew o3d2c@y)) (list 'quote o3d2a@e) (list 'quote (cons o3d36@xnew o3d37@ynew)))) (cadr o3d2d@xnew) (cadr o3d2e@ynew)) (if (null? (cadr o3d2e@ynew)) (list 'list o3d2d@xnew) (list 'cons o3d2d@xnew o3d2e@ynew))) (if (memv o3d34@t '(list)) (cons 'list (cons o3d2d@xnew (cdr o3d2e@ynew))) (list 'cons o3d2d@xnew o3d2e@ynew)))) (car o3d2e@ynew)))) (set! o3d03@gen-vector (lambda (o3d24@e o3d25@ls o3d26@lsnew) (if (eq? (car o3d26@lsnew) 'quote) (if (eq? (cadr o3d26@lsnew) o3d25@ls) (list 'quote o3d24@e) (list 'quote (list->vector (cadr o3d26@lsnew)))) (if (eq? (car o3d26@lsnew) 'list) (cons 'vector (cdr o3d26@lsnew)) (list 'list->vector o3d26@lsnew))))) (set! o3d05@regen (lambda (o3d1e@x) ((lambda (o3d20@t) (if (memv o3d20@t '(ref)) (cadr o3d1e@x) (if (memv o3d20@t '(primitive)) (list 'primitive (cadr o3d1e@x)) (if (memv o3d20@t '(quote)) (list 'quote (cadr o3d1e@x)) (if (memv o3d20@t '(lambda)) (o2c07@o2b47@build-lambda '#f (cadr o3d1e@x) (o3d05@regen (caddr o3d1e@x))) (if (memv o3d20@t '(map)) ((lambda (o3d22@ls) (cons '(primitive ellipsis-map) o3d22@ls)) (map o3d05@regen (cdr o3d1e@x))) (cons (list 'primitive (car o3d1e@x)) (map o3d05@regen (cdr o3d1e@x))))))))) (car o3d1e@x)))) (lambda (o3d06@e o3d07@r o3d08@mr) ((lambda (o3d0c@t) ((lambda (o3d0e@ls/false) (if o3d0e@ls/false (apply (lambda (o3d10@x) (call-with-values (lambda () (o3cf7@gen-syntax o3d06@e o3d10@x o3d07@r '() o2eb8@ellipsis? '#f)) (lambda (o3d16@o3d13 o3d17@o3d15) ((lambda (o3d1a@maps o3d1b@e) (o3d05@regen o3d1b@e)) o3d17@o3d15 o3d16@o3d13)))) o3d0e@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3d0c@t))) (o2eb6@syntax-dispatch o3d0c@t '(_ any)))) o3d06@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! o2ec4@core-macro-transformer (lambda (o3e3e@name) ((lambda (o3e40@t) (if (memv o3e40@t '(quote)) o2e66@quote-transformer (if (memv o3e40@t '(lambda)) o2e6a@lambda-transformer (if (memv o3e40@t '(case-lambda)) o2e68@case-lambda-transformer (if (memv o3e40@t '(letrec)) o2e4e@letrec-transformer (if (memv o3e40@t '(letrec*)) o2e50@letrec*-transformer (if (memv o3e40@t '(if)) o2e5e@if-transformer (if (memv o3e40@t '(and)) o2e60@and-transformer (if (memv o3e40@t '(or)) o2e62@or-transformer (if (memv o3e40@t '(foreign-call)) o2eb2@foreign-call-transformer (if (memv o3e40@t '(syntax-case)) o2ebe@syntax-case-transformer (if (memv o3e40@t '(syntax)) o2ec2@syntax-transformer (if (memv o3e40@t '(type-descriptor)) o2e54@type-descriptor-transformer (if (memv o3e40@t '(record-type-descriptor)) o2e56@record-type-descriptor-transformer (if (memv o3e40@t '(record-constructor-descriptor)) o2e58@record-constructor-descriptor-transformer (if (memv o3e40@t '(fluid-let-syntax)) o2e52@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" o3e3e@name))))))))))))))))) o3e3e@name))) (set! o2ec6@symbol-macro (lambda (o3e42@x o3e43@set) ((lambda (o3e46@t) ((lambda (o3e48@ls/false) (if (and o3e48@ls/false (apply (lambda (o3e4a@name) (and (o2cab@id? o3e4a@name) (memq (o2cad@id->sym o3e4a@name) o3e43@set))) o3e48@ls/false)) (apply (lambda (o3e4c@name) (o2e6c@bless (list 'quote o3e4c@name))) o3e48@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3e46@t))) (o2eb6@syntax-dispatch o3e46@t '(_ any)))) o3e42@x))) (set! o2ec8@macro-transformer (lambda (o3e4e@x) (if (procedure? o3e4e@x) o3e4e@x (if (symbol? o3e4e@x) ((lambda (o3e50@t) (if (memv o3e50@t '(define-record-type)) o2eaa@define-record-type-macro (if (memv o3e50@t '(define-struct)) o2ea8@define-struct-macro (if (memv o3e50@t '(include)) o2e9e@include-macro (if (memv o3e50@t '(cond)) o2e9a@cond-macro (if (memv o3e50@t '(let)) o2e72@let-macro (if (memv o3e50@t '(do)) o2e92@do-macro (if (memv o3e50@t '(or)) o2e96@or-macro (if (memv o3e50@t '(and)) o2e98@and-macro (if (memv o3e50@t '(let*)) o2e94@let*-macro (if (memv o3e50@t '(let-values)) o2e74@let-values-macro (if (memv o3e50@t '(let*-values)) o2e76@let*-values-macro (if (memv o3e50@t '(syntax-rules)) o2ea2@syntax-rules-macro (if (memv o3e50@t '(quasiquote)) o2ea4@quasiquote-macro (if (memv o3e50@t '(quasisyntax)) o2ea6@quasisyntax-macro (if (memv o3e50@t '(with-syntax)) o2e6e@with-syntax-macro (if (memv o3e50@t '(when)) o2e5a@when-macro (if (memv o3e50@t '(unless)) o2e5c@unless-macro (if (memv o3e50@t '(case)) o2e64@case-macro (if (memv o3e50@t '(identifier-syntax)) o2e90@identifier-syntax-macro (if (memv o3e50@t '(time)) o2e88@time-macro (if (memv o3e50@t '(delay)) o2e8a@delay-macro (if (memv o3e50@t '(assert)) o2e8c@assert-macro (if (memv o3e50@t '(endianness)) o2e8e@endianness-macro (if (memv o3e50@t '(guard)) o2e84@guard-macro (if (memv o3e50@t '(define-enumeration)) o2e86@define-enumeration-macro (if (memv o3e50@t '(trace-lambda)) o2e78@trace-lambda-macro (if (memv o3e50@t '(trace-define)) o2e7a@trace-define-macro (if (memv o3e50@t '(trace-define-syntax)) o2e7c@trace-define-syntax-macro (if (memv o3e50@t '(trace-let-syntax)) o2e80@trace-let-syntax-macro (if (memv o3e50@t '(trace-letrec-syntax)) o2e82@trace-letrec-syntax-macro (if (memv o3e50@t '(define-condition-type)) o2eac@define-condition-type-macro (if (memv o3e50@t '(parameterize)) o2eb0@parameterize-macro (if (memv o3e50@t '(include-into)) o2ea0@include-into-macro (if (memv o3e50@t '(eol-style)) (lambda (o3e52@x) (o2ec6@symbol-macro o3e52@x '(none lf cr crlf nel crnel ls))) (if (memv o3e50@t '(error-handling-mode)) (lambda (o3e54@x) (o2ec6@symbol-macro o3e54@x '(ignore raise replace))) (if (memv o3e50@t '(buffer-mode)) (lambda (o3e56@x) (o2ec6@symbol-macro o3e56@x '(none line block))) (if (memv o3e50@t '(file-options)) o2c1e@file-options-macro (if (memv o3e50@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) o2eae@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" o3e4e@x)))))))))))))))))))))))))))))))))))))))) o3e4e@x) (error 'core-macro-transformer '"BUG: invalid macro" o3e4e@x))))) (set! o2eca@local-macro-transformer (lambda (o3e58@x) (car o3e58@x))) (set! o2ecc@do-macro-call (lambda (o3e5a@transformer o3e5b@expr) ((lambda (o3e5e@out) (begin ((letrec ((o3e60@f (lambda (o3e62@x) (if (not (o2c73@stx? o3e62@x)) (if (pair? o3e62@x) (begin (o3e60@f (car o3e62@x)) (o3e60@f (cdr o3e62@x))) (if (vector? o3e62@x) (vector-for-each o3e60@f o3e62@x) (if (symbol? o3e62@x) (o2f9f@syntax-violation '#f '"raw symbol encountered in output of macro" o3e5b@expr o3e62@x) (void)))) (void))))) o3e60@f) o3e5e@out) (o2c95@add-mark (o2c8b@gen-mark) o3e5e@out o3e5b@expr))) (o3e5a@transformer (o2c95@add-mark o2c8d@anti-mark o3e5b@expr '#f))))) (set! o2ece@chi-macro (lambda (o3e64@p o3e65@e) (o2ecc@do-macro-call (o2ec8@macro-transformer o3e64@p) o3e65@e))) (set! o2ed0@chi-local-macro (lambda (o3e68@p o3e69@e) (o2ecc@do-macro-call (o2eca@local-macro-transformer o3e68@p) o3e69@e))) (set! o2ed2@chi-global-macro (lambda (o3e6c@p o3e6d@e) ((lambda (o3e70@lib o3e71@loc) (begin (o2ad0@o2972@visit-library o3e70@lib) ((lambda (o3e74@x) ((lambda (o3e76@transformer) (o2ecc@do-macro-call o3e76@transformer o3e6d@e)) (if (procedure? o3e74@x) o3e74@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" o3e74@x)))) (symbol-value o3e71@loc)))) (car o3e6c@p) (cdr o3e6c@p)))) (set! o2ed4@chi-expr* (lambda (o3e78@e* o3e79@r o3e7a@mr) (if (null? o3e78@e*) '() ((lambda (o3e7e@e) (cons o3e7e@e (o2ed4@chi-expr* (cdr o3e78@e*) o3e79@r o3e7a@mr))) (o2ed8@chi-expr (car o3e78@e*) o3e79@r o3e7a@mr))))) (set! o2ed6@chi-application (lambda (o3e80@e o3e81@r o3e82@mr) ((lambda (o3e86@t) ((lambda (o3e88@ls/false) (if o3e88@ls/false (apply (lambda (o3e8a@rator o3e8b@rands) ((lambda (o3e8e@rator) (cons o3e8e@rator (o2ed4@chi-expr* o3e8b@rands o3e81@r o3e82@mr))) (o2ed8@chi-expr o3e8a@rator o3e81@r o3e82@mr))) o3e88@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3e86@t))) (o2eb6@syntax-dispatch o3e86@t '(any . each-any)))) o3e80@e))) (set! o2ed8@chi-expr (lambda (o3e90@e o3e91@r o3e92@mr) (call-with-values (lambda () (o2cd3@syntax-type o3e90@e o3e91@r)) (lambda (o3e9c@o3e97 o3e9d@o3e99 o3e9e@o3e9b) ((lambda (o3ea2@kwd o3ea3@value o3ea4@type) ((lambda (o3ea8@t) (if (memv o3ea8@t '(core-macro)) ((lambda (o3eaa@transformer) (o3eaa@transformer o3e90@e o3e91@r o3e92@mr)) (o2ec4@core-macro-transformer o3ea3@value)) (if (memv o3ea8@t '(global)) ((lambda (o3eac@lib) ((lambda (o3eae@loc) ((lambda () (begin ((o2f21@inv-collector) o3eac@lib) o3eae@loc)))) (cdr o3ea3@value))) (car o3ea3@value)) (if (memv o3ea8@t '(core-prim)) ((lambda (o3eb0@name) (list 'primitive o3eb0@name)) o3ea3@value) (if (memv o3ea8@t '(call)) (o2ed6@chi-application o3e90@e o3e91@r o3e92@mr) (if (memv o3ea8@t '(lexical)) ((lambda (o3eb2@lex) o3eb2@lex) (o2e42@lexical-var o3ea3@value)) (if (memv o3ea8@t '(global-macro global-macro!)) (o2ed8@chi-expr (o2ed2@chi-global-macro o3ea3@value o3e90@e) o3e91@r o3e92@mr) (if (memv o3ea8@t '(local-macro local-macro!)) (o2ed8@chi-expr (o2ed0@chi-local-macro o3ea3@value o3e90@e) o3e91@r o3e92@mr) (if (memv o3ea8@t '(macro macro!)) (o2ed8@chi-expr (o2ece@chi-macro o3ea3@value o3e90@e) o3e91@r o3e92@mr) (if (memv o3ea8@t '(constant)) ((lambda (o3eb4@datum) (list 'quote o3eb4@datum)) o3ea3@value) (if (memv o3ea8@t '(set!)) (o2eda@chi-set! o3e90@e o3e91@r o3e92@mr) (if (memv o3ea8@t '(begin)) ((lambda (o3eb6@t) ((lambda (o3eb8@ls/false) (if o3eb8@ls/false (apply (lambda (o3eba@x o3ebb@x*) (o2c0a@o2b79@build-sequence '#f (o2ed4@chi-expr* (cons o3eba@x o3ebb@x*) o3e91@r o3e92@mr))) o3eb8@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3eb6@t))) (o2eb6@syntax-dispatch o3eb6@t '(_ any . each-any)))) o3e90@e) (if (memv o3ea8@t '(let-syntax letrec-syntax)) ((lambda (o3ebe@t) ((lambda (o3ec0@ls/false) (if (and o3ec0@ls/false (apply (lambda (o3ec2@xlhs* o3ec3@xrhs* o3ec4@xbody o3ec5@xbody*) (if (not (o2cb5@valid-bound-ids? o3ec2@xlhs*)) (o2f9f@syntax-violation '#f '"invalid identifiers" o3e90@e) (void))) o3ec0@ls/false)) (apply (lambda (o3eca@xlhs* o3ecb@xrhs* o3ecc@xbody o3ecd@xbody*) ((lambda (o3ed2@xlab*) ((lambda (o3ed4@xrib) ((lambda (o3ed6@xb*) ((lambda () (o2c0a@o2b79@build-sequence '#f (o2ed4@chi-expr* (map (lambda (o3ed8@x) (o2c97@add-subst o3ed4@xrib o3ed8@x)) (cons o3ecc@xbody o3ecd@xbody*)) (append (map cons o3ed2@xlab* o3ed6@xb*) o3e91@r) (append (map cons o3ed2@xlab* o3ed6@xb*) o3e92@mr)))))) (map (lambda (o3eda@x) (o2ce9@make-eval-transformer (o2f13@expand-transformer (if (eq? o3ea4@type 'let-syntax) o3eda@x (o2c97@add-subst o3ed4@xrib o3eda@x)) o3e92@mr))) o3ecb@xrhs*))) (o2c66@make-full-rib o3eca@xlhs* o3ed2@xlab*))) (map o2c2f@gen-label o3eca@xlhs*))) o3ec0@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3ebe@t))) (o2eb6@syntax-dispatch o3ebe@t '(_ #(each (any any)) any . each-any)))) o3e90@e) (if (memv o3ea8@t '(displaced-lexical)) (o2f9f@syntax-violation '#f '"identifier out of context" o3e90@e) (if (memv o3ea8@t '(syntax)) (o2f9f@syntax-violation '#f '"reference to pattern variable outside a syntax form" o3e90@e) (if (memv o3ea8@t '(define define-syntax module import library)) (o2f9f@syntax-violation '#f (string-append ((lambda (o3edc@t) (if (memv o3edc@t '(define)) '"a definition" (if (memv o3edc@t '(define-syntax)) '"a define-syntax" (if (memv o3edc@t '(module)) '"a module definition" (if (memv o3edc@t '(library)) '"a library definition" (if (memv o3edc@t '(import)) '"an import declaration" (if (memv o3edc@t '(export)) '"an export declaration" '"a non-expression"))))))) o3ea4@type) '" was found where an expression was expected") o3e90@e) (if (memv o3ea8@t '(mutable)) (o2f9f@syntax-violation '#f '"attempt to reference an unexportable variable" o3e90@e) (o2f9f@syntax-violation '#f '"invalid expression" o3e90@e)))))))))))))))))) o3ea4@type)) o3e9e@o3e9b o3e9d@o3e99 o3e9c@o3e97))))) (set! o2eda@chi-set! (lambda (o3ede@e o3edf@r o3ee0@mr) ((lambda (o3ee4@t) ((lambda (o3ee6@ls/false) (if (and o3ee6@ls/false (apply (lambda (o3ee8@x o3ee9@v) (o2cab@id? o3ee8@x)) o3ee6@ls/false)) (apply (lambda (o3eec@x o3eed@v) (call-with-values (lambda () (o2cd3@syntax-type o3eec@x o3edf@r)) (lambda (o3ef6@o3ef1 o3ef7@o3ef3 o3ef8@o3ef5) ((lambda (o3efc@kwd o3efd@value o3efe@type) ((lambda (o3f02@t) (if (memv o3f02@t '(lexical)) (begin (o2e46@set-lexical-mutable! o3efd@value '#t) (list 'set! (o2e42@lexical-var o3efd@value) (o2ed8@chi-expr o3eed@v o3edf@r o3ee0@mr))) (if (memv o3f02@t '(core-prim)) (o2f9f@syntax-violation '#f '"cannot modify imported core primitive" o3ede@e) (if (memv o3f02@t '(global)) (o2f9f@syntax-violation '#f '"attempt to modify imported binding" o3ede@e) (if (memv o3f02@t '(global-macro!)) (o2ed8@chi-expr (o2ed2@chi-global-macro o3efd@value o3ede@e) o3edf@r o3ee0@mr) (if (memv o3f02@t '(local-macro!)) (o2ed8@chi-expr (o2ed0@chi-local-macro o3efd@value o3ede@e) o3edf@r o3ee0@mr) (if (memv o3f02@t '(mutable)) (o2f9f@syntax-violation '#f '"attempt to assign to an unexportable variable" o3ede@e) (o2f9f@syntax-violation '#f '"invalid syntax" o3ede@e)))))))) o3efe@type)) o3ef8@o3ef5 o3ef7@o3ef3 o3ef6@o3ef1)))) o3ee6@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3ee4@t))) (o2eb6@syntax-dispatch o3ee4@t '(_ any any)))) o3ede@e))) (set! o2edc@verify-formals (lambda (o3f04@fmls o3f05@stx) ((lambda (o3f08@t) ((lambda (o3f0a@ls/false) (if o3f0a@ls/false (apply (lambda (o3f0c@x*) (if (not (o2cb5@valid-bound-ids? o3f0c@x*)) (o2e70@invalid-fmls-error o3f05@stx o3f04@fmls) (void))) o3f0a@ls/false) ((lambda (o3f0e@t) ((lambda (o3f10@ls/false) (if o3f10@ls/false (apply (lambda (o3f12@x* o3f13@x) (if (not (o2cb5@valid-bound-ids? (cons o3f13@x o3f12@x*))) (o2e70@invalid-fmls-error o3f05@stx o3f04@fmls) (void))) o3f10@ls/false) ((lambda (o3f16@t) ((lambda (o3f18@ls/false) (if o3f18@ls/false (apply (lambda () (o2f9f@syntax-violation '#f '"invalid syntax" o3f05@stx)) o3f18@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3f16@t))) (o2eb6@syntax-dispatch o3f16@t '_))) o3f0e@t))) (o2eb6@syntax-dispatch o3f0e@t '#(each+ any () any)))) o3f08@t))) (o2eb6@syntax-dispatch o3f08@t 'each-any))) o3f04@fmls))) (set! o2ede@chi-lambda-clause (lambda (o3f1a@stx o3f1b@fmls o3f1c@body* o3f1d@r o3f1e@mr) ((lambda (o3f24@t) ((lambda (o3f26@ls/false) (if o3f26@ls/false (apply (lambda (o3f28@x*) (begin (o2edc@verify-formals o3f1b@fmls o3f1a@stx) ((lambda (o3f2a@lex* o3f2b@lab*) (values o3f2a@lex* (o2eee@chi-internal (o2c97@add-subst (o2c66@make-full-rib o3f28@x* o3f2b@lab*) o3f1c@body*) (o2e4a@add-lexicals o3f2b@lab* o3f2a@lex* o3f1d@r) o3f1e@mr))) (map o2c2b@gen-lexical o3f28@x*) (map o2c2f@gen-label o3f28@x*)))) o3f26@ls/false) ((lambda (o3f2e@t) ((lambda (o3f30@ls/false) (if o3f30@ls/false (apply (lambda (o3f32@x* o3f33@x) (begin (o2edc@verify-formals o3f1b@fmls o3f1a@stx) ((lambda (o3f36@lex* o3f37@lab* o3f38@lex o3f39@lab) (values (append o3f36@lex* o3f38@lex) (o2eee@chi-internal (o2c97@add-subst (o2c66@make-full-rib (cons o3f33@x o3f32@x*) (cons o3f39@lab o3f37@lab*)) o3f1c@body*) (o2e4a@add-lexicals (cons o3f39@lab o3f37@lab*) (cons o3f38@lex o3f36@lex*) o3f1d@r) o3f1e@mr))) (map o2c2b@gen-lexical o3f32@x*) (map o2c2f@gen-label o3f32@x*) (o2c2b@gen-lexical o3f33@x) (o2c2f@gen-label o3f33@x)))) o3f30@ls/false) ((lambda (o3f3e@t) ((lambda (o3f40@ls/false) (if o3f40@ls/false (apply (lambda () (o2f9f@syntax-violation '#f '"invalid syntax" o3f1b@fmls)) o3f40@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o3f3e@t))) (o2eb6@syntax-dispatch o3f3e@t '_))) o3f2e@t))) (o2eb6@syntax-dispatch o3f2e@t '#(each+ any () any)))) o3f24@t))) (o2eb6@syntax-dispatch o3f24@t 'each-any))) o3f1b@fmls))) (set! o2ee0@chi-lambda-clause* (lambda (o3f42@stx o3f43@fmls* o3f44@body** o3f45@r o3f46@mr) (if (null? o3f43@fmls*) (values '() '()) (call-with-values (lambda () (o2ede@chi-lambda-clause o3f42@stx (car o3f43@fmls*) (car o3f44@body**) o3f45@r o3f46@mr)) (lambda (o3f50@o3f4d o3f51@o3f4f) ((lambda (o3f54@b o3f55@a) (call-with-values (lambda () (o2ee0@chi-lambda-clause* o3f42@stx (cdr o3f43@fmls*) (cdr o3f44@body**) o3f45@r o3f46@mr)) (lambda (o3f5c@o3f59 o3f5d@o3f5b) ((lambda (o3f60@b* o3f61@a*) (values (cons o3f55@a o3f61@a*) (cons o3f54@b o3f60@b*))) o3f5d@o3f5b o3f5c@o3f59)))) o3f51@o3f4f o3f50@o3f4d)))))) (set! o2ee2@chi-defun (lambda (o3f64@x o3f65@r o3f66@mr) ((lambda (o3f6a@fmls o3f6b@body*) (call-with-values (lambda () (o2ede@chi-lambda-clause o3f6a@fmls o3f6a@fmls o3f6b@body* o3f65@r o3f66@mr)) (lambda (o3f72@o3f6f o3f73@o3f71) ((lambda (o3f76@body o3f77@fmls) (o2c07@o2b47@build-lambda '#f o3f77@fmls o3f76@body)) o3f73@o3f71 o3f72@o3f6f)))) (car o3f64@x) (cdr o3f64@x)))) (set! o2ee4@chi-rhs (lambda (o3f7a@rhs o3f7b@r o3f7c@mr) ((lambda (o3f80@t) (if (memv o3f80@t '(defun)) (o2ee2@chi-defun (cdr o3f7a@rhs) o3f7b@r o3f7c@mr) (if (memv o3f80@t '(expr)) ((lambda (o3f82@expr) (o2ed8@chi-expr o3f82@expr o3f7b@r o3f7c@mr)) (cdr o3f7a@rhs)) (if (memv o3f80@t '(top-expr)) ((lambda (o3f84@expr) (o2c0a@o2b79@build-sequence '#f (list (o2ed8@chi-expr o3f84@expr o3f7b@r o3f7c@mr) (o2c0b@o2b7b@build-void)))) (cdr o3f7a@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" o3f7a@rhs))))) (car o3f7a@rhs)))) (set! o2ee6@expand-interaction-rhs*/init* (lambda (o3f86@lhs* o3f87@rhs* o3f88@init* o3f89@r o3f8a@mr) ((letrec ((o3f90@f (lambda (o3f92@lhs* o3f93@rhs*) (if (null? o3f92@lhs*) (map (lambda (o3f96@x) (o2ed8@chi-expr o3f96@x o3f89@r o3f8a@mr)) o3f88@init*) ((lambda (o3f98@lhs o3f99@rhs) ((lambda (o3f9c@t) (if (memv o3f9c@t '(defun)) ((lambda (o3f9e@rhs) (cons (list 'set! o3f98@lhs o3f9e@rhs) (o3f90@f (cdr o3f92@lhs*) (cdr o3f93@rhs*)))) (o2ee2@chi-defun (cdr o3f99@rhs) o3f89@r o3f8a@mr)) (if (memv o3f9c@t '(expr)) ((lambda (o3fa0@rhs) (cons (list 'set! o3f98@lhs o3fa0@rhs) (o3f90@f (cdr o3f92@lhs*) (cdr o3f93@rhs*)))) (o2ed8@chi-expr (cdr o3f99@rhs) o3f89@r o3f8a@mr)) (if (memv o3f9c@t '(top-expr)) ((lambda (o3fa2@e) (cons o3fa2@e (o3f90@f (cdr o3f92@lhs*) (cdr o3f93@rhs*)))) (o2ed8@chi-expr (cdr o3f99@rhs) o3f89@r o3f8a@mr)) (error 'expand-interaction '"invallid" o3f99@rhs))))) (car o3f99@rhs))) (car o3f92@lhs*) (car o3f93@rhs*)))))) o3f90@f) o3f86@lhs* o3f87@rhs*))) (set! o2ee8@chi-rhs* (lambda (o3fa4@rhs* o3fa5@r o3fa6@mr) ((letrec ((o3faa@f (lambda (o3fac@ls) (if (null? o3fac@ls) '() ((lambda (o3fae@a) (cons o3fae@a (o3faa@f (cdr o3fac@ls)))) (o2ee4@chi-rhs (car o3fac@ls) o3fa5@r o3fa6@mr)))))) o3faa@f) o3fa4@rhs*))) (set! o2eea@find-bound=? (lambda (o3fb0@x o3fb1@lhs* o3fb2@rhs*) (if (null? o3fb1@lhs*) '#f (if (o2cb1@bound-id=? o3fb0@x (car o3fb1@lhs*)) (car o3fb2@rhs*) (o2eea@find-bound=? o3fb0@x (cdr o3fb1@lhs*) (cdr o3fb2@rhs*)))))) (set! o2eec@find-dups (lambda (o3fb6@ls) ((letrec ((o3fb8@f (lambda (o3fba@ls o3fbb@dups) (if (null? o3fba@ls) o3fbb@dups ((lambda (o3fbe@t) (if o3fbe@t ((lambda (o3fc0@x) (o3fb8@f (cdr o3fba@ls) (cons (list (car o3fba@ls) o3fc0@x) o3fbb@dups))) o3fbe@t) (o3fb8@f (cdr o3fba@ls) o3fbb@dups))) (o2eea@find-bound=? (car o3fba@ls) (cdr o3fba@ls) (cdr o3fba@ls))))))) o3fb8@f) o3fb6@ls '()))) (set! o2eee@chi-internal (lambda (o3fc2@e* o3fc3@r o3fc4@mr) ((lambda (o3fc8@rib) (call-with-values (lambda () (o2f11@chi-body* (map (lambda (o3fda@x) (o2c97@add-subst o3fc8@rib o3fda@x)) (o2ca9@syntax->list o3fc2@e*)) o3fc3@r o3fc4@mr '() '() '() '() '() o3fc8@rib '#f)) (lambda (o3fdc@o3fcb o3fdd@o3fcd o3fde@o3fcf o3fdf@o3fd1 o3fe0@o3fd3 o3fe1@o3fd5 o3fe2@o3fd7 o3fe3@o3fd9) ((lambda (o3fec@_exp* o3fed@kwd* o3fee@mod** o3fef@rhs* o3ff0@lex* o3ff1@mr o3ff2@r o3ff3@e*) (begin (if (null? o3ff3@e*) (o2f9f@syntax-violation '#f '"no expression in body" o3ff3@e*) (void)) ((lambda (o3ffc@init*) ((lambda (o3ffe@rhs*) ((lambda () (o2c0d@o2b7f@build-letrec* '#f (reverse o3ff0@lex*) (reverse o3ffe@rhs*) (o2c0a@o2b79@build-sequence '#f o3ffc@init*))))) (o2ee8@chi-rhs* o3fef@rhs* o3ff2@r o3ff1@mr))) (o2ed4@chi-expr* (append (apply append (reverse o3fee@mod**)) o3ff3@e*) o3ff2@r o3ff1@mr)))) o3fe3@o3fd9 o3fe2@o3fd7 o3fe1@o3fd5 o3fe0@o3fd3 o3fdf@o3fd1 o3fde@o3fcf o3fdd@o3fcd o3fdc@o3fcb)))) (o2c5a@make-empty-rib)))) (set! o2ef0@parse-module (lambda (o4000@e) ((lambda (o4002@t) ((lambda (o4004@ls/false) (if o4004@ls/false (apply (lambda (o4006@export* o4007@b*) (begin (if (not (for-all o2cab@id? o4006@export*)) (o2f9f@syntax-violation '#f '"module exports must be identifiers" o4000@e) (void)) (values '#f (list->vector o4006@export*) o4007@b*))) o4004@ls/false) ((lambda (o400a@t) ((lambda (o400c@ls/false) (if o400c@ls/false (apply (lambda (o400e@name o400f@export* o4010@b*) (begin (if (not (o2cab@id? o400e@name)) (o2f9f@syntax-violation '#f '"module name must be an identifier" o4000@e) (void)) (if (not (for-all o2cab@id? o400f@export*)) (o2f9f@syntax-violation '#f '"module exports must be identifiers" o4000@e) (void)) (values o400e@name (list->vector o400f@export*) o4010@b*))) o400c@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o400a@t))) (o2eb6@syntax-dispatch o400a@t '(_ any each-any . each-any)))) o4002@t))) (o2eb6@syntax-dispatch o4002@t '(_ each-any . each-any)))) o4000@e))) (set! o2ef6@o2ef1 (make-record-type-descriptor 'module-interface '#f 'o2ef4 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! o2ef8@o2ef3 '#f) (set! o2efa@o2ef2 (make-record-constructor-descriptor o2ef6@o2ef1 '#f o2ef8@o2ef3)) (set! o2efd@module-interface? (record-predicate o2ef6@o2ef1)) (set! o2eff@make-module-interface (record-constructor o2efa@o2ef2)) (set! o2f01@module-interface-first-mark (record-accessor o2ef6@o2ef1 '0)) (set! o2f03@module-interface-exp-id-vec (record-accessor o2ef6@o2ef1 '1)) (set! o2f05@module-interface-exp-lab-vec (record-accessor o2ef6@o2ef1 '2)) (set! o2f07@set-module-interface-first-mark! (record-mutator o2ef6@o2ef1 '0)) (set! o2f09@set-module-interface-exp-id-vec! (record-mutator o2ef6@o2ef1 '1)) (set! o2f0b@set-module-interface-exp-lab-vec! (record-mutator o2ef6@o2ef1 '2)) (set! o2f0d@module-interface-exp-id* (lambda (o4014@iface o4015@id) ((lambda (o4019@diff-marks) (begin (set! o4019@diff-marks (lambda (o4020@ls o4021@x) (begin (if (null? o4020@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (o4024@a) (if (eq? o4024@a o4021@x) '() (cons o4024@a (o4019@diff-marks (cdr o4020@ls) o4021@x)))) (car o4020@ls))))) ((lambda (o401a@diff o401b@id-vec) (if (null? o401a@diff) o401b@id-vec (vector-map (lambda (o401e@x) (o2c75@make-stx (o2c77@stx-expr o401e@x) (append o401a@diff (o2c79@stx-mark* o401e@x)) '() '())) o401b@id-vec))) (o4019@diff-marks (o2c79@stx-mark* o4015@id) (o2f01@module-interface-first-mark o4014@iface)) (o2f03@module-interface-exp-id-vec o4014@iface)))) '#f))) (set! o2f0f@chi-internal-module (lambda (o4026@e o4027@r o4028@mr o4029@lex* o402a@rhs* o402b@mod** o402c@kwd*) (call-with-values (lambda () (o2ef0@parse-module o4026@e)) (lambda (o403a@o4035 o403b@o4037 o403c@o4039) ((lambda (o4040@e* o4041@exp-id* o4042@name) ((lambda (o4046@rib) ((lambda (o4048@e*) ((lambda () (call-with-values (lambda () (o2f11@chi-body* o4048@e* o4027@r o4028@mr o4029@lex* o402a@rhs* o402b@mod** o402c@kwd* '() o4046@rib '#f)) (lambda (o405a@o404b o405b@o404d o405c@o404f o405d@o4051 o405e@o4053 o405f@o4055 o4060@o4057 o4061@o4059) ((lambda (o406a@_exp* o406b@kwd* o406c@mod** o406d@rhs* o406e@lex* o406f@mr o4070@r o4071@e*) ((lambda (o407a@exp-lab* o407b@mod**) (if (not o4042@name) (values o406e@lex* o406d@rhs* o4041@exp-id* o407a@exp-lab* o4070@r o406f@mr o407b@mod** o406b@kwd*) ((lambda (o407e@lab o407f@iface) (values o406e@lex* o406d@rhs* (vector o4042@name) (vector o407e@lab) (cons (cons o407e@lab (cons '$module o407f@iface)) o4070@r) (cons (cons o407e@lab (cons '$module o407f@iface)) o406f@mr) o407b@mod** o406b@kwd*)) (o2c2f@gen-label 'module) (o2eff@make-module-interface (car (o2c79@stx-mark* o4042@name)) (vector-map (lambda (o4082@x) (o2c75@make-stx (o2c77@stx-expr o4082@x) (o2c79@stx-mark* o4082@x) '() '())) o4041@exp-id*) o407a@exp-lab*)))) (vector-map (lambda (o4084@x) (or (o2cc5@id->label (o2c75@make-stx (o2cad@id->sym o4084@x) (o2c79@stx-mark* o4084@x) (list o4046@rib) '())) (o2f9f@syntax-violation '#f '"cannot find module export" o4084@x))) o4041@exp-id*) (cons o4071@e* o406c@mod**))) o4061@o4059 o4060@o4057 o405f@o4055 o405e@o4053 o405d@o4051 o405c@o404f o405b@o404d o405a@o404b)))))) (map (lambda (o4086@x) (o2c97@add-subst o4046@rib o4086@x)) (o2ca9@syntax->list o4040@e*)))) (o2c5a@make-empty-rib))) o403c@o4039 o403b@o4037 o403a@o4035))))) (set! o2f11@chi-body* (lambda (o4088@e* o4089@r o408a@mr o408b@lex* o408c@rhs* o408d@mod** o408e@kwd* o408f@exp* o4090@rib o4091@top?) (if (null? o4088@e*) (values o4088@e* o4089@r o408a@mr o408b@lex* o408c@rhs* o408d@mod** o408e@kwd* o408f@exp*) ((lambda (o409c@e) (call-with-values (lambda () (o2cd3@syntax-type o409c@e o4089@r)) (lambda (o40a4@o409f o40a5@o40a1 o40a6@o40a3) ((lambda (o40aa@kwd o40ab@value o40ac@type) ((lambda (o40b0@kwd*) ((lambda (o40b2@t) (if (memv o40b2@t '(define)) (call-with-values (lambda () (o2e3a@parse-define o409c@e)) (lambda (o40b8@o40b5 o40b9@o40b7) ((lambda (o40bc@rhs o40bd@id) (begin (if (o2cb9@bound-id-member? o40bd@id o40b0@kwd*) (o2f9f@syntax-violation '#f '"cannot redefine keyword" o409c@e) (void)) (call-with-values (lambda () (o2c33@gen-define-label+loc o40bd@id o4090@rib)) (lambda (o40c4@o40c1 o40c5@o40c3) ((lambda (o40c8@lex o40c9@lab) (begin (o2c5c@extend-rib! o4090@rib o40bd@id o40c9@lab) (o2f11@chi-body* (cdr o4088@e*) (o2e48@add-lexical o40c9@lab o40c8@lex o4089@r) o408a@mr (cons o40c8@lex o408b@lex*) (cons o40bc@rhs o408c@rhs*) o408d@mod** o40b0@kwd* o408f@exp* o4090@rib o4091@top?))) o40c5@o40c3 o40c4@o40c1))))) o40b9@o40b7 o40b8@o40b5))) (if (memv o40b2@t '(define-syntax)) (call-with-values (lambda () (o2e3c@parse-define-syntax o409c@e)) (lambda (o40d0@o40cd o40d1@o40cf) ((lambda (o40d4@rhs o40d5@id) (begin (if (o2cb9@bound-id-member? o40d5@id o40b0@kwd*) (o2f9f@syntax-violation '#f '"cannot redefine keyword" o409c@e) (void)) ((lambda (o40d8@lab o40d9@expanded-rhs) (begin (o2c5c@extend-rib! o4090@rib o40d5@id o40d8@lab) ((lambda (o40dc@b) (o2f11@chi-body* (cdr o4088@e*) (cons (cons o40d8@lab o40dc@b) o4089@r) (cons (cons o40d8@lab o40dc@b) o408a@mr) o408b@lex* o408c@rhs* o408d@mod** o40b0@kwd* o408f@exp* o4090@rib o4091@top?)) (o2ce9@make-eval-transformer o40d9@expanded-rhs)))) (o2c35@gen-define-label o40d5@id o4090@rib) (o2f13@expand-transformer o40d4@rhs o408a@mr)))) o40d1@o40cf o40d0@o40cd))) (if (memv o40b2@t '(let-syntax letrec-syntax)) ((lambda (o40de@t) ((lambda (o40e0@ls/false) (if (and o40e0@ls/false (apply (lambda (o40e2@xlhs* o40e3@xrhs* o40e4@xbody*) (if (not (o2cb5@valid-bound-ids? o40e2@xlhs*)) (o2f9f@syntax-violation '#f '"invalid identifiers" o409c@e) (void))) o40e0@ls/false)) (apply (lambda (o40e8@xlhs* o40e9@xrhs* o40ea@xbody*) ((lambda (o40ee@xlab*) ((lambda (o40f0@xrib) ((lambda (o40f2@xb*) ((lambda () (o2f11@chi-body* (append (map (lambda (o40f4@x) (o2c97@add-subst o40f0@xrib o40f4@x)) o40ea@xbody*) (cdr o4088@e*)) (append (map cons o40ee@xlab* o40f2@xb*) o4089@r) (append (map cons o40ee@xlab* o40f2@xb*) o408a@mr) o408b@lex* o408c@rhs* o408d@mod** o40b0@kwd* o408f@exp* o4090@rib o4091@top?)))) (map (lambda (o40f6@x) (o2ce9@make-eval-transformer (o2f13@expand-transformer (if (eq? o40ac@type 'let-syntax) o40f6@x (o2c97@add-subst o40f0@xrib o40f6@x)) o408a@mr))) o40e9@xrhs*))) (o2c66@make-full-rib o40e8@xlhs* o40ee@xlab*))) (map o2c2f@gen-label o40e8@xlhs*))) o40e0@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o40de@t))) (o2eb6@syntax-dispatch o40de@t '(_ #(each (any any)) . each-any)))) o409c@e) (if (memv o40b2@t '(begin)) ((lambda (o40f8@t) ((lambda (o40fa@ls/false) (if o40fa@ls/false (apply (lambda (o40fc@x*) (o2f11@chi-body* (append o40fc@x* (cdr o4088@e*)) o4089@r o408a@mr o408b@lex* o408c@rhs* o408d@mod** o40b0@kwd* o408f@exp* o4090@rib o4091@top?)) o40fa@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o40f8@t))) (o2eb6@syntax-dispatch o40f8@t '(_ . each-any)))) o409c@e) (if (memv o40b2@t '(global-macro global-macro!)) (o2f11@chi-body* (cons (o2c97@add-subst o4090@rib (o2ed2@chi-global-macro o40ab@value o409c@e)) (cdr o4088@e*)) o4089@r o408a@mr o408b@lex* o408c@rhs* o408d@mod** o40b0@kwd* o408f@exp* o4090@rib o4091@top?) (if (memv o40b2@t '(local-macro local-macro!)) (o2f11@chi-body* (cons (o2c97@add-subst o4090@rib (o2ed0@chi-local-macro o40ab@value o409c@e)) (cdr o4088@e*)) o4089@r o408a@mr o408b@lex* o408c@rhs* o408d@mod** o40b0@kwd* o408f@exp* o4090@rib o4091@top?) (if (memv o40b2@t '(macro macro!)) (o2f11@chi-body* (cons (o2c97@add-subst o4090@rib (o2ece@chi-macro o40ab@value o409c@e)) (cdr o4088@e*)) o4089@r o408a@mr o408b@lex* o408c@rhs* o408d@mod** o40b0@kwd* o408f@exp* o4090@rib o4091@top?) (if (memv o40b2@t '(module)) (call-with-values (lambda () (o2f0f@chi-internal-module o409c@e o4089@r o408a@mr o408b@lex* o408c@rhs* o408d@mod** o40b0@kwd*)) (lambda (o410e@o40ff o410f@o4101 o4110@o4103 o4111@o4105 o4112@o4107 o4113@o4109 o4114@o410b o4115@o410d) ((lambda (o411e@kwd* o411f@mod** o4120@mr o4121@r o4122@m-exp-lab* o4123@m-exp-id* o4124@rhs* o4125@lex*) (begin (vector-for-each (lambda (o412e@id o412f@lab) (o2c5c@extend-rib! o4090@rib o412e@id o412f@lab)) o4123@m-exp-id* o4122@m-exp-lab*) (o2f11@chi-body* (cdr o4088@e*) o4121@r o4120@mr o4125@lex* o4124@rhs* o411f@mod** o411e@kwd* o408f@exp* o4090@rib o4091@top?))) o4115@o410d o4114@o410b o4113@o4109 o4112@o4107 o4111@o4105 o4110@o4103 o410f@o4101 o410e@o40ff))) (if (memv o40b2@t '(library)) (begin (o2f81@library-expander (o2cc1@stx->datum o409c@e)) (o2f11@chi-body* (cdr o4088@e*) o4089@r o408a@mr o408b@lex* o408c@rhs* o408d@mod** o40b0@kwd* o408f@exp* o4090@rib o4091@top?)) (if (memv o40b2@t '(export)) ((lambda (o4132@t) ((lambda (o4134@ls/false) (if o4134@ls/false (apply (lambda (o4136@exp-decl*) (o2f11@chi-body* (cdr o4088@e*) o4089@r o408a@mr o408b@lex* o408c@rhs* o408d@mod** o40b0@kwd* (append o4136@exp-decl* o408f@exp*) o4090@rib o4091@top?)) o4134@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o4132@t))) (o2eb6@syntax-dispatch o4132@t '(_ . each-any)))) o409c@e) (if (memv o40b2@t '(import)) ((lambda () ((lambda (o4139@module-import? o413b@module-import o413d@library-import) (begin (set! o4139@module-import? (lambda (o418c@e) ((lambda (o418e@t) ((lambda (o4190@ls/false) (if (and o4190@ls/false (apply (lambda (o4192@id) (o2cab@id? o4192@id)) o4190@ls/false)) (apply (lambda (o4194@id) '#t) o4190@ls/false) ((lambda (o4196@t) ((lambda (o4198@ls/false) (if o4198@ls/false (apply (lambda (o419a@imp*) '#f) o4198@ls/false) ((lambda (o419c@t) ((lambda (o419e@ls/false) (if o419e@ls/false (apply (lambda () (o2f9f@syntax-violation '#f '"malformed import form" o418c@e)) o419e@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o419c@t))) (o2eb6@syntax-dispatch o419c@t '_))) o4196@t))) (o2eb6@syntax-dispatch o4196@t '(_ . each-any)))) o418e@t))) (o2eb6@syntax-dispatch o418e@t '(_ any)))) o418c@e))) (set! o413b@module-import (lambda (o416a@e o416b@r) ((lambda (o416e@t) ((lambda (o4170@ls/false) (if (and o4170@ls/false (apply (lambda (o4172@id) (o2cab@id? o4172@id)) o4170@ls/false)) (apply (lambda (o4174@id) (call-with-values (lambda () (o2cd3@syntax-type o4174@id o416b@r)) (lambda (o417c@o4177 o417d@o4179 o417e@o417b) ((lambda (o4182@kwd o4183@value o4184@type) ((lambda (o4188@t) (if (memv o4188@t '($module)) ((lambda (o418a@iface) (values (o2f0d@module-interface-exp-id* o418a@iface o4174@id) (o2f05@module-interface-exp-lab-vec o418a@iface))) o4183@value) (o2f9f@syntax-violation '#f '"invalid import" o416a@e))) o4184@type)) o417e@o417b o417d@o4179 o417c@o4177)))) o4170@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o416e@t))) (o2eb6@syntax-dispatch o416e@t '(_ any)))) o416a@e))) (set! o413d@library-import (lambda (o414e@e) ((lambda (o4150@t) ((lambda (o4152@ls/false) (if o4152@ls/false (apply (lambda (o4154@ctxt o4155@imp*) (call-with-values (lambda () (o2f1b@parse-import-spec* (o2fa5@syntax->datum o4155@imp*))) (lambda (o415c@o4159 o415d@o415b) ((lambda (o4160@subst-labels o4161@subst-names) (values (vector-map (lambda (o4164@name) (o2c89@datum->stx o4154@ctxt o4164@name)) o4161@subst-names) o4160@subst-labels)) o415d@o415b o415c@o4159)))) o4152@ls/false) ((lambda (o4166@t) ((lambda (o4168@ls/false) (if o4168@ls/false (apply (lambda () (o2f9f@syntax-violation '#f '"invalid import form" o414e@e)) o4168@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o4166@t))) (o2eb6@syntax-dispatch o4166@t '_))) o4150@t))) (o2eb6@syntax-dispatch o4150@t '(any . each-any)))) o414e@e))) (begin (call-with-values (lambda () (if (o4139@module-import? o409c@e) (o413b@module-import o409c@e o4089@r) (o413d@library-import o409c@e))) (lambda (o4142@o413f o4143@o4141) ((lambda (o4146@lab* o4147@id*) (vector-for-each (lambda (o414a@id o414b@lab) (o2c5c@extend-rib! o4090@rib o414a@id o414b@lab)) o4147@id* o4146@lab*)) o4143@o4141 o4142@o413f))) (o2f11@chi-body* (cdr o4088@e*) o4089@r o408a@mr o408b@lex* o408c@rhs* o408d@mod** o40b0@kwd* o408f@exp* o4090@rib o4091@top?)))) '#f '#f '#f))) (if o4091@top? (o2f11@chi-body* (cdr o4088@e*) o4089@r o408a@mr (cons (o2c2b@gen-lexical 'dummy) o408b@lex*) (cons (cons 'top-expr o409c@e) o408c@rhs*) o408d@mod** o40b0@kwd* o408f@exp* o4090@rib o4091@top?) (values o4088@e* o4089@r o408a@mr o408b@lex* o408c@rhs* o408d@mod** o40b0@kwd* o408f@exp*)))))))))))))) o40ac@type)) (if (o2cab@id? o40aa@kwd) (cons o40aa@kwd o408e@kwd*) o408e@kwd*))) o40a6@o40a3 o40a5@o40a1 o40a4@o409f)))) (car o4088@e*))))) (set! o2f13@expand-transformer (lambda (o41a0@expr o41a1@r) ((lambda (o41a4@rtc) ((lambda (o41a6@expanded-rhs) (begin (for-each ((lambda (o41a8@mark-visit) (lambda (o41aa@x) (begin (o2acf@o2970@invoke-library o41aa@x) (o41a8@mark-visit o41aa@x)))) (o2f23@vis-collector)) (o41a4@rtc)) o41a6@expanded-rhs)) ((lambda (o41b4@o41ad o41b5@o41af o41b6@o41b1 o41b7@o41b3) ((lambda (o41bc@swap) (dynamic-wind o41bc@swap (lambda () (o2ed8@chi-expr o41a0@expr o41a1@r o41a1@r)) o41bc@swap)) (lambda () (begin ((lambda (o41be@t) (begin (o41b4@o41ad o41b6@o41b1) (set! o41b6@o41b1 o41be@t))) (o41b4@o41ad)) ((lambda (o41c0@t) (begin (o41b5@o41af o41b7@o41b3) (set! o41b7@o41b3 o41c0@t))) (o41b5@o41af)))))) o2f21@inv-collector o2f23@vis-collector o41a4@rtc (lambda (o41c2@x) (values))))) (o2f1f@make-collector)))) (set! o2f15@parse-exports (lambda (o41c4@exp*) ((letrec ((o41c6@f (lambda (o41c8@exp* o41c9@int* o41ca@ext*) (if (null? o41c8@exp*) (begin (if (not (o2cb5@valid-bound-ids? o41ca@ext*)) (o2f9f@syntax-violation 'export '"invalid exports" (o2eec@find-dups o41ca@ext*)) (void)) (values (map o2fa5@syntax->datum o41ca@ext*) o41c9@int*)) ((lambda (o41ce@t) ((lambda (o41d0@ls/false) (if o41d0@ls/false (apply (lambda (o41d2@rename o41d3@i* o41d4@e*) (begin (if (not (and (eq? (o2fa5@syntax->datum o41d2@rename) 'rename) (for-all o2cab@id? o41d3@i*) (for-all o2cab@id? o41d4@e*))) (o2f9f@syntax-violation 'export '"invalid export specifier" (car o41c8@exp*)) (void)) (o41c6@f (cdr o41c8@exp*) (append o41d3@i* o41c9@int*) (append o41d4@e* o41ca@ext*)))) o41d0@ls/false) ((lambda (o41d8@t) ((lambda (o41da@ls/false) (if o41da@ls/false (apply (lambda (o41dc@ie) (begin (if (not (o2cab@id? o41dc@ie)) (o2f9f@syntax-violation 'export '"invalid export" o41dc@ie) (void)) (o41c6@f (cdr o41c8@exp*) (cons o41dc@ie o41c9@int*) (cons o41dc@ie o41ca@ext*)))) o41da@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o41d8@t))) (o2eb6@syntax-dispatch o41d8@t 'any))) o41ce@t))) (o2eb6@syntax-dispatch o41ce@t '(any . #(each (any any)))))) (car o41c8@exp*)))))) o41c6@f) o41c4@exp* '() '()))) (set! o2f17@parse-library-name (lambda (o41de@spec) ((lambda (o41e1@parse) (begin (set! o41e1@parse (lambda (o41ee@x) ((lambda (o41f0@t) ((lambda (o41f2@ls/false) (if (and o41f2@ls/false (apply (lambda (o41f4@v*) (for-all (lambda (o41f6@x) ((lambda (o41f8@x) (and (integer? o41f8@x) (exact? o41f8@x))) (o2fa5@syntax->datum o41f6@x))) o41f4@v*)) o41f2@ls/false)) (apply (lambda (o41fa@v*) (values '() (map o2fa5@syntax->datum o41fa@v*))) o41f2@ls/false) ((lambda (o41fc@t) ((lambda (o41fe@ls/false) (if (and o41fe@ls/false (apply (lambda (o4200@x o4201@rest) (symbol? (o2fa5@syntax->datum o4200@x))) o41fe@ls/false)) (apply (lambda (o4204@x o4205@rest) (call-with-values (lambda () (o41e1@parse o4205@rest)) (lambda (o420c@o4209 o420d@o420b) ((lambda (o4210@v* o4211@x*) (values (cons (o2fa5@syntax->datum o4204@x) o4211@x*) o4210@v*)) o420d@o420b o420c@o4209)))) o41fe@ls/false) ((lambda (o4214@t) ((lambda (o4216@ls/false) (if o4216@ls/false (apply (lambda () (values '() '())) o4216@ls/false) ((lambda (o4218@t) ((lambda (o421a@ls/false) (if o421a@ls/false (apply (lambda () (o2f9f@syntax-violation '#f '"invalid library name" o41de@spec)) o421a@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o4218@t))) (o2eb6@syntax-dispatch o4218@t '_))) o4214@t))) (o2eb6@syntax-dispatch o4214@t '()))) o41fc@t))) (o2eb6@syntax-dispatch o41fc@t '(any . any)))) o41f0@t))) (o2eb6@syntax-dispatch o41f0@t '(each-any)))) o41ee@x))) (call-with-values (lambda () (o41e1@parse o41de@spec)) (lambda (o41e6@o41e3 o41e7@o41e5) ((lambda (o41ea@ver* o41eb@name*) (begin (if (null? o41eb@name*) (o2f9f@syntax-violation '#f '"empty library name" o41de@spec) (void)) (values o41eb@name* o41ea@ver*))) o41e7@o41e5 o41e6@o41e3))))) '#f))) (set! o2f19@parse-library (lambda (o421c@e) ((lambda (o421e@t) ((lambda (o4220@ls/false) (if (and o4220@ls/false (apply (lambda (o4222@library o4223@name* o4224@export o4225@exp* o4226@import o4227@imp* o4228@b*) (and (eq? (o2fa5@syntax->datum o4224@export) 'export) (eq? (o2fa5@syntax->datum o4226@import) 'import) (eq? (o2fa5@syntax->datum o4222@library) 'library))) o4220@ls/false)) (apply (lambda (o4230@library o4231@name* o4232@export o4233@exp* o4234@import o4235@imp* o4236@b*) (values o4231@name* o4233@exp* o4235@imp* o4236@b*)) o4220@ls/false) ((lambda (o423e@t) ((lambda (o4240@ls/false) (if o4240@ls/false (apply (lambda () (o2f9f@syntax-violation '#f '"malformed library" o421c@e)) o4240@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o423e@t))) (o2eb6@syntax-dispatch o423e@t '_))) o421e@t))) (o2eb6@syntax-dispatch o421e@t '(any each-any (any . each-any) (any . each-any) . each-any)))) o421c@e))) (set! o2f1b@parse-import-spec* ((lambda () ((lambda (o4243@idsyn? o4245@dup-error o4247@merge-substs o4249@exclude* o424b@find* o424d@rem* o424f@remove-dups o4251@parse-library-name o4253@import-library o4255@get-import o4257@add-imports!) (begin (set! o4243@idsyn? (lambda (o444c@x) (symbol? (o2fa5@syntax->datum o444c@x)))) (set! o4245@dup-error (lambda (o444a@name) (o2f9f@syntax-violation 'import '"two imports with different bindings" o444a@name))) (set! o4247@merge-substs (lambda (o4438@s o4439@subst) ((lambda (o443d@insert-to-subst) (begin (set! o443d@insert-to-subst (lambda (o443e@a o443f@subst) ((lambda (o4442@name o4443@label) ((lambda (o4446@t) (if o4446@t ((lambda (o4448@x) (if (eq? (cdr o4448@x) o4443@label) o443f@subst (o4245@dup-error o4442@name))) o4446@t) (cons o443e@a o443f@subst))) (assq o4442@name o443f@subst))) (car o443e@a) (cdr o443e@a)))) (if (null? o4438@s) o4439@subst (o443d@insert-to-subst (car o4438@s) (o4247@merge-substs (cdr o4438@s) o4439@subst))))) '#f))) (set! o4249@exclude* (lambda (o4408@sym* o4409@subst) ((lambda (o440d@exclude) (begin (set! o440d@exclude (lambda (o4426@sym o4427@subst) (if (null? o4427@subst) (o2f9f@syntax-violation 'import '"cannot rename unbound identifier" o4426@sym) (if (eq? o4426@sym (caar o4427@subst)) (values (cdar o4427@subst) (cdr o4427@subst)) ((lambda (o442a@a) (call-with-values (lambda () (o440d@exclude o4426@sym (cdr o4427@subst))) (lambda (o4430@o442d o4431@o442f) ((lambda (o4434@subst o4435@old) (values o4435@old (cons o442a@a o4434@subst))) o4431@o442f o4430@o442d)))) (car o4427@subst)))))) (if (null? o4408@sym*) (values '() o4409@subst) (call-with-values (lambda () (o440d@exclude (car o4408@sym*) o4409@subst)) (lambda (o4412@o440f o4413@o4411) ((lambda (o4416@subst o4417@old) (call-with-values (lambda () (o4249@exclude* (cdr o4408@sym*) o4416@subst)) (lambda (o441e@o441b o441f@o441d) ((lambda (o4422@subst o4423@old*) (values (cons o4417@old o4423@old*) o4422@subst)) o441f@o441d o441e@o441b)))) o4413@o4411 o4412@o440f)))))) '#f))) (set! o424b@find* (lambda (o4400@sym* o4401@subst) (map (lambda (o4404@x) ((lambda (o4406@t) (if o4406@t (cdr o4406@t) (o2f9f@syntax-violation 'import '"cannot find identifier" o4404@x))) (assq o4404@x o4401@subst))) o4400@sym*))) (set! o424d@rem* (lambda (o43f8@sym* o43f9@subst) ((letrec ((o43fc@f (lambda (o43fe@subst) (if (null? o43fe@subst) '() (if (memq (caar o43fe@subst) o43f8@sym*) (o43fc@f (cdr o43fe@subst)) (cons (car o43fe@subst) (o43fc@f (cdr o43fe@subst)))))))) o43fc@f) o43f9@subst))) (set! o424f@remove-dups (lambda (o43f6@ls) (if (null? o43f6@ls) '() (if (memq (car o43f6@ls) (cdr o43f6@ls)) (o424f@remove-dups (cdr o43f6@ls)) (cons (car o43f6@ls) (o424f@remove-dups (cdr o43f6@ls))))))) (set! o4251@parse-library-name (lambda (o430e@spec) ((lambda (o4311@subversion? o4313@subversion-pred o4315@version-pred) (begin (set! o4311@subversion? (lambda (o43f2@x) ((lambda (o43f4@x) (and (integer? o43f4@x) (exact? o43f4@x) (>= o43f4@x '0))) (o2fa5@syntax->datum o43f2@x)))) (set! o4313@subversion-pred (lambda (o4392@x*) ((lambda (o4394@t) ((lambda (o4396@ls/false) (if (and o4396@ls/false (apply (lambda (o4398@n) (o4311@subversion? o4398@n)) o4396@ls/false)) (apply (lambda (o439a@n) (lambda (o439c@x) (= o439c@x (o2fa5@syntax->datum o439a@n)))) o4396@ls/false) ((lambda (o439e@t) ((lambda (o43a0@ls/false) (if (and o43a0@ls/false (apply (lambda (o43a2@p? o43a3@sub*) (eq? (o2fa5@syntax->datum o43a2@p?) 'and)) o43a0@ls/false)) (apply (lambda (o43a6@p? o43a7@sub*) ((lambda (o43aa@p*) (lambda (o43ac@x) (for-all (lambda (o43ae@p) (o43ae@p o43ac@x)) o43aa@p*))) (map o4313@subversion-pred o43a7@sub*))) o43a0@ls/false) ((lambda (o43b0@t) ((lambda (o43b2@ls/false) (if (and o43b2@ls/false (apply (lambda (o43b4@p? o43b5@sub*) (eq? (o2fa5@syntax->datum o43b4@p?) 'or)) o43b2@ls/false)) (apply (lambda (o43b8@p? o43b9@sub*) ((lambda (o43bc@p*) (lambda (o43be@x) (exists (lambda (o43c0@p) (o43c0@p o43be@x)) o43bc@p*))) (map o4313@subversion-pred o43b9@sub*))) o43b2@ls/false) ((lambda (o43c2@t) ((lambda (o43c4@ls/false) (if (and o43c4@ls/false (apply (lambda (o43c6@p? o43c7@sub) (eq? (o2fa5@syntax->datum o43c6@p?) 'not)) o43c4@ls/false)) (apply (lambda (o43ca@p? o43cb@sub) ((lambda (o43ce@p) (lambda (o43d0@x) (not (o43ce@p o43d0@x)))) (o4313@subversion-pred o43cb@sub))) o43c4@ls/false) ((lambda (o43d2@t) ((lambda (o43d4@ls/false) (if (and o43d4@ls/false (apply (lambda (o43d6@p? o43d7@n) (and (eq? (o2fa5@syntax->datum o43d6@p?) '<=) (o4311@subversion? o43d7@n))) o43d4@ls/false)) (apply (lambda (o43da@p? o43db@n) (lambda (o43de@x) (<= o43de@x (o2fa5@syntax->datum o43db@n)))) o43d4@ls/false) ((lambda (o43e0@t) ((lambda (o43e2@ls/false) (if (and o43e2@ls/false (apply (lambda (o43e4@p? o43e5@n) (and (eq? (o2fa5@syntax->datum o43e4@p?) '>=) (o4311@subversion? o43e5@n))) o43e2@ls/false)) (apply (lambda (o43e8@p? o43e9@n) (lambda (o43ec@x) (>= o43ec@x (o2fa5@syntax->datum o43e9@n)))) o43e2@ls/false) ((lambda (o43ee@t) ((lambda (o43f0@ls/false) (if o43f0@ls/false (apply (lambda () (o2f9f@syntax-violation 'import '"invalid sub-version spec" o430e@spec o4392@x*)) o43f0@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o43ee@t))) (o2eb6@syntax-dispatch o43ee@t '_))) o43e0@t))) (o2eb6@syntax-dispatch o43e0@t '(any any)))) o43d2@t))) (o2eb6@syntax-dispatch o43d2@t '(any any)))) o43c2@t))) (o2eb6@syntax-dispatch o43c2@t '(any any)))) o43b0@t))) (o2eb6@syntax-dispatch o43b0@t '(any . each-any)))) o439e@t))) (o2eb6@syntax-dispatch o439e@t '(any . each-any)))) o4394@t))) (o2eb6@syntax-dispatch o4394@t 'any))) o4392@x*))) (set! o4315@version-pred (lambda (o4342@x*) ((lambda (o4344@t) ((lambda (o4346@ls/false) (if o4346@ls/false (apply (lambda () (lambda (o4348@x) '#t)) o4346@ls/false) ((lambda (o434a@t) ((lambda (o434c@ls/false) (if (and o434c@ls/false (apply (lambda (o434e@c o434f@ver*) (eq? (o2fa5@syntax->datum o434e@c) 'and)) o434c@ls/false)) (apply (lambda (o4352@c o4353@ver*) ((lambda (o4356@p*) (lambda (o4358@x) (for-all (lambda (o435a@p) (o435a@p o4358@x)) o4356@p*))) (map o4315@version-pred o4353@ver*))) o434c@ls/false) ((lambda (o435c@t) ((lambda (o435e@ls/false) (if (and o435e@ls/false (apply (lambda (o4360@c o4361@ver*) (eq? (o2fa5@syntax->datum o4360@c) 'or)) o435e@ls/false)) (apply (lambda (o4364@c o4365@ver*) ((lambda (o4368@p*) (lambda (o436a@x) (exists (lambda (o436c@p) (o436c@p o436a@x)) o4368@p*))) (map o4315@version-pred o4365@ver*))) o435e@ls/false) ((lambda (o436e@t) ((lambda (o4370@ls/false) (if (and o4370@ls/false (apply (lambda (o4372@c o4373@ver) (eq? (o2fa5@syntax->datum o4372@c) 'not)) o4370@ls/false)) (apply (lambda (o4376@c o4377@ver) ((lambda (o437a@p) (lambda (o437c@x) (not (o437a@p o437c@x)))) (o4315@version-pred o4377@ver))) o4370@ls/false) ((lambda (o437e@t) ((lambda (o4380@ls/false) (if o4380@ls/false (apply (lambda (o4382@sub*) ((lambda (o4384@p*) (lambda (o4386@x) ((letrec ((o4388@f (lambda (o438a@p* o438b@x) (if (null? o438a@p*) '#t (if (null? o438b@x) '#f (and ((car o438a@p*) (car o438b@x)) (o4388@f (cdr o438a@p*) (cdr o438b@x)))))))) o4388@f) o4384@p* o4386@x))) (map o4313@subversion-pred o4382@sub*))) o4380@ls/false) ((lambda (o438e@t) ((lambda (o4390@ls/false) (if o4390@ls/false (apply (lambda () (o2f9f@syntax-violation 'import '"invalid version spec" o430e@spec o4342@x*)) o4390@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o438e@t))) (o2eb6@syntax-dispatch o438e@t '_))) o437e@t))) (o2eb6@syntax-dispatch o437e@t 'each-any))) o436e@t))) (o2eb6@syntax-dispatch o436e@t '(any any)))) o435c@t))) (o2eb6@syntax-dispatch o435c@t '(any . each-any)))) o434a@t))) (o2eb6@syntax-dispatch o434a@t '(any . each-any)))) o4344@t))) (o2eb6@syntax-dispatch o4344@t '()))) o4342@x*))) ((letrec ((o4316@f (lambda (o4318@x) ((lambda (o431a@t) ((lambda (o431c@ls/false) (if o431c@ls/false (apply (lambda (o431e@version-spec*) (values '() (o4315@version-pred o431e@version-spec*))) o431c@ls/false) ((lambda (o4320@t) ((lambda (o4322@ls/false) (if (and o4322@ls/false (apply (lambda (o4324@x o4325@x*) (o4243@idsyn? o4324@x)) o4322@ls/false)) (apply (lambda (o4328@x o4329@x*) (call-with-values (lambda () (o4316@f o4329@x*)) (lambda (o4330@o432d o4331@o432f) ((lambda (o4334@pred o4335@name) (values (cons (o2fa5@syntax->datum o4328@x) o4335@name) o4334@pred)) o4331@o432f o4330@o432d)))) o4322@ls/false) ((lambda (o4338@t) ((lambda (o433a@ls/false) (if o433a@ls/false (apply (lambda () (values '() (lambda (o433c@x) '#t))) o433a@ls/false) ((lambda (o433e@t) ((lambda (o4340@ls/false) (if o4340@ls/false (apply (lambda () (o2f9f@syntax-violation '#f '"invalid import spec" o430e@spec)) o4340@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o433e@t))) (o2eb6@syntax-dispatch o433e@t '_))) o4338@t))) (o2eb6@syntax-dispatch o4338@t '()))) o4320@t))) (o2eb6@syntax-dispatch o4320@t '(any . any)))) o431a@t))) (o2eb6@syntax-dispatch o431a@t '(each-any)))) o4318@x)))) o4316@f) o430e@spec))) '#f '#f '#f))) (set! o4253@import-library (lambda (o42fe@spec*) (call-with-values (lambda () (o4251@parse-library-name o42fe@spec*)) (lambda (o4304@o4301 o4305@o4303) ((lambda (o4308@pred o4309@name) (begin (if (null? o4309@name) (o2f9f@syntax-violation 'import '"empty library name" o42fe@spec*) (void)) ((lambda (o430c@lib) (begin (if (not o430c@lib) (o2f9f@syntax-violation 'import '"cannot find library with required name" o4309@name) (void)) (if (not (o4308@pred (o2aa0@o2912@library-version o430c@lib))) (o2f9f@syntax-violation 'import '"library does not satisfy version specification" o42fe@spec* o430c@lib) (void)) ((o2f25@imp-collector) o430c@lib) (o2aa4@o291a@library-subst o430c@lib))) (o2ac8@o2962@find-library-by-name o4309@name)))) o4305@o4303 o4304@o4301))))) (set! o4255@get-import (lambda (o4270@spec) ((lambda (o4272@t) ((lambda (o4274@ls/false) (if (and o4274@ls/false (apply (lambda (o4276@x o4277@x*) (not (memq (o2fa5@syntax->datum o4276@x) '(for rename except only prefix library)))) o4274@ls/false)) (apply (lambda (o427a@x o427b@x*) (o4253@import-library (cons o427a@x o427b@x*))) o4274@ls/false) ((lambda (o427e@t) ((lambda (o4280@ls/false) (if (and o4280@ls/false (apply (lambda (o4282@rename o4283@isp o4284@old* o4285@new*) (and (eq? (o2fa5@syntax->datum o4282@rename) 'rename) (for-all o4243@idsyn? o4284@old*) (for-all o4243@idsyn? o4285@new*))) o4280@ls/false)) (apply (lambda (o428a@rename o428b@isp o428c@old* o428d@new*) ((lambda (o4292@subst o4293@old* o4294@new*) ((lambda (o4298@old-label*) ((lambda (o429a@subst) (o4247@merge-substs (map cons o4294@new* o4298@old-label*) o429a@subst)) (o424d@rem* o4293@old* o4292@subst))) (o424b@find* o4293@old* o4292@subst))) (o4255@get-import o428b@isp) (map o2fa5@syntax->datum o428c@old*) (map o2fa5@syntax->datum o428d@new*))) o4280@ls/false) ((lambda (o429c@t) ((lambda (o429e@ls/false) (if (and o429e@ls/false (apply (lambda (o42a0@except o42a1@isp o42a2@sym*) (and (eq? (o2fa5@syntax->datum o42a0@except) 'except) (for-all o4243@idsyn? o42a2@sym*))) o429e@ls/false)) (apply (lambda (o42a6@except o42a7@isp o42a8@sym*) ((lambda (o42ac@subst) (o424d@rem* (map o2fa5@syntax->datum o42a8@sym*) o42ac@subst)) (o4255@get-import o42a7@isp))) o429e@ls/false) ((lambda (o42ae@t) ((lambda (o42b0@ls/false) (if (and o42b0@ls/false (apply (lambda (o42b2@only o42b3@isp o42b4@sym*) (and (eq? (o2fa5@syntax->datum o42b2@only) 'only) (for-all o4243@idsyn? o42b4@sym*))) o42b0@ls/false)) (apply (lambda (o42b8@only o42b9@isp o42ba@sym*) ((lambda (o42be@subst o42bf@sym*) ((lambda (o42c2@sym*) ((lambda (o42c4@lab*) (map cons o42c2@sym* o42c4@lab*)) (o424b@find* o42c2@sym* o42be@subst))) (o424f@remove-dups o42bf@sym*))) (o4255@get-import o42b9@isp) (map o2fa5@syntax->datum o42ba@sym*))) o42b0@ls/false) ((lambda (o42c6@t) ((lambda (o42c8@ls/false) (if (and o42c8@ls/false (apply (lambda (o42ca@prefix o42cb@isp o42cc@p) (and (eq? (o2fa5@syntax->datum o42ca@prefix) 'prefix) (o4243@idsyn? o42cc@p))) o42c8@ls/false)) (apply (lambda (o42d0@prefix o42d1@isp o42d2@p) ((lambda (o42d6@subst o42d7@prefix) (map (lambda (o42da@x) (cons (string->symbol (string-append o42d7@prefix (symbol->string (car o42da@x)))) (cdr o42da@x))) o42d6@subst)) (o4255@get-import o42d1@isp) (symbol->string (o2fa5@syntax->datum o42d2@p)))) o42c8@ls/false) ((lambda (o42dc@t) ((lambda (o42de@ls/false) (if (and o42de@ls/false (apply (lambda (o42e0@library o42e1@spec*) (eq? (o2fa5@syntax->datum o42e0@library) 'library)) o42de@ls/false)) (apply (lambda (o42e4@library o42e5@spec*) (o4253@import-library o42e5@spec*)) o42de@ls/false) ((lambda (o42e8@t) ((lambda (o42ea@ls/false) (if (and o42ea@ls/false (apply (lambda (o42ec@for o42ed@isp o42ee@rest) (eq? (o2fa5@syntax->datum o42ec@for) 'for)) o42ea@ls/false)) (apply (lambda (o42f2@for o42f3@isp o42f4@rest) (o4255@get-import o42f3@isp)) o42ea@ls/false) ((lambda (o42f8@t) ((lambda (o42fa@ls/false) (if o42fa@ls/false (apply (lambda (o42fc@spec) (o2f9f@syntax-violation 'import '"invalid import spec" o42fc@spec)) o42fa@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o42f8@t))) (o2eb6@syntax-dispatch o42f8@t 'any))) o42e8@t))) (o2eb6@syntax-dispatch o42e8@t '(any any . any)))) o42dc@t))) (o2eb6@syntax-dispatch o42dc@t '(any each-any)))) o42c6@t))) (o2eb6@syntax-dispatch o42c6@t '(any any any)))) o42ae@t))) (o2eb6@syntax-dispatch o42ae@t '(any any . each-any)))) o429c@t))) (o2eb6@syntax-dispatch o429c@t '(any any . each-any)))) o427e@t))) (o2eb6@syntax-dispatch o427e@t '(any any . #(each (any any)))))) o4272@t))) (o2eb6@syntax-dispatch o4272@t '(any . each-any)))) o4270@spec))) (set! o4257@add-imports! (lambda (o4260@imp o4261@h) ((lambda (o4264@subst) (for-each (lambda (o4266@x) ((lambda (o4268@name o4269@label) ((lambda (o426c@t) (if o426c@t ((lambda (o426e@l) (if (not (eq? o426e@l o4269@label)) (o4245@dup-error o4268@name) (void))) o426c@t) (hashtable-set! o4261@h o4268@name o4269@label))) (hashtable-ref o4261@h o4268@name '#f))) (car o4266@x) (cdr o4266@x))) o4264@subst)) (o4255@get-import o4260@imp)))) (lambda (o4258@imp*) ((letrec ((o425a@f (lambda (o425c@imp* o425d@h) (if (null? o425c@imp*) (hashtable-entries o425d@h) (begin (o4257@add-imports! (car o425c@imp*) o425d@h) (o425a@f (cdr o425c@imp*) o425d@h)))))) o425a@f) o4258@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! o2f1d@make-top-rib (lambda (o444e@names o444f@labels) ((lambda (o4452@rib) (begin (vector-for-each (lambda (o4454@name o4455@label) (begin (if (not (symbol? o4454@name)) (error 'make-top-rib '"BUG: not a symbol" o4454@name) (void)) (o2c5e@extend-rib/nc! o4452@rib (o2c75@make-stx o4454@name o2c27@top-mark* '() '()) o4455@label))) o444e@names o444f@labels) o4452@rib)) (o2c5a@make-empty-rib)))) (set! o2f1f@make-collector (lambda () ((lambda (o4458@ls) (lambda o445c ((lambda (o445d) (if (= o445d '0) (apply (lambda () o4458@ls) o445c) (if (= o445d '1) (apply (lambda (o445a@x) (set! o4458@ls (o2c20@set-cons o445a@x o4458@ls))) o445c) (error 'apply '"invalid arg count")))) (length o445c)))) '()))) (set! o2f21@inv-collector (o2855@o277f@make-parameter (lambda o445e@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (o4460@x) (begin (if (not (procedure? o4460@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" o4460@x) (void)) o4460@x)))) (set! o2f23@vis-collector (o2855@o277f@make-parameter (lambda o4462@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (o4464@x) (begin (if (not (procedure? o4464@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" o4464@x) (void)) o4464@x)))) (set! o2f25@imp-collector (o2855@o277f@make-parameter (lambda o4466@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (o4468@x) (begin (if (not (procedure? o4468@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" o4468@x) (void)) o4468@x)))) (set! o2f27@chi-library-internal (lambda (o446a@e* o446b@rib o446c@top?) (call-with-values (lambda () (o2f11@chi-body* o446a@e* '() '() '() '() '() '() '() o446b@rib o446c@top?)) (lambda (o4480@o4471 o4481@o4473 o4482@o4475 o4483@o4477 o4484@o4479 o4485@o447b o4486@o447d o4487@o447f) ((lambda (o4490@exp* o4491@_kwd* o4492@mod** o4493@rhs* o4494@lex* o4495@mr o4496@r o4497@e*) (values (append (apply append (reverse o4492@mod**)) o4497@e*) o4496@r o4495@mr (reverse o4494@lex*) (reverse o4493@rhs*) o4490@exp*)) o4487@o447f o4486@o447d o4485@o447b o4484@o4479 o4483@o4477 o4482@o4475 o4481@o4473 o4480@o4471))))) (set! o2f29@chi-interaction-expr (lambda (o44a0@e o44a1@rib o44a2@r) (call-with-values (lambda () (o2f11@chi-body* (list o44a0@e) o44a2@r o44a2@r '() '() '() '() '() o44a1@rib '#t)) (lambda (o44b6@o44a7 o44b7@o44a9 o44b8@o44ab o44b9@o44ad o44ba@o44af o44bb@o44b1 o44bc@o44b3 o44bd@o44b5) ((lambda (o44c6@_exp* o44c7@_kwd* o44c8@mod** o44c9@rhs* o44ca@lex* o44cb@mr o44cc@r o44cd@e*) ((lambda (o44d6@e*) ((lambda (o44d8@e) (values o44d8@e o44cc@r)) (if (null? o44d6@e*) (o2c0b@o2b7b@build-void) (if (null? (cdr o44d6@e*)) (car o44d6@e*) (o2c0a@o2b79@build-sequence '#f o44d6@e*))))) (o2ee6@expand-interaction-rhs*/init* (reverse o44ca@lex*) (reverse o44c9@rhs*) (append (apply append (reverse o44c8@mod**)) o44cd@e*) o44cc@r o44cb@mr))) o44bd@o44b5 o44bc@o44b3 o44bb@o44b1 o44ba@o44af o44b9@o44ad o44b8@o44ab o44b7@o44a9 o44b6@o44a7))))) (set! o2f2b@library-body-expander (lambda (o44da@name o44db@main-exp* o44dc@imp* o44dd@b* o44de@top?) ((lambda (o44e5@itc) (begin (set! o44e5@itc (o2f1f@make-collector)) ((lambda (o44ee@o44e7 o44ef@o44e9 o44f0@o44eb o44f1@o44ed) ((lambda (o44f6@swap) (dynamic-wind o44f6@swap (lambda () (call-with-values (lambda () (o2f1b@parse-import-spec* o44dc@imp*)) (lambda (o44fc@o44f9 o44fd@o44fb) ((lambda (o4500@subst-labels o4501@subst-names) ((lambda (o4504@rib) ((lambda (o4507@wrap) (begin (set! o4507@wrap (lambda (o4582@x) (o2c75@make-stx o4582@x o2c27@top-mark* (list o4504@rib) '()))) ((lambda (o4508@b* o4509@main-exp* o450a@rtc o450b@vtc) ((lambda (o4518@o4511 o4519@o4513 o451a@o4515 o451b@o4517) ((lambda (o4520@swap) (dynamic-wind o4520@swap (lambda () (call-with-values (lambda () (o2f27@chi-library-internal o4508@b* o4504@rib o44de@top?)) (lambda (o452e@o4523 o452f@o4525 o4530@o4527 o4531@o4529 o4532@o452b o4533@o452d) ((lambda (o453a@internal-exp* o453b@rhs* o453c@lex* o453d@mr o453e@r o453f@init*) (call-with-values (lambda () (o2f15@parse-exports (append o4509@main-exp* o453a@internal-exp*))) (lambda (o454a@o4547 o454b@o4549) ((lambda (o454e@exp-id* o454f@exp-name*) (begin (o2c62@seal-rib! o4504@rib) ((lambda (o4552@init*) ((lambda (o4554@rhs*) ((lambda () (begin (o2c64@unseal-rib! o4504@rib) ((lambda (o4556@loc* o4557@export-subst) ((lambda (o455b@errstr) (begin (set! o455b@errstr '"attempt to export mutated variable") (call-with-values (lambda () (o2f8b@make-export-env/macros o453c@lex* o4556@loc* o453e@r)) (lambda (o4562@o455d o4563@o455f o4564@o4561) ((lambda (o4568@macro* o4569@global* o456a@export-env) (begin (for-each (lambda (o456e@s) ((lambda (o4570@name o4571@label) ((lambda (o4574@p) (if o4574@p ((lambda (o4576@b) ((lambda (o4578@type) (if (eq? o4578@type 'mutable) (o2f9f@syntax-violation 'export o455b@errstr o4570@name) (void))) (car o4576@b))) (cdr o4574@p)) (void))) (assq o4571@label o456a@export-env))) (car o456e@s) (cdr o456e@s))) o4557@export-subst) ((lambda (o457a@invoke-body o457b@invoke-definitions) (values (o44e5@itc) (o450a@rtc) (o450b@vtc) (o2c0a@o2b79@build-sequence '#f (append o457b@invoke-definitions (list o457a@invoke-body))) o4568@macro* o4557@export-subst o456a@export-env)) (o2c0d@o2b7f@build-letrec* '#f o453c@lex* o4554@rhs* (o2f87@build-exports o4569@global* o4552@init*)) (map o2c06@o2ad6@build-global-define (map cdr o4569@global*))))) o4564@o4561 o4563@o455f o4562@o455d))))) '#f)) (map o2c2d@gen-global o453c@lex*) (o2f89@make-export-subst o454f@exp-name* o454e@exp-id*)))))) (o2ee8@chi-rhs* o453b@rhs* o453e@r o453d@mr))) (o2ed4@chi-expr* o453f@init* o453e@r o453d@mr)))) o454b@o4549 o454a@o4547)))) o4533@o452d o4532@o452b o4531@o4529 o4530@o4527 o452f@o4525 o452e@o4523)))) o4520@swap)) (lambda () (begin ((lambda (o457e@t) (begin (o4518@o4511 o451a@o4515) (set! o451a@o4515 o457e@t))) (o4518@o4511)) ((lambda (o4580@t) (begin (o4519@o4513 o451b@o4517) (set! o451b@o4517 o4580@t))) (o4519@o4513)))))) o2f21@inv-collector o2f23@vis-collector o450a@rtc o450b@vtc)) (map o4507@wrap o44dd@b*) (map o4507@wrap o44db@main-exp*) (o2f1f@make-collector) (o2f1f@make-collector)))) '#f)) (o2f1d@make-top-rib o4501@subst-names o4500@subst-labels))) o44fd@o44fb o44fc@o44f9)))) o44f6@swap)) (lambda () (begin ((lambda (o4584@t) (begin (o44ee@o44e7 o44f0@o44eb) (set! o44f0@o44eb o4584@t))) (o44ee@o44e7)) ((lambda (o4586@t) (begin (o44ef@o44e9 o44f1@o44ed) (set! o44f1@o44ed o4586@t))) (o44ef@o44e9)))))) o2f25@imp-collector o2fad@top-level-context o44e5@itc '#f))) '#f))) (set! o2f2d@core-library-expander (lambda (o4588@e o4589@verify-name) (call-with-values (lambda () (o2f19@parse-library o4588@e)) (lambda (o4594@o458d o4595@o458f o4596@o4591 o4597@o4593) ((lambda (o459c@b* o459d@imp* o459e@exp* o459f@name*) (call-with-values (lambda () (o2f17@parse-library-name o459f@name*)) (lambda (o45a8@o45a5 o45a9@o45a7) ((lambda (o45ac@ver o45ad@name) (begin (o4589@verify-name o45ad@name) (call-with-values (lambda () (o2f2b@library-body-expander o45ad@name o459e@exp* o459d@imp* o459c@b* '#f)) (lambda (o45be@o45b1 o45bf@o45b3 o45c0@o45b5 o45c1@o45b7 o45c2@o45b9 o45c3@o45bb o45c4@o45bd) ((lambda (o45cc@export-env o45cd@export-subst o45ce@visit-code o45cf@invoke-code o45d0@visit-req* o45d1@invoke-req* o45d2@imp*) (values o45ad@name o45ac@ver o45d2@imp* o45d1@invoke-req* o45d0@visit-req* o45cf@invoke-code o45ce@visit-code o45cd@export-subst o45cc@export-env)) o45c4@o45bd o45c3@o45bb o45c2@o45b9 o45c1@o45b7 o45c0@o45b5 o45bf@o45b3 o45be@o45b1))))) o45a9@o45a7 o45a8@o45a5)))) o4597@o4593 o4596@o4591 o4595@o458f o4594@o458d))))) (set! o2f2f@parse-top-level-program (lambda (o45da@e*) ((lambda (o45dc@t) ((lambda (o45de@ls/false) (if (and o45de@ls/false (apply (lambda (o45e0@import o45e1@imp* o45e2@b*) (eq? (o2fa5@syntax->datum o45e0@import) 'import)) o45de@ls/false)) (apply (lambda (o45e6@import o45e7@imp* o45e8@b*) (values o45e7@imp* o45e8@b*)) o45de@ls/false) ((lambda (o45ec@t) ((lambda (o45ee@ls/false) (if (and o45ee@ls/false (apply (lambda (o45f0@import o45f1@x o45f2@y) (eq? (o2fa5@syntax->datum o45f0@import) 'import)) o45ee@ls/false)) (apply (lambda (o45f6@import o45f7@x o45f8@y) (o2f9f@syntax-violation 'expander '"invalid syntax of top-level program" (o2ca5@syntax-car o45da@e*))) o45ee@ls/false) ((lambda (o45fc@t) ((lambda (o45fe@ls/false) (if o45fe@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) o45fe@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o45fc@t))) (o2eb6@syntax-dispatch o45fc@t '_))) o45ec@t))) (o2eb6@syntax-dispatch o45ec@t '((any . any) . any)))) o45dc@t))) (o2eb6@syntax-dispatch o45dc@t '((any . each-any) . each-any)))) o45da@e*))) (set! o2f31@top-level-expander (lambda (o4600@e*) (call-with-values (lambda () (o2f2f@parse-top-level-program o4600@e*)) (lambda (o4606@o4603 o4607@o4605) ((lambda (o460a@b* o460b@imp*) (call-with-values (lambda () (o2f2b@library-body-expander '() '() o460b@imp* o460a@b* '#t)) (lambda (o461c@o460f o461d@o4611 o461e@o4613 o461f@o4615 o4620@o4617 o4621@o4619 o4622@o461b) ((lambda (o462a@export-env o462b@export-subst o462c@visit-code o462d@invoke-code o462e@visit-req* o462f@invoke-req* o4630@imp*) (values o462f@invoke-req* o462d@invoke-code)) o4622@o461b o4621@o4619 o4620@o4617 o461f@o4615 o461e@o4613 o461d@o4611 o461c@o460f)))) o4607@o4605 o4606@o4603))))) (set! o2f37@o2f32 (make-record-type-descriptor 'env '#f 'o2f35 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! o2f39@o2f34 '#f) (set! o2f3b@o2f33 (make-record-constructor-descriptor o2f37@o2f32 '#f o2f39@o2f34)) (set! o2f3e@env? (record-predicate o2f37@o2f32)) (set! o2f40@make-env (record-constructor o2f3b@o2f33)) (set! o2f42@env-names (record-accessor o2f37@o2f32 '0)) (set! o2f44@env-labels (record-accessor o2f37@o2f32 '1)) (set! o2f46@env-itc (record-accessor o2f37@o2f32 '2)) (set! o2f48@set-env-names! (record-mutator o2f37@o2f32 '0)) (set! o2f4a@set-env-labels! (record-mutator o2f37@o2f32 '1)) (set! o2f4c@set-env-itc! (record-mutator o2f37@o2f32 '2)) (set! o2f4e@rp (o2852@o2779@make-record-printer 'env (lambda (o4638@x o4639@p o463a@wr) (display '"#<environment>" o4639@p)))) (set! o2f54@o2f4f (make-record-type-descriptor 'interaction-env '#f 'o2f52 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! o2f56@o2f51 '#f) (set! o2f58@o2f50 (make-record-constructor-descriptor o2f54@o2f4f '#f o2f56@o2f51)) (set! o2f5b@interaction-env? (record-predicate o2f54@o2f4f)) (set! o2f5d@make-interaction-env (record-constructor o2f58@o2f50)) (set! o2f5f@interaction-env-rib (record-accessor o2f54@o2f4f '0)) (set! o2f61@interaction-env-r (record-accessor o2f54@o2f4f '1)) (set! o2f63@interaction-env-locs (record-accessor o2f54@o2f4f '2)) (set! o2f65@set-interaction-env-rib! (record-mutator o2f54@o2f4f '0)) (set! o2f67@set-interaction-env-r! (record-mutator o2f54@o2f4f '1)) (set! o2f69@set-interaction-env-locs! (record-mutator o2f54@o2f4f '2)) (set! o2f6b@rp (o2852@o2779@make-record-printer 'interaction-env (lambda (o463e@x o463f@p o4640@wr) (display '"#<environment>" o463f@p)))) (set! o2f6d@interaction-environment-symbols (lambda () (o2f75@environment-symbols (o2fab@interaction-environment)))) (set! o2f6f@environment-bindings (lambda (o4644@e) (vector->list (vector-map (lambda (o4646@name o4647@label) (o2f71@parse-binding (cons o4646@name (o2ace@o296e@imported-label->binding o4647@label)))) (o2f42@env-names o4644@e) (o2f44@env-labels o4644@e))))) (set! o2f71@parse-binding (lambda (o464a@b) (cons (car o464a@b) ((lambda (o464c@t) (if (memv o464c@t '(core-prim global)) 'procedure (if (memv o464c@t '(core-macro macro global-macro)) 'syntax (if (memv o464c@t '($core-rtd)) 'record (if (eq? (car o464a@b) (cadr o464a@b)) 'syntax 'unknown))))) (cadr o464a@b))))) (set! o2f73@environment? (lambda (o464e@x) (or (o2f3e@env? o464e@x) (o2f5b@interaction-env? o464e@x)))) (set! o2f75@environment-symbols (lambda (o4650@x) (if (o2f3e@env? o4650@x) (vector->list (o2f42@env-names o4650@x)) (if (o2f5b@interaction-env? o4650@x) (map values (o2c46@rib-sym* (o2f5f@interaction-env-rib o4650@x))) (assertion-violation 'environment-symbols '"not an environment" o4650@x))))) (set! o2f77@environment (lambda o4652@imp* ((lambda (o4654@itc) ((lambda (o465a@o4657 o465b@o4659) ((lambda (o465e@swap) (dynamic-wind o465e@swap (lambda () (call-with-values (lambda () (o2f1b@parse-import-spec* o4652@imp*)) (lambda (o4664@o4661 o4665@o4663) ((lambda (o4668@subst-labels o4669@subst-names) (o2f40@make-env o4669@subst-names o4668@subst-labels o4654@itc)) o4665@o4663 o4664@o4661)))) o465e@swap)) (lambda () ((lambda (o466c@t) (begin (o465a@o4657 o465b@o4659) (set! o465b@o4659 o466c@t))) (o465a@o4657))))) o2f25@imp-collector o4654@itc)) (o2f1f@make-collector)))) (set! o2f79@null-environment (lambda (o466e@n) (begin (if (not (eqv? o466e@n '5)) (assertion-violation 'null-environment '"not 5" o466e@n) (void)) (o2f77@environment '(psyntax null-environment-5))))) (set! o2f7b@scheme-report-environment (lambda (o4670@n) (begin (if (not (eqv? o4670@n '5)) (assertion-violation 'scheme-report-environment '"not 5" o4670@n) (void)) (o2f77@environment '(psyntax scheme-report-environment-5))))) (set! o2f7d@expand (lambda (o4672@x o4673@env) (if (o2f3e@env? o4673@env) ((lambda (o4676@rib) ((lambda (o4678@x o4679@itc o467a@rtc o467b@vtc) ((lambda (o4680@x) (begin (o2c62@seal-rib! o4676@rib) (values o4680@x (o467a@rtc)))) ((lambda (o4692@o4683 o4693@o4685 o4694@o4687 o4695@o4689 o4696@o468b o4697@o468d o4698@o468f o4699@o4691) ((lambda (o46a2@swap) (dynamic-wind o46a2@swap (lambda () (o2ed8@chi-expr o4678@x '() '())) o46a2@swap)) (lambda () (begin ((lambda (o46a4@t) (begin (o4692@o4683 o4696@o468b) (set! o4696@o468b o46a4@t))) (o4692@o4683)) ((lambda (o46a6@t) (begin (o4693@o4685 o4697@o468d) (set! o4697@o468d o46a6@t))) (o4693@o4685)) ((lambda (o46a8@t) (begin (o4694@o4687 o4698@o468f) (set! o4698@o468f o46a8@t))) (o4694@o4687)) ((lambda (o46aa@t) (begin (o4695@o4689 o4699@o4691) (set! o4699@o4691 o46aa@t))) (o4695@o4689)))))) o2fad@top-level-context o2f21@inv-collector o2f23@vis-collector o2f25@imp-collector '#f o467a@rtc o467b@vtc o4679@itc))) (o2c75@make-stx o4672@x o2c27@top-mark* (list o4676@rib) '()) (o2f46@env-itc o4673@env) (o2f1f@make-collector) (o2f1f@make-collector))) (o2f1d@make-top-rib (o2f42@env-names o4673@env) (o2f44@env-labels o4673@env))) (if (o2f5b@interaction-env? o4673@env) ((lambda (o46ac@rib o46ad@r o46ae@rtc) ((lambda (o46b2@x) (call-with-values (lambda () ((lambda (o46c8@o46b9 o46c9@o46bb o46ca@o46bd o46cb@o46bf o46cc@o46c1 o46cd@o46c3 o46ce@o46c5 o46cf@o46c7) ((lambda (o46d8@swap) (dynamic-wind o46d8@swap (lambda () (o2f29@chi-interaction-expr o46b2@x o46ac@rib o46ad@r)) o46d8@swap)) (lambda () (begin ((lambda (o46da@t) (begin (o46c8@o46b9 o46cc@o46c1) (set! o46cc@o46c1 o46da@t))) (o46c8@o46b9)) ((lambda (o46dc@t) (begin (o46c9@o46bb o46cd@o46c3) (set! o46cd@o46c3 o46dc@t))) (o46c9@o46bb)) ((lambda (o46de@t) (begin (o46ca@o46bd o46ce@o46c5) (set! o46ce@o46c5 o46de@t))) (o46ca@o46bd)) ((lambda (o46e0@t) (begin (o46cb@o46bf o46cf@o46c7) (set! o46cf@o46c7 o46e0@t))) (o46cb@o46bf)))))) o2fad@top-level-context o2f21@inv-collector o2f23@vis-collector o2f25@imp-collector o4673@env o46ae@rtc (o2f1f@make-collector) (o2f1f@make-collector))) (lambda (o46e2@o46b5 o46e3@o46b7) ((lambda (o46e6@r^ o46e7@e) (begin (o2f67@set-interaction-env-r! o4673@env o46e6@r^) (values o46e7@e (o46ae@rtc)))) o46e3@o46b7 o46e2@o46b5)))) (o2c75@make-stx o4672@x o2c27@top-mark* (list o46ac@rib) '()))) (o2f5f@interaction-env-rib o4673@env) (o2f61@interaction-env-r o4673@env) (o2f1f@make-collector)) (assertion-violation 'expand '"not an environment" o4673@env))))) (set! o2f7f@eval (lambda (o46ea@x o46eb@env) (begin (if (not (o2f73@environment? o46eb@env)) (error 'eval '"not an environment" o46eb@env) (void)) (call-with-values (lambda () (o2f7d@expand o46ea@x o46eb@env)) (lambda (o46f2@o46ef o46f3@o46f1) ((lambda (o46f6@invoke-req* o46f7@x) (begin (for-each o2acf@o2970@invoke-library o46f6@invoke-req*) (eval-core (o28a9@o2861@expanded->core o46f7@x)))) o46f3@o46f1 o46f2@o46ef)))))) (set! o2f81@library-expander (lambda o4768 ((lambda (o4769) (if (= o4769 '3) (apply (lambda (o46fa@x o46fb@filename o46fc@verify-name) ((lambda (o4701@build-visit-code o4703@visit!) (begin (set! o4701@build-visit-code (lambda (o4756@macro*) (if (null? o4756@macro*) (o2c0b@o2b7b@build-void) (o2c0a@o2b79@build-sequence '#f (map (lambda (o4758@x) ((lambda (o475a@loc o475b@src) (list 'set! o475a@loc o475b@src)) (car o4758@x) (cddr o4758@x))) o4756@macro*))))) (set! o4703@visit! (lambda (o474e@macro*) (for-each (lambda (o4750@x) ((lambda (o4752@loc o4753@proc) (set-symbol-value! o4752@loc o4753@proc)) (car o4750@x) (cadr o4750@x))) o474e@macro*))) (call-with-values (lambda () (o2f2d@core-library-expander o46fa@x o46fc@verify-name)) (lambda (o4716@o4705 o4717@o4707 o4718@o4709 o4719@o470b o471a@o470d o471b@o470f o471c@o4711 o471d@o4713 o471e@o4715) ((lambda (o4728@export-env o4729@export-subst o472a@macro* o472b@invoke-code o472c@vis* o472d@inv* o472e@imp* o472f@ver o4730@name) ((lambda (o473a@id o473b@name o473c@ver o473d@imp* o473e@vis* o473f@inv* o4740@visit-proc o4741@invoke-proc o4742@visit-code o4743@invoke-code) (begin (o2acd@o296c@install-library o473a@id o473b@name o473c@ver o473d@imp* o473e@vis* o473f@inv* o4729@export-subst o4728@export-env o4740@visit-proc o4741@invoke-proc o4742@visit-code o4743@invoke-code '#t o46fb@filename) (values o473a@id o473b@name o473c@ver o473d@imp* o473e@vis* o473f@inv* o4743@invoke-code o4742@visit-code o4729@export-subst o4728@export-env))) (gensym) o4730@name o472f@ver (map o2ad3@o2978@library-spec o472e@imp*) (map o2ad3@o2978@library-spec o472c@vis*) (map o2ad3@o2978@library-spec o472d@inv*) (lambda () (o4703@visit! o472a@macro*)) (lambda () (eval-core (o28a9@o2861@expanded->core o472b@invoke-code))) (o4701@build-visit-code o472a@macro*) o472b@invoke-code)) o471e@o4715 o471d@o4713 o471c@o4711 o471b@o470f o471a@o470d o4719@o470b o4718@o4709 o4717@o4707 o4716@o4705))))) '#f '#f)) o4768) (if (= o4769 '2) (apply (lambda (o475e@x o475f@filename) (o2f81@library-expander o475e@x o475f@filename (lambda (o4762@x) (values)))) o4768) (if (= o4769 '1) (apply (lambda (o4764@x) (o2f81@library-expander o4764@x '#f (lambda (o4766@x) (values)))) o4768) (error 'apply '"invalid arg count"))))) (length o4768)))) (set! o2f83@boot-library-expand (lambda (o476a@x) (call-with-values (lambda () (o2f81@library-expander o476a@x)) (lambda (o4780@o476d o4781@o476f o4782@o4771 o4783@o4773 o4784@o4775 o4785@o4777 o4786@o4779 o4787@o477b o4788@o477d o4789@o477f) ((lambda (o4794@export-env o4795@export-subst o4796@visit-code o4797@invoke-code o4798@inv* o4799@vis* o479a@imp* o479b@ver o479c@name o479d@id) (values o479c@name o4797@invoke-code o4795@export-subst o4794@export-env)) o4789@o477f o4788@o477d o4787@o477b o4786@o4779 o4785@o4777 o4784@o4775 o4783@o4773 o4782@o4771 o4781@o476f o4780@o476d))))) (set! o2f85@rev-map-append (lambda (o47a8@f o47a9@ls o47aa@ac) (if (null? o47a9@ls) o47aa@ac (o2f85@rev-map-append o47a8@f (cdr o47a9@ls) (cons (o47a8@f (car o47a9@ls)) o47aa@ac))))) (set! o2f87@build-exports (lambda (o47ae@lex*+loc* o47af@init*) (o2c0a@o2b79@build-sequence '#f (cons (o2c0b@o2b7b@build-void) (o2f85@rev-map-append (lambda (o47b2@x) (list 'set! (cdr o47b2@x) (car o47b2@x))) o47ae@lex*+loc* o47af@init*))))) (set! o2f89@make-export-subst (lambda (o47b4@name* o47b5@id*) (map (lambda (o47b8@name o47b9@id) ((lambda (o47bc@label) (begin (if (not o47bc@label) (o2f9f@syntax-violation '#f '"cannot export unbound identifier" o47b9@id) (void)) (cons o47b8@name o47bc@label))) (o2cc5@id->label o47b9@id))) o47b4@name* o47b5@id*))) (set! o2f8b@make-export-env/macros (lambda (o47be@lex* o47bf@loc* o47c0@r) ((lambda (o47c5@lookup) (begin (set! o47c5@lookup (lambda (o47e2@x) ((letrec ((o47e4@f (lambda (o47e6@x o47e7@lex* o47e8@loc*) (if (pair? o47e7@lex*) (if (eq? o47e6@x (car o47e7@lex*)) (car o47e8@loc*) (o47e4@f o47e6@x (cdr o47e7@lex*) (cdr o47e8@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) o47e4@f) o47e2@x o47be@lex* o47bf@loc*))) ((letrec ((o47c6@f (lambda (o47c8@r o47c9@env o47ca@global* o47cb@macro*) (if (null? o47c8@r) (values o47c9@env o47ca@global* o47cb@macro*) ((lambda (o47d0@x) ((lambda (o47d2@label o47d3@b) ((lambda (o47d6@t) (if (memv o47d6@t '(lexical)) ((lambda (o47d8@v) ((lambda (o47da@loc o47db@type) (o47c6@f (cdr o47c8@r) (cons (cons* o47d2@label o47db@type o47da@loc) o47c9@env) (cons (cons (o2e42@lexical-var o47d8@v) o47da@loc) o47ca@global*) o47cb@macro*)) (o47c5@lookup (o2e42@lexical-var o47d8@v)) (if (o2e44@lexical-mutable? o47d8@v) 'mutable 'global))) (o2ccf@binding-value o47d3@b)) (if (memv o47d6@t '(local-macro)) ((lambda (o47de@loc) (o47c6@f (cdr o47c8@r) (cons (cons* o47d2@label 'global-macro o47de@loc) o47c9@env) o47ca@global* (cons (cons o47de@loc (o2ccf@binding-value o47d3@b)) o47cb@macro*))) (gensym)) (if (memv o47d6@t '(local-macro!)) ((lambda (o47e0@loc) (o47c6@f (cdr o47c8@r) (cons (cons* o47d2@label 'global-macro! o47e0@loc) o47c9@env) o47ca@global* (cons (cons o47e0@loc (o2ccf@binding-value o47d3@b)) o47cb@macro*))) (gensym)) (if (memv o47d6@t '($rtd $module)) (o47c6@f (cdr o47c8@r) (cons o47d0@x o47c9@env) o47ca@global* o47cb@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (o2ccd@binding-type o47d3@b) (o2ccf@binding-value o47d3@b))))))) (o2ccd@binding-type o47d3@b))) (car o47d0@x) (cdr o47d0@x))) (car o47c8@r)))))) o47c6@f) o47c0@r '() '() '()))) '#f))) (set! o2f8d@generate-temporaries (lambda (o47ec@ls) ((lambda (o47ee@t) ((lambda (o47f0@ls/false) (if o47f0@ls/false (apply (lambda (o47f2@ls) (map (lambda (o47f4@x) (o2c75@make-stx ((lambda (o47f6@x) (if (or (symbol? o47f6@x) (string? o47f6@x)) (gensym o47f6@x) (gensym 't))) (o2fa5@syntax->datum o47f4@x)) o2c27@top-mark* '() '())) o47f2@ls)) o47f0@ls/false) ((lambda (o47f8@t) ((lambda (o47fa@ls/false) (if o47fa@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) o47fa@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o47f8@t))) (o2eb6@syntax-dispatch o47f8@t '_))) o47ee@t))) (o2eb6@syntax-dispatch o47ee@t 'each-any))) o47ec@ls))) (set! o2f8f@free-identifier=? (lambda (o47fc@x o47fd@y) (if (o2cab@id? o47fc@x) (if (o2cab@id? o47fd@y) (o2cb3@free-id=? o47fc@x o47fd@y) (assertion-violation 'free-identifier=? '"not an identifier" o47fd@y)) (assertion-violation 'free-identifier=? '"not an identifier" o47fc@x)))) (set! o2f91@bound-identifier=? (lambda (o4800@x o4801@y) (if (o2cab@id? o4800@x) (if (o2cab@id? o4801@y) (o2cb1@bound-id=? o4800@x o4801@y) (assertion-violation 'bound-identifier=? '"not an identifier" o4801@y)) (assertion-violation 'bound-identifier=? '"not an identifier" o4800@x)))) (set! o2f93@make-source-condition (lambda (o4804@x) ((lambda (o480e@o4809 o4810@o480b o4812@o480a o4815@o4808 o4817@make-source-condition o4819@o4806 o481b@o4807 o481d@source-condition? o481f@source-filename o4821@source-character) (begin (set! o480e@o4809 (make-record-type-descriptor '&source-information o4c6c@o49b3@&condition-rtd 'o480c '#f '#f '#((immutable file-name) (immutable character)))) (set! o4810@o480b '#f) (set! o4812@o480a (make-record-constructor-descriptor o480e@o4809 o4c6d@o49b5@&condition-rcd o4810@o480b)) (set! o4815@o4808 (record-predicate o480e@o4809)) (set! o4817@make-source-condition (record-constructor o4812@o480a)) (set! o4819@o4806 (record-accessor o480e@o4809 '0)) (set! o481b@o4807 (record-accessor o480e@o4809 '1)) (set! o481d@source-condition? (condition-predicate o480e@o4809)) (set! o481f@source-filename (condition-accessor o480e@o4809 o4819@o4806)) (set! o4821@source-character (condition-accessor o480e@o4809 o481b@o4807)) (if (pair? o4804@x) (o4817@make-source-condition (car o4804@x) (cdr o4804@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! o2f95@extract-position-condition (lambda (o4822@x) (o2f93@make-source-condition (o2f97@expression-position o4822@x)))) (set! o2f97@expression-position (lambda (o4824@x) (and (o2c73@stx? o4824@x) ((lambda (o4826@x) (and (o284a@o2769@annotation? o4826@x) (o284b@o276b@annotation-source o4826@x))) (o2c77@stx-expr o4824@x))))) (set! o2f99@assertion-error (lambda (o4828@expr o4829@pos) (raise (condition (o4c9c@o4a77@make-assertion-violation) (o4cae@o4aa9@make-who-condition 'assert) (o4c72@o4a0a@make-message-condition '"assertion failed") (o4ca4@o4a8e@make-irritants-condition (list o4828@expr)) (o2f93@make-source-condition o4829@pos))))) (set! o2f9b@syntax-error (lambda (o482c@x . o482e@args) (begin (if (not (for-all string? o482e@args)) (assertion-violation 'syntax-error '"invalid argument" o482e@args) (void)) (raise (condition (o4c72@o4a0a@make-message-condition (if (null? o482e@args) '"invalid syntax" (apply string-append o482e@args))) (o4cd0@o4b05@make-syntax-violation (o2fa5@syntax->datum o482c@x) '#f) (o2f95@extract-position-condition o482c@x)))))) (set! o2f9d@syntax-violation* (lambda (o4830@who o4831@msg o4832@form o4833@condition-object) (begin (if (not (string? o4831@msg)) (assertion-violation 'syntax-violation '"message is not a string" o4831@msg) (void)) ((lambda (o4838@who) (raise (condition (if o4838@who (o4cae@o4aa9@make-who-condition o4838@who) (condition)) (o4c72@o4a0a@make-message-condition o4831@msg) o4833@condition-object (o2f95@extract-position-condition o4832@form)))) (if (or (string? o4830@who) (symbol? o4830@who)) o4830@who (if (not o4830@who) ((lambda (o483a@t) ((lambda (o483c@ls/false) (if (and o483c@ls/false (apply (lambda (o483e@id) (o2cab@id? o483e@id)) o483c@ls/false)) (apply (lambda (o4840@id) (o2fa5@syntax->datum o4840@id)) o483c@ls/false) ((lambda (o4842@t) ((lambda (o4844@ls/false) (if (and o4844@ls/false (apply (lambda (o4846@id o4847@rest) (o2cab@id? o4846@id)) o4844@ls/false)) (apply (lambda (o484a@id o484b@rest) (o2fa5@syntax->datum o484a@id)) o4844@ls/false) ((lambda (o484e@t) ((lambda (o4850@ls/false) (if o4850@ls/false (apply (lambda () '#f) o4850@ls/false) (o2f9f@syntax-violation '#f '"invalid syntax" o484e@t))) (o2eb6@syntax-dispatch o484e@t '_))) o4842@t))) (o2eb6@syntax-dispatch o4842@t '(any . any)))) o483a@t))) (o2eb6@syntax-dispatch o483a@t 'any))) o4832@form) (assertion-violation 'syntax-violation '"invalid who argument" o4830@who))))))) (set! o2f9f@syntax-violation (lambda o4860 ((lambda (o4861) (if (= o4861 '3) (apply (lambda (o4852@who o4853@msg o4854@form) (o2f9f@syntax-violation o4852@who o4853@msg o4854@form '#f)) o4860) (if (= o4861 '4) (apply (lambda (o4858@who o4859@msg o485a@form o485b@subform) (o2f9d@syntax-violation* o4858@who o4859@msg o485a@form (o4cd0@o4b05@make-syntax-violation (o2fa5@syntax->datum o485a@form) (o2fa5@syntax->datum o485b@subform)))) o4860) (error 'apply '"invalid arg count")))) (length o4860)))) (set! o2fa1@identifier? (lambda (o4862@x) (o2cab@id? o4862@x))) (set! o2fa3@datum->syntax (lambda (o4864@id o4865@datum) (if (o2cab@id? o4864@id) (o2c89@datum->stx o4864@id o4865@datum) (assertion-violation 'datum->syntax '"not an identifier" o4864@id)))) (set! o2fa5@syntax->datum (lambda (o4868@x) (o2cc1@stx->datum o4868@x))) (set! o2fa7@compile-r6rs-top-level (lambda (o486a@x*) (call-with-values (lambda () (o2f31@top-level-expander o486a@x*)) (lambda (o4870@o486d o4871@o486f) ((lambda (o4874@invoke-code o4875@lib*) (lambda () (begin (for-each o2acf@o2970@invoke-library o4875@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (o28a9@o2861@expanded->core o4874@invoke-code)) (void)) (eval-core (o28a9@o2861@expanded->core o4874@invoke-code))))) o4871@o486f o4870@o486d))))) (set! o2fa9@pre-compile-r6rs-top-level (lambda (o4878@x*) (call-with-values (lambda () (o2f31@top-level-expander o4878@x*)) (lambda (o487e@o487b o487f@o487d) ((lambda (o4882@invoke-code o4883@lib*) (begin (for-each o2acf@o2970@invoke-library o4883@lib*) (o2853@o277b@compile-core (o28a9@o2861@expanded->core o4882@invoke-code)))) o487f@o487d o487e@o487b))))) (set! o2fab@interaction-environment ((lambda (o4886@the-env) (lambda () (or o4886@the-env ((lambda (o4888@lib o4889@rib) (begin ((lambda (o488c@subst) (begin (o2c50@set-rib-sym*! o4889@rib (map car o488c@subst)) (o2c52@set-rib-mark**! o4889@rib (map (lambda (o488e@x) o2c27@top-mark*) o488c@subst)) (o2c54@set-rib-label*! o4889@rib (map cdr o488c@subst)))) (o2aa4@o291a@library-subst o4888@lib)) ((lambda (o4890@env) (begin (set! o4886@the-env o4890@env) o4890@env)) (o2f5d@make-interaction-env o4889@rib '() '())))) (o2ac8@o2962@find-library-by-name '(mosh interaction)) (o2c5a@make-empty-rib))))) '#f)) (set! o2fad@top-level-context (o2855@o277f@make-parameter '#f)) (begin (set! o499e@o2fad@top-level-context o2fad@top-level-context) (set! o499d@o2fab@interaction-environment o2fab@interaction-environment) (set! o499c@o2fa9@pre-compile-r6rs-top-level o2fa9@pre-compile-r6rs-top-level) (set! o499b@o2fa7@compile-r6rs-top-level o2fa7@compile-r6rs-top-level) (set! o499a@o2fa5@syntax->datum o2fa5@syntax->datum) (set! o4999@o2fa3@datum->syntax o2fa3@datum->syntax) (set! o4998@o2fa1@identifier? o2fa1@identifier?) (set! o4997@o2f9f@syntax-violation o2f9f@syntax-violation) (set! o4996@o2f9d@syntax-violation* o2f9d@syntax-violation*) (set! o4995@o2f9b@syntax-error o2f9b@syntax-error) (set! o4994@o2f99@assertion-error o2f99@assertion-error) (set! o4993@o2f97@expression-position o2f97@expression-position) (set! o4992@o2f95@extract-position-condition o2f95@extract-position-condition) (set! o4991@o2f93@make-source-condition o2f93@make-source-condition) (set! o4990@o2f91@bound-identifier=? o2f91@bound-identifier=?) (set! o498f@o2f8f@free-identifier=? o2f8f@free-identifier=?) (set! o498e@o2f8d@generate-temporaries o2f8d@generate-temporaries) (set! o498d@o2f8b@make-export-env/macros o2f8b@make-export-env/macros) (set! o498c@o2f89@make-export-subst o2f89@make-export-subst) (set! o498b@o2f87@build-exports o2f87@build-exports) (set! o498a@o2f85@rev-map-append o2f85@rev-map-append) (set! o4989@o2f83@boot-library-expand o2f83@boot-library-expand) (set! o4988@o2f81@library-expander o2f81@library-expander) (set! o4987@o2f7f@eval o2f7f@eval) (set! o4986@o2f7d@expand o2f7d@expand) (set! o4985@o2f7b@scheme-report-environment o2f7b@scheme-report-environment) (set! o4984@o2f79@null-environment o2f79@null-environment) (set! o4983@o2f77@environment o2f77@environment) (set! o4982@o2f75@environment-symbols o2f75@environment-symbols) (set! o4981@o2f73@environment? o2f73@environment?) (set! o4980@o2f71@parse-binding o2f71@parse-binding) (set! o497f@o2f6f@environment-bindings o2f6f@environment-bindings) (set! o497e@o2f6d@interaction-environment-symbols o2f6d@interaction-environment-symbols) (set! o497d@o2f6b@rp o2f6b@rp) (set! o497c@o2f69@set-interaction-env-locs! o2f69@set-interaction-env-locs!) (set! o497b@o2f67@set-interaction-env-r! o2f67@set-interaction-env-r!) (set! o497a@o2f65@set-interaction-env-rib! o2f65@set-interaction-env-rib!) (set! o4979@o2f63@interaction-env-locs o2f63@interaction-env-locs) (set! o4978@o2f61@interaction-env-r o2f61@interaction-env-r) (set! o4977@o2f5f@interaction-env-rib o2f5f@interaction-env-rib) (set! o4976@o2f5d@make-interaction-env o2f5d@make-interaction-env) (set! o4975@o2f5b@interaction-env? o2f5b@interaction-env?) (set! o4974@o2f58@o2f50 o2f58@o2f50) (set! o4973@o2f56@o2f51 o2f56@o2f51) (set! o4972@o2f54@o2f4f o2f54@o2f4f) (set! o4971@o2f4e@rp o2f4e@rp) (set! o4970@o2f4c@set-env-itc! o2f4c@set-env-itc!) (set! o496f@o2f4a@set-env-labels! o2f4a@set-env-labels!) (set! o496e@o2f48@set-env-names! o2f48@set-env-names!) (set! o496d@o2f46@env-itc o2f46@env-itc) (set! o496c@o2f44@env-labels o2f44@env-labels) (set! o496b@o2f42@env-names o2f42@env-names) (set! o496a@o2f40@make-env o2f40@make-env) (set! o4969@o2f3e@env? o2f3e@env?) (set! o4968@o2f3b@o2f33 o2f3b@o2f33) (set! o4967@o2f39@o2f34 o2f39@o2f34) (set! o4966@o2f37@o2f32 o2f37@o2f32) (set! o4965@o2f31@top-level-expander o2f31@top-level-expander) (set! o4964@o2f2f@parse-top-level-program o2f2f@parse-top-level-program) (set! o4963@o2f2d@core-library-expander o2f2d@core-library-expander) (set! o4962@o2f2b@library-body-expander o2f2b@library-body-expander) (set! o4961@o2f29@chi-interaction-expr o2f29@chi-interaction-expr) (set! o4960@o2f27@chi-library-internal o2f27@chi-library-internal) (set! o495f@o2f25@imp-collector o2f25@imp-collector) (set! o495e@o2f23@vis-collector o2f23@vis-collector) (set! o495d@o2f21@inv-collector o2f21@inv-collector) (set! o495c@o2f1f@make-collector o2f1f@make-collector) (set! o495b@o2f1d@make-top-rib o2f1d@make-top-rib) (set! o495a@o2f1b@parse-import-spec* o2f1b@parse-import-spec*) (set! o4959@o2f19@parse-library o2f19@parse-library) (set! o4958@o2f17@parse-library-name o2f17@parse-library-name) (set! o4957@o2f15@parse-exports o2f15@parse-exports) (set! o4956@o2f13@expand-transformer o2f13@expand-transformer) (set! o4955@o2f11@chi-body* o2f11@chi-body*) (set! o4954@o2f0f@chi-internal-module o2f0f@chi-internal-module) (set! o4953@o2f0d@module-interface-exp-id* o2f0d@module-interface-exp-id*) (set! o4952@o2f0b@set-module-interface-exp-lab-vec! o2f0b@set-module-interface-exp-lab-vec!) (set! o4951@o2f09@set-module-interface-exp-id-vec! o2f09@set-module-interface-exp-id-vec!) (set! o4950@o2f07@set-module-interface-first-mark! o2f07@set-module-interface-first-mark!) (set! o494f@o2f05@module-interface-exp-lab-vec o2f05@module-interface-exp-lab-vec) (set! o494e@o2f03@module-interface-exp-id-vec o2f03@module-interface-exp-id-vec) (set! o494d@o2f01@module-interface-first-mark o2f01@module-interface-first-mark) (set! o494c@o2eff@make-module-interface o2eff@make-module-interface) (set! o494b@o2efd@module-interface? o2efd@module-interface?) (set! o494a@o2efa@o2ef2 o2efa@o2ef2) (set! o4949@o2ef8@o2ef3 o2ef8@o2ef3) (set! o4948@o2ef6@o2ef1 o2ef6@o2ef1) (set! o4947@o2ef0@parse-module o2ef0@parse-module) (set! o4946@o2eee@chi-internal o2eee@chi-internal) (set! o4945@o2eec@find-dups o2eec@find-dups) (set! o4944@o2eea@find-bound=? o2eea@find-bound=?) (set! o4943@o2ee8@chi-rhs* o2ee8@chi-rhs*) (set! o4942@o2ee6@expand-interaction-rhs*/init* o2ee6@expand-interaction-rhs*/init*) (set! o4941@o2ee4@chi-rhs o2ee4@chi-rhs) (set! o4940@o2ee2@chi-defun o2ee2@chi-defun) (set! o493f@o2ee0@chi-lambda-clause* o2ee0@chi-lambda-clause*) (set! o493e@o2ede@chi-lambda-clause o2ede@chi-lambda-clause) (set! o493d@o2edc@verify-formals o2edc@verify-formals) (set! o493c@o2eda@chi-set! o2eda@chi-set!) (set! o493b@o2ed8@chi-expr o2ed8@chi-expr) (set! o493a@o2ed6@chi-application o2ed6@chi-application) (set! o4939@o2ed4@chi-expr* o2ed4@chi-expr*) (set! o4938@o2ed2@chi-global-macro o2ed2@chi-global-macro) (set! o4937@o2ed0@chi-local-macro o2ed0@chi-local-macro) (set! o4936@o2ece@chi-macro o2ece@chi-macro) (set! o4935@o2ecc@do-macro-call o2ecc@do-macro-call) (set! o4934@o2eca@local-macro-transformer o2eca@local-macro-transformer) (set! o4933@o2ec8@macro-transformer o2ec8@macro-transformer) (set! o4932@o2ec6@symbol-macro o2ec6@symbol-macro) (set! o4931@o2ec4@core-macro-transformer o2ec4@core-macro-transformer) (set! o4930@o2ec2@syntax-transformer o2ec2@syntax-transformer) (set! o492f@o2ec0@ellipsis-map o2ec0@ellipsis-map) (set! o492e@o2ebe@syntax-case-transformer o2ebe@syntax-case-transformer) (set! o492d@o2ebc@verify-literals o2ebc@verify-literals) (set! o492c@o2eba@underscore? o2eba@underscore?) (set! o492b@o2eb8@ellipsis? o2eb8@ellipsis?) (set! o492a@o2eb6@syntax-dispatch o2eb6@syntax-dispatch) (set! o4929@o2eb4@convert-pattern o2eb4@convert-pattern) (set! o4928@o2eb2@foreign-call-transformer o2eb2@foreign-call-transformer) (set! o4927@o2eb0@parameterize-macro o2eb0@parameterize-macro) (set! o4926@o2eae@incorrect-usage-macro o2eae@incorrect-usage-macro) (set! o4925@o2eac@define-condition-type-macro o2eac@define-condition-type-macro) (set! o4924@o2eaa@define-record-type-macro o2eaa@define-record-type-macro) (set! o4923@o2ea8@define-struct-macro o2ea8@define-struct-macro) (set! o4922@o2ea6@quasisyntax-macro o2ea6@quasisyntax-macro) (set! o4921@o2ea4@quasiquote-macro o2ea4@quasiquote-macro) (set! o4920@o2ea2@syntax-rules-macro o2ea2@syntax-rules-macro) (set! o491f@o2ea0@include-into-macro o2ea0@include-into-macro) (set! o491e@o2e9e@include-macro o2e9e@include-macro) (set! o491d@o2e9c@do-include o2e9c@do-include) (set! o491c@o2e9a@cond-macro o2e9a@cond-macro) (set! o491b@o2e98@and-macro o2e98@and-macro) (set! o491a@o2e96@or-macro o2e96@or-macro) (set! o4919@o2e94@let*-macro o2e94@let*-macro) (set! o4918@o2e92@do-macro o2e92@do-macro) (set! o4917@o2e90@identifier-syntax-macro o2e90@identifier-syntax-macro) (set! o4916@o2e8e@endianness-macro o2e8e@endianness-macro) (set! o4915@o2e8c@assert-macro o2e8c@assert-macro) (set! o4914@o2e8a@delay-macro o2e8a@delay-macro) (set! o4913@o2e88@time-macro o2e88@time-macro) (set! o4912@o2e86@define-enumeration-macro o2e86@define-enumeration-macro) (set! o4911@o2e84@guard-macro o2e84@guard-macro) (set! o4910@o2e82@trace-letrec-syntax-macro o2e82@trace-letrec-syntax-macro) (set! o490f@o2e80@trace-let-syntax-macro o2e80@trace-let-syntax-macro) (set! o490e@o2e7e@trace-let/rec-syntax o2e7e@trace-let/rec-syntax) (set! o490d@o2e7c@trace-define-syntax-macro o2e7c@trace-define-syntax-macro) (set! o490c@o2e7a@trace-define-macro o2e7a@trace-define-macro) (set! o490b@o2e78@trace-lambda-macro o2e78@trace-lambda-macro) (set! o490a@o2e76@let*-values-macro o2e76@let*-values-macro) (set! o4909@o2e74@let-values-macro o2e74@let-values-macro) (set! o4908@o2e72@let-macro o2e72@let-macro) (set! o4907@o2e70@invalid-fmls-error o2e70@invalid-fmls-error) (set! o4906@o2e6e@with-syntax-macro o2e6e@with-syntax-macro) (set! o4905@o2e6c@bless o2e6c@bless) (set! o4904@o2e6a@lambda-transformer o2e6a@lambda-transformer) (set! o4903@o2e68@case-lambda-transformer o2e68@case-lambda-transformer) (set! o4902@o2e66@quote-transformer o2e66@quote-transformer) (set! o4901@o2e64@case-macro o2e64@case-macro) (set! o4900@o2e62@or-transformer o2e62@or-transformer) (set! o48ff@o2e60@and-transformer o2e60@and-transformer) (set! o48fe@o2e5e@if-transformer o2e5e@if-transformer) (set! o48fd@o2e5c@unless-macro o2e5c@unless-macro) (set! o48fc@o2e5a@when-macro o2e5a@when-macro) (set! o48fb@o2e58@record-constructor-descriptor-transformer o2e58@record-constructor-descriptor-transformer) (set! o48fa@o2e56@record-type-descriptor-transformer o2e56@record-type-descriptor-transformer) (set! o48f9@o2e54@type-descriptor-transformer o2e54@type-descriptor-transformer) (set! o48f8@o2e52@fluid-let-syntax-transformer o2e52@fluid-let-syntax-transformer) (set! o48f7@o2e50@letrec*-transformer o2e50@letrec*-transformer) (set! o48f6@o2e4e@letrec-transformer o2e4e@letrec-transformer) (set! o48f5@o2e4c@letrec-helper o2e4c@letrec-helper) (set! o48f4@o2e4a@add-lexicals o2e4a@add-lexicals) (set! o48f3@o2e48@add-lexical o2e48@add-lexical) (set! o48f2@o2e46@set-lexical-mutable! o2e46@set-lexical-mutable!) (set! o48f1@o2e44@lexical-mutable? o2e44@lexical-mutable?) (set! o48f0@o2e42@lexical-var o2e42@lexical-var) (set! o48ef@o2e40@scheme-stx o2e40@scheme-stx) (set! o48ee@o2e3e@scheme-stx-hashtable o2e3e@scheme-stx-hashtable) (set! o48ed@o2e3c@parse-define-syntax o2e3c@parse-define-syntax) (set! o48ec@o2e3a@parse-define o2e3a@parse-define) (set! o48eb@o2ce9@make-eval-transformer o2ce9@make-eval-transformer) (set! o48ea@o2ce7@variable-transformer-procedure o2ce7@variable-transformer-procedure) (set! o48e9@o2ce5@variable-transformer? o2ce5@variable-transformer?) (set! o48e8@o2ce3@make-variable-transformer o2ce3@make-variable-transformer) (set! o48e7@o2ce1@sanitize-binding o2ce1@sanitize-binding) (set! o48e6@o2cd3@syntax-type o2cd3@syntax-type) (set! o48e5@o2cd1@raise-unbound-error o2cd1@raise-unbound-error) (set! o48e4@o2ccf@binding-value o2ccf@binding-value) (set! o48e3@o2ccd@binding-type o2ccd@binding-type) (set! o48e2@o2ccb@make-binding o2ccb@make-binding) (set! o48e1@o2cc9@label->binding o2cc9@label->binding) (set! o48e0@o2cc7@id->real-label o2cc7@id->real-label) (set! o48df@o2cc5@id->label o2cc5@id->label) (set! o48de@o2cc3@same-marks*? o2cc3@same-marks*?) (set! o48dd@o2cc1@stx->datum o2cc1@stx->datum) (set! o48dc@o2cbf@strip o2cbf@strip) (set! o48db@o2cbd@strip-annotations o2cbd@strip-annotations) (set! o48da@o2cbb@self-evaluating? o2cbb@self-evaluating?) (set! o48d9@o2cb9@bound-id-member? o2cb9@bound-id-member?) (set! o48d8@o2cb7@distinct-bound-ids? o2cb7@distinct-bound-ids?) (set! o48d7@o2cb5@valid-bound-ids? o2cb5@valid-bound-ids?) (set! o48d6@o2cb3@free-id=? o2cb3@free-id=?) (set! o48d5@o2cb1@bound-id=? o2cb1@bound-id=?) (set! o48d4@o2caf@same-marks? o2caf@same-marks?) (set! o48d3@o2cad@id->sym o2cad@id->sym) (set! o48d2@o2cab@id? o2cab@id?) (set! o48d1@o2ca9@syntax->list o2ca9@syntax->list) (set! o48d0@o2ca7@syntax-cdr o2ca7@syntax-cdr) (set! o48cf@o2ca5@syntax-car o2ca5@syntax-car) (set! o48ce@o2ca3@syntax-list? o2ca3@syntax-list?) (set! o48cd@o2ca1@syntax-null? o2ca1@syntax-null?) (set! o48cc@o2c9f@syntax-vector? o2c9f@syntax-vector?) (set! o48cb@o2c9d@syntax-pair? o2c9d@syntax-pair?) (set! o48ca@o2c9b@syntax-vector->list o2c9b@syntax-vector->list) (set! o48c9@o2c99@syntax-kind? o2c99@syntax-kind?) (set! o48c8@o2c97@add-subst o2c97@add-subst) (set! o48c7@o2c95@add-mark o2c95@add-mark) (set! o48c6@o2c93@mkstx o2c93@mkstx) (set! o48c5@o2c91@join-wraps o2c91@join-wraps) (set! o48c4@o2c8f@anti-mark? o2c8f@anti-mark?) (set! o48c3@o2c8d@anti-mark o2c8d@anti-mark) (set! o48c2@o2c8b@gen-mark o2c8b@gen-mark) (set! o48c1@o2c89@datum->stx o2c89@datum->stx) (set! o48c0@o2c87@rp o2c87@rp) (set! o48bf@o2c85@set-stx-ae*! o2c85@set-stx-ae*!) (set! o48be@o2c83@set-stx-subst*! o2c83@set-stx-subst*!) (set! o48bd@o2c81@set-stx-mark*! o2c81@set-stx-mark*!) (set! o48bc@o2c7f@set-stx-expr! o2c7f@set-stx-expr!) (set! o48bb@o2c7d@stx-ae* o2c7d@stx-ae*) (set! o48ba@o2c7b@stx-subst* o2c7b@stx-subst*) (set! o48b9@o2c79@stx-mark* o2c79@stx-mark*) (set! o48b8@o2c77@stx-expr o2c77@stx-expr) (set! o48b7@o2c75@make-stx o2c75@make-stx) (set! o48b6@o2c73@stx? o2c73@stx?) (set! o48b5@o2c70@o2c68 o2c70@o2c68) (set! o48b4@o2c6e@o2c69 o2c6e@o2c69) (set! o48b3@o2c6c@o2c67 o2c6c@o2c67) (set! o48b2@o2c66@make-full-rib o2c66@make-full-rib) (set! o48b1@o2c64@unseal-rib! o2c64@unseal-rib!) (set! o48b0@o2c62@seal-rib! o2c62@seal-rib!) (set! o48af@o2c60@make-rib-map o2c60@make-rib-map) (set! o48ae@o2c5e@extend-rib/nc! o2c5e@extend-rib/nc!) (set! o48ad@o2c5c@extend-rib! o2c5c@extend-rib!) (set! o48ac@o2c5a@make-empty-rib o2c5a@make-empty-rib) (set! o48ab@o2c58@set-rib-cache! o2c58@set-rib-cache!) (set! o48aa@o2c56@set-rib-sealed/freq! o2c56@set-rib-sealed/freq!) (set! o48a9@o2c54@set-rib-label*! o2c54@set-rib-label*!) (set! o48a8@o2c52@set-rib-mark**! o2c52@set-rib-mark**!) (set! o48a7@o2c50@set-rib-sym*! o2c50@set-rib-sym*!) (set! o48a6@o2c4e@rib-cache o2c4e@rib-cache) (set! o48a5@o2c4c@rib-sealed/freq o2c4c@rib-sealed/freq) (set! o48a4@o2c4a@rib-label* o2c4a@rib-label*) (set! o48a3@o2c48@rib-mark** o2c48@rib-mark**) (set! o48a2@o2c46@rib-sym* o2c46@rib-sym*) (set! o48a1@o2c44@make-rib o2c44@make-rib) (set! o48a0@o2c42@rib? o2c42@rib?) (set! o489f@o2c3f@o2c37 o2c3f@o2c37) (set! o489e@o2c3d@o2c38 o2c3d@o2c38) (set! o489d@o2c3b@o2c36 o2c3b@o2c36) (set! o489c@o2c35@gen-define-label o2c35@gen-define-label) (set! o489b@o2c33@gen-define-label+loc o2c33@gen-define-label+loc) (set! o489a@o2c31@gen-top-level-label o2c31@gen-top-level-label) (set! o4899@o2c2f@gen-label o2c2f@gen-label) (set! o4898@o2c2d@gen-global o2c2d@gen-global) (set! o4897@o2c2b@gen-lexical o2c2b@gen-lexical) (set! o4896@o2c29@top-marked? o2c29@top-marked?) (set! o4895@o2c27@top-mark* o2c27@top-mark*) (set! o4894@o2c22@set-union o2c22@set-union) (set! o4893@o2c20@set-cons o2c20@set-cons) (set! o4892@o2c1e@file-options-macro o2c1e@file-options-macro) (o2ac5@o295c@current-library-expander o2f81@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (o49a8@o49a3 o49aa@o49a5 o49ac@o49a4 o49af@&condition? o49b1@make-&condition o49b3@&condition-rtd o49b5@&condition-rcd o4a01@o49fc o4a03@o49fe o4a05@o49fd o4a08@p? o4a0a@make-message-condition o4a0c@o49fb o4a0e@message-condition? o4a10@condition-message o4a12@&message-rtd o4a14@&message-rcd o4a1a@o4a15 o4a1c@o4a17 o4a1e@o4a16 o4a21@p? o4a23@make-warning o4a25@warning? o4a27@&warning-rtd o4a29@&warning-rcd o4a2f@o4a2a o4a31@o4a2c o4a33@o4a2b o4a36@p? o4a38@make-serious-condition o4a3a@serious-condition? o4a3c@&serious-rtd o4a3e@&serious-rcd o4a44@o4a3f o4a46@o4a41 o4a48@o4a40 o4a4b@p? o4a4d@make-error o4a4f@error? o4a51@&error-rtd o4a53@&error-rcd o4a59@o4a54 o4a5b@o4a56 o4a5d@o4a55 o4a60@p? o4a62@make-violation o4a64@violation? o4a66@&violation-rtd o4a68@&violation-rcd o4a6e@o4a69 o4a70@o4a6b o4a72@o4a6a o4a75@p? o4a77@make-assertion-violation o4a79@assertion-violation? o4a7b@&assertion-rtd o4a7d@&assertion-rcd o4a85@o4a80 o4a87@o4a82 o4a89@o4a81 o4a8c@p? o4a8e@make-irritants-condition o4a90@o4a7f o4a92@irritants-condition? o4a94@condition-irritants o4a96@&irritants-rtd o4a98@&irritants-rcd o4aa0@o4a9b o4aa2@o4a9d o4aa4@o4a9c o4aa7@p? o4aa9@make-who-condition o4aab@o4a9a o4aad@who-condition? o4aaf@condition-who o4ab1@&who-rtd o4ab3@&who-rcd o4ab9@o4ab4 o4abb@o4ab6 o4abd@o4ab5 o4ac0@p? o4ac2@make-non-continuable-violation o4ac4@non-continuable-violation? o4ac6@&non-continuable-rtd o4ac8@&non-continuable-rcd o4ace@o4ac9 o4ad0@o4acb o4ad2@o4aca o4ad5@p? o4ad7@make-implementation-restriction-violation o4ad9@implementation-restriction-violation? o4adb@&implementation-restriction-rtd o4add@&implementation-restriction-rcd o4ae3@o4ade o4ae5@o4ae0 o4ae7@o4adf o4aea@p? o4aec@make-lexical-violation o4aee@lexical-violation? o4af0@&lexical-rtd o4af2@&lexical-rcd o4afc@o4af7 o4afe@o4af9 o4b00@o4af8 o4b03@p? o4b05@make-syntax-violation o4b07@o4af4 o4b09@o4af6 o4b0b@syntax-violation? o4b0d@syntax-violation-form o4b0f@syntax-violation-subform o4b11@&syntax-rtd o4b13@&syntax-rcd o4b19@o4b14 o4b1b@o4b16 o4b1d@o4b15 o4b20@p? o4b22@make-undefined-violation o4b24@undefined-violation? o4b26@&undefined-rtd o4b28@&undefined-rcd o4b2e@o4b29 o4b30@o4b2b o4b32@o4b2a o4b35@p? o4b37@make-i/o-error o4b39@i/o-error? o4b3b@&i/o-rtd o4b3d@&i/o-rcd o4b43@o4b3e o4b45@o4b40 o4b47@o4b3f o4b4a@p? o4b4c@make-i/o-read-error o4b4e@i/o-read-error? o4b50@&i/o-read-rtd o4b52@&i/o-read-rcd o4b58@o4b53 o4b5a@o4b55 o4b5c@o4b54 o4b5f@p? o4b61@make-i/o-write-error o4b63@i/o-write-error? o4b65@&i/o-write-rtd o4b67@&i/o-write-rcd o4b6f@o4b6a o4b71@o4b6c o4b73@o4b6b o4b76@p? o4b78@make-i/o-invalid-position-error o4b7a@o4b69 o4b7c@i/o-invalid-position-error? o4b7e@i/o-error-position o4b80@&i/o-invalid-position-rtd o4b82@&i/o-invalid-position-rcd o4b8a@o4b85 o4b8c@o4b87 o4b8e@o4b86 o4b91@p? o4b93@make-i/o-filename-error o4b95@o4b84 o4b97@i/o-filename-error? o4b99@i/o-error-filename o4b9b@&i/o-filename-rtd o4b9d@&i/o-filename-rcd o4ba3@o4b9e o4ba5@o4ba0 o4ba7@o4b9f o4baa@p? o4bac@make-i/o-file-protection-error o4bae@i/o-file-protection-error? o4bb0@&i/o-file-protection-rtd o4bb2@&i/o-file-protection-rcd o4bb8@o4bb3 o4bba@o4bb5 o4bbc@o4bb4 o4bbf@p? o4bc1@make-i/o-file-is-read-only-error o4bc3@i/o-file-is-read-only-error? o4bc5@&i/o-file-is-read-only-rtd o4bc7@&i/o-file-is-read-only-rcd o4bcd@o4bc8 o4bcf@o4bca o4bd1@o4bc9 o4bd4@p? o4bd6@make-i/o-file-already-exists-error o4bd8@i/o-file-already-exists-error? o4bda@&i/o-file-already-exists-rtd o4bdc@&i/o-file-already-exists-rcd o4be2@o4bdd o4be4@o4bdf o4be6@o4bde o4be9@p? o4beb@make-i/o-file-does-not-exist-error o4bed@i/o-file-does-not-exist-error? o4bef@&i/o-file-does-not-exist-rtd o4bf1@&i/o-file-does-not-exist-rcd o4bf9@o4bf4 o4bfb@o4bf6 o4bfd@o4bf5 o4c00@p? o4c02@make-i/o-port-error o4c04@o4bf3 o4c06@i/o-port-error? o4c08@i/o-error-port o4c0a@&i/o-port-rtd o4c0c@&i/o-port-rcd o4c12@o4c0d o4c14@o4c0f o4c16@o4c0e o4c19@p? o4c1b@make-i/o-decoding-error o4c1d@i/o-decoding-error? o4c1f@&i/o-decoding-rtd o4c21@&i/o-decoding-rcd o4c29@o4c24 o4c2b@o4c26 o4c2d@o4c25 o4c30@p? o4c32@make-i/o-encoding-error o4c34@o4c23 o4c36@i/o-encoding-error? o4c38@i/o-encoding-error-char o4c3a@&i/o-encoding-rtd o4c3c@&i/o-encoding-rcd o4c42@o4c3d o4c44@o4c3f o4c46@o4c3e o4c49@p? o4c4b@make-no-infinities-violation o4c4d@no-infinities-violation? o4c4f@&no-infinities-rtd o4c51@&no-infinities-rcd o4c57@o4c52 o4c59@o4c54 o4c5b@o4c53 o4c5e@p? o4c60@make-no-nans-violation o4c62@no-nans-violation? o4c64@&no-nans-rtd o4c66@&no-nans-rcd) (begin (set! o49a8@o49a3 (make-record-type-descriptor '&condition '#f 'o49a6 '#f '#f '#())) (set! o49aa@o49a5 '#f) (set! o49ac@o49a4 (make-record-constructor-descriptor o49a8@o49a3 '#f o49aa@o49a5)) (set! o49af@&condition? (record-predicate o49a8@o49a3)) (set! o49b1@make-&condition (record-constructor o49ac@o49a4)) (set! o49b3@&condition-rtd o49a8@o49a3) (set! o49b5@&condition-rcd o49ac@o49a4) (set! o4a01@o49fc (make-record-type-descriptor '&message o49a8@o49a3 'o49ff '#f '#f '#((immutable message)))) (set! o4a03@o49fe '#f) (set! o4a05@o49fd (make-record-constructor-descriptor o4a01@o49fc o49ac@o49a4 o4a03@o49fe)) (set! o4a08@p? (record-predicate o4a01@o49fc)) (set! o4a0a@make-message-condition (record-constructor o4a05@o49fd)) (set! o4a0c@o49fb (record-accessor o4a01@o49fc '0)) (set! o4a0e@message-condition? (condition-predicate o4a01@o49fc)) (set! o4a10@condition-message (condition-accessor o4a01@o49fc o4a0c@o49fb)) (set! o4a12@&message-rtd o4a01@o49fc) (set! o4a14@&message-rcd o4a05@o49fd) (set! o4a1a@o4a15 (make-record-type-descriptor '&warning o49a8@o49a3 'o4a18 '#f '#f '#())) (set! o4a1c@o4a17 '#f) (set! o4a1e@o4a16 (make-record-constructor-descriptor o4a1a@o4a15 o49ac@o49a4 o4a1c@o4a17)) (set! o4a21@p? (record-predicate o4a1a@o4a15)) (set! o4a23@make-warning (record-constructor o4a1e@o4a16)) (set! o4a25@warning? (condition-predicate o4a1a@o4a15)) (set! o4a27@&warning-rtd o4a1a@o4a15) (set! o4a29@&warning-rcd o4a1e@o4a16) (set! o4a2f@o4a2a (make-record-type-descriptor '&serious o49a8@o49a3 'o4a2d '#f '#f '#())) (set! o4a31@o4a2c '#f) (set! o4a33@o4a2b (make-record-constructor-descriptor o4a2f@o4a2a o49ac@o49a4 o4a31@o4a2c)) (set! o4a36@p? (record-predicate o4a2f@o4a2a)) (set! o4a38@make-serious-condition (record-constructor o4a33@o4a2b)) (set! o4a3a@serious-condition? (condition-predicate o4a2f@o4a2a)) (set! o4a3c@&serious-rtd o4a2f@o4a2a) (set! o4a3e@&serious-rcd o4a33@o4a2b) (set! o4a44@o4a3f (make-record-type-descriptor '&error o4a2f@o4a2a 'o4a42 '#f '#f '#())) (set! o4a46@o4a41 '#f) (set! o4a48@o4a40 (make-record-constructor-descriptor o4a44@o4a3f o4a33@o4a2b o4a46@o4a41)) (set! o4a4b@p? (record-predicate o4a44@o4a3f)) (set! o4a4d@make-error (record-constructor o4a48@o4a40)) (set! o4a4f@error? (condition-predicate o4a44@o4a3f)) (set! o4a51@&error-rtd o4a44@o4a3f) (set! o4a53@&error-rcd o4a48@o4a40) (set! o4a59@o4a54 (make-record-type-descriptor '&violation o4a2f@o4a2a 'o4a57 '#f '#f '#())) (set! o4a5b@o4a56 '#f) (set! o4a5d@o4a55 (make-record-constructor-descriptor o4a59@o4a54 o4a33@o4a2b o4a5b@o4a56)) (set! o4a60@p? (record-predicate o4a59@o4a54)) (set! o4a62@make-violation (record-constructor o4a5d@o4a55)) (set! o4a64@violation? (condition-predicate o4a59@o4a54)) (set! o4a66@&violation-rtd o4a59@o4a54) (set! o4a68@&violation-rcd o4a5d@o4a55) (set! o4a6e@o4a69 (make-record-type-descriptor '&assertion o4a59@o4a54 'o4a6c '#f '#f '#())) (set! o4a70@o4a6b '#f) (set! o4a72@o4a6a (make-record-constructor-descriptor o4a6e@o4a69 o4a5d@o4a55 o4a70@o4a6b)) (set! o4a75@p? (record-predicate o4a6e@o4a69)) (set! o4a77@make-assertion-violation (record-constructor o4a72@o4a6a)) (set! o4a79@assertion-violation? (condition-predicate o4a6e@o4a69)) (set! o4a7b@&assertion-rtd o4a6e@o4a69) (set! o4a7d@&assertion-rcd o4a72@o4a6a) (set! o4a85@o4a80 (make-record-type-descriptor '&irritants o49a8@o49a3 'o4a83 '#f '#f '#((immutable irritants)))) (set! o4a87@o4a82 '#f) (set! o4a89@o4a81 (make-record-constructor-descriptor o4a85@o4a80 o49ac@o49a4 o4a87@o4a82)) (set! o4a8c@p? (record-predicate o4a85@o4a80)) (set! o4a8e@make-irritants-condition (record-constructor o4a89@o4a81)) (set! o4a90@o4a7f (record-accessor o4a85@o4a80 '0)) (set! o4a92@irritants-condition? (condition-predicate o4a85@o4a80)) (set! o4a94@condition-irritants (condition-accessor o4a85@o4a80 o4a90@o4a7f)) (set! o4a96@&irritants-rtd o4a85@o4a80) (set! o4a98@&irritants-rcd o4a89@o4a81) (set! o4aa0@o4a9b (make-record-type-descriptor '&who o49a8@o49a3 'o4a9e '#f '#f '#((immutable who)))) (set! o4aa2@o4a9d '#f) (set! o4aa4@o4a9c (make-record-constructor-descriptor o4aa0@o4a9b o49ac@o49a4 o4aa2@o4a9d)) (set! o4aa7@p? (record-predicate o4aa0@o4a9b)) (set! o4aa9@make-who-condition (record-constructor o4aa4@o4a9c)) (set! o4aab@o4a9a (record-accessor o4aa0@o4a9b '0)) (set! o4aad@who-condition? (condition-predicate o4aa0@o4a9b)) (set! o4aaf@condition-who (condition-accessor o4aa0@o4a9b o4aab@o4a9a)) (set! o4ab1@&who-rtd o4aa0@o4a9b) (set! o4ab3@&who-rcd o4aa4@o4a9c) (set! o4ab9@o4ab4 (make-record-type-descriptor '&non-continuable o4a59@o4a54 'o4ab7 '#f '#f '#())) (set! o4abb@o4ab6 '#f) (set! o4abd@o4ab5 (make-record-constructor-descriptor o4ab9@o4ab4 o4a5d@o4a55 o4abb@o4ab6)) (set! o4ac0@p? (record-predicate o4ab9@o4ab4)) (set! o4ac2@make-non-continuable-violation (record-constructor o4abd@o4ab5)) (set! o4ac4@non-continuable-violation? (condition-predicate o4ab9@o4ab4)) (set! o4ac6@&non-continuable-rtd o4ab9@o4ab4) (set! o4ac8@&non-continuable-rcd o4abd@o4ab5) (set! o4ace@o4ac9 (make-record-type-descriptor '&implementation-restriction o4a59@o4a54 'o4acc '#f '#f '#())) (set! o4ad0@o4acb '#f) (set! o4ad2@o4aca (make-record-constructor-descriptor o4ace@o4ac9 o4a5d@o4a55 o4ad0@o4acb)) (set! o4ad5@p? (record-predicate o4ace@o4ac9)) (set! o4ad7@make-implementation-restriction-violation (record-constructor o4ad2@o4aca)) (set! o4ad9@implementation-restriction-violation? (condition-predicate o4ace@o4ac9)) (set! o4adb@&implementation-restriction-rtd o4ace@o4ac9) (set! o4add@&implementation-restriction-rcd o4ad2@o4aca) (set! o4ae3@o4ade (make-record-type-descriptor '&lexical o4a59@o4a54 'o4ae1 '#f '#f '#())) (set! o4ae5@o4ae0 '#f) (set! o4ae7@o4adf (make-record-constructor-descriptor o4ae3@o4ade o4a5d@o4a55 o4ae5@o4ae0)) (set! o4aea@p? (record-predicate o4ae3@o4ade)) (set! o4aec@make-lexical-violation (record-constructor o4ae7@o4adf)) (set! o4aee@lexical-violation? (condition-predicate o4ae3@o4ade)) (set! o4af0@&lexical-rtd o4ae3@o4ade) (set! o4af2@&lexical-rcd o4ae7@o4adf) (set! o4afc@o4af7 (make-record-type-descriptor '&syntax o4a59@o4a54 'o4afa '#f '#f '#((immutable form) (immutable subform)))) (set! o4afe@o4af9 '#f) (set! o4b00@o4af8 (make-record-constructor-descriptor o4afc@o4af7 o4a5d@o4a55 o4afe@o4af9)) (set! o4b03@p? (record-predicate o4afc@o4af7)) (set! o4b05@make-syntax-violation (record-constructor o4b00@o4af8)) (set! o4b07@o4af4 (record-accessor o4afc@o4af7 '0)) (set! o4b09@o4af6 (record-accessor o4afc@o4af7 '1)) (set! o4b0b@syntax-violation? (condition-predicate o4afc@o4af7)) (set! o4b0d@syntax-violation-form (condition-accessor o4afc@o4af7 o4b07@o4af4)) (set! o4b0f@syntax-violation-subform (condition-accessor o4afc@o4af7 o4b09@o4af6)) (set! o4b11@&syntax-rtd o4afc@o4af7) (set! o4b13@&syntax-rcd o4b00@o4af8) (set! o4b19@o4b14 (make-record-type-descriptor '&undefined o4a59@o4a54 'o4b17 '#f '#f '#())) (set! o4b1b@o4b16 '#f) (set! o4b1d@o4b15 (make-record-constructor-descriptor o4b19@o4b14 o4a5d@o4a55 o4b1b@o4b16)) (set! o4b20@p? (record-predicate o4b19@o4b14)) (set! o4b22@make-undefined-violation (record-constructor o4b1d@o4b15)) (set! o4b24@undefined-violation? (condition-predicate o4b19@o4b14)) (set! o4b26@&undefined-rtd o4b19@o4b14) (set! o4b28@&undefined-rcd o4b1d@o4b15) (set! o4b2e@o4b29 (make-record-type-descriptor '&i/o o4a44@o4a3f 'o4b2c '#f '#f '#())) (set! o4b30@o4b2b '#f) (set! o4b32@o4b2a (make-record-constructor-descriptor o4b2e@o4b29 o4a48@o4a40 o4b30@o4b2b)) (set! o4b35@p? (record-predicate o4b2e@o4b29)) (set! o4b37@make-i/o-error (record-constructor o4b32@o4b2a)) (set! o4b39@i/o-error? (condition-predicate o4b2e@o4b29)) (set! o4b3b@&i/o-rtd o4b2e@o4b29) (set! o4b3d@&i/o-rcd o4b32@o4b2a) (set! o4b43@o4b3e (make-record-type-descriptor '&i/o-read o4b2e@o4b29 'o4b41 '#f '#f '#())) (set! o4b45@o4b40 '#f) (set! o4b47@o4b3f (make-record-constructor-descriptor o4b43@o4b3e o4b32@o4b2a o4b45@o4b40)) (set! o4b4a@p? (record-predicate o4b43@o4b3e)) (set! o4b4c@make-i/o-read-error (record-constructor o4b47@o4b3f)) (set! o4b4e@i/o-read-error? (condition-predicate o4b43@o4b3e)) (set! o4b50@&i/o-read-rtd o4b43@o4b3e) (set! o4b52@&i/o-read-rcd o4b47@o4b3f) (set! o4b58@o4b53 (make-record-type-descriptor '&i/o-write o4b2e@o4b29 'o4b56 '#f '#f '#())) (set! o4b5a@o4b55 '#f) (set! o4b5c@o4b54 (make-record-constructor-descriptor o4b58@o4b53 o4b32@o4b2a o4b5a@o4b55)) (set! o4b5f@p? (record-predicate o4b58@o4b53)) (set! o4b61@make-i/o-write-error (record-constructor o4b5c@o4b54)) (set! o4b63@i/o-write-error? (condition-predicate o4b58@o4b53)) (set! o4b65@&i/o-write-rtd o4b58@o4b53) (set! o4b67@&i/o-write-rcd o4b5c@o4b54) (set! o4b6f@o4b6a (make-record-type-descriptor '&i/o-invalid-position o4b2e@o4b29 'o4b6d '#f '#f '#((immutable position)))) (set! o4b71@o4b6c '#f) (set! o4b73@o4b6b (make-record-constructor-descriptor o4b6f@o4b6a o4b32@o4b2a o4b71@o4b6c)) (set! o4b76@p? (record-predicate o4b6f@o4b6a)) (set! o4b78@make-i/o-invalid-position-error (record-constructor o4b73@o4b6b)) (set! o4b7a@o4b69 (record-accessor o4b6f@o4b6a '0)) (set! o4b7c@i/o-invalid-position-error? (condition-predicate o4b6f@o4b6a)) (set! o4b7e@i/o-error-position (condition-accessor o4b6f@o4b6a o4b7a@o4b69)) (set! o4b80@&i/o-invalid-position-rtd o4b6f@o4b6a) (set! o4b82@&i/o-invalid-position-rcd o4b73@o4b6b) (set! o4b8a@o4b85 (make-record-type-descriptor '&i/o-filename o4b2e@o4b29 'o4b88 '#f '#f '#((immutable filename)))) (set! o4b8c@o4b87 '#f) (set! o4b8e@o4b86 (make-record-constructor-descriptor o4b8a@o4b85 o4b32@o4b2a o4b8c@o4b87)) (set! o4b91@p? (record-predicate o4b8a@o4b85)) (set! o4b93@make-i/o-filename-error (record-constructor o4b8e@o4b86)) (set! o4b95@o4b84 (record-accessor o4b8a@o4b85 '0)) (set! o4b97@i/o-filename-error? (condition-predicate o4b8a@o4b85)) (set! o4b99@i/o-error-filename (condition-accessor o4b8a@o4b85 o4b95@o4b84)) (set! o4b9b@&i/o-filename-rtd o4b8a@o4b85) (set! o4b9d@&i/o-filename-rcd o4b8e@o4b86) (set! o4ba3@o4b9e (make-record-type-descriptor '&i/o-file-protection o4b8a@o4b85 'o4ba1 '#f '#f '#())) (set! o4ba5@o4ba0 '#f) (set! o4ba7@o4b9f (make-record-constructor-descriptor o4ba3@o4b9e o4b8e@o4b86 o4ba5@o4ba0)) (set! o4baa@p? (record-predicate o4ba3@o4b9e)) (set! o4bac@make-i/o-file-protection-error (record-constructor o4ba7@o4b9f)) (set! o4bae@i/o-file-protection-error? (condition-predicate o4ba3@o4b9e)) (set! o4bb0@&i/o-file-protection-rtd o4ba3@o4b9e) (set! o4bb2@&i/o-file-protection-rcd o4ba7@o4b9f) (set! o4bb8@o4bb3 (make-record-type-descriptor '&i/o-file-is-read-only o4ba3@o4b9e 'o4bb6 '#f '#f '#())) (set! o4bba@o4bb5 '#f) (set! o4bbc@o4bb4 (make-record-constructor-descriptor o4bb8@o4bb3 o4ba7@o4b9f o4bba@o4bb5)) (set! o4bbf@p? (record-predicate o4bb8@o4bb3)) (set! o4bc1@make-i/o-file-is-read-only-error (record-constructor o4bbc@o4bb4)) (set! o4bc3@i/o-file-is-read-only-error? (condition-predicate o4bb8@o4bb3)) (set! o4bc5@&i/o-file-is-read-only-rtd o4bb8@o4bb3) (set! o4bc7@&i/o-file-is-read-only-rcd o4bbc@o4bb4) (set! o4bcd@o4bc8 (make-record-type-descriptor '&i/o-file-already-exists o4b8a@o4b85 'o4bcb '#f '#f '#())) (set! o4bcf@o4bca '#f) (set! o4bd1@o4bc9 (make-record-constructor-descriptor o4bcd@o4bc8 o4b8e@o4b86 o4bcf@o4bca)) (set! o4bd4@p? (record-predicate o4bcd@o4bc8)) (set! o4bd6@make-i/o-file-already-exists-error (record-constructor o4bd1@o4bc9)) (set! o4bd8@i/o-file-already-exists-error? (condition-predicate o4bcd@o4bc8)) (set! o4bda@&i/o-file-already-exists-rtd o4bcd@o4bc8) (set! o4bdc@&i/o-file-already-exists-rcd o4bd1@o4bc9) (set! o4be2@o4bdd (make-record-type-descriptor '&i/o-file-does-not-exist o4b8a@o4b85 'o4be0 '#f '#f '#())) (set! o4be4@o4bdf '#f) (set! o4be6@o4bde (make-record-constructor-descriptor o4be2@o4bdd o4b8e@o4b86 o4be4@o4bdf)) (set! o4be9@p? (record-predicate o4be2@o4bdd)) (set! o4beb@make-i/o-file-does-not-exist-error (record-constructor o4be6@o4bde)) (set! o4bed@i/o-file-does-not-exist-error? (condition-predicate o4be2@o4bdd)) (set! o4bef@&i/o-file-does-not-exist-rtd o4be2@o4bdd) (set! o4bf1@&i/o-file-does-not-exist-rcd o4be6@o4bde) (set! o4bf9@o4bf4 (make-record-type-descriptor '&i/o-port o4b2e@o4b29 'o4bf7 '#f '#f '#((immutable port)))) (set! o4bfb@o4bf6 '#f) (set! o4bfd@o4bf5 (make-record-constructor-descriptor o4bf9@o4bf4 o4b32@o4b2a o4bfb@o4bf6)) (set! o4c00@p? (record-predicate o4bf9@o4bf4)) (set! o4c02@make-i/o-port-error (record-constructor o4bfd@o4bf5)) (set! o4c04@o4bf3 (record-accessor o4bf9@o4bf4 '0)) (set! o4c06@i/o-port-error? (condition-predicate o4bf9@o4bf4)) (set! o4c08@i/o-error-port (condition-accessor o4bf9@o4bf4 o4c04@o4bf3)) (set! o4c0a@&i/o-port-rtd o4bf9@o4bf4) (set! o4c0c@&i/o-port-rcd o4bfd@o4bf5) (set! o4c12@o4c0d (make-record-type-descriptor '&i/o-decoding o4bf9@o4bf4 'o4c10 '#f '#f '#())) (set! o4c14@o4c0f '#f) (set! o4c16@o4c0e (make-record-constructor-descriptor o4c12@o4c0d o4bfd@o4bf5 o4c14@o4c0f)) (set! o4c19@p? (record-predicate o4c12@o4c0d)) (set! o4c1b@make-i/o-decoding-error (record-constructor o4c16@o4c0e)) (set! o4c1d@i/o-decoding-error? (condition-predicate o4c12@o4c0d)) (set! o4c1f@&i/o-decoding-rtd o4c12@o4c0d) (set! o4c21@&i/o-decoding-rcd o4c16@o4c0e) (set! o4c29@o4c24 (make-record-type-descriptor '&i/o-encoding o4bf9@o4bf4 'o4c27 '#f '#f '#((immutable char)))) (set! o4c2b@o4c26 '#f) (set! o4c2d@o4c25 (make-record-constructor-descriptor o4c29@o4c24 o4bfd@o4bf5 o4c2b@o4c26)) (set! o4c30@p? (record-predicate o4c29@o4c24)) (set! o4c32@make-i/o-encoding-error (record-constructor o4c2d@o4c25)) (set! o4c34@o4c23 (record-accessor o4c29@o4c24 '0)) (set! o4c36@i/o-encoding-error? (condition-predicate o4c29@o4c24)) (set! o4c38@i/o-encoding-error-char (condition-accessor o4c29@o4c24 o4c34@o4c23)) (set! o4c3a@&i/o-encoding-rtd o4c29@o4c24) (set! o4c3c@&i/o-encoding-rcd o4c2d@o4c25) (set! o4c42@o4c3d (make-record-type-descriptor '&no-infinities o4ace@o4ac9 'o4c40 '#f '#f '#())) (set! o4c44@o4c3f '#f) (set! o4c46@o4c3e (make-record-constructor-descriptor o4c42@o4c3d o4ad2@o4aca o4c44@o4c3f)) (set! o4c49@p? (record-predicate o4c42@o4c3d)) (set! o4c4b@make-no-infinities-violation (record-constructor o4c46@o4c3e)) (set! o4c4d@no-infinities-violation? (condition-predicate o4c42@o4c3d)) (set! o4c4f@&no-infinities-rtd o4c42@o4c3d) (set! o4c51@&no-infinities-rcd o4c46@o4c3e) (set! o4c57@o4c52 (make-record-type-descriptor '&no-nans o4ace@o4ac9 'o4c55 '#f '#f '#())) (set! o4c59@o4c54 '#f) (set! o4c5b@o4c53 (make-record-constructor-descriptor o4c57@o4c52 o4ad2@o4aca o4c59@o4c54)) (set! o4c5e@p? (record-predicate o4c57@o4c52)) (set! o4c60@make-no-nans-violation (record-constructor o4c5b@o4c53)) (set! o4c62@no-nans-violation? (condition-predicate o4c57@o4c52)) (set! o4c64@&no-nans-rtd o4c57@o4c52) (set! o4c66@&no-nans-rcd o4c5b@o4c53) (begin (set! o4d57@o4c66@&no-nans-rcd o4c66@&no-nans-rcd) (set! o4d56@o4c64@&no-nans-rtd o4c64@&no-nans-rtd) (set! o4d55@o4c62@no-nans-violation? o4c62@no-nans-violation?) (set! o4d54@o4c60@make-no-nans-violation o4c60@make-no-nans-violation) (set! o4d53@o4c5e@p? o4c5e@p?) (set! o4d52@o4c5b@o4c53 o4c5b@o4c53) (set! o4d51@o4c59@o4c54 o4c59@o4c54) (set! o4d50@o4c57@o4c52 o4c57@o4c52) (set! o4d4f@o4c51@&no-infinities-rcd o4c51@&no-infinities-rcd) (set! o4d4e@o4c4f@&no-infinities-rtd o4c4f@&no-infinities-rtd) (set! o4d4d@o4c4d@no-infinities-violation? o4c4d@no-infinities-violation?) (set! o4d4c@o4c4b@make-no-infinities-violation o4c4b@make-no-infinities-violation) (set! o4d4b@o4c49@p? o4c49@p?) (set! o4d4a@o4c46@o4c3e o4c46@o4c3e) (set! o4d49@o4c44@o4c3f o4c44@o4c3f) (set! o4d48@o4c42@o4c3d o4c42@o4c3d) (set! o4d47@o4c3c@&i/o-encoding-rcd o4c3c@&i/o-encoding-rcd) (set! o4d46@o4c3a@&i/o-encoding-rtd o4c3a@&i/o-encoding-rtd) (set! o4d45@o4c38@i/o-encoding-error-char o4c38@i/o-encoding-error-char) (set! o4d44@o4c36@i/o-encoding-error? o4c36@i/o-encoding-error?) (set! o4d43@o4c34@o4c23 o4c34@o4c23) (set! o4d42@o4c32@make-i/o-encoding-error o4c32@make-i/o-encoding-error) (set! o4d41@o4c30@p? o4c30@p?) (set! o4d40@o4c2d@o4c25 o4c2d@o4c25) (set! o4d3f@o4c2b@o4c26 o4c2b@o4c26) (set! o4d3e@o4c29@o4c24 o4c29@o4c24) (set! o4d3d@o4c21@&i/o-decoding-rcd o4c21@&i/o-decoding-rcd) (set! o4d3c@o4c1f@&i/o-decoding-rtd o4c1f@&i/o-decoding-rtd) (set! o4d3b@o4c1d@i/o-decoding-error? o4c1d@i/o-decoding-error?) (set! o4d3a@o4c1b@make-i/o-decoding-error o4c1b@make-i/o-decoding-error) (set! o4d39@o4c19@p? o4c19@p?) (set! o4d38@o4c16@o4c0e o4c16@o4c0e) (set! o4d37@o4c14@o4c0f o4c14@o4c0f) (set! o4d36@o4c12@o4c0d o4c12@o4c0d) (set! o4d35@o4c0c@&i/o-port-rcd o4c0c@&i/o-port-rcd) (set! o4d34@o4c0a@&i/o-port-rtd o4c0a@&i/o-port-rtd) (set! o4d33@o4c08@i/o-error-port o4c08@i/o-error-port) (set! o4d32@o4c06@i/o-port-error? o4c06@i/o-port-error?) (set! o4d31@o4c04@o4bf3 o4c04@o4bf3) (set! o4d30@o4c02@make-i/o-port-error o4c02@make-i/o-port-error) (set! o4d2f@o4c00@p? o4c00@p?) (set! o4d2e@o4bfd@o4bf5 o4bfd@o4bf5) (set! o4d2d@o4bfb@o4bf6 o4bfb@o4bf6) (set! o4d2c@o4bf9@o4bf4 o4bf9@o4bf4) (set! o4d2b@o4bf1@&i/o-file-does-not-exist-rcd o4bf1@&i/o-file-does-not-exist-rcd) (set! o4d2a@o4bef@&i/o-file-does-not-exist-rtd o4bef@&i/o-file-does-not-exist-rtd) (set! o4d29@o4bed@i/o-file-does-not-exist-error? o4bed@i/o-file-does-not-exist-error?) (set! o4d28@o4beb@make-i/o-file-does-not-exist-error o4beb@make-i/o-file-does-not-exist-error) (set! o4d27@o4be9@p? o4be9@p?) (set! o4d26@o4be6@o4bde o4be6@o4bde) (set! o4d25@o4be4@o4bdf o4be4@o4bdf) (set! o4d24@o4be2@o4bdd o4be2@o4bdd) (set! o4d23@o4bdc@&i/o-file-already-exists-rcd o4bdc@&i/o-file-already-exists-rcd) (set! o4d22@o4bda@&i/o-file-already-exists-rtd o4bda@&i/o-file-already-exists-rtd) (set! o4d21@o4bd8@i/o-file-already-exists-error? o4bd8@i/o-file-already-exists-error?) (set! o4d20@o4bd6@make-i/o-file-already-exists-error o4bd6@make-i/o-file-already-exists-error) (set! o4d1f@o4bd4@p? o4bd4@p?) (set! o4d1e@o4bd1@o4bc9 o4bd1@o4bc9) (set! o4d1d@o4bcf@o4bca o4bcf@o4bca) (set! o4d1c@o4bcd@o4bc8 o4bcd@o4bc8) (set! o4d1b@o4bc7@&i/o-file-is-read-only-rcd o4bc7@&i/o-file-is-read-only-rcd) (set! o4d1a@o4bc5@&i/o-file-is-read-only-rtd o4bc5@&i/o-file-is-read-only-rtd) (set! o4d19@o4bc3@i/o-file-is-read-only-error? o4bc3@i/o-file-is-read-only-error?) (set! o4d18@o4bc1@make-i/o-file-is-read-only-error o4bc1@make-i/o-file-is-read-only-error) (set! o4d17@o4bbf@p? o4bbf@p?) (set! o4d16@o4bbc@o4bb4 o4bbc@o4bb4) (set! o4d15@o4bba@o4bb5 o4bba@o4bb5) (set! o4d14@o4bb8@o4bb3 o4bb8@o4bb3) (set! o4d13@o4bb2@&i/o-file-protection-rcd o4bb2@&i/o-file-protection-rcd) (set! o4d12@o4bb0@&i/o-file-protection-rtd o4bb0@&i/o-file-protection-rtd) (set! o4d11@o4bae@i/o-file-protection-error? o4bae@i/o-file-protection-error?) (set! o4d10@o4bac@make-i/o-file-protection-error o4bac@make-i/o-file-protection-error) (set! o4d0f@o4baa@p? o4baa@p?) (set! o4d0e@o4ba7@o4b9f o4ba7@o4b9f) (set! o4d0d@o4ba5@o4ba0 o4ba5@o4ba0) (set! o4d0c@o4ba3@o4b9e o4ba3@o4b9e) (set! o4d0b@o4b9d@&i/o-filename-rcd o4b9d@&i/o-filename-rcd) (set! o4d0a@o4b9b@&i/o-filename-rtd o4b9b@&i/o-filename-rtd) (set! o4d09@o4b99@i/o-error-filename o4b99@i/o-error-filename) (set! o4d08@o4b97@i/o-filename-error? o4b97@i/o-filename-error?) (set! o4d07@o4b95@o4b84 o4b95@o4b84) (set! o4d06@o4b93@make-i/o-filename-error o4b93@make-i/o-filename-error) (set! o4d05@o4b91@p? o4b91@p?) (set! o4d04@o4b8e@o4b86 o4b8e@o4b86) (set! o4d03@o4b8c@o4b87 o4b8c@o4b87) (set! o4d02@o4b8a@o4b85 o4b8a@o4b85) (set! o4d01@o4b82@&i/o-invalid-position-rcd o4b82@&i/o-invalid-position-rcd) (set! o4d00@o4b80@&i/o-invalid-position-rtd o4b80@&i/o-invalid-position-rtd) (set! o4cff@o4b7e@i/o-error-position o4b7e@i/o-error-position) (set! o4cfe@o4b7c@i/o-invalid-position-error? o4b7c@i/o-invalid-position-error?) (set! o4cfd@o4b7a@o4b69 o4b7a@o4b69) (set! o4cfc@o4b78@make-i/o-invalid-position-error o4b78@make-i/o-invalid-position-error) (set! o4cfb@o4b76@p? o4b76@p?) (set! o4cfa@o4b73@o4b6b o4b73@o4b6b) (set! o4cf9@o4b71@o4b6c o4b71@o4b6c) (set! o4cf8@o4b6f@o4b6a o4b6f@o4b6a) (set! o4cf7@o4b67@&i/o-write-rcd o4b67@&i/o-write-rcd) (set! o4cf6@o4b65@&i/o-write-rtd o4b65@&i/o-write-rtd) (set! o4cf5@o4b63@i/o-write-error? o4b63@i/o-write-error?) (set! o4cf4@o4b61@make-i/o-write-error o4b61@make-i/o-write-error) (set! o4cf3@o4b5f@p? o4b5f@p?) (set! o4cf2@o4b5c@o4b54 o4b5c@o4b54) (set! o4cf1@o4b5a@o4b55 o4b5a@o4b55) (set! o4cf0@o4b58@o4b53 o4b58@o4b53) (set! o4cef@o4b52@&i/o-read-rcd o4b52@&i/o-read-rcd) (set! o4cee@o4b50@&i/o-read-rtd o4b50@&i/o-read-rtd) (set! o4ced@o4b4e@i/o-read-error? o4b4e@i/o-read-error?) (set! o4cec@o4b4c@make-i/o-read-error o4b4c@make-i/o-read-error) (set! o4ceb@o4b4a@p? o4b4a@p?) (set! o4cea@o4b47@o4b3f o4b47@o4b3f) (set! o4ce9@o4b45@o4b40 o4b45@o4b40) (set! o4ce8@o4b43@o4b3e o4b43@o4b3e) (set! o4ce7@o4b3d@&i/o-rcd o4b3d@&i/o-rcd) (set! o4ce6@o4b3b@&i/o-rtd o4b3b@&i/o-rtd) (set! o4ce5@o4b39@i/o-error? o4b39@i/o-error?) (set! o4ce4@o4b37@make-i/o-error o4b37@make-i/o-error) (set! o4ce3@o4b35@p? o4b35@p?) (set! o4ce2@o4b32@o4b2a o4b32@o4b2a) (set! o4ce1@o4b30@o4b2b o4b30@o4b2b) (set! o4ce0@o4b2e@o4b29 o4b2e@o4b29) (set! o4cdf@o4b28@&undefined-rcd o4b28@&undefined-rcd) (set! o4cde@o4b26@&undefined-rtd o4b26@&undefined-rtd) (set! o4cdd@o4b24@undefined-violation? o4b24@undefined-violation?) (set! o4cdc@o4b22@make-undefined-violation o4b22@make-undefined-violation) (set! o4cdb@o4b20@p? o4b20@p?) (set! o4cda@o4b1d@o4b15 o4b1d@o4b15) (set! o4cd9@o4b1b@o4b16 o4b1b@o4b16) (set! o4cd8@o4b19@o4b14 o4b19@o4b14) (set! o4cd7@o4b13@&syntax-rcd o4b13@&syntax-rcd) (set! o4cd6@o4b11@&syntax-rtd o4b11@&syntax-rtd) (set! o4cd5@o4b0f@syntax-violation-subform o4b0f@syntax-violation-subform) (set! o4cd4@o4b0d@syntax-violation-form o4b0d@syntax-violation-form) (set! o4cd3@o4b0b@syntax-violation? o4b0b@syntax-violation?) (set! o4cd2@o4b09@o4af6 o4b09@o4af6) (set! o4cd1@o4b07@o4af4 o4b07@o4af4) (set! o4cd0@o4b05@make-syntax-violation o4b05@make-syntax-violation) (set! o4ccf@o4b03@p? o4b03@p?) (set! o4cce@o4b00@o4af8 o4b00@o4af8) (set! o4ccd@o4afe@o4af9 o4afe@o4af9) (set! o4ccc@o4afc@o4af7 o4afc@o4af7) (set! o4ccb@o4af2@&lexical-rcd o4af2@&lexical-rcd) (set! o4cca@o4af0@&lexical-rtd o4af0@&lexical-rtd) (set! o4cc9@o4aee@lexical-violation? o4aee@lexical-violation?) (set! o4cc8@o4aec@make-lexical-violation o4aec@make-lexical-violation) (set! o4cc7@o4aea@p? o4aea@p?) (set! o4cc6@o4ae7@o4adf o4ae7@o4adf) (set! o4cc5@o4ae5@o4ae0 o4ae5@o4ae0) (set! o4cc4@o4ae3@o4ade o4ae3@o4ade) (set! o4cc3@o4add@&implementation-restriction-rcd o4add@&implementation-restriction-rcd) (set! o4cc2@o4adb@&implementation-restriction-rtd o4adb@&implementation-restriction-rtd) (set! o4cc1@o4ad9@implementation-restriction-violation? o4ad9@implementation-restriction-violation?) (set! o4cc0@o4ad7@make-implementation-restriction-violation o4ad7@make-implementation-restriction-violation) (set! o4cbf@o4ad5@p? o4ad5@p?) (set! o4cbe@o4ad2@o4aca o4ad2@o4aca) (set! o4cbd@o4ad0@o4acb o4ad0@o4acb) (set! o4cbc@o4ace@o4ac9 o4ace@o4ac9) (set! o4cbb@o4ac8@&non-continuable-rcd o4ac8@&non-continuable-rcd) (set! o4cba@o4ac6@&non-continuable-rtd o4ac6@&non-continuable-rtd) (set! o4cb9@o4ac4@non-continuable-violation? o4ac4@non-continuable-violation?) (set! o4cb8@o4ac2@make-non-continuable-violation o4ac2@make-non-continuable-violation) (set! o4cb7@o4ac0@p? o4ac0@p?) (set! o4cb6@o4abd@o4ab5 o4abd@o4ab5) (set! o4cb5@o4abb@o4ab6 o4abb@o4ab6) (set! o4cb4@o4ab9@o4ab4 o4ab9@o4ab4) (set! o4cb3@o4ab3@&who-rcd o4ab3@&who-rcd) (set! o4cb2@o4ab1@&who-rtd o4ab1@&who-rtd) (set! o4cb1@o4aaf@condition-who o4aaf@condition-who) (set! o4cb0@o4aad@who-condition? o4aad@who-condition?) (set! o4caf@o4aab@o4a9a o4aab@o4a9a) (set! o4cae@o4aa9@make-who-condition o4aa9@make-who-condition) (set! o4cad@o4aa7@p? o4aa7@p?) (set! o4cac@o4aa4@o4a9c o4aa4@o4a9c) (set! o4cab@o4aa2@o4a9d o4aa2@o4a9d) (set! o4caa@o4aa0@o4a9b o4aa0@o4a9b) (set! o4ca9@o4a98@&irritants-rcd o4a98@&irritants-rcd) (set! o4ca8@o4a96@&irritants-rtd o4a96@&irritants-rtd) (set! o4ca7@o4a94@condition-irritants o4a94@condition-irritants) (set! o4ca6@o4a92@irritants-condition? o4a92@irritants-condition?) (set! o4ca5@o4a90@o4a7f o4a90@o4a7f) (set! o4ca4@o4a8e@make-irritants-condition o4a8e@make-irritants-condition) (set! o4ca3@o4a8c@p? o4a8c@p?) (set! o4ca2@o4a89@o4a81 o4a89@o4a81) (set! o4ca1@o4a87@o4a82 o4a87@o4a82) (set! o4ca0@o4a85@o4a80 o4a85@o4a80) (set! o4c9f@o4a7d@&assertion-rcd o4a7d@&assertion-rcd) (set! o4c9e@o4a7b@&assertion-rtd o4a7b@&assertion-rtd) (set! o4c9d@o4a79@assertion-violation? o4a79@assertion-violation?) (set! o4c9c@o4a77@make-assertion-violation o4a77@make-assertion-violation) (set! o4c9b@o4a75@p? o4a75@p?) (set! o4c9a@o4a72@o4a6a o4a72@o4a6a) (set! o4c99@o4a70@o4a6b o4a70@o4a6b) (set! o4c98@o4a6e@o4a69 o4a6e@o4a69) (set! o4c97@o4a68@&violation-rcd o4a68@&violation-rcd) (set! o4c96@o4a66@&violation-rtd o4a66@&violation-rtd) (set! o4c95@o4a64@violation? o4a64@violation?) (set! o4c94@o4a62@make-violation o4a62@make-violation) (set! o4c93@o4a60@p? o4a60@p?) (set! o4c92@o4a5d@o4a55 o4a5d@o4a55) (set! o4c91@o4a5b@o4a56 o4a5b@o4a56) (set! o4c90@o4a59@o4a54 o4a59@o4a54) (set! o4c8f@o4a53@&error-rcd o4a53@&error-rcd) (set! o4c8e@o4a51@&error-rtd o4a51@&error-rtd) (set! o4c8d@o4a4f@error? o4a4f@error?) (set! o4c8c@o4a4d@make-error o4a4d@make-error) (set! o4c8b@o4a4b@p? o4a4b@p?) (set! o4c8a@o4a48@o4a40 o4a48@o4a40) (set! o4c89@o4a46@o4a41 o4a46@o4a41) (set! o4c88@o4a44@o4a3f o4a44@o4a3f) (set! o4c87@o4a3e@&serious-rcd o4a3e@&serious-rcd) (set! o4c86@o4a3c@&serious-rtd o4a3c@&serious-rtd) (set! o4c85@o4a3a@serious-condition? o4a3a@serious-condition?) (set! o4c84@o4a38@make-serious-condition o4a38@make-serious-condition) (set! o4c83@o4a36@p? o4a36@p?) (set! o4c82@o4a33@o4a2b o4a33@o4a2b) (set! o4c81@o4a31@o4a2c o4a31@o4a2c) (set! o4c80@o4a2f@o4a2a o4a2f@o4a2a) (set! o4c7f@o4a29@&warning-rcd o4a29@&warning-rcd) (set! o4c7e@o4a27@&warning-rtd o4a27@&warning-rtd) (set! o4c7d@o4a25@warning? o4a25@warning?) (set! o4c7c@o4a23@make-warning o4a23@make-warning) (set! o4c7b@o4a21@p? o4a21@p?) (set! o4c7a@o4a1e@o4a16 o4a1e@o4a16) (set! o4c79@o4a1c@o4a17 o4a1c@o4a17) (set! o4c78@o4a1a@o4a15 o4a1a@o4a15) (set! o4c77@o4a14@&message-rcd o4a14@&message-rcd) (set! o4c76@o4a12@&message-rtd o4a12@&message-rtd) (set! o4c75@o4a10@condition-message o4a10@condition-message) (set! o4c74@o4a0e@message-condition? o4a0e@message-condition?) (set! o4c73@o4a0c@o49fb o4a0c@o49fb) (set! o4c72@o4a0a@make-message-condition o4a0a@make-message-condition) (set! o4c71@o4a08@p? o4a08@p?) (set! o4c70@o4a05@o49fd o4a05@o49fd) (set! o4c6f@o4a03@o49fe o4a03@o49fe) (set! o4c6e@o4a01@o49fc o4a01@o49fc) (set! o4c6d@o49b5@&condition-rcd o49b5@&condition-rcd) (set! o4c6c@o49b3@&condition-rtd o49b3@&condition-rtd) (set! o4c6b@o49b1@make-&condition o49b1@make-&condition) (set! o4c6a@o49af@&condition? o49af@&condition?) (set! o4c69@o49ac@o49a4 o49ac@o49a4) (set! o4c68@o49aa@o49a5 o49aa@o49a5) (set! o4c67@o49a8@o49a3 o49a8@o49a3)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (o28a6@o285b@current-primitive-locations (lambda (o5184@x) ((lambda (o5186@t) (if o5186@t (cdr o5186@t) '#f)) (assq o5184@x '((&no-nans-rcd . o4d57@o4c66@&no-nans-rcd) (&no-nans-rtd . o4d56@o4c64@&no-nans-rtd) (&no-infinities-rcd . o4d4f@o4c51@&no-infinities-rcd) (&no-infinities-rtd . o4d4e@o4c4f@&no-infinities-rtd) (&i/o-encoding-rcd . o4d47@o4c3c@&i/o-encoding-rcd) (&i/o-encoding-rtd . o4d46@o4c3a@&i/o-encoding-rtd) (&i/o-decoding-rcd . o4d3d@o4c21@&i/o-decoding-rcd) (&i/o-decoding-rtd . o4d3c@o4c1f@&i/o-decoding-rtd) (&i/o-port-rcd . o4d35@o4c0c@&i/o-port-rcd) (&i/o-port-rtd . o4d34@o4c0a@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . o4d2b@o4bf1@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . o4d2a@o4bef@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . o4d23@o4bdc@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . o4d22@o4bda@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . o4d1b@o4bc7@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . o4d1a@o4bc5@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . o4d13@o4bb2@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . o4d12@o4bb0@&i/o-file-protection-rtd) (&i/o-filename-rcd . o4d0b@o4b9d@&i/o-filename-rcd) (&i/o-filename-rtd . o4d0a@o4b9b@&i/o-filename-rtd) (&i/o-invalid-position-rcd . o4d01@o4b82@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . o4d00@o4b80@&i/o-invalid-position-rtd) (&i/o-write-rcd . o4cf7@o4b67@&i/o-write-rcd) (&i/o-write-rtd . o4cf6@o4b65@&i/o-write-rtd) (&i/o-read-rcd . o4cef@o4b52@&i/o-read-rcd) (&i/o-read-rtd . o4cee@o4b50@&i/o-read-rtd) (&i/o-rcd . o4ce7@o4b3d@&i/o-rcd) (&i/o-rtd . o4ce6@o4b3b@&i/o-rtd) (&undefined-rcd . o4cdf@o4b28@&undefined-rcd) (&undefined-rtd . o4cde@o4b26@&undefined-rtd) (&syntax-rcd . o4cd7@o4b13@&syntax-rcd) (&syntax-rtd . o4cd6@o4b11@&syntax-rtd) (&lexical-rcd . o4ccb@o4af2@&lexical-rcd) (&lexical-rtd . o4cca@o4af0@&lexical-rtd) (&implementation-restriction-rcd . o4cc3@o4add@&implementation-restriction-rcd) (&implementation-restriction-rtd . o4cc2@o4adb@&implementation-restriction-rtd) (&non-continuable-rcd . o4cbb@o4ac8@&non-continuable-rcd) (&non-continuable-rtd . o4cba@o4ac6@&non-continuable-rtd) (&who-rcd . o4cb3@o4ab3@&who-rcd) (&who-rtd . o4cb2@o4ab1@&who-rtd) (&irritants-rcd . o4ca9@o4a98@&irritants-rcd) (&irritants-rtd . o4ca8@o4a96@&irritants-rtd) (&assertion-rcd . o4c9f@o4a7d@&assertion-rcd) (&assertion-rtd . o4c9e@o4a7b@&assertion-rtd) (&violation-rcd . o4c97@o4a68@&violation-rcd) (&violation-rtd . o4c96@o4a66@&violation-rtd) (&error-rcd . o4c8f@o4a53@&error-rcd) (&error-rtd . o4c8e@o4a51@&error-rtd) (&serious-rcd . o4c87@o4a3e@&serious-rcd) (&serious-rtd . o4c86@o4a3c@&serious-rtd) (&warning-rcd . o4c7f@o4a29@&warning-rcd) (&warning-rtd . o4c7e@o4a27@&warning-rtd) (&message-rcd . o4c77@o4a14@&message-rcd) (&message-rtd . o4c76@o4a12@&message-rtd) (&condition-rcd . o4c6d@o49b5@&condition-rcd) (&condition-rtd . o4c6c@o49b3@&condition-rtd) (syntax-error . o4995@o2f9b@syntax-error) (syntax-dispatch . o492a@o2eb6@syntax-dispatch) (load . o4e88@o4d73@load) (interaction-environment . o499d@o2fab@interaction-environment) (library-path . o2abd@o294c@library-path) (make-parameter . o2855@o277f@make-parameter) (make-variable-transformer . o48e8@o2ce3@make-variable-transformer) (identifier? . o4998@o2fa1@identifier?) (generate-temporaries . o498e@o2f8d@generate-temporaries) (free-identifier=? . o498f@o2f8f@free-identifier=?) (syntax->datum . o499a@o2fa5@syntax->datum) (datum->syntax . o4999@o2fa3@datum->syntax) (bound-identifier=? . o4990@o2f91@bound-identifier=?) (make-i/o-write-error . o4cf4@o4b61@make-i/o-write-error) (make-i/o-read-error . o4cec@o4b4c@make-i/o-read-error) (make-i/o-port-error . o4d30@o4c02@make-i/o-port-error) (make-i/o-invalid-position-error . o4cfc@o4b78@make-i/o-invalid-position-error) (make-i/o-filename-error . o4d06@o4b93@make-i/o-filename-error) (make-i/o-file-protection-error . o4d10@o4bac@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . o4d18@o4bc1@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . o4d28@o4beb@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . o4d20@o4bd6@make-i/o-file-already-exists-error) (make-i/o-error . o4ce4@o4b37@make-i/o-error) (make-i/o-encoding-error . o4d42@o4c32@make-i/o-encoding-error) (make-i/o-decoding-error . o4d3a@o4c1b@make-i/o-decoding-error) (i/o-write-error? . o4cf5@o4b63@i/o-write-error?) (i/o-read-error? . o4ced@o4b4e@i/o-read-error?) (i/o-port-error? . o4d32@o4c06@i/o-port-error?) (i/o-invalid-position-error? . o4cfe@o4b7c@i/o-invalid-position-error?) (i/o-filename-error? . o4d08@o4b97@i/o-filename-error?) (i/o-file-protection-error? . o4d11@o4bae@i/o-file-protection-error?) (i/o-file-is-read-only-error? . o4d19@o4bc3@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . o4d29@o4bed@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . o4d21@o4bd8@i/o-file-already-exists-error?) (i/o-error? . o4ce5@o4b39@i/o-error?) (i/o-error-position . o4cff@o4b7e@i/o-error-position) (i/o-error-port . o4d33@o4c08@i/o-error-port) (i/o-error-filename . o4d09@o4b99@i/o-error-filename) (i/o-encoding-error? . o4d44@o4c36@i/o-encoding-error?) (i/o-encoding-error-char . o4d45@o4c38@i/o-encoding-error-char) (i/o-decoding-error? . o4d3b@o4c1d@i/o-decoding-error?) (scheme-report-environment . o4985@o2f7b@scheme-report-environment) (null-environment . o4984@o2f79@null-environment) (command-line . o4e85@o4d6d@command-line) (eval . o4987@o2f7f@eval) (environment . o4983@o2f77@environment) (who-condition? . o4cb0@o4aad@who-condition?) (warning? . o4c7d@o4a25@warning?) (violation? . o4c95@o4a64@violation?) (undefined-violation? . o4cdd@o4b24@undefined-violation?) (syntax-violation? . o4cd3@o4b0b@syntax-violation?) (syntax-violation-subform . o4cd5@o4b0f@syntax-violation-subform) (syntax-violation-form . o4cd4@o4b0d@syntax-violation-form) (syntax-violation . o4997@o2f9f@syntax-violation) (serious-condition? . o4c85@o4a3a@serious-condition?) (non-continuable-violation? . o4cb9@o4ac4@non-continuable-violation?) (message-condition? . o4c74@o4a0e@message-condition?) (make-who-condition . o4cae@o4aa9@make-who-condition) (make-warning . o4c7c@o4a23@make-warning) (make-violation . o4c94@o4a62@make-violation) (make-undefined-violation . o4cdc@o4b22@make-undefined-violation) (make-syntax-violation . o4cd0@o4b05@make-syntax-violation) (make-serious-condition . o4c84@o4a38@make-serious-condition) (make-non-continuable-violation . o4cb8@o4ac2@make-non-continuable-violation) (make-message-condition . o4c72@o4a0a@make-message-condition) (make-lexical-violation . o4cc8@o4aec@make-lexical-violation) (make-irritants-condition . o4ca4@o4a8e@make-irritants-condition) (make-implementation-restriction-violation . o4cc0@o4ad7@make-implementation-restriction-violation) (make-error . o4c8c@o4a4d@make-error) (make-assertion-violation . o4c9c@o4a77@make-assertion-violation) (lexical-violation? . o4cc9@o4aee@lexical-violation?) (irritants-condition? . o4ca6@o4a92@irritants-condition?) (implementation-restriction-violation? . o4cc1@o4ad9@implementation-restriction-violation?) (error? . o4c8d@o4a4f@error?) (condition-who . o4cb1@o4aaf@condition-who) (condition-message . o4c75@o4a10@condition-message) (condition-irritants . o4ca7@o4a94@condition-irritants) (assertion-violation? . o4c9d@o4a79@assertion-violation?) (no-nans-violation? . o4d55@o4c62@no-nans-violation?) (no-infinities-violation? . o4d4d@o4c4d@no-infinities-violation?) (make-no-nans-violation . o4d54@o4c60@make-no-nans-violation) (make-no-infinities-violation . o4d4c@o4c4b@make-no-infinities-violation) (assertion-error . o4994@o2f99@assertion-error)))))) (o2acd@o296c@install-library 'o5161 '(mosh interaction) '() '() '() '() '((regexp? . o5159) (alist->eq-hash-table . o5156) (format . o5153) (string-split . o5148) (call-process . o5142) (set-current-directory! . o513e) (expand-path . o513d) (current-directory . o513c) (%spawn . o513b) (%waitpid . o513a) (%ffi-supported? . o5139) (%ffi-pointer-ref . o5138) (%ffi-pointer->string . o5137) (%ffi-call->string-or-zero . o5136) (%ffi-call->double . o5135) (%ffi-call->void* . o5134) (%ffi-call->void . o5133) (%ffi-call->int . o5132) (%ffi-lookup . o5131) (%ffi-open . o5130) (%fork . o512f) (%pipe . o512e) (p . o512d) (string-upcase . o510f) (string-titlecase . o510e) (string-normalize-nfkd . o510d) (string-normalize-nfkc . o510c) (string-normalize-nfd . o510b) (string-normalize-nfc . o510a) (string-foldcase . o5109) (string-downcase . o5108) (string-ci>? . o5107) (string-ci>=? . o5106) (string-ci=? . o5105) (string-ci<? . o5104) (string-ci<=? . o5103) (char-whitespace? . o5102) (char-upper-case? . o5101) (char-title-case? . o5100) (char-numeric? . o50ff) (char-lower-case? . o50fe) (char-general-category . o50fd) (char-upcase . o50fc) (char-titlecase . o50fb) (char-foldcase . o50fa) (char-downcase . o50f9) (char-ci>? . o50f8) (char-ci>=? . o50f7) (char-ci=? . o50f6) (char-ci<? . o50f5) (char-ci<=? . o50f4) (char-alphabetic? . o50f3) (make-variable-transformer . o2ce2) (identifier? . o2fa0) (generate-temporaries . o2f8c) (free-identifier=? . o2f8e) (syntax->datum . o2fa4) (datum->syntax . o2fa2) (bound-identifier=? . o2f90) (record-type-descriptor? . o50f2) (record-predicate . o50f1) (record-mutator . o50f0) (record-constructor . o50ef) (record-accessor . o50ee) (make-record-type-descriptor . o50ed) (make-record-constructor-descriptor . o50ec) (record? . o50eb) (record-type-uid . o50ea) (record-type-sealed? . o50e9) (record-type-parent . o50e8) (record-type-opaque? . o50e7) (record-type-name . o50e6) (record-type-generative? . o50e5) (record-type-field-names . o50e4) (record-rtd . o50e3) (record-field-mutable? . o50e2) (delete-file . o50e1) (file-exists? . o50e0) (vector-sort! . o50df) (vector-sort . o50de) (list-sort . o50dd) (symbol-hash . o50dc) (string-ci-hash . o50db) (string-hash . o50da) (equal-hash . o50d9) (hashtable-equivalence-function . o50d8) (make-hashtable . o50d7) (hashtable-hash-function . o50d6) (make-eqv-hashtable . o50d5) (make-eq-hashtable . o50d4) (hashtable? . o50d3) (hashtable-update! . o50d2) (hashtable-size . o50d1) (hashtable-set! . o50d0) (hashtable-ref . o50cf) (hashtable-mutable? . o50ce) (hashtable-keys . o50cd) (hashtable-entries . o50cc) (hashtable-delete! . o50cb) (hashtable-copy . o50ca) (hashtable-contains? . o50c9) (hashtable-clear! . o50c8) (call-with-output-file . o50c7) (call-with-input-file . o50c6) (write-char . o50c5) (write . o50c4) (with-output-to-file . o50c3) (with-input-from-file . o50c2) (read-char . o50c1) (read . o50c0) (peek-char . o50bf) (open-output-file . o50be) (open-input-file . o50bd) (newline . o50bc) (display . o50bb) (close-output-port . o50ba) (close-input-port . o50b9) (eof-object? . o50b8) (eof-object . o50b7) (current-error-port . o50b6) (current-output-port . o50b5) (current-input-port . o50b4) (output-port? . o50b3) (input-port? . o50b2) (utf-8-codec . o50b1) (utf-16-codec . o50b0) (transcoder-error-handling-mode . o50af) (transcoder-eol-style . o50ae) (transcoder-codec . o50ad) (transcoded-port . o50ac) (textual-port? . o50ab) (string->bytevector . o50aa) (standard-output-port . o50a9) (standard-input-port . o50a8) (standard-error-port . o50a7) (set-port-position! . o50a6) (put-u8 . o50a5) (put-string . o50a4) (put-datum . o50a3) (put-char . o50a2) (put-bytevector . o50a1) (port? . o50a0) (port-transcoder . o509f) (port-position . o509e) (port-has-set-port-position!? . o509d) (port-has-port-position? . o509c) (port-eof? . o509b) (output-port-buffer-mode . o509a) (open-string-output-port . o5099) (open-string-input-port . o5098) (open-file-output-port . o5097) (open-file-input/output-port . o5096) (open-file-input-port . o5095) (open-bytevector-output-port . o5094) (open-bytevector-input-port . o5093) (native-transcoder . o5092) (native-eol-style . o5091) (make-transcoder . o5090) (latin-1-codec . o508f) (make-i/o-write-error . o4b60) (make-i/o-read-error . o4b4b) (make-i/o-port-error . o4c01) (make-i/o-invalid-position-error . o4b77) (make-i/o-filename-error . o4b92) (make-i/o-file-protection-error . o4bab) (make-i/o-file-is-read-only-error . o4bc0) (make-i/o-file-does-not-exist-error . o4bea) (make-i/o-file-already-exists-error . o4bd5) (make-i/o-error . o4b36) (make-i/o-encoding-error . o4c31) (make-i/o-decoding-error . o4c1a) (make-custom-textual-output-port . o508e) (make-custom-textual-input/output-port . o508d) (make-custom-textual-input-port . o508c) (make-custom-binary-output-port . o508b) (make-custom-binary-input/output-port . o508a) (make-custom-binary-input-port . o5089) (make-bytevector . o5088) (lookahead-u8 . o5087) (lookahead-char . o5086) (i/o-write-error? . o4b62) (i/o-read-error? . o4b4d) (i/o-port-error? . o4c05) (i/o-invalid-position-error? . o4b7b) (i/o-filename-error? . o4b96) (i/o-file-protection-error? . o4bad) (i/o-file-is-read-only-error? . o4bc2) (i/o-file-does-not-exist-error? . o4bec) (i/o-file-already-exists-error? . o4bd7) (i/o-error? . o4b38) (i/o-error-position . o4b7d) (i/o-error-port . o4c07) (i/o-error-filename . o4b98) (i/o-encoding-error? . o4c35) (i/o-encoding-error-char . o4c37) (i/o-decoding-error? . o4c1c) (get-u8 . o5085) (get-string-n! . o5084) (get-string-n . o5083) (get-string-all . o5082) (get-line . o5081) (get-datum . o5080) (get-char . o507f) (get-bytevector-some . o507e) (get-bytevector-n! . o507d) (get-bytevector-n . o507c) (get-bytevector-all . o507b) (flush-output-port . o507a) (close-port . o5079) (exit . o5071) (command-line . o4d6c) (string-fill! . o5070) (string-set! . o506f) (set-cdr! . o506e) (set-car! . o506d) (remove . o506c) (remv . o506b) (remp . o506a) (remq . o5069) (partition . o5068) (memv . o5067) (memq . o5066) (memp . o5065) (member . o5064) (exists . o5063) (for-all . o5062) (fold-right . o5061) (fold-left . o5060) (find . o505f) (filter . o505e) (cons* . o505d) (assv . o505c) (assq . o505b) (assp . o505a) (assoc . o5059) (call-with-string-output-port . o5058) (call-with-port . o5057) (call-with-bytevector-output-port . o5056) (bytevector->string . o5055) (buffer-mode? . o5054) (binary-port? . o5053) (with-exception-handler . o5052) (raise-continuable . o5051) (raise . o5050) (eval . o2f7e) (environment . o2f76) (make-enumeration . o504f) (enum-set=? . o504e) (enum-set-universe . o504d) (enum-set-union . o504c) (enum-set-subset? . o504b) (enum-set-projection . o504a) (enum-set-member? . o5049) (enum-set-intersection . o5048) (enum-set-indexer . o5047) (enum-set-difference . o5046) (enum-set-constructor . o5045) (enum-set-complement . o5044) (enum-set->list . o5043) (who-condition? . o4aac) (warning? . o4a24) (violation? . o4a63) (undefined-violation? . o4b23) (syntax-violation? . o4b0a) (syntax-violation-subform . o4b0e) (syntax-violation-form . o4b0c) (syntax-violation . o2f9e) (simple-conditions . o5042) (serious-condition? . o4a39) (non-continuable-violation? . o4ac3) (message-condition? . o4a0d) (make-who-condition . o4aa8) (make-warning . o4a22) (make-violation . o4a61) (make-undefined-violation . o4b21) (make-syntax-violation . o4b04) (make-serious-condition . o4a37) (make-non-continuable-violation . o4ac1) (make-message-condition . o4a09) (make-lexical-violation . o4aeb) (make-irritants-condition . o4a8d) (make-implementation-restriction-violation . o4ad6) (make-error . o4a4c) (make-assertion-violation . o4a76) (lexical-violation? . o4aed) (irritants-condition? . o4a91) (implementation-restriction-violation? . o4ad8) (error? . o4a4e) (condition-who . o4aae) (condition-predicate . o5041) (condition-message . o4a0f) (condition-irritants . o4a93) (condition-accessor . o5040) (condition . o503f) (assertion-violation? . o4a78) (condition? . o503e) (utf32->string . o503d) (utf16->string . o503c) (utf8->string . o503b) (uint-list->bytevector . o503a) (u8-list->bytevector . o5039) (string->utf8 . o5038) (string->utf32 . o5037) (string->utf16 . o5036) (sint-list->bytevector . o5035) (native-endianness . o5034) (bytevector? . o5033) (bytevector=? . o5032) (bytevector-uint-set! . o5031) (bytevector-uint-ref . o5030) (bytevector-u8-set! . o502f) (bytevector-u8-ref . o502e) (bytevector-u64-set! . o502d) (bytevector-u64-ref . o502c) (bytevector-u64-native-set! . o502b) (bytevector-u64-native-ref . o502a) (bytevector-u32-set! . o5029) (bytevector-u32-ref . o5028) (bytevector-u32-native-set! . o5027) (bytevector-u32-native-ref . o5026) (bytevector-u16-set! . o5025) (bytevector-u16-ref . o5024) (bytevector-u16-native-set! . o5023) (bytevector-u16-native-ref . o5022) (bytevector-sint-set! . o5021) (bytevector-sint-ref . o5020) (bytevector-s8-set! . o501f) (bytevector-s8-ref . o501e) (bytevector-s64-set! . o501d) (bytevector-s64-ref . o501c) (bytevector-s64-native-set! . o501b) (bytevector-s64-native-ref . o501a) (bytevector-s32-set! . o5019) (bytevector-s32-ref . o5018) (bytevector-s32-native-set! . o5017) (bytevector-s32-native-ref . o5016) (bytevector-s16-set! . o5015) (bytevector-s16-ref . o5014) (bytevector-s16-native-set! . o5013) (bytevector-s16-native-ref . o5012) (bytevector-length . o5011) (bytevector-ieee-single-ref . o5010) (bytevector-ieee-single-set! . o500f) (bytevector-ieee-single-native-set! . o500e) (bytevector-ieee-single-native-ref . o500d) (bytevector-ieee-double-set! . o500c) (bytevector-ieee-double-ref . o500b) (bytevector-ieee-double-native-set! . o500a) (bytevector-ieee-double-native-ref . o5009) (bytevector-fill! . o5008) (bytevector-copy! . o5007) (bytevector-copy . o5006) (bytevector->uint-list . o5005) (bytevector->u8-list . o5004) (bytevector->sint-list . o5003) (no-nans-violation? . o4c61) (no-infinities-violation? . o4c4c) (make-no-nans-violation . o4c5f) (make-no-infinities-violation . o4c4a) (real->flonum . o5002) (flzero? . o5001) (fltruncate . o5000) (fltan . o4fff) (flsqrt . o4ffe) (flsin . o4ffd) (flround . o4ffc) (flpositive? . o4ffb) (flonum? . o4ffa) (flodd? . o4ff9) (flnumerator . o4ff8) (flnegative? . o4ff7) (flnan? . o4ff6) (flmod0 . o4ff5) (flmod . o4ff4) (flmin . o4ff3) (flmax . o4ff2) (fllog . o4ff1) (flinteger? . o4ff0) (flinfinite? . o4fef) (flfloor . o4fee) (flfinite? . o4fed) (flexpt . o4fec) (flexp . o4feb) (fleven? . o4fea) (fldiv0-and-mod0 . o4fe9) (fldiv0 . o4fe8) (fldiv-and-mod . o4fe7) (fldiv . o4fe6) (fldenominator . o4fe5) (flcos . o4fe4) (flceiling . o4fe3) (flatan . o4fe2) (flasin . o4fe1) (flacos . o4fe0) (flabs . o4fdf) (fl>? . o4fde) (fl>=? . o4fdd) (fl=? . o4fdc) (fl<? . o4fdb) (fl<=? . o4fda) (fl/ . o4fd9) (fl- . o4fd8) (fl+ . o4fd7) (fl* . o4fd6) (fixnum->flonum . o4fd5) (fxzero? . o4fd4) (fxxor . o4fd3) (fxrotate-bit-field . o4fd2) (fxreverse-bit-field . o4fd1) (fxpositive? . o4fd0) (fxodd? . o4fcf) (fxnot . o4fce) (fxnegative? . o4fcd) (fxmod0 . o4fcc) (fxmod . o4fcb) (fxmin . o4fca) (fxmax . o4fc9) (fxlength . o4fc8) (fxior . o4fc7) (fxif . o4fc6) (fxfirst-bit-set . o4fc5) (fxeven? . o4fc4) (fxdiv0-and-mod0 . o4fc3) (fxdiv0 . o4fc2) (fxdiv-and-mod . o4fc1) (fxdiv . o4fc0) (fxcopy-bit-field . o4fbf) (fxcopy-bit . o4fbe) (fxbit-set? . o4fbd) (fxbit-field . o4fbc) (fxbit-count . o4fbb) (fxarithmetic-shift-right . o4fba) (fxarithmetic-shift-left . o4fb9) (fxarithmetic-shift . o4fb8) (fxand . o4fb7) (fx>? . o4fb6) (fx>=? . o4fb5) (fx=? . o4fb4) (fx<? . o4fb3) (fx<=? . o4fb2) (fx-/carry . o4fb1) (fx- . o4fb0) (fx+/carry . o4faf) (fx+ . o4fae) (fx*/carry . o4fad) (fx* . o4fac) (greatest-fixnum . o4fab) (least-fixnum . o4faa) (fixnum-width . o4fa9) (fixnum? . o4fa8) (bitwise-rotate-bit-field . o4fa7) (bitwise-reverse-bit-field . o4fa6) (bitwise-length . o4fa5) (bitwise-if . o4fa4) (bitwise-first-bit-set . o4fa3) (bitwise-copy-bit-field . o4fa2) (bitwise-copy-bit . o4fa1) (bitwise-bit-set? . o4fa0) (bitwise-bit-field . o4f9f) (bitwise-bit-count . o4f9e) (bitwise-xor . o4f9d) (bitwise-ior . o4f9c) (bitwise-and . o4f9b) (bitwise-not . o4f9a) (bitwise-arithmetic-shift-right . o4f99) (bitwise-arithmetic-shift-left . o4f98) (bitwise-arithmetic-shift . o4f97) (zero? . o4f96) (vector? . o4f95) (vector-set! . o4f94) (vector-ref . o4f93) (vector-map . o4f92) (vector-length . o4f91) (vector-for-each . o4f90) (vector-fill! . o4f8f) (vector->list . o4f8e) (vector . o4f8d) (values . o4f8c) (truncate . o4f8b) (tan . o4f8a) (symbol? . o4f89) (symbol=? . o4f88) (symbol->string . o4f87) (substring . o4f86) (string? . o4f85) (string>? . o4f84) (string>=? . o4f83) (string=? . o4f82) (string<? . o4f81) (string<=? . o4f80) (string-ref . o4f7f) (string-length . o4f7e) (string-for-each . o4f7d) (string-copy . o4f7c) (string-append . o4f7b) (string->symbol . o4f7a) (string->number . o4f79) (string->list . o4f78) (string . o4f77) (sqrt . o4f76) (sin . o4f75) (round . o4f74) (reverse . o4f73) (real? . o4f72) (real-valued? . o4f71) (real-part . o4f70) (rationalize . o4f6f) (rational? . o4f6e) (rational-valued? . o4f6d) (procedure? . o4f6c) (positive? . o4f6b) (pair? . o4f6a) (odd? . o4f69) (numerator . o4f68) (number? . o4f67) (number->string . o4f66) (null? . o4f65) (not . o4f64) (negative? . o4f63) (nan? . o4f62) (min . o4f61) (max . o4f60) (map . o4f5f) (make-vector . o4f5e) (make-string . o4f5d) (make-rectangular . o4f5c) (make-polar . o4f5b) (magnitude . o4f5a) (log . o4f59) (list? . o4f58) (list-tail . o4f57) (list-ref . o4f56) (list->vector . o4f55) (list->string . o4f54) (list . o4f53) (length . o4f52) (lcm . o4f51) (integer? . o4f50) (integer-valued? . o4f4f) (integer->char . o4f4e) (infinite? . o4f4d) (inexact? . o4f4c) (inexact . o4f4b) (imag-part . o4f4a) (gcd . o4f49) (for-each . o4f48) (floor . o4f47) (finite? . o4f46) (expt . o4f45) (exp . o4f44) (exact? . o4f43) (exact-integer-sqrt . o4f42) (exact . o4f41) (even? . o4f40) (error . o4f3f) (eqv? . o4f3e) (equal? . o4f3d) (eq? . o4f3c) (dynamic-wind . o4f3b) (div0-and-mod0 . o4f3a) (mod0 . o4f39) (div0 . o4f38) (div-and-mod . o4f37) (mod . o4f36) (div . o4f35) (denominator . o4f34) (cos . o4f33) (cons . o4f32) (complex? . o4f31) (char? . o4f30) (char>? . o4f2f) (char>=? . o4f2e) (char=? . o4f2d) (char<? . o4f2c) (char<=? . o4f2b) (char->integer . o4f2a) (ceiling . o4f29) (call-with-values . o4f28) (call/cc . o4f27) (call-with-current-continuation . o4f26) (cddddr . o4f25) (cdddar . o4f24) (cddadr . o4f23) (cddaar . o4f22) (cdaddr . o4f21) (cdadar . o4f20) (cdaadr . o4f1f) (cdaaar . o4f1e) (cadddr . o4f1d) (caddar . o4f1c) (cadadr . o4f1b) (cadaar . o4f1a) (caaddr . o4f19) (caadar . o4f18) (caaadr . o4f17) (caaaar . o4f16) (cdddr . o4f15) (cddar . o4f14) (cdadr . o4f13) (cdaar . o4f12) (caddr . o4f11) (cadar . o4f10) (caadr . o4f0f) (caaar . o4f0e) (cddr . o4f0d) (cdar . o4f0c) (cadr . o4f0b) (caar . o4f0a) (cdr . o4f09) (car . o4f08) (boolean? . o4f07) (boolean=? . o4f06) (atan . o4f05) (assertion-violation . o4f04) (asin . o4f03) (apply . o4f02) (append . o4f01) (angle . o4f00) (acos . o4eff) (abs . o4efe) (/ . o4efd) (* . o4efc) (- . o4efb) (+ . o4efa) (>= . o4ef9) (> . o4ef8) (= . o4ef7) (<= . o4ef6) (< . o4ef5) (library . o4ef4) (&no-nans . o4ef3) (&no-infinities . o4ef2) (&i/o-encoding . o4ef1) (&i/o-decoding . o4ef0) (&i/o-port . o4eef) (&i/o-file-does-not-exist . o4eee) (&i/o-file-already-exists . o4eed) (&i/o-file-is-read-only . o4eec) (&i/o-file-protection . o4eeb) (&i/o-filename . o4eea) (&i/o-invalid-position . o4ee9) (&i/o-write . o4ee8) (&i/o-read . o4ee7) (&i/o . o4ee6) (&undefined . o4ee5) (&syntax . o4ee4) (&lexical . o4ee3) (&implementation-restriction . o4ee2) (&non-continuable . o4ee1) (&who . o4ee0) (&irritants . o4edf) (&assertion . o4ede) (&violation . o4edd) (&error . o4edc) (&serious . o4edb) (&warning . o4eda) (&message . o4ed9) (&condition . o4ed8) (define-condition-type . o4ed7) (define-enumeration . o4ed6) (define-record-type . o4ed5) (parent-rtd . o4ed4) (nongenerative . o4ed3) (opaque . o4ed2) (sealed . o4ed1) (protocol . o4ed0) (parent . o4ecf) (immutable . o4ece) (mutable . o4ecd) (fields . o4ecc) (error-handling-mode . o4ecb) (file-options . o4eca) (buffer-mode . o4ec9) (eol-style . o4ec8) (guard . o4ec7) (unsyntax-splicing . o4ec4) (unsyntax . o4ec3) (unquote-splicing . o4ec2) (unquote . o4ec1) (_ . o4ec0) (else . o4ebf) (=> . o4ebe) (... . o4ebd) (assert . o4ebc) (endianness . o4ebb) (time . o4eb9) (do . o4eb8) (cond . o4eb7) (let* . o4eb6) (let . o4eb5) (let*-values . o4eb4) (let-values . o4eb3) (identifier-syntax . o4eb2) (with-syntax . o4eb1) (quasisyntax . o4eb0) (quasiquote . o4eaf) (syntax-rules . o4eae) (include . o4ead) (record-constructor-descriptor . o4eab) (record-type-descriptor . o4eaa) (case . o4ea9) (unless . o4ea7) (when . o4ea6) (or . o4ea5) (and . o4ea4) (if . o4ea3) (letrec* . o4ea2) (letrec . o4ea1) (case-lambda . o4e9f) (lambda . o4e9e) (syntax . o4e9d) (syntax-case . o4e9c) (quote . o4e9b) (letrec-syntax . o4e99) (let-syntax . o4e98) (set! . o4e97) (import . o4e96) (begin . o4e95) (define-syntax . o4e93) (define . o4e92)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5162 '(psyntax null-environment-5) '() '() '() '() '((make-promise . o5072) (unquote-splicing . o4ec2) (unquote . o4ec1) (_ . o4ec0) (else . o4ebf) (=> . o4ebe) (... . o4ebd) (delay . o4eba) (do . o4eb8) (cond . o4eb7) (let* . o4eb6) (let . o4eb5) (quasiquote . o4eaf) (syntax-rules . o4eae) (case . o4ea9) (or . o4ea5) (and . o4ea4) (if . o4ea3) (letrec . o4ea1) (lambda . o4e9e) (quote . o4e9b) (letrec-syntax . o4e99) (let-syntax . o4e98) (set! . o4e97) (begin . o4e95) (define-syntax . o4e93) (define . o4e92)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5163 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . o5107) (string-ci>=? . o5106) (string-ci=? . o5105) (string-ci<? . o5104) (string-ci<=? . o5103) (char-whitespace? . o5102) (char-upper-case? . o5101) (char-numeric? . o50ff) (char-lower-case? . o50fe) (char-upcase . o50fc) (char-downcase . o50f9) (char-ci>? . o50f8) (char-ci>=? . o50f7) (char-ci=? . o50f6) (char-ci<? . o50f5) (char-ci<=? . o50f4) (char-alphabetic? . o50f3) (call-with-output-file . o50c7) (call-with-input-file . o50c6) (write-char . o50c5) (write . o50c4) (with-output-to-file . o50c3) (with-input-from-file . o50c2) (read-char . o50c1) (read . o50c0) (peek-char . o50bf) (open-output-file . o50be) (open-input-file . o50bd) (newline . o50bc) (display . o50bb) (close-output-port . o50ba) (close-input-port . o50b9) (eof-object . o50b7) (current-output-port . o50b5) (current-input-port . o50b4) (output-port? . o50b3) (input-port? . o50b2) (scheme-report-environment . o2f7a) (quotient . o5078) (null-environment . o2f78) (remainder . o5077) (modulo . o5076) (inexact->exact . o5075) (force . o5074) (exact->inexact . o5073) (make-promise . o5072) (string-fill! . o5070) (string-set! . o506f) (set-cdr! . o506e) (set-car! . o506d) (memv . o5067) (memq . o5066) (member . o5064) (assv . o505c) (assq . o505b) (assoc . o5059) (eval . o2f7e) (zero? . o4f96) (vector? . o4f95) (vector-set! . o4f94) (vector-ref . o4f93) (vector-length . o4f91) (vector-fill! . o4f8f) (vector->list . o4f8e) (vector . o4f8d) (values . o4f8c) (truncate . o4f8b) (tan . o4f8a) (symbol? . o4f89) (symbol->string . o4f87) (substring . o4f86) (string? . o4f85) (string>? . o4f84) (string>=? . o4f83) (string=? . o4f82) (string<? . o4f81) (string<=? . o4f80) (string-ref . o4f7f) (string-length . o4f7e) (string-copy . o4f7c) (string-append . o4f7b) (string->symbol . o4f7a) (string->number . o4f79) (string->list . o4f78) (string . o4f77) (sqrt . o4f76) (sin . o4f75) (round . o4f74) (reverse . o4f73) (real? . o4f72) (real-part . o4f70) (rationalize . o4f6f) (rational? . o4f6e) (procedure? . o4f6c) (positive? . o4f6b) (pair? . o4f6a) (odd? . o4f69) (numerator . o4f68) (number? . o4f67) (number->string . o4f66) (not . o4f64) (negative? . o4f63) (min . o4f61) (max . o4f60) (map . o4f5f) (make-vector . o4f5e) (make-string . o4f5d) (make-rectangular . o4f5c) (make-polar . o4f5b) (magnitude . o4f5a) (log . o4f59) (list? . o4f58) (list-tail . o4f57) (list-ref . o4f56) (list->vector . o4f55) (list->string . o4f54) (list . o4f53) (length . o4f52) (lcm . o4f51) (integer? . o4f50) (integer->char . o4f4e) (inexact? . o4f4c) (imag-part . o4f4a) (gcd . o4f49) (for-each . o4f48) (floor . o4f47) (expt . o4f45) (exp . o4f44) (exact? . o4f43) (even? . o4f40) (eqv? . o4f3e) (equal? . o4f3d) (eq? . o4f3c) (dynamic-wind . o4f3b) (denominator . o4f34) (cos . o4f33) (cons . o4f32) (complex? . o4f31) (char? . o4f30) (char>? . o4f2f) (char>=? . o4f2e) (char=? . o4f2d) (char<? . o4f2c) (char<=? . o4f2b) (char->integer . o4f2a) (ceiling . o4f29) (call-with-values . o4f28) (call-with-current-continuation . o4f26) (cddddr . o4f25) (cdddar . o4f24) (cddadr . o4f23) (cddaar . o4f22) (cdaddr . o4f21) (cdadar . o4f20) (cdaadr . o4f1f) (cdaaar . o4f1e) (cadddr . o4f1d) (caddar . o4f1c) (cadadr . o4f1b) (cadaar . o4f1a) (caaddr . o4f19) (caadar . o4f18) (caaadr . o4f17) (caaaar . o4f16) (cdddr . o4f15) (cddar . o4f14) (cdadr . o4f13) (cdaar . o4f12) (caddr . o4f11) (cadar . o4f10) (caadr . o4f0f) (caaar . o4f0e) (cddr . o4f0d) (cdar . o4f0c) (cadr . o4f0b) (caar . o4f0a) (cdr . o4f09) (car . o4f08) (boolean? . o4f07) (atan . o4f05) (asin . o4f03) (apply . o4f02) (append . o4f01) (angle . o4f00) (acos . o4eff) (abs . o4efe) (/ . o4efd) (* . o4efc) (- . o4efb) (+ . o4efa) (>= . o4ef9) (> . o4ef8) (= . o4ef7) (<= . o4ef6) (< . o4ef5) (unquote-splicing . o4ec2) (unquote . o4ec1) (else . o4ebf) (=> . o4ebe) (... . o4ebd) (delay . o4eba) (do . o4eb8) (cond . o4eb7) (let* . o4eb6) (let . o4eb5) (quasiquote . o4eaf) (syntax-rules . o4eae) (case . o4ea9) (or . o4ea5) (and . o4ea4) (if . o4ea3) (letrec . o4ea1) (lambda . o4e9e) (quote . o4e9b) (letrec-syntax . o4e99) (let-syntax . o4e98) (set! . o4e97) (begin . o4e95) (define-syntax . o4e93) (define . o4e92)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5164 '(psyntax modules) '() '() '() '() '((module . o4e94)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5165 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5166 '(rnrs) '(6) '() '() '() '((regexp? . o5159) (string-upcase . o510f) (string-titlecase . o510e) (string-normalize-nfkd . o510d) (string-normalize-nfkc . o510c) (string-normalize-nfd . o510b) (string-normalize-nfc . o510a) (string-foldcase . o5109) (string-downcase . o5108) (string-ci>? . o5107) (string-ci>=? . o5106) (string-ci=? . o5105) (string-ci<? . o5104) (string-ci<=? . o5103) (char-whitespace? . o5102) (char-upper-case? . o5101) (char-title-case? . o5100) (char-numeric? . o50ff) (char-lower-case? . o50fe) (char-general-category . o50fd) (char-upcase . o50fc) (char-titlecase . o50fb) (char-foldcase . o50fa) (char-downcase . o50f9) (char-ci>? . o50f8) (char-ci>=? . o50f7) (char-ci=? . o50f6) (char-ci<? . o50f5) (char-ci<=? . o50f4) (char-alphabetic? . o50f3) (make-variable-transformer . o2ce2) (identifier? . o2fa0) (generate-temporaries . o2f8c) (free-identifier=? . o2f8e) (syntax->datum . o2fa4) (datum->syntax . o2fa2) (bound-identifier=? . o2f90) (record-type-descriptor? . o50f2) (record-predicate . o50f1) (record-mutator . o50f0) (record-constructor . o50ef) (record-accessor . o50ee) (make-record-type-descriptor . o50ed) (make-record-constructor-descriptor . o50ec) (record? . o50eb) (record-type-uid . o50ea) (record-type-sealed? . o50e9) (record-type-parent . o50e8) (record-type-opaque? . o50e7) (record-type-name . o50e6) (record-type-generative? . o50e5) (record-type-field-names . o50e4) (record-rtd . o50e3) (record-field-mutable? . o50e2) (delete-file . o50e1) (file-exists? . o50e0) (vector-sort! . o50df) (vector-sort . o50de) (list-sort . o50dd) (symbol-hash . o50dc) (string-ci-hash . o50db) (string-hash . o50da) (equal-hash . o50d9) (hashtable-equivalence-function . o50d8) (make-hashtable . o50d7) (hashtable-hash-function . o50d6) (make-eqv-hashtable . o50d5) (make-eq-hashtable . o50d4) (hashtable? . o50d3) (hashtable-update! . o50d2) (hashtable-size . o50d1) (hashtable-set! . o50d0) (hashtable-ref . o50cf) (hashtable-mutable? . o50ce) (hashtable-keys . o50cd) (hashtable-entries . o50cc) (hashtable-delete! . o50cb) (hashtable-copy . o50ca) (hashtable-contains? . o50c9) (hashtable-clear! . o50c8) (call-with-output-file . o50c7) (call-with-input-file . o50c6) (write-char . o50c5) (write . o50c4) (with-output-to-file . o50c3) (with-input-from-file . o50c2) (read-char . o50c1) (read . o50c0) (peek-char . o50bf) (open-output-file . o50be) (open-input-file . o50bd) (newline . o50bc) (display . o50bb) (close-output-port . o50ba) (close-input-port . o50b9) (eof-object? . o50b8) (eof-object . o50b7) (current-error-port . o50b6) (current-output-port . o50b5) (current-input-port . o50b4) (output-port? . o50b3) (input-port? . o50b2) (utf-8-codec . o50b1) (utf-16-codec . o50b0) (transcoder-error-handling-mode . o50af) (transcoder-eol-style . o50ae) (transcoder-codec . o50ad) (transcoded-port . o50ac) (textual-port? . o50ab) (string->bytevector . o50aa) (standard-output-port . o50a9) (standard-input-port . o50a8) (standard-error-port . o50a7) (set-port-position! . o50a6) (put-u8 . o50a5) (put-string . o50a4) (put-datum . o50a3) (put-char . o50a2) (put-bytevector . o50a1) (port? . o50a0) (port-transcoder . o509f) (port-position . o509e) (port-has-set-port-position!? . o509d) (port-has-port-position? . o509c) (port-eof? . o509b) (output-port-buffer-mode . o509a) (open-string-output-port . o5099) (open-string-input-port . o5098) (open-file-output-port . o5097) (open-file-input/output-port . o5096) (open-file-input-port . o5095) (open-bytevector-output-port . o5094) (open-bytevector-input-port . o5093) (native-transcoder . o5092) (native-eol-style . o5091) (make-transcoder . o5090) (latin-1-codec . o508f) (make-i/o-write-error . o4b60) (make-i/o-read-error . o4b4b) (make-i/o-port-error . o4c01) (make-i/o-invalid-position-error . o4b77) (make-i/o-filename-error . o4b92) (make-i/o-file-protection-error . o4bab) (make-i/o-file-is-read-only-error . o4bc0) (make-i/o-file-does-not-exist-error . o4bea) (make-i/o-file-already-exists-error . o4bd5) (make-i/o-error . o4b36) (make-i/o-encoding-error . o4c31) (make-i/o-decoding-error . o4c1a) (make-custom-textual-output-port . o508e) (make-custom-textual-input/output-port . o508d) (make-custom-textual-input-port . o508c) (make-custom-binary-output-port . o508b) (make-custom-binary-input/output-port . o508a) (make-custom-binary-input-port . o5089) (make-bytevector . o5088) (lookahead-u8 . o5087) (lookahead-char . o5086) (i/o-write-error? . o4b62) (i/o-read-error? . o4b4d) (i/o-port-error? . o4c05) (i/o-invalid-position-error? . o4b7b) (i/o-filename-error? . o4b96) (i/o-file-protection-error? . o4bad) (i/o-file-is-read-only-error? . o4bc2) (i/o-file-does-not-exist-error? . o4bec) (i/o-file-already-exists-error? . o4bd7) (i/o-error? . o4b38) (i/o-error-position . o4b7d) (i/o-error-port . o4c07) (i/o-error-filename . o4b98) (i/o-encoding-error? . o4c35) (i/o-encoding-error-char . o4c37) (i/o-decoding-error? . o4c1c) (get-u8 . o5085) (get-string-n! . o5084) (get-string-n . o5083) (get-string-all . o5082) (get-line . o5081) (get-datum . o5080) (get-char . o507f) (get-bytevector-some . o507e) (get-bytevector-n! . o507d) (get-bytevector-n . o507c) (get-bytevector-all . o507b) (flush-output-port . o507a) (close-port . o5079) (exit . o5071) (command-line . o4d6c) (remove . o506c) (remv . o506b) (remp . o506a) (remq . o5069) (partition . o5068) (memv . o5067) (memq . o5066) (memp . o5065) (member . o5064) (exists . o5063) (for-all . o5062) (fold-right . o5061) (fold-left . o5060) (find . o505f) (filter . o505e) (cons* . o505d) (assv . o505c) (assq . o505b) (assp . o505a) (assoc . o5059) (call-with-string-output-port . o5058) (call-with-port . o5057) (call-with-bytevector-output-port . o5056) (bytevector->string . o5055) (buffer-mode? . o5054) (binary-port? . o5053) (with-exception-handler . o5052) (raise-continuable . o5051) (raise . o5050) (make-enumeration . o504f) (enum-set=? . o504e) (enum-set-universe . o504d) (enum-set-union . o504c) (enum-set-subset? . o504b) (enum-set-projection . o504a) (enum-set-member? . o5049) (enum-set-intersection . o5048) (enum-set-indexer . o5047) (enum-set-difference . o5046) (enum-set-constructor . o5045) (enum-set-complement . o5044) (enum-set->list . o5043) (who-condition? . o4aac) (warning? . o4a24) (violation? . o4a63) (undefined-violation? . o4b23) (syntax-violation? . o4b0a) (syntax-violation-subform . o4b0e) (syntax-violation-form . o4b0c) (syntax-violation . o2f9e) (simple-conditions . o5042) (serious-condition? . o4a39) (non-continuable-violation? . o4ac3) (message-condition? . o4a0d) (make-who-condition . o4aa8) (make-warning . o4a22) (make-violation . o4a61) (make-undefined-violation . o4b21) (make-syntax-violation . o4b04) (make-serious-condition . o4a37) (make-non-continuable-violation . o4ac1) (make-message-condition . o4a09) (make-lexical-violation . o4aeb) (make-irritants-condition . o4a8d) (make-implementation-restriction-violation . o4ad6) (make-error . o4a4c) (make-assertion-violation . o4a76) (lexical-violation? . o4aed) (irritants-condition? . o4a91) (implementation-restriction-violation? . o4ad8) (error? . o4a4e) (condition-who . o4aae) (condition-predicate . o5041) (condition-message . o4a0f) (condition-irritants . o4a93) (condition-accessor . o5040) (condition . o503f) (assertion-violation? . o4a78) (condition? . o503e) (utf32->string . o503d) (utf16->string . o503c) (utf8->string . o503b) (uint-list->bytevector . o503a) (u8-list->bytevector . o5039) (string->utf8 . o5038) (string->utf32 . o5037) (string->utf16 . o5036) (sint-list->bytevector . o5035) (native-endianness . o5034) (bytevector? . o5033) (bytevector=? . o5032) (bytevector-uint-set! . o5031) (bytevector-uint-ref . o5030) (bytevector-u8-set! . o502f) (bytevector-u8-ref . o502e) (bytevector-u64-set! . o502d) (bytevector-u64-ref . o502c) (bytevector-u64-native-set! . o502b) (bytevector-u64-native-ref . o502a) (bytevector-u32-set! . o5029) (bytevector-u32-ref . o5028) (bytevector-u32-native-set! . o5027) (bytevector-u32-native-ref . o5026) (bytevector-u16-set! . o5025) (bytevector-u16-ref . o5024) (bytevector-u16-native-set! . o5023) (bytevector-u16-native-ref . o5022) (bytevector-sint-set! . o5021) (bytevector-sint-ref . o5020) (bytevector-s8-set! . o501f) (bytevector-s8-ref . o501e) (bytevector-s64-set! . o501d) (bytevector-s64-ref . o501c) (bytevector-s64-native-set! . o501b) (bytevector-s64-native-ref . o501a) (bytevector-s32-set! . o5019) (bytevector-s32-ref . o5018) (bytevector-s32-native-set! . o5017) (bytevector-s32-native-ref . o5016) (bytevector-s16-set! . o5015) (bytevector-s16-ref . o5014) (bytevector-s16-native-set! . o5013) (bytevector-s16-native-ref . o5012) (bytevector-length . o5011) (bytevector-ieee-single-ref . o5010) (bytevector-ieee-single-set! . o500f) (bytevector-ieee-single-native-set! . o500e) (bytevector-ieee-single-native-ref . o500d) (bytevector-ieee-double-set! . o500c) (bytevector-ieee-double-ref . o500b) (bytevector-ieee-double-native-set! . o500a) (bytevector-ieee-double-native-ref . o5009) (bytevector-fill! . o5008) (bytevector-copy! . o5007) (bytevector-copy . o5006) (bytevector->uint-list . o5005) (bytevector->u8-list . o5004) (bytevector->sint-list . o5003) (no-nans-violation? . o4c61) (no-infinities-violation? . o4c4c) (make-no-nans-violation . o4c5f) (make-no-infinities-violation . o4c4a) (real->flonum . o5002) (flzero? . o5001) (fltruncate . o5000) (fltan . o4fff) (flsqrt . o4ffe) (flsin . o4ffd) (flround . o4ffc) (flpositive? . o4ffb) (flonum? . o4ffa) (flodd? . o4ff9) (flnumerator . o4ff8) (flnegative? . o4ff7) (flnan? . o4ff6) (flmod0 . o4ff5) (flmod . o4ff4) (flmin . o4ff3) (flmax . o4ff2) (fllog . o4ff1) (flinteger? . o4ff0) (flinfinite? . o4fef) (flfloor . o4fee) (flfinite? . o4fed) (flexpt . o4fec) (flexp . o4feb) (fleven? . o4fea) (fldiv0-and-mod0 . o4fe9) (fldiv0 . o4fe8) (fldiv-and-mod . o4fe7) (fldiv . o4fe6) (fldenominator . o4fe5) (flcos . o4fe4) (flceiling . o4fe3) (flatan . o4fe2) (flasin . o4fe1) (flacos . o4fe0) (flabs . o4fdf) (fl>? . o4fde) (fl>=? . o4fdd) (fl=? . o4fdc) (fl<? . o4fdb) (fl<=? . o4fda) (fl/ . o4fd9) (fl- . o4fd8) (fl+ . o4fd7) (fl* . o4fd6) (fixnum->flonum . o4fd5) (fxzero? . o4fd4) (fxxor . o4fd3) (fxrotate-bit-field . o4fd2) (fxreverse-bit-field . o4fd1) (fxpositive? . o4fd0) (fxodd? . o4fcf) (fxnot . o4fce) (fxnegative? . o4fcd) (fxmod0 . o4fcc) (fxmod . o4fcb) (fxmin . o4fca) (fxmax . o4fc9) (fxlength . o4fc8) (fxior . o4fc7) (fxif . o4fc6) (fxfirst-bit-set . o4fc5) (fxeven? . o4fc4) (fxdiv0-and-mod0 . o4fc3) (fxdiv0 . o4fc2) (fxdiv-and-mod . o4fc1) (fxdiv . o4fc0) (fxcopy-bit-field . o4fbf) (fxcopy-bit . o4fbe) (fxbit-set? . o4fbd) (fxbit-field . o4fbc) (fxbit-count . o4fbb) (fxarithmetic-shift-right . o4fba) (fxarithmetic-shift-left . o4fb9) (fxarithmetic-shift . o4fb8) (fxand . o4fb7) (fx>? . o4fb6) (fx>=? . o4fb5) (fx=? . o4fb4) (fx<? . o4fb3) (fx<=? . o4fb2) (fx-/carry . o4fb1) (fx- . o4fb0) (fx+/carry . o4faf) (fx+ . o4fae) (fx*/carry . o4fad) (fx* . o4fac) (greatest-fixnum . o4fab) (least-fixnum . o4faa) (fixnum-width . o4fa9) (fixnum? . o4fa8) (bitwise-rotate-bit-field . o4fa7) (bitwise-reverse-bit-field . o4fa6) (bitwise-length . o4fa5) (bitwise-if . o4fa4) (bitwise-first-bit-set . o4fa3) (bitwise-copy-bit-field . o4fa2) (bitwise-copy-bit . o4fa1) (bitwise-bit-set? . o4fa0) (bitwise-bit-field . o4f9f) (bitwise-bit-count . o4f9e) (bitwise-xor . o4f9d) (bitwise-ior . o4f9c) (bitwise-and . o4f9b) (bitwise-not . o4f9a) (bitwise-arithmetic-shift-right . o4f99) (bitwise-arithmetic-shift-left . o4f98) (bitwise-arithmetic-shift . o4f97) (zero? . o4f96) (vector? . o4f95) (vector-set! . o4f94) (vector-ref . o4f93) (vector-map . o4f92) (vector-length . o4f91) (vector-for-each . o4f90) (vector-fill! . o4f8f) (vector->list . o4f8e) (vector . o4f8d) (values . o4f8c) (truncate . o4f8b) (tan . o4f8a) (symbol? . o4f89) (symbol=? . o4f88) (symbol->string . o4f87) (substring . o4f86) (string? . o4f85) (string>? . o4f84) (string>=? . o4f83) (string=? . o4f82) (string<? . o4f81) (string<=? . o4f80) (string-ref . o4f7f) (string-length . o4f7e) (string-for-each . o4f7d) (string-copy . o4f7c) (string-append . o4f7b) (string->symbol . o4f7a) (string->number . o4f79) (string->list . o4f78) (string . o4f77) (sqrt . o4f76) (sin . o4f75) (round . o4f74) (reverse . o4f73) (real? . o4f72) (real-valued? . o4f71) (real-part . o4f70) (rationalize . o4f6f) (rational? . o4f6e) (rational-valued? . o4f6d) (procedure? . o4f6c) (positive? . o4f6b) (pair? . o4f6a) (odd? . o4f69) (numerator . o4f68) (number? . o4f67) (number->string . o4f66) (null? . o4f65) (not . o4f64) (negative? . o4f63) (nan? . o4f62) (min . o4f61) (max . o4f60) (map . o4f5f) (make-vector . o4f5e) (make-string . o4f5d) (make-rectangular . o4f5c) (make-polar . o4f5b) (magnitude . o4f5a) (log . o4f59) (list? . o4f58) (list-tail . o4f57) (list-ref . o4f56) (list->vector . o4f55) (list->string . o4f54) (list . o4f53) (length . o4f52) (lcm . o4f51) (integer? . o4f50) (integer-valued? . o4f4f) (integer->char . o4f4e) (infinite? . o4f4d) (inexact? . o4f4c) (inexact . o4f4b) (imag-part . o4f4a) (gcd . o4f49) (for-each . o4f48) (floor . o4f47) (finite? . o4f46) (expt . o4f45) (exp . o4f44) (exact? . o4f43) (exact-integer-sqrt . o4f42) (exact . o4f41) (even? . o4f40) (error . o4f3f) (eqv? . o4f3e) (equal? . o4f3d) (eq? . o4f3c) (dynamic-wind . o4f3b) (div0-and-mod0 . o4f3a) (mod0 . o4f39) (div0 . o4f38) (div-and-mod . o4f37) (mod . o4f36) (div . o4f35) (denominator . o4f34) (cos . o4f33) (cons . o4f32) (complex? . o4f31) (char? . o4f30) (char>? . o4f2f) (char>=? . o4f2e) (char=? . o4f2d) (char<? . o4f2c) (char<=? . o4f2b) (char->integer . o4f2a) (ceiling . o4f29) (call-with-values . o4f28) (call/cc . o4f27) (call-with-current-continuation . o4f26) (cddddr . o4f25) (cdddar . o4f24) (cddadr . o4f23) (cddaar . o4f22) (cdaddr . o4f21) (cdadar . o4f20) (cdaadr . o4f1f) (cdaaar . o4f1e) (cadddr . o4f1d) (caddar . o4f1c) (cadadr . o4f1b) (cadaar . o4f1a) (caaddr . o4f19) (caadar . o4f18) (caaadr . o4f17) (caaaar . o4f16) (cdddr . o4f15) (cddar . o4f14) (cdadr . o4f13) (cdaar . o4f12) (caddr . o4f11) (cadar . o4f10) (caadr . o4f0f) (caaar . o4f0e) (cddr . o4f0d) (cdar . o4f0c) (cadr . o4f0b) (caar . o4f0a) (cdr . o4f09) (car . o4f08) (boolean? . o4f07) (boolean=? . o4f06) (atan . o4f05) (assertion-violation . o4f04) (asin . o4f03) (apply . o4f02) (append . o4f01) (angle . o4f00) (acos . o4eff) (abs . o4efe) (/ . o4efd) (* . o4efc) (- . o4efb) (+ . o4efa) (>= . o4ef9) (> . o4ef8) (= . o4ef7) (<= . o4ef6) (< . o4ef5) (&no-nans . o4ef3) (&no-infinities . o4ef2) (&i/o-encoding . o4ef1) (&i/o-decoding . o4ef0) (&i/o-port . o4eef) (&i/o-file-does-not-exist . o4eee) (&i/o-file-already-exists . o4eed) (&i/o-file-is-read-only . o4eec) (&i/o-file-protection . o4eeb) (&i/o-filename . o4eea) (&i/o-invalid-position . o4ee9) (&i/o-write . o4ee8) (&i/o-read . o4ee7) (&i/o . o4ee6) (&undefined . o4ee5) (&syntax . o4ee4) (&lexical . o4ee3) (&implementation-restriction . o4ee2) (&non-continuable . o4ee1) (&who . o4ee0) (&irritants . o4edf) (&assertion . o4ede) (&violation . o4edd) (&error . o4edc) (&serious . o4edb) (&warning . o4eda) (&message . o4ed9) (&condition . o4ed8) (define-condition-type . o4ed7) (define-enumeration . o4ed6) (define-record-type . o4ed5) (parent-rtd . o4ed4) (nongenerative . o4ed3) (opaque . o4ed2) (sealed . o4ed1) (protocol . o4ed0) (parent . o4ecf) (immutable . o4ece) (mutable . o4ecd) (fields . o4ecc) (error-handling-mode . o4ecb) (file-options . o4eca) (buffer-mode . o4ec9) (eol-style . o4ec8) (guard . o4ec7) (unsyntax-splicing . o4ec4) (unsyntax . o4ec3) (unquote-splicing . o4ec2) (unquote . o4ec1) (_ . o4ec0) (else . o4ebf) (=> . o4ebe) (... . o4ebd) (assert . o4ebc) (endianness . o4ebb) (do . o4eb8) (cond . o4eb7) (let* . o4eb6) (let . o4eb5) (let*-values . o4eb4) (let-values . o4eb3) (identifier-syntax . o4eb2) (with-syntax . o4eb1) (quasisyntax . o4eb0) (quasiquote . o4eaf) (syntax-rules . o4eae) (record-constructor-descriptor . o4eab) (record-type-descriptor . o4eaa) (case . o4ea9) (unless . o4ea7) (when . o4ea6) (or . o4ea5) (and . o4ea4) (if . o4ea3) (letrec* . o4ea2) (letrec . o4ea1) (case-lambda . o4e9f) (lambda . o4e9e) (syntax . o4e9d) (syntax-case . o4e9c) (quote . o4e9b) (letrec-syntax . o4e99) (let-syntax . o4e98) (set! . o4e97) (begin . o4e95) (define-syntax . o4e93) (define . o4e92)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5167 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . o2f7a) (quotient . o5078) (null-environment . o2f78) (remainder . o5077) (modulo . o5076) (inexact->exact . o5075) (force . o5074) (exact->inexact . o5073) (make-promise . o5072) (delay . o4eba)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5168 '(rnrs control) '(6) '() '() '() '((do . o4eb8) (unless . o4ea7) (when . o4ea6) (case-lambda . o4e9f)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5169 '(rnrs eval) '(6) '() '() '() '((eval . o2f7e) (environment . o2f76)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o516a '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . o506e) (set-car! . o506d)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o516b '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . o5070) (string-set! . o506f)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o516c '(rnrs programs) '(6) '() '() '() '((exit . o5071) (command-line . o4d6c)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o516d '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . o2ce2) (identifier? . o2fa0) (generate-temporaries . o2f8c) (free-identifier=? . o2f8e) (syntax->datum . o2fa4) (datum->syntax . o2fa2) (bound-identifier=? . o2f90) (syntax-violation . o2f9e) (unsyntax-splicing . o4ec4) (unsyntax . o4ec3) (_ . o4ec0) (... . o4ebd) (with-syntax . o4eb1) (quasisyntax . o4eb0) (syntax . o4e9d) (syntax-case . o4e9c)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o516e '(rnrs files) '(6) '() '() '() '((delete-file . o50e1) (file-exists? . o50e0) (make-i/o-write-error . o4b60) (make-i/o-read-error . o4b4b) (make-i/o-port-error . o4c01) (make-i/o-invalid-position-error . o4b77) (make-i/o-filename-error . o4b92) (make-i/o-file-protection-error . o4bab) (make-i/o-file-is-read-only-error . o4bc0) (make-i/o-file-does-not-exist-error . o4bea) (make-i/o-file-already-exists-error . o4bd5) (make-i/o-error . o4b36) (i/o-write-error? . o4b62) (i/o-read-error? . o4b4d) (i/o-port-error? . o4c05) (i/o-invalid-position-error? . o4b7b) (i/o-filename-error? . o4b96) (i/o-file-protection-error? . o4bad) (i/o-file-is-read-only-error? . o4bc2) (i/o-file-does-not-exist-error? . o4bec) (i/o-file-already-exists-error? . o4bd7) (i/o-error? . o4b38) (i/o-error-position . o4b7d) (i/o-error-port . o4c07) (i/o-error-filename . o4b98) (&i/o-port . o4eef) (&i/o-file-does-not-exist . o4eee) (&i/o-file-already-exists . o4eed) (&i/o-file-is-read-only . o4eec) (&i/o-file-protection . o4eeb) (&i/o-filename . o4eea) (&i/o-invalid-position . o4ee9) (&i/o-write . o4ee8) (&i/o-read . o4ee7) (&i/o . o4ee6)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o516f '(rnrs sorting) '(6) '() '() '() '((vector-sort! . o50df) (vector-sort . o50de) (list-sort . o50dd)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5170 '(rnrs base) '(6) '() '() '() '((zero? . o4f96) (vector? . o4f95) (vector-set! . o4f94) (vector-ref . o4f93) (vector-map . o4f92) (vector-length . o4f91) (vector-for-each . o4f90) (vector-fill! . o4f8f) (vector->list . o4f8e) (vector . o4f8d) (values . o4f8c) (truncate . o4f8b) (tan . o4f8a) (symbol? . o4f89) (symbol=? . o4f88) (symbol->string . o4f87) (substring . o4f86) (string? . o4f85) (string>? . o4f84) (string>=? . o4f83) (string=? . o4f82) (string<? . o4f81) (string<=? . o4f80) (string-ref . o4f7f) (string-length . o4f7e) (string-for-each . o4f7d) (string-copy . o4f7c) (string-append . o4f7b) (string->symbol . o4f7a) (string->number . o4f79) (string->list . o4f78) (string . o4f77) (sqrt . o4f76) (sin . o4f75) (round . o4f74) (reverse . o4f73) (real? . o4f72) (real-valued? . o4f71) (real-part . o4f70) (rationalize . o4f6f) (rational? . o4f6e) (rational-valued? . o4f6d) (procedure? . o4f6c) (positive? . o4f6b) (pair? . o4f6a) (odd? . o4f69) (numerator . o4f68) (number? . o4f67) (number->string . o4f66) (null? . o4f65) (not . o4f64) (negative? . o4f63) (nan? . o4f62) (min . o4f61) (max . o4f60) (map . o4f5f) (make-vector . o4f5e) (make-string . o4f5d) (make-rectangular . o4f5c) (make-polar . o4f5b) (magnitude . o4f5a) (log . o4f59) (list? . o4f58) (list-tail . o4f57) (list-ref . o4f56) (list->vector . o4f55) (list->string . o4f54) (list . o4f53) (length . o4f52) (lcm . o4f51) (integer? . o4f50) (integer-valued? . o4f4f) (integer->char . o4f4e) (infinite? . o4f4d) (inexact? . o4f4c) (inexact . o4f4b) (imag-part . o4f4a) (gcd . o4f49) (for-each . o4f48) (floor . o4f47) (finite? . o4f46) (expt . o4f45) (exp . o4f44) (exact? . o4f43) (exact-integer-sqrt . o4f42) (exact . o4f41) (even? . o4f40) (error . o4f3f) (eqv? . o4f3e) (equal? . o4f3d) (eq? . o4f3c) (dynamic-wind . o4f3b) (div0-and-mod0 . o4f3a) (mod0 . o4f39) (div0 . o4f38) (div-and-mod . o4f37) (mod . o4f36) (div . o4f35) (denominator . o4f34) (cos . o4f33) (cons . o4f32) (complex? . o4f31) (char? . o4f30) (char>? . o4f2f) (char>=? . o4f2e) (char=? . o4f2d) (char<? . o4f2c) (char<=? . o4f2b) (char->integer . o4f2a) (ceiling . o4f29) (call-with-values . o4f28) (call/cc . o4f27) (call-with-current-continuation . o4f26) (cddddr . o4f25) (cdddar . o4f24) (cddadr . o4f23) (cddaar . o4f22) (cdaddr . o4f21) (cdadar . o4f20) (cdaadr . o4f1f) (cdaaar . o4f1e) (cadddr . o4f1d) (caddar . o4f1c) (cadadr . o4f1b) (cadaar . o4f1a) (caaddr . o4f19) (caadar . o4f18) (caaadr . o4f17) (caaaar . o4f16) (cdddr . o4f15) (cddar . o4f14) (cdadr . o4f13) (cdaar . o4f12) (caddr . o4f11) (cadar . o4f10) (caadr . o4f0f) (caaar . o4f0e) (cddr . o4f0d) (cdar . o4f0c) (cadr . o4f0b) (caar . o4f0a) (cdr . o4f09) (car . o4f08) (boolean? . o4f07) (boolean=? . o4f06) (atan . o4f05) (assertion-violation . o4f04) (asin . o4f03) (apply . o4f02) (append . o4f01) (angle . o4f00) (acos . o4eff) (abs . o4efe) (/ . o4efd) (* . o4efc) (- . o4efb) (+ . o4efa) (>= . o4ef9) (> . o4ef8) (= . o4ef7) (<= . o4ef6) (< . o4ef5) (unquote-splicing . o4ec2) (unquote . o4ec1) (_ . o4ec0) (else . o4ebf) (=> . o4ebe) (... . o4ebd) (assert . o4ebc) (cond . o4eb7) (let* . o4eb6) (let . o4eb5) (let*-values . o4eb4) (let-values . o4eb3) (identifier-syntax . o4eb2) (quasiquote . o4eaf) (syntax-rules . o4eae) (case . o4ea9) (or . o4ea5) (and . o4ea4) (if . o4ea3) (letrec* . o4ea2) (letrec . o4ea1) (lambda . o4e9e) (quote . o4e9b) (letrec-syntax . o4e99) (let-syntax . o4e98) (set! . o4e97) (begin . o4e95) (define-syntax . o4e93) (define . o4e92)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5171 '(rnrs lists) '(6) '() '() '() '((remove . o506c) (remv . o506b) (remp . o506a) (remq . o5069) (partition . o5068) (memv . o5067) (memq . o5066) (memp . o5065) (member . o5064) (exists . o5063) (for-all . o5062) (fold-right . o5061) (fold-left . o5060) (find . o505f) (filter . o505e) (cons* . o505d) (assv . o505c) (assq . o505b) (assp . o505a) (assoc . o5059)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5172 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . o50c7) (call-with-input-file . o50c6) (write-char . o50c5) (write . o50c4) (with-output-to-file . o50c3) (with-input-from-file . o50c2) (read-char . o50c1) (read . o50c0) (peek-char . o50bf) (open-output-file . o50be) (open-input-file . o50bd) (newline . o50bc) (display . o50bb) (close-output-port . o50ba) (close-input-port . o50b9) (eof-object? . o50b8) (eof-object . o50b7) (current-error-port . o50b6) (current-output-port . o50b5) (current-input-port . o50b4) (output-port? . o50b3) (input-port? . o50b2) (make-i/o-write-error . o4b60) (make-i/o-read-error . o4b4b) (make-i/o-port-error . o4c01) (make-i/o-invalid-position-error . o4b77) (make-i/o-filename-error . o4b92) (make-i/o-file-protection-error . o4bab) (make-i/o-file-is-read-only-error . o4bc0) (make-i/o-file-does-not-exist-error . o4bea) (make-i/o-file-already-exists-error . o4bd5) (make-i/o-error . o4b36) (i/o-write-error? . o4b62) (i/o-read-error? . o4b4d) (i/o-port-error? . o4c05) (i/o-invalid-position-error? . o4b7b) (i/o-filename-error? . o4b96) (i/o-file-protection-error? . o4bad) (i/o-file-is-read-only-error? . o4bc2) (i/o-file-does-not-exist-error? . o4bec) (i/o-file-already-exists-error? . o4bd7) (i/o-error? . o4b38) (i/o-error-position . o4b7d) (i/o-error-port . o4c07) (i/o-error-filename . o4b98) (&i/o-port . o4eef) (&i/o-file-does-not-exist . o4eee) (&i/o-file-already-exists . o4eed) (&i/o-file-is-read-only . o4eec) (&i/o-file-protection . o4eeb) (&i/o-filename . o4eea) (&i/o-invalid-position . o4ee9) (&i/o-write . o4ee8) (&i/o-read . o4ee7) (&i/o . o4ee6)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5173 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . o5088) (utf32->string . o503d) (utf16->string . o503c) (utf8->string . o503b) (uint-list->bytevector . o503a) (u8-list->bytevector . o5039) (string->utf8 . o5038) (string->utf32 . o5037) (string->utf16 . o5036) (sint-list->bytevector . o5035) (native-endianness . o5034) (bytevector? . o5033) (bytevector=? . o5032) (bytevector-uint-set! . o5031) (bytevector-uint-ref . o5030) (bytevector-u8-set! . o502f) (bytevector-u8-ref . o502e) (bytevector-u64-set! . o502d) (bytevector-u64-ref . o502c) (bytevector-u64-native-set! . o502b) (bytevector-u64-native-ref . o502a) (bytevector-u32-set! . o5029) (bytevector-u32-ref . o5028) (bytevector-u32-native-set! . o5027) (bytevector-u32-native-ref . o5026) (bytevector-u16-set! . o5025) (bytevector-u16-ref . o5024) (bytevector-u16-native-set! . o5023) (bytevector-u16-native-ref . o5022) (bytevector-sint-set! . o5021) (bytevector-sint-ref . o5020) (bytevector-s8-set! . o501f) (bytevector-s8-ref . o501e) (bytevector-s64-set! . o501d) (bytevector-s64-ref . o501c) (bytevector-s64-native-set! . o501b) (bytevector-s64-native-ref . o501a) (bytevector-s32-set! . o5019) (bytevector-s32-ref . o5018) (bytevector-s32-native-set! . o5017) (bytevector-s32-native-ref . o5016) (bytevector-s16-set! . o5015) (bytevector-s16-ref . o5014) (bytevector-s16-native-set! . o5013) (bytevector-s16-native-ref . o5012) (bytevector-length . o5011) (bytevector-ieee-single-ref . o5010) (bytevector-ieee-single-set! . o500f) (bytevector-ieee-single-native-set! . o500e) (bytevector-ieee-single-native-ref . o500d) (bytevector-ieee-double-set! . o500c) (bytevector-ieee-double-ref . o500b) (bytevector-ieee-double-native-set! . o500a) (bytevector-ieee-double-native-ref . o5009) (bytevector-fill! . o5008) (bytevector-copy! . o5007) (bytevector-copy . o5006) (bytevector->uint-list . o5005) (bytevector->u8-list . o5004) (bytevector->sint-list . o5003) (endianness . o4ebb)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5174 '(rnrs unicode) '(6) '() '() '() '((string-upcase . o510f) (string-titlecase . o510e) (string-normalize-nfkd . o510d) (string-normalize-nfkc . o510c) (string-normalize-nfd . o510b) (string-normalize-nfc . o510a) (string-foldcase . o5109) (string-downcase . o5108) (string-ci>? . o5107) (string-ci>=? . o5106) (string-ci=? . o5105) (string-ci<? . o5104) (string-ci<=? . o5103) (char-whitespace? . o5102) (char-upper-case? . o5101) (char-title-case? . o5100) (char-numeric? . o50ff) (char-lower-case? . o50fe) (char-general-category . o50fd) (char-upcase . o50fc) (char-titlecase . o50fb) (char-foldcase . o50fa) (char-downcase . o50f9) (char-ci>? . o50f8) (char-ci>=? . o50f7) (char-ci=? . o50f6) (char-ci<? . o50f5) (char-ci<=? . o50f4) (char-alphabetic? . o50f3)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5175 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . o5052) (raise-continuable . o5051) (raise . o5050) (guard . o4ec7) (else . o4ebf) (=> . o4ebe)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5176 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . o4fa7) (bitwise-reverse-bit-field . o4fa6) (bitwise-length . o4fa5) (bitwise-if . o4fa4) (bitwise-first-bit-set . o4fa3) (bitwise-copy-bit-field . o4fa2) (bitwise-copy-bit . o4fa1) (bitwise-bit-set? . o4fa0) (bitwise-bit-field . o4f9f) (bitwise-bit-count . o4f9e) (bitwise-xor . o4f9d) (bitwise-ior . o4f9c) (bitwise-and . o4f9b) (bitwise-not . o4f9a) (bitwise-arithmetic-shift-right . o4f99) (bitwise-arithmetic-shift-left . o4f98) (bitwise-arithmetic-shift . o4f97)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5177 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . o4fd4) (fxxor . o4fd3) (fxrotate-bit-field . o4fd2) (fxreverse-bit-field . o4fd1) (fxpositive? . o4fd0) (fxodd? . o4fcf) (fxnot . o4fce) (fxnegative? . o4fcd) (fxmod0 . o4fcc) (fxmod . o4fcb) (fxmin . o4fca) (fxmax . o4fc9) (fxlength . o4fc8) (fxior . o4fc7) (fxif . o4fc6) (fxfirst-bit-set . o4fc5) (fxeven? . o4fc4) (fxdiv0-and-mod0 . o4fc3) (fxdiv0 . o4fc2) (fxdiv-and-mod . o4fc1) (fxdiv . o4fc0) (fxcopy-bit-field . o4fbf) (fxcopy-bit . o4fbe) (fxbit-set? . o4fbd) (fxbit-field . o4fbc) (fxbit-count . o4fbb) (fxarithmetic-shift-right . o4fba) (fxarithmetic-shift-left . o4fb9) (fxarithmetic-shift . o4fb8) (fxand . o4fb7) (fx>? . o4fb6) (fx>=? . o4fb5) (fx=? . o4fb4) (fx<? . o4fb3) (fx<=? . o4fb2) (fx-/carry . o4fb1) (fx- . o4fb0) (fx+/carry . o4faf) (fx+ . o4fae) (fx*/carry . o4fad) (fx* . o4fac) (greatest-fixnum . o4fab) (least-fixnum . o4faa) (fixnum-width . o4fa9) (fixnum? . o4fa8)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5178 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . o4c61) (no-infinities-violation? . o4c4c) (make-no-nans-violation . o4c5f) (make-no-infinities-violation . o4c4a) (real->flonum . o5002) (flzero? . o5001) (fltruncate . o5000) (fltan . o4fff) (flsqrt . o4ffe) (flsin . o4ffd) (flround . o4ffc) (flpositive? . o4ffb) (flonum? . o4ffa) (flodd? . o4ff9) (flnumerator . o4ff8) (flnegative? . o4ff7) (flnan? . o4ff6) (flmod0 . o4ff5) (flmod . o4ff4) (flmin . o4ff3) (flmax . o4ff2) (fllog . o4ff1) (flinteger? . o4ff0) (flinfinite? . o4fef) (flfloor . o4fee) (flfinite? . o4fed) (flexpt . o4fec) (flexp . o4feb) (fleven? . o4fea) (fldiv0-and-mod0 . o4fe9) (fldiv0 . o4fe8) (fldiv-and-mod . o4fe7) (fldiv . o4fe6) (fldenominator . o4fe5) (flcos . o4fe4) (flceiling . o4fe3) (flatan . o4fe2) (flasin . o4fe1) (flacos . o4fe0) (flabs . o4fdf) (fl>? . o4fde) (fl>=? . o4fdd) (fl=? . o4fdc) (fl<? . o4fdb) (fl<=? . o4fda) (fl/ . o4fd9) (fl- . o4fd8) (fl+ . o4fd7) (fl* . o4fd6) (fixnum->flonum . o4fd5) (&no-nans . o4ef3) (&no-infinities . o4ef2)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5179 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . o50dc) (string-ci-hash . o50db) (string-hash . o50da) (equal-hash . o50d9) (hashtable-equivalence-function . o50d8) (make-hashtable . o50d7) (hashtable-hash-function . o50d6) (make-eqv-hashtable . o50d5) (make-eq-hashtable . o50d4) (hashtable? . o50d3) (hashtable-update! . o50d2) (hashtable-size . o50d1) (hashtable-set! . o50d0) (hashtable-ref . o50cf) (hashtable-mutable? . o50ce) (hashtable-keys . o50cd) (hashtable-entries . o50cc) (hashtable-delete! . o50cb) (hashtable-copy . o50ca) (hashtable-contains? . o50c9) (hashtable-clear! . o50c8)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o517a '(rnrs io ports) '(6) '() '() '() '((eof-object? . o50b8) (eof-object . o50b7) (current-error-port . o50b6) (current-output-port . o50b5) (current-input-port . o50b4) (output-port? . o50b3) (input-port? . o50b2) (utf-8-codec . o50b1) (utf-16-codec . o50b0) (transcoder-error-handling-mode . o50af) (transcoder-eol-style . o50ae) (transcoder-codec . o50ad) (transcoded-port . o50ac) (textual-port? . o50ab) (string->bytevector . o50aa) (standard-output-port . o50a9) (standard-input-port . o50a8) (standard-error-port . o50a7) (set-port-position! . o50a6) (put-u8 . o50a5) (put-string . o50a4) (put-datum . o50a3) (put-char . o50a2) (put-bytevector . o50a1) (port? . o50a0) (port-transcoder . o509f) (port-position . o509e) (port-has-set-port-position!? . o509d) (port-has-port-position? . o509c) (port-eof? . o509b) (output-port-buffer-mode . o509a) (open-string-output-port . o5099) (open-string-input-port . o5098) (open-file-output-port . o5097) (open-file-input/output-port . o5096) (open-file-input-port . o5095) (open-bytevector-output-port . o5094) (open-bytevector-input-port . o5093) (native-transcoder . o5092) (native-eol-style . o5091) (make-transcoder . o5090) (latin-1-codec . o508f) (make-i/o-write-error . o4b60) (make-i/o-read-error . o4b4b) (make-i/o-port-error . o4c01) (make-i/o-invalid-position-error . o4b77) (make-i/o-filename-error . o4b92) (make-i/o-file-protection-error . o4bab) (make-i/o-file-is-read-only-error . o4bc0) (make-i/o-file-does-not-exist-error . o4bea) (make-i/o-file-already-exists-error . o4bd5) (make-i/o-error . o4b36) (make-i/o-encoding-error . o4c31) (make-i/o-decoding-error . o4c1a) (make-custom-textual-output-port . o508e) (make-custom-textual-input/output-port . o508d) (make-custom-textual-input-port . o508c) (make-custom-binary-output-port . o508b) (make-custom-binary-input/output-port . o508a) (make-custom-binary-input-port . o5089) (lookahead-u8 . o5087) (lookahead-char . o5086) (i/o-write-error? . o4b62) (i/o-read-error? . o4b4d) (i/o-port-error? . o4c05) (i/o-invalid-position-error? . o4b7b) (i/o-filename-error? . o4b96) (i/o-file-protection-error? . o4bad) (i/o-file-is-read-only-error? . o4bc2) (i/o-file-does-not-exist-error? . o4bec) (i/o-file-already-exists-error? . o4bd7) (i/o-error? . o4b38) (i/o-error-position . o4b7d) (i/o-error-port . o4c07) (i/o-error-filename . o4b98) (i/o-encoding-error? . o4c35) (i/o-encoding-error-char . o4c37) (i/o-decoding-error? . o4c1c) (get-u8 . o5085) (get-string-n! . o5084) (get-string-n . o5083) (get-string-all . o5082) (get-line . o5081) (get-datum . o5080) (get-char . o507f) (get-bytevector-some . o507e) (get-bytevector-n! . o507d) (get-bytevector-n . o507c) (get-bytevector-all . o507b) (flush-output-port . o507a) (close-port . o5079) (call-with-string-output-port . o5058) (call-with-port . o5057) (call-with-bytevector-output-port . o5056) (bytevector->string . o5055) (buffer-mode? . o5054) (binary-port? . o5053) (&i/o-encoding . o4ef1) (&i/o-decoding . o4ef0) (&i/o-port . o4eef) (&i/o-file-does-not-exist . o4eee) (&i/o-file-already-exists . o4eed) (&i/o-file-is-read-only . o4eec) (&i/o-file-protection . o4eeb) (&i/o-filename . o4eea) (&i/o-invalid-position . o4ee9) (&i/o-write . o4ee8) (&i/o-read . o4ee7) (&i/o . o4ee6) (error-handling-mode . o4ecb) (file-options . o4eca) (buffer-mode . o4ec9) (eol-style . o4ec8)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o517b '(rnrs enums) '(6) '() '() '() '((make-enumeration . o504f) (enum-set=? . o504e) (enum-set-universe . o504d) (enum-set-union . o504c) (enum-set-subset? . o504b) (enum-set-projection . o504a) (enum-set-member? . o5049) (enum-set-intersection . o5048) (enum-set-indexer . o5047) (enum-set-difference . o5046) (enum-set-constructor . o5045) (enum-set-complement . o5044) (enum-set->list . o5043) (define-enumeration . o4ed6)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o517c '(rnrs conditions) '(6) '() '() '() '((who-condition? . o4aac) (warning? . o4a24) (violation? . o4a63) (undefined-violation? . o4b23) (syntax-violation? . o4b0a) (syntax-violation-subform . o4b0e) (syntax-violation-form . o4b0c) (syntax-violation . o2f9e) (simple-conditions . o5042) (serious-condition? . o4a39) (non-continuable-violation? . o4ac3) (message-condition? . o4a0d) (make-who-condition . o4aa8) (make-warning . o4a22) (make-violation . o4a61) (make-undefined-violation . o4b21) (make-syntax-violation . o4b04) (make-serious-condition . o4a37) (make-non-continuable-violation . o4ac1) (make-message-condition . o4a09) (make-lexical-violation . o4aeb) (make-irritants-condition . o4a8d) (make-implementation-restriction-violation . o4ad6) (make-error . o4a4c) (make-assertion-violation . o4a76) (lexical-violation? . o4aed) (irritants-condition? . o4a91) (implementation-restriction-violation? . o4ad8) (error? . o4a4e) (condition-who . o4aae) (condition-predicate . o5041) (condition-message . o4a0f) (condition-irritants . o4a93) (condition-accessor . o5040) (condition . o503f) (assertion-violation? . o4a78) (condition? . o503e) (&undefined . o4ee5) (&syntax . o4ee4) (&lexical . o4ee3) (&implementation-restriction . o4ee2) (&non-continuable . o4ee1) (&who . o4ee0) (&irritants . o4edf) (&assertion . o4ede) (&violation . o4edd) (&error . o4edc) (&serious . o4edb) (&warning . o4eda) (&message . o4ed9) (&condition . o4ed8) (define-condition-type . o4ed7)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o517d '(rnrs records inspection) '(6) '() '() '() '((record? . o50eb) (record-type-uid . o50ea) (record-type-sealed? . o50e9) (record-type-parent . o50e8) (record-type-opaque? . o50e7) (record-type-name . o50e6) (record-type-generative? . o50e5) (record-type-field-names . o50e4) (record-rtd . o50e3) (record-field-mutable? . o50e2)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o517e '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . o50f2) (record-predicate . o50f1) (record-mutator . o50f0) (record-constructor . o50ef) (record-accessor . o50ee) (make-record-type-descriptor . o50ed) (make-record-constructor-descriptor . o50ec)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o517f '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . o4ed5) (parent-rtd . o4ed4) (nongenerative . o4ed3) (opaque . o4ed2) (sealed . o4ed1) (protocol . o4ed0) (parent . o4ecf) (immutable . o4ece) (mutable . o4ecd) (fields . o4ecc) (record-constructor-descriptor . o4eab) (record-type-descriptor . o4eaa)) '() values values '#f '#f '#t '#f) (o2acd@o296c@install-library 'o5180 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . o4c65) (&no-nans-rtd . o4c63) (&no-infinities-rcd . o4c50) (&no-infinities-rtd . o4c4e) (&i/o-encoding-rcd . o4c3b) (&i/o-encoding-rtd . o4c39) (&i/o-decoding-rcd . o4c20) (&i/o-decoding-rtd . o4c1e) (&i/o-port-rcd . o4c0b) (&i/o-port-rtd . o4c09) (&i/o-file-does-not-exist-rcd . o4bf0) (&i/o-file-does-not-exist-rtd . o4bee) (&i/o-file-already-exists-rcd . o4bdb) (&i/o-file-already-exists-rtd . o4bd9) (&i/o-file-is-read-only-rcd . o4bc6) (&i/o-file-is-read-only-rtd . o4bc4) (&i/o-file-protection-rcd . o4bb1) (&i/o-file-protection-rtd . o4baf) (&i/o-filename-rcd . o4b9c) (&i/o-filename-rtd . o4b9a) (&i/o-invalid-position-rcd . o4b81) (&i/o-invalid-position-rtd . o4b7f) (&i/o-write-rcd . o4b66) (&i/o-write-rtd . o4b64) (&i/o-read-rcd . o4b51) (&i/o-read-rtd . o4b4f) (&i/o-rcd . o4b3c) (&i/o-rtd . o4b3a) (&undefined-rcd . o4b27) (&undefined-rtd . o4b25) (&syntax-rcd . o4b12) (&syntax-rtd . o4b10) (&lexical-rcd . o4af1) (&lexical-rtd . o4aef) (&implementation-restriction-rcd . o4adc) (&implementation-restriction-rtd . o4ada) (&non-continuable-rcd . o4ac7) (&non-continuable-rtd . o4ac5) (&who-rcd . o4ab2) (&who-rtd . o4ab0) (&irritants-rcd . o4a97) (&irritants-rtd . o4a95) (&assertion-rcd . o4a7c) (&assertion-rtd . o4a7a) (&violation-rcd . o4a67) (&violation-rtd . o4a65) (&error-rcd . o4a52) (&error-rtd . o4a50) (&serious-rcd . o4a3d) (&serious-rtd . o4a3b) (&warning-rcd . o4a28) (&warning-rtd . o4a26) (&message-rcd . o4a13) (&message-rtd . o4a11) (&condition-rcd . o49b4) (&condition-rtd . o49b2) (syntax-error . o2f9a) (syntax-dispatch . o2eb5) (pretty-print . o5160) (eval-core . o515f) (set-symbol-value! . o515e) (symbol-value . o515d) (gensym . o515c) (void . o515b) (load . o4d72) (interaction-environment . o2faa) (char-ready? . o515a) (regexp? . o5159) (read-line . o5158) (ungensym . o5157) (alist->eq-hash-table . o5156) (assoc-ref . o5155) (print . o5154) (format . o5153) (host-os . o5152) (library-path . o294b) (standard-library-path . o5151) (file-newer? . o5150) (stat-mtime . o514f) (write-to-file . o514e) (file->list . o514d) (file->string . o514c) (digit->integer . o514b) (call-with-string-input-port . o514a) (call-with-string-io . o5149) (string-split . o5148) (bytevector-for-each . o5147) (string->regexp . o5146) (rxmatch . o5145) (regexp-replace-all . o5144) (hashtable-for-each . o5143) (call-process . o5142) (local-tz-offset . o5141) (microseconds . o5140) (readdir . o513f) (set-current-directory! . o513e) (expand-path . o513d) (current-directory . o513c) (%spawn . o513b) (%waitpid . o513a) (%ffi-supported? . o5139) (%ffi-pointer-ref . o5138) (%ffi-pointer->string . o5137) (%ffi-call->string-or-zero . o5136) (%ffi-call->double . o5135) (%ffi-call->void* . o5134) (%ffi-call->void . o5133) (%ffi-call->int . o5132) (%ffi-lookup . o5131) (%ffi-open . o5130) (%fork . o512f) (%pipe . o512e) (p . o512d) (open-output-string . o512c) (get-output-string . o512b) (get-environment-variables . o512a) (get-environment-variable . o5129) (get-timeofday . o5128) (get-command-line . o5127) (sys-display . o5126) (mosh-executable-path . o5125) (make-file-options . o5124) (source-info . o5123) (make-compiler-instruction . o5122) (make-instruction . o5121) (set-source-info! . o5120) (bignum? . o511f) (fast-equal? . o511e) (fasl-read . o511d) (fasl-write . o511c) (time-usage . o511b) (os-constant . o511a) (make-parameter . o277e) (socket-port . o5119) (socket-shutdown . o5118) (socket-close . o5117) (socket-send . o5116) (socket-recv! . o5115) (socket-recv . o5114) (make-server-socket . o5113) (make-client-socket . o5112) (socket-accept . o5111) (socket? . o5110) (string-upcase . o510f) (string-titlecase . o510e) (string-normalize-nfkd . o510d) (string-normalize-nfkc . o510c) (string-normalize-nfd . o510b) (string-normalize-nfc . o510a) (string-foldcase . o5109) (string-downcase . o5108) (string-ci>? . o5107) (string-ci>=? . o5106) (string-ci=? . o5105) (string-ci<? . o5104) (string-ci<=? . o5103) (char-whitespace? . o5102) (char-upper-case? . o5101) (char-title-case? . o5100) (char-numeric? . o50ff) (char-lower-case? . o50fe) (char-general-category . o50fd) (char-upcase . o50fc) (char-titlecase . o50fb) (char-foldcase . o50fa) (char-downcase . o50f9) (char-ci>? . o50f8) (char-ci>=? . o50f7) (char-ci=? . o50f6) (char-ci<? . o50f5) (char-ci<=? . o50f4) (char-alphabetic? . o50f3) (make-variable-transformer . o2ce2) (identifier? . o2fa0) (generate-temporaries . o2f8c) (free-identifier=? . o2f8e) (syntax->datum . o2fa4) (datum->syntax . o2fa2) (bound-identifier=? . o2f90) (record-type-descriptor? . o50f2) (record-predicate . o50f1) (record-mutator . o50f0) (record-constructor . o50ef) (record-accessor . o50ee) (make-record-type-descriptor . o50ed) (make-record-constructor-descriptor . o50ec) (record? . o50eb) (record-type-uid . o50ea) (record-type-sealed? . o50e9) (record-type-parent . o50e8) (record-type-opaque? . o50e7) (record-type-name . o50e6) (record-type-generative? . o50e5) (record-type-field-names . o50e4) (record-rtd . o50e3) (record-field-mutable? . o50e2) (delete-file . o50e1) (file-exists? . o50e0) (vector-sort! . o50df) (vector-sort . o50de) (list-sort . o50dd) (symbol-hash . o50dc) (string-ci-hash . o50db) (string-hash . o50da) (equal-hash . o50d9) (hashtable-equivalence-function . o50d8) (make-hashtable . o50d7) (hashtable-hash-function . o50d6) (make-eqv-hashtable . o50d5) (make-eq-hashtable . o50d4) (hashtable? . o50d3) (hashtable-update! . o50d2) (hashtable-size . o50d1) (hashtable-set! . o50d0) (hashtable-ref . o50cf) (hashtable-mutable? . o50ce) (hashtable-keys . o50cd) (hashtable-entries . o50cc) (hashtable-delete! . o50cb) (hashtable-copy . o50ca) (hashtable-contains? . o50c9) (hashtable-clear! . o50c8) (call-with-output-file . o50c7) (call-with-input-file . o50c6) (write-char . o50c5) (write . o50c4) (with-output-to-file . o50c3) (with-input-from-file . o50c2) (read-char . o50c1) (read . o50c0) (peek-char . o50bf) (open-output-file . o50be) (open-input-file . o50bd) (newline . o50bc) (display . o50bb) (close-output-port . o50ba) (close-input-port . o50b9) (eof-object? . o50b8) (eof-object . o50b7) (current-error-port . o50b6) (current-output-port . o50b5) (current-input-port . o50b4) (output-port? . o50b3) (input-port? . o50b2) (utf-8-codec . o50b1) (utf-16-codec . o50b0) (transcoder-error-handling-mode . o50af) (transcoder-eol-style . o50ae) (transcoder-codec . o50ad) (transcoded-port . o50ac) (textual-port? . o50ab) (string->bytevector . o50aa) (standard-output-port . o50a9) (standard-input-port . o50a8) (standard-error-port . o50a7) (set-port-position! . o50a6) (put-u8 . o50a5) (put-string . o50a4) (put-datum . o50a3) (put-char . o50a2) (put-bytevector . o50a1) (port? . o50a0) (port-transcoder . o509f) (port-position . o509e) (port-has-set-port-position!? . o509d) (port-has-port-position? . o509c) (port-eof? . o509b) (output-port-buffer-mode . o509a) (open-string-output-port . o5099) (open-string-input-port . o5098) (open-file-output-port . o5097) (open-file-input/output-port . o5096) (open-file-input-port . o5095) (open-bytevector-output-port . o5094) (open-bytevector-input-port . o5093) (native-transcoder . o5092) (native-eol-style . o5091) (make-transcoder . o5090) (latin-1-codec . o508f) (make-i/o-write-error . o4b60) (make-i/o-read-error . o4b4b) (make-i/o-port-error . o4c01) (make-i/o-invalid-position-error . o4b77) (make-i/o-filename-error . o4b92) (make-i/o-file-protection-error . o4bab) (make-i/o-file-is-read-only-error . o4bc0) (make-i/o-file-does-not-exist-error . o4bea) (make-i/o-file-already-exists-error . o4bd5) (make-i/o-error . o4b36) (make-i/o-encoding-error . o4c31) (make-i/o-decoding-error . o4c1a) (make-custom-textual-output-port . o508e) (make-custom-textual-input/output-port . o508d) (make-custom-textual-input-port . o508c) (make-custom-binary-output-port . o508b) (make-custom-binary-input/output-port . o508a) (make-custom-binary-input-port . o5089) (make-bytevector . o5088) (lookahead-u8 . o5087) (lookahead-char . o5086) (i/o-write-error? . o4b62) (i/o-read-error? . o4b4d) (i/o-port-error? . o4c05) (i/o-invalid-position-error? . o4b7b) (i/o-filename-error? . o4b96) (i/o-file-protection-error? . o4bad) (i/o-file-is-read-only-error? . o4bc2) (i/o-file-does-not-exist-error? . o4bec) (i/o-file-already-exists-error? . o4bd7) (i/o-error? . o4b38) (i/o-error-position . o4b7d) (i/o-error-port . o4c07) (i/o-error-filename . o4b98) (i/o-encoding-error? . o4c35) (i/o-encoding-error-char . o4c37) (i/o-decoding-error? . o4c1c) (get-u8 . o5085) (get-string-n! . o5084) (get-string-n . o5083) (get-string-all . o5082) (get-line . o5081) (get-datum . o5080) (get-char . o507f) (get-bytevector-some . o507e) (get-bytevector-n! . o507d) (get-bytevector-n . o507c) (get-bytevector-all . o507b) (flush-output-port . o507a) (close-port . o5079) (scheme-report-environment . o2f7a) (quotient . o5078) (null-environment . o2f78) (remainder . o5077) (modulo . o5076) (inexact->exact . o5075) (force . o5074) (exact->inexact . o5073) (make-promise . o5072) (exit . o5071) (command-line . o4d6c) (string-fill! . o5070) (string-set! . o506f) (set-cdr! . o506e) (set-car! . o506d) (remove . o506c) (remv . o506b) (remp . o506a) (remq . o5069) (partition . o5068) (memv . o5067) (memq . o5066) (memp . o5065) (member . o5064) (exists . o5063) (for-all . o5062) (fold-right . o5061) (fold-left . o5060) (find . o505f) (filter . o505e) (cons* . o505d) (assv . o505c) (assq . o505b) (assp . o505a) (assoc . o5059) (call-with-string-output-port . o5058) (call-with-port . o5057) (call-with-bytevector-output-port . o5056) (bytevector->string . o5055) (buffer-mode? . o5054) (binary-port? . o5053) (with-exception-handler . o5052) (raise-continuable . o5051) (raise . o5050) (eval . o2f7e) (environment . o2f76) (make-enumeration . o504f) (enum-set=? . o504e) (enum-set-universe . o504d) (enum-set-union . o504c) (enum-set-subset? . o504b) (enum-set-projection . o504a) (enum-set-member? . o5049) (enum-set-intersection . o5048) (enum-set-indexer . o5047) (enum-set-difference . o5046) (enum-set-constructor . o5045) (enum-set-complement . o5044) (enum-set->list . o5043) (who-condition? . o4aac) (warning? . o4a24) (violation? . o4a63) (undefined-violation? . o4b23) (syntax-violation? . o4b0a) (syntax-violation-subform . o4b0e) (syntax-violation-form . o4b0c) (syntax-violation . o2f9e) (simple-conditions . o5042) (serious-condition? . o4a39) (non-continuable-violation? . o4ac3) (message-condition? . o4a0d) (make-who-condition . o4aa8) (make-warning . o4a22) (make-violation . o4a61) (make-undefined-violation . o4b21) (make-syntax-violation . o4b04) (make-serious-condition . o4a37) (make-non-continuable-violation . o4ac1) (make-message-condition . o4a09) (make-lexical-violation . o4aeb) (make-irritants-condition . o4a8d) (make-implementation-restriction-violation . o4ad6) (make-error . o4a4c) (make-assertion-violation . o4a76) (lexical-violation? . o4aed) (irritants-condition? . o4a91) (implementation-restriction-violation? . o4ad8) (error? . o4a4e) (condition-who . o4aae) (condition-predicate . o5041) (condition-message . o4a0f) (condition-irritants . o4a93) (condition-accessor . o5040) (condition . o503f) (assertion-violation? . o4a78) (condition? . o503e) (utf32->string . o503d) (utf16->string . o503c) (utf8->string . o503b) (uint-list->bytevector . o503a) (u8-list->bytevector . o5039) (string->utf8 . o5038) (string->utf32 . o5037) (string->utf16 . o5036) (sint-list->bytevector . o5035) (native-endianness . o5034) (bytevector? . o5033) (bytevector=? . o5032) (bytevector-uint-set! . o5031) (bytevector-uint-ref . o5030) (bytevector-u8-set! . o502f) (bytevector-u8-ref . o502e) (bytevector-u64-set! . o502d) (bytevector-u64-ref . o502c) (bytevector-u64-native-set! . o502b) (bytevector-u64-native-ref . o502a) (bytevector-u32-set! . o5029) (bytevector-u32-ref . o5028) (bytevector-u32-native-set! . o5027) (bytevector-u32-native-ref . o5026) (bytevector-u16-set! . o5025) (bytevector-u16-ref . o5024) (bytevector-u16-native-set! . o5023) (bytevector-u16-native-ref . o5022) (bytevector-sint-set! . o5021) (bytevector-sint-ref . o5020) (bytevector-s8-set! . o501f) (bytevector-s8-ref . o501e) (bytevector-s64-set! . o501d) (bytevector-s64-ref . o501c) (bytevector-s64-native-set! . o501b) (bytevector-s64-native-ref . o501a) (bytevector-s32-set! . o5019) (bytevector-s32-ref . o5018) (bytevector-s32-native-set! . o5017) (bytevector-s32-native-ref . o5016) (bytevector-s16-set! . o5015) (bytevector-s16-ref . o5014) (bytevector-s16-native-set! . o5013) (bytevector-s16-native-ref . o5012) (bytevector-length . o5011) (bytevector-ieee-single-ref . o5010) (bytevector-ieee-single-set! . o500f) (bytevector-ieee-single-native-set! . o500e) (bytevector-ieee-single-native-ref . o500d) (bytevector-ieee-double-set! . o500c) (bytevector-ieee-double-ref . o500b) (bytevector-ieee-double-native-set! . o500a) (bytevector-ieee-double-native-ref . o5009) (bytevector-fill! . o5008) (bytevector-copy! . o5007) (bytevector-copy . o5006) (bytevector->uint-list . o5005) (bytevector->u8-list . o5004) (bytevector->sint-list . o5003) (no-nans-violation? . o4c61) (no-infinities-violation? . o4c4c) (make-no-nans-violation . o4c5f) (make-no-infinities-violation . o4c4a) (real->flonum . o5002) (flzero? . o5001) (fltruncate . o5000) (fltan . o4fff) (flsqrt . o4ffe) (flsin . o4ffd) (flround . o4ffc) (flpositive? . o4ffb) (flonum? . o4ffa) (flodd? . o4ff9) (flnumerator . o4ff8) (flnegative? . o4ff7) (flnan? . o4ff6) (flmod0 . o4ff5) (flmod . o4ff4) (flmin . o4ff3) (flmax . o4ff2) (fllog . o4ff1) (flinteger? . o4ff0) (flinfinite? . o4fef) (flfloor . o4fee) (flfinite? . o4fed) (flexpt . o4fec) (flexp . o4feb) (fleven? . o4fea) (fldiv0-and-mod0 . o4fe9) (fldiv0 . o4fe8) (fldiv-and-mod . o4fe7) (fldiv . o4fe6) (fldenominator . o4fe5) (flcos . o4fe4) (flceiling . o4fe3) (flatan . o4fe2) (flasin . o4fe1) (flacos . o4fe0) (flabs . o4fdf) (fl>? . o4fde) (fl>=? . o4fdd) (fl=? . o4fdc) (fl<? . o4fdb) (fl<=? . o4fda) (fl/ . o4fd9) (fl- . o4fd8) (fl+ . o4fd7) (fl* . o4fd6) (fixnum->flonum . o4fd5) (fxzero? . o4fd4) (fxxor . o4fd3) (fxrotate-bit-field . o4fd2) (fxreverse-bit-field . o4fd1) (fxpositive? . o4fd0) (fxodd? . o4fcf) (fxnot . o4fce) (fxnegative? . o4fcd) (fxmod0 . o4fcc) (fxmod . o4fcb) (fxmin . o4fca) (fxmax . o4fc9) (fxlength . o4fc8) (fxior . o4fc7) (fxif . o4fc6) (fxfirst-bit-set . o4fc5) (fxeven? . o4fc4) (fxdiv0-and-mod0 . o4fc3) (fxdiv0 . o4fc2) (fxdiv-and-mod . o4fc1) (fxdiv . o4fc0) (fxcopy-bit-field . o4fbf) (fxcopy-bit . o4fbe) (fxbit-set? . o4fbd) (fxbit-field . o4fbc) (fxbit-count . o4fbb) (fxarithmetic-shift-right . o4fba) (fxarithmetic-shift-left . o4fb9) (fxarithmetic-shift . o4fb8) (fxand . o4fb7) (fx>? . o4fb6) (fx>=? . o4fb5) (fx=? . o4fb4) (fx<? . o4fb3) (fx<=? . o4fb2) (fx-/carry . o4fb1) (fx- . o4fb0) (fx+/carry . o4faf) (fx+ . o4fae) (fx*/carry . o4fad) (fx* . o4fac) (greatest-fixnum . o4fab) (least-fixnum . o4faa) (fixnum-width . o4fa9) (fixnum? . o4fa8) (bitwise-rotate-bit-field . o4fa7) (bitwise-reverse-bit-field . o4fa6) (bitwise-length . o4fa5) (bitwise-if . o4fa4) (bitwise-first-bit-set . o4fa3) (bitwise-copy-bit-field . o4fa2) (bitwise-copy-bit . o4fa1) (bitwise-bit-set? . o4fa0) (bitwise-bit-field . o4f9f) (bitwise-bit-count . o4f9e) (bitwise-xor . o4f9d) (bitwise-ior . o4f9c) (bitwise-and . o4f9b) (bitwise-not . o4f9a) (bitwise-arithmetic-shift-right . o4f99) (bitwise-arithmetic-shift-left . o4f98) (bitwise-arithmetic-shift . o4f97) (zero? . o4f96) (vector? . o4f95) (vector-set! . o4f94) (vector-ref . o4f93) (vector-map . o4f92) (vector-length . o4f91) (vector-for-each . o4f90) (vector-fill! . o4f8f) (vector->list . o4f8e) (vector . o4f8d) (values . o4f8c) (truncate . o4f8b) (tan . o4f8a) (symbol? . o4f89) (symbol=? . o4f88) (symbol->string . o4f87) (substring . o4f86) (string? . o4f85) (string>? . o4f84) (string>=? . o4f83) (string=? . o4f82) (string<? . o4f81) (string<=? . o4f80) (string-ref . o4f7f) (string-length . o4f7e) (string-for-each . o4f7d) (string-copy . o4f7c) (string-append . o4f7b) (string->symbol . o4f7a) (string->number . o4f79) (string->list . o4f78) (string . o4f77) (sqrt . o4f76) (sin . o4f75) (round . o4f74) (reverse . o4f73) (real? . o4f72) (real-valued? . o4f71) (real-part . o4f70) (rationalize . o4f6f) (rational? . o4f6e) (rational-valued? . o4f6d) (procedure? . o4f6c) (positive? . o4f6b) (pair? . o4f6a) (odd? . o4f69) (numerator . o4f68) (number? . o4f67) (number->string . o4f66) (null? . o4f65) (not . o4f64) (negative? . o4f63) (nan? . o4f62) (min . o4f61) (max . o4f60) (map . o4f5f) (make-vector . o4f5e) (make-string . o4f5d) (make-rectangular . o4f5c) (make-polar . o4f5b) (magnitude . o4f5a) (log . o4f59) (list? . o4f58) (list-tail . o4f57) (list-ref . o4f56) (list->vector . o4f55) (list->string . o4f54) (list . o4f53) (length . o4f52) (lcm . o4f51) (integer? . o4f50) (integer-valued? . o4f4f) (integer->char . o4f4e) (infinite? . o4f4d) (inexact? . o4f4c) (inexact . o4f4b) (imag-part . o4f4a) (gcd . o4f49) (for-each . o4f48) (floor . o4f47) (finite? . o4f46) (expt . o4f45) (exp . o4f44) (exact? . o4f43) (exact-integer-sqrt . o4f42) (exact . o4f41) (even? . o4f40) (error . o4f3f) (eqv? . o4f3e) (equal? . o4f3d) (eq? . o4f3c) (dynamic-wind . o4f3b) (div0-and-mod0 . o4f3a) (mod0 . o4f39) (div0 . o4f38) (div-and-mod . o4f37) (mod . o4f36) (div . o4f35) (denominator . o4f34) (cos . o4f33) (cons . o4f32) (complex? . o4f31) (char? . o4f30) (char>? . o4f2f) (char>=? . o4f2e) (char=? . o4f2d) (char<? . o4f2c) (char<=? . o4f2b) (char->integer . o4f2a) (ceiling . o4f29) (call-with-values . o4f28) (call/cc . o4f27) (call-with-current-continuation . o4f26) (cddddr . o4f25) (cdddar . o4f24) (cddadr . o4f23) (cddaar . o4f22) (cdaddr . o4f21) (cdadar . o4f20) (cdaadr . o4f1f) (cdaaar . o4f1e) (cadddr . o4f1d) (caddar . o4f1c) (cadadr . o4f1b) (cadaar . o4f1a) (caaddr . o4f19) (caadar . o4f18) (caaadr . o4f17) (caaaar . o4f16) (cdddr . o4f15) (cddar . o4f14) (cdadr . o4f13) (cdaar . o4f12) (caddr . o4f11) (cadar . o4f10) (caadr . o4f0f) (caaar . o4f0e) (cddr . o4f0d) (cdar . o4f0c) (cadr . o4f0b) (caar . o4f0a) (cdr . o4f09) (car . o4f08) (boolean? . o4f07) (boolean=? . o4f06) (atan . o4f05) (assertion-violation . o4f04) (assertion-error . o2f98) (asin . o4f03) (apply . o4f02) (append . o4f01) (angle . o4f00) (acos . o4eff) (abs . o4efe) (/ . o4efd) (* . o4efc) (- . o4efb) (+ . o4efa) (>= . o4ef9) (> . o4ef8) (= . o4ef7) (<= . o4ef6) (< . o4ef5) (library . o4ef4) (&no-nans . o4ef3) (&no-infinities . o4ef2) (&i/o-encoding . o4ef1) (&i/o-decoding . o4ef0) (&i/o-port . o4eef) (&i/o-file-does-not-exist . o4eee) (&i/o-file-already-exists . o4eed) (&i/o-file-is-read-only . o4eec) (&i/o-file-protection . o4eeb) (&i/o-filename . o4eea) (&i/o-invalid-position . o4ee9) (&i/o-write . o4ee8) (&i/o-read . o4ee7) (&i/o . o4ee6) (&undefined . o4ee5) (&syntax . o4ee4) (&lexical . o4ee3) (&implementation-restriction . o4ee2) (&non-continuable . o4ee1) (&who . o4ee0) (&irritants . o4edf) (&assertion . o4ede) (&violation . o4edd) (&error . o4edc) (&serious . o4edb) (&warning . o4eda) (&message . o4ed9) (&condition . o4ed8) (define-condition-type . o4ed7) (define-enumeration . o4ed6) (define-record-type . o4ed5) (parent-rtd . o4ed4) (nongenerative . o4ed3) (opaque . o4ed2) (sealed . o4ed1) (protocol . o4ed0) (parent . o4ecf) (immutable . o4ece) (mutable . o4ecd) (fields . o4ecc) (error-handling-mode . o4ecb) (file-options . o4eca) (buffer-mode . o4ec9) (eol-style . o4ec8) (guard . o4ec7) (trace-define . o4ec6) (trace-lambda . o4ec5) (unsyntax-splicing . o4ec4) (unsyntax . o4ec3) (unquote-splicing . o4ec2) (unquote . o4ec1) (_ . o4ec0) (else . o4ebf) (=> . o4ebe) (... . o4ebd) (assert . o4ebc) (endianness . o4ebb) (delay . o4eba) (time . o4eb9) (do . o4eb8) (cond . o4eb7) (let* . o4eb6) (let . o4eb5) (let*-values . o4eb4) (let-values . o4eb3) (identifier-syntax . o4eb2) (with-syntax . o4eb1) (quasisyntax . o4eb0) (quasiquote . o4eaf) (syntax-rules . o4eae) (include . o4ead) (define-struct . o4eac) (record-constructor-descriptor . o4eab) (record-type-descriptor . o4eaa) (case . o4ea9) (parameterize . o4ea8) (unless . o4ea7) (when . o4ea6) (or . o4ea5) (and . o4ea4) (if . o4ea3) (letrec* . o4ea2) (letrec . o4ea1) (type-descriptor . o4ea0) (case-lambda . o4e9f) (lambda . o4e9e) (syntax . o4e9d) (syntax-case . o4e9c) (quote . o4e9b) (foreign-call . o4e9a) (letrec-syntax . o4e99) (let-syntax . o4e98) (set! . o4e97) (import . o4e96) (begin . o4e95) (module . o4e94) (define-syntax . o4e93) (define . o4e92)) '((o4c65 core-prim . &no-nans-rcd) (o4c63 core-prim . &no-nans-rtd) (o4c50 core-prim . &no-infinities-rcd) (o4c4e core-prim . &no-infinities-rtd) (o4c3b core-prim . &i/o-encoding-rcd) (o4c39 core-prim . &i/o-encoding-rtd) (o4c20 core-prim . &i/o-decoding-rcd) (o4c1e core-prim . &i/o-decoding-rtd) (o4c0b core-prim . &i/o-port-rcd) (o4c09 core-prim . &i/o-port-rtd) (o4bf0 core-prim . &i/o-file-does-not-exist-rcd) (o4bee core-prim . &i/o-file-does-not-exist-rtd) (o4bdb core-prim . &i/o-file-already-exists-rcd) (o4bd9 core-prim . &i/o-file-already-exists-rtd) (o4bc6 core-prim . &i/o-file-is-read-only-rcd) (o4bc4 core-prim . &i/o-file-is-read-only-rtd) (o4bb1 core-prim . &i/o-file-protection-rcd) (o4baf core-prim . &i/o-file-protection-rtd) (o4b9c core-prim . &i/o-filename-rcd) (o4b9a core-prim . &i/o-filename-rtd) (o4b81 core-prim . &i/o-invalid-position-rcd) (o4b7f core-prim . &i/o-invalid-position-rtd) (o4b66 core-prim . &i/o-write-rcd) (o4b64 core-prim . &i/o-write-rtd) (o4b51 core-prim . &i/o-read-rcd) (o4b4f core-prim . &i/o-read-rtd) (o4b3c core-prim . &i/o-rcd) (o4b3a core-prim . &i/o-rtd) (o4b27 core-prim . &undefined-rcd) (o4b25 core-prim . &undefined-rtd) (o4b12 core-prim . &syntax-rcd) (o4b10 core-prim . &syntax-rtd) (o4af1 core-prim . &lexical-rcd) (o4aef core-prim . &lexical-rtd) (o4adc core-prim . &implementation-restriction-rcd) (o4ada core-prim . &implementation-restriction-rtd) (o4ac7 core-prim . &non-continuable-rcd) (o4ac5 core-prim . &non-continuable-rtd) (o4ab2 core-prim . &who-rcd) (o4ab0 core-prim . &who-rtd) (o4a97 core-prim . &irritants-rcd) (o4a95 core-prim . &irritants-rtd) (o4a7c core-prim . &assertion-rcd) (o4a7a core-prim . &assertion-rtd) (o4a67 core-prim . &violation-rcd) (o4a65 core-prim . &violation-rtd) (o4a52 core-prim . &error-rcd) (o4a50 core-prim . &error-rtd) (o4a3d core-prim . &serious-rcd) (o4a3b core-prim . &serious-rtd) (o4a28 core-prim . &warning-rcd) (o4a26 core-prim . &warning-rtd) (o4a13 core-prim . &message-rcd) (o4a11 core-prim . &message-rtd) (o49b4 core-prim . &condition-rcd) (o49b2 core-prim . &condition-rtd) (o2f9a core-prim . syntax-error) (o2eb5 core-prim . syntax-dispatch) (o5160 core-prim . pretty-print) (o515f core-prim . eval-core) (o515e core-prim . set-symbol-value!) (o515d core-prim . symbol-value) (o515c core-prim . gensym) (o515b core-prim . void) (o4d72 core-prim . load) (o2faa core-prim . interaction-environment) (o515a core-prim . char-ready?) (o5159 core-prim . regexp?) (o5158 core-prim . read-line) (o5157 core-prim . ungensym) (o5156 core-prim . alist->eq-hash-table) (o5155 core-prim . assoc-ref) (o5154 core-prim . print) (o5153 core-prim . format) (o5152 core-prim . host-os) (o294b core-prim . library-path) (o5151 core-prim . standard-library-path) (o5150 core-prim . file-newer?) (o514f core-prim . stat-mtime) (o514e core-prim . write-to-file) (o514d core-prim . file->list) (o514c core-prim . file->string) (o514b core-prim . digit->integer) (o514a core-prim . call-with-string-input-port) (o5149 core-prim . call-with-string-io) (o5148 core-prim . string-split) (o5147 core-prim . bytevector-for-each) (o5146 core-prim . string->regexp) (o5145 core-prim . rxmatch) (o5144 core-prim . regexp-replace-all) (o5143 core-prim . hashtable-for-each) (o5142 core-prim . call-process) (o5141 core-prim . local-tz-offset) (o5140 core-prim . microseconds) (o513f core-prim . readdir) (o513e core-prim . set-current-directory!) (o513d core-prim . expand-path) (o513c core-prim . current-directory) (o513b core-prim . %spawn) (o513a core-prim . %waitpid) (o5139 core-prim . %ffi-supported?) (o5138 core-prim . %ffi-pointer-ref) (o5137 core-prim . %ffi-pointer->string) (o5136 core-prim . %ffi-call->string-or-zero) (o5135 core-prim . %ffi-call->double) (o5134 core-prim . %ffi-call->void*) (o5133 core-prim . %ffi-call->void) (o5132 core-prim . %ffi-call->int) (o5131 core-prim . %ffi-lookup) (o5130 core-prim . %ffi-open) (o512f core-prim . %fork) (o512e core-prim . %pipe) (o512d core-prim . p) (o512c core-prim . open-output-string) (o512b core-prim . get-output-string) (o512a core-prim . get-environment-variables) (o5129 core-prim . get-environment-variable) (o5128 core-prim . get-timeofday) (o5127 core-prim . get-command-line) (o5126 core-prim . sys-display) (o5125 core-prim . mosh-executable-path) (o5124 core-prim . make-file-options) (o5123 core-prim . source-info) (o5122 core-prim . make-compiler-instruction) (o5121 core-prim . make-instruction) (o5120 core-prim . set-source-info!) (o511f core-prim . bignum?) (o511e core-prim . fast-equal?) (o511d core-prim . fasl-read) (o511c core-prim . fasl-write) (o511b core-prim . time-usage) (o511a core-prim . os-constant) (o277e core-prim . make-parameter) (o5119 core-prim . socket-port) (o5118 core-prim . socket-shutdown) (o5117 core-prim . socket-close) (o5116 core-prim . socket-send) (o5115 core-prim . socket-recv!) (o5114 core-prim . socket-recv) (o5113 core-prim . make-server-socket) (o5112 core-prim . make-client-socket) (o5111 core-prim . socket-accept) (o5110 core-prim . socket?) (o510f core-prim . string-upcase) (o510e core-prim . string-titlecase) (o510d core-prim . string-normalize-nfkd) (o510c core-prim . string-normalize-nfkc) (o510b core-prim . string-normalize-nfd) (o510a core-prim . string-normalize-nfc) (o5109 core-prim . string-foldcase) (o5108 core-prim . string-downcase) (o5107 core-prim . string-ci>?) (o5106 core-prim . string-ci>=?) (o5105 core-prim . string-ci=?) (o5104 core-prim . string-ci<?) (o5103 core-prim . string-ci<=?) (o5102 core-prim . char-whitespace?) (o5101 core-prim . char-upper-case?) (o5100 core-prim . char-title-case?) (o50ff core-prim . char-numeric?) (o50fe core-prim . char-lower-case?) (o50fd core-prim . char-general-category) (o50fc core-prim . char-upcase) (o50fb core-prim . char-titlecase) (o50fa core-prim . char-foldcase) (o50f9 core-prim . char-downcase) (o50f8 core-prim . char-ci>?) (o50f7 core-prim . char-ci>=?) (o50f6 core-prim . char-ci=?) (o50f5 core-prim . char-ci<?) (o50f4 core-prim . char-ci<=?) (o50f3 core-prim . char-alphabetic?) (o2ce2 core-prim . make-variable-transformer) (o2fa0 core-prim . identifier?) (o2f8c core-prim . generate-temporaries) (o2f8e core-prim . free-identifier=?) (o2fa4 core-prim . syntax->datum) (o2fa2 core-prim . datum->syntax) (o2f90 core-prim . bound-identifier=?) (o50f2 core-prim . record-type-descriptor?) (o50f1 core-prim . record-predicate) (o50f0 core-prim . record-mutator) (o50ef core-prim . record-constructor) (o50ee core-prim . record-accessor) (o50ed core-prim . make-record-type-descriptor) (o50ec core-prim . make-record-constructor-descriptor) (o50eb core-prim . record?) (o50ea core-prim . record-type-uid) (o50e9 core-prim . record-type-sealed?) (o50e8 core-prim . record-type-parent) (o50e7 core-prim . record-type-opaque?) (o50e6 core-prim . record-type-name) (o50e5 core-prim . record-type-generative?) (o50e4 core-prim . record-type-field-names) (o50e3 core-prim . record-rtd) (o50e2 core-prim . record-field-mutable?) (o50e1 core-prim . delete-file) (o50e0 core-prim . file-exists?) (o50df core-prim . vector-sort!) (o50de core-prim . vector-sort) (o50dd core-prim . list-sort) (o50dc core-prim . symbol-hash) (o50db core-prim . string-ci-hash) (o50da core-prim . string-hash) (o50d9 core-prim . equal-hash) (o50d8 core-prim . hashtable-equivalence-function) (o50d7 core-prim . make-hashtable) (o50d6 core-prim . hashtable-hash-function) (o50d5 core-prim . make-eqv-hashtable) (o50d4 core-prim . make-eq-hashtable) (o50d3 core-prim . hashtable?) (o50d2 core-prim . hashtable-update!) (o50d1 core-prim . hashtable-size) (o50d0 core-prim . hashtable-set!) (o50cf core-prim . hashtable-ref) (o50ce core-prim . hashtable-mutable?) (o50cd core-prim . hashtable-keys) (o50cc core-prim . hashtable-entries) (o50cb core-prim . hashtable-delete!) (o50ca core-prim . hashtable-copy) (o50c9 core-prim . hashtable-contains?) (o50c8 core-prim . hashtable-clear!) (o50c7 core-prim . call-with-output-file) (o50c6 core-prim . call-with-input-file) (o50c5 core-prim . write-char) (o50c4 core-prim . write) (o50c3 core-prim . with-output-to-file) (o50c2 core-prim . with-input-from-file) (o50c1 core-prim . read-char) (o50c0 core-prim . read) (o50bf core-prim . peek-char) (o50be core-prim . open-output-file) (o50bd core-prim . open-input-file) (o50bc core-prim . newline) (o50bb core-prim . display) (o50ba core-prim . close-output-port) (o50b9 core-prim . close-input-port) (o50b8 core-prim . eof-object?) (o50b7 core-prim . eof-object) (o50b6 core-prim . current-error-port) (o50b5 core-prim . current-output-port) (o50b4 core-prim . current-input-port) (o50b3 core-prim . output-port?) (o50b2 core-prim . input-port?) (o50b1 core-prim . utf-8-codec) (o50b0 core-prim . utf-16-codec) (o50af core-prim . transcoder-error-handling-mode) (o50ae core-prim . transcoder-eol-style) (o50ad core-prim . transcoder-codec) (o50ac core-prim . transcoded-port) (o50ab core-prim . textual-port?) (o50aa core-prim . string->bytevector) (o50a9 core-prim . standard-output-port) (o50a8 core-prim . standard-input-port) (o50a7 core-prim . standard-error-port) (o50a6 core-prim . set-port-position!) (o50a5 core-prim . put-u8) (o50a4 core-prim . put-string) (o50a3 core-prim . put-datum) (o50a2 core-prim . put-char) (o50a1 core-prim . put-bytevector) (o50a0 core-prim . port?) (o509f core-prim . port-transcoder) (o509e core-prim . port-position) (o509d core-prim . port-has-set-port-position!?) (o509c core-prim . port-has-port-position?) (o509b core-prim . port-eof?) (o509a core-prim . output-port-buffer-mode) (o5099 core-prim . open-string-output-port) (o5098 core-prim . open-string-input-port) (o5097 core-prim . open-file-output-port) (o5096 core-prim . open-file-input/output-port) (o5095 core-prim . open-file-input-port) (o5094 core-prim . open-bytevector-output-port) (o5093 core-prim . open-bytevector-input-port) (o5092 core-prim . native-transcoder) (o5091 core-prim . native-eol-style) (o5090 core-prim . make-transcoder) (o508f core-prim . latin-1-codec) (o4b60 core-prim . make-i/o-write-error) (o4b4b core-prim . make-i/o-read-error) (o4c01 core-prim . make-i/o-port-error) (o4b77 core-prim . make-i/o-invalid-position-error) (o4b92 core-prim . make-i/o-filename-error) (o4bab core-prim . make-i/o-file-protection-error) (o4bc0 core-prim . make-i/o-file-is-read-only-error) (o4bea core-prim . make-i/o-file-does-not-exist-error) (o4bd5 core-prim . make-i/o-file-already-exists-error) (o4b36 core-prim . make-i/o-error) (o4c31 core-prim . make-i/o-encoding-error) (o4c1a core-prim . make-i/o-decoding-error) (o508e core-prim . make-custom-textual-output-port) (o508d core-prim . make-custom-textual-input/output-port) (o508c core-prim . make-custom-textual-input-port) (o508b core-prim . make-custom-binary-output-port) (o508a core-prim . make-custom-binary-input/output-port) (o5089 core-prim . make-custom-binary-input-port) (o5088 core-prim . make-bytevector) (o5087 core-prim . lookahead-u8) (o5086 core-prim . lookahead-char) (o4b62 core-prim . i/o-write-error?) (o4b4d core-prim . i/o-read-error?) (o4c05 core-prim . i/o-port-error?) (o4b7b core-prim . i/o-invalid-position-error?) (o4b96 core-prim . i/o-filename-error?) (o4bad core-prim . i/o-file-protection-error?) (o4bc2 core-prim . i/o-file-is-read-only-error?) (o4bec core-prim . i/o-file-does-not-exist-error?) (o4bd7 core-prim . i/o-file-already-exists-error?) (o4b38 core-prim . i/o-error?) (o4b7d core-prim . i/o-error-position) (o4c07 core-prim . i/o-error-port) (o4b98 core-prim . i/o-error-filename) (o4c35 core-prim . i/o-encoding-error?) (o4c37 core-prim . i/o-encoding-error-char) (o4c1c core-prim . i/o-decoding-error?) (o5085 core-prim . get-u8) (o5084 core-prim . get-string-n!) (o5083 core-prim . get-string-n) (o5082 core-prim . get-string-all) (o5081 core-prim . get-line) (o5080 core-prim . get-datum) (o507f core-prim . get-char) (o507e core-prim . get-bytevector-some) (o507d core-prim . get-bytevector-n!) (o507c core-prim . get-bytevector-n) (o507b core-prim . get-bytevector-all) (o507a core-prim . flush-output-port) (o5079 core-prim . close-port) (o2f7a core-prim . scheme-report-environment) (o5078 core-prim . quotient) (o2f78 core-prim . null-environment) (o5077 core-prim . remainder) (o5076 core-prim . modulo) (o5075 core-prim . inexact->exact) (o5074 core-prim . force) (o5073 core-prim . exact->inexact) (o5072 core-prim . make-promise) (o5071 core-prim . exit) (o4d6c core-prim . command-line) (o5070 core-prim . string-fill!) (o506f core-prim . string-set!) (o506e core-prim . set-cdr!) (o506d core-prim . set-car!) (o506c core-prim . remove) (o506b core-prim . remv) (o506a core-prim . remp) (o5069 core-prim . remq) (o5068 core-prim . partition) (o5067 core-prim . memv) (o5066 core-prim . memq) (o5065 core-prim . memp) (o5064 core-prim . member) (o5063 core-prim . exists) (o5062 core-prim . for-all) (o5061 core-prim . fold-right) (o5060 core-prim . fold-left) (o505f core-prim . find) (o505e core-prim . filter) (o505d core-prim . cons*) (o505c core-prim . assv) (o505b core-prim . assq) (o505a core-prim . assp) (o5059 core-prim . assoc) (o5058 core-prim . call-with-string-output-port) (o5057 core-prim . call-with-port) (o5056 core-prim . call-with-bytevector-output-port) (o5055 core-prim . bytevector->string) (o5054 core-prim . buffer-mode?) (o5053 core-prim . binary-port?) (o5052 core-prim . with-exception-handler) (o5051 core-prim . raise-continuable) (o5050 core-prim . raise) (o2f7e core-prim . eval) (o2f76 core-prim . environment) (o504f core-prim . make-enumeration) (o504e core-prim . enum-set=?) (o504d core-prim . enum-set-universe) (o504c core-prim . enum-set-union) (o504b core-prim . enum-set-subset?) (o504a core-prim . enum-set-projection) (o5049 core-prim . enum-set-member?) (o5048 core-prim . enum-set-intersection) (o5047 core-prim . enum-set-indexer) (o5046 core-prim . enum-set-difference) (o5045 core-prim . enum-set-constructor) (o5044 core-prim . enum-set-complement) (o5043 core-prim . enum-set->list) (o4aac core-prim . who-condition?) (o4a24 core-prim . warning?) (o4a63 core-prim . violation?) (o4b23 core-prim . undefined-violation?) (o4b0a core-prim . syntax-violation?) (o4b0e core-prim . syntax-violation-subform) (o4b0c core-prim . syntax-violation-form) (o2f9e core-prim . syntax-violation) (o5042 core-prim . simple-conditions) (o4a39 core-prim . serious-condition?) (o4ac3 core-prim . non-continuable-violation?) (o4a0d core-prim . message-condition?) (o4aa8 core-prim . make-who-condition) (o4a22 core-prim . make-warning) (o4a61 core-prim . make-violation) (o4b21 core-prim . make-undefined-violation) (o4b04 core-prim . make-syntax-violation) (o4a37 core-prim . make-serious-condition) (o4ac1 core-prim . make-non-continuable-violation) (o4a09 core-prim . make-message-condition) (o4aeb core-prim . make-lexical-violation) (o4a8d core-prim . make-irritants-condition) (o4ad6 core-prim . make-implementation-restriction-violation) (o4a4c core-prim . make-error) (o4a76 core-prim . make-assertion-violation) (o4aed core-prim . lexical-violation?) (o4a91 core-prim . irritants-condition?) (o4ad8 core-prim . implementation-restriction-violation?) (o4a4e core-prim . error?) (o4aae core-prim . condition-who) (o5041 core-prim . condition-predicate) (o4a0f core-prim . condition-message) (o4a93 core-prim . condition-irritants) (o5040 core-prim . condition-accessor) (o503f core-prim . condition) (o4a78 core-prim . assertion-violation?) (o503e core-prim . condition?) (o503d core-prim . utf32->string) (o503c core-prim . utf16->string) (o503b core-prim . utf8->string) (o503a core-prim . uint-list->bytevector) (o5039 core-prim . u8-list->bytevector) (o5038 core-prim . string->utf8) (o5037 core-prim . string->utf32) (o5036 core-prim . string->utf16) (o5035 core-prim . sint-list->bytevector) (o5034 core-prim . native-endianness) (o5033 core-prim . bytevector?) (o5032 core-prim . bytevector=?) (o5031 core-prim . bytevector-uint-set!) (o5030 core-prim . bytevector-uint-ref) (o502f core-prim . bytevector-u8-set!) (o502e core-prim . bytevector-u8-ref) (o502d core-prim . bytevector-u64-set!) (o502c core-prim . bytevector-u64-ref) (o502b core-prim . bytevector-u64-native-set!) (o502a core-prim . bytevector-u64-native-ref) (o5029 core-prim . bytevector-u32-set!) (o5028 core-prim . bytevector-u32-ref) (o5027 core-prim . bytevector-u32-native-set!) (o5026 core-prim . bytevector-u32-native-ref) (o5025 core-prim . bytevector-u16-set!) (o5024 core-prim . bytevector-u16-ref) (o5023 core-prim . bytevector-u16-native-set!) (o5022 core-prim . bytevector-u16-native-ref) (o5021 core-prim . bytevector-sint-set!) (o5020 core-prim . bytevector-sint-ref) (o501f core-prim . bytevector-s8-set!) (o501e core-prim . bytevector-s8-ref) (o501d core-prim . bytevector-s64-set!) (o501c core-prim . bytevector-s64-ref) (o501b core-prim . bytevector-s64-native-set!) (o501a core-prim . bytevector-s64-native-ref) (o5019 core-prim . bytevector-s32-set!) (o5018 core-prim . bytevector-s32-ref) (o5017 core-prim . bytevector-s32-native-set!) (o5016 core-prim . bytevector-s32-native-ref) (o5015 core-prim . bytevector-s16-set!) (o5014 core-prim . bytevector-s16-ref) (o5013 core-prim . bytevector-s16-native-set!) (o5012 core-prim . bytevector-s16-native-ref) (o5011 core-prim . bytevector-length) (o5010 core-prim . bytevector-ieee-single-ref) (o500f core-prim . bytevector-ieee-single-set!) (o500e core-prim . bytevector-ieee-single-native-set!) (o500d core-prim . bytevector-ieee-single-native-ref) (o500c core-prim . bytevector-ieee-double-set!) (o500b core-prim . bytevector-ieee-double-ref) (o500a core-prim . bytevector-ieee-double-native-set!) (o5009 core-prim . bytevector-ieee-double-native-ref) (o5008 core-prim . bytevector-fill!) (o5007 core-prim . bytevector-copy!) (o5006 core-prim . bytevector-copy) (o5005 core-prim . bytevector->uint-list) (o5004 core-prim . bytevector->u8-list) (o5003 core-prim . bytevector->sint-list) (o4c61 core-prim . no-nans-violation?) (o4c4c core-prim . no-infinities-violation?) (o4c5f core-prim . make-no-nans-violation) (o4c4a core-prim . make-no-infinities-violation) (o5002 core-prim . real->flonum) (o5001 core-prim . flzero?) (o5000 core-prim . fltruncate) (o4fff core-prim . fltan) (o4ffe core-prim . flsqrt) (o4ffd core-prim . flsin) (o4ffc core-prim . flround) (o4ffb core-prim . flpositive?) (o4ffa core-prim . flonum?) (o4ff9 core-prim . flodd?) (o4ff8 core-prim . flnumerator) (o4ff7 core-prim . flnegative?) (o4ff6 core-prim . flnan?) (o4ff5 core-prim . flmod0) (o4ff4 core-prim . flmod) (o4ff3 core-prim . flmin) (o4ff2 core-prim . flmax) (o4ff1 core-prim . fllog) (o4ff0 core-prim . flinteger?) (o4fef core-prim . flinfinite?) (o4fee core-prim . flfloor) (o4fed core-prim . flfinite?) (o4fec core-prim . flexpt) (o4feb core-prim . flexp) (o4fea core-prim . fleven?) (o4fe9 core-prim . fldiv0-and-mod0) (o4fe8 core-prim . fldiv0) (o4fe7 core-prim . fldiv-and-mod) (o4fe6 core-prim . fldiv) (o4fe5 core-prim . fldenominator) (o4fe4 core-prim . flcos) (o4fe3 core-prim . flceiling) (o4fe2 core-prim . flatan) (o4fe1 core-prim . flasin) (o4fe0 core-prim . flacos) (o4fdf core-prim . flabs) (o4fde core-prim . fl>?) (o4fdd core-prim . fl>=?) (o4fdc core-prim . fl=?) (o4fdb core-prim . fl<?) (o4fda core-prim . fl<=?) (o4fd9 core-prim . fl/) (o4fd8 core-prim . fl-) (o4fd7 core-prim . fl+) (o4fd6 core-prim . fl*) (o4fd5 core-prim . fixnum->flonum) (o4fd4 core-prim . fxzero?) (o4fd3 core-prim . fxxor) (o4fd2 core-prim . fxrotate-bit-field) (o4fd1 core-prim . fxreverse-bit-field) (o4fd0 core-prim . fxpositive?) (o4fcf core-prim . fxodd?) (o4fce core-prim . fxnot) (o4fcd core-prim . fxnegative?) (o4fcc core-prim . fxmod0) (o4fcb core-prim . fxmod) (o4fca core-prim . fxmin) (o4fc9 core-prim . fxmax) (o4fc8 core-prim . fxlength) (o4fc7 core-prim . fxior) (o4fc6 core-prim . fxif) (o4fc5 core-prim . fxfirst-bit-set) (o4fc4 core-prim . fxeven?) (o4fc3 core-prim . fxdiv0-and-mod0) (o4fc2 core-prim . fxdiv0) (o4fc1 core-prim . fxdiv-and-mod) (o4fc0 core-prim . fxdiv) (o4fbf core-prim . fxcopy-bit-field) (o4fbe core-prim . fxcopy-bit) (o4fbd core-prim . fxbit-set?) (o4fbc core-prim . fxbit-field) (o4fbb core-prim . fxbit-count) (o4fba core-prim . fxarithmetic-shift-right) (o4fb9 core-prim . fxarithmetic-shift-left) (o4fb8 core-prim . fxarithmetic-shift) (o4fb7 core-prim . fxand) (o4fb6 core-prim . fx>?) (o4fb5 core-prim . fx>=?) (o4fb4 core-prim . fx=?) (o4fb3 core-prim . fx<?) (o4fb2 core-prim . fx<=?) (o4fb1 core-prim . fx-/carry) (o4fb0 core-prim . fx-) (o4faf core-prim . fx+/carry) (o4fae core-prim . fx+) (o4fad core-prim . fx*/carry) (o4fac core-prim . fx*) (o4fab core-prim . greatest-fixnum) (o4faa core-prim . least-fixnum) (o4fa9 core-prim . fixnum-width) (o4fa8 core-prim . fixnum?) (o4fa7 core-prim . bitwise-rotate-bit-field) (o4fa6 core-prim . bitwise-reverse-bit-field) (o4fa5 core-prim . bitwise-length) (o4fa4 core-prim . bitwise-if) (o4fa3 core-prim . bitwise-first-bit-set) (o4fa2 core-prim . bitwise-copy-bit-field) (o4fa1 core-prim . bitwise-copy-bit) (o4fa0 core-prim . bitwise-bit-set?) (o4f9f core-prim . bitwise-bit-field) (o4f9e core-prim . bitwise-bit-count) (o4f9d core-prim . bitwise-xor) (o4f9c core-prim . bitwise-ior) (o4f9b core-prim . bitwise-and) (o4f9a core-prim . bitwise-not) (o4f99 core-prim . bitwise-arithmetic-shift-right) (o4f98 core-prim . bitwise-arithmetic-shift-left) (o4f97 core-prim . bitwise-arithmetic-shift) (o4f96 core-prim . zero?) (o4f95 core-prim . vector?) (o4f94 core-prim . vector-set!) (o4f93 core-prim . vector-ref) (o4f92 core-prim . vector-map) (o4f91 core-prim . vector-length) (o4f90 core-prim . vector-for-each) (o4f8f core-prim . vector-fill!) (o4f8e core-prim . vector->list) (o4f8d core-prim . vector) (o4f8c core-prim . values) (o4f8b core-prim . truncate) (o4f8a core-prim . tan) (o4f89 core-prim . symbol?) (o4f88 core-prim . symbol=?) (o4f87 core-prim . symbol->string) (o4f86 core-prim . substring) (o4f85 core-prim . string?) (o4f84 core-prim . string>?) (o4f83 core-prim . string>=?) (o4f82 core-prim . string=?) (o4f81 core-prim . string<?) (o4f80 core-prim . string<=?) (o4f7f core-prim . string-ref) (o4f7e core-prim . string-length) (o4f7d core-prim . string-for-each) (o4f7c core-prim . string-copy) (o4f7b core-prim . string-append) (o4f7a core-prim . string->symbol) (o4f79 core-prim . string->number) (o4f78 core-prim . string->list) (o4f77 core-prim . string) (o4f76 core-prim . sqrt) (o4f75 core-prim . sin) (o4f74 core-prim . round) (o4f73 core-prim . reverse) (o4f72 core-prim . real?) (o4f71 core-prim . real-valued?) (o4f70 core-prim . real-part) (o4f6f core-prim . rationalize) (o4f6e core-prim . rational?) (o4f6d core-prim . rational-valued?) (o4f6c core-prim . procedure?) (o4f6b core-prim . positive?) (o4f6a core-prim . pair?) (o4f69 core-prim . odd?) (o4f68 core-prim . numerator) (o4f67 core-prim . number?) (o4f66 core-prim . number->string) (o4f65 core-prim . null?) (o4f64 core-prim . not) (o4f63 core-prim . negative?) (o4f62 core-prim . nan?) (o4f61 core-prim . min) (o4f60 core-prim . max) (o4f5f core-prim . map) (o4f5e core-prim . make-vector) (o4f5d core-prim . make-string) (o4f5c core-prim . make-rectangular) (o4f5b core-prim . make-polar) (o4f5a core-prim . magnitude) (o4f59 core-prim . log) (o4f58 core-prim . list?) (o4f57 core-prim . list-tail) (o4f56 core-prim . list-ref) (o4f55 core-prim . list->vector) (o4f54 core-prim . list->string) (o4f53 core-prim . list) (o4f52 core-prim . length) (o4f51 core-prim . lcm) (o4f50 core-prim . integer?) (o4f4f core-prim . integer-valued?) (o4f4e core-prim . integer->char) (o4f4d core-prim . infinite?) (o4f4c core-prim . inexact?) (o4f4b core-prim . inexact) (o4f4a core-prim . imag-part) (o4f49 core-prim . gcd) (o4f48 core-prim . for-each) (o4f47 core-prim . floor) (o4f46 core-prim . finite?) (o4f45 core-prim . expt) (o4f44 core-prim . exp) (o4f43 core-prim . exact?) (o4f42 core-prim . exact-integer-sqrt) (o4f41 core-prim . exact) (o4f40 core-prim . even?) (o4f3f core-prim . error) (o4f3e core-prim . eqv?) (o4f3d core-prim . equal?) (o4f3c core-prim . eq?) (o4f3b core-prim . dynamic-wind) (o4f3a core-prim . div0-and-mod0) (o4f39 core-prim . mod0) (o4f38 core-prim . div0) (o4f37 core-prim . div-and-mod) (o4f36 core-prim . mod) (o4f35 core-prim . div) (o4f34 core-prim . denominator) (o4f33 core-prim . cos) (o4f32 core-prim . cons) (o4f31 core-prim . complex?) (o4f30 core-prim . char?) (o4f2f core-prim . char>?) (o4f2e core-prim . char>=?) (o4f2d core-prim . char=?) (o4f2c core-prim . char<?) (o4f2b core-prim . char<=?) (o4f2a core-prim . char->integer) (o4f29 core-prim . ceiling) (o4f28 core-prim . call-with-values) (o4f27 core-prim . call/cc) (o4f26 core-prim . call-with-current-continuation) (o4f25 core-prim . cddddr) (o4f24 core-prim . cdddar) (o4f23 core-prim . cddadr) (o4f22 core-prim . cddaar) (o4f21 core-prim . cdaddr) (o4f20 core-prim . cdadar) (o4f1f core-prim . cdaadr) (o4f1e core-prim . cdaaar) (o4f1d core-prim . cadddr) (o4f1c core-prim . caddar) (o4f1b core-prim . cadadr) (o4f1a core-prim . cadaar) (o4f19 core-prim . caaddr) (o4f18 core-prim . caadar) (o4f17 core-prim . caaadr) (o4f16 core-prim . caaaar) (o4f15 core-prim . cdddr) (o4f14 core-prim . cddar) (o4f13 core-prim . cdadr) (o4f12 core-prim . cdaar) (o4f11 core-prim . caddr) (o4f10 core-prim . cadar) (o4f0f core-prim . caadr) (o4f0e core-prim . caaar) (o4f0d core-prim . cddr) (o4f0c core-prim . cdar) (o4f0b core-prim . cadr) (o4f0a core-prim . caar) (o4f09 core-prim . cdr) (o4f08 core-prim . car) (o4f07 core-prim . boolean?) (o4f06 core-prim . boolean=?) (o4f05 core-prim . atan) (o4f04 core-prim . assertion-violation) (o2f98 core-prim . assertion-error) (o4f03 core-prim . asin) (o4f02 core-prim . apply) (o4f01 core-prim . append) (o4f00 core-prim . angle) (o4eff core-prim . acos) (o4efe core-prim . abs) (o4efd core-prim . /) (o4efc core-prim . *) (o4efb core-prim . -) (o4efa core-prim . +) (o4ef9 core-prim . >=) (o4ef8 core-prim . >) (o4ef7 core-prim . =) (o4ef6 core-prim . <=) (o4ef5 core-prim . <) (o4ef4 core-prim . library) (o4ef3 $core-rtd &no-nans-rtd &no-nans-rcd) (o4ef2 $core-rtd &no-infinities-rtd &no-infinities-rcd) (o4ef1 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (o4ef0 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (o4eef $core-rtd &i/o-port-rtd &i/o-port-rcd) (o4eee $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (o4eed $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (o4eec $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (o4eeb $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (o4eea $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (o4ee9 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (o4ee8 $core-rtd &i/o-write-rtd &i/o-write-rcd) (o4ee7 $core-rtd &i/o-read-rtd &i/o-read-rcd) (o4ee6 $core-rtd &i/o-rtd &i/o-rcd) (o4ee5 $core-rtd &undefined-rtd &undefined-rcd) (o4ee4 $core-rtd &syntax-rtd &syntax-rcd) (o4ee3 $core-rtd &lexical-rtd &lexical-rcd) (o4ee2 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (o4ee1 $core-rtd &non-continuable-rtd &non-continuable-rcd) (o4ee0 $core-rtd &who-rtd &who-rcd) (o4edf $core-rtd &irritants-rtd &irritants-rcd) (o4ede $core-rtd &assertion-rtd &assertion-rcd) (o4edd $core-rtd &violation-rtd &violation-rcd) (o4edc $core-rtd &error-rtd &error-rcd) (o4edb $core-rtd &serious-rtd &serious-rcd) (o4eda $core-rtd &warning-rtd &warning-rcd) (o4ed9 $core-rtd &message-rtd &message-rcd) (o4ed8 $core-rtd &condition-rtd &condition-rcd) (o4ed7 macro . define-condition-type) (o4ed6 macro . define-enumeration) (o4ed5 macro . define-record-type) (o4ed4 macro . parent-rtd) (o4ed3 macro . nongenerative) (o4ed2 macro . opaque) (o4ed1 macro . sealed) (o4ed0 macro . protocol) (o4ecf macro . parent) (o4ece macro . immutable) (o4ecd macro . mutable) (o4ecc macro . fields) (o4ecb macro . error-handling-mode) (o4eca macro . file-options) (o4ec9 macro . buffer-mode) (o4ec8 macro . eol-style) (o4ec7 macro . guard) (o4ec6 macro . trace-define) (o4ec5 macro . trace-lambda) (o4ec4 macro . unsyntax-splicing) (o4ec3 macro . unsyntax) (o4ec2 macro . unquote-splicing) (o4ec1 macro . unquote) (o4ec0 macro . _) (o4ebf macro . else) (o4ebe macro . =>) (o4ebd macro . ...) (o4ebc macro . assert) (o4ebb macro . endianness) (o4eba macro . delay) (o4eb9 macro . time) (o4eb8 macro . do) (o4eb7 macro . cond) (o4eb6 macro . let*) (o4eb5 macro . let) (o4eb4 macro . let*-values) (o4eb3 macro . let-values) (o4eb2 macro . identifier-syntax) (o4eb1 macro . with-syntax) (o4eb0 macro . quasisyntax) (o4eaf macro . quasiquote) (o4eae macro . syntax-rules) (o4ead macro . include) (o4eac macro . define-struct) (o4eab core-macro . record-constructor-descriptor) (o4eaa core-macro . record-type-descriptor) (o4ea9 macro . case) (o4ea8 macro . parameterize) (o4ea7 macro . unless) (o4ea6 macro . when) (o4ea5 core-macro . or) (o4ea4 core-macro . and) (o4ea3 core-macro . if) (o4ea2 core-macro . letrec*) (o4ea1 core-macro . letrec) (o4ea0 core-macro . type-descriptor) (o4e9f core-macro . case-lambda) (o4e9e core-macro . lambda) (o4e9d core-macro . syntax) (o4e9c core-macro . syntax-case) (o4e9b core-macro . quote) (o4e9a core-macro . foreign-call) (o4e99 letrec-syntax) (o4e98 let-syntax) (o4e97 set!) (o4e96 import) (o4e95 begin) (o4e94 module) (o4e93 define-syntax) (o4e92 define)) values values '#f '#f '#f '#f) (o2acd@o296c@install-library 'o5181 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . o5160) (eval-core . o515f) (set-symbol-value! . o515e) (symbol-value . o515d) (gensym . o515c) (void . o515b)) '() values values '#f '#f '#f '#f) (o2acd@o296c@install-library 'o5182 '(mosh) '() '() '() '() '((set-symbol-value! . o515e) (symbol-value . o515d) (regexp? . o5159) (read-line . o5158) (ungensym . o5157) (alist->eq-hash-table . o5156) (assoc-ref . o5155) (print . o5154) (format . o5153) (host-os . o5152) (library-path . o294b) (standard-library-path . o5151) (file-newer? . o5150) (stat-mtime . o514f) (write-to-file . o514e) (file->list . o514d) (file->string . o514c) (digit->integer . o514b) (call-with-string-input-port . o514a) (call-with-string-io . o5149) (string-split . o5148) (bytevector-for-each . o5147) (string->regexp . o5146) (rxmatch . o5145) (regexp-replace-all . o5144) (hashtable-for-each . o5143) (readdir . o513f) (set-current-directory! . o513e) (expand-path . o513d) (current-directory . o513c) (p . o512d) (get-timeofday . o5128) (get-command-line . o5127) (sys-display . o5126) (mosh-executable-path . o5125) (make-file-options . o5124) (source-info . o5123) (make-compiler-instruction . o5122) (make-instruction . o5121) (set-source-info! . o5120) (bignum? . o511f) (fast-equal? . o511e) (fasl-read . o511d) (fasl-write . o511c) (time-usage . o511b) (os-constant . o511a) (time . o4eb9) (include . o4ead)) '() values values '#f '#f '#f '#f) (o2acd@o296c@install-library 'o5183 '(system) '() '() '() '() '((call-process . o5142) (local-tz-offset . o5141) (microseconds . o5140) (expand-path . o513d) (%spawn . o513b) (%waitpid . o513a) (%ffi-supported? . o5139) (%ffi-pointer-ref . o5138) (%ffi-pointer->string . o5137) (%ffi-call->string-or-zero . o5136) (%ffi-call->double . o5135) (%ffi-call->void* . o5134) (%ffi-call->void . o5133) (%ffi-call->int . o5132) (%ffi-lookup . o5131) (%ffi-open . o5130) (%fork . o512f) (%pipe . o512e) (open-output-string . o512c) (get-output-string . o512b) (get-environment-variables . o512a) (get-environment-variable . o5129) (make-parameter . o277e) (socket-port . o5119) (socket-shutdown . o5118) (socket-close . o5117) (socket-send . o5116) (socket-recv! . o5115) (socket-recv . o5114) (make-server-socket . o5113) (make-client-socket . o5112) (socket-accept . o5111) (socket? . o5110) (parameterize . o4ea8)) '() values values '#f '#f '#f '#f))
((lambda (o4d5b@add-library-path! o4d5d@parse-and-add-library-path o4d5f@for-each-with-index o4d61@rpad o4d63@condition-printer o4d65@record->field-alist o4d67@map-with-index o4d69@repl o4d6b@trace-printer o4d6d@command-line o4d6f@local-library-path o4d71@load/args o4d73@load o4d75@ironscheme-build o4d77@eval-top-level o4d79@compile-system-libraries o4d7b@compile o4d7d@compile->closure o4d7f@pre-compile-r6rs-file o4d81@load-r6rs-top-level o4d83@load-r6rs-top-level-sexp) (begin (set! o4d5b@add-library-path! (lambda (o4da6@path) (o2abd@o294c@library-path (append (o2abd@o294c@library-path) (list o4da6@path))))) (set! o4d5d@parse-and-add-library-path (lambda (o4da8@paths o4da9@message) ((lambda (o4dac@t) (if o4dac@t ((lambda (o4dae@paths) (for-each (lambda (o4db0@path) (if (file-exists? o4db0@path) (o4d5b@add-library-path! (expand-path o4db0@path)) (format (current-error-port) o4da9@message o4db0@path))) (reverse (string-split o4dae@paths '#\:)))) o4dac@t) (void))) o4da8@paths))) (set! o4d5f@for-each-with-index (lambda (o4db2@proc o4db3@lst) (letrec ((o4db6@loop (lambda (o4db8@i o4db9@lst) (if (null? o4db9@lst) (if '#f '#f (void)) (begin (o4db2@proc o4db8@i (car o4db9@lst)) (o4db6@loop (+ o4db8@i '1) (cdr o4db9@lst))))))) (o4db6@loop '1 o4db3@lst)))) (set! o4d61@rpad (lambda (o4dbc@str o4dbd@pad o4dbe@n) ((lambda (o4dc2@rest) ((letrec ((o4dc4@loop (lambda (o4dc6@rest o4dc7@ret) (if (<= o4dc6@rest '0) o4dc7@ret (o4dc4@loop (- o4dc6@rest '1) (string-append o4dc7@ret o4dbd@pad)))))) o4dc4@loop) o4dc2@rest (format '"~a" o4dbc@str))) (- o4dbe@n (string-length (format '"~a" o4dbc@str)))))) (set! o4d63@condition-printer (lambda (o4dca@e o4dcb@port) ((lambda (o4dcf@max-condition-len) (begin (set! o4dcf@max-condition-len (apply max (map (lambda (o4de0@c) (string-length (symbol->string (record-type-name (record-rtd o4de0@c))))) (simple-conditions o4dca@e)))) (begin (display '" Condition components:\n" o4dcb@port) (o4d5f@for-each-with-index (lambda (o4dd0@i o4dd1@x) ((lambda (o4dd4@rtd o4dd5@fields-alist) (begin (format o4dcb@port '" ~d. ~a" o4dd0@i (o4d61@rpad (symbol->string (record-type-name o4dd4@rtd)) '" " o4dcf@max-condition-len)) (if (null? o4dd5@fields-alist) (newline o4dcb@port) (void)) ((letrec ((o4dd8@loop (lambda (o4dda@first o4ddb@fields-alist) (if (null? o4ddb@fields-alist) '() ((lambda (o4dde@field) (begin (if (not o4dda@first) (display (o4d61@rpad '"" '" " (+ '4 o4dcf@max-condition-len)) o4dcb@port) (void)) (display '"       " o4dcb@port) (display (car o4dde@field) o4dcb@port) (display '": " o4dcb@port) (write (cdr o4dde@field) o4dcb@port) (newline o4dcb@port) (o4dd8@loop '#f (cdr o4ddb@fields-alist)))) (car o4ddb@fields-alist)))))) o4dd8@loop) '#t o4dd5@fields-alist))) (record-rtd o4dd1@x) (o4d65@record->field-alist o4dd1@x))) (simple-conditions o4dca@e))))) '#f))) (set! o4d65@record->field-alist (lambda (o4de2@r) ((lambda (o4de5@ref) (begin (set! o4de5@ref (lambda (o4df0@rtd o4df1@i o4df2@x) ((lambda (o4df6@val) (if (symbol? o4df6@val) (ungensym o4df6@val) o4df6@val)) ((record-accessor o4df0@rtd o4df1@i) o4df2@x)))) ((letrec ((o4de6@loop (lambda (o4de8@ret o4de9@rtd) (if o4de9@rtd (o4de6@loop (append o4de8@ret (o4d67@map-with-index (lambda (o4dec@i o4ded@field) (cons o4ded@field (o4de5@ref o4de9@rtd o4dec@i o4de2@r))) (vector->list (record-type-field-names o4de9@rtd)))) (record-type-parent o4de9@rtd)) o4de8@ret)))) o4de6@loop) '() (record-rtd o4de2@r)))) '#f))) (set! o4d67@map-with-index (lambda (o4df8@proc o4df9@lst) ((letrec ((o4dfc@loop (lambda (o4dfe@i o4dff@lst o4e00@ret) (if (null? o4dff@lst) (reverse o4e00@ret) (o4dfc@loop (+ o4dfe@i '1) (cdr o4dff@lst) (cons (o4df8@proc o4dfe@i (car o4dff@lst)) o4e00@ret)))))) o4dfc@loop) '0 o4df9@lst '()))) (set! o4d69@repl (lambda o4e04@x ((lambda (o4e07@rec) (begin (set! o4e07@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (o4e0a@o4e08) (lambda () (with-exception-handler (lambda (o4e0c@e) ((call/cc (lambda (o4e0e@o4e09) (o4e0a@o4e08 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? o4e0c@e) (o4d63@condition-printer o4e0c@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" o4e0c@e))) (o4e0e@o4e09 (lambda () (raise-continuable o4e0c@e)))))))))) (lambda () ((letrec ((o4e10@loop (lambda (o4e12@line o4e13@accum) ((lambda (o4e17@parentheses-ok? o4e19@eval-string-print) (begin (set! o4e17@parentheses-ok? (lambda (o4e1e@text) ((letrec ((o4e20@loop (lambda (o4e22@chars o4e23@p0 o4e24@p1) (if (null? o4e22@chars) (= '0 o4e23@p0 o4e24@p1) ((lambda (o4e28@t) (if (memv o4e28@t '(#\()) (o4e20@loop (cdr o4e22@chars) (+ o4e23@p0 '1) o4e24@p1) (if (memv o4e28@t '(#\))) (o4e20@loop (cdr o4e22@chars) (- o4e23@p0 '1) o4e24@p1) (if (memv o4e28@t '(#\[)) (o4e20@loop (cdr o4e22@chars) o4e23@p0 (+ o4e24@p1 '1)) (if (memv o4e28@t '(#\])) (o4e20@loop (cdr o4e22@chars) o4e23@p0 (- o4e24@p1 '1)) (o4e20@loop (cdr o4e22@chars) o4e23@p0 o4e24@p1)))))) (car o4e22@chars)))))) o4e20@loop) (string->list o4e1e@text) '0 '0))) (set! o4e19@eval-string-print (lambda (o4e1c@text) (if (not (or (string=? '"\n" o4e1c@text) (= '0 (string-length o4e1c@text)))) (write (o4d77@eval-top-level (call-with-port (open-string-input-port o4e1c@text) read))) (void)))) (if (eof-object? o4e12@line) (begin (o4e19@eval-string-print o4e13@accum) (exit)) ((lambda (o4e1a@current) (if (o4e17@parentheses-ok? o4e1a@current) (o4e19@eval-string-print o4e1a@current) (o4e10@loop (get-line (current-input-port)) o4e1a@current))) (string-append o4e13@accum o4e12@line))))) '#f '#f)))) o4e10@loop) (get-line (current-input-port)) '""))))))) (newline) (o4e07@rec)))) (o4e07@rec))) '#f))) (set! o4d6b@trace-printer (o2855@o277f@make-parameter write)) (set! o4d6d@command-line (o2855@o277f@make-parameter (get-command-line))) (set! o4d6f@local-library-path (lambda (o4e2a@filename) (cons (expand-path '".") (o2abd@o294c@library-path)))) (set! o4d71@load/args (lambda (o4e2c@filename . o4e2e@args) (begin (apply o4d81@load-r6rs-top-level o4e2c@filename 'load o4e2e@args) (void)))) (set! o4d73@load (lambda (o4e30@filename) (begin (apply o4d81@load-r6rs-top-level o4e30@filename 'load (o4d6d@command-line)) (void)))) (set! o4d75@ironscheme-build (lambda () (o4d73@load '"ironscheme-buildscript.ss"))) (set! o4d77@eval-top-level (lambda (o4e32@x) (o4987@o2f7f@eval o4e32@x (o499d@o2fab@interaction-environment)))) (set! o4d79@compile-system-libraries (lambda () (o4d77@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! o4d7b@compile (lambda (o4e34@filename) (o4d81@load-r6rs-top-level o4e34@filename 'compile))) (set! o4d7d@compile->closure (lambda (o4e36@filename) (o4d81@load-r6rs-top-level o4e36@filename 'closure))) (set! o4d7f@pre-compile-r6rs-file (lambda (o4e38@filename) (o4d81@load-r6rs-top-level o4e38@filename 'compile))) (set! o4d81@load-r6rs-top-level (lambda (o4e3a@filename o4e3b@how . o4e3e@args) ((lambda (o4e44@o4e41 o4e45@o4e43) ((lambda (o4e48@swap) (dynamic-wind o4e48@swap (lambda () ((lambda (o4e4a@x*) ((lambda (o4e4c@t) (if (memv o4e4c@t '(closure)) (o499c@o2fa9@pre-compile-r6rs-top-level o4e4a@x*) (if (memv o4e4c@t '(load)) ((lambda (o4e52@o4e4f o4e53@o4e51) ((lambda (o4e56@swap) (dynamic-wind o4e56@swap (lambda () ((o499b@o2fa7@compile-r6rs-top-level o4e4a@x*))) o4e56@swap)) (lambda () ((lambda (o4e58@t) (begin (o4e52@o4e4f o4e53@o4e51) (set! o4e53@o4e51 o4e58@t))) (o4e52@o4e4f))))) o4d6d@command-line (cons o4e3a@filename (car o4e3e@args))) (if (memv o4e4c@t '(compile)) (begin (o499b@o2fa7@compile-r6rs-top-level o4e4a@x*) (o2ac1@o2954@serialize-all o2850@o2775@serialize-library o28aa@o2863@compile-core-expr)) (if '#f '#f (void)))))) o4e3b@how)) (with-input-from-file o4e3a@filename (lambda () ((letrec ((o4e5a@f (lambda () ((lambda (o4e5c@x) (if (eof-object? o4e5c@x) '() (cons o4e5c@x (o4e5a@f)))) (o2848@o2765@read-annotated))))) o4e5a@f)))))) o4e48@swap)) (lambda () ((lambda (o4e5e@t) (begin (o4e44@o4e41 o4e45@o4e43) (set! o4e45@o4e43 o4e5e@t))) (o4e44@o4e41))))) o2abd@o294c@library-path (o4d6f@local-library-path o4e3a@filename)))) (set! o4d83@load-r6rs-top-level-sexp (lambda (o4e60@import-spec o4e61@thunk) ((lambda (o4e68@o4e65 o4e69@o4e67) ((lambda (o4e6c@swap) (dynamic-wind o4e6c@swap (lambda () ((lambda (o4e72@o4e6f o4e73@o4e71) ((lambda (o4e76@swap) (dynamic-wind o4e76@swap (lambda () ((o499b@o2fa7@compile-r6rs-top-level (list (cons 'import o4e60@import-spec) (list o4e61@thunk))))) o4e76@swap)) (lambda () ((lambda (o4e78@t) (begin (o4e72@o4e6f o4e73@o4e71) (set! o4e73@o4e71 o4e78@t))) (o4e72@o4e6f))))) o4d6d@command-line '())) o4e6c@swap)) (lambda () ((lambda (o4e7a@t) (begin (o4e68@o4e65 o4e69@o4e67) (set! o4e69@o4e67 o4e7a@t))) (o4e68@o4e65))))) o2abd@o294c@library-path (o4d6f@local-library-path '"")))) (begin (set! o4e90@o4d83@load-r6rs-top-level-sexp o4d83@load-r6rs-top-level-sexp) (set! o4e8f@o4d81@load-r6rs-top-level o4d81@load-r6rs-top-level) (set! o4e8e@o4d7f@pre-compile-r6rs-file o4d7f@pre-compile-r6rs-file) (set! o4e8d@o4d7d@compile->closure o4d7d@compile->closure) (set! o4e8c@o4d7b@compile o4d7b@compile) (set! o4e8b@o4d79@compile-system-libraries o4d79@compile-system-libraries) (set! o4e8a@o4d77@eval-top-level o4d77@eval-top-level) (set! o4e89@o4d75@ironscheme-build o4d75@ironscheme-build) (set! o4e88@o4d73@load o4d73@load) (set! o4e87@o4d71@load/args o4d71@load/args) (set! o4e86@o4d6f@local-library-path o4d6f@local-library-path) (set! o4e85@o4d6d@command-line o4d6d@command-line) (set! o4e84@o4d6b@trace-printer o4d6b@trace-printer) (set! o4e83@o4d69@repl o4d69@repl) (set! o4e82@o4d67@map-with-index o4d67@map-with-index) (set! o4e81@o4d65@record->field-alist o4d65@record->field-alist) (set! o4e80@o4d63@condition-printer o4d63@condition-printer) (set! o4e7f@o4d61@rpad o4d61@rpad) (set! o4e7e@o4d5f@for-each-with-index o4d5f@for-each-with-index) (set! o4e7d@o4d5d@parse-and-add-library-path o4d5d@parse-and-add-library-path) (set! o4e7c@o4d5b@add-library-path! o4d5b@add-library-path!) (o2ac2@o2956@current-precompiled-library-loader o2851@o2777@load-serialized-library) (set-symbol-value! 'load o4d73@load) (set-symbol-value! 'pre-compile-r6rs-file o4d7f@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs o4d77@eval-top-level) (set-symbol-value! 'int-env-syms o497e@o2f6d@interaction-environment-symbols) (set-symbol-value! 'expanded2core o28a9@o2861@expanded->core) (set-symbol-value! 'trace-printer o4d6b@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (o4d84@c) (condition (o4cb8@o4ac2@make-non-continuable-violation) (o4cae@o4aa9@make-who-condition 'raise) (o4c72@o4a0a@make-message-condition '"returned from non-continuable exception") (o4ca4@o4a8e@make-irritants-condition (list o4d84@c))))) (o4d5d@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (o4d5d@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (o4d5b@add-library-path! (string-append (mosh-executable-path) '"/lib")) (o4d5b@add-library-path! (string-append (current-directory) '"/lib"))) (o4d5b@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (o4d86@prefix) (o2abe@o294e@library-extensions (o4d86@prefix '".mosh" (o2abe@o294e@library-extensions)))) (lambda (o4d88@ext o4d89@ls) (append (map (lambda (o4d8c@x) (string-append o4d88@ext o4d8c@x)) o4d89@ls) o4d89@ls))) ((lambda (o4d8e@args o4d8f@port) ((lambda (o4d93@ref) (begin (set! o4d93@ref (lambda (o4d9e@rtd o4d9f@i o4da0@x) ((lambda (o4da4@val) (if (symbol? o4da4@val) (ungensym o4da4@val) o4da4@val)) ((record-accessor o4d9e@rtd o4d9f@i) o4da0@x)))) (with-exception-handler (lambda (o4d94@c) (if (condition? o4d94@c) (o4d63@condition-printer o4d94@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" o4d94@c))) (lambda () (if ((call/cc (lambda (o4d98@o4d96) (lambda () (with-exception-handler (lambda (o4d9a@c) ((call/cc (lambda (o4d9c@o4d97) (o4d98@o4d96 (lambda () (if '#t '#f (o4d9c@o4d97 (lambda () (raise-continuable o4d9a@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (o4d83@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? o4d8e@args) (o4d69@repl) (o4d81@load-r6rs-top-level (car o4d8e@args) 'load (cdr o4d8e@args)))))))) '#f)) (o4d6d@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
