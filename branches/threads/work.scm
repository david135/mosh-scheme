(define (make-mail-box)
  (vector (make-condition-variable) '() (make-mutex)))

(define (send mail-box obj)
  (let ([mutex (vector-ref mail-box 2)])
    (mutex-lock! mutex)
    (vector-set! mail-box 1 (cons obj (vector-ref mail-box 1)))
    (mutex-unlock! mutex)
    (condition-variable-notify! (vector-ref mail-box 0))))

(let* ([vm (make-vm '
           (lambda ()
             (let* ([mail-box (symbol-value 'mail-box)]
                    [mutex (vector-ref mail-box 2)])
               (define (mail-exists?)
                 (pair? (vector-ref mail-box 1)))
               (define (receive)
                 (let loop ()
                   (cond
                    [(mail-exists?)
                     (mutex-lock! mutex)
                     (let ([val (car (vector-ref mail-box 1))])
                       (vector-set! mail-box 1 (cdr (vector-ref mail-box 1)))
                       (mutex-unlock! mutex)
                       val)]
                    [else
                     (condition-variable-wait! (vector-ref mail-box 0))
                     (loop)])))
               (display (receive))
               (newline)
               (display (receive))
               (newline)
               (display (receive))
               (newline)
             (exit 1234)))
           '((rnrs) ;; (mosh socket)
             (rnrs mutable-pairs)
             (mosh)) "mutator")]
      [mail-box (make-mail-box)])
  (vm-set-value! vm 'mail-box mail-box)
  (display vm)
  (display (vm? vm))
  (vm-start! vm)
  (send mail-box 'hello)
  (send mail-box 'world)
  (send mail-box 'world)
  #;(display (vm-join! vm)))
