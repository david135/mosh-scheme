;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (K905@make-gensym-counter K907@gen-sym-start K909@gen-sym-counter K911@gensym K913@read-annotated K915@annotation-stripped K917@annotation? K919@annotation-source K921@annotation-expression K923@scm->fasl K925@fasl-save K927@fasl-load K929@serialize-library K931@load-serialized-library K933@make-record-printer K935@compile-core K937@read-library-source-file K939@make-parameter K1039@file-options-spec) (begin (set! K905@make-gensym-counter (lambda (K1040@i) ((lambda (K1043@inc) (begin (set! K1043@inc (lambda () (begin (set! K1040@i (+ K1040@i '1)) K1040@i))) K1043@inc)) '#f))) (set! K907@gen-sym-start ((lambda (K1044@v) (if K1044@v (string->number K1044@v) '0)) (get-environment-variable '"MOSH_GENSYM_START"))) (set! K909@gen-sym-counter (K905@make-gensym-counter K907@gen-sym-start)) (set! K911@gensym (lambda K1046@x (string->symbol (if (null? K1046@x) (format '"K~a" (K909@gen-sym-counter)) (format '"K~a@~a" (K909@gen-sym-counter) (car K1046@x)))))) (set! K913@read-annotated read) (set! K915@annotation-stripped (lambda (K1048@x) (K921@annotation-expression K1048@x))) (set! K917@annotation? (lambda (K1050@x) (source-info K1050@x))) (set! K919@annotation-source (lambda (K1052@x) (source-info K1052@x))) (set! K921@annotation-expression (lambda (K1054@x) (if (pair? K1054@x) (cons (car K1054@x) (cdr K1054@x)) (display '"line:46\n")))) (set! K923@scm->fasl (lambda (K1056@filename) (string-append K1056@filename '".fasl"))) (set! K925@fasl-save (lambda (K1058@filename K1059@obj) (call-with-port (open-file-output-port K1058@filename) (lambda (K1062@port) ((symbol-value 'fasl-write!) K1059@obj K1062@port))))) (set! K927@fasl-load (lambda (K1064@filename) (call-with-port (open-file-input-port K1064@filename) (symbol-value 'fasl-read!)))) (set! K929@serialize-library (lambda (K1066@filename K1067@obj) (begin (format '#t '"serialize-library ~a\n..." K1066@filename) ((lambda (K1070@expanded2core) ((lambda (K1072@compile) ((lambda (K1074@code) ((lambda (K1076@pivot) ((lambda (K1078@visit) ((lambda () (begin (set-car! K1076@pivot K1078@visit) ((lambda (K1080@pivot) ((lambda (K1082@invoke) ((lambda () (set-car! K1080@pivot K1082@invoke)))) (K1072@compile (K1070@expanded2core (car K1080@pivot))))) (cdr K1076@pivot)))))) (K1072@compile (K1070@expanded2core (car K1076@pivot))))) (cddddr (cddddr K1074@code)))) K1067@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (K1084@fasl-file) (begin (if (file-exists? K1084@fasl-file) (delete-file K1084@fasl-file) (void)) ((call/cc (lambda (K1088@K1086) (lambda () (with-exception-handler (lambda (K1090@c) ((call/cc (lambda (K1092@K1087) (K1088@K1086 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed ~a" K1066@filename K1090@c) (if (file-exists? K1084@fasl-file) (delete-file K1084@fasl-file) (void)) '#f) (K1092@K1087 (lambda () (raise-continuable K1090@c)))))))))) (lambda () (begin (K925@fasl-save K1084@fasl-file K1067@obj) (display '"OK\n")))))))))) (K923@scm->fasl K1066@filename))))) (set! K931@load-serialized-library (lambda (K1094@filename K1095@obj) ((lambda (K1098@fasl-file) (if (and (file-exists? K1098@fasl-file) ((symbol-value 'file-newer?) K1098@fasl-file K1094@filename)) ((lambda (K1100@expanded2core) ((lambda (K1102@eval-compiled-core) ((lambda (K1104@code) ((lambda (K1106@pivot) ((lambda (K1108@visit) ((lambda (K1110@visit-proc) ((lambda () (begin (set-car! K1106@pivot K1110@visit-proc) ((lambda (K1112@pivot) ((lambda (K1114@invoke) ((lambda () (begin (set-car! K1112@pivot (lambda () (K1102@eval-compiled-core K1114@invoke))) (apply K1095@obj K1104@code))))) (car K1112@pivot))) (cdr K1106@pivot)) '#t)))) (lambda () (K1102@eval-compiled-core K1108@visit)))) (car K1106@pivot))) (cddddr (cddddr K1104@code)))) (K927@fasl-load K1098@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (K923@scm->fasl K1094@filename)))) (set! K933@make-record-printer (lambda (K1116@name K1117@printer) (lambda K1120@x (begin (display '"record printer") (for-each display K1120@x))))) (set! K935@compile-core (lambda K1122@x (apply error 'comile-core '"not implementated" K1122@x))) (set! K937@read-library-source-file (lambda (K1124@file-name) (with-input-from-file K1124@file-name K913@read-annotated))) (set! K939@make-parameter (lambda K1140 ((lambda (K1141) (if (= K1141 '1) (apply (lambda (K1126@x) (K939@make-parameter K1126@x (lambda (K1128@x) K1128@x))) K1140) (if (= K1141 '2) (apply (lambda (K1130@x K1131@fender) ((lambda (K1134@x) (lambda K1138 ((lambda (K1139) (if (= K1139 '0) (apply (lambda () K1134@x) K1138) (if (= K1139 '1) (apply (lambda (K1136@v) (set! K1134@x (K1131@fender K1136@v))) K1138) (error 'apply '"invalid arg count")))) (length K1138)))) (K1131@fender K1130@x))) K1140) (error 'apply '"invalid arg count")))) (length K1140)))) (set! K1039@file-options-spec (lambda (K1142@x) K1142@x)) (begin (set! K1162@K1039@file-options-spec K1039@file-options-spec) (set! K1161@K939@make-parameter K939@make-parameter) (set! K1160@K937@read-library-source-file K937@read-library-source-file) (set! K1159@K935@compile-core K935@compile-core) (set! K1158@K933@make-record-printer K933@make-record-printer) (set! K1157@K931@load-serialized-library K931@load-serialized-library) (set! K1156@K929@serialize-library K929@serialize-library) (set! K1155@K927@fasl-load K927@fasl-load) (set! K1154@K925@fasl-save K925@fasl-save) (set! K1153@K923@scm->fasl K923@scm->fasl) (set! K1152@K921@annotation-expression K921@annotation-expression) (set! K1151@K919@annotation-source K919@annotation-source) (set! K1150@K917@annotation? K917@annotation?) (set! K1149@K915@annotation-stripped K915@annotation-stripped) (set! K1148@K913@read-annotated K913@read-annotated) (set! K1147@K911@gensym K911@gensym) (set! K1146@K909@gen-sym-counter K909@gen-sym-counter) (set! K1145@K907@gen-sym-start K907@gen-sym-start) (set! K1144@K905@make-gensym-counter K905@make-gensym-counter)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (K1167@current-primitive-locations K1169@mutable? K1171@rewriter K1173@expanded->core K1175@compile-core-expr K1177@pretty-print K1179@compile-core-expr-to-port) (begin (set! K1167@current-primitive-locations (K1161@K939@make-parameter (lambda (K1180@x) '#f) (lambda (K1182@p) K1182@p))) (set! K1169@mutable? (lambda (K1184@x) (or (pair? K1184@x) (vector? K1184@x) (hashtable? K1184@x)))) (set! K1171@rewriter (lambda (K1186@quote-hack?) ((lambda (K1189@f) (begin (set! K1189@f (lambda (K1190@x) (if (pair? K1190@x) ((lambda (K1192@t) (if (memv K1192@t '(quote)) (if (and K1186@quote-hack? (K1169@mutable? (cadr K1190@x))) ((lambda (K1194@g) (begin (set-symbol-value! K1194@g (cadr K1190@x)) K1194@g)) (K1147@K911@gensym)) K1190@x) (if (memv K1192@t '(case-lambda)) (cons 'case-lambda (map (lambda (K1196@x) (cons (car K1196@x) (map K1189@f (cdr K1196@x)))) (cdr K1190@x))) (if (memv K1192@t '(lambda)) (cons* 'lambda (cadr K1190@x) (map K1189@f (cddr K1190@x))) (if (memv K1192@t '(letrec)) ((lambda (K1198@bindings K1199@body*) ((lambda (K1202@lhs* K1203@rhs*) (cons* 'letrec (map list K1202@lhs* (map K1189@f K1203@rhs*)) (map K1189@f K1199@body*))) (map car K1198@bindings) (map cadr K1198@bindings))) (cadr K1190@x) (cddr K1190@x)) (if (memv K1192@t '(letrec*)) ((lambda (K1206@bindings K1207@body*) ((lambda (K1210@lhs* K1211@rhs*) (cons* 'letrec* (map list K1210@lhs* (map K1189@f K1211@rhs*)) (map K1189@f K1207@body*))) (map car K1206@bindings) (map cadr K1206@bindings))) (cadr K1190@x) (cddr K1190@x)) (if (memv K1192@t '(library-letrec*)) ((lambda (K1214@name K1215@x) ((lambda (K1218@bindings K1219@body*) ((lambda (K1222@lhs* K1223@lhs** K1224@rhs*) (cons* 'library-letrec* K1214@name (map list K1222@lhs* K1223@lhs** (map K1189@f K1224@rhs*)) (map K1189@f K1219@body*))) (map car K1218@bindings) (map cadr K1218@bindings) (map caddr K1218@bindings))) (cadr K1215@x) (cddr K1215@x))) (cadr K1190@x) (cdr K1190@x)) (if (memv K1192@t '(begin)) (cons 'begin (map K1189@f (cdr K1190@x))) (if (memv K1192@t '(set!)) (list 'set! (cadr K1190@x) (K1189@f (caddr K1190@x))) (if (memv K1192@t '(primitive)) ((lambda (K1228@op) ((lambda (K1230@t) (if K1230@t ((lambda (K1232@loc) K1232@loc) K1230@t) K1228@op)) ((K1167@current-primitive-locations) K1228@op))) (cadr K1190@x)) (if (memv K1192@t '(define)) K1190@x (if (list? K1190@x) (map K1189@f K1190@x) (error 'rewrite '"invalid form ~s ~s" K1190@x (list? K1190@x)))))))))))))) (car K1190@x)) K1190@x))) K1189@f)) '#f))) (set! K1173@expanded->core (lambda (K1234@x) ((K1171@rewriter '#f) K1234@x))) (set! K1175@compile-core-expr (lambda (K1236@x) ((K1171@rewriter '#f) K1236@x))) (set! K1177@pretty-print write) (set! K1179@compile-core-expr-to-port (lambda (K1238@x K1239@p) (K1177@pretty-print ((K1171@rewriter '#f) K1238@x) K1239@p))) (begin (set! K1248@K1179@compile-core-expr-to-port K1179@compile-core-expr-to-port) (set! K1247@K1177@pretty-print K1177@pretty-print) (set! K1246@K1175@compile-core-expr K1175@compile-core-expr) (set! K1245@K1173@expanded->core K1173@expanded->core) (set! K1244@K1171@rewriter K1171@rewriter) (set! K1243@K1169@mutable? K1169@mutable?) (set! K1242@K1167@current-primitive-locations K1167@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (K1327@make-collection K1329@current-library-collection K1335@K1330 K1337@K1332 K1339@K1331 K1342@library? K1344@make-library K1346@library-id K1348@library-name K1350@library-version K1352@library-imp* K1354@library-vis* K1356@library-inv* K1358@library-subst K1360@library-env K1362@library-visit-state K1364@library-invoke-state K1366@library-visit-code K1368@library-invoke-code K1370@library-visible? K1372@library-source-file-name K1374@set-library-id! K1376@set-library-name! K1378@set-library-version! K1380@set-library-imp*! K1382@set-library-vis*! K1384@set-library-inv*! K1386@set-library-subst! K1388@set-library-env! K1390@set-library-visit-state! K1392@set-library-invoke-state! K1394@set-library-visit-code! K1396@set-library-invoke-code! K1398@set-library-visible?! K1400@set-library-source-file-name! K1402@rp K1404@find-dependencies K1406@find-library-by K1408@library-path K1410@library-extensions K1412@library-name->file-name K1414@file-locator K1416@serialize-all K1418@current-precompiled-library-loader K1420@try-load-from-file K1422@library-loader K1424@current-library-expander K1426@external-pending-libraries K1428@find-external-library K1430@find-library-by-name K1432@library-exists? K1434@find-library-by-spec/die K1436@label->binding-table K1438@install-library-record K1440@install-library K1442@imported-label->binding K1444@invoke-library K1446@visit-library K1448@invoke-library-by-spec K1450@installed-libraries K1452@library-spec) (begin (set! K1327@make-collection (lambda () ((lambda (K1453@set) ((lambda (K1456@set-cons) (begin (set! K1456@set-cons (lambda (K1461@x K1462@ls) (if (memq K1461@x K1462@ls) K1462@ls (cons K1461@x K1462@ls)))) (lambda K1459 ((lambda (K1460) (if (= K1460 '0) (apply (lambda () K1453@set) K1459) (if (= K1460 '1) (apply (lambda (K1457@x) (set! K1453@set (K1456@set-cons K1457@x K1453@set))) K1459) (error 'apply '"invalid arg count")))) (length K1459))))) '#f)) '()))) (set! K1329@current-library-collection (K1161@K939@make-parameter (K1327@make-collection) (lambda (K1465@x) (begin (if (not (procedure? K1465@x)) (assertion-violation 'current-library-collection '"not a procedure" K1465@x) (void)) K1465@x)))) (set! K1335@K1330 (make-record-type-descriptor 'library '#f 'K1333 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! K1337@K1332 '#f) (set! K1339@K1331 (make-record-constructor-descriptor K1335@K1330 '#f K1337@K1332)) (set! K1342@library? (record-predicate K1335@K1330)) (set! K1344@make-library (record-constructor K1339@K1331)) (set! K1346@library-id (record-accessor K1335@K1330 '0)) (set! K1348@library-name (record-accessor K1335@K1330 '1)) (set! K1350@library-version (record-accessor K1335@K1330 '2)) (set! K1352@library-imp* (record-accessor K1335@K1330 '3)) (set! K1354@library-vis* (record-accessor K1335@K1330 '4)) (set! K1356@library-inv* (record-accessor K1335@K1330 '5)) (set! K1358@library-subst (record-accessor K1335@K1330 '6)) (set! K1360@library-env (record-accessor K1335@K1330 '7)) (set! K1362@library-visit-state (record-accessor K1335@K1330 '8)) (set! K1364@library-invoke-state (record-accessor K1335@K1330 '9)) (set! K1366@library-visit-code (record-accessor K1335@K1330 '10)) (set! K1368@library-invoke-code (record-accessor K1335@K1330 '11)) (set! K1370@library-visible? (record-accessor K1335@K1330 '12)) (set! K1372@library-source-file-name (record-accessor K1335@K1330 '13)) (set! K1374@set-library-id! (record-mutator K1335@K1330 '0)) (set! K1376@set-library-name! (record-mutator K1335@K1330 '1)) (set! K1378@set-library-version! (record-mutator K1335@K1330 '2)) (set! K1380@set-library-imp*! (record-mutator K1335@K1330 '3)) (set! K1382@set-library-vis*! (record-mutator K1335@K1330 '4)) (set! K1384@set-library-inv*! (record-mutator K1335@K1330 '5)) (set! K1386@set-library-subst! (record-mutator K1335@K1330 '6)) (set! K1388@set-library-env! (record-mutator K1335@K1330 '7)) (set! K1390@set-library-visit-state! (record-mutator K1335@K1330 '8)) (set! K1392@set-library-invoke-state! (record-mutator K1335@K1330 '9)) (set! K1394@set-library-visit-code! (record-mutator K1335@K1330 '10)) (set! K1396@set-library-invoke-code! (record-mutator K1335@K1330 '11)) (set! K1398@set-library-visible?! (record-mutator K1335@K1330 '12)) (set! K1400@set-library-source-file-name! (record-mutator K1335@K1330 '13)) (set! K1402@rp (K1158@K933@make-record-printer 'library (lambda (K1467@x K1468@p K1469@wr) (begin (if (not (K1342@library? K1467@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (K1350@library-version K1467@x)) (K1348@library-name K1467@x) (append (K1348@library-name K1467@x) (list (K1350@library-version K1467@x))))) K1468@p))))) (set! K1404@find-dependencies (lambda (K1473@ls) (if (null? K1473@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! K1406@find-library-by (lambda (K1475@pred) ((letrec ((K1477@f (lambda (K1479@ls) (if (null? K1479@ls) '#f (if (K1475@pred (car K1479@ls)) (car K1479@ls) (K1477@f (cdr K1479@ls))))))) K1477@f) ((K1329@current-library-collection))))) (set! K1408@library-path (K1161@K939@make-parameter '(".") (lambda (K1481@x) (if (and (list? K1481@x) (for-all string? K1481@x)) (map (lambda (K1483@x) K1483@x) K1481@x) (assertion-violation 'library-path '"not a list of strings" K1481@x))))) (set! K1410@library-extensions (K1161@K939@make-parameter '(".sls" ".ss" ".scm") (lambda (K1485@x) (if (and (list? K1485@x) (for-all string? K1485@x)) (map (lambda (K1487@x) K1487@x) K1485@x) (assertion-violation 'library-extensions '"not a list of strings" K1485@x))))) (set! K1412@library-name->file-name (lambda (K1489@x) (call-with-values (lambda () (open-string-output-port)) (lambda (K1493@K1491@p K1494@K1492@extract) ((lambda (K1497@extract K1498@p) ((lambda (K1502@display-hex) (begin (set! K1502@display-hex (lambda (K1511@n) (if (<= '0 K1511@n '9) (display K1511@n K1498@p) (display (integer->char (+ (char->integer '#\a) (- K1511@n '10))) K1498@p)))) (begin ((letrec ((K1503@f (lambda (K1505@ls) (if (not (null? K1505@ls)) (begin (display '"/" K1498@p) (for-each (lambda (K1507@c) (if (or (char<=? '#\a K1507@c '#\z) (char<=? '#\A K1507@c '#\Z) (char<=? '#\0 K1507@c '#\9) (memv K1507@c '(#\- #\. #\_ #\~))) (display K1507@c K1498@p) (begin (display '"%" K1498@p) ((lambda (K1509@n) (begin (K1502@display-hex (quotient K1509@n '16)) (K1502@display-hex (remainder K1509@n '16)))) (char->integer K1507@c))))) (string->list (symbol->string (car K1505@ls)))) (K1503@f (cdr K1505@ls))) (void))))) K1503@f) K1489@x) (K1497@extract)))) '#f)) K1494@K1492@extract K1493@K1491@p))))) (set! K1414@file-locator (K1161@K939@make-parameter (lambda (K1513@x) ((lambda (K1515@str) ((letrec ((K1517@f (lambda (K1519@ls K1520@exts K1521@failed-list) (if (null? K1519@ls) ((lambda () ((lambda (K1533@K1528 K1535@K1530 K1537@K1529 K1540@K1527 K1542@make-library-resolution-condition K1544@K1525 K1546@K1526 K1548@library-resolution-condition? K1550@condition-library K1552@condition-files) (begin (set! K1533@K1528 (make-record-type-descriptor '&library-resolution K10069@K9384@&condition-rtd 'K1531 '#f '#f '#((immutable library) (immutable files)))) (set! K1535@K1530 '#f) (set! K1537@K1529 (make-record-constructor-descriptor K1533@K1528 K10070@K9386@&condition-rcd K1535@K1530)) (set! K1540@K1527 (record-predicate K1533@K1528)) (set! K1542@make-library-resolution-condition (record-constructor K1537@K1529)) (set! K1544@K1525 (record-accessor K1533@K1528 '0)) (set! K1546@K1526 (record-accessor K1533@K1528 '1)) (set! K1548@library-resolution-condition? (condition-predicate K1533@K1528)) (set! K1550@condition-library (condition-accessor K1533@K1528 K1544@K1525)) (set! K1552@condition-files (condition-accessor K1533@K1528 K1546@K1526)) (raise (condition (K10101@K9534@make-error) (K10135@K9624@make-who-condition 'expander) (K10075@K9467@make-message-condition '"cannot locate library in library-path") (K1542@make-library-resolution-condition K1513@x (reverse K1521@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? K1520@exts) (K1517@f (cdr K1519@ls) (K1410@library-extensions) K1521@failed-list) ((lambda (K1553@name) (if (file-exists? K1553@name) K1553@name (K1517@f K1519@ls (cdr K1520@exts) (cons K1553@name K1521@failed-list)))) (string-append (car K1519@ls) K1515@str (car K1520@exts)))))))) K1517@f) (K1408@library-path) (K1410@library-extensions) '())) (K1412@library-name->file-name K1513@x))) (lambda (K1555@f) (if (procedure? K1555@f) K1555@f (assertion-violation 'file-locator '"not a procedure" K1555@f))))) (set! K1416@serialize-all (lambda (K1557@serialize K1558@compile) ((lambda (K1562@library-desc) (begin (set! K1562@library-desc (lambda (K1565@x) (list (K1346@library-id K1565@x) (K1348@library-name K1565@x)))) (for-each (lambda (K1563@x) (if (K1372@library-source-file-name K1563@x) (K1557@serialize (K1372@library-source-file-name K1563@x) (list (K1346@library-id K1563@x) (K1348@library-name K1563@x) (K1350@library-version K1563@x) (map K1562@library-desc (K1352@library-imp* K1563@x)) (map K1562@library-desc (K1354@library-vis* K1563@x)) (map K1562@library-desc (K1356@library-inv* K1563@x)) (K1358@library-subst K1563@x) (K1360@library-env K1563@x) (K1558@compile (K1366@library-visit-code K1563@x)) (K1558@compile (K1368@library-invoke-code K1563@x)) (K1370@library-visible? K1563@x))) (void))) ((K1329@current-library-collection))))) '#f))) (set! K1418@current-precompiled-library-loader (K1161@K939@make-parameter (lambda (K1567@filename K1568@sk) '#f))) (set! K1420@try-load-from-file (lambda (K1571@filename) ((K1418@current-precompiled-library-loader) K1571@filename (lambda K1609 ((lambda (K1610) (if (= K1610 '11) (apply (lambda (K1573@id K1574@name K1575@ver K1576@imp* K1577@vis* K1578@inv* K1579@exp-subst K1580@exp-env K1581@visit-proc K1582@invoke-proc K1583@visible?) ((letrec ((K1595@f (lambda (K1597@deps) (if (null? K1597@deps) (begin (K1440@install-library K1573@id K1574@name K1575@ver K1576@imp* K1577@vis* K1578@inv* K1579@exp-subst K1580@exp-env K1581@visit-proc K1582@invoke-proc '#f '#f K1583@visible? '#f) '#t) ((lambda (K1599@d) ((lambda (K1601@label K1602@dname) ((lambda (K1605@l) (if (and (K1342@library? K1605@l) (eq? K1601@label (K1346@library-id K1605@l))) (K1595@f (cdr K1597@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" K1574@name K1602@dname K1571@filename K1605@l K1601@label (K1346@library-id K1605@l)) '#f))) (K1430@find-library-by-name K1602@dname))) (car K1599@d) (cadr K1599@d))) (car K1597@deps)))))) K1595@f) (append K1576@imp* K1577@vis* K1578@inv*))) K1609) (if (>= K1610 '0) (apply (lambda K1607@others '#f) K1609) (error 'apply '"invalid arg count")))) (length K1609)))))) (set! K1422@library-loader (K1161@K939@make-parameter (lambda (K1611@x) ((lambda (K1613@file-name) (if (not K1613@file-name) (assertion-violation '#f '"cannot file library" K1611@x) (or (K1420@try-load-from-file K1613@file-name) ((K1424@current-library-expander) (K1160@K937@read-library-source-file K1613@file-name) K1613@file-name (lambda (K1615@name) (if (not (fast-equal? K1615@name K1611@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (K1619@K1617@p K1620@K1618@e) ((lambda (K1623@e K1624@p) (begin (display '"expected to find library " K1624@p) (write K1611@x K1624@p) (display '" in file " K1624@p) (display K1613@file-name K1624@p) (display '", found " K1624@p) (write K1615@name K1624@p) (display '" instead" K1624@p) (K1623@e))) K1620@K1618@e K1619@K1617@p)))) (void))))))) ((K1414@file-locator) K1611@x))) (lambda (K1627@f) (if (procedure? K1627@f) K1627@f (assertion-violation 'library-locator '"not a procedure" K1627@f))))) (set! K1424@current-library-expander (K1161@K939@make-parameter (lambda (K1629@x) (assertion-violation 'library-expander '"not initialized")) (lambda (K1631@f) (if (procedure? K1631@f) K1631@f (assertion-violation 'library-expander '"not a procedure" K1631@f))))) (set! K1426@external-pending-libraries (K1161@K939@make-parameter '())) (set! K1428@find-external-library (lambda (K1633@name) (begin (if (member K1633@name (K1426@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" K1633@name) (void)) ((lambda (K1637@K1635@external-pending-libraries K1638@K1636@external-pending-libraries) ((lambda (K1641@swap) (dynamic-wind K1641@swap (lambda () (begin ((K1422@library-loader) K1633@name) (or (K1406@find-library-by (lambda (K1643@x) (fast-equal? (K1348@library-name K1643@x) K1633@name))) (assertion-violation '#f '"handling external library did not yield the correct library" K1633@name)))) K1641@swap)) (lambda () ((lambda (K1645@t) (begin (K1637@K1635@external-pending-libraries K1638@K1636@external-pending-libraries) (set! K1638@K1636@external-pending-libraries K1645@t))) (K1637@K1635@external-pending-libraries))))) K1426@external-pending-libraries (cons K1633@name (K1426@external-pending-libraries)))))) (set! K1430@find-library-by-name (lambda (K1647@name) (or (K1406@find-library-by (lambda (K1649@x) (fast-equal? (K1348@library-name K1649@x) K1647@name))) (K1428@find-external-library K1647@name)))) (set! K1432@library-exists? (lambda (K1651@name) (and (K1406@find-library-by (lambda (K1653@x) (fast-equal? (K1348@library-name K1653@x) K1651@name))) '#t))) (set! K1434@find-library-by-spec/die (lambda (K1655@spec) ((lambda (K1657@id) (or (K1406@find-library-by (lambda (K1659@x) (eq? K1657@id (K1346@library-id K1659@x)))) (assertion-violation '#f '"cannot find library with required spec" K1655@spec))) (car K1655@spec)))) (set! K1436@label->binding-table (make-eq-hashtable)) (set! K1438@install-library-record (lambda (K1661@lib) (begin ((lambda (K1663@exp-env) (for-each (lambda (K1665@x) ((lambda (K1667@label K1668@binding) ((lambda (K1671@binding) (begin (if (hashtable-ref K1436@label->binding-table K1667@label '#f) (begin (if (string=? (symbol->string K1667@label) '"G4706") (format (current-error-port) '"symbol= eq? ~a\n" (eq? K1667@label 'G4706)) (void)) (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" K1667@label (hashtable-ref K1436@label->binding-table K1667@label '#f) K1671@binding)) (void)) (hashtable-set! K1436@label->binding-table K1667@label K1671@binding))) ((lambda (K1673@t) (if (memv K1673@t '(global)) (cons 'global (cons K1661@lib (cdr K1668@binding))) (if (memv K1673@t '(global-macro)) (cons 'global-macro (cons K1661@lib (cdr K1668@binding))) (if (memv K1673@t '(global-macro!)) (cons 'global-macro! (cons K1661@lib (cdr K1668@binding))) K1668@binding)))) (car K1668@binding)))) (car K1665@x) (cdr K1665@x))) K1663@exp-env)) (K1360@library-env K1661@lib)) ((K1329@current-library-collection) K1661@lib)))) (set! K1440@install-library (lambda (K1675@id K1676@name K1677@ver K1678@imp* K1679@vis* K1680@inv* K1681@exp-subst K1682@exp-env K1683@visit-proc K1684@invoke-proc K1685@visit-code K1686@invoke-code K1687@visible? K1688@source-file-name) ((lambda (K1703@imp-lib* K1704@vis-lib* K1705@inv-lib*) (begin (if (not (and (symbol? K1675@id) (list? K1676@name) (list? K1677@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" K1675@id K1676@name K1677@ver) (void)) (if (K1432@library-exists? K1676@name) (assertion-violation 'install-library '"library is already installed" K1676@name) (void)) ((lambda (K1709@lib) (K1438@install-library-record K1709@lib)) (K1344@make-library K1675@id K1676@name K1677@ver K1703@imp-lib* K1704@vis-lib* K1705@inv-lib* K1681@exp-subst K1682@exp-env K1683@visit-proc K1684@invoke-proc K1685@visit-code K1686@invoke-code K1687@visible? K1688@source-file-name)))) (map K1434@find-library-by-spec/die K1678@imp*) (map K1434@find-library-by-spec/die K1679@vis*) (map K1434@find-library-by-spec/die K1680@inv*)))) (set! K1442@imported-label->binding (lambda (K1711@lab) (hashtable-ref K1436@label->binding-table K1711@lab '#f))) (set! K1444@invoke-library (lambda (K1713@lib) ((lambda (K1715@invoke) (if (procedure? K1715@invoke) (begin (K1392@set-library-invoke-state! K1713@lib (lambda () (assertion-violation 'invoke '"circularity detected" K1713@lib))) (for-each K1444@invoke-library (K1356@library-inv* K1713@lib)) (K1392@set-library-invoke-state! K1713@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" K1713@lib))) (K1715@invoke) (K1392@set-library-invoke-state! K1713@lib '#t)) (void))) (K1364@library-invoke-state K1713@lib)))) (set! K1446@visit-library (lambda (K1717@lib) ((lambda (K1719@visit) (if (procedure? K1719@visit) (begin (K1390@set-library-visit-state! K1717@lib (lambda () (assertion-violation 'visit '"circularity detected" K1717@lib))) (for-each K1444@invoke-library (K1354@library-vis* K1717@lib)) (K1390@set-library-visit-state! K1717@lib (lambda () (assertion-violation 'invoke '"first visit did not return" K1717@lib))) (K1719@visit) (K1390@set-library-visit-state! K1717@lib '#t)) (void))) (K1362@library-visit-state K1717@lib)))) (set! K1448@invoke-library-by-spec (lambda (K1721@spec) (K1444@invoke-library (K1434@find-library-by-spec/die K1721@spec)))) (set! K1450@installed-libraries (lambda K1729 ((lambda (K1730) (if (= K1730 '1) (apply (lambda (K1723@all?) ((letrec ((K1725@f (lambda (K1727@ls) (if (null? K1727@ls) '() (if (or K1723@all? (K1370@library-visible? (car K1727@ls))) (cons (car K1727@ls) (K1725@f (cdr K1727@ls))) (K1725@f (cdr K1727@ls))))))) K1725@f) ((K1329@current-library-collection)))) K1729) (if (= K1730 '0) (apply (lambda () (K1450@installed-libraries '#f)) K1729) (error 'apply '"invalid arg count")))) (length K1729)))) (set! K1452@library-spec (lambda (K1731@x) (begin (if (not (K1342@library? K1731@x)) (assertion-violation 'library-spec '"not a library" K1731@x) (void)) (list (K1346@library-id K1731@x) (K1348@library-name K1731@x) (K1350@library-version K1731@x))))) (begin (set! K1793@K1452@library-spec K1452@library-spec) (set! K1792@K1450@installed-libraries K1450@installed-libraries) (set! K1791@K1448@invoke-library-by-spec K1448@invoke-library-by-spec) (set! K1790@K1446@visit-library K1446@visit-library) (set! K1789@K1444@invoke-library K1444@invoke-library) (set! K1788@K1442@imported-label->binding K1442@imported-label->binding) (set! K1787@K1440@install-library K1440@install-library) (set! K1786@K1438@install-library-record K1438@install-library-record) (set! K1785@K1436@label->binding-table K1436@label->binding-table) (set! K1784@K1434@find-library-by-spec/die K1434@find-library-by-spec/die) (set! K1783@K1432@library-exists? K1432@library-exists?) (set! K1782@K1430@find-library-by-name K1430@find-library-by-name) (set! K1781@K1428@find-external-library K1428@find-external-library) (set! K1780@K1426@external-pending-libraries K1426@external-pending-libraries) (set! K1779@K1424@current-library-expander K1424@current-library-expander) (set! K1778@K1422@library-loader K1422@library-loader) (set! K1777@K1420@try-load-from-file K1420@try-load-from-file) (set! K1776@K1418@current-precompiled-library-loader K1418@current-precompiled-library-loader) (set! K1775@K1416@serialize-all K1416@serialize-all) (set! K1774@K1414@file-locator K1414@file-locator) (set! K1773@K1412@library-name->file-name K1412@library-name->file-name) (set! K1772@K1410@library-extensions K1410@library-extensions) (set! K1771@K1408@library-path K1408@library-path) (set! K1770@K1406@find-library-by K1406@find-library-by) (set! K1769@K1404@find-dependencies K1404@find-dependencies) (set! K1768@K1402@rp K1402@rp) (set! K1767@K1400@set-library-source-file-name! K1400@set-library-source-file-name!) (set! K1766@K1398@set-library-visible?! K1398@set-library-visible?!) (set! K1765@K1396@set-library-invoke-code! K1396@set-library-invoke-code!) (set! K1764@K1394@set-library-visit-code! K1394@set-library-visit-code!) (set! K1763@K1392@set-library-invoke-state! K1392@set-library-invoke-state!) (set! K1762@K1390@set-library-visit-state! K1390@set-library-visit-state!) (set! K1761@K1388@set-library-env! K1388@set-library-env!) (set! K1760@K1386@set-library-subst! K1386@set-library-subst!) (set! K1759@K1384@set-library-inv*! K1384@set-library-inv*!) (set! K1758@K1382@set-library-vis*! K1382@set-library-vis*!) (set! K1757@K1380@set-library-imp*! K1380@set-library-imp*!) (set! K1756@K1378@set-library-version! K1378@set-library-version!) (set! K1755@K1376@set-library-name! K1376@set-library-name!) (set! K1754@K1374@set-library-id! K1374@set-library-id!) (set! K1753@K1372@library-source-file-name K1372@library-source-file-name) (set! K1752@K1370@library-visible? K1370@library-visible?) (set! K1751@K1368@library-invoke-code K1368@library-invoke-code) (set! K1750@K1366@library-visit-code K1366@library-visit-code) (set! K1749@K1364@library-invoke-state K1364@library-invoke-state) (set! K1748@K1362@library-visit-state K1362@library-visit-state) (set! K1747@K1360@library-env K1360@library-env) (set! K1746@K1358@library-subst K1358@library-subst) (set! K1745@K1356@library-inv* K1356@library-inv*) (set! K1744@K1354@library-vis* K1354@library-vis*) (set! K1743@K1352@library-imp* K1352@library-imp*) (set! K1742@K1350@library-version K1350@library-version) (set! K1741@K1348@library-name K1348@library-name) (set! K1740@K1346@library-id K1346@library-id) (set! K1739@K1344@make-library K1344@make-library) (set! K1738@K1342@library? K1342@library?) (set! K1737@K1339@K1331 K1339@K1331) (set! K1736@K1337@K1332 K1337@K1332) (set! K1735@K1335@K1330 K1335@K1330) (set! K1734@K1329@current-library-collection K1329@current-library-collection) (set! K1733@K1327@make-collection K1327@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (K1796@build-global-define K1909@build-lambda K1911@build-case-lambda K1913@build-let K1959@build-sequence K1961@build-void K1963@build-letrec K1965@build-letrec* K1967@build-library-letrec* K1969@build-receive) (begin (set! K1796@build-global-define (lambda (K1970@x) (K1961@build-void))) (set! K1909@build-lambda (lambda (K1972@ae K1973@vars K1974@exp) (list 'lambda K1973@vars K1974@exp))) (set! K1911@build-case-lambda (lambda (K1978@ae K1979@vars* K1980@exp*) ((lambda (K1985@build-error K1987@build-pred K1989@build-apply K1991@expand-case-lambda) (begin (set! K1985@build-error (lambda (K2038@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! K1987@build-pred (lambda (K2016@ae K2017@n K2018@vars) (call-with-values (lambda () ((letrec ((K2024@f (lambda (K2026@vars K2027@count) (if (pair? K2026@vars) (K2024@f (cdr K2026@vars) (+ K2027@count '1)) (if (null? K2026@vars) (values K2027@count '=) (values K2027@count '>=)))))) K2024@f) K2018@vars '0)) (lambda (K2030@K2022@count K2031@K2023@pred) ((lambda (K2034@pred K2035@count) (list (list 'primitive K2034@pred) K2017@n (list 'quote K2035@count))) K2031@K2023@pred K2030@K2022@count))))) (set! K1989@build-apply (lambda (K2008@ae K2009@g K2010@vars K2011@exp) (list '(primitive apply) (K1909@build-lambda K2008@ae K2010@vars K2011@exp) K2009@g))) (set! K1991@expand-case-lambda (lambda (K1992@ae K1993@vars K1994@exp*) ((lambda (K1998@g K1999@n) (list 'lambda K1998@g (K1913@build-let K1992@ae (list K1999@n) (list (list '(primitive length) K1998@g)) ((letrec ((K2002@f (lambda (K2004@vars* K2005@exp*) (if (null? K2004@vars*) (K1985@build-error K1992@ae) (list 'if (K1987@build-pred K1992@ae K1999@n (car K2004@vars*)) (K1989@build-apply K1992@ae K1998@g (car K2004@vars*) (car K2005@exp*)) (K2002@f (cdr K2004@vars*) (cdr K2005@exp*))))))) K2002@f) K1979@vars* K1994@exp*)))) (K1147@K911@gensym) (K1147@K911@gensym)))) (if (= (length K1980@exp*) '1) (K1909@build-lambda K1978@ae (car K1979@vars*) (car K1980@exp*)) (K1991@expand-case-lambda K1978@ae K1979@vars* K1980@exp*)))) '#f '#f '#f '#f))) (set! K1913@build-let (lambda (K2040@ae K2041@lhs* K2042@rhs* K2043@body) (cons (K1909@build-lambda K2040@ae K2041@lhs* K2043@body) K2042@rhs*))) (set! K1959@build-sequence (lambda (K2048@ae K2049@exps) ((letrec ((K2052@loop (lambda (K2054@exps) (if (null? (cdr K2054@exps)) (car K2054@exps) (if (equal? (car K2054@exps) (K1961@build-void)) (K2052@loop (cdr K2054@exps)) (cons 'begin K2054@exps)))))) K2052@loop) K2049@exps))) (set! K1961@build-void (lambda () '((primitive void)))) (set! K1963@build-letrec (lambda (K2056@ae K2057@vars K2058@val-exps K2059@body-exp) (if (null? K2057@vars) K2059@body-exp (list 'letrec (map list K2057@vars K2058@val-exps) K2059@body-exp)))) (set! K1965@build-letrec* (lambda (K2064@ae K2065@vars K2066@val-exps K2067@body-exp) (if (null? K2065@vars) K2067@body-exp (K1913@build-let K2064@ae K2065@vars (map (lambda (K2072@x) (list 'quote '#f)) K2065@vars) (K1959@build-sequence K2064@ae (append (map (lambda (K2074@lhs K2075@rhs) (list 'set! K2074@lhs K2075@rhs)) K2065@vars K2066@val-exps) (list K2067@body-exp))))))) (set! K1967@build-library-letrec* (lambda (K2078@ae K2079@name K2080@vars K2081@locs K2082@val-exps K2083@body-exp) (list 'library-letrec* K2079@name (map list K2080@vars K2081@locs K2082@val-exps) K2083@body-exp))) (set! K1969@build-receive (lambda (K2090@ae K2091@vars K2092@producer K2093@body*) (begin (display '"************** in ") (cons 'receive (cons K2091@vars (cons K2092@producer K2093@body*)))))) (begin (set! K2107@K1969@build-receive K1969@build-receive) (set! K2106@K1967@build-library-letrec* K1967@build-library-letrec*) (set! K2105@K1965@build-letrec* K1965@build-letrec*) (set! K2104@K1963@build-letrec K1963@build-letrec) (set! K2103@K1961@build-void K1961@build-void) (set! K2102@K1959@build-sequence K1959@build-sequence) (set! K2101@K1913@build-let K1913@build-let) (set! K2100@K1911@build-case-lambda K1911@build-case-lambda) (set! K2099@K1909@build-lambda K1909@build-lambda) (set! K2098@K1796@build-global-define K1796@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (K2122@set-cons K2124@set-union K2129@top-mark* K2131@top-marked? K2133@gen-lexical K2135@gen-global K2137@gen-label K2139@gen-top-level-label K2141@gen-define-label+loc K2143@gen-define-label K2149@K2144 K2151@K2146 K2153@K2145 K2156@rib? K2158@make-rib K2160@rib-sym* K2162@rib-mark** K2164@rib-label* K2166@rib-sealed/freq K2168@rib-cache K2170@set-rib-sym*! K2172@set-rib-mark**! K2174@set-rib-label*! K2176@set-rib-sealed/freq! K2178@set-rib-cache! K2180@make-empty-rib K2182@extend-rib! K2184@extend-rib/nc! K2186@make-rib-map K2188@seal-rib! K2190@unseal-rib! K2192@make-full-rib K2198@K2193 K2200@K2195 K2202@K2194 K2205@stx? K2207@make-stx K2209@stx-expr K2211@stx-mark* K2213@stx-subst* K2215@stx-ae* K2217@set-stx-expr! K2219@set-stx-mark*! K2221@set-stx-subst*! K2223@set-stx-ae*! K2225@rp K2227@datum->stx K2229@gen-mark K2231@anti-mark K2233@anti-mark? K2235@join-wraps K2237@mkstx K2239@add-mark K2241@add-subst K2243@syntax-kind? K2245@syntax-vector->list K2247@syntax-pair? K2249@syntax-vector? K2251@syntax-null? K2253@syntax-list? K2255@syntax-car K2257@syntax-cdr K2259@syntax->list K2261@id? K2263@id->sym K2265@same-marks? K2267@bound-id=? K2269@free-id=? K2271@valid-bound-ids? K2273@distinct-bound-ids? K2275@bound-id-member? K2277@self-evaluating? K2279@strip-annotations K2281@strip K2283@stx->datum K2285@same-marks*? K2287@id->label K2289@id->real-label K2291@label->binding K2293@make-binding K2295@binding-type K2297@binding-value K2299@raise-unbound-error K2301@syntax-type K2315@sanitize-binding K2317@make-variable-transformer K2319@variable-transformer? K2321@variable-transformer-procedure K2323@make-eval-transformer K2634@parse-define K2636@parse-define-syntax K2638@scheme-stx-hashtable K2640@scheme-stx K2642@lexical-var K2644@lexical-mutable? K2646@set-lexical-mutable! K2648@add-lexical K2650@add-lexicals K2652@letrec-helper K2654@letrec-transformer K2656@letrec*-transformer K2658@fluid-let-syntax-transformer K2660@type-descriptor-transformer K2662@record-type-descriptor-transformer K2664@record-constructor-descriptor-transformer K2666@when-macro K2668@unless-macro K2670@if-transformer K2672@and-transformer K2674@or-transformer K2676@case-macro K2678@quote-transformer K2680@case-lambda-transformer K2682@lambda-transformer K2684@bless K2686@with-syntax-macro K2688@invalid-fmls-error K2690@let-macro K2692@let-values-macro K2694@let*-values-macro K2696@trace-lambda-macro K2698@trace-define-macro K2700@trace-define-syntax-macro K2702@trace-let/rec-syntax K2704@trace-let-syntax-macro K2706@trace-letrec-syntax-macro K2708@guard-macro K2710@define-enumeration-macro K2712@time-macro K2714@delay-macro K2716@assert-macro K2718@endianness-macro K2720@identifier-syntax-macro K2722@do-macro K2724@let*-macro K2726@or-macro K2728@and-macro K2730@cond-macro K2732@do-include K2734@include-macro K2736@include-into-macro K2738@syntax-rules-macro K2740@quasiquote-macro K2742@quasisyntax-macro K2744@define-struct-macro K2746@define-record-type-macro K2748@define-condition-type-macro K2750@incorrect-usage-macro K2752@parameterize-macro K2754@foreign-call-transformer K2756@convert-pattern K2758@syntax-dispatch K2760@ellipsis? K2762@underscore? K2764@verify-literals K2766@syntax-case-transformer K2768@ellipsis-map K2770@syntax-transformer K2772@core-macro-transformer K2774@file-options-macro K2776@symbol-macro K2778@macro-transformer K2780@local-macro-transformer K2782@do-macro-call K2784@chi-macro K2786@chi-local-macro K2788@chi-global-macro K2790@chi-expr* K2792@chi-application K2794@chi-expr K2796@chi-set! K2798@verify-formals K2800@chi-lambda-clause K2802@chi-lambda-clause* K2804@chi-defun K2806@chi-rhs K2808@expand-interaction-rhs*/init* K2810@chi-rhs* K2812@find-bound=? K2814@find-dups K2816@chi-internal K2818@parse-module K2824@K2819 K2826@K2821 K2828@K2820 K2831@module-interface? K2833@make-module-interface K2835@module-interface-first-mark K2837@module-interface-exp-id-vec K2839@module-interface-exp-lab-vec K2841@set-module-interface-first-mark! K2843@set-module-interface-exp-id-vec! K2845@set-module-interface-exp-lab-vec! K2847@module-interface-exp-id* K2849@chi-internal-module K2851@chi-body* K2853@expand-transformer K2855@parse-exports K2857@parse-library-name K2859@parse-library K2861@parse-import-spec* K2863@make-top-rib K2865@make-collector K2867@inv-collector K2869@vis-collector K2871@imp-collector K2873@chi-library-internal K2875@chi-interaction-expr K2877@library-body-expander K2879@core-library-expander K2881@parse-top-level-program K2883@top-level-expander K2889@K2884 K2891@K2886 K2893@K2885 K2896@env? K2898@make-env K2900@env-names K2902@env-labels K2904@env-itc K2906@set-env-names! K2908@set-env-labels! K2910@set-env-itc! K2912@rp K2918@K2913 K2920@K2915 K2922@K2914 K2925@interaction-env? K2927@make-interaction-env K2929@interaction-env-rib K2931@interaction-env-r K2933@interaction-env-locs K2935@set-interaction-env-rib! K2937@set-interaction-env-r! K2939@set-interaction-env-locs! K2941@rp K2943@interaction-environment-symbols K2945@environment-bindings K2947@parse-binding K2949@environment? K2951@environment-symbols K2953@environment K2955@null-environment K2957@scheme-report-environment K2959@expand K2961@eval K2963@library-expander K2965@boot-library-expand K2967@rev-map-append K2969@build-exports K2971@make-export-subst K2973@make-export-env/macros K2975@generate-temporaries K2977@free-identifier=? K2979@bound-identifier=? K2981@make-source-condition K2983@extract-position-condition K2985@expression-position K2987@assertion-error K2989@syntax-error K2991@syntax-violation* K2993@syntax-violation K2995@identifier? K2997@datum->syntax K2999@syntax->datum K3001@compile-r6rs-top-level K3003@pre-compile-r6rs-top-level K3005@interaction-environment K3007@top-level-context) (begin (set! K2122@set-cons (lambda (K3008@x K3009@ls) (if (memq K3008@x K3009@ls) K3009@ls (cons K3008@x K3009@ls)))) (set! K2124@set-union (lambda (K3012@ls1 K3013@ls2) (if (null? K3012@ls1) K3013@ls2 (if (memq (car K3012@ls1) K3013@ls2) (K2124@set-union (cdr K3012@ls1) K3013@ls2) (cons (car K3012@ls1) (K2124@set-union (cdr K3012@ls1) K3013@ls2)))))) (set! K2129@top-mark* '(top)) (set! K2131@top-marked? (lambda (K3016@m*) (memq 'top K3016@m*))) (set! K2133@gen-lexical (lambda (K3018@sym) (if (symbol? K3018@sym) (K1147@K911@gensym K3018@sym) (if (K2205@stx? K3018@sym) (K2133@gen-lexical (K2263@id->sym K3018@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" K3018@sym))))) (set! K2135@gen-global (lambda (K3020@x) (K2133@gen-lexical K3020@x))) (set! K2137@gen-label (lambda (K3022@_) (K1147@K911@gensym))) (set! K2139@gen-top-level-label (lambda (K3024@id K3025@rib) ((lambda (K3029@find) (begin (set! K3029@find (lambda (K3040@sym K3041@mark* K3042@sym* K3043@mark** K3044@label*) (and (pair? K3042@sym*) (if (and (eq? K3040@sym (car K3042@sym*)) (K2265@same-marks? K3041@mark* (car K3043@mark**))) (car K3044@label*) (K3029@find K3040@sym K3041@mark* (cdr K3042@sym*) (cdr K3043@mark**) (cdr K3044@label*)))))) ((lambda (K3030@sym K3031@mark*) ((lambda (K3034@sym*) ((lambda (K3036@t) (if K3036@t ((lambda (K3038@label) (if (K1788@K1442@imported-label->binding K3038@label) (K1147@K911@gensym) K3038@label)) K3036@t) (K1147@K911@gensym))) (and (memq K3030@sym (K2160@rib-sym* K3025@rib)) (K3029@find K3030@sym K3031@mark* K3034@sym* (K2162@rib-mark** K3025@rib) (K2164@rib-label* K3025@rib))))) (K2160@rib-sym* K3025@rib))) (K2263@id->sym K3024@id) (K2211@stx-mark* K3024@id)))) '#f))) (set! K2141@gen-define-label+loc (lambda (K3050@id K3051@rib) ((lambda (K3054@t) (if K3054@t ((lambda (K3056@env) ((lambda (K3058@label K3059@locs) (values K3058@label ((lambda (K3062@t) (if K3062@t (cdr K3062@t) ((lambda (K3064@loc) (begin (K2939@set-interaction-env-locs! K3056@env (cons (cons K3058@label K3064@loc) K3059@locs)) K3064@loc)) (K2133@gen-lexical K3050@id)))) (assq K3058@label K3059@locs)))) (K2139@gen-top-level-label K3050@id K3051@rib) (K2933@interaction-env-locs K3056@env))) K3054@t) (values (K1147@K911@gensym) (K2133@gen-lexical K3050@id)))) (K3007@top-level-context)))) (set! K2143@gen-define-label (lambda (K3066@id K3067@rib) (if (K3007@top-level-context) (K2139@gen-top-level-label K3066@id K3067@rib) (K1147@K911@gensym)))) (set! K2149@K2144 (make-record-type-descriptor 'rib '#f 'K2147 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! K2151@K2146 '#f) (set! K2153@K2145 (make-record-constructor-descriptor K2149@K2144 '#f K2151@K2146)) (set! K2156@rib? (record-predicate K2149@K2144)) (set! K2158@make-rib (record-constructor K2153@K2145)) (set! K2160@rib-sym* (record-accessor K2149@K2144 '0)) (set! K2162@rib-mark** (record-accessor K2149@K2144 '1)) (set! K2164@rib-label* (record-accessor K2149@K2144 '2)) (set! K2166@rib-sealed/freq (record-accessor K2149@K2144 '3)) (set! K2168@rib-cache (record-accessor K2149@K2144 '4)) (set! K2170@set-rib-sym*! (record-mutator K2149@K2144 '0)) (set! K2172@set-rib-mark**! (record-mutator K2149@K2144 '1)) (set! K2174@set-rib-label*! (record-mutator K2149@K2144 '2)) (set! K2176@set-rib-sealed/freq! (record-mutator K2149@K2144 '3)) (set! K2178@set-rib-cache! (record-mutator K2149@K2144 '4)) (set! K2180@make-empty-rib (lambda () (K2158@make-rib '() '() '() '#f '#f))) (set! K2182@extend-rib! (lambda (K3070@rib K3071@id K3072@label) ((lambda (K3077@find) (begin (set! K3077@find (lambda (K3090@sym K3091@mark* K3092@sym* K3093@mark** K3094@label*) (and (pair? K3092@sym*) (if (and (eq? K3090@sym (car K3092@sym*)) (K2265@same-marks? K3091@mark* (car K3093@mark**))) K3094@label* (K3077@find K3090@sym K3091@mark* (cdr K3092@sym*) (cdr K3093@mark**) (cdr K3094@label*)))))) (begin (if (K2166@rib-sealed/freq K3070@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" K3070@rib) (void)) ((lambda (K3078@sym K3079@mark*) ((lambda (K3082@sym*) ((lambda (K3084@t) (if K3084@t ((lambda (K3086@p) (if (not (eq? K3072@label (car K3086@p))) (if (K3007@top-level-context) (set-car! K3086@p K3072@label) (K2993@syntax-violation '#f '"multiple definitions of identifier" K3071@id)) (void))) K3084@t) (begin (if (K2168@rib-cache K3070@rib) (hashtable-update! (K2168@rib-cache K3070@rib) K3078@sym (lambda (K3088@e) (cons (cons K3079@mark* K3072@label) K3088@e)) '()) (void)) (K2170@set-rib-sym*! K3070@rib (cons K3078@sym K3082@sym*)) (K2172@set-rib-mark**! K3070@rib (cons K3079@mark* (K2162@rib-mark** K3070@rib))) (K2174@set-rib-label*! K3070@rib (cons K3072@label (K2164@rib-label* K3070@rib)))))) (and (memq K3078@sym (K2160@rib-sym* K3070@rib)) (K3077@find K3078@sym K3079@mark* K3082@sym* (K2162@rib-mark** K3070@rib) (K2164@rib-label* K3070@rib))))) (K2160@rib-sym* K3070@rib))) (K2263@id->sym K3071@id) (K2211@stx-mark* K3071@id))))) '#f))) (set! K2184@extend-rib/nc! (lambda (K3100@rib K3101@id K3102@label) ((lambda (K3106@sym K3107@mark*) ((lambda (K3110@sym*) (begin (if (K2168@rib-cache K3100@rib) (hashtable-update! (K2168@rib-cache K3100@rib) K3106@sym (lambda (K3112@e) (cons (cons K3107@mark* K3102@label) K3112@e)) '()) (void)) (K2170@set-rib-sym*! K3100@rib (cons K3106@sym K3110@sym*)) (K2172@set-rib-mark**! K3100@rib (cons K3107@mark* (K2162@rib-mark** K3100@rib))) (K2174@set-rib-label*! K3100@rib (cons K3102@label (K2164@rib-label* K3100@rib))))) (K2160@rib-sym* K3100@rib))) (K2263@id->sym K3101@id) (K2211@stx-mark* K3101@id)))) (set! K2186@make-rib-map (lambda (K3114@sym*) ((lambda (K3116@ht) ((letrec ((K3118@f (lambda (K3120@i K3121@sym*) (if (null? K3121@sym*) K3116@ht (begin (hashtable-update! K3116@ht (car K3121@sym*) (lambda (K3124@x) (cons K3120@i K3124@x)) '()) (K3118@f (+ K3120@i '1) (cdr K3121@sym*))))))) K3118@f) '0 K3114@sym*)) (make-eq-hashtable)))) (set! K2188@seal-rib! (lambda (K3126@rib) ((lambda (K3128@sym*) (if (not (null? K3128@sym*)) (begin (K2170@set-rib-sym*! K3126@rib (list->vector K3128@sym*)) (K2172@set-rib-mark**! K3126@rib (list->vector (K2162@rib-mark** K3126@rib))) (K2174@set-rib-label*! K3126@rib (list->vector (K2164@rib-label* K3126@rib))) (K2176@set-rib-sealed/freq! K3126@rib (K2186@make-rib-map K3128@sym*))) (void))) (K2160@rib-sym* K3126@rib)))) (set! K2190@unseal-rib! (lambda (K3130@rib) (if (K2166@rib-sealed/freq K3130@rib) (begin (K2176@set-rib-sealed/freq! K3130@rib '#f) (K2170@set-rib-sym*! K3130@rib (vector->list (K2160@rib-sym* K3130@rib))) (K2172@set-rib-mark**! K3130@rib (vector->list (K2162@rib-mark** K3130@rib))) (K2174@set-rib-label*! K3130@rib (vector->list (K2164@rib-label* K3130@rib)))) (void)))) (set! K2192@make-full-rib (lambda (K3132@id* K3133@label*) ((lambda (K3136@r) (begin (K2188@seal-rib! K3136@r) K3136@r)) (K2158@make-rib (map K2263@id->sym K3132@id*) (map K2211@stx-mark* K3132@id*) K3133@label* '#f '#f)))) (set! K2198@K2193 (make-record-type-descriptor 'stx '#f 'K2196 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! K2200@K2195 '#f) (set! K2202@K2194 (make-record-constructor-descriptor K2198@K2193 '#f K2200@K2195)) (set! K2205@stx? (record-predicate K2198@K2193)) (set! K2207@make-stx (record-constructor K2202@K2194)) (set! K2209@stx-expr (record-accessor K2198@K2193 '0)) (set! K2211@stx-mark* (record-accessor K2198@K2193 '1)) (set! K2213@stx-subst* (record-accessor K2198@K2193 '2)) (set! K2215@stx-ae* (record-accessor K2198@K2193 '3)) (set! K2217@set-stx-expr! (record-mutator K2198@K2193 '0)) (set! K2219@set-stx-mark*! (record-mutator K2198@K2193 '1)) (set! K2221@set-stx-subst*! (record-mutator K2198@K2193 '2)) (set! K2223@set-stx-ae*! (record-mutator K2198@K2193 '3)) (set! K2225@rp (K1158@K933@make-record-printer 'stx (lambda (K3138@x K3139@p K3140@wr) (begin (display '"#<syntax " K3139@p) (write (K2283@stx->datum K3138@x) K3139@p) ((lambda (K3144@expr) (if (K1150@K917@annotation? K3144@expr) ((lambda (K3146@src) (if (pair? K3146@src) (begin (display '" [" K3139@p) (display (cdr K3146@src) K3139@p) (display '" of " K3139@p) (display (car K3146@src) K3139@p) (display '"]" K3139@p)) (void))) (K1151@K919@annotation-source K3144@expr)) (void))) (K2209@stx-expr K3138@x)) (display '">" K3139@p))))) (set! K2227@datum->stx (lambda (K3148@id K3149@datum) (K2207@make-stx K3149@datum (K2211@stx-mark* K3148@id) (K2213@stx-subst* K3148@id) (K2215@stx-ae* K3148@id)))) (set! K2229@gen-mark (lambda () (string '#\m))) (set! K2231@anti-mark '#f) (set! K2233@anti-mark? not) (set! K2235@join-wraps (lambda (K3152@m1* K3153@s1* K3154@ae1* K3155@e) ((lambda (K3161@cancel) (begin (set! K3161@cancel (lambda (K3168@ls1 K3169@ls2) ((letrec ((K3172@f (lambda (K3174@x K3175@ls1) (if (null? K3175@ls1) (cdr K3169@ls2) (cons K3174@x (K3172@f (car K3175@ls1) (cdr K3175@ls1))))))) K3172@f) (car K3168@ls1) (cdr K3168@ls1)))) ((lambda (K3162@m2* K3163@s2* K3164@ae2*) (if (and (not (null? K3152@m1*)) (not (null? K3162@m2*)) (K2233@anti-mark? (car K3162@m2*))) (values (K3161@cancel K3152@m1* K3162@m2*) (K3161@cancel K3153@s1* K3163@s2*) (K3161@cancel K3154@ae1* K3164@ae2*)) (values (append K3152@m1* K3162@m2*) (append K3153@s1* K3163@s2*) (append K3154@ae1* K3164@ae2*)))) (K2211@stx-mark* K3155@e) (K2213@stx-subst* K3155@e) (K2215@stx-ae* K3155@e)))) '#f))) (set! K2237@mkstx (lambda (K3178@e K3179@m* K3180@s* K3181@ae*) (if (and (K2205@stx? K3178@e) (not (K2131@top-marked? K3179@m*))) (call-with-values (lambda () (K2235@join-wraps K3179@m* K3180@s* K3181@ae* K3178@e)) (lambda (K3189@K3186@m* K3190@K3187@s* K3191@K3188@ae*) ((lambda (K3195@ae* K3196@s* K3197@m*) (K2207@make-stx (K2209@stx-expr K3178@e) K3197@m* K3196@s* K3195@ae*)) K3191@K3188@ae* K3190@K3187@s* K3189@K3186@m*))) (K2207@make-stx K3178@e K3179@m* K3180@s* K3181@ae*)))) (set! K2239@add-mark (lambda (K3201@m K3202@e K3203@ae) (K2237@mkstx K3202@e (list K3201@m) '(shift) (list K3203@ae)))) (set! K2241@add-subst (lambda (K3207@subst K3208@e) (K2237@mkstx K3208@e '() (list K3207@subst) '()))) (set! K2243@syntax-kind? (lambda (K3211@x K3212@p?) (if (K2205@stx? K3211@x) (K2243@syntax-kind? (K2209@stx-expr K3211@x) K3212@p?) (if (K1150@K917@annotation? K3211@x) (K2243@syntax-kind? (K1152@K921@annotation-expression K3211@x) K3212@p?) (K3212@p? K3211@x))))) (set! K2245@syntax-vector->list (lambda (K3215@x) (if (K2205@stx? K3215@x) ((lambda (K3217@ls K3218@m* K3219@s* K3220@ae*) (map (lambda (K3225@x) (K2237@mkstx K3225@x K3218@m* K3219@s* K3220@ae*)) K3217@ls)) (K2245@syntax-vector->list (K2209@stx-expr K3215@x)) (K2211@stx-mark* K3215@x) (K2213@stx-subst* K3215@x) (K2215@stx-ae* K3215@x)) (if (K1150@K917@annotation? K3215@x) (K2245@syntax-vector->list (K1152@K921@annotation-expression K3215@x)) (if (vector? K3215@x) (vector->list K3215@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" K3215@x)))))) (set! K2247@syntax-pair? (lambda (K3227@x) (K2243@syntax-kind? K3227@x pair?))) (set! K2249@syntax-vector? (lambda (K3229@x) (K2243@syntax-kind? K3229@x vector?))) (set! K2251@syntax-null? (lambda (K3231@x) (K2243@syntax-kind? K3231@x null?))) (set! K2253@syntax-list? (lambda (K3233@x) (or (K2251@syntax-null? K3233@x) (and (K2247@syntax-pair? K3233@x) (K2253@syntax-list? (K2257@syntax-cdr K3233@x)))))) (set! K2255@syntax-car (lambda (K3235@x) (if (K2205@stx? K3235@x) (K2237@mkstx (K2255@syntax-car (K2209@stx-expr K3235@x)) (K2211@stx-mark* K3235@x) (K2213@stx-subst* K3235@x) (K2215@stx-ae* K3235@x)) (if (K1150@K917@annotation? K3235@x) (K2255@syntax-car (K1152@K921@annotation-expression K3235@x)) (if (pair? K3235@x) (car K3235@x) (assertion-violation 'syntax-car '"BUG: not a pair" K3235@x)))))) (set! K2257@syntax-cdr (lambda (K3237@x) (if (K2205@stx? K3237@x) (K2237@mkstx (K2257@syntax-cdr (K2209@stx-expr K3237@x)) (K2211@stx-mark* K3237@x) (K2213@stx-subst* K3237@x) (K2215@stx-ae* K3237@x)) (if (K1150@K917@annotation? K3237@x) (K2257@syntax-cdr (K1152@K921@annotation-expression K3237@x)) (if (pair? K3237@x) (cdr K3237@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" K3237@x)))))) (set! K2259@syntax->list (lambda (K3239@x) (if (K2247@syntax-pair? K3239@x) (cons (K2255@syntax-car K3239@x) (K2259@syntax->list (K2257@syntax-cdr K3239@x))) (if (K2251@syntax-null? K3239@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" K3239@x))))) (set! K2261@id? (lambda (K3241@x) (and (K2205@stx? K3241@x) ((lambda (K3243@expr) (symbol? (if (K1150@K917@annotation? K3243@expr) (K1149@K915@annotation-stripped K3243@expr) K3243@expr))) (K2209@stx-expr K3241@x))))) (set! K2263@id->sym (lambda (K3245@x) (begin (if (not (K2205@stx? K3245@x)) (error 'id->sym '"BUG in ikarus: not an id" K3245@x) (void)) ((lambda (K3247@expr) ((lambda (K3249@sym) (if (symbol? K3249@sym) K3249@sym (error 'id->sym '"BUG in ikarus: not an id" K3245@x))) (if (K1150@K917@annotation? K3247@expr) (K1149@K915@annotation-stripped K3247@expr) K3247@expr))) (K2209@stx-expr K3245@x))))) (set! K2265@same-marks? (lambda (K3251@x K3252@y) (or (and (null? K3251@x) (null? K3252@y)) (and (pair? K3251@x) (pair? K3252@y) (eq? (car K3251@x) (car K3252@y)) (K2265@same-marks? (cdr K3251@x) (cdr K3252@y)))))) (set! K2267@bound-id=? (lambda (K3255@x K3256@y) (and (eq? (K2263@id->sym K3255@x) (K2263@id->sym K3256@y)) (K2265@same-marks? (K2211@stx-mark* K3255@x) (K2211@stx-mark* K3256@y))))) (set! K2269@free-id=? (lambda (K3259@i K3260@j) ((lambda (K3263@t0 K3264@t1) (if (or K3263@t0 K3264@t1) (eq? K3263@t0 K3264@t1) (eq? (K2263@id->sym K3259@i) (K2263@id->sym K3260@j)))) (K2289@id->real-label K3259@i) (K2289@id->real-label K3260@j)))) (set! K2271@valid-bound-ids? (lambda (K3267@id*) (and (for-all K2261@id? K3267@id*) (K2273@distinct-bound-ids? K3267@id*)))) (set! K2273@distinct-bound-ids? (lambda (K3269@id*) (or (null? K3269@id*) (and (not (K2275@bound-id-member? (car K3269@id*) (cdr K3269@id*))) (K2273@distinct-bound-ids? (cdr K3269@id*)))))) (set! K2275@bound-id-member? (lambda (K3271@id K3272@id*) (and (pair? K3272@id*) (or (K2267@bound-id=? K3271@id (car K3272@id*)) (K2275@bound-id-member? K3271@id (cdr K3272@id*)))))) (set! K2277@self-evaluating? (lambda (K3275@x) (or (number? K3275@x) (string? K3275@x) (char? K3275@x) (boolean? K3275@x) (regexp? K3275@x) (bytevector? K3275@x)))) (set! K2279@strip-annotations (lambda (K3277@x) (if (pair? K3277@x) (cons (K2279@strip-annotations (car K3277@x)) (K2279@strip-annotations (cdr K3277@x))) (if (vector? K3277@x) (vector-map K2279@strip-annotations K3277@x) (if (K1150@K917@annotation? K3277@x) (K1149@K915@annotation-stripped K3277@x) K3277@x))))) (set! K2281@strip (lambda (K3279@x K3280@m*) (if (K2131@top-marked? K3280@m*) (if (or (K1150@K917@annotation? K3279@x) (and (pair? K3279@x) (K1150@K917@annotation? (car K3279@x))) (and (vector? K3279@x) (> (vector-length K3279@x) '0) (K1150@K917@annotation? (vector-ref K3279@x '0)))) (K2279@strip-annotations K3279@x) K3279@x) ((letrec ((K3283@f (lambda (K3285@x) (if (K2205@stx? K3285@x) (K2281@strip (K2209@stx-expr K3285@x) (K2211@stx-mark* K3285@x)) (if (K1150@K917@annotation? K3285@x) (K1149@K915@annotation-stripped K3285@x) (if (pair? K3285@x) ((lambda (K3287@a K3288@d) (if (and (eq? K3287@a (car K3285@x)) (eq? K3288@d (cdr K3285@x))) K3285@x (cons K3287@a K3288@d))) (K3283@f (car K3285@x)) (K3283@f (cdr K3285@x))) (if (vector? K3285@x) ((lambda (K3291@old) ((lambda (K3293@new) (if (for-all eq? K3291@old K3293@new) K3285@x (list->vector K3293@new))) (map K3283@f K3291@old))) (vector->list K3285@x)) K3285@x))))))) K3283@f) K3279@x)))) (set! K2283@stx->datum (lambda (K3295@x) (K2281@strip K3295@x '()))) (set! K2285@same-marks*? (lambda (K3297@mark* K3298@mark** K3299@si) (if (null? K3299@si) '#f (if (K2265@same-marks? K3297@mark* (vector-ref K3298@mark** (car K3299@si))) (car K3299@si) (K2285@same-marks*? K3297@mark* K3298@mark** (cdr K3299@si)))))) (set! K2287@id->label (lambda (K3303@id) (or (K2289@id->real-label K3303@id) ((lambda (K3305@t) (if K3305@t ((lambda (K3307@env) ((lambda (K3309@rib) (call-with-values (lambda () (K2141@gen-define-label+loc K3303@id K3309@rib)) (lambda (K3313@K3311@lab K3314@K3312@loc_) ((lambda (K3317@loc_ K3318@lab) (begin (K2182@extend-rib! K3309@rib K3303@id K3318@lab) K3318@lab)) K3314@K3312@loc_ K3313@K3311@lab)))) (K2929@interaction-env-rib K3307@env))) K3305@t) '#f)) (K3007@top-level-context))))) (set! K2289@id->real-label (lambda (K3321@id) ((lambda (K3323@sym) ((letrec ((K3325@search (lambda (K3327@subst* K3328@mark*) (if (null? K3327@subst*) '#f (if (eq? (car K3327@subst*) 'shift) (K3325@search (cdr K3327@subst*) (cdr K3328@mark*)) ((lambda (K3331@rib) ((lambda (K3333@t) (if K3333@t ((lambda (K3335@ht) ((lambda (K3337@si) ((lambda (K3339@i) (if K3339@i (vector-ref (K2164@rib-label* K3331@rib) K3339@i) (K3325@search (cdr K3327@subst*) K3328@mark*))) (and K3337@si (K2285@same-marks*? K3328@mark* (K2162@rib-mark** K3331@rib) (reverse K3337@si))))) (hashtable-ref K3335@ht K3323@sym '#f))) K3333@t) ((letrec ((K3341@f (lambda (K3343@sym* K3344@mark** K3345@label*) (if (null? K3343@sym*) (K3325@search (cdr K3327@subst*) K3328@mark*) (if (and (eq? (car K3343@sym*) K3323@sym) (K2265@same-marks? (car K3344@mark**) K3328@mark*)) (car K3345@label*) (K3341@f (cdr K3343@sym*) (cdr K3344@mark**) (cdr K3345@label*))))))) K3341@f) (K2160@rib-sym* K3331@rib) (K2162@rib-mark** K3331@rib) (K2164@rib-label* K3331@rib)))) (K2166@rib-sealed/freq K3331@rib))) (car K3327@subst*))))))) K3325@search) (K2213@stx-subst* K3321@id) (K2211@stx-mark* K3321@id))) (K2263@id->sym K3321@id)))) (set! K2291@label->binding (lambda (K3349@x K3350@r) ((lambda (K3353@t) (if K3353@t ((lambda (K3355@b) (if (and (pair? K3355@b) (eq? (car K3355@b) '$core-rtd)) (cons '$rtd (map K2684@bless (cdr K3355@b))) (if (and (pair? K3355@b) (eq? (car K3355@b) 'global-rtd)) ((lambda (K3357@lib K3358@loc) (cons '$rtd (symbol-value K3358@loc))) (cadr K3355@b) (cddr K3355@b)) K3355@b))) K3353@t) ((lambda (K3361@t) (if K3361@t (cdr K3361@t) ((lambda (K3363@t) (if K3363@t ((lambda (K3365@env) ((lambda (K3367@t) (if K3367@t ((lambda (K3369@p) (cons* 'lexical (cdr K3369@p) '#f)) K3367@t) '(displaced-lexical . #f))) (assq K3349@x (K2933@interaction-env-locs K3365@env)))) K3363@t) '(displaced-lexical . #f))) (K3007@top-level-context)))) (assq K3349@x K3350@r)))) (K1788@K1442@imported-label->binding K3349@x)))) (set! K2293@make-binding cons) (set! K2295@binding-type car) (set! K2297@binding-value cdr) (set! K2299@raise-unbound-error (lambda (K3371@id) (K2991@syntax-violation* '#f '"unbound identifier" K3371@id (K10181@K9743@make-undefined-violation)))) (set! K2301@syntax-type (lambda (K3373@e K3374@r) (if (K2261@id? K3373@e) ((lambda (K3377@id) ((lambda (K3379@label) ((lambda (K3381@b) ((lambda (K3383@type) ((lambda () (begin (if (symbol-value 'debug-expand) (format '#t '"id->label=~a label->binding=~a\n" K3379@label K3381@b) (void)) (if (not K3379@label) (K2299@raise-unbound-error K3377@id) (void)) ((lambda (K3385@t) (if (memv K3385@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values K3383@type (K2297@binding-value K3381@b) K3377@id) (values 'other '#f '#f))) K3383@type))))) (K2295@binding-type K3381@b))) (K2291@label->binding K3379@label K3374@r))) (K2287@id->label K3377@id))) K3373@e) (if (K2247@syntax-pair? K3373@e) ((lambda (K3387@id) (if (K2261@id? K3387@id) ((lambda (K3389@label) ((lambda (K3391@b) ((lambda (K3393@type) ((lambda () (begin (if (not K3389@label) (K2299@raise-unbound-error K3387@id) (void)) ((lambda (K3395@t) (if (memv K3395@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values K3393@type (K2297@binding-value K3391@b) K3387@id) (values 'call '#f '#f))) K3393@type))))) (K2295@binding-type K3391@b))) (K2291@label->binding K3389@label K3374@r))) (K2287@id->label K3387@id)) (values 'call '#f '#f))) (K2255@syntax-car K3373@e)) ((lambda (K3397@d) (if (K2277@self-evaluating? K3397@d) (values 'constant K3397@d '#f) (values 'other '#f '#f))) (K2283@stx->datum K3373@e)))))) (set! K2315@sanitize-binding (lambda (K3399@x K3400@src) (if (procedure? K3399@x) (cons* 'local-macro K3399@x K3400@src) (if (and (pair? K3399@x) (eq? (car K3399@x) 'macro!) (procedure? (cdr K3399@x))) (cons* 'local-macro! (cdr K3399@x) K3400@src) (if (and (pair? K3399@x) (eq? (car K3399@x) '$rtd)) K3399@x (assertion-violation 'expand '"invalid transformer" K3399@x)))))) (set! K2317@make-variable-transformer (lambda (K3403@x) (if (procedure? K3403@x) (cons 'macro! K3403@x) (assertion-violation 'make-variable-transformer '"not a procedure" K3403@x)))) (set! K2319@variable-transformer? (lambda (K3405@x) (and (pair? K3405@x) (eq? (car K3405@x) 'macro!) (procedure? (cdr K3405@x))))) (set! K2321@variable-transformer-procedure (lambda (K3407@x) (if (K2319@variable-transformer? K3407@x) (cdr K3407@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" K3407@x)))) (set! K2323@make-eval-transformer (lambda (K3409@x) (K2315@sanitize-binding (eval-core (K1245@K1173@expanded->core K3409@x)) K3409@x))) (set! K2634@parse-define (lambda (K3411@x) ((lambda (K3413@t) ((lambda (K3415@ls/false) (if (and K3415@ls/false (apply (lambda (K3417@id K3418@fmls K3419@b K3420@b*) (K2261@id? K3417@id)) K3415@ls/false)) (apply (lambda (K3425@id K3426@fmls K3427@b K3428@b*) (begin (K2798@verify-formals K3426@fmls K3411@x) (values K3425@id (cons 'defun (cons K3426@fmls (cons K3427@b K3428@b*)))))) K3415@ls/false) ((lambda (K3433@t) ((lambda (K3435@ls/false) (if (and K3435@ls/false (apply (lambda (K3437@id K3438@val) (K2261@id? K3437@id)) K3435@ls/false)) (apply (lambda (K3441@id K3442@val) (values K3441@id (cons 'expr K3442@val))) K3435@ls/false) ((lambda (K3445@t) ((lambda (K3447@ls/false) (if (and K3447@ls/false (apply (lambda (K3449@id) (K2261@id? K3449@id)) K3447@ls/false)) (apply (lambda (K3451@id) (values K3451@id (cons 'expr (K2684@bless '(void))))) K3447@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3445@t))) (K2758@syntax-dispatch K3445@t '(_ any)))) K3433@t))) (K2758@syntax-dispatch K3433@t '(_ any any)))) K3413@t))) (K2758@syntax-dispatch K3413@t '(_ (any . any) any . each-any)))) K3411@x))) (set! K2636@parse-define-syntax (lambda (K3453@x) ((lambda (K3455@t) ((lambda (K3457@ls/false) (if (and K3457@ls/false (apply (lambda (K3459@id K3460@val) (K2261@id? K3459@id)) K3457@ls/false)) (apply (lambda (K3463@id K3464@val) (values K3463@id K3464@val)) K3457@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3455@t))) (K2758@syntax-dispatch K3455@t '(_ any any)))) K3453@x))) (set! K2638@scheme-stx-hashtable (make-eq-hashtable)) (set! K2640@scheme-stx (lambda (K3467@sym) (or (hashtable-ref K2638@scheme-stx-hashtable K3467@sym '#f) ((lambda (K3469@subst) ((lambda (K3471@stx) ((lambda (K3473@stx) ((lambda () (begin (hashtable-set! K2638@scheme-stx-hashtable K3467@sym K3473@stx) K3473@stx)))) ((lambda (K3475@t) (if K3475@t ((lambda (K3477@x) ((lambda (K3479@name K3480@label) (K2241@add-subst (K2158@make-rib (list K3479@name) (list K2129@top-mark*) (list K3480@label) '#f '#f) K3471@stx)) (car K3477@x) (cdr K3477@x))) K3475@t) K3471@stx)) (assq K3467@sym K3469@subst)))) (K2207@make-stx K3467@sym K2129@top-mark* '() '()))) (K1746@K1358@library-subst (K1782@K1430@find-library-by-name '(psyntax system $all))))))) (set! K2642@lexical-var car) (set! K2644@lexical-mutable? cdr) (set! K2646@set-lexical-mutable! set-cdr!) (set! K2648@add-lexical (lambda (K3483@lab K3484@lex K3485@r) (cons (cons* K3483@lab 'lexical K3484@lex '#f) K3485@r))) (set! K2650@add-lexicals (lambda (K3489@lab* K3490@lex* K3491@r) (if (null? K3489@lab*) K3491@r (K2650@add-lexicals (cdr K3489@lab*) (cdr K3490@lex*) (K2648@add-lexical (car K3489@lab*) (car K3490@lex*) K3491@r))))) (set! K2652@letrec-helper (lambda (K3495@e K3496@r K3497@mr K3498@build) ((lambda (K3503@t) ((lambda (K3505@ls/false) (if K3505@ls/false (apply (lambda (K3507@lhs* K3508@rhs* K3509@b K3510@b*) (if (not (K2271@valid-bound-ids? K3507@lhs*)) (K2688@invalid-fmls-error K3495@e K3507@lhs*) ((lambda (K3515@lex* K3516@lab*) ((lambda (K3519@rib K3520@r) ((lambda (K3523@body K3524@rhs*) (K3498@build '#f K3515@lex* K3524@rhs* K3523@body)) (K2816@chi-internal (K2241@add-subst K3519@rib (cons K3509@b K3510@b*)) K3520@r K3497@mr) (K2790@chi-expr* (map (lambda (K3527@x) (K2241@add-subst K3519@rib K3527@x)) K3508@rhs*) K3520@r K3497@mr))) (K2192@make-full-rib K3507@lhs* K3516@lab*) (K2650@add-lexicals K3516@lab* K3515@lex* K3496@r))) (map K2133@gen-lexical K3507@lhs*) (map K2137@gen-label K3507@lhs*)))) K3505@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3503@t))) (K2758@syntax-dispatch K3503@t '(_ #(each (any any)) any . each-any)))) K3495@e))) (set! K2654@letrec-transformer (lambda (K3529@e K3530@r K3531@mr) (K2652@letrec-helper K3529@e K3530@r K3531@mr K2104@K1963@build-letrec))) (set! K2656@letrec*-transformer (lambda (K3535@e K3536@r K3537@mr) (K2652@letrec-helper K3535@e K3536@r K3537@mr K2105@K1965@build-letrec*))) (set! K2658@fluid-let-syntax-transformer (lambda (K3541@e K3542@r K3543@mr) ((lambda (K3548@lookup) (begin (set! K3548@lookup (lambda (K3567@x) (or (K2287@id->label K3567@x) (K2993@syntax-violation '#f '"unbound identifier" K3541@e K3567@x)))) ((lambda (K3549@t) ((lambda (K3551@ls/false) (if K3551@ls/false (apply (lambda (K3553@lhs* K3554@rhs* K3555@b K3556@b*) (if (not (K2271@valid-bound-ids? K3553@lhs*)) (K2688@invalid-fmls-error K3541@e K3553@lhs*) ((lambda (K3561@lab* K3562@rhs*) (K2816@chi-internal (cons K3555@b K3556@b*) (append (map cons K3561@lab* K3562@rhs*) K3542@r) (append (map cons K3561@lab* K3562@rhs*) K3543@mr))) (map K3548@lookup K3553@lhs*) (map (lambda (K3565@x) (K2323@make-eval-transformer (K2853@expand-transformer K3565@x K3543@mr))) K3554@rhs*)))) K3551@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3549@t))) (K2758@syntax-dispatch K3549@t '(_ #(each (any any)) any . each-any)))) K3541@e))) '#f))) (set! K2660@type-descriptor-transformer (lambda (K3569@e K3570@r K3571@mr) ((lambda (K3575@t) ((lambda (K3577@ls/false) (if (and K3577@ls/false (apply (lambda (K3579@id) (K2261@id? K3579@id)) K3577@ls/false)) (apply (lambda (K3581@id) ((lambda (K3583@lab) ((lambda (K3585@b) ((lambda (K3587@type) ((lambda () (begin (if (not K3583@lab) (K2299@raise-unbound-error K3581@id) (void)) (if (not (and (eq? K3587@type '$rtd) (not (list? (K2297@binding-value K3585@b))))) (K2993@syntax-violation '#f '"not a record type" K3569@e) (void)) (list 'quote (K2297@binding-value K3585@b)))))) (K2295@binding-type K3585@b))) (K2291@label->binding K3583@lab K3570@r))) (K2287@id->label K3581@id))) K3577@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3575@t))) (K2758@syntax-dispatch K3575@t '(_ any)))) K3569@e))) (set! K2662@record-type-descriptor-transformer (lambda (K3589@e K3590@r K3591@mr) ((lambda (K3595@t) ((lambda (K3597@ls/false) (if (and K3597@ls/false (apply (lambda (K3599@id) (K2261@id? K3599@id)) K3597@ls/false)) (apply (lambda (K3601@id) ((lambda (K3603@lab) ((lambda (K3605@b) ((lambda (K3607@type) ((lambda () (begin (if (symbol-value 'debug-expand) (format '#t '"id=~a lab=~a b=~a <~a ~a>\n" (K2209@stx-expr K3601@id) K3603@lab K3605@b (K2209@stx-expr (cadr K3605@b)) (K2209@stx-expr (caddr K3605@b))) (void)) (if (not K3603@lab) (K2299@raise-unbound-error K3601@id) (void)) (if (not (and (eq? K3607@type '$rtd) (list? (K2297@binding-value K3605@b)))) (K2993@syntax-violation '#f '"not a record type" K3589@e) (void)) (if (symbol-value 'debug-expand) (format '#t '"(car (binding-value b))=~a \n" (K2209@stx-expr (car (K2297@binding-value K3605@b)))) (void)) (K2794@chi-expr (car (K2297@binding-value K3605@b)) K3590@r K3591@mr))))) (K2295@binding-type K3605@b))) (K2291@label->binding K3603@lab K3590@r))) (K2287@id->label K3601@id))) K3597@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3595@t))) (K2758@syntax-dispatch K3595@t '(_ any)))) K3589@e))) (set! K2664@record-constructor-descriptor-transformer (lambda (K3609@e K3610@r K3611@mr) ((lambda (K3615@t) ((lambda (K3617@ls/false) (if (and K3617@ls/false (apply (lambda (K3619@id) (K2261@id? K3619@id)) K3617@ls/false)) (apply (lambda (K3621@id) ((lambda (K3623@lab) ((lambda (K3625@b) ((lambda (K3627@type) ((lambda () (begin (if (not K3623@lab) (K2299@raise-unbound-error K3621@id) (void)) (if (not (and (eq? K3627@type '$rtd) (list? (K2297@binding-value K3625@b)))) (K2993@syntax-violation '#f '"invalid type" K3609@e) (void)) (K2794@chi-expr (cadr (K2297@binding-value K3625@b)) K3610@r K3611@mr))))) (K2295@binding-type K3625@b))) (K2291@label->binding K3623@lab K3610@r))) (K2287@id->label K3621@id))) K3617@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3615@t))) (K2758@syntax-dispatch K3615@t '(_ any)))) K3609@e))) (set! K2666@when-macro (lambda (K3629@e) ((lambda (K3631@t) ((lambda (K3633@ls/false) (if K3633@ls/false (apply (lambda (K3635@test K3636@e K3637@e*) (K2684@bless (list 'if K3635@test (cons 'begin (cons K3636@e K3637@e*))))) K3633@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3631@t))) (K2758@syntax-dispatch K3631@t '(_ any any . each-any)))) K3629@e))) (set! K2668@unless-macro (lambda (K3641@e) ((lambda (K3643@t) ((lambda (K3645@ls/false) (if K3645@ls/false (apply (lambda (K3647@test K3648@e K3649@e*) (K2684@bless (list 'if (list 'not K3647@test) (cons 'begin (cons K3648@e K3649@e*))))) K3645@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3643@t))) (K2758@syntax-dispatch K3643@t '(_ any any . each-any)))) K3641@e))) (set! K2670@if-transformer (lambda (K3653@e K3654@r K3655@mr) ((lambda (K3659@t) ((lambda (K3661@ls/false) (if K3661@ls/false (apply (lambda (K3663@e0 K3664@e1 K3665@e2) (list 'if (K2794@chi-expr K3663@e0 K3654@r K3655@mr) (K2794@chi-expr K3664@e1 K3654@r K3655@mr) (K2794@chi-expr K3665@e2 K3654@r K3655@mr))) K3661@ls/false) ((lambda (K3669@t) ((lambda (K3671@ls/false) (if K3671@ls/false (apply (lambda (K3673@e0 K3674@e1) (list 'if (K2794@chi-expr K3673@e0 K3654@r K3655@mr) (K2794@chi-expr K3674@e1 K3654@r K3655@mr) (K2103@K1961@build-void))) K3671@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3669@t))) (K2758@syntax-dispatch K3669@t '(_ any any)))) K3659@t))) (K2758@syntax-dispatch K3659@t '(_ any any any)))) K3653@e))) (set! K2672@and-transformer (lambda (K3677@e K3678@r K3679@mr) ((lambda (K3683@t) ((lambda (K3685@ls/false) (if K3685@ls/false (apply (lambda (K3687@e*) (cons 'and (K2790@chi-expr* K3687@e* K3678@r K3679@mr))) K3685@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3683@t))) (K2758@syntax-dispatch K3683@t '(_ . each-any)))) K3677@e))) (set! K2674@or-transformer (lambda (K3689@e K3690@r K3691@mr) ((lambda (K3695@t) ((lambda (K3697@ls/false) (if K3697@ls/false (apply (lambda (K3699@e*) (cons 'or (K2790@chi-expr* K3699@e* K3690@r K3691@mr))) K3697@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3695@t))) (K2758@syntax-dispatch K3695@t '(_ . each-any)))) K3689@e))) (set! K2676@case-macro (lambda (K3701@e) ((lambda (K3704@build-last K3706@build-one) (begin (set! K3704@build-last (lambda (K3743@cls) ((lambda (K3745@t) ((lambda (K3747@ls/false) (if K3747@ls/false (apply (lambda (K3749@e K3750@e*) (cons 'begin (cons K3749@e K3750@e*))) K3747@ls/false) ((lambda (K3753@t) ((lambda (K3755@ls/false) (if K3755@ls/false (apply (lambda () (K3706@build-one K3743@cls '(if #f #f))) K3755@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3753@t))) (K2758@syntax-dispatch K3753@t '_))) K3745@t))) (K2758@syntax-dispatch K3745@t '(#(scheme-id else) any . each-any)))) K3743@cls))) (set! K3706@build-one (lambda (K3729@cls K3730@k) ((lambda (K3733@t) ((lambda (K3735@ls/false) (if K3735@ls/false (apply (lambda (K3737@d* K3738@e K3739@e*) (list 'if (list 'memv 't (list 'quote K3737@d*)) (cons 'begin (cons K3738@e K3739@e*)) K3730@k)) K3735@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3733@t))) (K2758@syntax-dispatch K3733@t '(each-any any . each-any)))) K3729@cls))) ((lambda (K3707@t) ((lambda (K3709@ls/false) (if K3709@ls/false (apply (lambda (K3711@expr) (K2684@bless (cons 'let (cons (list (list 't K3711@expr)) '((if #f #f)))))) K3709@ls/false) ((lambda (K3713@t) ((lambda (K3715@ls/false) (if K3715@ls/false (apply (lambda (K3717@expr K3718@cls K3719@cls*) (K2684@bless (list 'let (list (list 't K3717@expr)) ((letrec ((K3723@f (lambda (K3725@cls K3726@cls*) (if (null? K3726@cls*) (K3704@build-last K3725@cls) (K3706@build-one K3725@cls (K3723@f (car K3726@cls*) (cdr K3726@cls*))))))) K3723@f) K3718@cls K3719@cls*)))) K3715@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3713@t))) (K2758@syntax-dispatch K3713@t '(_ any any . each-any)))) K3707@t))) (K2758@syntax-dispatch K3707@t '(_ any)))) K3701@e))) '#f '#f))) (set! K2678@quote-transformer (lambda (K3757@e K3758@r K3759@mr) ((lambda (K3763@t) ((lambda (K3765@ls/false) (if K3765@ls/false (apply (lambda (K3767@datum) (list 'quote (K2283@stx->datum K3767@datum))) K3765@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3763@t))) (K2758@syntax-dispatch K3763@t '(_ any)))) K3757@e))) (set! K2680@case-lambda-transformer (lambda (K3769@e K3770@r K3771@mr) ((lambda (K3775@t) ((lambda (K3777@ls/false) (if K3777@ls/false (apply (lambda (K3779@fmls* K3780@b* K3781@b**) (call-with-values (lambda () (K2802@chi-lambda-clause* K3769@e K3779@fmls* (map cons K3780@b* K3781@b**) K3770@r K3771@mr)) (lambda (K3787@K3785@fmls* K3788@K3786@body*) ((lambda (K3791@body* K3792@fmls*) (K2100@K1911@build-case-lambda '#f K3792@fmls* K3791@body*)) K3788@K3786@body* K3787@K3785@fmls*)))) K3777@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3775@t))) (K2758@syntax-dispatch K3775@t '(_ . #(each (any any . each-any)))))) K3769@e))) (set! K2682@lambda-transformer (lambda (K3795@e K3796@r K3797@mr) ((lambda (K3801@t) ((lambda (K3803@ls/false) (if K3803@ls/false (apply (lambda (K3805@fmls K3806@b K3807@b*) (call-with-values (lambda () (K2800@chi-lambda-clause K3795@e K3805@fmls (cons K3806@b K3807@b*) K3796@r K3797@mr)) (lambda (K3813@K3811@fmls K3814@K3812@body) ((lambda (K3817@body K3818@fmls) (K2099@K1909@build-lambda '#f K3818@fmls K3817@body)) K3814@K3812@body K3813@K3811@fmls)))) K3803@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3801@t))) (K2758@syntax-dispatch K3801@t '(_ any any . each-any)))) K3795@e))) (set! K2684@bless (lambda (K3821@x) (K2237@mkstx ((letrec ((K3823@f (lambda (K3825@x) (if (K2205@stx? K3825@x) K3825@x (if (pair? K3825@x) (cons (K3823@f (car K3825@x)) (K3823@f (cdr K3825@x))) (if (symbol? K3825@x) (K2640@scheme-stx K3825@x) (if (vector? K3825@x) (vector-map K3823@f K3825@x) K3825@x))))))) K3823@f) K3821@x) '() '() '()))) (set! K2686@with-syntax-macro (lambda (K3827@e) ((lambda (K3829@t) ((lambda (K3831@ls/false) (if K3831@ls/false (apply (lambda (K3833@pat* K3834@expr* K3835@b K3836@b*) ((lambda (K3841@idn*) (begin (K2798@verify-formals (map car K3841@idn*) K3827@e) ((lambda (K3843@t*) (K2684@bless (list 'let (map list K3843@t* K3834@expr*) ((letrec ((K3845@f (lambda (K3847@pat* K3848@t*) (if (null? K3847@pat*) (cons 'begin (cons '#f (cons K3835@b K3836@b*))) (list 'syntax-case (car K3848@t*) '() (list (car K3847@pat*) (K3845@f (cdr K3847@pat*) (cdr K3848@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car K3847@pat*)) (car K3848@t*)))))))) K3845@f) K3833@pat* K3843@t*)))) (K2975@generate-temporaries K3834@expr*)))) ((letrec ((K3851@f (lambda (K3853@pat*) (if (null? K3853@pat*) '() (call-with-values (lambda () (K2756@convert-pattern (car K3853@pat*) '())) (lambda (K3857@K3855@pat K3858@K3856@idn*) ((lambda (K3861@idn* K3862@pat) (append K3861@idn* (K3851@f (cdr K3853@pat*)))) K3858@K3856@idn* K3857@K3855@pat))))))) K3851@f) K3833@pat*))) K3831@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3829@t))) (K2758@syntax-dispatch K3829@t '(_ #(each (any any)) any . each-any)))) K3827@e))) (set! K2688@invalid-fmls-error (lambda (K3865@stx K3866@fmls) ((lambda (K3869@t) ((lambda (K3871@ls/false) (if K3871@ls/false (apply (lambda (K3873@id* K3874@last) ((letrec ((K3877@f (lambda (K3879@id*) (if (null? K3879@id*) (values) (if (not (K2261@id? (car K3879@id*))) (K2993@syntax-violation '#f '"not an identifier" K3865@stx (car K3879@id*)) (begin (K3877@f (cdr K3879@id*)) (if (K2275@bound-id-member? (car K3879@id*) (cdr K3879@id*)) (K2993@syntax-violation '#f '"duplicate binding" K3865@stx (car K3879@id*)) (void)))))))) K3877@f) (if (K2261@id? K3874@last) (cons K3874@last K3873@id*) (if (K2251@syntax-null? K3874@last) K3873@id* (K2993@syntax-violation '#f '"not an identifier" K3865@stx K3874@last))))) K3871@ls/false) ((lambda (K3881@t) ((lambda (K3883@ls/false) (if K3883@ls/false (apply (lambda () (K2993@syntax-violation '#f '"malformed binding form" K3865@stx K3866@fmls)) K3883@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3881@t))) (K2758@syntax-dispatch K3881@t '_))) K3869@t))) (K2758@syntax-dispatch K3869@t '#(each+ any () any)))) K3866@fmls))) (set! K2690@let-macro (lambda (K3885@stx) ((lambda (K3887@t) ((lambda (K3889@ls/false) (if K3889@ls/false (apply (lambda (K3891@lhs* K3892@rhs* K3893@b K3894@b*) (if (K2271@valid-bound-ids? K3891@lhs*) (K2684@bless (cons (cons 'lambda (cons K3891@lhs* (cons K3893@b K3894@b*))) K3892@rhs*)) (K2688@invalid-fmls-error K3885@stx K3891@lhs*))) K3889@ls/false) ((lambda (K3899@t) ((lambda (K3901@ls/false) (if (and K3901@ls/false (apply (lambda (K3903@f K3904@lhs* K3905@rhs* K3906@b K3907@b*) (K2261@id? K3903@f)) K3901@ls/false)) (apply (lambda (K3913@f K3914@lhs* K3915@rhs* K3916@b K3917@b*) (if (K2271@valid-bound-ids? K3914@lhs*) (K2684@bless (cons (list 'letrec (list (list K3913@f (cons 'lambda (cons K3914@lhs* (cons K3916@b K3917@b*))))) K3913@f) K3915@rhs*)) (K2688@invalid-fmls-error K3885@stx K3914@lhs*))) K3901@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3899@t))) (K2758@syntax-dispatch K3899@t '(_ any #(each (any any)) any . each-any)))) K3887@t))) (K2758@syntax-dispatch K3887@t '(_ #(each (any any)) any . each-any)))) K3885@stx))) (set! K2692@let-values-macro (lambda (K3923@stx) ((lambda (K3926@rename K3928@rename*) (begin (set! K3926@rename (lambda (K4024@x K4025@old* K4026@new*) (begin (if (not (K2261@id? K4024@x)) (K2993@syntax-violation '#f '"not an indentifier" K3923@stx K4024@x) (void)) (if (K2275@bound-id-member? K4024@x K4025@old*) (K2993@syntax-violation '#f '"duplicate binding" K3923@stx K4024@x) (void)) ((lambda (K4030@y) (values K4030@y (cons K4024@x K4025@old*) (cons K4030@y K4026@new*))) (K1147@K911@gensym (K2999@syntax->datum K4024@x)))))) (set! K3928@rename* (lambda (K4006@x* K4007@old* K4008@new*) (if (null? K4006@x*) (values '() K4007@old* K4008@new*) (call-with-values (lambda () (K3926@rename (car K4006@x*) K4007@old* K4008@new*)) (lambda (K4012@x K4013@old* K4014@new*) (call-with-values (lambda () (K3928@rename* (cdr K4006@x*) K4013@old* K4014@new*)) (lambda (K4018@x* K4019@old* K4020@new*) (values (cons K4012@x K4018@x*) K4019@old* K4020@new*)))))))) ((lambda (K3929@t) ((lambda (K3931@ls/false) (if K3931@ls/false (apply (lambda (K3933@b K3934@b*) (cons* (K2684@bless 'let) '() K3933@b K3934@b*)) K3931@ls/false) ((lambda (K3937@t) ((lambda (K3939@ls/false) (if K3939@ls/false (apply (lambda (K3941@lhs* K3942@rhs* K3943@b K3944@b*) (K2684@bless ((letrec ((K3949@f (lambda (K3951@lhs* K3952@rhs* K3953@old* K3954@new*) (if (null? K3951@lhs*) (cons 'let (cons (map list K3953@old* K3954@new*) (cons K3943@b K3944@b*))) ((lambda (K3959@t) ((lambda (K3961@ls/false) (if K3961@ls/false (apply (lambda (K3963@x*) (call-with-values (lambda () (K3928@rename* K3963@x* K3953@old* K3954@new*)) (lambda (K3968@K3965@y* K3969@K3966@old* K3970@K3967@new*) ((lambda (K3974@new* K3975@old* K3976@y*) (list 'call-with-values (list 'lambda '() (car K3952@rhs*)) (list 'lambda K3976@y* (K3949@f (cdr K3951@lhs*) (cdr K3952@rhs*) K3975@old* K3974@new*)))) K3970@K3967@new* K3969@K3966@old* K3968@K3965@y*)))) K3961@ls/false) ((lambda (K3980@t) ((lambda (K3982@ls/false) (if K3982@ls/false (apply (lambda (K3984@x* K3985@x) (call-with-values (lambda () (K3926@rename K3985@x K3953@old* K3954@new*)) (lambda (K3988@y K3989@old* K3990@new*) (call-with-values (lambda () (K3928@rename* K3984@x* K3989@old* K3990@new*)) (lambda (K3994@y* K3995@old* K3996@new*) (list 'call-with-values (list 'lambda '() (car K3952@rhs*)) (list 'lambda (append K3994@y* K3988@y) (K3949@f (cdr K3951@lhs*) (cdr K3952@rhs*) K3995@old* K3996@new*)))))))) K3982@ls/false) ((lambda (K4000@t) ((lambda (K4002@ls/false) (if K4002@ls/false (apply (lambda (K4004@others) (K2993@syntax-violation '#f '"malformed bindings" K3923@stx K4004@others)) K4002@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4000@t))) (K2758@syntax-dispatch K4000@t 'any))) K3980@t))) (K2758@syntax-dispatch K3980@t '#(each+ any () any)))) K3959@t))) (K2758@syntax-dispatch K3959@t 'each-any))) (car K3951@lhs*)))))) K3949@f) K3941@lhs* K3942@rhs* '() '()))) K3939@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K3937@t))) (K2758@syntax-dispatch K3937@t '(_ #(each (any any)) any . each-any)))) K3929@t))) (K2758@syntax-dispatch K3929@t '(_ () any . each-any)))) K3923@stx))) '#f '#f))) (set! K2694@let*-values-macro (lambda (K4032@stx) ((lambda (K4035@check) (begin (set! K4035@check (lambda (K4082@x*) (if (not (null? K4082@x*)) ((lambda (K4084@x) (begin (if (not (K2261@id? K4084@x)) (K2993@syntax-violation '#f '"not an identifier" K4032@stx K4084@x) (void)) (K4035@check (cdr K4082@x*)) (if (K2275@bound-id-member? K4084@x (cdr K4082@x*)) (K2993@syntax-violation '#f '"duplicate identifier" K4032@stx K4084@x) (void)))) (car K4082@x*)) (void)))) ((lambda (K4036@t) ((lambda (K4038@ls/false) (if K4038@ls/false (apply (lambda (K4040@b K4041@b*) (cons* (K2684@bless 'let) '() K4040@b K4041@b*)) K4038@ls/false) ((lambda (K4044@t) ((lambda (K4046@ls/false) (if K4046@ls/false (apply (lambda (K4048@lhs* K4049@rhs* K4050@b K4051@b*) (K2684@bless ((letrec ((K4056@f (lambda (K4058@lhs* K4059@rhs*) (if (null? K4058@lhs*) (cons 'begin (cons K4050@b K4051@b*)) ((lambda (K4062@t) ((lambda (K4064@ls/false) (if K4064@ls/false (apply (lambda (K4066@x*) (begin (K4035@check K4066@x*) (list 'call-with-values (list 'lambda '() (car K4059@rhs*)) (list 'lambda K4066@x* (K4056@f (cdr K4058@lhs*) (cdr K4059@rhs*)))))) K4064@ls/false) ((lambda (K4068@t) ((lambda (K4070@ls/false) (if K4070@ls/false (apply (lambda (K4072@x* K4073@x) (begin (K4035@check (cons K4073@x K4072@x*)) (list 'call-with-values (list 'lambda '() (car K4059@rhs*)) (list 'lambda (append K4072@x* K4073@x) (K4056@f (cdr K4058@lhs*) (cdr K4059@rhs*)))))) K4070@ls/false) ((lambda (K4076@t) ((lambda (K4078@ls/false) (if K4078@ls/false (apply (lambda (K4080@others) (K2993@syntax-violation '#f '"malformed bindings" K4032@stx K4080@others)) K4078@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4076@t))) (K2758@syntax-dispatch K4076@t 'any))) K4068@t))) (K2758@syntax-dispatch K4068@t '#(each+ any () any)))) K4062@t))) (K2758@syntax-dispatch K4062@t 'each-any))) (car K4058@lhs*)))))) K4056@f) K4048@lhs* K4049@rhs*))) K4046@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4044@t))) (K2758@syntax-dispatch K4044@t '(_ #(each (any any)) any . each-any)))) K4036@t))) (K2758@syntax-dispatch K4036@t '(_ () any . each-any)))) K4032@stx))) '#f))) (set! K2696@trace-lambda-macro (lambda (K4086@stx) ((lambda (K4088@t) ((lambda (K4090@ls/false) (if K4090@ls/false (apply (lambda (K4092@who K4093@fmls K4094@b K4095@b*) (if (K2271@valid-bound-ids? K4093@fmls) (K2684@bless (list 'make-traced-procedure (list 'quote K4092@who) (cons 'lambda (cons K4093@fmls (cons K4094@b K4095@b*))))) (K2688@invalid-fmls-error K4086@stx K4093@fmls))) K4090@ls/false) ((lambda (K4100@t) ((lambda (K4102@ls/false) (if K4102@ls/false (apply (lambda (K4104@who K4105@fmls K4106@last K4107@b K4108@b*) (if (K2271@valid-bound-ids? (cons K4106@last K4105@fmls)) (K2684@bless (list 'make-traced-procedure (list 'quote K4104@who) (cons 'lambda (cons (append K4105@fmls K4106@last) (cons K4107@b K4108@b*))))) (K2688@invalid-fmls-error K4086@stx (append K4105@fmls K4106@last)))) K4102@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4100@t))) (K2758@syntax-dispatch K4100@t '(_ any #(each+ any () any) any . each-any)))) K4088@t))) (K2758@syntax-dispatch K4088@t '(_ any each-any any . each-any)))) K4086@stx))) (set! K2698@trace-define-macro (lambda (K4114@stx) ((lambda (K4116@t) ((lambda (K4118@ls/false) (if K4118@ls/false (apply (lambda (K4120@who K4121@fmls K4122@b K4123@b*) (if (K2271@valid-bound-ids? K4121@fmls) (K2684@bless (list 'define K4120@who (list 'make-traced-procedure (list 'quote K4120@who) (cons 'lambda (cons K4121@fmls (cons K4122@b K4123@b*)))))) (K2688@invalid-fmls-error K4114@stx K4121@fmls))) K4118@ls/false) ((lambda (K4128@t) ((lambda (K4130@ls/false) (if K4130@ls/false (apply (lambda (K4132@who K4133@fmls K4134@last K4135@b K4136@b*) (if (K2271@valid-bound-ids? (cons K4134@last K4133@fmls)) (K2684@bless (list 'define K4132@who (list 'make-traced-procedure (list 'quote K4132@who) (cons 'lambda (cons (append K4133@fmls K4134@last) (cons K4135@b K4136@b*)))))) (K2688@invalid-fmls-error K4114@stx (append K4133@fmls K4134@last)))) K4130@ls/false) ((lambda (K4142@t) ((lambda (K4144@ls/false) (if K4144@ls/false (apply (lambda (K4146@who K4147@expr) (if (K2261@id? K4146@who) (K2684@bless (list 'define K4146@who (list 'let (list (list 'v K4147@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote K4146@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (K2993@syntax-violation '#f '"invalid name" K4114@stx))) K4144@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4142@t))) (K2758@syntax-dispatch K4142@t '(_ any any)))) K4128@t))) (K2758@syntax-dispatch K4128@t '(_ (any . #(each+ any () any)) any . each-any)))) K4116@t))) (K2758@syntax-dispatch K4116@t '(_ (any . each-any) any . each-any)))) K4114@stx))) (set! K2700@trace-define-syntax-macro (lambda (K4150@stx) ((lambda (K4152@t) ((lambda (K4154@ls/false) (if K4154@ls/false (apply (lambda (K4156@who K4157@expr) (if (K2261@id? K4156@who) (K2684@bless (list 'define-syntax K4156@who (list 'make-traced-macro (list 'quote K4156@who) K4157@expr))) (K2993@syntax-violation '#f '"invalid name" K4150@stx))) K4154@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4152@t))) (K2758@syntax-dispatch K4152@t '(_ any any)))) K4150@stx))) (set! K2702@trace-let/rec-syntax (lambda (K4160@who) (lambda (K4162@stx) ((lambda (K4164@t) ((lambda (K4166@ls/false) (if K4166@ls/false (apply (lambda (K4168@lhs* K4169@rhs* K4170@b K4171@b*) (if (K2271@valid-bound-ids? K4168@lhs*) ((lambda (K4176@rhs*) (K2684@bless (cons K4160@who (cons (map list K4168@lhs* K4176@rhs*) (cons K4170@b K4171@b*))))) (map (lambda (K4178@lhs K4179@rhs) (list 'make-traced-macro (list 'quote K4178@lhs) K4179@rhs)) K4168@lhs* K4169@rhs*)) (K2688@invalid-fmls-error K4162@stx K4168@lhs*))) K4166@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4164@t))) (K2758@syntax-dispatch K4164@t '(_ #(each (any any)) any . each-any)))) K4162@stx)))) (set! K2704@trace-let-syntax-macro (K2702@trace-let/rec-syntax 'let-syntax)) (set! K2706@trace-letrec-syntax-macro (K2702@trace-let/rec-syntax 'letrec-syntax)) (set! K2708@guard-macro (lambda (K4182@x) ((lambda (K4185@gen-clauses) (begin (set! K4185@gen-clauses (lambda (K4208@con K4209@outerk K4210@clause*) ((lambda (K4215@f K4217@f*) (begin (set! K4215@f (lambda (K4268@x K4269@k) ((lambda (K4272@t) ((lambda (K4274@ls/false) (if K4274@ls/false (apply (lambda (K4276@e K4277@p) ((lambda (K4280@t) (list 'let (list (list K4280@t K4276@e)) (list 'if K4280@t (list K4277@p K4280@t) K4269@k))) (K1147@K911@gensym))) K4274@ls/false) ((lambda (K4282@t) ((lambda (K4284@ls/false) (if K4284@ls/false (apply (lambda (K4286@e) ((lambda (K4288@t) (list 'let (list (list K4288@t K4286@e)) (list 'if K4288@t K4288@t K4269@k))) (K1147@K911@gensym))) K4284@ls/false) ((lambda (K4290@t) ((lambda (K4292@ls/false) (if K4292@ls/false (apply (lambda (K4294@e K4295@v K4296@v*) (list 'if K4294@e (cons 'begin (cons K4295@v K4296@v*)) K4269@k)) K4292@ls/false) ((lambda (K4300@t) ((lambda (K4302@ls/false) (if K4302@ls/false (apply (lambda () (K2993@syntax-violation '#f '"invalid guard clause" K4268@x)) K4302@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4300@t))) (K2758@syntax-dispatch K4300@t '_))) K4290@t))) (K2758@syntax-dispatch K4290@t '(any any . each-any)))) K4282@t))) (K2758@syntax-dispatch K4282@t '(any)))) K4272@t))) (K2758@syntax-dispatch K4272@t '(any #(scheme-id =>) any)))) K4268@x))) (set! K4217@f* (lambda (K4228@x*) ((lambda (K4230@t) ((lambda (K4232@ls/false) (if K4232@ls/false (apply (lambda () ((lambda (K4234@g) (values (list K4234@g (list 'lambda '() (list 'raise-continuable K4208@con))) K4234@g)) (K1147@K911@gensym))) K4232@ls/false) ((lambda (K4236@t) ((lambda (K4238@ls/false) (if K4238@ls/false (apply (lambda (K4240@e K4241@e*) (values (cons 'begin (cons K4240@e K4241@e*)) '#f)) K4238@ls/false) ((lambda (K4244@t) ((lambda (K4246@ls/false) (if K4246@ls/false (apply (lambda (K4248@cls K4249@cls*) (call-with-values (lambda () (K4217@f* K4249@cls*)) (lambda (K4254@K4252@e K4255@K4253@g) ((lambda (K4258@g K4259@e) (values (K4215@f K4248@cls K4259@e) K4258@g)) K4255@K4253@g K4254@K4252@e)))) K4246@ls/false) ((lambda (K4262@t) ((lambda (K4264@ls/false) (if K4264@ls/false (apply (lambda (K4266@others) (K2993@syntax-violation '#f '"invalid guard clause" K4266@others)) K4264@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4262@t))) (K2758@syntax-dispatch K4262@t 'any))) K4244@t))) (K2758@syntax-dispatch K4244@t '(any . any)))) K4236@t))) (K2758@syntax-dispatch K4236@t '((#(scheme-id else) any . each-any))))) K4230@t))) (K2758@syntax-dispatch K4230@t '()))) K4228@x*))) (call-with-values (lambda () (K4217@f* K4210@clause*)) (lambda (K4220@K4218@code K4221@K4219@raisek) ((lambda (K4224@raisek K4225@code) (if K4224@raisek (list (list 'call/cc (list 'lambda (list K4224@raisek) (list K4209@outerk (list 'lambda '() K4225@code))))) (list K4209@outerk (list 'lambda '() K4225@code)))) K4221@K4219@raisek K4220@K4218@code))))) '#f '#f))) ((lambda (K4186@t) ((lambda (K4188@ls/false) (if (and K4188@ls/false (apply (lambda (K4190@con K4191@clause* K4192@b K4193@b*) (K2261@id? K4190@con)) K4188@ls/false)) (apply (lambda (K4198@con K4199@clause* K4200@b K4201@b*) ((lambda (K4206@outerk) (K2684@bless (list (list 'call/cc (list 'lambda (list K4206@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list K4198@con) (K4185@gen-clauses K4198@con K4206@outerk K4199@clause*)) (cons 'lambda (cons '() (cons K4200@b K4201@b*)))))))))) (K1147@K911@gensym))) K4188@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4186@t))) (K2758@syntax-dispatch K4186@t '(_ (any . each-any) any . each-any)))) K4182@x))) '#f))) (set! K2710@define-enumeration-macro (lambda (K4304@stx) ((lambda (K4307@set? K4309@remove-dups) (begin (set! K4307@set? (lambda (K4332@x) (or (null? K4332@x) (and (not (memq (car K4332@x) (cdr K4332@x))) (K4307@set? (cdr K4332@x)))))) (set! K4309@remove-dups (lambda (K4330@ls) (if (null? K4330@ls) '() (cons (car K4330@ls) (K4309@remove-dups (remq (car K4330@ls) (cdr K4330@ls))))))) ((lambda (K4310@t) ((lambda (K4312@ls/false) (if (and K4312@ls/false (apply (lambda (K4314@name K4315@id* K4316@maker) (and (K2261@id? K4314@name) (K2261@id? K4316@maker) (for-all K2261@id? K4315@id*))) K4312@ls/false)) (apply (lambda (K4320@name K4321@id* K4322@maker) ((lambda (K4326@name* K4327@mk) (K2684@bless (list 'begin (list 'define K4327@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote K4326@name*)))) (list 'define-syntax K4320@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote K4326@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote K4320@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax K4322@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote K4322@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote K4326@name*)) (cons 'syntax-violation (cons (list 'quote K4322@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons K4327@mk '('(n* ...)))))))))))) (K4309@remove-dups (K2999@syntax->datum K4321@id*)) (K1147@K911@gensym))) K4312@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4310@t))) (K2758@syntax-dispatch K4310@t '(_ any each-any any)))) K4304@stx))) '#f '#f))) (set! K2712@time-macro (lambda (K4334@stx) ((lambda (K4336@t) ((lambda (K4338@ls/false) (if K4338@ls/false (apply (lambda (K4340@expr) (K2684@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() K4340@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) K4338@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4336@t))) (K2758@syntax-dispatch K4336@t '(_ any)))) K4334@stx))) (set! K2714@delay-macro (lambda (K4342@stx) ((lambda (K4344@t) ((lambda (K4346@ls/false) (if K4346@ls/false (apply (lambda (K4348@expr) (K2684@bless (list 'make-promise (list 'lambda '() K4348@expr)))) K4346@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4344@t))) (K2758@syntax-dispatch K4344@t '(_ any)))) K4342@stx))) (set! K2716@assert-macro (lambda (K4350@stx) ((lambda (K4352@t) ((lambda (K4354@ls/false) (if K4354@ls/false (apply (lambda (K4356@expr) ((lambda (K4358@pos) (K2684@bless (list 'unless K4356@expr (list 'assertion-error (list 'quote K4356@expr) (list 'quote K4358@pos))))) (or (K2985@expression-position K4350@stx) (K2985@expression-position K4356@expr)))) K4354@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4352@t))) (K2758@syntax-dispatch K4352@t '(_ any)))) K4350@stx))) (set! K2718@endianness-macro (lambda (K4360@stx) ((lambda (K4362@t) ((lambda (K4364@ls/false) (if K4364@ls/false (apply (lambda (K4366@e) ((lambda (K4368@t) (if (memv K4368@t '(little)) (K2684@bless ''little) (if (memv K4368@t '(big)) (K2684@bless ''big) (K2993@syntax-violation '#f '"endianness must be big or little" K4360@stx)))) (K2999@syntax->datum K4366@e))) K4364@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4362@t))) (K2758@syntax-dispatch K4362@t '(_ any)))) K4360@stx))) (set! K2720@identifier-syntax-macro (lambda (K4370@stx) ((lambda (K4372@t) ((lambda (K4374@ls/false) (if K4374@ls/false (apply (lambda (K4376@expr) (K2684@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax K4376@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax K4376@expr) '((syntax (e* ...)))))))))) K4374@ls/false) ((lambda (K4378@t) ((lambda (K4380@ls/false) (if (and K4380@ls/false (apply (lambda (K4382@id1 K4383@expr1 K4384@id2 K4385@expr2 K4386@expr3) (and (K2261@id? K4382@id1) (K2261@id? K4384@id2) (K2261@id? K4385@expr2))) K4380@ls/false)) (apply (lambda (K4392@id1 K4393@expr1 K4394@id2 K4395@expr2 K4396@expr3) (K2684@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax K4393@expr1)) (list (list 'set! 'id K4395@expr2) (list 'syntax K4396@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons K4393@expr1 '(e* ...))))))))) K4380@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4378@t))) (K2758@syntax-dispatch K4378@t '(_ (any any) ((#(scheme-id set!) any any) any))))) K4372@t))) (K2758@syntax-dispatch K4372@t '(_ any)))) K4370@stx))) (set! K2722@do-macro (lambda (K4402@stx) ((lambda (K4405@bind) (begin (set! K4405@bind (lambda (K4428@x) ((lambda (K4430@t) ((lambda (K4432@ls/false) (if K4432@ls/false (apply (lambda (K4434@x K4435@init) (list K4434@x K4435@init K4434@x)) K4432@ls/false) ((lambda (K4438@t) ((lambda (K4440@ls/false) (if K4440@ls/false (apply (lambda (K4442@x K4443@init K4444@step) (list K4442@x K4443@init K4444@step)) K4440@ls/false) ((lambda (K4448@t) ((lambda (K4450@ls/false) (if K4450@ls/false (apply (lambda () (K2993@syntax-violation '#f '"invalid binding" K4402@stx)) K4450@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4448@t))) (K2758@syntax-dispatch K4448@t '_))) K4438@t))) (K2758@syntax-dispatch K4438@t '(any any any)))) K4430@t))) (K2758@syntax-dispatch K4430@t '(any any)))) K4428@x))) ((lambda (K4406@t) ((lambda (K4408@ls/false) (if K4408@ls/false (apply (lambda (K4410@binding* K4411@test K4412@expr* K4413@command*) ((lambda (K4418@t) ((lambda (K4420@ls/false) (if K4420@ls/false (apply (lambda (K4422@x* K4423@init* K4424@step*) (if (K2271@valid-bound-ids? K4422@x*) (K2684@bless (list 'letrec (list (list 'loop (list 'lambda K4422@x* (list 'if K4411@test (cons 'begin (cons '(if #f #f) K4412@expr*)) (cons 'begin (append K4413@command* (list (cons 'loop K4424@step*)))))))) (cons 'loop K4423@init*))) (K2993@syntax-violation '#f '"invalid bindings" K4402@stx))) K4420@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4418@t))) (K2758@syntax-dispatch K4418@t '#(each (any any any))))) (map K4405@bind K4410@binding*))) K4408@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4406@t))) (K2758@syntax-dispatch K4406@t '(_ each-any (any . each-any) . each-any)))) K4402@stx))) '#f))) (set! K2724@let*-macro (lambda (K4452@stx) ((lambda (K4454@t) ((lambda (K4456@ls/false) (if (and K4456@ls/false (apply (lambda (K4458@lhs* K4459@rhs* K4460@b K4461@b*) (for-all K2261@id? K4458@lhs*)) K4456@ls/false)) (apply (lambda (K4466@lhs* K4467@rhs* K4468@b K4469@b*) (K2684@bless ((letrec ((K4474@f (lambda (K4476@x*) (if (null? K4476@x*) (cons 'let (cons '() (cons K4468@b K4469@b*))) (list 'let (list (car K4476@x*)) (K4474@f (cdr K4476@x*))))))) K4474@f) (map list K4466@lhs* K4467@rhs*)))) K4456@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4454@t))) (K2758@syntax-dispatch K4454@t '(_ #(each (any any)) any . each-any)))) K4452@stx))) (set! K2726@or-macro (lambda (K4478@stx) ((lambda (K4480@t) ((lambda (K4482@ls/false) (if K4482@ls/false (apply (lambda () '#f) K4482@ls/false) ((lambda (K4484@t) ((lambda (K4486@ls/false) (if K4486@ls/false (apply (lambda (K4488@e K4489@e*) (K2684@bless ((letrec ((K4492@f (lambda (K4494@e K4495@e*) (if (null? K4495@e*) (list 'begin '#f K4494@e) (list 'let (list (list 't K4494@e)) (list 'if 't 't (K4492@f (car K4495@e*) (cdr K4495@e*)))))))) K4492@f) K4488@e K4489@e*))) K4486@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4484@t))) (K2758@syntax-dispatch K4484@t '(_ any . each-any)))) K4480@t))) (K2758@syntax-dispatch K4480@t '(_)))) K4478@stx))) (set! K2728@and-macro (lambda (K4498@stx) ((lambda (K4500@t) ((lambda (K4502@ls/false) (if K4502@ls/false (apply (lambda () '#t) K4502@ls/false) ((lambda (K4504@t) ((lambda (K4506@ls/false) (if K4506@ls/false (apply (lambda (K4508@e K4509@e*) (K2684@bless ((letrec ((K4512@f (lambda (K4514@e K4515@e*) (if (null? K4515@e*) (list 'begin '#f K4514@e) (cons 'if (cons K4514@e (cons (K4512@f (car K4515@e*) (cdr K4515@e*)) '(#f)))))))) K4512@f) K4508@e K4509@e*))) K4506@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4504@t))) (K2758@syntax-dispatch K4504@t '(_ any . each-any)))) K4500@t))) (K2758@syntax-dispatch K4500@t '(_)))) K4498@stx))) (set! K2730@cond-macro (lambda (K4518@stx) ((lambda (K4520@t) ((lambda (K4522@ls/false) (if K4522@ls/false (apply (lambda (K4524@cls K4525@cls*) (K2684@bless ((letrec ((K4528@f (lambda (K4530@cls K4531@cls*) (if (null? K4531@cls*) ((lambda (K4534@t) ((lambda (K4536@ls/false) (if K4536@ls/false (apply (lambda (K4538@e K4539@e*) (cons 'begin (cons K4538@e K4539@e*))) K4536@ls/false) ((lambda (K4542@t) ((lambda (K4544@ls/false) (if K4544@ls/false (apply (lambda (K4546@e K4547@p) (list 'let (list (list 't K4546@e)) (list 'if 't (cons K4547@p '(t))))) K4544@ls/false) ((lambda (K4550@t) ((lambda (K4552@ls/false) (if K4552@ls/false (apply (lambda (K4554@e) (cons 'or (cons K4554@e '((if #f #f))))) K4552@ls/false) ((lambda (K4556@t) ((lambda (K4558@ls/false) (if K4558@ls/false (apply (lambda (K4560@e K4561@e*) (list 'if K4560@e (cons 'begin K4561@e*))) K4558@ls/false) ((lambda (K4564@t) ((lambda (K4566@ls/false) (if K4566@ls/false (apply (lambda () (K2993@syntax-violation '#f '"invalid last clause" K4518@stx)) K4566@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4564@t))) (K2758@syntax-dispatch K4564@t '_))) K4556@t))) (K2758@syntax-dispatch K4556@t '(any . each-any)))) K4550@t))) (K2758@syntax-dispatch K4550@t '(any)))) K4542@t))) (K2758@syntax-dispatch K4542@t '(any #(scheme-id =>) any)))) K4534@t))) (K2758@syntax-dispatch K4534@t '(#(scheme-id else) any . each-any)))) K4530@cls) ((lambda (K4568@t) ((lambda (K4570@ls/false) (if K4570@ls/false (apply (lambda (K4572@e K4573@e*) (K2993@syntax-violation '#f '"incorrect position of keyword else" K4518@stx)) K4570@ls/false) ((lambda (K4576@t) ((lambda (K4578@ls/false) (if K4578@ls/false (apply (lambda (K4580@e K4581@p) (list 'let (list (list 't K4580@e)) (list 'if 't (cons K4581@p '(t)) (K4528@f (car K4531@cls*) (cdr K4531@cls*))))) K4578@ls/false) ((lambda (K4584@t) ((lambda (K4586@ls/false) (if K4586@ls/false (apply (lambda (K4588@e) (list 'or K4588@e (K4528@f (car K4531@cls*) (cdr K4531@cls*)))) K4586@ls/false) ((lambda (K4590@t) ((lambda (K4592@ls/false) (if K4592@ls/false (apply (lambda (K4594@e K4595@e*) (list 'if K4594@e (cons 'begin K4595@e*) (K4528@f (car K4531@cls*) (cdr K4531@cls*)))) K4592@ls/false) ((lambda (K4598@t) ((lambda (K4600@ls/false) (if K4600@ls/false (apply (lambda () (K2993@syntax-violation '#f '"invalid last clause" K4518@stx)) K4600@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4598@t))) (K2758@syntax-dispatch K4598@t '_))) K4590@t))) (K2758@syntax-dispatch K4590@t '(any . each-any)))) K4584@t))) (K2758@syntax-dispatch K4584@t '(any)))) K4576@t))) (K2758@syntax-dispatch K4576@t '(any #(scheme-id =>) any)))) K4568@t))) (K2758@syntax-dispatch K4568@t '(#(scheme-id else) any . each-any)))) K4530@cls))))) K4528@f) K4524@cls K4525@cls*))) K4522@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4520@t))) (K2758@syntax-dispatch K4520@t '(_ any . each-any)))) K4518@stx))) (set! K2732@do-include (lambda (K4602@stx K4603@id K4604@filename) ((lambda (K4608@filename) (begin (if (not (and (string? K4608@filename) (K2261@id? K4603@id))) (K2993@syntax-violation '#f '"invalid syntax" K4602@stx) (void)) (cons (K2684@bless 'begin) (with-input-from-file K4608@filename (lambda () ((letrec ((K4610@f (lambda (K4612@ls) ((lambda (K4614@x) (if (eof-object? K4614@x) (reverse K4612@ls) (K4610@f (cons (K2227@datum->stx K4603@id K4614@x) K4612@ls)))) (K1148@K913@read-annotated))))) K4610@f) '())))))) (K2283@stx->datum K4604@filename)))) (set! K2734@include-macro (lambda (K4616@e) ((lambda (K4618@t) ((lambda (K4620@ls/false) (if K4620@ls/false (apply (lambda (K4622@id K4623@filename) (K2732@do-include K4616@e K4622@id K4623@filename)) K4620@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4618@t))) (K2758@syntax-dispatch K4618@t '(any any)))) K4616@e))) (set! K2736@include-into-macro (lambda (K4626@e) ((lambda (K4628@t) ((lambda (K4630@ls/false) (if K4630@ls/false (apply (lambda (K4632@id K4633@filename) (K2732@do-include K4626@e K4632@id K4633@filename)) K4630@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4628@t))) (K2758@syntax-dispatch K4628@t '(_ any any)))) K4626@e))) (set! K2738@syntax-rules-macro (lambda (K4636@e) ((lambda (K4638@t) ((lambda (K4640@ls/false) (if K4640@ls/false (apply (lambda (K4642@lits K4643@pat* K4644@tmp*) (begin (K2764@verify-literals K4642@lits K4636@e) (K2684@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons K4642@lits (map (lambda (K4648@pat K4649@tmp) ((lambda (K4652@t) ((lambda (K4654@ls/false) (if K4654@ls/false (apply (lambda (K4656@rest) (list (cons 'g K4656@rest) (list 'syntax K4649@tmp))) K4654@ls/false) ((lambda (K4658@t) ((lambda (K4660@ls/false) (if K4660@ls/false (apply (lambda () (K2993@syntax-violation '#f '"invalid syntax-rules pattern" K4636@e K4648@pat)) K4660@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4658@t))) (K2758@syntax-dispatch K4658@t '_))) K4652@t))) (K2758@syntax-dispatch K4652@t '(_ . any)))) K4648@pat)) K4643@pat* K4644@tmp*)))))))) K4640@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4638@t))) (K2758@syntax-dispatch K4638@t '(_ each-any . #(each (any any)))))) K4636@e))) (set! K2740@quasiquote-macro ((lambda () ((lambda (K4663@datum K4691@quasicons* K4693@quasicons K4695@quasiappend K4697@quasivector K4699@vquasi K4701@quasi) (begin (set! K4663@datum (lambda (K4920@x) (list (K2640@scheme-stx 'quote) (K2237@mkstx K4920@x '() '() '())))) (set! K4691@quasicons* (lambda (K4912@x K4913@y) ((letrec ((K4916@f (lambda (K4918@x) (if (null? K4918@x) K4913@y (K4693@quasicons (car K4918@x) (K4916@f (cdr K4918@x))))))) K4916@f) K4912@x))) (set! K4693@quasicons (lambda (K4874@x K4875@y) ((lambda (K4878@t) ((lambda (K4880@ls/false) (if K4880@ls/false (apply (lambda (K4882@dy) ((lambda (K4884@t) ((lambda (K4886@ls/false) (if K4886@ls/false (apply (lambda (K4888@dx) (list (K2640@scheme-stx 'quote) (cons K4888@dx K4882@dy))) K4886@ls/false) ((lambda (K4890@t) ((lambda (K4892@ls/false) (if K4892@ls/false (apply (lambda () ((lambda (K4894@t) ((lambda (K4896@ls/false) (if K4896@ls/false (apply (lambda () (list (K2640@scheme-stx 'list) K4874@x)) K4896@ls/false) ((lambda (K4898@t) ((lambda (K4900@ls/false) (if K4900@ls/false (apply (lambda () (list (K2640@scheme-stx 'cons) K4874@x K4875@y)) K4900@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4898@t))) (K2758@syntax-dispatch K4898@t '_))) K4894@t))) (K2758@syntax-dispatch K4894@t '()))) K4882@dy)) K4892@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4890@t))) (K2758@syntax-dispatch K4890@t '_))) K4884@t))) (K2758@syntax-dispatch K4884@t '(#(scheme-id quote) any)))) K4874@x)) K4880@ls/false) ((lambda (K4902@t) ((lambda (K4904@ls/false) (if K4904@ls/false (apply (lambda (K4906@stuff) (cons* (K2640@scheme-stx 'list) K4874@x K4906@stuff)) K4904@ls/false) ((lambda (K4908@t) ((lambda (K4910@ls/false) (if K4910@ls/false (apply (lambda () (list (K2640@scheme-stx 'cons) K4874@x K4875@y)) K4910@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4908@t))) (K2758@syntax-dispatch K4908@t '_))) K4902@t))) (K2758@syntax-dispatch K4902@t '(#(scheme-id list) . each-any)))) K4878@t))) (K2758@syntax-dispatch K4878@t '(#(scheme-id quote) any)))) K4875@y))) (set! K4695@quasiappend (lambda (K4848@x K4849@y) ((lambda (K4852@ls) (if (null? K4852@ls) (list (K2640@scheme-stx 'quote) '()) (if (null? (cdr K4852@ls)) (car K4852@ls) (cons* (K2640@scheme-stx 'append) K4852@ls)))) ((letrec ((K4854@f (lambda (K4856@x) (if (null? K4856@x) ((lambda (K4858@t) ((lambda (K4860@ls/false) (if K4860@ls/false (apply (lambda () '()) K4860@ls/false) ((lambda (K4862@t) ((lambda (K4864@ls/false) (if K4864@ls/false (apply (lambda () (list K4849@y)) K4864@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4862@t))) (K2758@syntax-dispatch K4862@t '_))) K4858@t))) (K2758@syntax-dispatch K4858@t '(#(scheme-id quote) ())))) K4849@y) ((lambda (K4866@t) ((lambda (K4868@ls/false) (if K4868@ls/false (apply (lambda () (K4854@f (cdr K4856@x))) K4868@ls/false) ((lambda (K4870@t) ((lambda (K4872@ls/false) (if K4872@ls/false (apply (lambda () (cons (car K4856@x) (K4854@f (cdr K4856@x)))) K4872@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4870@t))) (K2758@syntax-dispatch K4870@t '_))) K4866@t))) (K2758@syntax-dispatch K4866@t '(#(scheme-id quote) ())))) (car K4856@x)))))) K4854@f) K4848@x)))) (set! K4697@quasivector (lambda (K4798@x) ((lambda (K4800@pat-x) ((lambda (K4802@t) ((lambda (K4804@ls/false) (if K4804@ls/false (apply (lambda (K4806@x*) (list (K2640@scheme-stx 'quote) (list->vector K4806@x*))) K4804@ls/false) ((lambda (K4808@t) ((lambda (K4810@ls/false) (if K4810@ls/false (apply (lambda () ((letrec ((K4812@f (lambda (K4814@x K4815@k) ((lambda (K4818@t) ((lambda (K4820@ls/false) (if K4820@ls/false (apply (lambda (K4822@x*) (K4815@k (map (lambda (K4824@x) (list (K2640@scheme-stx 'quote) K4824@x)) K4822@x*))) K4820@ls/false) ((lambda (K4826@t) ((lambda (K4828@ls/false) (if K4828@ls/false (apply (lambda (K4830@x*) (K4815@k K4830@x*)) K4828@ls/false) ((lambda (K4832@t) ((lambda (K4834@ls/false) (if K4834@ls/false (apply (lambda (K4836@x K4837@y) (K4812@f K4837@y (lambda (K4840@ls) (K4815@k (cons K4836@x K4840@ls))))) K4834@ls/false) ((lambda (K4842@t) ((lambda (K4844@ls/false) (if K4844@ls/false (apply (lambda () (list (K2640@scheme-stx 'list->vector) K4800@pat-x)) K4844@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4842@t))) (K2758@syntax-dispatch K4842@t '_))) K4832@t))) (K2758@syntax-dispatch K4832@t '(#(scheme-id cons) any any)))) K4826@t))) (K2758@syntax-dispatch K4826@t '(#(scheme-id list) . each-any)))) K4818@t))) (K2758@syntax-dispatch K4818@t '(#(scheme-id quote) each-any)))) K4814@x)))) K4812@f) K4798@x (lambda (K4846@ls) (cons* (K2640@scheme-stx 'vector) K4846@ls)))) K4810@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4808@t))) (K2758@syntax-dispatch K4808@t '_))) K4802@t))) (K2758@syntax-dispatch K4802@t '(#(scheme-id quote) each-any)))) K4800@pat-x)) K4798@x))) (set! K4699@vquasi (lambda (K4764@p K4765@lev) ((lambda (K4768@t) ((lambda (K4770@ls/false) (if K4770@ls/false (apply (lambda (K4772@p K4773@q) ((lambda (K4776@t) ((lambda (K4778@ls/false) (if K4778@ls/false (apply (lambda (K4780@p) (if (= K4765@lev '0) (K4691@quasicons* K4780@p (K4699@vquasi K4773@q K4765@lev)) (K4693@quasicons (K4693@quasicons (K4663@datum 'unquote) (K4701@quasi K4780@p (- K4765@lev '1))) (K4699@vquasi K4773@q K4765@lev)))) K4778@ls/false) ((lambda (K4782@t) ((lambda (K4784@ls/false) (if K4784@ls/false (apply (lambda (K4786@p) (if (= K4765@lev '0) (K4695@quasiappend K4786@p (K4699@vquasi K4773@q K4765@lev)) (K4693@quasicons (K4693@quasicons (K4663@datum 'unquote-splicing) (K4701@quasi K4786@p (- K4765@lev '1))) (K4699@vquasi K4773@q K4765@lev)))) K4784@ls/false) ((lambda (K4788@t) ((lambda (K4790@ls/false) (if K4790@ls/false (apply (lambda (K4792@p) (K4693@quasicons (K4701@quasi K4792@p K4765@lev) (K4699@vquasi K4773@q K4765@lev))) K4790@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4788@t))) (K2758@syntax-dispatch K4788@t 'any))) K4782@t))) (K2758@syntax-dispatch K4782@t '(#(scheme-id unquote-splicing) . each-any)))) K4776@t))) (K2758@syntax-dispatch K4776@t '(#(scheme-id unquote) . each-any)))) K4772@p)) K4770@ls/false) ((lambda (K4794@t) ((lambda (K4796@ls/false) (if K4796@ls/false (apply (lambda () (list (K2640@scheme-stx 'quote) '())) K4796@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4794@t))) (K2758@syntax-dispatch K4794@t '()))) K4768@t))) (K2758@syntax-dispatch K4768@t '(any . any)))) K4764@p))) (set! K4701@quasi (lambda (K4710@p K4711@lev) ((lambda (K4714@t) ((lambda (K4716@ls/false) (if K4716@ls/false (apply (lambda (K4718@p) (if (= K4711@lev '0) K4718@p (K4693@quasicons (K4663@datum 'unquote) (K4701@quasi (list K4718@p) (- K4711@lev '1))))) K4716@ls/false) ((lambda (K4720@t) ((lambda (K4722@ls/false) (if K4722@ls/false (apply (lambda (K4724@p K4725@q) (if (= K4711@lev '0) (K4691@quasicons* K4724@p (K4701@quasi K4725@q K4711@lev)) (K4693@quasicons (K4693@quasicons (K4663@datum 'unquote) (K4701@quasi K4724@p (- K4711@lev '1))) (K4701@quasi K4725@q K4711@lev)))) K4722@ls/false) ((lambda (K4728@t) ((lambda (K4730@ls/false) (if K4730@ls/false (apply (lambda (K4732@p K4733@q) (if (= K4711@lev '0) (K4695@quasiappend K4732@p (K4701@quasi K4733@q K4711@lev)) (K4693@quasicons (K4693@quasicons (K4663@datum 'unquote-splicing) (K4701@quasi K4732@p (- K4711@lev '1))) (K4701@quasi K4733@q K4711@lev)))) K4730@ls/false) ((lambda (K4736@t) ((lambda (K4738@ls/false) (if K4738@ls/false (apply (lambda (K4740@p) (K4693@quasicons (K4663@datum 'quasiquote) (K4701@quasi (list K4740@p) (+ K4711@lev '1)))) K4738@ls/false) ((lambda (K4742@t) ((lambda (K4744@ls/false) (if K4744@ls/false (apply (lambda (K4746@p K4747@q) (K4693@quasicons (K4701@quasi K4746@p K4711@lev) (K4701@quasi K4747@q K4711@lev))) K4744@ls/false) ((lambda (K4750@t) ((lambda (K4752@ls/false) (if (and K4752@ls/false (apply (lambda (K4754@x) (not (K2205@stx? K4754@x))) K4752@ls/false)) (apply (lambda (K4756@x) (K4697@quasivector (K4699@vquasi K4756@x K4711@lev))) K4752@ls/false) ((lambda (K4758@t) ((lambda (K4760@ls/false) (if K4760@ls/false (apply (lambda (K4762@p) (list (K2640@scheme-stx 'quote) K4762@p)) K4760@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4758@t))) (K2758@syntax-dispatch K4758@t 'any))) K4750@t))) (K2758@syntax-dispatch K4750@t '#(vector each-any)))) K4742@t))) (K2758@syntax-dispatch K4742@t '(any . any)))) K4736@t))) (K2758@syntax-dispatch K4736@t '(#(scheme-id quasiquote) any)))) K4728@t))) (K2758@syntax-dispatch K4728@t '((#(scheme-id unquote-splicing) . each-any) . any)))) K4720@t))) (K2758@syntax-dispatch K4720@t '((#(scheme-id unquote) . each-any) . any)))) K4714@t))) (K2758@syntax-dispatch K4714@t '(#(scheme-id unquote) any)))) K4710@p))) (lambda (K4702@x) ((lambda (K4704@t) ((lambda (K4706@ls/false) (if K4706@ls/false (apply (lambda (K4708@e) (K4701@quasi K4708@e '0)) K4706@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4704@t))) (K2758@syntax-dispatch K4704@t '(_ any)))) K4702@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! K2742@quasisyntax-macro ((lambda () ((lambda (K4923@quasi) (begin (set! K4923@quasi (lambda (K4947@p K4948@lev) ((lambda (K4951@t) ((lambda (K4953@ls/false) (if K4953@ls/false (apply (lambda (K4955@p) (if (= K4948@lev '0) ((lambda (K4957@g) (values (list K4957@g) (list K4955@p) K4957@g)) (K1147@K911@gensym)) (call-with-values (lambda () (K4923@quasi K4955@p (- K4948@lev '1))) (lambda (K4962@K4959@lhs* K4963@K4960@rhs* K4964@K4961@p) ((lambda (K4968@p K4969@rhs* K4970@lhs*) (values K4970@lhs* K4969@rhs* (list 'unsyntax K4968@p))) K4964@K4961@p K4963@K4960@rhs* K4962@K4959@lhs*))))) K4953@ls/false) ((lambda (K4974@t) ((lambda (K4976@ls/false) (if (and K4976@ls/false (apply (lambda () (= K4948@lev '0)) K4976@ls/false)) (apply (lambda () (K2993@syntax-violation '#f '"incorrect use of unsyntax" K4947@p)) K4976@ls/false) ((lambda (K4978@t) ((lambda (K4980@ls/false) (if K4980@ls/false (apply (lambda (K4982@p* K4983@q) (call-with-values (lambda () (K4923@quasi K4983@q K4948@lev)) (lambda (K4989@K4986@lhs* K4990@K4987@rhs* K4991@K4988@q) ((lambda (K4995@q K4996@rhs* K4997@lhs*) (if (= K4948@lev '0) ((lambda (K5001@g*) (values (append K5001@g* K4997@lhs*) (append K4982@p* K4996@rhs*) (append K5001@g* K4995@q))) (map (lambda (K5003@x) (K1147@K911@gensym)) K4982@p*)) (call-with-values (lambda () (K4923@quasi K4982@p* (- K4948@lev '1))) (lambda (K5008@K5005@lhs2* K5009@K5006@rhs2* K5010@K5007@p*) ((lambda (K5014@p* K5015@rhs2* K5016@lhs2*) (values (append K5016@lhs2* K4997@lhs*) (append K5015@rhs2* K4996@rhs*) (cons (cons 'unsyntax K5014@p*) K4995@q))) K5010@K5007@p* K5009@K5006@rhs2* K5008@K5005@lhs2*))))) K4991@K4988@q K4990@K4987@rhs* K4989@K4986@lhs*)))) K4980@ls/false) ((lambda (K5020@t) ((lambda (K5022@ls/false) (if K5022@ls/false (apply (lambda (K5024@p* K5025@q) (call-with-values (lambda () (K4923@quasi K5025@q K4948@lev)) (lambda (K5031@K5028@lhs* K5032@K5029@rhs* K5033@K5030@q) ((lambda (K5037@q K5038@rhs* K5039@lhs*) (if (= K4948@lev '0) ((lambda (K5043@g*) (values (append (map (lambda (K5045@g) (cons K5045@g '(...))) K5043@g*) K5039@lhs*) (append K5024@p* K5038@rhs*) (append (apply append (map (lambda (K5047@g) (cons K5047@g '(...))) K5043@g*)) K5037@q))) (map (lambda (K5049@x) (K1147@K911@gensym)) K5024@p*)) (call-with-values (lambda () (K4923@quasi K5024@p* (- K4948@lev '1))) (lambda (K5054@K5051@lhs2* K5055@K5052@rhs2* K5056@K5053@p*) ((lambda (K5060@p* K5061@rhs2* K5062@lhs2*) (values (append K5062@lhs2* K5039@lhs*) (append K5061@rhs2* K5038@rhs*) (cons (cons 'unsyntax-splicing K5060@p*) K5037@q))) K5056@K5053@p* K5055@K5052@rhs2* K5054@K5051@lhs2*))))) K5033@K5030@q K5032@K5029@rhs* K5031@K5028@lhs*)))) K5022@ls/false) ((lambda (K5066@t) ((lambda (K5068@ls/false) (if (and K5068@ls/false (apply (lambda () (= K4948@lev '0)) K5068@ls/false)) (apply (lambda () (K2993@syntax-violation '#f '"incorrect use of unsyntax-splicing" K4947@p)) K5068@ls/false) ((lambda (K5070@t) ((lambda (K5072@ls/false) (if K5072@ls/false (apply (lambda (K5074@p) (call-with-values (lambda () (K4923@quasi K5074@p (+ K4948@lev '1))) (lambda (K5079@K5076@lhs* K5080@K5077@rhs* K5081@K5078@p) ((lambda (K5085@p K5086@rhs* K5087@lhs*) (values K5087@lhs* K5086@rhs* (list 'quasisyntax K5085@p))) K5081@K5078@p K5080@K5077@rhs* K5079@K5076@lhs*)))) K5072@ls/false) ((lambda (K5091@t) ((lambda (K5093@ls/false) (if K5093@ls/false (apply (lambda (K5095@p K5096@q) (call-with-values (lambda () (K4923@quasi K5095@p K4948@lev)) (lambda (K5105@K5099@lhs* K5106@K5100@rhs* K5107@K5101@p) (call-with-values (lambda () (K4923@quasi K5096@q K4948@lev)) (lambda (K5111@K5102@lhs2* K5112@K5103@rhs2* K5113@K5104@q) ((lambda (K5117@q K5118@rhs2* K5119@lhs2* K5120@p K5121@rhs* K5122@lhs*) (values (append K5119@lhs2* K5122@lhs*) (append K5118@rhs2* K5121@rhs*) (cons K5120@p K5117@q))) K5113@K5104@q K5112@K5103@rhs2* K5111@K5102@lhs2* K5107@K5101@p K5106@K5100@rhs* K5105@K5099@lhs*)))))) K5093@ls/false) ((lambda (K5129@t) ((lambda (K5131@ls/false) (if K5131@ls/false (apply (lambda (K5133@x*) (call-with-values (lambda () (K4923@quasi K5133@x* K4948@lev)) (lambda (K5138@K5135@lhs* K5139@K5136@rhs* K5140@K5137@x*) ((lambda (K5144@x* K5145@rhs* K5146@lhs*) (values K5146@lhs* K5145@rhs* (list->vector K5144@x*))) K5140@K5137@x* K5139@K5136@rhs* K5138@K5135@lhs*)))) K5131@ls/false) ((lambda (K5150@t) ((lambda (K5152@ls/false) (if K5152@ls/false (apply (lambda () (values '() '() K4947@p)) K5152@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5150@t))) (K2758@syntax-dispatch K5150@t '_))) K5129@t))) (K2758@syntax-dispatch K5129@t '#(vector each-any)))) K5091@t))) (K2758@syntax-dispatch K5091@t '(any . any)))) K5070@t))) (K2758@syntax-dispatch K5070@t '(#(scheme-id quasisyntax) any)))) K5066@t))) (K2758@syntax-dispatch K5066@t '#(scheme-id unsyntax-splicing)))) K5020@t))) (K2758@syntax-dispatch K5020@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) K4978@t))) (K2758@syntax-dispatch K4978@t '((#(scheme-id unsyntax) . each-any) . any)))) K4974@t))) (K2758@syntax-dispatch K4974@t '#(scheme-id unsyntax)))) K4951@t))) (K2758@syntax-dispatch K4951@t '(#(scheme-id unsyntax) any)))) K4947@p))) (lambda (K4924@x) ((lambda (K4926@t) ((lambda (K4928@ls/false) (if K4928@ls/false (apply (lambda (K4930@e) (call-with-values (lambda () (K4923@quasi K4930@e '0)) (lambda (K4935@K4932@lhs* K4936@K4933@rhs* K4937@K4934@v) ((lambda (K4941@v K4942@rhs* K4943@lhs*) (K2684@bless (list 'syntax-case (cons 'list K4942@rhs*) '() (list K4943@lhs* (list 'syntax K4941@v))))) K4937@K4934@v K4936@K4933@rhs* K4935@K4932@lhs*)))) K4928@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K4926@t))) (K2758@syntax-dispatch K4926@t '(_ any)))) K4924@x)))) '#f)))) (set! K2744@define-struct-macro (lambda (K5154@stx) (K2993@syntax-violation '#f '"define-struct not supported" K5154@stx))) (set! K2746@define-record-type-macro (lambda (K5156@x) ((lambda (K5159@id K5161@get-record-name K5163@get-record-constructor-name K5165@get-record-predicate-name K5167@get-clause K5169@foo-rtd-code K5171@parent-rtd-code K5173@parent-rcd-code K5175@foo-rcd-code K5177@get-protocol-code K5179@get-fields K5181@get-mutator-indices K5183@get-mutators K5185@get-accessors K5187@enumerate K5189@do-define-record K5191@verify-clauses) (begin (set! K5159@id (lambda (K5658@ctxt . K5660@str*) (K2997@datum->syntax K5658@ctxt (string->symbol (apply string-append (map (lambda (K5662@x) (if (symbol? K5662@x) (symbol->string K5662@x) (if (string? K5662@x) K5662@x (assertion-violation 'define-record-type '"BUG")))) K5660@str*)))))) (set! K5161@get-record-name (lambda (K5640@spec) ((lambda (K5642@t) ((lambda (K5644@ls/false) (if K5644@ls/false (apply (lambda (K5646@foo K5647@make-foo K5648@foo?) K5646@foo) K5644@ls/false) ((lambda (K5652@t) ((lambda (K5654@ls/false) (if K5654@ls/false (apply (lambda (K5656@foo) K5656@foo) K5654@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5652@t))) (K2758@syntax-dispatch K5652@t 'any))) K5642@t))) (K2758@syntax-dispatch K5642@t '(any any any)))) K5640@spec))) (set! K5163@get-record-constructor-name (lambda (K5620@spec) ((lambda (K5622@t) ((lambda (K5624@ls/false) (if K5624@ls/false (apply (lambda (K5626@foo K5627@make-foo K5628@foo?) K5627@make-foo) K5624@ls/false) ((lambda (K5632@t) ((lambda (K5634@ls/false) (if (and K5634@ls/false (apply (lambda (K5636@foo) (K2261@id? K5636@foo)) K5634@ls/false)) (apply (lambda (K5638@foo) (K5159@id K5638@foo '"make-" (K2283@stx->datum K5638@foo))) K5634@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5632@t))) (K2758@syntax-dispatch K5632@t 'any))) K5622@t))) (K2758@syntax-dispatch K5622@t '(any any any)))) K5620@spec))) (set! K5165@get-record-predicate-name (lambda (K5600@spec) ((lambda (K5602@t) ((lambda (K5604@ls/false) (if K5604@ls/false (apply (lambda (K5606@foo K5607@make-foo K5608@foo?) K5608@foo?) K5604@ls/false) ((lambda (K5612@t) ((lambda (K5614@ls/false) (if (and K5614@ls/false (apply (lambda (K5616@foo) (K2261@id? K5616@foo)) K5614@ls/false)) (apply (lambda (K5618@foo) (K5159@id K5618@foo (K2283@stx->datum K5618@foo) '"?")) K5614@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5612@t))) (K2758@syntax-dispatch K5612@t 'any))) K5602@t))) (K2758@syntax-dispatch K5602@t '(any any any)))) K5600@spec))) (set! K5167@get-clause (lambda (K5582@id K5583@ls) ((lambda (K5586@t) ((lambda (K5588@ls/false) (if K5588@ls/false (apply (lambda () '#f) K5588@ls/false) ((lambda (K5590@t) ((lambda (K5592@ls/false) (if K5592@ls/false (apply (lambda (K5594@x K5595@rest K5596@ls) (if (K2269@free-id=? (K2684@bless K5582@id) K5594@x) (cons K5594@x K5595@rest) (K5167@get-clause K5582@id K5596@ls))) K5592@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5590@t))) (K2758@syntax-dispatch K5590@t '((any . any) . any)))) K5586@t))) (K2758@syntax-dispatch K5586@t '()))) K5583@ls))) (set! K5169@foo-rtd-code (lambda (K5500@name K5501@clause* K5502@parent-rtd-code) ((lambda (K5507@convert-field-spec*) (begin (set! K5507@convert-field-spec* (lambda (K5556@ls) (list->vector (map (lambda (K5558@x) ((lambda (K5560@t) ((lambda (K5562@ls/false) (if K5562@ls/false (apply (lambda (K5564@name K5565@rest) (list 'mutable K5564@name)) K5562@ls/false) ((lambda (K5568@t) ((lambda (K5570@ls/false) (if K5570@ls/false (apply (lambda (K5572@name K5573@rest) (list 'immutable K5572@name)) K5570@ls/false) ((lambda (K5576@t) ((lambda (K5578@ls/false) (if K5578@ls/false (apply (lambda (K5580@name) (list 'immutable K5580@name)) K5578@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5576@t))) (K2758@syntax-dispatch K5576@t 'any))) K5568@t))) (K2758@syntax-dispatch K5568@t '(#(scheme-id immutable) any . any)))) K5560@t))) (K2758@syntax-dispatch K5560@t '(#(scheme-id mutable) any . any)))) K5558@x)) K5556@ls)))) ((lambda (K5508@uid-code K5509@sealed? K5510@opaque? K5511@fields) (K2684@bless (list 'make-record-type-descriptor (list 'quote K5500@name) K5502@parent-rtd-code K5508@uid-code K5509@sealed? K5510@opaque? K5511@fields))) ((lambda (K5516@t) ((lambda (K5518@ls/false) (if K5518@ls/false (apply (lambda () (list 'quote (K1147@K911@gensym))) K5518@ls/false) ((lambda (K5520@t) ((lambda (K5522@ls/false) (if K5522@ls/false (apply (lambda (K5524@uid) (list 'quote K5524@uid)) K5522@ls/false) ((lambda (K5526@t) ((lambda (K5528@ls/false) (if K5528@ls/false (apply (lambda () '#f) K5528@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5526@t))) (K2758@syntax-dispatch K5526@t '_))) K5520@t))) (K2758@syntax-dispatch K5520@t '(_ any)))) K5516@t))) (K2758@syntax-dispatch K5516@t '(_)))) (K5167@get-clause 'nongenerative K5501@clause*)) ((lambda (K5530@t) ((lambda (K5532@ls/false) (if K5532@ls/false (apply (lambda () '#t) K5532@ls/false) ((lambda (K5534@t) ((lambda (K5536@ls/false) (if K5536@ls/false (apply (lambda () '#f) K5536@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5534@t))) (K2758@syntax-dispatch K5534@t '_))) K5530@t))) (K2758@syntax-dispatch K5530@t '(_ #(atom #t))))) (K5167@get-clause 'sealed K5501@clause*)) ((lambda (K5538@t) ((lambda (K5540@ls/false) (if K5540@ls/false (apply (lambda () '#t) K5540@ls/false) ((lambda (K5542@t) ((lambda (K5544@ls/false) (if K5544@ls/false (apply (lambda () '#f) K5544@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5542@t))) (K2758@syntax-dispatch K5542@t '_))) K5538@t))) (K2758@syntax-dispatch K5538@t '(_ #(atom #t))))) (K5167@get-clause 'opaque K5501@clause*)) ((lambda (K5546@t) ((lambda (K5548@ls/false) (if K5548@ls/false (apply (lambda (K5550@field-spec*) (list 'quote (K5507@convert-field-spec* K5550@field-spec*))) K5548@ls/false) ((lambda (K5552@t) ((lambda (K5554@ls/false) (if K5554@ls/false (apply (lambda () ''#()) K5554@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5552@t))) (K2758@syntax-dispatch K5552@t '_))) K5546@t))) (K2758@syntax-dispatch K5546@t '(_ . each-any)))) (K5167@get-clause 'fields K5501@clause*))))) '#f))) (set! K5171@parent-rtd-code (lambda (K5476@clause*) ((lambda (K5478@t) ((lambda (K5480@ls/false) (if K5480@ls/false (apply (lambda (K5482@name) (begin (if (K2205@stx? K5482@name) (format (current-error-port) '"name=~a\n" (K2209@stx-expr K5482@name)) (void)) (list 'record-type-descriptor K5482@name))) K5480@ls/false) ((lambda (K5484@t) ((lambda (K5486@ls/false) (if K5486@ls/false (apply (lambda () ((lambda (K5488@t) ((lambda (K5490@ls/false) (if K5490@ls/false (apply (lambda (K5492@rtd K5493@rcd) K5492@rtd) K5490@ls/false) ((lambda (K5496@t) ((lambda (K5498@ls/false) (if K5498@ls/false (apply (lambda () '#f) K5498@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5496@t))) (K2758@syntax-dispatch K5496@t '#(atom #f)))) K5488@t))) (K2758@syntax-dispatch K5488@t '(_ any any)))) (K5167@get-clause 'parent-rtd K5476@clause*))) K5486@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5484@t))) (K2758@syntax-dispatch K5484@t '#(atom #f)))) K5478@t))) (K2758@syntax-dispatch K5478@t '(_ any)))) (K5167@get-clause 'parent K5476@clause*)))) (set! K5173@parent-rcd-code (lambda (K5452@clause*) ((lambda (K5454@t) ((lambda (K5456@ls/false) (if K5456@ls/false (apply (lambda (K5458@name) (list 'record-constructor-descriptor K5458@name)) K5456@ls/false) ((lambda (K5460@t) ((lambda (K5462@ls/false) (if K5462@ls/false (apply (lambda () ((lambda (K5464@t) ((lambda (K5466@ls/false) (if K5466@ls/false (apply (lambda (K5468@rtd K5469@rcd) K5469@rcd) K5466@ls/false) ((lambda (K5472@t) ((lambda (K5474@ls/false) (if K5474@ls/false (apply (lambda () '#f) K5474@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5472@t))) (K2758@syntax-dispatch K5472@t '#(atom #f)))) K5464@t))) (K2758@syntax-dispatch K5464@t '(_ any any)))) (K5167@get-clause 'parent-rtd K5452@clause*))) K5462@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5460@t))) (K2758@syntax-dispatch K5460@t '#(atom #f)))) K5454@t))) (K2758@syntax-dispatch K5454@t '(_ any)))) (K5167@get-clause 'parent K5452@clause*)))) (set! K5175@foo-rcd-code (lambda (K5444@clause* K5445@foo-rtd K5446@protocol K5447@parent-rcd-code) (list 'make-record-constructor-descriptor K5445@foo-rtd K5447@parent-rcd-code K5446@protocol))) (set! K5177@get-protocol-code (lambda (K5432@clause*) ((lambda (K5434@t) ((lambda (K5436@ls/false) (if K5436@ls/false (apply (lambda (K5438@expr) K5438@expr) K5436@ls/false) ((lambda (K5440@t) ((lambda (K5442@ls/false) (if K5442@ls/false (apply (lambda () '#f) K5442@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5440@t))) (K2758@syntax-dispatch K5440@t '_))) K5434@t))) (K2758@syntax-dispatch K5434@t '(_ any)))) (K5167@get-clause 'protocol K5432@clause*)))) (set! K5179@get-fields (lambda (K5414@clause*) ((lambda (K5416@t) ((lambda (K5418@ls/false) (if K5418@ls/false (apply (lambda () '()) K5418@ls/false) ((lambda (K5420@t) ((lambda (K5422@ls/false) (if K5422@ls/false (apply (lambda (K5424@f*) K5424@f*) K5422@ls/false) ((lambda (K5426@t) ((lambda (K5428@ls/false) (if K5428@ls/false (apply (lambda (K5430@rest) (K5179@get-fields K5430@rest)) K5428@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5426@t))) (K2758@syntax-dispatch K5426@t '(_ . any)))) K5420@t))) (K2758@syntax-dispatch K5420@t '((#(scheme-id fields) . each-any) . _)))) K5416@t))) (K2758@syntax-dispatch K5416@t '()))) K5414@clause*))) (set! K5181@get-mutator-indices (lambda (K5390@fields) ((letrec ((K5392@f (lambda (K5394@fields K5395@i) ((lambda (K5398@t) ((lambda (K5400@ls/false) (if K5400@ls/false (apply (lambda () '()) K5400@ls/false) ((lambda (K5402@t) ((lambda (K5404@ls/false) (if K5404@ls/false (apply (lambda (K5406@rest) (cons K5395@i (K5392@f K5406@rest (+ K5395@i '1)))) K5404@ls/false) ((lambda (K5408@t) ((lambda (K5410@ls/false) (if K5410@ls/false (apply (lambda (K5412@rest) (K5392@f K5412@rest (+ K5395@i '1))) K5410@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5408@t))) (K2758@syntax-dispatch K5408@t '(_ . any)))) K5402@t))) (K2758@syntax-dispatch K5402@t '((#(scheme-id mutable) . _) . any)))) K5398@t))) (K2758@syntax-dispatch K5398@t '()))) K5394@fields)))) K5392@f) K5390@fields '0))) (set! K5183@get-mutators (lambda (K5348@foo K5349@fields) ((lambda (K5353@gen-name) (begin (set! K5353@gen-name (lambda (K5388@x) (K2997@datum->syntax K5348@foo (string->symbol (string-append (symbol->string (K2999@syntax->datum K5348@foo)) '"-" (symbol->string (K2999@syntax->datum K5388@x)) '"-set!"))))) ((letrec ((K5354@f (lambda (K5356@fields) ((lambda (K5358@t) ((lambda (K5360@ls/false) (if K5360@ls/false (apply (lambda () '()) K5360@ls/false) ((lambda (K5362@t) ((lambda (K5364@ls/false) (if K5364@ls/false (apply (lambda (K5366@name K5367@accessor K5368@mutator K5369@rest) (cons K5368@mutator (K5354@f K5369@rest))) K5364@ls/false) ((lambda (K5374@t) ((lambda (K5376@ls/false) (if K5376@ls/false (apply (lambda (K5378@name K5379@rest) (cons (K5353@gen-name K5378@name) (K5354@f K5379@rest))) K5376@ls/false) ((lambda (K5382@t) ((lambda (K5384@ls/false) (if K5384@ls/false (apply (lambda (K5386@rest) (K5354@f K5386@rest)) K5384@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5382@t))) (K2758@syntax-dispatch K5382@t '(_ . any)))) K5374@t))) (K2758@syntax-dispatch K5374@t '((#(scheme-id mutable) any) . any)))) K5362@t))) (K2758@syntax-dispatch K5362@t '((#(scheme-id mutable) any any any) . any)))) K5358@t))) (K2758@syntax-dispatch K5358@t '()))) K5356@fields)))) K5354@f) K5349@fields))) '#f))) (set! K5185@get-accessors (lambda (K5280@foo K5281@fields) ((lambda (K5285@gen-name) (begin (set! K5285@gen-name (lambda (K5346@x) (K2997@datum->syntax K5280@foo (string->symbol (string-append (symbol->string (K2999@syntax->datum K5280@foo)) '"-" (symbol->string (K2999@syntax->datum K5346@x))))))) (map (lambda (K5286@field) ((lambda (K5288@t) ((lambda (K5290@ls/false) (if (and K5290@ls/false (apply (lambda (K5292@name K5293@accessor K5294@mutator) (K2261@id? K5293@accessor)) K5290@ls/false)) (apply (lambda (K5298@name K5299@accessor K5300@mutator) K5299@accessor) K5290@ls/false) ((lambda (K5304@t) ((lambda (K5306@ls/false) (if (and K5306@ls/false (apply (lambda (K5308@name K5309@accessor) (K2261@id? K5309@accessor)) K5306@ls/false)) (apply (lambda (K5312@name K5313@accessor) K5313@accessor) K5306@ls/false) ((lambda (K5316@t) ((lambda (K5318@ls/false) (if (and K5318@ls/false (apply (lambda (K5320@name) (K2261@id? K5320@name)) K5318@ls/false)) (apply (lambda (K5322@name) (K5285@gen-name K5322@name)) K5318@ls/false) ((lambda (K5324@t) ((lambda (K5326@ls/false) (if (and K5326@ls/false (apply (lambda (K5328@name) (K2261@id? K5328@name)) K5326@ls/false)) (apply (lambda (K5330@name) (K5285@gen-name K5330@name)) K5326@ls/false) ((lambda (K5332@t) ((lambda (K5334@ls/false) (if (and K5334@ls/false (apply (lambda (K5336@name) (K2261@id? K5336@name)) K5334@ls/false)) (apply (lambda (K5338@name) (K5285@gen-name K5338@name)) K5334@ls/false) ((lambda (K5340@t) ((lambda (K5342@ls/false) (if K5342@ls/false (apply (lambda (K5344@others) (K2993@syntax-violation '#f '"invalid field spec" K5286@field)) K5342@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5340@t))) (K2758@syntax-dispatch K5340@t 'any))) K5332@t))) (K2758@syntax-dispatch K5332@t 'any))) K5324@t))) (K2758@syntax-dispatch K5324@t '(#(scheme-id immutable) any)))) K5316@t))) (K2758@syntax-dispatch K5316@t '(#(scheme-id mutable) any)))) K5304@t))) (K2758@syntax-dispatch K5304@t '(#(scheme-id immutable) any any)))) K5288@t))) (K2758@syntax-dispatch K5288@t '(#(scheme-id mutable) any any any)))) K5286@field)) K5281@fields))) '#f))) (set! K5187@enumerate (lambda (K5272@ls) ((letrec ((K5274@f (lambda (K5276@ls K5277@i) (if (null? K5276@ls) '() (cons K5277@i (K5274@f (cdr K5276@ls) (+ K5277@i '1))))))) K5274@f) K5272@ls '0))) (set! K5189@do-define-record (lambda (K5232@namespec K5233@clause*) ((lambda (K5236@foo) ((lambda (K5238@foo-rtd) ((lambda (K5240@foo-rcd) ((lambda (K5242@protocol) ((lambda (K5244@make-foo) ((lambda (K5246@fields) ((lambda (K5248@idx*) ((lambda (K5250@foo-x*) ((lambda (K5252@set-foo-x!*) ((lambda (K5254@set-foo-idx*) ((lambda (K5256@foo?) ((lambda (K5258@foo-rtd-code) ((lambda (K5260@foo-rcd-code) ((lambda (K5262@protocol-code) ((lambda () (K2684@bless (cons 'begin (cons (list 'define K5238@foo-rtd K5258@foo-rtd-code) (cons (list 'define K5242@protocol K5262@protocol-code) (cons (list 'define K5240@foo-rcd K5260@foo-rcd-code) (cons (list 'define-syntax K5236@foo (list 'list ''$rtd (list 'syntax K5238@foo-rtd) (list 'syntax K5240@foo-rcd))) (cons (list 'define K5256@foo? (list 'record-predicate K5238@foo-rtd)) (cons (list 'define K5244@make-foo (list 'record-constructor K5240@foo-rcd)) (append (map (lambda (K5264@foo-x K5265@idx) (list 'define K5264@foo-x (list 'record-accessor K5238@foo-rtd K5265@idx))) K5250@foo-x* K5248@idx*) (map (lambda (K5268@set-foo-x! K5269@idx) (list 'define K5268@set-foo-x! (list 'record-mutator K5238@foo-rtd K5269@idx))) K5252@set-foo-x!* K5254@set-foo-idx*))))))))))))) (K5177@get-protocol-code K5233@clause*))) (K5175@foo-rcd-code K5233@clause* K5238@foo-rtd K5242@protocol (K5173@parent-rcd-code K5233@clause*)))) (K5169@foo-rtd-code K5236@foo K5233@clause* (K5171@parent-rtd-code K5233@clause*)))) (K5165@get-record-predicate-name K5232@namespec))) (K5181@get-mutator-indices K5246@fields))) (K5183@get-mutators K5236@foo K5246@fields))) (K5185@get-accessors K5236@foo K5246@fields))) (K5187@enumerate K5246@fields))) (K5179@get-fields K5233@clause*))) (K5163@get-record-constructor-name K5232@namespec))) (K1147@K911@gensym))) (K1147@K911@gensym))) (K1147@K911@gensym))) (K5161@get-record-name K5232@namespec)))) (set! K5191@verify-clauses (lambda (K5200@x K5201@cls*) ((lambda (K5205@valid-kwds K5207@free-id-member?) (begin (set! K5205@valid-kwds (map K2684@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! K5207@free-id-member? (lambda (K5228@x K5229@ls) (and (pair? K5229@ls) (or (K2269@free-id=? K5228@x (car K5229@ls)) (K5207@free-id-member? K5228@x (cdr K5229@ls)))))) ((letrec ((K5208@f (lambda (K5210@cls* K5211@seen*) (if (not (null? K5210@cls*)) ((lambda (K5214@t) ((lambda (K5216@ls/false) (if K5216@ls/false (apply (lambda (K5218@kwd K5219@rest) (if (or (not (K2261@id? K5218@kwd)) (not (K5207@free-id-member? K5218@kwd K5205@valid-kwds))) (K2993@syntax-violation '#f '"not a valid define-record-type keyword" K5218@kwd) (if (K2275@bound-id-member? K5218@kwd K5211@seen*) (K2993@syntax-violation '#f '"duplicate use of keyword " K5200@x K5218@kwd) (K5208@f (cdr K5210@cls*) (cons K5218@kwd K5211@seen*))))) K5216@ls/false) ((lambda (K5222@t) ((lambda (K5224@ls/false) (if K5224@ls/false (apply (lambda (K5226@cls) (K2993@syntax-violation '#f '"malformed define-record-type clause" K5226@cls)) K5224@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5222@t))) (K2758@syntax-dispatch K5222@t 'any))) K5214@t))) (K2758@syntax-dispatch K5214@t '(any . any)))) (car K5210@cls*)) (void))))) K5208@f) K5201@cls* '()))) '#f '#f))) ((lambda (K5192@t) ((lambda (K5194@ls/false) (if K5194@ls/false (apply (lambda (K5196@namespec K5197@clause*) (begin (K5191@verify-clauses K5156@x K5197@clause*) (K5189@do-define-record K5196@namespec K5197@clause*))) K5194@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5192@t))) (K2758@syntax-dispatch K5192@t '(_ any . each-any)))) K5156@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! K2748@define-condition-type-macro (lambda (K5664@x) ((lambda (K5667@mkname) (begin (set! K5667@mkname (lambda (K5712@name K5713@suffix) (K2997@datum->syntax K5712@name (string->symbol (string-append (symbol->string (K2999@syntax->datum K5712@name)) K5713@suffix))))) ((lambda (K5668@t) ((lambda (K5670@ls/false) (if (and K5670@ls/false (apply (lambda (K5672@ctxt K5673@name K5674@super K5675@constructor K5676@predicate K5677@field* K5678@accessor*) (and (K2261@id? K5673@name) (K2261@id? K5674@super) (K2261@id? K5675@constructor) (K2261@id? K5676@predicate) (for-all K2261@id? K5677@field*) (for-all K2261@id? K5678@accessor*))) K5670@ls/false)) (apply (lambda (K5686@ctxt K5687@name K5688@super K5689@constructor K5690@predicate K5691@field* K5692@accessor*) ((lambda (K5700@aux-accessor*) (K2684@bless (cons 'begin (cons (cons 'define-record-type (cons (list K5687@name K5689@constructor (K1147@K911@gensym)) (cons (list 'parent K5688@super) (cons (cons 'fields (map (lambda (K5702@field K5703@aux) (list 'immutable K5702@field K5703@aux)) K5691@field* K5700@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define K5690@predicate (list 'condition-predicate (list 'record-type-descriptor K5687@name))) (map (lambda (K5706@accessor K5707@aux) (list 'define K5706@accessor (list 'condition-accessor (list 'record-type-descriptor K5687@name) K5707@aux))) K5692@accessor* K5700@aux-accessor*)))))) (map (lambda (K5710@x) (K1147@K911@gensym)) K5692@accessor*))) K5670@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5668@t))) (K2758@syntax-dispatch K5668@t '(any any any any any . #(each (any any)))))) K5664@x))) '#f))) (set! K2750@incorrect-usage-macro (lambda (K5716@e) (K2993@syntax-violation '#f '"incorrect usage of auxiliary keyword" K5716@e))) (set! K2752@parameterize-macro (lambda (K5718@e) ((lambda (K5720@t) ((lambda (K5722@ls/false) (if K5722@ls/false (apply (lambda (K5724@b K5725@b*) (K2684@bless (cons 'let (cons '() (cons K5724@b K5725@b*))))) K5722@ls/false) ((lambda (K5728@t) ((lambda (K5730@ls/false) (if K5730@ls/false (apply (lambda (K5732@olhs* K5733@orhs* K5734@b K5735@b*) ((lambda (K5740@lhs* K5741@rhs*) (K2684@bless (cons (list 'lambda (append K5740@lhs* K5741@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (K5744@lhs K5745@rhs) (list 'let (list (list 't (list K5744@lhs))) (list K5744@lhs K5745@rhs) (cons 'set! (cons K5745@rhs '(t))))) K5740@lhs* K5741@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons K5734@b K5735@b*))) '(swap)))))) (append K5732@olhs* K5733@orhs*)))) (K2975@generate-temporaries K5732@olhs*) (K2975@generate-temporaries K5733@orhs*))) K5730@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5728@t))) (K2758@syntax-dispatch K5728@t '(_ #(each (any any)) any . each-any)))) K5720@t))) (K2758@syntax-dispatch K5720@t '(_ () any . each-any)))) K5718@e))) (set! K2754@foreign-call-transformer (lambda (K5748@e K5749@r K5750@mr) ((lambda (K5754@t) ((lambda (K5756@ls/false) (if K5756@ls/false (apply (lambda (K5758@name K5759@arg*) (cons 'foreign-call (cons (K2794@chi-expr K5758@name K5749@r K5750@mr) (K2790@chi-expr* K5759@arg* K5749@r K5750@mr)))) K5756@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5754@t))) (K2758@syntax-dispatch K5754@t '(_ any . each-any)))) K5748@e))) (set! K2756@convert-pattern (lambda (K5762@pattern K5763@keys) ((lambda (K5767@cvt* K5769@cvt) (begin (set! K5767@cvt* (lambda (K5912@p* K5913@n K5914@ids) (if (null? K5912@p*) (values '() K5914@ids) (call-with-values (lambda () (K5767@cvt* (cdr K5912@p*) K5913@n K5914@ids)) (lambda (K5920@K5918@y K5921@K5919@ids) ((lambda (K5924@ids K5925@y) (call-with-values (lambda () (K5769@cvt (car K5912@p*) K5913@n K5924@ids)) (lambda (K5930@K5928@x K5931@K5929@ids) ((lambda (K5934@ids K5935@x) (values (cons K5935@x K5925@y) K5934@ids)) K5931@K5929@ids K5930@K5928@x)))) K5921@K5919@ids K5920@K5918@y)))))) (set! K5769@cvt (lambda (K5770@p K5771@n K5772@ids) ((lambda (K5776@t) ((lambda (K5778@ls/false) (if (and K5778@ls/false (apply (lambda (K5780@id) (K2261@id? K5780@id)) K5778@ls/false)) (apply (lambda (K5782@id) (if (K2275@bound-id-member? K5770@p K5763@keys) (values (vector 'free-id K5770@p) K5772@ids) (if (K2269@free-id=? K5770@p (K2640@scheme-stx '_)) (values '_ K5772@ids) (values 'any (cons (cons K5770@p K5771@n) K5772@ids))))) K5778@ls/false) ((lambda (K5784@t) ((lambda (K5786@ls/false) (if (and K5786@ls/false (apply (lambda (K5788@p K5789@dots) (K2760@ellipsis? K5789@dots)) K5786@ls/false)) (apply (lambda (K5792@p K5793@dots) (call-with-values (lambda () (K5769@cvt K5792@p (+ K5771@n '1) K5772@ids)) (lambda (K5798@K5796@p K5799@K5797@ids) ((lambda (K5802@ids K5803@p) (values (if (eq? K5803@p 'any) 'each-any (vector 'each K5803@p)) K5802@ids)) K5799@K5797@ids K5798@K5796@p)))) K5786@ls/false) ((lambda (K5806@t) ((lambda (K5808@ls/false) (if (and K5808@ls/false (apply (lambda (K5810@x K5811@dots K5812@ys K5813@z) (K2760@ellipsis? K5811@dots)) K5808@ls/false)) (apply (lambda (K5818@x K5819@dots K5820@ys K5821@z) (call-with-values (lambda () (K5769@cvt K5821@z K5771@n K5772@ids)) (lambda (K5828@K5826@z K5829@K5827@ids) ((lambda (K5832@ids K5833@z) (call-with-values (lambda () (K5767@cvt* K5820@ys K5771@n K5832@ids)) (lambda (K5838@K5836@ys K5839@K5837@ids) ((lambda (K5842@ids K5843@ys) (call-with-values (lambda () (K5769@cvt K5818@x (+ K5771@n '1) K5842@ids)) (lambda (K5848@K5846@x K5849@K5847@ids) ((lambda (K5852@ids K5853@x) (values (vector 'each+ K5853@x (reverse K5843@ys) K5833@z) K5852@ids)) K5849@K5847@ids K5848@K5846@x)))) K5839@K5837@ids K5838@K5836@ys)))) K5829@K5827@ids K5828@K5826@z)))) K5808@ls/false) ((lambda (K5856@t) ((lambda (K5858@ls/false) (if K5858@ls/false (apply (lambda (K5860@x K5861@y) (call-with-values (lambda () (K5769@cvt K5861@y K5771@n K5772@ids)) (lambda (K5866@K5864@y K5867@K5865@ids) ((lambda (K5870@ids K5871@y) (call-with-values (lambda () (K5769@cvt K5860@x K5771@n K5870@ids)) (lambda (K5876@K5874@x K5877@K5875@ids) ((lambda (K5880@ids K5881@x) (values (cons K5881@x K5871@y) K5880@ids)) K5877@K5875@ids K5876@K5874@x)))) K5867@K5865@ids K5866@K5864@y)))) K5858@ls/false) ((lambda (K5884@t) ((lambda (K5886@ls/false) (if K5886@ls/false (apply (lambda () (values '() K5772@ids)) K5886@ls/false) ((lambda (K5888@t) ((lambda (K5890@ls/false) (if (and K5890@ls/false (apply (lambda (K5892@p) (not (K2205@stx? K5892@p))) K5890@ls/false)) (apply (lambda (K5894@p) (call-with-values (lambda () (K5769@cvt K5894@p K5771@n K5772@ids)) (lambda (K5898@K5896@p K5899@K5897@ids) ((lambda (K5902@ids K5903@p) (values (vector 'vector K5903@p) K5902@ids)) K5899@K5897@ids K5898@K5896@p)))) K5890@ls/false) ((lambda (K5906@t) ((lambda (K5908@ls/false) (if K5908@ls/false (apply (lambda (K5910@datum) (values (vector 'atom (K2283@stx->datum K5910@datum)) K5772@ids)) K5908@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K5906@t))) (K2758@syntax-dispatch K5906@t 'any))) K5888@t))) (K2758@syntax-dispatch K5888@t '#(vector each-any)))) K5884@t))) (K2758@syntax-dispatch K5884@t '()))) K5856@t))) (K2758@syntax-dispatch K5856@t '(any . any)))) K5806@t))) (K2758@syntax-dispatch K5806@t '(any any . #(each+ any () any))))) K5784@t))) (K2758@syntax-dispatch K5784@t '(any any)))) K5776@t))) (K2758@syntax-dispatch K5776@t 'any))) K5770@p))) (K5769@cvt K5762@pattern '0 '()))) '#f '#f))) (set! K2758@syntax-dispatch ((lambda () ((lambda (K5939@stx^ K5941@match-each K5943@match-each+ K5945@match-each-any K5947@match-empty K5949@combine K5951@match* K5953@match) (begin (set! K5939@stx^ (lambda (K6140@e K6141@m* K6142@s* K6143@ae*) (if (and (null? K6141@m*) (null? K6142@s*) (null? K6143@ae*)) K6140@e (K2237@mkstx K6140@e K6141@m* K6142@s* K6143@ae*)))) (set! K5941@match-each (lambda (K6111@e K6112@p K6113@m* K6114@s* K6115@ae*) (if (pair? K6111@e) ((lambda (K6121@first) (and K6121@first ((lambda (K6123@rest) (and K6123@rest (cons K6121@first K6123@rest))) (K5941@match-each (cdr K6111@e) K6112@p K6113@m* K6114@s* K6115@ae*)))) (K5953@match (car K6111@e) K6112@p K6113@m* K6114@s* K6115@ae* '())) (if (null? K6111@e) '() (if (K2205@stx? K6111@e) (and (not (K2131@top-marked? K6113@m*)) (call-with-values (lambda () (K2235@join-wraps K6113@m* K6114@s* K6115@ae* K6111@e)) (lambda (K6128@K6125@m* K6129@K6126@s* K6130@K6127@ae*) ((lambda (K6134@ae* K6135@s* K6136@m*) (K5941@match-each (K2209@stx-expr K6111@e) K6112@p K6136@m* K6135@s* K6134@ae*)) K6130@K6127@ae* K6129@K6126@s* K6128@K6125@m*)))) (if (K1150@K917@annotation? K6111@e) (K5941@match-each (K1152@K921@annotation-expression K6111@e) K6112@p K6113@m* K6114@s* K6115@ae*) '#f)))))) (set! K5943@match-each+ (lambda (K6053@e K6054@x-pat K6055@y-pat K6056@z-pat K6057@m* K6058@s* K6059@ae* K6060@r) ((letrec ((K6069@f (lambda (K6071@e K6072@m* K6073@s* K6074@ae*) (if (pair? K6071@e) (call-with-values (lambda () (K6069@f (cdr K6071@e) K6072@m* K6073@s* K6074@ae*)) (lambda (K6082@K6079@xr* K6083@K6080@y-pat K6084@K6081@r) ((lambda (K6088@r K6089@y-pat K6090@xr*) (if K6088@r (if (null? K6089@y-pat) ((lambda (K6094@xr) (if K6094@xr (values (cons K6094@xr K6090@xr*) K6089@y-pat K6088@r) (values '#f '#f '#f))) (K5953@match (car K6071@e) K6054@x-pat K6072@m* K6073@s* K6074@ae* '())) (values '() (cdr K6089@y-pat) (K5953@match (car K6071@e) (car K6089@y-pat) K6072@m* K6073@s* K6074@ae* K6088@r))) (values '#f '#f '#f))) K6084@K6081@r K6083@K6080@y-pat K6082@K6079@xr*))) (if (K2205@stx? K6071@e) (if (K2131@top-marked? K6072@m*) (values '() K6055@y-pat (K5953@match K6071@e K6056@z-pat K6072@m* K6073@s* K6074@ae* K6060@r)) (call-with-values (lambda () (K2235@join-wraps K6072@m* K6073@s* K6074@ae* K6071@e)) (lambda (K6099@K6096@m* K6100@K6097@s* K6101@K6098@ae*) ((lambda (K6105@ae* K6106@s* K6107@m*) (K6069@f (K2209@stx-expr K6071@e) K6107@m* K6106@s* K6105@ae*)) K6101@K6098@ae* K6100@K6097@s* K6099@K6096@m*)))) (if (K1150@K917@annotation? K6071@e) (K6069@f (K1152@K921@annotation-expression K6071@e) K6072@m* K6073@s* K6074@ae*) (values '() K6055@y-pat (K5953@match K6071@e K6056@z-pat K6072@m* K6073@s* K6074@ae* K6060@r)))))))) K6069@f) K6053@e K6057@m* K6058@s* K6059@ae*))) (set! K5945@match-each-any (lambda (K6028@e K6029@m* K6030@s* K6031@ae*) (if (pair? K6028@e) ((lambda (K6036@l) (and K6036@l (cons (K5939@stx^ (car K6028@e) K6029@m* K6030@s* K6031@ae*) K6036@l))) (K5945@match-each-any (cdr K6028@e) K6029@m* K6030@s* K6031@ae*)) (if (null? K6028@e) '() (if (K2205@stx? K6028@e) (and (not (K2131@top-marked? K6029@m*)) (call-with-values (lambda () (K2235@join-wraps K6029@m* K6030@s* K6031@ae* K6028@e)) (lambda (K6041@K6038@m* K6042@K6039@s* K6043@K6040@ae*) ((lambda (K6047@ae* K6048@s* K6049@m*) (K5945@match-each-any (K2209@stx-expr K6028@e) K6049@m* K6048@s* K6047@ae*)) K6043@K6040@ae* K6042@K6039@s* K6041@K6038@m*)))) (if (K1150@K917@annotation? K6028@e) (K5945@match-each-any (K1152@K921@annotation-expression K6028@e) K6029@m* K6030@s* K6031@ae*) '#f)))))) (set! K5947@match-empty (lambda (K6022@p K6023@r) (if (null? K6022@p) K6023@r (if (eq? K6022@p '_) K6023@r (if (eq? K6022@p 'any) (cons '() K6023@r) (if (pair? K6022@p) (K5947@match-empty (car K6022@p) (K5947@match-empty (cdr K6022@p) K6023@r)) (if (eq? K6022@p 'each-any) (cons '() K6023@r) ((lambda (K6026@t) (if (memv K6026@t '(each)) (K5947@match-empty (vector-ref K6022@p '1) K6023@r) (if (memv K6026@t '(each+)) (K5947@match-empty (vector-ref K6022@p '1) (K5947@match-empty (reverse (vector-ref K6022@p '2)) (K5947@match-empty (vector-ref K6022@p '3) K6023@r))) (if (memv K6026@t '(free-id atom)) K6023@r (if (memv K6026@t '(scheme-id atom)) K6023@r (if (memv K6026@t '(vector)) (K5947@match-empty (vector-ref K6022@p '1) K6023@r) (assertion-violation 'syntax-dispatch '"invalid pattern" K6022@p))))))) (vector-ref K6022@p '0))))))))) (set! K5949@combine (lambda (K6018@r* K6019@r) (if (null? (car K6018@r*)) K6019@r (cons (map car K6018@r*) (K5949@combine (map cdr K6018@r*) K6019@r))))) (set! K5951@match* (lambda (K5985@e K5986@p K5987@m* K5988@s* K5989@ae* K5990@r) (if (null? K5986@p) (and (null? K5985@e) K5990@r) (if (pair? K5986@p) (and (pair? K5985@e) (K5953@match (car K5985@e) (car K5986@p) K5987@m* K5988@s* K5989@ae* (K5953@match (cdr K5985@e) (cdr K5986@p) K5987@m* K5988@s* K5989@ae* K5990@r))) (if (eq? K5986@p 'each-any) ((lambda (K5997@l) (and K5997@l (cons K5997@l K5990@r))) (K5945@match-each-any K5985@e K5987@m* K5988@s* K5989@ae*)) ((lambda (K5999@t) (if (memv K5999@t '(each)) (if (null? K5985@e) (K5947@match-empty (vector-ref K5986@p '1) K5990@r) ((lambda (K6001@r*) (and K6001@r* (K5949@combine K6001@r* K5990@r))) (K5941@match-each K5985@e (vector-ref K5986@p '1) K5987@m* K5988@s* K5989@ae*))) (if (memv K5999@t '(free-id)) (and (symbol? K5985@e) (K2131@top-marked? K5987@m*) (K2269@free-id=? (K5939@stx^ K5985@e K5987@m* K5988@s* K5989@ae*) (vector-ref K5986@p '1)) K5990@r) (if (memv K5999@t '(scheme-id)) (and (symbol? K5985@e) (K2131@top-marked? K5987@m*) (K2269@free-id=? (K5939@stx^ K5985@e K5987@m* K5988@s* K5989@ae*) (K2640@scheme-stx (vector-ref K5986@p '1))) K5990@r) (if (memv K5999@t '(each+)) (call-with-values (lambda () (K5943@match-each+ K5985@e (vector-ref K5986@p '1) (vector-ref K5986@p '2) (vector-ref K5986@p '3) K5987@m* K5988@s* K5989@ae* K5990@r)) (lambda (K6006@K6003@xr* K6007@K6004@y-pat K6008@K6005@r) ((lambda (K6012@r K6013@y-pat K6014@xr*) (and K6012@r (null? K6013@y-pat) (if (null? K6014@xr*) (K5947@match-empty (vector-ref K5986@p '1) K6012@r) (K5949@combine K6014@xr* K6012@r)))) K6008@K6005@r K6007@K6004@y-pat K6006@K6003@xr*))) (if (memv K5999@t '(atom)) (and (fast-equal? (vector-ref K5986@p '1) (K2281@strip K5985@e K5987@m*)) K5990@r) (if (memv K5999@t '(vector)) (and (vector? K5985@e) (K5953@match (vector->list K5985@e) (vector-ref K5986@p '1) K5987@m* K5988@s* K5989@ae* K5990@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" K5986@p)))))))) (vector-ref K5986@p '0))))))) (set! K5953@match (lambda (K5958@e K5959@p K5960@m* K5961@s* K5962@ae* K5963@r) (if (not K5963@r) '#f (if (eq? K5959@p '_) K5963@r (if (eq? K5959@p 'any) (cons (K5939@stx^ K5958@e K5960@m* K5961@s* K5962@ae*) K5963@r) (if (K2205@stx? K5958@e) (and (not (K2131@top-marked? K5960@m*)) (call-with-values (lambda () (K2235@join-wraps K5960@m* K5961@s* K5962@ae* K5958@e)) (lambda (K5973@K5970@m* K5974@K5971@s* K5975@K5972@ae*) ((lambda (K5979@ae* K5980@s* K5981@m*) (K5953@match (K2209@stx-expr K5958@e) K5959@p K5981@m* K5980@s* K5979@ae* K5963@r)) K5975@K5972@ae* K5974@K5971@s* K5973@K5970@m*)))) (if (K1150@K917@annotation? K5958@e) (K5953@match (K1152@K921@annotation-expression K5958@e) K5959@p K5960@m* K5961@s* K5962@ae* K5963@r) (K5951@match* K5958@e K5959@p K5960@m* K5961@s* K5962@ae* K5963@r)))))))) (lambda (K5954@e K5955@p) (K5953@match K5954@e K5955@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! K2760@ellipsis? (lambda (K6148@x) (and (K2261@id? K6148@x) (K2269@free-id=? K6148@x (K2640@scheme-stx '...))))) (set! K2762@underscore? (lambda (K6150@x) (and (K2261@id? K6150@x) (K2269@free-id=? K6150@x (K2640@scheme-stx '_))))) (set! K2764@verify-literals (lambda (K6152@lits K6153@expr) (for-each (lambda (K6156@x) (if (or (not (K2261@id? K6156@x)) (K2760@ellipsis? K6156@x) (K2762@underscore? K6156@x)) (K2993@syntax-violation '#f '"invalid literal" K6153@expr K6156@x) (void))) K6152@lits))) (set! K2766@syntax-case-transformer ((lambda () ((lambda (K6159@build-dispatch-call K6161@invalid-ids-error K6163@gen-clause K6165@gen-syntax-case) (begin (set! K6159@build-dispatch-call (lambda (K6270@pvars K6271@expr K6272@y K6273@r K6274@mr) ((lambda (K6280@ids K6281@levels) ((lambda (K6284@labels K6285@new-vars) ((lambda (K6288@body) (list '(primitive apply) (K2099@K1909@build-lambda '#f K6285@new-vars K6288@body) K6272@y)) (K2794@chi-expr (K2241@add-subst (K2192@make-full-rib K6280@ids K6284@labels) K6271@expr) (append (map (lambda (K6290@label K6291@var K6292@level) (cons K6290@label (K2293@make-binding 'syntax (cons K6291@var K6292@level)))) K6284@labels K6285@new-vars (map cdr K6270@pvars)) K6273@r) K6274@mr))) (map K2137@gen-label K6280@ids) (map K2133@gen-lexical K6280@ids))) (map car K6270@pvars) (map cdr K6270@pvars)))) (set! K6161@invalid-ids-error (lambda (K6258@id* K6259@e K6260@class) ((letrec ((K6264@find (lambda (K6266@id* K6267@ok*) (if (null? K6266@id*) (K2993@syntax-violation '#f '"invalid syntax" K6259@e) (if (K2261@id? (car K6266@id*)) (if (K2275@bound-id-member? (car K6266@id*) K6267@ok*) (K2989@syntax-error (car K6266@id*) '"duplicate " K6260@class) (K6264@find (cdr K6266@id*) (cons (car K6266@id*) K6267@ok*))) (K2989@syntax-error (car K6266@id*) '"invalid " K6260@class)))))) K6264@find) K6258@id* '()))) (set! K6163@gen-clause (lambda (K6220@x K6221@keys K6222@clauses K6223@r K6224@mr K6225@pat K6226@fender K6227@expr) (call-with-values (lambda () (K2756@convert-pattern K6225@pat K6221@keys)) (lambda (K6238@K6236@p K6239@K6237@pvars) ((lambda (K6242@pvars K6243@p) (if (not (K2273@distinct-bound-ids? (map car K6242@pvars))) (K6161@invalid-ids-error (map car K6242@pvars) K6225@pat '"pattern variable") (if (not (for-all (lambda (K6246@x) (not (K2760@ellipsis? (car K6246@x)))) K6242@pvars)) (K2993@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" K6225@pat) ((lambda (K6248@y) ((lambda (K6250@test) ((lambda (K6252@conseq) ((lambda (K6254@altern) (list (K2099@K1909@build-lambda '#f (list K6248@y) (list 'if K6250@test K6252@conseq K6254@altern)) (list '(primitive syntax-dispatch) K6220@x (list 'quote K6243@p)))) (K6165@gen-syntax-case K6220@x K6221@keys K6222@clauses K6223@r K6224@mr))) (K6159@build-dispatch-call K6242@pvars K6227@expr K6248@y K6223@r K6224@mr))) (if (eq? K6226@fender '#t) K6248@y ((lambda (K6256@call) (list 'if K6248@y K6256@call (list 'quote '#f))) (K6159@build-dispatch-call K6242@pvars K6226@fender K6248@y K6223@r K6224@mr))))) (K2133@gen-lexical 'tmp))))) K6239@K6237@pvars K6238@K6236@p))))) (set! K6165@gen-syntax-case (lambda (K6186@x K6187@keys K6188@clauses K6189@r K6190@mr) (if (null? K6188@clauses) (list '(primitive syntax-error) K6186@x) ((lambda (K6196@t) ((lambda (K6198@ls/false) (if K6198@ls/false (apply (lambda (K6200@pat K6201@expr) (if (and (K2261@id? K6200@pat) (not (K2275@bound-id-member? K6200@pat K6187@keys)) (not (K2760@ellipsis? K6200@pat))) (if (K2269@free-id=? K6200@pat (K2640@scheme-stx '_)) (K2794@chi-expr K6201@expr K6189@r K6190@mr) ((lambda (K6204@lab K6205@lex) ((lambda (K6208@body) (list (K2099@K1909@build-lambda '#f (list K6205@lex) K6208@body) K6186@x)) (K2794@chi-expr (K2241@add-subst (K2192@make-full-rib (list K6200@pat) (list K6204@lab)) K6201@expr) (cons (cons K6204@lab (K2293@make-binding 'syntax (cons K6205@lex '0))) K6189@r) K6190@mr))) (K2137@gen-label K6200@pat) (K2133@gen-lexical K6200@pat))) (K6163@gen-clause K6186@x K6187@keys (cdr K6188@clauses) K6189@r K6190@mr K6200@pat '#t K6201@expr))) K6198@ls/false) ((lambda (K6210@t) ((lambda (K6212@ls/false) (if K6212@ls/false (apply (lambda (K6214@pat K6215@fender K6216@expr) (K6163@gen-clause K6186@x K6187@keys (cdr K6188@clauses) K6189@r K6190@mr K6214@pat K6215@fender K6216@expr)) K6212@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K6210@t))) (K2758@syntax-dispatch K6210@t '(any any any)))) K6196@t))) (K2758@syntax-dispatch K6196@t '(any any)))) (car K6188@clauses))))) (lambda (K6166@e K6167@r K6168@mr) ((lambda (K6172@t) ((lambda (K6174@ls/false) (if K6174@ls/false (apply (lambda (K6176@expr K6177@keys K6178@clauses) (begin (K2764@verify-literals K6177@keys K6166@e) ((lambda (K6182@x) ((lambda (K6184@body) (list (K2099@K1909@build-lambda '#f (list K6182@x) K6184@body) (K2794@chi-expr K6176@expr K6167@r K6168@mr))) (K6165@gen-syntax-case K6182@x K6177@keys K6178@clauses K6167@r K6168@mr))) (K2133@gen-lexical 'tmp)))) K6174@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K6172@t))) (K2758@syntax-dispatch K6172@t '(_ any each-any . each-any)))) K6166@e)))) '#f '#f '#f '#f)))) (set! K2768@ellipsis-map (lambda (K6296@proc K6297@ls . K6300@ls*) ((lambda (K6303@who) (begin (set! K6303@who '...) (begin (if (not (list? K6297@ls)) (assertion-violation K6303@who '"not a list" K6297@ls) (void)) (if (not (null? K6300@ls*)) ((lambda (K6304@n) (for-each (lambda (K6306@x) (begin (if (not (list? K6306@x)) (assertion-violation K6303@who '"not a list" K6306@x) (void)) (if (not (= (length K6306@x) K6304@n)) (assertion-violation K6303@who '"length mismatch" K6297@ls K6306@x) (void)))) K6300@ls*)) (length K6297@ls)) (void)) (apply map K6296@proc K6297@ls K6300@ls*)))) '#f))) (set! K2770@syntax-transformer ((lambda () ((lambda (K6309@gen-syntax K6311@gen-ref K6313@gen-append K6315@gen-mappend K6317@gen-map K6319@gen-cons K6321@gen-vector K6323@regen) (begin (set! K6309@gen-syntax (lambda (K6424@src K6425@e K6426@r K6427@maps K6428@ellipsis? K6429@vec?) ((lambda (K6436@t) ((lambda (K6438@ls/false) (if (and K6438@ls/false (apply (lambda (K6440@dots) (K6428@ellipsis? K6440@dots)) K6438@ls/false)) (apply (lambda (K6442@dots) (K2993@syntax-violation '#f '"misplaced ellipsis in syntax form" K6424@src)) K6438@ls/false) ((lambda (K6444@t) ((lambda (K6446@ls/false) (if (and K6446@ls/false (apply (lambda (K6448@id) (K2261@id? K6448@id)) K6446@ls/false)) (apply (lambda (K6450@id) ((lambda (K6452@label) ((lambda (K6454@b) ((lambda () (if (eq? (K2295@binding-type K6454@b) 'syntax) (call-with-values (lambda () ((lambda (K6458@var.lev) (K6311@gen-ref K6424@src (car K6458@var.lev) (cdr K6458@var.lev) K6427@maps)) (K2297@binding-value K6454@b))) (lambda (K6460@K6456@var K6461@K6457@maps) ((lambda (K6464@maps K6465@var) (values (list 'ref K6465@var) K6464@maps)) K6461@K6457@maps K6460@K6456@var))) (values (list 'quote K6425@e) K6427@maps))))) (K2291@label->binding K6452@label K6426@r))) (K2287@id->label K6425@e))) K6446@ls/false) ((lambda (K6468@t) ((lambda (K6470@ls/false) (if (and K6470@ls/false (apply (lambda (K6472@dots K6473@e) (K6428@ellipsis? K6472@dots)) K6470@ls/false)) (apply (lambda (K6476@dots K6477@e) (if K6429@vec? (K2993@syntax-violation '#f '"misplaced ellipsis in syntax form" K6424@src) (K6309@gen-syntax K6424@src K6477@e K6426@r K6427@maps (lambda (K6480@x) '#f) '#f))) K6470@ls/false) ((lambda (K6482@t) ((lambda (K6484@ls/false) (if (and K6484@ls/false (apply (lambda (K6486@x K6487@dots K6488@y) (K6428@ellipsis? K6487@dots)) K6484@ls/false)) (apply (lambda (K6492@x K6493@dots K6494@y) ((letrec ((K6498@f (lambda (K6500@y K6501@k) ((lambda (K6504@t) ((lambda (K6506@ls/false) (if K6506@ls/false (apply (lambda () (K6501@k K6427@maps)) K6506@ls/false) ((lambda (K6508@t) ((lambda (K6510@ls/false) (if (and K6510@ls/false (apply (lambda (K6512@dots K6513@y) (K6428@ellipsis? K6512@dots)) K6510@ls/false)) (apply (lambda (K6516@dots K6517@y) (K6498@f K6517@y (lambda (K6520@maps) (call-with-values (lambda () (K6501@k (cons '() K6520@maps))) (lambda (K6524@K6522@x K6525@K6523@maps) ((lambda (K6528@maps K6529@x) (if (null? (car K6528@maps)) (K2993@syntax-violation '#f '"extra ellipsis in syntax form" K6424@src) (values (K6315@gen-mappend K6529@x (car K6528@maps)) (cdr K6528@maps)))) K6525@K6523@maps K6524@K6522@x)))))) K6510@ls/false) ((lambda (K6532@t) ((lambda (K6534@ls/false) (if K6534@ls/false (apply (lambda () (call-with-values (lambda () (K6309@gen-syntax K6424@src K6500@y K6426@r K6427@maps K6428@ellipsis? K6429@vec?)) (lambda (K6538@K6536@y K6539@K6537@maps) ((lambda (K6542@maps K6543@y) (call-with-values (lambda () (K6501@k K6542@maps)) (lambda (K6548@K6546@x K6549@K6547@maps) ((lambda (K6552@maps K6553@x) (values (K6313@gen-append K6553@x K6543@y) K6552@maps)) K6549@K6547@maps K6548@K6546@x)))) K6539@K6537@maps K6538@K6536@y)))) K6534@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K6532@t))) (K2758@syntax-dispatch K6532@t '_))) K6508@t))) (K2758@syntax-dispatch K6508@t '(any . any)))) K6504@t))) (K2758@syntax-dispatch K6504@t '()))) K6500@y)))) K6498@f) K6494@y (lambda (K6556@maps) (call-with-values (lambda () (K6309@gen-syntax K6424@src K6492@x K6426@r (cons '() K6556@maps) K6428@ellipsis? '#f)) (lambda (K6560@K6558@x K6561@K6559@maps) ((lambda (K6564@maps K6565@x) (if (null? (car K6564@maps)) (K2993@syntax-violation '#f '"extra ellipsis in syntax form" K6424@src) (values (K6317@gen-map K6565@x (car K6564@maps)) (cdr K6564@maps)))) K6561@K6559@maps K6560@K6558@x)))))) K6484@ls/false) ((lambda (K6568@t) ((lambda (K6570@ls/false) (if K6570@ls/false (apply (lambda (K6572@x K6573@y) (call-with-values (lambda () (K6309@gen-syntax K6424@src K6572@x K6426@r K6427@maps K6428@ellipsis? '#f)) (lambda (K6578@K6576@xnew K6579@K6577@maps) ((lambda (K6582@maps K6583@xnew) (call-with-values (lambda () (K6309@gen-syntax K6424@src K6573@y K6426@r K6582@maps K6428@ellipsis? K6429@vec?)) (lambda (K6588@K6586@ynew K6589@K6587@maps) ((lambda (K6592@maps K6593@ynew) (values (K6319@gen-cons K6425@e K6572@x K6573@y K6583@xnew K6593@ynew) K6592@maps)) K6589@K6587@maps K6588@K6586@ynew)))) K6579@K6577@maps K6578@K6576@xnew)))) K6570@ls/false) ((lambda (K6596@t) ((lambda (K6598@ls/false) (if K6598@ls/false (apply (lambda (K6600@ls) (call-with-values (lambda () (K6309@gen-syntax K6424@src K6600@ls K6426@r K6427@maps K6428@ellipsis? '#t)) (lambda (K6604@K6602@lsnew K6605@K6603@maps) ((lambda (K6608@maps K6609@lsnew) (values (K6321@gen-vector K6425@e K6600@ls K6609@lsnew) K6608@maps)) K6605@K6603@maps K6604@K6602@lsnew)))) K6598@ls/false) ((lambda (K6612@t) ((lambda (K6614@ls/false) (if K6614@ls/false (apply (lambda () (values (list 'quote K6425@e) K6427@maps)) K6614@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K6612@t))) (K2758@syntax-dispatch K6612@t '_))) K6596@t))) (K2758@syntax-dispatch K6596@t '#(vector each-any)))) K6568@t))) (K2758@syntax-dispatch K6568@t '(any . any)))) K6482@t))) (K2758@syntax-dispatch K6482@t '(any any . any)))) K6468@t))) (K2758@syntax-dispatch K6468@t '(any any)))) K6444@t))) (K2758@syntax-dispatch K6444@t 'any))) K6436@t))) (K2758@syntax-dispatch K6436@t 'any))) K6425@e))) (set! K6311@gen-ref (lambda (K6400@src K6401@var K6402@level K6403@maps) (if (= K6402@level '0) (values K6401@var K6403@maps) (if (null? K6403@maps) (K2993@syntax-violation '#f '"missing ellipsis in syntax form" K6400@src) (call-with-values (lambda () (K6311@gen-ref K6400@src K6401@var (- K6402@level '1) (cdr K6403@maps))) (lambda (K6410@K6408@outer-var K6411@K6409@outer-maps) ((lambda (K6414@outer-maps K6415@outer-var) ((lambda (K6418@t) (if K6418@t ((lambda (K6420@b) (values (cdr K6420@b) K6403@maps)) K6418@t) ((lambda (K6422@inner-var) (values K6422@inner-var (cons (cons (cons K6415@outer-var K6422@inner-var) (car K6403@maps)) K6414@outer-maps))) (K2133@gen-lexical 'tmp)))) (assq K6415@outer-var (car K6403@maps)))) K6411@K6409@outer-maps K6410@K6408@outer-var))))))) (set! K6313@gen-append (lambda (K6396@x K6397@y) (if (fast-equal? K6397@y ''()) K6396@x (list 'append K6396@x K6397@y)))) (set! K6315@gen-mappend (lambda (K6392@e K6393@map-env) (list 'apply '(primitive append) (K6317@gen-map K6392@e K6393@map-env)))) (set! K6317@gen-map (lambda (K6374@e K6375@map-env) ((lambda (K6378@formals K6379@actuals) (if (eq? (car K6374@e) 'ref) (car K6379@actuals) (if (for-all (lambda (K6382@x) (and (eq? (car K6382@x) 'ref) (memq (cadr K6382@x) K6378@formals))) (cdr K6374@e)) ((lambda (K6384@args) (cons 'map (cons (list 'primitive (car K6374@e)) K6384@args))) (map ((lambda (K6386@r) (lambda (K6388@x) (cdr (assq (cadr K6388@x) K6386@r)))) (map cons K6378@formals K6379@actuals)) (cdr K6374@e))) (cons* 'map (list 'lambda K6378@formals K6374@e) K6379@actuals)))) (map cdr K6375@map-env) (map (lambda (K6390@x) (list 'ref (car K6390@x))) K6375@map-env)))) (set! K6319@gen-cons (lambda (K6358@e K6359@x K6360@y K6361@xnew K6362@ynew) ((lambda (K6368@t) (if (memv K6368@t '(quote)) (if (eq? (car K6361@xnew) 'quote) ((lambda (K6370@xnew K6371@ynew) (if (and (eq? K6370@xnew K6359@x) (eq? K6371@ynew K6360@y)) (list 'quote K6358@e) (list 'quote (cons K6370@xnew K6371@ynew)))) (cadr K6361@xnew) (cadr K6362@ynew)) (if (null? (cadr K6362@ynew)) (list 'list K6361@xnew) (list 'cons K6361@xnew K6362@ynew))) (if (memv K6368@t '(list)) (cons 'list (cons K6361@xnew (cdr K6362@ynew))) (list 'cons K6361@xnew K6362@ynew)))) (car K6362@ynew)))) (set! K6321@gen-vector (lambda (K6352@e K6353@ls K6354@lsnew) (if (eq? (car K6354@lsnew) 'quote) (if (eq? (cadr K6354@lsnew) K6353@ls) (list 'quote K6352@e) (list 'quote (list->vector (cadr K6354@lsnew)))) (if (eq? (car K6354@lsnew) 'list) (cons 'vector (cdr K6354@lsnew)) (list 'list->vector K6354@lsnew))))) (set! K6323@regen (lambda (K6346@x) ((lambda (K6348@t) (if (memv K6348@t '(ref)) (cadr K6346@x) (if (memv K6348@t '(primitive)) (list 'primitive (cadr K6346@x)) (if (memv K6348@t '(quote)) (list 'quote (cadr K6346@x)) (if (memv K6348@t '(lambda)) (K2099@K1909@build-lambda '#f (cadr K6346@x) (K6323@regen (caddr K6346@x))) (if (memv K6348@t '(map)) ((lambda (K6350@ls) (cons '(primitive ellipsis-map) K6350@ls)) (map K6323@regen (cdr K6346@x))) (cons (list 'primitive (car K6346@x)) (map K6323@regen (cdr K6346@x))))))))) (car K6346@x)))) (lambda (K6324@e K6325@r K6326@mr) ((lambda (K6330@t) ((lambda (K6332@ls/false) (if K6332@ls/false (apply (lambda (K6334@x) (call-with-values (lambda () (K6309@gen-syntax K6324@e K6334@x K6325@r '() K2760@ellipsis? '#f)) (lambda (K6338@K6336@e K6339@K6337@maps) ((lambda (K6342@maps K6343@e) (K6323@regen K6343@e)) K6339@K6337@maps K6338@K6336@e)))) K6332@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K6330@t))) (K2758@syntax-dispatch K6330@t '(_ any)))) K6324@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! K2772@core-macro-transformer (lambda (K6616@name) ((lambda (K6618@t) (if (memv K6618@t '(quote)) K2678@quote-transformer (if (memv K6618@t '(lambda)) K2682@lambda-transformer (if (memv K6618@t '(case-lambda)) K2680@case-lambda-transformer (if (memv K6618@t '(letrec)) K2654@letrec-transformer (if (memv K6618@t '(letrec*)) K2656@letrec*-transformer (if (memv K6618@t '(if)) K2670@if-transformer (if (memv K6618@t '(and)) K2672@and-transformer (if (memv K6618@t '(or)) K2674@or-transformer (if (memv K6618@t '(foreign-call)) K2754@foreign-call-transformer (if (memv K6618@t '(syntax-case)) K2766@syntax-case-transformer (if (memv K6618@t '(syntax)) K2770@syntax-transformer (if (memv K6618@t '(type-descriptor)) K2660@type-descriptor-transformer (if (memv K6618@t '(record-type-descriptor)) K2662@record-type-descriptor-transformer (if (memv K6618@t '(record-constructor-descriptor)) K2664@record-constructor-descriptor-transformer (if (memv K6618@t '(fluid-let-syntax)) K2658@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" K6616@name))))))))))))))))) K6616@name))) (set! K2774@file-options-macro (lambda (K6620@x) ((lambda (K6623@valid-option?) (begin (set! K6623@valid-option? (lambda (K6632@x) (and (K2261@id? K6632@x) (memq (K2263@id->sym K6632@x) '(no-fail no-create no-truncate))))) ((lambda (K6624@t) ((lambda (K6626@ls/false) (if (and K6626@ls/false (apply (lambda (K6628@opt*) (and (for-all K6623@valid-option? K6628@opt*) (K1162@K1039@file-options-spec (map K2263@id->sym K6628@opt*)))) K6626@ls/false)) (apply (lambda (K6630@opt*) (K2684@bless (list 'quote (K1162@K1039@file-options-spec (map K2263@id->sym K6630@opt*))))) K6626@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K6624@t))) (K2758@syntax-dispatch K6624@t '(_ . each-any)))) K6620@x))) '#f))) (set! K2776@symbol-macro (lambda (K6634@x K6635@set) ((lambda (K6638@t) ((lambda (K6640@ls/false) (if (and K6640@ls/false (apply (lambda (K6642@name) (and (K2261@id? K6642@name) (memq (K2263@id->sym K6642@name) K6635@set))) K6640@ls/false)) (apply (lambda (K6644@name) (K2684@bless (list 'quote K6644@name))) K6640@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K6638@t))) (K2758@syntax-dispatch K6638@t '(_ any)))) K6634@x))) (set! K2778@macro-transformer (lambda (K6646@x) (if (procedure? K6646@x) K6646@x (if (symbol? K6646@x) ((lambda (K6648@t) (if (memv K6648@t '(define-record-type)) K2746@define-record-type-macro (if (memv K6648@t '(define-struct)) K2744@define-struct-macro (if (memv K6648@t '(include)) K2734@include-macro (if (memv K6648@t '(cond)) K2730@cond-macro (if (memv K6648@t '(let)) K2690@let-macro (if (memv K6648@t '(do)) K2722@do-macro (if (memv K6648@t '(or)) K2726@or-macro (if (memv K6648@t '(and)) K2728@and-macro (if (memv K6648@t '(let*)) K2724@let*-macro (if (memv K6648@t '(let-values)) K2692@let-values-macro (if (memv K6648@t '(let*-values)) K2694@let*-values-macro (if (memv K6648@t '(syntax-rules)) K2738@syntax-rules-macro (if (memv K6648@t '(quasiquote)) K2740@quasiquote-macro (if (memv K6648@t '(quasisyntax)) K2742@quasisyntax-macro (if (memv K6648@t '(with-syntax)) K2686@with-syntax-macro (if (memv K6648@t '(when)) K2666@when-macro (if (memv K6648@t '(unless)) K2668@unless-macro (if (memv K6648@t '(case)) K2676@case-macro (if (memv K6648@t '(identifier-syntax)) K2720@identifier-syntax-macro (if (memv K6648@t '(time)) K2712@time-macro (if (memv K6648@t '(delay)) K2714@delay-macro (if (memv K6648@t '(assert)) K2716@assert-macro (if (memv K6648@t '(endianness)) K2718@endianness-macro (if (memv K6648@t '(guard)) K2708@guard-macro (if (memv K6648@t '(define-enumeration)) K2710@define-enumeration-macro (if (memv K6648@t '(trace-lambda)) K2696@trace-lambda-macro (if (memv K6648@t '(trace-define)) K2698@trace-define-macro (if (memv K6648@t '(trace-define-syntax)) K2700@trace-define-syntax-macro (if (memv K6648@t '(trace-let-syntax)) K2704@trace-let-syntax-macro (if (memv K6648@t '(trace-letrec-syntax)) K2706@trace-letrec-syntax-macro (if (memv K6648@t '(define-condition-type)) K2748@define-condition-type-macro (if (memv K6648@t '(parameterize)) K2752@parameterize-macro (if (memv K6648@t '(include-into)) K2736@include-into-macro (if (memv K6648@t '(eol-style)) (lambda (K6650@x) (K2776@symbol-macro K6650@x '(none lf cr crlf nel crnel ls))) (if (memv K6648@t '(error-handling-mode)) (lambda (K6652@x) (K2776@symbol-macro K6652@x '(ignore raise replace))) (if (memv K6648@t '(buffer-mode)) (lambda (K6654@x) (K2776@symbol-macro K6654@x '(none line block))) (if (memv K6648@t '(file-options)) K2774@file-options-macro (if (memv K6648@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) K2750@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" K6646@x)))))))))))))))))))))))))))))))))))))))) K6646@x) (error 'core-macro-transformer '"BUG: invalid macro" K6646@x))))) (set! K2780@local-macro-transformer (lambda (K6656@x) (car K6656@x))) (set! K2782@do-macro-call (lambda (K6658@transformer K6659@expr) ((lambda (K6662@out) (begin ((letrec ((K6664@f (lambda (K6666@x) (if (not (K2205@stx? K6666@x)) (if (pair? K6666@x) (begin (K6664@f (car K6666@x)) (K6664@f (cdr K6666@x))) (if (vector? K6666@x) (vector-for-each K6664@f K6666@x) (if (symbol? K6666@x) (K2993@syntax-violation '#f '"raw symbol encountered in output of macro" K6659@expr K6666@x) (void)))) (void))))) K6664@f) K6662@out) (K2239@add-mark (K2229@gen-mark) K6662@out K6659@expr))) (K6658@transformer (K2239@add-mark K2231@anti-mark K6659@expr '#f))))) (set! K2784@chi-macro (lambda (K6668@p K6669@e) (K2782@do-macro-call (K2778@macro-transformer K6668@p) K6669@e))) (set! K2786@chi-local-macro (lambda (K6672@p K6673@e) (K2782@do-macro-call (K2780@local-macro-transformer K6672@p) K6673@e))) (set! K2788@chi-global-macro (lambda (K6676@p K6677@e) ((lambda (K6680@lib K6681@loc) (begin (K1790@K1446@visit-library K6680@lib) ((lambda (K6684@x) ((lambda (K6686@transformer) (K2782@do-macro-call K6686@transformer K6677@e)) (if (procedure? K6684@x) K6684@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" K6684@x)))) (symbol-value K6681@loc)))) (car K6676@p) (cdr K6676@p)))) (set! K2790@chi-expr* (lambda (K6688@e* K6689@r K6690@mr) (if (null? K6688@e*) '() ((lambda (K6694@e) (cons K6694@e (K2790@chi-expr* (cdr K6688@e*) K6689@r K6690@mr))) (K2794@chi-expr (car K6688@e*) K6689@r K6690@mr))))) (set! K2792@chi-application (lambda (K6696@e K6697@r K6698@mr) ((lambda (K6702@t) ((lambda (K6704@ls/false) (if K6704@ls/false (apply (lambda (K6706@rator K6707@rands) ((lambda (K6710@rator) (cons K6710@rator (K2790@chi-expr* K6707@rands K6697@r K6698@mr))) (K2794@chi-expr K6706@rator K6697@r K6698@mr))) K6704@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K6702@t))) (K2758@syntax-dispatch K6702@t '(any . each-any)))) K6696@e))) (set! K2794@chi-expr (lambda (K6712@e K6713@r K6714@mr) (call-with-values (lambda () (K2301@syntax-type K6712@e K6713@r)) (lambda (K6721@K6718@type K6722@K6719@value K6723@K6720@kwd) ((lambda (K6727@kwd K6728@value K6729@type) ((lambda (K6733@t) (if (memv K6733@t '(core-macro)) ((lambda (K6735@transformer) (K6735@transformer K6712@e K6713@r K6714@mr)) (K2772@core-macro-transformer K6728@value)) (if (memv K6733@t '(global)) (begin (if (symbol-value 'debug-expand) (begin (format '#t '"global e=~a id?=~a r=~a ~a\n" (K2209@stx-expr K6712@e) (K2261@id? K6712@e) (K2209@stx-expr (caddr (cadddr K6713@r))) (K2209@stx-expr (cadddr (cadddr K6713@r)))) (format '#t '"kwd=~a global=~a name=~a\n" (K2209@stx-expr K6727@kwd) (K1741@K1348@library-name (car K6728@value)) K6728@value)) (void)) ((lambda (K6737@lib) ((lambda (K6739@loc) ((lambda () (begin ((K2867@inv-collector) K6737@lib) K6739@loc)))) (cdr K6728@value))) (car K6728@value))) (if (memv K6733@t '(core-prim)) ((lambda (K6741@name) (list 'primitive K6741@name)) K6728@value) (if (memv K6733@t '(call)) (K2792@chi-application K6712@e K6713@r K6714@mr) (if (memv K6733@t '(lexical)) ((lambda (K6743@lex) K6743@lex) (K2642@lexical-var K6728@value)) (if (memv K6733@t '(global-macro global-macro!)) (K2794@chi-expr (K2788@chi-global-macro K6728@value K6712@e) K6713@r K6714@mr) (if (memv K6733@t '(local-macro local-macro!)) (K2794@chi-expr (K2786@chi-local-macro K6728@value K6712@e) K6713@r K6714@mr) (if (memv K6733@t '(macro macro!)) (K2794@chi-expr (K2784@chi-macro K6728@value K6712@e) K6713@r K6714@mr) (if (memv K6733@t '(constant)) ((lambda (K6745@datum) (list 'quote K6745@datum)) K6728@value) (if (memv K6733@t '(set!)) (K2796@chi-set! K6712@e K6713@r K6714@mr) (if (memv K6733@t '(begin)) ((lambda (K6747@t) ((lambda (K6749@ls/false) (if K6749@ls/false (apply (lambda (K6751@x K6752@x*) (K2102@K1959@build-sequence '#f (K2790@chi-expr* (cons K6751@x K6752@x*) K6713@r K6714@mr))) K6749@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K6747@t))) (K2758@syntax-dispatch K6747@t '(_ any . each-any)))) K6712@e) (if (memv K6733@t '(let-syntax letrec-syntax)) ((lambda (K6755@t) ((lambda (K6757@ls/false) (if (and K6757@ls/false (apply (lambda (K6759@xlhs* K6760@xrhs* K6761@xbody K6762@xbody*) (if (not (K2271@valid-bound-ids? K6759@xlhs*)) (K2993@syntax-violation '#f '"invalid identifiers" K6712@e) (void))) K6757@ls/false)) (apply (lambda (K6767@xlhs* K6768@xrhs* K6769@xbody K6770@xbody*) ((lambda (K6775@xlab*) ((lambda (K6777@xrib) ((lambda (K6779@xb*) ((lambda () (K2102@K1959@build-sequence '#f (K2790@chi-expr* (map (lambda (K6781@x) (K2241@add-subst K6777@xrib K6781@x)) (cons K6769@xbody K6770@xbody*)) (append (map cons K6775@xlab* K6779@xb*) K6713@r) (append (map cons K6775@xlab* K6779@xb*) K6714@mr)))))) (map (lambda (K6783@x) (K2323@make-eval-transformer (K2853@expand-transformer (if (eq? K6729@type 'let-syntax) K6783@x (K2241@add-subst K6777@xrib K6783@x)) K6714@mr))) K6768@xrhs*))) (K2192@make-full-rib K6767@xlhs* K6775@xlab*))) (map K2137@gen-label K6767@xlhs*))) K6757@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K6755@t))) (K2758@syntax-dispatch K6755@t '(_ #(each (any any)) any . each-any)))) K6712@e) (if (memv K6733@t '(displaced-lexical)) (K2993@syntax-violation '#f '"identifier out of context" K6712@e) (if (memv K6733@t '(syntax)) (K2993@syntax-violation '#f '"reference to pattern variable outside a syntax form" K6712@e) (if (memv K6733@t '(define define-syntax module import library)) (K2993@syntax-violation '#f (string-append ((lambda (K6785@t) (if (memv K6785@t '(define)) '"a definition" (if (memv K6785@t '(define-syntax)) '"a define-syntax" (if (memv K6785@t '(module)) '"a module definition" (if (memv K6785@t '(library)) '"a library definition" (if (memv K6785@t '(import)) '"an import declaration" (if (memv K6785@t '(export)) '"an export declaration" '"a non-expression"))))))) K6729@type) '" was found where an expression was expected") K6712@e) (if (memv K6733@t '(mutable)) (K2993@syntax-violation '#f '"attempt to reference an unexportable variable" K6712@e) (K2993@syntax-violation '#f '"invalid expression" K6712@e)))))))))))))))))) K6729@type)) K6723@K6720@kwd K6722@K6719@value K6721@K6718@type))))) (set! K2796@chi-set! (lambda (K6787@e K6788@r K6789@mr) ((lambda (K6793@t) ((lambda (K6795@ls/false) (if (and K6795@ls/false (apply (lambda (K6797@x K6798@v) (K2261@id? K6797@x)) K6795@ls/false)) (apply (lambda (K6801@x K6802@v) (call-with-values (lambda () (K2301@syntax-type K6801@x K6788@r)) (lambda (K6808@K6805@type K6809@K6806@value K6810@K6807@kwd) ((lambda (K6814@kwd K6815@value K6816@type) ((lambda (K6820@t) (if (memv K6820@t '(lexical)) (begin (K2646@set-lexical-mutable! K6815@value '#t) (list 'set! (K2642@lexical-var K6815@value) (K2794@chi-expr K6802@v K6788@r K6789@mr))) (if (memv K6820@t '(core-prim)) (K2993@syntax-violation '#f '"cannot modify imported core primitive" K6787@e) (if (memv K6820@t '(global)) (K2993@syntax-violation '#f '"attempt to modify imported binding" K6787@e) (if (memv K6820@t '(global-macro!)) (K2794@chi-expr (K2788@chi-global-macro K6815@value K6787@e) K6788@r K6789@mr) (if (memv K6820@t '(local-macro!)) (K2794@chi-expr (K2786@chi-local-macro K6815@value K6787@e) K6788@r K6789@mr) (if (memv K6820@t '(mutable)) (K2993@syntax-violation '#f '"attempt to assign to an unexportable variable" K6787@e) (K2993@syntax-violation '#f '"invalid syntax" K6787@e)))))))) K6816@type)) K6810@K6807@kwd K6809@K6806@value K6808@K6805@type)))) K6795@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K6793@t))) (K2758@syntax-dispatch K6793@t '(_ any any)))) K6787@e))) (set! K2798@verify-formals (lambda (K6822@fmls K6823@stx) ((lambda (K6826@t) ((lambda (K6828@ls/false) (if K6828@ls/false (apply (lambda (K6830@x*) (if (not (K2271@valid-bound-ids? K6830@x*)) (K2688@invalid-fmls-error K6823@stx K6822@fmls) (void))) K6828@ls/false) ((lambda (K6832@t) ((lambda (K6834@ls/false) (if K6834@ls/false (apply (lambda (K6836@x* K6837@x) (if (not (K2271@valid-bound-ids? (cons K6837@x K6836@x*))) (K2688@invalid-fmls-error K6823@stx K6822@fmls) (void))) K6834@ls/false) ((lambda (K6840@t) ((lambda (K6842@ls/false) (if K6842@ls/false (apply (lambda () (K2993@syntax-violation '#f '"invalid syntax" K6823@stx)) K6842@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K6840@t))) (K2758@syntax-dispatch K6840@t '_))) K6832@t))) (K2758@syntax-dispatch K6832@t '#(each+ any () any)))) K6826@t))) (K2758@syntax-dispatch K6826@t 'each-any))) K6822@fmls))) (set! K2800@chi-lambda-clause (lambda (K6844@stx K6845@fmls K6846@body* K6847@r K6848@mr) ((lambda (K6854@t) ((lambda (K6856@ls/false) (if K6856@ls/false (apply (lambda (K6858@x*) (begin (K2798@verify-formals K6845@fmls K6844@stx) ((lambda (K6860@lex* K6861@lab*) (values K6860@lex* (K2816@chi-internal (K2241@add-subst (K2192@make-full-rib K6858@x* K6861@lab*) K6846@body*) (K2650@add-lexicals K6861@lab* K6860@lex* K6847@r) K6848@mr))) (map K2133@gen-lexical K6858@x*) (map K2137@gen-label K6858@x*)))) K6856@ls/false) ((lambda (K6864@t) ((lambda (K6866@ls/false) (if K6866@ls/false (apply (lambda (K6868@x* K6869@x) (begin (K2798@verify-formals K6845@fmls K6844@stx) ((lambda (K6872@lex* K6873@lab* K6874@lex K6875@lab) (values (append K6872@lex* K6874@lex) (K2816@chi-internal (K2241@add-subst (K2192@make-full-rib (cons K6869@x K6868@x*) (cons K6875@lab K6873@lab*)) K6846@body*) (K2650@add-lexicals (cons K6875@lab K6873@lab*) (cons K6874@lex K6872@lex*) K6847@r) K6848@mr))) (map K2133@gen-lexical K6868@x*) (map K2137@gen-label K6868@x*) (K2133@gen-lexical K6869@x) (K2137@gen-label K6869@x)))) K6866@ls/false) ((lambda (K6880@t) ((lambda (K6882@ls/false) (if K6882@ls/false (apply (lambda () (K2993@syntax-violation '#f '"invalid syntax" K6845@fmls)) K6882@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K6880@t))) (K2758@syntax-dispatch K6880@t '_))) K6864@t))) (K2758@syntax-dispatch K6864@t '#(each+ any () any)))) K6854@t))) (K2758@syntax-dispatch K6854@t 'each-any))) K6845@fmls))) (set! K2802@chi-lambda-clause* (lambda (K6884@stx K6885@fmls* K6886@body** K6887@r K6888@mr) (if (null? K6885@fmls*) (values '() '()) (call-with-values (lambda () (K2800@chi-lambda-clause K6884@stx (car K6885@fmls*) (car K6886@body**) K6887@r K6888@mr)) (lambda (K6896@K6894@a K6897@K6895@b) ((lambda (K6900@b K6901@a) (call-with-values (lambda () (K2802@chi-lambda-clause* K6884@stx (cdr K6885@fmls*) (cdr K6886@body**) K6887@r K6888@mr)) (lambda (K6906@K6904@a* K6907@K6905@b*) ((lambda (K6910@b* K6911@a*) (values (cons K6901@a K6911@a*) (cons K6900@b K6910@b*))) K6907@K6905@b* K6906@K6904@a*)))) K6897@K6895@b K6896@K6894@a)))))) (set! K2804@chi-defun (lambda (K6914@x K6915@r K6916@mr) ((lambda (K6920@fmls K6921@body*) (call-with-values (lambda () (K2800@chi-lambda-clause K6920@fmls K6920@fmls K6921@body* K6915@r K6916@mr)) (lambda (K6926@K6924@fmls K6927@K6925@body) ((lambda (K6930@body K6931@fmls) (K2099@K1909@build-lambda '#f K6931@fmls K6930@body)) K6927@K6925@body K6926@K6924@fmls)))) (car K6914@x) (cdr K6914@x)))) (set! K2806@chi-rhs (lambda (K6934@rhs K6935@r K6936@mr) ((lambda (K6940@t) (if (memv K6940@t '(defun)) (K2804@chi-defun (cdr K6934@rhs) K6935@r K6936@mr) (if (memv K6940@t '(expr)) ((lambda (K6942@expr) (K2794@chi-expr K6942@expr K6935@r K6936@mr)) (cdr K6934@rhs)) (if (memv K6940@t '(top-expr)) ((lambda (K6944@expr) (K2102@K1959@build-sequence '#f (list (K2794@chi-expr K6944@expr K6935@r K6936@mr) (K2103@K1961@build-void)))) (cdr K6934@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" K6934@rhs))))) (car K6934@rhs)))) (set! K2808@expand-interaction-rhs*/init* (lambda (K6946@lhs* K6947@rhs* K6948@init* K6949@r K6950@mr) ((letrec ((K6956@f (lambda (K6958@lhs* K6959@rhs*) (if (null? K6958@lhs*) (map (lambda (K6962@x) (K2794@chi-expr K6962@x K6949@r K6950@mr)) K6948@init*) ((lambda (K6964@lhs K6965@rhs) ((lambda (K6968@t) (if (memv K6968@t '(defun)) ((lambda (K6970@rhs) (cons (list 'set! K6964@lhs K6970@rhs) (K6956@f (cdr K6958@lhs*) (cdr K6959@rhs*)))) (K2804@chi-defun (cdr K6965@rhs) K6949@r K6950@mr)) (if (memv K6968@t '(expr)) ((lambda (K6972@rhs) (cons (list 'set! K6964@lhs K6972@rhs) (K6956@f (cdr K6958@lhs*) (cdr K6959@rhs*)))) (K2794@chi-expr (cdr K6965@rhs) K6949@r K6950@mr)) (if (memv K6968@t '(top-expr)) ((lambda (K6974@e) (cons K6974@e (K6956@f (cdr K6958@lhs*) (cdr K6959@rhs*)))) (K2794@chi-expr (cdr K6965@rhs) K6949@r K6950@mr)) (error 'expand-interaction '"invallid" K6965@rhs))))) (car K6965@rhs))) (car K6958@lhs*) (car K6959@rhs*)))))) K6956@f) K6946@lhs* K6947@rhs*))) (set! K2810@chi-rhs* (lambda (K6976@rhs* K6977@r K6978@mr) ((letrec ((K6982@f (lambda (K6984@ls) (if (null? K6984@ls) '() ((lambda (K6986@a) (cons K6986@a (K6982@f (cdr K6984@ls)))) (K2806@chi-rhs (car K6984@ls) K6977@r K6978@mr)))))) K6982@f) K6976@rhs*))) (set! K2812@find-bound=? (lambda (K6988@x K6989@lhs* K6990@rhs*) (if (null? K6989@lhs*) '#f (if (K2267@bound-id=? K6988@x (car K6989@lhs*)) (car K6990@rhs*) (K2812@find-bound=? K6988@x (cdr K6989@lhs*) (cdr K6990@rhs*)))))) (set! K2814@find-dups (lambda (K6994@ls) ((letrec ((K6996@f (lambda (K6998@ls K6999@dups) (if (null? K6998@ls) K6999@dups ((lambda (K7002@t) (if K7002@t ((lambda (K7004@x) (K6996@f (cdr K6998@ls) (cons (list (car K6998@ls) K7004@x) K6999@dups))) K7002@t) (K6996@f (cdr K6998@ls) K6999@dups))) (K2812@find-bound=? (car K6998@ls) (cdr K6998@ls) (cdr K6998@ls))))))) K6996@f) K6994@ls '()))) (set! K2816@chi-internal (lambda (K7006@e* K7007@r K7008@mr) ((lambda (K7012@rib) (call-with-values (lambda () (K2851@chi-body* (map (lambda (K7022@x) (K2241@add-subst K7012@rib K7022@x)) (K2259@syntax->list K7006@e*)) K7007@r K7008@mr '() '() '() '() '() K7012@rib '#f)) (lambda (K7024@K7014@e* K7025@K7015@r K7026@K7016@mr K7027@K7017@lex* K7028@K7018@rhs* K7029@K7019@mod** K7030@K7020@kwd* K7031@K7021@_exp*) ((lambda (K7040@_exp* K7041@kwd* K7042@mod** K7043@rhs* K7044@lex* K7045@mr K7046@r K7047@e*) (begin (if (null? K7047@e*) (K2993@syntax-violation '#f '"no expression in body" K7047@e*) (void)) ((lambda (K7056@init*) ((lambda (K7058@rhs*) ((lambda () (K2105@K1965@build-letrec* '#f (reverse K7044@lex*) (reverse K7058@rhs*) (K2102@K1959@build-sequence '#f K7056@init*))))) (K2810@chi-rhs* K7043@rhs* K7046@r K7045@mr))) (K2790@chi-expr* (append (apply append (reverse K7042@mod**)) K7047@e*) K7046@r K7045@mr)))) K7031@K7021@_exp* K7030@K7020@kwd* K7029@K7019@mod** K7028@K7018@rhs* K7027@K7017@lex* K7026@K7016@mr K7025@K7015@r K7024@K7014@e*)))) (K2180@make-empty-rib)))) (set! K2818@parse-module (lambda (K7060@e) ((lambda (K7062@t) ((lambda (K7064@ls/false) (if K7064@ls/false (apply (lambda (K7066@export* K7067@b*) (begin (if (not (for-all K2261@id? K7066@export*)) (K2993@syntax-violation '#f '"module exports must be identifiers" K7060@e) (void)) (values '#f (list->vector K7066@export*) K7067@b*))) K7064@ls/false) ((lambda (K7070@t) ((lambda (K7072@ls/false) (if K7072@ls/false (apply (lambda (K7074@name K7075@export* K7076@b*) (begin (if (not (K2261@id? K7074@name)) (K2993@syntax-violation '#f '"module name must be an identifier" K7060@e) (void)) (if (not (for-all K2261@id? K7075@export*)) (K2993@syntax-violation '#f '"module exports must be identifiers" K7060@e) (void)) (values K7074@name (list->vector K7075@export*) K7076@b*))) K7072@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K7070@t))) (K2758@syntax-dispatch K7070@t '(_ any each-any . each-any)))) K7062@t))) (K2758@syntax-dispatch K7062@t '(_ each-any . each-any)))) K7060@e))) (set! K2824@K2819 (make-record-type-descriptor 'module-interface '#f 'K2822 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! K2826@K2821 '#f) (set! K2828@K2820 (make-record-constructor-descriptor K2824@K2819 '#f K2826@K2821)) (set! K2831@module-interface? (record-predicate K2824@K2819)) (set! K2833@make-module-interface (record-constructor K2828@K2820)) (set! K2835@module-interface-first-mark (record-accessor K2824@K2819 '0)) (set! K2837@module-interface-exp-id-vec (record-accessor K2824@K2819 '1)) (set! K2839@module-interface-exp-lab-vec (record-accessor K2824@K2819 '2)) (set! K2841@set-module-interface-first-mark! (record-mutator K2824@K2819 '0)) (set! K2843@set-module-interface-exp-id-vec! (record-mutator K2824@K2819 '1)) (set! K2845@set-module-interface-exp-lab-vec! (record-mutator K2824@K2819 '2)) (set! K2847@module-interface-exp-id* (lambda (K7080@iface K7081@id) ((lambda (K7085@diff-marks) (begin (set! K7085@diff-marks (lambda (K7092@ls K7093@x) (begin (if (null? K7092@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (K7096@a) (if (eq? K7096@a K7093@x) '() (cons K7096@a (K7085@diff-marks (cdr K7092@ls) K7093@x)))) (car K7092@ls))))) ((lambda (K7086@diff K7087@id-vec) (if (null? K7086@diff) K7087@id-vec (vector-map (lambda (K7090@x) (K2207@make-stx (K2209@stx-expr K7090@x) (append K7086@diff (K2211@stx-mark* K7090@x)) '() '())) K7087@id-vec))) (K7085@diff-marks (K2211@stx-mark* K7081@id) (K2835@module-interface-first-mark K7080@iface)) (K2837@module-interface-exp-id-vec K7080@iface)))) '#f))) (set! K2849@chi-internal-module (lambda (K7098@e K7099@r K7100@mr K7101@lex* K7102@rhs* K7103@mod** K7104@kwd*) (call-with-values (lambda () (K2818@parse-module K7098@e)) (lambda (K7115@K7112@name K7116@K7113@exp-id* K7117@K7114@e*) ((lambda (K7121@e* K7122@exp-id* K7123@name) ((lambda (K7127@rib) ((lambda (K7129@e*) ((lambda () (call-with-values (lambda () (K2851@chi-body* K7129@e* K7099@r K7100@mr K7101@lex* K7102@rhs* K7103@mod** K7104@kwd* '() K7127@rib '#f)) (lambda (K7139@K7131@e* K7140@K7132@r K7141@K7133@mr K7142@K7134@lex* K7143@K7135@rhs* K7144@K7136@mod** K7145@K7137@kwd* K7146@K7138@_exp*) ((lambda (K7155@_exp* K7156@kwd* K7157@mod** K7158@rhs* K7159@lex* K7160@mr K7161@r K7162@e*) ((lambda (K7171@exp-lab* K7172@mod**) (if (not K7123@name) (values K7159@lex* K7158@rhs* K7122@exp-id* K7171@exp-lab* K7161@r K7160@mr K7172@mod** K7156@kwd*) ((lambda (K7175@lab K7176@iface) (values K7159@lex* K7158@rhs* (vector K7123@name) (vector K7175@lab) (cons (cons K7175@lab (cons '$module K7176@iface)) K7161@r) (cons (cons K7175@lab (cons '$module K7176@iface)) K7160@mr) K7172@mod** K7156@kwd*)) (K2137@gen-label 'module) (K2833@make-module-interface (car (K2211@stx-mark* K7123@name)) (vector-map (lambda (K7179@x) (K2207@make-stx (K2209@stx-expr K7179@x) (K2211@stx-mark* K7179@x) '() '())) K7122@exp-id*) K7171@exp-lab*)))) (vector-map (lambda (K7181@x) (or (K2287@id->label (K2207@make-stx (K2263@id->sym K7181@x) (K2211@stx-mark* K7181@x) (list K7127@rib) '())) (K2993@syntax-violation '#f '"cannot find module export" K7181@x))) K7122@exp-id*) (cons K7162@e* K7157@mod**))) K7146@K7138@_exp* K7145@K7137@kwd* K7144@K7136@mod** K7143@K7135@rhs* K7142@K7134@lex* K7141@K7133@mr K7140@K7132@r K7139@K7131@e*)))))) (map (lambda (K7183@x) (K2241@add-subst K7127@rib K7183@x)) (K2259@syntax->list K7121@e*)))) (K2180@make-empty-rib))) K7117@K7114@e* K7116@K7113@exp-id* K7115@K7112@name))))) (set! K2851@chi-body* (lambda (K7185@e* K7186@r K7187@mr K7188@lex* K7189@rhs* K7190@mod** K7191@kwd* K7192@exp* K7193@rib K7194@top?) (if (null? K7185@e*) (values K7185@e* K7186@r K7187@mr K7188@lex* K7189@rhs* K7190@mod** K7191@kwd* K7192@exp*) ((lambda (K7205@e) (call-with-values (lambda () (K2301@syntax-type K7205@e K7186@r)) (lambda (K7210@K7207@type K7211@K7208@value K7212@K7209@kwd) ((lambda (K7216@kwd K7217@value K7218@type) ((lambda (K7222@kwd*) ((lambda (K7224@t) (if (memv K7224@t '(define)) (call-with-values (lambda () (K2634@parse-define K7205@e)) (lambda (K7228@K7226@id K7229@K7227@rhs) ((lambda (K7232@rhs K7233@id) (begin (if (K2275@bound-id-member? K7233@id K7222@kwd*) (K2993@syntax-violation '#f '"cannot redefine keyword" K7205@e) (void)) (call-with-values (lambda () (K2141@gen-define-label+loc K7233@id K7193@rib)) (lambda (K7238@K7236@lab K7239@K7237@lex) ((lambda (K7242@lex K7243@lab) (begin (K2182@extend-rib! K7193@rib K7233@id K7243@lab) (K2851@chi-body* (cdr K7185@e*) (K2648@add-lexical K7243@lab K7242@lex K7186@r) K7187@mr (cons K7242@lex K7188@lex*) (cons K7232@rhs K7189@rhs*) K7190@mod** K7222@kwd* K7192@exp* K7193@rib K7194@top?))) K7239@K7237@lex K7238@K7236@lab))))) K7229@K7227@rhs K7228@K7226@id))) (if (memv K7224@t '(define-syntax)) (call-with-values (lambda () (K2636@parse-define-syntax K7205@e)) (lambda (K7248@K7246@id K7249@K7247@rhs) ((lambda (K7252@rhs K7253@id) (begin (if (K2275@bound-id-member? K7253@id K7222@kwd*) (K2993@syntax-violation '#f '"cannot redefine keyword" K7205@e) (void)) ((lambda (K7256@lab K7257@expanded-rhs) (begin (K2182@extend-rib! K7193@rib K7253@id K7256@lab) ((lambda (K7260@b) (K2851@chi-body* (cdr K7185@e*) (cons (cons K7256@lab K7260@b) K7186@r) (cons (cons K7256@lab K7260@b) K7187@mr) K7188@lex* K7189@rhs* K7190@mod** K7222@kwd* K7192@exp* K7193@rib K7194@top?)) (K2323@make-eval-transformer K7257@expanded-rhs)))) (K2143@gen-define-label K7253@id K7193@rib) (K2853@expand-transformer K7252@rhs K7187@mr)))) K7249@K7247@rhs K7248@K7246@id))) (if (memv K7224@t '(let-syntax letrec-syntax)) ((lambda (K7262@t) ((lambda (K7264@ls/false) (if (and K7264@ls/false (apply (lambda (K7266@xlhs* K7267@xrhs* K7268@xbody*) (if (not (K2271@valid-bound-ids? K7266@xlhs*)) (K2993@syntax-violation '#f '"invalid identifiers" K7205@e) (void))) K7264@ls/false)) (apply (lambda (K7272@xlhs* K7273@xrhs* K7274@xbody*) ((lambda (K7278@xlab*) ((lambda (K7280@xrib) ((lambda (K7282@xb*) ((lambda () (K2851@chi-body* (append (map (lambda (K7284@x) (K2241@add-subst K7280@xrib K7284@x)) K7274@xbody*) (cdr K7185@e*)) (append (map cons K7278@xlab* K7282@xb*) K7186@r) (append (map cons K7278@xlab* K7282@xb*) K7187@mr) K7188@lex* K7189@rhs* K7190@mod** K7222@kwd* K7192@exp* K7193@rib K7194@top?)))) (map (lambda (K7286@x) (K2323@make-eval-transformer (K2853@expand-transformer (if (eq? K7218@type 'let-syntax) K7286@x (K2241@add-subst K7280@xrib K7286@x)) K7187@mr))) K7273@xrhs*))) (K2192@make-full-rib K7272@xlhs* K7278@xlab*))) (map K2137@gen-label K7272@xlhs*))) K7264@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K7262@t))) (K2758@syntax-dispatch K7262@t '(_ #(each (any any)) . each-any)))) K7205@e) (if (memv K7224@t '(begin)) ((lambda (K7288@t) ((lambda (K7290@ls/false) (if K7290@ls/false (apply (lambda (K7292@x*) (K2851@chi-body* (append K7292@x* (cdr K7185@e*)) K7186@r K7187@mr K7188@lex* K7189@rhs* K7190@mod** K7222@kwd* K7192@exp* K7193@rib K7194@top?)) K7290@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K7288@t))) (K2758@syntax-dispatch K7288@t '(_ . each-any)))) K7205@e) (if (memv K7224@t '(global-macro global-macro!)) (K2851@chi-body* (cons (K2241@add-subst K7193@rib (K2788@chi-global-macro K7217@value K7205@e)) (cdr K7185@e*)) K7186@r K7187@mr K7188@lex* K7189@rhs* K7190@mod** K7222@kwd* K7192@exp* K7193@rib K7194@top?) (if (memv K7224@t '(local-macro local-macro!)) (K2851@chi-body* (cons (K2241@add-subst K7193@rib (K2786@chi-local-macro K7217@value K7205@e)) (cdr K7185@e*)) K7186@r K7187@mr K7188@lex* K7189@rhs* K7190@mod** K7222@kwd* K7192@exp* K7193@rib K7194@top?) (if (memv K7224@t '(macro macro!)) (K2851@chi-body* (cons (K2241@add-subst K7193@rib (K2784@chi-macro K7217@value K7205@e)) (cdr K7185@e*)) K7186@r K7187@mr K7188@lex* K7189@rhs* K7190@mod** K7222@kwd* K7192@exp* K7193@rib K7194@top?) (if (memv K7224@t '(module)) (call-with-values (lambda () (K2849@chi-internal-module K7205@e K7186@r K7187@mr K7188@lex* K7189@rhs* K7190@mod** K7222@kwd*)) (lambda (K7302@K7294@lex* K7303@K7295@rhs* K7304@K7296@m-exp-id* K7305@K7297@m-exp-lab* K7306@K7298@r K7307@K7299@mr K7308@K7300@mod** K7309@K7301@kwd*) ((lambda (K7318@kwd* K7319@mod** K7320@mr K7321@r K7322@m-exp-lab* K7323@m-exp-id* K7324@rhs* K7325@lex*) (begin (vector-for-each (lambda (K7334@id K7335@lab) (K2182@extend-rib! K7193@rib K7334@id K7335@lab)) K7323@m-exp-id* K7322@m-exp-lab*) (K2851@chi-body* (cdr K7185@e*) K7321@r K7320@mr K7325@lex* K7324@rhs* K7319@mod** K7318@kwd* K7192@exp* K7193@rib K7194@top?))) K7309@K7301@kwd* K7308@K7300@mod** K7307@K7299@mr K7306@K7298@r K7305@K7297@m-exp-lab* K7304@K7296@m-exp-id* K7303@K7295@rhs* K7302@K7294@lex*))) (if (memv K7224@t '(library)) (begin (K2963@library-expander (K2283@stx->datum K7205@e)) (K2851@chi-body* (cdr K7185@e*) K7186@r K7187@mr K7188@lex* K7189@rhs* K7190@mod** K7222@kwd* K7192@exp* K7193@rib K7194@top?)) (if (memv K7224@t '(export)) ((lambda (K7338@t) ((lambda (K7340@ls/false) (if K7340@ls/false (apply (lambda (K7342@exp-decl*) (K2851@chi-body* (cdr K7185@e*) K7186@r K7187@mr K7188@lex* K7189@rhs* K7190@mod** K7222@kwd* (append K7342@exp-decl* K7192@exp*) K7193@rib K7194@top?)) K7340@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K7338@t))) (K2758@syntax-dispatch K7338@t '(_ . each-any)))) K7205@e) (if (memv K7224@t '(import)) ((lambda () ((lambda (K7345@module-import? K7347@module-import K7349@library-import) (begin (set! K7345@module-import? (lambda (K7421@e) ((lambda (K7423@t) ((lambda (K7425@ls/false) (if (and K7425@ls/false (apply (lambda (K7427@id) (K2261@id? K7427@id)) K7425@ls/false)) (apply (lambda (K7429@id) '#t) K7425@ls/false) ((lambda (K7431@t) ((lambda (K7433@ls/false) (if K7433@ls/false (apply (lambda (K7435@imp*) '#f) K7433@ls/false) ((lambda (K7437@t) ((lambda (K7439@ls/false) (if K7439@ls/false (apply (lambda () (K2993@syntax-violation '#f '"malformed import form" K7421@e)) K7439@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K7437@t))) (K2758@syntax-dispatch K7437@t '_))) K7431@t))) (K2758@syntax-dispatch K7431@t '(_ . each-any)))) K7423@t))) (K2758@syntax-dispatch K7423@t '(_ any)))) K7421@e))) (set! K7347@module-import (lambda (K7390@e K7391@r) ((lambda (K7394@t) ((lambda (K7396@ls/false) (if (and K7396@ls/false (apply (lambda (K7398@id) (K2261@id? K7398@id)) K7396@ls/false)) (apply (lambda (K7400@id) (call-with-values (lambda () (K2301@syntax-type K7400@id K7391@r)) (lambda (K7405@K7402@type K7406@K7403@value K7407@K7404@kwd) ((lambda (K7411@kwd K7412@value K7413@type) ((lambda (K7417@t) (if (memv K7417@t '($module)) ((lambda (K7419@iface) (values (K2847@module-interface-exp-id* K7419@iface K7400@id) (K2839@module-interface-exp-lab-vec K7419@iface))) K7412@value) (K2993@syntax-violation '#f '"invalid import" K7390@e))) K7413@type)) K7407@K7404@kwd K7406@K7403@value K7405@K7402@type)))) K7396@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K7394@t))) (K2758@syntax-dispatch K7394@t '(_ any)))) K7390@e))) (set! K7349@library-import (lambda (K7364@e) ((lambda (K7366@t) ((lambda (K7368@ls/false) (if K7368@ls/false (apply (lambda (K7370@ctxt K7371@imp*) (call-with-values (lambda () (K2861@parse-import-spec* (K2999@syntax->datum K7371@imp*))) (lambda (K7376@K7374@subst-names K7377@K7375@subst-labels) ((lambda (K7380@subst-labels K7381@subst-names) (values (vector-map (lambda (K7384@name) (K2227@datum->stx K7370@ctxt K7384@name)) K7381@subst-names) K7380@subst-labels)) K7377@K7375@subst-labels K7376@K7374@subst-names)))) K7368@ls/false) ((lambda (K7386@t) ((lambda (K7388@ls/false) (if K7388@ls/false (apply (lambda () (K2993@syntax-violation '#f '"invalid import form" K7364@e)) K7388@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K7386@t))) (K2758@syntax-dispatch K7386@t '_))) K7366@t))) (K2758@syntax-dispatch K7366@t '(any . each-any)))) K7364@e))) (begin (call-with-values (lambda () (if (K7345@module-import? K7205@e) (K7347@module-import K7205@e K7186@r) (K7349@library-import K7205@e))) (lambda (K7352@K7350@id* K7353@K7351@lab*) ((lambda (K7356@lab* K7357@id*) (vector-for-each (lambda (K7360@id K7361@lab) (K2182@extend-rib! K7193@rib K7360@id K7361@lab)) K7357@id* K7356@lab*)) K7353@K7351@lab* K7352@K7350@id*))) (K2851@chi-body* (cdr K7185@e*) K7186@r K7187@mr K7188@lex* K7189@rhs* K7190@mod** K7222@kwd* K7192@exp* K7193@rib K7194@top?)))) '#f '#f '#f))) (if K7194@top? (K2851@chi-body* (cdr K7185@e*) K7186@r K7187@mr (cons (K2133@gen-lexical 'dummy) K7188@lex*) (cons (cons 'top-expr K7205@e) K7189@rhs*) K7190@mod** K7222@kwd* K7192@exp* K7193@rib K7194@top?) (values K7185@e* K7186@r K7187@mr K7188@lex* K7189@rhs* K7190@mod** K7222@kwd* K7192@exp*)))))))))))))) K7218@type)) (if (K2261@id? K7216@kwd) (cons K7216@kwd K7191@kwd*) K7191@kwd*))) K7212@K7209@kwd K7211@K7208@value K7210@K7207@type)))) (car K7185@e*))))) (set! K2853@expand-transformer (lambda (K7441@expr K7442@r) ((lambda (K7445@rtc) ((lambda (K7447@expanded-rhs) (begin (for-each ((lambda (K7449@mark-visit) (lambda (K7451@x) (begin (K1789@K1444@invoke-library K7451@x) (K7449@mark-visit K7451@x)))) (K2869@vis-collector)) (K7445@rtc)) K7447@expanded-rhs)) ((lambda (K7457@K7453@inv-collector K7458@K7454@vis-collector K7459@K7455@inv-collector K7460@K7456@vis-collector) ((lambda (K7465@swap) (dynamic-wind K7465@swap (lambda () (K2794@chi-expr K7441@expr K7442@r K7442@r)) K7465@swap)) (lambda () (begin ((lambda (K7467@t) (begin (K7457@K7453@inv-collector K7459@K7455@inv-collector) (set! K7459@K7455@inv-collector K7467@t))) (K7457@K7453@inv-collector)) ((lambda (K7469@t) (begin (K7458@K7454@vis-collector K7460@K7456@vis-collector) (set! K7460@K7456@vis-collector K7469@t))) (K7458@K7454@vis-collector)))))) K2867@inv-collector K2869@vis-collector K7445@rtc (lambda (K7471@x) (values))))) (K2865@make-collector)))) (set! K2855@parse-exports (lambda (K7473@exp*) ((letrec ((K7475@f (lambda (K7477@exp* K7478@int* K7479@ext*) (if (null? K7477@exp*) (begin (if (not (K2271@valid-bound-ids? K7479@ext*)) (K2993@syntax-violation 'export '"invalid exports" (K2814@find-dups K7479@ext*)) (void)) (values (map K2999@syntax->datum K7479@ext*) K7478@int*)) ((lambda (K7483@t) ((lambda (K7485@ls/false) (if K7485@ls/false (apply (lambda (K7487@rename K7488@i* K7489@e*) (begin (if (not (and (eq? (K2999@syntax->datum K7487@rename) 'rename) (for-all K2261@id? K7488@i*) (for-all K2261@id? K7489@e*))) (K2993@syntax-violation 'export '"invalid export specifier" (car K7477@exp*)) (void)) (K7475@f (cdr K7477@exp*) (append K7488@i* K7478@int*) (append K7489@e* K7479@ext*)))) K7485@ls/false) ((lambda (K7493@t) ((lambda (K7495@ls/false) (if K7495@ls/false (apply (lambda (K7497@ie) (begin (if (not (K2261@id? K7497@ie)) (K2993@syntax-violation 'export '"invalid export" K7497@ie) (void)) (K7475@f (cdr K7477@exp*) (cons K7497@ie K7478@int*) (cons K7497@ie K7479@ext*)))) K7495@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K7493@t))) (K2758@syntax-dispatch K7493@t 'any))) K7483@t))) (K2758@syntax-dispatch K7483@t '(any . #(each (any any)))))) (car K7477@exp*)))))) K7475@f) K7473@exp* '() '()))) (set! K2857@parse-library-name (lambda (K7499@spec) ((lambda (K7502@parse) (begin (set! K7502@parse (lambda (K7513@x) ((lambda (K7515@t) ((lambda (K7517@ls/false) (if (and K7517@ls/false (apply (lambda (K7519@v*) (for-all (lambda (K7521@x) ((lambda (K7523@x) (and (integer? K7523@x) (exact? K7523@x))) (K2999@syntax->datum K7521@x))) K7519@v*)) K7517@ls/false)) (apply (lambda (K7525@v*) (values '() (map K2999@syntax->datum K7525@v*))) K7517@ls/false) ((lambda (K7527@t) ((lambda (K7529@ls/false) (if (and K7529@ls/false (apply (lambda (K7531@x K7532@rest) (symbol? (K2999@syntax->datum K7531@x))) K7529@ls/false)) (apply (lambda (K7535@x K7536@rest) (call-with-values (lambda () (K7502@parse K7536@rest)) (lambda (K7541@K7539@x* K7542@K7540@v*) ((lambda (K7545@v* K7546@x*) (values (cons (K2999@syntax->datum K7535@x) K7546@x*) K7545@v*)) K7542@K7540@v* K7541@K7539@x*)))) K7529@ls/false) ((lambda (K7549@t) ((lambda (K7551@ls/false) (if K7551@ls/false (apply (lambda () (values '() '())) K7551@ls/false) ((lambda (K7553@t) ((lambda (K7555@ls/false) (if K7555@ls/false (apply (lambda () (K2993@syntax-violation '#f '"invalid library name" K7499@spec)) K7555@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K7553@t))) (K2758@syntax-dispatch K7553@t '_))) K7549@t))) (K2758@syntax-dispatch K7549@t '()))) K7527@t))) (K2758@syntax-dispatch K7527@t '(any . any)))) K7515@t))) (K2758@syntax-dispatch K7515@t '(each-any)))) K7513@x))) (call-with-values (lambda () (K7502@parse K7499@spec)) (lambda (K7505@K7503@name* K7506@K7504@ver*) ((lambda (K7509@ver* K7510@name*) (begin (if (null? K7510@name*) (K2993@syntax-violation '#f '"empty library name" K7499@spec) (void)) (values K7510@name* K7509@ver*))) K7506@K7504@ver* K7505@K7503@name*))))) '#f))) (set! K2859@parse-library (lambda (K7557@e) ((lambda (K7559@t) ((lambda (K7561@ls/false) (if (and K7561@ls/false (apply (lambda (K7563@library K7564@name* K7565@export K7566@exp* K7567@import K7568@imp* K7569@b*) (and (eq? (K2999@syntax->datum K7565@export) 'export) (eq? (K2999@syntax->datum K7567@import) 'import) (eq? (K2999@syntax->datum K7563@library) 'library))) K7561@ls/false)) (apply (lambda (K7577@library K7578@name* K7579@export K7580@exp* K7581@import K7582@imp* K7583@b*) (values K7578@name* K7580@exp* K7582@imp* K7583@b*)) K7561@ls/false) ((lambda (K7591@t) ((lambda (K7593@ls/false) (if K7593@ls/false (apply (lambda () (K2993@syntax-violation '#f '"malformed library" K7557@e)) K7593@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K7591@t))) (K2758@syntax-dispatch K7591@t '_))) K7559@t))) (K2758@syntax-dispatch K7559@t '(any each-any (any . each-any) (any . each-any) . each-any)))) K7557@e))) (set! K2861@parse-import-spec* ((lambda () ((lambda (K7596@idsyn? K7598@dup-error K7600@merge-substs K7602@exclude* K7604@find* K7606@rem* K7608@remove-dups K7610@parse-library-name K7612@import-library K7614@get-import K7616@add-imports!) (begin (set! K7596@idsyn? (lambda (K8107@x) (symbol? (K2999@syntax->datum K8107@x)))) (set! K7598@dup-error (lambda (K8105@name) (K2993@syntax-violation 'import '"two imports with different bindings" K8105@name))) (set! K7600@merge-substs (lambda (K8087@s K8088@subst) ((lambda (K8092@insert-to-subst) (begin (set! K8092@insert-to-subst (lambda (K8093@a K8094@subst) ((lambda (K8097@name K8098@label) ((lambda (K8101@t) (if K8101@t ((lambda (K8103@x) (if (eq? (cdr K8103@x) K8098@label) K8094@subst (K7598@dup-error K8097@name))) K8101@t) (cons K8093@a K8094@subst))) (assq K8097@name K8094@subst))) (car K8093@a) (cdr K8093@a)))) (if (null? K8087@s) K8088@subst (K8092@insert-to-subst (car K8087@s) (K7600@merge-substs (cdr K8087@s) K8088@subst))))) '#f))) (set! K7602@exclude* (lambda (K8045@sym* K8046@subst) ((lambda (K8050@exclude) (begin (set! K8050@exclude (lambda (K8071@sym K8072@subst) (if (null? K8072@subst) (K2993@syntax-violation 'import '"cannot rename unbound identifier" K8071@sym) (if (eq? K8071@sym (caar K8072@subst)) (values (cdar K8072@subst) (cdr K8072@subst)) ((lambda (K8075@a) (call-with-values (lambda () (K8050@exclude K8071@sym (cdr K8072@subst))) (lambda (K8079@K8077@old K8080@K8078@subst) ((lambda (K8083@subst K8084@old) (values K8084@old (cons K8075@a K8083@subst))) K8080@K8078@subst K8079@K8077@old)))) (car K8072@subst)))))) (if (null? K8045@sym*) (values '() K8046@subst) (call-with-values (lambda () (K8050@exclude (car K8045@sym*) K8046@subst)) (lambda (K8053@K8051@old K8054@K8052@subst) ((lambda (K8057@subst K8058@old) (call-with-values (lambda () (K7602@exclude* (cdr K8045@sym*) K8057@subst)) (lambda (K8063@K8061@old* K8064@K8062@subst) ((lambda (K8067@subst K8068@old*) (values (cons K8058@old K8068@old*) K8067@subst)) K8064@K8062@subst K8063@K8061@old*)))) K8054@K8052@subst K8053@K8051@old)))))) '#f))) (set! K7604@find* (lambda (K8037@sym* K8038@subst) (map (lambda (K8041@x) ((lambda (K8043@t) (if K8043@t (cdr K8043@t) (K2993@syntax-violation 'import '"cannot find identifier" K8041@x))) (assq K8041@x K8038@subst))) K8037@sym*))) (set! K7606@rem* (lambda (K8029@sym* K8030@subst) ((letrec ((K8033@f (lambda (K8035@subst) (if (null? K8035@subst) '() (if (memq (caar K8035@subst) K8029@sym*) (K8033@f (cdr K8035@subst)) (cons (car K8035@subst) (K8033@f (cdr K8035@subst)))))))) K8033@f) K8030@subst))) (set! K7608@remove-dups (lambda (K8027@ls) (if (null? K8027@ls) '() (if (memq (car K8027@ls) (cdr K8027@ls)) (K7608@remove-dups (cdr K8027@ls)) (cons (car K8027@ls) (K7608@remove-dups (cdr K8027@ls))))))) (set! K7610@parse-library-name (lambda (K7797@spec) ((lambda (K7800@subversion? K7802@subversion-pred K7804@version-pred) (begin (set! K7800@subversion? (lambda (K8023@x) ((lambda (K8025@x) (and (integer? K8025@x) (exact? K8025@x) (>= K8025@x '0))) (K2999@syntax->datum K8023@x)))) (set! K7802@subversion-pred (lambda (K7927@x*) ((lambda (K7929@t) ((lambda (K7931@ls/false) (if (and K7931@ls/false (apply (lambda (K7933@n) (K7800@subversion? K7933@n)) K7931@ls/false)) (apply (lambda (K7935@n) (lambda (K7937@x) (= K7937@x (K2999@syntax->datum K7935@n)))) K7931@ls/false) ((lambda (K7939@t) ((lambda (K7941@ls/false) (if (and K7941@ls/false (apply (lambda (K7943@p? K7944@sub*) (eq? (K2999@syntax->datum K7943@p?) 'and)) K7941@ls/false)) (apply (lambda (K7947@p? K7948@sub*) ((lambda (K7951@p*) (lambda (K7953@x) (for-all (lambda (K7955@p) (K7955@p K7953@x)) K7951@p*))) (map K7802@subversion-pred K7948@sub*))) K7941@ls/false) ((lambda (K7957@t) ((lambda (K7959@ls/false) (if (and K7959@ls/false (apply (lambda (K7961@p? K7962@sub*) (eq? (K2999@syntax->datum K7961@p?) 'or)) K7959@ls/false)) (apply (lambda (K7965@p? K7966@sub*) ((lambda (K7969@p*) (lambda (K7971@x) (exists (lambda (K7973@p) (K7973@p K7971@x)) K7969@p*))) (map K7802@subversion-pred K7966@sub*))) K7959@ls/false) ((lambda (K7975@t) ((lambda (K7977@ls/false) (if (and K7977@ls/false (apply (lambda (K7979@p? K7980@sub) (eq? (K2999@syntax->datum K7979@p?) 'not)) K7977@ls/false)) (apply (lambda (K7983@p? K7984@sub) ((lambda (K7987@p) (lambda (K7989@x) (not (K7987@p K7989@x)))) (K7802@subversion-pred K7984@sub))) K7977@ls/false) ((lambda (K7991@t) ((lambda (K7993@ls/false) (if (and K7993@ls/false (apply (lambda (K7995@p? K7996@n) (and (eq? (K2999@syntax->datum K7995@p?) '<=) (K7800@subversion? K7996@n))) K7993@ls/false)) (apply (lambda (K7999@p? K8000@n) (lambda (K8003@x) (<= K8003@x (K2999@syntax->datum K8000@n)))) K7993@ls/false) ((lambda (K8005@t) ((lambda (K8007@ls/false) (if (and K8007@ls/false (apply (lambda (K8009@p? K8010@n) (and (eq? (K2999@syntax->datum K8009@p?) '>=) (K7800@subversion? K8010@n))) K8007@ls/false)) (apply (lambda (K8013@p? K8014@n) (lambda (K8017@x) (>= K8017@x (K2999@syntax->datum K8014@n)))) K8007@ls/false) ((lambda (K8019@t) ((lambda (K8021@ls/false) (if K8021@ls/false (apply (lambda () (K2993@syntax-violation 'import '"invalid sub-version spec" K7797@spec K7927@x*)) K8021@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K8019@t))) (K2758@syntax-dispatch K8019@t '_))) K8005@t))) (K2758@syntax-dispatch K8005@t '(any any)))) K7991@t))) (K2758@syntax-dispatch K7991@t '(any any)))) K7975@t))) (K2758@syntax-dispatch K7975@t '(any any)))) K7957@t))) (K2758@syntax-dispatch K7957@t '(any . each-any)))) K7939@t))) (K2758@syntax-dispatch K7939@t '(any . each-any)))) K7929@t))) (K2758@syntax-dispatch K7929@t 'any))) K7927@x*))) (set! K7804@version-pred (lambda (K7847@x*) ((lambda (K7849@t) ((lambda (K7851@ls/false) (if K7851@ls/false (apply (lambda () (lambda (K7853@x) '#t)) K7851@ls/false) ((lambda (K7855@t) ((lambda (K7857@ls/false) (if (and K7857@ls/false (apply (lambda (K7859@c K7860@ver*) (eq? (K2999@syntax->datum K7859@c) 'and)) K7857@ls/false)) (apply (lambda (K7863@c K7864@ver*) ((lambda (K7867@p*) (lambda (K7869@x) (for-all (lambda (K7871@p) (K7871@p K7869@x)) K7867@p*))) (map K7804@version-pred K7864@ver*))) K7857@ls/false) ((lambda (K7873@t) ((lambda (K7875@ls/false) (if (and K7875@ls/false (apply (lambda (K7877@c K7878@ver*) (eq? (K2999@syntax->datum K7877@c) 'or)) K7875@ls/false)) (apply (lambda (K7881@c K7882@ver*) ((lambda (K7885@p*) (lambda (K7887@x) (exists (lambda (K7889@p) (K7889@p K7887@x)) K7885@p*))) (map K7804@version-pred K7882@ver*))) K7875@ls/false) ((lambda (K7891@t) ((lambda (K7893@ls/false) (if (and K7893@ls/false (apply (lambda (K7895@c K7896@ver) (eq? (K2999@syntax->datum K7895@c) 'not)) K7893@ls/false)) (apply (lambda (K7899@c K7900@ver) ((lambda (K7903@p) (lambda (K7905@x) (not (K7903@p K7905@x)))) (K7804@version-pred K7900@ver))) K7893@ls/false) ((lambda (K7907@t) ((lambda (K7909@ls/false) (if K7909@ls/false (apply (lambda (K7911@sub*) ((lambda (K7913@p*) (lambda (K7915@x) ((letrec ((K7917@f (lambda (K7919@p* K7920@x) (if (null? K7919@p*) '#t (if (null? K7920@x) '#f (and ((car K7919@p*) (car K7920@x)) (K7917@f (cdr K7919@p*) (cdr K7920@x)))))))) K7917@f) K7913@p* K7915@x))) (map K7802@subversion-pred K7911@sub*))) K7909@ls/false) ((lambda (K7923@t) ((lambda (K7925@ls/false) (if K7925@ls/false (apply (lambda () (K2993@syntax-violation 'import '"invalid version spec" K7797@spec K7847@x*)) K7925@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K7923@t))) (K2758@syntax-dispatch K7923@t '_))) K7907@t))) (K2758@syntax-dispatch K7907@t 'each-any))) K7891@t))) (K2758@syntax-dispatch K7891@t '(any any)))) K7873@t))) (K2758@syntax-dispatch K7873@t '(any . each-any)))) K7855@t))) (K2758@syntax-dispatch K7855@t '(any . each-any)))) K7849@t))) (K2758@syntax-dispatch K7849@t '()))) K7847@x*))) ((letrec ((K7805@f (lambda (K7807@x) ((lambda (K7809@t) ((lambda (K7811@ls/false) (if K7811@ls/false (apply (lambda (K7813@version-spec*) (values '() (K7804@version-pred K7813@version-spec*))) K7811@ls/false) ((lambda (K7815@t) ((lambda (K7817@ls/false) (if (and K7817@ls/false (apply (lambda (K7819@x K7820@x*) (K7596@idsyn? K7819@x)) K7817@ls/false)) (apply (lambda (K7823@x K7824@x*) (call-with-values (lambda () (K7805@f K7824@x*)) (lambda (K7829@K7827@name K7830@K7828@pred) ((lambda (K7833@pred K7834@name) (values (cons (K2999@syntax->datum K7823@x) K7834@name) K7833@pred)) K7830@K7828@pred K7829@K7827@name)))) K7817@ls/false) ((lambda (K7837@t) ((lambda (K7839@ls/false) (if K7839@ls/false (apply (lambda () (values '() (lambda (K7841@x) '#t))) K7839@ls/false) ((lambda (K7843@t) ((lambda (K7845@ls/false) (if K7845@ls/false (apply (lambda () (K2993@syntax-violation '#f '"invalid import spec" K7797@spec)) K7845@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K7843@t))) (K2758@syntax-dispatch K7843@t '_))) K7837@t))) (K2758@syntax-dispatch K7837@t '()))) K7815@t))) (K2758@syntax-dispatch K7815@t '(any . any)))) K7809@t))) (K2758@syntax-dispatch K7809@t '(each-any)))) K7807@x)))) K7805@f) K7797@spec))) '#f '#f '#f))) (set! K7612@import-library (lambda (K7783@spec*) (call-with-values (lambda () (K7610@parse-library-name K7783@spec*)) (lambda (K7787@K7785@name K7788@K7786@pred) ((lambda (K7791@pred K7792@name) (begin (if (null? K7792@name) (K2993@syntax-violation 'import '"empty library name" K7783@spec*) (void)) ((lambda (K7795@lib) (begin (if (not K7795@lib) (K2993@syntax-violation 'import '"cannot find library with required name" K7792@name) (void)) (if (not (K7791@pred (K1742@K1350@library-version K7795@lib))) (K2993@syntax-violation 'import '"library does not satisfy version specification" K7783@spec* K7795@lib) (void)) ((K2871@imp-collector) K7795@lib) (K1746@K1358@library-subst K7795@lib))) (K1782@K1430@find-library-by-name K7792@name)))) K7788@K7786@pred K7787@K7785@name))))) (set! K7614@get-import (lambda (K7641@spec) ((lambda (K7643@t) ((lambda (K7645@ls/false) (if (and K7645@ls/false (apply (lambda (K7647@x K7648@x*) (not (memq (K2999@syntax->datum K7647@x) '(for rename except only prefix library)))) K7645@ls/false)) (apply (lambda (K7651@x K7652@x*) (K7612@import-library (cons K7651@x K7652@x*))) K7645@ls/false) ((lambda (K7655@t) ((lambda (K7657@ls/false) (if (and K7657@ls/false (apply (lambda (K7659@rename K7660@isp K7661@old* K7662@new*) (and (eq? (K2999@syntax->datum K7659@rename) 'rename) (for-all K7596@idsyn? K7661@old*) (for-all K7596@idsyn? K7662@new*))) K7657@ls/false)) (apply (lambda (K7667@rename K7668@isp K7669@old* K7670@new*) ((lambda (K7675@subst K7676@old* K7677@new*) ((lambda (K7681@old-label*) ((lambda (K7683@subst) (K7600@merge-substs (map cons K7677@new* K7681@old-label*) K7683@subst)) (K7606@rem* K7676@old* K7675@subst))) (K7604@find* K7676@old* K7675@subst))) (K7614@get-import K7668@isp) (map K2999@syntax->datum K7669@old*) (map K2999@syntax->datum K7670@new*))) K7657@ls/false) ((lambda (K7685@t) ((lambda (K7687@ls/false) (if (and K7687@ls/false (apply (lambda (K7689@except K7690@isp K7691@sym*) (and (eq? (K2999@syntax->datum K7689@except) 'except) (for-all K7596@idsyn? K7691@sym*))) K7687@ls/false)) (apply (lambda (K7695@except K7696@isp K7697@sym*) ((lambda (K7701@subst) (K7606@rem* (map K2999@syntax->datum K7697@sym*) K7701@subst)) (K7614@get-import K7696@isp))) K7687@ls/false) ((lambda (K7703@t) ((lambda (K7705@ls/false) (if (and K7705@ls/false (apply (lambda (K7707@only K7708@isp K7709@sym*) (and (eq? (K2999@syntax->datum K7707@only) 'only) (for-all K7596@idsyn? K7709@sym*))) K7705@ls/false)) (apply (lambda (K7713@only K7714@isp K7715@sym*) ((lambda (K7719@subst K7720@sym*) ((lambda (K7723@sym*) ((lambda (K7725@lab*) (map cons K7723@sym* K7725@lab*)) (K7604@find* K7723@sym* K7719@subst))) (K7608@remove-dups K7720@sym*))) (K7614@get-import K7714@isp) (map K2999@syntax->datum K7715@sym*))) K7705@ls/false) ((lambda (K7727@t) ((lambda (K7729@ls/false) (if (and K7729@ls/false (apply (lambda (K7731@prefix K7732@isp K7733@p) (and (eq? (K2999@syntax->datum K7731@prefix) 'prefix) (K7596@idsyn? K7733@p))) K7729@ls/false)) (apply (lambda (K7737@prefix K7738@isp K7739@p) ((lambda (K7743@subst K7744@prefix) (map (lambda (K7747@x) (cons (string->symbol (string-append K7744@prefix (symbol->string (car K7747@x)))) (cdr K7747@x))) K7743@subst)) (K7614@get-import K7738@isp) (symbol->string (K2999@syntax->datum K7739@p)))) K7729@ls/false) ((lambda (K7749@t) ((lambda (K7751@ls/false) (if (and K7751@ls/false (apply (lambda (K7753@library K7754@spec*) (eq? (K2999@syntax->datum K7753@library) 'library)) K7751@ls/false)) (apply (lambda (K7757@library K7758@spec*) (K7612@import-library K7758@spec*)) K7751@ls/false) ((lambda (K7761@t) ((lambda (K7763@ls/false) (if (and K7763@ls/false (apply (lambda (K7765@for K7766@isp K7767@rest) (eq? (K2999@syntax->datum K7765@for) 'for)) K7763@ls/false)) (apply (lambda (K7771@for K7772@isp K7773@rest) (K7614@get-import K7772@isp)) K7763@ls/false) ((lambda (K7777@t) ((lambda (K7779@ls/false) (if K7779@ls/false (apply (lambda (K7781@spec) (K2993@syntax-violation 'import '"invalid import spec" K7781@spec)) K7779@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K7777@t))) (K2758@syntax-dispatch K7777@t 'any))) K7761@t))) (K2758@syntax-dispatch K7761@t '(any any . any)))) K7749@t))) (K2758@syntax-dispatch K7749@t '(any each-any)))) K7727@t))) (K2758@syntax-dispatch K7727@t '(any any any)))) K7703@t))) (K2758@syntax-dispatch K7703@t '(any any . each-any)))) K7685@t))) (K2758@syntax-dispatch K7685@t '(any any . each-any)))) K7655@t))) (K2758@syntax-dispatch K7655@t '(any any . #(each (any any)))))) K7643@t))) (K2758@syntax-dispatch K7643@t '(any . each-any)))) K7641@spec))) (set! K7616@add-imports! (lambda (K7625@imp K7626@h) ((lambda (K7629@subst) (for-each (lambda (K7631@x) ((lambda (K7633@name K7634@label) ((lambda (K7637@t) (if K7637@t ((lambda (K7639@l) (if (not (eq? K7639@l K7634@label)) (K7598@dup-error K7633@name) (void))) K7637@t) (hashtable-set! K7626@h K7633@name K7634@label))) (hashtable-ref K7626@h K7633@name '#f))) (car K7631@x) (cdr K7631@x))) K7629@subst)) (K7614@get-import K7625@imp)))) (lambda (K7617@imp*) ((letrec ((K7619@f (lambda (K7621@imp* K7622@h) (if (null? K7621@imp*) (hashtable-entries K7622@h) (begin (K7616@add-imports! (car K7621@imp*) K7622@h) (K7619@f (cdr K7621@imp*) K7622@h)))))) K7619@f) K7617@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! K2863@make-top-rib (lambda (K8109@names K8110@labels) ((lambda (K8113@rib) (begin (vector-for-each (lambda (K8115@name K8116@label) (begin (if (not (symbol? K8115@name)) (error 'make-top-rib '"BUG: not a symbol" K8115@name) (void)) (K2184@extend-rib/nc! K8113@rib (K2207@make-stx K8115@name K2129@top-mark* '() '()) K8116@label))) K8109@names K8110@labels) K8113@rib)) (K2180@make-empty-rib)))) (set! K2865@make-collector (lambda () ((lambda (K8119@ls) (lambda K8123 ((lambda (K8124) (if (= K8124 '0) (apply (lambda () K8119@ls) K8123) (if (= K8124 '1) (apply (lambda (K8121@x) (set! K8119@ls (K2122@set-cons K8121@x K8119@ls))) K8123) (error 'apply '"invalid arg count")))) (length K8123)))) '()))) (set! K2867@inv-collector (K1161@K939@make-parameter (lambda K8125@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (K8127@x) (begin (if (not (procedure? K8127@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" K8127@x) (void)) K8127@x)))) (set! K2869@vis-collector (K1161@K939@make-parameter (lambda K8129@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (K8131@x) (begin (if (not (procedure? K8131@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" K8131@x) (void)) K8131@x)))) (set! K2871@imp-collector (K1161@K939@make-parameter (lambda K8133@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (K8135@x) (begin (if (not (procedure? K8135@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" K8135@x) (void)) K8135@x)))) (set! K2873@chi-library-internal (lambda (K8137@e* K8138@rib K8139@top?) (call-with-values (lambda () (K2851@chi-body* K8137@e* '() '() '() '() '() '() '() K8138@rib K8139@top?)) (lambda (K8151@K8143@e* K8152@K8144@r K8153@K8145@mr K8154@K8146@lex* K8155@K8147@rhs* K8156@K8148@mod** K8157@K8149@_kwd* K8158@K8150@exp*) ((lambda (K8167@exp* K8168@_kwd* K8169@mod** K8170@rhs* K8171@lex* K8172@mr K8173@r K8174@e*) (values (append (apply append (reverse K8169@mod**)) K8174@e*) K8173@r K8172@mr (reverse K8171@lex*) (reverse K8170@rhs*) K8167@exp*)) K8158@K8150@exp* K8157@K8149@_kwd* K8156@K8148@mod** K8155@K8147@rhs* K8154@K8146@lex* K8153@K8145@mr K8152@K8144@r K8151@K8143@e*))))) (set! K2875@chi-interaction-expr (lambda (K8183@e K8184@rib K8185@r) (call-with-values (lambda () (K2851@chi-body* (list K8183@e) K8185@r K8185@r '() '() '() '() '() K8184@rib '#t)) (lambda (K8197@K8189@e* K8198@K8190@r K8199@K8191@mr K8200@K8192@lex* K8201@K8193@rhs* K8202@K8194@mod** K8203@K8195@_kwd* K8204@K8196@_exp*) ((lambda (K8213@_exp* K8214@_kwd* K8215@mod** K8216@rhs* K8217@lex* K8218@mr K8219@r K8220@e*) ((lambda (K8229@e*) ((lambda (K8231@e) (values K8231@e K8219@r)) (if (null? K8229@e*) (K2103@K1961@build-void) (if (null? (cdr K8229@e*)) (car K8229@e*) (K2102@K1959@build-sequence '#f K8229@e*))))) (K2808@expand-interaction-rhs*/init* (reverse K8217@lex*) (reverse K8216@rhs*) (append (apply append (reverse K8215@mod**)) K8220@e*) K8219@r K8218@mr))) K8204@K8196@_exp* K8203@K8195@_kwd* K8202@K8194@mod** K8201@K8193@rhs* K8200@K8192@lex* K8199@K8191@mr K8198@K8190@r K8197@K8189@e*))))) (set! K2877@library-body-expander (lambda (K8233@name K8234@main-exp* K8235@imp* K8236@b* K8237@top?) ((lambda (K8244@itc) (begin (set! K8244@itc (K2865@make-collector)) (begin (if (symbol-value 'debug-expand) (format '#t '"library-body-expander=~a\n" K8236@b*) (void)) ((lambda (K8249@K8245@imp-collector K8250@K8246@top-level-context K8251@K8247@imp-collector K8252@K8248@top-level-context) ((lambda (K8257@swap) (dynamic-wind K8257@swap (lambda () (call-with-values (lambda () (K2861@parse-import-spec* K8235@imp*)) (lambda (K8261@K8259@subst-names K8262@K8260@subst-labels) ((lambda (K8265@subst-labels K8266@subst-names) ((lambda (K8269@rib) ((lambda (K8272@wrap) (begin (set! K8272@wrap (lambda (K8380@x) (K2207@make-stx K8380@x K2129@top-mark* (list K8269@rib) '()))) ((lambda (K8273@b* K8274@main-exp* K8275@rtc K8276@vtc) (begin (if (symbol-value 'debug-expand) (format '#t '"b[i]=~a\n" (K2209@stx-expr (car K8273@b*))) (void)) ((lambda (K8285@K8281@inv-collector K8286@K8282@vis-collector K8287@K8283@inv-collector K8288@K8284@vis-collector) ((lambda (K8293@swap) (dynamic-wind K8293@swap (lambda () (call-with-values (lambda () (K2873@chi-library-internal K8273@b* K8269@rib K8237@top?)) (lambda (K8301@K8295@init* K8302@K8296@r K8303@K8297@mr K8304@K8298@lex* K8305@K8299@rhs* K8306@K8300@internal-exp*) ((lambda (K8313@internal-exp* K8314@rhs* K8315@lex* K8316@mr K8317@r K8318@init*) (begin (if (symbol-value 'debug-expand) (format '#t '"b[j]=~a init*=~a r=~a mr=~a lex=~a rhs*=~a internal-exp~a\n" (K2209@stx-expr (car K8273@b*)) K8318@init* K8317@r K8316@mr K8315@lex* (K2209@stx-expr (cdar K8314@rhs*)) K8313@internal-exp*) (void)) (call-with-values (lambda () (K2855@parse-exports (append K8274@main-exp* K8313@internal-exp*))) (lambda (K8327@K8325@exp-name* K8328@K8326@exp-id*) ((lambda (K8331@exp-id* K8332@exp-name*) (begin (K2188@seal-rib! K8269@rib) (if (symbol-value 'debug-expand) (format '#t '"before rhs*=~a\n" K8314@rhs*) (void)) ((lambda (K8335@init*) ((lambda (K8337@rhs*) ((lambda () (begin (K2190@unseal-rib! K8269@rib) ((lambda (K8339@loc* K8340@export-subst) ((lambda (K8344@errstr) (begin (set! K8344@errstr '"attempt to export mutated variable") (call-with-values (lambda () (K2973@make-export-env/macros K8315@lex* K8339@loc* K8317@r)) (lambda (K8348@K8345@export-env K8349@K8346@global* K8350@K8347@macro*) ((lambda (K8354@macro* K8355@global* K8356@export-env) (begin (for-each (lambda (K8360@s) ((lambda (K8362@name K8363@label) ((lambda (K8366@p) (if K8366@p ((lambda (K8368@b) ((lambda (K8370@type) (if (eq? K8370@type 'mutable) (K2993@syntax-violation 'export K8344@errstr K8362@name) (void))) (car K8368@b))) (cdr K8366@p)) (void))) (assq K8363@label K8356@export-env))) (car K8360@s) (cdr K8360@s))) K8340@export-subst) ((lambda (K8372@invoke-body K8373@invoke-definitions) (values (K8244@itc) (K8275@rtc) (K8276@vtc) (K2102@K1959@build-sequence '#f (append K8373@invoke-definitions (list K8372@invoke-body))) K8354@macro* K8340@export-subst K8356@export-env)) (K2105@K1965@build-letrec* '#f K8315@lex* K8337@rhs* (K2969@build-exports K8355@global* K8335@init*)) (map K2098@K1796@build-global-define (map cdr K8355@global*))))) K8350@K8347@macro* K8349@K8346@global* K8348@K8345@export-env))))) '#f)) (map K2135@gen-global K8315@lex*) (K2971@make-export-subst K8332@exp-name* K8331@exp-id*)))))) (K2810@chi-rhs* K8314@rhs* K8317@r K8316@mr))) (K2790@chi-expr* K8318@init* K8317@r K8316@mr)))) K8328@K8326@exp-id* K8327@K8325@exp-name*))))) K8306@K8300@internal-exp* K8305@K8299@rhs* K8304@K8298@lex* K8303@K8297@mr K8302@K8296@r K8301@K8295@init*)))) K8293@swap)) (lambda () (begin ((lambda (K8376@t) (begin (K8285@K8281@inv-collector K8287@K8283@inv-collector) (set! K8287@K8283@inv-collector K8376@t))) (K8285@K8281@inv-collector)) ((lambda (K8378@t) (begin (K8286@K8282@vis-collector K8288@K8284@vis-collector) (set! K8288@K8284@vis-collector K8378@t))) (K8286@K8282@vis-collector)))))) K2867@inv-collector K2869@vis-collector K8275@rtc K8276@vtc))) (map K8272@wrap K8236@b*) (map K8272@wrap K8234@main-exp*) (K2865@make-collector) (K2865@make-collector)))) '#f)) (K2863@make-top-rib K8266@subst-names K8265@subst-labels))) K8262@K8260@subst-labels K8261@K8259@subst-names)))) K8257@swap)) (lambda () (begin ((lambda (K8382@t) (begin (K8249@K8245@imp-collector K8251@K8247@imp-collector) (set! K8251@K8247@imp-collector K8382@t))) (K8249@K8245@imp-collector)) ((lambda (K8384@t) (begin (K8250@K8246@top-level-context K8252@K8248@top-level-context) (set! K8252@K8248@top-level-context K8384@t))) (K8250@K8246@top-level-context)))))) K2871@imp-collector K3007@top-level-context K8244@itc '#f)))) '#f))) (set! K2879@core-library-expander (lambda (K8386@e K8387@verify-name) (call-with-values (lambda () (K2859@parse-library K8386@e)) (lambda (K8394@K8390@name* K8395@K8391@exp* K8396@K8392@imp* K8397@K8393@b*) ((lambda (K8402@b* K8403@imp* K8404@exp* K8405@name*) (call-with-values (lambda () (K2857@parse-library-name K8405@name*)) (lambda (K8412@K8410@name K8413@K8411@ver) ((lambda (K8416@ver K8417@name) (begin (K8387@verify-name K8417@name) (call-with-values (lambda () (K2877@library-body-expander K8417@name K8404@exp* K8403@imp* K8402@b* '#f)) (lambda (K8427@K8420@imp* K8428@K8421@invoke-req* K8429@K8422@visit-req* K8430@K8423@invoke-code K8431@K8424@visit-code K8432@K8425@export-subst K8433@K8426@export-env) ((lambda (K8441@export-env K8442@export-subst K8443@visit-code K8444@invoke-code K8445@visit-req* K8446@invoke-req* K8447@imp*) (values K8417@name K8416@ver K8447@imp* K8446@invoke-req* K8445@visit-req* K8444@invoke-code K8443@visit-code K8442@export-subst K8441@export-env)) K8433@K8426@export-env K8432@K8425@export-subst K8431@K8424@visit-code K8430@K8423@invoke-code K8429@K8422@visit-req* K8428@K8421@invoke-req* K8427@K8420@imp*))))) K8413@K8411@ver K8412@K8410@name)))) K8397@K8393@b* K8396@K8392@imp* K8395@K8391@exp* K8394@K8390@name*))))) (set! K2881@parse-top-level-program (lambda (K8455@e*) ((lambda (K8457@t) ((lambda (K8459@ls/false) (if (and K8459@ls/false (apply (lambda (K8461@import K8462@imp* K8463@b*) (eq? (K2999@syntax->datum K8461@import) 'import)) K8459@ls/false)) (apply (lambda (K8467@import K8468@imp* K8469@b*) (values K8468@imp* K8469@b*)) K8459@ls/false) ((lambda (K8473@t) ((lambda (K8475@ls/false) (if (and K8475@ls/false (apply (lambda (K8477@import K8478@x K8479@y) (eq? (K2999@syntax->datum K8477@import) 'import)) K8475@ls/false)) (apply (lambda (K8483@import K8484@x K8485@y) (K2993@syntax-violation 'expander '"invalid syntax of top-level program" (K2255@syntax-car K8455@e*))) K8475@ls/false) ((lambda (K8489@t) ((lambda (K8491@ls/false) (if K8491@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) K8491@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K8489@t))) (K2758@syntax-dispatch K8489@t '_))) K8473@t))) (K2758@syntax-dispatch K8473@t '((any . any) . any)))) K8457@t))) (K2758@syntax-dispatch K8457@t '((any . each-any) . each-any)))) K8455@e*))) (set! K2883@top-level-expander (lambda (K8493@e*) (call-with-values (lambda () (K2881@parse-top-level-program K8493@e*)) (lambda (K8497@K8495@imp* K8498@K8496@b*) ((lambda (K8501@b* K8502@imp*) (call-with-values (lambda () (K2877@library-body-expander '() '() K8502@imp* K8501@b* '#t)) (lambda (K8512@K8505@imp* K8513@K8506@invoke-req* K8514@K8507@visit-req* K8515@K8508@invoke-code K8516@K8509@visit-code K8517@K8510@export-subst K8518@K8511@export-env) ((lambda (K8526@export-env K8527@export-subst K8528@visit-code K8529@invoke-code K8530@visit-req* K8531@invoke-req* K8532@imp*) (values K8531@invoke-req* K8529@invoke-code)) K8518@K8511@export-env K8517@K8510@export-subst K8516@K8509@visit-code K8515@K8508@invoke-code K8514@K8507@visit-req* K8513@K8506@invoke-req* K8512@K8505@imp*)))) K8498@K8496@b* K8497@K8495@imp*))))) (set! K2889@K2884 (make-record-type-descriptor 'env '#f 'K2887 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! K2891@K2886 '#f) (set! K2893@K2885 (make-record-constructor-descriptor K2889@K2884 '#f K2891@K2886)) (set! K2896@env? (record-predicate K2889@K2884)) (set! K2898@make-env (record-constructor K2893@K2885)) (set! K2900@env-names (record-accessor K2889@K2884 '0)) (set! K2902@env-labels (record-accessor K2889@K2884 '1)) (set! K2904@env-itc (record-accessor K2889@K2884 '2)) (set! K2906@set-env-names! (record-mutator K2889@K2884 '0)) (set! K2908@set-env-labels! (record-mutator K2889@K2884 '1)) (set! K2910@set-env-itc! (record-mutator K2889@K2884 '2)) (set! K2912@rp (K1158@K933@make-record-printer 'env (lambda (K8540@x K8541@p K8542@wr) (display '"#<environment>" K8541@p)))) (set! K2918@K2913 (make-record-type-descriptor 'interaction-env '#f 'K2916 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! K2920@K2915 '#f) (set! K2922@K2914 (make-record-constructor-descriptor K2918@K2913 '#f K2920@K2915)) (set! K2925@interaction-env? (record-predicate K2918@K2913)) (set! K2927@make-interaction-env (record-constructor K2922@K2914)) (set! K2929@interaction-env-rib (record-accessor K2918@K2913 '0)) (set! K2931@interaction-env-r (record-accessor K2918@K2913 '1)) (set! K2933@interaction-env-locs (record-accessor K2918@K2913 '2)) (set! K2935@set-interaction-env-rib! (record-mutator K2918@K2913 '0)) (set! K2937@set-interaction-env-r! (record-mutator K2918@K2913 '1)) (set! K2939@set-interaction-env-locs! (record-mutator K2918@K2913 '2)) (set! K2941@rp (K1158@K933@make-record-printer 'interaction-env (lambda (K8546@x K8547@p K8548@wr) (display '"#<environment>" K8547@p)))) (set! K2943@interaction-environment-symbols (lambda () (K2951@environment-symbols (K3005@interaction-environment)))) (set! K2945@environment-bindings (lambda (K8552@e) (vector->list (vector-map (lambda (K8554@name K8555@label) (K2947@parse-binding (cons K8554@name (K1788@K1442@imported-label->binding K8555@label)))) (K2900@env-names K8552@e) (K2902@env-labels K8552@e))))) (set! K2947@parse-binding (lambda (K8558@b) (cons (car K8558@b) ((lambda (K8560@t) (if (memv K8560@t '(core-prim global)) 'procedure (if (memv K8560@t '(core-macro macro global-macro)) 'syntax (if (memv K8560@t '($core-rtd)) 'record (if (eq? (car K8558@b) (cadr K8558@b)) 'syntax 'unknown))))) (cadr K8558@b))))) (set! K2949@environment? (lambda (K8562@x) (or (K2896@env? K8562@x) (K2925@interaction-env? K8562@x)))) (set! K2951@environment-symbols (lambda (K8564@x) (if (K2896@env? K8564@x) (vector->list (K2900@env-names K8564@x)) (if (K2925@interaction-env? K8564@x) (map values (K2160@rib-sym* (K2929@interaction-env-rib K8564@x))) (assertion-violation 'environment-symbols '"not an environment" K8564@x))))) (set! K2953@environment (lambda K8566@imp* ((lambda (K8568@itc) ((lambda (K8572@K8570@imp-collector K8573@K8571@imp-collector) ((lambda (K8576@swap) (dynamic-wind K8576@swap (lambda () (call-with-values (lambda () (K2861@parse-import-spec* K8566@imp*)) (lambda (K8580@K8578@subst-names K8581@K8579@subst-labels) ((lambda (K8584@subst-labels K8585@subst-names) (K2898@make-env K8585@subst-names K8584@subst-labels K8568@itc)) K8581@K8579@subst-labels K8580@K8578@subst-names)))) K8576@swap)) (lambda () ((lambda (K8588@t) (begin (K8572@K8570@imp-collector K8573@K8571@imp-collector) (set! K8573@K8571@imp-collector K8588@t))) (K8572@K8570@imp-collector))))) K2871@imp-collector K8568@itc)) (K2865@make-collector)))) (set! K2955@null-environment (lambda (K8590@n) (begin (if (not (eqv? K8590@n '5)) (assertion-violation 'null-environment '"not 5" K8590@n) (void)) (K2953@environment '(psyntax null-environment-5))))) (set! K2957@scheme-report-environment (lambda (K8592@n) (begin (if (not (eqv? K8592@n '5)) (assertion-violation 'scheme-report-environment '"not 5" K8592@n) (void)) (K2953@environment '(psyntax scheme-report-environment-5))))) (set! K2959@expand (lambda (K8594@x K8595@env) (if (K2896@env? K8595@env) ((lambda (K8598@rib) ((lambda (K8600@x K8601@itc K8602@rtc K8603@vtc) ((lambda (K8608@x) (begin (K2188@seal-rib! K8598@rib) (values K8608@x (K8602@rtc)))) ((lambda (K8618@K8610@top-level-context K8619@K8611@inv-collector K8620@K8612@vis-collector K8621@K8613@imp-collector K8622@K8614@top-level-context K8623@K8615@inv-collector K8624@K8616@vis-collector K8625@K8617@imp-collector) ((lambda (K8634@swap) (dynamic-wind K8634@swap (lambda () (K2794@chi-expr K8600@x '() '())) K8634@swap)) (lambda () (begin ((lambda (K8636@t) (begin (K8618@K8610@top-level-context K8622@K8614@top-level-context) (set! K8622@K8614@top-level-context K8636@t))) (K8618@K8610@top-level-context)) ((lambda (K8638@t) (begin (K8619@K8611@inv-collector K8623@K8615@inv-collector) (set! K8623@K8615@inv-collector K8638@t))) (K8619@K8611@inv-collector)) ((lambda (K8640@t) (begin (K8620@K8612@vis-collector K8624@K8616@vis-collector) (set! K8624@K8616@vis-collector K8640@t))) (K8620@K8612@vis-collector)) ((lambda (K8642@t) (begin (K8621@K8613@imp-collector K8625@K8617@imp-collector) (set! K8625@K8617@imp-collector K8642@t))) (K8621@K8613@imp-collector)))))) K3007@top-level-context K2867@inv-collector K2869@vis-collector K2871@imp-collector '#f K8602@rtc K8603@vtc K8601@itc))) (K2207@make-stx K8594@x K2129@top-mark* (list K8598@rib) '()) (K2904@env-itc K8595@env) (K2865@make-collector) (K2865@make-collector))) (K2863@make-top-rib (K2900@env-names K8595@env) (K2902@env-labels K8595@env))) (if (K2925@interaction-env? K8595@env) ((lambda (K8644@rib K8645@r K8646@rtc) ((lambda (K8650@x) (call-with-values (lambda () ((lambda (K8662@K8654@top-level-context K8663@K8655@inv-collector K8664@K8656@vis-collector K8665@K8657@imp-collector K8666@K8658@top-level-context K8667@K8659@inv-collector K8668@K8660@vis-collector K8669@K8661@imp-collector) ((lambda (K8678@swap) (dynamic-wind K8678@swap (lambda () (K2875@chi-interaction-expr K8650@x K8644@rib K8645@r)) K8678@swap)) (lambda () (begin ((lambda (K8680@t) (begin (K8662@K8654@top-level-context K8666@K8658@top-level-context) (set! K8666@K8658@top-level-context K8680@t))) (K8662@K8654@top-level-context)) ((lambda (K8682@t) (begin (K8663@K8655@inv-collector K8667@K8659@inv-collector) (set! K8667@K8659@inv-collector K8682@t))) (K8663@K8655@inv-collector)) ((lambda (K8684@t) (begin (K8664@K8656@vis-collector K8668@K8660@vis-collector) (set! K8668@K8660@vis-collector K8684@t))) (K8664@K8656@vis-collector)) ((lambda (K8686@t) (begin (K8665@K8657@imp-collector K8669@K8661@imp-collector) (set! K8669@K8661@imp-collector K8686@t))) (K8665@K8657@imp-collector)))))) K3007@top-level-context K2867@inv-collector K2869@vis-collector K2871@imp-collector K8595@env K8646@rtc (K2865@make-collector) (K2865@make-collector))) (lambda (K8688@K8652@e K8689@K8653@r^) ((lambda (K8692@r^ K8693@e) (begin (K2937@set-interaction-env-r! K8595@env K8692@r^) (values K8693@e (K8646@rtc)))) K8689@K8653@r^ K8688@K8652@e)))) (K2207@make-stx K8594@x K2129@top-mark* (list K8644@rib) '()))) (K2929@interaction-env-rib K8595@env) (K2931@interaction-env-r K8595@env) (K2865@make-collector)) (assertion-violation 'expand '"not an environment" K8595@env))))) (set! K2961@eval (lambda (K8696@x K8697@env) (begin (if (not (K2949@environment? K8697@env)) (error 'eval '"not an environment" K8697@env) (void)) (call-with-values (lambda () (K2959@expand K8696@x K8697@env)) (lambda (K8702@K8700@x K8703@K8701@invoke-req*) ((lambda (K8706@invoke-req* K8707@x) (begin (for-each K1789@K1444@invoke-library K8706@invoke-req*) (eval-core (K1245@K1173@expanded->core K8707@x)))) K8703@K8701@invoke-req* K8702@K8700@x)))))) (set! K2963@library-expander (lambda K8811 ((lambda (K8812) (if (= K8812 '3) (apply (lambda (K8710@x K8711@filename K8712@verify-name) ((lambda (K8717@build-visit-code K8719@visit!) (begin (set! K8717@build-visit-code (lambda (K8793@macro*) (if (null? K8793@macro*) (K2103@K1961@build-void) (K2102@K1959@build-sequence '#f (map (lambda (K8795@x) ((lambda (K8797@loc K8798@src) (list 'set! K8797@loc K8798@src)) (car K8795@x) (cddr K8795@x))) K8793@macro*))))) (set! K8719@visit! (lambda (K8785@macro*) (for-each (lambda (K8787@x) ((lambda (K8789@loc K8790@proc) (set-symbol-value! K8789@loc K8790@proc)) (car K8787@x) (cadr K8787@x))) K8785@macro*))) (call-with-values (lambda () (K2879@core-library-expander K8710@x K8712@verify-name)) (lambda (K8729@K8720@name K8730@K8721@ver K8731@K8722@imp* K8732@K8723@inv* K8733@K8724@vis* K8734@K8725@invoke-code K8735@K8726@macro* K8736@K8727@export-subst K8737@K8728@export-env) ((lambda (K8747@export-env K8748@export-subst K8749@macro* K8750@invoke-code K8751@vis* K8752@inv* K8753@imp* K8754@ver K8755@name) ((lambda (K8765@id K8766@name K8767@ver K8768@imp* K8769@vis* K8770@inv* K8771@visit-proc K8772@invoke-proc K8773@visit-code K8774@invoke-code) (begin (K1787@K1440@install-library K8765@id K8766@name K8767@ver K8768@imp* K8769@vis* K8770@inv* K8748@export-subst K8747@export-env K8771@visit-proc K8772@invoke-proc K8773@visit-code K8774@invoke-code '#t K8711@filename) (values K8765@id K8766@name K8767@ver K8768@imp* K8769@vis* K8770@inv* K8774@invoke-code K8773@visit-code K8748@export-subst K8747@export-env))) (K1147@K911@gensym) K8755@name K8754@ver (map K1793@K1452@library-spec K8753@imp*) (map K1793@K1452@library-spec K8751@vis*) (map K1793@K1452@library-spec K8752@inv*) (lambda () (K8719@visit! K8749@macro*)) (lambda () (eval-core (K1245@K1173@expanded->core K8750@invoke-code))) (K8717@build-visit-code K8749@macro*) K8750@invoke-code)) K8737@K8728@export-env K8736@K8727@export-subst K8735@K8726@macro* K8734@K8725@invoke-code K8733@K8724@vis* K8732@K8723@inv* K8731@K8722@imp* K8730@K8721@ver K8729@K8720@name))))) '#f '#f)) K8811) (if (= K8812 '2) (apply (lambda (K8801@x K8802@filename) (K2963@library-expander K8801@x K8802@filename (lambda (K8805@x) (values)))) K8811) (if (= K8812 '1) (apply (lambda (K8807@x) (K2963@library-expander K8807@x '#f (lambda (K8809@x) (values)))) K8811) (error 'apply '"invalid arg count"))))) (length K8811)))) (set! K2965@boot-library-expand (lambda (K8813@x) (call-with-values (lambda () (K2963@library-expander K8813@x)) (lambda (K8825@K8815@id K8826@K8816@name K8827@K8817@ver K8828@K8818@imp* K8829@K8819@vis* K8830@K8820@inv* K8831@K8821@invoke-code K8832@K8822@visit-code K8833@K8823@export-subst K8834@K8824@export-env) ((lambda (K8845@export-env K8846@export-subst K8847@visit-code K8848@invoke-code K8849@inv* K8850@vis* K8851@imp* K8852@ver K8853@name K8854@id) (values K8853@name K8848@invoke-code K8846@export-subst K8845@export-env)) K8834@K8824@export-env K8833@K8823@export-subst K8832@K8822@visit-code K8831@K8821@invoke-code K8830@K8820@inv* K8829@K8819@vis* K8828@K8818@imp* K8827@K8817@ver K8826@K8816@name K8825@K8815@id))))) (set! K2967@rev-map-append (lambda (K8865@f K8866@ls K8867@ac) (if (null? K8866@ls) K8867@ac (K2967@rev-map-append K8865@f (cdr K8866@ls) (cons (K8865@f (car K8866@ls)) K8867@ac))))) (set! K2969@build-exports (lambda (K8871@lex*+loc* K8872@init*) (K2102@K1959@build-sequence '#f (cons (K2103@K1961@build-void) (K2967@rev-map-append (lambda (K8875@x) (list 'set! (cdr K8875@x) (car K8875@x))) K8871@lex*+loc* K8872@init*))))) (set! K2971@make-export-subst (lambda (K8877@name* K8878@id*) (map (lambda (K8881@name K8882@id) ((lambda (K8885@label) (begin (if (not K8885@label) (K2993@syntax-violation '#f '"cannot export unbound identifier" K8882@id) (void)) (cons K8881@name K8885@label))) (K2287@id->label K8882@id))) K8877@name* K8878@id*))) (set! K2973@make-export-env/macros (lambda (K8887@lex* K8888@loc* K8889@r) ((lambda (K8894@lookup) (begin (set! K8894@lookup (lambda (K8923@x) ((letrec ((K8925@f (lambda (K8927@x K8928@lex* K8929@loc*) (if (pair? K8928@lex*) (if (eq? K8927@x (car K8928@lex*)) (car K8929@loc*) (K8925@f K8927@x (cdr K8928@lex*) (cdr K8929@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) K8925@f) K8923@x K8887@lex* K8888@loc*))) ((letrec ((K8895@f (lambda (K8897@r K8898@env K8899@global* K8900@macro*) (if (null? K8897@r) (values K8898@env K8899@global* K8900@macro*) ((lambda (K8905@x) ((lambda (K8907@label K8908@b) ((lambda (K8911@t) (if (memv K8911@t '(lexical)) ((lambda (K8913@v) ((lambda (K8915@loc K8916@type) (K8895@f (cdr K8897@r) (cons (cons* K8907@label K8916@type K8915@loc) K8898@env) (cons (cons (K2642@lexical-var K8913@v) K8915@loc) K8899@global*) K8900@macro*)) (K8894@lookup (K2642@lexical-var K8913@v)) (if (K2644@lexical-mutable? K8913@v) 'mutable 'global))) (K2297@binding-value K8908@b)) (if (memv K8911@t '(local-macro)) ((lambda (K8919@loc) (K8895@f (cdr K8897@r) (cons (cons* K8907@label 'global-macro K8919@loc) K8898@env) K8899@global* (cons (cons K8919@loc (K2297@binding-value K8908@b)) K8900@macro*))) (K1147@K911@gensym)) (if (memv K8911@t '(local-macro!)) ((lambda (K8921@loc) (K8895@f (cdr K8897@r) (cons (cons* K8907@label 'global-macro! K8921@loc) K8898@env) K8899@global* (cons (cons K8921@loc (K2297@binding-value K8908@b)) K8900@macro*))) (K1147@K911@gensym)) (if (memv K8911@t '($rtd $module)) (K8895@f (cdr K8897@r) (cons K8905@x K8898@env) K8899@global* K8900@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (K2295@binding-type K8908@b) (K2297@binding-value K8908@b))))))) (K2295@binding-type K8908@b))) (car K8905@x) (cdr K8905@x))) (car K8897@r)))))) K8895@f) K8889@r '() '() '()))) '#f))) (set! K2975@generate-temporaries (lambda (K8933@ls) ((lambda (K8935@t) ((lambda (K8937@ls/false) (if K8937@ls/false (apply (lambda (K8939@ls) (map (lambda (K8941@x) (K2207@make-stx ((lambda (K8943@x) (if (or (symbol? K8943@x) (string? K8943@x)) (K1147@K911@gensym K8943@x) (K1147@K911@gensym 't))) (K2999@syntax->datum K8941@x)) K2129@top-mark* '() '())) K8939@ls)) K8937@ls/false) ((lambda (K8945@t) ((lambda (K8947@ls/false) (if K8947@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) K8947@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K8945@t))) (K2758@syntax-dispatch K8945@t '_))) K8935@t))) (K2758@syntax-dispatch K8935@t 'each-any))) K8933@ls))) (set! K2977@free-identifier=? (lambda (K8949@x K8950@y) (if (K2261@id? K8949@x) (if (K2261@id? K8950@y) (K2269@free-id=? K8949@x K8950@y) (assertion-violation 'free-identifier=? '"not an identifier" K8950@y)) (assertion-violation 'free-identifier=? '"not an identifier" K8949@x)))) (set! K2979@bound-identifier=? (lambda (K8953@x K8954@y) (if (K2261@id? K8953@x) (if (K2261@id? K8954@y) (K2267@bound-id=? K8953@x K8954@y) (assertion-violation 'bound-identifier=? '"not an identifier" K8954@y)) (assertion-violation 'bound-identifier=? '"not an identifier" K8953@x)))) (set! K2981@make-source-condition (lambda (K8957@x) ((lambda (K8967@K8962 K8969@K8964 K8971@K8963 K8974@K8961 K8976@make-source-condition K8978@K8959 K8980@K8960 K8982@source-condition? K8984@source-filename K8986@source-character) (begin (set! K8967@K8962 (make-record-type-descriptor '&source-information K10069@K9384@&condition-rtd 'K8965 '#f '#f '#((immutable file-name) (immutable character)))) (set! K8969@K8964 '#f) (set! K8971@K8963 (make-record-constructor-descriptor K8967@K8962 K10070@K9386@&condition-rcd K8969@K8964)) (set! K8974@K8961 (record-predicate K8967@K8962)) (set! K8976@make-source-condition (record-constructor K8971@K8963)) (set! K8978@K8959 (record-accessor K8967@K8962 '0)) (set! K8980@K8960 (record-accessor K8967@K8962 '1)) (set! K8982@source-condition? (condition-predicate K8967@K8962)) (set! K8984@source-filename (condition-accessor K8967@K8962 K8978@K8959)) (set! K8986@source-character (condition-accessor K8967@K8962 K8980@K8960)) (if (pair? K8957@x) (K8976@make-source-condition (car K8957@x) (cdr K8957@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! K2983@extract-position-condition (lambda (K8987@x) (K2981@make-source-condition (K2985@expression-position K8987@x)))) (set! K2985@expression-position (lambda (K8989@x) (and (K2205@stx? K8989@x) ((lambda (K8991@x) (and (K1150@K917@annotation? K8991@x) (K1151@K919@annotation-source K8991@x))) (K2209@stx-expr K8989@x))))) (set! K2987@assertion-error (lambda (K8993@expr K8994@pos) (raise (condition (K10117@K9576@make-assertion-violation) (K10135@K9624@make-who-condition 'assert) (K10075@K9467@make-message-condition '"assertion failed") (K10125@K9598@make-irritants-condition (list K8993@expr)) (K2981@make-source-condition K8994@pos))))) (set! K2989@syntax-error (lambda (K8997@x . K8999@args) (begin (if (not (for-all string? K8999@args)) (assertion-violation 'syntax-error '"invalid argument" K8999@args) (void)) (raise (condition (K10075@K9467@make-message-condition (if (null? K8999@args) '"invalid syntax" (apply string-append K8999@args))) (K10169@K9714@make-syntax-violation (K2999@syntax->datum K8997@x) '#f) (K2983@extract-position-condition K8997@x)))))) (set! K2991@syntax-violation* (lambda (K9001@who K9002@msg K9003@form K9004@condition-object) (begin (if (not (string? K9002@msg)) (assertion-violation 'syntax-violation '"message is not a string" K9002@msg) (void)) ((lambda (K9009@who) (raise (condition (if K9009@who (K10135@K9624@make-who-condition K9009@who) (condition)) (K10075@K9467@make-message-condition K9002@msg) K9004@condition-object (K2983@extract-position-condition K9003@form)))) (if (or (string? K9001@who) (symbol? K9001@who)) K9001@who (if (not K9001@who) ((lambda (K9011@t) ((lambda (K9013@ls/false) (if (and K9013@ls/false (apply (lambda (K9015@id) (K2261@id? K9015@id)) K9013@ls/false)) (apply (lambda (K9017@id) (K2999@syntax->datum K9017@id)) K9013@ls/false) ((lambda (K9019@t) ((lambda (K9021@ls/false) (if (and K9021@ls/false (apply (lambda (K9023@id K9024@rest) (K2261@id? K9023@id)) K9021@ls/false)) (apply (lambda (K9027@id K9028@rest) (K2999@syntax->datum K9027@id)) K9021@ls/false) ((lambda (K9031@t) ((lambda (K9033@ls/false) (if K9033@ls/false (apply (lambda () '#f) K9033@ls/false) (K2993@syntax-violation '#f '"invalid syntax" K9031@t))) (K2758@syntax-dispatch K9031@t '_))) K9019@t))) (K2758@syntax-dispatch K9019@t '(any . any)))) K9011@t))) (K2758@syntax-dispatch K9011@t 'any))) K9003@form) (assertion-violation 'syntax-violation '"invalid who argument" K9001@who))))))) (set! K2993@syntax-violation (lambda K9049 ((lambda (K9050) (if (= K9050 '3) (apply (lambda (K9035@who K9036@msg K9037@form) (K2993@syntax-violation K9035@who K9036@msg K9037@form '#f)) K9049) (if (= K9050 '4) (apply (lambda (K9041@who K9042@msg K9043@form K9044@subform) (K2991@syntax-violation* K9041@who K9042@msg K9043@form (K10169@K9714@make-syntax-violation (K2999@syntax->datum K9043@form) (K2999@syntax->datum K9044@subform)))) K9049) (error 'apply '"invalid arg count")))) (length K9049)))) (set! K2995@identifier? (lambda (K9051@x) (K2261@id? K9051@x))) (set! K2997@datum->syntax (lambda (K9053@id K9054@datum) (if (K2261@id? K9053@id) (K2227@datum->stx K9053@id K9054@datum) (assertion-violation 'datum->syntax '"not an identifier" K9053@id)))) (set! K2999@syntax->datum (lambda (K9057@x) (K2283@stx->datum K9057@x))) (set! K3001@compile-r6rs-top-level (lambda (K9059@x*) (begin (if (symbol-value 'debug-expand) (format '#t '"x*=~a\n" K9059@x*) (void)) (call-with-values (lambda () (K2883@top-level-expander K9059@x*)) (lambda (K9063@K9061@lib* K9064@K9062@invoke-code) ((lambda (K9067@invoke-code K9068@lib*) (lambda () (begin (for-each K1789@K1444@invoke-library K9068@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (K1245@K1173@expanded->core K9067@invoke-code)) (void)) (eval-core (K1245@K1173@expanded->core K9067@invoke-code))))) K9064@K9062@invoke-code K9063@K9061@lib*)))))) (set! K3003@pre-compile-r6rs-top-level (lambda (K9071@x*) (call-with-values (lambda () (K2883@top-level-expander K9071@x*)) (lambda (K9075@K9073@lib* K9076@K9074@invoke-code) ((lambda (K9079@invoke-code K9080@lib*) (begin (for-each K1789@K1444@invoke-library K9080@lib*) (K1159@K935@compile-core (K1245@K1173@expanded->core K9079@invoke-code)))) K9076@K9074@invoke-code K9075@K9073@lib*))))) (set! K3005@interaction-environment ((lambda (K9083@the-env) (lambda () (or K9083@the-env ((lambda (K9085@lib K9086@rib) (begin ((lambda (K9089@subst) (begin (K2170@set-rib-sym*! K9086@rib (map car K9089@subst)) (K2172@set-rib-mark**! K9086@rib (map (lambda (K9091@x) K2129@top-mark*) K9089@subst)) (K2174@set-rib-label*! K9086@rib (map cdr K9089@subst)))) (K1746@K1358@library-subst K9085@lib)) ((lambda (K9093@env) (begin (set! K9083@the-env K9093@env) K9093@env)) (K2927@make-interaction-env K9086@rib '() '())))) (K1782@K1430@find-library-by-name '(mosh interaction)) (K2180@make-empty-rib))))) '#f)) (set! K3007@top-level-context (K1161@K939@make-parameter '#f)) (begin (set! K9363@K3007@top-level-context K3007@top-level-context) (set! K9362@K3005@interaction-environment K3005@interaction-environment) (set! K9361@K3003@pre-compile-r6rs-top-level K3003@pre-compile-r6rs-top-level) (set! K9360@K3001@compile-r6rs-top-level K3001@compile-r6rs-top-level) (set! K9359@K2999@syntax->datum K2999@syntax->datum) (set! K9358@K2997@datum->syntax K2997@datum->syntax) (set! K9357@K2995@identifier? K2995@identifier?) (set! K9356@K2993@syntax-violation K2993@syntax-violation) (set! K9355@K2991@syntax-violation* K2991@syntax-violation*) (set! K9354@K2989@syntax-error K2989@syntax-error) (set! K9353@K2987@assertion-error K2987@assertion-error) (set! K9352@K2985@expression-position K2985@expression-position) (set! K9351@K2983@extract-position-condition K2983@extract-position-condition) (set! K9350@K2981@make-source-condition K2981@make-source-condition) (set! K9349@K2979@bound-identifier=? K2979@bound-identifier=?) (set! K9348@K2977@free-identifier=? K2977@free-identifier=?) (set! K9347@K2975@generate-temporaries K2975@generate-temporaries) (set! K9346@K2973@make-export-env/macros K2973@make-export-env/macros) (set! K9345@K2971@make-export-subst K2971@make-export-subst) (set! K9344@K2969@build-exports K2969@build-exports) (set! K9343@K2967@rev-map-append K2967@rev-map-append) (set! K9342@K2965@boot-library-expand K2965@boot-library-expand) (set! K9341@K2963@library-expander K2963@library-expander) (set! K9340@K2961@eval K2961@eval) (set! K9339@K2959@expand K2959@expand) (set! K9338@K2957@scheme-report-environment K2957@scheme-report-environment) (set! K9337@K2955@null-environment K2955@null-environment) (set! K9336@K2953@environment K2953@environment) (set! K9335@K2951@environment-symbols K2951@environment-symbols) (set! K9334@K2949@environment? K2949@environment?) (set! K9333@K2947@parse-binding K2947@parse-binding) (set! K9332@K2945@environment-bindings K2945@environment-bindings) (set! K9331@K2943@interaction-environment-symbols K2943@interaction-environment-symbols) (set! K9330@K2941@rp K2941@rp) (set! K9329@K2939@set-interaction-env-locs! K2939@set-interaction-env-locs!) (set! K9328@K2937@set-interaction-env-r! K2937@set-interaction-env-r!) (set! K9327@K2935@set-interaction-env-rib! K2935@set-interaction-env-rib!) (set! K9326@K2933@interaction-env-locs K2933@interaction-env-locs) (set! K9325@K2931@interaction-env-r K2931@interaction-env-r) (set! K9324@K2929@interaction-env-rib K2929@interaction-env-rib) (set! K9323@K2927@make-interaction-env K2927@make-interaction-env) (set! K9322@K2925@interaction-env? K2925@interaction-env?) (set! K9321@K2922@K2914 K2922@K2914) (set! K9320@K2920@K2915 K2920@K2915) (set! K9319@K2918@K2913 K2918@K2913) (set! K9318@K2912@rp K2912@rp) (set! K9317@K2910@set-env-itc! K2910@set-env-itc!) (set! K9316@K2908@set-env-labels! K2908@set-env-labels!) (set! K9315@K2906@set-env-names! K2906@set-env-names!) (set! K9314@K2904@env-itc K2904@env-itc) (set! K9313@K2902@env-labels K2902@env-labels) (set! K9312@K2900@env-names K2900@env-names) (set! K9311@K2898@make-env K2898@make-env) (set! K9310@K2896@env? K2896@env?) (set! K9309@K2893@K2885 K2893@K2885) (set! K9308@K2891@K2886 K2891@K2886) (set! K9307@K2889@K2884 K2889@K2884) (set! K9306@K2883@top-level-expander K2883@top-level-expander) (set! K9305@K2881@parse-top-level-program K2881@parse-top-level-program) (set! K9304@K2879@core-library-expander K2879@core-library-expander) (set! K9303@K2877@library-body-expander K2877@library-body-expander) (set! K9302@K2875@chi-interaction-expr K2875@chi-interaction-expr) (set! K9301@K2873@chi-library-internal K2873@chi-library-internal) (set! K9300@K2871@imp-collector K2871@imp-collector) (set! K9299@K2869@vis-collector K2869@vis-collector) (set! K9298@K2867@inv-collector K2867@inv-collector) (set! K9297@K2865@make-collector K2865@make-collector) (set! K9296@K2863@make-top-rib K2863@make-top-rib) (set! K9295@K2861@parse-import-spec* K2861@parse-import-spec*) (set! K9294@K2859@parse-library K2859@parse-library) (set! K9293@K2857@parse-library-name K2857@parse-library-name) (set! K9292@K2855@parse-exports K2855@parse-exports) (set! K9291@K2853@expand-transformer K2853@expand-transformer) (set! K9290@K2851@chi-body* K2851@chi-body*) (set! K9289@K2849@chi-internal-module K2849@chi-internal-module) (set! K9288@K2847@module-interface-exp-id* K2847@module-interface-exp-id*) (set! K9287@K2845@set-module-interface-exp-lab-vec! K2845@set-module-interface-exp-lab-vec!) (set! K9286@K2843@set-module-interface-exp-id-vec! K2843@set-module-interface-exp-id-vec!) (set! K9285@K2841@set-module-interface-first-mark! K2841@set-module-interface-first-mark!) (set! K9284@K2839@module-interface-exp-lab-vec K2839@module-interface-exp-lab-vec) (set! K9283@K2837@module-interface-exp-id-vec K2837@module-interface-exp-id-vec) (set! K9282@K2835@module-interface-first-mark K2835@module-interface-first-mark) (set! K9281@K2833@make-module-interface K2833@make-module-interface) (set! K9280@K2831@module-interface? K2831@module-interface?) (set! K9279@K2828@K2820 K2828@K2820) (set! K9278@K2826@K2821 K2826@K2821) (set! K9277@K2824@K2819 K2824@K2819) (set! K9276@K2818@parse-module K2818@parse-module) (set! K9275@K2816@chi-internal K2816@chi-internal) (set! K9274@K2814@find-dups K2814@find-dups) (set! K9273@K2812@find-bound=? K2812@find-bound=?) (set! K9272@K2810@chi-rhs* K2810@chi-rhs*) (set! K9271@K2808@expand-interaction-rhs*/init* K2808@expand-interaction-rhs*/init*) (set! K9270@K2806@chi-rhs K2806@chi-rhs) (set! K9269@K2804@chi-defun K2804@chi-defun) (set! K9268@K2802@chi-lambda-clause* K2802@chi-lambda-clause*) (set! K9267@K2800@chi-lambda-clause K2800@chi-lambda-clause) (set! K9266@K2798@verify-formals K2798@verify-formals) (set! K9265@K2796@chi-set! K2796@chi-set!) (set! K9264@K2794@chi-expr K2794@chi-expr) (set! K9263@K2792@chi-application K2792@chi-application) (set! K9262@K2790@chi-expr* K2790@chi-expr*) (set! K9261@K2788@chi-global-macro K2788@chi-global-macro) (set! K9260@K2786@chi-local-macro K2786@chi-local-macro) (set! K9259@K2784@chi-macro K2784@chi-macro) (set! K9258@K2782@do-macro-call K2782@do-macro-call) (set! K9257@K2780@local-macro-transformer K2780@local-macro-transformer) (set! K9256@K2778@macro-transformer K2778@macro-transformer) (set! K9255@K2776@symbol-macro K2776@symbol-macro) (set! K9254@K2774@file-options-macro K2774@file-options-macro) (set! K9253@K2772@core-macro-transformer K2772@core-macro-transformer) (set! K9252@K2770@syntax-transformer K2770@syntax-transformer) (set! K9251@K2768@ellipsis-map K2768@ellipsis-map) (set! K9250@K2766@syntax-case-transformer K2766@syntax-case-transformer) (set! K9249@K2764@verify-literals K2764@verify-literals) (set! K9248@K2762@underscore? K2762@underscore?) (set! K9247@K2760@ellipsis? K2760@ellipsis?) (set! K9246@K2758@syntax-dispatch K2758@syntax-dispatch) (set! K9245@K2756@convert-pattern K2756@convert-pattern) (set! K9244@K2754@foreign-call-transformer K2754@foreign-call-transformer) (set! K9243@K2752@parameterize-macro K2752@parameterize-macro) (set! K9242@K2750@incorrect-usage-macro K2750@incorrect-usage-macro) (set! K9241@K2748@define-condition-type-macro K2748@define-condition-type-macro) (set! K9240@K2746@define-record-type-macro K2746@define-record-type-macro) (set! K9239@K2744@define-struct-macro K2744@define-struct-macro) (set! K9238@K2742@quasisyntax-macro K2742@quasisyntax-macro) (set! K9237@K2740@quasiquote-macro K2740@quasiquote-macro) (set! K9236@K2738@syntax-rules-macro K2738@syntax-rules-macro) (set! K9235@K2736@include-into-macro K2736@include-into-macro) (set! K9234@K2734@include-macro K2734@include-macro) (set! K9233@K2732@do-include K2732@do-include) (set! K9232@K2730@cond-macro K2730@cond-macro) (set! K9231@K2728@and-macro K2728@and-macro) (set! K9230@K2726@or-macro K2726@or-macro) (set! K9229@K2724@let*-macro K2724@let*-macro) (set! K9228@K2722@do-macro K2722@do-macro) (set! K9227@K2720@identifier-syntax-macro K2720@identifier-syntax-macro) (set! K9226@K2718@endianness-macro K2718@endianness-macro) (set! K9225@K2716@assert-macro K2716@assert-macro) (set! K9224@K2714@delay-macro K2714@delay-macro) (set! K9223@K2712@time-macro K2712@time-macro) (set! K9222@K2710@define-enumeration-macro K2710@define-enumeration-macro) (set! K9221@K2708@guard-macro K2708@guard-macro) (set! K9220@K2706@trace-letrec-syntax-macro K2706@trace-letrec-syntax-macro) (set! K9219@K2704@trace-let-syntax-macro K2704@trace-let-syntax-macro) (set! K9218@K2702@trace-let/rec-syntax K2702@trace-let/rec-syntax) (set! K9217@K2700@trace-define-syntax-macro K2700@trace-define-syntax-macro) (set! K9216@K2698@trace-define-macro K2698@trace-define-macro) (set! K9215@K2696@trace-lambda-macro K2696@trace-lambda-macro) (set! K9214@K2694@let*-values-macro K2694@let*-values-macro) (set! K9213@K2692@let-values-macro K2692@let-values-macro) (set! K9212@K2690@let-macro K2690@let-macro) (set! K9211@K2688@invalid-fmls-error K2688@invalid-fmls-error) (set! K9210@K2686@with-syntax-macro K2686@with-syntax-macro) (set! K9209@K2684@bless K2684@bless) (set! K9208@K2682@lambda-transformer K2682@lambda-transformer) (set! K9207@K2680@case-lambda-transformer K2680@case-lambda-transformer) (set! K9206@K2678@quote-transformer K2678@quote-transformer) (set! K9205@K2676@case-macro K2676@case-macro) (set! K9204@K2674@or-transformer K2674@or-transformer) (set! K9203@K2672@and-transformer K2672@and-transformer) (set! K9202@K2670@if-transformer K2670@if-transformer) (set! K9201@K2668@unless-macro K2668@unless-macro) (set! K9200@K2666@when-macro K2666@when-macro) (set! K9199@K2664@record-constructor-descriptor-transformer K2664@record-constructor-descriptor-transformer) (set! K9198@K2662@record-type-descriptor-transformer K2662@record-type-descriptor-transformer) (set! K9197@K2660@type-descriptor-transformer K2660@type-descriptor-transformer) (set! K9196@K2658@fluid-let-syntax-transformer K2658@fluid-let-syntax-transformer) (set! K9195@K2656@letrec*-transformer K2656@letrec*-transformer) (set! K9194@K2654@letrec-transformer K2654@letrec-transformer) (set! K9193@K2652@letrec-helper K2652@letrec-helper) (set! K9192@K2650@add-lexicals K2650@add-lexicals) (set! K9191@K2648@add-lexical K2648@add-lexical) (set! K9190@K2646@set-lexical-mutable! K2646@set-lexical-mutable!) (set! K9189@K2644@lexical-mutable? K2644@lexical-mutable?) (set! K9188@K2642@lexical-var K2642@lexical-var) (set! K9187@K2640@scheme-stx K2640@scheme-stx) (set! K9186@K2638@scheme-stx-hashtable K2638@scheme-stx-hashtable) (set! K9185@K2636@parse-define-syntax K2636@parse-define-syntax) (set! K9184@K2634@parse-define K2634@parse-define) (set! K9183@K2323@make-eval-transformer K2323@make-eval-transformer) (set! K9182@K2321@variable-transformer-procedure K2321@variable-transformer-procedure) (set! K9181@K2319@variable-transformer? K2319@variable-transformer?) (set! K9180@K2317@make-variable-transformer K2317@make-variable-transformer) (set! K9179@K2315@sanitize-binding K2315@sanitize-binding) (set! K9178@K2301@syntax-type K2301@syntax-type) (set! K9177@K2299@raise-unbound-error K2299@raise-unbound-error) (set! K9176@K2297@binding-value K2297@binding-value) (set! K9175@K2295@binding-type K2295@binding-type) (set! K9174@K2293@make-binding K2293@make-binding) (set! K9173@K2291@label->binding K2291@label->binding) (set! K9172@K2289@id->real-label K2289@id->real-label) (set! K9171@K2287@id->label K2287@id->label) (set! K9170@K2285@same-marks*? K2285@same-marks*?) (set! K9169@K2283@stx->datum K2283@stx->datum) (set! K9168@K2281@strip K2281@strip) (set! K9167@K2279@strip-annotations K2279@strip-annotations) (set! K9166@K2277@self-evaluating? K2277@self-evaluating?) (set! K9165@K2275@bound-id-member? K2275@bound-id-member?) (set! K9164@K2273@distinct-bound-ids? K2273@distinct-bound-ids?) (set! K9163@K2271@valid-bound-ids? K2271@valid-bound-ids?) (set! K9162@K2269@free-id=? K2269@free-id=?) (set! K9161@K2267@bound-id=? K2267@bound-id=?) (set! K9160@K2265@same-marks? K2265@same-marks?) (set! K9159@K2263@id->sym K2263@id->sym) (set! K9158@K2261@id? K2261@id?) (set! K9157@K2259@syntax->list K2259@syntax->list) (set! K9156@K2257@syntax-cdr K2257@syntax-cdr) (set! K9155@K2255@syntax-car K2255@syntax-car) (set! K9154@K2253@syntax-list? K2253@syntax-list?) (set! K9153@K2251@syntax-null? K2251@syntax-null?) (set! K9152@K2249@syntax-vector? K2249@syntax-vector?) (set! K9151@K2247@syntax-pair? K2247@syntax-pair?) (set! K9150@K2245@syntax-vector->list K2245@syntax-vector->list) (set! K9149@K2243@syntax-kind? K2243@syntax-kind?) (set! K9148@K2241@add-subst K2241@add-subst) (set! K9147@K2239@add-mark K2239@add-mark) (set! K9146@K2237@mkstx K2237@mkstx) (set! K9145@K2235@join-wraps K2235@join-wraps) (set! K9144@K2233@anti-mark? K2233@anti-mark?) (set! K9143@K2231@anti-mark K2231@anti-mark) (set! K9142@K2229@gen-mark K2229@gen-mark) (set! K9141@K2227@datum->stx K2227@datum->stx) (set! K9140@K2225@rp K2225@rp) (set! K9139@K2223@set-stx-ae*! K2223@set-stx-ae*!) (set! K9138@K2221@set-stx-subst*! K2221@set-stx-subst*!) (set! K9137@K2219@set-stx-mark*! K2219@set-stx-mark*!) (set! K9136@K2217@set-stx-expr! K2217@set-stx-expr!) (set! K9135@K2215@stx-ae* K2215@stx-ae*) (set! K9134@K2213@stx-subst* K2213@stx-subst*) (set! K9133@K2211@stx-mark* K2211@stx-mark*) (set! K9132@K2209@stx-expr K2209@stx-expr) (set! K9131@K2207@make-stx K2207@make-stx) (set! K9130@K2205@stx? K2205@stx?) (set! K9129@K2202@K2194 K2202@K2194) (set! K9128@K2200@K2195 K2200@K2195) (set! K9127@K2198@K2193 K2198@K2193) (set! K9126@K2192@make-full-rib K2192@make-full-rib) (set! K9125@K2190@unseal-rib! K2190@unseal-rib!) (set! K9124@K2188@seal-rib! K2188@seal-rib!) (set! K9123@K2186@make-rib-map K2186@make-rib-map) (set! K9122@K2184@extend-rib/nc! K2184@extend-rib/nc!) (set! K9121@K2182@extend-rib! K2182@extend-rib!) (set! K9120@K2180@make-empty-rib K2180@make-empty-rib) (set! K9119@K2178@set-rib-cache! K2178@set-rib-cache!) (set! K9118@K2176@set-rib-sealed/freq! K2176@set-rib-sealed/freq!) (set! K9117@K2174@set-rib-label*! K2174@set-rib-label*!) (set! K9116@K2172@set-rib-mark**! K2172@set-rib-mark**!) (set! K9115@K2170@set-rib-sym*! K2170@set-rib-sym*!) (set! K9114@K2168@rib-cache K2168@rib-cache) (set! K9113@K2166@rib-sealed/freq K2166@rib-sealed/freq) (set! K9112@K2164@rib-label* K2164@rib-label*) (set! K9111@K2162@rib-mark** K2162@rib-mark**) (set! K9110@K2160@rib-sym* K2160@rib-sym*) (set! K9109@K2158@make-rib K2158@make-rib) (set! K9108@K2156@rib? K2156@rib?) (set! K9107@K2153@K2145 K2153@K2145) (set! K9106@K2151@K2146 K2151@K2146) (set! K9105@K2149@K2144 K2149@K2144) (set! K9104@K2143@gen-define-label K2143@gen-define-label) (set! K9103@K2141@gen-define-label+loc K2141@gen-define-label+loc) (set! K9102@K2139@gen-top-level-label K2139@gen-top-level-label) (set! K9101@K2137@gen-label K2137@gen-label) (set! K9100@K2135@gen-global K2135@gen-global) (set! K9099@K2133@gen-lexical K2133@gen-lexical) (set! K9098@K2131@top-marked? K2131@top-marked?) (set! K9097@K2129@top-mark* K2129@top-mark*) (set! K9096@K2124@set-union K2124@set-union) (set! K9095@K2122@set-cons K2122@set-cons) (K1779@K1424@current-library-expander K2963@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (K9373@K9368 K9375@K9370 K9377@K9369 K9380@&condition? K9382@make-&condition K9384@&condition-rtd K9386@&condition-rcd K9458@K9453 K9460@K9455 K9462@K9454 K9465@p? K9467@make-message-condition K9469@K9452@condition-message K9471@message-condition? K9473@condition-message K9475@&message-rtd K9477@&message-rcd K9483@K9478 K9485@K9480 K9487@K9479 K9490@p? K9492@make-warning K9494@warning? K9496@&warning-rtd K9498@&warning-rcd K9504@K9499 K9506@K9501 K9508@K9500 K9511@p? K9513@make-serious-condition K9515@serious-condition? K9517@&serious-rtd K9519@&serious-rcd K9525@K9520 K9527@K9522 K9529@K9521 K9532@p? K9534@make-error K9536@error? K9538@&error-rtd K9540@&error-rcd K9546@K9541 K9548@K9543 K9550@K9542 K9553@p? K9555@make-violation K9557@violation? K9559@&violation-rtd K9561@&violation-rcd K9567@K9562 K9569@K9564 K9571@K9563 K9574@p? K9576@make-assertion-violation K9578@assertion-violation? K9580@&assertion-rtd K9582@&assertion-rcd K9589@K9584 K9591@K9586 K9593@K9585 K9596@p? K9598@make-irritants-condition K9600@K9583@condition-irritants K9602@irritants-condition? K9604@condition-irritants K9606@&irritants-rtd K9608@&irritants-rcd K9615@K9610 K9617@K9612 K9619@K9611 K9622@p? K9624@make-who-condition K9626@K9609@condition-who K9628@who-condition? K9630@condition-who K9632@&who-rtd K9634@&who-rcd K9640@K9635 K9642@K9637 K9644@K9636 K9647@p? K9649@make-non-continuable-violation K9651@non-continuable-violation? K9653@&non-continuable-rtd K9655@&non-continuable-rcd K9661@K9656 K9663@K9658 K9665@K9657 K9668@p? K9670@make-implementation-restriction-violation K9672@implementation-restriction-violation? K9674@&implementation-restriction-rtd K9676@&implementation-restriction-rcd K9682@K9677 K9684@K9679 K9686@K9678 K9689@p? K9691@make-lexical-violation K9693@lexical-violation? K9695@&lexical-rtd K9697@&lexical-rcd K9705@K9700 K9707@K9702 K9709@K9701 K9712@p? K9714@make-syntax-violation K9716@K9698@syntax-violation-form K9718@K9699@syntax-violation-subform K9720@syntax-violation? K9722@syntax-violation-form K9724@syntax-violation-subform K9726@&syntax-rtd K9728@&syntax-rcd K9734@K9729 K9736@K9731 K9738@K9730 K9741@p? K9743@make-undefined-violation K9745@undefined-violation? K9747@&undefined-rtd K9749@&undefined-rcd K9755@K9750 K9757@K9752 K9759@K9751 K9762@p? K9764@make-i/o-error K9766@i/o-error? K9768@&i/o-rtd K9770@&i/o-rcd K9776@K9771 K9778@K9773 K9780@K9772 K9783@p? K9785@make-i/o-read-error K9787@i/o-read-error? K9789@&i/o-read-rtd K9791@&i/o-read-rcd K9797@K9792 K9799@K9794 K9801@K9793 K9804@p? K9806@make-i/o-write-error K9808@i/o-write-error? K9810@&i/o-write-rtd K9812@&i/o-write-rcd K9819@K9814 K9821@K9816 K9823@K9815 K9826@p? K9828@make-i/o-invalid-position-error K9830@K9813@i/o-error-position K9832@i/o-invalid-position-error? K9834@i/o-error-position K9836@&i/o-invalid-position-rtd K9838@&i/o-invalid-position-rcd K9845@K9840 K9847@K9842 K9849@K9841 K9852@p? K9854@make-i/o-filename-error K9856@K9839@i/o-error-filename K9858@i/o-filename-error? K9860@i/o-error-filename K9862@&i/o-filename-rtd K9864@&i/o-filename-rcd K9870@K9865 K9872@K9867 K9874@K9866 K9877@p? K9879@make-i/o-file-protection-error K9881@i/o-file-protection-error? K9883@&i/o-file-protection-rtd K9885@&i/o-file-protection-rcd K9891@K9886 K9893@K9888 K9895@K9887 K9898@p? K9900@make-i/o-file-is-read-only-error K9902@i/o-file-is-read-only-error? K9904@&i/o-file-is-read-only-rtd K9906@&i/o-file-is-read-only-rcd K9912@K9907 K9914@K9909 K9916@K9908 K9919@p? K9921@make-i/o-file-already-exists-error K9923@i/o-file-already-exists-error? K9925@&i/o-file-already-exists-rtd K9927@&i/o-file-already-exists-rcd K9933@K9928 K9935@K9930 K9937@K9929 K9940@p? K9942@make-i/o-file-does-not-exist-error K9944@i/o-file-does-not-exist-error? K9946@&i/o-file-does-not-exist-rtd K9948@&i/o-file-does-not-exist-rcd K9955@K9950 K9957@K9952 K9959@K9951 K9962@p? K9964@make-i/o-port-error K9966@K9949@i/o-error-port K9968@i/o-port-error? K9970@i/o-error-port K9972@&i/o-port-rtd K9974@&i/o-port-rcd K9980@K9975 K9982@K9977 K9984@K9976 K9987@p? K9989@make-i/o-decoding-error K9991@i/o-decoding-error? K9993@&i/o-decoding-rtd K9995@&i/o-decoding-rcd K10002@K9997 K10004@K9999 K10006@K9998 K10009@p? K10011@make-i/o-encoding-error K10013@K9996@i/o-encoding-error-char K10015@i/o-encoding-error? K10017@i/o-encoding-error-char K10019@&i/o-encoding-rtd K10021@&i/o-encoding-rcd K10027@K10022 K10029@K10024 K10031@K10023 K10034@p? K10036@make-no-infinities-violation K10038@no-infinities-violation? K10040@&no-infinities-rtd K10042@&no-infinities-rcd K10048@K10043 K10050@K10045 K10052@K10044 K10055@p? K10057@make-no-nans-violation K10059@no-nans-violation? K10061@&no-nans-rtd K10063@&no-nans-rcd) (begin (set! K9373@K9368 (make-record-type-descriptor '&condition '#f 'K9371 '#f '#f '#())) (set! K9375@K9370 '#f) (set! K9377@K9369 (make-record-constructor-descriptor K9373@K9368 '#f K9375@K9370)) (set! K9380@&condition? (record-predicate K9373@K9368)) (set! K9382@make-&condition (record-constructor K9377@K9369)) (set! K9384@&condition-rtd K9373@K9368) (set! K9386@&condition-rcd K9377@K9369) (set! K9458@K9453 (make-record-type-descriptor '&message K9373@K9368 'K9456 '#f '#f '#((immutable message)))) (set! K9460@K9455 '#f) (set! K9462@K9454 (make-record-constructor-descriptor K9458@K9453 K9377@K9369 K9460@K9455)) (set! K9465@p? (record-predicate K9458@K9453)) (set! K9467@make-message-condition (record-constructor K9462@K9454)) (set! K9469@K9452@condition-message (record-accessor K9458@K9453 '0)) (set! K9471@message-condition? (condition-predicate K9458@K9453)) (set! K9473@condition-message (condition-accessor K9458@K9453 K9469@K9452@condition-message)) (set! K9475@&message-rtd K9458@K9453) (set! K9477@&message-rcd K9462@K9454) (set! K9483@K9478 (make-record-type-descriptor '&warning K9373@K9368 'K9481 '#f '#f '#())) (set! K9485@K9480 '#f) (set! K9487@K9479 (make-record-constructor-descriptor K9483@K9478 K9377@K9369 K9485@K9480)) (set! K9490@p? (record-predicate K9483@K9478)) (set! K9492@make-warning (record-constructor K9487@K9479)) (set! K9494@warning? (condition-predicate K9483@K9478)) (set! K9496@&warning-rtd K9483@K9478) (set! K9498@&warning-rcd K9487@K9479) (set! K9504@K9499 (make-record-type-descriptor '&serious K9373@K9368 'K9502 '#f '#f '#())) (set! K9506@K9501 '#f) (set! K9508@K9500 (make-record-constructor-descriptor K9504@K9499 K9377@K9369 K9506@K9501)) (set! K9511@p? (record-predicate K9504@K9499)) (set! K9513@make-serious-condition (record-constructor K9508@K9500)) (set! K9515@serious-condition? (condition-predicate K9504@K9499)) (set! K9517@&serious-rtd K9504@K9499) (set! K9519@&serious-rcd K9508@K9500) (set! K9525@K9520 (make-record-type-descriptor '&error K9504@K9499 'K9523 '#f '#f '#())) (set! K9527@K9522 '#f) (set! K9529@K9521 (make-record-constructor-descriptor K9525@K9520 K9508@K9500 K9527@K9522)) (set! K9532@p? (record-predicate K9525@K9520)) (set! K9534@make-error (record-constructor K9529@K9521)) (set! K9536@error? (condition-predicate K9525@K9520)) (set! K9538@&error-rtd K9525@K9520) (set! K9540@&error-rcd K9529@K9521) (set! K9546@K9541 (make-record-type-descriptor '&violation K9504@K9499 'K9544 '#f '#f '#())) (set! K9548@K9543 '#f) (set! K9550@K9542 (make-record-constructor-descriptor K9546@K9541 K9508@K9500 K9548@K9543)) (set! K9553@p? (record-predicate K9546@K9541)) (set! K9555@make-violation (record-constructor K9550@K9542)) (set! K9557@violation? (condition-predicate K9546@K9541)) (set! K9559@&violation-rtd K9546@K9541) (set! K9561@&violation-rcd K9550@K9542) (set! K9567@K9562 (make-record-type-descriptor '&assertion K9546@K9541 'K9565 '#f '#f '#())) (set! K9569@K9564 '#f) (set! K9571@K9563 (make-record-constructor-descriptor K9567@K9562 K9550@K9542 K9569@K9564)) (set! K9574@p? (record-predicate K9567@K9562)) (set! K9576@make-assertion-violation (record-constructor K9571@K9563)) (set! K9578@assertion-violation? (condition-predicate K9567@K9562)) (set! K9580@&assertion-rtd K9567@K9562) (set! K9582@&assertion-rcd K9571@K9563) (set! K9589@K9584 (make-record-type-descriptor '&irritants K9373@K9368 'K9587 '#f '#f '#((immutable irritants)))) (set! K9591@K9586 '#f) (set! K9593@K9585 (make-record-constructor-descriptor K9589@K9584 K9377@K9369 K9591@K9586)) (set! K9596@p? (record-predicate K9589@K9584)) (set! K9598@make-irritants-condition (record-constructor K9593@K9585)) (set! K9600@K9583@condition-irritants (record-accessor K9589@K9584 '0)) (set! K9602@irritants-condition? (condition-predicate K9589@K9584)) (set! K9604@condition-irritants (condition-accessor K9589@K9584 K9600@K9583@condition-irritants)) (set! K9606@&irritants-rtd K9589@K9584) (set! K9608@&irritants-rcd K9593@K9585) (set! K9615@K9610 (make-record-type-descriptor '&who K9373@K9368 'K9613 '#f '#f '#((immutable who)))) (set! K9617@K9612 '#f) (set! K9619@K9611 (make-record-constructor-descriptor K9615@K9610 K9377@K9369 K9617@K9612)) (set! K9622@p? (record-predicate K9615@K9610)) (set! K9624@make-who-condition (record-constructor K9619@K9611)) (set! K9626@K9609@condition-who (record-accessor K9615@K9610 '0)) (set! K9628@who-condition? (condition-predicate K9615@K9610)) (set! K9630@condition-who (condition-accessor K9615@K9610 K9626@K9609@condition-who)) (set! K9632@&who-rtd K9615@K9610) (set! K9634@&who-rcd K9619@K9611) (set! K9640@K9635 (make-record-type-descriptor '&non-continuable K9546@K9541 'K9638 '#f '#f '#())) (set! K9642@K9637 '#f) (set! K9644@K9636 (make-record-constructor-descriptor K9640@K9635 K9550@K9542 K9642@K9637)) (set! K9647@p? (record-predicate K9640@K9635)) (set! K9649@make-non-continuable-violation (record-constructor K9644@K9636)) (set! K9651@non-continuable-violation? (condition-predicate K9640@K9635)) (set! K9653@&non-continuable-rtd K9640@K9635) (set! K9655@&non-continuable-rcd K9644@K9636) (set! K9661@K9656 (make-record-type-descriptor '&implementation-restriction K9546@K9541 'K9659 '#f '#f '#())) (set! K9663@K9658 '#f) (set! K9665@K9657 (make-record-constructor-descriptor K9661@K9656 K9550@K9542 K9663@K9658)) (set! K9668@p? (record-predicate K9661@K9656)) (set! K9670@make-implementation-restriction-violation (record-constructor K9665@K9657)) (set! K9672@implementation-restriction-violation? (condition-predicate K9661@K9656)) (set! K9674@&implementation-restriction-rtd K9661@K9656) (set! K9676@&implementation-restriction-rcd K9665@K9657) (set! K9682@K9677 (make-record-type-descriptor '&lexical K9546@K9541 'K9680 '#f '#f '#())) (set! K9684@K9679 '#f) (set! K9686@K9678 (make-record-constructor-descriptor K9682@K9677 K9550@K9542 K9684@K9679)) (set! K9689@p? (record-predicate K9682@K9677)) (set! K9691@make-lexical-violation (record-constructor K9686@K9678)) (set! K9693@lexical-violation? (condition-predicate K9682@K9677)) (set! K9695@&lexical-rtd K9682@K9677) (set! K9697@&lexical-rcd K9686@K9678) (set! K9705@K9700 (make-record-type-descriptor '&syntax K9546@K9541 'K9703 '#f '#f '#((immutable form) (immutable subform)))) (set! K9707@K9702 '#f) (set! K9709@K9701 (make-record-constructor-descriptor K9705@K9700 K9550@K9542 K9707@K9702)) (set! K9712@p? (record-predicate K9705@K9700)) (set! K9714@make-syntax-violation (record-constructor K9709@K9701)) (set! K9716@K9698@syntax-violation-form (record-accessor K9705@K9700 '0)) (set! K9718@K9699@syntax-violation-subform (record-accessor K9705@K9700 '1)) (set! K9720@syntax-violation? (condition-predicate K9705@K9700)) (set! K9722@syntax-violation-form (condition-accessor K9705@K9700 K9716@K9698@syntax-violation-form)) (set! K9724@syntax-violation-subform (condition-accessor K9705@K9700 K9718@K9699@syntax-violation-subform)) (set! K9726@&syntax-rtd K9705@K9700) (set! K9728@&syntax-rcd K9709@K9701) (set! K9734@K9729 (make-record-type-descriptor '&undefined K9546@K9541 'K9732 '#f '#f '#())) (set! K9736@K9731 '#f) (set! K9738@K9730 (make-record-constructor-descriptor K9734@K9729 K9550@K9542 K9736@K9731)) (set! K9741@p? (record-predicate K9734@K9729)) (set! K9743@make-undefined-violation (record-constructor K9738@K9730)) (set! K9745@undefined-violation? (condition-predicate K9734@K9729)) (set! K9747@&undefined-rtd K9734@K9729) (set! K9749@&undefined-rcd K9738@K9730) (set! K9755@K9750 (make-record-type-descriptor '&i/o K9525@K9520 'K9753 '#f '#f '#())) (set! K9757@K9752 '#f) (set! K9759@K9751 (make-record-constructor-descriptor K9755@K9750 K9529@K9521 K9757@K9752)) (set! K9762@p? (record-predicate K9755@K9750)) (set! K9764@make-i/o-error (record-constructor K9759@K9751)) (set! K9766@i/o-error? (condition-predicate K9755@K9750)) (set! K9768@&i/o-rtd K9755@K9750) (set! K9770@&i/o-rcd K9759@K9751) (set! K9776@K9771 (make-record-type-descriptor '&i/o-read K9755@K9750 'K9774 '#f '#f '#())) (set! K9778@K9773 '#f) (set! K9780@K9772 (make-record-constructor-descriptor K9776@K9771 K9759@K9751 K9778@K9773)) (set! K9783@p? (record-predicate K9776@K9771)) (set! K9785@make-i/o-read-error (record-constructor K9780@K9772)) (set! K9787@i/o-read-error? (condition-predicate K9776@K9771)) (set! K9789@&i/o-read-rtd K9776@K9771) (set! K9791@&i/o-read-rcd K9780@K9772) (set! K9797@K9792 (make-record-type-descriptor '&i/o-write K9755@K9750 'K9795 '#f '#f '#())) (set! K9799@K9794 '#f) (set! K9801@K9793 (make-record-constructor-descriptor K9797@K9792 K9759@K9751 K9799@K9794)) (set! K9804@p? (record-predicate K9797@K9792)) (set! K9806@make-i/o-write-error (record-constructor K9801@K9793)) (set! K9808@i/o-write-error? (condition-predicate K9797@K9792)) (set! K9810@&i/o-write-rtd K9797@K9792) (set! K9812@&i/o-write-rcd K9801@K9793) (set! K9819@K9814 (make-record-type-descriptor '&i/o-invalid-position K9755@K9750 'K9817 '#f '#f '#((immutable position)))) (set! K9821@K9816 '#f) (set! K9823@K9815 (make-record-constructor-descriptor K9819@K9814 K9759@K9751 K9821@K9816)) (set! K9826@p? (record-predicate K9819@K9814)) (set! K9828@make-i/o-invalid-position-error (record-constructor K9823@K9815)) (set! K9830@K9813@i/o-error-position (record-accessor K9819@K9814 '0)) (set! K9832@i/o-invalid-position-error? (condition-predicate K9819@K9814)) (set! K9834@i/o-error-position (condition-accessor K9819@K9814 K9830@K9813@i/o-error-position)) (set! K9836@&i/o-invalid-position-rtd K9819@K9814) (set! K9838@&i/o-invalid-position-rcd K9823@K9815) (set! K9845@K9840 (make-record-type-descriptor '&i/o-filename K9755@K9750 'K9843 '#f '#f '#((immutable filename)))) (set! K9847@K9842 '#f) (set! K9849@K9841 (make-record-constructor-descriptor K9845@K9840 K9759@K9751 K9847@K9842)) (set! K9852@p? (record-predicate K9845@K9840)) (set! K9854@make-i/o-filename-error (record-constructor K9849@K9841)) (set! K9856@K9839@i/o-error-filename (record-accessor K9845@K9840 '0)) (set! K9858@i/o-filename-error? (condition-predicate K9845@K9840)) (set! K9860@i/o-error-filename (condition-accessor K9845@K9840 K9856@K9839@i/o-error-filename)) (set! K9862@&i/o-filename-rtd K9845@K9840) (set! K9864@&i/o-filename-rcd K9849@K9841) (set! K9870@K9865 (make-record-type-descriptor '&i/o-file-protection K9845@K9840 'K9868 '#f '#f '#())) (set! K9872@K9867 '#f) (set! K9874@K9866 (make-record-constructor-descriptor K9870@K9865 K9849@K9841 K9872@K9867)) (set! K9877@p? (record-predicate K9870@K9865)) (set! K9879@make-i/o-file-protection-error (record-constructor K9874@K9866)) (set! K9881@i/o-file-protection-error? (condition-predicate K9870@K9865)) (set! K9883@&i/o-file-protection-rtd K9870@K9865) (set! K9885@&i/o-file-protection-rcd K9874@K9866) (set! K9891@K9886 (make-record-type-descriptor '&i/o-file-is-read-only K9870@K9865 'K9889 '#f '#f '#())) (set! K9893@K9888 '#f) (set! K9895@K9887 (make-record-constructor-descriptor K9891@K9886 K9874@K9866 K9893@K9888)) (set! K9898@p? (record-predicate K9891@K9886)) (set! K9900@make-i/o-file-is-read-only-error (record-constructor K9895@K9887)) (set! K9902@i/o-file-is-read-only-error? (condition-predicate K9891@K9886)) (set! K9904@&i/o-file-is-read-only-rtd K9891@K9886) (set! K9906@&i/o-file-is-read-only-rcd K9895@K9887) (set! K9912@K9907 (make-record-type-descriptor '&i/o-file-already-exists K9845@K9840 'K9910 '#f '#f '#())) (set! K9914@K9909 '#f) (set! K9916@K9908 (make-record-constructor-descriptor K9912@K9907 K9849@K9841 K9914@K9909)) (set! K9919@p? (record-predicate K9912@K9907)) (set! K9921@make-i/o-file-already-exists-error (record-constructor K9916@K9908)) (set! K9923@i/o-file-already-exists-error? (condition-predicate K9912@K9907)) (set! K9925@&i/o-file-already-exists-rtd K9912@K9907) (set! K9927@&i/o-file-already-exists-rcd K9916@K9908) (set! K9933@K9928 (make-record-type-descriptor '&i/o-file-does-not-exist K9845@K9840 'K9931 '#f '#f '#())) (set! K9935@K9930 '#f) (set! K9937@K9929 (make-record-constructor-descriptor K9933@K9928 K9849@K9841 K9935@K9930)) (set! K9940@p? (record-predicate K9933@K9928)) (set! K9942@make-i/o-file-does-not-exist-error (record-constructor K9937@K9929)) (set! K9944@i/o-file-does-not-exist-error? (condition-predicate K9933@K9928)) (set! K9946@&i/o-file-does-not-exist-rtd K9933@K9928) (set! K9948@&i/o-file-does-not-exist-rcd K9937@K9929) (set! K9955@K9950 (make-record-type-descriptor '&i/o-port K9755@K9750 'K9953 '#f '#f '#((immutable port)))) (set! K9957@K9952 '#f) (set! K9959@K9951 (make-record-constructor-descriptor K9955@K9950 K9759@K9751 K9957@K9952)) (set! K9962@p? (record-predicate K9955@K9950)) (set! K9964@make-i/o-port-error (record-constructor K9959@K9951)) (set! K9966@K9949@i/o-error-port (record-accessor K9955@K9950 '0)) (set! K9968@i/o-port-error? (condition-predicate K9955@K9950)) (set! K9970@i/o-error-port (condition-accessor K9955@K9950 K9966@K9949@i/o-error-port)) (set! K9972@&i/o-port-rtd K9955@K9950) (set! K9974@&i/o-port-rcd K9959@K9951) (set! K9980@K9975 (make-record-type-descriptor '&i/o-decoding K9955@K9950 'K9978 '#f '#f '#())) (set! K9982@K9977 '#f) (set! K9984@K9976 (make-record-constructor-descriptor K9980@K9975 K9959@K9951 K9982@K9977)) (set! K9987@p? (record-predicate K9980@K9975)) (set! K9989@make-i/o-decoding-error (record-constructor K9984@K9976)) (set! K9991@i/o-decoding-error? (condition-predicate K9980@K9975)) (set! K9993@&i/o-decoding-rtd K9980@K9975) (set! K9995@&i/o-decoding-rcd K9984@K9976) (set! K10002@K9997 (make-record-type-descriptor '&i/o-encoding K9955@K9950 'K10000 '#f '#f '#((immutable char)))) (set! K10004@K9999 '#f) (set! K10006@K9998 (make-record-constructor-descriptor K10002@K9997 K9959@K9951 K10004@K9999)) (set! K10009@p? (record-predicate K10002@K9997)) (set! K10011@make-i/o-encoding-error (record-constructor K10006@K9998)) (set! K10013@K9996@i/o-encoding-error-char (record-accessor K10002@K9997 '0)) (set! K10015@i/o-encoding-error? (condition-predicate K10002@K9997)) (set! K10017@i/o-encoding-error-char (condition-accessor K10002@K9997 K10013@K9996@i/o-encoding-error-char)) (set! K10019@&i/o-encoding-rtd K10002@K9997) (set! K10021@&i/o-encoding-rcd K10006@K9998) (set! K10027@K10022 (make-record-type-descriptor '&no-infinities K9661@K9656 'K10025 '#f '#f '#())) (set! K10029@K10024 '#f) (set! K10031@K10023 (make-record-constructor-descriptor K10027@K10022 K9665@K9657 K10029@K10024)) (set! K10034@p? (record-predicate K10027@K10022)) (set! K10036@make-no-infinities-violation (record-constructor K10031@K10023)) (set! K10038@no-infinities-violation? (condition-predicate K10027@K10022)) (set! K10040@&no-infinities-rtd K10027@K10022) (set! K10042@&no-infinities-rcd K10031@K10023) (set! K10048@K10043 (make-record-type-descriptor '&no-nans K9661@K9656 'K10046 '#f '#f '#())) (set! K10050@K10045 '#f) (set! K10052@K10044 (make-record-constructor-descriptor K10048@K10043 K9665@K9657 K10050@K10045)) (set! K10055@p? (record-predicate K10048@K10043)) (set! K10057@make-no-nans-violation (record-constructor K10052@K10044)) (set! K10059@no-nans-violation? (condition-predicate K10048@K10043)) (set! K10061@&no-nans-rtd K10048@K10043) (set! K10063@&no-nans-rcd K10052@K10044) (begin (set! K10304@K10063@&no-nans-rcd K10063@&no-nans-rcd) (set! K10303@K10061@&no-nans-rtd K10061@&no-nans-rtd) (set! K10302@K10059@no-nans-violation? K10059@no-nans-violation?) (set! K10301@K10057@make-no-nans-violation K10057@make-no-nans-violation) (set! K10300@K10055@p? K10055@p?) (set! K10299@K10052@K10044 K10052@K10044) (set! K10298@K10050@K10045 K10050@K10045) (set! K10297@K10048@K10043 K10048@K10043) (set! K10296@K10042@&no-infinities-rcd K10042@&no-infinities-rcd) (set! K10295@K10040@&no-infinities-rtd K10040@&no-infinities-rtd) (set! K10294@K10038@no-infinities-violation? K10038@no-infinities-violation?) (set! K10293@K10036@make-no-infinities-violation K10036@make-no-infinities-violation) (set! K10292@K10034@p? K10034@p?) (set! K10291@K10031@K10023 K10031@K10023) (set! K10290@K10029@K10024 K10029@K10024) (set! K10289@K10027@K10022 K10027@K10022) (set! K10288@K10021@&i/o-encoding-rcd K10021@&i/o-encoding-rcd) (set! K10287@K10019@&i/o-encoding-rtd K10019@&i/o-encoding-rtd) (set! K10286@K10017@i/o-encoding-error-char K10017@i/o-encoding-error-char) (set! K10285@K10015@i/o-encoding-error? K10015@i/o-encoding-error?) (set! K10284@K10013@K9996@i/o-encoding-error-char K10013@K9996@i/o-encoding-error-char) (set! K10283@K10011@make-i/o-encoding-error K10011@make-i/o-encoding-error) (set! K10282@K10009@p? K10009@p?) (set! K10281@K10006@K9998 K10006@K9998) (set! K10280@K10004@K9999 K10004@K9999) (set! K10279@K10002@K9997 K10002@K9997) (set! K10278@K9995@&i/o-decoding-rcd K9995@&i/o-decoding-rcd) (set! K10277@K9993@&i/o-decoding-rtd K9993@&i/o-decoding-rtd) (set! K10276@K9991@i/o-decoding-error? K9991@i/o-decoding-error?) (set! K10275@K9989@make-i/o-decoding-error K9989@make-i/o-decoding-error) (set! K10274@K9987@p? K9987@p?) (set! K10273@K9984@K9976 K9984@K9976) (set! K10272@K9982@K9977 K9982@K9977) (set! K10271@K9980@K9975 K9980@K9975) (set! K10270@K9974@&i/o-port-rcd K9974@&i/o-port-rcd) (set! K10269@K9972@&i/o-port-rtd K9972@&i/o-port-rtd) (set! K10268@K9970@i/o-error-port K9970@i/o-error-port) (set! K10267@K9968@i/o-port-error? K9968@i/o-port-error?) (set! K10266@K9966@K9949@i/o-error-port K9966@K9949@i/o-error-port) (set! K10265@K9964@make-i/o-port-error K9964@make-i/o-port-error) (set! K10264@K9962@p? K9962@p?) (set! K10263@K9959@K9951 K9959@K9951) (set! K10262@K9957@K9952 K9957@K9952) (set! K10261@K9955@K9950 K9955@K9950) (set! K10260@K9948@&i/o-file-does-not-exist-rcd K9948@&i/o-file-does-not-exist-rcd) (set! K10259@K9946@&i/o-file-does-not-exist-rtd K9946@&i/o-file-does-not-exist-rtd) (set! K10258@K9944@i/o-file-does-not-exist-error? K9944@i/o-file-does-not-exist-error?) (set! K10257@K9942@make-i/o-file-does-not-exist-error K9942@make-i/o-file-does-not-exist-error) (set! K10256@K9940@p? K9940@p?) (set! K10255@K9937@K9929 K9937@K9929) (set! K10254@K9935@K9930 K9935@K9930) (set! K10253@K9933@K9928 K9933@K9928) (set! K10252@K9927@&i/o-file-already-exists-rcd K9927@&i/o-file-already-exists-rcd) (set! K10251@K9925@&i/o-file-already-exists-rtd K9925@&i/o-file-already-exists-rtd) (set! K10250@K9923@i/o-file-already-exists-error? K9923@i/o-file-already-exists-error?) (set! K10249@K9921@make-i/o-file-already-exists-error K9921@make-i/o-file-already-exists-error) (set! K10248@K9919@p? K9919@p?) (set! K10247@K9916@K9908 K9916@K9908) (set! K10246@K9914@K9909 K9914@K9909) (set! K10245@K9912@K9907 K9912@K9907) (set! K10244@K9906@&i/o-file-is-read-only-rcd K9906@&i/o-file-is-read-only-rcd) (set! K10243@K9904@&i/o-file-is-read-only-rtd K9904@&i/o-file-is-read-only-rtd) (set! K10242@K9902@i/o-file-is-read-only-error? K9902@i/o-file-is-read-only-error?) (set! K10241@K9900@make-i/o-file-is-read-only-error K9900@make-i/o-file-is-read-only-error) (set! K10240@K9898@p? K9898@p?) (set! K10239@K9895@K9887 K9895@K9887) (set! K10238@K9893@K9888 K9893@K9888) (set! K10237@K9891@K9886 K9891@K9886) (set! K10236@K9885@&i/o-file-protection-rcd K9885@&i/o-file-protection-rcd) (set! K10235@K9883@&i/o-file-protection-rtd K9883@&i/o-file-protection-rtd) (set! K10234@K9881@i/o-file-protection-error? K9881@i/o-file-protection-error?) (set! K10233@K9879@make-i/o-file-protection-error K9879@make-i/o-file-protection-error) (set! K10232@K9877@p? K9877@p?) (set! K10231@K9874@K9866 K9874@K9866) (set! K10230@K9872@K9867 K9872@K9867) (set! K10229@K9870@K9865 K9870@K9865) (set! K10228@K9864@&i/o-filename-rcd K9864@&i/o-filename-rcd) (set! K10227@K9862@&i/o-filename-rtd K9862@&i/o-filename-rtd) (set! K10226@K9860@i/o-error-filename K9860@i/o-error-filename) (set! K10225@K9858@i/o-filename-error? K9858@i/o-filename-error?) (set! K10224@K9856@K9839@i/o-error-filename K9856@K9839@i/o-error-filename) (set! K10223@K9854@make-i/o-filename-error K9854@make-i/o-filename-error) (set! K10222@K9852@p? K9852@p?) (set! K10221@K9849@K9841 K9849@K9841) (set! K10220@K9847@K9842 K9847@K9842) (set! K10219@K9845@K9840 K9845@K9840) (set! K10218@K9838@&i/o-invalid-position-rcd K9838@&i/o-invalid-position-rcd) (set! K10217@K9836@&i/o-invalid-position-rtd K9836@&i/o-invalid-position-rtd) (set! K10216@K9834@i/o-error-position K9834@i/o-error-position) (set! K10215@K9832@i/o-invalid-position-error? K9832@i/o-invalid-position-error?) (set! K10214@K9830@K9813@i/o-error-position K9830@K9813@i/o-error-position) (set! K10213@K9828@make-i/o-invalid-position-error K9828@make-i/o-invalid-position-error) (set! K10212@K9826@p? K9826@p?) (set! K10211@K9823@K9815 K9823@K9815) (set! K10210@K9821@K9816 K9821@K9816) (set! K10209@K9819@K9814 K9819@K9814) (set! K10208@K9812@&i/o-write-rcd K9812@&i/o-write-rcd) (set! K10207@K9810@&i/o-write-rtd K9810@&i/o-write-rtd) (set! K10206@K9808@i/o-write-error? K9808@i/o-write-error?) (set! K10205@K9806@make-i/o-write-error K9806@make-i/o-write-error) (set! K10204@K9804@p? K9804@p?) (set! K10203@K9801@K9793 K9801@K9793) (set! K10202@K9799@K9794 K9799@K9794) (set! K10201@K9797@K9792 K9797@K9792) (set! K10200@K9791@&i/o-read-rcd K9791@&i/o-read-rcd) (set! K10199@K9789@&i/o-read-rtd K9789@&i/o-read-rtd) (set! K10198@K9787@i/o-read-error? K9787@i/o-read-error?) (set! K10197@K9785@make-i/o-read-error K9785@make-i/o-read-error) (set! K10196@K9783@p? K9783@p?) (set! K10195@K9780@K9772 K9780@K9772) (set! K10194@K9778@K9773 K9778@K9773) (set! K10193@K9776@K9771 K9776@K9771) (set! K10192@K9770@&i/o-rcd K9770@&i/o-rcd) (set! K10191@K9768@&i/o-rtd K9768@&i/o-rtd) (set! K10190@K9766@i/o-error? K9766@i/o-error?) (set! K10189@K9764@make-i/o-error K9764@make-i/o-error) (set! K10188@K9762@p? K9762@p?) (set! K10187@K9759@K9751 K9759@K9751) (set! K10186@K9757@K9752 K9757@K9752) (set! K10185@K9755@K9750 K9755@K9750) (set! K10184@K9749@&undefined-rcd K9749@&undefined-rcd) (set! K10183@K9747@&undefined-rtd K9747@&undefined-rtd) (set! K10182@K9745@undefined-violation? K9745@undefined-violation?) (set! K10181@K9743@make-undefined-violation K9743@make-undefined-violation) (set! K10180@K9741@p? K9741@p?) (set! K10179@K9738@K9730 K9738@K9730) (set! K10178@K9736@K9731 K9736@K9731) (set! K10177@K9734@K9729 K9734@K9729) (set! K10176@K9728@&syntax-rcd K9728@&syntax-rcd) (set! K10175@K9726@&syntax-rtd K9726@&syntax-rtd) (set! K10174@K9724@syntax-violation-subform K9724@syntax-violation-subform) (set! K10173@K9722@syntax-violation-form K9722@syntax-violation-form) (set! K10172@K9720@syntax-violation? K9720@syntax-violation?) (set! K10171@K9718@K9699@syntax-violation-subform K9718@K9699@syntax-violation-subform) (set! K10170@K9716@K9698@syntax-violation-form K9716@K9698@syntax-violation-form) (set! K10169@K9714@make-syntax-violation K9714@make-syntax-violation) (set! K10168@K9712@p? K9712@p?) (set! K10167@K9709@K9701 K9709@K9701) (set! K10166@K9707@K9702 K9707@K9702) (set! K10165@K9705@K9700 K9705@K9700) (set! K10164@K9697@&lexical-rcd K9697@&lexical-rcd) (set! K10163@K9695@&lexical-rtd K9695@&lexical-rtd) (set! K10162@K9693@lexical-violation? K9693@lexical-violation?) (set! K10161@K9691@make-lexical-violation K9691@make-lexical-violation) (set! K10160@K9689@p? K9689@p?) (set! K10159@K9686@K9678 K9686@K9678) (set! K10158@K9684@K9679 K9684@K9679) (set! K10157@K9682@K9677 K9682@K9677) (set! K10156@K9676@&implementation-restriction-rcd K9676@&implementation-restriction-rcd) (set! K10155@K9674@&implementation-restriction-rtd K9674@&implementation-restriction-rtd) (set! K10154@K9672@implementation-restriction-violation? K9672@implementation-restriction-violation?) (set! K10153@K9670@make-implementation-restriction-violation K9670@make-implementation-restriction-violation) (set! K10152@K9668@p? K9668@p?) (set! K10151@K9665@K9657 K9665@K9657) (set! K10150@K9663@K9658 K9663@K9658) (set! K10149@K9661@K9656 K9661@K9656) (set! K10148@K9655@&non-continuable-rcd K9655@&non-continuable-rcd) (set! K10147@K9653@&non-continuable-rtd K9653@&non-continuable-rtd) (set! K10146@K9651@non-continuable-violation? K9651@non-continuable-violation?) (set! K10145@K9649@make-non-continuable-violation K9649@make-non-continuable-violation) (set! K10144@K9647@p? K9647@p?) (set! K10143@K9644@K9636 K9644@K9636) (set! K10142@K9642@K9637 K9642@K9637) (set! K10141@K9640@K9635 K9640@K9635) (set! K10140@K9634@&who-rcd K9634@&who-rcd) (set! K10139@K9632@&who-rtd K9632@&who-rtd) (set! K10138@K9630@condition-who K9630@condition-who) (set! K10137@K9628@who-condition? K9628@who-condition?) (set! K10136@K9626@K9609@condition-who K9626@K9609@condition-who) (set! K10135@K9624@make-who-condition K9624@make-who-condition) (set! K10134@K9622@p? K9622@p?) (set! K10133@K9619@K9611 K9619@K9611) (set! K10132@K9617@K9612 K9617@K9612) (set! K10131@K9615@K9610 K9615@K9610) (set! K10130@K9608@&irritants-rcd K9608@&irritants-rcd) (set! K10129@K9606@&irritants-rtd K9606@&irritants-rtd) (set! K10128@K9604@condition-irritants K9604@condition-irritants) (set! K10127@K9602@irritants-condition? K9602@irritants-condition?) (set! K10126@K9600@K9583@condition-irritants K9600@K9583@condition-irritants) (set! K10125@K9598@make-irritants-condition K9598@make-irritants-condition) (set! K10124@K9596@p? K9596@p?) (set! K10123@K9593@K9585 K9593@K9585) (set! K10122@K9591@K9586 K9591@K9586) (set! K10121@K9589@K9584 K9589@K9584) (set! K10120@K9582@&assertion-rcd K9582@&assertion-rcd) (set! K10119@K9580@&assertion-rtd K9580@&assertion-rtd) (set! K10118@K9578@assertion-violation? K9578@assertion-violation?) (set! K10117@K9576@make-assertion-violation K9576@make-assertion-violation) (set! K10116@K9574@p? K9574@p?) (set! K10115@K9571@K9563 K9571@K9563) (set! K10114@K9569@K9564 K9569@K9564) (set! K10113@K9567@K9562 K9567@K9562) (set! K10112@K9561@&violation-rcd K9561@&violation-rcd) (set! K10111@K9559@&violation-rtd K9559@&violation-rtd) (set! K10110@K9557@violation? K9557@violation?) (set! K10109@K9555@make-violation K9555@make-violation) (set! K10108@K9553@p? K9553@p?) (set! K10107@K9550@K9542 K9550@K9542) (set! K10106@K9548@K9543 K9548@K9543) (set! K10105@K9546@K9541 K9546@K9541) (set! K10104@K9540@&error-rcd K9540@&error-rcd) (set! K10103@K9538@&error-rtd K9538@&error-rtd) (set! K10102@K9536@error? K9536@error?) (set! K10101@K9534@make-error K9534@make-error) (set! K10100@K9532@p? K9532@p?) (set! K10099@K9529@K9521 K9529@K9521) (set! K10098@K9527@K9522 K9527@K9522) (set! K10097@K9525@K9520 K9525@K9520) (set! K10096@K9519@&serious-rcd K9519@&serious-rcd) (set! K10095@K9517@&serious-rtd K9517@&serious-rtd) (set! K10094@K9515@serious-condition? K9515@serious-condition?) (set! K10093@K9513@make-serious-condition K9513@make-serious-condition) (set! K10092@K9511@p? K9511@p?) (set! K10091@K9508@K9500 K9508@K9500) (set! K10090@K9506@K9501 K9506@K9501) (set! K10089@K9504@K9499 K9504@K9499) (set! K10088@K9498@&warning-rcd K9498@&warning-rcd) (set! K10087@K9496@&warning-rtd K9496@&warning-rtd) (set! K10086@K9494@warning? K9494@warning?) (set! K10085@K9492@make-warning K9492@make-warning) (set! K10084@K9490@p? K9490@p?) (set! K10083@K9487@K9479 K9487@K9479) (set! K10082@K9485@K9480 K9485@K9480) (set! K10081@K9483@K9478 K9483@K9478) (set! K10080@K9477@&message-rcd K9477@&message-rcd) (set! K10079@K9475@&message-rtd K9475@&message-rtd) (set! K10078@K9473@condition-message K9473@condition-message) (set! K10077@K9471@message-condition? K9471@message-condition?) (set! K10076@K9469@K9452@condition-message K9469@K9452@condition-message) (set! K10075@K9467@make-message-condition K9467@make-message-condition) (set! K10074@K9465@p? K9465@p?) (set! K10073@K9462@K9454 K9462@K9454) (set! K10072@K9460@K9455 K9460@K9455) (set! K10071@K9458@K9453 K9458@K9453) (set! K10070@K9386@&condition-rcd K9386@&condition-rcd) (set! K10069@K9384@&condition-rtd K9384@&condition-rtd) (set! K10068@K9382@make-&condition K9382@make-&condition) (set! K10067@K9380@&condition? K9380@&condition?) (set! K10066@K9377@K9369 K9377@K9369) (set! K10065@K9375@K9370 K9375@K9370) (set! K10064@K9373@K9368 K9373@K9368)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (K1242@K1167@current-primitive-locations (lambda (K11318@x) ((lambda (K11320@t) (if K11320@t (cdr K11320@t) '#f)) (assq K11318@x '((&no-nans-rcd . K10304@K10063@&no-nans-rcd) (&no-nans-rtd . K10303@K10061@&no-nans-rtd) (&no-infinities-rcd . K10296@K10042@&no-infinities-rcd) (&no-infinities-rtd . K10295@K10040@&no-infinities-rtd) (&i/o-encoding-rcd . K10288@K10021@&i/o-encoding-rcd) (&i/o-encoding-rtd . K10287@K10019@&i/o-encoding-rtd) (&i/o-decoding-rcd . K10278@K9995@&i/o-decoding-rcd) (&i/o-decoding-rtd . K10277@K9993@&i/o-decoding-rtd) (&i/o-port-rcd . K10270@K9974@&i/o-port-rcd) (&i/o-port-rtd . K10269@K9972@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . K10260@K9948@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . K10259@K9946@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . K10252@K9927@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . K10251@K9925@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . K10244@K9906@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . K10243@K9904@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . K10236@K9885@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . K10235@K9883@&i/o-file-protection-rtd) (&i/o-filename-rcd . K10228@K9864@&i/o-filename-rcd) (&i/o-filename-rtd . K10227@K9862@&i/o-filename-rtd) (&i/o-invalid-position-rcd . K10218@K9838@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . K10217@K9836@&i/o-invalid-position-rtd) (&i/o-write-rcd . K10208@K9812@&i/o-write-rcd) (&i/o-write-rtd . K10207@K9810@&i/o-write-rtd) (&i/o-read-rcd . K10200@K9791@&i/o-read-rcd) (&i/o-read-rtd . K10199@K9789@&i/o-read-rtd) (&i/o-rcd . K10192@K9770@&i/o-rcd) (&i/o-rtd . K10191@K9768@&i/o-rtd) (&undefined-rcd . K10184@K9749@&undefined-rcd) (&undefined-rtd . K10183@K9747@&undefined-rtd) (&syntax-rcd . K10176@K9728@&syntax-rcd) (&syntax-rtd . K10175@K9726@&syntax-rtd) (&lexical-rcd . K10164@K9697@&lexical-rcd) (&lexical-rtd . K10163@K9695@&lexical-rtd) (&implementation-restriction-rcd . K10156@K9676@&implementation-restriction-rcd) (&implementation-restriction-rtd . K10155@K9674@&implementation-restriction-rtd) (&non-continuable-rcd . K10148@K9655@&non-continuable-rcd) (&non-continuable-rtd . K10147@K9653@&non-continuable-rtd) (&who-rcd . K10140@K9634@&who-rcd) (&who-rtd . K10139@K9632@&who-rtd) (&irritants-rcd . K10130@K9608@&irritants-rcd) (&irritants-rtd . K10129@K9606@&irritants-rtd) (&assertion-rcd . K10120@K9582@&assertion-rcd) (&assertion-rtd . K10119@K9580@&assertion-rtd) (&violation-rcd . K10112@K9561@&violation-rcd) (&violation-rtd . K10111@K9559@&violation-rtd) (&error-rcd . K10104@K9540@&error-rcd) (&error-rtd . K10103@K9538@&error-rtd) (&serious-rcd . K10096@K9519@&serious-rcd) (&serious-rtd . K10095@K9517@&serious-rtd) (&warning-rcd . K10088@K9498@&warning-rcd) (&warning-rtd . K10087@K9496@&warning-rtd) (&message-rcd . K10080@K9477@&message-rcd) (&message-rtd . K10079@K9475@&message-rtd) (&condition-rcd . K10070@K9386@&condition-rcd) (&condition-rtd . K10069@K9384@&condition-rtd) (syntax-error . K9354@K2989@syntax-error) (syntax-dispatch . K9246@K2758@syntax-dispatch) (gensym . K1147@K911@gensym) (load . K10569@K10332@load) (interaction-environment . K9362@K3005@interaction-environment) (library-path . K1771@K1408@library-path) (make-parameter . K1161@K939@make-parameter) (make-variable-transformer . K9180@K2317@make-variable-transformer) (identifier? . K9357@K2995@identifier?) (generate-temporaries . K9347@K2975@generate-temporaries) (free-identifier=? . K9348@K2977@free-identifier=?) (syntax->datum . K9359@K2999@syntax->datum) (datum->syntax . K9358@K2997@datum->syntax) (bound-identifier=? . K9349@K2979@bound-identifier=?) (make-i/o-write-error . K10205@K9806@make-i/o-write-error) (make-i/o-read-error . K10197@K9785@make-i/o-read-error) (make-i/o-port-error . K10265@K9964@make-i/o-port-error) (make-i/o-invalid-position-error . K10213@K9828@make-i/o-invalid-position-error) (make-i/o-filename-error . K10223@K9854@make-i/o-filename-error) (make-i/o-file-protection-error . K10233@K9879@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . K10241@K9900@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . K10257@K9942@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . K10249@K9921@make-i/o-file-already-exists-error) (make-i/o-error . K10189@K9764@make-i/o-error) (make-i/o-encoding-error . K10283@K10011@make-i/o-encoding-error) (make-i/o-decoding-error . K10275@K9989@make-i/o-decoding-error) (i/o-write-error? . K10206@K9808@i/o-write-error?) (i/o-read-error? . K10198@K9787@i/o-read-error?) (i/o-port-error? . K10267@K9968@i/o-port-error?) (i/o-invalid-position-error? . K10215@K9832@i/o-invalid-position-error?) (i/o-filename-error? . K10225@K9858@i/o-filename-error?) (i/o-file-protection-error? . K10234@K9881@i/o-file-protection-error?) (i/o-file-is-read-only-error? . K10242@K9902@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . K10258@K9944@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . K10250@K9923@i/o-file-already-exists-error?) (i/o-error? . K10190@K9766@i/o-error?) (i/o-error-position . K10216@K9834@i/o-error-position) (i/o-error-port . K10268@K9970@i/o-error-port) (i/o-error-filename . K10226@K9860@i/o-error-filename) (i/o-encoding-error? . K10285@K10015@i/o-encoding-error?) (i/o-encoding-error-char . K10286@K10017@i/o-encoding-error-char) (i/o-decoding-error? . K10276@K9991@i/o-decoding-error?) (scheme-report-environment . K9338@K2957@scheme-report-environment) (null-environment . K9337@K2955@null-environment) (command-line . K10566@K10326@command-line) (eval . K9340@K2961@eval) (environment . K9336@K2953@environment) (who-condition? . K10137@K9628@who-condition?) (warning? . K10086@K9494@warning?) (violation? . K10110@K9557@violation?) (undefined-violation? . K10182@K9745@undefined-violation?) (syntax-violation? . K10172@K9720@syntax-violation?) (syntax-violation-subform . K10174@K9724@syntax-violation-subform) (syntax-violation-form . K10173@K9722@syntax-violation-form) (syntax-violation . K9356@K2993@syntax-violation) (serious-condition? . K10094@K9515@serious-condition?) (non-continuable-violation? . K10146@K9651@non-continuable-violation?) (message-condition? . K10077@K9471@message-condition?) (make-who-condition . K10135@K9624@make-who-condition) (make-warning . K10085@K9492@make-warning) (make-violation . K10109@K9555@make-violation) (make-undefined-violation . K10181@K9743@make-undefined-violation) (make-syntax-violation . K10169@K9714@make-syntax-violation) (make-serious-condition . K10093@K9513@make-serious-condition) (make-non-continuable-violation . K10145@K9649@make-non-continuable-violation) (make-message-condition . K10075@K9467@make-message-condition) (make-lexical-violation . K10161@K9691@make-lexical-violation) (make-irritants-condition . K10125@K9598@make-irritants-condition) (make-implementation-restriction-violation . K10153@K9670@make-implementation-restriction-violation) (make-error . K10101@K9534@make-error) (make-assertion-violation . K10117@K9576@make-assertion-violation) (lexical-violation? . K10162@K9693@lexical-violation?) (irritants-condition? . K10127@K9602@irritants-condition?) (implementation-restriction-violation? . K10154@K9672@implementation-restriction-violation?) (error? . K10102@K9536@error?) (condition-who . K10138@K9630@condition-who) (condition-message . K10078@K9473@condition-message) (condition-irritants . K10128@K9604@condition-irritants) (assertion-violation? . K10118@K9578@assertion-violation?) (no-nans-violation? . K10302@K10059@no-nans-violation?) (no-infinities-violation? . K10294@K10038@no-infinities-violation?) (make-no-nans-violation . K10301@K10057@make-no-nans-violation) (make-no-infinities-violation . K10293@K10036@make-no-infinities-violation)))))) (K1787@K1440@install-library 'K11283 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . K11273) (format . K11270) (string-split . K11259) (call-process . K11253) (set-current-directory! . K11249) (expand-path . K11248) (current-directory . K11247) (%spawn . K11246) (%waitpid . K11245) (%ffi-supported? . K11244) (%ffi-pointer-ref . K11243) (%ffi-pointer->string . K11242) (%ffi-call->string-or-zero . K11241) (%ffi-call->double . K11240) (%ffi-call->void* . K11239) (%ffi-call->void . K11238) (%ffi-call->int . K11237) (%ffi-lookup . K11236) (%ffi-open . K11235) (%fork . K11234) (%pipe . K11233) (p . K11232) (string-upcase . K11215) (string-titlecase . K11214) (string-normalize-nfkd . K11213) (string-normalize-nfkc . K11212) (string-normalize-nfd . K11211) (string-normalize-nfc . K11210) (string-foldcase . K11209) (string-downcase . K11208) (string-ci>? . K11207) (string-ci>=? . K11206) (string-ci=? . K11205) (string-ci<? . K11204) (string-ci<=? . K11203) (char-whitespace? . K11202) (char-upper-case? . K11201) (char-title-case? . K11200) (char-numeric? . K11199) (char-lower-case? . K11198) (char-general-category . K11197) (char-upcase . K11196) (char-titlecase . K11195) (char-foldcase . K11194) (char-downcase . K11193) (char-ci>? . K11192) (char-ci>=? . K11191) (char-ci=? . K11190) (char-ci<? . K11189) (char-ci<=? . K11188) (char-alphabetic? . K11187) (make-variable-transformer . K2316) (identifier? . K2994) (generate-temporaries . K2974) (free-identifier=? . K2976) (syntax->datum . K2998) (datum->syntax . K2996) (bound-identifier=? . K2978) (record-type-descriptor? . K11186) (record-predicate . K11185) (record-mutator . K11184) (record-constructor . K11183) (record-accessor . K11182) (make-record-type-descriptor . K11181) (make-record-constructor-descriptor . K11180) (record? . K11179) (record-type-uid . K11178) (record-type-sealed? . K11177) (record-type-parent . K11176) (record-type-opaque? . K11175) (record-type-name . K11174) (record-type-generative? . K11173) (record-type-field-names . K11172) (record-rtd . K11171) (record-field-mutable? . K11170) (delete-file . K11169) (file-exists? . K11168) (vector-sort! . K11167) (vector-sort . K11166) (list-sort . K11165) (symbol-hash . K11164) (string-ci-hash . K11163) (string-hash . K11162) (equal-hash . K11161) (hashtable-equivalence-function . K11160) (make-hashtable . K11159) (hashtable-hash-function . K11158) (make-eqv-hashtable . K11157) (make-eq-hashtable . K11156) (hashtable? . K11155) (hashtable-update! . K11154) (hashtable-size . K11153) (hashtable-set! . K11152) (hashtable-ref . K11151) (hashtable-mutable? . K11150) (hashtable-keys . K11149) (hashtable-entries . K11148) (hashtable-delete! . K11147) (hashtable-copy . K11146) (hashtable-contains? . K11145) (hashtable-clear! . K11144) (call-with-output-file . K11143) (call-with-input-file . K11142) (write-char . K11141) (write . K11140) (with-output-to-file . K11139) (with-input-from-file . K11138) (read-char . K11137) (read . K11136) (peek-char . K11135) (open-output-file . K11134) (open-input-file . K11133) (newline . K11132) (display . K11131) (close-output-port . K11130) (close-input-port . K11129) (eof-object? . K11128) (eof-object . K11127) (current-error-port . K11126) (current-output-port . K11125) (current-input-port . K11124) (output-port? . K11123) (input-port? . K11122) (utf-8-codec . K11121) (utf-16-codec . K11120) (transcoder-error-handling-mode . K11119) (transcoder-eol-style . K11118) (transcoder-codec . K11117) (transcoded-port . K11116) (textual-port? . K11115) (string->bytevector . K11114) (standard-output-port . K11113) (standard-input-port . K11112) (standard-error-port . K11111) (set-port-position! . K11110) (put-u8 . K11109) (put-string . K11108) (put-datum . K11107) (put-char . K11106) (put-bytevector . K11105) (port? . K11104) (port-transcoder . K11103) (port-position . K11102) (port-has-set-port-position!? . K11101) (port-has-port-position? . K11100) (port-eof? . K11099) (output-port-buffer-mode . K11098) (open-string-output-port . K11097) (open-string-input-port . K11096) (open-file-output-port . K11095) (open-file-input/output-port . K11094) (open-file-input-port . K11093) (open-bytevector-output-port . K11092) (open-bytevector-input-port . K11091) (native-transcoder . K11090) (native-eol-style . K11089) (make-transcoder . K11088) (latin-1-codec . K11087) (make-i/o-write-error . K9805) (make-i/o-read-error . K9784) (make-i/o-port-error . K9963) (make-i/o-invalid-position-error . K9827) (make-i/o-filename-error . K9853) (make-i/o-file-protection-error . K9878) (make-i/o-file-is-read-only-error . K9899) (make-i/o-file-does-not-exist-error . K9941) (make-i/o-file-already-exists-error . K9920) (make-i/o-error . K9763) (make-i/o-encoding-error . K10010) (make-i/o-decoding-error . K9988) (make-custom-textual-output-port . K11086) (make-custom-textual-input/output-port . K11085) (make-custom-textual-input-port . K11084) (make-custom-binary-output-port . K11083) (make-custom-binary-input/output-port . K11082) (make-custom-binary-input-port . K11081) (make-bytevector . K11080) (lookahead-u8 . K11079) (lookahead-char . K11078) (i/o-write-error? . K9807) (i/o-read-error? . K9786) (i/o-port-error? . K9967) (i/o-invalid-position-error? . K9831) (i/o-filename-error? . K9857) (i/o-file-protection-error? . K9880) (i/o-file-is-read-only-error? . K9901) (i/o-file-does-not-exist-error? . K9943) (i/o-file-already-exists-error? . K9922) (i/o-error? . K9765) (i/o-error-position . K9833) (i/o-error-port . K9969) (i/o-error-filename . K9859) (i/o-encoding-error? . K10014) (i/o-encoding-error-char . K10016) (i/o-decoding-error? . K9990) (get-u8 . K11077) (get-string-n! . K11076) (get-string-n . K11075) (get-string-all . K11074) (get-line . K11073) (get-datum . K11072) (get-char . K11071) (get-bytevector-some . K11070) (get-bytevector-n! . K11069) (get-bytevector-n . K11068) (get-bytevector-all . K11067) (flush-output-port . K11066) (close-port . K11065) (exit . K11057) (command-line . K10325) (string-fill! . K11056) (string-set! . K11055) (set-cdr! . K11054) (set-car! . K11053) (remove . K11052) (remv . K11051) (remp . K11050) (remq . K11049) (partition . K11048) (memv . K11047) (memq . K11046) (memp . K11045) (member . K11044) (exists . K11043) (for-all . K11042) (fold-right . K11041) (fold-left . K11040) (find . K11039) (filter . K11038) (cons* . K11037) (assv . K11036) (assq . K11035) (assp . K11034) (assoc . K11033) (call-with-string-output-port . K11032) (call-with-port . K11031) (call-with-bytevector-output-port . K11030) (bytevector->string . K11029) (buffer-mode? . K11028) (binary-port? . K11027) (with-exception-handler . K11026) (raise-continuable . K11025) (raise . K11024) (eval . K2960) (environment . K2952) (make-enumeration . K11023) (enum-set=? . K11022) (enum-set-universe . K11021) (enum-set-union . K11020) (enum-set-subset? . K11019) (enum-set-projection . K11018) (enum-set-member? . K11017) (enum-set-intersection . K11016) (enum-set-indexer . K11015) (enum-set-difference . K11014) (enum-set-constructor . K11013) (enum-set-complement . K11012) (enum-set->list . K11011) (who-condition? . K9627) (warning? . K9493) (violation? . K9556) (undefined-violation? . K9744) (syntax-violation? . K9719) (syntax-violation-subform . K9723) (syntax-violation-form . K9721) (syntax-violation . K2992) (simple-conditions . K11010) (serious-condition? . K9514) (non-continuable-violation? . K9650) (message-condition? . K9470) (make-who-condition . K9623) (make-warning . K9491) (make-violation . K9554) (make-undefined-violation . K9742) (make-syntax-violation . K9713) (make-serious-condition . K9512) (make-non-continuable-violation . K9648) (make-message-condition . K9466) (make-lexical-violation . K9690) (make-irritants-condition . K9597) (make-implementation-restriction-violation . K9669) (make-error . K9533) (make-assertion-violation . K9575) (lexical-violation? . K9692) (irritants-condition? . K9601) (implementation-restriction-violation? . K9671) (error? . K9535) (condition-who . K9629) (condition-predicate . K11009) (condition-message . K9472) (condition-irritants . K9603) (condition-accessor . K11008) (condition . K11007) (assertion-violation? . K9577) (condition? . K11006) (utf32->string . K11005) (utf16->string . K11004) (utf8->string . K11003) (uint-list->bytevector . K11002) (u8-list->bytevector . K11001) (string->utf8 . K11000) (string->utf32 . K10999) (string->utf16 . K10998) (sint-list->bytevector . K10997) (native-endianness . K10996) (bytevector? . K10995) (bytevector=? . K10994) (bytevector-uint-set! . K10993) (bytevector-uint-ref . K10992) (bytevector-u8-set! . K10991) (bytevector-u8-ref . K10990) (bytevector-u64-set! . K10989) (bytevector-u64-ref . K10988) (bytevector-u64-native-set! . K10987) (bytevector-u64-native-ref . K10986) (bytevector-u32-set! . K10985) (bytevector-u32-ref . K10984) (bytevector-u32-native-set! . K10983) (bytevector-u32-native-ref . K10982) (bytevector-u16-set! . K10981) (bytevector-u16-ref . K10980) (bytevector-u16-native-set! . K10979) (bytevector-u16-native-ref . K10978) (bytevector-sint-set! . K10977) (bytevector-sint-ref . K10976) (bytevector-s8-set! . K10975) (bytevector-s8-ref . K10974) (bytevector-s64-set! . K10973) (bytevector-s64-ref . K10972) (bytevector-s64-native-set! . K10971) (bytevector-s64-native-ref . K10970) (bytevector-s32-set! . K10969) (bytevector-s32-ref . K10968) (bytevector-s32-native-set! . K10967) (bytevector-s32-native-ref . K10966) (bytevector-s16-set! . K10965) (bytevector-s16-ref . K10964) (bytevector-s16-native-set! . K10963) (bytevector-s16-native-ref . K10962) (bytevector-length . K10961) (bytevector-ieee-single-ref . K10960) (bytevector-ieee-single-set! . K10959) (bytevector-ieee-single-native-set! . K10958) (bytevector-ieee-single-native-ref . K10957) (bytevector-ieee-double-set! . K10956) (bytevector-ieee-double-ref . K10955) (bytevector-ieee-double-native-set! . K10954) (bytevector-ieee-double-native-ref . K10953) (bytevector-fill! . K10952) (bytevector-copy! . K10951) (bytevector-copy . K10950) (bytevector->uint-list . K10949) (bytevector->u8-list . K10948) (bytevector->sint-list . K10947) (no-nans-violation? . K10058) (no-infinities-violation? . K10037) (make-no-nans-violation . K10056) (make-no-infinities-violation . K10035) (real->flonum . K10946) (flzero? . K10945) (fltruncate . K10944) (fltan . K10943) (flsqrt . K10942) (flsin . K10941) (flround . K10940) (flpositive? . K10939) (flonum? . K10938) (flodd? . K10937) (flnumerator . K10936) (flnegative? . K10935) (flnan? . K10934) (flmod0 . K10933) (flmod . K10932) (flmin . K10931) (flmax . K10930) (fllog . K10929) (flinteger? . K10928) (flinfinite? . K10927) (flfloor . K10926) (flfinite? . K10925) (flexpt . K10924) (flexp . K10923) (fleven? . K10922) (fldiv0-and-mod0 . K10921) (fldiv0 . K10920) (fldiv-and-mod . K10919) (fldiv . K10918) (fldenominator . K10917) (flcos . K10916) (flceiling . K10915) (flatan . K10914) (flasin . K10913) (flacos . K10912) (flabs . K10911) (fl>? . K10910) (fl>=? . K10909) (fl=? . K10908) (fl<? . K10907) (fl<=? . K10906) (fl/ . K10905) (fl- . K10904) (fl+ . K10903) (fl* . K10902) (fixnum->flonum . K10901) (fxzero? . K10900) (fxxor . K10899) (fxrotate-bit-field . K10898) (fxreverse-bit-field . K10897) (fxpositive? . K10896) (fxodd? . K10895) (fxnot . K10894) (fxnegative? . K10893) (fxmod0 . K10892) (fxmod . K10891) (fxmin . K10890) (fxmax . K10889) (fxlength . K10888) (fxior . K10887) (fxif . K10886) (fxfirst-bit-set . K10885) (fxeven? . K10884) (fxdiv0-and-mod0 . K10883) (fxdiv0 . K10882) (fxdiv-and-mod . K10881) (fxdiv . K10880) (fxcopy-bit-field . K10879) (fxcopy-bit . K10878) (fxbit-set? . K10877) (fxbit-field . K10876) (fxbit-count . K10875) (fxarithmetic-shift-right . K10874) (fxarithmetic-shift-left . K10873) (fxarithmetic-shift . K10872) (fxand . K10871) (fx>? . K10870) (fx>=? . K10869) (fx=? . K10868) (fx<? . K10867) (fx<=? . K10866) (fx-/carry . K10865) (fx- . K10864) (fx+/carry . K10863) (fx+ . K10862) (fx*/carry . K10861) (fx* . K10860) (greatest-fixnum . K10859) (least-fixnum . K10858) (fixnum-width . K10857) (fixnum? . K10856) (bitwise-rotate-bit-field . K10855) (bitwise-reverse-bit-field . K10854) (bitwise-length . K10853) (bitwise-if . K10852) (bitwise-first-bit-set . K10851) (bitwise-copy-bit-field . K10850) (bitwise-copy-bit . K10849) (bitwise-bit-set? . K10848) (bitwise-bit-field . K10847) (bitwise-bit-count . K10846) (bitwise-xor . K10845) (bitwise-ior . K10844) (bitwise-and . K10843) (bitwise-not . K10842) (bitwise-arithmetic-shift-right . K10841) (bitwise-arithmetic-shift-left . K10840) (bitwise-arithmetic-shift . K10839) (zero? . K10838) (vector? . K10837) (vector-set! . K10836) (vector-ref . K10835) (vector-map . K10834) (vector-length . K10833) (vector-for-each . K10832) (vector-fill! . K10831) (vector->list . K10830) (vector . K10829) (values . K10828) (truncate . K10827) (tan . K10826) (symbol? . K10825) (symbol=? . K10824) (symbol->string . K10823) (substring . K10822) (string? . K10821) (string>? . K10820) (string>=? . K10819) (string=? . K10818) (string<? . K10817) (string<=? . K10816) (string-ref . K10815) (string-length . K10814) (string-for-each . K10813) (string-copy . K10812) (string-append . K10811) (string->symbol . K10810) (string->number . K10809) (string->list . K10808) (string . K10807) (sqrt . K10806) (sin . K10805) (round . K10804) (reverse . K10803) (real? . K10802) (real-valued? . K10801) (real-part . K10800) (rationalize . K10799) (rational? . K10798) (rational-valued? . K10797) (procedure? . K10796) (positive? . K10795) (pair? . K10794) (odd? . K10793) (numerator . K10792) (number? . K10791) (number->string . K10790) (null? . K10789) (not . K10788) (negative? . K10787) (nan? . K10786) (min . K10785) (max . K10784) (map . K10783) (make-vector . K10782) (make-string . K10781) (make-rectangular . K10780) (make-polar . K10779) (magnitude . K10778) (log . K10777) (list? . K10776) (list-tail . K10775) (list-ref . K10774) (list->vector . K10773) (list->string . K10772) (list . K10771) (length . K10770) (lcm . K10769) (integer? . K10768) (integer-valued? . K10767) (integer->char . K10766) (infinite? . K10765) (inexact? . K10764) (inexact . K10763) (imag-part . K10762) (gcd . K10761) (for-each . K10760) (floor . K10759) (finite? . K10758) (expt . K10757) (exp . K10756) (exact? . K10755) (exact-integer-sqrt . K10754) (exact . K10753) (even? . K10752) (error . K10751) (eqv? . K10750) (equal? . K10749) (eq? . K10748) (dynamic-wind . K10747) (div0-and-mod0 . K10746) (mod0 . K10745) (div0 . K10744) (div-and-mod . K10743) (mod . K10742) (div . K10741) (denominator . K10740) (cos . K10739) (cons . K10738) (complex? . K10737) (char? . K10736) (char>? . K10735) (char>=? . K10734) (char=? . K10733) (char<? . K10732) (char<=? . K10731) (char->integer . K10730) (ceiling . K10729) (call-with-values . K10728) (call/cc . K10727) (call-with-current-continuation . K10726) (cddddr . K10725) (cdddar . K10724) (cddadr . K10723) (cddaar . K10722) (cdaddr . K10721) (cdadar . K10720) (cdaadr . K10719) (cdaaar . K10718) (cadddr . K10717) (caddar . K10716) (cadadr . K10715) (cadaar . K10714) (caaddr . K10713) (caadar . K10712) (caaadr . K10711) (caaaar . K10710) (cdddr . K10709) (cddar . K10708) (cdadr . K10707) (cdaar . K10706) (caddr . K10705) (cadar . K10704) (caadr . K10703) (caaar . K10702) (cddr . K10701) (cdar . K10700) (cadr . K10699) (caar . K10698) (cdr . K10697) (car . K10696) (boolean? . K10695) (boolean=? . K10694) (atan . K10693) (assertion-violation . K10692) (asin . K10691) (apply . K10690) (append . K10689) (angle . K10688) (acos . K10687) (abs . K10686) (/ . K10685) (* . K10684) (- . K10683) (+ . K10682) (>= . K10681) (> . K10680) (= . K10679) (<= . K10678) (< . K10677) (library . K10676) (&no-nans . K10675) (&no-infinities . K10674) (&i/o-encoding . K10673) (&i/o-decoding . K10672) (&i/o-port . K10671) (&i/o-file-does-not-exist . K10670) (&i/o-file-already-exists . K10669) (&i/o-file-is-read-only . K10668) (&i/o-file-protection . K10667) (&i/o-filename . K10666) (&i/o-invalid-position . K10665) (&i/o-write . K10664) (&i/o-read . K10663) (&i/o . K10662) (&undefined . K10661) (&syntax . K10660) (&lexical . K10659) (&implementation-restriction . K10658) (&non-continuable . K10657) (&who . K10656) (&irritants . K10655) (&assertion . K10654) (&violation . K10653) (&error . K10652) (&serious . K10651) (&warning . K10650) (&message . K10649) (&condition . K10648) (define-condition-type . K10647) (define-enumeration . K10646) (define-record-type . K10645) (parent-rtd . K10644) (nongenerative . K10643) (opaque . K10642) (sealed . K10641) (protocol . K10640) (parent . K10639) (immutable . K10638) (mutable . K10637) (fields . K10636) (error-handling-mode . K10635) (file-options . K10634) (buffer-mode . K10633) (eol-style . K10632) (guard . K10631) (unsyntax-splicing . K10628) (unsyntax . K10627) (unquote-splicing . K10626) (unquote . K10625) (_ . K10624) (else . K10623) (=> . K10622) (... . K10621) (assert . K10620) (endianness . K10619) (do . K10616) (cond . K10615) (let* . K10614) (let . K10613) (let*-values . K10612) (let-values . K10611) (identifier-syntax . K10610) (with-syntax . K10609) (quasisyntax . K10608) (quasiquote . K10607) (syntax-rules . K10606) (include . K10605) (record-constructor-descriptor . K10603) (record-type-descriptor . K10602) (case . K10601) (unless . K10599) (when . K10598) (or . K10597) (and . K10596) (if . K10595) (letrec* . K10594) (letrec . K10593) (case-lambda . K10591) (lambda . K10590) (syntax . K10589) (syntax-case . K10588) (quote . K10587) (letrec-syntax . K10585) (let-syntax . K10584) (set! . K10583) (import . K10582) (begin . K10581) (define-syntax . K10579) (define . K10578)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11284 '(psyntax null-environment-5) '() '() '() '() '((make-promise . K11058) (unquote-splicing . K10626) (unquote . K10625) (_ . K10624) (else . K10623) (=> . K10622) (... . K10621) (delay . K10618) (do . K10616) (cond . K10615) (let* . K10614) (let . K10613) (quasiquote . K10607) (syntax-rules . K10606) (case . K10601) (or . K10597) (and . K10596) (if . K10595) (letrec . K10593) (lambda . K10590) (quote . K10587) (letrec-syntax . K10585) (let-syntax . K10584) (set! . K10583) (begin . K10581) (define-syntax . K10579) (define . K10578)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11285 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . K11207) (string-ci>=? . K11206) (string-ci=? . K11205) (string-ci<? . K11204) (string-ci<=? . K11203) (char-whitespace? . K11202) (char-upper-case? . K11201) (char-numeric? . K11199) (char-lower-case? . K11198) (char-upcase . K11196) (char-downcase . K11193) (char-ci>? . K11192) (char-ci>=? . K11191) (char-ci=? . K11190) (char-ci<? . K11189) (char-ci<=? . K11188) (char-alphabetic? . K11187) (call-with-output-file . K11143) (call-with-input-file . K11142) (write-char . K11141) (write . K11140) (with-output-to-file . K11139) (with-input-from-file . K11138) (read-char . K11137) (read . K11136) (peek-char . K11135) (open-output-file . K11134) (open-input-file . K11133) (newline . K11132) (display . K11131) (close-output-port . K11130) (close-input-port . K11129) (eof-object . K11127) (current-output-port . K11125) (current-input-port . K11124) (output-port? . K11123) (input-port? . K11122) (scheme-report-environment . K2956) (quotient . K11064) (null-environment . K2954) (remainder . K11063) (modulo . K11062) (inexact->exact . K11061) (force . K11060) (exact->inexact . K11059) (make-promise . K11058) (string-fill! . K11056) (string-set! . K11055) (set-cdr! . K11054) (set-car! . K11053) (memv . K11047) (memq . K11046) (member . K11044) (assv . K11036) (assq . K11035) (assoc . K11033) (eval . K2960) (zero? . K10838) (vector? . K10837) (vector-set! . K10836) (vector-ref . K10835) (vector-length . K10833) (vector-fill! . K10831) (vector->list . K10830) (vector . K10829) (values . K10828) (truncate . K10827) (tan . K10826) (symbol? . K10825) (symbol->string . K10823) (substring . K10822) (string? . K10821) (string>? . K10820) (string>=? . K10819) (string=? . K10818) (string<? . K10817) (string<=? . K10816) (string-ref . K10815) (string-length . K10814) (string-copy . K10812) (string-append . K10811) (string->symbol . K10810) (string->number . K10809) (string->list . K10808) (string . K10807) (sqrt . K10806) (sin . K10805) (round . K10804) (reverse . K10803) (real? . K10802) (real-part . K10800) (rationalize . K10799) (rational? . K10798) (procedure? . K10796) (positive? . K10795) (pair? . K10794) (odd? . K10793) (numerator . K10792) (number? . K10791) (number->string . K10790) (not . K10788) (negative? . K10787) (min . K10785) (max . K10784) (map . K10783) (make-vector . K10782) (make-string . K10781) (make-rectangular . K10780) (make-polar . K10779) (magnitude . K10778) (log . K10777) (list? . K10776) (list-tail . K10775) (list-ref . K10774) (list->vector . K10773) (list->string . K10772) (list . K10771) (length . K10770) (lcm . K10769) (integer? . K10768) (integer->char . K10766) (inexact? . K10764) (imag-part . K10762) (gcd . K10761) (for-each . K10760) (floor . K10759) (expt . K10757) (exp . K10756) (exact? . K10755) (even? . K10752) (eqv? . K10750) (equal? . K10749) (eq? . K10748) (dynamic-wind . K10747) (denominator . K10740) (cos . K10739) (cons . K10738) (complex? . K10737) (char? . K10736) (char>? . K10735) (char>=? . K10734) (char=? . K10733) (char<? . K10732) (char<=? . K10731) (char->integer . K10730) (ceiling . K10729) (call-with-values . K10728) (call-with-current-continuation . K10726) (cddddr . K10725) (cdddar . K10724) (cddadr . K10723) (cddaar . K10722) (cdaddr . K10721) (cdadar . K10720) (cdaadr . K10719) (cdaaar . K10718) (cadddr . K10717) (caddar . K10716) (cadadr . K10715) (cadaar . K10714) (caaddr . K10713) (caadar . K10712) (caaadr . K10711) (caaaar . K10710) (cdddr . K10709) (cddar . K10708) (cdadr . K10707) (cdaar . K10706) (caddr . K10705) (cadar . K10704) (caadr . K10703) (caaar . K10702) (cddr . K10701) (cdar . K10700) (cadr . K10699) (caar . K10698) (cdr . K10697) (car . K10696) (boolean? . K10695) (atan . K10693) (asin . K10691) (apply . K10690) (append . K10689) (angle . K10688) (acos . K10687) (abs . K10686) (/ . K10685) (* . K10684) (- . K10683) (+ . K10682) (>= . K10681) (> . K10680) (= . K10679) (<= . K10678) (< . K10677) (unquote-splicing . K10626) (unquote . K10625) (else . K10623) (=> . K10622) (... . K10621) (delay . K10618) (do . K10616) (cond . K10615) (let* . K10614) (let . K10613) (quasiquote . K10607) (syntax-rules . K10606) (case . K10601) (or . K10597) (and . K10596) (if . K10595) (letrec . K10593) (lambda . K10590) (quote . K10587) (letrec-syntax . K10585) (let-syntax . K10584) (set! . K10583) (begin . K10581) (define-syntax . K10579) (define . K10578)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11286 '(psyntax modules) '() '() '() '() '((module . K10580)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11287 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11288 '(rnrs) '(6) '() '() '() '((regexp? . K11276) (string-upcase . K11215) (string-titlecase . K11214) (string-normalize-nfkd . K11213) (string-normalize-nfkc . K11212) (string-normalize-nfd . K11211) (string-normalize-nfc . K11210) (string-foldcase . K11209) (string-downcase . K11208) (string-ci>? . K11207) (string-ci>=? . K11206) (string-ci=? . K11205) (string-ci<? . K11204) (string-ci<=? . K11203) (char-whitespace? . K11202) (char-upper-case? . K11201) (char-title-case? . K11200) (char-numeric? . K11199) (char-lower-case? . K11198) (char-general-category . K11197) (char-upcase . K11196) (char-titlecase . K11195) (char-foldcase . K11194) (char-downcase . K11193) (char-ci>? . K11192) (char-ci>=? . K11191) (char-ci=? . K11190) (char-ci<? . K11189) (char-ci<=? . K11188) (char-alphabetic? . K11187) (make-variable-transformer . K2316) (identifier? . K2994) (generate-temporaries . K2974) (free-identifier=? . K2976) (syntax->datum . K2998) (datum->syntax . K2996) (bound-identifier=? . K2978) (record-type-descriptor? . K11186) (record-predicate . K11185) (record-mutator . K11184) (record-constructor . K11183) (record-accessor . K11182) (make-record-type-descriptor . K11181) (make-record-constructor-descriptor . K11180) (record? . K11179) (record-type-uid . K11178) (record-type-sealed? . K11177) (record-type-parent . K11176) (record-type-opaque? . K11175) (record-type-name . K11174) (record-type-generative? . K11173) (record-type-field-names . K11172) (record-rtd . K11171) (record-field-mutable? . K11170) (delete-file . K11169) (file-exists? . K11168) (vector-sort! . K11167) (vector-sort . K11166) (list-sort . K11165) (symbol-hash . K11164) (string-ci-hash . K11163) (string-hash . K11162) (equal-hash . K11161) (hashtable-equivalence-function . K11160) (make-hashtable . K11159) (hashtable-hash-function . K11158) (make-eqv-hashtable . K11157) (make-eq-hashtable . K11156) (hashtable? . K11155) (hashtable-update! . K11154) (hashtable-size . K11153) (hashtable-set! . K11152) (hashtable-ref . K11151) (hashtable-mutable? . K11150) (hashtable-keys . K11149) (hashtable-entries . K11148) (hashtable-delete! . K11147) (hashtable-copy . K11146) (hashtable-contains? . K11145) (hashtable-clear! . K11144) (call-with-output-file . K11143) (call-with-input-file . K11142) (write-char . K11141) (write . K11140) (with-output-to-file . K11139) (with-input-from-file . K11138) (read-char . K11137) (read . K11136) (peek-char . K11135) (open-output-file . K11134) (open-input-file . K11133) (newline . K11132) (display . K11131) (close-output-port . K11130) (close-input-port . K11129) (eof-object? . K11128) (eof-object . K11127) (current-error-port . K11126) (current-output-port . K11125) (current-input-port . K11124) (output-port? . K11123) (input-port? . K11122) (utf-8-codec . K11121) (utf-16-codec . K11120) (transcoder-error-handling-mode . K11119) (transcoder-eol-style . K11118) (transcoder-codec . K11117) (transcoded-port . K11116) (textual-port? . K11115) (string->bytevector . K11114) (standard-output-port . K11113) (standard-input-port . K11112) (standard-error-port . K11111) (set-port-position! . K11110) (put-u8 . K11109) (put-string . K11108) (put-datum . K11107) (put-char . K11106) (put-bytevector . K11105) (port? . K11104) (port-transcoder . K11103) (port-position . K11102) (port-has-set-port-position!? . K11101) (port-has-port-position? . K11100) (port-eof? . K11099) (output-port-buffer-mode . K11098) (open-string-output-port . K11097) (open-string-input-port . K11096) (open-file-output-port . K11095) (open-file-input/output-port . K11094) (open-file-input-port . K11093) (open-bytevector-output-port . K11092) (open-bytevector-input-port . K11091) (native-transcoder . K11090) (native-eol-style . K11089) (make-transcoder . K11088) (latin-1-codec . K11087) (make-i/o-write-error . K9805) (make-i/o-read-error . K9784) (make-i/o-port-error . K9963) (make-i/o-invalid-position-error . K9827) (make-i/o-filename-error . K9853) (make-i/o-file-protection-error . K9878) (make-i/o-file-is-read-only-error . K9899) (make-i/o-file-does-not-exist-error . K9941) (make-i/o-file-already-exists-error . K9920) (make-i/o-error . K9763) (make-i/o-encoding-error . K10010) (make-i/o-decoding-error . K9988) (make-custom-textual-output-port . K11086) (make-custom-textual-input/output-port . K11085) (make-custom-textual-input-port . K11084) (make-custom-binary-output-port . K11083) (make-custom-binary-input/output-port . K11082) (make-custom-binary-input-port . K11081) (make-bytevector . K11080) (lookahead-u8 . K11079) (lookahead-char . K11078) (i/o-write-error? . K9807) (i/o-read-error? . K9786) (i/o-port-error? . K9967) (i/o-invalid-position-error? . K9831) (i/o-filename-error? . K9857) (i/o-file-protection-error? . K9880) (i/o-file-is-read-only-error? . K9901) (i/o-file-does-not-exist-error? . K9943) (i/o-file-already-exists-error? . K9922) (i/o-error? . K9765) (i/o-error-position . K9833) (i/o-error-port . K9969) (i/o-error-filename . K9859) (i/o-encoding-error? . K10014) (i/o-encoding-error-char . K10016) (i/o-decoding-error? . K9990) (get-u8 . K11077) (get-string-n! . K11076) (get-string-n . K11075) (get-string-all . K11074) (get-line . K11073) (get-datum . K11072) (get-char . K11071) (get-bytevector-some . K11070) (get-bytevector-n! . K11069) (get-bytevector-n . K11068) (get-bytevector-all . K11067) (flush-output-port . K11066) (close-port . K11065) (exit . K11057) (command-line . K10325) (remove . K11052) (remv . K11051) (remp . K11050) (remq . K11049) (partition . K11048) (memv . K11047) (memq . K11046) (memp . K11045) (member . K11044) (exists . K11043) (for-all . K11042) (fold-right . K11041) (fold-left . K11040) (find . K11039) (filter . K11038) (cons* . K11037) (assv . K11036) (assq . K11035) (assp . K11034) (assoc . K11033) (call-with-string-output-port . K11032) (call-with-port . K11031) (call-with-bytevector-output-port . K11030) (bytevector->string . K11029) (buffer-mode? . K11028) (binary-port? . K11027) (with-exception-handler . K11026) (raise-continuable . K11025) (raise . K11024) (make-enumeration . K11023) (enum-set=? . K11022) (enum-set-universe . K11021) (enum-set-union . K11020) (enum-set-subset? . K11019) (enum-set-projection . K11018) (enum-set-member? . K11017) (enum-set-intersection . K11016) (enum-set-indexer . K11015) (enum-set-difference . K11014) (enum-set-constructor . K11013) (enum-set-complement . K11012) (enum-set->list . K11011) (who-condition? . K9627) (warning? . K9493) (violation? . K9556) (undefined-violation? . K9744) (syntax-violation? . K9719) (syntax-violation-subform . K9723) (syntax-violation-form . K9721) (syntax-violation . K2992) (simple-conditions . K11010) (serious-condition? . K9514) (non-continuable-violation? . K9650) (message-condition? . K9470) (make-who-condition . K9623) (make-warning . K9491) (make-violation . K9554) (make-undefined-violation . K9742) (make-syntax-violation . K9713) (make-serious-condition . K9512) (make-non-continuable-violation . K9648) (make-message-condition . K9466) (make-lexical-violation . K9690) (make-irritants-condition . K9597) (make-implementation-restriction-violation . K9669) (make-error . K9533) (make-assertion-violation . K9575) (lexical-violation? . K9692) (irritants-condition? . K9601) (implementation-restriction-violation? . K9671) (error? . K9535) (condition-who . K9629) (condition-predicate . K11009) (condition-message . K9472) (condition-irritants . K9603) (condition-accessor . K11008) (condition . K11007) (assertion-violation? . K9577) (condition? . K11006) (utf32->string . K11005) (utf16->string . K11004) (utf8->string . K11003) (uint-list->bytevector . K11002) (u8-list->bytevector . K11001) (string->utf8 . K11000) (string->utf32 . K10999) (string->utf16 . K10998) (sint-list->bytevector . K10997) (native-endianness . K10996) (bytevector? . K10995) (bytevector=? . K10994) (bytevector-uint-set! . K10993) (bytevector-uint-ref . K10992) (bytevector-u8-set! . K10991) (bytevector-u8-ref . K10990) (bytevector-u64-set! . K10989) (bytevector-u64-ref . K10988) (bytevector-u64-native-set! . K10987) (bytevector-u64-native-ref . K10986) (bytevector-u32-set! . K10985) (bytevector-u32-ref . K10984) (bytevector-u32-native-set! . K10983) (bytevector-u32-native-ref . K10982) (bytevector-u16-set! . K10981) (bytevector-u16-ref . K10980) (bytevector-u16-native-set! . K10979) (bytevector-u16-native-ref . K10978) (bytevector-sint-set! . K10977) (bytevector-sint-ref . K10976) (bytevector-s8-set! . K10975) (bytevector-s8-ref . K10974) (bytevector-s64-set! . K10973) (bytevector-s64-ref . K10972) (bytevector-s64-native-set! . K10971) (bytevector-s64-native-ref . K10970) (bytevector-s32-set! . K10969) (bytevector-s32-ref . K10968) (bytevector-s32-native-set! . K10967) (bytevector-s32-native-ref . K10966) (bytevector-s16-set! . K10965) (bytevector-s16-ref . K10964) (bytevector-s16-native-set! . K10963) (bytevector-s16-native-ref . K10962) (bytevector-length . K10961) (bytevector-ieee-single-ref . K10960) (bytevector-ieee-single-set! . K10959) (bytevector-ieee-single-native-set! . K10958) (bytevector-ieee-single-native-ref . K10957) (bytevector-ieee-double-set! . K10956) (bytevector-ieee-double-ref . K10955) (bytevector-ieee-double-native-set! . K10954) (bytevector-ieee-double-native-ref . K10953) (bytevector-fill! . K10952) (bytevector-copy! . K10951) (bytevector-copy . K10950) (bytevector->uint-list . K10949) (bytevector->u8-list . K10948) (bytevector->sint-list . K10947) (no-nans-violation? . K10058) (no-infinities-violation? . K10037) (make-no-nans-violation . K10056) (make-no-infinities-violation . K10035) (real->flonum . K10946) (flzero? . K10945) (fltruncate . K10944) (fltan . K10943) (flsqrt . K10942) (flsin . K10941) (flround . K10940) (flpositive? . K10939) (flonum? . K10938) (flodd? . K10937) (flnumerator . K10936) (flnegative? . K10935) (flnan? . K10934) (flmod0 . K10933) (flmod . K10932) (flmin . K10931) (flmax . K10930) (fllog . K10929) (flinteger? . K10928) (flinfinite? . K10927) (flfloor . K10926) (flfinite? . K10925) (flexpt . K10924) (flexp . K10923) (fleven? . K10922) (fldiv0-and-mod0 . K10921) (fldiv0 . K10920) (fldiv-and-mod . K10919) (fldiv . K10918) (fldenominator . K10917) (flcos . K10916) (flceiling . K10915) (flatan . K10914) (flasin . K10913) (flacos . K10912) (flabs . K10911) (fl>? . K10910) (fl>=? . K10909) (fl=? . K10908) (fl<? . K10907) (fl<=? . K10906) (fl/ . K10905) (fl- . K10904) (fl+ . K10903) (fl* . K10902) (fixnum->flonum . K10901) (fxzero? . K10900) (fxxor . K10899) (fxrotate-bit-field . K10898) (fxreverse-bit-field . K10897) (fxpositive? . K10896) (fxodd? . K10895) (fxnot . K10894) (fxnegative? . K10893) (fxmod0 . K10892) (fxmod . K10891) (fxmin . K10890) (fxmax . K10889) (fxlength . K10888) (fxior . K10887) (fxif . K10886) (fxfirst-bit-set . K10885) (fxeven? . K10884) (fxdiv0-and-mod0 . K10883) (fxdiv0 . K10882) (fxdiv-and-mod . K10881) (fxdiv . K10880) (fxcopy-bit-field . K10879) (fxcopy-bit . K10878) (fxbit-set? . K10877) (fxbit-field . K10876) (fxbit-count . K10875) (fxarithmetic-shift-right . K10874) (fxarithmetic-shift-left . K10873) (fxarithmetic-shift . K10872) (fxand . K10871) (fx>? . K10870) (fx>=? . K10869) (fx=? . K10868) (fx<? . K10867) (fx<=? . K10866) (fx-/carry . K10865) (fx- . K10864) (fx+/carry . K10863) (fx+ . K10862) (fx*/carry . K10861) (fx* . K10860) (greatest-fixnum . K10859) (least-fixnum . K10858) (fixnum-width . K10857) (fixnum? . K10856) (bitwise-rotate-bit-field . K10855) (bitwise-reverse-bit-field . K10854) (bitwise-length . K10853) (bitwise-if . K10852) (bitwise-first-bit-set . K10851) (bitwise-copy-bit-field . K10850) (bitwise-copy-bit . K10849) (bitwise-bit-set? . K10848) (bitwise-bit-field . K10847) (bitwise-bit-count . K10846) (bitwise-xor . K10845) (bitwise-ior . K10844) (bitwise-and . K10843) (bitwise-not . K10842) (bitwise-arithmetic-shift-right . K10841) (bitwise-arithmetic-shift-left . K10840) (bitwise-arithmetic-shift . K10839) (zero? . K10838) (vector? . K10837) (vector-set! . K10836) (vector-ref . K10835) (vector-map . K10834) (vector-length . K10833) (vector-for-each . K10832) (vector-fill! . K10831) (vector->list . K10830) (vector . K10829) (values . K10828) (truncate . K10827) (tan . K10826) (symbol? . K10825) (symbol=? . K10824) (symbol->string . K10823) (substring . K10822) (string? . K10821) (string>? . K10820) (string>=? . K10819) (string=? . K10818) (string<? . K10817) (string<=? . K10816) (string-ref . K10815) (string-length . K10814) (string-for-each . K10813) (string-copy . K10812) (string-append . K10811) (string->symbol . K10810) (string->number . K10809) (string->list . K10808) (string . K10807) (sqrt . K10806) (sin . K10805) (round . K10804) (reverse . K10803) (real? . K10802) (real-valued? . K10801) (real-part . K10800) (rationalize . K10799) (rational? . K10798) (rational-valued? . K10797) (procedure? . K10796) (positive? . K10795) (pair? . K10794) (odd? . K10793) (numerator . K10792) (number? . K10791) (number->string . K10790) (null? . K10789) (not . K10788) (negative? . K10787) (nan? . K10786) (min . K10785) (max . K10784) (map . K10783) (make-vector . K10782) (make-string . K10781) (make-rectangular . K10780) (make-polar . K10779) (magnitude . K10778) (log . K10777) (list? . K10776) (list-tail . K10775) (list-ref . K10774) (list->vector . K10773) (list->string . K10772) (list . K10771) (length . K10770) (lcm . K10769) (integer? . K10768) (integer-valued? . K10767) (integer->char . K10766) (infinite? . K10765) (inexact? . K10764) (inexact . K10763) (imag-part . K10762) (gcd . K10761) (for-each . K10760) (floor . K10759) (finite? . K10758) (expt . K10757) (exp . K10756) (exact? . K10755) (exact-integer-sqrt . K10754) (exact . K10753) (even? . K10752) (error . K10751) (eqv? . K10750) (equal? . K10749) (eq? . K10748) (dynamic-wind . K10747) (div0-and-mod0 . K10746) (mod0 . K10745) (div0 . K10744) (div-and-mod . K10743) (mod . K10742) (div . K10741) (denominator . K10740) (cos . K10739) (cons . K10738) (complex? . K10737) (char? . K10736) (char>? . K10735) (char>=? . K10734) (char=? . K10733) (char<? . K10732) (char<=? . K10731) (char->integer . K10730) (ceiling . K10729) (call-with-values . K10728) (call/cc . K10727) (call-with-current-continuation . K10726) (cddddr . K10725) (cdddar . K10724) (cddadr . K10723) (cddaar . K10722) (cdaddr . K10721) (cdadar . K10720) (cdaadr . K10719) (cdaaar . K10718) (cadddr . K10717) (caddar . K10716) (cadadr . K10715) (cadaar . K10714) (caaddr . K10713) (caadar . K10712) (caaadr . K10711) (caaaar . K10710) (cdddr . K10709) (cddar . K10708) (cdadr . K10707) (cdaar . K10706) (caddr . K10705) (cadar . K10704) (caadr . K10703) (caaar . K10702) (cddr . K10701) (cdar . K10700) (cadr . K10699) (caar . K10698) (cdr . K10697) (car . K10696) (boolean? . K10695) (boolean=? . K10694) (atan . K10693) (assertion-violation . K10692) (asin . K10691) (apply . K10690) (append . K10689) (angle . K10688) (acos . K10687) (abs . K10686) (/ . K10685) (* . K10684) (- . K10683) (+ . K10682) (>= . K10681) (> . K10680) (= . K10679) (<= . K10678) (< . K10677) (&no-nans . K10675) (&no-infinities . K10674) (&i/o-encoding . K10673) (&i/o-decoding . K10672) (&i/o-port . K10671) (&i/o-file-does-not-exist . K10670) (&i/o-file-already-exists . K10669) (&i/o-file-is-read-only . K10668) (&i/o-file-protection . K10667) (&i/o-filename . K10666) (&i/o-invalid-position . K10665) (&i/o-write . K10664) (&i/o-read . K10663) (&i/o . K10662) (&undefined . K10661) (&syntax . K10660) (&lexical . K10659) (&implementation-restriction . K10658) (&non-continuable . K10657) (&who . K10656) (&irritants . K10655) (&assertion . K10654) (&violation . K10653) (&error . K10652) (&serious . K10651) (&warning . K10650) (&message . K10649) (&condition . K10648) (define-condition-type . K10647) (define-enumeration . K10646) (define-record-type . K10645) (parent-rtd . K10644) (nongenerative . K10643) (opaque . K10642) (sealed . K10641) (protocol . K10640) (parent . K10639) (immutable . K10638) (mutable . K10637) (fields . K10636) (error-handling-mode . K10635) (file-options . K10634) (buffer-mode . K10633) (eol-style . K10632) (guard . K10631) (unsyntax-splicing . K10628) (unsyntax . K10627) (unquote-splicing . K10626) (unquote . K10625) (_ . K10624) (else . K10623) (=> . K10622) (... . K10621) (assert . K10620) (endianness . K10619) (do . K10616) (cond . K10615) (let* . K10614) (let . K10613) (let*-values . K10612) (let-values . K10611) (identifier-syntax . K10610) (with-syntax . K10609) (quasisyntax . K10608) (quasiquote . K10607) (syntax-rules . K10606) (record-constructor-descriptor . K10603) (record-type-descriptor . K10602) (case . K10601) (unless . K10599) (when . K10598) (or . K10597) (and . K10596) (if . K10595) (letrec* . K10594) (letrec . K10593) (case-lambda . K10591) (lambda . K10590) (syntax . K10589) (syntax-case . K10588) (quote . K10587) (letrec-syntax . K10585) (let-syntax . K10584) (set! . K10583) (begin . K10581) (define-syntax . K10579) (define . K10578)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11289 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . K2956) (quotient . K11064) (null-environment . K2954) (remainder . K11063) (modulo . K11062) (inexact->exact . K11061) (force . K11060) (exact->inexact . K11059) (make-promise . K11058) (delay . K10618)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11290 '(rnrs control) '(6) '() '() '() '((do . K10616) (unless . K10599) (when . K10598) (case-lambda . K10591)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11291 '(rnrs eval) '(6) '() '() '() '((eval . K2960) (environment . K2952)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11292 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . K11054) (set-car! . K11053)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11293 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . K11056) (string-set! . K11055)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11294 '(rnrs programs) '(6) '() '() '() '((exit . K11057) (command-line . K10325)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11295 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . K2316) (identifier? . K2994) (generate-temporaries . K2974) (free-identifier=? . K2976) (syntax->datum . K2998) (datum->syntax . K2996) (bound-identifier=? . K2978) (syntax-violation . K2992) (unsyntax-splicing . K10628) (unsyntax . K10627) (_ . K10624) (... . K10621) (with-syntax . K10609) (quasisyntax . K10608) (syntax . K10589) (syntax-case . K10588)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11296 '(rnrs files) '(6) '() '() '() '((delete-file . K11169) (file-exists? . K11168) (make-i/o-write-error . K9805) (make-i/o-read-error . K9784) (make-i/o-port-error . K9963) (make-i/o-invalid-position-error . K9827) (make-i/o-filename-error . K9853) (make-i/o-file-protection-error . K9878) (make-i/o-file-is-read-only-error . K9899) (make-i/o-file-does-not-exist-error . K9941) (make-i/o-file-already-exists-error . K9920) (make-i/o-error . K9763) (i/o-write-error? . K9807) (i/o-read-error? . K9786) (i/o-port-error? . K9967) (i/o-invalid-position-error? . K9831) (i/o-filename-error? . K9857) (i/o-file-protection-error? . K9880) (i/o-file-is-read-only-error? . K9901) (i/o-file-does-not-exist-error? . K9943) (i/o-file-already-exists-error? . K9922) (i/o-error? . K9765) (i/o-error-position . K9833) (i/o-error-port . K9969) (i/o-error-filename . K9859) (&i/o-port . K10671) (&i/o-file-does-not-exist . K10670) (&i/o-file-already-exists . K10669) (&i/o-file-is-read-only . K10668) (&i/o-file-protection . K10667) (&i/o-filename . K10666) (&i/o-invalid-position . K10665) (&i/o-write . K10664) (&i/o-read . K10663) (&i/o . K10662)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11297 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . K11167) (vector-sort . K11166) (list-sort . K11165)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11298 '(rnrs base) '(6) '() '() '() '((zero? . K10838) (vector? . K10837) (vector-set! . K10836) (vector-ref . K10835) (vector-map . K10834) (vector-length . K10833) (vector-for-each . K10832) (vector-fill! . K10831) (vector->list . K10830) (vector . K10829) (values . K10828) (truncate . K10827) (tan . K10826) (symbol? . K10825) (symbol=? . K10824) (symbol->string . K10823) (substring . K10822) (string? . K10821) (string>? . K10820) (string>=? . K10819) (string=? . K10818) (string<? . K10817) (string<=? . K10816) (string-ref . K10815) (string-length . K10814) (string-for-each . K10813) (string-copy . K10812) (string-append . K10811) (string->symbol . K10810) (string->number . K10809) (string->list . K10808) (string . K10807) (sqrt . K10806) (sin . K10805) (round . K10804) (reverse . K10803) (real? . K10802) (real-valued? . K10801) (real-part . K10800) (rationalize . K10799) (rational? . K10798) (rational-valued? . K10797) (procedure? . K10796) (positive? . K10795) (pair? . K10794) (odd? . K10793) (numerator . K10792) (number? . K10791) (number->string . K10790) (null? . K10789) (not . K10788) (negative? . K10787) (nan? . K10786) (min . K10785) (max . K10784) (map . K10783) (make-vector . K10782) (make-string . K10781) (make-rectangular . K10780) (make-polar . K10779) (magnitude . K10778) (log . K10777) (list? . K10776) (list-tail . K10775) (list-ref . K10774) (list->vector . K10773) (list->string . K10772) (list . K10771) (length . K10770) (lcm . K10769) (integer? . K10768) (integer-valued? . K10767) (integer->char . K10766) (infinite? . K10765) (inexact? . K10764) (inexact . K10763) (imag-part . K10762) (gcd . K10761) (for-each . K10760) (floor . K10759) (finite? . K10758) (expt . K10757) (exp . K10756) (exact? . K10755) (exact-integer-sqrt . K10754) (exact . K10753) (even? . K10752) (error . K10751) (eqv? . K10750) (equal? . K10749) (eq? . K10748) (dynamic-wind . K10747) (div0-and-mod0 . K10746) (mod0 . K10745) (div0 . K10744) (div-and-mod . K10743) (mod . K10742) (div . K10741) (denominator . K10740) (cos . K10739) (cons . K10738) (complex? . K10737) (char? . K10736) (char>? . K10735) (char>=? . K10734) (char=? . K10733) (char<? . K10732) (char<=? . K10731) (char->integer . K10730) (ceiling . K10729) (call-with-values . K10728) (call/cc . K10727) (call-with-current-continuation . K10726) (cddddr . K10725) (cdddar . K10724) (cddadr . K10723) (cddaar . K10722) (cdaddr . K10721) (cdadar . K10720) (cdaadr . K10719) (cdaaar . K10718) (cadddr . K10717) (caddar . K10716) (cadadr . K10715) (cadaar . K10714) (caaddr . K10713) (caadar . K10712) (caaadr . K10711) (caaaar . K10710) (cdddr . K10709) (cddar . K10708) (cdadr . K10707) (cdaar . K10706) (caddr . K10705) (cadar . K10704) (caadr . K10703) (caaar . K10702) (cddr . K10701) (cdar . K10700) (cadr . K10699) (caar . K10698) (cdr . K10697) (car . K10696) (boolean? . K10695) (boolean=? . K10694) (atan . K10693) (assertion-violation . K10692) (asin . K10691) (apply . K10690) (append . K10689) (angle . K10688) (acos . K10687) (abs . K10686) (/ . K10685) (* . K10684) (- . K10683) (+ . K10682) (>= . K10681) (> . K10680) (= . K10679) (<= . K10678) (< . K10677) (unquote-splicing . K10626) (unquote . K10625) (_ . K10624) (else . K10623) (=> . K10622) (... . K10621) (assert . K10620) (cond . K10615) (let* . K10614) (let . K10613) (let*-values . K10612) (let-values . K10611) (identifier-syntax . K10610) (quasiquote . K10607) (syntax-rules . K10606) (case . K10601) (or . K10597) (and . K10596) (if . K10595) (letrec* . K10594) (letrec . K10593) (lambda . K10590) (quote . K10587) (letrec-syntax . K10585) (let-syntax . K10584) (set! . K10583) (begin . K10581) (define-syntax . K10579) (define . K10578)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11299 '(rnrs lists) '(6) '() '() '() '((remove . K11052) (remv . K11051) (remp . K11050) (remq . K11049) (partition . K11048) (memv . K11047) (memq . K11046) (memp . K11045) (member . K11044) (exists . K11043) (for-all . K11042) (fold-right . K11041) (fold-left . K11040) (find . K11039) (filter . K11038) (cons* . K11037) (assv . K11036) (assq . K11035) (assp . K11034) (assoc . K11033)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11300 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . K11143) (call-with-input-file . K11142) (write-char . K11141) (write . K11140) (with-output-to-file . K11139) (with-input-from-file . K11138) (read-char . K11137) (read . K11136) (peek-char . K11135) (open-output-file . K11134) (open-input-file . K11133) (newline . K11132) (display . K11131) (close-output-port . K11130) (close-input-port . K11129) (eof-object? . K11128) (eof-object . K11127) (current-error-port . K11126) (current-output-port . K11125) (current-input-port . K11124) (output-port? . K11123) (input-port? . K11122) (make-i/o-write-error . K9805) (make-i/o-read-error . K9784) (make-i/o-port-error . K9963) (make-i/o-invalid-position-error . K9827) (make-i/o-filename-error . K9853) (make-i/o-file-protection-error . K9878) (make-i/o-file-is-read-only-error . K9899) (make-i/o-file-does-not-exist-error . K9941) (make-i/o-file-already-exists-error . K9920) (make-i/o-error . K9763) (i/o-write-error? . K9807) (i/o-read-error? . K9786) (i/o-port-error? . K9967) (i/o-invalid-position-error? . K9831) (i/o-filename-error? . K9857) (i/o-file-protection-error? . K9880) (i/o-file-is-read-only-error? . K9901) (i/o-file-does-not-exist-error? . K9943) (i/o-file-already-exists-error? . K9922) (i/o-error? . K9765) (i/o-error-position . K9833) (i/o-error-port . K9969) (i/o-error-filename . K9859) (&i/o-port . K10671) (&i/o-file-does-not-exist . K10670) (&i/o-file-already-exists . K10669) (&i/o-file-is-read-only . K10668) (&i/o-file-protection . K10667) (&i/o-filename . K10666) (&i/o-invalid-position . K10665) (&i/o-write . K10664) (&i/o-read . K10663) (&i/o . K10662)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11301 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . K11080) (utf32->string . K11005) (utf16->string . K11004) (utf8->string . K11003) (uint-list->bytevector . K11002) (u8-list->bytevector . K11001) (string->utf8 . K11000) (string->utf32 . K10999) (string->utf16 . K10998) (sint-list->bytevector . K10997) (native-endianness . K10996) (bytevector? . K10995) (bytevector=? . K10994) (bytevector-uint-set! . K10993) (bytevector-uint-ref . K10992) (bytevector-u8-set! . K10991) (bytevector-u8-ref . K10990) (bytevector-u64-set! . K10989) (bytevector-u64-ref . K10988) (bytevector-u64-native-set! . K10987) (bytevector-u64-native-ref . K10986) (bytevector-u32-set! . K10985) (bytevector-u32-ref . K10984) (bytevector-u32-native-set! . K10983) (bytevector-u32-native-ref . K10982) (bytevector-u16-set! . K10981) (bytevector-u16-ref . K10980) (bytevector-u16-native-set! . K10979) (bytevector-u16-native-ref . K10978) (bytevector-sint-set! . K10977) (bytevector-sint-ref . K10976) (bytevector-s8-set! . K10975) (bytevector-s8-ref . K10974) (bytevector-s64-set! . K10973) (bytevector-s64-ref . K10972) (bytevector-s64-native-set! . K10971) (bytevector-s64-native-ref . K10970) (bytevector-s32-set! . K10969) (bytevector-s32-ref . K10968) (bytevector-s32-native-set! . K10967) (bytevector-s32-native-ref . K10966) (bytevector-s16-set! . K10965) (bytevector-s16-ref . K10964) (bytevector-s16-native-set! . K10963) (bytevector-s16-native-ref . K10962) (bytevector-length . K10961) (bytevector-ieee-single-ref . K10960) (bytevector-ieee-single-set! . K10959) (bytevector-ieee-single-native-set! . K10958) (bytevector-ieee-single-native-ref . K10957) (bytevector-ieee-double-set! . K10956) (bytevector-ieee-double-ref . K10955) (bytevector-ieee-double-native-set! . K10954) (bytevector-ieee-double-native-ref . K10953) (bytevector-fill! . K10952) (bytevector-copy! . K10951) (bytevector-copy . K10950) (bytevector->uint-list . K10949) (bytevector->u8-list . K10948) (bytevector->sint-list . K10947) (endianness . K10619)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11302 '(rnrs unicode) '(6) '() '() '() '((string-upcase . K11215) (string-titlecase . K11214) (string-normalize-nfkd . K11213) (string-normalize-nfkc . K11212) (string-normalize-nfd . K11211) (string-normalize-nfc . K11210) (string-foldcase . K11209) (string-downcase . K11208) (string-ci>? . K11207) (string-ci>=? . K11206) (string-ci=? . K11205) (string-ci<? . K11204) (string-ci<=? . K11203) (char-whitespace? . K11202) (char-upper-case? . K11201) (char-title-case? . K11200) (char-numeric? . K11199) (char-lower-case? . K11198) (char-general-category . K11197) (char-upcase . K11196) (char-titlecase . K11195) (char-foldcase . K11194) (char-downcase . K11193) (char-ci>? . K11192) (char-ci>=? . K11191) (char-ci=? . K11190) (char-ci<? . K11189) (char-ci<=? . K11188) (char-alphabetic? . K11187)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11303 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . K11026) (raise-continuable . K11025) (raise . K11024) (guard . K10631) (else . K10623) (=> . K10622)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11304 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . K10855) (bitwise-reverse-bit-field . K10854) (bitwise-length . K10853) (bitwise-if . K10852) (bitwise-first-bit-set . K10851) (bitwise-copy-bit-field . K10850) (bitwise-copy-bit . K10849) (bitwise-bit-set? . K10848) (bitwise-bit-field . K10847) (bitwise-bit-count . K10846) (bitwise-xor . K10845) (bitwise-ior . K10844) (bitwise-and . K10843) (bitwise-not . K10842) (bitwise-arithmetic-shift-right . K10841) (bitwise-arithmetic-shift-left . K10840) (bitwise-arithmetic-shift . K10839)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11305 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . K10900) (fxxor . K10899) (fxrotate-bit-field . K10898) (fxreverse-bit-field . K10897) (fxpositive? . K10896) (fxodd? . K10895) (fxnot . K10894) (fxnegative? . K10893) (fxmod0 . K10892) (fxmod . K10891) (fxmin . K10890) (fxmax . K10889) (fxlength . K10888) (fxior . K10887) (fxif . K10886) (fxfirst-bit-set . K10885) (fxeven? . K10884) (fxdiv0-and-mod0 . K10883) (fxdiv0 . K10882) (fxdiv-and-mod . K10881) (fxdiv . K10880) (fxcopy-bit-field . K10879) (fxcopy-bit . K10878) (fxbit-set? . K10877) (fxbit-field . K10876) (fxbit-count . K10875) (fxarithmetic-shift-right . K10874) (fxarithmetic-shift-left . K10873) (fxarithmetic-shift . K10872) (fxand . K10871) (fx>? . K10870) (fx>=? . K10869) (fx=? . K10868) (fx<? . K10867) (fx<=? . K10866) (fx-/carry . K10865) (fx- . K10864) (fx+/carry . K10863) (fx+ . K10862) (fx*/carry . K10861) (fx* . K10860) (greatest-fixnum . K10859) (least-fixnum . K10858) (fixnum-width . K10857) (fixnum? . K10856)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11306 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . K10058) (no-infinities-violation? . K10037) (make-no-nans-violation . K10056) (make-no-infinities-violation . K10035) (real->flonum . K10946) (flzero? . K10945) (fltruncate . K10944) (fltan . K10943) (flsqrt . K10942) (flsin . K10941) (flround . K10940) (flpositive? . K10939) (flonum? . K10938) (flodd? . K10937) (flnumerator . K10936) (flnegative? . K10935) (flnan? . K10934) (flmod0 . K10933) (flmod . K10932) (flmin . K10931) (flmax . K10930) (fllog . K10929) (flinteger? . K10928) (flinfinite? . K10927) (flfloor . K10926) (flfinite? . K10925) (flexpt . K10924) (flexp . K10923) (fleven? . K10922) (fldiv0-and-mod0 . K10921) (fldiv0 . K10920) (fldiv-and-mod . K10919) (fldiv . K10918) (fldenominator . K10917) (flcos . K10916) (flceiling . K10915) (flatan . K10914) (flasin . K10913) (flacos . K10912) (flabs . K10911) (fl>? . K10910) (fl>=? . K10909) (fl=? . K10908) (fl<? . K10907) (fl<=? . K10906) (fl/ . K10905) (fl- . K10904) (fl+ . K10903) (fl* . K10902) (fixnum->flonum . K10901) (&no-nans . K10675) (&no-infinities . K10674)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11307 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . K11164) (string-ci-hash . K11163) (string-hash . K11162) (equal-hash . K11161) (hashtable-equivalence-function . K11160) (make-hashtable . K11159) (hashtable-hash-function . K11158) (make-eqv-hashtable . K11157) (make-eq-hashtable . K11156) (hashtable? . K11155) (hashtable-update! . K11154) (hashtable-size . K11153) (hashtable-set! . K11152) (hashtable-ref . K11151) (hashtable-mutable? . K11150) (hashtable-keys . K11149) (hashtable-entries . K11148) (hashtable-delete! . K11147) (hashtable-copy . K11146) (hashtable-contains? . K11145) (hashtable-clear! . K11144)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11308 '(rnrs io ports) '(6) '() '() '() '((eof-object? . K11128) (eof-object . K11127) (current-error-port . K11126) (current-output-port . K11125) (current-input-port . K11124) (output-port? . K11123) (input-port? . K11122) (utf-8-codec . K11121) (utf-16-codec . K11120) (transcoder-error-handling-mode . K11119) (transcoder-eol-style . K11118) (transcoder-codec . K11117) (transcoded-port . K11116) (textual-port? . K11115) (string->bytevector . K11114) (standard-output-port . K11113) (standard-input-port . K11112) (standard-error-port . K11111) (set-port-position! . K11110) (put-u8 . K11109) (put-string . K11108) (put-datum . K11107) (put-char . K11106) (put-bytevector . K11105) (port? . K11104) (port-transcoder . K11103) (port-position . K11102) (port-has-set-port-position!? . K11101) (port-has-port-position? . K11100) (port-eof? . K11099) (output-port-buffer-mode . K11098) (open-string-output-port . K11097) (open-string-input-port . K11096) (open-file-output-port . K11095) (open-file-input/output-port . K11094) (open-file-input-port . K11093) (open-bytevector-output-port . K11092) (open-bytevector-input-port . K11091) (native-transcoder . K11090) (native-eol-style . K11089) (make-transcoder . K11088) (latin-1-codec . K11087) (make-i/o-write-error . K9805) (make-i/o-read-error . K9784) (make-i/o-port-error . K9963) (make-i/o-invalid-position-error . K9827) (make-i/o-filename-error . K9853) (make-i/o-file-protection-error . K9878) (make-i/o-file-is-read-only-error . K9899) (make-i/o-file-does-not-exist-error . K9941) (make-i/o-file-already-exists-error . K9920) (make-i/o-error . K9763) (make-i/o-encoding-error . K10010) (make-i/o-decoding-error . K9988) (make-custom-textual-output-port . K11086) (make-custom-textual-input/output-port . K11085) (make-custom-textual-input-port . K11084) (make-custom-binary-output-port . K11083) (make-custom-binary-input/output-port . K11082) (make-custom-binary-input-port . K11081) (lookahead-u8 . K11079) (lookahead-char . K11078) (i/o-write-error? . K9807) (i/o-read-error? . K9786) (i/o-port-error? . K9967) (i/o-invalid-position-error? . K9831) (i/o-filename-error? . K9857) (i/o-file-protection-error? . K9880) (i/o-file-is-read-only-error? . K9901) (i/o-file-does-not-exist-error? . K9943) (i/o-file-already-exists-error? . K9922) (i/o-error? . K9765) (i/o-error-position . K9833) (i/o-error-port . K9969) (i/o-error-filename . K9859) (i/o-encoding-error? . K10014) (i/o-encoding-error-char . K10016) (i/o-decoding-error? . K9990) (get-u8 . K11077) (get-string-n! . K11076) (get-string-n . K11075) (get-string-all . K11074) (get-line . K11073) (get-datum . K11072) (get-char . K11071) (get-bytevector-some . K11070) (get-bytevector-n! . K11069) (get-bytevector-n . K11068) (get-bytevector-all . K11067) (flush-output-port . K11066) (close-port . K11065) (call-with-string-output-port . K11032) (call-with-port . K11031) (call-with-bytevector-output-port . K11030) (bytevector->string . K11029) (buffer-mode? . K11028) (binary-port? . K11027) (&i/o-encoding . K10673) (&i/o-decoding . K10672) (&i/o-port . K10671) (&i/o-file-does-not-exist . K10670) (&i/o-file-already-exists . K10669) (&i/o-file-is-read-only . K10668) (&i/o-file-protection . K10667) (&i/o-filename . K10666) (&i/o-invalid-position . K10665) (&i/o-write . K10664) (&i/o-read . K10663) (&i/o . K10662) (error-handling-mode . K10635) (file-options . K10634) (buffer-mode . K10633) (eol-style . K10632)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11309 '(rnrs enums) '(6) '() '() '() '((make-enumeration . K11023) (enum-set=? . K11022) (enum-set-universe . K11021) (enum-set-union . K11020) (enum-set-subset? . K11019) (enum-set-projection . K11018) (enum-set-member? . K11017) (enum-set-intersection . K11016) (enum-set-indexer . K11015) (enum-set-difference . K11014) (enum-set-constructor . K11013) (enum-set-complement . K11012) (enum-set->list . K11011) (define-enumeration . K10646)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11310 '(rnrs conditions) '(6) '() '() '() '((who-condition? . K9627) (warning? . K9493) (violation? . K9556) (undefined-violation? . K9744) (syntax-violation? . K9719) (syntax-violation-subform . K9723) (syntax-violation-form . K9721) (syntax-violation . K2992) (simple-conditions . K11010) (serious-condition? . K9514) (non-continuable-violation? . K9650) (message-condition? . K9470) (make-who-condition . K9623) (make-warning . K9491) (make-violation . K9554) (make-undefined-violation . K9742) (make-syntax-violation . K9713) (make-serious-condition . K9512) (make-non-continuable-violation . K9648) (make-message-condition . K9466) (make-lexical-violation . K9690) (make-irritants-condition . K9597) (make-implementation-restriction-violation . K9669) (make-error . K9533) (make-assertion-violation . K9575) (lexical-violation? . K9692) (irritants-condition? . K9601) (implementation-restriction-violation? . K9671) (error? . K9535) (condition-who . K9629) (condition-predicate . K11009) (condition-message . K9472) (condition-irritants . K9603) (condition-accessor . K11008) (condition . K11007) (assertion-violation? . K9577) (condition? . K11006) (&undefined . K10661) (&syntax . K10660) (&lexical . K10659) (&implementation-restriction . K10658) (&non-continuable . K10657) (&who . K10656) (&irritants . K10655) (&assertion . K10654) (&violation . K10653) (&error . K10652) (&serious . K10651) (&warning . K10650) (&message . K10649) (&condition . K10648) (define-condition-type . K10647)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11311 '(rnrs records inspection) '(6) '() '() '() '((record? . K11179) (record-type-uid . K11178) (record-type-sealed? . K11177) (record-type-parent . K11176) (record-type-opaque? . K11175) (record-type-name . K11174) (record-type-generative? . K11173) (record-type-field-names . K11172) (record-rtd . K11171) (record-field-mutable? . K11170)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11312 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . K11186) (record-predicate . K11185) (record-mutator . K11184) (record-constructor . K11183) (record-accessor . K11182) (make-record-type-descriptor . K11181) (make-record-constructor-descriptor . K11180)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11313 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . K10645) (parent-rtd . K10644) (nongenerative . K10643) (opaque . K10642) (sealed . K10641) (protocol . K10640) (parent . K10639) (immutable . K10638) (mutable . K10637) (fields . K10636) (record-constructor-descriptor . K10603) (record-type-descriptor . K10602)) '() values values '#f '#f '#t '#f) (K1787@K1440@install-library 'K11314 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . K10062) (&no-nans-rtd . K10060) (&no-infinities-rcd . K10041) (&no-infinities-rtd . K10039) (&i/o-encoding-rcd . K10020) (&i/o-encoding-rtd . K10018) (&i/o-decoding-rcd . K9994) (&i/o-decoding-rtd . K9992) (&i/o-port-rcd . K9973) (&i/o-port-rtd . K9971) (&i/o-file-does-not-exist-rcd . K9947) (&i/o-file-does-not-exist-rtd . K9945) (&i/o-file-already-exists-rcd . K9926) (&i/o-file-already-exists-rtd . K9924) (&i/o-file-is-read-only-rcd . K9905) (&i/o-file-is-read-only-rtd . K9903) (&i/o-file-protection-rcd . K9884) (&i/o-file-protection-rtd . K9882) (&i/o-filename-rcd . K9863) (&i/o-filename-rtd . K9861) (&i/o-invalid-position-rcd . K9837) (&i/o-invalid-position-rtd . K9835) (&i/o-write-rcd . K9811) (&i/o-write-rtd . K9809) (&i/o-read-rcd . K9790) (&i/o-read-rtd . K9788) (&i/o-rcd . K9769) (&i/o-rtd . K9767) (&undefined-rcd . K9748) (&undefined-rtd . K9746) (&syntax-rcd . K9727) (&syntax-rtd . K9725) (&lexical-rcd . K9696) (&lexical-rtd . K9694) (&implementation-restriction-rcd . K9675) (&implementation-restriction-rtd . K9673) (&non-continuable-rcd . K9654) (&non-continuable-rtd . K9652) (&who-rcd . K9633) (&who-rtd . K9631) (&irritants-rcd . K9607) (&irritants-rtd . K9605) (&assertion-rcd . K9581) (&assertion-rtd . K9579) (&violation-rcd . K9560) (&violation-rtd . K9558) (&error-rcd . K9539) (&error-rtd . K9537) (&serious-rcd . K9518) (&serious-rtd . K9516) (&warning-rcd . K9497) (&warning-rtd . K9495) (&message-rcd . K9476) (&message-rtd . K9474) (&condition-rcd . K9385) (&condition-rtd . K9383) (syntax-error . K2988) (syntax-dispatch . K2757) (pretty-print . K11282) (eval-core . K11281) (set-symbol-value! . K11280) (symbol-value . K11279) (gensym . K910) (void . K11278) (load . K10331) (interaction-environment . K3004) (char-ready? . K11277) (regexp? . K11276) (read-line . K11275) (ungensym . K11274) (alist->eq-hash-table . K11273) (assoc-ref . K11272) (print . K11271) (format . K11270) (host-os . K11269) (library-path . K1407) (standard-library-path . K11268) (file-newer? . K11267) (stat-mtime . K11266) (write-to-file . K11265) (file->list . K11264) (file->string . K11263) (digit->integer . K11262) (call-with-string-input-port . K11261) (call-with-string-io . K11260) (string-split . K11259) (bytevector-for-each . K11258) (string->regexp . K11257) (rxmatch . K11256) (regexp-replace-all . K11255) (hashtable-for-each . K11254) (call-process . K11253) (local-tz-offset . K11252) (microseconds . K11251) (readdir . K11250) (set-current-directory! . K11249) (expand-path . K11248) (current-directory . K11247) (%spawn . K11246) (%waitpid . K11245) (%ffi-supported? . K11244) (%ffi-pointer-ref . K11243) (%ffi-pointer->string . K11242) (%ffi-call->string-or-zero . K11241) (%ffi-call->double . K11240) (%ffi-call->void* . K11239) (%ffi-call->void . K11238) (%ffi-call->int . K11237) (%ffi-lookup . K11236) (%ffi-open . K11235) (%fork . K11234) (%pipe . K11233) (p . K11232) (open-output-string . K11231) (get-output-string . K11230) (get-environment-variables . K11229) (get-environment-variable . K11228) (get-timeofday . K11227) (get-command-line . K11226) (sys-display . K11225) (source-info . K11224) (make-compiler-instruction . K11223) (make-instruction . K11222) (set-source-info! . K11221) (bignum? . K11220) (fast-equal? . K11219) (fasl-read . K11218) (fasl-write . K11217) (time-usage . K11216) (make-parameter . K938) (string-upcase . K11215) (string-titlecase . K11214) (string-normalize-nfkd . K11213) (string-normalize-nfkc . K11212) (string-normalize-nfd . K11211) (string-normalize-nfc . K11210) (string-foldcase . K11209) (string-downcase . K11208) (string-ci>? . K11207) (string-ci>=? . K11206) (string-ci=? . K11205) (string-ci<? . K11204) (string-ci<=? . K11203) (char-whitespace? . K11202) (char-upper-case? . K11201) (char-title-case? . K11200) (char-numeric? . K11199) (char-lower-case? . K11198) (char-general-category . K11197) (char-upcase . K11196) (char-titlecase . K11195) (char-foldcase . K11194) (char-downcase . K11193) (char-ci>? . K11192) (char-ci>=? . K11191) (char-ci=? . K11190) (char-ci<? . K11189) (char-ci<=? . K11188) (char-alphabetic? . K11187) (make-variable-transformer . K2316) (identifier? . K2994) (generate-temporaries . K2974) (free-identifier=? . K2976) (syntax->datum . K2998) (datum->syntax . K2996) (bound-identifier=? . K2978) (record-type-descriptor? . K11186) (record-predicate . K11185) (record-mutator . K11184) (record-constructor . K11183) (record-accessor . K11182) (make-record-type-descriptor . K11181) (make-record-constructor-descriptor . K11180) (record? . K11179) (record-type-uid . K11178) (record-type-sealed? . K11177) (record-type-parent . K11176) (record-type-opaque? . K11175) (record-type-name . K11174) (record-type-generative? . K11173) (record-type-field-names . K11172) (record-rtd . K11171) (record-field-mutable? . K11170) (delete-file . K11169) (file-exists? . K11168) (vector-sort! . K11167) (vector-sort . K11166) (list-sort . K11165) (symbol-hash . K11164) (string-ci-hash . K11163) (string-hash . K11162) (equal-hash . K11161) (hashtable-equivalence-function . K11160) (make-hashtable . K11159) (hashtable-hash-function . K11158) (make-eqv-hashtable . K11157) (make-eq-hashtable . K11156) (hashtable? . K11155) (hashtable-update! . K11154) (hashtable-size . K11153) (hashtable-set! . K11152) (hashtable-ref . K11151) (hashtable-mutable? . K11150) (hashtable-keys . K11149) (hashtable-entries . K11148) (hashtable-delete! . K11147) (hashtable-copy . K11146) (hashtable-contains? . K11145) (hashtable-clear! . K11144) (call-with-output-file . K11143) (call-with-input-file . K11142) (write-char . K11141) (write . K11140) (with-output-to-file . K11139) (with-input-from-file . K11138) (read-char . K11137) (read . K11136) (peek-char . K11135) (open-output-file . K11134) (open-input-file . K11133) (newline . K11132) (display . K11131) (close-output-port . K11130) (close-input-port . K11129) (eof-object? . K11128) (eof-object . K11127) (current-error-port . K11126) (current-output-port . K11125) (current-input-port . K11124) (output-port? . K11123) (input-port? . K11122) (utf-8-codec . K11121) (utf-16-codec . K11120) (transcoder-error-handling-mode . K11119) (transcoder-eol-style . K11118) (transcoder-codec . K11117) (transcoded-port . K11116) (textual-port? . K11115) (string->bytevector . K11114) (standard-output-port . K11113) (standard-input-port . K11112) (standard-error-port . K11111) (set-port-position! . K11110) (put-u8 . K11109) (put-string . K11108) (put-datum . K11107) (put-char . K11106) (put-bytevector . K11105) (port? . K11104) (port-transcoder . K11103) (port-position . K11102) (port-has-set-port-position!? . K11101) (port-has-port-position? . K11100) (port-eof? . K11099) (output-port-buffer-mode . K11098) (open-string-output-port . K11097) (open-string-input-port . K11096) (open-file-output-port . K11095) (open-file-input/output-port . K11094) (open-file-input-port . K11093) (open-bytevector-output-port . K11092) (open-bytevector-input-port . K11091) (native-transcoder . K11090) (native-eol-style . K11089) (make-transcoder . K11088) (latin-1-codec . K11087) (make-i/o-write-error . K9805) (make-i/o-read-error . K9784) (make-i/o-port-error . K9963) (make-i/o-invalid-position-error . K9827) (make-i/o-filename-error . K9853) (make-i/o-file-protection-error . K9878) (make-i/o-file-is-read-only-error . K9899) (make-i/o-file-does-not-exist-error . K9941) (make-i/o-file-already-exists-error . K9920) (make-i/o-error . K9763) (make-i/o-encoding-error . K10010) (make-i/o-decoding-error . K9988) (make-custom-textual-output-port . K11086) (make-custom-textual-input/output-port . K11085) (make-custom-textual-input-port . K11084) (make-custom-binary-output-port . K11083) (make-custom-binary-input/output-port . K11082) (make-custom-binary-input-port . K11081) (make-bytevector . K11080) (lookahead-u8 . K11079) (lookahead-char . K11078) (i/o-write-error? . K9807) (i/o-read-error? . K9786) (i/o-port-error? . K9967) (i/o-invalid-position-error? . K9831) (i/o-filename-error? . K9857) (i/o-file-protection-error? . K9880) (i/o-file-is-read-only-error? . K9901) (i/o-file-does-not-exist-error? . K9943) (i/o-file-already-exists-error? . K9922) (i/o-error? . K9765) (i/o-error-position . K9833) (i/o-error-port . K9969) (i/o-error-filename . K9859) (i/o-encoding-error? . K10014) (i/o-encoding-error-char . K10016) (i/o-decoding-error? . K9990) (get-u8 . K11077) (get-string-n! . K11076) (get-string-n . K11075) (get-string-all . K11074) (get-line . K11073) (get-datum . K11072) (get-char . K11071) (get-bytevector-some . K11070) (get-bytevector-n! . K11069) (get-bytevector-n . K11068) (get-bytevector-all . K11067) (flush-output-port . K11066) (close-port . K11065) (scheme-report-environment . K2956) (quotient . K11064) (null-environment . K2954) (remainder . K11063) (modulo . K11062) (inexact->exact . K11061) (force . K11060) (exact->inexact . K11059) (make-promise . K11058) (exit . K11057) (command-line . K10325) (string-fill! . K11056) (string-set! . K11055) (set-cdr! . K11054) (set-car! . K11053) (remove . K11052) (remv . K11051) (remp . K11050) (remq . K11049) (partition . K11048) (memv . K11047) (memq . K11046) (memp . K11045) (member . K11044) (exists . K11043) (for-all . K11042) (fold-right . K11041) (fold-left . K11040) (find . K11039) (filter . K11038) (cons* . K11037) (assv . K11036) (assq . K11035) (assp . K11034) (assoc . K11033) (call-with-string-output-port . K11032) (call-with-port . K11031) (call-with-bytevector-output-port . K11030) (bytevector->string . K11029) (buffer-mode? . K11028) (binary-port? . K11027) (with-exception-handler . K11026) (raise-continuable . K11025) (raise . K11024) (eval . K2960) (environment . K2952) (make-enumeration . K11023) (enum-set=? . K11022) (enum-set-universe . K11021) (enum-set-union . K11020) (enum-set-subset? . K11019) (enum-set-projection . K11018) (enum-set-member? . K11017) (enum-set-intersection . K11016) (enum-set-indexer . K11015) (enum-set-difference . K11014) (enum-set-constructor . K11013) (enum-set-complement . K11012) (enum-set->list . K11011) (who-condition? . K9627) (warning? . K9493) (violation? . K9556) (undefined-violation? . K9744) (syntax-violation? . K9719) (syntax-violation-subform . K9723) (syntax-violation-form . K9721) (syntax-violation . K2992) (simple-conditions . K11010) (serious-condition? . K9514) (non-continuable-violation? . K9650) (message-condition? . K9470) (make-who-condition . K9623) (make-warning . K9491) (make-violation . K9554) (make-undefined-violation . K9742) (make-syntax-violation . K9713) (make-serious-condition . K9512) (make-non-continuable-violation . K9648) (make-message-condition . K9466) (make-lexical-violation . K9690) (make-irritants-condition . K9597) (make-implementation-restriction-violation . K9669) (make-error . K9533) (make-assertion-violation . K9575) (lexical-violation? . K9692) (irritants-condition? . K9601) (implementation-restriction-violation? . K9671) (error? . K9535) (condition-who . K9629) (condition-predicate . K11009) (condition-message . K9472) (condition-irritants . K9603) (condition-accessor . K11008) (condition . K11007) (assertion-violation? . K9577) (condition? . K11006) (utf32->string . K11005) (utf16->string . K11004) (utf8->string . K11003) (uint-list->bytevector . K11002) (u8-list->bytevector . K11001) (string->utf8 . K11000) (string->utf32 . K10999) (string->utf16 . K10998) (sint-list->bytevector . K10997) (native-endianness . K10996) (bytevector? . K10995) (bytevector=? . K10994) (bytevector-uint-set! . K10993) (bytevector-uint-ref . K10992) (bytevector-u8-set! . K10991) (bytevector-u8-ref . K10990) (bytevector-u64-set! . K10989) (bytevector-u64-ref . K10988) (bytevector-u64-native-set! . K10987) (bytevector-u64-native-ref . K10986) (bytevector-u32-set! . K10985) (bytevector-u32-ref . K10984) (bytevector-u32-native-set! . K10983) (bytevector-u32-native-ref . K10982) (bytevector-u16-set! . K10981) (bytevector-u16-ref . K10980) (bytevector-u16-native-set! . K10979) (bytevector-u16-native-ref . K10978) (bytevector-sint-set! . K10977) (bytevector-sint-ref . K10976) (bytevector-s8-set! . K10975) (bytevector-s8-ref . K10974) (bytevector-s64-set! . K10973) (bytevector-s64-ref . K10972) (bytevector-s64-native-set! . K10971) (bytevector-s64-native-ref . K10970) (bytevector-s32-set! . K10969) (bytevector-s32-ref . K10968) (bytevector-s32-native-set! . K10967) (bytevector-s32-native-ref . K10966) (bytevector-s16-set! . K10965) (bytevector-s16-ref . K10964) (bytevector-s16-native-set! . K10963) (bytevector-s16-native-ref . K10962) (bytevector-length . K10961) (bytevector-ieee-single-ref . K10960) (bytevector-ieee-single-set! . K10959) (bytevector-ieee-single-native-set! . K10958) (bytevector-ieee-single-native-ref . K10957) (bytevector-ieee-double-set! . K10956) (bytevector-ieee-double-ref . K10955) (bytevector-ieee-double-native-set! . K10954) (bytevector-ieee-double-native-ref . K10953) (bytevector-fill! . K10952) (bytevector-copy! . K10951) (bytevector-copy . K10950) (bytevector->uint-list . K10949) (bytevector->u8-list . K10948) (bytevector->sint-list . K10947) (no-nans-violation? . K10058) (no-infinities-violation? . K10037) (make-no-nans-violation . K10056) (make-no-infinities-violation . K10035) (real->flonum . K10946) (flzero? . K10945) (fltruncate . K10944) (fltan . K10943) (flsqrt . K10942) (flsin . K10941) (flround . K10940) (flpositive? . K10939) (flonum? . K10938) (flodd? . K10937) (flnumerator . K10936) (flnegative? . K10935) (flnan? . K10934) (flmod0 . K10933) (flmod . K10932) (flmin . K10931) (flmax . K10930) (fllog . K10929) (flinteger? . K10928) (flinfinite? . K10927) (flfloor . K10926) (flfinite? . K10925) (flexpt . K10924) (flexp . K10923) (fleven? . K10922) (fldiv0-and-mod0 . K10921) (fldiv0 . K10920) (fldiv-and-mod . K10919) (fldiv . K10918) (fldenominator . K10917) (flcos . K10916) (flceiling . K10915) (flatan . K10914) (flasin . K10913) (flacos . K10912) (flabs . K10911) (fl>? . K10910) (fl>=? . K10909) (fl=? . K10908) (fl<? . K10907) (fl<=? . K10906) (fl/ . K10905) (fl- . K10904) (fl+ . K10903) (fl* . K10902) (fixnum->flonum . K10901) (fxzero? . K10900) (fxxor . K10899) (fxrotate-bit-field . K10898) (fxreverse-bit-field . K10897) (fxpositive? . K10896) (fxodd? . K10895) (fxnot . K10894) (fxnegative? . K10893) (fxmod0 . K10892) (fxmod . K10891) (fxmin . K10890) (fxmax . K10889) (fxlength . K10888) (fxior . K10887) (fxif . K10886) (fxfirst-bit-set . K10885) (fxeven? . K10884) (fxdiv0-and-mod0 . K10883) (fxdiv0 . K10882) (fxdiv-and-mod . K10881) (fxdiv . K10880) (fxcopy-bit-field . K10879) (fxcopy-bit . K10878) (fxbit-set? . K10877) (fxbit-field . K10876) (fxbit-count . K10875) (fxarithmetic-shift-right . K10874) (fxarithmetic-shift-left . K10873) (fxarithmetic-shift . K10872) (fxand . K10871) (fx>? . K10870) (fx>=? . K10869) (fx=? . K10868) (fx<? . K10867) (fx<=? . K10866) (fx-/carry . K10865) (fx- . K10864) (fx+/carry . K10863) (fx+ . K10862) (fx*/carry . K10861) (fx* . K10860) (greatest-fixnum . K10859) (least-fixnum . K10858) (fixnum-width . K10857) (fixnum? . K10856) (bitwise-rotate-bit-field . K10855) (bitwise-reverse-bit-field . K10854) (bitwise-length . K10853) (bitwise-if . K10852) (bitwise-first-bit-set . K10851) (bitwise-copy-bit-field . K10850) (bitwise-copy-bit . K10849) (bitwise-bit-set? . K10848) (bitwise-bit-field . K10847) (bitwise-bit-count . K10846) (bitwise-xor . K10845) (bitwise-ior . K10844) (bitwise-and . K10843) (bitwise-not . K10842) (bitwise-arithmetic-shift-right . K10841) (bitwise-arithmetic-shift-left . K10840) (bitwise-arithmetic-shift . K10839) (zero? . K10838) (vector? . K10837) (vector-set! . K10836) (vector-ref . K10835) (vector-map . K10834) (vector-length . K10833) (vector-for-each . K10832) (vector-fill! . K10831) (vector->list . K10830) (vector . K10829) (values . K10828) (truncate . K10827) (tan . K10826) (symbol? . K10825) (symbol=? . K10824) (symbol->string . K10823) (substring . K10822) (string? . K10821) (string>? . K10820) (string>=? . K10819) (string=? . K10818) (string<? . K10817) (string<=? . K10816) (string-ref . K10815) (string-length . K10814) (string-for-each . K10813) (string-copy . K10812) (string-append . K10811) (string->symbol . K10810) (string->number . K10809) (string->list . K10808) (string . K10807) (sqrt . K10806) (sin . K10805) (round . K10804) (reverse . K10803) (real? . K10802) (real-valued? . K10801) (real-part . K10800) (rationalize . K10799) (rational? . K10798) (rational-valued? . K10797) (procedure? . K10796) (positive? . K10795) (pair? . K10794) (odd? . K10793) (numerator . K10792) (number? . K10791) (number->string . K10790) (null? . K10789) (not . K10788) (negative? . K10787) (nan? . K10786) (min . K10785) (max . K10784) (map . K10783) (make-vector . K10782) (make-string . K10781) (make-rectangular . K10780) (make-polar . K10779) (magnitude . K10778) (log . K10777) (list? . K10776) (list-tail . K10775) (list-ref . K10774) (list->vector . K10773) (list->string . K10772) (list . K10771) (length . K10770) (lcm . K10769) (integer? . K10768) (integer-valued? . K10767) (integer->char . K10766) (infinite? . K10765) (inexact? . K10764) (inexact . K10763) (imag-part . K10762) (gcd . K10761) (for-each . K10760) (floor . K10759) (finite? . K10758) (expt . K10757) (exp . K10756) (exact? . K10755) (exact-integer-sqrt . K10754) (exact . K10753) (even? . K10752) (error . K10751) (eqv? . K10750) (equal? . K10749) (eq? . K10748) (dynamic-wind . K10747) (div0-and-mod0 . K10746) (mod0 . K10745) (div0 . K10744) (div-and-mod . K10743) (mod . K10742) (div . K10741) (denominator . K10740) (cos . K10739) (cons . K10738) (complex? . K10737) (char? . K10736) (char>? . K10735) (char>=? . K10734) (char=? . K10733) (char<? . K10732) (char<=? . K10731) (char->integer . K10730) (ceiling . K10729) (call-with-values . K10728) (call/cc . K10727) (call-with-current-continuation . K10726) (cddddr . K10725) (cdddar . K10724) (cddadr . K10723) (cddaar . K10722) (cdaddr . K10721) (cdadar . K10720) (cdaadr . K10719) (cdaaar . K10718) (cadddr . K10717) (caddar . K10716) (cadadr . K10715) (cadaar . K10714) (caaddr . K10713) (caadar . K10712) (caaadr . K10711) (caaaar . K10710) (cdddr . K10709) (cddar . K10708) (cdadr . K10707) (cdaar . K10706) (caddr . K10705) (cadar . K10704) (caadr . K10703) (caaar . K10702) (cddr . K10701) (cdar . K10700) (cadr . K10699) (caar . K10698) (cdr . K10697) (car . K10696) (boolean? . K10695) (boolean=? . K10694) (atan . K10693) (assertion-violation . K10692) (asin . K10691) (apply . K10690) (append . K10689) (angle . K10688) (acos . K10687) (abs . K10686) (/ . K10685) (* . K10684) (- . K10683) (+ . K10682) (>= . K10681) (> . K10680) (= . K10679) (<= . K10678) (< . K10677) (library . K10676) (&no-nans . K10675) (&no-infinities . K10674) (&i/o-encoding . K10673) (&i/o-decoding . K10672) (&i/o-port . K10671) (&i/o-file-does-not-exist . K10670) (&i/o-file-already-exists . K10669) (&i/o-file-is-read-only . K10668) (&i/o-file-protection . K10667) (&i/o-filename . K10666) (&i/o-invalid-position . K10665) (&i/o-write . K10664) (&i/o-read . K10663) (&i/o . K10662) (&undefined . K10661) (&syntax . K10660) (&lexical . K10659) (&implementation-restriction . K10658) (&non-continuable . K10657) (&who . K10656) (&irritants . K10655) (&assertion . K10654) (&violation . K10653) (&error . K10652) (&serious . K10651) (&warning . K10650) (&message . K10649) (&condition . K10648) (define-condition-type . K10647) (define-enumeration . K10646) (define-record-type . K10645) (parent-rtd . K10644) (nongenerative . K10643) (opaque . K10642) (sealed . K10641) (protocol . K10640) (parent . K10639) (immutable . K10638) (mutable . K10637) (fields . K10636) (error-handling-mode . K10635) (file-options . K10634) (buffer-mode . K10633) (eol-style . K10632) (guard . K10631) (trace-define . K10630) (trace-lambda . K10629) (unsyntax-splicing . K10628) (unsyntax . K10627) (unquote-splicing . K10626) (unquote . K10625) (_ . K10624) (else . K10623) (=> . K10622) (... . K10621) (assert . K10620) (endianness . K10619) (delay . K10618) (time . K10617) (do . K10616) (cond . K10615) (let* . K10614) (let . K10613) (let*-values . K10612) (let-values . K10611) (identifier-syntax . K10610) (with-syntax . K10609) (quasisyntax . K10608) (quasiquote . K10607) (syntax-rules . K10606) (include . K10605) (define-struct . K10604) (record-constructor-descriptor . K10603) (record-type-descriptor . K10602) (case . K10601) (parameterize . K10600) (unless . K10599) (when . K10598) (or . K10597) (and . K10596) (if . K10595) (letrec* . K10594) (letrec . K10593) (type-descriptor . K10592) (case-lambda . K10591) (lambda . K10590) (syntax . K10589) (syntax-case . K10588) (quote . K10587) (foreign-call . K10586) (letrec-syntax . K10585) (let-syntax . K10584) (set! . K10583) (import . K10582) (begin . K10581) (module . K10580) (define-syntax . K10579) (define . K10578)) '((K10062 core-prim . &no-nans-rcd) (K10060 core-prim . &no-nans-rtd) (K10041 core-prim . &no-infinities-rcd) (K10039 core-prim . &no-infinities-rtd) (K10020 core-prim . &i/o-encoding-rcd) (K10018 core-prim . &i/o-encoding-rtd) (K9994 core-prim . &i/o-decoding-rcd) (K9992 core-prim . &i/o-decoding-rtd) (K9973 core-prim . &i/o-port-rcd) (K9971 core-prim . &i/o-port-rtd) (K9947 core-prim . &i/o-file-does-not-exist-rcd) (K9945 core-prim . &i/o-file-does-not-exist-rtd) (K9926 core-prim . &i/o-file-already-exists-rcd) (K9924 core-prim . &i/o-file-already-exists-rtd) (K9905 core-prim . &i/o-file-is-read-only-rcd) (K9903 core-prim . &i/o-file-is-read-only-rtd) (K9884 core-prim . &i/o-file-protection-rcd) (K9882 core-prim . &i/o-file-protection-rtd) (K9863 core-prim . &i/o-filename-rcd) (K9861 core-prim . &i/o-filename-rtd) (K9837 core-prim . &i/o-invalid-position-rcd) (K9835 core-prim . &i/o-invalid-position-rtd) (K9811 core-prim . &i/o-write-rcd) (K9809 core-prim . &i/o-write-rtd) (K9790 core-prim . &i/o-read-rcd) (K9788 core-prim . &i/o-read-rtd) (K9769 core-prim . &i/o-rcd) (K9767 core-prim . &i/o-rtd) (K9748 core-prim . &undefined-rcd) (K9746 core-prim . &undefined-rtd) (K9727 core-prim . &syntax-rcd) (K9725 core-prim . &syntax-rtd) (K9696 core-prim . &lexical-rcd) (K9694 core-prim . &lexical-rtd) (K9675 core-prim . &implementation-restriction-rcd) (K9673 core-prim . &implementation-restriction-rtd) (K9654 core-prim . &non-continuable-rcd) (K9652 core-prim . &non-continuable-rtd) (K9633 core-prim . &who-rcd) (K9631 core-prim . &who-rtd) (K9607 core-prim . &irritants-rcd) (K9605 core-prim . &irritants-rtd) (K9581 core-prim . &assertion-rcd) (K9579 core-prim . &assertion-rtd) (K9560 core-prim . &violation-rcd) (K9558 core-prim . &violation-rtd) (K9539 core-prim . &error-rcd) (K9537 core-prim . &error-rtd) (K9518 core-prim . &serious-rcd) (K9516 core-prim . &serious-rtd) (K9497 core-prim . &warning-rcd) (K9495 core-prim . &warning-rtd) (K9476 core-prim . &message-rcd) (K9474 core-prim . &message-rtd) (K9385 core-prim . &condition-rcd) (K9383 core-prim . &condition-rtd) (K2988 core-prim . syntax-error) (K2757 core-prim . syntax-dispatch) (K11282 core-prim . pretty-print) (K11281 core-prim . eval-core) (K11280 core-prim . set-symbol-value!) (K11279 core-prim . symbol-value) (K910 core-prim . gensym) (K11278 core-prim . void) (K10331 core-prim . load) (K3004 core-prim . interaction-environment) (K11277 core-prim . char-ready?) (K11276 core-prim . regexp?) (K11275 core-prim . read-line) (K11274 core-prim . ungensym) (K11273 core-prim . alist->eq-hash-table) (K11272 core-prim . assoc-ref) (K11271 core-prim . print) (K11270 core-prim . format) (K11269 core-prim . host-os) (K1407 core-prim . library-path) (K11268 core-prim . standard-library-path) (K11267 core-prim . file-newer?) (K11266 core-prim . stat-mtime) (K11265 core-prim . write-to-file) (K11264 core-prim . file->list) (K11263 core-prim . file->string) (K11262 core-prim . digit->integer) (K11261 core-prim . call-with-string-input-port) (K11260 core-prim . call-with-string-io) (K11259 core-prim . string-split) (K11258 core-prim . bytevector-for-each) (K11257 core-prim . string->regexp) (K11256 core-prim . rxmatch) (K11255 core-prim . regexp-replace-all) (K11254 core-prim . hashtable-for-each) (K11253 core-prim . call-process) (K11252 core-prim . local-tz-offset) (K11251 core-prim . microseconds) (K11250 core-prim . readdir) (K11249 core-prim . set-current-directory!) (K11248 core-prim . expand-path) (K11247 core-prim . current-directory) (K11246 core-prim . %spawn) (K11245 core-prim . %waitpid) (K11244 core-prim . %ffi-supported?) (K11243 core-prim . %ffi-pointer-ref) (K11242 core-prim . %ffi-pointer->string) (K11241 core-prim . %ffi-call->string-or-zero) (K11240 core-prim . %ffi-call->double) (K11239 core-prim . %ffi-call->void*) (K11238 core-prim . %ffi-call->void) (K11237 core-prim . %ffi-call->int) (K11236 core-prim . %ffi-lookup) (K11235 core-prim . %ffi-open) (K11234 core-prim . %fork) (K11233 core-prim . %pipe) (K11232 core-prim . p) (K11231 core-prim . open-output-string) (K11230 core-prim . get-output-string) (K11229 core-prim . get-environment-variables) (K11228 core-prim . get-environment-variable) (K11227 core-prim . get-timeofday) (K11226 core-prim . get-command-line) (K11225 core-prim . sys-display) (K11224 core-prim . source-info) (K11223 core-prim . make-compiler-instruction) (K11222 core-prim . make-instruction) (K11221 core-prim . set-source-info!) (K11220 core-prim . bignum?) (K11219 core-prim . fast-equal?) (K11218 core-prim . fasl-read) (K11217 core-prim . fasl-write) (K11216 core-prim . time-usage) (K938 core-prim . make-parameter) (K11215 core-prim . string-upcase) (K11214 core-prim . string-titlecase) (K11213 core-prim . string-normalize-nfkd) (K11212 core-prim . string-normalize-nfkc) (K11211 core-prim . string-normalize-nfd) (K11210 core-prim . string-normalize-nfc) (K11209 core-prim . string-foldcase) (K11208 core-prim . string-downcase) (K11207 core-prim . string-ci>?) (K11206 core-prim . string-ci>=?) (K11205 core-prim . string-ci=?) (K11204 core-prim . string-ci<?) (K11203 core-prim . string-ci<=?) (K11202 core-prim . char-whitespace?) (K11201 core-prim . char-upper-case?) (K11200 core-prim . char-title-case?) (K11199 core-prim . char-numeric?) (K11198 core-prim . char-lower-case?) (K11197 core-prim . char-general-category) (K11196 core-prim . char-upcase) (K11195 core-prim . char-titlecase) (K11194 core-prim . char-foldcase) (K11193 core-prim . char-downcase) (K11192 core-prim . char-ci>?) (K11191 core-prim . char-ci>=?) (K11190 core-prim . char-ci=?) (K11189 core-prim . char-ci<?) (K11188 core-prim . char-ci<=?) (K11187 core-prim . char-alphabetic?) (K2316 core-prim . make-variable-transformer) (K2994 core-prim . identifier?) (K2974 core-prim . generate-temporaries) (K2976 core-prim . free-identifier=?) (K2998 core-prim . syntax->datum) (K2996 core-prim . datum->syntax) (K2978 core-prim . bound-identifier=?) (K11186 core-prim . record-type-descriptor?) (K11185 core-prim . record-predicate) (K11184 core-prim . record-mutator) (K11183 core-prim . record-constructor) (K11182 core-prim . record-accessor) (K11181 core-prim . make-record-type-descriptor) (K11180 core-prim . make-record-constructor-descriptor) (K11179 core-prim . record?) (K11178 core-prim . record-type-uid) (K11177 core-prim . record-type-sealed?) (K11176 core-prim . record-type-parent) (K11175 core-prim . record-type-opaque?) (K11174 core-prim . record-type-name) (K11173 core-prim . record-type-generative?) (K11172 core-prim . record-type-field-names) (K11171 core-prim . record-rtd) (K11170 core-prim . record-field-mutable?) (K11169 core-prim . delete-file) (K11168 core-prim . file-exists?) (K11167 core-prim . vector-sort!) (K11166 core-prim . vector-sort) (K11165 core-prim . list-sort) (K11164 core-prim . symbol-hash) (K11163 core-prim . string-ci-hash) (K11162 core-prim . string-hash) (K11161 core-prim . equal-hash) (K11160 core-prim . hashtable-equivalence-function) (K11159 core-prim . make-hashtable) (K11158 core-prim . hashtable-hash-function) (K11157 core-prim . make-eqv-hashtable) (K11156 core-prim . make-eq-hashtable) (K11155 core-prim . hashtable?) (K11154 core-prim . hashtable-update!) (K11153 core-prim . hashtable-size) (K11152 core-prim . hashtable-set!) (K11151 core-prim . hashtable-ref) (K11150 core-prim . hashtable-mutable?) (K11149 core-prim . hashtable-keys) (K11148 core-prim . hashtable-entries) (K11147 core-prim . hashtable-delete!) (K11146 core-prim . hashtable-copy) (K11145 core-prim . hashtable-contains?) (K11144 core-prim . hashtable-clear!) (K11143 core-prim . call-with-output-file) (K11142 core-prim . call-with-input-file) (K11141 core-prim . write-char) (K11140 core-prim . write) (K11139 core-prim . with-output-to-file) (K11138 core-prim . with-input-from-file) (K11137 core-prim . read-char) (K11136 core-prim . read) (K11135 core-prim . peek-char) (K11134 core-prim . open-output-file) (K11133 core-prim . open-input-file) (K11132 core-prim . newline) (K11131 core-prim . display) (K11130 core-prim . close-output-port) (K11129 core-prim . close-input-port) (K11128 core-prim . eof-object?) (K11127 core-prim . eof-object) (K11126 core-prim . current-error-port) (K11125 core-prim . current-output-port) (K11124 core-prim . current-input-port) (K11123 core-prim . output-port?) (K11122 core-prim . input-port?) (K11121 core-prim . utf-8-codec) (K11120 core-prim . utf-16-codec) (K11119 core-prim . transcoder-error-handling-mode) (K11118 core-prim . transcoder-eol-style) (K11117 core-prim . transcoder-codec) (K11116 core-prim . transcoded-port) (K11115 core-prim . textual-port?) (K11114 core-prim . string->bytevector) (K11113 core-prim . standard-output-port) (K11112 core-prim . standard-input-port) (K11111 core-prim . standard-error-port) (K11110 core-prim . set-port-position!) (K11109 core-prim . put-u8) (K11108 core-prim . put-string) (K11107 core-prim . put-datum) (K11106 core-prim . put-char) (K11105 core-prim . put-bytevector) (K11104 core-prim . port?) (K11103 core-prim . port-transcoder) (K11102 core-prim . port-position) (K11101 core-prim . port-has-set-port-position!?) (K11100 core-prim . port-has-port-position?) (K11099 core-prim . port-eof?) (K11098 core-prim . output-port-buffer-mode) (K11097 core-prim . open-string-output-port) (K11096 core-prim . open-string-input-port) (K11095 core-prim . open-file-output-port) (K11094 core-prim . open-file-input/output-port) (K11093 core-prim . open-file-input-port) (K11092 core-prim . open-bytevector-output-port) (K11091 core-prim . open-bytevector-input-port) (K11090 core-prim . native-transcoder) (K11089 core-prim . native-eol-style) (K11088 core-prim . make-transcoder) (K11087 core-prim . latin-1-codec) (K9805 core-prim . make-i/o-write-error) (K9784 core-prim . make-i/o-read-error) (K9963 core-prim . make-i/o-port-error) (K9827 core-prim . make-i/o-invalid-position-error) (K9853 core-prim . make-i/o-filename-error) (K9878 core-prim . make-i/o-file-protection-error) (K9899 core-prim . make-i/o-file-is-read-only-error) (K9941 core-prim . make-i/o-file-does-not-exist-error) (K9920 core-prim . make-i/o-file-already-exists-error) (K9763 core-prim . make-i/o-error) (K10010 core-prim . make-i/o-encoding-error) (K9988 core-prim . make-i/o-decoding-error) (K11086 core-prim . make-custom-textual-output-port) (K11085 core-prim . make-custom-textual-input/output-port) (K11084 core-prim . make-custom-textual-input-port) (K11083 core-prim . make-custom-binary-output-port) (K11082 core-prim . make-custom-binary-input/output-port) (K11081 core-prim . make-custom-binary-input-port) (K11080 core-prim . make-bytevector) (K11079 core-prim . lookahead-u8) (K11078 core-prim . lookahead-char) (K9807 core-prim . i/o-write-error?) (K9786 core-prim . i/o-read-error?) (K9967 core-prim . i/o-port-error?) (K9831 core-prim . i/o-invalid-position-error?) (K9857 core-prim . i/o-filename-error?) (K9880 core-prim . i/o-file-protection-error?) (K9901 core-prim . i/o-file-is-read-only-error?) (K9943 core-prim . i/o-file-does-not-exist-error?) (K9922 core-prim . i/o-file-already-exists-error?) (K9765 core-prim . i/o-error?) (K9833 core-prim . i/o-error-position) (K9969 core-prim . i/o-error-port) (K9859 core-prim . i/o-error-filename) (K10014 core-prim . i/o-encoding-error?) (K10016 core-prim . i/o-encoding-error-char) (K9990 core-prim . i/o-decoding-error?) (K11077 core-prim . get-u8) (K11076 core-prim . get-string-n!) (K11075 core-prim . get-string-n) (K11074 core-prim . get-string-all) (K11073 core-prim . get-line) (K11072 core-prim . get-datum) (K11071 core-prim . get-char) (K11070 core-prim . get-bytevector-some) (K11069 core-prim . get-bytevector-n!) (K11068 core-prim . get-bytevector-n) (K11067 core-prim . get-bytevector-all) (K11066 core-prim . flush-output-port) (K11065 core-prim . close-port) (K2956 core-prim . scheme-report-environment) (K11064 core-prim . quotient) (K2954 core-prim . null-environment) (K11063 core-prim . remainder) (K11062 core-prim . modulo) (K11061 core-prim . inexact->exact) (K11060 core-prim . force) (K11059 core-prim . exact->inexact) (K11058 core-prim . make-promise) (K11057 core-prim . exit) (K10325 core-prim . command-line) (K11056 core-prim . string-fill!) (K11055 core-prim . string-set!) (K11054 core-prim . set-cdr!) (K11053 core-prim . set-car!) (K11052 core-prim . remove) (K11051 core-prim . remv) (K11050 core-prim . remp) (K11049 core-prim . remq) (K11048 core-prim . partition) (K11047 core-prim . memv) (K11046 core-prim . memq) (K11045 core-prim . memp) (K11044 core-prim . member) (K11043 core-prim . exists) (K11042 core-prim . for-all) (K11041 core-prim . fold-right) (K11040 core-prim . fold-left) (K11039 core-prim . find) (K11038 core-prim . filter) (K11037 core-prim . cons*) (K11036 core-prim . assv) (K11035 core-prim . assq) (K11034 core-prim . assp) (K11033 core-prim . assoc) (K11032 core-prim . call-with-string-output-port) (K11031 core-prim . call-with-port) (K11030 core-prim . call-with-bytevector-output-port) (K11029 core-prim . bytevector->string) (K11028 core-prim . buffer-mode?) (K11027 core-prim . binary-port?) (K11026 core-prim . with-exception-handler) (K11025 core-prim . raise-continuable) (K11024 core-prim . raise) (K2960 core-prim . eval) (K2952 core-prim . environment) (K11023 core-prim . make-enumeration) (K11022 core-prim . enum-set=?) (K11021 core-prim . enum-set-universe) (K11020 core-prim . enum-set-union) (K11019 core-prim . enum-set-subset?) (K11018 core-prim . enum-set-projection) (K11017 core-prim . enum-set-member?) (K11016 core-prim . enum-set-intersection) (K11015 core-prim . enum-set-indexer) (K11014 core-prim . enum-set-difference) (K11013 core-prim . enum-set-constructor) (K11012 core-prim . enum-set-complement) (K11011 core-prim . enum-set->list) (K9627 core-prim . who-condition?) (K9493 core-prim . warning?) (K9556 core-prim . violation?) (K9744 core-prim . undefined-violation?) (K9719 core-prim . syntax-violation?) (K9723 core-prim . syntax-violation-subform) (K9721 core-prim . syntax-violation-form) (K2992 core-prim . syntax-violation) (K11010 core-prim . simple-conditions) (K9514 core-prim . serious-condition?) (K9650 core-prim . non-continuable-violation?) (K9470 core-prim . message-condition?) (K9623 core-prim . make-who-condition) (K9491 core-prim . make-warning) (K9554 core-prim . make-violation) (K9742 core-prim . make-undefined-violation) (K9713 core-prim . make-syntax-violation) (K9512 core-prim . make-serious-condition) (K9648 core-prim . make-non-continuable-violation) (K9466 core-prim . make-message-condition) (K9690 core-prim . make-lexical-violation) (K9597 core-prim . make-irritants-condition) (K9669 core-prim . make-implementation-restriction-violation) (K9533 core-prim . make-error) (K9575 core-prim . make-assertion-violation) (K9692 core-prim . lexical-violation?) (K9601 core-prim . irritants-condition?) (K9671 core-prim . implementation-restriction-violation?) (K9535 core-prim . error?) (K9629 core-prim . condition-who) (K11009 core-prim . condition-predicate) (K9472 core-prim . condition-message) (K9603 core-prim . condition-irritants) (K11008 core-prim . condition-accessor) (K11007 core-prim . condition) (K9577 core-prim . assertion-violation?) (K11006 core-prim . condition?) (K11005 core-prim . utf32->string) (K11004 core-prim . utf16->string) (K11003 core-prim . utf8->string) (K11002 core-prim . uint-list->bytevector) (K11001 core-prim . u8-list->bytevector) (K11000 core-prim . string->utf8) (K10999 core-prim . string->utf32) (K10998 core-prim . string->utf16) (K10997 core-prim . sint-list->bytevector) (K10996 core-prim . native-endianness) (K10995 core-prim . bytevector?) (K10994 core-prim . bytevector=?) (K10993 core-prim . bytevector-uint-set!) (K10992 core-prim . bytevector-uint-ref) (K10991 core-prim . bytevector-u8-set!) (K10990 core-prim . bytevector-u8-ref) (K10989 core-prim . bytevector-u64-set!) (K10988 core-prim . bytevector-u64-ref) (K10987 core-prim . bytevector-u64-native-set!) (K10986 core-prim . bytevector-u64-native-ref) (K10985 core-prim . bytevector-u32-set!) (K10984 core-prim . bytevector-u32-ref) (K10983 core-prim . bytevector-u32-native-set!) (K10982 core-prim . bytevector-u32-native-ref) (K10981 core-prim . bytevector-u16-set!) (K10980 core-prim . bytevector-u16-ref) (K10979 core-prim . bytevector-u16-native-set!) (K10978 core-prim . bytevector-u16-native-ref) (K10977 core-prim . bytevector-sint-set!) (K10976 core-prim . bytevector-sint-ref) (K10975 core-prim . bytevector-s8-set!) (K10974 core-prim . bytevector-s8-ref) (K10973 core-prim . bytevector-s64-set!) (K10972 core-prim . bytevector-s64-ref) (K10971 core-prim . bytevector-s64-native-set!) (K10970 core-prim . bytevector-s64-native-ref) (K10969 core-prim . bytevector-s32-set!) (K10968 core-prim . bytevector-s32-ref) (K10967 core-prim . bytevector-s32-native-set!) (K10966 core-prim . bytevector-s32-native-ref) (K10965 core-prim . bytevector-s16-set!) (K10964 core-prim . bytevector-s16-ref) (K10963 core-prim . bytevector-s16-native-set!) (K10962 core-prim . bytevector-s16-native-ref) (K10961 core-prim . bytevector-length) (K10960 core-prim . bytevector-ieee-single-ref) (K10959 core-prim . bytevector-ieee-single-set!) (K10958 core-prim . bytevector-ieee-single-native-set!) (K10957 core-prim . bytevector-ieee-single-native-ref) (K10956 core-prim . bytevector-ieee-double-set!) (K10955 core-prim . bytevector-ieee-double-ref) (K10954 core-prim . bytevector-ieee-double-native-set!) (K10953 core-prim . bytevector-ieee-double-native-ref) (K10952 core-prim . bytevector-fill!) (K10951 core-prim . bytevector-copy!) (K10950 core-prim . bytevector-copy) (K10949 core-prim . bytevector->uint-list) (K10948 core-prim . bytevector->u8-list) (K10947 core-prim . bytevector->sint-list) (K10058 core-prim . no-nans-violation?) (K10037 core-prim . no-infinities-violation?) (K10056 core-prim . make-no-nans-violation) (K10035 core-prim . make-no-infinities-violation) (K10946 core-prim . real->flonum) (K10945 core-prim . flzero?) (K10944 core-prim . fltruncate) (K10943 core-prim . fltan) (K10942 core-prim . flsqrt) (K10941 core-prim . flsin) (K10940 core-prim . flround) (K10939 core-prim . flpositive?) (K10938 core-prim . flonum?) (K10937 core-prim . flodd?) (K10936 core-prim . flnumerator) (K10935 core-prim . flnegative?) (K10934 core-prim . flnan?) (K10933 core-prim . flmod0) (K10932 core-prim . flmod) (K10931 core-prim . flmin) (K10930 core-prim . flmax) (K10929 core-prim . fllog) (K10928 core-prim . flinteger?) (K10927 core-prim . flinfinite?) (K10926 core-prim . flfloor) (K10925 core-prim . flfinite?) (K10924 core-prim . flexpt) (K10923 core-prim . flexp) (K10922 core-prim . fleven?) (K10921 core-prim . fldiv0-and-mod0) (K10920 core-prim . fldiv0) (K10919 core-prim . fldiv-and-mod) (K10918 core-prim . fldiv) (K10917 core-prim . fldenominator) (K10916 core-prim . flcos) (K10915 core-prim . flceiling) (K10914 core-prim . flatan) (K10913 core-prim . flasin) (K10912 core-prim . flacos) (K10911 core-prim . flabs) (K10910 core-prim . fl>?) (K10909 core-prim . fl>=?) (K10908 core-prim . fl=?) (K10907 core-prim . fl<?) (K10906 core-prim . fl<=?) (K10905 core-prim . fl/) (K10904 core-prim . fl-) (K10903 core-prim . fl+) (K10902 core-prim . fl*) (K10901 core-prim . fixnum->flonum) (K10900 core-prim . fxzero?) (K10899 core-prim . fxxor) (K10898 core-prim . fxrotate-bit-field) (K10897 core-prim . fxreverse-bit-field) (K10896 core-prim . fxpositive?) (K10895 core-prim . fxodd?) (K10894 core-prim . fxnot) (K10893 core-prim . fxnegative?) (K10892 core-prim . fxmod0) (K10891 core-prim . fxmod) (K10890 core-prim . fxmin) (K10889 core-prim . fxmax) (K10888 core-prim . fxlength) (K10887 core-prim . fxior) (K10886 core-prim . fxif) (K10885 core-prim . fxfirst-bit-set) (K10884 core-prim . fxeven?) (K10883 core-prim . fxdiv0-and-mod0) (K10882 core-prim . fxdiv0) (K10881 core-prim . fxdiv-and-mod) (K10880 core-prim . fxdiv) (K10879 core-prim . fxcopy-bit-field) (K10878 core-prim . fxcopy-bit) (K10877 core-prim . fxbit-set?) (K10876 core-prim . fxbit-field) (K10875 core-prim . fxbit-count) (K10874 core-prim . fxarithmetic-shift-right) (K10873 core-prim . fxarithmetic-shift-left) (K10872 core-prim . fxarithmetic-shift) (K10871 core-prim . fxand) (K10870 core-prim . fx>?) (K10869 core-prim . fx>=?) (K10868 core-prim . fx=?) (K10867 core-prim . fx<?) (K10866 core-prim . fx<=?) (K10865 core-prim . fx-/carry) (K10864 core-prim . fx-) (K10863 core-prim . fx+/carry) (K10862 core-prim . fx+) (K10861 core-prim . fx*/carry) (K10860 core-prim . fx*) (K10859 core-prim . greatest-fixnum) (K10858 core-prim . least-fixnum) (K10857 core-prim . fixnum-width) (K10856 core-prim . fixnum?) (K10855 core-prim . bitwise-rotate-bit-field) (K10854 core-prim . bitwise-reverse-bit-field) (K10853 core-prim . bitwise-length) (K10852 core-prim . bitwise-if) (K10851 core-prim . bitwise-first-bit-set) (K10850 core-prim . bitwise-copy-bit-field) (K10849 core-prim . bitwise-copy-bit) (K10848 core-prim . bitwise-bit-set?) (K10847 core-prim . bitwise-bit-field) (K10846 core-prim . bitwise-bit-count) (K10845 core-prim . bitwise-xor) (K10844 core-prim . bitwise-ior) (K10843 core-prim . bitwise-and) (K10842 core-prim . bitwise-not) (K10841 core-prim . bitwise-arithmetic-shift-right) (K10840 core-prim . bitwise-arithmetic-shift-left) (K10839 core-prim . bitwise-arithmetic-shift) (K10838 core-prim . zero?) (K10837 core-prim . vector?) (K10836 core-prim . vector-set!) (K10835 core-prim . vector-ref) (K10834 core-prim . vector-map) (K10833 core-prim . vector-length) (K10832 core-prim . vector-for-each) (K10831 core-prim . vector-fill!) (K10830 core-prim . vector->list) (K10829 core-prim . vector) (K10828 core-prim . values) (K10827 core-prim . truncate) (K10826 core-prim . tan) (K10825 core-prim . symbol?) (K10824 core-prim . symbol=?) (K10823 core-prim . symbol->string) (K10822 core-prim . substring) (K10821 core-prim . string?) (K10820 core-prim . string>?) (K10819 core-prim . string>=?) (K10818 core-prim . string=?) (K10817 core-prim . string<?) (K10816 core-prim . string<=?) (K10815 core-prim . string-ref) (K10814 core-prim . string-length) (K10813 core-prim . string-for-each) (K10812 core-prim . string-copy) (K10811 core-prim . string-append) (K10810 core-prim . string->symbol) (K10809 core-prim . string->number) (K10808 core-prim . string->list) (K10807 core-prim . string) (K10806 core-prim . sqrt) (K10805 core-prim . sin) (K10804 core-prim . round) (K10803 core-prim . reverse) (K10802 core-prim . real?) (K10801 core-prim . real-valued?) (K10800 core-prim . real-part) (K10799 core-prim . rationalize) (K10798 core-prim . rational?) (K10797 core-prim . rational-valued?) (K10796 core-prim . procedure?) (K10795 core-prim . positive?) (K10794 core-prim . pair?) (K10793 core-prim . odd?) (K10792 core-prim . numerator) (K10791 core-prim . number?) (K10790 core-prim . number->string) (K10789 core-prim . null?) (K10788 core-prim . not) (K10787 core-prim . negative?) (K10786 core-prim . nan?) (K10785 core-prim . min) (K10784 core-prim . max) (K10783 core-prim . map) (K10782 core-prim . make-vector) (K10781 core-prim . make-string) (K10780 core-prim . make-rectangular) (K10779 core-prim . make-polar) (K10778 core-prim . magnitude) (K10777 core-prim . log) (K10776 core-prim . list?) (K10775 core-prim . list-tail) (K10774 core-prim . list-ref) (K10773 core-prim . list->vector) (K10772 core-prim . list->string) (K10771 core-prim . list) (K10770 core-prim . length) (K10769 core-prim . lcm) (K10768 core-prim . integer?) (K10767 core-prim . integer-valued?) (K10766 core-prim . integer->char) (K10765 core-prim . infinite?) (K10764 core-prim . inexact?) (K10763 core-prim . inexact) (K10762 core-prim . imag-part) (K10761 core-prim . gcd) (K10760 core-prim . for-each) (K10759 core-prim . floor) (K10758 core-prim . finite?) (K10757 core-prim . expt) (K10756 core-prim . exp) (K10755 core-prim . exact?) (K10754 core-prim . exact-integer-sqrt) (K10753 core-prim . exact) (K10752 core-prim . even?) (K10751 core-prim . error) (K10750 core-prim . eqv?) (K10749 core-prim . equal?) (K10748 core-prim . eq?) (K10747 core-prim . dynamic-wind) (K10746 core-prim . div0-and-mod0) (K10745 core-prim . mod0) (K10744 core-prim . div0) (K10743 core-prim . div-and-mod) (K10742 core-prim . mod) (K10741 core-prim . div) (K10740 core-prim . denominator) (K10739 core-prim . cos) (K10738 core-prim . cons) (K10737 core-prim . complex?) (K10736 core-prim . char?) (K10735 core-prim . char>?) (K10734 core-prim . char>=?) (K10733 core-prim . char=?) (K10732 core-prim . char<?) (K10731 core-prim . char<=?) (K10730 core-prim . char->integer) (K10729 core-prim . ceiling) (K10728 core-prim . call-with-values) (K10727 core-prim . call/cc) (K10726 core-prim . call-with-current-continuation) (K10725 core-prim . cddddr) (K10724 core-prim . cdddar) (K10723 core-prim . cddadr) (K10722 core-prim . cddaar) (K10721 core-prim . cdaddr) (K10720 core-prim . cdadar) (K10719 core-prim . cdaadr) (K10718 core-prim . cdaaar) (K10717 core-prim . cadddr) (K10716 core-prim . caddar) (K10715 core-prim . cadadr) (K10714 core-prim . cadaar) (K10713 core-prim . caaddr) (K10712 core-prim . caadar) (K10711 core-prim . caaadr) (K10710 core-prim . caaaar) (K10709 core-prim . cdddr) (K10708 core-prim . cddar) (K10707 core-prim . cdadr) (K10706 core-prim . cdaar) (K10705 core-prim . caddr) (K10704 core-prim . cadar) (K10703 core-prim . caadr) (K10702 core-prim . caaar) (K10701 core-prim . cddr) (K10700 core-prim . cdar) (K10699 core-prim . cadr) (K10698 core-prim . caar) (K10697 core-prim . cdr) (K10696 core-prim . car) (K10695 core-prim . boolean?) (K10694 core-prim . boolean=?) (K10693 core-prim . atan) (K10692 core-prim . assertion-violation) (K10691 core-prim . asin) (K10690 core-prim . apply) (K10689 core-prim . append) (K10688 core-prim . angle) (K10687 core-prim . acos) (K10686 core-prim . abs) (K10685 core-prim . /) (K10684 core-prim . *) (K10683 core-prim . -) (K10682 core-prim . +) (K10681 core-prim . >=) (K10680 core-prim . >) (K10679 core-prim . =) (K10678 core-prim . <=) (K10677 core-prim . <) (K10676 core-prim . library) (K10675 $core-rtd &no-nans-rtd &no-nans-rcd) (K10674 $core-rtd &no-infinities-rtd &no-infinities-rcd) (K10673 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (K10672 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (K10671 $core-rtd &i/o-port-rtd &i/o-port-rcd) (K10670 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (K10669 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (K10668 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (K10667 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (K10666 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (K10665 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (K10664 $core-rtd &i/o-write-rtd &i/o-write-rcd) (K10663 $core-rtd &i/o-read-rtd &i/o-read-rcd) (K10662 $core-rtd &i/o-rtd &i/o-rcd) (K10661 $core-rtd &undefined-rtd &undefined-rcd) (K10660 $core-rtd &syntax-rtd &syntax-rcd) (K10659 $core-rtd &lexical-rtd &lexical-rcd) (K10658 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (K10657 $core-rtd &non-continuable-rtd &non-continuable-rcd) (K10656 $core-rtd &who-rtd &who-rcd) (K10655 $core-rtd &irritants-rtd &irritants-rcd) (K10654 $core-rtd &assertion-rtd &assertion-rcd) (K10653 $core-rtd &violation-rtd &violation-rcd) (K10652 $core-rtd &error-rtd &error-rcd) (K10651 $core-rtd &serious-rtd &serious-rcd) (K10650 $core-rtd &warning-rtd &warning-rcd) (K10649 $core-rtd &message-rtd &message-rcd) (K10648 $core-rtd &condition-rtd &condition-rcd) (K10647 macro . define-condition-type) (K10646 macro . define-enumeration) (K10645 macro . define-record-type) (K10644 macro . parent-rtd) (K10643 macro . nongenerative) (K10642 macro . opaque) (K10641 macro . sealed) (K10640 macro . protocol) (K10639 macro . parent) (K10638 macro . immutable) (K10637 macro . mutable) (K10636 macro . fields) (K10635 macro . error-handling-mode) (K10634 macro . file-options) (K10633 macro . buffer-mode) (K10632 macro . eol-style) (K10631 macro . guard) (K10630 macro . trace-define) (K10629 macro . trace-lambda) (K10628 macro . unsyntax-splicing) (K10627 macro . unsyntax) (K10626 macro . unquote-splicing) (K10625 macro . unquote) (K10624 macro . _) (K10623 macro . else) (K10622 macro . =>) (K10621 macro . ...) (K10620 macro . assert) (K10619 macro . endianness) (K10618 macro . delay) (K10617 macro . time) (K10616 macro . do) (K10615 macro . cond) (K10614 macro . let*) (K10613 macro . let) (K10612 macro . let*-values) (K10611 macro . let-values) (K10610 macro . identifier-syntax) (K10609 macro . with-syntax) (K10608 macro . quasisyntax) (K10607 macro . quasiquote) (K10606 macro . syntax-rules) (K10605 macro . include) (K10604 macro . define-struct) (K10603 core-macro . record-constructor-descriptor) (K10602 core-macro . record-type-descriptor) (K10601 macro . case) (K10600 macro . parameterize) (K10599 macro . unless) (K10598 macro . when) (K10597 core-macro . or) (K10596 core-macro . and) (K10595 core-macro . if) (K10594 core-macro . letrec*) (K10593 core-macro . letrec) (K10592 core-macro . type-descriptor) (K10591 core-macro . case-lambda) (K10590 core-macro . lambda) (K10589 core-macro . syntax) (K10588 core-macro . syntax-case) (K10587 core-macro . quote) (K10586 core-macro . foreign-call) (K10585 letrec-syntax) (K10584 let-syntax) (K10583 set!) (K10582 import) (K10581 begin) (K10580 module) (K10579 define-syntax) (K10578 define)) values values '#f '#f '#f '#f) (K1787@K1440@install-library 'K11315 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . K11282) (eval-core . K11281) (set-symbol-value! . K11280) (symbol-value . K11279) (gensym . K910) (void . K11278)) '() values values '#f '#f '#f '#f) (K1787@K1440@install-library 'K11316 '(mosh) '() '() '() '() '((set-symbol-value! . K11280) (symbol-value . K11279) (read-line . K11275) (ungensym . K11274) (alist->eq-hash-table . K11273) (assoc-ref . K11272) (print . K11271) (format . K11270) (host-os . K11269) (library-path . K1407) (standard-library-path . K11268) (file-newer? . K11267) (stat-mtime . K11266) (write-to-file . K11265) (file->list . K11264) (file->string . K11263) (digit->integer . K11262) (call-with-string-input-port . K11261) (call-with-string-io . K11260) (string-split . K11259) (bytevector-for-each . K11258) (string->regexp . K11257) (rxmatch . K11256) (regexp-replace-all . K11255) (hashtable-for-each . K11254) (readdir . K11250) (set-current-directory! . K11249) (expand-path . K11248) (current-directory . K11247) (p . K11232) (get-timeofday . K11227) (get-command-line . K11226) (sys-display . K11225) (source-info . K11224) (make-compiler-instruction . K11223) (make-instruction . K11222) (set-source-info! . K11221) (bignum? . K11220) (fast-equal? . K11219) (fasl-read . K11218) (fasl-write . K11217) (time-usage . K11216) (time . K10617) (include . K10605)) '() values values '#f '#f '#f '#f) (K1787@K1440@install-library 'K11317 '(system) '() '() '() '() '((call-process . K11253) (local-tz-offset . K11252) (microseconds . K11251) (expand-path . K11248) (%spawn . K11246) (%waitpid . K11245) (%ffi-supported? . K11244) (%ffi-pointer-ref . K11243) (%ffi-pointer->string . K11242) (%ffi-call->string-or-zero . K11241) (%ffi-call->double . K11240) (%ffi-call->void* . K11239) (%ffi-call->void . K11238) (%ffi-call->int . K11237) (%ffi-lookup . K11236) (%ffi-open . K11235) (%fork . K11234) (%pipe . K11233) (open-output-string . K11231) (get-output-string . K11230) (get-environment-variables . K11229) (get-environment-variable . K11228) (make-parameter . K938) (parameterize . K10600)) '() values values '#f '#f '#f '#f))
((lambda (K10308@add-library-path! K10310@parse-and-add-library-path K10312@for-each-with-index K10314@conditioon-printer K10316@condition-printer K10318@record->field-alist K10320@map-with-index K10322@repl K10324@trace-printer K10326@command-line K10328@local-library-path K10330@load/args K10332@load K10334@ironscheme-build K10336@eval-top-level K10338@compile-system-libraries K10340@compile K10342@compile->closure K10344@pre-compile-r6rs-file K10346@load-r6rs-top-level) (begin (set! K10308@add-library-path! (lambda (K10373@path) (K1771@K1408@library-path (append (K1771@K1408@library-path) (list K10373@path))))) (set! K10310@parse-and-add-library-path (lambda (K10375@paths K10376@message) ((lambda (K10379@t) (if K10379@t ((lambda (K10381@paths) (for-each (lambda (K10383@path) (if (file-exists? K10383@path) (K10308@add-library-path! (expand-path K10383@path)) (format (current-error-port) K10376@message K10383@path))) (reverse (string-split K10381@paths '#\:)))) K10379@t) (void))) K10375@paths))) (set! K10312@for-each-with-index (lambda (K10385@proc K10386@lst) (letrec ((K10389@loop (lambda (K10391@i K10392@lst) (if (null? K10392@lst) (if '#f '#f (void)) (begin (K10385@proc K10391@i (car K10392@lst)) (K10389@loop (+ K10391@i '1) (cdr K10392@lst))))))) (K10389@loop '1 K10386@lst)))) (set! K10314@conditioon-printer (lambda (K10395@e K10396@port) ((lambda (K10400@ref) (begin (set! K10400@ref (lambda (K10415@rtd K10416@i K10417@x) ((lambda (K10421@val) (if (symbol? K10421@val) (ungensym K10421@val) K10421@val)) ((record-accessor K10415@rtd K10416@i) K10417@x)))) (begin (display '" Condition components:\n" K10396@port) (K10312@for-each-with-index (lambda (K10401@i K10402@x) ((lambda (K10405@rtd) (begin (format K10396@port '"   ~d. ~a" K10401@i (record-type-name K10405@rtd)) ((lambda (K10407@v) ((lambda (K10409@t) (if (memv K10409@t '(0)) (newline K10396@port) (if (memv K10409@t '(1)) (begin (display '": " K10396@port) (write (K10400@ref K10405@rtd '0 K10402@x) K10396@port) (newline K10396@port)) (begin (display '":\n" K10396@port) ((letrec ((K10411@f (lambda (K10413@i) (if (not (= K10413@i (vector-length K10407@v))) (begin (display '"       " K10396@port) (display (vector-ref K10407@v K10413@i) K10396@port) (display '": " K10396@port) (write (K10400@ref K10405@rtd K10413@i K10402@x) K10396@port) (newline K10396@port) (K10411@f (+ K10413@i '1))) (void))))) K10411@f) '0))))) (vector-length K10407@v))) (record-type-field-names K10405@rtd)))) (record-rtd K10402@x))) (simple-conditions K10395@e))))) '#f))) (set! K10316@condition-printer (lambda (K10423@e K10424@port) (begin (display '" Condition components:\n" K10424@port) (K10312@for-each-with-index (lambda (K10427@i K10428@x) ((lambda (K10431@rtd) (begin (format K10424@port '"   ~d. ~a" K10427@i (record-type-name K10431@rtd)) (for-each (lambda (K10433@field) (begin (display '"       " K10424@port) (display (car K10433@field) K10424@port) (display '": " K10424@port) (write (cdr K10433@field) K10424@port) (newline K10424@port))) (K10318@record->field-alist K10428@x)))) (record-rtd K10428@x))) (simple-conditions K10423@e))))) (set! K10318@record->field-alist (lambda (K10435@r) ((lambda (K10438@ref) (begin (set! K10438@ref (lambda (K10449@rtd K10450@i K10451@x) ((lambda (K10455@val) (if (symbol? K10455@val) (ungensym K10455@val) K10455@val)) ((record-accessor K10449@rtd K10450@i) K10451@x)))) ((letrec ((K10439@loop (lambda (K10441@ret K10442@rtd) (if K10442@rtd (K10439@loop (append K10441@ret (K10320@map-with-index (lambda (K10445@i K10446@field) (cons K10446@field (K10438@ref K10442@rtd K10445@i K10435@r))) (vector->list (record-type-field-names K10442@rtd)))) (record-type-parent K10442@rtd)) K10441@ret)))) K10439@loop) '() (record-rtd K10435@r)))) '#f))) (set! K10320@map-with-index (lambda (K10457@proc K10458@lst) ((letrec ((K10461@loop (lambda (K10463@i K10464@lst K10465@ret) (if (null? K10464@lst) (reverse K10465@ret) (K10461@loop (+ K10463@i '1) (cdr K10464@lst) (cons (K10457@proc K10463@i (car K10464@lst)) K10465@ret)))))) K10461@loop) '0 K10458@lst '()))) (set! K10322@repl (lambda K10469@x ((lambda (K10472@rec) (begin (set! K10472@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (K10475@K10473) (lambda () (with-exception-handler (lambda (K10477@e) ((call/cc (lambda (K10479@K10474) (K10475@K10473 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? K10477@e) (K10314@conditioon-printer K10477@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" K10477@e))) (K10479@K10474 (lambda () (raise-continuable K10477@e)))))))))) (lambda () ((letrec ((K10481@loop (lambda (K10483@line K10484@accum) ((lambda (K10488@parentheses-ok? K10490@eval-string-print) (begin (set! K10488@parentheses-ok? (lambda (K10495@text) ((letrec ((K10497@loop (lambda (K10499@chars K10500@p0 K10501@p1) (if (null? K10499@chars) (= '0 K10500@p0 K10501@p1) ((lambda (K10505@t) (if (memv K10505@t '(#\()) (K10497@loop (cdr K10499@chars) (+ K10500@p0 '1) K10501@p1) (if (memv K10505@t '(#\))) (K10497@loop (cdr K10499@chars) (- K10500@p0 '1) K10501@p1) (if (memv K10505@t '(#\[)) (K10497@loop (cdr K10499@chars) K10500@p0 (+ K10501@p1 '1)) (if (memv K10505@t '(#\])) (K10497@loop (cdr K10499@chars) K10500@p0 (- K10501@p1 '1)) (K10497@loop (cdr K10499@chars) K10500@p0 K10501@p1)))))) (car K10499@chars)))))) K10497@loop) (string->list K10495@text) '0 '0))) (set! K10490@eval-string-print (lambda (K10493@text) (if (not (or (string=? '"\n" K10493@text) (= '0 (string-length K10493@text)))) (write (K10336@eval-top-level (call-with-port (open-string-input-port K10493@text) read))) (void)))) (if (eof-object? K10483@line) (begin (K10490@eval-string-print K10484@accum) (exit)) ((lambda (K10491@current) (if (K10488@parentheses-ok? K10491@current) (K10490@eval-string-print K10491@current) (K10481@loop (get-line (current-input-port)) K10491@current))) (string-append K10484@accum K10483@line))))) '#f '#f)))) K10481@loop) (get-line (current-input-port)) '""))))))) (newline) (K10472@rec)))) (K10472@rec))) '#f))) (set! K10324@trace-printer (K1161@K939@make-parameter write)) (set! K10326@command-line (K1161@K939@make-parameter (get-command-line))) (set! K10328@local-library-path (lambda (K10507@filename) (cons (expand-path '".") (K1771@K1408@library-path)))) (set! K10330@load/args (lambda (K10509@filename . K10511@args) (begin (apply K10346@load-r6rs-top-level K10509@filename 'load K10511@args) (void)))) (set! K10332@load (lambda (K10513@filename) (begin (apply K10346@load-r6rs-top-level K10513@filename 'load (K10326@command-line)) (void)))) (set! K10334@ironscheme-build (lambda () (K10332@load '"ironscheme-buildscript.ss"))) (set! K10336@eval-top-level (lambda (K10515@x) (K9340@K2961@eval K10515@x (K9362@K3005@interaction-environment)))) (set! K10338@compile-system-libraries (lambda () (K10336@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! K10340@compile (lambda (K10517@filename) (K10346@load-r6rs-top-level K10517@filename 'compile))) (set! K10342@compile->closure (lambda (K10519@filename) (K10346@load-r6rs-top-level K10519@filename 'closure))) (set! K10344@pre-compile-r6rs-file (lambda (K10521@filename) (K10346@load-r6rs-top-level K10521@filename 'compile))) (set! K10346@load-r6rs-top-level (lambda (K10523@filename K10524@how . K10527@args) ((lambda (K10531@K10529@library-path K10532@K10530@library-path) ((lambda (K10535@swap) (dynamic-wind K10535@swap (lambda () ((lambda (K10537@x*) ((lambda (K10539@t) (if (memv K10539@t '(closure)) (K9361@K3003@pre-compile-r6rs-top-level K10537@x*) (if (memv K10539@t '(load)) ((lambda (K10543@K10541@command-line K10544@K10542@command-line) ((lambda (K10547@swap) (dynamic-wind K10547@swap (lambda () ((K9360@K3001@compile-r6rs-top-level K10537@x*))) K10547@swap)) (lambda () ((lambda (K10549@t) (begin (K10543@K10541@command-line K10544@K10542@command-line) (set! K10544@K10542@command-line K10549@t))) (K10543@K10541@command-line))))) K10326@command-line (cons K10523@filename (car K10527@args))) (if (memv K10539@t '(compile)) (begin (K9360@K3001@compile-r6rs-top-level K10537@x*) (K1775@K1416@serialize-all K1156@K929@serialize-library K1246@K1175@compile-core-expr)) (if '#f '#f (void)))))) K10524@how)) (with-input-from-file K10523@filename (lambda () ((letrec ((K10551@f (lambda () ((lambda (K10553@x) (if (eof-object? K10553@x) '() (cons K10553@x (K10551@f)))) (K1148@K913@read-annotated))))) K10551@f)))))) K10535@swap)) (lambda () ((lambda (K10555@t) (begin (K10531@K10529@library-path K10532@K10530@library-path) (set! K10532@K10530@library-path K10555@t))) (K10531@K10529@library-path))))) K1771@K1408@library-path (K10328@local-library-path K10523@filename)))) (begin (set! K10576@K10346@load-r6rs-top-level K10346@load-r6rs-top-level) (set! K10575@K10344@pre-compile-r6rs-file K10344@pre-compile-r6rs-file) (set! K10574@K10342@compile->closure K10342@compile->closure) (set! K10573@K10340@compile K10340@compile) (set! K10572@K10338@compile-system-libraries K10338@compile-system-libraries) (set! K10571@K10336@eval-top-level K10336@eval-top-level) (set! K10570@K10334@ironscheme-build K10334@ironscheme-build) (set! K10569@K10332@load K10332@load) (set! K10568@K10330@load/args K10330@load/args) (set! K10567@K10328@local-library-path K10328@local-library-path) (set! K10566@K10326@command-line K10326@command-line) (set! K10565@K10324@trace-printer K10324@trace-printer) (set! K10564@K10322@repl K10322@repl) (set! K10563@K10320@map-with-index K10320@map-with-index) (set! K10562@K10318@record->field-alist K10318@record->field-alist) (set! K10561@K10316@condition-printer K10316@condition-printer) (set! K10560@K10314@conditioon-printer K10314@conditioon-printer) (set! K10559@K10312@for-each-with-index K10312@for-each-with-index) (set! K10558@K10310@parse-and-add-library-path K10310@parse-and-add-library-path) (set! K10557@K10308@add-library-path! K10308@add-library-path!) (K1776@K1418@current-precompiled-library-loader K1157@K931@load-serialized-library) (set-symbol-value! 'load K10332@load) (set-symbol-value! 'pre-compile-r6rs-file K10344@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs K10336@eval-top-level) (set-symbol-value! 'int-env-syms K9331@K2943@interaction-environment-symbols) (set-symbol-value! 'expanded2core K1245@K1173@expanded->core) (set-symbol-value! 'trace-printer K10324@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (K10347@c) (condition (K10145@K9649@make-non-continuable-violation) (K10135@K9624@make-who-condition 'raise) (K10075@K9467@make-message-condition '"returned from non-continuable exception") (K10125@K9598@make-irritants-condition (list K10347@c))))) (K10310@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (K10310@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (K1771@K1408@library-path (append (K1771@K1408@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (K10349@prefix) (K1772@K1410@library-extensions (K10349@prefix '".mosh" (K1772@K1410@library-extensions)))) (lambda (K10351@ext K10352@ls) (append (map (lambda (K10355@x) (string-append K10351@ext K10355@x)) K10352@ls) K10352@ls))) ((lambda (K10357@args K10358@port) ((lambda (K10362@ref) (begin (set! K10362@ref (lambda (K10365@rtd K10366@i K10367@x) ((lambda (K10371@val) (if (symbol? K10371@val) (ungensym K10371@val) K10371@val)) ((record-accessor K10365@rtd K10366@i) K10367@x)))) (with-exception-handler (lambda (K10363@c) (if (condition? K10363@c) (K10314@conditioon-printer K10363@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" K10363@c))) (lambda () (if (null? K10357@args) (K10322@repl) (K10346@load-r6rs-top-level (car K10357@args) 'load (cdr K10357@args))))))) '#f)) (K10326@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
