;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G25fc@read-annotated G25fe@annotation-stripped G2600@annotation? G2602@annotation-source G2604@annotation-expression G2606@scm->fasl G2608@fasl-save G260a@fasl-load G260c@serialize-library G260e@load-serialized-library G2610@make-record-printer G2612@compile-core G2614@read-library-source-file G2616@make-parameter G267a@file-options-spec) (begin (set! G25fc@read-annotated read) (set! G25fe@annotation-stripped (lambda (G267b@x) (G2604@annotation-expression G267b@x))) (set! G2600@annotation? (lambda (G267d@x) (source-info G267d@x))) (set! G2602@annotation-source (lambda (G267f@x) (source-info G267f@x))) (set! G2604@annotation-expression (lambda (G2681@x) (if (pair? G2681@x) (cons (car G2681@x) (cdr G2681@x)) (display '"line:46\n")))) (set! G2606@scm->fasl (lambda (G2683@filename) (string-append G2683@filename '".fasl"))) (set! G2608@fasl-save (lambda (G2685@filename G2686@obj) (call-with-port (open-file-output-port G2685@filename) (lambda (G2689@port) ((symbol-value 'fasl-write!) G2686@obj G2689@port))))) (set! G260a@fasl-load (lambda (G268b@filename) (call-with-port (open-file-input-port G268b@filename) (symbol-value 'fasl-read!)))) (set! G260c@serialize-library (lambda (G268d@filename G268e@obj) (begin (format '#t '"serialize-library ~a\n..." G268d@filename) ((lambda (G2691@expanded2core) ((lambda (G2693@compile) ((lambda (G2695@code) ((lambda (G2697@pivot) ((lambda (G2699@visit) ((lambda () (begin (set-car! G2697@pivot G2699@visit) ((lambda (G269b@pivot) ((lambda (G269d@invoke) ((lambda () (set-car! G269b@pivot G269d@invoke)))) (G2693@compile (G2691@expanded2core (car G269b@pivot))))) (cdr G2697@pivot)))))) (G2693@compile (G2691@expanded2core (car G2697@pivot))))) (cddddr (cddddr G2695@code)))) G268e@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (G269f@fasl-file) (begin (if (file-exists? G269f@fasl-file) (delete-file G269f@fasl-file) (void)) ((call/cc (lambda (G26a3@G26a1) (lambda () (with-exception-handler (lambda (G26a5@c) ((call/cc (lambda (G26a7@G26a2) (G26a3@G26a1 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed ~a" G268d@filename G26a5@c) (if (file-exists? G269f@fasl-file) (delete-file G269f@fasl-file) (void)) '#f) (G26a7@G26a2 (lambda () (raise-continuable G26a5@c)))))))))) (lambda () (begin (G2608@fasl-save G269f@fasl-file G268e@obj) (display '"OK\n")))))))))) (G2606@scm->fasl G268d@filename))))) (set! G260e@load-serialized-library (lambda (G26a9@filename G26aa@obj) ((lambda (G26ad@fasl-file) (if (and (file-exists? G26ad@fasl-file) ((symbol-value 'file-newer?) G26ad@fasl-file G26a9@filename)) ((lambda (G26af@expanded2core) ((lambda (G26b1@eval-compiled-core) ((lambda (G26b3@code) ((lambda (G26b5@pivot) ((lambda (G26b7@visit) ((lambda (G26b9@visit-proc) ((lambda () (begin (set-car! G26b5@pivot G26b9@visit-proc) ((lambda (G26bb@pivot) ((lambda (G26bd@invoke) ((lambda () (begin (set-car! G26bb@pivot (lambda () (G26b1@eval-compiled-core G26bd@invoke))) (apply G26aa@obj G26b3@code))))) (car G26bb@pivot))) (cdr G26b5@pivot)) '#t)))) (lambda () (G26b1@eval-compiled-core G26b7@visit)))) (car G26b5@pivot))) (cddddr (cddddr G26b3@code)))) (G260a@fasl-load G26ad@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (G2606@scm->fasl G26a9@filename)))) (set! G2610@make-record-printer (lambda (G26bf@name G26c0@printer) (lambda G26c3@x (begin (display '"record printer") (for-each display G26c3@x))))) (set! G2612@compile-core (lambda G26c5@x (apply error 'comile-core '"not implementated" G26c5@x))) (set! G2614@read-library-source-file (lambda (G26c7@file-name) (with-input-from-file G26c7@file-name G25fc@read-annotated))) (set! G2616@make-parameter (lambda G26d7 ((lambda (G26d8) (if (= G26d8 '1) (apply (lambda (G26c9@x) (G2616@make-parameter G26c9@x (lambda (G26cb@x) G26cb@x))) G26d7) (if (= G26d8 '2) (apply (lambda (G26cd@x G26ce@fender) ((lambda (G26d1@x) (lambda G26d5 ((lambda (G26d6) (if (= G26d6 '0) (apply (lambda () G26d1@x) G26d5) (if (= G26d6 '1) (apply (lambda (G26d3@v) (set! G26d1@x (G26ce@fender G26d3@v))) G26d5) (error 'apply '"invalid arg count")))) (length G26d5)))) (G26ce@fender G26cd@x))) G26d7) (error 'apply '"invalid arg count")))) (length G26d7)))) (set! G267a@file-options-spec (lambda (G26d9@x) G26d9@x)) (begin (set! G26e9@G267a@file-options-spec G267a@file-options-spec) (set! G26e8@G2616@make-parameter G2616@make-parameter) (set! G26e7@G2614@read-library-source-file G2614@read-library-source-file) (set! G26e6@G2612@compile-core G2612@compile-core) (set! G26e5@G2610@make-record-printer G2610@make-record-printer) (set! G26e4@G260e@load-serialized-library G260e@load-serialized-library) (set! G26e3@G260c@serialize-library G260c@serialize-library) (set! G26e2@G260a@fasl-load G260a@fasl-load) (set! G26e1@G2608@fasl-save G2608@fasl-save) (set! G26e0@G2606@scm->fasl G2606@scm->fasl) (set! G26df@G2604@annotation-expression G2604@annotation-expression) (set! G26de@G2602@annotation-source G2602@annotation-source) (set! G26dd@G2600@annotation? G2600@annotation?) (set! G26dc@G25fe@annotation-stripped G25fe@annotation-stripped) (set! G26db@G25fc@read-annotated G25fc@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G26ee@current-primitive-locations G26f0@mutable? G26f2@rewriter G26f4@expanded->core G26f6@compile-core-expr G26f8@pretty-print G26fa@compile-core-expr-to-port) (begin (set! G26ee@current-primitive-locations (G26e8@G2616@make-parameter (lambda (G26fb@x) '#f) (lambda (G26fd@p) G26fd@p))) (set! G26f0@mutable? (lambda (G26ff@x) (or (pair? G26ff@x) (vector? G26ff@x) (hashtable? G26ff@x)))) (set! G26f2@rewriter (lambda (G2701@quote-hack?) ((lambda (G2704@f) (begin (set! G2704@f (lambda (G2705@x) (if (pair? G2705@x) ((lambda (G2707@t) (if (memv G2707@t '(quote)) (if (and G2701@quote-hack? (G26f0@mutable? (cadr G2705@x))) ((lambda (G2709@g) (begin (set-symbol-value! G2709@g (cadr G2705@x)) G2709@g)) (gensym)) G2705@x) (if (memv G2707@t '(case-lambda)) (cons 'case-lambda (map (lambda (G270b@x) (cons (car G270b@x) (map G2704@f (cdr G270b@x)))) (cdr G2705@x))) (if (memv G2707@t '(lambda)) (cons* 'lambda (cadr G2705@x) (map G2704@f (cddr G2705@x))) (if (memv G2707@t '(letrec)) ((lambda (G270d@bindings G270e@body*) ((lambda (G2711@lhs* G2712@rhs*) (cons* 'letrec (map list G2711@lhs* (map G2704@f G2712@rhs*)) (map G2704@f G270e@body*))) (map car G270d@bindings) (map cadr G270d@bindings))) (cadr G2705@x) (cddr G2705@x)) (if (memv G2707@t '(letrec*)) ((lambda (G2715@bindings G2716@body*) ((lambda (G2719@lhs* G271a@rhs*) (cons* 'letrec* (map list G2719@lhs* (map G2704@f G271a@rhs*)) (map G2704@f G2716@body*))) (map car G2715@bindings) (map cadr G2715@bindings))) (cadr G2705@x) (cddr G2705@x)) (if (memv G2707@t '(library-letrec*)) ((lambda (G271d@name G271e@x) ((lambda (G2721@bindings G2722@body*) ((lambda (G2725@lhs* G2726@lhs** G2727@rhs*) (cons* 'library-letrec* G271d@name (map list G2725@lhs* G2726@lhs** (map G2704@f G2727@rhs*)) (map G2704@f G2722@body*))) (map car G2721@bindings) (map cadr G2721@bindings) (map caddr G2721@bindings))) (cadr G271e@x) (cddr G271e@x))) (cadr G2705@x) (cdr G2705@x)) (if (memv G2707@t '(begin)) (cons 'begin (map G2704@f (cdr G2705@x))) (if (memv G2707@t '(set!)) (list 'set! (cadr G2705@x) (G2704@f (caddr G2705@x))) (if (memv G2707@t '(primitive)) ((lambda (G272b@op) ((lambda (G272d@t) (if G272d@t ((lambda (G272f@loc) G272f@loc) G272d@t) G272b@op)) ((G26ee@current-primitive-locations) G272b@op))) (cadr G2705@x)) (if (memv G2707@t '(define)) G2705@x (if (list? G2705@x) (map G2704@f G2705@x) (error 'rewrite '"invalid form ~s ~s" G2705@x (list? G2705@x)))))))))))))) (car G2705@x)) G2705@x))) G2704@f)) '#f))) (set! G26f4@expanded->core (lambda (G2731@x) ((G26f2@rewriter '#f) G2731@x))) (set! G26f6@compile-core-expr (lambda (G2733@x) ((G26f2@rewriter '#f) G2733@x))) (set! G26f8@pretty-print write) (set! G26fa@compile-core-expr-to-port (lambda (G2735@x G2736@p) (G26f8@pretty-print ((G26f2@rewriter '#f) G2735@x) G2736@p))) (begin (set! G273f@G26fa@compile-core-expr-to-port G26fa@compile-core-expr-to-port) (set! G273e@G26f8@pretty-print G26f8@pretty-print) (set! G273d@G26f6@compile-core-expr G26f6@compile-core-expr) (set! G273c@G26f4@expanded->core G26f4@expanded->core) (set! G273b@G26f2@rewriter G26f2@rewriter) (set! G273a@G26f0@mutable? G26f0@mutable?) (set! G2739@G26ee@current-primitive-locations G26ee@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G278e@make-collection G2790@current-library-collection G2796@G2791 G2798@G2793 G279a@G2792 G279d@library? G279f@make-library G27a1@library-id G27a3@library-name G27a5@library-version G27a7@library-imp* G27a9@library-vis* G27ab@library-inv* G27ad@library-subst G27af@library-env G27b1@library-visit-state G27b3@library-invoke-state G27b5@library-visit-code G27b7@library-invoke-code G27b9@library-visible? G27bb@library-source-file-name G27bd@set-library-id! G27bf@set-library-name! G27c1@set-library-version! G27c3@set-library-imp*! G27c5@set-library-vis*! G27c7@set-library-inv*! G27c9@set-library-subst! G27cb@set-library-env! G27cd@set-library-visit-state! G27cf@set-library-invoke-state! G27d1@set-library-visit-code! G27d3@set-library-invoke-code! G27d5@set-library-visible?! G27d7@set-library-source-file-name! G27d9@rp G27db@find-dependencies G27dd@find-library-by G27df@library-path G27e1@library-extensions G27e3@library-name->file-name G27e5@file-locator G27e7@serialize-all G27e9@current-precompiled-library-loader G27eb@try-load-from-file G27ed@library-loader G27ef@current-library-expander G27f1@external-pending-libraries G27f3@find-external-library G27f5@find-library-by-name G27f7@library-exists? G27f9@find-library-by-spec/die G27fb@label->binding-table G27fd@install-library-record G27ff@install-library G2801@imported-label->binding G2803@invoke-library G2805@visit-library G2807@invoke-library-by-spec G2809@installed-libraries G280b@library-spec) (begin (set! G278e@make-collection (lambda () ((lambda (G280c@set) ((lambda (G280f@set-cons) (begin (set! G280f@set-cons (lambda (G2814@x G2815@ls) (if (memq G2814@x G2815@ls) G2815@ls (cons G2814@x G2815@ls)))) (lambda G2812 ((lambda (G2813) (if (= G2813 '0) (apply (lambda () G280c@set) G2812) (if (= G2813 '1) (apply (lambda (G2810@x) (set! G280c@set (G280f@set-cons G2810@x G280c@set))) G2812) (error 'apply '"invalid arg count")))) (length G2812))))) '#f)) '()))) (set! G2790@current-library-collection (G26e8@G2616@make-parameter (G278e@make-collection) (lambda (G2818@x) (begin (if (not (procedure? G2818@x)) (assertion-violation 'current-library-collection '"not a procedure" G2818@x) (void)) G2818@x)))) (set! G2796@G2791 (make-record-type-descriptor 'library '#f 'G2794 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G2798@G2793 '#f) (set! G279a@G2792 (make-record-constructor-descriptor G2796@G2791 '#f G2798@G2793)) (set! G279d@library? (record-predicate G2796@G2791)) (set! G279f@make-library (record-constructor G279a@G2792)) (set! G27a1@library-id (record-accessor G2796@G2791 '0)) (set! G27a3@library-name (record-accessor G2796@G2791 '1)) (set! G27a5@library-version (record-accessor G2796@G2791 '2)) (set! G27a7@library-imp* (record-accessor G2796@G2791 '3)) (set! G27a9@library-vis* (record-accessor G2796@G2791 '4)) (set! G27ab@library-inv* (record-accessor G2796@G2791 '5)) (set! G27ad@library-subst (record-accessor G2796@G2791 '6)) (set! G27af@library-env (record-accessor G2796@G2791 '7)) (set! G27b1@library-visit-state (record-accessor G2796@G2791 '8)) (set! G27b3@library-invoke-state (record-accessor G2796@G2791 '9)) (set! G27b5@library-visit-code (record-accessor G2796@G2791 '10)) (set! G27b7@library-invoke-code (record-accessor G2796@G2791 '11)) (set! G27b9@library-visible? (record-accessor G2796@G2791 '12)) (set! G27bb@library-source-file-name (record-accessor G2796@G2791 '13)) (set! G27bd@set-library-id! (record-mutator G2796@G2791 '0)) (set! G27bf@set-library-name! (record-mutator G2796@G2791 '1)) (set! G27c1@set-library-version! (record-mutator G2796@G2791 '2)) (set! G27c3@set-library-imp*! (record-mutator G2796@G2791 '3)) (set! G27c5@set-library-vis*! (record-mutator G2796@G2791 '4)) (set! G27c7@set-library-inv*! (record-mutator G2796@G2791 '5)) (set! G27c9@set-library-subst! (record-mutator G2796@G2791 '6)) (set! G27cb@set-library-env! (record-mutator G2796@G2791 '7)) (set! G27cd@set-library-visit-state! (record-mutator G2796@G2791 '8)) (set! G27cf@set-library-invoke-state! (record-mutator G2796@G2791 '9)) (set! G27d1@set-library-visit-code! (record-mutator G2796@G2791 '10)) (set! G27d3@set-library-invoke-code! (record-mutator G2796@G2791 '11)) (set! G27d5@set-library-visible?! (record-mutator G2796@G2791 '12)) (set! G27d7@set-library-source-file-name! (record-mutator G2796@G2791 '13)) (set! G27d9@rp (G26e5@G2610@make-record-printer 'library (lambda (G281a@x G281b@p G281c@wr) (begin (if (not (G279d@library? G281a@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G27a5@library-version G281a@x)) (G27a3@library-name G281a@x) (append (G27a3@library-name G281a@x) (list (G27a5@library-version G281a@x))))) G281b@p))))) (set! G27db@find-dependencies (lambda (G2820@ls) (if (null? G2820@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G27dd@find-library-by (lambda (G2822@pred) ((letrec ((G2824@f (lambda (G2826@ls) (if (null? G2826@ls) '#f (if (G2822@pred (car G2826@ls)) (car G2826@ls) (G2824@f (cdr G2826@ls))))))) G2824@f) ((G2790@current-library-collection))))) (set! G27df@library-path (G26e8@G2616@make-parameter '(".") (lambda (G2828@x) (if (and (list? G2828@x) (for-all string? G2828@x)) (map (lambda (G282a@x) G282a@x) G2828@x) (assertion-violation 'library-path '"not a list of strings" G2828@x))))) (set! G27e1@library-extensions (G26e8@G2616@make-parameter '(".sls" ".ss" ".scm") (lambda (G282c@x) (if (and (list? G282c@x) (for-all string? G282c@x)) (map (lambda (G282e@x) G282e@x) G282c@x) (assertion-violation 'library-extensions '"not a list of strings" G282c@x))))) (set! G27e3@library-name->file-name (lambda (G2830@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2834@G2832 G2835@G2833) ((lambda (G2838@extract G2839@p) ((lambda (G283d@display-hex) (begin (set! G283d@display-hex (lambda (G2846@n) (if (<= '0 G2846@n '9) (display G2846@n G2839@p) (display (integer->char (+ (char->integer '#\a) (- G2846@n '10))) G2839@p)))) (begin ((letrec ((G283e@f (lambda (G2840@ls) (if (not (null? G2840@ls)) (begin (display '"/" G2839@p) (for-each (lambda (G2842@c) (if (or (char<=? '#\a G2842@c '#\z) (char<=? '#\A G2842@c '#\Z) (char<=? '#\0 G2842@c '#\9) (memv G2842@c '(#\- #\. #\_ #\~))) (display G2842@c G2839@p) (begin (display '"%" G2839@p) ((lambda (G2844@n) (begin (G283d@display-hex (quotient G2844@n '16)) (G283d@display-hex (remainder G2844@n '16)))) (char->integer G2842@c))))) (string->list (symbol->string (car G2840@ls)))) (G283e@f (cdr G2840@ls))) (void))))) G283e@f) G2830@x) (G2838@extract)))) '#f)) G2835@G2833 G2834@G2832))))) (set! G27e5@file-locator (G26e8@G2616@make-parameter (lambda (G2848@x) ((lambda (G284a@str) ((letrec ((G284c@f (lambda (G284e@ls G284f@exts G2850@failed-list) (if (null? G284e@ls) ((lambda () ((lambda (G285c@G2857 G285e@G2859 G2860@G2858 G2863@G2856 G2865@make-library-resolution-condition G2867@G2854 G2869@G2855 G286b@library-resolution-condition? G286d@condition-library G286f@condition-files) (begin (set! G285c@G2857 (make-record-type-descriptor '&library-resolution G49b4@G4707@&condition-rtd 'G285a '#f '#f '#((immutable library) (immutable files)))) (set! G285e@G2859 '#f) (set! G2860@G2858 (make-record-constructor-descriptor G285c@G2857 G49b5@G4709@&condition-rcd G285e@G2859)) (set! G2863@G2856 (record-predicate G285c@G2857)) (set! G2865@make-library-resolution-condition (record-constructor G2860@G2858)) (set! G2867@G2854 (record-accessor G285c@G2857 '0)) (set! G2869@G2855 (record-accessor G285c@G2857 '1)) (set! G286b@library-resolution-condition? (condition-predicate G285c@G2857)) (set! G286d@condition-library (condition-accessor G285c@G2857 G2867@G2854)) (set! G286f@condition-files (condition-accessor G285c@G2857 G2869@G2855)) (raise (condition (G49d4@G479d@make-error) (G49f6@G47f7@make-who-condition 'expander) (G49ba@G475a@make-message-condition '"cannot locate library in library-path") (G2865@make-library-resolution-condition G2848@x (reverse G2850@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G284f@exts) (G284c@f (cdr G284e@ls) (G27e1@library-extensions) G2850@failed-list) ((lambda (G2870@name) (if (file-exists? G2870@name) G2870@name (G284c@f G284e@ls (cdr G284f@exts) (cons G2870@name G2850@failed-list)))) (string-append (car G284e@ls) G284a@str (car G284f@exts)))))))) G284c@f) (G27df@library-path) (G27e1@library-extensions) '())) (G27e3@library-name->file-name G2848@x))) (lambda (G2872@f) (if (procedure? G2872@f) G2872@f (assertion-violation 'file-locator '"not a procedure" G2872@f))))) (set! G27e7@serialize-all (lambda (G2874@serialize G2875@compile) ((lambda (G2879@library-desc) (begin (set! G2879@library-desc (lambda (G287c@x) (list (G27a1@library-id G287c@x) (G27a3@library-name G287c@x)))) (for-each (lambda (G287a@x) (if (G27bb@library-source-file-name G287a@x) (G2874@serialize (G27bb@library-source-file-name G287a@x) (list (G27a1@library-id G287a@x) (G27a3@library-name G287a@x) (G27a5@library-version G287a@x) (map G2879@library-desc (G27a7@library-imp* G287a@x)) (map G2879@library-desc (G27a9@library-vis* G287a@x)) (map G2879@library-desc (G27ab@library-inv* G287a@x)) (G27ad@library-subst G287a@x) (G27af@library-env G287a@x) (G2875@compile (G27b5@library-visit-code G287a@x)) (G2875@compile (G27b7@library-invoke-code G287a@x)) (G27b9@library-visible? G287a@x))) (void))) ((G2790@current-library-collection))))) '#f))) (set! G27e9@current-precompiled-library-loader (G26e8@G2616@make-parameter (lambda (G287e@filename G287f@sk) '#f))) (set! G27eb@try-load-from-file (lambda (G2882@filename) ((G27e9@current-precompiled-library-loader) G2882@filename (lambda G28a8 ((lambda (G28a9) (if (= G28a9 '11) (apply (lambda (G2884@id G2885@name G2886@ver G2887@imp* G2888@vis* G2889@inv* G288a@exp-subst G288b@exp-env G288c@visit-proc G288d@invoke-proc G288e@visible?) ((letrec ((G289a@f (lambda (G289c@deps) (if (null? G289c@deps) (begin (G27ff@install-library G2884@id G2885@name G2886@ver G2887@imp* G2888@vis* G2889@inv* G288a@exp-subst G288b@exp-env G288c@visit-proc G288d@invoke-proc '#f '#f G288e@visible? '#f) '#t) ((lambda (G289e@d) ((lambda (G28a0@label G28a1@dname) ((lambda (G28a4@l) (if (and (G279d@library? G28a4@l) (eq? G28a0@label (G27a1@library-id G28a4@l))) (G289a@f (cdr G289c@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2885@name G28a1@dname G2882@filename G28a4@l G28a0@label (G27a1@library-id G28a4@l)) '#f))) (G27f5@find-library-by-name G28a1@dname))) (car G289e@d) (cadr G289e@d))) (car G289c@deps)))))) G289a@f) (append G2887@imp* G2888@vis* G2889@inv*))) G28a8) (if (>= G28a9 '0) (apply (lambda G28a6@others '#f) G28a8) (error 'apply '"invalid arg count")))) (length G28a8)))))) (set! G27ed@library-loader (G26e8@G2616@make-parameter (lambda (G28aa@x) ((lambda (G28ac@file-name) (if (not G28ac@file-name) (assertion-violation '#f '"cannot file library" G28aa@x) (or (G27eb@try-load-from-file G28ac@file-name) ((G27ef@current-library-expander) (G26e7@G2614@read-library-source-file G28ac@file-name) G28ac@file-name (lambda (G28ae@name) (if (not (fast-equal? G28ae@name G28aa@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G28b2@G28b0 G28b3@G28b1) ((lambda (G28b6@e G28b7@p) (begin (display '"expected to find library " G28b7@p) (write G28aa@x G28b7@p) (display '" in file " G28b7@p) (display G28ac@file-name G28b7@p) (display '", found " G28b7@p) (write G28ae@name G28b7@p) (display '" instead" G28b7@p) (G28b6@e))) G28b3@G28b1 G28b2@G28b0)))) (void))))))) ((G27e5@file-locator) G28aa@x))) (lambda (G28ba@f) (if (procedure? G28ba@f) G28ba@f (assertion-violation 'library-locator '"not a procedure" G28ba@f))))) (set! G27ef@current-library-expander (G26e8@G2616@make-parameter (lambda (G28bc@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G28be@f) (if (procedure? G28be@f) G28be@f (assertion-violation 'library-expander '"not a procedure" G28be@f))))) (set! G27f1@external-pending-libraries (G26e8@G2616@make-parameter '())) (set! G27f3@find-external-library (lambda (G28c0@name) (begin (if (member G28c0@name (G27f1@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G28c0@name) (void)) ((lambda (G28c4@G28c2 G28c5@G28c3) ((lambda (G28c8@swap) (dynamic-wind G28c8@swap (lambda () (begin ((G27ed@library-loader) G28c0@name) (or (G27dd@find-library-by (lambda (G28ca@x) (fast-equal? (G27a3@library-name G28ca@x) G28c0@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G28c0@name)))) G28c8@swap)) (lambda () ((lambda (G28cc@t) (begin (G28c4@G28c2 G28c5@G28c3) (set! G28c5@G28c3 G28cc@t))) (G28c4@G28c2))))) G27f1@external-pending-libraries (cons G28c0@name (G27f1@external-pending-libraries)))))) (set! G27f5@find-library-by-name (lambda (G28ce@name) (or (G27dd@find-library-by (lambda (G28d0@x) (fast-equal? (G27a3@library-name G28d0@x) G28ce@name))) (G27f3@find-external-library G28ce@name)))) (set! G27f7@library-exists? (lambda (G28d2@name) (and (G27dd@find-library-by (lambda (G28d4@x) (fast-equal? (G27a3@library-name G28d4@x) G28d2@name))) '#t))) (set! G27f9@find-library-by-spec/die (lambda (G28d6@spec) ((lambda (G28d8@id) (or (G27dd@find-library-by (lambda (G28da@x) (eq? G28d8@id (G27a1@library-id G28da@x)))) (assertion-violation '#f '"cannot find library with required spec" G28d6@spec))) (car G28d6@spec)))) (set! G27fb@label->binding-table (make-eq-hashtable)) (set! G27fd@install-library-record (lambda (G28dc@lib) (begin ((lambda (G28de@exp-env) (for-each (lambda (G28e0@x) ((lambda (G28e2@label G28e3@binding) ((lambda (G28e6@binding) (begin (if (hashtable-ref G27fb@label->binding-table G28e2@label '#f) (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" G28e2@label (hashtable-ref G27fb@label->binding-table G28e2@label '#f) G28e6@binding) (void)) (hashtable-set! G27fb@label->binding-table G28e2@label G28e6@binding))) ((lambda (G28e8@t) (if (memv G28e8@t '(global)) (cons 'global (cons G28dc@lib (cdr G28e3@binding))) (if (memv G28e8@t '(global-macro)) (cons 'global-macro (cons G28dc@lib (cdr G28e3@binding))) (if (memv G28e8@t '(global-macro!)) (cons 'global-macro! (cons G28dc@lib (cdr G28e3@binding))) G28e3@binding)))) (car G28e3@binding)))) (car G28e0@x) (cdr G28e0@x))) G28de@exp-env)) (G27af@library-env G28dc@lib)) ((G2790@current-library-collection) G28dc@lib)))) (set! G27ff@install-library (lambda (G28ea@id G28eb@name G28ec@ver G28ed@imp* G28ee@vis* G28ef@inv* G28f0@exp-subst G28f1@exp-env G28f2@visit-proc G28f3@invoke-proc G28f4@visit-code G28f5@invoke-code G28f6@visible? G28f7@source-file-name) ((lambda (G2906@imp-lib* G2907@vis-lib* G2908@inv-lib*) (begin (if (not (and (symbol? G28ea@id) (list? G28eb@name) (list? G28ec@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G28ea@id G28eb@name G28ec@ver) (void)) (if (G27f7@library-exists? G28eb@name) (assertion-violation 'install-library '"library is already installed" G28eb@name) (void)) ((lambda (G290c@lib) (G27fd@install-library-record G290c@lib)) (G279f@make-library G28ea@id G28eb@name G28ec@ver G2906@imp-lib* G2907@vis-lib* G2908@inv-lib* G28f0@exp-subst G28f1@exp-env G28f2@visit-proc G28f3@invoke-proc G28f4@visit-code G28f5@invoke-code G28f6@visible? G28f7@source-file-name)))) (map G27f9@find-library-by-spec/die G28ed@imp*) (map G27f9@find-library-by-spec/die G28ee@vis*) (map G27f9@find-library-by-spec/die G28ef@inv*)))) (set! G2801@imported-label->binding (lambda (G290e@lab) (hashtable-ref G27fb@label->binding-table G290e@lab '#f))) (set! G2803@invoke-library (lambda (G2910@lib) ((lambda (G2912@invoke) (if (procedure? G2912@invoke) (begin (G27cf@set-library-invoke-state! G2910@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2910@lib))) (for-each G2803@invoke-library (G27ab@library-inv* G2910@lib)) (G27cf@set-library-invoke-state! G2910@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2910@lib))) (G2912@invoke) (G27cf@set-library-invoke-state! G2910@lib '#t)) (void))) (G27b3@library-invoke-state G2910@lib)))) (set! G2805@visit-library (lambda (G2914@lib) ((lambda (G2916@visit) (if (procedure? G2916@visit) (begin (G27cd@set-library-visit-state! G2914@lib (lambda () (assertion-violation 'visit '"circularity detected" G2914@lib))) (for-each G2803@invoke-library (G27a9@library-vis* G2914@lib)) (G27cd@set-library-visit-state! G2914@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2914@lib))) (G2916@visit) (G27cd@set-library-visit-state! G2914@lib '#t)) (void))) (G27b1@library-visit-state G2914@lib)))) (set! G2807@invoke-library-by-spec (lambda (G2918@spec) (G2803@invoke-library (G27f9@find-library-by-spec/die G2918@spec)))) (set! G2809@installed-libraries (lambda G2920 ((lambda (G2921) (if (= G2921 '1) (apply (lambda (G291a@all?) ((letrec ((G291c@f (lambda (G291e@ls) (if (null? G291e@ls) '() (if (or G291a@all? (G27b9@library-visible? (car G291e@ls))) (cons (car G291e@ls) (G291c@f (cdr G291e@ls))) (G291c@f (cdr G291e@ls))))))) G291c@f) ((G2790@current-library-collection)))) G2920) (if (= G2921 '0) (apply (lambda () (G2809@installed-libraries '#f)) G2920) (error 'apply '"invalid arg count")))) (length G2920)))) (set! G280b@library-spec (lambda (G2922@x) (begin (if (not (G279d@library? G2922@x)) (assertion-violation 'library-spec '"not a library" G2922@x) (void)) (list (G27a1@library-id G2922@x) (G27a3@library-name G2922@x) (G27a5@library-version G2922@x))))) (begin (set! G2960@G280b@library-spec G280b@library-spec) (set! G295f@G2809@installed-libraries G2809@installed-libraries) (set! G295e@G2807@invoke-library-by-spec G2807@invoke-library-by-spec) (set! G295d@G2805@visit-library G2805@visit-library) (set! G295c@G2803@invoke-library G2803@invoke-library) (set! G295b@G2801@imported-label->binding G2801@imported-label->binding) (set! G295a@G27ff@install-library G27ff@install-library) (set! G2959@G27fd@install-library-record G27fd@install-library-record) (set! G2958@G27fb@label->binding-table G27fb@label->binding-table) (set! G2957@G27f9@find-library-by-spec/die G27f9@find-library-by-spec/die) (set! G2956@G27f7@library-exists? G27f7@library-exists?) (set! G2955@G27f5@find-library-by-name G27f5@find-library-by-name) (set! G2954@G27f3@find-external-library G27f3@find-external-library) (set! G2953@G27f1@external-pending-libraries G27f1@external-pending-libraries) (set! G2952@G27ef@current-library-expander G27ef@current-library-expander) (set! G2951@G27ed@library-loader G27ed@library-loader) (set! G2950@G27eb@try-load-from-file G27eb@try-load-from-file) (set! G294f@G27e9@current-precompiled-library-loader G27e9@current-precompiled-library-loader) (set! G294e@G27e7@serialize-all G27e7@serialize-all) (set! G294d@G27e5@file-locator G27e5@file-locator) (set! G294c@G27e3@library-name->file-name G27e3@library-name->file-name) (set! G294b@G27e1@library-extensions G27e1@library-extensions) (set! G294a@G27df@library-path G27df@library-path) (set! G2949@G27dd@find-library-by G27dd@find-library-by) (set! G2948@G27db@find-dependencies G27db@find-dependencies) (set! G2947@G27d9@rp G27d9@rp) (set! G2946@G27d7@set-library-source-file-name! G27d7@set-library-source-file-name!) (set! G2945@G27d5@set-library-visible?! G27d5@set-library-visible?!) (set! G2944@G27d3@set-library-invoke-code! G27d3@set-library-invoke-code!) (set! G2943@G27d1@set-library-visit-code! G27d1@set-library-visit-code!) (set! G2942@G27cf@set-library-invoke-state! G27cf@set-library-invoke-state!) (set! G2941@G27cd@set-library-visit-state! G27cd@set-library-visit-state!) (set! G2940@G27cb@set-library-env! G27cb@set-library-env!) (set! G293f@G27c9@set-library-subst! G27c9@set-library-subst!) (set! G293e@G27c7@set-library-inv*! G27c7@set-library-inv*!) (set! G293d@G27c5@set-library-vis*! G27c5@set-library-vis*!) (set! G293c@G27c3@set-library-imp*! G27c3@set-library-imp*!) (set! G293b@G27c1@set-library-version! G27c1@set-library-version!) (set! G293a@G27bf@set-library-name! G27bf@set-library-name!) (set! G2939@G27bd@set-library-id! G27bd@set-library-id!) (set! G2938@G27bb@library-source-file-name G27bb@library-source-file-name) (set! G2937@G27b9@library-visible? G27b9@library-visible?) (set! G2936@G27b7@library-invoke-code G27b7@library-invoke-code) (set! G2935@G27b5@library-visit-code G27b5@library-visit-code) (set! G2934@G27b3@library-invoke-state G27b3@library-invoke-state) (set! G2933@G27b1@library-visit-state G27b1@library-visit-state) (set! G2932@G27af@library-env G27af@library-env) (set! G2931@G27ad@library-subst G27ad@library-subst) (set! G2930@G27ab@library-inv* G27ab@library-inv*) (set! G292f@G27a9@library-vis* G27a9@library-vis*) (set! G292e@G27a7@library-imp* G27a7@library-imp*) (set! G292d@G27a5@library-version G27a5@library-version) (set! G292c@G27a3@library-name G27a3@library-name) (set! G292b@G27a1@library-id G27a1@library-id) (set! G292a@G279f@make-library G279f@make-library) (set! G2929@G279d@library? G279d@library?) (set! G2928@G279a@G2792 G279a@G2792) (set! G2927@G2798@G2793 G2798@G2793) (set! G2926@G2796@G2791 G2796@G2791) (set! G2925@G2790@current-library-collection G2790@current-library-collection) (set! G2924@G278e@make-collection G278e@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2963@build-global-define G29d4@build-lambda G29d6@build-case-lambda G29d8@build-let G2a06@build-sequence G2a08@build-void G2a0a@build-letrec G2a0c@build-letrec* G2a0e@build-library-letrec* G2a10@build-receive) (begin (set! G2963@build-global-define (lambda (G2a11@x) (G2a08@build-void))) (set! G29d4@build-lambda (lambda (G2a13@ae G2a14@vars G2a15@exp) (list 'lambda G2a14@vars G2a15@exp))) (set! G29d6@build-case-lambda (lambda (G2a19@ae G2a1a@vars* G2a1b@exp*) ((lambda (G2a20@build-error G2a22@build-pred G2a24@build-apply G2a26@expand-case-lambda) (begin (set! G2a20@build-error (lambda (G2a55@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2a22@build-pred (lambda (G2a3f@ae G2a40@n G2a41@vars) (call-with-values (lambda () ((letrec ((G2a47@f (lambda (G2a49@vars G2a4a@count) (if (pair? G2a49@vars) (G2a47@f (cdr G2a49@vars) (+ G2a4a@count '1)) (if (null? G2a49@vars) (values G2a4a@count '=) (values G2a4a@count '>=)))))) G2a47@f) G2a41@vars '0)) (lambda (G2a4d@G2a45 G2a4e@G2a46) ((lambda (G2a51@pred G2a52@count) (list (list 'primitive G2a51@pred) G2a40@n (list 'quote G2a52@count))) G2a4e@G2a46 G2a4d@G2a45))))) (set! G2a24@build-apply (lambda (G2a37@ae G2a38@g G2a39@vars G2a3a@exp) (list '(primitive apply) (G29d4@build-lambda G2a37@ae G2a39@vars G2a3a@exp) G2a38@g))) (set! G2a26@expand-case-lambda (lambda (G2a27@ae G2a28@vars G2a29@exp*) ((lambda (G2a2d@g G2a2e@n) (list 'lambda G2a2d@g (G29d8@build-let G2a27@ae (list G2a2e@n) (list (list '(primitive length) G2a2d@g)) ((letrec ((G2a31@f (lambda (G2a33@vars* G2a34@exp*) (if (null? G2a33@vars*) (G2a20@build-error G2a27@ae) (list 'if (G2a22@build-pred G2a27@ae G2a2e@n (car G2a33@vars*)) (G2a24@build-apply G2a27@ae G2a2d@g (car G2a33@vars*) (car G2a34@exp*)) (G2a31@f (cdr G2a33@vars*) (cdr G2a34@exp*))))))) G2a31@f) G2a1a@vars* G2a29@exp*)))) (gensym) (gensym)))) (if (= (length G2a1b@exp*) '1) (G29d4@build-lambda G2a19@ae (car G2a1a@vars*) (car G2a1b@exp*)) (G2a26@expand-case-lambda G2a19@ae G2a1a@vars* G2a1b@exp*)))) '#f '#f '#f '#f))) (set! G29d8@build-let (lambda (G2a57@ae G2a58@lhs* G2a59@rhs* G2a5a@body) (cons (G29d4@build-lambda G2a57@ae G2a58@lhs* G2a5a@body) G2a59@rhs*))) (set! G2a06@build-sequence (lambda (G2a5f@ae G2a60@exps) ((letrec ((G2a63@loop (lambda (G2a65@exps) (if (null? (cdr G2a65@exps)) (car G2a65@exps) (if (equal? (car G2a65@exps) (G2a08@build-void)) (G2a63@loop (cdr G2a65@exps)) (cons 'begin G2a65@exps)))))) G2a63@loop) G2a60@exps))) (set! G2a08@build-void (lambda () '((primitive void)))) (set! G2a0a@build-letrec (lambda (G2a67@ae G2a68@vars G2a69@val-exps G2a6a@body-exp) (if (null? G2a68@vars) G2a6a@body-exp (list 'letrec (map list G2a68@vars G2a69@val-exps) G2a6a@body-exp)))) (set! G2a0c@build-letrec* (lambda (G2a6f@ae G2a70@vars G2a71@val-exps G2a72@body-exp) (if (null? G2a70@vars) G2a72@body-exp (G29d8@build-let G2a6f@ae G2a70@vars (map (lambda (G2a77@x) (list 'quote '#f)) G2a70@vars) (G2a06@build-sequence G2a6f@ae (append (map (lambda (G2a79@lhs G2a7a@rhs) (list 'set! G2a79@lhs G2a7a@rhs)) G2a70@vars G2a71@val-exps) (list G2a72@body-exp))))))) (set! G2a0e@build-library-letrec* (lambda (G2a7d@ae G2a7e@name G2a7f@vars G2a80@locs G2a81@val-exps G2a82@body-exp) (list 'library-letrec* G2a7e@name (map list G2a7f@vars G2a80@locs G2a81@val-exps) G2a82@body-exp))) (set! G2a10@build-receive (lambda (G2a89@ae G2a8a@vars G2a8b@producer G2a8c@body*) (begin (display '"************** in ") (cons 'receive (cons G2a8a@vars (cons G2a8b@producer G2a8c@body*)))))) (begin (set! G2a9a@G2a10@build-receive G2a10@build-receive) (set! G2a99@G2a0e@build-library-letrec* G2a0e@build-library-letrec*) (set! G2a98@G2a0c@build-letrec* G2a0c@build-letrec*) (set! G2a97@G2a0a@build-letrec G2a0a@build-letrec) (set! G2a96@G2a08@build-void G2a08@build-void) (set! G2a95@G2a06@build-sequence G2a06@build-sequence) (set! G2a94@G29d8@build-let G29d8@build-let) (set! G2a93@G29d6@build-case-lambda G29d6@build-case-lambda) (set! G2a92@G29d4@build-lambda G29d4@build-lambda) (set! G2a91@G2963@build-global-define G2963@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2aa9@set-cons G2aab@set-union G2ab0@top-mark* G2ab2@top-marked? G2ab4@gen-lexical G2ab6@gen-global G2ab8@gen-label G2aba@gen-top-level-label G2abc@gen-define-label+loc G2abe@gen-define-label G2ac4@G2abf G2ac6@G2ac1 G2ac8@G2ac0 G2acb@rib? G2acd@make-rib G2acf@rib-sym* G2ad1@rib-mark** G2ad3@rib-label* G2ad5@rib-sealed/freq G2ad7@rib-cache G2ad9@set-rib-sym*! G2adb@set-rib-mark**! G2add@set-rib-label*! G2adf@set-rib-sealed/freq! G2ae1@set-rib-cache! G2ae3@make-empty-rib G2ae5@extend-rib! G2ae7@extend-rib/nc! G2ae9@make-rib-map G2aeb@seal-rib! G2aed@unseal-rib! G2aef@make-full-rib G2af5@G2af0 G2af7@G2af2 G2af9@G2af1 G2afc@stx? G2afe@make-stx G2b00@stx-expr G2b02@stx-mark* G2b04@stx-subst* G2b06@stx-ae* G2b08@set-stx-expr! G2b0a@set-stx-mark*! G2b0c@set-stx-subst*! G2b0e@set-stx-ae*! G2b10@rp G2b12@datum->stx G2b14@gen-mark G2b16@anti-mark G2b18@anti-mark? G2b1a@join-wraps G2b1c@mkstx G2b1e@add-mark G2b20@add-subst G2b22@syntax-kind? G2b24@syntax-vector->list G2b26@syntax-pair? G2b28@syntax-vector? G2b2a@syntax-null? G2b2c@syntax-list? G2b2e@syntax-car G2b30@syntax-cdr G2b32@syntax->list G2b34@id? G2b36@id->sym G2b38@same-marks? G2b3a@bound-id=? G2b3c@free-id=? G2b3e@valid-bound-ids? G2b40@distinct-bound-ids? G2b42@bound-id-member? G2b44@self-evaluating? G2b46@strip-annotations G2b48@strip G2b4a@stx->datum G2b4c@same-marks*? G2b4e@id->label G2b50@id->real-label G2b52@label->binding G2b54@make-binding G2b56@binding-type G2b58@binding-value G2b5a@raise-unbound-error G2b5c@syntax-type G2b6a@sanitize-binding G2b6c@make-variable-transformer G2b6e@variable-transformer? G2b70@variable-transformer-procedure G2b72@make-eval-transformer G2ca9@parse-define G2cab@parse-define-syntax G2cad@scheme-stx-hashtable G2caf@scheme-stx G2cb1@lexical-var G2cb3@lexical-mutable? G2cb5@set-lexical-mutable! G2cb7@add-lexical G2cb9@add-lexicals G2cbb@letrec-helper G2cbd@letrec-transformer G2cbf@letrec*-transformer G2cc1@fluid-let-syntax-transformer G2cc3@type-descriptor-transformer G2cc5@record-type-descriptor-transformer G2cc7@record-constructor-descriptor-transformer G2cc9@when-macro G2ccb@unless-macro G2ccd@if-transformer G2ccf@and-transformer G2cd1@or-transformer G2cd3@case-macro G2cd5@quote-transformer G2cd7@case-lambda-transformer G2cd9@lambda-transformer G2cdb@bless G2cdd@with-syntax-macro G2cdf@invalid-fmls-error G2ce1@let-macro G2ce3@let-values-macro G2ce5@let*-values-macro G2ce7@trace-lambda-macro G2ce9@trace-define-macro G2ceb@trace-define-syntax-macro G2ced@trace-let/rec-syntax G2cef@trace-let-syntax-macro G2cf1@trace-letrec-syntax-macro G2cf3@guard-macro G2cf5@define-enumeration-macro G2cf7@time-macro G2cf9@delay-macro G2cfb@assert-macro G2cfd@endianness-macro G2cff@identifier-syntax-macro G2d01@do-macro G2d03@let*-macro G2d05@or-macro G2d07@and-macro G2d09@cond-macro G2d0b@do-include G2d0d@include-macro G2d0f@include-into-macro G2d11@syntax-rules-macro G2d13@quasiquote-macro G2d15@quasisyntax-macro G2d17@define-struct-macro G2d19@define-record-type-macro G2d1b@define-condition-type-macro G2d1d@incorrect-usage-macro G2d1f@parameterize-macro G2d21@foreign-call-transformer G2d23@convert-pattern G2d25@syntax-dispatch G2d27@ellipsis? G2d29@underscore? G2d2b@verify-literals G2d2d@syntax-case-transformer G2d2f@ellipsis-map G2d31@syntax-transformer G2d33@core-macro-transformer G2d35@file-options-macro G2d37@symbol-macro G2d39@macro-transformer G2d3b@local-macro-transformer G2d3d@do-macro-call G2d3f@chi-macro G2d41@chi-local-macro G2d43@chi-global-macro G2d45@chi-expr* G2d47@chi-application G2d49@chi-expr G2d4b@chi-set! G2d4d@verify-formals G2d4f@chi-lambda-clause G2d51@chi-lambda-clause* G2d53@chi-defun G2d55@chi-rhs G2d57@expand-interaction-rhs*/init* G2d59@chi-rhs* G2d5b@find-bound=? G2d5d@find-dups G2d5f@chi-internal G2d61@parse-module G2d67@G2d62 G2d69@G2d64 G2d6b@G2d63 G2d6e@module-interface? G2d70@make-module-interface G2d72@module-interface-first-mark G2d74@module-interface-exp-id-vec G2d76@module-interface-exp-lab-vec G2d78@set-module-interface-first-mark! G2d7a@set-module-interface-exp-id-vec! G2d7c@set-module-interface-exp-lab-vec! G2d7e@module-interface-exp-id* G2d80@chi-internal-module G2d82@chi-body* G2d84@expand-transformer G2d86@parse-exports G2d88@parse-library-name G2d8a@parse-library G2d8c@parse-import-spec* G2d8e@make-top-rib G2d90@make-collector G2d92@inv-collector G2d94@vis-collector G2d96@imp-collector G2d98@chi-library-internal G2d9a@chi-interaction-expr G2d9c@library-body-expander G2d9e@core-library-expander G2da0@parse-top-level-program G2da2@top-level-expander G2da8@G2da3 G2daa@G2da5 G2dac@G2da4 G2daf@env? G2db1@make-env G2db3@env-names G2db5@env-labels G2db7@env-itc G2db9@set-env-names! G2dbb@set-env-labels! G2dbd@set-env-itc! G2dbf@rp G2dc5@G2dc0 G2dc7@G2dc2 G2dc9@G2dc1 G2dcc@interaction-env? G2dce@make-interaction-env G2dd0@interaction-env-rib G2dd2@interaction-env-r G2dd4@interaction-env-locs G2dd6@set-interaction-env-rib! G2dd8@set-interaction-env-r! G2dda@set-interaction-env-locs! G2ddc@rp G2dde@interaction-environment-symbols G2de0@environment-bindings G2de2@parse-binding G2de4@environment? G2de6@environment-symbols G2de8@environment G2dea@null-environment G2dec@scheme-report-environment G2dee@expand G2df0@eval G2df2@library-expander G2df4@boot-library-expand G2df6@rev-map-append G2df8@build-exports G2dfa@make-export-subst G2dfc@make-export-env/macros G2dfe@generate-temporaries G2e00@free-identifier=? G2e02@bound-identifier=? G2e04@make-source-condition G2e06@extract-position-condition G2e08@expression-position G2e0a@assertion-error G2e0c@syntax-error G2e0e@syntax-violation* G2e10@syntax-violation G2e12@identifier? G2e14@datum->syntax G2e16@syntax->datum G2e18@compile-r6rs-top-level G2e1a@pre-compile-r6rs-top-level G2e1c@interaction-environment G2e1e@top-level-context) (begin (set! G2aa9@set-cons (lambda (G2e1f@x G2e20@ls) (if (memq G2e1f@x G2e20@ls) G2e20@ls (cons G2e1f@x G2e20@ls)))) (set! G2aab@set-union (lambda (G2e23@ls1 G2e24@ls2) (if (null? G2e23@ls1) G2e24@ls2 (if (memq (car G2e23@ls1) G2e24@ls2) (G2aab@set-union (cdr G2e23@ls1) G2e24@ls2) (cons (car G2e23@ls1) (G2aab@set-union (cdr G2e23@ls1) G2e24@ls2)))))) (set! G2ab0@top-mark* '(top)) (set! G2ab2@top-marked? (lambda (G2e27@m*) (memq 'top G2e27@m*))) (set! G2ab4@gen-lexical (lambda (G2e29@sym) (if (symbol? G2e29@sym) (gensym G2e29@sym) (if (G2afc@stx? G2e29@sym) (G2ab4@gen-lexical (G2b36@id->sym G2e29@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G2e29@sym))))) (set! G2ab6@gen-global (lambda (G2e2b@x) (G2ab4@gen-lexical G2e2b@x))) (set! G2ab8@gen-label (lambda (G2e2d@_) (gensym))) (set! G2aba@gen-top-level-label (lambda (G2e2f@id G2e30@rib) ((lambda (G2e34@find) (begin (set! G2e34@find (lambda (G2e3f@sym G2e40@mark* G2e41@sym* G2e42@mark** G2e43@label*) (and (pair? G2e41@sym*) (if (and (eq? G2e3f@sym (car G2e41@sym*)) (G2b38@same-marks? G2e40@mark* (car G2e42@mark**))) (car G2e43@label*) (G2e34@find G2e3f@sym G2e40@mark* (cdr G2e41@sym*) (cdr G2e42@mark**) (cdr G2e43@label*)))))) ((lambda (G2e35@sym G2e36@mark*) ((lambda (G2e39@sym*) ((lambda (G2e3b@t) (if G2e3b@t ((lambda (G2e3d@label) (if (G295b@G2801@imported-label->binding G2e3d@label) (gensym) G2e3d@label)) G2e3b@t) (gensym))) (and (memq G2e35@sym (G2acf@rib-sym* G2e30@rib)) (G2e34@find G2e35@sym G2e36@mark* G2e39@sym* (G2ad1@rib-mark** G2e30@rib) (G2ad3@rib-label* G2e30@rib))))) (G2acf@rib-sym* G2e30@rib))) (G2b36@id->sym G2e2f@id) (G2b02@stx-mark* G2e2f@id)))) '#f))) (set! G2abc@gen-define-label+loc (lambda (G2e49@id G2e4a@rib) ((lambda (G2e4d@t) (if G2e4d@t ((lambda (G2e4f@env) ((lambda (G2e51@label G2e52@locs) (values G2e51@label ((lambda (G2e55@t) (if G2e55@t (cdr G2e55@t) ((lambda (G2e57@loc) (begin (G2dda@set-interaction-env-locs! G2e4f@env (cons (cons G2e51@label G2e57@loc) G2e52@locs)) G2e57@loc)) (G2ab4@gen-lexical G2e49@id)))) (assq G2e51@label G2e52@locs)))) (G2aba@gen-top-level-label G2e49@id G2e4a@rib) (G2dd4@interaction-env-locs G2e4f@env))) G2e4d@t) (values (gensym) (G2ab4@gen-lexical G2e49@id)))) (G2e1e@top-level-context)))) (set! G2abe@gen-define-label (lambda (G2e59@id G2e5a@rib) (if (G2e1e@top-level-context) (G2aba@gen-top-level-label G2e59@id G2e5a@rib) (gensym)))) (set! G2ac4@G2abf (make-record-type-descriptor 'rib '#f 'G2ac2 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2ac6@G2ac1 '#f) (set! G2ac8@G2ac0 (make-record-constructor-descriptor G2ac4@G2abf '#f G2ac6@G2ac1)) (set! G2acb@rib? (record-predicate G2ac4@G2abf)) (set! G2acd@make-rib (record-constructor G2ac8@G2ac0)) (set! G2acf@rib-sym* (record-accessor G2ac4@G2abf '0)) (set! G2ad1@rib-mark** (record-accessor G2ac4@G2abf '1)) (set! G2ad3@rib-label* (record-accessor G2ac4@G2abf '2)) (set! G2ad5@rib-sealed/freq (record-accessor G2ac4@G2abf '3)) (set! G2ad7@rib-cache (record-accessor G2ac4@G2abf '4)) (set! G2ad9@set-rib-sym*! (record-mutator G2ac4@G2abf '0)) (set! G2adb@set-rib-mark**! (record-mutator G2ac4@G2abf '1)) (set! G2add@set-rib-label*! (record-mutator G2ac4@G2abf '2)) (set! G2adf@set-rib-sealed/freq! (record-mutator G2ac4@G2abf '3)) (set! G2ae1@set-rib-cache! (record-mutator G2ac4@G2abf '4)) (set! G2ae3@make-empty-rib (lambda () (G2acd@make-rib '() '() '() '#f '#f))) (set! G2ae5@extend-rib! (lambda (G2e5d@rib G2e5e@id G2e5f@label) ((lambda (G2e64@find) (begin (set! G2e64@find (lambda (G2e71@sym G2e72@mark* G2e73@sym* G2e74@mark** G2e75@label*) (and (pair? G2e73@sym*) (if (and (eq? G2e71@sym (car G2e73@sym*)) (G2b38@same-marks? G2e72@mark* (car G2e74@mark**))) G2e75@label* (G2e64@find G2e71@sym G2e72@mark* (cdr G2e73@sym*) (cdr G2e74@mark**) (cdr G2e75@label*)))))) (begin (if (G2ad5@rib-sealed/freq G2e5d@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G2e5d@rib) (void)) ((lambda (G2e65@sym G2e66@mark*) ((lambda (G2e69@sym*) ((lambda (G2e6b@t) (if G2e6b@t ((lambda (G2e6d@p) (if (not (eq? G2e5f@label (car G2e6d@p))) (if (G2e1e@top-level-context) (set-car! G2e6d@p G2e5f@label) (G2e10@syntax-violation '#f '"multiple definitions of identifier" G2e5e@id)) (void))) G2e6b@t) (begin (if (G2ad7@rib-cache G2e5d@rib) (hashtable-update! (G2ad7@rib-cache G2e5d@rib) G2e65@sym (lambda (G2e6f@e) (cons (cons G2e66@mark* G2e5f@label) G2e6f@e)) '()) (void)) (G2ad9@set-rib-sym*! G2e5d@rib (cons G2e65@sym G2e69@sym*)) (G2adb@set-rib-mark**! G2e5d@rib (cons G2e66@mark* (G2ad1@rib-mark** G2e5d@rib))) (G2add@set-rib-label*! G2e5d@rib (cons G2e5f@label (G2ad3@rib-label* G2e5d@rib)))))) (and (memq G2e65@sym (G2acf@rib-sym* G2e5d@rib)) (G2e64@find G2e65@sym G2e66@mark* G2e69@sym* (G2ad1@rib-mark** G2e5d@rib) (G2ad3@rib-label* G2e5d@rib))))) (G2acf@rib-sym* G2e5d@rib))) (G2b36@id->sym G2e5e@id) (G2b02@stx-mark* G2e5e@id))))) '#f))) (set! G2ae7@extend-rib/nc! (lambda (G2e7b@rib G2e7c@id G2e7d@label) ((lambda (G2e81@sym G2e82@mark*) ((lambda (G2e85@sym*) (begin (if (G2ad7@rib-cache G2e7b@rib) (hashtable-update! (G2ad7@rib-cache G2e7b@rib) G2e81@sym (lambda (G2e87@e) (cons (cons G2e82@mark* G2e7d@label) G2e87@e)) '()) (void)) (G2ad9@set-rib-sym*! G2e7b@rib (cons G2e81@sym G2e85@sym*)) (G2adb@set-rib-mark**! G2e7b@rib (cons G2e82@mark* (G2ad1@rib-mark** G2e7b@rib))) (G2add@set-rib-label*! G2e7b@rib (cons G2e7d@label (G2ad3@rib-label* G2e7b@rib))))) (G2acf@rib-sym* G2e7b@rib))) (G2b36@id->sym G2e7c@id) (G2b02@stx-mark* G2e7c@id)))) (set! G2ae9@make-rib-map (lambda (G2e89@sym*) ((lambda (G2e8b@ht) ((letrec ((G2e8d@f (lambda (G2e8f@i G2e90@sym*) (if (null? G2e90@sym*) G2e8b@ht (begin (hashtable-update! G2e8b@ht (car G2e90@sym*) (lambda (G2e93@x) (cons G2e8f@i G2e93@x)) '()) (G2e8d@f (+ G2e8f@i '1) (cdr G2e90@sym*))))))) G2e8d@f) '0 G2e89@sym*)) (make-eq-hashtable)))) (set! G2aeb@seal-rib! (lambda (G2e95@rib) ((lambda (G2e97@sym*) (if (not (null? G2e97@sym*)) (begin (G2ad9@set-rib-sym*! G2e95@rib (list->vector G2e97@sym*)) (G2adb@set-rib-mark**! G2e95@rib (list->vector (G2ad1@rib-mark** G2e95@rib))) (G2add@set-rib-label*! G2e95@rib (list->vector (G2ad3@rib-label* G2e95@rib))) (G2adf@set-rib-sealed/freq! G2e95@rib (G2ae9@make-rib-map G2e97@sym*))) (void))) (G2acf@rib-sym* G2e95@rib)))) (set! G2aed@unseal-rib! (lambda (G2e99@rib) (if (G2ad5@rib-sealed/freq G2e99@rib) (begin (G2adf@set-rib-sealed/freq! G2e99@rib '#f) (G2ad9@set-rib-sym*! G2e99@rib (vector->list (G2acf@rib-sym* G2e99@rib))) (G2adb@set-rib-mark**! G2e99@rib (vector->list (G2ad1@rib-mark** G2e99@rib))) (G2add@set-rib-label*! G2e99@rib (vector->list (G2ad3@rib-label* G2e99@rib)))) (void)))) (set! G2aef@make-full-rib (lambda (G2e9b@id* G2e9c@label*) ((lambda (G2e9f@r) (begin (G2aeb@seal-rib! G2e9f@r) G2e9f@r)) (G2acd@make-rib (map G2b36@id->sym G2e9b@id*) (map G2b02@stx-mark* G2e9b@id*) G2e9c@label* '#f '#f)))) (set! G2af5@G2af0 (make-record-type-descriptor 'stx '#f 'G2af3 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2af7@G2af2 '#f) (set! G2af9@G2af1 (make-record-constructor-descriptor G2af5@G2af0 '#f G2af7@G2af2)) (set! G2afc@stx? (record-predicate G2af5@G2af0)) (set! G2afe@make-stx (record-constructor G2af9@G2af1)) (set! G2b00@stx-expr (record-accessor G2af5@G2af0 '0)) (set! G2b02@stx-mark* (record-accessor G2af5@G2af0 '1)) (set! G2b04@stx-subst* (record-accessor G2af5@G2af0 '2)) (set! G2b06@stx-ae* (record-accessor G2af5@G2af0 '3)) (set! G2b08@set-stx-expr! (record-mutator G2af5@G2af0 '0)) (set! G2b0a@set-stx-mark*! (record-mutator G2af5@G2af0 '1)) (set! G2b0c@set-stx-subst*! (record-mutator G2af5@G2af0 '2)) (set! G2b0e@set-stx-ae*! (record-mutator G2af5@G2af0 '3)) (set! G2b10@rp (G26e5@G2610@make-record-printer 'stx (lambda (G2ea1@x G2ea2@p G2ea3@wr) (begin (display '"#<syntax " G2ea2@p) (write (G2b4a@stx->datum G2ea1@x) G2ea2@p) ((lambda (G2ea7@expr) (if (G26dd@G2600@annotation? G2ea7@expr) ((lambda (G2ea9@src) (if (pair? G2ea9@src) (begin (display '" [" G2ea2@p) (display (cdr G2ea9@src) G2ea2@p) (display '" of " G2ea2@p) (display (car G2ea9@src) G2ea2@p) (display '"]" G2ea2@p)) (void))) (G26de@G2602@annotation-source G2ea7@expr)) (void))) (G2b00@stx-expr G2ea1@x)) (display '">" G2ea2@p))))) (set! G2b12@datum->stx (lambda (G2eab@id G2eac@datum) (G2afe@make-stx G2eac@datum (G2b02@stx-mark* G2eab@id) (G2b04@stx-subst* G2eab@id) (G2b06@stx-ae* G2eab@id)))) (set! G2b14@gen-mark (lambda () (string '#\m))) (set! G2b16@anti-mark '#f) (set! G2b18@anti-mark? not) (set! G2b1a@join-wraps (lambda (G2eaf@m1* G2eb0@s1* G2eb1@ae1* G2eb2@e) ((lambda (G2eb8@cancel) (begin (set! G2eb8@cancel (lambda (G2ebf@ls1 G2ec0@ls2) ((letrec ((G2ec3@f (lambda (G2ec5@x G2ec6@ls1) (if (null? G2ec6@ls1) (cdr G2ec0@ls2) (cons G2ec5@x (G2ec3@f (car G2ec6@ls1) (cdr G2ec6@ls1))))))) G2ec3@f) (car G2ebf@ls1) (cdr G2ebf@ls1)))) ((lambda (G2eb9@m2* G2eba@s2* G2ebb@ae2*) (if (and (not (null? G2eaf@m1*)) (not (null? G2eb9@m2*)) (G2b18@anti-mark? (car G2eb9@m2*))) (values (G2eb8@cancel G2eaf@m1* G2eb9@m2*) (G2eb8@cancel G2eb0@s1* G2eba@s2*) (G2eb8@cancel G2eb1@ae1* G2ebb@ae2*)) (values (append G2eaf@m1* G2eb9@m2*) (append G2eb0@s1* G2eba@s2*) (append G2eb1@ae1* G2ebb@ae2*)))) (G2b02@stx-mark* G2eb2@e) (G2b04@stx-subst* G2eb2@e) (G2b06@stx-ae* G2eb2@e)))) '#f))) (set! G2b1c@mkstx (lambda (G2ec9@e G2eca@m* G2ecb@s* G2ecc@ae*) (if (and (G2afc@stx? G2ec9@e) (not (G2ab2@top-marked? G2eca@m*))) (call-with-values (lambda () (G2b1a@join-wraps G2eca@m* G2ecb@s* G2ecc@ae* G2ec9@e)) (lambda (G2ed4@G2ed1 G2ed5@G2ed2 G2ed6@G2ed3) ((lambda (G2eda@ae* G2edb@s* G2edc@m*) (G2afe@make-stx (G2b00@stx-expr G2ec9@e) G2edc@m* G2edb@s* G2eda@ae*)) G2ed6@G2ed3 G2ed5@G2ed2 G2ed4@G2ed1))) (G2afe@make-stx G2ec9@e G2eca@m* G2ecb@s* G2ecc@ae*)))) (set! G2b1e@add-mark (lambda (G2ee0@m G2ee1@e G2ee2@ae) (G2b1c@mkstx G2ee1@e (list G2ee0@m) '(shift) (list G2ee2@ae)))) (set! G2b20@add-subst (lambda (G2ee6@subst G2ee7@e) (G2b1c@mkstx G2ee7@e '() (list G2ee6@subst) '()))) (set! G2b22@syntax-kind? (lambda (G2eea@x G2eeb@p?) (if (G2afc@stx? G2eea@x) (G2b22@syntax-kind? (G2b00@stx-expr G2eea@x) G2eeb@p?) (if (G26dd@G2600@annotation? G2eea@x) (G2b22@syntax-kind? (G26df@G2604@annotation-expression G2eea@x) G2eeb@p?) (G2eeb@p? G2eea@x))))) (set! G2b24@syntax-vector->list (lambda (G2eee@x) (if (G2afc@stx? G2eee@x) ((lambda (G2ef0@ls G2ef1@m* G2ef2@s* G2ef3@ae*) (map (lambda (G2ef8@x) (G2b1c@mkstx G2ef8@x G2ef1@m* G2ef2@s* G2ef3@ae*)) G2ef0@ls)) (G2b24@syntax-vector->list (G2b00@stx-expr G2eee@x)) (G2b02@stx-mark* G2eee@x) (G2b04@stx-subst* G2eee@x) (G2b06@stx-ae* G2eee@x)) (if (G26dd@G2600@annotation? G2eee@x) (G2b24@syntax-vector->list (G26df@G2604@annotation-expression G2eee@x)) (if (vector? G2eee@x) (vector->list G2eee@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G2eee@x)))))) (set! G2b26@syntax-pair? (lambda (G2efa@x) (G2b22@syntax-kind? G2efa@x pair?))) (set! G2b28@syntax-vector? (lambda (G2efc@x) (G2b22@syntax-kind? G2efc@x vector?))) (set! G2b2a@syntax-null? (lambda (G2efe@x) (G2b22@syntax-kind? G2efe@x null?))) (set! G2b2c@syntax-list? (lambda (G2f00@x) (or (G2b2a@syntax-null? G2f00@x) (and (G2b26@syntax-pair? G2f00@x) (G2b2c@syntax-list? (G2b30@syntax-cdr G2f00@x)))))) (set! G2b2e@syntax-car (lambda (G2f02@x) (if (G2afc@stx? G2f02@x) (G2b1c@mkstx (G2b2e@syntax-car (G2b00@stx-expr G2f02@x)) (G2b02@stx-mark* G2f02@x) (G2b04@stx-subst* G2f02@x) (G2b06@stx-ae* G2f02@x)) (if (G26dd@G2600@annotation? G2f02@x) (G2b2e@syntax-car (G26df@G2604@annotation-expression G2f02@x)) (if (pair? G2f02@x) (car G2f02@x) (assertion-violation 'syntax-car '"BUG: not a pair" G2f02@x)))))) (set! G2b30@syntax-cdr (lambda (G2f04@x) (if (G2afc@stx? G2f04@x) (G2b1c@mkstx (G2b30@syntax-cdr (G2b00@stx-expr G2f04@x)) (G2b02@stx-mark* G2f04@x) (G2b04@stx-subst* G2f04@x) (G2b06@stx-ae* G2f04@x)) (if (G26dd@G2600@annotation? G2f04@x) (G2b30@syntax-cdr (G26df@G2604@annotation-expression G2f04@x)) (if (pair? G2f04@x) (cdr G2f04@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G2f04@x)))))) (set! G2b32@syntax->list (lambda (G2f06@x) (if (G2b26@syntax-pair? G2f06@x) (cons (G2b2e@syntax-car G2f06@x) (G2b32@syntax->list (G2b30@syntax-cdr G2f06@x))) (if (G2b2a@syntax-null? G2f06@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G2f06@x))))) (set! G2b34@id? (lambda (G2f08@x) (and (G2afc@stx? G2f08@x) ((lambda (G2f0a@expr) (symbol? (if (G26dd@G2600@annotation? G2f0a@expr) (G26dc@G25fe@annotation-stripped G2f0a@expr) G2f0a@expr))) (G2b00@stx-expr G2f08@x))))) (set! G2b36@id->sym (lambda (G2f0c@x) (begin (if (not (G2afc@stx? G2f0c@x)) (error 'id->sym '"BUG in ikarus: not an id" G2f0c@x) (void)) ((lambda (G2f0e@expr) ((lambda (G2f10@sym) (if (symbol? G2f10@sym) G2f10@sym (error 'id->sym '"BUG in ikarus: not an id" G2f0c@x))) (if (G26dd@G2600@annotation? G2f0e@expr) (G26dc@G25fe@annotation-stripped G2f0e@expr) G2f0e@expr))) (G2b00@stx-expr G2f0c@x))))) (set! G2b38@same-marks? (lambda (G2f12@x G2f13@y) (or (and (null? G2f12@x) (null? G2f13@y)) (and (pair? G2f12@x) (pair? G2f13@y) (eq? (car G2f12@x) (car G2f13@y)) (G2b38@same-marks? (cdr G2f12@x) (cdr G2f13@y)))))) (set! G2b3a@bound-id=? (lambda (G2f16@x G2f17@y) (and (eq? (G2b36@id->sym G2f16@x) (G2b36@id->sym G2f17@y)) (G2b38@same-marks? (G2b02@stx-mark* G2f16@x) (G2b02@stx-mark* G2f17@y))))) (set! G2b3c@free-id=? (lambda (G2f1a@i G2f1b@j) ((lambda (G2f1e@t0 G2f1f@t1) (if (or G2f1e@t0 G2f1f@t1) (eq? G2f1e@t0 G2f1f@t1) (eq? (G2b36@id->sym G2f1a@i) (G2b36@id->sym G2f1b@j)))) (G2b50@id->real-label G2f1a@i) (G2b50@id->real-label G2f1b@j)))) (set! G2b3e@valid-bound-ids? (lambda (G2f22@id*) (and (for-all G2b34@id? G2f22@id*) (G2b40@distinct-bound-ids? G2f22@id*)))) (set! G2b40@distinct-bound-ids? (lambda (G2f24@id*) (or (null? G2f24@id*) (and (not (G2b42@bound-id-member? (car G2f24@id*) (cdr G2f24@id*))) (G2b40@distinct-bound-ids? (cdr G2f24@id*)))))) (set! G2b42@bound-id-member? (lambda (G2f26@id G2f27@id*) (and (pair? G2f27@id*) (or (G2b3a@bound-id=? G2f26@id (car G2f27@id*)) (G2b42@bound-id-member? G2f26@id (cdr G2f27@id*)))))) (set! G2b44@self-evaluating? (lambda (G2f2a@x) (or (number? G2f2a@x) (string? G2f2a@x) (char? G2f2a@x) (boolean? G2f2a@x) (regexp? G2f2a@x) (bytevector? G2f2a@x)))) (set! G2b46@strip-annotations (lambda (G2f2c@x) (if (pair? G2f2c@x) (cons (G2b46@strip-annotations (car G2f2c@x)) (G2b46@strip-annotations (cdr G2f2c@x))) (if (vector? G2f2c@x) (vector-map G2b46@strip-annotations G2f2c@x) (if (G26dd@G2600@annotation? G2f2c@x) (G26dc@G25fe@annotation-stripped G2f2c@x) G2f2c@x))))) (set! G2b48@strip (lambda (G2f2e@x G2f2f@m*) (if (G2ab2@top-marked? G2f2f@m*) (if (or (G26dd@G2600@annotation? G2f2e@x) (and (pair? G2f2e@x) (G26dd@G2600@annotation? (car G2f2e@x))) (and (vector? G2f2e@x) (> (vector-length G2f2e@x) '0) (G26dd@G2600@annotation? (vector-ref G2f2e@x '0)))) (G2b46@strip-annotations G2f2e@x) G2f2e@x) ((letrec ((G2f32@f (lambda (G2f34@x) (if (G2afc@stx? G2f34@x) (G2b48@strip (G2b00@stx-expr G2f34@x) (G2b02@stx-mark* G2f34@x)) (if (G26dd@G2600@annotation? G2f34@x) (G26dc@G25fe@annotation-stripped G2f34@x) (if (pair? G2f34@x) ((lambda (G2f36@a G2f37@d) (if (and (eq? G2f36@a (car G2f34@x)) (eq? G2f37@d (cdr G2f34@x))) G2f34@x (cons G2f36@a G2f37@d))) (G2f32@f (car G2f34@x)) (G2f32@f (cdr G2f34@x))) (if (vector? G2f34@x) ((lambda (G2f3a@old) ((lambda (G2f3c@new) (if (for-all eq? G2f3a@old G2f3c@new) G2f34@x (list->vector G2f3c@new))) (map G2f32@f G2f3a@old))) (vector->list G2f34@x)) G2f34@x))))))) G2f32@f) G2f2e@x)))) (set! G2b4a@stx->datum (lambda (G2f3e@x) (G2b48@strip G2f3e@x '()))) (set! G2b4c@same-marks*? (lambda (G2f40@mark* G2f41@mark** G2f42@si) (if (null? G2f42@si) '#f (if (G2b38@same-marks? G2f40@mark* (vector-ref G2f41@mark** (car G2f42@si))) (car G2f42@si) (G2b4c@same-marks*? G2f40@mark* G2f41@mark** (cdr G2f42@si)))))) (set! G2b4e@id->label (lambda (G2f46@id) (or (G2b50@id->real-label G2f46@id) ((lambda (G2f48@t) (if G2f48@t ((lambda (G2f4a@env) ((lambda (G2f4c@rib) (call-with-values (lambda () (G2abc@gen-define-label+loc G2f46@id G2f4c@rib)) (lambda (G2f50@G2f4e G2f51@G2f4f) ((lambda (G2f54@loc_ G2f55@lab) (begin (G2ae5@extend-rib! G2f4c@rib G2f46@id G2f55@lab) G2f55@lab)) G2f51@G2f4f G2f50@G2f4e)))) (G2dd0@interaction-env-rib G2f4a@env))) G2f48@t) '#f)) (G2e1e@top-level-context))))) (set! G2b50@id->real-label (lambda (G2f58@id) ((lambda (G2f5a@sym) ((letrec ((G2f5c@search (lambda (G2f5e@subst* G2f5f@mark*) (if (null? G2f5e@subst*) '#f (if (eq? (car G2f5e@subst*) 'shift) (G2f5c@search (cdr G2f5e@subst*) (cdr G2f5f@mark*)) ((lambda (G2f62@rib) ((lambda (G2f64@t) (if G2f64@t ((lambda (G2f66@ht) ((lambda (G2f68@si) ((lambda (G2f6a@i) (if G2f6a@i (vector-ref (G2ad3@rib-label* G2f62@rib) G2f6a@i) (G2f5c@search (cdr G2f5e@subst*) G2f5f@mark*))) (and G2f68@si (G2b4c@same-marks*? G2f5f@mark* (G2ad1@rib-mark** G2f62@rib) (reverse G2f68@si))))) (hashtable-ref G2f66@ht G2f5a@sym '#f))) G2f64@t) ((letrec ((G2f6c@f (lambda (G2f6e@sym* G2f6f@mark** G2f70@label*) (if (null? G2f6e@sym*) (G2f5c@search (cdr G2f5e@subst*) G2f5f@mark*) (if (and (eq? (car G2f6e@sym*) G2f5a@sym) (G2b38@same-marks? (car G2f6f@mark**) G2f5f@mark*)) (car G2f70@label*) (G2f6c@f (cdr G2f6e@sym*) (cdr G2f6f@mark**) (cdr G2f70@label*))))))) G2f6c@f) (G2acf@rib-sym* G2f62@rib) (G2ad1@rib-mark** G2f62@rib) (G2ad3@rib-label* G2f62@rib)))) (G2ad5@rib-sealed/freq G2f62@rib))) (car G2f5e@subst*))))))) G2f5c@search) (G2b04@stx-subst* G2f58@id) (G2b02@stx-mark* G2f58@id))) (G2b36@id->sym G2f58@id)))) (set! G2b52@label->binding (lambda (G2f74@x G2f75@r) ((lambda (G2f78@t) (if G2f78@t ((lambda (G2f7a@b) (if (and (pair? G2f7a@b) (eq? (car G2f7a@b) '$core-rtd)) (cons '$rtd (map G2cdb@bless (cdr G2f7a@b))) (if (and (pair? G2f7a@b) (eq? (car G2f7a@b) 'global-rtd)) ((lambda (G2f7c@lib G2f7d@loc) (cons '$rtd (symbol-value G2f7d@loc))) (cadr G2f7a@b) (cddr G2f7a@b)) G2f7a@b))) G2f78@t) ((lambda (G2f80@t) (if G2f80@t (cdr G2f80@t) ((lambda (G2f82@t) (if G2f82@t ((lambda (G2f84@env) ((lambda (G2f86@t) (if G2f86@t ((lambda (G2f88@p) (cons* 'lexical (cdr G2f88@p) '#f)) G2f86@t) '(displaced-lexical . #f))) (assq G2f74@x (G2dd4@interaction-env-locs G2f84@env)))) G2f82@t) '(displaced-lexical . #f))) (G2e1e@top-level-context)))) (assq G2f74@x G2f75@r)))) (G295b@G2801@imported-label->binding G2f74@x)))) (set! G2b54@make-binding cons) (set! G2b56@binding-type car) (set! G2b58@binding-value cdr) (set! G2b5a@raise-unbound-error (lambda (G2f8a@id) (G2e0e@syntax-violation* '#f '"unbound identifier" G2f8a@id (G4a24@G486e@make-undefined-violation)))) (set! G2b5c@syntax-type (lambda (G2f8c@e G2f8d@r) (if (G2b34@id? G2f8c@e) ((lambda (G2f90@id) ((lambda (G2f92@label) ((lambda (G2f94@b) ((lambda (G2f96@type) ((lambda () (begin (if (symbol-value 'debug-expand) (format '#t '"id->label=~a label->binding=~a\n" G2f92@label G2f94@b) (void)) (if (not G2f92@label) (G2b5a@raise-unbound-error G2f90@id) (void)) ((lambda (G2f98@t) (if (memv G2f98@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G2f96@type (G2b58@binding-value G2f94@b) G2f90@id) (values 'other '#f '#f))) G2f96@type))))) (G2b56@binding-type G2f94@b))) (G2b52@label->binding G2f92@label G2f8d@r))) (G2b4e@id->label G2f90@id))) G2f8c@e) (if (G2b26@syntax-pair? G2f8c@e) ((lambda (G2f9a@id) (if (G2b34@id? G2f9a@id) ((lambda (G2f9c@label) ((lambda (G2f9e@b) ((lambda (G2fa0@type) ((lambda () (begin (if (not G2f9c@label) (G2b5a@raise-unbound-error G2f9a@id) (void)) ((lambda (G2fa2@t) (if (memv G2fa2@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G2fa0@type (G2b58@binding-value G2f9e@b) G2f9a@id) (values 'call '#f '#f))) G2fa0@type))))) (G2b56@binding-type G2f9e@b))) (G2b52@label->binding G2f9c@label G2f8d@r))) (G2b4e@id->label G2f9a@id)) (values 'call '#f '#f))) (G2b2e@syntax-car G2f8c@e)) ((lambda (G2fa4@d) (if (G2b44@self-evaluating? G2fa4@d) (values 'constant G2fa4@d '#f) (values 'other '#f '#f))) (G2b4a@stx->datum G2f8c@e)))))) (set! G2b6a@sanitize-binding (lambda (G2fa6@x G2fa7@src) (if (procedure? G2fa6@x) (cons* 'local-macro G2fa6@x G2fa7@src) (if (and (pair? G2fa6@x) (eq? (car G2fa6@x) 'macro!) (procedure? (cdr G2fa6@x))) (cons* 'local-macro! (cdr G2fa6@x) G2fa7@src) (if (and (pair? G2fa6@x) (eq? (car G2fa6@x) '$rtd)) G2fa6@x (assertion-violation 'expand '"invalid transformer" G2fa6@x)))))) (set! G2b6c@make-variable-transformer (lambda (G2faa@x) (if (procedure? G2faa@x) (cons 'macro! G2faa@x) (assertion-violation 'make-variable-transformer '"not a procedure" G2faa@x)))) (set! G2b6e@variable-transformer? (lambda (G2fac@x) (and (pair? G2fac@x) (eq? (car G2fac@x) 'macro!) (procedure? (cdr G2fac@x))))) (set! G2b70@variable-transformer-procedure (lambda (G2fae@x) (if (G2b6e@variable-transformer? G2fae@x) (cdr G2fae@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G2fae@x)))) (set! G2b72@make-eval-transformer (lambda (G2fb0@x) (G2b6a@sanitize-binding (eval-core (G273c@G26f4@expanded->core G2fb0@x)) G2fb0@x))) (set! G2ca9@parse-define (lambda (G2fb2@x) ((lambda (G2fb4@t) ((lambda (G2fb6@ls/false) (if (and G2fb6@ls/false (apply (lambda (G2fb8@id G2fb9@fmls G2fba@b G2fbb@b*) (G2b34@id? G2fb8@id)) G2fb6@ls/false)) (apply (lambda (G2fc0@id G2fc1@fmls G2fc2@b G2fc3@b*) (begin (G2d4d@verify-formals G2fc1@fmls G2fb2@x) (values G2fc0@id (cons 'defun (cons G2fc1@fmls (cons G2fc2@b G2fc3@b*)))))) G2fb6@ls/false) ((lambda (G2fc8@t) ((lambda (G2fca@ls/false) (if (and G2fca@ls/false (apply (lambda (G2fcc@id G2fcd@val) (G2b34@id? G2fcc@id)) G2fca@ls/false)) (apply (lambda (G2fd0@id G2fd1@val) (values G2fd0@id (cons 'expr G2fd1@val))) G2fca@ls/false) ((lambda (G2fd4@t) ((lambda (G2fd6@ls/false) (if (and G2fd6@ls/false (apply (lambda (G2fd8@id) (G2b34@id? G2fd8@id)) G2fd6@ls/false)) (apply (lambda (G2fda@id) (values G2fda@id (cons 'expr (G2cdb@bless '(void))))) G2fd6@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G2fd4@t))) (G2d25@syntax-dispatch G2fd4@t '(_ any)))) G2fc8@t))) (G2d25@syntax-dispatch G2fc8@t '(_ any any)))) G2fb4@t))) (G2d25@syntax-dispatch G2fb4@t '(_ (any . any) any . each-any)))) G2fb2@x))) (set! G2cab@parse-define-syntax (lambda (G2fdc@x) ((lambda (G2fde@t) ((lambda (G2fe0@ls/false) (if (and G2fe0@ls/false (apply (lambda (G2fe2@id G2fe3@val) (G2b34@id? G2fe2@id)) G2fe0@ls/false)) (apply (lambda (G2fe6@id G2fe7@val) (values G2fe6@id G2fe7@val)) G2fe0@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G2fde@t))) (G2d25@syntax-dispatch G2fde@t '(_ any any)))) G2fdc@x))) (set! G2cad@scheme-stx-hashtable (make-eq-hashtable)) (set! G2caf@scheme-stx (lambda (G2fea@sym) (or (hashtable-ref G2cad@scheme-stx-hashtable G2fea@sym '#f) ((lambda (G2fec@subst) ((lambda (G2fee@stx) ((lambda (G2ff0@stx) ((lambda () (begin (hashtable-set! G2cad@scheme-stx-hashtable G2fea@sym G2ff0@stx) G2ff0@stx)))) ((lambda (G2ff2@t) (if G2ff2@t ((lambda (G2ff4@x) ((lambda (G2ff6@name G2ff7@label) (G2b20@add-subst (G2acd@make-rib (list G2ff6@name) (list G2ab0@top-mark*) (list G2ff7@label) '#f '#f) G2fee@stx)) (car G2ff4@x) (cdr G2ff4@x))) G2ff2@t) G2fee@stx)) (assq G2fea@sym G2fec@subst)))) (G2afe@make-stx G2fea@sym G2ab0@top-mark* '() '()))) (G2931@G27ad@library-subst (G2955@G27f5@find-library-by-name '(psyntax system $all))))))) (set! G2cb1@lexical-var car) (set! G2cb3@lexical-mutable? cdr) (set! G2cb5@set-lexical-mutable! set-cdr!) (set! G2cb7@add-lexical (lambda (G2ffa@lab G2ffb@lex G2ffc@r) (cons (cons* G2ffa@lab 'lexical G2ffb@lex '#f) G2ffc@r))) (set! G2cb9@add-lexicals (lambda (G3000@lab* G3001@lex* G3002@r) (if (null? G3000@lab*) G3002@r (G2cb9@add-lexicals (cdr G3000@lab*) (cdr G3001@lex*) (G2cb7@add-lexical (car G3000@lab*) (car G3001@lex*) G3002@r))))) (set! G2cbb@letrec-helper (lambda (G3006@e G3007@r G3008@mr G3009@build) ((lambda (G300e@t) ((lambda (G3010@ls/false) (if G3010@ls/false (apply (lambda (G3012@lhs* G3013@rhs* G3014@b G3015@b*) (if (not (G2b3e@valid-bound-ids? G3012@lhs*)) (G2cdf@invalid-fmls-error G3006@e G3012@lhs*) ((lambda (G301a@lex* G301b@lab*) ((lambda (G301e@rib G301f@r) ((lambda (G3022@body G3023@rhs*) (G3009@build '#f G301a@lex* G3023@rhs* G3022@body)) (G2d5f@chi-internal (G2b20@add-subst G301e@rib (cons G3014@b G3015@b*)) G301f@r G3008@mr) (G2d45@chi-expr* (map (lambda (G3026@x) (G2b20@add-subst G301e@rib G3026@x)) G3013@rhs*) G301f@r G3008@mr))) (G2aef@make-full-rib G3012@lhs* G301b@lab*) (G2cb9@add-lexicals G301b@lab* G301a@lex* G3007@r))) (map G2ab4@gen-lexical G3012@lhs*) (map G2ab8@gen-label G3012@lhs*)))) G3010@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G300e@t))) (G2d25@syntax-dispatch G300e@t '(_ #(each (any any)) any . each-any)))) G3006@e))) (set! G2cbd@letrec-transformer (lambda (G3028@e G3029@r G302a@mr) (G2cbb@letrec-helper G3028@e G3029@r G302a@mr G2a97@G2a0a@build-letrec))) (set! G2cbf@letrec*-transformer (lambda (G302e@e G302f@r G3030@mr) (G2cbb@letrec-helper G302e@e G302f@r G3030@mr G2a98@G2a0c@build-letrec*))) (set! G2cc1@fluid-let-syntax-transformer (lambda (G3034@e G3035@r G3036@mr) ((lambda (G303b@lookup) (begin (set! G303b@lookup (lambda (G304e@x) (or (G2b4e@id->label G304e@x) (G2e10@syntax-violation '#f '"unbound identifier" G3034@e G304e@x)))) ((lambda (G303c@t) ((lambda (G303e@ls/false) (if G303e@ls/false (apply (lambda (G3040@lhs* G3041@rhs* G3042@b G3043@b*) (if (not (G2b3e@valid-bound-ids? G3040@lhs*)) (G2cdf@invalid-fmls-error G3034@e G3040@lhs*) ((lambda (G3048@lab* G3049@rhs*) (G2d5f@chi-internal (cons G3042@b G3043@b*) (append (map cons G3048@lab* G3049@rhs*) G3035@r) (append (map cons G3048@lab* G3049@rhs*) G3036@mr))) (map G303b@lookup G3040@lhs*) (map (lambda (G304c@x) (G2b72@make-eval-transformer (G2d84@expand-transformer G304c@x G3036@mr))) G3041@rhs*)))) G303e@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G303c@t))) (G2d25@syntax-dispatch G303c@t '(_ #(each (any any)) any . each-any)))) G3034@e))) '#f))) (set! G2cc3@type-descriptor-transformer (lambda (G3050@e G3051@r G3052@mr) ((lambda (G3056@t) ((lambda (G3058@ls/false) (if (and G3058@ls/false (apply (lambda (G305a@id) (G2b34@id? G305a@id)) G3058@ls/false)) (apply (lambda (G305c@id) ((lambda (G305e@lab) ((lambda (G3060@b) ((lambda (G3062@type) ((lambda () (begin (if (not G305e@lab) (G2b5a@raise-unbound-error G305c@id) (void)) (if (not (and (eq? G3062@type '$rtd) (not (list? (G2b58@binding-value G3060@b))))) (G2e10@syntax-violation '#f '"not a record type" G3050@e) (void)) (list 'quote (G2b58@binding-value G3060@b)))))) (G2b56@binding-type G3060@b))) (G2b52@label->binding G305e@lab G3051@r))) (G2b4e@id->label G305c@id))) G3058@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3056@t))) (G2d25@syntax-dispatch G3056@t '(_ any)))) G3050@e))) (set! G2cc5@record-type-descriptor-transformer (lambda (G3064@e G3065@r G3066@mr) ((lambda (G306a@t) ((lambda (G306c@ls/false) (if (and G306c@ls/false (apply (lambda (G306e@id) (G2b34@id? G306e@id)) G306c@ls/false)) (apply (lambda (G3070@id) ((lambda (G3072@lab) ((lambda (G3074@b) ((lambda (G3076@type) ((lambda () (begin (if (symbol-value 'debug-expand) (format '#t '"id=~a lab=~a b=~a <~a ~a>\n" (G2b00@stx-expr G3070@id) G3072@lab G3074@b (G2b00@stx-expr (cadr G3074@b)) (G2b00@stx-expr (caddr G3074@b))) (void)) (if (not G3072@lab) (G2b5a@raise-unbound-error G3070@id) (void)) (if (not (and (eq? G3076@type '$rtd) (list? (G2b58@binding-value G3074@b)))) (G2e10@syntax-violation '#f '"not a record type" G3064@e) (void)) (if (symbol-value 'debug-expand) (format '#t '"(car (binding-value b))=~a \n" (G2b00@stx-expr (car (G2b58@binding-value G3074@b)))) (void)) (G2d49@chi-expr (car (G2b58@binding-value G3074@b)) G3065@r G3066@mr))))) (G2b56@binding-type G3074@b))) (G2b52@label->binding G3072@lab G3065@r))) (G2b4e@id->label G3070@id))) G306c@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G306a@t))) (G2d25@syntax-dispatch G306a@t '(_ any)))) G3064@e))) (set! G2cc7@record-constructor-descriptor-transformer (lambda (G3078@e G3079@r G307a@mr) ((lambda (G307e@t) ((lambda (G3080@ls/false) (if (and G3080@ls/false (apply (lambda (G3082@id) (G2b34@id? G3082@id)) G3080@ls/false)) (apply (lambda (G3084@id) ((lambda (G3086@lab) ((lambda (G3088@b) ((lambda (G308a@type) ((lambda () (begin (if (not G3086@lab) (G2b5a@raise-unbound-error G3084@id) (void)) (if (not (and (eq? G308a@type '$rtd) (list? (G2b58@binding-value G3088@b)))) (G2e10@syntax-violation '#f '"invalid type" G3078@e) (void)) (G2d49@chi-expr (cadr (G2b58@binding-value G3088@b)) G3079@r G307a@mr))))) (G2b56@binding-type G3088@b))) (G2b52@label->binding G3086@lab G3079@r))) (G2b4e@id->label G3084@id))) G3080@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G307e@t))) (G2d25@syntax-dispatch G307e@t '(_ any)))) G3078@e))) (set! G2cc9@when-macro (lambda (G308c@e) ((lambda (G308e@t) ((lambda (G3090@ls/false) (if G3090@ls/false (apply (lambda (G3092@test G3093@e G3094@e*) (G2cdb@bless (list 'if G3092@test (cons 'begin (cons G3093@e G3094@e*))))) G3090@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G308e@t))) (G2d25@syntax-dispatch G308e@t '(_ any any . each-any)))) G308c@e))) (set! G2ccb@unless-macro (lambda (G3098@e) ((lambda (G309a@t) ((lambda (G309c@ls/false) (if G309c@ls/false (apply (lambda (G309e@test G309f@e G30a0@e*) (G2cdb@bless (list 'if (list 'not G309e@test) (cons 'begin (cons G309f@e G30a0@e*))))) G309c@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G309a@t))) (G2d25@syntax-dispatch G309a@t '(_ any any . each-any)))) G3098@e))) (set! G2ccd@if-transformer (lambda (G30a4@e G30a5@r G30a6@mr) ((lambda (G30aa@t) ((lambda (G30ac@ls/false) (if G30ac@ls/false (apply (lambda (G30ae@e0 G30af@e1 G30b0@e2) (list 'if (G2d49@chi-expr G30ae@e0 G30a5@r G30a6@mr) (G2d49@chi-expr G30af@e1 G30a5@r G30a6@mr) (G2d49@chi-expr G30b0@e2 G30a5@r G30a6@mr))) G30ac@ls/false) ((lambda (G30b4@t) ((lambda (G30b6@ls/false) (if G30b6@ls/false (apply (lambda (G30b8@e0 G30b9@e1) (list 'if (G2d49@chi-expr G30b8@e0 G30a5@r G30a6@mr) (G2d49@chi-expr G30b9@e1 G30a5@r G30a6@mr) (G2a96@G2a08@build-void))) G30b6@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G30b4@t))) (G2d25@syntax-dispatch G30b4@t '(_ any any)))) G30aa@t))) (G2d25@syntax-dispatch G30aa@t '(_ any any any)))) G30a4@e))) (set! G2ccf@and-transformer (lambda (G30bc@e G30bd@r G30be@mr) ((lambda (G30c2@t) ((lambda (G30c4@ls/false) (if G30c4@ls/false (apply (lambda (G30c6@e*) (cons 'and (G2d45@chi-expr* G30c6@e* G30bd@r G30be@mr))) G30c4@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G30c2@t))) (G2d25@syntax-dispatch G30c2@t '(_ . each-any)))) G30bc@e))) (set! G2cd1@or-transformer (lambda (G30c8@e G30c9@r G30ca@mr) ((lambda (G30ce@t) ((lambda (G30d0@ls/false) (if G30d0@ls/false (apply (lambda (G30d2@e*) (cons 'or (G2d45@chi-expr* G30d2@e* G30c9@r G30ca@mr))) G30d0@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G30ce@t))) (G2d25@syntax-dispatch G30ce@t '(_ . each-any)))) G30c8@e))) (set! G2cd3@case-macro (lambda (G30d4@e) ((lambda (G30d7@build-last G30d9@build-one) (begin (set! G30d7@build-last (lambda (G30fe@cls) ((lambda (G3100@t) ((lambda (G3102@ls/false) (if G3102@ls/false (apply (lambda (G3104@e G3105@e*) (cons 'begin (cons G3104@e G3105@e*))) G3102@ls/false) ((lambda (G3108@t) ((lambda (G310a@ls/false) (if G310a@ls/false (apply (lambda () (G30d9@build-one G30fe@cls '(if #f #f))) G310a@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3108@t))) (G2d25@syntax-dispatch G3108@t '_))) G3100@t))) (G2d25@syntax-dispatch G3100@t '(#(scheme-id else) any . each-any)))) G30fe@cls))) (set! G30d9@build-one (lambda (G30f0@cls G30f1@k) ((lambda (G30f4@t) ((lambda (G30f6@ls/false) (if G30f6@ls/false (apply (lambda (G30f8@d* G30f9@e G30fa@e*) (list 'if (list 'memv 't (list 'quote G30f8@d*)) (cons 'begin (cons G30f9@e G30fa@e*)) G30f1@k)) G30f6@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G30f4@t))) (G2d25@syntax-dispatch G30f4@t '(each-any any . each-any)))) G30f0@cls))) ((lambda (G30da@t) ((lambda (G30dc@ls/false) (if G30dc@ls/false (apply (lambda (G30de@expr) (G2cdb@bless (cons 'let (cons (list (list 't G30de@expr)) '((if #f #f)))))) G30dc@ls/false) ((lambda (G30e0@t) ((lambda (G30e2@ls/false) (if G30e2@ls/false (apply (lambda (G30e4@expr G30e5@cls G30e6@cls*) (G2cdb@bless (list 'let (list (list 't G30e4@expr)) ((letrec ((G30ea@f (lambda (G30ec@cls G30ed@cls*) (if (null? G30ed@cls*) (G30d7@build-last G30ec@cls) (G30d9@build-one G30ec@cls (G30ea@f (car G30ed@cls*) (cdr G30ed@cls*))))))) G30ea@f) G30e5@cls G30e6@cls*)))) G30e2@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G30e0@t))) (G2d25@syntax-dispatch G30e0@t '(_ any any . each-any)))) G30da@t))) (G2d25@syntax-dispatch G30da@t '(_ any)))) G30d4@e))) '#f '#f))) (set! G2cd5@quote-transformer (lambda (G310c@e G310d@r G310e@mr) ((lambda (G3112@t) ((lambda (G3114@ls/false) (if G3114@ls/false (apply (lambda (G3116@datum) (list 'quote (G2b4a@stx->datum G3116@datum))) G3114@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3112@t))) (G2d25@syntax-dispatch G3112@t '(_ any)))) G310c@e))) (set! G2cd7@case-lambda-transformer (lambda (G3118@e G3119@r G311a@mr) ((lambda (G311e@t) ((lambda (G3120@ls/false) (if G3120@ls/false (apply (lambda (G3122@fmls* G3123@b* G3124@b**) (call-with-values (lambda () (G2d51@chi-lambda-clause* G3118@e G3122@fmls* (map cons G3123@b* G3124@b**) G3119@r G311a@mr)) (lambda (G312a@G3128 G312b@G3129) ((lambda (G312e@body* G312f@fmls*) (G2a93@G29d6@build-case-lambda '#f G312f@fmls* G312e@body*)) G312b@G3129 G312a@G3128)))) G3120@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G311e@t))) (G2d25@syntax-dispatch G311e@t '(_ . #(each (any any . each-any)))))) G3118@e))) (set! G2cd9@lambda-transformer (lambda (G3132@e G3133@r G3134@mr) ((lambda (G3138@t) ((lambda (G313a@ls/false) (if G313a@ls/false (apply (lambda (G313c@fmls G313d@b G313e@b*) (call-with-values (lambda () (G2d4f@chi-lambda-clause G3132@e G313c@fmls (cons G313d@b G313e@b*) G3133@r G3134@mr)) (lambda (G3144@G3142 G3145@G3143) ((lambda (G3148@body G3149@fmls) (G2a92@G29d4@build-lambda '#f G3149@fmls G3148@body)) G3145@G3143 G3144@G3142)))) G313a@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3138@t))) (G2d25@syntax-dispatch G3138@t '(_ any any . each-any)))) G3132@e))) (set! G2cdb@bless (lambda (G314c@x) (G2b1c@mkstx ((letrec ((G314e@f (lambda (G3150@x) (if (G2afc@stx? G3150@x) G3150@x (if (pair? G3150@x) (cons (G314e@f (car G3150@x)) (G314e@f (cdr G3150@x))) (if (symbol? G3150@x) (G2caf@scheme-stx G3150@x) (if (vector? G3150@x) (vector-map G314e@f G3150@x) G3150@x))))))) G314e@f) G314c@x) '() '() '()))) (set! G2cdd@with-syntax-macro (lambda (G3152@e) ((lambda (G3154@t) ((lambda (G3156@ls/false) (if G3156@ls/false (apply (lambda (G3158@pat* G3159@expr* G315a@b G315b@b*) ((lambda (G3160@idn*) (begin (G2d4d@verify-formals (map car G3160@idn*) G3152@e) ((lambda (G3162@t*) (G2cdb@bless (list 'let (map list G3162@t* G3159@expr*) ((letrec ((G3164@f (lambda (G3166@pat* G3167@t*) (if (null? G3166@pat*) (cons 'begin (cons '#f (cons G315a@b G315b@b*))) (list 'syntax-case (car G3167@t*) '() (list (car G3166@pat*) (G3164@f (cdr G3166@pat*) (cdr G3167@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G3166@pat*)) (car G3167@t*)))))))) G3164@f) G3158@pat* G3162@t*)))) (G2dfe@generate-temporaries G3159@expr*)))) ((letrec ((G316a@f (lambda (G316c@pat*) (if (null? G316c@pat*) '() (call-with-values (lambda () (G2d23@convert-pattern (car G316c@pat*) '())) (lambda (G3170@G316e G3171@G316f) ((lambda (G3174@idn* G3175@pat) (append G3174@idn* (G316a@f (cdr G316c@pat*)))) G3171@G316f G3170@G316e))))))) G316a@f) G3158@pat*))) G3156@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3154@t))) (G2d25@syntax-dispatch G3154@t '(_ #(each (any any)) any . each-any)))) G3152@e))) (set! G2cdf@invalid-fmls-error (lambda (G3178@stx G3179@fmls) ((lambda (G317c@t) ((lambda (G317e@ls/false) (if G317e@ls/false (apply (lambda (G3180@id* G3181@last) ((letrec ((G3184@f (lambda (G3186@id*) (if (null? G3186@id*) (values) (if (not (G2b34@id? (car G3186@id*))) (G2e10@syntax-violation '#f '"not an identifier" G3178@stx (car G3186@id*)) (begin (G3184@f (cdr G3186@id*)) (if (G2b42@bound-id-member? (car G3186@id*) (cdr G3186@id*)) (G2e10@syntax-violation '#f '"duplicate binding" G3178@stx (car G3186@id*)) (void)))))))) G3184@f) (if (G2b34@id? G3181@last) (cons G3181@last G3180@id*) (if (G2b2a@syntax-null? G3181@last) G3180@id* (G2e10@syntax-violation '#f '"not an identifier" G3178@stx G3181@last))))) G317e@ls/false) ((lambda (G3188@t) ((lambda (G318a@ls/false) (if G318a@ls/false (apply (lambda () (G2e10@syntax-violation '#f '"malformed binding form" G3178@stx G3179@fmls)) G318a@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3188@t))) (G2d25@syntax-dispatch G3188@t '_))) G317c@t))) (G2d25@syntax-dispatch G317c@t '#(each+ any () any)))) G3179@fmls))) (set! G2ce1@let-macro (lambda (G318c@stx) ((lambda (G318e@t) ((lambda (G3190@ls/false) (if G3190@ls/false (apply (lambda (G3192@lhs* G3193@rhs* G3194@b G3195@b*) (if (G2b3e@valid-bound-ids? G3192@lhs*) (G2cdb@bless (cons (cons 'lambda (cons G3192@lhs* (cons G3194@b G3195@b*))) G3193@rhs*)) (G2cdf@invalid-fmls-error G318c@stx G3192@lhs*))) G3190@ls/false) ((lambda (G319a@t) ((lambda (G319c@ls/false) (if (and G319c@ls/false (apply (lambda (G319e@f G319f@lhs* G31a0@rhs* G31a1@b G31a2@b*) (G2b34@id? G319e@f)) G319c@ls/false)) (apply (lambda (G31a8@f G31a9@lhs* G31aa@rhs* G31ab@b G31ac@b*) (if (G2b3e@valid-bound-ids? G31a9@lhs*) (G2cdb@bless (cons (list 'letrec (list (list G31a8@f (cons 'lambda (cons G31a9@lhs* (cons G31ab@b G31ac@b*))))) G31a8@f) G31aa@rhs*)) (G2cdf@invalid-fmls-error G318c@stx G31a9@lhs*))) G319c@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G319a@t))) (G2d25@syntax-dispatch G319a@t '(_ any #(each (any any)) any . each-any)))) G318e@t))) (G2d25@syntax-dispatch G318e@t '(_ #(each (any any)) any . each-any)))) G318c@stx))) (set! G2ce3@let-values-macro (lambda (G31b2@stx) ((lambda (G31b5@rename G31b7@rename*) (begin (set! G31b5@rename (lambda (G3217@x G3218@old* G3219@new*) (begin (if (not (G2b34@id? G3217@x)) (G2e10@syntax-violation '#f '"not an indentifier" G31b2@stx G3217@x) (void)) (if (G2b42@bound-id-member? G3217@x G3218@old*) (G2e10@syntax-violation '#f '"duplicate binding" G31b2@stx G3217@x) (void)) ((lambda (G321d@y) (values G321d@y (cons G3217@x G3218@old*) (cons G321d@y G3219@new*))) (gensym (G2e16@syntax->datum G3217@x)))))) (set! G31b7@rename* (lambda (G3205@x* G3206@old* G3207@new*) (if (null? G3205@x*) (values '() G3206@old* G3207@new*) (call-with-values (lambda () (G31b5@rename (car G3205@x*) G3206@old* G3207@new*)) (lambda (G320b@x G320c@old* G320d@new*) (call-with-values (lambda () (G31b7@rename* (cdr G3205@x*) G320c@old* G320d@new*)) (lambda (G3211@x* G3212@old* G3213@new*) (values (cons G320b@x G3211@x*) G3212@old* G3213@new*)))))))) ((lambda (G31b8@t) ((lambda (G31ba@ls/false) (if G31ba@ls/false (apply (lambda (G31bc@b G31bd@b*) (cons* (G2cdb@bless 'let) '() G31bc@b G31bd@b*)) G31ba@ls/false) ((lambda (G31c0@t) ((lambda (G31c2@ls/false) (if G31c2@ls/false (apply (lambda (G31c4@lhs* G31c5@rhs* G31c6@b G31c7@b*) (G2cdb@bless ((letrec ((G31cc@f (lambda (G31ce@lhs* G31cf@rhs* G31d0@old* G31d1@new*) (if (null? G31ce@lhs*) (cons 'let (cons (map list G31d0@old* G31d1@new*) (cons G31c6@b G31c7@b*))) ((lambda (G31d6@t) ((lambda (G31d8@ls/false) (if G31d8@ls/false (apply (lambda (G31da@x*) (call-with-values (lambda () (G31b7@rename* G31da@x* G31d0@old* G31d1@new*)) (lambda (G31df@G31dc G31e0@G31dd G31e1@G31de) ((lambda (G31e5@new* G31e6@old* G31e7@y*) (list 'call-with-values (list 'lambda '() (car G31cf@rhs*)) (list 'lambda G31e7@y* (G31cc@f (cdr G31ce@lhs*) (cdr G31cf@rhs*) G31e6@old* G31e5@new*)))) G31e1@G31de G31e0@G31dd G31df@G31dc)))) G31d8@ls/false) ((lambda (G31eb@t) ((lambda (G31ed@ls/false) (if G31ed@ls/false (apply (lambda (G31ef@x* G31f0@x) (call-with-values (lambda () (G31b5@rename G31f0@x G31d0@old* G31d1@new*)) (lambda (G31f3@y G31f4@old* G31f5@new*) (call-with-values (lambda () (G31b7@rename* G31ef@x* G31f4@old* G31f5@new*)) (lambda (G31f9@y* G31fa@old* G31fb@new*) (list 'call-with-values (list 'lambda '() (car G31cf@rhs*)) (list 'lambda (append G31f9@y* G31f3@y) (G31cc@f (cdr G31ce@lhs*) (cdr G31cf@rhs*) G31fa@old* G31fb@new*)))))))) G31ed@ls/false) ((lambda (G31ff@t) ((lambda (G3201@ls/false) (if G3201@ls/false (apply (lambda (G3203@others) (G2e10@syntax-violation '#f '"malformed bindings" G31b2@stx G3203@others)) G3201@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G31ff@t))) (G2d25@syntax-dispatch G31ff@t 'any))) G31eb@t))) (G2d25@syntax-dispatch G31eb@t '#(each+ any () any)))) G31d6@t))) (G2d25@syntax-dispatch G31d6@t 'each-any))) (car G31ce@lhs*)))))) G31cc@f) G31c4@lhs* G31c5@rhs* '() '()))) G31c2@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G31c0@t))) (G2d25@syntax-dispatch G31c0@t '(_ #(each (any any)) any . each-any)))) G31b8@t))) (G2d25@syntax-dispatch G31b8@t '(_ () any . each-any)))) G31b2@stx))) '#f '#f))) (set! G2ce5@let*-values-macro (lambda (G321f@stx) ((lambda (G3222@check) (begin (set! G3222@check (lambda (G3251@x*) (if (not (null? G3251@x*)) ((lambda (G3253@x) (begin (if (not (G2b34@id? G3253@x)) (G2e10@syntax-violation '#f '"not an identifier" G321f@stx G3253@x) (void)) (G3222@check (cdr G3251@x*)) (if (G2b42@bound-id-member? G3253@x (cdr G3251@x*)) (G2e10@syntax-violation '#f '"duplicate identifier" G321f@stx G3253@x) (void)))) (car G3251@x*)) (void)))) ((lambda (G3223@t) ((lambda (G3225@ls/false) (if G3225@ls/false (apply (lambda (G3227@b G3228@b*) (cons* (G2cdb@bless 'let) '() G3227@b G3228@b*)) G3225@ls/false) ((lambda (G322b@t) ((lambda (G322d@ls/false) (if G322d@ls/false (apply (lambda (G322f@lhs* G3230@rhs* G3231@b G3232@b*) (G2cdb@bless ((letrec ((G3237@f (lambda (G3239@lhs* G323a@rhs*) (if (null? G3239@lhs*) (cons 'begin (cons G3231@b G3232@b*)) ((lambda (G323d@t) ((lambda (G323f@ls/false) (if G323f@ls/false (apply (lambda (G3241@x*) (begin (G3222@check G3241@x*) (list 'call-with-values (list 'lambda '() (car G323a@rhs*)) (list 'lambda G3241@x* (G3237@f (cdr G3239@lhs*) (cdr G323a@rhs*)))))) G323f@ls/false) ((lambda (G3243@t) ((lambda (G3245@ls/false) (if G3245@ls/false (apply (lambda (G3247@x* G3248@x) (begin (G3222@check (cons G3248@x G3247@x*)) (list 'call-with-values (list 'lambda '() (car G323a@rhs*)) (list 'lambda (append G3247@x* G3248@x) (G3237@f (cdr G3239@lhs*) (cdr G323a@rhs*)))))) G3245@ls/false) ((lambda (G324b@t) ((lambda (G324d@ls/false) (if G324d@ls/false (apply (lambda (G324f@others) (G2e10@syntax-violation '#f '"malformed bindings" G321f@stx G324f@others)) G324d@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G324b@t))) (G2d25@syntax-dispatch G324b@t 'any))) G3243@t))) (G2d25@syntax-dispatch G3243@t '#(each+ any () any)))) G323d@t))) (G2d25@syntax-dispatch G323d@t 'each-any))) (car G3239@lhs*)))))) G3237@f) G322f@lhs* G3230@rhs*))) G322d@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G322b@t))) (G2d25@syntax-dispatch G322b@t '(_ #(each (any any)) any . each-any)))) G3223@t))) (G2d25@syntax-dispatch G3223@t '(_ () any . each-any)))) G321f@stx))) '#f))) (set! G2ce7@trace-lambda-macro (lambda (G3255@stx) ((lambda (G3257@t) ((lambda (G3259@ls/false) (if G3259@ls/false (apply (lambda (G325b@who G325c@fmls G325d@b G325e@b*) (if (G2b3e@valid-bound-ids? G325c@fmls) (G2cdb@bless (list 'make-traced-procedure (list 'quote G325b@who) (cons 'lambda (cons G325c@fmls (cons G325d@b G325e@b*))))) (G2cdf@invalid-fmls-error G3255@stx G325c@fmls))) G3259@ls/false) ((lambda (G3263@t) ((lambda (G3265@ls/false) (if G3265@ls/false (apply (lambda (G3267@who G3268@fmls G3269@last G326a@b G326b@b*) (if (G2b3e@valid-bound-ids? (cons G3269@last G3268@fmls)) (G2cdb@bless (list 'make-traced-procedure (list 'quote G3267@who) (cons 'lambda (cons (append G3268@fmls G3269@last) (cons G326a@b G326b@b*))))) (G2cdf@invalid-fmls-error G3255@stx (append G3268@fmls G3269@last)))) G3265@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3263@t))) (G2d25@syntax-dispatch G3263@t '(_ any #(each+ any () any) any . each-any)))) G3257@t))) (G2d25@syntax-dispatch G3257@t '(_ any each-any any . each-any)))) G3255@stx))) (set! G2ce9@trace-define-macro (lambda (G3271@stx) ((lambda (G3273@t) ((lambda (G3275@ls/false) (if G3275@ls/false (apply (lambda (G3277@who G3278@fmls G3279@b G327a@b*) (if (G2b3e@valid-bound-ids? G3278@fmls) (G2cdb@bless (list 'define G3277@who (list 'make-traced-procedure (list 'quote G3277@who) (cons 'lambda (cons G3278@fmls (cons G3279@b G327a@b*)))))) (G2cdf@invalid-fmls-error G3271@stx G3278@fmls))) G3275@ls/false) ((lambda (G327f@t) ((lambda (G3281@ls/false) (if G3281@ls/false (apply (lambda (G3283@who G3284@fmls G3285@last G3286@b G3287@b*) (if (G2b3e@valid-bound-ids? (cons G3285@last G3284@fmls)) (G2cdb@bless (list 'define G3283@who (list 'make-traced-procedure (list 'quote G3283@who) (cons 'lambda (cons (append G3284@fmls G3285@last) (cons G3286@b G3287@b*)))))) (G2cdf@invalid-fmls-error G3271@stx (append G3284@fmls G3285@last)))) G3281@ls/false) ((lambda (G328d@t) ((lambda (G328f@ls/false) (if G328f@ls/false (apply (lambda (G3291@who G3292@expr) (if (G2b34@id? G3291@who) (G2cdb@bless (list 'define G3291@who (list 'let (list (list 'v G3292@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G3291@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G2e10@syntax-violation '#f '"invalid name" G3271@stx))) G328f@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G328d@t))) (G2d25@syntax-dispatch G328d@t '(_ any any)))) G327f@t))) (G2d25@syntax-dispatch G327f@t '(_ (any . #(each+ any () any)) any . each-any)))) G3273@t))) (G2d25@syntax-dispatch G3273@t '(_ (any . each-any) any . each-any)))) G3271@stx))) (set! G2ceb@trace-define-syntax-macro (lambda (G3295@stx) ((lambda (G3297@t) ((lambda (G3299@ls/false) (if G3299@ls/false (apply (lambda (G329b@who G329c@expr) (if (G2b34@id? G329b@who) (G2cdb@bless (list 'define-syntax G329b@who (list 'make-traced-macro (list 'quote G329b@who) G329c@expr))) (G2e10@syntax-violation '#f '"invalid name" G3295@stx))) G3299@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3297@t))) (G2d25@syntax-dispatch G3297@t '(_ any any)))) G3295@stx))) (set! G2ced@trace-let/rec-syntax (lambda (G329f@who) (lambda (G32a1@stx) ((lambda (G32a3@t) ((lambda (G32a5@ls/false) (if G32a5@ls/false (apply (lambda (G32a7@lhs* G32a8@rhs* G32a9@b G32aa@b*) (if (G2b3e@valid-bound-ids? G32a7@lhs*) ((lambda (G32af@rhs*) (G2cdb@bless (cons G329f@who (cons (map list G32a7@lhs* G32af@rhs*) (cons G32a9@b G32aa@b*))))) (map (lambda (G32b1@lhs G32b2@rhs) (list 'make-traced-macro (list 'quote G32b1@lhs) G32b2@rhs)) G32a7@lhs* G32a8@rhs*)) (G2cdf@invalid-fmls-error G32a1@stx G32a7@lhs*))) G32a5@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G32a3@t))) (G2d25@syntax-dispatch G32a3@t '(_ #(each (any any)) any . each-any)))) G32a1@stx)))) (set! G2cef@trace-let-syntax-macro (G2ced@trace-let/rec-syntax 'let-syntax)) (set! G2cf1@trace-letrec-syntax-macro (G2ced@trace-let/rec-syntax 'letrec-syntax)) (set! G2cf3@guard-macro (lambda (G32b5@x) ((lambda (G32b8@gen-clauses) (begin (set! G32b8@gen-clauses (lambda (G32cf@con G32d0@outerk G32d1@clause*) ((lambda (G32d6@f G32d8@f*) (begin (set! G32d6@f (lambda (G330b@x G330c@k) ((lambda (G330f@t) ((lambda (G3311@ls/false) (if G3311@ls/false (apply (lambda (G3313@e G3314@p) ((lambda (G3317@t) (list 'let (list (list G3317@t G3313@e)) (list 'if G3317@t (list G3314@p G3317@t) G330c@k))) (gensym))) G3311@ls/false) ((lambda (G3319@t) ((lambda (G331b@ls/false) (if G331b@ls/false (apply (lambda (G331d@e) ((lambda (G331f@t) (list 'let (list (list G331f@t G331d@e)) (list 'if G331f@t G331f@t G330c@k))) (gensym))) G331b@ls/false) ((lambda (G3321@t) ((lambda (G3323@ls/false) (if G3323@ls/false (apply (lambda (G3325@e G3326@v G3327@v*) (list 'if G3325@e (cons 'begin (cons G3326@v G3327@v*)) G330c@k)) G3323@ls/false) ((lambda (G332b@t) ((lambda (G332d@ls/false) (if G332d@ls/false (apply (lambda () (G2e10@syntax-violation '#f '"invalid guard clause" G330b@x)) G332d@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G332b@t))) (G2d25@syntax-dispatch G332b@t '_))) G3321@t))) (G2d25@syntax-dispatch G3321@t '(any any . each-any)))) G3319@t))) (G2d25@syntax-dispatch G3319@t '(any)))) G330f@t))) (G2d25@syntax-dispatch G330f@t '(any #(scheme-id =>) any)))) G330b@x))) (set! G32d8@f* (lambda (G32e3@x*) ((lambda (G32e5@t) ((lambda (G32e7@ls/false) (if G32e7@ls/false (apply (lambda () ((lambda (G32e9@g) (values (list G32e9@g (list 'lambda '() (list 'raise-continuable G32cf@con))) G32e9@g)) (gensym))) G32e7@ls/false) ((lambda (G32eb@t) ((lambda (G32ed@ls/false) (if G32ed@ls/false (apply (lambda (G32ef@e G32f0@e*) (values (cons 'begin (cons G32ef@e G32f0@e*)) '#f)) G32ed@ls/false) ((lambda (G32f3@t) ((lambda (G32f5@ls/false) (if G32f5@ls/false (apply (lambda (G32f7@cls G32f8@cls*) (call-with-values (lambda () (G32d8@f* G32f8@cls*)) (lambda (G32fd@G32fb G32fe@G32fc) ((lambda (G3301@g G3302@e) (values (G32d6@f G32f7@cls G3302@e) G3301@g)) G32fe@G32fc G32fd@G32fb)))) G32f5@ls/false) ((lambda (G3305@t) ((lambda (G3307@ls/false) (if G3307@ls/false (apply (lambda (G3309@others) (G2e10@syntax-violation '#f '"invalid guard clause" G3309@others)) G3307@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3305@t))) (G2d25@syntax-dispatch G3305@t 'any))) G32f3@t))) (G2d25@syntax-dispatch G32f3@t '(any . any)))) G32eb@t))) (G2d25@syntax-dispatch G32eb@t '((#(scheme-id else) any . each-any))))) G32e5@t))) (G2d25@syntax-dispatch G32e5@t '()))) G32e3@x*))) (call-with-values (lambda () (G32d8@f* G32d1@clause*)) (lambda (G32db@G32d9 G32dc@G32da) ((lambda (G32df@raisek G32e0@code) (if G32df@raisek (list (list 'call/cc (list 'lambda (list G32df@raisek) (list G32d0@outerk (list 'lambda '() G32e0@code))))) (list G32d0@outerk (list 'lambda '() G32e0@code)))) G32dc@G32da G32db@G32d9))))) '#f '#f))) ((lambda (G32b9@t) ((lambda (G32bb@ls/false) (if (and G32bb@ls/false (apply (lambda (G32bd@con G32be@clause* G32bf@b G32c0@b*) (G2b34@id? G32bd@con)) G32bb@ls/false)) (apply (lambda (G32c5@con G32c6@clause* G32c7@b G32c8@b*) ((lambda (G32cd@outerk) (G2cdb@bless (list (list 'call/cc (list 'lambda (list G32cd@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G32c5@con) (G32b8@gen-clauses G32c5@con G32cd@outerk G32c6@clause*)) (cons 'lambda (cons '() (cons G32c7@b G32c8@b*)))))))))) (gensym))) G32bb@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G32b9@t))) (G2d25@syntax-dispatch G32b9@t '(_ (any . each-any) any . each-any)))) G32b5@x))) '#f))) (set! G2cf5@define-enumeration-macro (lambda (G332f@stx) ((lambda (G3332@set? G3334@remove-dups) (begin (set! G3332@set? (lambda (G334b@x) (or (null? G334b@x) (and (not (memq (car G334b@x) (cdr G334b@x))) (G3332@set? (cdr G334b@x)))))) (set! G3334@remove-dups (lambda (G3349@ls) (if (null? G3349@ls) '() (cons (car G3349@ls) (G3334@remove-dups (remq (car G3349@ls) (cdr G3349@ls))))))) ((lambda (G3335@t) ((lambda (G3337@ls/false) (if (and G3337@ls/false (apply (lambda (G3339@name G333a@id* G333b@maker) (and (G2b34@id? G3339@name) (G2b34@id? G333b@maker) (for-all G2b34@id? G333a@id*))) G3337@ls/false)) (apply (lambda (G333f@name G3340@id* G3341@maker) ((lambda (G3345@name* G3346@mk) (G2cdb@bless (list 'begin (list 'define G3346@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3345@name*)))) (list 'define-syntax G333f@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3345@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G333f@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G3341@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G3341@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3345@name*)) (cons 'syntax-violation (cons (list 'quote G3341@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3346@mk '('(n* ...)))))))))))) (G3334@remove-dups (G2e16@syntax->datum G3340@id*)) (gensym))) G3337@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3335@t))) (G2d25@syntax-dispatch G3335@t '(_ any each-any any)))) G332f@stx))) '#f '#f))) (set! G2cf7@time-macro (lambda (G334d@stx) ((lambda (G334f@t) ((lambda (G3351@ls/false) (if G3351@ls/false (apply (lambda (G3353@expr) (G2cdb@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() G3353@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) G3351@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G334f@t))) (G2d25@syntax-dispatch G334f@t '(_ any)))) G334d@stx))) (set! G2cf9@delay-macro (lambda (G3355@stx) ((lambda (G3357@t) ((lambda (G3359@ls/false) (if G3359@ls/false (apply (lambda (G335b@expr) (G2cdb@bless (list 'make-promise (list 'lambda '() G335b@expr)))) G3359@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3357@t))) (G2d25@syntax-dispatch G3357@t '(_ any)))) G3355@stx))) (set! G2cfb@assert-macro (lambda (G335d@stx) ((lambda (G335f@t) ((lambda (G3361@ls/false) (if G3361@ls/false (apply (lambda (G3363@expr) ((lambda (G3365@pos) (G2cdb@bless (list 'unless G3363@expr (list 'assertion-error (list 'quote G3363@expr) (list 'quote G3365@pos))))) (or (G2e08@expression-position G335d@stx) (G2e08@expression-position G3363@expr)))) G3361@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G335f@t))) (G2d25@syntax-dispatch G335f@t '(_ any)))) G335d@stx))) (set! G2cfd@endianness-macro (lambda (G3367@stx) ((lambda (G3369@t) ((lambda (G336b@ls/false) (if G336b@ls/false (apply (lambda (G336d@e) ((lambda (G336f@t) (if (memv G336f@t '(little)) (G2cdb@bless ''little) (if (memv G336f@t '(big)) (G2cdb@bless ''big) (G2e10@syntax-violation '#f '"endianness must be big or little" G3367@stx)))) (G2e16@syntax->datum G336d@e))) G336b@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3369@t))) (G2d25@syntax-dispatch G3369@t '(_ any)))) G3367@stx))) (set! G2cff@identifier-syntax-macro (lambda (G3371@stx) ((lambda (G3373@t) ((lambda (G3375@ls/false) (if G3375@ls/false (apply (lambda (G3377@expr) (G2cdb@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G3377@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G3377@expr) '((syntax (e* ...)))))))))) G3375@ls/false) ((lambda (G3379@t) ((lambda (G337b@ls/false) (if (and G337b@ls/false (apply (lambda (G337d@id1 G337e@expr1 G337f@id2 G3380@expr2 G3381@expr3) (and (G2b34@id? G337d@id1) (G2b34@id? G337f@id2) (G2b34@id? G3380@expr2))) G337b@ls/false)) (apply (lambda (G3387@id1 G3388@expr1 G3389@id2 G338a@expr2 G338b@expr3) (G2cdb@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G3388@expr1)) (list (list 'set! 'id G338a@expr2) (list 'syntax G338b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G3388@expr1 '(e* ...))))))))) G337b@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3379@t))) (G2d25@syntax-dispatch G3379@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G3373@t))) (G2d25@syntax-dispatch G3373@t '(_ any)))) G3371@stx))) (set! G2d01@do-macro (lambda (G3391@stx) ((lambda (G3394@bind) (begin (set! G3394@bind (lambda (G33ab@x) ((lambda (G33ad@t) ((lambda (G33af@ls/false) (if G33af@ls/false (apply (lambda (G33b1@x G33b2@init) (list G33b1@x G33b2@init G33b1@x)) G33af@ls/false) ((lambda (G33b5@t) ((lambda (G33b7@ls/false) (if G33b7@ls/false (apply (lambda (G33b9@x G33ba@init G33bb@step) (list G33b9@x G33ba@init G33bb@step)) G33b7@ls/false) ((lambda (G33bf@t) ((lambda (G33c1@ls/false) (if G33c1@ls/false (apply (lambda () (G2e10@syntax-violation '#f '"invalid binding" G3391@stx)) G33c1@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G33bf@t))) (G2d25@syntax-dispatch G33bf@t '_))) G33b5@t))) (G2d25@syntax-dispatch G33b5@t '(any any any)))) G33ad@t))) (G2d25@syntax-dispatch G33ad@t '(any any)))) G33ab@x))) ((lambda (G3395@t) ((lambda (G3397@ls/false) (if G3397@ls/false (apply (lambda (G3399@binding* G339a@test G339b@expr* G339c@command*) ((lambda (G33a1@t) ((lambda (G33a3@ls/false) (if G33a3@ls/false (apply (lambda (G33a5@x* G33a6@init* G33a7@step*) (if (G2b3e@valid-bound-ids? G33a5@x*) (G2cdb@bless (list 'letrec (list (list 'loop (list 'lambda G33a5@x* (list 'if G339a@test (cons 'begin (cons '(if #f #f) G339b@expr*)) (cons 'begin (append G339c@command* (list (cons 'loop G33a7@step*)))))))) (cons 'loop G33a6@init*))) (G2e10@syntax-violation '#f '"invalid bindings" G3391@stx))) G33a3@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G33a1@t))) (G2d25@syntax-dispatch G33a1@t '#(each (any any any))))) (map G3394@bind G3399@binding*))) G3397@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3395@t))) (G2d25@syntax-dispatch G3395@t '(_ each-any (any . each-any) . each-any)))) G3391@stx))) '#f))) (set! G2d03@let*-macro (lambda (G33c3@stx) ((lambda (G33c5@t) ((lambda (G33c7@ls/false) (if (and G33c7@ls/false (apply (lambda (G33c9@lhs* G33ca@rhs* G33cb@b G33cc@b*) (for-all G2b34@id? G33c9@lhs*)) G33c7@ls/false)) (apply (lambda (G33d1@lhs* G33d2@rhs* G33d3@b G33d4@b*) (G2cdb@bless ((letrec ((G33d9@f (lambda (G33db@x*) (if (null? G33db@x*) (cons 'let (cons '() (cons G33d3@b G33d4@b*))) (list 'let (list (car G33db@x*)) (G33d9@f (cdr G33db@x*))))))) G33d9@f) (map list G33d1@lhs* G33d2@rhs*)))) G33c7@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G33c5@t))) (G2d25@syntax-dispatch G33c5@t '(_ #(each (any any)) any . each-any)))) G33c3@stx))) (set! G2d05@or-macro (lambda (G33dd@stx) ((lambda (G33df@t) ((lambda (G33e1@ls/false) (if G33e1@ls/false (apply (lambda () '#f) G33e1@ls/false) ((lambda (G33e3@t) ((lambda (G33e5@ls/false) (if G33e5@ls/false (apply (lambda (G33e7@e G33e8@e*) (G2cdb@bless ((letrec ((G33eb@f (lambda (G33ed@e G33ee@e*) (if (null? G33ee@e*) (list 'begin '#f G33ed@e) (list 'let (list (list 't G33ed@e)) (list 'if 't 't (G33eb@f (car G33ee@e*) (cdr G33ee@e*)))))))) G33eb@f) G33e7@e G33e8@e*))) G33e5@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G33e3@t))) (G2d25@syntax-dispatch G33e3@t '(_ any . each-any)))) G33df@t))) (G2d25@syntax-dispatch G33df@t '(_)))) G33dd@stx))) (set! G2d07@and-macro (lambda (G33f1@stx) ((lambda (G33f3@t) ((lambda (G33f5@ls/false) (if G33f5@ls/false (apply (lambda () '#t) G33f5@ls/false) ((lambda (G33f7@t) ((lambda (G33f9@ls/false) (if G33f9@ls/false (apply (lambda (G33fb@e G33fc@e*) (G2cdb@bless ((letrec ((G33ff@f (lambda (G3401@e G3402@e*) (if (null? G3402@e*) (list 'begin '#f G3401@e) (cons 'if (cons G3401@e (cons (G33ff@f (car G3402@e*) (cdr G3402@e*)) '(#f)))))))) G33ff@f) G33fb@e G33fc@e*))) G33f9@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G33f7@t))) (G2d25@syntax-dispatch G33f7@t '(_ any . each-any)))) G33f3@t))) (G2d25@syntax-dispatch G33f3@t '(_)))) G33f1@stx))) (set! G2d09@cond-macro (lambda (G3405@stx) ((lambda (G3407@t) ((lambda (G3409@ls/false) (if G3409@ls/false (apply (lambda (G340b@cls G340c@cls*) (G2cdb@bless ((letrec ((G340f@f (lambda (G3411@cls G3412@cls*) (if (null? G3412@cls*) ((lambda (G3415@t) ((lambda (G3417@ls/false) (if G3417@ls/false (apply (lambda (G3419@e G341a@e*) (cons 'begin (cons G3419@e G341a@e*))) G3417@ls/false) ((lambda (G341d@t) ((lambda (G341f@ls/false) (if G341f@ls/false (apply (lambda (G3421@e G3422@p) (list 'let (list (list 't G3421@e)) (list 'if 't (cons G3422@p '(t))))) G341f@ls/false) ((lambda (G3425@t) ((lambda (G3427@ls/false) (if G3427@ls/false (apply (lambda (G3429@e) (cons 'or (cons G3429@e '((if #f #f))))) G3427@ls/false) ((lambda (G342b@t) ((lambda (G342d@ls/false) (if G342d@ls/false (apply (lambda (G342f@e G3430@e*) (list 'if G342f@e (cons 'begin G3430@e*))) G342d@ls/false) ((lambda (G3433@t) ((lambda (G3435@ls/false) (if G3435@ls/false (apply (lambda () (G2e10@syntax-violation '#f '"invalid last clause" G3405@stx)) G3435@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3433@t))) (G2d25@syntax-dispatch G3433@t '_))) G342b@t))) (G2d25@syntax-dispatch G342b@t '(any . each-any)))) G3425@t))) (G2d25@syntax-dispatch G3425@t '(any)))) G341d@t))) (G2d25@syntax-dispatch G341d@t '(any #(scheme-id =>) any)))) G3415@t))) (G2d25@syntax-dispatch G3415@t '(#(scheme-id else) any . each-any)))) G3411@cls) ((lambda (G3437@t) ((lambda (G3439@ls/false) (if G3439@ls/false (apply (lambda (G343b@e G343c@e*) (G2e10@syntax-violation '#f '"incorrect position of keyword else" G3405@stx)) G3439@ls/false) ((lambda (G343f@t) ((lambda (G3441@ls/false) (if G3441@ls/false (apply (lambda (G3443@e G3444@p) (list 'let (list (list 't G3443@e)) (list 'if 't (cons G3444@p '(t)) (G340f@f (car G3412@cls*) (cdr G3412@cls*))))) G3441@ls/false) ((lambda (G3447@t) ((lambda (G3449@ls/false) (if G3449@ls/false (apply (lambda (G344b@e) (list 'or G344b@e (G340f@f (car G3412@cls*) (cdr G3412@cls*)))) G3449@ls/false) ((lambda (G344d@t) ((lambda (G344f@ls/false) (if G344f@ls/false (apply (lambda (G3451@e G3452@e*) (list 'if G3451@e (cons 'begin G3452@e*) (G340f@f (car G3412@cls*) (cdr G3412@cls*)))) G344f@ls/false) ((lambda (G3455@t) ((lambda (G3457@ls/false) (if G3457@ls/false (apply (lambda () (G2e10@syntax-violation '#f '"invalid last clause" G3405@stx)) G3457@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3455@t))) (G2d25@syntax-dispatch G3455@t '_))) G344d@t))) (G2d25@syntax-dispatch G344d@t '(any . each-any)))) G3447@t))) (G2d25@syntax-dispatch G3447@t '(any)))) G343f@t))) (G2d25@syntax-dispatch G343f@t '(any #(scheme-id =>) any)))) G3437@t))) (G2d25@syntax-dispatch G3437@t '(#(scheme-id else) any . each-any)))) G3411@cls))))) G340f@f) G340b@cls G340c@cls*))) G3409@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3407@t))) (G2d25@syntax-dispatch G3407@t '(_ any . each-any)))) G3405@stx))) (set! G2d0b@do-include (lambda (G3459@stx G345a@id G345b@filename) ((lambda (G345f@filename) (begin (if (not (and (string? G345f@filename) (G2b34@id? G345a@id))) (G2e10@syntax-violation '#f '"invalid syntax" G3459@stx) (void)) (cons (G2cdb@bless 'begin) (with-input-from-file G345f@filename (lambda () ((letrec ((G3461@f (lambda (G3463@ls) ((lambda (G3465@x) (if (eof-object? G3465@x) (reverse G3463@ls) (G3461@f (cons (G2b12@datum->stx G345a@id G3465@x) G3463@ls)))) (G26db@G25fc@read-annotated))))) G3461@f) '())))))) (G2b4a@stx->datum G345b@filename)))) (set! G2d0d@include-macro (lambda (G3467@e) ((lambda (G3469@t) ((lambda (G346b@ls/false) (if G346b@ls/false (apply (lambda (G346d@id G346e@filename) (G2d0b@do-include G3467@e G346d@id G346e@filename)) G346b@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3469@t))) (G2d25@syntax-dispatch G3469@t '(any any)))) G3467@e))) (set! G2d0f@include-into-macro (lambda (G3471@e) ((lambda (G3473@t) ((lambda (G3475@ls/false) (if G3475@ls/false (apply (lambda (G3477@id G3478@filename) (G2d0b@do-include G3471@e G3477@id G3478@filename)) G3475@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3473@t))) (G2d25@syntax-dispatch G3473@t '(_ any any)))) G3471@e))) (set! G2d11@syntax-rules-macro (lambda (G347b@e) ((lambda (G347d@t) ((lambda (G347f@ls/false) (if G347f@ls/false (apply (lambda (G3481@lits G3482@pat* G3483@tmp*) (begin (G2d2b@verify-literals G3481@lits G347b@e) (G2cdb@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G3481@lits (map (lambda (G3487@pat G3488@tmp) ((lambda (G348b@t) ((lambda (G348d@ls/false) (if G348d@ls/false (apply (lambda (G348f@rest) (list (cons 'g G348f@rest) (list 'syntax G3488@tmp))) G348d@ls/false) ((lambda (G3491@t) ((lambda (G3493@ls/false) (if G3493@ls/false (apply (lambda () (G2e10@syntax-violation '#f '"invalid syntax-rules pattern" G347b@e G3487@pat)) G3493@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3491@t))) (G2d25@syntax-dispatch G3491@t '_))) G348b@t))) (G2d25@syntax-dispatch G348b@t '(_ . any)))) G3487@pat)) G3482@pat* G3483@tmp*)))))))) G347f@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G347d@t))) (G2d25@syntax-dispatch G347d@t '(_ each-any . #(each (any any)))))) G347b@e))) (set! G2d13@quasiquote-macro ((lambda () ((lambda (G3496@datum G34b2@quasicons* G34b4@quasicons G34b6@quasiappend G34b8@quasivector G34ba@vquasi G34bc@quasi) (begin (set! G3496@datum (lambda (G3597@x) (list (G2caf@scheme-stx 'quote) (G2b1c@mkstx G3597@x '() '() '())))) (set! G34b2@quasicons* (lambda (G358f@x G3590@y) ((letrec ((G3593@f (lambda (G3595@x) (if (null? G3595@x) G3590@y (G34b4@quasicons (car G3595@x) (G3593@f (cdr G3595@x))))))) G3593@f) G358f@x))) (set! G34b4@quasicons (lambda (G3569@x G356a@y) ((lambda (G356d@t) ((lambda (G356f@ls/false) (if G356f@ls/false (apply (lambda (G3571@dy) ((lambda (G3573@t) ((lambda (G3575@ls/false) (if G3575@ls/false (apply (lambda (G3577@dx) (list (G2caf@scheme-stx 'quote) (cons G3577@dx G3571@dy))) G3575@ls/false) ((lambda (G3579@t) ((lambda (G357b@ls/false) (if G357b@ls/false (apply (lambda () ((lambda (G357d@t) ((lambda (G357f@ls/false) (if G357f@ls/false (apply (lambda () (list (G2caf@scheme-stx 'list) G3569@x)) G357f@ls/false) ((lambda (G3581@t) ((lambda (G3583@ls/false) (if G3583@ls/false (apply (lambda () (list (G2caf@scheme-stx 'cons) G3569@x G356a@y)) G3583@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3581@t))) (G2d25@syntax-dispatch G3581@t '_))) G357d@t))) (G2d25@syntax-dispatch G357d@t '()))) G3571@dy)) G357b@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3579@t))) (G2d25@syntax-dispatch G3579@t '_))) G3573@t))) (G2d25@syntax-dispatch G3573@t '(#(scheme-id quote) any)))) G3569@x)) G356f@ls/false) ((lambda (G3585@t) ((lambda (G3587@ls/false) (if G3587@ls/false (apply (lambda (G3589@stuff) (cons* (G2caf@scheme-stx 'list) G3569@x G3589@stuff)) G3587@ls/false) ((lambda (G358b@t) ((lambda (G358d@ls/false) (if G358d@ls/false (apply (lambda () (list (G2caf@scheme-stx 'cons) G3569@x G356a@y)) G358d@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G358b@t))) (G2d25@syntax-dispatch G358b@t '_))) G3585@t))) (G2d25@syntax-dispatch G3585@t '(#(scheme-id list) . each-any)))) G356d@t))) (G2d25@syntax-dispatch G356d@t '(#(scheme-id quote) any)))) G356a@y))) (set! G34b6@quasiappend (lambda (G354f@x G3550@y) ((lambda (G3553@ls) (if (null? G3553@ls) (list (G2caf@scheme-stx 'quote) '()) (if (null? (cdr G3553@ls)) (car G3553@ls) (cons* (G2caf@scheme-stx 'append) G3553@ls)))) ((letrec ((G3555@f (lambda (G3557@x) (if (null? G3557@x) ((lambda (G3559@t) ((lambda (G355b@ls/false) (if G355b@ls/false (apply (lambda () '()) G355b@ls/false) ((lambda (G355d@t) ((lambda (G355f@ls/false) (if G355f@ls/false (apply (lambda () (list G3550@y)) G355f@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G355d@t))) (G2d25@syntax-dispatch G355d@t '_))) G3559@t))) (G2d25@syntax-dispatch G3559@t '(#(scheme-id quote) ())))) G3550@y) ((lambda (G3561@t) ((lambda (G3563@ls/false) (if G3563@ls/false (apply (lambda () (G3555@f (cdr G3557@x))) G3563@ls/false) ((lambda (G3565@t) ((lambda (G3567@ls/false) (if G3567@ls/false (apply (lambda () (cons (car G3557@x) (G3555@f (cdr G3557@x)))) G3567@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3565@t))) (G2d25@syntax-dispatch G3565@t '_))) G3561@t))) (G2d25@syntax-dispatch G3561@t '(#(scheme-id quote) ())))) (car G3557@x)))))) G3555@f) G354f@x)))) (set! G34b8@quasivector (lambda (G351d@x) ((lambda (G351f@pat-x) ((lambda (G3521@t) ((lambda (G3523@ls/false) (if G3523@ls/false (apply (lambda (G3525@x*) (list (G2caf@scheme-stx 'quote) (list->vector G3525@x*))) G3523@ls/false) ((lambda (G3527@t) ((lambda (G3529@ls/false) (if G3529@ls/false (apply (lambda () ((letrec ((G352b@f (lambda (G352d@x G352e@k) ((lambda (G3531@t) ((lambda (G3533@ls/false) (if G3533@ls/false (apply (lambda (G3535@x*) (G352e@k (map (lambda (G3537@x) (list (G2caf@scheme-stx 'quote) G3537@x)) G3535@x*))) G3533@ls/false) ((lambda (G3539@t) ((lambda (G353b@ls/false) (if G353b@ls/false (apply (lambda (G353d@x*) (G352e@k G353d@x*)) G353b@ls/false) ((lambda (G353f@t) ((lambda (G3541@ls/false) (if G3541@ls/false (apply (lambda (G3543@x G3544@y) (G352b@f G3544@y (lambda (G3547@ls) (G352e@k (cons G3543@x G3547@ls))))) G3541@ls/false) ((lambda (G3549@t) ((lambda (G354b@ls/false) (if G354b@ls/false (apply (lambda () (list (G2caf@scheme-stx 'list->vector) G351f@pat-x)) G354b@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3549@t))) (G2d25@syntax-dispatch G3549@t '_))) G353f@t))) (G2d25@syntax-dispatch G353f@t '(#(scheme-id cons) any any)))) G3539@t))) (G2d25@syntax-dispatch G3539@t '(#(scheme-id list) . each-any)))) G3531@t))) (G2d25@syntax-dispatch G3531@t '(#(scheme-id quote) each-any)))) G352d@x)))) G352b@f) G351d@x (lambda (G354d@ls) (cons* (G2caf@scheme-stx 'vector) G354d@ls)))) G3529@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3527@t))) (G2d25@syntax-dispatch G3527@t '_))) G3521@t))) (G2d25@syntax-dispatch G3521@t '(#(scheme-id quote) each-any)))) G351f@pat-x)) G351d@x))) (set! G34ba@vquasi (lambda (G34fb@p G34fc@lev) ((lambda (G34ff@t) ((lambda (G3501@ls/false) (if G3501@ls/false (apply (lambda (G3503@p G3504@q) ((lambda (G3507@t) ((lambda (G3509@ls/false) (if G3509@ls/false (apply (lambda (G350b@p) (if (= G34fc@lev '0) (G34b2@quasicons* G350b@p (G34ba@vquasi G3504@q G34fc@lev)) (G34b4@quasicons (G34b4@quasicons (G3496@datum 'unquote) (G34bc@quasi G350b@p (- G34fc@lev '1))) (G34ba@vquasi G3504@q G34fc@lev)))) G3509@ls/false) ((lambda (G350d@t) ((lambda (G350f@ls/false) (if G350f@ls/false (apply (lambda (G3511@p) (if (= G34fc@lev '0) (G34b6@quasiappend G3511@p (G34ba@vquasi G3504@q G34fc@lev)) (G34b4@quasicons (G34b4@quasicons (G3496@datum 'unquote-splicing) (G34bc@quasi G3511@p (- G34fc@lev '1))) (G34ba@vquasi G3504@q G34fc@lev)))) G350f@ls/false) ((lambda (G3513@t) ((lambda (G3515@ls/false) (if G3515@ls/false (apply (lambda (G3517@p) (G34b4@quasicons (G34bc@quasi G3517@p G34fc@lev) (G34ba@vquasi G3504@q G34fc@lev))) G3515@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3513@t))) (G2d25@syntax-dispatch G3513@t 'any))) G350d@t))) (G2d25@syntax-dispatch G350d@t '(#(scheme-id unquote-splicing) . each-any)))) G3507@t))) (G2d25@syntax-dispatch G3507@t '(#(scheme-id unquote) . each-any)))) G3503@p)) G3501@ls/false) ((lambda (G3519@t) ((lambda (G351b@ls/false) (if G351b@ls/false (apply (lambda () (list (G2caf@scheme-stx 'quote) '())) G351b@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3519@t))) (G2d25@syntax-dispatch G3519@t '()))) G34ff@t))) (G2d25@syntax-dispatch G34ff@t '(any . any)))) G34fb@p))) (set! G34bc@quasi (lambda (G34c5@p G34c6@lev) ((lambda (G34c9@t) ((lambda (G34cb@ls/false) (if G34cb@ls/false (apply (lambda (G34cd@p) (if (= G34c6@lev '0) G34cd@p (G34b4@quasicons (G3496@datum 'unquote) (G34bc@quasi (list G34cd@p) (- G34c6@lev '1))))) G34cb@ls/false) ((lambda (G34cf@t) ((lambda (G34d1@ls/false) (if G34d1@ls/false (apply (lambda (G34d3@p G34d4@q) (if (= G34c6@lev '0) (G34b2@quasicons* G34d3@p (G34bc@quasi G34d4@q G34c6@lev)) (G34b4@quasicons (G34b4@quasicons (G3496@datum 'unquote) (G34bc@quasi G34d3@p (- G34c6@lev '1))) (G34bc@quasi G34d4@q G34c6@lev)))) G34d1@ls/false) ((lambda (G34d7@t) ((lambda (G34d9@ls/false) (if G34d9@ls/false (apply (lambda (G34db@p G34dc@q) (if (= G34c6@lev '0) (G34b6@quasiappend G34db@p (G34bc@quasi G34dc@q G34c6@lev)) (G34b4@quasicons (G34b4@quasicons (G3496@datum 'unquote-splicing) (G34bc@quasi G34db@p (- G34c6@lev '1))) (G34bc@quasi G34dc@q G34c6@lev)))) G34d9@ls/false) ((lambda (G34df@t) ((lambda (G34e1@ls/false) (if G34e1@ls/false (apply (lambda (G34e3@p) (G34b4@quasicons (G3496@datum 'quasiquote) (G34bc@quasi (list G34e3@p) (+ G34c6@lev '1)))) G34e1@ls/false) ((lambda (G34e5@t) ((lambda (G34e7@ls/false) (if G34e7@ls/false (apply (lambda (G34e9@p G34ea@q) (G34b4@quasicons (G34bc@quasi G34e9@p G34c6@lev) (G34bc@quasi G34ea@q G34c6@lev))) G34e7@ls/false) ((lambda (G34ed@t) ((lambda (G34ef@ls/false) (if (and G34ef@ls/false (apply (lambda (G34f1@x) (not (G2afc@stx? G34f1@x))) G34ef@ls/false)) (apply (lambda (G34f3@x) (G34b8@quasivector (G34ba@vquasi G34f3@x G34c6@lev))) G34ef@ls/false) ((lambda (G34f5@t) ((lambda (G34f7@ls/false) (if G34f7@ls/false (apply (lambda (G34f9@p) (list (G2caf@scheme-stx 'quote) G34f9@p)) G34f7@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G34f5@t))) (G2d25@syntax-dispatch G34f5@t 'any))) G34ed@t))) (G2d25@syntax-dispatch G34ed@t '#(vector each-any)))) G34e5@t))) (G2d25@syntax-dispatch G34e5@t '(any . any)))) G34df@t))) (G2d25@syntax-dispatch G34df@t '(#(scheme-id quasiquote) any)))) G34d7@t))) (G2d25@syntax-dispatch G34d7@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G34cf@t))) (G2d25@syntax-dispatch G34cf@t '((#(scheme-id unquote) . each-any) . any)))) G34c9@t))) (G2d25@syntax-dispatch G34c9@t '(#(scheme-id unquote) any)))) G34c5@p))) (lambda (G34bd@x) ((lambda (G34bf@t) ((lambda (G34c1@ls/false) (if G34c1@ls/false (apply (lambda (G34c3@e) (G34bc@quasi G34c3@e '0)) G34c1@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G34bf@t))) (G2d25@syntax-dispatch G34bf@t '(_ any)))) G34bd@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d15@quasisyntax-macro ((lambda () ((lambda (G359a@quasi) (begin (set! G359a@quasi (lambda (G35b2@p G35b3@lev) ((lambda (G35b6@t) ((lambda (G35b8@ls/false) (if G35b8@ls/false (apply (lambda (G35ba@p) (if (= G35b3@lev '0) ((lambda (G35bc@g) (values (list G35bc@g) (list G35ba@p) G35bc@g)) (gensym)) (call-with-values (lambda () (G359a@quasi G35ba@p (- G35b3@lev '1))) (lambda (G35c1@G35be G35c2@G35bf G35c3@G35c0) ((lambda (G35c7@p G35c8@rhs* G35c9@lhs*) (values G35c9@lhs* G35c8@rhs* (list 'unsyntax G35c7@p))) G35c3@G35c0 G35c2@G35bf G35c1@G35be))))) G35b8@ls/false) ((lambda (G35cd@t) ((lambda (G35cf@ls/false) (if (and G35cf@ls/false (apply (lambda () (= G35b3@lev '0)) G35cf@ls/false)) (apply (lambda () (G2e10@syntax-violation '#f '"incorrect use of unsyntax" G35b2@p)) G35cf@ls/false) ((lambda (G35d1@t) ((lambda (G35d3@ls/false) (if G35d3@ls/false (apply (lambda (G35d5@p* G35d6@q) (call-with-values (lambda () (G359a@quasi G35d6@q G35b3@lev)) (lambda (G35dc@G35d9 G35dd@G35da G35de@G35db) ((lambda (G35e2@q G35e3@rhs* G35e4@lhs*) (if (= G35b3@lev '0) ((lambda (G35e8@g*) (values (append G35e8@g* G35e4@lhs*) (append G35d5@p* G35e3@rhs*) (append G35e8@g* G35e2@q))) (map (lambda (G35ea@x) (gensym)) G35d5@p*)) (call-with-values (lambda () (G359a@quasi G35d5@p* (- G35b3@lev '1))) (lambda (G35ef@G35ec G35f0@G35ed G35f1@G35ee) ((lambda (G35f5@p* G35f6@rhs2* G35f7@lhs2*) (values (append G35f7@lhs2* G35e4@lhs*) (append G35f6@rhs2* G35e3@rhs*) (cons (cons 'unsyntax G35f5@p*) G35e2@q))) G35f1@G35ee G35f0@G35ed G35ef@G35ec))))) G35de@G35db G35dd@G35da G35dc@G35d9)))) G35d3@ls/false) ((lambda (G35fb@t) ((lambda (G35fd@ls/false) (if G35fd@ls/false (apply (lambda (G35ff@p* G3600@q) (call-with-values (lambda () (G359a@quasi G3600@q G35b3@lev)) (lambda (G3606@G3603 G3607@G3604 G3608@G3605) ((lambda (G360c@q G360d@rhs* G360e@lhs*) (if (= G35b3@lev '0) ((lambda (G3612@g*) (values (append (map (lambda (G3614@g) (cons G3614@g '(...))) G3612@g*) G360e@lhs*) (append G35ff@p* G360d@rhs*) (append (apply append (map (lambda (G3616@g) (cons G3616@g '(...))) G3612@g*)) G360c@q))) (map (lambda (G3618@x) (gensym)) G35ff@p*)) (call-with-values (lambda () (G359a@quasi G35ff@p* (- G35b3@lev '1))) (lambda (G361d@G361a G361e@G361b G361f@G361c) ((lambda (G3623@p* G3624@rhs2* G3625@lhs2*) (values (append G3625@lhs2* G360e@lhs*) (append G3624@rhs2* G360d@rhs*) (cons (cons 'unsyntax-splicing G3623@p*) G360c@q))) G361f@G361c G361e@G361b G361d@G361a))))) G3608@G3605 G3607@G3604 G3606@G3603)))) G35fd@ls/false) ((lambda (G3629@t) ((lambda (G362b@ls/false) (if (and G362b@ls/false (apply (lambda () (= G35b3@lev '0)) G362b@ls/false)) (apply (lambda () (G2e10@syntax-violation '#f '"incorrect use of unsyntax-splicing" G35b2@p)) G362b@ls/false) ((lambda (G362d@t) ((lambda (G362f@ls/false) (if G362f@ls/false (apply (lambda (G3631@p) (call-with-values (lambda () (G359a@quasi G3631@p (+ G35b3@lev '1))) (lambda (G3636@G3633 G3637@G3634 G3638@G3635) ((lambda (G363c@p G363d@rhs* G363e@lhs*) (values G363e@lhs* G363d@rhs* (list 'quasisyntax G363c@p))) G3638@G3635 G3637@G3634 G3636@G3633)))) G362f@ls/false) ((lambda (G3642@t) ((lambda (G3644@ls/false) (if G3644@ls/false (apply (lambda (G3646@p G3647@q) (call-with-values (lambda () (G359a@quasi G3646@p G35b3@lev)) (lambda (G3650@G364a G3651@G364b G3652@G364c) (call-with-values (lambda () (G359a@quasi G3647@q G35b3@lev)) (lambda (G3656@G364d G3657@G364e G3658@G364f) ((lambda (G365c@q G365d@rhs2* G365e@lhs2* G365f@p G3660@rhs* G3661@lhs*) (values (append G365e@lhs2* G3661@lhs*) (append G365d@rhs2* G3660@rhs*) (cons G365f@p G365c@q))) G3658@G364f G3657@G364e G3656@G364d G3652@G364c G3651@G364b G3650@G364a)))))) G3644@ls/false) ((lambda (G3668@t) ((lambda (G366a@ls/false) (if G366a@ls/false (apply (lambda (G366c@x*) (call-with-values (lambda () (G359a@quasi G366c@x* G35b3@lev)) (lambda (G3671@G366e G3672@G366f G3673@G3670) ((lambda (G3677@x* G3678@rhs* G3679@lhs*) (values G3679@lhs* G3678@rhs* (list->vector G3677@x*))) G3673@G3670 G3672@G366f G3671@G366e)))) G366a@ls/false) ((lambda (G367d@t) ((lambda (G367f@ls/false) (if G367f@ls/false (apply (lambda () (values '() '() G35b2@p)) G367f@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G367d@t))) (G2d25@syntax-dispatch G367d@t '_))) G3668@t))) (G2d25@syntax-dispatch G3668@t '#(vector each-any)))) G3642@t))) (G2d25@syntax-dispatch G3642@t '(any . any)))) G362d@t))) (G2d25@syntax-dispatch G362d@t '(#(scheme-id quasisyntax) any)))) G3629@t))) (G2d25@syntax-dispatch G3629@t '#(scheme-id unsyntax-splicing)))) G35fb@t))) (G2d25@syntax-dispatch G35fb@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G35d1@t))) (G2d25@syntax-dispatch G35d1@t '((#(scheme-id unsyntax) . each-any) . any)))) G35cd@t))) (G2d25@syntax-dispatch G35cd@t '#(scheme-id unsyntax)))) G35b6@t))) (G2d25@syntax-dispatch G35b6@t '(#(scheme-id unsyntax) any)))) G35b2@p))) (lambda (G359b@x) ((lambda (G359d@t) ((lambda (G359f@ls/false) (if G359f@ls/false (apply (lambda (G35a1@e) (call-with-values (lambda () (G359a@quasi G35a1@e '0)) (lambda (G35a6@G35a3 G35a7@G35a4 G35a8@G35a5) ((lambda (G35ac@v G35ad@rhs* G35ae@lhs*) (G2cdb@bless (list 'syntax-case (cons 'list G35ad@rhs*) '() (list G35ae@lhs* (list 'syntax G35ac@v))))) G35a8@G35a5 G35a7@G35a4 G35a6@G35a3)))) G359f@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G359d@t))) (G2d25@syntax-dispatch G359d@t '(_ any)))) G359b@x)))) '#f)))) (set! G2d17@define-struct-macro (lambda (G3681@stx) (G2e10@syntax-violation '#f '"define-struct not supported" G3681@stx))) (set! G2d19@define-record-type-macro (lambda (G3683@x) ((lambda (G3686@id G3688@get-record-name G368a@get-record-constructor-name G368c@get-record-predicate-name G368e@get-clause G3690@foo-rtd-code G3692@parent-rtd-code G3694@parent-rcd-code G3696@foo-rcd-code G3698@get-protocol-code G369a@get-fields G369c@get-mutator-indices G369e@get-mutators G36a0@get-accessors G36a2@enumerate G36a4@do-define-record G36a6@verify-clauses) (begin (set! G3686@id (lambda (G3879@ctxt . G387b@str*) (G2e14@datum->syntax G3879@ctxt (string->symbol (apply string-append (map (lambda (G387d@x) (if (symbol? G387d@x) (symbol->string G387d@x) (if (string? G387d@x) G387d@x (assertion-violation 'define-record-type '"BUG")))) G387b@str*)))))) (set! G3688@get-record-name (lambda (G3867@spec) ((lambda (G3869@t) ((lambda (G386b@ls/false) (if G386b@ls/false (apply (lambda (G386d@foo G386e@make-foo G386f@foo?) G386d@foo) G386b@ls/false) ((lambda (G3873@t) ((lambda (G3875@ls/false) (if G3875@ls/false (apply (lambda (G3877@foo) G3877@foo) G3875@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3873@t))) (G2d25@syntax-dispatch G3873@t 'any))) G3869@t))) (G2d25@syntax-dispatch G3869@t '(any any any)))) G3867@spec))) (set! G368a@get-record-constructor-name (lambda (G3853@spec) ((lambda (G3855@t) ((lambda (G3857@ls/false) (if G3857@ls/false (apply (lambda (G3859@foo G385a@make-foo G385b@foo?) G385a@make-foo) G3857@ls/false) ((lambda (G385f@t) ((lambda (G3861@ls/false) (if (and G3861@ls/false (apply (lambda (G3863@foo) (G2b34@id? G3863@foo)) G3861@ls/false)) (apply (lambda (G3865@foo) (G3686@id G3865@foo '"make-" (G2b4a@stx->datum G3865@foo))) G3861@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G385f@t))) (G2d25@syntax-dispatch G385f@t 'any))) G3855@t))) (G2d25@syntax-dispatch G3855@t '(any any any)))) G3853@spec))) (set! G368c@get-record-predicate-name (lambda (G383f@spec) ((lambda (G3841@t) ((lambda (G3843@ls/false) (if G3843@ls/false (apply (lambda (G3845@foo G3846@make-foo G3847@foo?) G3847@foo?) G3843@ls/false) ((lambda (G384b@t) ((lambda (G384d@ls/false) (if (and G384d@ls/false (apply (lambda (G384f@foo) (G2b34@id? G384f@foo)) G384d@ls/false)) (apply (lambda (G3851@foo) (G3686@id G3851@foo (G2b4a@stx->datum G3851@foo) '"?")) G384d@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G384b@t))) (G2d25@syntax-dispatch G384b@t 'any))) G3841@t))) (G2d25@syntax-dispatch G3841@t '(any any any)))) G383f@spec))) (set! G368e@get-clause (lambda (G382d@id G382e@ls) ((lambda (G3831@t) ((lambda (G3833@ls/false) (if G3833@ls/false (apply (lambda () '#f) G3833@ls/false) ((lambda (G3835@t) ((lambda (G3837@ls/false) (if G3837@ls/false (apply (lambda (G3839@x G383a@rest G383b@ls) (if (G2b3c@free-id=? (G2cdb@bless G382d@id) G3839@x) (cons G3839@x G383a@rest) (G368e@get-clause G382d@id G383b@ls))) G3837@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3835@t))) (G2d25@syntax-dispatch G3835@t '((any . any) . any)))) G3831@t))) (G2d25@syntax-dispatch G3831@t '()))) G382e@ls))) (set! G3690@foo-rtd-code (lambda (G37db@name G37dc@clause* G37dd@parent-rtd-code) ((lambda (G37e2@convert-field-spec*) (begin (set! G37e2@convert-field-spec* (lambda (G3813@ls) (list->vector (map (lambda (G3815@x) ((lambda (G3817@t) ((lambda (G3819@ls/false) (if G3819@ls/false (apply (lambda (G381b@name G381c@rest) (list 'mutable G381b@name)) G3819@ls/false) ((lambda (G381f@t) ((lambda (G3821@ls/false) (if G3821@ls/false (apply (lambda (G3823@name G3824@rest) (list 'immutable G3823@name)) G3821@ls/false) ((lambda (G3827@t) ((lambda (G3829@ls/false) (if G3829@ls/false (apply (lambda (G382b@name) (list 'immutable G382b@name)) G3829@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3827@t))) (G2d25@syntax-dispatch G3827@t 'any))) G381f@t))) (G2d25@syntax-dispatch G381f@t '(#(scheme-id immutable) any . any)))) G3817@t))) (G2d25@syntax-dispatch G3817@t '(#(scheme-id mutable) any . any)))) G3815@x)) G3813@ls)))) ((lambda (G37e3@uid-code G37e4@sealed? G37e5@opaque? G37e6@fields) (G2cdb@bless (list 'make-record-type-descriptor (list 'quote G37db@name) G37dd@parent-rtd-code G37e3@uid-code G37e4@sealed? G37e5@opaque? G37e6@fields))) ((lambda (G37eb@t) ((lambda (G37ed@ls/false) (if G37ed@ls/false (apply (lambda () (list 'quote (gensym))) G37ed@ls/false) ((lambda (G37ef@t) ((lambda (G37f1@ls/false) (if G37f1@ls/false (apply (lambda (G37f3@uid) (list 'quote G37f3@uid)) G37f1@ls/false) ((lambda (G37f5@t) ((lambda (G37f7@ls/false) (if G37f7@ls/false (apply (lambda () '#f) G37f7@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G37f5@t))) (G2d25@syntax-dispatch G37f5@t '_))) G37ef@t))) (G2d25@syntax-dispatch G37ef@t '(_ any)))) G37eb@t))) (G2d25@syntax-dispatch G37eb@t '(_)))) (G368e@get-clause 'nongenerative G37dc@clause*)) ((lambda (G37f9@t) ((lambda (G37fb@ls/false) (if G37fb@ls/false (apply (lambda () '#t) G37fb@ls/false) ((lambda (G37fd@t) ((lambda (G37ff@ls/false) (if G37ff@ls/false (apply (lambda () '#f) G37ff@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G37fd@t))) (G2d25@syntax-dispatch G37fd@t '_))) G37f9@t))) (G2d25@syntax-dispatch G37f9@t '(_ #(atom #t))))) (G368e@get-clause 'sealed G37dc@clause*)) ((lambda (G3801@t) ((lambda (G3803@ls/false) (if G3803@ls/false (apply (lambda () '#t) G3803@ls/false) ((lambda (G3805@t) ((lambda (G3807@ls/false) (if G3807@ls/false (apply (lambda () '#f) G3807@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3805@t))) (G2d25@syntax-dispatch G3805@t '_))) G3801@t))) (G2d25@syntax-dispatch G3801@t '(_ #(atom #t))))) (G368e@get-clause 'opaque G37dc@clause*)) ((lambda (G3809@t) ((lambda (G380b@ls/false) (if G380b@ls/false (apply (lambda (G380d@field-spec*) (list 'quote (G37e2@convert-field-spec* G380d@field-spec*))) G380b@ls/false) ((lambda (G380f@t) ((lambda (G3811@ls/false) (if G3811@ls/false (apply (lambda () ''#()) G3811@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G380f@t))) (G2d25@syntax-dispatch G380f@t '_))) G3809@t))) (G2d25@syntax-dispatch G3809@t '(_ . each-any)))) (G368e@get-clause 'fields G37dc@clause*))))) '#f))) (set! G3692@parent-rtd-code (lambda (G37c3@clause*) ((lambda (G37c5@t) ((lambda (G37c7@ls/false) (if G37c7@ls/false (apply (lambda (G37c9@name) (begin (if (G2afc@stx? G37c9@name) (format (current-error-port) '"name=~a\n" (G2b00@stx-expr G37c9@name)) (void)) (list 'record-type-descriptor G37c9@name))) G37c7@ls/false) ((lambda (G37cb@t) ((lambda (G37cd@ls/false) (if G37cd@ls/false (apply (lambda () ((lambda (G37cf@t) ((lambda (G37d1@ls/false) (if G37d1@ls/false (apply (lambda (G37d3@rtd G37d4@rcd) G37d3@rtd) G37d1@ls/false) ((lambda (G37d7@t) ((lambda (G37d9@ls/false) (if G37d9@ls/false (apply (lambda () '#f) G37d9@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G37d7@t))) (G2d25@syntax-dispatch G37d7@t '#(atom #f)))) G37cf@t))) (G2d25@syntax-dispatch G37cf@t '(_ any any)))) (G368e@get-clause 'parent-rtd G37c3@clause*))) G37cd@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G37cb@t))) (G2d25@syntax-dispatch G37cb@t '#(atom #f)))) G37c5@t))) (G2d25@syntax-dispatch G37c5@t '(_ any)))) (G368e@get-clause 'parent G37c3@clause*)))) (set! G3694@parent-rcd-code (lambda (G37ab@clause*) ((lambda (G37ad@t) ((lambda (G37af@ls/false) (if G37af@ls/false (apply (lambda (G37b1@name) (list 'record-constructor-descriptor G37b1@name)) G37af@ls/false) ((lambda (G37b3@t) ((lambda (G37b5@ls/false) (if G37b5@ls/false (apply (lambda () ((lambda (G37b7@t) ((lambda (G37b9@ls/false) (if G37b9@ls/false (apply (lambda (G37bb@rtd G37bc@rcd) G37bc@rcd) G37b9@ls/false) ((lambda (G37bf@t) ((lambda (G37c1@ls/false) (if G37c1@ls/false (apply (lambda () '#f) G37c1@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G37bf@t))) (G2d25@syntax-dispatch G37bf@t '#(atom #f)))) G37b7@t))) (G2d25@syntax-dispatch G37b7@t '(_ any any)))) (G368e@get-clause 'parent-rtd G37ab@clause*))) G37b5@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G37b3@t))) (G2d25@syntax-dispatch G37b3@t '#(atom #f)))) G37ad@t))) (G2d25@syntax-dispatch G37ad@t '(_ any)))) (G368e@get-clause 'parent G37ab@clause*)))) (set! G3696@foo-rcd-code (lambda (G37a3@clause* G37a4@foo-rtd G37a5@protocol G37a6@parent-rcd-code) (list 'make-record-constructor-descriptor G37a4@foo-rtd G37a6@parent-rcd-code G37a5@protocol))) (set! G3698@get-protocol-code (lambda (G3797@clause*) ((lambda (G3799@t) ((lambda (G379b@ls/false) (if G379b@ls/false (apply (lambda (G379d@expr) G379d@expr) G379b@ls/false) ((lambda (G379f@t) ((lambda (G37a1@ls/false) (if G37a1@ls/false (apply (lambda () '#f) G37a1@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G379f@t))) (G2d25@syntax-dispatch G379f@t '_))) G3799@t))) (G2d25@syntax-dispatch G3799@t '(_ any)))) (G368e@get-clause 'protocol G3797@clause*)))) (set! G369a@get-fields (lambda (G3785@clause*) ((lambda (G3787@t) ((lambda (G3789@ls/false) (if G3789@ls/false (apply (lambda () '()) G3789@ls/false) ((lambda (G378b@t) ((lambda (G378d@ls/false) (if G378d@ls/false (apply (lambda (G378f@f*) G378f@f*) G378d@ls/false) ((lambda (G3791@t) ((lambda (G3793@ls/false) (if G3793@ls/false (apply (lambda (G3795@rest) (G369a@get-fields G3795@rest)) G3793@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3791@t))) (G2d25@syntax-dispatch G3791@t '(_ . any)))) G378b@t))) (G2d25@syntax-dispatch G378b@t '((#(scheme-id fields) . each-any) . _)))) G3787@t))) (G2d25@syntax-dispatch G3787@t '()))) G3785@clause*))) (set! G369c@get-mutator-indices (lambda (G376d@fields) ((letrec ((G376f@f (lambda (G3771@fields G3772@i) ((lambda (G3775@t) ((lambda (G3777@ls/false) (if G3777@ls/false (apply (lambda () '()) G3777@ls/false) ((lambda (G3779@t) ((lambda (G377b@ls/false) (if G377b@ls/false (apply (lambda (G377d@rest) (cons G3772@i (G376f@f G377d@rest (+ G3772@i '1)))) G377b@ls/false) ((lambda (G377f@t) ((lambda (G3781@ls/false) (if G3781@ls/false (apply (lambda (G3783@rest) (G376f@f G3783@rest (+ G3772@i '1))) G3781@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G377f@t))) (G2d25@syntax-dispatch G377f@t '(_ . any)))) G3779@t))) (G2d25@syntax-dispatch G3779@t '((#(scheme-id mutable) . _) . any)))) G3775@t))) (G2d25@syntax-dispatch G3775@t '()))) G3771@fields)))) G376f@f) G376d@fields '0))) (set! G369e@get-mutators (lambda (G3743@foo G3744@fields) ((lambda (G3748@gen-name) (begin (set! G3748@gen-name (lambda (G376b@x) (G2e14@datum->syntax G3743@foo (string->symbol (string-append (symbol->string (G2e16@syntax->datum G3743@foo)) '"-" (symbol->string (G2e16@syntax->datum G376b@x)) '"-set!"))))) ((letrec ((G3749@f (lambda (G374b@fields) ((lambda (G374d@t) ((lambda (G374f@ls/false) (if G374f@ls/false (apply (lambda () '()) G374f@ls/false) ((lambda (G3751@t) ((lambda (G3753@ls/false) (if G3753@ls/false (apply (lambda (G3755@name G3756@accessor G3757@mutator G3758@rest) (cons G3757@mutator (G3749@f G3758@rest))) G3753@ls/false) ((lambda (G375d@t) ((lambda (G375f@ls/false) (if G375f@ls/false (apply (lambda (G3761@name G3762@rest) (cons (G3748@gen-name G3761@name) (G3749@f G3762@rest))) G375f@ls/false) ((lambda (G3765@t) ((lambda (G3767@ls/false) (if G3767@ls/false (apply (lambda (G3769@rest) (G3749@f G3769@rest)) G3767@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3765@t))) (G2d25@syntax-dispatch G3765@t '(_ . any)))) G375d@t))) (G2d25@syntax-dispatch G375d@t '((#(scheme-id mutable) any) . any)))) G3751@t))) (G2d25@syntax-dispatch G3751@t '((#(scheme-id mutable) any any any) . any)))) G374d@t))) (G2d25@syntax-dispatch G374d@t '()))) G374b@fields)))) G3749@f) G3744@fields))) '#f))) (set! G36a0@get-accessors (lambda (G36ff@foo G3700@fields) ((lambda (G3704@gen-name) (begin (set! G3704@gen-name (lambda (G3741@x) (G2e14@datum->syntax G36ff@foo (string->symbol (string-append (symbol->string (G2e16@syntax->datum G36ff@foo)) '"-" (symbol->string (G2e16@syntax->datum G3741@x))))))) (map (lambda (G3705@field) ((lambda (G3707@t) ((lambda (G3709@ls/false) (if (and G3709@ls/false (apply (lambda (G370b@name G370c@accessor G370d@mutator) (G2b34@id? G370c@accessor)) G3709@ls/false)) (apply (lambda (G3711@name G3712@accessor G3713@mutator) G3712@accessor) G3709@ls/false) ((lambda (G3717@t) ((lambda (G3719@ls/false) (if (and G3719@ls/false (apply (lambda (G371b@name G371c@accessor) (G2b34@id? G371c@accessor)) G3719@ls/false)) (apply (lambda (G371f@name G3720@accessor) G3720@accessor) G3719@ls/false) ((lambda (G3723@t) ((lambda (G3725@ls/false) (if (and G3725@ls/false (apply (lambda (G3727@name) (G2b34@id? G3727@name)) G3725@ls/false)) (apply (lambda (G3729@name) (G3704@gen-name G3729@name)) G3725@ls/false) ((lambda (G372b@t) ((lambda (G372d@ls/false) (if (and G372d@ls/false (apply (lambda (G372f@name) (G2b34@id? G372f@name)) G372d@ls/false)) (apply (lambda (G3731@name) (G3704@gen-name G3731@name)) G372d@ls/false) ((lambda (G3733@t) ((lambda (G3735@ls/false) (if (and G3735@ls/false (apply (lambda (G3737@name) (G2b34@id? G3737@name)) G3735@ls/false)) (apply (lambda (G3739@name) (G3704@gen-name G3739@name)) G3735@ls/false) ((lambda (G373b@t) ((lambda (G373d@ls/false) (if G373d@ls/false (apply (lambda (G373f@others) (G2e10@syntax-violation '#f '"invalid field spec" G3705@field)) G373d@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G373b@t))) (G2d25@syntax-dispatch G373b@t 'any))) G3733@t))) (G2d25@syntax-dispatch G3733@t 'any))) G372b@t))) (G2d25@syntax-dispatch G372b@t '(#(scheme-id immutable) any)))) G3723@t))) (G2d25@syntax-dispatch G3723@t '(#(scheme-id mutable) any)))) G3717@t))) (G2d25@syntax-dispatch G3717@t '(#(scheme-id immutable) any any)))) G3707@t))) (G2d25@syntax-dispatch G3707@t '(#(scheme-id mutable) any any any)))) G3705@field)) G3700@fields))) '#f))) (set! G36a2@enumerate (lambda (G36f7@ls) ((letrec ((G36f9@f (lambda (G36fb@ls G36fc@i) (if (null? G36fb@ls) '() (cons G36fc@i (G36f9@f (cdr G36fb@ls) (+ G36fc@i '1))))))) G36f9@f) G36f7@ls '0))) (set! G36a4@do-define-record (lambda (G36cf@namespec G36d0@clause*) ((lambda (G36d3@foo) ((lambda (G36d5@foo-rtd) ((lambda (G36d7@foo-rcd) ((lambda (G36d9@protocol) ((lambda (G36db@make-foo) ((lambda (G36dd@fields) ((lambda (G36df@idx*) ((lambda (G36e1@foo-x*) ((lambda (G36e3@set-foo-x!*) ((lambda (G36e5@set-foo-idx*) ((lambda (G36e7@foo?) ((lambda (G36e9@foo-rtd-code) ((lambda (G36eb@foo-rcd-code) ((lambda (G36ed@protocol-code) ((lambda () (G2cdb@bless (cons 'begin (cons (list 'define G36d5@foo-rtd G36e9@foo-rtd-code) (cons (list 'define G36d9@protocol G36ed@protocol-code) (cons (list 'define G36d7@foo-rcd G36eb@foo-rcd-code) (cons (list 'define-syntax G36d3@foo (list 'list ''$rtd (list 'syntax G36d5@foo-rtd) (list 'syntax G36d7@foo-rcd))) (cons (list 'define G36e7@foo? (list 'record-predicate G36d5@foo-rtd)) (cons (list 'define G36db@make-foo (list 'record-constructor G36d7@foo-rcd)) (append (map (lambda (G36ef@foo-x G36f0@idx) (list 'define G36ef@foo-x (list 'record-accessor G36d5@foo-rtd G36f0@idx))) G36e1@foo-x* G36df@idx*) (map (lambda (G36f3@set-foo-x! G36f4@idx) (list 'define G36f3@set-foo-x! (list 'record-mutator G36d5@foo-rtd G36f4@idx))) G36e3@set-foo-x!* G36e5@set-foo-idx*))))))))))))) (G3698@get-protocol-code G36d0@clause*))) (G3696@foo-rcd-code G36d0@clause* G36d5@foo-rtd G36d9@protocol (G3694@parent-rcd-code G36d0@clause*)))) (G3690@foo-rtd-code G36d3@foo G36d0@clause* (G3692@parent-rtd-code G36d0@clause*)))) (G368c@get-record-predicate-name G36cf@namespec))) (G369c@get-mutator-indices G36dd@fields))) (G369e@get-mutators G36d3@foo G36dd@fields))) (G36a0@get-accessors G36d3@foo G36dd@fields))) (G36a2@enumerate G36dd@fields))) (G369a@get-fields G36d0@clause*))) (G368a@get-record-constructor-name G36cf@namespec))) (gensym))) (gensym))) (gensym))) (G3688@get-record-name G36cf@namespec)))) (set! G36a6@verify-clauses (lambda (G36af@x G36b0@cls*) ((lambda (G36b4@valid-kwds G36b6@free-id-member?) (begin (set! G36b4@valid-kwds (map G2cdb@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G36b6@free-id-member? (lambda (G36cb@x G36cc@ls) (and (pair? G36cc@ls) (or (G2b3c@free-id=? G36cb@x (car G36cc@ls)) (G36b6@free-id-member? G36cb@x (cdr G36cc@ls)))))) ((letrec ((G36b7@f (lambda (G36b9@cls* G36ba@seen*) (if (not (null? G36b9@cls*)) ((lambda (G36bd@t) ((lambda (G36bf@ls/false) (if G36bf@ls/false (apply (lambda (G36c1@kwd G36c2@rest) (if (or (not (G2b34@id? G36c1@kwd)) (not (G36b6@free-id-member? G36c1@kwd G36b4@valid-kwds))) (G2e10@syntax-violation '#f '"not a valid define-record-type keyword" G36c1@kwd) (if (G2b42@bound-id-member? G36c1@kwd G36ba@seen*) (G2e10@syntax-violation '#f '"duplicate use of keyword " G36af@x G36c1@kwd) (G36b7@f (cdr G36b9@cls*) (cons G36c1@kwd G36ba@seen*))))) G36bf@ls/false) ((lambda (G36c5@t) ((lambda (G36c7@ls/false) (if G36c7@ls/false (apply (lambda (G36c9@cls) (G2e10@syntax-violation '#f '"malformed define-record-type clause" G36c9@cls)) G36c7@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G36c5@t))) (G2d25@syntax-dispatch G36c5@t 'any))) G36bd@t))) (G2d25@syntax-dispatch G36bd@t '(any . any)))) (car G36b9@cls*)) (void))))) G36b7@f) G36b0@cls* '()))) '#f '#f))) ((lambda (G36a7@t) ((lambda (G36a9@ls/false) (if G36a9@ls/false (apply (lambda (G36ab@namespec G36ac@clause*) (begin (G36a6@verify-clauses G3683@x G36ac@clause*) (G36a4@do-define-record G36ab@namespec G36ac@clause*))) G36a9@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G36a7@t))) (G2d25@syntax-dispatch G36a7@t '(_ any . each-any)))) G3683@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2d1b@define-condition-type-macro (lambda (G387f@x) ((lambda (G3882@mkname) (begin (set! G3882@mkname (lambda (G38af@name G38b0@suffix) (G2e14@datum->syntax G38af@name (string->symbol (string-append (symbol->string (G2e16@syntax->datum G38af@name)) G38b0@suffix))))) ((lambda (G3883@t) ((lambda (G3885@ls/false) (if (and G3885@ls/false (apply (lambda (G3887@ctxt G3888@name G3889@super G388a@constructor G388b@predicate G388c@field* G388d@accessor*) (and (G2b34@id? G3888@name) (G2b34@id? G3889@super) (G2b34@id? G388a@constructor) (G2b34@id? G388b@predicate) (for-all G2b34@id? G388c@field*) (for-all G2b34@id? G388d@accessor*))) G3885@ls/false)) (apply (lambda (G3895@ctxt G3896@name G3897@super G3898@constructor G3899@predicate G389a@field* G389b@accessor*) ((lambda (G38a3@aux-accessor*) (G2cdb@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3896@name G3898@constructor (gensym)) (cons (list 'parent G3897@super) (cons (cons 'fields (map (lambda (G38a5@field G38a6@aux) (list 'immutable G38a5@field G38a6@aux)) G389a@field* G38a3@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3899@predicate (list 'condition-predicate (list 'record-type-descriptor G3896@name))) (map (lambda (G38a9@accessor G38aa@aux) (list 'define G38a9@accessor (list 'condition-accessor (list 'record-type-descriptor G3896@name) G38aa@aux))) G389b@accessor* G38a3@aux-accessor*)))))) (map (lambda (G38ad@x) (gensym)) G389b@accessor*))) G3885@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3883@t))) (G2d25@syntax-dispatch G3883@t '(any any any any any . #(each (any any)))))) G387f@x))) '#f))) (set! G2d1d@incorrect-usage-macro (lambda (G38b3@e) (G2e10@syntax-violation '#f '"incorrect usage of auxiliary keyword" G38b3@e))) (set! G2d1f@parameterize-macro (lambda (G38b5@e) ((lambda (G38b7@t) ((lambda (G38b9@ls/false) (if G38b9@ls/false (apply (lambda (G38bb@b G38bc@b*) (G2cdb@bless (cons 'let (cons '() (cons G38bb@b G38bc@b*))))) G38b9@ls/false) ((lambda (G38bf@t) ((lambda (G38c1@ls/false) (if G38c1@ls/false (apply (lambda (G38c3@olhs* G38c4@orhs* G38c5@b G38c6@b*) ((lambda (G38cb@lhs* G38cc@rhs*) (G2cdb@bless (cons (list 'lambda (append G38cb@lhs* G38cc@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G38cf@lhs G38d0@rhs) (list 'let (list (list 't (list G38cf@lhs))) (list G38cf@lhs G38d0@rhs) (cons 'set! (cons G38d0@rhs '(t))))) G38cb@lhs* G38cc@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G38c5@b G38c6@b*))) '(swap)))))) (append G38c3@olhs* G38c4@orhs*)))) (G2dfe@generate-temporaries G38c3@olhs*) (G2dfe@generate-temporaries G38c4@orhs*))) G38c1@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G38bf@t))) (G2d25@syntax-dispatch G38bf@t '(_ #(each (any any)) any . each-any)))) G38b7@t))) (G2d25@syntax-dispatch G38b7@t '(_ () any . each-any)))) G38b5@e))) (set! G2d21@foreign-call-transformer (lambda (G38d3@e G38d4@r G38d5@mr) ((lambda (G38d9@t) ((lambda (G38db@ls/false) (if G38db@ls/false (apply (lambda (G38dd@name G38de@arg*) (cons 'foreign-call (cons (G2d49@chi-expr G38dd@name G38d4@r G38d5@mr) (G2d45@chi-expr* G38de@arg* G38d4@r G38d5@mr)))) G38db@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G38d9@t))) (G2d25@syntax-dispatch G38d9@t '(_ any . each-any)))) G38d3@e))) (set! G2d23@convert-pattern (lambda (G38e1@pattern G38e2@keys) ((lambda (G38e6@cvt* G38e8@cvt) (begin (set! G38e6@cvt* (lambda (G3977@p* G3978@n G3979@ids) (if (null? G3977@p*) (values '() G3979@ids) (call-with-values (lambda () (G38e6@cvt* (cdr G3977@p*) G3978@n G3979@ids)) (lambda (G397f@G397d G3980@G397e) ((lambda (G3983@ids G3984@y) (call-with-values (lambda () (G38e8@cvt (car G3977@p*) G3978@n G3983@ids)) (lambda (G3989@G3987 G398a@G3988) ((lambda (G398d@ids G398e@x) (values (cons G398e@x G3984@y) G398d@ids)) G398a@G3988 G3989@G3987)))) G3980@G397e G397f@G397d)))))) (set! G38e8@cvt (lambda (G38e9@p G38ea@n G38eb@ids) ((lambda (G38ef@t) ((lambda (G38f1@ls/false) (if (and G38f1@ls/false (apply (lambda (G38f3@id) (G2b34@id? G38f3@id)) G38f1@ls/false)) (apply (lambda (G38f5@id) (if (G2b42@bound-id-member? G38e9@p G38e2@keys) (values (vector 'free-id G38e9@p) G38eb@ids) (if (G2b3c@free-id=? G38e9@p (G2caf@scheme-stx '_)) (values '_ G38eb@ids) (values 'any (cons (cons G38e9@p G38ea@n) G38eb@ids))))) G38f1@ls/false) ((lambda (G38f7@t) ((lambda (G38f9@ls/false) (if (and G38f9@ls/false (apply (lambda (G38fb@p G38fc@dots) (G2d27@ellipsis? G38fc@dots)) G38f9@ls/false)) (apply (lambda (G38ff@p G3900@dots) (call-with-values (lambda () (G38e8@cvt G38ff@p (+ G38ea@n '1) G38eb@ids)) (lambda (G3905@G3903 G3906@G3904) ((lambda (G3909@ids G390a@p) (values (if (eq? G390a@p 'any) 'each-any (vector 'each G390a@p)) G3909@ids)) G3906@G3904 G3905@G3903)))) G38f9@ls/false) ((lambda (G390d@t) ((lambda (G390f@ls/false) (if (and G390f@ls/false (apply (lambda (G3911@x G3912@dots G3913@ys G3914@z) (G2d27@ellipsis? G3912@dots)) G390f@ls/false)) (apply (lambda (G3919@x G391a@dots G391b@ys G391c@z) (call-with-values (lambda () (G38e8@cvt G391c@z G38ea@n G38eb@ids)) (lambda (G3923@G3921 G3924@G3922) ((lambda (G3927@ids G3928@z) (call-with-values (lambda () (G38e6@cvt* G391b@ys G38ea@n G3927@ids)) (lambda (G392d@G392b G392e@G392c) ((lambda (G3931@ids G3932@ys) (call-with-values (lambda () (G38e8@cvt G3919@x (+ G38ea@n '1) G3931@ids)) (lambda (G3937@G3935 G3938@G3936) ((lambda (G393b@ids G393c@x) (values (vector 'each+ G393c@x (reverse G3932@ys) G3928@z) G393b@ids)) G3938@G3936 G3937@G3935)))) G392e@G392c G392d@G392b)))) G3924@G3922 G3923@G3921)))) G390f@ls/false) ((lambda (G393f@t) ((lambda (G3941@ls/false) (if G3941@ls/false (apply (lambda (G3943@x G3944@y) (call-with-values (lambda () (G38e8@cvt G3944@y G38ea@n G38eb@ids)) (lambda (G3949@G3947 G394a@G3948) ((lambda (G394d@ids G394e@y) (call-with-values (lambda () (G38e8@cvt G3943@x G38ea@n G394d@ids)) (lambda (G3953@G3951 G3954@G3952) ((lambda (G3957@ids G3958@x) (values (cons G3958@x G394e@y) G3957@ids)) G3954@G3952 G3953@G3951)))) G394a@G3948 G3949@G3947)))) G3941@ls/false) ((lambda (G395b@t) ((lambda (G395d@ls/false) (if G395d@ls/false (apply (lambda () (values '() G38eb@ids)) G395d@ls/false) ((lambda (G395f@t) ((lambda (G3961@ls/false) (if (and G3961@ls/false (apply (lambda (G3963@p) (not (G2afc@stx? G3963@p))) G3961@ls/false)) (apply (lambda (G3965@p) (call-with-values (lambda () (G38e8@cvt G3965@p G38ea@n G38eb@ids)) (lambda (G3969@G3967 G396a@G3968) ((lambda (G396d@ids G396e@p) (values (vector 'vector G396e@p) G396d@ids)) G396a@G3968 G3969@G3967)))) G3961@ls/false) ((lambda (G3971@t) ((lambda (G3973@ls/false) (if G3973@ls/false (apply (lambda (G3975@datum) (values (vector 'atom (G2b4a@stx->datum G3975@datum)) G38eb@ids)) G3973@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3971@t))) (G2d25@syntax-dispatch G3971@t 'any))) G395f@t))) (G2d25@syntax-dispatch G395f@t '#(vector each-any)))) G395b@t))) (G2d25@syntax-dispatch G395b@t '()))) G393f@t))) (G2d25@syntax-dispatch G393f@t '(any . any)))) G390d@t))) (G2d25@syntax-dispatch G390d@t '(any any . #(each+ any () any))))) G38f7@t))) (G2d25@syntax-dispatch G38f7@t '(any any)))) G38ef@t))) (G2d25@syntax-dispatch G38ef@t 'any))) G38e9@p))) (G38e8@cvt G38e1@pattern '0 '()))) '#f '#f))) (set! G2d25@syntax-dispatch ((lambda () ((lambda (G3992@stx^ G3994@match-each G3996@match-each+ G3998@match-each-any G399a@match-empty G399c@combine G399e@match* G39a0@match) (begin (set! G3992@stx^ (lambda (G3a5b@e G3a5c@m* G3a5d@s* G3a5e@ae*) (if (and (null? G3a5c@m*) (null? G3a5d@s*) (null? G3a5e@ae*)) G3a5b@e (G2b1c@mkstx G3a5b@e G3a5c@m* G3a5d@s* G3a5e@ae*)))) (set! G3994@match-each (lambda (G3a3e@e G3a3f@p G3a40@m* G3a41@s* G3a42@ae*) (if (pair? G3a3e@e) ((lambda (G3a48@first) (and G3a48@first ((lambda (G3a4a@rest) (and G3a4a@rest (cons G3a48@first G3a4a@rest))) (G3994@match-each (cdr G3a3e@e) G3a3f@p G3a40@m* G3a41@s* G3a42@ae*)))) (G39a0@match (car G3a3e@e) G3a3f@p G3a40@m* G3a41@s* G3a42@ae* '())) (if (null? G3a3e@e) '() (if (G2afc@stx? G3a3e@e) (and (not (G2ab2@top-marked? G3a40@m*)) (call-with-values (lambda () (G2b1a@join-wraps G3a40@m* G3a41@s* G3a42@ae* G3a3e@e)) (lambda (G3a4f@G3a4c G3a50@G3a4d G3a51@G3a4e) ((lambda (G3a55@ae* G3a56@s* G3a57@m*) (G3994@match-each (G2b00@stx-expr G3a3e@e) G3a3f@p G3a57@m* G3a56@s* G3a55@ae*)) G3a51@G3a4e G3a50@G3a4d G3a4f@G3a4c)))) (if (G26dd@G2600@annotation? G3a3e@e) (G3994@match-each (G26df@G2604@annotation-expression G3a3e@e) G3a3f@p G3a40@m* G3a41@s* G3a42@ae*) '#f)))))) (set! G3996@match-each+ (lambda (G3a04@e G3a05@x-pat G3a06@y-pat G3a07@z-pat G3a08@m* G3a09@s* G3a0a@ae* G3a0b@r) ((letrec ((G3a14@f (lambda (G3a16@e G3a17@m* G3a18@s* G3a19@ae*) (if (pair? G3a16@e) (call-with-values (lambda () (G3a14@f (cdr G3a16@e) G3a17@m* G3a18@s* G3a19@ae*)) (lambda (G3a21@G3a1e G3a22@G3a1f G3a23@G3a20) ((lambda (G3a27@r G3a28@y-pat G3a29@xr*) (if G3a27@r (if (null? G3a28@y-pat) ((lambda (G3a2d@xr) (if G3a2d@xr (values (cons G3a2d@xr G3a29@xr*) G3a28@y-pat G3a27@r) (values '#f '#f '#f))) (G39a0@match (car G3a16@e) G3a05@x-pat G3a17@m* G3a18@s* G3a19@ae* '())) (values '() (cdr G3a28@y-pat) (G39a0@match (car G3a16@e) (car G3a28@y-pat) G3a17@m* G3a18@s* G3a19@ae* G3a27@r))) (values '#f '#f '#f))) G3a23@G3a20 G3a22@G3a1f G3a21@G3a1e))) (if (G2afc@stx? G3a16@e) (if (G2ab2@top-marked? G3a17@m*) (values '() G3a06@y-pat (G39a0@match G3a16@e G3a07@z-pat G3a17@m* G3a18@s* G3a19@ae* G3a0b@r)) (call-with-values (lambda () (G2b1a@join-wraps G3a17@m* G3a18@s* G3a19@ae* G3a16@e)) (lambda (G3a32@G3a2f G3a33@G3a30 G3a34@G3a31) ((lambda (G3a38@ae* G3a39@s* G3a3a@m*) (G3a14@f (G2b00@stx-expr G3a16@e) G3a3a@m* G3a39@s* G3a38@ae*)) G3a34@G3a31 G3a33@G3a30 G3a32@G3a2f)))) (if (G26dd@G2600@annotation? G3a16@e) (G3a14@f (G26df@G2604@annotation-expression G3a16@e) G3a17@m* G3a18@s* G3a19@ae*) (values '() G3a06@y-pat (G39a0@match G3a16@e G3a07@z-pat G3a17@m* G3a18@s* G3a19@ae* G3a0b@r)))))))) G3a14@f) G3a04@e G3a08@m* G3a09@s* G3a0a@ae*))) (set! G3998@match-each-any (lambda (G39eb@e G39ec@m* G39ed@s* G39ee@ae*) (if (pair? G39eb@e) ((lambda (G39f3@l) (and G39f3@l (cons (G3992@stx^ (car G39eb@e) G39ec@m* G39ed@s* G39ee@ae*) G39f3@l))) (G3998@match-each-any (cdr G39eb@e) G39ec@m* G39ed@s* G39ee@ae*)) (if (null? G39eb@e) '() (if (G2afc@stx? G39eb@e) (and (not (G2ab2@top-marked? G39ec@m*)) (call-with-values (lambda () (G2b1a@join-wraps G39ec@m* G39ed@s* G39ee@ae* G39eb@e)) (lambda (G39f8@G39f5 G39f9@G39f6 G39fa@G39f7) ((lambda (G39fe@ae* G39ff@s* G3a00@m*) (G3998@match-each-any (G2b00@stx-expr G39eb@e) G3a00@m* G39ff@s* G39fe@ae*)) G39fa@G39f7 G39f9@G39f6 G39f8@G39f5)))) (if (G26dd@G2600@annotation? G39eb@e) (G3998@match-each-any (G26df@G2604@annotation-expression G39eb@e) G39ec@m* G39ed@s* G39ee@ae*) '#f)))))) (set! G399a@match-empty (lambda (G39e5@p G39e6@r) (if (null? G39e5@p) G39e6@r (if (eq? G39e5@p '_) G39e6@r (if (eq? G39e5@p 'any) (cons '() G39e6@r) (if (pair? G39e5@p) (G399a@match-empty (car G39e5@p) (G399a@match-empty (cdr G39e5@p) G39e6@r)) (if (eq? G39e5@p 'each-any) (cons '() G39e6@r) ((lambda (G39e9@t) (if (memv G39e9@t '(each)) (G399a@match-empty (vector-ref G39e5@p '1) G39e6@r) (if (memv G39e9@t '(each+)) (G399a@match-empty (vector-ref G39e5@p '1) (G399a@match-empty (reverse (vector-ref G39e5@p '2)) (G399a@match-empty (vector-ref G39e5@p '3) G39e6@r))) (if (memv G39e9@t '(free-id atom)) G39e6@r (if (memv G39e9@t '(scheme-id atom)) G39e6@r (if (memv G39e9@t '(vector)) (G399a@match-empty (vector-ref G39e5@p '1) G39e6@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G39e5@p))))))) (vector-ref G39e5@p '0))))))))) (set! G399c@combine (lambda (G39e1@r* G39e2@r) (if (null? (car G39e1@r*)) G39e2@r (cons (map car G39e1@r*) (G399c@combine (map cdr G39e1@r*) G39e2@r))))) (set! G399e@match* (lambda (G39c0@e G39c1@p G39c2@m* G39c3@s* G39c4@ae* G39c5@r) (if (null? G39c1@p) (and (null? G39c0@e) G39c5@r) (if (pair? G39c1@p) (and (pair? G39c0@e) (G39a0@match (car G39c0@e) (car G39c1@p) G39c2@m* G39c3@s* G39c4@ae* (G39a0@match (cdr G39c0@e) (cdr G39c1@p) G39c2@m* G39c3@s* G39c4@ae* G39c5@r))) (if (eq? G39c1@p 'each-any) ((lambda (G39cc@l) (and G39cc@l (cons G39cc@l G39c5@r))) (G3998@match-each-any G39c0@e G39c2@m* G39c3@s* G39c4@ae*)) ((lambda (G39ce@t) (if (memv G39ce@t '(each)) (if (null? G39c0@e) (G399a@match-empty (vector-ref G39c1@p '1) G39c5@r) ((lambda (G39d0@r*) (and G39d0@r* (G399c@combine G39d0@r* G39c5@r))) (G3994@match-each G39c0@e (vector-ref G39c1@p '1) G39c2@m* G39c3@s* G39c4@ae*))) (if (memv G39ce@t '(free-id)) (and (symbol? G39c0@e) (G2ab2@top-marked? G39c2@m*) (G2b3c@free-id=? (G3992@stx^ G39c0@e G39c2@m* G39c3@s* G39c4@ae*) (vector-ref G39c1@p '1)) G39c5@r) (if (memv G39ce@t '(scheme-id)) (and (symbol? G39c0@e) (G2ab2@top-marked? G39c2@m*) (G2b3c@free-id=? (G3992@stx^ G39c0@e G39c2@m* G39c3@s* G39c4@ae*) (G2caf@scheme-stx (vector-ref G39c1@p '1))) G39c5@r) (if (memv G39ce@t '(each+)) (call-with-values (lambda () (G3996@match-each+ G39c0@e (vector-ref G39c1@p '1) (vector-ref G39c1@p '2) (vector-ref G39c1@p '3) G39c2@m* G39c3@s* G39c4@ae* G39c5@r)) (lambda (G39d5@G39d2 G39d6@G39d3 G39d7@G39d4) ((lambda (G39db@r G39dc@y-pat G39dd@xr*) (and G39db@r (null? G39dc@y-pat) (if (null? G39dd@xr*) (G399a@match-empty (vector-ref G39c1@p '1) G39db@r) (G399c@combine G39dd@xr* G39db@r)))) G39d7@G39d4 G39d6@G39d3 G39d5@G39d2))) (if (memv G39ce@t '(atom)) (and (fast-equal? (vector-ref G39c1@p '1) (G2b48@strip G39c0@e G39c2@m*)) G39c5@r) (if (memv G39ce@t '(vector)) (and (vector? G39c0@e) (G39a0@match (vector->list G39c0@e) (vector-ref G39c1@p '1) G39c2@m* G39c3@s* G39c4@ae* G39c5@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G39c1@p)))))))) (vector-ref G39c1@p '0))))))) (set! G39a0@match (lambda (G39a5@e G39a6@p G39a7@m* G39a8@s* G39a9@ae* G39aa@r) (if (not G39aa@r) '#f (if (eq? G39a6@p '_) G39aa@r (if (eq? G39a6@p 'any) (cons (G3992@stx^ G39a5@e G39a7@m* G39a8@s* G39a9@ae*) G39aa@r) (if (G2afc@stx? G39a5@e) (and (not (G2ab2@top-marked? G39a7@m*)) (call-with-values (lambda () (G2b1a@join-wraps G39a7@m* G39a8@s* G39a9@ae* G39a5@e)) (lambda (G39b4@G39b1 G39b5@G39b2 G39b6@G39b3) ((lambda (G39ba@ae* G39bb@s* G39bc@m*) (G39a0@match (G2b00@stx-expr G39a5@e) G39a6@p G39bc@m* G39bb@s* G39ba@ae* G39aa@r)) G39b6@G39b3 G39b5@G39b2 G39b4@G39b1)))) (if (G26dd@G2600@annotation? G39a5@e) (G39a0@match (G26df@G2604@annotation-expression G39a5@e) G39a6@p G39a7@m* G39a8@s* G39a9@ae* G39aa@r) (G399e@match* G39a5@e G39a6@p G39a7@m* G39a8@s* G39a9@ae* G39aa@r)))))))) (lambda (G39a1@e G39a2@p) (G39a0@match G39a1@e G39a2@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d27@ellipsis? (lambda (G3a63@x) (and (G2b34@id? G3a63@x) (G2b3c@free-id=? G3a63@x (G2caf@scheme-stx '...))))) (set! G2d29@underscore? (lambda (G3a65@x) (and (G2b34@id? G3a65@x) (G2b3c@free-id=? G3a65@x (G2caf@scheme-stx '_))))) (set! G2d2b@verify-literals (lambda (G3a67@lits G3a68@expr) (for-each (lambda (G3a6b@x) (if (or (not (G2b34@id? G3a6b@x)) (G2d27@ellipsis? G3a6b@x) (G2d29@underscore? G3a6b@x)) (G2e10@syntax-violation '#f '"invalid literal" G3a68@expr G3a6b@x) (void))) G3a67@lits))) (set! G2d2d@syntax-case-transformer ((lambda () ((lambda (G3a6e@build-dispatch-call G3a70@invalid-ids-error G3a72@gen-clause G3a74@gen-syntax-case) (begin (set! G3a6e@build-dispatch-call (lambda (G3add@pvars G3ade@expr G3adf@y G3ae0@r G3ae1@mr) ((lambda (G3ae7@ids G3ae8@levels) ((lambda (G3aeb@labels G3aec@new-vars) ((lambda (G3aef@body) (list '(primitive apply) (G2a92@G29d4@build-lambda '#f G3aec@new-vars G3aef@body) G3adf@y)) (G2d49@chi-expr (G2b20@add-subst (G2aef@make-full-rib G3ae7@ids G3aeb@labels) G3ade@expr) (append (map (lambda (G3af1@label G3af2@var G3af3@level) (cons G3af1@label (G2b54@make-binding 'syntax (cons G3af2@var G3af3@level)))) G3aeb@labels G3aec@new-vars (map cdr G3add@pvars)) G3ae0@r) G3ae1@mr))) (map G2ab8@gen-label G3ae7@ids) (map G2ab4@gen-lexical G3ae7@ids))) (map car G3add@pvars) (map cdr G3add@pvars)))) (set! G3a70@invalid-ids-error (lambda (G3ad1@id* G3ad2@e G3ad3@class) ((letrec ((G3ad7@find (lambda (G3ad9@id* G3ada@ok*) (if (null? G3ad9@id*) (G2e10@syntax-violation '#f '"invalid syntax" G3ad2@e) (if (G2b34@id? (car G3ad9@id*)) (if (G2b42@bound-id-member? (car G3ad9@id*) G3ada@ok*) (G2e0c@syntax-error (car G3ad9@id*) '"duplicate " G3ad3@class) (G3ad7@find (cdr G3ad9@id*) (cons (car G3ad9@id*) G3ada@ok*))) (G2e0c@syntax-error (car G3ad9@id*) '"invalid " G3ad3@class)))))) G3ad7@find) G3ad1@id* '()))) (set! G3a72@gen-clause (lambda (G3aab@x G3aac@keys G3aad@clauses G3aae@r G3aaf@mr G3ab0@pat G3ab1@fender G3ab2@expr) (call-with-values (lambda () (G2d23@convert-pattern G3ab0@pat G3aac@keys)) (lambda (G3abd@G3abb G3abe@G3abc) ((lambda (G3ac1@pvars G3ac2@p) (if (not (G2b40@distinct-bound-ids? (map car G3ac1@pvars))) (G3a70@invalid-ids-error (map car G3ac1@pvars) G3ab0@pat '"pattern variable") (if (not (for-all (lambda (G3ac5@x) (not (G2d27@ellipsis? (car G3ac5@x)))) G3ac1@pvars)) (G2e10@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3ab0@pat) ((lambda (G3ac7@y) ((lambda (G3ac9@test) ((lambda (G3acb@conseq) ((lambda (G3acd@altern) (list (G2a92@G29d4@build-lambda '#f (list G3ac7@y) (list 'if G3ac9@test G3acb@conseq G3acd@altern)) (list '(primitive syntax-dispatch) G3aab@x (list 'quote G3ac2@p)))) (G3a74@gen-syntax-case G3aab@x G3aac@keys G3aad@clauses G3aae@r G3aaf@mr))) (G3a6e@build-dispatch-call G3ac1@pvars G3ab2@expr G3ac7@y G3aae@r G3aaf@mr))) (if (eq? G3ab1@fender '#t) G3ac7@y ((lambda (G3acf@call) (list 'if G3ac7@y G3acf@call (list 'quote '#f))) (G3a6e@build-dispatch-call G3ac1@pvars G3ab1@fender G3ac7@y G3aae@r G3aaf@mr))))) (G2ab4@gen-lexical 'tmp))))) G3abe@G3abc G3abd@G3abb))))) (set! G3a74@gen-syntax-case (lambda (G3a89@x G3a8a@keys G3a8b@clauses G3a8c@r G3a8d@mr) (if (null? G3a8b@clauses) (list '(primitive syntax-error) G3a89@x) ((lambda (G3a93@t) ((lambda (G3a95@ls/false) (if G3a95@ls/false (apply (lambda (G3a97@pat G3a98@expr) (if (and (G2b34@id? G3a97@pat) (not (G2b42@bound-id-member? G3a97@pat G3a8a@keys)) (not (G2d27@ellipsis? G3a97@pat))) (if (G2b3c@free-id=? G3a97@pat (G2caf@scheme-stx '_)) (G2d49@chi-expr G3a98@expr G3a8c@r G3a8d@mr) ((lambda (G3a9b@lab G3a9c@lex) ((lambda (G3a9f@body) (list (G2a92@G29d4@build-lambda '#f (list G3a9c@lex) G3a9f@body) G3a89@x)) (G2d49@chi-expr (G2b20@add-subst (G2aef@make-full-rib (list G3a97@pat) (list G3a9b@lab)) G3a98@expr) (cons (cons G3a9b@lab (G2b54@make-binding 'syntax (cons G3a9c@lex '0))) G3a8c@r) G3a8d@mr))) (G2ab8@gen-label G3a97@pat) (G2ab4@gen-lexical G3a97@pat))) (G3a72@gen-clause G3a89@x G3a8a@keys (cdr G3a8b@clauses) G3a8c@r G3a8d@mr G3a97@pat '#t G3a98@expr))) G3a95@ls/false) ((lambda (G3aa1@t) ((lambda (G3aa3@ls/false) (if G3aa3@ls/false (apply (lambda (G3aa5@pat G3aa6@fender G3aa7@expr) (G3a72@gen-clause G3a89@x G3a8a@keys (cdr G3a8b@clauses) G3a8c@r G3a8d@mr G3aa5@pat G3aa6@fender G3aa7@expr)) G3aa3@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3aa1@t))) (G2d25@syntax-dispatch G3aa1@t '(any any any)))) G3a93@t))) (G2d25@syntax-dispatch G3a93@t '(any any)))) (car G3a8b@clauses))))) (lambda (G3a75@e G3a76@r G3a77@mr) ((lambda (G3a7b@t) ((lambda (G3a7d@ls/false) (if G3a7d@ls/false (apply (lambda (G3a7f@expr G3a80@keys G3a81@clauses) (begin (G2d2b@verify-literals G3a80@keys G3a75@e) ((lambda (G3a85@x) ((lambda (G3a87@body) (list (G2a92@G29d4@build-lambda '#f (list G3a85@x) G3a87@body) (G2d49@chi-expr G3a7f@expr G3a76@r G3a77@mr))) (G3a74@gen-syntax-case G3a85@x G3a80@keys G3a81@clauses G3a76@r G3a77@mr))) (G2ab4@gen-lexical 'tmp)))) G3a7d@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3a7b@t))) (G2d25@syntax-dispatch G3a7b@t '(_ any each-any . each-any)))) G3a75@e)))) '#f '#f '#f '#f)))) (set! G2d2f@ellipsis-map (lambda (G3af7@proc G3af8@ls . G3afb@ls*) ((lambda (G3afe@who) (begin (set! G3afe@who '...) (begin (if (not (list? G3af8@ls)) (assertion-violation G3afe@who '"not a list" G3af8@ls) (void)) (if (not (null? G3afb@ls*)) ((lambda (G3aff@n) (for-each (lambda (G3b01@x) (begin (if (not (list? G3b01@x)) (assertion-violation G3afe@who '"not a list" G3b01@x) (void)) (if (not (= (length G3b01@x) G3aff@n)) (assertion-violation G3afe@who '"length mismatch" G3af8@ls G3b01@x) (void)))) G3afb@ls*)) (length G3af8@ls)) (void)) (apply map G3af7@proc G3af8@ls G3afb@ls*)))) '#f))) (set! G2d31@syntax-transformer ((lambda () ((lambda (G3b04@gen-syntax G3b06@gen-ref G3b08@gen-append G3b0a@gen-mappend G3b0c@gen-map G3b0e@gen-cons G3b10@gen-vector G3b12@regen) (begin (set! G3b04@gen-syntax (lambda (G3b77@src G3b78@e G3b79@r G3b7a@maps G3b7b@ellipsis? G3b7c@vec?) ((lambda (G3b83@t) ((lambda (G3b85@ls/false) (if (and G3b85@ls/false (apply (lambda (G3b87@dots) (G3b7b@ellipsis? G3b87@dots)) G3b85@ls/false)) (apply (lambda (G3b89@dots) (G2e10@syntax-violation '#f '"misplaced ellipsis in syntax form" G3b77@src)) G3b85@ls/false) ((lambda (G3b8b@t) ((lambda (G3b8d@ls/false) (if (and G3b8d@ls/false (apply (lambda (G3b8f@id) (G2b34@id? G3b8f@id)) G3b8d@ls/false)) (apply (lambda (G3b91@id) ((lambda (G3b93@label) ((lambda (G3b95@b) ((lambda () (if (eq? (G2b56@binding-type G3b95@b) 'syntax) (call-with-values (lambda () ((lambda (G3b99@var.lev) (G3b06@gen-ref G3b77@src (car G3b99@var.lev) (cdr G3b99@var.lev) G3b7a@maps)) (G2b58@binding-value G3b95@b))) (lambda (G3b9b@G3b97 G3b9c@G3b98) ((lambda (G3b9f@maps G3ba0@var) (values (list 'ref G3ba0@var) G3b9f@maps)) G3b9c@G3b98 G3b9b@G3b97))) (values (list 'quote G3b78@e) G3b7a@maps))))) (G2b52@label->binding G3b93@label G3b79@r))) (G2b4e@id->label G3b78@e))) G3b8d@ls/false) ((lambda (G3ba3@t) ((lambda (G3ba5@ls/false) (if (and G3ba5@ls/false (apply (lambda (G3ba7@dots G3ba8@e) (G3b7b@ellipsis? G3ba7@dots)) G3ba5@ls/false)) (apply (lambda (G3bab@dots G3bac@e) (if G3b7c@vec? (G2e10@syntax-violation '#f '"misplaced ellipsis in syntax form" G3b77@src) (G3b04@gen-syntax G3b77@src G3bac@e G3b79@r G3b7a@maps (lambda (G3baf@x) '#f) '#f))) G3ba5@ls/false) ((lambda (G3bb1@t) ((lambda (G3bb3@ls/false) (if (and G3bb3@ls/false (apply (lambda (G3bb5@x G3bb6@dots G3bb7@y) (G3b7b@ellipsis? G3bb6@dots)) G3bb3@ls/false)) (apply (lambda (G3bbb@x G3bbc@dots G3bbd@y) ((letrec ((G3bc1@f (lambda (G3bc3@y G3bc4@k) ((lambda (G3bc7@t) ((lambda (G3bc9@ls/false) (if G3bc9@ls/false (apply (lambda () (G3bc4@k G3b7a@maps)) G3bc9@ls/false) ((lambda (G3bcb@t) ((lambda (G3bcd@ls/false) (if (and G3bcd@ls/false (apply (lambda (G3bcf@dots G3bd0@y) (G3b7b@ellipsis? G3bcf@dots)) G3bcd@ls/false)) (apply (lambda (G3bd3@dots G3bd4@y) (G3bc1@f G3bd4@y (lambda (G3bd7@maps) (call-with-values (lambda () (G3bc4@k (cons '() G3bd7@maps))) (lambda (G3bdb@G3bd9 G3bdc@G3bda) ((lambda (G3bdf@maps G3be0@x) (if (null? (car G3bdf@maps)) (G2e10@syntax-violation '#f '"extra ellipsis in syntax form" G3b77@src) (values (G3b0a@gen-mappend G3be0@x (car G3bdf@maps)) (cdr G3bdf@maps)))) G3bdc@G3bda G3bdb@G3bd9)))))) G3bcd@ls/false) ((lambda (G3be3@t) ((lambda (G3be5@ls/false) (if G3be5@ls/false (apply (lambda () (call-with-values (lambda () (G3b04@gen-syntax G3b77@src G3bc3@y G3b79@r G3b7a@maps G3b7b@ellipsis? G3b7c@vec?)) (lambda (G3be9@G3be7 G3bea@G3be8) ((lambda (G3bed@maps G3bee@y) (call-with-values (lambda () (G3bc4@k G3bed@maps)) (lambda (G3bf3@G3bf1 G3bf4@G3bf2) ((lambda (G3bf7@maps G3bf8@x) (values (G3b08@gen-append G3bf8@x G3bee@y) G3bf7@maps)) G3bf4@G3bf2 G3bf3@G3bf1)))) G3bea@G3be8 G3be9@G3be7)))) G3be5@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3be3@t))) (G2d25@syntax-dispatch G3be3@t '_))) G3bcb@t))) (G2d25@syntax-dispatch G3bcb@t '(any . any)))) G3bc7@t))) (G2d25@syntax-dispatch G3bc7@t '()))) G3bc3@y)))) G3bc1@f) G3bbd@y (lambda (G3bfb@maps) (call-with-values (lambda () (G3b04@gen-syntax G3b77@src G3bbb@x G3b79@r (cons '() G3bfb@maps) G3b7b@ellipsis? '#f)) (lambda (G3bff@G3bfd G3c00@G3bfe) ((lambda (G3c03@maps G3c04@x) (if (null? (car G3c03@maps)) (G2e10@syntax-violation '#f '"extra ellipsis in syntax form" G3b77@src) (values (G3b0c@gen-map G3c04@x (car G3c03@maps)) (cdr G3c03@maps)))) G3c00@G3bfe G3bff@G3bfd)))))) G3bb3@ls/false) ((lambda (G3c07@t) ((lambda (G3c09@ls/false) (if G3c09@ls/false (apply (lambda (G3c0b@x G3c0c@y) (call-with-values (lambda () (G3b04@gen-syntax G3b77@src G3c0b@x G3b79@r G3b7a@maps G3b7b@ellipsis? '#f)) (lambda (G3c11@G3c0f G3c12@G3c10) ((lambda (G3c15@maps G3c16@xnew) (call-with-values (lambda () (G3b04@gen-syntax G3b77@src G3c0c@y G3b79@r G3c15@maps G3b7b@ellipsis? G3b7c@vec?)) (lambda (G3c1b@G3c19 G3c1c@G3c1a) ((lambda (G3c1f@maps G3c20@ynew) (values (G3b0e@gen-cons G3b78@e G3c0b@x G3c0c@y G3c16@xnew G3c20@ynew) G3c1f@maps)) G3c1c@G3c1a G3c1b@G3c19)))) G3c12@G3c10 G3c11@G3c0f)))) G3c09@ls/false) ((lambda (G3c23@t) ((lambda (G3c25@ls/false) (if G3c25@ls/false (apply (lambda (G3c27@ls) (call-with-values (lambda () (G3b04@gen-syntax G3b77@src G3c27@ls G3b79@r G3b7a@maps G3b7b@ellipsis? '#t)) (lambda (G3c2b@G3c29 G3c2c@G3c2a) ((lambda (G3c2f@maps G3c30@lsnew) (values (G3b10@gen-vector G3b78@e G3c27@ls G3c30@lsnew) G3c2f@maps)) G3c2c@G3c2a G3c2b@G3c29)))) G3c25@ls/false) ((lambda (G3c33@t) ((lambda (G3c35@ls/false) (if G3c35@ls/false (apply (lambda () (values (list 'quote G3b78@e) G3b7a@maps)) G3c35@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3c33@t))) (G2d25@syntax-dispatch G3c33@t '_))) G3c23@t))) (G2d25@syntax-dispatch G3c23@t '#(vector each-any)))) G3c07@t))) (G2d25@syntax-dispatch G3c07@t '(any . any)))) G3bb1@t))) (G2d25@syntax-dispatch G3bb1@t '(any any . any)))) G3ba3@t))) (G2d25@syntax-dispatch G3ba3@t '(any any)))) G3b8b@t))) (G2d25@syntax-dispatch G3b8b@t 'any))) G3b83@t))) (G2d25@syntax-dispatch G3b83@t 'any))) G3b78@e))) (set! G3b06@gen-ref (lambda (G3b5f@src G3b60@var G3b61@level G3b62@maps) (if (= G3b61@level '0) (values G3b60@var G3b62@maps) (if (null? G3b62@maps) (G2e10@syntax-violation '#f '"missing ellipsis in syntax form" G3b5f@src) (call-with-values (lambda () (G3b06@gen-ref G3b5f@src G3b60@var (- G3b61@level '1) (cdr G3b62@maps))) (lambda (G3b69@G3b67 G3b6a@G3b68) ((lambda (G3b6d@outer-maps G3b6e@outer-var) ((lambda (G3b71@t) (if G3b71@t ((lambda (G3b73@b) (values (cdr G3b73@b) G3b62@maps)) G3b71@t) ((lambda (G3b75@inner-var) (values G3b75@inner-var (cons (cons (cons G3b6e@outer-var G3b75@inner-var) (car G3b62@maps)) G3b6d@outer-maps))) (G2ab4@gen-lexical 'tmp)))) (assq G3b6e@outer-var (car G3b62@maps)))) G3b6a@G3b68 G3b69@G3b67))))))) (set! G3b08@gen-append (lambda (G3b5b@x G3b5c@y) (if (fast-equal? G3b5c@y ''()) G3b5b@x (list 'append G3b5b@x G3b5c@y)))) (set! G3b0a@gen-mappend (lambda (G3b57@e G3b58@map-env) (list 'apply '(primitive append) (G3b0c@gen-map G3b57@e G3b58@map-env)))) (set! G3b0c@gen-map (lambda (G3b45@e G3b46@map-env) ((lambda (G3b49@formals G3b4a@actuals) (if (eq? (car G3b45@e) 'ref) (car G3b4a@actuals) (if (for-all (lambda (G3b4d@x) (and (eq? (car G3b4d@x) 'ref) (memq (cadr G3b4d@x) G3b49@formals))) (cdr G3b45@e)) ((lambda (G3b4f@args) (cons 'map (cons (list 'primitive (car G3b45@e)) G3b4f@args))) (map ((lambda (G3b51@r) (lambda (G3b53@x) (cdr (assq (cadr G3b53@x) G3b51@r)))) (map cons G3b49@formals G3b4a@actuals)) (cdr G3b45@e))) (cons* 'map (list 'lambda G3b49@formals G3b45@e) G3b4a@actuals)))) (map cdr G3b46@map-env) (map (lambda (G3b55@x) (list 'ref (car G3b55@x))) G3b46@map-env)))) (set! G3b0e@gen-cons (lambda (G3b35@e G3b36@x G3b37@y G3b38@xnew G3b39@ynew) ((lambda (G3b3f@t) (if (memv G3b3f@t '(quote)) (if (eq? (car G3b38@xnew) 'quote) ((lambda (G3b41@xnew G3b42@ynew) (if (and (eq? G3b41@xnew G3b36@x) (eq? G3b42@ynew G3b37@y)) (list 'quote G3b35@e) (list 'quote (cons G3b41@xnew G3b42@ynew)))) (cadr G3b38@xnew) (cadr G3b39@ynew)) (if (null? (cadr G3b39@ynew)) (list 'list G3b38@xnew) (list 'cons G3b38@xnew G3b39@ynew))) (if (memv G3b3f@t '(list)) (cons 'list (cons G3b38@xnew (cdr G3b39@ynew))) (list 'cons G3b38@xnew G3b39@ynew)))) (car G3b39@ynew)))) (set! G3b10@gen-vector (lambda (G3b2f@e G3b30@ls G3b31@lsnew) (if (eq? (car G3b31@lsnew) 'quote) (if (eq? (cadr G3b31@lsnew) G3b30@ls) (list 'quote G3b2f@e) (list 'quote (list->vector (cadr G3b31@lsnew)))) (if (eq? (car G3b31@lsnew) 'list) (cons 'vector (cdr G3b31@lsnew)) (list 'list->vector G3b31@lsnew))))) (set! G3b12@regen (lambda (G3b29@x) ((lambda (G3b2b@t) (if (memv G3b2b@t '(ref)) (cadr G3b29@x) (if (memv G3b2b@t '(primitive)) (list 'primitive (cadr G3b29@x)) (if (memv G3b2b@t '(quote)) (list 'quote (cadr G3b29@x)) (if (memv G3b2b@t '(lambda)) (G2a92@G29d4@build-lambda '#f (cadr G3b29@x) (G3b12@regen (caddr G3b29@x))) (if (memv G3b2b@t '(map)) ((lambda (G3b2d@ls) (cons '(primitive ellipsis-map) G3b2d@ls)) (map G3b12@regen (cdr G3b29@x))) (cons (list 'primitive (car G3b29@x)) (map G3b12@regen (cdr G3b29@x))))))))) (car G3b29@x)))) (lambda (G3b13@e G3b14@r G3b15@mr) ((lambda (G3b19@t) ((lambda (G3b1b@ls/false) (if G3b1b@ls/false (apply (lambda (G3b1d@x) (call-with-values (lambda () (G3b04@gen-syntax G3b13@e G3b1d@x G3b14@r '() G2d27@ellipsis? '#f)) (lambda (G3b21@G3b1f G3b22@G3b20) ((lambda (G3b25@maps G3b26@e) (G3b12@regen G3b26@e)) G3b22@G3b20 G3b21@G3b1f)))) G3b1b@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3b19@t))) (G2d25@syntax-dispatch G3b19@t '(_ any)))) G3b13@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d33@core-macro-transformer (lambda (G3c37@name) ((lambda (G3c39@t) (if (memv G3c39@t '(quote)) G2cd5@quote-transformer (if (memv G3c39@t '(lambda)) G2cd9@lambda-transformer (if (memv G3c39@t '(case-lambda)) G2cd7@case-lambda-transformer (if (memv G3c39@t '(letrec)) G2cbd@letrec-transformer (if (memv G3c39@t '(letrec*)) G2cbf@letrec*-transformer (if (memv G3c39@t '(if)) G2ccd@if-transformer (if (memv G3c39@t '(and)) G2ccf@and-transformer (if (memv G3c39@t '(or)) G2cd1@or-transformer (if (memv G3c39@t '(foreign-call)) G2d21@foreign-call-transformer (if (memv G3c39@t '(syntax-case)) G2d2d@syntax-case-transformer (if (memv G3c39@t '(syntax)) G2d31@syntax-transformer (if (memv G3c39@t '(type-descriptor)) G2cc3@type-descriptor-transformer (if (memv G3c39@t '(record-type-descriptor)) G2cc5@record-type-descriptor-transformer (if (memv G3c39@t '(record-constructor-descriptor)) G2cc7@record-constructor-descriptor-transformer (if (memv G3c39@t '(fluid-let-syntax)) G2cc1@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3c37@name))))))))))))))))) G3c37@name))) (set! G2d35@file-options-macro (lambda (G3c3b@x) ((lambda (G3c3e@valid-option?) (begin (set! G3c3e@valid-option? (lambda (G3c47@x) (and (G2b34@id? G3c47@x) (memq (G2b36@id->sym G3c47@x) '(no-fail no-create no-truncate))))) ((lambda (G3c3f@t) ((lambda (G3c41@ls/false) (if (and G3c41@ls/false (apply (lambda (G3c43@opt*) (and (for-all G3c3e@valid-option? G3c43@opt*) (G26e9@G267a@file-options-spec (map G2b36@id->sym G3c43@opt*)))) G3c41@ls/false)) (apply (lambda (G3c45@opt*) (G2cdb@bless (list 'quote (G26e9@G267a@file-options-spec (map G2b36@id->sym G3c45@opt*))))) G3c41@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3c3f@t))) (G2d25@syntax-dispatch G3c3f@t '(_ . each-any)))) G3c3b@x))) '#f))) (set! G2d37@symbol-macro (lambda (G3c49@x G3c4a@set) ((lambda (G3c4d@t) ((lambda (G3c4f@ls/false) (if (and G3c4f@ls/false (apply (lambda (G3c51@name) (and (G2b34@id? G3c51@name) (memq (G2b36@id->sym G3c51@name) G3c4a@set))) G3c4f@ls/false)) (apply (lambda (G3c53@name) (G2cdb@bless (list 'quote G3c53@name))) G3c4f@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3c4d@t))) (G2d25@syntax-dispatch G3c4d@t '(_ any)))) G3c49@x))) (set! G2d39@macro-transformer (lambda (G3c55@x) (if (procedure? G3c55@x) G3c55@x (if (symbol? G3c55@x) ((lambda (G3c57@t) (if (memv G3c57@t '(define-record-type)) G2d19@define-record-type-macro (if (memv G3c57@t '(define-struct)) G2d17@define-struct-macro (if (memv G3c57@t '(include)) G2d0d@include-macro (if (memv G3c57@t '(cond)) G2d09@cond-macro (if (memv G3c57@t '(let)) G2ce1@let-macro (if (memv G3c57@t '(do)) G2d01@do-macro (if (memv G3c57@t '(or)) G2d05@or-macro (if (memv G3c57@t '(and)) G2d07@and-macro (if (memv G3c57@t '(let*)) G2d03@let*-macro (if (memv G3c57@t '(let-values)) G2ce3@let-values-macro (if (memv G3c57@t '(let*-values)) G2ce5@let*-values-macro (if (memv G3c57@t '(syntax-rules)) G2d11@syntax-rules-macro (if (memv G3c57@t '(quasiquote)) G2d13@quasiquote-macro (if (memv G3c57@t '(quasisyntax)) G2d15@quasisyntax-macro (if (memv G3c57@t '(with-syntax)) G2cdd@with-syntax-macro (if (memv G3c57@t '(when)) G2cc9@when-macro (if (memv G3c57@t '(unless)) G2ccb@unless-macro (if (memv G3c57@t '(case)) G2cd3@case-macro (if (memv G3c57@t '(identifier-syntax)) G2cff@identifier-syntax-macro (if (memv G3c57@t '(time)) G2cf7@time-macro (if (memv G3c57@t '(delay)) G2cf9@delay-macro (if (memv G3c57@t '(assert)) G2cfb@assert-macro (if (memv G3c57@t '(endianness)) G2cfd@endianness-macro (if (memv G3c57@t '(guard)) G2cf3@guard-macro (if (memv G3c57@t '(define-enumeration)) G2cf5@define-enumeration-macro (if (memv G3c57@t '(trace-lambda)) G2ce7@trace-lambda-macro (if (memv G3c57@t '(trace-define)) G2ce9@trace-define-macro (if (memv G3c57@t '(trace-define-syntax)) G2ceb@trace-define-syntax-macro (if (memv G3c57@t '(trace-let-syntax)) G2cef@trace-let-syntax-macro (if (memv G3c57@t '(trace-letrec-syntax)) G2cf1@trace-letrec-syntax-macro (if (memv G3c57@t '(define-condition-type)) G2d1b@define-condition-type-macro (if (memv G3c57@t '(parameterize)) G2d1f@parameterize-macro (if (memv G3c57@t '(include-into)) G2d0f@include-into-macro (if (memv G3c57@t '(eol-style)) (lambda (G3c59@x) (G2d37@symbol-macro G3c59@x '(none lf cr crlf nel crnel ls))) (if (memv G3c57@t '(error-handling-mode)) (lambda (G3c5b@x) (G2d37@symbol-macro G3c5b@x '(ignore raise replace))) (if (memv G3c57@t '(buffer-mode)) (lambda (G3c5d@x) (G2d37@symbol-macro G3c5d@x '(none line block))) (if (memv G3c57@t '(file-options)) G2d35@file-options-macro (if (memv G3c57@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2d1d@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3c55@x)))))))))))))))))))))))))))))))))))))))) G3c55@x) (error 'core-macro-transformer '"BUG: invalid macro" G3c55@x))))) (set! G2d3b@local-macro-transformer (lambda (G3c5f@x) (car G3c5f@x))) (set! G2d3d@do-macro-call (lambda (G3c61@transformer G3c62@expr) ((lambda (G3c65@out) (begin ((letrec ((G3c67@f (lambda (G3c69@x) (if (not (G2afc@stx? G3c69@x)) (if (pair? G3c69@x) (begin (G3c67@f (car G3c69@x)) (G3c67@f (cdr G3c69@x))) (if (vector? G3c69@x) (vector-for-each G3c67@f G3c69@x) (if (symbol? G3c69@x) (G2e10@syntax-violation '#f '"raw symbol encountered in output of macro" G3c62@expr G3c69@x) (void)))) (void))))) G3c67@f) G3c65@out) (G2b1e@add-mark (G2b14@gen-mark) G3c65@out G3c62@expr))) (G3c61@transformer (G2b1e@add-mark G2b16@anti-mark G3c62@expr '#f))))) (set! G2d3f@chi-macro (lambda (G3c6b@p G3c6c@e) (G2d3d@do-macro-call (G2d39@macro-transformer G3c6b@p) G3c6c@e))) (set! G2d41@chi-local-macro (lambda (G3c6f@p G3c70@e) (G2d3d@do-macro-call (G2d3b@local-macro-transformer G3c6f@p) G3c70@e))) (set! G2d43@chi-global-macro (lambda (G3c73@p G3c74@e) ((lambda (G3c77@lib G3c78@loc) (begin (G295d@G2805@visit-library G3c77@lib) ((lambda (G3c7b@x) ((lambda (G3c7d@transformer) (G2d3d@do-macro-call G3c7d@transformer G3c74@e)) (if (procedure? G3c7b@x) G3c7b@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3c7b@x)))) (symbol-value G3c78@loc)))) (car G3c73@p) (cdr G3c73@p)))) (set! G2d45@chi-expr* (lambda (G3c7f@e* G3c80@r G3c81@mr) (if (null? G3c7f@e*) '() ((lambda (G3c85@e) (cons G3c85@e (G2d45@chi-expr* (cdr G3c7f@e*) G3c80@r G3c81@mr))) (G2d49@chi-expr (car G3c7f@e*) G3c80@r G3c81@mr))))) (set! G2d47@chi-application (lambda (G3c87@e G3c88@r G3c89@mr) ((lambda (G3c8d@t) ((lambda (G3c8f@ls/false) (if G3c8f@ls/false (apply (lambda (G3c91@rator G3c92@rands) ((lambda (G3c95@rator) (cons G3c95@rator (G2d45@chi-expr* G3c92@rands G3c88@r G3c89@mr))) (G2d49@chi-expr G3c91@rator G3c88@r G3c89@mr))) G3c8f@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3c8d@t))) (G2d25@syntax-dispatch G3c8d@t '(any . each-any)))) G3c87@e))) (set! G2d49@chi-expr (lambda (G3c97@e G3c98@r G3c99@mr) (call-with-values (lambda () (G2b5c@syntax-type G3c97@e G3c98@r)) (lambda (G3ca0@G3c9d G3ca1@G3c9e G3ca2@G3c9f) ((lambda (G3ca6@kwd G3ca7@value G3ca8@type) ((lambda (G3cac@t) (if (memv G3cac@t '(core-macro)) ((lambda (G3cae@transformer) (G3cae@transformer G3c97@e G3c98@r G3c99@mr)) (G2d33@core-macro-transformer G3ca7@value)) (if (memv G3cac@t '(global)) (begin (if (symbol-value 'debug-expand) (begin (format '#t '"global e=~a id?=~a r=~a ~a\n" (G2b00@stx-expr G3c97@e) (G2b34@id? G3c97@e) (G2b00@stx-expr (caddr (cadddr G3c98@r))) (G2b00@stx-expr (cadddr (cadddr G3c98@r)))) (format '#t '"kwd=~a global=~a name=~a\n" (G2b00@stx-expr G3ca6@kwd) (G292c@G27a3@library-name (car G3ca7@value)) G3ca7@value)) (void)) ((lambda (G3cb0@lib) ((lambda (G3cb2@loc) ((lambda () (begin ((G2d92@inv-collector) G3cb0@lib) G3cb2@loc)))) (cdr G3ca7@value))) (car G3ca7@value))) (if (memv G3cac@t '(core-prim)) ((lambda (G3cb4@name) (list 'primitive G3cb4@name)) G3ca7@value) (if (memv G3cac@t '(call)) (G2d47@chi-application G3c97@e G3c98@r G3c99@mr) (if (memv G3cac@t '(lexical)) ((lambda (G3cb6@lex) G3cb6@lex) (G2cb1@lexical-var G3ca7@value)) (if (memv G3cac@t '(global-macro global-macro!)) (G2d49@chi-expr (G2d43@chi-global-macro G3ca7@value G3c97@e) G3c98@r G3c99@mr) (if (memv G3cac@t '(local-macro local-macro!)) (G2d49@chi-expr (G2d41@chi-local-macro G3ca7@value G3c97@e) G3c98@r G3c99@mr) (if (memv G3cac@t '(macro macro!)) (G2d49@chi-expr (G2d3f@chi-macro G3ca7@value G3c97@e) G3c98@r G3c99@mr) (if (memv G3cac@t '(constant)) ((lambda (G3cb8@datum) (list 'quote G3cb8@datum)) G3ca7@value) (if (memv G3cac@t '(set!)) (G2d4b@chi-set! G3c97@e G3c98@r G3c99@mr) (if (memv G3cac@t '(begin)) ((lambda (G3cba@t) ((lambda (G3cbc@ls/false) (if G3cbc@ls/false (apply (lambda (G3cbe@x G3cbf@x*) (G2a95@G2a06@build-sequence '#f (G2d45@chi-expr* (cons G3cbe@x G3cbf@x*) G3c98@r G3c99@mr))) G3cbc@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3cba@t))) (G2d25@syntax-dispatch G3cba@t '(_ any . each-any)))) G3c97@e) (if (memv G3cac@t '(let-syntax letrec-syntax)) ((lambda (G3cc2@t) ((lambda (G3cc4@ls/false) (if (and G3cc4@ls/false (apply (lambda (G3cc6@xlhs* G3cc7@xrhs* G3cc8@xbody G3cc9@xbody*) (if (not (G2b3e@valid-bound-ids? G3cc6@xlhs*)) (G2e10@syntax-violation '#f '"invalid identifiers" G3c97@e) (void))) G3cc4@ls/false)) (apply (lambda (G3cce@xlhs* G3ccf@xrhs* G3cd0@xbody G3cd1@xbody*) ((lambda (G3cd6@xlab*) ((lambda (G3cd8@xrib) ((lambda (G3cda@xb*) ((lambda () (G2a95@G2a06@build-sequence '#f (G2d45@chi-expr* (map (lambda (G3cdc@x) (G2b20@add-subst G3cd8@xrib G3cdc@x)) (cons G3cd0@xbody G3cd1@xbody*)) (append (map cons G3cd6@xlab* G3cda@xb*) G3c98@r) (append (map cons G3cd6@xlab* G3cda@xb*) G3c99@mr)))))) (map (lambda (G3cde@x) (G2b72@make-eval-transformer (G2d84@expand-transformer (if (eq? G3ca8@type 'let-syntax) G3cde@x (G2b20@add-subst G3cd8@xrib G3cde@x)) G3c99@mr))) G3ccf@xrhs*))) (G2aef@make-full-rib G3cce@xlhs* G3cd6@xlab*))) (map G2ab8@gen-label G3cce@xlhs*))) G3cc4@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3cc2@t))) (G2d25@syntax-dispatch G3cc2@t '(_ #(each (any any)) any . each-any)))) G3c97@e) (if (memv G3cac@t '(displaced-lexical)) (G2e10@syntax-violation '#f '"identifier out of context" G3c97@e) (if (memv G3cac@t '(syntax)) (G2e10@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3c97@e) (if (memv G3cac@t '(define define-syntax module import library)) (G2e10@syntax-violation '#f (string-append ((lambda (G3ce0@t) (if (memv G3ce0@t '(define)) '"a definition" (if (memv G3ce0@t '(define-syntax)) '"a define-syntax" (if (memv G3ce0@t '(module)) '"a module definition" (if (memv G3ce0@t '(library)) '"a library definition" (if (memv G3ce0@t '(import)) '"an import declaration" (if (memv G3ce0@t '(export)) '"an export declaration" '"a non-expression"))))))) G3ca8@type) '" was found where an expression was expected") G3c97@e) (if (memv G3cac@t '(mutable)) (G2e10@syntax-violation '#f '"attempt to reference an unexportable variable" G3c97@e) (G2e10@syntax-violation '#f '"invalid expression" G3c97@e)))))))))))))))))) G3ca8@type)) G3ca2@G3c9f G3ca1@G3c9e G3ca0@G3c9d))))) (set! G2d4b@chi-set! (lambda (G3ce2@e G3ce3@r G3ce4@mr) ((lambda (G3ce8@t) ((lambda (G3cea@ls/false) (if (and G3cea@ls/false (apply (lambda (G3cec@x G3ced@v) (G2b34@id? G3cec@x)) G3cea@ls/false)) (apply (lambda (G3cf0@x G3cf1@v) (call-with-values (lambda () (G2b5c@syntax-type G3cf0@x G3ce3@r)) (lambda (G3cf7@G3cf4 G3cf8@G3cf5 G3cf9@G3cf6) ((lambda (G3cfd@kwd G3cfe@value G3cff@type) ((lambda (G3d03@t) (if (memv G3d03@t '(lexical)) (begin (G2cb5@set-lexical-mutable! G3cfe@value '#t) (list 'set! (G2cb1@lexical-var G3cfe@value) (G2d49@chi-expr G3cf1@v G3ce3@r G3ce4@mr))) (if (memv G3d03@t '(core-prim)) (G2e10@syntax-violation '#f '"cannot modify imported core primitive" G3ce2@e) (if (memv G3d03@t '(global)) (G2e10@syntax-violation '#f '"attempt to modify imported binding" G3ce2@e) (if (memv G3d03@t '(global-macro!)) (G2d49@chi-expr (G2d43@chi-global-macro G3cfe@value G3ce2@e) G3ce3@r G3ce4@mr) (if (memv G3d03@t '(local-macro!)) (G2d49@chi-expr (G2d41@chi-local-macro G3cfe@value G3ce2@e) G3ce3@r G3ce4@mr) (if (memv G3d03@t '(mutable)) (G2e10@syntax-violation '#f '"attempt to assign to an unexportable variable" G3ce2@e) (G2e10@syntax-violation '#f '"invalid syntax" G3ce2@e)))))))) G3cff@type)) G3cf9@G3cf6 G3cf8@G3cf5 G3cf7@G3cf4)))) G3cea@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3ce8@t))) (G2d25@syntax-dispatch G3ce8@t '(_ any any)))) G3ce2@e))) (set! G2d4d@verify-formals (lambda (G3d05@fmls G3d06@stx) ((lambda (G3d09@t) ((lambda (G3d0b@ls/false) (if G3d0b@ls/false (apply (lambda (G3d0d@x*) (if (not (G2b3e@valid-bound-ids? G3d0d@x*)) (G2cdf@invalid-fmls-error G3d06@stx G3d05@fmls) (void))) G3d0b@ls/false) ((lambda (G3d0f@t) ((lambda (G3d11@ls/false) (if G3d11@ls/false (apply (lambda (G3d13@x* G3d14@x) (if (not (G2b3e@valid-bound-ids? (cons G3d14@x G3d13@x*))) (G2cdf@invalid-fmls-error G3d06@stx G3d05@fmls) (void))) G3d11@ls/false) ((lambda (G3d17@t) ((lambda (G3d19@ls/false) (if G3d19@ls/false (apply (lambda () (G2e10@syntax-violation '#f '"invalid syntax" G3d06@stx)) G3d19@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3d17@t))) (G2d25@syntax-dispatch G3d17@t '_))) G3d0f@t))) (G2d25@syntax-dispatch G3d0f@t '#(each+ any () any)))) G3d09@t))) (G2d25@syntax-dispatch G3d09@t 'each-any))) G3d05@fmls))) (set! G2d4f@chi-lambda-clause (lambda (G3d1b@stx G3d1c@fmls G3d1d@body* G3d1e@r G3d1f@mr) ((lambda (G3d25@t) ((lambda (G3d27@ls/false) (if G3d27@ls/false (apply (lambda (G3d29@x*) (begin (G2d4d@verify-formals G3d1c@fmls G3d1b@stx) ((lambda (G3d2b@lex* G3d2c@lab*) (values G3d2b@lex* (G2d5f@chi-internal (G2b20@add-subst (G2aef@make-full-rib G3d29@x* G3d2c@lab*) G3d1d@body*) (G2cb9@add-lexicals G3d2c@lab* G3d2b@lex* G3d1e@r) G3d1f@mr))) (map G2ab4@gen-lexical G3d29@x*) (map G2ab8@gen-label G3d29@x*)))) G3d27@ls/false) ((lambda (G3d2f@t) ((lambda (G3d31@ls/false) (if G3d31@ls/false (apply (lambda (G3d33@x* G3d34@x) (begin (G2d4d@verify-formals G3d1c@fmls G3d1b@stx) ((lambda (G3d37@lex* G3d38@lab* G3d39@lex G3d3a@lab) (values (append G3d37@lex* G3d39@lex) (G2d5f@chi-internal (G2b20@add-subst (G2aef@make-full-rib (cons G3d34@x G3d33@x*) (cons G3d3a@lab G3d38@lab*)) G3d1d@body*) (G2cb9@add-lexicals (cons G3d3a@lab G3d38@lab*) (cons G3d39@lex G3d37@lex*) G3d1e@r) G3d1f@mr))) (map G2ab4@gen-lexical G3d33@x*) (map G2ab8@gen-label G3d33@x*) (G2ab4@gen-lexical G3d34@x) (G2ab8@gen-label G3d34@x)))) G3d31@ls/false) ((lambda (G3d3f@t) ((lambda (G3d41@ls/false) (if G3d41@ls/false (apply (lambda () (G2e10@syntax-violation '#f '"invalid syntax" G3d1c@fmls)) G3d41@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3d3f@t))) (G2d25@syntax-dispatch G3d3f@t '_))) G3d2f@t))) (G2d25@syntax-dispatch G3d2f@t '#(each+ any () any)))) G3d25@t))) (G2d25@syntax-dispatch G3d25@t 'each-any))) G3d1c@fmls))) (set! G2d51@chi-lambda-clause* (lambda (G3d43@stx G3d44@fmls* G3d45@body** G3d46@r G3d47@mr) (if (null? G3d44@fmls*) (values '() '()) (call-with-values (lambda () (G2d4f@chi-lambda-clause G3d43@stx (car G3d44@fmls*) (car G3d45@body**) G3d46@r G3d47@mr)) (lambda (G3d4f@G3d4d G3d50@G3d4e) ((lambda (G3d53@b G3d54@a) (call-with-values (lambda () (G2d51@chi-lambda-clause* G3d43@stx (cdr G3d44@fmls*) (cdr G3d45@body**) G3d46@r G3d47@mr)) (lambda (G3d59@G3d57 G3d5a@G3d58) ((lambda (G3d5d@b* G3d5e@a*) (values (cons G3d54@a G3d5e@a*) (cons G3d53@b G3d5d@b*))) G3d5a@G3d58 G3d59@G3d57)))) G3d50@G3d4e G3d4f@G3d4d)))))) (set! G2d53@chi-defun (lambda (G3d61@x G3d62@r G3d63@mr) ((lambda (G3d67@fmls G3d68@body*) (call-with-values (lambda () (G2d4f@chi-lambda-clause G3d67@fmls G3d67@fmls G3d68@body* G3d62@r G3d63@mr)) (lambda (G3d6d@G3d6b G3d6e@G3d6c) ((lambda (G3d71@body G3d72@fmls) (G2a92@G29d4@build-lambda '#f G3d72@fmls G3d71@body)) G3d6e@G3d6c G3d6d@G3d6b)))) (car G3d61@x) (cdr G3d61@x)))) (set! G2d55@chi-rhs (lambda (G3d75@rhs G3d76@r G3d77@mr) ((lambda (G3d7b@t) (if (memv G3d7b@t '(defun)) (G2d53@chi-defun (cdr G3d75@rhs) G3d76@r G3d77@mr) (if (memv G3d7b@t '(expr)) ((lambda (G3d7d@expr) (G2d49@chi-expr G3d7d@expr G3d76@r G3d77@mr)) (cdr G3d75@rhs)) (if (memv G3d7b@t '(top-expr)) ((lambda (G3d7f@expr) (G2a95@G2a06@build-sequence '#f (list (G2d49@chi-expr G3d7f@expr G3d76@r G3d77@mr) (G2a96@G2a08@build-void)))) (cdr G3d75@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3d75@rhs))))) (car G3d75@rhs)))) (set! G2d57@expand-interaction-rhs*/init* (lambda (G3d81@lhs* G3d82@rhs* G3d83@init* G3d84@r G3d85@mr) ((letrec ((G3d8b@f (lambda (G3d8d@lhs* G3d8e@rhs*) (if (null? G3d8d@lhs*) (map (lambda (G3d91@x) (G2d49@chi-expr G3d91@x G3d84@r G3d85@mr)) G3d83@init*) ((lambda (G3d93@lhs G3d94@rhs) ((lambda (G3d97@t) (if (memv G3d97@t '(defun)) ((lambda (G3d99@rhs) (cons (list 'set! G3d93@lhs G3d99@rhs) (G3d8b@f (cdr G3d8d@lhs*) (cdr G3d8e@rhs*)))) (G2d53@chi-defun (cdr G3d94@rhs) G3d84@r G3d85@mr)) (if (memv G3d97@t '(expr)) ((lambda (G3d9b@rhs) (cons (list 'set! G3d93@lhs G3d9b@rhs) (G3d8b@f (cdr G3d8d@lhs*) (cdr G3d8e@rhs*)))) (G2d49@chi-expr (cdr G3d94@rhs) G3d84@r G3d85@mr)) (if (memv G3d97@t '(top-expr)) ((lambda (G3d9d@e) (cons G3d9d@e (G3d8b@f (cdr G3d8d@lhs*) (cdr G3d8e@rhs*)))) (G2d49@chi-expr (cdr G3d94@rhs) G3d84@r G3d85@mr)) (error 'expand-interaction '"invallid" G3d94@rhs))))) (car G3d94@rhs))) (car G3d8d@lhs*) (car G3d8e@rhs*)))))) G3d8b@f) G3d81@lhs* G3d82@rhs*))) (set! G2d59@chi-rhs* (lambda (G3d9f@rhs* G3da0@r G3da1@mr) ((letrec ((G3da5@f (lambda (G3da7@ls) (if (null? G3da7@ls) '() ((lambda (G3da9@a) (cons G3da9@a (G3da5@f (cdr G3da7@ls)))) (G2d55@chi-rhs (car G3da7@ls) G3da0@r G3da1@mr)))))) G3da5@f) G3d9f@rhs*))) (set! G2d5b@find-bound=? (lambda (G3dab@x G3dac@lhs* G3dad@rhs*) (if (null? G3dac@lhs*) '#f (if (G2b3a@bound-id=? G3dab@x (car G3dac@lhs*)) (car G3dad@rhs*) (G2d5b@find-bound=? G3dab@x (cdr G3dac@lhs*) (cdr G3dad@rhs*)))))) (set! G2d5d@find-dups (lambda (G3db1@ls) ((letrec ((G3db3@f (lambda (G3db5@ls G3db6@dups) (if (null? G3db5@ls) G3db6@dups ((lambda (G3db9@t) (if G3db9@t ((lambda (G3dbb@x) (G3db3@f (cdr G3db5@ls) (cons (list (car G3db5@ls) G3dbb@x) G3db6@dups))) G3db9@t) (G3db3@f (cdr G3db5@ls) G3db6@dups))) (G2d5b@find-bound=? (car G3db5@ls) (cdr G3db5@ls) (cdr G3db5@ls))))))) G3db3@f) G3db1@ls '()))) (set! G2d5f@chi-internal (lambda (G3dbd@e* G3dbe@r G3dbf@mr) ((lambda (G3dc3@rib) (call-with-values (lambda () (G2d82@chi-body* (map (lambda (G3dcd@x) (G2b20@add-subst G3dc3@rib G3dcd@x)) (G2b32@syntax->list G3dbd@e*)) G3dbe@r G3dbf@mr '() '() '() '() '() G3dc3@rib '#f)) (lambda (G3dcf@G3dc5 G3dd0@G3dc6 G3dd1@G3dc7 G3dd2@G3dc8 G3dd3@G3dc9 G3dd4@G3dca G3dd5@G3dcb G3dd6@G3dcc) ((lambda (G3ddf@_exp* G3de0@kwd* G3de1@mod** G3de2@rhs* G3de3@lex* G3de4@mr G3de5@r G3de6@e*) (begin (if (null? G3de6@e*) (G2e10@syntax-violation '#f '"no expression in body" G3de6@e*) (void)) ((lambda (G3def@init*) ((lambda (G3df1@rhs*) ((lambda () (G2a98@G2a0c@build-letrec* '#f (reverse G3de3@lex*) (reverse G3df1@rhs*) (G2a95@G2a06@build-sequence '#f G3def@init*))))) (G2d59@chi-rhs* G3de2@rhs* G3de5@r G3de4@mr))) (G2d45@chi-expr* (append (apply append (reverse G3de1@mod**)) G3de6@e*) G3de5@r G3de4@mr)))) G3dd6@G3dcc G3dd5@G3dcb G3dd4@G3dca G3dd3@G3dc9 G3dd2@G3dc8 G3dd1@G3dc7 G3dd0@G3dc6 G3dcf@G3dc5)))) (G2ae3@make-empty-rib)))) (set! G2d61@parse-module (lambda (G3df3@e) ((lambda (G3df5@t) ((lambda (G3df7@ls/false) (if G3df7@ls/false (apply (lambda (G3df9@export* G3dfa@b*) (begin (if (not (for-all G2b34@id? G3df9@export*)) (G2e10@syntax-violation '#f '"module exports must be identifiers" G3df3@e) (void)) (values '#f (list->vector G3df9@export*) G3dfa@b*))) G3df7@ls/false) ((lambda (G3dfd@t) ((lambda (G3dff@ls/false) (if G3dff@ls/false (apply (lambda (G3e01@name G3e02@export* G3e03@b*) (begin (if (not (G2b34@id? G3e01@name)) (G2e10@syntax-violation '#f '"module name must be an identifier" G3df3@e) (void)) (if (not (for-all G2b34@id? G3e02@export*)) (G2e10@syntax-violation '#f '"module exports must be identifiers" G3df3@e) (void)) (values G3e01@name (list->vector G3e02@export*) G3e03@b*))) G3dff@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3dfd@t))) (G2d25@syntax-dispatch G3dfd@t '(_ any each-any . each-any)))) G3df5@t))) (G2d25@syntax-dispatch G3df5@t '(_ each-any . each-any)))) G3df3@e))) (set! G2d67@G2d62 (make-record-type-descriptor 'module-interface '#f 'G2d65 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2d69@G2d64 '#f) (set! G2d6b@G2d63 (make-record-constructor-descriptor G2d67@G2d62 '#f G2d69@G2d64)) (set! G2d6e@module-interface? (record-predicate G2d67@G2d62)) (set! G2d70@make-module-interface (record-constructor G2d6b@G2d63)) (set! G2d72@module-interface-first-mark (record-accessor G2d67@G2d62 '0)) (set! G2d74@module-interface-exp-id-vec (record-accessor G2d67@G2d62 '1)) (set! G2d76@module-interface-exp-lab-vec (record-accessor G2d67@G2d62 '2)) (set! G2d78@set-module-interface-first-mark! (record-mutator G2d67@G2d62 '0)) (set! G2d7a@set-module-interface-exp-id-vec! (record-mutator G2d67@G2d62 '1)) (set! G2d7c@set-module-interface-exp-lab-vec! (record-mutator G2d67@G2d62 '2)) (set! G2d7e@module-interface-exp-id* (lambda (G3e07@iface G3e08@id) ((lambda (G3e0c@diff-marks) (begin (set! G3e0c@diff-marks (lambda (G3e13@ls G3e14@x) (begin (if (null? G3e13@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G3e17@a) (if (eq? G3e17@a G3e14@x) '() (cons G3e17@a (G3e0c@diff-marks (cdr G3e13@ls) G3e14@x)))) (car G3e13@ls))))) ((lambda (G3e0d@diff G3e0e@id-vec) (if (null? G3e0d@diff) G3e0e@id-vec (vector-map (lambda (G3e11@x) (G2afe@make-stx (G2b00@stx-expr G3e11@x) (append G3e0d@diff (G2b02@stx-mark* G3e11@x)) '() '())) G3e0e@id-vec))) (G3e0c@diff-marks (G2b02@stx-mark* G3e08@id) (G2d72@module-interface-first-mark G3e07@iface)) (G2d74@module-interface-exp-id-vec G3e07@iface)))) '#f))) (set! G2d80@chi-internal-module (lambda (G3e19@e G3e1a@r G3e1b@mr G3e1c@lex* G3e1d@rhs* G3e1e@mod** G3e1f@kwd*) (call-with-values (lambda () (G2d61@parse-module G3e19@e)) (lambda (G3e2a@G3e27 G3e2b@G3e28 G3e2c@G3e29) ((lambda (G3e30@e* G3e31@exp-id* G3e32@name) ((lambda (G3e36@rib) ((lambda (G3e38@e*) ((lambda () (call-with-values (lambda () (G2d82@chi-body* G3e38@e* G3e1a@r G3e1b@mr G3e1c@lex* G3e1d@rhs* G3e1e@mod** G3e1f@kwd* '() G3e36@rib '#f)) (lambda (G3e42@G3e3a G3e43@G3e3b G3e44@G3e3c G3e45@G3e3d G3e46@G3e3e G3e47@G3e3f G3e48@G3e40 G3e49@G3e41) ((lambda (G3e52@_exp* G3e53@kwd* G3e54@mod** G3e55@rhs* G3e56@lex* G3e57@mr G3e58@r G3e59@e*) ((lambda (G3e62@exp-lab* G3e63@mod**) (if (not G3e32@name) (values G3e56@lex* G3e55@rhs* G3e31@exp-id* G3e62@exp-lab* G3e58@r G3e57@mr G3e63@mod** G3e53@kwd*) ((lambda (G3e66@lab G3e67@iface) (values G3e56@lex* G3e55@rhs* (vector G3e32@name) (vector G3e66@lab) (cons (cons G3e66@lab (cons '$module G3e67@iface)) G3e58@r) (cons (cons G3e66@lab (cons '$module G3e67@iface)) G3e57@mr) G3e63@mod** G3e53@kwd*)) (G2ab8@gen-label 'module) (G2d70@make-module-interface (car (G2b02@stx-mark* G3e32@name)) (vector-map (lambda (G3e6a@x) (G2afe@make-stx (G2b00@stx-expr G3e6a@x) (G2b02@stx-mark* G3e6a@x) '() '())) G3e31@exp-id*) G3e62@exp-lab*)))) (vector-map (lambda (G3e6c@x) (or (G2b4e@id->label (G2afe@make-stx (G2b36@id->sym G3e6c@x) (G2b02@stx-mark* G3e6c@x) (list G3e36@rib) '())) (G2e10@syntax-violation '#f '"cannot find module export" G3e6c@x))) G3e31@exp-id*) (cons G3e59@e* G3e54@mod**))) G3e49@G3e41 G3e48@G3e40 G3e47@G3e3f G3e46@G3e3e G3e45@G3e3d G3e44@G3e3c G3e43@G3e3b G3e42@G3e3a)))))) (map (lambda (G3e6e@x) (G2b20@add-subst G3e36@rib G3e6e@x)) (G2b32@syntax->list G3e30@e*)))) (G2ae3@make-empty-rib))) G3e2c@G3e29 G3e2b@G3e28 G3e2a@G3e27))))) (set! G2d82@chi-body* (lambda (G3e70@e* G3e71@r G3e72@mr G3e73@lex* G3e74@rhs* G3e75@mod** G3e76@kwd* G3e77@exp* G3e78@rib G3e79@top?) (if (null? G3e70@e*) (values G3e70@e* G3e71@r G3e72@mr G3e73@lex* G3e74@rhs* G3e75@mod** G3e76@kwd* G3e77@exp*) ((lambda (G3e84@e) (call-with-values (lambda () (G2b5c@syntax-type G3e84@e G3e71@r)) (lambda (G3e89@G3e86 G3e8a@G3e87 G3e8b@G3e88) ((lambda (G3e8f@kwd G3e90@value G3e91@type) ((lambda (G3e95@kwd*) ((lambda (G3e97@t) (if (memv G3e97@t '(define)) (call-with-values (lambda () (G2ca9@parse-define G3e84@e)) (lambda (G3e9b@G3e99 G3e9c@G3e9a) ((lambda (G3e9f@rhs G3ea0@id) (begin (if (G2b42@bound-id-member? G3ea0@id G3e95@kwd*) (G2e10@syntax-violation '#f '"cannot redefine keyword" G3e84@e) (void)) (call-with-values (lambda () (G2abc@gen-define-label+loc G3ea0@id G3e78@rib)) (lambda (G3ea5@G3ea3 G3ea6@G3ea4) ((lambda (G3ea9@lex G3eaa@lab) (begin (G2ae5@extend-rib! G3e78@rib G3ea0@id G3eaa@lab) (G2d82@chi-body* (cdr G3e70@e*) (G2cb7@add-lexical G3eaa@lab G3ea9@lex G3e71@r) G3e72@mr (cons G3ea9@lex G3e73@lex*) (cons G3e9f@rhs G3e74@rhs*) G3e75@mod** G3e95@kwd* G3e77@exp* G3e78@rib G3e79@top?))) G3ea6@G3ea4 G3ea5@G3ea3))))) G3e9c@G3e9a G3e9b@G3e99))) (if (memv G3e97@t '(define-syntax)) (call-with-values (lambda () (G2cab@parse-define-syntax G3e84@e)) (lambda (G3eaf@G3ead G3eb0@G3eae) ((lambda (G3eb3@rhs G3eb4@id) (begin (if (G2b42@bound-id-member? G3eb4@id G3e95@kwd*) (G2e10@syntax-violation '#f '"cannot redefine keyword" G3e84@e) (void)) ((lambda (G3eb7@lab G3eb8@expanded-rhs) (begin (G2ae5@extend-rib! G3e78@rib G3eb4@id G3eb7@lab) ((lambda (G3ebb@b) (G2d82@chi-body* (cdr G3e70@e*) (cons (cons G3eb7@lab G3ebb@b) G3e71@r) (cons (cons G3eb7@lab G3ebb@b) G3e72@mr) G3e73@lex* G3e74@rhs* G3e75@mod** G3e95@kwd* G3e77@exp* G3e78@rib G3e79@top?)) (G2b72@make-eval-transformer G3eb8@expanded-rhs)))) (G2abe@gen-define-label G3eb4@id G3e78@rib) (G2d84@expand-transformer G3eb3@rhs G3e72@mr)))) G3eb0@G3eae G3eaf@G3ead))) (if (memv G3e97@t '(let-syntax letrec-syntax)) ((lambda (G3ebd@t) ((lambda (G3ebf@ls/false) (if (and G3ebf@ls/false (apply (lambda (G3ec1@xlhs* G3ec2@xrhs* G3ec3@xbody*) (if (not (G2b3e@valid-bound-ids? G3ec1@xlhs*)) (G2e10@syntax-violation '#f '"invalid identifiers" G3e84@e) (void))) G3ebf@ls/false)) (apply (lambda (G3ec7@xlhs* G3ec8@xrhs* G3ec9@xbody*) ((lambda (G3ecd@xlab*) ((lambda (G3ecf@xrib) ((lambda (G3ed1@xb*) ((lambda () (G2d82@chi-body* (append (map (lambda (G3ed3@x) (G2b20@add-subst G3ecf@xrib G3ed3@x)) G3ec9@xbody*) (cdr G3e70@e*)) (append (map cons G3ecd@xlab* G3ed1@xb*) G3e71@r) (append (map cons G3ecd@xlab* G3ed1@xb*) G3e72@mr) G3e73@lex* G3e74@rhs* G3e75@mod** G3e95@kwd* G3e77@exp* G3e78@rib G3e79@top?)))) (map (lambda (G3ed5@x) (G2b72@make-eval-transformer (G2d84@expand-transformer (if (eq? G3e91@type 'let-syntax) G3ed5@x (G2b20@add-subst G3ecf@xrib G3ed5@x)) G3e72@mr))) G3ec8@xrhs*))) (G2aef@make-full-rib G3ec7@xlhs* G3ecd@xlab*))) (map G2ab8@gen-label G3ec7@xlhs*))) G3ebf@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3ebd@t))) (G2d25@syntax-dispatch G3ebd@t '(_ #(each (any any)) . each-any)))) G3e84@e) (if (memv G3e97@t '(begin)) ((lambda (G3ed7@t) ((lambda (G3ed9@ls/false) (if G3ed9@ls/false (apply (lambda (G3edb@x*) (G2d82@chi-body* (append G3edb@x* (cdr G3e70@e*)) G3e71@r G3e72@mr G3e73@lex* G3e74@rhs* G3e75@mod** G3e95@kwd* G3e77@exp* G3e78@rib G3e79@top?)) G3ed9@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3ed7@t))) (G2d25@syntax-dispatch G3ed7@t '(_ . each-any)))) G3e84@e) (if (memv G3e97@t '(global-macro global-macro!)) (G2d82@chi-body* (cons (G2b20@add-subst G3e78@rib (G2d43@chi-global-macro G3e90@value G3e84@e)) (cdr G3e70@e*)) G3e71@r G3e72@mr G3e73@lex* G3e74@rhs* G3e75@mod** G3e95@kwd* G3e77@exp* G3e78@rib G3e79@top?) (if (memv G3e97@t '(local-macro local-macro!)) (G2d82@chi-body* (cons (G2b20@add-subst G3e78@rib (G2d41@chi-local-macro G3e90@value G3e84@e)) (cdr G3e70@e*)) G3e71@r G3e72@mr G3e73@lex* G3e74@rhs* G3e75@mod** G3e95@kwd* G3e77@exp* G3e78@rib G3e79@top?) (if (memv G3e97@t '(macro macro!)) (G2d82@chi-body* (cons (G2b20@add-subst G3e78@rib (G2d3f@chi-macro G3e90@value G3e84@e)) (cdr G3e70@e*)) G3e71@r G3e72@mr G3e73@lex* G3e74@rhs* G3e75@mod** G3e95@kwd* G3e77@exp* G3e78@rib G3e79@top?) (if (memv G3e97@t '(module)) (call-with-values (lambda () (G2d80@chi-internal-module G3e84@e G3e71@r G3e72@mr G3e73@lex* G3e74@rhs* G3e75@mod** G3e95@kwd*)) (lambda (G3ee5@G3edd G3ee6@G3ede G3ee7@G3edf G3ee8@G3ee0 G3ee9@G3ee1 G3eea@G3ee2 G3eeb@G3ee3 G3eec@G3ee4) ((lambda (G3ef5@kwd* G3ef6@mod** G3ef7@mr G3ef8@r G3ef9@m-exp-lab* G3efa@m-exp-id* G3efb@rhs* G3efc@lex*) (begin (vector-for-each (lambda (G3f05@id G3f06@lab) (G2ae5@extend-rib! G3e78@rib G3f05@id G3f06@lab)) G3efa@m-exp-id* G3ef9@m-exp-lab*) (G2d82@chi-body* (cdr G3e70@e*) G3ef8@r G3ef7@mr G3efc@lex* G3efb@rhs* G3ef6@mod** G3ef5@kwd* G3e77@exp* G3e78@rib G3e79@top?))) G3eec@G3ee4 G3eeb@G3ee3 G3eea@G3ee2 G3ee9@G3ee1 G3ee8@G3ee0 G3ee7@G3edf G3ee6@G3ede G3ee5@G3edd))) (if (memv G3e97@t '(library)) (begin (G2df2@library-expander (G2b4a@stx->datum G3e84@e)) (G2d82@chi-body* (cdr G3e70@e*) G3e71@r G3e72@mr G3e73@lex* G3e74@rhs* G3e75@mod** G3e95@kwd* G3e77@exp* G3e78@rib G3e79@top?)) (if (memv G3e97@t '(export)) ((lambda (G3f09@t) ((lambda (G3f0b@ls/false) (if G3f0b@ls/false (apply (lambda (G3f0d@exp-decl*) (G2d82@chi-body* (cdr G3e70@e*) G3e71@r G3e72@mr G3e73@lex* G3e74@rhs* G3e75@mod** G3e95@kwd* (append G3f0d@exp-decl* G3e77@exp*) G3e78@rib G3e79@top?)) G3f0b@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3f09@t))) (G2d25@syntax-dispatch G3f09@t '(_ . each-any)))) G3e84@e) (if (memv G3e97@t '(import)) ((lambda () ((lambda (G3f10@module-import? G3f12@module-import G3f14@library-import) (begin (set! G3f10@module-import? (lambda (G3f5c@e) ((lambda (G3f5e@t) ((lambda (G3f60@ls/false) (if (and G3f60@ls/false (apply (lambda (G3f62@id) (G2b34@id? G3f62@id)) G3f60@ls/false)) (apply (lambda (G3f64@id) '#t) G3f60@ls/false) ((lambda (G3f66@t) ((lambda (G3f68@ls/false) (if G3f68@ls/false (apply (lambda (G3f6a@imp*) '#f) G3f68@ls/false) ((lambda (G3f6c@t) ((lambda (G3f6e@ls/false) (if G3f6e@ls/false (apply (lambda () (G2e10@syntax-violation '#f '"malformed import form" G3f5c@e)) G3f6e@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3f6c@t))) (G2d25@syntax-dispatch G3f6c@t '_))) G3f66@t))) (G2d25@syntax-dispatch G3f66@t '(_ . each-any)))) G3f5e@t))) (G2d25@syntax-dispatch G3f5e@t '(_ any)))) G3f5c@e))) (set! G3f12@module-import (lambda (G3f3d@e G3f3e@r) ((lambda (G3f41@t) ((lambda (G3f43@ls/false) (if (and G3f43@ls/false (apply (lambda (G3f45@id) (G2b34@id? G3f45@id)) G3f43@ls/false)) (apply (lambda (G3f47@id) (call-with-values (lambda () (G2b5c@syntax-type G3f47@id G3f3e@r)) (lambda (G3f4c@G3f49 G3f4d@G3f4a G3f4e@G3f4b) ((lambda (G3f52@kwd G3f53@value G3f54@type) ((lambda (G3f58@t) (if (memv G3f58@t '($module)) ((lambda (G3f5a@iface) (values (G2d7e@module-interface-exp-id* G3f5a@iface G3f47@id) (G2d76@module-interface-exp-lab-vec G3f5a@iface))) G3f53@value) (G2e10@syntax-violation '#f '"invalid import" G3f3d@e))) G3f54@type)) G3f4e@G3f4b G3f4d@G3f4a G3f4c@G3f49)))) G3f43@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3f41@t))) (G2d25@syntax-dispatch G3f41@t '(_ any)))) G3f3d@e))) (set! G3f14@library-import (lambda (G3f23@e) ((lambda (G3f25@t) ((lambda (G3f27@ls/false) (if G3f27@ls/false (apply (lambda (G3f29@ctxt G3f2a@imp*) (call-with-values (lambda () (G2d8c@parse-import-spec* (G2e16@syntax->datum G3f2a@imp*))) (lambda (G3f2f@G3f2d G3f30@G3f2e) ((lambda (G3f33@subst-labels G3f34@subst-names) (values (vector-map (lambda (G3f37@name) (G2b12@datum->stx G3f29@ctxt G3f37@name)) G3f34@subst-names) G3f33@subst-labels)) G3f30@G3f2e G3f2f@G3f2d)))) G3f27@ls/false) ((lambda (G3f39@t) ((lambda (G3f3b@ls/false) (if G3f3b@ls/false (apply (lambda () (G2e10@syntax-violation '#f '"invalid import form" G3f23@e)) G3f3b@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3f39@t))) (G2d25@syntax-dispatch G3f39@t '_))) G3f25@t))) (G2d25@syntax-dispatch G3f25@t '(any . each-any)))) G3f23@e))) (begin (call-with-values (lambda () (if (G3f10@module-import? G3e84@e) (G3f12@module-import G3e84@e G3e71@r) (G3f14@library-import G3e84@e))) (lambda (G3f17@G3f15 G3f18@G3f16) ((lambda (G3f1b@lab* G3f1c@id*) (vector-for-each (lambda (G3f1f@id G3f20@lab) (G2ae5@extend-rib! G3e78@rib G3f1f@id G3f20@lab)) G3f1c@id* G3f1b@lab*)) G3f18@G3f16 G3f17@G3f15))) (G2d82@chi-body* (cdr G3e70@e*) G3e71@r G3e72@mr G3e73@lex* G3e74@rhs* G3e75@mod** G3e95@kwd* G3e77@exp* G3e78@rib G3e79@top?)))) '#f '#f '#f))) (if G3e79@top? (G2d82@chi-body* (cdr G3e70@e*) G3e71@r G3e72@mr (cons (G2ab4@gen-lexical 'dummy) G3e73@lex*) (cons (cons 'top-expr G3e84@e) G3e74@rhs*) G3e75@mod** G3e95@kwd* G3e77@exp* G3e78@rib G3e79@top?) (values G3e70@e* G3e71@r G3e72@mr G3e73@lex* G3e74@rhs* G3e75@mod** G3e95@kwd* G3e77@exp*)))))))))))))) G3e91@type)) (if (G2b34@id? G3e8f@kwd) (cons G3e8f@kwd G3e76@kwd*) G3e76@kwd*))) G3e8b@G3e88 G3e8a@G3e87 G3e89@G3e86)))) (car G3e70@e*))))) (set! G2d84@expand-transformer (lambda (G3f70@expr G3f71@r) ((lambda (G3f74@rtc) ((lambda (G3f76@expanded-rhs) (begin (for-each ((lambda (G3f78@mark-visit) (lambda (G3f7a@x) (begin (G295c@G2803@invoke-library G3f7a@x) (G3f78@mark-visit G3f7a@x)))) (G2d94@vis-collector)) (G3f74@rtc)) G3f76@expanded-rhs)) ((lambda (G3f80@G3f7c G3f81@G3f7d G3f82@G3f7e G3f83@G3f7f) ((lambda (G3f88@swap) (dynamic-wind G3f88@swap (lambda () (G2d49@chi-expr G3f70@expr G3f71@r G3f71@r)) G3f88@swap)) (lambda () (begin ((lambda (G3f8a@t) (begin (G3f80@G3f7c G3f82@G3f7e) (set! G3f82@G3f7e G3f8a@t))) (G3f80@G3f7c)) ((lambda (G3f8c@t) (begin (G3f81@G3f7d G3f83@G3f7f) (set! G3f83@G3f7f G3f8c@t))) (G3f81@G3f7d)))))) G2d92@inv-collector G2d94@vis-collector G3f74@rtc (lambda (G3f8e@x) (values))))) (G2d90@make-collector)))) (set! G2d86@parse-exports (lambda (G3f90@exp*) ((letrec ((G3f92@f (lambda (G3f94@exp* G3f95@int* G3f96@ext*) (if (null? G3f94@exp*) (begin (if (not (G2b3e@valid-bound-ids? G3f96@ext*)) (G2e10@syntax-violation 'export '"invalid exports" (G2d5d@find-dups G3f96@ext*)) (void)) (values (map G2e16@syntax->datum G3f96@ext*) G3f95@int*)) ((lambda (G3f9a@t) ((lambda (G3f9c@ls/false) (if G3f9c@ls/false (apply (lambda (G3f9e@rename G3f9f@i* G3fa0@e*) (begin (if (not (and (eq? (G2e16@syntax->datum G3f9e@rename) 'rename) (for-all G2b34@id? G3f9f@i*) (for-all G2b34@id? G3fa0@e*))) (G2e10@syntax-violation 'export '"invalid export specifier" (car G3f94@exp*)) (void)) (G3f92@f (cdr G3f94@exp*) (append G3f9f@i* G3f95@int*) (append G3fa0@e* G3f96@ext*)))) G3f9c@ls/false) ((lambda (G3fa4@t) ((lambda (G3fa6@ls/false) (if G3fa6@ls/false (apply (lambda (G3fa8@ie) (begin (if (not (G2b34@id? G3fa8@ie)) (G2e10@syntax-violation 'export '"invalid export" G3fa8@ie) (void)) (G3f92@f (cdr G3f94@exp*) (cons G3fa8@ie G3f95@int*) (cons G3fa8@ie G3f96@ext*)))) G3fa6@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3fa4@t))) (G2d25@syntax-dispatch G3fa4@t 'any))) G3f9a@t))) (G2d25@syntax-dispatch G3f9a@t '(any . #(each (any any)))))) (car G3f94@exp*)))))) G3f92@f) G3f90@exp* '() '()))) (set! G2d88@parse-library-name (lambda (G3faa@spec) ((lambda (G3fad@parse) (begin (set! G3fad@parse (lambda (G3fb8@x) ((lambda (G3fba@t) ((lambda (G3fbc@ls/false) (if (and G3fbc@ls/false (apply (lambda (G3fbe@v*) (for-all (lambda (G3fc0@x) ((lambda (G3fc2@x) (and (integer? G3fc2@x) (exact? G3fc2@x))) (G2e16@syntax->datum G3fc0@x))) G3fbe@v*)) G3fbc@ls/false)) (apply (lambda (G3fc4@v*) (values '() (map G2e16@syntax->datum G3fc4@v*))) G3fbc@ls/false) ((lambda (G3fc6@t) ((lambda (G3fc8@ls/false) (if (and G3fc8@ls/false (apply (lambda (G3fca@x G3fcb@rest) (symbol? (G2e16@syntax->datum G3fca@x))) G3fc8@ls/false)) (apply (lambda (G3fce@x G3fcf@rest) (call-with-values (lambda () (G3fad@parse G3fcf@rest)) (lambda (G3fd4@G3fd2 G3fd5@G3fd3) ((lambda (G3fd8@v* G3fd9@x*) (values (cons (G2e16@syntax->datum G3fce@x) G3fd9@x*) G3fd8@v*)) G3fd5@G3fd3 G3fd4@G3fd2)))) G3fc8@ls/false) ((lambda (G3fdc@t) ((lambda (G3fde@ls/false) (if G3fde@ls/false (apply (lambda () (values '() '())) G3fde@ls/false) ((lambda (G3fe0@t) ((lambda (G3fe2@ls/false) (if G3fe2@ls/false (apply (lambda () (G2e10@syntax-violation '#f '"invalid library name" G3faa@spec)) G3fe2@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G3fe0@t))) (G2d25@syntax-dispatch G3fe0@t '_))) G3fdc@t))) (G2d25@syntax-dispatch G3fdc@t '()))) G3fc6@t))) (G2d25@syntax-dispatch G3fc6@t '(any . any)))) G3fba@t))) (G2d25@syntax-dispatch G3fba@t '(each-any)))) G3fb8@x))) (call-with-values (lambda () (G3fad@parse G3faa@spec)) (lambda (G3fb0@G3fae G3fb1@G3faf) ((lambda (G3fb4@ver* G3fb5@name*) (begin (if (null? G3fb5@name*) (G2e10@syntax-violation '#f '"empty library name" G3faa@spec) (void)) (values G3fb5@name* G3fb4@ver*))) G3fb1@G3faf G3fb0@G3fae))))) '#f))) (set! G2d8a@parse-library (lambda (G3fe4@e) ((lambda (G3fe6@t) ((lambda (G3fe8@ls/false) (if (and G3fe8@ls/false (apply (lambda (G3fea@library G3feb@name* G3fec@export G3fed@exp* G3fee@import G3fef@imp* G3ff0@b*) (and (eq? (G2e16@syntax->datum G3fec@export) 'export) (eq? (G2e16@syntax->datum G3fee@import) 'import) (eq? (G2e16@syntax->datum G3fea@library) 'library))) G3fe8@ls/false)) (apply (lambda (G3ff8@library G3ff9@name* G3ffa@export G3ffb@exp* G3ffc@import G3ffd@imp* G3ffe@b*) (values G3ff9@name* G3ffb@exp* G3ffd@imp* G3ffe@b*)) G3fe8@ls/false) ((lambda (G4006@t) ((lambda (G4008@ls/false) (if G4008@ls/false (apply (lambda () (G2e10@syntax-violation '#f '"malformed library" G3fe4@e)) G4008@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G4006@t))) (G2d25@syntax-dispatch G4006@t '_))) G3fe6@t))) (G2d25@syntax-dispatch G3fe6@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G3fe4@e))) (set! G2d8c@parse-import-spec* ((lambda () ((lambda (G400b@idsyn? G400d@dup-error G400f@merge-substs G4011@exclude* G4013@find* G4015@rem* G4017@remove-dups G4019@parse-library-name G401b@import-library G401d@get-import G401f@add-imports!) (begin (set! G400b@idsyn? (lambda (G420a@x) (symbol? (G2e16@syntax->datum G420a@x)))) (set! G400d@dup-error (lambda (G4208@name) (G2e10@syntax-violation 'import '"two imports with different bindings" G4208@name))) (set! G400f@merge-substs (lambda (G41f6@s G41f7@subst) ((lambda (G41fb@insert-to-subst) (begin (set! G41fb@insert-to-subst (lambda (G41fc@a G41fd@subst) ((lambda (G4200@name G4201@label) ((lambda (G4204@t) (if G4204@t ((lambda (G4206@x) (if (eq? (cdr G4206@x) G4201@label) G41fd@subst (G400d@dup-error G4200@name))) G4204@t) (cons G41fc@a G41fd@subst))) (assq G4200@name G41fd@subst))) (car G41fc@a) (cdr G41fc@a)))) (if (null? G41f6@s) G41f7@subst (G41fb@insert-to-subst (car G41f6@s) (G400f@merge-substs (cdr G41f6@s) G41f7@subst))))) '#f))) (set! G4011@exclude* (lambda (G41cc@sym* G41cd@subst) ((lambda (G41d1@exclude) (begin (set! G41d1@exclude (lambda (G41e6@sym G41e7@subst) (if (null? G41e7@subst) (G2e10@syntax-violation 'import '"cannot rename unbound identifier" G41e6@sym) (if (eq? G41e6@sym (caar G41e7@subst)) (values (cdar G41e7@subst) (cdr G41e7@subst)) ((lambda (G41ea@a) (call-with-values (lambda () (G41d1@exclude G41e6@sym (cdr G41e7@subst))) (lambda (G41ee@G41ec G41ef@G41ed) ((lambda (G41f2@subst G41f3@old) (values G41f3@old (cons G41ea@a G41f2@subst))) G41ef@G41ed G41ee@G41ec)))) (car G41e7@subst)))))) (if (null? G41cc@sym*) (values '() G41cd@subst) (call-with-values (lambda () (G41d1@exclude (car G41cc@sym*) G41cd@subst)) (lambda (G41d4@G41d2 G41d5@G41d3) ((lambda (G41d8@subst G41d9@old) (call-with-values (lambda () (G4011@exclude* (cdr G41cc@sym*) G41d8@subst)) (lambda (G41de@G41dc G41df@G41dd) ((lambda (G41e2@subst G41e3@old*) (values (cons G41d9@old G41e3@old*) G41e2@subst)) G41df@G41dd G41de@G41dc)))) G41d5@G41d3 G41d4@G41d2)))))) '#f))) (set! G4013@find* (lambda (G41c4@sym* G41c5@subst) (map (lambda (G41c8@x) ((lambda (G41ca@t) (if G41ca@t (cdr G41ca@t) (G2e10@syntax-violation 'import '"cannot find identifier" G41c8@x))) (assq G41c8@x G41c5@subst))) G41c4@sym*))) (set! G4015@rem* (lambda (G41bc@sym* G41bd@subst) ((letrec ((G41c0@f (lambda (G41c2@subst) (if (null? G41c2@subst) '() (if (memq (caar G41c2@subst) G41bc@sym*) (G41c0@f (cdr G41c2@subst)) (cons (car G41c2@subst) (G41c0@f (cdr G41c2@subst)))))))) G41c0@f) G41bd@subst))) (set! G4017@remove-dups (lambda (G41ba@ls) (if (null? G41ba@ls) '() (if (memq (car G41ba@ls) (cdr G41ba@ls)) (G4017@remove-dups (cdr G41ba@ls)) (cons (car G41ba@ls) (G4017@remove-dups (cdr G41ba@ls))))))) (set! G4019@parse-library-name (lambda (G40d4@spec) ((lambda (G40d7@subversion? G40d9@subversion-pred G40db@version-pred) (begin (set! G40d7@subversion? (lambda (G41b6@x) ((lambda (G41b8@x) (and (integer? G41b8@x) (exact? G41b8@x) (>= G41b8@x '0))) (G2e16@syntax->datum G41b6@x)))) (set! G40d9@subversion-pred (lambda (G4156@x*) ((lambda (G4158@t) ((lambda (G415a@ls/false) (if (and G415a@ls/false (apply (lambda (G415c@n) (G40d7@subversion? G415c@n)) G415a@ls/false)) (apply (lambda (G415e@n) (lambda (G4160@x) (= G4160@x (G2e16@syntax->datum G415e@n)))) G415a@ls/false) ((lambda (G4162@t) ((lambda (G4164@ls/false) (if (and G4164@ls/false (apply (lambda (G4166@p? G4167@sub*) (eq? (G2e16@syntax->datum G4166@p?) 'and)) G4164@ls/false)) (apply (lambda (G416a@p? G416b@sub*) ((lambda (G416e@p*) (lambda (G4170@x) (for-all (lambda (G4172@p) (G4172@p G4170@x)) G416e@p*))) (map G40d9@subversion-pred G416b@sub*))) G4164@ls/false) ((lambda (G4174@t) ((lambda (G4176@ls/false) (if (and G4176@ls/false (apply (lambda (G4178@p? G4179@sub*) (eq? (G2e16@syntax->datum G4178@p?) 'or)) G4176@ls/false)) (apply (lambda (G417c@p? G417d@sub*) ((lambda (G4180@p*) (lambda (G4182@x) (exists (lambda (G4184@p) (G4184@p G4182@x)) G4180@p*))) (map G40d9@subversion-pred G417d@sub*))) G4176@ls/false) ((lambda (G4186@t) ((lambda (G4188@ls/false) (if (and G4188@ls/false (apply (lambda (G418a@p? G418b@sub) (eq? (G2e16@syntax->datum G418a@p?) 'not)) G4188@ls/false)) (apply (lambda (G418e@p? G418f@sub) ((lambda (G4192@p) (lambda (G4194@x) (not (G4192@p G4194@x)))) (G40d9@subversion-pred G418f@sub))) G4188@ls/false) ((lambda (G4196@t) ((lambda (G4198@ls/false) (if (and G4198@ls/false (apply (lambda (G419a@p? G419b@n) (and (eq? (G2e16@syntax->datum G419a@p?) '<=) (G40d7@subversion? G419b@n))) G4198@ls/false)) (apply (lambda (G419e@p? G419f@n) (lambda (G41a2@x) (<= G41a2@x (G2e16@syntax->datum G419f@n)))) G4198@ls/false) ((lambda (G41a4@t) ((lambda (G41a6@ls/false) (if (and G41a6@ls/false (apply (lambda (G41a8@p? G41a9@n) (and (eq? (G2e16@syntax->datum G41a8@p?) '>=) (G40d7@subversion? G41a9@n))) G41a6@ls/false)) (apply (lambda (G41ac@p? G41ad@n) (lambda (G41b0@x) (>= G41b0@x (G2e16@syntax->datum G41ad@n)))) G41a6@ls/false) ((lambda (G41b2@t) ((lambda (G41b4@ls/false) (if G41b4@ls/false (apply (lambda () (G2e10@syntax-violation 'import '"invalid sub-version spec" G40d4@spec G4156@x*)) G41b4@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G41b2@t))) (G2d25@syntax-dispatch G41b2@t '_))) G41a4@t))) (G2d25@syntax-dispatch G41a4@t '(any any)))) G4196@t))) (G2d25@syntax-dispatch G4196@t '(any any)))) G4186@t))) (G2d25@syntax-dispatch G4186@t '(any any)))) G4174@t))) (G2d25@syntax-dispatch G4174@t '(any . each-any)))) G4162@t))) (G2d25@syntax-dispatch G4162@t '(any . each-any)))) G4158@t))) (G2d25@syntax-dispatch G4158@t 'any))) G4156@x*))) (set! G40db@version-pred (lambda (G4106@x*) ((lambda (G4108@t) ((lambda (G410a@ls/false) (if G410a@ls/false (apply (lambda () (lambda (G410c@x) '#t)) G410a@ls/false) ((lambda (G410e@t) ((lambda (G4110@ls/false) (if (and G4110@ls/false (apply (lambda (G4112@c G4113@ver*) (eq? (G2e16@syntax->datum G4112@c) 'and)) G4110@ls/false)) (apply (lambda (G4116@c G4117@ver*) ((lambda (G411a@p*) (lambda (G411c@x) (for-all (lambda (G411e@p) (G411e@p G411c@x)) G411a@p*))) (map G40db@version-pred G4117@ver*))) G4110@ls/false) ((lambda (G4120@t) ((lambda (G4122@ls/false) (if (and G4122@ls/false (apply (lambda (G4124@c G4125@ver*) (eq? (G2e16@syntax->datum G4124@c) 'or)) G4122@ls/false)) (apply (lambda (G4128@c G4129@ver*) ((lambda (G412c@p*) (lambda (G412e@x) (exists (lambda (G4130@p) (G4130@p G412e@x)) G412c@p*))) (map G40db@version-pred G4129@ver*))) G4122@ls/false) ((lambda (G4132@t) ((lambda (G4134@ls/false) (if (and G4134@ls/false (apply (lambda (G4136@c G4137@ver) (eq? (G2e16@syntax->datum G4136@c) 'not)) G4134@ls/false)) (apply (lambda (G413a@c G413b@ver) ((lambda (G413e@p) (lambda (G4140@x) (not (G413e@p G4140@x)))) (G40db@version-pred G413b@ver))) G4134@ls/false) ((lambda (G4142@t) ((lambda (G4144@ls/false) (if G4144@ls/false (apply (lambda (G4146@sub*) ((lambda (G4148@p*) (lambda (G414a@x) ((letrec ((G414c@f (lambda (G414e@p* G414f@x) (if (null? G414e@p*) '#t (if (null? G414f@x) '#f (and ((car G414e@p*) (car G414f@x)) (G414c@f (cdr G414e@p*) (cdr G414f@x)))))))) G414c@f) G4148@p* G414a@x))) (map G40d9@subversion-pred G4146@sub*))) G4144@ls/false) ((lambda (G4152@t) ((lambda (G4154@ls/false) (if G4154@ls/false (apply (lambda () (G2e10@syntax-violation 'import '"invalid version spec" G40d4@spec G4106@x*)) G4154@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G4152@t))) (G2d25@syntax-dispatch G4152@t '_))) G4142@t))) (G2d25@syntax-dispatch G4142@t 'each-any))) G4132@t))) (G2d25@syntax-dispatch G4132@t '(any any)))) G4120@t))) (G2d25@syntax-dispatch G4120@t '(any . each-any)))) G410e@t))) (G2d25@syntax-dispatch G410e@t '(any . each-any)))) G4108@t))) (G2d25@syntax-dispatch G4108@t '()))) G4106@x*))) ((letrec ((G40dc@f (lambda (G40de@x) ((lambda (G40e0@t) ((lambda (G40e2@ls/false) (if G40e2@ls/false (apply (lambda (G40e4@version-spec*) (values '() (G40db@version-pred G40e4@version-spec*))) G40e2@ls/false) ((lambda (G40e6@t) ((lambda (G40e8@ls/false) (if (and G40e8@ls/false (apply (lambda (G40ea@x G40eb@x*) (G400b@idsyn? G40ea@x)) G40e8@ls/false)) (apply (lambda (G40ee@x G40ef@x*) (call-with-values (lambda () (G40dc@f G40ef@x*)) (lambda (G40f4@G40f2 G40f5@G40f3) ((lambda (G40f8@pred G40f9@name) (values (cons (G2e16@syntax->datum G40ee@x) G40f9@name) G40f8@pred)) G40f5@G40f3 G40f4@G40f2)))) G40e8@ls/false) ((lambda (G40fc@t) ((lambda (G40fe@ls/false) (if G40fe@ls/false (apply (lambda () (values '() (lambda (G4100@x) '#t))) G40fe@ls/false) ((lambda (G4102@t) ((lambda (G4104@ls/false) (if G4104@ls/false (apply (lambda () (G2e10@syntax-violation '#f '"invalid import spec" G40d4@spec)) G4104@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G4102@t))) (G2d25@syntax-dispatch G4102@t '_))) G40fc@t))) (G2d25@syntax-dispatch G40fc@t '()))) G40e6@t))) (G2d25@syntax-dispatch G40e6@t '(any . any)))) G40e0@t))) (G2d25@syntax-dispatch G40e0@t '(each-any)))) G40de@x)))) G40dc@f) G40d4@spec))) '#f '#f '#f))) (set! G401b@import-library (lambda (G40c6@spec*) (call-with-values (lambda () (G4019@parse-library-name G40c6@spec*)) (lambda (G40ca@G40c8 G40cb@G40c9) ((lambda (G40ce@pred G40cf@name) (begin (if (null? G40cf@name) (G2e10@syntax-violation 'import '"empty library name" G40c6@spec*) (void)) ((lambda (G40d2@lib) (begin (if (not G40d2@lib) (G2e10@syntax-violation 'import '"cannot find library with required name" G40cf@name) (void)) (if (not (G40ce@pred (G292d@G27a5@library-version G40d2@lib))) (G2e10@syntax-violation 'import '"library does not satisfy version specification" G40c6@spec* G40d2@lib) (void)) ((G2d96@imp-collector) G40d2@lib) (G2931@G27ad@library-subst G40d2@lib))) (G2955@G27f5@find-library-by-name G40cf@name)))) G40cb@G40c9 G40ca@G40c8))))) (set! G401d@get-import (lambda (G4038@spec) ((lambda (G403a@t) ((lambda (G403c@ls/false) (if (and G403c@ls/false (apply (lambda (G403e@x G403f@x*) (not (memq (G2e16@syntax->datum G403e@x) '(for rename except only prefix library)))) G403c@ls/false)) (apply (lambda (G4042@x G4043@x*) (G401b@import-library (cons G4042@x G4043@x*))) G403c@ls/false) ((lambda (G4046@t) ((lambda (G4048@ls/false) (if (and G4048@ls/false (apply (lambda (G404a@rename G404b@isp G404c@old* G404d@new*) (and (eq? (G2e16@syntax->datum G404a@rename) 'rename) (for-all G400b@idsyn? G404c@old*) (for-all G400b@idsyn? G404d@new*))) G4048@ls/false)) (apply (lambda (G4052@rename G4053@isp G4054@old* G4055@new*) ((lambda (G405a@subst G405b@old* G405c@new*) ((lambda (G4060@old-label*) ((lambda (G4062@subst) (G400f@merge-substs (map cons G405c@new* G4060@old-label*) G4062@subst)) (G4015@rem* G405b@old* G405a@subst))) (G4013@find* G405b@old* G405a@subst))) (G401d@get-import G4053@isp) (map G2e16@syntax->datum G4054@old*) (map G2e16@syntax->datum G4055@new*))) G4048@ls/false) ((lambda (G4064@t) ((lambda (G4066@ls/false) (if (and G4066@ls/false (apply (lambda (G4068@except G4069@isp G406a@sym*) (and (eq? (G2e16@syntax->datum G4068@except) 'except) (for-all G400b@idsyn? G406a@sym*))) G4066@ls/false)) (apply (lambda (G406e@except G406f@isp G4070@sym*) ((lambda (G4074@subst) (G4015@rem* (map G2e16@syntax->datum G4070@sym*) G4074@subst)) (G401d@get-import G406f@isp))) G4066@ls/false) ((lambda (G4076@t) ((lambda (G4078@ls/false) (if (and G4078@ls/false (apply (lambda (G407a@only G407b@isp G407c@sym*) (and (eq? (G2e16@syntax->datum G407a@only) 'only) (for-all G400b@idsyn? G407c@sym*))) G4078@ls/false)) (apply (lambda (G4080@only G4081@isp G4082@sym*) ((lambda (G4086@subst G4087@sym*) ((lambda (G408a@sym*) ((lambda (G408c@lab*) (map cons G408a@sym* G408c@lab*)) (G4013@find* G408a@sym* G4086@subst))) (G4017@remove-dups G4087@sym*))) (G401d@get-import G4081@isp) (map G2e16@syntax->datum G4082@sym*))) G4078@ls/false) ((lambda (G408e@t) ((lambda (G4090@ls/false) (if (and G4090@ls/false (apply (lambda (G4092@prefix G4093@isp G4094@p) (and (eq? (G2e16@syntax->datum G4092@prefix) 'prefix) (G400b@idsyn? G4094@p))) G4090@ls/false)) (apply (lambda (G4098@prefix G4099@isp G409a@p) ((lambda (G409e@subst G409f@prefix) (map (lambda (G40a2@x) (cons (string->symbol (string-append G409f@prefix (symbol->string (car G40a2@x)))) (cdr G40a2@x))) G409e@subst)) (G401d@get-import G4099@isp) (symbol->string (G2e16@syntax->datum G409a@p)))) G4090@ls/false) ((lambda (G40a4@t) ((lambda (G40a6@ls/false) (if (and G40a6@ls/false (apply (lambda (G40a8@library G40a9@spec*) (eq? (G2e16@syntax->datum G40a8@library) 'library)) G40a6@ls/false)) (apply (lambda (G40ac@library G40ad@spec*) (G401b@import-library G40ad@spec*)) G40a6@ls/false) ((lambda (G40b0@t) ((lambda (G40b2@ls/false) (if (and G40b2@ls/false (apply (lambda (G40b4@for G40b5@isp G40b6@rest) (eq? (G2e16@syntax->datum G40b4@for) 'for)) G40b2@ls/false)) (apply (lambda (G40ba@for G40bb@isp G40bc@rest) (G401d@get-import G40bb@isp)) G40b2@ls/false) ((lambda (G40c0@t) ((lambda (G40c2@ls/false) (if G40c2@ls/false (apply (lambda (G40c4@spec) (G2e10@syntax-violation 'import '"invalid import spec" G40c4@spec)) G40c2@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G40c0@t))) (G2d25@syntax-dispatch G40c0@t 'any))) G40b0@t))) (G2d25@syntax-dispatch G40b0@t '(any any . any)))) G40a4@t))) (G2d25@syntax-dispatch G40a4@t '(any each-any)))) G408e@t))) (G2d25@syntax-dispatch G408e@t '(any any any)))) G4076@t))) (G2d25@syntax-dispatch G4076@t '(any any . each-any)))) G4064@t))) (G2d25@syntax-dispatch G4064@t '(any any . each-any)))) G4046@t))) (G2d25@syntax-dispatch G4046@t '(any any . #(each (any any)))))) G403a@t))) (G2d25@syntax-dispatch G403a@t '(any . each-any)))) G4038@spec))) (set! G401f@add-imports! (lambda (G4028@imp G4029@h) ((lambda (G402c@subst) (for-each (lambda (G402e@x) ((lambda (G4030@name G4031@label) ((lambda (G4034@t) (if G4034@t ((lambda (G4036@l) (if (not (eq? G4036@l G4031@label)) (G400d@dup-error G4030@name) (void))) G4034@t) (hashtable-set! G4029@h G4030@name G4031@label))) (hashtable-ref G4029@h G4030@name '#f))) (car G402e@x) (cdr G402e@x))) G402c@subst)) (G401d@get-import G4028@imp)))) (lambda (G4020@imp*) ((letrec ((G4022@f (lambda (G4024@imp* G4025@h) (if (null? G4024@imp*) (hashtable-entries G4025@h) (begin (G401f@add-imports! (car G4024@imp*) G4025@h) (G4022@f (cdr G4024@imp*) G4025@h)))))) G4022@f) G4020@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d8e@make-top-rib (lambda (G420c@names G420d@labels) ((lambda (G4210@rib) (begin (vector-for-each (lambda (G4212@name G4213@label) (begin (if (not (symbol? G4212@name)) (error 'make-top-rib '"BUG: not a symbol" G4212@name) (void)) (G2ae7@extend-rib/nc! G4210@rib (G2afe@make-stx G4212@name G2ab0@top-mark* '() '()) G4213@label))) G420c@names G420d@labels) G4210@rib)) (G2ae3@make-empty-rib)))) (set! G2d90@make-collector (lambda () ((lambda (G4216@ls) (lambda G421a ((lambda (G421b) (if (= G421b '0) (apply (lambda () G4216@ls) G421a) (if (= G421b '1) (apply (lambda (G4218@x) (set! G4216@ls (G2aa9@set-cons G4218@x G4216@ls))) G421a) (error 'apply '"invalid arg count")))) (length G421a)))) '()))) (set! G2d92@inv-collector (G26e8@G2616@make-parameter (lambda G421c@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G421e@x) (begin (if (not (procedure? G421e@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G421e@x) (void)) G421e@x)))) (set! G2d94@vis-collector (G26e8@G2616@make-parameter (lambda G4220@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G4222@x) (begin (if (not (procedure? G4222@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G4222@x) (void)) G4222@x)))) (set! G2d96@imp-collector (G26e8@G2616@make-parameter (lambda G4224@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4226@x) (begin (if (not (procedure? G4226@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4226@x) (void)) G4226@x)))) (set! G2d98@chi-library-internal (lambda (G4228@e* G4229@rib G422a@top?) (call-with-values (lambda () (G2d82@chi-body* G4228@e* '() '() '() '() '() '() '() G4229@rib G422a@top?)) (lambda (G4236@G422e G4237@G422f G4238@G4230 G4239@G4231 G423a@G4232 G423b@G4233 G423c@G4234 G423d@G4235) ((lambda (G4246@exp* G4247@_kwd* G4248@mod** G4249@rhs* G424a@lex* G424b@mr G424c@r G424d@e*) (values (append (apply append (reverse G4248@mod**)) G424d@e*) G424c@r G424b@mr (reverse G424a@lex*) (reverse G4249@rhs*) G4246@exp*)) G423d@G4235 G423c@G4234 G423b@G4233 G423a@G4232 G4239@G4231 G4238@G4230 G4237@G422f G4236@G422e))))) (set! G2d9a@chi-interaction-expr (lambda (G4256@e G4257@rib G4258@r) (call-with-values (lambda () (G2d82@chi-body* (list G4256@e) G4258@r G4258@r '() '() '() '() '() G4257@rib '#t)) (lambda (G4264@G425c G4265@G425d G4266@G425e G4267@G425f G4268@G4260 G4269@G4261 G426a@G4262 G426b@G4263) ((lambda (G4274@_exp* G4275@_kwd* G4276@mod** G4277@rhs* G4278@lex* G4279@mr G427a@r G427b@e*) ((lambda (G4284@e*) ((lambda (G4286@e) (values G4286@e G427a@r)) (if (null? G4284@e*) (G2a96@G2a08@build-void) (if (null? (cdr G4284@e*)) (car G4284@e*) (G2a95@G2a06@build-sequence '#f G4284@e*))))) (G2d57@expand-interaction-rhs*/init* (reverse G4278@lex*) (reverse G4277@rhs*) (append (apply append (reverse G4276@mod**)) G427b@e*) G427a@r G4279@mr))) G426b@G4263 G426a@G4262 G4269@G4261 G4268@G4260 G4267@G425f G4266@G425e G4265@G425d G4264@G425c))))) (set! G2d9c@library-body-expander (lambda (G4288@name G4289@main-exp* G428a@imp* G428b@b* G428c@top?) ((lambda (G4293@itc) (begin (set! G4293@itc (G2d90@make-collector)) (begin (if (symbol-value 'debug-expand) (format '#t '"library-body-expander=~a\n" G428b@b*) (void)) ((lambda (G4298@G4294 G4299@G4295 G429a@G4296 G429b@G4297) ((lambda (G42a0@swap) (dynamic-wind G42a0@swap (lambda () (call-with-values (lambda () (G2d8c@parse-import-spec* G428a@imp*)) (lambda (G42a4@G42a2 G42a5@G42a3) ((lambda (G42a8@subst-labels G42a9@subst-names) ((lambda (G42ac@rib) ((lambda (G42af@wrap) (begin (set! G42af@wrap (lambda (G431b@x) (G2afe@make-stx G431b@x G2ab0@top-mark* (list G42ac@rib) '()))) ((lambda (G42b0@b* G42b1@main-exp* G42b2@rtc G42b3@vtc) (begin (if (symbol-value 'debug-expand) (format '#t '"b[i]=~a\n" (G2b00@stx-expr (car G42b0@b*))) (void)) ((lambda (G42bc@G42b8 G42bd@G42b9 G42be@G42ba G42bf@G42bb) ((lambda (G42c4@swap) (dynamic-wind G42c4@swap (lambda () (call-with-values (lambda () (G2d98@chi-library-internal G42b0@b* G42ac@rib G428c@top?)) (lambda (G42cc@G42c6 G42cd@G42c7 G42ce@G42c8 G42cf@G42c9 G42d0@G42ca G42d1@G42cb) ((lambda (G42d8@internal-exp* G42d9@rhs* G42da@lex* G42db@mr G42dc@r G42dd@init*) (begin (if (symbol-value 'debug-expand) (format '#t '"b[j]=~a init*=~a r=~a mr=~a lex=~a rhs*=~a internal-exp~a\n" (G2b00@stx-expr (car G42b0@b*)) G42dd@init* G42dc@r G42db@mr G42da@lex* (G2b00@stx-expr (cdar G42d9@rhs*)) G42d8@internal-exp*) (void)) (call-with-values (lambda () (G2d86@parse-exports (append G42b1@main-exp* G42d8@internal-exp*))) (lambda (G42e6@G42e4 G42e7@G42e5) ((lambda (G42ea@exp-id* G42eb@exp-name*) (begin (G2aeb@seal-rib! G42ac@rib) (if (symbol-value 'debug-expand) (format '#t '"before rhs*=~a\n" G42d9@rhs*) (void)) ((lambda (G42ee@init*) ((lambda (G42f0@rhs*) ((lambda () (begin (G2aed@unseal-rib! G42ac@rib) ((lambda (G42f2@loc* G42f3@export-subst) ((lambda (G42f7@errstr) (begin (set! G42f7@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G2dfc@make-export-env/macros G42da@lex* G42f2@loc* G42dc@r)) (lambda (G42fb@G42f8 G42fc@G42f9 G42fd@G42fa) ((lambda (G4301@macro* G4302@global* G4303@export-env) (begin (for-each (lambda (G4307@s) ((lambda (G4309@name G430a@label) ((lambda (G430d@p) (if G430d@p ((lambda (G430f@b) ((lambda (G4311@type) (if (eq? G4311@type 'mutable) (G2e10@syntax-violation 'export G42f7@errstr G4309@name) (void))) (car G430f@b))) (cdr G430d@p)) (void))) (assq G430a@label G4303@export-env))) (car G4307@s) (cdr G4307@s))) G42f3@export-subst) ((lambda (G4313@invoke-body G4314@invoke-definitions) (values (G4293@itc) (G42b2@rtc) (G42b3@vtc) (G2a95@G2a06@build-sequence '#f (append G4314@invoke-definitions (list G4313@invoke-body))) G4301@macro* G42f3@export-subst G4303@export-env)) (G2a98@G2a0c@build-letrec* '#f G42da@lex* G42f0@rhs* (G2df8@build-exports G4302@global* G42ee@init*)) (map G2a91@G2963@build-global-define (map cdr G4302@global*))))) G42fd@G42fa G42fc@G42f9 G42fb@G42f8))))) '#f)) (map G2ab6@gen-global G42da@lex*) (G2dfa@make-export-subst G42eb@exp-name* G42ea@exp-id*)))))) (G2d59@chi-rhs* G42d9@rhs* G42dc@r G42db@mr))) (G2d45@chi-expr* G42dd@init* G42dc@r G42db@mr)))) G42e7@G42e5 G42e6@G42e4))))) G42d1@G42cb G42d0@G42ca G42cf@G42c9 G42ce@G42c8 G42cd@G42c7 G42cc@G42c6)))) G42c4@swap)) (lambda () (begin ((lambda (G4317@t) (begin (G42bc@G42b8 G42be@G42ba) (set! G42be@G42ba G4317@t))) (G42bc@G42b8)) ((lambda (G4319@t) (begin (G42bd@G42b9 G42bf@G42bb) (set! G42bf@G42bb G4319@t))) (G42bd@G42b9)))))) G2d92@inv-collector G2d94@vis-collector G42b2@rtc G42b3@vtc))) (map G42af@wrap G428b@b*) (map G42af@wrap G4289@main-exp*) (G2d90@make-collector) (G2d90@make-collector)))) '#f)) (G2d8e@make-top-rib G42a9@subst-names G42a8@subst-labels))) G42a5@G42a3 G42a4@G42a2)))) G42a0@swap)) (lambda () (begin ((lambda (G431d@t) (begin (G4298@G4294 G429a@G4296) (set! G429a@G4296 G431d@t))) (G4298@G4294)) ((lambda (G431f@t) (begin (G4299@G4295 G429b@G4297) (set! G429b@G4297 G431f@t))) (G4299@G4295)))))) G2d96@imp-collector G2e1e@top-level-context G4293@itc '#f)))) '#f))) (set! G2d9e@core-library-expander (lambda (G4321@e G4322@verify-name) (call-with-values (lambda () (G2d8a@parse-library G4321@e)) (lambda (G4329@G4325 G432a@G4326 G432b@G4327 G432c@G4328) ((lambda (G4331@b* G4332@imp* G4333@exp* G4334@name*) (call-with-values (lambda () (G2d88@parse-library-name G4334@name*)) (lambda (G433b@G4339 G433c@G433a) ((lambda (G433f@ver G4340@name) (begin (G4322@verify-name G4340@name) (call-with-values (lambda () (G2d9c@library-body-expander G4340@name G4333@exp* G4332@imp* G4331@b* '#f)) (lambda (G434a@G4343 G434b@G4344 G434c@G4345 G434d@G4346 G434e@G4347 G434f@G4348 G4350@G4349) ((lambda (G4358@export-env G4359@export-subst G435a@visit-code G435b@invoke-code G435c@visit-req* G435d@invoke-req* G435e@imp*) (values G4340@name G433f@ver G435e@imp* G435d@invoke-req* G435c@visit-req* G435b@invoke-code G435a@visit-code G4359@export-subst G4358@export-env)) G4350@G4349 G434f@G4348 G434e@G4347 G434d@G4346 G434c@G4345 G434b@G4344 G434a@G4343))))) G433c@G433a G433b@G4339)))) G432c@G4328 G432b@G4327 G432a@G4326 G4329@G4325))))) (set! G2da0@parse-top-level-program (lambda (G4366@e*) ((lambda (G4368@t) ((lambda (G436a@ls/false) (if (and G436a@ls/false (apply (lambda (G436c@import G436d@imp* G436e@b*) (eq? (G2e16@syntax->datum G436c@import) 'import)) G436a@ls/false)) (apply (lambda (G4372@import G4373@imp* G4374@b*) (values G4373@imp* G4374@b*)) G436a@ls/false) ((lambda (G4378@t) ((lambda (G437a@ls/false) (if (and G437a@ls/false (apply (lambda (G437c@import G437d@x G437e@y) (eq? (G2e16@syntax->datum G437c@import) 'import)) G437a@ls/false)) (apply (lambda (G4382@import G4383@x G4384@y) (G2e10@syntax-violation 'expander '"invalid syntax of top-level program" (G2b2e@syntax-car G4366@e*))) G437a@ls/false) ((lambda (G4388@t) ((lambda (G438a@ls/false) (if G438a@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G438a@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G4388@t))) (G2d25@syntax-dispatch G4388@t '_))) G4378@t))) (G2d25@syntax-dispatch G4378@t '((any . any) . any)))) G4368@t))) (G2d25@syntax-dispatch G4368@t '((any . each-any) . each-any)))) G4366@e*))) (set! G2da2@top-level-expander (lambda (G438c@e*) (call-with-values (lambda () (G2da0@parse-top-level-program G438c@e*)) (lambda (G4390@G438e G4391@G438f) ((lambda (G4394@b* G4395@imp*) (call-with-values (lambda () (G2d9c@library-body-expander '() '() G4395@imp* G4394@b* '#t)) (lambda (G439f@G4398 G43a0@G4399 G43a1@G439a G43a2@G439b G43a3@G439c G43a4@G439d G43a5@G439e) ((lambda (G43ad@export-env G43ae@export-subst G43af@visit-code G43b0@invoke-code G43b1@visit-req* G43b2@invoke-req* G43b3@imp*) (values G43b2@invoke-req* G43b0@invoke-code)) G43a5@G439e G43a4@G439d G43a3@G439c G43a2@G439b G43a1@G439a G43a0@G4399 G439f@G4398)))) G4391@G438f G4390@G438e))))) (set! G2da8@G2da3 (make-record-type-descriptor 'env '#f 'G2da6 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2daa@G2da5 '#f) (set! G2dac@G2da4 (make-record-constructor-descriptor G2da8@G2da3 '#f G2daa@G2da5)) (set! G2daf@env? (record-predicate G2da8@G2da3)) (set! G2db1@make-env (record-constructor G2dac@G2da4)) (set! G2db3@env-names (record-accessor G2da8@G2da3 '0)) (set! G2db5@env-labels (record-accessor G2da8@G2da3 '1)) (set! G2db7@env-itc (record-accessor G2da8@G2da3 '2)) (set! G2db9@set-env-names! (record-mutator G2da8@G2da3 '0)) (set! G2dbb@set-env-labels! (record-mutator G2da8@G2da3 '1)) (set! G2dbd@set-env-itc! (record-mutator G2da8@G2da3 '2)) (set! G2dbf@rp (G26e5@G2610@make-record-printer 'env (lambda (G43bb@x G43bc@p G43bd@wr) (display '"#<environment>" G43bc@p)))) (set! G2dc5@G2dc0 (make-record-type-descriptor 'interaction-env '#f 'G2dc3 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G2dc7@G2dc2 '#f) (set! G2dc9@G2dc1 (make-record-constructor-descriptor G2dc5@G2dc0 '#f G2dc7@G2dc2)) (set! G2dcc@interaction-env? (record-predicate G2dc5@G2dc0)) (set! G2dce@make-interaction-env (record-constructor G2dc9@G2dc1)) (set! G2dd0@interaction-env-rib (record-accessor G2dc5@G2dc0 '0)) (set! G2dd2@interaction-env-r (record-accessor G2dc5@G2dc0 '1)) (set! G2dd4@interaction-env-locs (record-accessor G2dc5@G2dc0 '2)) (set! G2dd6@set-interaction-env-rib! (record-mutator G2dc5@G2dc0 '0)) (set! G2dd8@set-interaction-env-r! (record-mutator G2dc5@G2dc0 '1)) (set! G2dda@set-interaction-env-locs! (record-mutator G2dc5@G2dc0 '2)) (set! G2ddc@rp (G26e5@G2610@make-record-printer 'interaction-env (lambda (G43c1@x G43c2@p G43c3@wr) (display '"#<environment>" G43c2@p)))) (set! G2dde@interaction-environment-symbols (lambda () (G2de6@environment-symbols (G2e1c@interaction-environment)))) (set! G2de0@environment-bindings (lambda (G43c7@e) (vector->list (vector-map (lambda (G43c9@name G43ca@label) (G2de2@parse-binding (cons G43c9@name (G295b@G2801@imported-label->binding G43ca@label)))) (G2db3@env-names G43c7@e) (G2db5@env-labels G43c7@e))))) (set! G2de2@parse-binding (lambda (G43cd@b) (cons (car G43cd@b) ((lambda (G43cf@t) (if (memv G43cf@t '(core-prim global)) 'procedure (if (memv G43cf@t '(core-macro macro global-macro)) 'syntax (if (memv G43cf@t '($core-rtd)) 'record (if (eq? (car G43cd@b) (cadr G43cd@b)) 'syntax 'unknown))))) (cadr G43cd@b))))) (set! G2de4@environment? (lambda (G43d1@x) (or (G2daf@env? G43d1@x) (G2dcc@interaction-env? G43d1@x)))) (set! G2de6@environment-symbols (lambda (G43d3@x) (if (G2daf@env? G43d3@x) (vector->list (G2db3@env-names G43d3@x)) (if (G2dcc@interaction-env? G43d3@x) (map values (G2acf@rib-sym* (G2dd0@interaction-env-rib G43d3@x))) (assertion-violation 'environment-symbols '"not an environment" G43d3@x))))) (set! G2de8@environment (lambda G43d5@imp* ((lambda (G43d7@itc) ((lambda (G43db@G43d9 G43dc@G43da) ((lambda (G43df@swap) (dynamic-wind G43df@swap (lambda () (call-with-values (lambda () (G2d8c@parse-import-spec* G43d5@imp*)) (lambda (G43e3@G43e1 G43e4@G43e2) ((lambda (G43e7@subst-labels G43e8@subst-names) (G2db1@make-env G43e8@subst-names G43e7@subst-labels G43d7@itc)) G43e4@G43e2 G43e3@G43e1)))) G43df@swap)) (lambda () ((lambda (G43eb@t) (begin (G43db@G43d9 G43dc@G43da) (set! G43dc@G43da G43eb@t))) (G43db@G43d9))))) G2d96@imp-collector G43d7@itc)) (G2d90@make-collector)))) (set! G2dea@null-environment (lambda (G43ed@n) (begin (if (not (eqv? G43ed@n '5)) (assertion-violation 'null-environment '"not 5" G43ed@n) (void)) (G2de8@environment '(psyntax null-environment-5))))) (set! G2dec@scheme-report-environment (lambda (G43ef@n) (begin (if (not (eqv? G43ef@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G43ef@n) (void)) (G2de8@environment '(psyntax scheme-report-environment-5))))) (set! G2dee@expand (lambda (G43f1@x G43f2@env) (if (G2daf@env? G43f2@env) ((lambda (G43f5@rib) ((lambda (G43f7@x G43f8@itc G43f9@rtc G43fa@vtc) ((lambda (G43ff@x) (begin (G2aeb@seal-rib! G43f5@rib) (values G43ff@x (G43f9@rtc)))) ((lambda (G4409@G4401 G440a@G4402 G440b@G4403 G440c@G4404 G440d@G4405 G440e@G4406 G440f@G4407 G4410@G4408) ((lambda (G4419@swap) (dynamic-wind G4419@swap (lambda () (G2d49@chi-expr G43f7@x '() '())) G4419@swap)) (lambda () (begin ((lambda (G441b@t) (begin (G4409@G4401 G440d@G4405) (set! G440d@G4405 G441b@t))) (G4409@G4401)) ((lambda (G441d@t) (begin (G440a@G4402 G440e@G4406) (set! G440e@G4406 G441d@t))) (G440a@G4402)) ((lambda (G441f@t) (begin (G440b@G4403 G440f@G4407) (set! G440f@G4407 G441f@t))) (G440b@G4403)) ((lambda (G4421@t) (begin (G440c@G4404 G4410@G4408) (set! G4410@G4408 G4421@t))) (G440c@G4404)))))) G2e1e@top-level-context G2d92@inv-collector G2d94@vis-collector G2d96@imp-collector '#f G43f9@rtc G43fa@vtc G43f8@itc))) (G2afe@make-stx G43f1@x G2ab0@top-mark* (list G43f5@rib) '()) (G2db7@env-itc G43f2@env) (G2d90@make-collector) (G2d90@make-collector))) (G2d8e@make-top-rib (G2db3@env-names G43f2@env) (G2db5@env-labels G43f2@env))) (if (G2dcc@interaction-env? G43f2@env) ((lambda (G4423@rib G4424@r G4425@rtc) ((lambda (G4429@x) (call-with-values (lambda () ((lambda (G4435@G442d G4436@G442e G4437@G442f G4438@G4430 G4439@G4431 G443a@G4432 G443b@G4433 G443c@G4434) ((lambda (G4445@swap) (dynamic-wind G4445@swap (lambda () (G2d9a@chi-interaction-expr G4429@x G4423@rib G4424@r)) G4445@swap)) (lambda () (begin ((lambda (G4447@t) (begin (G4435@G442d G4439@G4431) (set! G4439@G4431 G4447@t))) (G4435@G442d)) ((lambda (G4449@t) (begin (G4436@G442e G443a@G4432) (set! G443a@G4432 G4449@t))) (G4436@G442e)) ((lambda (G444b@t) (begin (G4437@G442f G443b@G4433) (set! G443b@G4433 G444b@t))) (G4437@G442f)) ((lambda (G444d@t) (begin (G4438@G4430 G443c@G4434) (set! G443c@G4434 G444d@t))) (G4438@G4430)))))) G2e1e@top-level-context G2d92@inv-collector G2d94@vis-collector G2d96@imp-collector G43f2@env G4425@rtc (G2d90@make-collector) (G2d90@make-collector))) (lambda (G444f@G442b G4450@G442c) ((lambda (G4453@r^ G4454@e) (begin (G2dd8@set-interaction-env-r! G43f2@env G4453@r^) (values G4454@e (G4425@rtc)))) G4450@G442c G444f@G442b)))) (G2afe@make-stx G43f1@x G2ab0@top-mark* (list G4423@rib) '()))) (G2dd0@interaction-env-rib G43f2@env) (G2dd2@interaction-env-r G43f2@env) (G2d90@make-collector)) (assertion-violation 'expand '"not an environment" G43f2@env))))) (set! G2df0@eval (lambda (G4457@x G4458@env) (begin (if (not (G2de4@environment? G4458@env)) (error 'eval '"not an environment" G4458@env) (void)) (call-with-values (lambda () (G2dee@expand G4457@x G4458@env)) (lambda (G445d@G445b G445e@G445c) ((lambda (G4461@invoke-req* G4462@x) (begin (for-each G295c@G2803@invoke-library G4461@invoke-req*) (eval-core (G273c@G26f4@expanded->core G4462@x)))) G445e@G445c G445d@G445b)))))) (set! G2df2@library-expander (lambda G44ca ((lambda (G44cb) (if (= G44cb '3) (apply (lambda (G4465@x G4466@filename G4467@verify-name) ((lambda (G446c@build-visit-code G446e@visit!) (begin (set! G446c@build-visit-code (lambda (G44b8@macro*) (if (null? G44b8@macro*) (G2a96@G2a08@build-void) (G2a95@G2a06@build-sequence '#f (map (lambda (G44ba@x) ((lambda (G44bc@loc G44bd@src) (list 'set! G44bc@loc G44bd@src)) (car G44ba@x) (cddr G44ba@x))) G44b8@macro*))))) (set! G446e@visit! (lambda (G44b0@macro*) (for-each (lambda (G44b2@x) ((lambda (G44b4@loc G44b5@proc) (set-symbol-value! G44b4@loc G44b5@proc)) (car G44b2@x) (cadr G44b2@x))) G44b0@macro*))) (call-with-values (lambda () (G2d9e@core-library-expander G4465@x G4467@verify-name)) (lambda (G4478@G446f G4479@G4470 G447a@G4471 G447b@G4472 G447c@G4473 G447d@G4474 G447e@G4475 G447f@G4476 G4480@G4477) ((lambda (G448a@export-env G448b@export-subst G448c@macro* G448d@invoke-code G448e@vis* G448f@inv* G4490@imp* G4491@ver G4492@name) ((lambda (G449c@id G449d@name G449e@ver G449f@imp* G44a0@vis* G44a1@inv* G44a2@visit-proc G44a3@invoke-proc G44a4@visit-code G44a5@invoke-code) (begin (G295a@G27ff@install-library G449c@id G449d@name G449e@ver G449f@imp* G44a0@vis* G44a1@inv* G448b@export-subst G448a@export-env G44a2@visit-proc G44a3@invoke-proc G44a4@visit-code G44a5@invoke-code '#t G4466@filename) (values G449c@id G449d@name G449e@ver G449f@imp* G44a0@vis* G44a1@inv* G44a5@invoke-code G44a4@visit-code G448b@export-subst G448a@export-env))) (gensym) G4492@name G4491@ver (map G2960@G280b@library-spec G4490@imp*) (map G2960@G280b@library-spec G448e@vis*) (map G2960@G280b@library-spec G448f@inv*) (lambda () (G446e@visit! G448c@macro*)) (lambda () (eval-core (G273c@G26f4@expanded->core G448d@invoke-code))) (G446c@build-visit-code G448c@macro*) G448d@invoke-code)) G4480@G4477 G447f@G4476 G447e@G4475 G447d@G4474 G447c@G4473 G447b@G4472 G447a@G4471 G4479@G4470 G4478@G446f))))) '#f '#f)) G44ca) (if (= G44cb '2) (apply (lambda (G44c0@x G44c1@filename) (G2df2@library-expander G44c0@x G44c1@filename (lambda (G44c4@x) (values)))) G44ca) (if (= G44cb '1) (apply (lambda (G44c6@x) (G2df2@library-expander G44c6@x '#f (lambda (G44c8@x) (values)))) G44ca) (error 'apply '"invalid arg count"))))) (length G44ca)))) (set! G2df4@boot-library-expand (lambda (G44cc@x) (call-with-values (lambda () (G2df2@library-expander G44cc@x)) (lambda (G44d8@G44ce G44d9@G44cf G44da@G44d0 G44db@G44d1 G44dc@G44d2 G44dd@G44d3 G44de@G44d4 G44df@G44d5 G44e0@G44d6 G44e1@G44d7) ((lambda (G44ec@export-env G44ed@export-subst G44ee@visit-code G44ef@invoke-code G44f0@inv* G44f1@vis* G44f2@imp* G44f3@ver G44f4@name G44f5@id) (values G44f4@name G44ef@invoke-code G44ed@export-subst G44ec@export-env)) G44e1@G44d7 G44e0@G44d6 G44df@G44d5 G44de@G44d4 G44dd@G44d3 G44dc@G44d2 G44db@G44d1 G44da@G44d0 G44d9@G44cf G44d8@G44ce))))) (set! G2df6@rev-map-append (lambda (G4500@f G4501@ls G4502@ac) (if (null? G4501@ls) G4502@ac (G2df6@rev-map-append G4500@f (cdr G4501@ls) (cons (G4500@f (car G4501@ls)) G4502@ac))))) (set! G2df8@build-exports (lambda (G4506@lex*+loc* G4507@init*) (G2a95@G2a06@build-sequence '#f (cons (G2a96@G2a08@build-void) (G2df6@rev-map-append (lambda (G450a@x) (list 'set! (cdr G450a@x) (car G450a@x))) G4506@lex*+loc* G4507@init*))))) (set! G2dfa@make-export-subst (lambda (G450c@name* G450d@id*) (map (lambda (G4510@name G4511@id) ((lambda (G4514@label) (begin (if (not G4514@label) (G2e10@syntax-violation '#f '"cannot export unbound identifier" G4511@id) (void)) (cons G4510@name G4514@label))) (G2b4e@id->label G4511@id))) G450c@name* G450d@id*))) (set! G2dfc@make-export-env/macros (lambda (G4516@lex* G4517@loc* G4518@r) ((lambda (G451d@lookup) (begin (set! G451d@lookup (lambda (G453a@x) ((letrec ((G453c@f (lambda (G453e@x G453f@lex* G4540@loc*) (if (pair? G453f@lex*) (if (eq? G453e@x (car G453f@lex*)) (car G4540@loc*) (G453c@f G453e@x (cdr G453f@lex*) (cdr G4540@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G453c@f) G453a@x G4516@lex* G4517@loc*))) ((letrec ((G451e@f (lambda (G4520@r G4521@env G4522@global* G4523@macro*) (if (null? G4520@r) (values G4521@env G4522@global* G4523@macro*) ((lambda (G4528@x) ((lambda (G452a@label G452b@b) ((lambda (G452e@t) (if (memv G452e@t '(lexical)) ((lambda (G4530@v) ((lambda (G4532@loc G4533@type) (G451e@f (cdr G4520@r) (cons (cons* G452a@label G4533@type G4532@loc) G4521@env) (cons (cons (G2cb1@lexical-var G4530@v) G4532@loc) G4522@global*) G4523@macro*)) (G451d@lookup (G2cb1@lexical-var G4530@v)) (if (G2cb3@lexical-mutable? G4530@v) 'mutable 'global))) (G2b58@binding-value G452b@b)) (if (memv G452e@t '(local-macro)) ((lambda (G4536@loc) (G451e@f (cdr G4520@r) (cons (cons* G452a@label 'global-macro G4536@loc) G4521@env) G4522@global* (cons (cons G4536@loc (G2b58@binding-value G452b@b)) G4523@macro*))) (gensym)) (if (memv G452e@t '(local-macro!)) ((lambda (G4538@loc) (G451e@f (cdr G4520@r) (cons (cons* G452a@label 'global-macro! G4538@loc) G4521@env) G4522@global* (cons (cons G4538@loc (G2b58@binding-value G452b@b)) G4523@macro*))) (gensym)) (if (memv G452e@t '($rtd $module)) (G451e@f (cdr G4520@r) (cons G4528@x G4521@env) G4522@global* G4523@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2b56@binding-type G452b@b) (G2b58@binding-value G452b@b))))))) (G2b56@binding-type G452b@b))) (car G4528@x) (cdr G4528@x))) (car G4520@r)))))) G451e@f) G4518@r '() '() '()))) '#f))) (set! G2dfe@generate-temporaries (lambda (G4544@ls) ((lambda (G4546@t) ((lambda (G4548@ls/false) (if G4548@ls/false (apply (lambda (G454a@ls) (map (lambda (G454c@x) (G2afe@make-stx ((lambda (G454e@x) (if (or (symbol? G454e@x) (string? G454e@x)) (gensym G454e@x) (gensym 't))) (G2e16@syntax->datum G454c@x)) G2ab0@top-mark* '() '())) G454a@ls)) G4548@ls/false) ((lambda (G4550@t) ((lambda (G4552@ls/false) (if G4552@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G4552@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G4550@t))) (G2d25@syntax-dispatch G4550@t '_))) G4546@t))) (G2d25@syntax-dispatch G4546@t 'each-any))) G4544@ls))) (set! G2e00@free-identifier=? (lambda (G4554@x G4555@y) (if (G2b34@id? G4554@x) (if (G2b34@id? G4555@y) (G2b3c@free-id=? G4554@x G4555@y) (assertion-violation 'free-identifier=? '"not an identifier" G4555@y)) (assertion-violation 'free-identifier=? '"not an identifier" G4554@x)))) (set! G2e02@bound-identifier=? (lambda (G4558@x G4559@y) (if (G2b34@id? G4558@x) (if (G2b34@id? G4559@y) (G2b3a@bound-id=? G4558@x G4559@y) (assertion-violation 'bound-identifier=? '"not an identifier" G4559@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G4558@x)))) (set! G2e04@make-source-condition (lambda (G455c@x) ((lambda (G4566@G4561 G4568@G4563 G456a@G4562 G456d@G4560 G456f@make-source-condition G4571@G455e G4573@G455f G4575@source-condition? G4577@source-filename G4579@source-character) (begin (set! G4566@G4561 (make-record-type-descriptor '&source-information G49b4@G4707@&condition-rtd 'G4564 '#f '#f '#((immutable file-name) (immutable character)))) (set! G4568@G4563 '#f) (set! G456a@G4562 (make-record-constructor-descriptor G4566@G4561 G49b5@G4709@&condition-rcd G4568@G4563)) (set! G456d@G4560 (record-predicate G4566@G4561)) (set! G456f@make-source-condition (record-constructor G456a@G4562)) (set! G4571@G455e (record-accessor G4566@G4561 '0)) (set! G4573@G455f (record-accessor G4566@G4561 '1)) (set! G4575@source-condition? (condition-predicate G4566@G4561)) (set! G4577@source-filename (condition-accessor G4566@G4561 G4571@G455e)) (set! G4579@source-character (condition-accessor G4566@G4561 G4573@G455f)) (if (pair? G455c@x) (G456f@make-source-condition (car G455c@x) (cdr G455c@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2e06@extract-position-condition (lambda (G457a@x) (G2e04@make-source-condition (G2e08@expression-position G457a@x)))) (set! G2e08@expression-position (lambda (G457c@x) (and (G2afc@stx? G457c@x) ((lambda (G457e@x) (and (G26dd@G2600@annotation? G457e@x) (G26de@G2602@annotation-source G457e@x))) (G2b00@stx-expr G457c@x))))) (set! G2e0a@assertion-error (lambda (G4580@expr G4581@pos) (raise (condition (G49e4@G47c7@make-assertion-violation) (G49f6@G47f7@make-who-condition 'assert) (G49ba@G475a@make-message-condition '"assertion failed") (G49ec@G47dd@make-irritants-condition (list G4580@expr)) (G2e04@make-source-condition G4581@pos))))) (set! G2e0c@syntax-error (lambda (G4584@x . G4586@args) (begin (if (not (for-all string? G4586@args)) (assertion-violation 'syntax-error '"invalid argument" G4586@args) (void)) (raise (condition (G49ba@G475a@make-message-condition (if (null? G4586@args) '"invalid syntax" (apply string-append G4586@args))) (G4a18@G4851@make-syntax-violation (G2e16@syntax->datum G4584@x) '#f) (G2e06@extract-position-condition G4584@x)))))) (set! G2e0e@syntax-violation* (lambda (G4588@who G4589@msg G458a@form G458b@condition-object) (begin (if (not (string? G4589@msg)) (assertion-violation 'syntax-violation '"message is not a string" G4589@msg) (void)) ((lambda (G4590@who) (raise (condition (if G4590@who (G49f6@G47f7@make-who-condition G4590@who) (condition)) (G49ba@G475a@make-message-condition G4589@msg) G458b@condition-object (G2e06@extract-position-condition G458a@form)))) (if (or (string? G4588@who) (symbol? G4588@who)) G4588@who (if (not G4588@who) ((lambda (G4592@t) ((lambda (G4594@ls/false) (if (and G4594@ls/false (apply (lambda (G4596@id) (G2b34@id? G4596@id)) G4594@ls/false)) (apply (lambda (G4598@id) (G2e16@syntax->datum G4598@id)) G4594@ls/false) ((lambda (G459a@t) ((lambda (G459c@ls/false) (if (and G459c@ls/false (apply (lambda (G459e@id G459f@rest) (G2b34@id? G459e@id)) G459c@ls/false)) (apply (lambda (G45a2@id G45a3@rest) (G2e16@syntax->datum G45a2@id)) G459c@ls/false) ((lambda (G45a6@t) ((lambda (G45a8@ls/false) (if G45a8@ls/false (apply (lambda () '#f) G45a8@ls/false) (G2e10@syntax-violation '#f '"invalid syntax" G45a6@t))) (G2d25@syntax-dispatch G45a6@t '_))) G459a@t))) (G2d25@syntax-dispatch G459a@t '(any . any)))) G4592@t))) (G2d25@syntax-dispatch G4592@t 'any))) G458a@form) (assertion-violation 'syntax-violation '"invalid who argument" G4588@who))))))) (set! G2e10@syntax-violation (lambda G45b8 ((lambda (G45b9) (if (= G45b9 '3) (apply (lambda (G45aa@who G45ab@msg G45ac@form) (G2e10@syntax-violation G45aa@who G45ab@msg G45ac@form '#f)) G45b8) (if (= G45b9 '4) (apply (lambda (G45b0@who G45b1@msg G45b2@form G45b3@subform) (G2e0e@syntax-violation* G45b0@who G45b1@msg G45b2@form (G4a18@G4851@make-syntax-violation (G2e16@syntax->datum G45b2@form) (G2e16@syntax->datum G45b3@subform)))) G45b8) (error 'apply '"invalid arg count")))) (length G45b8)))) (set! G2e12@identifier? (lambda (G45ba@x) (G2b34@id? G45ba@x))) (set! G2e14@datum->syntax (lambda (G45bc@id G45bd@datum) (if (G2b34@id? G45bc@id) (G2b12@datum->stx G45bc@id G45bd@datum) (assertion-violation 'datum->syntax '"not an identifier" G45bc@id)))) (set! G2e16@syntax->datum (lambda (G45c0@x) (G2b4a@stx->datum G45c0@x))) (set! G2e18@compile-r6rs-top-level (lambda (G45c2@x*) (begin (if (symbol-value 'debug-expand) (format '#t '"x*=~a\n" G45c2@x*) (void)) (call-with-values (lambda () (G2da2@top-level-expander G45c2@x*)) (lambda (G45c6@G45c4 G45c7@G45c5) ((lambda (G45ca@invoke-code G45cb@lib*) (lambda () (begin (for-each G295c@G2803@invoke-library G45cb@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G273c@G26f4@expanded->core G45ca@invoke-code)) (void)) (eval-core (G273c@G26f4@expanded->core G45ca@invoke-code))))) G45c7@G45c5 G45c6@G45c4)))))) (set! G2e1a@pre-compile-r6rs-top-level (lambda (G45ce@x*) (call-with-values (lambda () (G2da2@top-level-expander G45ce@x*)) (lambda (G45d2@G45d0 G45d3@G45d1) ((lambda (G45d6@invoke-code G45d7@lib*) (begin (for-each G295c@G2803@invoke-library G45d7@lib*) (G26e6@G2612@compile-core (G273c@G26f4@expanded->core G45d6@invoke-code)))) G45d3@G45d1 G45d2@G45d0))))) (set! G2e1c@interaction-environment ((lambda (G45da@the-env) (lambda () (or G45da@the-env ((lambda (G45dc@lib G45dd@rib) (begin ((lambda (G45e0@subst) (begin (G2ad9@set-rib-sym*! G45dd@rib (map car G45e0@subst)) (G2adb@set-rib-mark**! G45dd@rib (map (lambda (G45e2@x) G2ab0@top-mark*) G45e0@subst)) (G2add@set-rib-label*! G45dd@rib (map cdr G45e0@subst)))) (G2931@G27ad@library-subst G45dc@lib)) ((lambda (G45e4@env) (begin (set! G45da@the-env G45e4@env) G45e4@env)) (G2dce@make-interaction-env G45dd@rib '() '())))) (G2955@G27f5@find-library-by-name '(mosh interaction)) (G2ae3@make-empty-rib))))) '#f)) (set! G2e1e@top-level-context (G26e8@G2616@make-parameter '#f)) (begin (set! G46f2@G2e1e@top-level-context G2e1e@top-level-context) (set! G46f1@G2e1c@interaction-environment G2e1c@interaction-environment) (set! G46f0@G2e1a@pre-compile-r6rs-top-level G2e1a@pre-compile-r6rs-top-level) (set! G46ef@G2e18@compile-r6rs-top-level G2e18@compile-r6rs-top-level) (set! G46ee@G2e16@syntax->datum G2e16@syntax->datum) (set! G46ed@G2e14@datum->syntax G2e14@datum->syntax) (set! G46ec@G2e12@identifier? G2e12@identifier?) (set! G46eb@G2e10@syntax-violation G2e10@syntax-violation) (set! G46ea@G2e0e@syntax-violation* G2e0e@syntax-violation*) (set! G46e9@G2e0c@syntax-error G2e0c@syntax-error) (set! G46e8@G2e0a@assertion-error G2e0a@assertion-error) (set! G46e7@G2e08@expression-position G2e08@expression-position) (set! G46e6@G2e06@extract-position-condition G2e06@extract-position-condition) (set! G46e5@G2e04@make-source-condition G2e04@make-source-condition) (set! G46e4@G2e02@bound-identifier=? G2e02@bound-identifier=?) (set! G46e3@G2e00@free-identifier=? G2e00@free-identifier=?) (set! G46e2@G2dfe@generate-temporaries G2dfe@generate-temporaries) (set! G46e1@G2dfc@make-export-env/macros G2dfc@make-export-env/macros) (set! G46e0@G2dfa@make-export-subst G2dfa@make-export-subst) (set! G46df@G2df8@build-exports G2df8@build-exports) (set! G46de@G2df6@rev-map-append G2df6@rev-map-append) (set! G46dd@G2df4@boot-library-expand G2df4@boot-library-expand) (set! G46dc@G2df2@library-expander G2df2@library-expander) (set! G46db@G2df0@eval G2df0@eval) (set! G46da@G2dee@expand G2dee@expand) (set! G46d9@G2dec@scheme-report-environment G2dec@scheme-report-environment) (set! G46d8@G2dea@null-environment G2dea@null-environment) (set! G46d7@G2de8@environment G2de8@environment) (set! G46d6@G2de6@environment-symbols G2de6@environment-symbols) (set! G46d5@G2de4@environment? G2de4@environment?) (set! G46d4@G2de2@parse-binding G2de2@parse-binding) (set! G46d3@G2de0@environment-bindings G2de0@environment-bindings) (set! G46d2@G2dde@interaction-environment-symbols G2dde@interaction-environment-symbols) (set! G46d1@G2ddc@rp G2ddc@rp) (set! G46d0@G2dda@set-interaction-env-locs! G2dda@set-interaction-env-locs!) (set! G46cf@G2dd8@set-interaction-env-r! G2dd8@set-interaction-env-r!) (set! G46ce@G2dd6@set-interaction-env-rib! G2dd6@set-interaction-env-rib!) (set! G46cd@G2dd4@interaction-env-locs G2dd4@interaction-env-locs) (set! G46cc@G2dd2@interaction-env-r G2dd2@interaction-env-r) (set! G46cb@G2dd0@interaction-env-rib G2dd0@interaction-env-rib) (set! G46ca@G2dce@make-interaction-env G2dce@make-interaction-env) (set! G46c9@G2dcc@interaction-env? G2dcc@interaction-env?) (set! G46c8@G2dc9@G2dc1 G2dc9@G2dc1) (set! G46c7@G2dc7@G2dc2 G2dc7@G2dc2) (set! G46c6@G2dc5@G2dc0 G2dc5@G2dc0) (set! G46c5@G2dbf@rp G2dbf@rp) (set! G46c4@G2dbd@set-env-itc! G2dbd@set-env-itc!) (set! G46c3@G2dbb@set-env-labels! G2dbb@set-env-labels!) (set! G46c2@G2db9@set-env-names! G2db9@set-env-names!) (set! G46c1@G2db7@env-itc G2db7@env-itc) (set! G46c0@G2db5@env-labels G2db5@env-labels) (set! G46bf@G2db3@env-names G2db3@env-names) (set! G46be@G2db1@make-env G2db1@make-env) (set! G46bd@G2daf@env? G2daf@env?) (set! G46bc@G2dac@G2da4 G2dac@G2da4) (set! G46bb@G2daa@G2da5 G2daa@G2da5) (set! G46ba@G2da8@G2da3 G2da8@G2da3) (set! G46b9@G2da2@top-level-expander G2da2@top-level-expander) (set! G46b8@G2da0@parse-top-level-program G2da0@parse-top-level-program) (set! G46b7@G2d9e@core-library-expander G2d9e@core-library-expander) (set! G46b6@G2d9c@library-body-expander G2d9c@library-body-expander) (set! G46b5@G2d9a@chi-interaction-expr G2d9a@chi-interaction-expr) (set! G46b4@G2d98@chi-library-internal G2d98@chi-library-internal) (set! G46b3@G2d96@imp-collector G2d96@imp-collector) (set! G46b2@G2d94@vis-collector G2d94@vis-collector) (set! G46b1@G2d92@inv-collector G2d92@inv-collector) (set! G46b0@G2d90@make-collector G2d90@make-collector) (set! G46af@G2d8e@make-top-rib G2d8e@make-top-rib) (set! G46ae@G2d8c@parse-import-spec* G2d8c@parse-import-spec*) (set! G46ad@G2d8a@parse-library G2d8a@parse-library) (set! G46ac@G2d88@parse-library-name G2d88@parse-library-name) (set! G46ab@G2d86@parse-exports G2d86@parse-exports) (set! G46aa@G2d84@expand-transformer G2d84@expand-transformer) (set! G46a9@G2d82@chi-body* G2d82@chi-body*) (set! G46a8@G2d80@chi-internal-module G2d80@chi-internal-module) (set! G46a7@G2d7e@module-interface-exp-id* G2d7e@module-interface-exp-id*) (set! G46a6@G2d7c@set-module-interface-exp-lab-vec! G2d7c@set-module-interface-exp-lab-vec!) (set! G46a5@G2d7a@set-module-interface-exp-id-vec! G2d7a@set-module-interface-exp-id-vec!) (set! G46a4@G2d78@set-module-interface-first-mark! G2d78@set-module-interface-first-mark!) (set! G46a3@G2d76@module-interface-exp-lab-vec G2d76@module-interface-exp-lab-vec) (set! G46a2@G2d74@module-interface-exp-id-vec G2d74@module-interface-exp-id-vec) (set! G46a1@G2d72@module-interface-first-mark G2d72@module-interface-first-mark) (set! G46a0@G2d70@make-module-interface G2d70@make-module-interface) (set! G469f@G2d6e@module-interface? G2d6e@module-interface?) (set! G469e@G2d6b@G2d63 G2d6b@G2d63) (set! G469d@G2d69@G2d64 G2d69@G2d64) (set! G469c@G2d67@G2d62 G2d67@G2d62) (set! G469b@G2d61@parse-module G2d61@parse-module) (set! G469a@G2d5f@chi-internal G2d5f@chi-internal) (set! G4699@G2d5d@find-dups G2d5d@find-dups) (set! G4698@G2d5b@find-bound=? G2d5b@find-bound=?) (set! G4697@G2d59@chi-rhs* G2d59@chi-rhs*) (set! G4696@G2d57@expand-interaction-rhs*/init* G2d57@expand-interaction-rhs*/init*) (set! G4695@G2d55@chi-rhs G2d55@chi-rhs) (set! G4694@G2d53@chi-defun G2d53@chi-defun) (set! G4693@G2d51@chi-lambda-clause* G2d51@chi-lambda-clause*) (set! G4692@G2d4f@chi-lambda-clause G2d4f@chi-lambda-clause) (set! G4691@G2d4d@verify-formals G2d4d@verify-formals) (set! G4690@G2d4b@chi-set! G2d4b@chi-set!) (set! G468f@G2d49@chi-expr G2d49@chi-expr) (set! G468e@G2d47@chi-application G2d47@chi-application) (set! G468d@G2d45@chi-expr* G2d45@chi-expr*) (set! G468c@G2d43@chi-global-macro G2d43@chi-global-macro) (set! G468b@G2d41@chi-local-macro G2d41@chi-local-macro) (set! G468a@G2d3f@chi-macro G2d3f@chi-macro) (set! G4689@G2d3d@do-macro-call G2d3d@do-macro-call) (set! G4688@G2d3b@local-macro-transformer G2d3b@local-macro-transformer) (set! G4687@G2d39@macro-transformer G2d39@macro-transformer) (set! G4686@G2d37@symbol-macro G2d37@symbol-macro) (set! G4685@G2d35@file-options-macro G2d35@file-options-macro) (set! G4684@G2d33@core-macro-transformer G2d33@core-macro-transformer) (set! G4683@G2d31@syntax-transformer G2d31@syntax-transformer) (set! G4682@G2d2f@ellipsis-map G2d2f@ellipsis-map) (set! G4681@G2d2d@syntax-case-transformer G2d2d@syntax-case-transformer) (set! G4680@G2d2b@verify-literals G2d2b@verify-literals) (set! G467f@G2d29@underscore? G2d29@underscore?) (set! G467e@G2d27@ellipsis? G2d27@ellipsis?) (set! G467d@G2d25@syntax-dispatch G2d25@syntax-dispatch) (set! G467c@G2d23@convert-pattern G2d23@convert-pattern) (set! G467b@G2d21@foreign-call-transformer G2d21@foreign-call-transformer) (set! G467a@G2d1f@parameterize-macro G2d1f@parameterize-macro) (set! G4679@G2d1d@incorrect-usage-macro G2d1d@incorrect-usage-macro) (set! G4678@G2d1b@define-condition-type-macro G2d1b@define-condition-type-macro) (set! G4677@G2d19@define-record-type-macro G2d19@define-record-type-macro) (set! G4676@G2d17@define-struct-macro G2d17@define-struct-macro) (set! G4675@G2d15@quasisyntax-macro G2d15@quasisyntax-macro) (set! G4674@G2d13@quasiquote-macro G2d13@quasiquote-macro) (set! G4673@G2d11@syntax-rules-macro G2d11@syntax-rules-macro) (set! G4672@G2d0f@include-into-macro G2d0f@include-into-macro) (set! G4671@G2d0d@include-macro G2d0d@include-macro) (set! G4670@G2d0b@do-include G2d0b@do-include) (set! G466f@G2d09@cond-macro G2d09@cond-macro) (set! G466e@G2d07@and-macro G2d07@and-macro) (set! G466d@G2d05@or-macro G2d05@or-macro) (set! G466c@G2d03@let*-macro G2d03@let*-macro) (set! G466b@G2d01@do-macro G2d01@do-macro) (set! G466a@G2cff@identifier-syntax-macro G2cff@identifier-syntax-macro) (set! G4669@G2cfd@endianness-macro G2cfd@endianness-macro) (set! G4668@G2cfb@assert-macro G2cfb@assert-macro) (set! G4667@G2cf9@delay-macro G2cf9@delay-macro) (set! G4666@G2cf7@time-macro G2cf7@time-macro) (set! G4665@G2cf5@define-enumeration-macro G2cf5@define-enumeration-macro) (set! G4664@G2cf3@guard-macro G2cf3@guard-macro) (set! G4663@G2cf1@trace-letrec-syntax-macro G2cf1@trace-letrec-syntax-macro) (set! G4662@G2cef@trace-let-syntax-macro G2cef@trace-let-syntax-macro) (set! G4661@G2ced@trace-let/rec-syntax G2ced@trace-let/rec-syntax) (set! G4660@G2ceb@trace-define-syntax-macro G2ceb@trace-define-syntax-macro) (set! G465f@G2ce9@trace-define-macro G2ce9@trace-define-macro) (set! G465e@G2ce7@trace-lambda-macro G2ce7@trace-lambda-macro) (set! G465d@G2ce5@let*-values-macro G2ce5@let*-values-macro) (set! G465c@G2ce3@let-values-macro G2ce3@let-values-macro) (set! G465b@G2ce1@let-macro G2ce1@let-macro) (set! G465a@G2cdf@invalid-fmls-error G2cdf@invalid-fmls-error) (set! G4659@G2cdd@with-syntax-macro G2cdd@with-syntax-macro) (set! G4658@G2cdb@bless G2cdb@bless) (set! G4657@G2cd9@lambda-transformer G2cd9@lambda-transformer) (set! G4656@G2cd7@case-lambda-transformer G2cd7@case-lambda-transformer) (set! G4655@G2cd5@quote-transformer G2cd5@quote-transformer) (set! G4654@G2cd3@case-macro G2cd3@case-macro) (set! G4653@G2cd1@or-transformer G2cd1@or-transformer) (set! G4652@G2ccf@and-transformer G2ccf@and-transformer) (set! G4651@G2ccd@if-transformer G2ccd@if-transformer) (set! G4650@G2ccb@unless-macro G2ccb@unless-macro) (set! G464f@G2cc9@when-macro G2cc9@when-macro) (set! G464e@G2cc7@record-constructor-descriptor-transformer G2cc7@record-constructor-descriptor-transformer) (set! G464d@G2cc5@record-type-descriptor-transformer G2cc5@record-type-descriptor-transformer) (set! G464c@G2cc3@type-descriptor-transformer G2cc3@type-descriptor-transformer) (set! G464b@G2cc1@fluid-let-syntax-transformer G2cc1@fluid-let-syntax-transformer) (set! G464a@G2cbf@letrec*-transformer G2cbf@letrec*-transformer) (set! G4649@G2cbd@letrec-transformer G2cbd@letrec-transformer) (set! G4648@G2cbb@letrec-helper G2cbb@letrec-helper) (set! G4647@G2cb9@add-lexicals G2cb9@add-lexicals) (set! G4646@G2cb7@add-lexical G2cb7@add-lexical) (set! G4645@G2cb5@set-lexical-mutable! G2cb5@set-lexical-mutable!) (set! G4644@G2cb3@lexical-mutable? G2cb3@lexical-mutable?) (set! G4643@G2cb1@lexical-var G2cb1@lexical-var) (set! G4642@G2caf@scheme-stx G2caf@scheme-stx) (set! G4641@G2cad@scheme-stx-hashtable G2cad@scheme-stx-hashtable) (set! G4640@G2cab@parse-define-syntax G2cab@parse-define-syntax) (set! G463f@G2ca9@parse-define G2ca9@parse-define) (set! G463e@G2b72@make-eval-transformer G2b72@make-eval-transformer) (set! G463d@G2b70@variable-transformer-procedure G2b70@variable-transformer-procedure) (set! G463c@G2b6e@variable-transformer? G2b6e@variable-transformer?) (set! G463b@G2b6c@make-variable-transformer G2b6c@make-variable-transformer) (set! G463a@G2b6a@sanitize-binding G2b6a@sanitize-binding) (set! G4639@G2b5c@syntax-type G2b5c@syntax-type) (set! G4638@G2b5a@raise-unbound-error G2b5a@raise-unbound-error) (set! G4637@G2b58@binding-value G2b58@binding-value) (set! G4636@G2b56@binding-type G2b56@binding-type) (set! G4635@G2b54@make-binding G2b54@make-binding) (set! G4634@G2b52@label->binding G2b52@label->binding) (set! G4633@G2b50@id->real-label G2b50@id->real-label) (set! G4632@G2b4e@id->label G2b4e@id->label) (set! G4631@G2b4c@same-marks*? G2b4c@same-marks*?) (set! G4630@G2b4a@stx->datum G2b4a@stx->datum) (set! G462f@G2b48@strip G2b48@strip) (set! G462e@G2b46@strip-annotations G2b46@strip-annotations) (set! G462d@G2b44@self-evaluating? G2b44@self-evaluating?) (set! G462c@G2b42@bound-id-member? G2b42@bound-id-member?) (set! G462b@G2b40@distinct-bound-ids? G2b40@distinct-bound-ids?) (set! G462a@G2b3e@valid-bound-ids? G2b3e@valid-bound-ids?) (set! G4629@G2b3c@free-id=? G2b3c@free-id=?) (set! G4628@G2b3a@bound-id=? G2b3a@bound-id=?) (set! G4627@G2b38@same-marks? G2b38@same-marks?) (set! G4626@G2b36@id->sym G2b36@id->sym) (set! G4625@G2b34@id? G2b34@id?) (set! G4624@G2b32@syntax->list G2b32@syntax->list) (set! G4623@G2b30@syntax-cdr G2b30@syntax-cdr) (set! G4622@G2b2e@syntax-car G2b2e@syntax-car) (set! G4621@G2b2c@syntax-list? G2b2c@syntax-list?) (set! G4620@G2b2a@syntax-null? G2b2a@syntax-null?) (set! G461f@G2b28@syntax-vector? G2b28@syntax-vector?) (set! G461e@G2b26@syntax-pair? G2b26@syntax-pair?) (set! G461d@G2b24@syntax-vector->list G2b24@syntax-vector->list) (set! G461c@G2b22@syntax-kind? G2b22@syntax-kind?) (set! G461b@G2b20@add-subst G2b20@add-subst) (set! G461a@G2b1e@add-mark G2b1e@add-mark) (set! G4619@G2b1c@mkstx G2b1c@mkstx) (set! G4618@G2b1a@join-wraps G2b1a@join-wraps) (set! G4617@G2b18@anti-mark? G2b18@anti-mark?) (set! G4616@G2b16@anti-mark G2b16@anti-mark) (set! G4615@G2b14@gen-mark G2b14@gen-mark) (set! G4614@G2b12@datum->stx G2b12@datum->stx) (set! G4613@G2b10@rp G2b10@rp) (set! G4612@G2b0e@set-stx-ae*! G2b0e@set-stx-ae*!) (set! G4611@G2b0c@set-stx-subst*! G2b0c@set-stx-subst*!) (set! G4610@G2b0a@set-stx-mark*! G2b0a@set-stx-mark*!) (set! G460f@G2b08@set-stx-expr! G2b08@set-stx-expr!) (set! G460e@G2b06@stx-ae* G2b06@stx-ae*) (set! G460d@G2b04@stx-subst* G2b04@stx-subst*) (set! G460c@G2b02@stx-mark* G2b02@stx-mark*) (set! G460b@G2b00@stx-expr G2b00@stx-expr) (set! G460a@G2afe@make-stx G2afe@make-stx) (set! G4609@G2afc@stx? G2afc@stx?) (set! G4608@G2af9@G2af1 G2af9@G2af1) (set! G4607@G2af7@G2af2 G2af7@G2af2) (set! G4606@G2af5@G2af0 G2af5@G2af0) (set! G4605@G2aef@make-full-rib G2aef@make-full-rib) (set! G4604@G2aed@unseal-rib! G2aed@unseal-rib!) (set! G4603@G2aeb@seal-rib! G2aeb@seal-rib!) (set! G4602@G2ae9@make-rib-map G2ae9@make-rib-map) (set! G4601@G2ae7@extend-rib/nc! G2ae7@extend-rib/nc!) (set! G4600@G2ae5@extend-rib! G2ae5@extend-rib!) (set! G45ff@G2ae3@make-empty-rib G2ae3@make-empty-rib) (set! G45fe@G2ae1@set-rib-cache! G2ae1@set-rib-cache!) (set! G45fd@G2adf@set-rib-sealed/freq! G2adf@set-rib-sealed/freq!) (set! G45fc@G2add@set-rib-label*! G2add@set-rib-label*!) (set! G45fb@G2adb@set-rib-mark**! G2adb@set-rib-mark**!) (set! G45fa@G2ad9@set-rib-sym*! G2ad9@set-rib-sym*!) (set! G45f9@G2ad7@rib-cache G2ad7@rib-cache) (set! G45f8@G2ad5@rib-sealed/freq G2ad5@rib-sealed/freq) (set! G45f7@G2ad3@rib-label* G2ad3@rib-label*) (set! G45f6@G2ad1@rib-mark** G2ad1@rib-mark**) (set! G45f5@G2acf@rib-sym* G2acf@rib-sym*) (set! G45f4@G2acd@make-rib G2acd@make-rib) (set! G45f3@G2acb@rib? G2acb@rib?) (set! G45f2@G2ac8@G2ac0 G2ac8@G2ac0) (set! G45f1@G2ac6@G2ac1 G2ac6@G2ac1) (set! G45f0@G2ac4@G2abf G2ac4@G2abf) (set! G45ef@G2abe@gen-define-label G2abe@gen-define-label) (set! G45ee@G2abc@gen-define-label+loc G2abc@gen-define-label+loc) (set! G45ed@G2aba@gen-top-level-label G2aba@gen-top-level-label) (set! G45ec@G2ab8@gen-label G2ab8@gen-label) (set! G45eb@G2ab6@gen-global G2ab6@gen-global) (set! G45ea@G2ab4@gen-lexical G2ab4@gen-lexical) (set! G45e9@G2ab2@top-marked? G2ab2@top-marked?) (set! G45e8@G2ab0@top-mark* G2ab0@top-mark*) (set! G45e7@G2aab@set-union G2aab@set-union) (set! G45e6@G2aa9@set-cons G2aa9@set-cons) (G2952@G27ef@current-library-expander G2df2@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G46fc@G46f7 G46fe@G46f9 G4700@G46f8 G4703@&condition? G4705@make-&condition G4707@&condition-rtd G4709@&condition-rcd G4751@G474c G4753@G474e G4755@G474d G4758@p? G475a@make-message-condition G475c@G474b G475e@message-condition? G4760@condition-message G4762@&message-rtd G4764@&message-rcd G476a@G4765 G476c@G4767 G476e@G4766 G4771@p? G4773@make-warning G4775@warning? G4777@&warning-rtd G4779@&warning-rcd G477f@G477a G4781@G477c G4783@G477b G4786@p? G4788@make-serious-condition G478a@serious-condition? G478c@&serious-rtd G478e@&serious-rcd G4794@G478f G4796@G4791 G4798@G4790 G479b@p? G479d@make-error G479f@error? G47a1@&error-rtd G47a3@&error-rcd G47a9@G47a4 G47ab@G47a6 G47ad@G47a5 G47b0@p? G47b2@make-violation G47b4@violation? G47b6@&violation-rtd G47b8@&violation-rcd G47be@G47b9 G47c0@G47bb G47c2@G47ba G47c5@p? G47c7@make-assertion-violation G47c9@assertion-violation? G47cb@&assertion-rtd G47cd@&assertion-rcd G47d4@G47cf G47d6@G47d1 G47d8@G47d0 G47db@p? G47dd@make-irritants-condition G47df@G47ce G47e1@irritants-condition? G47e3@condition-irritants G47e5@&irritants-rtd G47e7@&irritants-rcd G47ee@G47e9 G47f0@G47eb G47f2@G47ea G47f5@p? G47f7@make-who-condition G47f9@G47e8 G47fb@who-condition? G47fd@condition-who G47ff@&who-rtd G4801@&who-rcd G4807@G4802 G4809@G4804 G480b@G4803 G480e@p? G4810@make-non-continuable-violation G4812@non-continuable-violation? G4814@&non-continuable-rtd G4816@&non-continuable-rcd G481c@G4817 G481e@G4819 G4820@G4818 G4823@p? G4825@make-implementation-restriction-violation G4827@implementation-restriction-violation? G4829@&implementation-restriction-rtd G482b@&implementation-restriction-rcd G4831@G482c G4833@G482e G4835@G482d G4838@p? G483a@make-lexical-violation G483c@lexical-violation? G483e@&lexical-rtd G4840@&lexical-rcd G4848@G4843 G484a@G4845 G484c@G4844 G484f@p? G4851@make-syntax-violation G4853@G4841 G4855@G4842 G4857@syntax-violation? G4859@syntax-violation-form G485b@syntax-violation-subform G485d@&syntax-rtd G485f@&syntax-rcd G4865@G4860 G4867@G4862 G4869@G4861 G486c@p? G486e@make-undefined-violation G4870@undefined-violation? G4872@&undefined-rtd G4874@&undefined-rcd G487a@G4875 G487c@G4877 G487e@G4876 G4881@p? G4883@make-i/o-error G4885@i/o-error? G4887@&i/o-rtd G4889@&i/o-rcd G488f@G488a G4891@G488c G4893@G488b G4896@p? G4898@make-i/o-read-error G489a@i/o-read-error? G489c@&i/o-read-rtd G489e@&i/o-read-rcd G48a4@G489f G48a6@G48a1 G48a8@G48a0 G48ab@p? G48ad@make-i/o-write-error G48af@i/o-write-error? G48b1@&i/o-write-rtd G48b3@&i/o-write-rcd G48ba@G48b5 G48bc@G48b7 G48be@G48b6 G48c1@p? G48c3@make-i/o-invalid-position-error G48c5@G48b4 G48c7@i/o-invalid-position-error? G48c9@i/o-error-position G48cb@&i/o-invalid-position-rtd G48cd@&i/o-invalid-position-rcd G48d4@G48cf G48d6@G48d1 G48d8@G48d0 G48db@p? G48dd@make-i/o-filename-error G48df@G48ce G48e1@i/o-filename-error? G48e3@i/o-error-filename G48e5@&i/o-filename-rtd G48e7@&i/o-filename-rcd G48ed@G48e8 G48ef@G48ea G48f1@G48e9 G48f4@p? G48f6@make-i/o-file-protection-error G48f8@i/o-file-protection-error? G48fa@&i/o-file-protection-rtd G48fc@&i/o-file-protection-rcd G4902@G48fd G4904@G48ff G4906@G48fe G4909@p? G490b@make-i/o-file-is-read-only-error G490d@i/o-file-is-read-only-error? G490f@&i/o-file-is-read-only-rtd G4911@&i/o-file-is-read-only-rcd G4917@G4912 G4919@G4914 G491b@G4913 G491e@p? G4920@make-i/o-file-already-exists-error G4922@i/o-file-already-exists-error? G4924@&i/o-file-already-exists-rtd G4926@&i/o-file-already-exists-rcd G492c@G4927 G492e@G4929 G4930@G4928 G4933@p? G4935@make-i/o-file-does-not-exist-error G4937@i/o-file-does-not-exist-error? G4939@&i/o-file-does-not-exist-rtd G493b@&i/o-file-does-not-exist-rcd G4942@G493d G4944@G493f G4946@G493e G4949@p? G494b@make-i/o-port-error G494d@G493c G494f@i/o-port-error? G4951@i/o-error-port G4953@&i/o-port-rtd G4955@&i/o-port-rcd G495b@G4956 G495d@G4958 G495f@G4957 G4962@p? G4964@make-i/o-decoding-error G4966@i/o-decoding-error? G4968@&i/o-decoding-rtd G496a@&i/o-decoding-rcd G4971@G496c G4973@G496e G4975@G496d G4978@p? G497a@make-i/o-encoding-error G497c@G496b G497e@i/o-encoding-error? G4980@i/o-encoding-error-char G4982@&i/o-encoding-rtd G4984@&i/o-encoding-rcd G498a@G4985 G498c@G4987 G498e@G4986 G4991@p? G4993@make-no-infinities-violation G4995@no-infinities-violation? G4997@&no-infinities-rtd G4999@&no-infinities-rcd G499f@G499a G49a1@G499c G49a3@G499b G49a6@p? G49a8@make-no-nans-violation G49aa@no-nans-violation? G49ac@&no-nans-rtd G49ae@&no-nans-rcd) (begin (set! G46fc@G46f7 (make-record-type-descriptor '&condition '#f 'G46fa '#f '#f '#())) (set! G46fe@G46f9 '#f) (set! G4700@G46f8 (make-record-constructor-descriptor G46fc@G46f7 '#f G46fe@G46f9)) (set! G4703@&condition? (record-predicate G46fc@G46f7)) (set! G4705@make-&condition (record-constructor G4700@G46f8)) (set! G4707@&condition-rtd G46fc@G46f7) (set! G4709@&condition-rcd G4700@G46f8) (set! G4751@G474c (make-record-type-descriptor '&message G46fc@G46f7 'G474f '#f '#f '#((immutable message)))) (set! G4753@G474e '#f) (set! G4755@G474d (make-record-constructor-descriptor G4751@G474c G4700@G46f8 G4753@G474e)) (set! G4758@p? (record-predicate G4751@G474c)) (set! G475a@make-message-condition (record-constructor G4755@G474d)) (set! G475c@G474b (record-accessor G4751@G474c '0)) (set! G475e@message-condition? (condition-predicate G4751@G474c)) (set! G4760@condition-message (condition-accessor G4751@G474c G475c@G474b)) (set! G4762@&message-rtd G4751@G474c) (set! G4764@&message-rcd G4755@G474d) (set! G476a@G4765 (make-record-type-descriptor '&warning G46fc@G46f7 'G4768 '#f '#f '#())) (set! G476c@G4767 '#f) (set! G476e@G4766 (make-record-constructor-descriptor G476a@G4765 G4700@G46f8 G476c@G4767)) (set! G4771@p? (record-predicate G476a@G4765)) (set! G4773@make-warning (record-constructor G476e@G4766)) (set! G4775@warning? (condition-predicate G476a@G4765)) (set! G4777@&warning-rtd G476a@G4765) (set! G4779@&warning-rcd G476e@G4766) (set! G477f@G477a (make-record-type-descriptor '&serious G46fc@G46f7 'G477d '#f '#f '#())) (set! G4781@G477c '#f) (set! G4783@G477b (make-record-constructor-descriptor G477f@G477a G4700@G46f8 G4781@G477c)) (set! G4786@p? (record-predicate G477f@G477a)) (set! G4788@make-serious-condition (record-constructor G4783@G477b)) (set! G478a@serious-condition? (condition-predicate G477f@G477a)) (set! G478c@&serious-rtd G477f@G477a) (set! G478e@&serious-rcd G4783@G477b) (set! G4794@G478f (make-record-type-descriptor '&error G477f@G477a 'G4792 '#f '#f '#())) (set! G4796@G4791 '#f) (set! G4798@G4790 (make-record-constructor-descriptor G4794@G478f G4783@G477b G4796@G4791)) (set! G479b@p? (record-predicate G4794@G478f)) (set! G479d@make-error (record-constructor G4798@G4790)) (set! G479f@error? (condition-predicate G4794@G478f)) (set! G47a1@&error-rtd G4794@G478f) (set! G47a3@&error-rcd G4798@G4790) (set! G47a9@G47a4 (make-record-type-descriptor '&violation G477f@G477a 'G47a7 '#f '#f '#())) (set! G47ab@G47a6 '#f) (set! G47ad@G47a5 (make-record-constructor-descriptor G47a9@G47a4 G4783@G477b G47ab@G47a6)) (set! G47b0@p? (record-predicate G47a9@G47a4)) (set! G47b2@make-violation (record-constructor G47ad@G47a5)) (set! G47b4@violation? (condition-predicate G47a9@G47a4)) (set! G47b6@&violation-rtd G47a9@G47a4) (set! G47b8@&violation-rcd G47ad@G47a5) (set! G47be@G47b9 (make-record-type-descriptor '&assertion G47a9@G47a4 'G47bc '#f '#f '#())) (set! G47c0@G47bb '#f) (set! G47c2@G47ba (make-record-constructor-descriptor G47be@G47b9 G47ad@G47a5 G47c0@G47bb)) (set! G47c5@p? (record-predicate G47be@G47b9)) (set! G47c7@make-assertion-violation (record-constructor G47c2@G47ba)) (set! G47c9@assertion-violation? (condition-predicate G47be@G47b9)) (set! G47cb@&assertion-rtd G47be@G47b9) (set! G47cd@&assertion-rcd G47c2@G47ba) (set! G47d4@G47cf (make-record-type-descriptor '&irritants G46fc@G46f7 'G47d2 '#f '#f '#((immutable irritants)))) (set! G47d6@G47d1 '#f) (set! G47d8@G47d0 (make-record-constructor-descriptor G47d4@G47cf G4700@G46f8 G47d6@G47d1)) (set! G47db@p? (record-predicate G47d4@G47cf)) (set! G47dd@make-irritants-condition (record-constructor G47d8@G47d0)) (set! G47df@G47ce (record-accessor G47d4@G47cf '0)) (set! G47e1@irritants-condition? (condition-predicate G47d4@G47cf)) (set! G47e3@condition-irritants (condition-accessor G47d4@G47cf G47df@G47ce)) (set! G47e5@&irritants-rtd G47d4@G47cf) (set! G47e7@&irritants-rcd G47d8@G47d0) (set! G47ee@G47e9 (make-record-type-descriptor '&who G46fc@G46f7 'G47ec '#f '#f '#((immutable who)))) (set! G47f0@G47eb '#f) (set! G47f2@G47ea (make-record-constructor-descriptor G47ee@G47e9 G4700@G46f8 G47f0@G47eb)) (set! G47f5@p? (record-predicate G47ee@G47e9)) (set! G47f7@make-who-condition (record-constructor G47f2@G47ea)) (set! G47f9@G47e8 (record-accessor G47ee@G47e9 '0)) (set! G47fb@who-condition? (condition-predicate G47ee@G47e9)) (set! G47fd@condition-who (condition-accessor G47ee@G47e9 G47f9@G47e8)) (set! G47ff@&who-rtd G47ee@G47e9) (set! G4801@&who-rcd G47f2@G47ea) (set! G4807@G4802 (make-record-type-descriptor '&non-continuable G47a9@G47a4 'G4805 '#f '#f '#())) (set! G4809@G4804 '#f) (set! G480b@G4803 (make-record-constructor-descriptor G4807@G4802 G47ad@G47a5 G4809@G4804)) (set! G480e@p? (record-predicate G4807@G4802)) (set! G4810@make-non-continuable-violation (record-constructor G480b@G4803)) (set! G4812@non-continuable-violation? (condition-predicate G4807@G4802)) (set! G4814@&non-continuable-rtd G4807@G4802) (set! G4816@&non-continuable-rcd G480b@G4803) (set! G481c@G4817 (make-record-type-descriptor '&implementation-restriction G47a9@G47a4 'G481a '#f '#f '#())) (set! G481e@G4819 '#f) (set! G4820@G4818 (make-record-constructor-descriptor G481c@G4817 G47ad@G47a5 G481e@G4819)) (set! G4823@p? (record-predicate G481c@G4817)) (set! G4825@make-implementation-restriction-violation (record-constructor G4820@G4818)) (set! G4827@implementation-restriction-violation? (condition-predicate G481c@G4817)) (set! G4829@&implementation-restriction-rtd G481c@G4817) (set! G482b@&implementation-restriction-rcd G4820@G4818) (set! G4831@G482c (make-record-type-descriptor '&lexical G47a9@G47a4 'G482f '#f '#f '#())) (set! G4833@G482e '#f) (set! G4835@G482d (make-record-constructor-descriptor G4831@G482c G47ad@G47a5 G4833@G482e)) (set! G4838@p? (record-predicate G4831@G482c)) (set! G483a@make-lexical-violation (record-constructor G4835@G482d)) (set! G483c@lexical-violation? (condition-predicate G4831@G482c)) (set! G483e@&lexical-rtd G4831@G482c) (set! G4840@&lexical-rcd G4835@G482d) (set! G4848@G4843 (make-record-type-descriptor '&syntax G47a9@G47a4 'G4846 '#f '#f '#((immutable form) (immutable subform)))) (set! G484a@G4845 '#f) (set! G484c@G4844 (make-record-constructor-descriptor G4848@G4843 G47ad@G47a5 G484a@G4845)) (set! G484f@p? (record-predicate G4848@G4843)) (set! G4851@make-syntax-violation (record-constructor G484c@G4844)) (set! G4853@G4841 (record-accessor G4848@G4843 '0)) (set! G4855@G4842 (record-accessor G4848@G4843 '1)) (set! G4857@syntax-violation? (condition-predicate G4848@G4843)) (set! G4859@syntax-violation-form (condition-accessor G4848@G4843 G4853@G4841)) (set! G485b@syntax-violation-subform (condition-accessor G4848@G4843 G4855@G4842)) (set! G485d@&syntax-rtd G4848@G4843) (set! G485f@&syntax-rcd G484c@G4844) (set! G4865@G4860 (make-record-type-descriptor '&undefined G47a9@G47a4 'G4863 '#f '#f '#())) (set! G4867@G4862 '#f) (set! G4869@G4861 (make-record-constructor-descriptor G4865@G4860 G47ad@G47a5 G4867@G4862)) (set! G486c@p? (record-predicate G4865@G4860)) (set! G486e@make-undefined-violation (record-constructor G4869@G4861)) (set! G4870@undefined-violation? (condition-predicate G4865@G4860)) (set! G4872@&undefined-rtd G4865@G4860) (set! G4874@&undefined-rcd G4869@G4861) (set! G487a@G4875 (make-record-type-descriptor '&i/o G4794@G478f 'G4878 '#f '#f '#())) (set! G487c@G4877 '#f) (set! G487e@G4876 (make-record-constructor-descriptor G487a@G4875 G4798@G4790 G487c@G4877)) (set! G4881@p? (record-predicate G487a@G4875)) (set! G4883@make-i/o-error (record-constructor G487e@G4876)) (set! G4885@i/o-error? (condition-predicate G487a@G4875)) (set! G4887@&i/o-rtd G487a@G4875) (set! G4889@&i/o-rcd G487e@G4876) (set! G488f@G488a (make-record-type-descriptor '&i/o-read G487a@G4875 'G488d '#f '#f '#())) (set! G4891@G488c '#f) (set! G4893@G488b (make-record-constructor-descriptor G488f@G488a G487e@G4876 G4891@G488c)) (set! G4896@p? (record-predicate G488f@G488a)) (set! G4898@make-i/o-read-error (record-constructor G4893@G488b)) (set! G489a@i/o-read-error? (condition-predicate G488f@G488a)) (set! G489c@&i/o-read-rtd G488f@G488a) (set! G489e@&i/o-read-rcd G4893@G488b) (set! G48a4@G489f (make-record-type-descriptor '&i/o-write G487a@G4875 'G48a2 '#f '#f '#())) (set! G48a6@G48a1 '#f) (set! G48a8@G48a0 (make-record-constructor-descriptor G48a4@G489f G487e@G4876 G48a6@G48a1)) (set! G48ab@p? (record-predicate G48a4@G489f)) (set! G48ad@make-i/o-write-error (record-constructor G48a8@G48a0)) (set! G48af@i/o-write-error? (condition-predicate G48a4@G489f)) (set! G48b1@&i/o-write-rtd G48a4@G489f) (set! G48b3@&i/o-write-rcd G48a8@G48a0) (set! G48ba@G48b5 (make-record-type-descriptor '&i/o-invalid-position G487a@G4875 'G48b8 '#f '#f '#((immutable position)))) (set! G48bc@G48b7 '#f) (set! G48be@G48b6 (make-record-constructor-descriptor G48ba@G48b5 G487e@G4876 G48bc@G48b7)) (set! G48c1@p? (record-predicate G48ba@G48b5)) (set! G48c3@make-i/o-invalid-position-error (record-constructor G48be@G48b6)) (set! G48c5@G48b4 (record-accessor G48ba@G48b5 '0)) (set! G48c7@i/o-invalid-position-error? (condition-predicate G48ba@G48b5)) (set! G48c9@i/o-error-position (condition-accessor G48ba@G48b5 G48c5@G48b4)) (set! G48cb@&i/o-invalid-position-rtd G48ba@G48b5) (set! G48cd@&i/o-invalid-position-rcd G48be@G48b6) (set! G48d4@G48cf (make-record-type-descriptor '&i/o-filename G487a@G4875 'G48d2 '#f '#f '#((immutable filename)))) (set! G48d6@G48d1 '#f) (set! G48d8@G48d0 (make-record-constructor-descriptor G48d4@G48cf G487e@G4876 G48d6@G48d1)) (set! G48db@p? (record-predicate G48d4@G48cf)) (set! G48dd@make-i/o-filename-error (record-constructor G48d8@G48d0)) (set! G48df@G48ce (record-accessor G48d4@G48cf '0)) (set! G48e1@i/o-filename-error? (condition-predicate G48d4@G48cf)) (set! G48e3@i/o-error-filename (condition-accessor G48d4@G48cf G48df@G48ce)) (set! G48e5@&i/o-filename-rtd G48d4@G48cf) (set! G48e7@&i/o-filename-rcd G48d8@G48d0) (set! G48ed@G48e8 (make-record-type-descriptor '&i/o-file-protection G48d4@G48cf 'G48eb '#f '#f '#())) (set! G48ef@G48ea '#f) (set! G48f1@G48e9 (make-record-constructor-descriptor G48ed@G48e8 G48d8@G48d0 G48ef@G48ea)) (set! G48f4@p? (record-predicate G48ed@G48e8)) (set! G48f6@make-i/o-file-protection-error (record-constructor G48f1@G48e9)) (set! G48f8@i/o-file-protection-error? (condition-predicate G48ed@G48e8)) (set! G48fa@&i/o-file-protection-rtd G48ed@G48e8) (set! G48fc@&i/o-file-protection-rcd G48f1@G48e9) (set! G4902@G48fd (make-record-type-descriptor '&i/o-file-is-read-only G48ed@G48e8 'G4900 '#f '#f '#())) (set! G4904@G48ff '#f) (set! G4906@G48fe (make-record-constructor-descriptor G4902@G48fd G48f1@G48e9 G4904@G48ff)) (set! G4909@p? (record-predicate G4902@G48fd)) (set! G490b@make-i/o-file-is-read-only-error (record-constructor G4906@G48fe)) (set! G490d@i/o-file-is-read-only-error? (condition-predicate G4902@G48fd)) (set! G490f@&i/o-file-is-read-only-rtd G4902@G48fd) (set! G4911@&i/o-file-is-read-only-rcd G4906@G48fe) (set! G4917@G4912 (make-record-type-descriptor '&i/o-file-already-exists G48d4@G48cf 'G4915 '#f '#f '#())) (set! G4919@G4914 '#f) (set! G491b@G4913 (make-record-constructor-descriptor G4917@G4912 G48d8@G48d0 G4919@G4914)) (set! G491e@p? (record-predicate G4917@G4912)) (set! G4920@make-i/o-file-already-exists-error (record-constructor G491b@G4913)) (set! G4922@i/o-file-already-exists-error? (condition-predicate G4917@G4912)) (set! G4924@&i/o-file-already-exists-rtd G4917@G4912) (set! G4926@&i/o-file-already-exists-rcd G491b@G4913) (set! G492c@G4927 (make-record-type-descriptor '&i/o-file-does-not-exist G48d4@G48cf 'G492a '#f '#f '#())) (set! G492e@G4929 '#f) (set! G4930@G4928 (make-record-constructor-descriptor G492c@G4927 G48d8@G48d0 G492e@G4929)) (set! G4933@p? (record-predicate G492c@G4927)) (set! G4935@make-i/o-file-does-not-exist-error (record-constructor G4930@G4928)) (set! G4937@i/o-file-does-not-exist-error? (condition-predicate G492c@G4927)) (set! G4939@&i/o-file-does-not-exist-rtd G492c@G4927) (set! G493b@&i/o-file-does-not-exist-rcd G4930@G4928) (set! G4942@G493d (make-record-type-descriptor '&i/o-port G487a@G4875 'G4940 '#f '#f '#((immutable port)))) (set! G4944@G493f '#f) (set! G4946@G493e (make-record-constructor-descriptor G4942@G493d G487e@G4876 G4944@G493f)) (set! G4949@p? (record-predicate G4942@G493d)) (set! G494b@make-i/o-port-error (record-constructor G4946@G493e)) (set! G494d@G493c (record-accessor G4942@G493d '0)) (set! G494f@i/o-port-error? (condition-predicate G4942@G493d)) (set! G4951@i/o-error-port (condition-accessor G4942@G493d G494d@G493c)) (set! G4953@&i/o-port-rtd G4942@G493d) (set! G4955@&i/o-port-rcd G4946@G493e) (set! G495b@G4956 (make-record-type-descriptor '&i/o-decoding G4942@G493d 'G4959 '#f '#f '#())) (set! G495d@G4958 '#f) (set! G495f@G4957 (make-record-constructor-descriptor G495b@G4956 G4946@G493e G495d@G4958)) (set! G4962@p? (record-predicate G495b@G4956)) (set! G4964@make-i/o-decoding-error (record-constructor G495f@G4957)) (set! G4966@i/o-decoding-error? (condition-predicate G495b@G4956)) (set! G4968@&i/o-decoding-rtd G495b@G4956) (set! G496a@&i/o-decoding-rcd G495f@G4957) (set! G4971@G496c (make-record-type-descriptor '&i/o-encoding G4942@G493d 'G496f '#f '#f '#((immutable char)))) (set! G4973@G496e '#f) (set! G4975@G496d (make-record-constructor-descriptor G4971@G496c G4946@G493e G4973@G496e)) (set! G4978@p? (record-predicate G4971@G496c)) (set! G497a@make-i/o-encoding-error (record-constructor G4975@G496d)) (set! G497c@G496b (record-accessor G4971@G496c '0)) (set! G497e@i/o-encoding-error? (condition-predicate G4971@G496c)) (set! G4980@i/o-encoding-error-char (condition-accessor G4971@G496c G497c@G496b)) (set! G4982@&i/o-encoding-rtd G4971@G496c) (set! G4984@&i/o-encoding-rcd G4975@G496d) (set! G498a@G4985 (make-record-type-descriptor '&no-infinities G481c@G4817 'G4988 '#f '#f '#())) (set! G498c@G4987 '#f) (set! G498e@G4986 (make-record-constructor-descriptor G498a@G4985 G4820@G4818 G498c@G4987)) (set! G4991@p? (record-predicate G498a@G4985)) (set! G4993@make-no-infinities-violation (record-constructor G498e@G4986)) (set! G4995@no-infinities-violation? (condition-predicate G498a@G4985)) (set! G4997@&no-infinities-rtd G498a@G4985) (set! G4999@&no-infinities-rcd G498e@G4986) (set! G499f@G499a (make-record-type-descriptor '&no-nans G481c@G4817 'G499d '#f '#f '#())) (set! G49a1@G499c '#f) (set! G49a3@G499b (make-record-constructor-descriptor G499f@G499a G4820@G4818 G49a1@G499c)) (set! G49a6@p? (record-predicate G499f@G499a)) (set! G49a8@make-no-nans-violation (record-constructor G49a3@G499b)) (set! G49aa@no-nans-violation? (condition-predicate G499f@G499a)) (set! G49ac@&no-nans-rtd G499f@G499a) (set! G49ae@&no-nans-rcd G49a3@G499b) (begin (set! G4a9f@G49ae@&no-nans-rcd G49ae@&no-nans-rcd) (set! G4a9e@G49ac@&no-nans-rtd G49ac@&no-nans-rtd) (set! G4a9d@G49aa@no-nans-violation? G49aa@no-nans-violation?) (set! G4a9c@G49a8@make-no-nans-violation G49a8@make-no-nans-violation) (set! G4a9b@G49a6@p? G49a6@p?) (set! G4a9a@G49a3@G499b G49a3@G499b) (set! G4a99@G49a1@G499c G49a1@G499c) (set! G4a98@G499f@G499a G499f@G499a) (set! G4a97@G4999@&no-infinities-rcd G4999@&no-infinities-rcd) (set! G4a96@G4997@&no-infinities-rtd G4997@&no-infinities-rtd) (set! G4a95@G4995@no-infinities-violation? G4995@no-infinities-violation?) (set! G4a94@G4993@make-no-infinities-violation G4993@make-no-infinities-violation) (set! G4a93@G4991@p? G4991@p?) (set! G4a92@G498e@G4986 G498e@G4986) (set! G4a91@G498c@G4987 G498c@G4987) (set! G4a90@G498a@G4985 G498a@G4985) (set! G4a8f@G4984@&i/o-encoding-rcd G4984@&i/o-encoding-rcd) (set! G4a8e@G4982@&i/o-encoding-rtd G4982@&i/o-encoding-rtd) (set! G4a8d@G4980@i/o-encoding-error-char G4980@i/o-encoding-error-char) (set! G4a8c@G497e@i/o-encoding-error? G497e@i/o-encoding-error?) (set! G4a8b@G497c@G496b G497c@G496b) (set! G4a8a@G497a@make-i/o-encoding-error G497a@make-i/o-encoding-error) (set! G4a89@G4978@p? G4978@p?) (set! G4a88@G4975@G496d G4975@G496d) (set! G4a87@G4973@G496e G4973@G496e) (set! G4a86@G4971@G496c G4971@G496c) (set! G4a85@G496a@&i/o-decoding-rcd G496a@&i/o-decoding-rcd) (set! G4a84@G4968@&i/o-decoding-rtd G4968@&i/o-decoding-rtd) (set! G4a83@G4966@i/o-decoding-error? G4966@i/o-decoding-error?) (set! G4a82@G4964@make-i/o-decoding-error G4964@make-i/o-decoding-error) (set! G4a81@G4962@p? G4962@p?) (set! G4a80@G495f@G4957 G495f@G4957) (set! G4a7f@G495d@G4958 G495d@G4958) (set! G4a7e@G495b@G4956 G495b@G4956) (set! G4a7d@G4955@&i/o-port-rcd G4955@&i/o-port-rcd) (set! G4a7c@G4953@&i/o-port-rtd G4953@&i/o-port-rtd) (set! G4a7b@G4951@i/o-error-port G4951@i/o-error-port) (set! G4a7a@G494f@i/o-port-error? G494f@i/o-port-error?) (set! G4a79@G494d@G493c G494d@G493c) (set! G4a78@G494b@make-i/o-port-error G494b@make-i/o-port-error) (set! G4a77@G4949@p? G4949@p?) (set! G4a76@G4946@G493e G4946@G493e) (set! G4a75@G4944@G493f G4944@G493f) (set! G4a74@G4942@G493d G4942@G493d) (set! G4a73@G493b@&i/o-file-does-not-exist-rcd G493b@&i/o-file-does-not-exist-rcd) (set! G4a72@G4939@&i/o-file-does-not-exist-rtd G4939@&i/o-file-does-not-exist-rtd) (set! G4a71@G4937@i/o-file-does-not-exist-error? G4937@i/o-file-does-not-exist-error?) (set! G4a70@G4935@make-i/o-file-does-not-exist-error G4935@make-i/o-file-does-not-exist-error) (set! G4a6f@G4933@p? G4933@p?) (set! G4a6e@G4930@G4928 G4930@G4928) (set! G4a6d@G492e@G4929 G492e@G4929) (set! G4a6c@G492c@G4927 G492c@G4927) (set! G4a6b@G4926@&i/o-file-already-exists-rcd G4926@&i/o-file-already-exists-rcd) (set! G4a6a@G4924@&i/o-file-already-exists-rtd G4924@&i/o-file-already-exists-rtd) (set! G4a69@G4922@i/o-file-already-exists-error? G4922@i/o-file-already-exists-error?) (set! G4a68@G4920@make-i/o-file-already-exists-error G4920@make-i/o-file-already-exists-error) (set! G4a67@G491e@p? G491e@p?) (set! G4a66@G491b@G4913 G491b@G4913) (set! G4a65@G4919@G4914 G4919@G4914) (set! G4a64@G4917@G4912 G4917@G4912) (set! G4a63@G4911@&i/o-file-is-read-only-rcd G4911@&i/o-file-is-read-only-rcd) (set! G4a62@G490f@&i/o-file-is-read-only-rtd G490f@&i/o-file-is-read-only-rtd) (set! G4a61@G490d@i/o-file-is-read-only-error? G490d@i/o-file-is-read-only-error?) (set! G4a60@G490b@make-i/o-file-is-read-only-error G490b@make-i/o-file-is-read-only-error) (set! G4a5f@G4909@p? G4909@p?) (set! G4a5e@G4906@G48fe G4906@G48fe) (set! G4a5d@G4904@G48ff G4904@G48ff) (set! G4a5c@G4902@G48fd G4902@G48fd) (set! G4a5b@G48fc@&i/o-file-protection-rcd G48fc@&i/o-file-protection-rcd) (set! G4a5a@G48fa@&i/o-file-protection-rtd G48fa@&i/o-file-protection-rtd) (set! G4a59@G48f8@i/o-file-protection-error? G48f8@i/o-file-protection-error?) (set! G4a58@G48f6@make-i/o-file-protection-error G48f6@make-i/o-file-protection-error) (set! G4a57@G48f4@p? G48f4@p?) (set! G4a56@G48f1@G48e9 G48f1@G48e9) (set! G4a55@G48ef@G48ea G48ef@G48ea) (set! G4a54@G48ed@G48e8 G48ed@G48e8) (set! G4a53@G48e7@&i/o-filename-rcd G48e7@&i/o-filename-rcd) (set! G4a52@G48e5@&i/o-filename-rtd G48e5@&i/o-filename-rtd) (set! G4a51@G48e3@i/o-error-filename G48e3@i/o-error-filename) (set! G4a50@G48e1@i/o-filename-error? G48e1@i/o-filename-error?) (set! G4a4f@G48df@G48ce G48df@G48ce) (set! G4a4e@G48dd@make-i/o-filename-error G48dd@make-i/o-filename-error) (set! G4a4d@G48db@p? G48db@p?) (set! G4a4c@G48d8@G48d0 G48d8@G48d0) (set! G4a4b@G48d6@G48d1 G48d6@G48d1) (set! G4a4a@G48d4@G48cf G48d4@G48cf) (set! G4a49@G48cd@&i/o-invalid-position-rcd G48cd@&i/o-invalid-position-rcd) (set! G4a48@G48cb@&i/o-invalid-position-rtd G48cb@&i/o-invalid-position-rtd) (set! G4a47@G48c9@i/o-error-position G48c9@i/o-error-position) (set! G4a46@G48c7@i/o-invalid-position-error? G48c7@i/o-invalid-position-error?) (set! G4a45@G48c5@G48b4 G48c5@G48b4) (set! G4a44@G48c3@make-i/o-invalid-position-error G48c3@make-i/o-invalid-position-error) (set! G4a43@G48c1@p? G48c1@p?) (set! G4a42@G48be@G48b6 G48be@G48b6) (set! G4a41@G48bc@G48b7 G48bc@G48b7) (set! G4a40@G48ba@G48b5 G48ba@G48b5) (set! G4a3f@G48b3@&i/o-write-rcd G48b3@&i/o-write-rcd) (set! G4a3e@G48b1@&i/o-write-rtd G48b1@&i/o-write-rtd) (set! G4a3d@G48af@i/o-write-error? G48af@i/o-write-error?) (set! G4a3c@G48ad@make-i/o-write-error G48ad@make-i/o-write-error) (set! G4a3b@G48ab@p? G48ab@p?) (set! G4a3a@G48a8@G48a0 G48a8@G48a0) (set! G4a39@G48a6@G48a1 G48a6@G48a1) (set! G4a38@G48a4@G489f G48a4@G489f) (set! G4a37@G489e@&i/o-read-rcd G489e@&i/o-read-rcd) (set! G4a36@G489c@&i/o-read-rtd G489c@&i/o-read-rtd) (set! G4a35@G489a@i/o-read-error? G489a@i/o-read-error?) (set! G4a34@G4898@make-i/o-read-error G4898@make-i/o-read-error) (set! G4a33@G4896@p? G4896@p?) (set! G4a32@G4893@G488b G4893@G488b) (set! G4a31@G4891@G488c G4891@G488c) (set! G4a30@G488f@G488a G488f@G488a) (set! G4a2f@G4889@&i/o-rcd G4889@&i/o-rcd) (set! G4a2e@G4887@&i/o-rtd G4887@&i/o-rtd) (set! G4a2d@G4885@i/o-error? G4885@i/o-error?) (set! G4a2c@G4883@make-i/o-error G4883@make-i/o-error) (set! G4a2b@G4881@p? G4881@p?) (set! G4a2a@G487e@G4876 G487e@G4876) (set! G4a29@G487c@G4877 G487c@G4877) (set! G4a28@G487a@G4875 G487a@G4875) (set! G4a27@G4874@&undefined-rcd G4874@&undefined-rcd) (set! G4a26@G4872@&undefined-rtd G4872@&undefined-rtd) (set! G4a25@G4870@undefined-violation? G4870@undefined-violation?) (set! G4a24@G486e@make-undefined-violation G486e@make-undefined-violation) (set! G4a23@G486c@p? G486c@p?) (set! G4a22@G4869@G4861 G4869@G4861) (set! G4a21@G4867@G4862 G4867@G4862) (set! G4a20@G4865@G4860 G4865@G4860) (set! G4a1f@G485f@&syntax-rcd G485f@&syntax-rcd) (set! G4a1e@G485d@&syntax-rtd G485d@&syntax-rtd) (set! G4a1d@G485b@syntax-violation-subform G485b@syntax-violation-subform) (set! G4a1c@G4859@syntax-violation-form G4859@syntax-violation-form) (set! G4a1b@G4857@syntax-violation? G4857@syntax-violation?) (set! G4a1a@G4855@G4842 G4855@G4842) (set! G4a19@G4853@G4841 G4853@G4841) (set! G4a18@G4851@make-syntax-violation G4851@make-syntax-violation) (set! G4a17@G484f@p? G484f@p?) (set! G4a16@G484c@G4844 G484c@G4844) (set! G4a15@G484a@G4845 G484a@G4845) (set! G4a14@G4848@G4843 G4848@G4843) (set! G4a13@G4840@&lexical-rcd G4840@&lexical-rcd) (set! G4a12@G483e@&lexical-rtd G483e@&lexical-rtd) (set! G4a11@G483c@lexical-violation? G483c@lexical-violation?) (set! G4a10@G483a@make-lexical-violation G483a@make-lexical-violation) (set! G4a0f@G4838@p? G4838@p?) (set! G4a0e@G4835@G482d G4835@G482d) (set! G4a0d@G4833@G482e G4833@G482e) (set! G4a0c@G4831@G482c G4831@G482c) (set! G4a0b@G482b@&implementation-restriction-rcd G482b@&implementation-restriction-rcd) (set! G4a0a@G4829@&implementation-restriction-rtd G4829@&implementation-restriction-rtd) (set! G4a09@G4827@implementation-restriction-violation? G4827@implementation-restriction-violation?) (set! G4a08@G4825@make-implementation-restriction-violation G4825@make-implementation-restriction-violation) (set! G4a07@G4823@p? G4823@p?) (set! G4a06@G4820@G4818 G4820@G4818) (set! G4a05@G481e@G4819 G481e@G4819) (set! G4a04@G481c@G4817 G481c@G4817) (set! G4a03@G4816@&non-continuable-rcd G4816@&non-continuable-rcd) (set! G4a02@G4814@&non-continuable-rtd G4814@&non-continuable-rtd) (set! G4a01@G4812@non-continuable-violation? G4812@non-continuable-violation?) (set! G4a00@G4810@make-non-continuable-violation G4810@make-non-continuable-violation) (set! G49ff@G480e@p? G480e@p?) (set! G49fe@G480b@G4803 G480b@G4803) (set! G49fd@G4809@G4804 G4809@G4804) (set! G49fc@G4807@G4802 G4807@G4802) (set! G49fb@G4801@&who-rcd G4801@&who-rcd) (set! G49fa@G47ff@&who-rtd G47ff@&who-rtd) (set! G49f9@G47fd@condition-who G47fd@condition-who) (set! G49f8@G47fb@who-condition? G47fb@who-condition?) (set! G49f7@G47f9@G47e8 G47f9@G47e8) (set! G49f6@G47f7@make-who-condition G47f7@make-who-condition) (set! G49f5@G47f5@p? G47f5@p?) (set! G49f4@G47f2@G47ea G47f2@G47ea) (set! G49f3@G47f0@G47eb G47f0@G47eb) (set! G49f2@G47ee@G47e9 G47ee@G47e9) (set! G49f1@G47e7@&irritants-rcd G47e7@&irritants-rcd) (set! G49f0@G47e5@&irritants-rtd G47e5@&irritants-rtd) (set! G49ef@G47e3@condition-irritants G47e3@condition-irritants) (set! G49ee@G47e1@irritants-condition? G47e1@irritants-condition?) (set! G49ed@G47df@G47ce G47df@G47ce) (set! G49ec@G47dd@make-irritants-condition G47dd@make-irritants-condition) (set! G49eb@G47db@p? G47db@p?) (set! G49ea@G47d8@G47d0 G47d8@G47d0) (set! G49e9@G47d6@G47d1 G47d6@G47d1) (set! G49e8@G47d4@G47cf G47d4@G47cf) (set! G49e7@G47cd@&assertion-rcd G47cd@&assertion-rcd) (set! G49e6@G47cb@&assertion-rtd G47cb@&assertion-rtd) (set! G49e5@G47c9@assertion-violation? G47c9@assertion-violation?) (set! G49e4@G47c7@make-assertion-violation G47c7@make-assertion-violation) (set! G49e3@G47c5@p? G47c5@p?) (set! G49e2@G47c2@G47ba G47c2@G47ba) (set! G49e1@G47c0@G47bb G47c0@G47bb) (set! G49e0@G47be@G47b9 G47be@G47b9) (set! G49df@G47b8@&violation-rcd G47b8@&violation-rcd) (set! G49de@G47b6@&violation-rtd G47b6@&violation-rtd) (set! G49dd@G47b4@violation? G47b4@violation?) (set! G49dc@G47b2@make-violation G47b2@make-violation) (set! G49db@G47b0@p? G47b0@p?) (set! G49da@G47ad@G47a5 G47ad@G47a5) (set! G49d9@G47ab@G47a6 G47ab@G47a6) (set! G49d8@G47a9@G47a4 G47a9@G47a4) (set! G49d7@G47a3@&error-rcd G47a3@&error-rcd) (set! G49d6@G47a1@&error-rtd G47a1@&error-rtd) (set! G49d5@G479f@error? G479f@error?) (set! G49d4@G479d@make-error G479d@make-error) (set! G49d3@G479b@p? G479b@p?) (set! G49d2@G4798@G4790 G4798@G4790) (set! G49d1@G4796@G4791 G4796@G4791) (set! G49d0@G4794@G478f G4794@G478f) (set! G49cf@G478e@&serious-rcd G478e@&serious-rcd) (set! G49ce@G478c@&serious-rtd G478c@&serious-rtd) (set! G49cd@G478a@serious-condition? G478a@serious-condition?) (set! G49cc@G4788@make-serious-condition G4788@make-serious-condition) (set! G49cb@G4786@p? G4786@p?) (set! G49ca@G4783@G477b G4783@G477b) (set! G49c9@G4781@G477c G4781@G477c) (set! G49c8@G477f@G477a G477f@G477a) (set! G49c7@G4779@&warning-rcd G4779@&warning-rcd) (set! G49c6@G4777@&warning-rtd G4777@&warning-rtd) (set! G49c5@G4775@warning? G4775@warning?) (set! G49c4@G4773@make-warning G4773@make-warning) (set! G49c3@G4771@p? G4771@p?) (set! G49c2@G476e@G4766 G476e@G4766) (set! G49c1@G476c@G4767 G476c@G4767) (set! G49c0@G476a@G4765 G476a@G4765) (set! G49bf@G4764@&message-rcd G4764@&message-rcd) (set! G49be@G4762@&message-rtd G4762@&message-rtd) (set! G49bd@G4760@condition-message G4760@condition-message) (set! G49bc@G475e@message-condition? G475e@message-condition?) (set! G49bb@G475c@G474b G475c@G474b) (set! G49ba@G475a@make-message-condition G475a@make-message-condition) (set! G49b9@G4758@p? G4758@p?) (set! G49b8@G4755@G474d G4755@G474d) (set! G49b7@G4753@G474e G4753@G474e) (set! G49b6@G4751@G474c G4751@G474c) (set! G49b5@G4709@&condition-rcd G4709@&condition-rcd) (set! G49b4@G4707@&condition-rtd G4707@&condition-rtd) (set! G49b3@G4705@make-&condition G4705@make-&condition) (set! G49b2@G4703@&condition? G4703@&condition?) (set! G49b1@G4700@G46f8 G4700@G46f8) (set! G49b0@G46fe@G46f9 G46fe@G46f9) (set! G49af@G46fc@G46f7 G46fc@G46f7)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2739@G26ee@current-primitive-locations (lambda (G4e96@x) ((lambda (G4e98@t) (if G4e98@t (cdr G4e98@t) '#f)) (assq G4e96@x '((&no-nans-rcd . G4a9f@G49ae@&no-nans-rcd) (&no-nans-rtd . G4a9e@G49ac@&no-nans-rtd) (&no-infinities-rcd . G4a97@G4999@&no-infinities-rcd) (&no-infinities-rtd . G4a96@G4997@&no-infinities-rtd) (&i/o-encoding-rcd . G4a8f@G4984@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4a8e@G4982@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4a85@G496a@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4a84@G4968@&i/o-decoding-rtd) (&i/o-port-rcd . G4a7d@G4955@&i/o-port-rcd) (&i/o-port-rtd . G4a7c@G4953@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4a73@G493b@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4a72@G4939@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4a6b@G4926@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4a6a@G4924@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4a63@G4911@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4a62@G490f@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4a5b@G48fc@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4a5a@G48fa@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4a53@G48e7@&i/o-filename-rcd) (&i/o-filename-rtd . G4a52@G48e5@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4a49@G48cd@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4a48@G48cb@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4a3f@G48b3@&i/o-write-rcd) (&i/o-write-rtd . G4a3e@G48b1@&i/o-write-rtd) (&i/o-read-rcd . G4a37@G489e@&i/o-read-rcd) (&i/o-read-rtd . G4a36@G489c@&i/o-read-rtd) (&i/o-rcd . G4a2f@G4889@&i/o-rcd) (&i/o-rtd . G4a2e@G4887@&i/o-rtd) (&undefined-rcd . G4a27@G4874@&undefined-rcd) (&undefined-rtd . G4a26@G4872@&undefined-rtd) (&syntax-rcd . G4a1f@G485f@&syntax-rcd) (&syntax-rtd . G4a1e@G485d@&syntax-rtd) (&lexical-rcd . G4a13@G4840@&lexical-rcd) (&lexical-rtd . G4a12@G483e@&lexical-rtd) (&implementation-restriction-rcd . G4a0b@G482b@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4a0a@G4829@&implementation-restriction-rtd) (&non-continuable-rcd . G4a03@G4816@&non-continuable-rcd) (&non-continuable-rtd . G4a02@G4814@&non-continuable-rtd) (&who-rcd . G49fb@G4801@&who-rcd) (&who-rtd . G49fa@G47ff@&who-rtd) (&irritants-rcd . G49f1@G47e7@&irritants-rcd) (&irritants-rtd . G49f0@G47e5@&irritants-rtd) (&assertion-rcd . G49e7@G47cd@&assertion-rcd) (&assertion-rtd . G49e6@G47cb@&assertion-rtd) (&violation-rcd . G49df@G47b8@&violation-rcd) (&violation-rtd . G49de@G47b6@&violation-rtd) (&error-rcd . G49d7@G47a3@&error-rcd) (&error-rtd . G49d6@G47a1@&error-rtd) (&serious-rcd . G49cf@G478e@&serious-rcd) (&serious-rtd . G49ce@G478c@&serious-rtd) (&warning-rcd . G49c7@G4779@&warning-rcd) (&warning-rtd . G49c6@G4777@&warning-rtd) (&message-rcd . G49bf@G4764@&message-rcd) (&message-rtd . G49be@G4762@&message-rtd) (&condition-rcd . G49b5@G4709@&condition-rcd) (&condition-rtd . G49b4@G4707@&condition-rtd) (syntax-error . G46e9@G2e0c@syntax-error) (syntax-dispatch . G467d@G2d25@syntax-dispatch) (load . G4ba8@G4abb@load) (interaction-environment . G46f1@G2e1c@interaction-environment) (library-path . G294a@G27df@library-path) (make-parameter . G26e8@G2616@make-parameter) (make-variable-transformer . G463b@G2b6c@make-variable-transformer) (identifier? . G46ec@G2e12@identifier?) (generate-temporaries . G46e2@G2dfe@generate-temporaries) (free-identifier=? . G46e3@G2e00@free-identifier=?) (syntax->datum . G46ee@G2e16@syntax->datum) (datum->syntax . G46ed@G2e14@datum->syntax) (bound-identifier=? . G46e4@G2e02@bound-identifier=?) (make-i/o-write-error . G4a3c@G48ad@make-i/o-write-error) (make-i/o-read-error . G4a34@G4898@make-i/o-read-error) (make-i/o-port-error . G4a78@G494b@make-i/o-port-error) (make-i/o-invalid-position-error . G4a44@G48c3@make-i/o-invalid-position-error) (make-i/o-filename-error . G4a4e@G48dd@make-i/o-filename-error) (make-i/o-file-protection-error . G4a58@G48f6@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4a60@G490b@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4a70@G4935@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4a68@G4920@make-i/o-file-already-exists-error) (make-i/o-error . G4a2c@G4883@make-i/o-error) (make-i/o-encoding-error . G4a8a@G497a@make-i/o-encoding-error) (make-i/o-decoding-error . G4a82@G4964@make-i/o-decoding-error) (i/o-write-error? . G4a3d@G48af@i/o-write-error?) (i/o-read-error? . G4a35@G489a@i/o-read-error?) (i/o-port-error? . G4a7a@G494f@i/o-port-error?) (i/o-invalid-position-error? . G4a46@G48c7@i/o-invalid-position-error?) (i/o-filename-error? . G4a50@G48e1@i/o-filename-error?) (i/o-file-protection-error? . G4a59@G48f8@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4a61@G490d@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4a71@G4937@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4a69@G4922@i/o-file-already-exists-error?) (i/o-error? . G4a2d@G4885@i/o-error?) (i/o-error-position . G4a47@G48c9@i/o-error-position) (i/o-error-port . G4a7b@G4951@i/o-error-port) (i/o-error-filename . G4a51@G48e3@i/o-error-filename) (i/o-encoding-error? . G4a8c@G497e@i/o-encoding-error?) (i/o-encoding-error-char . G4a8d@G4980@i/o-encoding-error-char) (i/o-decoding-error? . G4a83@G4966@i/o-decoding-error?) (scheme-report-environment . G46d9@G2dec@scheme-report-environment) (null-environment . G46d8@G2dea@null-environment) (command-line . G4ba5@G4ab5@command-line) (eval . G46db@G2df0@eval) (environment . G46d7@G2de8@environment) (who-condition? . G49f8@G47fb@who-condition?) (warning? . G49c5@G4775@warning?) (violation? . G49dd@G47b4@violation?) (undefined-violation? . G4a25@G4870@undefined-violation?) (syntax-violation? . G4a1b@G4857@syntax-violation?) (syntax-violation-subform . G4a1d@G485b@syntax-violation-subform) (syntax-violation-form . G4a1c@G4859@syntax-violation-form) (syntax-violation . G46eb@G2e10@syntax-violation) (serious-condition? . G49cd@G478a@serious-condition?) (non-continuable-violation? . G4a01@G4812@non-continuable-violation?) (message-condition? . G49bc@G475e@message-condition?) (make-who-condition . G49f6@G47f7@make-who-condition) (make-warning . G49c4@G4773@make-warning) (make-violation . G49dc@G47b2@make-violation) (make-undefined-violation . G4a24@G486e@make-undefined-violation) (make-syntax-violation . G4a18@G4851@make-syntax-violation) (make-serious-condition . G49cc@G4788@make-serious-condition) (make-non-continuable-violation . G4a00@G4810@make-non-continuable-violation) (make-message-condition . G49ba@G475a@make-message-condition) (make-lexical-violation . G4a10@G483a@make-lexical-violation) (make-irritants-condition . G49ec@G47dd@make-irritants-condition) (make-implementation-restriction-violation . G4a08@G4825@make-implementation-restriction-violation) (make-error . G49d4@G479d@make-error) (make-assertion-violation . G49e4@G47c7@make-assertion-violation) (lexical-violation? . G4a11@G483c@lexical-violation?) (irritants-condition? . G49ee@G47e1@irritants-condition?) (implementation-restriction-violation? . G4a09@G4827@implementation-restriction-violation?) (error? . G49d5@G479f@error?) (condition-who . G49f9@G47fd@condition-who) (condition-message . G49bd@G4760@condition-message) (condition-irritants . G49ef@G47e3@condition-irritants) (assertion-violation? . G49e5@G47c9@assertion-violation?) (no-nans-violation? . G4a9d@G49aa@no-nans-violation?) (no-infinities-violation? . G4a95@G4995@no-infinities-violation?) (make-no-nans-violation . G4a9c@G49a8@make-no-nans-violation) (make-no-infinities-violation . G4a94@G4993@make-no-infinities-violation)))))) (G295a@G27ff@install-library 'G4e73 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . G4e68) (format . G4e65) (string-split . G4e5a) (call-process . G4e54) (set-current-directory! . G4e50) (expand-path . G4e4f) (current-directory . G4e4e) (%spawn . G4e4d) (%waitpid . G4e4c) (%ffi-supported? . G4e4b) (%ffi-pointer-ref . G4e4a) (%ffi-pointer->string . G4e49) (%ffi-call->string-or-zero . G4e48) (%ffi-call->double . G4e47) (%ffi-call->void* . G4e46) (%ffi-call->void . G4e45) (%ffi-call->int . G4e44) (%ffi-lookup . G4e43) (%ffi-open . G4e42) (%fork . G4e41) (%pipe . G4e40) (p . G4e3f) (string-upcase . G4e2e) (string-titlecase . G4e2d) (string-normalize-nfkd . G4e2c) (string-normalize-nfkc . G4e2b) (string-normalize-nfd . G4e2a) (string-normalize-nfc . G4e29) (string-foldcase . G4e28) (string-downcase . G4e27) (string-ci>? . G4e26) (string-ci>=? . G4e25) (string-ci=? . G4e24) (string-ci<? . G4e23) (string-ci<=? . G4e22) (char-whitespace? . G4e21) (char-upper-case? . G4e20) (char-title-case? . G4e1f) (char-numeric? . G4e1e) (char-lower-case? . G4e1d) (char-general-category . G4e1c) (char-upcase . G4e1b) (char-titlecase . G4e1a) (char-foldcase . G4e19) (char-downcase . G4e18) (char-ci>? . G4e17) (char-ci>=? . G4e16) (char-ci=? . G4e15) (char-ci<? . G4e14) (char-ci<=? . G4e13) (char-alphabetic? . G4e12) (make-variable-transformer . G2b6b) (identifier? . G2e11) (generate-temporaries . G2dfd) (free-identifier=? . G2dff) (syntax->datum . G2e15) (datum->syntax . G2e13) (bound-identifier=? . G2e01) (record-type-descriptor? . G4e11) (record-predicate . G4e10) (record-mutator . G4e0f) (record-constructor . G4e0e) (record-accessor . G4e0d) (make-record-type-descriptor . G4e0c) (make-record-constructor-descriptor . G4e0b) (record? . G4e0a) (record-type-uid . G4e09) (record-type-sealed? . G4e08) (record-type-parent . G4e07) (record-type-opaque? . G4e06) (record-type-name . G4e05) (record-type-generative? . G4e04) (record-type-field-names . G4e03) (record-rtd . G4e02) (record-field-mutable? . G4e01) (delete-file . G4e00) (file-exists? . G4dff) (vector-sort! . G4dfe) (vector-sort . G4dfd) (list-sort . G4dfc) (symbol-hash . G4dfb) (string-ci-hash . G4dfa) (string-hash . G4df9) (equal-hash . G4df8) (hashtable-equivalence-function . G4df7) (make-hashtable . G4df6) (hashtable-hash-function . G4df5) (make-eqv-hashtable . G4df4) (make-eq-hashtable . G4df3) (hashtable? . G4df2) (hashtable-update! . G4df1) (hashtable-size . G4df0) (hashtable-set! . G4def) (hashtable-ref . G4dee) (hashtable-mutable? . G4ded) (hashtable-keys . G4dec) (hashtable-entries . G4deb) (hashtable-delete! . G4dea) (hashtable-copy . G4de9) (hashtable-contains? . G4de8) (hashtable-clear! . G4de7) (call-with-output-file . G4de6) (call-with-input-file . G4de5) (write-char . G4de4) (write . G4de3) (with-output-to-file . G4de2) (with-input-from-file . G4de1) (read-char . G4de0) (read . G4ddf) (peek-char . G4dde) (open-output-file . G4ddd) (open-input-file . G4ddc) (newline . G4ddb) (display . G4dda) (close-output-port . G4dd9) (close-input-port . G4dd8) (eof-object? . G4dd7) (eof-object . G4dd6) (current-error-port . G4dd5) (current-output-port . G4dd4) (current-input-port . G4dd3) (output-port? . G4dd2) (input-port? . G4dd1) (utf-8-codec . G4dd0) (utf-16-codec . G4dcf) (transcoder-error-handling-mode . G4dce) (transcoder-eol-style . G4dcd) (transcoder-codec . G4dcc) (transcoded-port . G4dcb) (textual-port? . G4dca) (string->bytevector . G4dc9) (standard-output-port . G4dc8) (standard-input-port . G4dc7) (standard-error-port . G4dc6) (set-port-position! . G4dc5) (put-u8 . G4dc4) (put-string . G4dc3) (put-datum . G4dc2) (put-char . G4dc1) (put-bytevector . G4dc0) (port? . G4dbf) (port-transcoder . G4dbe) (port-position . G4dbd) (port-has-set-port-position!? . G4dbc) (port-has-port-position? . G4dbb) (port-eof? . G4dba) (output-port-buffer-mode . G4db9) (open-string-output-port . G4db8) (open-string-input-port . G4db7) (open-file-output-port . G4db6) (open-file-input/output-port . G4db5) (open-file-input-port . G4db4) (open-bytevector-output-port . G4db3) (open-bytevector-input-port . G4db2) (native-transcoder . G4db1) (native-eol-style . G4db0) (make-transcoder . G4daf) (latin-1-codec . G4dae) (make-i/o-write-error . G48ac) (make-i/o-read-error . G4897) (make-i/o-port-error . G494a) (make-i/o-invalid-position-error . G48c2) (make-i/o-filename-error . G48dc) (make-i/o-file-protection-error . G48f5) (make-i/o-file-is-read-only-error . G490a) (make-i/o-file-does-not-exist-error . G4934) (make-i/o-file-already-exists-error . G491f) (make-i/o-error . G4882) (make-i/o-encoding-error . G4979) (make-i/o-decoding-error . G4963) (make-custom-textual-output-port . G4dad) (make-custom-textual-input/output-port . G4dac) (make-custom-textual-input-port . G4dab) (make-custom-binary-output-port . G4daa) (make-custom-binary-input/output-port . G4da9) (make-custom-binary-input-port . G4da8) (make-bytevector . G4da7) (lookahead-u8 . G4da6) (lookahead-char . G4da5) (i/o-write-error? . G48ae) (i/o-read-error? . G4899) (i/o-port-error? . G494e) (i/o-invalid-position-error? . G48c6) (i/o-filename-error? . G48e0) (i/o-file-protection-error? . G48f7) (i/o-file-is-read-only-error? . G490c) (i/o-file-does-not-exist-error? . G4936) (i/o-file-already-exists-error? . G4921) (i/o-error? . G4884) (i/o-error-position . G48c8) (i/o-error-port . G4950) (i/o-error-filename . G48e2) (i/o-encoding-error? . G497d) (i/o-encoding-error-char . G497f) (i/o-decoding-error? . G4965) (get-u8 . G4da4) (get-string-n! . G4da3) (get-string-n . G4da2) (get-string-all . G4da1) (get-line . G4da0) (get-datum . G4d9f) (get-char . G4d9e) (get-bytevector-some . G4d9d) (get-bytevector-n! . G4d9c) (get-bytevector-n . G4d9b) (get-bytevector-all . G4d9a) (flush-output-port . G4d99) (close-port . G4d98) (exit . G4d90) (command-line . G4ab4) (string-fill! . G4d8f) (string-set! . G4d8e) (set-cdr! . G4d8d) (set-car! . G4d8c) (remove . G4d8b) (remv . G4d8a) (remp . G4d89) (remq . G4d88) (partition . G4d87) (memv . G4d86) (memq . G4d85) (memp . G4d84) (member . G4d83) (exists . G4d82) (for-all . G4d81) (fold-right . G4d80) (fold-left . G4d7f) (find . G4d7e) (filter . G4d7d) (cons* . G4d7c) (assv . G4d7b) (assq . G4d7a) (assp . G4d79) (assoc . G4d78) (call-with-string-output-port . G4d77) (call-with-port . G4d76) (call-with-bytevector-output-port . G4d75) (bytevector->string . G4d74) (buffer-mode? . G4d73) (binary-port? . G4d72) (with-exception-handler . G4d71) (raise-continuable . G4d70) (raise . G4d6f) (eval . G2def) (environment . G2de7) (make-enumeration . G4d6e) (enum-set=? . G4d6d) (enum-set-universe . G4d6c) (enum-set-union . G4d6b) (enum-set-subset? . G4d6a) (enum-set-projection . G4d69) (enum-set-member? . G4d68) (enum-set-intersection . G4d67) (enum-set-indexer . G4d66) (enum-set-difference . G4d65) (enum-set-constructor . G4d64) (enum-set-complement . G4d63) (enum-set->list . G4d62) (who-condition? . G47fa) (warning? . G4774) (violation? . G47b3) (undefined-violation? . G486f) (syntax-violation? . G4856) (syntax-violation-subform . G485a) (syntax-violation-form . G4858) (syntax-violation . G2e0f) (simple-conditions . G4d61) (serious-condition? . G4789) (non-continuable-violation? . G4811) (message-condition? . G475d) (make-who-condition . G47f6) (make-warning . G4772) (make-violation . G47b1) (make-undefined-violation . G486d) (make-syntax-violation . G4850) (make-serious-condition . G4787) (make-non-continuable-violation . G480f) (make-message-condition . G4759) (make-lexical-violation . G4839) (make-irritants-condition . G47dc) (make-implementation-restriction-violation . G4824) (make-error . G479c) (make-assertion-violation . G47c6) (lexical-violation? . G483b) (irritants-condition? . G47e0) (implementation-restriction-violation? . G4826) (error? . G479e) (condition-who . G47fc) (condition-predicate . G4d60) (condition-message . G475f) (condition-irritants . G47e2) (condition-accessor . G4d5f) (condition . G4d5e) (assertion-violation? . G47c8) (condition? . G4d5d) (utf32->string . G4d5c) (utf16->string . G4d5b) (utf8->string . G4d5a) (uint-list->bytevector . G4d59) (u8-list->bytevector . G4d58) (string->utf8 . G4d57) (string->utf32 . G4d56) (string->utf16 . G4d55) (sint-list->bytevector . G4d54) (native-endianness . G4d53) (bytevector? . G4d52) (bytevector=? . G4d51) (bytevector-uint-set! . G4d50) (bytevector-uint-ref . G4d4f) (bytevector-u8-set! . G4d4e) (bytevector-u8-ref . G4d4d) (bytevector-u64-set! . G4d4c) (bytevector-u64-ref . G4d4b) (bytevector-u64-native-set! . G4d4a) (bytevector-u64-native-ref . G4d49) (bytevector-u32-set! . G4d48) (bytevector-u32-ref . G4d47) (bytevector-u32-native-set! . G4d46) (bytevector-u32-native-ref . G4d45) (bytevector-u16-set! . G4d44) (bytevector-u16-ref . G4d43) (bytevector-u16-native-set! . G4d42) (bytevector-u16-native-ref . G4d41) (bytevector-sint-set! . G4d40) (bytevector-sint-ref . G4d3f) (bytevector-s8-set! . G4d3e) (bytevector-s8-ref . G4d3d) (bytevector-s64-set! . G4d3c) (bytevector-s64-ref . G4d3b) (bytevector-s64-native-set! . G4d3a) (bytevector-s64-native-ref . G4d39) (bytevector-s32-set! . G4d38) (bytevector-s32-ref . G4d37) (bytevector-s32-native-set! . G4d36) (bytevector-s32-native-ref . G4d35) (bytevector-s16-set! . G4d34) (bytevector-s16-ref . G4d33) (bytevector-s16-native-set! . G4d32) (bytevector-s16-native-ref . G4d31) (bytevector-length . G4d30) (bytevector-ieee-single-ref . G4d2f) (bytevector-ieee-single-set! . G4d2e) (bytevector-ieee-single-native-set! . G4d2d) (bytevector-ieee-single-native-ref . G4d2c) (bytevector-ieee-double-set! . G4d2b) (bytevector-ieee-double-ref . G4d2a) (bytevector-ieee-double-native-set! . G4d29) (bytevector-ieee-double-native-ref . G4d28) (bytevector-fill! . G4d27) (bytevector-copy! . G4d26) (bytevector-copy . G4d25) (bytevector->uint-list . G4d24) (bytevector->u8-list . G4d23) (bytevector->sint-list . G4d22) (no-nans-violation? . G49a9) (no-infinities-violation? . G4994) (make-no-nans-violation . G49a7) (make-no-infinities-violation . G4992) (real->flonum . G4d21) (flzero? . G4d20) (fltruncate . G4d1f) (fltan . G4d1e) (flsqrt . G4d1d) (flsin . G4d1c) (flround . G4d1b) (flpositive? . G4d1a) (flonum? . G4d19) (flodd? . G4d18) (flnumerator . G4d17) (flnegative? . G4d16) (flnan? . G4d15) (flmod0 . G4d14) (flmod . G4d13) (flmin . G4d12) (flmax . G4d11) (fllog . G4d10) (flinteger? . G4d0f) (flinfinite? . G4d0e) (flfloor . G4d0d) (flfinite? . G4d0c) (flexpt . G4d0b) (flexp . G4d0a) (fleven? . G4d09) (fldiv0-and-mod0 . G4d08) (fldiv0 . G4d07) (fldiv-and-mod . G4d06) (fldiv . G4d05) (fldenominator . G4d04) (flcos . G4d03) (flceiling . G4d02) (flatan . G4d01) (flasin . G4d00) (flacos . G4cff) (flabs . G4cfe) (fl>? . G4cfd) (fl>=? . G4cfc) (fl=? . G4cfb) (fl<? . G4cfa) (fl<=? . G4cf9) (fl/ . G4cf8) (fl- . G4cf7) (fl+ . G4cf6) (fl* . G4cf5) (fixnum->flonum . G4cf4) (fxzero? . G4cf3) (fxxor . G4cf2) (fxrotate-bit-field . G4cf1) (fxreverse-bit-field . G4cf0) (fxpositive? . G4cef) (fxodd? . G4cee) (fxnot . G4ced) (fxnegative? . G4cec) (fxmod0 . G4ceb) (fxmod . G4cea) (fxmin . G4ce9) (fxmax . G4ce8) (fxlength . G4ce7) (fxior . G4ce6) (fxif . G4ce5) (fxfirst-bit-set . G4ce4) (fxeven? . G4ce3) (fxdiv0-and-mod0 . G4ce2) (fxdiv0 . G4ce1) (fxdiv-and-mod . G4ce0) (fxdiv . G4cdf) (fxcopy-bit-field . G4cde) (fxcopy-bit . G4cdd) (fxbit-set? . G4cdc) (fxbit-field . G4cdb) (fxbit-count . G4cda) (fxarithmetic-shift-right . G4cd9) (fxarithmetic-shift-left . G4cd8) (fxarithmetic-shift . G4cd7) (fxand . G4cd6) (fx>? . G4cd5) (fx>=? . G4cd4) (fx=? . G4cd3) (fx<? . G4cd2) (fx<=? . G4cd1) (fx-/carry . G4cd0) (fx- . G4ccf) (fx+/carry . G4cce) (fx+ . G4ccd) (fx*/carry . G4ccc) (fx* . G4ccb) (greatest-fixnum . G4cca) (least-fixnum . G4cc9) (fixnum-width . G4cc8) (fixnum? . G4cc7) (bitwise-rotate-bit-field . G4cc6) (bitwise-reverse-bit-field . G4cc5) (bitwise-length . G4cc4) (bitwise-if . G4cc3) (bitwise-first-bit-set . G4cc2) (bitwise-copy-bit-field . G4cc1) (bitwise-copy-bit . G4cc0) (bitwise-bit-set? . G4cbf) (bitwise-bit-field . G4cbe) (bitwise-bit-count . G4cbd) (bitwise-xor . G4cbc) (bitwise-ior . G4cbb) (bitwise-and . G4cba) (bitwise-not . G4cb9) (bitwise-arithmetic-shift-right . G4cb8) (bitwise-arithmetic-shift-left . G4cb7) (bitwise-arithmetic-shift . G4cb6) (zero? . G4cb5) (vector? . G4cb4) (vector-set! . G4cb3) (vector-ref . G4cb2) (vector-map . G4cb1) (vector-length . G4cb0) (vector-for-each . G4caf) (vector-fill! . G4cae) (vector->list . G4cad) (vector . G4cac) (values . G4cab) (truncate . G4caa) (tan . G4ca9) (symbol? . G4ca8) (symbol=? . G4ca7) (symbol->string . G4ca6) (substring . G4ca5) (string? . G4ca4) (string>? . G4ca3) (string>=? . G4ca2) (string=? . G4ca1) (string<? . G4ca0) (string<=? . G4c9f) (string-ref . G4c9e) (string-length . G4c9d) (string-for-each . G4c9c) (string-copy . G4c9b) (string-append . G4c9a) (string->symbol . G4c99) (string->number . G4c98) (string->list . G4c97) (string . G4c96) (sqrt . G4c95) (sin . G4c94) (round . G4c93) (reverse . G4c92) (real? . G4c91) (real-valued? . G4c90) (real-part . G4c8f) (rationalize . G4c8e) (rational? . G4c8d) (rational-valued? . G4c8c) (procedure? . G4c8b) (positive? . G4c8a) (pair? . G4c89) (odd? . G4c88) (numerator . G4c87) (number? . G4c86) (number->string . G4c85) (null? . G4c84) (not . G4c83) (negative? . G4c82) (nan? . G4c81) (min . G4c80) (max . G4c7f) (map . G4c7e) (make-vector . G4c7d) (make-string . G4c7c) (make-rectangular . G4c7b) (make-polar . G4c7a) (magnitude . G4c79) (log . G4c78) (list? . G4c77) (list-tail . G4c76) (list-ref . G4c75) (list->vector . G4c74) (list->string . G4c73) (list . G4c72) (length . G4c71) (lcm . G4c70) (integer? . G4c6f) (integer-valued? . G4c6e) (integer->char . G4c6d) (infinite? . G4c6c) (inexact? . G4c6b) (inexact . G4c6a) (imag-part . G4c69) (gcd . G4c68) (for-each . G4c67) (floor . G4c66) (finite? . G4c65) (expt . G4c64) (exp . G4c63) (exact? . G4c62) (exact-integer-sqrt . G4c61) (exact . G4c60) (even? . G4c5f) (error . G4c5e) (eqv? . G4c5d) (equal? . G4c5c) (eq? . G4c5b) (dynamic-wind . G4c5a) (div0-and-mod0 . G4c59) (mod0 . G4c58) (div0 . G4c57) (div-and-mod . G4c56) (mod . G4c55) (div . G4c54) (denominator . G4c53) (cos . G4c52) (cons . G4c51) (complex? . G4c50) (char? . G4c4f) (char>? . G4c4e) (char>=? . G4c4d) (char=? . G4c4c) (char<? . G4c4b) (char<=? . G4c4a) (char->integer . G4c49) (ceiling . G4c48) (call-with-values . G4c47) (call/cc . G4c46) (call-with-current-continuation . G4c45) (cddddr . G4c44) (cdddar . G4c43) (cddadr . G4c42) (cddaar . G4c41) (cdaddr . G4c40) (cdadar . G4c3f) (cdaadr . G4c3e) (cdaaar . G4c3d) (cadddr . G4c3c) (caddar . G4c3b) (cadadr . G4c3a) (cadaar . G4c39) (caaddr . G4c38) (caadar . G4c37) (caaadr . G4c36) (caaaar . G4c35) (cdddr . G4c34) (cddar . G4c33) (cdadr . G4c32) (cdaar . G4c31) (caddr . G4c30) (cadar . G4c2f) (caadr . G4c2e) (caaar . G4c2d) (cddr . G4c2c) (cdar . G4c2b) (cadr . G4c2a) (caar . G4c29) (cdr . G4c28) (car . G4c27) (boolean? . G4c26) (boolean=? . G4c25) (atan . G4c24) (assertion-violation . G4c23) (asin . G4c22) (apply . G4c21) (append . G4c20) (angle . G4c1f) (acos . G4c1e) (abs . G4c1d) (/ . G4c1c) (* . G4c1b) (- . G4c1a) (+ . G4c19) (>= . G4c18) (> . G4c17) (= . G4c16) (<= . G4c15) (< . G4c14) (library . G4c13) (&no-nans . G4c12) (&no-infinities . G4c11) (&i/o-encoding . G4c10) (&i/o-decoding . G4c0f) (&i/o-port . G4c0e) (&i/o-file-does-not-exist . G4c0d) (&i/o-file-already-exists . G4c0c) (&i/o-file-is-read-only . G4c0b) (&i/o-file-protection . G4c0a) (&i/o-filename . G4c09) (&i/o-invalid-position . G4c08) (&i/o-write . G4c07) (&i/o-read . G4c06) (&i/o . G4c05) (&undefined . G4c04) (&syntax . G4c03) (&lexical . G4c02) (&implementation-restriction . G4c01) (&non-continuable . G4c00) (&who . G4bff) (&irritants . G4bfe) (&assertion . G4bfd) (&violation . G4bfc) (&error . G4bfb) (&serious . G4bfa) (&warning . G4bf9) (&message . G4bf8) (&condition . G4bf7) (define-condition-type . G4bf6) (define-enumeration . G4bf5) (define-record-type . G4bf4) (parent-rtd . G4bf3) (nongenerative . G4bf2) (opaque . G4bf1) (sealed . G4bf0) (protocol . G4bef) (parent . G4bee) (immutable . G4bed) (mutable . G4bec) (fields . G4beb) (error-handling-mode . G4bea) (file-options . G4be9) (buffer-mode . G4be8) (eol-style . G4be7) (guard . G4be6) (unsyntax-splicing . G4be3) (unsyntax . G4be2) (unquote-splicing . G4be1) (unquote . G4be0) (_ . G4bdf) (else . G4bde) (=> . G4bdd) (... . G4bdc) (assert . G4bdb) (endianness . G4bda) (do . G4bd7) (cond . G4bd6) (let* . G4bd5) (let . G4bd4) (let*-values . G4bd3) (let-values . G4bd2) (identifier-syntax . G4bd1) (with-syntax . G4bd0) (quasisyntax . G4bcf) (quasiquote . G4bce) (syntax-rules . G4bcd) (include . G4bcc) (record-constructor-descriptor . G4bca) (record-type-descriptor . G4bc9) (case . G4bc8) (unless . G4bc6) (when . G4bc5) (or . G4bc4) (and . G4bc3) (if . G4bc2) (letrec* . G4bc1) (letrec . G4bc0) (case-lambda . G4bbe) (lambda . G4bbd) (syntax . G4bbc) (syntax-case . G4bbb) (quote . G4bba) (letrec-syntax . G4bb8) (let-syntax . G4bb7) (set! . G4bb6) (import . G4bb5) (begin . G4bb4) (define-syntax . G4bb2) (define . G4bb1)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e74 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4d91) (unquote-splicing . G4be1) (unquote . G4be0) (_ . G4bdf) (else . G4bde) (=> . G4bdd) (... . G4bdc) (delay . G4bd9) (do . G4bd7) (cond . G4bd6) (let* . G4bd5) (let . G4bd4) (quasiquote . G4bce) (syntax-rules . G4bcd) (case . G4bc8) (or . G4bc4) (and . G4bc3) (if . G4bc2) (letrec . G4bc0) (lambda . G4bbd) (quote . G4bba) (letrec-syntax . G4bb8) (let-syntax . G4bb7) (set! . G4bb6) (begin . G4bb4) (define-syntax . G4bb2) (define . G4bb1)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e75 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G4e26) (string-ci>=? . G4e25) (string-ci=? . G4e24) (string-ci<? . G4e23) (string-ci<=? . G4e22) (char-whitespace? . G4e21) (char-upper-case? . G4e20) (char-numeric? . G4e1e) (char-lower-case? . G4e1d) (char-upcase . G4e1b) (char-downcase . G4e18) (char-ci>? . G4e17) (char-ci>=? . G4e16) (char-ci=? . G4e15) (char-ci<? . G4e14) (char-ci<=? . G4e13) (char-alphabetic? . G4e12) (call-with-output-file . G4de6) (call-with-input-file . G4de5) (write-char . G4de4) (write . G4de3) (with-output-to-file . G4de2) (with-input-from-file . G4de1) (read-char . G4de0) (read . G4ddf) (peek-char . G4dde) (open-output-file . G4ddd) (open-input-file . G4ddc) (newline . G4ddb) (display . G4dda) (close-output-port . G4dd9) (close-input-port . G4dd8) (eof-object . G4dd6) (current-output-port . G4dd4) (current-input-port . G4dd3) (output-port? . G4dd2) (input-port? . G4dd1) (scheme-report-environment . G2deb) (quotient . G4d97) (null-environment . G2de9) (remainder . G4d96) (modulo . G4d95) (inexact->exact . G4d94) (force . G4d93) (exact->inexact . G4d92) (make-promise . G4d91) (string-fill! . G4d8f) (string-set! . G4d8e) (set-cdr! . G4d8d) (set-car! . G4d8c) (memv . G4d86) (memq . G4d85) (member . G4d83) (assv . G4d7b) (assq . G4d7a) (assoc . G4d78) (eval . G2def) (zero? . G4cb5) (vector? . G4cb4) (vector-set! . G4cb3) (vector-ref . G4cb2) (vector-length . G4cb0) (vector-fill! . G4cae) (vector->list . G4cad) (vector . G4cac) (values . G4cab) (truncate . G4caa) (tan . G4ca9) (symbol? . G4ca8) (symbol->string . G4ca6) (substring . G4ca5) (string? . G4ca4) (string>? . G4ca3) (string>=? . G4ca2) (string=? . G4ca1) (string<? . G4ca0) (string<=? . G4c9f) (string-ref . G4c9e) (string-length . G4c9d) (string-copy . G4c9b) (string-append . G4c9a) (string->symbol . G4c99) (string->number . G4c98) (string->list . G4c97) (string . G4c96) (sqrt . G4c95) (sin . G4c94) (round . G4c93) (reverse . G4c92) (real? . G4c91) (real-part . G4c8f) (rationalize . G4c8e) (rational? . G4c8d) (procedure? . G4c8b) (positive? . G4c8a) (pair? . G4c89) (odd? . G4c88) (numerator . G4c87) (number? . G4c86) (number->string . G4c85) (not . G4c83) (negative? . G4c82) (min . G4c80) (max . G4c7f) (map . G4c7e) (make-vector . G4c7d) (make-string . G4c7c) (make-rectangular . G4c7b) (make-polar . G4c7a) (magnitude . G4c79) (log . G4c78) (list? . G4c77) (list-tail . G4c76) (list-ref . G4c75) (list->vector . G4c74) (list->string . G4c73) (list . G4c72) (length . G4c71) (lcm . G4c70) (integer? . G4c6f) (integer->char . G4c6d) (inexact? . G4c6b) (imag-part . G4c69) (gcd . G4c68) (for-each . G4c67) (floor . G4c66) (expt . G4c64) (exp . G4c63) (exact? . G4c62) (even? . G4c5f) (eqv? . G4c5d) (equal? . G4c5c) (eq? . G4c5b) (dynamic-wind . G4c5a) (denominator . G4c53) (cos . G4c52) (cons . G4c51) (complex? . G4c50) (char? . G4c4f) (char>? . G4c4e) (char>=? . G4c4d) (char=? . G4c4c) (char<? . G4c4b) (char<=? . G4c4a) (char->integer . G4c49) (ceiling . G4c48) (call-with-values . G4c47) (call-with-current-continuation . G4c45) (cddddr . G4c44) (cdddar . G4c43) (cddadr . G4c42) (cddaar . G4c41) (cdaddr . G4c40) (cdadar . G4c3f) (cdaadr . G4c3e) (cdaaar . G4c3d) (cadddr . G4c3c) (caddar . G4c3b) (cadadr . G4c3a) (cadaar . G4c39) (caaddr . G4c38) (caadar . G4c37) (caaadr . G4c36) (caaaar . G4c35) (cdddr . G4c34) (cddar . G4c33) (cdadr . G4c32) (cdaar . G4c31) (caddr . G4c30) (cadar . G4c2f) (caadr . G4c2e) (caaar . G4c2d) (cddr . G4c2c) (cdar . G4c2b) (cadr . G4c2a) (caar . G4c29) (cdr . G4c28) (car . G4c27) (boolean? . G4c26) (atan . G4c24) (asin . G4c22) (apply . G4c21) (append . G4c20) (angle . G4c1f) (acos . G4c1e) (abs . G4c1d) (/ . G4c1c) (* . G4c1b) (- . G4c1a) (+ . G4c19) (>= . G4c18) (> . G4c17) (= . G4c16) (<= . G4c15) (< . G4c14) (unquote-splicing . G4be1) (unquote . G4be0) (else . G4bde) (=> . G4bdd) (... . G4bdc) (delay . G4bd9) (do . G4bd7) (cond . G4bd6) (let* . G4bd5) (let . G4bd4) (quasiquote . G4bce) (syntax-rules . G4bcd) (case . G4bc8) (or . G4bc4) (and . G4bc3) (if . G4bc2) (letrec . G4bc0) (lambda . G4bbd) (quote . G4bba) (letrec-syntax . G4bb8) (let-syntax . G4bb7) (set! . G4bb6) (begin . G4bb4) (define-syntax . G4bb2) (define . G4bb1)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e76 '(psyntax modules) '() '() '() '() '((module . G4bb3)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e77 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e78 '(rnrs) '(6) '() '() '() '((regexp? . G4e6b) (string-upcase . G4e2e) (string-titlecase . G4e2d) (string-normalize-nfkd . G4e2c) (string-normalize-nfkc . G4e2b) (string-normalize-nfd . G4e2a) (string-normalize-nfc . G4e29) (string-foldcase . G4e28) (string-downcase . G4e27) (string-ci>? . G4e26) (string-ci>=? . G4e25) (string-ci=? . G4e24) (string-ci<? . G4e23) (string-ci<=? . G4e22) (char-whitespace? . G4e21) (char-upper-case? . G4e20) (char-title-case? . G4e1f) (char-numeric? . G4e1e) (char-lower-case? . G4e1d) (char-general-category . G4e1c) (char-upcase . G4e1b) (char-titlecase . G4e1a) (char-foldcase . G4e19) (char-downcase . G4e18) (char-ci>? . G4e17) (char-ci>=? . G4e16) (char-ci=? . G4e15) (char-ci<? . G4e14) (char-ci<=? . G4e13) (char-alphabetic? . G4e12) (make-variable-transformer . G2b6b) (identifier? . G2e11) (generate-temporaries . G2dfd) (free-identifier=? . G2dff) (syntax->datum . G2e15) (datum->syntax . G2e13) (bound-identifier=? . G2e01) (record-type-descriptor? . G4e11) (record-predicate . G4e10) (record-mutator . G4e0f) (record-constructor . G4e0e) (record-accessor . G4e0d) (make-record-type-descriptor . G4e0c) (make-record-constructor-descriptor . G4e0b) (record? . G4e0a) (record-type-uid . G4e09) (record-type-sealed? . G4e08) (record-type-parent . G4e07) (record-type-opaque? . G4e06) (record-type-name . G4e05) (record-type-generative? . G4e04) (record-type-field-names . G4e03) (record-rtd . G4e02) (record-field-mutable? . G4e01) (delete-file . G4e00) (file-exists? . G4dff) (vector-sort! . G4dfe) (vector-sort . G4dfd) (list-sort . G4dfc) (symbol-hash . G4dfb) (string-ci-hash . G4dfa) (string-hash . G4df9) (equal-hash . G4df8) (hashtable-equivalence-function . G4df7) (make-hashtable . G4df6) (hashtable-hash-function . G4df5) (make-eqv-hashtable . G4df4) (make-eq-hashtable . G4df3) (hashtable? . G4df2) (hashtable-update! . G4df1) (hashtable-size . G4df0) (hashtable-set! . G4def) (hashtable-ref . G4dee) (hashtable-mutable? . G4ded) (hashtable-keys . G4dec) (hashtable-entries . G4deb) (hashtable-delete! . G4dea) (hashtable-copy . G4de9) (hashtable-contains? . G4de8) (hashtable-clear! . G4de7) (call-with-output-file . G4de6) (call-with-input-file . G4de5) (write-char . G4de4) (write . G4de3) (with-output-to-file . G4de2) (with-input-from-file . G4de1) (read-char . G4de0) (read . G4ddf) (peek-char . G4dde) (open-output-file . G4ddd) (open-input-file . G4ddc) (newline . G4ddb) (display . G4dda) (close-output-port . G4dd9) (close-input-port . G4dd8) (eof-object? . G4dd7) (eof-object . G4dd6) (current-error-port . G4dd5) (current-output-port . G4dd4) (current-input-port . G4dd3) (output-port? . G4dd2) (input-port? . G4dd1) (utf-8-codec . G4dd0) (utf-16-codec . G4dcf) (transcoder-error-handling-mode . G4dce) (transcoder-eol-style . G4dcd) (transcoder-codec . G4dcc) (transcoded-port . G4dcb) (textual-port? . G4dca) (string->bytevector . G4dc9) (standard-output-port . G4dc8) (standard-input-port . G4dc7) (standard-error-port . G4dc6) (set-port-position! . G4dc5) (put-u8 . G4dc4) (put-string . G4dc3) (put-datum . G4dc2) (put-char . G4dc1) (put-bytevector . G4dc0) (port? . G4dbf) (port-transcoder . G4dbe) (port-position . G4dbd) (port-has-set-port-position!? . G4dbc) (port-has-port-position? . G4dbb) (port-eof? . G4dba) (output-port-buffer-mode . G4db9) (open-string-output-port . G4db8) (open-string-input-port . G4db7) (open-file-output-port . G4db6) (open-file-input/output-port . G4db5) (open-file-input-port . G4db4) (open-bytevector-output-port . G4db3) (open-bytevector-input-port . G4db2) (native-transcoder . G4db1) (native-eol-style . G4db0) (make-transcoder . G4daf) (latin-1-codec . G4dae) (make-i/o-write-error . G48ac) (make-i/o-read-error . G4897) (make-i/o-port-error . G494a) (make-i/o-invalid-position-error . G48c2) (make-i/o-filename-error . G48dc) (make-i/o-file-protection-error . G48f5) (make-i/o-file-is-read-only-error . G490a) (make-i/o-file-does-not-exist-error . G4934) (make-i/o-file-already-exists-error . G491f) (make-i/o-error . G4882) (make-i/o-encoding-error . G4979) (make-i/o-decoding-error . G4963) (make-custom-textual-output-port . G4dad) (make-custom-textual-input/output-port . G4dac) (make-custom-textual-input-port . G4dab) (make-custom-binary-output-port . G4daa) (make-custom-binary-input/output-port . G4da9) (make-custom-binary-input-port . G4da8) (make-bytevector . G4da7) (lookahead-u8 . G4da6) (lookahead-char . G4da5) (i/o-write-error? . G48ae) (i/o-read-error? . G4899) (i/o-port-error? . G494e) (i/o-invalid-position-error? . G48c6) (i/o-filename-error? . G48e0) (i/o-file-protection-error? . G48f7) (i/o-file-is-read-only-error? . G490c) (i/o-file-does-not-exist-error? . G4936) (i/o-file-already-exists-error? . G4921) (i/o-error? . G4884) (i/o-error-position . G48c8) (i/o-error-port . G4950) (i/o-error-filename . G48e2) (i/o-encoding-error? . G497d) (i/o-encoding-error-char . G497f) (i/o-decoding-error? . G4965) (get-u8 . G4da4) (get-string-n! . G4da3) (get-string-n . G4da2) (get-string-all . G4da1) (get-line . G4da0) (get-datum . G4d9f) (get-char . G4d9e) (get-bytevector-some . G4d9d) (get-bytevector-n! . G4d9c) (get-bytevector-n . G4d9b) (get-bytevector-all . G4d9a) (flush-output-port . G4d99) (close-port . G4d98) (exit . G4d90) (command-line . G4ab4) (remove . G4d8b) (remv . G4d8a) (remp . G4d89) (remq . G4d88) (partition . G4d87) (memv . G4d86) (memq . G4d85) (memp . G4d84) (member . G4d83) (exists . G4d82) (for-all . G4d81) (fold-right . G4d80) (fold-left . G4d7f) (find . G4d7e) (filter . G4d7d) (cons* . G4d7c) (assv . G4d7b) (assq . G4d7a) (assp . G4d79) (assoc . G4d78) (call-with-string-output-port . G4d77) (call-with-port . G4d76) (call-with-bytevector-output-port . G4d75) (bytevector->string . G4d74) (buffer-mode? . G4d73) (binary-port? . G4d72) (with-exception-handler . G4d71) (raise-continuable . G4d70) (raise . G4d6f) (make-enumeration . G4d6e) (enum-set=? . G4d6d) (enum-set-universe . G4d6c) (enum-set-union . G4d6b) (enum-set-subset? . G4d6a) (enum-set-projection . G4d69) (enum-set-member? . G4d68) (enum-set-intersection . G4d67) (enum-set-indexer . G4d66) (enum-set-difference . G4d65) (enum-set-constructor . G4d64) (enum-set-complement . G4d63) (enum-set->list . G4d62) (who-condition? . G47fa) (warning? . G4774) (violation? . G47b3) (undefined-violation? . G486f) (syntax-violation? . G4856) (syntax-violation-subform . G485a) (syntax-violation-form . G4858) (syntax-violation . G2e0f) (simple-conditions . G4d61) (serious-condition? . G4789) (non-continuable-violation? . G4811) (message-condition? . G475d) (make-who-condition . G47f6) (make-warning . G4772) (make-violation . G47b1) (make-undefined-violation . G486d) (make-syntax-violation . G4850) (make-serious-condition . G4787) (make-non-continuable-violation . G480f) (make-message-condition . G4759) (make-lexical-violation . G4839) (make-irritants-condition . G47dc) (make-implementation-restriction-violation . G4824) (make-error . G479c) (make-assertion-violation . G47c6) (lexical-violation? . G483b) (irritants-condition? . G47e0) (implementation-restriction-violation? . G4826) (error? . G479e) (condition-who . G47fc) (condition-predicate . G4d60) (condition-message . G475f) (condition-irritants . G47e2) (condition-accessor . G4d5f) (condition . G4d5e) (assertion-violation? . G47c8) (condition? . G4d5d) (utf32->string . G4d5c) (utf16->string . G4d5b) (utf8->string . G4d5a) (uint-list->bytevector . G4d59) (u8-list->bytevector . G4d58) (string->utf8 . G4d57) (string->utf32 . G4d56) (string->utf16 . G4d55) (sint-list->bytevector . G4d54) (native-endianness . G4d53) (bytevector? . G4d52) (bytevector=? . G4d51) (bytevector-uint-set! . G4d50) (bytevector-uint-ref . G4d4f) (bytevector-u8-set! . G4d4e) (bytevector-u8-ref . G4d4d) (bytevector-u64-set! . G4d4c) (bytevector-u64-ref . G4d4b) (bytevector-u64-native-set! . G4d4a) (bytevector-u64-native-ref . G4d49) (bytevector-u32-set! . G4d48) (bytevector-u32-ref . G4d47) (bytevector-u32-native-set! . G4d46) (bytevector-u32-native-ref . G4d45) (bytevector-u16-set! . G4d44) (bytevector-u16-ref . G4d43) (bytevector-u16-native-set! . G4d42) (bytevector-u16-native-ref . G4d41) (bytevector-sint-set! . G4d40) (bytevector-sint-ref . G4d3f) (bytevector-s8-set! . G4d3e) (bytevector-s8-ref . G4d3d) (bytevector-s64-set! . G4d3c) (bytevector-s64-ref . G4d3b) (bytevector-s64-native-set! . G4d3a) (bytevector-s64-native-ref . G4d39) (bytevector-s32-set! . G4d38) (bytevector-s32-ref . G4d37) (bytevector-s32-native-set! . G4d36) (bytevector-s32-native-ref . G4d35) (bytevector-s16-set! . G4d34) (bytevector-s16-ref . G4d33) (bytevector-s16-native-set! . G4d32) (bytevector-s16-native-ref . G4d31) (bytevector-length . G4d30) (bytevector-ieee-single-ref . G4d2f) (bytevector-ieee-single-set! . G4d2e) (bytevector-ieee-single-native-set! . G4d2d) (bytevector-ieee-single-native-ref . G4d2c) (bytevector-ieee-double-set! . G4d2b) (bytevector-ieee-double-ref . G4d2a) (bytevector-ieee-double-native-set! . G4d29) (bytevector-ieee-double-native-ref . G4d28) (bytevector-fill! . G4d27) (bytevector-copy! . G4d26) (bytevector-copy . G4d25) (bytevector->uint-list . G4d24) (bytevector->u8-list . G4d23) (bytevector->sint-list . G4d22) (no-nans-violation? . G49a9) (no-infinities-violation? . G4994) (make-no-nans-violation . G49a7) (make-no-infinities-violation . G4992) (real->flonum . G4d21) (flzero? . G4d20) (fltruncate . G4d1f) (fltan . G4d1e) (flsqrt . G4d1d) (flsin . G4d1c) (flround . G4d1b) (flpositive? . G4d1a) (flonum? . G4d19) (flodd? . G4d18) (flnumerator . G4d17) (flnegative? . G4d16) (flnan? . G4d15) (flmod0 . G4d14) (flmod . G4d13) (flmin . G4d12) (flmax . G4d11) (fllog . G4d10) (flinteger? . G4d0f) (flinfinite? . G4d0e) (flfloor . G4d0d) (flfinite? . G4d0c) (flexpt . G4d0b) (flexp . G4d0a) (fleven? . G4d09) (fldiv0-and-mod0 . G4d08) (fldiv0 . G4d07) (fldiv-and-mod . G4d06) (fldiv . G4d05) (fldenominator . G4d04) (flcos . G4d03) (flceiling . G4d02) (flatan . G4d01) (flasin . G4d00) (flacos . G4cff) (flabs . G4cfe) (fl>? . G4cfd) (fl>=? . G4cfc) (fl=? . G4cfb) (fl<? . G4cfa) (fl<=? . G4cf9) (fl/ . G4cf8) (fl- . G4cf7) (fl+ . G4cf6) (fl* . G4cf5) (fixnum->flonum . G4cf4) (fxzero? . G4cf3) (fxxor . G4cf2) (fxrotate-bit-field . G4cf1) (fxreverse-bit-field . G4cf0) (fxpositive? . G4cef) (fxodd? . G4cee) (fxnot . G4ced) (fxnegative? . G4cec) (fxmod0 . G4ceb) (fxmod . G4cea) (fxmin . G4ce9) (fxmax . G4ce8) (fxlength . G4ce7) (fxior . G4ce6) (fxif . G4ce5) (fxfirst-bit-set . G4ce4) (fxeven? . G4ce3) (fxdiv0-and-mod0 . G4ce2) (fxdiv0 . G4ce1) (fxdiv-and-mod . G4ce0) (fxdiv . G4cdf) (fxcopy-bit-field . G4cde) (fxcopy-bit . G4cdd) (fxbit-set? . G4cdc) (fxbit-field . G4cdb) (fxbit-count . G4cda) (fxarithmetic-shift-right . G4cd9) (fxarithmetic-shift-left . G4cd8) (fxarithmetic-shift . G4cd7) (fxand . G4cd6) (fx>? . G4cd5) (fx>=? . G4cd4) (fx=? . G4cd3) (fx<? . G4cd2) (fx<=? . G4cd1) (fx-/carry . G4cd0) (fx- . G4ccf) (fx+/carry . G4cce) (fx+ . G4ccd) (fx*/carry . G4ccc) (fx* . G4ccb) (greatest-fixnum . G4cca) (least-fixnum . G4cc9) (fixnum-width . G4cc8) (fixnum? . G4cc7) (bitwise-rotate-bit-field . G4cc6) (bitwise-reverse-bit-field . G4cc5) (bitwise-length . G4cc4) (bitwise-if . G4cc3) (bitwise-first-bit-set . G4cc2) (bitwise-copy-bit-field . G4cc1) (bitwise-copy-bit . G4cc0) (bitwise-bit-set? . G4cbf) (bitwise-bit-field . G4cbe) (bitwise-bit-count . G4cbd) (bitwise-xor . G4cbc) (bitwise-ior . G4cbb) (bitwise-and . G4cba) (bitwise-not . G4cb9) (bitwise-arithmetic-shift-right . G4cb8) (bitwise-arithmetic-shift-left . G4cb7) (bitwise-arithmetic-shift . G4cb6) (zero? . G4cb5) (vector? . G4cb4) (vector-set! . G4cb3) (vector-ref . G4cb2) (vector-map . G4cb1) (vector-length . G4cb0) (vector-for-each . G4caf) (vector-fill! . G4cae) (vector->list . G4cad) (vector . G4cac) (values . G4cab) (truncate . G4caa) (tan . G4ca9) (symbol? . G4ca8) (symbol=? . G4ca7) (symbol->string . G4ca6) (substring . G4ca5) (string? . G4ca4) (string>? . G4ca3) (string>=? . G4ca2) (string=? . G4ca1) (string<? . G4ca0) (string<=? . G4c9f) (string-ref . G4c9e) (string-length . G4c9d) (string-for-each . G4c9c) (string-copy . G4c9b) (string-append . G4c9a) (string->symbol . G4c99) (string->number . G4c98) (string->list . G4c97) (string . G4c96) (sqrt . G4c95) (sin . G4c94) (round . G4c93) (reverse . G4c92) (real? . G4c91) (real-valued? . G4c90) (real-part . G4c8f) (rationalize . G4c8e) (rational? . G4c8d) (rational-valued? . G4c8c) (procedure? . G4c8b) (positive? . G4c8a) (pair? . G4c89) (odd? . G4c88) (numerator . G4c87) (number? . G4c86) (number->string . G4c85) (null? . G4c84) (not . G4c83) (negative? . G4c82) (nan? . G4c81) (min . G4c80) (max . G4c7f) (map . G4c7e) (make-vector . G4c7d) (make-string . G4c7c) (make-rectangular . G4c7b) (make-polar . G4c7a) (magnitude . G4c79) (log . G4c78) (list? . G4c77) (list-tail . G4c76) (list-ref . G4c75) (list->vector . G4c74) (list->string . G4c73) (list . G4c72) (length . G4c71) (lcm . G4c70) (integer? . G4c6f) (integer-valued? . G4c6e) (integer->char . G4c6d) (infinite? . G4c6c) (inexact? . G4c6b) (inexact . G4c6a) (imag-part . G4c69) (gcd . G4c68) (for-each . G4c67) (floor . G4c66) (finite? . G4c65) (expt . G4c64) (exp . G4c63) (exact? . G4c62) (exact-integer-sqrt . G4c61) (exact . G4c60) (even? . G4c5f) (error . G4c5e) (eqv? . G4c5d) (equal? . G4c5c) (eq? . G4c5b) (dynamic-wind . G4c5a) (div0-and-mod0 . G4c59) (mod0 . G4c58) (div0 . G4c57) (div-and-mod . G4c56) (mod . G4c55) (div . G4c54) (denominator . G4c53) (cos . G4c52) (cons . G4c51) (complex? . G4c50) (char? . G4c4f) (char>? . G4c4e) (char>=? . G4c4d) (char=? . G4c4c) (char<? . G4c4b) (char<=? . G4c4a) (char->integer . G4c49) (ceiling . G4c48) (call-with-values . G4c47) (call/cc . G4c46) (call-with-current-continuation . G4c45) (cddddr . G4c44) (cdddar . G4c43) (cddadr . G4c42) (cddaar . G4c41) (cdaddr . G4c40) (cdadar . G4c3f) (cdaadr . G4c3e) (cdaaar . G4c3d) (cadddr . G4c3c) (caddar . G4c3b) (cadadr . G4c3a) (cadaar . G4c39) (caaddr . G4c38) (caadar . G4c37) (caaadr . G4c36) (caaaar . G4c35) (cdddr . G4c34) (cddar . G4c33) (cdadr . G4c32) (cdaar . G4c31) (caddr . G4c30) (cadar . G4c2f) (caadr . G4c2e) (caaar . G4c2d) (cddr . G4c2c) (cdar . G4c2b) (cadr . G4c2a) (caar . G4c29) (cdr . G4c28) (car . G4c27) (boolean? . G4c26) (boolean=? . G4c25) (atan . G4c24) (assertion-violation . G4c23) (asin . G4c22) (apply . G4c21) (append . G4c20) (angle . G4c1f) (acos . G4c1e) (abs . G4c1d) (/ . G4c1c) (* . G4c1b) (- . G4c1a) (+ . G4c19) (>= . G4c18) (> . G4c17) (= . G4c16) (<= . G4c15) (< . G4c14) (&no-nans . G4c12) (&no-infinities . G4c11) (&i/o-encoding . G4c10) (&i/o-decoding . G4c0f) (&i/o-port . G4c0e) (&i/o-file-does-not-exist . G4c0d) (&i/o-file-already-exists . G4c0c) (&i/o-file-is-read-only . G4c0b) (&i/o-file-protection . G4c0a) (&i/o-filename . G4c09) (&i/o-invalid-position . G4c08) (&i/o-write . G4c07) (&i/o-read . G4c06) (&i/o . G4c05) (&undefined . G4c04) (&syntax . G4c03) (&lexical . G4c02) (&implementation-restriction . G4c01) (&non-continuable . G4c00) (&who . G4bff) (&irritants . G4bfe) (&assertion . G4bfd) (&violation . G4bfc) (&error . G4bfb) (&serious . G4bfa) (&warning . G4bf9) (&message . G4bf8) (&condition . G4bf7) (define-condition-type . G4bf6) (define-enumeration . G4bf5) (define-record-type . G4bf4) (parent-rtd . G4bf3) (nongenerative . G4bf2) (opaque . G4bf1) (sealed . G4bf0) (protocol . G4bef) (parent . G4bee) (immutable . G4bed) (mutable . G4bec) (fields . G4beb) (error-handling-mode . G4bea) (file-options . G4be9) (buffer-mode . G4be8) (eol-style . G4be7) (guard . G4be6) (unsyntax-splicing . G4be3) (unsyntax . G4be2) (unquote-splicing . G4be1) (unquote . G4be0) (_ . G4bdf) (else . G4bde) (=> . G4bdd) (... . G4bdc) (assert . G4bdb) (endianness . G4bda) (do . G4bd7) (cond . G4bd6) (let* . G4bd5) (let . G4bd4) (let*-values . G4bd3) (let-values . G4bd2) (identifier-syntax . G4bd1) (with-syntax . G4bd0) (quasisyntax . G4bcf) (quasiquote . G4bce) (syntax-rules . G4bcd) (record-constructor-descriptor . G4bca) (record-type-descriptor . G4bc9) (case . G4bc8) (unless . G4bc6) (when . G4bc5) (or . G4bc4) (and . G4bc3) (if . G4bc2) (letrec* . G4bc1) (letrec . G4bc0) (case-lambda . G4bbe) (lambda . G4bbd) (syntax . G4bbc) (syntax-case . G4bbb) (quote . G4bba) (letrec-syntax . G4bb8) (let-syntax . G4bb7) (set! . G4bb6) (begin . G4bb4) (define-syntax . G4bb2) (define . G4bb1)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e79 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G2deb) (quotient . G4d97) (null-environment . G2de9) (remainder . G4d96) (modulo . G4d95) (inexact->exact . G4d94) (force . G4d93) (exact->inexact . G4d92) (make-promise . G4d91) (delay . G4bd9)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e7a '(rnrs control) '(6) '() '() '() '((do . G4bd7) (unless . G4bc6) (when . G4bc5) (case-lambda . G4bbe)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e7b '(rnrs eval) '(6) '() '() '() '((eval . G2def) (environment . G2de7)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e7c '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4d8d) (set-car! . G4d8c)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e7d '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4d8f) (string-set! . G4d8e)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e7e '(rnrs programs) '(6) '() '() '() '((exit . G4d90) (command-line . G4ab4)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e7f '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2b6b) (identifier? . G2e11) (generate-temporaries . G2dfd) (free-identifier=? . G2dff) (syntax->datum . G2e15) (datum->syntax . G2e13) (bound-identifier=? . G2e01) (syntax-violation . G2e0f) (unsyntax-splicing . G4be3) (unsyntax . G4be2) (_ . G4bdf) (... . G4bdc) (with-syntax . G4bd0) (quasisyntax . G4bcf) (syntax . G4bbc) (syntax-case . G4bbb)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e80 '(rnrs files) '(6) '() '() '() '((delete-file . G4e00) (file-exists? . G4dff) (make-i/o-write-error . G48ac) (make-i/o-read-error . G4897) (make-i/o-port-error . G494a) (make-i/o-invalid-position-error . G48c2) (make-i/o-filename-error . G48dc) (make-i/o-file-protection-error . G48f5) (make-i/o-file-is-read-only-error . G490a) (make-i/o-file-does-not-exist-error . G4934) (make-i/o-file-already-exists-error . G491f) (make-i/o-error . G4882) (i/o-write-error? . G48ae) (i/o-read-error? . G4899) (i/o-port-error? . G494e) (i/o-invalid-position-error? . G48c6) (i/o-filename-error? . G48e0) (i/o-file-protection-error? . G48f7) (i/o-file-is-read-only-error? . G490c) (i/o-file-does-not-exist-error? . G4936) (i/o-file-already-exists-error? . G4921) (i/o-error? . G4884) (i/o-error-position . G48c8) (i/o-error-port . G4950) (i/o-error-filename . G48e2) (&i/o-port . G4c0e) (&i/o-file-does-not-exist . G4c0d) (&i/o-file-already-exists . G4c0c) (&i/o-file-is-read-only . G4c0b) (&i/o-file-protection . G4c0a) (&i/o-filename . G4c09) (&i/o-invalid-position . G4c08) (&i/o-write . G4c07) (&i/o-read . G4c06) (&i/o . G4c05)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e81 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G4dfe) (vector-sort . G4dfd) (list-sort . G4dfc)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e82 '(rnrs base) '(6) '() '() '() '((zero? . G4cb5) (vector? . G4cb4) (vector-set! . G4cb3) (vector-ref . G4cb2) (vector-map . G4cb1) (vector-length . G4cb0) (vector-for-each . G4caf) (vector-fill! . G4cae) (vector->list . G4cad) (vector . G4cac) (values . G4cab) (truncate . G4caa) (tan . G4ca9) (symbol? . G4ca8) (symbol=? . G4ca7) (symbol->string . G4ca6) (substring . G4ca5) (string? . G4ca4) (string>? . G4ca3) (string>=? . G4ca2) (string=? . G4ca1) (string<? . G4ca0) (string<=? . G4c9f) (string-ref . G4c9e) (string-length . G4c9d) (string-for-each . G4c9c) (string-copy . G4c9b) (string-append . G4c9a) (string->symbol . G4c99) (string->number . G4c98) (string->list . G4c97) (string . G4c96) (sqrt . G4c95) (sin . G4c94) (round . G4c93) (reverse . G4c92) (real? . G4c91) (real-valued? . G4c90) (real-part . G4c8f) (rationalize . G4c8e) (rational? . G4c8d) (rational-valued? . G4c8c) (procedure? . G4c8b) (positive? . G4c8a) (pair? . G4c89) (odd? . G4c88) (numerator . G4c87) (number? . G4c86) (number->string . G4c85) (null? . G4c84) (not . G4c83) (negative? . G4c82) (nan? . G4c81) (min . G4c80) (max . G4c7f) (map . G4c7e) (make-vector . G4c7d) (make-string . G4c7c) (make-rectangular . G4c7b) (make-polar . G4c7a) (magnitude . G4c79) (log . G4c78) (list? . G4c77) (list-tail . G4c76) (list-ref . G4c75) (list->vector . G4c74) (list->string . G4c73) (list . G4c72) (length . G4c71) (lcm . G4c70) (integer? . G4c6f) (integer-valued? . G4c6e) (integer->char . G4c6d) (infinite? . G4c6c) (inexact? . G4c6b) (inexact . G4c6a) (imag-part . G4c69) (gcd . G4c68) (for-each . G4c67) (floor . G4c66) (finite? . G4c65) (expt . G4c64) (exp . G4c63) (exact? . G4c62) (exact-integer-sqrt . G4c61) (exact . G4c60) (even? . G4c5f) (error . G4c5e) (eqv? . G4c5d) (equal? . G4c5c) (eq? . G4c5b) (dynamic-wind . G4c5a) (div0-and-mod0 . G4c59) (mod0 . G4c58) (div0 . G4c57) (div-and-mod . G4c56) (mod . G4c55) (div . G4c54) (denominator . G4c53) (cos . G4c52) (cons . G4c51) (complex? . G4c50) (char? . G4c4f) (char>? . G4c4e) (char>=? . G4c4d) (char=? . G4c4c) (char<? . G4c4b) (char<=? . G4c4a) (char->integer . G4c49) (ceiling . G4c48) (call-with-values . G4c47) (call/cc . G4c46) (call-with-current-continuation . G4c45) (cddddr . G4c44) (cdddar . G4c43) (cddadr . G4c42) (cddaar . G4c41) (cdaddr . G4c40) (cdadar . G4c3f) (cdaadr . G4c3e) (cdaaar . G4c3d) (cadddr . G4c3c) (caddar . G4c3b) (cadadr . G4c3a) (cadaar . G4c39) (caaddr . G4c38) (caadar . G4c37) (caaadr . G4c36) (caaaar . G4c35) (cdddr . G4c34) (cddar . G4c33) (cdadr . G4c32) (cdaar . G4c31) (caddr . G4c30) (cadar . G4c2f) (caadr . G4c2e) (caaar . G4c2d) (cddr . G4c2c) (cdar . G4c2b) (cadr . G4c2a) (caar . G4c29) (cdr . G4c28) (car . G4c27) (boolean? . G4c26) (boolean=? . G4c25) (atan . G4c24) (assertion-violation . G4c23) (asin . G4c22) (apply . G4c21) (append . G4c20) (angle . G4c1f) (acos . G4c1e) (abs . G4c1d) (/ . G4c1c) (* . G4c1b) (- . G4c1a) (+ . G4c19) (>= . G4c18) (> . G4c17) (= . G4c16) (<= . G4c15) (< . G4c14) (unquote-splicing . G4be1) (unquote . G4be0) (_ . G4bdf) (else . G4bde) (=> . G4bdd) (... . G4bdc) (assert . G4bdb) (cond . G4bd6) (let* . G4bd5) (let . G4bd4) (let*-values . G4bd3) (let-values . G4bd2) (identifier-syntax . G4bd1) (quasiquote . G4bce) (syntax-rules . G4bcd) (case . G4bc8) (or . G4bc4) (and . G4bc3) (if . G4bc2) (letrec* . G4bc1) (letrec . G4bc0) (lambda . G4bbd) (quote . G4bba) (letrec-syntax . G4bb8) (let-syntax . G4bb7) (set! . G4bb6) (begin . G4bb4) (define-syntax . G4bb2) (define . G4bb1)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e83 '(rnrs lists) '(6) '() '() '() '((remove . G4d8b) (remv . G4d8a) (remp . G4d89) (remq . G4d88) (partition . G4d87) (memv . G4d86) (memq . G4d85) (memp . G4d84) (member . G4d83) (exists . G4d82) (for-all . G4d81) (fold-right . G4d80) (fold-left . G4d7f) (find . G4d7e) (filter . G4d7d) (cons* . G4d7c) (assv . G4d7b) (assq . G4d7a) (assp . G4d79) (assoc . G4d78)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e84 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G4de6) (call-with-input-file . G4de5) (write-char . G4de4) (write . G4de3) (with-output-to-file . G4de2) (with-input-from-file . G4de1) (read-char . G4de0) (read . G4ddf) (peek-char . G4dde) (open-output-file . G4ddd) (open-input-file . G4ddc) (newline . G4ddb) (display . G4dda) (close-output-port . G4dd9) (close-input-port . G4dd8) (eof-object? . G4dd7) (eof-object . G4dd6) (current-error-port . G4dd5) (current-output-port . G4dd4) (current-input-port . G4dd3) (output-port? . G4dd2) (input-port? . G4dd1) (make-i/o-write-error . G48ac) (make-i/o-read-error . G4897) (make-i/o-port-error . G494a) (make-i/o-invalid-position-error . G48c2) (make-i/o-filename-error . G48dc) (make-i/o-file-protection-error . G48f5) (make-i/o-file-is-read-only-error . G490a) (make-i/o-file-does-not-exist-error . G4934) (make-i/o-file-already-exists-error . G491f) (make-i/o-error . G4882) (i/o-write-error? . G48ae) (i/o-read-error? . G4899) (i/o-port-error? . G494e) (i/o-invalid-position-error? . G48c6) (i/o-filename-error? . G48e0) (i/o-file-protection-error? . G48f7) (i/o-file-is-read-only-error? . G490c) (i/o-file-does-not-exist-error? . G4936) (i/o-file-already-exists-error? . G4921) (i/o-error? . G4884) (i/o-error-position . G48c8) (i/o-error-port . G4950) (i/o-error-filename . G48e2) (&i/o-port . G4c0e) (&i/o-file-does-not-exist . G4c0d) (&i/o-file-already-exists . G4c0c) (&i/o-file-is-read-only . G4c0b) (&i/o-file-protection . G4c0a) (&i/o-filename . G4c09) (&i/o-invalid-position . G4c08) (&i/o-write . G4c07) (&i/o-read . G4c06) (&i/o . G4c05)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e85 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4da7) (utf32->string . G4d5c) (utf16->string . G4d5b) (utf8->string . G4d5a) (uint-list->bytevector . G4d59) (u8-list->bytevector . G4d58) (string->utf8 . G4d57) (string->utf32 . G4d56) (string->utf16 . G4d55) (sint-list->bytevector . G4d54) (native-endianness . G4d53) (bytevector? . G4d52) (bytevector=? . G4d51) (bytevector-uint-set! . G4d50) (bytevector-uint-ref . G4d4f) (bytevector-u8-set! . G4d4e) (bytevector-u8-ref . G4d4d) (bytevector-u64-set! . G4d4c) (bytevector-u64-ref . G4d4b) (bytevector-u64-native-set! . G4d4a) (bytevector-u64-native-ref . G4d49) (bytevector-u32-set! . G4d48) (bytevector-u32-ref . G4d47) (bytevector-u32-native-set! . G4d46) (bytevector-u32-native-ref . G4d45) (bytevector-u16-set! . G4d44) (bytevector-u16-ref . G4d43) (bytevector-u16-native-set! . G4d42) (bytevector-u16-native-ref . G4d41) (bytevector-sint-set! . G4d40) (bytevector-sint-ref . G4d3f) (bytevector-s8-set! . G4d3e) (bytevector-s8-ref . G4d3d) (bytevector-s64-set! . G4d3c) (bytevector-s64-ref . G4d3b) (bytevector-s64-native-set! . G4d3a) (bytevector-s64-native-ref . G4d39) (bytevector-s32-set! . G4d38) (bytevector-s32-ref . G4d37) (bytevector-s32-native-set! . G4d36) (bytevector-s32-native-ref . G4d35) (bytevector-s16-set! . G4d34) (bytevector-s16-ref . G4d33) (bytevector-s16-native-set! . G4d32) (bytevector-s16-native-ref . G4d31) (bytevector-length . G4d30) (bytevector-ieee-single-ref . G4d2f) (bytevector-ieee-single-set! . G4d2e) (bytevector-ieee-single-native-set! . G4d2d) (bytevector-ieee-single-native-ref . G4d2c) (bytevector-ieee-double-set! . G4d2b) (bytevector-ieee-double-ref . G4d2a) (bytevector-ieee-double-native-set! . G4d29) (bytevector-ieee-double-native-ref . G4d28) (bytevector-fill! . G4d27) (bytevector-copy! . G4d26) (bytevector-copy . G4d25) (bytevector->uint-list . G4d24) (bytevector->u8-list . G4d23) (bytevector->sint-list . G4d22) (endianness . G4bda)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e86 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G4e2e) (string-titlecase . G4e2d) (string-normalize-nfkd . G4e2c) (string-normalize-nfkc . G4e2b) (string-normalize-nfd . G4e2a) (string-normalize-nfc . G4e29) (string-foldcase . G4e28) (string-downcase . G4e27) (string-ci>? . G4e26) (string-ci>=? . G4e25) (string-ci=? . G4e24) (string-ci<? . G4e23) (string-ci<=? . G4e22) (char-whitespace? . G4e21) (char-upper-case? . G4e20) (char-title-case? . G4e1f) (char-numeric? . G4e1e) (char-lower-case? . G4e1d) (char-general-category . G4e1c) (char-upcase . G4e1b) (char-titlecase . G4e1a) (char-foldcase . G4e19) (char-downcase . G4e18) (char-ci>? . G4e17) (char-ci>=? . G4e16) (char-ci=? . G4e15) (char-ci<? . G4e14) (char-ci<=? . G4e13) (char-alphabetic? . G4e12)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e87 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4d71) (raise-continuable . G4d70) (raise . G4d6f) (guard . G4be6) (else . G4bde) (=> . G4bdd)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e88 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4cc6) (bitwise-reverse-bit-field . G4cc5) (bitwise-length . G4cc4) (bitwise-if . G4cc3) (bitwise-first-bit-set . G4cc2) (bitwise-copy-bit-field . G4cc1) (bitwise-copy-bit . G4cc0) (bitwise-bit-set? . G4cbf) (bitwise-bit-field . G4cbe) (bitwise-bit-count . G4cbd) (bitwise-xor . G4cbc) (bitwise-ior . G4cbb) (bitwise-and . G4cba) (bitwise-not . G4cb9) (bitwise-arithmetic-shift-right . G4cb8) (bitwise-arithmetic-shift-left . G4cb7) (bitwise-arithmetic-shift . G4cb6)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e89 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4cf3) (fxxor . G4cf2) (fxrotate-bit-field . G4cf1) (fxreverse-bit-field . G4cf0) (fxpositive? . G4cef) (fxodd? . G4cee) (fxnot . G4ced) (fxnegative? . G4cec) (fxmod0 . G4ceb) (fxmod . G4cea) (fxmin . G4ce9) (fxmax . G4ce8) (fxlength . G4ce7) (fxior . G4ce6) (fxif . G4ce5) (fxfirst-bit-set . G4ce4) (fxeven? . G4ce3) (fxdiv0-and-mod0 . G4ce2) (fxdiv0 . G4ce1) (fxdiv-and-mod . G4ce0) (fxdiv . G4cdf) (fxcopy-bit-field . G4cde) (fxcopy-bit . G4cdd) (fxbit-set? . G4cdc) (fxbit-field . G4cdb) (fxbit-count . G4cda) (fxarithmetic-shift-right . G4cd9) (fxarithmetic-shift-left . G4cd8) (fxarithmetic-shift . G4cd7) (fxand . G4cd6) (fx>? . G4cd5) (fx>=? . G4cd4) (fx=? . G4cd3) (fx<? . G4cd2) (fx<=? . G4cd1) (fx-/carry . G4cd0) (fx- . G4ccf) (fx+/carry . G4cce) (fx+ . G4ccd) (fx*/carry . G4ccc) (fx* . G4ccb) (greatest-fixnum . G4cca) (least-fixnum . G4cc9) (fixnum-width . G4cc8) (fixnum? . G4cc7)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e8a '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G49a9) (no-infinities-violation? . G4994) (make-no-nans-violation . G49a7) (make-no-infinities-violation . G4992) (real->flonum . G4d21) (flzero? . G4d20) (fltruncate . G4d1f) (fltan . G4d1e) (flsqrt . G4d1d) (flsin . G4d1c) (flround . G4d1b) (flpositive? . G4d1a) (flonum? . G4d19) (flodd? . G4d18) (flnumerator . G4d17) (flnegative? . G4d16) (flnan? . G4d15) (flmod0 . G4d14) (flmod . G4d13) (flmin . G4d12) (flmax . G4d11) (fllog . G4d10) (flinteger? . G4d0f) (flinfinite? . G4d0e) (flfloor . G4d0d) (flfinite? . G4d0c) (flexpt . G4d0b) (flexp . G4d0a) (fleven? . G4d09) (fldiv0-and-mod0 . G4d08) (fldiv0 . G4d07) (fldiv-and-mod . G4d06) (fldiv . G4d05) (fldenominator . G4d04) (flcos . G4d03) (flceiling . G4d02) (flatan . G4d01) (flasin . G4d00) (flacos . G4cff) (flabs . G4cfe) (fl>? . G4cfd) (fl>=? . G4cfc) (fl=? . G4cfb) (fl<? . G4cfa) (fl<=? . G4cf9) (fl/ . G4cf8) (fl- . G4cf7) (fl+ . G4cf6) (fl* . G4cf5) (fixnum->flonum . G4cf4) (&no-nans . G4c12) (&no-infinities . G4c11)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e8b '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G4dfb) (string-ci-hash . G4dfa) (string-hash . G4df9) (equal-hash . G4df8) (hashtable-equivalence-function . G4df7) (make-hashtable . G4df6) (hashtable-hash-function . G4df5) (make-eqv-hashtable . G4df4) (make-eq-hashtable . G4df3) (hashtable? . G4df2) (hashtable-update! . G4df1) (hashtable-size . G4df0) (hashtable-set! . G4def) (hashtable-ref . G4dee) (hashtable-mutable? . G4ded) (hashtable-keys . G4dec) (hashtable-entries . G4deb) (hashtable-delete! . G4dea) (hashtable-copy . G4de9) (hashtable-contains? . G4de8) (hashtable-clear! . G4de7)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e8c '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4dd7) (eof-object . G4dd6) (current-error-port . G4dd5) (current-output-port . G4dd4) (current-input-port . G4dd3) (output-port? . G4dd2) (input-port? . G4dd1) (utf-8-codec . G4dd0) (utf-16-codec . G4dcf) (transcoder-error-handling-mode . G4dce) (transcoder-eol-style . G4dcd) (transcoder-codec . G4dcc) (transcoded-port . G4dcb) (textual-port? . G4dca) (string->bytevector . G4dc9) (standard-output-port . G4dc8) (standard-input-port . G4dc7) (standard-error-port . G4dc6) (set-port-position! . G4dc5) (put-u8 . G4dc4) (put-string . G4dc3) (put-datum . G4dc2) (put-char . G4dc1) (put-bytevector . G4dc0) (port? . G4dbf) (port-transcoder . G4dbe) (port-position . G4dbd) (port-has-set-port-position!? . G4dbc) (port-has-port-position? . G4dbb) (port-eof? . G4dba) (output-port-buffer-mode . G4db9) (open-string-output-port . G4db8) (open-string-input-port . G4db7) (open-file-output-port . G4db6) (open-file-input/output-port . G4db5) (open-file-input-port . G4db4) (open-bytevector-output-port . G4db3) (open-bytevector-input-port . G4db2) (native-transcoder . G4db1) (native-eol-style . G4db0) (make-transcoder . G4daf) (latin-1-codec . G4dae) (make-i/o-write-error . G48ac) (make-i/o-read-error . G4897) (make-i/o-port-error . G494a) (make-i/o-invalid-position-error . G48c2) (make-i/o-filename-error . G48dc) (make-i/o-file-protection-error . G48f5) (make-i/o-file-is-read-only-error . G490a) (make-i/o-file-does-not-exist-error . G4934) (make-i/o-file-already-exists-error . G491f) (make-i/o-error . G4882) (make-i/o-encoding-error . G4979) (make-i/o-decoding-error . G4963) (make-custom-textual-output-port . G4dad) (make-custom-textual-input/output-port . G4dac) (make-custom-textual-input-port . G4dab) (make-custom-binary-output-port . G4daa) (make-custom-binary-input/output-port . G4da9) (make-custom-binary-input-port . G4da8) (lookahead-u8 . G4da6) (lookahead-char . G4da5) (i/o-write-error? . G48ae) (i/o-read-error? . G4899) (i/o-port-error? . G494e) (i/o-invalid-position-error? . G48c6) (i/o-filename-error? . G48e0) (i/o-file-protection-error? . G48f7) (i/o-file-is-read-only-error? . G490c) (i/o-file-does-not-exist-error? . G4936) (i/o-file-already-exists-error? . G4921) (i/o-error? . G4884) (i/o-error-position . G48c8) (i/o-error-port . G4950) (i/o-error-filename . G48e2) (i/o-encoding-error? . G497d) (i/o-encoding-error-char . G497f) (i/o-decoding-error? . G4965) (get-u8 . G4da4) (get-string-n! . G4da3) (get-string-n . G4da2) (get-string-all . G4da1) (get-line . G4da0) (get-datum . G4d9f) (get-char . G4d9e) (get-bytevector-some . G4d9d) (get-bytevector-n! . G4d9c) (get-bytevector-n . G4d9b) (get-bytevector-all . G4d9a) (flush-output-port . G4d99) (close-port . G4d98) (call-with-string-output-port . G4d77) (call-with-port . G4d76) (call-with-bytevector-output-port . G4d75) (bytevector->string . G4d74) (buffer-mode? . G4d73) (binary-port? . G4d72) (&i/o-encoding . G4c10) (&i/o-decoding . G4c0f) (&i/o-port . G4c0e) (&i/o-file-does-not-exist . G4c0d) (&i/o-file-already-exists . G4c0c) (&i/o-file-is-read-only . G4c0b) (&i/o-file-protection . G4c0a) (&i/o-filename . G4c09) (&i/o-invalid-position . G4c08) (&i/o-write . G4c07) (&i/o-read . G4c06) (&i/o . G4c05) (error-handling-mode . G4bea) (file-options . G4be9) (buffer-mode . G4be8) (eol-style . G4be7)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e8d '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4d6e) (enum-set=? . G4d6d) (enum-set-universe . G4d6c) (enum-set-union . G4d6b) (enum-set-subset? . G4d6a) (enum-set-projection . G4d69) (enum-set-member? . G4d68) (enum-set-intersection . G4d67) (enum-set-indexer . G4d66) (enum-set-difference . G4d65) (enum-set-constructor . G4d64) (enum-set-complement . G4d63) (enum-set->list . G4d62) (define-enumeration . G4bf5)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e8e '(rnrs conditions) '(6) '() '() '() '((who-condition? . G47fa) (warning? . G4774) (violation? . G47b3) (undefined-violation? . G486f) (syntax-violation? . G4856) (syntax-violation-subform . G485a) (syntax-violation-form . G4858) (syntax-violation . G2e0f) (simple-conditions . G4d61) (serious-condition? . G4789) (non-continuable-violation? . G4811) (message-condition? . G475d) (make-who-condition . G47f6) (make-warning . G4772) (make-violation . G47b1) (make-undefined-violation . G486d) (make-syntax-violation . G4850) (make-serious-condition . G4787) (make-non-continuable-violation . G480f) (make-message-condition . G4759) (make-lexical-violation . G4839) (make-irritants-condition . G47dc) (make-implementation-restriction-violation . G4824) (make-error . G479c) (make-assertion-violation . G47c6) (lexical-violation? . G483b) (irritants-condition? . G47e0) (implementation-restriction-violation? . G4826) (error? . G479e) (condition-who . G47fc) (condition-predicate . G4d60) (condition-message . G475f) (condition-irritants . G47e2) (condition-accessor . G4d5f) (condition . G4d5e) (assertion-violation? . G47c8) (condition? . G4d5d) (&undefined . G4c04) (&syntax . G4c03) (&lexical . G4c02) (&implementation-restriction . G4c01) (&non-continuable . G4c00) (&who . G4bff) (&irritants . G4bfe) (&assertion . G4bfd) (&violation . G4bfc) (&error . G4bfb) (&serious . G4bfa) (&warning . G4bf9) (&message . G4bf8) (&condition . G4bf7) (define-condition-type . G4bf6)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e8f '(rnrs records inspection) '(6) '() '() '() '((record? . G4e0a) (record-type-uid . G4e09) (record-type-sealed? . G4e08) (record-type-parent . G4e07) (record-type-opaque? . G4e06) (record-type-name . G4e05) (record-type-generative? . G4e04) (record-type-field-names . G4e03) (record-rtd . G4e02) (record-field-mutable? . G4e01)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e90 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G4e11) (record-predicate . G4e10) (record-mutator . G4e0f) (record-constructor . G4e0e) (record-accessor . G4e0d) (make-record-type-descriptor . G4e0c) (make-record-constructor-descriptor . G4e0b)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e91 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4bf4) (parent-rtd . G4bf3) (nongenerative . G4bf2) (opaque . G4bf1) (sealed . G4bf0) (protocol . G4bef) (parent . G4bee) (immutable . G4bed) (mutable . G4bec) (fields . G4beb) (record-constructor-descriptor . G4bca) (record-type-descriptor . G4bc9)) '() values values '#f '#f '#t '#f) (G295a@G27ff@install-library 'G4e92 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G49ad) (&no-nans-rtd . G49ab) (&no-infinities-rcd . G4998) (&no-infinities-rtd . G4996) (&i/o-encoding-rcd . G4983) (&i/o-encoding-rtd . G4981) (&i/o-decoding-rcd . G4969) (&i/o-decoding-rtd . G4967) (&i/o-port-rcd . G4954) (&i/o-port-rtd . G4952) (&i/o-file-does-not-exist-rcd . G493a) (&i/o-file-does-not-exist-rtd . G4938) (&i/o-file-already-exists-rcd . G4925) (&i/o-file-already-exists-rtd . G4923) (&i/o-file-is-read-only-rcd . G4910) (&i/o-file-is-read-only-rtd . G490e) (&i/o-file-protection-rcd . G48fb) (&i/o-file-protection-rtd . G48f9) (&i/o-filename-rcd . G48e6) (&i/o-filename-rtd . G48e4) (&i/o-invalid-position-rcd . G48cc) (&i/o-invalid-position-rtd . G48ca) (&i/o-write-rcd . G48b2) (&i/o-write-rtd . G48b0) (&i/o-read-rcd . G489d) (&i/o-read-rtd . G489b) (&i/o-rcd . G4888) (&i/o-rtd . G4886) (&undefined-rcd . G4873) (&undefined-rtd . G4871) (&syntax-rcd . G485e) (&syntax-rtd . G485c) (&lexical-rcd . G483f) (&lexical-rtd . G483d) (&implementation-restriction-rcd . G482a) (&implementation-restriction-rtd . G4828) (&non-continuable-rcd . G4815) (&non-continuable-rtd . G4813) (&who-rcd . G4800) (&who-rtd . G47fe) (&irritants-rcd . G47e6) (&irritants-rtd . G47e4) (&assertion-rcd . G47cc) (&assertion-rtd . G47ca) (&violation-rcd . G47b7) (&violation-rtd . G47b5) (&error-rcd . G47a2) (&error-rtd . G47a0) (&serious-rcd . G478d) (&serious-rtd . G478b) (&warning-rcd . G4778) (&warning-rtd . G4776) (&message-rcd . G4763) (&message-rtd . G4761) (&condition-rcd . G4708) (&condition-rtd . G4706) (syntax-error . G2e0b) (syntax-dispatch . G2d24) (pretty-print . G4e72) (eval-core . G4e71) (set-symbol-value! . G4e70) (symbol-value . G4e6f) (gensym . G4e6e) (void . G4e6d) (load . G4aba) (interaction-environment . G2e1b) (char-ready? . G4e6c) (regexp? . G4e6b) (read-line . G4e6a) (ungensym . G4e69) (alist->eq-hash-table . G4e68) (assoc-ref . G4e67) (print . G4e66) (format . G4e65) (host-os . G4e64) (library-path . G27de) (standard-library-path . G4e63) (file-newer? . G4e62) (stat-mtime . G4e61) (write-to-file . G4e60) (file->list . G4e5f) (file->string . G4e5e) (digit->integer . G4e5d) (call-with-string-input-port . G4e5c) (call-with-string-io . G4e5b) (string-split . G4e5a) (bytevector-for-each . G4e59) (string->regexp . G4e58) (rxmatch . G4e57) (regexp-replace-all . G4e56) (hashtable-for-each . G4e55) (call-process . G4e54) (local-tz-offset . G4e53) (microseconds . G4e52) (readdir . G4e51) (set-current-directory! . G4e50) (expand-path . G4e4f) (current-directory . G4e4e) (%spawn . G4e4d) (%waitpid . G4e4c) (%ffi-supported? . G4e4b) (%ffi-pointer-ref . G4e4a) (%ffi-pointer->string . G4e49) (%ffi-call->string-or-zero . G4e48) (%ffi-call->double . G4e47) (%ffi-call->void* . G4e46) (%ffi-call->void . G4e45) (%ffi-call->int . G4e44) (%ffi-lookup . G4e43) (%ffi-open . G4e42) (%fork . G4e41) (%pipe . G4e40) (p . G4e3f) (open-output-string . G4e3e) (get-output-string . G4e3d) (get-environment-variables . G4e3c) (get-environment-variable . G4e3b) (get-timeofday . G4e3a) (get-command-line . G4e39) (sys-display . G4e38) (source-info . G4e37) (make-compiler-instruction . G4e36) (make-instruction . G4e35) (set-source-info! . G4e34) (bignum? . G4e33) (fast-equal? . G4e32) (fasl-read . G4e31) (fasl-write . G4e30) (time-usage . G4e2f) (make-parameter . G2615) (string-upcase . G4e2e) (string-titlecase . G4e2d) (string-normalize-nfkd . G4e2c) (string-normalize-nfkc . G4e2b) (string-normalize-nfd . G4e2a) (string-normalize-nfc . G4e29) (string-foldcase . G4e28) (string-downcase . G4e27) (string-ci>? . G4e26) (string-ci>=? . G4e25) (string-ci=? . G4e24) (string-ci<? . G4e23) (string-ci<=? . G4e22) (char-whitespace? . G4e21) (char-upper-case? . G4e20) (char-title-case? . G4e1f) (char-numeric? . G4e1e) (char-lower-case? . G4e1d) (char-general-category . G4e1c) (char-upcase . G4e1b) (char-titlecase . G4e1a) (char-foldcase . G4e19) (char-downcase . G4e18) (char-ci>? . G4e17) (char-ci>=? . G4e16) (char-ci=? . G4e15) (char-ci<? . G4e14) (char-ci<=? . G4e13) (char-alphabetic? . G4e12) (make-variable-transformer . G2b6b) (identifier? . G2e11) (generate-temporaries . G2dfd) (free-identifier=? . G2dff) (syntax->datum . G2e15) (datum->syntax . G2e13) (bound-identifier=? . G2e01) (record-type-descriptor? . G4e11) (record-predicate . G4e10) (record-mutator . G4e0f) (record-constructor . G4e0e) (record-accessor . G4e0d) (make-record-type-descriptor . G4e0c) (make-record-constructor-descriptor . G4e0b) (record? . G4e0a) (record-type-uid . G4e09) (record-type-sealed? . G4e08) (record-type-parent . G4e07) (record-type-opaque? . G4e06) (record-type-name . G4e05) (record-type-generative? . G4e04) (record-type-field-names . G4e03) (record-rtd . G4e02) (record-field-mutable? . G4e01) (delete-file . G4e00) (file-exists? . G4dff) (vector-sort! . G4dfe) (vector-sort . G4dfd) (list-sort . G4dfc) (symbol-hash . G4dfb) (string-ci-hash . G4dfa) (string-hash . G4df9) (equal-hash . G4df8) (hashtable-equivalence-function . G4df7) (make-hashtable . G4df6) (hashtable-hash-function . G4df5) (make-eqv-hashtable . G4df4) (make-eq-hashtable . G4df3) (hashtable? . G4df2) (hashtable-update! . G4df1) (hashtable-size . G4df0) (hashtable-set! . G4def) (hashtable-ref . G4dee) (hashtable-mutable? . G4ded) (hashtable-keys . G4dec) (hashtable-entries . G4deb) (hashtable-delete! . G4dea) (hashtable-copy . G4de9) (hashtable-contains? . G4de8) (hashtable-clear! . G4de7) (call-with-output-file . G4de6) (call-with-input-file . G4de5) (write-char . G4de4) (write . G4de3) (with-output-to-file . G4de2) (with-input-from-file . G4de1) (read-char . G4de0) (read . G4ddf) (peek-char . G4dde) (open-output-file . G4ddd) (open-input-file . G4ddc) (newline . G4ddb) (display . G4dda) (close-output-port . G4dd9) (close-input-port . G4dd8) (eof-object? . G4dd7) (eof-object . G4dd6) (current-error-port . G4dd5) (current-output-port . G4dd4) (current-input-port . G4dd3) (output-port? . G4dd2) (input-port? . G4dd1) (utf-8-codec . G4dd0) (utf-16-codec . G4dcf) (transcoder-error-handling-mode . G4dce) (transcoder-eol-style . G4dcd) (transcoder-codec . G4dcc) (transcoded-port . G4dcb) (textual-port? . G4dca) (string->bytevector . G4dc9) (standard-output-port . G4dc8) (standard-input-port . G4dc7) (standard-error-port . G4dc6) (set-port-position! . G4dc5) (put-u8 . G4dc4) (put-string . G4dc3) (put-datum . G4dc2) (put-char . G4dc1) (put-bytevector . G4dc0) (port? . G4dbf) (port-transcoder . G4dbe) (port-position . G4dbd) (port-has-set-port-position!? . G4dbc) (port-has-port-position? . G4dbb) (port-eof? . G4dba) (output-port-buffer-mode . G4db9) (open-string-output-port . G4db8) (open-string-input-port . G4db7) (open-file-output-port . G4db6) (open-file-input/output-port . G4db5) (open-file-input-port . G4db4) (open-bytevector-output-port . G4db3) (open-bytevector-input-port . G4db2) (native-transcoder . G4db1) (native-eol-style . G4db0) (make-transcoder . G4daf) (latin-1-codec . G4dae) (make-i/o-write-error . G48ac) (make-i/o-read-error . G4897) (make-i/o-port-error . G494a) (make-i/o-invalid-position-error . G48c2) (make-i/o-filename-error . G48dc) (make-i/o-file-protection-error . G48f5) (make-i/o-file-is-read-only-error . G490a) (make-i/o-file-does-not-exist-error . G4934) (make-i/o-file-already-exists-error . G491f) (make-i/o-error . G4882) (make-i/o-encoding-error . G4979) (make-i/o-decoding-error . G4963) (make-custom-textual-output-port . G4dad) (make-custom-textual-input/output-port . G4dac) (make-custom-textual-input-port . G4dab) (make-custom-binary-output-port . G4daa) (make-custom-binary-input/output-port . G4da9) (make-custom-binary-input-port . G4da8) (make-bytevector . G4da7) (lookahead-u8 . G4da6) (lookahead-char . G4da5) (i/o-write-error? . G48ae) (i/o-read-error? . G4899) (i/o-port-error? . G494e) (i/o-invalid-position-error? . G48c6) (i/o-filename-error? . G48e0) (i/o-file-protection-error? . G48f7) (i/o-file-is-read-only-error? . G490c) (i/o-file-does-not-exist-error? . G4936) (i/o-file-already-exists-error? . G4921) (i/o-error? . G4884) (i/o-error-position . G48c8) (i/o-error-port . G4950) (i/o-error-filename . G48e2) (i/o-encoding-error? . G497d) (i/o-encoding-error-char . G497f) (i/o-decoding-error? . G4965) (get-u8 . G4da4) (get-string-n! . G4da3) (get-string-n . G4da2) (get-string-all . G4da1) (get-line . G4da0) (get-datum . G4d9f) (get-char . G4d9e) (get-bytevector-some . G4d9d) (get-bytevector-n! . G4d9c) (get-bytevector-n . G4d9b) (get-bytevector-all . G4d9a) (flush-output-port . G4d99) (close-port . G4d98) (scheme-report-environment . G2deb) (quotient . G4d97) (null-environment . G2de9) (remainder . G4d96) (modulo . G4d95) (inexact->exact . G4d94) (force . G4d93) (exact->inexact . G4d92) (make-promise . G4d91) (exit . G4d90) (command-line . G4ab4) (string-fill! . G4d8f) (string-set! . G4d8e) (set-cdr! . G4d8d) (set-car! . G4d8c) (remove . G4d8b) (remv . G4d8a) (remp . G4d89) (remq . G4d88) (partition . G4d87) (memv . G4d86) (memq . G4d85) (memp . G4d84) (member . G4d83) (exists . G4d82) (for-all . G4d81) (fold-right . G4d80) (fold-left . G4d7f) (find . G4d7e) (filter . G4d7d) (cons* . G4d7c) (assv . G4d7b) (assq . G4d7a) (assp . G4d79) (assoc . G4d78) (call-with-string-output-port . G4d77) (call-with-port . G4d76) (call-with-bytevector-output-port . G4d75) (bytevector->string . G4d74) (buffer-mode? . G4d73) (binary-port? . G4d72) (with-exception-handler . G4d71) (raise-continuable . G4d70) (raise . G4d6f) (eval . G2def) (environment . G2de7) (make-enumeration . G4d6e) (enum-set=? . G4d6d) (enum-set-universe . G4d6c) (enum-set-union . G4d6b) (enum-set-subset? . G4d6a) (enum-set-projection . G4d69) (enum-set-member? . G4d68) (enum-set-intersection . G4d67) (enum-set-indexer . G4d66) (enum-set-difference . G4d65) (enum-set-constructor . G4d64) (enum-set-complement . G4d63) (enum-set->list . G4d62) (who-condition? . G47fa) (warning? . G4774) (violation? . G47b3) (undefined-violation? . G486f) (syntax-violation? . G4856) (syntax-violation-subform . G485a) (syntax-violation-form . G4858) (syntax-violation . G2e0f) (simple-conditions . G4d61) (serious-condition? . G4789) (non-continuable-violation? . G4811) (message-condition? . G475d) (make-who-condition . G47f6) (make-warning . G4772) (make-violation . G47b1) (make-undefined-violation . G486d) (make-syntax-violation . G4850) (make-serious-condition . G4787) (make-non-continuable-violation . G480f) (make-message-condition . G4759) (make-lexical-violation . G4839) (make-irritants-condition . G47dc) (make-implementation-restriction-violation . G4824) (make-error . G479c) (make-assertion-violation . G47c6) (lexical-violation? . G483b) (irritants-condition? . G47e0) (implementation-restriction-violation? . G4826) (error? . G479e) (condition-who . G47fc) (condition-predicate . G4d60) (condition-message . G475f) (condition-irritants . G47e2) (condition-accessor . G4d5f) (condition . G4d5e) (assertion-violation? . G47c8) (condition? . G4d5d) (utf32->string . G4d5c) (utf16->string . G4d5b) (utf8->string . G4d5a) (uint-list->bytevector . G4d59) (u8-list->bytevector . G4d58) (string->utf8 . G4d57) (string->utf32 . G4d56) (string->utf16 . G4d55) (sint-list->bytevector . G4d54) (native-endianness . G4d53) (bytevector? . G4d52) (bytevector=? . G4d51) (bytevector-uint-set! . G4d50) (bytevector-uint-ref . G4d4f) (bytevector-u8-set! . G4d4e) (bytevector-u8-ref . G4d4d) (bytevector-u64-set! . G4d4c) (bytevector-u64-ref . G4d4b) (bytevector-u64-native-set! . G4d4a) (bytevector-u64-native-ref . G4d49) (bytevector-u32-set! . G4d48) (bytevector-u32-ref . G4d47) (bytevector-u32-native-set! . G4d46) (bytevector-u32-native-ref . G4d45) (bytevector-u16-set! . G4d44) (bytevector-u16-ref . G4d43) (bytevector-u16-native-set! . G4d42) (bytevector-u16-native-ref . G4d41) (bytevector-sint-set! . G4d40) (bytevector-sint-ref . G4d3f) (bytevector-s8-set! . G4d3e) (bytevector-s8-ref . G4d3d) (bytevector-s64-set! . G4d3c) (bytevector-s64-ref . G4d3b) (bytevector-s64-native-set! . G4d3a) (bytevector-s64-native-ref . G4d39) (bytevector-s32-set! . G4d38) (bytevector-s32-ref . G4d37) (bytevector-s32-native-set! . G4d36) (bytevector-s32-native-ref . G4d35) (bytevector-s16-set! . G4d34) (bytevector-s16-ref . G4d33) (bytevector-s16-native-set! . G4d32) (bytevector-s16-native-ref . G4d31) (bytevector-length . G4d30) (bytevector-ieee-single-ref . G4d2f) (bytevector-ieee-single-set! . G4d2e) (bytevector-ieee-single-native-set! . G4d2d) (bytevector-ieee-single-native-ref . G4d2c) (bytevector-ieee-double-set! . G4d2b) (bytevector-ieee-double-ref . G4d2a) (bytevector-ieee-double-native-set! . G4d29) (bytevector-ieee-double-native-ref . G4d28) (bytevector-fill! . G4d27) (bytevector-copy! . G4d26) (bytevector-copy . G4d25) (bytevector->uint-list . G4d24) (bytevector->u8-list . G4d23) (bytevector->sint-list . G4d22) (no-nans-violation? . G49a9) (no-infinities-violation? . G4994) (make-no-nans-violation . G49a7) (make-no-infinities-violation . G4992) (real->flonum . G4d21) (flzero? . G4d20) (fltruncate . G4d1f) (fltan . G4d1e) (flsqrt . G4d1d) (flsin . G4d1c) (flround . G4d1b) (flpositive? . G4d1a) (flonum? . G4d19) (flodd? . G4d18) (flnumerator . G4d17) (flnegative? . G4d16) (flnan? . G4d15) (flmod0 . G4d14) (flmod . G4d13) (flmin . G4d12) (flmax . G4d11) (fllog . G4d10) (flinteger? . G4d0f) (flinfinite? . G4d0e) (flfloor . G4d0d) (flfinite? . G4d0c) (flexpt . G4d0b) (flexp . G4d0a) (fleven? . G4d09) (fldiv0-and-mod0 . G4d08) (fldiv0 . G4d07) (fldiv-and-mod . G4d06) (fldiv . G4d05) (fldenominator . G4d04) (flcos . G4d03) (flceiling . G4d02) (flatan . G4d01) (flasin . G4d00) (flacos . G4cff) (flabs . G4cfe) (fl>? . G4cfd) (fl>=? . G4cfc) (fl=? . G4cfb) (fl<? . G4cfa) (fl<=? . G4cf9) (fl/ . G4cf8) (fl- . G4cf7) (fl+ . G4cf6) (fl* . G4cf5) (fixnum->flonum . G4cf4) (fxzero? . G4cf3) (fxxor . G4cf2) (fxrotate-bit-field . G4cf1) (fxreverse-bit-field . G4cf0) (fxpositive? . G4cef) (fxodd? . G4cee) (fxnot . G4ced) (fxnegative? . G4cec) (fxmod0 . G4ceb) (fxmod . G4cea) (fxmin . G4ce9) (fxmax . G4ce8) (fxlength . G4ce7) (fxior . G4ce6) (fxif . G4ce5) (fxfirst-bit-set . G4ce4) (fxeven? . G4ce3) (fxdiv0-and-mod0 . G4ce2) (fxdiv0 . G4ce1) (fxdiv-and-mod . G4ce0) (fxdiv . G4cdf) (fxcopy-bit-field . G4cde) (fxcopy-bit . G4cdd) (fxbit-set? . G4cdc) (fxbit-field . G4cdb) (fxbit-count . G4cda) (fxarithmetic-shift-right . G4cd9) (fxarithmetic-shift-left . G4cd8) (fxarithmetic-shift . G4cd7) (fxand . G4cd6) (fx>? . G4cd5) (fx>=? . G4cd4) (fx=? . G4cd3) (fx<? . G4cd2) (fx<=? . G4cd1) (fx-/carry . G4cd0) (fx- . G4ccf) (fx+/carry . G4cce) (fx+ . G4ccd) (fx*/carry . G4ccc) (fx* . G4ccb) (greatest-fixnum . G4cca) (least-fixnum . G4cc9) (fixnum-width . G4cc8) (fixnum? . G4cc7) (bitwise-rotate-bit-field . G4cc6) (bitwise-reverse-bit-field . G4cc5) (bitwise-length . G4cc4) (bitwise-if . G4cc3) (bitwise-first-bit-set . G4cc2) (bitwise-copy-bit-field . G4cc1) (bitwise-copy-bit . G4cc0) (bitwise-bit-set? . G4cbf) (bitwise-bit-field . G4cbe) (bitwise-bit-count . G4cbd) (bitwise-xor . G4cbc) (bitwise-ior . G4cbb) (bitwise-and . G4cba) (bitwise-not . G4cb9) (bitwise-arithmetic-shift-right . G4cb8) (bitwise-arithmetic-shift-left . G4cb7) (bitwise-arithmetic-shift . G4cb6) (zero? . G4cb5) (vector? . G4cb4) (vector-set! . G4cb3) (vector-ref . G4cb2) (vector-map . G4cb1) (vector-length . G4cb0) (vector-for-each . G4caf) (vector-fill! . G4cae) (vector->list . G4cad) (vector . G4cac) (values . G4cab) (truncate . G4caa) (tan . G4ca9) (symbol? . G4ca8) (symbol=? . G4ca7) (symbol->string . G4ca6) (substring . G4ca5) (string? . G4ca4) (string>? . G4ca3) (string>=? . G4ca2) (string=? . G4ca1) (string<? . G4ca0) (string<=? . G4c9f) (string-ref . G4c9e) (string-length . G4c9d) (string-for-each . G4c9c) (string-copy . G4c9b) (string-append . G4c9a) (string->symbol . G4c99) (string->number . G4c98) (string->list . G4c97) (string . G4c96) (sqrt . G4c95) (sin . G4c94) (round . G4c93) (reverse . G4c92) (real? . G4c91) (real-valued? . G4c90) (real-part . G4c8f) (rationalize . G4c8e) (rational? . G4c8d) (rational-valued? . G4c8c) (procedure? . G4c8b) (positive? . G4c8a) (pair? . G4c89) (odd? . G4c88) (numerator . G4c87) (number? . G4c86) (number->string . G4c85) (null? . G4c84) (not . G4c83) (negative? . G4c82) (nan? . G4c81) (min . G4c80) (max . G4c7f) (map . G4c7e) (make-vector . G4c7d) (make-string . G4c7c) (make-rectangular . G4c7b) (make-polar . G4c7a) (magnitude . G4c79) (log . G4c78) (list? . G4c77) (list-tail . G4c76) (list-ref . G4c75) (list->vector . G4c74) (list->string . G4c73) (list . G4c72) (length . G4c71) (lcm . G4c70) (integer? . G4c6f) (integer-valued? . G4c6e) (integer->char . G4c6d) (infinite? . G4c6c) (inexact? . G4c6b) (inexact . G4c6a) (imag-part . G4c69) (gcd . G4c68) (for-each . G4c67) (floor . G4c66) (finite? . G4c65) (expt . G4c64) (exp . G4c63) (exact? . G4c62) (exact-integer-sqrt . G4c61) (exact . G4c60) (even? . G4c5f) (error . G4c5e) (eqv? . G4c5d) (equal? . G4c5c) (eq? . G4c5b) (dynamic-wind . G4c5a) (div0-and-mod0 . G4c59) (mod0 . G4c58) (div0 . G4c57) (div-and-mod . G4c56) (mod . G4c55) (div . G4c54) (denominator . G4c53) (cos . G4c52) (cons . G4c51) (complex? . G4c50) (char? . G4c4f) (char>? . G4c4e) (char>=? . G4c4d) (char=? . G4c4c) (char<? . G4c4b) (char<=? . G4c4a) (char->integer . G4c49) (ceiling . G4c48) (call-with-values . G4c47) (call/cc . G4c46) (call-with-current-continuation . G4c45) (cddddr . G4c44) (cdddar . G4c43) (cddadr . G4c42) (cddaar . G4c41) (cdaddr . G4c40) (cdadar . G4c3f) (cdaadr . G4c3e) (cdaaar . G4c3d) (cadddr . G4c3c) (caddar . G4c3b) (cadadr . G4c3a) (cadaar . G4c39) (caaddr . G4c38) (caadar . G4c37) (caaadr . G4c36) (caaaar . G4c35) (cdddr . G4c34) (cddar . G4c33) (cdadr . G4c32) (cdaar . G4c31) (caddr . G4c30) (cadar . G4c2f) (caadr . G4c2e) (caaar . G4c2d) (cddr . G4c2c) (cdar . G4c2b) (cadr . G4c2a) (caar . G4c29) (cdr . G4c28) (car . G4c27) (boolean? . G4c26) (boolean=? . G4c25) (atan . G4c24) (assertion-violation . G4c23) (asin . G4c22) (apply . G4c21) (append . G4c20) (angle . G4c1f) (acos . G4c1e) (abs . G4c1d) (/ . G4c1c) (* . G4c1b) (- . G4c1a) (+ . G4c19) (>= . G4c18) (> . G4c17) (= . G4c16) (<= . G4c15) (< . G4c14) (library . G4c13) (&no-nans . G4c12) (&no-infinities . G4c11) (&i/o-encoding . G4c10) (&i/o-decoding . G4c0f) (&i/o-port . G4c0e) (&i/o-file-does-not-exist . G4c0d) (&i/o-file-already-exists . G4c0c) (&i/o-file-is-read-only . G4c0b) (&i/o-file-protection . G4c0a) (&i/o-filename . G4c09) (&i/o-invalid-position . G4c08) (&i/o-write . G4c07) (&i/o-read . G4c06) (&i/o . G4c05) (&undefined . G4c04) (&syntax . G4c03) (&lexical . G4c02) (&implementation-restriction . G4c01) (&non-continuable . G4c00) (&who . G4bff) (&irritants . G4bfe) (&assertion . G4bfd) (&violation . G4bfc) (&error . G4bfb) (&serious . G4bfa) (&warning . G4bf9) (&message . G4bf8) (&condition . G4bf7) (define-condition-type . G4bf6) (define-enumeration . G4bf5) (define-record-type . G4bf4) (parent-rtd . G4bf3) (nongenerative . G4bf2) (opaque . G4bf1) (sealed . G4bf0) (protocol . G4bef) (parent . G4bee) (immutable . G4bed) (mutable . G4bec) (fields . G4beb) (error-handling-mode . G4bea) (file-options . G4be9) (buffer-mode . G4be8) (eol-style . G4be7) (guard . G4be6) (trace-define . G4be5) (trace-lambda . G4be4) (unsyntax-splicing . G4be3) (unsyntax . G4be2) (unquote-splicing . G4be1) (unquote . G4be0) (_ . G4bdf) (else . G4bde) (=> . G4bdd) (... . G4bdc) (assert . G4bdb) (endianness . G4bda) (delay . G4bd9) (time . G4bd8) (do . G4bd7) (cond . G4bd6) (let* . G4bd5) (let . G4bd4) (let*-values . G4bd3) (let-values . G4bd2) (identifier-syntax . G4bd1) (with-syntax . G4bd0) (quasisyntax . G4bcf) (quasiquote . G4bce) (syntax-rules . G4bcd) (include . G4bcc) (define-struct . G4bcb) (record-constructor-descriptor . G4bca) (record-type-descriptor . G4bc9) (case . G4bc8) (parameterize . G4bc7) (unless . G4bc6) (when . G4bc5) (or . G4bc4) (and . G4bc3) (if . G4bc2) (letrec* . G4bc1) (letrec . G4bc0) (type-descriptor . G4bbf) (case-lambda . G4bbe) (lambda . G4bbd) (syntax . G4bbc) (syntax-case . G4bbb) (quote . G4bba) (foreign-call . G4bb9) (letrec-syntax . G4bb8) (let-syntax . G4bb7) (set! . G4bb6) (import . G4bb5) (begin . G4bb4) (module . G4bb3) (define-syntax . G4bb2) (define . G4bb1)) '((G49ad core-prim . &no-nans-rcd) (G49ab core-prim . &no-nans-rtd) (G4998 core-prim . &no-infinities-rcd) (G4996 core-prim . &no-infinities-rtd) (G4983 core-prim . &i/o-encoding-rcd) (G4981 core-prim . &i/o-encoding-rtd) (G4969 core-prim . &i/o-decoding-rcd) (G4967 core-prim . &i/o-decoding-rtd) (G4954 core-prim . &i/o-port-rcd) (G4952 core-prim . &i/o-port-rtd) (G493a core-prim . &i/o-file-does-not-exist-rcd) (G4938 core-prim . &i/o-file-does-not-exist-rtd) (G4925 core-prim . &i/o-file-already-exists-rcd) (G4923 core-prim . &i/o-file-already-exists-rtd) (G4910 core-prim . &i/o-file-is-read-only-rcd) (G490e core-prim . &i/o-file-is-read-only-rtd) (G48fb core-prim . &i/o-file-protection-rcd) (G48f9 core-prim . &i/o-file-protection-rtd) (G48e6 core-prim . &i/o-filename-rcd) (G48e4 core-prim . &i/o-filename-rtd) (G48cc core-prim . &i/o-invalid-position-rcd) (G48ca core-prim . &i/o-invalid-position-rtd) (G48b2 core-prim . &i/o-write-rcd) (G48b0 core-prim . &i/o-write-rtd) (G489d core-prim . &i/o-read-rcd) (G489b core-prim . &i/o-read-rtd) (G4888 core-prim . &i/o-rcd) (G4886 core-prim . &i/o-rtd) (G4873 core-prim . &undefined-rcd) (G4871 core-prim . &undefined-rtd) (G485e core-prim . &syntax-rcd) (G485c core-prim . &syntax-rtd) (G483f core-prim . &lexical-rcd) (G483d core-prim . &lexical-rtd) (G482a core-prim . &implementation-restriction-rcd) (G4828 core-prim . &implementation-restriction-rtd) (G4815 core-prim . &non-continuable-rcd) (G4813 core-prim . &non-continuable-rtd) (G4800 core-prim . &who-rcd) (G47fe core-prim . &who-rtd) (G47e6 core-prim . &irritants-rcd) (G47e4 core-prim . &irritants-rtd) (G47cc core-prim . &assertion-rcd) (G47ca core-prim . &assertion-rtd) (G47b7 core-prim . &violation-rcd) (G47b5 core-prim . &violation-rtd) (G47a2 core-prim . &error-rcd) (G47a0 core-prim . &error-rtd) (G478d core-prim . &serious-rcd) (G478b core-prim . &serious-rtd) (G4778 core-prim . &warning-rcd) (G4776 core-prim . &warning-rtd) (G4763 core-prim . &message-rcd) (G4761 core-prim . &message-rtd) (G4708 core-prim . &condition-rcd) (G4706 core-prim . &condition-rtd) (G2e0b core-prim . syntax-error) (G2d24 core-prim . syntax-dispatch) (G4e72 core-prim . pretty-print) (G4e71 core-prim . eval-core) (G4e70 core-prim . set-symbol-value!) (G4e6f core-prim . symbol-value) (G4e6e core-prim . gensym) (G4e6d core-prim . void) (G4aba core-prim . load) (G2e1b core-prim . interaction-environment) (G4e6c core-prim . char-ready?) (G4e6b core-prim . regexp?) (G4e6a core-prim . read-line) (G4e69 core-prim . ungensym) (G4e68 core-prim . alist->eq-hash-table) (G4e67 core-prim . assoc-ref) (G4e66 core-prim . print) (G4e65 core-prim . format) (G4e64 core-prim . host-os) (G27de core-prim . library-path) (G4e63 core-prim . standard-library-path) (G4e62 core-prim . file-newer?) (G4e61 core-prim . stat-mtime) (G4e60 core-prim . write-to-file) (G4e5f core-prim . file->list) (G4e5e core-prim . file->string) (G4e5d core-prim . digit->integer) (G4e5c core-prim . call-with-string-input-port) (G4e5b core-prim . call-with-string-io) (G4e5a core-prim . string-split) (G4e59 core-prim . bytevector-for-each) (G4e58 core-prim . string->regexp) (G4e57 core-prim . rxmatch) (G4e56 core-prim . regexp-replace-all) (G4e55 core-prim . hashtable-for-each) (G4e54 core-prim . call-process) (G4e53 core-prim . local-tz-offset) (G4e52 core-prim . microseconds) (G4e51 core-prim . readdir) (G4e50 core-prim . set-current-directory!) (G4e4f core-prim . expand-path) (G4e4e core-prim . current-directory) (G4e4d core-prim . %spawn) (G4e4c core-prim . %waitpid) (G4e4b core-prim . %ffi-supported?) (G4e4a core-prim . %ffi-pointer-ref) (G4e49 core-prim . %ffi-pointer->string) (G4e48 core-prim . %ffi-call->string-or-zero) (G4e47 core-prim . %ffi-call->double) (G4e46 core-prim . %ffi-call->void*) (G4e45 core-prim . %ffi-call->void) (G4e44 core-prim . %ffi-call->int) (G4e43 core-prim . %ffi-lookup) (G4e42 core-prim . %ffi-open) (G4e41 core-prim . %fork) (G4e40 core-prim . %pipe) (G4e3f core-prim . p) (G4e3e core-prim . open-output-string) (G4e3d core-prim . get-output-string) (G4e3c core-prim . get-environment-variables) (G4e3b core-prim . get-environment-variable) (G4e3a core-prim . get-timeofday) (G4e39 core-prim . get-command-line) (G4e38 core-prim . sys-display) (G4e37 core-prim . source-info) (G4e36 core-prim . make-compiler-instruction) (G4e35 core-prim . make-instruction) (G4e34 core-prim . set-source-info!) (G4e33 core-prim . bignum?) (G4e32 core-prim . fast-equal?) (G4e31 core-prim . fasl-read) (G4e30 core-prim . fasl-write) (G4e2f core-prim . time-usage) (G2615 core-prim . make-parameter) (G4e2e core-prim . string-upcase) (G4e2d core-prim . string-titlecase) (G4e2c core-prim . string-normalize-nfkd) (G4e2b core-prim . string-normalize-nfkc) (G4e2a core-prim . string-normalize-nfd) (G4e29 core-prim . string-normalize-nfc) (G4e28 core-prim . string-foldcase) (G4e27 core-prim . string-downcase) (G4e26 core-prim . string-ci>?) (G4e25 core-prim . string-ci>=?) (G4e24 core-prim . string-ci=?) (G4e23 core-prim . string-ci<?) (G4e22 core-prim . string-ci<=?) (G4e21 core-prim . char-whitespace?) (G4e20 core-prim . char-upper-case?) (G4e1f core-prim . char-title-case?) (G4e1e core-prim . char-numeric?) (G4e1d core-prim . char-lower-case?) (G4e1c core-prim . char-general-category) (G4e1b core-prim . char-upcase) (G4e1a core-prim . char-titlecase) (G4e19 core-prim . char-foldcase) (G4e18 core-prim . char-downcase) (G4e17 core-prim . char-ci>?) (G4e16 core-prim . char-ci>=?) (G4e15 core-prim . char-ci=?) (G4e14 core-prim . char-ci<?) (G4e13 core-prim . char-ci<=?) (G4e12 core-prim . char-alphabetic?) (G2b6b core-prim . make-variable-transformer) (G2e11 core-prim . identifier?) (G2dfd core-prim . generate-temporaries) (G2dff core-prim . free-identifier=?) (G2e15 core-prim . syntax->datum) (G2e13 core-prim . datum->syntax) (G2e01 core-prim . bound-identifier=?) (G4e11 core-prim . record-type-descriptor?) (G4e10 core-prim . record-predicate) (G4e0f core-prim . record-mutator) (G4e0e core-prim . record-constructor) (G4e0d core-prim . record-accessor) (G4e0c core-prim . make-record-type-descriptor) (G4e0b core-prim . make-record-constructor-descriptor) (G4e0a core-prim . record?) (G4e09 core-prim . record-type-uid) (G4e08 core-prim . record-type-sealed?) (G4e07 core-prim . record-type-parent) (G4e06 core-prim . record-type-opaque?) (G4e05 core-prim . record-type-name) (G4e04 core-prim . record-type-generative?) (G4e03 core-prim . record-type-field-names) (G4e02 core-prim . record-rtd) (G4e01 core-prim . record-field-mutable?) (G4e00 core-prim . delete-file) (G4dff core-prim . file-exists?) (G4dfe core-prim . vector-sort!) (G4dfd core-prim . vector-sort) (G4dfc core-prim . list-sort) (G4dfb core-prim . symbol-hash) (G4dfa core-prim . string-ci-hash) (G4df9 core-prim . string-hash) (G4df8 core-prim . equal-hash) (G4df7 core-prim . hashtable-equivalence-function) (G4df6 core-prim . make-hashtable) (G4df5 core-prim . hashtable-hash-function) (G4df4 core-prim . make-eqv-hashtable) (G4df3 core-prim . make-eq-hashtable) (G4df2 core-prim . hashtable?) (G4df1 core-prim . hashtable-update!) (G4df0 core-prim . hashtable-size) (G4def core-prim . hashtable-set!) (G4dee core-prim . hashtable-ref) (G4ded core-prim . hashtable-mutable?) (G4dec core-prim . hashtable-keys) (G4deb core-prim . hashtable-entries) (G4dea core-prim . hashtable-delete!) (G4de9 core-prim . hashtable-copy) (G4de8 core-prim . hashtable-contains?) (G4de7 core-prim . hashtable-clear!) (G4de6 core-prim . call-with-output-file) (G4de5 core-prim . call-with-input-file) (G4de4 core-prim . write-char) (G4de3 core-prim . write) (G4de2 core-prim . with-output-to-file) (G4de1 core-prim . with-input-from-file) (G4de0 core-prim . read-char) (G4ddf core-prim . read) (G4dde core-prim . peek-char) (G4ddd core-prim . open-output-file) (G4ddc core-prim . open-input-file) (G4ddb core-prim . newline) (G4dda core-prim . display) (G4dd9 core-prim . close-output-port) (G4dd8 core-prim . close-input-port) (G4dd7 core-prim . eof-object?) (G4dd6 core-prim . eof-object) (G4dd5 core-prim . current-error-port) (G4dd4 core-prim . current-output-port) (G4dd3 core-prim . current-input-port) (G4dd2 core-prim . output-port?) (G4dd1 core-prim . input-port?) (G4dd0 core-prim . utf-8-codec) (G4dcf core-prim . utf-16-codec) (G4dce core-prim . transcoder-error-handling-mode) (G4dcd core-prim . transcoder-eol-style) (G4dcc core-prim . transcoder-codec) (G4dcb core-prim . transcoded-port) (G4dca core-prim . textual-port?) (G4dc9 core-prim . string->bytevector) (G4dc8 core-prim . standard-output-port) (G4dc7 core-prim . standard-input-port) (G4dc6 core-prim . standard-error-port) (G4dc5 core-prim . set-port-position!) (G4dc4 core-prim . put-u8) (G4dc3 core-prim . put-string) (G4dc2 core-prim . put-datum) (G4dc1 core-prim . put-char) (G4dc0 core-prim . put-bytevector) (G4dbf core-prim . port?) (G4dbe core-prim . port-transcoder) (G4dbd core-prim . port-position) (G4dbc core-prim . port-has-set-port-position!?) (G4dbb core-prim . port-has-port-position?) (G4dba core-prim . port-eof?) (G4db9 core-prim . output-port-buffer-mode) (G4db8 core-prim . open-string-output-port) (G4db7 core-prim . open-string-input-port) (G4db6 core-prim . open-file-output-port) (G4db5 core-prim . open-file-input/output-port) (G4db4 core-prim . open-file-input-port) (G4db3 core-prim . open-bytevector-output-port) (G4db2 core-prim . open-bytevector-input-port) (G4db1 core-prim . native-transcoder) (G4db0 core-prim . native-eol-style) (G4daf core-prim . make-transcoder) (G4dae core-prim . latin-1-codec) (G48ac core-prim . make-i/o-write-error) (G4897 core-prim . make-i/o-read-error) (G494a core-prim . make-i/o-port-error) (G48c2 core-prim . make-i/o-invalid-position-error) (G48dc core-prim . make-i/o-filename-error) (G48f5 core-prim . make-i/o-file-protection-error) (G490a core-prim . make-i/o-file-is-read-only-error) (G4934 core-prim . make-i/o-file-does-not-exist-error) (G491f core-prim . make-i/o-file-already-exists-error) (G4882 core-prim . make-i/o-error) (G4979 core-prim . make-i/o-encoding-error) (G4963 core-prim . make-i/o-decoding-error) (G4dad core-prim . make-custom-textual-output-port) (G4dac core-prim . make-custom-textual-input/output-port) (G4dab core-prim . make-custom-textual-input-port) (G4daa core-prim . make-custom-binary-output-port) (G4da9 core-prim . make-custom-binary-input/output-port) (G4da8 core-prim . make-custom-binary-input-port) (G4da7 core-prim . make-bytevector) (G4da6 core-prim . lookahead-u8) (G4da5 core-prim . lookahead-char) (G48ae core-prim . i/o-write-error?) (G4899 core-prim . i/o-read-error?) (G494e core-prim . i/o-port-error?) (G48c6 core-prim . i/o-invalid-position-error?) (G48e0 core-prim . i/o-filename-error?) (G48f7 core-prim . i/o-file-protection-error?) (G490c core-prim . i/o-file-is-read-only-error?) (G4936 core-prim . i/o-file-does-not-exist-error?) (G4921 core-prim . i/o-file-already-exists-error?) (G4884 core-prim . i/o-error?) (G48c8 core-prim . i/o-error-position) (G4950 core-prim . i/o-error-port) (G48e2 core-prim . i/o-error-filename) (G497d core-prim . i/o-encoding-error?) (G497f core-prim . i/o-encoding-error-char) (G4965 core-prim . i/o-decoding-error?) (G4da4 core-prim . get-u8) (G4da3 core-prim . get-string-n!) (G4da2 core-prim . get-string-n) (G4da1 core-prim . get-string-all) (G4da0 core-prim . get-line) (G4d9f core-prim . get-datum) (G4d9e core-prim . get-char) (G4d9d core-prim . get-bytevector-some) (G4d9c core-prim . get-bytevector-n!) (G4d9b core-prim . get-bytevector-n) (G4d9a core-prim . get-bytevector-all) (G4d99 core-prim . flush-output-port) (G4d98 core-prim . close-port) (G2deb core-prim . scheme-report-environment) (G4d97 core-prim . quotient) (G2de9 core-prim . null-environment) (G4d96 core-prim . remainder) (G4d95 core-prim . modulo) (G4d94 core-prim . inexact->exact) (G4d93 core-prim . force) (G4d92 core-prim . exact->inexact) (G4d91 core-prim . make-promise) (G4d90 core-prim . exit) (G4ab4 core-prim . command-line) (G4d8f core-prim . string-fill!) (G4d8e core-prim . string-set!) (G4d8d core-prim . set-cdr!) (G4d8c core-prim . set-car!) (G4d8b core-prim . remove) (G4d8a core-prim . remv) (G4d89 core-prim . remp) (G4d88 core-prim . remq) (G4d87 core-prim . partition) (G4d86 core-prim . memv) (G4d85 core-prim . memq) (G4d84 core-prim . memp) (G4d83 core-prim . member) (G4d82 core-prim . exists) (G4d81 core-prim . for-all) (G4d80 core-prim . fold-right) (G4d7f core-prim . fold-left) (G4d7e core-prim . find) (G4d7d core-prim . filter) (G4d7c core-prim . cons*) (G4d7b core-prim . assv) (G4d7a core-prim . assq) (G4d79 core-prim . assp) (G4d78 core-prim . assoc) (G4d77 core-prim . call-with-string-output-port) (G4d76 core-prim . call-with-port) (G4d75 core-prim . call-with-bytevector-output-port) (G4d74 core-prim . bytevector->string) (G4d73 core-prim . buffer-mode?) (G4d72 core-prim . binary-port?) (G4d71 core-prim . with-exception-handler) (G4d70 core-prim . raise-continuable) (G4d6f core-prim . raise) (G2def core-prim . eval) (G2de7 core-prim . environment) (G4d6e core-prim . make-enumeration) (G4d6d core-prim . enum-set=?) (G4d6c core-prim . enum-set-universe) (G4d6b core-prim . enum-set-union) (G4d6a core-prim . enum-set-subset?) (G4d69 core-prim . enum-set-projection) (G4d68 core-prim . enum-set-member?) (G4d67 core-prim . enum-set-intersection) (G4d66 core-prim . enum-set-indexer) (G4d65 core-prim . enum-set-difference) (G4d64 core-prim . enum-set-constructor) (G4d63 core-prim . enum-set-complement) (G4d62 core-prim . enum-set->list) (G47fa core-prim . who-condition?) (G4774 core-prim . warning?) (G47b3 core-prim . violation?) (G486f core-prim . undefined-violation?) (G4856 core-prim . syntax-violation?) (G485a core-prim . syntax-violation-subform) (G4858 core-prim . syntax-violation-form) (G2e0f core-prim . syntax-violation) (G4d61 core-prim . simple-conditions) (G4789 core-prim . serious-condition?) (G4811 core-prim . non-continuable-violation?) (G475d core-prim . message-condition?) (G47f6 core-prim . make-who-condition) (G4772 core-prim . make-warning) (G47b1 core-prim . make-violation) (G486d core-prim . make-undefined-violation) (G4850 core-prim . make-syntax-violation) (G4787 core-prim . make-serious-condition) (G480f core-prim . make-non-continuable-violation) (G4759 core-prim . make-message-condition) (G4839 core-prim . make-lexical-violation) (G47dc core-prim . make-irritants-condition) (G4824 core-prim . make-implementation-restriction-violation) (G479c core-prim . make-error) (G47c6 core-prim . make-assertion-violation) (G483b core-prim . lexical-violation?) (G47e0 core-prim . irritants-condition?) (G4826 core-prim . implementation-restriction-violation?) (G479e core-prim . error?) (G47fc core-prim . condition-who) (G4d60 core-prim . condition-predicate) (G475f core-prim . condition-message) (G47e2 core-prim . condition-irritants) (G4d5f core-prim . condition-accessor) (G4d5e core-prim . condition) (G47c8 core-prim . assertion-violation?) (G4d5d core-prim . condition?) (G4d5c core-prim . utf32->string) (G4d5b core-prim . utf16->string) (G4d5a core-prim . utf8->string) (G4d59 core-prim . uint-list->bytevector) (G4d58 core-prim . u8-list->bytevector) (G4d57 core-prim . string->utf8) (G4d56 core-prim . string->utf32) (G4d55 core-prim . string->utf16) (G4d54 core-prim . sint-list->bytevector) (G4d53 core-prim . native-endianness) (G4d52 core-prim . bytevector?) (G4d51 core-prim . bytevector=?) (G4d50 core-prim . bytevector-uint-set!) (G4d4f core-prim . bytevector-uint-ref) (G4d4e core-prim . bytevector-u8-set!) (G4d4d core-prim . bytevector-u8-ref) (G4d4c core-prim . bytevector-u64-set!) (G4d4b core-prim . bytevector-u64-ref) (G4d4a core-prim . bytevector-u64-native-set!) (G4d49 core-prim . bytevector-u64-native-ref) (G4d48 core-prim . bytevector-u32-set!) (G4d47 core-prim . bytevector-u32-ref) (G4d46 core-prim . bytevector-u32-native-set!) (G4d45 core-prim . bytevector-u32-native-ref) (G4d44 core-prim . bytevector-u16-set!) (G4d43 core-prim . bytevector-u16-ref) (G4d42 core-prim . bytevector-u16-native-set!) (G4d41 core-prim . bytevector-u16-native-ref) (G4d40 core-prim . bytevector-sint-set!) (G4d3f core-prim . bytevector-sint-ref) (G4d3e core-prim . bytevector-s8-set!) (G4d3d core-prim . bytevector-s8-ref) (G4d3c core-prim . bytevector-s64-set!) (G4d3b core-prim . bytevector-s64-ref) (G4d3a core-prim . bytevector-s64-native-set!) (G4d39 core-prim . bytevector-s64-native-ref) (G4d38 core-prim . bytevector-s32-set!) (G4d37 core-prim . bytevector-s32-ref) (G4d36 core-prim . bytevector-s32-native-set!) (G4d35 core-prim . bytevector-s32-native-ref) (G4d34 core-prim . bytevector-s16-set!) (G4d33 core-prim . bytevector-s16-ref) (G4d32 core-prim . bytevector-s16-native-set!) (G4d31 core-prim . bytevector-s16-native-ref) (G4d30 core-prim . bytevector-length) (G4d2f core-prim . bytevector-ieee-single-ref) (G4d2e core-prim . bytevector-ieee-single-set!) (G4d2d core-prim . bytevector-ieee-single-native-set!) (G4d2c core-prim . bytevector-ieee-single-native-ref) (G4d2b core-prim . bytevector-ieee-double-set!) (G4d2a core-prim . bytevector-ieee-double-ref) (G4d29 core-prim . bytevector-ieee-double-native-set!) (G4d28 core-prim . bytevector-ieee-double-native-ref) (G4d27 core-prim . bytevector-fill!) (G4d26 core-prim . bytevector-copy!) (G4d25 core-prim . bytevector-copy) (G4d24 core-prim . bytevector->uint-list) (G4d23 core-prim . bytevector->u8-list) (G4d22 core-prim . bytevector->sint-list) (G49a9 core-prim . no-nans-violation?) (G4994 core-prim . no-infinities-violation?) (G49a7 core-prim . make-no-nans-violation) (G4992 core-prim . make-no-infinities-violation) (G4d21 core-prim . real->flonum) (G4d20 core-prim . flzero?) (G4d1f core-prim . fltruncate) (G4d1e core-prim . fltan) (G4d1d core-prim . flsqrt) (G4d1c core-prim . flsin) (G4d1b core-prim . flround) (G4d1a core-prim . flpositive?) (G4d19 core-prim . flonum?) (G4d18 core-prim . flodd?) (G4d17 core-prim . flnumerator) (G4d16 core-prim . flnegative?) (G4d15 core-prim . flnan?) (G4d14 core-prim . flmod0) (G4d13 core-prim . flmod) (G4d12 core-prim . flmin) (G4d11 core-prim . flmax) (G4d10 core-prim . fllog) (G4d0f core-prim . flinteger?) (G4d0e core-prim . flinfinite?) (G4d0d core-prim . flfloor) (G4d0c core-prim . flfinite?) (G4d0b core-prim . flexpt) (G4d0a core-prim . flexp) (G4d09 core-prim . fleven?) (G4d08 core-prim . fldiv0-and-mod0) (G4d07 core-prim . fldiv0) (G4d06 core-prim . fldiv-and-mod) (G4d05 core-prim . fldiv) (G4d04 core-prim . fldenominator) (G4d03 core-prim . flcos) (G4d02 core-prim . flceiling) (G4d01 core-prim . flatan) (G4d00 core-prim . flasin) (G4cff core-prim . flacos) (G4cfe core-prim . flabs) (G4cfd core-prim . fl>?) (G4cfc core-prim . fl>=?) (G4cfb core-prim . fl=?) (G4cfa core-prim . fl<?) (G4cf9 core-prim . fl<=?) (G4cf8 core-prim . fl/) (G4cf7 core-prim . fl-) (G4cf6 core-prim . fl+) (G4cf5 core-prim . fl*) (G4cf4 core-prim . fixnum->flonum) (G4cf3 core-prim . fxzero?) (G4cf2 core-prim . fxxor) (G4cf1 core-prim . fxrotate-bit-field) (G4cf0 core-prim . fxreverse-bit-field) (G4cef core-prim . fxpositive?) (G4cee core-prim . fxodd?) (G4ced core-prim . fxnot) (G4cec core-prim . fxnegative?) (G4ceb core-prim . fxmod0) (G4cea core-prim . fxmod) (G4ce9 core-prim . fxmin) (G4ce8 core-prim . fxmax) (G4ce7 core-prim . fxlength) (G4ce6 core-prim . fxior) (G4ce5 core-prim . fxif) (G4ce4 core-prim . fxfirst-bit-set) (G4ce3 core-prim . fxeven?) (G4ce2 core-prim . fxdiv0-and-mod0) (G4ce1 core-prim . fxdiv0) (G4ce0 core-prim . fxdiv-and-mod) (G4cdf core-prim . fxdiv) (G4cde core-prim . fxcopy-bit-field) (G4cdd core-prim . fxcopy-bit) (G4cdc core-prim . fxbit-set?) (G4cdb core-prim . fxbit-field) (G4cda core-prim . fxbit-count) (G4cd9 core-prim . fxarithmetic-shift-right) (G4cd8 core-prim . fxarithmetic-shift-left) (G4cd7 core-prim . fxarithmetic-shift) (G4cd6 core-prim . fxand) (G4cd5 core-prim . fx>?) (G4cd4 core-prim . fx>=?) (G4cd3 core-prim . fx=?) (G4cd2 core-prim . fx<?) (G4cd1 core-prim . fx<=?) (G4cd0 core-prim . fx-/carry) (G4ccf core-prim . fx-) (G4cce core-prim . fx+/carry) (G4ccd core-prim . fx+) (G4ccc core-prim . fx*/carry) (G4ccb core-prim . fx*) (G4cca core-prim . greatest-fixnum) (G4cc9 core-prim . least-fixnum) (G4cc8 core-prim . fixnum-width) (G4cc7 core-prim . fixnum?) (G4cc6 core-prim . bitwise-rotate-bit-field) (G4cc5 core-prim . bitwise-reverse-bit-field) (G4cc4 core-prim . bitwise-length) (G4cc3 core-prim . bitwise-if) (G4cc2 core-prim . bitwise-first-bit-set) (G4cc1 core-prim . bitwise-copy-bit-field) (G4cc0 core-prim . bitwise-copy-bit) (G4cbf core-prim . bitwise-bit-set?) (G4cbe core-prim . bitwise-bit-field) (G4cbd core-prim . bitwise-bit-count) (G4cbc core-prim . bitwise-xor) (G4cbb core-prim . bitwise-ior) (G4cba core-prim . bitwise-and) (G4cb9 core-prim . bitwise-not) (G4cb8 core-prim . bitwise-arithmetic-shift-right) (G4cb7 core-prim . bitwise-arithmetic-shift-left) (G4cb6 core-prim . bitwise-arithmetic-shift) (G4cb5 core-prim . zero?) (G4cb4 core-prim . vector?) (G4cb3 core-prim . vector-set!) (G4cb2 core-prim . vector-ref) (G4cb1 core-prim . vector-map) (G4cb0 core-prim . vector-length) (G4caf core-prim . vector-for-each) (G4cae core-prim . vector-fill!) (G4cad core-prim . vector->list) (G4cac core-prim . vector) (G4cab core-prim . values) (G4caa core-prim . truncate) (G4ca9 core-prim . tan) (G4ca8 core-prim . symbol?) (G4ca7 core-prim . symbol=?) (G4ca6 core-prim . symbol->string) (G4ca5 core-prim . substring) (G4ca4 core-prim . string?) (G4ca3 core-prim . string>?) (G4ca2 core-prim . string>=?) (G4ca1 core-prim . string=?) (G4ca0 core-prim . string<?) (G4c9f core-prim . string<=?) (G4c9e core-prim . string-ref) (G4c9d core-prim . string-length) (G4c9c core-prim . string-for-each) (G4c9b core-prim . string-copy) (G4c9a core-prim . string-append) (G4c99 core-prim . string->symbol) (G4c98 core-prim . string->number) (G4c97 core-prim . string->list) (G4c96 core-prim . string) (G4c95 core-prim . sqrt) (G4c94 core-prim . sin) (G4c93 core-prim . round) (G4c92 core-prim . reverse) (G4c91 core-prim . real?) (G4c90 core-prim . real-valued?) (G4c8f core-prim . real-part) (G4c8e core-prim . rationalize) (G4c8d core-prim . rational?) (G4c8c core-prim . rational-valued?) (G4c8b core-prim . procedure?) (G4c8a core-prim . positive?) (G4c89 core-prim . pair?) (G4c88 core-prim . odd?) (G4c87 core-prim . numerator) (G4c86 core-prim . number?) (G4c85 core-prim . number->string) (G4c84 core-prim . null?) (G4c83 core-prim . not) (G4c82 core-prim . negative?) (G4c81 core-prim . nan?) (G4c80 core-prim . min) (G4c7f core-prim . max) (G4c7e core-prim . map) (G4c7d core-prim . make-vector) (G4c7c core-prim . make-string) (G4c7b core-prim . make-rectangular) (G4c7a core-prim . make-polar) (G4c79 core-prim . magnitude) (G4c78 core-prim . log) (G4c77 core-prim . list?) (G4c76 core-prim . list-tail) (G4c75 core-prim . list-ref) (G4c74 core-prim . list->vector) (G4c73 core-prim . list->string) (G4c72 core-prim . list) (G4c71 core-prim . length) (G4c70 core-prim . lcm) (G4c6f core-prim . integer?) (G4c6e core-prim . integer-valued?) (G4c6d core-prim . integer->char) (G4c6c core-prim . infinite?) (G4c6b core-prim . inexact?) (G4c6a core-prim . inexact) (G4c69 core-prim . imag-part) (G4c68 core-prim . gcd) (G4c67 core-prim . for-each) (G4c66 core-prim . floor) (G4c65 core-prim . finite?) (G4c64 core-prim . expt) (G4c63 core-prim . exp) (G4c62 core-prim . exact?) (G4c61 core-prim . exact-integer-sqrt) (G4c60 core-prim . exact) (G4c5f core-prim . even?) (G4c5e core-prim . error) (G4c5d core-prim . eqv?) (G4c5c core-prim . equal?) (G4c5b core-prim . eq?) (G4c5a core-prim . dynamic-wind) (G4c59 core-prim . div0-and-mod0) (G4c58 core-prim . mod0) (G4c57 core-prim . div0) (G4c56 core-prim . div-and-mod) (G4c55 core-prim . mod) (G4c54 core-prim . div) (G4c53 core-prim . denominator) (G4c52 core-prim . cos) (G4c51 core-prim . cons) (G4c50 core-prim . complex?) (G4c4f core-prim . char?) (G4c4e core-prim . char>?) (G4c4d core-prim . char>=?) (G4c4c core-prim . char=?) (G4c4b core-prim . char<?) (G4c4a core-prim . char<=?) (G4c49 core-prim . char->integer) (G4c48 core-prim . ceiling) (G4c47 core-prim . call-with-values) (G4c46 core-prim . call/cc) (G4c45 core-prim . call-with-current-continuation) (G4c44 core-prim . cddddr) (G4c43 core-prim . cdddar) (G4c42 core-prim . cddadr) (G4c41 core-prim . cddaar) (G4c40 core-prim . cdaddr) (G4c3f core-prim . cdadar) (G4c3e core-prim . cdaadr) (G4c3d core-prim . cdaaar) (G4c3c core-prim . cadddr) (G4c3b core-prim . caddar) (G4c3a core-prim . cadadr) (G4c39 core-prim . cadaar) (G4c38 core-prim . caaddr) (G4c37 core-prim . caadar) (G4c36 core-prim . caaadr) (G4c35 core-prim . caaaar) (G4c34 core-prim . cdddr) (G4c33 core-prim . cddar) (G4c32 core-prim . cdadr) (G4c31 core-prim . cdaar) (G4c30 core-prim . caddr) (G4c2f core-prim . cadar) (G4c2e core-prim . caadr) (G4c2d core-prim . caaar) (G4c2c core-prim . cddr) (G4c2b core-prim . cdar) (G4c2a core-prim . cadr) (G4c29 core-prim . caar) (G4c28 core-prim . cdr) (G4c27 core-prim . car) (G4c26 core-prim . boolean?) (G4c25 core-prim . boolean=?) (G4c24 core-prim . atan) (G4c23 core-prim . assertion-violation) (G4c22 core-prim . asin) (G4c21 core-prim . apply) (G4c20 core-prim . append) (G4c1f core-prim . angle) (G4c1e core-prim . acos) (G4c1d core-prim . abs) (G4c1c core-prim . /) (G4c1b core-prim . *) (G4c1a core-prim . -) (G4c19 core-prim . +) (G4c18 core-prim . >=) (G4c17 core-prim . >) (G4c16 core-prim . =) (G4c15 core-prim . <=) (G4c14 core-prim . <) (G4c13 core-prim . library) (G4c12 $core-rtd &no-nans-rtd &no-nans-rcd) (G4c11 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4c10 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4c0f $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4c0e $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4c0d $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4c0c $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4c0b $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4c0a $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4c09 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4c08 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4c07 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4c06 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4c05 $core-rtd &i/o-rtd &i/o-rcd) (G4c04 $core-rtd &undefined-rtd &undefined-rcd) (G4c03 $core-rtd &syntax-rtd &syntax-rcd) (G4c02 $core-rtd &lexical-rtd &lexical-rcd) (G4c01 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4c00 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4bff $core-rtd &who-rtd &who-rcd) (G4bfe $core-rtd &irritants-rtd &irritants-rcd) (G4bfd $core-rtd &assertion-rtd &assertion-rcd) (G4bfc $core-rtd &violation-rtd &violation-rcd) (G4bfb $core-rtd &error-rtd &error-rcd) (G4bfa $core-rtd &serious-rtd &serious-rcd) (G4bf9 $core-rtd &warning-rtd &warning-rcd) (G4bf8 $core-rtd &message-rtd &message-rcd) (G4bf7 $core-rtd &condition-rtd &condition-rcd) (G4bf6 macro . define-condition-type) (G4bf5 macro . define-enumeration) (G4bf4 macro . define-record-type) (G4bf3 macro . parent-rtd) (G4bf2 macro . nongenerative) (G4bf1 macro . opaque) (G4bf0 macro . sealed) (G4bef macro . protocol) (G4bee macro . parent) (G4bed macro . immutable) (G4bec macro . mutable) (G4beb macro . fields) (G4bea macro . error-handling-mode) (G4be9 macro . file-options) (G4be8 macro . buffer-mode) (G4be7 macro . eol-style) (G4be6 macro . guard) (G4be5 macro . trace-define) (G4be4 macro . trace-lambda) (G4be3 macro . unsyntax-splicing) (G4be2 macro . unsyntax) (G4be1 macro . unquote-splicing) (G4be0 macro . unquote) (G4bdf macro . _) (G4bde macro . else) (G4bdd macro . =>) (G4bdc macro . ...) (G4bdb macro . assert) (G4bda macro . endianness) (G4bd9 macro . delay) (G4bd8 macro . time) (G4bd7 macro . do) (G4bd6 macro . cond) (G4bd5 macro . let*) (G4bd4 macro . let) (G4bd3 macro . let*-values) (G4bd2 macro . let-values) (G4bd1 macro . identifier-syntax) (G4bd0 macro . with-syntax) (G4bcf macro . quasisyntax) (G4bce macro . quasiquote) (G4bcd macro . syntax-rules) (G4bcc macro . include) (G4bcb macro . define-struct) (G4bca core-macro . record-constructor-descriptor) (G4bc9 core-macro . record-type-descriptor) (G4bc8 macro . case) (G4bc7 macro . parameterize) (G4bc6 macro . unless) (G4bc5 macro . when) (G4bc4 core-macro . or) (G4bc3 core-macro . and) (G4bc2 core-macro . if) (G4bc1 core-macro . letrec*) (G4bc0 core-macro . letrec) (G4bbf core-macro . type-descriptor) (G4bbe core-macro . case-lambda) (G4bbd core-macro . lambda) (G4bbc core-macro . syntax) (G4bbb core-macro . syntax-case) (G4bba core-macro . quote) (G4bb9 core-macro . foreign-call) (G4bb8 letrec-syntax) (G4bb7 let-syntax) (G4bb6 set!) (G4bb5 import) (G4bb4 begin) (G4bb3 module) (G4bb2 define-syntax) (G4bb1 define)) values values '#f '#f '#f '#f) (G295a@G27ff@install-library 'G4e93 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G4e72) (eval-core . G4e71) (set-symbol-value! . G4e70) (symbol-value . G4e6f) (gensym . G4e6e) (void . G4e6d)) '() values values '#f '#f '#f '#f) (G295a@G27ff@install-library 'G4e94 '(mosh) '() '() '() '() '((set-symbol-value! . G4e70) (symbol-value . G4e6f) (read-line . G4e6a) (ungensym . G4e69) (alist->eq-hash-table . G4e68) (assoc-ref . G4e67) (print . G4e66) (format . G4e65) (host-os . G4e64) (library-path . G27de) (standard-library-path . G4e63) (file-newer? . G4e62) (stat-mtime . G4e61) (write-to-file . G4e60) (file->list . G4e5f) (file->string . G4e5e) (digit->integer . G4e5d) (call-with-string-input-port . G4e5c) (call-with-string-io . G4e5b) (string-split . G4e5a) (bytevector-for-each . G4e59) (string->regexp . G4e58) (rxmatch . G4e57) (regexp-replace-all . G4e56) (hashtable-for-each . G4e55) (readdir . G4e51) (set-current-directory! . G4e50) (expand-path . G4e4f) (current-directory . G4e4e) (p . G4e3f) (get-timeofday . G4e3a) (get-command-line . G4e39) (sys-display . G4e38) (source-info . G4e37) (make-compiler-instruction . G4e36) (make-instruction . G4e35) (set-source-info! . G4e34) (bignum? . G4e33) (fast-equal? . G4e32) (fasl-read . G4e31) (fasl-write . G4e30) (time-usage . G4e2f) (time . G4bd8) (include . G4bcc)) '() values values '#f '#f '#f '#f) (G295a@G27ff@install-library 'G4e95 '(system) '() '() '() '() '((call-process . G4e54) (local-tz-offset . G4e53) (microseconds . G4e52) (expand-path . G4e4f) (%spawn . G4e4d) (%waitpid . G4e4c) (%ffi-supported? . G4e4b) (%ffi-pointer-ref . G4e4a) (%ffi-pointer->string . G4e49) (%ffi-call->string-or-zero . G4e48) (%ffi-call->double . G4e47) (%ffi-call->void* . G4e46) (%ffi-call->void . G4e45) (%ffi-call->int . G4e44) (%ffi-lookup . G4e43) (%ffi-open . G4e42) (%fork . G4e41) (%pipe . G4e40) (open-output-string . G4e3e) (get-output-string . G4e3d) (get-environment-variables . G4e3c) (get-environment-variable . G4e3b) (make-parameter . G2615) (parameterize . G4bc7)) '() values values '#f '#f '#f '#f))
((lambda (G4aa3@add-library-path! G4aa5@parse-and-add-library-path G4aa7@for-each-with-index G4aa9@conditioon-printer G4aab@condition-printer G4aad@record->field-alist G4aaf@map-with-index G4ab1@repl G4ab3@trace-printer G4ab5@command-line G4ab7@local-library-path G4ab9@load/args G4abb@load G4abd@ironscheme-build G4abf@eval-top-level G4ac1@compile-system-libraries G4ac3@compile G4ac5@compile->closure G4ac7@pre-compile-r6rs-file G4ac9@load-r6rs-top-level) (begin (set! G4aa3@add-library-path! (lambda (G4ae4@path) (G294a@G27df@library-path (append (G294a@G27df@library-path) (list G4ae4@path))))) (set! G4aa5@parse-and-add-library-path (lambda (G4ae6@paths G4ae7@message) ((lambda (G4aea@t) (if G4aea@t ((lambda (G4aec@paths) (for-each (lambda (G4aee@path) (if (file-exists? G4aee@path) (G4aa3@add-library-path! (expand-path G4aee@path)) (format (current-error-port) G4ae7@message G4aee@path))) (reverse (string-split G4aec@paths '#\:)))) G4aea@t) (void))) G4ae6@paths))) (set! G4aa7@for-each-with-index (lambda (G4af0@proc G4af1@lst) (letrec ((G4af4@loop (lambda (G4af6@i G4af7@lst) (if (null? G4af7@lst) (if '#f '#f (void)) (begin (G4af0@proc G4af6@i (car G4af7@lst)) (G4af4@loop (+ G4af6@i '1) (cdr G4af7@lst))))))) (G4af4@loop '1 G4af1@lst)))) (set! G4aa9@conditioon-printer (lambda (G4afa@e G4afb@port) ((lambda (G4aff@ref) (begin (set! G4aff@ref (lambda (G4b0e@rtd G4b0f@i G4b10@x) ((lambda (G4b14@val) (if (symbol? G4b14@val) (ungensym G4b14@val) G4b14@val)) ((record-accessor G4b0e@rtd G4b0f@i) G4b10@x)))) (begin (display '" Condition components:\n" G4afb@port) (G4aa7@for-each-with-index (lambda (G4b00@i G4b01@x) ((lambda (G4b04@rtd) (begin (format G4afb@port '"   ~d. ~a" G4b00@i (record-type-name G4b04@rtd)) ((lambda (G4b06@v) ((lambda (G4b08@t) (if (memv G4b08@t '(0)) (newline G4afb@port) (if (memv G4b08@t '(1)) (begin (display '": " G4afb@port) (write (G4aff@ref G4b04@rtd '0 G4b01@x) G4afb@port) (newline G4afb@port)) (begin (display '":\n" G4afb@port) ((letrec ((G4b0a@f (lambda (G4b0c@i) (if (not (= G4b0c@i (vector-length G4b06@v))) (begin (display '"       " G4afb@port) (display (vector-ref G4b06@v G4b0c@i) G4afb@port) (display '": " G4afb@port) (write (G4aff@ref G4b04@rtd G4b0c@i G4b01@x) G4afb@port) (newline G4afb@port) (G4b0a@f (+ G4b0c@i '1))) (void))))) G4b0a@f) '0))))) (vector-length G4b06@v))) (record-type-field-names G4b04@rtd)))) (record-rtd G4b01@x))) (simple-conditions G4afa@e))))) '#f))) (set! G4aab@condition-printer (lambda (G4b16@e G4b17@port) (begin (display '" Condition components:\n" G4b17@port) (G4aa7@for-each-with-index (lambda (G4b1a@i G4b1b@x) ((lambda (G4b1e@rtd) (begin (format G4b17@port '"   ~d. ~a" G4b1a@i (record-type-name G4b1e@rtd)) (for-each (lambda (G4b20@field) (begin (display '"       " G4b17@port) (display (car G4b20@field) G4b17@port) (display '": " G4b17@port) (write (cdr G4b20@field) G4b17@port) (newline G4b17@port))) (G4aad@record->field-alist G4b1b@x)))) (record-rtd G4b1b@x))) (simple-conditions G4b16@e))))) (set! G4aad@record->field-alist (lambda (G4b22@r) ((lambda (G4b25@ref) (begin (set! G4b25@ref (lambda (G4b30@rtd G4b31@i G4b32@x) ((lambda (G4b36@val) (if (symbol? G4b36@val) (ungensym G4b36@val) G4b36@val)) ((record-accessor G4b30@rtd G4b31@i) G4b32@x)))) ((letrec ((G4b26@loop (lambda (G4b28@ret G4b29@rtd) (if G4b29@rtd (G4b26@loop (append G4b28@ret (G4aaf@map-with-index (lambda (G4b2c@i G4b2d@field) (cons G4b2d@field (G4b25@ref G4b29@rtd G4b2c@i G4b22@r))) (vector->list (record-type-field-names G4b29@rtd)))) (record-type-parent G4b29@rtd)) G4b28@ret)))) G4b26@loop) '() (record-rtd G4b22@r)))) '#f))) (set! G4aaf@map-with-index (lambda (G4b38@proc G4b39@lst) ((letrec ((G4b3c@loop (lambda (G4b3e@i G4b3f@lst G4b40@ret) (if (null? G4b3f@lst) (reverse G4b40@ret) (G4b3c@loop (+ G4b3e@i '1) (cdr G4b3f@lst) (cons (G4b38@proc G4b3e@i (car G4b3f@lst)) G4b40@ret)))))) G4b3c@loop) '0 G4b39@lst '()))) (set! G4ab1@repl (lambda G4b44@x ((lambda (G4b47@rec) (begin (set! G4b47@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4b4a@G4b48) (lambda () (with-exception-handler (lambda (G4b4c@e) ((call/cc (lambda (G4b4e@G4b49) (G4b4a@G4b48 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? G4b4c@e) (G4aa9@conditioon-printer G4b4c@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" G4b4c@e))) (G4b4e@G4b49 (lambda () (raise-continuable G4b4c@e)))))))))) (lambda () ((letrec ((G4b50@loop (lambda (G4b52@line G4b53@accum) ((lambda (G4b57@parentheses-ok? G4b59@eval-string-print) (begin (set! G4b57@parentheses-ok? (lambda (G4b5e@text) ((letrec ((G4b60@loop (lambda (G4b62@chars G4b63@p0 G4b64@p1) (if (null? G4b62@chars) (= '0 G4b63@p0 G4b64@p1) ((lambda (G4b68@t) (if (memv G4b68@t '(#\()) (G4b60@loop (cdr G4b62@chars) (+ G4b63@p0 '1) G4b64@p1) (if (memv G4b68@t '(#\))) (G4b60@loop (cdr G4b62@chars) (- G4b63@p0 '1) G4b64@p1) (if (memv G4b68@t '(#\[)) (G4b60@loop (cdr G4b62@chars) G4b63@p0 (+ G4b64@p1 '1)) (if (memv G4b68@t '(#\])) (G4b60@loop (cdr G4b62@chars) G4b63@p0 (- G4b64@p1 '1)) (G4b60@loop (cdr G4b62@chars) G4b63@p0 G4b64@p1)))))) (car G4b62@chars)))))) G4b60@loop) (string->list G4b5e@text) '0 '0))) (set! G4b59@eval-string-print (lambda (G4b5c@text) (if (not (or (string=? '"\n" G4b5c@text) (= '0 (string-length G4b5c@text)))) (write (G4abf@eval-top-level (call-with-port (open-string-input-port G4b5c@text) read))) (void)))) (if (eof-object? G4b52@line) (begin (G4b59@eval-string-print G4b53@accum) (exit)) ((lambda (G4b5a@current) (if (G4b57@parentheses-ok? G4b5a@current) (G4b59@eval-string-print G4b5a@current) (G4b50@loop (get-line (current-input-port)) G4b5a@current))) (string-append G4b53@accum G4b52@line))))) '#f '#f)))) G4b50@loop) (get-line (current-input-port)) '""))))))) (newline) (G4b47@rec)))) (G4b47@rec))) '#f))) (set! G4ab3@trace-printer (G26e8@G2616@make-parameter write)) (set! G4ab5@command-line (G26e8@G2616@make-parameter (get-command-line))) (set! G4ab7@local-library-path (lambda (G4b6a@filename) (cons (expand-path '".") (G294a@G27df@library-path)))) (set! G4ab9@load/args (lambda (G4b6c@filename . G4b6e@args) (begin (apply G4ac9@load-r6rs-top-level G4b6c@filename 'load G4b6e@args) (void)))) (set! G4abb@load (lambda (G4b70@filename) (begin (apply G4ac9@load-r6rs-top-level G4b70@filename 'load (G4ab5@command-line)) (void)))) (set! G4abd@ironscheme-build (lambda () (G4abb@load '"ironscheme-buildscript.ss"))) (set! G4abf@eval-top-level (lambda (G4b72@x) (G46db@G2df0@eval G4b72@x (G46f1@G2e1c@interaction-environment)))) (set! G4ac1@compile-system-libraries (lambda () (G4abf@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4ac3@compile (lambda (G4b74@filename) (G4ac9@load-r6rs-top-level G4b74@filename 'compile))) (set! G4ac5@compile->closure (lambda (G4b76@filename) (G4ac9@load-r6rs-top-level G4b76@filename 'closure))) (set! G4ac7@pre-compile-r6rs-file (lambda (G4b78@filename) (G4ac9@load-r6rs-top-level G4b78@filename 'compile))) (set! G4ac9@load-r6rs-top-level (lambda (G4b7a@filename G4b7b@how . G4b7e@args) ((lambda (G4b82@G4b80 G4b83@G4b81) ((lambda (G4b86@swap) (dynamic-wind G4b86@swap (lambda () ((lambda (G4b88@x*) ((lambda (G4b8a@t) (if (memv G4b8a@t '(closure)) (G46f0@G2e1a@pre-compile-r6rs-top-level G4b88@x*) (if (memv G4b8a@t '(load)) ((lambda (G4b8e@G4b8c G4b8f@G4b8d) ((lambda (G4b92@swap) (dynamic-wind G4b92@swap (lambda () ((G46ef@G2e18@compile-r6rs-top-level G4b88@x*))) G4b92@swap)) (lambda () ((lambda (G4b94@t) (begin (G4b8e@G4b8c G4b8f@G4b8d) (set! G4b8f@G4b8d G4b94@t))) (G4b8e@G4b8c))))) G4ab5@command-line (cons G4b7a@filename (car G4b7e@args))) (if (memv G4b8a@t '(compile)) (begin (G46ef@G2e18@compile-r6rs-top-level G4b88@x*) (G294e@G27e7@serialize-all G26e3@G260c@serialize-library G273d@G26f6@compile-core-expr)) (if '#f '#f (void)))))) G4b7b@how)) (with-input-from-file G4b7a@filename (lambda () ((letrec ((G4b96@f (lambda () ((lambda (G4b98@x) (if (eof-object? G4b98@x) '() (cons G4b98@x (G4b96@f)))) (G26db@G25fc@read-annotated))))) G4b96@f)))))) G4b86@swap)) (lambda () ((lambda (G4b9a@t) (begin (G4b82@G4b80 G4b83@G4b81) (set! G4b83@G4b81 G4b9a@t))) (G4b82@G4b80))))) G294a@G27df@library-path (G4ab7@local-library-path G4b7a@filename)))) (begin (set! G4baf@G4ac9@load-r6rs-top-level G4ac9@load-r6rs-top-level) (set! G4bae@G4ac7@pre-compile-r6rs-file G4ac7@pre-compile-r6rs-file) (set! G4bad@G4ac5@compile->closure G4ac5@compile->closure) (set! G4bac@G4ac3@compile G4ac3@compile) (set! G4bab@G4ac1@compile-system-libraries G4ac1@compile-system-libraries) (set! G4baa@G4abf@eval-top-level G4abf@eval-top-level) (set! G4ba9@G4abd@ironscheme-build G4abd@ironscheme-build) (set! G4ba8@G4abb@load G4abb@load) (set! G4ba7@G4ab9@load/args G4ab9@load/args) (set! G4ba6@G4ab7@local-library-path G4ab7@local-library-path) (set! G4ba5@G4ab5@command-line G4ab5@command-line) (set! G4ba4@G4ab3@trace-printer G4ab3@trace-printer) (set! G4ba3@G4ab1@repl G4ab1@repl) (set! G4ba2@G4aaf@map-with-index G4aaf@map-with-index) (set! G4ba1@G4aad@record->field-alist G4aad@record->field-alist) (set! G4ba0@G4aab@condition-printer G4aab@condition-printer) (set! G4b9f@G4aa9@conditioon-printer G4aa9@conditioon-printer) (set! G4b9e@G4aa7@for-each-with-index G4aa7@for-each-with-index) (set! G4b9d@G4aa5@parse-and-add-library-path G4aa5@parse-and-add-library-path) (set! G4b9c@G4aa3@add-library-path! G4aa3@add-library-path!) (G294f@G27e9@current-precompiled-library-loader G26e4@G260e@load-serialized-library) (set-symbol-value! 'load G4abb@load) (set-symbol-value! 'pre-compile-r6rs-file G4ac7@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4abf@eval-top-level) (set-symbol-value! 'int-env-syms G46d2@G2dde@interaction-environment-symbols) (set-symbol-value! 'expanded2core G273c@G26f4@expanded->core) (set-symbol-value! 'trace-printer G4ab3@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4aca@c) (condition (G4a00@G4810@make-non-continuable-violation) (G49f6@G47f7@make-who-condition 'raise) (G49ba@G475a@make-message-condition '"returned from non-continuable exception") (G49ec@G47dd@make-irritants-condition (list G4aca@c))))) (G4aa5@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4aa5@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G294a@G27df@library-path (append (G294a@G27df@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4acc@prefix) (G294b@G27e1@library-extensions (G4acc@prefix '".mosh" (G294b@G27e1@library-extensions)))) (lambda (G4ace@ext G4acf@ls) (append (map (lambda (G4ad2@x) (string-append G4ace@ext G4ad2@x)) G4acf@ls) G4acf@ls))) ((lambda (G4ad4@args G4ad5@port) ((lambda (G4ad9@ref) (begin (set! G4ad9@ref (lambda (G4adc@rtd G4add@i G4ade@x) ((lambda (G4ae2@val) (if (symbol? G4ae2@val) (ungensym G4ae2@val) G4ae2@val)) ((record-accessor G4adc@rtd G4add@i) G4ade@x)))) (with-exception-handler (lambda (G4ada@c) (if (condition? G4ada@c) (G4aa9@conditioon-printer G4ada@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" G4ada@c))) (lambda () (if (null? G4ad4@args) (G4ab1@repl) (G4ac9@load-r6rs-top-level (car G4ad4@args) 'load (cdr G4ad4@args))))))) '#f)) (G4ab5@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
