;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G25fe@read-annotated G2600@annotation-stripped G2602@annotation? G2604@annotation-source G2606@annotation-expression G2608@scm->fasl G260a@fasl-save G260c@fasl-load G260e@serialize-library G2610@load-serialized-library G2612@make-record-printer G2614@compile-core G2616@read-library-source-file G2618@make-parameter G267c@file-options-spec) (begin (set! G25fe@read-annotated read) (set! G2600@annotation-stripped (lambda (G267d@x) (G2606@annotation-expression G267d@x))) (set! G2602@annotation? (lambda (G267f@x) (source-info G267f@x))) (set! G2604@annotation-source (lambda (G2681@x) (source-info G2681@x))) (set! G2606@annotation-expression (lambda (G2683@x) (if (pair? G2683@x) (cons (car G2683@x) (cdr G2683@x)) (display '"line:46\n")))) (set! G2608@scm->fasl (lambda (G2685@filename) (string-append G2685@filename '".fasl"))) (set! G260a@fasl-save (lambda (G2687@filename G2688@obj) (call-with-port (open-file-output-port G2687@filename) (lambda (G268b@port) ((symbol-value 'fasl-write!) G2688@obj G268b@port))))) (set! G260c@fasl-load (lambda (G268d@filename) (call-with-port (open-file-input-port G268d@filename) (symbol-value 'fasl-read!)))) (set! G260e@serialize-library (lambda (G268f@filename G2690@obj) (begin (format '#t '"serialize-library ~a\n..." G268f@filename) ((lambda (G2693@expanded2core) ((lambda (G2695@compile) ((lambda (G2697@code) ((lambda (G2699@pivot) ((lambda (G269b@visit) ((lambda () (begin (set-car! G2699@pivot G269b@visit) ((lambda (G269d@pivot) ((lambda (G269f@invoke) ((lambda () (set-car! G269d@pivot G269f@invoke)))) (G2695@compile (G2693@expanded2core (car G269d@pivot))))) (cdr G2699@pivot)))))) (G2695@compile (G2693@expanded2core (car G2699@pivot))))) (cddddr (cddddr G2697@code)))) G2690@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (G26a1@fasl-file) (begin (if (file-exists? G26a1@fasl-file) (delete-file G26a1@fasl-file) (void)) ((call/cc (lambda (G26a5@G26a3) (lambda () (with-exception-handler (lambda (G26a7@c) ((call/cc (lambda (G26a9@G26a4) (G26a5@G26a3 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed ~a" G268f@filename G26a7@c) (if (file-exists? G26a1@fasl-file) (delete-file G26a1@fasl-file) (void)) '#f) (G26a9@G26a4 (lambda () (raise-continuable G26a7@c)))))))))) (lambda () (begin (G260a@fasl-save G26a1@fasl-file G2690@obj) (display '"OK\n")))))))))) (G2608@scm->fasl G268f@filename))))) (set! G2610@load-serialized-library (lambda (G26ab@filename G26ac@obj) ((lambda (G26af@fasl-file) (if (and (file-exists? G26af@fasl-file) ((symbol-value 'file-newer?) G26af@fasl-file G26ab@filename)) ((lambda (G26b1@expanded2core) ((lambda (G26b3@eval-compiled-core) ((lambda (G26b5@code) ((lambda (G26b7@pivot) ((lambda (G26b9@visit) ((lambda (G26bb@visit-proc) ((lambda () (begin (set-car! G26b7@pivot G26bb@visit-proc) ((lambda (G26bd@pivot) ((lambda (G26bf@invoke) ((lambda () (begin (set-car! G26bd@pivot (lambda () (G26b3@eval-compiled-core G26bf@invoke))) (apply G26ac@obj G26b5@code))))) (car G26bd@pivot))) (cdr G26b7@pivot)) '#t)))) (lambda () (G26b3@eval-compiled-core G26b9@visit)))) (car G26b7@pivot))) (cddddr (cddddr G26b5@code)))) (G260c@fasl-load G26af@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (G2608@scm->fasl G26ab@filename)))) (set! G2612@make-record-printer (lambda (G26c1@name G26c2@printer) (lambda G26c5@x (begin (display '"record printer") (for-each display G26c5@x))))) (set! G2614@compile-core (lambda G26c7@x (apply error 'comile-core '"not implementated" G26c7@x))) (set! G2616@read-library-source-file (lambda (G26c9@file-name) (with-input-from-file G26c9@file-name G25fe@read-annotated))) (set! G2618@make-parameter (lambda G26d9 ((lambda (G26da) (if (= G26da '1) (apply (lambda (G26cb@x) (G2618@make-parameter G26cb@x (lambda (G26cd@x) G26cd@x))) G26d9) (if (= G26da '2) (apply (lambda (G26cf@x G26d0@fender) ((lambda (G26d3@x) (lambda G26d7 ((lambda (G26d8) (if (= G26d8 '0) (apply (lambda () G26d3@x) G26d7) (if (= G26d8 '1) (apply (lambda (G26d5@v) (set! G26d3@x (G26d0@fender G26d5@v))) G26d7) (error 'apply '"invalid arg count")))) (length G26d7)))) (G26d0@fender G26cf@x))) G26d9) (error 'apply '"invalid arg count")))) (length G26d9)))) (set! G267c@file-options-spec (lambda (G26db@x) G26db@x)) (begin (set! G26eb@G267c@file-options-spec G267c@file-options-spec) (set! G26ea@G2618@make-parameter G2618@make-parameter) (set! G26e9@G2616@read-library-source-file G2616@read-library-source-file) (set! G26e8@G2614@compile-core G2614@compile-core) (set! G26e7@G2612@make-record-printer G2612@make-record-printer) (set! G26e6@G2610@load-serialized-library G2610@load-serialized-library) (set! G26e5@G260e@serialize-library G260e@serialize-library) (set! G26e4@G260c@fasl-load G260c@fasl-load) (set! G26e3@G260a@fasl-save G260a@fasl-save) (set! G26e2@G2608@scm->fasl G2608@scm->fasl) (set! G26e1@G2606@annotation-expression G2606@annotation-expression) (set! G26e0@G2604@annotation-source G2604@annotation-source) (set! G26df@G2602@annotation? G2602@annotation?) (set! G26de@G2600@annotation-stripped G2600@annotation-stripped) (set! G26dd@G25fe@read-annotated G25fe@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G26f0@current-primitive-locations G26f2@mutable? G26f4@rewriter G26f6@expanded->core G26f8@compile-core-expr G26fa@pretty-print G26fc@compile-core-expr-to-port) (begin (set! G26f0@current-primitive-locations (G26ea@G2618@make-parameter (lambda (G26fd@x) '#f) (lambda (G26ff@p) G26ff@p))) (set! G26f2@mutable? (lambda (G2701@x) (or (pair? G2701@x) (vector? G2701@x) (hashtable? G2701@x)))) (set! G26f4@rewriter (lambda (G2703@quote-hack?) ((lambda (G2706@f) (begin (set! G2706@f (lambda (G2707@x) (if (pair? G2707@x) ((lambda (G2709@t) (if (memv G2709@t '(quote)) (if (and G2703@quote-hack? (G26f2@mutable? (cadr G2707@x))) ((lambda (G270b@g) (begin (set-symbol-value! G270b@g (cadr G2707@x)) G270b@g)) (gensym)) G2707@x) (if (memv G2709@t '(case-lambda)) (cons 'case-lambda (map (lambda (G270d@x) (cons (car G270d@x) (map G2706@f (cdr G270d@x)))) (cdr G2707@x))) (if (memv G2709@t '(lambda)) (cons* 'lambda (cadr G2707@x) (map G2706@f (cddr G2707@x))) (if (memv G2709@t '(letrec)) ((lambda (G270f@bindings G2710@body*) ((lambda (G2713@lhs* G2714@rhs*) (cons* 'letrec (map list G2713@lhs* (map G2706@f G2714@rhs*)) (map G2706@f G2710@body*))) (map car G270f@bindings) (map cadr G270f@bindings))) (cadr G2707@x) (cddr G2707@x)) (if (memv G2709@t '(letrec*)) ((lambda (G2717@bindings G2718@body*) ((lambda (G271b@lhs* G271c@rhs*) (cons* 'letrec* (map list G271b@lhs* (map G2706@f G271c@rhs*)) (map G2706@f G2718@body*))) (map car G2717@bindings) (map cadr G2717@bindings))) (cadr G2707@x) (cddr G2707@x)) (if (memv G2709@t '(library-letrec*)) ((lambda (G271f@name G2720@x) ((lambda (G2723@bindings G2724@body*) ((lambda (G2727@lhs* G2728@lhs** G2729@rhs*) (cons* 'library-letrec* G271f@name (map list G2727@lhs* G2728@lhs** (map G2706@f G2729@rhs*)) (map G2706@f G2724@body*))) (map car G2723@bindings) (map cadr G2723@bindings) (map caddr G2723@bindings))) (cadr G2720@x) (cddr G2720@x))) (cadr G2707@x) (cdr G2707@x)) (if (memv G2709@t '(begin)) (cons 'begin (map G2706@f (cdr G2707@x))) (if (memv G2709@t '(set!)) (list 'set! (cadr G2707@x) (G2706@f (caddr G2707@x))) (if (memv G2709@t '(primitive)) ((lambda (G272d@op) ((lambda (G272f@t) (if G272f@t ((lambda (G2731@loc) G2731@loc) G272f@t) G272d@op)) ((G26f0@current-primitive-locations) G272d@op))) (cadr G2707@x)) (if (memv G2709@t '(define)) G2707@x (if (list? G2707@x) (map G2706@f G2707@x) (error 'rewrite '"invalid form ~s ~s" G2707@x (list? G2707@x)))))))))))))) (car G2707@x)) G2707@x))) G2706@f)) '#f))) (set! G26f6@expanded->core (lambda (G2733@x) ((G26f4@rewriter '#f) G2733@x))) (set! G26f8@compile-core-expr (lambda (G2735@x) ((G26f4@rewriter '#f) G2735@x))) (set! G26fa@pretty-print write) (set! G26fc@compile-core-expr-to-port (lambda (G2737@x G2738@p) (G26fa@pretty-print ((G26f4@rewriter '#f) G2737@x) G2738@p))) (begin (set! G2741@G26fc@compile-core-expr-to-port G26fc@compile-core-expr-to-port) (set! G2740@G26fa@pretty-print G26fa@pretty-print) (set! G273f@G26f8@compile-core-expr G26f8@compile-core-expr) (set! G273e@G26f6@expanded->core G26f6@expanded->core) (set! G273d@G26f4@rewriter G26f4@rewriter) (set! G273c@G26f2@mutable? G26f2@mutable?) (set! G273b@G26f0@current-primitive-locations G26f0@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2790@make-collection G2792@current-library-collection G2798@G2793 G279a@G2795 G279c@G2794 G279f@library? G27a1@make-library G27a3@library-id G27a5@library-name G27a7@library-version G27a9@library-imp* G27ab@library-vis* G27ad@library-inv* G27af@library-subst G27b1@library-env G27b3@library-visit-state G27b5@library-invoke-state G27b7@library-visit-code G27b9@library-invoke-code G27bb@library-visible? G27bd@library-source-file-name G27bf@set-library-id! G27c1@set-library-name! G27c3@set-library-version! G27c5@set-library-imp*! G27c7@set-library-vis*! G27c9@set-library-inv*! G27cb@set-library-subst! G27cd@set-library-env! G27cf@set-library-visit-state! G27d1@set-library-invoke-state! G27d3@set-library-visit-code! G27d5@set-library-invoke-code! G27d7@set-library-visible?! G27d9@set-library-source-file-name! G27db@rp G27dd@find-dependencies G27df@find-library-by G27e1@library-path G27e3@library-extensions G27e5@library-name->file-name G27e7@file-locator G27e9@serialize-all G27eb@current-precompiled-library-loader G27ed@try-load-from-file G27ef@library-loader G27f1@current-library-expander G27f3@external-pending-libraries G27f5@find-external-library G27f7@find-library-by-name G27f9@library-exists? G27fb@find-library-by-spec/die G27fd@label->binding-table G27ff@install-library-record G2801@install-library G2803@imported-label->binding G2805@invoke-library G2807@visit-library G2809@invoke-library-by-spec G280b@installed-libraries G280d@library-spec) (begin (set! G2790@make-collection (lambda () ((lambda (G280e@set) ((lambda (G2811@set-cons) (begin (set! G2811@set-cons (lambda (G2816@x G2817@ls) (if (memq G2816@x G2817@ls) G2817@ls (cons G2816@x G2817@ls)))) (lambda G2814 ((lambda (G2815) (if (= G2815 '0) (apply (lambda () G280e@set) G2814) (if (= G2815 '1) (apply (lambda (G2812@x) (set! G280e@set (G2811@set-cons G2812@x G280e@set))) G2814) (error 'apply '"invalid arg count")))) (length G2814))))) '#f)) '()))) (set! G2792@current-library-collection (G26ea@G2618@make-parameter (G2790@make-collection) (lambda (G281a@x) (begin (if (not (procedure? G281a@x)) (assertion-violation 'current-library-collection '"not a procedure" G281a@x) (void)) G281a@x)))) (set! G2798@G2793 (make-record-type-descriptor 'library '#f 'G2796 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G279a@G2795 '#f) (set! G279c@G2794 (make-record-constructor-descriptor G2798@G2793 '#f G279a@G2795)) (set! G279f@library? (record-predicate G2798@G2793)) (set! G27a1@make-library (record-constructor G279c@G2794)) (set! G27a3@library-id (record-accessor G2798@G2793 '0)) (set! G27a5@library-name (record-accessor G2798@G2793 '1)) (set! G27a7@library-version (record-accessor G2798@G2793 '2)) (set! G27a9@library-imp* (record-accessor G2798@G2793 '3)) (set! G27ab@library-vis* (record-accessor G2798@G2793 '4)) (set! G27ad@library-inv* (record-accessor G2798@G2793 '5)) (set! G27af@library-subst (record-accessor G2798@G2793 '6)) (set! G27b1@library-env (record-accessor G2798@G2793 '7)) (set! G27b3@library-visit-state (record-accessor G2798@G2793 '8)) (set! G27b5@library-invoke-state (record-accessor G2798@G2793 '9)) (set! G27b7@library-visit-code (record-accessor G2798@G2793 '10)) (set! G27b9@library-invoke-code (record-accessor G2798@G2793 '11)) (set! G27bb@library-visible? (record-accessor G2798@G2793 '12)) (set! G27bd@library-source-file-name (record-accessor G2798@G2793 '13)) (set! G27bf@set-library-id! (record-mutator G2798@G2793 '0)) (set! G27c1@set-library-name! (record-mutator G2798@G2793 '1)) (set! G27c3@set-library-version! (record-mutator G2798@G2793 '2)) (set! G27c5@set-library-imp*! (record-mutator G2798@G2793 '3)) (set! G27c7@set-library-vis*! (record-mutator G2798@G2793 '4)) (set! G27c9@set-library-inv*! (record-mutator G2798@G2793 '5)) (set! G27cb@set-library-subst! (record-mutator G2798@G2793 '6)) (set! G27cd@set-library-env! (record-mutator G2798@G2793 '7)) (set! G27cf@set-library-visit-state! (record-mutator G2798@G2793 '8)) (set! G27d1@set-library-invoke-state! (record-mutator G2798@G2793 '9)) (set! G27d3@set-library-visit-code! (record-mutator G2798@G2793 '10)) (set! G27d5@set-library-invoke-code! (record-mutator G2798@G2793 '11)) (set! G27d7@set-library-visible?! (record-mutator G2798@G2793 '12)) (set! G27d9@set-library-source-file-name! (record-mutator G2798@G2793 '13)) (set! G27db@rp (G26e7@G2612@make-record-printer 'library (lambda (G281c@x G281d@p G281e@wr) (begin (if (not (G279f@library? G281c@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G27a7@library-version G281c@x)) (G27a5@library-name G281c@x) (append (G27a5@library-name G281c@x) (list (G27a7@library-version G281c@x))))) G281d@p))))) (set! G27dd@find-dependencies (lambda (G2822@ls) (if (null? G2822@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G27df@find-library-by (lambda (G2824@pred) ((letrec ((G2826@f (lambda (G2828@ls) (if (null? G2828@ls) '#f (if (G2824@pred (car G2828@ls)) (car G2828@ls) (G2826@f (cdr G2828@ls))))))) G2826@f) ((G2792@current-library-collection))))) (set! G27e1@library-path (G26ea@G2618@make-parameter '(".") (lambda (G282a@x) (if (and (list? G282a@x) (for-all string? G282a@x)) (map (lambda (G282c@x) G282c@x) G282a@x) (assertion-violation 'library-path '"not a list of strings" G282a@x))))) (set! G27e3@library-extensions (G26ea@G2618@make-parameter '(".sls" ".ss" ".scm") (lambda (G282e@x) (if (and (list? G282e@x) (for-all string? G282e@x)) (map (lambda (G2830@x) G2830@x) G282e@x) (assertion-violation 'library-extensions '"not a list of strings" G282e@x))))) (set! G27e5@library-name->file-name (lambda (G2832@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2836@G2834 G2837@G2835) ((lambda (G283a@extract G283b@p) ((lambda (G283f@display-hex) (begin (set! G283f@display-hex (lambda (G2848@n) (if (<= '0 G2848@n '9) (display G2848@n G283b@p) (display (integer->char (+ (char->integer '#\a) (- G2848@n '10))) G283b@p)))) (begin ((letrec ((G2840@f (lambda (G2842@ls) (if (not (null? G2842@ls)) (begin (display '"/" G283b@p) (for-each (lambda (G2844@c) (if (or (char<=? '#\a G2844@c '#\z) (char<=? '#\A G2844@c '#\Z) (char<=? '#\0 G2844@c '#\9) (memv G2844@c '(#\- #\. #\_ #\~))) (display G2844@c G283b@p) (begin (display '"%" G283b@p) ((lambda (G2846@n) (begin (G283f@display-hex (quotient G2846@n '16)) (G283f@display-hex (remainder G2846@n '16)))) (char->integer G2844@c))))) (string->list (symbol->string (car G2842@ls)))) (G2840@f (cdr G2842@ls))) (void))))) G2840@f) G2832@x) (G283a@extract)))) '#f)) G2837@G2835 G2836@G2834))))) (set! G27e7@file-locator (G26ea@G2618@make-parameter (lambda (G284a@x) ((lambda (G284c@str) ((letrec ((G284e@f (lambda (G2850@ls G2851@exts G2852@failed-list) (if (null? G2850@ls) ((lambda () ((lambda (G285e@G2859 G2860@G285b G2862@G285a G2865@G2858 G2867@make-library-resolution-condition G2869@G2856 G286b@G2857 G286d@library-resolution-condition? G286f@condition-library G2871@condition-files) (begin (set! G285e@G2859 (make-record-type-descriptor '&library-resolution G49b8@G470b@&condition-rtd 'G285c '#f '#f '#((immutable library) (immutable files)))) (set! G2860@G285b '#f) (set! G2862@G285a (make-record-constructor-descriptor G285e@G2859 G49b9@G470d@&condition-rcd G2860@G285b)) (set! G2865@G2858 (record-predicate G285e@G2859)) (set! G2867@make-library-resolution-condition (record-constructor G2862@G285a)) (set! G2869@G2856 (record-accessor G285e@G2859 '0)) (set! G286b@G2857 (record-accessor G285e@G2859 '1)) (set! G286d@library-resolution-condition? (condition-predicate G285e@G2859)) (set! G286f@condition-library (condition-accessor G285e@G2859 G2869@G2856)) (set! G2871@condition-files (condition-accessor G285e@G2859 G286b@G2857)) (raise (condition (G49d8@G47a1@make-error) (G49fa@G47fb@make-who-condition 'expander) (G49be@G475e@make-message-condition '"cannot locate library in library-path") (G2867@make-library-resolution-condition G284a@x (reverse G2852@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2851@exts) (G284e@f (cdr G2850@ls) (G27e3@library-extensions) G2852@failed-list) ((lambda (G2872@name) (if (file-exists? G2872@name) G2872@name (G284e@f G2850@ls (cdr G2851@exts) (cons G2872@name G2852@failed-list)))) (string-append (car G2850@ls) G284c@str (car G2851@exts)))))))) G284e@f) (G27e1@library-path) (G27e3@library-extensions) '())) (G27e5@library-name->file-name G284a@x))) (lambda (G2874@f) (if (procedure? G2874@f) G2874@f (assertion-violation 'file-locator '"not a procedure" G2874@f))))) (set! G27e9@serialize-all (lambda (G2876@serialize G2877@compile) ((lambda (G287b@library-desc) (begin (set! G287b@library-desc (lambda (G287e@x) (list (G27a3@library-id G287e@x) (G27a5@library-name G287e@x)))) (for-each (lambda (G287c@x) (if (G27bd@library-source-file-name G287c@x) (G2876@serialize (G27bd@library-source-file-name G287c@x) (list (G27a3@library-id G287c@x) (G27a5@library-name G287c@x) (G27a7@library-version G287c@x) (map G287b@library-desc (G27a9@library-imp* G287c@x)) (map G287b@library-desc (G27ab@library-vis* G287c@x)) (map G287b@library-desc (G27ad@library-inv* G287c@x)) (G27af@library-subst G287c@x) (G27b1@library-env G287c@x) (G2877@compile (G27b7@library-visit-code G287c@x)) (G2877@compile (G27b9@library-invoke-code G287c@x)) (G27bb@library-visible? G287c@x))) (void))) ((G2792@current-library-collection))))) '#f))) (set! G27eb@current-precompiled-library-loader (G26ea@G2618@make-parameter (lambda (G2880@filename G2881@sk) '#f))) (set! G27ed@try-load-from-file (lambda (G2884@filename) ((G27eb@current-precompiled-library-loader) G2884@filename (lambda G28aa ((lambda (G28ab) (if (= G28ab '11) (apply (lambda (G2886@id G2887@name G2888@ver G2889@imp* G288a@vis* G288b@inv* G288c@exp-subst G288d@exp-env G288e@visit-proc G288f@invoke-proc G2890@visible?) ((letrec ((G289c@f (lambda (G289e@deps) (if (null? G289e@deps) (begin (G2801@install-library G2886@id G2887@name G2888@ver G2889@imp* G288a@vis* G288b@inv* G288c@exp-subst G288d@exp-env G288e@visit-proc G288f@invoke-proc '#f '#f G2890@visible? '#f) '#t) ((lambda (G28a0@d) ((lambda (G28a2@label G28a3@dname) ((lambda (G28a6@l) (if (and (G279f@library? G28a6@l) (eq? G28a2@label (G27a3@library-id G28a6@l))) (G289c@f (cdr G289e@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2887@name G28a3@dname G2884@filename G28a6@l G28a2@label (G27a3@library-id G28a6@l)) '#f))) (G27f7@find-library-by-name G28a3@dname))) (car G28a0@d) (cadr G28a0@d))) (car G289e@deps)))))) G289c@f) (append G2889@imp* G288a@vis* G288b@inv*))) G28aa) (if (>= G28ab '0) (apply (lambda G28a8@others '#f) G28aa) (error 'apply '"invalid arg count")))) (length G28aa)))))) (set! G27ef@library-loader (G26ea@G2618@make-parameter (lambda (G28ac@x) ((lambda (G28ae@file-name) (if (not G28ae@file-name) (assertion-violation '#f '"cannot file library" G28ac@x) (or (G27ed@try-load-from-file G28ae@file-name) ((G27f1@current-library-expander) (G26e9@G2616@read-library-source-file G28ae@file-name) G28ae@file-name (lambda (G28b0@name) (if (not (fast-equal? G28b0@name G28ac@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G28b4@G28b2 G28b5@G28b3) ((lambda (G28b8@e G28b9@p) (begin (display '"expected to find library " G28b9@p) (write G28ac@x G28b9@p) (display '" in file " G28b9@p) (display G28ae@file-name G28b9@p) (display '", found " G28b9@p) (write G28b0@name G28b9@p) (display '" instead" G28b9@p) (G28b8@e))) G28b5@G28b3 G28b4@G28b2)))) (void))))))) ((G27e7@file-locator) G28ac@x))) (lambda (G28bc@f) (if (procedure? G28bc@f) G28bc@f (assertion-violation 'library-locator '"not a procedure" G28bc@f))))) (set! G27f1@current-library-expander (G26ea@G2618@make-parameter (lambda (G28be@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G28c0@f) (if (procedure? G28c0@f) G28c0@f (assertion-violation 'library-expander '"not a procedure" G28c0@f))))) (set! G27f3@external-pending-libraries (G26ea@G2618@make-parameter '())) (set! G27f5@find-external-library (lambda (G28c2@name) (begin (if (member G28c2@name (G27f3@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G28c2@name) (void)) ((lambda (G28c6@G28c4 G28c7@G28c5) ((lambda (G28ca@swap) (dynamic-wind G28ca@swap (lambda () (begin ((G27ef@library-loader) G28c2@name) (or (G27df@find-library-by (lambda (G28cc@x) (fast-equal? (G27a5@library-name G28cc@x) G28c2@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G28c2@name)))) G28ca@swap)) (lambda () ((lambda (G28ce@t) (begin (G28c6@G28c4 G28c7@G28c5) (set! G28c7@G28c5 G28ce@t))) (G28c6@G28c4))))) G27f3@external-pending-libraries (cons G28c2@name (G27f3@external-pending-libraries)))))) (set! G27f7@find-library-by-name (lambda (G28d0@name) (or (G27df@find-library-by (lambda (G28d2@x) (fast-equal? (G27a5@library-name G28d2@x) G28d0@name))) (G27f5@find-external-library G28d0@name)))) (set! G27f9@library-exists? (lambda (G28d4@name) (and (G27df@find-library-by (lambda (G28d6@x) (fast-equal? (G27a5@library-name G28d6@x) G28d4@name))) '#t))) (set! G27fb@find-library-by-spec/die (lambda (G28d8@spec) ((lambda (G28da@id) (or (G27df@find-library-by (lambda (G28dc@x) (eq? G28da@id (G27a3@library-id G28dc@x)))) (assertion-violation '#f '"cannot find library with required spec" G28d8@spec))) (car G28d8@spec)))) (set! G27fd@label->binding-table (make-eq-hashtable)) (set! G27ff@install-library-record (lambda (G28de@lib) (begin ((lambda (G28e0@exp-env) (for-each (lambda (G28e2@x) ((lambda (G28e4@label G28e5@binding) ((lambda (G28e8@binding) (hashtable-set! G27fd@label->binding-table G28e4@label G28e8@binding)) ((lambda (G28ea@t) (if (memv G28ea@t '(global)) (cons 'global (cons G28de@lib (cdr G28e5@binding))) (if (memv G28ea@t '(global-macro)) (cons 'global-macro (cons G28de@lib (cdr G28e5@binding))) (if (memv G28ea@t '(global-macro!)) (cons 'global-macro! (cons G28de@lib (cdr G28e5@binding))) G28e5@binding)))) (car G28e5@binding)))) (car G28e2@x) (cdr G28e2@x))) G28e0@exp-env)) (G27b1@library-env G28de@lib)) ((G2792@current-library-collection) G28de@lib)))) (set! G2801@install-library (lambda (G28ec@id G28ed@name G28ee@ver G28ef@imp* G28f0@vis* G28f1@inv* G28f2@exp-subst G28f3@exp-env G28f4@visit-proc G28f5@invoke-proc G28f6@visit-code G28f7@invoke-code G28f8@visible? G28f9@source-file-name) ((lambda (G2908@imp-lib* G2909@vis-lib* G290a@inv-lib*) (begin (if (not (and (symbol? G28ec@id) (list? G28ed@name) (list? G28ee@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G28ec@id G28ed@name G28ee@ver) (void)) (if (G27f9@library-exists? G28ed@name) (assertion-violation 'install-library '"library is already installed" G28ed@name) (void)) ((lambda (G290e@lib) (G27ff@install-library-record G290e@lib)) (G27a1@make-library G28ec@id G28ed@name G28ee@ver G2908@imp-lib* G2909@vis-lib* G290a@inv-lib* G28f2@exp-subst G28f3@exp-env G28f4@visit-proc G28f5@invoke-proc G28f6@visit-code G28f7@invoke-code G28f8@visible? G28f9@source-file-name)))) (map G27fb@find-library-by-spec/die G28ef@imp*) (map G27fb@find-library-by-spec/die G28f0@vis*) (map G27fb@find-library-by-spec/die G28f1@inv*)))) (set! G2803@imported-label->binding (lambda (G2910@lab) (hashtable-ref G27fd@label->binding-table G2910@lab '#f))) (set! G2805@invoke-library (lambda (G2912@lib) ((lambda (G2914@invoke) (if (procedure? G2914@invoke) (begin (G27d1@set-library-invoke-state! G2912@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2912@lib))) (for-each G2805@invoke-library (G27ad@library-inv* G2912@lib)) (G27d1@set-library-invoke-state! G2912@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2912@lib))) (G2914@invoke) (G27d1@set-library-invoke-state! G2912@lib '#t)) (void))) (G27b5@library-invoke-state G2912@lib)))) (set! G2807@visit-library (lambda (G2916@lib) ((lambda (G2918@visit) (if (procedure? G2918@visit) (begin (G27cf@set-library-visit-state! G2916@lib (lambda () (assertion-violation 'visit '"circularity detected" G2916@lib))) (for-each G2805@invoke-library (G27ab@library-vis* G2916@lib)) (G27cf@set-library-visit-state! G2916@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2916@lib))) (G2918@visit) (G27cf@set-library-visit-state! G2916@lib '#t)) (void))) (G27b3@library-visit-state G2916@lib)))) (set! G2809@invoke-library-by-spec (lambda (G291a@spec) (G2805@invoke-library (G27fb@find-library-by-spec/die G291a@spec)))) (set! G280b@installed-libraries (lambda G2922 ((lambda (G2923) (if (= G2923 '1) (apply (lambda (G291c@all?) ((letrec ((G291e@f (lambda (G2920@ls) (if (null? G2920@ls) '() (if (or G291c@all? (G27bb@library-visible? (car G2920@ls))) (cons (car G2920@ls) (G291e@f (cdr G2920@ls))) (G291e@f (cdr G2920@ls))))))) G291e@f) ((G2792@current-library-collection)))) G2922) (if (= G2923 '0) (apply (lambda () (G280b@installed-libraries '#f)) G2922) (error 'apply '"invalid arg count")))) (length G2922)))) (set! G280d@library-spec (lambda (G2924@x) (begin (if (not (G279f@library? G2924@x)) (assertion-violation 'library-spec '"not a library" G2924@x) (void)) (list (G27a3@library-id G2924@x) (G27a5@library-name G2924@x) (G27a7@library-version G2924@x))))) (begin (set! G2962@G280d@library-spec G280d@library-spec) (set! G2961@G280b@installed-libraries G280b@installed-libraries) (set! G2960@G2809@invoke-library-by-spec G2809@invoke-library-by-spec) (set! G295f@G2807@visit-library G2807@visit-library) (set! G295e@G2805@invoke-library G2805@invoke-library) (set! G295d@G2803@imported-label->binding G2803@imported-label->binding) (set! G295c@G2801@install-library G2801@install-library) (set! G295b@G27ff@install-library-record G27ff@install-library-record) (set! G295a@G27fd@label->binding-table G27fd@label->binding-table) (set! G2959@G27fb@find-library-by-spec/die G27fb@find-library-by-spec/die) (set! G2958@G27f9@library-exists? G27f9@library-exists?) (set! G2957@G27f7@find-library-by-name G27f7@find-library-by-name) (set! G2956@G27f5@find-external-library G27f5@find-external-library) (set! G2955@G27f3@external-pending-libraries G27f3@external-pending-libraries) (set! G2954@G27f1@current-library-expander G27f1@current-library-expander) (set! G2953@G27ef@library-loader G27ef@library-loader) (set! G2952@G27ed@try-load-from-file G27ed@try-load-from-file) (set! G2951@G27eb@current-precompiled-library-loader G27eb@current-precompiled-library-loader) (set! G2950@G27e9@serialize-all G27e9@serialize-all) (set! G294f@G27e7@file-locator G27e7@file-locator) (set! G294e@G27e5@library-name->file-name G27e5@library-name->file-name) (set! G294d@G27e3@library-extensions G27e3@library-extensions) (set! G294c@G27e1@library-path G27e1@library-path) (set! G294b@G27df@find-library-by G27df@find-library-by) (set! G294a@G27dd@find-dependencies G27dd@find-dependencies) (set! G2949@G27db@rp G27db@rp) (set! G2948@G27d9@set-library-source-file-name! G27d9@set-library-source-file-name!) (set! G2947@G27d7@set-library-visible?! G27d7@set-library-visible?!) (set! G2946@G27d5@set-library-invoke-code! G27d5@set-library-invoke-code!) (set! G2945@G27d3@set-library-visit-code! G27d3@set-library-visit-code!) (set! G2944@G27d1@set-library-invoke-state! G27d1@set-library-invoke-state!) (set! G2943@G27cf@set-library-visit-state! G27cf@set-library-visit-state!) (set! G2942@G27cd@set-library-env! G27cd@set-library-env!) (set! G2941@G27cb@set-library-subst! G27cb@set-library-subst!) (set! G2940@G27c9@set-library-inv*! G27c9@set-library-inv*!) (set! G293f@G27c7@set-library-vis*! G27c7@set-library-vis*!) (set! G293e@G27c5@set-library-imp*! G27c5@set-library-imp*!) (set! G293d@G27c3@set-library-version! G27c3@set-library-version!) (set! G293c@G27c1@set-library-name! G27c1@set-library-name!) (set! G293b@G27bf@set-library-id! G27bf@set-library-id!) (set! G293a@G27bd@library-source-file-name G27bd@library-source-file-name) (set! G2939@G27bb@library-visible? G27bb@library-visible?) (set! G2938@G27b9@library-invoke-code G27b9@library-invoke-code) (set! G2937@G27b7@library-visit-code G27b7@library-visit-code) (set! G2936@G27b5@library-invoke-state G27b5@library-invoke-state) (set! G2935@G27b3@library-visit-state G27b3@library-visit-state) (set! G2934@G27b1@library-env G27b1@library-env) (set! G2933@G27af@library-subst G27af@library-subst) (set! G2932@G27ad@library-inv* G27ad@library-inv*) (set! G2931@G27ab@library-vis* G27ab@library-vis*) (set! G2930@G27a9@library-imp* G27a9@library-imp*) (set! G292f@G27a7@library-version G27a7@library-version) (set! G292e@G27a5@library-name G27a5@library-name) (set! G292d@G27a3@library-id G27a3@library-id) (set! G292c@G27a1@make-library G27a1@make-library) (set! G292b@G279f@library? G279f@library?) (set! G292a@G279c@G2794 G279c@G2794) (set! G2929@G279a@G2795 G279a@G2795) (set! G2928@G2798@G2793 G2798@G2793) (set! G2927@G2792@current-library-collection G2792@current-library-collection) (set! G2926@G2790@make-collection G2790@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2965@build-global-define G29d6@build-lambda G29d8@build-case-lambda G29da@build-let G2a08@build-sequence G2a0a@build-void G2a0c@build-letrec G2a0e@build-letrec* G2a10@build-library-letrec* G2a12@build-receive) (begin (set! G2965@build-global-define (lambda (G2a13@x) (G2a0a@build-void))) (set! G29d6@build-lambda (lambda (G2a15@ae G2a16@vars G2a17@exp) (list 'lambda G2a16@vars G2a17@exp))) (set! G29d8@build-case-lambda (lambda (G2a1b@ae G2a1c@vars* G2a1d@exp*) ((lambda (G2a22@build-error G2a24@build-pred G2a26@build-apply G2a28@expand-case-lambda) (begin (set! G2a22@build-error (lambda (G2a57@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2a24@build-pred (lambda (G2a41@ae G2a42@n G2a43@vars) (call-with-values (lambda () ((letrec ((G2a49@f (lambda (G2a4b@vars G2a4c@count) (if (pair? G2a4b@vars) (G2a49@f (cdr G2a4b@vars) (+ G2a4c@count '1)) (if (null? G2a4b@vars) (values G2a4c@count '=) (values G2a4c@count '>=)))))) G2a49@f) G2a43@vars '0)) (lambda (G2a4f@G2a47 G2a50@G2a48) ((lambda (G2a53@pred G2a54@count) (list (list 'primitive G2a53@pred) G2a42@n (list 'quote G2a54@count))) G2a50@G2a48 G2a4f@G2a47))))) (set! G2a26@build-apply (lambda (G2a39@ae G2a3a@g G2a3b@vars G2a3c@exp) (list '(primitive apply) (G29d6@build-lambda G2a39@ae G2a3b@vars G2a3c@exp) G2a3a@g))) (set! G2a28@expand-case-lambda (lambda (G2a29@ae G2a2a@vars G2a2b@exp*) ((lambda (G2a2f@g G2a30@n) (list 'lambda G2a2f@g (G29da@build-let G2a29@ae (list G2a30@n) (list (list '(primitive length) G2a2f@g)) ((letrec ((G2a33@f (lambda (G2a35@vars* G2a36@exp*) (if (null? G2a35@vars*) (G2a22@build-error G2a29@ae) (list 'if (G2a24@build-pred G2a29@ae G2a30@n (car G2a35@vars*)) (G2a26@build-apply G2a29@ae G2a2f@g (car G2a35@vars*) (car G2a36@exp*)) (G2a33@f (cdr G2a35@vars*) (cdr G2a36@exp*))))))) G2a33@f) G2a1c@vars* G2a2b@exp*)))) (gensym) (gensym)))) (if (= (length G2a1d@exp*) '1) (G29d6@build-lambda G2a1b@ae (car G2a1c@vars*) (car G2a1d@exp*)) (G2a28@expand-case-lambda G2a1b@ae G2a1c@vars* G2a1d@exp*)))) '#f '#f '#f '#f))) (set! G29da@build-let (lambda (G2a59@ae G2a5a@lhs* G2a5b@rhs* G2a5c@body) (cons (G29d6@build-lambda G2a59@ae G2a5a@lhs* G2a5c@body) G2a5b@rhs*))) (set! G2a08@build-sequence (lambda (G2a61@ae G2a62@exps) ((letrec ((G2a65@loop (lambda (G2a67@exps) (if (null? (cdr G2a67@exps)) (car G2a67@exps) (if (equal? (car G2a67@exps) (G2a0a@build-void)) (G2a65@loop (cdr G2a67@exps)) (cons 'begin G2a67@exps)))))) G2a65@loop) G2a62@exps))) (set! G2a0a@build-void (lambda () '((primitive void)))) (set! G2a0c@build-letrec (lambda (G2a69@ae G2a6a@vars G2a6b@val-exps G2a6c@body-exp) (if (null? G2a6a@vars) G2a6c@body-exp (list 'letrec (map list G2a6a@vars G2a6b@val-exps) G2a6c@body-exp)))) (set! G2a0e@build-letrec* (lambda (G2a71@ae G2a72@vars G2a73@val-exps G2a74@body-exp) (if (null? G2a72@vars) G2a74@body-exp (G29da@build-let G2a71@ae G2a72@vars (map (lambda (G2a79@x) (list 'quote '#f)) G2a72@vars) (G2a08@build-sequence G2a71@ae (append (map (lambda (G2a7b@lhs G2a7c@rhs) (list 'set! G2a7b@lhs G2a7c@rhs)) G2a72@vars G2a73@val-exps) (list G2a74@body-exp))))))) (set! G2a10@build-library-letrec* (lambda (G2a7f@ae G2a80@name G2a81@vars G2a82@locs G2a83@val-exps G2a84@body-exp) (list 'library-letrec* G2a80@name (map list G2a81@vars G2a82@locs G2a83@val-exps) G2a84@body-exp))) (set! G2a12@build-receive (lambda (G2a8b@ae G2a8c@vars G2a8d@producer G2a8e@body*) (begin (display '"************** in ") (cons 'receive (cons G2a8c@vars (cons G2a8d@producer G2a8e@body*)))))) (begin (set! G2a9c@G2a12@build-receive G2a12@build-receive) (set! G2a9b@G2a10@build-library-letrec* G2a10@build-library-letrec*) (set! G2a9a@G2a0e@build-letrec* G2a0e@build-letrec*) (set! G2a99@G2a0c@build-letrec G2a0c@build-letrec) (set! G2a98@G2a0a@build-void G2a0a@build-void) (set! G2a97@G2a08@build-sequence G2a08@build-sequence) (set! G2a96@G29da@build-let G29da@build-let) (set! G2a95@G29d8@build-case-lambda G29d8@build-case-lambda) (set! G2a94@G29d6@build-lambda G29d6@build-lambda) (set! G2a93@G2965@build-global-define G2965@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2aab@set-cons G2aad@set-union G2ab2@top-mark* G2ab4@top-marked? G2ab6@gen-lexical G2ab8@gen-global G2aba@gen-label G2abc@gen-top-level-label G2abe@gen-define-label+loc G2ac0@gen-define-label G2ac6@G2ac1 G2ac8@G2ac3 G2aca@G2ac2 G2acd@rib? G2acf@make-rib G2ad1@rib-sym* G2ad3@rib-mark** G2ad5@rib-label* G2ad7@rib-sealed/freq G2ad9@rib-cache G2adb@set-rib-sym*! G2add@set-rib-mark**! G2adf@set-rib-label*! G2ae1@set-rib-sealed/freq! G2ae3@set-rib-cache! G2ae5@make-empty-rib G2ae7@extend-rib! G2ae9@extend-rib/nc! G2aeb@make-rib-map G2aed@seal-rib! G2aef@unseal-rib! G2af1@make-full-rib G2af7@G2af2 G2af9@G2af4 G2afb@G2af3 G2afe@stx? G2b00@make-stx G2b02@stx-expr G2b04@stx-mark* G2b06@stx-subst* G2b08@stx-ae* G2b0a@set-stx-expr! G2b0c@set-stx-mark*! G2b0e@set-stx-subst*! G2b10@set-stx-ae*! G2b12@rp G2b14@datum->stx G2b16@gen-mark G2b18@anti-mark G2b1a@anti-mark? G2b1c@join-wraps G2b1e@mkstx G2b20@add-mark G2b22@add-subst G2b24@syntax-kind? G2b26@syntax-vector->list G2b28@syntax-pair? G2b2a@syntax-vector? G2b2c@syntax-null? G2b2e@syntax-list? G2b30@syntax-car G2b32@syntax-cdr G2b34@syntax->list G2b36@id? G2b38@id->sym G2b3a@same-marks? G2b3c@bound-id=? G2b3e@free-id=? G2b40@valid-bound-ids? G2b42@distinct-bound-ids? G2b44@bound-id-member? G2b46@self-evaluating? G2b48@strip-annotations G2b4a@strip G2b4c@stx->datum G2b4e@same-marks*? G2b50@id->label G2b52@id->real-label G2b54@label->binding G2b56@make-binding G2b58@binding-type G2b5a@binding-value G2b5c@raise-unbound-error G2b5e@syntax-type G2b6c@sanitize-binding G2b6e@make-variable-transformer G2b70@variable-transformer? G2b72@variable-transformer-procedure G2b74@make-eval-transformer G2cab@parse-define G2cad@parse-define-syntax G2caf@scheme-stx-hashtable G2cb1@scheme-stx G2cb3@lexical-var G2cb5@lexical-mutable? G2cb7@set-lexical-mutable! G2cb9@add-lexical G2cbb@add-lexicals G2cbd@letrec-helper G2cbf@letrec-transformer G2cc1@letrec*-transformer G2cc3@fluid-let-syntax-transformer G2cc5@type-descriptor-transformer G2cc7@record-type-descriptor-transformer G2cc9@record-constructor-descriptor-transformer G2ccb@when-macro G2ccd@unless-macro G2ccf@if-transformer G2cd1@and-transformer G2cd3@or-transformer G2cd5@case-macro G2cd7@quote-transformer G2cd9@case-lambda-transformer G2cdb@lambda-transformer G2cdd@bless G2cdf@with-syntax-macro G2ce1@invalid-fmls-error G2ce3@let-macro G2ce5@let-values-macro G2ce7@let*-values-macro G2ce9@trace-lambda-macro G2ceb@trace-define-macro G2ced@trace-define-syntax-macro G2cef@trace-let/rec-syntax G2cf1@trace-let-syntax-macro G2cf3@trace-letrec-syntax-macro G2cf5@guard-macro G2cf7@define-enumeration-macro G2cf9@time-macro G2cfb@delay-macro G2cfd@assert-macro G2cff@endianness-macro G2d01@identifier-syntax-macro G2d03@do-macro G2d05@let*-macro G2d07@or-macro G2d09@and-macro G2d0b@cond-macro G2d0d@do-include G2d0f@include-macro G2d11@include-into-macro G2d13@syntax-rules-macro G2d15@quasiquote-macro G2d17@quasisyntax-macro G2d19@define-struct-macro G2d1b@define-record-type-macro G2d1d@define-condition-type-macro G2d1f@incorrect-usage-macro G2d21@parameterize-macro G2d23@foreign-call-transformer G2d25@convert-pattern G2d27@syntax-dispatch G2d29@ellipsis? G2d2b@underscore? G2d2d@verify-literals G2d2f@syntax-case-transformer G2d31@ellipsis-map G2d33@syntax-transformer G2d35@core-macro-transformer G2d37@file-options-macro G2d39@symbol-macro G2d3b@macro-transformer G2d3d@local-macro-transformer G2d3f@do-macro-call G2d41@chi-macro G2d43@chi-local-macro G2d45@chi-global-macro G2d47@chi-expr* G2d49@chi-application G2d4b@chi-expr G2d4d@chi-set! G2d4f@verify-formals G2d51@chi-lambda-clause G2d53@chi-lambda-clause* G2d55@chi-defun G2d57@chi-rhs G2d59@expand-interaction-rhs*/init* G2d5b@chi-rhs* G2d5d@find-bound=? G2d5f@find-dups G2d61@chi-internal G2d63@parse-module G2d69@G2d64 G2d6b@G2d66 G2d6d@G2d65 G2d70@module-interface? G2d72@make-module-interface G2d74@module-interface-first-mark G2d76@module-interface-exp-id-vec G2d78@module-interface-exp-lab-vec G2d7a@set-module-interface-first-mark! G2d7c@set-module-interface-exp-id-vec! G2d7e@set-module-interface-exp-lab-vec! G2d80@module-interface-exp-id* G2d82@chi-internal-module G2d84@chi-body* G2d86@expand-transformer G2d88@parse-exports G2d8a@parse-library-name G2d8c@parse-library G2d8e@parse-import-spec* G2d90@make-top-rib G2d92@make-collector G2d94@inv-collector G2d96@vis-collector G2d98@imp-collector G2d9a@chi-library-internal G2d9c@chi-interaction-expr G2d9e@library-body-expander G2da0@core-library-expander G2da2@parse-top-level-program G2da4@top-level-expander G2daa@G2da5 G2dac@G2da7 G2dae@G2da6 G2db1@env? G2db3@make-env G2db5@env-names G2db7@env-labels G2db9@env-itc G2dbb@set-env-names! G2dbd@set-env-labels! G2dbf@set-env-itc! G2dc1@rp G2dc7@G2dc2 G2dc9@G2dc4 G2dcb@G2dc3 G2dce@interaction-env? G2dd0@make-interaction-env G2dd2@interaction-env-rib G2dd4@interaction-env-r G2dd6@interaction-env-locs G2dd8@set-interaction-env-rib! G2dda@set-interaction-env-r! G2ddc@set-interaction-env-locs! G2dde@rp G2de0@interaction-environment-symbols G2de2@environment-bindings G2de4@parse-binding G2de6@environment? G2de8@environment-symbols G2dea@environment G2dec@null-environment G2dee@scheme-report-environment G2df0@expand G2df2@eval G2df4@library-expander G2df6@boot-library-expand G2df8@rev-map-append G2dfa@build-exports G2dfc@make-export-subst G2dfe@make-export-env/macros G2e00@generate-temporaries G2e02@free-identifier=? G2e04@bound-identifier=? G2e06@make-source-condition G2e08@extract-position-condition G2e0a@expression-position G2e0c@assertion-error G2e0e@syntax-error G2e10@syntax-violation* G2e12@syntax-violation G2e14@identifier? G2e16@datum->syntax G2e18@syntax->datum G2e1a@compile-r6rs-top-level G2e1c@pre-compile-r6rs-top-level G2e1e@interaction-environment G2e20@top-level-context) (begin (set! G2aab@set-cons (lambda (G2e21@x G2e22@ls) (if (memq G2e21@x G2e22@ls) G2e22@ls (cons G2e21@x G2e22@ls)))) (set! G2aad@set-union (lambda (G2e25@ls1 G2e26@ls2) (if (null? G2e25@ls1) G2e26@ls2 (if (memq (car G2e25@ls1) G2e26@ls2) (G2aad@set-union (cdr G2e25@ls1) G2e26@ls2) (cons (car G2e25@ls1) (G2aad@set-union (cdr G2e25@ls1) G2e26@ls2)))))) (set! G2ab2@top-mark* '(top)) (set! G2ab4@top-marked? (lambda (G2e29@m*) (memq 'top G2e29@m*))) (set! G2ab6@gen-lexical (lambda (G2e2b@sym) (if (symbol? G2e2b@sym) (gensym G2e2b@sym) (if (G2afe@stx? G2e2b@sym) (G2ab6@gen-lexical (G2b38@id->sym G2e2b@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G2e2b@sym))))) (set! G2ab8@gen-global (lambda (G2e2d@x) (G2ab6@gen-lexical G2e2d@x))) (set! G2aba@gen-label (lambda (G2e2f@_) (gensym))) (set! G2abc@gen-top-level-label (lambda (G2e31@id G2e32@rib) ((lambda (G2e36@find) (begin (set! G2e36@find (lambda (G2e41@sym G2e42@mark* G2e43@sym* G2e44@mark** G2e45@label*) (and (pair? G2e43@sym*) (if (and (eq? G2e41@sym (car G2e43@sym*)) (G2b3a@same-marks? G2e42@mark* (car G2e44@mark**))) (car G2e45@label*) (G2e36@find G2e41@sym G2e42@mark* (cdr G2e43@sym*) (cdr G2e44@mark**) (cdr G2e45@label*)))))) ((lambda (G2e37@sym G2e38@mark*) ((lambda (G2e3b@sym*) ((lambda (G2e3d@t) (if G2e3d@t ((lambda (G2e3f@label) (if (G295d@G2803@imported-label->binding G2e3f@label) (gensym) G2e3f@label)) G2e3d@t) (gensym))) (and (memq G2e37@sym (G2ad1@rib-sym* G2e32@rib)) (G2e36@find G2e37@sym G2e38@mark* G2e3b@sym* (G2ad3@rib-mark** G2e32@rib) (G2ad5@rib-label* G2e32@rib))))) (G2ad1@rib-sym* G2e32@rib))) (G2b38@id->sym G2e31@id) (G2b04@stx-mark* G2e31@id)))) '#f))) (set! G2abe@gen-define-label+loc (lambda (G2e4b@id G2e4c@rib) ((lambda (G2e4f@t) (if G2e4f@t ((lambda (G2e51@env) ((lambda (G2e53@label G2e54@locs) (values G2e53@label ((lambda (G2e57@t) (if G2e57@t (cdr G2e57@t) ((lambda (G2e59@loc) (begin (G2ddc@set-interaction-env-locs! G2e51@env (cons (cons G2e53@label G2e59@loc) G2e54@locs)) G2e59@loc)) (G2ab6@gen-lexical G2e4b@id)))) (assq G2e53@label G2e54@locs)))) (G2abc@gen-top-level-label G2e4b@id G2e4c@rib) (G2dd6@interaction-env-locs G2e51@env))) G2e4f@t) (values (gensym) (G2ab6@gen-lexical G2e4b@id)))) (G2e20@top-level-context)))) (set! G2ac0@gen-define-label (lambda (G2e5b@id G2e5c@rib) (if (G2e20@top-level-context) (G2abc@gen-top-level-label G2e5b@id G2e5c@rib) (gensym)))) (set! G2ac6@G2ac1 (make-record-type-descriptor 'rib '#f 'G2ac4 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2ac8@G2ac3 '#f) (set! G2aca@G2ac2 (make-record-constructor-descriptor G2ac6@G2ac1 '#f G2ac8@G2ac3)) (set! G2acd@rib? (record-predicate G2ac6@G2ac1)) (set! G2acf@make-rib (record-constructor G2aca@G2ac2)) (set! G2ad1@rib-sym* (record-accessor G2ac6@G2ac1 '0)) (set! G2ad3@rib-mark** (record-accessor G2ac6@G2ac1 '1)) (set! G2ad5@rib-label* (record-accessor G2ac6@G2ac1 '2)) (set! G2ad7@rib-sealed/freq (record-accessor G2ac6@G2ac1 '3)) (set! G2ad9@rib-cache (record-accessor G2ac6@G2ac1 '4)) (set! G2adb@set-rib-sym*! (record-mutator G2ac6@G2ac1 '0)) (set! G2add@set-rib-mark**! (record-mutator G2ac6@G2ac1 '1)) (set! G2adf@set-rib-label*! (record-mutator G2ac6@G2ac1 '2)) (set! G2ae1@set-rib-sealed/freq! (record-mutator G2ac6@G2ac1 '3)) (set! G2ae3@set-rib-cache! (record-mutator G2ac6@G2ac1 '4)) (set! G2ae5@make-empty-rib (lambda () (G2acf@make-rib '() '() '() '#f '#f))) (set! G2ae7@extend-rib! (lambda (G2e5f@rib G2e60@id G2e61@label) ((lambda (G2e66@find) (begin (set! G2e66@find (lambda (G2e73@sym G2e74@mark* G2e75@sym* G2e76@mark** G2e77@label*) (and (pair? G2e75@sym*) (if (and (eq? G2e73@sym (car G2e75@sym*)) (G2b3a@same-marks? G2e74@mark* (car G2e76@mark**))) G2e77@label* (G2e66@find G2e73@sym G2e74@mark* (cdr G2e75@sym*) (cdr G2e76@mark**) (cdr G2e77@label*)))))) (begin (if (G2ad7@rib-sealed/freq G2e5f@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G2e5f@rib) (void)) ((lambda (G2e67@sym G2e68@mark*) ((lambda (G2e6b@sym*) ((lambda (G2e6d@t) (if G2e6d@t ((lambda (G2e6f@p) (if (not (eq? G2e61@label (car G2e6f@p))) (if (G2e20@top-level-context) (set-car! G2e6f@p G2e61@label) (G2e12@syntax-violation '#f '"multiple definitions of identifier" G2e60@id)) (void))) G2e6d@t) (begin (if (G2ad9@rib-cache G2e5f@rib) (hashtable-update! (G2ad9@rib-cache G2e5f@rib) G2e67@sym (lambda (G2e71@e) (cons (cons G2e68@mark* G2e61@label) G2e71@e)) '()) (void)) (G2adb@set-rib-sym*! G2e5f@rib (cons G2e67@sym G2e6b@sym*)) (G2add@set-rib-mark**! G2e5f@rib (cons G2e68@mark* (G2ad3@rib-mark** G2e5f@rib))) (G2adf@set-rib-label*! G2e5f@rib (cons G2e61@label (G2ad5@rib-label* G2e5f@rib)))))) (and (memq G2e67@sym (G2ad1@rib-sym* G2e5f@rib)) (G2e66@find G2e67@sym G2e68@mark* G2e6b@sym* (G2ad3@rib-mark** G2e5f@rib) (G2ad5@rib-label* G2e5f@rib))))) (G2ad1@rib-sym* G2e5f@rib))) (G2b38@id->sym G2e60@id) (G2b04@stx-mark* G2e60@id))))) '#f))) (set! G2ae9@extend-rib/nc! (lambda (G2e7d@rib G2e7e@id G2e7f@label) ((lambda (G2e83@sym G2e84@mark*) ((lambda (G2e87@sym*) (begin (if (G2ad9@rib-cache G2e7d@rib) (hashtable-update! (G2ad9@rib-cache G2e7d@rib) G2e83@sym (lambda (G2e89@e) (cons (cons G2e84@mark* G2e7f@label) G2e89@e)) '()) (void)) (G2adb@set-rib-sym*! G2e7d@rib (cons G2e83@sym G2e87@sym*)) (G2add@set-rib-mark**! G2e7d@rib (cons G2e84@mark* (G2ad3@rib-mark** G2e7d@rib))) (G2adf@set-rib-label*! G2e7d@rib (cons G2e7f@label (G2ad5@rib-label* G2e7d@rib))))) (G2ad1@rib-sym* G2e7d@rib))) (G2b38@id->sym G2e7e@id) (G2b04@stx-mark* G2e7e@id)))) (set! G2aeb@make-rib-map (lambda (G2e8b@sym*) ((lambda (G2e8d@ht) ((letrec ((G2e8f@f (lambda (G2e91@i G2e92@sym*) (if (null? G2e92@sym*) G2e8d@ht (begin (hashtable-update! G2e8d@ht (car G2e92@sym*) (lambda (G2e95@x) (cons G2e91@i G2e95@x)) '()) (G2e8f@f (+ G2e91@i '1) (cdr G2e92@sym*))))))) G2e8f@f) '0 G2e8b@sym*)) (make-eq-hashtable)))) (set! G2aed@seal-rib! (lambda (G2e97@rib) ((lambda (G2e99@sym*) (if (not (null? G2e99@sym*)) (begin (G2adb@set-rib-sym*! G2e97@rib (list->vector G2e99@sym*)) (G2add@set-rib-mark**! G2e97@rib (list->vector (G2ad3@rib-mark** G2e97@rib))) (G2adf@set-rib-label*! G2e97@rib (list->vector (G2ad5@rib-label* G2e97@rib))) (G2ae1@set-rib-sealed/freq! G2e97@rib (G2aeb@make-rib-map G2e99@sym*))) (void))) (G2ad1@rib-sym* G2e97@rib)))) (set! G2aef@unseal-rib! (lambda (G2e9b@rib) (if (G2ad7@rib-sealed/freq G2e9b@rib) (begin (G2ae1@set-rib-sealed/freq! G2e9b@rib '#f) (G2adb@set-rib-sym*! G2e9b@rib (vector->list (G2ad1@rib-sym* G2e9b@rib))) (G2add@set-rib-mark**! G2e9b@rib (vector->list (G2ad3@rib-mark** G2e9b@rib))) (G2adf@set-rib-label*! G2e9b@rib (vector->list (G2ad5@rib-label* G2e9b@rib)))) (void)))) (set! G2af1@make-full-rib (lambda (G2e9d@id* G2e9e@label*) ((lambda (G2ea1@r) (begin (G2aed@seal-rib! G2ea1@r) G2ea1@r)) (G2acf@make-rib (map G2b38@id->sym G2e9d@id*) (map G2b04@stx-mark* G2e9d@id*) G2e9e@label* '#f '#f)))) (set! G2af7@G2af2 (make-record-type-descriptor 'stx '#f 'G2af5 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2af9@G2af4 '#f) (set! G2afb@G2af3 (make-record-constructor-descriptor G2af7@G2af2 '#f G2af9@G2af4)) (set! G2afe@stx? (record-predicate G2af7@G2af2)) (set! G2b00@make-stx (record-constructor G2afb@G2af3)) (set! G2b02@stx-expr (record-accessor G2af7@G2af2 '0)) (set! G2b04@stx-mark* (record-accessor G2af7@G2af2 '1)) (set! G2b06@stx-subst* (record-accessor G2af7@G2af2 '2)) (set! G2b08@stx-ae* (record-accessor G2af7@G2af2 '3)) (set! G2b0a@set-stx-expr! (record-mutator G2af7@G2af2 '0)) (set! G2b0c@set-stx-mark*! (record-mutator G2af7@G2af2 '1)) (set! G2b0e@set-stx-subst*! (record-mutator G2af7@G2af2 '2)) (set! G2b10@set-stx-ae*! (record-mutator G2af7@G2af2 '3)) (set! G2b12@rp (G26e7@G2612@make-record-printer 'stx (lambda (G2ea3@x G2ea4@p G2ea5@wr) (begin (display '"#<syntax " G2ea4@p) (write (G2b4c@stx->datum G2ea3@x) G2ea4@p) ((lambda (G2ea9@expr) (if (G26df@G2602@annotation? G2ea9@expr) ((lambda (G2eab@src) (if (pair? G2eab@src) (begin (display '" [" G2ea4@p) (display (cdr G2eab@src) G2ea4@p) (display '" of " G2ea4@p) (display (car G2eab@src) G2ea4@p) (display '"]" G2ea4@p)) (void))) (G26e0@G2604@annotation-source G2ea9@expr)) (void))) (G2b02@stx-expr G2ea3@x)) (display '">" G2ea4@p))))) (set! G2b14@datum->stx (lambda (G2ead@id G2eae@datum) (G2b00@make-stx G2eae@datum (G2b04@stx-mark* G2ead@id) (G2b06@stx-subst* G2ead@id) (G2b08@stx-ae* G2ead@id)))) (set! G2b16@gen-mark (lambda () (string '#\m))) (set! G2b18@anti-mark '#f) (set! G2b1a@anti-mark? not) (set! G2b1c@join-wraps (lambda (G2eb1@m1* G2eb2@s1* G2eb3@ae1* G2eb4@e) ((lambda (G2eba@cancel) (begin (set! G2eba@cancel (lambda (G2ec1@ls1 G2ec2@ls2) ((letrec ((G2ec5@f (lambda (G2ec7@x G2ec8@ls1) (if (null? G2ec8@ls1) (cdr G2ec2@ls2) (cons G2ec7@x (G2ec5@f (car G2ec8@ls1) (cdr G2ec8@ls1))))))) G2ec5@f) (car G2ec1@ls1) (cdr G2ec1@ls1)))) ((lambda (G2ebb@m2* G2ebc@s2* G2ebd@ae2*) (if (and (not (null? G2eb1@m1*)) (not (null? G2ebb@m2*)) (G2b1a@anti-mark? (car G2ebb@m2*))) (values (G2eba@cancel G2eb1@m1* G2ebb@m2*) (G2eba@cancel G2eb2@s1* G2ebc@s2*) (G2eba@cancel G2eb3@ae1* G2ebd@ae2*)) (values (append G2eb1@m1* G2ebb@m2*) (append G2eb2@s1* G2ebc@s2*) (append G2eb3@ae1* G2ebd@ae2*)))) (G2b04@stx-mark* G2eb4@e) (G2b06@stx-subst* G2eb4@e) (G2b08@stx-ae* G2eb4@e)))) '#f))) (set! G2b1e@mkstx (lambda (G2ecb@e G2ecc@m* G2ecd@s* G2ece@ae*) (if (and (G2afe@stx? G2ecb@e) (not (G2ab4@top-marked? G2ecc@m*))) (call-with-values (lambda () (G2b1c@join-wraps G2ecc@m* G2ecd@s* G2ece@ae* G2ecb@e)) (lambda (G2ed6@G2ed3 G2ed7@G2ed4 G2ed8@G2ed5) ((lambda (G2edc@ae* G2edd@s* G2ede@m*) (G2b00@make-stx (G2b02@stx-expr G2ecb@e) G2ede@m* G2edd@s* G2edc@ae*)) G2ed8@G2ed5 G2ed7@G2ed4 G2ed6@G2ed3))) (G2b00@make-stx G2ecb@e G2ecc@m* G2ecd@s* G2ece@ae*)))) (set! G2b20@add-mark (lambda (G2ee2@m G2ee3@e G2ee4@ae) (G2b1e@mkstx G2ee3@e (list G2ee2@m) '(shift) (list G2ee4@ae)))) (set! G2b22@add-subst (lambda (G2ee8@subst G2ee9@e) (G2b1e@mkstx G2ee9@e '() (list G2ee8@subst) '()))) (set! G2b24@syntax-kind? (lambda (G2eec@x G2eed@p?) (if (G2afe@stx? G2eec@x) (G2b24@syntax-kind? (G2b02@stx-expr G2eec@x) G2eed@p?) (if (G26df@G2602@annotation? G2eec@x) (G2b24@syntax-kind? (G26e1@G2606@annotation-expression G2eec@x) G2eed@p?) (G2eed@p? G2eec@x))))) (set! G2b26@syntax-vector->list (lambda (G2ef0@x) (if (G2afe@stx? G2ef0@x) ((lambda (G2ef2@ls G2ef3@m* G2ef4@s* G2ef5@ae*) (map (lambda (G2efa@x) (G2b1e@mkstx G2efa@x G2ef3@m* G2ef4@s* G2ef5@ae*)) G2ef2@ls)) (G2b26@syntax-vector->list (G2b02@stx-expr G2ef0@x)) (G2b04@stx-mark* G2ef0@x) (G2b06@stx-subst* G2ef0@x) (G2b08@stx-ae* G2ef0@x)) (if (G26df@G2602@annotation? G2ef0@x) (G2b26@syntax-vector->list (G26e1@G2606@annotation-expression G2ef0@x)) (if (vector? G2ef0@x) (vector->list G2ef0@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G2ef0@x)))))) (set! G2b28@syntax-pair? (lambda (G2efc@x) (G2b24@syntax-kind? G2efc@x pair?))) (set! G2b2a@syntax-vector? (lambda (G2efe@x) (G2b24@syntax-kind? G2efe@x vector?))) (set! G2b2c@syntax-null? (lambda (G2f00@x) (G2b24@syntax-kind? G2f00@x null?))) (set! G2b2e@syntax-list? (lambda (G2f02@x) (or (G2b2c@syntax-null? G2f02@x) (and (G2b28@syntax-pair? G2f02@x) (G2b2e@syntax-list? (G2b32@syntax-cdr G2f02@x)))))) (set! G2b30@syntax-car (lambda (G2f04@x) (if (G2afe@stx? G2f04@x) (G2b1e@mkstx (G2b30@syntax-car (G2b02@stx-expr G2f04@x)) (G2b04@stx-mark* G2f04@x) (G2b06@stx-subst* G2f04@x) (G2b08@stx-ae* G2f04@x)) (if (G26df@G2602@annotation? G2f04@x) (G2b30@syntax-car (G26e1@G2606@annotation-expression G2f04@x)) (if (pair? G2f04@x) (car G2f04@x) (assertion-violation 'syntax-car '"BUG: not a pair" G2f04@x)))))) (set! G2b32@syntax-cdr (lambda (G2f06@x) (if (G2afe@stx? G2f06@x) (G2b1e@mkstx (G2b32@syntax-cdr (G2b02@stx-expr G2f06@x)) (G2b04@stx-mark* G2f06@x) (G2b06@stx-subst* G2f06@x) (G2b08@stx-ae* G2f06@x)) (if (G26df@G2602@annotation? G2f06@x) (G2b32@syntax-cdr (G26e1@G2606@annotation-expression G2f06@x)) (if (pair? G2f06@x) (cdr G2f06@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G2f06@x)))))) (set! G2b34@syntax->list (lambda (G2f08@x) (if (G2b28@syntax-pair? G2f08@x) (cons (G2b30@syntax-car G2f08@x) (G2b34@syntax->list (G2b32@syntax-cdr G2f08@x))) (if (G2b2c@syntax-null? G2f08@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G2f08@x))))) (set! G2b36@id? (lambda (G2f0a@x) (and (G2afe@stx? G2f0a@x) ((lambda (G2f0c@expr) (symbol? (if (G26df@G2602@annotation? G2f0c@expr) (G26de@G2600@annotation-stripped G2f0c@expr) G2f0c@expr))) (G2b02@stx-expr G2f0a@x))))) (set! G2b38@id->sym (lambda (G2f0e@x) (begin (if (not (G2afe@stx? G2f0e@x)) (error 'id->sym '"BUG in ikarus: not an id" G2f0e@x) (void)) ((lambda (G2f10@expr) ((lambda (G2f12@sym) (if (symbol? G2f12@sym) G2f12@sym (error 'id->sym '"BUG in ikarus: not an id" G2f0e@x))) (if (G26df@G2602@annotation? G2f10@expr) (G26de@G2600@annotation-stripped G2f10@expr) G2f10@expr))) (G2b02@stx-expr G2f0e@x))))) (set! G2b3a@same-marks? (lambda (G2f14@x G2f15@y) (or (and (null? G2f14@x) (null? G2f15@y)) (and (pair? G2f14@x) (pair? G2f15@y) (eq? (car G2f14@x) (car G2f15@y)) (G2b3a@same-marks? (cdr G2f14@x) (cdr G2f15@y)))))) (set! G2b3c@bound-id=? (lambda (G2f18@x G2f19@y) (and (eq? (G2b38@id->sym G2f18@x) (G2b38@id->sym G2f19@y)) (G2b3a@same-marks? (G2b04@stx-mark* G2f18@x) (G2b04@stx-mark* G2f19@y))))) (set! G2b3e@free-id=? (lambda (G2f1c@i G2f1d@j) ((lambda (G2f20@t0 G2f21@t1) (if (or G2f20@t0 G2f21@t1) (eq? G2f20@t0 G2f21@t1) (eq? (G2b38@id->sym G2f1c@i) (G2b38@id->sym G2f1d@j)))) (G2b52@id->real-label G2f1c@i) (G2b52@id->real-label G2f1d@j)))) (set! G2b40@valid-bound-ids? (lambda (G2f24@id*) (and (for-all G2b36@id? G2f24@id*) (G2b42@distinct-bound-ids? G2f24@id*)))) (set! G2b42@distinct-bound-ids? (lambda (G2f26@id*) (or (null? G2f26@id*) (and (not (G2b44@bound-id-member? (car G2f26@id*) (cdr G2f26@id*))) (G2b42@distinct-bound-ids? (cdr G2f26@id*)))))) (set! G2b44@bound-id-member? (lambda (G2f28@id G2f29@id*) (and (pair? G2f29@id*) (or (G2b3c@bound-id=? G2f28@id (car G2f29@id*)) (G2b44@bound-id-member? G2f28@id (cdr G2f29@id*)))))) (set! G2b46@self-evaluating? (lambda (G2f2c@x) (or (number? G2f2c@x) (string? G2f2c@x) (char? G2f2c@x) (boolean? G2f2c@x) (regexp? G2f2c@x) (bytevector? G2f2c@x)))) (set! G2b48@strip-annotations (lambda (G2f2e@x) (if (pair? G2f2e@x) (cons (G2b48@strip-annotations (car G2f2e@x)) (G2b48@strip-annotations (cdr G2f2e@x))) (if (vector? G2f2e@x) (vector-map G2b48@strip-annotations G2f2e@x) (if (G26df@G2602@annotation? G2f2e@x) (G26de@G2600@annotation-stripped G2f2e@x) G2f2e@x))))) (set! G2b4a@strip (lambda (G2f30@x G2f31@m*) (if (G2ab4@top-marked? G2f31@m*) (if (or (G26df@G2602@annotation? G2f30@x) (and (pair? G2f30@x) (G26df@G2602@annotation? (car G2f30@x))) (and (vector? G2f30@x) (> (vector-length G2f30@x) '0) (G26df@G2602@annotation? (vector-ref G2f30@x '0)))) (G2b48@strip-annotations G2f30@x) G2f30@x) ((letrec ((G2f34@f (lambda (G2f36@x) (if (G2afe@stx? G2f36@x) (G2b4a@strip (G2b02@stx-expr G2f36@x) (G2b04@stx-mark* G2f36@x)) (if (G26df@G2602@annotation? G2f36@x) (G26de@G2600@annotation-stripped G2f36@x) (if (pair? G2f36@x) ((lambda (G2f38@a G2f39@d) (if (and (eq? G2f38@a (car G2f36@x)) (eq? G2f39@d (cdr G2f36@x))) G2f36@x (cons G2f38@a G2f39@d))) (G2f34@f (car G2f36@x)) (G2f34@f (cdr G2f36@x))) (if (vector? G2f36@x) ((lambda (G2f3c@old) ((lambda (G2f3e@new) (if (for-all eq? G2f3c@old G2f3e@new) G2f36@x (list->vector G2f3e@new))) (map G2f34@f G2f3c@old))) (vector->list G2f36@x)) G2f36@x))))))) G2f34@f) G2f30@x)))) (set! G2b4c@stx->datum (lambda (G2f40@x) (G2b4a@strip G2f40@x '()))) (set! G2b4e@same-marks*? (lambda (G2f42@mark* G2f43@mark** G2f44@si) (if (null? G2f44@si) '#f (if (G2b3a@same-marks? G2f42@mark* (vector-ref G2f43@mark** (car G2f44@si))) (car G2f44@si) (G2b4e@same-marks*? G2f42@mark* G2f43@mark** (cdr G2f44@si)))))) (set! G2b50@id->label (lambda (G2f48@id) (or (G2b52@id->real-label G2f48@id) ((lambda (G2f4a@t) (if G2f4a@t ((lambda (G2f4c@env) ((lambda (G2f4e@rib) (call-with-values (lambda () (G2abe@gen-define-label+loc G2f48@id G2f4e@rib)) (lambda (G2f52@G2f50 G2f53@G2f51) ((lambda (G2f56@loc_ G2f57@lab) (begin (G2ae7@extend-rib! G2f4e@rib G2f48@id G2f57@lab) G2f57@lab)) G2f53@G2f51 G2f52@G2f50)))) (G2dd2@interaction-env-rib G2f4c@env))) G2f4a@t) '#f)) (G2e20@top-level-context))))) (set! G2b52@id->real-label (lambda (G2f5a@id) ((lambda (G2f5c@sym) ((letrec ((G2f5e@search (lambda (G2f60@subst* G2f61@mark*) (if (null? G2f60@subst*) '#f (if (eq? (car G2f60@subst*) 'shift) (G2f5e@search (cdr G2f60@subst*) (cdr G2f61@mark*)) ((lambda (G2f64@rib) ((lambda (G2f66@t) (if G2f66@t ((lambda (G2f68@ht) ((lambda (G2f6a@si) ((lambda (G2f6c@i) (if G2f6c@i (vector-ref (G2ad5@rib-label* G2f64@rib) G2f6c@i) (G2f5e@search (cdr G2f60@subst*) G2f61@mark*))) (and G2f6a@si (G2b4e@same-marks*? G2f61@mark* (G2ad3@rib-mark** G2f64@rib) (reverse G2f6a@si))))) (hashtable-ref G2f68@ht G2f5c@sym '#f))) G2f66@t) ((letrec ((G2f6e@f (lambda (G2f70@sym* G2f71@mark** G2f72@label*) (if (null? G2f70@sym*) (G2f5e@search (cdr G2f60@subst*) G2f61@mark*) (if (and (eq? (car G2f70@sym*) G2f5c@sym) (G2b3a@same-marks? (car G2f71@mark**) G2f61@mark*)) (car G2f72@label*) (G2f6e@f (cdr G2f70@sym*) (cdr G2f71@mark**) (cdr G2f72@label*))))))) G2f6e@f) (G2ad1@rib-sym* G2f64@rib) (G2ad3@rib-mark** G2f64@rib) (G2ad5@rib-label* G2f64@rib)))) (G2ad7@rib-sealed/freq G2f64@rib))) (car G2f60@subst*))))))) G2f5e@search) (G2b06@stx-subst* G2f5a@id) (G2b04@stx-mark* G2f5a@id))) (G2b38@id->sym G2f5a@id)))) (set! G2b54@label->binding (lambda (G2f76@x G2f77@r) ((lambda (G2f7a@t) (if G2f7a@t ((lambda (G2f7c@b) (if (and (pair? G2f7c@b) (eq? (car G2f7c@b) '$core-rtd)) (cons '$rtd (map G2cdd@bless (cdr G2f7c@b))) (if (and (pair? G2f7c@b) (eq? (car G2f7c@b) 'global-rtd)) ((lambda (G2f7e@lib G2f7f@loc) (cons '$rtd (symbol-value G2f7f@loc))) (cadr G2f7c@b) (cddr G2f7c@b)) G2f7c@b))) G2f7a@t) ((lambda (G2f82@t) (if G2f82@t (cdr G2f82@t) ((lambda (G2f84@t) (if G2f84@t ((lambda (G2f86@env) ((lambda (G2f88@t) (if G2f88@t ((lambda (G2f8a@p) (cons* 'lexical (cdr G2f8a@p) '#f)) G2f88@t) '(displaced-lexical . #f))) (assq G2f76@x (G2dd6@interaction-env-locs G2f86@env)))) G2f84@t) '(displaced-lexical . #f))) (G2e20@top-level-context)))) (assq G2f76@x G2f77@r)))) (G295d@G2803@imported-label->binding G2f76@x)))) (set! G2b56@make-binding cons) (set! G2b58@binding-type car) (set! G2b5a@binding-value cdr) (set! G2b5c@raise-unbound-error (lambda (G2f8c@id) (G2e10@syntax-violation* '#f '"unbound identifier" G2f8c@id (G4a28@G4872@make-undefined-violation)))) (set! G2b5e@syntax-type (lambda (G2f8e@e G2f8f@r) (if (G2b36@id? G2f8e@e) ((lambda (G2f92@id) ((lambda (G2f94@label) ((lambda (G2f96@b) ((lambda (G2f98@type) ((lambda () (begin (if (not G2f94@label) (G2b5c@raise-unbound-error G2f92@id) (void)) ((lambda (G2f9a@t) (if (memv G2f9a@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G2f98@type (G2b5a@binding-value G2f96@b) G2f92@id) (values 'other '#f '#f))) G2f98@type))))) (G2b58@binding-type G2f96@b))) (G2b54@label->binding G2f94@label G2f8f@r))) (G2b50@id->label G2f92@id))) G2f8e@e) (if (G2b28@syntax-pair? G2f8e@e) ((lambda (G2f9c@id) (if (G2b36@id? G2f9c@id) ((lambda (G2f9e@label) ((lambda (G2fa0@b) ((lambda (G2fa2@type) ((lambda () (begin (if (not G2f9e@label) (G2b5c@raise-unbound-error G2f9c@id) (void)) ((lambda (G2fa4@t) (if (memv G2fa4@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G2fa2@type (G2b5a@binding-value G2fa0@b) G2f9c@id) (values 'call '#f '#f))) G2fa2@type))))) (G2b58@binding-type G2fa0@b))) (G2b54@label->binding G2f9e@label G2f8f@r))) (G2b50@id->label G2f9c@id)) (values 'call '#f '#f))) (G2b30@syntax-car G2f8e@e)) ((lambda (G2fa6@d) (if (G2b46@self-evaluating? G2fa6@d) (values 'constant G2fa6@d '#f) (values 'other '#f '#f))) (G2b4c@stx->datum G2f8e@e)))))) (set! G2b6c@sanitize-binding (lambda (G2fa8@x G2fa9@src) (if (procedure? G2fa8@x) (cons* 'local-macro G2fa8@x G2fa9@src) (if (and (pair? G2fa8@x) (eq? (car G2fa8@x) 'macro!) (procedure? (cdr G2fa8@x))) (cons* 'local-macro! (cdr G2fa8@x) G2fa9@src) (if (and (pair? G2fa8@x) (eq? (car G2fa8@x) '$rtd)) G2fa8@x (assertion-violation 'expand '"invalid transformer" G2fa8@x)))))) (set! G2b6e@make-variable-transformer (lambda (G2fac@x) (if (procedure? G2fac@x) (cons 'macro! G2fac@x) (assertion-violation 'make-variable-transformer '"not a procedure" G2fac@x)))) (set! G2b70@variable-transformer? (lambda (G2fae@x) (and (pair? G2fae@x) (eq? (car G2fae@x) 'macro!) (procedure? (cdr G2fae@x))))) (set! G2b72@variable-transformer-procedure (lambda (G2fb0@x) (if (G2b70@variable-transformer? G2fb0@x) (cdr G2fb0@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G2fb0@x)))) (set! G2b74@make-eval-transformer (lambda (G2fb2@x) (G2b6c@sanitize-binding (eval-core (G273e@G26f6@expanded->core G2fb2@x)) G2fb2@x))) (set! G2cab@parse-define (lambda (G2fb4@x) ((lambda (G2fb6@t) ((lambda (G2fb8@ls/false) (if (and G2fb8@ls/false (apply (lambda (G2fba@id G2fbb@fmls G2fbc@b G2fbd@b*) (G2b36@id? G2fba@id)) G2fb8@ls/false)) (apply (lambda (G2fc2@id G2fc3@fmls G2fc4@b G2fc5@b*) (begin (G2d4f@verify-formals G2fc3@fmls G2fb4@x) (values G2fc2@id (cons 'defun (cons G2fc3@fmls (cons G2fc4@b G2fc5@b*)))))) G2fb8@ls/false) ((lambda (G2fca@t) ((lambda (G2fcc@ls/false) (if (and G2fcc@ls/false (apply (lambda (G2fce@id G2fcf@val) (G2b36@id? G2fce@id)) G2fcc@ls/false)) (apply (lambda (G2fd2@id G2fd3@val) (values G2fd2@id (cons 'expr G2fd3@val))) G2fcc@ls/false) ((lambda (G2fd6@t) ((lambda (G2fd8@ls/false) (if (and G2fd8@ls/false (apply (lambda (G2fda@id) (G2b36@id? G2fda@id)) G2fd8@ls/false)) (apply (lambda (G2fdc@id) (values G2fdc@id (cons 'expr (G2cdd@bless '(void))))) G2fd8@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G2fd6@t))) (G2d27@syntax-dispatch G2fd6@t '(_ any)))) G2fca@t))) (G2d27@syntax-dispatch G2fca@t '(_ any any)))) G2fb6@t))) (G2d27@syntax-dispatch G2fb6@t '(_ (any . any) any . each-any)))) G2fb4@x))) (set! G2cad@parse-define-syntax (lambda (G2fde@x) ((lambda (G2fe0@t) ((lambda (G2fe2@ls/false) (if (and G2fe2@ls/false (apply (lambda (G2fe4@id G2fe5@val) (G2b36@id? G2fe4@id)) G2fe2@ls/false)) (apply (lambda (G2fe8@id G2fe9@val) (values G2fe8@id G2fe9@val)) G2fe2@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G2fe0@t))) (G2d27@syntax-dispatch G2fe0@t '(_ any any)))) G2fde@x))) (set! G2caf@scheme-stx-hashtable (make-eq-hashtable)) (set! G2cb1@scheme-stx (lambda (G2fec@sym) (or (hashtable-ref G2caf@scheme-stx-hashtable G2fec@sym '#f) ((lambda (G2fee@subst) ((lambda (G2ff0@stx) ((lambda (G2ff2@stx) ((lambda () (begin (hashtable-set! G2caf@scheme-stx-hashtable G2fec@sym G2ff2@stx) G2ff2@stx)))) ((lambda (G2ff4@t) (if G2ff4@t ((lambda (G2ff6@x) ((lambda (G2ff8@name G2ff9@label) (G2b22@add-subst (G2acf@make-rib (list G2ff8@name) (list G2ab2@top-mark*) (list G2ff9@label) '#f '#f) G2ff0@stx)) (car G2ff6@x) (cdr G2ff6@x))) G2ff4@t) G2ff0@stx)) (assq G2fec@sym G2fee@subst)))) (G2b00@make-stx G2fec@sym G2ab2@top-mark* '() '()))) (G2933@G27af@library-subst (G2957@G27f7@find-library-by-name '(psyntax system $all))))))) (set! G2cb3@lexical-var car) (set! G2cb5@lexical-mutable? cdr) (set! G2cb7@set-lexical-mutable! set-cdr!) (set! G2cb9@add-lexical (lambda (G2ffc@lab G2ffd@lex G2ffe@r) (cons (cons* G2ffc@lab 'lexical G2ffd@lex '#f) G2ffe@r))) (set! G2cbb@add-lexicals (lambda (G3002@lab* G3003@lex* G3004@r) (if (null? G3002@lab*) G3004@r (G2cbb@add-lexicals (cdr G3002@lab*) (cdr G3003@lex*) (G2cb9@add-lexical (car G3002@lab*) (car G3003@lex*) G3004@r))))) (set! G2cbd@letrec-helper (lambda (G3008@e G3009@r G300a@mr G300b@build) ((lambda (G3010@t) ((lambda (G3012@ls/false) (if G3012@ls/false (apply (lambda (G3014@lhs* G3015@rhs* G3016@b G3017@b*) (if (not (G2b40@valid-bound-ids? G3014@lhs*)) (G2ce1@invalid-fmls-error G3008@e G3014@lhs*) ((lambda (G301c@lex* G301d@lab*) ((lambda (G3020@rib G3021@r) ((lambda (G3024@body G3025@rhs*) (G300b@build '#f G301c@lex* G3025@rhs* G3024@body)) (G2d61@chi-internal (G2b22@add-subst G3020@rib (cons G3016@b G3017@b*)) G3021@r G300a@mr) (G2d47@chi-expr* (map (lambda (G3028@x) (G2b22@add-subst G3020@rib G3028@x)) G3015@rhs*) G3021@r G300a@mr))) (G2af1@make-full-rib G3014@lhs* G301d@lab*) (G2cbb@add-lexicals G301d@lab* G301c@lex* G3009@r))) (map G2ab6@gen-lexical G3014@lhs*) (map G2aba@gen-label G3014@lhs*)))) G3012@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3010@t))) (G2d27@syntax-dispatch G3010@t '(_ #(each (any any)) any . each-any)))) G3008@e))) (set! G2cbf@letrec-transformer (lambda (G302a@e G302b@r G302c@mr) (G2cbd@letrec-helper G302a@e G302b@r G302c@mr G2a99@G2a0c@build-letrec))) (set! G2cc1@letrec*-transformer (lambda (G3030@e G3031@r G3032@mr) (G2cbd@letrec-helper G3030@e G3031@r G3032@mr G2a9a@G2a0e@build-letrec*))) (set! G2cc3@fluid-let-syntax-transformer (lambda (G3036@e G3037@r G3038@mr) ((lambda (G303d@lookup) (begin (set! G303d@lookup (lambda (G3050@x) (or (G2b50@id->label G3050@x) (G2e12@syntax-violation '#f '"unbound identifier" G3036@e G3050@x)))) ((lambda (G303e@t) ((lambda (G3040@ls/false) (if G3040@ls/false (apply (lambda (G3042@lhs* G3043@rhs* G3044@b G3045@b*) (if (not (G2b40@valid-bound-ids? G3042@lhs*)) (G2ce1@invalid-fmls-error G3036@e G3042@lhs*) ((lambda (G304a@lab* G304b@rhs*) (G2d61@chi-internal (cons G3044@b G3045@b*) (append (map cons G304a@lab* G304b@rhs*) G3037@r) (append (map cons G304a@lab* G304b@rhs*) G3038@mr))) (map G303d@lookup G3042@lhs*) (map (lambda (G304e@x) (G2b74@make-eval-transformer (G2d86@expand-transformer G304e@x G3038@mr))) G3043@rhs*)))) G3040@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G303e@t))) (G2d27@syntax-dispatch G303e@t '(_ #(each (any any)) any . each-any)))) G3036@e))) '#f))) (set! G2cc5@type-descriptor-transformer (lambda (G3052@e G3053@r G3054@mr) ((lambda (G3058@t) ((lambda (G305a@ls/false) (if (and G305a@ls/false (apply (lambda (G305c@id) (G2b36@id? G305c@id)) G305a@ls/false)) (apply (lambda (G305e@id) ((lambda (G3060@lab) ((lambda (G3062@b) ((lambda (G3064@type) ((lambda () (begin (if (not G3060@lab) (G2b5c@raise-unbound-error G305e@id) (void)) (if (not (and (eq? G3064@type '$rtd) (not (list? (G2b5a@binding-value G3062@b))))) (G2e12@syntax-violation '#f '"not a record type" G3052@e) (void)) (list 'quote (G2b5a@binding-value G3062@b)))))) (G2b58@binding-type G3062@b))) (G2b54@label->binding G3060@lab G3053@r))) (G2b50@id->label G305e@id))) G305a@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3058@t))) (G2d27@syntax-dispatch G3058@t '(_ any)))) G3052@e))) (set! G2cc7@record-type-descriptor-transformer (lambda (G3066@e G3067@r G3068@mr) ((lambda (G306c@t) ((lambda (G306e@ls/false) (if (and G306e@ls/false (apply (lambda (G3070@id) (G2b36@id? G3070@id)) G306e@ls/false)) (apply (lambda (G3072@id) ((lambda (G3074@lab) ((lambda (G3076@b) ((lambda (G3078@type) ((lambda () (begin (if (symbol-value 'debug-expand) (format '#t '"id=~a lab=~a b=~a <~a ~a>\n" (G2b02@stx-expr G3072@id) G3074@lab G3076@b (G2b02@stx-expr (cadr G3076@b)) (G2b02@stx-expr (caddr G3076@b))) (void)) (if (not G3074@lab) (G2b5c@raise-unbound-error G3072@id) (void)) (if (not (and (eq? G3078@type '$rtd) (list? (G2b5a@binding-value G3076@b)))) (G2e12@syntax-violation '#f '"not a record type" G3066@e) (void)) (if (symbol-value 'debug-expand) (format '#t '"(car (binding-value b))=~a \n" (G2b02@stx-expr (car (G2b5a@binding-value G3076@b)))) (void)) (G2d4b@chi-expr (car (G2b5a@binding-value G3076@b)) G3067@r G3068@mr))))) (G2b58@binding-type G3076@b))) (G2b54@label->binding G3074@lab G3067@r))) (G2b50@id->label G3072@id))) G306e@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G306c@t))) (G2d27@syntax-dispatch G306c@t '(_ any)))) G3066@e))) (set! G2cc9@record-constructor-descriptor-transformer (lambda (G307a@e G307b@r G307c@mr) ((lambda (G3080@t) ((lambda (G3082@ls/false) (if (and G3082@ls/false (apply (lambda (G3084@id) (G2b36@id? G3084@id)) G3082@ls/false)) (apply (lambda (G3086@id) ((lambda (G3088@lab) ((lambda (G308a@b) ((lambda (G308c@type) ((lambda () (begin (if (not G3088@lab) (G2b5c@raise-unbound-error G3086@id) (void)) (if (not (and (eq? G308c@type '$rtd) (list? (G2b5a@binding-value G308a@b)))) (G2e12@syntax-violation '#f '"invalid type" G307a@e) (void)) (G2d4b@chi-expr (cadr (G2b5a@binding-value G308a@b)) G307b@r G307c@mr))))) (G2b58@binding-type G308a@b))) (G2b54@label->binding G3088@lab G307b@r))) (G2b50@id->label G3086@id))) G3082@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3080@t))) (G2d27@syntax-dispatch G3080@t '(_ any)))) G307a@e))) (set! G2ccb@when-macro (lambda (G308e@e) ((lambda (G3090@t) ((lambda (G3092@ls/false) (if G3092@ls/false (apply (lambda (G3094@test G3095@e G3096@e*) (G2cdd@bless (list 'if G3094@test (cons 'begin (cons G3095@e G3096@e*))))) G3092@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3090@t))) (G2d27@syntax-dispatch G3090@t '(_ any any . each-any)))) G308e@e))) (set! G2ccd@unless-macro (lambda (G309a@e) ((lambda (G309c@t) ((lambda (G309e@ls/false) (if G309e@ls/false (apply (lambda (G30a0@test G30a1@e G30a2@e*) (G2cdd@bless (list 'if (list 'not G30a0@test) (cons 'begin (cons G30a1@e G30a2@e*))))) G309e@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G309c@t))) (G2d27@syntax-dispatch G309c@t '(_ any any . each-any)))) G309a@e))) (set! G2ccf@if-transformer (lambda (G30a6@e G30a7@r G30a8@mr) ((lambda (G30ac@t) ((lambda (G30ae@ls/false) (if G30ae@ls/false (apply (lambda (G30b0@e0 G30b1@e1 G30b2@e2) (list 'if (G2d4b@chi-expr G30b0@e0 G30a7@r G30a8@mr) (G2d4b@chi-expr G30b1@e1 G30a7@r G30a8@mr) (G2d4b@chi-expr G30b2@e2 G30a7@r G30a8@mr))) G30ae@ls/false) ((lambda (G30b6@t) ((lambda (G30b8@ls/false) (if G30b8@ls/false (apply (lambda (G30ba@e0 G30bb@e1) (list 'if (G2d4b@chi-expr G30ba@e0 G30a7@r G30a8@mr) (G2d4b@chi-expr G30bb@e1 G30a7@r G30a8@mr) (G2a98@G2a0a@build-void))) G30b8@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G30b6@t))) (G2d27@syntax-dispatch G30b6@t '(_ any any)))) G30ac@t))) (G2d27@syntax-dispatch G30ac@t '(_ any any any)))) G30a6@e))) (set! G2cd1@and-transformer (lambda (G30be@e G30bf@r G30c0@mr) ((lambda (G30c4@t) ((lambda (G30c6@ls/false) (if G30c6@ls/false (apply (lambda (G30c8@e*) (cons 'and (G2d47@chi-expr* G30c8@e* G30bf@r G30c0@mr))) G30c6@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G30c4@t))) (G2d27@syntax-dispatch G30c4@t '(_ . each-any)))) G30be@e))) (set! G2cd3@or-transformer (lambda (G30ca@e G30cb@r G30cc@mr) ((lambda (G30d0@t) ((lambda (G30d2@ls/false) (if G30d2@ls/false (apply (lambda (G30d4@e*) (cons 'or (G2d47@chi-expr* G30d4@e* G30cb@r G30cc@mr))) G30d2@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G30d0@t))) (G2d27@syntax-dispatch G30d0@t '(_ . each-any)))) G30ca@e))) (set! G2cd5@case-macro (lambda (G30d6@e) ((lambda (G30d9@build-last G30db@build-one) (begin (set! G30d9@build-last (lambda (G3100@cls) ((lambda (G3102@t) ((lambda (G3104@ls/false) (if G3104@ls/false (apply (lambda (G3106@e G3107@e*) (cons 'begin (cons G3106@e G3107@e*))) G3104@ls/false) ((lambda (G310a@t) ((lambda (G310c@ls/false) (if G310c@ls/false (apply (lambda () (G30db@build-one G3100@cls '(if #f #f))) G310c@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G310a@t))) (G2d27@syntax-dispatch G310a@t '_))) G3102@t))) (G2d27@syntax-dispatch G3102@t '(#(scheme-id else) any . each-any)))) G3100@cls))) (set! G30db@build-one (lambda (G30f2@cls G30f3@k) ((lambda (G30f6@t) ((lambda (G30f8@ls/false) (if G30f8@ls/false (apply (lambda (G30fa@d* G30fb@e G30fc@e*) (list 'if (list 'memv 't (list 'quote G30fa@d*)) (cons 'begin (cons G30fb@e G30fc@e*)) G30f3@k)) G30f8@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G30f6@t))) (G2d27@syntax-dispatch G30f6@t '(each-any any . each-any)))) G30f2@cls))) ((lambda (G30dc@t) ((lambda (G30de@ls/false) (if G30de@ls/false (apply (lambda (G30e0@expr) (G2cdd@bless (cons 'let (cons (list (list 't G30e0@expr)) '((if #f #f)))))) G30de@ls/false) ((lambda (G30e2@t) ((lambda (G30e4@ls/false) (if G30e4@ls/false (apply (lambda (G30e6@expr G30e7@cls G30e8@cls*) (G2cdd@bless (list 'let (list (list 't G30e6@expr)) ((letrec ((G30ec@f (lambda (G30ee@cls G30ef@cls*) (if (null? G30ef@cls*) (G30d9@build-last G30ee@cls) (G30db@build-one G30ee@cls (G30ec@f (car G30ef@cls*) (cdr G30ef@cls*))))))) G30ec@f) G30e7@cls G30e8@cls*)))) G30e4@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G30e2@t))) (G2d27@syntax-dispatch G30e2@t '(_ any any . each-any)))) G30dc@t))) (G2d27@syntax-dispatch G30dc@t '(_ any)))) G30d6@e))) '#f '#f))) (set! G2cd7@quote-transformer (lambda (G310e@e G310f@r G3110@mr) ((lambda (G3114@t) ((lambda (G3116@ls/false) (if G3116@ls/false (apply (lambda (G3118@datum) (list 'quote (G2b4c@stx->datum G3118@datum))) G3116@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3114@t))) (G2d27@syntax-dispatch G3114@t '(_ any)))) G310e@e))) (set! G2cd9@case-lambda-transformer (lambda (G311a@e G311b@r G311c@mr) ((lambda (G3120@t) ((lambda (G3122@ls/false) (if G3122@ls/false (apply (lambda (G3124@fmls* G3125@b* G3126@b**) (call-with-values (lambda () (G2d53@chi-lambda-clause* G311a@e G3124@fmls* (map cons G3125@b* G3126@b**) G311b@r G311c@mr)) (lambda (G312c@G312a G312d@G312b) ((lambda (G3130@body* G3131@fmls*) (G2a95@G29d8@build-case-lambda '#f G3131@fmls* G3130@body*)) G312d@G312b G312c@G312a)))) G3122@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3120@t))) (G2d27@syntax-dispatch G3120@t '(_ . #(each (any any . each-any)))))) G311a@e))) (set! G2cdb@lambda-transformer (lambda (G3134@e G3135@r G3136@mr) ((lambda (G313a@t) ((lambda (G313c@ls/false) (if G313c@ls/false (apply (lambda (G313e@fmls G313f@b G3140@b*) (call-with-values (lambda () (G2d51@chi-lambda-clause G3134@e G313e@fmls (cons G313f@b G3140@b*) G3135@r G3136@mr)) (lambda (G3146@G3144 G3147@G3145) ((lambda (G314a@body G314b@fmls) (G2a94@G29d6@build-lambda '#f G314b@fmls G314a@body)) G3147@G3145 G3146@G3144)))) G313c@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G313a@t))) (G2d27@syntax-dispatch G313a@t '(_ any any . each-any)))) G3134@e))) (set! G2cdd@bless (lambda (G314e@x) (G2b1e@mkstx ((letrec ((G3150@f (lambda (G3152@x) (if (G2afe@stx? G3152@x) G3152@x (if (pair? G3152@x) (cons (G3150@f (car G3152@x)) (G3150@f (cdr G3152@x))) (if (symbol? G3152@x) (G2cb1@scheme-stx G3152@x) (if (vector? G3152@x) (vector-map G3150@f G3152@x) G3152@x))))))) G3150@f) G314e@x) '() '() '()))) (set! G2cdf@with-syntax-macro (lambda (G3154@e) ((lambda (G3156@t) ((lambda (G3158@ls/false) (if G3158@ls/false (apply (lambda (G315a@pat* G315b@expr* G315c@b G315d@b*) ((lambda (G3162@idn*) (begin (G2d4f@verify-formals (map car G3162@idn*) G3154@e) ((lambda (G3164@t*) (G2cdd@bless (list 'let (map list G3164@t* G315b@expr*) ((letrec ((G3166@f (lambda (G3168@pat* G3169@t*) (if (null? G3168@pat*) (cons 'begin (cons '#f (cons G315c@b G315d@b*))) (list 'syntax-case (car G3169@t*) '() (list (car G3168@pat*) (G3166@f (cdr G3168@pat*) (cdr G3169@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G3168@pat*)) (car G3169@t*)))))))) G3166@f) G315a@pat* G3164@t*)))) (G2e00@generate-temporaries G315b@expr*)))) ((letrec ((G316c@f (lambda (G316e@pat*) (if (null? G316e@pat*) '() (call-with-values (lambda () (G2d25@convert-pattern (car G316e@pat*) '())) (lambda (G3172@G3170 G3173@G3171) ((lambda (G3176@idn* G3177@pat) (append G3176@idn* (G316c@f (cdr G316e@pat*)))) G3173@G3171 G3172@G3170))))))) G316c@f) G315a@pat*))) G3158@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3156@t))) (G2d27@syntax-dispatch G3156@t '(_ #(each (any any)) any . each-any)))) G3154@e))) (set! G2ce1@invalid-fmls-error (lambda (G317a@stx G317b@fmls) ((lambda (G317e@t) ((lambda (G3180@ls/false) (if G3180@ls/false (apply (lambda (G3182@id* G3183@last) ((letrec ((G3186@f (lambda (G3188@id*) (if (null? G3188@id*) (values) (if (not (G2b36@id? (car G3188@id*))) (G2e12@syntax-violation '#f '"not an identifier" G317a@stx (car G3188@id*)) (begin (G3186@f (cdr G3188@id*)) (if (G2b44@bound-id-member? (car G3188@id*) (cdr G3188@id*)) (G2e12@syntax-violation '#f '"duplicate binding" G317a@stx (car G3188@id*)) (void)))))))) G3186@f) (if (G2b36@id? G3183@last) (cons G3183@last G3182@id*) (if (G2b2c@syntax-null? G3183@last) G3182@id* (G2e12@syntax-violation '#f '"not an identifier" G317a@stx G3183@last))))) G3180@ls/false) ((lambda (G318a@t) ((lambda (G318c@ls/false) (if G318c@ls/false (apply (lambda () (G2e12@syntax-violation '#f '"malformed binding form" G317a@stx G317b@fmls)) G318c@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G318a@t))) (G2d27@syntax-dispatch G318a@t '_))) G317e@t))) (G2d27@syntax-dispatch G317e@t '#(each+ any () any)))) G317b@fmls))) (set! G2ce3@let-macro (lambda (G318e@stx) ((lambda (G3190@t) ((lambda (G3192@ls/false) (if G3192@ls/false (apply (lambda (G3194@lhs* G3195@rhs* G3196@b G3197@b*) (if (G2b40@valid-bound-ids? G3194@lhs*) (G2cdd@bless (cons (cons 'lambda (cons G3194@lhs* (cons G3196@b G3197@b*))) G3195@rhs*)) (G2ce1@invalid-fmls-error G318e@stx G3194@lhs*))) G3192@ls/false) ((lambda (G319c@t) ((lambda (G319e@ls/false) (if (and G319e@ls/false (apply (lambda (G31a0@f G31a1@lhs* G31a2@rhs* G31a3@b G31a4@b*) (G2b36@id? G31a0@f)) G319e@ls/false)) (apply (lambda (G31aa@f G31ab@lhs* G31ac@rhs* G31ad@b G31ae@b*) (if (G2b40@valid-bound-ids? G31ab@lhs*) (G2cdd@bless (cons (list 'letrec (list (list G31aa@f (cons 'lambda (cons G31ab@lhs* (cons G31ad@b G31ae@b*))))) G31aa@f) G31ac@rhs*)) (G2ce1@invalid-fmls-error G318e@stx G31ab@lhs*))) G319e@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G319c@t))) (G2d27@syntax-dispatch G319c@t '(_ any #(each (any any)) any . each-any)))) G3190@t))) (G2d27@syntax-dispatch G3190@t '(_ #(each (any any)) any . each-any)))) G318e@stx))) (set! G2ce5@let-values-macro (lambda (G31b4@stx) ((lambda (G31b7@rename G31b9@rename*) (begin (set! G31b7@rename (lambda (G3219@x G321a@old* G321b@new*) (begin (if (not (G2b36@id? G3219@x)) (G2e12@syntax-violation '#f '"not an indentifier" G31b4@stx G3219@x) (void)) (if (G2b44@bound-id-member? G3219@x G321a@old*) (G2e12@syntax-violation '#f '"duplicate binding" G31b4@stx G3219@x) (void)) ((lambda (G321f@y) (values G321f@y (cons G3219@x G321a@old*) (cons G321f@y G321b@new*))) (gensym (G2e18@syntax->datum G3219@x)))))) (set! G31b9@rename* (lambda (G3207@x* G3208@old* G3209@new*) (if (null? G3207@x*) (values '() G3208@old* G3209@new*) (call-with-values (lambda () (G31b7@rename (car G3207@x*) G3208@old* G3209@new*)) (lambda (G320d@x G320e@old* G320f@new*) (call-with-values (lambda () (G31b9@rename* (cdr G3207@x*) G320e@old* G320f@new*)) (lambda (G3213@x* G3214@old* G3215@new*) (values (cons G320d@x G3213@x*) G3214@old* G3215@new*)))))))) ((lambda (G31ba@t) ((lambda (G31bc@ls/false) (if G31bc@ls/false (apply (lambda (G31be@b G31bf@b*) (cons* (G2cdd@bless 'let) '() G31be@b G31bf@b*)) G31bc@ls/false) ((lambda (G31c2@t) ((lambda (G31c4@ls/false) (if G31c4@ls/false (apply (lambda (G31c6@lhs* G31c7@rhs* G31c8@b G31c9@b*) (G2cdd@bless ((letrec ((G31ce@f (lambda (G31d0@lhs* G31d1@rhs* G31d2@old* G31d3@new*) (if (null? G31d0@lhs*) (cons 'let (cons (map list G31d2@old* G31d3@new*) (cons G31c8@b G31c9@b*))) ((lambda (G31d8@t) ((lambda (G31da@ls/false) (if G31da@ls/false (apply (lambda (G31dc@x*) (call-with-values (lambda () (G31b9@rename* G31dc@x* G31d2@old* G31d3@new*)) (lambda (G31e1@G31de G31e2@G31df G31e3@G31e0) ((lambda (G31e7@new* G31e8@old* G31e9@y*) (list 'call-with-values (list 'lambda '() (car G31d1@rhs*)) (list 'lambda G31e9@y* (G31ce@f (cdr G31d0@lhs*) (cdr G31d1@rhs*) G31e8@old* G31e7@new*)))) G31e3@G31e0 G31e2@G31df G31e1@G31de)))) G31da@ls/false) ((lambda (G31ed@t) ((lambda (G31ef@ls/false) (if G31ef@ls/false (apply (lambda (G31f1@x* G31f2@x) (call-with-values (lambda () (G31b7@rename G31f2@x G31d2@old* G31d3@new*)) (lambda (G31f5@y G31f6@old* G31f7@new*) (call-with-values (lambda () (G31b9@rename* G31f1@x* G31f6@old* G31f7@new*)) (lambda (G31fb@y* G31fc@old* G31fd@new*) (list 'call-with-values (list 'lambda '() (car G31d1@rhs*)) (list 'lambda (append G31fb@y* G31f5@y) (G31ce@f (cdr G31d0@lhs*) (cdr G31d1@rhs*) G31fc@old* G31fd@new*)))))))) G31ef@ls/false) ((lambda (G3201@t) ((lambda (G3203@ls/false) (if G3203@ls/false (apply (lambda (G3205@others) (G2e12@syntax-violation '#f '"malformed bindings" G31b4@stx G3205@others)) G3203@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3201@t))) (G2d27@syntax-dispatch G3201@t 'any))) G31ed@t))) (G2d27@syntax-dispatch G31ed@t '#(each+ any () any)))) G31d8@t))) (G2d27@syntax-dispatch G31d8@t 'each-any))) (car G31d0@lhs*)))))) G31ce@f) G31c6@lhs* G31c7@rhs* '() '()))) G31c4@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G31c2@t))) (G2d27@syntax-dispatch G31c2@t '(_ #(each (any any)) any . each-any)))) G31ba@t))) (G2d27@syntax-dispatch G31ba@t '(_ () any . each-any)))) G31b4@stx))) '#f '#f))) (set! G2ce7@let*-values-macro (lambda (G3221@stx) ((lambda (G3224@check) (begin (set! G3224@check (lambda (G3253@x*) (if (not (null? G3253@x*)) ((lambda (G3255@x) (begin (if (not (G2b36@id? G3255@x)) (G2e12@syntax-violation '#f '"not an identifier" G3221@stx G3255@x) (void)) (G3224@check (cdr G3253@x*)) (if (G2b44@bound-id-member? G3255@x (cdr G3253@x*)) (G2e12@syntax-violation '#f '"duplicate identifier" G3221@stx G3255@x) (void)))) (car G3253@x*)) (void)))) ((lambda (G3225@t) ((lambda (G3227@ls/false) (if G3227@ls/false (apply (lambda (G3229@b G322a@b*) (cons* (G2cdd@bless 'let) '() G3229@b G322a@b*)) G3227@ls/false) ((lambda (G322d@t) ((lambda (G322f@ls/false) (if G322f@ls/false (apply (lambda (G3231@lhs* G3232@rhs* G3233@b G3234@b*) (G2cdd@bless ((letrec ((G3239@f (lambda (G323b@lhs* G323c@rhs*) (if (null? G323b@lhs*) (cons 'begin (cons G3233@b G3234@b*)) ((lambda (G323f@t) ((lambda (G3241@ls/false) (if G3241@ls/false (apply (lambda (G3243@x*) (begin (G3224@check G3243@x*) (list 'call-with-values (list 'lambda '() (car G323c@rhs*)) (list 'lambda G3243@x* (G3239@f (cdr G323b@lhs*) (cdr G323c@rhs*)))))) G3241@ls/false) ((lambda (G3245@t) ((lambda (G3247@ls/false) (if G3247@ls/false (apply (lambda (G3249@x* G324a@x) (begin (G3224@check (cons G324a@x G3249@x*)) (list 'call-with-values (list 'lambda '() (car G323c@rhs*)) (list 'lambda (append G3249@x* G324a@x) (G3239@f (cdr G323b@lhs*) (cdr G323c@rhs*)))))) G3247@ls/false) ((lambda (G324d@t) ((lambda (G324f@ls/false) (if G324f@ls/false (apply (lambda (G3251@others) (G2e12@syntax-violation '#f '"malformed bindings" G3221@stx G3251@others)) G324f@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G324d@t))) (G2d27@syntax-dispatch G324d@t 'any))) G3245@t))) (G2d27@syntax-dispatch G3245@t '#(each+ any () any)))) G323f@t))) (G2d27@syntax-dispatch G323f@t 'each-any))) (car G323b@lhs*)))))) G3239@f) G3231@lhs* G3232@rhs*))) G322f@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G322d@t))) (G2d27@syntax-dispatch G322d@t '(_ #(each (any any)) any . each-any)))) G3225@t))) (G2d27@syntax-dispatch G3225@t '(_ () any . each-any)))) G3221@stx))) '#f))) (set! G2ce9@trace-lambda-macro (lambda (G3257@stx) ((lambda (G3259@t) ((lambda (G325b@ls/false) (if G325b@ls/false (apply (lambda (G325d@who G325e@fmls G325f@b G3260@b*) (if (G2b40@valid-bound-ids? G325e@fmls) (G2cdd@bless (list 'make-traced-procedure (list 'quote G325d@who) (cons 'lambda (cons G325e@fmls (cons G325f@b G3260@b*))))) (G2ce1@invalid-fmls-error G3257@stx G325e@fmls))) G325b@ls/false) ((lambda (G3265@t) ((lambda (G3267@ls/false) (if G3267@ls/false (apply (lambda (G3269@who G326a@fmls G326b@last G326c@b G326d@b*) (if (G2b40@valid-bound-ids? (cons G326b@last G326a@fmls)) (G2cdd@bless (list 'make-traced-procedure (list 'quote G3269@who) (cons 'lambda (cons (append G326a@fmls G326b@last) (cons G326c@b G326d@b*))))) (G2ce1@invalid-fmls-error G3257@stx (append G326a@fmls G326b@last)))) G3267@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3265@t))) (G2d27@syntax-dispatch G3265@t '(_ any #(each+ any () any) any . each-any)))) G3259@t))) (G2d27@syntax-dispatch G3259@t '(_ any each-any any . each-any)))) G3257@stx))) (set! G2ceb@trace-define-macro (lambda (G3273@stx) ((lambda (G3275@t) ((lambda (G3277@ls/false) (if G3277@ls/false (apply (lambda (G3279@who G327a@fmls G327b@b G327c@b*) (if (G2b40@valid-bound-ids? G327a@fmls) (G2cdd@bless (list 'define G3279@who (list 'make-traced-procedure (list 'quote G3279@who) (cons 'lambda (cons G327a@fmls (cons G327b@b G327c@b*)))))) (G2ce1@invalid-fmls-error G3273@stx G327a@fmls))) G3277@ls/false) ((lambda (G3281@t) ((lambda (G3283@ls/false) (if G3283@ls/false (apply (lambda (G3285@who G3286@fmls G3287@last G3288@b G3289@b*) (if (G2b40@valid-bound-ids? (cons G3287@last G3286@fmls)) (G2cdd@bless (list 'define G3285@who (list 'make-traced-procedure (list 'quote G3285@who) (cons 'lambda (cons (append G3286@fmls G3287@last) (cons G3288@b G3289@b*)))))) (G2ce1@invalid-fmls-error G3273@stx (append G3286@fmls G3287@last)))) G3283@ls/false) ((lambda (G328f@t) ((lambda (G3291@ls/false) (if G3291@ls/false (apply (lambda (G3293@who G3294@expr) (if (G2b36@id? G3293@who) (G2cdd@bless (list 'define G3293@who (list 'let (list (list 'v G3294@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G3293@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G2e12@syntax-violation '#f '"invalid name" G3273@stx))) G3291@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G328f@t))) (G2d27@syntax-dispatch G328f@t '(_ any any)))) G3281@t))) (G2d27@syntax-dispatch G3281@t '(_ (any . #(each+ any () any)) any . each-any)))) G3275@t))) (G2d27@syntax-dispatch G3275@t '(_ (any . each-any) any . each-any)))) G3273@stx))) (set! G2ced@trace-define-syntax-macro (lambda (G3297@stx) ((lambda (G3299@t) ((lambda (G329b@ls/false) (if G329b@ls/false (apply (lambda (G329d@who G329e@expr) (if (G2b36@id? G329d@who) (G2cdd@bless (list 'define-syntax G329d@who (list 'make-traced-macro (list 'quote G329d@who) G329e@expr))) (G2e12@syntax-violation '#f '"invalid name" G3297@stx))) G329b@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3299@t))) (G2d27@syntax-dispatch G3299@t '(_ any any)))) G3297@stx))) (set! G2cef@trace-let/rec-syntax (lambda (G32a1@who) (lambda (G32a3@stx) ((lambda (G32a5@t) ((lambda (G32a7@ls/false) (if G32a7@ls/false (apply (lambda (G32a9@lhs* G32aa@rhs* G32ab@b G32ac@b*) (if (G2b40@valid-bound-ids? G32a9@lhs*) ((lambda (G32b1@rhs*) (G2cdd@bless (cons G32a1@who (cons (map list G32a9@lhs* G32b1@rhs*) (cons G32ab@b G32ac@b*))))) (map (lambda (G32b3@lhs G32b4@rhs) (list 'make-traced-macro (list 'quote G32b3@lhs) G32b4@rhs)) G32a9@lhs* G32aa@rhs*)) (G2ce1@invalid-fmls-error G32a3@stx G32a9@lhs*))) G32a7@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G32a5@t))) (G2d27@syntax-dispatch G32a5@t '(_ #(each (any any)) any . each-any)))) G32a3@stx)))) (set! G2cf1@trace-let-syntax-macro (G2cef@trace-let/rec-syntax 'let-syntax)) (set! G2cf3@trace-letrec-syntax-macro (G2cef@trace-let/rec-syntax 'letrec-syntax)) (set! G2cf5@guard-macro (lambda (G32b7@x) ((lambda (G32ba@gen-clauses) (begin (set! G32ba@gen-clauses (lambda (G32d1@con G32d2@outerk G32d3@clause*) ((lambda (G32d8@f G32da@f*) (begin (set! G32d8@f (lambda (G330d@x G330e@k) ((lambda (G3311@t) ((lambda (G3313@ls/false) (if G3313@ls/false (apply (lambda (G3315@e G3316@p) ((lambda (G3319@t) (list 'let (list (list G3319@t G3315@e)) (list 'if G3319@t (list G3316@p G3319@t) G330e@k))) (gensym))) G3313@ls/false) ((lambda (G331b@t) ((lambda (G331d@ls/false) (if G331d@ls/false (apply (lambda (G331f@e) ((lambda (G3321@t) (list 'let (list (list G3321@t G331f@e)) (list 'if G3321@t G3321@t G330e@k))) (gensym))) G331d@ls/false) ((lambda (G3323@t) ((lambda (G3325@ls/false) (if G3325@ls/false (apply (lambda (G3327@e G3328@v G3329@v*) (list 'if G3327@e (cons 'begin (cons G3328@v G3329@v*)) G330e@k)) G3325@ls/false) ((lambda (G332d@t) ((lambda (G332f@ls/false) (if G332f@ls/false (apply (lambda () (G2e12@syntax-violation '#f '"invalid guard clause" G330d@x)) G332f@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G332d@t))) (G2d27@syntax-dispatch G332d@t '_))) G3323@t))) (G2d27@syntax-dispatch G3323@t '(any any . each-any)))) G331b@t))) (G2d27@syntax-dispatch G331b@t '(any)))) G3311@t))) (G2d27@syntax-dispatch G3311@t '(any #(scheme-id =>) any)))) G330d@x))) (set! G32da@f* (lambda (G32e5@x*) ((lambda (G32e7@t) ((lambda (G32e9@ls/false) (if G32e9@ls/false (apply (lambda () ((lambda (G32eb@g) (values (list G32eb@g (list 'lambda '() (list 'raise-continuable G32d1@con))) G32eb@g)) (gensym))) G32e9@ls/false) ((lambda (G32ed@t) ((lambda (G32ef@ls/false) (if G32ef@ls/false (apply (lambda (G32f1@e G32f2@e*) (values (cons 'begin (cons G32f1@e G32f2@e*)) '#f)) G32ef@ls/false) ((lambda (G32f5@t) ((lambda (G32f7@ls/false) (if G32f7@ls/false (apply (lambda (G32f9@cls G32fa@cls*) (call-with-values (lambda () (G32da@f* G32fa@cls*)) (lambda (G32ff@G32fd G3300@G32fe) ((lambda (G3303@g G3304@e) (values (G32d8@f G32f9@cls G3304@e) G3303@g)) G3300@G32fe G32ff@G32fd)))) G32f7@ls/false) ((lambda (G3307@t) ((lambda (G3309@ls/false) (if G3309@ls/false (apply (lambda (G330b@others) (G2e12@syntax-violation '#f '"invalid guard clause" G330b@others)) G3309@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3307@t))) (G2d27@syntax-dispatch G3307@t 'any))) G32f5@t))) (G2d27@syntax-dispatch G32f5@t '(any . any)))) G32ed@t))) (G2d27@syntax-dispatch G32ed@t '((#(scheme-id else) any . each-any))))) G32e7@t))) (G2d27@syntax-dispatch G32e7@t '()))) G32e5@x*))) (call-with-values (lambda () (G32da@f* G32d3@clause*)) (lambda (G32dd@G32db G32de@G32dc) ((lambda (G32e1@raisek G32e2@code) (if G32e1@raisek (list (list 'call/cc (list 'lambda (list G32e1@raisek) (list G32d2@outerk (list 'lambda '() G32e2@code))))) (list G32d2@outerk (list 'lambda '() G32e2@code)))) G32de@G32dc G32dd@G32db))))) '#f '#f))) ((lambda (G32bb@t) ((lambda (G32bd@ls/false) (if (and G32bd@ls/false (apply (lambda (G32bf@con G32c0@clause* G32c1@b G32c2@b*) (G2b36@id? G32bf@con)) G32bd@ls/false)) (apply (lambda (G32c7@con G32c8@clause* G32c9@b G32ca@b*) ((lambda (G32cf@outerk) (G2cdd@bless (list (list 'call/cc (list 'lambda (list G32cf@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G32c7@con) (G32ba@gen-clauses G32c7@con G32cf@outerk G32c8@clause*)) (cons 'lambda (cons '() (cons G32c9@b G32ca@b*)))))))))) (gensym))) G32bd@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G32bb@t))) (G2d27@syntax-dispatch G32bb@t '(_ (any . each-any) any . each-any)))) G32b7@x))) '#f))) (set! G2cf7@define-enumeration-macro (lambda (G3331@stx) ((lambda (G3334@set? G3336@remove-dups) (begin (set! G3334@set? (lambda (G334d@x) (or (null? G334d@x) (and (not (memq (car G334d@x) (cdr G334d@x))) (G3334@set? (cdr G334d@x)))))) (set! G3336@remove-dups (lambda (G334b@ls) (if (null? G334b@ls) '() (cons (car G334b@ls) (G3336@remove-dups (remq (car G334b@ls) (cdr G334b@ls))))))) ((lambda (G3337@t) ((lambda (G3339@ls/false) (if (and G3339@ls/false (apply (lambda (G333b@name G333c@id* G333d@maker) (and (G2b36@id? G333b@name) (G2b36@id? G333d@maker) (for-all G2b36@id? G333c@id*))) G3339@ls/false)) (apply (lambda (G3341@name G3342@id* G3343@maker) ((lambda (G3347@name* G3348@mk) (G2cdd@bless (list 'begin (list 'define G3348@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3347@name*)))) (list 'define-syntax G3341@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3347@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G3341@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G3343@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G3343@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3347@name*)) (cons 'syntax-violation (cons (list 'quote G3343@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3348@mk '('(n* ...)))))))))))) (G3336@remove-dups (G2e18@syntax->datum G3342@id*)) (gensym))) G3339@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3337@t))) (G2d27@syntax-dispatch G3337@t '(_ any each-any any)))) G3331@stx))) '#f '#f))) (set! G2cf9@time-macro (lambda (G334f@stx) ((lambda (G3351@t) ((lambda (G3353@ls/false) (if G3353@ls/false (apply (lambda (G3355@expr) (G2cdd@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() G3355@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) G3353@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3351@t))) (G2d27@syntax-dispatch G3351@t '(_ any)))) G334f@stx))) (set! G2cfb@delay-macro (lambda (G3357@stx) ((lambda (G3359@t) ((lambda (G335b@ls/false) (if G335b@ls/false (apply (lambda (G335d@expr) (G2cdd@bless (list 'make-promise (list 'lambda '() G335d@expr)))) G335b@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3359@t))) (G2d27@syntax-dispatch G3359@t '(_ any)))) G3357@stx))) (set! G2cfd@assert-macro (lambda (G335f@stx) ((lambda (G3361@t) ((lambda (G3363@ls/false) (if G3363@ls/false (apply (lambda (G3365@expr) ((lambda (G3367@pos) (G2cdd@bless (list 'unless G3365@expr (list 'assertion-error (list 'quote G3365@expr) (list 'quote G3367@pos))))) (or (G2e0a@expression-position G335f@stx) (G2e0a@expression-position G3365@expr)))) G3363@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3361@t))) (G2d27@syntax-dispatch G3361@t '(_ any)))) G335f@stx))) (set! G2cff@endianness-macro (lambda (G3369@stx) ((lambda (G336b@t) ((lambda (G336d@ls/false) (if G336d@ls/false (apply (lambda (G336f@e) ((lambda (G3371@t) (if (memv G3371@t '(little)) (G2cdd@bless ''little) (if (memv G3371@t '(big)) (G2cdd@bless ''big) (G2e12@syntax-violation '#f '"endianness must be big or little" G3369@stx)))) (G2e18@syntax->datum G336f@e))) G336d@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G336b@t))) (G2d27@syntax-dispatch G336b@t '(_ any)))) G3369@stx))) (set! G2d01@identifier-syntax-macro (lambda (G3373@stx) ((lambda (G3375@t) ((lambda (G3377@ls/false) (if G3377@ls/false (apply (lambda (G3379@expr) (G2cdd@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G3379@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G3379@expr) '((syntax (e* ...)))))))))) G3377@ls/false) ((lambda (G337b@t) ((lambda (G337d@ls/false) (if (and G337d@ls/false (apply (lambda (G337f@id1 G3380@expr1 G3381@id2 G3382@expr2 G3383@expr3) (and (G2b36@id? G337f@id1) (G2b36@id? G3381@id2) (G2b36@id? G3382@expr2))) G337d@ls/false)) (apply (lambda (G3389@id1 G338a@expr1 G338b@id2 G338c@expr2 G338d@expr3) (G2cdd@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G338a@expr1)) (list (list 'set! 'id G338c@expr2) (list 'syntax G338d@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G338a@expr1 '(e* ...))))))))) G337d@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G337b@t))) (G2d27@syntax-dispatch G337b@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G3375@t))) (G2d27@syntax-dispatch G3375@t '(_ any)))) G3373@stx))) (set! G2d03@do-macro (lambda (G3393@stx) ((lambda (G3396@bind) (begin (set! G3396@bind (lambda (G33ad@x) ((lambda (G33af@t) ((lambda (G33b1@ls/false) (if G33b1@ls/false (apply (lambda (G33b3@x G33b4@init) (list G33b3@x G33b4@init G33b3@x)) G33b1@ls/false) ((lambda (G33b7@t) ((lambda (G33b9@ls/false) (if G33b9@ls/false (apply (lambda (G33bb@x G33bc@init G33bd@step) (list G33bb@x G33bc@init G33bd@step)) G33b9@ls/false) ((lambda (G33c1@t) ((lambda (G33c3@ls/false) (if G33c3@ls/false (apply (lambda () (G2e12@syntax-violation '#f '"invalid binding" G3393@stx)) G33c3@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G33c1@t))) (G2d27@syntax-dispatch G33c1@t '_))) G33b7@t))) (G2d27@syntax-dispatch G33b7@t '(any any any)))) G33af@t))) (G2d27@syntax-dispatch G33af@t '(any any)))) G33ad@x))) ((lambda (G3397@t) ((lambda (G3399@ls/false) (if G3399@ls/false (apply (lambda (G339b@binding* G339c@test G339d@expr* G339e@command*) ((lambda (G33a3@t) ((lambda (G33a5@ls/false) (if G33a5@ls/false (apply (lambda (G33a7@x* G33a8@init* G33a9@step*) (if (G2b40@valid-bound-ids? G33a7@x*) (G2cdd@bless (list 'letrec (list (list 'loop (list 'lambda G33a7@x* (list 'if G339c@test (cons 'begin (cons '(if #f #f) G339d@expr*)) (cons 'begin (append G339e@command* (list (cons 'loop G33a9@step*)))))))) (cons 'loop G33a8@init*))) (G2e12@syntax-violation '#f '"invalid bindings" G3393@stx))) G33a5@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G33a3@t))) (G2d27@syntax-dispatch G33a3@t '#(each (any any any))))) (map G3396@bind G339b@binding*))) G3399@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3397@t))) (G2d27@syntax-dispatch G3397@t '(_ each-any (any . each-any) . each-any)))) G3393@stx))) '#f))) (set! G2d05@let*-macro (lambda (G33c5@stx) ((lambda (G33c7@t) ((lambda (G33c9@ls/false) (if (and G33c9@ls/false (apply (lambda (G33cb@lhs* G33cc@rhs* G33cd@b G33ce@b*) (for-all G2b36@id? G33cb@lhs*)) G33c9@ls/false)) (apply (lambda (G33d3@lhs* G33d4@rhs* G33d5@b G33d6@b*) (G2cdd@bless ((letrec ((G33db@f (lambda (G33dd@x*) (if (null? G33dd@x*) (cons 'let (cons '() (cons G33d5@b G33d6@b*))) (list 'let (list (car G33dd@x*)) (G33db@f (cdr G33dd@x*))))))) G33db@f) (map list G33d3@lhs* G33d4@rhs*)))) G33c9@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G33c7@t))) (G2d27@syntax-dispatch G33c7@t '(_ #(each (any any)) any . each-any)))) G33c5@stx))) (set! G2d07@or-macro (lambda (G33df@stx) ((lambda (G33e1@t) ((lambda (G33e3@ls/false) (if G33e3@ls/false (apply (lambda () '#f) G33e3@ls/false) ((lambda (G33e5@t) ((lambda (G33e7@ls/false) (if G33e7@ls/false (apply (lambda (G33e9@e G33ea@e*) (G2cdd@bless ((letrec ((G33ed@f (lambda (G33ef@e G33f0@e*) (if (null? G33f0@e*) (list 'begin '#f G33ef@e) (list 'let (list (list 't G33ef@e)) (list 'if 't 't (G33ed@f (car G33f0@e*) (cdr G33f0@e*)))))))) G33ed@f) G33e9@e G33ea@e*))) G33e7@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G33e5@t))) (G2d27@syntax-dispatch G33e5@t '(_ any . each-any)))) G33e1@t))) (G2d27@syntax-dispatch G33e1@t '(_)))) G33df@stx))) (set! G2d09@and-macro (lambda (G33f3@stx) ((lambda (G33f5@t) ((lambda (G33f7@ls/false) (if G33f7@ls/false (apply (lambda () '#t) G33f7@ls/false) ((lambda (G33f9@t) ((lambda (G33fb@ls/false) (if G33fb@ls/false (apply (lambda (G33fd@e G33fe@e*) (G2cdd@bless ((letrec ((G3401@f (lambda (G3403@e G3404@e*) (if (null? G3404@e*) (list 'begin '#f G3403@e) (cons 'if (cons G3403@e (cons (G3401@f (car G3404@e*) (cdr G3404@e*)) '(#f)))))))) G3401@f) G33fd@e G33fe@e*))) G33fb@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G33f9@t))) (G2d27@syntax-dispatch G33f9@t '(_ any . each-any)))) G33f5@t))) (G2d27@syntax-dispatch G33f5@t '(_)))) G33f3@stx))) (set! G2d0b@cond-macro (lambda (G3407@stx) ((lambda (G3409@t) ((lambda (G340b@ls/false) (if G340b@ls/false (apply (lambda (G340d@cls G340e@cls*) (G2cdd@bless ((letrec ((G3411@f (lambda (G3413@cls G3414@cls*) (if (null? G3414@cls*) ((lambda (G3417@t) ((lambda (G3419@ls/false) (if G3419@ls/false (apply (lambda (G341b@e G341c@e*) (cons 'begin (cons G341b@e G341c@e*))) G3419@ls/false) ((lambda (G341f@t) ((lambda (G3421@ls/false) (if G3421@ls/false (apply (lambda (G3423@e G3424@p) (list 'let (list (list 't G3423@e)) (list 'if 't (cons G3424@p '(t))))) G3421@ls/false) ((lambda (G3427@t) ((lambda (G3429@ls/false) (if G3429@ls/false (apply (lambda (G342b@e) (cons 'or (cons G342b@e '((if #f #f))))) G3429@ls/false) ((lambda (G342d@t) ((lambda (G342f@ls/false) (if G342f@ls/false (apply (lambda (G3431@e G3432@e*) (list 'if G3431@e (cons 'begin G3432@e*))) G342f@ls/false) ((lambda (G3435@t) ((lambda (G3437@ls/false) (if G3437@ls/false (apply (lambda () (G2e12@syntax-violation '#f '"invalid last clause" G3407@stx)) G3437@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3435@t))) (G2d27@syntax-dispatch G3435@t '_))) G342d@t))) (G2d27@syntax-dispatch G342d@t '(any . each-any)))) G3427@t))) (G2d27@syntax-dispatch G3427@t '(any)))) G341f@t))) (G2d27@syntax-dispatch G341f@t '(any #(scheme-id =>) any)))) G3417@t))) (G2d27@syntax-dispatch G3417@t '(#(scheme-id else) any . each-any)))) G3413@cls) ((lambda (G3439@t) ((lambda (G343b@ls/false) (if G343b@ls/false (apply (lambda (G343d@e G343e@e*) (G2e12@syntax-violation '#f '"incorrect position of keyword else" G3407@stx)) G343b@ls/false) ((lambda (G3441@t) ((lambda (G3443@ls/false) (if G3443@ls/false (apply (lambda (G3445@e G3446@p) (list 'let (list (list 't G3445@e)) (list 'if 't (cons G3446@p '(t)) (G3411@f (car G3414@cls*) (cdr G3414@cls*))))) G3443@ls/false) ((lambda (G3449@t) ((lambda (G344b@ls/false) (if G344b@ls/false (apply (lambda (G344d@e) (list 'or G344d@e (G3411@f (car G3414@cls*) (cdr G3414@cls*)))) G344b@ls/false) ((lambda (G344f@t) ((lambda (G3451@ls/false) (if G3451@ls/false (apply (lambda (G3453@e G3454@e*) (list 'if G3453@e (cons 'begin G3454@e*) (G3411@f (car G3414@cls*) (cdr G3414@cls*)))) G3451@ls/false) ((lambda (G3457@t) ((lambda (G3459@ls/false) (if G3459@ls/false (apply (lambda () (G2e12@syntax-violation '#f '"invalid last clause" G3407@stx)) G3459@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3457@t))) (G2d27@syntax-dispatch G3457@t '_))) G344f@t))) (G2d27@syntax-dispatch G344f@t '(any . each-any)))) G3449@t))) (G2d27@syntax-dispatch G3449@t '(any)))) G3441@t))) (G2d27@syntax-dispatch G3441@t '(any #(scheme-id =>) any)))) G3439@t))) (G2d27@syntax-dispatch G3439@t '(#(scheme-id else) any . each-any)))) G3413@cls))))) G3411@f) G340d@cls G340e@cls*))) G340b@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3409@t))) (G2d27@syntax-dispatch G3409@t '(_ any . each-any)))) G3407@stx))) (set! G2d0d@do-include (lambda (G345b@stx G345c@id G345d@filename) ((lambda (G3461@filename) (begin (if (not (and (string? G3461@filename) (G2b36@id? G345c@id))) (G2e12@syntax-violation '#f '"invalid syntax" G345b@stx) (void)) (cons (G2cdd@bless 'begin) (with-input-from-file G3461@filename (lambda () ((letrec ((G3463@f (lambda (G3465@ls) ((lambda (G3467@x) (if (eof-object? G3467@x) (reverse G3465@ls) (G3463@f (cons (G2b14@datum->stx G345c@id G3467@x) G3465@ls)))) (G26dd@G25fe@read-annotated))))) G3463@f) '())))))) (G2b4c@stx->datum G345d@filename)))) (set! G2d0f@include-macro (lambda (G3469@e) ((lambda (G346b@t) ((lambda (G346d@ls/false) (if G346d@ls/false (apply (lambda (G346f@id G3470@filename) (G2d0d@do-include G3469@e G346f@id G3470@filename)) G346d@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G346b@t))) (G2d27@syntax-dispatch G346b@t '(any any)))) G3469@e))) (set! G2d11@include-into-macro (lambda (G3473@e) ((lambda (G3475@t) ((lambda (G3477@ls/false) (if G3477@ls/false (apply (lambda (G3479@id G347a@filename) (G2d0d@do-include G3473@e G3479@id G347a@filename)) G3477@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3475@t))) (G2d27@syntax-dispatch G3475@t '(_ any any)))) G3473@e))) (set! G2d13@syntax-rules-macro (lambda (G347d@e) ((lambda (G347f@t) ((lambda (G3481@ls/false) (if G3481@ls/false (apply (lambda (G3483@lits G3484@pat* G3485@tmp*) (begin (G2d2d@verify-literals G3483@lits G347d@e) (G2cdd@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G3483@lits (map (lambda (G3489@pat G348a@tmp) ((lambda (G348d@t) ((lambda (G348f@ls/false) (if G348f@ls/false (apply (lambda (G3491@rest) (list (cons 'g G3491@rest) (list 'syntax G348a@tmp))) G348f@ls/false) ((lambda (G3493@t) ((lambda (G3495@ls/false) (if G3495@ls/false (apply (lambda () (G2e12@syntax-violation '#f '"invalid syntax-rules pattern" G347d@e G3489@pat)) G3495@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3493@t))) (G2d27@syntax-dispatch G3493@t '_))) G348d@t))) (G2d27@syntax-dispatch G348d@t '(_ . any)))) G3489@pat)) G3484@pat* G3485@tmp*)))))))) G3481@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G347f@t))) (G2d27@syntax-dispatch G347f@t '(_ each-any . #(each (any any)))))) G347d@e))) (set! G2d15@quasiquote-macro ((lambda () ((lambda (G3498@datum G34b4@quasicons* G34b6@quasicons G34b8@quasiappend G34ba@quasivector G34bc@vquasi G34be@quasi) (begin (set! G3498@datum (lambda (G3599@x) (list (G2cb1@scheme-stx 'quote) (G2b1e@mkstx G3599@x '() '() '())))) (set! G34b4@quasicons* (lambda (G3591@x G3592@y) ((letrec ((G3595@f (lambda (G3597@x) (if (null? G3597@x) G3592@y (G34b6@quasicons (car G3597@x) (G3595@f (cdr G3597@x))))))) G3595@f) G3591@x))) (set! G34b6@quasicons (lambda (G356b@x G356c@y) ((lambda (G356f@t) ((lambda (G3571@ls/false) (if G3571@ls/false (apply (lambda (G3573@dy) ((lambda (G3575@t) ((lambda (G3577@ls/false) (if G3577@ls/false (apply (lambda (G3579@dx) (list (G2cb1@scheme-stx 'quote) (cons G3579@dx G3573@dy))) G3577@ls/false) ((lambda (G357b@t) ((lambda (G357d@ls/false) (if G357d@ls/false (apply (lambda () ((lambda (G357f@t) ((lambda (G3581@ls/false) (if G3581@ls/false (apply (lambda () (list (G2cb1@scheme-stx 'list) G356b@x)) G3581@ls/false) ((lambda (G3583@t) ((lambda (G3585@ls/false) (if G3585@ls/false (apply (lambda () (list (G2cb1@scheme-stx 'cons) G356b@x G356c@y)) G3585@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3583@t))) (G2d27@syntax-dispatch G3583@t '_))) G357f@t))) (G2d27@syntax-dispatch G357f@t '()))) G3573@dy)) G357d@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G357b@t))) (G2d27@syntax-dispatch G357b@t '_))) G3575@t))) (G2d27@syntax-dispatch G3575@t '(#(scheme-id quote) any)))) G356b@x)) G3571@ls/false) ((lambda (G3587@t) ((lambda (G3589@ls/false) (if G3589@ls/false (apply (lambda (G358b@stuff) (cons* (G2cb1@scheme-stx 'list) G356b@x G358b@stuff)) G3589@ls/false) ((lambda (G358d@t) ((lambda (G358f@ls/false) (if G358f@ls/false (apply (lambda () (list (G2cb1@scheme-stx 'cons) G356b@x G356c@y)) G358f@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G358d@t))) (G2d27@syntax-dispatch G358d@t '_))) G3587@t))) (G2d27@syntax-dispatch G3587@t '(#(scheme-id list) . each-any)))) G356f@t))) (G2d27@syntax-dispatch G356f@t '(#(scheme-id quote) any)))) G356c@y))) (set! G34b8@quasiappend (lambda (G3551@x G3552@y) ((lambda (G3555@ls) (if (null? G3555@ls) (list (G2cb1@scheme-stx 'quote) '()) (if (null? (cdr G3555@ls)) (car G3555@ls) (cons* (G2cb1@scheme-stx 'append) G3555@ls)))) ((letrec ((G3557@f (lambda (G3559@x) (if (null? G3559@x) ((lambda (G355b@t) ((lambda (G355d@ls/false) (if G355d@ls/false (apply (lambda () '()) G355d@ls/false) ((lambda (G355f@t) ((lambda (G3561@ls/false) (if G3561@ls/false (apply (lambda () (list G3552@y)) G3561@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G355f@t))) (G2d27@syntax-dispatch G355f@t '_))) G355b@t))) (G2d27@syntax-dispatch G355b@t '(#(scheme-id quote) ())))) G3552@y) ((lambda (G3563@t) ((lambda (G3565@ls/false) (if G3565@ls/false (apply (lambda () (G3557@f (cdr G3559@x))) G3565@ls/false) ((lambda (G3567@t) ((lambda (G3569@ls/false) (if G3569@ls/false (apply (lambda () (cons (car G3559@x) (G3557@f (cdr G3559@x)))) G3569@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3567@t))) (G2d27@syntax-dispatch G3567@t '_))) G3563@t))) (G2d27@syntax-dispatch G3563@t '(#(scheme-id quote) ())))) (car G3559@x)))))) G3557@f) G3551@x)))) (set! G34ba@quasivector (lambda (G351f@x) ((lambda (G3521@pat-x) ((lambda (G3523@t) ((lambda (G3525@ls/false) (if G3525@ls/false (apply (lambda (G3527@x*) (list (G2cb1@scheme-stx 'quote) (list->vector G3527@x*))) G3525@ls/false) ((lambda (G3529@t) ((lambda (G352b@ls/false) (if G352b@ls/false (apply (lambda () ((letrec ((G352d@f (lambda (G352f@x G3530@k) ((lambda (G3533@t) ((lambda (G3535@ls/false) (if G3535@ls/false (apply (lambda (G3537@x*) (G3530@k (map (lambda (G3539@x) (list (G2cb1@scheme-stx 'quote) G3539@x)) G3537@x*))) G3535@ls/false) ((lambda (G353b@t) ((lambda (G353d@ls/false) (if G353d@ls/false (apply (lambda (G353f@x*) (G3530@k G353f@x*)) G353d@ls/false) ((lambda (G3541@t) ((lambda (G3543@ls/false) (if G3543@ls/false (apply (lambda (G3545@x G3546@y) (G352d@f G3546@y (lambda (G3549@ls) (G3530@k (cons G3545@x G3549@ls))))) G3543@ls/false) ((lambda (G354b@t) ((lambda (G354d@ls/false) (if G354d@ls/false (apply (lambda () (list (G2cb1@scheme-stx 'list->vector) G3521@pat-x)) G354d@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G354b@t))) (G2d27@syntax-dispatch G354b@t '_))) G3541@t))) (G2d27@syntax-dispatch G3541@t '(#(scheme-id cons) any any)))) G353b@t))) (G2d27@syntax-dispatch G353b@t '(#(scheme-id list) . each-any)))) G3533@t))) (G2d27@syntax-dispatch G3533@t '(#(scheme-id quote) each-any)))) G352f@x)))) G352d@f) G351f@x (lambda (G354f@ls) (cons* (G2cb1@scheme-stx 'vector) G354f@ls)))) G352b@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3529@t))) (G2d27@syntax-dispatch G3529@t '_))) G3523@t))) (G2d27@syntax-dispatch G3523@t '(#(scheme-id quote) each-any)))) G3521@pat-x)) G351f@x))) (set! G34bc@vquasi (lambda (G34fd@p G34fe@lev) ((lambda (G3501@t) ((lambda (G3503@ls/false) (if G3503@ls/false (apply (lambda (G3505@p G3506@q) ((lambda (G3509@t) ((lambda (G350b@ls/false) (if G350b@ls/false (apply (lambda (G350d@p) (if (= G34fe@lev '0) (G34b4@quasicons* G350d@p (G34bc@vquasi G3506@q G34fe@lev)) (G34b6@quasicons (G34b6@quasicons (G3498@datum 'unquote) (G34be@quasi G350d@p (- G34fe@lev '1))) (G34bc@vquasi G3506@q G34fe@lev)))) G350b@ls/false) ((lambda (G350f@t) ((lambda (G3511@ls/false) (if G3511@ls/false (apply (lambda (G3513@p) (if (= G34fe@lev '0) (G34b8@quasiappend G3513@p (G34bc@vquasi G3506@q G34fe@lev)) (G34b6@quasicons (G34b6@quasicons (G3498@datum 'unquote-splicing) (G34be@quasi G3513@p (- G34fe@lev '1))) (G34bc@vquasi G3506@q G34fe@lev)))) G3511@ls/false) ((lambda (G3515@t) ((lambda (G3517@ls/false) (if G3517@ls/false (apply (lambda (G3519@p) (G34b6@quasicons (G34be@quasi G3519@p G34fe@lev) (G34bc@vquasi G3506@q G34fe@lev))) G3517@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3515@t))) (G2d27@syntax-dispatch G3515@t 'any))) G350f@t))) (G2d27@syntax-dispatch G350f@t '(#(scheme-id unquote-splicing) . each-any)))) G3509@t))) (G2d27@syntax-dispatch G3509@t '(#(scheme-id unquote) . each-any)))) G3505@p)) G3503@ls/false) ((lambda (G351b@t) ((lambda (G351d@ls/false) (if G351d@ls/false (apply (lambda () (list (G2cb1@scheme-stx 'quote) '())) G351d@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G351b@t))) (G2d27@syntax-dispatch G351b@t '()))) G3501@t))) (G2d27@syntax-dispatch G3501@t '(any . any)))) G34fd@p))) (set! G34be@quasi (lambda (G34c7@p G34c8@lev) ((lambda (G34cb@t) ((lambda (G34cd@ls/false) (if G34cd@ls/false (apply (lambda (G34cf@p) (if (= G34c8@lev '0) G34cf@p (G34b6@quasicons (G3498@datum 'unquote) (G34be@quasi (list G34cf@p) (- G34c8@lev '1))))) G34cd@ls/false) ((lambda (G34d1@t) ((lambda (G34d3@ls/false) (if G34d3@ls/false (apply (lambda (G34d5@p G34d6@q) (if (= G34c8@lev '0) (G34b4@quasicons* G34d5@p (G34be@quasi G34d6@q G34c8@lev)) (G34b6@quasicons (G34b6@quasicons (G3498@datum 'unquote) (G34be@quasi G34d5@p (- G34c8@lev '1))) (G34be@quasi G34d6@q G34c8@lev)))) G34d3@ls/false) ((lambda (G34d9@t) ((lambda (G34db@ls/false) (if G34db@ls/false (apply (lambda (G34dd@p G34de@q) (if (= G34c8@lev '0) (G34b8@quasiappend G34dd@p (G34be@quasi G34de@q G34c8@lev)) (G34b6@quasicons (G34b6@quasicons (G3498@datum 'unquote-splicing) (G34be@quasi G34dd@p (- G34c8@lev '1))) (G34be@quasi G34de@q G34c8@lev)))) G34db@ls/false) ((lambda (G34e1@t) ((lambda (G34e3@ls/false) (if G34e3@ls/false (apply (lambda (G34e5@p) (G34b6@quasicons (G3498@datum 'quasiquote) (G34be@quasi (list G34e5@p) (+ G34c8@lev '1)))) G34e3@ls/false) ((lambda (G34e7@t) ((lambda (G34e9@ls/false) (if G34e9@ls/false (apply (lambda (G34eb@p G34ec@q) (G34b6@quasicons (G34be@quasi G34eb@p G34c8@lev) (G34be@quasi G34ec@q G34c8@lev))) G34e9@ls/false) ((lambda (G34ef@t) ((lambda (G34f1@ls/false) (if (and G34f1@ls/false (apply (lambda (G34f3@x) (not (G2afe@stx? G34f3@x))) G34f1@ls/false)) (apply (lambda (G34f5@x) (G34ba@quasivector (G34bc@vquasi G34f5@x G34c8@lev))) G34f1@ls/false) ((lambda (G34f7@t) ((lambda (G34f9@ls/false) (if G34f9@ls/false (apply (lambda (G34fb@p) (list (G2cb1@scheme-stx 'quote) G34fb@p)) G34f9@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G34f7@t))) (G2d27@syntax-dispatch G34f7@t 'any))) G34ef@t))) (G2d27@syntax-dispatch G34ef@t '#(vector each-any)))) G34e7@t))) (G2d27@syntax-dispatch G34e7@t '(any . any)))) G34e1@t))) (G2d27@syntax-dispatch G34e1@t '(#(scheme-id quasiquote) any)))) G34d9@t))) (G2d27@syntax-dispatch G34d9@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G34d1@t))) (G2d27@syntax-dispatch G34d1@t '((#(scheme-id unquote) . each-any) . any)))) G34cb@t))) (G2d27@syntax-dispatch G34cb@t '(#(scheme-id unquote) any)))) G34c7@p))) (lambda (G34bf@x) ((lambda (G34c1@t) ((lambda (G34c3@ls/false) (if G34c3@ls/false (apply (lambda (G34c5@e) (G34be@quasi G34c5@e '0)) G34c3@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G34c1@t))) (G2d27@syntax-dispatch G34c1@t '(_ any)))) G34bf@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d17@quasisyntax-macro ((lambda () ((lambda (G359c@quasi) (begin (set! G359c@quasi (lambda (G35b4@p G35b5@lev) ((lambda (G35b8@t) ((lambda (G35ba@ls/false) (if G35ba@ls/false (apply (lambda (G35bc@p) (if (= G35b5@lev '0) ((lambda (G35be@g) (values (list G35be@g) (list G35bc@p) G35be@g)) (gensym)) (call-with-values (lambda () (G359c@quasi G35bc@p (- G35b5@lev '1))) (lambda (G35c3@G35c0 G35c4@G35c1 G35c5@G35c2) ((lambda (G35c9@p G35ca@rhs* G35cb@lhs*) (values G35cb@lhs* G35ca@rhs* (list 'unsyntax G35c9@p))) G35c5@G35c2 G35c4@G35c1 G35c3@G35c0))))) G35ba@ls/false) ((lambda (G35cf@t) ((lambda (G35d1@ls/false) (if (and G35d1@ls/false (apply (lambda () (= G35b5@lev '0)) G35d1@ls/false)) (apply (lambda () (G2e12@syntax-violation '#f '"incorrect use of unsyntax" G35b4@p)) G35d1@ls/false) ((lambda (G35d3@t) ((lambda (G35d5@ls/false) (if G35d5@ls/false (apply (lambda (G35d7@p* G35d8@q) (call-with-values (lambda () (G359c@quasi G35d8@q G35b5@lev)) (lambda (G35de@G35db G35df@G35dc G35e0@G35dd) ((lambda (G35e4@q G35e5@rhs* G35e6@lhs*) (if (= G35b5@lev '0) ((lambda (G35ea@g*) (values (append G35ea@g* G35e6@lhs*) (append G35d7@p* G35e5@rhs*) (append G35ea@g* G35e4@q))) (map (lambda (G35ec@x) (gensym)) G35d7@p*)) (call-with-values (lambda () (G359c@quasi G35d7@p* (- G35b5@lev '1))) (lambda (G35f1@G35ee G35f2@G35ef G35f3@G35f0) ((lambda (G35f7@p* G35f8@rhs2* G35f9@lhs2*) (values (append G35f9@lhs2* G35e6@lhs*) (append G35f8@rhs2* G35e5@rhs*) (cons (cons 'unsyntax G35f7@p*) G35e4@q))) G35f3@G35f0 G35f2@G35ef G35f1@G35ee))))) G35e0@G35dd G35df@G35dc G35de@G35db)))) G35d5@ls/false) ((lambda (G35fd@t) ((lambda (G35ff@ls/false) (if G35ff@ls/false (apply (lambda (G3601@p* G3602@q) (call-with-values (lambda () (G359c@quasi G3602@q G35b5@lev)) (lambda (G3608@G3605 G3609@G3606 G360a@G3607) ((lambda (G360e@q G360f@rhs* G3610@lhs*) (if (= G35b5@lev '0) ((lambda (G3614@g*) (values (append (map (lambda (G3616@g) (cons G3616@g '(...))) G3614@g*) G3610@lhs*) (append G3601@p* G360f@rhs*) (append (apply append (map (lambda (G3618@g) (cons G3618@g '(...))) G3614@g*)) G360e@q))) (map (lambda (G361a@x) (gensym)) G3601@p*)) (call-with-values (lambda () (G359c@quasi G3601@p* (- G35b5@lev '1))) (lambda (G361f@G361c G3620@G361d G3621@G361e) ((lambda (G3625@p* G3626@rhs2* G3627@lhs2*) (values (append G3627@lhs2* G3610@lhs*) (append G3626@rhs2* G360f@rhs*) (cons (cons 'unsyntax-splicing G3625@p*) G360e@q))) G3621@G361e G3620@G361d G361f@G361c))))) G360a@G3607 G3609@G3606 G3608@G3605)))) G35ff@ls/false) ((lambda (G362b@t) ((lambda (G362d@ls/false) (if (and G362d@ls/false (apply (lambda () (= G35b5@lev '0)) G362d@ls/false)) (apply (lambda () (G2e12@syntax-violation '#f '"incorrect use of unsyntax-splicing" G35b4@p)) G362d@ls/false) ((lambda (G362f@t) ((lambda (G3631@ls/false) (if G3631@ls/false (apply (lambda (G3633@p) (call-with-values (lambda () (G359c@quasi G3633@p (+ G35b5@lev '1))) (lambda (G3638@G3635 G3639@G3636 G363a@G3637) ((lambda (G363e@p G363f@rhs* G3640@lhs*) (values G3640@lhs* G363f@rhs* (list 'quasisyntax G363e@p))) G363a@G3637 G3639@G3636 G3638@G3635)))) G3631@ls/false) ((lambda (G3644@t) ((lambda (G3646@ls/false) (if G3646@ls/false (apply (lambda (G3648@p G3649@q) (call-with-values (lambda () (G359c@quasi G3648@p G35b5@lev)) (lambda (G3652@G364c G3653@G364d G3654@G364e) (call-with-values (lambda () (G359c@quasi G3649@q G35b5@lev)) (lambda (G3658@G364f G3659@G3650 G365a@G3651) ((lambda (G365e@q G365f@rhs2* G3660@lhs2* G3661@p G3662@rhs* G3663@lhs*) (values (append G3660@lhs2* G3663@lhs*) (append G365f@rhs2* G3662@rhs*) (cons G3661@p G365e@q))) G365a@G3651 G3659@G3650 G3658@G364f G3654@G364e G3653@G364d G3652@G364c)))))) G3646@ls/false) ((lambda (G366a@t) ((lambda (G366c@ls/false) (if G366c@ls/false (apply (lambda (G366e@x*) (call-with-values (lambda () (G359c@quasi G366e@x* G35b5@lev)) (lambda (G3673@G3670 G3674@G3671 G3675@G3672) ((lambda (G3679@x* G367a@rhs* G367b@lhs*) (values G367b@lhs* G367a@rhs* (list->vector G3679@x*))) G3675@G3672 G3674@G3671 G3673@G3670)))) G366c@ls/false) ((lambda (G367f@t) ((lambda (G3681@ls/false) (if G3681@ls/false (apply (lambda () (values '() '() G35b4@p)) G3681@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G367f@t))) (G2d27@syntax-dispatch G367f@t '_))) G366a@t))) (G2d27@syntax-dispatch G366a@t '#(vector each-any)))) G3644@t))) (G2d27@syntax-dispatch G3644@t '(any . any)))) G362f@t))) (G2d27@syntax-dispatch G362f@t '(#(scheme-id quasisyntax) any)))) G362b@t))) (G2d27@syntax-dispatch G362b@t '#(scheme-id unsyntax-splicing)))) G35fd@t))) (G2d27@syntax-dispatch G35fd@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G35d3@t))) (G2d27@syntax-dispatch G35d3@t '((#(scheme-id unsyntax) . each-any) . any)))) G35cf@t))) (G2d27@syntax-dispatch G35cf@t '#(scheme-id unsyntax)))) G35b8@t))) (G2d27@syntax-dispatch G35b8@t '(#(scheme-id unsyntax) any)))) G35b4@p))) (lambda (G359d@x) ((lambda (G359f@t) ((lambda (G35a1@ls/false) (if G35a1@ls/false (apply (lambda (G35a3@e) (call-with-values (lambda () (G359c@quasi G35a3@e '0)) (lambda (G35a8@G35a5 G35a9@G35a6 G35aa@G35a7) ((lambda (G35ae@v G35af@rhs* G35b0@lhs*) (G2cdd@bless (list 'syntax-case (cons 'list G35af@rhs*) '() (list G35b0@lhs* (list 'syntax G35ae@v))))) G35aa@G35a7 G35a9@G35a6 G35a8@G35a5)))) G35a1@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G359f@t))) (G2d27@syntax-dispatch G359f@t '(_ any)))) G359d@x)))) '#f)))) (set! G2d19@define-struct-macro (lambda (G3683@stx) (G2e12@syntax-violation '#f '"define-struct not supported" G3683@stx))) (set! G2d1b@define-record-type-macro (lambda (G3685@x) ((lambda (G3688@id G368a@get-record-name G368c@get-record-constructor-name G368e@get-record-predicate-name G3690@get-clause G3692@foo-rtd-code G3694@parent-rtd-code G3696@parent-rcd-code G3698@foo-rcd-code G369a@get-protocol-code G369c@get-fields G369e@get-mutator-indices G36a0@get-mutators G36a2@get-accessors G36a4@enumerate G36a6@do-define-record G36a8@verify-clauses) (begin (set! G3688@id (lambda (G387b@ctxt . G387d@str*) (G2e16@datum->syntax G387b@ctxt (string->symbol (apply string-append (map (lambda (G387f@x) (if (symbol? G387f@x) (symbol->string G387f@x) (if (string? G387f@x) G387f@x (assertion-violation 'define-record-type '"BUG")))) G387d@str*)))))) (set! G368a@get-record-name (lambda (G3869@spec) ((lambda (G386b@t) ((lambda (G386d@ls/false) (if G386d@ls/false (apply (lambda (G386f@foo G3870@make-foo G3871@foo?) G386f@foo) G386d@ls/false) ((lambda (G3875@t) ((lambda (G3877@ls/false) (if G3877@ls/false (apply (lambda (G3879@foo) G3879@foo) G3877@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3875@t))) (G2d27@syntax-dispatch G3875@t 'any))) G386b@t))) (G2d27@syntax-dispatch G386b@t '(any any any)))) G3869@spec))) (set! G368c@get-record-constructor-name (lambda (G3855@spec) ((lambda (G3857@t) ((lambda (G3859@ls/false) (if G3859@ls/false (apply (lambda (G385b@foo G385c@make-foo G385d@foo?) G385c@make-foo) G3859@ls/false) ((lambda (G3861@t) ((lambda (G3863@ls/false) (if (and G3863@ls/false (apply (lambda (G3865@foo) (G2b36@id? G3865@foo)) G3863@ls/false)) (apply (lambda (G3867@foo) (G3688@id G3867@foo '"make-" (G2b4c@stx->datum G3867@foo))) G3863@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3861@t))) (G2d27@syntax-dispatch G3861@t 'any))) G3857@t))) (G2d27@syntax-dispatch G3857@t '(any any any)))) G3855@spec))) (set! G368e@get-record-predicate-name (lambda (G3841@spec) ((lambda (G3843@t) ((lambda (G3845@ls/false) (if G3845@ls/false (apply (lambda (G3847@foo G3848@make-foo G3849@foo?) G3849@foo?) G3845@ls/false) ((lambda (G384d@t) ((lambda (G384f@ls/false) (if (and G384f@ls/false (apply (lambda (G3851@foo) (G2b36@id? G3851@foo)) G384f@ls/false)) (apply (lambda (G3853@foo) (G3688@id G3853@foo (G2b4c@stx->datum G3853@foo) '"?")) G384f@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G384d@t))) (G2d27@syntax-dispatch G384d@t 'any))) G3843@t))) (G2d27@syntax-dispatch G3843@t '(any any any)))) G3841@spec))) (set! G3690@get-clause (lambda (G382f@id G3830@ls) ((lambda (G3833@t) ((lambda (G3835@ls/false) (if G3835@ls/false (apply (lambda () '#f) G3835@ls/false) ((lambda (G3837@t) ((lambda (G3839@ls/false) (if G3839@ls/false (apply (lambda (G383b@x G383c@rest G383d@ls) (if (G2b3e@free-id=? (G2cdd@bless G382f@id) G383b@x) (cons G383b@x G383c@rest) (G3690@get-clause G382f@id G383d@ls))) G3839@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3837@t))) (G2d27@syntax-dispatch G3837@t '((any . any) . any)))) G3833@t))) (G2d27@syntax-dispatch G3833@t '()))) G3830@ls))) (set! G3692@foo-rtd-code (lambda (G37dd@name G37de@clause* G37df@parent-rtd-code) ((lambda (G37e4@convert-field-spec*) (begin (set! G37e4@convert-field-spec* (lambda (G3815@ls) (list->vector (map (lambda (G3817@x) ((lambda (G3819@t) ((lambda (G381b@ls/false) (if G381b@ls/false (apply (lambda (G381d@name G381e@rest) (list 'mutable G381d@name)) G381b@ls/false) ((lambda (G3821@t) ((lambda (G3823@ls/false) (if G3823@ls/false (apply (lambda (G3825@name G3826@rest) (list 'immutable G3825@name)) G3823@ls/false) ((lambda (G3829@t) ((lambda (G382b@ls/false) (if G382b@ls/false (apply (lambda (G382d@name) (list 'immutable G382d@name)) G382b@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3829@t))) (G2d27@syntax-dispatch G3829@t 'any))) G3821@t))) (G2d27@syntax-dispatch G3821@t '(#(scheme-id immutable) any . any)))) G3819@t))) (G2d27@syntax-dispatch G3819@t '(#(scheme-id mutable) any . any)))) G3817@x)) G3815@ls)))) ((lambda (G37e5@uid-code G37e6@sealed? G37e7@opaque? G37e8@fields) (G2cdd@bless (list 'make-record-type-descriptor (list 'quote G37dd@name) G37df@parent-rtd-code G37e5@uid-code G37e6@sealed? G37e7@opaque? G37e8@fields))) ((lambda (G37ed@t) ((lambda (G37ef@ls/false) (if G37ef@ls/false (apply (lambda () (list 'quote (gensym))) G37ef@ls/false) ((lambda (G37f1@t) ((lambda (G37f3@ls/false) (if G37f3@ls/false (apply (lambda (G37f5@uid) (list 'quote G37f5@uid)) G37f3@ls/false) ((lambda (G37f7@t) ((lambda (G37f9@ls/false) (if G37f9@ls/false (apply (lambda () '#f) G37f9@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G37f7@t))) (G2d27@syntax-dispatch G37f7@t '_))) G37f1@t))) (G2d27@syntax-dispatch G37f1@t '(_ any)))) G37ed@t))) (G2d27@syntax-dispatch G37ed@t '(_)))) (G3690@get-clause 'nongenerative G37de@clause*)) ((lambda (G37fb@t) ((lambda (G37fd@ls/false) (if G37fd@ls/false (apply (lambda () '#t) G37fd@ls/false) ((lambda (G37ff@t) ((lambda (G3801@ls/false) (if G3801@ls/false (apply (lambda () '#f) G3801@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G37ff@t))) (G2d27@syntax-dispatch G37ff@t '_))) G37fb@t))) (G2d27@syntax-dispatch G37fb@t '(_ #(atom #t))))) (G3690@get-clause 'sealed G37de@clause*)) ((lambda (G3803@t) ((lambda (G3805@ls/false) (if G3805@ls/false (apply (lambda () '#t) G3805@ls/false) ((lambda (G3807@t) ((lambda (G3809@ls/false) (if G3809@ls/false (apply (lambda () '#f) G3809@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3807@t))) (G2d27@syntax-dispatch G3807@t '_))) G3803@t))) (G2d27@syntax-dispatch G3803@t '(_ #(atom #t))))) (G3690@get-clause 'opaque G37de@clause*)) ((lambda (G380b@t) ((lambda (G380d@ls/false) (if G380d@ls/false (apply (lambda (G380f@field-spec*) (list 'quote (G37e4@convert-field-spec* G380f@field-spec*))) G380d@ls/false) ((lambda (G3811@t) ((lambda (G3813@ls/false) (if G3813@ls/false (apply (lambda () ''#()) G3813@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3811@t))) (G2d27@syntax-dispatch G3811@t '_))) G380b@t))) (G2d27@syntax-dispatch G380b@t '(_ . each-any)))) (G3690@get-clause 'fields G37de@clause*))))) '#f))) (set! G3694@parent-rtd-code (lambda (G37c5@clause*) ((lambda (G37c7@t) ((lambda (G37c9@ls/false) (if G37c9@ls/false (apply (lambda (G37cb@name) (begin (if (G2afe@stx? G37cb@name) (format (current-error-port) '"name=~a\n" (G2b02@stx-expr G37cb@name)) (void)) (list 'record-type-descriptor G37cb@name))) G37c9@ls/false) ((lambda (G37cd@t) ((lambda (G37cf@ls/false) (if G37cf@ls/false (apply (lambda () ((lambda (G37d1@t) ((lambda (G37d3@ls/false) (if G37d3@ls/false (apply (lambda (G37d5@rtd G37d6@rcd) G37d5@rtd) G37d3@ls/false) ((lambda (G37d9@t) ((lambda (G37db@ls/false) (if G37db@ls/false (apply (lambda () '#f) G37db@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G37d9@t))) (G2d27@syntax-dispatch G37d9@t '#(atom #f)))) G37d1@t))) (G2d27@syntax-dispatch G37d1@t '(_ any any)))) (G3690@get-clause 'parent-rtd G37c5@clause*))) G37cf@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G37cd@t))) (G2d27@syntax-dispatch G37cd@t '#(atom #f)))) G37c7@t))) (G2d27@syntax-dispatch G37c7@t '(_ any)))) (G3690@get-clause 'parent G37c5@clause*)))) (set! G3696@parent-rcd-code (lambda (G37ad@clause*) ((lambda (G37af@t) ((lambda (G37b1@ls/false) (if G37b1@ls/false (apply (lambda (G37b3@name) (list 'record-constructor-descriptor G37b3@name)) G37b1@ls/false) ((lambda (G37b5@t) ((lambda (G37b7@ls/false) (if G37b7@ls/false (apply (lambda () ((lambda (G37b9@t) ((lambda (G37bb@ls/false) (if G37bb@ls/false (apply (lambda (G37bd@rtd G37be@rcd) G37be@rcd) G37bb@ls/false) ((lambda (G37c1@t) ((lambda (G37c3@ls/false) (if G37c3@ls/false (apply (lambda () '#f) G37c3@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G37c1@t))) (G2d27@syntax-dispatch G37c1@t '#(atom #f)))) G37b9@t))) (G2d27@syntax-dispatch G37b9@t '(_ any any)))) (G3690@get-clause 'parent-rtd G37ad@clause*))) G37b7@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G37b5@t))) (G2d27@syntax-dispatch G37b5@t '#(atom #f)))) G37af@t))) (G2d27@syntax-dispatch G37af@t '(_ any)))) (G3690@get-clause 'parent G37ad@clause*)))) (set! G3698@foo-rcd-code (lambda (G37a5@clause* G37a6@foo-rtd G37a7@protocol G37a8@parent-rcd-code) (list 'make-record-constructor-descriptor G37a6@foo-rtd G37a8@parent-rcd-code G37a7@protocol))) (set! G369a@get-protocol-code (lambda (G3799@clause*) ((lambda (G379b@t) ((lambda (G379d@ls/false) (if G379d@ls/false (apply (lambda (G379f@expr) G379f@expr) G379d@ls/false) ((lambda (G37a1@t) ((lambda (G37a3@ls/false) (if G37a3@ls/false (apply (lambda () '#f) G37a3@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G37a1@t))) (G2d27@syntax-dispatch G37a1@t '_))) G379b@t))) (G2d27@syntax-dispatch G379b@t '(_ any)))) (G3690@get-clause 'protocol G3799@clause*)))) (set! G369c@get-fields (lambda (G3787@clause*) ((lambda (G3789@t) ((lambda (G378b@ls/false) (if G378b@ls/false (apply (lambda () '()) G378b@ls/false) ((lambda (G378d@t) ((lambda (G378f@ls/false) (if G378f@ls/false (apply (lambda (G3791@f*) G3791@f*) G378f@ls/false) ((lambda (G3793@t) ((lambda (G3795@ls/false) (if G3795@ls/false (apply (lambda (G3797@rest) (G369c@get-fields G3797@rest)) G3795@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3793@t))) (G2d27@syntax-dispatch G3793@t '(_ . any)))) G378d@t))) (G2d27@syntax-dispatch G378d@t '((#(scheme-id fields) . each-any) . _)))) G3789@t))) (G2d27@syntax-dispatch G3789@t '()))) G3787@clause*))) (set! G369e@get-mutator-indices (lambda (G376f@fields) ((letrec ((G3771@f (lambda (G3773@fields G3774@i) ((lambda (G3777@t) ((lambda (G3779@ls/false) (if G3779@ls/false (apply (lambda () '()) G3779@ls/false) ((lambda (G377b@t) ((lambda (G377d@ls/false) (if G377d@ls/false (apply (lambda (G377f@rest) (cons G3774@i (G3771@f G377f@rest (+ G3774@i '1)))) G377d@ls/false) ((lambda (G3781@t) ((lambda (G3783@ls/false) (if G3783@ls/false (apply (lambda (G3785@rest) (G3771@f G3785@rest (+ G3774@i '1))) G3783@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3781@t))) (G2d27@syntax-dispatch G3781@t '(_ . any)))) G377b@t))) (G2d27@syntax-dispatch G377b@t '((#(scheme-id mutable) . _) . any)))) G3777@t))) (G2d27@syntax-dispatch G3777@t '()))) G3773@fields)))) G3771@f) G376f@fields '0))) (set! G36a0@get-mutators (lambda (G3745@foo G3746@fields) ((lambda (G374a@gen-name) (begin (set! G374a@gen-name (lambda (G376d@x) (G2e16@datum->syntax G3745@foo (string->symbol (string-append (symbol->string (G2e18@syntax->datum G3745@foo)) '"-" (symbol->string (G2e18@syntax->datum G376d@x)) '"-set!"))))) ((letrec ((G374b@f (lambda (G374d@fields) ((lambda (G374f@t) ((lambda (G3751@ls/false) (if G3751@ls/false (apply (lambda () '()) G3751@ls/false) ((lambda (G3753@t) ((lambda (G3755@ls/false) (if G3755@ls/false (apply (lambda (G3757@name G3758@accessor G3759@mutator G375a@rest) (cons G3759@mutator (G374b@f G375a@rest))) G3755@ls/false) ((lambda (G375f@t) ((lambda (G3761@ls/false) (if G3761@ls/false (apply (lambda (G3763@name G3764@rest) (cons (G374a@gen-name G3763@name) (G374b@f G3764@rest))) G3761@ls/false) ((lambda (G3767@t) ((lambda (G3769@ls/false) (if G3769@ls/false (apply (lambda (G376b@rest) (G374b@f G376b@rest)) G3769@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3767@t))) (G2d27@syntax-dispatch G3767@t '(_ . any)))) G375f@t))) (G2d27@syntax-dispatch G375f@t '((#(scheme-id mutable) any) . any)))) G3753@t))) (G2d27@syntax-dispatch G3753@t '((#(scheme-id mutable) any any any) . any)))) G374f@t))) (G2d27@syntax-dispatch G374f@t '()))) G374d@fields)))) G374b@f) G3746@fields))) '#f))) (set! G36a2@get-accessors (lambda (G3701@foo G3702@fields) ((lambda (G3706@gen-name) (begin (set! G3706@gen-name (lambda (G3743@x) (G2e16@datum->syntax G3701@foo (string->symbol (string-append (symbol->string (G2e18@syntax->datum G3701@foo)) '"-" (symbol->string (G2e18@syntax->datum G3743@x))))))) (map (lambda (G3707@field) ((lambda (G3709@t) ((lambda (G370b@ls/false) (if (and G370b@ls/false (apply (lambda (G370d@name G370e@accessor G370f@mutator) (G2b36@id? G370e@accessor)) G370b@ls/false)) (apply (lambda (G3713@name G3714@accessor G3715@mutator) G3714@accessor) G370b@ls/false) ((lambda (G3719@t) ((lambda (G371b@ls/false) (if (and G371b@ls/false (apply (lambda (G371d@name G371e@accessor) (G2b36@id? G371e@accessor)) G371b@ls/false)) (apply (lambda (G3721@name G3722@accessor) G3722@accessor) G371b@ls/false) ((lambda (G3725@t) ((lambda (G3727@ls/false) (if (and G3727@ls/false (apply (lambda (G3729@name) (G2b36@id? G3729@name)) G3727@ls/false)) (apply (lambda (G372b@name) (G3706@gen-name G372b@name)) G3727@ls/false) ((lambda (G372d@t) ((lambda (G372f@ls/false) (if (and G372f@ls/false (apply (lambda (G3731@name) (G2b36@id? G3731@name)) G372f@ls/false)) (apply (lambda (G3733@name) (G3706@gen-name G3733@name)) G372f@ls/false) ((lambda (G3735@t) ((lambda (G3737@ls/false) (if (and G3737@ls/false (apply (lambda (G3739@name) (G2b36@id? G3739@name)) G3737@ls/false)) (apply (lambda (G373b@name) (G3706@gen-name G373b@name)) G3737@ls/false) ((lambda (G373d@t) ((lambda (G373f@ls/false) (if G373f@ls/false (apply (lambda (G3741@others) (G2e12@syntax-violation '#f '"invalid field spec" G3707@field)) G373f@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G373d@t))) (G2d27@syntax-dispatch G373d@t 'any))) G3735@t))) (G2d27@syntax-dispatch G3735@t 'any))) G372d@t))) (G2d27@syntax-dispatch G372d@t '(#(scheme-id immutable) any)))) G3725@t))) (G2d27@syntax-dispatch G3725@t '(#(scheme-id mutable) any)))) G3719@t))) (G2d27@syntax-dispatch G3719@t '(#(scheme-id immutable) any any)))) G3709@t))) (G2d27@syntax-dispatch G3709@t '(#(scheme-id mutable) any any any)))) G3707@field)) G3702@fields))) '#f))) (set! G36a4@enumerate (lambda (G36f9@ls) ((letrec ((G36fb@f (lambda (G36fd@ls G36fe@i) (if (null? G36fd@ls) '() (cons G36fe@i (G36fb@f (cdr G36fd@ls) (+ G36fe@i '1))))))) G36fb@f) G36f9@ls '0))) (set! G36a6@do-define-record (lambda (G36d1@namespec G36d2@clause*) ((lambda (G36d5@foo) ((lambda (G36d7@foo-rtd) ((lambda (G36d9@foo-rcd) ((lambda (G36db@protocol) ((lambda (G36dd@make-foo) ((lambda (G36df@fields) ((lambda (G36e1@idx*) ((lambda (G36e3@foo-x*) ((lambda (G36e5@set-foo-x!*) ((lambda (G36e7@set-foo-idx*) ((lambda (G36e9@foo?) ((lambda (G36eb@foo-rtd-code) ((lambda (G36ed@foo-rcd-code) ((lambda (G36ef@protocol-code) ((lambda () (G2cdd@bless (cons 'begin (cons (list 'define G36d7@foo-rtd G36eb@foo-rtd-code) (cons (list 'define G36db@protocol G36ef@protocol-code) (cons (list 'define G36d9@foo-rcd G36ed@foo-rcd-code) (cons (list 'define-syntax G36d5@foo (list 'list ''$rtd (list 'syntax G36d7@foo-rtd) (list 'syntax G36d9@foo-rcd))) (cons (list 'define G36e9@foo? (list 'record-predicate G36d7@foo-rtd)) (cons (list 'define G36dd@make-foo (list 'record-constructor G36d9@foo-rcd)) (append (map (lambda (G36f1@foo-x G36f2@idx) (list 'define G36f1@foo-x (list 'record-accessor G36d7@foo-rtd G36f2@idx))) G36e3@foo-x* G36e1@idx*) (map (lambda (G36f5@set-foo-x! G36f6@idx) (list 'define G36f5@set-foo-x! (list 'record-mutator G36d7@foo-rtd G36f6@idx))) G36e5@set-foo-x!* G36e7@set-foo-idx*))))))))))))) (G369a@get-protocol-code G36d2@clause*))) (G3698@foo-rcd-code G36d2@clause* G36d7@foo-rtd G36db@protocol (G3696@parent-rcd-code G36d2@clause*)))) (G3692@foo-rtd-code G36d5@foo G36d2@clause* (G3694@parent-rtd-code G36d2@clause*)))) (G368e@get-record-predicate-name G36d1@namespec))) (G369e@get-mutator-indices G36df@fields))) (G36a0@get-mutators G36d5@foo G36df@fields))) (G36a2@get-accessors G36d5@foo G36df@fields))) (G36a4@enumerate G36df@fields))) (G369c@get-fields G36d2@clause*))) (G368c@get-record-constructor-name G36d1@namespec))) (gensym))) (gensym))) (gensym))) (G368a@get-record-name G36d1@namespec)))) (set! G36a8@verify-clauses (lambda (G36b1@x G36b2@cls*) ((lambda (G36b6@valid-kwds G36b8@free-id-member?) (begin (set! G36b6@valid-kwds (map G2cdd@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G36b8@free-id-member? (lambda (G36cd@x G36ce@ls) (and (pair? G36ce@ls) (or (G2b3e@free-id=? G36cd@x (car G36ce@ls)) (G36b8@free-id-member? G36cd@x (cdr G36ce@ls)))))) ((letrec ((G36b9@f (lambda (G36bb@cls* G36bc@seen*) (if (not (null? G36bb@cls*)) ((lambda (G36bf@t) ((lambda (G36c1@ls/false) (if G36c1@ls/false (apply (lambda (G36c3@kwd G36c4@rest) (if (or (not (G2b36@id? G36c3@kwd)) (not (G36b8@free-id-member? G36c3@kwd G36b6@valid-kwds))) (G2e12@syntax-violation '#f '"not a valid define-record-type keyword" G36c3@kwd) (if (G2b44@bound-id-member? G36c3@kwd G36bc@seen*) (G2e12@syntax-violation '#f '"duplicate use of keyword " G36b1@x G36c3@kwd) (G36b9@f (cdr G36bb@cls*) (cons G36c3@kwd G36bc@seen*))))) G36c1@ls/false) ((lambda (G36c7@t) ((lambda (G36c9@ls/false) (if G36c9@ls/false (apply (lambda (G36cb@cls) (G2e12@syntax-violation '#f '"malformed define-record-type clause" G36cb@cls)) G36c9@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G36c7@t))) (G2d27@syntax-dispatch G36c7@t 'any))) G36bf@t))) (G2d27@syntax-dispatch G36bf@t '(any . any)))) (car G36bb@cls*)) (void))))) G36b9@f) G36b2@cls* '()))) '#f '#f))) ((lambda (G36a9@t) ((lambda (G36ab@ls/false) (if G36ab@ls/false (apply (lambda (G36ad@namespec G36ae@clause*) (begin (G36a8@verify-clauses G3685@x G36ae@clause*) (G36a6@do-define-record G36ad@namespec G36ae@clause*))) G36ab@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G36a9@t))) (G2d27@syntax-dispatch G36a9@t '(_ any . each-any)))) G3685@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2d1d@define-condition-type-macro (lambda (G3881@x) ((lambda (G3884@mkname) (begin (set! G3884@mkname (lambda (G38b1@name G38b2@suffix) (G2e16@datum->syntax G38b1@name (string->symbol (string-append (symbol->string (G2e18@syntax->datum G38b1@name)) G38b2@suffix))))) ((lambda (G3885@t) ((lambda (G3887@ls/false) (if (and G3887@ls/false (apply (lambda (G3889@ctxt G388a@name G388b@super G388c@constructor G388d@predicate G388e@field* G388f@accessor*) (and (G2b36@id? G388a@name) (G2b36@id? G388b@super) (G2b36@id? G388c@constructor) (G2b36@id? G388d@predicate) (for-all G2b36@id? G388e@field*) (for-all G2b36@id? G388f@accessor*))) G3887@ls/false)) (apply (lambda (G3897@ctxt G3898@name G3899@super G389a@constructor G389b@predicate G389c@field* G389d@accessor*) ((lambda (G38a5@aux-accessor*) (G2cdd@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3898@name G389a@constructor (gensym)) (cons (list 'parent G3899@super) (cons (cons 'fields (map (lambda (G38a7@field G38a8@aux) (list 'immutable G38a7@field G38a8@aux)) G389c@field* G38a5@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G389b@predicate (list 'condition-predicate (list 'record-type-descriptor G3898@name))) (map (lambda (G38ab@accessor G38ac@aux) (list 'define G38ab@accessor (list 'condition-accessor (list 'record-type-descriptor G3898@name) G38ac@aux))) G389d@accessor* G38a5@aux-accessor*)))))) (map (lambda (G38af@x) (gensym)) G389d@accessor*))) G3887@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3885@t))) (G2d27@syntax-dispatch G3885@t '(any any any any any . #(each (any any)))))) G3881@x))) '#f))) (set! G2d1f@incorrect-usage-macro (lambda (G38b5@e) (G2e12@syntax-violation '#f '"incorrect usage of auxiliary keyword" G38b5@e))) (set! G2d21@parameterize-macro (lambda (G38b7@e) ((lambda (G38b9@t) ((lambda (G38bb@ls/false) (if G38bb@ls/false (apply (lambda (G38bd@b G38be@b*) (G2cdd@bless (cons 'let (cons '() (cons G38bd@b G38be@b*))))) G38bb@ls/false) ((lambda (G38c1@t) ((lambda (G38c3@ls/false) (if G38c3@ls/false (apply (lambda (G38c5@olhs* G38c6@orhs* G38c7@b G38c8@b*) ((lambda (G38cd@lhs* G38ce@rhs*) (G2cdd@bless (cons (list 'lambda (append G38cd@lhs* G38ce@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G38d1@lhs G38d2@rhs) (list 'let (list (list 't (list G38d1@lhs))) (list G38d1@lhs G38d2@rhs) (cons 'set! (cons G38d2@rhs '(t))))) G38cd@lhs* G38ce@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G38c7@b G38c8@b*))) '(swap)))))) (append G38c5@olhs* G38c6@orhs*)))) (G2e00@generate-temporaries G38c5@olhs*) (G2e00@generate-temporaries G38c6@orhs*))) G38c3@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G38c1@t))) (G2d27@syntax-dispatch G38c1@t '(_ #(each (any any)) any . each-any)))) G38b9@t))) (G2d27@syntax-dispatch G38b9@t '(_ () any . each-any)))) G38b7@e))) (set! G2d23@foreign-call-transformer (lambda (G38d5@e G38d6@r G38d7@mr) ((lambda (G38db@t) ((lambda (G38dd@ls/false) (if G38dd@ls/false (apply (lambda (G38df@name G38e0@arg*) (cons 'foreign-call (cons (G2d4b@chi-expr G38df@name G38d6@r G38d7@mr) (G2d47@chi-expr* G38e0@arg* G38d6@r G38d7@mr)))) G38dd@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G38db@t))) (G2d27@syntax-dispatch G38db@t '(_ any . each-any)))) G38d5@e))) (set! G2d25@convert-pattern (lambda (G38e3@pattern G38e4@keys) ((lambda (G38e8@cvt* G38ea@cvt) (begin (set! G38e8@cvt* (lambda (G3979@p* G397a@n G397b@ids) (if (null? G3979@p*) (values '() G397b@ids) (call-with-values (lambda () (G38e8@cvt* (cdr G3979@p*) G397a@n G397b@ids)) (lambda (G3981@G397f G3982@G3980) ((lambda (G3985@ids G3986@y) (call-with-values (lambda () (G38ea@cvt (car G3979@p*) G397a@n G3985@ids)) (lambda (G398b@G3989 G398c@G398a) ((lambda (G398f@ids G3990@x) (values (cons G3990@x G3986@y) G398f@ids)) G398c@G398a G398b@G3989)))) G3982@G3980 G3981@G397f)))))) (set! G38ea@cvt (lambda (G38eb@p G38ec@n G38ed@ids) ((lambda (G38f1@t) ((lambda (G38f3@ls/false) (if (and G38f3@ls/false (apply (lambda (G38f5@id) (G2b36@id? G38f5@id)) G38f3@ls/false)) (apply (lambda (G38f7@id) (if (G2b44@bound-id-member? G38eb@p G38e4@keys) (values (vector 'free-id G38eb@p) G38ed@ids) (if (G2b3e@free-id=? G38eb@p (G2cb1@scheme-stx '_)) (values '_ G38ed@ids) (values 'any (cons (cons G38eb@p G38ec@n) G38ed@ids))))) G38f3@ls/false) ((lambda (G38f9@t) ((lambda (G38fb@ls/false) (if (and G38fb@ls/false (apply (lambda (G38fd@p G38fe@dots) (G2d29@ellipsis? G38fe@dots)) G38fb@ls/false)) (apply (lambda (G3901@p G3902@dots) (call-with-values (lambda () (G38ea@cvt G3901@p (+ G38ec@n '1) G38ed@ids)) (lambda (G3907@G3905 G3908@G3906) ((lambda (G390b@ids G390c@p) (values (if (eq? G390c@p 'any) 'each-any (vector 'each G390c@p)) G390b@ids)) G3908@G3906 G3907@G3905)))) G38fb@ls/false) ((lambda (G390f@t) ((lambda (G3911@ls/false) (if (and G3911@ls/false (apply (lambda (G3913@x G3914@dots G3915@ys G3916@z) (G2d29@ellipsis? G3914@dots)) G3911@ls/false)) (apply (lambda (G391b@x G391c@dots G391d@ys G391e@z) (call-with-values (lambda () (G38ea@cvt G391e@z G38ec@n G38ed@ids)) (lambda (G3925@G3923 G3926@G3924) ((lambda (G3929@ids G392a@z) (call-with-values (lambda () (G38e8@cvt* G391d@ys G38ec@n G3929@ids)) (lambda (G392f@G392d G3930@G392e) ((lambda (G3933@ids G3934@ys) (call-with-values (lambda () (G38ea@cvt G391b@x (+ G38ec@n '1) G3933@ids)) (lambda (G3939@G3937 G393a@G3938) ((lambda (G393d@ids G393e@x) (values (vector 'each+ G393e@x (reverse G3934@ys) G392a@z) G393d@ids)) G393a@G3938 G3939@G3937)))) G3930@G392e G392f@G392d)))) G3926@G3924 G3925@G3923)))) G3911@ls/false) ((lambda (G3941@t) ((lambda (G3943@ls/false) (if G3943@ls/false (apply (lambda (G3945@x G3946@y) (call-with-values (lambda () (G38ea@cvt G3946@y G38ec@n G38ed@ids)) (lambda (G394b@G3949 G394c@G394a) ((lambda (G394f@ids G3950@y) (call-with-values (lambda () (G38ea@cvt G3945@x G38ec@n G394f@ids)) (lambda (G3955@G3953 G3956@G3954) ((lambda (G3959@ids G395a@x) (values (cons G395a@x G3950@y) G3959@ids)) G3956@G3954 G3955@G3953)))) G394c@G394a G394b@G3949)))) G3943@ls/false) ((lambda (G395d@t) ((lambda (G395f@ls/false) (if G395f@ls/false (apply (lambda () (values '() G38ed@ids)) G395f@ls/false) ((lambda (G3961@t) ((lambda (G3963@ls/false) (if (and G3963@ls/false (apply (lambda (G3965@p) (not (G2afe@stx? G3965@p))) G3963@ls/false)) (apply (lambda (G3967@p) (call-with-values (lambda () (G38ea@cvt G3967@p G38ec@n G38ed@ids)) (lambda (G396b@G3969 G396c@G396a) ((lambda (G396f@ids G3970@p) (values (vector 'vector G3970@p) G396f@ids)) G396c@G396a G396b@G3969)))) G3963@ls/false) ((lambda (G3973@t) ((lambda (G3975@ls/false) (if G3975@ls/false (apply (lambda (G3977@datum) (values (vector 'atom (G2b4c@stx->datum G3977@datum)) G38ed@ids)) G3975@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3973@t))) (G2d27@syntax-dispatch G3973@t 'any))) G3961@t))) (G2d27@syntax-dispatch G3961@t '#(vector each-any)))) G395d@t))) (G2d27@syntax-dispatch G395d@t '()))) G3941@t))) (G2d27@syntax-dispatch G3941@t '(any . any)))) G390f@t))) (G2d27@syntax-dispatch G390f@t '(any any . #(each+ any () any))))) G38f9@t))) (G2d27@syntax-dispatch G38f9@t '(any any)))) G38f1@t))) (G2d27@syntax-dispatch G38f1@t 'any))) G38eb@p))) (G38ea@cvt G38e3@pattern '0 '()))) '#f '#f))) (set! G2d27@syntax-dispatch ((lambda () ((lambda (G3994@stx^ G3996@match-each G3998@match-each+ G399a@match-each-any G399c@match-empty G399e@combine G39a0@match* G39a2@match) (begin (set! G3994@stx^ (lambda (G3a5d@e G3a5e@m* G3a5f@s* G3a60@ae*) (if (and (null? G3a5e@m*) (null? G3a5f@s*) (null? G3a60@ae*)) G3a5d@e (G2b1e@mkstx G3a5d@e G3a5e@m* G3a5f@s* G3a60@ae*)))) (set! G3996@match-each (lambda (G3a40@e G3a41@p G3a42@m* G3a43@s* G3a44@ae*) (if (pair? G3a40@e) ((lambda (G3a4a@first) (and G3a4a@first ((lambda (G3a4c@rest) (and G3a4c@rest (cons G3a4a@first G3a4c@rest))) (G3996@match-each (cdr G3a40@e) G3a41@p G3a42@m* G3a43@s* G3a44@ae*)))) (G39a2@match (car G3a40@e) G3a41@p G3a42@m* G3a43@s* G3a44@ae* '())) (if (null? G3a40@e) '() (if (G2afe@stx? G3a40@e) (and (not (G2ab4@top-marked? G3a42@m*)) (call-with-values (lambda () (G2b1c@join-wraps G3a42@m* G3a43@s* G3a44@ae* G3a40@e)) (lambda (G3a51@G3a4e G3a52@G3a4f G3a53@G3a50) ((lambda (G3a57@ae* G3a58@s* G3a59@m*) (G3996@match-each (G2b02@stx-expr G3a40@e) G3a41@p G3a59@m* G3a58@s* G3a57@ae*)) G3a53@G3a50 G3a52@G3a4f G3a51@G3a4e)))) (if (G26df@G2602@annotation? G3a40@e) (G3996@match-each (G26e1@G2606@annotation-expression G3a40@e) G3a41@p G3a42@m* G3a43@s* G3a44@ae*) '#f)))))) (set! G3998@match-each+ (lambda (G3a06@e G3a07@x-pat G3a08@y-pat G3a09@z-pat G3a0a@m* G3a0b@s* G3a0c@ae* G3a0d@r) ((letrec ((G3a16@f (lambda (G3a18@e G3a19@m* G3a1a@s* G3a1b@ae*) (if (pair? G3a18@e) (call-with-values (lambda () (G3a16@f (cdr G3a18@e) G3a19@m* G3a1a@s* G3a1b@ae*)) (lambda (G3a23@G3a20 G3a24@G3a21 G3a25@G3a22) ((lambda (G3a29@r G3a2a@y-pat G3a2b@xr*) (if G3a29@r (if (null? G3a2a@y-pat) ((lambda (G3a2f@xr) (if G3a2f@xr (values (cons G3a2f@xr G3a2b@xr*) G3a2a@y-pat G3a29@r) (values '#f '#f '#f))) (G39a2@match (car G3a18@e) G3a07@x-pat G3a19@m* G3a1a@s* G3a1b@ae* '())) (values '() (cdr G3a2a@y-pat) (G39a2@match (car G3a18@e) (car G3a2a@y-pat) G3a19@m* G3a1a@s* G3a1b@ae* G3a29@r))) (values '#f '#f '#f))) G3a25@G3a22 G3a24@G3a21 G3a23@G3a20))) (if (G2afe@stx? G3a18@e) (if (G2ab4@top-marked? G3a19@m*) (values '() G3a08@y-pat (G39a2@match G3a18@e G3a09@z-pat G3a19@m* G3a1a@s* G3a1b@ae* G3a0d@r)) (call-with-values (lambda () (G2b1c@join-wraps G3a19@m* G3a1a@s* G3a1b@ae* G3a18@e)) (lambda (G3a34@G3a31 G3a35@G3a32 G3a36@G3a33) ((lambda (G3a3a@ae* G3a3b@s* G3a3c@m*) (G3a16@f (G2b02@stx-expr G3a18@e) G3a3c@m* G3a3b@s* G3a3a@ae*)) G3a36@G3a33 G3a35@G3a32 G3a34@G3a31)))) (if (G26df@G2602@annotation? G3a18@e) (G3a16@f (G26e1@G2606@annotation-expression G3a18@e) G3a19@m* G3a1a@s* G3a1b@ae*) (values '() G3a08@y-pat (G39a2@match G3a18@e G3a09@z-pat G3a19@m* G3a1a@s* G3a1b@ae* G3a0d@r)))))))) G3a16@f) G3a06@e G3a0a@m* G3a0b@s* G3a0c@ae*))) (set! G399a@match-each-any (lambda (G39ed@e G39ee@m* G39ef@s* G39f0@ae*) (if (pair? G39ed@e) ((lambda (G39f5@l) (and G39f5@l (cons (G3994@stx^ (car G39ed@e) G39ee@m* G39ef@s* G39f0@ae*) G39f5@l))) (G399a@match-each-any (cdr G39ed@e) G39ee@m* G39ef@s* G39f0@ae*)) (if (null? G39ed@e) '() (if (G2afe@stx? G39ed@e) (and (not (G2ab4@top-marked? G39ee@m*)) (call-with-values (lambda () (G2b1c@join-wraps G39ee@m* G39ef@s* G39f0@ae* G39ed@e)) (lambda (G39fa@G39f7 G39fb@G39f8 G39fc@G39f9) ((lambda (G3a00@ae* G3a01@s* G3a02@m*) (G399a@match-each-any (G2b02@stx-expr G39ed@e) G3a02@m* G3a01@s* G3a00@ae*)) G39fc@G39f9 G39fb@G39f8 G39fa@G39f7)))) (if (G26df@G2602@annotation? G39ed@e) (G399a@match-each-any (G26e1@G2606@annotation-expression G39ed@e) G39ee@m* G39ef@s* G39f0@ae*) '#f)))))) (set! G399c@match-empty (lambda (G39e7@p G39e8@r) (if (null? G39e7@p) G39e8@r (if (eq? G39e7@p '_) G39e8@r (if (eq? G39e7@p 'any) (cons '() G39e8@r) (if (pair? G39e7@p) (G399c@match-empty (car G39e7@p) (G399c@match-empty (cdr G39e7@p) G39e8@r)) (if (eq? G39e7@p 'each-any) (cons '() G39e8@r) ((lambda (G39eb@t) (if (memv G39eb@t '(each)) (G399c@match-empty (vector-ref G39e7@p '1) G39e8@r) (if (memv G39eb@t '(each+)) (G399c@match-empty (vector-ref G39e7@p '1) (G399c@match-empty (reverse (vector-ref G39e7@p '2)) (G399c@match-empty (vector-ref G39e7@p '3) G39e8@r))) (if (memv G39eb@t '(free-id atom)) G39e8@r (if (memv G39eb@t '(scheme-id atom)) G39e8@r (if (memv G39eb@t '(vector)) (G399c@match-empty (vector-ref G39e7@p '1) G39e8@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G39e7@p))))))) (vector-ref G39e7@p '0))))))))) (set! G399e@combine (lambda (G39e3@r* G39e4@r) (if (null? (car G39e3@r*)) G39e4@r (cons (map car G39e3@r*) (G399e@combine (map cdr G39e3@r*) G39e4@r))))) (set! G39a0@match* (lambda (G39c2@e G39c3@p G39c4@m* G39c5@s* G39c6@ae* G39c7@r) (if (null? G39c3@p) (and (null? G39c2@e) G39c7@r) (if (pair? G39c3@p) (and (pair? G39c2@e) (G39a2@match (car G39c2@e) (car G39c3@p) G39c4@m* G39c5@s* G39c6@ae* (G39a2@match (cdr G39c2@e) (cdr G39c3@p) G39c4@m* G39c5@s* G39c6@ae* G39c7@r))) (if (eq? G39c3@p 'each-any) ((lambda (G39ce@l) (and G39ce@l (cons G39ce@l G39c7@r))) (G399a@match-each-any G39c2@e G39c4@m* G39c5@s* G39c6@ae*)) ((lambda (G39d0@t) (if (memv G39d0@t '(each)) (if (null? G39c2@e) (G399c@match-empty (vector-ref G39c3@p '1) G39c7@r) ((lambda (G39d2@r*) (and G39d2@r* (G399e@combine G39d2@r* G39c7@r))) (G3996@match-each G39c2@e (vector-ref G39c3@p '1) G39c4@m* G39c5@s* G39c6@ae*))) (if (memv G39d0@t '(free-id)) (and (symbol? G39c2@e) (G2ab4@top-marked? G39c4@m*) (G2b3e@free-id=? (G3994@stx^ G39c2@e G39c4@m* G39c5@s* G39c6@ae*) (vector-ref G39c3@p '1)) G39c7@r) (if (memv G39d0@t '(scheme-id)) (and (symbol? G39c2@e) (G2ab4@top-marked? G39c4@m*) (G2b3e@free-id=? (G3994@stx^ G39c2@e G39c4@m* G39c5@s* G39c6@ae*) (G2cb1@scheme-stx (vector-ref G39c3@p '1))) G39c7@r) (if (memv G39d0@t '(each+)) (call-with-values (lambda () (G3998@match-each+ G39c2@e (vector-ref G39c3@p '1) (vector-ref G39c3@p '2) (vector-ref G39c3@p '3) G39c4@m* G39c5@s* G39c6@ae* G39c7@r)) (lambda (G39d7@G39d4 G39d8@G39d5 G39d9@G39d6) ((lambda (G39dd@r G39de@y-pat G39df@xr*) (and G39dd@r (null? G39de@y-pat) (if (null? G39df@xr*) (G399c@match-empty (vector-ref G39c3@p '1) G39dd@r) (G399e@combine G39df@xr* G39dd@r)))) G39d9@G39d6 G39d8@G39d5 G39d7@G39d4))) (if (memv G39d0@t '(atom)) (and (fast-equal? (vector-ref G39c3@p '1) (G2b4a@strip G39c2@e G39c4@m*)) G39c7@r) (if (memv G39d0@t '(vector)) (and (vector? G39c2@e) (G39a2@match (vector->list G39c2@e) (vector-ref G39c3@p '1) G39c4@m* G39c5@s* G39c6@ae* G39c7@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G39c3@p)))))))) (vector-ref G39c3@p '0))))))) (set! G39a2@match (lambda (G39a7@e G39a8@p G39a9@m* G39aa@s* G39ab@ae* G39ac@r) (if (not G39ac@r) '#f (if (eq? G39a8@p '_) G39ac@r (if (eq? G39a8@p 'any) (cons (G3994@stx^ G39a7@e G39a9@m* G39aa@s* G39ab@ae*) G39ac@r) (if (G2afe@stx? G39a7@e) (and (not (G2ab4@top-marked? G39a9@m*)) (call-with-values (lambda () (G2b1c@join-wraps G39a9@m* G39aa@s* G39ab@ae* G39a7@e)) (lambda (G39b6@G39b3 G39b7@G39b4 G39b8@G39b5) ((lambda (G39bc@ae* G39bd@s* G39be@m*) (G39a2@match (G2b02@stx-expr G39a7@e) G39a8@p G39be@m* G39bd@s* G39bc@ae* G39ac@r)) G39b8@G39b5 G39b7@G39b4 G39b6@G39b3)))) (if (G26df@G2602@annotation? G39a7@e) (G39a2@match (G26e1@G2606@annotation-expression G39a7@e) G39a8@p G39a9@m* G39aa@s* G39ab@ae* G39ac@r) (G39a0@match* G39a7@e G39a8@p G39a9@m* G39aa@s* G39ab@ae* G39ac@r)))))))) (lambda (G39a3@e G39a4@p) (G39a2@match G39a3@e G39a4@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d29@ellipsis? (lambda (G3a65@x) (and (G2b36@id? G3a65@x) (G2b3e@free-id=? G3a65@x (G2cb1@scheme-stx '...))))) (set! G2d2b@underscore? (lambda (G3a67@x) (and (G2b36@id? G3a67@x) (G2b3e@free-id=? G3a67@x (G2cb1@scheme-stx '_))))) (set! G2d2d@verify-literals (lambda (G3a69@lits G3a6a@expr) (for-each (lambda (G3a6d@x) (if (or (not (G2b36@id? G3a6d@x)) (G2d29@ellipsis? G3a6d@x) (G2d2b@underscore? G3a6d@x)) (G2e12@syntax-violation '#f '"invalid literal" G3a6a@expr G3a6d@x) (void))) G3a69@lits))) (set! G2d2f@syntax-case-transformer ((lambda () ((lambda (G3a70@build-dispatch-call G3a72@invalid-ids-error G3a74@gen-clause G3a76@gen-syntax-case) (begin (set! G3a70@build-dispatch-call (lambda (G3adf@pvars G3ae0@expr G3ae1@y G3ae2@r G3ae3@mr) ((lambda (G3ae9@ids G3aea@levels) ((lambda (G3aed@labels G3aee@new-vars) ((lambda (G3af1@body) (list '(primitive apply) (G2a94@G29d6@build-lambda '#f G3aee@new-vars G3af1@body) G3ae1@y)) (G2d4b@chi-expr (G2b22@add-subst (G2af1@make-full-rib G3ae9@ids G3aed@labels) G3ae0@expr) (append (map (lambda (G3af3@label G3af4@var G3af5@level) (cons G3af3@label (G2b56@make-binding 'syntax (cons G3af4@var G3af5@level)))) G3aed@labels G3aee@new-vars (map cdr G3adf@pvars)) G3ae2@r) G3ae3@mr))) (map G2aba@gen-label G3ae9@ids) (map G2ab6@gen-lexical G3ae9@ids))) (map car G3adf@pvars) (map cdr G3adf@pvars)))) (set! G3a72@invalid-ids-error (lambda (G3ad3@id* G3ad4@e G3ad5@class) ((letrec ((G3ad9@find (lambda (G3adb@id* G3adc@ok*) (if (null? G3adb@id*) (G2e12@syntax-violation '#f '"invalid syntax" G3ad4@e) (if (G2b36@id? (car G3adb@id*)) (if (G2b44@bound-id-member? (car G3adb@id*) G3adc@ok*) (G2e0e@syntax-error (car G3adb@id*) '"duplicate " G3ad5@class) (G3ad9@find (cdr G3adb@id*) (cons (car G3adb@id*) G3adc@ok*))) (G2e0e@syntax-error (car G3adb@id*) '"invalid " G3ad5@class)))))) G3ad9@find) G3ad3@id* '()))) (set! G3a74@gen-clause (lambda (G3aad@x G3aae@keys G3aaf@clauses G3ab0@r G3ab1@mr G3ab2@pat G3ab3@fender G3ab4@expr) (call-with-values (lambda () (G2d25@convert-pattern G3ab2@pat G3aae@keys)) (lambda (G3abf@G3abd G3ac0@G3abe) ((lambda (G3ac3@pvars G3ac4@p) (if (not (G2b42@distinct-bound-ids? (map car G3ac3@pvars))) (G3a72@invalid-ids-error (map car G3ac3@pvars) G3ab2@pat '"pattern variable") (if (not (for-all (lambda (G3ac7@x) (not (G2d29@ellipsis? (car G3ac7@x)))) G3ac3@pvars)) (G2e12@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3ab2@pat) ((lambda (G3ac9@y) ((lambda (G3acb@test) ((lambda (G3acd@conseq) ((lambda (G3acf@altern) (list (G2a94@G29d6@build-lambda '#f (list G3ac9@y) (list 'if G3acb@test G3acd@conseq G3acf@altern)) (list '(primitive syntax-dispatch) G3aad@x (list 'quote G3ac4@p)))) (G3a76@gen-syntax-case G3aad@x G3aae@keys G3aaf@clauses G3ab0@r G3ab1@mr))) (G3a70@build-dispatch-call G3ac3@pvars G3ab4@expr G3ac9@y G3ab0@r G3ab1@mr))) (if (eq? G3ab3@fender '#t) G3ac9@y ((lambda (G3ad1@call) (list 'if G3ac9@y G3ad1@call (list 'quote '#f))) (G3a70@build-dispatch-call G3ac3@pvars G3ab3@fender G3ac9@y G3ab0@r G3ab1@mr))))) (G2ab6@gen-lexical 'tmp))))) G3ac0@G3abe G3abf@G3abd))))) (set! G3a76@gen-syntax-case (lambda (G3a8b@x G3a8c@keys G3a8d@clauses G3a8e@r G3a8f@mr) (if (null? G3a8d@clauses) (list '(primitive syntax-error) G3a8b@x) ((lambda (G3a95@t) ((lambda (G3a97@ls/false) (if G3a97@ls/false (apply (lambda (G3a99@pat G3a9a@expr) (if (and (G2b36@id? G3a99@pat) (not (G2b44@bound-id-member? G3a99@pat G3a8c@keys)) (not (G2d29@ellipsis? G3a99@pat))) (if (G2b3e@free-id=? G3a99@pat (G2cb1@scheme-stx '_)) (G2d4b@chi-expr G3a9a@expr G3a8e@r G3a8f@mr) ((lambda (G3a9d@lab G3a9e@lex) ((lambda (G3aa1@body) (list (G2a94@G29d6@build-lambda '#f (list G3a9e@lex) G3aa1@body) G3a8b@x)) (G2d4b@chi-expr (G2b22@add-subst (G2af1@make-full-rib (list G3a99@pat) (list G3a9d@lab)) G3a9a@expr) (cons (cons G3a9d@lab (G2b56@make-binding 'syntax (cons G3a9e@lex '0))) G3a8e@r) G3a8f@mr))) (G2aba@gen-label G3a99@pat) (G2ab6@gen-lexical G3a99@pat))) (G3a74@gen-clause G3a8b@x G3a8c@keys (cdr G3a8d@clauses) G3a8e@r G3a8f@mr G3a99@pat '#t G3a9a@expr))) G3a97@ls/false) ((lambda (G3aa3@t) ((lambda (G3aa5@ls/false) (if G3aa5@ls/false (apply (lambda (G3aa7@pat G3aa8@fender G3aa9@expr) (G3a74@gen-clause G3a8b@x G3a8c@keys (cdr G3a8d@clauses) G3a8e@r G3a8f@mr G3aa7@pat G3aa8@fender G3aa9@expr)) G3aa5@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3aa3@t))) (G2d27@syntax-dispatch G3aa3@t '(any any any)))) G3a95@t))) (G2d27@syntax-dispatch G3a95@t '(any any)))) (car G3a8d@clauses))))) (lambda (G3a77@e G3a78@r G3a79@mr) ((lambda (G3a7d@t) ((lambda (G3a7f@ls/false) (if G3a7f@ls/false (apply (lambda (G3a81@expr G3a82@keys G3a83@clauses) (begin (G2d2d@verify-literals G3a82@keys G3a77@e) ((lambda (G3a87@x) ((lambda (G3a89@body) (list (G2a94@G29d6@build-lambda '#f (list G3a87@x) G3a89@body) (G2d4b@chi-expr G3a81@expr G3a78@r G3a79@mr))) (G3a76@gen-syntax-case G3a87@x G3a82@keys G3a83@clauses G3a78@r G3a79@mr))) (G2ab6@gen-lexical 'tmp)))) G3a7f@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3a7d@t))) (G2d27@syntax-dispatch G3a7d@t '(_ any each-any . each-any)))) G3a77@e)))) '#f '#f '#f '#f)))) (set! G2d31@ellipsis-map (lambda (G3af9@proc G3afa@ls . G3afd@ls*) ((lambda (G3b00@who) (begin (set! G3b00@who '...) (begin (if (not (list? G3afa@ls)) (assertion-violation G3b00@who '"not a list" G3afa@ls) (void)) (if (not (null? G3afd@ls*)) ((lambda (G3b01@n) (for-each (lambda (G3b03@x) (begin (if (not (list? G3b03@x)) (assertion-violation G3b00@who '"not a list" G3b03@x) (void)) (if (not (= (length G3b03@x) G3b01@n)) (assertion-violation G3b00@who '"length mismatch" G3afa@ls G3b03@x) (void)))) G3afd@ls*)) (length G3afa@ls)) (void)) (apply map G3af9@proc G3afa@ls G3afd@ls*)))) '#f))) (set! G2d33@syntax-transformer ((lambda () ((lambda (G3b06@gen-syntax G3b08@gen-ref G3b0a@gen-append G3b0c@gen-mappend G3b0e@gen-map G3b10@gen-cons G3b12@gen-vector G3b14@regen) (begin (set! G3b06@gen-syntax (lambda (G3b79@src G3b7a@e G3b7b@r G3b7c@maps G3b7d@ellipsis? G3b7e@vec?) ((lambda (G3b85@t) ((lambda (G3b87@ls/false) (if (and G3b87@ls/false (apply (lambda (G3b89@dots) (G3b7d@ellipsis? G3b89@dots)) G3b87@ls/false)) (apply (lambda (G3b8b@dots) (G2e12@syntax-violation '#f '"misplaced ellipsis in syntax form" G3b79@src)) G3b87@ls/false) ((lambda (G3b8d@t) ((lambda (G3b8f@ls/false) (if (and G3b8f@ls/false (apply (lambda (G3b91@id) (G2b36@id? G3b91@id)) G3b8f@ls/false)) (apply (lambda (G3b93@id) ((lambda (G3b95@label) ((lambda (G3b97@b) ((lambda () (if (eq? (G2b58@binding-type G3b97@b) 'syntax) (call-with-values (lambda () ((lambda (G3b9b@var.lev) (G3b08@gen-ref G3b79@src (car G3b9b@var.lev) (cdr G3b9b@var.lev) G3b7c@maps)) (G2b5a@binding-value G3b97@b))) (lambda (G3b9d@G3b99 G3b9e@G3b9a) ((lambda (G3ba1@maps G3ba2@var) (values (list 'ref G3ba2@var) G3ba1@maps)) G3b9e@G3b9a G3b9d@G3b99))) (values (list 'quote G3b7a@e) G3b7c@maps))))) (G2b54@label->binding G3b95@label G3b7b@r))) (G2b50@id->label G3b7a@e))) G3b8f@ls/false) ((lambda (G3ba5@t) ((lambda (G3ba7@ls/false) (if (and G3ba7@ls/false (apply (lambda (G3ba9@dots G3baa@e) (G3b7d@ellipsis? G3ba9@dots)) G3ba7@ls/false)) (apply (lambda (G3bad@dots G3bae@e) (if G3b7e@vec? (G2e12@syntax-violation '#f '"misplaced ellipsis in syntax form" G3b79@src) (G3b06@gen-syntax G3b79@src G3bae@e G3b7b@r G3b7c@maps (lambda (G3bb1@x) '#f) '#f))) G3ba7@ls/false) ((lambda (G3bb3@t) ((lambda (G3bb5@ls/false) (if (and G3bb5@ls/false (apply (lambda (G3bb7@x G3bb8@dots G3bb9@y) (G3b7d@ellipsis? G3bb8@dots)) G3bb5@ls/false)) (apply (lambda (G3bbd@x G3bbe@dots G3bbf@y) ((letrec ((G3bc3@f (lambda (G3bc5@y G3bc6@k) ((lambda (G3bc9@t) ((lambda (G3bcb@ls/false) (if G3bcb@ls/false (apply (lambda () (G3bc6@k G3b7c@maps)) G3bcb@ls/false) ((lambda (G3bcd@t) ((lambda (G3bcf@ls/false) (if (and G3bcf@ls/false (apply (lambda (G3bd1@dots G3bd2@y) (G3b7d@ellipsis? G3bd1@dots)) G3bcf@ls/false)) (apply (lambda (G3bd5@dots G3bd6@y) (G3bc3@f G3bd6@y (lambda (G3bd9@maps) (call-with-values (lambda () (G3bc6@k (cons '() G3bd9@maps))) (lambda (G3bdd@G3bdb G3bde@G3bdc) ((lambda (G3be1@maps G3be2@x) (if (null? (car G3be1@maps)) (G2e12@syntax-violation '#f '"extra ellipsis in syntax form" G3b79@src) (values (G3b0c@gen-mappend G3be2@x (car G3be1@maps)) (cdr G3be1@maps)))) G3bde@G3bdc G3bdd@G3bdb)))))) G3bcf@ls/false) ((lambda (G3be5@t) ((lambda (G3be7@ls/false) (if G3be7@ls/false (apply (lambda () (call-with-values (lambda () (G3b06@gen-syntax G3b79@src G3bc5@y G3b7b@r G3b7c@maps G3b7d@ellipsis? G3b7e@vec?)) (lambda (G3beb@G3be9 G3bec@G3bea) ((lambda (G3bef@maps G3bf0@y) (call-with-values (lambda () (G3bc6@k G3bef@maps)) (lambda (G3bf5@G3bf3 G3bf6@G3bf4) ((lambda (G3bf9@maps G3bfa@x) (values (G3b0a@gen-append G3bfa@x G3bf0@y) G3bf9@maps)) G3bf6@G3bf4 G3bf5@G3bf3)))) G3bec@G3bea G3beb@G3be9)))) G3be7@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3be5@t))) (G2d27@syntax-dispatch G3be5@t '_))) G3bcd@t))) (G2d27@syntax-dispatch G3bcd@t '(any . any)))) G3bc9@t))) (G2d27@syntax-dispatch G3bc9@t '()))) G3bc5@y)))) G3bc3@f) G3bbf@y (lambda (G3bfd@maps) (call-with-values (lambda () (G3b06@gen-syntax G3b79@src G3bbd@x G3b7b@r (cons '() G3bfd@maps) G3b7d@ellipsis? '#f)) (lambda (G3c01@G3bff G3c02@G3c00) ((lambda (G3c05@maps G3c06@x) (if (null? (car G3c05@maps)) (G2e12@syntax-violation '#f '"extra ellipsis in syntax form" G3b79@src) (values (G3b0e@gen-map G3c06@x (car G3c05@maps)) (cdr G3c05@maps)))) G3c02@G3c00 G3c01@G3bff)))))) G3bb5@ls/false) ((lambda (G3c09@t) ((lambda (G3c0b@ls/false) (if G3c0b@ls/false (apply (lambda (G3c0d@x G3c0e@y) (call-with-values (lambda () (G3b06@gen-syntax G3b79@src G3c0d@x G3b7b@r G3b7c@maps G3b7d@ellipsis? '#f)) (lambda (G3c13@G3c11 G3c14@G3c12) ((lambda (G3c17@maps G3c18@xnew) (call-with-values (lambda () (G3b06@gen-syntax G3b79@src G3c0e@y G3b7b@r G3c17@maps G3b7d@ellipsis? G3b7e@vec?)) (lambda (G3c1d@G3c1b G3c1e@G3c1c) ((lambda (G3c21@maps G3c22@ynew) (values (G3b10@gen-cons G3b7a@e G3c0d@x G3c0e@y G3c18@xnew G3c22@ynew) G3c21@maps)) G3c1e@G3c1c G3c1d@G3c1b)))) G3c14@G3c12 G3c13@G3c11)))) G3c0b@ls/false) ((lambda (G3c25@t) ((lambda (G3c27@ls/false) (if G3c27@ls/false (apply (lambda (G3c29@ls) (call-with-values (lambda () (G3b06@gen-syntax G3b79@src G3c29@ls G3b7b@r G3b7c@maps G3b7d@ellipsis? '#t)) (lambda (G3c2d@G3c2b G3c2e@G3c2c) ((lambda (G3c31@maps G3c32@lsnew) (values (G3b12@gen-vector G3b7a@e G3c29@ls G3c32@lsnew) G3c31@maps)) G3c2e@G3c2c G3c2d@G3c2b)))) G3c27@ls/false) ((lambda (G3c35@t) ((lambda (G3c37@ls/false) (if G3c37@ls/false (apply (lambda () (values (list 'quote G3b7a@e) G3b7c@maps)) G3c37@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3c35@t))) (G2d27@syntax-dispatch G3c35@t '_))) G3c25@t))) (G2d27@syntax-dispatch G3c25@t '#(vector each-any)))) G3c09@t))) (G2d27@syntax-dispatch G3c09@t '(any . any)))) G3bb3@t))) (G2d27@syntax-dispatch G3bb3@t '(any any . any)))) G3ba5@t))) (G2d27@syntax-dispatch G3ba5@t '(any any)))) G3b8d@t))) (G2d27@syntax-dispatch G3b8d@t 'any))) G3b85@t))) (G2d27@syntax-dispatch G3b85@t 'any))) G3b7a@e))) (set! G3b08@gen-ref (lambda (G3b61@src G3b62@var G3b63@level G3b64@maps) (if (= G3b63@level '0) (values G3b62@var G3b64@maps) (if (null? G3b64@maps) (G2e12@syntax-violation '#f '"missing ellipsis in syntax form" G3b61@src) (call-with-values (lambda () (G3b08@gen-ref G3b61@src G3b62@var (- G3b63@level '1) (cdr G3b64@maps))) (lambda (G3b6b@G3b69 G3b6c@G3b6a) ((lambda (G3b6f@outer-maps G3b70@outer-var) ((lambda (G3b73@t) (if G3b73@t ((lambda (G3b75@b) (values (cdr G3b75@b) G3b64@maps)) G3b73@t) ((lambda (G3b77@inner-var) (values G3b77@inner-var (cons (cons (cons G3b70@outer-var G3b77@inner-var) (car G3b64@maps)) G3b6f@outer-maps))) (G2ab6@gen-lexical 'tmp)))) (assq G3b70@outer-var (car G3b64@maps)))) G3b6c@G3b6a G3b6b@G3b69))))))) (set! G3b0a@gen-append (lambda (G3b5d@x G3b5e@y) (if (fast-equal? G3b5e@y ''()) G3b5d@x (list 'append G3b5d@x G3b5e@y)))) (set! G3b0c@gen-mappend (lambda (G3b59@e G3b5a@map-env) (list 'apply '(primitive append) (G3b0e@gen-map G3b59@e G3b5a@map-env)))) (set! G3b0e@gen-map (lambda (G3b47@e G3b48@map-env) ((lambda (G3b4b@formals G3b4c@actuals) (if (eq? (car G3b47@e) 'ref) (car G3b4c@actuals) (if (for-all (lambda (G3b4f@x) (and (eq? (car G3b4f@x) 'ref) (memq (cadr G3b4f@x) G3b4b@formals))) (cdr G3b47@e)) ((lambda (G3b51@args) (cons 'map (cons (list 'primitive (car G3b47@e)) G3b51@args))) (map ((lambda (G3b53@r) (lambda (G3b55@x) (cdr (assq (cadr G3b55@x) G3b53@r)))) (map cons G3b4b@formals G3b4c@actuals)) (cdr G3b47@e))) (cons* 'map (list 'lambda G3b4b@formals G3b47@e) G3b4c@actuals)))) (map cdr G3b48@map-env) (map (lambda (G3b57@x) (list 'ref (car G3b57@x))) G3b48@map-env)))) (set! G3b10@gen-cons (lambda (G3b37@e G3b38@x G3b39@y G3b3a@xnew G3b3b@ynew) ((lambda (G3b41@t) (if (memv G3b41@t '(quote)) (if (eq? (car G3b3a@xnew) 'quote) ((lambda (G3b43@xnew G3b44@ynew) (if (and (eq? G3b43@xnew G3b38@x) (eq? G3b44@ynew G3b39@y)) (list 'quote G3b37@e) (list 'quote (cons G3b43@xnew G3b44@ynew)))) (cadr G3b3a@xnew) (cadr G3b3b@ynew)) (if (null? (cadr G3b3b@ynew)) (list 'list G3b3a@xnew) (list 'cons G3b3a@xnew G3b3b@ynew))) (if (memv G3b41@t '(list)) (cons 'list (cons G3b3a@xnew (cdr G3b3b@ynew))) (list 'cons G3b3a@xnew G3b3b@ynew)))) (car G3b3b@ynew)))) (set! G3b12@gen-vector (lambda (G3b31@e G3b32@ls G3b33@lsnew) (if (eq? (car G3b33@lsnew) 'quote) (if (eq? (cadr G3b33@lsnew) G3b32@ls) (list 'quote G3b31@e) (list 'quote (list->vector (cadr G3b33@lsnew)))) (if (eq? (car G3b33@lsnew) 'list) (cons 'vector (cdr G3b33@lsnew)) (list 'list->vector G3b33@lsnew))))) (set! G3b14@regen (lambda (G3b2b@x) ((lambda (G3b2d@t) (if (memv G3b2d@t '(ref)) (cadr G3b2b@x) (if (memv G3b2d@t '(primitive)) (list 'primitive (cadr G3b2b@x)) (if (memv G3b2d@t '(quote)) (list 'quote (cadr G3b2b@x)) (if (memv G3b2d@t '(lambda)) (G2a94@G29d6@build-lambda '#f (cadr G3b2b@x) (G3b14@regen (caddr G3b2b@x))) (if (memv G3b2d@t '(map)) ((lambda (G3b2f@ls) (cons '(primitive ellipsis-map) G3b2f@ls)) (map G3b14@regen (cdr G3b2b@x))) (cons (list 'primitive (car G3b2b@x)) (map G3b14@regen (cdr G3b2b@x))))))))) (car G3b2b@x)))) (lambda (G3b15@e G3b16@r G3b17@mr) ((lambda (G3b1b@t) ((lambda (G3b1d@ls/false) (if G3b1d@ls/false (apply (lambda (G3b1f@x) (call-with-values (lambda () (G3b06@gen-syntax G3b15@e G3b1f@x G3b16@r '() G2d29@ellipsis? '#f)) (lambda (G3b23@G3b21 G3b24@G3b22) ((lambda (G3b27@maps G3b28@e) (G3b14@regen G3b28@e)) G3b24@G3b22 G3b23@G3b21)))) G3b1d@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3b1b@t))) (G2d27@syntax-dispatch G3b1b@t '(_ any)))) G3b15@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d35@core-macro-transformer (lambda (G3c39@name) ((lambda (G3c3b@t) (if (memv G3c3b@t '(quote)) G2cd7@quote-transformer (if (memv G3c3b@t '(lambda)) G2cdb@lambda-transformer (if (memv G3c3b@t '(case-lambda)) G2cd9@case-lambda-transformer (if (memv G3c3b@t '(letrec)) G2cbf@letrec-transformer (if (memv G3c3b@t '(letrec*)) G2cc1@letrec*-transformer (if (memv G3c3b@t '(if)) G2ccf@if-transformer (if (memv G3c3b@t '(and)) G2cd1@and-transformer (if (memv G3c3b@t '(or)) G2cd3@or-transformer (if (memv G3c3b@t '(foreign-call)) G2d23@foreign-call-transformer (if (memv G3c3b@t '(syntax-case)) G2d2f@syntax-case-transformer (if (memv G3c3b@t '(syntax)) G2d33@syntax-transformer (if (memv G3c3b@t '(type-descriptor)) G2cc5@type-descriptor-transformer (if (memv G3c3b@t '(record-type-descriptor)) G2cc7@record-type-descriptor-transformer (if (memv G3c3b@t '(record-constructor-descriptor)) G2cc9@record-constructor-descriptor-transformer (if (memv G3c3b@t '(fluid-let-syntax)) G2cc3@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3c39@name))))))))))))))))) G3c39@name))) (set! G2d37@file-options-macro (lambda (G3c3d@x) ((lambda (G3c40@valid-option?) (begin (set! G3c40@valid-option? (lambda (G3c49@x) (and (G2b36@id? G3c49@x) (memq (G2b38@id->sym G3c49@x) '(no-fail no-create no-truncate))))) ((lambda (G3c41@t) ((lambda (G3c43@ls/false) (if (and G3c43@ls/false (apply (lambda (G3c45@opt*) (and (for-all G3c40@valid-option? G3c45@opt*) (G26eb@G267c@file-options-spec (map G2b38@id->sym G3c45@opt*)))) G3c43@ls/false)) (apply (lambda (G3c47@opt*) (G2cdd@bless (list 'quote (G26eb@G267c@file-options-spec (map G2b38@id->sym G3c47@opt*))))) G3c43@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3c41@t))) (G2d27@syntax-dispatch G3c41@t '(_ . each-any)))) G3c3d@x))) '#f))) (set! G2d39@symbol-macro (lambda (G3c4b@x G3c4c@set) ((lambda (G3c4f@t) ((lambda (G3c51@ls/false) (if (and G3c51@ls/false (apply (lambda (G3c53@name) (and (G2b36@id? G3c53@name) (memq (G2b38@id->sym G3c53@name) G3c4c@set))) G3c51@ls/false)) (apply (lambda (G3c55@name) (G2cdd@bless (list 'quote G3c55@name))) G3c51@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3c4f@t))) (G2d27@syntax-dispatch G3c4f@t '(_ any)))) G3c4b@x))) (set! G2d3b@macro-transformer (lambda (G3c57@x) (if (procedure? G3c57@x) G3c57@x (if (symbol? G3c57@x) ((lambda (G3c59@t) (if (memv G3c59@t '(define-record-type)) G2d1b@define-record-type-macro (if (memv G3c59@t '(define-struct)) G2d19@define-struct-macro (if (memv G3c59@t '(include)) G2d0f@include-macro (if (memv G3c59@t '(cond)) G2d0b@cond-macro (if (memv G3c59@t '(let)) G2ce3@let-macro (if (memv G3c59@t '(do)) G2d03@do-macro (if (memv G3c59@t '(or)) G2d07@or-macro (if (memv G3c59@t '(and)) G2d09@and-macro (if (memv G3c59@t '(let*)) G2d05@let*-macro (if (memv G3c59@t '(let-values)) G2ce5@let-values-macro (if (memv G3c59@t '(let*-values)) G2ce7@let*-values-macro (if (memv G3c59@t '(syntax-rules)) G2d13@syntax-rules-macro (if (memv G3c59@t '(quasiquote)) G2d15@quasiquote-macro (if (memv G3c59@t '(quasisyntax)) G2d17@quasisyntax-macro (if (memv G3c59@t '(with-syntax)) G2cdf@with-syntax-macro (if (memv G3c59@t '(when)) G2ccb@when-macro (if (memv G3c59@t '(unless)) G2ccd@unless-macro (if (memv G3c59@t '(case)) G2cd5@case-macro (if (memv G3c59@t '(identifier-syntax)) G2d01@identifier-syntax-macro (if (memv G3c59@t '(time)) G2cf9@time-macro (if (memv G3c59@t '(delay)) G2cfb@delay-macro (if (memv G3c59@t '(assert)) G2cfd@assert-macro (if (memv G3c59@t '(endianness)) G2cff@endianness-macro (if (memv G3c59@t '(guard)) G2cf5@guard-macro (if (memv G3c59@t '(define-enumeration)) G2cf7@define-enumeration-macro (if (memv G3c59@t '(trace-lambda)) G2ce9@trace-lambda-macro (if (memv G3c59@t '(trace-define)) G2ceb@trace-define-macro (if (memv G3c59@t '(trace-define-syntax)) G2ced@trace-define-syntax-macro (if (memv G3c59@t '(trace-let-syntax)) G2cf1@trace-let-syntax-macro (if (memv G3c59@t '(trace-letrec-syntax)) G2cf3@trace-letrec-syntax-macro (if (memv G3c59@t '(define-condition-type)) G2d1d@define-condition-type-macro (if (memv G3c59@t '(parameterize)) G2d21@parameterize-macro (if (memv G3c59@t '(include-into)) G2d11@include-into-macro (if (memv G3c59@t '(eol-style)) (lambda (G3c5b@x) (G2d39@symbol-macro G3c5b@x '(none lf cr crlf nel crnel ls))) (if (memv G3c59@t '(error-handling-mode)) (lambda (G3c5d@x) (G2d39@symbol-macro G3c5d@x '(ignore raise replace))) (if (memv G3c59@t '(buffer-mode)) (lambda (G3c5f@x) (G2d39@symbol-macro G3c5f@x '(none line block))) (if (memv G3c59@t '(file-options)) G2d37@file-options-macro (if (memv G3c59@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2d1f@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3c57@x)))))))))))))))))))))))))))))))))))))))) G3c57@x) (error 'core-macro-transformer '"BUG: invalid macro" G3c57@x))))) (set! G2d3d@local-macro-transformer (lambda (G3c61@x) (car G3c61@x))) (set! G2d3f@do-macro-call (lambda (G3c63@transformer G3c64@expr) ((lambda (G3c67@out) (begin ((letrec ((G3c69@f (lambda (G3c6b@x) (if (not (G2afe@stx? G3c6b@x)) (if (pair? G3c6b@x) (begin (G3c69@f (car G3c6b@x)) (G3c69@f (cdr G3c6b@x))) (if (vector? G3c6b@x) (vector-for-each G3c69@f G3c6b@x) (if (symbol? G3c6b@x) (G2e12@syntax-violation '#f '"raw symbol encountered in output of macro" G3c64@expr G3c6b@x) (void)))) (void))))) G3c69@f) G3c67@out) (G2b20@add-mark (G2b16@gen-mark) G3c67@out G3c64@expr))) (G3c63@transformer (G2b20@add-mark G2b18@anti-mark G3c64@expr '#f))))) (set! G2d41@chi-macro (lambda (G3c6d@p G3c6e@e) (G2d3f@do-macro-call (G2d3b@macro-transformer G3c6d@p) G3c6e@e))) (set! G2d43@chi-local-macro (lambda (G3c71@p G3c72@e) (G2d3f@do-macro-call (G2d3d@local-macro-transformer G3c71@p) G3c72@e))) (set! G2d45@chi-global-macro (lambda (G3c75@p G3c76@e) ((lambda (G3c79@lib G3c7a@loc) (begin (G295f@G2807@visit-library G3c79@lib) ((lambda (G3c7d@x) ((lambda (G3c7f@transformer) (G2d3f@do-macro-call G3c7f@transformer G3c76@e)) (if (procedure? G3c7d@x) G3c7d@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3c7d@x)))) (symbol-value G3c7a@loc)))) (car G3c75@p) (cdr G3c75@p)))) (set! G2d47@chi-expr* (lambda (G3c81@e* G3c82@r G3c83@mr) (if (null? G3c81@e*) '() ((lambda (G3c87@e) (cons G3c87@e (G2d47@chi-expr* (cdr G3c81@e*) G3c82@r G3c83@mr))) (G2d4b@chi-expr (car G3c81@e*) G3c82@r G3c83@mr))))) (set! G2d49@chi-application (lambda (G3c89@e G3c8a@r G3c8b@mr) ((lambda (G3c8f@t) ((lambda (G3c91@ls/false) (if G3c91@ls/false (apply (lambda (G3c93@rator G3c94@rands) ((lambda (G3c97@rator) (cons G3c97@rator (G2d47@chi-expr* G3c94@rands G3c8a@r G3c8b@mr))) (G2d4b@chi-expr G3c93@rator G3c8a@r G3c8b@mr))) G3c91@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3c8f@t))) (G2d27@syntax-dispatch G3c8f@t '(any . each-any)))) G3c89@e))) (set! G2d4b@chi-expr (lambda (G3c99@e G3c9a@r G3c9b@mr) (call-with-values (lambda () (G2b5e@syntax-type G3c99@e G3c9a@r)) (lambda (G3ca2@G3c9f G3ca3@G3ca0 G3ca4@G3ca1) ((lambda (G3ca8@kwd G3ca9@value G3caa@type) ((lambda (G3cae@t) (if (memv G3cae@t '(core-macro)) ((lambda (G3cb0@transformer) (G3cb0@transformer G3c99@e G3c9a@r G3c9b@mr)) (G2d35@core-macro-transformer G3ca9@value)) (if (memv G3cae@t '(global)) ((lambda (G3cb2@lib) ((lambda (G3cb4@loc) ((lambda () (begin ((G2d94@inv-collector) G3cb2@lib) G3cb4@loc)))) (cdr G3ca9@value))) (car G3ca9@value)) (if (memv G3cae@t '(core-prim)) ((lambda (G3cb6@name) (list 'primitive G3cb6@name)) G3ca9@value) (if (memv G3cae@t '(call)) (G2d49@chi-application G3c99@e G3c9a@r G3c9b@mr) (if (memv G3cae@t '(lexical)) ((lambda (G3cb8@lex) G3cb8@lex) (G2cb3@lexical-var G3ca9@value)) (if (memv G3cae@t '(global-macro global-macro!)) (G2d4b@chi-expr (G2d45@chi-global-macro G3ca9@value G3c99@e) G3c9a@r G3c9b@mr) (if (memv G3cae@t '(local-macro local-macro!)) (G2d4b@chi-expr (G2d43@chi-local-macro G3ca9@value G3c99@e) G3c9a@r G3c9b@mr) (if (memv G3cae@t '(macro macro!)) (G2d4b@chi-expr (G2d41@chi-macro G3ca9@value G3c99@e) G3c9a@r G3c9b@mr) (if (memv G3cae@t '(constant)) ((lambda (G3cba@datum) (list 'quote G3cba@datum)) G3ca9@value) (if (memv G3cae@t '(set!)) (G2d4d@chi-set! G3c99@e G3c9a@r G3c9b@mr) (if (memv G3cae@t '(begin)) ((lambda (G3cbc@t) ((lambda (G3cbe@ls/false) (if G3cbe@ls/false (apply (lambda (G3cc0@x G3cc1@x*) (G2a97@G2a08@build-sequence '#f (G2d47@chi-expr* (cons G3cc0@x G3cc1@x*) G3c9a@r G3c9b@mr))) G3cbe@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3cbc@t))) (G2d27@syntax-dispatch G3cbc@t '(_ any . each-any)))) G3c99@e) (if (memv G3cae@t '(let-syntax letrec-syntax)) ((lambda (G3cc4@t) ((lambda (G3cc6@ls/false) (if (and G3cc6@ls/false (apply (lambda (G3cc8@xlhs* G3cc9@xrhs* G3cca@xbody G3ccb@xbody*) (if (not (G2b40@valid-bound-ids? G3cc8@xlhs*)) (G2e12@syntax-violation '#f '"invalid identifiers" G3c99@e) (void))) G3cc6@ls/false)) (apply (lambda (G3cd0@xlhs* G3cd1@xrhs* G3cd2@xbody G3cd3@xbody*) ((lambda (G3cd8@xlab*) ((lambda (G3cda@xrib) ((lambda (G3cdc@xb*) ((lambda () (G2a97@G2a08@build-sequence '#f (G2d47@chi-expr* (map (lambda (G3cde@x) (G2b22@add-subst G3cda@xrib G3cde@x)) (cons G3cd2@xbody G3cd3@xbody*)) (append (map cons G3cd8@xlab* G3cdc@xb*) G3c9a@r) (append (map cons G3cd8@xlab* G3cdc@xb*) G3c9b@mr)))))) (map (lambda (G3ce0@x) (G2b74@make-eval-transformer (G2d86@expand-transformer (if (eq? G3caa@type 'let-syntax) G3ce0@x (G2b22@add-subst G3cda@xrib G3ce0@x)) G3c9b@mr))) G3cd1@xrhs*))) (G2af1@make-full-rib G3cd0@xlhs* G3cd8@xlab*))) (map G2aba@gen-label G3cd0@xlhs*))) G3cc6@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3cc4@t))) (G2d27@syntax-dispatch G3cc4@t '(_ #(each (any any)) any . each-any)))) G3c99@e) (if (memv G3cae@t '(displaced-lexical)) (G2e12@syntax-violation '#f '"identifier out of context" G3c99@e) (if (memv G3cae@t '(syntax)) (G2e12@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3c99@e) (if (memv G3cae@t '(define define-syntax module import library)) (G2e12@syntax-violation '#f (string-append ((lambda (G3ce2@t) (if (memv G3ce2@t '(define)) '"a definition" (if (memv G3ce2@t '(define-syntax)) '"a define-syntax" (if (memv G3ce2@t '(module)) '"a module definition" (if (memv G3ce2@t '(library)) '"a library definition" (if (memv G3ce2@t '(import)) '"an import declaration" (if (memv G3ce2@t '(export)) '"an export declaration" '"a non-expression"))))))) G3caa@type) '" was found where an expression was expected") G3c99@e) (if (memv G3cae@t '(mutable)) (G2e12@syntax-violation '#f '"attempt to reference an unexportable variable" G3c99@e) (G2e12@syntax-violation '#f '"invalid expression" G3c99@e)))))))))))))))))) G3caa@type)) G3ca4@G3ca1 G3ca3@G3ca0 G3ca2@G3c9f))))) (set! G2d4d@chi-set! (lambda (G3ce4@e G3ce5@r G3ce6@mr) ((lambda (G3cea@t) ((lambda (G3cec@ls/false) (if (and G3cec@ls/false (apply (lambda (G3cee@x G3cef@v) (G2b36@id? G3cee@x)) G3cec@ls/false)) (apply (lambda (G3cf2@x G3cf3@v) (call-with-values (lambda () (G2b5e@syntax-type G3cf2@x G3ce5@r)) (lambda (G3cf9@G3cf6 G3cfa@G3cf7 G3cfb@G3cf8) ((lambda (G3cff@kwd G3d00@value G3d01@type) ((lambda (G3d05@t) (if (memv G3d05@t '(lexical)) (begin (G2cb7@set-lexical-mutable! G3d00@value '#t) (list 'set! (G2cb3@lexical-var G3d00@value) (G2d4b@chi-expr G3cf3@v G3ce5@r G3ce6@mr))) (if (memv G3d05@t '(core-prim)) (G2e12@syntax-violation '#f '"cannot modify imported core primitive" G3ce4@e) (if (memv G3d05@t '(global)) (G2e12@syntax-violation '#f '"attempt to modify imported binding" G3ce4@e) (if (memv G3d05@t '(global-macro!)) (G2d4b@chi-expr (G2d45@chi-global-macro G3d00@value G3ce4@e) G3ce5@r G3ce6@mr) (if (memv G3d05@t '(local-macro!)) (G2d4b@chi-expr (G2d43@chi-local-macro G3d00@value G3ce4@e) G3ce5@r G3ce6@mr) (if (memv G3d05@t '(mutable)) (G2e12@syntax-violation '#f '"attempt to assign to an unexportable variable" G3ce4@e) (G2e12@syntax-violation '#f '"invalid syntax" G3ce4@e)))))))) G3d01@type)) G3cfb@G3cf8 G3cfa@G3cf7 G3cf9@G3cf6)))) G3cec@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3cea@t))) (G2d27@syntax-dispatch G3cea@t '(_ any any)))) G3ce4@e))) (set! G2d4f@verify-formals (lambda (G3d07@fmls G3d08@stx) ((lambda (G3d0b@t) ((lambda (G3d0d@ls/false) (if G3d0d@ls/false (apply (lambda (G3d0f@x*) (if (not (G2b40@valid-bound-ids? G3d0f@x*)) (G2ce1@invalid-fmls-error G3d08@stx G3d07@fmls) (void))) G3d0d@ls/false) ((lambda (G3d11@t) ((lambda (G3d13@ls/false) (if G3d13@ls/false (apply (lambda (G3d15@x* G3d16@x) (if (not (G2b40@valid-bound-ids? (cons G3d16@x G3d15@x*))) (G2ce1@invalid-fmls-error G3d08@stx G3d07@fmls) (void))) G3d13@ls/false) ((lambda (G3d19@t) ((lambda (G3d1b@ls/false) (if G3d1b@ls/false (apply (lambda () (G2e12@syntax-violation '#f '"invalid syntax" G3d08@stx)) G3d1b@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3d19@t))) (G2d27@syntax-dispatch G3d19@t '_))) G3d11@t))) (G2d27@syntax-dispatch G3d11@t '#(each+ any () any)))) G3d0b@t))) (G2d27@syntax-dispatch G3d0b@t 'each-any))) G3d07@fmls))) (set! G2d51@chi-lambda-clause (lambda (G3d1d@stx G3d1e@fmls G3d1f@body* G3d20@r G3d21@mr) ((lambda (G3d27@t) ((lambda (G3d29@ls/false) (if G3d29@ls/false (apply (lambda (G3d2b@x*) (begin (G2d4f@verify-formals G3d1e@fmls G3d1d@stx) ((lambda (G3d2d@lex* G3d2e@lab*) (values G3d2d@lex* (G2d61@chi-internal (G2b22@add-subst (G2af1@make-full-rib G3d2b@x* G3d2e@lab*) G3d1f@body*) (G2cbb@add-lexicals G3d2e@lab* G3d2d@lex* G3d20@r) G3d21@mr))) (map G2ab6@gen-lexical G3d2b@x*) (map G2aba@gen-label G3d2b@x*)))) G3d29@ls/false) ((lambda (G3d31@t) ((lambda (G3d33@ls/false) (if G3d33@ls/false (apply (lambda (G3d35@x* G3d36@x) (begin (G2d4f@verify-formals G3d1e@fmls G3d1d@stx) ((lambda (G3d39@lex* G3d3a@lab* G3d3b@lex G3d3c@lab) (values (append G3d39@lex* G3d3b@lex) (G2d61@chi-internal (G2b22@add-subst (G2af1@make-full-rib (cons G3d36@x G3d35@x*) (cons G3d3c@lab G3d3a@lab*)) G3d1f@body*) (G2cbb@add-lexicals (cons G3d3c@lab G3d3a@lab*) (cons G3d3b@lex G3d39@lex*) G3d20@r) G3d21@mr))) (map G2ab6@gen-lexical G3d35@x*) (map G2aba@gen-label G3d35@x*) (G2ab6@gen-lexical G3d36@x) (G2aba@gen-label G3d36@x)))) G3d33@ls/false) ((lambda (G3d41@t) ((lambda (G3d43@ls/false) (if G3d43@ls/false (apply (lambda () (G2e12@syntax-violation '#f '"invalid syntax" G3d1e@fmls)) G3d43@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3d41@t))) (G2d27@syntax-dispatch G3d41@t '_))) G3d31@t))) (G2d27@syntax-dispatch G3d31@t '#(each+ any () any)))) G3d27@t))) (G2d27@syntax-dispatch G3d27@t 'each-any))) G3d1e@fmls))) (set! G2d53@chi-lambda-clause* (lambda (G3d45@stx G3d46@fmls* G3d47@body** G3d48@r G3d49@mr) (if (null? G3d46@fmls*) (values '() '()) (call-with-values (lambda () (G2d51@chi-lambda-clause G3d45@stx (car G3d46@fmls*) (car G3d47@body**) G3d48@r G3d49@mr)) (lambda (G3d51@G3d4f G3d52@G3d50) ((lambda (G3d55@b G3d56@a) (call-with-values (lambda () (G2d53@chi-lambda-clause* G3d45@stx (cdr G3d46@fmls*) (cdr G3d47@body**) G3d48@r G3d49@mr)) (lambda (G3d5b@G3d59 G3d5c@G3d5a) ((lambda (G3d5f@b* G3d60@a*) (values (cons G3d56@a G3d60@a*) (cons G3d55@b G3d5f@b*))) G3d5c@G3d5a G3d5b@G3d59)))) G3d52@G3d50 G3d51@G3d4f)))))) (set! G2d55@chi-defun (lambda (G3d63@x G3d64@r G3d65@mr) ((lambda (G3d69@fmls G3d6a@body*) (call-with-values (lambda () (G2d51@chi-lambda-clause G3d69@fmls G3d69@fmls G3d6a@body* G3d64@r G3d65@mr)) (lambda (G3d6f@G3d6d G3d70@G3d6e) ((lambda (G3d73@body G3d74@fmls) (G2a94@G29d6@build-lambda '#f G3d74@fmls G3d73@body)) G3d70@G3d6e G3d6f@G3d6d)))) (car G3d63@x) (cdr G3d63@x)))) (set! G2d57@chi-rhs (lambda (G3d77@rhs G3d78@r G3d79@mr) ((lambda (G3d7d@t) (if (memv G3d7d@t '(defun)) (G2d55@chi-defun (cdr G3d77@rhs) G3d78@r G3d79@mr) (if (memv G3d7d@t '(expr)) ((lambda (G3d7f@expr) (G2d4b@chi-expr G3d7f@expr G3d78@r G3d79@mr)) (cdr G3d77@rhs)) (if (memv G3d7d@t '(top-expr)) ((lambda (G3d81@expr) (G2a97@G2a08@build-sequence '#f (list (G2d4b@chi-expr G3d81@expr G3d78@r G3d79@mr) (G2a98@G2a0a@build-void)))) (cdr G3d77@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3d77@rhs))))) (car G3d77@rhs)))) (set! G2d59@expand-interaction-rhs*/init* (lambda (G3d83@lhs* G3d84@rhs* G3d85@init* G3d86@r G3d87@mr) ((letrec ((G3d8d@f (lambda (G3d8f@lhs* G3d90@rhs*) (if (null? G3d8f@lhs*) (map (lambda (G3d93@x) (G2d4b@chi-expr G3d93@x G3d86@r G3d87@mr)) G3d85@init*) ((lambda (G3d95@lhs G3d96@rhs) ((lambda (G3d99@t) (if (memv G3d99@t '(defun)) ((lambda (G3d9b@rhs) (cons (list 'set! G3d95@lhs G3d9b@rhs) (G3d8d@f (cdr G3d8f@lhs*) (cdr G3d90@rhs*)))) (G2d55@chi-defun (cdr G3d96@rhs) G3d86@r G3d87@mr)) (if (memv G3d99@t '(expr)) ((lambda (G3d9d@rhs) (cons (list 'set! G3d95@lhs G3d9d@rhs) (G3d8d@f (cdr G3d8f@lhs*) (cdr G3d90@rhs*)))) (G2d4b@chi-expr (cdr G3d96@rhs) G3d86@r G3d87@mr)) (if (memv G3d99@t '(top-expr)) ((lambda (G3d9f@e) (cons G3d9f@e (G3d8d@f (cdr G3d8f@lhs*) (cdr G3d90@rhs*)))) (G2d4b@chi-expr (cdr G3d96@rhs) G3d86@r G3d87@mr)) (error 'expand-interaction '"invallid" G3d96@rhs))))) (car G3d96@rhs))) (car G3d8f@lhs*) (car G3d90@rhs*)))))) G3d8d@f) G3d83@lhs* G3d84@rhs*))) (set! G2d5b@chi-rhs* (lambda (G3da1@rhs* G3da2@r G3da3@mr) ((letrec ((G3da7@f (lambda (G3da9@ls) (if (null? G3da9@ls) '() ((lambda (G3dab@a) (cons G3dab@a (G3da7@f (cdr G3da9@ls)))) (G2d57@chi-rhs (car G3da9@ls) G3da2@r G3da3@mr)))))) G3da7@f) G3da1@rhs*))) (set! G2d5d@find-bound=? (lambda (G3dad@x G3dae@lhs* G3daf@rhs*) (if (null? G3dae@lhs*) '#f (if (G2b3c@bound-id=? G3dad@x (car G3dae@lhs*)) (car G3daf@rhs*) (G2d5d@find-bound=? G3dad@x (cdr G3dae@lhs*) (cdr G3daf@rhs*)))))) (set! G2d5f@find-dups (lambda (G3db3@ls) ((letrec ((G3db5@f (lambda (G3db7@ls G3db8@dups) (if (null? G3db7@ls) G3db8@dups ((lambda (G3dbb@t) (if G3dbb@t ((lambda (G3dbd@x) (G3db5@f (cdr G3db7@ls) (cons (list (car G3db7@ls) G3dbd@x) G3db8@dups))) G3dbb@t) (G3db5@f (cdr G3db7@ls) G3db8@dups))) (G2d5d@find-bound=? (car G3db7@ls) (cdr G3db7@ls) (cdr G3db7@ls))))))) G3db5@f) G3db3@ls '()))) (set! G2d61@chi-internal (lambda (G3dbf@e* G3dc0@r G3dc1@mr) ((lambda (G3dc5@rib) (call-with-values (lambda () (G2d84@chi-body* (map (lambda (G3dcf@x) (G2b22@add-subst G3dc5@rib G3dcf@x)) (G2b34@syntax->list G3dbf@e*)) G3dc0@r G3dc1@mr '() '() '() '() '() G3dc5@rib '#f)) (lambda (G3dd1@G3dc7 G3dd2@G3dc8 G3dd3@G3dc9 G3dd4@G3dca G3dd5@G3dcb G3dd6@G3dcc G3dd7@G3dcd G3dd8@G3dce) ((lambda (G3de1@_exp* G3de2@kwd* G3de3@mod** G3de4@rhs* G3de5@lex* G3de6@mr G3de7@r G3de8@e*) (begin (if (null? G3de8@e*) (G2e12@syntax-violation '#f '"no expression in body" G3de8@e*) (void)) ((lambda (G3df1@init*) ((lambda (G3df3@rhs*) ((lambda () (G2a9a@G2a0e@build-letrec* '#f (reverse G3de5@lex*) (reverse G3df3@rhs*) (G2a97@G2a08@build-sequence '#f G3df1@init*))))) (G2d5b@chi-rhs* G3de4@rhs* G3de7@r G3de6@mr))) (G2d47@chi-expr* (append (apply append (reverse G3de3@mod**)) G3de8@e*) G3de7@r G3de6@mr)))) G3dd8@G3dce G3dd7@G3dcd G3dd6@G3dcc G3dd5@G3dcb G3dd4@G3dca G3dd3@G3dc9 G3dd2@G3dc8 G3dd1@G3dc7)))) (G2ae5@make-empty-rib)))) (set! G2d63@parse-module (lambda (G3df5@e) ((lambda (G3df7@t) ((lambda (G3df9@ls/false) (if G3df9@ls/false (apply (lambda (G3dfb@export* G3dfc@b*) (begin (if (not (for-all G2b36@id? G3dfb@export*)) (G2e12@syntax-violation '#f '"module exports must be identifiers" G3df5@e) (void)) (values '#f (list->vector G3dfb@export*) G3dfc@b*))) G3df9@ls/false) ((lambda (G3dff@t) ((lambda (G3e01@ls/false) (if G3e01@ls/false (apply (lambda (G3e03@name G3e04@export* G3e05@b*) (begin (if (not (G2b36@id? G3e03@name)) (G2e12@syntax-violation '#f '"module name must be an identifier" G3df5@e) (void)) (if (not (for-all G2b36@id? G3e04@export*)) (G2e12@syntax-violation '#f '"module exports must be identifiers" G3df5@e) (void)) (values G3e03@name (list->vector G3e04@export*) G3e05@b*))) G3e01@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3dff@t))) (G2d27@syntax-dispatch G3dff@t '(_ any each-any . each-any)))) G3df7@t))) (G2d27@syntax-dispatch G3df7@t '(_ each-any . each-any)))) G3df5@e))) (set! G2d69@G2d64 (make-record-type-descriptor 'module-interface '#f 'G2d67 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2d6b@G2d66 '#f) (set! G2d6d@G2d65 (make-record-constructor-descriptor G2d69@G2d64 '#f G2d6b@G2d66)) (set! G2d70@module-interface? (record-predicate G2d69@G2d64)) (set! G2d72@make-module-interface (record-constructor G2d6d@G2d65)) (set! G2d74@module-interface-first-mark (record-accessor G2d69@G2d64 '0)) (set! G2d76@module-interface-exp-id-vec (record-accessor G2d69@G2d64 '1)) (set! G2d78@module-interface-exp-lab-vec (record-accessor G2d69@G2d64 '2)) (set! G2d7a@set-module-interface-first-mark! (record-mutator G2d69@G2d64 '0)) (set! G2d7c@set-module-interface-exp-id-vec! (record-mutator G2d69@G2d64 '1)) (set! G2d7e@set-module-interface-exp-lab-vec! (record-mutator G2d69@G2d64 '2)) (set! G2d80@module-interface-exp-id* (lambda (G3e09@iface G3e0a@id) ((lambda (G3e0e@diff-marks) (begin (set! G3e0e@diff-marks (lambda (G3e15@ls G3e16@x) (begin (if (null? G3e15@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G3e19@a) (if (eq? G3e19@a G3e16@x) '() (cons G3e19@a (G3e0e@diff-marks (cdr G3e15@ls) G3e16@x)))) (car G3e15@ls))))) ((lambda (G3e0f@diff G3e10@id-vec) (if (null? G3e0f@diff) G3e10@id-vec (vector-map (lambda (G3e13@x) (G2b00@make-stx (G2b02@stx-expr G3e13@x) (append G3e0f@diff (G2b04@stx-mark* G3e13@x)) '() '())) G3e10@id-vec))) (G3e0e@diff-marks (G2b04@stx-mark* G3e0a@id) (G2d74@module-interface-first-mark G3e09@iface)) (G2d76@module-interface-exp-id-vec G3e09@iface)))) '#f))) (set! G2d82@chi-internal-module (lambda (G3e1b@e G3e1c@r G3e1d@mr G3e1e@lex* G3e1f@rhs* G3e20@mod** G3e21@kwd*) (call-with-values (lambda () (G2d63@parse-module G3e1b@e)) (lambda (G3e2c@G3e29 G3e2d@G3e2a G3e2e@G3e2b) ((lambda (G3e32@e* G3e33@exp-id* G3e34@name) ((lambda (G3e38@rib) ((lambda (G3e3a@e*) ((lambda () (call-with-values (lambda () (G2d84@chi-body* G3e3a@e* G3e1c@r G3e1d@mr G3e1e@lex* G3e1f@rhs* G3e20@mod** G3e21@kwd* '() G3e38@rib '#f)) (lambda (G3e44@G3e3c G3e45@G3e3d G3e46@G3e3e G3e47@G3e3f G3e48@G3e40 G3e49@G3e41 G3e4a@G3e42 G3e4b@G3e43) ((lambda (G3e54@_exp* G3e55@kwd* G3e56@mod** G3e57@rhs* G3e58@lex* G3e59@mr G3e5a@r G3e5b@e*) ((lambda (G3e64@exp-lab* G3e65@mod**) (if (not G3e34@name) (values G3e58@lex* G3e57@rhs* G3e33@exp-id* G3e64@exp-lab* G3e5a@r G3e59@mr G3e65@mod** G3e55@kwd*) ((lambda (G3e68@lab G3e69@iface) (values G3e58@lex* G3e57@rhs* (vector G3e34@name) (vector G3e68@lab) (cons (cons G3e68@lab (cons '$module G3e69@iface)) G3e5a@r) (cons (cons G3e68@lab (cons '$module G3e69@iface)) G3e59@mr) G3e65@mod** G3e55@kwd*)) (G2aba@gen-label 'module) (G2d72@make-module-interface (car (G2b04@stx-mark* G3e34@name)) (vector-map (lambda (G3e6c@x) (G2b00@make-stx (G2b02@stx-expr G3e6c@x) (G2b04@stx-mark* G3e6c@x) '() '())) G3e33@exp-id*) G3e64@exp-lab*)))) (vector-map (lambda (G3e6e@x) (or (G2b50@id->label (G2b00@make-stx (G2b38@id->sym G3e6e@x) (G2b04@stx-mark* G3e6e@x) (list G3e38@rib) '())) (G2e12@syntax-violation '#f '"cannot find module export" G3e6e@x))) G3e33@exp-id*) (cons G3e5b@e* G3e56@mod**))) G3e4b@G3e43 G3e4a@G3e42 G3e49@G3e41 G3e48@G3e40 G3e47@G3e3f G3e46@G3e3e G3e45@G3e3d G3e44@G3e3c)))))) (map (lambda (G3e70@x) (G2b22@add-subst G3e38@rib G3e70@x)) (G2b34@syntax->list G3e32@e*)))) (G2ae5@make-empty-rib))) G3e2e@G3e2b G3e2d@G3e2a G3e2c@G3e29))))) (set! G2d84@chi-body* (lambda (G3e72@e* G3e73@r G3e74@mr G3e75@lex* G3e76@rhs* G3e77@mod** G3e78@kwd* G3e79@exp* G3e7a@rib G3e7b@top?) (if (null? G3e72@e*) (values G3e72@e* G3e73@r G3e74@mr G3e75@lex* G3e76@rhs* G3e77@mod** G3e78@kwd* G3e79@exp*) ((lambda (G3e86@e) (call-with-values (lambda () (G2b5e@syntax-type G3e86@e G3e73@r)) (lambda (G3e8b@G3e88 G3e8c@G3e89 G3e8d@G3e8a) ((lambda (G3e91@kwd G3e92@value G3e93@type) ((lambda (G3e97@kwd*) ((lambda (G3e99@t) (if (memv G3e99@t '(define)) (call-with-values (lambda () (G2cab@parse-define G3e86@e)) (lambda (G3e9d@G3e9b G3e9e@G3e9c) ((lambda (G3ea1@rhs G3ea2@id) (begin (if (G2b44@bound-id-member? G3ea2@id G3e97@kwd*) (G2e12@syntax-violation '#f '"cannot redefine keyword" G3e86@e) (void)) (call-with-values (lambda () (G2abe@gen-define-label+loc G3ea2@id G3e7a@rib)) (lambda (G3ea7@G3ea5 G3ea8@G3ea6) ((lambda (G3eab@lex G3eac@lab) (begin (G2ae7@extend-rib! G3e7a@rib G3ea2@id G3eac@lab) (G2d84@chi-body* (cdr G3e72@e*) (G2cb9@add-lexical G3eac@lab G3eab@lex G3e73@r) G3e74@mr (cons G3eab@lex G3e75@lex*) (cons G3ea1@rhs G3e76@rhs*) G3e77@mod** G3e97@kwd* G3e79@exp* G3e7a@rib G3e7b@top?))) G3ea8@G3ea6 G3ea7@G3ea5))))) G3e9e@G3e9c G3e9d@G3e9b))) (if (memv G3e99@t '(define-syntax)) (call-with-values (lambda () (G2cad@parse-define-syntax G3e86@e)) (lambda (G3eb1@G3eaf G3eb2@G3eb0) ((lambda (G3eb5@rhs G3eb6@id) (begin (if (G2b44@bound-id-member? G3eb6@id G3e97@kwd*) (G2e12@syntax-violation '#f '"cannot redefine keyword" G3e86@e) (void)) ((lambda (G3eb9@lab G3eba@expanded-rhs) (begin (G2ae7@extend-rib! G3e7a@rib G3eb6@id G3eb9@lab) ((lambda (G3ebd@b) (G2d84@chi-body* (cdr G3e72@e*) (cons (cons G3eb9@lab G3ebd@b) G3e73@r) (cons (cons G3eb9@lab G3ebd@b) G3e74@mr) G3e75@lex* G3e76@rhs* G3e77@mod** G3e97@kwd* G3e79@exp* G3e7a@rib G3e7b@top?)) (G2b74@make-eval-transformer G3eba@expanded-rhs)))) (G2ac0@gen-define-label G3eb6@id G3e7a@rib) (G2d86@expand-transformer G3eb5@rhs G3e74@mr)))) G3eb2@G3eb0 G3eb1@G3eaf))) (if (memv G3e99@t '(let-syntax letrec-syntax)) ((lambda (G3ebf@t) ((lambda (G3ec1@ls/false) (if (and G3ec1@ls/false (apply (lambda (G3ec3@xlhs* G3ec4@xrhs* G3ec5@xbody*) (if (not (G2b40@valid-bound-ids? G3ec3@xlhs*)) (G2e12@syntax-violation '#f '"invalid identifiers" G3e86@e) (void))) G3ec1@ls/false)) (apply (lambda (G3ec9@xlhs* G3eca@xrhs* G3ecb@xbody*) ((lambda (G3ecf@xlab*) ((lambda (G3ed1@xrib) ((lambda (G3ed3@xb*) ((lambda () (G2d84@chi-body* (append (map (lambda (G3ed5@x) (G2b22@add-subst G3ed1@xrib G3ed5@x)) G3ecb@xbody*) (cdr G3e72@e*)) (append (map cons G3ecf@xlab* G3ed3@xb*) G3e73@r) (append (map cons G3ecf@xlab* G3ed3@xb*) G3e74@mr) G3e75@lex* G3e76@rhs* G3e77@mod** G3e97@kwd* G3e79@exp* G3e7a@rib G3e7b@top?)))) (map (lambda (G3ed7@x) (G2b74@make-eval-transformer (G2d86@expand-transformer (if (eq? G3e93@type 'let-syntax) G3ed7@x (G2b22@add-subst G3ed1@xrib G3ed7@x)) G3e74@mr))) G3eca@xrhs*))) (G2af1@make-full-rib G3ec9@xlhs* G3ecf@xlab*))) (map G2aba@gen-label G3ec9@xlhs*))) G3ec1@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3ebf@t))) (G2d27@syntax-dispatch G3ebf@t '(_ #(each (any any)) . each-any)))) G3e86@e) (if (memv G3e99@t '(begin)) ((lambda (G3ed9@t) ((lambda (G3edb@ls/false) (if G3edb@ls/false (apply (lambda (G3edd@x*) (G2d84@chi-body* (append G3edd@x* (cdr G3e72@e*)) G3e73@r G3e74@mr G3e75@lex* G3e76@rhs* G3e77@mod** G3e97@kwd* G3e79@exp* G3e7a@rib G3e7b@top?)) G3edb@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3ed9@t))) (G2d27@syntax-dispatch G3ed9@t '(_ . each-any)))) G3e86@e) (if (memv G3e99@t '(global-macro global-macro!)) (G2d84@chi-body* (cons (G2b22@add-subst G3e7a@rib (G2d45@chi-global-macro G3e92@value G3e86@e)) (cdr G3e72@e*)) G3e73@r G3e74@mr G3e75@lex* G3e76@rhs* G3e77@mod** G3e97@kwd* G3e79@exp* G3e7a@rib G3e7b@top?) (if (memv G3e99@t '(local-macro local-macro!)) (G2d84@chi-body* (cons (G2b22@add-subst G3e7a@rib (G2d43@chi-local-macro G3e92@value G3e86@e)) (cdr G3e72@e*)) G3e73@r G3e74@mr G3e75@lex* G3e76@rhs* G3e77@mod** G3e97@kwd* G3e79@exp* G3e7a@rib G3e7b@top?) (if (memv G3e99@t '(macro macro!)) (G2d84@chi-body* (cons (G2b22@add-subst G3e7a@rib (G2d41@chi-macro G3e92@value G3e86@e)) (cdr G3e72@e*)) G3e73@r G3e74@mr G3e75@lex* G3e76@rhs* G3e77@mod** G3e97@kwd* G3e79@exp* G3e7a@rib G3e7b@top?) (if (memv G3e99@t '(module)) (call-with-values (lambda () (G2d82@chi-internal-module G3e86@e G3e73@r G3e74@mr G3e75@lex* G3e76@rhs* G3e77@mod** G3e97@kwd*)) (lambda (G3ee7@G3edf G3ee8@G3ee0 G3ee9@G3ee1 G3eea@G3ee2 G3eeb@G3ee3 G3eec@G3ee4 G3eed@G3ee5 G3eee@G3ee6) ((lambda (G3ef7@kwd* G3ef8@mod** G3ef9@mr G3efa@r G3efb@m-exp-lab* G3efc@m-exp-id* G3efd@rhs* G3efe@lex*) (begin (vector-for-each (lambda (G3f07@id G3f08@lab) (G2ae7@extend-rib! G3e7a@rib G3f07@id G3f08@lab)) G3efc@m-exp-id* G3efb@m-exp-lab*) (G2d84@chi-body* (cdr G3e72@e*) G3efa@r G3ef9@mr G3efe@lex* G3efd@rhs* G3ef8@mod** G3ef7@kwd* G3e79@exp* G3e7a@rib G3e7b@top?))) G3eee@G3ee6 G3eed@G3ee5 G3eec@G3ee4 G3eeb@G3ee3 G3eea@G3ee2 G3ee9@G3ee1 G3ee8@G3ee0 G3ee7@G3edf))) (if (memv G3e99@t '(library)) (begin (G2df4@library-expander (G2b4c@stx->datum G3e86@e)) (G2d84@chi-body* (cdr G3e72@e*) G3e73@r G3e74@mr G3e75@lex* G3e76@rhs* G3e77@mod** G3e97@kwd* G3e79@exp* G3e7a@rib G3e7b@top?)) (if (memv G3e99@t '(export)) ((lambda (G3f0b@t) ((lambda (G3f0d@ls/false) (if G3f0d@ls/false (apply (lambda (G3f0f@exp-decl*) (G2d84@chi-body* (cdr G3e72@e*) G3e73@r G3e74@mr G3e75@lex* G3e76@rhs* G3e77@mod** G3e97@kwd* (append G3f0f@exp-decl* G3e79@exp*) G3e7a@rib G3e7b@top?)) G3f0d@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3f0b@t))) (G2d27@syntax-dispatch G3f0b@t '(_ . each-any)))) G3e86@e) (if (memv G3e99@t '(import)) ((lambda () ((lambda (G3f12@module-import? G3f14@module-import G3f16@library-import) (begin (set! G3f12@module-import? (lambda (G3f5e@e) ((lambda (G3f60@t) ((lambda (G3f62@ls/false) (if (and G3f62@ls/false (apply (lambda (G3f64@id) (G2b36@id? G3f64@id)) G3f62@ls/false)) (apply (lambda (G3f66@id) '#t) G3f62@ls/false) ((lambda (G3f68@t) ((lambda (G3f6a@ls/false) (if G3f6a@ls/false (apply (lambda (G3f6c@imp*) '#f) G3f6a@ls/false) ((lambda (G3f6e@t) ((lambda (G3f70@ls/false) (if G3f70@ls/false (apply (lambda () (G2e12@syntax-violation '#f '"malformed import form" G3f5e@e)) G3f70@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3f6e@t))) (G2d27@syntax-dispatch G3f6e@t '_))) G3f68@t))) (G2d27@syntax-dispatch G3f68@t '(_ . each-any)))) G3f60@t))) (G2d27@syntax-dispatch G3f60@t '(_ any)))) G3f5e@e))) (set! G3f14@module-import (lambda (G3f3f@e G3f40@r) ((lambda (G3f43@t) ((lambda (G3f45@ls/false) (if (and G3f45@ls/false (apply (lambda (G3f47@id) (G2b36@id? G3f47@id)) G3f45@ls/false)) (apply (lambda (G3f49@id) (call-with-values (lambda () (G2b5e@syntax-type G3f49@id G3f40@r)) (lambda (G3f4e@G3f4b G3f4f@G3f4c G3f50@G3f4d) ((lambda (G3f54@kwd G3f55@value G3f56@type) ((lambda (G3f5a@t) (if (memv G3f5a@t '($module)) ((lambda (G3f5c@iface) (values (G2d80@module-interface-exp-id* G3f5c@iface G3f49@id) (G2d78@module-interface-exp-lab-vec G3f5c@iface))) G3f55@value) (G2e12@syntax-violation '#f '"invalid import" G3f3f@e))) G3f56@type)) G3f50@G3f4d G3f4f@G3f4c G3f4e@G3f4b)))) G3f45@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3f43@t))) (G2d27@syntax-dispatch G3f43@t '(_ any)))) G3f3f@e))) (set! G3f16@library-import (lambda (G3f25@e) ((lambda (G3f27@t) ((lambda (G3f29@ls/false) (if G3f29@ls/false (apply (lambda (G3f2b@ctxt G3f2c@imp*) (call-with-values (lambda () (G2d8e@parse-import-spec* (G2e18@syntax->datum G3f2c@imp*))) (lambda (G3f31@G3f2f G3f32@G3f30) ((lambda (G3f35@subst-labels G3f36@subst-names) (values (vector-map (lambda (G3f39@name) (G2b14@datum->stx G3f2b@ctxt G3f39@name)) G3f36@subst-names) G3f35@subst-labels)) G3f32@G3f30 G3f31@G3f2f)))) G3f29@ls/false) ((lambda (G3f3b@t) ((lambda (G3f3d@ls/false) (if G3f3d@ls/false (apply (lambda () (G2e12@syntax-violation '#f '"invalid import form" G3f25@e)) G3f3d@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3f3b@t))) (G2d27@syntax-dispatch G3f3b@t '_))) G3f27@t))) (G2d27@syntax-dispatch G3f27@t '(any . each-any)))) G3f25@e))) (begin (call-with-values (lambda () (if (G3f12@module-import? G3e86@e) (G3f14@module-import G3e86@e G3e73@r) (G3f16@library-import G3e86@e))) (lambda (G3f19@G3f17 G3f1a@G3f18) ((lambda (G3f1d@lab* G3f1e@id*) (vector-for-each (lambda (G3f21@id G3f22@lab) (G2ae7@extend-rib! G3e7a@rib G3f21@id G3f22@lab)) G3f1e@id* G3f1d@lab*)) G3f1a@G3f18 G3f19@G3f17))) (G2d84@chi-body* (cdr G3e72@e*) G3e73@r G3e74@mr G3e75@lex* G3e76@rhs* G3e77@mod** G3e97@kwd* G3e79@exp* G3e7a@rib G3e7b@top?)))) '#f '#f '#f))) (if G3e7b@top? (G2d84@chi-body* (cdr G3e72@e*) G3e73@r G3e74@mr (cons (G2ab6@gen-lexical 'dummy) G3e75@lex*) (cons (cons 'top-expr G3e86@e) G3e76@rhs*) G3e77@mod** G3e97@kwd* G3e79@exp* G3e7a@rib G3e7b@top?) (values G3e72@e* G3e73@r G3e74@mr G3e75@lex* G3e76@rhs* G3e77@mod** G3e97@kwd* G3e79@exp*)))))))))))))) G3e93@type)) (if (G2b36@id? G3e91@kwd) (cons G3e91@kwd G3e78@kwd*) G3e78@kwd*))) G3e8d@G3e8a G3e8c@G3e89 G3e8b@G3e88)))) (car G3e72@e*))))) (set! G2d86@expand-transformer (lambda (G3f72@expr G3f73@r) ((lambda (G3f76@rtc) ((lambda (G3f78@expanded-rhs) (begin (for-each ((lambda (G3f7a@mark-visit) (lambda (G3f7c@x) (begin (G295e@G2805@invoke-library G3f7c@x) (G3f7a@mark-visit G3f7c@x)))) (G2d96@vis-collector)) (G3f76@rtc)) G3f78@expanded-rhs)) ((lambda (G3f82@G3f7e G3f83@G3f7f G3f84@G3f80 G3f85@G3f81) ((lambda (G3f8a@swap) (dynamic-wind G3f8a@swap (lambda () (G2d4b@chi-expr G3f72@expr G3f73@r G3f73@r)) G3f8a@swap)) (lambda () (begin ((lambda (G3f8c@t) (begin (G3f82@G3f7e G3f84@G3f80) (set! G3f84@G3f80 G3f8c@t))) (G3f82@G3f7e)) ((lambda (G3f8e@t) (begin (G3f83@G3f7f G3f85@G3f81) (set! G3f85@G3f81 G3f8e@t))) (G3f83@G3f7f)))))) G2d94@inv-collector G2d96@vis-collector G3f76@rtc (lambda (G3f90@x) (values))))) (G2d92@make-collector)))) (set! G2d88@parse-exports (lambda (G3f92@exp*) ((letrec ((G3f94@f (lambda (G3f96@exp* G3f97@int* G3f98@ext*) (if (null? G3f96@exp*) (begin (if (not (G2b40@valid-bound-ids? G3f98@ext*)) (G2e12@syntax-violation 'export '"invalid exports" (G2d5f@find-dups G3f98@ext*)) (void)) (values (map G2e18@syntax->datum G3f98@ext*) G3f97@int*)) ((lambda (G3f9c@t) ((lambda (G3f9e@ls/false) (if G3f9e@ls/false (apply (lambda (G3fa0@rename G3fa1@i* G3fa2@e*) (begin (if (not (and (eq? (G2e18@syntax->datum G3fa0@rename) 'rename) (for-all G2b36@id? G3fa1@i*) (for-all G2b36@id? G3fa2@e*))) (G2e12@syntax-violation 'export '"invalid export specifier" (car G3f96@exp*)) (void)) (G3f94@f (cdr G3f96@exp*) (append G3fa1@i* G3f97@int*) (append G3fa2@e* G3f98@ext*)))) G3f9e@ls/false) ((lambda (G3fa6@t) ((lambda (G3fa8@ls/false) (if G3fa8@ls/false (apply (lambda (G3faa@ie) (begin (if (not (G2b36@id? G3faa@ie)) (G2e12@syntax-violation 'export '"invalid export" G3faa@ie) (void)) (G3f94@f (cdr G3f96@exp*) (cons G3faa@ie G3f97@int*) (cons G3faa@ie G3f98@ext*)))) G3fa8@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3fa6@t))) (G2d27@syntax-dispatch G3fa6@t 'any))) G3f9c@t))) (G2d27@syntax-dispatch G3f9c@t '(any . #(each (any any)))))) (car G3f96@exp*)))))) G3f94@f) G3f92@exp* '() '()))) (set! G2d8a@parse-library-name (lambda (G3fac@spec) ((lambda (G3faf@parse) (begin (set! G3faf@parse (lambda (G3fba@x) ((lambda (G3fbc@t) ((lambda (G3fbe@ls/false) (if (and G3fbe@ls/false (apply (lambda (G3fc0@v*) (for-all (lambda (G3fc2@x) ((lambda (G3fc4@x) (and (integer? G3fc4@x) (exact? G3fc4@x))) (G2e18@syntax->datum G3fc2@x))) G3fc0@v*)) G3fbe@ls/false)) (apply (lambda (G3fc6@v*) (values '() (map G2e18@syntax->datum G3fc6@v*))) G3fbe@ls/false) ((lambda (G3fc8@t) ((lambda (G3fca@ls/false) (if (and G3fca@ls/false (apply (lambda (G3fcc@x G3fcd@rest) (symbol? (G2e18@syntax->datum G3fcc@x))) G3fca@ls/false)) (apply (lambda (G3fd0@x G3fd1@rest) (call-with-values (lambda () (G3faf@parse G3fd1@rest)) (lambda (G3fd6@G3fd4 G3fd7@G3fd5) ((lambda (G3fda@v* G3fdb@x*) (values (cons (G2e18@syntax->datum G3fd0@x) G3fdb@x*) G3fda@v*)) G3fd7@G3fd5 G3fd6@G3fd4)))) G3fca@ls/false) ((lambda (G3fde@t) ((lambda (G3fe0@ls/false) (if G3fe0@ls/false (apply (lambda () (values '() '())) G3fe0@ls/false) ((lambda (G3fe2@t) ((lambda (G3fe4@ls/false) (if G3fe4@ls/false (apply (lambda () (G2e12@syntax-violation '#f '"invalid library name" G3fac@spec)) G3fe4@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G3fe2@t))) (G2d27@syntax-dispatch G3fe2@t '_))) G3fde@t))) (G2d27@syntax-dispatch G3fde@t '()))) G3fc8@t))) (G2d27@syntax-dispatch G3fc8@t '(any . any)))) G3fbc@t))) (G2d27@syntax-dispatch G3fbc@t '(each-any)))) G3fba@x))) (call-with-values (lambda () (G3faf@parse G3fac@spec)) (lambda (G3fb2@G3fb0 G3fb3@G3fb1) ((lambda (G3fb6@ver* G3fb7@name*) (begin (if (null? G3fb7@name*) (G2e12@syntax-violation '#f '"empty library name" G3fac@spec) (void)) (values G3fb7@name* G3fb6@ver*))) G3fb3@G3fb1 G3fb2@G3fb0))))) '#f))) (set! G2d8c@parse-library (lambda (G3fe6@e) ((lambda (G3fe8@t) ((lambda (G3fea@ls/false) (if (and G3fea@ls/false (apply (lambda (G3fec@library G3fed@name* G3fee@export G3fef@exp* G3ff0@import G3ff1@imp* G3ff2@b*) (and (eq? (G2e18@syntax->datum G3fee@export) 'export) (eq? (G2e18@syntax->datum G3ff0@import) 'import) (eq? (G2e18@syntax->datum G3fec@library) 'library))) G3fea@ls/false)) (apply (lambda (G3ffa@library G3ffb@name* G3ffc@export G3ffd@exp* G3ffe@import G3fff@imp* G4000@b*) (values G3ffb@name* G3ffd@exp* G3fff@imp* G4000@b*)) G3fea@ls/false) ((lambda (G4008@t) ((lambda (G400a@ls/false) (if G400a@ls/false (apply (lambda () (G2e12@syntax-violation '#f '"malformed library" G3fe6@e)) G400a@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G4008@t))) (G2d27@syntax-dispatch G4008@t '_))) G3fe8@t))) (G2d27@syntax-dispatch G3fe8@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G3fe6@e))) (set! G2d8e@parse-import-spec* ((lambda () ((lambda (G400d@idsyn? G400f@dup-error G4011@merge-substs G4013@exclude* G4015@find* G4017@rem* G4019@remove-dups G401b@parse-library-name G401d@import-library G401f@get-import G4021@add-imports!) (begin (set! G400d@idsyn? (lambda (G420c@x) (symbol? (G2e18@syntax->datum G420c@x)))) (set! G400f@dup-error (lambda (G420a@name) (G2e12@syntax-violation 'import '"two imports with different bindings" G420a@name))) (set! G4011@merge-substs (lambda (G41f8@s G41f9@subst) ((lambda (G41fd@insert-to-subst) (begin (set! G41fd@insert-to-subst (lambda (G41fe@a G41ff@subst) ((lambda (G4202@name G4203@label) ((lambda (G4206@t) (if G4206@t ((lambda (G4208@x) (if (eq? (cdr G4208@x) G4203@label) G41ff@subst (G400f@dup-error G4202@name))) G4206@t) (cons G41fe@a G41ff@subst))) (assq G4202@name G41ff@subst))) (car G41fe@a) (cdr G41fe@a)))) (if (null? G41f8@s) G41f9@subst (G41fd@insert-to-subst (car G41f8@s) (G4011@merge-substs (cdr G41f8@s) G41f9@subst))))) '#f))) (set! G4013@exclude* (lambda (G41ce@sym* G41cf@subst) ((lambda (G41d3@exclude) (begin (set! G41d3@exclude (lambda (G41e8@sym G41e9@subst) (if (null? G41e9@subst) (G2e12@syntax-violation 'import '"cannot rename unbound identifier" G41e8@sym) (if (eq? G41e8@sym (caar G41e9@subst)) (values (cdar G41e9@subst) (cdr G41e9@subst)) ((lambda (G41ec@a) (call-with-values (lambda () (G41d3@exclude G41e8@sym (cdr G41e9@subst))) (lambda (G41f0@G41ee G41f1@G41ef) ((lambda (G41f4@subst G41f5@old) (values G41f5@old (cons G41ec@a G41f4@subst))) G41f1@G41ef G41f0@G41ee)))) (car G41e9@subst)))))) (if (null? G41ce@sym*) (values '() G41cf@subst) (call-with-values (lambda () (G41d3@exclude (car G41ce@sym*) G41cf@subst)) (lambda (G41d6@G41d4 G41d7@G41d5) ((lambda (G41da@subst G41db@old) (call-with-values (lambda () (G4013@exclude* (cdr G41ce@sym*) G41da@subst)) (lambda (G41e0@G41de G41e1@G41df) ((lambda (G41e4@subst G41e5@old*) (values (cons G41db@old G41e5@old*) G41e4@subst)) G41e1@G41df G41e0@G41de)))) G41d7@G41d5 G41d6@G41d4)))))) '#f))) (set! G4015@find* (lambda (G41c6@sym* G41c7@subst) (map (lambda (G41ca@x) ((lambda (G41cc@t) (if G41cc@t (cdr G41cc@t) (G2e12@syntax-violation 'import '"cannot find identifier" G41ca@x))) (assq G41ca@x G41c7@subst))) G41c6@sym*))) (set! G4017@rem* (lambda (G41be@sym* G41bf@subst) ((letrec ((G41c2@f (lambda (G41c4@subst) (if (null? G41c4@subst) '() (if (memq (caar G41c4@subst) G41be@sym*) (G41c2@f (cdr G41c4@subst)) (cons (car G41c4@subst) (G41c2@f (cdr G41c4@subst)))))))) G41c2@f) G41bf@subst))) (set! G4019@remove-dups (lambda (G41bc@ls) (if (null? G41bc@ls) '() (if (memq (car G41bc@ls) (cdr G41bc@ls)) (G4019@remove-dups (cdr G41bc@ls)) (cons (car G41bc@ls) (G4019@remove-dups (cdr G41bc@ls))))))) (set! G401b@parse-library-name (lambda (G40d6@spec) ((lambda (G40d9@subversion? G40db@subversion-pred G40dd@version-pred) (begin (set! G40d9@subversion? (lambda (G41b8@x) ((lambda (G41ba@x) (and (integer? G41ba@x) (exact? G41ba@x) (>= G41ba@x '0))) (G2e18@syntax->datum G41b8@x)))) (set! G40db@subversion-pred (lambda (G4158@x*) ((lambda (G415a@t) ((lambda (G415c@ls/false) (if (and G415c@ls/false (apply (lambda (G415e@n) (G40d9@subversion? G415e@n)) G415c@ls/false)) (apply (lambda (G4160@n) (lambda (G4162@x) (= G4162@x (G2e18@syntax->datum G4160@n)))) G415c@ls/false) ((lambda (G4164@t) ((lambda (G4166@ls/false) (if (and G4166@ls/false (apply (lambda (G4168@p? G4169@sub*) (eq? (G2e18@syntax->datum G4168@p?) 'and)) G4166@ls/false)) (apply (lambda (G416c@p? G416d@sub*) ((lambda (G4170@p*) (lambda (G4172@x) (for-all (lambda (G4174@p) (G4174@p G4172@x)) G4170@p*))) (map G40db@subversion-pred G416d@sub*))) G4166@ls/false) ((lambda (G4176@t) ((lambda (G4178@ls/false) (if (and G4178@ls/false (apply (lambda (G417a@p? G417b@sub*) (eq? (G2e18@syntax->datum G417a@p?) 'or)) G4178@ls/false)) (apply (lambda (G417e@p? G417f@sub*) ((lambda (G4182@p*) (lambda (G4184@x) (exists (lambda (G4186@p) (G4186@p G4184@x)) G4182@p*))) (map G40db@subversion-pred G417f@sub*))) G4178@ls/false) ((lambda (G4188@t) ((lambda (G418a@ls/false) (if (and G418a@ls/false (apply (lambda (G418c@p? G418d@sub) (eq? (G2e18@syntax->datum G418c@p?) 'not)) G418a@ls/false)) (apply (lambda (G4190@p? G4191@sub) ((lambda (G4194@p) (lambda (G4196@x) (not (G4194@p G4196@x)))) (G40db@subversion-pred G4191@sub))) G418a@ls/false) ((lambda (G4198@t) ((lambda (G419a@ls/false) (if (and G419a@ls/false (apply (lambda (G419c@p? G419d@n) (and (eq? (G2e18@syntax->datum G419c@p?) '<=) (G40d9@subversion? G419d@n))) G419a@ls/false)) (apply (lambda (G41a0@p? G41a1@n) (lambda (G41a4@x) (<= G41a4@x (G2e18@syntax->datum G41a1@n)))) G419a@ls/false) ((lambda (G41a6@t) ((lambda (G41a8@ls/false) (if (and G41a8@ls/false (apply (lambda (G41aa@p? G41ab@n) (and (eq? (G2e18@syntax->datum G41aa@p?) '>=) (G40d9@subversion? G41ab@n))) G41a8@ls/false)) (apply (lambda (G41ae@p? G41af@n) (lambda (G41b2@x) (>= G41b2@x (G2e18@syntax->datum G41af@n)))) G41a8@ls/false) ((lambda (G41b4@t) ((lambda (G41b6@ls/false) (if G41b6@ls/false (apply (lambda () (G2e12@syntax-violation 'import '"invalid sub-version spec" G40d6@spec G4158@x*)) G41b6@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G41b4@t))) (G2d27@syntax-dispatch G41b4@t '_))) G41a6@t))) (G2d27@syntax-dispatch G41a6@t '(any any)))) G4198@t))) (G2d27@syntax-dispatch G4198@t '(any any)))) G4188@t))) (G2d27@syntax-dispatch G4188@t '(any any)))) G4176@t))) (G2d27@syntax-dispatch G4176@t '(any . each-any)))) G4164@t))) (G2d27@syntax-dispatch G4164@t '(any . each-any)))) G415a@t))) (G2d27@syntax-dispatch G415a@t 'any))) G4158@x*))) (set! G40dd@version-pred (lambda (G4108@x*) ((lambda (G410a@t) ((lambda (G410c@ls/false) (if G410c@ls/false (apply (lambda () (lambda (G410e@x) '#t)) G410c@ls/false) ((lambda (G4110@t) ((lambda (G4112@ls/false) (if (and G4112@ls/false (apply (lambda (G4114@c G4115@ver*) (eq? (G2e18@syntax->datum G4114@c) 'and)) G4112@ls/false)) (apply (lambda (G4118@c G4119@ver*) ((lambda (G411c@p*) (lambda (G411e@x) (for-all (lambda (G4120@p) (G4120@p G411e@x)) G411c@p*))) (map G40dd@version-pred G4119@ver*))) G4112@ls/false) ((lambda (G4122@t) ((lambda (G4124@ls/false) (if (and G4124@ls/false (apply (lambda (G4126@c G4127@ver*) (eq? (G2e18@syntax->datum G4126@c) 'or)) G4124@ls/false)) (apply (lambda (G412a@c G412b@ver*) ((lambda (G412e@p*) (lambda (G4130@x) (exists (lambda (G4132@p) (G4132@p G4130@x)) G412e@p*))) (map G40dd@version-pred G412b@ver*))) G4124@ls/false) ((lambda (G4134@t) ((lambda (G4136@ls/false) (if (and G4136@ls/false (apply (lambda (G4138@c G4139@ver) (eq? (G2e18@syntax->datum G4138@c) 'not)) G4136@ls/false)) (apply (lambda (G413c@c G413d@ver) ((lambda (G4140@p) (lambda (G4142@x) (not (G4140@p G4142@x)))) (G40dd@version-pred G413d@ver))) G4136@ls/false) ((lambda (G4144@t) ((lambda (G4146@ls/false) (if G4146@ls/false (apply (lambda (G4148@sub*) ((lambda (G414a@p*) (lambda (G414c@x) ((letrec ((G414e@f (lambda (G4150@p* G4151@x) (if (null? G4150@p*) '#t (if (null? G4151@x) '#f (and ((car G4150@p*) (car G4151@x)) (G414e@f (cdr G4150@p*) (cdr G4151@x)))))))) G414e@f) G414a@p* G414c@x))) (map G40db@subversion-pred G4148@sub*))) G4146@ls/false) ((lambda (G4154@t) ((lambda (G4156@ls/false) (if G4156@ls/false (apply (lambda () (G2e12@syntax-violation 'import '"invalid version spec" G40d6@spec G4108@x*)) G4156@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G4154@t))) (G2d27@syntax-dispatch G4154@t '_))) G4144@t))) (G2d27@syntax-dispatch G4144@t 'each-any))) G4134@t))) (G2d27@syntax-dispatch G4134@t '(any any)))) G4122@t))) (G2d27@syntax-dispatch G4122@t '(any . each-any)))) G4110@t))) (G2d27@syntax-dispatch G4110@t '(any . each-any)))) G410a@t))) (G2d27@syntax-dispatch G410a@t '()))) G4108@x*))) ((letrec ((G40de@f (lambda (G40e0@x) ((lambda (G40e2@t) ((lambda (G40e4@ls/false) (if G40e4@ls/false (apply (lambda (G40e6@version-spec*) (values '() (G40dd@version-pred G40e6@version-spec*))) G40e4@ls/false) ((lambda (G40e8@t) ((lambda (G40ea@ls/false) (if (and G40ea@ls/false (apply (lambda (G40ec@x G40ed@x*) (G400d@idsyn? G40ec@x)) G40ea@ls/false)) (apply (lambda (G40f0@x G40f1@x*) (call-with-values (lambda () (G40de@f G40f1@x*)) (lambda (G40f6@G40f4 G40f7@G40f5) ((lambda (G40fa@pred G40fb@name) (values (cons (G2e18@syntax->datum G40f0@x) G40fb@name) G40fa@pred)) G40f7@G40f5 G40f6@G40f4)))) G40ea@ls/false) ((lambda (G40fe@t) ((lambda (G4100@ls/false) (if G4100@ls/false (apply (lambda () (values '() (lambda (G4102@x) '#t))) G4100@ls/false) ((lambda (G4104@t) ((lambda (G4106@ls/false) (if G4106@ls/false (apply (lambda () (G2e12@syntax-violation '#f '"invalid import spec" G40d6@spec)) G4106@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G4104@t))) (G2d27@syntax-dispatch G4104@t '_))) G40fe@t))) (G2d27@syntax-dispatch G40fe@t '()))) G40e8@t))) (G2d27@syntax-dispatch G40e8@t '(any . any)))) G40e2@t))) (G2d27@syntax-dispatch G40e2@t '(each-any)))) G40e0@x)))) G40de@f) G40d6@spec))) '#f '#f '#f))) (set! G401d@import-library (lambda (G40c8@spec*) (call-with-values (lambda () (G401b@parse-library-name G40c8@spec*)) (lambda (G40cc@G40ca G40cd@G40cb) ((lambda (G40d0@pred G40d1@name) (begin (if (null? G40d1@name) (G2e12@syntax-violation 'import '"empty library name" G40c8@spec*) (void)) ((lambda (G40d4@lib) (begin (if (not G40d4@lib) (G2e12@syntax-violation 'import '"cannot find library with required name" G40d1@name) (void)) (if (not (G40d0@pred (G292f@G27a7@library-version G40d4@lib))) (G2e12@syntax-violation 'import '"library does not satisfy version specification" G40c8@spec* G40d4@lib) (void)) ((G2d98@imp-collector) G40d4@lib) (G2933@G27af@library-subst G40d4@lib))) (G2957@G27f7@find-library-by-name G40d1@name)))) G40cd@G40cb G40cc@G40ca))))) (set! G401f@get-import (lambda (G403a@spec) ((lambda (G403c@t) ((lambda (G403e@ls/false) (if (and G403e@ls/false (apply (lambda (G4040@x G4041@x*) (not (memq (G2e18@syntax->datum G4040@x) '(for rename except only prefix library)))) G403e@ls/false)) (apply (lambda (G4044@x G4045@x*) (G401d@import-library (cons G4044@x G4045@x*))) G403e@ls/false) ((lambda (G4048@t) ((lambda (G404a@ls/false) (if (and G404a@ls/false (apply (lambda (G404c@rename G404d@isp G404e@old* G404f@new*) (and (eq? (G2e18@syntax->datum G404c@rename) 'rename) (for-all G400d@idsyn? G404e@old*) (for-all G400d@idsyn? G404f@new*))) G404a@ls/false)) (apply (lambda (G4054@rename G4055@isp G4056@old* G4057@new*) ((lambda (G405c@subst G405d@old* G405e@new*) ((lambda (G4062@old-label*) ((lambda (G4064@subst) (G4011@merge-substs (map cons G405e@new* G4062@old-label*) G4064@subst)) (G4017@rem* G405d@old* G405c@subst))) (G4015@find* G405d@old* G405c@subst))) (G401f@get-import G4055@isp) (map G2e18@syntax->datum G4056@old*) (map G2e18@syntax->datum G4057@new*))) G404a@ls/false) ((lambda (G4066@t) ((lambda (G4068@ls/false) (if (and G4068@ls/false (apply (lambda (G406a@except G406b@isp G406c@sym*) (and (eq? (G2e18@syntax->datum G406a@except) 'except) (for-all G400d@idsyn? G406c@sym*))) G4068@ls/false)) (apply (lambda (G4070@except G4071@isp G4072@sym*) ((lambda (G4076@subst) (G4017@rem* (map G2e18@syntax->datum G4072@sym*) G4076@subst)) (G401f@get-import G4071@isp))) G4068@ls/false) ((lambda (G4078@t) ((lambda (G407a@ls/false) (if (and G407a@ls/false (apply (lambda (G407c@only G407d@isp G407e@sym*) (and (eq? (G2e18@syntax->datum G407c@only) 'only) (for-all G400d@idsyn? G407e@sym*))) G407a@ls/false)) (apply (lambda (G4082@only G4083@isp G4084@sym*) ((lambda (G4088@subst G4089@sym*) ((lambda (G408c@sym*) ((lambda (G408e@lab*) (map cons G408c@sym* G408e@lab*)) (G4015@find* G408c@sym* G4088@subst))) (G4019@remove-dups G4089@sym*))) (G401f@get-import G4083@isp) (map G2e18@syntax->datum G4084@sym*))) G407a@ls/false) ((lambda (G4090@t) ((lambda (G4092@ls/false) (if (and G4092@ls/false (apply (lambda (G4094@prefix G4095@isp G4096@p) (and (eq? (G2e18@syntax->datum G4094@prefix) 'prefix) (G400d@idsyn? G4096@p))) G4092@ls/false)) (apply (lambda (G409a@prefix G409b@isp G409c@p) ((lambda (G40a0@subst G40a1@prefix) (map (lambda (G40a4@x) (cons (string->symbol (string-append G40a1@prefix (symbol->string (car G40a4@x)))) (cdr G40a4@x))) G40a0@subst)) (G401f@get-import G409b@isp) (symbol->string (G2e18@syntax->datum G409c@p)))) G4092@ls/false) ((lambda (G40a6@t) ((lambda (G40a8@ls/false) (if (and G40a8@ls/false (apply (lambda (G40aa@library G40ab@spec*) (eq? (G2e18@syntax->datum G40aa@library) 'library)) G40a8@ls/false)) (apply (lambda (G40ae@library G40af@spec*) (G401d@import-library G40af@spec*)) G40a8@ls/false) ((lambda (G40b2@t) ((lambda (G40b4@ls/false) (if (and G40b4@ls/false (apply (lambda (G40b6@for G40b7@isp G40b8@rest) (eq? (G2e18@syntax->datum G40b6@for) 'for)) G40b4@ls/false)) (apply (lambda (G40bc@for G40bd@isp G40be@rest) (G401f@get-import G40bd@isp)) G40b4@ls/false) ((lambda (G40c2@t) ((lambda (G40c4@ls/false) (if G40c4@ls/false (apply (lambda (G40c6@spec) (G2e12@syntax-violation 'import '"invalid import spec" G40c6@spec)) G40c4@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G40c2@t))) (G2d27@syntax-dispatch G40c2@t 'any))) G40b2@t))) (G2d27@syntax-dispatch G40b2@t '(any any . any)))) G40a6@t))) (G2d27@syntax-dispatch G40a6@t '(any each-any)))) G4090@t))) (G2d27@syntax-dispatch G4090@t '(any any any)))) G4078@t))) (G2d27@syntax-dispatch G4078@t '(any any . each-any)))) G4066@t))) (G2d27@syntax-dispatch G4066@t '(any any . each-any)))) G4048@t))) (G2d27@syntax-dispatch G4048@t '(any any . #(each (any any)))))) G403c@t))) (G2d27@syntax-dispatch G403c@t '(any . each-any)))) G403a@spec))) (set! G4021@add-imports! (lambda (G402a@imp G402b@h) ((lambda (G402e@subst) (for-each (lambda (G4030@x) ((lambda (G4032@name G4033@label) ((lambda (G4036@t) (if G4036@t ((lambda (G4038@l) (if (not (eq? G4038@l G4033@label)) (G400f@dup-error G4032@name) (void))) G4036@t) (hashtable-set! G402b@h G4032@name G4033@label))) (hashtable-ref G402b@h G4032@name '#f))) (car G4030@x) (cdr G4030@x))) G402e@subst)) (G401f@get-import G402a@imp)))) (lambda (G4022@imp*) ((letrec ((G4024@f (lambda (G4026@imp* G4027@h) (if (null? G4026@imp*) (hashtable-entries G4027@h) (begin (G4021@add-imports! (car G4026@imp*) G4027@h) (G4024@f (cdr G4026@imp*) G4027@h)))))) G4024@f) G4022@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d90@make-top-rib (lambda (G420e@names G420f@labels) ((lambda (G4212@rib) (begin (vector-for-each (lambda (G4214@name G4215@label) (begin (if (not (symbol? G4214@name)) (error 'make-top-rib '"BUG: not a symbol" G4214@name) (void)) (G2ae9@extend-rib/nc! G4212@rib (G2b00@make-stx G4214@name G2ab2@top-mark* '() '()) G4215@label))) G420e@names G420f@labels) G4212@rib)) (G2ae5@make-empty-rib)))) (set! G2d92@make-collector (lambda () ((lambda (G4218@ls) (lambda G421c ((lambda (G421d) (if (= G421d '0) (apply (lambda () G4218@ls) G421c) (if (= G421d '1) (apply (lambda (G421a@x) (set! G4218@ls (G2aab@set-cons G421a@x G4218@ls))) G421c) (error 'apply '"invalid arg count")))) (length G421c)))) '()))) (set! G2d94@inv-collector (G26ea@G2618@make-parameter (lambda G421e@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4220@x) (begin (if (not (procedure? G4220@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4220@x) (void)) G4220@x)))) (set! G2d96@vis-collector (G26ea@G2618@make-parameter (lambda G4222@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G4224@x) (begin (if (not (procedure? G4224@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G4224@x) (void)) G4224@x)))) (set! G2d98@imp-collector (G26ea@G2618@make-parameter (lambda G4226@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4228@x) (begin (if (not (procedure? G4228@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4228@x) (void)) G4228@x)))) (set! G2d9a@chi-library-internal (lambda (G422a@e* G422b@rib G422c@top?) (call-with-values (lambda () (G2d84@chi-body* G422a@e* '() '() '() '() '() '() '() G422b@rib G422c@top?)) (lambda (G4238@G4230 G4239@G4231 G423a@G4232 G423b@G4233 G423c@G4234 G423d@G4235 G423e@G4236 G423f@G4237) ((lambda (G4248@exp* G4249@_kwd* G424a@mod** G424b@rhs* G424c@lex* G424d@mr G424e@r G424f@e*) (values (append (apply append (reverse G424a@mod**)) G424f@e*) G424e@r G424d@mr (reverse G424c@lex*) (reverse G424b@rhs*) G4248@exp*)) G423f@G4237 G423e@G4236 G423d@G4235 G423c@G4234 G423b@G4233 G423a@G4232 G4239@G4231 G4238@G4230))))) (set! G2d9c@chi-interaction-expr (lambda (G4258@e G4259@rib G425a@r) (call-with-values (lambda () (G2d84@chi-body* (list G4258@e) G425a@r G425a@r '() '() '() '() '() G4259@rib '#t)) (lambda (G4266@G425e G4267@G425f G4268@G4260 G4269@G4261 G426a@G4262 G426b@G4263 G426c@G4264 G426d@G4265) ((lambda (G4276@_exp* G4277@_kwd* G4278@mod** G4279@rhs* G427a@lex* G427b@mr G427c@r G427d@e*) ((lambda (G4286@e*) ((lambda (G4288@e) (values G4288@e G427c@r)) (if (null? G4286@e*) (G2a98@G2a0a@build-void) (if (null? (cdr G4286@e*)) (car G4286@e*) (G2a97@G2a08@build-sequence '#f G4286@e*))))) (G2d59@expand-interaction-rhs*/init* (reverse G427a@lex*) (reverse G4279@rhs*) (append (apply append (reverse G4278@mod**)) G427d@e*) G427c@r G427b@mr))) G426d@G4265 G426c@G4264 G426b@G4263 G426a@G4262 G4269@G4261 G4268@G4260 G4267@G425f G4266@G425e))))) (set! G2d9e@library-body-expander (lambda (G428a@name G428b@main-exp* G428c@imp* G428d@b* G428e@top?) ((lambda (G4295@itc) (begin (set! G4295@itc (G2d92@make-collector)) (begin (if (symbol-value 'debug-expand) (format '#t '"library-body-expander=~a\n" G428d@b*) (void)) ((lambda (G429a@G4296 G429b@G4297 G429c@G4298 G429d@G4299) ((lambda (G42a2@swap) (dynamic-wind G42a2@swap (lambda () (call-with-values (lambda () (G2d8e@parse-import-spec* G428c@imp*)) (lambda (G42a6@G42a4 G42a7@G42a5) ((lambda (G42aa@subst-labels G42ab@subst-names) ((lambda (G42ae@rib) ((lambda (G42b1@wrap) (begin (set! G42b1@wrap (lambda (G431f@x) (G2b00@make-stx G431f@x G2ab2@top-mark* (list G42ae@rib) '()))) ((lambda (G42b2@b* G42b3@main-exp* G42b4@rtc G42b5@vtc) (begin (if (symbol-value 'debug-expand) (format '#t '"b[i]=~a\n" (G2b02@stx-expr (car G42b2@b*))) (void)) ((lambda (G42be@G42ba G42bf@G42bb G42c0@G42bc G42c1@G42bd) ((lambda (G42c6@swap) (dynamic-wind G42c6@swap (lambda () (call-with-values (lambda () (G2d9a@chi-library-internal G42b2@b* G42ae@rib G428e@top?)) (lambda (G42ce@G42c8 G42cf@G42c9 G42d0@G42ca G42d1@G42cb G42d2@G42cc G42d3@G42cd) ((lambda (G42da@internal-exp* G42db@rhs* G42dc@lex* G42dd@mr G42de@r G42df@init*) (begin (if (symbol-value 'debug-expand) (format '#t '"b[j]=~a init*=~a r=~a mr=~a lex=~a rhs*=~a internal-exp~a\n" (G2b02@stx-expr (car G42b2@b*)) G42df@init* G42de@r G42dd@mr G42dc@lex* (G2b02@stx-expr (cdar G42db@rhs*)) G42da@internal-exp*) (void)) (call-with-values (lambda () (G2d88@parse-exports (append G42b3@main-exp* G42da@internal-exp*))) (lambda (G42e8@G42e6 G42e9@G42e7) ((lambda (G42ec@exp-id* G42ed@exp-name*) (begin (G2aed@seal-rib! G42ae@rib) (if (symbol-value 'debug-expand) (for-each (lambda (G42f0@rhs) (format '#t '"before rhs=~a\n" G42f0@rhs)) G42db@rhs*) (void)) ((lambda (G42f2@init*) ((lambda (G42f4@rhs*) ((lambda () (begin (if (symbol-value 'debug-expand) (format '#t '"after rhs*=~a\n" G42f4@rhs*) (void)) (G2aef@unseal-rib! G42ae@rib) ((lambda (G42f6@loc* G42f7@export-subst) ((lambda (G42fb@errstr) (begin (set! G42fb@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G2dfe@make-export-env/macros G42dc@lex* G42f6@loc* G42de@r)) (lambda (G42ff@G42fc G4300@G42fd G4301@G42fe) ((lambda (G4305@macro* G4306@global* G4307@export-env) (begin (for-each (lambda (G430b@s) ((lambda (G430d@name G430e@label) ((lambda (G4311@p) (if G4311@p ((lambda (G4313@b) ((lambda (G4315@type) (if (eq? G4315@type 'mutable) (G2e12@syntax-violation 'export G42fb@errstr G430d@name) (void))) (car G4313@b))) (cdr G4311@p)) (void))) (assq G430e@label G4307@export-env))) (car G430b@s) (cdr G430b@s))) G42f7@export-subst) (if (symbol-value 'debug-expand) (format '#t '"global*=~a init*=~a \nlex*=~a \nrhs*=~a\n" G4306@global* G42f2@init* G42dc@lex* G42f4@rhs*) (void)) ((lambda (G4317@invoke-body G4318@invoke-definitions) (begin (if (symbol-value 'debug-expand) (format '#t '"invoke-body=~a \n" G4317@invoke-body) (void)) (values (G4295@itc) (G42b4@rtc) (G42b5@vtc) (G2a97@G2a08@build-sequence '#f (append G4318@invoke-definitions (list G4317@invoke-body))) G4305@macro* G42f7@export-subst G4307@export-env))) (G2a9a@G2a0e@build-letrec* '#f G42dc@lex* G42f4@rhs* (G2dfa@build-exports G4306@global* G42f2@init*)) (map G2a93@G2965@build-global-define (map cdr G4306@global*))))) G4301@G42fe G4300@G42fd G42ff@G42fc))))) '#f)) (map G2ab8@gen-global G42dc@lex*) (G2dfc@make-export-subst G42ed@exp-name* G42ec@exp-id*)))))) (G2d5b@chi-rhs* G42db@rhs* G42de@r G42dd@mr))) (G2d47@chi-expr* G42df@init* G42de@r G42dd@mr)))) G42e9@G42e7 G42e8@G42e6))))) G42d3@G42cd G42d2@G42cc G42d1@G42cb G42d0@G42ca G42cf@G42c9 G42ce@G42c8)))) G42c6@swap)) (lambda () (begin ((lambda (G431b@t) (begin (G42be@G42ba G42c0@G42bc) (set! G42c0@G42bc G431b@t))) (G42be@G42ba)) ((lambda (G431d@t) (begin (G42bf@G42bb G42c1@G42bd) (set! G42c1@G42bd G431d@t))) (G42bf@G42bb)))))) G2d94@inv-collector G2d96@vis-collector G42b4@rtc G42b5@vtc))) (map G42b1@wrap G428d@b*) (map G42b1@wrap G428b@main-exp*) (G2d92@make-collector) (G2d92@make-collector)))) '#f)) (G2d90@make-top-rib G42ab@subst-names G42aa@subst-labels))) G42a7@G42a5 G42a6@G42a4)))) G42a2@swap)) (lambda () (begin ((lambda (G4321@t) (begin (G429a@G4296 G429c@G4298) (set! G429c@G4298 G4321@t))) (G429a@G4296)) ((lambda (G4323@t) (begin (G429b@G4297 G429d@G4299) (set! G429d@G4299 G4323@t))) (G429b@G4297)))))) G2d98@imp-collector G2e20@top-level-context G4295@itc '#f)))) '#f))) (set! G2da0@core-library-expander (lambda (G4325@e G4326@verify-name) (call-with-values (lambda () (G2d8c@parse-library G4325@e)) (lambda (G432d@G4329 G432e@G432a G432f@G432b G4330@G432c) ((lambda (G4335@b* G4336@imp* G4337@exp* G4338@name*) (call-with-values (lambda () (G2d8a@parse-library-name G4338@name*)) (lambda (G433f@G433d G4340@G433e) ((lambda (G4343@ver G4344@name) (begin (G4326@verify-name G4344@name) (call-with-values (lambda () (G2d9e@library-body-expander G4344@name G4337@exp* G4336@imp* G4335@b* '#f)) (lambda (G434e@G4347 G434f@G4348 G4350@G4349 G4351@G434a G4352@G434b G4353@G434c G4354@G434d) ((lambda (G435c@export-env G435d@export-subst G435e@visit-code G435f@invoke-code G4360@visit-req* G4361@invoke-req* G4362@imp*) (values G4344@name G4343@ver G4362@imp* G4361@invoke-req* G4360@visit-req* G435f@invoke-code G435e@visit-code G435d@export-subst G435c@export-env)) G4354@G434d G4353@G434c G4352@G434b G4351@G434a G4350@G4349 G434f@G4348 G434e@G4347))))) G4340@G433e G433f@G433d)))) G4330@G432c G432f@G432b G432e@G432a G432d@G4329))))) (set! G2da2@parse-top-level-program (lambda (G436a@e*) ((lambda (G436c@t) ((lambda (G436e@ls/false) (if (and G436e@ls/false (apply (lambda (G4370@import G4371@imp* G4372@b*) (eq? (G2e18@syntax->datum G4370@import) 'import)) G436e@ls/false)) (apply (lambda (G4376@import G4377@imp* G4378@b*) (values G4377@imp* G4378@b*)) G436e@ls/false) ((lambda (G437c@t) ((lambda (G437e@ls/false) (if (and G437e@ls/false (apply (lambda (G4380@import G4381@x G4382@y) (eq? (G2e18@syntax->datum G4380@import) 'import)) G437e@ls/false)) (apply (lambda (G4386@import G4387@x G4388@y) (G2e12@syntax-violation 'expander '"invalid syntax of top-level program" (G2b30@syntax-car G436a@e*))) G437e@ls/false) ((lambda (G438c@t) ((lambda (G438e@ls/false) (if G438e@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G438e@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G438c@t))) (G2d27@syntax-dispatch G438c@t '_))) G437c@t))) (G2d27@syntax-dispatch G437c@t '((any . any) . any)))) G436c@t))) (G2d27@syntax-dispatch G436c@t '((any . each-any) . each-any)))) G436a@e*))) (set! G2da4@top-level-expander (lambda (G4390@e*) (call-with-values (lambda () (G2da2@parse-top-level-program G4390@e*)) (lambda (G4394@G4392 G4395@G4393) ((lambda (G4398@b* G4399@imp*) (call-with-values (lambda () (G2d9e@library-body-expander '() '() G4399@imp* G4398@b* '#t)) (lambda (G43a3@G439c G43a4@G439d G43a5@G439e G43a6@G439f G43a7@G43a0 G43a8@G43a1 G43a9@G43a2) ((lambda (G43b1@export-env G43b2@export-subst G43b3@visit-code G43b4@invoke-code G43b5@visit-req* G43b6@invoke-req* G43b7@imp*) (values G43b6@invoke-req* G43b4@invoke-code)) G43a9@G43a2 G43a8@G43a1 G43a7@G43a0 G43a6@G439f G43a5@G439e G43a4@G439d G43a3@G439c)))) G4395@G4393 G4394@G4392))))) (set! G2daa@G2da5 (make-record-type-descriptor 'env '#f 'G2da8 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2dac@G2da7 '#f) (set! G2dae@G2da6 (make-record-constructor-descriptor G2daa@G2da5 '#f G2dac@G2da7)) (set! G2db1@env? (record-predicate G2daa@G2da5)) (set! G2db3@make-env (record-constructor G2dae@G2da6)) (set! G2db5@env-names (record-accessor G2daa@G2da5 '0)) (set! G2db7@env-labels (record-accessor G2daa@G2da5 '1)) (set! G2db9@env-itc (record-accessor G2daa@G2da5 '2)) (set! G2dbb@set-env-names! (record-mutator G2daa@G2da5 '0)) (set! G2dbd@set-env-labels! (record-mutator G2daa@G2da5 '1)) (set! G2dbf@set-env-itc! (record-mutator G2daa@G2da5 '2)) (set! G2dc1@rp (G26e7@G2612@make-record-printer 'env (lambda (G43bf@x G43c0@p G43c1@wr) (display '"#<environment>" G43c0@p)))) (set! G2dc7@G2dc2 (make-record-type-descriptor 'interaction-env '#f 'G2dc5 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G2dc9@G2dc4 '#f) (set! G2dcb@G2dc3 (make-record-constructor-descriptor G2dc7@G2dc2 '#f G2dc9@G2dc4)) (set! G2dce@interaction-env? (record-predicate G2dc7@G2dc2)) (set! G2dd0@make-interaction-env (record-constructor G2dcb@G2dc3)) (set! G2dd2@interaction-env-rib (record-accessor G2dc7@G2dc2 '0)) (set! G2dd4@interaction-env-r (record-accessor G2dc7@G2dc2 '1)) (set! G2dd6@interaction-env-locs (record-accessor G2dc7@G2dc2 '2)) (set! G2dd8@set-interaction-env-rib! (record-mutator G2dc7@G2dc2 '0)) (set! G2dda@set-interaction-env-r! (record-mutator G2dc7@G2dc2 '1)) (set! G2ddc@set-interaction-env-locs! (record-mutator G2dc7@G2dc2 '2)) (set! G2dde@rp (G26e7@G2612@make-record-printer 'interaction-env (lambda (G43c5@x G43c6@p G43c7@wr) (display '"#<environment>" G43c6@p)))) (set! G2de0@interaction-environment-symbols (lambda () (G2de8@environment-symbols (G2e1e@interaction-environment)))) (set! G2de2@environment-bindings (lambda (G43cb@e) (vector->list (vector-map (lambda (G43cd@name G43ce@label) (G2de4@parse-binding (cons G43cd@name (G295d@G2803@imported-label->binding G43ce@label)))) (G2db5@env-names G43cb@e) (G2db7@env-labels G43cb@e))))) (set! G2de4@parse-binding (lambda (G43d1@b) (cons (car G43d1@b) ((lambda (G43d3@t) (if (memv G43d3@t '(core-prim global)) 'procedure (if (memv G43d3@t '(core-macro macro global-macro)) 'syntax (if (memv G43d3@t '($core-rtd)) 'record (if (eq? (car G43d1@b) (cadr G43d1@b)) 'syntax 'unknown))))) (cadr G43d1@b))))) (set! G2de6@environment? (lambda (G43d5@x) (or (G2db1@env? G43d5@x) (G2dce@interaction-env? G43d5@x)))) (set! G2de8@environment-symbols (lambda (G43d7@x) (if (G2db1@env? G43d7@x) (vector->list (G2db5@env-names G43d7@x)) (if (G2dce@interaction-env? G43d7@x) (map values (G2ad1@rib-sym* (G2dd2@interaction-env-rib G43d7@x))) (assertion-violation 'environment-symbols '"not an environment" G43d7@x))))) (set! G2dea@environment (lambda G43d9@imp* ((lambda (G43db@itc) ((lambda (G43df@G43dd G43e0@G43de) ((lambda (G43e3@swap) (dynamic-wind G43e3@swap (lambda () (call-with-values (lambda () (G2d8e@parse-import-spec* G43d9@imp*)) (lambda (G43e7@G43e5 G43e8@G43e6) ((lambda (G43eb@subst-labels G43ec@subst-names) (G2db3@make-env G43ec@subst-names G43eb@subst-labels G43db@itc)) G43e8@G43e6 G43e7@G43e5)))) G43e3@swap)) (lambda () ((lambda (G43ef@t) (begin (G43df@G43dd G43e0@G43de) (set! G43e0@G43de G43ef@t))) (G43df@G43dd))))) G2d98@imp-collector G43db@itc)) (G2d92@make-collector)))) (set! G2dec@null-environment (lambda (G43f1@n) (begin (if (not (eqv? G43f1@n '5)) (assertion-violation 'null-environment '"not 5" G43f1@n) (void)) (G2dea@environment '(psyntax null-environment-5))))) (set! G2dee@scheme-report-environment (lambda (G43f3@n) (begin (if (not (eqv? G43f3@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G43f3@n) (void)) (G2dea@environment '(psyntax scheme-report-environment-5))))) (set! G2df0@expand (lambda (G43f5@x G43f6@env) (if (G2db1@env? G43f6@env) ((lambda (G43f9@rib) ((lambda (G43fb@x G43fc@itc G43fd@rtc G43fe@vtc) ((lambda (G4403@x) (begin (G2aed@seal-rib! G43f9@rib) (values G4403@x (G43fd@rtc)))) ((lambda (G440d@G4405 G440e@G4406 G440f@G4407 G4410@G4408 G4411@G4409 G4412@G440a G4413@G440b G4414@G440c) ((lambda (G441d@swap) (dynamic-wind G441d@swap (lambda () (G2d4b@chi-expr G43fb@x '() '())) G441d@swap)) (lambda () (begin ((lambda (G441f@t) (begin (G440d@G4405 G4411@G4409) (set! G4411@G4409 G441f@t))) (G440d@G4405)) ((lambda (G4421@t) (begin (G440e@G4406 G4412@G440a) (set! G4412@G440a G4421@t))) (G440e@G4406)) ((lambda (G4423@t) (begin (G440f@G4407 G4413@G440b) (set! G4413@G440b G4423@t))) (G440f@G4407)) ((lambda (G4425@t) (begin (G4410@G4408 G4414@G440c) (set! G4414@G440c G4425@t))) (G4410@G4408)))))) G2e20@top-level-context G2d94@inv-collector G2d96@vis-collector G2d98@imp-collector '#f G43fd@rtc G43fe@vtc G43fc@itc))) (G2b00@make-stx G43f5@x G2ab2@top-mark* (list G43f9@rib) '()) (G2db9@env-itc G43f6@env) (G2d92@make-collector) (G2d92@make-collector))) (G2d90@make-top-rib (G2db5@env-names G43f6@env) (G2db7@env-labels G43f6@env))) (if (G2dce@interaction-env? G43f6@env) ((lambda (G4427@rib G4428@r G4429@rtc) ((lambda (G442d@x) (call-with-values (lambda () ((lambda (G4439@G4431 G443a@G4432 G443b@G4433 G443c@G4434 G443d@G4435 G443e@G4436 G443f@G4437 G4440@G4438) ((lambda (G4449@swap) (dynamic-wind G4449@swap (lambda () (G2d9c@chi-interaction-expr G442d@x G4427@rib G4428@r)) G4449@swap)) (lambda () (begin ((lambda (G444b@t) (begin (G4439@G4431 G443d@G4435) (set! G443d@G4435 G444b@t))) (G4439@G4431)) ((lambda (G444d@t) (begin (G443a@G4432 G443e@G4436) (set! G443e@G4436 G444d@t))) (G443a@G4432)) ((lambda (G444f@t) (begin (G443b@G4433 G443f@G4437) (set! G443f@G4437 G444f@t))) (G443b@G4433)) ((lambda (G4451@t) (begin (G443c@G4434 G4440@G4438) (set! G4440@G4438 G4451@t))) (G443c@G4434)))))) G2e20@top-level-context G2d94@inv-collector G2d96@vis-collector G2d98@imp-collector G43f6@env G4429@rtc (G2d92@make-collector) (G2d92@make-collector))) (lambda (G4453@G442f G4454@G4430) ((lambda (G4457@r^ G4458@e) (begin (G2dda@set-interaction-env-r! G43f6@env G4457@r^) (values G4458@e (G4429@rtc)))) G4454@G4430 G4453@G442f)))) (G2b00@make-stx G43f5@x G2ab2@top-mark* (list G4427@rib) '()))) (G2dd2@interaction-env-rib G43f6@env) (G2dd4@interaction-env-r G43f6@env) (G2d92@make-collector)) (assertion-violation 'expand '"not an environment" G43f6@env))))) (set! G2df2@eval (lambda (G445b@x G445c@env) (begin (if (not (G2de6@environment? G445c@env)) (error 'eval '"not an environment" G445c@env) (void)) (call-with-values (lambda () (G2df0@expand G445b@x G445c@env)) (lambda (G4461@G445f G4462@G4460) ((lambda (G4465@invoke-req* G4466@x) (begin (for-each G295e@G2805@invoke-library G4465@invoke-req*) (eval-core (G273e@G26f6@expanded->core G4466@x)))) G4462@G4460 G4461@G445f)))))) (set! G2df4@library-expander (lambda G44ce ((lambda (G44cf) (if (= G44cf '3) (apply (lambda (G4469@x G446a@filename G446b@verify-name) ((lambda (G4470@build-visit-code G4472@visit!) (begin (set! G4470@build-visit-code (lambda (G44bc@macro*) (if (null? G44bc@macro*) (G2a98@G2a0a@build-void) (G2a97@G2a08@build-sequence '#f (map (lambda (G44be@x) ((lambda (G44c0@loc G44c1@src) (list 'set! G44c0@loc G44c1@src)) (car G44be@x) (cddr G44be@x))) G44bc@macro*))))) (set! G4472@visit! (lambda (G44b4@macro*) (for-each (lambda (G44b6@x) ((lambda (G44b8@loc G44b9@proc) (set-symbol-value! G44b8@loc G44b9@proc)) (car G44b6@x) (cadr G44b6@x))) G44b4@macro*))) (call-with-values (lambda () (G2da0@core-library-expander G4469@x G446b@verify-name)) (lambda (G447c@G4473 G447d@G4474 G447e@G4475 G447f@G4476 G4480@G4477 G4481@G4478 G4482@G4479 G4483@G447a G4484@G447b) ((lambda (G448e@export-env G448f@export-subst G4490@macro* G4491@invoke-code G4492@vis* G4493@inv* G4494@imp* G4495@ver G4496@name) ((lambda (G44a0@id G44a1@name G44a2@ver G44a3@imp* G44a4@vis* G44a5@inv* G44a6@visit-proc G44a7@invoke-proc G44a8@visit-code G44a9@invoke-code) (begin (G295c@G2801@install-library G44a0@id G44a1@name G44a2@ver G44a3@imp* G44a4@vis* G44a5@inv* G448f@export-subst G448e@export-env G44a6@visit-proc G44a7@invoke-proc G44a8@visit-code G44a9@invoke-code '#t G446a@filename) (values G44a0@id G44a1@name G44a2@ver G44a3@imp* G44a4@vis* G44a5@inv* G44a9@invoke-code G44a8@visit-code G448f@export-subst G448e@export-env))) (gensym) G4496@name G4495@ver (map G2962@G280d@library-spec G4494@imp*) (map G2962@G280d@library-spec G4492@vis*) (map G2962@G280d@library-spec G4493@inv*) (lambda () (G4472@visit! G4490@macro*)) (lambda () (eval-core (G273e@G26f6@expanded->core G4491@invoke-code))) (G4470@build-visit-code G4490@macro*) G4491@invoke-code)) G4484@G447b G4483@G447a G4482@G4479 G4481@G4478 G4480@G4477 G447f@G4476 G447e@G4475 G447d@G4474 G447c@G4473))))) '#f '#f)) G44ce) (if (= G44cf '2) (apply (lambda (G44c4@x G44c5@filename) (G2df4@library-expander G44c4@x G44c5@filename (lambda (G44c8@x) (values)))) G44ce) (if (= G44cf '1) (apply (lambda (G44ca@x) (G2df4@library-expander G44ca@x '#f (lambda (G44cc@x) (values)))) G44ce) (error 'apply '"invalid arg count"))))) (length G44ce)))) (set! G2df6@boot-library-expand (lambda (G44d0@x) (call-with-values (lambda () (G2df4@library-expander G44d0@x)) (lambda (G44dc@G44d2 G44dd@G44d3 G44de@G44d4 G44df@G44d5 G44e0@G44d6 G44e1@G44d7 G44e2@G44d8 G44e3@G44d9 G44e4@G44da G44e5@G44db) ((lambda (G44f0@export-env G44f1@export-subst G44f2@visit-code G44f3@invoke-code G44f4@inv* G44f5@vis* G44f6@imp* G44f7@ver G44f8@name G44f9@id) (values G44f8@name G44f3@invoke-code G44f1@export-subst G44f0@export-env)) G44e5@G44db G44e4@G44da G44e3@G44d9 G44e2@G44d8 G44e1@G44d7 G44e0@G44d6 G44df@G44d5 G44de@G44d4 G44dd@G44d3 G44dc@G44d2))))) (set! G2df8@rev-map-append (lambda (G4504@f G4505@ls G4506@ac) (if (null? G4505@ls) G4506@ac (G2df8@rev-map-append G4504@f (cdr G4505@ls) (cons (G4504@f (car G4505@ls)) G4506@ac))))) (set! G2dfa@build-exports (lambda (G450a@lex*+loc* G450b@init*) (G2a97@G2a08@build-sequence '#f (cons (G2a98@G2a0a@build-void) (G2df8@rev-map-append (lambda (G450e@x) (list 'set! (cdr G450e@x) (car G450e@x))) G450a@lex*+loc* G450b@init*))))) (set! G2dfc@make-export-subst (lambda (G4510@name* G4511@id*) (map (lambda (G4514@name G4515@id) ((lambda (G4518@label) (begin (if (not G4518@label) (G2e12@syntax-violation '#f '"cannot export unbound identifier" G4515@id) (void)) (cons G4514@name G4518@label))) (G2b50@id->label G4515@id))) G4510@name* G4511@id*))) (set! G2dfe@make-export-env/macros (lambda (G451a@lex* G451b@loc* G451c@r) ((lambda (G4521@lookup) (begin (set! G4521@lookup (lambda (G453e@x) ((letrec ((G4540@f (lambda (G4542@x G4543@lex* G4544@loc*) (if (pair? G4543@lex*) (if (eq? G4542@x (car G4543@lex*)) (car G4544@loc*) (G4540@f G4542@x (cdr G4543@lex*) (cdr G4544@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4540@f) G453e@x G451a@lex* G451b@loc*))) ((letrec ((G4522@f (lambda (G4524@r G4525@env G4526@global* G4527@macro*) (if (null? G4524@r) (values G4525@env G4526@global* G4527@macro*) ((lambda (G452c@x) ((lambda (G452e@label G452f@b) ((lambda (G4532@t) (if (memv G4532@t '(lexical)) ((lambda (G4534@v) ((lambda (G4536@loc G4537@type) (G4522@f (cdr G4524@r) (cons (cons* G452e@label G4537@type G4536@loc) G4525@env) (cons (cons (G2cb3@lexical-var G4534@v) G4536@loc) G4526@global*) G4527@macro*)) (G4521@lookup (G2cb3@lexical-var G4534@v)) (if (G2cb5@lexical-mutable? G4534@v) 'mutable 'global))) (G2b5a@binding-value G452f@b)) (if (memv G4532@t '(local-macro)) ((lambda (G453a@loc) (G4522@f (cdr G4524@r) (cons (cons* G452e@label 'global-macro G453a@loc) G4525@env) G4526@global* (cons (cons G453a@loc (G2b5a@binding-value G452f@b)) G4527@macro*))) (gensym)) (if (memv G4532@t '(local-macro!)) ((lambda (G453c@loc) (G4522@f (cdr G4524@r) (cons (cons* G452e@label 'global-macro! G453c@loc) G4525@env) G4526@global* (cons (cons G453c@loc (G2b5a@binding-value G452f@b)) G4527@macro*))) (gensym)) (if (memv G4532@t '($rtd $module)) (G4522@f (cdr G4524@r) (cons G452c@x G4525@env) G4526@global* G4527@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2b58@binding-type G452f@b) (G2b5a@binding-value G452f@b))))))) (G2b58@binding-type G452f@b))) (car G452c@x) (cdr G452c@x))) (car G4524@r)))))) G4522@f) G451c@r '() '() '()))) '#f))) (set! G2e00@generate-temporaries (lambda (G4548@ls) ((lambda (G454a@t) ((lambda (G454c@ls/false) (if G454c@ls/false (apply (lambda (G454e@ls) (map (lambda (G4550@x) (G2b00@make-stx ((lambda (G4552@x) (if (or (symbol? G4552@x) (string? G4552@x)) (gensym G4552@x) (gensym 't))) (G2e18@syntax->datum G4550@x)) G2ab2@top-mark* '() '())) G454e@ls)) G454c@ls/false) ((lambda (G4554@t) ((lambda (G4556@ls/false) (if G4556@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G4556@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G4554@t))) (G2d27@syntax-dispatch G4554@t '_))) G454a@t))) (G2d27@syntax-dispatch G454a@t 'each-any))) G4548@ls))) (set! G2e02@free-identifier=? (lambda (G4558@x G4559@y) (if (G2b36@id? G4558@x) (if (G2b36@id? G4559@y) (G2b3e@free-id=? G4558@x G4559@y) (assertion-violation 'free-identifier=? '"not an identifier" G4559@y)) (assertion-violation 'free-identifier=? '"not an identifier" G4558@x)))) (set! G2e04@bound-identifier=? (lambda (G455c@x G455d@y) (if (G2b36@id? G455c@x) (if (G2b36@id? G455d@y) (G2b3c@bound-id=? G455c@x G455d@y) (assertion-violation 'bound-identifier=? '"not an identifier" G455d@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G455c@x)))) (set! G2e06@make-source-condition (lambda (G4560@x) ((lambda (G456a@G4565 G456c@G4567 G456e@G4566 G4571@G4564 G4573@make-source-condition G4575@G4562 G4577@G4563 G4579@source-condition? G457b@source-filename G457d@source-character) (begin (set! G456a@G4565 (make-record-type-descriptor '&source-information G49b8@G470b@&condition-rtd 'G4568 '#f '#f '#((immutable file-name) (immutable character)))) (set! G456c@G4567 '#f) (set! G456e@G4566 (make-record-constructor-descriptor G456a@G4565 G49b9@G470d@&condition-rcd G456c@G4567)) (set! G4571@G4564 (record-predicate G456a@G4565)) (set! G4573@make-source-condition (record-constructor G456e@G4566)) (set! G4575@G4562 (record-accessor G456a@G4565 '0)) (set! G4577@G4563 (record-accessor G456a@G4565 '1)) (set! G4579@source-condition? (condition-predicate G456a@G4565)) (set! G457b@source-filename (condition-accessor G456a@G4565 G4575@G4562)) (set! G457d@source-character (condition-accessor G456a@G4565 G4577@G4563)) (if (pair? G4560@x) (G4573@make-source-condition (car G4560@x) (cdr G4560@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2e08@extract-position-condition (lambda (G457e@x) (G2e06@make-source-condition (G2e0a@expression-position G457e@x)))) (set! G2e0a@expression-position (lambda (G4580@x) (and (G2afe@stx? G4580@x) ((lambda (G4582@x) (and (G26df@G2602@annotation? G4582@x) (G26e0@G2604@annotation-source G4582@x))) (G2b02@stx-expr G4580@x))))) (set! G2e0c@assertion-error (lambda (G4584@expr G4585@pos) (raise (condition (G49e8@G47cb@make-assertion-violation) (G49fa@G47fb@make-who-condition 'assert) (G49be@G475e@make-message-condition '"assertion failed") (G49f0@G47e1@make-irritants-condition (list G4584@expr)) (G2e06@make-source-condition G4585@pos))))) (set! G2e0e@syntax-error (lambda (G4588@x . G458a@args) (begin (if (not (for-all string? G458a@args)) (assertion-violation 'syntax-error '"invalid argument" G458a@args) (void)) (raise (condition (G49be@G475e@make-message-condition (if (null? G458a@args) '"invalid syntax" (apply string-append G458a@args))) (G4a1c@G4855@make-syntax-violation (G2e18@syntax->datum G4588@x) '#f) (G2e08@extract-position-condition G4588@x)))))) (set! G2e10@syntax-violation* (lambda (G458c@who G458d@msg G458e@form G458f@condition-object) (begin (if (not (string? G458d@msg)) (assertion-violation 'syntax-violation '"message is not a string" G458d@msg) (void)) ((lambda (G4594@who) (raise (condition (if G4594@who (G49fa@G47fb@make-who-condition G4594@who) (condition)) (G49be@G475e@make-message-condition G458d@msg) G458f@condition-object (G2e08@extract-position-condition G458e@form)))) (if (or (string? G458c@who) (symbol? G458c@who)) G458c@who (if (not G458c@who) ((lambda (G4596@t) ((lambda (G4598@ls/false) (if (and G4598@ls/false (apply (lambda (G459a@id) (G2b36@id? G459a@id)) G4598@ls/false)) (apply (lambda (G459c@id) (G2e18@syntax->datum G459c@id)) G4598@ls/false) ((lambda (G459e@t) ((lambda (G45a0@ls/false) (if (and G45a0@ls/false (apply (lambda (G45a2@id G45a3@rest) (G2b36@id? G45a2@id)) G45a0@ls/false)) (apply (lambda (G45a6@id G45a7@rest) (G2e18@syntax->datum G45a6@id)) G45a0@ls/false) ((lambda (G45aa@t) ((lambda (G45ac@ls/false) (if G45ac@ls/false (apply (lambda () '#f) G45ac@ls/false) (G2e12@syntax-violation '#f '"invalid syntax" G45aa@t))) (G2d27@syntax-dispatch G45aa@t '_))) G459e@t))) (G2d27@syntax-dispatch G459e@t '(any . any)))) G4596@t))) (G2d27@syntax-dispatch G4596@t 'any))) G458e@form) (assertion-violation 'syntax-violation '"invalid who argument" G458c@who))))))) (set! G2e12@syntax-violation (lambda G45bc ((lambda (G45bd) (if (= G45bd '3) (apply (lambda (G45ae@who G45af@msg G45b0@form) (G2e12@syntax-violation G45ae@who G45af@msg G45b0@form '#f)) G45bc) (if (= G45bd '4) (apply (lambda (G45b4@who G45b5@msg G45b6@form G45b7@subform) (G2e10@syntax-violation* G45b4@who G45b5@msg G45b6@form (G4a1c@G4855@make-syntax-violation (G2e18@syntax->datum G45b6@form) (G2e18@syntax->datum G45b7@subform)))) G45bc) (error 'apply '"invalid arg count")))) (length G45bc)))) (set! G2e14@identifier? (lambda (G45be@x) (G2b36@id? G45be@x))) (set! G2e16@datum->syntax (lambda (G45c0@id G45c1@datum) (if (G2b36@id? G45c0@id) (G2b14@datum->stx G45c0@id G45c1@datum) (assertion-violation 'datum->syntax '"not an identifier" G45c0@id)))) (set! G2e18@syntax->datum (lambda (G45c4@x) (G2b4c@stx->datum G45c4@x))) (set! G2e1a@compile-r6rs-top-level (lambda (G45c6@x*) (begin (if (symbol-value 'debug-expand) (format '#t '"x*=~a\n" G45c6@x*) (void)) (call-with-values (lambda () (G2da4@top-level-expander G45c6@x*)) (lambda (G45ca@G45c8 G45cb@G45c9) ((lambda (G45ce@invoke-code G45cf@lib*) (lambda () (begin (if (symbol-value 'debug-expand) (format '#t '"before invoke-code=~a\n" G45ce@invoke-code) (void)) (for-each G295e@G2805@invoke-library G45cf@lib*) (if (symbol-value 'debug-expand) (begin (format '#t '"invoke-code=~a\n" G45ce@invoke-code) (format '#t '"psyntax expanded=~a\n" (G273e@G26f6@expanded->core G45ce@invoke-code))) (void)) (eval-core (G273e@G26f6@expanded->core G45ce@invoke-code))))) G45cb@G45c9 G45ca@G45c8)))))) (set! G2e1c@pre-compile-r6rs-top-level (lambda (G45d2@x*) (call-with-values (lambda () (G2da4@top-level-expander G45d2@x*)) (lambda (G45d6@G45d4 G45d7@G45d5) ((lambda (G45da@invoke-code G45db@lib*) (begin (for-each G295e@G2805@invoke-library G45db@lib*) (G26e8@G2614@compile-core (G273e@G26f6@expanded->core G45da@invoke-code)))) G45d7@G45d5 G45d6@G45d4))))) (set! G2e1e@interaction-environment ((lambda (G45de@the-env) (lambda () (or G45de@the-env ((lambda (G45e0@lib G45e1@rib) (begin ((lambda (G45e4@subst) (begin (G2adb@set-rib-sym*! G45e1@rib (map car G45e4@subst)) (G2add@set-rib-mark**! G45e1@rib (map (lambda (G45e6@x) G2ab2@top-mark*) G45e4@subst)) (G2adf@set-rib-label*! G45e1@rib (map cdr G45e4@subst)))) (G2933@G27af@library-subst G45e0@lib)) ((lambda (G45e8@env) (begin (set! G45de@the-env G45e8@env) G45e8@env)) (G2dd0@make-interaction-env G45e1@rib '() '())))) (G2957@G27f7@find-library-by-name '(mosh interaction)) (G2ae5@make-empty-rib))))) '#f)) (set! G2e20@top-level-context (G26ea@G2618@make-parameter '#f)) (begin (set! G46f6@G2e20@top-level-context G2e20@top-level-context) (set! G46f5@G2e1e@interaction-environment G2e1e@interaction-environment) (set! G46f4@G2e1c@pre-compile-r6rs-top-level G2e1c@pre-compile-r6rs-top-level) (set! G46f3@G2e1a@compile-r6rs-top-level G2e1a@compile-r6rs-top-level) (set! G46f2@G2e18@syntax->datum G2e18@syntax->datum) (set! G46f1@G2e16@datum->syntax G2e16@datum->syntax) (set! G46f0@G2e14@identifier? G2e14@identifier?) (set! G46ef@G2e12@syntax-violation G2e12@syntax-violation) (set! G46ee@G2e10@syntax-violation* G2e10@syntax-violation*) (set! G46ed@G2e0e@syntax-error G2e0e@syntax-error) (set! G46ec@G2e0c@assertion-error G2e0c@assertion-error) (set! G46eb@G2e0a@expression-position G2e0a@expression-position) (set! G46ea@G2e08@extract-position-condition G2e08@extract-position-condition) (set! G46e9@G2e06@make-source-condition G2e06@make-source-condition) (set! G46e8@G2e04@bound-identifier=? G2e04@bound-identifier=?) (set! G46e7@G2e02@free-identifier=? G2e02@free-identifier=?) (set! G46e6@G2e00@generate-temporaries G2e00@generate-temporaries) (set! G46e5@G2dfe@make-export-env/macros G2dfe@make-export-env/macros) (set! G46e4@G2dfc@make-export-subst G2dfc@make-export-subst) (set! G46e3@G2dfa@build-exports G2dfa@build-exports) (set! G46e2@G2df8@rev-map-append G2df8@rev-map-append) (set! G46e1@G2df6@boot-library-expand G2df6@boot-library-expand) (set! G46e0@G2df4@library-expander G2df4@library-expander) (set! G46df@G2df2@eval G2df2@eval) (set! G46de@G2df0@expand G2df0@expand) (set! G46dd@G2dee@scheme-report-environment G2dee@scheme-report-environment) (set! G46dc@G2dec@null-environment G2dec@null-environment) (set! G46db@G2dea@environment G2dea@environment) (set! G46da@G2de8@environment-symbols G2de8@environment-symbols) (set! G46d9@G2de6@environment? G2de6@environment?) (set! G46d8@G2de4@parse-binding G2de4@parse-binding) (set! G46d7@G2de2@environment-bindings G2de2@environment-bindings) (set! G46d6@G2de0@interaction-environment-symbols G2de0@interaction-environment-symbols) (set! G46d5@G2dde@rp G2dde@rp) (set! G46d4@G2ddc@set-interaction-env-locs! G2ddc@set-interaction-env-locs!) (set! G46d3@G2dda@set-interaction-env-r! G2dda@set-interaction-env-r!) (set! G46d2@G2dd8@set-interaction-env-rib! G2dd8@set-interaction-env-rib!) (set! G46d1@G2dd6@interaction-env-locs G2dd6@interaction-env-locs) (set! G46d0@G2dd4@interaction-env-r G2dd4@interaction-env-r) (set! G46cf@G2dd2@interaction-env-rib G2dd2@interaction-env-rib) (set! G46ce@G2dd0@make-interaction-env G2dd0@make-interaction-env) (set! G46cd@G2dce@interaction-env? G2dce@interaction-env?) (set! G46cc@G2dcb@G2dc3 G2dcb@G2dc3) (set! G46cb@G2dc9@G2dc4 G2dc9@G2dc4) (set! G46ca@G2dc7@G2dc2 G2dc7@G2dc2) (set! G46c9@G2dc1@rp G2dc1@rp) (set! G46c8@G2dbf@set-env-itc! G2dbf@set-env-itc!) (set! G46c7@G2dbd@set-env-labels! G2dbd@set-env-labels!) (set! G46c6@G2dbb@set-env-names! G2dbb@set-env-names!) (set! G46c5@G2db9@env-itc G2db9@env-itc) (set! G46c4@G2db7@env-labels G2db7@env-labels) (set! G46c3@G2db5@env-names G2db5@env-names) (set! G46c2@G2db3@make-env G2db3@make-env) (set! G46c1@G2db1@env? G2db1@env?) (set! G46c0@G2dae@G2da6 G2dae@G2da6) (set! G46bf@G2dac@G2da7 G2dac@G2da7) (set! G46be@G2daa@G2da5 G2daa@G2da5) (set! G46bd@G2da4@top-level-expander G2da4@top-level-expander) (set! G46bc@G2da2@parse-top-level-program G2da2@parse-top-level-program) (set! G46bb@G2da0@core-library-expander G2da0@core-library-expander) (set! G46ba@G2d9e@library-body-expander G2d9e@library-body-expander) (set! G46b9@G2d9c@chi-interaction-expr G2d9c@chi-interaction-expr) (set! G46b8@G2d9a@chi-library-internal G2d9a@chi-library-internal) (set! G46b7@G2d98@imp-collector G2d98@imp-collector) (set! G46b6@G2d96@vis-collector G2d96@vis-collector) (set! G46b5@G2d94@inv-collector G2d94@inv-collector) (set! G46b4@G2d92@make-collector G2d92@make-collector) (set! G46b3@G2d90@make-top-rib G2d90@make-top-rib) (set! G46b2@G2d8e@parse-import-spec* G2d8e@parse-import-spec*) (set! G46b1@G2d8c@parse-library G2d8c@parse-library) (set! G46b0@G2d8a@parse-library-name G2d8a@parse-library-name) (set! G46af@G2d88@parse-exports G2d88@parse-exports) (set! G46ae@G2d86@expand-transformer G2d86@expand-transformer) (set! G46ad@G2d84@chi-body* G2d84@chi-body*) (set! G46ac@G2d82@chi-internal-module G2d82@chi-internal-module) (set! G46ab@G2d80@module-interface-exp-id* G2d80@module-interface-exp-id*) (set! G46aa@G2d7e@set-module-interface-exp-lab-vec! G2d7e@set-module-interface-exp-lab-vec!) (set! G46a9@G2d7c@set-module-interface-exp-id-vec! G2d7c@set-module-interface-exp-id-vec!) (set! G46a8@G2d7a@set-module-interface-first-mark! G2d7a@set-module-interface-first-mark!) (set! G46a7@G2d78@module-interface-exp-lab-vec G2d78@module-interface-exp-lab-vec) (set! G46a6@G2d76@module-interface-exp-id-vec G2d76@module-interface-exp-id-vec) (set! G46a5@G2d74@module-interface-first-mark G2d74@module-interface-first-mark) (set! G46a4@G2d72@make-module-interface G2d72@make-module-interface) (set! G46a3@G2d70@module-interface? G2d70@module-interface?) (set! G46a2@G2d6d@G2d65 G2d6d@G2d65) (set! G46a1@G2d6b@G2d66 G2d6b@G2d66) (set! G46a0@G2d69@G2d64 G2d69@G2d64) (set! G469f@G2d63@parse-module G2d63@parse-module) (set! G469e@G2d61@chi-internal G2d61@chi-internal) (set! G469d@G2d5f@find-dups G2d5f@find-dups) (set! G469c@G2d5d@find-bound=? G2d5d@find-bound=?) (set! G469b@G2d5b@chi-rhs* G2d5b@chi-rhs*) (set! G469a@G2d59@expand-interaction-rhs*/init* G2d59@expand-interaction-rhs*/init*) (set! G4699@G2d57@chi-rhs G2d57@chi-rhs) (set! G4698@G2d55@chi-defun G2d55@chi-defun) (set! G4697@G2d53@chi-lambda-clause* G2d53@chi-lambda-clause*) (set! G4696@G2d51@chi-lambda-clause G2d51@chi-lambda-clause) (set! G4695@G2d4f@verify-formals G2d4f@verify-formals) (set! G4694@G2d4d@chi-set! G2d4d@chi-set!) (set! G4693@G2d4b@chi-expr G2d4b@chi-expr) (set! G4692@G2d49@chi-application G2d49@chi-application) (set! G4691@G2d47@chi-expr* G2d47@chi-expr*) (set! G4690@G2d45@chi-global-macro G2d45@chi-global-macro) (set! G468f@G2d43@chi-local-macro G2d43@chi-local-macro) (set! G468e@G2d41@chi-macro G2d41@chi-macro) (set! G468d@G2d3f@do-macro-call G2d3f@do-macro-call) (set! G468c@G2d3d@local-macro-transformer G2d3d@local-macro-transformer) (set! G468b@G2d3b@macro-transformer G2d3b@macro-transformer) (set! G468a@G2d39@symbol-macro G2d39@symbol-macro) (set! G4689@G2d37@file-options-macro G2d37@file-options-macro) (set! G4688@G2d35@core-macro-transformer G2d35@core-macro-transformer) (set! G4687@G2d33@syntax-transformer G2d33@syntax-transformer) (set! G4686@G2d31@ellipsis-map G2d31@ellipsis-map) (set! G4685@G2d2f@syntax-case-transformer G2d2f@syntax-case-transformer) (set! G4684@G2d2d@verify-literals G2d2d@verify-literals) (set! G4683@G2d2b@underscore? G2d2b@underscore?) (set! G4682@G2d29@ellipsis? G2d29@ellipsis?) (set! G4681@G2d27@syntax-dispatch G2d27@syntax-dispatch) (set! G4680@G2d25@convert-pattern G2d25@convert-pattern) (set! G467f@G2d23@foreign-call-transformer G2d23@foreign-call-transformer) (set! G467e@G2d21@parameterize-macro G2d21@parameterize-macro) (set! G467d@G2d1f@incorrect-usage-macro G2d1f@incorrect-usage-macro) (set! G467c@G2d1d@define-condition-type-macro G2d1d@define-condition-type-macro) (set! G467b@G2d1b@define-record-type-macro G2d1b@define-record-type-macro) (set! G467a@G2d19@define-struct-macro G2d19@define-struct-macro) (set! G4679@G2d17@quasisyntax-macro G2d17@quasisyntax-macro) (set! G4678@G2d15@quasiquote-macro G2d15@quasiquote-macro) (set! G4677@G2d13@syntax-rules-macro G2d13@syntax-rules-macro) (set! G4676@G2d11@include-into-macro G2d11@include-into-macro) (set! G4675@G2d0f@include-macro G2d0f@include-macro) (set! G4674@G2d0d@do-include G2d0d@do-include) (set! G4673@G2d0b@cond-macro G2d0b@cond-macro) (set! G4672@G2d09@and-macro G2d09@and-macro) (set! G4671@G2d07@or-macro G2d07@or-macro) (set! G4670@G2d05@let*-macro G2d05@let*-macro) (set! G466f@G2d03@do-macro G2d03@do-macro) (set! G466e@G2d01@identifier-syntax-macro G2d01@identifier-syntax-macro) (set! G466d@G2cff@endianness-macro G2cff@endianness-macro) (set! G466c@G2cfd@assert-macro G2cfd@assert-macro) (set! G466b@G2cfb@delay-macro G2cfb@delay-macro) (set! G466a@G2cf9@time-macro G2cf9@time-macro) (set! G4669@G2cf7@define-enumeration-macro G2cf7@define-enumeration-macro) (set! G4668@G2cf5@guard-macro G2cf5@guard-macro) (set! G4667@G2cf3@trace-letrec-syntax-macro G2cf3@trace-letrec-syntax-macro) (set! G4666@G2cf1@trace-let-syntax-macro G2cf1@trace-let-syntax-macro) (set! G4665@G2cef@trace-let/rec-syntax G2cef@trace-let/rec-syntax) (set! G4664@G2ced@trace-define-syntax-macro G2ced@trace-define-syntax-macro) (set! G4663@G2ceb@trace-define-macro G2ceb@trace-define-macro) (set! G4662@G2ce9@trace-lambda-macro G2ce9@trace-lambda-macro) (set! G4661@G2ce7@let*-values-macro G2ce7@let*-values-macro) (set! G4660@G2ce5@let-values-macro G2ce5@let-values-macro) (set! G465f@G2ce3@let-macro G2ce3@let-macro) (set! G465e@G2ce1@invalid-fmls-error G2ce1@invalid-fmls-error) (set! G465d@G2cdf@with-syntax-macro G2cdf@with-syntax-macro) (set! G465c@G2cdd@bless G2cdd@bless) (set! G465b@G2cdb@lambda-transformer G2cdb@lambda-transformer) (set! G465a@G2cd9@case-lambda-transformer G2cd9@case-lambda-transformer) (set! G4659@G2cd7@quote-transformer G2cd7@quote-transformer) (set! G4658@G2cd5@case-macro G2cd5@case-macro) (set! G4657@G2cd3@or-transformer G2cd3@or-transformer) (set! G4656@G2cd1@and-transformer G2cd1@and-transformer) (set! G4655@G2ccf@if-transformer G2ccf@if-transformer) (set! G4654@G2ccd@unless-macro G2ccd@unless-macro) (set! G4653@G2ccb@when-macro G2ccb@when-macro) (set! G4652@G2cc9@record-constructor-descriptor-transformer G2cc9@record-constructor-descriptor-transformer) (set! G4651@G2cc7@record-type-descriptor-transformer G2cc7@record-type-descriptor-transformer) (set! G4650@G2cc5@type-descriptor-transformer G2cc5@type-descriptor-transformer) (set! G464f@G2cc3@fluid-let-syntax-transformer G2cc3@fluid-let-syntax-transformer) (set! G464e@G2cc1@letrec*-transformer G2cc1@letrec*-transformer) (set! G464d@G2cbf@letrec-transformer G2cbf@letrec-transformer) (set! G464c@G2cbd@letrec-helper G2cbd@letrec-helper) (set! G464b@G2cbb@add-lexicals G2cbb@add-lexicals) (set! G464a@G2cb9@add-lexical G2cb9@add-lexical) (set! G4649@G2cb7@set-lexical-mutable! G2cb7@set-lexical-mutable!) (set! G4648@G2cb5@lexical-mutable? G2cb5@lexical-mutable?) (set! G4647@G2cb3@lexical-var G2cb3@lexical-var) (set! G4646@G2cb1@scheme-stx G2cb1@scheme-stx) (set! G4645@G2caf@scheme-stx-hashtable G2caf@scheme-stx-hashtable) (set! G4644@G2cad@parse-define-syntax G2cad@parse-define-syntax) (set! G4643@G2cab@parse-define G2cab@parse-define) (set! G4642@G2b74@make-eval-transformer G2b74@make-eval-transformer) (set! G4641@G2b72@variable-transformer-procedure G2b72@variable-transformer-procedure) (set! G4640@G2b70@variable-transformer? G2b70@variable-transformer?) (set! G463f@G2b6e@make-variable-transformer G2b6e@make-variable-transformer) (set! G463e@G2b6c@sanitize-binding G2b6c@sanitize-binding) (set! G463d@G2b5e@syntax-type G2b5e@syntax-type) (set! G463c@G2b5c@raise-unbound-error G2b5c@raise-unbound-error) (set! G463b@G2b5a@binding-value G2b5a@binding-value) (set! G463a@G2b58@binding-type G2b58@binding-type) (set! G4639@G2b56@make-binding G2b56@make-binding) (set! G4638@G2b54@label->binding G2b54@label->binding) (set! G4637@G2b52@id->real-label G2b52@id->real-label) (set! G4636@G2b50@id->label G2b50@id->label) (set! G4635@G2b4e@same-marks*? G2b4e@same-marks*?) (set! G4634@G2b4c@stx->datum G2b4c@stx->datum) (set! G4633@G2b4a@strip G2b4a@strip) (set! G4632@G2b48@strip-annotations G2b48@strip-annotations) (set! G4631@G2b46@self-evaluating? G2b46@self-evaluating?) (set! G4630@G2b44@bound-id-member? G2b44@bound-id-member?) (set! G462f@G2b42@distinct-bound-ids? G2b42@distinct-bound-ids?) (set! G462e@G2b40@valid-bound-ids? G2b40@valid-bound-ids?) (set! G462d@G2b3e@free-id=? G2b3e@free-id=?) (set! G462c@G2b3c@bound-id=? G2b3c@bound-id=?) (set! G462b@G2b3a@same-marks? G2b3a@same-marks?) (set! G462a@G2b38@id->sym G2b38@id->sym) (set! G4629@G2b36@id? G2b36@id?) (set! G4628@G2b34@syntax->list G2b34@syntax->list) (set! G4627@G2b32@syntax-cdr G2b32@syntax-cdr) (set! G4626@G2b30@syntax-car G2b30@syntax-car) (set! G4625@G2b2e@syntax-list? G2b2e@syntax-list?) (set! G4624@G2b2c@syntax-null? G2b2c@syntax-null?) (set! G4623@G2b2a@syntax-vector? G2b2a@syntax-vector?) (set! G4622@G2b28@syntax-pair? G2b28@syntax-pair?) (set! G4621@G2b26@syntax-vector->list G2b26@syntax-vector->list) (set! G4620@G2b24@syntax-kind? G2b24@syntax-kind?) (set! G461f@G2b22@add-subst G2b22@add-subst) (set! G461e@G2b20@add-mark G2b20@add-mark) (set! G461d@G2b1e@mkstx G2b1e@mkstx) (set! G461c@G2b1c@join-wraps G2b1c@join-wraps) (set! G461b@G2b1a@anti-mark? G2b1a@anti-mark?) (set! G461a@G2b18@anti-mark G2b18@anti-mark) (set! G4619@G2b16@gen-mark G2b16@gen-mark) (set! G4618@G2b14@datum->stx G2b14@datum->stx) (set! G4617@G2b12@rp G2b12@rp) (set! G4616@G2b10@set-stx-ae*! G2b10@set-stx-ae*!) (set! G4615@G2b0e@set-stx-subst*! G2b0e@set-stx-subst*!) (set! G4614@G2b0c@set-stx-mark*! G2b0c@set-stx-mark*!) (set! G4613@G2b0a@set-stx-expr! G2b0a@set-stx-expr!) (set! G4612@G2b08@stx-ae* G2b08@stx-ae*) (set! G4611@G2b06@stx-subst* G2b06@stx-subst*) (set! G4610@G2b04@stx-mark* G2b04@stx-mark*) (set! G460f@G2b02@stx-expr G2b02@stx-expr) (set! G460e@G2b00@make-stx G2b00@make-stx) (set! G460d@G2afe@stx? G2afe@stx?) (set! G460c@G2afb@G2af3 G2afb@G2af3) (set! G460b@G2af9@G2af4 G2af9@G2af4) (set! G460a@G2af7@G2af2 G2af7@G2af2) (set! G4609@G2af1@make-full-rib G2af1@make-full-rib) (set! G4608@G2aef@unseal-rib! G2aef@unseal-rib!) (set! G4607@G2aed@seal-rib! G2aed@seal-rib!) (set! G4606@G2aeb@make-rib-map G2aeb@make-rib-map) (set! G4605@G2ae9@extend-rib/nc! G2ae9@extend-rib/nc!) (set! G4604@G2ae7@extend-rib! G2ae7@extend-rib!) (set! G4603@G2ae5@make-empty-rib G2ae5@make-empty-rib) (set! G4602@G2ae3@set-rib-cache! G2ae3@set-rib-cache!) (set! G4601@G2ae1@set-rib-sealed/freq! G2ae1@set-rib-sealed/freq!) (set! G4600@G2adf@set-rib-label*! G2adf@set-rib-label*!) (set! G45ff@G2add@set-rib-mark**! G2add@set-rib-mark**!) (set! G45fe@G2adb@set-rib-sym*! G2adb@set-rib-sym*!) (set! G45fd@G2ad9@rib-cache G2ad9@rib-cache) (set! G45fc@G2ad7@rib-sealed/freq G2ad7@rib-sealed/freq) (set! G45fb@G2ad5@rib-label* G2ad5@rib-label*) (set! G45fa@G2ad3@rib-mark** G2ad3@rib-mark**) (set! G45f9@G2ad1@rib-sym* G2ad1@rib-sym*) (set! G45f8@G2acf@make-rib G2acf@make-rib) (set! G45f7@G2acd@rib? G2acd@rib?) (set! G45f6@G2aca@G2ac2 G2aca@G2ac2) (set! G45f5@G2ac8@G2ac3 G2ac8@G2ac3) (set! G45f4@G2ac6@G2ac1 G2ac6@G2ac1) (set! G45f3@G2ac0@gen-define-label G2ac0@gen-define-label) (set! G45f2@G2abe@gen-define-label+loc G2abe@gen-define-label+loc) (set! G45f1@G2abc@gen-top-level-label G2abc@gen-top-level-label) (set! G45f0@G2aba@gen-label G2aba@gen-label) (set! G45ef@G2ab8@gen-global G2ab8@gen-global) (set! G45ee@G2ab6@gen-lexical G2ab6@gen-lexical) (set! G45ed@G2ab4@top-marked? G2ab4@top-marked?) (set! G45ec@G2ab2@top-mark* G2ab2@top-mark*) (set! G45eb@G2aad@set-union G2aad@set-union) (set! G45ea@G2aab@set-cons G2aab@set-cons) (G2954@G27f1@current-library-expander G2df4@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4700@G46fb G4702@G46fd G4704@G46fc G4707@&condition? G4709@make-&condition G470b@&condition-rtd G470d@&condition-rcd G4755@G4750 G4757@G4752 G4759@G4751 G475c@p? G475e@make-message-condition G4760@G474f G4762@message-condition? G4764@condition-message G4766@&message-rtd G4768@&message-rcd G476e@G4769 G4770@G476b G4772@G476a G4775@p? G4777@make-warning G4779@warning? G477b@&warning-rtd G477d@&warning-rcd G4783@G477e G4785@G4780 G4787@G477f G478a@p? G478c@make-serious-condition G478e@serious-condition? G4790@&serious-rtd G4792@&serious-rcd G4798@G4793 G479a@G4795 G479c@G4794 G479f@p? G47a1@make-error G47a3@error? G47a5@&error-rtd G47a7@&error-rcd G47ad@G47a8 G47af@G47aa G47b1@G47a9 G47b4@p? G47b6@make-violation G47b8@violation? G47ba@&violation-rtd G47bc@&violation-rcd G47c2@G47bd G47c4@G47bf G47c6@G47be G47c9@p? G47cb@make-assertion-violation G47cd@assertion-violation? G47cf@&assertion-rtd G47d1@&assertion-rcd G47d8@G47d3 G47da@G47d5 G47dc@G47d4 G47df@p? G47e1@make-irritants-condition G47e3@G47d2 G47e5@irritants-condition? G47e7@condition-irritants G47e9@&irritants-rtd G47eb@&irritants-rcd G47f2@G47ed G47f4@G47ef G47f6@G47ee G47f9@p? G47fb@make-who-condition G47fd@G47ec G47ff@who-condition? G4801@condition-who G4803@&who-rtd G4805@&who-rcd G480b@G4806 G480d@G4808 G480f@G4807 G4812@p? G4814@make-non-continuable-violation G4816@non-continuable-violation? G4818@&non-continuable-rtd G481a@&non-continuable-rcd G4820@G481b G4822@G481d G4824@G481c G4827@p? G4829@make-implementation-restriction-violation G482b@implementation-restriction-violation? G482d@&implementation-restriction-rtd G482f@&implementation-restriction-rcd G4835@G4830 G4837@G4832 G4839@G4831 G483c@p? G483e@make-lexical-violation G4840@lexical-violation? G4842@&lexical-rtd G4844@&lexical-rcd G484c@G4847 G484e@G4849 G4850@G4848 G4853@p? G4855@make-syntax-violation G4857@G4845 G4859@G4846 G485b@syntax-violation? G485d@syntax-violation-form G485f@syntax-violation-subform G4861@&syntax-rtd G4863@&syntax-rcd G4869@G4864 G486b@G4866 G486d@G4865 G4870@p? G4872@make-undefined-violation G4874@undefined-violation? G4876@&undefined-rtd G4878@&undefined-rcd G487e@G4879 G4880@G487b G4882@G487a G4885@p? G4887@make-i/o-error G4889@i/o-error? G488b@&i/o-rtd G488d@&i/o-rcd G4893@G488e G4895@G4890 G4897@G488f G489a@p? G489c@make-i/o-read-error G489e@i/o-read-error? G48a0@&i/o-read-rtd G48a2@&i/o-read-rcd G48a8@G48a3 G48aa@G48a5 G48ac@G48a4 G48af@p? G48b1@make-i/o-write-error G48b3@i/o-write-error? G48b5@&i/o-write-rtd G48b7@&i/o-write-rcd G48be@G48b9 G48c0@G48bb G48c2@G48ba G48c5@p? G48c7@make-i/o-invalid-position-error G48c9@G48b8 G48cb@i/o-invalid-position-error? G48cd@i/o-error-position G48cf@&i/o-invalid-position-rtd G48d1@&i/o-invalid-position-rcd G48d8@G48d3 G48da@G48d5 G48dc@G48d4 G48df@p? G48e1@make-i/o-filename-error G48e3@G48d2 G48e5@i/o-filename-error? G48e7@i/o-error-filename G48e9@&i/o-filename-rtd G48eb@&i/o-filename-rcd G48f1@G48ec G48f3@G48ee G48f5@G48ed G48f8@p? G48fa@make-i/o-file-protection-error G48fc@i/o-file-protection-error? G48fe@&i/o-file-protection-rtd G4900@&i/o-file-protection-rcd G4906@G4901 G4908@G4903 G490a@G4902 G490d@p? G490f@make-i/o-file-is-read-only-error G4911@i/o-file-is-read-only-error? G4913@&i/o-file-is-read-only-rtd G4915@&i/o-file-is-read-only-rcd G491b@G4916 G491d@G4918 G491f@G4917 G4922@p? G4924@make-i/o-file-already-exists-error G4926@i/o-file-already-exists-error? G4928@&i/o-file-already-exists-rtd G492a@&i/o-file-already-exists-rcd G4930@G492b G4932@G492d G4934@G492c G4937@p? G4939@make-i/o-file-does-not-exist-error G493b@i/o-file-does-not-exist-error? G493d@&i/o-file-does-not-exist-rtd G493f@&i/o-file-does-not-exist-rcd G4946@G4941 G4948@G4943 G494a@G4942 G494d@p? G494f@make-i/o-port-error G4951@G4940 G4953@i/o-port-error? G4955@i/o-error-port G4957@&i/o-port-rtd G4959@&i/o-port-rcd G495f@G495a G4961@G495c G4963@G495b G4966@p? G4968@make-i/o-decoding-error G496a@i/o-decoding-error? G496c@&i/o-decoding-rtd G496e@&i/o-decoding-rcd G4975@G4970 G4977@G4972 G4979@G4971 G497c@p? G497e@make-i/o-encoding-error G4980@G496f G4982@i/o-encoding-error? G4984@i/o-encoding-error-char G4986@&i/o-encoding-rtd G4988@&i/o-encoding-rcd G498e@G4989 G4990@G498b G4992@G498a G4995@p? G4997@make-no-infinities-violation G4999@no-infinities-violation? G499b@&no-infinities-rtd G499d@&no-infinities-rcd G49a3@G499e G49a5@G49a0 G49a7@G499f G49aa@p? G49ac@make-no-nans-violation G49ae@no-nans-violation? G49b0@&no-nans-rtd G49b2@&no-nans-rcd) (begin (set! G4700@G46fb (make-record-type-descriptor '&condition '#f 'G46fe '#f '#f '#())) (set! G4702@G46fd '#f) (set! G4704@G46fc (make-record-constructor-descriptor G4700@G46fb '#f G4702@G46fd)) (set! G4707@&condition? (record-predicate G4700@G46fb)) (set! G4709@make-&condition (record-constructor G4704@G46fc)) (set! G470b@&condition-rtd G4700@G46fb) (set! G470d@&condition-rcd G4704@G46fc) (set! G4755@G4750 (make-record-type-descriptor '&message G4700@G46fb 'G4753 '#f '#f '#((immutable message)))) (set! G4757@G4752 '#f) (set! G4759@G4751 (make-record-constructor-descriptor G4755@G4750 G4704@G46fc G4757@G4752)) (set! G475c@p? (record-predicate G4755@G4750)) (set! G475e@make-message-condition (record-constructor G4759@G4751)) (set! G4760@G474f (record-accessor G4755@G4750 '0)) (set! G4762@message-condition? (condition-predicate G4755@G4750)) (set! G4764@condition-message (condition-accessor G4755@G4750 G4760@G474f)) (set! G4766@&message-rtd G4755@G4750) (set! G4768@&message-rcd G4759@G4751) (set! G476e@G4769 (make-record-type-descriptor '&warning G4700@G46fb 'G476c '#f '#f '#())) (set! G4770@G476b '#f) (set! G4772@G476a (make-record-constructor-descriptor G476e@G4769 G4704@G46fc G4770@G476b)) (set! G4775@p? (record-predicate G476e@G4769)) (set! G4777@make-warning (record-constructor G4772@G476a)) (set! G4779@warning? (condition-predicate G476e@G4769)) (set! G477b@&warning-rtd G476e@G4769) (set! G477d@&warning-rcd G4772@G476a) (set! G4783@G477e (make-record-type-descriptor '&serious G4700@G46fb 'G4781 '#f '#f '#())) (set! G4785@G4780 '#f) (set! G4787@G477f (make-record-constructor-descriptor G4783@G477e G4704@G46fc G4785@G4780)) (set! G478a@p? (record-predicate G4783@G477e)) (set! G478c@make-serious-condition (record-constructor G4787@G477f)) (set! G478e@serious-condition? (condition-predicate G4783@G477e)) (set! G4790@&serious-rtd G4783@G477e) (set! G4792@&serious-rcd G4787@G477f) (set! G4798@G4793 (make-record-type-descriptor '&error G4783@G477e 'G4796 '#f '#f '#())) (set! G479a@G4795 '#f) (set! G479c@G4794 (make-record-constructor-descriptor G4798@G4793 G4787@G477f G479a@G4795)) (set! G479f@p? (record-predicate G4798@G4793)) (set! G47a1@make-error (record-constructor G479c@G4794)) (set! G47a3@error? (condition-predicate G4798@G4793)) (set! G47a5@&error-rtd G4798@G4793) (set! G47a7@&error-rcd G479c@G4794) (set! G47ad@G47a8 (make-record-type-descriptor '&violation G4783@G477e 'G47ab '#f '#f '#())) (set! G47af@G47aa '#f) (set! G47b1@G47a9 (make-record-constructor-descriptor G47ad@G47a8 G4787@G477f G47af@G47aa)) (set! G47b4@p? (record-predicate G47ad@G47a8)) (set! G47b6@make-violation (record-constructor G47b1@G47a9)) (set! G47b8@violation? (condition-predicate G47ad@G47a8)) (set! G47ba@&violation-rtd G47ad@G47a8) (set! G47bc@&violation-rcd G47b1@G47a9) (set! G47c2@G47bd (make-record-type-descriptor '&assertion G47ad@G47a8 'G47c0 '#f '#f '#())) (set! G47c4@G47bf '#f) (set! G47c6@G47be (make-record-constructor-descriptor G47c2@G47bd G47b1@G47a9 G47c4@G47bf)) (set! G47c9@p? (record-predicate G47c2@G47bd)) (set! G47cb@make-assertion-violation (record-constructor G47c6@G47be)) (set! G47cd@assertion-violation? (condition-predicate G47c2@G47bd)) (set! G47cf@&assertion-rtd G47c2@G47bd) (set! G47d1@&assertion-rcd G47c6@G47be) (set! G47d8@G47d3 (make-record-type-descriptor '&irritants G4700@G46fb 'G47d6 '#f '#f '#((immutable irritants)))) (set! G47da@G47d5 '#f) (set! G47dc@G47d4 (make-record-constructor-descriptor G47d8@G47d3 G4704@G46fc G47da@G47d5)) (set! G47df@p? (record-predicate G47d8@G47d3)) (set! G47e1@make-irritants-condition (record-constructor G47dc@G47d4)) (set! G47e3@G47d2 (record-accessor G47d8@G47d3 '0)) (set! G47e5@irritants-condition? (condition-predicate G47d8@G47d3)) (set! G47e7@condition-irritants (condition-accessor G47d8@G47d3 G47e3@G47d2)) (set! G47e9@&irritants-rtd G47d8@G47d3) (set! G47eb@&irritants-rcd G47dc@G47d4) (set! G47f2@G47ed (make-record-type-descriptor '&who G4700@G46fb 'G47f0 '#f '#f '#((immutable who)))) (set! G47f4@G47ef '#f) (set! G47f6@G47ee (make-record-constructor-descriptor G47f2@G47ed G4704@G46fc G47f4@G47ef)) (set! G47f9@p? (record-predicate G47f2@G47ed)) (set! G47fb@make-who-condition (record-constructor G47f6@G47ee)) (set! G47fd@G47ec (record-accessor G47f2@G47ed '0)) (set! G47ff@who-condition? (condition-predicate G47f2@G47ed)) (set! G4801@condition-who (condition-accessor G47f2@G47ed G47fd@G47ec)) (set! G4803@&who-rtd G47f2@G47ed) (set! G4805@&who-rcd G47f6@G47ee) (set! G480b@G4806 (make-record-type-descriptor '&non-continuable G47ad@G47a8 'G4809 '#f '#f '#())) (set! G480d@G4808 '#f) (set! G480f@G4807 (make-record-constructor-descriptor G480b@G4806 G47b1@G47a9 G480d@G4808)) (set! G4812@p? (record-predicate G480b@G4806)) (set! G4814@make-non-continuable-violation (record-constructor G480f@G4807)) (set! G4816@non-continuable-violation? (condition-predicate G480b@G4806)) (set! G4818@&non-continuable-rtd G480b@G4806) (set! G481a@&non-continuable-rcd G480f@G4807) (set! G4820@G481b (make-record-type-descriptor '&implementation-restriction G47ad@G47a8 'G481e '#f '#f '#())) (set! G4822@G481d '#f) (set! G4824@G481c (make-record-constructor-descriptor G4820@G481b G47b1@G47a9 G4822@G481d)) (set! G4827@p? (record-predicate G4820@G481b)) (set! G4829@make-implementation-restriction-violation (record-constructor G4824@G481c)) (set! G482b@implementation-restriction-violation? (condition-predicate G4820@G481b)) (set! G482d@&implementation-restriction-rtd G4820@G481b) (set! G482f@&implementation-restriction-rcd G4824@G481c) (set! G4835@G4830 (make-record-type-descriptor '&lexical G47ad@G47a8 'G4833 '#f '#f '#())) (set! G4837@G4832 '#f) (set! G4839@G4831 (make-record-constructor-descriptor G4835@G4830 G47b1@G47a9 G4837@G4832)) (set! G483c@p? (record-predicate G4835@G4830)) (set! G483e@make-lexical-violation (record-constructor G4839@G4831)) (set! G4840@lexical-violation? (condition-predicate G4835@G4830)) (set! G4842@&lexical-rtd G4835@G4830) (set! G4844@&lexical-rcd G4839@G4831) (set! G484c@G4847 (make-record-type-descriptor '&syntax G47ad@G47a8 'G484a '#f '#f '#((immutable form) (immutable subform)))) (set! G484e@G4849 '#f) (set! G4850@G4848 (make-record-constructor-descriptor G484c@G4847 G47b1@G47a9 G484e@G4849)) (set! G4853@p? (record-predicate G484c@G4847)) (set! G4855@make-syntax-violation (record-constructor G4850@G4848)) (set! G4857@G4845 (record-accessor G484c@G4847 '0)) (set! G4859@G4846 (record-accessor G484c@G4847 '1)) (set! G485b@syntax-violation? (condition-predicate G484c@G4847)) (set! G485d@syntax-violation-form (condition-accessor G484c@G4847 G4857@G4845)) (set! G485f@syntax-violation-subform (condition-accessor G484c@G4847 G4859@G4846)) (set! G4861@&syntax-rtd G484c@G4847) (set! G4863@&syntax-rcd G4850@G4848) (set! G4869@G4864 (make-record-type-descriptor '&undefined G47ad@G47a8 'G4867 '#f '#f '#())) (set! G486b@G4866 '#f) (set! G486d@G4865 (make-record-constructor-descriptor G4869@G4864 G47b1@G47a9 G486b@G4866)) (set! G4870@p? (record-predicate G4869@G4864)) (set! G4872@make-undefined-violation (record-constructor G486d@G4865)) (set! G4874@undefined-violation? (condition-predicate G4869@G4864)) (set! G4876@&undefined-rtd G4869@G4864) (set! G4878@&undefined-rcd G486d@G4865) (set! G487e@G4879 (make-record-type-descriptor '&i/o G4798@G4793 'G487c '#f '#f '#())) (set! G4880@G487b '#f) (set! G4882@G487a (make-record-constructor-descriptor G487e@G4879 G479c@G4794 G4880@G487b)) (set! G4885@p? (record-predicate G487e@G4879)) (set! G4887@make-i/o-error (record-constructor G4882@G487a)) (set! G4889@i/o-error? (condition-predicate G487e@G4879)) (set! G488b@&i/o-rtd G487e@G4879) (set! G488d@&i/o-rcd G4882@G487a) (set! G4893@G488e (make-record-type-descriptor '&i/o-read G487e@G4879 'G4891 '#f '#f '#())) (set! G4895@G4890 '#f) (set! G4897@G488f (make-record-constructor-descriptor G4893@G488e G4882@G487a G4895@G4890)) (set! G489a@p? (record-predicate G4893@G488e)) (set! G489c@make-i/o-read-error (record-constructor G4897@G488f)) (set! G489e@i/o-read-error? (condition-predicate G4893@G488e)) (set! G48a0@&i/o-read-rtd G4893@G488e) (set! G48a2@&i/o-read-rcd G4897@G488f) (set! G48a8@G48a3 (make-record-type-descriptor '&i/o-write G487e@G4879 'G48a6 '#f '#f '#())) (set! G48aa@G48a5 '#f) (set! G48ac@G48a4 (make-record-constructor-descriptor G48a8@G48a3 G4882@G487a G48aa@G48a5)) (set! G48af@p? (record-predicate G48a8@G48a3)) (set! G48b1@make-i/o-write-error (record-constructor G48ac@G48a4)) (set! G48b3@i/o-write-error? (condition-predicate G48a8@G48a3)) (set! G48b5@&i/o-write-rtd G48a8@G48a3) (set! G48b7@&i/o-write-rcd G48ac@G48a4) (set! G48be@G48b9 (make-record-type-descriptor '&i/o-invalid-position G487e@G4879 'G48bc '#f '#f '#((immutable position)))) (set! G48c0@G48bb '#f) (set! G48c2@G48ba (make-record-constructor-descriptor G48be@G48b9 G4882@G487a G48c0@G48bb)) (set! G48c5@p? (record-predicate G48be@G48b9)) (set! G48c7@make-i/o-invalid-position-error (record-constructor G48c2@G48ba)) (set! G48c9@G48b8 (record-accessor G48be@G48b9 '0)) (set! G48cb@i/o-invalid-position-error? (condition-predicate G48be@G48b9)) (set! G48cd@i/o-error-position (condition-accessor G48be@G48b9 G48c9@G48b8)) (set! G48cf@&i/o-invalid-position-rtd G48be@G48b9) (set! G48d1@&i/o-invalid-position-rcd G48c2@G48ba) (set! G48d8@G48d3 (make-record-type-descriptor '&i/o-filename G487e@G4879 'G48d6 '#f '#f '#((immutable filename)))) (set! G48da@G48d5 '#f) (set! G48dc@G48d4 (make-record-constructor-descriptor G48d8@G48d3 G4882@G487a G48da@G48d5)) (set! G48df@p? (record-predicate G48d8@G48d3)) (set! G48e1@make-i/o-filename-error (record-constructor G48dc@G48d4)) (set! G48e3@G48d2 (record-accessor G48d8@G48d3 '0)) (set! G48e5@i/o-filename-error? (condition-predicate G48d8@G48d3)) (set! G48e7@i/o-error-filename (condition-accessor G48d8@G48d3 G48e3@G48d2)) (set! G48e9@&i/o-filename-rtd G48d8@G48d3) (set! G48eb@&i/o-filename-rcd G48dc@G48d4) (set! G48f1@G48ec (make-record-type-descriptor '&i/o-file-protection G48d8@G48d3 'G48ef '#f '#f '#())) (set! G48f3@G48ee '#f) (set! G48f5@G48ed (make-record-constructor-descriptor G48f1@G48ec G48dc@G48d4 G48f3@G48ee)) (set! G48f8@p? (record-predicate G48f1@G48ec)) (set! G48fa@make-i/o-file-protection-error (record-constructor G48f5@G48ed)) (set! G48fc@i/o-file-protection-error? (condition-predicate G48f1@G48ec)) (set! G48fe@&i/o-file-protection-rtd G48f1@G48ec) (set! G4900@&i/o-file-protection-rcd G48f5@G48ed) (set! G4906@G4901 (make-record-type-descriptor '&i/o-file-is-read-only G48f1@G48ec 'G4904 '#f '#f '#())) (set! G4908@G4903 '#f) (set! G490a@G4902 (make-record-constructor-descriptor G4906@G4901 G48f5@G48ed G4908@G4903)) (set! G490d@p? (record-predicate G4906@G4901)) (set! G490f@make-i/o-file-is-read-only-error (record-constructor G490a@G4902)) (set! G4911@i/o-file-is-read-only-error? (condition-predicate G4906@G4901)) (set! G4913@&i/o-file-is-read-only-rtd G4906@G4901) (set! G4915@&i/o-file-is-read-only-rcd G490a@G4902) (set! G491b@G4916 (make-record-type-descriptor '&i/o-file-already-exists G48d8@G48d3 'G4919 '#f '#f '#())) (set! G491d@G4918 '#f) (set! G491f@G4917 (make-record-constructor-descriptor G491b@G4916 G48dc@G48d4 G491d@G4918)) (set! G4922@p? (record-predicate G491b@G4916)) (set! G4924@make-i/o-file-already-exists-error (record-constructor G491f@G4917)) (set! G4926@i/o-file-already-exists-error? (condition-predicate G491b@G4916)) (set! G4928@&i/o-file-already-exists-rtd G491b@G4916) (set! G492a@&i/o-file-already-exists-rcd G491f@G4917) (set! G4930@G492b (make-record-type-descriptor '&i/o-file-does-not-exist G48d8@G48d3 'G492e '#f '#f '#())) (set! G4932@G492d '#f) (set! G4934@G492c (make-record-constructor-descriptor G4930@G492b G48dc@G48d4 G4932@G492d)) (set! G4937@p? (record-predicate G4930@G492b)) (set! G4939@make-i/o-file-does-not-exist-error (record-constructor G4934@G492c)) (set! G493b@i/o-file-does-not-exist-error? (condition-predicate G4930@G492b)) (set! G493d@&i/o-file-does-not-exist-rtd G4930@G492b) (set! G493f@&i/o-file-does-not-exist-rcd G4934@G492c) (set! G4946@G4941 (make-record-type-descriptor '&i/o-port G487e@G4879 'G4944 '#f '#f '#((immutable port)))) (set! G4948@G4943 '#f) (set! G494a@G4942 (make-record-constructor-descriptor G4946@G4941 G4882@G487a G4948@G4943)) (set! G494d@p? (record-predicate G4946@G4941)) (set! G494f@make-i/o-port-error (record-constructor G494a@G4942)) (set! G4951@G4940 (record-accessor G4946@G4941 '0)) (set! G4953@i/o-port-error? (condition-predicate G4946@G4941)) (set! G4955@i/o-error-port (condition-accessor G4946@G4941 G4951@G4940)) (set! G4957@&i/o-port-rtd G4946@G4941) (set! G4959@&i/o-port-rcd G494a@G4942) (set! G495f@G495a (make-record-type-descriptor '&i/o-decoding G4946@G4941 'G495d '#f '#f '#())) (set! G4961@G495c '#f) (set! G4963@G495b (make-record-constructor-descriptor G495f@G495a G494a@G4942 G4961@G495c)) (set! G4966@p? (record-predicate G495f@G495a)) (set! G4968@make-i/o-decoding-error (record-constructor G4963@G495b)) (set! G496a@i/o-decoding-error? (condition-predicate G495f@G495a)) (set! G496c@&i/o-decoding-rtd G495f@G495a) (set! G496e@&i/o-decoding-rcd G4963@G495b) (set! G4975@G4970 (make-record-type-descriptor '&i/o-encoding G4946@G4941 'G4973 '#f '#f '#((immutable char)))) (set! G4977@G4972 '#f) (set! G4979@G4971 (make-record-constructor-descriptor G4975@G4970 G494a@G4942 G4977@G4972)) (set! G497c@p? (record-predicate G4975@G4970)) (set! G497e@make-i/o-encoding-error (record-constructor G4979@G4971)) (set! G4980@G496f (record-accessor G4975@G4970 '0)) (set! G4982@i/o-encoding-error? (condition-predicate G4975@G4970)) (set! G4984@i/o-encoding-error-char (condition-accessor G4975@G4970 G4980@G496f)) (set! G4986@&i/o-encoding-rtd G4975@G4970) (set! G4988@&i/o-encoding-rcd G4979@G4971) (set! G498e@G4989 (make-record-type-descriptor '&no-infinities G4820@G481b 'G498c '#f '#f '#())) (set! G4990@G498b '#f) (set! G4992@G498a (make-record-constructor-descriptor G498e@G4989 G4824@G481c G4990@G498b)) (set! G4995@p? (record-predicate G498e@G4989)) (set! G4997@make-no-infinities-violation (record-constructor G4992@G498a)) (set! G4999@no-infinities-violation? (condition-predicate G498e@G4989)) (set! G499b@&no-infinities-rtd G498e@G4989) (set! G499d@&no-infinities-rcd G4992@G498a) (set! G49a3@G499e (make-record-type-descriptor '&no-nans G4820@G481b 'G49a1 '#f '#f '#())) (set! G49a5@G49a0 '#f) (set! G49a7@G499f (make-record-constructor-descriptor G49a3@G499e G4824@G481c G49a5@G49a0)) (set! G49aa@p? (record-predicate G49a3@G499e)) (set! G49ac@make-no-nans-violation (record-constructor G49a7@G499f)) (set! G49ae@no-nans-violation? (condition-predicate G49a3@G499e)) (set! G49b0@&no-nans-rtd G49a3@G499e) (set! G49b2@&no-nans-rcd G49a7@G499f) (begin (set! G4aa3@G49b2@&no-nans-rcd G49b2@&no-nans-rcd) (set! G4aa2@G49b0@&no-nans-rtd G49b0@&no-nans-rtd) (set! G4aa1@G49ae@no-nans-violation? G49ae@no-nans-violation?) (set! G4aa0@G49ac@make-no-nans-violation G49ac@make-no-nans-violation) (set! G4a9f@G49aa@p? G49aa@p?) (set! G4a9e@G49a7@G499f G49a7@G499f) (set! G4a9d@G49a5@G49a0 G49a5@G49a0) (set! G4a9c@G49a3@G499e G49a3@G499e) (set! G4a9b@G499d@&no-infinities-rcd G499d@&no-infinities-rcd) (set! G4a9a@G499b@&no-infinities-rtd G499b@&no-infinities-rtd) (set! G4a99@G4999@no-infinities-violation? G4999@no-infinities-violation?) (set! G4a98@G4997@make-no-infinities-violation G4997@make-no-infinities-violation) (set! G4a97@G4995@p? G4995@p?) (set! G4a96@G4992@G498a G4992@G498a) (set! G4a95@G4990@G498b G4990@G498b) (set! G4a94@G498e@G4989 G498e@G4989) (set! G4a93@G4988@&i/o-encoding-rcd G4988@&i/o-encoding-rcd) (set! G4a92@G4986@&i/o-encoding-rtd G4986@&i/o-encoding-rtd) (set! G4a91@G4984@i/o-encoding-error-char G4984@i/o-encoding-error-char) (set! G4a90@G4982@i/o-encoding-error? G4982@i/o-encoding-error?) (set! G4a8f@G4980@G496f G4980@G496f) (set! G4a8e@G497e@make-i/o-encoding-error G497e@make-i/o-encoding-error) (set! G4a8d@G497c@p? G497c@p?) (set! G4a8c@G4979@G4971 G4979@G4971) (set! G4a8b@G4977@G4972 G4977@G4972) (set! G4a8a@G4975@G4970 G4975@G4970) (set! G4a89@G496e@&i/o-decoding-rcd G496e@&i/o-decoding-rcd) (set! G4a88@G496c@&i/o-decoding-rtd G496c@&i/o-decoding-rtd) (set! G4a87@G496a@i/o-decoding-error? G496a@i/o-decoding-error?) (set! G4a86@G4968@make-i/o-decoding-error G4968@make-i/o-decoding-error) (set! G4a85@G4966@p? G4966@p?) (set! G4a84@G4963@G495b G4963@G495b) (set! G4a83@G4961@G495c G4961@G495c) (set! G4a82@G495f@G495a G495f@G495a) (set! G4a81@G4959@&i/o-port-rcd G4959@&i/o-port-rcd) (set! G4a80@G4957@&i/o-port-rtd G4957@&i/o-port-rtd) (set! G4a7f@G4955@i/o-error-port G4955@i/o-error-port) (set! G4a7e@G4953@i/o-port-error? G4953@i/o-port-error?) (set! G4a7d@G4951@G4940 G4951@G4940) (set! G4a7c@G494f@make-i/o-port-error G494f@make-i/o-port-error) (set! G4a7b@G494d@p? G494d@p?) (set! G4a7a@G494a@G4942 G494a@G4942) (set! G4a79@G4948@G4943 G4948@G4943) (set! G4a78@G4946@G4941 G4946@G4941) (set! G4a77@G493f@&i/o-file-does-not-exist-rcd G493f@&i/o-file-does-not-exist-rcd) (set! G4a76@G493d@&i/o-file-does-not-exist-rtd G493d@&i/o-file-does-not-exist-rtd) (set! G4a75@G493b@i/o-file-does-not-exist-error? G493b@i/o-file-does-not-exist-error?) (set! G4a74@G4939@make-i/o-file-does-not-exist-error G4939@make-i/o-file-does-not-exist-error) (set! G4a73@G4937@p? G4937@p?) (set! G4a72@G4934@G492c G4934@G492c) (set! G4a71@G4932@G492d G4932@G492d) (set! G4a70@G4930@G492b G4930@G492b) (set! G4a6f@G492a@&i/o-file-already-exists-rcd G492a@&i/o-file-already-exists-rcd) (set! G4a6e@G4928@&i/o-file-already-exists-rtd G4928@&i/o-file-already-exists-rtd) (set! G4a6d@G4926@i/o-file-already-exists-error? G4926@i/o-file-already-exists-error?) (set! G4a6c@G4924@make-i/o-file-already-exists-error G4924@make-i/o-file-already-exists-error) (set! G4a6b@G4922@p? G4922@p?) (set! G4a6a@G491f@G4917 G491f@G4917) (set! G4a69@G491d@G4918 G491d@G4918) (set! G4a68@G491b@G4916 G491b@G4916) (set! G4a67@G4915@&i/o-file-is-read-only-rcd G4915@&i/o-file-is-read-only-rcd) (set! G4a66@G4913@&i/o-file-is-read-only-rtd G4913@&i/o-file-is-read-only-rtd) (set! G4a65@G4911@i/o-file-is-read-only-error? G4911@i/o-file-is-read-only-error?) (set! G4a64@G490f@make-i/o-file-is-read-only-error G490f@make-i/o-file-is-read-only-error) (set! G4a63@G490d@p? G490d@p?) (set! G4a62@G490a@G4902 G490a@G4902) (set! G4a61@G4908@G4903 G4908@G4903) (set! G4a60@G4906@G4901 G4906@G4901) (set! G4a5f@G4900@&i/o-file-protection-rcd G4900@&i/o-file-protection-rcd) (set! G4a5e@G48fe@&i/o-file-protection-rtd G48fe@&i/o-file-protection-rtd) (set! G4a5d@G48fc@i/o-file-protection-error? G48fc@i/o-file-protection-error?) (set! G4a5c@G48fa@make-i/o-file-protection-error G48fa@make-i/o-file-protection-error) (set! G4a5b@G48f8@p? G48f8@p?) (set! G4a5a@G48f5@G48ed G48f5@G48ed) (set! G4a59@G48f3@G48ee G48f3@G48ee) (set! G4a58@G48f1@G48ec G48f1@G48ec) (set! G4a57@G48eb@&i/o-filename-rcd G48eb@&i/o-filename-rcd) (set! G4a56@G48e9@&i/o-filename-rtd G48e9@&i/o-filename-rtd) (set! G4a55@G48e7@i/o-error-filename G48e7@i/o-error-filename) (set! G4a54@G48e5@i/o-filename-error? G48e5@i/o-filename-error?) (set! G4a53@G48e3@G48d2 G48e3@G48d2) (set! G4a52@G48e1@make-i/o-filename-error G48e1@make-i/o-filename-error) (set! G4a51@G48df@p? G48df@p?) (set! G4a50@G48dc@G48d4 G48dc@G48d4) (set! G4a4f@G48da@G48d5 G48da@G48d5) (set! G4a4e@G48d8@G48d3 G48d8@G48d3) (set! G4a4d@G48d1@&i/o-invalid-position-rcd G48d1@&i/o-invalid-position-rcd) (set! G4a4c@G48cf@&i/o-invalid-position-rtd G48cf@&i/o-invalid-position-rtd) (set! G4a4b@G48cd@i/o-error-position G48cd@i/o-error-position) (set! G4a4a@G48cb@i/o-invalid-position-error? G48cb@i/o-invalid-position-error?) (set! G4a49@G48c9@G48b8 G48c9@G48b8) (set! G4a48@G48c7@make-i/o-invalid-position-error G48c7@make-i/o-invalid-position-error) (set! G4a47@G48c5@p? G48c5@p?) (set! G4a46@G48c2@G48ba G48c2@G48ba) (set! G4a45@G48c0@G48bb G48c0@G48bb) (set! G4a44@G48be@G48b9 G48be@G48b9) (set! G4a43@G48b7@&i/o-write-rcd G48b7@&i/o-write-rcd) (set! G4a42@G48b5@&i/o-write-rtd G48b5@&i/o-write-rtd) (set! G4a41@G48b3@i/o-write-error? G48b3@i/o-write-error?) (set! G4a40@G48b1@make-i/o-write-error G48b1@make-i/o-write-error) (set! G4a3f@G48af@p? G48af@p?) (set! G4a3e@G48ac@G48a4 G48ac@G48a4) (set! G4a3d@G48aa@G48a5 G48aa@G48a5) (set! G4a3c@G48a8@G48a3 G48a8@G48a3) (set! G4a3b@G48a2@&i/o-read-rcd G48a2@&i/o-read-rcd) (set! G4a3a@G48a0@&i/o-read-rtd G48a0@&i/o-read-rtd) (set! G4a39@G489e@i/o-read-error? G489e@i/o-read-error?) (set! G4a38@G489c@make-i/o-read-error G489c@make-i/o-read-error) (set! G4a37@G489a@p? G489a@p?) (set! G4a36@G4897@G488f G4897@G488f) (set! G4a35@G4895@G4890 G4895@G4890) (set! G4a34@G4893@G488e G4893@G488e) (set! G4a33@G488d@&i/o-rcd G488d@&i/o-rcd) (set! G4a32@G488b@&i/o-rtd G488b@&i/o-rtd) (set! G4a31@G4889@i/o-error? G4889@i/o-error?) (set! G4a30@G4887@make-i/o-error G4887@make-i/o-error) (set! G4a2f@G4885@p? G4885@p?) (set! G4a2e@G4882@G487a G4882@G487a) (set! G4a2d@G4880@G487b G4880@G487b) (set! G4a2c@G487e@G4879 G487e@G4879) (set! G4a2b@G4878@&undefined-rcd G4878@&undefined-rcd) (set! G4a2a@G4876@&undefined-rtd G4876@&undefined-rtd) (set! G4a29@G4874@undefined-violation? G4874@undefined-violation?) (set! G4a28@G4872@make-undefined-violation G4872@make-undefined-violation) (set! G4a27@G4870@p? G4870@p?) (set! G4a26@G486d@G4865 G486d@G4865) (set! G4a25@G486b@G4866 G486b@G4866) (set! G4a24@G4869@G4864 G4869@G4864) (set! G4a23@G4863@&syntax-rcd G4863@&syntax-rcd) (set! G4a22@G4861@&syntax-rtd G4861@&syntax-rtd) (set! G4a21@G485f@syntax-violation-subform G485f@syntax-violation-subform) (set! G4a20@G485d@syntax-violation-form G485d@syntax-violation-form) (set! G4a1f@G485b@syntax-violation? G485b@syntax-violation?) (set! G4a1e@G4859@G4846 G4859@G4846) (set! G4a1d@G4857@G4845 G4857@G4845) (set! G4a1c@G4855@make-syntax-violation G4855@make-syntax-violation) (set! G4a1b@G4853@p? G4853@p?) (set! G4a1a@G4850@G4848 G4850@G4848) (set! G4a19@G484e@G4849 G484e@G4849) (set! G4a18@G484c@G4847 G484c@G4847) (set! G4a17@G4844@&lexical-rcd G4844@&lexical-rcd) (set! G4a16@G4842@&lexical-rtd G4842@&lexical-rtd) (set! G4a15@G4840@lexical-violation? G4840@lexical-violation?) (set! G4a14@G483e@make-lexical-violation G483e@make-lexical-violation) (set! G4a13@G483c@p? G483c@p?) (set! G4a12@G4839@G4831 G4839@G4831) (set! G4a11@G4837@G4832 G4837@G4832) (set! G4a10@G4835@G4830 G4835@G4830) (set! G4a0f@G482f@&implementation-restriction-rcd G482f@&implementation-restriction-rcd) (set! G4a0e@G482d@&implementation-restriction-rtd G482d@&implementation-restriction-rtd) (set! G4a0d@G482b@implementation-restriction-violation? G482b@implementation-restriction-violation?) (set! G4a0c@G4829@make-implementation-restriction-violation G4829@make-implementation-restriction-violation) (set! G4a0b@G4827@p? G4827@p?) (set! G4a0a@G4824@G481c G4824@G481c) (set! G4a09@G4822@G481d G4822@G481d) (set! G4a08@G4820@G481b G4820@G481b) (set! G4a07@G481a@&non-continuable-rcd G481a@&non-continuable-rcd) (set! G4a06@G4818@&non-continuable-rtd G4818@&non-continuable-rtd) (set! G4a05@G4816@non-continuable-violation? G4816@non-continuable-violation?) (set! G4a04@G4814@make-non-continuable-violation G4814@make-non-continuable-violation) (set! G4a03@G4812@p? G4812@p?) (set! G4a02@G480f@G4807 G480f@G4807) (set! G4a01@G480d@G4808 G480d@G4808) (set! G4a00@G480b@G4806 G480b@G4806) (set! G49ff@G4805@&who-rcd G4805@&who-rcd) (set! G49fe@G4803@&who-rtd G4803@&who-rtd) (set! G49fd@G4801@condition-who G4801@condition-who) (set! G49fc@G47ff@who-condition? G47ff@who-condition?) (set! G49fb@G47fd@G47ec G47fd@G47ec) (set! G49fa@G47fb@make-who-condition G47fb@make-who-condition) (set! G49f9@G47f9@p? G47f9@p?) (set! G49f8@G47f6@G47ee G47f6@G47ee) (set! G49f7@G47f4@G47ef G47f4@G47ef) (set! G49f6@G47f2@G47ed G47f2@G47ed) (set! G49f5@G47eb@&irritants-rcd G47eb@&irritants-rcd) (set! G49f4@G47e9@&irritants-rtd G47e9@&irritants-rtd) (set! G49f3@G47e7@condition-irritants G47e7@condition-irritants) (set! G49f2@G47e5@irritants-condition? G47e5@irritants-condition?) (set! G49f1@G47e3@G47d2 G47e3@G47d2) (set! G49f0@G47e1@make-irritants-condition G47e1@make-irritants-condition) (set! G49ef@G47df@p? G47df@p?) (set! G49ee@G47dc@G47d4 G47dc@G47d4) (set! G49ed@G47da@G47d5 G47da@G47d5) (set! G49ec@G47d8@G47d3 G47d8@G47d3) (set! G49eb@G47d1@&assertion-rcd G47d1@&assertion-rcd) (set! G49ea@G47cf@&assertion-rtd G47cf@&assertion-rtd) (set! G49e9@G47cd@assertion-violation? G47cd@assertion-violation?) (set! G49e8@G47cb@make-assertion-violation G47cb@make-assertion-violation) (set! G49e7@G47c9@p? G47c9@p?) (set! G49e6@G47c6@G47be G47c6@G47be) (set! G49e5@G47c4@G47bf G47c4@G47bf) (set! G49e4@G47c2@G47bd G47c2@G47bd) (set! G49e3@G47bc@&violation-rcd G47bc@&violation-rcd) (set! G49e2@G47ba@&violation-rtd G47ba@&violation-rtd) (set! G49e1@G47b8@violation? G47b8@violation?) (set! G49e0@G47b6@make-violation G47b6@make-violation) (set! G49df@G47b4@p? G47b4@p?) (set! G49de@G47b1@G47a9 G47b1@G47a9) (set! G49dd@G47af@G47aa G47af@G47aa) (set! G49dc@G47ad@G47a8 G47ad@G47a8) (set! G49db@G47a7@&error-rcd G47a7@&error-rcd) (set! G49da@G47a5@&error-rtd G47a5@&error-rtd) (set! G49d9@G47a3@error? G47a3@error?) (set! G49d8@G47a1@make-error G47a1@make-error) (set! G49d7@G479f@p? G479f@p?) (set! G49d6@G479c@G4794 G479c@G4794) (set! G49d5@G479a@G4795 G479a@G4795) (set! G49d4@G4798@G4793 G4798@G4793) (set! G49d3@G4792@&serious-rcd G4792@&serious-rcd) (set! G49d2@G4790@&serious-rtd G4790@&serious-rtd) (set! G49d1@G478e@serious-condition? G478e@serious-condition?) (set! G49d0@G478c@make-serious-condition G478c@make-serious-condition) (set! G49cf@G478a@p? G478a@p?) (set! G49ce@G4787@G477f G4787@G477f) (set! G49cd@G4785@G4780 G4785@G4780) (set! G49cc@G4783@G477e G4783@G477e) (set! G49cb@G477d@&warning-rcd G477d@&warning-rcd) (set! G49ca@G477b@&warning-rtd G477b@&warning-rtd) (set! G49c9@G4779@warning? G4779@warning?) (set! G49c8@G4777@make-warning G4777@make-warning) (set! G49c7@G4775@p? G4775@p?) (set! G49c6@G4772@G476a G4772@G476a) (set! G49c5@G4770@G476b G4770@G476b) (set! G49c4@G476e@G4769 G476e@G4769) (set! G49c3@G4768@&message-rcd G4768@&message-rcd) (set! G49c2@G4766@&message-rtd G4766@&message-rtd) (set! G49c1@G4764@condition-message G4764@condition-message) (set! G49c0@G4762@message-condition? G4762@message-condition?) (set! G49bf@G4760@G474f G4760@G474f) (set! G49be@G475e@make-message-condition G475e@make-message-condition) (set! G49bd@G475c@p? G475c@p?) (set! G49bc@G4759@G4751 G4759@G4751) (set! G49bb@G4757@G4752 G4757@G4752) (set! G49ba@G4755@G4750 G4755@G4750) (set! G49b9@G470d@&condition-rcd G470d@&condition-rcd) (set! G49b8@G470b@&condition-rtd G470b@&condition-rtd) (set! G49b7@G4709@make-&condition G4709@make-&condition) (set! G49b6@G4707@&condition? G4707@&condition?) (set! G49b5@G4704@G46fc G4704@G46fc) (set! G49b4@G4702@G46fd G4702@G46fd) (set! G49b3@G4700@G46fb G4700@G46fb)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G273b@G26f0@current-primitive-locations (lambda (G4e9a@x) ((lambda (G4e9c@t) (if G4e9c@t (cdr G4e9c@t) '#f)) (assq G4e9a@x '((&no-nans-rcd . G4aa3@G49b2@&no-nans-rcd) (&no-nans-rtd . G4aa2@G49b0@&no-nans-rtd) (&no-infinities-rcd . G4a9b@G499d@&no-infinities-rcd) (&no-infinities-rtd . G4a9a@G499b@&no-infinities-rtd) (&i/o-encoding-rcd . G4a93@G4988@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4a92@G4986@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4a89@G496e@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4a88@G496c@&i/o-decoding-rtd) (&i/o-port-rcd . G4a81@G4959@&i/o-port-rcd) (&i/o-port-rtd . G4a80@G4957@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4a77@G493f@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4a76@G493d@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4a6f@G492a@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4a6e@G4928@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4a67@G4915@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4a66@G4913@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4a5f@G4900@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4a5e@G48fe@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4a57@G48eb@&i/o-filename-rcd) (&i/o-filename-rtd . G4a56@G48e9@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4a4d@G48d1@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4a4c@G48cf@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4a43@G48b7@&i/o-write-rcd) (&i/o-write-rtd . G4a42@G48b5@&i/o-write-rtd) (&i/o-read-rcd . G4a3b@G48a2@&i/o-read-rcd) (&i/o-read-rtd . G4a3a@G48a0@&i/o-read-rtd) (&i/o-rcd . G4a33@G488d@&i/o-rcd) (&i/o-rtd . G4a32@G488b@&i/o-rtd) (&undefined-rcd . G4a2b@G4878@&undefined-rcd) (&undefined-rtd . G4a2a@G4876@&undefined-rtd) (&syntax-rcd . G4a23@G4863@&syntax-rcd) (&syntax-rtd . G4a22@G4861@&syntax-rtd) (&lexical-rcd . G4a17@G4844@&lexical-rcd) (&lexical-rtd . G4a16@G4842@&lexical-rtd) (&implementation-restriction-rcd . G4a0f@G482f@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4a0e@G482d@&implementation-restriction-rtd) (&non-continuable-rcd . G4a07@G481a@&non-continuable-rcd) (&non-continuable-rtd . G4a06@G4818@&non-continuable-rtd) (&who-rcd . G49ff@G4805@&who-rcd) (&who-rtd . G49fe@G4803@&who-rtd) (&irritants-rcd . G49f5@G47eb@&irritants-rcd) (&irritants-rtd . G49f4@G47e9@&irritants-rtd) (&assertion-rcd . G49eb@G47d1@&assertion-rcd) (&assertion-rtd . G49ea@G47cf@&assertion-rtd) (&violation-rcd . G49e3@G47bc@&violation-rcd) (&violation-rtd . G49e2@G47ba@&violation-rtd) (&error-rcd . G49db@G47a7@&error-rcd) (&error-rtd . G49da@G47a5@&error-rtd) (&serious-rcd . G49d3@G4792@&serious-rcd) (&serious-rtd . G49d2@G4790@&serious-rtd) (&warning-rcd . G49cb@G477d@&warning-rcd) (&warning-rtd . G49ca@G477b@&warning-rtd) (&message-rcd . G49c3@G4768@&message-rcd) (&message-rtd . G49c2@G4766@&message-rtd) (&condition-rcd . G49b9@G470d@&condition-rcd) (&condition-rtd . G49b8@G470b@&condition-rtd) (syntax-error . G46ed@G2e0e@syntax-error) (syntax-dispatch . G4681@G2d27@syntax-dispatch) (load . G4bac@G4abf@load) (interaction-environment . G46f5@G2e1e@interaction-environment) (library-path . G294c@G27e1@library-path) (make-parameter . G26ea@G2618@make-parameter) (make-variable-transformer . G463f@G2b6e@make-variable-transformer) (identifier? . G46f0@G2e14@identifier?) (generate-temporaries . G46e6@G2e00@generate-temporaries) (free-identifier=? . G46e7@G2e02@free-identifier=?) (syntax->datum . G46f2@G2e18@syntax->datum) (datum->syntax . G46f1@G2e16@datum->syntax) (bound-identifier=? . G46e8@G2e04@bound-identifier=?) (make-i/o-write-error . G4a40@G48b1@make-i/o-write-error) (make-i/o-read-error . G4a38@G489c@make-i/o-read-error) (make-i/o-port-error . G4a7c@G494f@make-i/o-port-error) (make-i/o-invalid-position-error . G4a48@G48c7@make-i/o-invalid-position-error) (make-i/o-filename-error . G4a52@G48e1@make-i/o-filename-error) (make-i/o-file-protection-error . G4a5c@G48fa@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4a64@G490f@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4a74@G4939@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4a6c@G4924@make-i/o-file-already-exists-error) (make-i/o-error . G4a30@G4887@make-i/o-error) (make-i/o-encoding-error . G4a8e@G497e@make-i/o-encoding-error) (make-i/o-decoding-error . G4a86@G4968@make-i/o-decoding-error) (i/o-write-error? . G4a41@G48b3@i/o-write-error?) (i/o-read-error? . G4a39@G489e@i/o-read-error?) (i/o-port-error? . G4a7e@G4953@i/o-port-error?) (i/o-invalid-position-error? . G4a4a@G48cb@i/o-invalid-position-error?) (i/o-filename-error? . G4a54@G48e5@i/o-filename-error?) (i/o-file-protection-error? . G4a5d@G48fc@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4a65@G4911@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4a75@G493b@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4a6d@G4926@i/o-file-already-exists-error?) (i/o-error? . G4a31@G4889@i/o-error?) (i/o-error-position . G4a4b@G48cd@i/o-error-position) (i/o-error-port . G4a7f@G4955@i/o-error-port) (i/o-error-filename . G4a55@G48e7@i/o-error-filename) (i/o-encoding-error? . G4a90@G4982@i/o-encoding-error?) (i/o-encoding-error-char . G4a91@G4984@i/o-encoding-error-char) (i/o-decoding-error? . G4a87@G496a@i/o-decoding-error?) (scheme-report-environment . G46dd@G2dee@scheme-report-environment) (null-environment . G46dc@G2dec@null-environment) (command-line . G4ba9@G4ab9@command-line) (eval . G46df@G2df2@eval) (environment . G46db@G2dea@environment) (who-condition? . G49fc@G47ff@who-condition?) (warning? . G49c9@G4779@warning?) (violation? . G49e1@G47b8@violation?) (undefined-violation? . G4a29@G4874@undefined-violation?) (syntax-violation? . G4a1f@G485b@syntax-violation?) (syntax-violation-subform . G4a21@G485f@syntax-violation-subform) (syntax-violation-form . G4a20@G485d@syntax-violation-form) (syntax-violation . G46ef@G2e12@syntax-violation) (serious-condition? . G49d1@G478e@serious-condition?) (non-continuable-violation? . G4a05@G4816@non-continuable-violation?) (message-condition? . G49c0@G4762@message-condition?) (make-who-condition . G49fa@G47fb@make-who-condition) (make-warning . G49c8@G4777@make-warning) (make-violation . G49e0@G47b6@make-violation) (make-undefined-violation . G4a28@G4872@make-undefined-violation) (make-syntax-violation . G4a1c@G4855@make-syntax-violation) (make-serious-condition . G49d0@G478c@make-serious-condition) (make-non-continuable-violation . G4a04@G4814@make-non-continuable-violation) (make-message-condition . G49be@G475e@make-message-condition) (make-lexical-violation . G4a14@G483e@make-lexical-violation) (make-irritants-condition . G49f0@G47e1@make-irritants-condition) (make-implementation-restriction-violation . G4a0c@G4829@make-implementation-restriction-violation) (make-error . G49d8@G47a1@make-error) (make-assertion-violation . G49e8@G47cb@make-assertion-violation) (lexical-violation? . G4a15@G4840@lexical-violation?) (irritants-condition? . G49f2@G47e5@irritants-condition?) (implementation-restriction-violation? . G4a0d@G482b@implementation-restriction-violation?) (error? . G49d9@G47a3@error?) (condition-who . G49fd@G4801@condition-who) (condition-message . G49c1@G4764@condition-message) (condition-irritants . G49f3@G47e7@condition-irritants) (assertion-violation? . G49e9@G47cd@assertion-violation?) (no-nans-violation? . G4aa1@G49ae@no-nans-violation?) (no-infinities-violation? . G4a99@G4999@no-infinities-violation?) (make-no-nans-violation . G4aa0@G49ac@make-no-nans-violation) (make-no-infinities-violation . G4a98@G4997@make-no-infinities-violation)))))) (G295c@G2801@install-library 'G4e77 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . G4e6c) (format . G4e69) (string-split . G4e5e) (call-process . G4e58) (set-current-directory! . G4e54) (expand-path . G4e53) (current-directory . G4e52) (%spawn . G4e51) (%waitpid . G4e50) (%ffi-supported? . G4e4f) (%ffi-pointer-ref . G4e4e) (%ffi-pointer->string . G4e4d) (%ffi-call->string-or-zero . G4e4c) (%ffi-call->double . G4e4b) (%ffi-call->void* . G4e4a) (%ffi-call->void . G4e49) (%ffi-call->int . G4e48) (%ffi-lookup . G4e47) (%ffi-open . G4e46) (%fork . G4e45) (%pipe . G4e44) (p . G4e43) (string-upcase . G4e32) (string-titlecase . G4e31) (string-normalize-nfkd . G4e30) (string-normalize-nfkc . G4e2f) (string-normalize-nfd . G4e2e) (string-normalize-nfc . G4e2d) (string-foldcase . G4e2c) (string-downcase . G4e2b) (string-ci>? . G4e2a) (string-ci>=? . G4e29) (string-ci=? . G4e28) (string-ci<? . G4e27) (string-ci<=? . G4e26) (char-whitespace? . G4e25) (char-upper-case? . G4e24) (char-title-case? . G4e23) (char-numeric? . G4e22) (char-lower-case? . G4e21) (char-general-category . G4e20) (char-upcase . G4e1f) (char-titlecase . G4e1e) (char-foldcase . G4e1d) (char-downcase . G4e1c) (char-ci>? . G4e1b) (char-ci>=? . G4e1a) (char-ci=? . G4e19) (char-ci<? . G4e18) (char-ci<=? . G4e17) (char-alphabetic? . G4e16) (make-variable-transformer . G2b6d) (identifier? . G2e13) (generate-temporaries . G2dff) (free-identifier=? . G2e01) (syntax->datum . G2e17) (datum->syntax . G2e15) (bound-identifier=? . G2e03) (record-type-descriptor? . G4e15) (record-predicate . G4e14) (record-mutator . G4e13) (record-constructor . G4e12) (record-accessor . G4e11) (make-record-type-descriptor . G4e10) (make-record-constructor-descriptor . G4e0f) (record? . G4e0e) (record-type-uid . G4e0d) (record-type-sealed? . G4e0c) (record-type-parent . G4e0b) (record-type-opaque? . G4e0a) (record-type-name . G4e09) (record-type-generative? . G4e08) (record-type-field-names . G4e07) (record-rtd . G4e06) (record-field-mutable? . G4e05) (delete-file . G4e04) (file-exists? . G4e03) (vector-sort! . G4e02) (vector-sort . G4e01) (list-sort . G4e00) (symbol-hash . G4dff) (string-ci-hash . G4dfe) (string-hash . G4dfd) (equal-hash . G4dfc) (hashtable-equivalence-function . G4dfb) (make-hashtable . G4dfa) (hashtable-hash-function . G4df9) (make-eqv-hashtable . G4df8) (make-eq-hashtable . G4df7) (hashtable? . G4df6) (hashtable-update! . G4df5) (hashtable-size . G4df4) (hashtable-set! . G4df3) (hashtable-ref . G4df2) (hashtable-mutable? . G4df1) (hashtable-keys . G4df0) (hashtable-entries . G4def) (hashtable-delete! . G4dee) (hashtable-copy . G4ded) (hashtable-contains? . G4dec) (hashtable-clear! . G4deb) (call-with-output-file . G4dea) (call-with-input-file . G4de9) (write-char . G4de8) (write . G4de7) (with-output-to-file . G4de6) (with-input-from-file . G4de5) (read-char . G4de4) (read . G4de3) (peek-char . G4de2) (open-output-file . G4de1) (open-input-file . G4de0) (newline . G4ddf) (display . G4dde) (close-output-port . G4ddd) (close-input-port . G4ddc) (eof-object? . G4ddb) (eof-object . G4dda) (current-error-port . G4dd9) (current-output-port . G4dd8) (current-input-port . G4dd7) (output-port? . G4dd6) (input-port? . G4dd5) (utf-8-codec . G4dd4) (utf-16-codec . G4dd3) (transcoder-error-handling-mode . G4dd2) (transcoder-eol-style . G4dd1) (transcoder-codec . G4dd0) (transcoded-port . G4dcf) (textual-port? . G4dce) (string->bytevector . G4dcd) (standard-output-port . G4dcc) (standard-input-port . G4dcb) (standard-error-port . G4dca) (set-port-position! . G4dc9) (put-u8 . G4dc8) (put-string . G4dc7) (put-datum . G4dc6) (put-char . G4dc5) (put-bytevector . G4dc4) (port? . G4dc3) (port-transcoder . G4dc2) (port-position . G4dc1) (port-has-set-port-position!? . G4dc0) (port-has-port-position? . G4dbf) (port-eof? . G4dbe) (output-port-buffer-mode . G4dbd) (open-string-output-port . G4dbc) (open-string-input-port . G4dbb) (open-file-output-port . G4dba) (open-file-input/output-port . G4db9) (open-file-input-port . G4db8) (open-bytevector-output-port . G4db7) (open-bytevector-input-port . G4db6) (native-transcoder . G4db5) (native-eol-style . G4db4) (make-transcoder . G4db3) (latin-1-codec . G4db2) (make-i/o-write-error . G48b0) (make-i/o-read-error . G489b) (make-i/o-port-error . G494e) (make-i/o-invalid-position-error . G48c6) (make-i/o-filename-error . G48e0) (make-i/o-file-protection-error . G48f9) (make-i/o-file-is-read-only-error . G490e) (make-i/o-file-does-not-exist-error . G4938) (make-i/o-file-already-exists-error . G4923) (make-i/o-error . G4886) (make-i/o-encoding-error . G497d) (make-i/o-decoding-error . G4967) (make-custom-textual-output-port . G4db1) (make-custom-textual-input/output-port . G4db0) (make-custom-textual-input-port . G4daf) (make-custom-binary-output-port . G4dae) (make-custom-binary-input/output-port . G4dad) (make-custom-binary-input-port . G4dac) (make-bytevector . G4dab) (lookahead-u8 . G4daa) (lookahead-char . G4da9) (i/o-write-error? . G48b2) (i/o-read-error? . G489d) (i/o-port-error? . G4952) (i/o-invalid-position-error? . G48ca) (i/o-filename-error? . G48e4) (i/o-file-protection-error? . G48fb) (i/o-file-is-read-only-error? . G4910) (i/o-file-does-not-exist-error? . G493a) (i/o-file-already-exists-error? . G4925) (i/o-error? . G4888) (i/o-error-position . G48cc) (i/o-error-port . G4954) (i/o-error-filename . G48e6) (i/o-encoding-error? . G4981) (i/o-encoding-error-char . G4983) (i/o-decoding-error? . G4969) (get-u8 . G4da8) (get-string-n! . G4da7) (get-string-n . G4da6) (get-string-all . G4da5) (get-line . G4da4) (get-datum . G4da3) (get-char . G4da2) (get-bytevector-some . G4da1) (get-bytevector-n! . G4da0) (get-bytevector-n . G4d9f) (get-bytevector-all . G4d9e) (flush-output-port . G4d9d) (close-port . G4d9c) (exit . G4d94) (command-line . G4ab8) (string-fill! . G4d93) (string-set! . G4d92) (set-cdr! . G4d91) (set-car! . G4d90) (remove . G4d8f) (remv . G4d8e) (remp . G4d8d) (remq . G4d8c) (partition . G4d8b) (memv . G4d8a) (memq . G4d89) (memp . G4d88) (member . G4d87) (exists . G4d86) (for-all . G4d85) (fold-right . G4d84) (fold-left . G4d83) (find . G4d82) (filter . G4d81) (cons* . G4d80) (assv . G4d7f) (assq . G4d7e) (assp . G4d7d) (assoc . G4d7c) (call-with-string-output-port . G4d7b) (call-with-port . G4d7a) (call-with-bytevector-output-port . G4d79) (bytevector->string . G4d78) (buffer-mode? . G4d77) (binary-port? . G4d76) (with-exception-handler . G4d75) (raise-continuable . G4d74) (raise . G4d73) (eval . G2df1) (environment . G2de9) (make-enumeration . G4d72) (enum-set=? . G4d71) (enum-set-universe . G4d70) (enum-set-union . G4d6f) (enum-set-subset? . G4d6e) (enum-set-projection . G4d6d) (enum-set-member? . G4d6c) (enum-set-intersection . G4d6b) (enum-set-indexer . G4d6a) (enum-set-difference . G4d69) (enum-set-constructor . G4d68) (enum-set-complement . G4d67) (enum-set->list . G4d66) (who-condition? . G47fe) (warning? . G4778) (violation? . G47b7) (undefined-violation? . G4873) (syntax-violation? . G485a) (syntax-violation-subform . G485e) (syntax-violation-form . G485c) (syntax-violation . G2e11) (simple-conditions . G4d65) (serious-condition? . G478d) (non-continuable-violation? . G4815) (message-condition? . G4761) (make-who-condition . G47fa) (make-warning . G4776) (make-violation . G47b5) (make-undefined-violation . G4871) (make-syntax-violation . G4854) (make-serious-condition . G478b) (make-non-continuable-violation . G4813) (make-message-condition . G475d) (make-lexical-violation . G483d) (make-irritants-condition . G47e0) (make-implementation-restriction-violation . G4828) (make-error . G47a0) (make-assertion-violation . G47ca) (lexical-violation? . G483f) (irritants-condition? . G47e4) (implementation-restriction-violation? . G482a) (error? . G47a2) (condition-who . G4800) (condition-predicate . G4d64) (condition-message . G4763) (condition-irritants . G47e6) (condition-accessor . G4d63) (condition . G4d62) (assertion-violation? . G47cc) (condition? . G4d61) (utf32->string . G4d60) (utf16->string . G4d5f) (utf8->string . G4d5e) (uint-list->bytevector . G4d5d) (u8-list->bytevector . G4d5c) (string->utf8 . G4d5b) (string->utf32 . G4d5a) (string->utf16 . G4d59) (sint-list->bytevector . G4d58) (native-endianness . G4d57) (bytevector? . G4d56) (bytevector=? . G4d55) (bytevector-uint-set! . G4d54) (bytevector-uint-ref . G4d53) (bytevector-u8-set! . G4d52) (bytevector-u8-ref . G4d51) (bytevector-u64-set! . G4d50) (bytevector-u64-ref . G4d4f) (bytevector-u64-native-set! . G4d4e) (bytevector-u64-native-ref . G4d4d) (bytevector-u32-set! . G4d4c) (bytevector-u32-ref . G4d4b) (bytevector-u32-native-set! . G4d4a) (bytevector-u32-native-ref . G4d49) (bytevector-u16-set! . G4d48) (bytevector-u16-ref . G4d47) (bytevector-u16-native-set! . G4d46) (bytevector-u16-native-ref . G4d45) (bytevector-sint-set! . G4d44) (bytevector-sint-ref . G4d43) (bytevector-s8-set! . G4d42) (bytevector-s8-ref . G4d41) (bytevector-s64-set! . G4d40) (bytevector-s64-ref . G4d3f) (bytevector-s64-native-set! . G4d3e) (bytevector-s64-native-ref . G4d3d) (bytevector-s32-set! . G4d3c) (bytevector-s32-ref . G4d3b) (bytevector-s32-native-set! . G4d3a) (bytevector-s32-native-ref . G4d39) (bytevector-s16-set! . G4d38) (bytevector-s16-ref . G4d37) (bytevector-s16-native-set! . G4d36) (bytevector-s16-native-ref . G4d35) (bytevector-length . G4d34) (bytevector-ieee-single-ref . G4d33) (bytevector-ieee-single-set! . G4d32) (bytevector-ieee-single-native-set! . G4d31) (bytevector-ieee-single-native-ref . G4d30) (bytevector-ieee-double-set! . G4d2f) (bytevector-ieee-double-ref . G4d2e) (bytevector-ieee-double-native-set! . G4d2d) (bytevector-ieee-double-native-ref . G4d2c) (bytevector-fill! . G4d2b) (bytevector-copy! . G4d2a) (bytevector-copy . G4d29) (bytevector->uint-list . G4d28) (bytevector->u8-list . G4d27) (bytevector->sint-list . G4d26) (no-nans-violation? . G49ad) (no-infinities-violation? . G4998) (make-no-nans-violation . G49ab) (make-no-infinities-violation . G4996) (real->flonum . G4d25) (flzero? . G4d24) (fltruncate . G4d23) (fltan . G4d22) (flsqrt . G4d21) (flsin . G4d20) (flround . G4d1f) (flpositive? . G4d1e) (flonum? . G4d1d) (flodd? . G4d1c) (flnumerator . G4d1b) (flnegative? . G4d1a) (flnan? . G4d19) (flmod0 . G4d18) (flmod . G4d17) (flmin . G4d16) (flmax . G4d15) (fllog . G4d14) (flinteger? . G4d13) (flinfinite? . G4d12) (flfloor . G4d11) (flfinite? . G4d10) (flexpt . G4d0f) (flexp . G4d0e) (fleven? . G4d0d) (fldiv0-and-mod0 . G4d0c) (fldiv0 . G4d0b) (fldiv-and-mod . G4d0a) (fldiv . G4d09) (fldenominator . G4d08) (flcos . G4d07) (flceiling . G4d06) (flatan . G4d05) (flasin . G4d04) (flacos . G4d03) (flabs . G4d02) (fl>? . G4d01) (fl>=? . G4d00) (fl=? . G4cff) (fl<? . G4cfe) (fl<=? . G4cfd) (fl/ . G4cfc) (fl- . G4cfb) (fl+ . G4cfa) (fl* . G4cf9) (fixnum->flonum . G4cf8) (fxzero? . G4cf7) (fxxor . G4cf6) (fxrotate-bit-field . G4cf5) (fxreverse-bit-field . G4cf4) (fxpositive? . G4cf3) (fxodd? . G4cf2) (fxnot . G4cf1) (fxnegative? . G4cf0) (fxmod0 . G4cef) (fxmod . G4cee) (fxmin . G4ced) (fxmax . G4cec) (fxlength . G4ceb) (fxior . G4cea) (fxif . G4ce9) (fxfirst-bit-set . G4ce8) (fxeven? . G4ce7) (fxdiv0-and-mod0 . G4ce6) (fxdiv0 . G4ce5) (fxdiv-and-mod . G4ce4) (fxdiv . G4ce3) (fxcopy-bit-field . G4ce2) (fxcopy-bit . G4ce1) (fxbit-set? . G4ce0) (fxbit-field . G4cdf) (fxbit-count . G4cde) (fxarithmetic-shift-right . G4cdd) (fxarithmetic-shift-left . G4cdc) (fxarithmetic-shift . G4cdb) (fxand . G4cda) (fx>? . G4cd9) (fx>=? . G4cd8) (fx=? . G4cd7) (fx<? . G4cd6) (fx<=? . G4cd5) (fx-/carry . G4cd4) (fx- . G4cd3) (fx+/carry . G4cd2) (fx+ . G4cd1) (fx*/carry . G4cd0) (fx* . G4ccf) (greatest-fixnum . G4cce) (least-fixnum . G4ccd) (fixnum-width . G4ccc) (fixnum? . G4ccb) (bitwise-rotate-bit-field . G4cca) (bitwise-reverse-bit-field . G4cc9) (bitwise-length . G4cc8) (bitwise-if . G4cc7) (bitwise-first-bit-set . G4cc6) (bitwise-copy-bit-field . G4cc5) (bitwise-copy-bit . G4cc4) (bitwise-bit-set? . G4cc3) (bitwise-bit-field . G4cc2) (bitwise-bit-count . G4cc1) (bitwise-xor . G4cc0) (bitwise-ior . G4cbf) (bitwise-and . G4cbe) (bitwise-not . G4cbd) (bitwise-arithmetic-shift-right . G4cbc) (bitwise-arithmetic-shift-left . G4cbb) (bitwise-arithmetic-shift . G4cba) (zero? . G4cb9) (vector? . G4cb8) (vector-set! . G4cb7) (vector-ref . G4cb6) (vector-map . G4cb5) (vector-length . G4cb4) (vector-for-each . G4cb3) (vector-fill! . G4cb2) (vector->list . G4cb1) (vector . G4cb0) (values . G4caf) (truncate . G4cae) (tan . G4cad) (symbol? . G4cac) (symbol=? . G4cab) (symbol->string . G4caa) (substring . G4ca9) (string? . G4ca8) (string>? . G4ca7) (string>=? . G4ca6) (string=? . G4ca5) (string<? . G4ca4) (string<=? . G4ca3) (string-ref . G4ca2) (string-length . G4ca1) (string-for-each . G4ca0) (string-copy . G4c9f) (string-append . G4c9e) (string->symbol . G4c9d) (string->number . G4c9c) (string->list . G4c9b) (string . G4c9a) (sqrt . G4c99) (sin . G4c98) (round . G4c97) (reverse . G4c96) (real? . G4c95) (real-valued? . G4c94) (real-part . G4c93) (rationalize . G4c92) (rational? . G4c91) (rational-valued? . G4c90) (procedure? . G4c8f) (positive? . G4c8e) (pair? . G4c8d) (odd? . G4c8c) (numerator . G4c8b) (number? . G4c8a) (number->string . G4c89) (null? . G4c88) (not . G4c87) (negative? . G4c86) (nan? . G4c85) (min . G4c84) (max . G4c83) (map . G4c82) (make-vector . G4c81) (make-string . G4c80) (make-rectangular . G4c7f) (make-polar . G4c7e) (magnitude . G4c7d) (log . G4c7c) (list? . G4c7b) (list-tail . G4c7a) (list-ref . G4c79) (list->vector . G4c78) (list->string . G4c77) (list . G4c76) (length . G4c75) (lcm . G4c74) (integer? . G4c73) (integer-valued? . G4c72) (integer->char . G4c71) (infinite? . G4c70) (inexact? . G4c6f) (inexact . G4c6e) (imag-part . G4c6d) (gcd . G4c6c) (for-each . G4c6b) (floor . G4c6a) (finite? . G4c69) (expt . G4c68) (exp . G4c67) (exact? . G4c66) (exact-integer-sqrt . G4c65) (exact . G4c64) (even? . G4c63) (error . G4c62) (eqv? . G4c61) (equal? . G4c60) (eq? . G4c5f) (dynamic-wind . G4c5e) (div0-and-mod0 . G4c5d) (mod0 . G4c5c) (div0 . G4c5b) (div-and-mod . G4c5a) (mod . G4c59) (div . G4c58) (denominator . G4c57) (cos . G4c56) (cons . G4c55) (complex? . G4c54) (char? . G4c53) (char>? . G4c52) (char>=? . G4c51) (char=? . G4c50) (char<? . G4c4f) (char<=? . G4c4e) (char->integer . G4c4d) (ceiling . G4c4c) (call-with-values . G4c4b) (call/cc . G4c4a) (call-with-current-continuation . G4c49) (cddddr . G4c48) (cdddar . G4c47) (cddadr . G4c46) (cddaar . G4c45) (cdaddr . G4c44) (cdadar . G4c43) (cdaadr . G4c42) (cdaaar . G4c41) (cadddr . G4c40) (caddar . G4c3f) (cadadr . G4c3e) (cadaar . G4c3d) (caaddr . G4c3c) (caadar . G4c3b) (caaadr . G4c3a) (caaaar . G4c39) (cdddr . G4c38) (cddar . G4c37) (cdadr . G4c36) (cdaar . G4c35) (caddr . G4c34) (cadar . G4c33) (caadr . G4c32) (caaar . G4c31) (cddr . G4c30) (cdar . G4c2f) (cadr . G4c2e) (caar . G4c2d) (cdr . G4c2c) (car . G4c2b) (boolean? . G4c2a) (boolean=? . G4c29) (atan . G4c28) (assertion-violation . G4c27) (asin . G4c26) (apply . G4c25) (append . G4c24) (angle . G4c23) (acos . G4c22) (abs . G4c21) (/ . G4c20) (* . G4c1f) (- . G4c1e) (+ . G4c1d) (>= . G4c1c) (> . G4c1b) (= . G4c1a) (<= . G4c19) (< . G4c18) (library . G4c17) (&no-nans . G4c16) (&no-infinities . G4c15) (&i/o-encoding . G4c14) (&i/o-decoding . G4c13) (&i/o-port . G4c12) (&i/o-file-does-not-exist . G4c11) (&i/o-file-already-exists . G4c10) (&i/o-file-is-read-only . G4c0f) (&i/o-file-protection . G4c0e) (&i/o-filename . G4c0d) (&i/o-invalid-position . G4c0c) (&i/o-write . G4c0b) (&i/o-read . G4c0a) (&i/o . G4c09) (&undefined . G4c08) (&syntax . G4c07) (&lexical . G4c06) (&implementation-restriction . G4c05) (&non-continuable . G4c04) (&who . G4c03) (&irritants . G4c02) (&assertion . G4c01) (&violation . G4c00) (&error . G4bff) (&serious . G4bfe) (&warning . G4bfd) (&message . G4bfc) (&condition . G4bfb) (define-condition-type . G4bfa) (define-enumeration . G4bf9) (define-record-type . G4bf8) (parent-rtd . G4bf7) (nongenerative . G4bf6) (opaque . G4bf5) (sealed . G4bf4) (protocol . G4bf3) (parent . G4bf2) (immutable . G4bf1) (mutable . G4bf0) (fields . G4bef) (error-handling-mode . G4bee) (file-options . G4bed) (buffer-mode . G4bec) (eol-style . G4beb) (guard . G4bea) (unsyntax-splicing . G4be7) (unsyntax . G4be6) (unquote-splicing . G4be5) (unquote . G4be4) (_ . G4be3) (else . G4be2) (=> . G4be1) (... . G4be0) (assert . G4bdf) (endianness . G4bde) (do . G4bdb) (cond . G4bda) (let* . G4bd9) (let . G4bd8) (let*-values . G4bd7) (let-values . G4bd6) (identifier-syntax . G4bd5) (with-syntax . G4bd4) (quasisyntax . G4bd3) (quasiquote . G4bd2) (syntax-rules . G4bd1) (include . G4bd0) (record-constructor-descriptor . G4bce) (record-type-descriptor . G4bcd) (case . G4bcc) (unless . G4bca) (when . G4bc9) (or . G4bc8) (and . G4bc7) (if . G4bc6) (letrec* . G4bc5) (letrec . G4bc4) (case-lambda . G4bc2) (lambda . G4bc1) (syntax . G4bc0) (syntax-case . G4bbf) (quote . G4bbe) (letrec-syntax . G4bbc) (let-syntax . G4bbb) (set! . G4bba) (import . G4bb9) (begin . G4bb8) (define-syntax . G4bb6) (define . G4bb5)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e78 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4d95) (unquote-splicing . G4be5) (unquote . G4be4) (_ . G4be3) (else . G4be2) (=> . G4be1) (... . G4be0) (delay . G4bdd) (do . G4bdb) (cond . G4bda) (let* . G4bd9) (let . G4bd8) (quasiquote . G4bd2) (syntax-rules . G4bd1) (case . G4bcc) (or . G4bc8) (and . G4bc7) (if . G4bc6) (letrec . G4bc4) (lambda . G4bc1) (quote . G4bbe) (letrec-syntax . G4bbc) (let-syntax . G4bbb) (set! . G4bba) (begin . G4bb8) (define-syntax . G4bb6) (define . G4bb5)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e79 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G4e2a) (string-ci>=? . G4e29) (string-ci=? . G4e28) (string-ci<? . G4e27) (string-ci<=? . G4e26) (char-whitespace? . G4e25) (char-upper-case? . G4e24) (char-numeric? . G4e22) (char-lower-case? . G4e21) (char-upcase . G4e1f) (char-downcase . G4e1c) (char-ci>? . G4e1b) (char-ci>=? . G4e1a) (char-ci=? . G4e19) (char-ci<? . G4e18) (char-ci<=? . G4e17) (char-alphabetic? . G4e16) (call-with-output-file . G4dea) (call-with-input-file . G4de9) (write-char . G4de8) (write . G4de7) (with-output-to-file . G4de6) (with-input-from-file . G4de5) (read-char . G4de4) (read . G4de3) (peek-char . G4de2) (open-output-file . G4de1) (open-input-file . G4de0) (newline . G4ddf) (display . G4dde) (close-output-port . G4ddd) (close-input-port . G4ddc) (eof-object . G4dda) (current-output-port . G4dd8) (current-input-port . G4dd7) (output-port? . G4dd6) (input-port? . G4dd5) (scheme-report-environment . G2ded) (quotient . G4d9b) (null-environment . G2deb) (remainder . G4d9a) (modulo . G4d99) (inexact->exact . G4d98) (force . G4d97) (exact->inexact . G4d96) (make-promise . G4d95) (string-fill! . G4d93) (string-set! . G4d92) (set-cdr! . G4d91) (set-car! . G4d90) (memv . G4d8a) (memq . G4d89) (member . G4d87) (assv . G4d7f) (assq . G4d7e) (assoc . G4d7c) (eval . G2df1) (zero? . G4cb9) (vector? . G4cb8) (vector-set! . G4cb7) (vector-ref . G4cb6) (vector-length . G4cb4) (vector-fill! . G4cb2) (vector->list . G4cb1) (vector . G4cb0) (values . G4caf) (truncate . G4cae) (tan . G4cad) (symbol? . G4cac) (symbol->string . G4caa) (substring . G4ca9) (string? . G4ca8) (string>? . G4ca7) (string>=? . G4ca6) (string=? . G4ca5) (string<? . G4ca4) (string<=? . G4ca3) (string-ref . G4ca2) (string-length . G4ca1) (string-copy . G4c9f) (string-append . G4c9e) (string->symbol . G4c9d) (string->number . G4c9c) (string->list . G4c9b) (string . G4c9a) (sqrt . G4c99) (sin . G4c98) (round . G4c97) (reverse . G4c96) (real? . G4c95) (real-part . G4c93) (rationalize . G4c92) (rational? . G4c91) (procedure? . G4c8f) (positive? . G4c8e) (pair? . G4c8d) (odd? . G4c8c) (numerator . G4c8b) (number? . G4c8a) (number->string . G4c89) (not . G4c87) (negative? . G4c86) (min . G4c84) (max . G4c83) (map . G4c82) (make-vector . G4c81) (make-string . G4c80) (make-rectangular . G4c7f) (make-polar . G4c7e) (magnitude . G4c7d) (log . G4c7c) (list? . G4c7b) (list-tail . G4c7a) (list-ref . G4c79) (list->vector . G4c78) (list->string . G4c77) (list . G4c76) (length . G4c75) (lcm . G4c74) (integer? . G4c73) (integer->char . G4c71) (inexact? . G4c6f) (imag-part . G4c6d) (gcd . G4c6c) (for-each . G4c6b) (floor . G4c6a) (expt . G4c68) (exp . G4c67) (exact? . G4c66) (even? . G4c63) (eqv? . G4c61) (equal? . G4c60) (eq? . G4c5f) (dynamic-wind . G4c5e) (denominator . G4c57) (cos . G4c56) (cons . G4c55) (complex? . G4c54) (char? . G4c53) (char>? . G4c52) (char>=? . G4c51) (char=? . G4c50) (char<? . G4c4f) (char<=? . G4c4e) (char->integer . G4c4d) (ceiling . G4c4c) (call-with-values . G4c4b) (call-with-current-continuation . G4c49) (cddddr . G4c48) (cdddar . G4c47) (cddadr . G4c46) (cddaar . G4c45) (cdaddr . G4c44) (cdadar . G4c43) (cdaadr . G4c42) (cdaaar . G4c41) (cadddr . G4c40) (caddar . G4c3f) (cadadr . G4c3e) (cadaar . G4c3d) (caaddr . G4c3c) (caadar . G4c3b) (caaadr . G4c3a) (caaaar . G4c39) (cdddr . G4c38) (cddar . G4c37) (cdadr . G4c36) (cdaar . G4c35) (caddr . G4c34) (cadar . G4c33) (caadr . G4c32) (caaar . G4c31) (cddr . G4c30) (cdar . G4c2f) (cadr . G4c2e) (caar . G4c2d) (cdr . G4c2c) (car . G4c2b) (boolean? . G4c2a) (atan . G4c28) (asin . G4c26) (apply . G4c25) (append . G4c24) (angle . G4c23) (acos . G4c22) (abs . G4c21) (/ . G4c20) (* . G4c1f) (- . G4c1e) (+ . G4c1d) (>= . G4c1c) (> . G4c1b) (= . G4c1a) (<= . G4c19) (< . G4c18) (unquote-splicing . G4be5) (unquote . G4be4) (else . G4be2) (=> . G4be1) (... . G4be0) (delay . G4bdd) (do . G4bdb) (cond . G4bda) (let* . G4bd9) (let . G4bd8) (quasiquote . G4bd2) (syntax-rules . G4bd1) (case . G4bcc) (or . G4bc8) (and . G4bc7) (if . G4bc6) (letrec . G4bc4) (lambda . G4bc1) (quote . G4bbe) (letrec-syntax . G4bbc) (let-syntax . G4bbb) (set! . G4bba) (begin . G4bb8) (define-syntax . G4bb6) (define . G4bb5)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e7a '(psyntax modules) '() '() '() '() '((module . G4bb7)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e7b '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e7c '(rnrs) '(6) '() '() '() '((regexp? . G4e6f) (string-upcase . G4e32) (string-titlecase . G4e31) (string-normalize-nfkd . G4e30) (string-normalize-nfkc . G4e2f) (string-normalize-nfd . G4e2e) (string-normalize-nfc . G4e2d) (string-foldcase . G4e2c) (string-downcase . G4e2b) (string-ci>? . G4e2a) (string-ci>=? . G4e29) (string-ci=? . G4e28) (string-ci<? . G4e27) (string-ci<=? . G4e26) (char-whitespace? . G4e25) (char-upper-case? . G4e24) (char-title-case? . G4e23) (char-numeric? . G4e22) (char-lower-case? . G4e21) (char-general-category . G4e20) (char-upcase . G4e1f) (char-titlecase . G4e1e) (char-foldcase . G4e1d) (char-downcase . G4e1c) (char-ci>? . G4e1b) (char-ci>=? . G4e1a) (char-ci=? . G4e19) (char-ci<? . G4e18) (char-ci<=? . G4e17) (char-alphabetic? . G4e16) (make-variable-transformer . G2b6d) (identifier? . G2e13) (generate-temporaries . G2dff) (free-identifier=? . G2e01) (syntax->datum . G2e17) (datum->syntax . G2e15) (bound-identifier=? . G2e03) (record-type-descriptor? . G4e15) (record-predicate . G4e14) (record-mutator . G4e13) (record-constructor . G4e12) (record-accessor . G4e11) (make-record-type-descriptor . G4e10) (make-record-constructor-descriptor . G4e0f) (record? . G4e0e) (record-type-uid . G4e0d) (record-type-sealed? . G4e0c) (record-type-parent . G4e0b) (record-type-opaque? . G4e0a) (record-type-name . G4e09) (record-type-generative? . G4e08) (record-type-field-names . G4e07) (record-rtd . G4e06) (record-field-mutable? . G4e05) (delete-file . G4e04) (file-exists? . G4e03) (vector-sort! . G4e02) (vector-sort . G4e01) (list-sort . G4e00) (symbol-hash . G4dff) (string-ci-hash . G4dfe) (string-hash . G4dfd) (equal-hash . G4dfc) (hashtable-equivalence-function . G4dfb) (make-hashtable . G4dfa) (hashtable-hash-function . G4df9) (make-eqv-hashtable . G4df8) (make-eq-hashtable . G4df7) (hashtable? . G4df6) (hashtable-update! . G4df5) (hashtable-size . G4df4) (hashtable-set! . G4df3) (hashtable-ref . G4df2) (hashtable-mutable? . G4df1) (hashtable-keys . G4df0) (hashtable-entries . G4def) (hashtable-delete! . G4dee) (hashtable-copy . G4ded) (hashtable-contains? . G4dec) (hashtable-clear! . G4deb) (call-with-output-file . G4dea) (call-with-input-file . G4de9) (write-char . G4de8) (write . G4de7) (with-output-to-file . G4de6) (with-input-from-file . G4de5) (read-char . G4de4) (read . G4de3) (peek-char . G4de2) (open-output-file . G4de1) (open-input-file . G4de0) (newline . G4ddf) (display . G4dde) (close-output-port . G4ddd) (close-input-port . G4ddc) (eof-object? . G4ddb) (eof-object . G4dda) (current-error-port . G4dd9) (current-output-port . G4dd8) (current-input-port . G4dd7) (output-port? . G4dd6) (input-port? . G4dd5) (utf-8-codec . G4dd4) (utf-16-codec . G4dd3) (transcoder-error-handling-mode . G4dd2) (transcoder-eol-style . G4dd1) (transcoder-codec . G4dd0) (transcoded-port . G4dcf) (textual-port? . G4dce) (string->bytevector . G4dcd) (standard-output-port . G4dcc) (standard-input-port . G4dcb) (standard-error-port . G4dca) (set-port-position! . G4dc9) (put-u8 . G4dc8) (put-string . G4dc7) (put-datum . G4dc6) (put-char . G4dc5) (put-bytevector . G4dc4) (port? . G4dc3) (port-transcoder . G4dc2) (port-position . G4dc1) (port-has-set-port-position!? . G4dc0) (port-has-port-position? . G4dbf) (port-eof? . G4dbe) (output-port-buffer-mode . G4dbd) (open-string-output-port . G4dbc) (open-string-input-port . G4dbb) (open-file-output-port . G4dba) (open-file-input/output-port . G4db9) (open-file-input-port . G4db8) (open-bytevector-output-port . G4db7) (open-bytevector-input-port . G4db6) (native-transcoder . G4db5) (native-eol-style . G4db4) (make-transcoder . G4db3) (latin-1-codec . G4db2) (make-i/o-write-error . G48b0) (make-i/o-read-error . G489b) (make-i/o-port-error . G494e) (make-i/o-invalid-position-error . G48c6) (make-i/o-filename-error . G48e0) (make-i/o-file-protection-error . G48f9) (make-i/o-file-is-read-only-error . G490e) (make-i/o-file-does-not-exist-error . G4938) (make-i/o-file-already-exists-error . G4923) (make-i/o-error . G4886) (make-i/o-encoding-error . G497d) (make-i/o-decoding-error . G4967) (make-custom-textual-output-port . G4db1) (make-custom-textual-input/output-port . G4db0) (make-custom-textual-input-port . G4daf) (make-custom-binary-output-port . G4dae) (make-custom-binary-input/output-port . G4dad) (make-custom-binary-input-port . G4dac) (make-bytevector . G4dab) (lookahead-u8 . G4daa) (lookahead-char . G4da9) (i/o-write-error? . G48b2) (i/o-read-error? . G489d) (i/o-port-error? . G4952) (i/o-invalid-position-error? . G48ca) (i/o-filename-error? . G48e4) (i/o-file-protection-error? . G48fb) (i/o-file-is-read-only-error? . G4910) (i/o-file-does-not-exist-error? . G493a) (i/o-file-already-exists-error? . G4925) (i/o-error? . G4888) (i/o-error-position . G48cc) (i/o-error-port . G4954) (i/o-error-filename . G48e6) (i/o-encoding-error? . G4981) (i/o-encoding-error-char . G4983) (i/o-decoding-error? . G4969) (get-u8 . G4da8) (get-string-n! . G4da7) (get-string-n . G4da6) (get-string-all . G4da5) (get-line . G4da4) (get-datum . G4da3) (get-char . G4da2) (get-bytevector-some . G4da1) (get-bytevector-n! . G4da0) (get-bytevector-n . G4d9f) (get-bytevector-all . G4d9e) (flush-output-port . G4d9d) (close-port . G4d9c) (exit . G4d94) (command-line . G4ab8) (remove . G4d8f) (remv . G4d8e) (remp . G4d8d) (remq . G4d8c) (partition . G4d8b) (memv . G4d8a) (memq . G4d89) (memp . G4d88) (member . G4d87) (exists . G4d86) (for-all . G4d85) (fold-right . G4d84) (fold-left . G4d83) (find . G4d82) (filter . G4d81) (cons* . G4d80) (assv . G4d7f) (assq . G4d7e) (assp . G4d7d) (assoc . G4d7c) (call-with-string-output-port . G4d7b) (call-with-port . G4d7a) (call-with-bytevector-output-port . G4d79) (bytevector->string . G4d78) (buffer-mode? . G4d77) (binary-port? . G4d76) (with-exception-handler . G4d75) (raise-continuable . G4d74) (raise . G4d73) (make-enumeration . G4d72) (enum-set=? . G4d71) (enum-set-universe . G4d70) (enum-set-union . G4d6f) (enum-set-subset? . G4d6e) (enum-set-projection . G4d6d) (enum-set-member? . G4d6c) (enum-set-intersection . G4d6b) (enum-set-indexer . G4d6a) (enum-set-difference . G4d69) (enum-set-constructor . G4d68) (enum-set-complement . G4d67) (enum-set->list . G4d66) (who-condition? . G47fe) (warning? . G4778) (violation? . G47b7) (undefined-violation? . G4873) (syntax-violation? . G485a) (syntax-violation-subform . G485e) (syntax-violation-form . G485c) (syntax-violation . G2e11) (simple-conditions . G4d65) (serious-condition? . G478d) (non-continuable-violation? . G4815) (message-condition? . G4761) (make-who-condition . G47fa) (make-warning . G4776) (make-violation . G47b5) (make-undefined-violation . G4871) (make-syntax-violation . G4854) (make-serious-condition . G478b) (make-non-continuable-violation . G4813) (make-message-condition . G475d) (make-lexical-violation . G483d) (make-irritants-condition . G47e0) (make-implementation-restriction-violation . G4828) (make-error . G47a0) (make-assertion-violation . G47ca) (lexical-violation? . G483f) (irritants-condition? . G47e4) (implementation-restriction-violation? . G482a) (error? . G47a2) (condition-who . G4800) (condition-predicate . G4d64) (condition-message . G4763) (condition-irritants . G47e6) (condition-accessor . G4d63) (condition . G4d62) (assertion-violation? . G47cc) (condition? . G4d61) (utf32->string . G4d60) (utf16->string . G4d5f) (utf8->string . G4d5e) (uint-list->bytevector . G4d5d) (u8-list->bytevector . G4d5c) (string->utf8 . G4d5b) (string->utf32 . G4d5a) (string->utf16 . G4d59) (sint-list->bytevector . G4d58) (native-endianness . G4d57) (bytevector? . G4d56) (bytevector=? . G4d55) (bytevector-uint-set! . G4d54) (bytevector-uint-ref . G4d53) (bytevector-u8-set! . G4d52) (bytevector-u8-ref . G4d51) (bytevector-u64-set! . G4d50) (bytevector-u64-ref . G4d4f) (bytevector-u64-native-set! . G4d4e) (bytevector-u64-native-ref . G4d4d) (bytevector-u32-set! . G4d4c) (bytevector-u32-ref . G4d4b) (bytevector-u32-native-set! . G4d4a) (bytevector-u32-native-ref . G4d49) (bytevector-u16-set! . G4d48) (bytevector-u16-ref . G4d47) (bytevector-u16-native-set! . G4d46) (bytevector-u16-native-ref . G4d45) (bytevector-sint-set! . G4d44) (bytevector-sint-ref . G4d43) (bytevector-s8-set! . G4d42) (bytevector-s8-ref . G4d41) (bytevector-s64-set! . G4d40) (bytevector-s64-ref . G4d3f) (bytevector-s64-native-set! . G4d3e) (bytevector-s64-native-ref . G4d3d) (bytevector-s32-set! . G4d3c) (bytevector-s32-ref . G4d3b) (bytevector-s32-native-set! . G4d3a) (bytevector-s32-native-ref . G4d39) (bytevector-s16-set! . G4d38) (bytevector-s16-ref . G4d37) (bytevector-s16-native-set! . G4d36) (bytevector-s16-native-ref . G4d35) (bytevector-length . G4d34) (bytevector-ieee-single-ref . G4d33) (bytevector-ieee-single-set! . G4d32) (bytevector-ieee-single-native-set! . G4d31) (bytevector-ieee-single-native-ref . G4d30) (bytevector-ieee-double-set! . G4d2f) (bytevector-ieee-double-ref . G4d2e) (bytevector-ieee-double-native-set! . G4d2d) (bytevector-ieee-double-native-ref . G4d2c) (bytevector-fill! . G4d2b) (bytevector-copy! . G4d2a) (bytevector-copy . G4d29) (bytevector->uint-list . G4d28) (bytevector->u8-list . G4d27) (bytevector->sint-list . G4d26) (no-nans-violation? . G49ad) (no-infinities-violation? . G4998) (make-no-nans-violation . G49ab) (make-no-infinities-violation . G4996) (real->flonum . G4d25) (flzero? . G4d24) (fltruncate . G4d23) (fltan . G4d22) (flsqrt . G4d21) (flsin . G4d20) (flround . G4d1f) (flpositive? . G4d1e) (flonum? . G4d1d) (flodd? . G4d1c) (flnumerator . G4d1b) (flnegative? . G4d1a) (flnan? . G4d19) (flmod0 . G4d18) (flmod . G4d17) (flmin . G4d16) (flmax . G4d15) (fllog . G4d14) (flinteger? . G4d13) (flinfinite? . G4d12) (flfloor . G4d11) (flfinite? . G4d10) (flexpt . G4d0f) (flexp . G4d0e) (fleven? . G4d0d) (fldiv0-and-mod0 . G4d0c) (fldiv0 . G4d0b) (fldiv-and-mod . G4d0a) (fldiv . G4d09) (fldenominator . G4d08) (flcos . G4d07) (flceiling . G4d06) (flatan . G4d05) (flasin . G4d04) (flacos . G4d03) (flabs . G4d02) (fl>? . G4d01) (fl>=? . G4d00) (fl=? . G4cff) (fl<? . G4cfe) (fl<=? . G4cfd) (fl/ . G4cfc) (fl- . G4cfb) (fl+ . G4cfa) (fl* . G4cf9) (fixnum->flonum . G4cf8) (fxzero? . G4cf7) (fxxor . G4cf6) (fxrotate-bit-field . G4cf5) (fxreverse-bit-field . G4cf4) (fxpositive? . G4cf3) (fxodd? . G4cf2) (fxnot . G4cf1) (fxnegative? . G4cf0) (fxmod0 . G4cef) (fxmod . G4cee) (fxmin . G4ced) (fxmax . G4cec) (fxlength . G4ceb) (fxior . G4cea) (fxif . G4ce9) (fxfirst-bit-set . G4ce8) (fxeven? . G4ce7) (fxdiv0-and-mod0 . G4ce6) (fxdiv0 . G4ce5) (fxdiv-and-mod . G4ce4) (fxdiv . G4ce3) (fxcopy-bit-field . G4ce2) (fxcopy-bit . G4ce1) (fxbit-set? . G4ce0) (fxbit-field . G4cdf) (fxbit-count . G4cde) (fxarithmetic-shift-right . G4cdd) (fxarithmetic-shift-left . G4cdc) (fxarithmetic-shift . G4cdb) (fxand . G4cda) (fx>? . G4cd9) (fx>=? . G4cd8) (fx=? . G4cd7) (fx<? . G4cd6) (fx<=? . G4cd5) (fx-/carry . G4cd4) (fx- . G4cd3) (fx+/carry . G4cd2) (fx+ . G4cd1) (fx*/carry . G4cd0) (fx* . G4ccf) (greatest-fixnum . G4cce) (least-fixnum . G4ccd) (fixnum-width . G4ccc) (fixnum? . G4ccb) (bitwise-rotate-bit-field . G4cca) (bitwise-reverse-bit-field . G4cc9) (bitwise-length . G4cc8) (bitwise-if . G4cc7) (bitwise-first-bit-set . G4cc6) (bitwise-copy-bit-field . G4cc5) (bitwise-copy-bit . G4cc4) (bitwise-bit-set? . G4cc3) (bitwise-bit-field . G4cc2) (bitwise-bit-count . G4cc1) (bitwise-xor . G4cc0) (bitwise-ior . G4cbf) (bitwise-and . G4cbe) (bitwise-not . G4cbd) (bitwise-arithmetic-shift-right . G4cbc) (bitwise-arithmetic-shift-left . G4cbb) (bitwise-arithmetic-shift . G4cba) (zero? . G4cb9) (vector? . G4cb8) (vector-set! . G4cb7) (vector-ref . G4cb6) (vector-map . G4cb5) (vector-length . G4cb4) (vector-for-each . G4cb3) (vector-fill! . G4cb2) (vector->list . G4cb1) (vector . G4cb0) (values . G4caf) (truncate . G4cae) (tan . G4cad) (symbol? . G4cac) (symbol=? . G4cab) (symbol->string . G4caa) (substring . G4ca9) (string? . G4ca8) (string>? . G4ca7) (string>=? . G4ca6) (string=? . G4ca5) (string<? . G4ca4) (string<=? . G4ca3) (string-ref . G4ca2) (string-length . G4ca1) (string-for-each . G4ca0) (string-copy . G4c9f) (string-append . G4c9e) (string->symbol . G4c9d) (string->number . G4c9c) (string->list . G4c9b) (string . G4c9a) (sqrt . G4c99) (sin . G4c98) (round . G4c97) (reverse . G4c96) (real? . G4c95) (real-valued? . G4c94) (real-part . G4c93) (rationalize . G4c92) (rational? . G4c91) (rational-valued? . G4c90) (procedure? . G4c8f) (positive? . G4c8e) (pair? . G4c8d) (odd? . G4c8c) (numerator . G4c8b) (number? . G4c8a) (number->string . G4c89) (null? . G4c88) (not . G4c87) (negative? . G4c86) (nan? . G4c85) (min . G4c84) (max . G4c83) (map . G4c82) (make-vector . G4c81) (make-string . G4c80) (make-rectangular . G4c7f) (make-polar . G4c7e) (magnitude . G4c7d) (log . G4c7c) (list? . G4c7b) (list-tail . G4c7a) (list-ref . G4c79) (list->vector . G4c78) (list->string . G4c77) (list . G4c76) (length . G4c75) (lcm . G4c74) (integer? . G4c73) (integer-valued? . G4c72) (integer->char . G4c71) (infinite? . G4c70) (inexact? . G4c6f) (inexact . G4c6e) (imag-part . G4c6d) (gcd . G4c6c) (for-each . G4c6b) (floor . G4c6a) (finite? . G4c69) (expt . G4c68) (exp . G4c67) (exact? . G4c66) (exact-integer-sqrt . G4c65) (exact . G4c64) (even? . G4c63) (error . G4c62) (eqv? . G4c61) (equal? . G4c60) (eq? . G4c5f) (dynamic-wind . G4c5e) (div0-and-mod0 . G4c5d) (mod0 . G4c5c) (div0 . G4c5b) (div-and-mod . G4c5a) (mod . G4c59) (div . G4c58) (denominator . G4c57) (cos . G4c56) (cons . G4c55) (complex? . G4c54) (char? . G4c53) (char>? . G4c52) (char>=? . G4c51) (char=? . G4c50) (char<? . G4c4f) (char<=? . G4c4e) (char->integer . G4c4d) (ceiling . G4c4c) (call-with-values . G4c4b) (call/cc . G4c4a) (call-with-current-continuation . G4c49) (cddddr . G4c48) (cdddar . G4c47) (cddadr . G4c46) (cddaar . G4c45) (cdaddr . G4c44) (cdadar . G4c43) (cdaadr . G4c42) (cdaaar . G4c41) (cadddr . G4c40) (caddar . G4c3f) (cadadr . G4c3e) (cadaar . G4c3d) (caaddr . G4c3c) (caadar . G4c3b) (caaadr . G4c3a) (caaaar . G4c39) (cdddr . G4c38) (cddar . G4c37) (cdadr . G4c36) (cdaar . G4c35) (caddr . G4c34) (cadar . G4c33) (caadr . G4c32) (caaar . G4c31) (cddr . G4c30) (cdar . G4c2f) (cadr . G4c2e) (caar . G4c2d) (cdr . G4c2c) (car . G4c2b) (boolean? . G4c2a) (boolean=? . G4c29) (atan . G4c28) (assertion-violation . G4c27) (asin . G4c26) (apply . G4c25) (append . G4c24) (angle . G4c23) (acos . G4c22) (abs . G4c21) (/ . G4c20) (* . G4c1f) (- . G4c1e) (+ . G4c1d) (>= . G4c1c) (> . G4c1b) (= . G4c1a) (<= . G4c19) (< . G4c18) (&no-nans . G4c16) (&no-infinities . G4c15) (&i/o-encoding . G4c14) (&i/o-decoding . G4c13) (&i/o-port . G4c12) (&i/o-file-does-not-exist . G4c11) (&i/o-file-already-exists . G4c10) (&i/o-file-is-read-only . G4c0f) (&i/o-file-protection . G4c0e) (&i/o-filename . G4c0d) (&i/o-invalid-position . G4c0c) (&i/o-write . G4c0b) (&i/o-read . G4c0a) (&i/o . G4c09) (&undefined . G4c08) (&syntax . G4c07) (&lexical . G4c06) (&implementation-restriction . G4c05) (&non-continuable . G4c04) (&who . G4c03) (&irritants . G4c02) (&assertion . G4c01) (&violation . G4c00) (&error . G4bff) (&serious . G4bfe) (&warning . G4bfd) (&message . G4bfc) (&condition . G4bfb) (define-condition-type . G4bfa) (define-enumeration . G4bf9) (define-record-type . G4bf8) (parent-rtd . G4bf7) (nongenerative . G4bf6) (opaque . G4bf5) (sealed . G4bf4) (protocol . G4bf3) (parent . G4bf2) (immutable . G4bf1) (mutable . G4bf0) (fields . G4bef) (error-handling-mode . G4bee) (file-options . G4bed) (buffer-mode . G4bec) (eol-style . G4beb) (guard . G4bea) (unsyntax-splicing . G4be7) (unsyntax . G4be6) (unquote-splicing . G4be5) (unquote . G4be4) (_ . G4be3) (else . G4be2) (=> . G4be1) (... . G4be0) (assert . G4bdf) (endianness . G4bde) (do . G4bdb) (cond . G4bda) (let* . G4bd9) (let . G4bd8) (let*-values . G4bd7) (let-values . G4bd6) (identifier-syntax . G4bd5) (with-syntax . G4bd4) (quasisyntax . G4bd3) (quasiquote . G4bd2) (syntax-rules . G4bd1) (record-constructor-descriptor . G4bce) (record-type-descriptor . G4bcd) (case . G4bcc) (unless . G4bca) (when . G4bc9) (or . G4bc8) (and . G4bc7) (if . G4bc6) (letrec* . G4bc5) (letrec . G4bc4) (case-lambda . G4bc2) (lambda . G4bc1) (syntax . G4bc0) (syntax-case . G4bbf) (quote . G4bbe) (letrec-syntax . G4bbc) (let-syntax . G4bbb) (set! . G4bba) (begin . G4bb8) (define-syntax . G4bb6) (define . G4bb5)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e7d '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G2ded) (quotient . G4d9b) (null-environment . G2deb) (remainder . G4d9a) (modulo . G4d99) (inexact->exact . G4d98) (force . G4d97) (exact->inexact . G4d96) (make-promise . G4d95) (delay . G4bdd)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e7e '(rnrs control) '(6) '() '() '() '((do . G4bdb) (unless . G4bca) (when . G4bc9) (case-lambda . G4bc2)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e7f '(rnrs eval) '(6) '() '() '() '((eval . G2df1) (environment . G2de9)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e80 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4d91) (set-car! . G4d90)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e81 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4d93) (string-set! . G4d92)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e82 '(rnrs programs) '(6) '() '() '() '((exit . G4d94) (command-line . G4ab8)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e83 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2b6d) (identifier? . G2e13) (generate-temporaries . G2dff) (free-identifier=? . G2e01) (syntax->datum . G2e17) (datum->syntax . G2e15) (bound-identifier=? . G2e03) (syntax-violation . G2e11) (unsyntax-splicing . G4be7) (unsyntax . G4be6) (_ . G4be3) (... . G4be0) (with-syntax . G4bd4) (quasisyntax . G4bd3) (syntax . G4bc0) (syntax-case . G4bbf)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e84 '(rnrs files) '(6) '() '() '() '((delete-file . G4e04) (file-exists? . G4e03) (make-i/o-write-error . G48b0) (make-i/o-read-error . G489b) (make-i/o-port-error . G494e) (make-i/o-invalid-position-error . G48c6) (make-i/o-filename-error . G48e0) (make-i/o-file-protection-error . G48f9) (make-i/o-file-is-read-only-error . G490e) (make-i/o-file-does-not-exist-error . G4938) (make-i/o-file-already-exists-error . G4923) (make-i/o-error . G4886) (i/o-write-error? . G48b2) (i/o-read-error? . G489d) (i/o-port-error? . G4952) (i/o-invalid-position-error? . G48ca) (i/o-filename-error? . G48e4) (i/o-file-protection-error? . G48fb) (i/o-file-is-read-only-error? . G4910) (i/o-file-does-not-exist-error? . G493a) (i/o-file-already-exists-error? . G4925) (i/o-error? . G4888) (i/o-error-position . G48cc) (i/o-error-port . G4954) (i/o-error-filename . G48e6) (&i/o-port . G4c12) (&i/o-file-does-not-exist . G4c11) (&i/o-file-already-exists . G4c10) (&i/o-file-is-read-only . G4c0f) (&i/o-file-protection . G4c0e) (&i/o-filename . G4c0d) (&i/o-invalid-position . G4c0c) (&i/o-write . G4c0b) (&i/o-read . G4c0a) (&i/o . G4c09)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e85 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G4e02) (vector-sort . G4e01) (list-sort . G4e00)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e86 '(rnrs base) '(6) '() '() '() '((zero? . G4cb9) (vector? . G4cb8) (vector-set! . G4cb7) (vector-ref . G4cb6) (vector-map . G4cb5) (vector-length . G4cb4) (vector-for-each . G4cb3) (vector-fill! . G4cb2) (vector->list . G4cb1) (vector . G4cb0) (values . G4caf) (truncate . G4cae) (tan . G4cad) (symbol? . G4cac) (symbol=? . G4cab) (symbol->string . G4caa) (substring . G4ca9) (string? . G4ca8) (string>? . G4ca7) (string>=? . G4ca6) (string=? . G4ca5) (string<? . G4ca4) (string<=? . G4ca3) (string-ref . G4ca2) (string-length . G4ca1) (string-for-each . G4ca0) (string-copy . G4c9f) (string-append . G4c9e) (string->symbol . G4c9d) (string->number . G4c9c) (string->list . G4c9b) (string . G4c9a) (sqrt . G4c99) (sin . G4c98) (round . G4c97) (reverse . G4c96) (real? . G4c95) (real-valued? . G4c94) (real-part . G4c93) (rationalize . G4c92) (rational? . G4c91) (rational-valued? . G4c90) (procedure? . G4c8f) (positive? . G4c8e) (pair? . G4c8d) (odd? . G4c8c) (numerator . G4c8b) (number? . G4c8a) (number->string . G4c89) (null? . G4c88) (not . G4c87) (negative? . G4c86) (nan? . G4c85) (min . G4c84) (max . G4c83) (map . G4c82) (make-vector . G4c81) (make-string . G4c80) (make-rectangular . G4c7f) (make-polar . G4c7e) (magnitude . G4c7d) (log . G4c7c) (list? . G4c7b) (list-tail . G4c7a) (list-ref . G4c79) (list->vector . G4c78) (list->string . G4c77) (list . G4c76) (length . G4c75) (lcm . G4c74) (integer? . G4c73) (integer-valued? . G4c72) (integer->char . G4c71) (infinite? . G4c70) (inexact? . G4c6f) (inexact . G4c6e) (imag-part . G4c6d) (gcd . G4c6c) (for-each . G4c6b) (floor . G4c6a) (finite? . G4c69) (expt . G4c68) (exp . G4c67) (exact? . G4c66) (exact-integer-sqrt . G4c65) (exact . G4c64) (even? . G4c63) (error . G4c62) (eqv? . G4c61) (equal? . G4c60) (eq? . G4c5f) (dynamic-wind . G4c5e) (div0-and-mod0 . G4c5d) (mod0 . G4c5c) (div0 . G4c5b) (div-and-mod . G4c5a) (mod . G4c59) (div . G4c58) (denominator . G4c57) (cos . G4c56) (cons . G4c55) (complex? . G4c54) (char? . G4c53) (char>? . G4c52) (char>=? . G4c51) (char=? . G4c50) (char<? . G4c4f) (char<=? . G4c4e) (char->integer . G4c4d) (ceiling . G4c4c) (call-with-values . G4c4b) (call/cc . G4c4a) (call-with-current-continuation . G4c49) (cddddr . G4c48) (cdddar . G4c47) (cddadr . G4c46) (cddaar . G4c45) (cdaddr . G4c44) (cdadar . G4c43) (cdaadr . G4c42) (cdaaar . G4c41) (cadddr . G4c40) (caddar . G4c3f) (cadadr . G4c3e) (cadaar . G4c3d) (caaddr . G4c3c) (caadar . G4c3b) (caaadr . G4c3a) (caaaar . G4c39) (cdddr . G4c38) (cddar . G4c37) (cdadr . G4c36) (cdaar . G4c35) (caddr . G4c34) (cadar . G4c33) (caadr . G4c32) (caaar . G4c31) (cddr . G4c30) (cdar . G4c2f) (cadr . G4c2e) (caar . G4c2d) (cdr . G4c2c) (car . G4c2b) (boolean? . G4c2a) (boolean=? . G4c29) (atan . G4c28) (assertion-violation . G4c27) (asin . G4c26) (apply . G4c25) (append . G4c24) (angle . G4c23) (acos . G4c22) (abs . G4c21) (/ . G4c20) (* . G4c1f) (- . G4c1e) (+ . G4c1d) (>= . G4c1c) (> . G4c1b) (= . G4c1a) (<= . G4c19) (< . G4c18) (unquote-splicing . G4be5) (unquote . G4be4) (_ . G4be3) (else . G4be2) (=> . G4be1) (... . G4be0) (assert . G4bdf) (cond . G4bda) (let* . G4bd9) (let . G4bd8) (let*-values . G4bd7) (let-values . G4bd6) (identifier-syntax . G4bd5) (quasiquote . G4bd2) (syntax-rules . G4bd1) (case . G4bcc) (or . G4bc8) (and . G4bc7) (if . G4bc6) (letrec* . G4bc5) (letrec . G4bc4) (lambda . G4bc1) (quote . G4bbe) (letrec-syntax . G4bbc) (let-syntax . G4bbb) (set! . G4bba) (begin . G4bb8) (define-syntax . G4bb6) (define . G4bb5)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e87 '(rnrs lists) '(6) '() '() '() '((remove . G4d8f) (remv . G4d8e) (remp . G4d8d) (remq . G4d8c) (partition . G4d8b) (memv . G4d8a) (memq . G4d89) (memp . G4d88) (member . G4d87) (exists . G4d86) (for-all . G4d85) (fold-right . G4d84) (fold-left . G4d83) (find . G4d82) (filter . G4d81) (cons* . G4d80) (assv . G4d7f) (assq . G4d7e) (assp . G4d7d) (assoc . G4d7c)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e88 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G4dea) (call-with-input-file . G4de9) (write-char . G4de8) (write . G4de7) (with-output-to-file . G4de6) (with-input-from-file . G4de5) (read-char . G4de4) (read . G4de3) (peek-char . G4de2) (open-output-file . G4de1) (open-input-file . G4de0) (newline . G4ddf) (display . G4dde) (close-output-port . G4ddd) (close-input-port . G4ddc) (eof-object? . G4ddb) (eof-object . G4dda) (current-error-port . G4dd9) (current-output-port . G4dd8) (current-input-port . G4dd7) (output-port? . G4dd6) (input-port? . G4dd5) (make-i/o-write-error . G48b0) (make-i/o-read-error . G489b) (make-i/o-port-error . G494e) (make-i/o-invalid-position-error . G48c6) (make-i/o-filename-error . G48e0) (make-i/o-file-protection-error . G48f9) (make-i/o-file-is-read-only-error . G490e) (make-i/o-file-does-not-exist-error . G4938) (make-i/o-file-already-exists-error . G4923) (make-i/o-error . G4886) (i/o-write-error? . G48b2) (i/o-read-error? . G489d) (i/o-port-error? . G4952) (i/o-invalid-position-error? . G48ca) (i/o-filename-error? . G48e4) (i/o-file-protection-error? . G48fb) (i/o-file-is-read-only-error? . G4910) (i/o-file-does-not-exist-error? . G493a) (i/o-file-already-exists-error? . G4925) (i/o-error? . G4888) (i/o-error-position . G48cc) (i/o-error-port . G4954) (i/o-error-filename . G48e6) (&i/o-port . G4c12) (&i/o-file-does-not-exist . G4c11) (&i/o-file-already-exists . G4c10) (&i/o-file-is-read-only . G4c0f) (&i/o-file-protection . G4c0e) (&i/o-filename . G4c0d) (&i/o-invalid-position . G4c0c) (&i/o-write . G4c0b) (&i/o-read . G4c0a) (&i/o . G4c09)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e89 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4dab) (utf32->string . G4d60) (utf16->string . G4d5f) (utf8->string . G4d5e) (uint-list->bytevector . G4d5d) (u8-list->bytevector . G4d5c) (string->utf8 . G4d5b) (string->utf32 . G4d5a) (string->utf16 . G4d59) (sint-list->bytevector . G4d58) (native-endianness . G4d57) (bytevector? . G4d56) (bytevector=? . G4d55) (bytevector-uint-set! . G4d54) (bytevector-uint-ref . G4d53) (bytevector-u8-set! . G4d52) (bytevector-u8-ref . G4d51) (bytevector-u64-set! . G4d50) (bytevector-u64-ref . G4d4f) (bytevector-u64-native-set! . G4d4e) (bytevector-u64-native-ref . G4d4d) (bytevector-u32-set! . G4d4c) (bytevector-u32-ref . G4d4b) (bytevector-u32-native-set! . G4d4a) (bytevector-u32-native-ref . G4d49) (bytevector-u16-set! . G4d48) (bytevector-u16-ref . G4d47) (bytevector-u16-native-set! . G4d46) (bytevector-u16-native-ref . G4d45) (bytevector-sint-set! . G4d44) (bytevector-sint-ref . G4d43) (bytevector-s8-set! . G4d42) (bytevector-s8-ref . G4d41) (bytevector-s64-set! . G4d40) (bytevector-s64-ref . G4d3f) (bytevector-s64-native-set! . G4d3e) (bytevector-s64-native-ref . G4d3d) (bytevector-s32-set! . G4d3c) (bytevector-s32-ref . G4d3b) (bytevector-s32-native-set! . G4d3a) (bytevector-s32-native-ref . G4d39) (bytevector-s16-set! . G4d38) (bytevector-s16-ref . G4d37) (bytevector-s16-native-set! . G4d36) (bytevector-s16-native-ref . G4d35) (bytevector-length . G4d34) (bytevector-ieee-single-ref . G4d33) (bytevector-ieee-single-set! . G4d32) (bytevector-ieee-single-native-set! . G4d31) (bytevector-ieee-single-native-ref . G4d30) (bytevector-ieee-double-set! . G4d2f) (bytevector-ieee-double-ref . G4d2e) (bytevector-ieee-double-native-set! . G4d2d) (bytevector-ieee-double-native-ref . G4d2c) (bytevector-fill! . G4d2b) (bytevector-copy! . G4d2a) (bytevector-copy . G4d29) (bytevector->uint-list . G4d28) (bytevector->u8-list . G4d27) (bytevector->sint-list . G4d26) (endianness . G4bde)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e8a '(rnrs unicode) '(6) '() '() '() '((string-upcase . G4e32) (string-titlecase . G4e31) (string-normalize-nfkd . G4e30) (string-normalize-nfkc . G4e2f) (string-normalize-nfd . G4e2e) (string-normalize-nfc . G4e2d) (string-foldcase . G4e2c) (string-downcase . G4e2b) (string-ci>? . G4e2a) (string-ci>=? . G4e29) (string-ci=? . G4e28) (string-ci<? . G4e27) (string-ci<=? . G4e26) (char-whitespace? . G4e25) (char-upper-case? . G4e24) (char-title-case? . G4e23) (char-numeric? . G4e22) (char-lower-case? . G4e21) (char-general-category . G4e20) (char-upcase . G4e1f) (char-titlecase . G4e1e) (char-foldcase . G4e1d) (char-downcase . G4e1c) (char-ci>? . G4e1b) (char-ci>=? . G4e1a) (char-ci=? . G4e19) (char-ci<? . G4e18) (char-ci<=? . G4e17) (char-alphabetic? . G4e16)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e8b '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4d75) (raise-continuable . G4d74) (raise . G4d73) (guard . G4bea) (else . G4be2) (=> . G4be1)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e8c '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4cca) (bitwise-reverse-bit-field . G4cc9) (bitwise-length . G4cc8) (bitwise-if . G4cc7) (bitwise-first-bit-set . G4cc6) (bitwise-copy-bit-field . G4cc5) (bitwise-copy-bit . G4cc4) (bitwise-bit-set? . G4cc3) (bitwise-bit-field . G4cc2) (bitwise-bit-count . G4cc1) (bitwise-xor . G4cc0) (bitwise-ior . G4cbf) (bitwise-and . G4cbe) (bitwise-not . G4cbd) (bitwise-arithmetic-shift-right . G4cbc) (bitwise-arithmetic-shift-left . G4cbb) (bitwise-arithmetic-shift . G4cba)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e8d '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4cf7) (fxxor . G4cf6) (fxrotate-bit-field . G4cf5) (fxreverse-bit-field . G4cf4) (fxpositive? . G4cf3) (fxodd? . G4cf2) (fxnot . G4cf1) (fxnegative? . G4cf0) (fxmod0 . G4cef) (fxmod . G4cee) (fxmin . G4ced) (fxmax . G4cec) (fxlength . G4ceb) (fxior . G4cea) (fxif . G4ce9) (fxfirst-bit-set . G4ce8) (fxeven? . G4ce7) (fxdiv0-and-mod0 . G4ce6) (fxdiv0 . G4ce5) (fxdiv-and-mod . G4ce4) (fxdiv . G4ce3) (fxcopy-bit-field . G4ce2) (fxcopy-bit . G4ce1) (fxbit-set? . G4ce0) (fxbit-field . G4cdf) (fxbit-count . G4cde) (fxarithmetic-shift-right . G4cdd) (fxarithmetic-shift-left . G4cdc) (fxarithmetic-shift . G4cdb) (fxand . G4cda) (fx>? . G4cd9) (fx>=? . G4cd8) (fx=? . G4cd7) (fx<? . G4cd6) (fx<=? . G4cd5) (fx-/carry . G4cd4) (fx- . G4cd3) (fx+/carry . G4cd2) (fx+ . G4cd1) (fx*/carry . G4cd0) (fx* . G4ccf) (greatest-fixnum . G4cce) (least-fixnum . G4ccd) (fixnum-width . G4ccc) (fixnum? . G4ccb)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e8e '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G49ad) (no-infinities-violation? . G4998) (make-no-nans-violation . G49ab) (make-no-infinities-violation . G4996) (real->flonum . G4d25) (flzero? . G4d24) (fltruncate . G4d23) (fltan . G4d22) (flsqrt . G4d21) (flsin . G4d20) (flround . G4d1f) (flpositive? . G4d1e) (flonum? . G4d1d) (flodd? . G4d1c) (flnumerator . G4d1b) (flnegative? . G4d1a) (flnan? . G4d19) (flmod0 . G4d18) (flmod . G4d17) (flmin . G4d16) (flmax . G4d15) (fllog . G4d14) (flinteger? . G4d13) (flinfinite? . G4d12) (flfloor . G4d11) (flfinite? . G4d10) (flexpt . G4d0f) (flexp . G4d0e) (fleven? . G4d0d) (fldiv0-and-mod0 . G4d0c) (fldiv0 . G4d0b) (fldiv-and-mod . G4d0a) (fldiv . G4d09) (fldenominator . G4d08) (flcos . G4d07) (flceiling . G4d06) (flatan . G4d05) (flasin . G4d04) (flacos . G4d03) (flabs . G4d02) (fl>? . G4d01) (fl>=? . G4d00) (fl=? . G4cff) (fl<? . G4cfe) (fl<=? . G4cfd) (fl/ . G4cfc) (fl- . G4cfb) (fl+ . G4cfa) (fl* . G4cf9) (fixnum->flonum . G4cf8) (&no-nans . G4c16) (&no-infinities . G4c15)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e8f '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G4dff) (string-ci-hash . G4dfe) (string-hash . G4dfd) (equal-hash . G4dfc) (hashtable-equivalence-function . G4dfb) (make-hashtable . G4dfa) (hashtable-hash-function . G4df9) (make-eqv-hashtable . G4df8) (make-eq-hashtable . G4df7) (hashtable? . G4df6) (hashtable-update! . G4df5) (hashtable-size . G4df4) (hashtable-set! . G4df3) (hashtable-ref . G4df2) (hashtable-mutable? . G4df1) (hashtable-keys . G4df0) (hashtable-entries . G4def) (hashtable-delete! . G4dee) (hashtable-copy . G4ded) (hashtable-contains? . G4dec) (hashtable-clear! . G4deb)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e90 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4ddb) (eof-object . G4dda) (current-error-port . G4dd9) (current-output-port . G4dd8) (current-input-port . G4dd7) (output-port? . G4dd6) (input-port? . G4dd5) (utf-8-codec . G4dd4) (utf-16-codec . G4dd3) (transcoder-error-handling-mode . G4dd2) (transcoder-eol-style . G4dd1) (transcoder-codec . G4dd0) (transcoded-port . G4dcf) (textual-port? . G4dce) (string->bytevector . G4dcd) (standard-output-port . G4dcc) (standard-input-port . G4dcb) (standard-error-port . G4dca) (set-port-position! . G4dc9) (put-u8 . G4dc8) (put-string . G4dc7) (put-datum . G4dc6) (put-char . G4dc5) (put-bytevector . G4dc4) (port? . G4dc3) (port-transcoder . G4dc2) (port-position . G4dc1) (port-has-set-port-position!? . G4dc0) (port-has-port-position? . G4dbf) (port-eof? . G4dbe) (output-port-buffer-mode . G4dbd) (open-string-output-port . G4dbc) (open-string-input-port . G4dbb) (open-file-output-port . G4dba) (open-file-input/output-port . G4db9) (open-file-input-port . G4db8) (open-bytevector-output-port . G4db7) (open-bytevector-input-port . G4db6) (native-transcoder . G4db5) (native-eol-style . G4db4) (make-transcoder . G4db3) (latin-1-codec . G4db2) (make-i/o-write-error . G48b0) (make-i/o-read-error . G489b) (make-i/o-port-error . G494e) (make-i/o-invalid-position-error . G48c6) (make-i/o-filename-error . G48e0) (make-i/o-file-protection-error . G48f9) (make-i/o-file-is-read-only-error . G490e) (make-i/o-file-does-not-exist-error . G4938) (make-i/o-file-already-exists-error . G4923) (make-i/o-error . G4886) (make-i/o-encoding-error . G497d) (make-i/o-decoding-error . G4967) (make-custom-textual-output-port . G4db1) (make-custom-textual-input/output-port . G4db0) (make-custom-textual-input-port . G4daf) (make-custom-binary-output-port . G4dae) (make-custom-binary-input/output-port . G4dad) (make-custom-binary-input-port . G4dac) (lookahead-u8 . G4daa) (lookahead-char . G4da9) (i/o-write-error? . G48b2) (i/o-read-error? . G489d) (i/o-port-error? . G4952) (i/o-invalid-position-error? . G48ca) (i/o-filename-error? . G48e4) (i/o-file-protection-error? . G48fb) (i/o-file-is-read-only-error? . G4910) (i/o-file-does-not-exist-error? . G493a) (i/o-file-already-exists-error? . G4925) (i/o-error? . G4888) (i/o-error-position . G48cc) (i/o-error-port . G4954) (i/o-error-filename . G48e6) (i/o-encoding-error? . G4981) (i/o-encoding-error-char . G4983) (i/o-decoding-error? . G4969) (get-u8 . G4da8) (get-string-n! . G4da7) (get-string-n . G4da6) (get-string-all . G4da5) (get-line . G4da4) (get-datum . G4da3) (get-char . G4da2) (get-bytevector-some . G4da1) (get-bytevector-n! . G4da0) (get-bytevector-n . G4d9f) (get-bytevector-all . G4d9e) (flush-output-port . G4d9d) (close-port . G4d9c) (call-with-string-output-port . G4d7b) (call-with-port . G4d7a) (call-with-bytevector-output-port . G4d79) (bytevector->string . G4d78) (buffer-mode? . G4d77) (binary-port? . G4d76) (&i/o-encoding . G4c14) (&i/o-decoding . G4c13) (&i/o-port . G4c12) (&i/o-file-does-not-exist . G4c11) (&i/o-file-already-exists . G4c10) (&i/o-file-is-read-only . G4c0f) (&i/o-file-protection . G4c0e) (&i/o-filename . G4c0d) (&i/o-invalid-position . G4c0c) (&i/o-write . G4c0b) (&i/o-read . G4c0a) (&i/o . G4c09) (error-handling-mode . G4bee) (file-options . G4bed) (buffer-mode . G4bec) (eol-style . G4beb)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e91 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4d72) (enum-set=? . G4d71) (enum-set-universe . G4d70) (enum-set-union . G4d6f) (enum-set-subset? . G4d6e) (enum-set-projection . G4d6d) (enum-set-member? . G4d6c) (enum-set-intersection . G4d6b) (enum-set-indexer . G4d6a) (enum-set-difference . G4d69) (enum-set-constructor . G4d68) (enum-set-complement . G4d67) (enum-set->list . G4d66) (define-enumeration . G4bf9)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e92 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G47fe) (warning? . G4778) (violation? . G47b7) (undefined-violation? . G4873) (syntax-violation? . G485a) (syntax-violation-subform . G485e) (syntax-violation-form . G485c) (syntax-violation . G2e11) (simple-conditions . G4d65) (serious-condition? . G478d) (non-continuable-violation? . G4815) (message-condition? . G4761) (make-who-condition . G47fa) (make-warning . G4776) (make-violation . G47b5) (make-undefined-violation . G4871) (make-syntax-violation . G4854) (make-serious-condition . G478b) (make-non-continuable-violation . G4813) (make-message-condition . G475d) (make-lexical-violation . G483d) (make-irritants-condition . G47e0) (make-implementation-restriction-violation . G4828) (make-error . G47a0) (make-assertion-violation . G47ca) (lexical-violation? . G483f) (irritants-condition? . G47e4) (implementation-restriction-violation? . G482a) (error? . G47a2) (condition-who . G4800) (condition-predicate . G4d64) (condition-message . G4763) (condition-irritants . G47e6) (condition-accessor . G4d63) (condition . G4d62) (assertion-violation? . G47cc) (condition? . G4d61) (&undefined . G4c08) (&syntax . G4c07) (&lexical . G4c06) (&implementation-restriction . G4c05) (&non-continuable . G4c04) (&who . G4c03) (&irritants . G4c02) (&assertion . G4c01) (&violation . G4c00) (&error . G4bff) (&serious . G4bfe) (&warning . G4bfd) (&message . G4bfc) (&condition . G4bfb) (define-condition-type . G4bfa)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e93 '(rnrs records inspection) '(6) '() '() '() '((record? . G4e0e) (record-type-uid . G4e0d) (record-type-sealed? . G4e0c) (record-type-parent . G4e0b) (record-type-opaque? . G4e0a) (record-type-name . G4e09) (record-type-generative? . G4e08) (record-type-field-names . G4e07) (record-rtd . G4e06) (record-field-mutable? . G4e05)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e94 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G4e15) (record-predicate . G4e14) (record-mutator . G4e13) (record-constructor . G4e12) (record-accessor . G4e11) (make-record-type-descriptor . G4e10) (make-record-constructor-descriptor . G4e0f)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e95 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4bf8) (parent-rtd . G4bf7) (nongenerative . G4bf6) (opaque . G4bf5) (sealed . G4bf4) (protocol . G4bf3) (parent . G4bf2) (immutable . G4bf1) (mutable . G4bf0) (fields . G4bef) (record-constructor-descriptor . G4bce) (record-type-descriptor . G4bcd)) '() values values '#f '#f '#t '#f) (G295c@G2801@install-library 'G4e96 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G49b1) (&no-nans-rtd . G49af) (&no-infinities-rcd . G499c) (&no-infinities-rtd . G499a) (&i/o-encoding-rcd . G4987) (&i/o-encoding-rtd . G4985) (&i/o-decoding-rcd . G496d) (&i/o-decoding-rtd . G496b) (&i/o-port-rcd . G4958) (&i/o-port-rtd . G4956) (&i/o-file-does-not-exist-rcd . G493e) (&i/o-file-does-not-exist-rtd . G493c) (&i/o-file-already-exists-rcd . G4929) (&i/o-file-already-exists-rtd . G4927) (&i/o-file-is-read-only-rcd . G4914) (&i/o-file-is-read-only-rtd . G4912) (&i/o-file-protection-rcd . G48ff) (&i/o-file-protection-rtd . G48fd) (&i/o-filename-rcd . G48ea) (&i/o-filename-rtd . G48e8) (&i/o-invalid-position-rcd . G48d0) (&i/o-invalid-position-rtd . G48ce) (&i/o-write-rcd . G48b6) (&i/o-write-rtd . G48b4) (&i/o-read-rcd . G48a1) (&i/o-read-rtd . G489f) (&i/o-rcd . G488c) (&i/o-rtd . G488a) (&undefined-rcd . G4877) (&undefined-rtd . G4875) (&syntax-rcd . G4862) (&syntax-rtd . G4860) (&lexical-rcd . G4843) (&lexical-rtd . G4841) (&implementation-restriction-rcd . G482e) (&implementation-restriction-rtd . G482c) (&non-continuable-rcd . G4819) (&non-continuable-rtd . G4817) (&who-rcd . G4804) (&who-rtd . G4802) (&irritants-rcd . G47ea) (&irritants-rtd . G47e8) (&assertion-rcd . G47d0) (&assertion-rtd . G47ce) (&violation-rcd . G47bb) (&violation-rtd . G47b9) (&error-rcd . G47a6) (&error-rtd . G47a4) (&serious-rcd . G4791) (&serious-rtd . G478f) (&warning-rcd . G477c) (&warning-rtd . G477a) (&message-rcd . G4767) (&message-rtd . G4765) (&condition-rcd . G470c) (&condition-rtd . G470a) (syntax-error . G2e0d) (syntax-dispatch . G2d26) (pretty-print . G4e76) (eval-core . G4e75) (set-symbol-value! . G4e74) (symbol-value . G4e73) (gensym . G4e72) (void . G4e71) (load . G4abe) (interaction-environment . G2e1d) (char-ready? . G4e70) (regexp? . G4e6f) (read-line . G4e6e) (ungensym . G4e6d) (alist->eq-hash-table . G4e6c) (assoc-ref . G4e6b) (print . G4e6a) (format . G4e69) (host-os . G4e68) (library-path . G27e0) (standard-library-path . G4e67) (file-newer? . G4e66) (stat-mtime . G4e65) (write-to-file . G4e64) (file->list . G4e63) (file->string . G4e62) (digit->integer . G4e61) (call-with-string-input-port . G4e60) (call-with-string-io . G4e5f) (string-split . G4e5e) (bytevector-for-each . G4e5d) (string->regexp . G4e5c) (rxmatch . G4e5b) (regexp-replace-all . G4e5a) (hashtable-for-each . G4e59) (call-process . G4e58) (local-tz-offset . G4e57) (microseconds . G4e56) (readdir . G4e55) (set-current-directory! . G4e54) (expand-path . G4e53) (current-directory . G4e52) (%spawn . G4e51) (%waitpid . G4e50) (%ffi-supported? . G4e4f) (%ffi-pointer-ref . G4e4e) (%ffi-pointer->string . G4e4d) (%ffi-call->string-or-zero . G4e4c) (%ffi-call->double . G4e4b) (%ffi-call->void* . G4e4a) (%ffi-call->void . G4e49) (%ffi-call->int . G4e48) (%ffi-lookup . G4e47) (%ffi-open . G4e46) (%fork . G4e45) (%pipe . G4e44) (p . G4e43) (open-output-string . G4e42) (get-output-string . G4e41) (get-environment-variables . G4e40) (get-environment-variable . G4e3f) (get-timeofday . G4e3e) (get-command-line . G4e3d) (sys-display . G4e3c) (source-info . G4e3b) (make-compiler-instruction . G4e3a) (make-instruction . G4e39) (set-source-info! . G4e38) (bignum? . G4e37) (fast-equal? . G4e36) (fasl-read . G4e35) (fasl-write . G4e34) (time-usage . G4e33) (make-parameter . G2617) (string-upcase . G4e32) (string-titlecase . G4e31) (string-normalize-nfkd . G4e30) (string-normalize-nfkc . G4e2f) (string-normalize-nfd . G4e2e) (string-normalize-nfc . G4e2d) (string-foldcase . G4e2c) (string-downcase . G4e2b) (string-ci>? . G4e2a) (string-ci>=? . G4e29) (string-ci=? . G4e28) (string-ci<? . G4e27) (string-ci<=? . G4e26) (char-whitespace? . G4e25) (char-upper-case? . G4e24) (char-title-case? . G4e23) (char-numeric? . G4e22) (char-lower-case? . G4e21) (char-general-category . G4e20) (char-upcase . G4e1f) (char-titlecase . G4e1e) (char-foldcase . G4e1d) (char-downcase . G4e1c) (char-ci>? . G4e1b) (char-ci>=? . G4e1a) (char-ci=? . G4e19) (char-ci<? . G4e18) (char-ci<=? . G4e17) (char-alphabetic? . G4e16) (make-variable-transformer . G2b6d) (identifier? . G2e13) (generate-temporaries . G2dff) (free-identifier=? . G2e01) (syntax->datum . G2e17) (datum->syntax . G2e15) (bound-identifier=? . G2e03) (record-type-descriptor? . G4e15) (record-predicate . G4e14) (record-mutator . G4e13) (record-constructor . G4e12) (record-accessor . G4e11) (make-record-type-descriptor . G4e10) (make-record-constructor-descriptor . G4e0f) (record? . G4e0e) (record-type-uid . G4e0d) (record-type-sealed? . G4e0c) (record-type-parent . G4e0b) (record-type-opaque? . G4e0a) (record-type-name . G4e09) (record-type-generative? . G4e08) (record-type-field-names . G4e07) (record-rtd . G4e06) (record-field-mutable? . G4e05) (delete-file . G4e04) (file-exists? . G4e03) (vector-sort! . G4e02) (vector-sort . G4e01) (list-sort . G4e00) (symbol-hash . G4dff) (string-ci-hash . G4dfe) (string-hash . G4dfd) (equal-hash . G4dfc) (hashtable-equivalence-function . G4dfb) (make-hashtable . G4dfa) (hashtable-hash-function . G4df9) (make-eqv-hashtable . G4df8) (make-eq-hashtable . G4df7) (hashtable? . G4df6) (hashtable-update! . G4df5) (hashtable-size . G4df4) (hashtable-set! . G4df3) (hashtable-ref . G4df2) (hashtable-mutable? . G4df1) (hashtable-keys . G4df0) (hashtable-entries . G4def) (hashtable-delete! . G4dee) (hashtable-copy . G4ded) (hashtable-contains? . G4dec) (hashtable-clear! . G4deb) (call-with-output-file . G4dea) (call-with-input-file . G4de9) (write-char . G4de8) (write . G4de7) (with-output-to-file . G4de6) (with-input-from-file . G4de5) (read-char . G4de4) (read . G4de3) (peek-char . G4de2) (open-output-file . G4de1) (open-input-file . G4de0) (newline . G4ddf) (display . G4dde) (close-output-port . G4ddd) (close-input-port . G4ddc) (eof-object? . G4ddb) (eof-object . G4dda) (current-error-port . G4dd9) (current-output-port . G4dd8) (current-input-port . G4dd7) (output-port? . G4dd6) (input-port? . G4dd5) (utf-8-codec . G4dd4) (utf-16-codec . G4dd3) (transcoder-error-handling-mode . G4dd2) (transcoder-eol-style . G4dd1) (transcoder-codec . G4dd0) (transcoded-port . G4dcf) (textual-port? . G4dce) (string->bytevector . G4dcd) (standard-output-port . G4dcc) (standard-input-port . G4dcb) (standard-error-port . G4dca) (set-port-position! . G4dc9) (put-u8 . G4dc8) (put-string . G4dc7) (put-datum . G4dc6) (put-char . G4dc5) (put-bytevector . G4dc4) (port? . G4dc3) (port-transcoder . G4dc2) (port-position . G4dc1) (port-has-set-port-position!? . G4dc0) (port-has-port-position? . G4dbf) (port-eof? . G4dbe) (output-port-buffer-mode . G4dbd) (open-string-output-port . G4dbc) (open-string-input-port . G4dbb) (open-file-output-port . G4dba) (open-file-input/output-port . G4db9) (open-file-input-port . G4db8) (open-bytevector-output-port . G4db7) (open-bytevector-input-port . G4db6) (native-transcoder . G4db5) (native-eol-style . G4db4) (make-transcoder . G4db3) (latin-1-codec . G4db2) (make-i/o-write-error . G48b0) (make-i/o-read-error . G489b) (make-i/o-port-error . G494e) (make-i/o-invalid-position-error . G48c6) (make-i/o-filename-error . G48e0) (make-i/o-file-protection-error . G48f9) (make-i/o-file-is-read-only-error . G490e) (make-i/o-file-does-not-exist-error . G4938) (make-i/o-file-already-exists-error . G4923) (make-i/o-error . G4886) (make-i/o-encoding-error . G497d) (make-i/o-decoding-error . G4967) (make-custom-textual-output-port . G4db1) (make-custom-textual-input/output-port . G4db0) (make-custom-textual-input-port . G4daf) (make-custom-binary-output-port . G4dae) (make-custom-binary-input/output-port . G4dad) (make-custom-binary-input-port . G4dac) (make-bytevector . G4dab) (lookahead-u8 . G4daa) (lookahead-char . G4da9) (i/o-write-error? . G48b2) (i/o-read-error? . G489d) (i/o-port-error? . G4952) (i/o-invalid-position-error? . G48ca) (i/o-filename-error? . G48e4) (i/o-file-protection-error? . G48fb) (i/o-file-is-read-only-error? . G4910) (i/o-file-does-not-exist-error? . G493a) (i/o-file-already-exists-error? . G4925) (i/o-error? . G4888) (i/o-error-position . G48cc) (i/o-error-port . G4954) (i/o-error-filename . G48e6) (i/o-encoding-error? . G4981) (i/o-encoding-error-char . G4983) (i/o-decoding-error? . G4969) (get-u8 . G4da8) (get-string-n! . G4da7) (get-string-n . G4da6) (get-string-all . G4da5) (get-line . G4da4) (get-datum . G4da3) (get-char . G4da2) (get-bytevector-some . G4da1) (get-bytevector-n! . G4da0) (get-bytevector-n . G4d9f) (get-bytevector-all . G4d9e) (flush-output-port . G4d9d) (close-port . G4d9c) (scheme-report-environment . G2ded) (quotient . G4d9b) (null-environment . G2deb) (remainder . G4d9a) (modulo . G4d99) (inexact->exact . G4d98) (force . G4d97) (exact->inexact . G4d96) (make-promise . G4d95) (exit . G4d94) (command-line . G4ab8) (string-fill! . G4d93) (string-set! . G4d92) (set-cdr! . G4d91) (set-car! . G4d90) (remove . G4d8f) (remv . G4d8e) (remp . G4d8d) (remq . G4d8c) (partition . G4d8b) (memv . G4d8a) (memq . G4d89) (memp . G4d88) (member . G4d87) (exists . G4d86) (for-all . G4d85) (fold-right . G4d84) (fold-left . G4d83) (find . G4d82) (filter . G4d81) (cons* . G4d80) (assv . G4d7f) (assq . G4d7e) (assp . G4d7d) (assoc . G4d7c) (call-with-string-output-port . G4d7b) (call-with-port . G4d7a) (call-with-bytevector-output-port . G4d79) (bytevector->string . G4d78) (buffer-mode? . G4d77) (binary-port? . G4d76) (with-exception-handler . G4d75) (raise-continuable . G4d74) (raise . G4d73) (eval . G2df1) (environment . G2de9) (make-enumeration . G4d72) (enum-set=? . G4d71) (enum-set-universe . G4d70) (enum-set-union . G4d6f) (enum-set-subset? . G4d6e) (enum-set-projection . G4d6d) (enum-set-member? . G4d6c) (enum-set-intersection . G4d6b) (enum-set-indexer . G4d6a) (enum-set-difference . G4d69) (enum-set-constructor . G4d68) (enum-set-complement . G4d67) (enum-set->list . G4d66) (who-condition? . G47fe) (warning? . G4778) (violation? . G47b7) (undefined-violation? . G4873) (syntax-violation? . G485a) (syntax-violation-subform . G485e) (syntax-violation-form . G485c) (syntax-violation . G2e11) (simple-conditions . G4d65) (serious-condition? . G478d) (non-continuable-violation? . G4815) (message-condition? . G4761) (make-who-condition . G47fa) (make-warning . G4776) (make-violation . G47b5) (make-undefined-violation . G4871) (make-syntax-violation . G4854) (make-serious-condition . G478b) (make-non-continuable-violation . G4813) (make-message-condition . G475d) (make-lexical-violation . G483d) (make-irritants-condition . G47e0) (make-implementation-restriction-violation . G4828) (make-error . G47a0) (make-assertion-violation . G47ca) (lexical-violation? . G483f) (irritants-condition? . G47e4) (implementation-restriction-violation? . G482a) (error? . G47a2) (condition-who . G4800) (condition-predicate . G4d64) (condition-message . G4763) (condition-irritants . G47e6) (condition-accessor . G4d63) (condition . G4d62) (assertion-violation? . G47cc) (condition? . G4d61) (utf32->string . G4d60) (utf16->string . G4d5f) (utf8->string . G4d5e) (uint-list->bytevector . G4d5d) (u8-list->bytevector . G4d5c) (string->utf8 . G4d5b) (string->utf32 . G4d5a) (string->utf16 . G4d59) (sint-list->bytevector . G4d58) (native-endianness . G4d57) (bytevector? . G4d56) (bytevector=? . G4d55) (bytevector-uint-set! . G4d54) (bytevector-uint-ref . G4d53) (bytevector-u8-set! . G4d52) (bytevector-u8-ref . G4d51) (bytevector-u64-set! . G4d50) (bytevector-u64-ref . G4d4f) (bytevector-u64-native-set! . G4d4e) (bytevector-u64-native-ref . G4d4d) (bytevector-u32-set! . G4d4c) (bytevector-u32-ref . G4d4b) (bytevector-u32-native-set! . G4d4a) (bytevector-u32-native-ref . G4d49) (bytevector-u16-set! . G4d48) (bytevector-u16-ref . G4d47) (bytevector-u16-native-set! . G4d46) (bytevector-u16-native-ref . G4d45) (bytevector-sint-set! . G4d44) (bytevector-sint-ref . G4d43) (bytevector-s8-set! . G4d42) (bytevector-s8-ref . G4d41) (bytevector-s64-set! . G4d40) (bytevector-s64-ref . G4d3f) (bytevector-s64-native-set! . G4d3e) (bytevector-s64-native-ref . G4d3d) (bytevector-s32-set! . G4d3c) (bytevector-s32-ref . G4d3b) (bytevector-s32-native-set! . G4d3a) (bytevector-s32-native-ref . G4d39) (bytevector-s16-set! . G4d38) (bytevector-s16-ref . G4d37) (bytevector-s16-native-set! . G4d36) (bytevector-s16-native-ref . G4d35) (bytevector-length . G4d34) (bytevector-ieee-single-ref . G4d33) (bytevector-ieee-single-set! . G4d32) (bytevector-ieee-single-native-set! . G4d31) (bytevector-ieee-single-native-ref . G4d30) (bytevector-ieee-double-set! . G4d2f) (bytevector-ieee-double-ref . G4d2e) (bytevector-ieee-double-native-set! . G4d2d) (bytevector-ieee-double-native-ref . G4d2c) (bytevector-fill! . G4d2b) (bytevector-copy! . G4d2a) (bytevector-copy . G4d29) (bytevector->uint-list . G4d28) (bytevector->u8-list . G4d27) (bytevector->sint-list . G4d26) (no-nans-violation? . G49ad) (no-infinities-violation? . G4998) (make-no-nans-violation . G49ab) (make-no-infinities-violation . G4996) (real->flonum . G4d25) (flzero? . G4d24) (fltruncate . G4d23) (fltan . G4d22) (flsqrt . G4d21) (flsin . G4d20) (flround . G4d1f) (flpositive? . G4d1e) (flonum? . G4d1d) (flodd? . G4d1c) (flnumerator . G4d1b) (flnegative? . G4d1a) (flnan? . G4d19) (flmod0 . G4d18) (flmod . G4d17) (flmin . G4d16) (flmax . G4d15) (fllog . G4d14) (flinteger? . G4d13) (flinfinite? . G4d12) (flfloor . G4d11) (flfinite? . G4d10) (flexpt . G4d0f) (flexp . G4d0e) (fleven? . G4d0d) (fldiv0-and-mod0 . G4d0c) (fldiv0 . G4d0b) (fldiv-and-mod . G4d0a) (fldiv . G4d09) (fldenominator . G4d08) (flcos . G4d07) (flceiling . G4d06) (flatan . G4d05) (flasin . G4d04) (flacos . G4d03) (flabs . G4d02) (fl>? . G4d01) (fl>=? . G4d00) (fl=? . G4cff) (fl<? . G4cfe) (fl<=? . G4cfd) (fl/ . G4cfc) (fl- . G4cfb) (fl+ . G4cfa) (fl* . G4cf9) (fixnum->flonum . G4cf8) (fxzero? . G4cf7) (fxxor . G4cf6) (fxrotate-bit-field . G4cf5) (fxreverse-bit-field . G4cf4) (fxpositive? . G4cf3) (fxodd? . G4cf2) (fxnot . G4cf1) (fxnegative? . G4cf0) (fxmod0 . G4cef) (fxmod . G4cee) (fxmin . G4ced) (fxmax . G4cec) (fxlength . G4ceb) (fxior . G4cea) (fxif . G4ce9) (fxfirst-bit-set . G4ce8) (fxeven? . G4ce7) (fxdiv0-and-mod0 . G4ce6) (fxdiv0 . G4ce5) (fxdiv-and-mod . G4ce4) (fxdiv . G4ce3) (fxcopy-bit-field . G4ce2) (fxcopy-bit . G4ce1) (fxbit-set? . G4ce0) (fxbit-field . G4cdf) (fxbit-count . G4cde) (fxarithmetic-shift-right . G4cdd) (fxarithmetic-shift-left . G4cdc) (fxarithmetic-shift . G4cdb) (fxand . G4cda) (fx>? . G4cd9) (fx>=? . G4cd8) (fx=? . G4cd7) (fx<? . G4cd6) (fx<=? . G4cd5) (fx-/carry . G4cd4) (fx- . G4cd3) (fx+/carry . G4cd2) (fx+ . G4cd1) (fx*/carry . G4cd0) (fx* . G4ccf) (greatest-fixnum . G4cce) (least-fixnum . G4ccd) (fixnum-width . G4ccc) (fixnum? . G4ccb) (bitwise-rotate-bit-field . G4cca) (bitwise-reverse-bit-field . G4cc9) (bitwise-length . G4cc8) (bitwise-if . G4cc7) (bitwise-first-bit-set . G4cc6) (bitwise-copy-bit-field . G4cc5) (bitwise-copy-bit . G4cc4) (bitwise-bit-set? . G4cc3) (bitwise-bit-field . G4cc2) (bitwise-bit-count . G4cc1) (bitwise-xor . G4cc0) (bitwise-ior . G4cbf) (bitwise-and . G4cbe) (bitwise-not . G4cbd) (bitwise-arithmetic-shift-right . G4cbc) (bitwise-arithmetic-shift-left . G4cbb) (bitwise-arithmetic-shift . G4cba) (zero? . G4cb9) (vector? . G4cb8) (vector-set! . G4cb7) (vector-ref . G4cb6) (vector-map . G4cb5) (vector-length . G4cb4) (vector-for-each . G4cb3) (vector-fill! . G4cb2) (vector->list . G4cb1) (vector . G4cb0) (values . G4caf) (truncate . G4cae) (tan . G4cad) (symbol? . G4cac) (symbol=? . G4cab) (symbol->string . G4caa) (substring . G4ca9) (string? . G4ca8) (string>? . G4ca7) (string>=? . G4ca6) (string=? . G4ca5) (string<? . G4ca4) (string<=? . G4ca3) (string-ref . G4ca2) (string-length . G4ca1) (string-for-each . G4ca0) (string-copy . G4c9f) (string-append . G4c9e) (string->symbol . G4c9d) (string->number . G4c9c) (string->list . G4c9b) (string . G4c9a) (sqrt . G4c99) (sin . G4c98) (round . G4c97) (reverse . G4c96) (real? . G4c95) (real-valued? . G4c94) (real-part . G4c93) (rationalize . G4c92) (rational? . G4c91) (rational-valued? . G4c90) (procedure? . G4c8f) (positive? . G4c8e) (pair? . G4c8d) (odd? . G4c8c) (numerator . G4c8b) (number? . G4c8a) (number->string . G4c89) (null? . G4c88) (not . G4c87) (negative? . G4c86) (nan? . G4c85) (min . G4c84) (max . G4c83) (map . G4c82) (make-vector . G4c81) (make-string . G4c80) (make-rectangular . G4c7f) (make-polar . G4c7e) (magnitude . G4c7d) (log . G4c7c) (list? . G4c7b) (list-tail . G4c7a) (list-ref . G4c79) (list->vector . G4c78) (list->string . G4c77) (list . G4c76) (length . G4c75) (lcm . G4c74) (integer? . G4c73) (integer-valued? . G4c72) (integer->char . G4c71) (infinite? . G4c70) (inexact? . G4c6f) (inexact . G4c6e) (imag-part . G4c6d) (gcd . G4c6c) (for-each . G4c6b) (floor . G4c6a) (finite? . G4c69) (expt . G4c68) (exp . G4c67) (exact? . G4c66) (exact-integer-sqrt . G4c65) (exact . G4c64) (even? . G4c63) (error . G4c62) (eqv? . G4c61) (equal? . G4c60) (eq? . G4c5f) (dynamic-wind . G4c5e) (div0-and-mod0 . G4c5d) (mod0 . G4c5c) (div0 . G4c5b) (div-and-mod . G4c5a) (mod . G4c59) (div . G4c58) (denominator . G4c57) (cos . G4c56) (cons . G4c55) (complex? . G4c54) (char? . G4c53) (char>? . G4c52) (char>=? . G4c51) (char=? . G4c50) (char<? . G4c4f) (char<=? . G4c4e) (char->integer . G4c4d) (ceiling . G4c4c) (call-with-values . G4c4b) (call/cc . G4c4a) (call-with-current-continuation . G4c49) (cddddr . G4c48) (cdddar . G4c47) (cddadr . G4c46) (cddaar . G4c45) (cdaddr . G4c44) (cdadar . G4c43) (cdaadr . G4c42) (cdaaar . G4c41) (cadddr . G4c40) (caddar . G4c3f) (cadadr . G4c3e) (cadaar . G4c3d) (caaddr . G4c3c) (caadar . G4c3b) (caaadr . G4c3a) (caaaar . G4c39) (cdddr . G4c38) (cddar . G4c37) (cdadr . G4c36) (cdaar . G4c35) (caddr . G4c34) (cadar . G4c33) (caadr . G4c32) (caaar . G4c31) (cddr . G4c30) (cdar . G4c2f) (cadr . G4c2e) (caar . G4c2d) (cdr . G4c2c) (car . G4c2b) (boolean? . G4c2a) (boolean=? . G4c29) (atan . G4c28) (assertion-violation . G4c27) (asin . G4c26) (apply . G4c25) (append . G4c24) (angle . G4c23) (acos . G4c22) (abs . G4c21) (/ . G4c20) (* . G4c1f) (- . G4c1e) (+ . G4c1d) (>= . G4c1c) (> . G4c1b) (= . G4c1a) (<= . G4c19) (< . G4c18) (library . G4c17) (&no-nans . G4c16) (&no-infinities . G4c15) (&i/o-encoding . G4c14) (&i/o-decoding . G4c13) (&i/o-port . G4c12) (&i/o-file-does-not-exist . G4c11) (&i/o-file-already-exists . G4c10) (&i/o-file-is-read-only . G4c0f) (&i/o-file-protection . G4c0e) (&i/o-filename . G4c0d) (&i/o-invalid-position . G4c0c) (&i/o-write . G4c0b) (&i/o-read . G4c0a) (&i/o . G4c09) (&undefined . G4c08) (&syntax . G4c07) (&lexical . G4c06) (&implementation-restriction . G4c05) (&non-continuable . G4c04) (&who . G4c03) (&irritants . G4c02) (&assertion . G4c01) (&violation . G4c00) (&error . G4bff) (&serious . G4bfe) (&warning . G4bfd) (&message . G4bfc) (&condition . G4bfb) (define-condition-type . G4bfa) (define-enumeration . G4bf9) (define-record-type . G4bf8) (parent-rtd . G4bf7) (nongenerative . G4bf6) (opaque . G4bf5) (sealed . G4bf4) (protocol . G4bf3) (parent . G4bf2) (immutable . G4bf1) (mutable . G4bf0) (fields . G4bef) (error-handling-mode . G4bee) (file-options . G4bed) (buffer-mode . G4bec) (eol-style . G4beb) (guard . G4bea) (trace-define . G4be9) (trace-lambda . G4be8) (unsyntax-splicing . G4be7) (unsyntax . G4be6) (unquote-splicing . G4be5) (unquote . G4be4) (_ . G4be3) (else . G4be2) (=> . G4be1) (... . G4be0) (assert . G4bdf) (endianness . G4bde) (delay . G4bdd) (time . G4bdc) (do . G4bdb) (cond . G4bda) (let* . G4bd9) (let . G4bd8) (let*-values . G4bd7) (let-values . G4bd6) (identifier-syntax . G4bd5) (with-syntax . G4bd4) (quasisyntax . G4bd3) (quasiquote . G4bd2) (syntax-rules . G4bd1) (include . G4bd0) (define-struct . G4bcf) (record-constructor-descriptor . G4bce) (record-type-descriptor . G4bcd) (case . G4bcc) (parameterize . G4bcb) (unless . G4bca) (when . G4bc9) (or . G4bc8) (and . G4bc7) (if . G4bc6) (letrec* . G4bc5) (letrec . G4bc4) (type-descriptor . G4bc3) (case-lambda . G4bc2) (lambda . G4bc1) (syntax . G4bc0) (syntax-case . G4bbf) (quote . G4bbe) (foreign-call . G4bbd) (letrec-syntax . G4bbc) (let-syntax . G4bbb) (set! . G4bba) (import . G4bb9) (begin . G4bb8) (module . G4bb7) (define-syntax . G4bb6) (define . G4bb5)) '((G49b1 core-prim . &no-nans-rcd) (G49af core-prim . &no-nans-rtd) (G499c core-prim . &no-infinities-rcd) (G499a core-prim . &no-infinities-rtd) (G4987 core-prim . &i/o-encoding-rcd) (G4985 core-prim . &i/o-encoding-rtd) (G496d core-prim . &i/o-decoding-rcd) (G496b core-prim . &i/o-decoding-rtd) (G4958 core-prim . &i/o-port-rcd) (G4956 core-prim . &i/o-port-rtd) (G493e core-prim . &i/o-file-does-not-exist-rcd) (G493c core-prim . &i/o-file-does-not-exist-rtd) (G4929 core-prim . &i/o-file-already-exists-rcd) (G4927 core-prim . &i/o-file-already-exists-rtd) (G4914 core-prim . &i/o-file-is-read-only-rcd) (G4912 core-prim . &i/o-file-is-read-only-rtd) (G48ff core-prim . &i/o-file-protection-rcd) (G48fd core-prim . &i/o-file-protection-rtd) (G48ea core-prim . &i/o-filename-rcd) (G48e8 core-prim . &i/o-filename-rtd) (G48d0 core-prim . &i/o-invalid-position-rcd) (G48ce core-prim . &i/o-invalid-position-rtd) (G48b6 core-prim . &i/o-write-rcd) (G48b4 core-prim . &i/o-write-rtd) (G48a1 core-prim . &i/o-read-rcd) (G489f core-prim . &i/o-read-rtd) (G488c core-prim . &i/o-rcd) (G488a core-prim . &i/o-rtd) (G4877 core-prim . &undefined-rcd) (G4875 core-prim . &undefined-rtd) (G4862 core-prim . &syntax-rcd) (G4860 core-prim . &syntax-rtd) (G4843 core-prim . &lexical-rcd) (G4841 core-prim . &lexical-rtd) (G482e core-prim . &implementation-restriction-rcd) (G482c core-prim . &implementation-restriction-rtd) (G4819 core-prim . &non-continuable-rcd) (G4817 core-prim . &non-continuable-rtd) (G4804 core-prim . &who-rcd) (G4802 core-prim . &who-rtd) (G47ea core-prim . &irritants-rcd) (G47e8 core-prim . &irritants-rtd) (G47d0 core-prim . &assertion-rcd) (G47ce core-prim . &assertion-rtd) (G47bb core-prim . &violation-rcd) (G47b9 core-prim . &violation-rtd) (G47a6 core-prim . &error-rcd) (G47a4 core-prim . &error-rtd) (G4791 core-prim . &serious-rcd) (G478f core-prim . &serious-rtd) (G477c core-prim . &warning-rcd) (G477a core-prim . &warning-rtd) (G4767 core-prim . &message-rcd) (G4765 core-prim . &message-rtd) (G470c core-prim . &condition-rcd) (G470a core-prim . &condition-rtd) (G2e0d core-prim . syntax-error) (G2d26 core-prim . syntax-dispatch) (G4e76 core-prim . pretty-print) (G4e75 core-prim . eval-core) (G4e74 core-prim . set-symbol-value!) (G4e73 core-prim . symbol-value) (G4e72 core-prim . gensym) (G4e71 core-prim . void) (G4abe core-prim . load) (G2e1d core-prim . interaction-environment) (G4e70 core-prim . char-ready?) (G4e6f core-prim . regexp?) (G4e6e core-prim . read-line) (G4e6d core-prim . ungensym) (G4e6c core-prim . alist->eq-hash-table) (G4e6b core-prim . assoc-ref) (G4e6a core-prim . print) (G4e69 core-prim . format) (G4e68 core-prim . host-os) (G27e0 core-prim . library-path) (G4e67 core-prim . standard-library-path) (G4e66 core-prim . file-newer?) (G4e65 core-prim . stat-mtime) (G4e64 core-prim . write-to-file) (G4e63 core-prim . file->list) (G4e62 core-prim . file->string) (G4e61 core-prim . digit->integer) (G4e60 core-prim . call-with-string-input-port) (G4e5f core-prim . call-with-string-io) (G4e5e core-prim . string-split) (G4e5d core-prim . bytevector-for-each) (G4e5c core-prim . string->regexp) (G4e5b core-prim . rxmatch) (G4e5a core-prim . regexp-replace-all) (G4e59 core-prim . hashtable-for-each) (G4e58 core-prim . call-process) (G4e57 core-prim . local-tz-offset) (G4e56 core-prim . microseconds) (G4e55 core-prim . readdir) (G4e54 core-prim . set-current-directory!) (G4e53 core-prim . expand-path) (G4e52 core-prim . current-directory) (G4e51 core-prim . %spawn) (G4e50 core-prim . %waitpid) (G4e4f core-prim . %ffi-supported?) (G4e4e core-prim . %ffi-pointer-ref) (G4e4d core-prim . %ffi-pointer->string) (G4e4c core-prim . %ffi-call->string-or-zero) (G4e4b core-prim . %ffi-call->double) (G4e4a core-prim . %ffi-call->void*) (G4e49 core-prim . %ffi-call->void) (G4e48 core-prim . %ffi-call->int) (G4e47 core-prim . %ffi-lookup) (G4e46 core-prim . %ffi-open) (G4e45 core-prim . %fork) (G4e44 core-prim . %pipe) (G4e43 core-prim . p) (G4e42 core-prim . open-output-string) (G4e41 core-prim . get-output-string) (G4e40 core-prim . get-environment-variables) (G4e3f core-prim . get-environment-variable) (G4e3e core-prim . get-timeofday) (G4e3d core-prim . get-command-line) (G4e3c core-prim . sys-display) (G4e3b core-prim . source-info) (G4e3a core-prim . make-compiler-instruction) (G4e39 core-prim . make-instruction) (G4e38 core-prim . set-source-info!) (G4e37 core-prim . bignum?) (G4e36 core-prim . fast-equal?) (G4e35 core-prim . fasl-read) (G4e34 core-prim . fasl-write) (G4e33 core-prim . time-usage) (G2617 core-prim . make-parameter) (G4e32 core-prim . string-upcase) (G4e31 core-prim . string-titlecase) (G4e30 core-prim . string-normalize-nfkd) (G4e2f core-prim . string-normalize-nfkc) (G4e2e core-prim . string-normalize-nfd) (G4e2d core-prim . string-normalize-nfc) (G4e2c core-prim . string-foldcase) (G4e2b core-prim . string-downcase) (G4e2a core-prim . string-ci>?) (G4e29 core-prim . string-ci>=?) (G4e28 core-prim . string-ci=?) (G4e27 core-prim . string-ci<?) (G4e26 core-prim . string-ci<=?) (G4e25 core-prim . char-whitespace?) (G4e24 core-prim . char-upper-case?) (G4e23 core-prim . char-title-case?) (G4e22 core-prim . char-numeric?) (G4e21 core-prim . char-lower-case?) (G4e20 core-prim . char-general-category) (G4e1f core-prim . char-upcase) (G4e1e core-prim . char-titlecase) (G4e1d core-prim . char-foldcase) (G4e1c core-prim . char-downcase) (G4e1b core-prim . char-ci>?) (G4e1a core-prim . char-ci>=?) (G4e19 core-prim . char-ci=?) (G4e18 core-prim . char-ci<?) (G4e17 core-prim . char-ci<=?) (G4e16 core-prim . char-alphabetic?) (G2b6d core-prim . make-variable-transformer) (G2e13 core-prim . identifier?) (G2dff core-prim . generate-temporaries) (G2e01 core-prim . free-identifier=?) (G2e17 core-prim . syntax->datum) (G2e15 core-prim . datum->syntax) (G2e03 core-prim . bound-identifier=?) (G4e15 core-prim . record-type-descriptor?) (G4e14 core-prim . record-predicate) (G4e13 core-prim . record-mutator) (G4e12 core-prim . record-constructor) (G4e11 core-prim . record-accessor) (G4e10 core-prim . make-record-type-descriptor) (G4e0f core-prim . make-record-constructor-descriptor) (G4e0e core-prim . record?) (G4e0d core-prim . record-type-uid) (G4e0c core-prim . record-type-sealed?) (G4e0b core-prim . record-type-parent) (G4e0a core-prim . record-type-opaque?) (G4e09 core-prim . record-type-name) (G4e08 core-prim . record-type-generative?) (G4e07 core-prim . record-type-field-names) (G4e06 core-prim . record-rtd) (G4e05 core-prim . record-field-mutable?) (G4e04 core-prim . delete-file) (G4e03 core-prim . file-exists?) (G4e02 core-prim . vector-sort!) (G4e01 core-prim . vector-sort) (G4e00 core-prim . list-sort) (G4dff core-prim . symbol-hash) (G4dfe core-prim . string-ci-hash) (G4dfd core-prim . string-hash) (G4dfc core-prim . equal-hash) (G4dfb core-prim . hashtable-equivalence-function) (G4dfa core-prim . make-hashtable) (G4df9 core-prim . hashtable-hash-function) (G4df8 core-prim . make-eqv-hashtable) (G4df7 core-prim . make-eq-hashtable) (G4df6 core-prim . hashtable?) (G4df5 core-prim . hashtable-update!) (G4df4 core-prim . hashtable-size) (G4df3 core-prim . hashtable-set!) (G4df2 core-prim . hashtable-ref) (G4df1 core-prim . hashtable-mutable?) (G4df0 core-prim . hashtable-keys) (G4def core-prim . hashtable-entries) (G4dee core-prim . hashtable-delete!) (G4ded core-prim . hashtable-copy) (G4dec core-prim . hashtable-contains?) (G4deb core-prim . hashtable-clear!) (G4dea core-prim . call-with-output-file) (G4de9 core-prim . call-with-input-file) (G4de8 core-prim . write-char) (G4de7 core-prim . write) (G4de6 core-prim . with-output-to-file) (G4de5 core-prim . with-input-from-file) (G4de4 core-prim . read-char) (G4de3 core-prim . read) (G4de2 core-prim . peek-char) (G4de1 core-prim . open-output-file) (G4de0 core-prim . open-input-file) (G4ddf core-prim . newline) (G4dde core-prim . display) (G4ddd core-prim . close-output-port) (G4ddc core-prim . close-input-port) (G4ddb core-prim . eof-object?) (G4dda core-prim . eof-object) (G4dd9 core-prim . current-error-port) (G4dd8 core-prim . current-output-port) (G4dd7 core-prim . current-input-port) (G4dd6 core-prim . output-port?) (G4dd5 core-prim . input-port?) (G4dd4 core-prim . utf-8-codec) (G4dd3 core-prim . utf-16-codec) (G4dd2 core-prim . transcoder-error-handling-mode) (G4dd1 core-prim . transcoder-eol-style) (G4dd0 core-prim . transcoder-codec) (G4dcf core-prim . transcoded-port) (G4dce core-prim . textual-port?) (G4dcd core-prim . string->bytevector) (G4dcc core-prim . standard-output-port) (G4dcb core-prim . standard-input-port) (G4dca core-prim . standard-error-port) (G4dc9 core-prim . set-port-position!) (G4dc8 core-prim . put-u8) (G4dc7 core-prim . put-string) (G4dc6 core-prim . put-datum) (G4dc5 core-prim . put-char) (G4dc4 core-prim . put-bytevector) (G4dc3 core-prim . port?) (G4dc2 core-prim . port-transcoder) (G4dc1 core-prim . port-position) (G4dc0 core-prim . port-has-set-port-position!?) (G4dbf core-prim . port-has-port-position?) (G4dbe core-prim . port-eof?) (G4dbd core-prim . output-port-buffer-mode) (G4dbc core-prim . open-string-output-port) (G4dbb core-prim . open-string-input-port) (G4dba core-prim . open-file-output-port) (G4db9 core-prim . open-file-input/output-port) (G4db8 core-prim . open-file-input-port) (G4db7 core-prim . open-bytevector-output-port) (G4db6 core-prim . open-bytevector-input-port) (G4db5 core-prim . native-transcoder) (G4db4 core-prim . native-eol-style) (G4db3 core-prim . make-transcoder) (G4db2 core-prim . latin-1-codec) (G48b0 core-prim . make-i/o-write-error) (G489b core-prim . make-i/o-read-error) (G494e core-prim . make-i/o-port-error) (G48c6 core-prim . make-i/o-invalid-position-error) (G48e0 core-prim . make-i/o-filename-error) (G48f9 core-prim . make-i/o-file-protection-error) (G490e core-prim . make-i/o-file-is-read-only-error) (G4938 core-prim . make-i/o-file-does-not-exist-error) (G4923 core-prim . make-i/o-file-already-exists-error) (G4886 core-prim . make-i/o-error) (G497d core-prim . make-i/o-encoding-error) (G4967 core-prim . make-i/o-decoding-error) (G4db1 core-prim . make-custom-textual-output-port) (G4db0 core-prim . make-custom-textual-input/output-port) (G4daf core-prim . make-custom-textual-input-port) (G4dae core-prim . make-custom-binary-output-port) (G4dad core-prim . make-custom-binary-input/output-port) (G4dac core-prim . make-custom-binary-input-port) (G4dab core-prim . make-bytevector) (G4daa core-prim . lookahead-u8) (G4da9 core-prim . lookahead-char) (G48b2 core-prim . i/o-write-error?) (G489d core-prim . i/o-read-error?) (G4952 core-prim . i/o-port-error?) (G48ca core-prim . i/o-invalid-position-error?) (G48e4 core-prim . i/o-filename-error?) (G48fb core-prim . i/o-file-protection-error?) (G4910 core-prim . i/o-file-is-read-only-error?) (G493a core-prim . i/o-file-does-not-exist-error?) (G4925 core-prim . i/o-file-already-exists-error?) (G4888 core-prim . i/o-error?) (G48cc core-prim . i/o-error-position) (G4954 core-prim . i/o-error-port) (G48e6 core-prim . i/o-error-filename) (G4981 core-prim . i/o-encoding-error?) (G4983 core-prim . i/o-encoding-error-char) (G4969 core-prim . i/o-decoding-error?) (G4da8 core-prim . get-u8) (G4da7 core-prim . get-string-n!) (G4da6 core-prim . get-string-n) (G4da5 core-prim . get-string-all) (G4da4 core-prim . get-line) (G4da3 core-prim . get-datum) (G4da2 core-prim . get-char) (G4da1 core-prim . get-bytevector-some) (G4da0 core-prim . get-bytevector-n!) (G4d9f core-prim . get-bytevector-n) (G4d9e core-prim . get-bytevector-all) (G4d9d core-prim . flush-output-port) (G4d9c core-prim . close-port) (G2ded core-prim . scheme-report-environment) (G4d9b core-prim . quotient) (G2deb core-prim . null-environment) (G4d9a core-prim . remainder) (G4d99 core-prim . modulo) (G4d98 core-prim . inexact->exact) (G4d97 core-prim . force) (G4d96 core-prim . exact->inexact) (G4d95 core-prim . make-promise) (G4d94 core-prim . exit) (G4ab8 core-prim . command-line) (G4d93 core-prim . string-fill!) (G4d92 core-prim . string-set!) (G4d91 core-prim . set-cdr!) (G4d90 core-prim . set-car!) (G4d8f core-prim . remove) (G4d8e core-prim . remv) (G4d8d core-prim . remp) (G4d8c core-prim . remq) (G4d8b core-prim . partition) (G4d8a core-prim . memv) (G4d89 core-prim . memq) (G4d88 core-prim . memp) (G4d87 core-prim . member) (G4d86 core-prim . exists) (G4d85 core-prim . for-all) (G4d84 core-prim . fold-right) (G4d83 core-prim . fold-left) (G4d82 core-prim . find) (G4d81 core-prim . filter) (G4d80 core-prim . cons*) (G4d7f core-prim . assv) (G4d7e core-prim . assq) (G4d7d core-prim . assp) (G4d7c core-prim . assoc) (G4d7b core-prim . call-with-string-output-port) (G4d7a core-prim . call-with-port) (G4d79 core-prim . call-with-bytevector-output-port) (G4d78 core-prim . bytevector->string) (G4d77 core-prim . buffer-mode?) (G4d76 core-prim . binary-port?) (G4d75 core-prim . with-exception-handler) (G4d74 core-prim . raise-continuable) (G4d73 core-prim . raise) (G2df1 core-prim . eval) (G2de9 core-prim . environment) (G4d72 core-prim . make-enumeration) (G4d71 core-prim . enum-set=?) (G4d70 core-prim . enum-set-universe) (G4d6f core-prim . enum-set-union) (G4d6e core-prim . enum-set-subset?) (G4d6d core-prim . enum-set-projection) (G4d6c core-prim . enum-set-member?) (G4d6b core-prim . enum-set-intersection) (G4d6a core-prim . enum-set-indexer) (G4d69 core-prim . enum-set-difference) (G4d68 core-prim . enum-set-constructor) (G4d67 core-prim . enum-set-complement) (G4d66 core-prim . enum-set->list) (G47fe core-prim . who-condition?) (G4778 core-prim . warning?) (G47b7 core-prim . violation?) (G4873 core-prim . undefined-violation?) (G485a core-prim . syntax-violation?) (G485e core-prim . syntax-violation-subform) (G485c core-prim . syntax-violation-form) (G2e11 core-prim . syntax-violation) (G4d65 core-prim . simple-conditions) (G478d core-prim . serious-condition?) (G4815 core-prim . non-continuable-violation?) (G4761 core-prim . message-condition?) (G47fa core-prim . make-who-condition) (G4776 core-prim . make-warning) (G47b5 core-prim . make-violation) (G4871 core-prim . make-undefined-violation) (G4854 core-prim . make-syntax-violation) (G478b core-prim . make-serious-condition) (G4813 core-prim . make-non-continuable-violation) (G475d core-prim . make-message-condition) (G483d core-prim . make-lexical-violation) (G47e0 core-prim . make-irritants-condition) (G4828 core-prim . make-implementation-restriction-violation) (G47a0 core-prim . make-error) (G47ca core-prim . make-assertion-violation) (G483f core-prim . lexical-violation?) (G47e4 core-prim . irritants-condition?) (G482a core-prim . implementation-restriction-violation?) (G47a2 core-prim . error?) (G4800 core-prim . condition-who) (G4d64 core-prim . condition-predicate) (G4763 core-prim . condition-message) (G47e6 core-prim . condition-irritants) (G4d63 core-prim . condition-accessor) (G4d62 core-prim . condition) (G47cc core-prim . assertion-violation?) (G4d61 core-prim . condition?) (G4d60 core-prim . utf32->string) (G4d5f core-prim . utf16->string) (G4d5e core-prim . utf8->string) (G4d5d core-prim . uint-list->bytevector) (G4d5c core-prim . u8-list->bytevector) (G4d5b core-prim . string->utf8) (G4d5a core-prim . string->utf32) (G4d59 core-prim . string->utf16) (G4d58 core-prim . sint-list->bytevector) (G4d57 core-prim . native-endianness) (G4d56 core-prim . bytevector?) (G4d55 core-prim . bytevector=?) (G4d54 core-prim . bytevector-uint-set!) (G4d53 core-prim . bytevector-uint-ref) (G4d52 core-prim . bytevector-u8-set!) (G4d51 core-prim . bytevector-u8-ref) (G4d50 core-prim . bytevector-u64-set!) (G4d4f core-prim . bytevector-u64-ref) (G4d4e core-prim . bytevector-u64-native-set!) (G4d4d core-prim . bytevector-u64-native-ref) (G4d4c core-prim . bytevector-u32-set!) (G4d4b core-prim . bytevector-u32-ref) (G4d4a core-prim . bytevector-u32-native-set!) (G4d49 core-prim . bytevector-u32-native-ref) (G4d48 core-prim . bytevector-u16-set!) (G4d47 core-prim . bytevector-u16-ref) (G4d46 core-prim . bytevector-u16-native-set!) (G4d45 core-prim . bytevector-u16-native-ref) (G4d44 core-prim . bytevector-sint-set!) (G4d43 core-prim . bytevector-sint-ref) (G4d42 core-prim . bytevector-s8-set!) (G4d41 core-prim . bytevector-s8-ref) (G4d40 core-prim . bytevector-s64-set!) (G4d3f core-prim . bytevector-s64-ref) (G4d3e core-prim . bytevector-s64-native-set!) (G4d3d core-prim . bytevector-s64-native-ref) (G4d3c core-prim . bytevector-s32-set!) (G4d3b core-prim . bytevector-s32-ref) (G4d3a core-prim . bytevector-s32-native-set!) (G4d39 core-prim . bytevector-s32-native-ref) (G4d38 core-prim . bytevector-s16-set!) (G4d37 core-prim . bytevector-s16-ref) (G4d36 core-prim . bytevector-s16-native-set!) (G4d35 core-prim . bytevector-s16-native-ref) (G4d34 core-prim . bytevector-length) (G4d33 core-prim . bytevector-ieee-single-ref) (G4d32 core-prim . bytevector-ieee-single-set!) (G4d31 core-prim . bytevector-ieee-single-native-set!) (G4d30 core-prim . bytevector-ieee-single-native-ref) (G4d2f core-prim . bytevector-ieee-double-set!) (G4d2e core-prim . bytevector-ieee-double-ref) (G4d2d core-prim . bytevector-ieee-double-native-set!) (G4d2c core-prim . bytevector-ieee-double-native-ref) (G4d2b core-prim . bytevector-fill!) (G4d2a core-prim . bytevector-copy!) (G4d29 core-prim . bytevector-copy) (G4d28 core-prim . bytevector->uint-list) (G4d27 core-prim . bytevector->u8-list) (G4d26 core-prim . bytevector->sint-list) (G49ad core-prim . no-nans-violation?) (G4998 core-prim . no-infinities-violation?) (G49ab core-prim . make-no-nans-violation) (G4996 core-prim . make-no-infinities-violation) (G4d25 core-prim . real->flonum) (G4d24 core-prim . flzero?) (G4d23 core-prim . fltruncate) (G4d22 core-prim . fltan) (G4d21 core-prim . flsqrt) (G4d20 core-prim . flsin) (G4d1f core-prim . flround) (G4d1e core-prim . flpositive?) (G4d1d core-prim . flonum?) (G4d1c core-prim . flodd?) (G4d1b core-prim . flnumerator) (G4d1a core-prim . flnegative?) (G4d19 core-prim . flnan?) (G4d18 core-prim . flmod0) (G4d17 core-prim . flmod) (G4d16 core-prim . flmin) (G4d15 core-prim . flmax) (G4d14 core-prim . fllog) (G4d13 core-prim . flinteger?) (G4d12 core-prim . flinfinite?) (G4d11 core-prim . flfloor) (G4d10 core-prim . flfinite?) (G4d0f core-prim . flexpt) (G4d0e core-prim . flexp) (G4d0d core-prim . fleven?) (G4d0c core-prim . fldiv0-and-mod0) (G4d0b core-prim . fldiv0) (G4d0a core-prim . fldiv-and-mod) (G4d09 core-prim . fldiv) (G4d08 core-prim . fldenominator) (G4d07 core-prim . flcos) (G4d06 core-prim . flceiling) (G4d05 core-prim . flatan) (G4d04 core-prim . flasin) (G4d03 core-prim . flacos) (G4d02 core-prim . flabs) (G4d01 core-prim . fl>?) (G4d00 core-prim . fl>=?) (G4cff core-prim . fl=?) (G4cfe core-prim . fl<?) (G4cfd core-prim . fl<=?) (G4cfc core-prim . fl/) (G4cfb core-prim . fl-) (G4cfa core-prim . fl+) (G4cf9 core-prim . fl*) (G4cf8 core-prim . fixnum->flonum) (G4cf7 core-prim . fxzero?) (G4cf6 core-prim . fxxor) (G4cf5 core-prim . fxrotate-bit-field) (G4cf4 core-prim . fxreverse-bit-field) (G4cf3 core-prim . fxpositive?) (G4cf2 core-prim . fxodd?) (G4cf1 core-prim . fxnot) (G4cf0 core-prim . fxnegative?) (G4cef core-prim . fxmod0) (G4cee core-prim . fxmod) (G4ced core-prim . fxmin) (G4cec core-prim . fxmax) (G4ceb core-prim . fxlength) (G4cea core-prim . fxior) (G4ce9 core-prim . fxif) (G4ce8 core-prim . fxfirst-bit-set) (G4ce7 core-prim . fxeven?) (G4ce6 core-prim . fxdiv0-and-mod0) (G4ce5 core-prim . fxdiv0) (G4ce4 core-prim . fxdiv-and-mod) (G4ce3 core-prim . fxdiv) (G4ce2 core-prim . fxcopy-bit-field) (G4ce1 core-prim . fxcopy-bit) (G4ce0 core-prim . fxbit-set?) (G4cdf core-prim . fxbit-field) (G4cde core-prim . fxbit-count) (G4cdd core-prim . fxarithmetic-shift-right) (G4cdc core-prim . fxarithmetic-shift-left) (G4cdb core-prim . fxarithmetic-shift) (G4cda core-prim . fxand) (G4cd9 core-prim . fx>?) (G4cd8 core-prim . fx>=?) (G4cd7 core-prim . fx=?) (G4cd6 core-prim . fx<?) (G4cd5 core-prim . fx<=?) (G4cd4 core-prim . fx-/carry) (G4cd3 core-prim . fx-) (G4cd2 core-prim . fx+/carry) (G4cd1 core-prim . fx+) (G4cd0 core-prim . fx*/carry) (G4ccf core-prim . fx*) (G4cce core-prim . greatest-fixnum) (G4ccd core-prim . least-fixnum) (G4ccc core-prim . fixnum-width) (G4ccb core-prim . fixnum?) (G4cca core-prim . bitwise-rotate-bit-field) (G4cc9 core-prim . bitwise-reverse-bit-field) (G4cc8 core-prim . bitwise-length) (G4cc7 core-prim . bitwise-if) (G4cc6 core-prim . bitwise-first-bit-set) (G4cc5 core-prim . bitwise-copy-bit-field) (G4cc4 core-prim . bitwise-copy-bit) (G4cc3 core-prim . bitwise-bit-set?) (G4cc2 core-prim . bitwise-bit-field) (G4cc1 core-prim . bitwise-bit-count) (G4cc0 core-prim . bitwise-xor) (G4cbf core-prim . bitwise-ior) (G4cbe core-prim . bitwise-and) (G4cbd core-prim . bitwise-not) (G4cbc core-prim . bitwise-arithmetic-shift-right) (G4cbb core-prim . bitwise-arithmetic-shift-left) (G4cba core-prim . bitwise-arithmetic-shift) (G4cb9 core-prim . zero?) (G4cb8 core-prim . vector?) (G4cb7 core-prim . vector-set!) (G4cb6 core-prim . vector-ref) (G4cb5 core-prim . vector-map) (G4cb4 core-prim . vector-length) (G4cb3 core-prim . vector-for-each) (G4cb2 core-prim . vector-fill!) (G4cb1 core-prim . vector->list) (G4cb0 core-prim . vector) (G4caf core-prim . values) (G4cae core-prim . truncate) (G4cad core-prim . tan) (G4cac core-prim . symbol?) (G4cab core-prim . symbol=?) (G4caa core-prim . symbol->string) (G4ca9 core-prim . substring) (G4ca8 core-prim . string?) (G4ca7 core-prim . string>?) (G4ca6 core-prim . string>=?) (G4ca5 core-prim . string=?) (G4ca4 core-prim . string<?) (G4ca3 core-prim . string<=?) (G4ca2 core-prim . string-ref) (G4ca1 core-prim . string-length) (G4ca0 core-prim . string-for-each) (G4c9f core-prim . string-copy) (G4c9e core-prim . string-append) (G4c9d core-prim . string->symbol) (G4c9c core-prim . string->number) (G4c9b core-prim . string->list) (G4c9a core-prim . string) (G4c99 core-prim . sqrt) (G4c98 core-prim . sin) (G4c97 core-prim . round) (G4c96 core-prim . reverse) (G4c95 core-prim . real?) (G4c94 core-prim . real-valued?) (G4c93 core-prim . real-part) (G4c92 core-prim . rationalize) (G4c91 core-prim . rational?) (G4c90 core-prim . rational-valued?) (G4c8f core-prim . procedure?) (G4c8e core-prim . positive?) (G4c8d core-prim . pair?) (G4c8c core-prim . odd?) (G4c8b core-prim . numerator) (G4c8a core-prim . number?) (G4c89 core-prim . number->string) (G4c88 core-prim . null?) (G4c87 core-prim . not) (G4c86 core-prim . negative?) (G4c85 core-prim . nan?) (G4c84 core-prim . min) (G4c83 core-prim . max) (G4c82 core-prim . map) (G4c81 core-prim . make-vector) (G4c80 core-prim . make-string) (G4c7f core-prim . make-rectangular) (G4c7e core-prim . make-polar) (G4c7d core-prim . magnitude) (G4c7c core-prim . log) (G4c7b core-prim . list?) (G4c7a core-prim . list-tail) (G4c79 core-prim . list-ref) (G4c78 core-prim . list->vector) (G4c77 core-prim . list->string) (G4c76 core-prim . list) (G4c75 core-prim . length) (G4c74 core-prim . lcm) (G4c73 core-prim . integer?) (G4c72 core-prim . integer-valued?) (G4c71 core-prim . integer->char) (G4c70 core-prim . infinite?) (G4c6f core-prim . inexact?) (G4c6e core-prim . inexact) (G4c6d core-prim . imag-part) (G4c6c core-prim . gcd) (G4c6b core-prim . for-each) (G4c6a core-prim . floor) (G4c69 core-prim . finite?) (G4c68 core-prim . expt) (G4c67 core-prim . exp) (G4c66 core-prim . exact?) (G4c65 core-prim . exact-integer-sqrt) (G4c64 core-prim . exact) (G4c63 core-prim . even?) (G4c62 core-prim . error) (G4c61 core-prim . eqv?) (G4c60 core-prim . equal?) (G4c5f core-prim . eq?) (G4c5e core-prim . dynamic-wind) (G4c5d core-prim . div0-and-mod0) (G4c5c core-prim . mod0) (G4c5b core-prim . div0) (G4c5a core-prim . div-and-mod) (G4c59 core-prim . mod) (G4c58 core-prim . div) (G4c57 core-prim . denominator) (G4c56 core-prim . cos) (G4c55 core-prim . cons) (G4c54 core-prim . complex?) (G4c53 core-prim . char?) (G4c52 core-prim . char>?) (G4c51 core-prim . char>=?) (G4c50 core-prim . char=?) (G4c4f core-prim . char<?) (G4c4e core-prim . char<=?) (G4c4d core-prim . char->integer) (G4c4c core-prim . ceiling) (G4c4b core-prim . call-with-values) (G4c4a core-prim . call/cc) (G4c49 core-prim . call-with-current-continuation) (G4c48 core-prim . cddddr) (G4c47 core-prim . cdddar) (G4c46 core-prim . cddadr) (G4c45 core-prim . cddaar) (G4c44 core-prim . cdaddr) (G4c43 core-prim . cdadar) (G4c42 core-prim . cdaadr) (G4c41 core-prim . cdaaar) (G4c40 core-prim . cadddr) (G4c3f core-prim . caddar) (G4c3e core-prim . cadadr) (G4c3d core-prim . cadaar) (G4c3c core-prim . caaddr) (G4c3b core-prim . caadar) (G4c3a core-prim . caaadr) (G4c39 core-prim . caaaar) (G4c38 core-prim . cdddr) (G4c37 core-prim . cddar) (G4c36 core-prim . cdadr) (G4c35 core-prim . cdaar) (G4c34 core-prim . caddr) (G4c33 core-prim . cadar) (G4c32 core-prim . caadr) (G4c31 core-prim . caaar) (G4c30 core-prim . cddr) (G4c2f core-prim . cdar) (G4c2e core-prim . cadr) (G4c2d core-prim . caar) (G4c2c core-prim . cdr) (G4c2b core-prim . car) (G4c2a core-prim . boolean?) (G4c29 core-prim . boolean=?) (G4c28 core-prim . atan) (G4c27 core-prim . assertion-violation) (G4c26 core-prim . asin) (G4c25 core-prim . apply) (G4c24 core-prim . append) (G4c23 core-prim . angle) (G4c22 core-prim . acos) (G4c21 core-prim . abs) (G4c20 core-prim . /) (G4c1f core-prim . *) (G4c1e core-prim . -) (G4c1d core-prim . +) (G4c1c core-prim . >=) (G4c1b core-prim . >) (G4c1a core-prim . =) (G4c19 core-prim . <=) (G4c18 core-prim . <) (G4c17 core-prim . library) (G4c16 $core-rtd &no-nans-rtd &no-nans-rcd) (G4c15 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4c14 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4c13 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4c12 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4c11 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4c10 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4c0f $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4c0e $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4c0d $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4c0c $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4c0b $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4c0a $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4c09 $core-rtd &i/o-rtd &i/o-rcd) (G4c08 $core-rtd &undefined-rtd &undefined-rcd) (G4c07 $core-rtd &syntax-rtd &syntax-rcd) (G4c06 $core-rtd &lexical-rtd &lexical-rcd) (G4c05 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4c04 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4c03 $core-rtd &who-rtd &who-rcd) (G4c02 $core-rtd &irritants-rtd &irritants-rcd) (G4c01 $core-rtd &assertion-rtd &assertion-rcd) (G4c00 $core-rtd &violation-rtd &violation-rcd) (G4bff $core-rtd &error-rtd &error-rcd) (G4bfe $core-rtd &serious-rtd &serious-rcd) (G4bfd $core-rtd &warning-rtd &warning-rcd) (G4bfc $core-rtd &message-rtd &message-rcd) (G4bfb $core-rtd &condition-rtd &condition-rcd) (G4bfa macro . define-condition-type) (G4bf9 macro . define-enumeration) (G4bf8 macro . define-record-type) (G4bf7 macro . parent-rtd) (G4bf6 macro . nongenerative) (G4bf5 macro . opaque) (G4bf4 macro . sealed) (G4bf3 macro . protocol) (G4bf2 macro . parent) (G4bf1 macro . immutable) (G4bf0 macro . mutable) (G4bef macro . fields) (G4bee macro . error-handling-mode) (G4bed macro . file-options) (G4bec macro . buffer-mode) (G4beb macro . eol-style) (G4bea macro . guard) (G4be9 macro . trace-define) (G4be8 macro . trace-lambda) (G4be7 macro . unsyntax-splicing) (G4be6 macro . unsyntax) (G4be5 macro . unquote-splicing) (G4be4 macro . unquote) (G4be3 macro . _) (G4be2 macro . else) (G4be1 macro . =>) (G4be0 macro . ...) (G4bdf macro . assert) (G4bde macro . endianness) (G4bdd macro . delay) (G4bdc macro . time) (G4bdb macro . do) (G4bda macro . cond) (G4bd9 macro . let*) (G4bd8 macro . let) (G4bd7 macro . let*-values) (G4bd6 macro . let-values) (G4bd5 macro . identifier-syntax) (G4bd4 macro . with-syntax) (G4bd3 macro . quasisyntax) (G4bd2 macro . quasiquote) (G4bd1 macro . syntax-rules) (G4bd0 macro . include) (G4bcf macro . define-struct) (G4bce core-macro . record-constructor-descriptor) (G4bcd core-macro . record-type-descriptor) (G4bcc macro . case) (G4bcb macro . parameterize) (G4bca macro . unless) (G4bc9 macro . when) (G4bc8 core-macro . or) (G4bc7 core-macro . and) (G4bc6 core-macro . if) (G4bc5 core-macro . letrec*) (G4bc4 core-macro . letrec) (G4bc3 core-macro . type-descriptor) (G4bc2 core-macro . case-lambda) (G4bc1 core-macro . lambda) (G4bc0 core-macro . syntax) (G4bbf core-macro . syntax-case) (G4bbe core-macro . quote) (G4bbd core-macro . foreign-call) (G4bbc letrec-syntax) (G4bbb let-syntax) (G4bba set!) (G4bb9 import) (G4bb8 begin) (G4bb7 module) (G4bb6 define-syntax) (G4bb5 define)) values values '#f '#f '#f '#f) (G295c@G2801@install-library 'G4e97 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G4e76) (eval-core . G4e75) (set-symbol-value! . G4e74) (symbol-value . G4e73) (gensym . G4e72) (void . G4e71)) '() values values '#f '#f '#f '#f) (G295c@G2801@install-library 'G4e98 '(mosh) '() '() '() '() '((set-symbol-value! . G4e74) (symbol-value . G4e73) (read-line . G4e6e) (ungensym . G4e6d) (alist->eq-hash-table . G4e6c) (assoc-ref . G4e6b) (print . G4e6a) (format . G4e69) (host-os . G4e68) (library-path . G27e0) (standard-library-path . G4e67) (file-newer? . G4e66) (stat-mtime . G4e65) (write-to-file . G4e64) (file->list . G4e63) (file->string . G4e62) (digit->integer . G4e61) (call-with-string-input-port . G4e60) (call-with-string-io . G4e5f) (string-split . G4e5e) (bytevector-for-each . G4e5d) (string->regexp . G4e5c) (rxmatch . G4e5b) (regexp-replace-all . G4e5a) (hashtable-for-each . G4e59) (readdir . G4e55) (set-current-directory! . G4e54) (expand-path . G4e53) (current-directory . G4e52) (p . G4e43) (get-timeofday . G4e3e) (get-command-line . G4e3d) (sys-display . G4e3c) (source-info . G4e3b) (make-compiler-instruction . G4e3a) (make-instruction . G4e39) (set-source-info! . G4e38) (bignum? . G4e37) (fast-equal? . G4e36) (fasl-read . G4e35) (fasl-write . G4e34) (time-usage . G4e33) (time . G4bdc) (include . G4bd0)) '() values values '#f '#f '#f '#f) (G295c@G2801@install-library 'G4e99 '(system) '() '() '() '() '((call-process . G4e58) (local-tz-offset . G4e57) (microseconds . G4e56) (expand-path . G4e53) (%spawn . G4e51) (%waitpid . G4e50) (%ffi-supported? . G4e4f) (%ffi-pointer-ref . G4e4e) (%ffi-pointer->string . G4e4d) (%ffi-call->string-or-zero . G4e4c) (%ffi-call->double . G4e4b) (%ffi-call->void* . G4e4a) (%ffi-call->void . G4e49) (%ffi-call->int . G4e48) (%ffi-lookup . G4e47) (%ffi-open . G4e46) (%fork . G4e45) (%pipe . G4e44) (open-output-string . G4e42) (get-output-string . G4e41) (get-environment-variables . G4e40) (get-environment-variable . G4e3f) (make-parameter . G2617) (parameterize . G4bcb)) '() values values '#f '#f '#f '#f))
((lambda (G4aa7@add-library-path! G4aa9@parse-and-add-library-path G4aab@for-each-with-index G4aad@conditioon-printer G4aaf@condition-printer G4ab1@record->field-alist G4ab3@map-with-index G4ab5@repl G4ab7@trace-printer G4ab9@command-line G4abb@local-library-path G4abd@load/args G4abf@load G4ac1@ironscheme-build G4ac3@eval-top-level G4ac5@compile-system-libraries G4ac7@compile G4ac9@compile->closure G4acb@pre-compile-r6rs-file G4acd@load-r6rs-top-level) (begin (set! G4aa7@add-library-path! (lambda (G4ae8@path) (G294c@G27e1@library-path (append (G294c@G27e1@library-path) (list G4ae8@path))))) (set! G4aa9@parse-and-add-library-path (lambda (G4aea@paths G4aeb@message) ((lambda (G4aee@t) (if G4aee@t ((lambda (G4af0@paths) (for-each (lambda (G4af2@path) (if (file-exists? G4af2@path) (G4aa7@add-library-path! (expand-path G4af2@path)) (format (current-error-port) G4aeb@message G4af2@path))) (reverse (string-split G4af0@paths '#\:)))) G4aee@t) (void))) G4aea@paths))) (set! G4aab@for-each-with-index (lambda (G4af4@proc G4af5@lst) (letrec ((G4af8@loop (lambda (G4afa@i G4afb@lst) (if (null? G4afb@lst) (if '#f '#f (void)) (begin (G4af4@proc G4afa@i (car G4afb@lst)) (G4af8@loop (+ G4afa@i '1) (cdr G4afb@lst))))))) (G4af8@loop '1 G4af5@lst)))) (set! G4aad@conditioon-printer (lambda (G4afe@e G4aff@port) ((lambda (G4b03@ref) (begin (set! G4b03@ref (lambda (G4b12@rtd G4b13@i G4b14@x) ((lambda (G4b18@val) (if (symbol? G4b18@val) (ungensym G4b18@val) G4b18@val)) ((record-accessor G4b12@rtd G4b13@i) G4b14@x)))) (begin (display '" Condition components:\n" G4aff@port) (G4aab@for-each-with-index (lambda (G4b04@i G4b05@x) ((lambda (G4b08@rtd) (begin (format G4aff@port '"   ~d. ~a" G4b04@i (record-type-name G4b08@rtd)) ((lambda (G4b0a@v) ((lambda (G4b0c@t) (if (memv G4b0c@t '(0)) (newline G4aff@port) (if (memv G4b0c@t '(1)) (begin (display '": " G4aff@port) (write (G4b03@ref G4b08@rtd '0 G4b05@x) G4aff@port) (newline G4aff@port)) (begin (display '":\n" G4aff@port) ((letrec ((G4b0e@f (lambda (G4b10@i) (if (not (= G4b10@i (vector-length G4b0a@v))) (begin (display '"       " G4aff@port) (display (vector-ref G4b0a@v G4b10@i) G4aff@port) (display '": " G4aff@port) (write (G4b03@ref G4b08@rtd G4b10@i G4b05@x) G4aff@port) (newline G4aff@port) (G4b0e@f (+ G4b10@i '1))) (void))))) G4b0e@f) '0))))) (vector-length G4b0a@v))) (record-type-field-names G4b08@rtd)))) (record-rtd G4b05@x))) (simple-conditions G4afe@e))))) '#f))) (set! G4aaf@condition-printer (lambda (G4b1a@e G4b1b@port) (begin (display '" Condition components:\n" G4b1b@port) (G4aab@for-each-with-index (lambda (G4b1e@i G4b1f@x) ((lambda (G4b22@rtd) (begin (format G4b1b@port '"   ~d. ~a" G4b1e@i (record-type-name G4b22@rtd)) (for-each (lambda (G4b24@field) (begin (display '"       " G4b1b@port) (display (car G4b24@field) G4b1b@port) (display '": " G4b1b@port) (write (cdr G4b24@field) G4b1b@port) (newline G4b1b@port))) (G4ab1@record->field-alist G4b1f@x)))) (record-rtd G4b1f@x))) (simple-conditions G4b1a@e))))) (set! G4ab1@record->field-alist (lambda (G4b26@r) ((lambda (G4b29@ref) (begin (set! G4b29@ref (lambda (G4b34@rtd G4b35@i G4b36@x) ((lambda (G4b3a@val) (if (symbol? G4b3a@val) (ungensym G4b3a@val) G4b3a@val)) ((record-accessor G4b34@rtd G4b35@i) G4b36@x)))) ((letrec ((G4b2a@loop (lambda (G4b2c@ret G4b2d@rtd) (if G4b2d@rtd (G4b2a@loop (append G4b2c@ret (G4ab3@map-with-index (lambda (G4b30@i G4b31@field) (cons G4b31@field (G4b29@ref G4b2d@rtd G4b30@i G4b26@r))) (vector->list (record-type-field-names G4b2d@rtd)))) (record-type-parent G4b2d@rtd)) G4b2c@ret)))) G4b2a@loop) '() (record-rtd G4b26@r)))) '#f))) (set! G4ab3@map-with-index (lambda (G4b3c@proc G4b3d@lst) ((letrec ((G4b40@loop (lambda (G4b42@i G4b43@lst G4b44@ret) (if (null? G4b43@lst) (reverse G4b44@ret) (G4b40@loop (+ G4b42@i '1) (cdr G4b43@lst) (cons (G4b3c@proc G4b42@i (car G4b43@lst)) G4b44@ret)))))) G4b40@loop) '0 G4b3d@lst '()))) (set! G4ab5@repl (lambda G4b48@x ((lambda (G4b4b@rec) (begin (set! G4b4b@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4b4e@G4b4c) (lambda () (with-exception-handler (lambda (G4b50@e) ((call/cc (lambda (G4b52@G4b4d) (G4b4e@G4b4c (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? G4b50@e) (G4aad@conditioon-printer G4b50@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" G4b50@e))) (G4b52@G4b4d (lambda () (raise-continuable G4b50@e)))))))))) (lambda () ((letrec ((G4b54@loop (lambda (G4b56@line G4b57@accum) ((lambda (G4b5b@parentheses-ok? G4b5d@eval-string-print) (begin (set! G4b5b@parentheses-ok? (lambda (G4b62@text) ((letrec ((G4b64@loop (lambda (G4b66@chars G4b67@p0 G4b68@p1) (if (null? G4b66@chars) (= '0 G4b67@p0 G4b68@p1) ((lambda (G4b6c@t) (if (memv G4b6c@t '(#\()) (G4b64@loop (cdr G4b66@chars) (+ G4b67@p0 '1) G4b68@p1) (if (memv G4b6c@t '(#\))) (G4b64@loop (cdr G4b66@chars) (- G4b67@p0 '1) G4b68@p1) (if (memv G4b6c@t '(#\[)) (G4b64@loop (cdr G4b66@chars) G4b67@p0 (+ G4b68@p1 '1)) (if (memv G4b6c@t '(#\])) (G4b64@loop (cdr G4b66@chars) G4b67@p0 (- G4b68@p1 '1)) (G4b64@loop (cdr G4b66@chars) G4b67@p0 G4b68@p1)))))) (car G4b66@chars)))))) G4b64@loop) (string->list G4b62@text) '0 '0))) (set! G4b5d@eval-string-print (lambda (G4b60@text) (if (not (or (string=? '"\n" G4b60@text) (= '0 (string-length G4b60@text)))) (write (G4ac3@eval-top-level (call-with-port (open-string-input-port G4b60@text) read))) (void)))) (if (eof-object? G4b56@line) (begin (G4b5d@eval-string-print G4b57@accum) (exit)) ((lambda (G4b5e@current) (if (G4b5b@parentheses-ok? G4b5e@current) (G4b5d@eval-string-print G4b5e@current) (G4b54@loop (get-line (current-input-port)) G4b5e@current))) (string-append G4b57@accum G4b56@line))))) '#f '#f)))) G4b54@loop) (get-line (current-input-port)) '""))))))) (newline) (G4b4b@rec)))) (G4b4b@rec))) '#f))) (set! G4ab7@trace-printer (G26ea@G2618@make-parameter write)) (set! G4ab9@command-line (G26ea@G2618@make-parameter (get-command-line))) (set! G4abb@local-library-path (lambda (G4b6e@filename) (cons (expand-path '".") (G294c@G27e1@library-path)))) (set! G4abd@load/args (lambda (G4b70@filename . G4b72@args) (begin (apply G4acd@load-r6rs-top-level G4b70@filename 'load G4b72@args) (void)))) (set! G4abf@load (lambda (G4b74@filename) (begin (apply G4acd@load-r6rs-top-level G4b74@filename 'load (G4ab9@command-line)) (void)))) (set! G4ac1@ironscheme-build (lambda () (G4abf@load '"ironscheme-buildscript.ss"))) (set! G4ac3@eval-top-level (lambda (G4b76@x) (G46df@G2df2@eval G4b76@x (G46f5@G2e1e@interaction-environment)))) (set! G4ac5@compile-system-libraries (lambda () (G4ac3@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4ac7@compile (lambda (G4b78@filename) (G4acd@load-r6rs-top-level G4b78@filename 'compile))) (set! G4ac9@compile->closure (lambda (G4b7a@filename) (G4acd@load-r6rs-top-level G4b7a@filename 'closure))) (set! G4acb@pre-compile-r6rs-file (lambda (G4b7c@filename) (G4acd@load-r6rs-top-level G4b7c@filename 'compile))) (set! G4acd@load-r6rs-top-level (lambda (G4b7e@filename G4b7f@how . G4b82@args) ((lambda (G4b86@G4b84 G4b87@G4b85) ((lambda (G4b8a@swap) (dynamic-wind G4b8a@swap (lambda () ((lambda (G4b8c@x*) ((lambda (G4b8e@t) (if (memv G4b8e@t '(closure)) (G46f4@G2e1c@pre-compile-r6rs-top-level G4b8c@x*) (if (memv G4b8e@t '(load)) ((lambda (G4b92@G4b90 G4b93@G4b91) ((lambda (G4b96@swap) (dynamic-wind G4b96@swap (lambda () ((G46f3@G2e1a@compile-r6rs-top-level G4b8c@x*))) G4b96@swap)) (lambda () ((lambda (G4b98@t) (begin (G4b92@G4b90 G4b93@G4b91) (set! G4b93@G4b91 G4b98@t))) (G4b92@G4b90))))) G4ab9@command-line (cons G4b7e@filename (car G4b82@args))) (if (memv G4b8e@t '(compile)) (begin (G46f3@G2e1a@compile-r6rs-top-level G4b8c@x*) (G2950@G27e9@serialize-all G26e5@G260e@serialize-library G273f@G26f8@compile-core-expr)) (if '#f '#f (void)))))) G4b7f@how)) (with-input-from-file G4b7e@filename (lambda () ((letrec ((G4b9a@f (lambda () ((lambda (G4b9c@x) (if (eof-object? G4b9c@x) '() (cons G4b9c@x (G4b9a@f)))) (G26dd@G25fe@read-annotated))))) G4b9a@f)))))) G4b8a@swap)) (lambda () ((lambda (G4b9e@t) (begin (G4b86@G4b84 G4b87@G4b85) (set! G4b87@G4b85 G4b9e@t))) (G4b86@G4b84))))) G294c@G27e1@library-path (G4abb@local-library-path G4b7e@filename)))) (begin (set! G4bb3@G4acd@load-r6rs-top-level G4acd@load-r6rs-top-level) (set! G4bb2@G4acb@pre-compile-r6rs-file G4acb@pre-compile-r6rs-file) (set! G4bb1@G4ac9@compile->closure G4ac9@compile->closure) (set! G4bb0@G4ac7@compile G4ac7@compile) (set! G4baf@G4ac5@compile-system-libraries G4ac5@compile-system-libraries) (set! G4bae@G4ac3@eval-top-level G4ac3@eval-top-level) (set! G4bad@G4ac1@ironscheme-build G4ac1@ironscheme-build) (set! G4bac@G4abf@load G4abf@load) (set! G4bab@G4abd@load/args G4abd@load/args) (set! G4baa@G4abb@local-library-path G4abb@local-library-path) (set! G4ba9@G4ab9@command-line G4ab9@command-line) (set! G4ba8@G4ab7@trace-printer G4ab7@trace-printer) (set! G4ba7@G4ab5@repl G4ab5@repl) (set! G4ba6@G4ab3@map-with-index G4ab3@map-with-index) (set! G4ba5@G4ab1@record->field-alist G4ab1@record->field-alist) (set! G4ba4@G4aaf@condition-printer G4aaf@condition-printer) (set! G4ba3@G4aad@conditioon-printer G4aad@conditioon-printer) (set! G4ba2@G4aab@for-each-with-index G4aab@for-each-with-index) (set! G4ba1@G4aa9@parse-and-add-library-path G4aa9@parse-and-add-library-path) (set! G4ba0@G4aa7@add-library-path! G4aa7@add-library-path!) (G2951@G27eb@current-precompiled-library-loader G26e6@G2610@load-serialized-library) (set-symbol-value! 'load G4abf@load) (set-symbol-value! 'pre-compile-r6rs-file G4acb@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4ac3@eval-top-level) (set-symbol-value! 'int-env-syms G46d6@G2de0@interaction-environment-symbols) (set-symbol-value! 'expanded2core G273e@G26f6@expanded->core) (set-symbol-value! 'trace-printer G4ab7@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4ace@c) (condition (G4a04@G4814@make-non-continuable-violation) (G49fa@G47fb@make-who-condition 'raise) (G49be@G475e@make-message-condition '"returned from non-continuable exception") (G49f0@G47e1@make-irritants-condition (list G4ace@c))))) (G4aa9@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4aa9@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G294c@G27e1@library-path (append (G294c@G27e1@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4ad0@prefix) (G294d@G27e3@library-extensions (G4ad0@prefix '".mosh" (G294d@G27e3@library-extensions)))) (lambda (G4ad2@ext G4ad3@ls) (append (map (lambda (G4ad6@x) (string-append G4ad2@ext G4ad6@x)) G4ad3@ls) G4ad3@ls))) ((lambda (G4ad8@args G4ad9@port) ((lambda (G4add@ref) (begin (set! G4add@ref (lambda (G4ae0@rtd G4ae1@i G4ae2@x) ((lambda (G4ae6@val) (if (symbol? G4ae6@val) (ungensym G4ae6@val) G4ae6@val)) ((record-accessor G4ae0@rtd G4ae1@i) G4ae2@x)))) (with-exception-handler (lambda (G4ade@c) (if (condition? G4ade@c) (G4aad@conditioon-printer G4ade@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" G4ade@c))) (lambda () (if (null? G4ad8@args) (G4ab5@repl) (G4acd@load-r6rs-top-level (car G4ad8@args) 'load (cdr G4ad8@args))))))) '#f)) (G4ab9@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
