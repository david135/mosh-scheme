;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define G10428G10213read-annotated '#f) (define G10429G10215annotation-stripped '#f) (define G10430G10217annotation? '#f) (define G10431G10219annotation-source '#f) (define G10432G10221annotation-expression '#f) (define G10433G10223serialize-library '#f) (define G10434G10225load-serialized-library '#f) (define G10435G10227make-record-printer '#f) (define G10436G10229compile-core '#f) (define G10437G10231read-library-source-file '#f) (define G10438G10233make-parameter '#f) (define G10439G10387file-options-spec '#f) ((lambda (G10213read-annotated G10215annotation-stripped G10217annotation? G10219annotation-source G10221annotation-expression G10223serialize-library G10225load-serialized-library G10227make-record-printer G10229compile-core G10231read-library-source-file G10233make-parameter G10387file-options-spec) (begin (set! G10213read-annotated read) (set! G10215annotation-stripped (lambda (G10388x) (set-source-info! G10388x '#f))) (set! G10217annotation? (lambda (G10390x) (source-info G10390x))) (set! G10219annotation-source (lambda (G10392x) (source-info G10392x))) (set! G10221annotation-expression (lambda (G10394x) (if (pair? G10394x) (cons (car G10394x) (cdr G10394x)) (display '"line:46\n")))) (set! G10223serialize-library (lambda G10396x '#f)) (set! G10225load-serialized-library (lambda G10398x '#f)) (set! G10227make-record-printer (lambda (G10400name G10401printer) (lambda G10404x (begin (display '"record printer") (for-each display G10404x))))) (set! G10229compile-core (lambda G10406x (apply error 'comile-core '"not implementated" G10406x))) (set! G10231read-library-source-file (lambda (G10408file-name) (with-input-from-file G10408file-name G10213read-annotated))) (set! G10233make-parameter (lambda G10424 ((lambda (G10425) (if (= G10425 '1) (apply (lambda (G10410x) (G10233make-parameter G10410x (lambda (G10412x) G10412x))) G10424) (if (= G10425 '2) (apply (lambda (G10414x G10415fender) (begin (if (procedure? G10415fender) (void) (assertion-violation 'assert '"assertion failed" '(procedure? fender))) ((lambda (G10418x) (lambda G10422 ((lambda (G10423) (if (= G10423 '0) (apply (lambda () G10418x) G10422) (if (= G10423 '1) (apply (lambda (G10420v) (set! G10418x (G10415fender G10420v))) G10422) (error 'apply '"invalid arg count")))) (length G10422)))) (G10415fender G10414x)))) G10424) (error 'apply '"invalid arg count")))) (length G10424)))) (set! G10387file-options-spec (lambda (G10426x) G10426x)) (begin (set! G10439G10387file-options-spec G10387file-options-spec) (set! G10438G10233make-parameter G10233make-parameter) (set! G10437G10231read-library-source-file G10231read-library-source-file) (set! G10436G10229compile-core G10229compile-core) (set! G10435G10227make-record-printer G10227make-record-printer) (set! G10434G10225load-serialized-library G10225load-serialized-library) (set! G10433G10223serialize-library G10223serialize-library) (set! G10432G10221annotation-expression G10221annotation-expression) (set! G10431G10219annotation-source G10219annotation-source) (set! G10430G10217annotation? G10217annotation?) (set! G10429G10215annotation-stripped G10215annotation-stripped) (set! G10428G10213read-annotated G10213read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G10534G10444current-primitive-locations '#f) (define G10535G10446mutable? '#f) (define G10536G10448rewriter '#f) (define G10537G10450expanded->core '#f) (define G10538G10452compile-core-expr '#f) (define G10539G10454pretty-print '#f) (define G10540G10456compile-core-expr-to-port '#f) ((lambda (G10444current-primitive-locations G10446mutable? G10448rewriter G10450expanded->core G10452compile-core-expr G10454pretty-print G10456compile-core-expr-to-port) (begin (set! G10444current-primitive-locations (G10438G10233make-parameter (lambda (G10457x) '#f) (lambda (G10459p) (begin (if (procedure? G10459p) (void) (assertion-violation 'assert '"assertion failed" '(procedure? p))) G10459p)))) (set! G10446mutable? (lambda (G10461x) ((lambda (G10464simple?) (begin (set! G10464simple? (lambda (G10465x) ((lambda (G10467t) (if G10467t G10467t ((lambda (G10469t) (if G10469t G10469t ((lambda (G10471t) (if G10471t G10471t ((lambda (G10473t) (if G10473t G10473t ((lambda (G10475t) (if G10475t G10475t ((lambda (G10477t) (if G10477t G10477t (begin '#f (number? G10465x)))) (bytevector? G10465x)))) (string? G10465x)))) (boolean? G10465x)))) (symbol? G10465x)))) (char? G10465x)))) (null? G10465x)))) (not (G10464simple? G10461x)))) '#f))) (set! G10448rewriter (lambda (G10479quote-hack?) ((lambda (G10482f) (begin (set! G10482f (lambda (G10483x) (if (pair? G10483x) ((lambda (G10485t) (if (eqv? G10485t 'quote) (if (if G10479quote-hack? (begin '#f (G10446mutable? (cadr G10483x))) '#f) ((lambda (G10524g) (begin (set-symbol-value! G10524g (cadr G10483x)) G10524g)) (gensym)) G10483x) (if (eqv? G10485t 'case-lambda) (cons 'case-lambda (map (lambda (G10522x) (cons (car G10522x) (map G10482f (cdr G10522x)))) (cdr G10483x))) (if (eqv? G10485t 'lambda) (cons* 'lambda (cadr G10483x) (map G10482f (cddr G10483x))) (if (eqv? G10485t 'letrec) ((lambda (G10514bindings G10515body*) ((lambda (G10518lhs* G10519rhs*) (cons* 'letrec (map list G10518lhs* (map G10482f G10519rhs*)) (map G10482f G10515body*))) (map car G10514bindings) (map cadr G10514bindings))) (cadr G10483x) (cddr G10483x)) (if (eqv? G10485t 'letrec*) ((lambda (G10506bindings G10507body*) ((lambda (G10510lhs* G10511rhs*) (cons* 'letrec* (map list G10510lhs* (map G10482f G10511rhs*)) (map G10482f G10507body*))) (map car G10506bindings) (map cadr G10506bindings))) (cadr G10483x) (cddr G10483x)) (if (eqv? G10485t 'library-letrec*) ((lambda (G10492name G10493x) ((lambda (G10496bindings G10497body*) ((lambda (G10500lhs* G10501lhs** G10502rhs*) (cons* 'library-letrec* G10492name (map list G10500lhs* G10501lhs** (map G10482f G10502rhs*)) (map G10482f G10497body*))) (map car G10496bindings) (map cadr G10496bindings) (map caddr G10496bindings))) (cadr G10493x) (cddr G10493x))) (cadr G10483x) (cdr G10483x)) (if (eqv? G10485t 'begin) (cons 'begin (map G10482f (cdr G10483x))) (if (eqv? G10485t 'set!) (list 'set! (cadr G10483x) (G10482f (caddr G10483x))) (if (eqv? G10485t 'primitive) ((lambda (G10486op) ((lambda (G10488t) (if G10488t ((lambda (G10490loc) G10490loc) G10488t) G10486op)) ((G10444current-primitive-locations) G10486op))) (cadr G10483x)) (if (eqv? G10485t 'define) G10483x (if (list? G10483x) (map G10482f G10483x) (error 'rewrite '"invalid form ~s ~s" G10483x (list? G10483x)))))))))))))) (car G10483x)) G10483x))) G10482f)) '#f))) (set! G10450expanded->core (lambda (G10526x) ((G10448rewriter '#t) G10526x))) (set! G10452compile-core-expr (lambda (G10528x) ((G10448rewriter '#f) G10528x))) (set! G10454pretty-print write) (set! G10456compile-core-expr-to-port (lambda (G10530x G10531p) (G10454pretty-print ((G10448rewriter '#f) G10530x) G10531p))) (begin (set! G10540G10456compile-core-expr-to-port G10456compile-core-expr-to-port) (set! G10539G10454pretty-print G10454pretty-print) (set! G10538G10452compile-core-expr G10452compile-core-expr) (set! G10537G10450expanded->core G10450expanded->core) (set! G10536G10448rewriter G10448rewriter) (set! G10535G10446mutable? G10446mutable?) (set! G10534G10444current-primitive-locations G10444current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f))
(void)
(begin (define G11053G10630make-collection '#f) (define G11054G10632current-library-collection '#f) (define G11055G10638G10633 '#f) (define G11056G10640G10635 '#f) (define G11057G10642G10634 '#f) (define G11058G10647library? '#f) (define G11059G10649make-library '#f) (define G11060G10651library-id '#f) (define G11061G10653library-name '#f) (define G11062G10655library-version '#f) (define G11063G10657library-imp* '#f) (define G11064G10659library-vis* '#f) (define G11065G10661library-inv* '#f) (define G11066G10663library-subst '#f) (define G11067G10665library-env '#f) (define G11068G10667library-visit-state '#f) (define G11069G10669library-invoke-state '#f) (define G11070G10671library-visit-code '#f) (define G11071G10673library-invoke-code '#f) (define G11072G10675library-visible? '#f) (define G11073G10677library-source-file-name '#f) (define G11074G10679set-library-id! '#f) (define G11075G10681set-library-name! '#f) (define G11076G10683set-library-version! '#f) (define G11077G10685set-library-imp*! '#f) (define G11078G10687set-library-vis*! '#f) (define G11079G10689set-library-inv*! '#f) (define G11080G10691set-library-subst! '#f) (define G11081G10693set-library-env! '#f) (define G11082G10695set-library-visit-state! '#f) (define G11083G10697set-library-invoke-state! '#f) (define G11084G10699set-library-visit-code! '#f) (define G11085G10701set-library-invoke-code! '#f) (define G11086G10703set-library-visible?! '#f) (define G11087G10705set-library-source-file-name! '#f) (define G11088G10707rp '#f) (define G11089G10709find-dependencies '#f) (define G11090G10711find-library-by '#f) (define G11091G10713library-path '#f) (define G11092G10715library-extensions '#f) (define G11093G10717library-name->file-name '#f) (define G11094G10719file-locator '#f) (define G11095G10721serialize-all '#f) (define G11096G10723current-precompiled-library-loader '#f) (define G11097G10725try-load-from-file '#f) (define G11098G10727library-loader '#f) (define G11099G10729current-library-expander '#f) (define G11100G10731external-pending-libraries '#f) (define G11101G10733find-external-library '#f) (define G11102G10735find-library-by-name '#f) (define G11103G10737library-exists? '#f) (define G11104G10739find-library-by-spec/die '#f) (define G11105G10741label->binding-table '#f) (define G11106G10743install-library-record '#f) (define G11107G10745install-library '#f) (define G11108G10747imported-label->binding '#f) (define G11109G10749invoke-library '#f) (define G11110G10751visit-library '#f) (define G11111G10753invoke-library-by-spec '#f) (define G11112G10755installed-libraries '#f) (define G11113G10757library-spec '#f) ((lambda (G10630make-collection G10632current-library-collection G10638G10633 G10640G10635 G10642G10634 G10647library? G10649make-library G10651library-id G10653library-name G10655library-version G10657library-imp* G10659library-vis* G10661library-inv* G10663library-subst G10665library-env G10667library-visit-state G10669library-invoke-state G10671library-visit-code G10673library-invoke-code G10675library-visible? G10677library-source-file-name G10679set-library-id! G10681set-library-name! G10683set-library-version! G10685set-library-imp*! G10687set-library-vis*! G10689set-library-inv*! G10691set-library-subst! G10693set-library-env! G10695set-library-visit-state! G10697set-library-invoke-state! G10699set-library-visit-code! G10701set-library-invoke-code! G10703set-library-visible?! G10705set-library-source-file-name! G10707rp G10709find-dependencies G10711find-library-by G10713library-path G10715library-extensions G10717library-name->file-name G10719file-locator G10721serialize-all G10723current-precompiled-library-loader G10725try-load-from-file G10727library-loader G10729current-library-expander G10731external-pending-libraries G10733find-external-library G10735find-library-by-name G10737library-exists? G10739find-library-by-spec/die G10741label->binding-table G10743install-library-record G10745install-library G10747imported-label->binding G10749invoke-library G10751visit-library G10753invoke-library-by-spec G10755installed-libraries G10757library-spec) (begin (set! G10630make-collection (lambda () ((lambda (G10758set) ((lambda (G10761set-cons) (begin (set! G10761set-cons (lambda (G10766x G10767ls) (if (memq G10766x G10767ls) G10767ls (cons G10766x G10767ls)))) (lambda G10764 ((lambda (G10765) (if (= G10765 '0) (apply (lambda () G10758set) G10764) (if (= G10765 '1) (apply (lambda (G10762x) (set! G10758set (G10761set-cons G10762x G10758set))) G10764) (error 'apply '"invalid arg count")))) (length G10764))))) '#f)) '()))) (set! G10632current-library-collection (G10438G10233make-parameter (G10630make-collection) (lambda (G10770x) (begin (if (procedure? G10770x) (void) (assertion-violation 'current-library-collection '"not a procedure" G10770x)) G10770x)))) (set! G10638G10633 (make-record-type-descriptor 'library '#f 'G10636 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G10640G10635 '#f) (set! G10642G10634 (make-record-constructor-descriptor G10638G10633 '#f G10640G10635)) (set! G10647library? (record-predicate G10638G10633)) (set! G10649make-library (record-constructor G10642G10634)) (set! G10651library-id (record-accessor G10638G10633 '0)) (set! G10653library-name (record-accessor G10638G10633 '1)) (set! G10655library-version (record-accessor G10638G10633 '2)) (set! G10657library-imp* (record-accessor G10638G10633 '3)) (set! G10659library-vis* (record-accessor G10638G10633 '4)) (set! G10661library-inv* (record-accessor G10638G10633 '5)) (set! G10663library-subst (record-accessor G10638G10633 '6)) (set! G10665library-env (record-accessor G10638G10633 '7)) (set! G10667library-visit-state (record-accessor G10638G10633 '8)) (set! G10669library-invoke-state (record-accessor G10638G10633 '9)) (set! G10671library-visit-code (record-accessor G10638G10633 '10)) (set! G10673library-invoke-code (record-accessor G10638G10633 '11)) (set! G10675library-visible? (record-accessor G10638G10633 '12)) (set! G10677library-source-file-name (record-accessor G10638G10633 '13)) (set! G10679set-library-id! (record-mutator G10638G10633 '0)) (set! G10681set-library-name! (record-mutator G10638G10633 '1)) (set! G10683set-library-version! (record-mutator G10638G10633 '2)) (set! G10685set-library-imp*! (record-mutator G10638G10633 '3)) (set! G10687set-library-vis*! (record-mutator G10638G10633 '4)) (set! G10689set-library-inv*! (record-mutator G10638G10633 '5)) (set! G10691set-library-subst! (record-mutator G10638G10633 '6)) (set! G10693set-library-env! (record-mutator G10638G10633 '7)) (set! G10695set-library-visit-state! (record-mutator G10638G10633 '8)) (set! G10697set-library-invoke-state! (record-mutator G10638G10633 '9)) (set! G10699set-library-visit-code! (record-mutator G10638G10633 '10)) (set! G10701set-library-invoke-code! (record-mutator G10638G10633 '11)) (set! G10703set-library-visible?! (record-mutator G10638G10633 '12)) (set! G10705set-library-source-file-name! (record-mutator G10638G10633 '13)) (set! G10707rp (G10435G10227make-record-printer 'library (lambda (G10772x G10773p) (begin (if (G10647library? G10772x) (void) (assertion-violation 'record-type-printer '"not a library")) (display (format '"#<library ~s>" (if (null? (G10655library-version G10772x)) (G10653library-name G10772x) (append (G10653library-name G10772x) (list (G10655library-version G10772x))))) G10773p))))) (set! G10709find-dependencies (lambda (G10776ls) (if (null? G10776ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G10711find-library-by (lambda (G10778pred) ((letrec ((G10780f (lambda (G10782ls) (if (null? G10782ls) '#f (if (G10778pred (car G10782ls)) (car G10782ls) (G10780f (cdr G10782ls))))))) G10780f) ((G10632current-library-collection))))) (set! G10713library-path (G10438G10233make-parameter '(".") (lambda (G10784x) (if (if (list? G10784x) (begin '#f (for-all string? G10784x)) '#f) (map (lambda (G10786x) G10786x) G10784x) (assertion-violation 'library-path '"not a list of strings" G10784x))))) (set! G10715library-extensions (G10438G10233make-parameter '(".sls" ".ss" ".scm") (lambda (G10788x) (if (if (list? G10788x) (begin '#f (for-all string? G10788x)) '#f) (map (lambda (G10790x) G10790x) G10788x) (assertion-violation 'library-extensions '"not a list of strings" G10788x))))) (set! G10717library-name->file-name (lambda (G10792x) (call-with-values (lambda () (open-string-output-port)) (lambda (G10796G10794LAMBDA G10797G10795LAMBDA) ((lambda (G10800extract G10801p) ((lambda (G10805display-hex) (begin (set! G10805display-hex (lambda (G10820n) (if (<= '0 G10820n '9) (display G10820n G10801p) (display (integer->char (+ (char->integer '#\A) (- G10820n '10))) G10801p)))) (begin ((letrec ((G10806f (lambda (G10808ls) (if (null? G10808ls) (void) (begin (display '"/" G10801p) (for-each (lambda (G10810c) (if ((lambda (G10812t) (if G10812t G10812t ((lambda (G10814t) (if G10814t G10814t ((lambda (G10816t) (if G10816t G10816t (begin '#f (memv G10810c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G10810c '#\9)))) (char<=? '#\A G10810c '#\Z)))) (char<=? '#\a G10810c '#\z)) (display G10810c G10801p) (begin (display '"%" G10801p) ((lambda (G10818n) (begin (G10805display-hex (quotient G10818n '16)) (G10805display-hex (remainder G10818n '16)))) (char->integer G10810c))))) (string->list (symbol->string (car G10808ls)))) (G10806f (cdr G10808ls))))))) G10806f) G10792x) (G10800extract)))) '#f)) G10797G10795LAMBDA G10796G10794LAMBDA))))) (set! G10719file-locator (G10438G10233make-parameter (lambda (G10822x) ((lambda (G10824str) ((letrec ((G10826f (lambda (G10828ls G10829exts G10830failed-list) (if (null? G10828ls) ((lambda () ((lambda (G10842G10837 G10844G10839 G10846G10838 G10851G10836 G10853make-library-resolution-condition G10855G10834 G10857G10835 G10859library-resolution-condition? G10861condition-library G10863condition-files) (begin (set! G10842G10837 (make-record-type-descriptor '&library-resolution &condition-rtd 'G10840 '#f '#f '#((immutable library) (immutable files)))) (set! G10844G10839 '#f) (set! G10846G10838 (make-record-constructor-descriptor G10842G10837 &condition-rcd G10844G10839)) (set! G10851G10836 (record-predicate G10842G10837)) (set! G10853make-library-resolution-condition (record-constructor G10846G10838)) (set! G10855G10834 (record-accessor G10842G10837 '0)) (set! G10857G10835 (record-accessor G10842G10837 '1)) (set! G10859library-resolution-condition? (condition-predicate G10842G10837)) (set! G10861condition-library (condition-accessor G10842G10837 G10855G10834)) (set! G10863condition-files (condition-accessor G10842G10837 G10857G10835)) (raise (condition (G19156G18922make-error) (G19182G19008make-who-condition 'expander) (G19136G18858make-message-condition '"cannot locate library in library-path") (G10853make-library-resolution-condition G10822x (reverse G10830failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G10829exts) (G10826f (cdr G10828ls) (G10715library-extensions) G10830failed-list) ((lambda (G10864name) (if (file-exists? G10864name) G10864name (G10826f G10828ls (cdr G10829exts) (cons G10864name G10830failed-list)))) (string-append (car G10828ls) G10824str (car G10829exts)))))))) G10826f) (G10713library-path) (G10715library-extensions) '())) (G10717library-name->file-name G10822x))) (lambda (G10866f) (if (procedure? G10866f) G10866f (assertion-violation 'file-locator '"not a procedure" G10866f))))) (set! G10721serialize-all (lambda (G10868serialize G10869compile) ((lambda (G10873library-desc) (begin (set! G10873library-desc (lambda (G10876x) (list (G10651library-id G10876x) (G10653library-name G10876x)))) (for-each (lambda (G10874x) (if (G10677library-source-file-name G10874x) (G10868serialize (G10677library-source-file-name G10874x) (list (G10651library-id G10874x) (G10653library-name G10874x) (G10655library-version G10874x) (map G10873library-desc (G10657library-imp* G10874x)) (map G10873library-desc (G10659library-vis* G10874x)) (map G10873library-desc (G10661library-inv* G10874x)) (G10663library-subst G10874x) (G10665library-env G10874x) (G10869compile (G10671library-visit-code G10874x)) (G10869compile (G10673library-invoke-code G10874x)) (G10675library-visible? G10874x))) (void))) ((G10632current-library-collection))))) '#f))) (set! G10723current-precompiled-library-loader (G10438G10233make-parameter (lambda (G10878filename G10879sk) '#f))) (set! G10725try-load-from-file (lambda (G10882filename) ((G10723current-precompiled-library-loader) G10882filename (lambda G10920 ((lambda (G10921) (if (= G10921 '11) (apply (lambda (G10884id G10885name G10886ver G10887imp* G10888vis* G10889inv* G10890exp-subst G10891exp-env G10892visit-proc G10893invoke-proc G10894visible?) ((letrec ((G10906f (lambda (G10908deps) (if (null? G10908deps) (begin (G10745install-library G10884id G10885name G10886ver G10887imp* G10888vis* G10889inv* G10890exp-subst G10891exp-env G10892visit-proc G10893invoke-proc '#f '#f G10894visible? '#f) '#t) ((lambda (G10910d) ((lambda (G10912label G10913dname) ((lambda (G10916l) (if (if (G10647library? G10916l) (begin '#f (eq? G10912label (G10651library-id G10916l))) '#f) (G10906f (cdr G10908deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source.\n" G10885name G10913dname G10882filename) '#f))) (G10735find-library-by-name G10913dname))) (car G10910d) (cadr G10910d))) (car G10908deps)))))) G10906f) (append G10887imp* G10888vis* G10889inv*))) G10920) (if (>= G10921 '0) (apply (lambda G10918others '#f) G10920) (error 'apply '"invalid arg count")))) (length G10920)))))) (set! G10727library-loader (G10438G10233make-parameter (lambda (G10922x) ((lambda (G10924file-name) (if (not G10924file-name) (assertion-violation '#f '"cannot file library" G10922x) ((lambda (G10926t) (if G10926t G10926t (begin '#f ((G10729current-library-expander) (G10437G10231read-library-source-file G10924file-name) G10924file-name (lambda (G10928name) (if (equal? G10928name G10922x) (void) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G10932G10930LAMBDA G10933G10931LAMBDA) ((lambda (G10936e G10937p) (begin (display '"expected to find library " G10937p) (write G10922x G10937p) (display '" in file " G10937p) (display G10924file-name G10937p) (display '", found " G10937p) (write G10928name G10937p) (display '" instead" G10937p) (G10936e))) G10933G10931LAMBDA G10932G10930LAMBDA)))))))))) (G10725try-load-from-file G10924file-name)))) ((G10719file-locator) G10922x))) (lambda (G10940f) (if (procedure? G10940f) G10940f (assertion-violation 'library-locator '"not a procedure" G10940f))))) (set! G10729current-library-expander (G10438G10233make-parameter (lambda (G10942x) (assertion-violation 'library-expander '"not initialized")) (lambda (G10944f) (if (procedure? G10944f) G10944f (assertion-violation 'library-expander '"not a procedure" G10944f))))) (set! G10731external-pending-libraries (G10438G10233make-parameter '())) (set! G10733find-external-library (lambda (G10946name) (begin (if (member G10946name (G10731external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G10946name) (void)) ((lambda (G10950G10948external-pending-libraries G10951G10949external-pending-libraries) ((lambda (G10954swap) (dynamic-wind G10954swap (lambda () (begin ((G10727library-loader) G10946name) ((lambda (G10956t) (if G10956t G10956t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G10946name)))) (G10711find-library-by (lambda (G10958x) (equal? (G10653library-name G10958x) G10946name)))))) G10954swap)) (lambda () ((lambda (G10960t) (begin (G10950G10948external-pending-libraries G10951G10949external-pending-libraries) (set! G10951G10949external-pending-libraries G10960t))) (G10950G10948external-pending-libraries))))) G10731external-pending-libraries (cons G10946name (G10731external-pending-libraries)))))) (set! G10735find-library-by-name (lambda (G10962name) ((lambda (G10964t) (if G10964t G10964t (begin '#f (G10733find-external-library G10962name)))) (G10711find-library-by (lambda (G10966x) (equal? (G10653library-name G10966x) G10962name)))))) (set! G10737library-exists? (lambda (G10968name) (if (G10711find-library-by (lambda (G10970x) (equal? (G10653library-name G10970x) G10968name))) (begin '#f '#t) '#f))) (set! G10739find-library-by-spec/die (lambda (G10972spec) ((lambda (G10974id) ((lambda (G10976t) (if G10976t G10976t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G10972spec)))) (G10711find-library-by (lambda (G10978x) (eq? G10974id (G10651library-id G10978x)))))) (car G10972spec)))) (set! G10741label->binding-table (make-eq-hashtable)) (set! G10743install-library-record (lambda (G10980lib) (begin ((lambda (G10982exp-env) (for-each (lambda (G10984x) ((lambda (G10986label G10987binding) ((lambda (G10990binding) (hashtable-set! G10741label->binding-table G10986label G10990binding)) ((lambda (G10992t) (if (eqv? G10992t 'global) (cons 'global (cons G10980lib (cdr G10987binding))) (if (eqv? G10992t 'global-macro) (cons 'global-macro (cons G10980lib (cdr G10987binding))) (if (eqv? G10992t 'global-macro!) (cons 'global-macro! (cons G10980lib (cdr G10987binding))) G10987binding)))) (car G10987binding)))) (car G10984x) (cdr G10984x))) G10982exp-env)) (G10665library-env G10980lib)) ((G10632current-library-collection) G10980lib)))) (set! G10745install-library (lambda (G10993id G10994name G10995ver G10996imp* G10997vis* G10998inv* G10999exp-subst G11000exp-env G11001visit-proc G11002invoke-proc G11003visit-code G11004invoke-code G11005visible? G11006source-file-name) ((lambda (G11021imp-lib* G11022vis-lib* G11023inv-lib*) (begin (if (if (symbol? G10993id) (if (list? G10994name) (begin '#f (list? G10995ver)) '#f) '#f) (void) (assertion-violation 'install-library '"invalid spec with id/name/ver" G10993id G10994name G10995ver)) (if (G10737library-exists? G10994name) (assertion-violation 'install-library '"library is already installed" G10994name) (void)) ((lambda (G11027lib) (G10743install-library-record G11027lib)) (G10649make-library G10993id G10994name G10995ver G11021imp-lib* G11022vis-lib* G11023inv-lib* G10999exp-subst G11000exp-env G11001visit-proc G11002invoke-proc G11003visit-code G11004invoke-code G11005visible? G11006source-file-name)))) (map G10739find-library-by-spec/die G10996imp*) (map G10739find-library-by-spec/die G10997vis*) (map G10739find-library-by-spec/die G10998inv*)))) (set! G10747imported-label->binding (lambda (G11029lab) (hashtable-ref G10741label->binding-table G11029lab '#f))) (set! G10749invoke-library (lambda (G11031lib) ((lambda (G11033invoke) (if (procedure? G11033invoke) (begin (G10697set-library-invoke-state! G11031lib (lambda () (assertion-violation 'invoke '"circularity detected" G11031lib))) (for-each G10749invoke-library (G10661library-inv* G11031lib)) (G10697set-library-invoke-state! G11031lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G11031lib))) (G11033invoke) (G10697set-library-invoke-state! G11031lib '#t)) (void))) (G10669library-invoke-state G11031lib)))) (set! G10751visit-library (lambda (G11035lib) ((lambda (G11037visit) (if (procedure? G11037visit) (begin (G10695set-library-visit-state! G11035lib (lambda () (assertion-violation 'visit '"circularity detected" G11035lib))) (for-each G10749invoke-library (G10659library-vis* G11035lib)) (G10695set-library-visit-state! G11035lib (lambda () (assertion-violation 'invoke '"first visit did not return" G11035lib))) (G11037visit) (G10695set-library-visit-state! G11035lib '#t)) (void))) (G10667library-visit-state G11035lib)))) (set! G10753invoke-library-by-spec (lambda (G11039spec) (G10749invoke-library (G10739find-library-by-spec/die G11039spec)))) (set! G10755installed-libraries (lambda G11049 ((lambda (G11050) (if (= G11050 '1) (apply (lambda (G11041all?) ((letrec ((G11043f (lambda (G11045ls) (if (null? G11045ls) '() (if ((lambda (G11047t) (if G11047t G11047t (begin '#f (G10675library-visible? (car G11045ls))))) G11041all?) (cons (car G11045ls) (G11043f (cdr G11045ls))) (G11043f (cdr G11045ls))))))) G11043f) ((G10632current-library-collection)))) G11049) (if (= G11050 '0) (apply (lambda () (G10755installed-libraries '#f)) G11049) (error 'apply '"invalid arg count")))) (length G11049)))) (set! G10757library-spec (lambda (G11051x) (begin (if (G10647library? G11051x) (void) (assertion-violation 'library-spec '"not a library" G11051x)) (list (G10651library-id G11051x) (G10653library-name G11051x) (G10655library-version G11051x))))) (begin (set! G11113G10757library-spec G10757library-spec) (set! G11112G10755installed-libraries G10755installed-libraries) (set! G11111G10753invoke-library-by-spec G10753invoke-library-by-spec) (set! G11110G10751visit-library G10751visit-library) (set! G11109G10749invoke-library G10749invoke-library) (set! G11108G10747imported-label->binding G10747imported-label->binding) (set! G11107G10745install-library G10745install-library) (set! G11106G10743install-library-record G10743install-library-record) (set! G11105G10741label->binding-table G10741label->binding-table) (set! G11104G10739find-library-by-spec/die G10739find-library-by-spec/die) (set! G11103G10737library-exists? G10737library-exists?) (set! G11102G10735find-library-by-name G10735find-library-by-name) (set! G11101G10733find-external-library G10733find-external-library) (set! G11100G10731external-pending-libraries G10731external-pending-libraries) (set! G11099G10729current-library-expander G10729current-library-expander) (set! G11098G10727library-loader G10727library-loader) (set! G11097G10725try-load-from-file G10725try-load-from-file) (set! G11096G10723current-precompiled-library-loader G10723current-precompiled-library-loader) (set! G11095G10721serialize-all G10721serialize-all) (set! G11094G10719file-locator G10719file-locator) (set! G11093G10717library-name->file-name G10717library-name->file-name) (set! G11092G10715library-extensions G10715library-extensions) (set! G11091G10713library-path G10713library-path) (set! G11090G10711find-library-by G10711find-library-by) (set! G11089G10709find-dependencies G10709find-dependencies) (set! G11088G10707rp G10707rp) (set! G11087G10705set-library-source-file-name! G10705set-library-source-file-name!) (set! G11086G10703set-library-visible?! G10703set-library-visible?!) (set! G11085G10701set-library-invoke-code! G10701set-library-invoke-code!) (set! G11084G10699set-library-visit-code! G10699set-library-visit-code!) (set! G11083G10697set-library-invoke-state! G10697set-library-invoke-state!) (set! G11082G10695set-library-visit-state! G10695set-library-visit-state!) (set! G11081G10693set-library-env! G10693set-library-env!) (set! G11080G10691set-library-subst! G10691set-library-subst!) (set! G11079G10689set-library-inv*! G10689set-library-inv*!) (set! G11078G10687set-library-vis*! G10687set-library-vis*!) (set! G11077G10685set-library-imp*! G10685set-library-imp*!) (set! G11076G10683set-library-version! G10683set-library-version!) (set! G11075G10681set-library-name! G10681set-library-name!) (set! G11074G10679set-library-id! G10679set-library-id!) (set! G11073G10677library-source-file-name G10677library-source-file-name) (set! G11072G10675library-visible? G10675library-visible?) (set! G11071G10673library-invoke-code G10673library-invoke-code) (set! G11070G10671library-visit-code G10671library-visit-code) (set! G11069G10669library-invoke-state G10669library-invoke-state) (set! G11068G10667library-visit-state G10667library-visit-state) (set! G11067G10665library-env G10665library-env) (set! G11066G10663library-subst G10663library-subst) (set! G11065G10661library-inv* G10661library-inv*) (set! G11064G10659library-vis* G10659library-vis*) (set! G11063G10657library-imp* G10657library-imp*) (set! G11062G10655library-version G10655library-version) (set! G11061G10653library-name G10653library-name) (set! G11060G10651library-id G10651library-id) (set! G11059G10649make-library G10649make-library) (set! G11058G10647library? G10647library?) (set! G11057G10642G10634 G10642G10634) (set! G11056G10640G10635 G10640G10635) (set! G11055G10638G10633 G10638G10633) (set! G11054G10632current-library-collection G10632current-library-collection) (set! G11053G10630make-collection G10630make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G11453G11116build-global-define '#f) (define G11454G11248build-lambda '#f) (define G11455G11250build-case-lambda '#f) (define G11456G11252build-let '#f) (define G11457G11324build-sequence '#f) (define G11458G11326build-void '#f) (define G11459G11328build-letrec '#f) (define G11460G11330build-letrec* '#f) (define G11461G11332build-library-letrec* '#f) ((lambda (G11116build-global-define G11248build-lambda G11250build-case-lambda G11252build-let G11324build-sequence G11326build-void G11328build-letrec G11330build-letrec* G11332build-library-letrec*) (begin (set! G11116build-global-define (lambda (G11333x) (cons 'define (cons G11333x '('#f))))) (set! G11248build-lambda (lambda (G11335ae G11336vars G11337exp) (list 'lambda G11336vars G11337exp))) (set! G11250build-case-lambda (lambda (G11341ae G11342vars* G11343exp*) ((lambda (G11348build-error G11350build-pred G11352build-apply G11354expand-case-lambda) (begin (set! G11348build-error (lambda (G11401ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G11350build-pred (lambda (G11379ae G11380n G11381vars) (call-with-values (lambda () ((letrec ((G11387f (lambda (G11389vars G11390count) (if (pair? G11389vars) (G11387f (cdr G11389vars) (+ G11390count '1)) (if (null? G11389vars) (values G11390count '=) (values G11390count '>=)))))) G11387f) G11381vars '0)) (lambda (G11393G11385LAMBDA G11394G11386LAMBDA) ((lambda (G11397pred G11398count) (list (list 'primitive G11397pred) G11380n (list 'quote G11398count))) G11394G11386LAMBDA G11393G11385LAMBDA))))) (set! G11352build-apply (lambda (G11371ae G11372g G11373vars G11374exp) (list '(primitive apply) (G11248build-lambda G11371ae G11373vars G11374exp) G11372g))) (set! G11354expand-case-lambda (lambda (G11355ae G11356vars G11357exp*) ((lambda (G11361g G11362n) (list 'lambda G11361g (G11252build-let G11355ae (list G11362n) (list (list '(primitive length) G11361g)) ((letrec ((G11365f (lambda (G11367vars* G11368exp*) (if (null? G11367vars*) (G11348build-error G11355ae) (list 'if (G11350build-pred G11355ae G11362n (car G11367vars*)) (G11352build-apply G11355ae G11361g (car G11367vars*) (car G11368exp*)) (G11365f (cdr G11367vars*) (cdr G11368exp*))))))) G11365f) G11342vars* G11357exp*)))) (gensym) (gensym)))) (if (= (length G11343exp*) '1) (G11248build-lambda G11341ae (car G11342vars*) (car G11343exp*)) (G11354expand-case-lambda G11341ae G11342vars* G11343exp*)))) '#f '#f '#f '#f))) (set! G11252build-let (lambda (G11403ae G11404lhs* G11405rhs* G11406body) (cons (G11248build-lambda G11403ae G11404lhs* G11406body) G11405rhs*))) (set! G11324build-sequence (lambda (G11411ae G11412exps) ((letrec ((G11415loop (lambda (G11417exps) (if (null? (cdr G11417exps)) (car G11417exps) (if (equal? (car G11417exps) (G11326build-void)) (G11415loop (cdr G11417exps)) (cons 'begin G11417exps)))))) G11415loop) G11412exps))) (set! G11326build-void (lambda () '((primitive void)))) (set! G11328build-letrec (lambda (G11419ae G11420vars G11421val-exps G11422body-exp) (if (null? G11420vars) G11422body-exp (list 'letrec (map list G11420vars G11421val-exps) G11422body-exp)))) (set! G11330build-letrec* (lambda (G11427ae G11428vars G11429val-exps G11430body-exp) (if (null? G11428vars) G11430body-exp (G11252build-let G11427ae G11428vars (map (lambda (G11435x) (list 'quote '#f)) G11428vars) (G11324build-sequence G11427ae (append (map (lambda (G11437lhs G11438rhs) (list 'set! G11437lhs G11438rhs)) G11428vars G11429val-exps) (list G11430body-exp))))))) (set! G11332build-library-letrec* (lambda (G11441ae G11442name G11443vars G11444locs G11445val-exps G11446body-exp) (list 'library-letrec* G11442name (map list G11443vars G11444locs G11445val-exps) G11446body-exp))) (begin (set! G11461G11332build-library-letrec* G11332build-library-letrec*) (set! G11460G11330build-letrec* G11330build-letrec*) (set! G11459G11328build-letrec G11328build-letrec) (set! G11458G11326build-void G11326build-void) (set! G11457G11324build-sequence G11324build-sequence) (set! G11456G11252build-let G11252build-let) (set! G11455G11250build-case-lambda G11250build-case-lambda) (set! G11454G11248build-lambda G11248build-lambda) (set! G11453G11116build-global-define G11116build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G18555G11474set-cons '#f) (define G18556G11476set-union '#f) (define G18557G11481top-mark* '#f) (define G18558G11483top-marked? '#f) (define G18559G11485gen-lexical '#f) (define G18560G11487gen-global '#f) (define G18561G11489gen-label '#f) (define G18562G11491gen-top-level-label '#f) (define G18563G11493gen-define-label+loc '#f) (define G18564G11495gen-define-label '#f) (define G18565G11501G11496 '#f) (define G18566G11503G11498 '#f) (define G18567G11505G11497 '#f) (define G18568G11510rib? '#f) (define G18569G11512make-rib '#f) (define G18570G11514rib-sym* '#f) (define G18571G11516rib-mark** '#f) (define G18572G11518rib-label* '#f) (define G18573G11520rib-sealed/freq '#f) (define G18574G11522set-rib-sym*! '#f) (define G18575G11524set-rib-mark**! '#f) (define G18576G11526set-rib-label*! '#f) (define G18577G11528set-rib-sealed/freq! '#f) (define G18578G11530make-empty-rib '#f) (define G18579G11532extend-rib! '#f) (define G18580G11534make-rib-map '#f) (define G18581G11536seal-rib! '#f) (define G18582G11538unseal-rib! '#f) (define G18583G11540make-full-rib '#f) (define G18584G11546G11541 '#f) (define G18585G11548G11543 '#f) (define G18586G11550G11542 '#f) (define G18587G11555stx? '#f) (define G18588G11557make-stx '#f) (define G18589G11559stx-expr '#f) (define G18590G11561stx-mark* '#f) (define G18591G11563stx-subst* '#f) (define G18592G11565stx-ae* '#f) (define G18593G11567set-stx-expr! '#f) (define G18594G11569set-stx-mark*! '#f) (define G18595G11571set-stx-subst*! '#f) (define G18596G11573set-stx-ae*! '#f) (define G18597G11575rp '#f) (define G18598G11577datum->stx '#f) (define G18599G11579gen-mark '#f) (define G18600G11581anti-mark '#f) (define G18601G11583anti-mark? '#f) (define G18602G11585join-wraps '#f) (define G18603G11587mkstx '#f) (define G18604G11589add-mark '#f) (define G18605G11591add-subst '#f) (define G18606G11593syntax-kind? '#f) (define G18607G11595syntax-vector->list '#f) (define G18608G11597syntax-pair? '#f) (define G18609G11599syntax-vector? '#f) (define G18610G11601syntax-null? '#f) (define G18611G11603syntax-list? '#f) (define G18612G11605syntax-car '#f) (define G18613G11607syntax-cdr '#f) (define G18614G11609syntax->list '#f) (define G18615G11611id? '#f) (define G18616G11613id->sym '#f) (define G18617G11615same-marks? '#f) (define G18618G11617bound-id=? '#f) (define G18619G11619free-id=? '#f) (define G18620G11621valid-bound-ids? '#f) (define G18621G11623distinct-bound-ids? '#f) (define G18622G11625bound-id-member? '#f) (define G18623G11627self-evaluating? '#f) (define G18624G11629strip-annotations '#f) (define G18625G11631strip '#f) (define G18626G11633stx->datum '#f) (define G18627G11635same-marks*? '#f) (define G18628G11637id->label '#f) (define G18629G11639id->real-label '#f) (define G18630G11641label->binding '#f) (define G18631G11643make-binding '#f) (define G18632G11645binding-type '#f) (define G18633G11647binding-value '#f) (define G18634G11649raise-unbound-error '#f) (define G18635G11651syntax-type '#f) (define G18636G11674sanitize-binding '#f) (define G18637G11676make-variable-transformer '#f) (define G18638G11678variable-transformer? '#f) (define G18639G11680variable-transformer-procedure '#f) (define G18640G11682make-eval-transformer '#f) (define G18641G12070parse-define '#f) (define G18642G12072parse-define-syntax '#f) (define G18643G12074scheme-stx-hashtable '#f) (define G18644G12076scheme-stx '#f) (define G18645G12078lexical-var '#f) (define G18646G12080lexical-mutable? '#f) (define G18647G12082set-lexical-mutable! '#f) (define G18648G12084add-lexical '#f) (define G18649G12086add-lexicals '#f) (define G18650G12088letrec-helper '#f) (define G18651G12090letrec-transformer '#f) (define G18652G12092letrec*-transformer '#f) (define G18653G12094fluid-let-syntax-transformer '#f) (define G18654G12096type-descriptor-transformer '#f) (define G18655G12098record-type-descriptor-transformer '#f) (define G18656G12100record-constructor-descriptor-transformer '#f) (define G18657G12102when-transformer '#f) (define G18658G12104unless-transformer '#f) (define G18659G12106if-transformer '#f) (define G18660G12108case-transformer '#f) (define G18661G12110quote-transformer '#f) (define G18662G12112case-lambda-transformer '#f) (define G18663G12114lambda-transformer '#f) (define G18664G12116bless '#f) (define G18665G12118with-syntax-macro '#f) (define G18666G12120invalid-fmls-error '#f) (define G18667G12122let-macro '#f) (define G18668G12124let-values-macro '#f) (define G18669G12126let*-values-macro '#f) (define G18670G12128trace-lambda-macro '#f) (define G18671G12130trace-define-macro '#f) (define G18672G12132trace-define-syntax-macro '#f) (define G18673G12134trace-let/rec-syntax '#f) (define G18674G12136trace-let-syntax-macro '#f) (define G18675G12138trace-letrec-syntax-macro '#f) (define G18676G12140guard-macro '#f) (define G18677G12142define-enumeration-macro '#f) (define G18678G12144time-macro '#f) (define G18679G12146delay-macro '#f) (define G18680G12148assert-macro '#f) (define G18681G12150endianness-macro '#f) (define G18682G12152identifier-syntax-macro '#f) (define G18683G12154do-macro '#f) (define G18684G12156let*-macro '#f) (define G18685G12158or-macro '#f) (define G18686G12160and-macro '#f) (define G18687G12162cond-macro '#f) (define G18688G12164do-include '#f) (define G18689G12166include-macro '#f) (define G18690G12168include-into-macro '#f) (define G18691G12170syntax-rules-macro '#f) (define G18692G12172quasiquote-macro '#f) (define G18693G12174quasisyntax-macro '#f) (define G18694G12176define-struct-macro '#f) (define G18695G12178define-record-type-macro '#f) (define G18696G12180define-condition-type-macro '#f) (define G18697G12182incorrect-usage-macro '#f) (define G18698G12184parameterize-transformer '#f) (define G18699G12186foreign-call-transformer '#f) (define G18700G12188convert-pattern '#f) (define G18701G12190syntax-dispatch '#f) (define G18702G12192ellipsis? '#f) (define G18703G12194underscore? '#f) (define G18704G12196verify-literals '#f) (define G18705G12198syntax-case-transformer '#f) (define G18706G12200ellipsis-map '#f) (define G18707G12202syntax-transformer '#f) (define G18708G12204core-macro-transformer '#f) (define G18709G12206file-options-macro '#f) (define G18710G12208symbol-macro '#f) (define G18711G12210macro-transformer '#f) (define G18712G12212local-macro-transformer '#f) (define G18713G12214do-macro-call '#f) (define G18714G12216chi-macro '#f) (define G18715G12218chi-local-macro '#f) (define G18716G12220chi-global-macro '#f) (define G18717G12222chi-expr* '#f) (define G18718G12224chi-application '#f) (define G18719G12226chi-expr '#f) (define G18720G12228chi-set! '#f) (define G18721G12230verify-formals '#f) (define G18722G12232chi-lambda-clause '#f) (define G18723G12234chi-lambda-clause* '#f) (define G18724G12236chi-defun '#f) (define G18725G12238chi-rhs '#f) (define G18726G12240expand-interaction-rhs*/init* '#f) (define G18727G12242chi-rhs* '#f) (define G18728G12244find-bound=? '#f) (define G18729G12246find-dups '#f) (define G18730G12248chi-internal '#f) (define G18731G12250parse-module '#f) (define G18732G12256G12251 '#f) (define G18733G12258G12253 '#f) (define G18734G12260G12252 '#f) (define G18735G12265module-interface? '#f) (define G18736G12267make-module-interface '#f) (define G18737G12269module-interface-first-mark '#f) (define G18738G12271module-interface-exp-id-vec '#f) (define G18739G12273module-interface-exp-lab-vec '#f) (define G18740G12275set-module-interface-first-mark! '#f) (define G18741G12277set-module-interface-exp-id-vec! '#f) (define G18742G12279set-module-interface-exp-lab-vec! '#f) (define G18743G12281module-interface-exp-id* '#f) (define G18744G12283chi-internal-module '#f) (define G18745G12285chi-body* '#f) (define G18746G12287expand-transformer '#f) (define G18747G12289parse-exports '#f) (define G18748G12291parse-library-name '#f) (define G18749G12293parse-library '#f) (define G18750G12295parse-import-spec* '#f) (define G18751G12297make-top-rib '#f) (define G18752G12299make-collector '#f) (define G18753G12301inv-collector '#f) (define G18754G12303vis-collector '#f) (define G18755G12305imp-collector '#f) (define G18756G12307chi-library-internal '#f) (define G18757G12309chi-interaction-expr '#f) (define G18758G12311library-body-expander '#f) (define G18759G12313core-library-expander '#f) (define G18760G12315parse-top-level-program '#f) (define G18761G12317top-level-expander '#f) (define G18762G12323G12318 '#f) (define G18763G12325G12320 '#f) (define G18764G12327G12319 '#f) (define G18765G12332env? '#f) (define G18766G12334make-env '#f) (define G18767G12336env-names '#f) (define G18768G12338env-labels '#f) (define G18769G12340env-itc '#f) (define G18770G12342set-env-names! '#f) (define G18771G12344set-env-labels! '#f) (define G18772G12346set-env-itc! '#f) (define G18773G12348rp '#f) (define G18774G12354G12349 '#f) (define G18775G12356G12351 '#f) (define G18776G12358G12350 '#f) (define G18777G12363interaction-env? '#f) (define G18778G12365make-interaction-env '#f) (define G18779G12367interaction-env-rib '#f) (define G18780G12369interaction-env-r '#f) (define G18781G12371interaction-env-locs '#f) (define G18782G12373set-interaction-env-rib! '#f) (define G18783G12375set-interaction-env-r! '#f) (define G18784G12377set-interaction-env-locs! '#f) (define G18785G12379rp '#f) (define G18786G12381interaction-environment-symbols '#f) (define G18787G12383environment-symbols '#f) (define G18788G12385environment? '#f) (define G18789G12387environment '#f) (define G18790G12389null-environment '#f) (define G18791G12391scheme-report-environment '#f) (define G18792G12393expand '#f) (define G18793G12395eval '#f) (define G18794G12397library-expander '#f) (define G18795G12399boot-library-expand '#f) (define G18796G12401rev-map-append '#f) (define G18797G12403build-exports '#f) (define G18798G12405make-export-subst '#f) (define G18799G12407make-export-env/macros '#f) (define G18800G12409generate-temporaries '#f) (define G18801G12411free-identifier=? '#f) (define G18802G12413bound-identifier=? '#f) (define G18803G12415extract-position-condition '#f) (define G18804G12417syntax-error '#f) (define G18805G12419extract-trace '#f) (define G18806G12421syntax-violation* '#f) (define G18807G12423syntax-violation '#f) (define G18808G12425identifier? '#f) (define G18809G12427datum->syntax '#f) (define G18810G12429syntax->datum '#f) (define G18811G12431compile-r6rs-top-level '#f) (define G18812G12433pre-compile-r6rs-top-level '#f) (define G18813G12435interaction-environment '#f) (define G18814G12437top-level-context '#f) ((lambda (G11474set-cons G11476set-union G11481top-mark* G11483top-marked? G11485gen-lexical G11487gen-global G11489gen-label G11491gen-top-level-label G11493gen-define-label+loc G11495gen-define-label G11501G11496 G11503G11498 G11505G11497 G11510rib? G11512make-rib G11514rib-sym* G11516rib-mark** G11518rib-label* G11520rib-sealed/freq G11522set-rib-sym*! G11524set-rib-mark**! G11526set-rib-label*! G11528set-rib-sealed/freq! G11530make-empty-rib G11532extend-rib! G11534make-rib-map G11536seal-rib! G11538unseal-rib! G11540make-full-rib G11546G11541 G11548G11543 G11550G11542 G11555stx? G11557make-stx G11559stx-expr G11561stx-mark* G11563stx-subst* G11565stx-ae* G11567set-stx-expr! G11569set-stx-mark*! G11571set-stx-subst*! G11573set-stx-ae*! G11575rp G11577datum->stx G11579gen-mark G11581anti-mark G11583anti-mark? G11585join-wraps G11587mkstx G11589add-mark G11591add-subst G11593syntax-kind? G11595syntax-vector->list G11597syntax-pair? G11599syntax-vector? G11601syntax-null? G11603syntax-list? G11605syntax-car G11607syntax-cdr G11609syntax->list G11611id? G11613id->sym G11615same-marks? G11617bound-id=? G11619free-id=? G11621valid-bound-ids? G11623distinct-bound-ids? G11625bound-id-member? G11627self-evaluating? G11629strip-annotations G11631strip G11633stx->datum G11635same-marks*? G11637id->label G11639id->real-label G11641label->binding G11643make-binding G11645binding-type G11647binding-value G11649raise-unbound-error G11651syntax-type G11674sanitize-binding G11676make-variable-transformer G11678variable-transformer? G11680variable-transformer-procedure G11682make-eval-transformer G12070parse-define G12072parse-define-syntax G12074scheme-stx-hashtable G12076scheme-stx G12078lexical-var G12080lexical-mutable? G12082set-lexical-mutable! G12084add-lexical G12086add-lexicals G12088letrec-helper G12090letrec-transformer G12092letrec*-transformer G12094fluid-let-syntax-transformer G12096type-descriptor-transformer G12098record-type-descriptor-transformer G12100record-constructor-descriptor-transformer G12102when-transformer G12104unless-transformer G12106if-transformer G12108case-transformer G12110quote-transformer G12112case-lambda-transformer G12114lambda-transformer G12116bless G12118with-syntax-macro G12120invalid-fmls-error G12122let-macro G12124let-values-macro G12126let*-values-macro G12128trace-lambda-macro G12130trace-define-macro G12132trace-define-syntax-macro G12134trace-let/rec-syntax G12136trace-let-syntax-macro G12138trace-letrec-syntax-macro G12140guard-macro G12142define-enumeration-macro G12144time-macro G12146delay-macro G12148assert-macro G12150endianness-macro G12152identifier-syntax-macro G12154do-macro G12156let*-macro G12158or-macro G12160and-macro G12162cond-macro G12164do-include G12166include-macro G12168include-into-macro G12170syntax-rules-macro G12172quasiquote-macro G12174quasisyntax-macro G12176define-struct-macro G12178define-record-type-macro G12180define-condition-type-macro G12182incorrect-usage-macro G12184parameterize-transformer G12186foreign-call-transformer G12188convert-pattern G12190syntax-dispatch G12192ellipsis? G12194underscore? G12196verify-literals G12198syntax-case-transformer G12200ellipsis-map G12202syntax-transformer G12204core-macro-transformer G12206file-options-macro G12208symbol-macro G12210macro-transformer G12212local-macro-transformer G12214do-macro-call G12216chi-macro G12218chi-local-macro G12220chi-global-macro G12222chi-expr* G12224chi-application G12226chi-expr G12228chi-set! G12230verify-formals G12232chi-lambda-clause G12234chi-lambda-clause* G12236chi-defun G12238chi-rhs G12240expand-interaction-rhs*/init* G12242chi-rhs* G12244find-bound=? G12246find-dups G12248chi-internal G12250parse-module G12256G12251 G12258G12253 G12260G12252 G12265module-interface? G12267make-module-interface G12269module-interface-first-mark G12271module-interface-exp-id-vec G12273module-interface-exp-lab-vec G12275set-module-interface-first-mark! G12277set-module-interface-exp-id-vec! G12279set-module-interface-exp-lab-vec! G12281module-interface-exp-id* G12283chi-internal-module G12285chi-body* G12287expand-transformer G12289parse-exports G12291parse-library-name G12293parse-library G12295parse-import-spec* G12297make-top-rib G12299make-collector G12301inv-collector G12303vis-collector G12305imp-collector G12307chi-library-internal G12309chi-interaction-expr G12311library-body-expander G12313core-library-expander G12315parse-top-level-program G12317top-level-expander G12323G12318 G12325G12320 G12327G12319 G12332env? G12334make-env G12336env-names G12338env-labels G12340env-itc G12342set-env-names! G12344set-env-labels! G12346set-env-itc! G12348rp G12354G12349 G12356G12351 G12358G12350 G12363interaction-env? G12365make-interaction-env G12367interaction-env-rib G12369interaction-env-r G12371interaction-env-locs G12373set-interaction-env-rib! G12375set-interaction-env-r! G12377set-interaction-env-locs! G12379rp G12381interaction-environment-symbols G12383environment-symbols G12385environment? G12387environment G12389null-environment G12391scheme-report-environment G12393expand G12395eval G12397library-expander G12399boot-library-expand G12401rev-map-append G12403build-exports G12405make-export-subst G12407make-export-env/macros G12409generate-temporaries G12411free-identifier=? G12413bound-identifier=? G12415extract-position-condition G12417syntax-error G12419extract-trace G12421syntax-violation* G12423syntax-violation G12425identifier? G12427datum->syntax G12429syntax->datum G12431compile-r6rs-top-level G12433pre-compile-r6rs-top-level G12435interaction-environment G12437top-level-context) (begin (set! G11474set-cons (lambda (G12438x G12439ls) (if (memq G12438x G12439ls) G12439ls (cons G12438x G12439ls)))) (set! G11476set-union (lambda (G12442ls1 G12443ls2) (if (null? G12442ls1) G12443ls2 (if (memq (car G12442ls1) G12443ls2) (G11476set-union (cdr G12442ls1) G12443ls2) (cons (car G12442ls1) (G11476set-union (cdr G12442ls1) G12443ls2)))))) (set! G11481top-mark* '(top)) (set! G11483top-marked? (lambda (G12446m*) (memq 'top G12446m*))) (set! G11485gen-lexical (lambda (G12448sym) (if (symbol? G12448sym) (gensym G12448sym) (if (G11555stx? G12448sym) (G11485gen-lexical (G11613id->sym G12448sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G12448sym))))) (set! G11487gen-global (lambda (G12450x) (G11485gen-lexical G12450x))) (set! G11489gen-label (lambda (G12452_) (gensym))) (set! G11491gen-top-level-label (lambda (G12454id G12455rib) ((lambda (G12459find) (begin (set! G12459find (lambda (G12470sym G12471mark* G12472sym* G12473mark** G12474label*) (if (pair? G12472sym*) (begin '#f (if (if (eq? G12470sym (car G12472sym*)) (begin '#f (G11615same-marks? G12471mark* (car G12473mark**))) '#f) (car G12474label*) (G12459find G12470sym G12471mark* (cdr G12472sym*) (cdr G12473mark**) (cdr G12474label*)))) '#f))) ((lambda (G12460sym G12461mark*) ((lambda (G12464sym*) ((lambda (G12466t) (if G12466t ((lambda (G12468label) (if (G11108G10747imported-label->binding G12468label) (gensym) G12468label)) G12466t) (gensym))) (if (memq G12460sym (G11514rib-sym* G12455rib)) (begin '#f (G12459find G12460sym G12461mark* G12464sym* (G11516rib-mark** G12455rib) (G11518rib-label* G12455rib))) '#f))) (G11514rib-sym* G12455rib))) (G11613id->sym G12454id) (G11561stx-mark* G12454id)))) '#f))) (set! G11493gen-define-label+loc (lambda (G12480id G12481rib) ((lambda (G12484t) (if G12484t ((lambda (G12486env) ((lambda (G12488label G12489locs) (values G12488label ((lambda (G12492t) (if G12492t (cdr G12492t) ((lambda (G12494loc) (begin (G12377set-interaction-env-locs! G12486env (cons (cons G12488label G12494loc) G12489locs)) G12494loc)) (G11485gen-lexical G12480id)))) (assq G12488label G12489locs)))) (G11491gen-top-level-label G12480id G12481rib) (G12371interaction-env-locs G12486env))) G12484t) (values (gensym) (G11485gen-lexical G12480id)))) (G12437top-level-context)))) (set! G11495gen-define-label (lambda (G12496id G12497rib) (if (G12437top-level-context) (G11491gen-top-level-label G12496id G12497rib) (gensym)))) (set! G11501G11496 (make-record-type-descriptor 'rib '#f 'G11499 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq)))) (set! G11503G11498 '#f) (set! G11505G11497 (make-record-constructor-descriptor G11501G11496 '#f G11503G11498)) (set! G11510rib? (record-predicate G11501G11496)) (set! G11512make-rib (record-constructor G11505G11497)) (set! G11514rib-sym* (record-accessor G11501G11496 '0)) (set! G11516rib-mark** (record-accessor G11501G11496 '1)) (set! G11518rib-label* (record-accessor G11501G11496 '2)) (set! G11520rib-sealed/freq (record-accessor G11501G11496 '3)) (set! G11522set-rib-sym*! (record-mutator G11501G11496 '0)) (set! G11524set-rib-mark**! (record-mutator G11501G11496 '1)) (set! G11526set-rib-label*! (record-mutator G11501G11496 '2)) (set! G11528set-rib-sealed/freq! (record-mutator G11501G11496 '3)) (set! G11530make-empty-rib (lambda () (G11512make-rib '() '() '() '#f))) (set! G11532extend-rib! (lambda (G12500rib G12501id G12502label) ((lambda (G12507find) (begin (set! G12507find (lambda (G12518sym G12519mark* G12520sym* G12521mark** G12522label*) (if (pair? G12520sym*) (begin '#f (if (if (eq? G12518sym (car G12520sym*)) (begin '#f (G11615same-marks? G12519mark* (car G12521mark**))) '#f) G12522label* (G12507find G12518sym G12519mark* (cdr G12520sym*) (cdr G12521mark**) (cdr G12522label*)))) '#f))) (begin (if (G11520rib-sealed/freq G12500rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G12500rib) (void)) ((lambda (G12508sym G12509mark*) ((lambda (G12512sym*) ((lambda (G12514t) (if G12514t ((lambda (G12516p) (if (eq? G12502label (car G12516p)) (void) (if (G12437top-level-context) (set-car! G12516p G12502label) (G12423syntax-violation '#f '"cannot redefine" G12501id)))) G12514t) (begin (G11522set-rib-sym*! G12500rib (cons G12508sym G12512sym*)) (G11524set-rib-mark**! G12500rib (cons G12509mark* (G11516rib-mark** G12500rib))) (G11526set-rib-label*! G12500rib (cons G12502label (G11518rib-label* G12500rib)))))) (if (memq G12508sym (G11514rib-sym* G12500rib)) (begin '#f (G12507find G12508sym G12509mark* G12512sym* (G11516rib-mark** G12500rib) (G11518rib-label* G12500rib))) '#f))) (G11514rib-sym* G12500rib))) (G11613id->sym G12501id) (G11561stx-mark* G12501id))))) '#f))) (set! G11534make-rib-map (lambda (G12528sym*) ((lambda (G12530ht) ((letrec ((G12532f (lambda (G12534i G12535sym*) (if (null? G12535sym*) G12530ht (begin (hashtable-update! G12530ht (car G12535sym*) (lambda (G12538x) (cons G12534i G12538x)) '()) (G12532f (+ G12534i '1) (cdr G12535sym*))))))) G12532f) '0 G12528sym*)) (make-eq-hashtable)))) (set! G11536seal-rib! (lambda (G12540rib) ((lambda (G12542sym*) (if (null? G12542sym*) (void) (begin (G11522set-rib-sym*! G12540rib (list->vector G12542sym*)) (G11524set-rib-mark**! G12540rib (list->vector (G11516rib-mark** G12540rib))) (G11526set-rib-label*! G12540rib (list->vector (G11518rib-label* G12540rib))) (G11528set-rib-sealed/freq! G12540rib (G11534make-rib-map G12542sym*))))) (G11514rib-sym* G12540rib)))) (set! G11538unseal-rib! (lambda (G12544rib) (if (G11520rib-sealed/freq G12544rib) (begin (G11528set-rib-sealed/freq! G12544rib '#f) (G11522set-rib-sym*! G12544rib (vector->list (G11514rib-sym* G12544rib))) (G11524set-rib-mark**! G12544rib (vector->list (G11516rib-mark** G12544rib))) (G11526set-rib-label*! G12544rib (vector->list (G11518rib-label* G12544rib)))) (void)))) (set! G11540make-full-rib (lambda (G12546id* G12547label*) ((lambda (G12550r) (begin (G11536seal-rib! G12550r) G12550r)) (G11512make-rib (map G11613id->sym G12546id*) (map G11561stx-mark* G12546id*) G12547label* '#f)))) (set! G11546G11541 (make-record-type-descriptor 'stx '#f 'G11544 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G11548G11543 '#f) (set! G11550G11542 (make-record-constructor-descriptor G11546G11541 '#f G11548G11543)) (set! G11555stx? (record-predicate G11546G11541)) (set! G11557make-stx (record-constructor G11550G11542)) (set! G11559stx-expr (record-accessor G11546G11541 '0)) (set! G11561stx-mark* (record-accessor G11546G11541 '1)) (set! G11563stx-subst* (record-accessor G11546G11541 '2)) (set! G11565stx-ae* (record-accessor G11546G11541 '3)) (set! G11567set-stx-expr! (record-mutator G11546G11541 '0)) (set! G11569set-stx-mark*! (record-mutator G11546G11541 '1)) (set! G11571set-stx-subst*! (record-mutator G11546G11541 '2)) (set! G11573set-stx-ae*! (record-mutator G11546G11541 '3)) (set! G11575rp (G10435G10227make-record-printer 'stx (lambda (G12552x G12553p) (begin (display '"#<syntax " G12553p) (write (G11633stx->datum G12552x) G12553p) ((lambda (G12556expr) (if (G10430G10217annotation? G12556expr) ((lambda (G12558src) (if (pair? G12558src) (begin (display '" [" G12553p) (display (cdr G12558src) G12553p) (display '" of " G12553p) (display (car G12558src) G12553p) (display '"]" G12553p)) (void))) (G10431G10219annotation-source G12556expr)) (void))) (G11559stx-expr G12552x)) (display '">" G12553p))))) (set! G11577datum->stx (lambda (G12560id G12561datum) (G11557make-stx G12561datum (G11561stx-mark* G12560id) (G11563stx-subst* G12560id) (G11565stx-ae* G12560id)))) (set! G11579gen-mark (lambda () (string '#\m))) (set! G11581anti-mark '#f) (set! G11583anti-mark? not) (set! G11585join-wraps (lambda (G12564m1* G12565s1* G12566ae1* G12567e) ((lambda (G12573cancel) (begin (set! G12573cancel (lambda (G12580ls1 G12581ls2) ((letrec ((G12584f (lambda (G12586x G12587ls1) (if (null? G12587ls1) (cdr G12581ls2) (cons G12586x (G12584f (car G12587ls1) (cdr G12587ls1))))))) G12584f) (car G12580ls1) (cdr G12580ls1)))) ((lambda (G12574m2* G12575s2* G12576ae2*) (if (if (not (null? G12564m1*)) (if (not (null? G12574m2*)) (begin '#f (G11583anti-mark? (car G12574m2*))) '#f) '#f) (values (G12573cancel G12564m1* G12574m2*) (G12573cancel G12565s1* G12575s2*) (G12573cancel G12566ae1* G12576ae2*)) (values (append G12564m1* G12574m2*) (append G12565s1* G12575s2*) (append G12566ae1* G12576ae2*)))) (G11561stx-mark* G12567e) (G11563stx-subst* G12567e) (G11565stx-ae* G12567e)))) '#f))) (set! G11587mkstx (lambda (G12590e G12591m* G12592s* G12593ae*) (if (G11555stx? G12590e) (call-with-values (lambda () (G11585join-wraps G12591m* G12592s* G12593ae* G12590e)) (lambda (G12601G12598LAMBDA G12602G12599LAMBDA G12603G12600LAMBDA) ((lambda (G12607ae* G12608s* G12609m*) (G11557make-stx (G11559stx-expr G12590e) G12609m* G12608s* G12607ae*)) G12603G12600LAMBDA G12602G12599LAMBDA G12601G12598LAMBDA))) (G11557make-stx G12590e G12591m* G12592s* G12593ae*)))) (set! G11589add-mark (lambda (G12613m G12614e G12615ae) (G11587mkstx G12614e (list G12613m) '(shift) (list G12615ae)))) (set! G11591add-subst (lambda (G12619subst G12620e) (G11587mkstx G12620e '() (list G12619subst) '()))) (set! G11593syntax-kind? (lambda (G12623x G12624p?) (if (G11555stx? G12623x) (G11593syntax-kind? (G11559stx-expr G12623x) G12624p?) (if (G10430G10217annotation? G12623x) (G11593syntax-kind? (G10432G10221annotation-expression G12623x) G12624p?) (G12624p? G12623x))))) (set! G11595syntax-vector->list (lambda (G12627x) (if (G11555stx? G12627x) ((lambda (G12629ls G12630m* G12631s* G12632ae*) (map (lambda (G12637x) (G11587mkstx G12637x G12630m* G12631s* G12632ae*)) G12629ls)) (G11595syntax-vector->list (G11559stx-expr G12627x)) (G11561stx-mark* G12627x) (G11563stx-subst* G12627x) (G11565stx-ae* G12627x)) (if (G10430G10217annotation? G12627x) (G11595syntax-vector->list (G10432G10221annotation-expression G12627x)) (if (vector? G12627x) (vector->list G12627x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G12627x)))))) (set! G11597syntax-pair? (lambda (G12639x) (G11593syntax-kind? G12639x pair?))) (set! G11599syntax-vector? (lambda (G12641x) (G11593syntax-kind? G12641x vector?))) (set! G11601syntax-null? (lambda (G12643x) (G11593syntax-kind? G12643x null?))) (set! G11603syntax-list? (lambda (G12645x) ((lambda (G12647t) (if G12647t G12647t (begin '#f (if (G11597syntax-pair? G12645x) (begin '#f (G11603syntax-list? (G11607syntax-cdr G12645x))) '#f)))) (G11601syntax-null? G12645x)))) (set! G11605syntax-car (lambda (G12649x) (if (G11555stx? G12649x) (G11587mkstx (G11605syntax-car (G11559stx-expr G12649x)) (G11561stx-mark* G12649x) (G11563stx-subst* G12649x) (G11565stx-ae* G12649x)) (if (G10430G10217annotation? G12649x) (G11605syntax-car (G10432G10221annotation-expression G12649x)) (if (pair? G12649x) (car G12649x) (assertion-violation 'syntax-car '"BUG: not a pair" G12649x)))))) (set! G11607syntax-cdr (lambda (G12651x) (if (G11555stx? G12651x) (G11587mkstx (G11607syntax-cdr (G11559stx-expr G12651x)) (G11561stx-mark* G12651x) (G11563stx-subst* G12651x) (G11565stx-ae* G12651x)) (if (G10430G10217annotation? G12651x) (G11607syntax-cdr (G10432G10221annotation-expression G12651x)) (if (pair? G12651x) (cdr G12651x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G12651x)))))) (set! G11609syntax->list (lambda (G12653x) (if (G11597syntax-pair? G12653x) (cons (G11605syntax-car G12653x) (G11609syntax->list (G11607syntax-cdr G12653x))) (if (G11601syntax-null? G12653x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G12653x))))) (set! G11611id? (lambda (G12655x) (if (G11555stx? G12655x) (begin '#f ((lambda (G12657expr) (symbol? (if (G10430G10217annotation? G12657expr) (G10429G10215annotation-stripped G12657expr) G12657expr))) (G11559stx-expr G12655x))) '#f))) (set! G11613id->sym (lambda (G12659x) (begin (if (G11555stx? G12659x) (void) (error 'id->sym '"BUG in ikarus: not an id" G12659x)) ((lambda (G12661expr) ((lambda (G12663sym) (if (symbol? G12663sym) G12663sym (error 'id->sym '"BUG in ikarus: not an id" G12659x))) (if (G10430G10217annotation? G12661expr) (G10429G10215annotation-stripped G12661expr) G12661expr))) (G11559stx-expr G12659x))))) (set! G11615same-marks? (lambda (G12665x G12666y) ((lambda (G12669t) (if G12669t G12669t (begin '#f (if (pair? G12665x) (if (pair? G12666y) (if (eq? (car G12665x) (car G12666y)) (begin '#f (G11615same-marks? (cdr G12665x) (cdr G12666y))) '#f) '#f) '#f)))) (if (null? G12665x) (begin '#f (null? G12666y)) '#f)))) (set! G11617bound-id=? (lambda (G12671x G12672y) (if (eq? (G11613id->sym G12671x) (G11613id->sym G12672y)) (begin '#f (G11615same-marks? (G11561stx-mark* G12671x) (G11561stx-mark* G12672y))) '#f))) (set! G11619free-id=? (lambda (G12675i G12676j) ((lambda (G12679t0 G12680t1) (if ((lambda (G12683t) (if G12683t G12683t (begin '#f G12680t1))) G12679t0) (eq? G12679t0 G12680t1) (eq? (G11613id->sym G12675i) (G11613id->sym G12676j)))) (G11639id->real-label G12675i) (G11639id->real-label G12676j)))) (set! G11621valid-bound-ids? (lambda (G12685id*) (if (for-all G11611id? G12685id*) (begin '#f (G11623distinct-bound-ids? G12685id*)) '#f))) (set! G11623distinct-bound-ids? (lambda (G12687id*) ((lambda (G12689t) (if G12689t G12689t (begin '#f (if (not (G11625bound-id-member? (car G12687id*) (cdr G12687id*))) (begin '#f (G11623distinct-bound-ids? (cdr G12687id*))) '#f)))) (null? G12687id*)))) (set! G11625bound-id-member? (lambda (G12691id G12692id*) (if (pair? G12692id*) (begin '#f ((lambda (G12695t) (if G12695t G12695t (begin '#f (G11625bound-id-member? G12691id (cdr G12692id*))))) (G11617bound-id=? G12691id (car G12692id*)))) '#f))) (set! G11627self-evaluating? (lambda (G12697x) ((lambda (G12699t) (if G12699t G12699t ((lambda (G12701t) (if G12701t G12701t ((lambda (G12703t) (if G12703t G12703t ((lambda (G12705t) (if G12705t G12705t (begin '#f (bytevector? G12697x)))) (boolean? G12697x)))) (char? G12697x)))) (string? G12697x)))) (number? G12697x)))) (set! G11629strip-annotations (lambda (G12707x) (if (pair? G12707x) (cons (G11629strip-annotations (car G12707x)) (G11629strip-annotations (cdr G12707x))) (if (vector? G12707x) (vector-map G11629strip-annotations G12707x) (if (G10430G10217annotation? G12707x) (G10429G10215annotation-stripped G12707x) G12707x))))) (set! G11631strip (lambda (G12709x G12710m*) (if (G11483top-marked? G12710m*) (if ((lambda (G12713t) (if G12713t G12713t ((lambda (G12715t) (if G12715t G12715t (begin '#f (if (vector? G12709x) (if (> (vector-length G12709x) '0) (begin '#f (G10430G10217annotation? (vector-ref G12709x '0))) '#f) '#f)))) (if (pair? G12709x) (begin '#f (G10430G10217annotation? (car G12709x))) '#f)))) (G10430G10217annotation? G12709x)) (G11629strip-annotations G12709x) G12709x) ((letrec ((G12717f (lambda (G12719x) (if (G11555stx? G12719x) (G11631strip (G11559stx-expr G12719x) (G11561stx-mark* G12719x)) (if (G10430G10217annotation? G12719x) (G10429G10215annotation-stripped G12719x) (if (pair? G12719x) ((lambda (G12721a G12722d) (if (if (eq? G12721a (car G12719x)) (begin '#f (eq? G12722d (cdr G12719x))) '#f) G12719x (cons G12721a G12722d))) (G12717f (car G12719x)) (G12717f (cdr G12719x))) (if (vector? G12719x) ((lambda (G12725old) ((lambda (G12727new) (if (for-all eq? G12725old G12727new) G12719x (list->vector G12727new))) (map G12717f G12725old))) (vector->list G12719x)) G12719x))))))) G12717f) G12709x)))) (set! G11633stx->datum (lambda (G12729x) (G11631strip G12729x '()))) (set! G11635same-marks*? (lambda (G12731mark* G12732mark** G12733si) (if (null? G12733si) '#f (if (G11615same-marks? G12731mark* (vector-ref G12732mark** (car G12733si))) (car G12733si) (G11635same-marks*? G12731mark* G12732mark** (cdr G12733si)))))) (set! G11637id->label (lambda (G12737id) ((lambda (G12739t) (if G12739t G12739t (begin '#f ((lambda (G12741t) (if G12741t ((lambda (G12743env) ((lambda (G12745rib) (call-with-values (lambda () (G11493gen-define-label+loc G12737id G12745rib)) (lambda (G12749G12747LAMBDA G12750G12748LAMBDA) ((lambda (G12753loc_ G12754lab) (begin (G11532extend-rib! G12745rib G12737id G12754lab) G12754lab)) G12750G12748LAMBDA G12749G12747LAMBDA)))) (G12367interaction-env-rib G12743env))) G12741t) '#f)) (G12437top-level-context))))) (G11639id->real-label G12737id)))) (set! G11639id->real-label (lambda (G12757id) ((lambda (G12759sym) ((letrec ((G12761search (lambda (G12763subst* G12764mark*) (if (null? G12763subst*) '#f (if (eq? (car G12763subst*) 'shift) (G12761search (cdr G12763subst*) (cdr G12764mark*)) ((lambda (G12767rib) ((lambda (G12769t) (if G12769t ((lambda (G12771ht) ((lambda (G12773si) ((lambda (G12775i) (if G12775i (vector-ref (G11518rib-label* G12767rib) G12775i) (G12761search (cdr G12763subst*) G12764mark*))) (if G12773si (begin '#f (G11635same-marks*? G12764mark* (G11516rib-mark** G12767rib) (reverse G12773si))) '#f))) (hashtable-ref G12771ht G12759sym '#f))) G12769t) ((letrec ((G12777f (lambda (G12779sym* G12780mark** G12781label*) (if (null? G12779sym*) (G12761search (cdr G12763subst*) G12764mark*) (if (if (eq? (car G12779sym*) G12759sym) (begin '#f (G11615same-marks? (car G12780mark**) G12764mark*)) '#f) (car G12781label*) (G12777f (cdr G12779sym*) (cdr G12780mark**) (cdr G12781label*))))))) G12777f) (G11514rib-sym* G12767rib) (G11516rib-mark** G12767rib) (G11518rib-label* G12767rib)))) (G11520rib-sealed/freq G12767rib))) (car G12763subst*))))))) G12761search) (G11563stx-subst* G12757id) (G11561stx-mark* G12757id))) (G11613id->sym G12757id)))) (set! G11641label->binding (lambda (G12785x G12786r) ((lambda (G12789t) (if G12789t ((lambda (G12791b) (if (if (pair? G12791b) (begin '#f (eq? (car G12791b) '$core-rtd)) '#f) (cons '$rtd (map G12116bless (cdr G12791b))) (if (if (pair? G12791b) (begin '#f (eq? (car G12791b) 'global-rtd)) '#f) ((lambda (G12793lib G12794loc) (cons '$rtd (symbol-value G12794loc))) (cadr G12791b) (cddr G12791b)) G12791b))) G12789t) ((lambda (G12797t) (if G12797t (cdr G12797t) ((lambda (G12799t) (if G12799t ((lambda (G12801env) ((lambda (G12803t) (if G12803t ((lambda (G12805p) (cons* 'lexical (cdr G12805p) '#f)) G12803t) '(displaced-lexical . #f))) (assq G12785x (G12371interaction-env-locs G12801env)))) G12799t) '(displaced-lexical . #f))) (G12437top-level-context)))) (assq G12785x G12786r)))) (G11108G10747imported-label->binding G12785x)))) (set! G11643make-binding cons) (set! G11645binding-type car) (set! G11647binding-value cdr) (set! G11649raise-unbound-error (lambda (G12807id) (G12421syntax-violation* '#f '"unbound identifier" G12807id (G19218G19122make-undefined-violation)))) (set! G11651syntax-type (lambda (G12809e G12810r) (if (G11611id? G12809e) ((lambda (G12813id) ((lambda (G12815label) ((lambda (G12817b) ((lambda (G12819type) ((lambda () (begin (if G12815label (void) (G11649raise-unbound-error G12813id)) ((lambda (G12821t) (if (memv G12821t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd library mutable)) (values G12819type (G11647binding-value G12817b) G12813id) (values 'other '#f '#f))) G12819type))))) (G11645binding-type G12817b))) (G11641label->binding G12815label G12810r))) (G11637id->label G12813id))) G12809e) (if (G11597syntax-pair? G12809e) ((lambda (G12822id) (if (G11611id? G12822id) ((lambda (G12824label) ((lambda (G12826b) ((lambda (G12828type) ((lambda () (begin (if G12824label (void) (G11649raise-unbound-error G12822id)) ((lambda (G12830t) (if (memv G12830t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import $core-rtd)) (values G12828type (G11647binding-value G12826b) G12822id) (values 'call '#f '#f))) G12828type))))) (G11645binding-type G12826b))) (G11641label->binding G12824label G12810r))) (G11637id->label G12822id)) (values 'call '#f '#f))) (G11605syntax-car G12809e)) ((lambda (G12831d) (if (G11627self-evaluating? G12831d) (values 'constant G12831d '#f) (values 'other '#f '#f))) (G11633stx->datum G12809e)))))) (set! G11674sanitize-binding (lambda (G12833x G12834src) (if (procedure? G12833x) (cons* 'local-macro G12833x G12834src) (if (if (pair? G12833x) (if (eq? (car G12833x) 'macro!) (begin '#f (procedure? (cdr G12833x))) '#f) '#f) (cons* 'local-macro! (cdr G12833x) G12834src) (if (if (pair? G12833x) (begin '#f (eq? (car G12833x) '$rtd)) '#f) G12833x (assertion-violation 'expand '"invalid transformer" G12833x)))))) (set! G11676make-variable-transformer (lambda (G12837x) (if (procedure? G12837x) (cons 'macro! G12837x) (assertion-violation 'make-variable-transformer '"not a procedure" G12837x)))) (set! G11678variable-transformer? (lambda (G12839x) (if (pair? G12839x) (if (eq? (car G12839x) 'macro!) (begin '#f (procedure? (cdr G12839x))) '#f) '#f))) (set! G11680variable-transformer-procedure (lambda (G12841x) (if (G11678variable-transformer? G12841x) (cdr G12841x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G12841x)))) (set! G11682make-eval-transformer (lambda (G12843x) (G11674sanitize-binding (eval-core (G10537G10450expanded->core G12843x)) G12843x))) (set! G12070parse-define (lambda (G12845x) ((lambda (G12847t) ((lambda (G12849ls/false) (if (if G12849ls/false (begin '#f (apply (lambda (G12851id G12852fmls G12853b G12854b*) (G11611id? G12851id)) G12849ls/false)) '#f) (apply (lambda (G12859id G12860fmls G12861b G12862b*) (begin (G12230verify-formals G12860fmls G12845x) (values G12859id (cons 'defun (cons G12860fmls (cons G12861b G12862b*)))))) G12849ls/false) ((lambda (G12867t) ((lambda (G12869ls/false) (if (if G12869ls/false (begin '#f (apply (lambda (G12871id G12872val) (G11611id? G12871id)) G12869ls/false)) '#f) (apply (lambda (G12875id G12876val) (values G12875id (cons 'expr G12876val))) G12869ls/false) ((lambda (G12879t) ((lambda (G12881ls/false) (if (if G12881ls/false (begin '#f (apply (lambda (G12883id) (G11611id? G12883id)) G12881ls/false)) '#f) (apply (lambda (G12885id) (values G12885id (cons 'expr (G12116bless '(void))))) G12881ls/false) (G12423syntax-violation '#f '"invalid syntax" G12879t))) (G12190syntax-dispatch G12879t '(_ any)))) G12867t))) (G12190syntax-dispatch G12867t '(_ any any)))) G12847t))) (G12190syntax-dispatch G12847t '(_ (any . any) any . each-any)))) G12845x))) (set! G12072parse-define-syntax (lambda (G12887x) ((lambda (G12889t) ((lambda (G12891ls/false) (if (if G12891ls/false (begin '#f (apply (lambda (G12893id G12894val) (G11611id? G12893id)) G12891ls/false)) '#f) (apply (lambda (G12897id G12898val) (values G12897id G12898val)) G12891ls/false) (G12423syntax-violation '#f '"invalid syntax" G12889t))) (G12190syntax-dispatch G12889t '(_ any any)))) G12887x))) (set! G12074scheme-stx-hashtable (make-eq-hashtable)) (set! G12076scheme-stx (lambda (G12901sym) ((lambda (G12903t) (if G12903t G12903t (begin '#f ((lambda (G12905subst) ((lambda (G12907stx) ((lambda (G12909stx) ((lambda () (begin (hashtable-set! G12074scheme-stx-hashtable G12901sym G12909stx) G12909stx)))) ((lambda (G12911t) (if G12911t ((lambda (G12913x) ((lambda (G12915name G12916label) (G11591add-subst (G11512make-rib (list G12915name) (list G11481top-mark*) (list G12916label) '#f) G12907stx)) (car G12913x) (cdr G12913x))) G12911t) G12907stx)) (assq G12901sym G12905subst)))) (G11557make-stx G12901sym G11481top-mark* '() '()))) (G11066G10663library-subst (G11102G10735find-library-by-name '(psyntax system $all))))))) (hashtable-ref G12074scheme-stx-hashtable G12901sym '#f)))) (set! G12078lexical-var car) (set! G12080lexical-mutable? cdr) (set! G12082set-lexical-mutable! set-cdr!) (set! G12084add-lexical (lambda (G12919lab G12920lex G12921r) (cons (cons* G12919lab 'lexical G12920lex '#f) G12921r))) (set! G12086add-lexicals (lambda (G12925lab* G12926lex* G12927r) (if (null? G12925lab*) G12927r (G12086add-lexicals (cdr G12925lab*) (cdr G12926lex*) (G12084add-lexical (car G12925lab*) (car G12926lex*) G12927r))))) (set! G12088letrec-helper (lambda (G12931e G12932r G12933mr G12934build) ((lambda (G12939t) ((lambda (G12941ls/false) (if G12941ls/false (apply (lambda (G12943lhs* G12944rhs* G12945b G12946b*) (if (not (G11621valid-bound-ids? G12943lhs*)) (G12120invalid-fmls-error G12931e G12943lhs*) ((lambda (G12951lex* G12952lab*) ((lambda (G12955rib G12956r) ((lambda (G12959body G12960rhs*) (G12934build '#f G12951lex* G12960rhs* G12959body)) (G12248chi-internal (G11591add-subst G12955rib (cons G12945b G12946b*)) G12956r G12933mr) (G12222chi-expr* (map (lambda (G12963x) (G11591add-subst G12955rib G12963x)) G12944rhs*) G12956r G12933mr))) (G11540make-full-rib G12943lhs* G12952lab*) (G12086add-lexicals G12952lab* G12951lex* G12932r))) (map G11485gen-lexical G12943lhs*) (map G11489gen-label G12943lhs*)))) G12941ls/false) (G12423syntax-violation '#f '"invalid syntax" G12939t))) (G12190syntax-dispatch G12939t '(_ #(each (any any)) any . each-any)))) G12931e))) (set! G12090letrec-transformer (lambda (G12965e G12966r G12967mr) (G12088letrec-helper G12965e G12966r G12967mr G11459G11328build-letrec))) (set! G12092letrec*-transformer (lambda (G12971e G12972r G12973mr) (G12088letrec-helper G12971e G12972r G12973mr G11460G11330build-letrec*))) (set! G12094fluid-let-syntax-transformer (lambda (G12977e G12978r G12979mr) ((lambda (G12984lookup) (begin (set! G12984lookup (lambda (G13003x) ((lambda (G13005t) (if G13005t G13005t (begin '#f (G12423syntax-violation '#f '"unbound identifier" G12977e G13003x)))) (G11637id->label G13003x)))) ((lambda (G12985t) ((lambda (G12987ls/false) (if G12987ls/false (apply (lambda (G12989lhs* G12990rhs* G12991b G12992b*) (if (not (G11621valid-bound-ids? G12989lhs*)) (G12120invalid-fmls-error G12977e G12989lhs*) ((lambda (G12997lab* G12998rhs*) (G12248chi-internal (cons G12991b G12992b*) (append (map cons G12997lab* G12998rhs*) G12978r) (append (map cons G12997lab* G12998rhs*) G12979mr))) (map G12984lookup G12989lhs*) (map (lambda (G13001x) (G11682make-eval-transformer (G12287expand-transformer G13001x G12979mr))) G12990rhs*)))) G12987ls/false) (G12423syntax-violation '#f '"invalid syntax" G12985t))) (G12190syntax-dispatch G12985t '(_ #(each (any any)) any . each-any)))) G12977e))) '#f))) (set! G12096type-descriptor-transformer (lambda (G13007e G13008r G13009mr) ((lambda (G13013t) ((lambda (G13015ls/false) (if (if G13015ls/false (begin '#f (apply (lambda (G13017id) (G11611id? G13017id)) G13015ls/false)) '#f) (apply (lambda (G13019id) ((lambda (G13021lab) ((lambda (G13023b) ((lambda (G13025type) ((lambda () (begin (if G13021lab (void) (G11649raise-unbound-error G13019id)) (if (if (eq? G13025type '$rtd) (begin '#f (not (list? (G11647binding-value G13023b)))) '#f) (void) (G12423syntax-violation '#f '"not a record type" G13007e)) (list 'quote (G11647binding-value G13023b)))))) (G11645binding-type G13023b))) (G11641label->binding G13021lab G13008r))) (G11637id->label G13019id))) G13015ls/false) (G12423syntax-violation '#f '"invalid syntax" G13013t))) (G12190syntax-dispatch G13013t '(_ any)))) G13007e))) (set! G12098record-type-descriptor-transformer (lambda (G13027e G13028r G13029mr) ((lambda (G13033t) ((lambda (G13035ls/false) (if (if G13035ls/false (begin '#f (apply (lambda (G13037id) (G11611id? G13037id)) G13035ls/false)) '#f) (apply (lambda (G13039id) ((lambda (G13041lab) ((lambda (G13043b) ((lambda (G13045type) ((lambda () (begin (if G13041lab (void) (G11649raise-unbound-error G13039id)) (if (if (eq? G13045type '$rtd) (begin '#f (list? (G11647binding-value G13043b))) '#f) (void) (G12423syntax-violation '#f '"not a record type" G13027e)) (G12226chi-expr (car (G11647binding-value G13043b)) G13028r G13029mr))))) (G11645binding-type G13043b))) (G11641label->binding G13041lab G13028r))) (G11637id->label G13039id))) G13035ls/false) (G12423syntax-violation '#f '"invalid syntax" G13033t))) (G12190syntax-dispatch G13033t '(_ any)))) G13027e))) (set! G12100record-constructor-descriptor-transformer (lambda (G13047e G13048r G13049mr) ((lambda (G13053t) ((lambda (G13055ls/false) (if (if G13055ls/false (begin '#f (apply (lambda (G13057id) (G11611id? G13057id)) G13055ls/false)) '#f) (apply (lambda (G13059id) ((lambda (G13061lab) ((lambda (G13063b) ((lambda (G13065type) ((lambda () (begin (if G13061lab (void) (G11649raise-unbound-error G13059id)) (if (if (eq? G13065type '$rtd) (begin '#f (list? (G11647binding-value G13063b))) '#f) (void) (G12423syntax-violation '#f '"invalid type" G13047e)) (G12226chi-expr (cadr (G11647binding-value G13063b)) G13048r G13049mr))))) (G11645binding-type G13063b))) (G11641label->binding G13061lab G13048r))) (G11637id->label G13059id))) G13055ls/false) (G12423syntax-violation '#f '"invalid syntax" G13053t))) (G12190syntax-dispatch G13053t '(_ any)))) G13047e))) (set! G12102when-transformer (lambda (G13067e G13068r G13069mr) ((lambda (G13073t) ((lambda (G13075ls/false) (if G13075ls/false (apply (lambda (G13077test G13078e G13079e*) (list 'if (G12226chi-expr G13077test G13068r G13069mr) (G11457G11324build-sequence '#f (G12222chi-expr* (cons G13078e G13079e*) G13068r G13069mr)) (G11458G11326build-void))) G13075ls/false) (G12423syntax-violation '#f '"invalid syntax" G13073t))) (G12190syntax-dispatch G13073t '(_ any any . each-any)))) G13067e))) (set! G12104unless-transformer (lambda (G13083e G13084r G13085mr) ((lambda (G13089t) ((lambda (G13091ls/false) (if G13091ls/false (apply (lambda (G13093test G13094e G13095e*) (list 'if (G12226chi-expr G13093test G13084r G13085mr) (G11458G11326build-void) (G11457G11324build-sequence '#f (G12222chi-expr* (cons G13094e G13095e*) G13084r G13085mr)))) G13091ls/false) (G12423syntax-violation '#f '"invalid syntax" G13089t))) (G12190syntax-dispatch G13089t '(_ any any . each-any)))) G13083e))) (set! G12106if-transformer (lambda (G13099e G13100r G13101mr) ((lambda (G13105t) ((lambda (G13107ls/false) (if G13107ls/false (apply (lambda (G13109e0 G13110e1 G13111e2) (list 'if (G12226chi-expr G13109e0 G13100r G13101mr) (G12226chi-expr G13110e1 G13100r G13101mr) (G12226chi-expr G13111e2 G13100r G13101mr))) G13107ls/false) ((lambda (G13115t) ((lambda (G13117ls/false) (if G13117ls/false (apply (lambda (G13119e0 G13120e1) (list 'if (G12226chi-expr G13119e0 G13100r G13101mr) (G12226chi-expr G13120e1 G13100r G13101mr) (G11458G11326build-void))) G13117ls/false) (G12423syntax-violation '#f '"invalid syntax" G13115t))) (G12190syntax-dispatch G13115t '(_ any any)))) G13105t))) (G12190syntax-dispatch G13105t '(_ any any any)))) G13099e))) (set! G12108case-transformer (lambda (G13123e G13124r G13125mr) ((lambda (G13130build-one G13132build-last) (begin (set! G13130build-one (lambda (G13187t G13188cls G13189rest) ((lambda (G13193t) ((lambda (G13195ls/false) (if G13195ls/false (apply (lambda (G13197d* G13198e G13199e*) (list 'if ((lambda (G13203data) (if (= '1 (length G13203data)) (list '(primitive eqv?) G13187t (list 'quote (car G13203data))) (list '(primitive memv) G13187t (list 'quote G13203data)))) (G11633stx->datum G13197d*)) (G11457G11324build-sequence '#f (G12222chi-expr* (cons G13198e G13199e*) G13124r G13125mr)) G13189rest)) G13195ls/false) ((lambda (G13205t) ((lambda (G13207ls/false) (if G13207ls/false (apply (lambda (G13209else) (G12423syntax-violation '#f '"invalid syntax" G13123e)) G13207ls/false) (G12423syntax-violation '#f '"invalid syntax" G13205t))) (G12190syntax-dispatch G13205t 'any))) G13193t))) (G12190syntax-dispatch G13193t '(each-any any . each-any)))) G13188cls))) (set! G13132build-last (lambda (G13157t G13158cls) ((lambda (G13161t) ((lambda (G13163ls/false) (if G13163ls/false (apply (lambda (G13165d* G13166e G13167e*) (G13130build-one G13157t G13158cls (G11458G11326build-void))) G13163ls/false) ((lambda (G13171t) ((lambda (G13173ls/false) (if G13173ls/false (apply (lambda (G13175else-kwd G13176x G13177x*) (if (if (G11611id? G13175else-kwd) (begin '#f (G11619free-id=? G13175else-kwd (G12076scheme-stx 'else))) '#f) (G11457G11324build-sequence '#f (G12222chi-expr* (cons G13176x G13177x*) G13124r G13125mr)) (G12423syntax-violation '#f '"invalid syntax" G13123e))) G13173ls/false) ((lambda (G13181t) ((lambda (G13183ls/false) (if G13183ls/false (apply (lambda (G13185else) (G12423syntax-violation '#f '"invalid syntax" G13123e)) G13183ls/false) (G12423syntax-violation '#f '"invalid syntax" G13181t))) (G12190syntax-dispatch G13181t 'any))) G13171t))) (G12190syntax-dispatch G13171t '(any any . each-any)))) G13161t))) (G12190syntax-dispatch G13161t '(each-any any . each-any)))) G13158cls))) ((lambda (G13133t) ((lambda (G13135ls/false) (if G13135ls/false (apply (lambda (G13137expr) (G11457G11324build-sequence '#f (list (G12226chi-expr G13137expr G13124r G13125mr) (G11458G11326build-void)))) G13135ls/false) ((lambda (G13139t) ((lambda (G13141ls/false) (if G13141ls/false (apply (lambda (G13143expr G13144cls G13145cls*) ((lambda (G13149t) (G11456G11252build-let '#f (list G13149t) (list (G12226chi-expr G13143expr G13124r G13125mr)) ((letrec ((G13151f (lambda (G13153cls G13154cls*) (if (null? G13154cls*) (G13132build-last G13149t G13153cls) (G13130build-one G13149t G13153cls (G13151f (car G13154cls*) (cdr G13154cls*))))))) G13151f) G13144cls G13145cls*))) (G11485gen-lexical 't))) G13141ls/false) (G12423syntax-violation '#f '"invalid syntax" G13139t))) (G12190syntax-dispatch G13139t '(_ any any . each-any)))) G13133t))) (G12190syntax-dispatch G13133t '(_ any)))) G13123e))) '#f '#f))) (set! G12110quote-transformer (lambda (G13211e G13212r G13213mr) ((lambda (G13217t) ((lambda (G13219ls/false) (if G13219ls/false (apply (lambda (G13221datum) (list 'quote (G11633stx->datum G13221datum))) G13219ls/false) (G12423syntax-violation '#f '"invalid syntax" G13217t))) (G12190syntax-dispatch G13217t '(_ any)))) G13211e))) (set! G12112case-lambda-transformer (lambda (G13223e G13224r G13225mr) ((lambda (G13229t) ((lambda (G13231ls/false) (if G13231ls/false (apply (lambda (G13233fmls* G13234b* G13235b**) (call-with-values (lambda () (G12234chi-lambda-clause* G13223e G13233fmls* (map cons G13234b* G13235b**) G13224r G13225mr)) (lambda (G13241G13239LAMBDA G13242G13240LAMBDA) ((lambda (G13245body* G13246fmls*) (G11455G11250build-case-lambda '#f G13246fmls* G13245body*)) G13242G13240LAMBDA G13241G13239LAMBDA)))) G13231ls/false) (G12423syntax-violation '#f '"invalid syntax" G13229t))) (G12190syntax-dispatch G13229t '(_ . #(each (any any . each-any)))))) G13223e))) (set! G12114lambda-transformer (lambda (G13249e G13250r G13251mr) ((lambda (G13255t) ((lambda (G13257ls/false) (if G13257ls/false (apply (lambda (G13259fmls G13260b G13261b*) (call-with-values (lambda () (G12232chi-lambda-clause G13249e G13259fmls (cons G13260b G13261b*) G13250r G13251mr)) (lambda (G13267G13265LAMBDA G13268G13266LAMBDA) ((lambda (G13271body G13272fmls) (G11454G11248build-lambda '#f G13272fmls G13271body)) G13268G13266LAMBDA G13267G13265LAMBDA)))) G13257ls/false) (G12423syntax-violation '#f '"invalid syntax" G13255t))) (G12190syntax-dispatch G13255t '(_ any any . each-any)))) G13249e))) (set! G12116bless (lambda (G13275x) (G11587mkstx ((letrec ((G13277f (lambda (G13279x) (if (G11555stx? G13279x) G13279x (if (pair? G13279x) (cons (G13277f (car G13279x)) (G13277f (cdr G13279x))) (if (symbol? G13279x) (G12076scheme-stx G13279x) (if (vector? G13279x) (vector-map G13277f G13279x) G13279x))))))) G13277f) G13275x) '() '() '()))) (set! G12118with-syntax-macro (lambda (G13281e) ((lambda (G13283t) ((lambda (G13285ls/false) (if G13285ls/false (apply (lambda (G13287pat* G13288expr* G13289b G13290b*) ((lambda (G13295idn*) (begin (G12230verify-formals (map car G13295idn*) G13281e) ((lambda (G13297t*) (G12116bless (list 'let (map list G13297t* G13288expr*) ((letrec ((G13299f (lambda (G13301pat* G13302t*) (if (null? G13301pat*) (cons 'begin (cons '#f (cons G13289b G13290b*))) (list 'syntax-case (car G13302t*) '() (list (car G13301pat*) (G13299f (cdr G13301pat*) (cdr G13302t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G13301pat*)) (car G13302t*)))))))) G13299f) G13287pat* G13297t*)))) (G12409generate-temporaries G13288expr*)))) ((letrec ((G13305f (lambda (G13307pat*) (if (null? G13307pat*) '() (call-with-values (lambda () (G12188convert-pattern (car G13307pat*) '())) (lambda (G13311G13309LAMBDA G13312G13310LAMBDA) ((lambda (G13315idn* G13316pat) (append G13315idn* (G13305f (cdr G13307pat*)))) G13312G13310LAMBDA G13311G13309LAMBDA))))))) G13305f) G13287pat*))) G13285ls/false) (G12423syntax-violation '#f '"invalid syntax" G13283t))) (G12190syntax-dispatch G13283t '(_ #(each (any any)) any . each-any)))) G13281e))) (set! G12120invalid-fmls-error (lambda (G13319stx G13320fmls) ((lambda (G13323t) ((lambda (G13325ls/false) (if G13325ls/false (apply (lambda (G13327id* G13328last) ((letrec ((G13331f (lambda (G13333id*) (if (null? G13333id*) (values) (if (not (G11611id? (car G13333id*))) (G12423syntax-violation '#f '"not an identifier" G13319stx (car G13333id*)) (begin (G13331f (cdr G13333id*)) (if (G11625bound-id-member? (car G13333id*) (cdr G13333id*)) (G12423syntax-violation '#f '"duplicate binding" G13319stx (car G13333id*)) (void)))))))) G13331f) (if (G11611id? G13328last) (cons G13328last G13327id*) (if (G11601syntax-null? G13328last) G13327id* (G12423syntax-violation '#f '"not an identifier" G13319stx G13328last))))) G13325ls/false) ((lambda (G13335t) ((lambda (G13337ls/false) (if G13337ls/false (apply (lambda () (G12423syntax-violation '#f '"malformed binding form" G13319stx G13320fmls)) G13337ls/false) (G12423syntax-violation '#f '"invalid syntax" G13335t))) (G12190syntax-dispatch G13335t '_))) G13323t))) (G12190syntax-dispatch G13323t '#(each+ any () any)))) G13320fmls))) (set! G12122let-macro (lambda (G13339stx) ((lambda (G13341t) ((lambda (G13343ls/false) (if G13343ls/false (apply (lambda (G13345lhs* G13346rhs* G13347b G13348b*) (if (G11621valid-bound-ids? G13345lhs*) (G12116bless (cons (cons 'lambda (cons G13345lhs* (cons G13347b G13348b*))) G13346rhs*)) (G12120invalid-fmls-error G13339stx G13345lhs*))) G13343ls/false) ((lambda (G13353t) ((lambda (G13355ls/false) (if (if G13355ls/false (begin '#f (apply (lambda (G13357f G13358lhs* G13359rhs* G13360b G13361b*) (G11611id? G13357f)) G13355ls/false)) '#f) (apply (lambda (G13367f G13368lhs* G13369rhs* G13370b G13371b*) (if (G11621valid-bound-ids? G13368lhs*) (G12116bless (cons (list 'letrec (list (list G13367f (cons 'lambda (cons G13368lhs* (cons G13370b G13371b*))))) G13367f) G13369rhs*)) (G12120invalid-fmls-error G13339stx G13368lhs*))) G13355ls/false) (G12423syntax-violation '#f '"invalid syntax" G13353t))) (G12190syntax-dispatch G13353t '(_ any #(each (any any)) any . each-any)))) G13341t))) (G12190syntax-dispatch G13341t '(_ #(each (any any)) any . each-any)))) G13339stx))) (set! G12124let-values-macro (lambda (G13377stx) ((lambda (G13380rename G13382rename*) (begin (set! G13380rename (lambda (G13478x G13479old* G13480new*) (begin (if (G11611id? G13478x) (void) (G12423syntax-violation '#f '"not an indentifier" G13377stx G13478x)) (if (G11625bound-id-member? G13478x G13479old*) (G12423syntax-violation '#f '"duplicate binding" G13377stx G13478x) (void)) ((lambda (G13484y) (values G13484y (cons G13478x G13479old*) (cons G13484y G13480new*))) (gensym (G12429syntax->datum G13478x)))))) (set! G13382rename* (lambda (G13460x* G13461old* G13462new*) (if (null? G13460x*) (values '() G13461old* G13462new*) (call-with-values (lambda () (G13380rename (car G13460x*) G13461old* G13462new*)) (lambda (G13466x G13467old* G13468new*) (call-with-values (lambda () (G13382rename* (cdr G13460x*) G13467old* G13468new*)) (lambda (G13472x* G13473old* G13474new*) (values (cons G13466x G13472x*) G13473old* G13474new*)))))))) ((lambda (G13383t) ((lambda (G13385ls/false) (if G13385ls/false (apply (lambda (G13387b G13388b*) (cons* (G12116bless 'let) '() G13387b G13388b*)) G13385ls/false) ((lambda (G13391t) ((lambda (G13393ls/false) (if G13393ls/false (apply (lambda (G13395lhs* G13396rhs* G13397b G13398b*) (G12116bless ((letrec ((G13403f (lambda (G13405lhs* G13406rhs* G13407old* G13408new*) (if (null? G13405lhs*) (cons 'let (cons (map list G13407old* G13408new*) (cons G13397b G13398b*))) ((lambda (G13413t) ((lambda (G13415ls/false) (if G13415ls/false (apply (lambda (G13417x*) (call-with-values (lambda () (G13382rename* G13417x* G13407old* G13408new*)) (lambda (G13422G13419LAMBDA G13423G13420LAMBDA G13424G13421LAMBDA) ((lambda (G13428new* G13429old* G13430y*) (list 'call-with-values (list 'lambda '() (car G13406rhs*)) (list 'lambda G13430y* (G13403f (cdr G13405lhs*) (cdr G13406rhs*) G13429old* G13428new*)))) G13424G13421LAMBDA G13423G13420LAMBDA G13422G13419LAMBDA)))) G13415ls/false) ((lambda (G13434t) ((lambda (G13436ls/false) (if G13436ls/false (apply (lambda (G13438x* G13439x) (call-with-values (lambda () (G13380rename G13439x G13407old* G13408new*)) (lambda (G13442y G13443old* G13444new*) (call-with-values (lambda () (G13382rename* G13438x* G13443old* G13444new*)) (lambda (G13448y* G13449old* G13450new*) (list 'call-with-values (list 'lambda '() (car G13406rhs*)) (list 'lambda (append G13448y* G13442y) (G13403f (cdr G13405lhs*) (cdr G13406rhs*) G13449old* G13450new*)))))))) G13436ls/false) ((lambda (G13454t) ((lambda (G13456ls/false) (if G13456ls/false (apply (lambda (G13458others) (G12423syntax-violation '#f '"malformed bindings" G13377stx G13458others)) G13456ls/false) (G12423syntax-violation '#f '"invalid syntax" G13454t))) (G12190syntax-dispatch G13454t 'any))) G13434t))) (G12190syntax-dispatch G13434t '#(each+ any () any)))) G13413t))) (G12190syntax-dispatch G13413t 'each-any))) (car G13405lhs*)))))) G13403f) G13395lhs* G13396rhs* '() '()))) G13393ls/false) (G12423syntax-violation '#f '"invalid syntax" G13391t))) (G12190syntax-dispatch G13391t '(_ #(each (any any)) any . each-any)))) G13383t))) (G12190syntax-dispatch G13383t '(_ () any . each-any)))) G13377stx))) '#f '#f))) (set! G12126let*-values-macro (lambda (G13486stx) ((lambda (G13489check) (begin (set! G13489check (lambda (G13536x*) (if (null? G13536x*) (void) ((lambda (G13538x) (begin (if (G11611id? G13538x) (void) (G12423syntax-violation '#f '"not an identifier" G13486stx G13538x)) (G13489check (cdr G13536x*)) (if (G11625bound-id-member? G13538x (cdr G13536x*)) (G12423syntax-violation '#f '"duplicate identifier" G13486stx G13538x) (void)))) (car G13536x*))))) ((lambda (G13490t) ((lambda (G13492ls/false) (if G13492ls/false (apply (lambda (G13494b G13495b*) (cons* (G12116bless 'let) '() G13494b G13495b*)) G13492ls/false) ((lambda (G13498t) ((lambda (G13500ls/false) (if G13500ls/false (apply (lambda (G13502lhs* G13503rhs* G13504b G13505b*) (G12116bless ((letrec ((G13510f (lambda (G13512lhs* G13513rhs*) (if (null? G13512lhs*) (cons 'begin (cons G13504b G13505b*)) ((lambda (G13516t) ((lambda (G13518ls/false) (if G13518ls/false (apply (lambda (G13520x*) (begin (G13489check G13520x*) (list 'call-with-values (list 'lambda '() (car G13513rhs*)) (list 'lambda G13520x* (G13510f (cdr G13512lhs*) (cdr G13513rhs*)))))) G13518ls/false) ((lambda (G13522t) ((lambda (G13524ls/false) (if G13524ls/false (apply (lambda (G13526x* G13527x) (begin (G13489check (cons G13527x G13526x*)) (list 'call-with-values (list 'lambda '() (car G13513rhs*)) (list 'lambda (append G13526x* G13527x) (G13510f (cdr G13512lhs*) (cdr G13513rhs*)))))) G13524ls/false) ((lambda (G13530t) ((lambda (G13532ls/false) (if G13532ls/false (apply (lambda (G13534others) (G12423syntax-violation '#f '"malformed bindings" G13486stx G13534others)) G13532ls/false) (G12423syntax-violation '#f '"invalid syntax" G13530t))) (G12190syntax-dispatch G13530t 'any))) G13522t))) (G12190syntax-dispatch G13522t '#(each+ any () any)))) G13516t))) (G12190syntax-dispatch G13516t 'each-any))) (car G13512lhs*)))))) G13510f) G13502lhs* G13503rhs*))) G13500ls/false) (G12423syntax-violation '#f '"invalid syntax" G13498t))) (G12190syntax-dispatch G13498t '(_ #(each (any any)) any . each-any)))) G13490t))) (G12190syntax-dispatch G13490t '(_ () any . each-any)))) G13486stx))) '#f))) (set! G12128trace-lambda-macro (lambda (G13540stx) ((lambda (G13542t) ((lambda (G13544ls/false) (if G13544ls/false (apply (lambda (G13546who G13547fmls G13548b G13549b*) (if (G11621valid-bound-ids? G13547fmls) (G12116bless (list 'make-traced-procedure (list 'quote G13546who) (cons 'lambda (cons G13547fmls (cons G13548b G13549b*))))) (G12120invalid-fmls-error G13540stx G13547fmls))) G13544ls/false) ((lambda (G13554t) ((lambda (G13556ls/false) (if G13556ls/false (apply (lambda (G13558who G13559fmls G13560last G13561b G13562b*) (if (G11621valid-bound-ids? (cons G13560last G13559fmls)) (G12116bless (list 'make-traced-procedure (list 'quote G13558who) (cons 'lambda (cons (append G13559fmls G13560last) (cons G13561b G13562b*))))) (G12120invalid-fmls-error G13540stx (append G13559fmls G13560last)))) G13556ls/false) (G12423syntax-violation '#f '"invalid syntax" G13554t))) (G12190syntax-dispatch G13554t '(_ any #(each+ any () any) any . each-any)))) G13542t))) (G12190syntax-dispatch G13542t '(_ any each-any any . each-any)))) G13540stx))) (set! G12130trace-define-macro (lambda (G13568stx) ((lambda (G13570t) ((lambda (G13572ls/false) (if G13572ls/false (apply (lambda (G13574who G13575fmls G13576b G13577b*) (if (G11621valid-bound-ids? G13575fmls) (G12116bless (list 'define G13574who (list 'make-traced-procedure (list 'quote G13574who) (cons 'lambda (cons G13575fmls (cons G13576b G13577b*)))))) (G12120invalid-fmls-error G13568stx G13575fmls))) G13572ls/false) ((lambda (G13582t) ((lambda (G13584ls/false) (if G13584ls/false (apply (lambda (G13586who G13587fmls G13588last G13589b G13590b*) (if (G11621valid-bound-ids? (cons G13588last G13587fmls)) (G12116bless (list 'define G13586who (list 'make-traced-procedure (list 'quote G13586who) (cons 'lambda (cons (append G13587fmls G13588last) (cons G13589b G13590b*)))))) (G12120invalid-fmls-error G13568stx (append G13587fmls G13588last)))) G13584ls/false) ((lambda (G13596t) ((lambda (G13598ls/false) (if G13598ls/false (apply (lambda (G13600who G13601expr) (if (G11611id? G13600who) (G12116bless (list 'define G13600who (list 'let (list (list 'v G13601expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G13600who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G12423syntax-violation '#f '"invalid name" G13568stx))) G13598ls/false) (G12423syntax-violation '#f '"invalid syntax" G13596t))) (G12190syntax-dispatch G13596t '(_ any any)))) G13582t))) (G12190syntax-dispatch G13582t '(_ (any . #(each+ any () any)) any . each-any)))) G13570t))) (G12190syntax-dispatch G13570t '(_ (any . each-any) any . each-any)))) G13568stx))) (set! G12132trace-define-syntax-macro (lambda (G13604stx) ((lambda (G13606t) ((lambda (G13608ls/false) (if G13608ls/false (apply (lambda (G13610who G13611expr) (if (G11611id? G13610who) (G12116bless (list 'define-syntax G13610who (list 'make-traced-macro (list 'quote G13610who) G13611expr))) (G12423syntax-violation '#f '"invalid name" G13604stx))) G13608ls/false) (G12423syntax-violation '#f '"invalid syntax" G13606t))) (G12190syntax-dispatch G13606t '(_ any any)))) G13604stx))) (set! G12134trace-let/rec-syntax (lambda (G13614who) (lambda (G13616stx) ((lambda (G13618t) ((lambda (G13620ls/false) (if G13620ls/false (apply (lambda (G13622lhs* G13623rhs* G13624b G13625b*) (if (G11621valid-bound-ids? G13622lhs*) ((lambda (G13630rhs*) (G12116bless (cons G13614who (cons (map list G13622lhs* G13630rhs*) (cons G13624b G13625b*))))) (map (lambda (G13632lhs G13633rhs) (list 'make-traced-macro (list 'quote G13632lhs) G13633rhs)) G13622lhs* G13623rhs*)) (G12120invalid-fmls-error G13616stx G13622lhs*))) G13620ls/false) (G12423syntax-violation '#f '"invalid syntax" G13618t))) (G12190syntax-dispatch G13618t '(_ #(each (any any)) any . each-any)))) G13616stx)))) (set! G12136trace-let-syntax-macro (G12134trace-let/rec-syntax 'let-syntax)) (set! G12138trace-letrec-syntax-macro (G12134trace-let/rec-syntax 'letrec-syntax)) (set! G12140guard-macro (lambda (G13636x) ((lambda (G13639gen-clauses) (begin (set! G13639gen-clauses (lambda (G13662con G13663outerk G13664clause*) ((lambda (G13669f G13671f*) (begin (set! G13669f (lambda (G13720x G13721k) ((lambda (G13724t) ((lambda (G13726ls/false) (if G13726ls/false (apply (lambda (G13728e G13729p) ((lambda (G13732t) (list 'let (list (list G13732t G13728e)) (list 'if G13732t (list G13729p G13732t) G13721k))) (gensym))) G13726ls/false) ((lambda (G13734t) ((lambda (G13736ls/false) (if G13736ls/false (apply (lambda (G13738e) ((lambda (G13740t) (list 'let (list (list G13740t G13738e)) (list 'if G13740t G13740t G13721k))) (gensym))) G13736ls/false) ((lambda (G13742t) ((lambda (G13744ls/false) (if G13744ls/false (apply (lambda (G13746e G13747v G13748v*) (list 'if G13746e (cons 'begin (cons G13747v G13748v*)) G13721k)) G13744ls/false) ((lambda (G13752t) ((lambda (G13754ls/false) (if G13754ls/false (apply (lambda () (G12423syntax-violation '#f '"invalid guard clause" G13720x)) G13754ls/false) (G12423syntax-violation '#f '"invalid syntax" G13752t))) (G12190syntax-dispatch G13752t '_))) G13742t))) (G12190syntax-dispatch G13742t '(any any . each-any)))) G13734t))) (G12190syntax-dispatch G13734t '(any)))) G13724t))) (G12190syntax-dispatch G13724t '(any #(scheme-id =>) any)))) G13720x))) (set! G13671f* (lambda (G13682x*) ((lambda (G13684t) ((lambda (G13686ls/false) (if G13686ls/false (apply (lambda () (values (list 'raise G13662con) '#t)) G13686ls/false) ((lambda (G13688t) ((lambda (G13690ls/false) (if G13690ls/false (apply (lambda (G13692e G13693e*) (values (cons 'begin (cons G13692e G13693e*)) '#f)) G13690ls/false) ((lambda (G13696t) ((lambda (G13698ls/false) (if G13698ls/false (apply (lambda (G13700cls G13701cls*) (call-with-values (lambda () (G13671f* G13701cls*)) (lambda (G13706G13704LAMBDA G13707G13705LAMBDA) ((lambda (G13710g G13711e) (values (G13669f G13700cls G13711e) G13710g)) G13707G13705LAMBDA G13706G13704LAMBDA)))) G13698ls/false) ((lambda (G13714t) ((lambda (G13716ls/false) (if G13716ls/false (apply (lambda (G13718others) (G12423syntax-violation '#f '"invalid guard clause" G13718others)) G13716ls/false) (G12423syntax-violation '#f '"invalid syntax" G13714t))) (G12190syntax-dispatch G13714t 'any))) G13696t))) (G12190syntax-dispatch G13696t '(any . any)))) G13688t))) (G12190syntax-dispatch G13688t '((#(scheme-id else) any . each-any))))) G13684t))) (G12190syntax-dispatch G13684t '()))) G13682x*))) (call-with-values (lambda () (G13671f* G13664clause*)) (lambda (G13674G13672LAMBDA G13675G13673LAMBDA) ((lambda (G13678raisek G13679code) (if G13678raisek (list G13663outerk G13679code) G13679code)) G13675G13673LAMBDA G13674G13672LAMBDA))))) '#f '#f))) ((lambda (G13640t) ((lambda (G13642ls/false) (if (if G13642ls/false (begin '#f (apply (lambda (G13644con G13645clause* G13646b G13647b*) (G11611id? G13644con)) G13642ls/false)) '#f) (apply (lambda (G13652con G13653clause* G13654b G13655b*) ((lambda (G13660outerk) (G12116bless (list 'call/cc (list 'lambda (list G13660outerk) (list 'with-exception-handler (list 'lambda (list G13652con) (G13639gen-clauses G13652con G13660outerk G13653clause*)) (cons 'lambda (cons '() (cons '#f (cons G13654b G13655b*))))))))) (gensym))) G13642ls/false) (G12423syntax-violation '#f '"invalid syntax" G13640t))) (G12190syntax-dispatch G13640t '(_ (any . each-any) any . each-any)))) G13636x))) '#f))) (set! G12142define-enumeration-macro (lambda (G13756stx) ((lambda (G13759set? G13761remove-dups) (begin (set! G13759set? (lambda (G13784x) ((lambda (G13786t) (if G13786t G13786t (begin '#f (if (not (memq (car G13784x) (cdr G13784x))) (begin '#f (G13759set? (cdr G13784x))) '#f)))) (null? G13784x)))) (set! G13761remove-dups (lambda (G13782ls) (if (null? G13782ls) '() (cons (car G13782ls) (G13761remove-dups (remq (car G13782ls) (cdr G13782ls))))))) ((lambda (G13762t) ((lambda (G13764ls/false) (if (if G13764ls/false (begin '#f (apply (lambda (G13766name G13767id* G13768maker) (if (G11611id? G13766name) (if (G11611id? G13768maker) (begin '#f (for-all G11611id? G13767id*)) '#f) '#f)) G13764ls/false)) '#f) (apply (lambda (G13772name G13773id* G13774maker) ((lambda (G13778name* G13779mk) (G12116bless (list 'begin (list 'define G13779mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G13778name*)))) (list 'define-syntax G13772name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G13778name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G13772name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G13774maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G13774maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G13778name*)) (cons 'syntax-violation (cons (list 'quote G13774maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G13779mk '('(n* ...)))))))))))) (G13761remove-dups (G12429syntax->datum G13773id*)) (gensym))) G13764ls/false) (G12423syntax-violation '#f '"invalid syntax" G13762t))) (G12190syntax-dispatch G13762t '(_ any each-any any)))) G13756stx))) '#f '#f))) (set! G12144time-macro (lambda (G13788stx) ((lambda (G13790t) ((lambda (G13792ls/false) (if G13792ls/false (apply (lambda (G13794expr) ((lambda (G13796str) (G12116bless (list 'time-it G13796str (list 'lambda '() G13794expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G13800G13798LAMBDA G13801G13799LAMBDA) ((lambda (G13804e G13805p) (begin (write (G12429syntax->datum G13794expr) G13805p) (G13804e))) G13801G13799LAMBDA G13800G13798LAMBDA))))) G13792ls/false) (G12423syntax-violation '#f '"invalid syntax" G13790t))) (G12190syntax-dispatch G13790t '(_ any)))) G13788stx))) (set! G12146delay-macro (lambda (G13808stx) ((lambda (G13810t) ((lambda (G13812ls/false) (if G13812ls/false (apply (lambda (G13814expr) (G12116bless (list 'make-promise (list 'lambda '() G13814expr)))) G13812ls/false) (G12423syntax-violation '#f '"invalid syntax" G13810t))) (G12190syntax-dispatch G13810t '(_ any)))) G13808stx))) (set! G12148assert-macro (lambda (G13816stx) ((lambda (G13818t) ((lambda (G13820ls/false) (if G13820ls/false (apply (lambda (G13822expr) (G12116bless (list 'unless G13822expr (list 'assertion-violation ''assert '"assertion failed" (list 'quote G13822expr))))) G13820ls/false) (G12423syntax-violation '#f '"invalid syntax" G13818t))) (G12190syntax-dispatch G13818t '(_ any)))) G13816stx))) (set! G12150endianness-macro (lambda (G13824stx) ((lambda (G13826t) ((lambda (G13828ls/false) (if G13828ls/false (apply (lambda (G13830e) ((lambda (G13832t) (if (eqv? G13832t 'little) (G12116bless ''little) (if (eqv? G13832t 'big) (G12116bless ''big) (G12423syntax-violation '#f '"endianness must be big or little" G13824stx)))) (G12429syntax->datum G13830e))) G13828ls/false) (G12423syntax-violation '#f '"invalid syntax" G13826t))) (G12190syntax-dispatch G13826t '(_ any)))) G13824stx))) (set! G12152identifier-syntax-macro (lambda (G13833stx) ((lambda (G13835t) ((lambda (G13837ls/false) (if G13837ls/false (apply (lambda (G13839expr) (G12116bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G13839expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G13839expr) '((syntax (e* ...)))))))))) G13837ls/false) ((lambda (G13841t) ((lambda (G13843ls/false) (if (if G13843ls/false (begin '#f (apply (lambda (G13845id1 G13846expr1 G13847id2 G13848expr2 G13849expr3) (if (G11611id? G13845id1) (if (G11611id? G13847id2) (begin '#f (G11611id? G13848expr2)) '#f) '#f)) G13843ls/false)) '#f) (apply (lambda (G13855id1 G13856expr1 G13857id2 G13858expr2 G13859expr3) (G12116bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G13856expr1)) (list (list 'set! 'id G13858expr2) (list 'syntax G13859expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G13856expr1 '(e* ...))))))))) G13843ls/false) (G12423syntax-violation '#f '"invalid syntax" G13841t))) (G12190syntax-dispatch G13841t '(_ (any any) ((#(scheme-id set!) any any) any))))) G13835t))) (G12190syntax-dispatch G13835t '(_ any)))) G13833stx))) (set! G12154do-macro (lambda (G13865stx) ((lambda (G13868bind) (begin (set! G13868bind (lambda (G13891x) ((lambda (G13893t) ((lambda (G13895ls/false) (if G13895ls/false (apply (lambda (G13897x G13898init) (list G13897x G13898init G13897x)) G13895ls/false) ((lambda (G13901t) ((lambda (G13903ls/false) (if G13903ls/false (apply (lambda (G13905x G13906init G13907step) (list G13905x G13906init G13907step)) G13903ls/false) ((lambda (G13911t) ((lambda (G13913ls/false) (if G13913ls/false (apply (lambda () (G12423syntax-violation '#f '"invalid binding" G13865stx)) G13913ls/false) (G12423syntax-violation '#f '"invalid syntax" G13911t))) (G12190syntax-dispatch G13911t '_))) G13901t))) (G12190syntax-dispatch G13901t '(any any any)))) G13893t))) (G12190syntax-dispatch G13893t '(any any)))) G13891x))) ((lambda (G13869t) ((lambda (G13871ls/false) (if G13871ls/false (apply (lambda (G13873binding* G13874test G13875expr* G13876command*) ((lambda (G13881t) ((lambda (G13883ls/false) (if G13883ls/false (apply (lambda (G13885x* G13886init* G13887step*) (if (G11621valid-bound-ids? G13885x*) (G12116bless (list 'letrec (list (list 'loop (list 'lambda G13885x* (list 'if G13874test (cons 'begin (cons '(if #f #f) G13875expr*)) (cons 'begin (append G13876command* (list (cons 'loop G13887step*)))))))) (cons 'loop G13886init*))) (G12423syntax-violation '#f '"invalid bindings" G13865stx))) G13883ls/false) (G12423syntax-violation '#f '"invalid syntax" G13881t))) (G12190syntax-dispatch G13881t '#(each (any any any))))) (map G13868bind G13873binding*))) G13871ls/false) (G12423syntax-violation '#f '"invalid syntax" G13869t))) (G12190syntax-dispatch G13869t '(_ each-any (any . each-any) . each-any)))) G13865stx))) '#f))) (set! G12156let*-macro (lambda (G13915stx) ((lambda (G13917t) ((lambda (G13919ls/false) (if (if G13919ls/false (begin '#f (apply (lambda (G13921lhs* G13922rhs* G13923b G13924b*) (for-all G11611id? G13921lhs*)) G13919ls/false)) '#f) (apply (lambda (G13929lhs* G13930rhs* G13931b G13932b*) (G12116bless ((letrec ((G13937f (lambda (G13939x*) (if (null? G13939x*) (cons 'let (cons '() (cons G13931b G13932b*))) (list 'let (list (car G13939x*)) (G13937f (cdr G13939x*))))))) G13937f) (map list G13929lhs* G13930rhs*)))) G13919ls/false) (G12423syntax-violation '#f '"invalid syntax" G13917t))) (G12190syntax-dispatch G13917t '(_ #(each (any any)) any . each-any)))) G13915stx))) (set! G12158or-macro (lambda (G13941stx) ((lambda (G13943t) ((lambda (G13945ls/false) (if G13945ls/false (apply (lambda () '#f) G13945ls/false) ((lambda (G13947t) ((lambda (G13949ls/false) (if G13949ls/false (apply (lambda (G13951e G13952e*) (G12116bless ((letrec ((G13955f (lambda (G13957e G13958e*) (if (null? G13958e*) (list 'begin '#f G13957e) (list 'let (list (list 't G13957e)) (list 'if 't 't (G13955f (car G13958e*) (cdr G13958e*)))))))) G13955f) G13951e G13952e*))) G13949ls/false) (G12423syntax-violation '#f '"invalid syntax" G13947t))) (G12190syntax-dispatch G13947t '(_ any . each-any)))) G13943t))) (G12190syntax-dispatch G13943t '(_)))) G13941stx))) (set! G12160and-macro (lambda (G13961stx) ((lambda (G13963t) ((lambda (G13965ls/false) (if G13965ls/false (apply (lambda () '#t) G13965ls/false) ((lambda (G13967t) ((lambda (G13969ls/false) (if G13969ls/false (apply (lambda (G13971e G13972e*) (G12116bless ((letrec ((G13975f (lambda (G13977e G13978e*) (if (null? G13978e*) (list 'begin '#f G13977e) (cons 'if (cons G13977e (cons (G13975f (car G13978e*) (cdr G13978e*)) '(#f)))))))) G13975f) G13971e G13972e*))) G13969ls/false) (G12423syntax-violation '#f '"invalid syntax" G13967t))) (G12190syntax-dispatch G13967t '(_ any . each-any)))) G13963t))) (G12190syntax-dispatch G13963t '(_)))) G13961stx))) (set! G12162cond-macro (lambda (G13981stx) ((lambda (G13983t) ((lambda (G13985ls/false) (if G13985ls/false (apply (lambda (G13987cls G13988cls*) (G12116bless ((letrec ((G13991f (lambda (G13993cls G13994cls*) (if (null? G13994cls*) ((lambda (G13997t) ((lambda (G13999ls/false) (if G13999ls/false (apply (lambda (G14001e G14002e*) (cons 'begin (cons G14001e G14002e*))) G13999ls/false) ((lambda (G14005t) ((lambda (G14007ls/false) (if G14007ls/false (apply (lambda (G14009e G14010p) (list 'let (list (list 't G14009e)) (list 'if 't (cons G14010p '(t))))) G14007ls/false) ((lambda (G14013t) ((lambda (G14015ls/false) (if G14015ls/false (apply (lambda (G14017e) (cons 'or (cons G14017e '((if #f #f))))) G14015ls/false) ((lambda (G14019t) ((lambda (G14021ls/false) (if G14021ls/false (apply (lambda (G14023e G14024e*) (list 'if G14023e (cons 'begin G14024e*))) G14021ls/false) ((lambda (G14027t) ((lambda (G14029ls/false) (if G14029ls/false (apply (lambda () (G12423syntax-violation '#f '"invalid last clause" G13981stx)) G14029ls/false) (G12423syntax-violation '#f '"invalid syntax" G14027t))) (G12190syntax-dispatch G14027t '_))) G14019t))) (G12190syntax-dispatch G14019t '(any . each-any)))) G14013t))) (G12190syntax-dispatch G14013t '(any)))) G14005t))) (G12190syntax-dispatch G14005t '(any #(scheme-id =>) any)))) G13997t))) (G12190syntax-dispatch G13997t '(#(scheme-id else) any . each-any)))) G13993cls) ((lambda (G14031t) ((lambda (G14033ls/false) (if G14033ls/false (apply (lambda (G14035e G14036e*) (G12423syntax-violation '#f '"incorrect position of keyword else" G13981stx)) G14033ls/false) ((lambda (G14039t) ((lambda (G14041ls/false) (if G14041ls/false (apply (lambda (G14043e G14044p) (list 'let (list (list 't G14043e)) (list 'if 't (cons G14044p '(t)) (G13991f (car G13994cls*) (cdr G13994cls*))))) G14041ls/false) ((lambda (G14047t) ((lambda (G14049ls/false) (if G14049ls/false (apply (lambda (G14051e) (list 'or G14051e (G13991f (car G13994cls*) (cdr G13994cls*)))) G14049ls/false) ((lambda (G14053t) ((lambda (G14055ls/false) (if G14055ls/false (apply (lambda (G14057e G14058e*) (list 'if G14057e (cons 'begin G14058e*) (G13991f (car G13994cls*) (cdr G13994cls*)))) G14055ls/false) ((lambda (G14061t) ((lambda (G14063ls/false) (if G14063ls/false (apply (lambda () (G12423syntax-violation '#f '"invalid last clause" G13981stx)) G14063ls/false) (G12423syntax-violation '#f '"invalid syntax" G14061t))) (G12190syntax-dispatch G14061t '_))) G14053t))) (G12190syntax-dispatch G14053t '(any . each-any)))) G14047t))) (G12190syntax-dispatch G14047t '(any)))) G14039t))) (G12190syntax-dispatch G14039t '(any #(scheme-id =>) any)))) G14031t))) (G12190syntax-dispatch G14031t '(#(scheme-id else) any . each-any)))) G13993cls))))) G13991f) G13987cls G13988cls*))) G13985ls/false) (G12423syntax-violation '#f '"invalid syntax" G13983t))) (G12190syntax-dispatch G13983t '(_ any . each-any)))) G13981stx))) (set! G12164do-include (lambda (G14065stx G14066id G14067filename) ((lambda (G14071filename) (begin (if (if (string? G14071filename) (begin '#f (G11611id? G14066id)) '#f) (void) (G12423syntax-violation '#f '"invalid syntax" G14065stx)) (cons (G12116bless 'begin) (with-input-from-file G14071filename (lambda () ((letrec ((G14073f (lambda (G14075ls) ((lambda (G14077x) (if (eof-object? G14077x) (reverse G14075ls) (G14073f (cons (G11577datum->stx G14066id G14077x) G14075ls)))) (G10428G10213read-annotated))))) G14073f) '())))))) (G11633stx->datum G14067filename)))) (set! G12166include-macro (lambda (G14079e) ((lambda (G14081t) ((lambda (G14083ls/false) (if G14083ls/false (apply (lambda (G14085id G14086filename) (G12164do-include G14079e G14085id G14086filename)) G14083ls/false) (G12423syntax-violation '#f '"invalid syntax" G14081t))) (G12190syntax-dispatch G14081t '(any any)))) G14079e))) (set! G12168include-into-macro (lambda (G14089e) ((lambda (G14091t) ((lambda (G14093ls/false) (if G14093ls/false (apply (lambda (G14095id G14096filename) (G12164do-include G14089e G14095id G14096filename)) G14093ls/false) (G12423syntax-violation '#f '"invalid syntax" G14091t))) (G12190syntax-dispatch G14091t '(_ any any)))) G14089e))) (set! G12170syntax-rules-macro (lambda (G14099e) ((lambda (G14101t) ((lambda (G14103ls/false) (if G14103ls/false (apply (lambda (G14105lits G14106pat* G14107tmp*) (begin (G12196verify-literals G14105lits G14099e) (G12116bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G14105lits (map (lambda (G14111pat G14112tmp) ((lambda (G14115t) ((lambda (G14117ls/false) (if G14117ls/false (apply (lambda (G14119rest) (list (cons 'g G14119rest) (list 'syntax G14112tmp))) G14117ls/false) ((lambda (G14121t) ((lambda (G14123ls/false) (if G14123ls/false (apply (lambda () (G12423syntax-violation '#f '"invalid syntax-rules pattern" G14099e G14111pat)) G14123ls/false) (G12423syntax-violation '#f '"invalid syntax" G14121t))) (G12190syntax-dispatch G14121t '_))) G14115t))) (G12190syntax-dispatch G14115t '(_ . any)))) G14111pat)) G14106pat* G14107tmp*)))))))) G14103ls/false) (G12423syntax-violation '#f '"invalid syntax" G14101t))) (G12190syntax-dispatch G14101t '(_ each-any . #(each (any any)))))) G14099e))) (set! G12172quasiquote-macro ((lambda () ((lambda (G14126datum G14167quasicons* G14169quasicons G14171quasiappend G14173quasivector G14175vquasi G14177quasi) (begin (set! G14126datum (lambda (G14396x) (list (G12076scheme-stx 'quote) (G11587mkstx G14396x '() '() '())))) (set! G14167quasicons* (lambda (G14388x G14389y) ((letrec ((G14392f (lambda (G14394x) (if (null? G14394x) G14389y (G14169quasicons (car G14394x) (G14392f (cdr G14394x))))))) G14392f) G14388x))) (set! G14169quasicons (lambda (G14350x G14351y) ((lambda (G14354t) ((lambda (G14356ls/false) (if G14356ls/false (apply (lambda (G14358dy) ((lambda (G14360t) ((lambda (G14362ls/false) (if G14362ls/false (apply (lambda (G14364dx) (list (G12076scheme-stx 'quote) (cons G14364dx G14358dy))) G14362ls/false) ((lambda (G14366t) ((lambda (G14368ls/false) (if G14368ls/false (apply (lambda () ((lambda (G14370t) ((lambda (G14372ls/false) (if G14372ls/false (apply (lambda () (list (G12076scheme-stx 'list) G14350x)) G14372ls/false) ((lambda (G14374t) ((lambda (G14376ls/false) (if G14376ls/false (apply (lambda () (list (G12076scheme-stx 'cons) G14350x G14351y)) G14376ls/false) (G12423syntax-violation '#f '"invalid syntax" G14374t))) (G12190syntax-dispatch G14374t '_))) G14370t))) (G12190syntax-dispatch G14370t '()))) G14358dy)) G14368ls/false) (G12423syntax-violation '#f '"invalid syntax" G14366t))) (G12190syntax-dispatch G14366t '_))) G14360t))) (G12190syntax-dispatch G14360t '(#(scheme-id quote) any)))) G14350x)) G14356ls/false) ((lambda (G14378t) ((lambda (G14380ls/false) (if G14380ls/false (apply (lambda (G14382stuff) (cons* (G12076scheme-stx 'list) G14350x G14382stuff)) G14380ls/false) ((lambda (G14384t) ((lambda (G14386ls/false) (if G14386ls/false (apply (lambda () (list (G12076scheme-stx 'cons) G14350x G14351y)) G14386ls/false) (G12423syntax-violation '#f '"invalid syntax" G14384t))) (G12190syntax-dispatch G14384t '_))) G14378t))) (G12190syntax-dispatch G14378t '(#(scheme-id list) . each-any)))) G14354t))) (G12190syntax-dispatch G14354t '(#(scheme-id quote) any)))) G14351y))) (set! G14171quasiappend (lambda (G14324x G14325y) ((lambda (G14328ls) (if (null? G14328ls) (list (G12076scheme-stx 'quote) '()) (if (null? (cdr G14328ls)) (car G14328ls) (cons* (G12076scheme-stx 'append) G14328ls)))) ((letrec ((G14330f (lambda (G14332x) (if (null? G14332x) ((lambda (G14334t) ((lambda (G14336ls/false) (if G14336ls/false (apply (lambda () '()) G14336ls/false) ((lambda (G14338t) ((lambda (G14340ls/false) (if G14340ls/false (apply (lambda () (list G14325y)) G14340ls/false) (G12423syntax-violation '#f '"invalid syntax" G14338t))) (G12190syntax-dispatch G14338t '_))) G14334t))) (G12190syntax-dispatch G14334t '(#(scheme-id quote) ())))) G14325y) ((lambda (G14342t) ((lambda (G14344ls/false) (if G14344ls/false (apply (lambda () (G14330f (cdr G14332x))) G14344ls/false) ((lambda (G14346t) ((lambda (G14348ls/false) (if G14348ls/false (apply (lambda () (cons (car G14332x) (G14330f (cdr G14332x)))) G14348ls/false) (G12423syntax-violation '#f '"invalid syntax" G14346t))) (G12190syntax-dispatch G14346t '_))) G14342t))) (G12190syntax-dispatch G14342t '(#(scheme-id quote) ())))) (car G14332x)))))) G14330f) G14324x)))) (set! G14173quasivector (lambda (G14274x) ((lambda (G14276pat-x) ((lambda (G14278t) ((lambda (G14280ls/false) (if G14280ls/false (apply (lambda (G14282x*) (list (G12076scheme-stx 'quote) (list->vector G14282x*))) G14280ls/false) ((lambda (G14284t) ((lambda (G14286ls/false) (if G14286ls/false (apply (lambda () ((letrec ((G14288f (lambda (G14290x G14291k) ((lambda (G14294t) ((lambda (G14296ls/false) (if G14296ls/false (apply (lambda (G14298x*) (G14291k (map (lambda (G14300x) (list (G12076scheme-stx 'quote) G14300x)) G14298x*))) G14296ls/false) ((lambda (G14302t) ((lambda (G14304ls/false) (if G14304ls/false (apply (lambda (G14306x*) (G14291k G14306x*)) G14304ls/false) ((lambda (G14308t) ((lambda (G14310ls/false) (if G14310ls/false (apply (lambda (G14312x G14313y) (G14288f G14313y (lambda (G14316ls) (G14291k (cons G14312x G14316ls))))) G14310ls/false) ((lambda (G14318t) ((lambda (G14320ls/false) (if G14320ls/false (apply (lambda () (list (G12076scheme-stx 'list->vector) G14276pat-x)) G14320ls/false) (G12423syntax-violation '#f '"invalid syntax" G14318t))) (G12190syntax-dispatch G14318t '_))) G14308t))) (G12190syntax-dispatch G14308t '(#(scheme-id cons) any any)))) G14302t))) (G12190syntax-dispatch G14302t '(#(scheme-id list) . each-any)))) G14294t))) (G12190syntax-dispatch G14294t '(#(scheme-id quote) each-any)))) G14290x)))) G14288f) G14274x (lambda (G14322ls) (cons* (G12076scheme-stx 'vector) G14322ls)))) G14286ls/false) (G12423syntax-violation '#f '"invalid syntax" G14284t))) (G12190syntax-dispatch G14284t '_))) G14278t))) (G12190syntax-dispatch G14278t '(#(scheme-id quote) each-any)))) G14276pat-x)) G14274x))) (set! G14175vquasi (lambda (G14240p G14241lev) ((lambda (G14244t) ((lambda (G14246ls/false) (if G14246ls/false (apply (lambda (G14248p G14249q) ((lambda (G14252t) ((lambda (G14254ls/false) (if G14254ls/false (apply (lambda (G14256p) (if (= G14241lev '0) (G14167quasicons* G14256p (G14175vquasi G14249q G14241lev)) (G14169quasicons (G14169quasicons (G14126datum 'unquote) (G14177quasi G14256p (- G14241lev '1))) (G14175vquasi G14249q G14241lev)))) G14254ls/false) ((lambda (G14258t) ((lambda (G14260ls/false) (if G14260ls/false (apply (lambda (G14262p) (if (= G14241lev '0) (G14171quasiappend G14262p (G14175vquasi G14249q G14241lev)) (G14169quasicons (G14169quasicons (G14126datum 'unquote-splicing) (G14177quasi G14262p (- G14241lev '1))) (G14175vquasi G14249q G14241lev)))) G14260ls/false) ((lambda (G14264t) ((lambda (G14266ls/false) (if G14266ls/false (apply (lambda (G14268p) (G14169quasicons (G14177quasi G14268p G14241lev) (G14175vquasi G14249q G14241lev))) G14266ls/false) (G12423syntax-violation '#f '"invalid syntax" G14264t))) (G12190syntax-dispatch G14264t 'any))) G14258t))) (G12190syntax-dispatch G14258t '(#(scheme-id unquote-splicing) . each-any)))) G14252t))) (G12190syntax-dispatch G14252t '(#(scheme-id unquote) . each-any)))) G14248p)) G14246ls/false) ((lambda (G14270t) ((lambda (G14272ls/false) (if G14272ls/false (apply (lambda () (list (G12076scheme-stx 'quote) '())) G14272ls/false) (G12423syntax-violation '#f '"invalid syntax" G14270t))) (G12190syntax-dispatch G14270t '()))) G14244t))) (G12190syntax-dispatch G14244t '(any . any)))) G14240p))) (set! G14177quasi (lambda (G14186p G14187lev) ((lambda (G14190t) ((lambda (G14192ls/false) (if G14192ls/false (apply (lambda (G14194p) (if (= G14187lev '0) G14194p (G14169quasicons (G14126datum 'unquote) (G14177quasi (list G14194p) (- G14187lev '1))))) G14192ls/false) ((lambda (G14196t) ((lambda (G14198ls/false) (if G14198ls/false (apply (lambda (G14200p G14201q) (if (= G14187lev '0) (G14167quasicons* G14200p (G14177quasi G14201q G14187lev)) (G14169quasicons (G14169quasicons (G14126datum 'unquote) (G14177quasi G14200p (- G14187lev '1))) (G14177quasi G14201q G14187lev)))) G14198ls/false) ((lambda (G14204t) ((lambda (G14206ls/false) (if G14206ls/false (apply (lambda (G14208p G14209q) (if (= G14187lev '0) (G14171quasiappend G14208p (G14177quasi G14209q G14187lev)) (G14169quasicons (G14169quasicons (G14126datum 'unquote-splicing) (G14177quasi G14208p (- G14187lev '1))) (G14177quasi G14209q G14187lev)))) G14206ls/false) ((lambda (G14212t) ((lambda (G14214ls/false) (if G14214ls/false (apply (lambda (G14216p) (G14169quasicons (G14126datum 'quasiquote) (G14177quasi (list G14216p) (+ G14187lev '1)))) G14214ls/false) ((lambda (G14218t) ((lambda (G14220ls/false) (if G14220ls/false (apply (lambda (G14222p G14223q) (G14169quasicons (G14177quasi G14222p G14187lev) (G14177quasi G14223q G14187lev))) G14220ls/false) ((lambda (G14226t) ((lambda (G14228ls/false) (if (if G14228ls/false (begin '#f (apply (lambda (G14230x) (not (G11555stx? G14230x))) G14228ls/false)) '#f) (apply (lambda (G14232x) (G14173quasivector (G14175vquasi G14232x G14187lev))) G14228ls/false) ((lambda (G14234t) ((lambda (G14236ls/false) (if G14236ls/false (apply (lambda (G14238p) (list (G12076scheme-stx 'quote) G14238p)) G14236ls/false) (G12423syntax-violation '#f '"invalid syntax" G14234t))) (G12190syntax-dispatch G14234t 'any))) G14226t))) (G12190syntax-dispatch G14226t '#(vector each-any)))) G14218t))) (G12190syntax-dispatch G14218t '(any . any)))) G14212t))) (G12190syntax-dispatch G14212t '(#(scheme-id quasiquote) any)))) G14204t))) (G12190syntax-dispatch G14204t '((#(scheme-id unquote-splicing) . each-any) . any)))) G14196t))) (G12190syntax-dispatch G14196t '((#(scheme-id unquote) . each-any) . any)))) G14190t))) (G12190syntax-dispatch G14190t '(#(scheme-id unquote) any)))) G14186p))) (lambda (G14178x) ((lambda (G14180t) ((lambda (G14182ls/false) (if G14182ls/false (apply (lambda (G14184e) (G14177quasi G14184e '0)) G14182ls/false) (G12423syntax-violation '#f '"invalid syntax" G14180t))) (G12190syntax-dispatch G14180t '(_ any)))) G14178x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G12174quasisyntax-macro ((lambda () ((lambda (G14399quasi) (begin (set! G14399quasi (lambda (G14423p G14424lev) ((lambda (G14427t) ((lambda (G14429ls/false) (if G14429ls/false (apply (lambda (G14431p) (if (= G14424lev '0) ((lambda (G14433g) (values (list G14433g) (list G14431p) G14433g)) (gensym)) (call-with-values (lambda () (G14399quasi G14431p (- G14424lev '1))) (lambda (G14438G14435LAMBDA G14439G14436LAMBDA G14440G14437LAMBDA) ((lambda (G14444p G14445rhs* G14446lhs*) (values G14446lhs* G14445rhs* (list 'unsyntax G14444p))) G14440G14437LAMBDA G14439G14436LAMBDA G14438G14435LAMBDA))))) G14429ls/false) ((lambda (G14450t) ((lambda (G14452ls/false) (if (if G14452ls/false (begin '#f (apply (lambda () (= G14424lev '0)) G14452ls/false)) '#f) (apply (lambda () (G12423syntax-violation '#f '"incorrect use of unsyntax" G14423p)) G14452ls/false) ((lambda (G14454t) ((lambda (G14456ls/false) (if G14456ls/false (apply (lambda (G14458p G14459q) (call-with-values (lambda () (G14399quasi G14459q G14424lev)) (lambda (G14465G14462LAMBDA G14466G14463LAMBDA G14467G14464LAMBDA) ((lambda (G14471q G14472rhs* G14473lhs*) (if (= G14424lev '0) ((lambda (G14477g) (values (cons (cons G14477g '(...)) G14473lhs*) (cons G14458p G14472rhs*) (cons G14477g (cons '... G14471q)))) (gensym)) (call-with-values (lambda () (G14399quasi G14458p (- G14424lev '1))) (lambda (G14482G14479LAMBDA G14483G14480LAMBDA G14484G14481LAMBDA) ((lambda (G14488p G14489rhs2* G14490lhs2*) (values (append G14490lhs2* G14473lhs*) (append G14489rhs2* G14472rhs*) (cons (list 'unsyntax-splicing G14488p) G14471q))) G14484G14481LAMBDA G14483G14480LAMBDA G14482G14479LAMBDA))))) G14467G14464LAMBDA G14466G14463LAMBDA G14465G14462LAMBDA)))) G14456ls/false) ((lambda (G14494t) ((lambda (G14496ls/false) (if (if G14496ls/false (begin '#f (apply (lambda () (= G14424lev '0)) G14496ls/false)) '#f) (apply (lambda () (G12423syntax-violation '#f '"incorrect use of unsyntax-splicing" G14423p)) G14496ls/false) ((lambda (G14498t) ((lambda (G14500ls/false) (if G14500ls/false (apply (lambda (G14502p) (call-with-values (lambda () (G14399quasi G14502p (+ G14424lev '1))) (lambda (G14507G14504LAMBDA G14508G14505LAMBDA G14509G14506LAMBDA) ((lambda (G14513p G14514rhs* G14515lhs*) (values G14515lhs* G14514rhs* (list 'quasisyntax G14513p))) G14509G14506LAMBDA G14508G14505LAMBDA G14507G14504LAMBDA)))) G14500ls/false) ((lambda (G14519t) ((lambda (G14521ls/false) (if G14521ls/false (apply (lambda (G14523p G14524q) (call-with-values (lambda () (G14399quasi G14523p G14424lev)) (lambda (G14533G14527LAMBDA G14534G14528LAMBDA G14535G14529LAMBDA) (call-with-values (lambda () (G14399quasi G14524q G14424lev)) (lambda (G14539G14530LAMBDA G14540G14531LAMBDA G14541G14532LAMBDA) ((lambda (G14545q G14546rhs2* G14547lhs2* G14548p G14549rhs* G14550lhs*) (values (append G14547lhs2* G14550lhs*) (append G14546rhs2* G14549rhs*) (cons G14548p G14545q))) G14541G14532LAMBDA G14540G14531LAMBDA G14539G14530LAMBDA G14535G14529LAMBDA G14534G14528LAMBDA G14533G14527LAMBDA)))))) G14521ls/false) ((lambda (G14557t) ((lambda (G14559ls/false) (if (if G14559ls/false (begin '#f (apply (lambda (G14561x) (not (G11555stx? G14423p))) G14559ls/false)) '#f) (apply (lambda (G14563x) (call-with-values (lambda () ((letrec ((G14568f (lambda (G14570x) (if (null? G14570x) (values '() '() '()) (call-with-values (lambda () (G14399quasi (car G14570x) G14424lev)) (lambda (G14575G14572LAMBDA G14576G14573LAMBDA G14577G14574LAMBDA) ((lambda (G14581a G14582rhs* G14583lhs*) (call-with-values (lambda () (G14568f (cdr G14570x))) (lambda (G14590G14587LAMBDA G14591G14588LAMBDA G14592G14589LAMBDA) ((lambda (G14596d G14597rhs2* G14598lhs2*) (values (append G14583lhs* G14598lhs2*) (append G14582rhs* G14597rhs2*) (cons G14581a G14596d))) G14592G14589LAMBDA G14591G14588LAMBDA G14590G14587LAMBDA)))) G14577G14574LAMBDA G14576G14573LAMBDA G14575G14572LAMBDA))))))) G14568f) G14563x)) (lambda (G14602G14565LAMBDA G14603G14566LAMBDA G14604G14567LAMBDA) ((lambda (G14608x* G14609rhs* G14610lhs*) (values G14610lhs* G14609rhs* (list->vector G14608x*))) G14604G14567LAMBDA G14603G14566LAMBDA G14602G14565LAMBDA)))) G14559ls/false) ((lambda (G14614t) ((lambda (G14616ls/false) (if G14616ls/false (apply (lambda () (values '() '() G14423p)) G14616ls/false) (G12423syntax-violation '#f '"invalid syntax" G14614t))) (G12190syntax-dispatch G14614t '_))) G14557t))) (G12190syntax-dispatch G14557t '#(vector each-any)))) G14519t))) (G12190syntax-dispatch G14519t '(any . any)))) G14498t))) (G12190syntax-dispatch G14498t '(#(scheme-id quasisyntax) any)))) G14494t))) (G12190syntax-dispatch G14494t '#(scheme-id unsyntax-splicing)))) G14454t))) (G12190syntax-dispatch G14454t '((#(scheme-id unsyntax-splicing) any) . any)))) G14450t))) (G12190syntax-dispatch G14450t '#(scheme-id unsyntax)))) G14427t))) (G12190syntax-dispatch G14427t '(#(scheme-id unsyntax) any)))) G14423p))) (lambda (G14400x) ((lambda (G14402t) ((lambda (G14404ls/false) (if G14404ls/false (apply (lambda (G14406e) (call-with-values (lambda () (G14399quasi G14406e '0)) (lambda (G14411G14408LAMBDA G14412G14409LAMBDA G14413G14410LAMBDA) ((lambda (G14417v G14418rhs* G14419lhs*) (G12116bless (list 'syntax-case (cons 'list G14418rhs*) '() (list G14419lhs* (list 'syntax G14417v))))) G14413G14410LAMBDA G14412G14409LAMBDA G14411G14408LAMBDA)))) G14404ls/false) (G12423syntax-violation '#f '"invalid syntax" G14402t))) (G12190syntax-dispatch G14402t '(_ any)))) G14400x)))) '#f)))) (set! G12176define-struct-macro (lambda (G14618stx) (G12423syntax-violation '#f '"define-struct not supported" G14618stx))) (set! G12178define-record-type-macro (lambda (G14620x) ((lambda (G14623id G14625get-record-name G14627get-record-constructor-name G14629get-record-predicate-name G14631get-clause G14633foo-rtd-code G14635parent-rtd-code G14637parent-rcd-code G14639foo-rcd-code G14641get-protocol-code G14643get-fields G14645get-mutator-indices G14647get-mutators G14649get-accessors G14651enumerate G14653do-define-record G14655verify-clauses) (begin (set! G14623id (lambda (G15126ctxt . G15128str*) (G12427datum->syntax G15126ctxt (string->symbol (apply string-append (map (lambda (G15130x) (if (symbol? G15130x) (symbol->string G15130x) (if (string? G15130x) G15130x (assertion-violation 'define-record-type '"BUG")))) G15128str*)))))) (set! G14625get-record-name (lambda (G15108spec) ((lambda (G15110t) ((lambda (G15112ls/false) (if G15112ls/false (apply (lambda (G15114foo G15115make-foo G15116foo?) G15114foo) G15112ls/false) ((lambda (G15120t) ((lambda (G15122ls/false) (if G15122ls/false (apply (lambda (G15124foo) G15124foo) G15122ls/false) (G12423syntax-violation '#f '"invalid syntax" G15120t))) (G12190syntax-dispatch G15120t 'any))) G15110t))) (G12190syntax-dispatch G15110t '(any any any)))) G15108spec))) (set! G14627get-record-constructor-name (lambda (G15088spec) ((lambda (G15090t) ((lambda (G15092ls/false) (if G15092ls/false (apply (lambda (G15094foo G15095make-foo G15096foo?) G15095make-foo) G15092ls/false) ((lambda (G15100t) ((lambda (G15102ls/false) (if (if G15102ls/false (begin '#f (apply (lambda (G15104foo) (G11611id? G15104foo)) G15102ls/false)) '#f) (apply (lambda (G15106foo) (G14623id G15106foo '"make-" (G11633stx->datum G15106foo))) G15102ls/false) (G12423syntax-violation '#f '"invalid syntax" G15100t))) (G12190syntax-dispatch G15100t 'any))) G15090t))) (G12190syntax-dispatch G15090t '(any any any)))) G15088spec))) (set! G14629get-record-predicate-name (lambda (G15068spec) ((lambda (G15070t) ((lambda (G15072ls/false) (if G15072ls/false (apply (lambda (G15074foo G15075make-foo G15076foo?) G15076foo?) G15072ls/false) ((lambda (G15080t) ((lambda (G15082ls/false) (if (if G15082ls/false (begin '#f (apply (lambda (G15084foo) (G11611id? G15084foo)) G15082ls/false)) '#f) (apply (lambda (G15086foo) (G14623id G15086foo (G11633stx->datum G15086foo) '"?")) G15082ls/false) (G12423syntax-violation '#f '"invalid syntax" G15080t))) (G12190syntax-dispatch G15080t 'any))) G15070t))) (G12190syntax-dispatch G15070t '(any any any)))) G15068spec))) (set! G14631get-clause (lambda (G15050id G15051ls) ((lambda (G15054t) ((lambda (G15056ls/false) (if G15056ls/false (apply (lambda () '#f) G15056ls/false) ((lambda (G15058t) ((lambda (G15060ls/false) (if G15060ls/false (apply (lambda (G15062x G15063rest G15064ls) (if (G11619free-id=? (G12116bless G15050id) G15062x) (cons G15062x G15063rest) (G14631get-clause G15050id G15064ls))) G15060ls/false) (G12423syntax-violation '#f '"invalid syntax" G15058t))) (G12190syntax-dispatch G15058t '((any . any) . any)))) G15054t))) (G12190syntax-dispatch G15054t '()))) G15051ls))) (set! G14633foo-rtd-code (lambda (G14968name G14969clause* G14970parent-rtd-code) ((lambda (G14975convert-field-spec*) (begin (set! G14975convert-field-spec* (lambda (G15024ls) (list->vector (map (lambda (G15026x) ((lambda (G15028t) ((lambda (G15030ls/false) (if G15030ls/false (apply (lambda (G15032name G15033rest) (list 'mutable G15032name)) G15030ls/false) ((lambda (G15036t) ((lambda (G15038ls/false) (if G15038ls/false (apply (lambda (G15040name G15041rest) (list 'immutable G15040name)) G15038ls/false) ((lambda (G15044t) ((lambda (G15046ls/false) (if G15046ls/false (apply (lambda (G15048name) (list 'immutable G15048name)) G15046ls/false) (G12423syntax-violation '#f '"invalid syntax" G15044t))) (G12190syntax-dispatch G15044t 'any))) G15036t))) (G12190syntax-dispatch G15036t '(#(scheme-id immutable) any . any)))) G15028t))) (G12190syntax-dispatch G15028t '(#(scheme-id mutable) any . any)))) G15026x)) G15024ls)))) ((lambda (G14976uid-code G14977sealed? G14978opaque? G14979fields) (G12116bless (list 'make-record-type-descriptor (list 'quote G14968name) G14970parent-rtd-code G14976uid-code G14977sealed? G14978opaque? G14979fields))) ((lambda (G14984t) ((lambda (G14986ls/false) (if G14986ls/false (apply (lambda () (list 'quote (gensym))) G14986ls/false) ((lambda (G14988t) ((lambda (G14990ls/false) (if G14990ls/false (apply (lambda (G14992uid) (list 'quote G14992uid)) G14990ls/false) ((lambda (G14994t) ((lambda (G14996ls/false) (if G14996ls/false (apply (lambda () '#f) G14996ls/false) (G12423syntax-violation '#f '"invalid syntax" G14994t))) (G12190syntax-dispatch G14994t '_))) G14988t))) (G12190syntax-dispatch G14988t '(_ any)))) G14984t))) (G12190syntax-dispatch G14984t '(_)))) (G14631get-clause 'nongenerative G14969clause*)) ((lambda (G14998t) ((lambda (G15000ls/false) (if G15000ls/false (apply (lambda () '#t) G15000ls/false) ((lambda (G15002t) ((lambda (G15004ls/false) (if G15004ls/false (apply (lambda () '#f) G15004ls/false) (G12423syntax-violation '#f '"invalid syntax" G15002t))) (G12190syntax-dispatch G15002t '_))) G14998t))) (G12190syntax-dispatch G14998t '(_ #(atom #t))))) (G14631get-clause 'sealed G14969clause*)) ((lambda (G15006t) ((lambda (G15008ls/false) (if G15008ls/false (apply (lambda () '#t) G15008ls/false) ((lambda (G15010t) ((lambda (G15012ls/false) (if G15012ls/false (apply (lambda () '#f) G15012ls/false) (G12423syntax-violation '#f '"invalid syntax" G15010t))) (G12190syntax-dispatch G15010t '_))) G15006t))) (G12190syntax-dispatch G15006t '(_ #(atom #t))))) (G14631get-clause 'opaque G14969clause*)) ((lambda (G15014t) ((lambda (G15016ls/false) (if G15016ls/false (apply (lambda (G15018field-spec*) (list 'quote (G14975convert-field-spec* G15018field-spec*))) G15016ls/false) ((lambda (G15020t) ((lambda (G15022ls/false) (if G15022ls/false (apply (lambda () ''#()) G15022ls/false) (G12423syntax-violation '#f '"invalid syntax" G15020t))) (G12190syntax-dispatch G15020t '_))) G15014t))) (G12190syntax-dispatch G15014t '(_ . each-any)))) (G14631get-clause 'fields G14969clause*))))) '#f))) (set! G14635parent-rtd-code (lambda (G14944clause*) ((lambda (G14946t) ((lambda (G14948ls/false) (if G14948ls/false (apply (lambda (G14950name) (list 'record-type-descriptor G14950name)) G14948ls/false) ((lambda (G14952t) ((lambda (G14954ls/false) (if G14954ls/false (apply (lambda () ((lambda (G14956t) ((lambda (G14958ls/false) (if G14958ls/false (apply (lambda (G14960rtd G14961rcd) G14960rtd) G14958ls/false) ((lambda (G14964t) ((lambda (G14966ls/false) (if G14966ls/false (apply (lambda () '#f) G14966ls/false) (G12423syntax-violation '#f '"invalid syntax" G14964t))) (G12190syntax-dispatch G14964t '#(atom #f)))) G14956t))) (G12190syntax-dispatch G14956t '(_ any any)))) (G14631get-clause 'parent-rtd G14944clause*))) G14954ls/false) (G12423syntax-violation '#f '"invalid syntax" G14952t))) (G12190syntax-dispatch G14952t '#(atom #f)))) G14946t))) (G12190syntax-dispatch G14946t '(_ any)))) (G14631get-clause 'parent G14944clause*)))) (set! G14637parent-rcd-code (lambda (G14920clause*) ((lambda (G14922t) ((lambda (G14924ls/false) (if G14924ls/false (apply (lambda (G14926name) (list 'record-constructor-descriptor G14926name)) G14924ls/false) ((lambda (G14928t) ((lambda (G14930ls/false) (if G14930ls/false (apply (lambda () ((lambda (G14932t) ((lambda (G14934ls/false) (if G14934ls/false (apply (lambda (G14936rtd G14937rcd) G14937rcd) G14934ls/false) ((lambda (G14940t) ((lambda (G14942ls/false) (if G14942ls/false (apply (lambda () '#f) G14942ls/false) (G12423syntax-violation '#f '"invalid syntax" G14940t))) (G12190syntax-dispatch G14940t '#(atom #f)))) G14932t))) (G12190syntax-dispatch G14932t '(_ any any)))) (G14631get-clause 'parent-rtd G14920clause*))) G14930ls/false) (G12423syntax-violation '#f '"invalid syntax" G14928t))) (G12190syntax-dispatch G14928t '#(atom #f)))) G14922t))) (G12190syntax-dispatch G14922t '(_ any)))) (G14631get-clause 'parent G14920clause*)))) (set! G14639foo-rcd-code (lambda (G14912clause* G14913foo-rtd G14914protocol G14915parent-rcd-code) (list 'make-record-constructor-descriptor G14913foo-rtd G14915parent-rcd-code G14914protocol))) (set! G14641get-protocol-code (lambda (G14900clause*) ((lambda (G14902t) ((lambda (G14904ls/false) (if G14904ls/false (apply (lambda (G14906expr) G14906expr) G14904ls/false) ((lambda (G14908t) ((lambda (G14910ls/false) (if G14910ls/false (apply (lambda () '#f) G14910ls/false) (G12423syntax-violation '#f '"invalid syntax" G14908t))) (G12190syntax-dispatch G14908t '_))) G14902t))) (G12190syntax-dispatch G14902t '(_ any)))) (G14631get-clause 'protocol G14900clause*)))) (set! G14643get-fields (lambda (G14882clause*) ((lambda (G14884t) ((lambda (G14886ls/false) (if G14886ls/false (apply (lambda () '()) G14886ls/false) ((lambda (G14888t) ((lambda (G14890ls/false) (if G14890ls/false (apply (lambda (G14892f*) G14892f*) G14890ls/false) ((lambda (G14894t) ((lambda (G14896ls/false) (if G14896ls/false (apply (lambda (G14898rest) (G14643get-fields G14898rest)) G14896ls/false) (G12423syntax-violation '#f '"invalid syntax" G14894t))) (G12190syntax-dispatch G14894t '(_ . any)))) G14888t))) (G12190syntax-dispatch G14888t '((#(scheme-id fields) . each-any) . _)))) G14884t))) (G12190syntax-dispatch G14884t '()))) G14882clause*))) (set! G14645get-mutator-indices (lambda (G14858fields) ((letrec ((G14860f (lambda (G14862fields G14863i) ((lambda (G14866t) ((lambda (G14868ls/false) (if G14868ls/false (apply (lambda () '()) G14868ls/false) ((lambda (G14870t) ((lambda (G14872ls/false) (if G14872ls/false (apply (lambda (G14874rest) (cons G14863i (G14860f G14874rest (+ G14863i '1)))) G14872ls/false) ((lambda (G14876t) ((lambda (G14878ls/false) (if G14878ls/false (apply (lambda (G14880rest) (G14860f G14880rest (+ G14863i '1))) G14878ls/false) (G12423syntax-violation '#f '"invalid syntax" G14876t))) (G12190syntax-dispatch G14876t '(_ . any)))) G14870t))) (G12190syntax-dispatch G14870t '((#(scheme-id mutable) . _) . any)))) G14866t))) (G12190syntax-dispatch G14866t '()))) G14862fields)))) G14860f) G14858fields '0))) (set! G14647get-mutators (lambda (G14816foo G14817fields) ((lambda (G14821gen-name) (begin (set! G14821gen-name (lambda (G14856x) (G12427datum->syntax G14816foo (string->symbol (string-append (symbol->string (G12429syntax->datum G14816foo)) '"-" (symbol->string (G12429syntax->datum G14856x)) '"-set!"))))) ((letrec ((G14822f (lambda (G14824fields) ((lambda (G14826t) ((lambda (G14828ls/false) (if G14828ls/false (apply (lambda () '()) G14828ls/false) ((lambda (G14830t) ((lambda (G14832ls/false) (if G14832ls/false (apply (lambda (G14834name G14835accessor G14836mutator G14837rest) (cons G14836mutator (G14822f G14837rest))) G14832ls/false) ((lambda (G14842t) ((lambda (G14844ls/false) (if G14844ls/false (apply (lambda (G14846name G14847rest) (cons (G14821gen-name G14846name) (G14822f G14847rest))) G14844ls/false) ((lambda (G14850t) ((lambda (G14852ls/false) (if G14852ls/false (apply (lambda (G14854rest) (G14822f G14854rest)) G14852ls/false) (G12423syntax-violation '#f '"invalid syntax" G14850t))) (G12190syntax-dispatch G14850t '(_ . any)))) G14842t))) (G12190syntax-dispatch G14842t '((#(scheme-id mutable) any) . any)))) G14830t))) (G12190syntax-dispatch G14830t '((#(scheme-id mutable) any any any) . any)))) G14826t))) (G12190syntax-dispatch G14826t '()))) G14824fields)))) G14822f) G14817fields))) '#f))) (set! G14649get-accessors (lambda (G14748foo G14749fields) ((lambda (G14753gen-name) (begin (set! G14753gen-name (lambda (G14814x) (G12427datum->syntax G14748foo (string->symbol (string-append (symbol->string (G12429syntax->datum G14748foo)) '"-" (symbol->string (G12429syntax->datum G14814x))))))) (map (lambda (G14754field) ((lambda (G14756t) ((lambda (G14758ls/false) (if (if G14758ls/false (begin '#f (apply (lambda (G14760name G14761accessor G14762mutator) (G11611id? G14761accessor)) G14758ls/false)) '#f) (apply (lambda (G14766name G14767accessor G14768mutator) G14767accessor) G14758ls/false) ((lambda (G14772t) ((lambda (G14774ls/false) (if (if G14774ls/false (begin '#f (apply (lambda (G14776name G14777accessor) (G11611id? G14777accessor)) G14774ls/false)) '#f) (apply (lambda (G14780name G14781accessor) G14781accessor) G14774ls/false) ((lambda (G14784t) ((lambda (G14786ls/false) (if (if G14786ls/false (begin '#f (apply (lambda (G14788name) (G11611id? G14788name)) G14786ls/false)) '#f) (apply (lambda (G14790name) (G14753gen-name G14790name)) G14786ls/false) ((lambda (G14792t) ((lambda (G14794ls/false) (if (if G14794ls/false (begin '#f (apply (lambda (G14796name) (G11611id? G14796name)) G14794ls/false)) '#f) (apply (lambda (G14798name) (G14753gen-name G14798name)) G14794ls/false) ((lambda (G14800t) ((lambda (G14802ls/false) (if (if G14802ls/false (begin '#f (apply (lambda (G14804name) (G11611id? G14804name)) G14802ls/false)) '#f) (apply (lambda (G14806name) (G14753gen-name G14806name)) G14802ls/false) ((lambda (G14808t) ((lambda (G14810ls/false) (if G14810ls/false (apply (lambda (G14812others) (G12423syntax-violation '#f '"invalid field spec" G14754field)) G14810ls/false) (G12423syntax-violation '#f '"invalid syntax" G14808t))) (G12190syntax-dispatch G14808t 'any))) G14800t))) (G12190syntax-dispatch G14800t 'any))) G14792t))) (G12190syntax-dispatch G14792t '(#(scheme-id immutable) any)))) G14784t))) (G12190syntax-dispatch G14784t '(#(scheme-id mutable) any)))) G14772t))) (G12190syntax-dispatch G14772t '(#(scheme-id immutable) any any)))) G14756t))) (G12190syntax-dispatch G14756t '(#(scheme-id mutable) any any any)))) G14754field)) G14749fields))) '#f))) (set! G14651enumerate (lambda (G14740ls) ((letrec ((G14742f (lambda (G14744ls G14745i) (if (null? G14744ls) '() (cons G14745i (G14742f (cdr G14744ls) (+ G14745i '1))))))) G14742f) G14740ls '0))) (set! G14653do-define-record (lambda (G14700namespec G14701clause*) ((lambda (G14704foo) ((lambda (G14706foo-rtd) ((lambda (G14708foo-rcd) ((lambda (G14710protocol) ((lambda (G14712make-foo) ((lambda (G14714fields) ((lambda (G14716idx*) ((lambda (G14718foo-x*) ((lambda (G14720set-foo-x!*) ((lambda (G14722set-foo-idx*) ((lambda (G14724foo?) ((lambda (G14726foo-rtd-code) ((lambda (G14728foo-rcd-code) ((lambda (G14730protocol-code) ((lambda () (G12116bless (cons 'begin (cons (list 'define G14706foo-rtd G14726foo-rtd-code) (cons (list 'define G14710protocol G14730protocol-code) (cons (list 'define G14708foo-rcd G14728foo-rcd-code) (cons (list 'define-syntax G14704foo (list 'list ''$rtd (list 'syntax G14706foo-rtd) (list 'syntax G14708foo-rcd))) (cons (list 'define G14724foo? (list 'record-predicate G14706foo-rtd)) (cons (list 'define G14712make-foo (list 'record-constructor G14708foo-rcd)) (append (map (lambda (G14732foo-x G14733idx) (list 'define G14732foo-x (list 'record-accessor G14706foo-rtd G14733idx))) G14718foo-x* G14716idx*) (map (lambda (G14736set-foo-x! G14737idx) (list 'define G14736set-foo-x! (list 'record-mutator G14706foo-rtd G14737idx))) G14720set-foo-x!* G14722set-foo-idx*))))))))))))) (G14641get-protocol-code G14701clause*))) (G14639foo-rcd-code G14701clause* G14706foo-rtd G14710protocol (G14637parent-rcd-code G14701clause*)))) (G14633foo-rtd-code G14704foo G14701clause* (G14635parent-rtd-code G14701clause*)))) (G14629get-record-predicate-name G14700namespec))) (G14645get-mutator-indices G14714fields))) (G14647get-mutators G14704foo G14714fields))) (G14649get-accessors G14704foo G14714fields))) (G14651enumerate G14714fields))) (G14643get-fields G14701clause*))) (G14627get-record-constructor-name G14700namespec))) (gensym))) (gensym))) (gensym))) (G14625get-record-name G14700namespec)))) (set! G14655verify-clauses (lambda (G14664x G14665cls*) ((lambda (G14669valid-kwds G14671free-id-member?) (begin (set! G14669valid-kwds (map G12116bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G14671free-id-member? (lambda (G14694x G14695ls) (if (pair? G14695ls) (begin '#f ((lambda (G14698t) (if G14698t G14698t (begin '#f (G14671free-id-member? G14694x (cdr G14695ls))))) (G11619free-id=? G14694x (car G14695ls)))) '#f))) ((letrec ((G14672f (lambda (G14674cls* G14675seen*) (if (null? G14674cls*) (void) ((lambda (G14678t) ((lambda (G14680ls/false) (if G14680ls/false (apply (lambda (G14682kwd G14683rest) (if ((lambda (G14686t) (if G14686t G14686t (begin '#f (not (G14671free-id-member? G14682kwd G14669valid-kwds))))) (not (G11611id? G14682kwd))) (G12423syntax-violation '#f '"not a valid define-record-type keyword" G14682kwd) (if (G11625bound-id-member? G14682kwd G14675seen*) (G12423syntax-violation '#f '"duplicate use of keyword " G14664x G14682kwd) (G14672f (cdr G14674cls*) (cons G14682kwd G14675seen*))))) G14680ls/false) ((lambda (G14688t) ((lambda (G14690ls/false) (if G14690ls/false (apply (lambda (G14692cls) (G12423syntax-violation '#f '"malformed define-record-type clause" G14692cls)) G14690ls/false) (G12423syntax-violation '#f '"invalid syntax" G14688t))) (G12190syntax-dispatch G14688t 'any))) G14678t))) (G12190syntax-dispatch G14678t '(any . any)))) (car G14674cls*)))))) G14672f) G14665cls* '()))) '#f '#f))) ((lambda (G14656t) ((lambda (G14658ls/false) (if G14658ls/false (apply (lambda (G14660namespec G14661clause*) (begin (G14655verify-clauses G14620x G14661clause*) (G14653do-define-record G14660namespec G14661clause*))) G14658ls/false) (G12423syntax-violation '#f '"invalid syntax" G14656t))) (G12190syntax-dispatch G14656t '(_ any . each-any)))) G14620x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12180define-condition-type-macro (lambda (G15132x) ((lambda (G15135mkname) (begin (set! G15135mkname (lambda (G15180name G15181suffix) (G12427datum->syntax G15180name (string->symbol (string-append (symbol->string (G12429syntax->datum G15180name)) G15181suffix))))) ((lambda (G15136t) ((lambda (G15138ls/false) (if (if G15138ls/false (begin '#f (apply (lambda (G15140ctxt G15141name G15142super G15143constructor G15144predicate G15145field* G15146accessor*) (if (G11611id? G15141name) (if (G11611id? G15142super) (if (G11611id? G15143constructor) (if (G11611id? G15144predicate) (if (for-all G11611id? G15145field*) (begin '#f (for-all G11611id? G15146accessor*)) '#f) '#f) '#f) '#f) '#f)) G15138ls/false)) '#f) (apply (lambda (G15154ctxt G15155name G15156super G15157constructor G15158predicate G15159field* G15160accessor*) ((lambda (G15168aux-accessor*) (G12116bless (cons 'begin (cons (cons 'define-record-type (cons (list G15155name G15157constructor (gensym)) (cons (list 'parent G15156super) (cons (cons 'fields (map (lambda (G15170field G15171aux) (list 'immutable G15170field G15171aux)) G15159field* G15168aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G15158predicate (list 'condition-predicate (list 'record-type-descriptor G15155name))) (map (lambda (G15174accessor G15175aux) (list 'define G15174accessor (list 'condition-accessor (list 'record-type-descriptor G15155name) G15175aux))) G15160accessor* G15168aux-accessor*)))))) (map (lambda (G15178x) (gensym)) G15160accessor*))) G15138ls/false) (G12423syntax-violation '#f '"invalid syntax" G15136t))) (G12190syntax-dispatch G15136t '(any any any any any . #(each (any any)))))) G15132x))) '#f))) (set! G12182incorrect-usage-macro (lambda (G15184e) (G12423syntax-violation '#f '"incorrect usage of auxiliary keyword" G15184e))) (set! G12184parameterize-transformer (lambda (G15186e G15187r G15188mr) ((lambda (G15192t) ((lambda (G15194ls/false) (if G15194ls/false (apply (lambda (G15196b G15197b*) (G12248chi-internal (cons G15196b G15197b*) G15187r G15188mr)) G15194ls/false) ((lambda (G15200t) ((lambda (G15202ls/false) (if G15202ls/false (apply (lambda (G15204olhs* G15205orhs* G15206b G15207b*) ((lambda (G15212lhs* G15213rhs* G15214t* G15215swap) (G11456G11252build-let '#f (append G15212lhs* G15213rhs*) (append (G12222chi-expr* G15204olhs* G15187r G15188mr) (G12222chi-expr* G15205orhs* G15187r G15188mr)) (G11456G11252build-let '#f (list G15215swap) (list (G11454G11248build-lambda '#f '() (G11457G11324build-sequence '#f (map (lambda (G15220t G15221lhs G15222rhs) (G11456G11252build-let '#f (list G15220t) (list (list G15221lhs)) (G11457G11324build-sequence '#f (list (list G15221lhs G15222rhs) (list 'set! G15222rhs G15220t))))) G15214t* G15212lhs* G15213rhs*)))) (list '(primitive dynamic-wind) G15215swap (G11454G11248build-lambda '#f '() (G12248chi-internal (cons G15206b G15207b*) G15187r G15188mr)) G15215swap)))) (map (lambda (G15226x) (G11485gen-lexical 'lhs)) G15204olhs*) (map (lambda (G15228x) (G11485gen-lexical 'rhs)) G15204olhs*) (map (lambda (G15230x) (G11485gen-lexical 't)) G15204olhs*) (G11485gen-lexical 'swap))) G15202ls/false) (G12423syntax-violation '#f '"invalid syntax" G15200t))) (G12190syntax-dispatch G15200t '(_ #(each (any any)) any . each-any)))) G15192t))) (G12190syntax-dispatch G15192t '(_ () any . each-any)))) G15186e))) (set! G12186foreign-call-transformer (lambda (G15232e G15233r G15234mr) ((lambda (G15238t) ((lambda (G15240ls/false) (if G15240ls/false (apply (lambda (G15242name G15243arg*) (cons 'foreign-call (cons (G12226chi-expr G15242name G15233r G15234mr) (G12222chi-expr* G15243arg* G15233r G15234mr)))) G15240ls/false) (G12423syntax-violation '#f '"invalid syntax" G15238t))) (G12190syntax-dispatch G15238t '(_ any . each-any)))) G15232e))) (set! G12188convert-pattern (lambda (G15246pattern G15247keys) ((lambda (G15251cvt* G15253cvt) (begin (set! G15251cvt* (lambda (G15396p* G15397n G15398ids) (if (null? G15396p*) (values '() G15398ids) (call-with-values (lambda () (G15251cvt* (cdr G15396p*) G15397n G15398ids)) (lambda (G15404G15402LAMBDA G15405G15403LAMBDA) ((lambda (G15408ids G15409y) (call-with-values (lambda () (G15253cvt (car G15396p*) G15397n G15408ids)) (lambda (G15414G15412LAMBDA G15415G15413LAMBDA) ((lambda (G15418ids G15419x) (values (cons G15419x G15409y) G15418ids)) G15415G15413LAMBDA G15414G15412LAMBDA)))) G15405G15403LAMBDA G15404G15402LAMBDA)))))) (set! G15253cvt (lambda (G15254p G15255n G15256ids) ((lambda (G15260t) ((lambda (G15262ls/false) (if (if G15262ls/false (begin '#f (apply (lambda (G15264id) (G11611id? G15264id)) G15262ls/false)) '#f) (apply (lambda (G15266id) (if (G11625bound-id-member? G15254p G15247keys) (values (vector 'free-id G15254p) G15256ids) (if (G11619free-id=? G15254p (G12076scheme-stx '_)) (values '_ G15256ids) (values 'any (cons (cons G15254p G15255n) G15256ids))))) G15262ls/false) ((lambda (G15268t) ((lambda (G15270ls/false) (if (if G15270ls/false (begin '#f (apply (lambda (G15272p G15273dots) (G12192ellipsis? G15273dots)) G15270ls/false)) '#f) (apply (lambda (G15276p G15277dots) (call-with-values (lambda () (G15253cvt G15276p (+ G15255n '1) G15256ids)) (lambda (G15282G15280LAMBDA G15283G15281LAMBDA) ((lambda (G15286ids G15287p) (values (if (eq? G15287p 'any) 'each-any (vector 'each G15287p)) G15286ids)) G15283G15281LAMBDA G15282G15280LAMBDA)))) G15270ls/false) ((lambda (G15290t) ((lambda (G15292ls/false) (if (if G15292ls/false (begin '#f (apply (lambda (G15294x G15295dots G15296ys G15297z) (G12192ellipsis? G15295dots)) G15292ls/false)) '#f) (apply (lambda (G15302x G15303dots G15304ys G15305z) (call-with-values (lambda () (G15253cvt G15305z G15255n G15256ids)) (lambda (G15312G15310LAMBDA G15313G15311LAMBDA) ((lambda (G15316ids G15317z) (call-with-values (lambda () (G15251cvt* G15304ys G15255n G15316ids)) (lambda (G15322G15320LAMBDA G15323G15321LAMBDA) ((lambda (G15326ids G15327ys) (call-with-values (lambda () (G15253cvt G15302x (+ G15255n '1) G15326ids)) (lambda (G15332G15330LAMBDA G15333G15331LAMBDA) ((lambda (G15336ids G15337x) (values (vector 'each+ G15337x (reverse G15327ys) G15317z) G15336ids)) G15333G15331LAMBDA G15332G15330LAMBDA)))) G15323G15321LAMBDA G15322G15320LAMBDA)))) G15313G15311LAMBDA G15312G15310LAMBDA)))) G15292ls/false) ((lambda (G15340t) ((lambda (G15342ls/false) (if G15342ls/false (apply (lambda (G15344x G15345y) (call-with-values (lambda () (G15253cvt G15345y G15255n G15256ids)) (lambda (G15350G15348LAMBDA G15351G15349LAMBDA) ((lambda (G15354ids G15355y) (call-with-values (lambda () (G15253cvt G15344x G15255n G15354ids)) (lambda (G15360G15358LAMBDA G15361G15359LAMBDA) ((lambda (G15364ids G15365x) (values (cons G15365x G15355y) G15364ids)) G15361G15359LAMBDA G15360G15358LAMBDA)))) G15351G15349LAMBDA G15350G15348LAMBDA)))) G15342ls/false) ((lambda (G15368t) ((lambda (G15370ls/false) (if G15370ls/false (apply (lambda () (values '() G15256ids)) G15370ls/false) ((lambda (G15372t) ((lambda (G15374ls/false) (if (if G15374ls/false (begin '#f (apply (lambda (G15376p) (not (G11555stx? G15376p))) G15374ls/false)) '#f) (apply (lambda (G15378p) (call-with-values (lambda () (G15253cvt G15378p G15255n G15256ids)) (lambda (G15382G15380LAMBDA G15383G15381LAMBDA) ((lambda (G15386ids G15387p) (values (vector 'vector G15387p) G15386ids)) G15383G15381LAMBDA G15382G15380LAMBDA)))) G15374ls/false) ((lambda (G15390t) ((lambda (G15392ls/false) (if G15392ls/false (apply (lambda (G15394datum) (values (vector 'atom (G11633stx->datum G15394datum)) G15256ids)) G15392ls/false) (G12423syntax-violation '#f '"invalid syntax" G15390t))) (G12190syntax-dispatch G15390t 'any))) G15372t))) (G12190syntax-dispatch G15372t '#(vector each-any)))) G15368t))) (G12190syntax-dispatch G15368t '()))) G15340t))) (G12190syntax-dispatch G15340t '(any . any)))) G15290t))) (G12190syntax-dispatch G15290t '(any any . #(each+ any () any))))) G15268t))) (G12190syntax-dispatch G15268t '(any any)))) G15260t))) (G12190syntax-dispatch G15260t 'any))) G15254p))) (G15253cvt G15246pattern '0 '()))) '#f '#f))) (set! G12190syntax-dispatch (lambda (G15422e G15423p) ((lambda (G15427stx^ G15429match-each G15431match-each+ G15433match-each-any G15435match-empty G15437combine G15439match* G15441match) (begin (set! G15427stx^ (lambda (G15622e G15623m* G15624s* G15625ae*) (if (if (null? G15623m*) (if (null? G15624s*) (begin '#f (null? G15625ae*)) '#f) '#f) G15622e (G11587mkstx G15622e G15623m* G15624s* G15625ae*)))) (set! G15429match-each (lambda (G15593e G15594p G15595m* G15596s* G15597ae*) (if (pair? G15593e) ((lambda (G15603first) (if G15603first (begin '#f ((lambda (G15605rest) (if G15605rest (begin '#f (cons G15603first G15605rest)) '#f)) (G15429match-each (cdr G15593e) G15594p G15595m* G15596s* G15597ae*))) '#f)) (G15441match (car G15593e) G15594p G15595m* G15596s* G15597ae* '())) (if (null? G15593e) '() (if (G11555stx? G15593e) (if (not (G11483top-marked? G15595m*)) (begin '#f (call-with-values (lambda () (G11585join-wraps G15595m* G15596s* G15597ae* G15593e)) (lambda (G15610G15607LAMBDA G15611G15608LAMBDA G15612G15609LAMBDA) ((lambda (G15616ae* G15617s* G15618m*) (G15429match-each (G11559stx-expr G15593e) G15594p G15618m* G15617s* G15616ae*)) G15612G15609LAMBDA G15611G15608LAMBDA G15610G15607LAMBDA)))) '#f) (if (G10430G10217annotation? G15593e) (G15429match-each (G10432G10221annotation-expression G15593e) G15594p G15595m* G15596s* G15597ae*) '#f)))))) (set! G15431match-each+ (lambda (G15535e G15536x-pat G15537y-pat G15538z-pat G15539m* G15540s* G15541ae* G15542r) ((letrec ((G15551f (lambda (G15553e G15554m* G15555s* G15556ae*) (if (pair? G15553e) (call-with-values (lambda () (G15551f (cdr G15553e) G15554m* G15555s* G15556ae*)) (lambda (G15564G15561LAMBDA G15565G15562LAMBDA G15566G15563LAMBDA) ((lambda (G15570r G15571y-pat G15572xr*) (if G15570r (if (null? G15571y-pat) ((lambda (G15576xr) (if G15576xr (values (cons G15576xr G15572xr*) G15571y-pat G15570r) (values '#f '#f '#f))) (G15441match (car G15553e) G15536x-pat G15554m* G15555s* G15556ae* '())) (values '() (cdr G15571y-pat) (G15441match (car G15553e) (car G15571y-pat) G15554m* G15555s* G15556ae* G15570r))) (values '#f '#f '#f))) G15566G15563LAMBDA G15565G15562LAMBDA G15564G15561LAMBDA))) (if (G11555stx? G15553e) (if (G11483top-marked? G15554m*) (values '() G15537y-pat (G15441match G15553e G15538z-pat G15554m* G15555s* G15556ae* G15542r)) (call-with-values (lambda () (G11585join-wraps G15554m* G15555s* G15556ae* G15553e)) (lambda (G15581G15578LAMBDA G15582G15579LAMBDA G15583G15580LAMBDA) ((lambda (G15587ae* G15588s* G15589m*) (G15551f (G11559stx-expr G15553e) G15589m* G15588s* G15587ae*)) G15583G15580LAMBDA G15582G15579LAMBDA G15581G15578LAMBDA)))) (if (G10430G10217annotation? G15553e) (G15551f (G10432G10221annotation-expression G15553e) G15554m* G15555s* G15556ae*) (values '() G15537y-pat (G15441match G15553e G15538z-pat G15554m* G15555s* G15556ae* G15542r)))))))) G15551f) G15535e G15539m* G15540s* G15541ae*))) (set! G15433match-each-any (lambda (G15510e G15511m* G15512s* G15513ae*) (if (pair? G15510e) ((lambda (G15518l) (if G15518l (begin '#f (cons (G15427stx^ (car G15510e) G15511m* G15512s* G15513ae*) G15518l)) '#f)) (G15433match-each-any (cdr G15510e) G15511m* G15512s* G15513ae*)) (if (null? G15510e) '() (if (G11555stx? G15510e) (if (not (G11483top-marked? G15511m*)) (begin '#f (call-with-values (lambda () (G11585join-wraps G15511m* G15512s* G15513ae* G15510e)) (lambda (G15523G15520LAMBDA G15524G15521LAMBDA G15525G15522LAMBDA) ((lambda (G15529ae* G15530s* G15531m*) (G15433match-each-any (G11559stx-expr G15510e) G15531m* G15530s* G15529ae*)) G15525G15522LAMBDA G15524G15521LAMBDA G15523G15520LAMBDA)))) '#f) (if (G10430G10217annotation? G15510e) (G15433match-each-any (G10432G10221annotation-expression G15510e) G15511m* G15512s* G15513ae*) '#f)))))) (set! G15435match-empty (lambda (G15505p G15506r) (if (null? G15505p) G15506r (if (eq? G15505p '_) G15506r (if (eq? G15505p 'any) (cons '() G15506r) (if (pair? G15505p) (G15435match-empty (car G15505p) (G15435match-empty (cdr G15505p) G15506r)) (if (eq? G15505p 'each-any) (cons '() G15506r) ((lambda (G15509t) (if (eqv? G15509t 'each) (G15435match-empty (vector-ref G15505p '1) G15506r) (if (eqv? G15509t 'each+) (G15435match-empty (vector-ref G15505p '1) (G15435match-empty (reverse (vector-ref G15505p '2)) (G15435match-empty (vector-ref G15505p '3) G15506r))) (if (memv G15509t '(free-id atom)) G15506r (if (memv G15509t '(scheme-id atom)) G15506r (if (eqv? G15509t 'vector) (G15435match-empty (vector-ref G15505p '1) G15506r) (assertion-violation 'syntax-dispatch '"invalid pattern" G15505p))))))) (vector-ref G15505p '0))))))))) (set! G15437combine (lambda (G15501r* G15502r) (if (null? (car G15501r*)) G15502r (cons (map car G15501r*) (G15437combine (map cdr G15501r*) G15502r))))) (set! G15439match* (lambda (G15469e G15470p G15471m* G15472s* G15473ae* G15474r) (if (null? G15470p) (if (null? G15469e) (begin '#f G15474r) '#f) (if (pair? G15470p) (if (pair? G15469e) (begin '#f (G15441match (car G15469e) (car G15470p) G15471m* G15472s* G15473ae* (G15441match (cdr G15469e) (cdr G15470p) G15471m* G15472s* G15473ae* G15474r))) '#f) (if (eq? G15470p 'each-any) ((lambda (G15481l) (if G15481l (begin '#f (cons G15481l G15474r)) '#f)) (G15433match-each-any G15469e G15471m* G15472s* G15473ae*)) ((lambda (G15483t) (if (eqv? G15483t 'each) (if (null? G15469e) (G15435match-empty (vector-ref G15470p '1) G15474r) ((lambda (G15499r*) (if G15499r* (begin '#f (G15437combine G15499r* G15474r)) '#f)) (G15429match-each G15469e (vector-ref G15470p '1) G15471m* G15472s* G15473ae*))) (if (eqv? G15483t 'free-id) (if (symbol? G15469e) (if (G11483top-marked? G15471m*) (if (G11619free-id=? (G15427stx^ G15469e G15471m* G15472s* G15473ae*) (vector-ref G15470p '1)) (begin '#f G15474r) '#f) '#f) '#f) (if (eqv? G15483t 'scheme-id) (if (symbol? G15469e) (if (G11483top-marked? G15471m*) (if (G11619free-id=? (G15427stx^ G15469e G15471m* G15472s* G15473ae*) (G12076scheme-stx (vector-ref G15470p '1))) (begin '#f G15474r) '#f) '#f) '#f) (if (eqv? G15483t 'each+) (call-with-values (lambda () (G15431match-each+ G15469e (vector-ref G15470p '1) (vector-ref G15470p '2) (vector-ref G15470p '3) G15471m* G15472s* G15473ae* G15474r)) (lambda (G15487G15484LAMBDA G15488G15485LAMBDA G15489G15486LAMBDA) ((lambda (G15493r G15494y-pat G15495xr*) (if G15493r (if (null? G15494y-pat) (begin '#f (if (null? G15495xr*) (G15435match-empty (vector-ref G15470p '1) G15493r) (G15437combine G15495xr* G15493r))) '#f) '#f)) G15489G15486LAMBDA G15488G15485LAMBDA G15487G15484LAMBDA))) (if (eqv? G15483t 'atom) (if (equal? (vector-ref G15470p '1) (G11631strip G15469e G15471m*)) (begin '#f G15474r) '#f) (if (eqv? G15483t 'vector) (if (vector? G15469e) (begin '#f (G15441match (vector->list G15469e) (vector-ref G15470p '1) G15471m* G15472s* G15473ae* G15474r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G15470p)))))))) (vector-ref G15470p '0))))))) (set! G15441match (lambda (G15442e G15443p G15444m* G15445s* G15446ae* G15447r) (if (not G15447r) '#f (if (eq? G15443p '_) G15447r (if (eq? G15443p 'any) (cons (G15427stx^ G15442e G15444m* G15445s* G15446ae*) G15447r) (if (G11555stx? G15442e) (if (not (G11483top-marked? G15444m*)) (begin '#f (call-with-values (lambda () (G11585join-wraps G15444m* G15445s* G15446ae* G15442e)) (lambda (G15457G15454LAMBDA G15458G15455LAMBDA G15459G15456LAMBDA) ((lambda (G15463ae* G15464s* G15465m*) (G15441match (G11559stx-expr G15442e) G15443p G15465m* G15464s* G15463ae* G15447r)) G15459G15456LAMBDA G15458G15455LAMBDA G15457G15454LAMBDA)))) '#f) (if (G10430G10217annotation? G15442e) (G15441match (G10432G10221annotation-expression G15442e) G15443p G15444m* G15445s* G15446ae* G15447r) (G15439match* G15442e G15443p G15444m* G15445s* G15446ae* G15447r)))))))) (G15441match G15422e G15423p '() '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12192ellipsis? (lambda (G15630x) (if (G11611id? G15630x) (begin '#f (G11619free-id=? G15630x (G12076scheme-stx '...))) '#f))) (set! G12194underscore? (lambda (G15632x) (if (G11611id? G15632x) (begin '#f (G11619free-id=? G15632x (G12076scheme-stx '_))) '#f))) (set! G12196verify-literals (lambda (G15634lits G15635expr) (for-each (lambda (G15638x) (if ((lambda (G15640t) (if G15640t G15640t ((lambda (G15642t) (if G15642t G15642t (begin '#f (G12194underscore? G15638x)))) (G12192ellipsis? G15638x)))) (not (G11611id? G15638x))) (G12423syntax-violation '#f '"invalid literal" G15635expr G15638x) (void))) G15634lits))) (set! G12198syntax-case-transformer ((lambda () ((lambda (G15645build-dispatch-call G15647invalid-ids-error G15649gen-clause G15651gen-syntax-case) (begin (set! G15645build-dispatch-call (lambda (G15756pvars G15757expr G15758y G15759r G15760mr) ((lambda (G15766ids G15767levels) ((lambda (G15770labels G15771new-vars) ((lambda (G15774body) (list '(primitive apply) (G11454G11248build-lambda '#f G15771new-vars G15774body) G15758y)) (G12226chi-expr (G11591add-subst (G11540make-full-rib G15766ids G15770labels) G15757expr) (append (map (lambda (G15776label G15777var G15778level) (cons G15776label (G11643make-binding 'syntax (cons G15777var G15778level)))) G15770labels G15771new-vars (map cdr G15756pvars)) G15759r) G15760mr))) (map G11489gen-label G15766ids) (map G11485gen-lexical G15766ids))) (map car G15756pvars) (map cdr G15756pvars)))) (set! G15647invalid-ids-error (lambda (G15744id* G15745e G15746class) ((letrec ((G15750find (lambda (G15752id* G15753ok*) (if (null? G15752id*) (G12423syntax-violation '#f '"invalid syntax" G15745e) (if (G11611id? (car G15752id*)) (if (G11625bound-id-member? (car G15752id*) G15753ok*) (G12417syntax-error (car G15752id*) '"duplicate " G15746class) (G15750find (cdr G15752id*) (cons (car G15752id*) G15753ok*))) (G12417syntax-error (car G15752id*) '"invalid " G15746class)))))) G15750find) G15744id* '()))) (set! G15649gen-clause (lambda (G15706x G15707keys G15708clauses G15709r G15710mr G15711pat G15712fender G15713expr) (call-with-values (lambda () (G12188convert-pattern G15711pat G15707keys)) (lambda (G15724G15722LAMBDA G15725G15723LAMBDA) ((lambda (G15728pvars G15729p) (if (not (G11623distinct-bound-ids? (map car G15728pvars))) (G15647invalid-ids-error (map car G15728pvars) G15711pat '"pattern variable") (if (not (for-all (lambda (G15732x) (not (G12192ellipsis? (car G15732x)))) G15728pvars)) (G12423syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G15711pat) ((lambda (G15734y) ((lambda (G15736test) ((lambda (G15738conseq) ((lambda (G15740altern) (list (G11454G11248build-lambda '#f (list G15734y) (list 'if G15736test G15738conseq G15740altern)) (list '(primitive syntax-dispatch) G15706x (list 'quote G15729p)))) (G15651gen-syntax-case G15706x G15707keys G15708clauses G15709r G15710mr))) (G15645build-dispatch-call G15728pvars G15713expr G15734y G15709r G15710mr))) (if (eq? G15712fender '#t) G15734y ((lambda (G15742call) (list 'if G15734y G15742call (list 'quote '#f))) (G15645build-dispatch-call G15728pvars G15712fender G15734y G15709r G15710mr))))) (G11485gen-lexical 'tmp))))) G15725G15723LAMBDA G15724G15722LAMBDA))))) (set! G15651gen-syntax-case (lambda (G15672x G15673keys G15674clauses G15675r G15676mr) (if (null? G15674clauses) (list '(primitive syntax-error) G15672x) ((lambda (G15682t) ((lambda (G15684ls/false) (if G15684ls/false (apply (lambda (G15686pat G15687expr) (if (if (G11611id? G15686pat) (if (not (G11625bound-id-member? G15686pat G15673keys)) (begin '#f (not (G12192ellipsis? G15686pat))) '#f) '#f) (if (G11619free-id=? G15686pat (G12076scheme-stx '_)) (G12226chi-expr G15687expr G15675r G15676mr) ((lambda (G15690lab G15691lex) ((lambda (G15694body) (list (G11454G11248build-lambda '#f (list G15691lex) G15694body) G15672x)) (G12226chi-expr (G11591add-subst (G11540make-full-rib (list G15686pat) (list G15690lab)) G15687expr) (cons (cons G15690lab (G11643make-binding 'syntax (cons G15691lex '0))) G15675r) G15676mr))) (G11489gen-label G15686pat) (G11485gen-lexical G15686pat))) (G15649gen-clause G15672x G15673keys (cdr G15674clauses) G15675r G15676mr G15686pat '#t G15687expr))) G15684ls/false) ((lambda (G15696t) ((lambda (G15698ls/false) (if G15698ls/false (apply (lambda (G15700pat G15701fender G15702expr) (G15649gen-clause G15672x G15673keys (cdr G15674clauses) G15675r G15676mr G15700pat G15701fender G15702expr)) G15698ls/false) (G12423syntax-violation '#f '"invalid syntax" G15696t))) (G12190syntax-dispatch G15696t '(any any any)))) G15682t))) (G12190syntax-dispatch G15682t '(any any)))) (car G15674clauses))))) (lambda (G15652e G15653r G15654mr) ((lambda (G15658t) ((lambda (G15660ls/false) (if G15660ls/false (apply (lambda (G15662expr G15663keys G15664clauses) (begin (G12196verify-literals G15663keys G15652e) ((lambda (G15668x) ((lambda (G15670body) (list (G11454G11248build-lambda '#f (list G15668x) G15670body) (G12226chi-expr G15662expr G15653r G15654mr))) (G15651gen-syntax-case G15668x G15663keys G15664clauses G15653r G15654mr))) (G11485gen-lexical 'tmp)))) G15660ls/false) (G12423syntax-violation '#f '"invalid syntax" G15658t))) (G12190syntax-dispatch G15658t '(_ any each-any . each-any)))) G15652e)))) '#f '#f '#f '#f)))) (set! G12200ellipsis-map (lambda (G15782proc G15783ls . G15786ls*) ((lambda (G15789who) (begin (set! G15789who '...) (begin (if (list? G15783ls) (void) (assertion-violation G15789who '"not a list" G15783ls)) (if (null? G15786ls*) (void) ((lambda (G15790n) (for-each (lambda (G15792x) (begin (if (list? G15792x) (void) (assertion-violation G15789who '"not a list" G15792x)) (if (= (length G15792x) G15790n) (void) (assertion-violation G15789who '"length mismatch" G15783ls G15792x)))) G15786ls*)) (length G15783ls))) (apply map G15782proc G15783ls G15786ls*)))) '#f))) (set! G12202syntax-transformer ((lambda () ((lambda (G15795gen-syntax G15797gen-ref G15799gen-append G15801gen-mappend G15803gen-map G15805gen-cons G15807gen-vector G15809regen) (begin (set! G15795gen-syntax (lambda (G15908src G15909e G15910r G15911maps G15912ellipsis? G15913vec?) ((lambda (G15920t) ((lambda (G15922ls/false) (if (if G15922ls/false (begin '#f (apply (lambda (G15924dots) (G15912ellipsis? G15924dots)) G15922ls/false)) '#f) (apply (lambda (G15926dots) (G12423syntax-violation '#f '"misplaced ellipsis in syntax form" G15908src)) G15922ls/false) ((lambda (G15928t) ((lambda (G15930ls/false) (if (if G15930ls/false (begin '#f (apply (lambda (G15932id) (G11611id? G15932id)) G15930ls/false)) '#f) (apply (lambda (G15934id) ((lambda (G15936label) ((lambda (G15938b) ((lambda () (if (eq? (G11645binding-type G15938b) 'syntax) (call-with-values (lambda () ((lambda (G15942var.lev) (G15797gen-ref G15908src (car G15942var.lev) (cdr G15942var.lev) G15911maps)) (G11647binding-value G15938b))) (lambda (G15944G15940LAMBDA G15945G15941LAMBDA) ((lambda (G15948maps G15949var) (values (list 'ref G15949var) G15948maps)) G15945G15941LAMBDA G15944G15940LAMBDA))) (values (list 'quote G15909e) G15911maps))))) (G11641label->binding G15936label G15910r))) (G11637id->label G15909e))) G15930ls/false) ((lambda (G15952t) ((lambda (G15954ls/false) (if (if G15954ls/false (begin '#f (apply (lambda (G15956dots G15957e) (G15912ellipsis? G15956dots)) G15954ls/false)) '#f) (apply (lambda (G15960dots G15961e) (if G15913vec? (G12423syntax-violation '#f '"misplaced ellipsis in syntax form" G15908src) (G15795gen-syntax G15908src G15961e G15910r G15911maps (lambda (G15964x) '#f) '#f))) G15954ls/false) ((lambda (G15966t) ((lambda (G15968ls/false) (if (if G15968ls/false (begin '#f (apply (lambda (G15970x G15971dots G15972y) (G15912ellipsis? G15971dots)) G15968ls/false)) '#f) (apply (lambda (G15976x G15977dots G15978y) ((letrec ((G15982f (lambda (G15984y G15985k) ((lambda (G15988t) ((lambda (G15990ls/false) (if G15990ls/false (apply (lambda () (G15985k G15911maps)) G15990ls/false) ((lambda (G15992t) ((lambda (G15994ls/false) (if (if G15994ls/false (begin '#f (apply (lambda (G15996dots G15997y) (G15912ellipsis? G15996dots)) G15994ls/false)) '#f) (apply (lambda (G16000dots G16001y) (G15982f G16001y (lambda (G16004maps) (call-with-values (lambda () (G15985k (cons '() G16004maps))) (lambda (G16008G16006LAMBDA G16009G16007LAMBDA) ((lambda (G16012maps G16013x) (if (null? (car G16012maps)) (G12423syntax-violation '#f '"extra ellipsis in syntax form" G15908src) (values (G15801gen-mappend G16013x (car G16012maps)) (cdr G16012maps)))) G16009G16007LAMBDA G16008G16006LAMBDA)))))) G15994ls/false) ((lambda (G16016t) ((lambda (G16018ls/false) (if G16018ls/false (apply (lambda () (call-with-values (lambda () (G15795gen-syntax G15908src G15984y G15910r G15911maps G15912ellipsis? G15913vec?)) (lambda (G16022G16020LAMBDA G16023G16021LAMBDA) ((lambda (G16026maps G16027y) (call-with-values (lambda () (G15985k G16026maps)) (lambda (G16032G16030LAMBDA G16033G16031LAMBDA) ((lambda (G16036maps G16037x) (values (G15799gen-append G16037x G16027y) G16036maps)) G16033G16031LAMBDA G16032G16030LAMBDA)))) G16023G16021LAMBDA G16022G16020LAMBDA)))) G16018ls/false) (G12423syntax-violation '#f '"invalid syntax" G16016t))) (G12190syntax-dispatch G16016t '_))) G15992t))) (G12190syntax-dispatch G15992t '(any . any)))) G15988t))) (G12190syntax-dispatch G15988t '()))) G15984y)))) G15982f) G15978y (lambda (G16040maps) (call-with-values (lambda () (G15795gen-syntax G15908src G15976x G15910r (cons '() G16040maps) G15912ellipsis? '#f)) (lambda (G16044G16042LAMBDA G16045G16043LAMBDA) ((lambda (G16048maps G16049x) (if (null? (car G16048maps)) (G12423syntax-violation '#f '"extra ellipsis in syntax form" G15908src) (values (G15803gen-map G16049x (car G16048maps)) (cdr G16048maps)))) G16045G16043LAMBDA G16044G16042LAMBDA)))))) G15968ls/false) ((lambda (G16052t) ((lambda (G16054ls/false) (if G16054ls/false (apply (lambda (G16056x G16057y) (call-with-values (lambda () (G15795gen-syntax G15908src G16056x G15910r G15911maps G15912ellipsis? '#f)) (lambda (G16062G16060LAMBDA G16063G16061LAMBDA) ((lambda (G16066maps G16067xnew) (call-with-values (lambda () (G15795gen-syntax G15908src G16057y G15910r G16066maps G15912ellipsis? G15913vec?)) (lambda (G16072G16070LAMBDA G16073G16071LAMBDA) ((lambda (G16076maps G16077ynew) (values (G15805gen-cons G15909e G16056x G16057y G16067xnew G16077ynew) G16076maps)) G16073G16071LAMBDA G16072G16070LAMBDA)))) G16063G16061LAMBDA G16062G16060LAMBDA)))) G16054ls/false) ((lambda (G16080t) ((lambda (G16082ls/false) (if G16082ls/false (apply (lambda (G16084ls) (call-with-values (lambda () (G15795gen-syntax G15908src G16084ls G15910r G15911maps G15912ellipsis? '#t)) (lambda (G16088G16086LAMBDA G16089G16087LAMBDA) ((lambda (G16092maps G16093lsnew) (values (G15807gen-vector G15909e G16084ls G16093lsnew) G16092maps)) G16089G16087LAMBDA G16088G16086LAMBDA)))) G16082ls/false) ((lambda (G16096t) ((lambda (G16098ls/false) (if G16098ls/false (apply (lambda () (values (list 'quote G15909e) G15911maps)) G16098ls/false) (G12423syntax-violation '#f '"invalid syntax" G16096t))) (G12190syntax-dispatch G16096t '_))) G16080t))) (G12190syntax-dispatch G16080t '#(vector each-any)))) G16052t))) (G12190syntax-dispatch G16052t '(any . any)))) G15966t))) (G12190syntax-dispatch G15966t '(any any . any)))) G15952t))) (G12190syntax-dispatch G15952t '(any any)))) G15928t))) (G12190syntax-dispatch G15928t 'any))) G15920t))) (G12190syntax-dispatch G15920t 'any))) G15909e))) (set! G15797gen-ref (lambda (G15884src G15885var G15886level G15887maps) (if (= G15886level '0) (values G15885var G15887maps) (if (null? G15887maps) (G12423syntax-violation '#f '"missing ellipsis in syntax form" G15884src) (call-with-values (lambda () (G15797gen-ref G15884src G15885var (- G15886level '1) (cdr G15887maps))) (lambda (G15894G15892LAMBDA G15895G15893LAMBDA) ((lambda (G15898outer-maps G15899outer-var) ((lambda (G15902t) (if G15902t ((lambda (G15904b) (values (cdr G15904b) G15887maps)) G15902t) ((lambda (G15906inner-var) (values G15906inner-var (cons (cons (cons G15899outer-var G15906inner-var) (car G15887maps)) G15898outer-maps))) (G11485gen-lexical 'tmp)))) (assq G15899outer-var (car G15887maps)))) G15895G15893LAMBDA G15894G15892LAMBDA))))))) (set! G15799gen-append (lambda (G15880x G15881y) (if (equal? G15881y ''()) G15880x (list 'append G15880x G15881y)))) (set! G15801gen-mappend (lambda (G15876e G15877map-env) (list 'apply '(primitive append) (G15803gen-map G15876e G15877map-env)))) (set! G15803gen-map (lambda (G15858e G15859map-env) ((lambda (G15862formals G15863actuals) (if (eq? (car G15858e) 'ref) (car G15863actuals) (if (for-all (lambda (G15866x) (if (eq? (car G15866x) 'ref) (begin '#f (memq (cadr G15866x) G15862formals)) '#f)) (cdr G15858e)) ((lambda (G15868args) (cons 'map (cons (list 'primitive (car G15858e)) G15868args))) (map ((lambda (G15870r) (lambda (G15872x) (cdr (assq (cadr G15872x) G15870r)))) (map cons G15862formals G15863actuals)) (cdr G15858e))) (cons* 'map (list 'lambda G15862formals G15858e) G15863actuals)))) (map cdr G15859map-env) (map (lambda (G15874x) (list 'ref (car G15874x))) G15859map-env)))) (set! G15805gen-cons (lambda (G15843e G15844x G15845y G15846xnew G15847ynew) ((lambda (G15853t) (if (eqv? G15853t 'quote) (if (eq? (car G15846xnew) 'quote) ((lambda (G15854xnew G15855ynew) (if (if (eq? G15854xnew G15844x) (begin '#f (eq? G15855ynew G15845y)) '#f) (list 'quote G15843e) (list 'quote (cons G15854xnew G15855ynew)))) (cadr G15846xnew) (cadr G15847ynew)) (if (null? (cadr G15847ynew)) (list 'list G15846xnew) (list 'cons G15846xnew G15847ynew))) (if (eqv? G15853t 'list) (cons 'list (cons G15846xnew (cdr G15847ynew))) (list 'cons G15846xnew G15847ynew)))) (car G15847ynew)))) (set! G15807gen-vector (lambda (G15837e G15838ls G15839lsnew) (if (eq? (car G15839lsnew) 'quote) (if (eq? (cadr G15839lsnew) G15838ls) (list 'quote G15837e) (list 'quote (list->vector (cadr G15839lsnew)))) (if (eq? (car G15839lsnew) 'list) (cons 'vector (cdr G15839lsnew)) (list 'list->vector G15839lsnew))))) (set! G15809regen (lambda (G15832x) ((lambda (G15834t) (if (eqv? G15834t 'ref) (cadr G15832x) (if (eqv? G15834t 'primitive) (list 'primitive (cadr G15832x)) (if (eqv? G15834t 'quote) (list 'quote (cadr G15832x)) (if (eqv? G15834t 'lambda) (G11454G11248build-lambda '#f (cadr G15832x) (G15809regen (caddr G15832x))) (if (eqv? G15834t 'map) ((lambda (G15835ls) (cons '(primitive ellipsis-map) G15835ls)) (map G15809regen (cdr G15832x))) (cons (list 'primitive (car G15832x)) (map G15809regen (cdr G15832x))))))))) (car G15832x)))) (lambda (G15810e G15811r G15812mr) ((lambda (G15816t) ((lambda (G15818ls/false) (if G15818ls/false (apply (lambda (G15820x) (call-with-values (lambda () (G15795gen-syntax G15810e G15820x G15811r '() G12192ellipsis? '#f)) (lambda (G15824G15822LAMBDA G15825G15823LAMBDA) ((lambda (G15828maps G15829e) (G15809regen G15829e)) G15825G15823LAMBDA G15824G15822LAMBDA)))) G15818ls/false) (G12423syntax-violation '#f '"invalid syntax" G15816t))) (G12190syntax-dispatch G15816t '(_ any)))) G15810e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G12204core-macro-transformer (lambda (G16100name) ((lambda (G16102t) (if (eqv? G16102t 'quote) G12110quote-transformer (if (eqv? G16102t 'lambda) G12114lambda-transformer (if (eqv? G16102t 'case-lambda) G12112case-lambda-transformer (if (eqv? G16102t 'letrec) G12090letrec-transformer (if (eqv? G16102t 'letrec*) G12092letrec*-transformer (if (eqv? G16102t 'case) G12108case-transformer (if (eqv? G16102t 'if) G12106if-transformer (if (eqv? G16102t 'when) G12102when-transformer (if (eqv? G16102t 'unless) G12104unless-transformer (if (eqv? G16102t 'parameterize) G12184parameterize-transformer (if (eqv? G16102t 'foreign-call) G12186foreign-call-transformer (if (eqv? G16102t 'syntax-case) G12198syntax-case-transformer (if (eqv? G16102t 'syntax) G12202syntax-transformer (if (eqv? G16102t 'type-descriptor) G12096type-descriptor-transformer (if (eqv? G16102t 'record-type-descriptor) G12098record-type-descriptor-transformer (if (eqv? G16102t 'record-constructor-descriptor) G12100record-constructor-descriptor-transformer (if (eqv? G16102t 'fluid-let-syntax) G12094fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G16100name))))))))))))))))))) G16100name))) (set! G12206file-options-macro (lambda (G16103x) ((lambda (G16105t) ((lambda (G16107ls/false) (if (if G16107ls/false (begin '#f (apply (lambda (G16109opt*) (if (for-all G11611id? G16109opt*) (begin '#f (G10439G10387file-options-spec (map G11613id->sym G16109opt*))) '#f)) G16107ls/false)) '#f) (apply (lambda (G16111opt*) (G12116bless (list 'quote (G10439G10387file-options-spec (map G11613id->sym G16111opt*))))) G16107ls/false) (G12423syntax-violation '#f '"invalid syntax" G16105t))) (G12190syntax-dispatch G16105t '(_ . each-any)))) G16103x))) (set! G12208symbol-macro (lambda (G16113x G16114set) ((lambda (G16117t) ((lambda (G16119ls/false) (if (if G16119ls/false (begin '#f (apply (lambda (G16121name) (if (G11611id? G16121name) (begin '#f (memq (G11613id->sym G16121name) G16114set)) '#f)) G16119ls/false)) '#f) (apply (lambda (G16123name) (G12116bless (list 'quote G16123name))) G16119ls/false) (G12423syntax-violation '#f '"invalid syntax" G16117t))) (G12190syntax-dispatch G16117t '(_ any)))) G16113x))) (set! G12210macro-transformer (lambda (G16125x) (if (procedure? G16125x) G16125x (if (symbol? G16125x) ((lambda (G16127t) (if (eqv? G16127t 'define-record-type) G12178define-record-type-macro (if (eqv? G16127t 'define-struct) G12176define-struct-macro (if (eqv? G16127t 'include) G12166include-macro (if (eqv? G16127t 'cond) G12162cond-macro (if (eqv? G16127t 'let) G12122let-macro (if (eqv? G16127t 'do) G12154do-macro (if (eqv? G16127t 'or) G12158or-macro (if (eqv? G16127t 'and) G12160and-macro (if (eqv? G16127t 'let*) G12156let*-macro (if (eqv? G16127t 'let-values) G12124let-values-macro (if (eqv? G16127t 'let*-values) G12126let*-values-macro (if (eqv? G16127t 'syntax-rules) G12170syntax-rules-macro (if (eqv? G16127t 'quasiquote) G12172quasiquote-macro (if (eqv? G16127t 'quasisyntax) G12174quasisyntax-macro (if (eqv? G16127t 'with-syntax) G12118with-syntax-macro (if (eqv? G16127t 'identifier-syntax) G12152identifier-syntax-macro (if (eqv? G16127t 'time) G12144time-macro (if (eqv? G16127t 'delay) G12146delay-macro (if (eqv? G16127t 'assert) G12148assert-macro (if (eqv? G16127t 'endianness) G12150endianness-macro (if (eqv? G16127t 'guard) G12140guard-macro (if (eqv? G16127t 'define-enumeration) G12142define-enumeration-macro (if (eqv? G16127t 'trace-lambda) G12128trace-lambda-macro (if (eqv? G16127t 'trace-define) G12130trace-define-macro (if (eqv? G16127t 'trace-define-syntax) G12132trace-define-syntax-macro (if (eqv? G16127t 'trace-let-syntax) G12136trace-let-syntax-macro (if (eqv? G16127t 'trace-letrec-syntax) G12138trace-letrec-syntax-macro (if (eqv? G16127t 'define-condition-type) G12180define-condition-type-macro (if (eqv? G16127t 'include-into) G12168include-into-macro (if (eqv? G16127t 'eol-style) (lambda (G16132x) (G12208symbol-macro G16132x '(none lf cr crlf nel crnel ls))) (if (eqv? G16127t 'error-handling-mode) (lambda (G16130x) (G12208symbol-macro G16130x '(ignore raise replace))) (if (eqv? G16127t 'buffer-mode) (lambda (G16128x) (G12208symbol-macro G16128x '(none line block))) (if (eqv? G16127t 'file-options) G12206file-options-macro (if (memv G16127t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G12182incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G16125x)))))))))))))))))))))))))))))))))))) G16125x) (error 'core-macro-transformer '"BUG: invalid macro" G16125x))))) (set! G12212local-macro-transformer (lambda (G16134x) (car G16134x))) (set! G12214do-macro-call (lambda (G16136transformer G16137expr) ((lambda (G16140out) (begin ((letrec ((G16142f (lambda (G16144x) (if (G11555stx? G16144x) (void) (if (pair? G16144x) (begin (G16142f (car G16144x)) (G16142f (cdr G16144x))) (if (vector? G16144x) (vector-for-each G16142f G16144x) (if (symbol? G16144x) (G12423syntax-violation '#f '"raw symbol encountered in output of macro" G16137expr G16144x) (void)))))))) G16142f) G16140out) (G11589add-mark (G11579gen-mark) G16140out G16137expr))) (G16136transformer (G11589add-mark G11581anti-mark G16137expr '#f))))) (set! G12216chi-macro (lambda (G16146p G16147e) (G12214do-macro-call (G12210macro-transformer G16146p) G16147e))) (set! G12218chi-local-macro (lambda (G16150p G16151e) (G12214do-macro-call (G12212local-macro-transformer G16150p) G16151e))) (set! G12220chi-global-macro (lambda (G16154p G16155e) ((lambda (G16158lib G16159loc) (begin (G11110G10751visit-library G16158lib) ((lambda (G16162x) ((lambda (G16164transformer) (G12214do-macro-call G16164transformer G16155e)) (if (procedure? G16162x) G16162x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G16162x)))) (symbol-value G16159loc)))) (car G16154p) (cdr G16154p)))) (set! G12222chi-expr* (lambda (G16166e* G16167r G16168mr) (if (null? G16166e*) '() ((lambda (G16172e) (cons G16172e (G12222chi-expr* (cdr G16166e*) G16167r G16168mr))) (G12226chi-expr (car G16166e*) G16167r G16168mr))))) (set! G12224chi-application (lambda (G16174e G16175r G16176mr) ((lambda (G16180t) ((lambda (G16182ls/false) (if G16182ls/false (apply (lambda (G16184rator G16185rands) ((lambda (G16188rator) (cons G16188rator (G12222chi-expr* G16185rands G16175r G16176mr))) (G12226chi-expr G16184rator G16175r G16176mr))) G16182ls/false) (G12423syntax-violation '#f '"invalid syntax" G16180t))) (G12190syntax-dispatch G16180t '(any . each-any)))) G16174e))) (set! G12226chi-expr (lambda (G16190e G16191r G16192mr) (call-with-values (lambda () (G11651syntax-type G16190e G16191r)) (lambda (G16199G16196LAMBDA G16200G16197LAMBDA G16201G16198LAMBDA) ((lambda (G16205kwd G16206value G16207type) ((lambda (G16211t) (if (eqv? G16211t 'core-macro) ((lambda (G16261transformer) (G16261transformer G16190e G16191r G16192mr)) (G12204core-macro-transformer G16206value)) (if (eqv? G16211t 'global) ((lambda (G16257lib) ((lambda (G16259loc) ((lambda () (begin ((G12301inv-collector) G16257lib) G16259loc)))) (cdr G16206value))) (car G16206value)) (if (eqv? G16211t 'core-prim) ((lambda (G16255name) (list 'primitive G16255name)) G16206value) (if (eqv? G16211t 'call) (G12224chi-application G16190e G16191r G16192mr) (if (eqv? G16211t 'lexical) ((lambda (G16253lex) G16253lex) (G12078lexical-var G16206value)) (if (memv G16211t '(global-macro global-macro!)) (G12226chi-expr (G12220chi-global-macro G16206value G16190e) G16191r G16192mr) (if (memv G16211t '(local-macro local-macro!)) (G12226chi-expr (G12218chi-local-macro G16206value G16190e) G16191r G16192mr) (if (memv G16211t '(macro macro!)) (G12226chi-expr (G12216chi-macro G16206value G16190e) G16191r G16192mr) (if (eqv? G16211t 'constant) ((lambda (G16251datum) (list 'quote G16251datum)) G16206value) (if (eqv? G16211t 'set!) (G12228chi-set! G16190e G16191r G16192mr) (if (eqv? G16211t 'begin) ((lambda (G16243t) ((lambda (G16245ls/false) (if G16245ls/false (apply (lambda (G16247x G16248x*) (G11457G11324build-sequence '#f (G12222chi-expr* (cons G16247x G16248x*) G16191r G16192mr))) G16245ls/false) (G12423syntax-violation '#f '"invalid syntax" G16243t))) (G12190syntax-dispatch G16243t '(_ any . each-any)))) G16190e) (if (memv G16211t '(let-syntax letrec-syntax)) ((lambda (G16213t) ((lambda (G16215ls/false) (if (if G16215ls/false (begin '#f (apply (lambda (G16217xlhs* G16218xrhs* G16219xbody G16220xbody*) (if (G11621valid-bound-ids? G16217xlhs*) (void) (G12423syntax-violation '#f '"invalid identifiers" G16190e))) G16215ls/false)) '#f) (apply (lambda (G16225xlhs* G16226xrhs* G16227xbody G16228xbody*) ((lambda (G16233xlab*) ((lambda (G16235xrib) ((lambda (G16237xb*) ((lambda () (G11457G11324build-sequence '#f (G12222chi-expr* (map (lambda (G16239x) (G11591add-subst G16235xrib G16239x)) (cons G16227xbody G16228xbody*)) (append (map cons G16233xlab* G16237xb*) G16191r) (append (map cons G16233xlab* G16237xb*) G16192mr)))))) (map (lambda (G16241x) (G11682make-eval-transformer (G12287expand-transformer (if (eq? G16207type 'let-syntax) G16241x (G11591add-subst G16235xrib G16241x)) G16192mr))) G16226xrhs*))) (G11540make-full-rib G16225xlhs* G16233xlab*))) (map G11489gen-label G16225xlhs*))) G16215ls/false) (G12423syntax-violation '#f '"invalid syntax" G16213t))) (G12190syntax-dispatch G16213t '(_ #(each (any any)) any . each-any)))) G16190e) (if (eqv? G16211t 'displaced-lexical) (G12423syntax-violation '#f '"identifier out of context" G16190e) (if (eqv? G16211t 'syntax) (G12423syntax-violation '#f '"reference to pattern variable outside a syntax form" G16190e) (if (memv G16211t '(define define-syntax module import library)) (G12423syntax-violation '#f (string-append ((lambda (G16212t) (if (eqv? G16212t 'define) '"a definition" (if (eqv? G16212t 'define-syntax) '"a define-syntax" (if (eqv? G16212t 'module) '"a module definition" (if (eqv? G16212t 'library) '"a library definition" (if (eqv? G16212t 'import) '"an import declaration" '"a non-expression")))))) G16207type) '" was found where an expression was expected") G16190e) (if (eqv? G16211t 'mutable) (G12423syntax-violation '#f '"attempt to reference an unexportable variable" G16190e) (G12423syntax-violation '#f '"invalid expression" G16190e)))))))))))))))))) G16207type)) G16201G16198LAMBDA G16200G16197LAMBDA G16199G16196LAMBDA))))) (set! G12228chi-set! (lambda (G16263e G16264r G16265mr) ((lambda (G16269t) ((lambda (G16271ls/false) (if (if G16271ls/false (begin '#f (apply (lambda (G16273x G16274v) (G11611id? G16273x)) G16271ls/false)) '#f) (apply (lambda (G16277x G16278v) (call-with-values (lambda () (G11651syntax-type G16277x G16264r)) (lambda (G16284G16281LAMBDA G16285G16282LAMBDA G16286G16283LAMBDA) ((lambda (G16290kwd G16291value G16292type) ((lambda (G16296t) (if (eqv? G16296t 'lexical) (begin (G12082set-lexical-mutable! G16291value '#t) (list 'set! (G12078lexical-var G16291value) (G12226chi-expr G16278v G16264r G16265mr))) (if (eqv? G16296t 'core-prim) (G12423syntax-violation '#f '"cannot modify imported core primitive" G16263e) (if (eqv? G16296t 'global) (G12423syntax-violation '#f '"attempt to modify imported binding" G16263e) (if (eqv? G16296t 'global-macro!) (G12226chi-expr (G12220chi-global-macro G16291value G16263e) G16264r G16265mr) (if (eqv? G16296t 'local-macro!) (G12226chi-expr (G12218chi-local-macro G16291value G16263e) G16264r G16265mr) (if (eqv? G16296t 'mutable) (G12423syntax-violation '#f '"attempt to assign to an unexportable variable" G16263e) (G12423syntax-violation '#f '"invalid syntax" G16263e)))))))) G16292type)) G16286G16283LAMBDA G16285G16282LAMBDA G16284G16281LAMBDA)))) G16271ls/false) (G12423syntax-violation '#f '"invalid syntax" G16269t))) (G12190syntax-dispatch G16269t '(_ any any)))) G16263e))) (set! G12230verify-formals (lambda (G16297fmls G16298stx) ((lambda (G16301t) ((lambda (G16303ls/false) (if G16303ls/false (apply (lambda (G16305x*) (if (G11621valid-bound-ids? G16305x*) (void) (G12120invalid-fmls-error G16298stx G16297fmls))) G16303ls/false) ((lambda (G16307t) ((lambda (G16309ls/false) (if G16309ls/false (apply (lambda (G16311x* G16312x) (if (G11621valid-bound-ids? (cons G16312x G16311x*)) (void) (G12120invalid-fmls-error G16298stx G16297fmls))) G16309ls/false) ((lambda (G16315t) ((lambda (G16317ls/false) (if G16317ls/false (apply (lambda () (G12423syntax-violation '#f '"invalid syntax" G16298stx)) G16317ls/false) (G12423syntax-violation '#f '"invalid syntax" G16315t))) (G12190syntax-dispatch G16315t '_))) G16307t))) (G12190syntax-dispatch G16307t '#(each+ any () any)))) G16301t))) (G12190syntax-dispatch G16301t 'each-any))) G16297fmls))) (set! G12232chi-lambda-clause (lambda (G16319stx G16320fmls G16321body* G16322r G16323mr) ((lambda (G16329t) ((lambda (G16331ls/false) (if G16331ls/false (apply (lambda (G16333x*) (begin (G12230verify-formals G16320fmls G16319stx) ((lambda (G16335lex* G16336lab*) (values G16335lex* (G12248chi-internal (G11591add-subst (G11540make-full-rib G16333x* G16336lab*) G16321body*) (G12086add-lexicals G16336lab* G16335lex* G16322r) G16323mr))) (map G11485gen-lexical G16333x*) (map G11489gen-label G16333x*)))) G16331ls/false) ((lambda (G16339t) ((lambda (G16341ls/false) (if G16341ls/false (apply (lambda (G16343x* G16344x) (begin (G12230verify-formals G16320fmls G16319stx) ((lambda (G16347lex* G16348lab* G16349lex G16350lab) (values (append G16347lex* G16349lex) (G12248chi-internal (G11591add-subst (G11540make-full-rib (cons G16344x G16343x*) (cons G16350lab G16348lab*)) G16321body*) (G12086add-lexicals (cons G16350lab G16348lab*) (cons G16349lex G16347lex*) G16322r) G16323mr))) (map G11485gen-lexical G16343x*) (map G11489gen-label G16343x*) (G11485gen-lexical G16344x) (G11489gen-label G16344x)))) G16341ls/false) ((lambda (G16355t) ((lambda (G16357ls/false) (if G16357ls/false (apply (lambda () (G12423syntax-violation '#f '"invalid syntax" G16320fmls)) G16357ls/false) (G12423syntax-violation '#f '"invalid syntax" G16355t))) (G12190syntax-dispatch G16355t '_))) G16339t))) (G12190syntax-dispatch G16339t '#(each+ any () any)))) G16329t))) (G12190syntax-dispatch G16329t 'each-any))) G16320fmls))) (set! G12234chi-lambda-clause* (lambda (G16359stx G16360fmls* G16361body** G16362r G16363mr) (if (null? G16360fmls*) (values '() '()) (call-with-values (lambda () (G12232chi-lambda-clause G16359stx (car G16360fmls*) (car G16361body**) G16362r G16363mr)) (lambda (G16371G16369LAMBDA G16372G16370LAMBDA) ((lambda (G16375b G16376a) (call-with-values (lambda () (G12234chi-lambda-clause* G16359stx (cdr G16360fmls*) (cdr G16361body**) G16362r G16363mr)) (lambda (G16381G16379LAMBDA G16382G16380LAMBDA) ((lambda (G16385b* G16386a*) (values (cons G16376a G16386a*) (cons G16375b G16385b*))) G16382G16380LAMBDA G16381G16379LAMBDA)))) G16372G16370LAMBDA G16371G16369LAMBDA)))))) (set! G12236chi-defun (lambda (G16389x G16390r G16391mr) ((lambda (G16395fmls G16396body*) (call-with-values (lambda () (G12232chi-lambda-clause G16395fmls G16395fmls G16396body* G16390r G16391mr)) (lambda (G16401G16399LAMBDA G16402G16400LAMBDA) ((lambda (G16405body G16406fmls) (G11454G11248build-lambda '#f G16406fmls G16405body)) G16402G16400LAMBDA G16401G16399LAMBDA)))) (car G16389x) (cdr G16389x)))) (set! G12238chi-rhs (lambda (G16409rhs G16410r G16411mr) ((lambda (G16415t) (if (eqv? G16415t 'defun) (G12236chi-defun (cdr G16409rhs) G16410r G16411mr) (if (eqv? G16415t 'expr) ((lambda (G16418expr) (G12226chi-expr G16418expr G16410r G16411mr)) (cdr G16409rhs)) (if (eqv? G16415t 'top-expr) ((lambda (G16416expr) (G11457G11324build-sequence '#f (list (G12226chi-expr G16416expr G16410r G16411mr) (G11458G11326build-void)))) (cdr G16409rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G16409rhs))))) (car G16409rhs)))) (set! G12240expand-interaction-rhs*/init* (lambda (G16420lhs* G16421rhs* G16422init* G16423r G16424mr) ((letrec ((G16430f (lambda (G16432lhs* G16433rhs*) (if (null? G16432lhs*) (map (lambda (G16436x) (G12226chi-expr G16436x G16423r G16424mr)) G16422init*) ((lambda (G16438lhs G16439rhs) ((lambda (G16442t) (if (eqv? G16442t 'defun) ((lambda (G16447rhs) (cons (list 'set! G16438lhs G16447rhs) (G16430f (cdr G16432lhs*) (cdr G16433rhs*)))) (G12236chi-defun (cdr G16439rhs) G16423r G16424mr)) (if (eqv? G16442t 'expr) ((lambda (G16445rhs) (cons (list 'set! G16438lhs G16445rhs) (G16430f (cdr G16432lhs*) (cdr G16433rhs*)))) (G12226chi-expr (cdr G16439rhs) G16423r G16424mr)) (if (eqv? G16442t 'top-expr) ((lambda (G16443e) (cons G16443e (G16430f (cdr G16432lhs*) (cdr G16433rhs*)))) (G12226chi-expr (cdr G16439rhs) G16423r G16424mr)) (error 'expand-interaction '"invallid" G16439rhs))))) (car G16439rhs))) (car G16432lhs*) (car G16433rhs*)))))) G16430f) G16420lhs* G16421rhs*))) (set! G12242chi-rhs* (lambda (G16449rhs* G16450r G16451mr) ((letrec ((G16455f (lambda (G16457ls) (if (null? G16457ls) '() ((lambda (G16459a) (cons G16459a (G16455f (cdr G16457ls)))) (G12238chi-rhs (car G16457ls) G16450r G16451mr)))))) G16455f) G16449rhs*))) (set! G12244find-bound=? (lambda (G16461x G16462lhs* G16463rhs*) (if (null? G16462lhs*) '#f (if (G11617bound-id=? G16461x (car G16462lhs*)) (car G16463rhs*) (G12244find-bound=? G16461x (cdr G16462lhs*) (cdr G16463rhs*)))))) (set! G12246find-dups (lambda (G16467ls) ((letrec ((G16469f (lambda (G16471ls G16472dups) (if (null? G16471ls) G16472dups ((lambda (G16475t) (if G16475t ((lambda (G16477x) (G16469f (cdr G16471ls) (cons (list (car G16471ls) G16477x) G16472dups))) G16475t) (G16469f (cdr G16471ls) G16472dups))) (G12244find-bound=? (car G16471ls) (cdr G16471ls) (cdr G16471ls))))))) G16469f) G16467ls '()))) (set! G12248chi-internal (lambda (G16479e* G16480r G16481mr) ((lambda (G16485rib) (call-with-values (lambda () (G12285chi-body* (map (lambda (G16494x) (G11591add-subst G16485rib G16494x)) (G11609syntax->list G16479e*)) G16480r G16481mr '() '() '() '() G16485rib '#f)) (lambda (G16496G16487LAMBDA G16497G16488LAMBDA G16498G16489LAMBDA G16499G16490LAMBDA G16500G16491LAMBDA G16501G16492LAMBDA G16502G16493LAMBDA) ((lambda (G16510kwd* G16511mod** G16512rhs* G16513lex* G16514mr G16515r G16516e*) (begin (if (null? G16516e*) (G12423syntax-violation '#f '"no expression in body" G16516e*) (void)) ((lambda (G16524init*) ((lambda (G16526rhs*) ((lambda () (G11460G11330build-letrec* '#f (reverse G16513lex*) (reverse G16526rhs*) (G11457G11324build-sequence '#f G16524init*))))) (G12242chi-rhs* G16512rhs* G16515r G16514mr))) (G12222chi-expr* (append (apply append (reverse G16511mod**)) G16516e*) G16515r G16514mr)))) G16502G16493LAMBDA G16501G16492LAMBDA G16500G16491LAMBDA G16499G16490LAMBDA G16498G16489LAMBDA G16497G16488LAMBDA G16496G16487LAMBDA)))) (G11530make-empty-rib)))) (set! G12250parse-module (lambda (G16528e) ((lambda (G16530t) ((lambda (G16532ls/false) (if G16532ls/false (apply (lambda (G16534export* G16535b*) (begin (if (for-all G11611id? G16534export*) (void) (G12423syntax-violation '#f '"module exports must be identifiers" G16528e)) (values '#f (list->vector G16534export*) G16535b*))) G16532ls/false) ((lambda (G16538t) ((lambda (G16540ls/false) (if G16540ls/false (apply (lambda (G16542name G16543export* G16544b*) (begin (if (G11611id? G16542name) (void) (G12423syntax-violation '#f '"module name must be an identifier" G16528e)) (if (for-all G11611id? G16543export*) (void) (G12423syntax-violation '#f '"module exports must be identifiers" G16528e)) (values G16542name (list->vector G16543export*) G16544b*))) G16540ls/false) (G12423syntax-violation '#f '"invalid syntax" G16538t))) (G12190syntax-dispatch G16538t '(_ any each-any . each-any)))) G16530t))) (G12190syntax-dispatch G16530t '(_ each-any . each-any)))) G16528e))) (set! G12256G12251 (make-record-type-descriptor 'module-interface '#f 'G12254 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G12258G12253 '#f) (set! G12260G12252 (make-record-constructor-descriptor G12256G12251 '#f G12258G12253)) (set! G12265module-interface? (record-predicate G12256G12251)) (set! G12267make-module-interface (record-constructor G12260G12252)) (set! G12269module-interface-first-mark (record-accessor G12256G12251 '0)) (set! G12271module-interface-exp-id-vec (record-accessor G12256G12251 '1)) (set! G12273module-interface-exp-lab-vec (record-accessor G12256G12251 '2)) (set! G12275set-module-interface-first-mark! (record-mutator G12256G12251 '0)) (set! G12277set-module-interface-exp-id-vec! (record-mutator G12256G12251 '1)) (set! G12279set-module-interface-exp-lab-vec! (record-mutator G12256G12251 '2)) (set! G12281module-interface-exp-id* (lambda (G16548iface G16549id) ((lambda (G16553diff-marks) (begin (set! G16553diff-marks (lambda (G16560ls G16561x) (begin (if (null? G16560ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G16564a) (if (eq? G16564a G16561x) '() (cons G16564a (G16553diff-marks (cdr G16560ls) G16561x)))) (car G16560ls))))) ((lambda (G16554diff G16555id-vec) (if (null? G16554diff) G16555id-vec (vector-map (lambda (G16558x) (G11557make-stx (G11559stx-expr G16558x) (append G16554diff (G11561stx-mark* G16558x)) '() '())) G16555id-vec))) (G16553diff-marks (G11561stx-mark* G16549id) (G12269module-interface-first-mark G16548iface)) (G12271module-interface-exp-id-vec G16548iface)))) '#f))) (set! G12283chi-internal-module (lambda (G16566e G16567r G16568mr G16569lex* G16570rhs* G16571mod** G16572kwd*) (call-with-values (lambda () (G12250parse-module G16566e)) (lambda (G16583G16580LAMBDA G16584G16581LAMBDA G16585G16582LAMBDA) ((lambda (G16589e* G16590exp-id* G16591name) ((lambda (G16595rib) ((lambda (G16597e*) ((lambda () (call-with-values (lambda () (G12285chi-body* G16597e* G16567r G16568mr G16569lex* G16570rhs* G16571mod** G16572kwd* G16595rib '#f)) (lambda (G16606G16599LAMBDA G16607G16600LAMBDA G16608G16601LAMBDA G16609G16602LAMBDA G16610G16603LAMBDA G16611G16604LAMBDA G16612G16605LAMBDA) ((lambda (G16620kwd* G16621mod** G16622rhs* G16623lex* G16624mr G16625r G16626e*) ((lambda (G16634exp-lab* G16635mod**) (if (not G16591name) (values G16623lex* G16622rhs* G16590exp-id* G16634exp-lab* G16625r G16624mr G16635mod** G16620kwd*) ((lambda (G16638lab G16639iface) (values G16623lex* G16622rhs* (vector G16591name) (vector G16638lab) (cons (cons G16638lab (cons '$module G16639iface)) G16625r) (cons (cons G16638lab (cons '$module G16639iface)) G16624mr) G16635mod** G16620kwd*)) (G11489gen-label 'module) (G12267make-module-interface (car (G11561stx-mark* G16591name)) (vector-map (lambda (G16642x) (G11557make-stx (G11559stx-expr G16642x) (G11561stx-mark* G16642x) '() '())) G16590exp-id*) G16634exp-lab*)))) (vector-map (lambda (G16644x) ((lambda (G16646t) (if G16646t G16646t (begin '#f (G12423syntax-violation '#f '"cannot find module export" G16644x)))) (G11637id->label (G11557make-stx (G11613id->sym G16644x) (G11561stx-mark* G16644x) (list G16595rib) '())))) G16590exp-id*) (cons G16626e* G16621mod**))) G16612G16605LAMBDA G16611G16604LAMBDA G16610G16603LAMBDA G16609G16602LAMBDA G16608G16601LAMBDA G16607G16600LAMBDA G16606G16599LAMBDA)))))) (map (lambda (G16648x) (G11591add-subst G16595rib G16648x)) (G11609syntax->list G16589e*)))) (G11530make-empty-rib))) G16585G16582LAMBDA G16584G16581LAMBDA G16583G16580LAMBDA))))) (set! G12285chi-body* (lambda (G16650e* G16651r G16652mr G16653lex* G16654rhs* G16655mod** G16656kwd* G16657rib G16658top?) (if (null? G16650e*) (values G16650e* G16651r G16652mr G16653lex* G16654rhs* G16655mod** G16656kwd*) ((lambda (G16668e) (call-with-values (lambda () (G11651syntax-type G16668e G16651r)) (lambda (G16673G16670LAMBDA G16674G16671LAMBDA G16675G16672LAMBDA) ((lambda (G16679kwd G16680value G16681type) ((lambda (G16685kwd*) ((lambda (G16687t) (if (eqv? G16687t 'define) (call-with-values (lambda () (G12070parse-define G16668e)) (lambda (G16878G16876LAMBDA G16879G16877LAMBDA) ((lambda (G16882rhs G16883id) (begin (if (G11625bound-id-member? G16883id G16685kwd*) (G12423syntax-violation '#f '"cannot redefine keyword" G16668e) (void)) (call-with-values (lambda () (G11493gen-define-label+loc G16883id G16657rib)) (lambda (G16888G16886LAMBDA G16889G16887LAMBDA) ((lambda (G16892lex G16893lab) (begin (G11532extend-rib! G16657rib G16883id G16893lab) (G12285chi-body* (cdr G16650e*) (G12084add-lexical G16893lab G16892lex G16651r) G16652mr (cons G16892lex G16653lex*) (cons G16882rhs G16654rhs*) G16655mod** G16685kwd* G16657rib G16658top?))) G16889G16887LAMBDA G16888G16886LAMBDA))))) G16879G16877LAMBDA G16878G16876LAMBDA))) (if (eqv? G16687t 'define-syntax) (call-with-values (lambda () (G12072parse-define-syntax G16668e)) (lambda (G16862G16860LAMBDA G16863G16861LAMBDA) ((lambda (G16866rhs G16867id) (begin (if (G11625bound-id-member? G16867id G16685kwd*) (G12423syntax-violation '#f '"cannot redefine keyword" G16668e) (void)) ((lambda (G16870lab G16871expanded-rhs) (begin (G11532extend-rib! G16657rib G16867id G16870lab) ((lambda (G16874b) (G12285chi-body* (cdr G16650e*) (cons (cons G16870lab G16874b) G16651r) (cons (cons G16870lab G16874b) G16652mr) G16653lex* G16654rhs* G16655mod** G16685kwd* G16657rib G16658top?)) (G11682make-eval-transformer G16871expanded-rhs)))) (G11495gen-define-label G16867id G16657rib) (G12287expand-transformer G16866rhs G16652mr)))) G16863G16861LAMBDA G16862G16860LAMBDA))) (if (memv G16687t '(let-syntax letrec-syntax)) ((lambda (G16834t) ((lambda (G16836ls/false) (if (if G16836ls/false (begin '#f (apply (lambda (G16838xlhs* G16839xrhs* G16840xbody*) (if (G11621valid-bound-ids? G16838xlhs*) (void) (G12423syntax-violation '#f '"invalid identifiers" G16668e))) G16836ls/false)) '#f) (apply (lambda (G16844xlhs* G16845xrhs* G16846xbody*) ((lambda (G16850xlab*) ((lambda (G16852xrib) ((lambda (G16854xb*) ((lambda () (G12285chi-body* (append (map (lambda (G16856x) (G11591add-subst G16852xrib G16856x)) G16846xbody*) (cdr G16650e*)) (append (map cons G16850xlab* G16854xb*) G16651r) (append (map cons G16850xlab* G16854xb*) G16652mr) G16653lex* G16654rhs* G16655mod** G16685kwd* G16657rib G16658top?)))) (map (lambda (G16858x) (G11682make-eval-transformer (G12287expand-transformer (if (eq? G16681type 'let-syntax) G16858x (G11591add-subst G16852xrib G16858x)) G16652mr))) G16845xrhs*))) (G11540make-full-rib G16844xlhs* G16850xlab*))) (map G11489gen-label G16844xlhs*))) G16836ls/false) (G12423syntax-violation '#f '"invalid syntax" G16834t))) (G12190syntax-dispatch G16834t '(_ #(each (any any)) . each-any)))) G16668e) (if (eqv? G16687t 'begin) ((lambda (G16828t) ((lambda (G16830ls/false) (if G16830ls/false (apply (lambda (G16832x*) (G12285chi-body* (append G16832x* (cdr G16650e*)) G16651r G16652mr G16653lex* G16654rhs* G16655mod** G16685kwd* G16657rib G16658top?)) G16830ls/false) (G12423syntax-violation '#f '"invalid syntax" G16828t))) (G12190syntax-dispatch G16828t '(_ . each-any)))) G16668e) (if (memv G16687t '(global-macro global-macro!)) (G12285chi-body* (cons (G11591add-subst G16657rib (G12220chi-global-macro G16680value G16668e)) (cdr G16650e*)) G16651r G16652mr G16653lex* G16654rhs* G16655mod** G16685kwd* G16657rib G16658top?) (if (memv G16687t '(local-macro local-macro!)) (G12285chi-body* (cons (G11591add-subst G16657rib (G12218chi-local-macro G16680value G16668e)) (cdr G16650e*)) G16651r G16652mr G16653lex* G16654rhs* G16655mod** G16685kwd* G16657rib G16658top?) (if (memv G16687t '(macro macro!)) (G12285chi-body* (cons (G11591add-subst G16657rib (G12216chi-macro G16680value G16668e)) (cdr G16650e*)) G16651r G16652mr G16653lex* G16654rhs* G16655mod** G16685kwd* G16657rib G16658top?) (if (eqv? G16687t 'module) (call-with-values (lambda () (G12283chi-internal-module G16668e G16651r G16652mr G16653lex* G16654rhs* G16655mod** G16685kwd*)) (lambda (G16792G16784LAMBDA G16793G16785LAMBDA G16794G16786LAMBDA G16795G16787LAMBDA G16796G16788LAMBDA G16797G16789LAMBDA G16798G16790LAMBDA G16799G16791LAMBDA) ((lambda (G16808kwd* G16809mod** G16810mr G16811r G16812m-exp-lab* G16813m-exp-id* G16814rhs* G16815lex*) (begin (vector-for-each (lambda (G16824id G16825lab) (G11532extend-rib! G16657rib G16824id G16825lab)) G16813m-exp-id* G16812m-exp-lab*) (G12285chi-body* (cdr G16650e*) G16811r G16810mr G16815lex* G16814rhs* G16809mod** G16808kwd* G16657rib G16658top?))) G16799G16791LAMBDA G16798G16790LAMBDA G16797G16789LAMBDA G16796G16788LAMBDA G16795G16787LAMBDA G16794G16786LAMBDA G16793G16785LAMBDA G16792G16784LAMBDA))) (if (eqv? G16687t 'library) (begin (G12397library-expander (G11633stx->datum G16668e)) (G12285chi-body* (cdr G16650e*) G16651r G16652mr G16653lex* G16654rhs* G16655mod** G16685kwd* G16657rib G16658top?)) (if (eqv? G16687t 'import) (begin ((lambda () ((lambda (G16689module-import? G16691module-import G16693library-import) (begin (set! G16689module-import? (lambda (G16764e) ((lambda (G16766t) ((lambda (G16768ls/false) (if (if G16768ls/false (begin '#f (apply (lambda (G16770id) (G11611id? G16770id)) G16768ls/false)) '#f) (apply (lambda (G16772id) '#t) G16768ls/false) ((lambda (G16774t) ((lambda (G16776ls/false) (if G16776ls/false (apply (lambda (G16778imp*) '#f) G16776ls/false) ((lambda (G16780t) ((lambda (G16782ls/false) (if G16782ls/false (apply (lambda () (G12423syntax-violation '#f '"malformed import form" G16764e)) G16782ls/false) (G12423syntax-violation '#f '"invalid syntax" G16780t))) (G12190syntax-dispatch G16780t '_))) G16774t))) (G12190syntax-dispatch G16774t '(_ . each-any)))) G16766t))) (G12190syntax-dispatch G16766t '(_ any)))) G16764e))) (set! G16691module-import (lambda (G16734e G16735r) ((lambda (G16738t) ((lambda (G16740ls/false) (if (if G16740ls/false (begin '#f (apply (lambda (G16742id) (G11611id? G16742id)) G16740ls/false)) '#f) (apply (lambda (G16744id) (call-with-values (lambda () (G11651syntax-type G16744id G16735r)) (lambda (G16749G16746LAMBDA G16750G16747LAMBDA G16751G16748LAMBDA) ((lambda (G16755kwd G16756value G16757type) ((lambda (G16761t) (if (eqv? G16761t '$module) ((lambda (G16762iface) (values (G12281module-interface-exp-id* G16762iface G16744id) (G12273module-interface-exp-lab-vec G16762iface))) G16756value) (G12423syntax-violation '#f '"invalid import" G16734e))) G16757type)) G16751G16748LAMBDA G16750G16747LAMBDA G16749G16746LAMBDA)))) G16740ls/false) (G12423syntax-violation '#f '"invalid syntax" G16738t))) (G12190syntax-dispatch G16738t '(_ any)))) G16734e))) (set! G16693library-import (lambda (G16708e) ((lambda (G16710t) ((lambda (G16712ls/false) (if G16712ls/false (apply (lambda (G16714ctxt G16715imp*) (call-with-values (lambda () (G12295parse-import-spec* (G12429syntax->datum G16715imp*))) (lambda (G16720G16718LAMBDA G16721G16719LAMBDA) ((lambda (G16724subst-labels G16725subst-names) (values (vector-map (lambda (G16728name) (G11577datum->stx G16714ctxt G16728name)) G16725subst-names) G16724subst-labels)) G16721G16719LAMBDA G16720G16718LAMBDA)))) G16712ls/false) ((lambda (G16730t) ((lambda (G16732ls/false) (if G16732ls/false (apply (lambda () (G12423syntax-violation '#f '"invalid import form" G16708e)) G16732ls/false) (G12423syntax-violation '#f '"invalid syntax" G16730t))) (G12190syntax-dispatch G16730t '_))) G16710t))) (G12190syntax-dispatch G16710t '(any . each-any)))) G16708e))) (call-with-values (lambda () (if (G16689module-import? G16668e) (G16691module-import G16668e G16651r) (G16693library-import G16668e))) (lambda (G16696G16694LAMBDA G16697G16695LAMBDA) ((lambda (G16700lab* G16701id*) (vector-for-each (lambda (G16704id G16705lab) (G11532extend-rib! G16657rib G16704id G16705lab)) G16701id* G16700lab*)) G16697G16695LAMBDA G16696G16694LAMBDA))))) '#f '#f '#f))) (G12285chi-body* (cdr G16650e*) G16651r G16652mr G16653lex* G16654rhs* G16655mod** G16685kwd* G16657rib G16658top?)) (if G16658top? (G12285chi-body* (cdr G16650e*) G16651r G16652mr (cons (G11485gen-lexical 'dummy) G16653lex*) (cons (cons 'top-expr G16668e) G16654rhs*) G16655mod** G16685kwd* G16657rib G16658top?) (values G16650e* G16651r G16652mr G16653lex* G16654rhs* G16655mod** G16685kwd*))))))))))))) G16681type)) (if (G11611id? G16679kwd) (cons G16679kwd G16656kwd*) G16656kwd*))) G16675G16672LAMBDA G16674G16671LAMBDA G16673G16670LAMBDA)))) (car G16650e*))))) (set! G12287expand-transformer (lambda (G16896expr G16897r) ((lambda (G16900rtc) ((lambda (G16902expanded-rhs) (begin (for-each ((lambda (G16904mark-visit) (lambda (G16906x) (begin (G11109G10749invoke-library G16906x) (G16904mark-visit G16906x)))) (G12303vis-collector)) (G16900rtc)) G16902expanded-rhs)) ((lambda (G16912G16908inv-collector G16913G16909vis-collector G16914G16910inv-collector G16915G16911vis-collector) ((lambda (G16920swap) (dynamic-wind G16920swap (lambda () (G12226chi-expr G16896expr G16897r G16897r)) G16920swap)) (lambda () (begin ((lambda (G16922t) (begin (G16912G16908inv-collector G16914G16910inv-collector) (set! G16914G16910inv-collector G16922t))) (G16912G16908inv-collector)) ((lambda (G16924t) (begin (G16913G16909vis-collector G16915G16911vis-collector) (set! G16915G16911vis-collector G16924t))) (G16913G16909vis-collector)))))) G12301inv-collector G12303vis-collector G16900rtc (lambda (G16926x) (values))))) (G12299make-collector)))) (set! G12289parse-exports (lambda (G16928exp*) ((lambda (G16931idsyn?) (begin (set! G16931idsyn? (lambda (G16960x) (symbol? (G12429syntax->datum G16960x)))) ((letrec ((G16932f (lambda (G16934exp* G16935int* G16936ext*) (if (null? G16934exp*) (begin ((lambda (G16940id*) (if (G11621valid-bound-ids? G16940id*) (void) (G12423syntax-violation 'export '"invalid exports" (G12246find-dups G16940id*)))) (map (lambda (G16942x) (G11557make-stx G16942x G11481top-mark* '() '())) G16936ext*)) (values (map G12429syntax->datum G16935int*) (map G12429syntax->datum G16936ext*))) ((lambda (G16944t) ((lambda (G16946ls/false) (if G16946ls/false (apply (lambda (G16948rename G16949i* G16950e*) (begin (if (if (eq? (G12429syntax->datum G16948rename) 'rename) (if (for-all G16931idsyn? G16949i*) (begin '#f (for-all G16931idsyn? G16950e*)) '#f) '#f) (void) (G12423syntax-violation 'export '"invalid export specifier" (car G16934exp*))) (G16932f (cdr G16934exp*) (append G16949i* G16935int*) (append G16950e* G16936ext*)))) G16946ls/false) ((lambda (G16954t) ((lambda (G16956ls/false) (if G16956ls/false (apply (lambda (G16958ie) (begin (if (G16931idsyn? G16958ie) (void) (G12423syntax-violation 'export '"invalid export" G16958ie)) (G16932f (cdr G16934exp*) (cons G16958ie G16935int*) (cons G16958ie G16936ext*)))) G16956ls/false) (G12423syntax-violation '#f '"invalid syntax" G16954t))) (G12190syntax-dispatch G16954t 'any))) G16944t))) (G12190syntax-dispatch G16944t '(any . #(each (any any)))))) (car G16934exp*)))))) G16932f) G16928exp* '() '()))) '#f))) (set! G12291parse-library-name (lambda (G16962spec) ((lambda (G16965parse) (begin (set! G16965parse (lambda (G16976x) ((lambda (G16978t) ((lambda (G16980ls/false) (if (if G16980ls/false (begin '#f (apply (lambda (G16982v*) (for-all (lambda (G16984x) ((lambda (G16986x) (if (integer? G16986x) (begin '#f (exact? G16986x)) '#f)) (G12429syntax->datum G16984x))) G16982v*)) G16980ls/false)) '#f) (apply (lambda (G16988v*) (values '() (map G12429syntax->datum G16988v*))) G16980ls/false) ((lambda (G16990t) ((lambda (G16992ls/false) (if (if G16992ls/false (begin '#f (apply (lambda (G16994x G16995rest) (symbol? (G12429syntax->datum G16994x))) G16992ls/false)) '#f) (apply (lambda (G16998x G16999rest) (call-with-values (lambda () (G16965parse G16999rest)) (lambda (G17004G17002LAMBDA G17005G17003LAMBDA) ((lambda (G17008v* G17009x*) (values (cons (G12429syntax->datum G16998x) G17009x*) G17008v*)) G17005G17003LAMBDA G17004G17002LAMBDA)))) G16992ls/false) ((lambda (G17012t) ((lambda (G17014ls/false) (if G17014ls/false (apply (lambda () (values '() '())) G17014ls/false) ((lambda (G17016t) ((lambda (G17018ls/false) (if G17018ls/false (apply (lambda () (G12423syntax-violation '#f '"invalid library name" G16962spec)) G17018ls/false) (G12423syntax-violation '#f '"invalid syntax" G17016t))) (G12190syntax-dispatch G17016t '_))) G17012t))) (G12190syntax-dispatch G17012t '()))) G16990t))) (G12190syntax-dispatch G16990t '(any . any)))) G16978t))) (G12190syntax-dispatch G16978t '(each-any)))) G16976x))) (call-with-values (lambda () (G16965parse G16962spec)) (lambda (G16968G16966LAMBDA G16969G16967LAMBDA) ((lambda (G16972ver* G16973name*) (begin (if (null? G16973name*) (G12423syntax-violation '#f '"empty library name" G16962spec) (void)) (values G16973name* G16972ver*))) G16969G16967LAMBDA G16968G16966LAMBDA))))) '#f))) (set! G12293parse-library (lambda (G17020e) ((lambda (G17022t) ((lambda (G17024ls/false) (if (if G17024ls/false (begin '#f (apply (lambda (G17026library G17027name* G17028export G17029exp* G17030import G17031imp* G17032b*) (if (eq? (G12429syntax->datum G17028export) 'export) (if (eq? (G12429syntax->datum G17030import) 'import) (begin '#f (eq? (G12429syntax->datum G17026library) 'library)) '#f) '#f)) G17024ls/false)) '#f) (apply (lambda (G17040library G17041name* G17042export G17043exp* G17044import G17045imp* G17046b*) (values G17041name* G17043exp* G17045imp* G17046b*)) G17024ls/false) ((lambda (G17054t) ((lambda (G17056ls/false) (if G17056ls/false (apply (lambda () (G12423syntax-violation '#f '"malformed library" G17020e)) G17056ls/false) (G12423syntax-violation '#f '"invalid syntax" G17054t))) (G12190syntax-dispatch G17054t '_))) G17022t))) (G12190syntax-dispatch G17022t '(any each-any (any . each-any) (any . each-any) . each-any)))) G17020e))) (set! G12295parse-import-spec* (lambda (G17058imp*) ((lambda (G17061idsyn? G17063dup-error G17065merge-substs G17067exclude* G17069find* G17071rem* G17073remove-dups G17075parse-library-name G17077import-library G17079get-import G17081add-imports!) (begin (set! G17061idsyn? (lambda (G17568x) (symbol? (G12429syntax->datum G17568x)))) (set! G17063dup-error (lambda (G17566name) (G12423syntax-violation 'import '"two imports with different bindings" G17566name))) (set! G17065merge-substs (lambda (G17548s G17549subst) ((lambda (G17553insert-to-subst) (begin (set! G17553insert-to-subst (lambda (G17554a G17555subst) ((lambda (G17558name G17559label) ((lambda (G17562t) (if G17562t ((lambda (G17564x) (if (eq? (cdr G17564x) G17559label) G17555subst (G17063dup-error G17558name))) G17562t) (cons G17554a G17555subst))) (assq G17558name G17555subst))) (car G17554a) (cdr G17554a)))) (if (null? G17548s) G17549subst (G17553insert-to-subst (car G17548s) (G17065merge-substs (cdr G17548s) G17549subst))))) '#f))) (set! G17067exclude* (lambda (G17506sym* G17507subst) ((lambda (G17511exclude) (begin (set! G17511exclude (lambda (G17532sym G17533subst) (if (null? G17533subst) (G12423syntax-violation 'import '"cannot rename unbound identifier" G17532sym) (if (eq? G17532sym (caar G17533subst)) (values (cdar G17533subst) (cdr G17533subst)) ((lambda (G17536a) (call-with-values (lambda () (G17511exclude G17532sym (cdr G17533subst))) (lambda (G17540G17538LAMBDA G17541G17539LAMBDA) ((lambda (G17544subst G17545old) (values G17545old (cons G17536a G17544subst))) G17541G17539LAMBDA G17540G17538LAMBDA)))) (car G17533subst)))))) (if (null? G17506sym*) (values '() G17507subst) (call-with-values (lambda () (G17511exclude (car G17506sym*) G17507subst)) (lambda (G17514G17512LAMBDA G17515G17513LAMBDA) ((lambda (G17518subst G17519old) (call-with-values (lambda () (G17067exclude* (cdr G17506sym*) G17518subst)) (lambda (G17524G17522LAMBDA G17525G17523LAMBDA) ((lambda (G17528subst G17529old*) (values (cons G17519old G17529old*) G17528subst)) G17525G17523LAMBDA G17524G17522LAMBDA)))) G17515G17513LAMBDA G17514G17512LAMBDA)))))) '#f))) (set! G17069find* (lambda (G17498sym* G17499subst) (map (lambda (G17502x) ((lambda (G17504t) (if G17504t (cdr G17504t) (G12423syntax-violation 'import '"cannot find identifier" G17502x))) (assq G17502x G17499subst))) G17498sym*))) (set! G17071rem* (lambda (G17490sym* G17491subst) ((letrec ((G17494f (lambda (G17496subst) (if (null? G17496subst) '() (if (memq (caar G17496subst) G17490sym*) (G17494f (cdr G17496subst)) (cons (car G17496subst) (G17494f (cdr G17496subst)))))))) G17494f) G17491subst))) (set! G17073remove-dups (lambda (G17488ls) (if (null? G17488ls) '() (if (memq (car G17488ls) (cdr G17488ls)) (G17073remove-dups (cdr G17488ls)) (cons (car G17488ls) (G17073remove-dups (cdr G17488ls))))))) (set! G17075parse-library-name (lambda (G17260spec) ((lambda (G17263subversion? G17265subversion-pred G17267version-pred) (begin (set! G17263subversion? (lambda (G17486x) (if (integer? G17486x) (if (exact? G17486x) (begin '#f (>= G17486x '0)) '#f) '#f))) (set! G17265subversion-pred (lambda (G17390x*) ((lambda (G17392t) ((lambda (G17394ls/false) (if (if G17394ls/false (begin '#f (apply (lambda (G17396n) (G17263subversion? (G12429syntax->datum G17396n))) G17394ls/false)) '#f) (apply (lambda (G17398n) (lambda (G17400x) (= G17400x (G12429syntax->datum G17398n)))) G17394ls/false) ((lambda (G17402t) ((lambda (G17404ls/false) (if (if G17404ls/false (begin '#f (apply (lambda (G17406p? G17407sub*) (eq? (G12429syntax->datum G17406p?) 'and)) G17404ls/false)) '#f) (apply (lambda (G17410p? G17411sub*) ((lambda (G17414p*) (lambda (G17416x) (for-all (lambda (G17418p) (G17418p G17416x)) G17414p*))) (map G17265subversion-pred G17411sub*))) G17404ls/false) ((lambda (G17420t) ((lambda (G17422ls/false) (if (if G17422ls/false (begin '#f (apply (lambda (G17424p? G17425sub*) (eq? (G12429syntax->datum G17424p?) 'or)) G17422ls/false)) '#f) (apply (lambda (G17428p? G17429sub*) ((lambda (G17432p*) (lambda (G17434x) (exists (lambda (G17436p) (G17436p G17434x)) G17432p*))) (map G17265subversion-pred G17429sub*))) G17422ls/false) ((lambda (G17438t) ((lambda (G17440ls/false) (if (if G17440ls/false (begin '#f (apply (lambda (G17442p? G17443sub) (eq? (G12429syntax->datum G17442p?) 'not)) G17440ls/false)) '#f) (apply (lambda (G17446p? G17447sub) ((lambda (G17450p) (lambda (G17452x) (not (G17450p G17452x)))) (G17265subversion-pred G17447sub))) G17440ls/false) ((lambda (G17454t) ((lambda (G17456ls/false) (if (if G17456ls/false (begin '#f (apply (lambda (G17458p? G17459n) (if (eq? (G12429syntax->datum G17458p?) '<=) (begin '#f (G17263subversion? (G12429syntax->datum G17459n))) '#f)) G17456ls/false)) '#f) (apply (lambda (G17462p? G17463n) (lambda (G17466x) (<= G17466x (G12429syntax->datum G17463n)))) G17456ls/false) ((lambda (G17468t) ((lambda (G17470ls/false) (if (if G17470ls/false (begin '#f (apply (lambda (G17472p? G17473n) (if (eq? (G12429syntax->datum G17472p?) '>=) (begin '#f (G17263subversion? G17473n)) '#f)) G17470ls/false)) '#f) (apply (lambda (G17476p? G17477n) (lambda (G17480x) (>= G17480x (G12429syntax->datum G17477n)))) G17470ls/false) ((lambda (G17482t) ((lambda (G17484ls/false) (if G17484ls/false (apply (lambda () (G12423syntax-violation 'import '"invalid sub-version spec" G17260spec G17390x*)) G17484ls/false) (G12423syntax-violation '#f '"invalid syntax" G17482t))) (G12190syntax-dispatch G17482t '_))) G17468t))) (G12190syntax-dispatch G17468t '(any any)))) G17454t))) (G12190syntax-dispatch G17454t '(any any)))) G17438t))) (G12190syntax-dispatch G17438t '(any any)))) G17420t))) (G12190syntax-dispatch G17420t '(any . each-any)))) G17402t))) (G12190syntax-dispatch G17402t '(any . each-any)))) G17392t))) (G12190syntax-dispatch G17392t 'any))) G17390x*))) (set! G17267version-pred (lambda (G17310x*) ((lambda (G17312t) ((lambda (G17314ls/false) (if G17314ls/false (apply (lambda () (lambda (G17316x) '#t)) G17314ls/false) ((lambda (G17318t) ((lambda (G17320ls/false) (if (if G17320ls/false (begin '#f (apply (lambda (G17322c G17323ver*) (eq? (G12429syntax->datum G17322c) 'and)) G17320ls/false)) '#f) (apply (lambda (G17326c G17327ver*) ((lambda (G17330p*) (lambda (G17332x) (for-all (lambda (G17334p) (G17334p G17332x)) G17330p*))) (map G17267version-pred G17327ver*))) G17320ls/false) ((lambda (G17336t) ((lambda (G17338ls/false) (if (if G17338ls/false (begin '#f (apply (lambda (G17340c G17341ver*) (eq? (G12429syntax->datum G17340c) 'or)) G17338ls/false)) '#f) (apply (lambda (G17344c G17345ver*) ((lambda (G17348p*) (lambda (G17350x) (exists (lambda (G17352p) (G17352p G17350x)) G17348p*))) (map G17267version-pred G17345ver*))) G17338ls/false) ((lambda (G17354t) ((lambda (G17356ls/false) (if (if G17356ls/false (begin '#f (apply (lambda (G17358c G17359ver) (eq? (G12429syntax->datum G17358c) 'not)) G17356ls/false)) '#f) (apply (lambda (G17362c G17363ver) ((lambda (G17366p) (lambda (G17368x) (not (G17366p G17368x)))) (G17267version-pred G17363ver))) G17356ls/false) ((lambda (G17370t) ((lambda (G17372ls/false) (if G17372ls/false (apply (lambda (G17374sub*) ((lambda (G17376p*) (lambda (G17378x) ((letrec ((G17380f (lambda (G17382p* G17383x) (if (null? G17382p*) '#t (if (null? G17383x) '#f (if ((car G17382p*) (car G17383x)) (begin '#f (G17380f (cdr G17382p*) (cdr G17383x))) '#f)))))) G17380f) G17376p* G17378x))) (map G17265subversion-pred G17374sub*))) G17372ls/false) ((lambda (G17386t) ((lambda (G17388ls/false) (if G17388ls/false (apply (lambda () (G12423syntax-violation 'import '"invalid version spec" G17260spec G17310x*)) G17388ls/false) (G12423syntax-violation '#f '"invalid syntax" G17386t))) (G12190syntax-dispatch G17386t '_))) G17370t))) (G12190syntax-dispatch G17370t 'each-any))) G17354t))) (G12190syntax-dispatch G17354t '(any any)))) G17336t))) (G12190syntax-dispatch G17336t '(any . each-any)))) G17318t))) (G12190syntax-dispatch G17318t '(any . each-any)))) G17312t))) (G12190syntax-dispatch G17312t '()))) G17310x*))) ((letrec ((G17268f (lambda (G17270x) ((lambda (G17272t) ((lambda (G17274ls/false) (if G17274ls/false (apply (lambda (G17276version-spec*) (values '() (G17267version-pred G17276version-spec*))) G17274ls/false) ((lambda (G17278t) ((lambda (G17280ls/false) (if (if G17280ls/false (begin '#f (apply (lambda (G17282x G17283x*) (G17061idsyn? G17282x)) G17280ls/false)) '#f) (apply (lambda (G17286x G17287x*) (call-with-values (lambda () (G17268f G17287x*)) (lambda (G17292G17290LAMBDA G17293G17291LAMBDA) ((lambda (G17296pred G17297name) (values (cons (G12429syntax->datum G17286x) G17297name) G17296pred)) G17293G17291LAMBDA G17292G17290LAMBDA)))) G17280ls/false) ((lambda (G17300t) ((lambda (G17302ls/false) (if G17302ls/false (apply (lambda () (values '() (lambda (G17304x) '#t))) G17302ls/false) ((lambda (G17306t) ((lambda (G17308ls/false) (if G17308ls/false (apply (lambda () (G12423syntax-violation '#f '"invalid import spec" G17260spec)) G17308ls/false) (G12423syntax-violation '#f '"invalid syntax" G17306t))) (G12190syntax-dispatch G17306t '_))) G17300t))) (G12190syntax-dispatch G17300t '()))) G17278t))) (G12190syntax-dispatch G17278t '(any . any)))) G17272t))) (G12190syntax-dispatch G17272t '(each-any)))) G17270x)))) G17268f) G17260spec))) '#f '#f '#f))) (set! G17077import-library (lambda (G17246spec*) (call-with-values (lambda () (G17075parse-library-name G17246spec*)) (lambda (G17250G17248LAMBDA G17251G17249LAMBDA) ((lambda (G17254pred G17255name) (begin (if (null? G17255name) (G12423syntax-violation 'import '"empty library name" G17246spec*) (void)) ((lambda (G17258lib) (begin (if G17258lib (void) (G12423syntax-violation 'import '"cannot find library with required name" G17255name)) (if (G17254pred (G11062G10655library-version G17258lib)) (void) (G12423syntax-violation 'import '"library does not satisfy version specification" G17246spec* G17258lib)) ((G12305imp-collector) G17258lib) (G11066G10663library-subst G17258lib))) (G11102G10735find-library-by-name G17255name)))) G17251G17249LAMBDA G17250G17248LAMBDA))))) (set! G17079get-import (lambda (G17104spec) ((lambda (G17106t) ((lambda (G17108ls/false) (if (if G17108ls/false (begin '#f (apply (lambda (G17110x G17111x*) (not (memq (G12429syntax->datum G17110x) '(for rename except only prefix library)))) G17108ls/false)) '#f) (apply (lambda (G17114x G17115x*) (G17077import-library (cons G17114x G17115x*))) G17108ls/false) ((lambda (G17118t) ((lambda (G17120ls/false) (if (if G17120ls/false (begin '#f (apply (lambda (G17122rename G17123isp G17124old* G17125new*) (if (eq? (G12429syntax->datum G17122rename) 'rename) (if (for-all G17061idsyn? G17124old*) (begin '#f (for-all G17061idsyn? G17125new*)) '#f) '#f)) G17120ls/false)) '#f) (apply (lambda (G17130rename G17131isp G17132old* G17133new*) ((lambda (G17138subst G17139old* G17140new*) ((lambda (G17144old-label*) ((lambda (G17146subst) (G17065merge-substs (map cons G17140new* G17144old-label*) G17146subst)) (G17071rem* G17139old* G17138subst))) (G17069find* G17139old* G17138subst))) (G17079get-import G17131isp) (map G12429syntax->datum G17132old*) (map G12429syntax->datum G17133new*))) G17120ls/false) ((lambda (G17148t) ((lambda (G17150ls/false) (if (if G17150ls/false (begin '#f (apply (lambda (G17152except G17153isp G17154sym*) (if (eq? (G12429syntax->datum G17152except) 'except) (begin '#f (for-all G17061idsyn? G17154sym*)) '#f)) G17150ls/false)) '#f) (apply (lambda (G17158except G17159isp G17160sym*) ((lambda (G17164subst) (G17071rem* (map G12429syntax->datum G17160sym*) G17164subst)) (G17079get-import G17159isp))) G17150ls/false) ((lambda (G17166t) ((lambda (G17168ls/false) (if (if G17168ls/false (begin '#f (apply (lambda (G17170only G17171isp G17172sym*) (if (eq? (G12429syntax->datum G17170only) 'only) (begin '#f (for-all G17061idsyn? G17172sym*)) '#f)) G17168ls/false)) '#f) (apply (lambda (G17176only G17177isp G17178sym*) ((lambda (G17182subst G17183sym*) ((lambda (G17186sym*) ((lambda (G17188lab*) (map cons G17186sym* G17188lab*)) (G17069find* G17186sym* G17182subst))) (G17073remove-dups G17183sym*))) (G17079get-import G17177isp) (map G12429syntax->datum G17178sym*))) G17168ls/false) ((lambda (G17190t) ((lambda (G17192ls/false) (if (if G17192ls/false (begin '#f (apply (lambda (G17194prefix G17195isp G17196p) (if (eq? (G12429syntax->datum G17194prefix) 'prefix) (begin '#f (G17061idsyn? G17196p)) '#f)) G17192ls/false)) '#f) (apply (lambda (G17200prefix G17201isp G17202p) ((lambda (G17206subst G17207prefix) (map (lambda (G17210x) (cons (string->symbol (string-append G17207prefix (symbol->string (car G17210x)))) (cdr G17210x))) G17206subst)) (G17079get-import G17201isp) (symbol->string (G12429syntax->datum G17202p)))) G17192ls/false) ((lambda (G17212t) ((lambda (G17214ls/false) (if (if G17214ls/false (begin '#f (apply (lambda (G17216library G17217spec*) (eq? (G12429syntax->datum G17216library) 'library)) G17214ls/false)) '#f) (apply (lambda (G17220library G17221spec*) (G17077import-library G17221spec*)) G17214ls/false) ((lambda (G17224t) ((lambda (G17226ls/false) (if (if G17226ls/false (begin '#f (apply (lambda (G17228for G17229isp G17230rest) (eq? (G12429syntax->datum G17228for) 'for)) G17226ls/false)) '#f) (apply (lambda (G17234for G17235isp G17236rest) (G17079get-import G17235isp)) G17226ls/false) ((lambda (G17240t) ((lambda (G17242ls/false) (if G17242ls/false (apply (lambda (G17244spec) (G12423syntax-violation 'import '"invalid import spec" G17244spec)) G17242ls/false) (G12423syntax-violation '#f '"invalid syntax" G17240t))) (G12190syntax-dispatch G17240t 'any))) G17224t))) (G12190syntax-dispatch G17224t '(any any . any)))) G17212t))) (G12190syntax-dispatch G17212t '(any each-any)))) G17190t))) (G12190syntax-dispatch G17190t '(any any any)))) G17166t))) (G12190syntax-dispatch G17166t '(any any . each-any)))) G17148t))) (G12190syntax-dispatch G17148t '(any any . each-any)))) G17118t))) (G12190syntax-dispatch G17118t '(any any . #(each (any any)))))) G17106t))) (G12190syntax-dispatch G17106t '(any . each-any)))) G17104spec))) (set! G17081add-imports! (lambda (G17088imp G17089h) ((lambda (G17092subst) (for-each (lambda (G17094x) ((lambda (G17096name G17097label) ((lambda (G17100t) (if G17100t ((lambda (G17102l) (if (eq? G17102l G17097label) (void) (G17063dup-error G17096name))) G17100t) (hashtable-set! G17089h G17096name G17097label))) (hashtable-ref G17089h G17096name '#f))) (car G17094x) (cdr G17094x))) G17092subst)) (G17079get-import G17088imp)))) ((letrec ((G17082f (lambda (G17084imp* G17085h) (if (null? G17084imp*) (hashtable-entries G17085h) (begin (G17081add-imports! (car G17084imp*) G17085h) (G17082f (cdr G17084imp*) G17085h)))))) G17082f) G17058imp* (make-eq-hashtable)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12297make-top-rib (lambda (G17570names G17571labels) ((lambda (G17574rib) (begin (vector-for-each (lambda (G17576name G17577label) (begin (if (symbol? G17576name) (void) (error 'make-top-rib '"BUG: not a symbol" G17576name)) (G11532extend-rib! G17574rib (G11557make-stx G17576name G11481top-mark* '() '()) G17577label))) G17570names G17571labels) G17574rib)) (G11530make-empty-rib)))) (set! G12299make-collector (lambda () ((lambda (G17580ls) (lambda G17584 ((lambda (G17585) (if (= G17585 '0) (apply (lambda () G17580ls) G17584) (if (= G17585 '1) (apply (lambda (G17582x) (set! G17580ls (G11474set-cons G17582x G17580ls))) G17584) (error 'apply '"invalid arg count")))) (length G17584)))) '()))) (set! G12301inv-collector (G10438G10233make-parameter (lambda G17586args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G17588x) (begin (if (procedure? G17588x) (void) (assertion-violation 'inv-collector '"BUG: not a procedure" G17588x)) G17588x)))) (set! G12303vis-collector (G10438G10233make-parameter (lambda G17590args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G17592x) (begin (if (procedure? G17592x) (void) (assertion-violation 'vis-collector '"BUG: not a procedure" G17592x)) G17592x)))) (set! G12305imp-collector (G10438G10233make-parameter (lambda G17594args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G17596x) (begin (if (procedure? G17596x) (void) (assertion-violation 'imp-collector '"BUG: not a procedure" G17596x)) G17596x)))) (set! G12307chi-library-internal (lambda (G17598e* G17599rib G17600top?) (call-with-values (lambda () (G12285chi-body* G17598e* '() '() '() '() '() '() G17599rib G17600top?)) (lambda (G17611G17604LAMBDA G17612G17605LAMBDA G17613G17606LAMBDA G17614G17607LAMBDA G17615G17608LAMBDA G17616G17609LAMBDA G17617G17610LAMBDA) ((lambda (G17625_kwd* G17626mod** G17627rhs* G17628lex* G17629mr G17630r G17631e*) (values (append (apply append (reverse G17626mod**)) G17631e*) G17630r G17629mr (reverse G17628lex*) (reverse G17627rhs*))) G17617G17610LAMBDA G17616G17609LAMBDA G17615G17608LAMBDA G17614G17607LAMBDA G17613G17606LAMBDA G17612G17605LAMBDA G17611G17604LAMBDA))))) (set! G12309chi-interaction-expr (lambda (G17639e G17640rib G17641r) (call-with-values (lambda () (G12285chi-body* (list G17639e) G17641r G17641r '() '() '() '() G17640rib '#t)) (lambda (G17652G17645LAMBDA G17653G17646LAMBDA G17654G17647LAMBDA G17655G17648LAMBDA G17656G17649LAMBDA G17657G17650LAMBDA G17658G17651LAMBDA) ((lambda (G17666_kwd* G17667mod** G17668rhs* G17669lex* G17670mr G17671r G17672e*) ((lambda (G17680e*) ((lambda (G17682e) (values G17682e G17671r)) (if (null? G17680e*) (G11458G11326build-void) (if (null? (cdr G17680e*)) (car G17680e*) (G11457G11324build-sequence '#f G17680e*))))) (G12240expand-interaction-rhs*/init* (reverse G17669lex*) (reverse G17668rhs*) (append (apply append (reverse G17667mod**)) G17672e*) G17671r G17670mr))) G17658G17651LAMBDA G17657G17650LAMBDA G17656G17649LAMBDA G17655G17648LAMBDA G17654G17647LAMBDA G17653G17646LAMBDA G17652G17645LAMBDA))))) (set! G12311library-body-expander (lambda (G17684name G17685exp* G17686imp* G17687b* G17688top?) ((lambda (G17695itc) (begin (set! G17695itc (G12299make-collector)) ((lambda (G17700G17696imp-collector G17701G17697top-level-context G17702G17698imp-collector G17703G17699top-level-context) ((lambda (G17708swap) (dynamic-wind G17708swap (lambda () (call-with-values (lambda () (G12289parse-exports G17685exp*)) (lambda (G17712G17710LAMBDA G17713G17711LAMBDA) ((lambda (G17716exp-ext* G17717exp-int*) (call-with-values (lambda () (G12295parse-import-spec* G17686imp*)) (lambda (G17722G17720LAMBDA G17723G17721LAMBDA) ((lambda (G17726subst-labels G17727subst-names) ((lambda (G17730rib) ((lambda (G17732b* G17733rtc G17734vtc) ((lambda (G17742G17738inv-collector G17743G17739vis-collector G17744G17740inv-collector G17745G17741vis-collector) ((lambda (G17750swap) (dynamic-wind G17750swap (lambda () (call-with-values (lambda () (G12307chi-library-internal G17732b* G17730rib G17688top?)) (lambda (G17757G17752LAMBDA G17758G17753LAMBDA G17759G17754LAMBDA G17760G17755LAMBDA G17761G17756LAMBDA) ((lambda (G17767rhs* G17768lex* G17769mr G17770r G17771init*) (begin (G11536seal-rib! G17730rib) ((lambda (G17777init*) ((lambda (G17779rhs*) ((lambda () (begin (G11538unseal-rib! G17730rib) ((lambda (G17781loc* G17782export-subst) ((lambda (G17786errstr) (begin (set! G17786errstr '"attempt to export mutated variable") (call-with-values (lambda () (G12407make-export-env/macros G17768lex* G17781loc* G17770r)) (lambda (G17790G17787LAMBDA G17791G17788LAMBDA G17792G17789LAMBDA) ((lambda (G17796macro* G17797global* G17798export-env) (begin (for-each (lambda (G17802s) ((lambda (G17804name G17805label) ((lambda (G17808p) (if G17808p ((lambda (G17810b) ((lambda (G17812type) (if (eq? G17812type 'mutable) (G12423syntax-violation 'export G17786errstr G17804name) (void))) (car G17810b))) (cdr G17808p)) (void))) (assq G17805label G17798export-env))) (car G17802s) (cdr G17802s))) G17782export-subst) ((lambda (G17814invoke-body G17815invoke-definitions) (values (G17695itc) (G17733rtc) (G17734vtc) (G11457G11324build-sequence '#f (append G17815invoke-definitions (list G17814invoke-body))) G17796macro* G17782export-subst G17798export-env)) (G11460G11330build-letrec* '#f G17768lex* G17779rhs* (G12403build-exports G17797global* G17777init*)) (map G11453G11116build-global-define (map cdr G17797global*))))) G17792G17789LAMBDA G17791G17788LAMBDA G17790G17787LAMBDA))))) '#f)) (map G11487gen-global G17768lex*) (G12405make-export-subst G17717exp-int* G17716exp-ext* G17730rib)))))) (G12242chi-rhs* G17767rhs* G17770r G17769mr))) (G12222chi-expr* G17771init* G17770r G17769mr)))) G17761G17756LAMBDA G17760G17755LAMBDA G17759G17754LAMBDA G17758G17753LAMBDA G17757G17752LAMBDA)))) G17750swap)) (lambda () (begin ((lambda (G17818t) (begin (G17742G17738inv-collector G17744G17740inv-collector) (set! G17744G17740inv-collector G17818t))) (G17742G17738inv-collector)) ((lambda (G17820t) (begin (G17743G17739vis-collector G17745G17741vis-collector) (set! G17745G17741vis-collector G17820t))) (G17743G17739vis-collector)))))) G12301inv-collector G12303vis-collector G17733rtc G17734vtc)) (map (lambda (G17822x) (G11557make-stx G17822x G11481top-mark* (list G17730rib) '())) G17687b*) (G12299make-collector) (G12299make-collector))) (G12297make-top-rib G17727subst-names G17726subst-labels))) G17723G17721LAMBDA G17722G17720LAMBDA)))) G17713G17711LAMBDA G17712G17710LAMBDA)))) G17708swap)) (lambda () (begin ((lambda (G17824t) (begin (G17700G17696imp-collector G17702G17698imp-collector) (set! G17702G17698imp-collector G17824t))) (G17700G17696imp-collector)) ((lambda (G17826t) (begin (G17701G17697top-level-context G17703G17699top-level-context) (set! G17703G17699top-level-context G17826t))) (G17701G17697top-level-context)))))) G12305imp-collector G12437top-level-context G17695itc '#f))) '#f))) (set! G12313core-library-expander (lambda (G17828e G17829verify-name) (call-with-values (lambda () (G12293parse-library G17828e)) (lambda (G17836G17832LAMBDA G17837G17833LAMBDA G17838G17834LAMBDA G17839G17835LAMBDA) ((lambda (G17844b* G17845imp* G17846exp* G17847name*) (call-with-values (lambda () (G12291parse-library-name G17847name*)) (lambda (G17854G17852LAMBDA G17855G17853LAMBDA) ((lambda (G17858ver G17859name) (begin (G17829verify-name G17859name) (call-with-values (lambda () (G12311library-body-expander G17859name G17846exp* G17845imp* G17844b* '#f)) (lambda (G17869G17862LAMBDA G17870G17863LAMBDA G17871G17864LAMBDA G17872G17865LAMBDA G17873G17866LAMBDA G17874G17867LAMBDA G17875G17868LAMBDA) ((lambda (G17883export-env G17884export-subst G17885visit-code G17886invoke-code G17887visit-req* G17888invoke-req* G17889imp*) (values G17859name G17858ver G17889imp* G17888invoke-req* G17887visit-req* G17886invoke-code G17885visit-code G17884export-subst G17883export-env)) G17875G17868LAMBDA G17874G17867LAMBDA G17873G17866LAMBDA G17872G17865LAMBDA G17871G17864LAMBDA G17870G17863LAMBDA G17869G17862LAMBDA))))) G17855G17853LAMBDA G17854G17852LAMBDA)))) G17839G17835LAMBDA G17838G17834LAMBDA G17837G17833LAMBDA G17836G17832LAMBDA))))) (set! G12315parse-top-level-program (lambda (G17897e*) ((lambda (G17899t) ((lambda (G17901ls/false) (if (if G17901ls/false (begin '#f (apply (lambda (G17903import G17904imp* G17905b*) (eq? (G12429syntax->datum G17903import) 'import)) G17901ls/false)) '#f) (apply (lambda (G17909import G17910imp* G17911b*) (values G17910imp* G17911b*)) G17901ls/false) ((lambda (G17915t) ((lambda (G17917ls/false) (if (if G17917ls/false (begin '#f (apply (lambda (G17919import G17920x G17921y) (eq? (G12429syntax->datum G17919import) 'import)) G17917ls/false)) '#f) (apply (lambda (G17925import G17926x G17927y) (G12423syntax-violation 'expander '"invalid syntax of top-level program" (G11605syntax-car G17897e*))) G17917ls/false) ((lambda (G17931t) ((lambda (G17933ls/false) (if G17933ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G17933ls/false) (G12423syntax-violation '#f '"invalid syntax" G17931t))) (G12190syntax-dispatch G17931t '_))) G17915t))) (G12190syntax-dispatch G17915t '((any . any) . any)))) G17899t))) (G12190syntax-dispatch G17899t '((any . each-any) . each-any)))) G17897e*))) (set! G12317top-level-expander (lambda (G17935e*) (call-with-values (lambda () (G12315parse-top-level-program G17935e*)) (lambda (G17939G17937LAMBDA G17940G17938LAMBDA) ((lambda (G17943b* G17944imp*) (call-with-values (lambda () (G12311library-body-expander '() '() G17944imp* G17943b* '#t)) (lambda (G17954G17947LAMBDA G17955G17948LAMBDA G17956G17949LAMBDA G17957G17950LAMBDA G17958G17951LAMBDA G17959G17952LAMBDA G17960G17953LAMBDA) ((lambda (G17968export-env G17969export-subst G17970visit-code G17971invoke-code G17972visit-req* G17973invoke-req* G17974imp*) (values G17973invoke-req* G17971invoke-code)) G17960G17953LAMBDA G17959G17952LAMBDA G17958G17951LAMBDA G17957G17950LAMBDA G17956G17949LAMBDA G17955G17948LAMBDA G17954G17947LAMBDA)))) G17940G17938LAMBDA G17939G17937LAMBDA))))) (set! G12323G12318 (make-record-type-descriptor 'env '#f 'G12321 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G12325G12320 '#f) (set! G12327G12319 (make-record-constructor-descriptor G12323G12318 '#f G12325G12320)) (set! G12332env? (record-predicate G12323G12318)) (set! G12334make-env (record-constructor G12327G12319)) (set! G12336env-names (record-accessor G12323G12318 '0)) (set! G12338env-labels (record-accessor G12323G12318 '1)) (set! G12340env-itc (record-accessor G12323G12318 '2)) (set! G12342set-env-names! (record-mutator G12323G12318 '0)) (set! G12344set-env-labels! (record-mutator G12323G12318 '1)) (set! G12346set-env-itc! (record-mutator G12323G12318 '2)) (set! G12348rp (G10435G10227make-record-printer 'env (lambda (G17982x G17983p) (display '"#<environment>" G17983p)))) (set! G12354G12349 (make-record-type-descriptor 'interaction-env '#f 'G12352 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G12356G12351 '#f) (set! G12358G12350 (make-record-constructor-descriptor G12354G12349 '#f G12356G12351)) (set! G12363interaction-env? (record-predicate G12354G12349)) (set! G12365make-interaction-env (record-constructor G12358G12350)) (set! G12367interaction-env-rib (record-accessor G12354G12349 '0)) (set! G12369interaction-env-r (record-accessor G12354G12349 '1)) (set! G12371interaction-env-locs (record-accessor G12354G12349 '2)) (set! G12373set-interaction-env-rib! (record-mutator G12354G12349 '0)) (set! G12375set-interaction-env-r! (record-mutator G12354G12349 '1)) (set! G12377set-interaction-env-locs! (record-mutator G12354G12349 '2)) (set! G12379rp (G10435G10227make-record-printer 'interaction-env (lambda (G17986x G17987p) (display '"#<environment>" G17987p)))) (set! G12381interaction-environment-symbols (lambda () (map (lambda (G17990x) G17990x) (G11514rib-sym* (G12367interaction-env-rib (G12435interaction-environment)))))) (set! G12383environment-symbols (lambda (G17992e) (vector->list (G12336env-names G17992e)))) (set! G12385environment? (lambda (G17994x) ((lambda (G17996t) (if G17996t G17996t (begin '#f (G12363interaction-env? G17994x)))) (G12332env? G17994x)))) (set! G12387environment (lambda G17998imp* ((lambda (G18000itc) ((lambda (G18004G18002imp-collector G18005G18003imp-collector) ((lambda (G18008swap) (dynamic-wind G18008swap (lambda () (call-with-values (lambda () (G12295parse-import-spec* G17998imp*)) (lambda (G18012G18010LAMBDA G18013G18011LAMBDA) ((lambda (G18016subst-labels G18017subst-names) (G12334make-env G18017subst-names G18016subst-labels G18000itc)) G18013G18011LAMBDA G18012G18010LAMBDA)))) G18008swap)) (lambda () ((lambda (G18020t) (begin (G18004G18002imp-collector G18005G18003imp-collector) (set! G18005G18003imp-collector G18020t))) (G18004G18002imp-collector))))) G12305imp-collector G18000itc)) (G12299make-collector)))) (set! G12389null-environment (lambda (G18022n) (begin (if (eqv? G18022n '5) (void) (assertion-violation 'null-environment '"not 5" G18022n)) (G12387environment '(psyntax null-environment-5))))) (set! G12391scheme-report-environment (lambda (G18024n) (begin (if (eqv? G18024n '5) (void) (assertion-violation 'scheme-report-environment '"not 5" G18024n)) (G12387environment '(psyntax scheme-report-environment-5))))) (set! G12393expand (lambda (G18026x G18027env) (if (G12332env? G18027env) ((lambda (G18030rib) ((lambda (G18032x G18033itc G18034rtc G18035vtc) ((lambda (G18040x) (begin (G11536seal-rib! G18030rib) (values G18040x (G18034rtc)))) ((lambda (G18048G18042inv-collector G18049G18043vis-collector G18050G18044imp-collector G18051G18045inv-collector G18052G18046vis-collector G18053G18047imp-collector) ((lambda (G18060swap) (dynamic-wind G18060swap (lambda () (G12226chi-expr G18032x '() '())) G18060swap)) (lambda () (begin ((lambda (G18062t) (begin (G18048G18042inv-collector G18051G18045inv-collector) (set! G18051G18045inv-collector G18062t))) (G18048G18042inv-collector)) ((lambda (G18064t) (begin (G18049G18043vis-collector G18052G18046vis-collector) (set! G18052G18046vis-collector G18064t))) (G18049G18043vis-collector)) ((lambda (G18066t) (begin (G18050G18044imp-collector G18053G18047imp-collector) (set! G18053G18047imp-collector G18066t))) (G18050G18044imp-collector)))))) G12301inv-collector G12303vis-collector G12305imp-collector G18034rtc G18035vtc G18033itc))) (G11557make-stx G18026x G11481top-mark* (list G18030rib) '()) (G12340env-itc G18027env) (G12299make-collector) (G12299make-collector))) (G12297make-top-rib (G12336env-names G18027env) (G12338env-labels G18027env))) (if (G12363interaction-env? G18027env) ((lambda (G18068rib G18069r G18070rtc) ((lambda (G18074x) (call-with-values (lambda () ((lambda (G18086G18078top-level-context G18087G18079inv-collector G18088G18080vis-collector G18089G18081imp-collector G18090G18082top-level-context G18091G18083inv-collector G18092G18084vis-collector G18093G18085imp-collector) ((lambda (G18102swap) (dynamic-wind G18102swap (lambda () (G12309chi-interaction-expr G18074x G18068rib G18069r)) G18102swap)) (lambda () (begin ((lambda (G18104t) (begin (G18086G18078top-level-context G18090G18082top-level-context) (set! G18090G18082top-level-context G18104t))) (G18086G18078top-level-context)) ((lambda (G18106t) (begin (G18087G18079inv-collector G18091G18083inv-collector) (set! G18091G18083inv-collector G18106t))) (G18087G18079inv-collector)) ((lambda (G18108t) (begin (G18088G18080vis-collector G18092G18084vis-collector) (set! G18092G18084vis-collector G18108t))) (G18088G18080vis-collector)) ((lambda (G18110t) (begin (G18089G18081imp-collector G18093G18085imp-collector) (set! G18093G18085imp-collector G18110t))) (G18089G18081imp-collector)))))) G12437top-level-context G12301inv-collector G12303vis-collector G12305imp-collector G18027env G18070rtc (G12299make-collector) (G12299make-collector))) (lambda (G18112G18076LAMBDA G18113G18077LAMBDA) ((lambda (G18116r^ G18117e) (begin (G12375set-interaction-env-r! G18027env G18116r^) (values G18117e (G18070rtc)))) G18113G18077LAMBDA G18112G18076LAMBDA)))) (G11557make-stx G18026x G11481top-mark* (list G18068rib) '()))) (G12367interaction-env-rib G18027env) (G12369interaction-env-r G18027env) (G12299make-collector)) (assertion-violation 'expand '"not an environment" G18027env))))) (set! G12395eval (lambda (G18120x G18121env) (begin (if (G12385environment? G18121env) (void) (error 'eval '"not an environment" G18121env)) (call-with-values (lambda () (G12393expand G18120x G18121env)) (lambda (G18126G18124LAMBDA G18127G18125LAMBDA) ((lambda (G18130invoke-req* G18131x) (begin (for-each G11109G10749invoke-library G18130invoke-req*) (eval-core (G10537G10450expanded->core G18131x)))) G18127G18125LAMBDA G18126G18124LAMBDA)))))) (set! G12397library-expander (lambda G18235 ((lambda (G18236) (if (= G18236 '3) (apply (lambda (G18134x G18135filename G18136verify-name) ((lambda (G18141build-visit-code G18143visit!) (begin (set! G18141build-visit-code (lambda (G18217macro*) (if (null? G18217macro*) (G11458G11326build-void) (G11457G11324build-sequence '#f (map (lambda (G18219x) ((lambda (G18221loc G18222src) (list 'set! G18221loc G18222src)) (car G18219x) (cddr G18219x))) G18217macro*))))) (set! G18143visit! (lambda (G18209macro*) (for-each (lambda (G18211x) ((lambda (G18213loc G18214proc) (set-symbol-value! G18213loc G18214proc)) (car G18211x) (cadr G18211x))) G18209macro*))) (call-with-values (lambda () (G12313core-library-expander G18134x G18136verify-name)) (lambda (G18153G18144LAMBDA G18154G18145LAMBDA G18155G18146LAMBDA G18156G18147LAMBDA G18157G18148LAMBDA G18158G18149LAMBDA G18159G18150LAMBDA G18160G18151LAMBDA G18161G18152LAMBDA) ((lambda (G18171export-env G18172export-subst G18173macro* G18174invoke-code G18175vis* G18176inv* G18177imp* G18178ver G18179name) ((lambda (G18189id G18190name G18191ver G18192imp* G18193vis* G18194inv* G18195visit-proc G18196invoke-proc G18197visit-code G18198invoke-code) (begin (G11107G10745install-library G18189id G18190name G18191ver G18192imp* G18193vis* G18194inv* G18172export-subst G18171export-env G18195visit-proc G18196invoke-proc G18197visit-code G18198invoke-code '#t G18135filename) (values G18189id G18190name G18191ver G18192imp* G18193vis* G18194inv* G18198invoke-code G18197visit-code G18172export-subst G18171export-env))) (gensym) G18179name G18178ver (map G11113G10757library-spec G18177imp*) (map G11113G10757library-spec G18175vis*) (map G11113G10757library-spec G18176inv*) (lambda () (G18143visit! G18173macro*)) (lambda () (eval-core (G10537G10450expanded->core G18174invoke-code))) (G18141build-visit-code G18173macro*) G18174invoke-code)) G18161G18152LAMBDA G18160G18151LAMBDA G18159G18150LAMBDA G18158G18149LAMBDA G18157G18148LAMBDA G18156G18147LAMBDA G18155G18146LAMBDA G18154G18145LAMBDA G18153G18144LAMBDA))))) '#f '#f)) G18235) (if (= G18236 '2) (apply (lambda (G18225x G18226filename) (G12397library-expander G18225x G18226filename (lambda (G18229x) (values)))) G18235) (if (= G18236 '1) (apply (lambda (G18231x) (G12397library-expander G18231x '#f (lambda (G18233x) (values)))) G18235) (error 'apply '"invalid arg count"))))) (length G18235)))) (set! G12399boot-library-expand (lambda (G18237x) (call-with-values (lambda () (G12397library-expander G18237x)) (lambda (G18249G18239LAMBDA G18250G18240LAMBDA G18251G18241LAMBDA G18252G18242LAMBDA G18253G18243LAMBDA G18254G18244LAMBDA G18255G18245LAMBDA G18256G18246LAMBDA G18257G18247LAMBDA G18258G18248LAMBDA) ((lambda (G18269export-env G18270export-subst G18271visit-code G18272invoke-code G18273inv* G18274vis* G18275imp* G18276ver G18277name G18278id) (values G18277name G18272invoke-code G18270export-subst G18269export-env)) G18258G18248LAMBDA G18257G18247LAMBDA G18256G18246LAMBDA G18255G18245LAMBDA G18254G18244LAMBDA G18253G18243LAMBDA G18252G18242LAMBDA G18251G18241LAMBDA G18250G18240LAMBDA G18249G18239LAMBDA))))) (set! G12401rev-map-append (lambda (G18289f G18290ls G18291ac) (if (null? G18290ls) G18291ac (G12401rev-map-append G18289f (cdr G18290ls) (cons (G18289f (car G18290ls)) G18291ac))))) (set! G12403build-exports (lambda (G18295lex*+loc* G18296init*) (G11457G11324build-sequence '#f (cons (G11458G11326build-void) (G12401rev-map-append (lambda (G18299x) (list 'set! (cdr G18299x) (car G18299x))) G18295lex*+loc* G18296init*))))) (set! G12405make-export-subst (lambda (G18301int* G18302ext* G18303rib) (map (lambda (G18307int G18308ext) ((lambda (G18311id) ((lambda (G18313label) ((lambda () (begin (if G18313label (void) (G12423syntax-violation '#f '"cannot export unbound identifier" G18311id)) (cons G18308ext G18313label))))) (G11637id->label G18311id))) (G11557make-stx G18307int G11481top-mark* (list G18303rib) '()))) G18301int* G18302ext*))) (set! G12407make-export-env/macros (lambda (G18315lex* G18316loc* G18317r) ((lambda (G18322lookup) (begin (set! G18322lookup (lambda (G18350x) ((letrec ((G18352f (lambda (G18354x G18355lex* G18356loc*) (if (pair? G18355lex*) (if (eq? G18354x (car G18355lex*)) (car G18356loc*) (G18352f G18354x (cdr G18355lex*) (cdr G18356loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G18352f) G18350x G18315lex* G18316loc*))) ((letrec ((G18323f (lambda (G18325r G18326env G18327global* G18328macro*) (if (null? G18325r) (values G18326env G18327global* G18328macro*) ((lambda (G18333x) ((lambda (G18335label G18336b) ((lambda (G18339t) (if (eqv? G18339t 'lexical) ((lambda (G18344v) ((lambda (G18346loc G18347type) (G18323f (cdr G18325r) (cons (cons* G18335label G18347type G18346loc) G18326env) (cons (cons (G12078lexical-var G18344v) G18346loc) G18327global*) G18328macro*)) (G18322lookup (G12078lexical-var G18344v)) (if (G12080lexical-mutable? G18344v) 'mutable 'global))) (G11647binding-value G18336b)) (if (eqv? G18339t 'local-macro) ((lambda (G18342loc) (G18323f (cdr G18325r) (cons (cons* G18335label 'global-macro G18342loc) G18326env) G18327global* (cons (cons G18342loc (G11647binding-value G18336b)) G18328macro*))) (gensym)) (if (eqv? G18339t 'local-macro!) ((lambda (G18340loc) (G18323f (cdr G18325r) (cons (cons* G18335label 'global-macro! G18340loc) G18326env) G18327global* (cons (cons G18340loc (G11647binding-value G18336b)) G18328macro*))) (gensym)) (if (memv G18339t '($rtd $module)) (G18323f (cdr G18325r) (cons G18333x G18326env) G18327global* G18328macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G11645binding-type G18336b) (G11647binding-value G18336b))))))) (G11645binding-type G18336b))) (car G18333x) (cdr G18333x))) (car G18325r)))))) G18323f) G18317r '() '() '()))) '#f))) (set! G12409generate-temporaries (lambda (G18360ls) ((lambda (G18362t) ((lambda (G18364ls/false) (if G18364ls/false (apply (lambda (G18366ls) (map (lambda (G18368x) (G11557make-stx ((lambda (G18370x) (if ((lambda (G18372t) (if G18372t G18372t (begin '#f (string? G18370x)))) (symbol? G18370x)) (gensym G18370x) (gensym 't))) (G12429syntax->datum G18368x)) G11481top-mark* '() '())) G18366ls)) G18364ls/false) ((lambda (G18374t) ((lambda (G18376ls/false) (if G18376ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G18376ls/false) (G12423syntax-violation '#f '"invalid syntax" G18374t))) (G12190syntax-dispatch G18374t '_))) G18362t))) (G12190syntax-dispatch G18362t 'each-any))) G18360ls))) (set! G12411free-identifier=? (lambda (G18378x G18379y) (if (G11611id? G18378x) (if (G11611id? G18379y) (G11619free-id=? G18378x G18379y) (assertion-violation 'free-identifier=? '"not an identifier" G18379y)) (assertion-violation 'free-identifier=? '"not an identifier" G18378x)))) (set! G12413bound-identifier=? (lambda (G18382x G18383y) (if (G11611id? G18382x) (if (G11611id? G18383y) (G11617bound-id=? G18382x G18383y) (assertion-violation 'bound-identifier=? '"not an identifier" G18383y)) (assertion-violation 'bound-identifier=? '"not an identifier" G18382x)))) (set! G12415extract-position-condition (lambda (G18386x) ((lambda (G18396G18391 G18398G18393 G18400G18392 G18405G18390 G18407make-source-condition G18409G18388 G18411G18389 G18413source-condition? G18415source-filename G18417source-character) (begin (set! G18396G18391 (make-record-type-descriptor '&source-information &condition-rtd 'G18394 '#f '#f '#((immutable file-name) (immutable character)))) (set! G18398G18393 '#f) (set! G18400G18392 (make-record-constructor-descriptor G18396G18391 &condition-rcd G18398G18393)) (set! G18405G18390 (record-predicate G18396G18391)) (set! G18407make-source-condition (record-constructor G18400G18392)) (set! G18409G18388 (record-accessor G18396G18391 '0)) (set! G18411G18389 (record-accessor G18396G18391 '1)) (set! G18413source-condition? (condition-predicate G18396G18391)) (set! G18415source-filename (condition-accessor G18396G18391 G18409G18388)) (set! G18417source-character (condition-accessor G18396G18391 G18411G18389)) (if (G11555stx? G18386x) ((lambda (G18418x) (begin (display '"ssssssssssssssssss") (display (G10431G10219annotation-source G18418x)) (if (G10430G10217annotation? G18418x) ((lambda (G18420src) (if (pair? G18420src) (G18407make-source-condition (car G18420src) (cdr G18420src)) (condition))) (G10431G10219annotation-source G18418x)) (condition)))) (G11559stx-expr G18386x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12417syntax-error (lambda (G18422x . G18424args) (begin (if (for-all string? G18424args) (void) (assertion-violation 'syntax-error '"invalid argument" G18424args)) (raise (condition (G19136G18858make-message-condition (if (null? G18424args) '"invalid syntax" (apply string-append G18424args))) (G19208G19094make-syntax-violation (G12429syntax->datum G18422x) '#f) (G12415extract-position-condition G18422x) (G12419extract-trace G18422x)))))) (set! G12419extract-trace (lambda (G18426x) ((lambda (G18435G18430 G18437G18432 G18439G18431 G18444G18429 G18446make-trace G18448G18428 G18450trace? G18452trace-form) (begin (set! G18435G18430 (make-record-type-descriptor '&trace &condition-rtd 'G18433 '#f '#f '#((immutable form)))) (set! G18437G18432 '#f) (set! G18439G18431 (make-record-constructor-descriptor G18435G18430 &condition-rcd G18437G18432)) (set! G18444G18429 (record-predicate G18435G18430)) (set! G18446make-trace (record-constructor G18439G18431)) (set! G18448G18428 (record-accessor G18435G18430 '0)) (set! G18450trace? (condition-predicate G18435G18430)) (set! G18452trace-form (condition-accessor G18435G18430 G18448G18428)) ((letrec ((G18453f (lambda (G18455x) (if (G11555stx? G18455x) (apply condition (G18446make-trace G18455x) (map G18453f (G11565stx-ae* G18455x))) (if (G10430G10217annotation? G18455x) (G18446make-trace (G11557make-stx G18455x '() '() '())) (condition)))))) G18453f) G18426x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12421syntax-violation* (lambda (G18457who G18458msg G18459form G18460condition-object) (begin (if (string? G18458msg) (void) (assertion-violation 'syntax-violation '"message is not a string" G18458msg)) ((lambda (G18465who) (raise (condition (if G18465who (G19182G19008make-who-condition G18465who) (condition)) (G19136G18858make-message-condition G18458msg) G18460condition-object (G12415extract-position-condition G18459form) (G12419extract-trace G18459form)))) (if ((lambda (G18467t) (if G18467t G18467t (begin '#f (symbol? G18457who)))) (string? G18457who)) G18457who (if (not G18457who) ((lambda (G18469t) ((lambda (G18471ls/false) (if (if G18471ls/false (begin '#f (apply (lambda (G18473id) (G11611id? G18473id)) G18471ls/false)) '#f) (apply (lambda (G18475id) (G12429syntax->datum G18475id)) G18471ls/false) ((lambda (G18477t) ((lambda (G18479ls/false) (if (if G18479ls/false (begin '#f (apply (lambda (G18481id G18482rest) (G11611id? G18481id)) G18479ls/false)) '#f) (apply (lambda (G18485id G18486rest) (G12429syntax->datum G18485id)) G18479ls/false) ((lambda (G18489t) ((lambda (G18491ls/false) (if G18491ls/false (apply (lambda () '#f) G18491ls/false) (G12423syntax-violation '#f '"invalid syntax" G18489t))) (G12190syntax-dispatch G18489t '_))) G18477t))) (G12190syntax-dispatch G18477t '(any . any)))) G18469t))) (G12190syntax-dispatch G18469t 'any))) G18459form) (assertion-violation 'syntax-violation '"invalid who argument" G18457who))))))) (set! G12423syntax-violation (lambda G18507 ((lambda (G18508) (if (= G18508 '3) (apply (lambda (G18493who G18494msg G18495form) (G12423syntax-violation G18493who G18494msg G18495form '#f)) G18507) (if (= G18508 '4) (apply (lambda (G18499who G18500msg G18501form G18502subform) (G12421syntax-violation* G18499who G18500msg G18501form (G19208G19094make-syntax-violation (G12429syntax->datum G18501form) (G12429syntax->datum G18502subform)))) G18507) (error 'apply '"invalid arg count")))) (length G18507)))) (set! G12425identifier? (lambda (G18509x) (G11611id? G18509x))) (set! G12427datum->syntax (lambda (G18511id G18512datum) (if (G11611id? G18511id) (G11577datum->stx G18511id G18512datum) (assertion-violation 'datum->syntax '"not an identifier" G18511id)))) (set! G12429syntax->datum (lambda (G18515x) (G11633stx->datum G18515x))) (set! G12431compile-r6rs-top-level (lambda (G18517x*) (call-with-values (lambda () (G12317top-level-expander G18517x*)) (lambda (G18521G18519LAMBDA G18522G18520LAMBDA) ((lambda (G18525invoke-code G18526lib*) (lambda () (begin (for-each G11109G10749invoke-library G18526lib*) (eval-core (G10537G10450expanded->core G18525invoke-code))))) G18522G18520LAMBDA G18521G18519LAMBDA))))) (set! G12433pre-compile-r6rs-top-level (lambda (G18529x*) (call-with-values (lambda () (G12317top-level-expander G18529x*)) (lambda (G18533G18531LAMBDA G18534G18532LAMBDA) ((lambda (G18537invoke-code G18538lib*) (begin (for-each G11109G10749invoke-library G18538lib*) (G10436G10229compile-core (G10537G10450expanded->core G18537invoke-code)))) G18534G18532LAMBDA G18533G18531LAMBDA))))) (set! G12435interaction-environment ((lambda (G18541the-env) (lambda () ((lambda (G18543t) (if G18543t G18543t (begin '#f ((lambda (G18545lib G18546rib) (begin ((lambda (G18549subst) (begin (G11522set-rib-sym*! G18546rib (map car G18549subst)) (G11524set-rib-mark**! G18546rib (map (lambda (G18551x) G11481top-mark*) G18549subst)) (G11526set-rib-label*! G18546rib (map cdr G18549subst)))) (G11066G10663library-subst G18545lib)) ((lambda (G18553env) (begin (set! G18541the-env G18553env) G18553env)) (G12365make-interaction-env G18546rib '() '())))) (G11102G10735find-library-by-name '(ironscheme)) (G11530make-empty-rib))))) G18541the-env))) '#f)) (set! G12437top-level-context (G10438G10233make-parameter '#f)) (begin (set! G18814G12437top-level-context G12437top-level-context) (set! G18813G12435interaction-environment G12435interaction-environment) (set! G18812G12433pre-compile-r6rs-top-level G12433pre-compile-r6rs-top-level) (set! G18811G12431compile-r6rs-top-level G12431compile-r6rs-top-level) (set! G18810G12429syntax->datum G12429syntax->datum) (set! G18809G12427datum->syntax G12427datum->syntax) (set! G18808G12425identifier? G12425identifier?) (set! G18807G12423syntax-violation G12423syntax-violation) (set! G18806G12421syntax-violation* G12421syntax-violation*) (set! G18805G12419extract-trace G12419extract-trace) (set! G18804G12417syntax-error G12417syntax-error) (set! G18803G12415extract-position-condition G12415extract-position-condition) (set! G18802G12413bound-identifier=? G12413bound-identifier=?) (set! G18801G12411free-identifier=? G12411free-identifier=?) (set! G18800G12409generate-temporaries G12409generate-temporaries) (set! G18799G12407make-export-env/macros G12407make-export-env/macros) (set! G18798G12405make-export-subst G12405make-export-subst) (set! G18797G12403build-exports G12403build-exports) (set! G18796G12401rev-map-append G12401rev-map-append) (set! G18795G12399boot-library-expand G12399boot-library-expand) (set! G18794G12397library-expander G12397library-expander) (set! G18793G12395eval G12395eval) (set! G18792G12393expand G12393expand) (set! G18791G12391scheme-report-environment G12391scheme-report-environment) (set! G18790G12389null-environment G12389null-environment) (set! G18789G12387environment G12387environment) (set! G18788G12385environment? G12385environment?) (set! G18787G12383environment-symbols G12383environment-symbols) (set! G18786G12381interaction-environment-symbols G12381interaction-environment-symbols) (set! G18785G12379rp G12379rp) (set! G18784G12377set-interaction-env-locs! G12377set-interaction-env-locs!) (set! G18783G12375set-interaction-env-r! G12375set-interaction-env-r!) (set! G18782G12373set-interaction-env-rib! G12373set-interaction-env-rib!) (set! G18781G12371interaction-env-locs G12371interaction-env-locs) (set! G18780G12369interaction-env-r G12369interaction-env-r) (set! G18779G12367interaction-env-rib G12367interaction-env-rib) (set! G18778G12365make-interaction-env G12365make-interaction-env) (set! G18777G12363interaction-env? G12363interaction-env?) (set! G18776G12358G12350 G12358G12350) (set! G18775G12356G12351 G12356G12351) (set! G18774G12354G12349 G12354G12349) (set! G18773G12348rp G12348rp) (set! G18772G12346set-env-itc! G12346set-env-itc!) (set! G18771G12344set-env-labels! G12344set-env-labels!) (set! G18770G12342set-env-names! G12342set-env-names!) (set! G18769G12340env-itc G12340env-itc) (set! G18768G12338env-labels G12338env-labels) (set! G18767G12336env-names G12336env-names) (set! G18766G12334make-env G12334make-env) (set! G18765G12332env? G12332env?) (set! G18764G12327G12319 G12327G12319) (set! G18763G12325G12320 G12325G12320) (set! G18762G12323G12318 G12323G12318) (set! G18761G12317top-level-expander G12317top-level-expander) (set! G18760G12315parse-top-level-program G12315parse-top-level-program) (set! G18759G12313core-library-expander G12313core-library-expander) (set! G18758G12311library-body-expander G12311library-body-expander) (set! G18757G12309chi-interaction-expr G12309chi-interaction-expr) (set! G18756G12307chi-library-internal G12307chi-library-internal) (set! G18755G12305imp-collector G12305imp-collector) (set! G18754G12303vis-collector G12303vis-collector) (set! G18753G12301inv-collector G12301inv-collector) (set! G18752G12299make-collector G12299make-collector) (set! G18751G12297make-top-rib G12297make-top-rib) (set! G18750G12295parse-import-spec* G12295parse-import-spec*) (set! G18749G12293parse-library G12293parse-library) (set! G18748G12291parse-library-name G12291parse-library-name) (set! G18747G12289parse-exports G12289parse-exports) (set! G18746G12287expand-transformer G12287expand-transformer) (set! G18745G12285chi-body* G12285chi-body*) (set! G18744G12283chi-internal-module G12283chi-internal-module) (set! G18743G12281module-interface-exp-id* G12281module-interface-exp-id*) (set! G18742G12279set-module-interface-exp-lab-vec! G12279set-module-interface-exp-lab-vec!) (set! G18741G12277set-module-interface-exp-id-vec! G12277set-module-interface-exp-id-vec!) (set! G18740G12275set-module-interface-first-mark! G12275set-module-interface-first-mark!) (set! G18739G12273module-interface-exp-lab-vec G12273module-interface-exp-lab-vec) (set! G18738G12271module-interface-exp-id-vec G12271module-interface-exp-id-vec) (set! G18737G12269module-interface-first-mark G12269module-interface-first-mark) (set! G18736G12267make-module-interface G12267make-module-interface) (set! G18735G12265module-interface? G12265module-interface?) (set! G18734G12260G12252 G12260G12252) (set! G18733G12258G12253 G12258G12253) (set! G18732G12256G12251 G12256G12251) (set! G18731G12250parse-module G12250parse-module) (set! G18730G12248chi-internal G12248chi-internal) (set! G18729G12246find-dups G12246find-dups) (set! G18728G12244find-bound=? G12244find-bound=?) (set! G18727G12242chi-rhs* G12242chi-rhs*) (set! G18726G12240expand-interaction-rhs*/init* G12240expand-interaction-rhs*/init*) (set! G18725G12238chi-rhs G12238chi-rhs) (set! G18724G12236chi-defun G12236chi-defun) (set! G18723G12234chi-lambda-clause* G12234chi-lambda-clause*) (set! G18722G12232chi-lambda-clause G12232chi-lambda-clause) (set! G18721G12230verify-formals G12230verify-formals) (set! G18720G12228chi-set! G12228chi-set!) (set! G18719G12226chi-expr G12226chi-expr) (set! G18718G12224chi-application G12224chi-application) (set! G18717G12222chi-expr* G12222chi-expr*) (set! G18716G12220chi-global-macro G12220chi-global-macro) (set! G18715G12218chi-local-macro G12218chi-local-macro) (set! G18714G12216chi-macro G12216chi-macro) (set! G18713G12214do-macro-call G12214do-macro-call) (set! G18712G12212local-macro-transformer G12212local-macro-transformer) (set! G18711G12210macro-transformer G12210macro-transformer) (set! G18710G12208symbol-macro G12208symbol-macro) (set! G18709G12206file-options-macro G12206file-options-macro) (set! G18708G12204core-macro-transformer G12204core-macro-transformer) (set! G18707G12202syntax-transformer G12202syntax-transformer) (set! G18706G12200ellipsis-map G12200ellipsis-map) (set! G18705G12198syntax-case-transformer G12198syntax-case-transformer) (set! G18704G12196verify-literals G12196verify-literals) (set! G18703G12194underscore? G12194underscore?) (set! G18702G12192ellipsis? G12192ellipsis?) (set! G18701G12190syntax-dispatch G12190syntax-dispatch) (set! G18700G12188convert-pattern G12188convert-pattern) (set! G18699G12186foreign-call-transformer G12186foreign-call-transformer) (set! G18698G12184parameterize-transformer G12184parameterize-transformer) (set! G18697G12182incorrect-usage-macro G12182incorrect-usage-macro) (set! G18696G12180define-condition-type-macro G12180define-condition-type-macro) (set! G18695G12178define-record-type-macro G12178define-record-type-macro) (set! G18694G12176define-struct-macro G12176define-struct-macro) (set! G18693G12174quasisyntax-macro G12174quasisyntax-macro) (set! G18692G12172quasiquote-macro G12172quasiquote-macro) (set! G18691G12170syntax-rules-macro G12170syntax-rules-macro) (set! G18690G12168include-into-macro G12168include-into-macro) (set! G18689G12166include-macro G12166include-macro) (set! G18688G12164do-include G12164do-include) (set! G18687G12162cond-macro G12162cond-macro) (set! G18686G12160and-macro G12160and-macro) (set! G18685G12158or-macro G12158or-macro) (set! G18684G12156let*-macro G12156let*-macro) (set! G18683G12154do-macro G12154do-macro) (set! G18682G12152identifier-syntax-macro G12152identifier-syntax-macro) (set! G18681G12150endianness-macro G12150endianness-macro) (set! G18680G12148assert-macro G12148assert-macro) (set! G18679G12146delay-macro G12146delay-macro) (set! G18678G12144time-macro G12144time-macro) (set! G18677G12142define-enumeration-macro G12142define-enumeration-macro) (set! G18676G12140guard-macro G12140guard-macro) (set! G18675G12138trace-letrec-syntax-macro G12138trace-letrec-syntax-macro) (set! G18674G12136trace-let-syntax-macro G12136trace-let-syntax-macro) (set! G18673G12134trace-let/rec-syntax G12134trace-let/rec-syntax) (set! G18672G12132trace-define-syntax-macro G12132trace-define-syntax-macro) (set! G18671G12130trace-define-macro G12130trace-define-macro) (set! G18670G12128trace-lambda-macro G12128trace-lambda-macro) (set! G18669G12126let*-values-macro G12126let*-values-macro) (set! G18668G12124let-values-macro G12124let-values-macro) (set! G18667G12122let-macro G12122let-macro) (set! G18666G12120invalid-fmls-error G12120invalid-fmls-error) (set! G18665G12118with-syntax-macro G12118with-syntax-macro) (set! G18664G12116bless G12116bless) (set! G18663G12114lambda-transformer G12114lambda-transformer) (set! G18662G12112case-lambda-transformer G12112case-lambda-transformer) (set! G18661G12110quote-transformer G12110quote-transformer) (set! G18660G12108case-transformer G12108case-transformer) (set! G18659G12106if-transformer G12106if-transformer) (set! G18658G12104unless-transformer G12104unless-transformer) (set! G18657G12102when-transformer G12102when-transformer) (set! G18656G12100record-constructor-descriptor-transformer G12100record-constructor-descriptor-transformer) (set! G18655G12098record-type-descriptor-transformer G12098record-type-descriptor-transformer) (set! G18654G12096type-descriptor-transformer G12096type-descriptor-transformer) (set! G18653G12094fluid-let-syntax-transformer G12094fluid-let-syntax-transformer) (set! G18652G12092letrec*-transformer G12092letrec*-transformer) (set! G18651G12090letrec-transformer G12090letrec-transformer) (set! G18650G12088letrec-helper G12088letrec-helper) (set! G18649G12086add-lexicals G12086add-lexicals) (set! G18648G12084add-lexical G12084add-lexical) (set! G18647G12082set-lexical-mutable! G12082set-lexical-mutable!) (set! G18646G12080lexical-mutable? G12080lexical-mutable?) (set! G18645G12078lexical-var G12078lexical-var) (set! G18644G12076scheme-stx G12076scheme-stx) (set! G18643G12074scheme-stx-hashtable G12074scheme-stx-hashtable) (set! G18642G12072parse-define-syntax G12072parse-define-syntax) (set! G18641G12070parse-define G12070parse-define) (set! G18640G11682make-eval-transformer G11682make-eval-transformer) (set! G18639G11680variable-transformer-procedure G11680variable-transformer-procedure) (set! G18638G11678variable-transformer? G11678variable-transformer?) (set! G18637G11676make-variable-transformer G11676make-variable-transformer) (set! G18636G11674sanitize-binding G11674sanitize-binding) (set! G18635G11651syntax-type G11651syntax-type) (set! G18634G11649raise-unbound-error G11649raise-unbound-error) (set! G18633G11647binding-value G11647binding-value) (set! G18632G11645binding-type G11645binding-type) (set! G18631G11643make-binding G11643make-binding) (set! G18630G11641label->binding G11641label->binding) (set! G18629G11639id->real-label G11639id->real-label) (set! G18628G11637id->label G11637id->label) (set! G18627G11635same-marks*? G11635same-marks*?) (set! G18626G11633stx->datum G11633stx->datum) (set! G18625G11631strip G11631strip) (set! G18624G11629strip-annotations G11629strip-annotations) (set! G18623G11627self-evaluating? G11627self-evaluating?) (set! G18622G11625bound-id-member? G11625bound-id-member?) (set! G18621G11623distinct-bound-ids? G11623distinct-bound-ids?) (set! G18620G11621valid-bound-ids? G11621valid-bound-ids?) (set! G18619G11619free-id=? G11619free-id=?) (set! G18618G11617bound-id=? G11617bound-id=?) (set! G18617G11615same-marks? G11615same-marks?) (set! G18616G11613id->sym G11613id->sym) (set! G18615G11611id? G11611id?) (set! G18614G11609syntax->list G11609syntax->list) (set! G18613G11607syntax-cdr G11607syntax-cdr) (set! G18612G11605syntax-car G11605syntax-car) (set! G18611G11603syntax-list? G11603syntax-list?) (set! G18610G11601syntax-null? G11601syntax-null?) (set! G18609G11599syntax-vector? G11599syntax-vector?) (set! G18608G11597syntax-pair? G11597syntax-pair?) (set! G18607G11595syntax-vector->list G11595syntax-vector->list) (set! G18606G11593syntax-kind? G11593syntax-kind?) (set! G18605G11591add-subst G11591add-subst) (set! G18604G11589add-mark G11589add-mark) (set! G18603G11587mkstx G11587mkstx) (set! G18602G11585join-wraps G11585join-wraps) (set! G18601G11583anti-mark? G11583anti-mark?) (set! G18600G11581anti-mark G11581anti-mark) (set! G18599G11579gen-mark G11579gen-mark) (set! G18598G11577datum->stx G11577datum->stx) (set! G18597G11575rp G11575rp) (set! G18596G11573set-stx-ae*! G11573set-stx-ae*!) (set! G18595G11571set-stx-subst*! G11571set-stx-subst*!) (set! G18594G11569set-stx-mark*! G11569set-stx-mark*!) (set! G18593G11567set-stx-expr! G11567set-stx-expr!) (set! G18592G11565stx-ae* G11565stx-ae*) (set! G18591G11563stx-subst* G11563stx-subst*) (set! G18590G11561stx-mark* G11561stx-mark*) (set! G18589G11559stx-expr G11559stx-expr) (set! G18588G11557make-stx G11557make-stx) (set! G18587G11555stx? G11555stx?) (set! G18586G11550G11542 G11550G11542) (set! G18585G11548G11543 G11548G11543) (set! G18584G11546G11541 G11546G11541) (set! G18583G11540make-full-rib G11540make-full-rib) (set! G18582G11538unseal-rib! G11538unseal-rib!) (set! G18581G11536seal-rib! G11536seal-rib!) (set! G18580G11534make-rib-map G11534make-rib-map) (set! G18579G11532extend-rib! G11532extend-rib!) (set! G18578G11530make-empty-rib G11530make-empty-rib) (set! G18577G11528set-rib-sealed/freq! G11528set-rib-sealed/freq!) (set! G18576G11526set-rib-label*! G11526set-rib-label*!) (set! G18575G11524set-rib-mark**! G11524set-rib-mark**!) (set! G18574G11522set-rib-sym*! G11522set-rib-sym*!) (set! G18573G11520rib-sealed/freq G11520rib-sealed/freq) (set! G18572G11518rib-label* G11518rib-label*) (set! G18571G11516rib-mark** G11516rib-mark**) (set! G18570G11514rib-sym* G11514rib-sym*) (set! G18569G11512make-rib G11512make-rib) (set! G18568G11510rib? G11510rib?) (set! G18567G11505G11497 G11505G11497) (set! G18566G11503G11498 G11503G11498) (set! G18565G11501G11496 G11501G11496) (set! G18564G11495gen-define-label G11495gen-define-label) (set! G18563G11493gen-define-label+loc G11493gen-define-label+loc) (set! G18562G11491gen-top-level-label G11491gen-top-level-label) (set! G18561G11489gen-label G11489gen-label) (set! G18560G11487gen-global G11487gen-global) (set! G18559G11485gen-lexical G11485gen-lexical) (set! G18558G11483top-marked? G11483top-marked?) (set! G18557G11481top-mark* G11481top-mark*) (set! G18556G11476set-union G11476set-union) (set! G18555G11474set-cons G11474set-cons) (G11099G10729current-library-expander G12397library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G19125G18824G18819 '#f) (define G19126G18826G18821 '#f) (define G19127G18828G18820 '#f) (define G19128G18833&condition? '#f) (define G19129G18835make-&condition '#f) (define G19130G18837&condition-rtd '#f) (define G19131G18839&condition-rcd '#f) (define G19132G18847G18842 '#f) (define G19133G18849G18844 '#f) (define G19134G18851G18843 '#f) (define G19135G18856G18841 '#f) (define G19136G18858make-message-condition '#f) (define G19137G18860G18840 '#f) (define G19138G18862message-condition? '#f) (define G19139G18864condition-message '#f) (define G19140G18871G18866 '#f) (define G19141G18873G18868 '#f) (define G19142G18875G18867 '#f) (define G19143G18880G18865 '#f) (define G19144G18882make-warning '#f) (define G19145G18884warning? '#f) (define G19146G18891G18886 '#f) (define G19147G18893G18888 '#f) (define G19148G18895G18887 '#f) (define G19149G18900G18885 '#f) (define G19150G18902make-serious-condition '#f) (define G19151G18904serious-condition? '#f) (define G19152G18911G18906 '#f) (define G19153G18913G18908 '#f) (define G19154G18915G18907 '#f) (define G19155G18920G18905 '#f) (define G19156G18922make-error '#f) (define G19157G18924error? '#f) (define G19158G18931G18926 '#f) (define G19159G18933G18928 '#f) (define G19160G18935G18927 '#f) (define G19161G18940G18925 '#f) (define G19162G18942make-violation '#f) (define G19163G18944violation? '#f) (define G19164G18951G18946 '#f) (define G19165G18953G18948 '#f) (define G19166G18955G18947 '#f) (define G19167G18960G18945 '#f) (define G19168G18962make-assertion-violation '#f) (define G19169G18964assertion-violation? '#f) (define G19170G18972G18967 '#f) (define G19171G18974G18969 '#f) (define G19172G18976G18968 '#f) (define G19173G18981G18966 '#f) (define G19174G18983make-irritants-condition '#f) (define G19175G18985G18965 '#f) (define G19176G18987irritants-condition? '#f) (define G19177G18989condition-irritants '#f) (define G19178G18997G18992 '#f) (define G19179G18999G18994 '#f) (define G19180G19001G18993 '#f) (define G19181G19006G18991 '#f) (define G19182G19008make-who-condition '#f) (define G19183G19010G18990 '#f) (define G19184G19012who-condition? '#f) (define G19185G19014condition-who '#f) (define G19186G19021G19016 '#f) (define G19187G19023G19018 '#f) (define G19188G19025G19017 '#f) (define G19189G19030G19015 '#f) (define G19190G19032make-non-continuable-violation '#f) (define G19191G19034non-continuable-violation? '#f) (define G19192G19041G19036 '#f) (define G19193G19043G19038 '#f) (define G19194G19045G19037 '#f) (define G19195G19050G19035 '#f) (define G19196G19052make-implementation-restriction-violation '#f) (define G19197G19054implementation-restriction-violation? '#f) (define G19198G19061G19056 '#f) (define G19199G19063G19058 '#f) (define G19200G19065G19057 '#f) (define G19201G19070G19055 '#f) (define G19202G19072make-lexical-violation '#f) (define G19203G19074lexical-violation? '#f) (define G19204G19083G19078 '#f) (define G19205G19085G19080 '#f) (define G19206G19087G19079 '#f) (define G19207G19092G19077 '#f) (define G19208G19094make-syntax-violation '#f) (define G19209G19096G19075 '#f) (define G19210G19098G19076 '#f) (define G19211G19100syntax-violation? '#f) (define G19212G19102syntax-violation-form '#f) (define G19213G19104syntax-violation-subform '#f) (define G19214G19111G19106 '#f) (define G19215G19113G19108 '#f) (define G19216G19115G19107 '#f) (define G19217G19120G19105 '#f) (define G19218G19122make-undefined-violation '#f) (define G19219G19124undefined-violation? '#f) ((lambda (G18824G18819 G18826G18821 G18828G18820 G18833&condition? G18835make-&condition G18837&condition-rtd G18839&condition-rcd G18847G18842 G18849G18844 G18851G18843 G18856G18841 G18858make-message-condition G18860G18840 G18862message-condition? G18864condition-message G18871G18866 G18873G18868 G18875G18867 G18880G18865 G18882make-warning G18884warning? G18891G18886 G18893G18888 G18895G18887 G18900G18885 G18902make-serious-condition G18904serious-condition? G18911G18906 G18913G18908 G18915G18907 G18920G18905 G18922make-error G18924error? G18931G18926 G18933G18928 G18935G18927 G18940G18925 G18942make-violation G18944violation? G18951G18946 G18953G18948 G18955G18947 G18960G18945 G18962make-assertion-violation G18964assertion-violation? G18972G18967 G18974G18969 G18976G18968 G18981G18966 G18983make-irritants-condition G18985G18965 G18987irritants-condition? G18989condition-irritants G18997G18992 G18999G18994 G19001G18993 G19006G18991 G19008make-who-condition G19010G18990 G19012who-condition? G19014condition-who G19021G19016 G19023G19018 G19025G19017 G19030G19015 G19032make-non-continuable-violation G19034non-continuable-violation? G19041G19036 G19043G19038 G19045G19037 G19050G19035 G19052make-implementation-restriction-violation G19054implementation-restriction-violation? G19061G19056 G19063G19058 G19065G19057 G19070G19055 G19072make-lexical-violation G19074lexical-violation? G19083G19078 G19085G19080 G19087G19079 G19092G19077 G19094make-syntax-violation G19096G19075 G19098G19076 G19100syntax-violation? G19102syntax-violation-form G19104syntax-violation-subform G19111G19106 G19113G19108 G19115G19107 G19120G19105 G19122make-undefined-violation G19124undefined-violation?) (begin (set! G18824G18819 (make-record-type-descriptor '&condition '#f 'G18822 '#f '#f '#())) (set! G18826G18821 '#f) (set! G18828G18820 (make-record-constructor-descriptor G18824G18819 '#f G18826G18821)) (set! G18833&condition? (record-predicate G18824G18819)) (set! G18835make-&condition (record-constructor G18828G18820)) (set! G18837&condition-rtd G18824G18819) (set! G18839&condition-rcd G18828G18820) (set! G18847G18842 (make-record-type-descriptor '&message G18824G18819 'G18845 '#f '#f '#((immutable message)))) (set! G18849G18844 '#f) (set! G18851G18843 (make-record-constructor-descriptor G18847G18842 G18828G18820 G18849G18844)) (set! G18856G18841 (record-predicate G18847G18842)) (set! G18858make-message-condition (record-constructor G18851G18843)) (set! G18860G18840 (record-accessor G18847G18842 '0)) (set! G18862message-condition? (condition-predicate G18847G18842)) (set! G18864condition-message (condition-accessor G18847G18842 G18860G18840)) (set! G18871G18866 (make-record-type-descriptor '&warning G18824G18819 'G18869 '#f '#f '#())) (set! G18873G18868 '#f) (set! G18875G18867 (make-record-constructor-descriptor G18871G18866 G18828G18820 G18873G18868)) (set! G18880G18865 (record-predicate G18871G18866)) (set! G18882make-warning (record-constructor G18875G18867)) (set! G18884warning? (condition-predicate G18871G18866)) (set! G18891G18886 (make-record-type-descriptor '&serious G18824G18819 'G18889 '#f '#f '#())) (set! G18893G18888 '#f) (set! G18895G18887 (make-record-constructor-descriptor G18891G18886 G18828G18820 G18893G18888)) (set! G18900G18885 (record-predicate G18891G18886)) (set! G18902make-serious-condition (record-constructor G18895G18887)) (set! G18904serious-condition? (condition-predicate G18891G18886)) (set! G18911G18906 (make-record-type-descriptor '&error G18891G18886 'G18909 '#f '#f '#())) (set! G18913G18908 '#f) (set! G18915G18907 (make-record-constructor-descriptor G18911G18906 G18895G18887 G18913G18908)) (set! G18920G18905 (record-predicate G18911G18906)) (set! G18922make-error (record-constructor G18915G18907)) (set! G18924error? (condition-predicate G18911G18906)) (set! G18931G18926 (make-record-type-descriptor '&violation G18891G18886 'G18929 '#f '#f '#())) (set! G18933G18928 '#f) (set! G18935G18927 (make-record-constructor-descriptor G18931G18926 G18895G18887 G18933G18928)) (set! G18940G18925 (record-predicate G18931G18926)) (set! G18942make-violation (record-constructor G18935G18927)) (set! G18944violation? (condition-predicate G18931G18926)) (set! G18951G18946 (make-record-type-descriptor '&assertion G18931G18926 'G18949 '#f '#f '#())) (set! G18953G18948 '#f) (set! G18955G18947 (make-record-constructor-descriptor G18951G18946 G18935G18927 G18953G18948)) (set! G18960G18945 (record-predicate G18951G18946)) (set! G18962make-assertion-violation (record-constructor G18955G18947)) (set! G18964assertion-violation? (condition-predicate G18951G18946)) (set! G18972G18967 (make-record-type-descriptor '&irritants G18824G18819 'G18970 '#f '#f '#((immutable irritants)))) (set! G18974G18969 '#f) (set! G18976G18968 (make-record-constructor-descriptor G18972G18967 G18828G18820 G18974G18969)) (set! G18981G18966 (record-predicate G18972G18967)) (set! G18983make-irritants-condition (record-constructor G18976G18968)) (set! G18985G18965 (record-accessor G18972G18967 '0)) (set! G18987irritants-condition? (condition-predicate G18972G18967)) (set! G18989condition-irritants (condition-accessor G18972G18967 G18985G18965)) (set! G18997G18992 (make-record-type-descriptor '&who G18824G18819 'G18995 '#f '#f '#((immutable who)))) (set! G18999G18994 '#f) (set! G19001G18993 (make-record-constructor-descriptor G18997G18992 G18828G18820 G18999G18994)) (set! G19006G18991 (record-predicate G18997G18992)) (set! G19008make-who-condition (record-constructor G19001G18993)) (set! G19010G18990 (record-accessor G18997G18992 '0)) (set! G19012who-condition? (condition-predicate G18997G18992)) (set! G19014condition-who (condition-accessor G18997G18992 G19010G18990)) (set! G19021G19016 (make-record-type-descriptor '&non-continuable G18931G18926 'G19019 '#f '#f '#())) (set! G19023G19018 '#f) (set! G19025G19017 (make-record-constructor-descriptor G19021G19016 G18935G18927 G19023G19018)) (set! G19030G19015 (record-predicate G19021G19016)) (set! G19032make-non-continuable-violation (record-constructor G19025G19017)) (set! G19034non-continuable-violation? (condition-predicate G19021G19016)) (set! G19041G19036 (make-record-type-descriptor '&implementation-restriction G18931G18926 'G19039 '#f '#f '#())) (set! G19043G19038 '#f) (set! G19045G19037 (make-record-constructor-descriptor G19041G19036 G18935G18927 G19043G19038)) (set! G19050G19035 (record-predicate G19041G19036)) (set! G19052make-implementation-restriction-violation (record-constructor G19045G19037)) (set! G19054implementation-restriction-violation? (condition-predicate G19041G19036)) (set! G19061G19056 (make-record-type-descriptor '&lexical G18931G18926 'G19059 '#f '#f '#())) (set! G19063G19058 '#f) (set! G19065G19057 (make-record-constructor-descriptor G19061G19056 G18935G18927 G19063G19058)) (set! G19070G19055 (record-predicate G19061G19056)) (set! G19072make-lexical-violation (record-constructor G19065G19057)) (set! G19074lexical-violation? (condition-predicate G19061G19056)) (set! G19083G19078 (make-record-type-descriptor '&syntax G18931G18926 'G19081 '#f '#f '#((immutable form) (immutable subform)))) (set! G19085G19080 '#f) (set! G19087G19079 (make-record-constructor-descriptor G19083G19078 G18935G18927 G19085G19080)) (set! G19092G19077 (record-predicate G19083G19078)) (set! G19094make-syntax-violation (record-constructor G19087G19079)) (set! G19096G19075 (record-accessor G19083G19078 '0)) (set! G19098G19076 (record-accessor G19083G19078 '1)) (set! G19100syntax-violation? (condition-predicate G19083G19078)) (set! G19102syntax-violation-form (condition-accessor G19083G19078 G19096G19075)) (set! G19104syntax-violation-subform (condition-accessor G19083G19078 G19098G19076)) (set! G19111G19106 (make-record-type-descriptor '&undefined G18931G18926 'G19109 '#f '#f '#())) (set! G19113G19108 '#f) (set! G19115G19107 (make-record-constructor-descriptor G19111G19106 G18935G18927 G19113G19108)) (set! G19120G19105 (record-predicate G19111G19106)) (set! G19122make-undefined-violation (record-constructor G19115G19107)) (set! G19124undefined-violation? (condition-predicate G19111G19106)) (begin (set! G19219G19124undefined-violation? G19124undefined-violation?) (set! G19218G19122make-undefined-violation G19122make-undefined-violation) (set! G19217G19120G19105 G19120G19105) (set! G19216G19115G19107 G19115G19107) (set! G19215G19113G19108 G19113G19108) (set! G19214G19111G19106 G19111G19106) (set! G19213G19104syntax-violation-subform G19104syntax-violation-subform) (set! G19212G19102syntax-violation-form G19102syntax-violation-form) (set! G19211G19100syntax-violation? G19100syntax-violation?) (set! G19210G19098G19076 G19098G19076) (set! G19209G19096G19075 G19096G19075) (set! G19208G19094make-syntax-violation G19094make-syntax-violation) (set! G19207G19092G19077 G19092G19077) (set! G19206G19087G19079 G19087G19079) (set! G19205G19085G19080 G19085G19080) (set! G19204G19083G19078 G19083G19078) (set! G19203G19074lexical-violation? G19074lexical-violation?) (set! G19202G19072make-lexical-violation G19072make-lexical-violation) (set! G19201G19070G19055 G19070G19055) (set! G19200G19065G19057 G19065G19057) (set! G19199G19063G19058 G19063G19058) (set! G19198G19061G19056 G19061G19056) (set! G19197G19054implementation-restriction-violation? G19054implementation-restriction-violation?) (set! G19196G19052make-implementation-restriction-violation G19052make-implementation-restriction-violation) (set! G19195G19050G19035 G19050G19035) (set! G19194G19045G19037 G19045G19037) (set! G19193G19043G19038 G19043G19038) (set! G19192G19041G19036 G19041G19036) (set! G19191G19034non-continuable-violation? G19034non-continuable-violation?) (set! G19190G19032make-non-continuable-violation G19032make-non-continuable-violation) (set! G19189G19030G19015 G19030G19015) (set! G19188G19025G19017 G19025G19017) (set! G19187G19023G19018 G19023G19018) (set! G19186G19021G19016 G19021G19016) (set! G19185G19014condition-who G19014condition-who) (set! G19184G19012who-condition? G19012who-condition?) (set! G19183G19010G18990 G19010G18990) (set! G19182G19008make-who-condition G19008make-who-condition) (set! G19181G19006G18991 G19006G18991) (set! G19180G19001G18993 G19001G18993) (set! G19179G18999G18994 G18999G18994) (set! G19178G18997G18992 G18997G18992) (set! G19177G18989condition-irritants G18989condition-irritants) (set! G19176G18987irritants-condition? G18987irritants-condition?) (set! G19175G18985G18965 G18985G18965) (set! G19174G18983make-irritants-condition G18983make-irritants-condition) (set! G19173G18981G18966 G18981G18966) (set! G19172G18976G18968 G18976G18968) (set! G19171G18974G18969 G18974G18969) (set! G19170G18972G18967 G18972G18967) (set! G19169G18964assertion-violation? G18964assertion-violation?) (set! G19168G18962make-assertion-violation G18962make-assertion-violation) (set! G19167G18960G18945 G18960G18945) (set! G19166G18955G18947 G18955G18947) (set! G19165G18953G18948 G18953G18948) (set! G19164G18951G18946 G18951G18946) (set! G19163G18944violation? G18944violation?) (set! G19162G18942make-violation G18942make-violation) (set! G19161G18940G18925 G18940G18925) (set! G19160G18935G18927 G18935G18927) (set! G19159G18933G18928 G18933G18928) (set! G19158G18931G18926 G18931G18926) (set! G19157G18924error? G18924error?) (set! G19156G18922make-error G18922make-error) (set! G19155G18920G18905 G18920G18905) (set! G19154G18915G18907 G18915G18907) (set! G19153G18913G18908 G18913G18908) (set! G19152G18911G18906 G18911G18906) (set! G19151G18904serious-condition? G18904serious-condition?) (set! G19150G18902make-serious-condition G18902make-serious-condition) (set! G19149G18900G18885 G18900G18885) (set! G19148G18895G18887 G18895G18887) (set! G19147G18893G18888 G18893G18888) (set! G19146G18891G18886 G18891G18886) (set! G19145G18884warning? G18884warning?) (set! G19144G18882make-warning G18882make-warning) (set! G19143G18880G18865 G18880G18865) (set! G19142G18875G18867 G18875G18867) (set! G19141G18873G18868 G18873G18868) (set! G19140G18871G18866 G18871G18866) (set! G19139G18864condition-message G18864condition-message) (set! G19138G18862message-condition? G18862message-condition?) (set! G19137G18860G18840 G18860G18840) (set! G19136G18858make-message-condition G18858make-message-condition) (set! G19135G18856G18841 G18856G18841) (set! G19134G18851G18843 G18851G18843) (set! G19133G18849G18844 G18849G18844) (set! G19132G18847G18842 G18847G18842) (set! G19131G18839&condition-rcd G18839&condition-rcd) (set! G19130G18837&condition-rtd G18837&condition-rtd) (set! G19129G18835make-&condition G18835make-&condition) (set! G19128G18833&condition? G18833&condition?) (set! G19127G18828G18820 G18828G18820) (set! G19126G18826G18821 G18826G18821) (set! G19125G18824G18819 G18824G18819)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G19481G19227G19222 '#f) (define G19482G19229G19224 '#f) (define G19483G19231G19223 '#f) (define G19484G19236G19221 '#f) (define G19485G19238make-i/o-error '#f) (define G19486G19240i/o-error? '#f) (define G19487G19247G19242 '#f) (define G19488G19249G19244 '#f) (define G19489G19251G19243 '#f) (define G19490G19256G19241 '#f) (define G19491G19258make-i/o-read-error '#f) (define G19492G19260i/o-read-error? '#f) (define G19493G19267G19262 '#f) (define G19494G19269G19264 '#f) (define G19495G19271G19263 '#f) (define G19496G19276G19261 '#f) (define G19497G19278make-i/o-write-error '#f) (define G19498G19280i/o-write-error? '#f) (define G19499G19288G19283 '#f) (define G19500G19290G19285 '#f) (define G19501G19292G19284 '#f) (define G19502G19297G19282 '#f) (define G19503G19299make-i/o-invalid-position-error '#f) (define G19504G19301G19281 '#f) (define G19505G19303i/o-invalid-position-error? '#f) (define G19506G19305i/o-error-position '#f) (define G19507G19313G19308 '#f) (define G19508G19315G19310 '#f) (define G19509G19317G19309 '#f) (define G19510G19322G19307 '#f) (define G19511G19324make-i/o-filename-error '#f) (define G19512G19326G19306 '#f) (define G19513G19328i/o-filename-error? '#f) (define G19514G19330i/o-error-filename '#f) (define G19515G19337G19332 '#f) (define G19516G19339G19334 '#f) (define G19517G19341G19333 '#f) (define G19518G19346G19331 '#f) (define G19519G19348make-i/o-file-protection-error '#f) (define G19520G19350i/o-file-protection-error? '#f) (define G19521G19357G19352 '#f) (define G19522G19359G19354 '#f) (define G19523G19361G19353 '#f) (define G19524G19366G19351 '#f) (define G19525G19368make-i/o-file-is-read-only-error '#f) (define G19526G19370i/o-file-is-read-only-error? '#f) (define G19527G19377G19372 '#f) (define G19528G19379G19374 '#f) (define G19529G19381G19373 '#f) (define G19530G19386G19371 '#f) (define G19531G19388make-i/o-file-already-exists-error '#f) (define G19532G19390i/o-file-already-exists-error? '#f) (define G19533G19397G19392 '#f) (define G19534G19399G19394 '#f) (define G19535G19401G19393 '#f) (define G19536G19406G19391 '#f) (define G19537G19408make-i/o-file-does-not-exist-error '#f) (define G19538G19410i/o-file-does-not-exist-error? '#f) (define G19539G19418G19413 '#f) (define G19540G19420G19415 '#f) (define G19541G19422G19414 '#f) (define G19542G19427G19412 '#f) (define G19543G19429make-i/o-port-error '#f) (define G19544G19431G19411 '#f) (define G19545G19433i/o-port-error? '#f) (define G19546G19435i/o-error-port '#f) (define G19547G19442G19437 '#f) (define G19548G19444G19439 '#f) (define G19549G19446G19438 '#f) (define G19550G19451G19436 '#f) (define G19551G19453make-i/o-decoding-error '#f) (define G19552G19455i/o-decoding-error? '#f) (define G19553G19463G19458 '#f) (define G19554G19465G19460 '#f) (define G19555G19467G19459 '#f) (define G19556G19472G19457 '#f) (define G19557G19474make-i/o-encoding-error '#f) (define G19558G19476G19456 '#f) (define G19559G19478i/o-encoding-error? '#f) (define G19560G19480i/o-encoding-error-char '#f) ((lambda (G19227G19222 G19229G19224 G19231G19223 G19236G19221 G19238make-i/o-error G19240i/o-error? G19247G19242 G19249G19244 G19251G19243 G19256G19241 G19258make-i/o-read-error G19260i/o-read-error? G19267G19262 G19269G19264 G19271G19263 G19276G19261 G19278make-i/o-write-error G19280i/o-write-error? G19288G19283 G19290G19285 G19292G19284 G19297G19282 G19299make-i/o-invalid-position-error G19301G19281 G19303i/o-invalid-position-error? G19305i/o-error-position G19313G19308 G19315G19310 G19317G19309 G19322G19307 G19324make-i/o-filename-error G19326G19306 G19328i/o-filename-error? G19330i/o-error-filename G19337G19332 G19339G19334 G19341G19333 G19346G19331 G19348make-i/o-file-protection-error G19350i/o-file-protection-error? G19357G19352 G19359G19354 G19361G19353 G19366G19351 G19368make-i/o-file-is-read-only-error G19370i/o-file-is-read-only-error? G19377G19372 G19379G19374 G19381G19373 G19386G19371 G19388make-i/o-file-already-exists-error G19390i/o-file-already-exists-error? G19397G19392 G19399G19394 G19401G19393 G19406G19391 G19408make-i/o-file-does-not-exist-error G19410i/o-file-does-not-exist-error? G19418G19413 G19420G19415 G19422G19414 G19427G19412 G19429make-i/o-port-error G19431G19411 G19433i/o-port-error? G19435i/o-error-port G19442G19437 G19444G19439 G19446G19438 G19451G19436 G19453make-i/o-decoding-error G19455i/o-decoding-error? G19463G19458 G19465G19460 G19467G19459 G19472G19457 G19474make-i/o-encoding-error G19476G19456 G19478i/o-encoding-error? G19480i/o-encoding-error-char) (begin (set! G19227G19222 (make-record-type-descriptor '&i/o &error-rtd 'G19225 '#f '#f '#())) (set! G19229G19224 '#f) (set! G19231G19223 (make-record-constructor-descriptor G19227G19222 &error-rcd G19229G19224)) (set! G19236G19221 (record-predicate G19227G19222)) (set! G19238make-i/o-error (record-constructor G19231G19223)) (set! G19240i/o-error? (condition-predicate G19227G19222)) (set! G19247G19242 (make-record-type-descriptor '&i/o-read G19227G19222 'G19245 '#f '#f '#())) (set! G19249G19244 '#f) (set! G19251G19243 (make-record-constructor-descriptor G19247G19242 G19231G19223 G19249G19244)) (set! G19256G19241 (record-predicate G19247G19242)) (set! G19258make-i/o-read-error (record-constructor G19251G19243)) (set! G19260i/o-read-error? (condition-predicate G19247G19242)) (set! G19267G19262 (make-record-type-descriptor '&i/o-write G19227G19222 'G19265 '#f '#f '#())) (set! G19269G19264 '#f) (set! G19271G19263 (make-record-constructor-descriptor G19267G19262 G19231G19223 G19269G19264)) (set! G19276G19261 (record-predicate G19267G19262)) (set! G19278make-i/o-write-error (record-constructor G19271G19263)) (set! G19280i/o-write-error? (condition-predicate G19267G19262)) (set! G19288G19283 (make-record-type-descriptor '&i/o-invalid-position G19227G19222 'G19286 '#f '#f '#((immutable position)))) (set! G19290G19285 '#f) (set! G19292G19284 (make-record-constructor-descriptor G19288G19283 G19231G19223 G19290G19285)) (set! G19297G19282 (record-predicate G19288G19283)) (set! G19299make-i/o-invalid-position-error (record-constructor G19292G19284)) (set! G19301G19281 (record-accessor G19288G19283 '0)) (set! G19303i/o-invalid-position-error? (condition-predicate G19288G19283)) (set! G19305i/o-error-position (condition-accessor G19288G19283 G19301G19281)) (set! G19313G19308 (make-record-type-descriptor '&i/o-filename G19227G19222 'G19311 '#f '#f '#((immutable filename)))) (set! G19315G19310 '#f) (set! G19317G19309 (make-record-constructor-descriptor G19313G19308 G19231G19223 G19315G19310)) (set! G19322G19307 (record-predicate G19313G19308)) (set! G19324make-i/o-filename-error (record-constructor G19317G19309)) (set! G19326G19306 (record-accessor G19313G19308 '0)) (set! G19328i/o-filename-error? (condition-predicate G19313G19308)) (set! G19330i/o-error-filename (condition-accessor G19313G19308 G19326G19306)) (set! G19337G19332 (make-record-type-descriptor '&i/o-file-protection G19227G19222 'G19335 '#f '#f '#())) (set! G19339G19334 '#f) (set! G19341G19333 (make-record-constructor-descriptor G19337G19332 G19231G19223 G19339G19334)) (set! G19346G19331 (record-predicate G19337G19332)) (set! G19348make-i/o-file-protection-error (record-constructor G19341G19333)) (set! G19350i/o-file-protection-error? (condition-predicate G19337G19332)) (set! G19357G19352 (make-record-type-descriptor '&i/o-file-is-read-only G19337G19332 'G19355 '#f '#f '#())) (set! G19359G19354 '#f) (set! G19361G19353 (make-record-constructor-descriptor G19357G19352 G19341G19333 G19359G19354)) (set! G19366G19351 (record-predicate G19357G19352)) (set! G19368make-i/o-file-is-read-only-error (record-constructor G19361G19353)) (set! G19370i/o-file-is-read-only-error? (condition-predicate G19357G19352)) (set! G19377G19372 (make-record-type-descriptor '&i/o-file-already-exists G19313G19308 'G19375 '#f '#f '#())) (set! G19379G19374 '#f) (set! G19381G19373 (make-record-constructor-descriptor G19377G19372 G19317G19309 G19379G19374)) (set! G19386G19371 (record-predicate G19377G19372)) (set! G19388make-i/o-file-already-exists-error (record-constructor G19381G19373)) (set! G19390i/o-file-already-exists-error? (condition-predicate G19377G19372)) (set! G19397G19392 (make-record-type-descriptor '&i/o-file-does-not-exist G19313G19308 'G19395 '#f '#f '#())) (set! G19399G19394 '#f) (set! G19401G19393 (make-record-constructor-descriptor G19397G19392 G19317G19309 G19399G19394)) (set! G19406G19391 (record-predicate G19397G19392)) (set! G19408make-i/o-file-does-not-exist-error (record-constructor G19401G19393)) (set! G19410i/o-file-does-not-exist-error? (condition-predicate G19397G19392)) (set! G19418G19413 (make-record-type-descriptor '&i/o-port G19227G19222 'G19416 '#f '#f '#((immutable port)))) (set! G19420G19415 '#f) (set! G19422G19414 (make-record-constructor-descriptor G19418G19413 G19231G19223 G19420G19415)) (set! G19427G19412 (record-predicate G19418G19413)) (set! G19429make-i/o-port-error (record-constructor G19422G19414)) (set! G19431G19411 (record-accessor G19418G19413 '0)) (set! G19433i/o-port-error? (condition-predicate G19418G19413)) (set! G19435i/o-error-port (condition-accessor G19418G19413 G19431G19411)) (set! G19442G19437 (make-record-type-descriptor '&i/o-decoding G19418G19413 'G19440 '#f '#f '#())) (set! G19444G19439 '#f) (set! G19446G19438 (make-record-constructor-descriptor G19442G19437 G19422G19414 G19444G19439)) (set! G19451G19436 (record-predicate G19442G19437)) (set! G19453make-i/o-decoding-error (record-constructor G19446G19438)) (set! G19455i/o-decoding-error? (condition-predicate G19442G19437)) (set! G19463G19458 (make-record-type-descriptor '&i/o-encoding G19418G19413 'G19461 '#f '#f '#((immutable char)))) (set! G19465G19460 '#f) (set! G19467G19459 (make-record-constructor-descriptor G19463G19458 G19422G19414 G19465G19460)) (set! G19472G19457 (record-predicate G19463G19458)) (set! G19474make-i/o-encoding-error (record-constructor G19467G19459)) (set! G19476G19456 (record-accessor G19463G19458 '0)) (set! G19478i/o-encoding-error? (condition-predicate G19463G19458)) (set! G19480i/o-encoding-error-char (condition-accessor G19463G19458 G19476G19456)) (begin (set! G19560G19480i/o-encoding-error-char G19480i/o-encoding-error-char) (set! G19559G19478i/o-encoding-error? G19478i/o-encoding-error?) (set! G19558G19476G19456 G19476G19456) (set! G19557G19474make-i/o-encoding-error G19474make-i/o-encoding-error) (set! G19556G19472G19457 G19472G19457) (set! G19555G19467G19459 G19467G19459) (set! G19554G19465G19460 G19465G19460) (set! G19553G19463G19458 G19463G19458) (set! G19552G19455i/o-decoding-error? G19455i/o-decoding-error?) (set! G19551G19453make-i/o-decoding-error G19453make-i/o-decoding-error) (set! G19550G19451G19436 G19451G19436) (set! G19549G19446G19438 G19446G19438) (set! G19548G19444G19439 G19444G19439) (set! G19547G19442G19437 G19442G19437) (set! G19546G19435i/o-error-port G19435i/o-error-port) (set! G19545G19433i/o-port-error? G19433i/o-port-error?) (set! G19544G19431G19411 G19431G19411) (set! G19543G19429make-i/o-port-error G19429make-i/o-port-error) (set! G19542G19427G19412 G19427G19412) (set! G19541G19422G19414 G19422G19414) (set! G19540G19420G19415 G19420G19415) (set! G19539G19418G19413 G19418G19413) (set! G19538G19410i/o-file-does-not-exist-error? G19410i/o-file-does-not-exist-error?) (set! G19537G19408make-i/o-file-does-not-exist-error G19408make-i/o-file-does-not-exist-error) (set! G19536G19406G19391 G19406G19391) (set! G19535G19401G19393 G19401G19393) (set! G19534G19399G19394 G19399G19394) (set! G19533G19397G19392 G19397G19392) (set! G19532G19390i/o-file-already-exists-error? G19390i/o-file-already-exists-error?) (set! G19531G19388make-i/o-file-already-exists-error G19388make-i/o-file-already-exists-error) (set! G19530G19386G19371 G19386G19371) (set! G19529G19381G19373 G19381G19373) (set! G19528G19379G19374 G19379G19374) (set! G19527G19377G19372 G19377G19372) (set! G19526G19370i/o-file-is-read-only-error? G19370i/o-file-is-read-only-error?) (set! G19525G19368make-i/o-file-is-read-only-error G19368make-i/o-file-is-read-only-error) (set! G19524G19366G19351 G19366G19351) (set! G19523G19361G19353 G19361G19353) (set! G19522G19359G19354 G19359G19354) (set! G19521G19357G19352 G19357G19352) (set! G19520G19350i/o-file-protection-error? G19350i/o-file-protection-error?) (set! G19519G19348make-i/o-file-protection-error G19348make-i/o-file-protection-error) (set! G19518G19346G19331 G19346G19331) (set! G19517G19341G19333 G19341G19333) (set! G19516G19339G19334 G19339G19334) (set! G19515G19337G19332 G19337G19332) (set! G19514G19330i/o-error-filename G19330i/o-error-filename) (set! G19513G19328i/o-filename-error? G19328i/o-filename-error?) (set! G19512G19326G19306 G19326G19306) (set! G19511G19324make-i/o-filename-error G19324make-i/o-filename-error) (set! G19510G19322G19307 G19322G19307) (set! G19509G19317G19309 G19317G19309) (set! G19508G19315G19310 G19315G19310) (set! G19507G19313G19308 G19313G19308) (set! G19506G19305i/o-error-position G19305i/o-error-position) (set! G19505G19303i/o-invalid-position-error? G19303i/o-invalid-position-error?) (set! G19504G19301G19281 G19301G19281) (set! G19503G19299make-i/o-invalid-position-error G19299make-i/o-invalid-position-error) (set! G19502G19297G19282 G19297G19282) (set! G19501G19292G19284 G19292G19284) (set! G19500G19290G19285 G19290G19285) (set! G19499G19288G19283 G19288G19283) (set! G19498G19280i/o-write-error? G19280i/o-write-error?) (set! G19497G19278make-i/o-write-error G19278make-i/o-write-error) (set! G19496G19276G19261 G19276G19261) (set! G19495G19271G19263 G19271G19263) (set! G19494G19269G19264 G19269G19264) (set! G19493G19267G19262 G19267G19262) (set! G19492G19260i/o-read-error? G19260i/o-read-error?) (set! G19491G19258make-i/o-read-error G19258make-i/o-read-error) (set! G19490G19256G19241 G19256G19241) (set! G19489G19251G19243 G19251G19243) (set! G19488G19249G19244 G19249G19244) (set! G19487G19247G19242 G19247G19242) (set! G19486G19240i/o-error? G19240i/o-error?) (set! G19485G19238make-i/o-error G19238make-i/o-error) (set! G19484G19236G19221 G19236G19221) (set! G19483G19231G19223 G19231G19223) (set! G19482G19229G19224 G19229G19224) (set! G19481G19227G19222 G19227G19222)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G20120G19563alist->eq-hash-table '#f) (define G20121G19565ralist->eq-hash-table '#f) (define G20122G19567composition-exclusion-list '#f) (define G20123G19569compatible-decompose-list '#f) (define G20124G19571combination-class-list '#f) (define G20125G19573canonical-decompose-list '#f) (define G20126G19575foldcase-list '#f) (define G20127G19577special-lowercase-list '#f) (define G20128G19579special-uppercase-list '#f) (define G20129G19581whitespace-property-list '#f) (define G20130G19583other-alphabetic-property-list '#f) (define G20131G19585other-uppercase-property-list '#f) (define G20132G19587other-lowercase-property-list '#f) (define G20133G19589general-category-alist '#f) (define G20134G19591titlecase-alist '#f) (define G20135G19593downcase-alist '#f) (define G20136G19595upcase-alist '#f) (define G20137G19597upcase-hashtable '#f) (define G20138G19599downcase-hashtable '#f) (define G20139G19601titlecase-hashtable '#f) (define G20140G19603general-category-hashtable '#f) (define G20141G19605other-alphabetic-hashtable '#f) (define G20142G19607other-uppercase-hashtable '#f) (define G20143G19609other-lowercase-hashtable '#f) (define G20144G19611whitespace-hashtable '#f) (define G20145G19613special-uppercase-hashtable '#f) (define G20146G19615special-lowercase-hashtable '#f) (define G20147G19617foldcase-hashtable '#f) (define G20148G19619canonical-decompose-hashtable '#f) (define G20149G19621compatible-decompose-hashtable '#f) (define G20150G19623combination-class-hashtable '#f) (define G20151G19625compose-hashable '#f) (define G20152G19627foldcase '#f) (define G20153G19629property-list->hashtable '#f) (define G20154G19631whitespace-proprety? '#f) (define G20155G19633other-alphabetic-property? '#f) (define G20156G19635other-uppercase-property? '#f) (define G20157G19637other-lowercase-property? '#f) (define G20158G19639char-whitespace? '#f) (define G20159G19641char-alphabetic? '#f) (define G20160G19643char-numeric? '#f) (define G20161G19645char-upper-case? '#f) (define G20162G19647char-lower-case? '#f) (define G20163G19649char-title-case? '#f) (define G20164G19651char-upcase '#f) (define G20165G19653char-downcase '#f) (define G20166G19655char-titlecase '#f) (define G20167G19657char-foldcase '#f) (define G20168G19659char-general-category '#f) (define G20169G19661char-ci=? '#f) (define G20170G19663char-ci<? '#f) (define G20171G19665char-ci>? '#f) (define G20172G19667char-ci<=? '#f) (define G20173G19669char-ci>=? '#f) (define G20174G19671special-uppercase '#f) (define G20175G19673special-lowercase '#f) (define G20176G19675string-downcase '#f) (define G20177G19677string-upcase '#f) (define G20178G19679string-foldcase '#f) (define G20179G19681string-titlecase '#f) (define G20180G19683compose '#f) (define G20181G19685string-ci=? '#f) (define G20182G19687string-ci<? '#f) (define G20183G19689string-ci>? '#f) (define G20184G19691string-ci<=? '#f) (define G20185G19693string-ci>=? '#f) (define G20186G19695canonical-decompose '#f) (define G20187G19697canonical-decompose-char '#f) (define G20188G19699compatible-decompose '#f) (define G20189G19701compatible-decompose-char '#f) (define G20190G19703char-combination-class '#f) (define G20191G19705canonical-sort '#f) (define G20192G19707string-stable-sort! '#f) (define G20193G19709string-normalize-nfd '#f) (define G20194G19711string-normalize-nfkd '#f) (define G20195G19713string-normalize-nfc '#f) (define G20196G19715string-normalize-nfkc '#f) ((lambda (G19563alist->eq-hash-table G19565ralist->eq-hash-table G19567composition-exclusion-list G19569compatible-decompose-list G19571combination-class-list G19573canonical-decompose-list G19575foldcase-list G19577special-lowercase-list G19579special-uppercase-list G19581whitespace-property-list G19583other-alphabetic-property-list G19585other-uppercase-property-list G19587other-lowercase-property-list G19589general-category-alist G19591titlecase-alist G19593downcase-alist G19595upcase-alist G19597upcase-hashtable G19599downcase-hashtable G19601titlecase-hashtable G19603general-category-hashtable G19605other-alphabetic-hashtable G19607other-uppercase-hashtable G19609other-lowercase-hashtable G19611whitespace-hashtable G19613special-uppercase-hashtable G19615special-lowercase-hashtable G19617foldcase-hashtable G19619canonical-decompose-hashtable G19621compatible-decompose-hashtable G19623combination-class-hashtable G19625compose-hashable G19627foldcase G19629property-list->hashtable G19631whitespace-proprety? G19633other-alphabetic-property? G19635other-uppercase-property? G19637other-lowercase-property? G19639char-whitespace? G19641char-alphabetic? G19643char-numeric? G19645char-upper-case? G19647char-lower-case? G19649char-title-case? G19651char-upcase G19653char-downcase G19655char-titlecase G19657char-foldcase G19659char-general-category G19661char-ci=? G19663char-ci<? G19665char-ci>? G19667char-ci<=? G19669char-ci>=? G19671special-uppercase G19673special-lowercase G19675string-downcase G19677string-upcase G19679string-foldcase G19681string-titlecase G19683compose G19685string-ci=? G19687string-ci<? G19689string-ci>? G19691string-ci<=? G19693string-ci>=? G19695canonical-decompose G19697canonical-decompose-char G19699compatible-decompose G19701compatible-decompose-char G19703char-combination-class G19705canonical-sort G19707string-stable-sort! G19709string-normalize-nfd G19711string-normalize-nfkd G19713string-normalize-nfc G19715string-normalize-nfkc) (begin (set! G19563alist->eq-hash-table (lambda (G19716alist) ((lambda (G19718hashtable) (begin (for-each (lambda (G19720x) (hashtable-set! G19718hashtable (car G19720x) (cdr G19720x))) G19716alist) G19718hashtable)) (make-eq-hashtable)))) (set! G19565ralist->eq-hash-table (lambda (G19722alist) ((lambda (G19724hashtable) (begin (for-each (lambda (G19726x) (hashtable-set! G19724hashtable (cdr G19726x) (car G19726x))) G19722alist) G19724hashtable)) (make-eq-hashtable)))) (set! G19567composition-exclusion-list '(2392 2393 2394 2395 2396 2397 2398 2399 2524 2525 2527 2611 2614 2649 2650 2651 2654 2908 2909 3907 3917 3922 3927 3932 3945 3958 3960 3987 3997 4002 4007 4012 4025 64285 64287 64298 64299 64300 64301 64302 64303 64304 64305 64306 64307 64308 64309 64310 64312 64313 64314 64315 64316 64318 64320 64321 64323 64324 64326 64327 64328 64329 64330 64331 64332 64333 64334 10972 119134 119135 119136 119137 119138 119139 119140 119227 119228 119229 119230 119231 119232)) (set! G19569compatible-decompose-list '((160 32) (168 32 776) (170 97) (175 32 772) (178 50) (179 51) (180 32 769) (181 956) (184 32 807) (185 49) (186 111) (188 49 8260 52) (189 49 8260 50) (190 51 8260 52) (306 73 74) (307 105 106) (319 76 183) (320 108 183) (329 700 110) (383 115) (452 68 381) (453 68 382) (454 100 382) (455 76 74) (456 76 106) (457 108 106) (458 78 74) (459 78 106) (460 110 106) (497 68 90) (498 68 122) (499 100 122) (688 104) (689 614) (690 106) (691 114) (692 633) (693 635) (694 641) (695 119) (696 121) (728 32 774) (729 32 775) (730 32 778) (731 32 808) (732 32 771) (733 32 779) (736 611) (737 108) (738 115) (739 120) (740 661) (890 32 837) (900 32 769) (976 946) (977 952) (978 933) (981 966) (982 960) (1008 954) (1009 961) (1010 962) (1012 920) (1013 949) (1017 931) (1415 1381 1410) (1653 1575 1652) (1654 1608 1652) (1655 1735 1652) (1656 1610 1652) (3635 3661 3634) (3763 3789 3762) (3804 3755 3737) (3805 3755 3745) (3852 3851) (3959 4018 3969) (3961 4019 3969) (4348 4316) (7468 65) (7469 198) (7470 66) (7472 68) (7473 69) (7474 398) (7475 71) (7476 72) (7477 73) (7478 74) (7479 75) (7480 76) (7481 77) (7482 78) (7484 79) (7485 546) (7486 80) (7487 82) (7488 84) (7489 85) (7490 87) (7491 97) (7492 592) (7493 593) (7494 7426) (7495 98) (7496 100) (7497 101) (7498 601) (7499 603) (7500 604) (7501 103) (7503 107) (7504 109) (7505 331) (7506 111) (7507 596) (7508 7446) (7509 7447) (7510 112) (7511 116) (7512 117) (7513 7453) (7514 623) (7515 118) (7516 7461) (7517 946) (7518 947) (7519 948) (7520 966) (7521 967) (7522 105) (7523 114) (7524 117) (7525 118) (7526 946) (7527 947) (7528 961) (7529 966) (7530 967) (7544 1085) (7579 594) (7580 99) (7581 597) (7582 240) (7583 604) (7584 102) (7585 607) (7586 609) (7587 613) (7588 616) (7589 617) (7590 618) (7591 7547) (7592 669) (7593 621) (7594 7557) (7595 671) (7596 625) (7597 624) (7598 626) (7599 627) (7600 628) (7601 629) (7602 632) (7603 642) (7604 643) (7605 427) (7606 649) (7607 650) (7608 7452) (7609 651) (7610 652) (7611 122) (7612 656) (7613 657) (7614 658) (7615 952) (7834 97 702) (8125 32 787) (8127 32 787) (8128 32 834) (8190 32 788) (8194 32) (8195 32) (8196 32) (8197 32) (8198 32) (8199 32) (8200 32) (8201 32) (8202 32) (8209 8208) (8215 32 819) (8228 46) (8229 46 46) (8230 46 46 46) (8239 32) (8243 8242 8242) (8244 8242 8242 8242) (8246 8245 8245) (8247 8245 8245 8245) (8252 33 33) (8254 32 773) (8263 63 63) (8264 63 33) (8265 33 63) (8279 8242 8242 8242 8242) (8287 32) (8304 48) (8305 105) (8308 52) (8309 53) (8310 54) (8311 55) (8312 56) (8313 57) (8314 43) (8315 8722) (8316 61) (8317 40) (8318 41) (8319 110) (8320 48) (8321 49) (8322 50) (8323 51) (8324 52) (8325 53) (8326 54) (8327 55) (8328 56) (8329 57) (8330 43) (8331 8722) (8332 61) (8333 40) (8334 41) (8336 97) (8337 101) (8338 111) (8339 120) (8340 601) (8360 82 115) (8448 97 47 99) (8449 97 47 115) (8450 67) (8451 176 67) (8453 99 47 111) (8454 99 47 117) (8455 400) (8457 176 70) (8458 103) (8459 72) (8460 72) (8461 72) (8462 104) (8463 295) (8464 73) (8465 73) (8466 76) (8467 108) (8469 78) (8470 78 111) (8473 80) (8474 81) (8475 82) (8476 82) (8477 82) (8480 83 77) (8481 84 69 76) (8482 84 77) (8484 90) (8488 90) (8492 66) (8493 67) (8495 101) (8496 69) (8497 70) (8499 77) (8500 111) (8501 1488) (8502 1489) (8503 1490) (8504 1491) (8505 105) (8507 70 65 88) (8508 960) (8509 947) (8510 915) (8511 928) (8512 8721) (8517 68) (8518 100) (8519 101) (8520 105) (8521 106) (8531 49 8260 51) (8532 50 8260 51) (8533 49 8260 53) (8534 50 8260 53) (8535 51 8260 53) (8536 52 8260 53) (8537 49 8260 54) (8538 53 8260 54) (8539 49 8260 56) (8540 51 8260 56) (8541 53 8260 56) (8542 55 8260 56) (8543 49 8260) (8544 73) (8545 73 73) (8546 73 73 73) (8547 73 86) (8548 86) (8549 86 73) (8550 86 73 73) (8551 86 73 73 73) (8552 73 88) (8553 88) (8554 88 73) (8555 88 73 73) (8556 76) (8557 67) (8558 68) (8559 77) (8560 105) (8561 105 105) (8562 105 105 105) (8563 105 118) (8564 118) (8565 118 105) (8566 118 105 105) (8567 118 105 105 105) (8568 105 120) (8569 120) (8570 120 105) (8571 120 105 105) (8572 108) (8573 99) (8574 100) (8575 109) (8748 8747 8747) (8749 8747 8747 8747) (8751 8750 8750) (8752 8750 8750 8750) (9312 49) (9313 50) (9314 51) (9315 52) (9316 53) (9317 54) (9318 55) (9319 56) (9320 57) (9321 49 48) (9322 49 49) (9323 49 50) (9324 49 51) (9325 49 52) (9326 49 53) (9327 49 54) (9328 49 55) (9329 49 56) (9330 49 57) (9331 50 48) (9332 40 49 41) (9333 40 50 41) (9334 40 51 41) (9335 40 52 41) (9336 40 53 41) (9337 40 54 41) (9338 40 55 41) (9339 40 56 41) (9340 40 57 41) (9341 40 49 48 41) (9342 40 49 49 41) (9343 40 49 50 41) (9344 40 49 51 41) (9345 40 49 52 41) (9346 40 49 53 41) (9347 40 49 54 41) (9348 40 49 55 41) (9349 40 49 56 41) (9350 40 49 57 41) (9351 40 50 48 41) (9352 49 46) (9353 50 46) (9354 51 46) (9355 52 46) (9356 53 46) (9357 54 46) (9358 55 46) (9359 56 46) (9360 57 46) (9361 49 48 46) (9362 49 49 46) (9363 49 50 46) (9364 49 51 46) (9365 49 52 46) (9366 49 53 46) (9367 49 54 46) (9368 49 55 46) (9369 49 56 46) (9370 49 57 46) (9371 50 48 46) (9372 40 97 41) (9373 40 98 41) (9374 40 99 41) (9375 40 100 41) (9376 40 101 41) (9377 40 102 41) (9378 40 103 41) (9379 40 104 41) (9380 40 105 41) (9381 40 106 41) (9382 40 107 41) (9383 40 108 41) (9384 40 109 41) (9385 40 110 41) (9386 40 111 41) (9387 40 112 41) (9388 40 113 41) (9389 40 114 41) (9390 40 115 41) (9391 40 116 41) (9392 40 117 41) (9393 40 118 41) (9394 40 119 41) (9395 40 120 41) (9396 40 121 41) (9397 40 122 41) (9398 65) (9399 66) (9400 67) (9401 68) (9402 69) (9403 70) (9404 71) (9405 72) (9406 73) (9407 74) (9408 75) (9409 76) (9410 77) (9411 78) (9412 79) (9413 80) (9414 81) (9415 82) (9416 83) (9417 84) (9418 85) (9419 86) (9420 87) (9421 88) (9422 89) (9423 90) (9424 97) (9425 98) (9426 99) (9427 100) (9428 101) (9429 102) (9430 103) (9431 104) (9432 105) (9433 106) (9434 107) (9435 108) (9436 109) (9437 110) (9438 111) (9439 112) (9440 113) (9441 114) (9442 115) (9443 116) (9444 117) (9445 118) (9446 119) (9447 120) (9448 121) (9449 122) (9450 48) (10764 8747 8747 8747 8747) (10868 58 58 61) (10869 61 61) (10870 61 61 61) (11388 106) (11389 86) (11631 11617) (11935 27597) (12019 40863) (12032 19968) (12033 20008) (12034 20022) (12035 20031) (12036 20057) (12037 20101) (12038 20108) (12039 20128) (12040 20154) (12041 20799) (12042 20837) (12043 20843) (12044 20866) (12045 20886) (12046 20907) (12047 20960) (12048 20981) (12049 20992) (12050 21147) (12051 21241) (12052 21269) (12053 21274) (12054 21304) (12055 21313) (12056 21340) (12057 21353) (12058 21378) (12059 21430) (12060 21448) (12061 21475) (12062 22231) (12063 22303) (12064 22763) (12065 22786) (12066 22794) (12067 22805) (12068 22823) (12069 22899) (12070 23376) (12071 23424) (12072 23544) (12073 23567) (12074 23586) (12075 23608) (12076 23662) (12077 23665) (12078 24027) (12079 24037) (12080 24049) (12081 24062) (12082 24178) (12083 24186) (12084 24191) (12085 24308) (12086 24318) (12087 24331) (12088 24339) (12089 24400) (12090 24417) (12091 24435) (12092 24515) (12093 25096) (12094 25142) (12095 25163) (12096 25903) (12097 25908) (12098 25991) (12099 26007) (12100 26020) (12101 26041) (12102 26080) (12103 26085) (12104 26352) (12105 26376) (12106 26408) (12107 27424) (12108 27490) (12109 27513) (12110 27571) (12111 27595) (12112 27604) (12113 27611) (12114 27663) (12115 27668) (12116 27700) (12117 28779) (12118 29226) (12119 29238) (12120 29243) (12121 29247) (12122 29255) (12123 29273) (12124 29275) (12125 29356) (12126 29572) (12127 29577) (12128 29916) (12129 29926) (12130 29976) (12131 29983) (12132 29992) (12133 30000) (12134 30091) (12135 30098) (12136 30326) (12137 30333) (12138 30382) (12139 30399) (12140 30446) (12141 30683) (12142 30690) (12143 30707) (12144 31034) (12145 31160) (12146 31166) (12147 31348) (12148 31435) (12149 31481) (12150 31859) (12151 31992) (12152 32566) (12153 32593) (12154 32650) (12155 32701) (12156 32769) (12157 32780) (12158 32786) (12159 32819) (12160 32895) (12161 32905) (12162 33251) (12163 33258) (12164 33267) (12165 33276) (12166 33292) (12167 33307) (12168 33311) (12169 33390) (12170 33394) (12171 33400) (12172 34381) (12173 34411) (12174 34880) (12175 34892) (12176 34915) (12177 35198) (12178 35211) (12179 35282) (12180 35328) (12181 35895) (12182 35910) (12183 35925) (12184 35960) (12185 35997) (12186 36196) (12187 36208) (12188 36275) (12189 36523) (12190 36554) (12191 36763) (12192 36784) (12193 36789) (12194 37009) (12195 37193) (12196 37318) (12197 37324) (12198 37329) (12199 38263) (12200 38272) (12201 38428) (12202 38582) (12203 38585) (12204 38632) (12205 38737) (12206 38750) (12207 38754) (12208 38761) (12209 38859) (12210 38893) (12211 38899) (12212 38913) (12213 39080) (12214 39131) (12215 39135) (12216 39318) (12217 39321) (12218 39340) (12219 39592) (12220 39640) (12221 39647) (12222 39717) (12223 39727) (12224 39730) (12225 39740) (12226 39770) (12227 40165) (12228 40565) (12229 40575) (12230 40613) (12231 40635) (12232 40643) (12233 40653) (12234 40657) (12235 40697) (12236 40701) (12237 40718) (12238 40723) (12239 40736) (12240 40763) (12241 40778) (12242 40786) (12243 40845) (12244 40860) (12245 40864) (12288 32) (12342 12306) (12344 21313) (12345 21316) (12346 21317) (12443 32 12441) (12444 32 12442) (12447 12424 12426) (12543 12467 12488) (12593 4352) (12594 4353) (12595 4522) (12596 4354) (12597 4524) (12598 4525) (12599 4355) (12600 4356) (12601 4357) (12602 4528) (12603 4529) (12604 4530) (12605 4531) (12606 4532) (12607 4533) (12608 4378) (12609 4358) (12610 4359) (12611 4360) (12612 4385) (12613 4361) (12614 4362) (12615 4363) (12616 4364) (12617 4365) (12618 4366) (12619 4367) (12620 4368) (12621 4369) (12622 4370) (12623 4449) (12624 4450) (12625 4451) (12626 4452) (12627 4453) (12628 4454) (12629 4455) (12630 4456) (12631 4457) (12632 4458) (12633 4459) (12634 4460) (12635 4461) (12636 4462) (12637 4463) (12638 4464) (12639 4465) (12640 4466) (12641 4467) (12642 4468) (12643 4469) (12644 4448) (12645 4372) (12646 4373) (12647 4551) (12648 4552) (12649 4556) (12650 4558) (12651 4563) (12652 4567) (12653 4569) (12654 4380) (12655 4573) (12656 4575) (12657 4381) (12658 4382) (12659 4384) (12660 4386) (12661 4387) (12662 4391) (12663 4393) (12664 4395) (12665 4396) (12666 4397) (12667 4398) (12668 4399) (12669 4402) (12670 4406) (12671 4416) (12672 4423) (12673 4428) (12674 4593) (12675 4594) (12676 4439) (12677 4440) (12678 4441) (12679 4484) (12680 4485) (12681 4488) (12682 4497) (12683 4498) (12684 4500) (12685 4510) (12686 4513) (12690 19968) (12691 20108) (12692 19977) (12693 22235) (12694 19978) (12695 20013) (12696 19979) (12697 30002) (12698 20057) (12699 19993) (12700 19969) (12701 22825) (12702 22320) (12703 20154) (12800 40 4352 41) (12801 40 4354 41) (12802 40 4355 41) (12803 40 4357 41) (12804 40 4358 41) (12805 40 4359 41) (12806 40 4361 41) (12807 40 4363 41) (12808 40 4364 41) (12809 40 4366 41) (12810 40 4367 41) (12811 40 4368 41) (12812 40 4369 41) (12813 40 4370 41) (12814 40 4352 4449 41) (12815 40 4354 4449 41) (12816 40 4355 4449 41) (12817 40 4357 4449 41) (12818 40 4358 4449 41) (12819 40 4359 4449 41) (12820 40 4361 4449 41) (12821 40 4363 4449 41) (12822 40 4364 4449 41) (12823 40 4366 4449 41) (12824 40 4367 4449 41) (12825 40 4368 4449 41) (12826 40 4369 4449 41) (12827 40 4370 4449 41) (12828 40 4364 4462 41) (12829 40 4363 4457 4364 4453 4523 41) (12830 40 4363 4457 4370 4462 41) (12832 40 19968 41) (12833 40 20108 41) (12834 40 19977 41) (12835 40 22235 41) (12836 40 20116 41) (12837 40 20845 41) (12838 40 19971 41) (12839 40 20843 41) (12840 40 20061 41) (12841 40 21313 41) (12842 40 26376 41) (12843 40 28779 41) (12844 40 27700 41) (12845 40 26408 41) (12846 40 37329 41) (12847 40 22303 41) (12848 40 26085 41) (12849 40 26666 41) (12850 40 26377 41) (12851 40 31038 41) (12852 40 21517 41) (12853 40 29305 41) (12854 40 36001 41) (12855 40 31069 41) (12856 40 21172 41) (12857 40 20195 41) (12858 40 21628 41) (12859 40 23398 41) (12860 40 30435 41) (12861 40 20225 41) (12862 40 36039 41) (12863 40 21332 41) (12864 40 31085 41) (12865 40 20241 41) (12866 40 33258 41) (12867 40 33267 41) (12880 80 84 69) (12881 50 49) (12882 50 50) (12883 50 51) (12884 50 52) (12885 50 53) (12886 50 54) (12887 50 55) (12888 50 56) (12889 50 57) (12890 51 48) (12891 51 49) (12892 51 50) (12893 51 51) (12894 51 52) (12895 51 53) (12896 4352) (12897 4354) (12898 4355) (12899 4357) (12900 4358) (12901 4359) (12902 4361) (12903 4363) (12904 4364) (12905 4366) (12906 4367) (12907 4368) (12908 4369) (12909 4370) (12910 4352 4449) (12911 4354 4449) (12912 4355 4449) (12913 4357 4449) (12914 4358 4449) (12915 4359 4449) (12916 4361 4449) (12917 4363 4449) (12918 4364 4449) (12919 4366 4449) (12920 4367 4449) (12921 4368 4449) (12922 4369 4449) (12923 4370 4449) (12924 4366 4449 4535 4352 4457) (12925 4364 4462 4363 4468) (12926 4363 4462) (12928 19968) (12929 20108) (12930 19977) (12931 22235) (12932 20116) (12933 20845) (12934 19971) (12935 20843) (12936 20061) (12937 21313) (12938 26376) (12939 28779) (12940 27700) (12941 26408) (12942 37329) (12943 22303) (12944 26085) (12945 26666) (12946 26377) (12947 31038) (12948 21517) (12949 29305) (12950 36001) (12951 31069) (12952 21172) (12953 31192) (12954 30007) (12955 22899) (12956 36969) (12957 20778) (12958 21360) (12959 27880) (12960 38917) (12961 20241) (12962 20889) (12963 27491) (12964 19978) (12965 20013) (12966 19979) (12967 24038) (12968 21491) (12969 21307) (12970 23447) (12971 23398) (12972 30435) (12973 20225) (12974 36039) (12975 21332) (12976 22812) (12977 51 54) (12978 51 55) (12979 51 56) (12980 51 57) (12981 52 48) (12982 52 49) (12983 52 50) (12984 52 51) (12985 52 52) (12986 52 53) (12987 52 54) (12988 52 55) (12989 52 56) (12990 52 57) (12991 53 48) (12992 49 26376) (12993 50 26376) (12994 51 26376) (12995 52 26376) (12996 53 26376) (12997 54 26376) (12998 55 26376) (12999 56 26376) (13000 57 26376) (13001 49 48 26376) (13002 49 49 26376) (13003 49 50 26376) (13004 72 103) (13005 101 114 103) (13006 101 86) (13007 76 84 68) (13008 12450) (13009 12452) (13010 12454) (13011 12456) (13012 12458) (13013 12459) (13014 12461) (13015 12463) (13016 12465) (13017 12467) (13018 12469) (13019 12471) (13020 12473) (13021 12475) (13022 12477) (13023 12479) (13024 12481) (13025 12484) (13026 12486) (13027 12488) (13028 12490) (13029 12491) (13030 12492) (13031 12493) (13032 12494) (13033 12495) (13034 12498) (13035 12501) (13036 12504) (13037 12507) (13038 12510) (13039 12511) (13040 12512) (13041 12513) (13042 12514) (13043 12516) (13044 12518) (13045 12520) (13046 12521) (13047 12522) (13048 12523) (13049 12524) (13050 12525) (13051 12527) (13052 12528) (13053 12529) (13054 12530) (13056 12450 12497 12540 12488) (13057 12450 12523 12501 12449) (13058 12450 12531 12506 12450) (13059 12450 12540 12523) (13060 12452 12491 12531 12464) (13061 12452 12531 12481) (13062 12454 12457 12531) (13063 12456 12473 12463 12540 12489) (13064 12456 12540 12459 12540) (13065 12458 12531 12473) (13066 12458 12540 12512) (13067 12459 12452 12522) (13068 12459 12521 12483 12488) (13069 12459 12525 12522 12540) (13070 12460 12525 12531) (13071 12460 12531 12510) (13072 12462 12460) (13073 12462 12491 12540) (13074 12461 12517 12522 12540) (13075 12462 12523 12480 12540) (13076 12461 12525) (13077 12461 12525 12464 12521 12512) (13078 12461 12525 12513 12540 12488 12523) (13079 12461 12525 12527 12483 12488) (13080 12464 12521 12512) (13081 12464 12521 12512 12488 12531) (13082 12463 12523 12476 12452 12525) (13083 12463 12525 12540 12493) (13084 12465 12540 12473) (13085 12467 12523 12490) (13086 12467 12540 12509) (13087 12469 12452 12463 12523) (13088 12469 12531 12481 12540 12512) (13089 12471 12522 12531 12464) (13090 12475 12531 12481) (13091 12475 12531 12488) (13092 12480 12540 12473) (13093 12487 12471) (13094 12489 12523) (13095 12488 12531) (13096 12490 12494) (13097 12494 12483 12488) (13098 12495 12452 12484) (13099 12497 12540 12475 12531 12488) (13100 12497 12540 12484) (13101 12496 12540 12524 12523) (13102 12500 12450 12473 12488 12523) (13103 12500 12463 12523) (13104 12500 12467) (13105 12499 12523) (13106 12501 12449 12521 12483 12489) (13107 12501 12451 12540 12488) (13108 12502 12483 12471 12455 12523) (13109 12501 12521 12531) (13110 12504 12463 12479 12540 12523) (13111 12506 12477) (13112 12506 12491 12498) (13113 12504 12523 12484) (13114 12506 12531 12473) (13115 12506 12540 12472) (13116 12505 12540 12479) (13117 12509 12452 12531 12488) (13118 12508 12523 12488) (13119 12507 12531) (13120 12509 12531 12489) (13121 12507 12540 12523) (13122 12507 12540 12531) (13123 12510 12452 12463 12525) (13124 12510 12452 12523) (13125 12510 12483 12495) (13126 12510 12523 12463) (13127 12510 12531 12471 12519 12531) (13128 12511 12463 12525 12531) (13129 12511 12522) (13130 12511 12522 12496 12540 12523) (13131 12513 12460) (13132 12513 12460 12488 12531) (13133 12513 12540 12488 12523) (13134 12516 12540 12489) (13135 12516 12540 12523) (13136 12518 12450 12531) (13137 12522 12483 12488 12523) (13138 12522 12521) (13139 12523 12500 12540) (13140 12523 12540 12502 12523) (13141 12524 12512) (13142 12524 12531 12488 12466 12531) (13143 12527 12483 12488) (13144 48 28857) (13145 49 28857) (13146 50 28857) (13147 51 28857) (13148 52 28857) (13149 53 28857) (13150 54 28857) (13151 55 28857) (13152 56 28857) (13153 57 28857) (13154 49 48 28857) (13155 49 49 28857) (13156 49 50 28857) (13157 49 51 28857) (13158 49 52 28857) (13159 49 53 28857) (13160 49 54 28857) (13161 49 55 28857) (13162 49 56 28857) (13163 49 57 28857) (13164 50 48 28857) (13165 50 49 28857) (13166 50 50 28857) (13167 50 51 28857) (13168 50 52 28857) (13169 104 80 97) (13170 100 97) (13171 65 85) (13172 98 97 114) (13173 111 86) (13174 112 99) (13175 100 109) (13176 100 109 178) (13177 100 109 179) (13178 73 85) (13179 24179 25104) (13180 26157 21644) (13181 22823 27491) (13182 26126 27835) (13183 26666 24335 20250 31038) (13184 112 65) (13185 110 65) (13186 956 65) (13187 109 65) (13188 107 65) (13189 75 66) (13190 77 66) (13191 71 66) (13192 99 97 108) (13193 107 99 97 108) (13194 112 70) (13195 110 70) (13196 956 70) (13197 956 103) (13198 109 103) (13199 107 103) (13200 72 122) (13201 107 72 122) (13202 77 72 122) (13203 71 72 122) (13204 84 72 122) (13205 956 8467) (13206 109 8467) (13207 100 8467) (13208 107 8467) (13209 102 109) (13210 110 109) (13211 956 109) (13212 109 109) (13213 99 109) (13214 107 109) (13215 109 109 178) (13216 99 109 178) (13217 109 178) (13218 107 109 178) (13219 109 109 179) (13220 99 109 179) (13221 109 179) (13222 107 109 179) (13223 109 8725 115) (13224 109 8725 115 178) (13225 80 97) (13226 107 80 97) (13227 77 80 97) (13228 71 80 97) (13229 114 97 100) (13230 114 97 100 8725 115) (13231 114 97 100 8725 115 178) (13232 112 115) (13233 110 115) (13234 956 115) (13235 109 115) (13236 112 86) (13237 110 86) (13238 956 86) (13239 109 86) (13240 107 86) (13241 77 86) (13242 112 87) (13243 110 87) (13244 956 87) (13245 109 87) (13246 107 87) (13247 77 87) (13248 107 937) (13249 77 937) (13250 97 46 109 46) (13251 66 113) (13252 99 99) (13253 99 100) (13254 67 8725 107 103) (13255 67 111 46) (13256 100 66) (13257 71 121) (13258 104 97) (13259 72 80) (13260 105 110) (13261 75 75) (13262 75 77) (13263 107 116) (13264 108 109) (13265 108 110) (13266 108 111 103) (13267 108 120) (13268 109 98) (13269 109 105 108) (13270 109 111 108) (13271 80 72) (13272 112 46 109 46) (13273 80 80 77) (13274 80 82) (13275 115 114) (13276 83 118) (13277 87 98) (13278 86 8725 109) (13279 65 8725 109) (13280 49 26085) (13281 50 26085) (13282 51 26085) (13283 52 26085) (13284 53 26085) (13285 54 26085) (13286 55 26085) (13287 56 26085) (13288 57 26085) (13289 49 48 26085) (13290 49 49 26085) (13291 49 50 26085) (13292 49 51 26085) (13293 49 52 26085) (13294 49 53 26085) (13295 49 54 26085) (13296 49 55 26085) (13297 49 56 26085) (13298 49 57 26085) (13299 50 48 26085) (13300 50 49 26085) (13301 50 50 26085) (13302 50 51 26085) (13303 50 52 26085) (13304 50 53 26085) (13305 50 54 26085) (13306 50 55 26085) (13307 50 56 26085) (13308 50 57 26085) (13309 51 48 26085) (13310 51 49 26085) (13311 103 97 108) (42864 42863) (64256 102 102) (64257 102 105) (64258 102 108) (64259 102 102 105) (64260 102 102 108) (64261 383 116) (64262 115 116) (64275 1396 1398) (64276 1396 1381) (64277 1396 1387) (64278 1406 1398) (64279 1396 1389) (64288 1506) (64289 1488) (64290 1491) (64291 1492) (64292 1499) (64293 1500) (64294 1501) (64295 1512) (64296 1514) (64297 43) (64335 1488 1500) (64336 1649) (64337 1649) (64338 1659) (64339 1659) (64340 1659) (64341 1659) (64342 1662) (64343 1662) (64344 1662) (64345 1662) (64346 1664) (64347 1664) (64348 1664) (64349 1664) (64350 1658) (64351 1658) (64352 1658) (64353 1658) (64354 1663) (64355 1663) (64356 1663) (64357 1663) (64358 1657) (64359 1657) (64360 1657) (64361 1657) (64362 1700) (64363 1700) (64364 1700) (64365 1700) (64366 1702) (64367 1702) (64368 1702) (64369 1702) (64370 1668) (64371 1668) (64372 1668) (64373 1668) (64374 1667) (64375 1667) (64376 1667) (64377 1667) (64378 1670) (64379 1670) (64380 1670) (64381 1670) (64382 1671) (64383 1671) (64384 1671) (64385 1671) (64386 1677) (64387 1677) (64388 1676) (64389 1676) (64390 1678) (64391 1678) (64392 1672) (64393 1672) (64394 1688) (64395 1688) (64396 1681) (64397 1681) (64398 1705) (64399 1705) (64400 1705) (64401 1705) (64402 1711) (64403 1711) (64404 1711) (64405 1711) (64406 1715) (64407 1715) (64408 1715) (64409 1715) (64410 1713) (64411 1713) (64412 1713) (64413 1713) (64414 1722) (64415 1722) (64416 1723) (64417 1723) (64418 1723) (64419 1723) (64420 1728) (64421 1728) (64422 1729) (64423 1729) (64424 1729) (64425 1729) (64426 1726) (64427 1726) (64428 1726) (64429 1726) (64430 1746) (64431 1746) (64432 1747) (64433 1747) (64467 1709) (64468 1709) (64469 1709) (64470 1709) (64471 1735) (64472 1735) (64473 1734) (64474 1734) (64475 1736) (64476 1736) (64477 1655) (64478 1739) (64479 1739) (64480 1733) (64481 1733) (64482 1737) (64483 1737) (64484 1744) (64485 1744) (64486 1744) (64487 1744) (64488 1609) (64489 1609) (64490 1574 1575) (64491 1574 1575) (64492 1574 1749) (64493 1574 1749) (64494 1574 1608) (64495 1574 1608) (64496 1574 1735) (64497 1574 1735) (64498 1574 1734) (64499 1574 1734) (64500 1574 1736) (64501 1574 1736) (64502 1574 1744) (64503 1574 1744) (64504 1574 1744) (64505 1574 1609) (64506 1574 1609) (64507 1574 1609) (64508 1740) (64509 1740) (64510 1740) (64511 1740) (64512 1574 1580) (64513 1574 1581) (64514 1574 1605) (64515 1574 1609) (64516 1574 1610) (64517 1576 1580) (64518 1576 1581) (64519 1576 1582) (64520 1576 1605) (64521 1576 1609) (64522 1576 1610) (64523 1578 1580) (64524 1578 1581) (64525 1578 1582) (64526 1578 1605) (64527 1578 1609) (64528 1578 1610) (64529 1579 1580) (64530 1579 1605) (64531 1579 1609) (64532 1579 1610) (64533 1580 1581) (64534 1580 1605) (64535 1581 1580) (64536 1581 1605) (64537 1582 1580) (64538 1582 1581) (64539 1582 1605) (64540 1587 1580) (64541 1587 1581) (64542 1587 1582) (64543 1587 1605) (64544 1589 1581) (64545 1589 1605) (64546 1590 1580) (64547 1590 1581) (64548 1590 1582) (64549 1590 1605) (64550 1591 1581) (64551 1591 1605) (64552 1592 1605) (64553 1593 1580) (64554 1593 1605) (64555 1594 1580) (64556 1594 1605) (64557 1601 1580) (64558 1601 1581) (64559 1601 1582) (64560 1601 1605) (64561 1601 1609) (64562 1601 1610) (64563 1602 1581) (64564 1602 1605) (64565 1602 1609) (64566 1602 1610) (64567 1603 1575) (64568 1603 1580) (64569 1603 1581) (64570 1603 1582) (64571 1603 1604) (64572 1603 1605) (64573 1603 1609) (64574 1603 1610) (64575 1604 1580) (64576 1604 1581) (64577 1604 1582) (64578 1604 1605) (64579 1604 1609) (64580 1604 1610) (64581 1605 1580) (64582 1605 1581) (64583 1605 1582) (64584 1605 1605) (64585 1605 1609) (64586 1605 1610) (64587 1606 1580) (64588 1606 1581) (64589 1606 1582) (64590 1606 1605) (64591 1606 1609) (64592 1606 1610) (64593 1607 1580) (64594 1607 1605) (64595 1607 1609) (64596 1607 1610) (64597 1610 1580) (64598 1610 1581) (64599 1610 1582) (64600 1610 1605) (64601 1610 1609) (64602 1610 1610) (64603 1584 1648) (64604 1585 1648) (64605 1609 1648) (64606 32 1612 1617) (64607 32 1613 1617) (64608 32 1614 1617) (64609 32 1615 1617) (64610 32 1616 1617) (64611 32 1617 1648) (64612 1574 1585) (64613 1574 1586) (64614 1574 1605) (64615 1574 1606) (64616 1574 1609) (64617 1574 1610) (64618 1576 1585) (64619 1576 1586) (64620 1576 1605) (64621 1576 1606) (64622 1576 1609) (64623 1576 1610) (64624 1578 1585) (64625 1578 1586) (64626 1578 1605) (64627 1578 1606) (64628 1578 1609) (64629 1578 1610) (64630 1579 1585) (64631 1579 1586) (64632 1579 1605) (64633 1579 1606) (64634 1579 1609) (64635 1579 1610) (64636 1601 1609) (64637 1601 1610) (64638 1602 1609) (64639 1602 1610) (64640 1603 1575) (64641 1603 1604) (64642 1603 1605) (64643 1603 1609) (64644 1603 1610) (64645 1604 1605) (64646 1604 1609) (64647 1604 1610) (64648 1605 1575) (64649 1605 1605) (64650 1606 1585) (64651 1606 1586) (64652 1606 1605) (64653 1606 1606) (64654 1606 1609) (64655 1606 1610) (64656 1609 1648) (64657 1610 1585) (64658 1610 1586) (64659 1610 1605) (64660 1610 1606) (64661 1610 1609) (64662 1610 1610) (64663 1574 1580) (64664 1574 1581) (64665 1574 1582) (64666 1574 1605) (64667 1574 1607) (64668 1576 1580) (64669 1576 1581) (64670 1576 1582) (64671 1576 1605) (64672 1576 1607) (64673 1578 1580) (64674 1578 1581) (64675 1578 1582) (64676 1578 1605) (64677 1578 1607) (64678 1579 1605) (64679 1580 1581) (64680 1580 1605) (64681 1581 1580) (64682 1581 1605) (64683 1582 1580) (64684 1582 1605) (64685 1587 1580) (64686 1587 1581) (64687 1587 1582) (64688 1587 1605) (64689 1589 1581) (64690 1589 1582) (64691 1589 1605) (64692 1590 1580) (64693 1590 1581) (64694 1590 1582) (64695 1590 1605) (64696 1591 1581) (64697 1592 1605) (64698 1593 1580) (64699 1593 1605) (64700 1594 1580) (64701 1594 1605) (64702 1601 1580) (64703 1601 1581) (64704 1601 1582) (64705 1601 1605) (64706 1602 1581) (64707 1602 1605) (64708 1603 1580) (64709 1603 1581) (64710 1603 1582) (64711 1603 1604) (64712 1603 1605) (64713 1604 1580) (64714 1604 1581) (64715 1604 1582) (64716 1604 1605) (64717 1604 1607) (64718 1605 1580) (64719 1605 1581) (64720 1605 1582) (64721 1605 1605) (64722 1606 1580) (64723 1606 1581) (64724 1606 1582) (64725 1606 1605) (64726 1606 1607) (64727 1607 1580) (64728 1607 1605) (64729 1607 1648) (64730 1610 1580) (64731 1610 1581) (64732 1610 1582) (64733 1610 1605) (64734 1610 1607) (64735 1574 1605) (64736 1574 1607) (64737 1576 1605) (64738 1576 1607) (64739 1578 1605) (64740 1578 1607) (64741 1579 1605) (64742 1579 1607) (64743 1587 1605) (64744 1587 1607) (64745 1588 1605) (64746 1588 1607) (64747 1603 1604) (64748 1603 1605) (64749 1604 1605) (64750 1606 1605) (64751 1606 1607) (64752 1610 1605) (64753 1610 1607) (64754 1600 1614 1617) (64755 1600 1615 1617) (64756 1600 1616 1617) (64757 1591 1609) (64758 1591 1610) (64759 1593 1609) (64760 1593 1610) (64761 1594 1609) (64762 1594 1610) (64763 1587 1609) (64764 1587 1610) (64765 1588 1609) (64766 1588 1610) (64767 1581 1609) (64768 1581 1610) (64769 1580 1609) (64770 1580 1610) (64771 1582 1609) (64772 1582 1610) (64773 1589 1609) (64774 1589 1610) (64775 1590 1609) (64776 1590 1610) (64777 1588 1580) (64778 1588 1581) (64779 1588 1582) (64780 1588 1605) (64781 1588 1585) (64782 1587 1585) (64783 1589 1585) (64784 1590 1585) (64785 1591 1609) (64786 1591 1610) (64787 1593 1609) (64788 1593 1610) (64789 1594 1609) (64790 1594 1610) (64791 1587 1609) (64792 1587 1610) (64793 1588 1609) (64794 1588 1610) (64795 1581 1609) (64796 1581 1610) (64797 1580 1609) (64798 1580 1610) (64799 1582 1609) (64800 1582 1610) (64801 1589 1609) (64802 1589 1610) (64803 1590 1609) (64804 1590 1610) (64805 1588 1580) (64806 1588 1581) (64807 1588 1582) (64808 1588 1605) (64809 1588 1585) (64810 1587 1585) (64811 1589 1585) (64812 1590 1585) (64813 1588 1580) (64814 1588 1581) (64815 1588 1582) (64816 1588 1605) (64817 1587 1607) (64818 1588 1607) (64819 1591 1605) (64820 1587 1580) (64821 1587 1581) (64822 1587 1582) (64823 1588 1580) (64824 1588 1581) (64825 1588 1582) (64826 1591 1605) (64827 1592 1605) (64828 1575 1611) (64829 1575 1611) (64848 1578 1580 1605) (64849 1578 1581 1580) (64850 1578 1581 1580) (64851 1578 1581 1605) (64852 1578 1582 1605) (64853 1578 1605 1580) (64854 1578 1605 1581) (64855 1578 1605 1582) (64856 1580 1605 1581) (64857 1580 1605 1581) (64858 1581 1605 1610) (64859 1581 1605 1609) (64860 1587 1581 1580) (64861 1587 1580 1581) (64862 1587 1580 1609) (64863 1587 1605 1581) (64864 1587 1605 1581) (64865 1587 1605 1580) (64866 1587 1605 1605) (64867 1587 1605 1605) (64868 1589 1581 1581) (64869 1589 1581 1581) (64870 1589 1605 1605) (64871 1588 1581 1605) (64872 1588 1581 1605) (64873 1588 1580 1610) (64874 1588 1605 1582) (64875 1588 1605 1582) (64876 1588 1605 1605) (64877 1588 1605 1605) (64878 1590 1581 1609) (64879 1590 1582 1605) (64880 1590 1582 1605) (64881 1591 1605 1581) (64882 1591 1605 1581) (64883 1591 1605 1605) (64884 1591 1605 1610) (64885 1593 1580 1605) (64886 1593 1605 1605) (64887 1593 1605 1605) (64888 1593 1605 1609) (64889 1594 1605 1605) (64890 1594 1605 1610) (64891 1594 1605 1609) (64892 1601 1582 1605) (64893 1601 1582 1605) (64894 1602 1605 1581) (64895 1602 1605 1605) (64896 1604 1581 1605) (64897 1604 1581 1610) (64898 1604 1581 1609) (64899 1604 1580 1580) (64900 1604 1580 1580) (64901 1604 1582 1605) (64902 1604 1582 1605) (64903 1604 1605 1581) (64904 1604 1605 1581) (64905 1605 1581 1580) (64906 1605 1581 1605) (64907 1605 1581 1610) (64908 1605 1580 1581) (64909 1605 1580 1605) (64910 1605 1582 1580) (64911 1605 1582 1605) (64914 1605 1580 1582) (64915 1607 1605 1580) (64916 1607 1605 1605) (64917 1606 1581 1605) (64918 1606 1581 1609) (64919 1606 1580 1605) (64920 1606 1580 1605) (64921 1606 1580 1609) (64922 1606 1605 1610) (64923 1606 1605 1609) (64924 1610 1605 1605) (64925 1610 1605 1605) (64926 1576 1582 1610) (64927 1578 1580 1610) (64928 1578 1580 1609) (64929 1578 1582 1610) (64930 1578 1582 1609) (64931 1578 1605 1610) (64932 1578 1605 1609) (64933 1580 1605 1610) (64934 1580 1581 1609) (64935 1580 1605 1609) (64936 1587 1582 1609) (64937 1589 1581 1610) (64938 1588 1581 1610) (64939 1590 1581 1610) (64940 1604 1580 1610) (64941 1604 1605 1610) (64942 1610 1581 1610) (64943 1610 1580 1610) (64944 1610 1605 1610) (64945 1605 1605 1610) (64946 1602 1605 1610) (64947 1606 1581 1610) (64948 1602 1605 1581) (64949 1604 1581 1605) (64950 1593 1605 1610) (64951 1603 1605 1610) (64952 1606 1580 1581) (64953 1605 1582 1610) (64954 1604 1580 1605) (64955 1603 1605 1605) (64956 1604 1580 1605) (64957 1606 1580 1581) (64958 1580 1581 1610) (64959 1581 1580 1610) (64960 1605 1580 1610) (64961 1601 1605 1610) (64962 1576 1581 1610) (64963 1603 1605 1605) (64964 1593 1580 1605) (64965 1589 1605 1605) (64966 1587 1582 1610) (64967 1606 1580 1610) (65008 1589 1604 1746) (65009 1602 1604 1746) (65010 1575 1604 1604 1607) (65011 1575 1603 1576 1585) (65012 1605 1581 1605 1583) (65013 1589 1604 1593 1605) (65014 1585 1587 1608 1604) (65015 1593 1604 1610 1607) (65016 1608 1587 1604 1605) (65017 1589 1604 1609) (65018 1589 1604 1609 32 1575 1604 1604 1607 32 1593 1604 1610 1607 32 1608 1587 1604 1605) (65019 1580 1604 32 1580 1604 1575 1604 1607) (65020 1585 1740 1575 1604) (65040 44) (65041 12289) (65042 12290) (65043 58) (65044 59) (65045 33) (65046 63) (65047 12310) (65048 12311) (65049 8230) (65072 8229) (65073 8212) (65074 8211) (65075 95) (65076 95) (65077 40) (65078 41) (65079 123) (65080 125) (65081 12308) (65082 12309) (65083 12304) (65084 12305) (65085 12298) (65086 12299) (65087 12296) (65088 12297) (65089 12300) (65090 12301) (65091 12302) (65092 12303) (65095 91) (65096 93) (65097 8254) (65098 8254) (65099 8254) (65100 8254) (65101 95) (65102 95) (65103 95) (65104 44) (65105 12289) (65106 46) (65108 59) (65109 58) (65110 63) (65111 33) (65112 8212) (65113 40) (65114 41) (65115 123) (65116 125) (65117 12308) (65118 12309) (65119 35) (65120 38) (65121 42) (65122 43) (65123 45) (65124 60) (65125 62) (65126 61) (65128 92) (65129 36) (65130 37) (65131 64) (65136 32 1611) (65137 1600 1611) (65138 32 1612) (65140 32 1613) (65142 32 1614) (65143 1600 1614) (65144 32 1615) (65145 1600 1615) (65146 32 1616) (65147 1600 1616) (65148 32 1617) (65149 1600 1617) (65150 32 1618) (65151 1600 1618) (65152 1569) (65153 1570) (65154 1570) (65155 1571) (65156 1571) (65157 1572) (65158 1572) (65159 1573) (65160 1573) (65161 1574) (65162 1574) (65163 1574) (65164 1574) (65165 1575) (65166 1575) (65167 1576) (65168 1576) (65169 1576) (65170 1576) (65171 1577) (65172 1577) (65173 1578) (65174 1578) (65175 1578) (65176 1578) (65177 1579) (65178 1579) (65179 1579) (65180 1579) (65181 1580) (65182 1580) (65183 1580) (65184 1580) (65185 1581) (65186 1581) (65187 1581) (65188 1581) (65189 1582) (65190 1582) (65191 1582) (65192 1582) (65193 1583) (65194 1583) (65195 1584) (65196 1584) (65197 1585) (65198 1585) (65199 1586) (65200 1586) (65201 1587) (65202 1587) (65203 1587) (65204 1587) (65205 1588) (65206 1588) (65207 1588) (65208 1588) (65209 1589) (65210 1589) (65211 1589) (65212 1589) (65213 1590) (65214 1590) (65215 1590) (65216 1590) (65217 1591) (65218 1591) (65219 1591) (65220 1591) (65221 1592) (65222 1592) (65223 1592) (65224 1592) (65225 1593) (65226 1593) (65227 1593) (65228 1593) (65229 1594) (65230 1594) (65231 1594) (65232 1594) (65233 1601) (65234 1601) (65235 1601) (65236 1601) (65237 1602) (65238 1602) (65239 1602) (65240 1602) (65241 1603) (65242 1603) (65243 1603) (65244 1603) (65245 1604) (65246 1604) (65247 1604) (65248 1604) (65249 1605) (65250 1605) (65251 1605) (65252 1605) (65253 1606) (65254 1606) (65255 1606) (65256 1606) (65257 1607) (65258 1607) (65259 1607) (65260 1607) (65261 1608) (65262 1608) (65263 1609) (65264 1609) (65265 1610) (65266 1610) (65267 1610) (65268 1610) (65269 1604 1570) (65270 1604 1570) (65271 1604 1571) (65272 1604 1571) (65273 1604 1573) (65274 1604 1573) (65275 1604 1575) (65276 1604 1575) (65281 33) (65282 34) (65283 35) (65284 36) (65285 37) (65286 38) (65287 39) (65288 40) (65289 41) (65290 42) (65291 43) (65292 44) (65293 45) (65294 46) (65295 47) (65296 48) (65297 49) (65298 50) (65299 51) (65300 52) (65301 53) (65302 54) (65303 55) (65304 56) (65305 57) (65306 58) (65307 59) (65308 60) (65309 61) (65310 62) (65311 63) (65312 64) (65313 65) (65314 66) (65315 67) (65316 68) (65317 69) (65318 70) (65319 71) (65320 72) (65321 73) (65322 74) (65323 75) (65324 76) (65325 77) (65326 78) (65327 79) (65328 80) (65329 81) (65330 82) (65331 83) (65332 84) (65333 85) (65334 86) (65335 87) (65336 88) (65337 89) (65338 90) (65339 91) (65340 92) (65341 93) (65342 94) (65343 95) (65344 96) (65345 97) (65346 98) (65347 99) (65348 100) (65349 101) (65350 102) (65351 103) (65352 104) (65353 105) (65354 106) (65355 107) (65356 108) (65357 109) (65358 110) (65359 111) (65360 112) (65361 113) (65362 114) (65363 115) (65364 116) (65365 117) (65366 118) (65367 119) (65368 120) (65369 121) (65370 122) (65371 123) (65372 124) (65373 125) (65374 126) (65375 10629) (65376 10630) (65377 12290) (65378 12300) (65379 12301) (65380 12289) (65381 12539) (65382 12530) (65383 12449) (65384 12451) (65385 12453) (65386 12455) (65387 12457) (65388 12515) (65389 12517) (65390 12519) (65391 12483) (65392 12540) (65393 12450) (65394 12452) (65395 12454) (65396 12456) (65397 12458) (65398 12459) (65399 12461) (65400 12463) (65401 12465) (65402 12467) (65403 12469) (65404 12471) (65405 12473) (65406 12475) (65407 12477) (65408 12479) (65409 12481) (65410 12484) (65411 12486) (65412 12488) (65413 12490) (65414 12491) (65415 12492) (65416 12493) (65417 12494) (65418 12495) (65419 12498) (65420 12501) (65421 12504) (65422 12507) (65423 12510) (65424 12511) (65425 12512) (65426 12513) (65427 12514) (65428 12516) (65429 12518) (65430 12520) (65431 12521) (65432 12522) (65433 12523) (65434 12524) (65435 12525) (65436 12527) (65437 12531) (65438 12441) (65439 12442) (65440 12644) (65441 12593) (65442 12594) (65443 12595) (65444 12596) (65445 12597) (65446 12598) (65447 12599) (65448 12600) (65449 12601) (65450 12602) (65451 12603) (65452 12604) (65453 12605) (65454 12606) (65455 12607) (65456 12608) (65457 12609) (65458 12610) (65459 12611) (65460 12612) (65461 12613) (65462 12614) (65463 12615) (65464 12616) (65465 12617) (65466 12618) (65467 12619) (65468 12620) (65469 12621) (65470 12622) (65474 12623) (65475 12624) (65476 12625) (65477 12626) (65478 12627) (65479 12628) (65482 12629) (65483 12630) (65484 12631) (65485 12632) (65486 12633) (65487 12634) (65490 12635) (65491 12636) (65492 12637) (65493 12638) (65494 12639) (65495 12640) (65498 12641) (65499 12642) (65500 12643) (65504 162) (65505 163) (65506 172) (65507 175) (65508 166) (65509 165) (65510 8361) (65512 9474) (65513 8592) (65514 8593) (65515 8594) (65516 8595) (65517 9632) (65518 9675) (119808 65) (119809 66) (119810 67) (119811 68) (119812 69) (119813 70) (119814 71) (119815 72) (119816 73) (119817 74) (119818 75) (119819 76) (119820 77) (119821 78) (119822 79) (119823 80) (119824 81) (119825 82) (119826 83) (119827 84) (119828 85) (119829 86) (119830 87) (119831 88) (119832 89) (119833 90) (119834 97) (119835 98) (119836 99) (119837 100) (119838 101) (119839 102) (119840 103) (119841 104) (119842 105) (119843 106) (119844 107) (119845 108) (119846 109) (119847 110) (119848 111) (119849 112) (119850 113) (119851 114) (119852 115) (119853 116) (119854 117) (119855 118) (119856 119) (119857 120) (119858 121) (119859 122) (119860 65) (119861 66) (119862 67) (119863 68) (119864 69) (119865 70) (119866 71) (119867 72) (119868 73) (119869 74) (119870 75) (119871 76) (119872 77) (119873 78) (119874 79) (119875 80) (119876 81) (119877 82) (119878 83) (119879 84) (119880 85) (119881 86) (119882 87) (119883 88) (119884 89) (119885 90) (119886 97) (119887 98) (119888 99) (119889 100) (119890 101) (119891 102) (119892 103) (119894 105) (119895 106) (119896 107) (119897 108) (119898 109) (119899 110) (119900 111) (119901 112) (119902 113) (119903 114) (119904 115) (119905 116) (119906 117) (119907 118) (119908 119) (119909 120) (119910 121) (119911 122) (119912 65) (119913 66) (119914 67) (119915 68) (119916 69) (119917 70) (119918 71) (119919 72) (119920 73) (119921 74) (119922 75) (119923 76) (119924 77) (119925 78) (119926 79) (119927 80) (119928 81) (119929 82) (119930 83) (119931 84) (119932 85) (119933 86) (119934 87) (119935 88) (119936 89) (119937 90) (119938 97) (119939 98) (119940 99) (119941 100) (119942 101) (119943 102) (119944 103) (119945 104) (119946 105) (119947 106) (119948 107) (119949 108) (119950 109) (119951 110) (119952 111) (119953 112) (119954 113) (119955 114) (119956 115) (119957 116) (119958 117) (119959 118) (119960 119) (119961 120) (119962 121) (119963 122) (119964 65) (119966 67) (119967 68) (119970 71) (119973 74) (119974 75) (119977 78) (119978 79) (119979 80) (119980 81) (119982 83) (119983 84) (119984 85) (119985 86) (119986 87) (119987 88) (119988 89) (119989 90) (119990 97) (119991 98) (119992 99) (119993 100) (119995 102) (119997 104) (119998 105) (119999 106) (120000 107) (120001 108) (120002 109) (120003 110) (120005 112) (120006 113) (120007 114) (120008 115) (120009 116) (120010 117) (120011 118) (120012 119) (120013 120) (120014 121) (120015 122) (120016 65) (120017 66) (120018 67) (120019 68) (120020 69) (120021 70) (120022 71) (120023 72) (120024 73) (120025 74) (120026 75) (120027 76) (120028 77) (120029 78) (120030 79) (120031 80) (120032 81) (120033 82) (120034 83) (120035 84) (120036 85) (120037 86) (120038 87) (120039 88) (120040 89) (120041 90) (120042 97) (120043 98) (120044 99) (120045 100) (120046 101) (120047 102) (120048 103) (120049 104) (120050 105) (120051 106) (120052 107) (120053 108) (120054 109) (120055 110) (120056 111) (120057 112) (120058 113) (120059 114) (120060 115) (120061 116) (120062 117) (120063 118) (120064 119) (120065 120) (120066 121) (120067 122) (120068 65) (120069 66) (120071 68) (120072 69) (120073 70) (120074 71) (120077 74) (120078 75) (120079 76) (120080 77) (120081 78) (120082 79) (120083 80) (120084 81) (120086 83) (120087 84) (120088 85) (120089 86) (120090 87) (120091 88) (120092 89) (120094 97) (120095 98) (120096 99) (120097 100) (120098 101) (120099 102) (120100 103) (120101 104) (120102 105) (120103 106) (120104 107) (120105 108) (120106 109) (120107 110) (120108 111) (120109 112) (120110 113) (120111 114) (120112 115) (120113 116) (120114 117) (120115 118) (120116 119) (120117 120) (120118 121) (120119 122) (120120 65) (120121 66) (120123 68) (120124 69) (120125 70) (120126 71) (120128 73) (120129 74) (120130 75) (120131 76) (120132 77) (120134 79) (120138 83) (120139 84) (120140 85) (120141 86) (120142 87) (120143 88) (120144 89) (120146 97) (120147 98) (120148 99) (120149 100) (120150 101) (120151 102) (120152 103) (120153 104) (120154 105) (120155 106) (120156 107) (120157 108) (120158 109) (120159 110) (120160 111) (120161 112) (120162 113) (120163 114) (120164 115) (120165 116) (120166 117) (120167 118) (120168 119) (120169 120) (120170 121) (120171 122) (120172 65) (120173 66) (120174 67) (120175 68) (120176 69) (120177 70) (120178 71) (120179 72) (120180 73) (120181 74) (120182 75) (120183 76) (120184 77) (120185 78) (120186 79) (120187 80) (120188 81) (120189 82) (120190 83) (120191 84) (120192 85) (120193 86) (120194 87) (120195 88) (120196 89) (120197 90) (120198 97) (120199 98) (120200 99) (120201 100) (120202 101) (120203 102) (120204 103) (120205 104) (120206 105) (120207 106) (120208 107) (120209 108) (120210 109) (120211 110) (120212 111) (120213 112) (120214 113) (120215 114) (120216 115) (120217 116) (120218 117) (120219 118) (120220 119) (120221 120) (120222 121) (120223 122) (120224 65) (120225 66) (120226 67) (120227 68) (120228 69) (120229 70) (120230 71) (120231 72) (120232 73) (120233 74) (120234 75) (120235 76) (120236 77) (120237 78) (120238 79) (120239 80) (120240 81) (120241 82) (120242 83) (120243 84) (120244 85) (120245 86) (120246 87) (120247 88) (120248 89) (120249 90) (120250 97) (120251 98) (120252 99) (120253 100) (120254 101) (120255 102) (120256 103) (120257 104) (120258 105) (120259 106) (120260 107) (120261 108) (120262 109) (120263 110) (120264 111) (120265 112) (120266 113) (120267 114) (120268 115) (120269 116) (120270 117) (120271 118) (120272 119) (120273 120) (120274 121) (120275 122) (120276 65) (120277 66) (120278 67) (120279 68) (120280 69) (120281 70) (120282 71) (120283 72) (120284 73) (120285 74) (120286 75) (120287 76) (120288 77) (120289 78) (120290 79) (120291 80) (120292 81) (120293 82) (120294 83) (120295 84) (120296 85) (120297 86) (120298 87) (120299 88) (120300 89) (120301 90) (120302 97) (120303 98) (120304 99) (120305 100) (120306 101) (120307 102) (120308 103) (120309 104) (120310 105) (120311 106) (120312 107) (120313 108) (120314 109) (120315 110) (120316 111) (120317 112) (120318 113) (120319 114) (120320 115) (120321 116) (120322 117) (120323 118) (120324 119) (120325 120) (120326 121) (120327 122) (120328 65) (120329 66) (120330 67) (120331 68) (120332 69) (120333 70) (120334 71) (120335 72) (120336 73) (120337 74) (120338 75) (120339 76) (120340 77) (120341 78) (120342 79) (120343 80) (120344 81) (120345 82) (120346 83) (120347 84) (120348 85) (120349 86) (120350 87) (120351 88) (120352 89) (120353 90) (120354 97) (120355 98) (120356 99) (120357 100) (120358 101) (120359 102) (120360 103) (120361 104) (120362 105) (120363 106) (120364 107) (120365 108) (120366 109) (120367 110) (120368 111) (120369 112) (120370 113) (120371 114) (120372 115) (120373 116) (120374 117) (120375 118) (120376 119) (120377 120) (120378 121) (120379 122) (120380 65) (120381 66) (120382 67) (120383 68) (120384 69) (120385 70) (120386 71) (120387 72) (120388 73) (120389 74) (120390 75) (120391 76) (120392 77) (120393 78) (120394 79) (120395 80) (120396 81) (120397 82) (120398 83) (120399 84) (120400 85) (120401 86) (120402 87) (120403 88) (120404 89) (120405 90) (120406 97) (120407 98) (120408 99) (120409 100) (120410 101) (120411 102) (120412 103) (120413 104) (120414 105) (120415 106) (120416 107) (120417 108) (120418 109) (120419 110) (120420 111) (120421 112) (120422 113) (120423 114) (120424 115) (120425 116) (120426 117) (120427 118) (120428 119) (120429 120) (120430 121) (120431 122) (120432 65) (120433 66) (120434 67) (120435 68) (120436 69) (120437 70) (120438 71) (120439 72) (120440 73) (120441 74) (120442 75) (120443 76) (120444 77) (120445 78) (120446 79) (120447 80) (120448 81) (120449 82) (120450 83) (120451 84) (120452 85) (120453 86) (120454 87) (120455 88) (120456 89) (120457 90) (120458 97) (120459 98) (120460 99) (120461 100) (120462 101) (120463 102) (120464 103) (120465 104) (120466 105) (120467 106) (120468 107) (120469 108) (120470 109) (120471 110) (120472 111) (120473 112) (120474 113) (120475 114) (120476 115) (120477 116) (120478 117) (120479 118) (120480 119) (120481 120) (120482 121) (120483 122) (120484 305) (120485 567) (120488 913) (120489 914) (120490 915) (120491 916) (120492 917) (120493 918) (120494 919) (120495 920) (120496 921) (120497 922) (120498 923) (120499 924) (120500 925) (120501 926) (120502 927) (120503 928) (120504 929) (120505 1012) (120506 931) (120507 932) (120508 933) (120509 934) (120510 935) (120511 936) (120512 937) (120513 8711) (120514 945) (120515 946) (120516 947) (120517 948) (120518 949) (120519 950) (120520 951) (120521 952) (120522 953) (120523 954) (120524 955) (120525 956) (120526 957) (120527 958) (120528 959) (120529 960) (120530 961) (120531 962) (120532 963) (120533 964) (120534 965) (120535 966) (120536 967) (120537 968) (120538 969) (120539 8706) (120540 1013) (120541 977) (120542 1008) (120543 981) (120544 1009) (120545 982) (120546 913) (120547 914) (120548 915) (120549 916) (120550 917) (120551 918) (120552 919) (120553 920) (120554 921) (120555 922) (120556 923) (120557 924) (120558 925) (120559 926) (120560 927) (120561 928) (120562 929) (120563 1012) (120564 931) (120565 932) (120566 933) (120567 934) (120568 935) (120569 936) (120570 937) (120571 8711) (120572 945) (120573 946) (120574 947) (120575 948) (120576 949) (120577 950) (120578 951) (120579 952) (120580 953) (120581 954) (120582 955) (120583 956) (120584 957) (120585 958) (120586 959) (120587 960) (120588 961) (120589 962) (120590 963) (120591 964) (120592 965) (120593 966) (120594 967) (120595 968) (120596 969) (120597 8706) (120598 1013) (120599 977) (120600 1008) (120601 981) (120602 1009) (120603 982) (120604 913) (120605 914) (120606 915) (120607 916) (120608 917) (120609 918) (120610 919) (120611 920) (120612 921) (120613 922) (120614 923) (120615 924) (120616 925) (120617 926) (120618 927) (120619 928) (120620 929) (120621 1012) (120622 931) (120623 932) (120624 933) (120625 934) (120626 935) (120627 936) (120628 937) (120629 8711) (120630 945) (120631 946) (120632 947) (120633 948) (120634 949) (120635 950) (120636 951) (120637 952) (120638 953) (120639 954) (120640 955) (120641 956) (120642 957) (120643 958) (120644 959) (120645 960) (120646 961) (120647 962) (120648 963) (120649 964) (120650 965) (120651 966) (120652 967) (120653 968) (120654 969) (120655 8706) (120656 1013) (120657 977) (120658 1008) (120659 981) (120660 1009) (120661 982) (120662 913) (120663 914) (120664 915) (120665 916) (120666 917) (120667 918) (120668 919) (120669 920) (120670 921) (120671 922) (120672 923) (120673 924) (120674 925) (120675 926) (120676 927) (120677 928) (120678 929) (120679 1012) (120680 931) (120681 932) (120682 933) (120683 934) (120684 935) (120685 936) (120686 937) (120687 8711) (120688 945) (120689 946) (120690 947) (120691 948) (120692 949) (120693 950) (120694 951) (120695 952) (120696 953) (120697 954) (120698 955) (120699 956) (120700 957) (120701 958) (120702 959) (120703 960) (120704 961) (120705 962) (120706 963) (120707 964) (120708 965) (120709 966) (120710 967) (120711 968) (120712 969) (120713 8706) (120714 1013) (120715 977) (120716 1008) (120717 981) (120718 1009) (120719 982) (120720 913) (120721 914) (120722 915) (120723 916) (120724 917) (120725 918) (120726 919) (120727 920) (120728 921) (120729 922) (120730 923) (120731 924) (120732 925) (120733 926) (120734 927) (120735 928) (120736 929) (120737 1012) (120738 931) (120739 932) (120740 933) (120741 934) (120742 935) (120743 936) (120744 937) (120745 8711) (120746 945) (120747 946) (120748 947) (120749 948) (120750 949) (120751 950) (120752 951) (120753 952) (120754 953) (120755 954) (120756 955) (120757 956) (120758 957) (120759 958) (120760 959) (120761 960) (120762 961) (120763 962) (120764 963) (120765 964) (120766 965) (120767 966) (120768 967) (120769 968) (120770 969) (120771 8706) (120772 1013) (120773 977) (120774 1008) (120775 981) (120776 1009) (120777 982) (120778 988) (120779 989) (120782 48) (120783 49) (120784 50) (120785 51) (120786 52) (120787 53) (120788 54) (120789 55) (120790 56) (120791 57) (120792 48) (120793 49) (120794 50) (120795 51) (120796 52) (120797 53) (120798 54) (120799 55) (120800 56) (120801 57) (120802 48) (120803 49) (120804 50) (120805 51) (120806 52) (120807 53) (120808 54) (120809 55) (120810 56) (120811 57) (120812 48) (120813 49) (120814 50) (120815 51) (120816 52) (120817 53) (120818 54) (120819 55) (120820 56) (120821 57) (120822 48) (120823 49) (120824 50) (120825 51) (120826 52) (120827 53) (120828 54) (120829 55) (120830 56) (120831 57))) (set! G19571combination-class-list '((1 820 821 822 823 824 8402 8403 8408 8409 8410 8421 8422 8426 8427 68153 119143 119144 119145) (103 3640 3641) (7 2364 2492 2620 2748 2876 3260 4151 6964 7223) (202 801 802 807 808 7632) (8 12441 12442) (9 2381 2509 2637 2765 2893 3021 3149 3277 3405 3530 3642 3972 4153 4154 5908 5940 6098 6980 7082 43014 43204 43347 68159) (107 3656 3657 3658 3659) (10 1456) (11 1457) (12 1458) (13 1459) (14 1460) (15 1461) (16 1462) (17 1463) (18 1464 1479) (19 1465 1466) (214 7630) (20 1467) (118 3768 3769) (21 1468) (216 795 3897 119141 119142 119150 119151 119152 119153 119154) (22 1469) (23 1471) (218 12330) (24 1473) (122 3784 3785 3786 3787) (25 1474) (220 790 791 792 793 796 797 798 799 800 803 804 805 806 809 810 811 812 813 814 815 816 817 818 819 825 826 827 828 839 840 841 845 846 851 852 853 854 857 858 1425 1430 1435 1442 1443 1444 1445 1446 1447 1450 1477 1621 1622 1628 1763 1770 1773 1841 1844 1847 1848 1849 1851 1852 1854 1858 1860 1862 1864 2034 2386 3864 3865 3893 3895 4038 4237 6459 6680 7020 7618 7626 7631 7679 8424 8428 8429 8430 8431 43307 43308 43309 66045 68109 68154 119163 119164 119165 119166 119167 119168 119169 119170 119178 119179) (26 64286) (27 1611) (222 1434 1453 6457 12333) (28 1612) (29 1613) (224 12334 12335) (30 1560 1614) (31 1561 1615) (226 119149) (129 3953) (32 1562 1616) (130 3954 3962 3963 3964 3965 3968) (33 1617) (228 1454 6313 12331) (34 1618) (132 3956) (35 1648) (230 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 829 830 831 832 833 834 835 836 838 842 843 844 848 849 850 855 859 867 868 869 870 871 872 873 874 875 876 877 878 879 1155 1156 1157 1158 1159 1426 1427 1428 1429 1431 1432 1433 1436 1437 1438 1439 1440 1441 1448 1449 1451 1452 1455 1476 1552 1553 1554 1555 1556 1557 1558 1559 1619 1620 1623 1624 1625 1626 1627 1629 1630 1750 1751 1752 1753 1754 1755 1756 1759 1760 1761 1762 1764 1767 1768 1771 1772 1840 1842 1843 1845 1846 1850 1853 1855 1856 1857 1859 1861 1863 1865 1866 2027 2028 2029 2030 2031 2032 2033 2035 2385 2387 2388 3970 3971 3974 3975 4959 6109 6458 6679 7019 7021 7022 7023 7024 7025 7026 7027 7616 7617 7619 7620 7621 7622 7623 7624 7625 7627 7628 7633 7634 7635 7636 7637 7638 7639 7640 7641 7642 7643 7644 7645 7646 7647 7648 7649 7650 7651 7652 7653 7654 7678 8400 8401 8404 8405 8406 8407 8411 8412 8417 8423 8425 8432 11744 11745 11746 11747 11748 11749 11750 11751 11752 11753 11754 11755 11756 11757 11758 11759 11760 11761 11762 11763 11764 11765 11766 11767 11768 11769 11770 11771 11772 11773 11774 11775 42607 42620 42621 65056 65057 65058 65059 65060 65061 65062 68111 68152 119173 119174 119175 119176 119177 119210 119211 119212 119213 119362 119363 119364) (36 1809) (232 789 794 856 12332) (233 860 863 866) (234 861 862 864 865 7629) (240 837) (84 3157) (91 3158))) (set! G19573canonical-decompose-list '((192 65 768) (193 65 769) (194 65 770) (195 65 771) (196 65 776) (197 65 778) (199 67 807) (200 69 768) (201 69 769) (202 69 770) (203 69 776) (204 73 768) (205 73 769) (206 73 770) (207 73 776) (209 78 771) (210 79 768) (211 79 769) (212 79 770) (213 79 771) (214 79 776) (217 85 768) (218 85 769) (219 85 770) (220 85 776) (221 89 769) (224 97 768) (225 97 769) (226 97 770) (227 97 771) (228 97 776) (229 97 778) (231 99 807) (232 101 768) (233 101 769) (234 101 770) (235 101 776) (236 105 768) (237 105 769) (238 105 770) (239 105 776) (241 110 771) (242 111 768) (243 111 769) (244 111 770) (245 111 771) (246 111 776) (249 117 768) (250 117 769) (251 117 770) (252 117 776) (253 121 769) (255 121 776) (256 65 772) (257 97 772) (258 65 774) (259 97 774) (260 65 808) (261 97 808) (262 67 769) (263 99 769) (264 67 770) (265 99 770) (266 67 775) (267 99 775) (268 67 780) (269 99 780) (270 68 780) (271 100 780) (274 69 772) (275 101 772) (276 69 774) (277 101 774) (278 69 775) (279 101 775) (280 69 808) (281 101 808) (282 69 780) (283 101 780) (284 71 770) (285 103 770) (286 71 774) (287 103 774) (288 71 775) (289 103 775) (290 71 807) (291 103 807) (292 72 770) (293 104 770) (296 73 771) (297 105 771) (298 73 772) (299 105 772) (300 73 774) (301 105 774) (302 73 808) (303 105 808) (304 73 775) (308 74 770) (309 106 770) (310 75 807) (311 107 807) (313 76 769) (314 108 769) (315 76 807) (316 108 807) (317 76 780) (318 108 780) (323 78 769) (324 110 769) (325 78 807) (326 110 807) (327 78 780) (328 110 780) (332 79 772) (333 111 772) (334 79 774) (335 111 774) (336 79 779) (337 111 779) (340 82 769) (341 114 769) (342 82 807) (343 114 807) (344 82 780) (345 114 780) (346 83 769) (347 115 769) (348 83 770) (349 115 770) (350 83 807) (351 115 807) (352 83 780) (353 115 780) (354 84 807) (355 116 807) (356 84 780) (357 116 780) (360 85 771) (361 117 771) (362 85 772) (363 117 772) (364 85 774) (365 117 774) (366 85 778) (367 117 778) (368 85 779) (369 117 779) (370 85 808) (371 117 808) (372 87 770) (373 119 770) (374 89 770) (375 121 770) (376 89 776) (377 90 769) (378 122 769) (379 90 775) (380 122 775) (381 90 780) (382 122 780) (416 79 795) (417 111 795) (431 85 795) (432 117 795) (461 65 780) (462 97 780) (463 73 780) (464 105 780) (465 79 780) (466 111 780) (467 85 780) (468 117 780) (469 220 772) (470 252 772) (471 220 769) (472 252 769) (473 220 780) (474 252 780) (475 220 768) (476 252 768) (478 196 772) (479 228 772) (480 550 772) (481 551 772) (482 198 772) (483 230 772) (486 71 780) (487 103 780) (488 75 780) (489 107 780) (490 79 808) (491 111 808) (492 490 772) (493 491 772) (494 439 780) (495 658 780) (496 106 780) (500 71 769) (501 103 769) (504 78 768) (505 110 768) (506 197 769) (507 229 769) (508 198 769) (509 230 769) (510 216 769) (511 248 769) (512 65 783) (513 97 783) (514 65 785) (515 97 785) (516 69 783) (517 101 783) (518 69 785) (519 101 785) (520 73 783) (521 105 783) (522 73 785) (523 105 785) (524 79 783) (525 111 783) (526 79 785) (527 111 785) (528 82 783) (529 114 783) (530 82 785) (531 114 785) (532 85 783) (533 117 783) (534 85 785) (535 117 785) (536 83 806) (537 115 806) (538 84 806) (539 116 806) (542 72 780) (543 104 780) (550 65 775) (551 97 775) (552 69 807) (553 101 807) (554 214 772) (555 246 772) (556 213 772) (557 245 772) (558 79 775) (559 111 775) (560 558 772) (561 559 772) (562 89 772) (563 121 772) (832 768) (833 769) (835 787) (836 776 769) (884 697) (894 59) (901 168 769) (902 913 769) (903 183) (904 917 769) (905 919 769) (906 921 769) (908 927 769) (910 933 769) (911 937 769) (912 970 769) (938 921 776) (939 933 776) (940 945 769) (941 949 769) (942 951 769) (943 953 769) (944 971 769) (970 953 776) (971 965 776) (972 959 769) (973 965 769) (974 969 769) (979 978 769) (980 978 776) (1024 1045 768) (1025 1045 776) (1027 1043 769) (1031 1030 776) (1036 1050 769) (1037 1048 768) (1038 1059 774) (1049 1048 774) (1081 1080 774) (1104 1077 768) (1105 1077 776) (1107 1075 769) (1111 1110 776) (1116 1082 769) (1117 1080 768) (1118 1091 774) (1142 1140 783) (1143 1141 783) (1217 1046 774) (1218 1078 774) (1232 1040 774) (1233 1072 774) (1234 1040 776) (1235 1072 776) (1238 1045 774) (1239 1077 774) (1242 1240 776) (1243 1241 776) (1244 1046 776) (1245 1078 776) (1246 1047 776) (1247 1079 776) (1250 1048 772) (1251 1080 772) (1252 1048 776) (1253 1080 776) (1254 1054 776) (1255 1086 776) (1258 1256 776) (1259 1257 776) (1260 1069 776) (1261 1101 776) (1262 1059 772) (1263 1091 772) (1264 1059 776) (1265 1091 776) (1266 1059 779) (1267 1091 779) (1268 1063 776) (1269 1095 776) (1272 1067 776) (1273 1099 776) (1570 1575 1619) (1571 1575 1620) (1572 1608 1620) (1573 1575 1621) (1574 1610 1620) (1728 1749 1620) (1730 1729 1620) (1747 1746 1620) (2345 2344 2364) (2353 2352 2364) (2356 2355 2364) (2392 2325 2364) (2393 2326 2364) (2394 2327 2364) (2395 2332 2364) (2396 2337 2364) (2397 2338 2364) (2398 2347 2364) (2399 2351 2364) (2507 2503 2494) (2508 2503 2519) (2524 2465 2492) (2525 2466 2492) (2527 2479 2492) (2611 2610 2620) (2614 2616 2620) (2649 2582 2620) (2650 2583 2620) (2651 2588 2620) (2654 2603 2620) (2888 2887 2902) (2891 2887 2878) (2892 2887 2903) (2908 2849 2876) (2909 2850 2876) (2964 2962 3031) (3018 3014 3006) (3019 3015 3006) (3020 3014 3031) (3144 3142 3158) (3264 3263 3285) (3271 3270 3285) (3272 3270 3286) (3274 3270 3266) (3275 3274 3285) (3402 3398 3390) (3403 3399 3390) (3404 3398 3415) (3546 3545 3530) (3548 3545 3535) (3549 3548 3530) (3550 3545 3551) (3907 3906 4023) (3917 3916 4023) (3922 3921 4023) (3927 3926 4023) (3932 3931 4023) (3945 3904 4021) (3955 3953 3954) (3957 3953 3956) (3958 4018 3968) (3960 4019 3968) (3969 3953 3968) (3987 3986 4023) (3997 3996 4023) (4002 4001 4023) (4007 4006 4023) (4012 4011 4023) (4025 3984 4021) (4134 4133 4142) (6918 6917 6965) (6920 6919 6965) (6922 6921 6965) (6924 6923 6965) (6926 6925 6965) (6930 6929 6965) (6971 6970 6965) (6973 6972 6965) (6976 6974 6965) (6977 6975 6965) (6979 6978 6965) (7680 65 805) (7681 97 805) (7682 66 775) (7683 98 775) (7684 66 803) (7685 98 803) (7686 66 817) (7687 98 817) (7688 199 769) (7689 231 769) (7690 68 775) (7691 100 775) (7692 68 803) (7693 100 803) (7694 68 817) (7695 100 817) (7696 68 807) (7697 100 807) (7698 68 813) (7699 100 813) (7700 274 768) (7701 275 768) (7702 274 769) (7703 275 769) (7704 69 813) (7705 101 813) (7706 69 816) (7707 101 816) (7708 552 774) (7709 553 774) (7710 70 775) (7711 102 775) (7712 71 772) (7713 103 772) (7714 72 775) (7715 104 775) (7716 72 803) (7717 104 803) (7718 72 776) (7719 104 776) (7720 72 807) (7721 104 807) (7722 72 814) (7723 104 814) (7724 73 816) (7725 105 816) (7726 207 769) (7727 239 769) (7728 75 769) (7729 107 769) (7730 75 803) (7731 107 803) (7732 75 817) (7733 107 817) (7734 76 803) (7735 108 803) (7736 7734 772) (7737 7735 772) (7738 76 817) (7739 108 817) (7740 76 813) (7741 108 813) (7742 77 769) (7743 109 769) (7744 77 775) (7745 109 775) (7746 77 803) (7747 109 803) (7748 78 775) (7749 110 775) (7750 78 803) (7751 110 803) (7752 78 817) (7753 110 817) (7754 78 813) (7755 110 813) (7756 213 769) (7757 245 769) (7758 213 776) (7759 245 776) (7760 332 768) (7761 333 768) (7762 332 769) (7763 333 769) (7764 80 769) (7765 112 769) (7766 80 775) (7767 112 775) (7768 82 775) (7769 114 775) (7770 82 803) (7771 114 803) (7772 7770 772) (7773 7771 772) (7774 82 817) (7775 114 817) (7776 83 775) (7777 115 775) (7778 83 803) (7779 115 803) (7780 346 775) (7781 347 775) (7782 352 775) (7783 353 775) (7784 7778 775) (7785 7779 775) (7786 84 775) (7787 116 775) (7788 84 803) (7789 116 803) (7790 84 817) (7791 116 817) (7792 84 813) (7793 116 813) (7794 85 804) (7795 117 804) (7796 85 816) (7797 117 816) (7798 85 813) (7799 117 813) (7800 360 769) (7801 361 769) (7802 362 776) (7803 363 776) (7804 86 771) (7805 118 771) (7806 86 803) (7807 118 803) (7808 87 768) (7809 119 768) (7810 87 769) (7811 119 769) (7812 87 776) (7813 119 776) (7814 87 775) (7815 119 775) (7816 87 803) (7817 119 803) (7818 88 775) (7819 120 775) (7820 88 776) (7821 120 776) (7822 89 775) (7823 121 775) (7824 90 770) (7825 122 770) (7826 90 803) (7827 122 803) (7828 90 817) (7829 122 817) (7830 104 817) (7831 116 776) (7832 119 778) (7833 121 778) (7835 383 775) (7840 65 803) (7841 97 803) (7842 65 777) (7843 97 777) (7844 194 769) (7845 226 769) (7846 194 768) (7847 226 768) (7848 194 777) (7849 226 777) (7850 194 771) (7851 226 771) (7852 7840 770) (7853 7841 770) (7854 258 769) (7855 259 769) (7856 258 768) (7857 259 768) (7858 258 777) (7859 259 777) (7860 258 771) (7861 259 771) (7862 7840 774) (7863 7841 774) (7864 69 803) (7865 101 803) (7866 69 777) (7867 101 777) (7868 69 771) (7869 101 771) (7870 202 769) (7871 234 769) (7872 202 768) (7873 234 768) (7874 202 777) (7875 234 777) (7876 202 771) (7877 234 771) (7878 7864 770) (7879 7865 770) (7880 73 777) (7881 105 777) (7882 73 803) (7883 105 803) (7884 79 803) (7885 111 803) (7886 79 777) (7887 111 777) (7888 212 769) (7889 244 769) (7890 212 768) (7891 244 768) (7892 212 777) (7893 244 777) (7894 212 771) (7895 244 771) (7896 7884 770) (7897 7885 770) (7898 416 769) (7899 417 769) (7900 416 768) (7901 417 768) (7902 416 777) (7903 417 777) (7904 416 771) (7905 417 771) (7906 416 803) (7907 417 803) (7908 85 803) (7909 117 803) (7910 85 777) (7911 117 777) (7912 431 769) (7913 432 769) (7914 431 768) (7915 432 768) (7916 431 777) (7917 432 777) (7918 431 771) (7919 432 771) (7920 431 803) (7921 432 803) (7922 89 768) (7923 121 768) (7924 89 803) (7925 121 803) (7926 89 777) (7927 121 777) (7928 89 771) (7929 121 771) (7936 945 787) (7937 945 788) (7938 7936 768) (7939 7937 768) (7940 7936 769) (7941 7937 769) (7942 7936 834) (7943 7937 834) (7944 913 787) (7945 913 788) (7946 7944 768) (7947 7945 768) (7948 7944 769) (7949 7945 769) (7950 7944 834) (7951 7945 834) (7952 949 787) (7953 949 788) (7954 7952 768) (7955 7953 768) (7956 7952 769) (7957 7953 769) (7960 917 787) (7961 917 788) (7962 7960 768) (7963 7961 768) (7964 7960 769) (7965 7961 769) (7968 951 787) (7969 951 788) (7970 7968 768) (7971 7969 768) (7972 7968 769) (7973 7969 769) (7974 7968 834) (7975 7969 834) (7976 919 787) (7977 919 788) (7978 7976 768) (7979 7977 768) (7980 7976 769) (7981 7977 769) (7982 7976 834) (7983 7977 834) (7984 953 787) (7985 953 788) (7986 7984 768) (7987 7985 768) (7988 7984 769) (7989 7985 769) (7990 7984 834) (7991 7985 834) (7992 921 787) (7993 921 788) (7994 7992 768) (7995 7993 768) (7996 7992 769) (7997 7993 769) (7998 7992 834) (7999 7993 834) (8000 959 787) (8001 959 788) (8002 8000 768) (8003 8001 768) (8004 8000 769) (8005 8001 769) (8008 927 787) (8009 927 788) (8010 8008 768) (8011 8009 768) (8012 8008 769) (8013 8009 769) (8016 965 787) (8017 965 788) (8018 8016 768) (8019 8017 768) (8020 8016 769) (8021 8017 769) (8022 8016 834) (8023 8017 834) (8025 933 788) (8027 8025 768) (8029 8025 769) (8031 8025 834) (8032 969 787) (8033 969 788) (8034 8032 768) (8035 8033 768) (8036 8032 769) (8037 8033 769) (8038 8032 834) (8039 8033 834) (8040 937 787) (8041 937 788) (8042 8040 768) (8043 8041 768) (8044 8040 769) (8045 8041 769) (8046 8040 834) (8047 8041 834) (8048 945 768) (8049 940) (8050 949 768) (8051 941) (8052 951 768) (8053 942) (8054 953 768) (8055 943) (8056 959 768) (8057 972) (8058 965 768) (8059 973) (8060 969 768) (8061 974) (8064 7936 837) (8065 7937 837) (8066 7938 837) (8067 7939 837) (8068 7940 837) (8069 7941 837) (8070 7942 837) (8071 7943 837) (8072 7944 837) (8073 7945 837) (8074 7946 837) (8075 7947 837) (8076 7948 837) (8077 7949 837) (8078 7950 837) (8079 7951 837) (8080 7968 837) (8081 7969 837) (8082 7970 837) (8083 7971 837) (8084 7972 837) (8085 7973 837) (8086 7974 837) (8087 7975 837) (8088 7976 837) (8089 7977 837) (8090 7978 837) (8091 7979 837) (8092 7980 837) (8093 7981 837) (8094 7982 837) (8095 7983 837) (8096 8032 837) (8097 8033 837) (8098 8034 837) (8099 8035 837) (8100 8036 837) (8101 8037 837) (8102 8038 837) (8103 8039 837) (8104 8040 837) (8105 8041 837) (8106 8042 837) (8107 8043 837) (8108 8044 837) (8109 8045 837) (8110 8046 837) (8111 8047 837) (8112 945 774) (8113 945 772) (8114 8048 837) (8115 945 837) (8116 940 837) (8118 945 834) (8119 8118 837) (8120 913 774) (8121 913 772) (8122 913 768) (8123 902) (8124 913 837) (8126 953) (8129 168 834) (8130 8052 837) (8131 951 837) (8132 942 837) (8134 951 834) (8135 8134 837) (8136 917 768) (8137 904) (8138 919 768) (8139 905) (8140 919 837) (8141 8127 768) (8142 8127 769) (8143 8127 834) (8144 953 774) (8145 953 772) (8146 970 768) (8147 912) (8150 953 834) (8151 970 834) (8152 921 774) (8153 921 772) (8154 921 768) (8155 906) (8157 8190 768) (8158 8190 769) (8159 8190 834) (8160 965 774) (8161 965 772) (8162 971 768) (8163 944) (8164 961 787) (8165 961 788) (8166 965 834) (8167 971 834) (8168 933 774) (8169 933 772) (8170 933 768) (8171 910) (8172 929 788) (8173 168 768) (8174 901) (8175 96) (8178 8060 837) (8179 969 837) (8180 974 837) (8182 969 834) (8183 8182 837) (8184 927 768) (8185 908) (8186 937 768) (8187 911) (8188 937 837) (8189 180) (8192 8194) (8193 8195) (8486 937) (8490 75) (8491 197) (8602 8592 824) (8603 8594 824) (8622 8596 824) (8653 8656 824) (8654 8660 824) (8655 8658 824) (8708 8707 824) (8713 8712 824) (8716 8715 824) (8740 8739 824) (8742 8741 824) (8769 8764 824) (8772 8771 824) (8775 8773 824) (8777 8776 824) (8800 61 824) (8802 8801 824) (8813 8781 824) (8814 60 824) (8815 62 824) (8816 8804 824) (8817 8805 824) (8820 8818 824) (8821 8819 824) (8824 8822 824) (8825 8823 824) (8832 8826 824) (8833 8827 824) (8836 8834 824) (8837 8835 824) (8840 8838 824) (8841 8839 824) (8876 8866 824) (8877 8872 824) (8878 8873 824) (8879 8875 824) (8928 8828 824) (8929 8829 824) (8930 8849 824) (8931 8850 824) (8938 8882 824) (8939 8883 824) (8940 8884 824) (8941 8885 824) (9001 12296) (9002 12297) (10972 10973 824) (12364 12363 12441) (12366 12365 12441) (12368 12367 12441) (12370 12369 12441) (12372 12371 12441) (12374 12373 12441) (12376 12375 12441) (12378 12377 12441) (12380 12379 12441) (12382 12381 12441) (12384 12383 12441) (12386 12385 12441) (12389 12388 12441) (12391 12390 12441) (12393 12392 12441) (12400 12399 12441) (12401 12399 12442) (12403 12402 12441) (12404 12402 12442) (12406 12405 12441) (12407 12405 12442) (12409 12408 12441) (12410 12408 12442) (12412 12411 12441) (12413 12411 12442) (12436 12358 12441) (12446 12445 12441) (12460 12459 12441) (12462 12461 12441) (12464 12463 12441) (12466 12465 12441) (12468 12467 12441) (12470 12469 12441) (12472 12471 12441) (12474 12473 12441) (12476 12475 12441) (12478 12477 12441) (12480 12479 12441) (12482 12481 12441) (12485 12484 12441) (12487 12486 12441) (12489 12488 12441) (12496 12495 12441) (12497 12495 12442) (12499 12498 12441) (12500 12498 12442) (12502 12501 12441) (12503 12501 12442) (12505 12504 12441) (12506 12504 12442) (12508 12507 12441) (12509 12507 12442) (12532 12454 12441) (12535 12527 12441) (12536 12528 12441) (12537 12529 12441) (12538 12530 12441) (12542 12541 12441) (63744 35912) (63745 26356) (63746 36554) (63747 36040) (63748 28369) (63749 20018) (63750 21477) (63751 40860) (63752 40860) (63753 22865) (63754 37329) (63755 21895) (63756 22856) (63757 25078) (63758 30313) (63759 32645) (63760 34367) (63761 34746) (63762 35064) (63763 37007) (63764 27138) (63765 27931) (63766 28889) (63767 29662) (63768 33853) (63769 37226) (63770 39409) (63771 20098) (63772 21365) (63773 27396) (63774 29211) (63775 34349) (63776 40478) (63777 23888) (63778 28651) (63779 34253) (63780 35172) (63781 25289) (63782 33240) (63783 34847) (63784 24266) (63785 26391) (63786 28010) (63787 29436) (63788 37070) (63789 20358) (63790 20919) (63791 21214) (63792 25796) (63793 27347) (63794 29200) (63795 30439) (63796 32769) (63797 34310) (63798 34396) (63799 36335) (63800 38706) (63801 39791) (63802 40442) (63803 30860) (63804 31103) (63805 32160) (63806 33737) (63807 37636) (63808 40575) (63809 35542) (63810 22751) (63811 24324) (63812 31840) (63813 32894) (63814 29282) (63815 30922) (63816 36034) (63817 38647) (63818 22744) (63819 23650) (63820 27155) (63821 28122) (63822 28431) (63823 32047) (63824 32311) (63825 38475) (63826 21202) (63827 32907) (63828 20956) (63829 20940) (63830 31260) (63831 32190) (63832 33777) (63833 38517) (63834 35712) (63835 25295) (63836 27138) (63837 35582) (63838 20025) (63839 23527) (63840 24594) (63841 29575) (63842 30064) (63843 21271) (63844 30971) (63845 20415) (63846 24489) (63847 19981) (63848 27852) (63849 25976) (63850 32034) (63851 21443) (63852 22622) (63853 30465) (63854 33865) (63855 35498) (63856 27578) (63857 36784) (63858 27784) (63859 25342) (63860 33509) (63861 25504) (63862 30053) (63863 20142) (63864 20841) (63865 20937) (63866 26753) (63867 31975) (63868 33391) (63869 35538) (63870 37327) (63871 21237) (63872 21570) (63873 22899) (63874 24300) (63875 26053) (63876 28670) (63877 31018) (63878 38317) (63879 39530) (63880 40599) (63881 40654) (63882 21147) (63883 26310) (63884 27511) (63885 36706) (63886 24180) (63887 24976) (63888 25088) (63889 25754) (63890 28451) (63891 29001) (63892 29833) (63893 31178) (63894 32244) (63895 32879) (63896 36646) (63897 34030) (63898 36899) (63899 37706) (63900 21015) (63901 21155) (63902 21693) (63903 28872) (63904 35010) (63905 35498) (63906 24265) (63907 24565) (63908 25467) (63909 27566) (63910 31806) (63911 29557) (63912 20196) (63913 22265) (63914 23527) (63915 23994) (63916 24604) (63917 29618) (63918 29801) (63919 32666) (63920 32838) (63921 37428) (63922 38646) (63923 38728) (63924 38936) (63925 20363) (63926 31150) (63927 37300) (63928 38584) (63929 24801) (63930 20102) (63931 20698) (63932 23534) (63933 23615) (63934 26009) (63935 27138) (63936 29134) (63937 30274) (63938 34044) (63939 36988) (63940 40845) (63941 26248) (63942 38446) (63943 21129) (63944 26491) (63945 26611) (63946 27969) (63947 28316) (63948 29705) (63949 30041) (63950 30827) (63951 32016) (63952 39006) (63953 20845) (63954 25134) (63955 38520) (63956 20523) (63957 23833) (63958 28138) (63959 36650) (63960 24459) (63961 24900) (63962 26647) (63963 29575) (63964 38534) (63965 21033) (63966 21519) (63967 23653) (63968 26131) (63969 26446) (63970 26792) (63971 27877) (63972 29702) (63973 30178) (63974 32633) (63975 35023) (63976 35041) (63977 37324) (63978 38626) (63979 21311) (63980 28346) (63981 21533) (63982 29136) (63983 29848) (63984 34298) (63985 38563) (63986 40023) (63987 40607) (63988 26519) (63989 28107) (63990 33256) (63991 31435) (63992 31520) (63993 31890) (63994 29376) (63995 28825) (63996 35672) (63997 20160) (63998 33590) (63999 21050) (64000 20999) (64001 24230) (64002 25299) (64003 31958) (64004 23429) (64005 27934) (64006 26292) (64007 36667) (64008 34892) (64009 38477) (64010 35211) (64011 24275) (64012 20800) (64013 21952) (64016 22618) (64018 26228) (64021 20958) (64022 29482) (64023 30410) (64024 31036) (64025 31070) (64026 31077) (64027 31119) (64028 38742) (64029 31934) (64030 32701) (64032 34322) (64034 35576) (64037 36920) (64038 37117) (64042 39151) (64043 39164) (64044 39208) (64045 40372) (64048 20398) (64049 20711) (64050 20813) (64051 21193) (64052 21220) (64053 21329) (64054 21917) (64055 22022) (64056 22120) (64057 22592) (64058 22696) (64059 23652) (64060 23662) (64061 24724) (64062 24936) (64063 24974) (64064 25074) (64065 25935) (64066 26082) (64067 26257) (64068 26757) (64069 28023) (64070 28186) (64071 28450) (64072 29038) (64073 29227) (64074 29730) (64075 30865) (64076 31038) (64077 31049) (64078 31048) (64079 31056) (64080 31062) (64081 31069) (64082 31117) (64083 31118) (64084 31296) (64085 31361) (64086 31680) (64087 32244) (64088 32265) (64089 32321) (64090 32626) (64091 32773) (64092 33261) (64093 33401) (64094 33401) (64095 33879) (64096 35088) (64097 35222) (64098 35585) (64099 35641) (64100 36051) (64101 36104) (64102 36790) (64103 36920) (64104 38627) (64105 38911) (64106 38971) (64112 20006) (64113 20917) (64114 20840) (64115 20352) (64116 20805) (64117 20864) (64118 21191) (64119 21242) (64120 21917) (64121 21845) (64122 21913) (64123 21986) (64124 22618) (64125 22707) (64126 22852) (64127 22868) (64128 23138) (64129 23336) (64130 24274) (64131 24281) (64132 24425) (64133 24493) (64134 24792) (64135 24910) (64136 24840) (64137 24974) (64138 24928) (64139 25074) (64140 25140) (64141 25540) (64142 25628) (64143 25682) (64144 25942) (64145 26228) (64146 26391) (64147 26395) (64148 26454) (64149 27513) (64150 27578) (64151 27969) (64152 28379) (64153 28363) (64154 28450) (64155 28702) (64156 29038) (64157 30631) (64158 29237) (64159 29359) (64160 29482) (64161 29809) (64162 29958) (64163 30011) (64164 30237) (64165 30239) (64166 30410) (64167 30427) (64168 30452) (64169 30538) (64170 30528) (64171 30924) (64172 31409) (64173 31680) (64174 31867) (64175 32091) (64176 32244) (64177 32574) (64178 32773) (64179 33618) (64180 33775) (64181 34681) (64182 35137) (64183 35206) (64184 35222) (64185 35519) (64186 35576) (64187 35531) (64188 35585) (64189 35582) (64190 35565) (64191 35641) (64192 35722) (64193 36104) (64194 36664) (64195 36978) (64196 37273) (64197 37494) (64198 38524) (64199 38627) (64200 38742) (64201 38875) (64202 38911) (64203 38923) (64204 38971) (64205 39698) (64206 40860) (64207 141386) (64208 141380) (64209 144341) (64210 15261) (64211 16408) (64212 16441) (64213 152137) (64214 154832) (64215 163539) (64216 40771) (64217 40846) (64285 1497 1460) (64287 1522 1463) (64298 1513 1473) (64299 1513 1474) (64300 64329 1473) (64301 64329 1474) (64302 1488 1463) (64303 1488 1464) (64304 1488 1468) (64305 1489 1468) (64306 1490 1468) (64307 1491 1468) (64308 1492 1468) (64309 1493 1468) (64310 1494 1468) (64312 1496 1468) (64313 1497 1468) (64314 1498 1468) (64315 1499 1468) (64316 1500 1468) (64318 1502 1468) (64320 1504 1468) (64321 1505 1468) (64323 1507 1468) (64324 1508 1468) (64326 1510 1468) (64327 1511 1468) (64328 1512 1468) (64329 1513 1468) (64330 1514 1468) (64331 1493 1465) (64332 1489 1471) (64333 1499 1471) (64334 1508 1471) (119134 119127 119141) (119135 119128 119141) (119136 119135 119150) (119137 119135 119151) (119138 119135 119152) (119139 119135 119153) (119140 119135 119154) (119227 119225 119141) (119228 119226 119141) (119229 119227 119150) (119230 119228 119150) (119231 119227 119151) (119232 119228 119151) (194560 20029) (194561 20024) (194562 20033) (194563 131362) (194564 20320) (194565 20398) (194566 20411) (194567 20482) (194568 20602) (194569 20633) (194570 20711) (194571 20687) (194572 13470) (194573 132666) (194574 20813) (194575 20820) (194576 20836) (194577 20855) (194578 132380) (194579 13497) (194580 20839) (194581 20877) (194582 132427) (194583 20887) (194584 20900) (194585 20172) (194586 20908) (194587 20917) (194588 168415) (194589 20981) (194590 20995) (194591 13535) (194592 21051) (194593 21062) (194594 21106) (194595 21111) (194596 13589) (194597 21191) (194598 21193) (194599 21220) (194600 21242) (194601 21253) (194602 21254) (194603 21271) (194604 21321) (194605 21329) (194606 21338) (194607 21363) (194608 21373) (194609 21375) (194610 21375) (194611 21375) (194612 133676) (194613 28784) (194614 21450) (194615 21471) (194616 133987) (194617 21483) (194618 21489) (194619 21510) (194620 21662) (194621 21560) (194622 21576) (194623 21608) (194624 21666) (194625 21750) (194626 21776) (194627 21843) (194628 21859) (194629 21892) (194630 21892) (194631 21913) (194632 21931) (194633 21939) (194634 21954) (194635 22294) (194636 22022) (194637 22295) (194638 22097) (194639 22132) (194640 20999) (194641 22766) (194642 22478) (194643 22516) (194644 22541) (194645 22411) (194646 22578) (194647 22577) (194648 22700) (194649 136420) (194650 22770) (194651 22775) (194652 22790) (194653 22810) (194654 22818) (194655 22882) (194656 136872) (194657 136938) (194658 23020) (194659 23067) (194660 23079) (194661 23000) (194662 23142) (194663 14062) (194664 14076) (194665 23304) (194666 23358) (194667 23358) (194668 137672) (194669 23491) (194670 23512) (194671 23527) (194672 23539) (194673 138008) (194674 23551) (194675 23558) (194676 24403) (194677 23586) (194678 14209) (194679 23648) (194680 23662) (194681 23744) (194682 23693) (194683 138724) (194684 23875) (194685 138726) (194686 23918) (194687 23915) (194688 23932) (194689 24033) (194690 24034) (194691 14383) (194692 24061) (194693 24104) (194694 24125) (194695 24169) (194696 14434) (194697 139651) (194698 14460) (194699 24240) (194700 24243) (194701 24246) (194702 24266) (194703 172946) (194704 24318) (194705 140081) (194706 140081) (194707 33281) (194708 24354) (194709 24354) (194710 14535) (194711 144056) (194712 156122) (194713 24418) (194714 24427) (194715 14563) (194716 24474) (194717 24525) (194718 24535) (194719 24569) (194720 24705) (194721 14650) (194722 14620) (194723 24724) (194724 141012) (194725 24775) (194726 24904) (194727 24908) (194728 24910) (194729 24908) (194730 24954) (194731 24974) (194732 25010) (194733 24996) (194734 25007) (194735 25054) (194736 25074) (194737 25078) (194738 25104) (194739 25115) (194740 25181) (194741 25265) (194742 25300) (194743 25424) (194744 142092) (194745 25405) (194746 25340) (194747 25448) (194748 25475) (194749 25572) (194750 142321) (194751 25634) (194752 25541) (194753 25513) (194754 14894) (194755 25705) (194756 25726) (194757 25757) (194758 25719) (194759 14956) (194760 25935) (194761 25964) (194762 143370) (194763 26083) (194764 26360) (194765 26185) (194766 15129) (194767 26257) (194768 15112) (194769 15076) (194770 20882) (194771 20885) (194772 26368) (194773 26268) (194774 32941) (194775 17369) (194776 26391) (194777 26395) (194778 26401) (194779 26462) (194780 26451) (194781 144323) (194782 15177) (194783 26618) (194784 26501) (194785 26706) (194786 26757) (194787 144493) (194788 26766) (194789 26655) (194790 26900) (194791 15261) (194792 26946) (194793 27043) (194794 27114) (194795 27304) (194796 145059) (194797 27355) (194798 15384) (194799 27425) (194800 145575) (194801 27476) (194802 15438) (194803 27506) (194804 27551) (194805 27578) (194806 27579) (194807 146061) (194808 138507) (194809 146170) (194810 27726) (194811 146620) (194812 27839) (194813 27853) (194814 27751) (194815 27926) (194816 27966) (194817 28023) (194818 27969) (194819 28009) (194820 28024) (194821 28037) (194822 146718) (194823 27956) (194824 28207) (194825 28270) (194826 15667) (194827 28363) (194828 28359) (194829 147153) (194830 28153) (194831 28526) (194832 147294) (194833 147342) (194834 28614) (194835 28729) (194836 28702) (194837 28699) (194838 15766) (194839 28746) (194840 28797) (194841 28791) (194842 28845) (194843 132389) (194844 28997) (194845 148067) (194846 29084) (194847 148395) (194848 29224) (194849 29237) (194850 29264) (194851 149000) (194852 29312) (194853 29333) (194854 149301) (194855 149524) (194856 29562) (194857 29579) (194858 16044) (194859 29605) (194860 16056) (194861 16056) (194862 29767) (194863 29788) (194864 29809) (194865 29829) (194866 29898) (194867 16155) (194868 29988) (194869 150582) (194870 30014) (194871 150674) (194872 30064) (194873 139679) (194874 30224) (194875 151457) (194876 151480) (194877 151620) (194878 16380) (194879 16392) (194880 30452) (194881 151795) (194882 151794) (194883 151833) (194884 151859) (194885 30494) (194886 30495) (194887 30495) (194888 30538) (194889 16441) (194890 30603) (194891 16454) (194892 16534) (194893 152605) (194894 30798) (194895 30860) (194896 30924) (194897 16611) (194898 153126) (194899 31062) (194900 153242) (194901 153285) (194902 31119) (194903 31211) (194904 16687) (194905 31296) (194906 31306) (194907 31311) (194908 153980) (194909 154279) (194910 154279) (194911 31470) (194912 16898) (194913 154539) (194914 31686) (194915 31689) (194916 16935) (194917 154752) (194918 31954) (194919 17056) (194920 31976) (194921 31971) (194922 32000) (194923 155526) (194924 32099) (194925 17153) (194926 32199) (194927 32258) (194928 32325) (194929 17204) (194930 156200) (194931 156231) (194932 17241) (194933 156377) (194934 32634) (194935 156478) (194936 32661) (194937 32762) (194938 32773) (194939 156890) (194940 156963) (194941 32864) (194942 157096) (194943 32880) (194944 144223) (194945 17365) (194946 32946) (194947 33027) (194948 17419) (194949 33086) (194950 23221) (194951 157607) (194952 157621) (194953 144275) (194954 144284) (194955 33281) (194956 33284) (194957 36766) (194958 17515) (194959 33425) (194960 33419) (194961 33437) (194962 21171) (194963 33457) (194964 33459) (194965 33469) (194966 33510) (194967 158524) (194968 33509) (194969 33565) (194970 33635) (194971 33709) (194972 33571) (194973 33725) (194974 33767) (194975 33879) (194976 33619) (194977 33738) (194978 33740) (194979 33756) (194980 158774) (194981 159083) (194982 158933) (194983 17707) (194984 34033) (194985 34035) (194986 34070) (194987 160714) (194988 34148) (194989 159532) (194990 17757) (194991 17761) (194992 159665) (194993 159954) (194994 17771) (194995 34384) (194996 34396) (194997 34407) (194998 34409) (194999 34473) (195000 34440) (195001 34574) (195002 34530) (195003 34681) (195004 34600) (195005 34667) (195006 34694) (195007 17879) (195008 34785) (195009 34817) (195010 17913) (195011 34912) (195012 34915) (195013 161383) (195014 35031) (195015 35038) (195016 17973) (195017 35066) (195018 13499) (195019 161966) (195020 162150) (195021 18110) (195022 18119) (195023 35488) (195024 35565) (195025 35722) (195026 35925) (195027 162984) (195028 36011) (195029 36033) (195030 36123) (195031 36215) (195032 163631) (195033 133124) (195034 36299) (195035 36284) (195036 36336) (195037 133342) (195038 36564) (195039 36664) (195040 165330) (195041 165357) (195042 37012) (195043 37105) (195044 37137) (195045 165678) (195046 37147) (195047 37432) (195048 37591) (195049 37592) (195050 37500) (195051 37881) (195052 37909) (195053 166906) (195054 38283) (195055 18837) (195056 38327) (195057 167287) (195058 18918) (195059 38595) (195060 23986) (195061 38691) (195062 168261) (195063 168474) (195064 19054) (195065 19062) (195066 38880) (195067 168970) (195068 19122) (195069 169110) (195070 38923) (195071 38923) (195072 38953) (195073 169398) (195074 39138) (195075 19251) (195076 39209) (195077 39335) (195078 39362) (195079 39422) (195080 19406) (195081 170800) (195082 39698) (195083 40000) (195084 40189) (195085 19662) (195086 19693) (195087 40295) (195088 172238) (195089 19704) (195090 172293) (195091 172558) (195092 172689) (195093 40635) (195094 19798) (195095 40697) (195096 40702) (195097 40709) (195098 40719) (195099 40726) (195100 40763) (195101 173568))) (set! G19575foldcase-list '((65 97) (66 98) (67 99) (68 100) (69 101) (70 102) (71 103) (72 104) (73 105) (74 106) (75 107) (76 108) (77 109) (78 110) (79 111) (80 112) (81 113) (82 114) (83 115) (84 116) (85 117) (86 118) (87 119) (88 120) (89 121) (90 122) (181 956) (192 224) (193 225) (194 226) (195 227) (196 228) (197 229) (198 230) (199 231) (200 232) (201 233) (202 234) (203 235) (204 236) (205 237) (206 238) (207 239) (208 240) (209 241) (210 242) (211 243) (212 244) (213 245) (214 246) (216 248) (217 249) (218 250) (219 251) (220 252) (221 253) (222 254) (223 115 115) (256 257) (258 259) (260 261) (262 263) (264 265) (266 267) (268 269) (270 271) (272 273) (274 275) (276 277) (278 279) (280 281) (282 283) (284 285) (286 287) (288 289) (290 291) (292 293) (294 295) (296 297) (298 299) (300 301) (302 303) (304 105 775) (306 307) (308 309) (310 311) (313 314) (315 316) (317 318) (319 320) (321 322) (323 324) (325 326) (327 328) (329 700 110) (330 331) (332 333) (334 335) (336 337) (338 339) (340 341) (342 343) (344 345) (346 347) (348 349) (350 351) (352 353) (354 355) (356 357) (358 359) (360 361) (362 363) (364 365) (366 367) (368 369) (370 371) (372 373) (374 375) (376 255) (377 378) (379 380) (381 382) (383 115) (385 595) (386 387) (388 389) (390 596) (391 392) (393 598) (394 599) (395 396) (398 477) (399 601) (400 603) (401 402) (403 608) (404 611) (406 617) (407 616) (408 409) (412 623) (413 626) (415 629) (416 417) (418 419) (420 421) (422 640) (423 424) (425 643) (428 429) (430 648) (431 432) (433 650) (434 651) (435 436) (437 438) (439 658) (440 441) (444 445) (452 454) (453 454) (455 457) (456 457) (458 460) (459 460) (461 462) (463 464) (465 466) (467 468) (469 470) (471 472) (473 474) (475 476) (478 479) (480 481) (482 483) (484 485) (486 487) (488 489) (490 491) (492 493) (494 495) (496 106 780) (497 499) (498 499) (500 501) (502 405) (503 447) (504 505) (506 507) (508 509) (510 511) (512 513) (514 515) (516 517) (518 519) (520 521) (522 523) (524 525) (526 527) (528 529) (530 531) (532 533) (534 535) (536 537) (538 539) (540 541) (542 543) (544 414) (546 547) (548 549) (550 551) (552 553) (554 555) (556 557) (558 559) (560 561) (562 563) (570 11365) (571 572) (573 410) (574 11366) (577 578) (579 384) (580 649) (581 652) (582 583) (584 585) (586 587) (588 589) (590 591) (837 953) (880 881) (882 883) (886 887) (902 940) (904 941) (905 942) (906 943) (908 972) (910 973) (911 974) (912 953 776 769) (913 945) (914 946) (915 947) (916 948) (917 949) (918 950) (919 951) (920 952) (921 953) (922 954) (923 955) (924 956) (925 957) (926 958) (927 959) (928 960) (929 961) (931 963) (932 964) (933 965) (934 966) (935 967) (936 968) (937 969) (938 970) (939 971) (944 965 776 769) (962 963) (975 983) (976 946) (977 952) (981 966) (982 960) (984 985) (986 987) (988 989) (990 991) (992 993) (994 995) (996 997) (998 999) (1000 1001) (1002 1003) (1004 1005) (1006 1007) (1008 954) (1009 961) (1012 952) (1013 949) (1015 1016) (1017 1010) (1018 1019) (1021 891) (1022 892) (1023 893) (1024 1104) (1025 1105) (1026 1106) (1027 1107) (1028 1108) (1029 1109) (1030 1110) (1031 1111) (1032 1112) (1033 1113) (1034 1114) (1035 1115) (1036 1116) (1037 1117) (1038 1118) (1039 1119) (1040 1072) (1041 1073) (1042 1074) (1043 1075) (1044 1076) (1045 1077) (1046 1078) (1047 1079) (1048 1080) (1049 1081) (1050 1082) (1051 1083) (1052 1084) (1053 1085) (1054 1086) (1055 1087) (1056 1088) (1057 1089) (1058 1090) (1059 1091) (1060 1092) (1061 1093) (1062 1094) (1063 1095) (1064 1096) (1065 1097) (1066 1098) (1067 1099) (1068 1100) (1069 1101) (1070 1102) (1071 1103) (1120 1121) (1122 1123) (1124 1125) (1126 1127) (1128 1129) (1130 1131) (1132 1133) (1134 1135) (1136 1137) (1138 1139) (1140 1141) (1142 1143) (1144 1145) (1146 1147) (1148 1149) (1150 1151) (1152 1153) (1162 1163) (1164 1165) (1166 1167) (1168 1169) (1170 1171) (1172 1173) (1174 1175) (1176 1177) (1178 1179) (1180 1181) (1182 1183) (1184 1185) (1186 1187) (1188 1189) (1190 1191) (1192 1193) (1194 1195) (1196 1197) (1198 1199) (1200 1201) (1202 1203) (1204 1205) (1206 1207) (1208 1209) (1210 1211) (1212 1213) (1214 1215) (1216 1231) (1217 1218) (1219 1220) (1221 1222) (1223 1224) (1225 1226) (1227 1228) (1229 1230) (1232 1233) (1234 1235) (1236 1237) (1238 1239) (1240 1241) (1242 1243) (1244 1245) (1246 1247) (1248 1249) (1250 1251) (1252 1253) (1254 1255) (1256 1257) (1258 1259) (1260 1261) (1262 1263) (1264 1265) (1266 1267) (1268 1269) (1270 1271) (1272 1273) (1274 1275) (1276 1277) (1278 1279) (1280 1281) (1282 1283) (1284 1285) (1286 1287) (1288 1289) (1290 1291) (1292 1293) (1294 1295) (1296 1297) (1298 1299) (1300 1301) (1302 1303) (1304 1305) (1306 1307) (1308 1309) (1310 1311) (1312 1313) (1314 1315) (1329 1377) (1330 1378) (1331 1379) (1332 1380) (1333 1381) (1334 1382) (1335 1383) (1336 1384) (1337 1385) (1338 1386) (1339 1387) (1340 1388) (1341 1389) (1342 1390) (1343 1391) (1344 1392) (1345 1393) (1346 1394) (1347 1395) (1348 1396) (1349 1397) (1350 1398) (1351 1399) (1352 1400) (1353 1401) (1354 1402) (1355 1403) (1356 1404) (1357 1405) (1358 1406) (1359 1407) (1360 1408) (1361 1409) (1362 1410) (1363 1411) (1364 1412) (1365 1413) (1366 1414) (1415 1381 1410) (4256 11520) (4257 11521) (4258 11522) (4259 11523) (4260 11524) (4261 11525) (4262 11526) (4263 11527) (4264 11528) (4265 11529) (4266 11530) (4267 11531) (4268 11532) (4269 11533) (4270 11534) (4271 11535) (4272 11536) (4273 11537) (4274 11538) (4275 11539) (4276 11540) (4277 11541) (4278 11542) (4279 11543) (4280 11544) (4281 11545) (4282 11546) (4283 11547) (4284 11548) (4285 11549) (4286 11550) (4287 11551) (4288 11552) (4289 11553) (4290 11554) (4291 11555) (4292 11556) (4293 11557) (7680 7681) (7682 7683) (7684 7685) (7686 7687) (7688 7689) (7690 7691) (7692 7693) (7694 7695) (7696 7697) (7698 7699) (7700 7701) (7702 7703) (7704 7705) (7706 7707) (7708 7709) (7710 7711) (7712 7713) (7714 7715) (7716 7717) (7718 7719) (7720 7721) (7722 7723) (7724 7725) (7726 7727) (7728 7729) (7730 7731) (7732 7733) (7734 7735) (7736 7737) (7738 7739) (7740 7741) (7742 7743) (7744 7745) (7746 7747) (7748 7749) (7750 7751) (7752 7753) (7754 7755) (7756 7757) (7758 7759) (7760 7761) (7762 7763) (7764 7765) (7766 7767) (7768 7769) (7770 7771) (7772 7773) (7774 7775) (7776 7777) (7778 7779) (7780 7781) (7782 7783) (7784 7785) (7786 7787) (7788 7789) (7790 7791) (7792 7793) (7794 7795) (7796 7797) (7798 7799) (7800 7801) (7802 7803) (7804 7805) (7806 7807) (7808 7809) (7810 7811) (7812 7813) (7814 7815) (7816 7817) (7818 7819) (7820 7821) (7822 7823) (7824 7825) (7826 7827) (7828 7829) (7830 104 817) (7831 116 776) (7832 119 778) (7833 121 778) (7834 97 702) (7835 7777) (7838 115 115) (7840 7841) (7842 7843) (7844 7845) (7846 7847) (7848 7849) (7850 7851) (7852 7853) (7854 7855) (7856 7857) (7858 7859) (7860 7861) (7862 7863) (7864 7865) (7866 7867) (7868 7869) (7870 7871) (7872 7873) (7874 7875) (7876 7877) (7878 7879) (7880 7881) (7882 7883) (7884 7885) (7886 7887) (7888 7889) (7890 7891) (7892 7893) (7894 7895) (7896 7897) (7898 7899) (7900 7901) (7902 7903) (7904 7905) (7906 7907) (7908 7909) (7910 7911) (7912 7913) (7914 7915) (7916 7917) (7918 7919) (7920 7921) (7922 7923) (7924 7925) (7926 7927) (7928 7929) (7930 7931) (7932 7933) (7934 7935) (7944 7936) (7945 7937) (7946 7938) (7947 7939) (7948 7940) (7949 7941) (7950 7942) (7951 7943) (7960 7952) (7961 7953) (7962 7954) (7963 7955) (7964 7956) (7965 7957) (7976 7968) (7977 7969) (7978 7970) (7979 7971) (7980 7972) (7981 7973) (7982 7974) (7983 7975) (7992 7984) (7993 7985) (7994 7986) (7995 7987) (7996 7988) (7997 7989) (7998 7990) (7999 7991) (8008 8000) (8009 8001) (8010 8002) (8011 8003) (8012 8004) (8013 8005) (8016 965 787) (8018 965 787 768) (8020 965 787 769) (8022 965 787 834) (8025 8017) (8027 8019) (8029 8021) (8031 8023) (8040 8032) (8041 8033) (8042 8034) (8043 8035) (8044 8036) (8045 8037) (8046 8038) (8047 8039) (8064 7936 953) (8065 7937 953) (8066 7938 953) (8067 7939 953) (8068 7940 953) (8069 7941 953) (8070 7942 953) (8071 7943 953) (8072 7936 953) (8073 7937 953) (8074 7938 953) (8075 7939 953) (8076 7940 953) (8077 7941 953) (8078 7942 953) (8079 7943 953) (8080 7968 953) (8081 7969 953) (8082 7970 953) (8083 7971 953) (8084 7972 953) (8085 7973 953) (8086 7974 953) (8087 7975 953) (8088 7968 953) (8089 7969 953) (8090 7970 953) (8091 7971 953) (8092 7972 953) (8093 7973 953) (8094 7974 953) (8095 7975 953) (8096 8032 953) (8097 8033 953) (8098 8034 953) (8099 8035 953) (8100 8036 953) (8101 8037 953) (8102 8038 953) (8103 8039 953) (8104 8032 953) (8105 8033 953) (8106 8034 953) (8107 8035 953) (8108 8036 953) (8109 8037 953) (8110 8038 953) (8111 8039 953) (8114 8048 953) (8115 945 953) (8116 940 953) (8118 945 834) (8119 945 834 953) (8120 8112) (8121 8113) (8122 8048) (8123 8049) (8124 945 953) (8126 953) (8130 8052 953) (8131 951 953) (8132 942 953) (8134 951 834) (8135 951 834 953) (8136 8050) (8137 8051) (8138 8052) (8139 8053) (8140 951 953) (8146 953 776 768) (8147 953 776 769) (8150 953 834) (8151 953 776 834) (8152 8144) (8153 8145) (8154 8054) (8155 8055) (8162 965 776 768) (8163 965 776 769) (8164 961 787) (8166 965 834) (8167 965 776 834) (8168 8160) (8169 8161) (8170 8058) (8171 8059) (8172 8165) (8178 8060 953) (8179 969 953) (8180 974 953) (8182 969 834) (8183 969 834 953) (8184 8056) (8185 8057) (8186 8060) (8187 8061) (8188 969 953) (8486 969) (8490 107) (8491 229) (8498 8526) (8544 8560) (8545 8561) (8546 8562) (8547 8563) (8548 8564) (8549 8565) (8550 8566) (8551 8567) (8552 8568) (8553 8569) (8554 8570) (8555 8571) (8556 8572) (8557 8573) (8558 8574) (8559 8575) (8579 8580) (9398 9424) (9399 9425) (9400 9426) (9401 9427) (9402 9428) (9403 9429) (9404 9430) (9405 9431) (9406 9432) (9407 9433) (9408 9434) (9409 9435) (9410 9436) (9411 9437) (9412 9438) (9413 9439) (9414 9440) (9415 9441) (9416 9442) (9417 9443) (9418 9444) (9419 9445) (9420 9446) (9421 9447) (9422 9448) (9423 9449) (11264 11312) (11265 11313) (11266 11314) (11267 11315) (11268 11316) (11269 11317) (11270 11318) (11271 11319) (11272 11320) (11273 11321) (11274 11322) (11275 11323) (11276 11324) (11277 11325) (11278 11326) (11279 11327) (11280 11328) (11281 11329) (11282 11330) (11283 11331) (11284 11332) (11285 11333) (11286 11334) (11287 11335) (11288 11336) (11289 11337) (11290 11338) (11291 11339) (11292 11340) (11293 11341) (11294 11342) (11295 11343) (11296 11344) (11297 11345) (11298 11346) (11299 11347) (11300 11348) (11301 11349) (11302 11350) (11303 11351) (11304 11352) (11305 11353) (11306 11354) (11307 11355) (11308 11356) (11309 11357) (11310 11358) (11360 11361) (11362 619) (11363 7549) (11364 637) (11367 11368) (11369 11370) (11371 11372) (11373 593) (11374 625) (11375 592) (11378 11379) (11381 11382) (11392 11393) (11394 11395) (11396 11397) (11398 11399) (11400 11401) (11402 11403) (11404 11405) (11406 11407) (11408 11409) (11410 11411) (11412 11413) (11414 11415) (11416 11417) (11418 11419) (11420 11421) (11422 11423) (11424 11425) (11426 11427) (11428 11429) (11430 11431) (11432 11433) (11434 11435) (11436 11437) (11438 11439) (11440 11441) (11442 11443) (11444 11445) (11446 11447) (11448 11449) (11450 11451) (11452 11453) (11454 11455) (11456 11457) (11458 11459) (11460 11461) (11462 11463) (11464 11465) (11466 11467) (11468 11469) (11470 11471) (11472 11473) (11474 11475) (11476 11477) (11478 11479) (11480 11481) (11482 11483) (11484 11485) (11486 11487) (11488 11489) (11490 11491) (42560 42561) (42562 42563) (42564 42565) (42566 42567) (42568 42569) (42570 42571) (42572 42573) (42574 42575) (42576 42577) (42578 42579) (42580 42581) (42582 42583) (42584 42585) (42586 42587) (42588 42589) (42590 42591) (42594 42595) (42596 42597) (42598 42599) (42600 42601) (42602 42603) (42604 42605) (42624 42625) (42626 42627) (42628 42629) (42630 42631) (42632 42633) (42634 42635) (42636 42637) (42638 42639) (42640 42641) (42642 42643) (42644 42645) (42646 42647) (42786 42787) (42788 42789) (42790 42791) (42792 42793) (42794 42795) (42796 42797) (42798 42799) (42802 42803) (42804 42805) (42806 42807) (42808 42809) (42810 42811) (42812 42813) (42814 42815) (42816 42817) (42818 42819) (42820 42821) (42822 42823) (42824 42825) (42826 42827) (42828 42829) (42830 42831) (42832 42833) (42834 42835) (42836 42837) (42838 42839) (42840 42841) (42842 42843) (42844 42845) (42846 42847) (42848 42849) (42850 42851) (42852 42853) (42854 42855) (42856 42857) (42858 42859) (42860 42861) (42862 42863) (42873 42874) (42875 42876) (42877 7545) (42878 42879) (42880 42881) (42882 42883) (42884 42885) (42886 42887) (42891 42892) (64256 102 102) (64257 102 105) (64258 102 108) (64259 102 102 105) (64260 102 102 108) (64261 115 116) (64262 115 116) (64275 1396 1398) (64276 1396 1381) (64277 1396 1387) (64278 1406 1398) (64279 1396 1389) (65313 65345) (65314 65346) (65315 65347) (65316 65348) (65317 65349) (65318 65350) (65319 65351) (65320 65352) (65321 65353) (65322 65354) (65323 65355) (65324 65356) (65325 65357) (65326 65358) (65327 65359) (65328 65360) (65329 65361) (65330 65362) (65331 65363) (65332 65364) (65333 65365) (65334 65366) (65335 65367) (65336 65368) (65337 65369) (65338 65370) (66560 66600) (66561 66601) (66562 66602) (66563 66603) (66564 66604) (66565 66605) (66566 66606) (66567 66607) (66568 66608) (66569 66609) (66570 66610) (66571 66611) (66572 66612) (66573 66613) (66574 66614) (66575 66615) (66576 66616) (66577 66617) (66578 66618) (66579 66619) (66580 66620) (66581 66621) (66582 66622) (66583 66623) (66584 66624) (66585 66625) (66586 66626) (66587 66627) (66588 66628) (66589 66629) (66590 66630) (66591 66631) (66592 66632) (66593 66633) (66594 66634) (66595 66635) (66596 66636) (66597 66637) (66598 66638) (66599 66639))) (set! G19577special-lowercase-list '((223 223) (304 105 775) (64256 64256) (64257 64257) (64258 64258) (64259 64259) (64260 64260) (64261 64261) (64262 64262) (1415 1415) (64275 64275) (64276 64276) (64277 64277) (64278 64278) (64279 64279) (329 329) (912 912) (944 944) (496 496) (7830 7830) (7831 7831) (7832 7832) (7833 7833) (7834 7834) (8016 8016) (8018 8018) (8020 8020) (8022 8022) (8118 8118) (8134 8134) (8146 8146) (8147 8147) (8150 8150) (8151 8151) (8162 8162) (8163 8163) (8164 8164) (8166 8166) (8167 8167) (8182 8182) (837 837) (8064 8064) (8065 8065) (8066 8066) (8067 8067) (8068 8068) (8069 8069) (8070 8070) (8071 8071) (8072 8064) (8073 8065) (8074 8066) (8075 8067) (8076 8068) (8077 8069) (8078 8070) (8079 8071) (8080 8080) (8081 8081) (8082 8082) (8083 8083) (8084 8084) (8085 8085) (8086 8086) (8087 8087) (8088 8080) (8089 8081) (8090 8082) (8091 8083) (8092 8084) (8093 8085) (8094 8086) (8095 8087) (8096 8096) (8097 8097) (8098 8098) (8099 8099) (8100 8100) (8101 8101) (8102 8102) (8103 8103) (8104 8096) (8105 8097) (8106 8098) (8107 8099) (8108 8100) (8109 8101) (8110 8102) (8111 8103) (8115 8115) (8124 8115) (8131 8131) (8140 8131) (8179 8179) (8188 8179) (8114 8114) (8116 8116) (8130 8130) (8132 8132) (8178 8178) (8180 8180) (8119 8119) (8135 8135) (8183 8183) (931 963) (963 963) (962 962))) (set! G19579special-uppercase-list '((223 83 115) (304 304) (64256 70 102) (64257 70 105) (64258 70 108) (64259 70 102 105) (64260 70 102 108) (64261 83 116) (64262 83 116) (1415 1333 1410) (64275 1348 1398) (64276 1348 1381) (64277 1348 1387) (64278 1358 1398) (64279 1348 1389) (329 700 78) (912 921 776 769) (944 933 776 769) (496 74 780) (7830 72 817) (7831 84 776) (7832 87 778) (7833 89 778) (7834 65 702) (8016 933 787) (8018 933 787 768) (8020 933 787 769) (8022 933 787 834) (8118 913 834) (8134 919 834) (8146 921 776 768) (8147 921 776 769) (8150 921 834) (8151 921 776 834) (8162 933 776 768) (8163 933 776 769) (8164 929 787) (8166 933 834) (8167 933 776 834) (8182 937 834) (837 837) (8064 8072) (8065 8073) (8066 8074) (8067 8075) (8068 8076) (8069 8077) (8070 8078) (8071 8079) (8072 8072) (8073 8073) (8074 8074) (8075 8075) (8076 8076) (8077 8077) (8078 8078) (8079 8079) (8080 8088) (8081 8089) (8082 8090) (8083 8091) (8084 8092) (8085 8093) (8086 8094) (8087 8095) (8088 8088) (8089 8089) (8090 8090) (8091 8091) (8092 8092) (8093 8093) (8094 8094) (8095 8095) (8096 8104) (8097 8105) (8098 8106) (8099 8107) (8100 8108) (8101 8109) (8102 8110) (8103 8111) (8104 8104) (8105 8105) (8106 8106) (8107 8107) (8108 8108) (8109 8109) (8110 8110) (8111 8111) (8115 8124) (8124 8124) (8131 8140) (8140 8140) (8179 8188) (8188 8188) (8114 8122 837) (8116 902 837) (8130 8138 837) (8132 905 837) (8178 8186 837) (8180 911 837) (8119 913 834 837) (8135 919 834 837) (8183 937 834 837) (931 931) (963 931) (962 931))) (set! G19581whitespace-property-list '((9 . 13) 32 133 160 5760 6158 (8192 . 8202) 8232 8233 8239 8287 12288)) (set! G19583other-alphabetic-property-list '(837 (1456 . 1469) 1471 (1473 . 1474) (1476 . 1477) 1479 (1552 . 1562) (1611 . 1623) (1625 . 1630) 1648 (1750 . 1756) (1761 . 1764) (1767 . 1768) 1773 1809 (1840 . 1855) (1958 . 1968) (2305 . 2306) 2307 (2366 . 2368) (2369 . 2376) (2377 . 2380) (2402 . 2403) 2433 (2434 . 2435) (2494 . 2496) (2497 . 2500) (2503 . 2504) (2507 . 2508) 2519 (2530 . 2531) (2561 . 2562) 2563 (2622 . 2624) (2625 . 2626) (2631 . 2632) (2635 . 2636) 2641 (2672 . 2673) 2677 (2689 . 2690) 2691 (2750 . 2752) (2753 . 2757) (2759 . 2760) 2761 (2763 . 2764) (2786 . 2787) 2817 (2818 . 2819) 2878 2879 2880 (2881 . 2884) (2887 . 2888) (2891 . 2892) 2902 2903 (2914 . 2915) 2946 (3006 . 3007) 3008 (3009 . 3010) (3014 . 3016) (3018 . 3020) 3031 (3073 . 3075) (3134 . 3136) (3137 . 3140) (3142 . 3144) (3146 . 3148) (3157 . 3158) (3170 . 3171) (3202 . 3203) 3262 3263 (3264 . 3268) 3270 (3271 . 3272) (3274 . 3275) 3276 (3285 . 3286) (3298 . 3299) (3330 . 3331) (3390 . 3392) (3393 . 3396) (3398 . 3400) (3402 . 3404) 3415 (3426 . 3427) (3458 . 3459) (3535 . 3537) (3538 . 3540) 3542 (3544 . 3551) (3570 . 3571) 3633 (3636 . 3642) 3661 3761 (3764 . 3769) (3771 . 3772) 3789 (3953 . 3966) 3967 (3968 . 3969) (3984 . 3991) (3993 . 4028) (4139 . 4140) (4141 . 4144) 4145 (4146 . 4150) 4152 (4155 . 4156) (4157 . 4158) (4182 . 4183) (4184 . 4185) (4190 . 4192) 4194 (4199 . 4200) (4209 . 4212) 4226 (4227 . 4228) (4229 . 4230) 4959 (5906 . 5907) (5938 . 5939) (5970 . 5971) (6002 . 6003) 6070 (6071 . 6077) (6078 . 6085) 6086 (6087 . 6088) 6313 (6432 . 6434) (6435 . 6438) (6439 . 6440) (6441 . 6443) (6448 . 6449) 6450 (6451 . 6456) (6576 . 6592) (6600 . 6601) (6679 . 6680) (6681 . 6683) (6912 . 6915) 6916 6965 (6966 . 6970) 6971 6972 (6973 . 6977) 6978 6979 (7040 . 7041) 7042 7073 (7074 . 7077) (7078 . 7079) (7080 . 7081) (7204 . 7211) (7212 . 7219) (7220 . 7221) (9398 . 9449) (11744 . 11775) (43043 . 43044) (43045 . 43046) 43047 (43136 . 43137) (43188 . 43203) (43302 . 43306) (43335 . 43345) 43346 (43561 . 43566) (43567 . 43568) (43569 . 43570) (43571 . 43572) (43573 . 43574) 43587 43596 43597 64286 (68097 . 68099) (68101 . 68102) (68108 . 68111))) (set! G19585other-uppercase-property-list '((8544 . 8559) (9398 . 9423))) (set! G19587other-lowercase-property-list '((688 . 696) (704 . 705) (736 . 740) 837 890 (7468 . 7521) 7544 (7579 . 7615) (8336 . 8340) (8560 . 8575) (9424 . 9449) 11389 42864)) (set! G19589general-category-alist '((Zl 8232) (Po (33 . 35) (37 . 39) 42 44 (46 . 47) (58 . 59) (63 . 64) 92 161 183 191 894 903 (1370 . 1375) 1417 1472 1475 1478 (1523 . 1524) (1545 . 1546) (1548 . 1549) 1563 (1566 . 1567) (1642 . 1645) 1748 (1792 . 1805) (2039 . 2041) (2404 . 2405) 2416 3572 3663 (3674 . 3675) (3844 . 3858) 3973 (4048 . 4052) (4170 . 4175) 4347 (4961 . 4968) (5741 . 5742) (5867 . 5869) (5941 . 5942) (6100 . 6102) (6104 . 6106) (6144 . 6149) (6151 . 6154) (6468 . 6469) (6622 . 6623) (6686 . 6687) (7002 . 7008) (7227 . 7231) (7294 . 7295) (8214 . 8215) (8224 . 8231) (8240 . 8248) (8251 . 8254) (8257 . 8259) (8263 . 8273) 8275 (8277 . 8286) (11513 . 11516) (11518 . 11519) (11776 . 11777) (11782 . 11784) 11787 (11790 . 11798) (11800 . 11801) 11803 (11806 . 11807) (11818 . 11822) 11824 (12289 . 12291) 12349 12539 (42509 . 42511) 42611 42622 (43124 . 43127) (43214 . 43215) (43310 . 43311) 43359 (43612 . 43615) (65040 . 65046) 65049 65072 (65093 . 65094) (65097 . 65100) (65104 . 65106) (65108 . 65111) (65119 . 65121) 65128 (65130 . 65131) (65281 . 65283) (65285 . 65287) 65290 65292 (65294 . 65295) (65306 . 65307) (65311 . 65312) 65340 65377 (65380 . 65381) (65792 . 65793) 66463 66512 67871 67903 (68176 . 68184) (74864 . 74867)) (Pc 95 (8255 . 8256) 8276 (65075 . 65076) (65101 . 65103) 65343) (Lt 453 456 459 498 (8072 . 8079) (8088 . 8095) (8104 . 8111) 8124 8140 8188) (Pi 171 8216 (8219 . 8220) 8223 8249 11778 11780 11785 11788 11804 11808) (Cc (0 . 31) (127 . 159)) (Nd (48 . 57) (1632 . 1641) (1776 . 1785) (1984 . 1993) (2406 . 2415) (2534 . 2543) (2662 . 2671) (2790 . 2799) (2918 . 2927) (3046 . 3055) (3174 . 3183) (3302 . 3311) (3430 . 3439) (3664 . 3673) (3792 . 3801) (3872 . 3881) (4160 . 4169) (4240 . 4249) (6112 . 6121) (6160 . 6169) (6470 . 6479) (6608 . 6617) (6992 . 7001) (7088 . 7097) (7232 . 7241) (7248 . 7257) (42528 . 42537) (43216 . 43225) (43264 . 43273) (43600 . 43609) (65296 . 65305) (66720 . 66729) (120782 . 120831)) (Mn (768 . 879) (1155 . 1159) (1425 . 1469) 1471 (1473 . 1474) (1476 . 1477) 1479 (1552 . 1562) (1611 . 1630) 1648 (1750 . 1756) (1759 . 1764) (1767 . 1768) (1770 . 1773) 1809 (1840 . 1866) (1958 . 1968) (2027 . 2035) (2305 . 2306) 2364 (2369 . 2376) 2381 (2385 . 2388) (2402 . 2403) 2433 2492 (2497 . 2500) 2509 (2530 . 2531) (2561 . 2562) 2620 (2625 . 2626) (2631 . 2632) (2635 . 2637) 2641 (2672 . 2673) 2677 (2689 . 2690) 2748 (2753 . 2757) (2759 . 2760) 2765 (2786 . 2787) 2817 2876 2879 (2881 . 2884) 2893 2902 (2914 . 2915) 2946 3008 3021 (3134 . 3136) (3142 . 3144) (3146 . 3149) (3157 . 3158) (3170 . 3171) 3260 3263 3270 (3276 . 3277) (3298 . 3299) (3393 . 3396) 3405 (3426 . 3427) 3530 (3538 . 3540) 3542 3633 (3636 . 3642) (3655 . 3662) 3761 (3764 . 3769) (3771 . 3772) (3784 . 3789) (3864 . 3865) 3893 3895 3897 (3953 . 3966) (3968 . 3972) (3974 . 3975) (3984 . 3991) (3993 . 4028) 4038 (4141 . 4144) (4146 . 4151) (4153 . 4154) (4157 . 4158) (4184 . 4185) (4190 . 4192) (4209 . 4212) 4226 (4229 . 4230) 4237 4959 (5906 . 5908) (5938 . 5940) (5970 . 5971) (6002 . 6003) (6071 . 6077) 6086 (6089 . 6099) 6109 (6155 . 6157) 6313 (6432 . 6434) (6439 . 6440) 6450 (6457 . 6459) (6679 . 6680) (6912 . 6915) 6964 (6966 . 6970) 6972 6978 (7019 . 7027) (7040 . 7041) (7074 . 7077) (7080 . 7081) (7212 . 7219) (7222 . 7223) (7616 . 7654) (7678 . 7679) (8400 . 8412) 8417 (8421 . 8432) (11744 . 11775) (12330 . 12335) (12441 . 12442) 42607 (42620 . 42621) 43010 43014 43019 (43045 . 43046) 43204 (43302 . 43309) (43335 . 43345) (43561 . 43566) (43569 . 43570) (43573 . 43574) 43587 43596 64286 (65024 . 65039) (65056 . 65062) 66045 (68097 . 68099) (68101 . 68102) (68108 . 68111) (68152 . 68154) 68159 (119143 . 119145) (119163 . 119170) (119173 . 119179) (119210 . 119213) (119362 . 119364) (917760 . 917999)) (Me (1160 . 1161) 1758 (8413 . 8416) (8418 . 8420) (42608 . 42610)) (Sc 36 (162 . 165) 1547 (2546 . 2547) 2801 3065 3647 6107 (8352 . 8373) 65020 65129 65284 (65504 . 65505) (65509 . 65510)) (Cs 55296 (56191 . 56192) (56319 . 56320) 57343) (Cf 173 (1536 . 1539) 1757 1807 (6068 . 6069) (8203 . 8207) (8234 . 8238) (8288 . 8292) (8298 . 8303) 65279 (65529 . 65531) (119155 . 119162) 917505 (917536 . 917631)) (So (166 . 167) 169 174 176 182 1154 (1550 . 1551) 1769 (1789 . 1790) 2038 2554 2928 (3059 . 3064) 3066 3199 (3313 . 3314) 3449 (3841 . 3843) (3859 . 3863) (3866 . 3871) 3892 3894 3896 (4030 . 4037) (4039 . 4044) (4046 . 4047) (4254 . 4255) 4960 (5008 . 5017) 6464 (6624 . 6655) (7009 . 7018) (7028 . 7036) (8448 . 8449) (8451 . 8454) (8456 . 8457) 8468 (8470 . 8472) (8478 . 8483) 8485 8487 8489 8494 (8506 . 8507) 8522 (8524 . 8525) 8527 (8597 . 8601) (8604 . 8607) (8609 . 8610) (8612 . 8613) (8615 . 8621) (8623 . 8653) (8656 . 8657) 8659 (8661 . 8691) (8960 . 8967) (8972 . 8991) (8994 . 9000) (9003 . 9083) (9085 . 9114) (9140 . 9179) (9186 . 9191) (9216 . 9254) (9280 . 9290) (9372 . 9449) (9472 . 9654) (9656 . 9664) (9666 . 9719) (9728 . 9838) (9840 . 9885) (9888 . 9916) (9920 . 9923) (9985 . 9988) (9990 . 9993) (9996 . 10023) (10025 . 10059) 10061 (10063 . 10066) 10070 (10072 . 10078) (10081 . 10087) 10132 (10136 . 10159) (10161 . 10174) (10240 . 10495) (11008 . 11055) (11077 . 11078) (11088 . 11092) (11493 . 11498) (11904 . 11929) (11931 . 12019) (12032 . 12245) (12272 . 12283) 12292 (12306 . 12307) 12320 (12342 . 12343) (12350 . 12351) (12688 . 12689) (12694 . 12703) (12736 . 12771) (12800 . 12830) (12842 . 12867) 12880 (12896 . 12927) (12938 . 12976) (12992 . 13054) (13056 . 13311) (19904 . 19967) (42128 . 42182) (43048 . 43051) 65021 65508 65512 (65517 . 65518) (65532 . 65533) 65794 (65847 . 65855) (65913 . 65929) (65936 . 65947) (66000 . 66044) (118784 . 119029) (119040 . 119078) (119081 . 119140) (119146 . 119148) (119171 . 119172) (119180 . 119209) (119214 . 119261) (119296 . 119361) 119365 (119552 . 119638) (126976 . 127019) (127024 . 127123)) (Zs 32 160 5760 6158 (8192 . 8202) 8239 8287 12288) (Sm 43 (60 . 62) 124 126 172 177 215 247 1014 (1542 . 1544) 8260 8274 (8314 . 8316) (8330 . 8332) (8512 . 8516) 8523 (8592 . 8596) (8602 . 8603) 8608 8611 8614 8622 (8654 . 8655) 8658 8660 (8692 . 8959) (8968 . 8971) (8992 . 8993) 9084 (9115 . 9139) (9180 . 9185) 9655 9665 (9720 . 9727) 9839 (10176 . 10180) (10183 . 10186) 10188 (10192 . 10213) (10224 . 10239) (10496 . 10626) (10649 . 10711) (10716 . 10747) (10750 . 11007) (11056 . 11076) (11079 . 11084) 64297 65122 (65124 . 65126) 65291 (65308 . 65310) 65372 65374 65506 (65513 . 65516) 120513 120539 120571 120597 120629 120655 120687 120713 120745 120771) (Mc 2307 (2366 . 2368) (2377 . 2380) (2434 . 2435) (2494 . 2496) (2503 . 2504) (2507 . 2508) 2519 2563 (2622 . 2624) 2691 (2750 . 2752) 2761 (2763 . 2764) (2818 . 2819) 2878 2880 (2887 . 2888) (2891 . 2892) 2903 (3006 . 3007) (3009 . 3010) (3014 . 3016) (3018 . 3020) 3031 (3073 . 3075) (3137 . 3140) (3202 . 3203) 3262 (3264 . 3268) (3271 . 3272) (3274 . 3275) (3285 . 3286) (3330 . 3331) (3390 . 3392) (3398 . 3400) (3402 . 3404) 3415 (3458 . 3459) (3535 . 3537) (3544 . 3551) (3570 . 3571) (3902 . 3903) 3967 (4139 . 4140) 4145 4152 (4155 . 4156) (4182 . 4183) (4194 . 4196) (4199 . 4205) (4227 . 4228) (4231 . 4236) 4239 6070 (6078 . 6085) (6087 . 6088) (6435 . 6438) (6441 . 6443) (6448 . 6449) (6451 . 6456) (6576 . 6592) (6600 . 6601) (6681 . 6683) 6916 6965 6971 (6973 . 6977) (6979 . 6980) 7042 7073 (7078 . 7079) 7082 (7204 . 7211) (7220 . 7221) (43043 . 43044) 43047 (43136 . 43137) (43188 . 43203) (43346 . 43347) (43567 . 43568) (43571 . 43572) 43597 (119141 . 119142) (119149 . 119154)) (Sk 94 96 168 175 180 184 (706 . 709) (722 . 735) (741 . 747) 749 (751 . 767) 885 (900 . 901) 8125 (8127 . 8129) (8141 . 8143) (8157 . 8159) (8173 . 8175) (8189 . 8190) (12443 . 12444) (42752 . 42774) (42784 . 42785) (42889 . 42890) 65342 65344 65507) (Lm (688 . 705) (710 . 721) (736 . 740) 748 750 884 890 1369 1600 (1765 . 1766) (2036 . 2037) 2042 2417 3654 3782 4348 6103 6211 (7288 . 7293) (7468 . 7521) 7544 (7579 . 7615) (8336 . 8340) 11389 11631 11823 12293 (12337 . 12341) 12347 (12445 . 12446) (12540 . 12542) 40981 42508 42623 (42775 . 42783) 42864 42888 65392 (65438 . 65439)) (Pe 41 93 125 3899 3901 5788 8262 8318 8334 9002 10089 10091 10093 10095 10097 10099 10101 10182 10215 10217 10219 10221 10223 10628 10630 10632 10634 10636 10638 10640 10642 10644 10646 10648 10713 10715 10749 11811 11813 11815 11817 12297 12299 12301 12303 12305 12309 12311 12313 12315 (12318 . 12319) 64831 65048 65078 65080 65082 65084 65086 65088 65090 65092 65096 65114 65116 65118 65289 65341 65373 65376 65379) (Lo 443 (448 . 451) 660 (1488 . 1514) (1520 . 1522) (1569 . 1599) (1601 . 1610) (1646 . 1647) (1649 . 1747) 1749 (1774 . 1775) (1786 . 1788) 1791 1808 (1810 . 1839) (1869 . 1957) 1969 (1994 . 2026) (2308 . 2361) 2365 2384 (2392 . 2401) 2418 (2427 . 2431) (2437 . 2444) (2447 . 2448) (2451 . 2472) (2474 . 2480) 2482 (2486 . 2489) 2493 2510 (2524 . 2525) (2527 . 2529) (2544 . 2545) (2565 . 2570) (2575 . 2576) (2579 . 2600) (2602 . 2608) (2610 . 2611) (2613 . 2614) (2616 . 2617) (2649 . 2652) 2654 (2674 . 2676) (2693 . 2701) (2703 . 2705) (2707 . 2728) (2730 . 2736) (2738 . 2739) (2741 . 2745) 2749 2768 (2784 . 2785) (2821 . 2828) (2831 . 2832) (2835 . 2856) (2858 . 2864) (2866 . 2867) (2869 . 2873) 2877 (2908 . 2909) (2911 . 2913) 2929 2947 (2949 . 2954) (2958 . 2960) (2962 . 2965) (2969 . 2970) 2972 (2974 . 2975) (2979 . 2980) (2984 . 2986) (2990 . 3001) 3024 (3077 . 3084) (3086 . 3088) (3090 . 3112) (3114 . 3123) (3125 . 3129) 3133 (3160 . 3161) (3168 . 3169) (3205 . 3212) (3214 . 3216) (3218 . 3240) (3242 . 3251) (3253 . 3257) 3261 3294 (3296 . 3297) (3333 . 3340) (3342 . 3344) (3346 . 3368) (3370 . 3385) 3389 (3424 . 3425) (3450 . 3455) (3461 . 3478) (3482 . 3505) (3507 . 3515) 3517 (3520 . 3526) (3585 . 3632) (3634 . 3635) (3648 . 3653) (3713 . 3714) 3716 (3719 . 3720) 3722 3725 (3732 . 3735) (3737 . 3743) (3745 . 3747) 3749 3751 (3754 . 3755) (3757 . 3760) (3762 . 3763) 3773 (3776 . 3780) (3804 . 3805) 3840 (3904 . 3911) (3913 . 3948) (3976 . 3979) (4096 . 4138) 4159 (4176 . 4181) (4186 . 4189) 4193 (4197 . 4198) (4206 . 4208) (4213 . 4225) 4238 (4304 . 4346) (4352 . 4441) (4447 . 4514) (4520 . 4601) (4608 . 4680) (4682 . 4685) (4688 . 4694) 4696 (4698 . 4701) (4704 . 4744) (4746 . 4749) (4752 . 4784) (4786 . 4789) (4792 . 4798) 4800 (4802 . 4805) (4808 . 4822) (4824 . 4880) (4882 . 4885) (4888 . 4954) (4992 . 5007) (5024 . 5108) (5121 . 5740) (5743 . 5750) (5761 . 5786) (5792 . 5866) (5888 . 5900) (5902 . 5905) (5920 . 5937) (5952 . 5969) (5984 . 5996) (5998 . 6000) (6016 . 6067) 6108 (6176 . 6210) (6212 . 6263) (6272 . 6312) 6314 (6400 . 6428) (6480 . 6509) (6512 . 6516) (6528 . 6569) (6593 . 6599) (6656 . 6678) (6917 . 6963) (6981 . 6987) (7043 . 7072) (7086 . 7087) (7168 . 7203) (7245 . 7247) (7258 . 7287) (8501 . 8504) (11568 . 11621) (11648 . 11670) (11680 . 11686) (11688 . 11694) (11696 . 11702) (11704 . 11710) (11712 . 11718) (11720 . 11726) (11728 . 11734) (11736 . 11742) 12294 12348 (12353 . 12438) 12447 (12449 . 12538) 12543 (12549 . 12589) (12593 . 12686) (12704 . 12727) (12784 . 12799) 13312 19893 19968 40899 (40960 . 40980) (40982 . 42124) (42240 . 42507) (42512 . 42527) (42538 . 42539) 42606 (43003 . 43009) (43011 . 43013) (43015 . 43018) (43020 . 43042) (43072 . 43123) (43138 . 43187) (43274 . 43301) (43312 . 43334) (43520 . 43560) (43584 . 43586) (43588 . 43595) 44032 55203 (63744 . 64045) (64048 . 64106) (64112 . 64217) 64285 (64287 . 64296) (64298 . 64310) (64312 . 64316) 64318 (64320 . 64321) (64323 . 64324) (64326 . 64433) (64467 . 64829) (64848 . 64911) (64914 . 64967) (65008 . 65019) (65136 . 65140) (65142 . 65276) (65382 . 65391) (65393 . 65437) (65440 . 65470) (65474 . 65479) (65482 . 65487) (65490 . 65495) (65498 . 65500) (65536 . 65547) (65549 . 65574) (65576 . 65594) (65596 . 65597) (65599 . 65613) (65616 . 65629) (65664 . 65786) (66176 . 66204) (66208 . 66256) (66304 . 66334) (66352 . 66368) (66370 . 66377) (66432 . 66461) (66464 . 66499) (66504 . 66511) (66640 . 66717) (67584 . 67589) 67592 (67594 . 67637) (67639 . 67640) 67644 67647 (67840 . 67861) (67872 . 67897) 68096 (68112 . 68115) (68117 . 68119) (68121 . 68147) (73728 . 74606) 131072 173782 (194560 . 195101)) (Pd 45 1418 1470 6150 (8208 . 8213) 11799 11802 12316 12336 12448 (65073 . 65074) 65112 65123 65293) (Ll (97 . 122) 170 181 186 (223 . 246) (248 . 255) 257 259 261 263 265 267 269 271 273 275 277 279 281 283 285 287 289 291 293 295 297 299 301 303 305 307 309 (311 . 312) 314 316 318 320 322 324 326 (328 . 329) 331 333 335 337 339 341 343 345 347 349 351 353 355 357 359 361 363 365 367 369 371 373 375 378 380 (382 . 384) 387 389 392 (396 . 397) 402 405 (409 . 411) 414 417 419 421 424 (426 . 427) 429 432 436 438 (441 . 442) (445 . 447) 454 457 460 462 464 466 468 470 472 474 (476 . 477) 479 481 483 485 487 489 491 493 (495 . 496) 499 501 505 507 509 511 513 515 517 519 521 523 525 527 529 531 533 535 537 539 541 543 545 547 549 551 553 555 557 559 561 (563 . 569) 572 (575 . 576) 578 583 585 587 589 (591 . 659) (661 . 687) 881 883 887 (891 . 893) 912 (940 . 974) (976 . 977) (981 . 983) 985 987 989 991 993 995 997 999 1001 1003 1005 (1007 . 1011) 1013 1016 (1019 . 1020) (1072 . 1119) 1121 1123 1125 1127 1129 1131 1133 1135 1137 1139 1141 1143 1145 1147 1149 1151 1153 1163 1165 1167 1169 1171 1173 1175 1177 1179 1181 1183 1185 1187 1189 1191 1193 1195 1197 1199 1201 1203 1205 1207 1209 1211 1213 1215 1218 1220 1222 1224 1226 1228 (1230 . 1231) 1233 1235 1237 1239 1241 1243 1245 1247 1249 1251 1253 1255 1257 1259 1261 1263 1265 1267 1269 1271 1273 1275 1277 1279 1281 1283 1285 1287 1289 1291 1293 1295 1297 1299 1301 1303 1305 1307 1309 1311 1313 1315 (1377 . 1415) (7424 . 7467) (7522 . 7543) (7545 . 7578) 7681 7683 7685 7687 7689 7691 7693 7695 7697 7699 7701 7703 7705 7707 7709 7711 7713 7715 7717 7719 7721 7723 7725 7727 7729 7731 7733 7735 7737 7739 7741 7743 7745 7747 7749 7751 7753 7755 7757 7759 7761 7763 7765 7767 7769 7771 7773 7775 7777 7779 7781 7783 7785 7787 7789 7791 7793 7795 7797 7799 7801 7803 7805 7807 7809 7811 7813 7815 7817 7819 7821 7823 7825 7827 (7829 . 7837) 7839 7841 7843 7845 7847 7849 7851 7853 7855 7857 7859 7861 7863 7865 7867 7869 7871 7873 7875 7877 7879 7881 7883 7885 7887 7889 7891 7893 7895 7897 7899 7901 7903 7905 7907 7909 7911 7913 7915 7917 7919 7921 7923 7925 7927 7929 7931 7933 (7935 . 7943) (7952 . 7957) (7968 . 7975) (7984 . 7991) (8000 . 8005) (8016 . 8023) (8032 . 8039) (8048 . 8061) (8064 . 8071) (8080 . 8087) (8096 . 8103) (8112 . 8116) (8118 . 8119) 8126 (8130 . 8132) (8134 . 8135) (8144 . 8147) (8150 . 8151) (8160 . 8167) (8178 . 8180) (8182 . 8183) 8305 8319 8458 (8462 . 8463) 8467 8495 8500 8505 (8508 . 8509) (8518 . 8521) 8526 8580 (11312 . 11358) 11361 (11365 . 11366) 11368 11370 11372 11377 (11379 . 11380) (11382 . 11388) 11393 11395 11397 11399 11401 11403 11405 11407 11409 11411 11413 11415 11417 11419 11421 11423 11425 11427 11429 11431 11433 11435 11437 11439 11441 11443 11445 11447 11449 11451 11453 11455 11457 11459 11461 11463 11465 11467 11469 11471 11473 11475 11477 11479 11481 11483 11485 11487 11489 (11491 . 11492) (11520 . 11557) 42561 42563 42565 42567 42569 42571 42573 42575 42577 42579 42581 42583 42585 42587 42589 42591 42595 42597 42599 42601 42603 42605 42625 42627 42629 42631 42633 42635 42637 42639 42641 42643 42645 42647 42787 42789 42791 42793 42795 42797 (42799 . 42801) 42803 42805 42807 42809 42811 42813 42815 42817 42819 42821 42823 42825 42827 42829 42831 42833 42835 42837 42839 42841 42843 42845 42847 42849 42851 42853 42855 42857 42859 42861 42863 (42865 . 42872) 42874 42876 42879 42881 42883 42885 42887 42892 (64256 . 64262) (64275 . 64279) (65345 . 65370) (66600 . 66639) (119834 . 119859) (119886 . 119892) (119894 . 119911) (119938 . 119963) (119990 . 119993) 119995 (119997 . 120003) (120005 . 120015) (120042 . 120067) (120094 . 120119) (120146 . 120171) (120198 . 120223) (120250 . 120275) (120302 . 120327) (120354 . 120379) (120406 . 120431) (120458 . 120485) (120514 . 120538) (120540 . 120545) (120572 . 120596) (120598 . 120603) (120630 . 120654) (120656 . 120661) (120688 . 120712) (120714 . 120719) (120746 . 120770) (120772 . 120777) 120779) (No (178 . 179) 185 (188 . 190) (2548 . 2553) (3056 . 3058) (3192 . 3198) (3440 . 3445) (3882 . 3891) (4969 . 4988) (6128 . 6137) 8304 (8308 . 8313) (8320 . 8329) (8531 . 8543) (9312 . 9371) (9450 . 9471) (10102 . 10131) 11517 (12690 . 12693) (12832 . 12841) (12881 . 12895) (12928 . 12937) (12977 . 12991) (65799 . 65843) (65909 . 65912) 65930 (66336 . 66339) (67862 . 67865) (68160 . 68167) (119648 . 119665)) (Co 57344 63743 983040 1048573 1048576 1114109) (Pf 187 8217 8221 8250 11779 11781 11786 11789 11805 11809) (Lu (65 . 90) (192 . 214) (216 . 222) 256 258 260 262 264 266 268 270 272 274 276 278 280 282 284 286 288 290 292 294 296 298 300 302 304 306 308 310 313 315 317 319 321 323 325 327 330 332 334 336 338 340 342 344 346 348 350 352 354 356 358 360 362 364 366 368 370 372 374 (376 . 377) 379 381 (385 . 386) 388 (390 . 391) (393 . 395) (398 . 401) (403 . 404) (406 . 408) (412 . 413) (415 . 416) 418 420 (422 . 423) 425 428 (430 . 431) (433 . 435) 437 (439 . 440) 444 452 455 458 461 463 465 467 469 471 473 475 478 480 482 484 486 488 490 492 494 497 500 (502 . 504) 506 508 510 512 514 516 518 520 522 524 526 528 530 532 534 536 538 540 542 544 546 548 550 552 554 556 558 560 562 (570 . 571) (573 . 574) 577 (579 . 582) 584 586 588 590 880 882 886 902 (904 . 906) 908 (910 . 911) (913 . 929) (931 . 939) 975 (978 . 980) 984 986 988 990 992 994 996 998 1000 1002 1004 1006 1012 1015 (1017 . 1018) (1021 . 1071) 1120 1122 1124 1126 1128 1130 1132 1134 1136 1138 1140 1142 1144 1146 1148 1150 1152 1162 1164 1166 1168 1170 1172 1174 1176 1178 1180 1182 1184 1186 1188 1190 1192 1194 1196 1198 1200 1202 1204 1206 1208 1210 1212 1214 (1216 . 1217) 1219 1221 1223 1225 1227 1229 1232 1234 1236 1238 1240 1242 1244 1246 1248 1250 1252 1254 1256 1258 1260 1262 1264 1266 1268 1270 1272 1274 1276 1278 1280 1282 1284 1286 1288 1290 1292 1294 1296 1298 1300 1302 1304 1306 1308 1310 1312 1314 (1329 . 1366) (4256 . 4293) 7680 7682 7684 7686 7688 7690 7692 7694 7696 7698 7700 7702 7704 7706 7708 7710 7712 7714 7716 7718 7720 7722 7724 7726 7728 7730 7732 7734 7736 7738 7740 7742 7744 7746 7748 7750 7752 7754 7756 7758 7760 7762 7764 7766 7768 7770 7772 7774 7776 7778 7780 7782 7784 7786 7788 7790 7792 7794 7796 7798 7800 7802 7804 7806 7808 7810 7812 7814 7816 7818 7820 7822 7824 7826 7828 7838 7840 7842 7844 7846 7848 7850 7852 7854 7856 7858 7860 7862 7864 7866 7868 7870 7872 7874 7876 7878 7880 7882 7884 7886 7888 7890 7892 7894 7896 7898 7900 7902 7904 7906 7908 7910 7912 7914 7916 7918 7920 7922 7924 7926 7928 7930 7932 7934 (7944 . 7951) (7960 . 7965) (7976 . 7983) (7992 . 7999) (8008 . 8013) 8025 8027 8029 8031 (8040 . 8047) (8120 . 8123) (8136 . 8139) (8152 . 8155) (8168 . 8172) (8184 . 8187) 8450 8455 (8459 . 8461) (8464 . 8466) 8469 (8473 . 8477) 8484 8486 8488 (8490 . 8493) (8496 . 8499) (8510 . 8511) 8517 8579 (11264 . 11310) 11360 (11362 . 11364) 11367 11369 11371 (11373 . 11375) 11378 11381 11392 11394 11396 11398 11400 11402 11404 11406 11408 11410 11412 11414 11416 11418 11420 11422 11424 11426 11428 11430 11432 11434 11436 11438 11440 11442 11444 11446 11448 11450 11452 11454 11456 11458 11460 11462 11464 11466 11468 11470 11472 11474 11476 11478 11480 11482 11484 11486 11488 11490 42560 42562 42564 42566 42568 42570 42572 42574 42576 42578 42580 42582 42584 42586 42588 42590 42594 42596 42598 42600 42602 42604 42624 42626 42628 42630 42632 42634 42636 42638 42640 42642 42644 42646 42786 42788 42790 42792 42794 42796 42798 42802 42804 42806 42808 42810 42812 42814 42816 42818 42820 42822 42824 42826 42828 42830 42832 42834 42836 42838 42840 42842 42844 42846 42848 42850 42852 42854 42856 42858 42860 42862 42873 42875 (42877 . 42878) 42880 42882 42884 42886 42891 (65313 . 65338) (66560 . 66599) (119808 . 119833) (119860 . 119885) (119912 . 119937) 119964 (119966 . 119967) 119970 (119973 . 119974) (119977 . 119980) (119982 . 119989) (120016 . 120041) (120068 . 120069) (120071 . 120074) (120077 . 120084) (120086 . 120092) (120120 . 120121) (120123 . 120126) (120128 . 120132) 120134 (120138 . 120144) (120172 . 120197) (120224 . 120249) (120276 . 120301) (120328 . 120353) (120380 . 120405) (120432 . 120457) (120488 . 120512) (120546 . 120570) (120604 . 120628) (120662 . 120686) (120720 . 120744) 120778) (Zp 8233) (Nl (5870 . 5872) (8544 . 8578) (8581 . 8584) 12295 (12321 . 12329) (12344 . 12346) (65856 . 65908) 66369 66378 (66513 . 66517) (74752 . 74850)) (Ps 40 91 123 3898 3900 5787 8218 8222 8261 8317 8333 9001 10088 10090 10092 10094 10096 10098 10100 10181 10214 10216 10218 10220 10222 10627 10629 10631 10633 10635 10637 10639 10641 10643 10645 10647 10712 10714 10748 11810 11812 11814 11816 12296 12298 12300 12302 12304 12308 12310 12312 12314 12317 64830 65047 65077 65079 65081 65083 65085 65087 65089 65091 65095 65113 65115 65117 65288 65339 65371 65375 65378))) (set! G19591titlecase-alist '((97 . 65) (98 . 66) (99 . 67) (100 . 68) (101 . 69) (102 . 70) (103 . 71) (104 . 72) (105 . 73) (106 . 74) (107 . 75) (108 . 76) (109 . 77) (110 . 78) (111 . 79) (112 . 80) (113 . 81) (114 . 82) (115 . 83) (116 . 84) (117 . 85) (118 . 86) (119 . 87) (120 . 88) (121 . 89) (122 . 90) (181 . 924) (224 . 192) (225 . 193) (226 . 194) (227 . 195) (228 . 196) (229 . 197) (230 . 198) (231 . 199) (232 . 200) (233 . 201) (234 . 202) (235 . 203) (236 . 204) (237 . 205) (238 . 206) (239 . 207) (240 . 208) (241 . 209) (242 . 210) (243 . 211) (244 . 212) (245 . 213) (246 . 214) (248 . 216) (249 . 217) (250 . 218) (251 . 219) (252 . 220) (253 . 221) (254 . 222) (255 . 376) (257 . 256) (259 . 258) (261 . 260) (263 . 262) (265 . 264) (267 . 266) (269 . 268) (271 . 270) (273 . 272) (275 . 274) (277 . 276) (279 . 278) (281 . 280) (283 . 282) (285 . 284) (287 . 286) (289 . 288) (291 . 290) (293 . 292) (295 . 294) (297 . 296) (299 . 298) (301 . 300) (303 . 302) (305 . 73) (307 . 306) (309 . 308) (311 . 310) (314 . 313) (316 . 315) (318 . 317) (320 . 319) (322 . 321) (324 . 323) (326 . 325) (328 . 327) (331 . 330) (333 . 332) (335 . 334) (337 . 336) (339 . 338) (341 . 340) (343 . 342) (345 . 344) (347 . 346) (349 . 348) (351 . 350) (353 . 352) (355 . 354) (357 . 356) (359 . 358) (361 . 360) (363 . 362) (365 . 364) (367 . 366) (369 . 368) (371 . 370) (373 . 372) (375 . 374) (378 . 377) (380 . 379) (382 . 381) (383 . 83) (384 . 579) (387 . 386) (389 . 388) (392 . 391) (396 . 395) (402 . 401) (405 . 502) (409 . 408) (410 . 573) (414 . 544) (417 . 416) (419 . 418) (421 . 420) (424 . 423) (429 . 428) (432 . 431) (436 . 435) (438 . 437) (441 . 440) (445 . 444) (447 . 503) (452 . 453) (453 . 453) (454 . 453) (455 . 456) (456 . 456) (457 . 456) (458 . 459) (459 . 459) (460 . 459) (462 . 461) (464 . 463) (466 . 465) (468 . 467) (470 . 469) (472 . 471) (474 . 473) (476 . 475) (477 . 398) (479 . 478) (481 . 480) (483 . 482) (485 . 484) (487 . 486) (489 . 488) (491 . 490) (493 . 492) (495 . 494) (497 . 498) (498 . 498) (499 . 498) (501 . 500) (505 . 504) (507 . 506) (509 . 508) (511 . 510) (513 . 512) (515 . 514) (517 . 516) (519 . 518) (521 . 520) (523 . 522) (525 . 524) (527 . 526) (529 . 528) (531 . 530) (533 . 532) (535 . 534) (537 . 536) (539 . 538) (541 . 540) (543 . 542) (547 . 546) (549 . 548) (551 . 550) (553 . 552) (555 . 554) (557 . 556) (559 . 558) (561 . 560) (563 . 562) (572 . 571) (578 . 577) (583 . 582) (585 . 584) (587 . 586) (589 . 588) (591 . 590) (592 . 11375) (593 . 11373) (595 . 385) (596 . 390) (598 . 393) (599 . 394) (601 . 399) (603 . 400) (608 . 403) (611 . 404) (616 . 407) (617 . 406) (619 . 11362) (623 . 412) (625 . 11374) (626 . 413) (629 . 415) (637 . 11364) (640 . 422) (643 . 425) (648 . 430) (649 . 580) (650 . 433) (651 . 434) (652 . 581) (658 . 439) (837 . 921) (881 . 880) (883 . 882) (887 . 886) (891 . 1021) (892 . 1022) (893 . 1023) (940 . 902) (941 . 904) (942 . 905) (943 . 906) (945 . 913) (946 . 914) (947 . 915) (948 . 916) (949 . 917) (950 . 918) (951 . 919) (952 . 920) (953 . 921) (954 . 922) (955 . 923) (956 . 924) (957 . 925) (958 . 926) (959 . 927) (960 . 928) (961 . 929) (962 . 931) (963 . 931) (964 . 932) (965 . 933) (966 . 934) (967 . 935) (968 . 936) (969 . 937) (970 . 938) (971 . 939) (972 . 908) (973 . 910) (974 . 911) (976 . 914) (977 . 920) (981 . 934) (982 . 928) (983 . 975) (985 . 984) (987 . 986) (989 . 988) (991 . 990) (993 . 992) (995 . 994) (997 . 996) (999 . 998) (1001 . 1000) (1003 . 1002) (1005 . 1004) (1007 . 1006) (1008 . 922) (1009 . 929) (1010 . 1017) (1013 . 917) (1016 . 1015) (1019 . 1018) (1072 . 1040) (1073 . 1041) (1074 . 1042) (1075 . 1043) (1076 . 1044) (1077 . 1045) (1078 . 1046) (1079 . 1047) (1080 . 1048) (1081 . 1049) (1082 . 1050) (1083 . 1051) (1084 . 1052) (1085 . 1053) (1086 . 1054) (1087 . 1055) (1088 . 1056) (1089 . 1057) (1090 . 1058) (1091 . 1059) (1092 . 1060) (1093 . 1061) (1094 . 1062) (1095 . 1063) (1096 . 1064) (1097 . 1065) (1098 . 1066) (1099 . 1067) (1100 . 1068) (1101 . 1069) (1102 . 1070) (1103 . 1071) (1104 . 1024) (1105 . 1025) (1106 . 1026) (1107 . 1027) (1108 . 1028) (1109 . 1029) (1110 . 1030) (1111 . 1031) (1112 . 1032) (1113 . 1033) (1114 . 1034) (1115 . 1035) (1116 . 1036) (1117 . 1037) (1118 . 1038) (1119 . 1039) (1121 . 1120) (1123 . 1122) (1125 . 1124) (1127 . 1126) (1129 . 1128) (1131 . 1130) (1133 . 1132) (1135 . 1134) (1137 . 1136) (1139 . 1138) (1141 . 1140) (1143 . 1142) (1145 . 1144) (1147 . 1146) (1149 . 1148) (1151 . 1150) (1153 . 1152) (1163 . 1162) (1165 . 1164) (1167 . 1166) (1169 . 1168) (1171 . 1170) (1173 . 1172) (1175 . 1174) (1177 . 1176) (1179 . 1178) (1181 . 1180) (1183 . 1182) (1185 . 1184) (1187 . 1186) (1189 . 1188) (1191 . 1190) (1193 . 1192) (1195 . 1194) (1197 . 1196) (1199 . 1198) (1201 . 1200) (1203 . 1202) (1205 . 1204) (1207 . 1206) (1209 . 1208) (1211 . 1210) (1213 . 1212) (1215 . 1214) (1218 . 1217) (1220 . 1219) (1222 . 1221) (1224 . 1223) (1226 . 1225) (1228 . 1227) (1230 . 1229) (1231 . 1216) (1233 . 1232) (1235 . 1234) (1237 . 1236) (1239 . 1238) (1241 . 1240) (1243 . 1242) (1245 . 1244) (1247 . 1246) (1249 . 1248) (1251 . 1250) (1253 . 1252) (1255 . 1254) (1257 . 1256) (1259 . 1258) (1261 . 1260) (1263 . 1262) (1265 . 1264) (1267 . 1266) (1269 . 1268) (1271 . 1270) (1273 . 1272) (1275 . 1274) (1277 . 1276) (1279 . 1278) (1281 . 1280) (1283 . 1282) (1285 . 1284) (1287 . 1286) (1289 . 1288) (1291 . 1290) (1293 . 1292) (1295 . 1294) (1297 . 1296) (1299 . 1298) (1301 . 1300) (1303 . 1302) (1305 . 1304) (1307 . 1306) (1309 . 1308) (1311 . 1310) (1313 . 1312) (1315 . 1314) (1377 . 1329) (1378 . 1330) (1379 . 1331) (1380 . 1332) (1381 . 1333) (1382 . 1334) (1383 . 1335) (1384 . 1336) (1385 . 1337) (1386 . 1338) (1387 . 1339) (1388 . 1340) (1389 . 1341) (1390 . 1342) (1391 . 1343) (1392 . 1344) (1393 . 1345) (1394 . 1346) (1395 . 1347) (1396 . 1348) (1397 . 1349) (1398 . 1350) (1399 . 1351) (1400 . 1352) (1401 . 1353) (1402 . 1354) (1403 . 1355) (1404 . 1356) (1405 . 1357) (1406 . 1358) (1407 . 1359) (1408 . 1360) (1409 . 1361) (1410 . 1362) (1411 . 1363) (1412 . 1364) (1413 . 1365) (1414 . 1366) (7545 . 42877) (7549 . 11363) (7681 . 7680) (7683 . 7682) (7685 . 7684) (7687 . 7686) (7689 . 7688) (7691 . 7690) (7693 . 7692) (7695 . 7694) (7697 . 7696) (7699 . 7698) (7701 . 7700) (7703 . 7702) (7705 . 7704) (7707 . 7706) (7709 . 7708) (7711 . 7710) (7713 . 7712) (7715 . 7714) (7717 . 7716) (7719 . 7718) (7721 . 7720) (7723 . 7722) (7725 . 7724) (7727 . 7726) (7729 . 7728) (7731 . 7730) (7733 . 7732) (7735 . 7734) (7737 . 7736) (7739 . 7738) (7741 . 7740) (7743 . 7742) (7745 . 7744) (7747 . 7746) (7749 . 7748) (7751 . 7750) (7753 . 7752) (7755 . 7754) (7757 . 7756) (7759 . 7758) (7761 . 7760) (7763 . 7762) (7765 . 7764) (7767 . 7766) (7769 . 7768) (7771 . 7770) (7773 . 7772) (7775 . 7774) (7777 . 7776) (7779 . 7778) (7781 . 7780) (7783 . 7782) (7785 . 7784) (7787 . 7786) (7789 . 7788) (7791 . 7790) (7793 . 7792) (7795 . 7794) (7797 . 7796) (7799 . 7798) (7801 . 7800) (7803 . 7802) (7805 . 7804) (7807 . 7806) (7809 . 7808) (7811 . 7810) (7813 . 7812) (7815 . 7814) (7817 . 7816) (7819 . 7818) (7821 . 7820) (7823 . 7822) (7825 . 7824) (7827 . 7826) (7829 . 7828) (7835 . 7776) (7841 . 7840) (7843 . 7842) (7845 . 7844) (7847 . 7846) (7849 . 7848) (7851 . 7850) (7853 . 7852) (7855 . 7854) (7857 . 7856) (7859 . 7858) (7861 . 7860) (7863 . 7862) (7865 . 7864) (7867 . 7866) (7869 . 7868) (7871 . 7870) (7873 . 7872) (7875 . 7874) (7877 . 7876) (7879 . 7878) (7881 . 7880) (7883 . 7882) (7885 . 7884) (7887 . 7886) (7889 . 7888) (7891 . 7890) (7893 . 7892) (7895 . 7894) (7897 . 7896) (7899 . 7898) (7901 . 7900) (7903 . 7902) (7905 . 7904) (7907 . 7906) (7909 . 7908) (7911 . 7910) (7913 . 7912) (7915 . 7914) (7917 . 7916) (7919 . 7918) (7921 . 7920) (7923 . 7922) (7925 . 7924) (7927 . 7926) (7929 . 7928) (7931 . 7930) (7933 . 7932) (7935 . 7934) (7936 . 7944) (7937 . 7945) (7938 . 7946) (7939 . 7947) (7940 . 7948) (7941 . 7949) (7942 . 7950) (7943 . 7951) (7952 . 7960) (7953 . 7961) (7954 . 7962) (7955 . 7963) (7956 . 7964) (7957 . 7965) (7968 . 7976) (7969 . 7977) (7970 . 7978) (7971 . 7979) (7972 . 7980) (7973 . 7981) (7974 . 7982) (7975 . 7983) (7984 . 7992) (7985 . 7993) (7986 . 7994) (7987 . 7995) (7988 . 7996) (7989 . 7997) (7990 . 7998) (7991 . 7999) (8000 . 8008) (8001 . 8009) (8002 . 8010) (8003 . 8011) (8004 . 8012) (8005 . 8013) (8017 . 8025) (8019 . 8027) (8021 . 8029) (8023 . 8031) (8032 . 8040) (8033 . 8041) (8034 . 8042) (8035 . 8043) (8036 . 8044) (8037 . 8045) (8038 . 8046) (8039 . 8047) (8048 . 8122) (8049 . 8123) (8050 . 8136) (8051 . 8137) (8052 . 8138) (8053 . 8139) (8054 . 8154) (8055 . 8155) (8056 . 8184) (8057 . 8185) (8058 . 8170) (8059 . 8171) (8060 . 8186) (8061 . 8187) (8064 . 8072) (8065 . 8073) (8066 . 8074) (8067 . 8075) (8068 . 8076) (8069 . 8077) (8070 . 8078) (8071 . 8079) (8080 . 8088) (8081 . 8089) (8082 . 8090) (8083 . 8091) (8084 . 8092) (8085 . 8093) (8086 . 8094) (8087 . 8095) (8096 . 8104) (8097 . 8105) (8098 . 8106) (8099 . 8107) (8100 . 8108) (8101 . 8109) (8102 . 8110) (8103 . 8111) (8112 . 8120) (8113 . 8121) (8115 . 8124) (8126 . 921) (8131 . 8140) (8144 . 8152) (8145 . 8153) (8160 . 8168) (8161 . 8169) (8165 . 8172) (8179 . 8188) (8526 . 8498) (8560 . 8544) (8561 . 8545) (8562 . 8546) (8563 . 8547) (8564 . 8548) (8565 . 8549) (8566 . 8550) (8567 . 8551) (8568 . 8552) (8569 . 8553) (8570 . 8554) (8571 . 8555) (8572 . 8556) (8573 . 8557) (8574 . 8558) (8575 . 8559) (8580 . 8579) (9424 . 9398) (9425 . 9399) (9426 . 9400) (9427 . 9401) (9428 . 9402) (9429 . 9403) (9430 . 9404) (9431 . 9405) (9432 . 9406) (9433 . 9407) (9434 . 9408) (9435 . 9409) (9436 . 9410) (9437 . 9411) (9438 . 9412) (9439 . 9413) (9440 . 9414) (9441 . 9415) (9442 . 9416) (9443 . 9417) (9444 . 9418) (9445 . 9419) (9446 . 9420) (9447 . 9421) (9448 . 9422) (9449 . 9423) (11312 . 11264) (11313 . 11265) (11314 . 11266) (11315 . 11267) (11316 . 11268) (11317 . 11269) (11318 . 11270) (11319 . 11271) (11320 . 11272) (11321 . 11273) (11322 . 11274) (11323 . 11275) (11324 . 11276) (11325 . 11277) (11326 . 11278) (11327 . 11279) (11328 . 11280) (11329 . 11281) (11330 . 11282) (11331 . 11283) (11332 . 11284) (11333 . 11285) (11334 . 11286) (11335 . 11287) (11336 . 11288) (11337 . 11289) (11338 . 11290) (11339 . 11291) (11340 . 11292) (11341 . 11293) (11342 . 11294) (11343 . 11295) (11344 . 11296) (11345 . 11297) (11346 . 11298) (11347 . 11299) (11348 . 11300) (11349 . 11301) (11350 . 11302) (11351 . 11303) (11352 . 11304) (11353 . 11305) (11354 . 11306) (11355 . 11307) (11356 . 11308) (11357 . 11309) (11358 . 11310) (11361 . 11360) (11365 . 570) (11366 . 574) (11368 . 11367) (11370 . 11369) (11372 . 11371) (11379 . 11378) (11382 . 11381) (11393 . 11392) (11395 . 11394) (11397 . 11396) (11399 . 11398) (11401 . 11400) (11403 . 11402) (11405 . 11404) (11407 . 11406) (11409 . 11408) (11411 . 11410) (11413 . 11412) (11415 . 11414) (11417 . 11416) (11419 . 11418) (11421 . 11420) (11423 . 11422) (11425 . 11424) (11427 . 11426) (11429 . 11428) (11431 . 11430) (11433 . 11432) (11435 . 11434) (11437 . 11436) (11439 . 11438) (11441 . 11440) (11443 . 11442) (11445 . 11444) (11447 . 11446) (11449 . 11448) (11451 . 11450) (11453 . 11452) (11455 . 11454) (11457 . 11456) (11459 . 11458) (11461 . 11460) (11463 . 11462) (11465 . 11464) (11467 . 11466) (11469 . 11468) (11471 . 11470) (11473 . 11472) (11475 . 11474) (11477 . 11476) (11479 . 11478) (11481 . 11480) (11483 . 11482) (11485 . 11484) (11487 . 11486) (11489 . 11488) (11491 . 11490) (11520 . 4256) (11521 . 4257) (11522 . 4258) (11523 . 4259) (11524 . 4260) (11525 . 4261) (11526 . 4262) (11527 . 4263) (11528 . 4264) (11529 . 4265) (11530 . 4266) (11531 . 4267) (11532 . 4268) (11533 . 4269) (11534 . 4270) (11535 . 4271) (11536 . 4272) (11537 . 4273) (11538 . 4274) (11539 . 4275) (11540 . 4276) (11541 . 4277) (11542 . 4278) (11543 . 4279) (11544 . 4280) (11545 . 4281) (11546 . 4282) (11547 . 4283) (11548 . 4284) (11549 . 4285) (11550 . 4286) (11551 . 4287) (11552 . 4288) (11553 . 4289) (11554 . 4290) (11555 . 4291) (11556 . 4292) (11557 . 4293) (42561 . 42560) (42563 . 42562) (42565 . 42564) (42567 . 42566) (42569 . 42568) (42571 . 42570) (42573 . 42572) (42575 . 42574) (42577 . 42576) (42579 . 42578) (42581 . 42580) (42583 . 42582) (42585 . 42584) (42587 . 42586) (42589 . 42588) (42591 . 42590) (42595 . 42594) (42597 . 42596) (42599 . 42598) (42601 . 42600) (42603 . 42602) (42605 . 42604) (42625 . 42624) (42627 . 42626) (42629 . 42628) (42631 . 42630) (42633 . 42632) (42635 . 42634) (42637 . 42636) (42639 . 42638) (42641 . 42640) (42643 . 42642) (42645 . 42644) (42647 . 42646) (42787 . 42786) (42789 . 42788) (42791 . 42790) (42793 . 42792) (42795 . 42794) (42797 . 42796) (42799 . 42798) (42803 . 42802) (42805 . 42804) (42807 . 42806) (42809 . 42808) (42811 . 42810) (42813 . 42812) (42815 . 42814) (42817 . 42816) (42819 . 42818) (42821 . 42820) (42823 . 42822) (42825 . 42824) (42827 . 42826) (42829 . 42828) (42831 . 42830) (42833 . 42832) (42835 . 42834) (42837 . 42836) (42839 . 42838) (42841 . 42840) (42843 . 42842) (42845 . 42844) (42847 . 42846) (42849 . 42848) (42851 . 42850) (42853 . 42852) (42855 . 42854) (42857 . 42856) (42859 . 42858) (42861 . 42860) (42863 . 42862) (42874 . 42873) (42876 . 42875) (42879 . 42878) (42881 . 42880) (42883 . 42882) (42885 . 42884) (42887 . 42886) (42892 . 42891) (65345 . 65313) (65346 . 65314) (65347 . 65315) (65348 . 65316) (65349 . 65317) (65350 . 65318) (65351 . 65319) (65352 . 65320) (65353 . 65321) (65354 . 65322) (65355 . 65323) (65356 . 65324) (65357 . 65325) (65358 . 65326) (65359 . 65327) (65360 . 65328) (65361 . 65329) (65362 . 65330) (65363 . 65331) (65364 . 65332) (65365 . 65333) (65366 . 65334) (65367 . 65335) (65368 . 65336) (65369 . 65337) (65370 . 65338) (66600 . 66560) (66601 . 66561) (66602 . 66562) (66603 . 66563) (66604 . 66564) (66605 . 66565) (66606 . 66566) (66607 . 66567) (66608 . 66568) (66609 . 66569) (66610 . 66570) (66611 . 66571) (66612 . 66572) (66613 . 66573) (66614 . 66574) (66615 . 66575) (66616 . 66576) (66617 . 66577) (66618 . 66578) (66619 . 66579) (66620 . 66580) (66621 . 66581) (66622 . 66582) (66623 . 66583) (66624 . 66584) (66625 . 66585) (66626 . 66586) (66627 . 66587) (66628 . 66588) (66629 . 66589) (66630 . 66590) (66631 . 66591) (66632 . 66592) (66633 . 66593) (66634 . 66594) (66635 . 66595) (66636 . 66596) (66637 . 66597) (66638 . 66598) (66639 . 66599))) (set! G19593downcase-alist '((65 . 97) (66 . 98) (67 . 99) (68 . 100) (69 . 101) (70 . 102) (71 . 103) (72 . 104) (73 . 105) (74 . 106) (75 . 107) (76 . 108) (77 . 109) (78 . 110) (79 . 111) (80 . 112) (81 . 113) (82 . 114) (83 . 115) (84 . 116) (85 . 117) (86 . 118) (87 . 119) (88 . 120) (89 . 121) (90 . 122) (192 . 224) (193 . 225) (194 . 226) (195 . 227) (196 . 228) (197 . 229) (198 . 230) (199 . 231) (200 . 232) (201 . 233) (202 . 234) (203 . 235) (204 . 236) (205 . 237) (206 . 238) (207 . 239) (208 . 240) (209 . 241) (210 . 242) (211 . 243) (212 . 244) (213 . 245) (214 . 246) (216 . 248) (217 . 249) (218 . 250) (219 . 251) (220 . 252) (221 . 253) (222 . 254) (256 . 257) (258 . 259) (260 . 261) (262 . 263) (264 . 265) (266 . 267) (268 . 269) (270 . 271) (272 . 273) (274 . 275) (276 . 277) (278 . 279) (280 . 281) (282 . 283) (284 . 285) (286 . 287) (288 . 289) (290 . 291) (292 . 293) (294 . 295) (296 . 297) (298 . 299) (300 . 301) (302 . 303) (304 . 105) (306 . 307) (308 . 309) (310 . 311) (313 . 314) (315 . 316) (317 . 318) (319 . 320) (321 . 322) (323 . 324) (325 . 326) (327 . 328) (330 . 331) (332 . 333) (334 . 335) (336 . 337) (338 . 339) (340 . 341) (342 . 343) (344 . 345) (346 . 347) (348 . 349) (350 . 351) (352 . 353) (354 . 355) (356 . 357) (358 . 359) (360 . 361) (362 . 363) (364 . 365) (366 . 367) (368 . 369) (370 . 371) (372 . 373) (374 . 375) (376 . 255) (377 . 378) (379 . 380) (381 . 382) (385 . 595) (386 . 387) (388 . 389) (390 . 596) (391 . 392) (393 . 598) (394 . 599) (395 . 396) (398 . 477) (399 . 601) (400 . 603) (401 . 402) (403 . 608) (404 . 611) (406 . 617) (407 . 616) (408 . 409) (412 . 623) (413 . 626) (415 . 629) (416 . 417) (418 . 419) (420 . 421) (422 . 640) (423 . 424) (425 . 643) (428 . 429) (430 . 648) (431 . 432) (433 . 650) (434 . 651) (435 . 436) (437 . 438) (439 . 658) (440 . 441) (444 . 445) (452 . 454) (453 . 454) (455 . 457) (456 . 457) (458 . 460) (459 . 460) (461 . 462) (463 . 464) (465 . 466) (467 . 468) (469 . 470) (471 . 472) (473 . 474) (475 . 476) (478 . 479) (480 . 481) (482 . 483) (484 . 485) (486 . 487) (488 . 489) (490 . 491) (492 . 493) (494 . 495) (497 . 499) (498 . 499) (500 . 501) (502 . 405) (503 . 447) (504 . 505) (506 . 507) (508 . 509) (510 . 511) (512 . 513) (514 . 515) (516 . 517) (518 . 519) (520 . 521) (522 . 523) (524 . 525) (526 . 527) (528 . 529) (530 . 531) (532 . 533) (534 . 535) (536 . 537) (538 . 539) (540 . 541) (542 . 543) (544 . 414) (546 . 547) (548 . 549) (550 . 551) (552 . 553) (554 . 555) (556 . 557) (558 . 559) (560 . 561) (562 . 563) (570 . 11365) (571 . 572) (573 . 410) (574 . 11366) (577 . 578) (579 . 384) (580 . 649) (581 . 652) (582 . 583) (584 . 585) (586 . 587) (588 . 589) (590 . 591) (880 . 881) (882 . 883) (886 . 887) (902 . 940) (904 . 941) (905 . 942) (906 . 943) (908 . 972) (910 . 973) (911 . 974) (913 . 945) (914 . 946) (915 . 947) (916 . 948) (917 . 949) (918 . 950) (919 . 951) (920 . 952) (921 . 953) (922 . 954) (923 . 955) (924 . 956) (925 . 957) (926 . 958) (927 . 959) (928 . 960) (929 . 961) (931 . 963) (932 . 964) (933 . 965) (934 . 966) (935 . 967) (936 . 968) (937 . 969) (938 . 970) (939 . 971) (975 . 983) (984 . 985) (986 . 987) (988 . 989) (990 . 991) (992 . 993) (994 . 995) (996 . 997) (998 . 999) (1000 . 1001) (1002 . 1003) (1004 . 1005) (1006 . 1007) (1012 . 952) (1015 . 1016) (1017 . 1010) (1018 . 1019) (1021 . 891) (1022 . 892) (1023 . 893) (1024 . 1104) (1025 . 1105) (1026 . 1106) (1027 . 1107) (1028 . 1108) (1029 . 1109) (1030 . 1110) (1031 . 1111) (1032 . 1112) (1033 . 1113) (1034 . 1114) (1035 . 1115) (1036 . 1116) (1037 . 1117) (1038 . 1118) (1039 . 1119) (1040 . 1072) (1041 . 1073) (1042 . 1074) (1043 . 1075) (1044 . 1076) (1045 . 1077) (1046 . 1078) (1047 . 1079) (1048 . 1080) (1049 . 1081) (1050 . 1082) (1051 . 1083) (1052 . 1084) (1053 . 1085) (1054 . 1086) (1055 . 1087) (1056 . 1088) (1057 . 1089) (1058 . 1090) (1059 . 1091) (1060 . 1092) (1061 . 1093) (1062 . 1094) (1063 . 1095) (1064 . 1096) (1065 . 1097) (1066 . 1098) (1067 . 1099) (1068 . 1100) (1069 . 1101) (1070 . 1102) (1071 . 1103) (1120 . 1121) (1122 . 1123) (1124 . 1125) (1126 . 1127) (1128 . 1129) (1130 . 1131) (1132 . 1133) (1134 . 1135) (1136 . 1137) (1138 . 1139) (1140 . 1141) (1142 . 1143) (1144 . 1145) (1146 . 1147) (1148 . 1149) (1150 . 1151) (1152 . 1153) (1162 . 1163) (1164 . 1165) (1166 . 1167) (1168 . 1169) (1170 . 1171) (1172 . 1173) (1174 . 1175) (1176 . 1177) (1178 . 1179) (1180 . 1181) (1182 . 1183) (1184 . 1185) (1186 . 1187) (1188 . 1189) (1190 . 1191) (1192 . 1193) (1194 . 1195) (1196 . 1197) (1198 . 1199) (1200 . 1201) (1202 . 1203) (1204 . 1205) (1206 . 1207) (1208 . 1209) (1210 . 1211) (1212 . 1213) (1214 . 1215) (1216 . 1231) (1217 . 1218) (1219 . 1220) (1221 . 1222) (1223 . 1224) (1225 . 1226) (1227 . 1228) (1229 . 1230) (1232 . 1233) (1234 . 1235) (1236 . 1237) (1238 . 1239) (1240 . 1241) (1242 . 1243) (1244 . 1245) (1246 . 1247) (1248 . 1249) (1250 . 1251) (1252 . 1253) (1254 . 1255) (1256 . 1257) (1258 . 1259) (1260 . 1261) (1262 . 1263) (1264 . 1265) (1266 . 1267) (1268 . 1269) (1270 . 1271) (1272 . 1273) (1274 . 1275) (1276 . 1277) (1278 . 1279) (1280 . 1281) (1282 . 1283) (1284 . 1285) (1286 . 1287) (1288 . 1289) (1290 . 1291) (1292 . 1293) (1294 . 1295) (1296 . 1297) (1298 . 1299) (1300 . 1301) (1302 . 1303) (1304 . 1305) (1306 . 1307) (1308 . 1309) (1310 . 1311) (1312 . 1313) (1314 . 1315) (1329 . 1377) (1330 . 1378) (1331 . 1379) (1332 . 1380) (1333 . 1381) (1334 . 1382) (1335 . 1383) (1336 . 1384) (1337 . 1385) (1338 . 1386) (1339 . 1387) (1340 . 1388) (1341 . 1389) (1342 . 1390) (1343 . 1391) (1344 . 1392) (1345 . 1393) (1346 . 1394) (1347 . 1395) (1348 . 1396) (1349 . 1397) (1350 . 1398) (1351 . 1399) (1352 . 1400) (1353 . 1401) (1354 . 1402) (1355 . 1403) (1356 . 1404) (1357 . 1405) (1358 . 1406) (1359 . 1407) (1360 . 1408) (1361 . 1409) (1362 . 1410) (1363 . 1411) (1364 . 1412) (1365 . 1413) (1366 . 1414) (4256 . 11520) (4257 . 11521) (4258 . 11522) (4259 . 11523) (4260 . 11524) (4261 . 11525) (4262 . 11526) (4263 . 11527) (4264 . 11528) (4265 . 11529) (4266 . 11530) (4267 . 11531) (4268 . 11532) (4269 . 11533) (4270 . 11534) (4271 . 11535) (4272 . 11536) (4273 . 11537) (4274 . 11538) (4275 . 11539) (4276 . 11540) (4277 . 11541) (4278 . 11542) (4279 . 11543) (4280 . 11544) (4281 . 11545) (4282 . 11546) (4283 . 11547) (4284 . 11548) (4285 . 11549) (4286 . 11550) (4287 . 11551) (4288 . 11552) (4289 . 11553) (4290 . 11554) (4291 . 11555) (4292 . 11556) (4293 . 11557) (7680 . 7681) (7682 . 7683) (7684 . 7685) (7686 . 7687) (7688 . 7689) (7690 . 7691) (7692 . 7693) (7694 . 7695) (7696 . 7697) (7698 . 7699) (7700 . 7701) (7702 . 7703) (7704 . 7705) (7706 . 7707) (7708 . 7709) (7710 . 7711) (7712 . 7713) (7714 . 7715) (7716 . 7717) (7718 . 7719) (7720 . 7721) (7722 . 7723) (7724 . 7725) (7726 . 7727) (7728 . 7729) (7730 . 7731) (7732 . 7733) (7734 . 7735) (7736 . 7737) (7738 . 7739) (7740 . 7741) (7742 . 7743) (7744 . 7745) (7746 . 7747) (7748 . 7749) (7750 . 7751) (7752 . 7753) (7754 . 7755) (7756 . 7757) (7758 . 7759) (7760 . 7761) (7762 . 7763) (7764 . 7765) (7766 . 7767) (7768 . 7769) (7770 . 7771) (7772 . 7773) (7774 . 7775) (7776 . 7777) (7778 . 7779) (7780 . 7781) (7782 . 7783) (7784 . 7785) (7786 . 7787) (7788 . 7789) (7790 . 7791) (7792 . 7793) (7794 . 7795) (7796 . 7797) (7798 . 7799) (7800 . 7801) (7802 . 7803) (7804 . 7805) (7806 . 7807) (7808 . 7809) (7810 . 7811) (7812 . 7813) (7814 . 7815) (7816 . 7817) (7818 . 7819) (7820 . 7821) (7822 . 7823) (7824 . 7825) (7826 . 7827) (7828 . 7829) (7838 . 223) (7840 . 7841) (7842 . 7843) (7844 . 7845) (7846 . 7847) (7848 . 7849) (7850 . 7851) (7852 . 7853) (7854 . 7855) (7856 . 7857) (7858 . 7859) (7860 . 7861) (7862 . 7863) (7864 . 7865) (7866 . 7867) (7868 . 7869) (7870 . 7871) (7872 . 7873) (7874 . 7875) (7876 . 7877) (7878 . 7879) (7880 . 7881) (7882 . 7883) (7884 . 7885) (7886 . 7887) (7888 . 7889) (7890 . 7891) (7892 . 7893) (7894 . 7895) (7896 . 7897) (7898 . 7899) (7900 . 7901) (7902 . 7903) (7904 . 7905) (7906 . 7907) (7908 . 7909) (7910 . 7911) (7912 . 7913) (7914 . 7915) (7916 . 7917) (7918 . 7919) (7920 . 7921) (7922 . 7923) (7924 . 7925) (7926 . 7927) (7928 . 7929) (7930 . 7931) (7932 . 7933) (7934 . 7935) (7944 . 7936) (7945 . 7937) (7946 . 7938) (7947 . 7939) (7948 . 7940) (7949 . 7941) (7950 . 7942) (7951 . 7943) (7960 . 7952) (7961 . 7953) (7962 . 7954) (7963 . 7955) (7964 . 7956) (7965 . 7957) (7976 . 7968) (7977 . 7969) (7978 . 7970) (7979 . 7971) (7980 . 7972) (7981 . 7973) (7982 . 7974) (7983 . 7975) (7992 . 7984) (7993 . 7985) (7994 . 7986) (7995 . 7987) (7996 . 7988) (7997 . 7989) (7998 . 7990) (7999 . 7991) (8008 . 8000) (8009 . 8001) (8010 . 8002) (8011 . 8003) (8012 . 8004) (8013 . 8005) (8025 . 8017) (8027 . 8019) (8029 . 8021) (8031 . 8023) (8040 . 8032) (8041 . 8033) (8042 . 8034) (8043 . 8035) (8044 . 8036) (8045 . 8037) (8046 . 8038) (8047 . 8039) (8072 . 8064) (8073 . 8065) (8074 . 8066) (8075 . 8067) (8076 . 8068) (8077 . 8069) (8078 . 8070) (8079 . 8071) (8088 . 8080) (8089 . 8081) (8090 . 8082) (8091 . 8083) (8092 . 8084) (8093 . 8085) (8094 . 8086) (8095 . 8087) (8104 . 8096) (8105 . 8097) (8106 . 8098) (8107 . 8099) (8108 . 8100) (8109 . 8101) (8110 . 8102) (8111 . 8103) (8120 . 8112) (8121 . 8113) (8122 . 8048) (8123 . 8049) (8124 . 8115) (8136 . 8050) (8137 . 8051) (8138 . 8052) (8139 . 8053) (8140 . 8131) (8152 . 8144) (8153 . 8145) (8154 . 8054) (8155 . 8055) (8168 . 8160) (8169 . 8161) (8170 . 8058) (8171 . 8059) (8172 . 8165) (8184 . 8056) (8185 . 8057) (8186 . 8060) (8187 . 8061) (8188 . 8179) (8486 . 969) (8490 . 107) (8491 . 229) (8498 . 8526) (8544 . 8560) (8545 . 8561) (8546 . 8562) (8547 . 8563) (8548 . 8564) (8549 . 8565) (8550 . 8566) (8551 . 8567) (8552 . 8568) (8553 . 8569) (8554 . 8570) (8555 . 8571) (8556 . 8572) (8557 . 8573) (8558 . 8574) (8559 . 8575) (8579 . 8580) (9398 . 9424) (9399 . 9425) (9400 . 9426) (9401 . 9427) (9402 . 9428) (9403 . 9429) (9404 . 9430) (9405 . 9431) (9406 . 9432) (9407 . 9433) (9408 . 9434) (9409 . 9435) (9410 . 9436) (9411 . 9437) (9412 . 9438) (9413 . 9439) (9414 . 9440) (9415 . 9441) (9416 . 9442) (9417 . 9443) (9418 . 9444) (9419 . 9445) (9420 . 9446) (9421 . 9447) (9422 . 9448) (9423 . 9449) (11264 . 11312) (11265 . 11313) (11266 . 11314) (11267 . 11315) (11268 . 11316) (11269 . 11317) (11270 . 11318) (11271 . 11319) (11272 . 11320) (11273 . 11321) (11274 . 11322) (11275 . 11323) (11276 . 11324) (11277 . 11325) (11278 . 11326) (11279 . 11327) (11280 . 11328) (11281 . 11329) (11282 . 11330) (11283 . 11331) (11284 . 11332) (11285 . 11333) (11286 . 11334) (11287 . 11335) (11288 . 11336) (11289 . 11337) (11290 . 11338) (11291 . 11339) (11292 . 11340) (11293 . 11341) (11294 . 11342) (11295 . 11343) (11296 . 11344) (11297 . 11345) (11298 . 11346) (11299 . 11347) (11300 . 11348) (11301 . 11349) (11302 . 11350) (11303 . 11351) (11304 . 11352) (11305 . 11353) (11306 . 11354) (11307 . 11355) (11308 . 11356) (11309 . 11357) (11310 . 11358) (11360 . 11361) (11362 . 619) (11363 . 7549) (11364 . 637) (11367 . 11368) (11369 . 11370) (11371 . 11372) (11373 . 593) (11374 . 625) (11375 . 592) (11378 . 11379) (11381 . 11382) (11392 . 11393) (11394 . 11395) (11396 . 11397) (11398 . 11399) (11400 . 11401) (11402 . 11403) (11404 . 11405) (11406 . 11407) (11408 . 11409) (11410 . 11411) (11412 . 11413) (11414 . 11415) (11416 . 11417) (11418 . 11419) (11420 . 11421) (11422 . 11423) (11424 . 11425) (11426 . 11427) (11428 . 11429) (11430 . 11431) (11432 . 11433) (11434 . 11435) (11436 . 11437) (11438 . 11439) (11440 . 11441) (11442 . 11443) (11444 . 11445) (11446 . 11447) (11448 . 11449) (11450 . 11451) (11452 . 11453) (11454 . 11455) (11456 . 11457) (11458 . 11459) (11460 . 11461) (11462 . 11463) (11464 . 11465) (11466 . 11467) (11468 . 11469) (11470 . 11471) (11472 . 11473) (11474 . 11475) (11476 . 11477) (11478 . 11479) (11480 . 11481) (11482 . 11483) (11484 . 11485) (11486 . 11487) (11488 . 11489) (11490 . 11491) (42560 . 42561) (42562 . 42563) (42564 . 42565) (42566 . 42567) (42568 . 42569) (42570 . 42571) (42572 . 42573) (42574 . 42575) (42576 . 42577) (42578 . 42579) (42580 . 42581) (42582 . 42583) (42584 . 42585) (42586 . 42587) (42588 . 42589) (42590 . 42591) (42594 . 42595) (42596 . 42597) (42598 . 42599) (42600 . 42601) (42602 . 42603) (42604 . 42605) (42624 . 42625) (42626 . 42627) (42628 . 42629) (42630 . 42631) (42632 . 42633) (42634 . 42635) (42636 . 42637) (42638 . 42639) (42640 . 42641) (42642 . 42643) (42644 . 42645) (42646 . 42647) (42786 . 42787) (42788 . 42789) (42790 . 42791) (42792 . 42793) (42794 . 42795) (42796 . 42797) (42798 . 42799) (42802 . 42803) (42804 . 42805) (42806 . 42807) (42808 . 42809) (42810 . 42811) (42812 . 42813) (42814 . 42815) (42816 . 42817) (42818 . 42819) (42820 . 42821) (42822 . 42823) (42824 . 42825) (42826 . 42827) (42828 . 42829) (42830 . 42831) (42832 . 42833) (42834 . 42835) (42836 . 42837) (42838 . 42839) (42840 . 42841) (42842 . 42843) (42844 . 42845) (42846 . 42847) (42848 . 42849) (42850 . 42851) (42852 . 42853) (42854 . 42855) (42856 . 42857) (42858 . 42859) (42860 . 42861) (42862 . 42863) (42873 . 42874) (42875 . 42876) (42877 . 7545) (42878 . 42879) (42880 . 42881) (42882 . 42883) (42884 . 42885) (42886 . 42887) (42891 . 42892) (65313 . 65345) (65314 . 65346) (65315 . 65347) (65316 . 65348) (65317 . 65349) (65318 . 65350) (65319 . 65351) (65320 . 65352) (65321 . 65353) (65322 . 65354) (65323 . 65355) (65324 . 65356) (65325 . 65357) (65326 . 65358) (65327 . 65359) (65328 . 65360) (65329 . 65361) (65330 . 65362) (65331 . 65363) (65332 . 65364) (65333 . 65365) (65334 . 65366) (65335 . 65367) (65336 . 65368) (65337 . 65369) (65338 . 65370) (66560 . 66600) (66561 . 66601) (66562 . 66602) (66563 . 66603) (66564 . 66604) (66565 . 66605) (66566 . 66606) (66567 . 66607) (66568 . 66608) (66569 . 66609) (66570 . 66610) (66571 . 66611) (66572 . 66612) (66573 . 66613) (66574 . 66614) (66575 . 66615) (66576 . 66616) (66577 . 66617) (66578 . 66618) (66579 . 66619) (66580 . 66620) (66581 . 66621) (66582 . 66622) (66583 . 66623) (66584 . 66624) (66585 . 66625) (66586 . 66626) (66587 . 66627) (66588 . 66628) (66589 . 66629) (66590 . 66630) (66591 . 66631) (66592 . 66632) (66593 . 66633) (66594 . 66634) (66595 . 66635) (66596 . 66636) (66597 . 66637) (66598 . 66638) (66599 . 66639))) (set! G19595upcase-alist '((97 . 65) (98 . 66) (99 . 67) (100 . 68) (101 . 69) (102 . 70) (103 . 71) (104 . 72) (105 . 73) (106 . 74) (107 . 75) (108 . 76) (109 . 77) (110 . 78) (111 . 79) (112 . 80) (113 . 81) (114 . 82) (115 . 83) (116 . 84) (117 . 85) (118 . 86) (119 . 87) (120 . 88) (121 . 89) (122 . 90) (181 . 924) (224 . 192) (225 . 193) (226 . 194) (227 . 195) (228 . 196) (229 . 197) (230 . 198) (231 . 199) (232 . 200) (233 . 201) (234 . 202) (235 . 203) (236 . 204) (237 . 205) (238 . 206) (239 . 207) (240 . 208) (241 . 209) (242 . 210) (243 . 211) (244 . 212) (245 . 213) (246 . 214) (248 . 216) (249 . 217) (250 . 218) (251 . 219) (252 . 220) (253 . 221) (254 . 222) (255 . 376) (257 . 256) (259 . 258) (261 . 260) (263 . 262) (265 . 264) (267 . 266) (269 . 268) (271 . 270) (273 . 272) (275 . 274) (277 . 276) (279 . 278) (281 . 280) (283 . 282) (285 . 284) (287 . 286) (289 . 288) (291 . 290) (293 . 292) (295 . 294) (297 . 296) (299 . 298) (301 . 300) (303 . 302) (305 . 73) (307 . 306) (309 . 308) (311 . 310) (314 . 313) (316 . 315) (318 . 317) (320 . 319) (322 . 321) (324 . 323) (326 . 325) (328 . 327) (331 . 330) (333 . 332) (335 . 334) (337 . 336) (339 . 338) (341 . 340) (343 . 342) (345 . 344) (347 . 346) (349 . 348) (351 . 350) (353 . 352) (355 . 354) (357 . 356) (359 . 358) (361 . 360) (363 . 362) (365 . 364) (367 . 366) (369 . 368) (371 . 370) (373 . 372) (375 . 374) (378 . 377) (380 . 379) (382 . 381) (383 . 83) (384 . 579) (387 . 386) (389 . 388) (392 . 391) (396 . 395) (402 . 401) (405 . 502) (409 . 408) (410 . 573) (414 . 544) (417 . 416) (419 . 418) (421 . 420) (424 . 423) (429 . 428) (432 . 431) (436 . 435) (438 . 437) (441 . 440) (445 . 444) (447 . 503) (453 . 452) (454 . 452) (456 . 455) (457 . 455) (459 . 458) (460 . 458) (462 . 461) (464 . 463) (466 . 465) (468 . 467) (470 . 469) (472 . 471) (474 . 473) (476 . 475) (477 . 398) (479 . 478) (481 . 480) (483 . 482) (485 . 484) (487 . 486) (489 . 488) (491 . 490) (493 . 492) (495 . 494) (498 . 497) (499 . 497) (501 . 500) (505 . 504) (507 . 506) (509 . 508) (511 . 510) (513 . 512) (515 . 514) (517 . 516) (519 . 518) (521 . 520) (523 . 522) (525 . 524) (527 . 526) (529 . 528) (531 . 530) (533 . 532) (535 . 534) (537 . 536) (539 . 538) (541 . 540) (543 . 542) (547 . 546) (549 . 548) (551 . 550) (553 . 552) (555 . 554) (557 . 556) (559 . 558) (561 . 560) (563 . 562) (572 . 571) (578 . 577) (583 . 582) (585 . 584) (587 . 586) (589 . 588) (591 . 590) (592 . 11375) (593 . 11373) (595 . 385) (596 . 390) (598 . 393) (599 . 394) (601 . 399) (603 . 400) (608 . 403) (611 . 404) (616 . 407) (617 . 406) (619 . 11362) (623 . 412) (625 . 11374) (626 . 413) (629 . 415) (637 . 11364) (640 . 422) (643 . 425) (648 . 430) (649 . 580) (650 . 433) (651 . 434) (652 . 581) (658 . 439) (837 . 921) (881 . 880) (883 . 882) (887 . 886) (891 . 1021) (892 . 1022) (893 . 1023) (940 . 902) (941 . 904) (942 . 905) (943 . 906) (945 . 913) (946 . 914) (947 . 915) (948 . 916) (949 . 917) (950 . 918) (951 . 919) (952 . 920) (953 . 921) (954 . 922) (955 . 923) (956 . 924) (957 . 925) (958 . 926) (959 . 927) (960 . 928) (961 . 929) (962 . 931) (963 . 931) (964 . 932) (965 . 933) (966 . 934) (967 . 935) (968 . 936) (969 . 937) (970 . 938) (971 . 939) (972 . 908) (973 . 910) (974 . 911) (976 . 914) (977 . 920) (981 . 934) (982 . 928) (983 . 975) (985 . 984) (987 . 986) (989 . 988) (991 . 990) (993 . 992) (995 . 994) (997 . 996) (999 . 998) (1001 . 1000) (1003 . 1002) (1005 . 1004) (1007 . 1006) (1008 . 922) (1009 . 929) (1010 . 1017) (1013 . 917) (1016 . 1015) (1019 . 1018) (1072 . 1040) (1073 . 1041) (1074 . 1042) (1075 . 1043) (1076 . 1044) (1077 . 1045) (1078 . 1046) (1079 . 1047) (1080 . 1048) (1081 . 1049) (1082 . 1050) (1083 . 1051) (1084 . 1052) (1085 . 1053) (1086 . 1054) (1087 . 1055) (1088 . 1056) (1089 . 1057) (1090 . 1058) (1091 . 1059) (1092 . 1060) (1093 . 1061) (1094 . 1062) (1095 . 1063) (1096 . 1064) (1097 . 1065) (1098 . 1066) (1099 . 1067) (1100 . 1068) (1101 . 1069) (1102 . 1070) (1103 . 1071) (1104 . 1024) (1105 . 1025) (1106 . 1026) (1107 . 1027) (1108 . 1028) (1109 . 1029) (1110 . 1030) (1111 . 1031) (1112 . 1032) (1113 . 1033) (1114 . 1034) (1115 . 1035) (1116 . 1036) (1117 . 1037) (1118 . 1038) (1119 . 1039) (1121 . 1120) (1123 . 1122) (1125 . 1124) (1127 . 1126) (1129 . 1128) (1131 . 1130) (1133 . 1132) (1135 . 1134) (1137 . 1136) (1139 . 1138) (1141 . 1140) (1143 . 1142) (1145 . 1144) (1147 . 1146) (1149 . 1148) (1151 . 1150) (1153 . 1152) (1163 . 1162) (1165 . 1164) (1167 . 1166) (1169 . 1168) (1171 . 1170) (1173 . 1172) (1175 . 1174) (1177 . 1176) (1179 . 1178) (1181 . 1180) (1183 . 1182) (1185 . 1184) (1187 . 1186) (1189 . 1188) (1191 . 1190) (1193 . 1192) (1195 . 1194) (1197 . 1196) (1199 . 1198) (1201 . 1200) (1203 . 1202) (1205 . 1204) (1207 . 1206) (1209 . 1208) (1211 . 1210) (1213 . 1212) (1215 . 1214) (1218 . 1217) (1220 . 1219) (1222 . 1221) (1224 . 1223) (1226 . 1225) (1228 . 1227) (1230 . 1229) (1231 . 1216) (1233 . 1232) (1235 . 1234) (1237 . 1236) (1239 . 1238) (1241 . 1240) (1243 . 1242) (1245 . 1244) (1247 . 1246) (1249 . 1248) (1251 . 1250) (1253 . 1252) (1255 . 1254) (1257 . 1256) (1259 . 1258) (1261 . 1260) (1263 . 1262) (1265 . 1264) (1267 . 1266) (1269 . 1268) (1271 . 1270) (1273 . 1272) (1275 . 1274) (1277 . 1276) (1279 . 1278) (1281 . 1280) (1283 . 1282) (1285 . 1284) (1287 . 1286) (1289 . 1288) (1291 . 1290) (1293 . 1292) (1295 . 1294) (1297 . 1296) (1299 . 1298) (1301 . 1300) (1303 . 1302) (1305 . 1304) (1307 . 1306) (1309 . 1308) (1311 . 1310) (1313 . 1312) (1315 . 1314) (1377 . 1329) (1378 . 1330) (1379 . 1331) (1380 . 1332) (1381 . 1333) (1382 . 1334) (1383 . 1335) (1384 . 1336) (1385 . 1337) (1386 . 1338) (1387 . 1339) (1388 . 1340) (1389 . 1341) (1390 . 1342) (1391 . 1343) (1392 . 1344) (1393 . 1345) (1394 . 1346) (1395 . 1347) (1396 . 1348) (1397 . 1349) (1398 . 1350) (1399 . 1351) (1400 . 1352) (1401 . 1353) (1402 . 1354) (1403 . 1355) (1404 . 1356) (1405 . 1357) (1406 . 1358) (1407 . 1359) (1408 . 1360) (1409 . 1361) (1410 . 1362) (1411 . 1363) (1412 . 1364) (1413 . 1365) (1414 . 1366) (7545 . 42877) (7549 . 11363) (7681 . 7680) (7683 . 7682) (7685 . 7684) (7687 . 7686) (7689 . 7688) (7691 . 7690) (7693 . 7692) (7695 . 7694) (7697 . 7696) (7699 . 7698) (7701 . 7700) (7703 . 7702) (7705 . 7704) (7707 . 7706) (7709 . 7708) (7711 . 7710) (7713 . 7712) (7715 . 7714) (7717 . 7716) (7719 . 7718) (7721 . 7720) (7723 . 7722) (7725 . 7724) (7727 . 7726) (7729 . 7728) (7731 . 7730) (7733 . 7732) (7735 . 7734) (7737 . 7736) (7739 . 7738) (7741 . 7740) (7743 . 7742) (7745 . 7744) (7747 . 7746) (7749 . 7748) (7751 . 7750) (7753 . 7752) (7755 . 7754) (7757 . 7756) (7759 . 7758) (7761 . 7760) (7763 . 7762) (7765 . 7764) (7767 . 7766) (7769 . 7768) (7771 . 7770) (7773 . 7772) (7775 . 7774) (7777 . 7776) (7779 . 7778) (7781 . 7780) (7783 . 7782) (7785 . 7784) (7787 . 7786) (7789 . 7788) (7791 . 7790) (7793 . 7792) (7795 . 7794) (7797 . 7796) (7799 . 7798) (7801 . 7800) (7803 . 7802) (7805 . 7804) (7807 . 7806) (7809 . 7808) (7811 . 7810) (7813 . 7812) (7815 . 7814) (7817 . 7816) (7819 . 7818) (7821 . 7820) (7823 . 7822) (7825 . 7824) (7827 . 7826) (7829 . 7828) (7835 . 7776) (7841 . 7840) (7843 . 7842) (7845 . 7844) (7847 . 7846) (7849 . 7848) (7851 . 7850) (7853 . 7852) (7855 . 7854) (7857 . 7856) (7859 . 7858) (7861 . 7860) (7863 . 7862) (7865 . 7864) (7867 . 7866) (7869 . 7868) (7871 . 7870) (7873 . 7872) (7875 . 7874) (7877 . 7876) (7879 . 7878) (7881 . 7880) (7883 . 7882) (7885 . 7884) (7887 . 7886) (7889 . 7888) (7891 . 7890) (7893 . 7892) (7895 . 7894) (7897 . 7896) (7899 . 7898) (7901 . 7900) (7903 . 7902) (7905 . 7904) (7907 . 7906) (7909 . 7908) (7911 . 7910) (7913 . 7912) (7915 . 7914) (7917 . 7916) (7919 . 7918) (7921 . 7920) (7923 . 7922) (7925 . 7924) (7927 . 7926) (7929 . 7928) (7931 . 7930) (7933 . 7932) (7935 . 7934) (7936 . 7944) (7937 . 7945) (7938 . 7946) (7939 . 7947) (7940 . 7948) (7941 . 7949) (7942 . 7950) (7943 . 7951) (7952 . 7960) (7953 . 7961) (7954 . 7962) (7955 . 7963) (7956 . 7964) (7957 . 7965) (7968 . 7976) (7969 . 7977) (7970 . 7978) (7971 . 7979) (7972 . 7980) (7973 . 7981) (7974 . 7982) (7975 . 7983) (7984 . 7992) (7985 . 7993) (7986 . 7994) (7987 . 7995) (7988 . 7996) (7989 . 7997) (7990 . 7998) (7991 . 7999) (8000 . 8008) (8001 . 8009) (8002 . 8010) (8003 . 8011) (8004 . 8012) (8005 . 8013) (8017 . 8025) (8019 . 8027) (8021 . 8029) (8023 . 8031) (8032 . 8040) (8033 . 8041) (8034 . 8042) (8035 . 8043) (8036 . 8044) (8037 . 8045) (8038 . 8046) (8039 . 8047) (8048 . 8122) (8049 . 8123) (8050 . 8136) (8051 . 8137) (8052 . 8138) (8053 . 8139) (8054 . 8154) (8055 . 8155) (8056 . 8184) (8057 . 8185) (8058 . 8170) (8059 . 8171) (8060 . 8186) (8061 . 8187) (8064 . 8072) (8065 . 8073) (8066 . 8074) (8067 . 8075) (8068 . 8076) (8069 . 8077) (8070 . 8078) (8071 . 8079) (8080 . 8088) (8081 . 8089) (8082 . 8090) (8083 . 8091) (8084 . 8092) (8085 . 8093) (8086 . 8094) (8087 . 8095) (8096 . 8104) (8097 . 8105) (8098 . 8106) (8099 . 8107) (8100 . 8108) (8101 . 8109) (8102 . 8110) (8103 . 8111) (8112 . 8120) (8113 . 8121) (8115 . 8124) (8126 . 921) (8131 . 8140) (8144 . 8152) (8145 . 8153) (8160 . 8168) (8161 . 8169) (8165 . 8172) (8179 . 8188) (8526 . 8498) (8560 . 8544) (8561 . 8545) (8562 . 8546) (8563 . 8547) (8564 . 8548) (8565 . 8549) (8566 . 8550) (8567 . 8551) (8568 . 8552) (8569 . 8553) (8570 . 8554) (8571 . 8555) (8572 . 8556) (8573 . 8557) (8574 . 8558) (8575 . 8559) (8580 . 8579) (9424 . 9398) (9425 . 9399) (9426 . 9400) (9427 . 9401) (9428 . 9402) (9429 . 9403) (9430 . 9404) (9431 . 9405) (9432 . 9406) (9433 . 9407) (9434 . 9408) (9435 . 9409) (9436 . 9410) (9437 . 9411) (9438 . 9412) (9439 . 9413) (9440 . 9414) (9441 . 9415) (9442 . 9416) (9443 . 9417) (9444 . 9418) (9445 . 9419) (9446 . 9420) (9447 . 9421) (9448 . 9422) (9449 . 9423) (11312 . 11264) (11313 . 11265) (11314 . 11266) (11315 . 11267) (11316 . 11268) (11317 . 11269) (11318 . 11270) (11319 . 11271) (11320 . 11272) (11321 . 11273) (11322 . 11274) (11323 . 11275) (11324 . 11276) (11325 . 11277) (11326 . 11278) (11327 . 11279) (11328 . 11280) (11329 . 11281) (11330 . 11282) (11331 . 11283) (11332 . 11284) (11333 . 11285) (11334 . 11286) (11335 . 11287) (11336 . 11288) (11337 . 11289) (11338 . 11290) (11339 . 11291) (11340 . 11292) (11341 . 11293) (11342 . 11294) (11343 . 11295) (11344 . 11296) (11345 . 11297) (11346 . 11298) (11347 . 11299) (11348 . 11300) (11349 . 11301) (11350 . 11302) (11351 . 11303) (11352 . 11304) (11353 . 11305) (11354 . 11306) (11355 . 11307) (11356 . 11308) (11357 . 11309) (11358 . 11310) (11361 . 11360) (11365 . 570) (11366 . 574) (11368 . 11367) (11370 . 11369) (11372 . 11371) (11379 . 11378) (11382 . 11381) (11393 . 11392) (11395 . 11394) (11397 . 11396) (11399 . 11398) (11401 . 11400) (11403 . 11402) (11405 . 11404) (11407 . 11406) (11409 . 11408) (11411 . 11410) (11413 . 11412) (11415 . 11414) (11417 . 11416) (11419 . 11418) (11421 . 11420) (11423 . 11422) (11425 . 11424) (11427 . 11426) (11429 . 11428) (11431 . 11430) (11433 . 11432) (11435 . 11434) (11437 . 11436) (11439 . 11438) (11441 . 11440) (11443 . 11442) (11445 . 11444) (11447 . 11446) (11449 . 11448) (11451 . 11450) (11453 . 11452) (11455 . 11454) (11457 . 11456) (11459 . 11458) (11461 . 11460) (11463 . 11462) (11465 . 11464) (11467 . 11466) (11469 . 11468) (11471 . 11470) (11473 . 11472) (11475 . 11474) (11477 . 11476) (11479 . 11478) (11481 . 11480) (11483 . 11482) (11485 . 11484) (11487 . 11486) (11489 . 11488) (11491 . 11490) (11520 . 4256) (11521 . 4257) (11522 . 4258) (11523 . 4259) (11524 . 4260) (11525 . 4261) (11526 . 4262) (11527 . 4263) (11528 . 4264) (11529 . 4265) (11530 . 4266) (11531 . 4267) (11532 . 4268) (11533 . 4269) (11534 . 4270) (11535 . 4271) (11536 . 4272) (11537 . 4273) (11538 . 4274) (11539 . 4275) (11540 . 4276) (11541 . 4277) (11542 . 4278) (11543 . 4279) (11544 . 4280) (11545 . 4281) (11546 . 4282) (11547 . 4283) (11548 . 4284) (11549 . 4285) (11550 . 4286) (11551 . 4287) (11552 . 4288) (11553 . 4289) (11554 . 4290) (11555 . 4291) (11556 . 4292) (11557 . 4293) (42561 . 42560) (42563 . 42562) (42565 . 42564) (42567 . 42566) (42569 . 42568) (42571 . 42570) (42573 . 42572) (42575 . 42574) (42577 . 42576) (42579 . 42578) (42581 . 42580) (42583 . 42582) (42585 . 42584) (42587 . 42586) (42589 . 42588) (42591 . 42590) (42595 . 42594) (42597 . 42596) (42599 . 42598) (42601 . 42600) (42603 . 42602) (42605 . 42604) (42625 . 42624) (42627 . 42626) (42629 . 42628) (42631 . 42630) (42633 . 42632) (42635 . 42634) (42637 . 42636) (42639 . 42638) (42641 . 42640) (42643 . 42642) (42645 . 42644) (42647 . 42646) (42787 . 42786) (42789 . 42788) (42791 . 42790) (42793 . 42792) (42795 . 42794) (42797 . 42796) (42799 . 42798) (42803 . 42802) (42805 . 42804) (42807 . 42806) (42809 . 42808) (42811 . 42810) (42813 . 42812) (42815 . 42814) (42817 . 42816) (42819 . 42818) (42821 . 42820) (42823 . 42822) (42825 . 42824) (42827 . 42826) (42829 . 42828) (42831 . 42830) (42833 . 42832) (42835 . 42834) (42837 . 42836) (42839 . 42838) (42841 . 42840) (42843 . 42842) (42845 . 42844) (42847 . 42846) (42849 . 42848) (42851 . 42850) (42853 . 42852) (42855 . 42854) (42857 . 42856) (42859 . 42858) (42861 . 42860) (42863 . 42862) (42874 . 42873) (42876 . 42875) (42879 . 42878) (42881 . 42880) (42883 . 42882) (42885 . 42884) (42887 . 42886) (42892 . 42891) (65345 . 65313) (65346 . 65314) (65347 . 65315) (65348 . 65316) (65349 . 65317) (65350 . 65318) (65351 . 65319) (65352 . 65320) (65353 . 65321) (65354 . 65322) (65355 . 65323) (65356 . 65324) (65357 . 65325) (65358 . 65326) (65359 . 65327) (65360 . 65328) (65361 . 65329) (65362 . 65330) (65363 . 65331) (65364 . 65332) (65365 . 65333) (65366 . 65334) (65367 . 65335) (65368 . 65336) (65369 . 65337) (65370 . 65338) (66600 . 66560) (66601 . 66561) (66602 . 66562) (66603 . 66563) (66604 . 66564) (66605 . 66565) (66606 . 66566) (66607 . 66567) (66608 . 66568) (66609 . 66569) (66610 . 66570) (66611 . 66571) (66612 . 66572) (66613 . 66573) (66614 . 66574) (66615 . 66575) (66616 . 66576) (66617 . 66577) (66618 . 66578) (66619 . 66579) (66620 . 66580) (66621 . 66581) (66622 . 66582) (66623 . 66583) (66624 . 66584) (66625 . 66585) (66626 . 66586) (66627 . 66587) (66628 . 66588) (66629 . 66589) (66630 . 66590) (66631 . 66591) (66632 . 66592) (66633 . 66593) (66634 . 66594) (66635 . 66595) (66636 . 66596) (66637 . 66597) (66638 . 66598) (66639 . 66599))) (set! G19597upcase-hashtable '#f) (set! G19599downcase-hashtable '#f) (set! G19601titlecase-hashtable '#f) (set! G19603general-category-hashtable '#f) (set! G19605other-alphabetic-hashtable '#f) (set! G19607other-uppercase-hashtable '#f) (set! G19609other-lowercase-hashtable '#f) (set! G19611whitespace-hashtable '#f) (set! G19613special-uppercase-hashtable '#f) (set! G19615special-lowercase-hashtable '#f) (set! G19617foldcase-hashtable '#f) (set! G19619canonical-decompose-hashtable '#f) (set! G19621compatible-decompose-hashtable '#f) (set! G19623combination-class-hashtable '#f) (set! G19625compose-hashable '#f) (set! G19627foldcase (lambda (G19728char) (begin (if G19617foldcase-hashtable (void) (set! G19617foldcase-hashtable (G19563alist->eq-hash-table G19575foldcase-list))) (hashtable-ref G19617foldcase-hashtable (char->integer G19728char) '#f)))) (set! G19629property-list->hashtable (lambda (G19730property-list) ((lambda (G19732hashtable) (begin (for-each (lambda (G19734data) (if (number? G19734data) (hashtable-set! G19732hashtable (integer->char G19734data) '#t) (if (pair? G19734data) ((letrec ((G19736loop (lambda (G19738start G19739end) (if (> G19738start G19739end) '() (begin (hashtable-set! G19732hashtable (integer->char G19738start) '#t) (G19736loop (+ G19738start '1) G19739end)))))) G19736loop) (car G19734data) (cdr G19734data)) (void)))) G19730property-list) G19732hashtable)) (make-eq-hashtable)))) (set! G19631whitespace-proprety? (lambda (G19742char) (begin (if G19611whitespace-hashtable (void) (set! G19611whitespace-hashtable (G19629property-list->hashtable G19581whitespace-property-list))) (hashtable-ref G19611whitespace-hashtable G19742char '#f)))) (set! G19633other-alphabetic-property? (lambda (G19744char) (begin (if G19605other-alphabetic-hashtable (void) (set! G19605other-alphabetic-hashtable (G19629property-list->hashtable G19583other-alphabetic-property-list))) (hashtable-ref G19605other-alphabetic-hashtable G19744char '#f)))) (set! G19635other-uppercase-property? (lambda (G19746char) (begin (if G19607other-uppercase-hashtable (void) (set! G19607other-uppercase-hashtable (G19629property-list->hashtable G19585other-uppercase-property-list))) (hashtable-ref G19607other-uppercase-hashtable G19746char '#f)))) (set! G19637other-lowercase-property? (lambda (G19748char) (begin (if G19609other-lowercase-hashtable (void) (set! G19609other-lowercase-hashtable (G19629property-list->hashtable G19587other-lowercase-property-list))) (hashtable-ref G19609other-lowercase-hashtable G19748char '#f)))) (set! G19639char-whitespace? (lambda (G19750char) (G19631whitespace-proprety? G19750char))) (set! G19641char-alphabetic? (lambda (G19752char) ((lambda (G19754t) (if (memv G19754t '(Lu Ll Lt Lm Lo Nl)) '#t (if (memv G19754t '(Mn Mc So)) (G19633other-alphabetic-property? G19752char) '#f))) (G19659char-general-category G19752char)))) (set! G19643char-numeric? (lambda (G19755char) (eq? (G19659char-general-category G19755char) 'Nd))) (set! G19645char-upper-case? (lambda (G19757char) ((lambda (G19759t) (if (eqv? G19759t 'Lu) '#t (if (memv G19759t '(Nl So)) (G19635other-uppercase-property? G19757char) '#f))) (G19659char-general-category G19757char)))) (set! G19647char-lower-case? (lambda (G19760char) ((lambda (G19762t) (if (eqv? G19762t 'Ll) '#t (if (memv G19762t '(Lm Mn Nl So)) (G19637other-lowercase-property? G19760char) '#f))) (G19659char-general-category G19760char)))) (set! G19649char-title-case? (lambda (G19763char) (eq? (G19659char-general-category G19763char) 'Lt))) (set! G19651char-upcase (lambda (G19765char) (begin (if G19597upcase-hashtable (void) (set! G19597upcase-hashtable (G19563alist->eq-hash-table G19595upcase-alist))) ((lambda (G19767t) (if G19767t (integer->char G19767t) G19765char)) (hashtable-ref G19597upcase-hashtable (char->integer G19765char)))))) (set! G19653char-downcase (lambda (G19769char) (begin (if G19599downcase-hashtable (void) (set! G19599downcase-hashtable (G19563alist->eq-hash-table G19593downcase-alist))) ((lambda (G19771t) (if G19771t (integer->char G19771t) G19769char)) (hashtable-ref G19599downcase-hashtable (char->integer G19769char)))))) (set! G19655char-titlecase (lambda (G19773char) (begin (if G19601titlecase-hashtable (void) (set! G19601titlecase-hashtable (G19563alist->eq-hash-table G19591titlecase-alist))) ((lambda (G19775t) (if G19775t (integer->char G19775t) (G19651char-upcase G19773char))) (hashtable-ref G19601titlecase-hashtable (char->integer G19773char)))))) (set! G19657char-foldcase (lambda (G19777char) (if ((lambda (G19779t) (if G19779t G19779t (begin '#f (char=? G19777char '#\ı)))) (char=? G19777char '#\İ)) G19777char (G19653char-downcase (G19651char-upcase G19777char))))) (set! G19659char-general-category (lambda (G19781char) (begin (if G19603general-category-hashtable (void) ((lambda (G19783hashtable) (begin (for-each (lambda (G19785category-set) (for-each (lambda (G19787data) (if (number? G19787data) (hashtable-set! G19783hashtable (integer->char G19787data) (car G19785category-set)) (if (pair? G19787data) ((letrec ((G19789loop (lambda (G19791start G19792end) (if (> G19791start G19792end) '() (begin (hashtable-set! G19783hashtable (integer->char G19791start) (car G19785category-set)) (G19789loop (+ G19791start '1) G19792end)))))) G19789loop) (car G19787data) (cdr G19787data)) (void)))) (cdr G19785category-set))) G19589general-category-alist) (set! G19603general-category-hashtable G19783hashtable))) (make-eq-hashtable))) (hashtable-ref G19603general-category-hashtable G19781char 'Cn)))) (set! G19661char-ci=? (lambda G19795char-lst (apply char=? (map G19655char-titlecase G19795char-lst)))) (set! G19663char-ci<? (lambda G19797char-lst (apply char<? (map G19655char-titlecase G19797char-lst)))) (set! G19665char-ci>? (lambda G19799char-lst (apply char>? (map G19655char-titlecase G19799char-lst)))) (set! G19667char-ci<=? (lambda G19801char-lst (apply char<=? (map G19655char-titlecase G19801char-lst)))) (set! G19669char-ci>=? (lambda G19803char-lst (apply char>=? (map G19655char-titlecase G19803char-lst)))) (set! G19671special-uppercase (lambda (G19805char) (begin (if G19613special-uppercase-hashtable (void) (set! G19613special-uppercase-hashtable (G19563alist->eq-hash-table G19579special-uppercase-list))) (hashtable-ref G19613special-uppercase-hashtable (char->integer G19805char) '#f)))) (set! G19673special-lowercase (lambda (G19807char) (begin (if G19615special-lowercase-hashtable (void) (set! G19615special-lowercase-hashtable (G19563alist->eq-hash-table G19577special-lowercase-list))) (hashtable-ref G19615special-lowercase-hashtable (char->integer G19807char) '#f)))) (set! G19675string-downcase (lambda (G19809s) ((lambda (G19811in) (call-with-values (lambda () (open-string-output-port)) (lambda (G19815G19813LAMBDA G19816G19814LAMBDA) ((lambda (G19819get-string G19820out) ((lambda (G19823expanded) (if (string=? G19809s G19823expanded) G19809s G19823expanded)) ((letrec ((G19825loop (lambda (G19827ch G19828prev-char G19829next-char) (if (eof-object? G19827ch) (G19819get-string) (if (if ((lambda (G19833t) (if G19833t G19833t (begin '#f (eof-object? G19829next-char)))) (G19639char-whitespace? G19829next-char)) (if (not (G19639char-whitespace? G19828prev-char)) (begin '#f ((lambda (G19835t) (if G19835t G19835t (begin '#f (char=? G19827ch '#\σ)))) (char=? G19827ch '#\Σ))) '#f) '#f) (begin (display '#\ς G19820out) (G19825loop (read-char G19811in) G19827ch (lookahead-char G19811in))) ((lambda (G19837t) (if G19837t ((lambda (G19839lst) (begin (for-each (lambda (G19841e) (display (G19653char-downcase (integer->char G19841e)) G19820out)) G19839lst) (G19825loop (read-char G19811in) G19827ch (lookahead-char G19811in)))) G19837t) (begin (display (G19653char-downcase G19827ch) G19820out) (G19825loop (read-char G19811in) G19827ch (lookahead-char G19811in))))) (G19673special-lowercase G19827ch))))))) G19825loop) (read-char G19811in) '#\space '#\space))) G19816G19814LAMBDA G19815G19813LAMBDA)))) (open-string-input-port G19809s)))) (set! G19677string-upcase (lambda (G19843s) ((lambda (G19845in) (call-with-values (lambda () (open-string-output-port)) (lambda (G19849G19847LAMBDA G19850G19848LAMBDA) ((lambda (G19853get-string G19854out) ((lambda (G19857expanded) (if (string=? G19843s G19857expanded) G19843s G19857expanded)) ((letrec ((G19859loop (lambda (G19861ch) (if (eof-object? G19861ch) (G19853get-string) ((lambda (G19863t) (if G19863t ((lambda (G19865lst) (begin (for-each (lambda (G19867e) (display (G19651char-upcase (integer->char G19867e)) G19854out)) G19865lst) (G19859loop (read-char G19845in)))) G19863t) (begin (display (G19651char-upcase G19861ch) G19854out) (G19859loop (read-char G19845in))))) (G19671special-uppercase G19861ch)))))) G19859loop) (read-char G19845in)))) G19850G19848LAMBDA G19849G19847LAMBDA)))) (open-string-input-port G19843s)))) (set! G19679string-foldcase (lambda (G19869s) ((lambda (G19871in) (call-with-values (lambda () (open-string-output-port)) (lambda (G19875G19873LAMBDA G19876G19874LAMBDA) ((lambda (G19879get-string G19880out) ((lambda (G19883expanded) (if (string=? G19869s G19883expanded) G19869s G19883expanded)) ((letrec ((G19885loop (lambda (G19887ch) (if (eof-object? G19887ch) (G19879get-string) ((lambda (G19889t) (if G19889t ((lambda (G19891lst) (begin (for-each (lambda (G19893e) (display (G19657char-foldcase (integer->char G19893e)) G19880out)) G19891lst) (G19885loop (read-char G19871in)))) G19889t) (begin (display (G19657char-foldcase G19887ch) G19880out) (G19885loop (read-char G19871in))))) (G19627foldcase G19887ch)))))) G19885loop) (read-char G19871in)))) G19876G19874LAMBDA G19875G19873LAMBDA)))) (open-string-input-port G19869s)))) (set! G19681string-titlecase (lambda (G19895s) ((lambda (G19897input) (call-with-values (lambda () (open-string-output-port)) (lambda (G19901G19899LAMBDA G19902G19900LAMBDA) ((lambda (G19905get-string G19906output) (letrec ((G19909titlecase-first-char (lambda () ((letrec ((G19915loop (lambda (G19917ch) (if (eof-object? G19917ch) (G19905get-string) ((lambda (G19919t) (if (memv G19919t '(Ll Lu Lt)) (begin (display (G19655char-titlecase G19917ch) G19906output) (G19910downcase-subsequence)) (begin (display G19917ch G19906output) (G19915loop (read-char G19897input))))) (G19659char-general-category G19917ch)))))) G19915loop) (read-char G19897input)))) (G19910downcase-subsequence (lambda () ((letrec ((G19920loop (lambda (G19922ch) (if (eof-object? G19922ch) (G19905get-string) ((lambda (G19924t) (if (memv G19924t '(Ll Lu Lt)) (begin (display (G19653char-downcase G19922ch) G19906output) (G19920loop (read-char G19897input))) (if (memv G19924t '(Po Pf)) ((lambda (G19925t) (if (memv G19925t '(#\' #\: #\· #\״ #\’ #\‧)) (begin (display G19922ch G19906output) (G19920loop (read-char G19897input))) (begin (display G19922ch G19906output) (G19909titlecase-first-char)))) G19922ch) (begin (display G19922ch G19906output) (G19909titlecase-first-char))))) (G19659char-general-category G19922ch)))))) G19920loop) (read-char G19897input))))) ((lambda (G19913new) (if (string=? G19895s G19913new) G19895s G19913new)) (G19909titlecase-first-char)))) G19902G19900LAMBDA G19901G19899LAMBDA)))) (open-string-input-port G19895s)))) (set! G19683compose (lambda (G19926string) ((lambda (G19929pair-number->symbol G19931try-compose) (begin (set! G19929pair-number->symbol (lambda (G19972a G19973b) (string->symbol (format '"x~d$~d" G19972a G19973b)))) (set! G19931try-compose (lambda (G19968a G19969b) (hashtable-ref G19625compose-hashable (G19929pair-number->symbol (char->integer G19968a) (char->integer G19969b)) '#f))) (begin (if G19625compose-hashable (void) ((lambda (G19932composition-exclusion-hashtable) (begin (for-each (lambda (G19934x) (hashtable-set! G19932composition-exclusion-hashtable G19934x '#t)) G19567composition-exclusion-list) ((lambda (G19936hashtable) (begin (for-each (lambda (G19938compose-set) (if (if (= (length (cdr G19938compose-set)) '2) (begin '#f (not (hashtable-ref G19932composition-exclusion-hashtable (cadr G19938compose-set)))) '#f) (hashtable-set! G19936hashtable (apply G19929pair-number->symbol (cdr G19938compose-set)) (integer->char (car G19938compose-set))) '())) G19573canonical-decompose-list) (set! G19625compose-hashable G19936hashtable))) (make-eq-hashtable)))) (make-eq-hashtable))) ((lambda (G19940len) ((lambda (G19942first) ((lambda (G19944first-class) ((lambda () ((letrec ((G19946loop (lambda (G19948i G19949starter G19950starter-class G19951starter-pos G19952comp-pos) (if (>= G19948i G19940len) (substring G19926string '0 G19952comp-pos) ((lambda (G19958this) ((lambda (G19960this-class) ((lambda () ((lambda (G19962t) (if G19962t ((lambda (G19964composit) (begin (string-set! G19926string G19951starter-pos G19964composit) (G19946loop (+ G19948i '1) G19964composit (G19703char-combination-class G19964composit) G19951starter-pos G19952comp-pos))) G19962t) (begin (string-set! G19926string G19952comp-pos G19958this) (if (= G19960this-class '0) (G19946loop (+ G19948i '1) G19958this G19960this-class G19952comp-pos (+ G19952comp-pos '1)) (G19946loop (+ G19948i '1) G19949starter G19960this-class G19951starter-pos (+ G19952comp-pos '1)))))) (if ((lambda (G19966t) (if G19966t G19966t (begin '#f (< G19950starter-class G19960this-class)))) (= G19950starter-class '0)) (begin '#f (G19931try-compose G19949starter G19958this)) '#f))))) (G19703char-combination-class G19958this))) (string-ref G19926string G19948i)))))) G19946loop) '1 G19942first G19944first-class '0 '1)))) (if (zero? (G19703char-combination-class G19942first)) '0 '256))) (string-ref G19926string '0))) (string-length G19926string))))) '#f '#f))) (set! G19685string-ci=? (lambda G19976strings (apply string=? (map G19679string-foldcase G19976strings)))) (set! G19687string-ci<? (lambda G19978strings (apply string<? (map G19679string-foldcase G19978strings)))) (set! G19689string-ci>? (lambda G19980strings (apply string>? (map G19679string-foldcase G19980strings)))) (set! G19691string-ci<=? (lambda G19982strings (apply string<=? (map G19679string-foldcase G19982strings)))) (set! G19693string-ci>=? (lambda G19984strings (apply string>=? (map G19679string-foldcase G19984strings)))) (set! G19695canonical-decompose (lambda (G19986char) (begin (if G19619canonical-decompose-hashtable (void) (set! G19619canonical-decompose-hashtable (G19563alist->eq-hash-table G19573canonical-decompose-list))) (hashtable-ref G19619canonical-decompose-hashtable (char->integer G19986char) '#f)))) (set! G19697canonical-decompose-char (lambda (G19988char G19989out) ((lambda (G19992t) (if G19992t ((lambda (G19994lst) (for-each (lambda (G19996ch) (G19697canonical-decompose-char (integer->char G19996ch) G19989out)) G19994lst)) G19992t) (display G19988char G19989out))) (G19695canonical-decompose G19988char)))) (set! G19699compatible-decompose (lambda (G19998char) (begin (if G19621compatible-decompose-hashtable (void) (set! G19621compatible-decompose-hashtable (G19563alist->eq-hash-table G19569compatible-decompose-list))) (hashtable-ref G19621compatible-decompose-hashtable (char->integer G19998char) '#f)))) (set! G19701compatible-decompose-char (lambda (G20000char G20001out) ((lambda (G20004t) (if G20004t ((lambda (G20006lst) (for-each (lambda (G20008ch) (G19701compatible-decompose-char (integer->char G20008ch) G20001out)) G20006lst)) G20004t) ((lambda (G20010t) (if G20010t ((lambda (G20012lst) (for-each (lambda (G20014ch) (G19701compatible-decompose-char (integer->char G20014ch) G20001out)) G20012lst)) G20010t) (display G20000char G20001out))) (G19695canonical-decompose G20000char)))) (G19699compatible-decompose G20000char)))) (set! G19703char-combination-class (lambda (G20016char) (begin (if G19623combination-class-hashtable (void) ((lambda (G20018hashtable) (begin (for-each (lambda (G20020class-set) (for-each (lambda (G20022integer) (hashtable-set! G20018hashtable G20022integer (car G20020class-set))) (cdr G20020class-set))) G19571combination-class-list) (set! G19623combination-class-hashtable G20018hashtable))) (make-eq-hashtable))) (hashtable-ref G19623combination-class-hashtable (char->integer G20016char) '0)))) (set! G19705canonical-sort (lambda (G20024string) ((lambda (G20027find-next-class-zero) (begin (set! G20027find-next-class-zero (lambda (G20052start G20053len) ((letrec ((G20056loop (lambda (G20058index) (if (= G20053len G20058index) G20058index (if (zero? (G19703char-combination-class (string-ref G20024string G20058index))) G20058index (G20056loop (+ G20058index '1))))))) G20056loop) G20052start))) ((lambda (G20028len) (call-with-values (lambda () (open-string-output-port)) (lambda (G20032G20030LAMBDA G20033G20031LAMBDA) ((lambda (G20036get-string G20037output) ((letrec ((G20040loop (lambda (G20042index) (if (= G20042index G20028len) (G20036get-string) (begin (display (string-ref G20024string G20042index) G20037output) ((lambda (G20044next) (begin (if (> (- G20044next G20042index) '1) (for-each (lambda (G20046char) (display G20046char G20037output)) (string->list (G19707string-stable-sort! (lambda (G20048x G20049y) (< (G19703char-combination-class G20048x) (G19703char-combination-class G20049y))) (substring G20024string (+ G20042index '1) G20044next)))) (void)) (G20040loop G20044next))) (G20027find-next-class-zero (+ G20042index '1) G20028len))))))) G20040loop) '0)) G20033G20031LAMBDA G20032G20030LAMBDA)))) (string-length G20024string)))) '#f))) (set! G19707string-stable-sort! (lambda (G20060proc G20061string) ((lambda (G20064len) ((letrec ((G20066loop (lambda (G20068i) (if (= G20068i (- G20064len '1)) G20061string ((letrec ((G20070in-loop (lambda (G20072j) (if (= G20068i G20072j) (G20066loop (+ G20068i '1)) (begin (if (G20060proc (string-ref G20061string G20072j) (string-ref G20061string (- G20072j '1))) ((lambda (G20074tmp) (begin (string-set! G20061string G20072j (string-ref G20061string (- G20072j '1))) (string-set! G20061string (- G20072j '1) G20074tmp))) (string-ref G20061string G20072j)) (void)) (G20070in-loop (- G20072j '1))))))) G20070in-loop) (- G20064len '1)))))) G20066loop) '0)) (string-length G20061string)))) (set! G19709string-normalize-nfd (lambda (G20076s) ((lambda (G20078in) (call-with-values (lambda () (open-string-output-port)) (lambda (G20082G20080LAMBDA G20083G20081LAMBDA) ((lambda (G20086get-string G20087out) ((lambda (G20090expanded) (if (string=? G20076s G20090expanded) G20076s G20090expanded)) ((letrec ((G20092loop (lambda (G20094ch) (if (eof-object? G20094ch) (G19705canonical-sort (G20086get-string)) (begin (G19697canonical-decompose-char G20094ch G20087out) (G20092loop (read-char G20078in))))))) G20092loop) (read-char G20078in)))) G20083G20081LAMBDA G20082G20080LAMBDA)))) (open-string-input-port G20076s)))) (set! G19711string-normalize-nfkd (lambda (G20096s) ((lambda (G20098in) (call-with-values (lambda () (open-string-output-port)) (lambda (G20102G20100LAMBDA G20103G20101LAMBDA) ((lambda (G20106get-string G20107out) ((lambda (G20110expanded) (if (string=? G20096s G20110expanded) G20096s G20110expanded)) ((letrec ((G20112loop (lambda (G20114ch) (if (eof-object? G20114ch) (G19705canonical-sort (G20106get-string)) (begin (G19701compatible-decompose-char G20114ch G20107out) (G20112loop (read-char G20098in))))))) G20112loop) (read-char G20098in)))) G20103G20101LAMBDA G20102G20100LAMBDA)))) (open-string-input-port G20096s)))) (set! G19713string-normalize-nfc (lambda (G20116string) (G19683compose (G19709string-normalize-nfd G20116string)))) (set! G19715string-normalize-nfkc (lambda (G20118string) (G19683compose (G19711string-normalize-nfkd G20118string)))) (begin (set! G20196G19715string-normalize-nfkc G19715string-normalize-nfkc) (set! G20195G19713string-normalize-nfc G19713string-normalize-nfc) (set! G20194G19711string-normalize-nfkd G19711string-normalize-nfkd) (set! G20193G19709string-normalize-nfd G19709string-normalize-nfd) (set! G20192G19707string-stable-sort! G19707string-stable-sort!) (set! G20191G19705canonical-sort G19705canonical-sort) (set! G20190G19703char-combination-class G19703char-combination-class) (set! G20189G19701compatible-decompose-char G19701compatible-decompose-char) (set! G20188G19699compatible-decompose G19699compatible-decompose) (set! G20187G19697canonical-decompose-char G19697canonical-decompose-char) (set! G20186G19695canonical-decompose G19695canonical-decompose) (set! G20185G19693string-ci>=? G19693string-ci>=?) (set! G20184G19691string-ci<=? G19691string-ci<=?) (set! G20183G19689string-ci>? G19689string-ci>?) (set! G20182G19687string-ci<? G19687string-ci<?) (set! G20181G19685string-ci=? G19685string-ci=?) (set! G20180G19683compose G19683compose) (set! G20179G19681string-titlecase G19681string-titlecase) (set! G20178G19679string-foldcase G19679string-foldcase) (set! G20177G19677string-upcase G19677string-upcase) (set! G20176G19675string-downcase G19675string-downcase) (set! G20175G19673special-lowercase G19673special-lowercase) (set! G20174G19671special-uppercase G19671special-uppercase) (set! G20173G19669char-ci>=? G19669char-ci>=?) (set! G20172G19667char-ci<=? G19667char-ci<=?) (set! G20171G19665char-ci>? G19665char-ci>?) (set! G20170G19663char-ci<? G19663char-ci<?) (set! G20169G19661char-ci=? G19661char-ci=?) (set! G20168G19659char-general-category G19659char-general-category) (set! G20167G19657char-foldcase G19657char-foldcase) (set! G20166G19655char-titlecase G19655char-titlecase) (set! G20165G19653char-downcase G19653char-downcase) (set! G20164G19651char-upcase G19651char-upcase) (set! G20163G19649char-title-case? G19649char-title-case?) (set! G20162G19647char-lower-case? G19647char-lower-case?) (set! G20161G19645char-upper-case? G19645char-upper-case?) (set! G20160G19643char-numeric? G19643char-numeric?) (set! G20159G19641char-alphabetic? G19641char-alphabetic?) (set! G20158G19639char-whitespace? G19639char-whitespace?) (set! G20157G19637other-lowercase-property? G19637other-lowercase-property?) (set! G20156G19635other-uppercase-property? G19635other-uppercase-property?) (set! G20155G19633other-alphabetic-property? G19633other-alphabetic-property?) (set! G20154G19631whitespace-proprety? G19631whitespace-proprety?) (set! G20153G19629property-list->hashtable G19629property-list->hashtable) (set! G20152G19627foldcase G19627foldcase) (set! G20151G19625compose-hashable G19625compose-hashable) (set! G20150G19623combination-class-hashtable G19623combination-class-hashtable) (set! G20149G19621compatible-decompose-hashtable G19621compatible-decompose-hashtable) (set! G20148G19619canonical-decompose-hashtable G19619canonical-decompose-hashtable) (set! G20147G19617foldcase-hashtable G19617foldcase-hashtable) (set! G20146G19615special-lowercase-hashtable G19615special-lowercase-hashtable) (set! G20145G19613special-uppercase-hashtable G19613special-uppercase-hashtable) (set! G20144G19611whitespace-hashtable G19611whitespace-hashtable) (set! G20143G19609other-lowercase-hashtable G19609other-lowercase-hashtable) (set! G20142G19607other-uppercase-hashtable G19607other-uppercase-hashtable) (set! G20141G19605other-alphabetic-hashtable G19605other-alphabetic-hashtable) (set! G20140G19603general-category-hashtable G19603general-category-hashtable) (set! G20139G19601titlecase-hashtable G19601titlecase-hashtable) (set! G20138G19599downcase-hashtable G19599downcase-hashtable) (set! G20137G19597upcase-hashtable G19597upcase-hashtable) (set! G20136G19595upcase-alist G19595upcase-alist) (set! G20135G19593downcase-alist G19593downcase-alist) (set! G20134G19591titlecase-alist G19591titlecase-alist) (set! G20133G19589general-category-alist G19589general-category-alist) (set! G20132G19587other-lowercase-property-list G19587other-lowercase-property-list) (set! G20131G19585other-uppercase-property-list G19585other-uppercase-property-list) (set! G20130G19583other-alphabetic-property-list G19583other-alphabetic-property-list) (set! G20129G19581whitespace-property-list G19581whitespace-property-list) (set! G20128G19579special-uppercase-list G19579special-uppercase-list) (set! G20127G19577special-lowercase-list G19577special-lowercase-list) (set! G20126G19575foldcase-list G19575foldcase-list) (set! G20125G19573canonical-decompose-list G19573canonical-decompose-list) (set! G20124G19571combination-class-list G19571combination-class-list) (set! G20123G19569compatible-decompose-list G19569compatible-decompose-list) (set! G20122G19567composition-exclusion-list G19567composition-exclusion-list) (set! G20121G19565ralist->eq-hash-table G19565ralist->eq-hash-table) (set! G20120G19563alist->eq-hash-table G19563alist->eq-hash-table)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (G10534G10444current-primitive-locations (lambda (G21074x) ((lambda (G21076t) (if G21076t (cdr G21076t) '#f)) (assq G21074x '((syntax-error . G18804G12417syntax-error) (syntax-dispatch . G18701G12190syntax-dispatch) (load . G20296G20209load) (interaction-environment . G18813G12435interaction-environment) (string-upcase . G20177G19677string-upcase) (string-titlecase . G20179G19681string-titlecase) (string-normalize-nfkd . G20194G19711string-normalize-nfkd) (string-normalize-nfkc . G20196G19715string-normalize-nfkc) (string-normalize-nfd . G20193G19709string-normalize-nfd) (string-normalize-nfc . G20195G19713string-normalize-nfc) (string-foldcase . G20178G19679string-foldcase) (string-downcase . G20176G19675string-downcase) (string-ci>? . G20183G19689string-ci>?) (string-ci>=? . G20185G19693string-ci>=?) (string-ci=? . G20181G19685string-ci=?) (string-ci<? . G20182G19687string-ci<?) (string-ci<=? . G20184G19691string-ci<=?) (char-whitespace? . G20158G19639char-whitespace?) (char-upper-case? . G20161G19645char-upper-case?) (char-title-case? . G20163G19649char-title-case?) (char-numeric? . G20160G19643char-numeric?) (char-lower-case? . G20162G19647char-lower-case?) (char-general-category . G20168G19659char-general-category) (char-upcase . G20164G19651char-upcase) (char-titlecase . G20166G19655char-titlecase) (char-foldcase . G20167G19657char-foldcase) (char-downcase . G20165G19653char-downcase) (char-ci>? . G20171G19665char-ci>?) (char-ci>=? . G20173G19669char-ci>=?) (char-ci=? . G20169G19661char-ci=?) (char-ci<? . G20170G19663char-ci<?) (char-ci<=? . G20172G19667char-ci<=?) (char-alphabetic? . G20159G19641char-alphabetic?) (make-variable-transformer . G18637G11676make-variable-transformer) (identifier? . G18808G12425identifier?) (generate-temporaries . G18800G12409generate-temporaries) (free-identifier=? . G18801G12411free-identifier=?) (syntax->datum . G18810G12429syntax->datum) (datum->syntax . G18809G12427datum->syntax) (bound-identifier=? . G18802G12413bound-identifier=?) (make-i/o-write-error . G19497G19278make-i/o-write-error) (make-i/o-read-error . G19491G19258make-i/o-read-error) (make-i/o-port-error . G19543G19429make-i/o-port-error) (make-i/o-invalid-position-error . G19503G19299make-i/o-invalid-position-error) (make-i/o-filename-error . G19511G19324make-i/o-filename-error) (make-i/o-file-protection-error . G19519G19348make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G19525G19368make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G19537G19408make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G19531G19388make-i/o-file-already-exists-error) (make-i/o-error . G19485G19238make-i/o-error) (make-i/o-encoding-error . G19557G19474make-i/o-encoding-error) (make-i/o-decoding-error . G19551G19453make-i/o-decoding-error) (i/o-write-error? . G19498G19280i/o-write-error?) (i/o-read-error? . G19492G19260i/o-read-error?) (i/o-port-error? . G19545G19433i/o-port-error?) (i/o-invalid-position-error? . G19505G19303i/o-invalid-position-error?) (i/o-filename-error? . G19513G19328i/o-filename-error?) (i/o-file-protection-error? . G19520G19350i/o-file-protection-error?) (i/o-file-is-read-only-error? . G19526G19370i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G19538G19410i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G19532G19390i/o-file-already-exists-error?) (i/o-error? . G19486G19240i/o-error?) (i/o-error-port . G19546G19435i/o-error-port) (i/o-error-filename . G19514G19330i/o-error-filename) (i/o-encoding-error? . G19559G19478i/o-encoding-error?) (i/o-encoding-error-char . G19560G19480i/o-encoding-error-char) (i/o-decoding-error? . G19552G19455i/o-decoding-error?) (scheme-report-environment . G18791G12391scheme-report-environment) (null-environment . G18790G12389null-environment) (command-line . G20293G20203command-line) (eval . G18793G12395eval) (environment . G18789G12387environment) (who-condition? . G19184G19012who-condition?) (warning? . G19145G18884warning?) (violation? . G19163G18944violation?) (undefined-violation? . G19219G19124undefined-violation?) (syntax-violation? . G19211G19100syntax-violation?) (syntax-violation-subform . G19213G19104syntax-violation-subform) (syntax-violation-form . G19212G19102syntax-violation-form) (syntax-violation . G18807G12423syntax-violation) (serious-condition? . G19151G18904serious-condition?) (non-continuable-violation? . G19191G19034non-continuable-violation?) (message-condition? . G19138G18862message-condition?) (make-who-condition . G19182G19008make-who-condition) (make-warning . G19144G18882make-warning) (make-violation . G19162G18942make-violation) (make-undefined-violation . G19218G19122make-undefined-violation) (make-syntax-violation . G19208G19094make-syntax-violation) (make-serious-condition . G19150G18902make-serious-condition) (make-non-continuable-violation . G19190G19032make-non-continuable-violation) (make-message-condition . G19136G18858make-message-condition) (make-lexical-violation . G19202G19072make-lexical-violation) (make-irritants-condition . G19174G18983make-irritants-condition) (make-implementation-restriction-violation . G19196G19052make-implementation-restriction-violation) (make-error . G19156G18922make-error) (make-assertion-violation . G19168G18962make-assertion-violation) (lexical-violation? . G19203G19074lexical-violation?) (irritants-condition? . G19176G18987irritants-condition?) (implementation-restriction-violation? . G19197G19054implementation-restriction-violation?) (error? . G19157G18924error?) (condition-who . G19185G19014condition-who) (condition-message . G19139G18864condition-message) (condition-irritants . G19177G18989condition-irritants) (assertion-violation? . G19169G18964assertion-violation?)))))) (G11107G10745install-library 'G21031 '(ikarus interaction) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21032 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G20352) (unquote . G20351) (delay . G20344) (or . G20342) (and . G20341) (do . G20340) (cond . G20339) (let* . G20338) (let . G20337) (quasiquote . G20331) (syntax-rules . G20330) (case . G20325) (if . G20321) (letrec . G20319) (lambda . G20316) (quote . G20313) (letrec-syntax . G20311) (let-syntax . G20310) (set! . G20309) (begin . G20307) (define-syntax . G20305) (define . G20304)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21033 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G19688) (string-ci>=? . G19692) (string-ci=? . G19684) (string-ci<? . G19686) (string-ci<=? . G19690) (char-whitespace? . G19638) (char-upper-case? . G19644) (char-numeric? . G19642) (char-lower-case? . G19646) (char-upcase . G19650) (char-downcase . G19652) (char-ci>? . G19664) (char-ci>=? . G19668) (char-ci=? . G19660) (char-ci<? . G19662) (char-ci<=? . G19666) (char-alphabetic? . G19640) (call-with-output-file . G20869) (call-with-input-file . G20868) (write-char . G20867) (write . G20866) (with-output-to-file . G20865) (with-input-from-file . G20864) (read-char . G20863) (read . G20862) (peek-char . G20861) (open-output-file . G20860) (open-input-file . G20859) (newline . G20858) (display . G20857) (close-output-port . G20856) (close-input-port . G20855) (eof-object . G20853) (current-output-port . G20851) (current-input-port . G20850) (output-port? . G20849) (input-port? . G20848) (scheme-report-environment . G12390) (quotient . G20790) (null-environment . G12388) (remainder . G20789) (modulo . G20788) (inexact->exact . G20787) (force . G20786) (exact->inexact . G20785) (string-fill! . G20783) (string-set! . G20782) (set-cdr! . G20781) (set-car! . G20780) (memv . G20774) (memq . G20773) (member . G20771) (assv . G20763) (assq . G20762) (assoc . G20760) (eval . G12394) (zero? . G20563) (vector? . G20562) (vector-set! . G20561) (vector-ref . G20560) (vector-length . G20558) (vector-fill! . G20556) (vector->list . G20555) (vector . G20554) (values . G20553) (truncate . G20552) (tan . G20551) (symbol? . G20550) (symbol->string . G20548) (substring . G20547) (string? . G20546) (string>? . G20545) (string>=? . G20544) (string=? . G20543) (string<? . G20542) (string<=? . G20541) (string-ref . G20540) (string-length . G20539) (string-copy . G20537) (string-append . G20536) (string->symbol . G20535) (string->number . G20534) (string->list . G20533) (string . G20532) (sqrt . G20531) (sin . G20530) (round . G20529) (reverse . G20528) (real? . G20527) (real-part . G20525) (rationalize . G20524) (rational? . G20523) (procedure? . G20521) (positive? . G20520) (pair? . G20519) (odd? . G20518) (numerator . G20517) (number? . G20516) (number->string . G20515) (not . G20513) (negative? . G20512) (min . G20510) (max . G20509) (map . G20508) (make-vector . G20507) (make-string . G20506) (make-rectangular . G20505) (make-polar . G20504) (magnitude . G20503) (log . G20502) (list? . G20501) (list-tail . G20500) (list-ref . G20499) (list->vector . G20498) (list->string . G20497) (list . G20496) (length . G20495) (lcm . G20494) (integer? . G20493) (integer->char . G20491) (inexact? . G20489) (imag-part . G20487) (gcd . G20486) (for-each . G20485) (floor . G20484) (expt . G20482) (exp . G20481) (exact? . G20480) (even? . G20477) (eqv? . G20475) (equal? . G20474) (eq? . G20473) (dynamic-wind . G20472) (denominator . G20465) (cos . G20464) (cons . G20463) (complex? . G20462) (char? . G20461) (char>? . G20460) (char>=? . G20459) (char=? . G20458) (char<? . G20457) (char<=? . G20456) (char->integer . G20455) (ceiling . G20454) (call-with-values . G20453) (call-with-current-continuation . G20451) (cddddr . G20450) (cdddar . G20449) (cddadr . G20448) (cddaar . G20447) (cdaddr . G20446) (cdadar . G20445) (cdaadr . G20444) (cdaaar . G20443) (cadddr . G20442) (caddar . G20441) (cadadr . G20440) (cadaar . G20439) (caaddr . G20438) (caadar . G20437) (caaadr . G20436) (caaaar . G20435) (cdddr . G20434) (cddar . G20433) (cdadr . G20432) (cdaar . G20431) (caddr . G20430) (cadar . G20429) (caadr . G20428) (caaar . G20427) (cddr . G20426) (cdar . G20425) (cadr . G20424) (caar . G20423) (cdr . G20422) (car . G20421) (boolean? . G20420) (atan . G20418) (asin . G20416) (apply . G20415) (append . G20414) (angle . G20413) (acos . G20412) (abs . G20411) (/ . G20410) (* . G20409) (- . G20408) (+ . G20407) (>= . G20406) (> . G20405) (= . G20404) (<= . G20403) (< . G20402) (unquote-splicing . G20352) (unquote . G20351) (delay . G20344) (or . G20342) (and . G20341) (do . G20340) (cond . G20339) (let* . G20338) (let . G20337) (quasiquote . G20331) (syntax-rules . G20330) (case . G20325) (if . G20321) (letrec . G20319) (lambda . G20316) (quote . G20313) (letrec-syntax . G20311) (let-syntax . G20310) (set! . G20309) (begin . G20307) (define-syntax . G20305) (define . G20304)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21034 '(psyntax modules) '() '() '() '() '((module . G20306)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21035 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21036 '(rnrs) '(6) '() '() '() '((regexp? . G20967) (string-upcase . G19676) (string-titlecase . G19680) (string-normalize-nfkd . G19710) (string-normalize-nfkc . G19714) (string-normalize-nfd . G19708) (string-normalize-nfc . G19712) (string-foldcase . G19678) (string-downcase . G19674) (string-ci>? . G19688) (string-ci>=? . G19692) (string-ci=? . G19684) (string-ci<? . G19686) (string-ci<=? . G19690) (char-whitespace? . G19638) (char-upper-case? . G19644) (char-title-case? . G19648) (char-numeric? . G19642) (char-lower-case? . G19646) (char-general-category . G19658) (char-upcase . G19650) (char-titlecase . G19654) (char-foldcase . G19656) (char-downcase . G19652) (char-ci>? . G19664) (char-ci>=? . G19668) (char-ci=? . G19660) (char-ci<? . G19662) (char-ci<=? . G19666) (char-alphabetic? . G19640) (make-variable-transformer . G11675) (identifier? . G12424) (generate-temporaries . G12408) (free-identifier=? . G12410) (syntax->datum . G12428) (datum->syntax . G12426) (bound-identifier=? . G12412) (record-type-descriptor? . G20912) (record-predicate . G20911) (record-mutator . G20910) (record-constructor . G20909) (record-accessor . G20908) (make-record-type-descriptor . G20907) (make-record-constructor-descriptor . G20906) (record? . G20905) (record-type-uid . G20904) (record-type-sealed? . G20903) (record-type-parent . G20902) (record-type-opaque? . G20901) (record-type-name . G20900) (record-type-generative? . G20899) (record-type-field-names . G20898) (record-rtd . G20897) (record-field-mutable? . G20896) (delete-file . G20895) (file-exists? . G20894) (vector-sort! . G20893) (vector-sort . G20892) (list-sort . G20891) (symbol-hash . G20890) (string-ci-hash . G20889) (string-hash . G20888) (equal-hash . G20887) (hashtable-equivalence-function . G20886) (make-hashtable . G20885) (hashtable-hash-function . G20884) (make-eqv-hashtable . G20883) (make-eq-hashtable . G20882) (hashtable? . G20881) (hashtable-update! . G20880) (hashtable-size . G20879) (hashtable-set! . G20878) (hashtable-ref . G20877) (hashtable-mutable? . G20876) (hashtable-keys . G20875) (hashtable-entries . G20874) (hashtable-delete! . G20873) (hashtable-copy . G20872) (hashtable-contains? . G20871) (hashtable-clear! . G20870) (call-with-output-file . G20869) (call-with-input-file . G20868) (write-char . G20867) (write . G20866) (with-output-to-file . G20865) (with-input-from-file . G20864) (read-char . G20863) (read . G20862) (peek-char . G20861) (open-output-file . G20860) (open-input-file . G20859) (newline . G20858) (display . G20857) (close-output-port . G20856) (close-input-port . G20855) (eof-object? . G20854) (eof-object . G20853) (current-error-port . G20852) (current-output-port . G20851) (current-input-port . G20850) (output-port? . G20849) (input-port? . G20848) (utf-8-codec . G20847) (utf-16-codec . G20846) (transcoder-error-handling-mode . G20845) (transcoder-eol-style . G20844) (transcoder-codec . G20843) (transcoded-port . G20842) (textual-port? . G20841) (string->bytevector . G20840) (standard-output-port . G20839) (standard-input-port . G20838) (standard-error-port . G20837) (set-port-position! . G20836) (put-u8 . G20835) (put-string . G20834) (put-datum . G20833) (put-char . G20832) (put-bytevector . G20831) (port? . G20830) (port-transcoder . G20829) (port-position . G20828) (port-has-set-port-position!? . G20827) (port-has-port-position? . G20826) (port-eof? . G20825) (output-port-buffer-mode . G20824) (open-string-output-port . G20823) (open-string-input-port . G20822) (open-file-output-port . G20821) (open-file-input/output-port . G20820) (open-file-input-port . G20819) (open-bytevector-output-port . G20818) (open-bytevector-input-port . G20817) (native-transcoder . G20816) (native-eol-style . G20815) (make-transcoder . G20814) (latin-1-codec . G20813) (make-i/o-write-error . G19277) (make-i/o-read-error . G19257) (make-i/o-port-error . G19428) (make-i/o-invalid-position-error . G19298) (make-i/o-filename-error . G19323) (make-i/o-file-protection-error . G19347) (make-i/o-file-is-read-only-error . G19367) (make-i/o-file-does-not-exist-error . G19407) (make-i/o-file-already-exists-error . G19387) (make-i/o-error . G19237) (make-i/o-encoding-error . G19473) (make-i/o-decoding-error . G19452) (make-custom-textual-output-port . G20812) (make-custom-textual-input/output-port . G20811) (make-custom-textual-input-port . G20810) (make-custom-binary-output-port . G20809) (make-custom-binary-input/output-port . G20808) (make-custom-binary-input-port . G20807) (make-bytevector . G20806) (lookahead-u8 . G20805) (lookahead-char . G20804) (i/o-write-error? . G19279) (i/o-read-error? . G19259) (i/o-port-error? . G19432) (i/o-invalid-position-error? . G19302) (i/o-filename-error? . G19327) (i/o-file-protection-error? . G19349) (i/o-file-is-read-only-error? . G19369) (i/o-file-does-not-exist-error? . G19409) (i/o-file-already-exists-error? . G19389) (i/o-error? . G19239) (i/o-error-port . G19434) (i/o-error-filename . G19329) (i/o-encoding-error? . G19477) (i/o-encoding-error-char . G19479) (i/o-decoding-error? . G19454) (get-u8 . G20803) (get-string-n! . G20802) (get-string-n . G20801) (get-string-all . G20800) (get-line . G20799) (get-datum . G20798) (get-char . G20797) (get-bytevector-some . G20796) (get-bytevector-n! . G20795) (get-bytevector-n . G20794) (get-bytevector-all . G20793) (flush-output-port . G20792) (close-port . G20791) (exit . G20784) (command-line . G20202) (remove . G20779) (remv . G20778) (remp . G20777) (remq . G20776) (partition . G20775) (memv . G20774) (memq . G20773) (memp . G20772) (member . G20771) (exists . G20770) (for-all . G20769) (fold-right . G20768) (fold-left . G20767) (find . G20766) (filter . G20765) (cons* . G20764) (assv . G20763) (assq . G20762) (assp . G20761) (assoc . G20760) (call-with-string-output-port . G20759) (call-with-port . G20758) (call-with-bytevector-output-port . G20757) (bytevector->string . G20756) (buffer-mode? . G20755) (binary-port? . G20754) (with-exception-handler . G20753) (raise-continuable . G20752) (raise . G20751) (make-enumeration . G20750) (enum-set=? . G20749) (enum-set-universe . G20748) (enum-set-union . G20747) (enum-set-subset? . G20746) (enum-set-projection . G20745) (enum-set-member? . G20744) (enum-set-intersection . G20743) (enum-set-indexer . G20742) (enum-set-difference . G20741) (enum-set-constructor . G20740) (enum-set-complement . G20739) (enum-set->list . G20738) (who-condition? . G19011) (warning? . G18883) (violation? . G18943) (undefined-violation? . G19123) (syntax-violation? . G19099) (syntax-violation-subform . G19103) (syntax-violation-form . G19101) (syntax-violation . G12422) (simple-conditions . G20737) (serious-condition? . G18903) (non-continuable-violation? . G19033) (message-condition? . G18861) (make-who-condition . G19007) (make-warning . G18881) (make-violation . G18941) (make-undefined-violation . G19121) (make-syntax-violation . G19093) (make-serious-condition . G18901) (make-non-continuable-violation . G19031) (make-message-condition . G18857) (make-lexical-violation . G19071) (make-irritants-condition . G18982) (make-implementation-restriction-violation . G19051) (make-error . G18921) (make-assertion-violation . G18961) (lexical-violation? . G19073) (irritants-condition? . G18986) (implementation-restriction-violation? . G19053) (error? . G18923) (condition-who . G19013) (condition-predicate . G20736) (condition-message . G18863) (condition-irritants . G18988) (condition-accessor . G20735) (condition . G20734) (assertion-violation? . G18963) (condition? . G20733) (utf32->string . G20732) (utf16->string . G20731) (utf8->string . G20730) (uint-list->bytevector . G20729) (u8-list->bytevector . G20728) (string->utf8 . G20727) (string->utf32 . G20726) (string->utf16 . G20725) (sint-list->bytevector . G20724) (native-endianness . G20723) (bytevector? . G20722) (bytevector=? . G20721) (bytevector-uint-set! . G20720) (bytevector-uint-ref . G20719) (bytevector-u8-set! . G20718) (bytevector-u8-ref . G20717) (bytevector-u64-set! . G20716) (bytevector-u64-ref . G20715) (bytevector-u64-native-set! . G20714) (bytevector-u64-native-ref . G20713) (bytevector-u32-set! . G20712) (bytevector-u32-ref . G20711) (bytevector-u32-native-set! . G20710) (bytevector-u32-native-ref . G20709) (bytevector-u16-set! . G20708) (bytevector-u16-ref . G20707) (bytevector-u16-native-set! . G20706) (bytevector-u16-native-ref . G20705) (bytevector-sint-set! . G20704) (bytevector-sint-ref . G20703) (bytevector-s8-set! . G20702) (bytevector-s8-ref . G20701) (bytevector-s64-set! . G20700) (bytevector-s64-ref . G20699) (bytevector-s64-native-set! . G20698) (bytevector-s64-native-ref . G20697) (bytevector-s32-set! . G20696) (bytevector-s32-ref . G20695) (bytevector-s32-native-set! . G20694) (bytevector-s32-native-ref . G20693) (bytevector-s16-set! . G20692) (bytevector-s16-ref . G20691) (bytevector-s16-native-set! . G20690) (bytevector-s16-native-ref . G20689) (bytevector-length . G20688) (bytevector-ieee-single-ref . G20687) (bytevector-ieee-single-native-set! . G20686) (bytevector-ieee-single-native-ref . G20685) (bytevector-ieee-double-ref . G20684) (bytevector-ieee-double-native-set! . G20683) (bytevector-ieee-double-native-ref . G20682) (bytevector-fill! . G20681) (bytevector-copy! . G20680) (bytevector-copy . G20679) (bytevector->uint-list . G20678) (bytevector->u8-list . G20677) (bytevector->sint-list . G20676) (no-nans-violation? . G20675) (no-infinities-violation? . G20674) (make-no-nans-violation . G20673) (make-no-infinities-violation . G20672) (real->flonum . G20671) (flzero? . G20670) (fltruncate . G20669) (fltan . G20668) (flsqrt . G20667) (flsin . G20666) (flround . G20665) (flpositive? . G20664) (flonum? . G20663) (flodd? . G20662) (flnumerator . G20661) (flnegative? . G20660) (flnan? . G20659) (flmod0 . G20658) (flmod . G20657) (flmin . G20656) (flmax . G20655) (fllog . G20654) (flinteger? . G20653) (flinfinite? . G20652) (flfloor . G20651) (flfinite? . G20650) (flexpt . G20649) (flexp . G20648) (fleven? . G20647) (fldiv0-and-mod0 . G20646) (fldiv0 . G20645) (fldiv-and-mod . G20644) (fldiv . G20643) (fldenominator . G20642) (flcos . G20641) (flceiling . G20640) (flatan . G20639) (flasin . G20638) (flacos . G20637) (flabs . G20636) (fl>? . G20635) (fl>=? . G20634) (fl=? . G20633) (fl<? . G20632) (fl<=? . G20631) (fl/ . G20630) (fl- . G20629) (fl+ . G20628) (fl* . G20627) (fixnum->flonum . G20626) (fxzero? . G20625) (fxxor . G20624) (fxrotate-bit-field . G20623) (fxreverse-bit-field . G20622) (fxpositive? . G20621) (fxodd? . G20620) (fxnot . G20619) (fxnegative? . G20618) (fxmod0 . G20617) (fxmod . G20616) (fxmin . G20615) (fxmax . G20614) (fxlength . G20613) (fxior . G20612) (fxif . G20611) (fxfirst-bit-set . G20610) (fxeven? . G20609) (fxdiv0-and-mod0 . G20608) (fxdiv0 . G20607) (fxdiv-and-mod . G20606) (fxdiv . G20605) (fxcopy-bit-field . G20604) (fxcopy-bit . G20603) (fxbit-set? . G20602) (fxbit-field . G20601) (fxbit-count . G20600) (fxarithmetic-shift-right . G20599) (fxarithmetic-shift-left . G20598) (fxarithmetic-shift . G20597) (fxand . G20596) (fx>? . G20595) (fx>=? . G20594) (fx=? . G20593) (fx<? . G20592) (fx<=? . G20591) (fx-/carry . G20590) (fx- . G20589) (fx+/carry . G20588) (fx+ . G20587) (fx*/carry . G20586) (fx* . G20585) (greatest-fixnum . G20584) (least-fixnum . G20583) (fixnum-width . G20582) (fixnum? . G20581) (bitwise-rotate-bit-field . G20580) (bitwise-reverse-bit-field . G20579) (bitwise-length . G20578) (bitwise-if . G20577) (bitwise-first-bit-set . G20576) (bitwise-copy-bit-field . G20575) (bitwise-copy-bit . G20574) (bitwise-bit-set? . G20573) (bitwise-bit-field . G20572) (bitwise-bit-count . G20571) (bitwise-xor . G20570) (bitwise-ior . G20569) (bitwise-and . G20568) (bitwise-not . G20567) (bitwise-arithmetic-shift-right . G20566) (bitwise-arithmetic-shift-left . G20565) (bitwise-arithmetic-shift . G20564) (zero? . G20563) (vector? . G20562) (vector-set! . G20561) (vector-ref . G20560) (vector-map . G20559) (vector-length . G20558) (vector-for-each . G20557) (vector-fill! . G20556) (vector->list . G20555) (vector . G20554) (values . G20553) (truncate . G20552) (tan . G20551) (symbol? . G20550) (symbol=? . G20549) (symbol->string . G20548) (substring . G20547) (string? . G20546) (string>? . G20545) (string>=? . G20544) (string=? . G20543) (string<? . G20542) (string<=? . G20541) (string-ref . G20540) (string-length . G20539) (string-for-each . G20538) (string-copy . G20537) (string-append . G20536) (string->symbol . G20535) (string->number . G20534) (string->list . G20533) (string . G20532) (sqrt . G20531) (sin . G20530) (round . G20529) (reverse . G20528) (real? . G20527) (real-valued? . G20526) (real-part . G20525) (rationalize . G20524) (rational? . G20523) (rational-valued? . G20522) (procedure? . G20521) (positive? . G20520) (pair? . G20519) (odd? . G20518) (numerator . G20517) (number? . G20516) (number->string . G20515) (null? . G20514) (not . G20513) (negative? . G20512) (nan? . G20511) (min . G20510) (max . G20509) (map . G20508) (make-vector . G20507) (make-string . G20506) (make-rectangular . G20505) (make-polar . G20504) (magnitude . G20503) (log . G20502) (list? . G20501) (list-tail . G20500) (list-ref . G20499) (list->vector . G20498) (list->string . G20497) (list . G20496) (length . G20495) (lcm . G20494) (integer? . G20493) (integer-valued? . G20492) (integer->char . G20491) (infinite? . G20490) (inexact? . G20489) (inexact . G20488) (imag-part . G20487) (gcd . G20486) (for-each . G20485) (floor . G20484) (finite? . G20483) (expt . G20482) (exp . G20481) (exact? . G20480) (exact-integer-sqrt . G20479) (exact . G20478) (even? . G20477) (error . G20476) (eqv? . G20475) (equal? . G20474) (eq? . G20473) (dynamic-wind . G20472) (div0-and-mod0 . G20471) (mod0 . G20470) (div0 . G20469) (div-and-mod . G20468) (mod . G20467) (div . G20466) (denominator . G20465) (cos . G20464) (cons . G20463) (complex? . G20462) (char? . G20461) (char>? . G20460) (char>=? . G20459) (char=? . G20458) (char<? . G20457) (char<=? . G20456) (char->integer . G20455) (ceiling . G20454) (call-with-values . G20453) (call/cc . G20452) (call-with-current-continuation . G20451) (cddddr . G20450) (cdddar . G20449) (cddadr . G20448) (cddaar . G20447) (cdaddr . G20446) (cdadar . G20445) (cdaadr . G20444) (cdaaar . G20443) (cadddr . G20442) (caddar . G20441) (cadadr . G20440) (cadaar . G20439) (caaddr . G20438) (caadar . G20437) (caaadr . G20436) (caaaar . G20435) (cdddr . G20434) (cddar . G20433) (cdadr . G20432) (cdaar . G20431) (caddr . G20430) (cadar . G20429) (caadr . G20428) (caaar . G20427) (cddr . G20426) (cdar . G20425) (cadr . G20424) (caar . G20423) (cdr . G20422) (car . G20421) (boolean? . G20420) (boolean=? . G20419) (atan . G20418) (assertion-violation . G20417) (asin . G20416) (apply . G20415) (append . G20414) (angle . G20413) (acos . G20412) (abs . G20411) (/ . G20410) (* . G20409) (- . G20408) (+ . G20407) (>= . G20406) (> . G20405) (= . G20404) (<= . G20403) (< . G20402) (&no-nans . G20401) (&no-infinities . G20400) (&i/o-encoding . G20399) (&i/o-decoding . G20398) (&i/o-port . G20397) (&i/o-file-does-not-exist . G20396) (&i/o-file-already-exists . G20395) (&i/o-file-is-read-only . G20394) (&i/o-file-protection . G20393) (&i/o-filename . G20392) (&i/o-invalid-position . G20391) (&i/o-write . G20390) (&i/o-read . G20389) (&i/o . G20388) (&undefined . G20387) (&syntax . G20386) (&lexical . G20385) (&implementation-restriction . G20384) (&non-continuable . G20383) (&who . G20382) (&irritants . G20381) (&assertion . G20380) (&violation . G20379) (&error . G20378) (&serious . G20377) (&warning . G20376) (&message . G20375) (&condition . G20374) (define-condition-type . G20373) (define-enumeration . G20372) (define-record-type . G20371) (parent-rtd . G20370) (nongenerative . G20369) (opaque . G20368) (sealed . G20367) (protocol . G20366) (parent . G20365) (immutable . G20364) (mutable . G20363) (fields . G20362) (error-handling-mode . G20361) (file-options . G20360) (buffer-mode . G20359) (eol-style . G20358) (guard . G20357) (unsyntax-splicing . G20354) (unsyntax . G20353) (unquote-splicing . G20352) (unquote . G20351) (_ . G20350) (else . G20349) (=> . G20348) (... . G20347) (assert . G20346) (endianness . G20345) (or . G20342) (and . G20341) (do . G20340) (cond . G20339) (let* . G20338) (let . G20337) (let*-values . G20336) (let-values . G20335) (identifier-syntax . G20334) (with-syntax . G20333) (quasisyntax . G20332) (quasiquote . G20331) (syntax-rules . G20330) (record-constructor-descriptor . G20327) (record-type-descriptor . G20326) (case . G20325) (unless . G20323) (when . G20322) (if . G20321) (letrec* . G20320) (letrec . G20319) (case-lambda . G20317) (lambda . G20316) (syntax . G20315) (syntax-case . G20314) (quote . G20313) (letrec-syntax . G20311) (let-syntax . G20310) (set! . G20309) (begin . G20307) (define-syntax . G20305) (define . G20304)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21037 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G12390) (quotient . G20790) (null-environment . G12388) (remainder . G20789) (modulo . G20788) (inexact->exact . G20787) (force . G20786) (exact->inexact . G20785) (delay . G20344)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21038 '(rnrs control) '(6) '() '() '() '((do . G20340) (unless . G20323) (when . G20322) (case-lambda . G20317)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21039 '(rnrs eval) '(6) '() '() '() '((eval . G12394) (environment . G12386)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21040 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G20781) (set-car! . G20780)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21041 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G20783) (string-set! . G20782)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21042 '(rnrs programs) '(6) '() '() '() '((exit . G20784) (command-line . G20202)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21043 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G11675) (identifier? . G12424) (generate-temporaries . G12408) (free-identifier=? . G12410) (syntax->datum . G12428) (datum->syntax . G12426) (bound-identifier=? . G12412) (syntax-violation . G12422) (unsyntax-splicing . G20354) (unsyntax . G20353) (_ . G20350) (... . G20347) (with-syntax . G20333) (quasisyntax . G20332) (syntax . G20315) (syntax-case . G20314)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21044 '(rnrs files) '(6) '() '() '() '((delete-file . G20895) (file-exists? . G20894) (make-i/o-write-error . G19277) (make-i/o-read-error . G19257) (make-i/o-port-error . G19428) (make-i/o-invalid-position-error . G19298) (make-i/o-filename-error . G19323) (make-i/o-file-protection-error . G19347) (make-i/o-file-is-read-only-error . G19367) (make-i/o-file-does-not-exist-error . G19407) (make-i/o-file-already-exists-error . G19387) (make-i/o-error . G19237) (i/o-write-error? . G19279) (i/o-read-error? . G19259) (i/o-port-error? . G19432) (i/o-invalid-position-error? . G19302) (i/o-filename-error? . G19327) (i/o-file-protection-error? . G19349) (i/o-file-is-read-only-error? . G19369) (i/o-file-does-not-exist-error? . G19409) (i/o-file-already-exists-error? . G19389) (i/o-error? . G19239) (i/o-error-port . G19434) (i/o-error-filename . G19329) (&i/o-port . G20397) (&i/o-file-does-not-exist . G20396) (&i/o-file-already-exists . G20395) (&i/o-file-is-read-only . G20394) (&i/o-file-protection . G20393) (&i/o-filename . G20392) (&i/o-invalid-position . G20391) (&i/o-write . G20390) (&i/o-read . G20389) (&i/o . G20388)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21045 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G20893) (vector-sort . G20892) (list-sort . G20891)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21046 '(rnrs base) '(6) '() '() '() '((zero? . G20563) (vector? . G20562) (vector-set! . G20561) (vector-ref . G20560) (vector-map . G20559) (vector-length . G20558) (vector-for-each . G20557) (vector-fill! . G20556) (vector->list . G20555) (vector . G20554) (values . G20553) (truncate . G20552) (tan . G20551) (symbol? . G20550) (symbol=? . G20549) (symbol->string . G20548) (substring . G20547) (string? . G20546) (string>? . G20545) (string>=? . G20544) (string=? . G20543) (string<? . G20542) (string<=? . G20541) (string-ref . G20540) (string-length . G20539) (string-for-each . G20538) (string-copy . G20537) (string-append . G20536) (string->symbol . G20535) (string->number . G20534) (string->list . G20533) (string . G20532) (sqrt . G20531) (sin . G20530) (round . G20529) (reverse . G20528) (real? . G20527) (real-valued? . G20526) (real-part . G20525) (rationalize . G20524) (rational? . G20523) (rational-valued? . G20522) (procedure? . G20521) (positive? . G20520) (pair? . G20519) (odd? . G20518) (numerator . G20517) (number? . G20516) (number->string . G20515) (null? . G20514) (not . G20513) (negative? . G20512) (nan? . G20511) (min . G20510) (max . G20509) (map . G20508) (make-vector . G20507) (make-string . G20506) (make-rectangular . G20505) (make-polar . G20504) (magnitude . G20503) (log . G20502) (list? . G20501) (list-tail . G20500) (list-ref . G20499) (list->vector . G20498) (list->string . G20497) (list . G20496) (length . G20495) (lcm . G20494) (integer? . G20493) (integer-valued? . G20492) (integer->char . G20491) (infinite? . G20490) (inexact? . G20489) (inexact . G20488) (imag-part . G20487) (gcd . G20486) (for-each . G20485) (floor . G20484) (finite? . G20483) (expt . G20482) (exp . G20481) (exact? . G20480) (exact-integer-sqrt . G20479) (exact . G20478) (even? . G20477) (error . G20476) (eqv? . G20475) (equal? . G20474) (eq? . G20473) (dynamic-wind . G20472) (div0-and-mod0 . G20471) (mod0 . G20470) (div0 . G20469) (div-and-mod . G20468) (mod . G20467) (div . G20466) (denominator . G20465) (cos . G20464) (cons . G20463) (complex? . G20462) (char? . G20461) (char>? . G20460) (char>=? . G20459) (char=? . G20458) (char<? . G20457) (char<=? . G20456) (char->integer . G20455) (ceiling . G20454) (call-with-values . G20453) (call/cc . G20452) (call-with-current-continuation . G20451) (cddddr . G20450) (cdddar . G20449) (cddadr . G20448) (cddaar . G20447) (cdaddr . G20446) (cdadar . G20445) (cdaadr . G20444) (cdaaar . G20443) (cadddr . G20442) (caddar . G20441) (cadadr . G20440) (cadaar . G20439) (caaddr . G20438) (caadar . G20437) (caaadr . G20436) (caaaar . G20435) (cdddr . G20434) (cddar . G20433) (cdadr . G20432) (cdaar . G20431) (caddr . G20430) (cadar . G20429) (caadr . G20428) (caaar . G20427) (cddr . G20426) (cdar . G20425) (cadr . G20424) (caar . G20423) (cdr . G20422) (car . G20421) (boolean? . G20420) (boolean=? . G20419) (atan . G20418) (assertion-violation . G20417) (asin . G20416) (apply . G20415) (append . G20414) (angle . G20413) (acos . G20412) (abs . G20411) (/ . G20410) (* . G20409) (- . G20408) (+ . G20407) (>= . G20406) (> . G20405) (= . G20404) (<= . G20403) (< . G20402) (unquote-splicing . G20352) (unquote . G20351) (_ . G20350) (else . G20349) (=> . G20348) (... . G20347) (assert . G20346) (or . G20342) (and . G20341) (cond . G20339) (let* . G20338) (let . G20337) (let*-values . G20336) (let-values . G20335) (identifier-syntax . G20334) (quasiquote . G20331) (syntax-rules . G20330) (case . G20325) (if . G20321) (letrec* . G20320) (letrec . G20319) (lambda . G20316) (quote . G20313) (letrec-syntax . G20311) (let-syntax . G20310) (set! . G20309) (begin . G20307) (define-syntax . G20305) (define . G20304)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21047 '(rnrs lists) '(6) '() '() '() '((remove . G20779) (remv . G20778) (remp . G20777) (remq . G20776) (partition . G20775) (memv . G20774) (memq . G20773) (memp . G20772) (member . G20771) (exists . G20770) (for-all . G20769) (fold-right . G20768) (fold-left . G20767) (find . G20766) (filter . G20765) (cons* . G20764) (assv . G20763) (assq . G20762) (assp . G20761) (assoc . G20760)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21048 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G20869) (call-with-input-file . G20868) (write-char . G20867) (write . G20866) (with-output-to-file . G20865) (with-input-from-file . G20864) (read-char . G20863) (read . G20862) (peek-char . G20861) (open-output-file . G20860) (open-input-file . G20859) (newline . G20858) (display . G20857) (close-output-port . G20856) (close-input-port . G20855) (eof-object? . G20854) (eof-object . G20853) (current-error-port . G20852) (current-output-port . G20851) (current-input-port . G20850) (output-port? . G20849) (input-port? . G20848) (make-i/o-write-error . G19277) (make-i/o-read-error . G19257) (make-i/o-port-error . G19428) (make-i/o-invalid-position-error . G19298) (make-i/o-filename-error . G19323) (make-i/o-file-protection-error . G19347) (make-i/o-file-is-read-only-error . G19367) (make-i/o-file-does-not-exist-error . G19407) (make-i/o-file-already-exists-error . G19387) (make-i/o-error . G19237) (i/o-write-error? . G19279) (i/o-read-error? . G19259) (i/o-port-error? . G19432) (i/o-invalid-position-error? . G19302) (i/o-filename-error? . G19327) (i/o-file-protection-error? . G19349) (i/o-file-is-read-only-error? . G19369) (i/o-file-does-not-exist-error? . G19409) (i/o-file-already-exists-error? . G19389) (i/o-error? . G19239) (i/o-error-port . G19434) (i/o-error-filename . G19329) (&i/o-port . G20397) (&i/o-file-does-not-exist . G20396) (&i/o-file-already-exists . G20395) (&i/o-file-is-read-only . G20394) (&i/o-file-protection . G20393) (&i/o-filename . G20392) (&i/o-invalid-position . G20391) (&i/o-write . G20390) (&i/o-read . G20389) (&i/o . G20388)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21049 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G20806) (utf32->string . G20732) (utf16->string . G20731) (utf8->string . G20730) (uint-list->bytevector . G20729) (u8-list->bytevector . G20728) (string->utf8 . G20727) (string->utf32 . G20726) (string->utf16 . G20725) (sint-list->bytevector . G20724) (native-endianness . G20723) (bytevector? . G20722) (bytevector=? . G20721) (bytevector-uint-set! . G20720) (bytevector-uint-ref . G20719) (bytevector-u8-set! . G20718) (bytevector-u8-ref . G20717) (bytevector-u64-set! . G20716) (bytevector-u64-ref . G20715) (bytevector-u64-native-set! . G20714) (bytevector-u64-native-ref . G20713) (bytevector-u32-set! . G20712) (bytevector-u32-ref . G20711) (bytevector-u32-native-set! . G20710) (bytevector-u32-native-ref . G20709) (bytevector-u16-set! . G20708) (bytevector-u16-ref . G20707) (bytevector-u16-native-set! . G20706) (bytevector-u16-native-ref . G20705) (bytevector-sint-set! . G20704) (bytevector-sint-ref . G20703) (bytevector-s8-set! . G20702) (bytevector-s8-ref . G20701) (bytevector-s64-set! . G20700) (bytevector-s64-ref . G20699) (bytevector-s64-native-set! . G20698) (bytevector-s64-native-ref . G20697) (bytevector-s32-set! . G20696) (bytevector-s32-ref . G20695) (bytevector-s32-native-set! . G20694) (bytevector-s32-native-ref . G20693) (bytevector-s16-set! . G20692) (bytevector-s16-ref . G20691) (bytevector-s16-native-set! . G20690) (bytevector-s16-native-ref . G20689) (bytevector-length . G20688) (bytevector-ieee-single-ref . G20687) (bytevector-ieee-single-native-set! . G20686) (bytevector-ieee-single-native-ref . G20685) (bytevector-ieee-double-ref . G20684) (bytevector-ieee-double-native-set! . G20683) (bytevector-ieee-double-native-ref . G20682) (bytevector-fill! . G20681) (bytevector-copy! . G20680) (bytevector-copy . G20679) (bytevector->uint-list . G20678) (bytevector->u8-list . G20677) (bytevector->sint-list . G20676) (endianness . G20345)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21050 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G19676) (string-titlecase . G19680) (string-normalize-nfkd . G19710) (string-normalize-nfkc . G19714) (string-normalize-nfd . G19708) (string-normalize-nfc . G19712) (string-foldcase . G19678) (string-downcase . G19674) (string-ci>? . G19688) (string-ci>=? . G19692) (string-ci=? . G19684) (string-ci<? . G19686) (string-ci<=? . G19690) (char-whitespace? . G19638) (char-upper-case? . G19644) (char-title-case? . G19648) (char-numeric? . G19642) (char-lower-case? . G19646) (char-general-category . G19658) (char-upcase . G19650) (char-titlecase . G19654) (char-foldcase . G19656) (char-downcase . G19652) (char-ci>? . G19664) (char-ci>=? . G19668) (char-ci=? . G19660) (char-ci<? . G19662) (char-ci<=? . G19666) (char-alphabetic? . G19640)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21051 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G20753) (raise-continuable . G20752) (raise . G20751) (guard . G20357) (else . G20349) (=> . G20348)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21052 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G20580) (bitwise-reverse-bit-field . G20579) (bitwise-length . G20578) (bitwise-if . G20577) (bitwise-first-bit-set . G20576) (bitwise-copy-bit-field . G20575) (bitwise-copy-bit . G20574) (bitwise-bit-set? . G20573) (bitwise-bit-field . G20572) (bitwise-bit-count . G20571) (bitwise-xor . G20570) (bitwise-ior . G20569) (bitwise-and . G20568) (bitwise-not . G20567) (bitwise-arithmetic-shift-right . G20566) (bitwise-arithmetic-shift-left . G20565) (bitwise-arithmetic-shift . G20564)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21053 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G20625) (fxxor . G20624) (fxrotate-bit-field . G20623) (fxreverse-bit-field . G20622) (fxpositive? . G20621) (fxodd? . G20620) (fxnot . G20619) (fxnegative? . G20618) (fxmod0 . G20617) (fxmod . G20616) (fxmin . G20615) (fxmax . G20614) (fxlength . G20613) (fxior . G20612) (fxif . G20611) (fxfirst-bit-set . G20610) (fxeven? . G20609) (fxdiv0-and-mod0 . G20608) (fxdiv0 . G20607) (fxdiv-and-mod . G20606) (fxdiv . G20605) (fxcopy-bit-field . G20604) (fxcopy-bit . G20603) (fxbit-set? . G20602) (fxbit-field . G20601) (fxbit-count . G20600) (fxarithmetic-shift-right . G20599) (fxarithmetic-shift-left . G20598) (fxarithmetic-shift . G20597) (fxand . G20596) (fx>? . G20595) (fx>=? . G20594) (fx=? . G20593) (fx<? . G20592) (fx<=? . G20591) (fx-/carry . G20590) (fx- . G20589) (fx+/carry . G20588) (fx+ . G20587) (fx*/carry . G20586) (fx* . G20585) (greatest-fixnum . G20584) (least-fixnum . G20583) (fixnum-width . G20582) (fixnum? . G20581)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21054 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G20675) (no-infinities-violation? . G20674) (make-no-nans-violation . G20673) (make-no-infinities-violation . G20672) (real->flonum . G20671) (flzero? . G20670) (fltruncate . G20669) (fltan . G20668) (flsqrt . G20667) (flsin . G20666) (flround . G20665) (flpositive? . G20664) (flonum? . G20663) (flodd? . G20662) (flnumerator . G20661) (flnegative? . G20660) (flnan? . G20659) (flmod0 . G20658) (flmod . G20657) (flmin . G20656) (flmax . G20655) (fllog . G20654) (flinteger? . G20653) (flinfinite? . G20652) (flfloor . G20651) (flfinite? . G20650) (flexpt . G20649) (flexp . G20648) (fleven? . G20647) (fldiv0-and-mod0 . G20646) (fldiv0 . G20645) (fldiv-and-mod . G20644) (fldiv . G20643) (fldenominator . G20642) (flcos . G20641) (flceiling . G20640) (flatan . G20639) (flasin . G20638) (flacos . G20637) (flabs . G20636) (fl>? . G20635) (fl>=? . G20634) (fl=? . G20633) (fl<? . G20632) (fl<=? . G20631) (fl/ . G20630) (fl- . G20629) (fl+ . G20628) (fl* . G20627) (fixnum->flonum . G20626) (&no-nans . G20401) (&no-infinities . G20400)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21055 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G20890) (string-ci-hash . G20889) (string-hash . G20888) (equal-hash . G20887) (hashtable-equivalence-function . G20886) (make-hashtable . G20885) (hashtable-hash-function . G20884) (make-eqv-hashtable . G20883) (make-eq-hashtable . G20882) (hashtable? . G20881) (hashtable-update! . G20880) (hashtable-size . G20879) (hashtable-set! . G20878) (hashtable-ref . G20877) (hashtable-mutable? . G20876) (hashtable-keys . G20875) (hashtable-entries . G20874) (hashtable-delete! . G20873) (hashtable-copy . G20872) (hashtable-contains? . G20871) (hashtable-clear! . G20870)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21056 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G20854) (eof-object . G20853) (current-error-port . G20852) (current-output-port . G20851) (current-input-port . G20850) (output-port? . G20849) (input-port? . G20848) (utf-8-codec . G20847) (utf-16-codec . G20846) (transcoder-error-handling-mode . G20845) (transcoder-eol-style . G20844) (transcoder-codec . G20843) (transcoded-port . G20842) (textual-port? . G20841) (string->bytevector . G20840) (standard-output-port . G20839) (standard-input-port . G20838) (standard-error-port . G20837) (set-port-position! . G20836) (put-u8 . G20835) (put-string . G20834) (put-datum . G20833) (put-char . G20832) (put-bytevector . G20831) (port? . G20830) (port-transcoder . G20829) (port-position . G20828) (port-has-set-port-position!? . G20827) (port-has-port-position? . G20826) (port-eof? . G20825) (output-port-buffer-mode . G20824) (open-string-output-port . G20823) (open-string-input-port . G20822) (open-file-output-port . G20821) (open-file-input/output-port . G20820) (open-file-input-port . G20819) (open-bytevector-output-port . G20818) (open-bytevector-input-port . G20817) (native-transcoder . G20816) (native-eol-style . G20815) (make-transcoder . G20814) (latin-1-codec . G20813) (make-i/o-write-error . G19277) (make-i/o-read-error . G19257) (make-i/o-port-error . G19428) (make-i/o-invalid-position-error . G19298) (make-i/o-filename-error . G19323) (make-i/o-file-protection-error . G19347) (make-i/o-file-is-read-only-error . G19367) (make-i/o-file-does-not-exist-error . G19407) (make-i/o-file-already-exists-error . G19387) (make-i/o-error . G19237) (make-i/o-encoding-error . G19473) (make-i/o-decoding-error . G19452) (make-custom-textual-output-port . G20812) (make-custom-textual-input/output-port . G20811) (make-custom-textual-input-port . G20810) (make-custom-binary-output-port . G20809) (make-custom-binary-input/output-port . G20808) (make-custom-binary-input-port . G20807) (lookahead-u8 . G20805) (lookahead-char . G20804) (i/o-write-error? . G19279) (i/o-read-error? . G19259) (i/o-port-error? . G19432) (i/o-invalid-position-error? . G19302) (i/o-filename-error? . G19327) (i/o-file-protection-error? . G19349) (i/o-file-is-read-only-error? . G19369) (i/o-file-does-not-exist-error? . G19409) (i/o-file-already-exists-error? . G19389) (i/o-error? . G19239) (i/o-error-port . G19434) (i/o-error-filename . G19329) (i/o-encoding-error? . G19477) (i/o-encoding-error-char . G19479) (i/o-decoding-error? . G19454) (get-u8 . G20803) (get-string-n! . G20802) (get-string-n . G20801) (get-string-all . G20800) (get-line . G20799) (get-datum . G20798) (get-char . G20797) (get-bytevector-some . G20796) (get-bytevector-n! . G20795) (get-bytevector-n . G20794) (get-bytevector-all . G20793) (flush-output-port . G20792) (close-port . G20791) (call-with-string-output-port . G20759) (call-with-port . G20758) (call-with-bytevector-output-port . G20757) (bytevector->string . G20756) (buffer-mode? . G20755) (binary-port? . G20754) (&i/o-encoding . G20399) (&i/o-decoding . G20398) (&i/o-port . G20397) (&i/o-file-does-not-exist . G20396) (&i/o-file-already-exists . G20395) (&i/o-file-is-read-only . G20394) (&i/o-file-protection . G20393) (&i/o-filename . G20392) (&i/o-invalid-position . G20391) (&i/o-write . G20390) (&i/o-read . G20389) (&i/o . G20388) (error-handling-mode . G20361) (file-options . G20360) (buffer-mode . G20359) (eol-style . G20358)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21057 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G20750) (enum-set=? . G20749) (enum-set-universe . G20748) (enum-set-union . G20747) (enum-set-subset? . G20746) (enum-set-projection . G20745) (enum-set-member? . G20744) (enum-set-intersection . G20743) (enum-set-indexer . G20742) (enum-set-difference . G20741) (enum-set-constructor . G20740) (enum-set-complement . G20739) (enum-set->list . G20738) (define-enumeration . G20372)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21058 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G19011) (warning? . G18883) (violation? . G18943) (undefined-violation? . G19123) (syntax-violation? . G19099) (syntax-violation-subform . G19103) (syntax-violation-form . G19101) (syntax-violation . G12422) (simple-conditions . G20737) (serious-condition? . G18903) (non-continuable-violation? . G19033) (message-condition? . G18861) (make-who-condition . G19007) (make-warning . G18881) (make-violation . G18941) (make-undefined-violation . G19121) (make-syntax-violation . G19093) (make-serious-condition . G18901) (make-non-continuable-violation . G19031) (make-message-condition . G18857) (make-lexical-violation . G19071) (make-irritants-condition . G18982) (make-implementation-restriction-violation . G19051) (make-error . G18921) (make-assertion-violation . G18961) (lexical-violation? . G19073) (irritants-condition? . G18986) (implementation-restriction-violation? . G19053) (error? . G18923) (condition-who . G19013) (condition-predicate . G20736) (condition-message . G18863) (condition-irritants . G18988) (condition-accessor . G20735) (condition . G20734) (assertion-violation? . G18963) (condition? . G20733) (&undefined . G20387) (&syntax . G20386) (&lexical . G20385) (&implementation-restriction . G20384) (&non-continuable . G20383) (&who . G20382) (&irritants . G20381) (&assertion . G20380) (&violation . G20379) (&error . G20378) (&serious . G20377) (&warning . G20376) (&message . G20375) (&condition . G20374) (define-condition-type . G20373)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21059 '(rnrs records inspection) '(6) '() '() '() '((record? . G20905) (record-type-uid . G20904) (record-type-sealed? . G20903) (record-type-parent . G20902) (record-type-opaque? . G20901) (record-type-name . G20900) (record-type-generative? . G20899) (record-type-field-names . G20898) (record-rtd . G20897) (record-field-mutable? . G20896)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21060 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G20912) (record-predicate . G20911) (record-mutator . G20910) (record-constructor . G20909) (record-accessor . G20908) (make-record-type-descriptor . G20907) (make-record-constructor-descriptor . G20906)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21061 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G20371) (parent-rtd . G20370) (nongenerative . G20369) (opaque . G20368) (sealed . G20367) (protocol . G20366) (parent . G20365) (immutable . G20364) (mutable . G20363) (fields . G20362) (record-constructor-descriptor . G20327) (record-type-descriptor . G20326)) '() values values '#f '#f '#t '#f) (G11107G10745install-library 'G21062 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G21030) (&no-nans-rtd . G21029) (&no-infinities-rcd . G21028) (&no-infinities-rtd . G21027) (&i/o-encoding-rcd . G21026) (&i/o-encoding-rtd . G21025) (&i/o-decoding-rcd . G21024) (&i/o-decoding-rtd . G21023) (&i/o-port-rcd . G21022) (&i/o-port-rtd . G21021) (&i/o-file-does-not-exist-rcd . G21020) (&i/o-file-does-not-exist-rtd . G21019) (&i/o-file-already-exists-rcd . G21018) (&i/o-file-already-exists-rtd . G21017) (&i/o-file-is-read-only-rcd . G21016) (&i/o-file-is-read-only-rtd . G21015) (&i/o-file-protection-rcd . G21014) (&i/o-file-protection-rtd . G21013) (&i/o-filename-rcd . G21012) (&i/o-filename-rtd . G21011) (&i/o-invalid-position-rcd . G21010) (&i/o-invalid-position-rtd . G21009) (&i/o-write-rcd . G21008) (&i/o-write-rtd . G21007) (&i/o-read-rcd . G21006) (&i/o-read-rtd . G21005) (&i/o-rcd . G21004) (&i/o-rtd . G21003) (&undefined-rcd . G21002) (&undefined-rtd . G21001) (&syntax-rcd . G21000) (&syntax-rtd . G20999) (&lexical-rcd . G20998) (&lexical-rtd . G20997) (&implementation-restriction-rcd . G20996) (&implementation-restriction-rtd . G20995) (&non-continuable-rcd . G20994) (&non-continuable-rtd . G20993) (&who-rcd . G20992) (&who-rtd . G20991) (&irritants-rcd . G20990) (&irritants-rtd . G20989) (&assertion-rcd . G20988) (&assertion-rtd . G20987) (&violation-rcd . G20986) (&violation-rtd . G20985) (&error-rcd . G20984) (&error-rtd . G20983) (&serious-rcd . G20982) (&serious-rtd . G20981) (&warning-rcd . G20980) (&warning-rtd . G20979) (&message-rcd . G20978) (&message-rtd . G20977) (&condition-rcd . G20976) (&condition-rtd . G20975) (syntax-error . G12416) (syntax-dispatch . G12189) (pretty-print . G20974) (eval-core . G20973) (set-symbol-value! . G20972) (symbol-value . G20971) (gensym . G20970) (void . G20969) (load . G20208) (interaction-environment . G12434) (char-ready? . G20968) (regexp? . G20967) (read-line . G20966) (dotted-list? . G20965) (circular-list? . G20964) (proper-list? . G20963) (circular-list . G20962) (last . G20961) (last-pair . G20960) (not-pair? . G20959) (split-at! . G20958) (split-at . G20957) (list= . G20956) (list-copy . G20955) (list-tabulate . G20954) (make-list . G20953) (xcons . G20952) (tenth . G20951) (ninth . G20950) (eighth . G20949) (seventh . G20948) (sixth . G20947) (fifth . G20946) (drop-right! . G20945) (drop-right . G20944) (take-right . G20943) (take! . G20942) (drop . G20941) (take . G20940) (car+cdr . G20939) (third . G20938) (second . G20937) (first . G20936) (assoc-ref . G20935) (alist-cons . G20934) (print . G20933) (format . G20932) (write-to-file . G20931) (file->list . G20930) (file->string . G20929) (digit->integer . G20928) (call-with-string-input-port . G20927) (call-with-string-io . G20926) (string-split . G20925) (bytevector-for-each . G20924) (string->regexp . G20923) (rxmatch . G20922) (regexp-replace-all . G20921) (hashtable-for-each . G20920) (readdir . G20919) (get-environment-variables . G20918) (get-environment-variable . G20917) (get-command-line . G20916) (set-source-info! . G20915) (source-info . G20914) (sys-display . G20913) (string-upcase . G19676) (string-titlecase . G19680) (string-normalize-nfkd . G19710) (string-normalize-nfkc . G19714) (string-normalize-nfd . G19708) (string-normalize-nfc . G19712) (string-foldcase . G19678) (string-downcase . G19674) (string-ci>? . G19688) (string-ci>=? . G19692) (string-ci=? . G19684) (string-ci<? . G19686) (string-ci<=? . G19690) (char-whitespace? . G19638) (char-upper-case? . G19644) (char-title-case? . G19648) (char-numeric? . G19642) (char-lower-case? . G19646) (char-general-category . G19658) (char-upcase . G19650) (char-titlecase . G19654) (char-foldcase . G19656) (char-downcase . G19652) (char-ci>? . G19664) (char-ci>=? . G19668) (char-ci=? . G19660) (char-ci<? . G19662) (char-ci<=? . G19666) (char-alphabetic? . G19640) (make-variable-transformer . G11675) (identifier? . G12424) (generate-temporaries . G12408) (free-identifier=? . G12410) (syntax->datum . G12428) (datum->syntax . G12426) (bound-identifier=? . G12412) (record-type-descriptor? . G20912) (record-predicate . G20911) (record-mutator . G20910) (record-constructor . G20909) (record-accessor . G20908) (make-record-type-descriptor . G20907) (make-record-constructor-descriptor . G20906) (record? . G20905) (record-type-uid . G20904) (record-type-sealed? . G20903) (record-type-parent . G20902) (record-type-opaque? . G20901) (record-type-name . G20900) (record-type-generative? . G20899) (record-type-field-names . G20898) (record-rtd . G20897) (record-field-mutable? . G20896) (delete-file . G20895) (file-exists? . G20894) (vector-sort! . G20893) (vector-sort . G20892) (list-sort . G20891) (symbol-hash . G20890) (string-ci-hash . G20889) (string-hash . G20888) (equal-hash . G20887) (hashtable-equivalence-function . G20886) (make-hashtable . G20885) (hashtable-hash-function . G20884) (make-eqv-hashtable . G20883) (make-eq-hashtable . G20882) (hashtable? . G20881) (hashtable-update! . G20880) (hashtable-size . G20879) (hashtable-set! . G20878) (hashtable-ref . G20877) (hashtable-mutable? . G20876) (hashtable-keys . G20875) (hashtable-entries . G20874) (hashtable-delete! . G20873) (hashtable-copy . G20872) (hashtable-contains? . G20871) (hashtable-clear! . G20870) (call-with-output-file . G20869) (call-with-input-file . G20868) (write-char . G20867) (write . G20866) (with-output-to-file . G20865) (with-input-from-file . G20864) (read-char . G20863) (read . G20862) (peek-char . G20861) (open-output-file . G20860) (open-input-file . G20859) (newline . G20858) (display . G20857) (close-output-port . G20856) (close-input-port . G20855) (eof-object? . G20854) (eof-object . G20853) (current-error-port . G20852) (current-output-port . G20851) (current-input-port . G20850) (output-port? . G20849) (input-port? . G20848) (utf-8-codec . G20847) (utf-16-codec . G20846) (transcoder-error-handling-mode . G20845) (transcoder-eol-style . G20844) (transcoder-codec . G20843) (transcoded-port . G20842) (textual-port? . G20841) (string->bytevector . G20840) (standard-output-port . G20839) (standard-input-port . G20838) (standard-error-port . G20837) (set-port-position! . G20836) (put-u8 . G20835) (put-string . G20834) (put-datum . G20833) (put-char . G20832) (put-bytevector . G20831) (port? . G20830) (port-transcoder . G20829) (port-position . G20828) (port-has-set-port-position!? . G20827) (port-has-port-position? . G20826) (port-eof? . G20825) (output-port-buffer-mode . G20824) (open-string-output-port . G20823) (open-string-input-port . G20822) (open-file-output-port . G20821) (open-file-input/output-port . G20820) (open-file-input-port . G20819) (open-bytevector-output-port . G20818) (open-bytevector-input-port . G20817) (native-transcoder . G20816) (native-eol-style . G20815) (make-transcoder . G20814) (latin-1-codec . G20813) (make-i/o-write-error . G19277) (make-i/o-read-error . G19257) (make-i/o-port-error . G19428) (make-i/o-invalid-position-error . G19298) (make-i/o-filename-error . G19323) (make-i/o-file-protection-error . G19347) (make-i/o-file-is-read-only-error . G19367) (make-i/o-file-does-not-exist-error . G19407) (make-i/o-file-already-exists-error . G19387) (make-i/o-error . G19237) (make-i/o-encoding-error . G19473) (make-i/o-decoding-error . G19452) (make-custom-textual-output-port . G20812) (make-custom-textual-input/output-port . G20811) (make-custom-textual-input-port . G20810) (make-custom-binary-output-port . G20809) (make-custom-binary-input/output-port . G20808) (make-custom-binary-input-port . G20807) (make-bytevector . G20806) (lookahead-u8 . G20805) (lookahead-char . G20804) (i/o-write-error? . G19279) (i/o-read-error? . G19259) (i/o-port-error? . G19432) (i/o-invalid-position-error? . G19302) (i/o-filename-error? . G19327) (i/o-file-protection-error? . G19349) (i/o-file-is-read-only-error? . G19369) (i/o-file-does-not-exist-error? . G19409) (i/o-file-already-exists-error? . G19389) (i/o-error? . G19239) (i/o-error-port . G19434) (i/o-error-filename . G19329) (i/o-encoding-error? . G19477) (i/o-encoding-error-char . G19479) (i/o-decoding-error? . G19454) (get-u8 . G20803) (get-string-n! . G20802) (get-string-n . G20801) (get-string-all . G20800) (get-line . G20799) (get-datum . G20798) (get-char . G20797) (get-bytevector-some . G20796) (get-bytevector-n! . G20795) (get-bytevector-n . G20794) (get-bytevector-all . G20793) (flush-output-port . G20792) (close-port . G20791) (scheme-report-environment . G12390) (quotient . G20790) (null-environment . G12388) (remainder . G20789) (modulo . G20788) (inexact->exact . G20787) (force . G20786) (exact->inexact . G20785) (exit . G20784) (command-line . G20202) (string-fill! . G20783) (string-set! . G20782) (set-cdr! . G20781) (set-car! . G20780) (remove . G20779) (remv . G20778) (remp . G20777) (remq . G20776) (partition . G20775) (memv . G20774) (memq . G20773) (memp . G20772) (member . G20771) (exists . G20770) (for-all . G20769) (fold-right . G20768) (fold-left . G20767) (find . G20766) (filter . G20765) (cons* . G20764) (assv . G20763) (assq . G20762) (assp . G20761) (assoc . G20760) (call-with-string-output-port . G20759) (call-with-port . G20758) (call-with-bytevector-output-port . G20757) (bytevector->string . G20756) (buffer-mode? . G20755) (binary-port? . G20754) (with-exception-handler . G20753) (raise-continuable . G20752) (raise . G20751) (eval . G12394) (environment . G12386) (make-enumeration . G20750) (enum-set=? . G20749) (enum-set-universe . G20748) (enum-set-union . G20747) (enum-set-subset? . G20746) (enum-set-projection . G20745) (enum-set-member? . G20744) (enum-set-intersection . G20743) (enum-set-indexer . G20742) (enum-set-difference . G20741) (enum-set-constructor . G20740) (enum-set-complement . G20739) (enum-set->list . G20738) (who-condition? . G19011) (warning? . G18883) (violation? . G18943) (undefined-violation? . G19123) (syntax-violation? . G19099) (syntax-violation-subform . G19103) (syntax-violation-form . G19101) (syntax-violation . G12422) (simple-conditions . G20737) (serious-condition? . G18903) (non-continuable-violation? . G19033) (message-condition? . G18861) (make-who-condition . G19007) (make-warning . G18881) (make-violation . G18941) (make-undefined-violation . G19121) (make-syntax-violation . G19093) (make-serious-condition . G18901) (make-non-continuable-violation . G19031) (make-message-condition . G18857) (make-lexical-violation . G19071) (make-irritants-condition . G18982) (make-implementation-restriction-violation . G19051) (make-error . G18921) (make-assertion-violation . G18961) (lexical-violation? . G19073) (irritants-condition? . G18986) (implementation-restriction-violation? . G19053) (error? . G18923) (condition-who . G19013) (condition-predicate . G20736) (condition-message . G18863) (condition-irritants . G18988) (condition-accessor . G20735) (condition . G20734) (assertion-violation? . G18963) (condition? . G20733) (utf32->string . G20732) (utf16->string . G20731) (utf8->string . G20730) (uint-list->bytevector . G20729) (u8-list->bytevector . G20728) (string->utf8 . G20727) (string->utf32 . G20726) (string->utf16 . G20725) (sint-list->bytevector . G20724) (native-endianness . G20723) (bytevector? . G20722) (bytevector=? . G20721) (bytevector-uint-set! . G20720) (bytevector-uint-ref . G20719) (bytevector-u8-set! . G20718) (bytevector-u8-ref . G20717) (bytevector-u64-set! . G20716) (bytevector-u64-ref . G20715) (bytevector-u64-native-set! . G20714) (bytevector-u64-native-ref . G20713) (bytevector-u32-set! . G20712) (bytevector-u32-ref . G20711) (bytevector-u32-native-set! . G20710) (bytevector-u32-native-ref . G20709) (bytevector-u16-set! . G20708) (bytevector-u16-ref . G20707) (bytevector-u16-native-set! . G20706) (bytevector-u16-native-ref . G20705) (bytevector-sint-set! . G20704) (bytevector-sint-ref . G20703) (bytevector-s8-set! . G20702) (bytevector-s8-ref . G20701) (bytevector-s64-set! . G20700) (bytevector-s64-ref . G20699) (bytevector-s64-native-set! . G20698) (bytevector-s64-native-ref . G20697) (bytevector-s32-set! . G20696) (bytevector-s32-ref . G20695) (bytevector-s32-native-set! . G20694) (bytevector-s32-native-ref . G20693) (bytevector-s16-set! . G20692) (bytevector-s16-ref . G20691) (bytevector-s16-native-set! . G20690) (bytevector-s16-native-ref . G20689) (bytevector-length . G20688) (bytevector-ieee-single-ref . G20687) (bytevector-ieee-single-native-set! . G20686) (bytevector-ieee-single-native-ref . G20685) (bytevector-ieee-double-ref . G20684) (bytevector-ieee-double-native-set! . G20683) (bytevector-ieee-double-native-ref . G20682) (bytevector-fill! . G20681) (bytevector-copy! . G20680) (bytevector-copy . G20679) (bytevector->uint-list . G20678) (bytevector->u8-list . G20677) (bytevector->sint-list . G20676) (no-nans-violation? . G20675) (no-infinities-violation? . G20674) (make-no-nans-violation . G20673) (make-no-infinities-violation . G20672) (real->flonum . G20671) (flzero? . G20670) (fltruncate . G20669) (fltan . G20668) (flsqrt . G20667) (flsin . G20666) (flround . G20665) (flpositive? . G20664) (flonum? . G20663) (flodd? . G20662) (flnumerator . G20661) (flnegative? . G20660) (flnan? . G20659) (flmod0 . G20658) (flmod . G20657) (flmin . G20656) (flmax . G20655) (fllog . G20654) (flinteger? . G20653) (flinfinite? . G20652) (flfloor . G20651) (flfinite? . G20650) (flexpt . G20649) (flexp . G20648) (fleven? . G20647) (fldiv0-and-mod0 . G20646) (fldiv0 . G20645) (fldiv-and-mod . G20644) (fldiv . G20643) (fldenominator . G20642) (flcos . G20641) (flceiling . G20640) (flatan . G20639) (flasin . G20638) (flacos . G20637) (flabs . G20636) (fl>? . G20635) (fl>=? . G20634) (fl=? . G20633) (fl<? . G20632) (fl<=? . G20631) (fl/ . G20630) (fl- . G20629) (fl+ . G20628) (fl* . G20627) (fixnum->flonum . G20626) (fxzero? . G20625) (fxxor . G20624) (fxrotate-bit-field . G20623) (fxreverse-bit-field . G20622) (fxpositive? . G20621) (fxodd? . G20620) (fxnot . G20619) (fxnegative? . G20618) (fxmod0 . G20617) (fxmod . G20616) (fxmin . G20615) (fxmax . G20614) (fxlength . G20613) (fxior . G20612) (fxif . G20611) (fxfirst-bit-set . G20610) (fxeven? . G20609) (fxdiv0-and-mod0 . G20608) (fxdiv0 . G20607) (fxdiv-and-mod . G20606) (fxdiv . G20605) (fxcopy-bit-field . G20604) (fxcopy-bit . G20603) (fxbit-set? . G20602) (fxbit-field . G20601) (fxbit-count . G20600) (fxarithmetic-shift-right . G20599) (fxarithmetic-shift-left . G20598) (fxarithmetic-shift . G20597) (fxand . G20596) (fx>? . G20595) (fx>=? . G20594) (fx=? . G20593) (fx<? . G20592) (fx<=? . G20591) (fx-/carry . G20590) (fx- . G20589) (fx+/carry . G20588) (fx+ . G20587) (fx*/carry . G20586) (fx* . G20585) (greatest-fixnum . G20584) (least-fixnum . G20583) (fixnum-width . G20582) (fixnum? . G20581) (bitwise-rotate-bit-field . G20580) (bitwise-reverse-bit-field . G20579) (bitwise-length . G20578) (bitwise-if . G20577) (bitwise-first-bit-set . G20576) (bitwise-copy-bit-field . G20575) (bitwise-copy-bit . G20574) (bitwise-bit-set? . G20573) (bitwise-bit-field . G20572) (bitwise-bit-count . G20571) (bitwise-xor . G20570) (bitwise-ior . G20569) (bitwise-and . G20568) (bitwise-not . G20567) (bitwise-arithmetic-shift-right . G20566) (bitwise-arithmetic-shift-left . G20565) (bitwise-arithmetic-shift . G20564) (zero? . G20563) (vector? . G20562) (vector-set! . G20561) (vector-ref . G20560) (vector-map . G20559) (vector-length . G20558) (vector-for-each . G20557) (vector-fill! . G20556) (vector->list . G20555) (vector . G20554) (values . G20553) (truncate . G20552) (tan . G20551) (symbol? . G20550) (symbol=? . G20549) (symbol->string . G20548) (substring . G20547) (string? . G20546) (string>? . G20545) (string>=? . G20544) (string=? . G20543) (string<? . G20542) (string<=? . G20541) (string-ref . G20540) (string-length . G20539) (string-for-each . G20538) (string-copy . G20537) (string-append . G20536) (string->symbol . G20535) (string->number . G20534) (string->list . G20533) (string . G20532) (sqrt . G20531) (sin . G20530) (round . G20529) (reverse . G20528) (real? . G20527) (real-valued? . G20526) (real-part . G20525) (rationalize . G20524) (rational? . G20523) (rational-valued? . G20522) (procedure? . G20521) (positive? . G20520) (pair? . G20519) (odd? . G20518) (numerator . G20517) (number? . G20516) (number->string . G20515) (null? . G20514) (not . G20513) (negative? . G20512) (nan? . G20511) (min . G20510) (max . G20509) (map . G20508) (make-vector . G20507) (make-string . G20506) (make-rectangular . G20505) (make-polar . G20504) (magnitude . G20503) (log . G20502) (list? . G20501) (list-tail . G20500) (list-ref . G20499) (list->vector . G20498) (list->string . G20497) (list . G20496) (length . G20495) (lcm . G20494) (integer? . G20493) (integer-valued? . G20492) (integer->char . G20491) (infinite? . G20490) (inexact? . G20489) (inexact . G20488) (imag-part . G20487) (gcd . G20486) (for-each . G20485) (floor . G20484) (finite? . G20483) (expt . G20482) (exp . G20481) (exact? . G20480) (exact-integer-sqrt . G20479) (exact . G20478) (even? . G20477) (error . G20476) (eqv? . G20475) (equal? . G20474) (eq? . G20473) (dynamic-wind . G20472) (div0-and-mod0 . G20471) (mod0 . G20470) (div0 . G20469) (div-and-mod . G20468) (mod . G20467) (div . G20466) (denominator . G20465) (cos . G20464) (cons . G20463) (complex? . G20462) (char? . G20461) (char>? . G20460) (char>=? . G20459) (char=? . G20458) (char<? . G20457) (char<=? . G20456) (char->integer . G20455) (ceiling . G20454) (call-with-values . G20453) (call/cc . G20452) (call-with-current-continuation . G20451) (cddddr . G20450) (cdddar . G20449) (cddadr . G20448) (cddaar . G20447) (cdaddr . G20446) (cdadar . G20445) (cdaadr . G20444) (cdaaar . G20443) (cadddr . G20442) (caddar . G20441) (cadadr . G20440) (cadaar . G20439) (caaddr . G20438) (caadar . G20437) (caaadr . G20436) (caaaar . G20435) (cdddr . G20434) (cddar . G20433) (cdadr . G20432) (cdaar . G20431) (caddr . G20430) (cadar . G20429) (caadr . G20428) (caaar . G20427) (cddr . G20426) (cdar . G20425) (cadr . G20424) (caar . G20423) (cdr . G20422) (car . G20421) (boolean? . G20420) (boolean=? . G20419) (atan . G20418) (assertion-violation . G20417) (asin . G20416) (apply . G20415) (append . G20414) (angle . G20413) (acos . G20412) (abs . G20411) (/ . G20410) (* . G20409) (- . G20408) (+ . G20407) (>= . G20406) (> . G20405) (= . G20404) (<= . G20403) (< . G20402) (&no-nans . G20401) (&no-infinities . G20400) (&i/o-encoding . G20399) (&i/o-decoding . G20398) (&i/o-port . G20397) (&i/o-file-does-not-exist . G20396) (&i/o-file-already-exists . G20395) (&i/o-file-is-read-only . G20394) (&i/o-file-protection . G20393) (&i/o-filename . G20392) (&i/o-invalid-position . G20391) (&i/o-write . G20390) (&i/o-read . G20389) (&i/o . G20388) (&undefined . G20387) (&syntax . G20386) (&lexical . G20385) (&implementation-restriction . G20384) (&non-continuable . G20383) (&who . G20382) (&irritants . G20381) (&assertion . G20380) (&violation . G20379) (&error . G20378) (&serious . G20377) (&warning . G20376) (&message . G20375) (&condition . G20374) (define-condition-type . G20373) (define-enumeration . G20372) (define-record-type . G20371) (parent-rtd . G20370) (nongenerative . G20369) (opaque . G20368) (sealed . G20367) (protocol . G20366) (parent . G20365) (immutable . G20364) (mutable . G20363) (fields . G20362) (error-handling-mode . G20361) (file-options . G20360) (buffer-mode . G20359) (eol-style . G20358) (guard . G20357) (trace-define . G20356) (trace-lambda . G20355) (unsyntax-splicing . G20354) (unsyntax . G20353) (unquote-splicing . G20352) (unquote . G20351) (_ . G20350) (else . G20349) (=> . G20348) (... . G20347) (assert . G20346) (endianness . G20345) (delay . G20344) (time . G20343) (or . G20342) (and . G20341) (do . G20340) (cond . G20339) (let* . G20338) (let . G20337) (let*-values . G20336) (let-values . G20335) (identifier-syntax . G20334) (with-syntax . G20333) (quasisyntax . G20332) (quasiquote . G20331) (syntax-rules . G20330) (include . G20329) (define-struct . G20328) (record-constructor-descriptor . G20327) (record-type-descriptor . G20326) (case . G20325) (parameterize . G20324) (unless . G20323) (when . G20322) (if . G20321) (letrec* . G20320) (letrec . G20319) (type-descriptor . G20318) (case-lambda . G20317) (lambda . G20316) (syntax . G20315) (syntax-case . G20314) (quote . G20313) (foreign-call . G20312) (letrec-syntax . G20311) (let-syntax . G20310) (set! . G20309) (import . G20308) (begin . G20307) (module . G20306) (define-syntax . G20305) (define . G20304)) '((G21030 core-prim . &no-nans-rcd) (G21029 core-prim . &no-nans-rtd) (G21028 core-prim . &no-infinities-rcd) (G21027 core-prim . &no-infinities-rtd) (G21026 core-prim . &i/o-encoding-rcd) (G21025 core-prim . &i/o-encoding-rtd) (G21024 core-prim . &i/o-decoding-rcd) (G21023 core-prim . &i/o-decoding-rtd) (G21022 core-prim . &i/o-port-rcd) (G21021 core-prim . &i/o-port-rtd) (G21020 core-prim . &i/o-file-does-not-exist-rcd) (G21019 core-prim . &i/o-file-does-not-exist-rtd) (G21018 core-prim . &i/o-file-already-exists-rcd) (G21017 core-prim . &i/o-file-already-exists-rtd) (G21016 core-prim . &i/o-file-is-read-only-rcd) (G21015 core-prim . &i/o-file-is-read-only-rtd) (G21014 core-prim . &i/o-file-protection-rcd) (G21013 core-prim . &i/o-file-protection-rtd) (G21012 core-prim . &i/o-filename-rcd) (G21011 core-prim . &i/o-filename-rtd) (G21010 core-prim . &i/o-invalid-position-rcd) (G21009 core-prim . &i/o-invalid-position-rtd) (G21008 core-prim . &i/o-write-rcd) (G21007 core-prim . &i/o-write-rtd) (G21006 core-prim . &i/o-read-rcd) (G21005 core-prim . &i/o-read-rtd) (G21004 core-prim . &i/o-rcd) (G21003 core-prim . &i/o-rtd) (G21002 core-prim . &undefined-rcd) (G21001 core-prim . &undefined-rtd) (G21000 core-prim . &syntax-rcd) (G20999 core-prim . &syntax-rtd) (G20998 core-prim . &lexical-rcd) (G20997 core-prim . &lexical-rtd) (G20996 core-prim . &implementation-restriction-rcd) (G20995 core-prim . &implementation-restriction-rtd) (G20994 core-prim . &non-continuable-rcd) (G20993 core-prim . &non-continuable-rtd) (G20992 core-prim . &who-rcd) (G20991 core-prim . &who-rtd) (G20990 core-prim . &irritants-rcd) (G20989 core-prim . &irritants-rtd) (G20988 core-prim . &assertion-rcd) (G20987 core-prim . &assertion-rtd) (G20986 core-prim . &violation-rcd) (G20985 core-prim . &violation-rtd) (G20984 core-prim . &error-rcd) (G20983 core-prim . &error-rtd) (G20982 core-prim . &serious-rcd) (G20981 core-prim . &serious-rtd) (G20980 core-prim . &warning-rcd) (G20979 core-prim . &warning-rtd) (G20978 core-prim . &message-rcd) (G20977 core-prim . &message-rtd) (G20976 core-prim . &condition-rcd) (G20975 core-prim . &condition-rtd) (G12416 core-prim . syntax-error) (G12189 core-prim . syntax-dispatch) (G20974 core-prim . pretty-print) (G20973 core-prim . eval-core) (G20972 core-prim . set-symbol-value!) (G20971 core-prim . symbol-value) (G20970 core-prim . gensym) (G20969 core-prim . void) (G20208 core-prim . load) (G12434 core-prim . interaction-environment) (G20968 core-prim . char-ready?) (G20967 core-prim . regexp?) (G20966 core-prim . read-line) (G20965 core-prim . dotted-list?) (G20964 core-prim . circular-list?) (G20963 core-prim . proper-list?) (G20962 core-prim . circular-list) (G20961 core-prim . last) (G20960 core-prim . last-pair) (G20959 core-prim . not-pair?) (G20958 core-prim . split-at!) (G20957 core-prim . split-at) (G20956 core-prim . list=) (G20955 core-prim . list-copy) (G20954 core-prim . list-tabulate) (G20953 core-prim . make-list) (G20952 core-prim . xcons) (G20951 core-prim . tenth) (G20950 core-prim . ninth) (G20949 core-prim . eighth) (G20948 core-prim . seventh) (G20947 core-prim . sixth) (G20946 core-prim . fifth) (G20945 core-prim . drop-right!) (G20944 core-prim . drop-right) (G20943 core-prim . take-right) (G20942 core-prim . take!) (G20941 core-prim . drop) (G20940 core-prim . take) (G20939 core-prim . car+cdr) (G20938 core-prim . third) (G20937 core-prim . second) (G20936 core-prim . first) (G20935 core-prim . assoc-ref) (G20934 core-prim . alist-cons) (G20933 core-prim . print) (G20932 core-prim . format) (G20931 core-prim . write-to-file) (G20930 core-prim . file->list) (G20929 core-prim . file->string) (G20928 core-prim . digit->integer) (G20927 core-prim . call-with-string-input-port) (G20926 core-prim . call-with-string-io) (G20925 core-prim . string-split) (G20924 core-prim . bytevector-for-each) (G20923 core-prim . string->regexp) (G20922 core-prim . rxmatch) (G20921 core-prim . regexp-replace-all) (G20920 core-prim . hashtable-for-each) (G20919 core-prim . readdir) (G20918 core-prim . get-environment-variables) (G20917 core-prim . get-environment-variable) (G20916 core-prim . get-command-line) (G20915 core-prim . set-source-info!) (G20914 core-prim . source-info) (G20913 core-prim . sys-display) (G19676 core-prim . string-upcase) (G19680 core-prim . string-titlecase) (G19710 core-prim . string-normalize-nfkd) (G19714 core-prim . string-normalize-nfkc) (G19708 core-prim . string-normalize-nfd) (G19712 core-prim . string-normalize-nfc) (G19678 core-prim . string-foldcase) (G19674 core-prim . string-downcase) (G19688 core-prim . string-ci>?) (G19692 core-prim . string-ci>=?) (G19684 core-prim . string-ci=?) (G19686 core-prim . string-ci<?) (G19690 core-prim . string-ci<=?) (G19638 core-prim . char-whitespace?) (G19644 core-prim . char-upper-case?) (G19648 core-prim . char-title-case?) (G19642 core-prim . char-numeric?) (G19646 core-prim . char-lower-case?) (G19658 core-prim . char-general-category) (G19650 core-prim . char-upcase) (G19654 core-prim . char-titlecase) (G19656 core-prim . char-foldcase) (G19652 core-prim . char-downcase) (G19664 core-prim . char-ci>?) (G19668 core-prim . char-ci>=?) (G19660 core-prim . char-ci=?) (G19662 core-prim . char-ci<?) (G19666 core-prim . char-ci<=?) (G19640 core-prim . char-alphabetic?) (G11675 core-prim . make-variable-transformer) (G12424 core-prim . identifier?) (G12408 core-prim . generate-temporaries) (G12410 core-prim . free-identifier=?) (G12428 core-prim . syntax->datum) (G12426 core-prim . datum->syntax) (G12412 core-prim . bound-identifier=?) (G20912 core-prim . record-type-descriptor?) (G20911 core-prim . record-predicate) (G20910 core-prim . record-mutator) (G20909 core-prim . record-constructor) (G20908 core-prim . record-accessor) (G20907 core-prim . make-record-type-descriptor) (G20906 core-prim . make-record-constructor-descriptor) (G20905 core-prim . record?) (G20904 core-prim . record-type-uid) (G20903 core-prim . record-type-sealed?) (G20902 core-prim . record-type-parent) (G20901 core-prim . record-type-opaque?) (G20900 core-prim . record-type-name) (G20899 core-prim . record-type-generative?) (G20898 core-prim . record-type-field-names) (G20897 core-prim . record-rtd) (G20896 core-prim . record-field-mutable?) (G20895 core-prim . delete-file) (G20894 core-prim . file-exists?) (G20893 core-prim . vector-sort!) (G20892 core-prim . vector-sort) (G20891 core-prim . list-sort) (G20890 core-prim . symbol-hash) (G20889 core-prim . string-ci-hash) (G20888 core-prim . string-hash) (G20887 core-prim . equal-hash) (G20886 core-prim . hashtable-equivalence-function) (G20885 core-prim . make-hashtable) (G20884 core-prim . hashtable-hash-function) (G20883 core-prim . make-eqv-hashtable) (G20882 core-prim . make-eq-hashtable) (G20881 core-prim . hashtable?) (G20880 core-prim . hashtable-update!) (G20879 core-prim . hashtable-size) (G20878 core-prim . hashtable-set!) (G20877 core-prim . hashtable-ref) (G20876 core-prim . hashtable-mutable?) (G20875 core-prim . hashtable-keys) (G20874 core-prim . hashtable-entries) (G20873 core-prim . hashtable-delete!) (G20872 core-prim . hashtable-copy) (G20871 core-prim . hashtable-contains?) (G20870 core-prim . hashtable-clear!) (G20869 core-prim . call-with-output-file) (G20868 core-prim . call-with-input-file) (G20867 core-prim . write-char) (G20866 core-prim . write) (G20865 core-prim . with-output-to-file) (G20864 core-prim . with-input-from-file) (G20863 core-prim . read-char) (G20862 core-prim . read) (G20861 core-prim . peek-char) (G20860 core-prim . open-output-file) (G20859 core-prim . open-input-file) (G20858 core-prim . newline) (G20857 core-prim . display) (G20856 core-prim . close-output-port) (G20855 core-prim . close-input-port) (G20854 core-prim . eof-object?) (G20853 core-prim . eof-object) (G20852 core-prim . current-error-port) (G20851 core-prim . current-output-port) (G20850 core-prim . current-input-port) (G20849 core-prim . output-port?) (G20848 core-prim . input-port?) (G20847 core-prim . utf-8-codec) (G20846 core-prim . utf-16-codec) (G20845 core-prim . transcoder-error-handling-mode) (G20844 core-prim . transcoder-eol-style) (G20843 core-prim . transcoder-codec) (G20842 core-prim . transcoded-port) (G20841 core-prim . textual-port?) (G20840 core-prim . string->bytevector) (G20839 core-prim . standard-output-port) (G20838 core-prim . standard-input-port) (G20837 core-prim . standard-error-port) (G20836 core-prim . set-port-position!) (G20835 core-prim . put-u8) (G20834 core-prim . put-string) (G20833 core-prim . put-datum) (G20832 core-prim . put-char) (G20831 core-prim . put-bytevector) (G20830 core-prim . port?) (G20829 core-prim . port-transcoder) (G20828 core-prim . port-position) (G20827 core-prim . port-has-set-port-position!?) (G20826 core-prim . port-has-port-position?) (G20825 core-prim . port-eof?) (G20824 core-prim . output-port-buffer-mode) (G20823 core-prim . open-string-output-port) (G20822 core-prim . open-string-input-port) (G20821 core-prim . open-file-output-port) (G20820 core-prim . open-file-input/output-port) (G20819 core-prim . open-file-input-port) (G20818 core-prim . open-bytevector-output-port) (G20817 core-prim . open-bytevector-input-port) (G20816 core-prim . native-transcoder) (G20815 core-prim . native-eol-style) (G20814 core-prim . make-transcoder) (G20813 core-prim . latin-1-codec) (G19277 core-prim . make-i/o-write-error) (G19257 core-prim . make-i/o-read-error) (G19428 core-prim . make-i/o-port-error) (G19298 core-prim . make-i/o-invalid-position-error) (G19323 core-prim . make-i/o-filename-error) (G19347 core-prim . make-i/o-file-protection-error) (G19367 core-prim . make-i/o-file-is-read-only-error) (G19407 core-prim . make-i/o-file-does-not-exist-error) (G19387 core-prim . make-i/o-file-already-exists-error) (G19237 core-prim . make-i/o-error) (G19473 core-prim . make-i/o-encoding-error) (G19452 core-prim . make-i/o-decoding-error) (G20812 core-prim . make-custom-textual-output-port) (G20811 core-prim . make-custom-textual-input/output-port) (G20810 core-prim . make-custom-textual-input-port) (G20809 core-prim . make-custom-binary-output-port) (G20808 core-prim . make-custom-binary-input/output-port) (G20807 core-prim . make-custom-binary-input-port) (G20806 core-prim . make-bytevector) (G20805 core-prim . lookahead-u8) (G20804 core-prim . lookahead-char) (G19279 core-prim . i/o-write-error?) (G19259 core-prim . i/o-read-error?) (G19432 core-prim . i/o-port-error?) (G19302 core-prim . i/o-invalid-position-error?) (G19327 core-prim . i/o-filename-error?) (G19349 core-prim . i/o-file-protection-error?) (G19369 core-prim . i/o-file-is-read-only-error?) (G19409 core-prim . i/o-file-does-not-exist-error?) (G19389 core-prim . i/o-file-already-exists-error?) (G19239 core-prim . i/o-error?) (G19434 core-prim . i/o-error-port) (G19329 core-prim . i/o-error-filename) (G19477 core-prim . i/o-encoding-error?) (G19479 core-prim . i/o-encoding-error-char) (G19454 core-prim . i/o-decoding-error?) (G20803 core-prim . get-u8) (G20802 core-prim . get-string-n!) (G20801 core-prim . get-string-n) (G20800 core-prim . get-string-all) (G20799 core-prim . get-line) (G20798 core-prim . get-datum) (G20797 core-prim . get-char) (G20796 core-prim . get-bytevector-some) (G20795 core-prim . get-bytevector-n!) (G20794 core-prim . get-bytevector-n) (G20793 core-prim . get-bytevector-all) (G20792 core-prim . flush-output-port) (G20791 core-prim . close-port) (G12390 core-prim . scheme-report-environment) (G20790 core-prim . quotient) (G12388 core-prim . null-environment) (G20789 core-prim . remainder) (G20788 core-prim . modulo) (G20787 core-prim . inexact->exact) (G20786 core-prim . force) (G20785 core-prim . exact->inexact) (G20784 core-prim . exit) (G20202 core-prim . command-line) (G20783 core-prim . string-fill!) (G20782 core-prim . string-set!) (G20781 core-prim . set-cdr!) (G20780 core-prim . set-car!) (G20779 core-prim . remove) (G20778 core-prim . remv) (G20777 core-prim . remp) (G20776 core-prim . remq) (G20775 core-prim . partition) (G20774 core-prim . memv) (G20773 core-prim . memq) (G20772 core-prim . memp) (G20771 core-prim . member) (G20770 core-prim . exists) (G20769 core-prim . for-all) (G20768 core-prim . fold-right) (G20767 core-prim . fold-left) (G20766 core-prim . find) (G20765 core-prim . filter) (G20764 core-prim . cons*) (G20763 core-prim . assv) (G20762 core-prim . assq) (G20761 core-prim . assp) (G20760 core-prim . assoc) (G20759 core-prim . call-with-string-output-port) (G20758 core-prim . call-with-port) (G20757 core-prim . call-with-bytevector-output-port) (G20756 core-prim . bytevector->string) (G20755 core-prim . buffer-mode?) (G20754 core-prim . binary-port?) (G20753 core-prim . with-exception-handler) (G20752 core-prim . raise-continuable) (G20751 core-prim . raise) (G12394 core-prim . eval) (G12386 core-prim . environment) (G20750 core-prim . make-enumeration) (G20749 core-prim . enum-set=?) (G20748 core-prim . enum-set-universe) (G20747 core-prim . enum-set-union) (G20746 core-prim . enum-set-subset?) (G20745 core-prim . enum-set-projection) (G20744 core-prim . enum-set-member?) (G20743 core-prim . enum-set-intersection) (G20742 core-prim . enum-set-indexer) (G20741 core-prim . enum-set-difference) (G20740 core-prim . enum-set-constructor) (G20739 core-prim . enum-set-complement) (G20738 core-prim . enum-set->list) (G19011 core-prim . who-condition?) (G18883 core-prim . warning?) (G18943 core-prim . violation?) (G19123 core-prim . undefined-violation?) (G19099 core-prim . syntax-violation?) (G19103 core-prim . syntax-violation-subform) (G19101 core-prim . syntax-violation-form) (G12422 core-prim . syntax-violation) (G20737 core-prim . simple-conditions) (G18903 core-prim . serious-condition?) (G19033 core-prim . non-continuable-violation?) (G18861 core-prim . message-condition?) (G19007 core-prim . make-who-condition) (G18881 core-prim . make-warning) (G18941 core-prim . make-violation) (G19121 core-prim . make-undefined-violation) (G19093 core-prim . make-syntax-violation) (G18901 core-prim . make-serious-condition) (G19031 core-prim . make-non-continuable-violation) (G18857 core-prim . make-message-condition) (G19071 core-prim . make-lexical-violation) (G18982 core-prim . make-irritants-condition) (G19051 core-prim . make-implementation-restriction-violation) (G18921 core-prim . make-error) (G18961 core-prim . make-assertion-violation) (G19073 core-prim . lexical-violation?) (G18986 core-prim . irritants-condition?) (G19053 core-prim . implementation-restriction-violation?) (G18923 core-prim . error?) (G19013 core-prim . condition-who) (G20736 core-prim . condition-predicate) (G18863 core-prim . condition-message) (G18988 core-prim . condition-irritants) (G20735 core-prim . condition-accessor) (G20734 core-prim . condition) (G18963 core-prim . assertion-violation?) (G20733 core-prim . condition?) (G20732 core-prim . utf32->string) (G20731 core-prim . utf16->string) (G20730 core-prim . utf8->string) (G20729 core-prim . uint-list->bytevector) (G20728 core-prim . u8-list->bytevector) (G20727 core-prim . string->utf8) (G20726 core-prim . string->utf32) (G20725 core-prim . string->utf16) (G20724 core-prim . sint-list->bytevector) (G20723 core-prim . native-endianness) (G20722 core-prim . bytevector?) (G20721 core-prim . bytevector=?) (G20720 core-prim . bytevector-uint-set!) (G20719 core-prim . bytevector-uint-ref) (G20718 core-prim . bytevector-u8-set!) (G20717 core-prim . bytevector-u8-ref) (G20716 core-prim . bytevector-u64-set!) (G20715 core-prim . bytevector-u64-ref) (G20714 core-prim . bytevector-u64-native-set!) (G20713 core-prim . bytevector-u64-native-ref) (G20712 core-prim . bytevector-u32-set!) (G20711 core-prim . bytevector-u32-ref) (G20710 core-prim . bytevector-u32-native-set!) (G20709 core-prim . bytevector-u32-native-ref) (G20708 core-prim . bytevector-u16-set!) (G20707 core-prim . bytevector-u16-ref) (G20706 core-prim . bytevector-u16-native-set!) (G20705 core-prim . bytevector-u16-native-ref) (G20704 core-prim . bytevector-sint-set!) (G20703 core-prim . bytevector-sint-ref) (G20702 core-prim . bytevector-s8-set!) (G20701 core-prim . bytevector-s8-ref) (G20700 core-prim . bytevector-s64-set!) (G20699 core-prim . bytevector-s64-ref) (G20698 core-prim . bytevector-s64-native-set!) (G20697 core-prim . bytevector-s64-native-ref) (G20696 core-prim . bytevector-s32-set!) (G20695 core-prim . bytevector-s32-ref) (G20694 core-prim . bytevector-s32-native-set!) (G20693 core-prim . bytevector-s32-native-ref) (G20692 core-prim . bytevector-s16-set!) (G20691 core-prim . bytevector-s16-ref) (G20690 core-prim . bytevector-s16-native-set!) (G20689 core-prim . bytevector-s16-native-ref) (G20688 core-prim . bytevector-length) (G20687 core-prim . bytevector-ieee-single-ref) (G20686 core-prim . bytevector-ieee-single-native-set!) (G20685 core-prim . bytevector-ieee-single-native-ref) (G20684 core-prim . bytevector-ieee-double-ref) (G20683 core-prim . bytevector-ieee-double-native-set!) (G20682 core-prim . bytevector-ieee-double-native-ref) (G20681 core-prim . bytevector-fill!) (G20680 core-prim . bytevector-copy!) (G20679 core-prim . bytevector-copy) (G20678 core-prim . bytevector->uint-list) (G20677 core-prim . bytevector->u8-list) (G20676 core-prim . bytevector->sint-list) (G20675 core-prim . no-nans-violation?) (G20674 core-prim . no-infinities-violation?) (G20673 core-prim . make-no-nans-violation) (G20672 core-prim . make-no-infinities-violation) (G20671 core-prim . real->flonum) (G20670 core-prim . flzero?) (G20669 core-prim . fltruncate) (G20668 core-prim . fltan) (G20667 core-prim . flsqrt) (G20666 core-prim . flsin) (G20665 core-prim . flround) (G20664 core-prim . flpositive?) (G20663 core-prim . flonum?) (G20662 core-prim . flodd?) (G20661 core-prim . flnumerator) (G20660 core-prim . flnegative?) (G20659 core-prim . flnan?) (G20658 core-prim . flmod0) (G20657 core-prim . flmod) (G20656 core-prim . flmin) (G20655 core-prim . flmax) (G20654 core-prim . fllog) (G20653 core-prim . flinteger?) (G20652 core-prim . flinfinite?) (G20651 core-prim . flfloor) (G20650 core-prim . flfinite?) (G20649 core-prim . flexpt) (G20648 core-prim . flexp) (G20647 core-prim . fleven?) (G20646 core-prim . fldiv0-and-mod0) (G20645 core-prim . fldiv0) (G20644 core-prim . fldiv-and-mod) (G20643 core-prim . fldiv) (G20642 core-prim . fldenominator) (G20641 core-prim . flcos) (G20640 core-prim . flceiling) (G20639 core-prim . flatan) (G20638 core-prim . flasin) (G20637 core-prim . flacos) (G20636 core-prim . flabs) (G20635 core-prim . fl>?) (G20634 core-prim . fl>=?) (G20633 core-prim . fl=?) (G20632 core-prim . fl<?) (G20631 core-prim . fl<=?) (G20630 core-prim . fl/) (G20629 core-prim . fl-) (G20628 core-prim . fl+) (G20627 core-prim . fl*) (G20626 core-prim . fixnum->flonum) (G20625 core-prim . fxzero?) (G20624 core-prim . fxxor) (G20623 core-prim . fxrotate-bit-field) (G20622 core-prim . fxreverse-bit-field) (G20621 core-prim . fxpositive?) (G20620 core-prim . fxodd?) (G20619 core-prim . fxnot) (G20618 core-prim . fxnegative?) (G20617 core-prim . fxmod0) (G20616 core-prim . fxmod) (G20615 core-prim . fxmin) (G20614 core-prim . fxmax) (G20613 core-prim . fxlength) (G20612 core-prim . fxior) (G20611 core-prim . fxif) (G20610 core-prim . fxfirst-bit-set) (G20609 core-prim . fxeven?) (G20608 core-prim . fxdiv0-and-mod0) (G20607 core-prim . fxdiv0) (G20606 core-prim . fxdiv-and-mod) (G20605 core-prim . fxdiv) (G20604 core-prim . fxcopy-bit-field) (G20603 core-prim . fxcopy-bit) (G20602 core-prim . fxbit-set?) (G20601 core-prim . fxbit-field) (G20600 core-prim . fxbit-count) (G20599 core-prim . fxarithmetic-shift-right) (G20598 core-prim . fxarithmetic-shift-left) (G20597 core-prim . fxarithmetic-shift) (G20596 core-prim . fxand) (G20595 core-prim . fx>?) (G20594 core-prim . fx>=?) (G20593 core-prim . fx=?) (G20592 core-prim . fx<?) (G20591 core-prim . fx<=?) (G20590 core-prim . fx-/carry) (G20589 core-prim . fx-) (G20588 core-prim . fx+/carry) (G20587 core-prim . fx+) (G20586 core-prim . fx*/carry) (G20585 core-prim . fx*) (G20584 core-prim . greatest-fixnum) (G20583 core-prim . least-fixnum) (G20582 core-prim . fixnum-width) (G20581 core-prim . fixnum?) (G20580 core-prim . bitwise-rotate-bit-field) (G20579 core-prim . bitwise-reverse-bit-field) (G20578 core-prim . bitwise-length) (G20577 core-prim . bitwise-if) (G20576 core-prim . bitwise-first-bit-set) (G20575 core-prim . bitwise-copy-bit-field) (G20574 core-prim . bitwise-copy-bit) (G20573 core-prim . bitwise-bit-set?) (G20572 core-prim . bitwise-bit-field) (G20571 core-prim . bitwise-bit-count) (G20570 core-prim . bitwise-xor) (G20569 core-prim . bitwise-ior) (G20568 core-prim . bitwise-and) (G20567 core-prim . bitwise-not) (G20566 core-prim . bitwise-arithmetic-shift-right) (G20565 core-prim . bitwise-arithmetic-shift-left) (G20564 core-prim . bitwise-arithmetic-shift) (G20563 core-prim . zero?) (G20562 core-prim . vector?) (G20561 core-prim . vector-set!) (G20560 core-prim . vector-ref) (G20559 core-prim . vector-map) (G20558 core-prim . vector-length) (G20557 core-prim . vector-for-each) (G20556 core-prim . vector-fill!) (G20555 core-prim . vector->list) (G20554 core-prim . vector) (G20553 core-prim . values) (G20552 core-prim . truncate) (G20551 core-prim . tan) (G20550 core-prim . symbol?) (G20549 core-prim . symbol=?) (G20548 core-prim . symbol->string) (G20547 core-prim . substring) (G20546 core-prim . string?) (G20545 core-prim . string>?) (G20544 core-prim . string>=?) (G20543 core-prim . string=?) (G20542 core-prim . string<?) (G20541 core-prim . string<=?) (G20540 core-prim . string-ref) (G20539 core-prim . string-length) (G20538 core-prim . string-for-each) (G20537 core-prim . string-copy) (G20536 core-prim . string-append) (G20535 core-prim . string->symbol) (G20534 core-prim . string->number) (G20533 core-prim . string->list) (G20532 core-prim . string) (G20531 core-prim . sqrt) (G20530 core-prim . sin) (G20529 core-prim . round) (G20528 core-prim . reverse) (G20527 core-prim . real?) (G20526 core-prim . real-valued?) (G20525 core-prim . real-part) (G20524 core-prim . rationalize) (G20523 core-prim . rational?) (G20522 core-prim . rational-valued?) (G20521 core-prim . procedure?) (G20520 core-prim . positive?) (G20519 core-prim . pair?) (G20518 core-prim . odd?) (G20517 core-prim . numerator) (G20516 core-prim . number?) (G20515 core-prim . number->string) (G20514 core-prim . null?) (G20513 core-prim . not) (G20512 core-prim . negative?) (G20511 core-prim . nan?) (G20510 core-prim . min) (G20509 core-prim . max) (G20508 core-prim . map) (G20507 core-prim . make-vector) (G20506 core-prim . make-string) (G20505 core-prim . make-rectangular) (G20504 core-prim . make-polar) (G20503 core-prim . magnitude) (G20502 core-prim . log) (G20501 core-prim . list?) (G20500 core-prim . list-tail) (G20499 core-prim . list-ref) (G20498 core-prim . list->vector) (G20497 core-prim . list->string) (G20496 core-prim . list) (G20495 core-prim . length) (G20494 core-prim . lcm) (G20493 core-prim . integer?) (G20492 core-prim . integer-valued?) (G20491 core-prim . integer->char) (G20490 core-prim . infinite?) (G20489 core-prim . inexact?) (G20488 core-prim . inexact) (G20487 core-prim . imag-part) (G20486 core-prim . gcd) (G20485 core-prim . for-each) (G20484 core-prim . floor) (G20483 core-prim . finite?) (G20482 core-prim . expt) (G20481 core-prim . exp) (G20480 core-prim . exact?) (G20479 core-prim . exact-integer-sqrt) (G20478 core-prim . exact) (G20477 core-prim . even?) (G20476 core-prim . error) (G20475 core-prim . eqv?) (G20474 core-prim . equal?) (G20473 core-prim . eq?) (G20472 core-prim . dynamic-wind) (G20471 core-prim . div0-and-mod0) (G20470 core-prim . mod0) (G20469 core-prim . div0) (G20468 core-prim . div-and-mod) (G20467 core-prim . mod) (G20466 core-prim . div) (G20465 core-prim . denominator) (G20464 core-prim . cos) (G20463 core-prim . cons) (G20462 core-prim . complex?) (G20461 core-prim . char?) (G20460 core-prim . char>?) (G20459 core-prim . char>=?) (G20458 core-prim . char=?) (G20457 core-prim . char<?) (G20456 core-prim . char<=?) (G20455 core-prim . char->integer) (G20454 core-prim . ceiling) (G20453 core-prim . call-with-values) (G20452 core-prim . call/cc) (G20451 core-prim . call-with-current-continuation) (G20450 core-prim . cddddr) (G20449 core-prim . cdddar) (G20448 core-prim . cddadr) (G20447 core-prim . cddaar) (G20446 core-prim . cdaddr) (G20445 core-prim . cdadar) (G20444 core-prim . cdaadr) (G20443 core-prim . cdaaar) (G20442 core-prim . cadddr) (G20441 core-prim . caddar) (G20440 core-prim . cadadr) (G20439 core-prim . cadaar) (G20438 core-prim . caaddr) (G20437 core-prim . caadar) (G20436 core-prim . caaadr) (G20435 core-prim . caaaar) (G20434 core-prim . cdddr) (G20433 core-prim . cddar) (G20432 core-prim . cdadr) (G20431 core-prim . cdaar) (G20430 core-prim . caddr) (G20429 core-prim . cadar) (G20428 core-prim . caadr) (G20427 core-prim . caaar) (G20426 core-prim . cddr) (G20425 core-prim . cdar) (G20424 core-prim . cadr) (G20423 core-prim . caar) (G20422 core-prim . cdr) (G20421 core-prim . car) (G20420 core-prim . boolean?) (G20419 core-prim . boolean=?) (G20418 core-prim . atan) (G20417 core-prim . assertion-violation) (G20416 core-prim . asin) (G20415 core-prim . apply) (G20414 core-prim . append) (G20413 core-prim . angle) (G20412 core-prim . acos) (G20411 core-prim . abs) (G20410 core-prim . /) (G20409 core-prim . *) (G20408 core-prim . -) (G20407 core-prim . +) (G20406 core-prim . >=) (G20405 core-prim . >) (G20404 core-prim . =) (G20403 core-prim . <=) (G20402 core-prim . <) (G20401 $core-rtd &no-nans-rtd &no-nans-rcd) (G20400 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G20399 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G20398 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G20397 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G20396 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G20395 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G20394 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G20393 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G20392 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G20391 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G20390 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G20389 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G20388 $core-rtd &i/o-rtd &i/o-rcd) (G20387 $core-rtd &undefined-rtd &undefined-rcd) (G20386 $core-rtd &syntax-rtd &syntax-rcd) (G20385 $core-rtd &lexical-rtd &lexical-rcd) (G20384 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G20383 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G20382 $core-rtd &who-rtd &who-rcd) (G20381 $core-rtd &irritants-rtd &irritants-rcd) (G20380 $core-rtd &assertion-rtd &assertion-rcd) (G20379 $core-rtd &violation-rtd &violation-rcd) (G20378 $core-rtd &error-rtd &error-rcd) (G20377 $core-rtd &serious-rtd &serious-rcd) (G20376 $core-rtd &warning-rtd &warning-rcd) (G20375 $core-rtd &message-rtd &message-rcd) (G20374 $core-rtd &condition-rtd &condition-rcd) (G20373 macro . define-condition-type) (G20372 macro . define-enumeration) (G20371 macro . define-record-type) (G20370 macro . parent-rtd) (G20369 macro . nongenerative) (G20368 macro . opaque) (G20367 macro . sealed) (G20366 macro . protocol) (G20365 macro . parent) (G20364 macro . immutable) (G20363 macro . mutable) (G20362 macro . fields) (G20361 macro . error-handling-mode) (G20360 macro . file-options) (G20359 macro . buffer-mode) (G20358 macro . eol-style) (G20357 macro . guard) (G20356 macro . trace-define) (G20355 macro . trace-lambda) (G20354 macro . unsyntax-splicing) (G20353 macro . unsyntax) (G20352 macro . unquote-splicing) (G20351 macro . unquote) (G20350 macro . _) (G20349 macro . else) (G20348 macro . =>) (G20347 macro . ...) (G20346 macro . assert) (G20345 macro . endianness) (G20344 macro . delay) (G20343 macro . time) (G20342 macro . or) (G20341 macro . and) (G20340 macro . do) (G20339 macro . cond) (G20338 macro . let*) (G20337 macro . let) (G20336 macro . let*-values) (G20335 macro . let-values) (G20334 macro . identifier-syntax) (G20333 macro . with-syntax) (G20332 macro . quasisyntax) (G20331 macro . quasiquote) (G20330 macro . syntax-rules) (G20329 macro . include) (G20328 macro . define-struct) (G20327 core-macro . record-constructor-descriptor) (G20326 core-macro . record-type-descriptor) (G20325 core-macro . case) (G20324 core-macro . parameterize) (G20323 core-macro . unless) (G20322 core-macro . when) (G20321 core-macro . if) (G20320 core-macro . letrec*) (G20319 core-macro . letrec) (G20318 core-macro . type-descriptor) (G20317 core-macro . case-lambda) (G20316 core-macro . lambda) (G20315 core-macro . syntax) (G20314 core-macro . syntax-case) (G20313 core-macro . quote) (G20312 core-macro . foreign-call) (G20311 letrec-syntax) (G20310 let-syntax) (G20309 set!) (G20308 import) (G20307 begin) (G20306 module) (G20305 define-syntax) (G20304 define)) values values '#f '#f '#f '#f) (G11107G10745install-library 'G21063 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G20974) (eval-core . G20973) (set-symbol-value! . G20972) (symbol-value . G20971) (gensym . G20970) (void . G20969)) '() values values '#f '#f '#f '#f) (G11107G10745install-library 'G21064 '(mosh) '() '() '() '() '((get-command-line . G20916) (set-source-info! . G20915) (source-info . G20914) (sys-display . G20913)) '() values values '#f '#f '#f '#f) (G11107G10745install-library 'G21065 '(mosh file) '() '() '() '() '((read-line . G20966) (write-to-file . G20931) (file->list . G20930) (file->string . G20929)) '() values values '#f '#f '#f '#f) (G11107G10745install-library 'G21066 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G20924)) '() values values '#f '#f '#f '#f) (G11107G10745install-library 'G21067 '(mosh number) '() '() '() '() '((digit->integer . G20928)) '() values values '#f '#f '#f '#f) (G11107G10745install-library 'G21068 '(mosh string) '() '() '() '() '((print . G20933) (format . G20932) (call-with-string-input-port . G20927) (call-with-string-io . G20926) (string-split . G20925) (string->regexp . G20923)) '() values values '#f '#f '#f '#f) (G11107G10745install-library 'G21069 '(mosh list) '() '() '() '() '((assoc-ref . G20935)) '() values values '#f '#f '#f '#f) (G11107G10745install-library 'G21070 '(mosh regexp) '() '() '() '() '((rxmatch . G20922) (regexp-replace-all . G20921)) '() values values '#f '#f '#f '#f) (G11107G10745install-library 'G21071 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G20920)) '() values values '#f '#f '#f '#f) (G11107G10745install-library 'G21072 '(system) '() '() '() '() '((readdir . G20919) (get-environment-variables . G20918) (get-environment-variable . G20917)) '() values values '#f '#f '#f '#f) (G11107G10745install-library 'G21073 '(srfi-1) '() '() '() '() '((dotted-list? . G20965) (circular-list? . G20964) (proper-list? . G20963) (circular-list . G20962) (last . G20961) (last-pair . G20960) (not-pair? . G20959) (split-at! . G20958) (split-at . G20957) (list= . G20956) (list-copy . G20955) (list-tabulate . G20954) (make-list . G20953) (xcons . G20952) (tenth . G20951) (ninth . G20950) (eighth . G20949) (seventh . G20948) (sixth . G20947) (fifth . G20946) (drop-right! . G20945) (drop-right . G20944) (take-right . G20943) (take! . G20942) (drop . G20941) (take . G20940) (car+cdr . G20939) (third . G20938) (second . G20937) (first . G20936) (alist-cons . G20934)) '() values values '#f '#f '#f '#f))
(begin (define G20291G20199for-each-with-index '#f) (define G20292G20201trace-printer '#f) (define G20293G20203command-line '#f) (define G20294G20205local-library-path '#f) (define G20295G20207load/args '#f) (define G20296G20209load '#f) (define G20297G20211ironscheme-build '#f) (define G20298G20213eval-top-level '#f) (define G20299G20215compile-system-libraries '#f) (define G20300G20217compile '#f) (define G20301G20219compile->closure '#f) (define G20302G20221load-r6rs-top-level '#f) ((lambda (G20199for-each-with-index G20201trace-printer G20203command-line G20205local-library-path G20207load/args G20209load G20211ironscheme-build G20213eval-top-level G20215compile-system-libraries G20217compile G20219compile->closure G20221load-r6rs-top-level) (begin (set! G20199for-each-with-index (lambda (G20232proc G20233lst) (letrec ((G20236loop (lambda (G20238i G20239lst) (if (null? G20239lst) (if '#f '#f (void)) (begin (G20232proc G20238i (car G20239lst)) (G20236loop (+ G20238i '1) (cdr G20239lst))))))) (G20236loop '1 G20233lst)))) (set! G20201trace-printer (G10438G10233make-parameter write)) (set! G20203command-line (G10438G10233make-parameter (get-command-line))) (set! G20205local-library-path (lambda (G20242filename) (cons '"." (G11091G10713library-path)))) (set! G20207load/args (lambda (G20244filename . G20246args) (begin (apply G20221load-r6rs-top-level G20244filename 'load G20246args) (void)))) (set! G20209load (lambda (G20248filename) (begin (apply G20221load-r6rs-top-level G20248filename 'load (G20203command-line)) (void)))) (set! G20211ironscheme-build (lambda () (G20209load '"ironscheme-buildscript.ss"))) (set! G20213eval-top-level (lambda (G20250x) (G18793G12395eval G20250x (G18813G12435interaction-environment)))) (set! G20215compile-system-libraries (lambda () (G20213eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G20217compile (lambda (G20252filename) (G20221load-r6rs-top-level G20252filename 'compile))) (set! G20219compile->closure (lambda (G20254filename) (G20221load-r6rs-top-level G20254filename 'closure))) (set! G20221load-r6rs-top-level (lambda (G20256filename G20257how . G20260args) ((lambda (G20264G20262library-path G20265G20263library-path) ((lambda (G20268swap) (dynamic-wind G20268swap (lambda () ((lambda (G20270x*) ((lambda (G20272t) (if (eqv? G20272t 'closure) (G18812G12433pre-compile-r6rs-top-level G20270x*) (if (eqv? G20272t 'load) ((lambda (G20275G20273command-line G20276G20274command-line) ((lambda (G20279swap) (dynamic-wind G20279swap (lambda () ((G18811G12431compile-r6rs-top-level G20270x*))) G20279swap)) (lambda () ((lambda (G20281t) (begin (G20275G20273command-line G20276G20274command-line) (set! G20276G20274command-line G20281t))) (G20275G20273command-line))))) G20203command-line (cons G20256filename (map (lambda (G20283x) (format '"~a" G20283x)) G20260args))) (if (eqv? G20272t 'compile) (begin (G18811G12431compile-r6rs-top-level G20270x*) (G11095G10721serialize-all G10433G10223serialize-library G10538G10452compile-core-expr)) (void))))) G20257how)) (with-input-from-file G20256filename (lambda () ((letrec ((G20285f (lambda () ((lambda (G20287x) (if (eof-object? G20287x) '() (cons G20287x (G20285f)))) (G10428G10213read-annotated))))) G20285f)))))) G20268swap)) (lambda () ((lambda (G20289t) (begin (G20264G20262library-path G20265G20263library-path) (set! G20265G20263library-path G20289t))) (G20264G20262library-path))))) G11091G10713library-path (G20205local-library-path G20256filename)))) (begin (set! G20302G20221load-r6rs-top-level G20221load-r6rs-top-level) (set! G20301G20219compile->closure G20219compile->closure) (set! G20300G20217compile G20217compile) (set! G20299G20215compile-system-libraries G20215compile-system-libraries) (set! G20298G20213eval-top-level G20213eval-top-level) (set! G20297G20211ironscheme-build G20211ironscheme-build) (set! G20296G20209load G20209load) (set! G20295G20207load/args G20207load/args) (set! G20294G20205local-library-path G20205local-library-path) (set! G20293G20203command-line G20203command-line) (set! G20292G20201trace-printer G20201trace-printer) (set! G20291G20199for-each-with-index G20199for-each-with-index) (G11096G10723current-precompiled-library-loader G10434G10225load-serialized-library) (set-symbol-value! 'load G20209load) (set-symbol-value! 'eval-r6rs G20213eval-top-level) (set-symbol-value! 'int-env-syms G18786G12381interaction-environment-symbols) (set-symbol-value! 'expanded2core G10537G10450expanded->core) (set-symbol-value! 'trace-printer G20201trace-printer) (G11091G10713library-path '("." "/tmp/")) ((lambda (G20222args G20223port) (with-exception-handler (lambda (G20226c) (begin (display '" Condition components:\n" G20223port) (G20199for-each-with-index (lambda (G20228i G20229x) (if (G19184G19012who-condition? G20229x) (format G20223port '"   ~d. &who: ~a\n" G20228i (G19185G19014condition-who G20229x)) (if (G19138G18862message-condition? G20229x) (format G20223port '"   ~d. &message: ~s\n" G20228i (G19139G18864condition-message G20229x)) (if (G19163G18944violation? G20229x) (format G20223port '"   ~d. ~a\n" G20228i (record-type-name (record-rtd G20229x))) (if (G19176G18987irritants-condition? G20229x) (format G20223port '"   ~d. &irritants: ~s\n" G20228i (G19177G18989condition-irritants G20229x)) (format G20223port '"   ~d. ~a\n" G20228i (record-type-name (record-rtd G20229x)))))))) (simple-conditions G20226c)))) (lambda () (G20221load-r6rs-top-level (cadr G20222args) 'load)))) (G20203command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
