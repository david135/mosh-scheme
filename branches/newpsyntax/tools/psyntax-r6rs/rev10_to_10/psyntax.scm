;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (a295b@make-record-printer a2964@a295f a2966@a2961 a2968@a2960 a296b@a295e a296d@make-source-position-condition a296f@a295c a2971@a295d a2973@source-position-condition? a2975@source-position-file-name a2977@source-position-character a2979@make-struct-type a297b@library-version-mismatch-warning a297d@library-stale-warning a297f@file-locator-resolution-error a2981@set-label-binding! a2983@label-binding a2985@remove-location a2987@read-annotated a2989@annotation-stripped a298b@annotation? a298d@annotation-source a298f@annotation-expression a2991@scm->fasl a2993@fasl-save a2995@fasl-load a2997@serialize-library a2999@load-serialized-library a299b@read-library-source-file a299d@make-parameter) (begin (set! a295b@make-record-printer (lambda (a2a04@name a2a05@proc) display)) (set! a2964@a295f (make-record-type-descriptor '&source-position a500c@a4d53@&condition-rtd 'a2962 '#f '#f '#((immutable file-name) (immutable character)))) (set! a2966@a2961 '#f) (set! a2968@a2960 (make-record-constructor-descriptor a2964@a295f a500d@a4d55@&condition-rcd a2966@a2961)) (set! a296b@a295e (record-predicate a2964@a295f)) (set! a296d@make-source-position-condition (record-constructor a2968@a2960)) (set! a296f@a295c (record-accessor a2964@a295f '0)) (set! a2971@a295d (record-accessor a2964@a295f '1)) (set! a2973@source-position-condition? (condition-predicate a2964@a295f)) (set! a2975@source-position-file-name (condition-accessor a2964@a295f a296f@a295c)) (set! a2977@source-position-character (condition-accessor a2964@a295f a2971@a295d)) (set! a2979@make-struct-type (lambda a2a08@x (error 'make-struct-type '"mosh doesn't need this, because define-struct-macro is unused"))) (set! a297b@library-version-mismatch-warning (lambda (a2a0a@name a2a0b@depname a2a0c@filename) (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.\n" a2a0a@name a2a0b@depname a2a0c@filename))) (set! a297d@library-stale-warning (lambda (a2a10@name a2a11@filename) (format (current-error-port) '"WARNING: library ~s is stale; file ~s will be recompiled from source.\n" a2a10@name a2a11@filename))) (set! a297f@file-locator-resolution-error (lambda (a2a14@libname a2a15@failed-list a2a16@pending-list) ((lambda (a2a22@a2a1d a2a24@a2a1f a2a26@a2a1e a2a29@a2a1c a2a2b@make-library-resolution-condition a2a2d@a2a1a a2a2f@a2a1b a2a31@library-resolution-condition? a2a33@condition-library a2a35@condition-files a2a3d@a2a38 a2a3f@a2a3a a2a41@a2a39 a2a44@a2a37 a2a46@make-imported-from-condition a2a48@a2a36 a2a4a@imported-from-condition? a2a4c@importing-library) (begin (set! a2a22@a2a1d (make-record-type-descriptor '&library-resolution a500c@a4d53@&condition-rtd 'a2a20 '#f '#f '#((immutable library) (immutable files)))) (set! a2a24@a2a1f '#f) (set! a2a26@a2a1e (make-record-constructor-descriptor a2a22@a2a1d a500d@a4d55@&condition-rcd a2a24@a2a1f)) (set! a2a29@a2a1c (record-predicate a2a22@a2a1d)) (set! a2a2b@make-library-resolution-condition (record-constructor a2a26@a2a1e)) (set! a2a2d@a2a1a (record-accessor a2a22@a2a1d '0)) (set! a2a2f@a2a1b (record-accessor a2a22@a2a1d '1)) (set! a2a31@library-resolution-condition? (condition-predicate a2a22@a2a1d)) (set! a2a33@condition-library (condition-accessor a2a22@a2a1d a2a2d@a2a1a)) (set! a2a35@condition-files (condition-accessor a2a22@a2a1d a2a2f@a2a1b)) (set! a2a3d@a2a38 (make-record-type-descriptor '&imported-from a500c@a4d53@&condition-rtd 'a2a3b '#f '#f '#((immutable importing-library)))) (set! a2a3f@a2a3a '#f) (set! a2a41@a2a39 (make-record-constructor-descriptor a2a3d@a2a38 a500d@a4d55@&condition-rcd a2a3f@a2a3a)) (set! a2a44@a2a37 (record-predicate a2a3d@a2a38)) (set! a2a46@make-imported-from-condition (record-constructor a2a41@a2a39)) (set! a2a48@a2a36 (record-accessor a2a3d@a2a38 '0)) (set! a2a4a@imported-from-condition? (condition-predicate a2a3d@a2a38)) (set! a2a4c@importing-library (condition-accessor a2a3d@a2a38 a2a48@a2a36)) (raise (apply condition (a502c@a4ded@make-error) (a504e@a4e49@make-who-condition 'expander) (a5012@a4daa@make-message-condition '"cannot locate library in library-path") (a2a2b@make-library-resolution-condition a2a14@libname a2a15@failed-list) (map a2a46@make-imported-from-condition a2a16@pending-list))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! a2981@set-label-binding! (lambda (a2a4d@label a2a4e@binding) (set-symbol-value! a2a4d@label a2a4e@binding))) (set! a2983@label-binding (lambda (a2a51@label) ((call/cc (lambda (a2a55@a2a53) (lambda () (with-exception-handler (lambda (a2a57@c) ((call/cc (lambda (a2a59@a2a54) (a2a55@a2a53 (lambda () (if '#t '#f (a2a59@a2a54 (lambda () (raise-continuable a2a57@c)))))))))) (lambda () (symbol-value a2a51@label))))))))) (set! a2985@remove-location (lambda (a2a5b@x) (gensym a2a5b@x))) (set! a2987@read-annotated read) (set! a2989@annotation-stripped (lambda (a2a5d@x) (a298f@annotation-expression a2a5d@x))) (set! a298b@annotation? (lambda (a2a5f@x) (source-info a2a5f@x))) (set! a298d@annotation-source (lambda (a2a61@x) (source-info a2a61@x))) (set! a298f@annotation-expression (lambda (a2a63@x) (if (pair? a2a63@x) (cons (car a2a63@x) (cdr a2a63@x)) (display '"line:46\n")))) (set! a2991@scm->fasl (lambda (a2a65@filename) (string-append a2a65@filename '".mosh-fasl"))) (set! a2993@fasl-save (lambda (a2a67@filename a2a68@obj) (call-with-port (open-file-output-port a2a67@filename) (lambda (a2a6b@port) ((symbol-value 'fasl-write!) a2a68@obj a2a6b@port))))) (set! a2995@fasl-load (lambda (a2a6d@filename) (call-with-port (open-file-input-port a2a6d@filename) (symbol-value 'fasl-read!)))) (set! a2997@serialize-library (lambda (a2a6f@filename a2a70@obj) (begin (format '#t '"serialize-library ~a\n..." a2a6f@filename) ((lambda (a2a73@expanded2core) ((lambda (a2a75@compile) ((lambda (a2a77@code) ((lambda (a2a79@pivot) ((lambda (a2a7b@visit) ((lambda () (begin (set-car! a2a79@pivot a2a7b@visit) ((lambda (a2a7d@pivot) ((lambda (a2a7f@invoke) ((lambda () (set-car! a2a7d@pivot a2a7f@invoke)))) (a2a75@compile (a2a73@expanded2core (car a2a7d@pivot))))) (cdr a2a79@pivot)))))) (a2a75@compile (a2a73@expanded2core (car a2a79@pivot))))) (cddddr (cddddr a2a77@code)))) a2a70@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (a2a81@fasl-file) (begin (if (file-exists? a2a81@fasl-file) (delete-file a2a81@fasl-file) (void)) ((call/cc (lambda (a2a85@a2a83) (lambda () (with-exception-handler (lambda (a2a87@c) ((call/cc (lambda (a2a89@a2a84) (a2a85@a2a83 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " a2a6f@filename) (if (file-exists? a2a81@fasl-file) (delete-file a2a81@fasl-file) (void)) '#f) (a2a89@a2a84 (lambda () (raise-continuable a2a87@c)))))))))) (lambda () (begin (a2993@fasl-save a2a81@fasl-file a2a70@obj) (display '"OK\n")))))))))) (a2991@scm->fasl a2a6f@filename))))) (set! a2999@load-serialized-library (lambda (a2a8b@filename a2a8c@obj) ((lambda (a2a8f@fasl-file) (if (and (file-exists? a2a8f@fasl-file) ((symbol-value 'file-newer?) a2a8f@fasl-file a2a8b@filename)) ((lambda (a2a91@expanded2core) ((lambda (a2a93@eval-compiled-core) ((lambda (a2a95@code) ((lambda (a2a97@pivot) ((lambda (a2a99@visit) ((lambda (a2a9b@visit-proc) ((lambda () (begin (set-car! a2a97@pivot a2a9b@visit-proc) ((lambda (a2a9d@pivot) ((lambda (a2a9f@invoke) ((lambda () (begin (set-car! a2a9d@pivot (lambda () (a2a93@eval-compiled-core a2a9f@invoke))) (apply a2a8c@obj a2a95@code))))) (car a2a9d@pivot))) (cdr a2a97@pivot)) '#t)))) (lambda () (a2a93@eval-compiled-core a2a99@visit)))) (car a2a97@pivot))) (cddddr (cddddr a2a95@code)))) (a2995@fasl-load a2a8f@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (a2991@scm->fasl a2a8b@filename)))) (set! a299b@read-library-source-file (lambda (a2aa1@file-name) (with-input-from-file a2aa1@file-name a2987@read-annotated))) (set! a299d@make-parameter (lambda a2ab1 ((lambda (a2ab2) (if (= a2ab2 '1) (apply (lambda (a2aa3@x) (a299d@make-parameter a2aa3@x (lambda (a2aa5@x) a2aa5@x))) a2ab1) (if (= a2ab2 '2) (apply (lambda (a2aa7@x a2aa8@fender) ((lambda (a2aab@x) (lambda a2aaf ((lambda (a2ab0) (if (= a2ab0 '0) (apply (lambda () a2aab@x) a2aaf) (if (= a2ab0 '1) (apply (lambda (a2aad@v) (set! a2aab@x (a2aa8@fender a2aad@v))) a2aaf) (error 'apply '"invalid arg count")))) (length a2aaf)))) (a2aa8@fender a2aa7@x))) a2ab1) (error 'apply '"invalid arg count")))) (length a2ab1)))) (begin (set! a2ab3@a295b@make-record-printer a295b@make-record-printer) (set! a2ab4@a2964@a295f a2964@a295f) (set! a2ab5@a2966@a2961 a2966@a2961) (set! a2ab6@a2968@a2960 a2968@a2960) (set! a2ab7@a296b@a295e a296b@a295e) (set! a2ab8@a296d@make-source-position-condition a296d@make-source-position-condition) (set! a2ab9@a296f@a295c a296f@a295c) (set! a2aba@a2971@a295d a2971@a295d) (set! a2abb@a2973@source-position-condition? a2973@source-position-condition?) (set! a2abc@a2975@source-position-file-name a2975@source-position-file-name) (set! a2abd@a2977@source-position-character a2977@source-position-character) (set! a2abe@a2979@make-struct-type a2979@make-struct-type) (set! a2abf@a297b@library-version-mismatch-warning a297b@library-version-mismatch-warning) (set! a2ac0@a297d@library-stale-warning a297d@library-stale-warning) (set! a2ac1@a297f@file-locator-resolution-error a297f@file-locator-resolution-error) (set! a2ac2@a2981@set-label-binding! a2981@set-label-binding!) (set! a2ac3@a2983@label-binding a2983@label-binding) (set! a2ac4@a2985@remove-location a2985@remove-location) (set! a2ac5@a2987@read-annotated a2987@read-annotated) (set! a2ac6@a2989@annotation-stripped a2989@annotation-stripped) (set! a2ac7@a298b@annotation? a298b@annotation?) (set! a2ac8@a298d@annotation-source a298d@annotation-source) (set! a2ac9@a298f@annotation-expression a298f@annotation-expression) (set! a2aca@a2991@scm->fasl a2991@scm->fasl) (set! a2acb@a2993@fasl-save a2993@fasl-save) (set! a2acc@a2995@fasl-load a2995@fasl-load) (set! a2acd@a2997@serialize-library a2997@serialize-library) (set! a2ace@a2999@load-serialized-library a2999@load-serialized-library) (set! a2acf@a299b@read-library-source-file a299b@read-library-source-file) (set! a2ad0@a299d@make-parameter a299d@make-parameter)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)#|
((lambda (a2ad5@current-primitive-locations a2ad7@expanded->core a2ad9@pretty-print a2adb@compile-core-expr a2add@compile-core-expr-to-port) (begin (set! a2ad5@current-primitive-locations (a2ad0@a299d@make-parameter (lambda (a2ade@x) '#f) (lambda (a2ae0@p) a2ae0@p))) (set! a2ad7@expanded->core (lambda (a2ae2@x) ((lambda (a2ae5@f) (begin (set! a2ae5@f (lambda (a2ae6@x) (if (pair? a2ae6@x) ((lambda (a2ae8@t) (if (memv a2ae8@t '(quote)) a2ae6@x (if (memv a2ae8@t '(case-lambda)) (cons 'case-lambda (map (lambda (a2aea@x) (cons (car a2aea@x) (map a2ae5@f (cdr a2aea@x)))) (cdr a2ae6@x))) (if (memv a2ae8@t '(lambda)) (cons* 'lambda (cadr a2ae6@x) (map a2ae5@f (cddr a2ae6@x))) (if (memv a2ae8@t '(letrec)) ((lambda (a2aec@bindings a2aed@body*) ((lambda (a2af0@lhs* a2af1@rhs*) (cons* 'letrec (map list a2af0@lhs* (map a2ae5@f a2af1@rhs*)) (map a2ae5@f a2aed@body*))) (map car a2aec@bindings) (map cadr a2aec@bindings))) (cadr a2ae6@x) (cddr a2ae6@x)) (if (memv a2ae8@t '(letrec*)) ((lambda (a2af4@bindings a2af5@body*) ((lambda (a2af8@lhs* a2af9@rhs*) (cons* 'letrec* (map list a2af8@lhs* (map a2ae5@f a2af9@rhs*)) (map a2ae5@f a2af5@body*))) (map car a2af4@bindings) (map cadr a2af4@bindings))) (cadr a2ae6@x) (cddr a2ae6@x)) (if (memv a2ae8@t '(library-letrec*)) ((lambda (a2afc@name a2afd@x) ((lambda (a2b00@bindings a2b01@body*) ((lambda (a2b04@lhs* a2b05@lhs** a2b06@rhs*) (cons* 'library-letrec* a2afc@name (map list a2b04@lhs* a2b05@lhs** (map a2ae5@f a2b06@rhs*)) (map a2ae5@f a2b01@body*))) (map car a2b00@bindings) (map cadr a2b00@bindings) (map caddr a2b00@bindings))) (cadr a2afd@x) (cddr a2afd@x))) (cadr a2ae6@x) (cdr a2ae6@x)) (if (memv a2ae8@t '(begin)) (cons 'begin (map a2ae5@f (cdr a2ae6@x))) (if (memv a2ae8@t '(set!)) (list 'set! (cadr a2ae6@x) (a2ae5@f (caddr a2ae6@x))) (if (memv a2ae8@t '(primitive)) ((lambda (a2b0a@op) ((lambda (a2b0c@t) (if a2b0c@t ((lambda (a2b0e@loc) a2b0e@loc) a2b0c@t) ((lambda () (begin '#f a2b0a@op))))) ((a2ad5@current-primitive-locations) a2b0a@op))) (cadr a2ae6@x)) (if (memv a2ae8@t '(define)) a2ae6@x ((lambda () (begin '#f (if (list? a2ae6@x) (map a2ae5@f a2ae6@x) (error 'rewrite '"invalid form ~s ~s" a2ae6@x (list? a2ae6@x))))))))))))))))) (car a2ae6@x)) ((lambda () (begin '#f a2ae6@x)))))) (a2ae5@f a2ae2@x))) '#f))) (set! a2ad9@pretty-print write) (set! a2adb@compile-core-expr (lambda (a2b10@x) (a2ad7@expanded->core a2b10@x))) (set! a2add@compile-core-expr-to-port (lambda (a2b12@x a2b13@p) (a2ad9@pretty-print (a2ad7@expanded->core a2b12@x) a2b13@p))) (begin (set! a2b16@a2ad5@current-primitive-locations a2ad5@current-primitive-locations) (set! a2b17@a2ad7@expanded->core a2ad7@expanded->core) (set! a2b18@a2ad9@pretty-print a2ad9@pretty-print) (set! a2b19@a2adb@compile-core-expr a2adb@compile-core-expr) (set! a2b1a@a2add@compile-core-expr-to-port a2add@compile-core-expr-to-port)))) '#f '#f '#f '#f '#f)
((lambda (a2b1d@base-of-interaction-library) (begin (set! a2b1d@base-of-interaction-library (lambda () '(ikarus))) (set! a2b6e@a2b1d@base-of-interaction-library a2b1d@base-of-interaction-library))) '#f)
((lambda (a2b78@make-collection a2b7a@current-library-collection a2b80@a2b7b a2b82@a2b7d a2b84@a2b7c a2b87@library? a2b89@make-library a2b8b@library-id a2b8d@library-name a2b8f@library-version a2b91@library-imp* a2b93@library-vis* a2b95@library-inv* a2b97@library-subst a2b99@library-env a2b9b@library-visit-state a2b9d@library-invoke-state a2b9f@library-visit-code a2ba1@library-invoke-code a2ba3@library-guard-code a2ba5@library-guard-req* a2ba7@library-visible? a2ba9@library-source-file-name a2bab@set-library-id! a2bad@set-library-name! a2baf@set-library-version! a2bb1@set-library-imp*! a2bb3@set-library-vis*! a2bb5@set-library-inv*! a2bb7@set-library-subst! a2bb9@set-library-env! a2bbb@set-library-visit-state! a2bbd@set-library-invoke-state! a2bbf@set-library-visit-code! a2bc1@set-library-invoke-code! a2bc3@set-library-guard-code! a2bc5@set-library-guard-req*! a2bc7@set-library-visible?! a2bc9@set-library-source-file-name! a2bcb@rp a2bcd@find-dependencies a2bcf@find-library-by a2bd1@library-path a2bd3@library-extensions a2bd5@library-name->file-name a2bd7@file-locator a2bd9@serialize-all a2bdb@current-precompiled-library-loader a2bdd@try-load-from-file a2bdf@library-loader a2be1@current-library-expander a2be3@external-pending-libraries a2be5@find-external-library a2be7@find-library-by-name a2be9@uninstall-library a2beb@library-exists? a2bed@find-library-by-spec/die a2bef@label->binding-table a2bf1@install-library-record a2bf3@install-library a2bf5@imported-label->binding a2bf7@invoke-library a2bf9@visit-library a2bfb@invoke-library-by-spec a2bfd@installed-libraries a2bff@library-spec) (begin (set! a2b78@make-collection (lambda () ((lambda (a2c00@set) ((lambda (a2c03@set-cons) (begin (set! a2c03@set-cons (lambda (a2c0c@x a2c0d@ls) (if (memq a2c0c@x a2c0d@ls) a2c0d@ls ((lambda () (begin '#f (cons a2c0c@x a2c0d@ls))))))) (lambda a2c0a ((lambda (a2c0b) (if (= a2c0b '0) (apply (lambda () a2c00@set) a2c0a) (if (= a2c0b '1) (apply (lambda (a2c04@x) (set! a2c00@set (a2c03@set-cons a2c04@x a2c00@set))) a2c0a) (if (= a2c0b '2) (apply (lambda (a2c06@x a2c07@del?) (if a2c07@del? (set! a2c00@set (remq a2c06@x a2c00@set)) (set! a2c00@set (a2c03@set-cons a2c06@x a2c00@set)))) a2c0a) (error 'apply '"invalid arg count"))))) (length a2c0a))))) '#f)) '()))) (set! a2b7a@current-library-collection (a2ad0@a299d@make-parameter (a2b78@make-collection) (lambda (a2c10@x) (begin (if (not (procedure? a2c10@x)) (assertion-violation 'current-library-collection '"not a procedure" a2c10@x) (void)) a2c10@x)))) (set! a2b80@a2b7b (make-record-type-descriptor 'library '#f 'a2b7e '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable guard-code) (mutable guard-req*) (mutable visible?) (mutable source-file-name)))) (set! a2b82@a2b7d '#f) (set! a2b84@a2b7c (make-record-constructor-descriptor a2b80@a2b7b '#f a2b82@a2b7d)) (set! a2b87@library? (record-predicate a2b80@a2b7b)) (set! a2b89@make-library (record-constructor a2b84@a2b7c)) (set! a2b8b@library-id (record-accessor a2b80@a2b7b '0)) (set! a2b8d@library-name (record-accessor a2b80@a2b7b '1)) (set! a2b8f@library-version (record-accessor a2b80@a2b7b '2)) (set! a2b91@library-imp* (record-accessor a2b80@a2b7b '3)) (set! a2b93@library-vis* (record-accessor a2b80@a2b7b '4)) (set! a2b95@library-inv* (record-accessor a2b80@a2b7b '5)) (set! a2b97@library-subst (record-accessor a2b80@a2b7b '6)) (set! a2b99@library-env (record-accessor a2b80@a2b7b '7)) (set! a2b9b@library-visit-state (record-accessor a2b80@a2b7b '8)) (set! a2b9d@library-invoke-state (record-accessor a2b80@a2b7b '9)) (set! a2b9f@library-visit-code (record-accessor a2b80@a2b7b '10)) (set! a2ba1@library-invoke-code (record-accessor a2b80@a2b7b '11)) (set! a2ba3@library-guard-code (record-accessor a2b80@a2b7b '12)) (set! a2ba5@library-guard-req* (record-accessor a2b80@a2b7b '13)) (set! a2ba7@library-visible? (record-accessor a2b80@a2b7b '14)) (set! a2ba9@library-source-file-name (record-accessor a2b80@a2b7b '15)) (set! a2bab@set-library-id! (record-mutator a2b80@a2b7b '0)) (set! a2bad@set-library-name! (record-mutator a2b80@a2b7b '1)) (set! a2baf@set-library-version! (record-mutator a2b80@a2b7b '2)) (set! a2bb1@set-library-imp*! (record-mutator a2b80@a2b7b '3)) (set! a2bb3@set-library-vis*! (record-mutator a2b80@a2b7b '4)) (set! a2bb5@set-library-inv*! (record-mutator a2b80@a2b7b '5)) (set! a2bb7@set-library-subst! (record-mutator a2b80@a2b7b '6)) (set! a2bb9@set-library-env! (record-mutator a2b80@a2b7b '7)) (set! a2bbb@set-library-visit-state! (record-mutator a2b80@a2b7b '8)) (set! a2bbd@set-library-invoke-state! (record-mutator a2b80@a2b7b '9)) (set! a2bbf@set-library-visit-code! (record-mutator a2b80@a2b7b '10)) (set! a2bc1@set-library-invoke-code! (record-mutator a2b80@a2b7b '11)) (set! a2bc3@set-library-guard-code! (record-mutator a2b80@a2b7b '12)) (set! a2bc5@set-library-guard-req*! (record-mutator a2b80@a2b7b '13)) (set! a2bc7@set-library-visible?! (record-mutator a2b80@a2b7b '14)) (set! a2bc9@set-library-source-file-name! (record-mutator a2b80@a2b7b '15)) (set! a2bcb@rp (a2ab3@a295b@make-record-printer 'library (lambda (a2c12@x a2c13@p a2c14@wr) (begin (if (not (a2b87@library? a2c12@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (a2b8f@library-version a2c12@x)) (a2b8d@library-name a2c12@x) (append (a2b8d@library-name a2c12@x) (list (a2b8f@library-version a2c12@x))))) a2c13@p))))) (set! a2bcd@find-dependencies (lambda (a2c18@ls) (if (null? a2c18@ls) '() ((lambda () (begin '#f (assertion-violation 'find-dependencies '"cannot handle deps yet"))))))) (set! a2bcf@find-library-by (lambda (a2c1a@pred) ((letrec ((a2c1c@f (lambda (a2c1e@ls) (if (null? a2c1e@ls) '#f (if (a2c1a@pred (car a2c1e@ls)) (car a2c1e@ls) ((lambda () (begin '#f (a2c1c@f (cdr a2c1e@ls)))))))))) a2c1c@f) ((a2b7a@current-library-collection))))) (set! a2bd1@library-path (a2ad0@a299d@make-parameter '(".") (lambda (a2c20@x) (if (and (list? a2c20@x) (for-all string? a2c20@x)) (map (lambda (a2c22@x) a2c22@x) a2c20@x) (assertion-violation 'library-path '"not a list of strings" a2c20@x))))) (set! a2bd3@library-extensions (a2ad0@a299d@make-parameter '(".sls" ".ss" ".scm") (lambda (a2c24@x) (if (and (list? a2c24@x) (for-all string? a2c24@x)) (map (lambda (a2c26@x) a2c26@x) a2c24@x) (assertion-violation 'library-extensions '"not a list of strings" a2c24@x))))) (set! a2bd5@library-name->file-name (lambda (a2c28@ls) (call-with-values (lambda () (open-string-output-port)) (lambda (a2c2e@a2c2b a2c2f@a2c2d) ((lambda (a2c32@extract a2c33@p) ((lambda (a2c37@display-hex a2c39@main*?) (begin (set! a2c37@display-hex (lambda (a2c4c@n) (if (<= '0 a2c4c@n '9) (display a2c4c@n a2c33@p) ((lambda () (begin '#f (write-char (integer->char (+ (char->integer '#\a) (- a2c4c@n '10))) a2c33@p))))))) (set! a2c39@main*? (lambda (a2c48@x) (and (>= (string-length a2c48@x) '4) (string=? (substring a2c48@x '0 '4) '"main") (for-all (lambda (a2c4a@x) (char=? a2c4a@x '#\_)) (string->list (substring a2c48@x '4 (string-length a2c48@x))))))) (begin ((letrec ((a2c3a@f (lambda (a2c3c@x a2c3d@ls a2c3e@fst) (begin (write-char '#\/ a2c33@p) ((lambda (a2c42@name) (begin (for-each (lambda (a2c44@n) ((lambda (a2c46@c) (if (or (char<=? '#\a a2c46@c '#\z) (char<=? '#\A a2c46@c '#\Z) (char<=? '#\0 a2c46@c '#\9) (memv a2c46@c '(#\. #\- #\+ #\_))) (write-char a2c46@c a2c33@p) ((lambda () (begin '#f (write-char '#\% a2c33@p) (a2c37@display-hex (quotient a2c44@n '16)) (a2c37@display-hex (remainder a2c44@n '16))))))) (integer->char a2c44@n))) (bytevector->u8-list (string->utf8 a2c42@name))) (if (null? a2c3d@ls) (if (and (not a2c3e@fst) (a2c39@main*? a2c42@name)) (write-char '#\_ a2c33@p) (void)) (a2c3a@f (car a2c3d@ls) (cdr a2c3d@ls) '#f)))) (symbol->string a2c3c@x)))))) a2c3a@f) (car a2c28@ls) (cdr a2c28@ls) '#t) (a2c32@extract)))) '#f '#f)) a2c2f@a2c2d a2c2e@a2c2b))))) (set! a2bd7@file-locator (a2ad0@a299d@make-parameter (lambda (a2c4e@x) ((lambda (a2c50@str) ((letrec ((a2c52@f (lambda (a2c54@ls a2c55@exts a2c56@failed-list) (if (null? a2c54@ls) (a2ac1@a297f@file-locator-resolution-error a2c4e@x (reverse a2c56@failed-list) ((lambda (a2c5a@ls) (if (null? a2c5a@ls) (error 'library-manager '"BUG") (cdr a2c5a@ls))) (a2be3@external-pending-libraries))) (if (null? a2c55@exts) (a2c52@f (cdr a2c54@ls) (a2bd3@library-extensions) a2c56@failed-list) ((lambda () (begin '#f ((lambda (a2c5c@name) (if (file-exists? a2c5c@name) a2c5c@name (a2c52@f a2c54@ls (cdr a2c55@exts) (cons a2c5c@name a2c56@failed-list)))) (string-append (car a2c54@ls) a2c50@str (car a2c55@exts))))))))))) a2c52@f) (a2bd1@library-path) (a2bd3@library-extensions) '())) (a2bd5@library-name->file-name a2c4e@x))) (lambda (a2c5e@f) (if (procedure? a2c5e@f) a2c5e@f (assertion-violation 'file-locator '"not a procedure" a2c5e@f))))) (set! a2bd9@serialize-all (lambda (a2c60@serialize a2c61@compile) ((lambda (a2c65@library-desc) (begin (set! a2c65@library-desc (lambda (a2c68@x) (list (a2b8b@library-id a2c68@x) (a2b8d@library-name a2c68@x)))) (for-each (lambda (a2c66@x) (if (a2ba9@library-source-file-name a2c66@x) (a2c60@serialize (a2ba9@library-source-file-name a2c66@x) (list (a2b8b@library-id a2c66@x) (a2b8d@library-name a2c66@x) (a2b8f@library-version a2c66@x) (map a2c65@library-desc (a2b91@library-imp* a2c66@x)) (map a2c65@library-desc (a2b93@library-vis* a2c66@x)) (map a2c65@library-desc (a2b95@library-inv* a2c66@x)) (a2b97@library-subst a2c66@x) (a2b99@library-env a2c66@x) (a2c61@compile (a2b9f@library-visit-code a2c66@x)) (a2c61@compile (a2ba1@library-invoke-code a2c66@x)) (a2c61@compile (a2ba3@library-guard-code a2c66@x)) (map a2c65@library-desc (a2ba5@library-guard-req* a2c66@x)) (a2ba7@library-visible? a2c66@x))) (void))) ((a2b7a@current-library-collection))))) '#f))) (set! a2bdb@current-precompiled-library-loader (a2ad0@a299d@make-parameter (lambda (a2c6a@filename a2c6b@sk) '#f))) (set! a2bdd@try-load-from-file (lambda (a2c6e@filename) ((a2bdb@current-precompiled-library-loader) a2c6e@filename (lambda a2ca0 ((lambda (a2ca1) (if (= a2ca1 '13) (apply (lambda (a2c70@id a2c71@name a2c72@ver a2c73@imp* a2c74@vis* a2c75@inv* a2c76@exp-subst a2c77@exp-env a2c78@visit-proc a2c79@invoke-proc a2c7a@guard-proc a2c7b@guard-req* a2c7c@visible?) ((letrec ((a2c8a@f (lambda (a2c8c@deps) (if (null? a2c8c@deps) (begin (for-each (lambda (a2c8e@x) ((lambda (a2c90@label a2c91@dname) ((lambda (a2c94@lib) (a2bf7@invoke-library a2c94@lib)) (a2be7@find-library-by-name a2c91@dname))) (car a2c8e@x) (cadr a2c8e@x))) a2c7b@guard-req*) (if (a2c7a@guard-proc) (begin (a2ac0@a297d@library-stale-warning a2c71@name a2c6e@filename) '#f) ((lambda () (begin '#f (a2bf3@install-library a2c70@id a2c71@name a2c72@ver a2c73@imp* a2c74@vis* a2c75@inv* a2c76@exp-subst a2c77@exp-env a2c78@visit-proc a2c79@invoke-proc '#f '#f ''#f '() a2c7c@visible? '#f) '#t))))) ((lambda () (begin '#f ((lambda (a2c96@d) ((lambda (a2c98@label a2c99@dname) ((lambda (a2c9c@l) (if (and (a2b87@library? a2c9c@l) (eq? a2c98@label (a2b8b@library-id a2c9c@l))) (a2c8a@f (cdr a2c8c@deps)) ((lambda () (begin '#f (a2abf@a297b@library-version-mismatch-warning a2c71@name a2c99@dname a2c6e@filename) '#f))))) (a2be7@find-library-by-name a2c99@dname))) (car a2c96@d) (cadr a2c96@d))) (car a2c8c@deps))))))))) a2c8a@f) (append a2c73@imp* a2c74@vis* a2c75@inv* a2c7b@guard-req*))) a2ca0) (if (>= a2ca1 '0) (apply (lambda a2c9e@others '#f) a2ca0) (error 'apply '"invalid arg count")))) (length a2ca0)))))) (set! a2bdf@library-loader (a2ad0@a299d@make-parameter (lambda (a2ca2@x) ((lambda (a2ca4@file-name) (if (not a2ca4@file-name) (assertion-violation '#f '"cannot find library" a2ca2@x) (or (a2bdd@try-load-from-file a2ca4@file-name) ((lambda () (begin '#f ((a2be1@current-library-expander) (a2acf@a299b@read-library-source-file a2ca4@file-name) a2ca4@file-name (lambda (a2ca6@name) (if (not (fast-equal? a2ca6@name a2ca2@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (a2cac@a2ca9 a2cad@a2cab) ((lambda (a2cb0@e a2cb1@p) (begin (display '"expected to find library " a2cb1@p) (write a2ca2@x a2cb1@p) (display '" in file " a2cb1@p) (display a2ca4@file-name a2cb1@p) (display '", found " a2cb1@p) (write a2ca6@name a2cb1@p) (display '" instead" a2cb1@p) (a2cb0@e))) a2cad@a2cab a2cac@a2ca9)))) (void)))))))))) ((a2bd7@file-locator) a2ca2@x))) (lambda (a2cb4@f) (if (procedure? a2cb4@f) a2cb4@f (assertion-violation 'library-locator '"not a procedure" a2cb4@f))))) (set! a2be1@current-library-expander (a2ad0@a299d@make-parameter (lambda (a2cb6@x) (assertion-violation 'library-expander '"not initialized")) (lambda (a2cb8@f) (if (procedure? a2cb8@f) a2cb8@f (assertion-violation 'library-expander '"not a procedure" a2cb8@f))))) (set! a2be3@external-pending-libraries (a2ad0@a299d@make-parameter '())) (set! a2be5@find-external-library (lambda (a2cba@name) (begin (if (member a2cba@name (a2be3@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" a2cba@name) (void)) ((lambda (a2cc0@a2cbd a2cc1@a2cbf) ((lambda (a2cc4@swap) (dynamic-wind a2cc4@swap (lambda () (begin ((a2bdf@library-loader) a2cba@name) (or (a2bcf@find-library-by (lambda (a2cc6@x) (fast-equal? (a2b8d@library-name a2cc6@x) a2cba@name))) (assertion-violation '#f '"handling external library did not yield the correct library" a2cba@name)))) a2cc4@swap)) (lambda () ((lambda (a2cc8@t) (begin (a2cc0@a2cbd a2cc1@a2cbf) (set! a2cc1@a2cbf a2cc8@t))) (a2cc0@a2cbd))))) a2be3@external-pending-libraries (cons a2cba@name (a2be3@external-pending-libraries)))))) (set! a2be7@find-library-by-name (lambda (a2cca@name) (or (a2bcf@find-library-by (lambda (a2ccc@x) (fast-equal? (a2b8d@library-name a2ccc@x) a2cca@name))) (a2be5@find-external-library a2cca@name)))) (set! a2be9@uninstall-library (lambda a2ce0 ((lambda (a2ce1) (if (= a2ce1 '2) (apply (lambda (a2cce@name a2ccf@err?) ((lambda (a2cd3@who) (begin (set! a2cd3@who 'uninstall-library) ((lambda (a2cd4@lib) (begin (if (and a2ccf@err? (not a2cd4@lib)) (assertion-violation a2cd3@who '"library not installed" a2cce@name) (void)) ((a2b7a@current-library-collection) a2cd4@lib '#t) (for-each (lambda (a2cd6@x) ((lambda (a2cd8@label a2cd9@binding) (begin (a2ac4@a2985@remove-location a2cd8@label) (if (memq (car a2cd9@binding) '(global global-macro global-macro! global-ctv)) (a2ac4@a2985@remove-location (cdr a2cd9@binding)) (void)))) (car a2cd6@x) (cdr a2cd6@x))) (a2b99@library-env a2cd4@lib)))) (a2bcf@find-library-by (lambda (a2cdc@x) (fast-equal? (a2b8d@library-name a2cdc@x) a2cce@name)))))) '#f)) a2ce0) (if (= a2ce1 '1) (apply (lambda (a2cde@name) (a2be9@uninstall-library a2cde@name '#t)) a2ce0) (error 'apply '"invalid arg count")))) (length a2ce0)))) (set! a2beb@library-exists? (lambda (a2ce2@name) (and (a2bcf@find-library-by (lambda (a2ce4@x) (fast-equal? (a2b8d@library-name a2ce4@x) a2ce2@name))) '#t))) (set! a2bed@find-library-by-spec/die (lambda (a2ce6@spec) ((lambda (a2ce8@id) (or (a2bcf@find-library-by (lambda (a2cea@x) (eq? a2ce8@id (a2b8b@library-id a2cea@x)))) (assertion-violation '#f '"cannot find library with required spec" a2ce6@spec))) (car a2ce6@spec)))) (set! a2bef@label->binding-table (make-eq-hashtable)) (set! a2bf1@install-library-record (lambda (a2cec@lib) (begin ((lambda (a2cee@exp-env) (for-each (lambda (a2cf0@x) ((lambda (a2cf2@label a2cf3@binding) ((lambda (a2cf6@binding) (begin (if (hashtable-ref a2bef@label->binding-table a2cf2@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" a2cf2@label (hashtable-ref a2bef@label->binding-table a2cf2@label '#f) a2cf6@binding) (exit)) (void)) (a2ac2@a2981@set-label-binding! a2cf2@label a2cf6@binding))) ((lambda (a2cf8@t) (if (memv a2cf8@t '(global)) (cons 'global (cons a2cec@lib (cdr a2cf3@binding))) (if (memv a2cf8@t '(global-macro)) (cons 'global-macro (cons a2cec@lib (cdr a2cf3@binding))) (if (memv a2cf8@t '(global-macro!)) (cons 'global-macro! (cons a2cec@lib (cdr a2cf3@binding))) (if (memv a2cf8@t '(global-ctv)) (cons 'global-ctv (cons a2cec@lib (cdr a2cf3@binding))) ((lambda () (begin '#f a2cf3@binding)))))))) (car a2cf3@binding)))) (car a2cf0@x) (cdr a2cf0@x))) a2cee@exp-env)) (a2b99@library-env a2cec@lib)) ((a2b7a@current-library-collection) a2cec@lib)))) (set! a2bf3@install-library (lambda (a2cfa@id a2cfb@name a2cfc@ver a2cfd@imp* a2cfe@vis* a2cff@inv* a2d00@exp-subst a2d01@exp-env a2d02@visit-proc a2d03@invoke-proc a2d04@visit-code a2d05@invoke-code a2d06@guard-code a2d07@guard-req* a2d08@visible? a2d09@source-file-name) ((lambda (a2d1a@imp-lib* a2d1b@vis-lib* a2d1c@inv-lib* a2d1d@guard-lib*) (begin (if (not (and (symbol? a2cfa@id) (list? a2cfb@name) (list? a2cfc@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" a2cfa@id a2cfb@name a2cfc@ver) (void)) (if (a2beb@library-exists? a2cfb@name) (assertion-violation 'install-library '"library is already installed" a2cfb@name) (void)) ((lambda (a2d22@lib) (a2bf1@install-library-record a2d22@lib)) (a2b89@make-library a2cfa@id a2cfb@name a2cfc@ver a2d1a@imp-lib* a2d1b@vis-lib* a2d1c@inv-lib* a2d00@exp-subst a2d01@exp-env a2d02@visit-proc a2d03@invoke-proc a2d04@visit-code a2d05@invoke-code a2d06@guard-code a2d1d@guard-lib* a2d08@visible? a2d09@source-file-name)))) (map a2bed@find-library-by-spec/die a2cfd@imp*) (map a2bed@find-library-by-spec/die a2cfe@vis*) (map a2bed@find-library-by-spec/die a2cff@inv*) (map a2bed@find-library-by-spec/die a2d07@guard-req*)))) (set! a2bf5@imported-label->binding (lambda (a2d24@lab) (a2ac3@a2983@label-binding a2d24@lab))) (set! a2bf7@invoke-library (lambda (a2d26@lib) ((lambda (a2d28@invoke) (if (procedure? a2d28@invoke) (begin (a2bbd@set-library-invoke-state! a2d26@lib (lambda () (assertion-violation 'invoke '"circularity detected" a2d26@lib))) (for-each a2bf7@invoke-library (a2b95@library-inv* a2d26@lib)) (a2bbd@set-library-invoke-state! a2d26@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" a2d26@lib))) (a2d28@invoke) (a2bbd@set-library-invoke-state! a2d26@lib '#t)) (void))) (a2b9d@library-invoke-state a2d26@lib)))) (set! a2bf9@visit-library (lambda (a2d2a@lib) ((lambda (a2d2c@visit) (if (procedure? a2d2c@visit) (begin (a2bbb@set-library-visit-state! a2d2a@lib (lambda () (assertion-violation 'visit '"circularity detected" a2d2a@lib))) (for-each a2bf7@invoke-library (a2b93@library-vis* a2d2a@lib)) (a2bbb@set-library-visit-state! a2d2a@lib (lambda () (assertion-violation 'invoke '"first visit did not return" a2d2a@lib))) (a2d2c@visit) (a2bbb@set-library-visit-state! a2d2a@lib '#t)) (void))) (a2b9b@library-visit-state a2d2a@lib)))) (set! a2bfb@invoke-library-by-spec (lambda (a2d2e@spec) (a2bf7@invoke-library (a2bed@find-library-by-spec/die a2d2e@spec)))) (set! a2bfd@installed-libraries (lambda a2d36 ((lambda (a2d37) (if (= a2d37 '1) (apply (lambda (a2d30@all?) ((letrec ((a2d32@f (lambda (a2d34@ls) (if (null? a2d34@ls) '() (if (or a2d30@all? (a2ba7@library-visible? (car a2d34@ls))) (cons (car a2d34@ls) (a2d32@f (cdr a2d34@ls))) ((lambda () (begin '#f (a2d32@f (cdr a2d34@ls)))))))))) a2d32@f) ((a2b7a@current-library-collection)))) a2d36) (if (= a2d37 '0) (apply (lambda () (a2bfd@installed-libraries '#f)) a2d36) (error 'apply '"invalid arg count")))) (length a2d36)))) (set! a2bff@library-spec (lambda (a2d38@x) (begin (if (not (a2b87@library? a2d38@x)) (assertion-violation 'library-spec '"not a library" a2d38@x) (void)) (list (a2b8b@library-id a2d38@x) (a2b8d@library-name a2d38@x) (a2b8f@library-version a2d38@x))))) (begin (set! a2d3a@a2b78@make-collection a2b78@make-collection) (set! a2d3b@a2b7a@current-library-collection a2b7a@current-library-collection) (set! a2d3c@a2b80@a2b7b a2b80@a2b7b) (set! a2d3d@a2b82@a2b7d a2b82@a2b7d) (set! a2d3e@a2b84@a2b7c a2b84@a2b7c) (set! a2d3f@a2b87@library? a2b87@library?) (set! a2d40@a2b89@make-library a2b89@make-library) (set! a2d41@a2b8b@library-id a2b8b@library-id) (set! a2d42@a2b8d@library-name a2b8d@library-name) (set! a2d43@a2b8f@library-version a2b8f@library-version) (set! a2d44@a2b91@library-imp* a2b91@library-imp*) (set! a2d45@a2b93@library-vis* a2b93@library-vis*) (set! a2d46@a2b95@library-inv* a2b95@library-inv*) (set! a2d47@a2b97@library-subst a2b97@library-subst) (set! a2d48@a2b99@library-env a2b99@library-env) (set! a2d49@a2b9b@library-visit-state a2b9b@library-visit-state) (set! a2d4a@a2b9d@library-invoke-state a2b9d@library-invoke-state) (set! a2d4b@a2b9f@library-visit-code a2b9f@library-visit-code) (set! a2d4c@a2ba1@library-invoke-code a2ba1@library-invoke-code) (set! a2d4d@a2ba3@library-guard-code a2ba3@library-guard-code) (set! a2d4e@a2ba5@library-guard-req* a2ba5@library-guard-req*) (set! a2d4f@a2ba7@library-visible? a2ba7@library-visible?) (set! a2d50@a2ba9@library-source-file-name a2ba9@library-source-file-name) (set! a2d51@a2bab@set-library-id! a2bab@set-library-id!) (set! a2d52@a2bad@set-library-name! a2bad@set-library-name!) (set! a2d53@a2baf@set-library-version! a2baf@set-library-version!) (set! a2d54@a2bb1@set-library-imp*! a2bb1@set-library-imp*!) (set! a2d55@a2bb3@set-library-vis*! a2bb3@set-library-vis*!) (set! a2d56@a2bb5@set-library-inv*! a2bb5@set-library-inv*!) (set! a2d57@a2bb7@set-library-subst! a2bb7@set-library-subst!) (set! a2d58@a2bb9@set-library-env! a2bb9@set-library-env!) (set! a2d59@a2bbb@set-library-visit-state! a2bbb@set-library-visit-state!) (set! a2d5a@a2bbd@set-library-invoke-state! a2bbd@set-library-invoke-state!) (set! a2d5b@a2bbf@set-library-visit-code! a2bbf@set-library-visit-code!) (set! a2d5c@a2bc1@set-library-invoke-code! a2bc1@set-library-invoke-code!) (set! a2d5d@a2bc3@set-library-guard-code! a2bc3@set-library-guard-code!) (set! a2d5e@a2bc5@set-library-guard-req*! a2bc5@set-library-guard-req*!) (set! a2d5f@a2bc7@set-library-visible?! a2bc7@set-library-visible?!) (set! a2d60@a2bc9@set-library-source-file-name! a2bc9@set-library-source-file-name!) (set! a2d61@a2bcb@rp a2bcb@rp) (set! a2d62@a2bcd@find-dependencies a2bcd@find-dependencies) (set! a2d63@a2bcf@find-library-by a2bcf@find-library-by) (set! a2d64@a2bd1@library-path a2bd1@library-path) (set! a2d65@a2bd3@library-extensions a2bd3@library-extensions) (set! a2d66@a2bd5@library-name->file-name a2bd5@library-name->file-name) (set! a2d67@a2bd7@file-locator a2bd7@file-locator) (set! a2d68@a2bd9@serialize-all a2bd9@serialize-all) (set! a2d69@a2bdb@current-precompiled-library-loader a2bdb@current-precompiled-library-loader) (set! a2d6a@a2bdd@try-load-from-file a2bdd@try-load-from-file) (set! a2d6b@a2bdf@library-loader a2bdf@library-loader) (set! a2d6c@a2be1@current-library-expander a2be1@current-library-expander) (set! a2d6d@a2be3@external-pending-libraries a2be3@external-pending-libraries) (set! a2d6e@a2be5@find-external-library a2be5@find-external-library) (set! a2d6f@a2be7@find-library-by-name a2be7@find-library-by-name) (set! a2d70@a2be9@uninstall-library a2be9@uninstall-library) (set! a2d71@a2beb@library-exists? a2beb@library-exists?) (set! a2d72@a2bed@find-library-by-spec/die a2bed@find-library-by-spec/die) (set! a2d73@a2bef@label->binding-table a2bef@label->binding-table) (set! a2d74@a2bf1@install-library-record a2bf1@install-library-record) (set! a2d75@a2bf3@install-library a2bf3@install-library) (set! a2d76@a2bf5@imported-label->binding a2bf5@imported-label->binding) (set! a2d77@a2bf7@invoke-library a2bf7@invoke-library) (set! a2d78@a2bf9@visit-library a2bf9@visit-library) (set! a2d79@a2bfb@invoke-library-by-spec a2bfb@invoke-library-by-spec) (set! a2d7a@a2bfd@installed-libraries a2bfd@installed-libraries) (set! a2d7b@a2bff@library-spec a2bff@library-spec)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (a2d7e@build-global-define a2d80@build-application a2dce@build-lambda a2dd0@build-case-lambda a2dd2@build-let a2e00@build-sequence a2e02@build-void a2e04@build-letrec a2e06@build-letrec* a2e08@build-library-letrec*) (begin (set! a2d7e@build-global-define (lambda (a2e1f@x) (a2e02@build-void))) (set! a2d80@build-application (lambda (a2e21@ae a2e22@fun-exp a2e23@arg-exps) (cons a2e22@fun-exp a2e23@arg-exps))) (set! a2dce@build-lambda (lambda (a2e27@ae a2e28@vars a2e29@exp) (list 'lambda a2e28@vars a2e29@exp))) (set! a2dd0@build-case-lambda (lambda (a2e2d@ae a2e2e@vars* a2e2f@exp*) ((lambda (a2e34@build-error a2e36@build-pred a2e38@build-apply a2e3a@expand-case-lambda) (begin (set! a2e34@build-error (lambda (a2e6b@ae) (a2d80@build-application a2e6b@ae '(primitive error) (list ''apply (list 'quote '"invalid arg count"))))) (set! a2e36@build-pred (lambda (a2e53@ae a2e54@n a2e55@vars) (call-with-values (lambda () ((letrec ((a2e5d@f (lambda (a2e5f@vars a2e60@count) (if (pair? a2e5f@vars) (a2e5d@f (cdr a2e5f@vars) (+ a2e60@count '1)) (if (null? a2e5f@vars) (values a2e60@count '=) ((lambda () (begin '#f (values a2e60@count '>=))))))))) a2e5d@f) a2e55@vars '0)) (lambda (a2e63@a2e5a a2e64@a2e5c) ((lambda (a2e67@pred a2e68@count) (a2d80@build-application a2e53@ae (list 'primitive a2e67@pred) (list a2e54@n (list 'quote a2e68@count)))) a2e64@a2e5c a2e63@a2e5a))))) (set! a2e38@build-apply (lambda (a2e4b@ae a2e4c@g a2e4d@vars a2e4e@exp) (a2d80@build-application a2e4b@ae '(primitive apply) (list (a2dce@build-lambda a2e4b@ae a2e4d@vars a2e4e@exp) a2e4c@g)))) (set! a2e3a@expand-case-lambda (lambda (a2e3b@ae a2e3c@vars a2e3d@exp*) ((lambda (a2e41@g a2e42@n) (list 'lambda a2e41@g (a2dd2@build-let a2e3b@ae (list a2e42@n) (list (a2d80@build-application a2e3b@ae '(primitive length) (list a2e41@g))) ((letrec ((a2e45@f (lambda (a2e47@vars* a2e48@exp*) (if (null? a2e47@vars*) (a2e34@build-error a2e3b@ae) (list 'if (a2e36@build-pred a2e3b@ae a2e42@n (car a2e47@vars*)) (a2e38@build-apply a2e3b@ae a2e41@g (car a2e47@vars*) (car a2e48@exp*)) (a2e45@f (cdr a2e47@vars*) (cdr a2e48@exp*))))))) a2e45@f) a2e2e@vars* a2e3d@exp*)))) (gensym) (gensym)))) (if (= (length a2e2f@exp*) '1) (a2dce@build-lambda a2e2d@ae (car a2e2e@vars*) (car a2e2f@exp*)) (a2e3a@expand-case-lambda a2e2d@ae a2e2e@vars* a2e2f@exp*)))) '#f '#f '#f '#f))) (set! a2dd2@build-let (lambda (a2e6d@ae a2e6e@lhs* a2e6f@rhs* a2e70@body) (a2d80@build-application a2e6d@ae (a2dce@build-lambda a2e6d@ae a2e6e@lhs* a2e70@body) a2e6f@rhs*))) (set! a2e00@build-sequence (lambda (a2e75@ae a2e76@exps) ((letrec ((a2e79@loop (lambda (a2e7b@exps) (if (null? (cdr a2e7b@exps)) (car a2e7b@exps) (if (equal? (car a2e7b@exps) (a2e02@build-void)) (a2e79@loop (cdr a2e7b@exps)) (cons 'begin a2e7b@exps)))))) a2e79@loop) a2e76@exps))) (set! a2e02@build-void (lambda () '((primitive void)))) (set! a2e04@build-letrec (lambda (a2e7d@ae a2e7e@vars a2e7f@val-exps a2e80@body-exp) (if (null? a2e7e@vars) a2e80@body-exp (list 'letrec (map list a2e7e@vars a2e7f@val-exps) a2e80@body-exp)))) (set! a2e06@build-letrec* (lambda (a2e85@ae a2e86@vars a2e87@val-exps a2e88@body-exp) (if (null? a2e86@vars) a2e88@body-exp ((lambda () (begin '#f (a2dd2@build-let a2e85@ae a2e86@vars (map (lambda (a2e8d@x) (list 'quote '#f)) a2e86@vars) (a2e00@build-sequence a2e85@ae (append (map (lambda (a2e8f@lhs a2e90@rhs) (list 'set! a2e8f@lhs a2e90@rhs)) a2e86@vars a2e87@val-exps) (list a2e88@body-exp)))))))))) (set! a2e08@build-library-letrec* (lambda (a2e93@ae a2e94@top? a2e95@vars a2e96@locs a2e97@val-exps a2e98@body-exp) (a2e06@build-letrec* a2e93@ae a2e95@vars a2e97@val-exps (if a2e94@top? a2e98@body-exp (a2e00@build-sequence a2e93@ae (cons a2e98@body-exp (map (lambda (a2e9f@var a2ea0@loc) (list 'set! a2ea0@loc a2e9f@var)) a2e95@vars a2e96@locs))))))) (begin (set! a2ea3@a2d7e@build-global-define a2d7e@build-global-define) (set! a2ea4@a2d80@build-application a2d80@build-application) (set! a2ea5@a2dce@build-lambda a2dce@build-lambda) (set! a2ea6@a2dd0@build-case-lambda a2dd0@build-case-lambda) (set! a2ea7@a2dd2@build-let a2dd2@build-let) (set! a2ea8@a2e00@build-sequence a2e00@build-sequence) (set! a2ea9@a2e02@build-void a2e02@build-void) (set! a2eaa@a2e04@build-letrec a2e04@build-letrec) (set! a2eab@a2e06@build-letrec* a2e06@build-letrec*) (set! a2eac@a2e08@build-library-letrec* a2e08@build-library-letrec*)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (a2eba@set-cons a2ebc@set-union a2ec1@top-mark* a2ec3@top-marked? a2ec5@gen-lexical a2ec7@gen-global a2ec9@gen-label a2ecb@gen-top-level-label a2ecd@gen-define-label+loc a2ecf@gen-define-label a2ed5@a2ed0 a2ed7@a2ed2 a2ed9@a2ed1 a2edc@rib? a2ede@make-rib a2ee0@rib-sym* a2ee2@rib-mark** a2ee4@rib-label* a2ee6@rib-sealed/freq a2ee8@set-rib-sym*! a2eea@set-rib-mark**! a2eec@set-rib-label*! a2eee@set-rib-sealed/freq! a2ef0@make-empty-rib a2ef2@top-marked-symbols a2ef4@extend-rib! a2ef6@seal-rib! a2ef8@unseal-rib! a2efa@increment-rib-frequency! a2efc@make-full-rib a2f02@a2efd a2f04@a2eff a2f06@a2efe a2f09@stx? a2f0b@make-stx a2f0d@stx-expr a2f0f@stx-mark* a2f11@stx-subst* a2f13@stx-ae* a2f15@set-stx-expr! a2f17@set-stx-mark*! a2f19@set-stx-subst*! a2f1b@set-stx-ae*! a2f1d@rp a2f1f@datum->stx a2f21@gen-mark a2f23@anti-mark a2f25@anti-mark? a2f27@join-wraps a2f29@mkstx a2f2b@add-mark a2f2d@add-subst a2f2f@syntax-kind? a2f31@syntax-vector->list a2f33@syntax-pair? a2f35@syntax-vector? a2f37@syntax-null? a2f39@syntax-list? a2f3b@syntax-car a2f3d@syntax-cdr a2f3f@syntax->list a2f41@id? a2f43@id->sym a2f45@same-marks? a2f47@bound-id=? a2f49@free-id=? a2f4b@valid-bound-ids? a2f4d@distinct-bound-ids? a2f4f@bound-id-member? a2f51@self-evaluating? a2f53@strip-annotations a2f55@strip a2f57@stx->datum a2f59@id->label/intern a2f5b@id->label a2f5d@label->binding a2f5f@make-binding a2f61@binding-type a2f63@binding-value a2f65@raise-unbound-error a2f67@syntax-type a2f75@sanitize-binding a2f77@make-variable-transformer a2f79@make-compile-time-value a2f7b@variable-transformer? a2f7d@variable-transformer-procedure a2f7f@make-eval-transformer a30d0@parse-define a30d2@parse-define-syntax a30d4@scheme-stx-hashtable a30d6@scheme-stx a30d8@lexical-var a30da@lexical-mutable? a30dc@set-lexical-mutable! a30de@add-lexical a30e0@add-lexicals a30e2@letrec-helper a30e4@letrec-transformer a30e6@letrec*-transformer a30e8@fluid-let-syntax-transformer a30ea@type-descriptor-transformer a30ec@record-type-descriptor-transformer a30ee@record-constructor-descriptor-transformer a30f0@when-macro a30f2@unless-macro a30f4@if-transformer a30f6@and-transformer a30f8@or-transformer a30fa@case-macro a30fc@quote-transformer a30fe@case-lambda-transformer a3100@lambda-transformer a3102@bless a3104@with-syntax-macro a3106@invalid-fmls-error a3108@let-macro a310a@trace-let-macro a310c@let-values-macro a310e@let*-values-macro a3110@trace-lambda-macro a3112@trace-define-macro a3114@trace-define-syntax-macro a3116@trace-let/rec-syntax a3118@trace-let-syntax-macro a311a@trace-letrec-syntax-macro a311c@guard-macro a311e@define-enumeration-macro a3120@time-macro a3122@delay-macro a3124@assert-macro a3126@endianness-macro a3128@identifier-syntax-macro a312a@do-macro a312c@let*-macro a312e@or-macro a3130@and-macro a3132@cond-macro a3134@syntax-rules-macro a3136@quasiquote-macro a3138@quasisyntax-macro a313a@define-struct-macro a313c@define-record-type-macro a313e@define-condition-type-macro a3140@incorrect-usage-macro a3142@parameterize-macro a3144@foreign-call-transformer a3146@convert-pattern a3148@syntax-dispatch a314a@ellipsis? a314c@underscore? a314e@verify-literals a3150@syntax-case-transformer a3152@ellipsis-map a3154@syntax-transformer a3156@core-macro-transformer a3158@file-options-macro a315a@symbol-macro a315c@macro-transformer a315e@local-macro-transformer a3160@do-macro-call a3162@chi-macro a3164@chi-local-macro a3166@chi-global-macro a3168@chi-expr* a316a@chi-application a316c@chi-expr a316e@chi-set! a3170@verify-formals a3172@chi-lambda-clause a3174@chi-lambda-clause* a3176@chi-defun a3178@chi-rhs a317a@expand-interaction-rhs*/init* a317c@chi-rhs* a317e@find-bound=? a3180@find-dups a3182@chi-internal a3184@parse-module a318a@a3185 a318c@a3187 a318e@a3186 a3191@module-interface? a3193@make-module-interface a3195@module-interface-first-mark a3197@module-interface-exp-id-vec a3199@module-interface-exp-lab-vec a319b@set-module-interface-first-mark! a319d@set-module-interface-exp-id-vec! a319f@set-module-interface-exp-lab-vec! a31a1@module-interface-exp-id* a31a3@syntax-transpose a31a5@chi-internal-module a31a7@chi-body* a31a9@expand-transformer a31ab@parse-exports a31ad@parse-library-name a31af@parse-library a31b1@parse-import-spec* a31b3@make-top-rib a31b5@make-collector a31b7@inv-collector a31b9@vis-collector a31bb@imp-collector a31bd@chi-library-internal a31bf@chi-interaction-expr a31c1@library-body-expander a31c3@stale-when-collector a31c5@make-stale-collector a31c7@handle-stale-when a31c9@core-library-expander a31cb@parse-top-level-program a31d1@a31cc a31d3@a31ce a31d5@a31cd a31d8@env? a31da@make-env a31dc@env-names a31de@env-labels a31e0@env-itc a31e2@set-env-names! a31e4@set-env-labels! a31e6@set-env-itc! a31e8@rp a31ee@a31e9 a31f0@a31eb a31f2@a31ea a31f5@interaction-env? a31f7@make-interaction-env a31f9@interaction-env-rib a31fb@interaction-env-r a31fd@interaction-env-locs a31ff@set-interaction-env-rib! a3201@set-interaction-env-r! a3203@set-interaction-env-locs! a3205@rp a3207@environment? a3209@environment-symbols a320b@environment a320d@null-environment a320f@scheme-report-environment a3211@core-expand a3213@eval a3215@initial-visit! a3217@library-expander a3219@boot-library-expand a321b@rev-map-append a321d@build-exports a321f@make-export-subst a3221@make-export-env/macros a3223@generate-temporaries a3225@free-identifier=? a3227@bound-identifier=? a3229@position->condition a322b@extract-position-condition a322d@expression-position a322f@syntax-annotation a3231@assertion-error a3233@syntax-error a3235@extract-trace a3237@syntax-violation* a3239@syntax-violation a323b@identifier? a323d@datum->syntax a323f@syntax->datum a3241@top-level-expander a3243@compile-r6rs-top-level a3245@subst->rib a3247@new-interaction-environment a3249@interaction-environment a324b@top-level-context) (begin (set! a2eba@set-cons (lambda (a324c@x a324d@ls) (if (memq a324c@x a324d@ls) a324d@ls ((lambda () (begin '#f (cons a324c@x a324d@ls))))))) (set! a2ebc@set-union (lambda (a3250@ls1 a3251@ls2) (if (null? a3250@ls1) a3251@ls2 (if (memq (car a3250@ls1) a3251@ls2) (a2ebc@set-union (cdr a3250@ls1) a3251@ls2) ((lambda () (begin '#f (cons (car a3250@ls1) (a2ebc@set-union (cdr a3250@ls1) a3251@ls2))))))))) (set! a2ec1@top-mark* '(top)) (set! a2ec3@top-marked? (lambda (a3254@m*) (memq 'top a3254@m*))) (set! a2ec5@gen-lexical (lambda (a3256@sym) (if (symbol? a3256@sym) (gensym a3256@sym) (if (a2f09@stx? a3256@sym) (a2ec5@gen-lexical (a2f43@id->sym a3256@sym)) ((lambda () (begin '#f (assertion-violation 'gen-lexical '"BUG: invalid arg" a3256@sym)))))))) (set! a2ec7@gen-global (lambda (a3258@x) (a2ec5@gen-lexical a3258@x))) (set! a2ec9@gen-label (lambda (a325a@_) (gensym))) (set! a2ecb@gen-top-level-label (lambda (a325c@id a325d@rib) ((lambda (a3261@find) (begin (set! a3261@find (lambda (a326c@sym a326d@mark* a326e@sym* a326f@mark** a3270@label*) (and (pair? a326e@sym*) (if (and (eq? a326c@sym (car a326e@sym*)) (a2f45@same-marks? a326d@mark* (car a326f@mark**))) (car a3270@label*) (a3261@find a326c@sym a326d@mark* (cdr a326e@sym*) (cdr a326f@mark**) (cdr a3270@label*)))))) ((lambda (a3262@sym a3263@mark*) ((lambda (a3266@sym*) ((lambda (a3268@t) (if a3268@t ((lambda (a326a@label) (if (a2d76@a2bf5@imported-label->binding a326a@label) (gensym) ((lambda () (begin '#f a326a@label))))) a3268@t) ((lambda () (begin '#f (gensym)))))) (and (memq a3262@sym (a2ee0@rib-sym* a325d@rib)) (a3261@find a3262@sym a3263@mark* a3266@sym* (a2ee2@rib-mark** a325d@rib) (a2ee4@rib-label* a325d@rib))))) (a2ee0@rib-sym* a325d@rib))) (a2f43@id->sym a325c@id) (a2f0f@stx-mark* a325c@id)))) '#f))) (set! a2ecd@gen-define-label+loc (lambda (a3276@id a3277@rib a3278@sd?) (if a3278@sd? (values (gensym) (a2ec5@gen-lexical a3276@id)) ((lambda (a327c@env) ((lambda (a327e@label a327f@locs) (values a327e@label ((lambda (a3282@t) (if a3282@t (cdr a3282@t) ((lambda () (begin '#f ((lambda (a3284@loc) (begin (a3203@set-interaction-env-locs! a327c@env (cons (cons a327e@label a3284@loc) a327f@locs)) a3284@loc)) (a2ec5@gen-lexical a3276@id))))))) (assq a327e@label a327f@locs)))) (a2ecb@gen-top-level-label a3276@id a3277@rib) (a31fd@interaction-env-locs a327c@env))) (a324b@top-level-context))))) (set! a2ecf@gen-define-label (lambda (a3286@id a3287@rib a3288@sd?) (if a3288@sd? (gensym) (a2ecb@gen-top-level-label a3286@id a3287@rib)))) (set! a2ed5@a2ed0 (make-record-type-descriptor 'rib '#f 'a2ed3 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq)))) (set! a2ed7@a2ed2 '#f) (set! a2ed9@a2ed1 (make-record-constructor-descriptor a2ed5@a2ed0 '#f a2ed7@a2ed2)) (set! a2edc@rib? (record-predicate a2ed5@a2ed0)) (set! a2ede@make-rib (record-constructor a2ed9@a2ed1)) (set! a2ee0@rib-sym* (record-accessor a2ed5@a2ed0 '0)) (set! a2ee2@rib-mark** (record-accessor a2ed5@a2ed0 '1)) (set! a2ee4@rib-label* (record-accessor a2ed5@a2ed0 '2)) (set! a2ee6@rib-sealed/freq (record-accessor a2ed5@a2ed0 '3)) (set! a2ee8@set-rib-sym*! (record-mutator a2ed5@a2ed0 '0)) (set! a2eea@set-rib-mark**! (record-mutator a2ed5@a2ed0 '1)) (set! a2eec@set-rib-label*! (record-mutator a2ed5@a2ed0 '2)) (set! a2eee@set-rib-sealed/freq! (record-mutator a2ed5@a2ed0 '3)) (set! a2ef0@make-empty-rib (lambda () (a2ede@make-rib '() '() '() '#f))) (set! a2ef2@top-marked-symbols (lambda (a328c@rib) (call-with-values (lambda () ((lambda (a3292@sym* a3293@mark**) (if (a2ee6@rib-sealed/freq a328c@rib) (values (vector->list a3292@sym*) (vector->list a3293@mark**)) (values a3292@sym* a3293@mark**))) (a2ee0@rib-sym* a328c@rib) (a2ee2@rib-mark** a328c@rib))) (lambda (a3296@a328f a3297@a3291) ((lambda (a329a@mark** a329b@sym*) ((letrec ((a329e@f (lambda (a32a0@sym* a32a1@mark**) (if (null? a32a0@sym*) '() (if (fast-equal? (car a32a1@mark**) a2ec1@top-mark*) (cons (car a32a0@sym*) (a329e@f (cdr a32a0@sym*) (cdr a32a1@mark**))) ((lambda () (begin '#f (a329e@f (cdr a32a0@sym*) (cdr a32a1@mark**)))))))))) a329e@f) a329b@sym* a329a@mark**)) a3297@a3291 a3296@a328f))))) (set! a2ef4@extend-rib! (lambda (a32a4@rib a32a5@id a32a6@label a32a7@sd?) ((lambda (a32ad@find) (begin (set! a32ad@find (lambda (a32b8@sym a32b9@mark* a32ba@sym* a32bb@mark** a32bc@label*) (and (pair? a32ba@sym*) (if (and (eq? a32b8@sym (car a32ba@sym*)) (a2f45@same-marks? a32b9@mark* (car a32bb@mark**))) a32bc@label* (a32ad@find a32b8@sym a32b9@mark* (cdr a32ba@sym*) (cdr a32bb@mark**) (cdr a32bc@label*)))))) (begin (if (a2ee6@rib-sealed/freq a32a4@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" a32a4@rib) (void)) ((lambda (a32ae@sym a32af@mark*) ((lambda (a32b2@sym*) ((lambda (a32b4@t) (if a32b4@t ((lambda (a32b6@p) (if (not (eq? a32a6@label (car a32b6@p))) (if (not a32a7@sd?) (set-car! a32b6@p a32a6@label) ((lambda () (begin '#f (a3239@syntax-violation '#f '"multiple definitions of identifier" a32a5@id))))) (void))) a32b4@t) ((lambda () (begin '#f (a2ee8@set-rib-sym*! a32a4@rib (cons a32ae@sym a32b2@sym*)) (a2eea@set-rib-mark**! a32a4@rib (cons a32af@mark* (a2ee2@rib-mark** a32a4@rib))) (a2eec@set-rib-label*! a32a4@rib (cons a32a6@label (a2ee4@rib-label* a32a4@rib)))))))) (and (memq a32ae@sym (a2ee0@rib-sym* a32a4@rib)) (a32ad@find a32ae@sym a32af@mark* a32b2@sym* (a2ee2@rib-mark** a32a4@rib) (a2ee4@rib-label* a32a4@rib))))) (a2ee0@rib-sym* a32a4@rib))) (a2f43@id->sym a32a5@id) (a2f0f@stx-mark* a32a5@id))))) '#f))) (set! a2ef6@seal-rib! (lambda (a32c2@rib) ((lambda (a32c4@sym*) (if (not (null? a32c4@sym*)) ((lambda (a32c6@sym*) (begin (a2ee8@set-rib-sym*! a32c2@rib a32c6@sym*) (a2eea@set-rib-mark**! a32c2@rib (list->vector (a2ee2@rib-mark** a32c2@rib))) (a2eec@set-rib-label*! a32c2@rib (list->vector (a2ee4@rib-label* a32c2@rib))) (a2eee@set-rib-sealed/freq! a32c2@rib (make-vector (vector-length a32c6@sym*) '0)))) (list->vector a32c4@sym*)) (void))) (a2ee0@rib-sym* a32c2@rib)))) (set! a2ef8@unseal-rib! (lambda (a32c8@rib) (if (a2ee6@rib-sealed/freq a32c8@rib) (begin (a2eee@set-rib-sealed/freq! a32c8@rib '#f) (a2ee8@set-rib-sym*! a32c8@rib (vector->list (a2ee0@rib-sym* a32c8@rib))) (a2eea@set-rib-mark**! a32c8@rib (vector->list (a2ee2@rib-mark** a32c8@rib))) (a2eec@set-rib-label*! a32c8@rib (vector->list (a2ee4@rib-label* a32c8@rib)))) (void)))) (set! a2efa@increment-rib-frequency! (lambda (a32ca@rib a32cb@idx) ((lambda (a32ce@freq*) ((lambda (a32d0@freq) ((lambda (a32d2@i) (begin (vector-set! a32ce@freq* a32d2@i (+ a32d0@freq '1)) (if (not (= a32d2@i a32cb@idx)) ((lambda (a32d4@sym* a32d5@mark** a32d6@label*) (begin ((lambda (a32da@sym) (begin (vector-set! a32d4@sym* a32cb@idx (vector-ref a32d4@sym* a32d2@i)) (vector-set! a32d4@sym* a32d2@i a32da@sym))) (vector-ref a32d4@sym* a32cb@idx)) ((lambda (a32dc@mark*) (begin (vector-set! a32d5@mark** a32cb@idx (vector-ref a32d5@mark** a32d2@i)) (vector-set! a32d5@mark** a32d2@i a32dc@mark*))) (vector-ref a32d5@mark** a32cb@idx)) ((lambda (a32de@label) (begin (vector-set! a32d6@label* a32cb@idx (vector-ref a32d6@label* a32d2@i)) (vector-set! a32d6@label* a32d2@i a32de@label))) (vector-ref a32d6@label* a32cb@idx)))) (a2ee0@rib-sym* a32ca@rib) (a2ee2@rib-mark** a32ca@rib) (a2ee4@rib-label* a32ca@rib)) (void)))) ((letrec ((a32e0@f (lambda (a32e2@i) (if (zero? a32e2@i) '0 ((lambda () (begin '#f ((lambda (a32e4@j) (if (= a32d0@freq (vector-ref a32ce@freq* a32e4@j)) (a32e0@f a32e4@j) ((lambda () (begin '#f a32e2@i))))) (- a32e2@i '1))))))))) a32e0@f) a32cb@idx))) (vector-ref a32ce@freq* a32cb@idx))) (a2ee6@rib-sealed/freq a32ca@rib)))) (set! a2efc@make-full-rib (lambda (a32e6@id* a32e7@label*) (a2ede@make-rib (map a2f43@id->sym a32e6@id*) (map a2f0f@stx-mark* a32e6@id*) a32e7@label* '#f))) (set! a2f02@a2efd (make-record-type-descriptor 'stx '#f 'a2f00 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! a2f04@a2eff '#f) (set! a2f06@a2efe (make-record-constructor-descriptor a2f02@a2efd '#f a2f04@a2eff)) (set! a2f09@stx? (record-predicate a2f02@a2efd)) (set! a2f0b@make-stx (record-constructor a2f06@a2efe)) (set! a2f0d@stx-expr (record-accessor a2f02@a2efd '0)) (set! a2f0f@stx-mark* (record-accessor a2f02@a2efd '1)) (set! a2f11@stx-subst* (record-accessor a2f02@a2efd '2)) (set! a2f13@stx-ae* (record-accessor a2f02@a2efd '3)) (set! a2f15@set-stx-expr! (record-mutator a2f02@a2efd '0)) (set! a2f17@set-stx-mark*! (record-mutator a2f02@a2efd '1)) (set! a2f19@set-stx-subst*! (record-mutator a2f02@a2efd '2)) (set! a2f1b@set-stx-ae*! (record-mutator a2f02@a2efd '3)) (set! a2f1d@rp (a2ab3@a295b@make-record-printer 'stx (lambda (a32ea@x a32eb@p a32ec@wr) (begin (display '"#<syntax " a32eb@p) (write (a2f57@stx->datum a32ea@x) a32eb@p) ((lambda (a32f0@expr) (if (a2ac7@a298b@annotation? a32f0@expr) ((lambda (a32f2@src) (if (pair? a32f2@src) (begin (display '" [char " a32eb@p) (display (cdr a32f2@src) a32eb@p) (display '" of " a32eb@p) (display (car a32f2@src) a32eb@p) (display '"]" a32eb@p)) (void))) (a2ac8@a298d@annotation-source a32f0@expr)) (void))) (a2f0d@stx-expr a32ea@x)) (display '">" a32eb@p))))) (set! a2f1f@datum->stx (lambda (a32f4@id a32f5@datum) (a2f0b@make-stx a32f5@datum (a2f0f@stx-mark* a32f4@id) (a2f11@stx-subst* a32f4@id) (a2f13@stx-ae* a32f4@id)))) (set! a2f21@gen-mark (lambda () (string '#\m))) (set! a2f23@anti-mark '#f) (set! a2f25@anti-mark? not) (set! a2f27@join-wraps (lambda (a32f8@m1* a32f9@s1* a32fa@ae1* a32fb@e) ((lambda (a3301@cancel) (begin (set! a3301@cancel (lambda (a3308@ls1 a3309@ls2) ((letrec ((a330c@f (lambda (a330e@x a330f@ls1) (if (null? a330f@ls1) (cdr a3309@ls2) (cons a330e@x (a330c@f (car a330f@ls1) (cdr a330f@ls1))))))) a330c@f) (car a3308@ls1) (cdr a3308@ls1)))) ((lambda (a3302@m2* a3303@s2* a3304@ae2*) (if (and (not (null? a32f8@m1*)) (not (null? a3302@m2*)) (a2f25@anti-mark? (car a3302@m2*))) (values (a3301@cancel a32f8@m1* a3302@m2*) (a3301@cancel a32f9@s1* a3303@s2*) (a3301@cancel a32fa@ae1* a3304@ae2*)) (values (append a32f8@m1* a3302@m2*) (append a32f9@s1* a3303@s2*) (append a32fa@ae1* a3304@ae2*)))) (a2f0f@stx-mark* a32fb@e) (a2f11@stx-subst* a32fb@e) (a2f13@stx-ae* a32fb@e)))) '#f))) (set! a2f29@mkstx (lambda (a3312@e a3313@m* a3314@s* a3315@ae*) (if (and (a2f09@stx? a3312@e) (not (a2ec3@top-marked? a3313@m*))) (call-with-values (lambda () (a2f27@join-wraps a3313@m* a3314@s* a3315@ae* a3312@e)) (lambda (a3320@a331b a3321@a331d a3322@a331f) ((lambda (a3326@ae* a3327@s* a3328@m*) (a2f0b@make-stx (a2f0d@stx-expr a3312@e) a3328@m* a3327@s* a3326@ae*)) a3322@a331f a3321@a331d a3320@a331b))) (a2f0b@make-stx a3312@e a3313@m* a3314@s* a3315@ae*)))) (set! a2f2b@add-mark (lambda (a332c@m a332d@e a332e@ae) (a2f29@mkstx a332d@e (list a332c@m) '(shift) (list a332e@ae)))) (set! a2f2d@add-subst (lambda (a3332@subst a3333@e) (a2f29@mkstx a3333@e '() (list a3332@subst) '()))) (set! a2f2f@syntax-kind? (lambda (a3336@x a3337@p?) (if (a2f09@stx? a3336@x) (a2f2f@syntax-kind? (a2f0d@stx-expr a3336@x) a3337@p?) (if (a2ac7@a298b@annotation? a3336@x) (a2f2f@syntax-kind? (a2ac9@a298f@annotation-expression a3336@x) a3337@p?) ((lambda () (begin '#f (a3337@p? a3336@x)))))))) (set! a2f31@syntax-vector->list (lambda (a333a@x) (if (a2f09@stx? a333a@x) ((lambda (a333c@ls a333d@m* a333e@s* a333f@ae*) (map (lambda (a3344@x) (a2f29@mkstx a3344@x a333d@m* a333e@s* a333f@ae*)) a333c@ls)) (a2f31@syntax-vector->list (a2f0d@stx-expr a333a@x)) (a2f0f@stx-mark* a333a@x) (a2f11@stx-subst* a333a@x) (a2f13@stx-ae* a333a@x)) (if (a2ac7@a298b@annotation? a333a@x) (a2f31@syntax-vector->list (a2ac9@a298f@annotation-expression a333a@x)) (if (vector? a333a@x) (vector->list a333a@x) ((lambda () (begin '#f (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" a333a@x))))))))) (set! a2f33@syntax-pair? (lambda (a3346@x) (a2f2f@syntax-kind? a3346@x pair?))) (set! a2f35@syntax-vector? (lambda (a3348@x) (a2f2f@syntax-kind? a3348@x vector?))) (set! a2f37@syntax-null? (lambda (a334a@x) (a2f2f@syntax-kind? a334a@x null?))) (set! a2f39@syntax-list? (lambda (a334c@x) (or (a2f37@syntax-null? a334c@x) (and (a2f33@syntax-pair? a334c@x) (a2f39@syntax-list? (a2f3d@syntax-cdr a334c@x)))))) (set! a2f3b@syntax-car (lambda (a334e@x) (if (a2f09@stx? a334e@x) (a2f29@mkstx (a2f3b@syntax-car (a2f0d@stx-expr a334e@x)) (a2f0f@stx-mark* a334e@x) (a2f11@stx-subst* a334e@x) (a2f13@stx-ae* a334e@x)) (if (a2ac7@a298b@annotation? a334e@x) (a2f3b@syntax-car (a2ac9@a298f@annotation-expression a334e@x)) (if (pair? a334e@x) (car a334e@x) ((lambda () (begin '#f (assertion-violation 'syntax-car '"BUG: not a pair" a334e@x))))))))) (set! a2f3d@syntax-cdr (lambda (a3350@x) (if (a2f09@stx? a3350@x) (a2f29@mkstx (a2f3d@syntax-cdr (a2f0d@stx-expr a3350@x)) (a2f0f@stx-mark* a3350@x) (a2f11@stx-subst* a3350@x) (a2f13@stx-ae* a3350@x)) (if (a2ac7@a298b@annotation? a3350@x) (a2f3d@syntax-cdr (a2ac9@a298f@annotation-expression a3350@x)) (if (pair? a3350@x) (cdr a3350@x) ((lambda () (begin '#f (assertion-violation 'syntax-cdr '"BUG: not a pair" a3350@x))))))))) (set! a2f3f@syntax->list (lambda (a3352@x) (if (a2f33@syntax-pair? a3352@x) (cons (a2f3b@syntax-car a3352@x) (a2f3f@syntax->list (a2f3d@syntax-cdr a3352@x))) (if (a2f37@syntax-null? a3352@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" a3352@x))))) (set! a2f41@id? (lambda (a3354@x) (and (a2f09@stx? a3354@x) (symbol? (a2f0d@stx-expr a3354@x))))) (set! a2f43@id->sym (lambda (a3356@x) (a2f0d@stx-expr a3356@x))) (set! a2f45@same-marks? (lambda (a3358@x a3359@y) (or (and (null? a3358@x) (null? a3359@y)) (and (pair? a3358@x) (pair? a3359@y) (eq? (car a3358@x) (car a3359@y)) (a2f45@same-marks? (cdr a3358@x) (cdr a3359@y)))))) (set! a2f47@bound-id=? (lambda (a335c@x a335d@y) (and (eq? (a2f43@id->sym a335c@x) (a2f43@id->sym a335d@y)) (a2f45@same-marks? (a2f0f@stx-mark* a335c@x) (a2f0f@stx-mark* a335d@y))))) (set! a2f49@free-id=? (lambda (a3360@i a3361@j) ((lambda (a3364@t0 a3365@t1) (if (or a3364@t0 a3365@t1) (eq? a3364@t0 a3365@t1) (eq? (a2f43@id->sym a3360@i) (a2f43@id->sym a3361@j)))) (a2f5b@id->label a3360@i) (a2f5b@id->label a3361@j)))) (set! a2f4b@valid-bound-ids? (lambda (a3368@id*) (and (for-all a2f41@id? a3368@id*) (a2f4d@distinct-bound-ids? a3368@id*)))) (set! a2f4d@distinct-bound-ids? (lambda (a336a@id*) (or (null? a336a@id*) (and (not (a2f4f@bound-id-member? (car a336a@id*) (cdr a336a@id*))) (a2f4d@distinct-bound-ids? (cdr a336a@id*)))))) (set! a2f4f@bound-id-member? (lambda (a336c@id a336d@id*) (and (pair? a336d@id*) (or (a2f47@bound-id=? a336c@id (car a336d@id*)) (a2f4f@bound-id-member? a336c@id (cdr a336d@id*)))))) (set! a2f51@self-evaluating? (lambda (a3370@x) (or (number? a3370@x) (string? a3370@x) (char? a3370@x) (boolean? a3370@x) (regexp? a3370@x) (bytevector? a3370@x)))) (set! a2f53@strip-annotations (lambda (a3372@x) (if (pair? a3372@x) (cons (a2f53@strip-annotations (car a3372@x)) (a2f53@strip-annotations (cdr a3372@x))) (if (vector? a3372@x) (vector-map a2f53@strip-annotations a3372@x) (if (a2ac7@a298b@annotation? a3372@x) (a2ac6@a2989@annotation-stripped a3372@x) ((lambda () (begin '#f a3372@x)))))))) (set! a2f55@strip (lambda (a3374@x a3375@m*) (if (a2ec3@top-marked? a3375@m*) (if (or (a2ac7@a298b@annotation? a3374@x) (and (pair? a3374@x) (a2ac7@a298b@annotation? (car a3374@x))) (and (vector? a3374@x) (> (vector-length a3374@x) '0) (a2ac7@a298b@annotation? (vector-ref a3374@x '0)))) (a2f53@strip-annotations a3374@x) a3374@x) ((letrec ((a3378@f (lambda (a337a@x) (if (a2f09@stx? a337a@x) (a2f55@strip (a2f0d@stx-expr a337a@x) (a2f0f@stx-mark* a337a@x)) (if (a2ac7@a298b@annotation? a337a@x) (a2ac6@a2989@annotation-stripped a337a@x) (if (pair? a337a@x) ((lambda (a337c@a a337d@d) (if (and (eq? a337c@a (car a337a@x)) (eq? a337d@d (cdr a337a@x))) a337a@x (cons a337c@a a337d@d))) (a3378@f (car a337a@x)) (a3378@f (cdr a337a@x))) (if (vector? a337a@x) ((lambda (a3380@old) ((lambda (a3382@new) (if (for-all eq? a3380@old a3382@new) a337a@x (list->vector a3382@new))) (map a3378@f a3380@old))) (vector->list a337a@x)) ((lambda () (begin '#f a337a@x)))))))))) a3378@f) a3374@x)))) (set! a2f57@stx->datum (lambda (a3384@x) (a2f55@strip a3384@x '()))) (set! a2f59@id->label/intern (lambda (a3386@id) (or (a2f5b@id->label a3386@id) ((lambda (a3388@t) (if a3388@t ((lambda (a338a@env) ((lambda (a338c@rib) (call-with-values (lambda () (a2ecd@gen-define-label+loc a3386@id a338c@rib '#f)) (lambda (a3392@a338f a3393@a3391) ((lambda (a3396@_loc a3397@lab) (begin (a2ef4@extend-rib! a338c@rib a3386@id a3397@lab '#t) a3397@lab)) a3393@a3391 a3392@a338f)))) (a31f9@interaction-env-rib a338a@env))) a3388@t) ((lambda () (begin '#f '#f))))) (a324b@top-level-context))))) (set! a2f5b@id->label (lambda (a339a@id) ((lambda (a339c@sym) ((letrec ((a339e@search (lambda (a33a0@subst* a33a1@mark*) (if (null? a33a0@subst*) '#f (if (eq? (car a33a0@subst*) 'shift) (a339e@search (cdr a33a0@subst*) (cdr a33a1@mark*)) ((lambda () (begin '#f ((lambda (a33a4@rib) (if (a2ee6@rib-sealed/freq a33a4@rib) ((lambda (a33a6@sym*) ((letrec ((a33a8@f (lambda (a33aa@i a33ab@j) (if (= a33aa@i a33ab@j) (a339e@search (cdr a33a0@subst*) a33a1@mark*) (if (and (eq? (vector-ref a33a6@sym* a33aa@i) a339c@sym) (a2f45@same-marks? a33a1@mark* (vector-ref (a2ee2@rib-mark** a33a4@rib) a33aa@i))) ((lambda (a33ae@label) (begin (a2efa@increment-rib-frequency! a33a4@rib a33aa@i) a33ae@label)) (vector-ref (a2ee4@rib-label* a33a4@rib) a33aa@i)) ((lambda () (begin '#f (a33a8@f (+ a33aa@i '1) a33ab@j))))))))) a33a8@f) '0 (vector-length a33a6@sym*))) (a2ee0@rib-sym* a33a4@rib)) ((lambda () (begin '#f ((letrec ((a33b0@f (lambda (a33b2@sym* a33b3@mark** a33b4@label*) (if (null? a33b2@sym*) (a339e@search (cdr a33a0@subst*) a33a1@mark*) (if (and (eq? (car a33b2@sym*) a339c@sym) (a2f45@same-marks? (car a33b3@mark**) a33a1@mark*)) (car a33b4@label*) ((lambda () (begin '#f (a33b0@f (cdr a33b2@sym*) (cdr a33b3@mark**) (cdr a33b4@label*)))))))))) a33b0@f) (a2ee0@rib-sym* a33a4@rib) (a2ee2@rib-mark** a33a4@rib) (a2ee4@rib-label* a33a4@rib))))))) (car a33a0@subst*)))))))))) a339e@search) (a2f11@stx-subst* a339a@id) (a2f0f@stx-mark* a339a@id))) (a2f43@id->sym a339a@id)))) (set! a2f5d@label->binding (lambda (a33b8@x a33b9@r) (if (not a33b8@x) '(displaced-lexical) ((lambda (a33bc@t) (if a33bc@t ((lambda (a33be@b) (if (and (pair? a33be@b) (eq? (car a33be@b) '$core-rtd)) (cons '$rtd (map a3102@bless (cdr a33be@b))) (if (and (pair? a33be@b) (eq? (car a33be@b) 'global-rtd)) ((lambda (a33c0@lib a33c1@loc) (cons '$rtd (symbol-value a33c1@loc))) (cadr a33be@b) (cddr a33be@b)) ((lambda () (begin '#f a33be@b)))))) a33bc@t) ((lambda (a33c4@t) (if a33c4@t (cdr a33c4@t) ((lambda (a33c6@t) (if a33c6@t ((lambda (a33c8@env) ((lambda (a33ca@t) (if a33ca@t ((lambda (a33cc@p) (cons* 'lexical (cdr a33cc@p) '#f)) a33ca@t) ((lambda () (begin '#f '(displaced-lexical . #f)))))) (assq a33b8@x (a31fd@interaction-env-locs a33c8@env)))) a33c6@t) ((lambda () (begin '#f '(displaced-lexical . #f)))))) (a324b@top-level-context)))) (assq a33b8@x a33b9@r)))) (a2d76@a2bf5@imported-label->binding a33b8@x))))) (set! a2f5f@make-binding cons) (set! a2f61@binding-type car) (set! a2f63@binding-value cdr) (set! a2f65@raise-unbound-error (lambda (a33ce@id) (a3237@syntax-violation* '#f '"unbound identifier" a33ce@id (a507c@a4ec2@make-undefined-violation)))) (set! a2f67@syntax-type (lambda (a33d0@e a33d1@r) (if (a2f41@id? a33d0@e) ((lambda (a33d4@id) ((lambda (a33d6@label) ((lambda (a33d8@b) ((lambda (a33da@type) ((lambda () (begin (if (not a33d6@label) (a2f65@raise-unbound-error a33d4@id) (void)) ((lambda (a33dc@t) (if (memv a33dc@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable ctv local-ctv global-ctv)) (values a33da@type (a2f63@binding-value a33d8@b) a33d4@id) ((lambda () (begin '#f (values 'other '#f '#f)))))) a33da@type))))) (a2f61@binding-type a33d8@b))) (a2f5d@label->binding a33d6@label a33d1@r))) (a2f59@id->label/intern a33d4@id))) a33d0@e) (if (a2f33@syntax-pair? a33d0@e) ((lambda (a33de@id) (if (a2f41@id? a33de@id) ((lambda (a33e0@label) ((lambda (a33e2@b) ((lambda (a33e4@type) ((lambda () (begin (if (not a33e0@label) (a2f65@raise-unbound-error a33de@id) (void)) ((lambda (a33e6@t) (if (memv a33e6@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd ctv local-ctv global-ctv stale-when)) (values a33e4@type (a2f63@binding-value a33e2@b) a33de@id) ((lambda () (begin '#f (values 'call '#f '#f)))))) a33e4@type))))) (a2f61@binding-type a33e2@b))) (a2f5d@label->binding a33e0@label a33d1@r))) (a2f59@id->label/intern a33de@id)) (values 'call '#f '#f))) (a2f3b@syntax-car a33d0@e)) ((lambda () (begin '#f ((lambda (a33e8@d) (if (a2f51@self-evaluating? a33e8@d) (values 'constant a33e8@d '#f) (values 'other '#f '#f))) (a2f57@stx->datum a33d0@e))))))))) (set! a2f75@sanitize-binding (lambda (a33ea@x a33eb@src) (if (procedure? a33ea@x) (cons* 'local-macro a33ea@x a33eb@src) (if (and (pair? a33ea@x) (eq? (car a33ea@x) 'macro!) (procedure? (cdr a33ea@x))) (cons* 'local-macro! (cdr a33ea@x) a33eb@src) (if (and (pair? a33ea@x) (eq? (car a33ea@x) '$rtd)) a33ea@x (if (and (pair? a33ea@x) (eq? (car a33ea@x) 'ctv)) (cons* 'local-ctv (cdr a33ea@x) a33eb@src) ((lambda () (begin '#f (assertion-violation 'expand '"invalid transformer" a33ea@x)))))))))) (set! a2f77@make-variable-transformer (lambda (a33ee@x) (if (procedure? a33ee@x) (cons 'macro! a33ee@x) (assertion-violation 'make-variable-transformer '"not a procedure" a33ee@x)))) (set! a2f79@make-compile-time-value (lambda (a33f0@x) (cons 'ctv a33f0@x))) (set! a2f7b@variable-transformer? (lambda (a33f2@x) (and (pair? a33f2@x) (eq? (car a33f2@x) 'macro!) (procedure? (cdr a33f2@x))))) (set! a2f7d@variable-transformer-procedure (lambda (a33f4@x) (if (a2f7b@variable-transformer? a33f4@x) (cdr a33f4@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" a33f4@x)))) (set! a2f7f@make-eval-transformer (lambda (a33f6@x) (a2f75@sanitize-binding (eval-core (a2b17@a2ad7@expanded->core a33f6@x)) a33f6@x))) (set! a30d0@parse-define (lambda (a33f8@x) ((lambda (a33fa@t) ((lambda (a33fc@ls/false) (if (and a33fc@ls/false (apply (lambda (a33fe@id a33ff@fmls a3400@b a3401@b*) (a2f41@id? a33fe@id)) a33fc@ls/false)) (apply (lambda (a3406@id a3407@fmls a3408@b a3409@b*) (begin (a3170@verify-formals a3407@fmls a33f8@x) (values a3406@id (cons 'defun a33f8@x)))) a33fc@ls/false) ((lambda (a340e@t) ((lambda (a3410@ls/false) (if (and a3410@ls/false (apply (lambda (a3412@id a3413@val) (a2f41@id? a3412@id)) a3410@ls/false)) (apply (lambda (a3416@id a3417@val) (values a3416@id (cons 'expr a3417@val))) a3410@ls/false) ((lambda (a341a@t) ((lambda (a341c@ls/false) (if (and a341c@ls/false (apply (lambda (a341e@id) (a2f41@id? a341e@id)) a341c@ls/false)) (apply (lambda (a3420@id) (values a3420@id (cons 'expr (a3102@bless '(void))))) a341c@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a341a@t))) (a3148@syntax-dispatch a341a@t '(_ any)))) a340e@t))) (a3148@syntax-dispatch a340e@t '(_ any any)))) a33fa@t))) (a3148@syntax-dispatch a33fa@t '(_ (any . any) any . each-any)))) a33f8@x))) (set! a30d2@parse-define-syntax (lambda (a3422@x) ((lambda (a3424@t) ((lambda (a3426@ls/false) (if (and a3426@ls/false (apply (lambda (a3428@id a3429@val) (a2f41@id? a3428@id)) a3426@ls/false)) (apply (lambda (a342c@id a342d@val) (values a342c@id a342d@val)) a3426@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3424@t))) (a3148@syntax-dispatch a3424@t '(_ any any)))) a3422@x))) (set! a30d4@scheme-stx-hashtable (make-eq-hashtable)) (set! a30d6@scheme-stx (lambda (a3430@sym) (or (hashtable-ref a30d4@scheme-stx-hashtable a3430@sym '#f) ((lambda (a3432@subst) ((lambda (a3434@stx) ((lambda (a3436@stx) ((lambda () (begin (hashtable-set! a30d4@scheme-stx-hashtable a3430@sym a3436@stx) a3436@stx)))) ((lambda (a3438@t) (if a3438@t ((lambda (a343a@x) ((lambda (a343c@name a343d@label) (a2f2d@add-subst (a2ede@make-rib (list a343c@name) (list a2ec1@top-mark*) (list a343d@label) '#f) a3434@stx)) (car a343a@x) (cdr a343a@x))) a3438@t) ((lambda () (begin '#f a3434@stx))))) (assq a3430@sym a3432@subst)))) (a2f0b@make-stx a3430@sym a2ec1@top-mark* '() '()))) (a2d47@a2b97@library-subst (a2d6f@a2be7@find-library-by-name '(psyntax system $all))))))) (set! a30d8@lexical-var car) (set! a30da@lexical-mutable? cdr) (set! a30dc@set-lexical-mutable! set-cdr!) (set! a30de@add-lexical (lambda (a3440@lab a3441@lex a3442@r) (cons (cons* a3440@lab 'lexical a3441@lex '#f) a3442@r))) (set! a30e0@add-lexicals (lambda (a3446@lab* a3447@lex* a3448@r) (if (null? a3446@lab*) a3448@r ((lambda () (begin '#f (a30e0@add-lexicals (cdr a3446@lab*) (cdr a3447@lex*) (a30de@add-lexical (car a3446@lab*) (car a3447@lex*) a3448@r)))))))) (set! a30e2@letrec-helper (lambda (a344c@e a344d@r a344e@mr a344f@build) ((lambda (a3454@t) ((lambda (a3456@ls/false) (if a3456@ls/false (apply (lambda (a3458@lhs* a3459@rhs* a345a@b a345b@b*) (if (not (a2f4b@valid-bound-ids? a3458@lhs*)) (a3106@invalid-fmls-error a344c@e a3458@lhs*) ((lambda (a3460@lex* a3461@lab*) ((lambda (a3464@rib a3465@r) ((lambda (a3468@body a3469@rhs*) (a344f@build '#f a3460@lex* a3469@rhs* a3468@body)) (a3182@chi-internal (a2f2d@add-subst a3464@rib (cons a345a@b a345b@b*)) a3465@r a344e@mr) (a3168@chi-expr* (map (lambda (a346c@x) (a2f2d@add-subst a3464@rib a346c@x)) a3459@rhs*) a3465@r a344e@mr))) (a2efc@make-full-rib a3458@lhs* a3461@lab*) (a30e0@add-lexicals a3461@lab* a3460@lex* a344d@r))) (map a2ec5@gen-lexical a3458@lhs*) (map a2ec9@gen-label a3458@lhs*)))) a3456@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3454@t))) (a3148@syntax-dispatch a3454@t '(_ #(each (any any)) any . each-any)))) a344c@e))) (set! a30e4@letrec-transformer (lambda (a346e@e a346f@r a3470@mr) (a30e2@letrec-helper a346e@e a346f@r a3470@mr a2eaa@a2e04@build-letrec))) (set! a30e6@letrec*-transformer (lambda (a3474@e a3475@r a3476@mr) (a30e2@letrec-helper a3474@e a3475@r a3476@mr a2eab@a2e06@build-letrec*))) (set! a30e8@fluid-let-syntax-transformer (lambda (a347a@e a347b@r a347c@mr) ((lambda (a3481@lookup) (begin (set! a3481@lookup (lambda (a3494@x) (or (a2f5b@id->label a3494@x) (a3239@syntax-violation '#f '"unbound identifier" a347a@e a3494@x)))) ((lambda (a3482@t) ((lambda (a3484@ls/false) (if a3484@ls/false (apply (lambda (a3486@lhs* a3487@rhs* a3488@b a3489@b*) (if (not (a2f4b@valid-bound-ids? a3486@lhs*)) (a3106@invalid-fmls-error a347a@e a3486@lhs*) ((lambda (a348e@lab* a348f@rhs*) (a3182@chi-internal (cons a3488@b a3489@b*) (append (map cons a348e@lab* a348f@rhs*) a347b@r) (append (map cons a348e@lab* a348f@rhs*) a347c@mr))) (map a3481@lookup a3486@lhs*) (map (lambda (a3492@x) (a2f7f@make-eval-transformer (a31a9@expand-transformer a3492@x a347c@mr))) a3487@rhs*)))) a3484@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3482@t))) (a3148@syntax-dispatch a3482@t '(_ #(each (any any)) any . each-any)))) a347a@e))) '#f))) (set! a30ea@type-descriptor-transformer (lambda (a3496@e a3497@r a3498@mr) ((lambda (a349c@t) ((lambda (a349e@ls/false) (if (and a349e@ls/false (apply (lambda (a34a0@id) (a2f41@id? a34a0@id)) a349e@ls/false)) (apply (lambda (a34a2@id) ((lambda (a34a4@lab) ((lambda (a34a6@b) ((lambda (a34a8@type) ((lambda () (begin (if (not a34a4@lab) (a2f65@raise-unbound-error a34a2@id) (void)) (if (not (and (eq? a34a8@type '$rtd) (not (list? (a2f63@binding-value a34a6@b))))) (a3239@syntax-violation '#f '"not a record type" a3496@e) (void)) (list 'quote (a2f63@binding-value a34a6@b)))))) (a2f61@binding-type a34a6@b))) (a2f5d@label->binding a34a4@lab a3497@r))) (a2f5b@id->label a34a2@id))) a349e@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a349c@t))) (a3148@syntax-dispatch a349c@t '(_ any)))) a3496@e))) (set! a30ec@record-type-descriptor-transformer (lambda (a34aa@e a34ab@r a34ac@mr) ((lambda (a34b0@t) ((lambda (a34b2@ls/false) (if (and a34b2@ls/false (apply (lambda (a34b4@id) (a2f41@id? a34b4@id)) a34b2@ls/false)) (apply (lambda (a34b6@id) ((lambda (a34b8@lab) ((lambda (a34ba@b) ((lambda (a34bc@type) ((lambda () (begin (if (not a34b8@lab) (a2f65@raise-unbound-error a34b6@id) (void)) (if (not (and (eq? a34bc@type '$rtd) (list? (a2f63@binding-value a34ba@b)))) (a3239@syntax-violation '#f '"not a record type" a34aa@e) (void)) (a316c@chi-expr (car (a2f63@binding-value a34ba@b)) a34ab@r a34ac@mr))))) (a2f61@binding-type a34ba@b))) (a2f5d@label->binding a34b8@lab a34ab@r))) (a2f5b@id->label a34b6@id))) a34b2@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a34b0@t))) (a3148@syntax-dispatch a34b0@t '(_ any)))) a34aa@e))) (set! a30ee@record-constructor-descriptor-transformer (lambda (a34be@e a34bf@r a34c0@mr) ((lambda (a34c4@t) ((lambda (a34c6@ls/false) (if (and a34c6@ls/false (apply (lambda (a34c8@id) (a2f41@id? a34c8@id)) a34c6@ls/false)) (apply (lambda (a34ca@id) ((lambda (a34cc@lab) ((lambda (a34ce@b) ((lambda (a34d0@type) ((lambda () (begin (if (not a34cc@lab) (a2f65@raise-unbound-error a34ca@id) (void)) (if (not (and (eq? a34d0@type '$rtd) (list? (a2f63@binding-value a34ce@b)))) (a3239@syntax-violation '#f '"invalid type" a34be@e) (void)) (a316c@chi-expr (cadr (a2f63@binding-value a34ce@b)) a34bf@r a34c0@mr))))) (a2f61@binding-type a34ce@b))) (a2f5d@label->binding a34cc@lab a34bf@r))) (a2f5b@id->label a34ca@id))) a34c6@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a34c4@t))) (a3148@syntax-dispatch a34c4@t '(_ any)))) a34be@e))) (set! a30f0@when-macro (lambda (a34d2@e) ((lambda (a34d4@t) ((lambda (a34d6@ls/false) (if a34d6@ls/false (apply (lambda (a34d8@test a34d9@e a34da@e*) (a3102@bless (list 'if a34d8@test (cons 'begin (cons a34d9@e a34da@e*))))) a34d6@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a34d4@t))) (a3148@syntax-dispatch a34d4@t '(_ any any . each-any)))) a34d2@e))) (set! a30f2@unless-macro (lambda (a34de@e) ((lambda (a34e0@t) ((lambda (a34e2@ls/false) (if a34e2@ls/false (apply (lambda (a34e4@test a34e5@e a34e6@e*) (a3102@bless (list 'if (list 'not a34e4@test) (cons 'begin (cons a34e5@e a34e6@e*))))) a34e2@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a34e0@t))) (a3148@syntax-dispatch a34e0@t '(_ any any . each-any)))) a34de@e))) (set! a30f4@if-transformer (lambda (a34ea@e a34eb@r a34ec@mr) ((lambda (a34f0@t) ((lambda (a34f2@ls/false) (if a34f2@ls/false (apply (lambda (a34f4@e0 a34f5@e1 a34f6@e2) (list 'if (a316c@chi-expr a34f4@e0 a34eb@r a34ec@mr) (a316c@chi-expr a34f5@e1 a34eb@r a34ec@mr) (a316c@chi-expr a34f6@e2 a34eb@r a34ec@mr))) a34f2@ls/false) ((lambda (a34fa@t) ((lambda (a34fc@ls/false) (if a34fc@ls/false (apply (lambda (a34fe@e0 a34ff@e1) (list 'if (a316c@chi-expr a34fe@e0 a34eb@r a34ec@mr) (a316c@chi-expr a34ff@e1 a34eb@r a34ec@mr) (a2ea9@a2e02@build-void))) a34fc@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a34fa@t))) (a3148@syntax-dispatch a34fa@t '(_ any any)))) a34f0@t))) (a3148@syntax-dispatch a34f0@t '(_ any any any)))) a34ea@e))) (set! a30f6@and-transformer (lambda (a3502@e a3503@r a3504@mr) ((lambda (a3508@t) ((lambda (a350a@ls/false) (if a350a@ls/false (apply (lambda (a350c@e*) (cons 'and (a3168@chi-expr* a350c@e* a3503@r a3504@mr))) a350a@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3508@t))) (a3148@syntax-dispatch a3508@t '(_ . each-any)))) a3502@e))) (set! a30f8@or-transformer (lambda (a350e@e a350f@r a3510@mr) ((lambda (a3514@t) ((lambda (a3516@ls/false) (if a3516@ls/false (apply (lambda (a3518@e*) (cons 'or (a3168@chi-expr* a3518@e* a350f@r a3510@mr))) a3516@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3514@t))) (a3148@syntax-dispatch a3514@t '(_ . each-any)))) a350e@e))) (set! a30fa@case-macro (lambda (a351a@e) ((lambda (a351d@build-last a351f@build-one) (begin (set! a351d@build-last (lambda (a3544@cls) ((lambda (a3546@t) ((lambda (a3548@ls/false) (if a3548@ls/false (apply (lambda (a354a@e a354b@e*) (cons 'let (cons '() (cons '#f (cons a354a@e a354b@e*))))) a3548@ls/false) ((lambda (a354e@t) ((lambda (a3550@ls/false) (if a3550@ls/false (apply (lambda () (a351f@build-one a3544@cls '(if #f #f))) a3550@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a354e@t))) (a3148@syntax-dispatch a354e@t '_))) a3546@t))) (a3148@syntax-dispatch a3546@t '(#(scheme-id else) any . each-any)))) a3544@cls))) (set! a351f@build-one (lambda (a3536@cls a3537@k) ((lambda (a353a@t) ((lambda (a353c@ls/false) (if a353c@ls/false (apply (lambda (a353e@d* a353f@e a3540@e*) (list 'if (list 'memv 't (list 'quote a353e@d*)) (cons 'begin (cons a353f@e a3540@e*)) a3537@k)) a353c@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a353a@t))) (a3148@syntax-dispatch a353a@t '(each-any any . each-any)))) a3536@cls))) ((lambda (a3520@t) ((lambda (a3522@ls/false) (if a3522@ls/false (apply (lambda (a3524@expr) (a3102@bless (cons 'let (cons (list (list 't a3524@expr)) '((if #f #f)))))) a3522@ls/false) ((lambda (a3526@t) ((lambda (a3528@ls/false) (if a3528@ls/false (apply (lambda (a352a@expr a352b@cls a352c@cls*) (a3102@bless (list 'let (list (list 't a352a@expr)) ((letrec ((a3530@f (lambda (a3532@cls a3533@cls*) (if (null? a3533@cls*) (a351d@build-last a3532@cls) (a351f@build-one a3532@cls (a3530@f (car a3533@cls*) (cdr a3533@cls*))))))) a3530@f) a352b@cls a352c@cls*)))) a3528@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3526@t))) (a3148@syntax-dispatch a3526@t '(_ any any . each-any)))) a3520@t))) (a3148@syntax-dispatch a3520@t '(_ any)))) a351a@e))) '#f '#f))) (set! a30fc@quote-transformer (lambda (a3552@e a3553@r a3554@mr) ((lambda (a3558@t) ((lambda (a355a@ls/false) (if a355a@ls/false (apply (lambda (a355c@datum) (list 'quote (a2f57@stx->datum a355c@datum))) a355a@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3558@t))) (a3148@syntax-dispatch a3558@t '(_ any)))) a3552@e))) (set! a30fe@case-lambda-transformer (lambda (a355e@e a355f@r a3560@mr) ((lambda (a3564@t) ((lambda (a3566@ls/false) (if a3566@ls/false (apply (lambda (a3568@fmls* a3569@b* a356a@b**) (call-with-values (lambda () (a3174@chi-lambda-clause* a355e@e a3568@fmls* (map cons a3569@b* a356a@b**) a355f@r a3560@mr)) (lambda (a3572@a356f a3573@a3571) ((lambda (a3576@body* a3577@fmls*) (a2ea6@a2dd0@build-case-lambda (a322f@syntax-annotation a355e@e) a3577@fmls* a3576@body*)) a3573@a3571 a3572@a356f)))) a3566@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3564@t))) (a3148@syntax-dispatch a3564@t '(_ . #(each (any any . each-any)))))) a355e@e))) (set! a3100@lambda-transformer (lambda (a357a@e a357b@r a357c@mr) ((lambda (a3580@t) ((lambda (a3582@ls/false) (if a3582@ls/false (apply (lambda (a3584@fmls a3585@b a3586@b*) (call-with-values (lambda () (a3172@chi-lambda-clause a357a@e a3584@fmls (cons a3585@b a3586@b*) a357b@r a357c@mr)) (lambda (a358e@a358b a358f@a358d) ((lambda (a3592@body a3593@fmls) (a2ea5@a2dce@build-lambda (a322f@syntax-annotation a357a@e) a3593@fmls a3592@body)) a358f@a358d a358e@a358b)))) a3582@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3580@t))) (a3148@syntax-dispatch a3580@t '(_ any any . each-any)))) a357a@e))) (set! a3102@bless (lambda (a3596@x) (a2f29@mkstx ((letrec ((a3598@f (lambda (a359a@x) (if (a2f09@stx? a359a@x) a359a@x (if (pair? a359a@x) (cons (a3598@f (car a359a@x)) (a3598@f (cdr a359a@x))) (if (symbol? a359a@x) (a30d6@scheme-stx a359a@x) (if (vector? a359a@x) (list->vector (map a3598@f (vector->list a359a@x))) ((lambda () (begin '#f a359a@x)))))))))) a3598@f) a3596@x) '() '() '()))) (set! a3104@with-syntax-macro (lambda (a359c@e) ((lambda (a359e@t) ((lambda (a35a0@ls/false) (if a35a0@ls/false (apply (lambda (a35a2@pat* a35a3@expr* a35a4@b a35a5@b*) ((lambda (a35aa@idn*) (begin (a3170@verify-formals (map car a35aa@idn*) a359c@e) ((lambda (a35ac@t*) (a3102@bless (list 'let (map list a35ac@t* a35a3@expr*) ((letrec ((a35ae@f (lambda (a35b0@pat* a35b1@t*) (if (null? a35b0@pat*) (cons 'let (cons '() (cons a35a4@b a35a5@b*))) ((lambda () (begin '#f (list 'syntax-case (car a35b1@t*) '() (list (car a35b0@pat*) (a35ae@f (cdr a35b0@pat*) (cdr a35b1@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car a35b0@pat*)) (car a35b1@t*))))))))))) a35ae@f) a35a2@pat* a35ac@t*)))) (a3223@generate-temporaries a35a3@expr*)))) ((letrec ((a35b4@f (lambda (a35b6@pat*) (if (null? a35b6@pat*) '() ((lambda () (begin '#f (call-with-values (lambda () (a3146@convert-pattern (car a35b6@pat*) '())) (lambda (a35bc@a35b9 a35bd@a35bb) ((lambda (a35c0@idn* a35c1@pat) (append a35c0@idn* (a35b4@f (cdr a35b6@pat*)))) a35bd@a35bb a35bc@a35b9)))))))))) a35b4@f) a35a2@pat*))) a35a0@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a359e@t))) (a3148@syntax-dispatch a359e@t '(_ #(each (any any)) any . each-any)))) a359c@e))) (set! a3106@invalid-fmls-error (lambda (a35c4@stx a35c5@fmls) ((lambda (a35c8@t) ((lambda (a35ca@ls/false) (if a35ca@ls/false (apply (lambda (a35cc@id* a35cd@last) ((letrec ((a35d0@f (lambda (a35d2@id*) (if (null? a35d2@id*) (values) (if (not (a2f41@id? (car a35d2@id*))) (a3239@syntax-violation '#f '"not an identifier" a35c4@stx (car a35d2@id*)) ((lambda () (begin '#f (a35d0@f (cdr a35d2@id*)) (if (a2f4f@bound-id-member? (car a35d2@id*) (cdr a35d2@id*)) (a3239@syntax-violation '#f '"duplicate binding" a35c4@stx (car a35d2@id*)) (void)))))))))) a35d0@f) (if (a2f41@id? a35cd@last) (cons a35cd@last a35cc@id*) (if (a2f37@syntax-null? a35cd@last) a35cc@id* ((lambda () (begin '#f (a3239@syntax-violation '#f '"not an identifier" a35c4@stx a35cd@last)))))))) a35ca@ls/false) ((lambda (a35d4@t) ((lambda (a35d6@ls/false) (if a35d6@ls/false (apply (lambda () (a3239@syntax-violation '#f '"malformed binding form" a35c4@stx a35c5@fmls)) a35d6@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a35d4@t))) (a3148@syntax-dispatch a35d4@t '_))) a35c8@t))) (a3148@syntax-dispatch a35c8@t '#(each+ any () any)))) a35c5@fmls))) (set! a3108@let-macro (lambda (a35d8@stx) ((lambda (a35da@t) ((lambda (a35dc@ls/false) (if a35dc@ls/false (apply (lambda (a35de@lhs* a35df@rhs* a35e0@b a35e1@b*) (if (a2f4b@valid-bound-ids? a35de@lhs*) (a3102@bless (cons (cons 'lambda (cons a35de@lhs* (cons a35e0@b a35e1@b*))) a35df@rhs*)) (a3106@invalid-fmls-error a35d8@stx a35de@lhs*))) a35dc@ls/false) ((lambda (a35e6@t) ((lambda (a35e8@ls/false) (if (and a35e8@ls/false (apply (lambda (a35ea@f a35eb@lhs* a35ec@rhs* a35ed@b a35ee@b*) (a2f41@id? a35ea@f)) a35e8@ls/false)) (apply (lambda (a35f4@f a35f5@lhs* a35f6@rhs* a35f7@b a35f8@b*) (if (a2f4b@valid-bound-ids? a35f5@lhs*) (a3102@bless (cons (list 'letrec (list (list a35f4@f (cons 'lambda (cons a35f5@lhs* (cons a35f7@b a35f8@b*))))) a35f4@f) a35f6@rhs*)) (a3106@invalid-fmls-error a35d8@stx a35f5@lhs*))) a35e8@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a35e6@t))) (a3148@syntax-dispatch a35e6@t '(_ any #(each (any any)) any . each-any)))) a35da@t))) (a3148@syntax-dispatch a35da@t '(_ #(each (any any)) any . each-any)))) a35d8@stx))) (set! a310a@trace-let-macro (lambda (a35fe@stx) ((lambda (a3600@t) ((lambda (a3602@ls/false) (if (and a3602@ls/false (apply (lambda (a3604@f a3605@lhs* a3606@rhs* a3607@b a3608@b*) (a2f41@id? a3604@f)) a3602@ls/false)) (apply (lambda (a360e@f a360f@lhs* a3610@rhs* a3611@b a3612@b*) (if (a2f4b@valid-bound-ids? a360f@lhs*) (a3102@bless (cons (list 'letrec (list (list a360e@f (cons 'trace-lambda (cons a360e@f (cons a360f@lhs* (cons a3611@b a3612@b*)))))) a360e@f) a3610@rhs*)) (a3106@invalid-fmls-error a35fe@stx a360f@lhs*))) a3602@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3600@t))) (a3148@syntax-dispatch a3600@t '(_ any #(each (any any)) any . each-any)))) a35fe@stx))) (set! a310c@let-values-macro (lambda (a3618@stx) ((lambda (a361b@rename a361d@rename*) (begin (set! a361b@rename (lambda (a3680@x a3681@old* a3682@new*) (begin (if (not (a2f41@id? a3680@x)) (a3239@syntax-violation '#f '"not an indentifier" a3618@stx a3680@x) (void)) (if (a2f4f@bound-id-member? a3680@x a3681@old*) (a3239@syntax-violation '#f '"duplicate binding" a3618@stx a3680@x) (void)) ((lambda (a3686@y) (values a3686@y (cons a3680@x a3681@old*) (cons a3686@y a3682@new*))) (gensym (a323f@syntax->datum a3680@x)))))) (set! a361d@rename* (lambda (a366e@x* a366f@old* a3670@new*) (if (null? a366e@x*) (values '() a366f@old* a3670@new*) ((lambda () (begin '#f (call-with-values (lambda () (a361b@rename (car a366e@x*) a366f@old* a3670@new*)) (lambda (a3674@x a3675@old* a3676@new*) (call-with-values (lambda () (a361d@rename* (cdr a366e@x*) a3675@old* a3676@new*)) (lambda (a367a@x* a367b@old* a367c@new*) (values (cons a3674@x a367a@x*) a367b@old* a367c@new*))))))))))) ((lambda (a361e@t) ((lambda (a3620@ls/false) (if a3620@ls/false (apply (lambda (a3622@b a3623@b*) (cons* (a3102@bless 'let) '() a3622@b a3623@b*)) a3620@ls/false) ((lambda (a3626@t) ((lambda (a3628@ls/false) (if a3628@ls/false (apply (lambda (a362a@lhs* a362b@rhs* a362c@b a362d@b*) (a3102@bless ((letrec ((a3632@f (lambda (a3634@lhs* a3635@rhs* a3636@old* a3637@new*) (if (null? a3634@lhs*) (cons 'let (cons (map list a3636@old* a3637@new*) (cons a362c@b a362d@b*))) ((lambda () (begin '#f ((lambda (a363c@t) ((lambda (a363e@ls/false) (if a363e@ls/false (apply (lambda (a3640@x*) (call-with-values (lambda () (a361d@rename* a3640@x* a3636@old* a3637@new*)) (lambda (a3648@a3643 a3649@a3645 a364a@a3647) ((lambda (a364e@new* a364f@old* a3650@y*) (list 'call-with-values (list 'lambda '() (car a3635@rhs*)) (list 'lambda a3650@y* (a3632@f (cdr a3634@lhs*) (cdr a3635@rhs*) a364f@old* a364e@new*)))) a364a@a3647 a3649@a3645 a3648@a3643)))) a363e@ls/false) ((lambda (a3654@t) ((lambda (a3656@ls/false) (if a3656@ls/false (apply (lambda (a3658@x* a3659@x) (call-with-values (lambda () (a361b@rename a3659@x a3636@old* a3637@new*)) (lambda (a365c@y a365d@old* a365e@new*) (call-with-values (lambda () (a361d@rename* a3658@x* a365d@old* a365e@new*)) (lambda (a3662@y* a3663@old* a3664@new*) (list 'call-with-values (list 'lambda '() (car a3635@rhs*)) (list 'lambda (append a3662@y* a365c@y) (a3632@f (cdr a3634@lhs*) (cdr a3635@rhs*) a3663@old* a3664@new*)))))))) a3656@ls/false) ((lambda (a3668@t) ((lambda (a366a@ls/false) (if a366a@ls/false (apply (lambda (a366c@others) (a3239@syntax-violation '#f '"malformed bindings" a3618@stx a366c@others)) a366a@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3668@t))) (a3148@syntax-dispatch a3668@t 'any))) a3654@t))) (a3148@syntax-dispatch a3654@t '#(each+ any () any)))) a363c@t))) (a3148@syntax-dispatch a363c@t 'each-any))) (car a3634@lhs*))))))))) a3632@f) a362a@lhs* a362b@rhs* '() '()))) a3628@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3626@t))) (a3148@syntax-dispatch a3626@t '(_ #(each (any any)) any . each-any)))) a361e@t))) (a3148@syntax-dispatch a361e@t '(_ () any . each-any)))) a3618@stx))) '#f '#f))) (set! a310e@let*-values-macro (lambda (a3688@stx) ((lambda (a368b@check) (begin (set! a368b@check (lambda (a36ba@x*) (if (not (null? a36ba@x*)) ((lambda (a36bc@x) (begin (if (not (a2f41@id? a36bc@x)) (a3239@syntax-violation '#f '"not an identifier" a3688@stx a36bc@x) (void)) (a368b@check (cdr a36ba@x*)) (if (a2f4f@bound-id-member? a36bc@x (cdr a36ba@x*)) (a3239@syntax-violation '#f '"duplicate identifier" a3688@stx a36bc@x) (void)))) (car a36ba@x*)) (void)))) ((lambda (a368c@t) ((lambda (a368e@ls/false) (if a368e@ls/false (apply (lambda (a3690@b a3691@b*) (cons* (a3102@bless 'let) '() a3690@b a3691@b*)) a368e@ls/false) ((lambda (a3694@t) ((lambda (a3696@ls/false) (if a3696@ls/false (apply (lambda (a3698@lhs* a3699@rhs* a369a@b a369b@b*) (a3102@bless ((letrec ((a36a0@f (lambda (a36a2@lhs* a36a3@rhs*) (if (null? a36a2@lhs*) (cons 'begin (cons a369a@b a369b@b*)) ((lambda () (begin '#f ((lambda (a36a6@t) ((lambda (a36a8@ls/false) (if a36a8@ls/false (apply (lambda (a36aa@x*) (begin (a368b@check a36aa@x*) (list 'call-with-values (list 'lambda '() (car a36a3@rhs*)) (list 'lambda a36aa@x* (a36a0@f (cdr a36a2@lhs*) (cdr a36a3@rhs*)))))) a36a8@ls/false) ((lambda (a36ac@t) ((lambda (a36ae@ls/false) (if a36ae@ls/false (apply (lambda (a36b0@x* a36b1@x) (begin (a368b@check (cons a36b1@x a36b0@x*)) (list 'call-with-values (list 'lambda '() (car a36a3@rhs*)) (list 'lambda (append a36b0@x* a36b1@x) (a36a0@f (cdr a36a2@lhs*) (cdr a36a3@rhs*)))))) a36ae@ls/false) ((lambda (a36b4@t) ((lambda (a36b6@ls/false) (if a36b6@ls/false (apply (lambda (a36b8@others) (a3239@syntax-violation '#f '"malformed bindings" a3688@stx a36b8@others)) a36b6@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a36b4@t))) (a3148@syntax-dispatch a36b4@t 'any))) a36ac@t))) (a3148@syntax-dispatch a36ac@t '#(each+ any () any)))) a36a6@t))) (a3148@syntax-dispatch a36a6@t 'each-any))) (car a36a2@lhs*))))))))) a36a0@f) a3698@lhs* a3699@rhs*))) a3696@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3694@t))) (a3148@syntax-dispatch a3694@t '(_ #(each (any any)) any . each-any)))) a368c@t))) (a3148@syntax-dispatch a368c@t '(_ () any . each-any)))) a3688@stx))) '#f))) (set! a3110@trace-lambda-macro (lambda (a36be@stx) ((lambda (a36c0@t) ((lambda (a36c2@ls/false) (if a36c2@ls/false (apply (lambda (a36c4@who a36c5@fmls a36c6@b a36c7@b*) (if (a2f4b@valid-bound-ids? a36c5@fmls) (a3102@bless (list 'make-traced-procedure (list 'quote a36c4@who) (cons 'lambda (cons a36c5@fmls (cons a36c6@b a36c7@b*))))) (a3106@invalid-fmls-error a36be@stx a36c5@fmls))) a36c2@ls/false) ((lambda (a36cc@t) ((lambda (a36ce@ls/false) (if a36ce@ls/false (apply (lambda (a36d0@who a36d1@fmls a36d2@last a36d3@b a36d4@b*) (if (a2f4b@valid-bound-ids? (cons a36d2@last a36d1@fmls)) (a3102@bless (list 'make-traced-procedure (list 'quote a36d0@who) (cons 'lambda (cons (append a36d1@fmls a36d2@last) (cons a36d3@b a36d4@b*))))) (a3106@invalid-fmls-error a36be@stx (append a36d1@fmls a36d2@last)))) a36ce@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a36cc@t))) (a3148@syntax-dispatch a36cc@t '(_ any #(each+ any () any) any . each-any)))) a36c0@t))) (a3148@syntax-dispatch a36c0@t '(_ any each-any any . each-any)))) a36be@stx))) (set! a3112@trace-define-macro (lambda (a36da@stx) ((lambda (a36dc@t) ((lambda (a36de@ls/false) (if a36de@ls/false (apply (lambda (a36e0@who a36e1@fmls a36e2@b a36e3@b*) (if (a2f4b@valid-bound-ids? a36e1@fmls) (a3102@bless (list 'define a36e0@who (list 'make-traced-procedure (list 'quote a36e0@who) (cons 'lambda (cons a36e1@fmls (cons a36e2@b a36e3@b*)))))) (a3106@invalid-fmls-error a36da@stx a36e1@fmls))) a36de@ls/false) ((lambda (a36e8@t) ((lambda (a36ea@ls/false) (if a36ea@ls/false (apply (lambda (a36ec@who a36ed@fmls a36ee@last a36ef@b a36f0@b*) (if (a2f4b@valid-bound-ids? (cons a36ee@last a36ed@fmls)) (a3102@bless (list 'define a36ec@who (list 'make-traced-procedure (list 'quote a36ec@who) (cons 'lambda (cons (append a36ed@fmls a36ee@last) (cons a36ef@b a36f0@b*)))))) (a3106@invalid-fmls-error a36da@stx (append a36ed@fmls a36ee@last)))) a36ea@ls/false) ((lambda (a36f6@t) ((lambda (a36f8@ls/false) (if a36f8@ls/false (apply (lambda (a36fa@who a36fb@expr) (if (a2f41@id? a36fa@who) (a3102@bless (list 'define a36fa@who (list 'let (list (list 'v a36fb@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote a36fa@who) '(v))) '(v))))))) (a3239@syntax-violation '#f '"invalid name" a36da@stx))) a36f8@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a36f6@t))) (a3148@syntax-dispatch a36f6@t '(_ any any)))) a36e8@t))) (a3148@syntax-dispatch a36e8@t '(_ (any . #(each+ any () any)) any . each-any)))) a36dc@t))) (a3148@syntax-dispatch a36dc@t '(_ (any . each-any) any . each-any)))) a36da@stx))) (set! a3114@trace-define-syntax-macro (lambda (a36fe@stx) ((lambda (a3700@t) ((lambda (a3702@ls/false) (if a3702@ls/false (apply (lambda (a3704@who a3705@expr) (if (a2f41@id? a3704@who) (a3102@bless (list 'define-syntax a3704@who (list 'make-traced-macro (list 'quote a3704@who) a3705@expr))) (a3239@syntax-violation '#f '"invalid name" a36fe@stx))) a3702@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3700@t))) (a3148@syntax-dispatch a3700@t '(_ any any)))) a36fe@stx))) (set! a3116@trace-let/rec-syntax (lambda (a3708@who) (lambda (a370a@stx) ((lambda (a370c@t) ((lambda (a370e@ls/false) (if a370e@ls/false (apply (lambda (a3710@lhs* a3711@rhs* a3712@b a3713@b*) (if (a2f4b@valid-bound-ids? a3710@lhs*) ((lambda (a3718@rhs*) (a3102@bless (cons a3708@who (cons (map list a3710@lhs* a3718@rhs*) (cons a3712@b a3713@b*))))) (map (lambda (a371a@lhs a371b@rhs) (list 'make-traced-macro (list 'quote a371a@lhs) a371b@rhs)) a3710@lhs* a3711@rhs*)) (a3106@invalid-fmls-error a370a@stx a3710@lhs*))) a370e@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a370c@t))) (a3148@syntax-dispatch a370c@t '(_ #(each (any any)) any . each-any)))) a370a@stx)))) (set! a3118@trace-let-syntax-macro (a3116@trace-let/rec-syntax 'let-syntax)) (set! a311a@trace-letrec-syntax-macro (a3116@trace-let/rec-syntax 'letrec-syntax)) (set! a311c@guard-macro (lambda (a371e@x) ((lambda (a3721@gen-clauses) (begin (set! a3721@gen-clauses (lambda (a3738@con a3739@outerk a373a@clause*) ((lambda (a373f@f a3741@f*) (begin (set! a373f@f (lambda (a3778@x a3779@k) ((lambda (a377c@t) ((lambda (a377e@ls/false) (if a377e@ls/false (apply (lambda (a3780@e a3781@p) ((lambda (a3784@t) (list 'let (list (list a3784@t a3780@e)) (list 'if a3784@t (list a3781@p a3784@t) a3779@k))) (gensym))) a377e@ls/false) ((lambda (a3786@t) ((lambda (a3788@ls/false) (if a3788@ls/false (apply (lambda (a378a@e) ((lambda (a378c@t) (list 'let (list (list a378c@t a378a@e)) (list 'if a378c@t a378c@t a3779@k))) (gensym))) a3788@ls/false) ((lambda (a378e@t) ((lambda (a3790@ls/false) (if a3790@ls/false (apply (lambda (a3792@e a3793@v a3794@v*) (list 'if a3792@e (cons 'begin (cons a3793@v a3794@v*)) a3779@k)) a3790@ls/false) ((lambda (a3798@t) ((lambda (a379a@ls/false) (if a379a@ls/false (apply (lambda () (a3239@syntax-violation '#f '"invalid guard clause" a3778@x)) a379a@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3798@t))) (a3148@syntax-dispatch a3798@t '_))) a378e@t))) (a3148@syntax-dispatch a378e@t '(any any . each-any)))) a3786@t))) (a3148@syntax-dispatch a3786@t '(any)))) a377c@t))) (a3148@syntax-dispatch a377c@t '(any #(scheme-id =>) any)))) a3778@x))) (set! a3741@f* (lambda (a374e@x*) ((lambda (a3750@t) ((lambda (a3752@ls/false) (if a3752@ls/false (apply (lambda () ((lambda (a3754@g) (values (list a3754@g (list 'lambda '() (list 'raise-continuable a3738@con))) a3754@g)) (gensym))) a3752@ls/false) ((lambda (a3756@t) ((lambda (a3758@ls/false) (if a3758@ls/false (apply (lambda (a375a@e a375b@e*) (values (cons 'begin (cons a375a@e a375b@e*)) '#f)) a3758@ls/false) ((lambda (a375e@t) ((lambda (a3760@ls/false) (if a3760@ls/false (apply (lambda (a3762@cls a3763@cls*) (call-with-values (lambda () (a3741@f* a3763@cls*)) (lambda (a376a@a3767 a376b@a3769) ((lambda (a376e@g a376f@e) (values (a373f@f a3762@cls a376f@e) a376e@g)) a376b@a3769 a376a@a3767)))) a3760@ls/false) ((lambda (a3772@t) ((lambda (a3774@ls/false) (if a3774@ls/false (apply (lambda (a3776@others) (a3239@syntax-violation '#f '"invalid guard clause" a3776@others)) a3774@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3772@t))) (a3148@syntax-dispatch a3772@t 'any))) a375e@t))) (a3148@syntax-dispatch a375e@t '(any . any)))) a3756@t))) (a3148@syntax-dispatch a3756@t '((#(scheme-id else) any . each-any))))) a3750@t))) (a3148@syntax-dispatch a3750@t '()))) a374e@x*))) (call-with-values (lambda () (a3741@f* a373a@clause*)) (lambda (a3746@a3743 a3747@a3745) ((lambda (a374a@raisek a374b@code) (if a374a@raisek (list (list 'call/cc (list 'lambda (list a374a@raisek) (list a3739@outerk (list 'lambda '() a374b@code))))) (list a3739@outerk (list 'lambda '() a374b@code)))) a3747@a3745 a3746@a3743))))) '#f '#f))) ((lambda (a3722@t) ((lambda (a3724@ls/false) (if (and a3724@ls/false (apply (lambda (a3726@con a3727@clause* a3728@b a3729@b*) (a2f41@id? a3726@con)) a3724@ls/false)) (apply (lambda (a372e@con a372f@clause* a3730@b a3731@b*) ((lambda (a3736@outerk) (a3102@bless (list (list 'call/cc (list 'lambda (list a3736@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list a372e@con) (a3721@gen-clauses a372e@con a3736@outerk a372f@clause*)) (cons 'lambda (cons '() (cons a3730@b a3731@b*)))))))))) (gensym))) a3724@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3722@t))) (a3148@syntax-dispatch a3722@t '(_ (any . each-any) any . each-any)))) a371e@x))) '#f))) (set! a311e@define-enumeration-macro (lambda (a379c@stx) ((lambda (a379f@set? a37a1@remove-dups) (begin (set! a379f@set? (lambda (a37b8@x) (or (null? a37b8@x) (and (not (memq (car a37b8@x) (cdr a37b8@x))) (a379f@set? (cdr a37b8@x)))))) (set! a37a1@remove-dups (lambda (a37b6@ls) (if (null? a37b6@ls) '() ((lambda () (begin '#f (cons (car a37b6@ls) (a37a1@remove-dups (remq (car a37b6@ls) (cdr a37b6@ls)))))))))) ((lambda (a37a2@t) ((lambda (a37a4@ls/false) (if (and a37a4@ls/false (apply (lambda (a37a6@name a37a7@id* a37a8@maker) (and (a2f41@id? a37a6@name) (a2f41@id? a37a8@maker) (for-all a2f41@id? a37a7@id*))) a37a4@ls/false)) (apply (lambda (a37ac@name a37ad@id* a37ae@maker) ((lambda (a37b2@name* a37b3@mk) (a3102@bless (list 'begin (list 'define a37b3@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote a37b2@name*)))) (list 'define-syntax a37ac@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote a37b2@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote a37ac@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax a37ae@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote a37ae@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote a37b2@name*)) (cons 'syntax-violation (cons (list 'quote a37ae@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons a37b3@mk '('(n* ...)))))))))))) (a37a1@remove-dups (a323f@syntax->datum a37ad@id*)) (gensym))) a37a4@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a37a2@t))) (a3148@syntax-dispatch a37a2@t '(_ any each-any any)))) a379c@stx))) '#f '#f))) (set! a3120@time-macro (lambda (a37ba@stx) ((lambda (a37bc@t) ((lambda (a37be@ls/false) (if a37be@ls/false (apply (lambda (a37c0@expr) (a3102@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() a37c0@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) a37be@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a37bc@t))) (a3148@syntax-dispatch a37bc@t '(_ any)))) a37ba@stx))) (set! a3122@delay-macro (lambda (a37c2@stx) ((lambda (a37c4@t) ((lambda (a37c6@ls/false) (if a37c6@ls/false (apply (lambda (a37c8@expr) (a3102@bless (list 'make-promise (list 'lambda '() a37c8@expr)))) a37c6@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a37c4@t))) (a3148@syntax-dispatch a37c4@t '(_ any)))) a37c2@stx))) (set! a3124@assert-macro (lambda (a37ca@stx) ((lambda (a37cc@t) ((lambda (a37ce@ls/false) (if a37ce@ls/false (apply (lambda (a37d0@expr) ((lambda (a37d2@pos) (a3102@bless (list 'unless a37d0@expr (list 'assertion-error (list 'quote a37d0@expr) (list 'quote a37d2@pos))))) (or (a322d@expression-position a37ca@stx) (a322d@expression-position a37d0@expr)))) a37ce@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a37cc@t))) (a3148@syntax-dispatch a37cc@t '(_ any)))) a37ca@stx))) (set! a3126@endianness-macro (lambda (a37d4@stx) ((lambda (a37d6@t) ((lambda (a37d8@ls/false) (if a37d8@ls/false (apply (lambda (a37da@e) ((lambda (a37dc@t) (if (memv a37dc@t '(little)) (a3102@bless ''little) (if (memv a37dc@t '(big)) (a3102@bless ''big) ((lambda () (begin '#f (a3239@syntax-violation '#f '"endianness must be big or little" a37d4@stx))))))) (a323f@syntax->datum a37da@e))) a37d8@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a37d6@t))) (a3148@syntax-dispatch a37d6@t '(_ any)))) a37d4@stx))) (set! a3128@identifier-syntax-macro (lambda (a37de@stx) ((lambda (a37e0@t) ((lambda (a37e2@ls/false) (if a37e2@ls/false (apply (lambda (a37e4@expr) (a3102@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax a37e4@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax a37e4@expr) '((syntax (e* ...)))))))))) a37e2@ls/false) ((lambda (a37e6@t) ((lambda (a37e8@ls/false) (if (and a37e8@ls/false (apply (lambda (a37ea@id1 a37eb@expr1 a37ec@id2 a37ed@expr2 a37ee@expr3) (and (a2f41@id? a37ea@id1) (a2f41@id? a37ec@id2) (a2f41@id? a37ed@expr2))) a37e8@ls/false)) (apply (lambda (a37f4@id1 a37f5@expr1 a37f6@id2 a37f7@expr2 a37f8@expr3) (a3102@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax a37f5@expr1)) (list (list 'set! 'id a37f7@expr2) (list 'syntax a37f8@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons a37f5@expr1 '(e* ...))))))))) a37e8@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a37e6@t))) (a3148@syntax-dispatch a37e6@t '(_ (any any) ((#(scheme-id set!) any any) any))))) a37e0@t))) (a3148@syntax-dispatch a37e0@t '(_ any)))) a37de@stx))) (set! a312a@do-macro (lambda (a37fe@stx) ((lambda (a3801@bind) (begin (set! a3801@bind (lambda (a3818@x) ((lambda (a381a@t) ((lambda (a381c@ls/false) (if a381c@ls/false (apply (lambda (a381e@x a381f@init) (list a381e@x a381f@init a381e@x)) a381c@ls/false) ((lambda (a3822@t) ((lambda (a3824@ls/false) (if a3824@ls/false (apply (lambda (a3826@x a3827@init a3828@step) (list a3826@x a3827@init a3828@step)) a3824@ls/false) ((lambda (a382c@t) ((lambda (a382e@ls/false) (if a382e@ls/false (apply (lambda () (a3239@syntax-violation '#f '"invalid binding" a37fe@stx)) a382e@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a382c@t))) (a3148@syntax-dispatch a382c@t '_))) a3822@t))) (a3148@syntax-dispatch a3822@t '(any any any)))) a381a@t))) (a3148@syntax-dispatch a381a@t '(any any)))) a3818@x))) ((lambda (a3802@t) ((lambda (a3804@ls/false) (if a3804@ls/false (apply (lambda (a3806@binding* a3807@test a3808@expr* a3809@command*) ((lambda (a380e@t) ((lambda (a3810@ls/false) (if a3810@ls/false (apply (lambda (a3812@x* a3813@init* a3814@step*) (if (a2f4b@valid-bound-ids? a3812@x*) (a3102@bless (list 'letrec (list (list 'loop (list 'lambda a3812@x* (list 'if a3807@test (cons 'begin (cons '(if #f #f) a3808@expr*)) (cons 'begin (append a3809@command* (list (cons 'loop a3814@step*)))))))) (cons 'loop a3813@init*))) (a3239@syntax-violation '#f '"invalid bindings" a37fe@stx))) a3810@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a380e@t))) (a3148@syntax-dispatch a380e@t '#(each (any any any))))) (map a3801@bind a3806@binding*))) a3804@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3802@t))) (a3148@syntax-dispatch a3802@t '(_ each-any (any . each-any) . each-any)))) a37fe@stx))) '#f))) (set! a312c@let*-macro (lambda (a3830@stx) ((lambda (a3832@t) ((lambda (a3834@ls/false) (if (and a3834@ls/false (apply (lambda (a3836@lhs* a3837@rhs* a3838@b a3839@b*) (for-all a2f41@id? a3836@lhs*)) a3834@ls/false)) (apply (lambda (a383e@lhs* a383f@rhs* a3840@b a3841@b*) (a3102@bless ((letrec ((a3846@f (lambda (a3848@x*) (if (null? a3848@x*) (cons 'let (cons '() (cons a3840@b a3841@b*))) ((lambda () (begin '#f (list 'let (list (car a3848@x*)) (a3846@f (cdr a3848@x*)))))))))) a3846@f) (map list a383e@lhs* a383f@rhs*)))) a3834@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3832@t))) (a3148@syntax-dispatch a3832@t '(_ #(each (any any)) any . each-any)))) a3830@stx))) (set! a312e@or-macro (lambda (a384a@stx) ((lambda (a384c@t) ((lambda (a384e@ls/false) (if a384e@ls/false (apply (lambda () '#f) a384e@ls/false) ((lambda (a3850@t) ((lambda (a3852@ls/false) (if a3852@ls/false (apply (lambda (a3854@e a3855@e*) (a3102@bless ((letrec ((a3858@f (lambda (a385a@e a385b@e*) (if (null? a385b@e*) (list 'begin '#f a385a@e) ((lambda () (begin '#f (list 'let (list (list 't a385a@e)) (list 'if 't 't (a3858@f (car a385b@e*) (cdr a385b@e*))))))))))) a3858@f) a3854@e a3855@e*))) a3852@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3850@t))) (a3148@syntax-dispatch a3850@t '(_ any . each-any)))) a384c@t))) (a3148@syntax-dispatch a384c@t '(_)))) a384a@stx))) (set! a3130@and-macro (lambda (a385e@stx) ((lambda (a3860@t) ((lambda (a3862@ls/false) (if a3862@ls/false (apply (lambda () '#t) a3862@ls/false) ((lambda (a3864@t) ((lambda (a3866@ls/false) (if a3866@ls/false (apply (lambda (a3868@e a3869@e*) (a3102@bless ((letrec ((a386c@f (lambda (a386e@e a386f@e*) (if (null? a386f@e*) (list 'begin '#f a386e@e) ((lambda () (begin '#f (cons 'if (cons a386e@e (cons (a386c@f (car a386f@e*) (cdr a386f@e*)) '(#f))))))))))) a386c@f) a3868@e a3869@e*))) a3866@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3864@t))) (a3148@syntax-dispatch a3864@t '(_ any . each-any)))) a3860@t))) (a3148@syntax-dispatch a3860@t '(_)))) a385e@stx))) (set! a3132@cond-macro (lambda (a3872@stx) ((lambda (a3874@t) ((lambda (a3876@ls/false) (if a3876@ls/false (apply (lambda (a3878@cls a3879@cls*) (a3102@bless ((letrec ((a387c@f (lambda (a387e@cls a387f@cls*) (if (null? a387f@cls*) ((lambda (a3882@t) ((lambda (a3884@ls/false) (if a3884@ls/false (apply (lambda (a3886@e a3887@e*) (cons 'let (cons '() (cons '#f (cons a3886@e a3887@e*))))) a3884@ls/false) ((lambda (a388a@t) ((lambda (a388c@ls/false) (if a388c@ls/false (apply (lambda (a388e@e a388f@p) (list 'let (list (list 't a388e@e)) (list 'if 't (cons a388f@p '(t))))) a388c@ls/false) ((lambda (a3892@t) ((lambda (a3894@ls/false) (if a3894@ls/false (apply (lambda (a3896@e) (cons 'or (cons a3896@e '((if #f #f))))) a3894@ls/false) ((lambda (a3898@t) ((lambda (a389a@ls/false) (if a389a@ls/false (apply (lambda (a389c@e a389d@e*) (list 'if a389c@e (cons 'begin a389d@e*))) a389a@ls/false) ((lambda (a38a0@t) ((lambda (a38a2@ls/false) (if a38a2@ls/false (apply (lambda () (a3239@syntax-violation '#f '"invalid last clause" a3872@stx)) a38a2@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a38a0@t))) (a3148@syntax-dispatch a38a0@t '_))) a3898@t))) (a3148@syntax-dispatch a3898@t '(any . each-any)))) a3892@t))) (a3148@syntax-dispatch a3892@t '(any)))) a388a@t))) (a3148@syntax-dispatch a388a@t '(any #(scheme-id =>) any)))) a3882@t))) (a3148@syntax-dispatch a3882@t '(#(scheme-id else) any . each-any)))) a387e@cls) ((lambda () (begin '#f ((lambda (a38a4@t) ((lambda (a38a6@ls/false) (if a38a6@ls/false (apply (lambda (a38a8@e a38a9@e*) (a3239@syntax-violation '#f '"incorrect position of keyword else" a3872@stx)) a38a6@ls/false) ((lambda (a38ac@t) ((lambda (a38ae@ls/false) (if a38ae@ls/false (apply (lambda (a38b0@e a38b1@p) (list 'let (list (list 't a38b0@e)) (list 'if 't (cons a38b1@p '(t)) (a387c@f (car a387f@cls*) (cdr a387f@cls*))))) a38ae@ls/false) ((lambda (a38b4@t) ((lambda (a38b6@ls/false) (if a38b6@ls/false (apply (lambda (a38b8@e) (list 'or a38b8@e (a387c@f (car a387f@cls*) (cdr a387f@cls*)))) a38b6@ls/false) ((lambda (a38ba@t) ((lambda (a38bc@ls/false) (if a38bc@ls/false (apply (lambda (a38be@e a38bf@e*) (list 'if a38be@e (cons 'begin a38bf@e*) (a387c@f (car a387f@cls*) (cdr a387f@cls*)))) a38bc@ls/false) ((lambda (a38c2@t) ((lambda (a38c4@ls/false) (if a38c4@ls/false (apply (lambda () (a3239@syntax-violation '#f '"invalid last clause" a3872@stx)) a38c4@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a38c2@t))) (a3148@syntax-dispatch a38c2@t '_))) a38ba@t))) (a3148@syntax-dispatch a38ba@t '(any . each-any)))) a38b4@t))) (a3148@syntax-dispatch a38b4@t '(any)))) a38ac@t))) (a3148@syntax-dispatch a38ac@t '(any #(scheme-id =>) any)))) a38a4@t))) (a3148@syntax-dispatch a38a4@t '(#(scheme-id else) any . each-any)))) a387e@cls)))))))) a387c@f) a3878@cls a3879@cls*))) a3876@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3874@t))) (a3148@syntax-dispatch a3874@t '(_ any . each-any)))) a3872@stx))) (set! a3134@syntax-rules-macro (lambda (a38c6@e) ((lambda (a38c8@t) ((lambda (a38ca@ls/false) (if a38ca@ls/false (apply (lambda (a38cc@lits a38cd@pat* a38ce@tmp*) (begin (a314e@verify-literals a38cc@lits a38c6@e) (a3102@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons a38cc@lits (map (lambda (a38d2@pat a38d3@tmp) ((lambda (a38d6@t) ((lambda (a38d8@ls/false) (if a38d8@ls/false (apply (lambda (a38da@rest) (list (cons 'g a38da@rest) (list 'syntax a38d3@tmp))) a38d8@ls/false) ((lambda (a38dc@t) ((lambda (a38de@ls/false) (if a38de@ls/false (apply (lambda () (a3239@syntax-violation '#f '"invalid syntax-rules pattern" a38c6@e a38d2@pat)) a38de@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a38dc@t))) (a3148@syntax-dispatch a38dc@t '_))) a38d6@t))) (a3148@syntax-dispatch a38d6@t '(_ . any)))) a38d2@pat)) a38cd@pat* a38ce@tmp*)))))))) a38ca@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a38c8@t))) (a3148@syntax-dispatch a38c8@t '(_ each-any . #(each (any any)))))) a38c6@e))) (set! a3136@quasiquote-macro ((lambda () ((lambda (a38e1@datum a38fd@quasicons* a38ff@quasicons a3901@quasiappend a3903@quasivector a3905@vquasi a3907@quasi) (begin (set! a38e1@datum (lambda (a39e2@x) (list (a30d6@scheme-stx 'quote) (a2f29@mkstx a39e2@x '() '() '())))) (set! a38fd@quasicons* (lambda (a39da@x a39db@y) ((letrec ((a39de@f (lambda (a39e0@x) (if (null? a39e0@x) a39db@y (a38ff@quasicons (car a39e0@x) (a39de@f (cdr a39e0@x))))))) a39de@f) a39da@x))) (set! a38ff@quasicons (lambda (a39b4@x a39b5@y) ((lambda (a39b8@t) ((lambda (a39ba@ls/false) (if a39ba@ls/false (apply (lambda (a39bc@dy) ((lambda (a39be@t) ((lambda (a39c0@ls/false) (if a39c0@ls/false (apply (lambda (a39c2@dx) (list (a30d6@scheme-stx 'quote) (cons a39c2@dx a39bc@dy))) a39c0@ls/false) ((lambda (a39c4@t) ((lambda (a39c6@ls/false) (if a39c6@ls/false (apply (lambda () ((lambda (a39c8@t) ((lambda (a39ca@ls/false) (if a39ca@ls/false (apply (lambda () (list (a30d6@scheme-stx 'list) a39b4@x)) a39ca@ls/false) ((lambda (a39cc@t) ((lambda (a39ce@ls/false) (if a39ce@ls/false (apply (lambda () (list (a30d6@scheme-stx 'cons) a39b4@x a39b5@y)) a39ce@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a39cc@t))) (a3148@syntax-dispatch a39cc@t '_))) a39c8@t))) (a3148@syntax-dispatch a39c8@t '()))) a39bc@dy)) a39c6@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a39c4@t))) (a3148@syntax-dispatch a39c4@t '_))) a39be@t))) (a3148@syntax-dispatch a39be@t '(#(scheme-id quote) any)))) a39b4@x)) a39ba@ls/false) ((lambda (a39d0@t) ((lambda (a39d2@ls/false) (if a39d2@ls/false (apply (lambda (a39d4@stuff) (cons* (a30d6@scheme-stx 'list) a39b4@x a39d4@stuff)) a39d2@ls/false) ((lambda (a39d6@t) ((lambda (a39d8@ls/false) (if a39d8@ls/false (apply (lambda () (list (a30d6@scheme-stx 'cons) a39b4@x a39b5@y)) a39d8@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a39d6@t))) (a3148@syntax-dispatch a39d6@t '_))) a39d0@t))) (a3148@syntax-dispatch a39d0@t '(#(scheme-id list) . each-any)))) a39b8@t))) (a3148@syntax-dispatch a39b8@t '(#(scheme-id quote) any)))) a39b5@y))) (set! a3901@quasiappend (lambda (a399a@x a399b@y) ((lambda (a399e@ls) (if (null? a399e@ls) (list (a30d6@scheme-stx 'quote) '()) (if (null? (cdr a399e@ls)) (car a399e@ls) ((lambda () (begin '#f (cons* (a30d6@scheme-stx 'append) a399e@ls))))))) ((letrec ((a39a0@f (lambda (a39a2@x) (if (null? a39a2@x) ((lambda (a39a4@t) ((lambda (a39a6@ls/false) (if a39a6@ls/false (apply (lambda () '()) a39a6@ls/false) ((lambda (a39a8@t) ((lambda (a39aa@ls/false) (if a39aa@ls/false (apply (lambda () (list a399b@y)) a39aa@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a39a8@t))) (a3148@syntax-dispatch a39a8@t '_))) a39a4@t))) (a3148@syntax-dispatch a39a4@t '(#(scheme-id quote) ())))) a399b@y) ((lambda (a39ac@t) ((lambda (a39ae@ls/false) (if a39ae@ls/false (apply (lambda () (a39a0@f (cdr a39a2@x))) a39ae@ls/false) ((lambda (a39b0@t) ((lambda (a39b2@ls/false) (if a39b2@ls/false (apply (lambda () (cons (car a39a2@x) (a39a0@f (cdr a39a2@x)))) a39b2@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a39b0@t))) (a3148@syntax-dispatch a39b0@t '_))) a39ac@t))) (a3148@syntax-dispatch a39ac@t '(#(scheme-id quote) ())))) (car a39a2@x)))))) a39a0@f) a399a@x)))) (set! a3903@quasivector (lambda (a3968@x) ((lambda (a396a@pat-x) ((lambda (a396c@t) ((lambda (a396e@ls/false) (if a396e@ls/false (apply (lambda (a3970@x*) (list (a30d6@scheme-stx 'quote) (list->vector a3970@x*))) a396e@ls/false) ((lambda (a3972@t) ((lambda (a3974@ls/false) (if a3974@ls/false (apply (lambda () ((letrec ((a3976@f (lambda (a3978@x a3979@k) ((lambda (a397c@t) ((lambda (a397e@ls/false) (if a397e@ls/false (apply (lambda (a3980@x*) (a3979@k (map (lambda (a3982@x) (list (a30d6@scheme-stx 'quote) a3982@x)) a3980@x*))) a397e@ls/false) ((lambda (a3984@t) ((lambda (a3986@ls/false) (if a3986@ls/false (apply (lambda (a3988@x*) (a3979@k a3988@x*)) a3986@ls/false) ((lambda (a398a@t) ((lambda (a398c@ls/false) (if a398c@ls/false (apply (lambda (a398e@x a398f@y) (a3976@f a398f@y (lambda (a3992@ls) (a3979@k (cons a398e@x a3992@ls))))) a398c@ls/false) ((lambda (a3994@t) ((lambda (a3996@ls/false) (if a3996@ls/false (apply (lambda () (list (a30d6@scheme-stx 'list->vector) a396a@pat-x)) a3996@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3994@t))) (a3148@syntax-dispatch a3994@t '_))) a398a@t))) (a3148@syntax-dispatch a398a@t '(#(scheme-id cons) any any)))) a3984@t))) (a3148@syntax-dispatch a3984@t '(#(scheme-id list) . each-any)))) a397c@t))) (a3148@syntax-dispatch a397c@t '(#(scheme-id quote) each-any)))) a3978@x)))) a3976@f) a3968@x (lambda (a3998@ls) (cons* (a30d6@scheme-stx 'vector) a3998@ls)))) a3974@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3972@t))) (a3148@syntax-dispatch a3972@t '_))) a396c@t))) (a3148@syntax-dispatch a396c@t '(#(scheme-id quote) each-any)))) a396a@pat-x)) a3968@x))) (set! a3905@vquasi (lambda (a3946@p a3947@lev) ((lambda (a394a@t) ((lambda (a394c@ls/false) (if a394c@ls/false (apply (lambda (a394e@p a394f@q) ((lambda (a3952@t) ((lambda (a3954@ls/false) (if a3954@ls/false (apply (lambda (a3956@p) (if (= a3947@lev '0) (a38fd@quasicons* a3956@p (a3905@vquasi a394f@q a3947@lev)) (a38ff@quasicons (a38ff@quasicons (a38e1@datum 'unquote) (a3907@quasi a3956@p (- a3947@lev '1))) (a3905@vquasi a394f@q a3947@lev)))) a3954@ls/false) ((lambda (a3958@t) ((lambda (a395a@ls/false) (if a395a@ls/false (apply (lambda (a395c@p) (if (= a3947@lev '0) (a3901@quasiappend a395c@p (a3905@vquasi a394f@q a3947@lev)) (a38ff@quasicons (a38ff@quasicons (a38e1@datum 'unquote-splicing) (a3907@quasi a395c@p (- a3947@lev '1))) (a3905@vquasi a394f@q a3947@lev)))) a395a@ls/false) ((lambda (a395e@t) ((lambda (a3960@ls/false) (if a3960@ls/false (apply (lambda (a3962@p) (a38ff@quasicons (a3907@quasi a3962@p a3947@lev) (a3905@vquasi a394f@q a3947@lev))) a3960@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a395e@t))) (a3148@syntax-dispatch a395e@t 'any))) a3958@t))) (a3148@syntax-dispatch a3958@t '(#(scheme-id unquote-splicing) . each-any)))) a3952@t))) (a3148@syntax-dispatch a3952@t '(#(scheme-id unquote) . each-any)))) a394e@p)) a394c@ls/false) ((lambda (a3964@t) ((lambda (a3966@ls/false) (if a3966@ls/false (apply (lambda () (list (a30d6@scheme-stx 'quote) '())) a3966@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3964@t))) (a3148@syntax-dispatch a3964@t '()))) a394a@t))) (a3148@syntax-dispatch a394a@t '(any . any)))) a3946@p))) (set! a3907@quasi (lambda (a3910@p a3911@lev) ((lambda (a3914@t) ((lambda (a3916@ls/false) (if a3916@ls/false (apply (lambda (a3918@p) (if (= a3911@lev '0) a3918@p (a38ff@quasicons (a38e1@datum 'unquote) (a3907@quasi (list a3918@p) (- a3911@lev '1))))) a3916@ls/false) ((lambda (a391a@t) ((lambda (a391c@ls/false) (if a391c@ls/false (apply (lambda (a391e@p a391f@q) (if (= a3911@lev '0) (a38fd@quasicons* a391e@p (a3907@quasi a391f@q a3911@lev)) (a38ff@quasicons (a38ff@quasicons (a38e1@datum 'unquote) (a3907@quasi a391e@p (- a3911@lev '1))) (a3907@quasi a391f@q a3911@lev)))) a391c@ls/false) ((lambda (a3922@t) ((lambda (a3924@ls/false) (if a3924@ls/false (apply (lambda (a3926@p a3927@q) (if (= a3911@lev '0) (a3901@quasiappend a3926@p (a3907@quasi a3927@q a3911@lev)) (a38ff@quasicons (a38ff@quasicons (a38e1@datum 'unquote-splicing) (a3907@quasi a3926@p (- a3911@lev '1))) (a3907@quasi a3927@q a3911@lev)))) a3924@ls/false) ((lambda (a392a@t) ((lambda (a392c@ls/false) (if a392c@ls/false (apply (lambda (a392e@p) (a38ff@quasicons (a38e1@datum 'quasiquote) (a3907@quasi (list a392e@p) (+ a3911@lev '1)))) a392c@ls/false) ((lambda (a3930@t) ((lambda (a3932@ls/false) (if a3932@ls/false (apply (lambda (a3934@p a3935@q) (a38ff@quasicons (a3907@quasi a3934@p a3911@lev) (a3907@quasi a3935@q a3911@lev))) a3932@ls/false) ((lambda (a3938@t) ((lambda (a393a@ls/false) (if (and a393a@ls/false (apply (lambda (a393c@x) (not (a2f09@stx? a393c@x))) a393a@ls/false)) (apply (lambda (a393e@x) (a3903@quasivector (a3905@vquasi a393e@x a3911@lev))) a393a@ls/false) ((lambda (a3940@t) ((lambda (a3942@ls/false) (if a3942@ls/false (apply (lambda (a3944@p) (list (a30d6@scheme-stx 'quote) a3944@p)) a3942@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3940@t))) (a3148@syntax-dispatch a3940@t 'any))) a3938@t))) (a3148@syntax-dispatch a3938@t '#(vector each-any)))) a3930@t))) (a3148@syntax-dispatch a3930@t '(any . any)))) a392a@t))) (a3148@syntax-dispatch a392a@t '(#(scheme-id quasiquote) any)))) a3922@t))) (a3148@syntax-dispatch a3922@t '((#(scheme-id unquote-splicing) . each-any) . any)))) a391a@t))) (a3148@syntax-dispatch a391a@t '((#(scheme-id unquote) . each-any) . any)))) a3914@t))) (a3148@syntax-dispatch a3914@t '(#(scheme-id unquote) any)))) a3910@p))) (lambda (a3908@x) ((lambda (a390a@t) ((lambda (a390c@ls/false) (if a390c@ls/false (apply (lambda (a390e@e) (a3907@quasi a390e@e '0)) a390c@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a390a@t))) (a3148@syntax-dispatch a390a@t '(_ any)))) a3908@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! a3138@quasisyntax-macro ((lambda () ((lambda (a39e5@quasi) (begin (set! a39e5@quasi (lambda (a3a00@p a3a01@lev) ((lambda (a3a04@t) ((lambda (a3a06@ls/false) (if a3a06@ls/false (apply (lambda (a3a08@p) (if (= a3a01@lev '0) ((lambda (a3a0a@g) (values (list a3a0a@g) (list a3a08@p) a3a0a@g)) (gensym)) (call-with-values (lambda () (a39e5@quasi a3a08@p (- a3a01@lev '1))) (lambda (a3a12@a3a0d a3a13@a3a0f a3a14@a3a11) ((lambda (a3a18@p a3a19@rhs* a3a1a@lhs*) (values a3a1a@lhs* a3a19@rhs* (list 'unsyntax a3a18@p))) a3a14@a3a11 a3a13@a3a0f a3a12@a3a0d))))) a3a06@ls/false) ((lambda (a3a1e@t) ((lambda (a3a20@ls/false) (if (and a3a20@ls/false (apply (lambda () (= a3a01@lev '0)) a3a20@ls/false)) (apply (lambda () (a3239@syntax-violation '#f '"incorrect use of unsyntax" a3a00@p)) a3a20@ls/false) ((lambda (a3a22@t) ((lambda (a3a24@ls/false) (if a3a24@ls/false (apply (lambda (a3a26@p* a3a27@q) (call-with-values (lambda () (a39e5@quasi a3a27@q a3a01@lev)) (lambda (a3a30@a3a2b a3a31@a3a2d a3a32@a3a2f) ((lambda (a3a36@q a3a37@rhs* a3a38@lhs*) (if (= a3a01@lev '0) ((lambda (a3a3c@g*) (values (append a3a3c@g* a3a38@lhs*) (append a3a26@p* a3a37@rhs*) (append a3a3c@g* a3a36@q))) (map (lambda (a3a3e@x) (gensym)) a3a26@p*)) (call-with-values (lambda () (a39e5@quasi a3a26@p* (- a3a01@lev '1))) (lambda (a3a46@a3a41 a3a47@a3a43 a3a48@a3a45) ((lambda (a3a4c@p* a3a4d@rhs2* a3a4e@lhs2*) (values (append a3a4e@lhs2* a3a38@lhs*) (append a3a4d@rhs2* a3a37@rhs*) (cons (cons 'unsyntax a3a4c@p*) a3a36@q))) a3a48@a3a45 a3a47@a3a43 a3a46@a3a41))))) a3a32@a3a2f a3a31@a3a2d a3a30@a3a2b)))) a3a24@ls/false) ((lambda (a3a52@t) ((lambda (a3a54@ls/false) (if a3a54@ls/false (apply (lambda (a3a56@p* a3a57@q) (call-with-values (lambda () (a39e5@quasi a3a57@q a3a01@lev)) (lambda (a3a60@a3a5b a3a61@a3a5d a3a62@a3a5f) ((lambda (a3a66@q a3a67@rhs* a3a68@lhs*) (if (= a3a01@lev '0) ((lambda (a3a6c@g*) (values (append (map (lambda (a3a6e@g) (cons a3a6e@g '(...))) a3a6c@g*) a3a68@lhs*) (append a3a56@p* a3a67@rhs*) (append (apply append (map (lambda (a3a70@g) (cons a3a70@g '(...))) a3a6c@g*)) a3a66@q))) (map (lambda (a3a72@x) (gensym)) a3a56@p*)) (call-with-values (lambda () (a39e5@quasi a3a56@p* (- a3a01@lev '1))) (lambda (a3a7a@a3a75 a3a7b@a3a77 a3a7c@a3a79) ((lambda (a3a80@p* a3a81@rhs2* a3a82@lhs2*) (values (append a3a82@lhs2* a3a68@lhs*) (append a3a81@rhs2* a3a67@rhs*) (cons (cons 'unsyntax-splicing a3a80@p*) a3a66@q))) a3a7c@a3a79 a3a7b@a3a77 a3a7a@a3a75))))) a3a62@a3a5f a3a61@a3a5d a3a60@a3a5b)))) a3a54@ls/false) ((lambda (a3a86@t) ((lambda (a3a88@ls/false) (if (and a3a88@ls/false (apply (lambda () (= a3a01@lev '0)) a3a88@ls/false)) (apply (lambda () (a3239@syntax-violation '#f '"incorrect use of unsyntax-splicing" a3a00@p)) a3a88@ls/false) ((lambda (a3a8a@t) ((lambda (a3a8c@ls/false) (if a3a8c@ls/false (apply (lambda (a3a8e@p) (call-with-values (lambda () (a39e5@quasi a3a8e@p (+ a3a01@lev '1))) (lambda (a3a96@a3a91 a3a97@a3a93 a3a98@a3a95) ((lambda (a3a9c@p a3a9d@rhs* a3a9e@lhs*) (values a3a9e@lhs* a3a9d@rhs* (list 'quasisyntax a3a9c@p))) a3a98@a3a95 a3a97@a3a93 a3a96@a3a91)))) a3a8c@ls/false) ((lambda (a3aa2@t) ((lambda (a3aa4@ls/false) (if a3aa4@ls/false (apply (lambda (a3aa6@p a3aa7@q) (call-with-values (lambda () (a39e5@quasi a3aa6@p a3a01@lev)) (lambda (a3ab6@a3aab a3ab7@a3aad a3ab8@a3aaf) (call-with-values (lambda () (a39e5@quasi a3aa7@q a3a01@lev)) (lambda (a3abc@a3ab1 a3abd@a3ab3 a3abe@a3ab5) ((lambda (a3ac2@q a3ac3@rhs2* a3ac4@lhs2* a3ac5@p a3ac6@rhs* a3ac7@lhs*) (values (append a3ac4@lhs2* a3ac7@lhs*) (append a3ac3@rhs2* a3ac6@rhs*) (cons a3ac5@p a3ac2@q))) a3abe@a3ab5 a3abd@a3ab3 a3abc@a3ab1 a3ab8@a3aaf a3ab7@a3aad a3ab6@a3aab)))))) a3aa4@ls/false) ((lambda (a3ace@t) ((lambda (a3ad0@ls/false) (if a3ad0@ls/false (apply (lambda (a3ad2@x*) (call-with-values (lambda () (a39e5@quasi a3ad2@x* a3a01@lev)) (lambda (a3ada@a3ad5 a3adb@a3ad7 a3adc@a3ad9) ((lambda (a3ae0@x* a3ae1@rhs* a3ae2@lhs*) (values a3ae2@lhs* a3ae1@rhs* (list->vector a3ae0@x*))) a3adc@a3ad9 a3adb@a3ad7 a3ada@a3ad5)))) a3ad0@ls/false) ((lambda (a3ae6@t) ((lambda (a3ae8@ls/false) (if a3ae8@ls/false (apply (lambda () (values '() '() a3a00@p)) a3ae8@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3ae6@t))) (a3148@syntax-dispatch a3ae6@t '_))) a3ace@t))) (a3148@syntax-dispatch a3ace@t '#(vector each-any)))) a3aa2@t))) (a3148@syntax-dispatch a3aa2@t '(any . any)))) a3a8a@t))) (a3148@syntax-dispatch a3a8a@t '(#(scheme-id quasisyntax) any)))) a3a86@t))) (a3148@syntax-dispatch a3a86@t '#(scheme-id unsyntax-splicing)))) a3a52@t))) (a3148@syntax-dispatch a3a52@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) a3a22@t))) (a3148@syntax-dispatch a3a22@t '((#(scheme-id unsyntax) . each-any) . any)))) a3a1e@t))) (a3148@syntax-dispatch a3a1e@t '#(scheme-id unsyntax)))) a3a04@t))) (a3148@syntax-dispatch a3a04@t '(#(scheme-id unsyntax) any)))) a3a00@p))) (lambda (a39e6@x) ((lambda (a39e8@t) ((lambda (a39ea@ls/false) (if a39ea@ls/false (apply (lambda (a39ec@e) (call-with-values (lambda () (a39e5@quasi a39ec@e '0)) (lambda (a39f4@a39ef a39f5@a39f1 a39f6@a39f3) ((lambda (a39fa@v a39fb@rhs* a39fc@lhs*) (a3102@bless (list 'syntax-case (cons 'list a39fb@rhs*) '() (list a39fc@lhs* (list 'syntax a39fa@v))))) a39f6@a39f3 a39f5@a39f1 a39f4@a39ef)))) a39ea@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a39e8@t))) (a3148@syntax-dispatch a39e8@t '(_ any)))) a39e6@x)))) '#f)))) (set! a313a@define-struct-macro (lambda (a3aea@stx) (a3239@syntax-violation '#f '"define-struct not supported" a3aea@stx))) (set! a313c@define-record-type-macro (lambda (a3aec@x) ((lambda (a3aef@id a3af1@get-record-name a3af3@get-record-constructor-name a3af5@get-record-predicate-name a3af7@get-clause a3af9@foo-rtd-code a3afb@parent-rtd-code a3afd@parent-rcd-code a3aff@foo-rcd-code a3b01@get-protocol-code a3b03@get-fields a3b05@get-mutator-indices a3b07@get-mutators a3b09@get-accessors a3b0b@enumerate a3b0d@do-define-record a3b0f@verify-clauses) (begin (set! a3aef@id (lambda (a3ce2@ctxt . a3ce4@str*) (a323d@datum->syntax a3ce2@ctxt (string->symbol (apply string-append (map (lambda (a3ce6@x) (if (symbol? a3ce6@x) (symbol->string a3ce6@x) (if (string? a3ce6@x) a3ce6@x ((lambda () (begin '#f (assertion-violation 'define-record-type '"BUG"))))))) a3ce4@str*)))))) (set! a3af1@get-record-name (lambda (a3cd0@spec) ((lambda (a3cd2@t) ((lambda (a3cd4@ls/false) (if a3cd4@ls/false (apply (lambda (a3cd6@foo a3cd7@make-foo a3cd8@foo?) a3cd6@foo) a3cd4@ls/false) ((lambda (a3cdc@t) ((lambda (a3cde@ls/false) (if a3cde@ls/false (apply (lambda (a3ce0@foo) a3ce0@foo) a3cde@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3cdc@t))) (a3148@syntax-dispatch a3cdc@t 'any))) a3cd2@t))) (a3148@syntax-dispatch a3cd2@t '(any any any)))) a3cd0@spec))) (set! a3af3@get-record-constructor-name (lambda (a3cbc@spec) ((lambda (a3cbe@t) ((lambda (a3cc0@ls/false) (if a3cc0@ls/false (apply (lambda (a3cc2@foo a3cc3@make-foo a3cc4@foo?) a3cc3@make-foo) a3cc0@ls/false) ((lambda (a3cc8@t) ((lambda (a3cca@ls/false) (if (and a3cca@ls/false (apply (lambda (a3ccc@foo) (a2f41@id? a3ccc@foo)) a3cca@ls/false)) (apply (lambda (a3cce@foo) (a3aef@id a3cce@foo '"make-" (a2f57@stx->datum a3cce@foo))) a3cca@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3cc8@t))) (a3148@syntax-dispatch a3cc8@t 'any))) a3cbe@t))) (a3148@syntax-dispatch a3cbe@t '(any any any)))) a3cbc@spec))) (set! a3af5@get-record-predicate-name (lambda (a3ca8@spec) ((lambda (a3caa@t) ((lambda (a3cac@ls/false) (if a3cac@ls/false (apply (lambda (a3cae@foo a3caf@make-foo a3cb0@foo?) a3cb0@foo?) a3cac@ls/false) ((lambda (a3cb4@t) ((lambda (a3cb6@ls/false) (if (and a3cb6@ls/false (apply (lambda (a3cb8@foo) (a2f41@id? a3cb8@foo)) a3cb6@ls/false)) (apply (lambda (a3cba@foo) (a3aef@id a3cba@foo (a2f57@stx->datum a3cba@foo) '"?")) a3cb6@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3cb4@t))) (a3148@syntax-dispatch a3cb4@t 'any))) a3caa@t))) (a3148@syntax-dispatch a3caa@t '(any any any)))) a3ca8@spec))) (set! a3af7@get-clause (lambda (a3c96@id a3c97@ls) ((lambda (a3c9a@t) ((lambda (a3c9c@ls/false) (if a3c9c@ls/false (apply (lambda () '#f) a3c9c@ls/false) ((lambda (a3c9e@t) ((lambda (a3ca0@ls/false) (if a3ca0@ls/false (apply (lambda (a3ca2@x a3ca3@rest a3ca4@ls) (if (a2f49@free-id=? (a3102@bless a3c96@id) a3ca2@x) (cons a3ca2@x a3ca3@rest) (a3af7@get-clause a3c96@id a3ca4@ls))) a3ca0@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3c9e@t))) (a3148@syntax-dispatch a3c9e@t '((any . any) . any)))) a3c9a@t))) (a3148@syntax-dispatch a3c9a@t '()))) a3c97@ls))) (set! a3af9@foo-rtd-code (lambda (a3c44@name a3c45@clause* a3c46@parent-rtd-code) ((lambda (a3c4b@convert-field-spec*) (begin (set! a3c4b@convert-field-spec* (lambda (a3c7c@ls) (list->vector (map (lambda (a3c7e@x) ((lambda (a3c80@t) ((lambda (a3c82@ls/false) (if a3c82@ls/false (apply (lambda (a3c84@name a3c85@rest) (list 'mutable a3c84@name)) a3c82@ls/false) ((lambda (a3c88@t) ((lambda (a3c8a@ls/false) (if a3c8a@ls/false (apply (lambda (a3c8c@name a3c8d@rest) (list 'immutable a3c8c@name)) a3c8a@ls/false) ((lambda (a3c90@t) ((lambda (a3c92@ls/false) (if a3c92@ls/false (apply (lambda (a3c94@name) (list 'immutable a3c94@name)) a3c92@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3c90@t))) (a3148@syntax-dispatch a3c90@t 'any))) a3c88@t))) (a3148@syntax-dispatch a3c88@t '(#(scheme-id immutable) any . any)))) a3c80@t))) (a3148@syntax-dispatch a3c80@t '(#(scheme-id mutable) any . any)))) a3c7e@x)) a3c7c@ls)))) ((lambda (a3c4c@uid-code a3c4d@sealed? a3c4e@opaque? a3c4f@fields) (a3102@bless (list 'make-record-type-descriptor (list 'quote a3c44@name) a3c46@parent-rtd-code a3c4c@uid-code a3c4d@sealed? a3c4e@opaque? a3c4f@fields))) ((lambda (a3c54@t) ((lambda (a3c56@ls/false) (if a3c56@ls/false (apply (lambda () (list 'quote (gensym))) a3c56@ls/false) ((lambda (a3c58@t) ((lambda (a3c5a@ls/false) (if a3c5a@ls/false (apply (lambda (a3c5c@uid) (list 'quote a3c5c@uid)) a3c5a@ls/false) ((lambda (a3c5e@t) ((lambda (a3c60@ls/false) (if a3c60@ls/false (apply (lambda () '#f) a3c60@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3c5e@t))) (a3148@syntax-dispatch a3c5e@t '_))) a3c58@t))) (a3148@syntax-dispatch a3c58@t '(_ any)))) a3c54@t))) (a3148@syntax-dispatch a3c54@t '(_)))) (a3af7@get-clause 'nongenerative a3c45@clause*)) ((lambda (a3c62@t) ((lambda (a3c64@ls/false) (if a3c64@ls/false (apply (lambda () '#t) a3c64@ls/false) ((lambda (a3c66@t) ((lambda (a3c68@ls/false) (if a3c68@ls/false (apply (lambda () '#f) a3c68@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3c66@t))) (a3148@syntax-dispatch a3c66@t '_))) a3c62@t))) (a3148@syntax-dispatch a3c62@t '(_ #(atom #t))))) (a3af7@get-clause 'sealed a3c45@clause*)) ((lambda (a3c6a@t) ((lambda (a3c6c@ls/false) (if a3c6c@ls/false (apply (lambda () '#t) a3c6c@ls/false) ((lambda (a3c6e@t) ((lambda (a3c70@ls/false) (if a3c70@ls/false (apply (lambda () '#f) a3c70@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3c6e@t))) (a3148@syntax-dispatch a3c6e@t '_))) a3c6a@t))) (a3148@syntax-dispatch a3c6a@t '(_ #(atom #t))))) (a3af7@get-clause 'opaque a3c45@clause*)) ((lambda (a3c72@t) ((lambda (a3c74@ls/false) (if a3c74@ls/false (apply (lambda (a3c76@field-spec*) (list 'quote (a3c4b@convert-field-spec* a3c76@field-spec*))) a3c74@ls/false) ((lambda (a3c78@t) ((lambda (a3c7a@ls/false) (if a3c7a@ls/false (apply (lambda () ''#()) a3c7a@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3c78@t))) (a3148@syntax-dispatch a3c78@t '_))) a3c72@t))) (a3148@syntax-dispatch a3c72@t '(_ . each-any)))) (a3af7@get-clause 'fields a3c45@clause*))))) '#f))) (set! a3afb@parent-rtd-code (lambda (a3c2c@clause*) ((lambda (a3c2e@t) ((lambda (a3c30@ls/false) (if a3c30@ls/false (apply (lambda (a3c32@name) (list 'record-type-descriptor a3c32@name)) a3c30@ls/false) ((lambda (a3c34@t) ((lambda (a3c36@ls/false) (if a3c36@ls/false (apply (lambda () ((lambda (a3c38@t) ((lambda (a3c3a@ls/false) (if a3c3a@ls/false (apply (lambda (a3c3c@rtd a3c3d@rcd) a3c3c@rtd) a3c3a@ls/false) ((lambda (a3c40@t) ((lambda (a3c42@ls/false) (if a3c42@ls/false (apply (lambda () '#f) a3c42@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3c40@t))) (a3148@syntax-dispatch a3c40@t '#(atom #f)))) a3c38@t))) (a3148@syntax-dispatch a3c38@t '(_ any any)))) (a3af7@get-clause 'parent-rtd a3c2c@clause*))) a3c36@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3c34@t))) (a3148@syntax-dispatch a3c34@t '#(atom #f)))) a3c2e@t))) (a3148@syntax-dispatch a3c2e@t '(_ any)))) (a3af7@get-clause 'parent a3c2c@clause*)))) (set! a3afd@parent-rcd-code (lambda (a3c14@clause*) ((lambda (a3c16@t) ((lambda (a3c18@ls/false) (if a3c18@ls/false (apply (lambda (a3c1a@name) (list 'record-constructor-descriptor a3c1a@name)) a3c18@ls/false) ((lambda (a3c1c@t) ((lambda (a3c1e@ls/false) (if a3c1e@ls/false (apply (lambda () ((lambda (a3c20@t) ((lambda (a3c22@ls/false) (if a3c22@ls/false (apply (lambda (a3c24@rtd a3c25@rcd) a3c25@rcd) a3c22@ls/false) ((lambda (a3c28@t) ((lambda (a3c2a@ls/false) (if a3c2a@ls/false (apply (lambda () '#f) a3c2a@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3c28@t))) (a3148@syntax-dispatch a3c28@t '#(atom #f)))) a3c20@t))) (a3148@syntax-dispatch a3c20@t '(_ any any)))) (a3af7@get-clause 'parent-rtd a3c14@clause*))) a3c1e@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3c1c@t))) (a3148@syntax-dispatch a3c1c@t '#(atom #f)))) a3c16@t))) (a3148@syntax-dispatch a3c16@t '(_ any)))) (a3af7@get-clause 'parent a3c14@clause*)))) (set! a3aff@foo-rcd-code (lambda (a3c0c@clause* a3c0d@foo-rtd a3c0e@protocol a3c0f@parent-rcd-code) (list 'make-record-constructor-descriptor a3c0d@foo-rtd a3c0f@parent-rcd-code a3c0e@protocol))) (set! a3b01@get-protocol-code (lambda (a3c00@clause*) ((lambda (a3c02@t) ((lambda (a3c04@ls/false) (if a3c04@ls/false (apply (lambda (a3c06@expr) a3c06@expr) a3c04@ls/false) ((lambda (a3c08@t) ((lambda (a3c0a@ls/false) (if a3c0a@ls/false (apply (lambda () '#f) a3c0a@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3c08@t))) (a3148@syntax-dispatch a3c08@t '_))) a3c02@t))) (a3148@syntax-dispatch a3c02@t '(_ any)))) (a3af7@get-clause 'protocol a3c00@clause*)))) (set! a3b03@get-fields (lambda (a3bee@clause*) ((lambda (a3bf0@t) ((lambda (a3bf2@ls/false) (if a3bf2@ls/false (apply (lambda () '()) a3bf2@ls/false) ((lambda (a3bf4@t) ((lambda (a3bf6@ls/false) (if a3bf6@ls/false (apply (lambda (a3bf8@f*) a3bf8@f*) a3bf6@ls/false) ((lambda (a3bfa@t) ((lambda (a3bfc@ls/false) (if a3bfc@ls/false (apply (lambda (a3bfe@rest) (a3b03@get-fields a3bfe@rest)) a3bfc@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3bfa@t))) (a3148@syntax-dispatch a3bfa@t '(_ . any)))) a3bf4@t))) (a3148@syntax-dispatch a3bf4@t '((#(scheme-id fields) . each-any) . _)))) a3bf0@t))) (a3148@syntax-dispatch a3bf0@t '()))) a3bee@clause*))) (set! a3b05@get-mutator-indices (lambda (a3bd6@fields) ((letrec ((a3bd8@f (lambda (a3bda@fields a3bdb@i) ((lambda (a3bde@t) ((lambda (a3be0@ls/false) (if a3be0@ls/false (apply (lambda () '()) a3be0@ls/false) ((lambda (a3be2@t) ((lambda (a3be4@ls/false) (if a3be4@ls/false (apply (lambda (a3be6@rest) (cons a3bdb@i (a3bd8@f a3be6@rest (+ a3bdb@i '1)))) a3be4@ls/false) ((lambda (a3be8@t) ((lambda (a3bea@ls/false) (if a3bea@ls/false (apply (lambda (a3bec@rest) (a3bd8@f a3bec@rest (+ a3bdb@i '1))) a3bea@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3be8@t))) (a3148@syntax-dispatch a3be8@t '(_ . any)))) a3be2@t))) (a3148@syntax-dispatch a3be2@t '((#(scheme-id mutable) . _) . any)))) a3bde@t))) (a3148@syntax-dispatch a3bde@t '()))) a3bda@fields)))) a3bd8@f) a3bd6@fields '0))) (set! a3b07@get-mutators (lambda (a3bac@foo a3bad@fields) ((lambda (a3bb1@gen-name) (begin (set! a3bb1@gen-name (lambda (a3bd4@x) (a323d@datum->syntax a3bac@foo (string->symbol (string-append (symbol->string (a323f@syntax->datum a3bac@foo)) '"-" (symbol->string (a323f@syntax->datum a3bd4@x)) '"-set!"))))) ((letrec ((a3bb2@f (lambda (a3bb4@fields) ((lambda (a3bb6@t) ((lambda (a3bb8@ls/false) (if a3bb8@ls/false (apply (lambda () '()) a3bb8@ls/false) ((lambda (a3bba@t) ((lambda (a3bbc@ls/false) (if a3bbc@ls/false (apply (lambda (a3bbe@name a3bbf@accessor a3bc0@mutator a3bc1@rest) (cons a3bc0@mutator (a3bb2@f a3bc1@rest))) a3bbc@ls/false) ((lambda (a3bc6@t) ((lambda (a3bc8@ls/false) (if a3bc8@ls/false (apply (lambda (a3bca@name a3bcb@rest) (cons (a3bb1@gen-name a3bca@name) (a3bb2@f a3bcb@rest))) a3bc8@ls/false) ((lambda (a3bce@t) ((lambda (a3bd0@ls/false) (if a3bd0@ls/false (apply (lambda (a3bd2@rest) (a3bb2@f a3bd2@rest)) a3bd0@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3bce@t))) (a3148@syntax-dispatch a3bce@t '(_ . any)))) a3bc6@t))) (a3148@syntax-dispatch a3bc6@t '((#(scheme-id mutable) any) . any)))) a3bba@t))) (a3148@syntax-dispatch a3bba@t '((#(scheme-id mutable) any any any) . any)))) a3bb6@t))) (a3148@syntax-dispatch a3bb6@t '()))) a3bb4@fields)))) a3bb2@f) a3bad@fields))) '#f))) (set! a3b09@get-accessors (lambda (a3b68@foo a3b69@fields) ((lambda (a3b6d@gen-name) (begin (set! a3b6d@gen-name (lambda (a3baa@x) (a323d@datum->syntax a3b68@foo (string->symbol (string-append (symbol->string (a323f@syntax->datum a3b68@foo)) '"-" (symbol->string (a323f@syntax->datum a3baa@x))))))) (map (lambda (a3b6e@field) ((lambda (a3b70@t) ((lambda (a3b72@ls/false) (if (and a3b72@ls/false (apply (lambda (a3b74@name a3b75@accessor a3b76@mutator) (a2f41@id? a3b75@accessor)) a3b72@ls/false)) (apply (lambda (a3b7a@name a3b7b@accessor a3b7c@mutator) a3b7b@accessor) a3b72@ls/false) ((lambda (a3b80@t) ((lambda (a3b82@ls/false) (if (and a3b82@ls/false (apply (lambda (a3b84@name a3b85@accessor) (a2f41@id? a3b85@accessor)) a3b82@ls/false)) (apply (lambda (a3b88@name a3b89@accessor) a3b89@accessor) a3b82@ls/false) ((lambda (a3b8c@t) ((lambda (a3b8e@ls/false) (if (and a3b8e@ls/false (apply (lambda (a3b90@name) (a2f41@id? a3b90@name)) a3b8e@ls/false)) (apply (lambda (a3b92@name) (a3b6d@gen-name a3b92@name)) a3b8e@ls/false) ((lambda (a3b94@t) ((lambda (a3b96@ls/false) (if (and a3b96@ls/false (apply (lambda (a3b98@name) (a2f41@id? a3b98@name)) a3b96@ls/false)) (apply (lambda (a3b9a@name) (a3b6d@gen-name a3b9a@name)) a3b96@ls/false) ((lambda (a3b9c@t) ((lambda (a3b9e@ls/false) (if (and a3b9e@ls/false (apply (lambda (a3ba0@name) (a2f41@id? a3ba0@name)) a3b9e@ls/false)) (apply (lambda (a3ba2@name) (a3b6d@gen-name a3ba2@name)) a3b9e@ls/false) ((lambda (a3ba4@t) ((lambda (a3ba6@ls/false) (if a3ba6@ls/false (apply (lambda (a3ba8@others) (a3239@syntax-violation '#f '"invalid field spec" a3b6e@field)) a3ba6@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3ba4@t))) (a3148@syntax-dispatch a3ba4@t 'any))) a3b9c@t))) (a3148@syntax-dispatch a3b9c@t 'any))) a3b94@t))) (a3148@syntax-dispatch a3b94@t '(#(scheme-id immutable) any)))) a3b8c@t))) (a3148@syntax-dispatch a3b8c@t '(#(scheme-id mutable) any)))) a3b80@t))) (a3148@syntax-dispatch a3b80@t '(#(scheme-id immutable) any any)))) a3b70@t))) (a3148@syntax-dispatch a3b70@t '(#(scheme-id mutable) any any any)))) a3b6e@field)) a3b69@fields))) '#f))) (set! a3b0b@enumerate (lambda (a3b60@ls) ((letrec ((a3b62@f (lambda (a3b64@ls a3b65@i) (if (null? a3b64@ls) '() ((lambda () (begin '#f (cons a3b65@i (a3b62@f (cdr a3b64@ls) (+ a3b65@i '1)))))))))) a3b62@f) a3b60@ls '0))) (set! a3b0d@do-define-record (lambda (a3b38@namespec a3b39@clause*) ((lambda (a3b3c@foo) ((lambda (a3b3e@foo-rtd) ((lambda (a3b40@foo-rcd) ((lambda (a3b42@protocol) ((lambda (a3b44@make-foo) ((lambda (a3b46@fields) ((lambda (a3b48@idx*) ((lambda (a3b4a@foo-x*) ((lambda (a3b4c@set-foo-x!*) ((lambda (a3b4e@set-foo-idx*) ((lambda (a3b50@foo?) ((lambda (a3b52@foo-rtd-code) ((lambda (a3b54@foo-rcd-code) ((lambda (a3b56@protocol-code) ((lambda () (a3102@bless (cons 'begin (cons (list 'define a3b3e@foo-rtd a3b52@foo-rtd-code) (cons (list 'define a3b42@protocol a3b56@protocol-code) (cons (list 'define a3b40@foo-rcd a3b54@foo-rcd-code) (cons (list 'define-syntax a3b3c@foo (list 'list ''$rtd (list 'syntax a3b3e@foo-rtd) (list 'syntax a3b40@foo-rcd))) (cons (list 'define a3b50@foo? (list 'record-predicate a3b3e@foo-rtd)) (cons (list 'define a3b44@make-foo (list 'record-constructor a3b40@foo-rcd)) (append (map (lambda (a3b58@foo-x a3b59@idx) (list 'define a3b58@foo-x (list 'record-accessor a3b3e@foo-rtd a3b59@idx))) a3b4a@foo-x* a3b48@idx*) (map (lambda (a3b5c@set-foo-x! a3b5d@idx) (list 'define a3b5c@set-foo-x! (list 'record-mutator a3b3e@foo-rtd a3b5d@idx))) a3b4c@set-foo-x!* a3b4e@set-foo-idx*))))))))))))) (a3b01@get-protocol-code a3b39@clause*))) (a3aff@foo-rcd-code a3b39@clause* a3b3e@foo-rtd a3b42@protocol (a3afd@parent-rcd-code a3b39@clause*)))) (a3af9@foo-rtd-code a3b3c@foo a3b39@clause* (a3afb@parent-rtd-code a3b39@clause*)))) (a3af5@get-record-predicate-name a3b38@namespec))) (a3b05@get-mutator-indices a3b46@fields))) (a3b07@get-mutators a3b3c@foo a3b46@fields))) (a3b09@get-accessors a3b3c@foo a3b46@fields))) (a3b0b@enumerate a3b46@fields))) (a3b03@get-fields a3b39@clause*))) (a3af3@get-record-constructor-name a3b38@namespec))) (gensym))) (gensym))) (gensym))) (a3af1@get-record-name a3b38@namespec)))) (set! a3b0f@verify-clauses (lambda (a3b18@x a3b19@cls*) ((lambda (a3b1d@valid-kwds a3b1f@free-id-member?) (begin (set! a3b1d@valid-kwds (map a3102@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! a3b1f@free-id-member? (lambda (a3b34@x a3b35@ls) (and (pair? a3b35@ls) (or (a2f49@free-id=? a3b34@x (car a3b35@ls)) (a3b1f@free-id-member? a3b34@x (cdr a3b35@ls)))))) ((letrec ((a3b20@f (lambda (a3b22@cls* a3b23@seen*) (if (not (null? a3b22@cls*)) ((lambda (a3b26@t) ((lambda (a3b28@ls/false) (if a3b28@ls/false (apply (lambda (a3b2a@kwd a3b2b@rest) (if (or (not (a2f41@id? a3b2a@kwd)) (not (a3b1f@free-id-member? a3b2a@kwd a3b1d@valid-kwds))) (a3239@syntax-violation '#f '"not a valid define-record-type keyword" a3b2a@kwd) (if (a2f4f@bound-id-member? a3b2a@kwd a3b23@seen*) (a3239@syntax-violation '#f '"duplicate use of keyword " a3b18@x a3b2a@kwd) ((lambda () (begin '#f (a3b20@f (cdr a3b22@cls*) (cons a3b2a@kwd a3b23@seen*)))))))) a3b28@ls/false) ((lambda (a3b2e@t) ((lambda (a3b30@ls/false) (if a3b30@ls/false (apply (lambda (a3b32@cls) (a3239@syntax-violation '#f '"malformed define-record-type clause" a3b32@cls)) a3b30@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3b2e@t))) (a3148@syntax-dispatch a3b2e@t 'any))) a3b26@t))) (a3148@syntax-dispatch a3b26@t '(any . any)))) (car a3b22@cls*)) (void))))) a3b20@f) a3b19@cls* '()))) '#f '#f))) ((lambda (a3b10@t) ((lambda (a3b12@ls/false) (if a3b12@ls/false (apply (lambda (a3b14@namespec a3b15@clause*) (begin (a3b0f@verify-clauses a3aec@x a3b15@clause*) (a3b0d@do-define-record a3b14@namespec a3b15@clause*))) a3b12@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3b10@t))) (a3148@syntax-dispatch a3b10@t '(_ any . each-any)))) a3aec@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! a313e@define-condition-type-macro (lambda (a3ce8@x) ((lambda (a3ceb@mkname) (begin (set! a3ceb@mkname (lambda (a3d18@name a3d19@suffix) (a323d@datum->syntax a3d18@name (string->symbol (string-append (symbol->string (a323f@syntax->datum a3d18@name)) a3d19@suffix))))) ((lambda (a3cec@t) ((lambda (a3cee@ls/false) (if (and a3cee@ls/false (apply (lambda (a3cf0@ctxt a3cf1@name a3cf2@super a3cf3@constructor a3cf4@predicate a3cf5@field* a3cf6@accessor*) (and (a2f41@id? a3cf1@name) (a2f41@id? a3cf2@super) (a2f41@id? a3cf3@constructor) (a2f41@id? a3cf4@predicate) (for-all a2f41@id? a3cf5@field*) (for-all a2f41@id? a3cf6@accessor*))) a3cee@ls/false)) (apply (lambda (a3cfe@ctxt a3cff@name a3d00@super a3d01@constructor a3d02@predicate a3d03@field* a3d04@accessor*) ((lambda (a3d0c@aux-accessor*) (a3102@bless (cons 'begin (cons (cons 'define-record-type (cons (list a3cff@name a3d01@constructor (gensym)) (cons (list 'parent a3d00@super) (cons (cons 'fields (map (lambda (a3d0e@field a3d0f@aux) (list 'immutable a3d0e@field a3d0f@aux)) a3d03@field* a3d0c@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define a3d02@predicate (list 'condition-predicate (list 'record-type-descriptor a3cff@name))) (map (lambda (a3d12@accessor a3d13@aux) (list 'define a3d12@accessor (list 'condition-accessor (list 'record-type-descriptor a3cff@name) a3d13@aux))) a3d04@accessor* a3d0c@aux-accessor*)))))) (map (lambda (a3d16@x) (gensym)) a3d04@accessor*))) a3cee@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3cec@t))) (a3148@syntax-dispatch a3cec@t '(any any any any any . #(each (any any)))))) a3ce8@x))) '#f))) (set! a3140@incorrect-usage-macro (lambda (a3d1c@e) (a3239@syntax-violation '#f '"incorrect usage of auxiliary keyword" a3d1c@e))) (set! a3142@parameterize-macro (lambda (a3d1e@e) ((lambda (a3d20@t) ((lambda (a3d22@ls/false) (if a3d22@ls/false (apply (lambda (a3d24@b a3d25@b*) (a3102@bless (cons 'let (cons '() (cons a3d24@b a3d25@b*))))) a3d22@ls/false) ((lambda (a3d28@t) ((lambda (a3d2a@ls/false) (if a3d2a@ls/false (apply (lambda (a3d2c@olhs* a3d2d@orhs* a3d2e@b a3d2f@b*) ((lambda (a3d34@lhs* a3d35@rhs*) (a3102@bless (cons (list 'lambda (append a3d34@lhs* a3d35@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (a3d38@lhs a3d39@rhs) (list 'let (list (list 't (list a3d38@lhs))) (list a3d38@lhs a3d39@rhs) (cons 'set! (cons a3d39@rhs '(t))))) a3d34@lhs* a3d35@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons a3d2e@b a3d2f@b*))) '(swap)))))) (append a3d2c@olhs* a3d2d@orhs*)))) (a3223@generate-temporaries a3d2c@olhs*) (a3223@generate-temporaries a3d2d@orhs*))) a3d2a@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3d28@t))) (a3148@syntax-dispatch a3d28@t '(_ #(each (any any)) any . each-any)))) a3d20@t))) (a3148@syntax-dispatch a3d20@t '(_ () any . each-any)))) a3d1e@e))) (set! a3144@foreign-call-transformer (lambda (a3d3c@e a3d3d@r a3d3e@mr) ((lambda (a3d42@t) ((lambda (a3d44@ls/false) (if a3d44@ls/false (apply (lambda (a3d46@name a3d47@arg*) (cons 'foreign-call (cons (a316c@chi-expr a3d46@name a3d3d@r a3d3e@mr) (a3168@chi-expr* a3d47@arg* a3d3d@r a3d3e@mr)))) a3d44@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3d42@t))) (a3148@syntax-dispatch a3d42@t '(_ any . each-any)))) a3d3c@e))) (set! a3146@convert-pattern (lambda (a3d4a@pattern a3d4b@keys) ((lambda (a3d4f@cvt* a3d51@cvt) (begin (set! a3d4f@cvt* (lambda (a3dee@p* a3def@n a3df0@ids) (if (null? a3dee@p*) (values '() a3df0@ids) (call-with-values (lambda () (a3d4f@cvt* (cdr a3dee@p*) a3def@n a3df0@ids)) (lambda (a3df8@a3df5 a3df9@a3df7) ((lambda (a3dfc@ids a3dfd@y) (call-with-values (lambda () (a3d51@cvt (car a3dee@p*) a3def@n a3dfc@ids)) (lambda (a3e04@a3e01 a3e05@a3e03) ((lambda (a3e08@ids a3e09@x) (values (cons a3e09@x a3dfd@y) a3e08@ids)) a3e05@a3e03 a3e04@a3e01)))) a3df9@a3df7 a3df8@a3df5)))))) (set! a3d51@cvt (lambda (a3d52@p a3d53@n a3d54@ids) ((lambda (a3d58@t) ((lambda (a3d5a@ls/false) (if (and a3d5a@ls/false (apply (lambda (a3d5c@id) (a2f41@id? a3d5c@id)) a3d5a@ls/false)) (apply (lambda (a3d5e@id) (if (a2f4f@bound-id-member? a3d52@p a3d4b@keys) (values (vector 'free-id a3d52@p) a3d54@ids) (if (a2f49@free-id=? a3d52@p (a30d6@scheme-stx '_)) (values '_ a3d54@ids) ((lambda () (begin '#f (values 'any (cons (cons a3d52@p a3d53@n) a3d54@ids)))))))) a3d5a@ls/false) ((lambda (a3d60@t) ((lambda (a3d62@ls/false) (if (and a3d62@ls/false (apply (lambda (a3d64@p a3d65@dots) (a314a@ellipsis? a3d65@dots)) a3d62@ls/false)) (apply (lambda (a3d68@p a3d69@dots) (call-with-values (lambda () (a3d51@cvt a3d68@p (+ a3d53@n '1) a3d54@ids)) (lambda (a3d70@a3d6d a3d71@a3d6f) ((lambda (a3d74@ids a3d75@p) (values (if (eq? a3d75@p 'any) 'each-any (vector 'each a3d75@p)) a3d74@ids)) a3d71@a3d6f a3d70@a3d6d)))) a3d62@ls/false) ((lambda (a3d78@t) ((lambda (a3d7a@ls/false) (if (and a3d7a@ls/false (apply (lambda (a3d7c@x a3d7d@dots a3d7e@ys a3d7f@z) (a314a@ellipsis? a3d7d@dots)) a3d7a@ls/false)) (apply (lambda (a3d84@x a3d85@dots a3d86@ys a3d87@z) (call-with-values (lambda () (a3d51@cvt a3d87@z a3d53@n a3d54@ids)) (lambda (a3d90@a3d8d a3d91@a3d8f) ((lambda (a3d94@ids a3d95@z) (call-with-values (lambda () (a3d4f@cvt* a3d86@ys a3d53@n a3d94@ids)) (lambda (a3d9c@a3d99 a3d9d@a3d9b) ((lambda (a3da0@ids a3da1@ys) (call-with-values (lambda () (a3d51@cvt a3d84@x (+ a3d53@n '1) a3da0@ids)) (lambda (a3da8@a3da5 a3da9@a3da7) ((lambda (a3dac@ids a3dad@x) (values (vector 'each+ a3dad@x (reverse a3da1@ys) a3d95@z) a3dac@ids)) a3da9@a3da7 a3da8@a3da5)))) a3d9d@a3d9b a3d9c@a3d99)))) a3d91@a3d8f a3d90@a3d8d)))) a3d7a@ls/false) ((lambda (a3db0@t) ((lambda (a3db2@ls/false) (if a3db2@ls/false (apply (lambda (a3db4@x a3db5@y) (call-with-values (lambda () (a3d51@cvt a3db5@y a3d53@n a3d54@ids)) (lambda (a3dbc@a3db9 a3dbd@a3dbb) ((lambda (a3dc0@ids a3dc1@y) (call-with-values (lambda () (a3d51@cvt a3db4@x a3d53@n a3dc0@ids)) (lambda (a3dc8@a3dc5 a3dc9@a3dc7) ((lambda (a3dcc@ids a3dcd@x) (values (cons a3dcd@x a3dc1@y) a3dcc@ids)) a3dc9@a3dc7 a3dc8@a3dc5)))) a3dbd@a3dbb a3dbc@a3db9)))) a3db2@ls/false) ((lambda (a3dd0@t) ((lambda (a3dd2@ls/false) (if a3dd2@ls/false (apply (lambda () (values '() a3d54@ids)) a3dd2@ls/false) ((lambda (a3dd4@t) ((lambda (a3dd6@ls/false) (if (and a3dd6@ls/false (apply (lambda (a3dd8@p) (not (a2f09@stx? a3dd8@p))) a3dd6@ls/false)) (apply (lambda (a3dda@p) (call-with-values (lambda () (a3d51@cvt a3dda@p a3d53@n a3d54@ids)) (lambda (a3de0@a3ddd a3de1@a3ddf) ((lambda (a3de4@ids a3de5@p) (values (vector 'vector a3de5@p) a3de4@ids)) a3de1@a3ddf a3de0@a3ddd)))) a3dd6@ls/false) ((lambda (a3de8@t) ((lambda (a3dea@ls/false) (if a3dea@ls/false (apply (lambda (a3dec@datum) (values (vector 'atom (a2f57@stx->datum a3dec@datum)) a3d54@ids)) a3dea@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3de8@t))) (a3148@syntax-dispatch a3de8@t 'any))) a3dd4@t))) (a3148@syntax-dispatch a3dd4@t '#(vector each-any)))) a3dd0@t))) (a3148@syntax-dispatch a3dd0@t '()))) a3db0@t))) (a3148@syntax-dispatch a3db0@t '(any . any)))) a3d78@t))) (a3148@syntax-dispatch a3d78@t '(any any . #(each+ any () any))))) a3d60@t))) (a3148@syntax-dispatch a3d60@t '(any any)))) a3d58@t))) (a3148@syntax-dispatch a3d58@t 'any))) a3d52@p))) (a3d51@cvt a3d4a@pattern '0 '()))) '#f '#f))) (set! a3148@syntax-dispatch (lambda (a3e0c@e a3e0d@p) ((lambda (a3e11@stx^ a3e13@match-each a3e15@match-each+ a3e17@match-each-any a3e19@match-empty a3e1b@combine a3e1d@match* a3e1f@match) (begin (set! a3e11@stx^ (lambda (a3ee8@e a3ee9@m* a3eea@s* a3eeb@ae*) (if (and (null? a3ee9@m*) (null? a3eea@s*) (null? a3eeb@ae*)) a3ee8@e (a2f29@mkstx a3ee8@e a3ee9@m* a3eea@s* a3eeb@ae*)))) (set! a3e13@match-each (lambda (a3ec8@e a3ec9@p a3eca@m* a3ecb@s* a3ecc@ae*) (if (pair? a3ec8@e) ((lambda (a3ed2@first) (and a3ed2@first ((lambda (a3ed4@rest) (and a3ed4@rest (cons a3ed2@first a3ed4@rest))) (a3e13@match-each (cdr a3ec8@e) a3ec9@p a3eca@m* a3ecb@s* a3ecc@ae*)))) (a3e1f@match (car a3ec8@e) a3ec9@p a3eca@m* a3ecb@s* a3ecc@ae* '())) (if (null? a3ec8@e) '() (if (a2f09@stx? a3ec8@e) (and (not (a2ec3@top-marked? a3eca@m*)) (call-with-values (lambda () (a2f27@join-wraps a3eca@m* a3ecb@s* a3ecc@ae* a3ec8@e)) (lambda (a3edc@a3ed7 a3edd@a3ed9 a3ede@a3edb) ((lambda (a3ee2@ae* a3ee3@s* a3ee4@m*) (a3e13@match-each (a2f0d@stx-expr a3ec8@e) a3ec9@p a3ee4@m* a3ee3@s* a3ee2@ae*)) a3ede@a3edb a3edd@a3ed9 a3edc@a3ed7)))) (if (a2ac7@a298b@annotation? a3ec8@e) (a3e13@match-each (a2ac9@a298f@annotation-expression a3ec8@e) a3ec9@p a3eca@m* a3ecb@s* a3ecc@ae*) ((lambda () (begin '#f '#f))))))))) (set! a3e15@match-each+ (lambda (a3e88@e a3e89@x-pat a3e8a@y-pat a3e8b@z-pat a3e8c@m* a3e8d@s* a3e8e@ae* a3e8f@r) ((letrec ((a3e98@f (lambda (a3e9a@e a3e9b@m* a3e9c@s* a3e9d@ae*) (if (pair? a3e9a@e) (call-with-values (lambda () (a3e98@f (cdr a3e9a@e) a3e9b@m* a3e9c@s* a3e9d@ae*)) (lambda (a3ea8@a3ea3 a3ea9@a3ea5 a3eaa@a3ea7) ((lambda (a3eae@r a3eaf@y-pat a3eb0@xr*) (if a3eae@r (if (null? a3eaf@y-pat) ((lambda (a3eb4@xr) (if a3eb4@xr (values (cons a3eb4@xr a3eb0@xr*) a3eaf@y-pat a3eae@r) (values '#f '#f '#f))) (a3e1f@match (car a3e9a@e) a3e89@x-pat a3e9b@m* a3e9c@s* a3e9d@ae* '())) (values '() (cdr a3eaf@y-pat) (a3e1f@match (car a3e9a@e) (car a3eaf@y-pat) a3e9b@m* a3e9c@s* a3e9d@ae* a3eae@r))) (values '#f '#f '#f))) a3eaa@a3ea7 a3ea9@a3ea5 a3ea8@a3ea3))) (if (a2f09@stx? a3e9a@e) (if (a2ec3@top-marked? a3e9b@m*) (values '() a3e8a@y-pat (a3e1f@match a3e9a@e a3e8b@z-pat a3e9b@m* a3e9c@s* a3e9d@ae* a3e8f@r)) (call-with-values (lambda () (a2f27@join-wraps a3e9b@m* a3e9c@s* a3e9d@ae* a3e9a@e)) (lambda (a3ebc@a3eb7 a3ebd@a3eb9 a3ebe@a3ebb) ((lambda (a3ec2@ae* a3ec3@s* a3ec4@m*) (a3e98@f (a2f0d@stx-expr a3e9a@e) a3ec4@m* a3ec3@s* a3ec2@ae*)) a3ebe@a3ebb a3ebd@a3eb9 a3ebc@a3eb7)))) (if (a2ac7@a298b@annotation? a3e9a@e) (a3e98@f (a2ac9@a298f@annotation-expression a3e9a@e) a3e9b@m* a3e9c@s* a3e9d@ae*) ((lambda () (begin '#f (values '() a3e8a@y-pat (a3e1f@match a3e9a@e a3e8b@z-pat a3e9b@m* a3e9c@s* a3e9d@ae* a3e8f@r))))))))))) a3e98@f) a3e88@e a3e8c@m* a3e8d@s* a3e8e@ae*))) (set! a3e17@match-each-any (lambda (a3e6c@e a3e6d@m* a3e6e@s* a3e6f@ae*) (if (pair? a3e6c@e) ((lambda (a3e74@l) (and a3e74@l (cons (a3e11@stx^ (car a3e6c@e) a3e6d@m* a3e6e@s* a3e6f@ae*) a3e74@l))) (a3e17@match-each-any (cdr a3e6c@e) a3e6d@m* a3e6e@s* a3e6f@ae*)) (if (null? a3e6c@e) '() (if (a2f09@stx? a3e6c@e) (and (not (a2ec3@top-marked? a3e6d@m*)) (call-with-values (lambda () (a2f27@join-wraps a3e6d@m* a3e6e@s* a3e6f@ae* a3e6c@e)) (lambda (a3e7c@a3e77 a3e7d@a3e79 a3e7e@a3e7b) ((lambda (a3e82@ae* a3e83@s* a3e84@m*) (a3e17@match-each-any (a2f0d@stx-expr a3e6c@e) a3e84@m* a3e83@s* a3e82@ae*)) a3e7e@a3e7b a3e7d@a3e79 a3e7c@a3e77)))) (if (a2ac7@a298b@annotation? a3e6c@e) (a3e17@match-each-any (a2ac9@a298f@annotation-expression a3e6c@e) a3e6d@m* a3e6e@s* a3e6f@ae*) ((lambda () (begin '#f '#f))))))))) (set! a3e19@match-empty (lambda (a3e66@p a3e67@r) (if (null? a3e66@p) a3e67@r (if (eq? a3e66@p '_) a3e67@r (if (eq? a3e66@p 'any) (cons '() a3e67@r) (if (pair? a3e66@p) (a3e19@match-empty (car a3e66@p) (a3e19@match-empty (cdr a3e66@p) a3e67@r)) (if (eq? a3e66@p 'each-any) (cons '() a3e67@r) ((lambda () (begin '#f ((lambda (a3e6a@t) (if (memv a3e6a@t '(each)) (a3e19@match-empty (vector-ref a3e66@p '1) a3e67@r) (if (memv a3e6a@t '(each+)) (a3e19@match-empty (vector-ref a3e66@p '1) (a3e19@match-empty (reverse (vector-ref a3e66@p '2)) (a3e19@match-empty (vector-ref a3e66@p '3) a3e67@r))) (if (memv a3e6a@t '(free-id atom)) a3e67@r (if (memv a3e6a@t '(scheme-id atom)) a3e67@r (if (memv a3e6a@t '(vector)) (a3e19@match-empty (vector-ref a3e66@p '1) a3e67@r) ((lambda () (begin '#f (assertion-violation 'syntax-dispatch '"invalid pattern" a3e66@p)))))))))) (vector-ref a3e66@p '0)))))))))))) (set! a3e1b@combine (lambda (a3e62@r* a3e63@r) (if (null? (car a3e62@r*)) a3e63@r (cons (map car a3e62@r*) (a3e1b@combine (map cdr a3e62@r*) a3e63@r))))) (set! a3e1d@match* (lambda (a3e3e@e a3e3f@p a3e40@m* a3e41@s* a3e42@ae* a3e43@r) (if (null? a3e3f@p) (and (null? a3e3e@e) a3e43@r) (if (pair? a3e3f@p) (and (pair? a3e3e@e) (a3e1f@match (car a3e3e@e) (car a3e3f@p) a3e40@m* a3e41@s* a3e42@ae* (a3e1f@match (cdr a3e3e@e) (cdr a3e3f@p) a3e40@m* a3e41@s* a3e42@ae* a3e43@r))) (if (eq? a3e3f@p 'each-any) ((lambda (a3e4a@l) (and a3e4a@l (cons a3e4a@l a3e43@r))) (a3e17@match-each-any a3e3e@e a3e40@m* a3e41@s* a3e42@ae*)) ((lambda () (begin '#f ((lambda (a3e4c@t) (if (memv a3e4c@t '(each)) (if (null? a3e3e@e) (a3e19@match-empty (vector-ref a3e3f@p '1) a3e43@r) ((lambda (a3e4e@r*) (and a3e4e@r* (a3e1b@combine a3e4e@r* a3e43@r))) (a3e13@match-each a3e3e@e (vector-ref a3e3f@p '1) a3e40@m* a3e41@s* a3e42@ae*))) (if (memv a3e4c@t '(free-id)) (and (symbol? a3e3e@e) (a2ec3@top-marked? a3e40@m*) (a2f49@free-id=? (a3e11@stx^ a3e3e@e a3e40@m* a3e41@s* a3e42@ae*) (vector-ref a3e3f@p '1)) a3e43@r) (if (memv a3e4c@t '(scheme-id)) (and (symbol? a3e3e@e) (a2ec3@top-marked? a3e40@m*) (a2f49@free-id=? (a3e11@stx^ a3e3e@e a3e40@m* a3e41@s* a3e42@ae*) (a30d6@scheme-stx (vector-ref a3e3f@p '1))) a3e43@r) (if (memv a3e4c@t '(each+)) (call-with-values (lambda () (a3e15@match-each+ a3e3e@e (vector-ref a3e3f@p '1) (vector-ref a3e3f@p '2) (vector-ref a3e3f@p '3) a3e40@m* a3e41@s* a3e42@ae* a3e43@r)) (lambda (a3e56@a3e51 a3e57@a3e53 a3e58@a3e55) ((lambda (a3e5c@r a3e5d@y-pat a3e5e@xr*) (and a3e5c@r (null? a3e5d@y-pat) (if (null? a3e5e@xr*) (a3e19@match-empty (vector-ref a3e3f@p '1) a3e5c@r) (a3e1b@combine a3e5e@xr* a3e5c@r)))) a3e58@a3e55 a3e57@a3e53 a3e56@a3e51))) (if (memv a3e4c@t '(atom)) (and (fast-equal? (vector-ref a3e3f@p '1) (a2f55@strip a3e3e@e a3e40@m*)) a3e43@r) (if (memv a3e4c@t '(vector)) (and (vector? a3e3e@e) (a3e1f@match (vector->list a3e3e@e) (vector-ref a3e3f@p '1) a3e40@m* a3e41@s* a3e42@ae* a3e43@r)) ((lambda () (begin '#f (assertion-violation 'syntax-dispatch '"invalid pattern" a3e3f@p))))))))))) (vector-ref a3e3f@p '0)))))))))) (set! a3e1f@match (lambda (a3e20@e a3e21@p a3e22@m* a3e23@s* a3e24@ae* a3e25@r) (if (not a3e25@r) '#f (if (eq? a3e21@p '_) a3e25@r (if (eq? a3e21@p 'any) (cons (a3e11@stx^ a3e20@e a3e22@m* a3e23@s* a3e24@ae*) a3e25@r) (if (a2f09@stx? a3e20@e) (and (not (a2ec3@top-marked? a3e22@m*)) (call-with-values (lambda () (a2f27@join-wraps a3e22@m* a3e23@s* a3e24@ae* a3e20@e)) (lambda (a3e32@a3e2d a3e33@a3e2f a3e34@a3e31) ((lambda (a3e38@ae* a3e39@s* a3e3a@m*) (a3e1f@match (a2f0d@stx-expr a3e20@e) a3e21@p a3e3a@m* a3e39@s* a3e38@ae* a3e25@r)) a3e34@a3e31 a3e33@a3e2f a3e32@a3e2d)))) (if (a2ac7@a298b@annotation? a3e20@e) (a3e1f@match (a2ac9@a298f@annotation-expression a3e20@e) a3e21@p a3e22@m* a3e23@s* a3e24@ae* a3e25@r) ((lambda () (begin '#f (a3e1d@match* a3e20@e a3e21@p a3e22@m* a3e23@s* a3e24@ae* a3e25@r))))))))))) (a3e1f@match a3e0c@e a3e0d@p '() '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! a314a@ellipsis? (lambda (a3ef0@x) (and (a2f41@id? a3ef0@x) (a2f49@free-id=? a3ef0@x (a30d6@scheme-stx '...))))) (set! a314c@underscore? (lambda (a3ef2@x) (and (a2f41@id? a3ef2@x) (a2f49@free-id=? a3ef2@x (a30d6@scheme-stx '_))))) (set! a314e@verify-literals (lambda (a3ef4@lits a3ef5@expr) (for-each (lambda (a3ef8@x) (if (or (not (a2f41@id? a3ef8@x)) (a314a@ellipsis? a3ef8@x) (a314c@underscore? a3ef8@x)) (a3239@syntax-violation '#f '"invalid literal" a3ef5@expr a3ef8@x) (void))) a3ef4@lits))) (set! a3150@syntax-case-transformer ((lambda () ((lambda (a3efb@build-dispatch-call a3efd@invalid-ids-error a3eff@gen-clause a3f01@gen-syntax-case) (begin (set! a3efb@build-dispatch-call (lambda (a3f6c@pvars a3f6d@expr a3f6e@y a3f6f@r a3f70@mr) ((lambda (a3f76@ids a3f77@levels) ((lambda (a3f7a@labels a3f7b@new-vars) ((lambda (a3f7e@body) (a2ea4@a2d80@build-application '#f '(primitive apply) (list (a2ea5@a2dce@build-lambda '#f a3f7b@new-vars a3f7e@body) a3f6e@y))) (a316c@chi-expr (a2f2d@add-subst (a2efc@make-full-rib a3f76@ids a3f7a@labels) a3f6d@expr) (append (map (lambda (a3f80@label a3f81@var a3f82@level) (cons a3f80@label (a2f5f@make-binding 'syntax (cons a3f81@var a3f82@level)))) a3f7a@labels a3f7b@new-vars (map cdr a3f6c@pvars)) a3f6f@r) a3f70@mr))) (map a2ec9@gen-label a3f76@ids) (map a2ec5@gen-lexical a3f76@ids))) (map car a3f6c@pvars) (map cdr a3f6c@pvars)))) (set! a3efd@invalid-ids-error (lambda (a3f60@id* a3f61@e a3f62@class) ((letrec ((a3f66@find (lambda (a3f68@id* a3f69@ok*) (if (null? a3f68@id*) (a3239@syntax-violation '#f '"invalid syntax" a3f61@e) (if (a2f41@id? (car a3f68@id*)) (if (a2f4f@bound-id-member? (car a3f68@id*) a3f69@ok*) (a3233@syntax-error (car a3f68@id*) '"duplicate " a3f62@class) (a3f66@find (cdr a3f68@id*) (cons (car a3f68@id*) a3f69@ok*))) (a3233@syntax-error (car a3f68@id*) '"invalid " a3f62@class)))))) a3f66@find) a3f60@id* '()))) (set! a3eff@gen-clause (lambda (a3f38@x a3f39@keys a3f3a@clauses a3f3b@r a3f3c@mr a3f3d@pat a3f3e@fender a3f3f@expr) (call-with-values (lambda () (a3146@convert-pattern a3f3d@pat a3f39@keys)) (lambda (a3f4c@a3f49 a3f4d@a3f4b) ((lambda (a3f50@pvars a3f51@p) (if (not (a2f4d@distinct-bound-ids? (map car a3f50@pvars))) (a3efd@invalid-ids-error (map car a3f50@pvars) a3f3d@pat '"pattern variable") (if (not (for-all (lambda (a3f54@x) (not (a314a@ellipsis? (car a3f54@x)))) a3f50@pvars)) (a3239@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" a3f3d@pat) ((lambda () (begin '#f ((lambda (a3f56@y) ((lambda (a3f58@test) ((lambda (a3f5a@conseq) ((lambda (a3f5c@altern) (a2ea4@a2d80@build-application '#f (a2ea5@a2dce@build-lambda '#f (list a3f56@y) (list 'if a3f58@test a3f5a@conseq a3f5c@altern)) (list (a2ea4@a2d80@build-application '#f '(primitive syntax-dispatch) (list a3f38@x (list 'quote a3f51@p)))))) (a3f01@gen-syntax-case a3f38@x a3f39@keys a3f3a@clauses a3f3b@r a3f3c@mr))) (a3efb@build-dispatch-call a3f50@pvars a3f3f@expr a3f56@y a3f3b@r a3f3c@mr))) (if (eq? a3f3e@fender '#t) a3f56@y ((lambda () (begin '#f ((lambda (a3f5e@call) (list 'if a3f56@y a3f5e@call (list 'quote '#f))) (a3efb@build-dispatch-call a3f50@pvars a3f3e@fender a3f56@y a3f3b@r a3f3c@mr)))))))) (a2ec5@gen-lexical 'tmp)))))))) a3f4d@a3f4b a3f4c@a3f49))))) (set! a3f01@gen-syntax-case (lambda (a3f16@x a3f17@keys a3f18@clauses a3f19@r a3f1a@mr) (if (null? a3f18@clauses) (a2ea4@a2d80@build-application '#f '(primitive syntax-error) (list a3f16@x)) ((lambda (a3f20@t) ((lambda (a3f22@ls/false) (if a3f22@ls/false (apply (lambda (a3f24@pat a3f25@expr) (if (and (a2f41@id? a3f24@pat) (not (a2f4f@bound-id-member? a3f24@pat a3f17@keys)) (not (a314a@ellipsis? a3f24@pat))) (if (a2f49@free-id=? a3f24@pat (a30d6@scheme-stx '_)) (a316c@chi-expr a3f25@expr a3f19@r a3f1a@mr) ((lambda (a3f28@lab a3f29@lex) ((lambda (a3f2c@body) (a2ea4@a2d80@build-application '#f (a2ea5@a2dce@build-lambda '#f (list a3f29@lex) a3f2c@body) (list a3f16@x))) (a316c@chi-expr (a2f2d@add-subst (a2efc@make-full-rib (list a3f24@pat) (list a3f28@lab)) a3f25@expr) (cons (cons a3f28@lab (a2f5f@make-binding 'syntax (cons a3f29@lex '0))) a3f19@r) a3f1a@mr))) (a2ec9@gen-label a3f24@pat) (a2ec5@gen-lexical a3f24@pat))) (a3eff@gen-clause a3f16@x a3f17@keys (cdr a3f18@clauses) a3f19@r a3f1a@mr a3f24@pat '#t a3f25@expr))) a3f22@ls/false) ((lambda (a3f2e@t) ((lambda (a3f30@ls/false) (if a3f30@ls/false (apply (lambda (a3f32@pat a3f33@fender a3f34@expr) (a3eff@gen-clause a3f16@x a3f17@keys (cdr a3f18@clauses) a3f19@r a3f1a@mr a3f32@pat a3f33@fender a3f34@expr)) a3f30@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3f2e@t))) (a3148@syntax-dispatch a3f2e@t '(any any any)))) a3f20@t))) (a3148@syntax-dispatch a3f20@t '(any any)))) (car a3f18@clauses))))) (lambda (a3f02@e a3f03@r a3f04@mr) ((lambda (a3f08@t) ((lambda (a3f0a@ls/false) (if a3f0a@ls/false (apply (lambda (a3f0c@expr a3f0d@keys a3f0e@clauses) (begin (a314e@verify-literals a3f0d@keys a3f02@e) ((lambda (a3f12@x) ((lambda (a3f14@body) (a2ea4@a2d80@build-application '#f (a2ea5@a2dce@build-lambda '#f (list a3f12@x) a3f14@body) (list (a316c@chi-expr a3f0c@expr a3f03@r a3f04@mr)))) (a3f01@gen-syntax-case a3f12@x a3f0d@keys a3f0e@clauses a3f03@r a3f04@mr))) (a2ec5@gen-lexical 'tmp)))) a3f0a@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3f08@t))) (a3148@syntax-dispatch a3f08@t '(_ any each-any . each-any)))) a3f02@e)))) '#f '#f '#f '#f)))) (set! a3152@ellipsis-map (lambda (a3f86@proc a3f87@ls . a3f8a@ls*) ((lambda (a3f8d@who) (begin (set! a3f8d@who '...) (begin (if (not (list? a3f87@ls)) (assertion-violation a3f8d@who '"not a list" a3f87@ls) (void)) (if (not (null? a3f8a@ls*)) ((lambda (a3f8e@n) (for-each (lambda (a3f90@x) (begin (if (not (list? a3f90@x)) (assertion-violation a3f8d@who '"not a list" a3f90@x) (void)) (if (not (= (length a3f90@x) a3f8e@n)) (assertion-violation a3f8d@who '"length mismatch" a3f87@ls a3f90@x) (void)))) a3f8a@ls*)) (length a3f87@ls)) (void)) (apply map a3f86@proc a3f87@ls a3f8a@ls*)))) '#f))) (set! a3154@syntax-transformer ((lambda () ((lambda (a3f93@gen-syntax a3f95@gen-ref a3f97@gen-append a3f99@gen-mappend a3f9b@gen-map a3f9d@gen-cons a3f9f@gen-vector a3fa1@regen) (begin (set! a3f93@gen-syntax (lambda (a400a@src a400b@e a400c@r a400d@maps a400e@ellipsis? a400f@vec?) ((lambda (a4016@t) ((lambda (a4018@ls/false) (if (and a4018@ls/false (apply (lambda (a401a@dots) (a400e@ellipsis? a401a@dots)) a4018@ls/false)) (apply (lambda (a401c@dots) (a3239@syntax-violation '#f '"misplaced ellipsis in syntax form" a400a@src)) a4018@ls/false) ((lambda (a401e@t) ((lambda (a4020@ls/false) (if (and a4020@ls/false (apply (lambda (a4022@id) (a2f41@id? a4022@id)) a4020@ls/false)) (apply (lambda (a4024@id) ((lambda (a4026@label) ((lambda (a4028@b) ((lambda () (if (eq? (a2f61@binding-type a4028@b) 'syntax) (call-with-values (lambda () ((lambda (a402e@var.lev) (a3f95@gen-ref a400a@src (car a402e@var.lev) (cdr a402e@var.lev) a400d@maps)) (a2f63@binding-value a4028@b))) (lambda (a4030@a402b a4031@a402d) ((lambda (a4034@maps a4035@var) (values (list 'ref a4035@var) a4034@maps)) a4031@a402d a4030@a402b))) (values (list 'quote a400b@e) a400d@maps))))) (a2f5d@label->binding a4026@label a400c@r))) (a2f5b@id->label a400b@e))) a4020@ls/false) ((lambda (a4038@t) ((lambda (a403a@ls/false) (if (and a403a@ls/false (apply (lambda (a403c@dots a403d@e) (a400e@ellipsis? a403c@dots)) a403a@ls/false)) (apply (lambda (a4040@dots a4041@e) (if a400f@vec? (a3239@syntax-violation '#f '"misplaced ellipsis in syntax form" a400a@src) (a3f93@gen-syntax a400a@src a4041@e a400c@r a400d@maps (lambda (a4044@x) '#f) '#f))) a403a@ls/false) ((lambda (a4046@t) ((lambda (a4048@ls/false) (if (and a4048@ls/false (apply (lambda (a404a@x a404b@dots a404c@y) (a400e@ellipsis? a404b@dots)) a4048@ls/false)) (apply (lambda (a4050@x a4051@dots a4052@y) ((letrec ((a4056@f (lambda (a4058@y a4059@k) ((lambda (a405c@t) ((lambda (a405e@ls/false) (if a405e@ls/false (apply (lambda () (a4059@k a400d@maps)) a405e@ls/false) ((lambda (a4060@t) ((lambda (a4062@ls/false) (if (and a4062@ls/false (apply (lambda (a4064@dots a4065@y) (a400e@ellipsis? a4064@dots)) a4062@ls/false)) (apply (lambda (a4068@dots a4069@y) (a4056@f a4069@y (lambda (a406c@maps) (call-with-values (lambda () (a4059@k (cons '() a406c@maps))) (lambda (a4072@a406f a4073@a4071) ((lambda (a4076@maps a4077@x) (if (null? (car a4076@maps)) (a3239@syntax-violation '#f '"extra ellipsis in syntax form" a400a@src) (values (a3f99@gen-mappend a4077@x (car a4076@maps)) (cdr a4076@maps)))) a4073@a4071 a4072@a406f)))))) a4062@ls/false) ((lambda (a407a@t) ((lambda (a407c@ls/false) (if a407c@ls/false (apply (lambda () (call-with-values (lambda () (a3f93@gen-syntax a400a@src a4058@y a400c@r a400d@maps a400e@ellipsis? a400f@vec?)) (lambda (a4082@a407f a4083@a4081) ((lambda (a4086@maps a4087@y) (call-with-values (lambda () (a4059@k a4086@maps)) (lambda (a408e@a408b a408f@a408d) ((lambda (a4092@maps a4093@x) (values (a3f97@gen-append a4093@x a4087@y) a4092@maps)) a408f@a408d a408e@a408b)))) a4083@a4081 a4082@a407f)))) a407c@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a407a@t))) (a3148@syntax-dispatch a407a@t '_))) a4060@t))) (a3148@syntax-dispatch a4060@t '(any . any)))) a405c@t))) (a3148@syntax-dispatch a405c@t '()))) a4058@y)))) a4056@f) a4052@y (lambda (a4096@maps) (call-with-values (lambda () (a3f93@gen-syntax a400a@src a4050@x a400c@r (cons '() a4096@maps) a400e@ellipsis? '#f)) (lambda (a409c@a4099 a409d@a409b) ((lambda (a40a0@maps a40a1@x) (if (null? (car a40a0@maps)) (a3239@syntax-violation '#f '"extra ellipsis in syntax form" a400a@src) (values (a3f9b@gen-map a40a1@x (car a40a0@maps)) (cdr a40a0@maps)))) a409d@a409b a409c@a4099)))))) a4048@ls/false) ((lambda (a40a4@t) ((lambda (a40a6@ls/false) (if a40a6@ls/false (apply (lambda (a40a8@x a40a9@y) (call-with-values (lambda () (a3f93@gen-syntax a400a@src a40a8@x a400c@r a400d@maps a400e@ellipsis? '#f)) (lambda (a40b0@a40ad a40b1@a40af) ((lambda (a40b4@maps a40b5@xnew) (call-with-values (lambda () (a3f93@gen-syntax a400a@src a40a9@y a400c@r a40b4@maps a400e@ellipsis? a400f@vec?)) (lambda (a40bc@a40b9 a40bd@a40bb) ((lambda (a40c0@maps a40c1@ynew) (values (a3f9d@gen-cons a400b@e a40a8@x a40a9@y a40b5@xnew a40c1@ynew) a40c0@maps)) a40bd@a40bb a40bc@a40b9)))) a40b1@a40af a40b0@a40ad)))) a40a6@ls/false) ((lambda (a40c4@t) ((lambda (a40c6@ls/false) (if a40c6@ls/false (apply (lambda (a40c8@ls) (call-with-values (lambda () (a3f93@gen-syntax a400a@src a40c8@ls a400c@r a400d@maps a400e@ellipsis? '#t)) (lambda (a40ce@a40cb a40cf@a40cd) ((lambda (a40d2@maps a40d3@lsnew) (values (a3f9f@gen-vector a400b@e a40c8@ls a40d3@lsnew) a40d2@maps)) a40cf@a40cd a40ce@a40cb)))) a40c6@ls/false) ((lambda (a40d6@t) ((lambda (a40d8@ls/false) (if a40d8@ls/false (apply (lambda () (values (list 'quote a400b@e) a400d@maps)) a40d8@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a40d6@t))) (a3148@syntax-dispatch a40d6@t '_))) a40c4@t))) (a3148@syntax-dispatch a40c4@t '#(vector each-any)))) a40a4@t))) (a3148@syntax-dispatch a40a4@t '(any . any)))) a4046@t))) (a3148@syntax-dispatch a4046@t '(any any . any)))) a4038@t))) (a3148@syntax-dispatch a4038@t '(any any)))) a401e@t))) (a3148@syntax-dispatch a401e@t 'any))) a4016@t))) (a3148@syntax-dispatch a4016@t 'any))) a400b@e))) (set! a3f95@gen-ref (lambda (a3ff0@src a3ff1@var a3ff2@level a3ff3@maps) (if (= a3ff2@level '0) (values a3ff1@var a3ff3@maps) (if (null? a3ff3@maps) (a3239@syntax-violation '#f '"missing ellipsis in syntax form" a3ff0@src) (call-with-values (lambda () (a3f95@gen-ref a3ff0@src a3ff1@var (- a3ff2@level '1) (cdr a3ff3@maps))) (lambda (a3ffc@a3ff9 a3ffd@a3ffb) ((lambda (a4000@outer-maps a4001@outer-var) ((lambda (a4004@t) (if a4004@t ((lambda (a4006@b) (values (cdr a4006@b) a3ff3@maps)) a4004@t) ((lambda () (begin '#f ((lambda (a4008@inner-var) (values a4008@inner-var (cons (cons (cons a4001@outer-var a4008@inner-var) (car a3ff3@maps)) a4000@outer-maps))) (a2ec5@gen-lexical 'tmp))))))) (assq a4001@outer-var (car a3ff3@maps)))) a3ffd@a3ffb a3ffc@a3ff9))))))) (set! a3f97@gen-append (lambda (a3fec@x a3fed@y) (if (fast-equal? a3fed@y ''()) a3fec@x (list 'append a3fec@x a3fed@y)))) (set! a3f99@gen-mappend (lambda (a3fe8@e a3fe9@map-env) (list 'apply '(primitive append) (a3f9b@gen-map a3fe8@e a3fe9@map-env)))) (set! a3f9b@gen-map (lambda (a3fd6@e a3fd7@map-env) ((lambda (a3fda@formals a3fdb@actuals) (if (eq? (car a3fd6@e) 'ref) (car a3fdb@actuals) (if (for-all (lambda (a3fde@x) (and (eq? (car a3fde@x) 'ref) (memq (cadr a3fde@x) a3fda@formals))) (cdr a3fd6@e)) ((lambda (a3fe0@args) (cons 'map (cons (list 'primitive (car a3fd6@e)) a3fe0@args))) (map ((lambda (a3fe2@r) (lambda (a3fe4@x) (cdr (assq (cadr a3fe4@x) a3fe2@r)))) (map cons a3fda@formals a3fdb@actuals)) (cdr a3fd6@e))) ((lambda () (begin '#f (cons* 'map (list 'lambda a3fda@formals a3fd6@e) a3fdb@actuals))))))) (map cdr a3fd7@map-env) (map (lambda (a3fe6@x) (list 'ref (car a3fe6@x))) a3fd7@map-env)))) (set! a3f9d@gen-cons (lambda (a3fc6@e a3fc7@x a3fc8@y a3fc9@xnew a3fca@ynew) ((lambda (a3fd0@t) (if (memv a3fd0@t '(quote)) (if (eq? (car a3fc9@xnew) 'quote) ((lambda (a3fd2@xnew a3fd3@ynew) (if (and (eq? a3fd2@xnew a3fc7@x) (eq? a3fd3@ynew a3fc8@y)) (list 'quote a3fc6@e) (list 'quote (cons a3fd2@xnew a3fd3@ynew)))) (cadr a3fc9@xnew) (cadr a3fca@ynew)) (if (null? (cadr a3fca@ynew)) (list 'list a3fc9@xnew) (list 'cons a3fc9@xnew a3fca@ynew))) (if (memv a3fd0@t '(list)) (cons 'list (cons a3fc9@xnew (cdr a3fca@ynew))) ((lambda () (begin '#f (list 'cons a3fc9@xnew a3fca@ynew))))))) (car a3fca@ynew)))) (set! a3f9f@gen-vector (lambda (a3fc0@e a3fc1@ls a3fc2@lsnew) (if (eq? (car a3fc2@lsnew) 'quote) (if (eq? (cadr a3fc2@lsnew) a3fc1@ls) (list 'quote a3fc0@e) (list 'quote (list->vector (cadr a3fc2@lsnew)))) (if (eq? (car a3fc2@lsnew) 'list) (cons 'vector (cdr a3fc2@lsnew)) ((lambda () (begin '#f (list 'list->vector a3fc2@lsnew)))))))) (set! a3fa1@regen (lambda (a3fba@x) ((lambda (a3fbc@t) (if (memv a3fbc@t '(ref)) (cadr a3fba@x) (if (memv a3fbc@t '(primitive)) (list 'primitive (cadr a3fba@x)) (if (memv a3fbc@t '(quote)) (list 'quote (cadr a3fba@x)) (if (memv a3fbc@t '(lambda)) (a2ea5@a2dce@build-lambda '#f (cadr a3fba@x) (a3fa1@regen (caddr a3fba@x))) (if (memv a3fbc@t '(map)) ((lambda (a3fbe@ls) (a2ea4@a2d80@build-application '#f '(primitive ellipsis-map) a3fbe@ls)) (map a3fa1@regen (cdr a3fba@x))) ((lambda () (begin '#f (a2ea4@a2d80@build-application '#f (list 'primitive (car a3fba@x)) (map a3fa1@regen (cdr a3fba@x)))))))))))) (car a3fba@x)))) (lambda (a3fa2@e a3fa3@r a3fa4@mr) ((lambda (a3fa8@t) ((lambda (a3faa@ls/false) (if a3faa@ls/false (apply (lambda (a3fac@x) (call-with-values (lambda () (a3f93@gen-syntax a3fa2@e a3fac@x a3fa3@r '() a314a@ellipsis? '#f)) (lambda (a3fb2@a3faf a3fb3@a3fb1) ((lambda (a3fb6@maps a3fb7@e) (a3fa1@regen a3fb7@e)) a3fb3@a3fb1 a3fb2@a3faf)))) a3faa@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a3fa8@t))) (a3148@syntax-dispatch a3fa8@t '(_ any)))) a3fa2@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! a3156@core-macro-transformer (lambda (a40da@name) ((lambda (a40dc@t) (if (memv a40dc@t '(quote)) a30fc@quote-transformer (if (memv a40dc@t '(lambda)) a3100@lambda-transformer (if (memv a40dc@t '(case-lambda)) a30fe@case-lambda-transformer (if (memv a40dc@t '(letrec)) a30e4@letrec-transformer (if (memv a40dc@t '(letrec*)) a30e6@letrec*-transformer (if (memv a40dc@t '(if)) a30f4@if-transformer (if (memv a40dc@t '(and)) a30f6@and-transformer (if (memv a40dc@t '(or)) a30f8@or-transformer (if (memv a40dc@t '(foreign-call)) a3144@foreign-call-transformer (if (memv a40dc@t '(syntax-case)) a3150@syntax-case-transformer (if (memv a40dc@t '(syntax)) a3154@syntax-transformer (if (memv a40dc@t '(type-descriptor)) a30ea@type-descriptor-transformer (if (memv a40dc@t '(record-type-descriptor)) a30ec@record-type-descriptor-transformer (if (memv a40dc@t '(record-constructor-descriptor)) a30ee@record-constructor-descriptor-transformer (if (memv a40dc@t '(fluid-let-syntax)) a30e8@fluid-let-syntax-transformer ((lambda () (begin '#f (assertion-violation 'macro-transformer '"BUG: cannot find transformer" a40da@name)))))))))))))))))))) a40da@name))) (set! a3158@file-options-macro (lambda (a40de@x) ((lambda (a40e1@valid-option?) (begin (set! a40e1@valid-option? (lambda (a40ea@x) (and (a2f41@id? a40ea@x) (memq (a2f43@id->sym a40ea@x) '(no-fail no-create no-truncate))))) ((lambda (a40e2@t) ((lambda (a40e4@ls/false) (if (and a40e4@ls/false (apply (lambda (a40e6@opt*) (for-all a40e1@valid-option? a40e6@opt*)) a40e4@ls/false)) (apply (lambda (a40e8@opt*) (a3102@bless (list 'make-file-options (list 'quote a40e8@opt*)))) a40e4@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a40e2@t))) (a3148@syntax-dispatch a40e2@t '(_ . each-any)))) a40de@x))) '#f))) (set! a315a@symbol-macro (lambda (a40ec@x a40ed@set) ((lambda (a40f0@t) ((lambda (a40f2@ls/false) (if (and a40f2@ls/false (apply (lambda (a40f4@name) (and (a2f41@id? a40f4@name) (memq (a2f43@id->sym a40f4@name) a40ed@set))) a40f2@ls/false)) (apply (lambda (a40f6@name) (a3102@bless (list 'quote a40f6@name))) a40f2@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a40f0@t))) (a3148@syntax-dispatch a40f0@t '(_ any)))) a40ec@x))) (set! a315c@macro-transformer (lambda (a40f8@x) (if (procedure? a40f8@x) a40f8@x (if (symbol? a40f8@x) ((lambda (a40fa@t) (if (memv a40fa@t '(define-record-type)) a313c@define-record-type-macro (if (memv a40fa@t '(define-struct)) a313a@define-struct-macro (if (memv a40fa@t '(cond)) a3132@cond-macro (if (memv a40fa@t '(let)) a3108@let-macro (if (memv a40fa@t '(do)) a312a@do-macro (if (memv a40fa@t '(or)) a312e@or-macro (if (memv a40fa@t '(and)) a3130@and-macro (if (memv a40fa@t '(let*)) a312c@let*-macro (if (memv a40fa@t '(let-values)) a310c@let-values-macro (if (memv a40fa@t '(let*-values)) a310e@let*-values-macro (if (memv a40fa@t '(syntax-rules)) a3134@syntax-rules-macro (if (memv a40fa@t '(quasiquote)) a3136@quasiquote-macro (if (memv a40fa@t '(quasisyntax)) a3138@quasisyntax-macro (if (memv a40fa@t '(with-syntax)) a3104@with-syntax-macro (if (memv a40fa@t '(when)) a30f0@when-macro (if (memv a40fa@t '(unless)) a30f2@unless-macro (if (memv a40fa@t '(case)) a30fa@case-macro (if (memv a40fa@t '(identifier-syntax)) a3128@identifier-syntax-macro (if (memv a40fa@t '(time)) a3120@time-macro (if (memv a40fa@t '(delay)) a3122@delay-macro (if (memv a40fa@t '(assert)) a3124@assert-macro (if (memv a40fa@t '(endianness)) a3126@endianness-macro (if (memv a40fa@t '(guard)) a311c@guard-macro (if (memv a40fa@t '(define-enumeration)) a311e@define-enumeration-macro (if (memv a40fa@t '(trace-lambda)) a3110@trace-lambda-macro (if (memv a40fa@t '(trace-define)) a3112@trace-define-macro (if (memv a40fa@t '(trace-let)) a310a@trace-let-macro (if (memv a40fa@t '(trace-define-syntax)) a3114@trace-define-syntax-macro (if (memv a40fa@t '(trace-let-syntax)) a3118@trace-let-syntax-macro (if (memv a40fa@t '(trace-letrec-syntax)) a311a@trace-letrec-syntax-macro (if (memv a40fa@t '(define-condition-type)) a313e@define-condition-type-macro (if (memv a40fa@t '(parameterize)) a3142@parameterize-macro (if (memv a40fa@t '(eol-style)) (lambda (a40fc@x) (a315a@symbol-macro a40fc@x '(none lf cr crlf nel crnel ls))) (if (memv a40fa@t '(error-handling-mode)) (lambda (a40fe@x) (a315a@symbol-macro a40fe@x '(ignore raise replace))) (if (memv a40fa@t '(buffer-mode)) (lambda (a4100@x) (a315a@symbol-macro a4100@x '(none line block))) (if (memv a40fa@t '(file-options)) a3158@file-options-macro (if (memv a40fa@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) a3140@incorrect-usage-macro ((lambda () (begin '#f (error 'macro-transformer '"BUG: invalid macro" a40f8@x)))))))))))))))))))))))))))))))))))))))))) a40f8@x) ((lambda () (begin '#f (error 'core-macro-transformer '"BUG: invalid macro" a40f8@x)))))))) (set! a315e@local-macro-transformer (lambda (a4102@x) (car a4102@x))) (set! a3160@do-macro-call (lambda (a4104@transformer a4105@expr a4106@r) ((lambda (a410b@return) (begin (set! a410b@return (lambda (a411a@x) (begin ((letrec ((a411c@f (lambda (a411e@x) (if (not (a2f09@stx? a411e@x)) (if (pair? a411e@x) (begin (a411c@f (car a411e@x)) (a411c@f (cdr a411e@x))) (if (vector? a411e@x) (vector-for-each a411c@f a411e@x) (if (symbol? a411e@x) (a3239@syntax-violation '#f '"raw symbol encountered in output of macro" a4105@expr a411e@x) (void)))) (void))))) a411c@f) a411a@x) (a2f2b@add-mark (a2f21@gen-mark) a411a@x a4105@expr)))) ((lambda (a410c@x) (if (procedure? a410c@x) (a410b@return (a410c@x (lambda (a410e@id) (begin (if (not (a2f41@id? a410e@id)) (assertion-violation 'rho '"not an identifier" a410e@id) (void)) ((lambda (a4110@label) ((lambda (a4112@binding) ((lambda (a4114@t) (if (memv a4114@t '(local-ctv)) (cadr a4112@binding) (if (memv a4114@t '(global-ctv)) ((lambda (a4116@lib a4117@loc) (begin (if (not (eq? a4116@lib '*interaction*)) (a2d78@a2bf9@visit-library a4116@lib) (void)) (symbol-value a4117@loc))) (cadr a4112@binding) (cddr a4112@binding)) ((lambda () (begin '#f '#f)))))) (car a4112@binding))) (a2f5d@label->binding a4110@label a4106@r))) (a2f5b@id->label a410e@id)))))) (a410b@return a410c@x))) (a4104@transformer (a2f2b@add-mark a2f23@anti-mark a4105@expr '#f))))) '#f))) (set! a3162@chi-macro (lambda (a4120@p a4121@e a4122@r) (a3160@do-macro-call (a315c@macro-transformer a4120@p) a4121@e a4122@r))) (set! a3164@chi-local-macro (lambda (a4126@p a4127@e a4128@r) (a3160@do-macro-call (a315e@local-macro-transformer a4126@p) a4127@e a4128@r))) (set! a3166@chi-global-macro (lambda (a412c@p a412d@e a412e@r) ((lambda (a4132@lib a4133@loc) (begin (if (not (eq? a4132@lib '*interaction*)) (a2d78@a2bf9@visit-library a4132@lib) (void)) ((lambda (a4136@x) ((lambda (a4138@transformer) (a3160@do-macro-call a4138@transformer a412d@e a412e@r)) (if (procedure? a4136@x) a4136@x ((lambda () (begin '#f (assertion-violation 'chi-global-macro '"BUG: not a procedure" a4136@x))))))) (symbol-value a4133@loc)))) (car a412c@p) (cdr a412c@p)))) (set! a3168@chi-expr* (lambda (a413a@e* a413b@r a413c@mr) (if (null? a413a@e*) '() ((lambda () (begin '#f ((lambda (a4140@e) (cons a4140@e (a3168@chi-expr* (cdr a413a@e*) a413b@r a413c@mr))) (a316c@chi-expr (car a413a@e*) a413b@r a413c@mr)))))))) (set! a316a@chi-application (lambda (a4142@e a4143@r a4144@mr) ((lambda (a4148@t) ((lambda (a414a@ls/false) (if a414a@ls/false (apply (lambda (a414c@rator a414d@rands) ((lambda (a4150@rator) (a2ea4@a2d80@build-application (a322f@syntax-annotation a4142@e) a4150@rator (a3168@chi-expr* a414d@rands a4143@r a4144@mr))) (a316c@chi-expr a414c@rator a4143@r a4144@mr))) a414a@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a4148@t))) (a3148@syntax-dispatch a4148@t '(any . each-any)))) a4142@e))) (set! a316c@chi-expr (lambda (a4152@e a4153@r a4154@mr) (call-with-values (lambda () (a2f67@syntax-type a4152@e a4153@r)) (lambda (a415e@a4159 a415f@a415b a4160@a415d) ((lambda (a4164@kwd a4165@value a4166@type) ((lambda (a416a@t) (if (memv a416a@t '(core-macro)) ((lambda (a416c@transformer) (a416c@transformer a4152@e a4153@r a4154@mr)) (a3156@core-macro-transformer a4165@value)) (if (memv a416a@t '(global)) ((lambda (a416e@lib) ((lambda (a4170@loc) ((lambda () (begin ((a31b7@inv-collector) a416e@lib) a4170@loc)))) (cdr a4165@value))) (car a4165@value)) (if (memv a416a@t '(core-prim)) ((lambda (a4172@name) (list 'primitive a4172@name)) a4165@value) (if (memv a416a@t '(call)) (a316a@chi-application a4152@e a4153@r a4154@mr) (if (memv a416a@t '(lexical)) ((lambda (a4174@lex) a4174@lex) (a30d8@lexical-var a4165@value)) (if (memv a416a@t '(global-macro global-macro!)) (a316c@chi-expr (a3166@chi-global-macro a4165@value a4152@e a4153@r) a4153@r a4154@mr) (if (memv a416a@t '(local-macro local-macro!)) (a316c@chi-expr (a3164@chi-local-macro a4165@value a4152@e a4153@r) a4153@r a4154@mr) (if (memv a416a@t '(macro macro!)) (a316c@chi-expr (a3162@chi-macro a4165@value a4152@e a4153@r) a4153@r a4154@mr) (if (memv a416a@t '(constant)) ((lambda (a4176@datum) (list 'quote a4176@datum)) a4165@value) (if (memv a416a@t '(set!)) (a316e@chi-set! a4152@e a4153@r a4154@mr) (if (memv a416a@t '(begin)) ((lambda (a4178@t) ((lambda (a417a@ls/false) (if a417a@ls/false (apply (lambda (a417c@x a417d@x*) (a2ea8@a2e00@build-sequence '#f (a3168@chi-expr* (cons a417c@x a417d@x*) a4153@r a4154@mr))) a417a@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a4178@t))) (a3148@syntax-dispatch a4178@t '(_ any . each-any)))) a4152@e) (if (memv a416a@t '(stale-when)) ((lambda (a4180@t) ((lambda (a4182@ls/false) (if a4182@ls/false (apply (lambda (a4184@guard a4185@x a4186@x*) (begin (a31c7@handle-stale-when a4184@guard a4154@mr) (a2ea8@a2e00@build-sequence '#f (a3168@chi-expr* (cons a4185@x a4186@x*) a4153@r a4154@mr)))) a4182@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a4180@t))) (a3148@syntax-dispatch a4180@t '(_ any any . each-any)))) a4152@e) (if (memv a416a@t '(let-syntax letrec-syntax)) ((lambda (a418a@t) ((lambda (a418c@ls/false) (if (and a418c@ls/false (apply (lambda (a418e@xlhs* a418f@xrhs* a4190@xbody a4191@xbody*) (if (not (a2f4b@valid-bound-ids? a418e@xlhs*)) (a3239@syntax-violation '#f '"invalid identifiers" a4152@e) (void))) a418c@ls/false)) (apply (lambda (a4196@xlhs* a4197@xrhs* a4198@xbody a4199@xbody*) ((lambda (a419e@xlab*) ((lambda (a41a0@xrib) ((lambda (a41a2@xb*) ((lambda () (a2ea8@a2e00@build-sequence '#f (a3168@chi-expr* (map (lambda (a41a4@x) (a2f2d@add-subst a41a0@xrib a41a4@x)) (cons a4198@xbody a4199@xbody*)) (append (map cons a419e@xlab* a41a2@xb*) a4153@r) (append (map cons a419e@xlab* a41a2@xb*) a4154@mr)))))) (map (lambda (a41a6@x) (a2f7f@make-eval-transformer (a31a9@expand-transformer (if (eq? a4166@type 'let-syntax) a41a6@x (a2f2d@add-subst a41a0@xrib a41a6@x)) a4154@mr))) a4197@xrhs*))) (a2efc@make-full-rib a4196@xlhs* a419e@xlab*))) (map a2ec9@gen-label a4196@xlhs*))) a418c@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a418a@t))) (a3148@syntax-dispatch a418a@t '(_ #(each (any any)) any . each-any)))) a4152@e) (if (memv a416a@t '(displaced-lexical)) (a3239@syntax-violation '#f '"identifier out of context" a4152@e) (if (memv a416a@t '(syntax)) (a3239@syntax-violation '#f '"reference to pattern variable outside a syntax form" a4152@e) (if (memv a416a@t '(define define-syntax module import library)) (a3239@syntax-violation '#f (string-append ((lambda (a41a8@t) (if (memv a41a8@t '(define)) '"a definition" (if (memv a41a8@t '(define-syntax)) '"a define-syntax" (if (memv a41a8@t '(module)) '"a module definition" (if (memv a41a8@t '(library)) '"a library definition" (if (memv a41a8@t '(import)) '"an import declaration" (if (memv a41a8@t '(export)) '"an export declaration" ((lambda () (begin '#f '"a non-expression")))))))))) a4166@type) '" was found where an expression was expected") a4152@e) (if (memv a416a@t '(mutable)) ((lambda (a41aa@lib) ((lambda (a41ac@loc) ((lambda () (if (eq? a41aa@lib '*interaction*) a41ac@loc (a3239@syntax-violation '#f '"attempt to reference an unexportable variable" a4152@e))))) (cdr a4165@value))) (car a4165@value)) ((lambda () (begin '#f (a3239@syntax-violation '#f '"invalid expression" a4152@e)))))))))))))))))))))) a4166@type)) a4160@a415d a415f@a415b a415e@a4159))))) (set! a316e@chi-set! (lambda (a41ae@e a41af@r a41b0@mr) ((lambda (a41b4@t) ((lambda (a41b6@ls/false) (if (and a41b6@ls/false (apply (lambda (a41b8@x a41b9@v) (a2f41@id? a41b8@x)) a41b6@ls/false)) (apply (lambda (a41bc@x a41bd@v) (call-with-values (lambda () (a2f67@syntax-type a41bc@x a41af@r)) (lambda (a41c6@a41c1 a41c7@a41c3 a41c8@a41c5) ((lambda (a41cc@kwd a41cd@value a41ce@type) ((lambda (a41d2@t) (if (memv a41d2@t '(lexical)) (begin (a30dc@set-lexical-mutable! a41cd@value '#t) (list 'set! (a30d8@lexical-var a41cd@value) (a316c@chi-expr a41bd@v a41af@r a41b0@mr))) (if (memv a41d2@t '(core-prim)) (a3239@syntax-violation '#f '"cannot modify imported core primitive" a41ae@e) (if (memv a41d2@t '(global)) (a3239@syntax-violation '#f '"attempt to modify an immutable binding" a41ae@e) (if (memv a41d2@t '(global-macro!)) (a316c@chi-expr (a3166@chi-global-macro a41cd@value a41ae@e a41af@r) a41af@r a41b0@mr) (if (memv a41d2@t '(local-macro!)) (a316c@chi-expr (a3164@chi-local-macro a41cd@value a41ae@e a41af@r) a41af@r a41b0@mr) (if (memv a41d2@t '(mutable)) ((lambda (a41d4@lib a41d5@loc) (if (eq? a41d4@lib '*interaction*) (list 'set! a41d5@loc (a316c@chi-expr a41bd@v a41af@r a41b0@mr)) (a3239@syntax-violation '#f '"attempt to modify an unexportable variable" a41ae@e))) (car a41cd@value) (cdr a41cd@value)) ((lambda () (begin '#f (a3239@syntax-violation '#f '"invalid syntax" a41ae@e))))))))))) a41ce@type)) a41c8@a41c5 a41c7@a41c3 a41c6@a41c1)))) a41b6@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a41b4@t))) (a3148@syntax-dispatch a41b4@t '(_ any any)))) a41ae@e))) (set! a3170@verify-formals (lambda (a41d8@fmls a41d9@stx) ((lambda (a41dc@t) ((lambda (a41de@ls/false) (if a41de@ls/false (apply (lambda (a41e0@x*) (if (not (a2f4b@valid-bound-ids? a41e0@x*)) (a3106@invalid-fmls-error a41d9@stx a41d8@fmls) (void))) a41de@ls/false) ((lambda (a41e2@t) ((lambda (a41e4@ls/false) (if a41e4@ls/false (apply (lambda (a41e6@x* a41e7@x) (if (not (a2f4b@valid-bound-ids? (cons a41e7@x a41e6@x*))) (a3106@invalid-fmls-error a41d9@stx a41d8@fmls) (void))) a41e4@ls/false) ((lambda (a41ea@t) ((lambda (a41ec@ls/false) (if a41ec@ls/false (apply (lambda () (a3239@syntax-violation '#f '"invalid syntax" a41d9@stx)) a41ec@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a41ea@t))) (a3148@syntax-dispatch a41ea@t '_))) a41e2@t))) (a3148@syntax-dispatch a41e2@t '#(each+ any () any)))) a41dc@t))) (a3148@syntax-dispatch a41dc@t 'each-any))) a41d8@fmls))) (set! a3172@chi-lambda-clause (lambda (a41ee@stx a41ef@fmls a41f0@body* a41f1@r a41f2@mr) ((lambda (a41f8@t) ((lambda (a41fa@ls/false) (if a41fa@ls/false (apply (lambda (a41fc@x*) (begin (a3170@verify-formals a41ef@fmls a41ee@stx) ((lambda (a41fe@lex* a41ff@lab*) (values a41fe@lex* (a3182@chi-internal (a2f2d@add-subst (a2efc@make-full-rib a41fc@x* a41ff@lab*) a41f0@body*) (a30e0@add-lexicals a41ff@lab* a41fe@lex* a41f1@r) a41f2@mr))) (map a2ec5@gen-lexical a41fc@x*) (map a2ec9@gen-label a41fc@x*)))) a41fa@ls/false) ((lambda (a4202@t) ((lambda (a4204@ls/false) (if a4204@ls/false (apply (lambda (a4206@x* a4207@x) (begin (a3170@verify-formals a41ef@fmls a41ee@stx) ((lambda (a420a@lex* a420b@lab* a420c@lex a420d@lab) (values (append a420a@lex* a420c@lex) (a3182@chi-internal (a2f2d@add-subst (a2efc@make-full-rib (cons a4207@x a4206@x*) (cons a420d@lab a420b@lab*)) a41f0@body*) (a30e0@add-lexicals (cons a420d@lab a420b@lab*) (cons a420c@lex a420a@lex*) a41f1@r) a41f2@mr))) (map a2ec5@gen-lexical a4206@x*) (map a2ec9@gen-label a4206@x*) (a2ec5@gen-lexical a4207@x) (a2ec9@gen-label a4207@x)))) a4204@ls/false) ((lambda (a4212@t) ((lambda (a4214@ls/false) (if a4214@ls/false (apply (lambda () (a3239@syntax-violation '#f '"invalid syntax" a41ef@fmls)) a4214@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a4212@t))) (a3148@syntax-dispatch a4212@t '_))) a4202@t))) (a3148@syntax-dispatch a4202@t '#(each+ any () any)))) a41f8@t))) (a3148@syntax-dispatch a41f8@t 'each-any))) a41ef@fmls))) (set! a3174@chi-lambda-clause* (lambda (a4216@stx a4217@fmls* a4218@body** a4219@r a421a@mr) (if (null? a4217@fmls*) (values '() '()) ((lambda () (begin '#f (call-with-values (lambda () (a3172@chi-lambda-clause a4216@stx (car a4217@fmls*) (car a4218@body**) a4219@r a421a@mr)) (lambda (a4224@a4221 a4225@a4223) ((lambda (a4228@b a4229@a) (call-with-values (lambda () (a3174@chi-lambda-clause* a4216@stx (cdr a4217@fmls*) (cdr a4218@body**) a4219@r a421a@mr)) (lambda (a4230@a422d a4231@a422f) ((lambda (a4234@b* a4235@a*) (values (cons a4229@a a4235@a*) (cons a4228@b a4234@b*))) a4231@a422f a4230@a422d)))) a4225@a4223 a4224@a4221))))))))) (set! a3176@chi-defun (lambda (a4238@x a4239@r a423a@mr) ((lambda (a423e@t) ((lambda (a4240@ls/false) (if a4240@ls/false (apply (lambda (a4242@ctxt a4243@fmls a4244@body*) (call-with-values (lambda () (a3172@chi-lambda-clause a4243@fmls a4243@fmls a4244@body* a4239@r a423a@mr)) (lambda (a424c@a4249 a424d@a424b) ((lambda (a4250@body a4251@fmls) (a2ea5@a2dce@build-lambda (a322f@syntax-annotation a4242@ctxt) a4251@fmls a4250@body)) a424d@a424b a424c@a4249)))) a4240@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a423e@t))) (a3148@syntax-dispatch a423e@t '(_ (any . any) . any)))) a4238@x))) (set! a3178@chi-rhs (lambda (a4254@rhs a4255@r a4256@mr) ((lambda (a425a@t) (if (memv a425a@t '(defun)) (a3176@chi-defun (cdr a4254@rhs) a4255@r a4256@mr) (if (memv a425a@t '(expr)) ((lambda (a425c@expr) (a316c@chi-expr a425c@expr a4255@r a4256@mr)) (cdr a4254@rhs)) (if (memv a425a@t '(top-expr)) ((lambda (a425e@expr) (a2ea8@a2e00@build-sequence '#f (list (a316c@chi-expr a425e@expr a4255@r a4256@mr) (a2ea9@a2e02@build-void)))) (cdr a4254@rhs)) ((lambda () (begin '#f (assertion-violation 'chi-rhs '"BUG: invalid rhs" a4254@rhs)))))))) (car a4254@rhs)))) (set! a317a@expand-interaction-rhs*/init* (lambda (a4260@lhs* a4261@rhs* a4262@init* a4263@r a4264@mr) ((letrec ((a426a@f (lambda (a426c@lhs* a426d@rhs*) (if (null? a426c@lhs*) (map (lambda (a4270@x) (a316c@chi-expr a4270@x a4263@r a4264@mr)) a4262@init*) ((lambda () (begin '#f ((lambda (a4272@lhs a4273@rhs) ((lambda (a4276@t) (if (memv a4276@t '(defun)) ((lambda (a4278@rhs) (cons (list 'set! a4272@lhs a4278@rhs) (a426a@f (cdr a426c@lhs*) (cdr a426d@rhs*)))) (a3176@chi-defun (cdr a4273@rhs) a4263@r a4264@mr)) (if (memv a4276@t '(expr)) ((lambda (a427a@rhs) (cons (list 'set! a4272@lhs a427a@rhs) (a426a@f (cdr a426c@lhs*) (cdr a426d@rhs*)))) (a316c@chi-expr (cdr a4273@rhs) a4263@r a4264@mr)) (if (memv a4276@t '(top-expr)) ((lambda (a427c@e) (cons a427c@e (a426a@f (cdr a426c@lhs*) (cdr a426d@rhs*)))) (a316c@chi-expr (cdr a4273@rhs) a4263@r a4264@mr)) ((lambda () (begin '#f (error 'expand-interaction '"invallid" a4273@rhs)))))))) (car a4273@rhs))) (car a426c@lhs*) (car a426d@rhs*))))))))) a426a@f) a4260@lhs* a4261@rhs*))) (set! a317c@chi-rhs* (lambda (a427e@rhs* a427f@r a4280@mr) ((letrec ((a4284@f (lambda (a4286@ls) (if (null? a4286@ls) '() ((lambda () (begin '#f ((lambda (a4288@a) (cons a4288@a (a4284@f (cdr a4286@ls)))) (a3178@chi-rhs (car a4286@ls) a427f@r a4280@mr))))))))) a4284@f) a427e@rhs*))) (set! a317e@find-bound=? (lambda (a428a@x a428b@lhs* a428c@rhs*) (if (null? a428b@lhs*) '#f (if (a2f47@bound-id=? a428a@x (car a428b@lhs*)) (car a428c@rhs*) ((lambda () (begin '#f (a317e@find-bound=? a428a@x (cdr a428b@lhs*) (cdr a428c@rhs*))))))))) (set! a3180@find-dups (lambda (a4290@ls) ((letrec ((a4292@f (lambda (a4294@ls a4295@dups) (if (null? a4294@ls) a4295@dups ((lambda (a4298@t) (if a4298@t ((lambda (a429a@x) (a4292@f (cdr a4294@ls) (cons (list (car a4294@ls) a429a@x) a4295@dups))) a4298@t) ((lambda () (begin '#f (a4292@f (cdr a4294@ls) a4295@dups)))))) (a317e@find-bound=? (car a4294@ls) (cdr a4294@ls) (cdr a4294@ls))))))) a4292@f) a4290@ls '()))) (set! a3182@chi-internal (lambda (a429c@e* a429d@r a429e@mr) ((lambda (a42a2@rib) (call-with-values (lambda () (a31a7@chi-body* (map (lambda (a42b4@x) (a2f2d@add-subst a42a2@rib a42b4@x)) (a2f3f@syntax->list a429c@e*)) a429d@r a429e@mr '() '() '() '() '() a42a2@rib '#f '#t)) (lambda (a42b6@a42a5 a42b7@a42a7 a42b8@a42a9 a42b9@a42ab a42ba@a42ad a42bb@a42af a42bc@a42b1 a42bd@a42b3) ((lambda (a42c6@_exp* a42c7@kwd* a42c8@mod** a42c9@rhs* a42ca@lex* a42cb@mr a42cc@r a42cd@e*) (begin (if (null? a42cd@e*) (a3239@syntax-violation '#f '"no expression in body" a42cd@e*) (void)) ((lambda (a42d6@init*) ((lambda (a42d8@rhs*) ((lambda () (a2eab@a2e06@build-letrec* '#f (reverse a42ca@lex*) (reverse a42d8@rhs*) (a2ea8@a2e00@build-sequence '#f a42d6@init*))))) (a317c@chi-rhs* a42c9@rhs* a42cc@r a42cb@mr))) (a3168@chi-expr* (append (apply append (reverse a42c8@mod**)) a42cd@e*) a42cc@r a42cb@mr)))) a42bd@a42b3 a42bc@a42b1 a42bb@a42af a42ba@a42ad a42b9@a42ab a42b8@a42a9 a42b7@a42a7 a42b6@a42a5)))) (a2ef0@make-empty-rib)))) (set! a3184@parse-module (lambda (a42da@e) ((lambda (a42dc@t) ((lambda (a42de@ls/false) (if a42de@ls/false (apply (lambda (a42e0@export* a42e1@b*) (begin (if (not (for-all a2f41@id? a42e0@export*)) (a3239@syntax-violation '#f '"module exports must be identifiers" a42da@e) (void)) (values '#f (list->vector a42e0@export*) a42e1@b*))) a42de@ls/false) ((lambda (a42e4@t) ((lambda (a42e6@ls/false) (if a42e6@ls/false (apply (lambda (a42e8@name a42e9@export* a42ea@b*) (begin (if (not (a2f41@id? a42e8@name)) (a3239@syntax-violation '#f '"module name must be an identifier" a42da@e) (void)) (if (not (for-all a2f41@id? a42e9@export*)) (a3239@syntax-violation '#f '"module exports must be identifiers" a42da@e) (void)) (values a42e8@name (list->vector a42e9@export*) a42ea@b*))) a42e6@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a42e4@t))) (a3148@syntax-dispatch a42e4@t '(_ any each-any . each-any)))) a42dc@t))) (a3148@syntax-dispatch a42dc@t '(_ each-any . each-any)))) a42da@e))) (set! a318a@a3185 (make-record-type-descriptor 'module-interface '#f 'a3188 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! a318c@a3187 '#f) (set! a318e@a3186 (make-record-constructor-descriptor a318a@a3185 '#f a318c@a3187)) (set! a3191@module-interface? (record-predicate a318a@a3185)) (set! a3193@make-module-interface (record-constructor a318e@a3186)) (set! a3195@module-interface-first-mark (record-accessor a318a@a3185 '0)) (set! a3197@module-interface-exp-id-vec (record-accessor a318a@a3185 '1)) (set! a3199@module-interface-exp-lab-vec (record-accessor a318a@a3185 '2)) (set! a319b@set-module-interface-first-mark! (record-mutator a318a@a3185 '0)) (set! a319d@set-module-interface-exp-id-vec! (record-mutator a318a@a3185 '1)) (set! a319f@set-module-interface-exp-lab-vec! (record-mutator a318a@a3185 '2)) (set! a31a1@module-interface-exp-id* (lambda (a42ee@iface a42ef@id) ((lambda (a42f3@diff-marks) (begin (set! a42f3@diff-marks (lambda (a42fa@ls a42fb@x) (begin (if (null? a42fa@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (a42fe@a) (if (eq? a42fe@a a42fb@x) '() (cons a42fe@a (a42f3@diff-marks (cdr a42fa@ls) a42fb@x)))) (car a42fa@ls))))) ((lambda (a42f4@diff a42f5@id-vec) (if (null? a42f4@diff) a42f5@id-vec (vector-map (lambda (a42f8@x) (a2f0b@make-stx (a2f0d@stx-expr a42f8@x) (append a42f4@diff (a2f0f@stx-mark* a42f8@x)) '() '())) a42f5@id-vec))) (a42f3@diff-marks (a2f0f@stx-mark* a42ef@id) (a3195@module-interface-first-mark a42ee@iface)) (a3197@module-interface-exp-id-vec a42ee@iface)))) '#f))) (set! a31a3@syntax-transpose (lambda (a4300@object a4301@base-id a4302@new-id) ((lambda (a4307@who a4309@err a430b@split a430d@final a430f@diff) (begin (set! a4307@who 'syntax-transpose) (set! a4309@err (lambda (a435a@msg . a435c@args) (apply assertion-violation a4307@who a435a@msg a435c@args))) (set! a430b@split (lambda (a434c@s*) (if (eq? (car a434c@s*) 'shift) (values (list 'shift) (cdr a434c@s*)) ((lambda () (begin '#f (call-with-values (lambda () (a430b@split (cdr a434c@s*))) (lambda (a4352@a434f a4353@a4351) ((lambda (a4356@s2* a4357@s1*) (values (cons (car a434c@s*) a4357@s1*) a4356@s2*)) a4353@a4351 a4352@a434f))))))))) (set! a430d@final (lambda (a434a@s*) (if (or (null? a434a@s*) (eq? (car a434a@s*) 'shift)) '() ((lambda () (begin '#f (cons (car a434a@s*) (a430d@final (cdr a434a@s*))))))))) (set! a430f@diff (lambda (a4322@m a4323@m* a4324@s* a4325@ae*) (if (null? a4323@m*) (a4309@err '"unmatched identifiers" a4301@base-id a4302@new-id) ((lambda (a432a@m1) (if (eq? a4322@m a432a@m1) (values '() (a430d@final a4324@s*) '()) (call-with-values (lambda () (a430b@split a4324@s*)) (lambda (a4330@a432d a4331@a432f) ((lambda (a4334@s2* a4335@s1*) (call-with-values (lambda () (a430f@diff a4322@m (cdr a4323@m*) a4334@s2* (cdr a4325@ae*))) (lambda (a433e@a4339 a433f@a433b a4340@a433d) ((lambda (a4344@nae* a4345@ns* a4346@nm*) (values (cons a432a@m1 a4346@nm*) (append a4335@s1* a4345@ns*) (cons (car a4325@ae*) a4344@nae*))) a4340@a433d a433f@a433b a433e@a4339)))) a4331@a432f a4330@a432d))))) (car a4323@m*))))) (begin (if (not (a2f41@id? a4301@base-id)) (a4309@err '"not an identifier" a4301@base-id) (void)) (if (not (a2f41@id? a4302@new-id)) (a4309@err '"not an identifier" a4302@new-id) (void)) (if (not (a3225@free-identifier=? a4301@base-id a4302@new-id)) (a4309@err '"not the same identifier" a4301@base-id a4302@new-id) (void)) (call-with-values (lambda () (a430f@diff (car (a2f0f@stx-mark* a4301@base-id)) (a2f0f@stx-mark* a4302@new-id) (a2f11@stx-subst* a4302@new-id) (a2f13@stx-ae* a4302@new-id))) (lambda (a4316@a4311 a4317@a4313 a4318@a4315) ((lambda (a431c@ae* a431d@s* a431e@m*) (if (and (null? a431e@m*) (null? a431d@s*)) a4300@object (a2f29@mkstx a4300@object a431e@m* a431d@s* a431c@ae*))) a4318@a4315 a4317@a4313 a4316@a4311)))))) '#f '#f '#f '#f '#f))) (set! a31a5@chi-internal-module (lambda (a435e@e a435f@r a4360@mr a4361@lex* a4362@rhs* a4363@mod** a4364@kwd*) (call-with-values (lambda () (a3184@parse-module a435e@e)) (lambda (a4372@a436d a4373@a436f a4374@a4371) ((lambda (a4378@e* a4379@exp-id* a437a@name) ((lambda (a437e@rib) ((lambda (a4380@e*) ((lambda () (call-with-values (lambda () (a31a7@chi-body* a4380@e* a435f@r a4360@mr a4361@lex* a4362@rhs* a4363@mod** a4364@kwd* '() a437e@rib '#f '#t)) (lambda (a4392@a4383 a4393@a4385 a4394@a4387 a4395@a4389 a4396@a438b a4397@a438d a4398@a438f a4399@a4391) ((lambda (a43a2@_exp* a43a3@kwd* a43a4@mod** a43a5@rhs* a43a6@lex* a43a7@mr a43a8@r a43a9@e*) ((lambda (a43b2@exp-lab* a43b3@mod**) (if (not a437a@name) (values a43a6@lex* a43a5@rhs* a4379@exp-id* a43b2@exp-lab* a43a8@r a43a7@mr a43b3@mod** a43a3@kwd*) ((lambda (a43b6@lab a43b7@iface) (values a43a6@lex* a43a5@rhs* (vector a437a@name) (vector a43b6@lab) (cons (cons a43b6@lab (cons '$module a43b7@iface)) a43a8@r) (cons (cons a43b6@lab (cons '$module a43b7@iface)) a43a7@mr) a43b3@mod** a43a3@kwd*)) (a2ec9@gen-label 'module) (a3193@make-module-interface (car (a2f0f@stx-mark* a437a@name)) (vector-map (lambda (a43ba@x) (a2f0b@make-stx (a2f0d@stx-expr a43ba@x) (a2f0f@stx-mark* a43ba@x) '() '())) a4379@exp-id*) a43b2@exp-lab*)))) (vector-map (lambda (a43bc@x) (or (a2f5b@id->label (a2f0b@make-stx (a2f43@id->sym a43bc@x) (a2f0f@stx-mark* a43bc@x) (list a437e@rib) '())) (a3239@syntax-violation '#f '"cannot find module export" a43bc@x))) a4379@exp-id*) (cons a43a9@e* a43a4@mod**))) a4399@a4391 a4398@a438f a4397@a438d a4396@a438b a4395@a4389 a4394@a4387 a4393@a4385 a4392@a4383)))))) (map (lambda (a43be@x) (a2f2d@add-subst a437e@rib a43be@x)) (a2f3f@syntax->list a4378@e*)))) (a2ef0@make-empty-rib))) a4374@a4371 a4373@a436f a4372@a436d))))) (set! a31a7@chi-body* (lambda (a43c0@e* a43c1@r a43c2@mr a43c3@lex* a43c4@rhs* a43c5@mod** a43c6@kwd* a43c7@exp* a43c8@rib a43c9@mix? a43ca@sd?) (if (null? a43c0@e*) (values a43c0@e* a43c1@r a43c2@mr a43c3@lex* a43c4@rhs* a43c5@mod** a43c6@kwd* a43c7@exp*) ((lambda () (begin '#f ((lambda (a43d6@e) (call-with-values (lambda () (a2f67@syntax-type a43d6@e a43c1@r)) (lambda (a43de@a43d9 a43df@a43db a43e0@a43dd) ((lambda (a43e4@kwd a43e5@value a43e6@type) ((lambda (a43ea@kwd*) ((lambda (a43ec@t) (if (memv a43ec@t '(define)) (call-with-values (lambda () (a30d0@parse-define a43d6@e)) (lambda (a43f2@a43ef a43f3@a43f1) ((lambda (a43f6@rhs a43f7@id) (begin (if (a2f4f@bound-id-member? a43f7@id a43ea@kwd*) (a3239@syntax-violation '#f '"cannot redefine keyword" a43d6@e) (void)) (call-with-values (lambda () (a2ecd@gen-define-label+loc a43f7@id a43c8@rib a43ca@sd?)) (lambda (a43fe@a43fb a43ff@a43fd) ((lambda (a4402@lex a4403@lab) (begin (a2ef4@extend-rib! a43c8@rib a43f7@id a4403@lab a43ca@sd?) (a31a7@chi-body* (cdr a43c0@e*) (a30de@add-lexical a4403@lab a4402@lex a43c1@r) a43c2@mr (cons a4402@lex a43c3@lex*) (cons a43f6@rhs a43c4@rhs*) a43c5@mod** a43ea@kwd* a43c7@exp* a43c8@rib a43c9@mix? a43ca@sd?))) a43ff@a43fd a43fe@a43fb))))) a43f3@a43f1 a43f2@a43ef))) (if (memv a43ec@t '(define-syntax)) (call-with-values (lambda () (a30d2@parse-define-syntax a43d6@e)) (lambda (a440a@a4407 a440b@a4409) ((lambda (a440e@rhs a440f@id) (begin (if (a2f4f@bound-id-member? a440f@id a43ea@kwd*) (a3239@syntax-violation '#f '"cannot redefine keyword" a43d6@e) (void)) ((lambda (a4412@lab) ((lambda (a4414@expanded-rhs) ((lambda () (begin (a2ef4@extend-rib! a43c8@rib a440f@id a4412@lab a43ca@sd?) ((lambda (a4416@b) (a31a7@chi-body* (cdr a43c0@e*) (cons (cons a4412@lab a4416@b) a43c1@r) (cons (cons a4412@lab a4416@b) a43c2@mr) a43c3@lex* a43c4@rhs* a43c5@mod** a43ea@kwd* a43c7@exp* a43c8@rib a43c9@mix? a43ca@sd?)) (a2f7f@make-eval-transformer a4414@expanded-rhs)))))) (a31a9@expand-transformer a440e@rhs a43c2@mr))) (a2ecf@gen-define-label a440f@id a43c8@rib a43ca@sd?)))) a440b@a4409 a440a@a4407))) (if (memv a43ec@t '(let-syntax letrec-syntax)) ((lambda (a4418@t) ((lambda (a441a@ls/false) (if (and a441a@ls/false (apply (lambda (a441c@xlhs* a441d@xrhs* a441e@xbody*) (if (not (a2f4b@valid-bound-ids? a441c@xlhs*)) (a3239@syntax-violation '#f '"invalid identifiers" a43d6@e) (void))) a441a@ls/false)) (apply (lambda (a4422@xlhs* a4423@xrhs* a4424@xbody*) ((lambda (a4428@xlab*) ((lambda (a442a@xrib) ((lambda (a442c@xb*) ((lambda () (a31a7@chi-body* (append (map (lambda (a442e@x) (a2f2d@add-subst a442a@xrib a442e@x)) a4424@xbody*) (cdr a43c0@e*)) (append (map cons a4428@xlab* a442c@xb*) a43c1@r) (append (map cons a4428@xlab* a442c@xb*) a43c2@mr) a43c3@lex* a43c4@rhs* a43c5@mod** a43ea@kwd* a43c7@exp* a43c8@rib a43c9@mix? a43ca@sd?)))) (map (lambda (a4430@x) (a2f7f@make-eval-transformer (a31a9@expand-transformer (if (eq? a43e6@type 'let-syntax) a4430@x (a2f2d@add-subst a442a@xrib a4430@x)) a43c2@mr))) a4423@xrhs*))) (a2efc@make-full-rib a4422@xlhs* a4428@xlab*))) (map a2ec9@gen-label a4422@xlhs*))) a441a@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a4418@t))) (a3148@syntax-dispatch a4418@t '(_ #(each (any any)) . each-any)))) a43d6@e) (if (memv a43ec@t '(begin)) ((lambda (a4432@t) ((lambda (a4434@ls/false) (if a4434@ls/false (apply (lambda (a4436@x*) (a31a7@chi-body* (append a4436@x* (cdr a43c0@e*)) a43c1@r a43c2@mr a43c3@lex* a43c4@rhs* a43c5@mod** a43ea@kwd* a43c7@exp* a43c8@rib a43c9@mix? a43ca@sd?)) a4434@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a4432@t))) (a3148@syntax-dispatch a4432@t '(_ . each-any)))) a43d6@e) (if (memv a43ec@t '(stale-when)) ((lambda (a4438@t) ((lambda (a443a@ls/false) (if a443a@ls/false (apply (lambda (a443c@guard a443d@x*) (begin (a31c7@handle-stale-when a443c@guard a43c2@mr) (a31a7@chi-body* (append a443d@x* (cdr a43c0@e*)) a43c1@r a43c2@mr a43c3@lex* a43c4@rhs* a43c5@mod** a43ea@kwd* a43c7@exp* a43c8@rib a43c9@mix? a43ca@sd?))) a443a@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a4438@t))) (a3148@syntax-dispatch a4438@t '(_ any . each-any)))) a43d6@e) (if (memv a43ec@t '(global-macro global-macro!)) (a31a7@chi-body* (cons (a2f2d@add-subst a43c8@rib (a3166@chi-global-macro a43e5@value a43d6@e a43c1@r)) (cdr a43c0@e*)) a43c1@r a43c2@mr a43c3@lex* a43c4@rhs* a43c5@mod** a43ea@kwd* a43c7@exp* a43c8@rib a43c9@mix? a43ca@sd?) (if (memv a43ec@t '(local-macro local-macro!)) (a31a7@chi-body* (cons (a2f2d@add-subst a43c8@rib (a3164@chi-local-macro a43e5@value a43d6@e a43c1@r)) (cdr a43c0@e*)) a43c1@r a43c2@mr a43c3@lex* a43c4@rhs* a43c5@mod** a43ea@kwd* a43c7@exp* a43c8@rib a43c9@mix? a43ca@sd?) (if (memv a43ec@t '(macro macro!)) (a31a7@chi-body* (cons (a2f2d@add-subst a43c8@rib (a3162@chi-macro a43e5@value a43d6@e a43c1@r)) (cdr a43c0@e*)) a43c1@r a43c2@mr a43c3@lex* a43c4@rhs* a43c5@mod** a43ea@kwd* a43c7@exp* a43c8@rib a43c9@mix? a43ca@sd?) (if (memv a43ec@t '(module)) (call-with-values (lambda () (a31a5@chi-internal-module a43d6@e a43c1@r a43c2@mr a43c3@lex* a43c4@rhs* a43c5@mod** a43ea@kwd*)) (lambda (a4450@a4441 a4451@a4443 a4452@a4445 a4453@a4447 a4454@a4449 a4455@a444b a4456@a444d a4457@a444f) ((lambda (a4460@kwd* a4461@mod** a4462@mr a4463@r a4464@m-exp-lab* a4465@m-exp-id* a4466@rhs* a4467@lex*) (begin (vector-for-each (lambda (a4470@id a4471@lab) (a2ef4@extend-rib! a43c8@rib a4470@id a4471@lab a43ca@sd?)) a4465@m-exp-id* a4464@m-exp-lab*) (a31a7@chi-body* (cdr a43c0@e*) a4463@r a4462@mr a4467@lex* a4466@rhs* a4461@mod** a4460@kwd* a43c7@exp* a43c8@rib a43c9@mix? a43ca@sd?))) a4457@a444f a4456@a444d a4455@a444b a4454@a4449 a4453@a4447 a4452@a4445 a4451@a4443 a4450@a4441))) (if (memv a43ec@t '(library)) (begin (a3217@library-expander (a2f57@stx->datum a43d6@e)) (a31a7@chi-body* (cdr a43c0@e*) a43c1@r a43c2@mr a43c3@lex* a43c4@rhs* a43c5@mod** a43ea@kwd* a43c7@exp* a43c8@rib a43c9@mix? a43ca@sd?)) (if (memv a43ec@t '(export)) ((lambda (a4474@t) ((lambda (a4476@ls/false) (if a4476@ls/false (apply (lambda (a4478@exp-decl*) (a31a7@chi-body* (cdr a43c0@e*) a43c1@r a43c2@mr a43c3@lex* a43c4@rhs* a43c5@mod** a43ea@kwd* (append a4478@exp-decl* a43c7@exp*) a43c8@rib a43c9@mix? a43ca@sd?)) a4476@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a4474@t))) (a3148@syntax-dispatch a4474@t '(_ . each-any)))) a43d6@e) (if (memv a43ec@t '(import)) ((lambda () ((lambda (a447b@module-import? a447d@module-import a447f@library-import) (begin (set! a447b@module-import? (lambda (a44ce@e) ((lambda (a44d0@t) ((lambda (a44d2@ls/false) (if (and a44d2@ls/false (apply (lambda (a44d4@id) (a2f41@id? a44d4@id)) a44d2@ls/false)) (apply (lambda (a44d6@id) '#t) a44d2@ls/false) ((lambda (a44d8@t) ((lambda (a44da@ls/false) (if a44da@ls/false (apply (lambda (a44dc@imp*) '#f) a44da@ls/false) ((lambda (a44de@t) ((lambda (a44e0@ls/false) (if a44e0@ls/false (apply (lambda () (a3239@syntax-violation '#f '"malformed import form" a44ce@e)) a44e0@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a44de@t))) (a3148@syntax-dispatch a44de@t '_))) a44d8@t))) (a3148@syntax-dispatch a44d8@t '(_ . each-any)))) a44d0@t))) (a3148@syntax-dispatch a44d0@t '(_ any)))) a44ce@e))) (set! a447d@module-import (lambda (a44ac@e a44ad@r) ((lambda (a44b0@t) ((lambda (a44b2@ls/false) (if (and a44b2@ls/false (apply (lambda (a44b4@id) (a2f41@id? a44b4@id)) a44b2@ls/false)) (apply (lambda (a44b6@id) (call-with-values (lambda () (a2f67@syntax-type a44b6@id a44ad@r)) (lambda (a44be@a44b9 a44bf@a44bb a44c0@a44bd) ((lambda (a44c4@kwd a44c5@value a44c6@type) ((lambda (a44ca@t) (if (memv a44ca@t '($module)) ((lambda (a44cc@iface) (values (a31a1@module-interface-exp-id* a44cc@iface a44b6@id) (a3199@module-interface-exp-lab-vec a44cc@iface))) a44c5@value) ((lambda () (begin '#f (a3239@syntax-violation '#f '"invalid import" a44ac@e)))))) a44c6@type)) a44c0@a44bd a44bf@a44bb a44be@a44b9)))) a44b2@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a44b0@t))) (a3148@syntax-dispatch a44b0@t '(_ any)))) a44ac@e))) (set! a447f@library-import (lambda (a4490@e) ((lambda (a4492@t) ((lambda (a4494@ls/false) (if a4494@ls/false (apply (lambda (a4496@ctxt a4497@imp*) (call-with-values (lambda () (a31b1@parse-import-spec* (a323f@syntax->datum a4497@imp*))) (lambda (a449e@a449b a449f@a449d) ((lambda (a44a2@subst-labels a44a3@subst-names) (values (vector-map (lambda (a44a6@name) (a2f1f@datum->stx a4496@ctxt a44a6@name)) a44a3@subst-names) a44a2@subst-labels)) a449f@a449d a449e@a449b)))) a4494@ls/false) ((lambda (a44a8@t) ((lambda (a44aa@ls/false) (if a44aa@ls/false (apply (lambda () (a3239@syntax-violation '#f '"invalid import form" a4490@e)) a44aa@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a44a8@t))) (a3148@syntax-dispatch a44a8@t '_))) a4492@t))) (a3148@syntax-dispatch a4492@t '(any . each-any)))) a4490@e))) (begin (call-with-values (lambda () (if (a447b@module-import? a43d6@e) (a447d@module-import a43d6@e a43c1@r) (a447f@library-import a43d6@e))) (lambda (a4484@a4481 a4485@a4483) ((lambda (a4488@lab* a4489@id*) (vector-for-each (lambda (a448c@id a448d@lab) (a2ef4@extend-rib! a43c8@rib a448c@id a448d@lab a43ca@sd?)) a4489@id* a4488@lab*)) a4485@a4483 a4484@a4481))) (a31a7@chi-body* (cdr a43c0@e*) a43c1@r a43c2@mr a43c3@lex* a43c4@rhs* a43c5@mod** a43ea@kwd* a43c7@exp* a43c8@rib a43c9@mix? a43ca@sd?)))) '#f '#f '#f))) ((lambda () (begin '#f (if a43c9@mix? (a31a7@chi-body* (cdr a43c0@e*) a43c1@r a43c2@mr (cons (a2ec5@gen-lexical 'dummy) a43c3@lex*) (cons (cons 'top-expr a43d6@e) a43c4@rhs*) a43c5@mod** a43ea@kwd* a43c7@exp* a43c8@rib '#t a43ca@sd?) (values a43c0@e* a43c1@r a43c2@mr a43c3@lex* a43c4@rhs* a43c5@mod** a43ea@kwd* a43c7@exp*)))))))))))))))))) a43e6@type)) (if (a2f41@id? a43e4@kwd) (cons a43e4@kwd a43c6@kwd*) a43c6@kwd*))) a43e0@a43dd a43df@a43db a43de@a43d9)))) (car a43c0@e*)))))))) (set! a31a9@expand-transformer (lambda (a44e2@expr a44e3@r) ((lambda (a44e6@rtc) ((lambda (a44e8@expanded-rhs) (begin (for-each ((lambda (a44ea@mark-visit) (lambda (a44ec@x) (begin (a2d77@a2bf7@invoke-library a44ec@x) (a44ea@mark-visit a44ec@x)))) (a31b9@vis-collector)) (a44e6@rtc)) a44e8@expanded-rhs)) ((lambda (a44f6@a44ef a44f7@a44f1 a44f8@a44f3 a44f9@a44f5) ((lambda (a44fe@swap) (dynamic-wind a44fe@swap (lambda () (a316c@chi-expr a44e2@expr a44e3@r a44e3@r)) a44fe@swap)) (lambda () (begin ((lambda (a4500@t) (begin (a44f6@a44ef a44f8@a44f3) (set! a44f8@a44f3 a4500@t))) (a44f6@a44ef)) ((lambda (a4502@t) (begin (a44f7@a44f1 a44f9@a44f5) (set! a44f9@a44f5 a4502@t))) (a44f7@a44f1)))))) a31b7@inv-collector a31b9@vis-collector a44e6@rtc (lambda (a4504@x) (values))))) (a31b5@make-collector)))) (set! a31ab@parse-exports (lambda (a4506@exp*) ((letrec ((a4508@f (lambda (a450a@exp* a450b@int* a450c@ext*) (if (null? a450a@exp*) (begin (if (not (a2f4b@valid-bound-ids? a450c@ext*)) (a3239@syntax-violation 'export '"invalid exports" (a3180@find-dups a450c@ext*)) (void)) (values (map a323f@syntax->datum a450c@ext*) a450b@int*)) ((lambda () (begin '#f ((lambda (a4510@t) ((lambda (a4512@ls/false) (if a4512@ls/false (apply (lambda (a4514@rename a4515@i* a4516@e*) (begin (if (not (and (eq? (a323f@syntax->datum a4514@rename) 'rename) (for-all a2f41@id? a4515@i*) (for-all a2f41@id? a4516@e*))) (a3239@syntax-violation 'export '"invalid export specifier" (car a450a@exp*)) (void)) (a4508@f (cdr a450a@exp*) (append a4515@i* a450b@int*) (append a4516@e* a450c@ext*)))) a4512@ls/false) ((lambda (a451a@t) ((lambda (a451c@ls/false) (if a451c@ls/false (apply (lambda (a451e@ie) (begin (if (not (a2f41@id? a451e@ie)) (a3239@syntax-violation 'export '"invalid export" a451e@ie) (void)) (a4508@f (cdr a450a@exp*) (cons a451e@ie a450b@int*) (cons a451e@ie a450c@ext*)))) a451c@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a451a@t))) (a3148@syntax-dispatch a451a@t 'any))) a4510@t))) (a3148@syntax-dispatch a4510@t '(any . #(each (any any)))))) (car a450a@exp*))))))))) a4508@f) a4506@exp* '() '()))) (set! a31ad@parse-library-name (lambda (a4520@spec) ((lambda (a4523@parse) (begin (set! a4523@parse (lambda (a4530@x) ((lambda (a4532@t) ((lambda (a4534@ls/false) (if (and a4534@ls/false (apply (lambda (a4536@v*) (for-all (lambda (a4538@x) ((lambda (a453a@x) (and (integer? a453a@x) (exact? a453a@x))) (a323f@syntax->datum a4538@x))) a4536@v*)) a4534@ls/false)) (apply (lambda (a453c@v*) (values '() (map a323f@syntax->datum a453c@v*))) a4534@ls/false) ((lambda (a453e@t) ((lambda (a4540@ls/false) (if (and a4540@ls/false (apply (lambda (a4542@x a4543@rest) (symbol? (a323f@syntax->datum a4542@x))) a4540@ls/false)) (apply (lambda (a4546@x a4547@rest) (call-with-values (lambda () (a4523@parse a4547@rest)) (lambda (a454e@a454b a454f@a454d) ((lambda (a4552@v* a4553@x*) (values (cons (a323f@syntax->datum a4546@x) a4553@x*) a4552@v*)) a454f@a454d a454e@a454b)))) a4540@ls/false) ((lambda (a4556@t) ((lambda (a4558@ls/false) (if a4558@ls/false (apply (lambda () (values '() '())) a4558@ls/false) ((lambda (a455a@t) ((lambda (a455c@ls/false) (if a455c@ls/false (apply (lambda () (a3239@syntax-violation '#f '"invalid library name" a4520@spec)) a455c@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a455a@t))) (a3148@syntax-dispatch a455a@t '_))) a4556@t))) (a3148@syntax-dispatch a4556@t '()))) a453e@t))) (a3148@syntax-dispatch a453e@t '(any . any)))) a4532@t))) (a3148@syntax-dispatch a4532@t '(each-any)))) a4530@x))) (call-with-values (lambda () (a4523@parse a4520@spec)) (lambda (a4528@a4525 a4529@a4527) ((lambda (a452c@ver* a452d@name*) (begin (if (null? a452d@name*) (a3239@syntax-violation '#f '"empty library name" a4520@spec) (void)) (values a452d@name* a452c@ver*))) a4529@a4527 a4528@a4525))))) '#f))) (set! a31af@parse-library (lambda (a455e@e) ((lambda (a4560@t) ((lambda (a4562@ls/false) (if (and a4562@ls/false (apply (lambda (a4564@library a4565@name* a4566@export a4567@exp* a4568@import a4569@imp* a456a@b*) (and (eq? (a323f@syntax->datum a4566@export) 'export) (eq? (a323f@syntax->datum a4568@import) 'import) (eq? (a323f@syntax->datum a4564@library) 'library))) a4562@ls/false)) (apply (lambda (a4572@library a4573@name* a4574@export a4575@exp* a4576@import a4577@imp* a4578@b*) (values a4573@name* a4575@exp* a4577@imp* a4578@b*)) a4562@ls/false) ((lambda (a4580@t) ((lambda (a4582@ls/false) (if a4582@ls/false (apply (lambda () (a3239@syntax-violation '#f '"malformed library" a455e@e)) a4582@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a4580@t))) (a3148@syntax-dispatch a4580@t '_))) a4560@t))) (a3148@syntax-dispatch a4560@t '(any each-any (any . each-any) (any . each-any) . each-any)))) a455e@e))) (set! a31b1@parse-import-spec* (lambda (a4584@imp*) ((lambda (a4587@idsyn? a4589@dup-error a458b@merge-substs a458d@exclude* a458f@find* a4591@rem* a4593@remove-dups a4595@parse-library-name a4597@import-library a4599@get-import a459b@add-imports!) (begin (set! a4587@idsyn? (lambda (a478e@x) (symbol? (a323f@syntax->datum a478e@x)))) (set! a4589@dup-error (lambda (a478c@name) (a3239@syntax-violation 'import '"two imports with different bindings" a478c@name))) (set! a458b@merge-substs (lambda (a477a@s a477b@subst) ((lambda (a477f@insert-to-subst) (begin (set! a477f@insert-to-subst (lambda (a4780@a a4781@subst) ((lambda (a4784@name a4785@label) ((lambda (a4788@t) (if a4788@t ((lambda (a478a@x) (if (eq? (cdr a478a@x) a4785@label) a4781@subst ((lambda () (begin '#f (a4589@dup-error a4784@name)))))) a4788@t) ((lambda () (begin '#f (cons a4780@a a4781@subst)))))) (assq a4784@name a4781@subst))) (car a4780@a) (cdr a4780@a)))) (if (null? a477a@s) a477b@subst ((lambda () (begin '#f (a477f@insert-to-subst (car a477a@s) (a458b@merge-substs (cdr a477a@s) a477b@subst)))))))) '#f))) (set! a458d@exclude* (lambda (a474a@sym* a474b@subst) ((lambda (a474f@exclude) (begin (set! a474f@exclude (lambda (a4768@sym a4769@subst) (if (null? a4769@subst) (a3239@syntax-violation 'import '"cannot rename unbound identifier" a4768@sym) (if (eq? a4768@sym (caar a4769@subst)) (values (cdar a4769@subst) (cdr a4769@subst)) ((lambda () (begin '#f ((lambda (a476c@a) (call-with-values (lambda () (a474f@exclude a4768@sym (cdr a4769@subst))) (lambda (a4772@a476f a4773@a4771) ((lambda (a4776@subst a4777@old) (values a4777@old (cons a476c@a a4776@subst))) a4773@a4771 a4772@a476f)))) (car a4769@subst))))))))) (if (null? a474a@sym*) (values '() a474b@subst) ((lambda () (begin '#f (call-with-values (lambda () (a474f@exclude (car a474a@sym*) a474b@subst)) (lambda (a4754@a4751 a4755@a4753) ((lambda (a4758@subst a4759@old) (call-with-values (lambda () (a458d@exclude* (cdr a474a@sym*) a4758@subst)) (lambda (a4760@a475d a4761@a475f) ((lambda (a4764@subst a4765@old*) (values (cons a4759@old a4765@old*) a4764@subst)) a4761@a475f a4760@a475d)))) a4755@a4753 a4754@a4751))))))))) '#f))) (set! a458f@find* (lambda (a4742@sym* a4743@subst) (map (lambda (a4746@x) ((lambda (a4748@t) (if a4748@t (cdr a4748@t) ((lambda () (begin '#f (a3239@syntax-violation 'import '"cannot find identifier" a4746@x)))))) (assq a4746@x a4743@subst))) a4742@sym*))) (set! a4591@rem* (lambda (a473a@sym* a473b@subst) ((letrec ((a473e@f (lambda (a4740@subst) (if (null? a4740@subst) '() (if (memq (caar a4740@subst) a473a@sym*) (a473e@f (cdr a4740@subst)) ((lambda () (begin '#f (cons (car a4740@subst) (a473e@f (cdr a4740@subst))))))))))) a473e@f) a473b@subst))) (set! a4593@remove-dups (lambda (a4738@ls) (if (null? a4738@ls) '() (if (memq (car a4738@ls) (cdr a4738@ls)) (a4593@remove-dups (cdr a4738@ls)) ((lambda () (begin '#f (cons (car a4738@ls) (a4593@remove-dups (cdr a4738@ls)))))))))) (set! a4595@parse-library-name (lambda (a4650@spec) ((lambda (a4653@subversion? a4655@subversion-pred a4657@version-pred) (begin (set! a4653@subversion? (lambda (a4734@x) ((lambda (a4736@x) (and (integer? a4736@x) (exact? a4736@x) (>= a4736@x '0))) (a323f@syntax->datum a4734@x)))) (set! a4655@subversion-pred (lambda (a46d4@x*) ((lambda (a46d6@t) ((lambda (a46d8@ls/false) (if (and a46d8@ls/false (apply (lambda (a46da@n) (a4653@subversion? a46da@n)) a46d8@ls/false)) (apply (lambda (a46dc@n) (lambda (a46de@x) (= a46de@x (a323f@syntax->datum a46dc@n)))) a46d8@ls/false) ((lambda (a46e0@t) ((lambda (a46e2@ls/false) (if (and a46e2@ls/false (apply (lambda (a46e4@p? a46e5@sub*) (eq? (a323f@syntax->datum a46e4@p?) 'and)) a46e2@ls/false)) (apply (lambda (a46e8@p? a46e9@sub*) ((lambda (a46ec@p*) (lambda (a46ee@x) (for-all (lambda (a46f0@p) (a46f0@p a46ee@x)) a46ec@p*))) (map a4655@subversion-pred a46e9@sub*))) a46e2@ls/false) ((lambda (a46f2@t) ((lambda (a46f4@ls/false) (if (and a46f4@ls/false (apply (lambda (a46f6@p? a46f7@sub*) (eq? (a323f@syntax->datum a46f6@p?) 'or)) a46f4@ls/false)) (apply (lambda (a46fa@p? a46fb@sub*) ((lambda (a46fe@p*) (lambda (a4700@x) (exists (lambda (a4702@p) (a4702@p a4700@x)) a46fe@p*))) (map a4655@subversion-pred a46fb@sub*))) a46f4@ls/false) ((lambda (a4704@t) ((lambda (a4706@ls/false) (if (and a4706@ls/false (apply (lambda (a4708@p? a4709@sub) (eq? (a323f@syntax->datum a4708@p?) 'not)) a4706@ls/false)) (apply (lambda (a470c@p? a470d@sub) ((lambda (a4710@p) (lambda (a4712@x) (not (a4710@p a4712@x)))) (a4655@subversion-pred a470d@sub))) a4706@ls/false) ((lambda (a4714@t) ((lambda (a4716@ls/false) (if (and a4716@ls/false (apply (lambda (a4718@p? a4719@n) (and (eq? (a323f@syntax->datum a4718@p?) '<=) (a4653@subversion? a4719@n))) a4716@ls/false)) (apply (lambda (a471c@p? a471d@n) (lambda (a4720@x) (<= a4720@x (a323f@syntax->datum a471d@n)))) a4716@ls/false) ((lambda (a4722@t) ((lambda (a4724@ls/false) (if (and a4724@ls/false (apply (lambda (a4726@p? a4727@n) (and (eq? (a323f@syntax->datum a4726@p?) '>=) (a4653@subversion? a4727@n))) a4724@ls/false)) (apply (lambda (a472a@p? a472b@n) (lambda (a472e@x) (>= a472e@x (a323f@syntax->datum a472b@n)))) a4724@ls/false) ((lambda (a4730@t) ((lambda (a4732@ls/false) (if a4732@ls/false (apply (lambda () (a3239@syntax-violation 'import '"invalid sub-version spec" a4650@spec a46d4@x*)) a4732@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a4730@t))) (a3148@syntax-dispatch a4730@t '_))) a4722@t))) (a3148@syntax-dispatch a4722@t '(any any)))) a4714@t))) (a3148@syntax-dispatch a4714@t '(any any)))) a4704@t))) (a3148@syntax-dispatch a4704@t '(any any)))) a46f2@t))) (a3148@syntax-dispatch a46f2@t '(any . each-any)))) a46e0@t))) (a3148@syntax-dispatch a46e0@t '(any . each-any)))) a46d6@t))) (a3148@syntax-dispatch a46d6@t 'any))) a46d4@x*))) (set! a4657@version-pred (lambda (a4684@x*) ((lambda (a4686@t) ((lambda (a4688@ls/false) (if a4688@ls/false (apply (lambda () (lambda (a468a@x) '#t)) a4688@ls/false) ((lambda (a468c@t) ((lambda (a468e@ls/false) (if (and a468e@ls/false (apply (lambda (a4690@c a4691@ver*) (eq? (a323f@syntax->datum a4690@c) 'and)) a468e@ls/false)) (apply (lambda (a4694@c a4695@ver*) ((lambda (a4698@p*) (lambda (a469a@x) (for-all (lambda (a469c@p) (a469c@p a469a@x)) a4698@p*))) (map a4657@version-pred a4695@ver*))) a468e@ls/false) ((lambda (a469e@t) ((lambda (a46a0@ls/false) (if (and a46a0@ls/false (apply (lambda (a46a2@c a46a3@ver*) (eq? (a323f@syntax->datum a46a2@c) 'or)) a46a0@ls/false)) (apply (lambda (a46a6@c a46a7@ver*) ((lambda (a46aa@p*) (lambda (a46ac@x) (exists (lambda (a46ae@p) (a46ae@p a46ac@x)) a46aa@p*))) (map a4657@version-pred a46a7@ver*))) a46a0@ls/false) ((lambda (a46b0@t) ((lambda (a46b2@ls/false) (if (and a46b2@ls/false (apply (lambda (a46b4@c a46b5@ver) (eq? (a323f@syntax->datum a46b4@c) 'not)) a46b2@ls/false)) (apply (lambda (a46b8@c a46b9@ver) ((lambda (a46bc@p) (lambda (a46be@x) (not (a46bc@p a46be@x)))) (a4657@version-pred a46b9@ver))) a46b2@ls/false) ((lambda (a46c0@t) ((lambda (a46c2@ls/false) (if a46c2@ls/false (apply (lambda (a46c4@sub*) ((lambda (a46c6@p*) (lambda (a46c8@x) ((letrec ((a46ca@f (lambda (a46cc@p* a46cd@x) (if (null? a46cc@p*) '#t (if (null? a46cd@x) '#f ((lambda () (begin '#f (and ((car a46cc@p*) (car a46cd@x)) (a46ca@f (cdr a46cc@p*) (cdr a46cd@x))))))))))) a46ca@f) a46c6@p* a46c8@x))) (map a4655@subversion-pred a46c4@sub*))) a46c2@ls/false) ((lambda (a46d0@t) ((lambda (a46d2@ls/false) (if a46d2@ls/false (apply (lambda () (a3239@syntax-violation 'import '"invalid version spec" a4650@spec a4684@x*)) a46d2@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a46d0@t))) (a3148@syntax-dispatch a46d0@t '_))) a46c0@t))) (a3148@syntax-dispatch a46c0@t 'each-any))) a46b0@t))) (a3148@syntax-dispatch a46b0@t '(any any)))) a469e@t))) (a3148@syntax-dispatch a469e@t '(any . each-any)))) a468c@t))) (a3148@syntax-dispatch a468c@t '(any . each-any)))) a4686@t))) (a3148@syntax-dispatch a4686@t '()))) a4684@x*))) ((letrec ((a4658@f (lambda (a465a@x) ((lambda (a465c@t) ((lambda (a465e@ls/false) (if a465e@ls/false (apply (lambda (a4660@version-spec*) (values '() (a4657@version-pred a4660@version-spec*))) a465e@ls/false) ((lambda (a4662@t) ((lambda (a4664@ls/false) (if (and a4664@ls/false (apply (lambda (a4666@x a4667@x*) (a4587@idsyn? a4666@x)) a4664@ls/false)) (apply (lambda (a466a@x a466b@x*) (call-with-values (lambda () (a4658@f a466b@x*)) (lambda (a4672@a466f a4673@a4671) ((lambda (a4676@pred a4677@name) (values (cons (a323f@syntax->datum a466a@x) a4677@name) a4676@pred)) a4673@a4671 a4672@a466f)))) a4664@ls/false) ((lambda (a467a@t) ((lambda (a467c@ls/false) (if a467c@ls/false (apply (lambda () (values '() (lambda (a467e@x) '#t))) a467c@ls/false) ((lambda (a4680@t) ((lambda (a4682@ls/false) (if a4682@ls/false (apply (lambda () (a3239@syntax-violation '#f '"invalid import spec" a4650@spec)) a4682@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a4680@t))) (a3148@syntax-dispatch a4680@t '_))) a467a@t))) (a3148@syntax-dispatch a467a@t '()))) a4662@t))) (a3148@syntax-dispatch a4662@t '(any . any)))) a465c@t))) (a3148@syntax-dispatch a465c@t '(each-any)))) a465a@x)))) a4658@f) a4650@spec))) '#f '#f '#f))) (set! a4597@import-library (lambda (a4640@spec*) (call-with-values (lambda () (a4595@parse-library-name a4640@spec*)) (lambda (a4646@a4643 a4647@a4645) ((lambda (a464a@pred a464b@name) (begin (if (null? a464b@name) (a3239@syntax-violation 'import '"empty library name" a4640@spec*) (void)) ((lambda (a464e@lib) (begin (if (not a464e@lib) (a3239@syntax-violation 'import '"cannot find library with required name" a464b@name) (void)) (if (not (a464a@pred (a2d43@a2b8f@library-version a464e@lib))) (a3239@syntax-violation 'import '"library does not satisfy version specification" a4640@spec* a464e@lib) (void)) ((a31bb@imp-collector) a464e@lib) (a2d47@a2b97@library-subst a464e@lib))) (a2d6f@a2be7@find-library-by-name a464b@name)))) a4647@a4645 a4646@a4643))))) (set! a4599@get-import (lambda (a45b2@spec) ((lambda (a45b4@t) ((lambda (a45b6@ls/false) (if (and a45b6@ls/false (apply (lambda (a45b8@x a45b9@x*) (not (memq (a323f@syntax->datum a45b8@x) '(for rename except only prefix library)))) a45b6@ls/false)) (apply (lambda (a45bc@x a45bd@x*) (a4597@import-library (cons a45bc@x a45bd@x*))) a45b6@ls/false) ((lambda (a45c0@t) ((lambda (a45c2@ls/false) (if (and a45c2@ls/false (apply (lambda (a45c4@rename a45c5@isp a45c6@old* a45c7@new*) (and (eq? (a323f@syntax->datum a45c4@rename) 'rename) (for-all a4587@idsyn? a45c6@old*) (for-all a4587@idsyn? a45c7@new*))) a45c2@ls/false)) (apply (lambda (a45cc@rename a45cd@isp a45ce@old* a45cf@new*) ((lambda (a45d4@subst a45d5@old* a45d6@new*) ((lambda (a45da@old-label*) ((lambda (a45dc@subst) (a458b@merge-substs (map cons a45d6@new* a45da@old-label*) a45dc@subst)) (a4591@rem* a45d5@old* a45d4@subst))) (a458f@find* a45d5@old* a45d4@subst))) (a4599@get-import a45cd@isp) (map a323f@syntax->datum a45ce@old*) (map a323f@syntax->datum a45cf@new*))) a45c2@ls/false) ((lambda (a45de@t) ((lambda (a45e0@ls/false) (if (and a45e0@ls/false (apply (lambda (a45e2@except a45e3@isp a45e4@sym*) (and (eq? (a323f@syntax->datum a45e2@except) 'except) (for-all a4587@idsyn? a45e4@sym*))) a45e0@ls/false)) (apply (lambda (a45e8@except a45e9@isp a45ea@sym*) ((lambda (a45ee@subst) (a4591@rem* (map a323f@syntax->datum a45ea@sym*) a45ee@subst)) (a4599@get-import a45e9@isp))) a45e0@ls/false) ((lambda (a45f0@t) ((lambda (a45f2@ls/false) (if (and a45f2@ls/false (apply (lambda (a45f4@only a45f5@isp a45f6@sym*) (and (eq? (a323f@syntax->datum a45f4@only) 'only) (for-all a4587@idsyn? a45f6@sym*))) a45f2@ls/false)) (apply (lambda (a45fa@only a45fb@isp a45fc@sym*) ((lambda (a4600@subst a4601@sym*) ((lambda (a4604@sym*) ((lambda (a4606@lab*) (map cons a4604@sym* a4606@lab*)) (a458f@find* a4604@sym* a4600@subst))) (a4593@remove-dups a4601@sym*))) (a4599@get-import a45fb@isp) (map a323f@syntax->datum a45fc@sym*))) a45f2@ls/false) ((lambda (a4608@t) ((lambda (a460a@ls/false) (if (and a460a@ls/false (apply (lambda (a460c@prefix a460d@isp a460e@p) (and (eq? (a323f@syntax->datum a460c@prefix) 'prefix) (a4587@idsyn? a460e@p))) a460a@ls/false)) (apply (lambda (a4612@prefix a4613@isp a4614@p) ((lambda (a4618@subst a4619@prefix) (map (lambda (a461c@x) (cons (string->symbol (string-append a4619@prefix (symbol->string (car a461c@x)))) (cdr a461c@x))) a4618@subst)) (a4599@get-import a4613@isp) (symbol->string (a323f@syntax->datum a4614@p)))) a460a@ls/false) ((lambda (a461e@t) ((lambda (a4620@ls/false) (if (and a4620@ls/false (apply (lambda (a4622@library a4623@spec*) (eq? (a323f@syntax->datum a4622@library) 'library)) a4620@ls/false)) (apply (lambda (a4626@library a4627@spec*) (a4597@import-library a4627@spec*)) a4620@ls/false) ((lambda (a462a@t) ((lambda (a462c@ls/false) (if (and a462c@ls/false (apply (lambda (a462e@for a462f@isp a4630@rest) (eq? (a323f@syntax->datum a462e@for) 'for)) a462c@ls/false)) (apply (lambda (a4634@for a4635@isp a4636@rest) (a4599@get-import a4635@isp)) a462c@ls/false) ((lambda (a463a@t) ((lambda (a463c@ls/false) (if a463c@ls/false (apply (lambda (a463e@spec) (a3239@syntax-violation 'import '"invalid import spec" a463e@spec)) a463c@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a463a@t))) (a3148@syntax-dispatch a463a@t 'any))) a462a@t))) (a3148@syntax-dispatch a462a@t '(any any . any)))) a461e@t))) (a3148@syntax-dispatch a461e@t '(any each-any)))) a4608@t))) (a3148@syntax-dispatch a4608@t '(any any any)))) a45f0@t))) (a3148@syntax-dispatch a45f0@t '(any any . each-any)))) a45de@t))) (a3148@syntax-dispatch a45de@t '(any any . each-any)))) a45c0@t))) (a3148@syntax-dispatch a45c0@t '(any any . #(each (any any)))))) a45b4@t))) (a3148@syntax-dispatch a45b4@t '(any . each-any)))) a45b2@spec))) (set! a459b@add-imports! (lambda (a45a2@imp a45a3@h) ((lambda (a45a6@subst) (for-each (lambda (a45a8@x) ((lambda (a45aa@name a45ab@label) ((lambda (a45ae@t) (if a45ae@t ((lambda (a45b0@l) (if (not (eq? a45b0@l a45ab@label)) (a4589@dup-error a45aa@name) (void))) a45ae@t) ((lambda () (begin '#f (hashtable-set! a45a3@h a45aa@name a45ab@label)))))) (hashtable-ref a45a3@h a45aa@name '#f))) (car a45a8@x) (cdr a45a8@x))) a45a6@subst)) (a4599@get-import a45a2@imp)))) ((letrec ((a459c@f (lambda (a459e@imp* a459f@h) (if (null? a459e@imp*) (hashtable-entries a459f@h) ((lambda () (begin '#f (a459b@add-imports! (car a459e@imp*) a459f@h) (a459c@f (cdr a459e@imp*) a459f@h)))))))) a459c@f) a4584@imp* (make-eq-hashtable)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! a31b3@make-top-rib (lambda (a4790@names a4791@labels) ((lambda (a4794@rib) (begin (vector-for-each (lambda (a4796@name a4797@label) (begin (if (not (symbol? a4796@name)) (error 'make-top-rib '"BUG: not a symbol" a4796@name) (void)) (a2ef4@extend-rib! a4794@rib (a2f0b@make-stx a4796@name a2ec1@top-mark* '() '()) a4797@label '#t))) a4790@names a4791@labels) a4794@rib)) (a2ef0@make-empty-rib)))) (set! a31b5@make-collector (lambda () ((lambda (a479a@ls) (lambda a479e ((lambda (a479f) (if (= a479f '0) (apply (lambda () a479a@ls) a479e) (if (= a479f '1) (apply (lambda (a479c@x) (if (not (eq? a479c@x '*interaction*)) (set! a479a@ls (a2eba@set-cons a479c@x a479a@ls)) (void))) a479e) (error 'apply '"invalid arg count")))) (length a479e)))) '()))) (set! a31b7@inv-collector (a2ad0@a299d@make-parameter (lambda a47a0@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (a47a2@x) (begin (if (not (procedure? a47a2@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" a47a2@x) (void)) a47a2@x)))) (set! a31b9@vis-collector (a2ad0@a299d@make-parameter (lambda a47a4@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (a47a6@x) (begin (if (not (procedure? a47a6@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" a47a6@x) (void)) a47a6@x)))) (set! a31bb@imp-collector (a2ad0@a299d@make-parameter (lambda a47a8@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (a47aa@x) (begin (if (not (procedure? a47aa@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" a47aa@x) (void)) a47aa@x)))) (set! a31bd@chi-library-internal (lambda (a47ac@e* a47ad@rib a47ae@mix?) (call-with-values (lambda () (a31a7@chi-body* a47ac@e* '() '() '() '() '() '() '() a47ad@rib a47ae@mix? '#t)) (lambda (a47c2@a47b3 a47c3@a47b5 a47c4@a47b7 a47c5@a47b9 a47c6@a47bb a47c7@a47bd a47c8@a47bf a47c9@a47c1) ((lambda (a47d2@exp* a47d3@_kwd* a47d4@mod** a47d5@rhs* a47d6@lex* a47d7@mr a47d8@r a47d9@e*) (values (append (apply append (reverse a47d4@mod**)) a47d9@e*) a47d8@r a47d7@mr (reverse a47d6@lex*) (reverse a47d5@rhs*) a47d2@exp*)) a47c9@a47c1 a47c8@a47bf a47c7@a47bd a47c6@a47bb a47c5@a47b9 a47c4@a47b7 a47c3@a47b5 a47c2@a47b3))))) (set! a31bf@chi-interaction-expr (lambda (a47e2@e a47e3@rib a47e4@r) (call-with-values (lambda () (a31a7@chi-body* (list a47e2@e) a47e4@r a47e4@r '() '() '() '() '() a47e3@rib '#t '#f)) (lambda (a47f8@a47e9 a47f9@a47eb a47fa@a47ed a47fb@a47ef a47fc@a47f1 a47fd@a47f3 a47fe@a47f5 a47ff@a47f7) ((lambda (a4808@_exp* a4809@_kwd* a480a@mod** a480b@rhs* a480c@lex* a480d@mr a480e@r a480f@e*) ((lambda (a4818@e*) ((lambda (a481a@e) (values a481a@e a480e@r)) (if (null? a4818@e*) (a2ea9@a2e02@build-void) (if (null? (cdr a4818@e*)) (car a4818@e*) ((lambda () (begin '#f (a2ea8@a2e00@build-sequence '#f a4818@e*)))))))) (a317a@expand-interaction-rhs*/init* (reverse a480c@lex*) (reverse a480b@rhs*) (append (apply append (reverse a480a@mod**)) a480f@e*) a480e@r a480d@mr))) a47ff@a47f7 a47fe@a47f5 a47fd@a47f3 a47fc@a47f1 a47fb@a47ef a47fa@a47ed a47f9@a47eb a47f8@a47e9))))) (set! a31c1@library-body-expander (lambda (a481c@main-exp* a481d@imp* a481e@b* a481f@mix?) ((lambda (a4825@itc) (begin (set! a4825@itc (a31b5@make-collector)) ((lambda (a482e@a4827 a482f@a4829 a4830@a482b a4831@a482d) ((lambda (a4836@swap) (dynamic-wind a4836@swap (lambda () (call-with-values (lambda () (a31b1@parse-import-spec* a481d@imp*)) (lambda (a483c@a4839 a483d@a483b) ((lambda (a4840@subst-labels a4841@subst-names) ((lambda (a4844@rib) ((lambda (a4847@wrap) (begin (set! a4847@wrap (lambda (a48c0@x) (a2f0b@make-stx a48c0@x a2ec1@top-mark* (list a4844@rib) '()))) ((lambda (a4848@b* a4849@rtc a484a@vtc) ((lambda (a4856@a484f a4857@a4851 a4858@a4853 a4859@a4855) ((lambda (a485e@swap) (dynamic-wind a485e@swap (lambda () (call-with-values (lambda () (a31bd@chi-library-internal a4848@b* a4844@rib a481f@mix?)) (lambda (a486c@a4861 a486d@a4863 a486e@a4865 a486f@a4867 a4870@a4869 a4871@a486b) ((lambda (a4878@internal-exp* a4879@rhs* a487a@lex* a487b@mr a487c@r a487d@init*) (call-with-values (lambda () (a31ab@parse-exports (if (eq? a481c@main-exp* 'all) (map a4847@wrap (a2ef2@top-marked-symbols a4844@rib)) (append (map a4847@wrap a481c@main-exp*) a4878@internal-exp*)))) (lambda (a4888@a4885 a4889@a4887) ((lambda (a488c@exp-id* a488d@exp-name*) (begin (a2ef6@seal-rib! a4844@rib) ((lambda (a4890@init*) ((lambda (a4892@rhs*) ((lambda () (begin (a2ef8@unseal-rib! a4844@rib) ((lambda (a4894@loc* a4895@export-subst) ((lambda (a4899@errstr) (begin (set! a4899@errstr '"attempt to export mutated variable") (call-with-values (lambda () (a3221@make-export-env/macros a487a@lex* a4894@loc* a487c@r)) (lambda (a48a0@a489b a48a1@a489d a48a2@a489f) ((lambda (a48a6@macro* a48a7@global* a48a8@export-env) (begin (if (not (eq? a481c@main-exp* 'all)) (for-each (lambda (a48ac@s) ((lambda (a48ae@name a48af@label) ((lambda (a48b2@p) (if a48b2@p ((lambda (a48b4@b) ((lambda (a48b6@type) (if (eq? a48b6@type 'mutable) (a3239@syntax-violation 'export a4899@errstr a48ae@name) (void))) (car a48b4@b))) (cdr a48b2@p)) (void))) (assq a48af@label a48a8@export-env))) (car a48ac@s) (cdr a48ac@s))) a4895@export-subst) (void)) ((lambda (a48b8@invoke-body a48b9@invoke-definitions) (values (a4825@itc) (a4849@rtc) (a484a@vtc) (a2ea8@a2e00@build-sequence '#f (append a48b9@invoke-definitions (list a48b8@invoke-body))) a48a6@macro* a4895@export-subst a48a8@export-env)) (a2eac@a2e08@build-library-letrec* '#f a481f@mix? a487a@lex* a4894@loc* a4892@rhs* (if (null? a4890@init*) (a2ea9@a2e02@build-void) (a2ea8@a2e00@build-sequence '#f a4890@init*))) (map a2ea3@a2d7e@build-global-define (map cdr a48a7@global*))))) a48a2@a489f a48a1@a489d a48a0@a489b))))) '#f)) (map a2ec7@gen-global a487a@lex*) (a321f@make-export-subst a488d@exp-name* a488c@exp-id*)))))) (a317c@chi-rhs* a4879@rhs* a487c@r a487b@mr))) (a3168@chi-expr* a487d@init* a487c@r a487b@mr)))) a4889@a4887 a4888@a4885)))) a4871@a486b a4870@a4869 a486f@a4867 a486e@a4865 a486d@a4863 a486c@a4861)))) a485e@swap)) (lambda () (begin ((lambda (a48bc@t) (begin (a4856@a484f a4858@a4853) (set! a4858@a4853 a48bc@t))) (a4856@a484f)) ((lambda (a48be@t) (begin (a4857@a4851 a4859@a4855) (set! a4859@a4855 a48be@t))) (a4857@a4851)))))) a31b7@inv-collector a31b9@vis-collector a4849@rtc a484a@vtc)) (map a4847@wrap a481e@b*) (a31b5@make-collector) (a31b5@make-collector)))) '#f)) (a31b3@make-top-rib a4841@subst-names a4840@subst-labels))) a483d@a483b a483c@a4839)))) a4836@swap)) (lambda () (begin ((lambda (a48c2@t) (begin (a482e@a4827 a4830@a482b) (set! a4830@a482b a48c2@t))) (a482e@a4827)) ((lambda (a48c4@t) (begin (a482f@a4829 a4831@a482d) (set! a4831@a482d a48c4@t))) (a482f@a4829)))))) a31bb@imp-collector a324b@top-level-context a4825@itc '#f))) '#f))) (set! a31c3@stale-when-collector (a2ad0@a299d@make-parameter '#f)) (set! a31c5@make-stale-collector (lambda () ((lambda (a48c6@code a48c7@req*) (lambda a48ce ((lambda (a48cf) (if (= a48cf '0) (apply (lambda () (values a48c6@code a48c7@req*)) a48ce) (if (= a48cf '2) (apply (lambda (a48ca@c a48cb@r*) (begin (set! a48c6@code (list 'if a48c6@code (list 'quote '#t) a48ca@c)) (set! a48c7@req* (a2ebc@set-union a48cb@r* a48c7@req*)))) a48ce) (error 'apply '"invalid arg count")))) (length a48ce)))) (list 'quote '#f) '()))) (set! a31c7@handle-stale-when (lambda (a48d0@guard-expr a48d1@mr) ((lambda (a48d4@stc) ((lambda (a48d6@core-expr) ((lambda (a48d8@t) (if a48d8@t ((lambda (a48da@c) (a48da@c a48d6@core-expr (a48d4@stc))) a48d8@t) (void))) (a31c3@stale-when-collector))) ((lambda (a48e0@a48dd a48e1@a48df) ((lambda (a48e4@swap) (dynamic-wind a48e4@swap (lambda () (a316c@chi-expr a48d0@guard-expr a48d1@mr a48d1@mr)) a48e4@swap)) (lambda () ((lambda (a48e6@t) (begin (a48e0@a48dd a48e1@a48df) (set! a48e1@a48df a48e6@t))) (a48e0@a48dd))))) a31b7@inv-collector a48d4@stc))) (a31b5@make-collector)))) (set! a31c9@core-library-expander (lambda (a48e8@e a48e9@verify-name) (call-with-values (lambda () (a31af@parse-library a48e8@e)) (lambda (a48f4@a48ed a48f5@a48ef a48f6@a48f1 a48f7@a48f3) ((lambda (a48fc@b* a48fd@imp* a48fe@exp* a48ff@name*) (call-with-values (lambda () (a31ad@parse-library-name a48ff@name*)) (lambda (a4908@a4905 a4909@a4907) ((lambda (a490c@ver a490d@name) (begin (a48e9@verify-name a490d@name) ((lambda (a4910@c) (call-with-values (lambda () ((lambda (a4924@a4921 a4925@a4923) ((lambda (a4928@swap) (dynamic-wind a4928@swap (lambda () (a31c1@library-body-expander a48fe@exp* a48fd@imp* a48fc@b* '#f)) a4928@swap)) (lambda () ((lambda (a492a@t) (begin (a4924@a4921 a4925@a4923) (set! a4925@a4923 a492a@t))) (a4924@a4921))))) a31c3@stale-when-collector a4910@c)) (lambda (a492c@a4913 a492d@a4915 a492e@a4917 a492f@a4919 a4930@a491b a4931@a491d a4932@a491f) ((lambda (a493a@export-env a493b@export-subst a493c@visit-code a493d@invoke-code a493e@visit-req* a493f@invoke-req* a4940@imp*) (call-with-values (lambda () (a4910@c)) (lambda (a494c@a4949 a494d@a494b) ((lambda (a4950@guard-req* a4951@guard-code) (values a490d@name a490c@ver a4940@imp* a493f@invoke-req* a493e@visit-req* a493d@invoke-code a493c@visit-code a493b@export-subst a493a@export-env a4951@guard-code a4950@guard-req*)) a494d@a494b a494c@a4949)))) a4932@a491f a4931@a491d a4930@a491b a492f@a4919 a492e@a4917 a492d@a4915 a492c@a4913)))) (a31c5@make-stale-collector)))) a4909@a4907 a4908@a4905)))) a48f7@a48f3 a48f6@a48f1 a48f5@a48ef a48f4@a48ed))))) (set! a31cb@parse-top-level-program (lambda (a4954@e*) ((lambda (a4956@t) ((lambda (a4958@ls/false) (if (and a4958@ls/false (apply (lambda (a495a@import a495b@imp* a495c@b*) (eq? (a323f@syntax->datum a495a@import) 'import)) a4958@ls/false)) (apply (lambda (a4960@import a4961@imp* a4962@b*) (values a4961@imp* a4962@b*)) a4958@ls/false) ((lambda (a4966@t) ((lambda (a4968@ls/false) (if (and a4968@ls/false (apply (lambda (a496a@import a496b@x a496c@y) (eq? (a323f@syntax->datum a496a@import) 'import)) a4968@ls/false)) (apply (lambda (a4970@import a4971@x a4972@y) (a3239@syntax-violation 'expander '"invalid syntax of top-level program" (a2f3b@syntax-car a4954@e*))) a4968@ls/false) ((lambda (a4976@t) ((lambda (a4978@ls/false) (if a4978@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) a4978@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a4976@t))) (a3148@syntax-dispatch a4976@t '_))) a4966@t))) (a3148@syntax-dispatch a4966@t '((any . any) . any)))) a4956@t))) (a3148@syntax-dispatch a4956@t '((any . each-any) . each-any)))) a4954@e*))) (set! a31d1@a31cc (make-record-type-descriptor 'env '#f 'a31cf '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! a31d3@a31ce '#f) (set! a31d5@a31cd (make-record-constructor-descriptor a31d1@a31cc '#f a31d3@a31ce)) (set! a31d8@env? (record-predicate a31d1@a31cc)) (set! a31da@make-env (record-constructor a31d5@a31cd)) (set! a31dc@env-names (record-accessor a31d1@a31cc '0)) (set! a31de@env-labels (record-accessor a31d1@a31cc '1)) (set! a31e0@env-itc (record-accessor a31d1@a31cc '2)) (set! a31e2@set-env-names! (record-mutator a31d1@a31cc '0)) (set! a31e4@set-env-labels! (record-mutator a31d1@a31cc '1)) (set! a31e6@set-env-itc! (record-mutator a31d1@a31cc '2)) (set! a31e8@rp (a2ab3@a295b@make-record-printer 'env (lambda (a497a@x a497b@p a497c@wr) (display '"#<environment>" a497b@p)))) (set! a31ee@a31e9 (make-record-type-descriptor 'interaction-env '#f 'a31ec '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! a31f0@a31eb '#f) (set! a31f2@a31ea (make-record-constructor-descriptor a31ee@a31e9 '#f a31f0@a31eb)) (set! a31f5@interaction-env? (record-predicate a31ee@a31e9)) (set! a31f7@make-interaction-env (record-constructor a31f2@a31ea)) (set! a31f9@interaction-env-rib (record-accessor a31ee@a31e9 '0)) (set! a31fb@interaction-env-r (record-accessor a31ee@a31e9 '1)) (set! a31fd@interaction-env-locs (record-accessor a31ee@a31e9 '2)) (set! a31ff@set-interaction-env-rib! (record-mutator a31ee@a31e9 '0)) (set! a3201@set-interaction-env-r! (record-mutator a31ee@a31e9 '1)) (set! a3203@set-interaction-env-locs! (record-mutator a31ee@a31e9 '2)) (set! a3205@rp (a2ab3@a295b@make-record-printer 'interaction-env (lambda (a4980@x a4981@p a4982@wr) (display '"#<environment>" a4981@p)))) (set! a3207@environment? (lambda (a4986@x) (or (a31d8@env? a4986@x) (a31f5@interaction-env? a4986@x)))) (set! a3209@environment-symbols (lambda (a4988@x) (if (a31d8@env? a4988@x) (vector->list (a31dc@env-names a4988@x)) (if (a31f5@interaction-env? a4988@x) (map values (a2ee0@rib-sym* (a31f9@interaction-env-rib a4988@x))) ((lambda () (begin '#f (assertion-violation 'environment-symbols '"not an environment" a4988@x)))))))) (set! a320b@environment (lambda a498a@imp* ((lambda (a498c@itc) ((lambda (a4992@a498f a4993@a4991) ((lambda (a4996@swap) (dynamic-wind a4996@swap (lambda () (call-with-values (lambda () (a31b1@parse-import-spec* a498a@imp*)) (lambda (a499c@a4999 a499d@a499b) ((lambda (a49a0@subst-labels a49a1@subst-names) (a31da@make-env a49a1@subst-names a49a0@subst-labels a498c@itc)) a499d@a499b a499c@a4999)))) a4996@swap)) (lambda () ((lambda (a49a4@t) (begin (a4992@a498f a4993@a4991) (set! a4993@a4991 a49a4@t))) (a4992@a498f))))) a31bb@imp-collector a498c@itc)) (a31b5@make-collector)))) (set! a320d@null-environment (lambda (a49a6@n) (begin (if (not (eqv? a49a6@n '5)) (assertion-violation 'null-environment '"not 5" a49a6@n) (void)) (a320b@environment '(psyntax null-environment-5))))) (set! a320f@scheme-report-environment (lambda (a49a8@n) (begin (if (not (eqv? a49a8@n '5)) (assertion-violation 'scheme-report-environment '"not 5" a49a8@n) (void)) (a320b@environment '(psyntax scheme-report-environment-5))))) (set! a3211@core-expand (lambda (a49aa@x a49ab@env) (if (a31d8@env? a49ab@env) ((lambda (a49ae@rib) ((lambda (a49b0@x a49b1@itc a49b2@rtc a49b3@vtc) ((lambda (a49b8@x) (begin (a2ef6@seal-rib! a49ae@rib) (values a49b8@x (a49b2@rtc)))) ((lambda (a49ca@a49bb a49cb@a49bd a49cc@a49bf a49cd@a49c1 a49ce@a49c3 a49cf@a49c5 a49d0@a49c7 a49d1@a49c9) ((lambda (a49da@swap) (dynamic-wind a49da@swap (lambda () (a316c@chi-expr a49b0@x '() '())) a49da@swap)) (lambda () (begin ((lambda (a49dc@t) (begin (a49ca@a49bb a49ce@a49c3) (set! a49ce@a49c3 a49dc@t))) (a49ca@a49bb)) ((lambda (a49de@t) (begin (a49cb@a49bd a49cf@a49c5) (set! a49cf@a49c5 a49de@t))) (a49cb@a49bd)) ((lambda (a49e0@t) (begin (a49cc@a49bf a49d0@a49c7) (set! a49d0@a49c7 a49e0@t))) (a49cc@a49bf)) ((lambda (a49e2@t) (begin (a49cd@a49c1 a49d1@a49c9) (set! a49d1@a49c9 a49e2@t))) (a49cd@a49c1)))))) a324b@top-level-context a31b7@inv-collector a31b9@vis-collector a31bb@imp-collector '#f a49b2@rtc a49b3@vtc a49b1@itc))) (a2f0b@make-stx a49aa@x a2ec1@top-mark* (list a49ae@rib) '()) (a31e0@env-itc a49ab@env) (a31b5@make-collector) (a31b5@make-collector))) (a31b3@make-top-rib (a31dc@env-names a49ab@env) (a31de@env-labels a49ab@env))) (if (a31f5@interaction-env? a49ab@env) ((lambda (a49e4@rib a49e5@r a49e6@rtc) ((lambda (a49ea@x) (call-with-values (lambda () ((lambda (a4a00@a49f1 a4a01@a49f3 a4a02@a49f5 a4a03@a49f7 a4a04@a49f9 a4a05@a49fb a4a06@a49fd a4a07@a49ff) ((lambda (a4a10@swap) (dynamic-wind a4a10@swap (lambda () (a31bf@chi-interaction-expr a49ea@x a49e4@rib a49e5@r)) a4a10@swap)) (lambda () (begin ((lambda (a4a12@t) (begin (a4a00@a49f1 a4a04@a49f9) (set! a4a04@a49f9 a4a12@t))) (a4a00@a49f1)) ((lambda (a4a14@t) (begin (a4a01@a49f3 a4a05@a49fb) (set! a4a05@a49fb a4a14@t))) (a4a01@a49f3)) ((lambda (a4a16@t) (begin (a4a02@a49f5 a4a06@a49fd) (set! a4a06@a49fd a4a16@t))) (a4a02@a49f5)) ((lambda (a4a18@t) (begin (a4a03@a49f7 a4a07@a49ff) (set! a4a07@a49ff a4a18@t))) (a4a03@a49f7)))))) a324b@top-level-context a31b7@inv-collector a31b9@vis-collector a31bb@imp-collector a49ab@env a49e6@rtc (a31b5@make-collector) (a31b5@make-collector))) (lambda (a4a1a@a49ed a4a1b@a49ef) ((lambda (a4a1e@r^ a4a1f@e) (begin (a3201@set-interaction-env-r! a49ab@env a4a1e@r^) (values a4a1f@e (a49e6@rtc)))) a4a1b@a49ef a4a1a@a49ed)))) (a2f0b@make-stx a49aa@x a2ec1@top-mark* (list a49e4@rib) '()))) (a31f9@interaction-env-rib a49ab@env) (a31fb@interaction-env-r a49ab@env) (a31b5@make-collector)) ((lambda () (begin '#f (assertion-violation 'expand '"not an environment" a49ab@env)))))))) (set! a3213@eval (lambda (a4a22@x a4a23@env) (begin (if (not (a3207@environment? a4a23@env)) (error 'eval '"not an environment" a4a23@env) (void)) (call-with-values (lambda () (a3211@core-expand a4a22@x a4a23@env)) (lambda (a4a2a@a4a27 a4a2b@a4a29) ((lambda (a4a2e@invoke-req* a4a2f@x) (begin (for-each a2d77@a2bf7@invoke-library a4a2e@invoke-req*) (eval-core (a2b17@a2ad7@expanded->core a4a2f@x)))) a4a2b@a4a29 a4a2a@a4a27)))))) (set! a3215@initial-visit! (lambda (a4a32@macro*) (for-each (lambda (a4a34@x) ((lambda (a4a36@loc a4a37@proc) (set-symbol-value! a4a36@loc a4a37@proc)) (car a4a34@x) (cadr a4a34@x))) a4a32@macro*))) (set! a3217@library-expander (lambda a4aac ((lambda (a4aad) (if (= a4aad '3) (apply (lambda (a4a3a@x a4a3b@filename a4a3c@verify-name) ((lambda (a4a41@build-visit-code) (begin (set! a4a41@build-visit-code (lambda (a4a9a@macro*) (if (null? a4a9a@macro*) (a2ea9@a2e02@build-void) (a2ea8@a2e00@build-sequence '#f (map (lambda (a4a9c@x) ((lambda (a4a9e@loc a4a9f@src) (list 'set! a4a9e@loc a4a9f@src)) (car a4a9c@x) (cddr a4a9c@x))) a4a9a@macro*))))) (call-with-values (lambda () (a31c9@core-library-expander a4a3a@x a4a3c@verify-name)) (lambda (a4a58@a4a43 a4a59@a4a45 a4a5a@a4a47 a4a5b@a4a49 a4a5c@a4a4b a4a5d@a4a4d a4a5e@a4a4f a4a5f@a4a51 a4a60@a4a53 a4a61@a4a55 a4a62@a4a57) ((lambda (a4a6e@guard-req* a4a6f@guard-code a4a70@export-env a4a71@export-subst a4a72@macro* a4a73@invoke-code a4a74@vis* a4a75@inv* a4a76@imp* a4a77@ver a4a78@name) ((lambda (a4a84@id a4a85@name a4a86@ver a4a87@imp* a4a88@vis* a4a89@inv* a4a8a@guard-req* a4a8b@visit-proc a4a8c@invoke-proc a4a8d@visit-code a4a8e@invoke-code) (begin (a2d75@a2bf3@install-library a4a84@id a4a85@name a4a86@ver a4a87@imp* a4a88@vis* a4a89@inv* a4a71@export-subst a4a70@export-env a4a8b@visit-proc a4a8c@invoke-proc a4a8d@visit-code a4a8e@invoke-code a4a6f@guard-code a4a8a@guard-req* '#t a4a3b@filename) (values a4a84@id a4a85@name a4a86@ver a4a87@imp* a4a88@vis* a4a89@inv* a4a8e@invoke-code a4a8d@visit-code a4a71@export-subst a4a70@export-env a4a6f@guard-code a4a8a@guard-req*))) (gensym) a4a78@name a4a77@ver (map a2d7b@a2bff@library-spec a4a76@imp*) (map a2d7b@a2bff@library-spec a4a74@vis*) (map a2d7b@a2bff@library-spec a4a75@inv*) (map a2d7b@a2bff@library-spec a4a6e@guard-req*) (lambda () (a3215@initial-visit! a4a72@macro*)) (lambda () (eval-core (a2b17@a2ad7@expanded->core a4a73@invoke-code))) (a4a41@build-visit-code a4a72@macro*) a4a73@invoke-code)) a4a62@a4a57 a4a61@a4a55 a4a60@a4a53 a4a5f@a4a51 a4a5e@a4a4f a4a5d@a4a4d a4a5c@a4a4b a4a5b@a4a49 a4a5a@a4a47 a4a59@a4a45 a4a58@a4a43))))) '#f)) a4aac) (if (= a4aad '2) (apply (lambda (a4aa2@x a4aa3@filename) (a3217@library-expander a4aa2@x a4aa3@filename (lambda (a4aa6@x) (values)))) a4aac) (if (= a4aad '1) (apply (lambda (a4aa8@x) (a3217@library-expander a4aa8@x '#f (lambda (a4aaa@x) (values)))) a4aac) (error 'apply '"invalid arg count"))))) (length a4aac)))) (set! a3219@boot-library-expand (lambda (a4aae@x) (call-with-values (lambda () (a3217@library-expander a4aae@x)) (lambda (a4ac8@a4ab1 a4ac9@a4ab3 a4aca@a4ab5 a4acb@a4ab7 a4acc@a4ab9 a4acd@a4abb a4ace@a4abd a4acf@a4abf a4ad0@a4ac1 a4ad1@a4ac3 a4ad2@a4ac5 a4ad3@a4ac7) ((lambda (a4ae0@guard-dep* a4ae1@guard-code a4ae2@export-env a4ae3@export-subst a4ae4@visit-code a4ae5@invoke-code a4ae6@inv* a4ae7@vis* a4ae8@imp* a4ae9@ver a4aea@name a4aeb@id) (values a4aea@name a4ae5@invoke-code a4ae3@export-subst a4ae2@export-env)) a4ad3@a4ac7 a4ad2@a4ac5 a4ad1@a4ac3 a4ad0@a4ac1 a4acf@a4abf a4ace@a4abd a4acd@a4abb a4acc@a4ab9 a4acb@a4ab7 a4aca@a4ab5 a4ac9@a4ab3 a4ac8@a4ab1))))) (set! a321b@rev-map-append (lambda (a4af8@f a4af9@ls a4afa@ac) (if (null? a4af9@ls) a4afa@ac ((lambda () (begin '#f (a321b@rev-map-append a4af8@f (cdr a4af9@ls) (cons (a4af8@f (car a4af9@ls)) a4afa@ac)))))))) (set! a321d@build-exports (lambda (a4afe@lex*+loc* a4aff@init*) (a2ea8@a2e00@build-sequence '#f (cons (a2ea9@a2e02@build-void) (a321b@rev-map-append (lambda (a4b02@x) (list 'set! (cdr a4b02@x) (car a4b02@x))) a4afe@lex*+loc* a4aff@init*))))) (set! a321f@make-export-subst (lambda (a4b04@name* a4b05@id*) (map (lambda (a4b08@name a4b09@id) ((lambda (a4b0c@label) (begin (if (not a4b0c@label) (a3239@syntax-violation '#f '"cannot export unbound identifier" a4b09@id) (void)) (cons a4b08@name a4b0c@label))) (a2f5b@id->label a4b09@id))) a4b04@name* a4b05@id*))) (set! a3221@make-export-env/macros (lambda (a4b0e@lex* a4b0f@loc* a4b10@r) ((lambda (a4b15@lookup) (begin (set! a4b15@lookup (lambda (a4b34@x) ((letrec ((a4b36@f (lambda (a4b38@x a4b39@lex* a4b3a@loc*) (if (pair? a4b39@lex*) (if (eq? a4b38@x (car a4b39@lex*)) (car a4b3a@loc*) (a4b36@f a4b38@x (cdr a4b39@lex*) (cdr a4b3a@loc*))) ((lambda () (begin '#f (assertion-violation 'lookup-make-export '"BUG")))))))) a4b36@f) a4b34@x a4b0e@lex* a4b0f@loc*))) ((letrec ((a4b16@f (lambda (a4b18@r a4b19@env a4b1a@global* a4b1b@macro*) (if (null? a4b18@r) (values a4b19@env a4b1a@global* a4b1b@macro*) ((lambda () (begin '#f ((lambda (a4b20@x) ((lambda (a4b22@label a4b23@b) ((lambda (a4b26@t) (if (memv a4b26@t '(lexical)) ((lambda (a4b28@v) ((lambda (a4b2a@loc a4b2b@type) (a4b16@f (cdr a4b18@r) (cons (cons* a4b22@label a4b2b@type a4b2a@loc) a4b19@env) (cons (cons (a30d8@lexical-var a4b28@v) a4b2a@loc) a4b1a@global*) a4b1b@macro*)) (a4b15@lookup (a30d8@lexical-var a4b28@v)) (if (a30da@lexical-mutable? a4b28@v) 'mutable 'global))) (a2f63@binding-value a4b23@b)) (if (memv a4b26@t '(local-macro)) ((lambda (a4b2e@loc) (a4b16@f (cdr a4b18@r) (cons (cons* a4b22@label 'global-macro a4b2e@loc) a4b19@env) a4b1a@global* (cons (cons a4b2e@loc (a2f63@binding-value a4b23@b)) a4b1b@macro*))) (gensym)) (if (memv a4b26@t '(local-macro!)) ((lambda (a4b30@loc) (a4b16@f (cdr a4b18@r) (cons (cons* a4b22@label 'global-macro! a4b30@loc) a4b19@env) a4b1a@global* (cons (cons a4b30@loc (a2f63@binding-value a4b23@b)) a4b1b@macro*))) (gensym)) (if (memv a4b26@t '(local-ctv)) ((lambda (a4b32@loc) (a4b16@f (cdr a4b18@r) (cons (cons* a4b22@label 'global-ctv a4b32@loc) a4b19@env) a4b1a@global* (cons (cons a4b32@loc (a2f63@binding-value a4b23@b)) a4b1b@macro*))) (gensym)) (if (memv a4b26@t '($rtd $module)) (a4b16@f (cdr a4b18@r) (cons a4b20@x a4b19@env) a4b1a@global* a4b1b@macro*) ((lambda () (begin '#f (assertion-violation 'expander '"BUG: do not know how to export" (a2f61@binding-type a4b23@b) (a2f63@binding-value a4b23@b))))))))))) (a2f61@binding-type a4b23@b))) (car a4b20@x) (cdr a4b20@x))) (car a4b18@r))))))))) a4b16@f) a4b10@r '() '() '()))) '#f))) (set! a3223@generate-temporaries (lambda (a4b3e@ls) ((lambda (a4b40@t) ((lambda (a4b42@ls/false) (if a4b42@ls/false (apply (lambda (a4b44@ls) (map (lambda (a4b46@x) (a2f0b@make-stx ((lambda (a4b48@x) (if (or (symbol? a4b48@x) (string? a4b48@x)) (gensym a4b48@x) ((lambda () (begin '#f (gensym 't)))))) (a323f@syntax->datum a4b46@x)) a2ec1@top-mark* '() '())) a4b44@ls)) a4b42@ls/false) ((lambda (a4b4a@t) ((lambda (a4b4c@ls/false) (if a4b4c@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) a4b4c@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a4b4a@t))) (a3148@syntax-dispatch a4b4a@t '_))) a4b40@t))) (a3148@syntax-dispatch a4b40@t 'each-any))) a4b3e@ls))) (set! a3225@free-identifier=? (lambda (a4b4e@x a4b4f@y) (if (a2f41@id? a4b4e@x) (if (a2f41@id? a4b4f@y) (a2f49@free-id=? a4b4e@x a4b4f@y) (assertion-violation 'free-identifier=? '"not an identifier" a4b4f@y)) (assertion-violation 'free-identifier=? '"not an identifier" a4b4e@x)))) (set! a3227@bound-identifier=? (lambda (a4b52@x a4b53@y) (if (a2f41@id? a4b52@x) (if (a2f41@id? a4b53@y) (a2f47@bound-id=? a4b52@x a4b53@y) (assertion-violation 'bound-identifier=? '"not an identifier" a4b53@y)) (assertion-violation 'bound-identifier=? '"not an identifier" a4b52@x)))) (set! a3229@position->condition (lambda (a4b56@x) (if (pair? a4b56@x) (a2ab8@a296d@make-source-position-condition (car a4b56@x) (cdr a4b56@x)) (condition)))) (set! a322b@extract-position-condition (lambda (a4b58@x) (a3229@position->condition (a322d@expression-position a4b58@x)))) (set! a322d@expression-position (lambda (a4b5a@x) (and (a2f09@stx? a4b5a@x) ((lambda (a4b5c@x) (and (a2ac7@a298b@annotation? a4b5c@x) (a2ac8@a298d@annotation-source a4b5c@x))) (a2f0d@stx-expr a4b5a@x))))) (set! a322f@syntax-annotation (lambda (a4b5e@x) (if (a2f09@stx? a4b5e@x) (a2f0d@stx-expr a4b5e@x) a4b5e@x))) (set! a3231@assertion-error (lambda (a4b60@expr a4b61@pos) (raise (condition (a503c@a4e17@make-assertion-violation) (a504e@a4e49@make-who-condition 'assert) (a5012@a4daa@make-message-condition '"assertion failed") (a5044@a4e2e@make-irritants-condition (list a4b60@expr)) (a3229@position->condition a4b61@pos))))) (set! a3233@syntax-error (lambda (a4b64@x . a4b66@args) (begin (if (not (for-all string? a4b66@args)) (assertion-violation 'syntax-error '"invalid argument" a4b66@args) (void)) (raise (condition (a5012@a4daa@make-message-condition (if (null? a4b66@args) '"invalid syntax" (apply string-append a4b66@args))) (a5070@a4ea5@make-syntax-violation (a323f@syntax->datum a4b64@x) '#f) (a322b@extract-position-condition a4b64@x) (a3235@extract-trace a4b64@x)))))) (set! a3235@extract-trace (lambda (a4b68@x) ((lambda (a4b71@a4b6c a4b73@a4b6e a4b75@a4b6d a4b78@a4b6b a4b7a@make-trace a4b7c@a4b6a a4b7e@trace? a4b80@trace-form) (begin (set! a4b71@a4b6c (make-record-type-descriptor '&trace a500c@a4d53@&condition-rtd 'a4b6f '#f '#f '#((immutable form)))) (set! a4b73@a4b6e '#f) (set! a4b75@a4b6d (make-record-constructor-descriptor a4b71@a4b6c a500d@a4d55@&condition-rcd a4b73@a4b6e)) (set! a4b78@a4b6b (record-predicate a4b71@a4b6c)) (set! a4b7a@make-trace (record-constructor a4b75@a4b6d)) (set! a4b7c@a4b6a (record-accessor a4b71@a4b6c '0)) (set! a4b7e@trace? (condition-predicate a4b71@a4b6c)) (set! a4b80@trace-form (condition-accessor a4b71@a4b6c a4b7c@a4b6a)) ((letrec ((a4b81@f (lambda (a4b83@x) (if (a2f09@stx? a4b83@x) (apply condition (a4b7a@make-trace a4b83@x) (map a4b81@f (a2f13@stx-ae* a4b83@x))) (if (a2ac7@a298b@annotation? a4b83@x) (a4b7a@make-trace (a2f0b@make-stx a4b83@x '() '() '())) ((lambda () (begin '#f (condition))))))))) a4b81@f) a4b68@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! a3237@syntax-violation* (lambda (a4b85@who a4b86@msg a4b87@form a4b88@condition-object) (begin (if (not (string? a4b86@msg)) (assertion-violation 'syntax-violation '"message is not a string" a4b86@msg) (void)) ((lambda (a4b8d@who) (raise (condition (if a4b8d@who (a504e@a4e49@make-who-condition a4b8d@who) (condition)) (a5012@a4daa@make-message-condition a4b86@msg) a4b88@condition-object (a322b@extract-position-condition a4b87@form) (a3235@extract-trace a4b87@form)))) (if (or (string? a4b85@who) (symbol? a4b85@who)) a4b85@who (if (not a4b85@who) ((lambda (a4b8f@t) ((lambda (a4b91@ls/false) (if (and a4b91@ls/false (apply (lambda (a4b93@id) (a2f41@id? a4b93@id)) a4b91@ls/false)) (apply (lambda (a4b95@id) (a323f@syntax->datum a4b95@id)) a4b91@ls/false) ((lambda (a4b97@t) ((lambda (a4b99@ls/false) (if (and a4b99@ls/false (apply (lambda (a4b9b@id a4b9c@rest) (a2f41@id? a4b9b@id)) a4b99@ls/false)) (apply (lambda (a4b9f@id a4ba0@rest) (a323f@syntax->datum a4b9f@id)) a4b99@ls/false) ((lambda (a4ba3@t) ((lambda (a4ba5@ls/false) (if a4ba5@ls/false (apply (lambda () '#f) a4ba5@ls/false) (a3239@syntax-violation '#f '"invalid syntax" a4ba3@t))) (a3148@syntax-dispatch a4ba3@t '_))) a4b97@t))) (a3148@syntax-dispatch a4b97@t '(any . any)))) a4b8f@t))) (a3148@syntax-dispatch a4b8f@t 'any))) a4b87@form) ((lambda () (begin '#f (assertion-violation 'syntax-violation '"invalid who argument" a4b85@who)))))))))) (set! a3239@syntax-violation (lambda a4bb5 ((lambda (a4bb6) (if (= a4bb6 '3) (apply (lambda (a4ba7@who a4ba8@msg a4ba9@form) (a3239@syntax-violation a4ba7@who a4ba8@msg a4ba9@form '#f)) a4bb5) (if (= a4bb6 '4) (apply (lambda (a4bad@who a4bae@msg a4baf@form a4bb0@subform) (a3237@syntax-violation* a4bad@who a4bae@msg a4baf@form (a5070@a4ea5@make-syntax-violation (a323f@syntax->datum a4baf@form) (a323f@syntax->datum a4bb0@subform)))) a4bb5) (error 'apply '"invalid arg count")))) (length a4bb5)))) (set! a323b@identifier? (lambda (a4bb7@x) (a2f41@id? a4bb7@x))) (set! a323d@datum->syntax (lambda (a4bb9@id a4bba@datum) (if (a2f41@id? a4bb9@id) (a2f1f@datum->stx a4bb9@id a4bba@datum) (assertion-violation 'datum->syntax '"not an identifier" a4bb9@id)))) (set! a323f@syntax->datum (lambda (a4bbd@x) (a2f57@stx->datum a4bbd@x))) (set! a3241@top-level-expander (lambda (a4bbf@e*) (call-with-values (lambda () (a31cb@parse-top-level-program a4bbf@e*)) (lambda (a4bc5@a4bc2 a4bc6@a4bc4) ((lambda (a4bc9@b* a4bca@imp*) (call-with-values (lambda () (a31c1@library-body-expander 'all a4bca@imp* a4bc9@b* '#t)) (lambda (a4bdb@a4bce a4bdc@a4bd0 a4bdd@a4bd2 a4bde@a4bd4 a4bdf@a4bd6 a4be0@a4bd8 a4be1@a4bda) ((lambda (a4be9@export-env a4bea@export-subst a4beb@macro* a4bec@invoke-code a4bed@visit-req* a4bee@invoke-req* a4bef@imp*) (values a4bee@invoke-req* a4bec@invoke-code a4beb@macro* a4bea@export-subst a4be9@export-env)) a4be1@a4bda a4be0@a4bd8 a4bdf@a4bd6 a4bde@a4bd4 a4bdd@a4bd2 a4bdc@a4bd0 a4bdb@a4bce)))) a4bc6@a4bc4 a4bc5@a4bc2))))) (set! a3243@compile-r6rs-top-level (lambda (a4bf7@x*) (call-with-values (lambda () (a3241@top-level-expander a4bf7@x*)) (lambda (a4c03@a4bfa a4c04@a4bfc a4c05@a4bfe a4c06@a4c00 a4c07@a4c02) ((lambda (a4c0d@export-env a4c0e@export-subst a4c0f@macro* a4c10@invoke-code a4c11@lib*) (lambda () (begin (for-each a2d77@a2bf7@invoke-library a4c11@lib*) (a3215@initial-visit! a4c0f@macro*) (eval-core (a2b17@a2ad7@expanded->core a4c10@invoke-code)) (a31f7@make-interaction-env (a3245@subst->rib a4c0e@export-subst) (map (lambda (a4c17@x) ((lambda (a4c19@label a4c1a@binding) ((lambda (a4c1d@type a4c1e@val) (cons* a4c19@label a4c1d@type '*interaction* a4c1e@val)) (car a4c1a@binding) (cdr a4c1a@binding))) (car a4c17@x) (cdr a4c17@x))) a4c0d@export-env) '())))) a4c07@a4c02 a4c06@a4c00 a4c05@a4bfe a4c04@a4bfc a4c03@a4bfa))))) (set! a3245@subst->rib (lambda (a4c21@subst) ((lambda (a4c23@rib) (begin (a2ee8@set-rib-sym*! a4c23@rib (map car a4c21@subst)) (a2eea@set-rib-mark**! a4c23@rib (map (lambda (a4c25@x) a2ec1@top-mark*) a4c21@subst)) (a2eec@set-rib-label*! a4c23@rib (map cdr a4c21@subst)) a4c23@rib)) (a2ef0@make-empty-rib)))) (set! a3247@new-interaction-environment (lambda () ((lambda (a4c27@lib) ((lambda (a4c29@rib) (a31f7@make-interaction-env a4c29@rib '() '())) (a3245@subst->rib (a2d47@a2b97@library-subst a4c27@lib)))) (a2d6f@a2be7@find-library-by-name (a2b6e@a2b1d@base-of-interaction-library))))) (set! a3249@interaction-environment ((lambda (a4c2b@e) (lambda a4c2f ((lambda (a4c30) (if (= a4c30 '0) (apply (lambda () (or a4c2b@e (begin (set! a4c2b@e (a3247@new-interaction-environment)) a4c2b@e))) a4c2f) (if (= a4c30 '1) (apply (lambda (a4c2d@x) (begin (if (not (a3207@environment? a4c2d@x)) (assertion-violation 'interaction-environment '"not an environment" a4c2d@x) (void)) (set! a4c2b@e a4c2d@x))) a4c2f) (error 'apply '"invalid arg count")))) (length a4c2f)))) '#f)) (set! a324b@top-level-context (a2ad0@a299d@make-parameter '#f)) (begin (a2d6c@a2be1@current-library-expander a3217@library-expander) (set! a4c31@a2eba@set-cons a2eba@set-cons) (set! a4c32@a2ebc@set-union a2ebc@set-union) (set! a4c33@a2ec1@top-mark* a2ec1@top-mark*) (set! a4c34@a2ec3@top-marked? a2ec3@top-marked?) (set! a4c35@a2ec5@gen-lexical a2ec5@gen-lexical) (set! a4c36@a2ec7@gen-global a2ec7@gen-global) (set! a4c37@a2ec9@gen-label a2ec9@gen-label) (set! a4c38@a2ecb@gen-top-level-label a2ecb@gen-top-level-label) (set! a4c39@a2ecd@gen-define-label+loc a2ecd@gen-define-label+loc) (set! a4c3a@a2ecf@gen-define-label a2ecf@gen-define-label) (set! a4c3b@a2ed5@a2ed0 a2ed5@a2ed0) (set! a4c3c@a2ed7@a2ed2 a2ed7@a2ed2) (set! a4c3d@a2ed9@a2ed1 a2ed9@a2ed1) (set! a4c3e@a2edc@rib? a2edc@rib?) (set! a4c3f@a2ede@make-rib a2ede@make-rib) (set! a4c40@a2ee0@rib-sym* a2ee0@rib-sym*) (set! a4c41@a2ee2@rib-mark** a2ee2@rib-mark**) (set! a4c42@a2ee4@rib-label* a2ee4@rib-label*) (set! a4c43@a2ee6@rib-sealed/freq a2ee6@rib-sealed/freq) (set! a4c44@a2ee8@set-rib-sym*! a2ee8@set-rib-sym*!) (set! a4c45@a2eea@set-rib-mark**! a2eea@set-rib-mark**!) (set! a4c46@a2eec@set-rib-label*! a2eec@set-rib-label*!) (set! a4c47@a2eee@set-rib-sealed/freq! a2eee@set-rib-sealed/freq!) (set! a4c48@a2ef0@make-empty-rib a2ef0@make-empty-rib) (set! a4c49@a2ef2@top-marked-symbols a2ef2@top-marked-symbols) (set! a4c4a@a2ef4@extend-rib! a2ef4@extend-rib!) (set! a4c4b@a2ef6@seal-rib! a2ef6@seal-rib!) (set! a4c4c@a2ef8@unseal-rib! a2ef8@unseal-rib!) (set! a4c4d@a2efa@increment-rib-frequency! a2efa@increment-rib-frequency!) (set! a4c4e@a2efc@make-full-rib a2efc@make-full-rib) (set! a4c4f@a2f02@a2efd a2f02@a2efd) (set! a4c50@a2f04@a2eff a2f04@a2eff) (set! a4c51@a2f06@a2efe a2f06@a2efe) (set! a4c52@a2f09@stx? a2f09@stx?) (set! a4c53@a2f0b@make-stx a2f0b@make-stx) (set! a4c54@a2f0d@stx-expr a2f0d@stx-expr) (set! a4c55@a2f0f@stx-mark* a2f0f@stx-mark*) (set! a4c56@a2f11@stx-subst* a2f11@stx-subst*) (set! a4c57@a2f13@stx-ae* a2f13@stx-ae*) (set! a4c58@a2f15@set-stx-expr! a2f15@set-stx-expr!) (set! a4c59@a2f17@set-stx-mark*! a2f17@set-stx-mark*!) (set! a4c5a@a2f19@set-stx-subst*! a2f19@set-stx-subst*!) (set! a4c5b@a2f1b@set-stx-ae*! a2f1b@set-stx-ae*!) (set! a4c5c@a2f1d@rp a2f1d@rp) (set! a4c5d@a2f1f@datum->stx a2f1f@datum->stx) (set! a4c5e@a2f21@gen-mark a2f21@gen-mark) (set! a4c5f@a2f23@anti-mark a2f23@anti-mark) (set! a4c60@a2f25@anti-mark? a2f25@anti-mark?) (set! a4c61@a2f27@join-wraps a2f27@join-wraps) (set! a4c62@a2f29@mkstx a2f29@mkstx) (set! a4c63@a2f2b@add-mark a2f2b@add-mark) (set! a4c64@a2f2d@add-subst a2f2d@add-subst) (set! a4c65@a2f2f@syntax-kind? a2f2f@syntax-kind?) (set! a4c66@a2f31@syntax-vector->list a2f31@syntax-vector->list) (set! a4c67@a2f33@syntax-pair? a2f33@syntax-pair?) (set! a4c68@a2f35@syntax-vector? a2f35@syntax-vector?) (set! a4c69@a2f37@syntax-null? a2f37@syntax-null?) (set! a4c6a@a2f39@syntax-list? a2f39@syntax-list?) (set! a4c6b@a2f3b@syntax-car a2f3b@syntax-car) (set! a4c6c@a2f3d@syntax-cdr a2f3d@syntax-cdr) (set! a4c6d@a2f3f@syntax->list a2f3f@syntax->list) (set! a4c6e@a2f41@id? a2f41@id?) (set! a4c6f@a2f43@id->sym a2f43@id->sym) (set! a4c70@a2f45@same-marks? a2f45@same-marks?) (set! a4c71@a2f47@bound-id=? a2f47@bound-id=?) (set! a4c72@a2f49@free-id=? a2f49@free-id=?) (set! a4c73@a2f4b@valid-bound-ids? a2f4b@valid-bound-ids?) (set! a4c74@a2f4d@distinct-bound-ids? a2f4d@distinct-bound-ids?) (set! a4c75@a2f4f@bound-id-member? a2f4f@bound-id-member?) (set! a4c76@a2f51@self-evaluating? a2f51@self-evaluating?) (set! a4c77@a2f53@strip-annotations a2f53@strip-annotations) (set! a4c78@a2f55@strip a2f55@strip) (set! a4c79@a2f57@stx->datum a2f57@stx->datum) (set! a4c7a@a2f59@id->label/intern a2f59@id->label/intern) (set! a4c7b@a2f5b@id->label a2f5b@id->label) (set! a4c7c@a2f5d@label->binding a2f5d@label->binding) (set! a4c7d@a2f5f@make-binding a2f5f@make-binding) (set! a4c7e@a2f61@binding-type a2f61@binding-type) (set! a4c7f@a2f63@binding-value a2f63@binding-value) (set! a4c80@a2f65@raise-unbound-error a2f65@raise-unbound-error) (set! a4c81@a2f67@syntax-type a2f67@syntax-type) (set! a4c82@a2f75@sanitize-binding a2f75@sanitize-binding) (set! a4c83@a2f77@make-variable-transformer a2f77@make-variable-transformer) (set! a4c84@a2f79@make-compile-time-value a2f79@make-compile-time-value) (set! a4c85@a2f7b@variable-transformer? a2f7b@variable-transformer?) (set! a4c86@a2f7d@variable-transformer-procedure a2f7d@variable-transformer-procedure) (set! a4c87@a2f7f@make-eval-transformer a2f7f@make-eval-transformer) (set! a4c88@a30d0@parse-define a30d0@parse-define) (set! a4c89@a30d2@parse-define-syntax a30d2@parse-define-syntax) (set! a4c8a@a30d4@scheme-stx-hashtable a30d4@scheme-stx-hashtable) (set! a4c8b@a30d6@scheme-stx a30d6@scheme-stx) (set! a4c8c@a30d8@lexical-var a30d8@lexical-var) (set! a4c8d@a30da@lexical-mutable? a30da@lexical-mutable?) (set! a4c8e@a30dc@set-lexical-mutable! a30dc@set-lexical-mutable!) (set! a4c8f@a30de@add-lexical a30de@add-lexical) (set! a4c90@a30e0@add-lexicals a30e0@add-lexicals) (set! a4c91@a30e2@letrec-helper a30e2@letrec-helper) (set! a4c92@a30e4@letrec-transformer a30e4@letrec-transformer) (set! a4c93@a30e6@letrec*-transformer a30e6@letrec*-transformer) (set! a4c94@a30e8@fluid-let-syntax-transformer a30e8@fluid-let-syntax-transformer) (set! a4c95@a30ea@type-descriptor-transformer a30ea@type-descriptor-transformer) (set! a4c96@a30ec@record-type-descriptor-transformer a30ec@record-type-descriptor-transformer) (set! a4c97@a30ee@record-constructor-descriptor-transformer a30ee@record-constructor-descriptor-transformer) (set! a4c98@a30f0@when-macro a30f0@when-macro) (set! a4c99@a30f2@unless-macro a30f2@unless-macro) (set! a4c9a@a30f4@if-transformer a30f4@if-transformer) (set! a4c9b@a30f6@and-transformer a30f6@and-transformer) (set! a4c9c@a30f8@or-transformer a30f8@or-transformer) (set! a4c9d@a30fa@case-macro a30fa@case-macro) (set! a4c9e@a30fc@quote-transformer a30fc@quote-transformer) (set! a4c9f@a30fe@case-lambda-transformer a30fe@case-lambda-transformer) (set! a4ca0@a3100@lambda-transformer a3100@lambda-transformer) (set! a4ca1@a3102@bless a3102@bless) (set! a4ca2@a3104@with-syntax-macro a3104@with-syntax-macro) (set! a4ca3@a3106@invalid-fmls-error a3106@invalid-fmls-error) (set! a4ca4@a3108@let-macro a3108@let-macro) (set! a4ca5@a310a@trace-let-macro a310a@trace-let-macro) (set! a4ca6@a310c@let-values-macro a310c@let-values-macro) (set! a4ca7@a310e@let*-values-macro a310e@let*-values-macro) (set! a4ca8@a3110@trace-lambda-macro a3110@trace-lambda-macro) (set! a4ca9@a3112@trace-define-macro a3112@trace-define-macro) (set! a4caa@a3114@trace-define-syntax-macro a3114@trace-define-syntax-macro) (set! a4cab@a3116@trace-let/rec-syntax a3116@trace-let/rec-syntax) (set! a4cac@a3118@trace-let-syntax-macro a3118@trace-let-syntax-macro) (set! a4cad@a311a@trace-letrec-syntax-macro a311a@trace-letrec-syntax-macro) (set! a4cae@a311c@guard-macro a311c@guard-macro) (set! a4caf@a311e@define-enumeration-macro a311e@define-enumeration-macro) (set! a4cb0@a3120@time-macro a3120@time-macro) (set! a4cb1@a3122@delay-macro a3122@delay-macro) (set! a4cb2@a3124@assert-macro a3124@assert-macro) (set! a4cb3@a3126@endianness-macro a3126@endianness-macro) (set! a4cb4@a3128@identifier-syntax-macro a3128@identifier-syntax-macro) (set! a4cb5@a312a@do-macro a312a@do-macro) (set! a4cb6@a312c@let*-macro a312c@let*-macro) (set! a4cb7@a312e@or-macro a312e@or-macro) (set! a4cb8@a3130@and-macro a3130@and-macro) (set! a4cb9@a3132@cond-macro a3132@cond-macro) (set! a4cba@a3134@syntax-rules-macro a3134@syntax-rules-macro) (set! a4cbb@a3136@quasiquote-macro a3136@quasiquote-macro) (set! a4cbc@a3138@quasisyntax-macro a3138@quasisyntax-macro) (set! a4cbd@a313a@define-struct-macro a313a@define-struct-macro) (set! a4cbe@a313c@define-record-type-macro a313c@define-record-type-macro) (set! a4cbf@a313e@define-condition-type-macro a313e@define-condition-type-macro) (set! a4cc0@a3140@incorrect-usage-macro a3140@incorrect-usage-macro) (set! a4cc1@a3142@parameterize-macro a3142@parameterize-macro) (set! a4cc2@a3144@foreign-call-transformer a3144@foreign-call-transformer) (set! a4cc3@a3146@convert-pattern a3146@convert-pattern) (set! a4cc4@a3148@syntax-dispatch a3148@syntax-dispatch) (set! a4cc5@a314a@ellipsis? a314a@ellipsis?) (set! a4cc6@a314c@underscore? a314c@underscore?) (set! a4cc7@a314e@verify-literals a314e@verify-literals) (set! a4cc8@a3150@syntax-case-transformer a3150@syntax-case-transformer) (set! a4cc9@a3152@ellipsis-map a3152@ellipsis-map) (set! a4cca@a3154@syntax-transformer a3154@syntax-transformer) (set! a4ccb@a3156@core-macro-transformer a3156@core-macro-transformer) (set! a4ccc@a3158@file-options-macro a3158@file-options-macro) (set! a4ccd@a315a@symbol-macro a315a@symbol-macro) (set! a4cce@a315c@macro-transformer a315c@macro-transformer) (set! a4ccf@a315e@local-macro-transformer a315e@local-macro-transformer) (set! a4cd0@a3160@do-macro-call a3160@do-macro-call) (set! a4cd1@a3162@chi-macro a3162@chi-macro) (set! a4cd2@a3164@chi-local-macro a3164@chi-local-macro) (set! a4cd3@a3166@chi-global-macro a3166@chi-global-macro) (set! a4cd4@a3168@chi-expr* a3168@chi-expr*) (set! a4cd5@a316a@chi-application a316a@chi-application) (set! a4cd6@a316c@chi-expr a316c@chi-expr) (set! a4cd7@a316e@chi-set! a316e@chi-set!) (set! a4cd8@a3170@verify-formals a3170@verify-formals) (set! a4cd9@a3172@chi-lambda-clause a3172@chi-lambda-clause) (set! a4cda@a3174@chi-lambda-clause* a3174@chi-lambda-clause*) (set! a4cdb@a3176@chi-defun a3176@chi-defun) (set! a4cdc@a3178@chi-rhs a3178@chi-rhs) (set! a4cdd@a317a@expand-interaction-rhs*/init* a317a@expand-interaction-rhs*/init*) (set! a4cde@a317c@chi-rhs* a317c@chi-rhs*) (set! a4cdf@a317e@find-bound=? a317e@find-bound=?) (set! a4ce0@a3180@find-dups a3180@find-dups) (set! a4ce1@a3182@chi-internal a3182@chi-internal) (set! a4ce2@a3184@parse-module a3184@parse-module) (set! a4ce3@a318a@a3185 a318a@a3185) (set! a4ce4@a318c@a3187 a318c@a3187) (set! a4ce5@a318e@a3186 a318e@a3186) (set! a4ce6@a3191@module-interface? a3191@module-interface?) (set! a4ce7@a3193@make-module-interface a3193@make-module-interface) (set! a4ce8@a3195@module-interface-first-mark a3195@module-interface-first-mark) (set! a4ce9@a3197@module-interface-exp-id-vec a3197@module-interface-exp-id-vec) (set! a4cea@a3199@module-interface-exp-lab-vec a3199@module-interface-exp-lab-vec) (set! a4ceb@a319b@set-module-interface-first-mark! a319b@set-module-interface-first-mark!) (set! a4cec@a319d@set-module-interface-exp-id-vec! a319d@set-module-interface-exp-id-vec!) (set! a4ced@a319f@set-module-interface-exp-lab-vec! a319f@set-module-interface-exp-lab-vec!) (set! a4cee@a31a1@module-interface-exp-id* a31a1@module-interface-exp-id*) (set! a4cef@a31a3@syntax-transpose a31a3@syntax-transpose) (set! a4cf0@a31a5@chi-internal-module a31a5@chi-internal-module) (set! a4cf1@a31a7@chi-body* a31a7@chi-body*) (set! a4cf2@a31a9@expand-transformer a31a9@expand-transformer) (set! a4cf3@a31ab@parse-exports a31ab@parse-exports) (set! a4cf4@a31ad@parse-library-name a31ad@parse-library-name) (set! a4cf5@a31af@parse-library a31af@parse-library) (set! a4cf6@a31b1@parse-import-spec* a31b1@parse-import-spec*) (set! a4cf7@a31b3@make-top-rib a31b3@make-top-rib) (set! a4cf8@a31b5@make-collector a31b5@make-collector) (set! a4cf9@a31b7@inv-collector a31b7@inv-collector) (set! a4cfa@a31b9@vis-collector a31b9@vis-collector) (set! a4cfb@a31bb@imp-collector a31bb@imp-collector) (set! a4cfc@a31bd@chi-library-internal a31bd@chi-library-internal) (set! a4cfd@a31bf@chi-interaction-expr a31bf@chi-interaction-expr) (set! a4cfe@a31c1@library-body-expander a31c1@library-body-expander) (set! a4cff@a31c3@stale-when-collector a31c3@stale-when-collector) (set! a4d00@a31c5@make-stale-collector a31c5@make-stale-collector) (set! a4d01@a31c7@handle-stale-when a31c7@handle-stale-when) (set! a4d02@a31c9@core-library-expander a31c9@core-library-expander) (set! a4d03@a31cb@parse-top-level-program a31cb@parse-top-level-program) (set! a4d04@a31d1@a31cc a31d1@a31cc) (set! a4d05@a31d3@a31ce a31d3@a31ce) (set! a4d06@a31d5@a31cd a31d5@a31cd) (set! a4d07@a31d8@env? a31d8@env?) (set! a4d08@a31da@make-env a31da@make-env) (set! a4d09@a31dc@env-names a31dc@env-names) (set! a4d0a@a31de@env-labels a31de@env-labels) (set! a4d0b@a31e0@env-itc a31e0@env-itc) (set! a4d0c@a31e2@set-env-names! a31e2@set-env-names!) (set! a4d0d@a31e4@set-env-labels! a31e4@set-env-labels!) (set! a4d0e@a31e6@set-env-itc! a31e6@set-env-itc!) (set! a4d0f@a31e8@rp a31e8@rp) (set! a4d10@a31ee@a31e9 a31ee@a31e9) (set! a4d11@a31f0@a31eb a31f0@a31eb) (set! a4d12@a31f2@a31ea a31f2@a31ea) (set! a4d13@a31f5@interaction-env? a31f5@interaction-env?) (set! a4d14@a31f7@make-interaction-env a31f7@make-interaction-env) (set! a4d15@a31f9@interaction-env-rib a31f9@interaction-env-rib) (set! a4d16@a31fb@interaction-env-r a31fb@interaction-env-r) (set! a4d17@a31fd@interaction-env-locs a31fd@interaction-env-locs) (set! a4d18@a31ff@set-interaction-env-rib! a31ff@set-interaction-env-rib!) (set! a4d19@a3201@set-interaction-env-r! a3201@set-interaction-env-r!) (set! a4d1a@a3203@set-interaction-env-locs! a3203@set-interaction-env-locs!) (set! a4d1b@a3205@rp a3205@rp) (set! a4d1c@a3207@environment? a3207@environment?) (set! a4d1d@a3209@environment-symbols a3209@environment-symbols) (set! a4d1e@a320b@environment a320b@environment) (set! a4d1f@a320d@null-environment a320d@null-environment) (set! a4d20@a320f@scheme-report-environment a320f@scheme-report-environment) (set! a4d21@a3211@core-expand a3211@core-expand) (set! a4d22@a3213@eval a3213@eval) (set! a4d23@a3215@initial-visit! a3215@initial-visit!) (set! a4d24@a3217@library-expander a3217@library-expander) (set! a4d25@a3219@boot-library-expand a3219@boot-library-expand) (set! a4d26@a321b@rev-map-append a321b@rev-map-append) (set! a4d27@a321d@build-exports a321d@build-exports) (set! a4d28@a321f@make-export-subst a321f@make-export-subst) (set! a4d29@a3221@make-export-env/macros a3221@make-export-env/macros) (set! a4d2a@a3223@generate-temporaries a3223@generate-temporaries) (set! a4d2b@a3225@free-identifier=? a3225@free-identifier=?) (set! a4d2c@a3227@bound-identifier=? a3227@bound-identifier=?) (set! a4d2d@a3229@position->condition a3229@position->condition) (set! a4d2e@a322b@extract-position-condition a322b@extract-position-condition) (set! a4d2f@a322d@expression-position a322d@expression-position) (set! a4d30@a322f@syntax-annotation a322f@syntax-annotation) (set! a4d31@a3231@assertion-error a3231@assertion-error) (set! a4d32@a3233@syntax-error a3233@syntax-error) (set! a4d33@a3235@extract-trace a3235@extract-trace) (set! a4d34@a3237@syntax-violation* a3237@syntax-violation*) (set! a4d35@a3239@syntax-violation a3239@syntax-violation) (set! a4d36@a323b@identifier? a323b@identifier?) (set! a4d37@a323d@datum->syntax a323d@datum->syntax) (set! a4d38@a323f@syntax->datum a323f@syntax->datum) (set! a4d39@a3241@top-level-expander a3241@top-level-expander) (set! a4d3a@a3243@compile-r6rs-top-level a3243@compile-r6rs-top-level) (set! a4d3b@a3245@subst->rib a3245@subst->rib) (set! a4d3c@a3247@new-interaction-environment a3247@new-interaction-environment) (set! a4d3d@a3249@interaction-environment a3249@interaction-environment) (set! a4d3e@a324b@top-level-context a324b@top-level-context)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (a4d48@a4d43 a4d4a@a4d45 a4d4c@a4d44 a4d4f@&condition? a4d51@make-&condition a4d53@&condition-rtd a4d55@&condition-rcd a4da1@a4d9c a4da3@a4d9e a4da5@a4d9d a4da8@p? a4daa@make-message-condition a4dac@a4d9b a4dae@message-condition? a4db0@condition-message a4db2@&message-rtd a4db4@&message-rcd a4dba@a4db5 a4dbc@a4db7 a4dbe@a4db6 a4dc1@p? a4dc3@make-warning a4dc5@warning? a4dc7@&warning-rtd a4dc9@&warning-rcd a4dcf@a4dca a4dd1@a4dcc a4dd3@a4dcb a4dd6@p? a4dd8@make-serious-condition a4dda@serious-condition? a4ddc@&serious-rtd a4dde@&serious-rcd a4de4@a4ddf a4de6@a4de1 a4de8@a4de0 a4deb@p? a4ded@make-error a4def@error? a4df1@&error-rtd a4df3@&error-rcd a4df9@a4df4 a4dfb@a4df6 a4dfd@a4df5 a4e00@p? a4e02@make-violation a4e04@violation? a4e06@&violation-rtd a4e08@&violation-rcd a4e0e@a4e09 a4e10@a4e0b a4e12@a4e0a a4e15@p? a4e17@make-assertion-violation a4e19@assertion-violation? a4e1b@&assertion-rtd a4e1d@&assertion-rcd a4e25@a4e20 a4e27@a4e22 a4e29@a4e21 a4e2c@p? a4e2e@make-irritants-condition a4e30@a4e1f a4e32@irritants-condition? a4e34@condition-irritants a4e36@&irritants-rtd a4e38@&irritants-rcd a4e40@a4e3b a4e42@a4e3d a4e44@a4e3c a4e47@p? a4e49@make-who-condition a4e4b@a4e3a a4e4d@who-condition? a4e4f@condition-who a4e51@&who-rtd a4e53@&who-rcd a4e59@a4e54 a4e5b@a4e56 a4e5d@a4e55 a4e60@p? a4e62@make-non-continuable-violation a4e64@non-continuable-violation? a4e66@&non-continuable-rtd a4e68@&non-continuable-rcd a4e6e@a4e69 a4e70@a4e6b a4e72@a4e6a a4e75@p? a4e77@make-implementation-restriction-violation a4e79@implementation-restriction-violation? a4e7b@&implementation-restriction-rtd a4e7d@&implementation-restriction-rcd a4e83@a4e7e a4e85@a4e80 a4e87@a4e7f a4e8a@p? a4e8c@make-lexical-violation a4e8e@lexical-violation? a4e90@&lexical-rtd a4e92@&lexical-rcd a4e9c@a4e97 a4e9e@a4e99 a4ea0@a4e98 a4ea3@p? a4ea5@make-syntax-violation a4ea7@a4e94 a4ea9@a4e96 a4eab@syntax-violation? a4ead@syntax-violation-form a4eaf@syntax-violation-subform a4eb1@&syntax-rtd a4eb3@&syntax-rcd a4eb9@a4eb4 a4ebb@a4eb6 a4ebd@a4eb5 a4ec0@p? a4ec2@make-undefined-violation a4ec4@undefined-violation? a4ec6@&undefined-rtd a4ec8@&undefined-rcd a4ece@a4ec9 a4ed0@a4ecb a4ed2@a4eca a4ed5@p? a4ed7@make-i/o-error a4ed9@i/o-error? a4edb@&i/o-rtd a4edd@&i/o-rcd a4ee3@a4ede a4ee5@a4ee0 a4ee7@a4edf a4eea@p? a4eec@make-i/o-read-error a4eee@i/o-read-error? a4ef0@&i/o-read-rtd a4ef2@&i/o-read-rcd a4ef8@a4ef3 a4efa@a4ef5 a4efc@a4ef4 a4eff@p? a4f01@make-i/o-write-error a4f03@i/o-write-error? a4f05@&i/o-write-rtd a4f07@&i/o-write-rcd a4f0f@a4f0a a4f11@a4f0c a4f13@a4f0b a4f16@p? a4f18@make-i/o-invalid-position-error a4f1a@a4f09 a4f1c@i/o-invalid-position-error? a4f1e@i/o-error-position a4f20@&i/o-invalid-position-rtd a4f22@&i/o-invalid-position-rcd a4f2a@a4f25 a4f2c@a4f27 a4f2e@a4f26 a4f31@p? a4f33@make-i/o-filename-error a4f35@a4f24 a4f37@i/o-filename-error? a4f39@i/o-error-filename a4f3b@&i/o-filename-rtd a4f3d@&i/o-filename-rcd a4f43@a4f3e a4f45@a4f40 a4f47@a4f3f a4f4a@p? a4f4c@make-i/o-file-protection-error a4f4e@i/o-file-protection-error? a4f50@&i/o-file-protection-rtd a4f52@&i/o-file-protection-rcd a4f58@a4f53 a4f5a@a4f55 a4f5c@a4f54 a4f5f@p? a4f61@make-i/o-file-is-read-only-error a4f63@i/o-file-is-read-only-error? a4f65@&i/o-file-is-read-only-rtd a4f67@&i/o-file-is-read-only-rcd a4f6d@a4f68 a4f6f@a4f6a a4f71@a4f69 a4f74@p? a4f76@make-i/o-file-already-exists-error a4f78@i/o-file-already-exists-error? a4f7a@&i/o-file-already-exists-rtd a4f7c@&i/o-file-already-exists-rcd a4f82@a4f7d a4f84@a4f7f a4f86@a4f7e a4f89@p? a4f8b@make-i/o-file-does-not-exist-error a4f8d@i/o-file-does-not-exist-error? a4f8f@&i/o-file-does-not-exist-rtd a4f91@&i/o-file-does-not-exist-rcd a4f99@a4f94 a4f9b@a4f96 a4f9d@a4f95 a4fa0@p? a4fa2@make-i/o-port-error a4fa4@a4f93 a4fa6@i/o-port-error? a4fa8@i/o-error-port a4faa@&i/o-port-rtd a4fac@&i/o-port-rcd a4fb2@a4fad a4fb4@a4faf a4fb6@a4fae a4fb9@p? a4fbb@make-i/o-decoding-error a4fbd@i/o-decoding-error? a4fbf@&i/o-decoding-rtd a4fc1@&i/o-decoding-rcd a4fc9@a4fc4 a4fcb@a4fc6 a4fcd@a4fc5 a4fd0@p? a4fd2@make-i/o-encoding-error a4fd4@a4fc3 a4fd6@i/o-encoding-error? a4fd8@i/o-encoding-error-char a4fda@&i/o-encoding-rtd a4fdc@&i/o-encoding-rcd a4fe2@a4fdd a4fe4@a4fdf a4fe6@a4fde a4fe9@p? a4feb@make-no-infinities-violation a4fed@no-infinities-violation? a4fef@&no-infinities-rtd a4ff1@&no-infinities-rcd a4ff7@a4ff2 a4ff9@a4ff4 a4ffb@a4ff3 a4ffe@p? a5000@make-no-nans-violation a5002@no-nans-violation? a5004@&no-nans-rtd a5006@&no-nans-rcd) (begin (set! a4d48@a4d43 (make-record-type-descriptor '&condition '#f 'a4d46 '#f '#f '#())) (set! a4d4a@a4d45 '#f) (set! a4d4c@a4d44 (make-record-constructor-descriptor a4d48@a4d43 '#f a4d4a@a4d45)) (set! a4d4f@&condition? (record-predicate a4d48@a4d43)) (set! a4d51@make-&condition (record-constructor a4d4c@a4d44)) (set! a4d53@&condition-rtd a4d48@a4d43) (set! a4d55@&condition-rcd a4d4c@a4d44) (set! a4da1@a4d9c (make-record-type-descriptor '&message a4d48@a4d43 'a4d9f '#f '#f '#((immutable message)))) (set! a4da3@a4d9e '#f) (set! a4da5@a4d9d (make-record-constructor-descriptor a4da1@a4d9c a4d4c@a4d44 a4da3@a4d9e)) (set! a4da8@p? (record-predicate a4da1@a4d9c)) (set! a4daa@make-message-condition (record-constructor a4da5@a4d9d)) (set! a4dac@a4d9b (record-accessor a4da1@a4d9c '0)) (set! a4dae@message-condition? (condition-predicate a4da1@a4d9c)) (set! a4db0@condition-message (condition-accessor a4da1@a4d9c a4dac@a4d9b)) (set! a4db2@&message-rtd a4da1@a4d9c) (set! a4db4@&message-rcd a4da5@a4d9d) (set! a4dba@a4db5 (make-record-type-descriptor '&warning a4d48@a4d43 'a4db8 '#f '#f '#())) (set! a4dbc@a4db7 '#f) (set! a4dbe@a4db6 (make-record-constructor-descriptor a4dba@a4db5 a4d4c@a4d44 a4dbc@a4db7)) (set! a4dc1@p? (record-predicate a4dba@a4db5)) (set! a4dc3@make-warning (record-constructor a4dbe@a4db6)) (set! a4dc5@warning? (condition-predicate a4dba@a4db5)) (set! a4dc7@&warning-rtd a4dba@a4db5) (set! a4dc9@&warning-rcd a4dbe@a4db6) (set! a4dcf@a4dca (make-record-type-descriptor '&serious a4d48@a4d43 'a4dcd '#f '#f '#())) (set! a4dd1@a4dcc '#f) (set! a4dd3@a4dcb (make-record-constructor-descriptor a4dcf@a4dca a4d4c@a4d44 a4dd1@a4dcc)) (set! a4dd6@p? (record-predicate a4dcf@a4dca)) (set! a4dd8@make-serious-condition (record-constructor a4dd3@a4dcb)) (set! a4dda@serious-condition? (condition-predicate a4dcf@a4dca)) (set! a4ddc@&serious-rtd a4dcf@a4dca) (set! a4dde@&serious-rcd a4dd3@a4dcb) (set! a4de4@a4ddf (make-record-type-descriptor '&error a4dcf@a4dca 'a4de2 '#f '#f '#())) (set! a4de6@a4de1 '#f) (set! a4de8@a4de0 (make-record-constructor-descriptor a4de4@a4ddf a4dd3@a4dcb a4de6@a4de1)) (set! a4deb@p? (record-predicate a4de4@a4ddf)) (set! a4ded@make-error (record-constructor a4de8@a4de0)) (set! a4def@error? (condition-predicate a4de4@a4ddf)) (set! a4df1@&error-rtd a4de4@a4ddf) (set! a4df3@&error-rcd a4de8@a4de0) (set! a4df9@a4df4 (make-record-type-descriptor '&violation a4dcf@a4dca 'a4df7 '#f '#f '#())) (set! a4dfb@a4df6 '#f) (set! a4dfd@a4df5 (make-record-constructor-descriptor a4df9@a4df4 a4dd3@a4dcb a4dfb@a4df6)) (set! a4e00@p? (record-predicate a4df9@a4df4)) (set! a4e02@make-violation (record-constructor a4dfd@a4df5)) (set! a4e04@violation? (condition-predicate a4df9@a4df4)) (set! a4e06@&violation-rtd a4df9@a4df4) (set! a4e08@&violation-rcd a4dfd@a4df5) (set! a4e0e@a4e09 (make-record-type-descriptor '&assertion a4df9@a4df4 'a4e0c '#f '#f '#())) (set! a4e10@a4e0b '#f) (set! a4e12@a4e0a (make-record-constructor-descriptor a4e0e@a4e09 a4dfd@a4df5 a4e10@a4e0b)) (set! a4e15@p? (record-predicate a4e0e@a4e09)) (set! a4e17@make-assertion-violation (record-constructor a4e12@a4e0a)) (set! a4e19@assertion-violation? (condition-predicate a4e0e@a4e09)) (set! a4e1b@&assertion-rtd a4e0e@a4e09) (set! a4e1d@&assertion-rcd a4e12@a4e0a) (set! a4e25@a4e20 (make-record-type-descriptor '&irritants a4d48@a4d43 'a4e23 '#f '#f '#((immutable irritants)))) (set! a4e27@a4e22 '#f) (set! a4e29@a4e21 (make-record-constructor-descriptor a4e25@a4e20 a4d4c@a4d44 a4e27@a4e22)) (set! a4e2c@p? (record-predicate a4e25@a4e20)) (set! a4e2e@make-irritants-condition (record-constructor a4e29@a4e21)) (set! a4e30@a4e1f (record-accessor a4e25@a4e20 '0)) (set! a4e32@irritants-condition? (condition-predicate a4e25@a4e20)) (set! a4e34@condition-irritants (condition-accessor a4e25@a4e20 a4e30@a4e1f)) (set! a4e36@&irritants-rtd a4e25@a4e20) (set! a4e38@&irritants-rcd a4e29@a4e21) (set! a4e40@a4e3b (make-record-type-descriptor '&who a4d48@a4d43 'a4e3e '#f '#f '#((immutable who)))) (set! a4e42@a4e3d '#f) (set! a4e44@a4e3c (make-record-constructor-descriptor a4e40@a4e3b a4d4c@a4d44 a4e42@a4e3d)) (set! a4e47@p? (record-predicate a4e40@a4e3b)) (set! a4e49@make-who-condition (record-constructor a4e44@a4e3c)) (set! a4e4b@a4e3a (record-accessor a4e40@a4e3b '0)) (set! a4e4d@who-condition? (condition-predicate a4e40@a4e3b)) (set! a4e4f@condition-who (condition-accessor a4e40@a4e3b a4e4b@a4e3a)) (set! a4e51@&who-rtd a4e40@a4e3b) (set! a4e53@&who-rcd a4e44@a4e3c) (set! a4e59@a4e54 (make-record-type-descriptor '&non-continuable a4df9@a4df4 'a4e57 '#f '#f '#())) (set! a4e5b@a4e56 '#f) (set! a4e5d@a4e55 (make-record-constructor-descriptor a4e59@a4e54 a4dfd@a4df5 a4e5b@a4e56)) (set! a4e60@p? (record-predicate a4e59@a4e54)) (set! a4e62@make-non-continuable-violation (record-constructor a4e5d@a4e55)) (set! a4e64@non-continuable-violation? (condition-predicate a4e59@a4e54)) (set! a4e66@&non-continuable-rtd a4e59@a4e54) (set! a4e68@&non-continuable-rcd a4e5d@a4e55) (set! a4e6e@a4e69 (make-record-type-descriptor '&implementation-restriction a4df9@a4df4 'a4e6c '#f '#f '#())) (set! a4e70@a4e6b '#f) (set! a4e72@a4e6a (make-record-constructor-descriptor a4e6e@a4e69 a4dfd@a4df5 a4e70@a4e6b)) (set! a4e75@p? (record-predicate a4e6e@a4e69)) (set! a4e77@make-implementation-restriction-violation (record-constructor a4e72@a4e6a)) (set! a4e79@implementation-restriction-violation? (condition-predicate a4e6e@a4e69)) (set! a4e7b@&implementation-restriction-rtd a4e6e@a4e69) (set! a4e7d@&implementation-restriction-rcd a4e72@a4e6a) (set! a4e83@a4e7e (make-record-type-descriptor '&lexical a4df9@a4df4 'a4e81 '#f '#f '#())) (set! a4e85@a4e80 '#f) (set! a4e87@a4e7f (make-record-constructor-descriptor a4e83@a4e7e a4dfd@a4df5 a4e85@a4e80)) (set! a4e8a@p? (record-predicate a4e83@a4e7e)) (set! a4e8c@make-lexical-violation (record-constructor a4e87@a4e7f)) (set! a4e8e@lexical-violation? (condition-predicate a4e83@a4e7e)) (set! a4e90@&lexical-rtd a4e83@a4e7e) (set! a4e92@&lexical-rcd a4e87@a4e7f) (set! a4e9c@a4e97 (make-record-type-descriptor '&syntax a4df9@a4df4 'a4e9a '#f '#f '#((immutable form) (immutable subform)))) (set! a4e9e@a4e99 '#f) (set! a4ea0@a4e98 (make-record-constructor-descriptor a4e9c@a4e97 a4dfd@a4df5 a4e9e@a4e99)) (set! a4ea3@p? (record-predicate a4e9c@a4e97)) (set! a4ea5@make-syntax-violation (record-constructor a4ea0@a4e98)) (set! a4ea7@a4e94 (record-accessor a4e9c@a4e97 '0)) (set! a4ea9@a4e96 (record-accessor a4e9c@a4e97 '1)) (set! a4eab@syntax-violation? (condition-predicate a4e9c@a4e97)) (set! a4ead@syntax-violation-form (condition-accessor a4e9c@a4e97 a4ea7@a4e94)) (set! a4eaf@syntax-violation-subform (condition-accessor a4e9c@a4e97 a4ea9@a4e96)) (set! a4eb1@&syntax-rtd a4e9c@a4e97) (set! a4eb3@&syntax-rcd a4ea0@a4e98) (set! a4eb9@a4eb4 (make-record-type-descriptor '&undefined a4df9@a4df4 'a4eb7 '#f '#f '#())) (set! a4ebb@a4eb6 '#f) (set! a4ebd@a4eb5 (make-record-constructor-descriptor a4eb9@a4eb4 a4dfd@a4df5 a4ebb@a4eb6)) (set! a4ec0@p? (record-predicate a4eb9@a4eb4)) (set! a4ec2@make-undefined-violation (record-constructor a4ebd@a4eb5)) (set! a4ec4@undefined-violation? (condition-predicate a4eb9@a4eb4)) (set! a4ec6@&undefined-rtd a4eb9@a4eb4) (set! a4ec8@&undefined-rcd a4ebd@a4eb5) (set! a4ece@a4ec9 (make-record-type-descriptor '&i/o a4de4@a4ddf 'a4ecc '#f '#f '#())) (set! a4ed0@a4ecb '#f) (set! a4ed2@a4eca (make-record-constructor-descriptor a4ece@a4ec9 a4de8@a4de0 a4ed0@a4ecb)) (set! a4ed5@p? (record-predicate a4ece@a4ec9)) (set! a4ed7@make-i/o-error (record-constructor a4ed2@a4eca)) (set! a4ed9@i/o-error? (condition-predicate a4ece@a4ec9)) (set! a4edb@&i/o-rtd a4ece@a4ec9) (set! a4edd@&i/o-rcd a4ed2@a4eca) (set! a4ee3@a4ede (make-record-type-descriptor '&i/o-read a4ece@a4ec9 'a4ee1 '#f '#f '#())) (set! a4ee5@a4ee0 '#f) (set! a4ee7@a4edf (make-record-constructor-descriptor a4ee3@a4ede a4ed2@a4eca a4ee5@a4ee0)) (set! a4eea@p? (record-predicate a4ee3@a4ede)) (set! a4eec@make-i/o-read-error (record-constructor a4ee7@a4edf)) (set! a4eee@i/o-read-error? (condition-predicate a4ee3@a4ede)) (set! a4ef0@&i/o-read-rtd a4ee3@a4ede) (set! a4ef2@&i/o-read-rcd a4ee7@a4edf) (set! a4ef8@a4ef3 (make-record-type-descriptor '&i/o-write a4ece@a4ec9 'a4ef6 '#f '#f '#())) (set! a4efa@a4ef5 '#f) (set! a4efc@a4ef4 (make-record-constructor-descriptor a4ef8@a4ef3 a4ed2@a4eca a4efa@a4ef5)) (set! a4eff@p? (record-predicate a4ef8@a4ef3)) (set! a4f01@make-i/o-write-error (record-constructor a4efc@a4ef4)) (set! a4f03@i/o-write-error? (condition-predicate a4ef8@a4ef3)) (set! a4f05@&i/o-write-rtd a4ef8@a4ef3) (set! a4f07@&i/o-write-rcd a4efc@a4ef4) (set! a4f0f@a4f0a (make-record-type-descriptor '&i/o-invalid-position a4ece@a4ec9 'a4f0d '#f '#f '#((immutable position)))) (set! a4f11@a4f0c '#f) (set! a4f13@a4f0b (make-record-constructor-descriptor a4f0f@a4f0a a4ed2@a4eca a4f11@a4f0c)) (set! a4f16@p? (record-predicate a4f0f@a4f0a)) (set! a4f18@make-i/o-invalid-position-error (record-constructor a4f13@a4f0b)) (set! a4f1a@a4f09 (record-accessor a4f0f@a4f0a '0)) (set! a4f1c@i/o-invalid-position-error? (condition-predicate a4f0f@a4f0a)) (set! a4f1e@i/o-error-position (condition-accessor a4f0f@a4f0a a4f1a@a4f09)) (set! a4f20@&i/o-invalid-position-rtd a4f0f@a4f0a) (set! a4f22@&i/o-invalid-position-rcd a4f13@a4f0b) (set! a4f2a@a4f25 (make-record-type-descriptor '&i/o-filename a4ece@a4ec9 'a4f28 '#f '#f '#((immutable filename)))) (set! a4f2c@a4f27 '#f) (set! a4f2e@a4f26 (make-record-constructor-descriptor a4f2a@a4f25 a4ed2@a4eca a4f2c@a4f27)) (set! a4f31@p? (record-predicate a4f2a@a4f25)) (set! a4f33@make-i/o-filename-error (record-constructor a4f2e@a4f26)) (set! a4f35@a4f24 (record-accessor a4f2a@a4f25 '0)) (set! a4f37@i/o-filename-error? (condition-predicate a4f2a@a4f25)) (set! a4f39@i/o-error-filename (condition-accessor a4f2a@a4f25 a4f35@a4f24)) (set! a4f3b@&i/o-filename-rtd a4f2a@a4f25) (set! a4f3d@&i/o-filename-rcd a4f2e@a4f26) (set! a4f43@a4f3e (make-record-type-descriptor '&i/o-file-protection a4f2a@a4f25 'a4f41 '#f '#f '#())) (set! a4f45@a4f40 '#f) (set! a4f47@a4f3f (make-record-constructor-descriptor a4f43@a4f3e a4f2e@a4f26 a4f45@a4f40)) (set! a4f4a@p? (record-predicate a4f43@a4f3e)) (set! a4f4c@make-i/o-file-protection-error (record-constructor a4f47@a4f3f)) (set! a4f4e@i/o-file-protection-error? (condition-predicate a4f43@a4f3e)) (set! a4f50@&i/o-file-protection-rtd a4f43@a4f3e) (set! a4f52@&i/o-file-protection-rcd a4f47@a4f3f) (set! a4f58@a4f53 (make-record-type-descriptor '&i/o-file-is-read-only a4f43@a4f3e 'a4f56 '#f '#f '#())) (set! a4f5a@a4f55 '#f) (set! a4f5c@a4f54 (make-record-constructor-descriptor a4f58@a4f53 a4f47@a4f3f a4f5a@a4f55)) (set! a4f5f@p? (record-predicate a4f58@a4f53)) (set! a4f61@make-i/o-file-is-read-only-error (record-constructor a4f5c@a4f54)) (set! a4f63@i/o-file-is-read-only-error? (condition-predicate a4f58@a4f53)) (set! a4f65@&i/o-file-is-read-only-rtd a4f58@a4f53) (set! a4f67@&i/o-file-is-read-only-rcd a4f5c@a4f54) (set! a4f6d@a4f68 (make-record-type-descriptor '&i/o-file-already-exists a4f2a@a4f25 'a4f6b '#f '#f '#())) (set! a4f6f@a4f6a '#f) (set! a4f71@a4f69 (make-record-constructor-descriptor a4f6d@a4f68 a4f2e@a4f26 a4f6f@a4f6a)) (set! a4f74@p? (record-predicate a4f6d@a4f68)) (set! a4f76@make-i/o-file-already-exists-error (record-constructor a4f71@a4f69)) (set! a4f78@i/o-file-already-exists-error? (condition-predicate a4f6d@a4f68)) (set! a4f7a@&i/o-file-already-exists-rtd a4f6d@a4f68) (set! a4f7c@&i/o-file-already-exists-rcd a4f71@a4f69) (set! a4f82@a4f7d (make-record-type-descriptor '&i/o-file-does-not-exist a4f2a@a4f25 'a4f80 '#f '#f '#())) (set! a4f84@a4f7f '#f) (set! a4f86@a4f7e (make-record-constructor-descriptor a4f82@a4f7d a4f2e@a4f26 a4f84@a4f7f)) (set! a4f89@p? (record-predicate a4f82@a4f7d)) (set! a4f8b@make-i/o-file-does-not-exist-error (record-constructor a4f86@a4f7e)) (set! a4f8d@i/o-file-does-not-exist-error? (condition-predicate a4f82@a4f7d)) (set! a4f8f@&i/o-file-does-not-exist-rtd a4f82@a4f7d) (set! a4f91@&i/o-file-does-not-exist-rcd a4f86@a4f7e) (set! a4f99@a4f94 (make-record-type-descriptor '&i/o-port a4ece@a4ec9 'a4f97 '#f '#f '#((immutable port)))) (set! a4f9b@a4f96 '#f) (set! a4f9d@a4f95 (make-record-constructor-descriptor a4f99@a4f94 a4ed2@a4eca a4f9b@a4f96)) (set! a4fa0@p? (record-predicate a4f99@a4f94)) (set! a4fa2@make-i/o-port-error (record-constructor a4f9d@a4f95)) (set! a4fa4@a4f93 (record-accessor a4f99@a4f94 '0)) (set! a4fa6@i/o-port-error? (condition-predicate a4f99@a4f94)) (set! a4fa8@i/o-error-port (condition-accessor a4f99@a4f94 a4fa4@a4f93)) (set! a4faa@&i/o-port-rtd a4f99@a4f94) (set! a4fac@&i/o-port-rcd a4f9d@a4f95) (set! a4fb2@a4fad (make-record-type-descriptor '&i/o-decoding a4f99@a4f94 'a4fb0 '#f '#f '#())) (set! a4fb4@a4faf '#f) (set! a4fb6@a4fae (make-record-constructor-descriptor a4fb2@a4fad a4f9d@a4f95 a4fb4@a4faf)) (set! a4fb9@p? (record-predicate a4fb2@a4fad)) (set! a4fbb@make-i/o-decoding-error (record-constructor a4fb6@a4fae)) (set! a4fbd@i/o-decoding-error? (condition-predicate a4fb2@a4fad)) (set! a4fbf@&i/o-decoding-rtd a4fb2@a4fad) (set! a4fc1@&i/o-decoding-rcd a4fb6@a4fae) (set! a4fc9@a4fc4 (make-record-type-descriptor '&i/o-encoding a4f99@a4f94 'a4fc7 '#f '#f '#((immutable char)))) (set! a4fcb@a4fc6 '#f) (set! a4fcd@a4fc5 (make-record-constructor-descriptor a4fc9@a4fc4 a4f9d@a4f95 a4fcb@a4fc6)) (set! a4fd0@p? (record-predicate a4fc9@a4fc4)) (set! a4fd2@make-i/o-encoding-error (record-constructor a4fcd@a4fc5)) (set! a4fd4@a4fc3 (record-accessor a4fc9@a4fc4 '0)) (set! a4fd6@i/o-encoding-error? (condition-predicate a4fc9@a4fc4)) (set! a4fd8@i/o-encoding-error-char (condition-accessor a4fc9@a4fc4 a4fd4@a4fc3)) (set! a4fda@&i/o-encoding-rtd a4fc9@a4fc4) (set! a4fdc@&i/o-encoding-rcd a4fcd@a4fc5) (set! a4fe2@a4fdd (make-record-type-descriptor '&no-infinities a4e6e@a4e69 'a4fe0 '#f '#f '#())) (set! a4fe4@a4fdf '#f) (set! a4fe6@a4fde (make-record-constructor-descriptor a4fe2@a4fdd a4e72@a4e6a a4fe4@a4fdf)) (set! a4fe9@p? (record-predicate a4fe2@a4fdd)) (set! a4feb@make-no-infinities-violation (record-constructor a4fe6@a4fde)) (set! a4fed@no-infinities-violation? (condition-predicate a4fe2@a4fdd)) (set! a4fef@&no-infinities-rtd a4fe2@a4fdd) (set! a4ff1@&no-infinities-rcd a4fe6@a4fde) (set! a4ff7@a4ff2 (make-record-type-descriptor '&no-nans a4e6e@a4e69 'a4ff5 '#f '#f '#())) (set! a4ff9@a4ff4 '#f) (set! a4ffb@a4ff3 (make-record-constructor-descriptor a4ff7@a4ff2 a4e72@a4e6a a4ff9@a4ff4)) (set! a4ffe@p? (record-predicate a4ff7@a4ff2)) (set! a5000@make-no-nans-violation (record-constructor a4ffb@a4ff3)) (set! a5002@no-nans-violation? (condition-predicate a4ff7@a4ff2)) (set! a5004@&no-nans-rtd a4ff7@a4ff2) (set! a5006@&no-nans-rcd a4ffb@a4ff3) (begin (set! a5007@a4d48@a4d43 a4d48@a4d43) (set! a5008@a4d4a@a4d45 a4d4a@a4d45) (set! a5009@a4d4c@a4d44 a4d4c@a4d44) (set! a500a@a4d4f@&condition? a4d4f@&condition?) (set! a500b@a4d51@make-&condition a4d51@make-&condition) (set! a500c@a4d53@&condition-rtd a4d53@&condition-rtd) (set! a500d@a4d55@&condition-rcd a4d55@&condition-rcd) (set! a500e@a4da1@a4d9c a4da1@a4d9c) (set! a500f@a4da3@a4d9e a4da3@a4d9e) (set! a5010@a4da5@a4d9d a4da5@a4d9d) (set! a5011@a4da8@p? a4da8@p?) (set! a5012@a4daa@make-message-condition a4daa@make-message-condition) (set! a5013@a4dac@a4d9b a4dac@a4d9b) (set! a5014@a4dae@message-condition? a4dae@message-condition?) (set! a5015@a4db0@condition-message a4db0@condition-message) (set! a5016@a4db2@&message-rtd a4db2@&message-rtd) (set! a5017@a4db4@&message-rcd a4db4@&message-rcd) (set! a5018@a4dba@a4db5 a4dba@a4db5) (set! a5019@a4dbc@a4db7 a4dbc@a4db7) (set! a501a@a4dbe@a4db6 a4dbe@a4db6) (set! a501b@a4dc1@p? a4dc1@p?) (set! a501c@a4dc3@make-warning a4dc3@make-warning) (set! a501d@a4dc5@warning? a4dc5@warning?) (set! a501e@a4dc7@&warning-rtd a4dc7@&warning-rtd) (set! a501f@a4dc9@&warning-rcd a4dc9@&warning-rcd) (set! a5020@a4dcf@a4dca a4dcf@a4dca) (set! a5021@a4dd1@a4dcc a4dd1@a4dcc) (set! a5022@a4dd3@a4dcb a4dd3@a4dcb) (set! a5023@a4dd6@p? a4dd6@p?) (set! a5024@a4dd8@make-serious-condition a4dd8@make-serious-condition) (set! a5025@a4dda@serious-condition? a4dda@serious-condition?) (set! a5026@a4ddc@&serious-rtd a4ddc@&serious-rtd) (set! a5027@a4dde@&serious-rcd a4dde@&serious-rcd) (set! a5028@a4de4@a4ddf a4de4@a4ddf) (set! a5029@a4de6@a4de1 a4de6@a4de1) (set! a502a@a4de8@a4de0 a4de8@a4de0) (set! a502b@a4deb@p? a4deb@p?) (set! a502c@a4ded@make-error a4ded@make-error) (set! a502d@a4def@error? a4def@error?) (set! a502e@a4df1@&error-rtd a4df1@&error-rtd) (set! a502f@a4df3@&error-rcd a4df3@&error-rcd) (set! a5030@a4df9@a4df4 a4df9@a4df4) (set! a5031@a4dfb@a4df6 a4dfb@a4df6) (set! a5032@a4dfd@a4df5 a4dfd@a4df5) (set! a5033@a4e00@p? a4e00@p?) (set! a5034@a4e02@make-violation a4e02@make-violation) (set! a5035@a4e04@violation? a4e04@violation?) (set! a5036@a4e06@&violation-rtd a4e06@&violation-rtd) (set! a5037@a4e08@&violation-rcd a4e08@&violation-rcd) (set! a5038@a4e0e@a4e09 a4e0e@a4e09) (set! a5039@a4e10@a4e0b a4e10@a4e0b) (set! a503a@a4e12@a4e0a a4e12@a4e0a) (set! a503b@a4e15@p? a4e15@p?) (set! a503c@a4e17@make-assertion-violation a4e17@make-assertion-violation) (set! a503d@a4e19@assertion-violation? a4e19@assertion-violation?) (set! a503e@a4e1b@&assertion-rtd a4e1b@&assertion-rtd) (set! a503f@a4e1d@&assertion-rcd a4e1d@&assertion-rcd) (set! a5040@a4e25@a4e20 a4e25@a4e20) (set! a5041@a4e27@a4e22 a4e27@a4e22) (set! a5042@a4e29@a4e21 a4e29@a4e21) (set! a5043@a4e2c@p? a4e2c@p?) (set! a5044@a4e2e@make-irritants-condition a4e2e@make-irritants-condition) (set! a5045@a4e30@a4e1f a4e30@a4e1f) (set! a5046@a4e32@irritants-condition? a4e32@irritants-condition?) (set! a5047@a4e34@condition-irritants a4e34@condition-irritants) (set! a5048@a4e36@&irritants-rtd a4e36@&irritants-rtd) (set! a5049@a4e38@&irritants-rcd a4e38@&irritants-rcd) (set! a504a@a4e40@a4e3b a4e40@a4e3b) (set! a504b@a4e42@a4e3d a4e42@a4e3d) (set! a504c@a4e44@a4e3c a4e44@a4e3c) (set! a504d@a4e47@p? a4e47@p?) (set! a504e@a4e49@make-who-condition a4e49@make-who-condition) (set! a504f@a4e4b@a4e3a a4e4b@a4e3a) (set! a5050@a4e4d@who-condition? a4e4d@who-condition?) (set! a5051@a4e4f@condition-who a4e4f@condition-who) (set! a5052@a4e51@&who-rtd a4e51@&who-rtd) (set! a5053@a4e53@&who-rcd a4e53@&who-rcd) (set! a5054@a4e59@a4e54 a4e59@a4e54) (set! a5055@a4e5b@a4e56 a4e5b@a4e56) (set! a5056@a4e5d@a4e55 a4e5d@a4e55) (set! a5057@a4e60@p? a4e60@p?) (set! a5058@a4e62@make-non-continuable-violation a4e62@make-non-continuable-violation) (set! a5059@a4e64@non-continuable-violation? a4e64@non-continuable-violation?) (set! a505a@a4e66@&non-continuable-rtd a4e66@&non-continuable-rtd) (set! a505b@a4e68@&non-continuable-rcd a4e68@&non-continuable-rcd) (set! a505c@a4e6e@a4e69 a4e6e@a4e69) (set! a505d@a4e70@a4e6b a4e70@a4e6b) (set! a505e@a4e72@a4e6a a4e72@a4e6a) (set! a505f@a4e75@p? a4e75@p?) (set! a5060@a4e77@make-implementation-restriction-violation a4e77@make-implementation-restriction-violation) (set! a5061@a4e79@implementation-restriction-violation? a4e79@implementation-restriction-violation?) (set! a5062@a4e7b@&implementation-restriction-rtd a4e7b@&implementation-restriction-rtd) (set! a5063@a4e7d@&implementation-restriction-rcd a4e7d@&implementation-restriction-rcd) (set! a5064@a4e83@a4e7e a4e83@a4e7e) (set! a5065@a4e85@a4e80 a4e85@a4e80) (set! a5066@a4e87@a4e7f a4e87@a4e7f) (set! a5067@a4e8a@p? a4e8a@p?) (set! a5068@a4e8c@make-lexical-violation a4e8c@make-lexical-violation) (set! a5069@a4e8e@lexical-violation? a4e8e@lexical-violation?) (set! a506a@a4e90@&lexical-rtd a4e90@&lexical-rtd) (set! a506b@a4e92@&lexical-rcd a4e92@&lexical-rcd) (set! a506c@a4e9c@a4e97 a4e9c@a4e97) (set! a506d@a4e9e@a4e99 a4e9e@a4e99) (set! a506e@a4ea0@a4e98 a4ea0@a4e98) (set! a506f@a4ea3@p? a4ea3@p?) (set! a5070@a4ea5@make-syntax-violation a4ea5@make-syntax-violation) (set! a5071@a4ea7@a4e94 a4ea7@a4e94) (set! a5072@a4ea9@a4e96 a4ea9@a4e96) (set! a5073@a4eab@syntax-violation? a4eab@syntax-violation?) (set! a5074@a4ead@syntax-violation-form a4ead@syntax-violation-form) (set! a5075@a4eaf@syntax-violation-subform a4eaf@syntax-violation-subform) (set! a5076@a4eb1@&syntax-rtd a4eb1@&syntax-rtd) (set! a5077@a4eb3@&syntax-rcd a4eb3@&syntax-rcd) (set! a5078@a4eb9@a4eb4 a4eb9@a4eb4) (set! a5079@a4ebb@a4eb6 a4ebb@a4eb6) (set! a507a@a4ebd@a4eb5 a4ebd@a4eb5) (set! a507b@a4ec0@p? a4ec0@p?) (set! a507c@a4ec2@make-undefined-violation a4ec2@make-undefined-violation) (set! a507d@a4ec4@undefined-violation? a4ec4@undefined-violation?) (set! a507e@a4ec6@&undefined-rtd a4ec6@&undefined-rtd) (set! a507f@a4ec8@&undefined-rcd a4ec8@&undefined-rcd) (set! a5080@a4ece@a4ec9 a4ece@a4ec9) (set! a5081@a4ed0@a4ecb a4ed0@a4ecb) (set! a5082@a4ed2@a4eca a4ed2@a4eca) (set! a5083@a4ed5@p? a4ed5@p?) (set! a5084@a4ed7@make-i/o-error a4ed7@make-i/o-error) (set! a5085@a4ed9@i/o-error? a4ed9@i/o-error?) (set! a5086@a4edb@&i/o-rtd a4edb@&i/o-rtd) (set! a5087@a4edd@&i/o-rcd a4edd@&i/o-rcd) (set! a5088@a4ee3@a4ede a4ee3@a4ede) (set! a5089@a4ee5@a4ee0 a4ee5@a4ee0) (set! a508a@a4ee7@a4edf a4ee7@a4edf) (set! a508b@a4eea@p? a4eea@p?) (set! a508c@a4eec@make-i/o-read-error a4eec@make-i/o-read-error) (set! a508d@a4eee@i/o-read-error? a4eee@i/o-read-error?) (set! a508e@a4ef0@&i/o-read-rtd a4ef0@&i/o-read-rtd) (set! a508f@a4ef2@&i/o-read-rcd a4ef2@&i/o-read-rcd) (set! a5090@a4ef8@a4ef3 a4ef8@a4ef3) (set! a5091@a4efa@a4ef5 a4efa@a4ef5) (set! a5092@a4efc@a4ef4 a4efc@a4ef4) (set! a5093@a4eff@p? a4eff@p?) (set! a5094@a4f01@make-i/o-write-error a4f01@make-i/o-write-error) (set! a5095@a4f03@i/o-write-error? a4f03@i/o-write-error?) (set! a5096@a4f05@&i/o-write-rtd a4f05@&i/o-write-rtd) (set! a5097@a4f07@&i/o-write-rcd a4f07@&i/o-write-rcd) (set! a5098@a4f0f@a4f0a a4f0f@a4f0a) (set! a5099@a4f11@a4f0c a4f11@a4f0c) (set! a509a@a4f13@a4f0b a4f13@a4f0b) (set! a509b@a4f16@p? a4f16@p?) (set! a509c@a4f18@make-i/o-invalid-position-error a4f18@make-i/o-invalid-position-error) (set! a509d@a4f1a@a4f09 a4f1a@a4f09) (set! a509e@a4f1c@i/o-invalid-position-error? a4f1c@i/o-invalid-position-error?) (set! a509f@a4f1e@i/o-error-position a4f1e@i/o-error-position) (set! a50a0@a4f20@&i/o-invalid-position-rtd a4f20@&i/o-invalid-position-rtd) (set! a50a1@a4f22@&i/o-invalid-position-rcd a4f22@&i/o-invalid-position-rcd) (set! a50a2@a4f2a@a4f25 a4f2a@a4f25) (set! a50a3@a4f2c@a4f27 a4f2c@a4f27) (set! a50a4@a4f2e@a4f26 a4f2e@a4f26) (set! a50a5@a4f31@p? a4f31@p?) (set! a50a6@a4f33@make-i/o-filename-error a4f33@make-i/o-filename-error) (set! a50a7@a4f35@a4f24 a4f35@a4f24) (set! a50a8@a4f37@i/o-filename-error? a4f37@i/o-filename-error?) (set! a50a9@a4f39@i/o-error-filename a4f39@i/o-error-filename) (set! a50aa@a4f3b@&i/o-filename-rtd a4f3b@&i/o-filename-rtd) (set! a50ab@a4f3d@&i/o-filename-rcd a4f3d@&i/o-filename-rcd) (set! a50ac@a4f43@a4f3e a4f43@a4f3e) (set! a50ad@a4f45@a4f40 a4f45@a4f40) (set! a50ae@a4f47@a4f3f a4f47@a4f3f) (set! a50af@a4f4a@p? a4f4a@p?) (set! a50b0@a4f4c@make-i/o-file-protection-error a4f4c@make-i/o-file-protection-error) (set! a50b1@a4f4e@i/o-file-protection-error? a4f4e@i/o-file-protection-error?) (set! a50b2@a4f50@&i/o-file-protection-rtd a4f50@&i/o-file-protection-rtd) (set! a50b3@a4f52@&i/o-file-protection-rcd a4f52@&i/o-file-protection-rcd) (set! a50b4@a4f58@a4f53 a4f58@a4f53) (set! a50b5@a4f5a@a4f55 a4f5a@a4f55) (set! a50b6@a4f5c@a4f54 a4f5c@a4f54) (set! a50b7@a4f5f@p? a4f5f@p?) (set! a50b8@a4f61@make-i/o-file-is-read-only-error a4f61@make-i/o-file-is-read-only-error) (set! a50b9@a4f63@i/o-file-is-read-only-error? a4f63@i/o-file-is-read-only-error?) (set! a50ba@a4f65@&i/o-file-is-read-only-rtd a4f65@&i/o-file-is-read-only-rtd) (set! a50bb@a4f67@&i/o-file-is-read-only-rcd a4f67@&i/o-file-is-read-only-rcd) (set! a50bc@a4f6d@a4f68 a4f6d@a4f68) (set! a50bd@a4f6f@a4f6a a4f6f@a4f6a) (set! a50be@a4f71@a4f69 a4f71@a4f69) (set! a50bf@a4f74@p? a4f74@p?) (set! a50c0@a4f76@make-i/o-file-already-exists-error a4f76@make-i/o-file-already-exists-error) (set! a50c1@a4f78@i/o-file-already-exists-error? a4f78@i/o-file-already-exists-error?) (set! a50c2@a4f7a@&i/o-file-already-exists-rtd a4f7a@&i/o-file-already-exists-rtd) (set! a50c3@a4f7c@&i/o-file-already-exists-rcd a4f7c@&i/o-file-already-exists-rcd) (set! a50c4@a4f82@a4f7d a4f82@a4f7d) (set! a50c5@a4f84@a4f7f a4f84@a4f7f) (set! a50c6@a4f86@a4f7e a4f86@a4f7e) (set! a50c7@a4f89@p? a4f89@p?) (set! a50c8@a4f8b@make-i/o-file-does-not-exist-error a4f8b@make-i/o-file-does-not-exist-error) (set! a50c9@a4f8d@i/o-file-does-not-exist-error? a4f8d@i/o-file-does-not-exist-error?) (set! a50ca@a4f8f@&i/o-file-does-not-exist-rtd a4f8f@&i/o-file-does-not-exist-rtd) (set! a50cb@a4f91@&i/o-file-does-not-exist-rcd a4f91@&i/o-file-does-not-exist-rcd) (set! a50cc@a4f99@a4f94 a4f99@a4f94) (set! a50cd@a4f9b@a4f96 a4f9b@a4f96) (set! a50ce@a4f9d@a4f95 a4f9d@a4f95) (set! a50cf@a4fa0@p? a4fa0@p?) (set! a50d0@a4fa2@make-i/o-port-error a4fa2@make-i/o-port-error) (set! a50d1@a4fa4@a4f93 a4fa4@a4f93) (set! a50d2@a4fa6@i/o-port-error? a4fa6@i/o-port-error?) (set! a50d3@a4fa8@i/o-error-port a4fa8@i/o-error-port) (set! a50d4@a4faa@&i/o-port-rtd a4faa@&i/o-port-rtd) (set! a50d5@a4fac@&i/o-port-rcd a4fac@&i/o-port-rcd) (set! a50d6@a4fb2@a4fad a4fb2@a4fad) (set! a50d7@a4fb4@a4faf a4fb4@a4faf) (set! a50d8@a4fb6@a4fae a4fb6@a4fae) (set! a50d9@a4fb9@p? a4fb9@p?) (set! a50da@a4fbb@make-i/o-decoding-error a4fbb@make-i/o-decoding-error) (set! a50db@a4fbd@i/o-decoding-error? a4fbd@i/o-decoding-error?) (set! a50dc@a4fbf@&i/o-decoding-rtd a4fbf@&i/o-decoding-rtd) (set! a50dd@a4fc1@&i/o-decoding-rcd a4fc1@&i/o-decoding-rcd) (set! a50de@a4fc9@a4fc4 a4fc9@a4fc4) (set! a50df@a4fcb@a4fc6 a4fcb@a4fc6) (set! a50e0@a4fcd@a4fc5 a4fcd@a4fc5) (set! a50e1@a4fd0@p? a4fd0@p?) (set! a50e2@a4fd2@make-i/o-encoding-error a4fd2@make-i/o-encoding-error) (set! a50e3@a4fd4@a4fc3 a4fd4@a4fc3) (set! a50e4@a4fd6@i/o-encoding-error? a4fd6@i/o-encoding-error?) (set! a50e5@a4fd8@i/o-encoding-error-char a4fd8@i/o-encoding-error-char) (set! a50e6@a4fda@&i/o-encoding-rtd a4fda@&i/o-encoding-rtd) (set! a50e7@a4fdc@&i/o-encoding-rcd a4fdc@&i/o-encoding-rcd) (set! a50e8@a4fe2@a4fdd a4fe2@a4fdd) (set! a50e9@a4fe4@a4fdf a4fe4@a4fdf) (set! a50ea@a4fe6@a4fde a4fe6@a4fde) (set! a50eb@a4fe9@p? a4fe9@p?) (set! a50ec@a4feb@make-no-infinities-violation a4feb@make-no-infinities-violation) (set! a50ed@a4fed@no-infinities-violation? a4fed@no-infinities-violation?) (set! a50ee@a4fef@&no-infinities-rtd a4fef@&no-infinities-rtd) (set! a50ef@a4ff1@&no-infinities-rcd a4ff1@&no-infinities-rcd) (set! a50f0@a4ff7@a4ff2 a4ff7@a4ff2) (set! a50f1@a4ff9@a4ff4 a4ff9@a4ff4) (set! a50f2@a4ffb@a4ff3 a4ffb@a4ff3) (set! a50f3@a4ffe@p? a4ffe@p?) (set! a50f4@a5000@make-no-nans-violation a5000@make-no-nans-violation) (set! a50f5@a5002@no-nans-violation? a5002@no-nans-violation?) (set! a50f6@a5004@&no-nans-rtd a5004@&no-nans-rtd) (set! a50f7@a5006@&no-nans-rcd a5006@&no-nans-rcd)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(psyntax primlocs)
((lambda (a50fb@add-library-path! a50fd@parse-and-add-library-path a50ff@for-each-with-index a5101@rpad a5103@condition-printer a5105@record->field-alist a5107@map-with-index a5109@repl a510b@trace-printer a510d@command-line a510f@local-library-path a5111@load/args a5113@load a5115@ironscheme-build a5117@eval-top-level a5119@compile-system-libraries a511b@compile a511d@compile->closure a511f@pre-compile-r6rs-file a5121@load-r6rs-top-level a5123@load-r6rs-top-level-sexp) (begin (set! a50fb@add-library-path! (lambda (a5146@path) (a2d64@a2bd1@library-path (append (a2d64@a2bd1@library-path) (list a5146@path))))) (set! a50fd@parse-and-add-library-path (lambda (a5148@paths a5149@message) ((lambda (a514c@t) (if a514c@t ((lambda (a514e@paths) (for-each (lambda (a5150@path) (if (file-exists? a5150@path) (a50fb@add-library-path! (expand-path a5150@path)) ((lambda () (begin '#f (format (current-error-port) a5149@message a5150@path)))))) (string-split a514e@paths '#\:))) a514c@t) (void))) a5148@paths))) (set! a50ff@for-each-with-index (lambda (a5152@proc a5153@lst) (letrec ((a5156@loop (lambda (a5158@i a5159@lst) (if (null? a5159@lst) (if '#f '#f (void)) (begin (a5152@proc a5158@i (car a5159@lst)) (a5156@loop (+ a5158@i '1) (cdr a5159@lst))))))) (a5156@loop '1 a5153@lst)))) (set! a5101@rpad (lambda (a515c@str a515d@pad a515e@n) ((lambda (a5162@rest) ((letrec ((a5164@loop (lambda (a5166@rest a5167@ret) (if (<= a5166@rest '0) a5167@ret (a5164@loop (- a5166@rest '1) (string-append a5167@ret a515d@pad)))))) a5164@loop) a5162@rest (format '"~a" a515c@str))) (- a515e@n (string-length (format '"~a" a515c@str)))))) (set! a5103@condition-printer (lambda (a516a@e a516b@port) ((lambda (a516f@max-condition-len) (begin (set! a516f@max-condition-len (apply max (map (lambda (a5180@c) (string-length (symbol->string (record-type-name (record-rtd a5180@c))))) (simple-conditions a516a@e)))) (begin (display '" Condition components:\n" a516b@port) (a50ff@for-each-with-index (lambda (a5170@i a5171@x) ((lambda (a5174@rtd a5175@fields-alist) (begin (format a516b@port '" ~d. ~a" a5170@i (a5101@rpad (symbol->string (record-type-name a5174@rtd)) '" " a516f@max-condition-len)) (if (null? a5175@fields-alist) (newline a516b@port) (void)) ((letrec ((a5178@loop (lambda (a517a@first a517b@fields-alist) (if (null? a517b@fields-alist) '() ((lambda () (begin '#f ((lambda (a517e@field) (begin (if (not a517a@first) (display (a5101@rpad '"" '" " (+ '4 a516f@max-condition-len)) a516b@port) (void)) (display '"       " a516b@port) (display (car a517e@field) a516b@port) (display '": " a516b@port) (write (cdr a517e@field) a516b@port) (newline a516b@port) (a5178@loop '#f (cdr a517b@fields-alist)))) (car a517b@fields-alist))))))))) a5178@loop) '#t a5175@fields-alist))) (record-rtd a5171@x) (a5105@record->field-alist a5171@x))) (simple-conditions a516a@e))))) '#f))) (set! a5105@record->field-alist (lambda (a5182@r) ((lambda (a5185@ref) (begin (set! a5185@ref (lambda (a5190@rtd a5191@i a5192@x) ((lambda (a5196@val) (if (symbol? a5196@val) (ungensym a5196@val) a5196@val)) ((record-accessor a5190@rtd a5191@i) a5192@x)))) ((letrec ((a5186@loop (lambda (a5188@ret a5189@rtd) (if a5189@rtd (a5186@loop (append a5188@ret (a5107@map-with-index (lambda (a518c@i a518d@field) (cons a518d@field (a5185@ref a5189@rtd a518c@i a5182@r))) (vector->list (record-type-field-names a5189@rtd)))) (record-type-parent a5189@rtd)) ((lambda () (begin '#f a5188@ret))))))) a5186@loop) '() (record-rtd a5182@r)))) '#f))) (set! a5107@map-with-index (lambda (a5198@proc a5199@lst) ((letrec ((a519c@loop (lambda (a519e@i a519f@lst a51a0@ret) (if (null? a519f@lst) (reverse a51a0@ret) (a519c@loop (+ a519e@i '1) (cdr a519f@lst) (cons (a5198@proc a519e@i (car a519f@lst)) a51a0@ret)))))) a519c@loop) '0 a5199@lst '()))) (set! a5109@repl (lambda a51a4@x ((lambda (a51a7@rec) (begin (set! a51a7@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (a51aa@a51a8) (lambda () (with-exception-handler (lambda (a51ac@e) ((call/cc (lambda (a51ae@a51a9) (a51aa@a51a8 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? a51ac@e) (a5103@condition-printer a51ac@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" a51ac@e))) (a51ae@a51a9 (lambda () (raise-continuable a51ac@e)))))))))) (lambda () ((letrec ((a51b0@loop (lambda (a51b2@line a51b3@accum) ((lambda (a51b7@parentheses-ok? a51b9@eval-string-print) (begin (set! a51b7@parentheses-ok? (lambda (a51be@text) ((letrec ((a51c0@loop (lambda (a51c2@chars a51c3@p0 a51c4@p1) (if (null? a51c2@chars) (= '0 a51c3@p0 a51c4@p1) ((lambda (a51c8@t) (if (memv a51c8@t '(#\()) (a51c0@loop (cdr a51c2@chars) (+ a51c3@p0 '1) a51c4@p1) (if (memv a51c8@t '(#\))) (a51c0@loop (cdr a51c2@chars) (- a51c3@p0 '1) a51c4@p1) (if (memv a51c8@t '(#\[)) (a51c0@loop (cdr a51c2@chars) a51c3@p0 (+ a51c4@p1 '1)) (if (memv a51c8@t '(#\])) (a51c0@loop (cdr a51c2@chars) a51c3@p0 (- a51c4@p1 '1)) ((lambda () (begin '#f (a51c0@loop (cdr a51c2@chars) a51c3@p0 a51c4@p1))))))))) (car a51c2@chars)))))) a51c0@loop) (string->list a51be@text) '0 '0))) (set! a51b9@eval-string-print (lambda (a51bc@text) (if (not (or (string=? '"\n" a51bc@text) (= '0 (string-length a51bc@text)))) (write (a5117@eval-top-level (call-with-port (open-string-input-port a51bc@text) read))) (void)))) (if (eof-object? a51b2@line) (begin (a51b9@eval-string-print a51b3@accum) (exit)) ((lambda (a51ba@current) (if (a51b7@parentheses-ok? a51ba@current) (a51b9@eval-string-print a51ba@current) (a51b0@loop (get-line (current-input-port)) a51ba@current))) (string-append a51b3@accum a51b2@line))))) '#f '#f)))) a51b0@loop) (get-line (current-input-port)) '""))))))) (newline) (a51a7@rec)))) (a51a7@rec))) '#f))) (set! a510b@trace-printer (a2ad0@a299d@make-parameter write)) (set! a510d@command-line (a2ad0@a299d@make-parameter (get-command-line))) (set! a510f@local-library-path (lambda (a51ca@filename) (a2d64@a2bd1@library-path))) (set! a5111@load/args (lambda (a51cc@filename . a51ce@args) (begin (apply a5121@load-r6rs-top-level a51cc@filename 'load a51ce@args) (void)))) (set! a5113@load (lambda (a51d0@filename) (begin (apply a5121@load-r6rs-top-level a51d0@filename 'load (a510d@command-line)) (void)))) (set! a5115@ironscheme-build (lambda () (a5113@load '"ironscheme-buildscript.ss"))) (set! a5117@eval-top-level (lambda (a51d2@x) (a4d22@a3213@eval a51d2@x (a4d3d@a3249@interaction-environment)))) (set! a5119@compile-system-libraries (lambda () (a5117@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! a511b@compile (lambda (a51d4@filename) (a5121@load-r6rs-top-level a51d4@filename 'compile))) (set! a511d@compile->closure (lambda (a51d6@filename) (a5121@load-r6rs-top-level a51d6@filename 'closure))) (set! a511f@pre-compile-r6rs-file (lambda (a51d8@filename) (a5121@load-r6rs-top-level a51d8@filename 'compile))) (set! a5121@load-r6rs-top-level (lambda (a51da@filename a51db@how . a51de@args) ((lambda (a51e4@a51e1 a51e5@a51e3) ((lambda (a51e8@swap) (dynamic-wind a51e8@swap (lambda () ((lambda (a51ea@x*) ((lambda (a51ec@t) (if (memv a51ec@t '(load)) ((lambda (a51f2@a51ef a51f3@a51f1) ((lambda (a51f6@swap) (dynamic-wind a51f6@swap (lambda () ((a4d3a@a3243@compile-r6rs-top-level a51ea@x*))) a51f6@swap)) (lambda () ((lambda (a51f8@t) (begin (a51f2@a51ef a51f3@a51f1) (set! a51f3@a51f1 a51f8@t))) (a51f2@a51ef))))) a510d@command-line (cons a51da@filename (car a51de@args))) (if (memv a51ec@t '(compile)) (begin (a4d3a@a3243@compile-r6rs-top-level a51ea@x*) (a2d68@a2bd9@serialize-all a2acd@a2997@serialize-library a2b19@a2adb@compile-core-expr)) (if '#f '#f (void))))) a51db@how)) (with-input-from-file a51da@filename (lambda () ((letrec ((a51fa@f (lambda () ((lambda (a51fc@x) (if (eof-object? a51fc@x) '() (cons a51fc@x (a51fa@f)))) (a2ac5@a2987@read-annotated))))) a51fa@f)))))) a51e8@swap)) (lambda () ((lambda (a51fe@t) (begin (a51e4@a51e1 a51e5@a51e3) (set! a51e5@a51e3 a51fe@t))) (a51e4@a51e1))))) a2d64@a2bd1@library-path (a510f@local-library-path a51da@filename)))) (set! a5123@load-r6rs-top-level-sexp (lambda (a5200@import-spec a5201@thunk) ((lambda (a5208@a5205 a5209@a5207) ((lambda (a520c@swap) (dynamic-wind a520c@swap (lambda () ((lambda (a5212@a520f a5213@a5211) ((lambda (a5216@swap) (dynamic-wind a5216@swap (lambda () ((a4d3a@a3243@compile-r6rs-top-level (list (cons 'import a5200@import-spec) (list a5201@thunk))))) a5216@swap)) (lambda () ((lambda (a5218@t) (begin (a5212@a520f a5213@a5211) (set! a5213@a5211 a5218@t))) (a5212@a520f))))) a510d@command-line '())) a520c@swap)) (lambda () ((lambda (a521a@t) (begin (a5208@a5205 a5209@a5207) (set! a5209@a5207 a521a@t))) (a5208@a5205))))) a2d64@a2bd1@library-path (a510f@local-library-path '"")))) (begin (begin (a2d69@a2bdb@current-precompiled-library-loader a2ace@a2999@load-serialized-library) (set-symbol-value! 'load a5113@load) (set-symbol-value! 'pre-compile-r6rs-file a511f@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs a5117@eval-top-level) (set-symbol-value! 'expanded2core a2b17@a2ad7@expanded->core) (set-symbol-value! 'trace-printer a510b@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (a5124@c) (condition (a5058@a4e62@make-non-continuable-violation) (a504e@a4e49@make-who-condition 'raise) (a5012@a4daa@make-message-condition '"returned from non-continuable exception") (a5044@a4e2e@make-irritants-condition (list a5124@c))))) (a50fd@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (a50fd@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (a50fb@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (a50fb@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (a50fb@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (a5126@prefix) (a2d65@a2bd3@library-extensions (a5126@prefix '".mosh" (a2d65@a2bd3@library-extensions)))) (lambda (a5128@ext a5129@ls) (append (map (lambda (a512c@x) (string-append a5128@ext a512c@x)) a5129@ls) a5129@ls))) ((lambda (a512e@args a512f@port) ((lambda (a5133@ref) (begin (set! a5133@ref (lambda (a513e@rtd a513f@i a5140@x) ((lambda (a5144@val) (if (symbol? a5144@val) (ungensym a5144@val) a5144@val)) ((record-accessor a513e@rtd a513f@i) a5140@x)))) (with-exception-handler (lambda (a5134@c) (if (condition? a5134@c) (a5103@condition-printer a5134@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" a5134@c))) (lambda () (if ((call/cc (lambda (a5138@a5136) (lambda () (with-exception-handler (lambda (a513a@c) ((call/cc (lambda (a513c@a5137) (a5138@a5136 (lambda () (if '#t '#f (a513c@a5137 (lambda () (raise-continuable a513a@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (a5123@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? a512e@args) (a5109@repl) ((lambda () (begin '#f (a5121@load-r6rs-top-level (car a512e@args) 'load (cdr a512e@args))))))))))) '#f)) (a510d@command-line) (current-error-port))) (set! a521c@a50fb@add-library-path! a50fb@add-library-path!) (set! a521d@a50fd@parse-and-add-library-path a50fd@parse-and-add-library-path) (set! a521e@a50ff@for-each-with-index a50ff@for-each-with-index) (set! a521f@a5101@rpad a5101@rpad) (set! a5220@a5103@condition-printer a5103@condition-printer) (set! a5221@a5105@record->field-alist a5105@record->field-alist) (set! a5222@a5107@map-with-index a5107@map-with-index) (set! a5223@a5109@repl a5109@repl) (set! a5224@a510b@trace-printer a510b@trace-printer) (set! a5225@a510d@command-line a510d@command-line) (set! a5226@a510f@local-library-path a510f@local-library-path) (set! a5227@a5111@load/args a5111@load/args) (set! a5228@a5113@load a5113@load) (set! a5229@a5115@ironscheme-build a5115@ironscheme-build) (set! a522a@a5117@eval-top-level a5117@eval-top-level) (set! a522b@a5119@compile-system-libraries a5119@compile-system-libraries) (set! a522c@a511b@compile a511b@compile) (set! a522d@a511d@compile->closure a511d@compile->closure) (set! a522e@a511f@pre-compile-r6rs-file a511f@pre-compile-r6rs-file) (set! a522f@a5121@load-r6rs-top-level a5121@load-r6rs-top-level) (set! a5230@a5123@load-r6rs-top-level-sexp a5123@load-r6rs-top-level-sexp)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
|#
