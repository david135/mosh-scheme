((case-lambda ((g2985) (g2985 'g2986 g2985))) (case-lambda ((g2988 g2989) (begin (set-symbol-value! g2988 g2989) (if (procedure? g2989) (set-symbol-value! g2988 g2989) (set-symbol-value! g2988 (case-lambda (g298a (error 'apply '"not a procedure" (symbol-value g2988))))))))))ition u296f@u295c u2971@u295d u2973@source-position-condition? u2975@source-position-file-name u2977@source-position-character u2979@make-struct-type u297b@library-version-mismatch-warning u297d@library-stale-warning u297f@file-locator-resolution-error u2981@set-label-binding! u2983@label-binding u2985@remove-location u2987@read-annotated u2989@annotation-stripped u298b@annotation? u298d@annotation-source u298f@annotation-expression u2991@scm->fasl u2993@fasl-save u2995@fasl-load u2997@serialize-library u2999@load-serialized-library u299b@read-library-source-file u299d@make-parameter) (begin (set! u295b@make-record-printer (lambda (u2a04@name u2a05@proc) display)) (set! u2964@u295f (make-record-type-descriptor '&source-position u500c@u4d53@&condition-rtd 'u2962 '#f '#f '#((immutable file-name) (immutable character)))) (set! u2966@u2961 '#f) (set! u2968@u2960 (make-record-constructor-descriptor u2964@u295f u500d@u4d55@&condition-rcd u2966@u2961)) (set! u296b@u295e (record-predicate u2964@u295f)) (set! u296d@make-source-position-condition (record-constructor u2968@u2960)) (set! u296f@u295c (record-accessor u2964@u295f '0)) (set! u2971@u295d (record-accessor u2964@u295f '1)) (set! u2973@source-position-condition? (condition-predicate u2964@u295f)) (set! u2975@source-position-file-name (condition-accessor u2964@u295f u296f@u295c)) (set! u2977@source-position-character (condition-accessor u2964@u295f u2971@u295d)) (set! u2979@make-struct-type (lambda u2a08@x (error 'make-struct-type '"mosh doesn't need this, because define-struct-macro is unused"))) (set! u297b@library-version-mismatch-warning (lambda (u2a0a@name u2a0b@depname u2a0c@filename) (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.\n" u2a0a@name u2a0b@depname u2a0c@filename))) (set! u297d@library-stale-warning (lambda (u2a10@name u2a11@filename) (format (current-error-port) '"WARNING: library ~s is stale; file ~s will be recompiled from source.\n" u2a10@name u2a11@filename))) (set! u297f@file-locator-resolution-error (lambda (u2a14@libname u2a15@failed-list u2a16@pending-list) ((lambda (u2a22@u2a1d u2a24@u2a1f u2a26@u2a1e u2a29@u2a1c u2a2b@make-library-resolution-condition u2a2d@u2a1a u2a2f@u2a1b u2a31@library-resolution-condition? u2a33@condition-library u2a35@condition-files u2a3d@u2a38 u2a3f@u2a3a u2a41@u2a39 u2a44@u2a37 u2a46@make-imported-from-condition u2a48@u2a36 u2a4a@imported-from-condition? u2a4c@importing-library) (begin (set! u2a22@u2a1d (make-record-type-descriptor '&library-resolution u500c@u4d53@&condition-rtd 'u2a20 '#f '#f '#((immutable library) (immutable files)))) (set! u2a24@u2a1f '#f) (set! u2a26@u2a1e (make-record-constructor-descriptor u2a22@u2a1d u500d@u4d55@&condition-rcd u2a24@u2a1f)) (set! u2a29@u2a1c (record-predicate u2a22@u2a1d)) (set! u2a2b@make-library-resolution-condition (record-constructor u2a26@u2a1e)) (set! u2a2d@u2a1a (record-accessor u2a22@u2a1d '0)) (set! u2a2f@u2a1b (record-accessor u2a22@u2a1d '1)) (set! u2a31@library-resolution-condition? (condition-predicate u2a22@u2a1d)) (set! u2a33@condition-library (condition-accessor u2a22@u2a1d u2a2d@u2a1a)) (set! u2a35@condition-files (condition-accessor u2a22@u2a1d u2a2f@u2a1b)) (set! u2a3d@u2a38 (make-record-type-descriptor '&imported-from u500c@u4d53@&condition-rtd 'u2a3b '#f '#f '#((immutable importing-library)))) (set! u2a3f@u2a3a '#f) (set! u2a41@u2a39 (make-record-constructor-descriptor u2a3d@u2a38 u500d@u4d55@&condition-rcd u2a3f@u2a3a)) (set! u2a44@u2a37 (record-predicate u2a3d@u2a38)) (set! u2a46@make-imported-from-condition (record-constructor u2a41@u2a39)) (set! u2a48@u2a36 (record-accessor u2a3d@u2a38 '0)) (set! u2a4a@imported-from-condition? (condition-predicate u2a3d@u2a38)) (set! u2a4c@importing-library (condition-accessor u2a3d@u2a38 u2a48@u2a36)) (raise (apply condition (u502c@u4ded@make-error) (u504e@u4e49@make-who-condition 'expander) (u5012@u4daa@make-message-condition '"cannot locate library in library-path") (u2a2b@make-library-resolution-condition u2a14@libname u2a15@failed-list) (map u2a46@make-imported-from-condition u2a16@pending-list))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! u2981@set-label-binding! (lambda (u2a4d@label u2a4e@binding) (set-symbol-value! u2a4d@label u2a4e@binding))) (set! u2983@label-binding (lambda (u2a51@label) ((call/cc (lambda (u2a55@u2a53) (lambda () (with-exception-handler (lambda (u2a57@c) ((call/cc (lambda (u2a59@u2a54) (u2a55@u2a53 (lambda () (if '#t '#f (u2a59@u2a54 (lambda () (raise-continuable u2a57@c)))))))))) (lambda () (symbol-value u2a51@label))))))))) (set! u2985@remove-location (lambda (u2a5b@x) (gensym u2a5b@x))) (set! u2987@read-annotated read) (set! u2989@annotation-stripped (lambda (u2a5d@x) (u298f@annotation-expression u2a5d@x))) (set! u298b@annotation? (lambda (u2a5f@x) (source-info u2a5f@x))) (set! u298d@annotation-source (lambda (u2a61@x) (source-info u2a61@x))) (set! u298f@annotation-expression (lambda (u2a63@x) (if (pair? u2a63@x) (cons (car u2a63@x) (cdr u2a63@x)) (display '"line:46\n")))) (set! u2991@scm->fasl (lambda (u2a65@filename) (string-append u2a65@filename '".mosh-fasl"))) (set! u2993@fasl-save (lambda (u2a67@filename u2a68@obj) (call-with-port (open-file-output-port u2a67@filename) (lambda (u2a6b@port) ((symbol-value 'fasl-write!) u2a68@obj u2a6b@port))))) (set! u2995@fasl-load (lambda (u2a6d@filename) (call-with-port (open-file-input-port u2a6d@filename) (symbol-value 'fasl-read!)))) (set! u2997@serialize-library (lambda (u2a6f@filename u2a70@obj) (begin (format '#t '"serialize-library ~a\n..." u2a6f@filename) ((lambda (u2a73@expanded2core) ((lambda (u2a75@compile) ((lambda (u2a77@code) ((lambda (u2a79@pivot) ((lambda (u2a7b@visit) ((lambda () (begin (set-car! u2a79@pivot u2a7b@visit) ((lambda (u2a7d@pivot) ((lambda (u2a7f@invoke) ((lambda () (set-car! u2a7d@pivot u2a7f@invoke)))) (u2a75@compile (u2a73@expanded2core (car u2a7d@pivot))))) (cdr u2a79@pivot)))))) (u2a75@compile (u2a73@expanded2core (car u2a79@pivot))))) (cddddr (cddddr u2a77@code)))) u2a70@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (u2a81@fasl-file) (begin (if (file-exists? u2a81@fasl-file) (delete-file u2a81@fasl-file) (void)) ((call/cc (lambda (u2a85@u2a83) (lambda () (with-exception-handler (lambda (u2a87@c) ((call/cc (lambda (u2a89@u2a84) (u2a85@u2a83 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " u2a6f@filename) (if (file-exists? u2a81@fasl-file) (delete-file u2a81@fasl-file) (void)) '#f) (u2a89@u2a84 (lambda () (raise-continuable u2a87@c)))))))))) (lambda () (begin (u2993@fasl-save u2a81@fasl-file u2a70@obj) (display '"OK\n")))))))))) (u2991@scm->fasl u2a6f@filename))))) (set! u2999@load-serialized-library (lambda (u2a8b@filename u2a8c@obj) ((lambda (u2a8f@fasl-file) (if (and (file-exists? u2a8f@fasl-file) ((symbol-value 'file-newer?) u2a8f@fasl-file u2a8b@filename)) ((lambda (u2a91@expanded2core) ((lambda (u2a93@eval-compiled-core) ((lambda (u2a95@code) ((lambda (u2a97@pivot) ((lambda (u2a99@visit) ((lambda (u2a9b@visit-proc) ((lambda () (begin (set-car! u2a97@pivot u2a9b@visit-proc) ((lambda (u2a9d@pivot) ((lambda (u2a9f@invoke) ((lambda () (begin (set-car! u2a9d@pivot (lambda () (u2a93@eval-compiled-core u2a9f@invoke))) (apply u2a8c@obj u2a95@code))))) (car u2a9d@pivot))) (cdr u2a97@pivot)) '#t)))) (lambda () (u2a93@eval-compiled-core u2a99@visit)))) (car u2a97@pivot))) (cddddr (cddddr u2a95@code)))) (u2995@fasl-load u2a8f@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (u2991@scm->fasl u2a8b@filename)))) (set! u299b@read-library-source-file (lambda (u2aa1@file-name) (with-input-from-file u2aa1@file-name u2987@read-annotated))) (set! u299d@make-parameter (lambda u2ab1 ((lambda (u2ab2) (if (= u2ab2 '1) (apply (lambda (u2aa3@x) (u299d@make-parameter u2aa3@x (lambda (u2aa5@x) u2aa5@x))) u2ab1) (if (= u2ab2 '2) (apply (lambda (u2aa7@x u2aa8@fender) ((lambda (u2aab@x) (lambda u2aaf ((lambda (u2ab0) (if (= u2ab0 '0) (apply (lambda () u2aab@x) u2aaf) (if (= u2ab0 '1) (apply (lambda (u2aad@v) (set! u2aab@x (u2aa8@fender u2aad@v))) u2aaf) (error 'apply '"invalid arg count")))) (length u2aaf)))) (u2aa8@fender u2aa7@x))) u2ab1) (error 'apply '"invalid arg count")))) (length u2ab1)))) (begin (set! u2ab3@u295b@make-record-printer u295b@make-record-printer) (set! u2ab4@u2964@u295f u2964@u295f) (set! u2ab5@u2966@u2961 u2966@u2961) (set! u2ab6@u2968@u2960 u2968@u2960) (set! u2ab7@u296b@u295e u296b@u295e) (set! u2ab8@u296d@make-source-position-condition u296d@make-source-position-condition) (set! u2ab9@u296f@u295c u296f@u295c) (set! u2aba@u2971@u295d u2971@u295d) (set! u2abb@u2973@source-position-condition? u2973@source-position-condition?) (set! u2abc@u2975@source-position-file-name u2975@source-position-file-name) (set! u2abd@u2977@source-position-character u2977@source-position-character) (set! u2abe@u2979@make-struct-type u2979@make-struct-type) (set! u2abf@u297b@library-version-mismatch-warning u297b@library-version-mismatch-warning) (set! u2ac0@u297d@library-stale-warning u297d@library-stale-warning) (set! u2ac1@u297f@file-locator-resolution-error u297f@file-locator-resolution-error) (set! u2ac2@u2981@set-label-binding! u2981@set-label-binding!) (set! u2ac3@u2983@label-binding u2983@label-binding) (set! u2ac4@u2985@remove-location u2985@remove-location) (set! u2ac5@u2987@read-annotated u2987@read-annotated) (set! u2ac6@u2989@annotation-stripped u2989@annotation-stripped) (set! u2ac7@u298b@annotation? u298b@annotation?) (set! u2ac8@u298d@annotation-source u298d@annotation-source) (set! u2ac9@u298f@annotation-expression u298f@annotation-expression) (set! u2aca@u2991@scm->fasl u2991@scm->fasl) (set! u2acb@u2993@fasl-save u2993@fasl-save) (set! u2acc@u2995@fasl-load u2995@fasl-load) (set! u2acd@u2997@serialize-library u2997@serialize-library) (set! u2ace@u2999@load-serialized-library u2999@load-serialized-library) (set! u2acf@u299b@read-library-source-file u299b@read-library-source-file) (set! u2ad0@u299d@make-parameter u299d@make-parameter)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (u2ad5@current-primitive-locations u2ad7@expanded->core u2ad9@pretty-print u2adb@compile-core-expr u2add@compile-core-expr-to-port) (begin (set! u2ad5@current-primitive-locations (u2ad0@u299d@make-parameter (lambda (u2ade@x) '#f) (lambda (u2ae0@p) u2ae0@p))) (set! u2ad7@expanded->core (lambda (u2ae2@x) ((lambda (u2ae5@f) (begin (set! u2ae5@f (lambda (u2ae6@x) (if (pair? u2ae6@x) ((lambda (u2ae8@t) (if (memv u2ae8@t '(quote)) u2ae6@x (if (memv u2ae8@t '(case-lambda)) (cons 'case-lambda (map (lambda (u2aea@x) (cons (car u2aea@x) (map u2ae5@f (cdr u2aea@x)))) (cdr u2ae6@x))) (if (memv u2ae8@t '(lambda)) (cons* 'lambda (cadr u2ae6@x) (map u2ae5@f (cddr u2ae6@x))) (if (memv u2ae8@t '(letrec)) ((lambda (u2aec@bindings u2aed@body*) ((lambda (u2af0@lhs* u2af1@rhs*) (cons* 'letrec (map list u2af0@lhs* (map u2ae5@f u2af1@rhs*)) (map u2ae5@f u2aed@body*))) (map car u2aec@bindings) (map cadr u2aec@bindings))) (cadr u2ae6@x) (cddr u2ae6@x)) (if (memv u2ae8@t '(letrec*)) ((lambda (u2af4@bindings u2af5@body*) ((lambda (u2af8@lhs* u2af9@rhs*) (cons* 'letrec* (map list u2af8@lhs* (map u2ae5@f u2af9@rhs*)) (map u2ae5@f u2af5@body*))) (map car u2af4@bindings) (map cadr u2af4@bindings))) (cadr u2ae6@x) (cddr u2ae6@x)) (if (memv u2ae8@t '(library-letrec*)) ((lambda (u2afc@name u2afd@x) ((lambda (u2b00@bindings u2b01@body*) ((lambda (u2b04@lhs* u2b05@lhs** u2b06@rhs*) (cons* 'library-letrec* u2afc@name (map list u2b04@lhs* u2b05@lhs** (map u2ae5@f u2b06@rhs*)) (map u2ae5@f u2b01@body*))) (map car u2b00@bindings) (map cadr u2b00@bindings) (map caddr u2b00@bindings))) (cadr u2afd@x) (cddr u2afd@x))) (cadr u2ae6@x) (cdr u2ae6@x)) (if (memv u2ae8@t '(begin)) (cons 'begin (map u2ae5@f (cdr u2ae6@x))) (if (memv u2ae8@t '(set!)) (list 'set! (cadr u2ae6@x) (u2ae5@f (caddr u2ae6@x))) (if (memv u2ae8@t '(primitive)) ((lambda (u2b0a@op) ((lambda (u2b0c@t) (if u2b0c@t ((lambda (u2b0e@loc) u2b0e@loc) u2b0c@t) ((lambda () (begin '#f u2b0a@op))))) ((u2ad5@current-primitive-locations) u2b0a@op))) (cadr u2ae6@x)) (if (memv u2ae8@t '(define)) u2ae6@x ((lambda () (begin '#f (if (list? u2ae6@x) (map u2ae5@f u2ae6@x) (error 'rewrite '"invalid form ~s ~s" u2ae6@x (list? u2ae6@x))))))))))))))))) (car u2ae6@x)) ((lambda () (begin '#f u2ae6@x)))))) (u2ae5@f u2ae2@x))) '#f))) (set! u2ad9@pretty-print write) (set! u2adb@compile-core-expr (lambda (u2b10@x) (u2ad7@expanded->core u2b10@x))) (set! u2add@compile-core-expr-to-port (lambda (u2b12@x u2b13@p) (u2ad9@pretty-print (u2ad7@expanded->core u2b12@x) u2b13@p))) (begin (set! u2b16@u2ad5@current-primitive-locations u2ad5@current-primitive-locations) (set! u2b17@u2ad7@expanded->core u2ad7@expanded->core) (set! u2b18@u2ad9@pretty-print u2ad9@pretty-print) (set! u2b19@u2adb@compile-core-expr u2adb@compile-core-expr) (set! u2b1a@u2add@compile-core-expr-to-port u2add@compile-core-expr-to-port)))) '#f '#f '#f '#f '#f)
((lambda (u2b1d@base-of-interaction-library) (begin (set! u2b1d@base-of-interaction-library (lambda () '(ikarus))) (set! u2b6e@u2b1d@base-of-interaction-library u2b1d@base-of-interaction-library))) '#f)
((lambda (u2b78@make-collection u2b7a@current-library-collection u2b80@u2b7b u2b82@u2b7d u2b84@u2b7c u2b87@library? u2b89@make-library u2b8b@library-id u2b8d@library-name u2b8f@library-version u2b91@library-imp* u2b93@library-vis* u2b95@library-inv* u2b97@library-subst u2b99@library-env u2b9b@library-visit-state u2b9d@library-invoke-state u2b9f@library-visit-code u2ba1@library-invoke-code u2ba3@library-guard-code u2ba5@library-guard-req* u2ba7@library-visible? u2ba9@library-source-file-name u2bab@set-library-id! u2bad@set-library-name! u2baf@set-library-version! u2bb1@set-library-imp*! u2bb3@set-library-vis*! u2bb5@set-library-inv*! u2bb7@set-library-subst! u2bb9@set-library-env! u2bbb@set-library-visit-state! u2bbd@set-library-invoke-state! u2bbf@set-library-visit-code! u2bc1@set-library-invoke-code! u2bc3@set-library-guard-code! u2bc5@set-library-guard-req*! u2bc7@set-library-visible?! u2bc9@set-library-source-file-name! u2bcb@rp u2bcd@find-dependencies u2bcf@find-library-by u2bd1@library-path u2bd3@library-extensions u2bd5@library-name->file-name u2bd7@file-locator u2bd9@serialize-all u2bdb@current-precompiled-library-loader u2bdd@try-load-from-file u2bdf@library-loader u2be1@current-library-expander u2be3@external-pending-libraries u2be5@find-external-library u2be7@find-library-by-name u2be9@uninstall-library u2beb@library-exists? u2bed@find-library-by-spec/die u2bef@label->binding-table u2bf1@install-library-record u2bf3@install-library u2bf5@imported-label->binding u2bf7@invoke-library u2bf9@visit-library u2bfb@invoke-library-by-spec u2bfd@installed-libraries u2bff@library-spec) (begin (set! u2b78@make-collection (lambda () ((lambda (u2c00@set) ((lambda (u2c03@set-cons) (begin (set! u2c03@set-cons (lambda (u2c0c@x u2c0d@ls) (if (memq u2c0c@x u2c0d@ls) u2c0d@ls ((lambda () (begin '#f (cons u2c0c@x u2c0d@ls))))))) (lambda u2c0a ((lambda (u2c0b) (if (= u2c0b '0) (apply (lambda () u2c00@set) u2c0a) (if (= u2c0b '1) (apply (lambda (u2c04@x) (set! u2c00@set (u2c03@set-cons u2c04@x u2c00@set))) u2c0a) (if (= u2c0b '2) (apply (lambda (u2c06@x u2c07@del?) (if u2c07@del? (set! u2c00@set (remq u2c06@x u2c00@set)) (set! u2c00@set (u2c03@set-cons u2c06@x u2c00@set)))) u2c0a) (error 'apply '"invalid arg count"))))) (length u2c0a))))) '#f)) '()))) (set! u2b7a@current-library-collection (u2ad0@u299d@make-parameter (u2b78@make-collection) (lambda (u2c10@x) (begin (if (not (procedure? u2c10@x)) (assertion-violation 'current-library-collection '"not a procedure" u2c10@x) (void)) u2c10@x)))) (set! u2b80@u2b7b (make-record-type-descriptor 'library '#f 'u2b7e '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable guard-code) (mutable guard-req*) (mutable visible?) (mutable source-file-name)))) (set! u2b82@u2b7d '#f) (set! u2b84@u2b7c (make-record-constructor-descriptor u2b80@u2b7b '#f u2b82@u2b7d)) (set! u2b87@library? (record-predicate u2b80@u2b7b)) (set! u2b89@make-library (record-constructor u2b84@u2b7c)) (set! u2b8b@library-id (record-accessor u2b80@u2b7b '0)) (set! u2b8d@library-name (record-accessor u2b80@u2b7b '1)) (set! u2b8f@library-version (record-accessor u2b80@u2b7b '2)) (set! u2b91@library-imp* (record-accessor u2b80@u2b7b '3)) (set! u2b93@library-vis* (record-accessor u2b80@u2b7b '4)) (set! u2b95@library-inv* (record-accessor u2b80@u2b7b '5)) (set! u2b97@library-subst (record-accessor u2b80@u2b7b '6)) (set! u2b99@library-env (record-accessor u2b80@u2b7b '7)) (set! u2b9b@library-visit-state (record-accessor u2b80@u2b7b '8)) (set! u2b9d@library-invoke-state (record-accessor u2b80@u2b7b '9)) (set! u2b9f@library-visit-code (record-accessor u2b80@u2b7b '10)) (set! u2ba1@library-invoke-code (record-accessor u2b80@u2b7b '11)) (set! u2ba3@library-guard-code (record-accessor u2b80@u2b7b '12)) (set! u2ba5@library-guard-req* (record-accessor u2b80@u2b7b '13)) (set! u2ba7@library-visible? (record-accessor u2b80@u2b7b '14)) (set! u2ba9@library-source-file-name (record-accessor u2b80@u2b7b '15)) (set! u2bab@set-library-id! (record-mutator u2b80@u2b7b '0)) (set! u2bad@set-library-name! (record-mutator u2b80@u2b7b '1)) (set! u2baf@set-library-version! (record-mutator u2b80@u2b7b '2)) (set! u2bb1@set-library-imp*! (record-mutator u2b80@u2b7b '3)) (set! u2bb3@set-library-vis*! (record-mutator u2b80@u2b7b '4)) (set! u2bb5@set-library-inv*! (record-mutator u2b80@u2b7b '5)) (set! u2bb7@set-library-subst! (record-mutator u2b80@u2b7b '6)) (set! u2bb9@set-library-env! (record-mutator u2b80@u2b7b '7)) (set! u2bbb@set-library-visit-state! (record-mutator u2b80@u2b7b '8)) (set! u2bbd@set-library-invoke-state! (record-mutator u2b80@u2b7b '9)) (set! u2bbf@set-library-visit-code! (record-mutator u2b80@u2b7b '10)) (set! u2bc1@set-library-invoke-code! (record-mutator u2b80@u2b7b '11)) (set! u2bc3@set-library-guard-code! (record-mutator u2b80@u2b7b '12)) (set! u2bc5@set-library-guard-req*! (record-mutator u2b80@u2b7b '13)) (set! u2bc7@set-library-visible?! (record-mutator u2b80@u2b7b '14)) (set! u2bc9@set-library-source-file-name! (record-mutator u2b80@u2b7b '15)) (set! u2bcb@rp (u2ab3@u295b@make-record-printer 'library (lambda (u2c12@x u2c13@p u2c14@wr) (begin (if (not (u2b87@library? u2c12@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (u2b8f@library-version u2c12@x)) (u2b8d@library-name u2c12@x) (append (u2b8d@library-name u2c12@x) (list (u2b8f@library-version u2c12@x))))) u2c13@p))))) (set! u2bcd@find-dependencies (lambda (u2c18@ls) (if (null? u2c18@ls) '() ((lambda () (begin '#f (assertion-violation 'find-dependencies '"cannot handle deps yet"))))))) (set! u2bcf@find-library-by (lambda (u2c1a@pred) ((letrec ((u2c1c@f (lambda (u2c1e@ls) (if (null? u2c1e@ls) '#f (if (u2c1a@pred (car u2c1e@ls)) (car u2c1e@ls) ((lambda () (begin '#f (u2c1c@f (cdr u2c1e@ls)))))))))) u2c1c@f) ((u2b7a@current-library-collection))))) (set! u2bd1@library-path (u2ad0@u299d@make-parameter '(".") (lambda (u2c20@x) (if (and (list? u2c20@x) (for-all string? u2c20@x)) (map (lambda (u2c22@x) u2c22@x) u2c20@x) (assertion-violation 'library-path '"not a list of strings" u2c20@x))))) (set! u2bd3@library-extensions (u2ad0@u299d@make-parameter '(".sls" ".ss" ".scm") (lambda (u2c24@x) (if (and (list? u2c24@x) (for-all string? u2c24@x)) (map (lambda (u2c26@x) u2c26@x) u2c24@x) (assertion-violation 'library-extensions '"not a list of strings" u2c24@x))))) (set! u2bd5@library-name->file-name (lambda (u2c28@ls) (call-with-values (lambda () (open-string-output-port)) (lambda (u2c2e@u2c2b u2c2f@u2c2d) ((lambda (u2c32@extract u2c33@p) ((lambda (u2c37@display-hex u2c39@main*?) (begin (set! u2c37@display-hex (lambda (u2c4c@n) (if (<= '0 u2c4c@n '9) (display u2c4c@n u2c33@p) ((lambda () (begin '#f (write-char (integer->char (+ (char->integer '#\a) (- u2c4c@n '10))) u2c33@p))))))) (set! u2c39@main*? (lambda (u2c48@x) (and (>= (string-length u2c48@x) '4) (string=? (substring u2c48@x '0 '4) '"main") (for-all (lambda (u2c4a@x) (char=? u2c4a@x '#\_)) (string->list (substring u2c48@x '4 (string-length u2c48@x))))))) (begin ((letrec ((u2c3a@f (lambda (u2c3c@x u2c3d@ls u2c3e@fst) (begin (write-char '#\/ u2c33@p) ((lambda (u2c42@name) (begin (for-each (lambda (u2c44@n) ((lambda (u2c46@c) (if (or (char<=? '#\a u2c46@c '#\z) (char<=? '#\A u2c46@c '#\Z) (char<=? '#\0 u2c46@c '#\9) (memv u2c46@c '(#\. #\- #\+ #\_))) (write-char u2c46@c u2c33@p) ((lambda () (begin '#f (write-char '#\% u2c33@p) (u2c37@display-hex (quotient u2c44@n '16)) (u2c37@display-hex (remainder u2c44@n '16))))))) (integer->char u2c44@n))) (bytevector->u8-list (string->utf8 u2c42@name))) (if (null? u2c3d@ls) (if (and (not u2c3e@fst) (u2c39@main*? u2c42@name)) (write-char '#\_ u2c33@p) (void)) (u2c3a@f (car u2c3d@ls) (cdr u2c3d@ls) '#f)))) (symbol->string u2c3c@x)))))) u2c3a@f) (car u2c28@ls) (cdr u2c28@ls) '#t) (u2c32@extract)))) '#f '#f)) u2c2f@u2c2d u2c2e@u2c2b))))) (set! u2bd7@file-locator (u2ad0@u299d@make-parameter (lambda (u2c4e@x) ((lambda (u2c50@str) ((letrec ((u2c52@f (lambda (u2c54@ls u2c55@exts u2c56@failed-list) (if (null? u2c54@ls) (u2ac1@u297f@file-locator-resolution-error u2c4e@x (reverse u2c56@failed-list) ((lambda (u2c5a@ls) (if (null? u2c5a@ls) (error 'library-manager '"BUG") (cdr u2c5a@ls))) (u2be3@external-pending-libraries))) (if (null? u2c55@exts) (u2c52@f (cdr u2c54@ls) (u2bd3@library-extensions) u2c56@failed-list) ((lambda () (begin '#f ((lambda (u2c5c@name) (if (file-exists? u2c5c@name) u2c5c@name (u2c52@f u2c54@ls (cdr u2c55@exts) (cons u2c5c@name u2c56@failed-list)))) (string-append (car u2c54@ls) u2c50@str (car u2c55@exts))))))))))) u2c52@f) (u2bd1@library-path) (u2bd3@library-extensions) '())) (u2bd5@library-name->file-name u2c4e@x))) (lambda (u2c5e@f) (if (procedure? u2c5e@f) u2c5e@f (assertion-violation 'file-locator '"not a procedure" u2c5e@f))))) (set! u2bd9@serialize-all (lambda (u2c60@serialize u2c61@compile) ((lambda (u2c65@library-desc) (begin (set! u2c65@library-desc (lambda (u2c68@x) (list (u2b8b@library-id u2c68@x) (u2b8d@library-name u2c68@x)))) (for-each (lambda (u2c66@x) (if (u2ba9@library-source-file-name u2c66@x) (u2c60@serialize (u2ba9@library-source-file-name u2c66@x) (list (u2b8b@library-id u2c66@x) (u2b8d@library-name u2c66@x) (u2b8f@library-version u2c66@x) (map u2c65@library-desc (u2b91@library-imp* u2c66@x)) (map u2c65@library-desc (u2b93@library-vis* u2c66@x)) (map u2c65@library-desc (u2b95@library-inv* u2c66@x)) (u2b97@library-subst u2c66@x) (u2b99@library-env u2c66@x) (u2c61@compile (u2b9f@library-visit-code u2c66@x)) (u2c61@compile (u2ba1@library-invoke-code u2c66@x)) (u2c61@compile (u2ba3@library-guard-code u2c66@x)) (map u2c65@library-desc (u2ba5@library-guard-req* u2c66@x)) (u2ba7@library-visible? u2c66@x))) (void))) ((u2b7a@current-library-collection))))) '#f))) (set! u2bdb@current-precompiled-library-loader (u2ad0@u299d@make-parameter (lambda (u2c6a@filename u2c6b@sk) '#f))) (set! u2bdd@try-load-from-file (lambda (u2c6e@filename) ((u2bdb@current-precompiled-library-loader) u2c6e@filename (lambda u2ca0 ((lambda (u2ca1) (if (= u2ca1 '13) (apply (lambda (u2c70@id u2c71@name u2c72@ver u2c73@imp* u2c74@vis* u2c75@inv* u2c76@exp-subst u2c77@exp-env u2c78@visit-proc u2c79@invoke-proc u2c7a@guard-proc u2c7b@guard-req* u2c7c@visible?) ((letrec ((u2c8a@f (lambda (u2c8c@deps) (if (null? u2c8c@deps) (begin (for-each (lambda (u2c8e@x) ((lambda (u2c90@label u2c91@dname) ((lambda (u2c94@lib) (u2bf7@invoke-library u2c94@lib)) (u2be7@find-library-by-name u2c91@dname))) (car u2c8e@x) (cadr u2c8e@x))) u2c7b@guard-req*) (if (u2c7a@guard-proc) (begin (u2ac0@u297d@library-stale-warning u2c71@name u2c6e@filename) '#f) ((lambda () (begin '#f (u2bf3@install-library u2c70@id u2c71@name u2c72@ver u2c73@imp* u2c74@vis* u2c75@inv* u2c76@exp-subst u2c77@exp-env u2c78@visit-proc u2c79@invoke-proc '#f '#f ''#f '() u2c7c@visible? '#f) '#t))))) ((lambda () (begin '#f ((lambda (u2c96@d) ((lambda (u2c98@label u2c99@dname) ((lambda (u2c9c@l) (if (and (u2b87@library? u2c9c@l) (eq? u2c98@label (u2b8b@library-id u2c9c@l))) (u2c8a@f (cdr u2c8c@deps)) ((lambda () (begin '#f (u2abf@u297b@library-version-mismatch-warning u2c71@name u2c99@dname u2c6e@filename) '#f))))) (u2be7@find-library-by-name u2c99@dname))) (car u2c96@d) (cadr u2c96@d))) (car u2c8c@deps))))))))) u2c8a@f) (append u2c73@imp* u2c74@vis* u2c75@inv* u2c7b@guard-req*))) u2ca0) (if (>= u2ca1 '0) (apply (lambda u2c9e@others '#f) u2ca0) (error 'apply '"invalid arg count")))) (length u2ca0)))))) (set! u2bdf@library-loader (u2ad0@u299d@make-parameter (lambda (u2ca2@x) ((lambda (u2ca4@file-name) (if (not u2ca4@file-name) (assertion-violation '#f '"cannot find library" u2ca2@x) (or (u2bdd@try-load-from-file u2ca4@file-name) ((lambda () (begin '#f ((u2be1@current-library-expander) (u2acf@u299b@read-library-source-file u2ca4@file-name) u2ca4@file-name (lambda (u2ca6@name) (if (not (fast-equal? u2ca6@name u2ca2@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (u2cac@u2ca9 u2cad@u2cab) ((lambda (u2cb0@e u2cb1@p) (begin (display '"expected to find library " u2cb1@p) (write u2ca2@x u2cb1@p) (display '" in file " u2cb1@p) (display u2ca4@file-name u2cb1@p) (display '", found " u2cb1@p) (write u2ca6@name u2cb1@p) (display '" instead" u2cb1@p) (u2cb0@e))) u2cad@u2cab u2cac@u2ca9)))) (void)))))))))) ((u2bd7@file-locator) u2ca2@x))) (lambda (u2cb4@f) (if (procedure? u2cb4@f) u2cb4@f (assertion-violation 'library-locator '"not a procedure" u2cb4@f))))) (set! u2be1@current-library-expander (u2ad0@u299d@make-parameter (lambda (u2cb6@x) (assertion-violation 'library-expander '"not initialized")) (lambda (u2cb8@f) (if (procedure? u2cb8@f) u2cb8@f (assertion-violation 'library-expander '"not a procedure" u2cb8@f))))) (set! u2be3@external-pending-libraries (u2ad0@u299d@make-parameter '())) (set! u2be5@find-external-library (lambda (u2cba@name) (begin (if (member u2cba@name (u2be3@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" u2cba@name) (void)) ((lambda (u2cc0@u2cbd u2cc1@u2cbf) ((lambda (u2cc4@swap) (dynamic-wind u2cc4@swap (lambda () (begin ((u2bdf@library-loader) u2cba@name) (or (u2bcf@find-library-by (lambda (u2cc6@x) (fast-equal? (u2b8d@library-name u2cc6@x) u2cba@name))) (assertion-violation '#f '"handling external library did not yield the correct library" u2cba@name)))) u2cc4@swap)) (lambda () ((lambda (u2cc8@t) (begin (u2cc0@u2cbd u2cc1@u2cbf) (set! u2cc1@u2cbf u2cc8@t))) (u2cc0@u2cbd))))) u2be3@external-pending-libraries (cons u2cba@name (u2be3@external-pending-libraries)))))) (set! u2be7@find-library-by-name (lambda (u2cca@name) (or (u2bcf@find-library-by (lambda (u2ccc@x) (fast-equal? (u2b8d@library-name u2ccc@x) u2cca@name))) (u2be5@find-external-library u2cca@name)))) (set! u2be9@uninstall-library (lambda u2ce0 ((lambda (u2ce1) (if (= u2ce1 '2) (apply (lambda (u2cce@name u2ccf@err?) ((lambda (u2cd3@who) (begin (set! u2cd3@who 'uninstall-library) ((lambda (u2cd4@lib) (begin (if (and u2ccf@err? (not u2cd4@lib)) (assertion-violation u2cd3@who '"library not installed" u2cce@name) (void)) ((u2b7a@current-library-collection) u2cd4@lib '#t) (for-each (lambda (u2cd6@x) ((lambda (u2cd8@label u2cd9@binding) (begin (u2ac4@u2985@remove-location u2cd8@label) (if (memq (car u2cd9@binding) '(global global-macro global-macro! global-ctv)) (u2ac4@u2985@remove-location (cdr u2cd9@binding)) (void)))) (car u2cd6@x) (cdr u2cd6@x))) (u2b99@library-env u2cd4@lib)))) (u2bcf@find-library-by (lambda (u2cdc@x) (fast-equal? (u2b8d@library-name u2cdc@x) u2cce@name)))))) '#f)) u2ce0) (if (= u2ce1 '1) (apply (lambda (u2cde@name) (u2be9@uninstall-library u2cde@name '#t)) u2ce0) (error 'apply '"invalid arg count")))) (length u2ce0)))) (set! u2beb@library-exists? (lambda (u2ce2@name) (and (u2bcf@find-library-by (lambda (u2ce4@x) (fast-equal? (u2b8d@library-name u2ce4@x) u2ce2@name))) '#t))) (set! u2bed@find-library-by-spec/die (lambda (u2ce6@spec) ((lambda (u2ce8@id) (or (u2bcf@find-library-by (lambda (u2cea@x) (eq? u2ce8@id (u2b8b@library-id u2cea@x)))) (assertion-violation '#f '"cannot find library with required spec" u2ce6@spec))) (car u2ce6@spec)))) (set! u2bef@label->binding-table (make-eq-hashtable)) (set! u2bf1@install-library-record (lambda (u2cec@lib) (begin ((lambda (u2cee@exp-env) (for-each (lambda (u2cf0@x) ((lambda (u2cf2@label u2cf3@binding) ((lambda (u2cf6@binding) (begin (if (hashtable-ref u2bef@label->binding-table u2cf2@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" u2cf2@label (hashtable-ref u2bef@label->binding-table u2cf2@label '#f) u2cf6@binding) (exit)) (void)) (u2ac2@u2981@set-label-binding! u2cf2@label u2cf6@binding))) ((lambda (u2cf8@t) (if (memv u2cf8@t '(global)) (cons 'global (cons u2cec@lib (cdr u2cf3@binding))) (if (memv u2cf8@t '(global-macro)) (cons 'global-macro (cons u2cec@lib (cdr u2cf3@binding))) (if (memv u2cf8@t '(global-macro!)) (cons 'global-macro! (cons u2cec@lib (cdr u2cf3@binding))) (if (memv u2cf8@t '(global-ctv)) (cons 'global-ctv (cons u2cec@lib (cdr u2cf3@binding))) ((lambda () (begin '#f u2cf3@binding)))))))) (car u2cf3@binding)))) (car u2cf0@x) (cdr u2cf0@x))) u2cee@exp-env)) (u2b99@library-env u2cec@lib)) ((u2b7a@current-library-collection) u2cec@lib)))) (set! u2bf3@install-library (lambda (u2cfa@id u2cfb@name u2cfc@ver u2cfd@imp* u2cfe@vis* u2cff@inv* u2d00@exp-subst u2d01@exp-env u2d02@visit-proc u2d03@invoke-proc u2d04@visit-code u2d05@invoke-code u2d06@guard-code u2d07@guard-req* u2d08@visible? u2d09@source-file-name) ((lambda (u2d1a@imp-lib* u2d1b@vis-lib* u2d1c@inv-lib* u2d1d@guard-lib*) (begin (if (not (and (symbol? u2cfa@id) (list? u2cfb@name) (list? u2cfc@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" u2cfa@id u2cfb@name u2cfc@ver) (void)) (if (u2beb@library-exists? u2cfb@name) (assertion-violation 'install-library '"library is already installed" u2cfb@name) (void)) ((lambda (u2d22@lib) (u2bf1@install-library-record u2d22@lib)) (u2b89@make-library u2cfa@id u2cfb@name u2cfc@ver u2d1a@imp-lib* u2d1b@vis-lib* u2d1c@inv-lib* u2d00@exp-subst u2d01@exp-env u2d02@visit-proc u2d03@invoke-proc u2d04@visit-code u2d05@invoke-code u2d06@guard-code u2d1d@guard-lib* u2d08@visible? u2d09@source-file-name)))) (map u2bed@find-library-by-spec/die u2cfd@imp*) (map u2bed@find-library-by-spec/die u2cfe@vis*) (map u2bed@find-library-by-spec/die u2cff@inv*) (map u2bed@find-library-by-spec/die u2d07@guard-req*)))) (set! u2bf5@imported-label->binding (lambda (u2d24@lab) (u2ac3@u2983@label-binding u2d24@lab))) (set! u2bf7@invoke-library (lambda (u2d26@lib) ((lambda (u2d28@invoke) (if (procedure? u2d28@invoke) (begin (u2bbd@set-library-invoke-state! u2d26@lib (lambda () (assertion-violation 'invoke '"circularity detected" u2d26@lib))) (for-each u2bf7@invoke-library (u2b95@library-inv* u2d26@lib)) (u2bbd@set-library-invoke-state! u2d26@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" u2d26@lib))) (u2d28@invoke) (u2bbd@set-library-invoke-state! u2d26@lib '#t)) (void))) (u2b9d@library-invoke-state u2d26@lib)))) (set! u2bf9@visit-library (lambda (u2d2a@lib) ((lambda (u2d2c@visit) (if (procedure? u2d2c@visit) (begin (u2bbb@set-library-visit-state! u2d2a@lib (lambda () (assertion-violation 'visit '"circularity detected" u2d2a@lib))) (for-each u2bf7@invoke-library (u2b93@library-vis* u2d2a@lib)) (u2bbb@set-library-visit-state! u2d2a@lib (lambda () (assertion-violation 'invoke '"first visit did not return" u2d2a@lib))) (u2d2c@visit) (u2bbb@set-library-visit-state! u2d2a@lib '#t)) (void))) (u2b9b@library-visit-state u2d2a@lib)))) (set! u2bfb@invoke-library-by-spec (lambda (u2d2e@spec) (u2bf7@invoke-library (u2bed@find-library-by-spec/die u2d2e@spec)))) (set! u2bfd@installed-libraries (lambda u2d36 ((lambda (u2d37) (if (= u2d37 '1) (apply (lambda (u2d30@all?) ((letrec ((u2d32@f (lambda (u2d34@ls) (if (null? u2d34@ls) '() (if (or u2d30@all? (u2ba7@library-visible? (car u2d34@ls))) (cons (car u2d34@ls) (u2d32@f (cdr u2d34@ls))) ((lambda () (begin '#f (u2d32@f (cdr u2d34@ls)))))))))) u2d32@f) ((u2b7a@current-library-collection)))) u2d36) (if (= u2d37 '0) (apply (lambda () (u2bfd@installed-libraries '#f)) u2d36) (error 'apply '"invalid arg count")))) (length u2d36)))) (set! u2bff@library-spec (lambda (u2d38@x) (begin (if (not (u2b87@library? u2d38@x)) (assertion-violation 'library-spec '"not a library" u2d38@x) (void)) (list (u2b8b@library-id u2d38@x) (u2b8d@library-name u2d38@x) (u2b8f@library-version u2d38@x))))) (begin (set! u2d3a@u2b78@make-collection u2b78@make-collection) (set! u2d3b@u2b7a@current-library-collection u2b7a@current-library-collection) (set! u2d3c@u2b80@u2b7b u2b80@u2b7b) (set! u2d3d@u2b82@u2b7d u2b82@u2b7d) (set! u2d3e@u2b84@u2b7c u2b84@u2b7c) (set! u2d3f@u2b87@library? u2b87@library?) (set! u2d40@u2b89@make-library u2b89@make-library) (set! u2d41@u2b8b@library-id u2b8b@library-id) (set! u2d42@u2b8d@library-name u2b8d@library-name) (set! u2d43@u2b8f@library-version u2b8f@library-version) (set! u2d44@u2b91@library-imp* u2b91@library-imp*) (set! u2d45@u2b93@library-vis* u2b93@library-vis*) (set! u2d46@u2b95@library-inv* u2b95@library-inv*) (set! u2d47@u2b97@library-subst u2b97@library-subst) (set! u2d48@u2b99@library-env u2b99@library-env) (set! u2d49@u2b9b@library-visit-state u2b9b@library-visit-state) (set! u2d4a@u2b9d@library-invoke-state u2b9d@library-invoke-state) (set! u2d4b@u2b9f@library-visit-code u2b9f@library-visit-code) (set! u2d4c@u2ba1@library-invoke-code u2ba1@library-invoke-code) (set! u2d4d@u2ba3@library-guard-code u2ba3@library-guard-code) (set! u2d4e@u2ba5@library-guard-req* u2ba5@library-guard-req*) (set! u2d4f@u2ba7@library-visible? u2ba7@library-visible?) (set! u2d50@u2ba9@library-source-file-name u2ba9@library-source-file-name) (set! u2d51@u2bab@set-library-id! u2bab@set-library-id!) (set! u2d52@u2bad@set-library-name! u2bad@set-library-name!) (set! u2d53@u2baf@set-library-version! u2baf@set-library-version!) (set! u2d54@u2bb1@set-library-imp*! u2bb1@set-library-imp*!) (set! u2d55@u2bb3@set-library-vis*! u2bb3@set-library-vis*!) (set! u2d56@u2bb5@set-library-inv*! u2bb5@set-library-inv*!) (set! u2d57@u2bb7@set-library-subst! u2bb7@set-library-subst!) (set! u2d58@u2bb9@set-library-env! u2bb9@set-library-env!) (set! u2d59@u2bbb@set-library-visit-state! u2bbb@set-library-visit-state!) (set! u2d5a@u2bbd@set-library-invoke-state! u2bbd@set-library-invoke-state!) (set! u2d5b@u2bbf@set-library-visit-code! u2bbf@set-library-visit-code!) (set! u2d5c@u2bc1@set-library-invoke-code! u2bc1@set-library-invoke-code!) (set! u2d5d@u2bc3@set-library-guard-code! u2bc3@set-library-guard-code!) (set! u2d5e@u2bc5@set-library-guard-req*! u2bc5@set-library-guard-req*!) (set! u2d5f@u2bc7@set-library-visible?! u2bc7@set-library-visible?!) (set! u2d60@u2bc9@set-library-source-file-name! u2bc9@set-library-source-file-name!) (set! u2d61@u2bcb@rp u2bcb@rp) (set! u2d62@u2bcd@find-dependencies u2bcd@find-dependencies) (set! u2d63@u2bcf@find-library-by u2bcf@find-library-by) (set! u2d64@u2bd1@library-path u2bd1@library-path) (set! u2d65@u2bd3@library-extensions u2bd3@library-extensions) (set! u2d66@u2bd5@library-name->file-name u2bd5@library-name->file-name) (set! u2d67@u2bd7@file-locator u2bd7@file-locator) (set! u2d68@u2bd9@serialize-all u2bd9@serialize-all) (set! u2d69@u2bdb@current-precompiled-library-loader u2bdb@current-precompiled-library-loader) (set! u2d6a@u2bdd@try-load-from-file u2bdd@try-load-from-file) (set! u2d6b@u2bdf@library-loader u2bdf@library-loader) (set! u2d6c@u2be1@current-library-expander u2be1@current-library-expander) (set! u2d6d@u2be3@external-pending-libraries u2be3@external-pending-libraries) (set! u2d6e@u2be5@find-external-library u2be5@find-external-library) (set! u2d6f@u2be7@find-library-by-name u2be7@find-library-by-name) (set! u2d70@u2be9@uninstall-library u2be9@uninstall-library) (set! u2d71@u2beb@library-exists? u2beb@library-exists?) (set! u2d72@u2bed@find-library-by-spec/die u2bed@find-library-by-spec/die) (set! u2d73@u2bef@label->binding-table u2bef@label->binding-table) (set! u2d74@u2bf1@install-library-record u2bf1@install-library-record) (set! u2d75@u2bf3@install-library u2bf3@install-library) (set! u2d76@u2bf5@imported-label->binding u2bf5@imported-label->binding) (set! u2d77@u2bf7@invoke-library u2bf7@invoke-library) (set! u2d78@u2bf9@visit-library u2bf9@visit-library) (set! u2d79@u2bfb@invoke-library-by-spec u2bfb@invoke-library-by-spec) (set! u2d7a@u2bfd@installed-libraries u2bfd@installed-libraries) (set! u2d7b@u2bff@library-spec u2bff@library-spec)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (u2d7e@build-global-define u2d80@build-application u2dce@build-lambda u2dd0@build-case-lambda u2dd2@build-let u2e00@build-sequence u2e02@build-void u2e04@build-letrec u2e06@build-letrec* u2e08@build-library-letrec*) (begin (set! u2d7e@build-global-define (lambda (u2e1f@x) (u2e02@build-void))) (set! u2d80@build-application (lambda (u2e21@ae u2e22@fun-exp u2e23@arg-exps) (cons u2e22@fun-exp u2e23@arg-exps))) (set! u2dce@build-lambda (lambda (u2e27@ae u2e28@vars u2e29@exp) (list 'lambda u2e28@vars u2e29@exp))) (set! u2dd0@build-case-lambda (lambda (u2e2d@ae u2e2e@vars* u2e2f@exp*) ((lambda (u2e34@build-error u2e36@build-pred u2e38@build-apply u2e3a@expand-case-lambda) (begin (set! u2e34@build-error (lambda (u2e6b@ae) (u2d80@build-application u2e6b@ae '(primitive error) (list ''apply (list 'quote '"invalid arg count"))))) (set! u2e36@build-pred (lambda (u2e53@ae u2e54@n u2e55@vars) (call-with-values (lambda () ((letrec ((u2e5d@f (lambda (u2e5f@vars u2e60@count) (if (pair? u2e5f@vars) (u2e5d@f (cdr u2e5f@vars) (+ u2e60@count '1)) (if (null? u2e5f@vars) (values u2e60@count '=) ((lambda () (begin '#f (values u2e60@count '>=))))))))) u2e5d@f) u2e55@vars '0)) (lambda (u2e63@u2e5a u2e64@u2e5c) ((lambda (u2e67@pred u2e68@count) (u2d80@build-application u2e53@ae (list 'primitive u2e67@pred) (list u2e54@n (list 'quote u2e68@count)))) u2e64@u2e5c u2e63@u2e5a))))) (set! u2e38@build-apply (lambda (u2e4b@ae u2e4c@g u2e4d@vars u2e4e@exp) (u2d80@build-application u2e4b@ae '(primitive apply) (list (u2dce@build-lambda u2e4b@ae u2e4d@vars u2e4e@exp) u2e4c@g)))) (set! u2e3a@expand-case-lambda (lambda (u2e3b@ae u2e3c@vars u2e3d@exp*) ((lambda (u2e41@g u2e42@n) (list 'lambda u2e41@g (u2dd2@build-let u2e3b@ae (list u2e42@n) (list (u2d80@build-application u2e3b@ae '(primitive length) (list u2e41@g))) ((letrec ((u2e45@f (lambda (u2e47@vars* u2e48@exp*) (if (null? u2e47@vars*) (u2e34@build-error u2e3b@ae) (list 'if (u2e36@build-pred u2e3b@ae u2e42@n (car u2e47@vars*)) (u2e38@build-apply u2e3b@ae u2e41@g (car u2e47@vars*) (car u2e48@exp*)) (u2e45@f (cdr u2e47@vars*) (cdr u2e48@exp*))))))) u2e45@f) u2e2e@vars* u2e3d@exp*)))) (gensym) (gensym)))) (if (= (length u2e2f@exp*) '1) (u2dce@build-lambda u2e2d@ae (car u2e2e@vars*) (car u2e2f@exp*)) (u2e3a@expand-case-lambda u2e2d@ae u2e2e@vars* u2e2f@exp*)))) '#f '#f '#f '#f))) (set! u2dd2@build-let (lambda (u2e6d@ae u2e6e@lhs* u2e6f@rhs* u2e70@body) (u2d80@build-application u2e6d@ae (u2dce@build-lambda u2e6d@ae u2e6e@lhs* u2e70@body) u2e6f@rhs*))) (set! u2e00@build-sequence (lambda (u2e75@ae u2e76@exps) ((letrec ((u2e79@loop (lambda (u2e7b@exps) (if (null? (cdr u2e7b@exps)) (car u2e7b@exps) (if (equal? (car u2e7b@exps) (u2e02@build-void)) (u2e79@loop (cdr u2e7b@exps)) (cons 'begin u2e7b@exps)))))) u2e79@loop) u2e76@exps))) (set! u2e02@build-void (lambda () '((primitive void)))) (set! u2e04@build-letrec (lambda (u2e7d@ae u2e7e@vars u2e7f@val-exps u2e80@body-exp) (if (null? u2e7e@vars) u2e80@body-exp (list 'letrec (map list u2e7e@vars u2e7f@val-exps) u2e80@body-exp)))) (set! u2e06@build-letrec* (lambda (u2e85@ae u2e86@vars u2e87@val-exps u2e88@body-exp) (if (null? u2e86@vars) u2e88@body-exp ((lambda () (begin '#f (u2dd2@build-let u2e85@ae u2e86@vars (map (lambda (u2e8d@x) (list 'quote '#f)) u2e86@vars) (u2e00@build-sequence u2e85@ae (append (map (lambda (u2e8f@lhs u2e90@rhs) (list 'set! u2e8f@lhs u2e90@rhs)) u2e86@vars u2e87@val-exps) (list u2e88@body-exp)))))))))) (set! u2e08@build-library-letrec* (lambda (u2e93@ae u2e94@top? u2e95@vars u2e96@locs u2e97@val-exps u2e98@body-exp) (u2e06@build-letrec* u2e93@ae u2e95@vars u2e97@val-exps (if u2e94@top? u2e98@body-exp (u2e00@build-sequence u2e93@ae (cons u2e98@body-exp (map (lambda (u2e9f@var u2ea0@loc) (list 'set! u2ea0@loc u2e9f@var)) u2e95@vars u2e96@locs))))))) (begin (set! u2ea3@u2d7e@build-global-define u2d7e@build-global-define) (set! u2ea4@u2d80@build-application u2d80@build-application) (set! u2ea5@u2dce@build-lambda u2dce@build-lambda) (set! u2ea6@u2dd0@build-case-lambda u2dd0@build-case-lambda) (set! u2ea7@u2dd2@build-let u2dd2@build-let) (set! u2ea8@u2e00@build-sequence u2e00@build-sequence) (set! u2ea9@u2e02@build-void u2e02@build-void) (set! u2eaa@u2e04@build-letrec u2e04@build-letrec) (set! u2eab@u2e06@build-letrec* u2e06@build-letrec*) (set! u2eac@u2e08@build-library-letrec* u2e08@build-library-letrec*)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (u2eba@set-cons u2ebc@set-union u2ec1@top-mark* u2ec3@top-marked? u2ec5@gen-lexical u2ec7@gen-global u2ec9@gen-label u2ecb@gen-top-level-label u2ecd@gen-define-label+loc u2ecf@gen-define-label u2ed5@u2ed0 u2ed7@u2ed2 u2ed9@u2ed1 u2edc@rib? u2ede@make-rib u2ee0@rib-sym* u2ee2@rib-mark** u2ee4@rib-label* u2ee6@rib-sealed/freq u2ee8@set-rib-sym*! u2eea@set-rib-mark**! u2eec@set-rib-label*! u2eee@set-rib-sealed/freq! u2ef0@make-empty-rib u2ef2@top-marked-symbols u2ef4@extend-rib! u2ef6@seal-rib! u2ef8@unseal-rib! u2efa@increment-rib-frequency! u2efc@make-full-rib u2f02@u2efd u2f04@u2eff u2f06@u2efe u2f09@stx? u2f0b@make-stx u2f0d@stx-expr u2f0f@stx-mark* u2f11@stx-subst* u2f13@stx-ae* u2f15@set-stx-expr! u2f17@set-stx-mark*! u2f19@set-stx-subst*! u2f1b@set-stx-ae*! u2f1d@rp u2f1f@datum->stx u2f21@gen-mark u2f23@anti-mark u2f25@anti-mark? u2f27@join-wraps u2f29@mkstx u2f2b@add-mark u2f2d@add-subst u2f2f@syntax-kind? u2f31@syntax-vector->list u2f33@syntax-pair? u2f35@syntax-vector? u2f37@syntax-null? u2f39@syntax-list? u2f3b@syntax-car u2f3d@syntax-cdr u2f3f@syntax->list u2f41@id? u2f43@id->sym u2f45@same-marks? u2f47@bound-id=? u2f49@free-id=? u2f4b@valid-bound-ids? u2f4d@distinct-bound-ids? u2f4f@bound-id-member? u2f51@self-evaluating? u2f53@strip-annotations u2f55@strip u2f57@stx->datum u2f59@id->label/intern u2f5b@id->label u2f5d@label->binding u2f5f@make-binding u2f61@binding-type u2f63@binding-value u2f65@raise-unbound-error u2f67@syntax-type u2f75@sanitize-binding u2f77@make-variable-transformer u2f79@make-compile-time-value u2f7b@variable-transformer? u2f7d@variable-transformer-procedure u2f7f@make-eval-transformer u30d0@parse-define u30d2@parse-define-syntax u30d4@scheme-stx-hashtable u30d6@scheme-stx u30d8@lexical-var u30da@lexical-mutable? u30dc@set-lexical-mutable! u30de@add-lexical u30e0@add-lexicals u30e2@letrec-helper u30e4@letrec-transformer u30e6@letrec*-transformer u30e8@fluid-let-syntax-transformer u30ea@type-descriptor-transformer u30ec@record-type-descriptor-transformer u30ee@record-constructor-descriptor-transformer u30f0@when-macro u30f2@unless-macro u30f4@if-transformer u30f6@and-transformer u30f8@or-transformer u30fa@case-macro u30fc@quote-transformer u30fe@case-lambda-transformer u3100@lambda-transformer u3102@bless u3104@with-syntax-macro u3106@invalid-fmls-error u3108@let-macro u310a@trace-let-macro u310c@let-values-macro u310e@let*-values-macro u3110@trace-lambda-macro u3112@trace-define-macro u3114@trace-define-syntax-macro u3116@trace-let/rec-syntax u3118@trace-let-syntax-macro u311a@trace-letrec-syntax-macro u311c@guard-macro u311e@define-enumeration-macro u3120@time-macro u3122@delay-macro u3124@assert-macro u3126@endianness-macro u3128@identifier-syntax-macro u312a@do-macro u312c@let*-macro u312e@or-macro u3130@and-macro u3132@cond-macro u3134@syntax-rules-macro u3136@quasiquote-macro u3138@quasisyntax-macro u313a@define-struct-macro u313c@define-record-type-macro u313e@define-condition-type-macro u3140@incorrect-usage-macro u3142@parameterize-macro u3144@foreign-call-transformer u3146@convert-pattern u3148@syntax-dispatch u314a@ellipsis? u314c@underscore? u314e@verify-literals u3150@syntax-case-transformer u3152@ellipsis-map u3154@syntax-transformer u3156@core-macro-transformer u3158@file-options-macro u315a@symbol-macro u315c@macro-transformer u315e@local-macro-transformer u3160@do-macro-call u3162@chi-macro u3164@chi-local-macro u3166@chi-global-macro u3168@chi-expr* u316a@chi-application u316c@chi-expr u316e@chi-set! u3170@verify-formals u3172@chi-lambda-clause u3174@chi-lambda-clause* u3176@chi-defun u3178@chi-rhs u317a@expand-interaction-rhs*/init* u317c@chi-rhs* u317e@find-bound=? u3180@find-dups u3182@chi-internal u3184@parse-module u318a@u3185 u318c@u3187 u318e@u3186 u3191@module-interface? u3193@make-module-interface u3195@module-interface-first-mark u3197@module-interface-exp-id-vec u3199@module-interface-exp-lab-vec u319b@set-module-interface-first-mark! u319d@set-module-interface-exp-id-vec! u319f@set-module-interface-exp-lab-vec! u31a1@module-interface-exp-id* u31a3@syntax-transpose u31a5@chi-internal-module u31a7@chi-body* u31a9@expand-transformer u31ab@parse-exports u31ad@parse-library-name u31af@parse-library u31b1@parse-import-spec* u31b3@make-top-rib u31b5@make-collector u31b7@inv-collector u31b9@vis-collector u31bb@imp-collector u31bd@chi-library-internal u31bf@chi-interaction-expr u31c1@library-body-expander u31c3@stale-when-collector u31c5@make-stale-collector u31c7@handle-stale-when u31c9@core-library-expander u31cb@parse-top-level-program u31d1@u31cc u31d3@u31ce u31d5@u31cd u31d8@env? u31da@make-env u31dc@env-names u31de@env-labels u31e0@env-itc u31e2@set-env-names! u31e4@set-env-labels! u31e6@set-env-itc! u31e8@rp u31ee@u31e9 u31f0@u31eb u31f2@u31ea u31f5@interaction-env? u31f7@make-interaction-env u31f9@interaction-env-rib u31fb@interaction-env-r u31fd@interaction-env-locs u31ff@set-interaction-env-rib! u3201@set-interaction-env-r! u3203@set-interaction-env-locs! u3205@rp u3207@environment? u3209@environment-symbols u320b@environment u320d@null-environment u320f@scheme-report-environment u3211@core-expand u3213@eval u3215@initial-visit! u3217@library-expander u3219@boot-library-expand u321b@rev-map-append u321d@build-exports u321f@make-export-subst u3221@make-export-env/macros u3223@generate-temporaries u3225@free-identifier=? u3227@bound-identifier=? u3229@position->condition u322b@extract-position-condition u322d@expression-position u322f@syntax-annotation u3231@assertion-error u3233@syntax-error u3235@extract-trace u3237@syntax-violation* u3239@syntax-violation u323b@identifier? u323d@datum->syntax u323f@syntax->datum u3241@top-level-expander u3243@compile-r6rs-top-level u3245@subst->rib u3247@new-interaction-environment u3249@interaction-environment u324b@top-level-context) (begin (set! u2eba@set-cons (lambda (u324c@x u324d@ls) (if (memq u324c@x u324d@ls) u324d@ls ((lambda () (begin '#f (cons u324c@x u324d@ls))))))) (set! u2ebc@set-union (lambda (u3250@ls1 u3251@ls2) (if (null? u3250@ls1) u3251@ls2 (if (memq (car u3250@ls1) u3251@ls2) (u2ebc@set-union (cdr u3250@ls1) u3251@ls2) ((lambda () (begin '#f (cons (car u3250@ls1) (u2ebc@set-union (cdr u3250@ls1) u3251@ls2))))))))) (set! u2ec1@top-mark* '(top)) (set! u2ec3@top-marked? (lambda (u3254@m*) (memq 'top u3254@m*))) (set! u2ec5@gen-lexical (lambda (u3256@sym) (if (symbol? u3256@sym) (gensym u3256@sym) (if (u2f09@stx? u3256@sym) (u2ec5@gen-lexical (u2f43@id->sym u3256@sym)) ((lambda () (begin '#f (assertion-violation 'gen-lexical '"BUG: invalid arg" u3256@sym)))))))) (set! u2ec7@gen-global (lambda (u3258@x) (u2ec5@gen-lexical u3258@x))) (set! u2ec9@gen-label (lambda (u325a@_) (gensym))) (set! u2ecb@gen-top-level-label (lambda (u325c@id u325d@rib) ((lambda (u3261@find) (begin (set! u3261@find (lambda (u326c@sym u326d@mark* u326e@sym* u326f@mark** u3270@label*) (and (pair? u326e@sym*) (if (and (eq? u326c@sym (car u326e@sym*)) (u2f45@same-marks? u326d@mark* (car u326f@mark**))) (car u3270@label*) (u3261@find u326c@sym u326d@mark* (cdr u326e@sym*) (cdr u326f@mark**) (cdr u3270@label*)))))) ((lambda (u3262@sym u3263@mark*) ((lambda (u3266@sym*) ((lambda (u3268@t) (if u3268@t ((lambda (u326a@label) (if (u2d76@u2bf5@imported-label->binding u326a@label) (gensym) ((lambda () (begin '#f u326a@label))))) u3268@t) ((lambda () (begin '#f (gensym)))))) (and (memq u3262@sym (u2ee0@rib-sym* u325d@rib)) (u3261@find u3262@sym u3263@mark* u3266@sym* (u2ee2@rib-mark** u325d@rib) (u2ee4@rib-label* u325d@rib))))) (u2ee0@rib-sym* u325d@rib))) (u2f43@id->sym u325c@id) (u2f0f@stx-mark* u325c@id)))) '#f))) (set! u2ecd@gen-define-label+loc (lambda (u3276@id u3277@rib u3278@sd?) (if u3278@sd? (values (gensym) (u2ec5@gen-lexical u3276@id)) ((lambda (u327c@env) ((lambda (u327e@label u327f@locs) (values u327e@label ((lambda (u3282@t) (if u3282@t (cdr u3282@t) ((lambda () (begin '#f ((lambda (u3284@loc) (begin (u3203@set-interaction-env-locs! u327c@env (cons (cons u327e@label u3284@loc) u327f@locs)) u3284@loc)) (u2ec5@gen-lexical u3276@id))))))) (assq u327e@label u327f@locs)))) (u2ecb@gen-top-level-label u3276@id u3277@rib) (u31fd@interaction-env-locs u327c@env))) (u324b@top-level-context))))) (set! u2ecf@gen-define-label (lambda (u3286@id u3287@rib u3288@sd?) (if u3288@sd? (gensym) (u2ecb@gen-top-level-label u3286@id u3287@rib)))) (set! u2ed5@u2ed0 (make-record-type-descriptor 'rib '#f 'u2ed3 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq)))) (set! u2ed7@u2ed2 '#f) (set! u2ed9@u2ed1 (make-record-constructor-descriptor u2ed5@u2ed0 '#f u2ed7@u2ed2)) (set! u2edc@rib? (record-predicate u2ed5@u2ed0)) (set! u2ede@make-rib (record-constructor u2ed9@u2ed1)) (set! u2ee0@rib-sym* (record-accessor u2ed5@u2ed0 '0)) (set! u2ee2@rib-mark** (record-accessor u2ed5@u2ed0 '1)) (set! u2ee4@rib-label* (record-accessor u2ed5@u2ed0 '2)) (set! u2ee6@rib-sealed/freq (record-accessor u2ed5@u2ed0 '3)) (set! u2ee8@set-rib-sym*! (record-mutator u2ed5@u2ed0 '0)) (set! u2eea@set-rib-mark**! (record-mutator u2ed5@u2ed0 '1)) (set! u2eec@set-rib-label*! (record-mutator u2ed5@u2ed0 '2)) (set! u2eee@set-rib-sealed/freq! (record-mutator u2ed5@u2ed0 '3)) (set! u2ef0@make-empty-rib (lambda () (u2ede@make-rib '() '() '() '#f))) (set! u2ef2@top-marked-symbols (lambda (u328c@rib) (call-with-values (lambda () ((lambda (u3292@sym* u3293@mark**) (if (u2ee6@rib-sealed/freq u328c@rib) (values (vector->list u3292@sym*) (vector->list u3293@mark**)) (values u3292@sym* u3293@mark**))) (u2ee0@rib-sym* u328c@rib) (u2ee2@rib-mark** u328c@rib))) (lambda (u3296@u328f u3297@u3291) ((lambda (u329a@mark** u329b@sym*) ((letrec ((u329e@f (lambda (u32a0@sym* u32a1@mark**) (if (null? u32a0@sym*) '() (if (fast-equal? (car u32a1@mark**) u2ec1@top-mark*) (cons (car u32a0@sym*) (u329e@f (cdr u32a0@sym*) (cdr u32a1@mark**))) ((lambda () (begin '#f (u329e@f (cdr u32a0@sym*) (cdr u32a1@mark**)))))))))) u329e@f) u329b@sym* u329a@mark**)) u3297@u3291 u3296@u328f))))) (set! u2ef4@extend-rib! (lambda (u32a4@rib u32a5@id u32a6@label u32a7@sd?) ((lambda (u32ad@find) (begin (set! u32ad@find (lambda (u32b8@sym u32b9@mark* u32ba@sym* u32bb@mark** u32bc@label*) (and (pair? u32ba@sym*) (if (and (eq? u32b8@sym (car u32ba@sym*)) (u2f45@same-marks? u32b9@mark* (car u32bb@mark**))) u32bc@label* (u32ad@find u32b8@sym u32b9@mark* (cdr u32ba@sym*) (cdr u32bb@mark**) (cdr u32bc@label*)))))) (begin (if (u2ee6@rib-sealed/freq u32a4@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" u32a4@rib) (void)) ((lambda (u32ae@sym u32af@mark*) ((lambda (u32b2@sym*) ((lambda (u32b4@t) (if u32b4@t ((lambda (u32b6@p) (if (not (eq? u32a6@label (car u32b6@p))) (if (not u32a7@sd?) (set-car! u32b6@p u32a6@label) ((lambda () (begin '#f (u3239@syntax-violation '#f '"multiple definitions of identifier" u32a5@id))))) (void))) u32b4@t) ((lambda () (begin '#f (u2ee8@set-rib-sym*! u32a4@rib (cons u32ae@sym u32b2@sym*)) (u2eea@set-rib-mark**! u32a4@rib (cons u32af@mark* (u2ee2@rib-mark** u32a4@rib))) (u2eec@set-rib-label*! u32a4@rib (cons u32a6@label (u2ee4@rib-label* u32a4@rib)))))))) (and (memq u32ae@sym (u2ee0@rib-sym* u32a4@rib)) (u32ad@find u32ae@sym u32af@mark* u32b2@sym* (u2ee2@rib-mark** u32a4@rib) (u2ee4@rib-label* u32a4@rib))))) (u2ee0@rib-sym* u32a4@rib))) (u2f43@id->sym u32a5@id) (u2f0f@stx-mark* u32a5@id))))) '#f))) (set! u2ef6@seal-rib! (lambda (u32c2@rib) ((lambda (u32c4@sym*) (if (not (null? u32c4@sym*)) ((lambda (u32c6@sym*) (begin (u2ee8@set-rib-sym*! u32c2@rib u32c6@sym*) (u2eea@set-rib-mark**! u32c2@rib (list->vector (u2ee2@rib-mark** u32c2@rib))) (u2eec@set-rib-label*! u32c2@rib (list->vector (u2ee4@rib-label* u32c2@rib))) (u2eee@set-rib-sealed/freq! u32c2@rib (make-vector (vector-length u32c6@sym*) '0)))) (list->vector u32c4@sym*)) (void))) (u2ee0@rib-sym* u32c2@rib)))) (set! u2ef8@unseal-rib! (lambda (u32c8@rib) (if (u2ee6@rib-sealed/freq u32c8@rib) (begin (u2eee@set-rib-sealed/freq! u32c8@rib '#f) (u2ee8@set-rib-sym*! u32c8@rib (vector->list (u2ee0@rib-sym* u32c8@rib))) (u2eea@set-rib-mark**! u32c8@rib (vector->list (u2ee2@rib-mark** u32c8@rib))) (u2eec@set-rib-label*! u32c8@rib (vector->list (u2ee4@rib-label* u32c8@rib)))) (void)))) (set! u2efa@increment-rib-frequency! (lambda (u32ca@rib u32cb@idx) ((lambda (u32ce@freq*) ((lambda (u32d0@freq) ((lambda (u32d2@i) (begin (vector-set! u32ce@freq* u32d2@i (+ u32d0@freq '1)) (if (not (= u32d2@i u32cb@idx)) ((lambda (u32d4@sym* u32d5@mark** u32d6@label*) (begin ((lambda (u32da@sym) (begin (vector-set! u32d4@sym* u32cb@idx (vector-ref u32d4@sym* u32d2@i)) (vector-set! u32d4@sym* u32d2@i u32da@sym))) (vector-ref u32d4@sym* u32cb@idx)) ((lambda (u32dc@mark*) (begin (vector-set! u32d5@mark** u32cb@idx (vector-ref u32d5@mark** u32d2@i)) (vector-set! u32d5@mark** u32d2@i u32dc@mark*))) (vector-ref u32d5@mark** u32cb@idx)) ((lambda (u32de@label) (begin (vector-set! u32d6@label* u32cb@idx (vector-ref u32d6@label* u32d2@i)) (vector-set! u32d6@label* u32d2@i u32de@label))) (vector-ref u32d6@label* u32cb@idx)))) (u2ee0@rib-sym* u32ca@rib) (u2ee2@rib-mark** u32ca@rib) (u2ee4@rib-label* u32ca@rib)) (void)))) ((letrec ((u32e0@f (lambda (u32e2@i) (if (zero? u32e2@i) '0 ((lambda () (begin '#f ((lambda (u32e4@j) (if (= u32d0@freq (vector-ref u32ce@freq* u32e4@j)) (u32e0@f u32e4@j) ((lambda () (begin '#f u32e2@i))))) (- u32e2@i '1))))))))) u32e0@f) u32cb@idx))) (vector-ref u32ce@freq* u32cb@idx))) (u2ee6@rib-sealed/freq u32ca@rib)))) (set! u2efc@make-full-rib (lambda (u32e6@id* u32e7@label*) (u2ede@make-rib (map u2f43@id->sym u32e6@id*) (map u2f0f@stx-mark* u32e6@id*) u32e7@label* '#f))) (set! u2f02@u2efd (make-record-type-descriptor 'stx '#f 'u2f00 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! u2f04@u2eff '#f) (set! u2f06@u2efe (make-record-constructor-descriptor u2f02@u2efd '#f u2f04@u2eff)) (set! u2f09@stx? (record-predicate u2f02@u2efd)) (set! u2f0b@make-stx (record-constructor u2f06@u2efe)) (set! u2f0d@stx-expr (record-accessor u2f02@u2efd '0)) (set! u2f0f@stx-mark* (record-accessor u2f02@u2efd '1)) (set! u2f11@stx-subst* (record-accessor u2f02@u2efd '2)) (set! u2f13@stx-ae* (record-accessor u2f02@u2efd '3)) (set! u2f15@set-stx-expr! (record-mutator u2f02@u2efd '0)) (set! u2f17@set-stx-mark*! (record-mutator u2f02@u2efd '1)) (set! u2f19@set-stx-subst*! (record-mutator u2f02@u2efd '2)) (set! u2f1b@set-stx-ae*! (record-mutator u2f02@u2efd '3)) (set! u2f1d@rp (u2ab3@u295b@make-record-printer 'stx (lambda (u32ea@x u32eb@p u32ec@wr) (begin (display '"#<syntax " u32eb@p) (write (u2f57@stx->datum u32ea@x) u32eb@p) ((lambda (u32f0@expr) (if (u2ac7@u298b@annotation? u32f0@expr) ((lambda (u32f2@src) (if (pair? u32f2@src) (begin (display '" [char " u32eb@p) (display (cdr u32f2@src) u32eb@p) (display '" of " u32eb@p) (display (car u32f2@src) u32eb@p) (display '"]" u32eb@p)) (void))) (u2ac8@u298d@annotation-source u32f0@expr)) (void))) (u2f0d@stx-expr u32ea@x)) (display '">" u32eb@p))))) (set! u2f1f@datum->stx (lambda (u32f4@id u32f5@datum) (u2f0b@make-stx u32f5@datum (u2f0f@stx-mark* u32f4@id) (u2f11@stx-subst* u32f4@id) (u2f13@stx-ae* u32f4@id)))) (set! u2f21@gen-mark (lambda () (string '#\m))) (set! u2f23@anti-mark '#f) (set! u2f25@anti-mark? not) (set! u2f27@join-wraps (lambda (u32f8@m1* u32f9@s1* u32fa@ae1* u32fb@e) ((lambda (u3301@cancel) (begin (set! u3301@cancel (lambda (u3308@ls1 u3309@ls2) ((letrec ((u330c@f (lambda (u330e@x u330f@ls1) (if (null? u330f@ls1) (cdr u3309@ls2) (cons u330e@x (u330c@f (car u330f@ls1) (cdr u330f@ls1))))))) u330c@f) (car u3308@ls1) (cdr u3308@ls1)))) ((lambda (u3302@m2* u3303@s2* u3304@ae2*) (if (and (not (null? u32f8@m1*)) (not (null? u3302@m2*)) (u2f25@anti-mark? (car u3302@m2*))) (values (u3301@cancel u32f8@m1* u3302@m2*) (u3301@cancel u32f9@s1* u3303@s2*) (u3301@cancel u32fa@ae1* u3304@ae2*)) (values (append u32f8@m1* u3302@m2*) (append u32f9@s1* u3303@s2*) (append u32fa@ae1* u3304@ae2*)))) (u2f0f@stx-mark* u32fb@e) (u2f11@stx-subst* u32fb@e) (u2f13@stx-ae* u32fb@e)))) '#f))) (set! u2f29@mkstx (lambda (u3312@e u3313@m* u3314@s* u3315@ae*) (if (and (u2f09@stx? u3312@e) (not (u2ec3@top-marked? u3313@m*))) (call-with-values (lambda () (u2f27@join-wraps u3313@m* u3314@s* u3315@ae* u3312@e)) (lambda (u3320@u331b u3321@u331d u3322@u331f) ((lambda (u3326@ae* u3327@s* u3328@m*) (u2f0b@make-stx (u2f0d@stx-expr u3312@e) u3328@m* u3327@s* u3326@ae*)) u3322@u331f u3321@u331d u3320@u331b))) (u2f0b@make-stx u3312@e u3313@m* u3314@s* u3315@ae*)))) (set! u2f2b@add-mark (lambda (u332c@m u332d@e u332e@ae) (u2f29@mkstx u332d@e (list u332c@m) '(shift) (list u332e@ae)))) (set! u2f2d@add-subst (lambda (u3332@subst u3333@e) (u2f29@mkstx u3333@e '() (list u3332@subst) '()))) (set! u2f2f@syntax-kind? (lambda (u3336@x u3337@p?) (if (u2f09@stx? u3336@x) (u2f2f@syntax-kind? (u2f0d@stx-expr u3336@x) u3337@p?) (if (u2ac7@u298b@annotation? u3336@x) (u2f2f@syntax-kind? (u2ac9@u298f@annotation-expression u3336@x) u3337@p?) ((lambda () (begin '#f (u3337@p? u3336@x)))))))) (set! u2f31@syntax-vector->list (lambda (u333a@x) (if (u2f09@stx? u333a@x) ((lambda (u333c@ls u333d@m* u333e@s* u333f@ae*) (map (lambda (u3344@x) (u2f29@mkstx u3344@x u333d@m* u333e@s* u333f@ae*)) u333c@ls)) (u2f31@syntax-vector->list (u2f0d@stx-expr u333a@x)) (u2f0f@stx-mark* u333a@x) (u2f11@stx-subst* u333a@x) (u2f13@stx-ae* u333a@x)) (if (u2ac7@u298b@annotation? u333a@x) (u2f31@syntax-vector->list (u2ac9@u298f@annotation-expression u333a@x)) (if (vector? u333a@x) (vector->list u333a@x) ((lambda () (begin '#f (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" u333a@x))))))))) (set! u2f33@syntax-pair? (lambda (u3346@x) (u2f2f@syntax-kind? u3346@x pair?))) (set! u2f35@syntax-vector? (lambda (u3348@x) (u2f2f@syntax-kind? u3348@x vector?))) (set! u2f37@syntax-null? (lambda (u334a@x) (u2f2f@syntax-kind? u334a@x null?))) (set! u2f39@syntax-list? (lambda (u334c@x) (or (u2f37@syntax-null? u334c@x) (and (u2f33@syntax-pair? u334c@x) (u2f39@syntax-list? (u2f3d@syntax-cdr u334c@x)))))) (set! u2f3b@syntax-car (lambda (u334e@x) (if (u2f09@stx? u334e@x) (u2f29@mkstx (u2f3b@syntax-car (u2f0d@stx-expr u334e@x)) (u2f0f@stx-mark* u334e@x) (u2f11@stx-subst* u334e@x) (u2f13@stx-ae* u334e@x)) (if (u2ac7@u298b@annotation? u334e@x) (u2f3b@syntax-car (u2ac9@u298f@annotation-expression u334e@x)) (if (pair? u334e@x) (car u334e@x) ((lambda () (begin '#f (assertion-violation 'syntax-car '"BUG: not a pair" u334e@x))))))))) (set! u2f3d@syntax-cdr (lambda (u3350@x) (if (u2f09@stx? u3350@x) (u2f29@mkstx (u2f3d@syntax-cdr (u2f0d@stx-expr u3350@x)) (u2f0f@stx-mark* u3350@x) (u2f11@stx-subst* u3350@x) (u2f13@stx-ae* u3350@x)) (if (u2ac7@u298b@annotation? u3350@x) (u2f3d@syntax-cdr (u2ac9@u298f@annotation-expression u3350@x)) (if (pair? u3350@x) (cdr u3350@x) ((lambda () (begin '#f (assertion-violation 'syntax-cdr '"BUG: not a pair" u3350@x))))))))) (set! u2f3f@syntax->list (lambda (u3352@x) (if (u2f33@syntax-pair? u3352@x) (cons (u2f3b@syntax-car u3352@x) (u2f3f@syntax->list (u2f3d@syntax-cdr u3352@x))) (if (u2f37@syntax-null? u3352@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" u3352@x))))) (set! u2f41@id? (lambda (u3354@x) (and (u2f09@stx? u3354@x) (symbol? (u2f0d@stx-expr u3354@x))))) (set! u2f43@id->sym (lambda (u3356@x) (u2f0d@stx-expr u3356@x))) (set! u2f45@same-marks? (lambda (u3358@x u3359@y) (or (and (null? u3358@x) (null? u3359@y)) (and (pair? u3358@x) (pair? u3359@y) (eq? (car u3358@x) (car u3359@y)) (u2f45@same-marks? (cdr u3358@x) (cdr u3359@y)))))) (set! u2f47@bound-id=? (lambda (u335c@x u335d@y) (and (eq? (u2f43@id->sym u335c@x) (u2f43@id->sym u335d@y)) (u2f45@same-marks? (u2f0f@stx-mark* u335c@x) (u2f0f@stx-mark* u335d@y))))) (set! u2f49@free-id=? (lambda (u3360@i u3361@j) ((lambda (u3364@t0 u3365@t1) (if (or u3364@t0 u3365@t1) (eq? u3364@t0 u3365@t1) (eq? (u2f43@id->sym u3360@i) (u2f43@id->sym u3361@j)))) (u2f5b@id->label u3360@i) (u2f5b@id->label u3361@j)))) (set! u2f4b@valid-bound-ids? (lambda (u3368@id*) (and (for-all u2f41@id? u3368@id*) (u2f4d@distinct-bound-ids? u3368@id*)))) (set! u2f4d@distinct-bound-ids? (lambda (u336a@id*) (or (null? u336a@id*) (and (not (u2f4f@bound-id-member? (car u336a@id*) (cdr u336a@id*))) (u2f4d@distinct-bound-ids? (cdr u336a@id*)))))) (set! u2f4f@bound-id-member? (lambda (u336c@id u336d@id*) (and (pair? u336d@id*) (or (u2f47@bound-id=? u336c@id (car u336d@id*)) (u2f4f@bound-id-member? u336c@id (cdr u336d@id*)))))) (set! u2f51@self-evaluating? (lambda (u3370@x) (or (number? u3370@x) (string? u3370@x) (char? u3370@x) (boolean? u3370@x) (regexp? u3370@x) (bytevector? u3370@x)))) (set! u2f53@strip-annotations (lambda (u3372@x) (if (pair? u3372@x) (cons (u2f53@strip-annotations (car u3372@x)) (u2f53@strip-annotations (cdr u3372@x))) (if (vector? u3372@x) (vector-map u2f53@strip-annotations u3372@x) (if (u2ac7@u298b@annotation? u3372@x) (u2ac6@u2989@annotation-stripped u3372@x) ((lambda () (begin '#f u3372@x)))))))) (set! u2f55@strip (lambda (u3374@x u3375@m*) (if (u2ec3@top-marked? u3375@m*) (if (or (u2ac7@u298b@annotation? u3374@x) (and (pair? u3374@x) (u2ac7@u298b@annotation? (car u3374@x))) (and (vector? u3374@x) (> (vector-length u3374@x) '0) (u2ac7@u298b@annotation? (vector-ref u3374@x '0)))) (u2f53@strip-annotations u3374@x) u3374@x) ((letrec ((u3378@f (lambda (u337a@x) (if (u2f09@stx? u337a@x) (u2f55@strip (u2f0d@stx-expr u337a@x) (u2f0f@stx-mark* u337a@x)) (if (u2ac7@u298b@annotation? u337a@x) (u2ac6@u2989@annotation-stripped u337a@x) (if (pair? u337a@x) ((lambda (u337c@a u337d@d) (if (and (eq? u337c@a (car u337a@x)) (eq? u337d@d (cdr u337a@x))) u337a@x (cons u337c@a u337d@d))) (u3378@f (car u337a@x)) (u3378@f (cdr u337a@x))) (if (vector? u337a@x) ((lambda (u3380@old) ((lambda (u3382@new) (if (for-all eq? u3380@old u3382@new) u337a@x (list->vector u3382@new))) (map u3378@f u3380@old))) (vector->list u337a@x)) ((lambda () (begin '#f u337a@x)))))))))) u3378@f) u3374@x)))) (set! u2f57@stx->datum (lambda (u3384@x) (u2f55@strip u3384@x '()))) (set! u2f59@id->label/intern (lambda (u3386@id) (or (u2f5b@id->label u3386@id) ((lambda (u3388@t) (if u3388@t ((lambda (u338a@env) ((lambda (u338c@rib) (call-with-values (lambda () (u2ecd@gen-define-label+loc u3386@id u338c@rib '#f)) (lambda (u3392@u338f u3393@u3391) ((lambda (u3396@_loc u3397@lab) (begin (u2ef4@extend-rib! u338c@rib u3386@id u3397@lab '#t) u3397@lab)) u3393@u3391 u3392@u338f)))) (u31f9@interaction-env-rib u338a@env))) u3388@t) ((lambda () (begin '#f '#f))))) (u324b@top-level-context))))) (set! u2f5b@id->label (lambda (u339a@id) ((lambda (u339c@sym) ((letrec ((u339e@search (lambda (u33a0@subst* u33a1@mark*) (if (null? u33a0@subst*) '#f (if (eq? (car u33a0@subst*) 'shift) (u339e@search (cdr u33a0@subst*) (cdr u33a1@mark*)) ((lambda () (begin '#f ((lambda (u33a4@rib) (if (u2ee6@rib-sealed/freq u33a4@rib) ((lambda (u33a6@sym*) ((letrec ((u33a8@f (lambda (u33aa@i u33ab@j) (if (= u33aa@i u33ab@j) (u339e@search (cdr u33a0@subst*) u33a1@mark*) (if (and (eq? (vector-ref u33a6@sym* u33aa@i) u339c@sym) (u2f45@same-marks? u33a1@mark* (vector-ref (u2ee2@rib-mark** u33a4@rib) u33aa@i))) ((lambda (u33ae@label) (begin (u2efa@increment-rib-frequency! u33a4@rib u33aa@i) u33ae@label)) (vector-ref (u2ee4@rib-label* u33a4@rib) u33aa@i)) ((lambda () (begin '#f (u33a8@f (+ u33aa@i '1) u33ab@j))))))))) u33a8@f) '0 (vector-length u33a6@sym*))) (u2ee0@rib-sym* u33a4@rib)) ((lambda () (begin '#f ((letrec ((u33b0@f (lambda (u33b2@sym* u33b3@mark** u33b4@label*) (if (null? u33b2@sym*) (u339e@search (cdr u33a0@subst*) u33a1@mark*) (if (and (eq? (car u33b2@sym*) u339c@sym) (u2f45@same-marks? (car u33b3@mark**) u33a1@mark*)) (car u33b4@label*) ((lambda () (begin '#f (u33b0@f (cdr u33b2@sym*) (cdr u33b3@mark**) (cdr u33b4@label*)))))))))) u33b0@f) (u2ee0@rib-sym* u33a4@rib) (u2ee2@rib-mark** u33a4@rib) (u2ee4@rib-label* u33a4@rib))))))) (car u33a0@subst*)))))))))) u339e@search) (u2f11@stx-subst* u339a@id) (u2f0f@stx-mark* u339a@id))) (u2f43@id->sym u339a@id)))) (set! u2f5d@label->binding (lambda (u33b8@x u33b9@r) (if (not u33b8@x) '(displaced-lexical) ((lambda (u33bc@t) (if u33bc@t ((lambda (u33be@b) (if (and (pair? u33be@b) (eq? (car u33be@b) '$core-rtd)) (cons '$rtd (map u3102@bless (cdr u33be@b))) (if (and (pair? u33be@b) (eq? (car u33be@b) 'global-rtd)) ((lambda (u33c0@lib u33c1@loc) (cons '$rtd (symbol-value u33c1@loc))) (cadr u33be@b) (cddr u33be@b)) ((lambda () (begin '#f u33be@b)))))) u33bc@t) ((lambda (u33c4@t) (if u33c4@t (cdr u33c4@t) ((lambda (u33c6@t) (if u33c6@t ((lambda (u33c8@env) ((lambda (u33ca@t) (if u33ca@t ((lambda (u33cc@p) (cons* 'lexical (cdr u33cc@p) '#f)) u33ca@t) ((lambda () (begin '#f '(displaced-lexical . #f)))))) (assq u33b8@x (u31fd@interaction-env-locs u33c8@env)))) u33c6@t) ((lambda () (begin '#f '(displaced-lexical . #f)))))) (u324b@top-level-context)))) (assq u33b8@x u33b9@r)))) (u2d76@u2bf5@imported-label->binding u33b8@x))))) (set! u2f5f@make-binding cons) (set! u2f61@binding-type car) (set! u2f63@binding-value cdr) (set! u2f65@raise-unbound-error (lambda (u33ce@id) (u3237@syntax-violation* '#f '"unbound identifier" u33ce@id (u507c@u4ec2@make-undefined-violation)))) (set! u2f67@syntax-type (lambda (u33d0@e u33d1@r) (if (u2f41@id? u33d0@e) ((lambda (u33d4@id) ((lambda (u33d6@label) ((lambda (u33d8@b) ((lambda (u33da@type) ((lambda () (begin (if (not u33d6@label) (u2f65@raise-unbound-error u33d4@id) (void)) ((lambda (u33dc@t) (if (memv u33dc@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable ctv local-ctv global-ctv)) (values u33da@type (u2f63@binding-value u33d8@b) u33d4@id) ((lambda () (begin '#f (values 'other '#f '#f)))))) u33da@type))))) (u2f61@binding-type u33d8@b))) (u2f5d@label->binding u33d6@label u33d1@r))) (u2f59@id->label/intern u33d4@id))) u33d0@e) (if (u2f33@syntax-pair? u33d0@e) ((lambda (u33de@id) (if (u2f41@id? u33de@id) ((lambda (u33e0@label) ((lambda (u33e2@b) ((lambda (u33e4@type) ((lambda () (begin (if (not u33e0@label) (u2f65@raise-unbound-error u33de@id) (void)) ((lambda (u33e6@t) (if (memv u33e6@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd ctv local-ctv global-ctv stale-when)) (values u33e4@type (u2f63@binding-value u33e2@b) u33de@id) ((lambda () (begin '#f (values 'call '#f '#f)))))) u33e4@type))))) (u2f61@binding-type u33e2@b))) (u2f5d@label->binding u33e0@label u33d1@r))) (u2f59@id->label/intern u33de@id)) (values 'call '#f '#f))) (u2f3b@syntax-car u33d0@e)) ((lambda () (begin '#f ((lambda (u33e8@d) (if (u2f51@self-evaluating? u33e8@d) (values 'constant u33e8@d '#f) (values 'other '#f '#f))) (u2f57@stx->datum u33d0@e))))))))) (set! u2f75@sanitize-binding (lambda (u33ea@x u33eb@src) (if (procedure? u33ea@x) (cons* 'local-macro u33ea@x u33eb@src) (if (and (pair? u33ea@x) (eq? (car u33ea@x) 'macro!) (procedure? (cdr u33ea@x))) (cons* 'local-macro! (cdr u33ea@x) u33eb@src) (if (and (pair? u33ea@x) (eq? (car u33ea@x) '$rtd)) u33ea@x (if (and (pair? u33ea@x) (eq? (car u33ea@x) 'ctv)) (cons* 'local-ctv (cdr u33ea@x) u33eb@src) ((lambda () (begin '#f (assertion-violation 'expand '"invalid transformer" u33ea@x)))))))))) (set! u2f77@make-variable-transformer (lambda (u33ee@x) (if (procedure? u33ee@x) (cons 'macro! u33ee@x) (assertion-violation 'make-variable-transformer '"not a procedure" u33ee@x)))) (set! u2f79@make-compile-time-value (lambda (u33f0@x) (cons 'ctv u33f0@x))) (set! u2f7b@variable-transformer? (lambda (u33f2@x) (and (pair? u33f2@x) (eq? (car u33f2@x) 'macro!) (procedure? (cdr u33f2@x))))) (set! u2f7d@variable-transformer-procedure (lambda (u33f4@x) (if (u2f7b@variable-transformer? u33f4@x) (cdr u33f4@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" u33f4@x)))) (set! u2f7f@make-eval-transformer (lambda (u33f6@x) (u2f75@sanitize-binding (eval-core (u2b17@u2ad7@expanded->core u33f6@x)) u33f6@x))) (set! u30d0@parse-define (lambda (u33f8@x) ((lambda (u33fa@t) ((lambda (u33fc@ls/false) (if (and u33fc@ls/false (apply (lambda (u33fe@id u33ff@fmls u3400@b u3401@b*) (u2f41@id? u33fe@id)) u33fc@ls/false)) (apply (lambda (u3406@id u3407@fmls u3408@b u3409@b*) (begin (u3170@verify-formals u3407@fmls u33f8@x) (values u3406@id (cons 'defun u33f8@x)))) u33fc@ls/false) ((lambda (u340e@t) ((lambda (u3410@ls/false) (if (and u3410@ls/false (apply (lambda (u3412@id u3413@val) (u2f41@id? u3412@id)) u3410@ls/false)) (apply (lambda (u3416@id u3417@val) (values u3416@id (cons 'expr u3417@val))) u3410@ls/false) ((lambda (u341a@t) ((lambda (u341c@ls/false) (if (and u341c@ls/false (apply (lambda (u341e@id) (u2f41@id? u341e@id)) u341c@ls/false)) (apply (lambda (u3420@id) (values u3420@id (cons 'expr (u3102@bless '(void))))) u341c@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u341a@t))) (u3148@syntax-dispatch u341a@t '(_ any)))) u340e@t))) (u3148@syntax-dispatch u340e@t '(_ any any)))) u33fa@t))) (u3148@syntax-dispatch u33fa@t '(_ (any . any) any . each-any)))) u33f8@x))) (set! u30d2@parse-define-syntax (lambda (u3422@x) ((lambda (u3424@t) ((lambda (u3426@ls/false) (if (and u3426@ls/false (apply (lambda (u3428@id u3429@val) (u2f41@id? u3428@id)) u3426@ls/false)) (apply (lambda (u342c@id u342d@val) (values u342c@id u342d@val)) u3426@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3424@t))) (u3148@syntax-dispatch u3424@t '(_ any any)))) u3422@x))) (set! u30d4@scheme-stx-hashtable (make-eq-hashtable)) (set! u30d6@scheme-stx (lambda (u3430@sym) (or (hashtable-ref u30d4@scheme-stx-hashtable u3430@sym '#f) ((lambda (u3432@subst) ((lambda (u3434@stx) ((lambda (u3436@stx) ((lambda () (begin (hashtable-set! u30d4@scheme-stx-hashtable u3430@sym u3436@stx) u3436@stx)))) ((lambda (u3438@t) (if u3438@t ((lambda (u343a@x) ((lambda (u343c@name u343d@label) (u2f2d@add-subst (u2ede@make-rib (list u343c@name) (list u2ec1@top-mark*) (list u343d@label) '#f) u3434@stx)) (car u343a@x) (cdr u343a@x))) u3438@t) ((lambda () (begin '#f u3434@stx))))) (assq u3430@sym u3432@subst)))) (u2f0b@make-stx u3430@sym u2ec1@top-mark* '() '()))) (u2d47@u2b97@library-subst (u2d6f@u2be7@find-library-by-name '(psyntax system $all))))))) (set! u30d8@lexical-var car) (set! u30da@lexical-mutable? cdr) (set! u30dc@set-lexical-mutable! set-cdr!) (set! u30de@add-lexical (lambda (u3440@lab u3441@lex u3442@r) (cons (cons* u3440@lab 'lexical u3441@lex '#f) u3442@r))) (set! u30e0@add-lexicals (lambda (u3446@lab* u3447@lex* u3448@r) (if (null? u3446@lab*) u3448@r ((lambda () (begin '#f (u30e0@add-lexicals (cdr u3446@lab*) (cdr u3447@lex*) (u30de@add-lexical (car u3446@lab*) (car u3447@lex*) u3448@r)))))))) (set! u30e2@letrec-helper (lambda (u344c@e u344d@r u344e@mr u344f@build) ((lambda (u3454@t) ((lambda (u3456@ls/false) (if u3456@ls/false (apply (lambda (u3458@lhs* u3459@rhs* u345a@b u345b@b*) (if (not (u2f4b@valid-bound-ids? u3458@lhs*)) (u3106@invalid-fmls-error u344c@e u3458@lhs*) ((lambda (u3460@lex* u3461@lab*) ((lambda (u3464@rib u3465@r) ((lambda (u3468@body u3469@rhs*) (u344f@build '#f u3460@lex* u3469@rhs* u3468@body)) (u3182@chi-internal (u2f2d@add-subst u3464@rib (cons u345a@b u345b@b*)) u3465@r u344e@mr) (u3168@chi-expr* (map (lambda (u346c@x) (u2f2d@add-subst u3464@rib u346c@x)) u3459@rhs*) u3465@r u344e@mr))) (u2efc@make-full-rib u3458@lhs* u3461@lab*) (u30e0@add-lexicals u3461@lab* u3460@lex* u344d@r))) (map u2ec5@gen-lexical u3458@lhs*) (map u2ec9@gen-label u3458@lhs*)))) u3456@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3454@t))) (u3148@syntax-dispatch u3454@t '(_ #(each (any any)) any . each-any)))) u344c@e))) (set! u30e4@letrec-transformer (lambda (u346e@e u346f@r u3470@mr) (u30e2@letrec-helper u346e@e u346f@r u3470@mr u2eaa@u2e04@build-letrec))) (set! u30e6@letrec*-transformer (lambda (u3474@e u3475@r u3476@mr) (u30e2@letrec-helper u3474@e u3475@r u3476@mr u2eab@u2e06@build-letrec*))) (set! u30e8@fluid-let-syntax-transformer (lambda (u347a@e u347b@r u347c@mr) ((lambda (u3481@lookup) (begin (set! u3481@lookup (lambda (u3494@x) (or (u2f5b@id->label u3494@x) (u3239@syntax-violation '#f '"unbound identifier" u347a@e u3494@x)))) ((lambda (u3482@t) ((lambda (u3484@ls/false) (if u3484@ls/false (apply (lambda (u3486@lhs* u3487@rhs* u3488@b u3489@b*) (if (not (u2f4b@valid-bound-ids? u3486@lhs*)) (u3106@invalid-fmls-error u347a@e u3486@lhs*) ((lambda (u348e@lab* u348f@rhs*) (u3182@chi-internal (cons u3488@b u3489@b*) (append (map cons u348e@lab* u348f@rhs*) u347b@r) (append (map cons u348e@lab* u348f@rhs*) u347c@mr))) (map u3481@lookup u3486@lhs*) (map (lambda (u3492@x) (u2f7f@make-eval-transformer (u31a9@expand-transformer u3492@x u347c@mr))) u3487@rhs*)))) u3484@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3482@t))) (u3148@syntax-dispatch u3482@t '(_ #(each (any any)) any . each-any)))) u347a@e))) '#f))) (set! u30ea@type-descriptor-transformer (lambda (u3496@e u3497@r u3498@mr) ((lambda (u349c@t) ((lambda (u349e@ls/false) (if (and u349e@ls/false (apply (lambda (u34a0@id) (u2f41@id? u34a0@id)) u349e@ls/false)) (apply (lambda (u34a2@id) ((lambda (u34a4@lab) ((lambda (u34a6@b) ((lambda (u34a8@type) ((lambda () (begin (if (not u34a4@lab) (u2f65@raise-unbound-error u34a2@id) (void)) (if (not (and (eq? u34a8@type '$rtd) (not (list? (u2f63@binding-value u34a6@b))))) (u3239@syntax-violation '#f '"not a record type" u3496@e) (void)) (list 'quote (u2f63@binding-value u34a6@b)))))) (u2f61@binding-type u34a6@b))) (u2f5d@label->binding u34a4@lab u3497@r))) (u2f5b@id->label u34a2@id))) u349e@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u349c@t))) (u3148@syntax-dispatch u349c@t '(_ any)))) u3496@e))) (set! u30ec@record-type-descriptor-transformer (lambda (u34aa@e u34ab@r u34ac@mr) ((lambda (u34b0@t) ((lambda (u34b2@ls/false) (if (and u34b2@ls/false (apply (lambda (u34b4@id) (u2f41@id? u34b4@id)) u34b2@ls/false)) (apply (lambda (u34b6@id) ((lambda (u34b8@lab) ((lambda (u34ba@b) ((lambda (u34bc@type) ((lambda () (begin (if (not u34b8@lab) (u2f65@raise-unbound-error u34b6@id) (void)) (if (not (and (eq? u34bc@type '$rtd) (list? (u2f63@binding-value u34ba@b)))) (u3239@syntax-violation '#f '"not a record type" u34aa@e) (void)) (u316c@chi-expr (car (u2f63@binding-value u34ba@b)) u34ab@r u34ac@mr))))) (u2f61@binding-type u34ba@b))) (u2f5d@label->binding u34b8@lab u34ab@r))) (u2f5b@id->label u34b6@id))) u34b2@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u34b0@t))) (u3148@syntax-dispatch u34b0@t '(_ any)))) u34aa@e))) (set! u30ee@record-constructor-descriptor-transformer (lambda (u34be@e u34bf@r u34c0@mr) ((lambda (u34c4@t) ((lambda (u34c6@ls/false) (if (and u34c6@ls/false (apply (lambda (u34c8@id) (u2f41@id? u34c8@id)) u34c6@ls/false)) (apply (lambda (u34ca@id) ((lambda (u34cc@lab) ((lambda (u34ce@b) ((lambda (u34d0@type) ((lambda () (begin (if (not u34cc@lab) (u2f65@raise-unbound-error u34ca@id) (void)) (if (not (and (eq? u34d0@type '$rtd) (list? (u2f63@binding-value u34ce@b)))) (u3239@syntax-violation '#f '"invalid type" u34be@e) (void)) (u316c@chi-expr (cadr (u2f63@binding-value u34ce@b)) u34bf@r u34c0@mr))))) (u2f61@binding-type u34ce@b))) (u2f5d@label->binding u34cc@lab u34bf@r))) (u2f5b@id->label u34ca@id))) u34c6@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u34c4@t))) (u3148@syntax-dispatch u34c4@t '(_ any)))) u34be@e))) (set! u30f0@when-macro (lambda (u34d2@e) ((lambda (u34d4@t) ((lambda (u34d6@ls/false) (if u34d6@ls/false (apply (lambda (u34d8@test u34d9@e u34da@e*) (u3102@bless (list 'if u34d8@test (cons 'begin (cons u34d9@e u34da@e*))))) u34d6@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u34d4@t))) (u3148@syntax-dispatch u34d4@t '(_ any any . each-any)))) u34d2@e))) (set! u30f2@unless-macro (lambda (u34de@e) ((lambda (u34e0@t) ((lambda (u34e2@ls/false) (if u34e2@ls/false (apply (lambda (u34e4@test u34e5@e u34e6@e*) (u3102@bless (list 'if (list 'not u34e4@test) (cons 'begin (cons u34e5@e u34e6@e*))))) u34e2@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u34e0@t))) (u3148@syntax-dispatch u34e0@t '(_ any any . each-any)))) u34de@e))) (set! u30f4@if-transformer (lambda (u34ea@e u34eb@r u34ec@mr) ((lambda (u34f0@t) ((lambda (u34f2@ls/false) (if u34f2@ls/false (apply (lambda (u34f4@e0 u34f5@e1 u34f6@e2) (list 'if (u316c@chi-expr u34f4@e0 u34eb@r u34ec@mr) (u316c@chi-expr u34f5@e1 u34eb@r u34ec@mr) (u316c@chi-expr u34f6@e2 u34eb@r u34ec@mr))) u34f2@ls/false) ((lambda (u34fa@t) ((lambda (u34fc@ls/false) (if u34fc@ls/false (apply (lambda (u34fe@e0 u34ff@e1) (list 'if (u316c@chi-expr u34fe@e0 u34eb@r u34ec@mr) (u316c@chi-expr u34ff@e1 u34eb@r u34ec@mr) (u2ea9@u2e02@build-void))) u34fc@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u34fa@t))) (u3148@syntax-dispatch u34fa@t '(_ any any)))) u34f0@t))) (u3148@syntax-dispatch u34f0@t '(_ any any any)))) u34ea@e))) (set! u30f6@and-transformer (lambda (u3502@e u3503@r u3504@mr) ((lambda (u3508@t) ((lambda (u350a@ls/false) (if u350a@ls/false (apply (lambda (u350c@e*) (cons 'and (u3168@chi-expr* u350c@e* u3503@r u3504@mr))) u350a@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3508@t))) (u3148@syntax-dispatch u3508@t '(_ . each-any)))) u3502@e))) (set! u30f8@or-transformer (lambda (u350e@e u350f@r u3510@mr) ((lambda (u3514@t) ((lambda (u3516@ls/false) (if u3516@ls/false (apply (lambda (u3518@e*) (cons 'or (u3168@chi-expr* u3518@e* u350f@r u3510@mr))) u3516@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3514@t))) (u3148@syntax-dispatch u3514@t '(_ . each-any)))) u350e@e))) (set! u30fa@case-macro (lambda (u351a@e) ((lambda (u351d@build-last u351f@build-one) (begin (set! u351d@build-last (lambda (u3544@cls) ((lambda (u3546@t) ((lambda (u3548@ls/false) (if u3548@ls/false (apply (lambda (u354a@e u354b@e*) (cons 'let (cons '() (cons '#f (cons u354a@e u354b@e*))))) u3548@ls/false) ((lambda (u354e@t) ((lambda (u3550@ls/false) (if u3550@ls/false (apply (lambda () (u351f@build-one u3544@cls '(if #f #f))) u3550@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u354e@t))) (u3148@syntax-dispatch u354e@t '_))) u3546@t))) (u3148@syntax-dispatch u3546@t '(#(scheme-id else) any . each-any)))) u3544@cls))) (set! u351f@build-one (lambda (u3536@cls u3537@k) ((lambda (u353a@t) ((lambda (u353c@ls/false) (if u353c@ls/false (apply (lambda (u353e@d* u353f@e u3540@e*) (list 'if (list 'memv 't (list 'quote u353e@d*)) (cons 'begin (cons u353f@e u3540@e*)) u3537@k)) u353c@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u353a@t))) (u3148@syntax-dispatch u353a@t '(each-any any . each-any)))) u3536@cls))) ((lambda (u3520@t) ((lambda (u3522@ls/false) (if u3522@ls/false (apply (lambda (u3524@expr) (u3102@bless (cons 'let (cons (list (list 't u3524@expr)) '((if #f #f)))))) u3522@ls/false) ((lambda (u3526@t) ((lambda (u3528@ls/false) (if u3528@ls/false (apply (lambda (u352a@expr u352b@cls u352c@cls*) (u3102@bless (list 'let (list (list 't u352a@expr)) ((letrec ((u3530@f (lambda (u3532@cls u3533@cls*) (if (null? u3533@cls*) (u351d@build-last u3532@cls) (u351f@build-one u3532@cls (u3530@f (car u3533@cls*) (cdr u3533@cls*))))))) u3530@f) u352b@cls u352c@cls*)))) u3528@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3526@t))) (u3148@syntax-dispatch u3526@t '(_ any any . each-any)))) u3520@t))) (u3148@syntax-dispatch u3520@t '(_ any)))) u351a@e))) '#f '#f))) (set! u30fc@quote-transformer (lambda (u3552@e u3553@r u3554@mr) ((lambda (u3558@t) ((lambda (u355a@ls/false) (if u355a@ls/false (apply (lambda (u355c@datum) (list 'quote (u2f57@stx->datum u355c@datum))) u355a@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3558@t))) (u3148@syntax-dispatch u3558@t '(_ any)))) u3552@e))) (set! u30fe@case-lambda-transformer (lambda (u355e@e u355f@r u3560@mr) ((lambda (u3564@t) ((lambda (u3566@ls/false) (if u3566@ls/false (apply (lambda (u3568@fmls* u3569@b* u356a@b**) (call-with-values (lambda () (u3174@chi-lambda-clause* u355e@e u3568@fmls* (map cons u3569@b* u356a@b**) u355f@r u3560@mr)) (lambda (u3572@u356f u3573@u3571) ((lambda (u3576@body* u3577@fmls*) (u2ea6@u2dd0@build-case-lambda (u322f@syntax-annotation u355e@e) u3577@fmls* u3576@body*)) u3573@u3571 u3572@u356f)))) u3566@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3564@t))) (u3148@syntax-dispatch u3564@t '(_ . #(each (any any . each-any)))))) u355e@e))) (set! u3100@lambda-transformer (lambda (u357a@e u357b@r u357c@mr) ((lambda (u3580@t) ((lambda (u3582@ls/false) (if u3582@ls/false (apply (lambda (u3584@fmls u3585@b u3586@b*) (call-with-values (lambda () (u3172@chi-lambda-clause u357a@e u3584@fmls (cons u3585@b u3586@b*) u357b@r u357c@mr)) (lambda (u358e@u358b u358f@u358d) ((lambda (u3592@body u3593@fmls) (u2ea5@u2dce@build-lambda (u322f@syntax-annotation u357a@e) u3593@fmls u3592@body)) u358f@u358d u358e@u358b)))) u3582@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3580@t))) (u3148@syntax-dispatch u3580@t '(_ any any . each-any)))) u357a@e))) (set! u3102@bless (lambda (u3596@x) (u2f29@mkstx ((letrec ((u3598@f (lambda (u359a@x) (if (u2f09@stx? u359a@x) u359a@x (if (pair? u359a@x) (cons (u3598@f (car u359a@x)) (u3598@f (cdr u359a@x))) (if (symbol? u359a@x) (u30d6@scheme-stx u359a@x) (if (vector? u359a@x) (list->vector (map u3598@f (vector->list u359a@x))) ((lambda () (begin '#f u359a@x)))))))))) u3598@f) u3596@x) '() '() '()))) (set! u3104@with-syntax-macro (lambda (u359c@e) ((lambda (u359e@t) ((lambda (u35a0@ls/false) (if u35a0@ls/false (apply (lambda (u35a2@pat* u35a3@expr* u35a4@b u35a5@b*) ((lambda (u35aa@idn*) (begin (u3170@verify-formals (map car u35aa@idn*) u359c@e) ((lambda (u35ac@t*) (u3102@bless (list 'let (map list u35ac@t* u35a3@expr*) ((letrec ((u35ae@f (lambda (u35b0@pat* u35b1@t*) (if (null? u35b0@pat*) (cons 'let (cons '() (cons u35a4@b u35a5@b*))) ((lambda () (begin '#f (list 'syntax-case (car u35b1@t*) '() (list (car u35b0@pat*) (u35ae@f (cdr u35b0@pat*) (cdr u35b1@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car u35b0@pat*)) (car u35b1@t*))))))))))) u35ae@f) u35a2@pat* u35ac@t*)))) (u3223@generate-temporaries u35a3@expr*)))) ((letrec ((u35b4@f (lambda (u35b6@pat*) (if (null? u35b6@pat*) '() ((lambda () (begin '#f (call-with-values (lambda () (u3146@convert-pattern (car u35b6@pat*) '())) (lambda (u35bc@u35b9 u35bd@u35bb) ((lambda (u35c0@idn* u35c1@pat) (append u35c0@idn* (u35b4@f (cdr u35b6@pat*)))) u35bd@u35bb u35bc@u35b9)))))))))) u35b4@f) u35a2@pat*))) u35a0@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u359e@t))) (u3148@syntax-dispatch u359e@t '(_ #(each (any any)) any . each-any)))) u359c@e))) (set! u3106@invalid-fmls-error (lambda (u35c4@stx u35c5@fmls) ((lambda (u35c8@t) ((lambda (u35ca@ls/false) (if u35ca@ls/false (apply (lambda (u35cc@id* u35cd@last) ((letrec ((u35d0@f (lambda (u35d2@id*) (if (null? u35d2@id*) (values) (if (not (u2f41@id? (car u35d2@id*))) (u3239@syntax-violation '#f '"not an identifier" u35c4@stx (car u35d2@id*)) ((lambda () (begin '#f (u35d0@f (cdr u35d2@id*)) (if (u2f4f@bound-id-member? (car u35d2@id*) (cdr u35d2@id*)) (u3239@syntax-violation '#f '"duplicate binding" u35c4@stx (car u35d2@id*)) (void)))))))))) u35d0@f) (if (u2f41@id? u35cd@last) (cons u35cd@last u35cc@id*) (if (u2f37@syntax-null? u35cd@last) u35cc@id* ((lambda () (begin '#f (u3239@syntax-violation '#f '"not an identifier" u35c4@stx u35cd@last)))))))) u35ca@ls/false) ((lambda (u35d4@t) ((lambda (u35d6@ls/false) (if u35d6@ls/false (apply (lambda () (u3239@syntax-violation '#f '"malformed binding form" u35c4@stx u35c5@fmls)) u35d6@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u35d4@t))) (u3148@syntax-dispatch u35d4@t '_))) u35c8@t))) (u3148@syntax-dispatch u35c8@t '#(each+ any () any)))) u35c5@fmls))) (set! u3108@let-macro (lambda (u35d8@stx) ((lambda (u35da@t) ((lambda (u35dc@ls/false) (if u35dc@ls/false (apply (lambda (u35de@lhs* u35df@rhs* u35e0@b u35e1@b*) (if (u2f4b@valid-bound-ids? u35de@lhs*) (u3102@bless (cons (cons 'lambda (cons u35de@lhs* (cons u35e0@b u35e1@b*))) u35df@rhs*)) (u3106@invalid-fmls-error u35d8@stx u35de@lhs*))) u35dc@ls/false) ((lambda (u35e6@t) ((lambda (u35e8@ls/false) (if (and u35e8@ls/false (apply (lambda (u35ea@f u35eb@lhs* u35ec@rhs* u35ed@b u35ee@b*) (u2f41@id? u35ea@f)) u35e8@ls/false)) (apply (lambda (u35f4@f u35f5@lhs* u35f6@rhs* u35f7@b u35f8@b*) (if (u2f4b@valid-bound-ids? u35f5@lhs*) (u3102@bless (cons (list 'letrec (list (list u35f4@f (cons 'lambda (cons u35f5@lhs* (cons u35f7@b u35f8@b*))))) u35f4@f) u35f6@rhs*)) (u3106@invalid-fmls-error u35d8@stx u35f5@lhs*))) u35e8@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u35e6@t))) (u3148@syntax-dispatch u35e6@t '(_ any #(each (any any)) any . each-any)))) u35da@t))) (u3148@syntax-dispatch u35da@t '(_ #(each (any any)) any . each-any)))) u35d8@stx))) (set! u310a@trace-let-macro (lambda (u35fe@stx) ((lambda (u3600@t) ((lambda (u3602@ls/false) (if (and u3602@ls/false (apply (lambda (u3604@f u3605@lhs* u3606@rhs* u3607@b u3608@b*) (u2f41@id? u3604@f)) u3602@ls/false)) (apply (lambda (u360e@f u360f@lhs* u3610@rhs* u3611@b u3612@b*) (if (u2f4b@valid-bound-ids? u360f@lhs*) (u3102@bless (cons (list 'letrec (list (list u360e@f (cons 'trace-lambda (cons u360e@f (cons u360f@lhs* (cons u3611@b u3612@b*)))))) u360e@f) u3610@rhs*)) (u3106@invalid-fmls-error u35fe@stx u360f@lhs*))) u3602@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3600@t))) (u3148@syntax-dispatch u3600@t '(_ any #(each (any any)) any . each-any)))) u35fe@stx))) (set! u310c@let-values-macro (lambda (u3618@stx) ((lambda (u361b@rename u361d@rename*) (begin (set! u361b@rename (lambda (u3680@x u3681@old* u3682@new*) (begin (if (not (u2f41@id? u3680@x)) (u3239@syntax-violation '#f '"not an indentifier" u3618@stx u3680@x) (void)) (if (u2f4f@bound-id-member? u3680@x u3681@old*) (u3239@syntax-violation '#f '"duplicate binding" u3618@stx u3680@x) (void)) ((lambda (u3686@y) (values u3686@y (cons u3680@x u3681@old*) (cons u3686@y u3682@new*))) (gensym (u323f@syntax->datum u3680@x)))))) (set! u361d@rename* (lambda (u366e@x* u366f@old* u3670@new*) (if (null? u366e@x*) (values '() u366f@old* u3670@new*) ((lambda () (begin '#f (call-with-values (lambda () (u361b@rename (car u366e@x*) u366f@old* u3670@new*)) (lambda (u3674@x u3675@old* u3676@new*) (call-with-values (lambda () (u361d@rename* (cdr u366e@x*) u3675@old* u3676@new*)) (lambda (u367a@x* u367b@old* u367c@new*) (values (cons u3674@x u367a@x*) u367b@old* u367c@new*))))))))))) ((lambda (u361e@t) ((lambda (u3620@ls/false) (if u3620@ls/false (apply (lambda (u3622@b u3623@b*) (cons* (u3102@bless 'let) '() u3622@b u3623@b*)) u3620@ls/false) ((lambda (u3626@t) ((lambda (u3628@ls/false) (if u3628@ls/false (apply (lambda (u362a@lhs* u362b@rhs* u362c@b u362d@b*) (u3102@bless ((letrec ((u3632@f (lambda (u3634@lhs* u3635@rhs* u3636@old* u3637@new*) (if (null? u3634@lhs*) (cons 'let (cons (map list u3636@old* u3637@new*) (cons u362c@b u362d@b*))) ((lambda () (begin '#f ((lambda (u363c@t) ((lambda (u363e@ls/false) (if u363e@ls/false (apply (lambda (u3640@x*) (call-with-values (lambda () (u361d@rename* u3640@x* u3636@old* u3637@new*)) (lambda (u3648@u3643 u3649@u3645 u364a@u3647) ((lambda (u364e@new* u364f@old* u3650@y*) (list 'call-with-values (list 'lambda '() (car u3635@rhs*)) (list 'lambda u3650@y* (u3632@f (cdr u3634@lhs*) (cdr u3635@rhs*) u364f@old* u364e@new*)))) u364a@u3647 u3649@u3645 u3648@u3643)))) u363e@ls/false) ((lambda (u3654@t) ((lambda (u3656@ls/false) (if u3656@ls/false (apply (lambda (u3658@x* u3659@x) (call-with-values (lambda () (u361b@rename u3659@x u3636@old* u3637@new*)) (lambda (u365c@y u365d@old* u365e@new*) (call-with-values (lambda () (u361d@rename* u3658@x* u365d@old* u365e@new*)) (lambda (u3662@y* u3663@old* u3664@new*) (list 'call-with-values (list 'lambda '() (car u3635@rhs*)) (list 'lambda (append u3662@y* u365c@y) (u3632@f (cdr u3634@lhs*) (cdr u3635@rhs*) u3663@old* u3664@new*)))))))) u3656@ls/false) ((lambda (u3668@t) ((lambda (u366a@ls/false) (if u366a@ls/false (apply (lambda (u366c@others) (u3239@syntax-violation '#f '"malformed bindings" u3618@stx u366c@others)) u366a@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3668@t))) (u3148@syntax-dispatch u3668@t 'any))) u3654@t))) (u3148@syntax-dispatch u3654@t '#(each+ any () any)))) u363c@t))) (u3148@syntax-dispatch u363c@t 'each-any))) (car u3634@lhs*))))))))) u3632@f) u362a@lhs* u362b@rhs* '() '()))) u3628@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3626@t))) (u3148@syntax-dispatch u3626@t '(_ #(each (any any)) any . each-any)))) u361e@t))) (u3148@syntax-dispatch u361e@t '(_ () any . each-any)))) u3618@stx))) '#f '#f))) (set! u310e@let*-values-macro (lambda (u3688@stx) ((lambda (u368b@check) (begin (set! u368b@check (lambda (u36ba@x*) (if (not (null? u36ba@x*)) ((lambda (u36bc@x) (begin (if (not (u2f41@id? u36bc@x)) (u3239@syntax-violation '#f '"not an identifier" u3688@stx u36bc@x) (void)) (u368b@check (cdr u36ba@x*)) (if (u2f4f@bound-id-member? u36bc@x (cdr u36ba@x*)) (u3239@syntax-violation '#f '"duplicate identifier" u3688@stx u36bc@x) (void)))) (car u36ba@x*)) (void)))) ((lambda (u368c@t) ((lambda (u368e@ls/false) (if u368e@ls/false (apply (lambda (u3690@b u3691@b*) (cons* (u3102@bless 'let) '() u3690@b u3691@b*)) u368e@ls/false) ((lambda (u3694@t) ((lambda (u3696@ls/false) (if u3696@ls/false (apply (lambda (u3698@lhs* u3699@rhs* u369a@b u369b@b*) (u3102@bless ((letrec ((u36a0@f (lambda (u36a2@lhs* u36a3@rhs*) (if (null? u36a2@lhs*) (cons 'begin (cons u369a@b u369b@b*)) ((lambda () (begin '#f ((lambda (u36a6@t) ((lambda (u36a8@ls/false) (if u36a8@ls/false (apply (lambda (u36aa@x*) (begin (u368b@check u36aa@x*) (list 'call-with-values (list 'lambda '() (car u36a3@rhs*)) (list 'lambda u36aa@x* (u36a0@f (cdr u36a2@lhs*) (cdr u36a3@rhs*)))))) u36a8@ls/false) ((lambda (u36ac@t) ((lambda (u36ae@ls/false) (if u36ae@ls/false (apply (lambda (u36b0@x* u36b1@x) (begin (u368b@check (cons u36b1@x u36b0@x*)) (list 'call-with-values (list 'lambda '() (car u36a3@rhs*)) (list 'lambda (append u36b0@x* u36b1@x) (u36a0@f (cdr u36a2@lhs*) (cdr u36a3@rhs*)))))) u36ae@ls/false) ((lambda (u36b4@t) ((lambda (u36b6@ls/false) (if u36b6@ls/false (apply (lambda (u36b8@others) (u3239@syntax-violation '#f '"malformed bindings" u3688@stx u36b8@others)) u36b6@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u36b4@t))) (u3148@syntax-dispatch u36b4@t 'any))) u36ac@t))) (u3148@syntax-dispatch u36ac@t '#(each+ any () any)))) u36a6@t))) (u3148@syntax-dispatch u36a6@t 'each-any))) (car u36a2@lhs*))))))))) u36a0@f) u3698@lhs* u3699@rhs*))) u3696@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3694@t))) (u3148@syntax-dispatch u3694@t '(_ #(each (any any)) any . each-any)))) u368c@t))) (u3148@syntax-dispatch u368c@t '(_ () any . each-any)))) u3688@stx))) '#f))) (set! u3110@trace-lambda-macro (lambda (u36be@stx) ((lambda (u36c0@t) ((lambda (u36c2@ls/false) (if u36c2@ls/false (apply (lambda (u36c4@who u36c5@fmls u36c6@b u36c7@b*) (if (u2f4b@valid-bound-ids? u36c5@fmls) (u3102@bless (list 'make-traced-procedure (list 'quote u36c4@who) (cons 'lambda (cons u36c5@fmls (cons u36c6@b u36c7@b*))))) (u3106@invalid-fmls-error u36be@stx u36c5@fmls))) u36c2@ls/false) ((lambda (u36cc@t) ((lambda (u36ce@ls/false) (if u36ce@ls/false (apply (lambda (u36d0@who u36d1@fmls u36d2@last u36d3@b u36d4@b*) (if (u2f4b@valid-bound-ids? (cons u36d2@last u36d1@fmls)) (u3102@bless (list 'make-traced-procedure (list 'quote u36d0@who) (cons 'lambda (cons (append u36d1@fmls u36d2@last) (cons u36d3@b u36d4@b*))))) (u3106@invalid-fmls-error u36be@stx (append u36d1@fmls u36d2@last)))) u36ce@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u36cc@t))) (u3148@syntax-dispatch u36cc@t '(_ any #(each+ any () any) any . each-any)))) u36c0@t))) (u3148@syntax-dispatch u36c0@t '(_ any each-any any . each-any)))) u36be@stx))) (set! u3112@trace-define-macro (lambda (u36da@stx) ((lambda (u36dc@t) ((lambda (u36de@ls/false) (if u36de@ls/false (apply (lambda (u36e0@who u36e1@fmls u36e2@b u36e3@b*) (if (u2f4b@valid-bound-ids? u36e1@fmls) (u3102@bless (list 'define u36e0@who (list 'make-traced-procedure (list 'quote u36e0@who) (cons 'lambda (cons u36e1@fmls (cons u36e2@b u36e3@b*)))))) (u3106@invalid-fmls-error u36da@stx u36e1@fmls))) u36de@ls/false) ((lambda (u36e8@t) ((lambda (u36ea@ls/false) (if u36ea@ls/false (apply (lambda (u36ec@who u36ed@fmls u36ee@last u36ef@b u36f0@b*) (if (u2f4b@valid-bound-ids? (cons u36ee@last u36ed@fmls)) (u3102@bless (list 'define u36ec@who (list 'make-traced-procedure (list 'quote u36ec@who) (cons 'lambda (cons (append u36ed@fmls u36ee@last) (cons u36ef@b u36f0@b*)))))) (u3106@invalid-fmls-error u36da@stx (append u36ed@fmls u36ee@last)))) u36ea@ls/false) ((lambda (u36f6@t) ((lambda (u36f8@ls/false) (if u36f8@ls/false (apply (lambda (u36fa@who u36fb@expr) (if (u2f41@id? u36fa@who) (u3102@bless (list 'define u36fa@who (list 'let (list (list 'v u36fb@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote u36fa@who) '(v))) '(v))))))) (u3239@syntax-violation '#f '"invalid name" u36da@stx))) u36f8@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u36f6@t))) (u3148@syntax-dispatch u36f6@t '(_ any any)))) u36e8@t))) (u3148@syntax-dispatch u36e8@t '(_ (any . #(each+ any () any)) any . each-any)))) u36dc@t))) (u3148@syntax-dispatch u36dc@t '(_ (any . each-any) any . each-any)))) u36da@stx))) (set! u3114@trace-define-syntax-macro (lambda (u36fe@stx) ((lambda (u3700@t) ((lambda (u3702@ls/false) (if u3702@ls/false (apply (lambda (u3704@who u3705@expr) (if (u2f41@id? u3704@who) (u3102@bless (list 'define-syntax u3704@who (list 'make-traced-macro (list 'quote u3704@who) u3705@expr))) (u3239@syntax-violation '#f '"invalid name" u36fe@stx))) u3702@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3700@t))) (u3148@syntax-dispatch u3700@t '(_ any any)))) u36fe@stx))) (set! u3116@trace-let/rec-syntax (lambda (u3708@who) (lambda (u370a@stx) ((lambda (u370c@t) ((lambda (u370e@ls/false) (if u370e@ls/false (apply (lambda (u3710@lhs* u3711@rhs* u3712@b u3713@b*) (if (u2f4b@valid-bound-ids? u3710@lhs*) ((lambda (u3718@rhs*) (u3102@bless (cons u3708@who (cons (map list u3710@lhs* u3718@rhs*) (cons u3712@b u3713@b*))))) (map (lambda (u371a@lhs u371b@rhs) (list 'make-traced-macro (list 'quote u371a@lhs) u371b@rhs)) u3710@lhs* u3711@rhs*)) (u3106@invalid-fmls-error u370a@stx u3710@lhs*))) u370e@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u370c@t))) (u3148@syntax-dispatch u370c@t '(_ #(each (any any)) any . each-any)))) u370a@stx)))) (set! u3118@trace-let-syntax-macro (u3116@trace-let/rec-syntax 'let-syntax)) (set! u311a@trace-letrec-syntax-macro (u3116@trace-let/rec-syntax 'letrec-syntax)) (set! u311c@guard-macro (lambda (u371e@x) ((lambda (u3721@gen-clauses) (begin (set! u3721@gen-clauses (lambda (u3738@con u3739@outerk u373a@clause*) ((lambda (u373f@f u3741@f*) (begin (set! u373f@f (lambda (u3778@x u3779@k) ((lambda (u377c@t) ((lambda (u377e@ls/false) (if u377e@ls/false (apply (lambda (u3780@e u3781@p) ((lambda (u3784@t) (list 'let (list (list u3784@t u3780@e)) (list 'if u3784@t (list u3781@p u3784@t) u3779@k))) (gensym))) u377e@ls/false) ((lambda (u3786@t) ((lambda (u3788@ls/false) (if u3788@ls/false (apply (lambda (u378a@e) ((lambda (u378c@t) (list 'let (list (list u378c@t u378a@e)) (list 'if u378c@t u378c@t u3779@k))) (gensym))) u3788@ls/false) ((lambda (u378e@t) ((lambda (u3790@ls/false) (if u3790@ls/false (apply (lambda (u3792@e u3793@v u3794@v*) (list 'if u3792@e (cons 'begin (cons u3793@v u3794@v*)) u3779@k)) u3790@ls/false) ((lambda (u3798@t) ((lambda (u379a@ls/false) (if u379a@ls/false (apply (lambda () (u3239@syntax-violation '#f '"invalid guard clause" u3778@x)) u379a@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3798@t))) (u3148@syntax-dispatch u3798@t '_))) u378e@t))) (u3148@syntax-dispatch u378e@t '(any any . each-any)))) u3786@t))) (u3148@syntax-dispatch u3786@t '(any)))) u377c@t))) (u3148@syntax-dispatch u377c@t '(any #(scheme-id =>) any)))) u3778@x))) (set! u3741@f* (lambda (u374e@x*) ((lambda (u3750@t) ((lambda (u3752@ls/false) (if u3752@ls/false (apply (lambda () ((lambda (u3754@g) (values (list u3754@g (list 'lambda '() (list 'raise-continuable u3738@con))) u3754@g)) (gensym))) u3752@ls/false) ((lambda (u3756@t) ((lambda (u3758@ls/false) (if u3758@ls/false (apply (lambda (u375a@e u375b@e*) (values (cons 'begin (cons u375a@e u375b@e*)) '#f)) u3758@ls/false) ((lambda (u375e@t) ((lambda (u3760@ls/false) (if u3760@ls/false (apply (lambda (u3762@cls u3763@cls*) (call-with-values (lambda () (u3741@f* u3763@cls*)) (lambda (u376a@u3767 u376b@u3769) ((lambda (u376e@g u376f@e) (values (u373f@f u3762@cls u376f@e) u376e@g)) u376b@u3769 u376a@u3767)))) u3760@ls/false) ((lambda (u3772@t) ((lambda (u3774@ls/false) (if u3774@ls/false (apply (lambda (u3776@others) (u3239@syntax-violation '#f '"invalid guard clause" u3776@others)) u3774@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3772@t))) (u3148@syntax-dispatch u3772@t 'any))) u375e@t))) (u3148@syntax-dispatch u375e@t '(any . any)))) u3756@t))) (u3148@syntax-dispatch u3756@t '((#(scheme-id else) any . each-any))))) u3750@t))) (u3148@syntax-dispatch u3750@t '()))) u374e@x*))) (call-with-values (lambda () (u3741@f* u373a@clause*)) (lambda (u3746@u3743 u3747@u3745) ((lambda (u374a@raisek u374b@code) (if u374a@raisek (list (list 'call/cc (list 'lambda (list u374a@raisek) (list u3739@outerk (list 'lambda '() u374b@code))))) (list u3739@outerk (list 'lambda '() u374b@code)))) u3747@u3745 u3746@u3743))))) '#f '#f))) ((lambda (u3722@t) ((lambda (u3724@ls/false) (if (and u3724@ls/false (apply (lambda (u3726@con u3727@clause* u3728@b u3729@b*) (u2f41@id? u3726@con)) u3724@ls/false)) (apply (lambda (u372e@con u372f@clause* u3730@b u3731@b*) ((lambda (u3736@outerk) (u3102@bless (list (list 'call/cc (list 'lambda (list u3736@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list u372e@con) (u3721@gen-clauses u372e@con u3736@outerk u372f@clause*)) (cons 'lambda (cons '() (cons u3730@b u3731@b*)))))))))) (gensym))) u3724@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3722@t))) (u3148@syntax-dispatch u3722@t '(_ (any . each-any) any . each-any)))) u371e@x))) '#f))) (set! u311e@define-enumeration-macro (lambda (u379c@stx) ((lambda (u379f@set? u37a1@remove-dups) (begin (set! u379f@set? (lambda (u37b8@x) (or (null? u37b8@x) (and (not (memq (car u37b8@x) (cdr u37b8@x))) (u379f@set? (cdr u37b8@x)))))) (set! u37a1@remove-dups (lambda (u37b6@ls) (if (null? u37b6@ls) '() ((lambda () (begin '#f (cons (car u37b6@ls) (u37a1@remove-dups (remq (car u37b6@ls) (cdr u37b6@ls)))))))))) ((lambda (u37a2@t) ((lambda (u37a4@ls/false) (if (and u37a4@ls/false (apply (lambda (u37a6@name u37a7@id* u37a8@maker) (and (u2f41@id? u37a6@name) (u2f41@id? u37a8@maker) (for-all u2f41@id? u37a7@id*))) u37a4@ls/false)) (apply (lambda (u37ac@name u37ad@id* u37ae@maker) ((lambda (u37b2@name* u37b3@mk) (u3102@bless (list 'begin (list 'define u37b3@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote u37b2@name*)))) (list 'define-syntax u37ac@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote u37b2@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote u37ac@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax u37ae@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote u37ae@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote u37b2@name*)) (cons 'syntax-violation (cons (list 'quote u37ae@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons u37b3@mk '('(n* ...)))))))))))) (u37a1@remove-dups (u323f@syntax->datum u37ad@id*)) (gensym))) u37a4@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u37a2@t))) (u3148@syntax-dispatch u37a2@t '(_ any each-any any)))) u379c@stx))) '#f '#f))) (set! u3120@time-macro (lambda (u37ba@stx) ((lambda (u37bc@t) ((lambda (u37be@ls/false) (if u37be@ls/false (apply (lambda (u37c0@expr) (u3102@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() u37c0@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) u37be@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u37bc@t))) (u3148@syntax-dispatch u37bc@t '(_ any)))) u37ba@stx))) (set! u3122@delay-macro (lambda (u37c2@stx) ((lambda (u37c4@t) ((lambda (u37c6@ls/false) (if u37c6@ls/false (apply (lambda (u37c8@expr) (u3102@bless (list 'make-promise (list 'lambda '() u37c8@expr)))) u37c6@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u37c4@t))) (u3148@syntax-dispatch u37c4@t '(_ any)))) u37c2@stx))) (set! u3124@assert-macro (lambda (u37ca@stx) ((lambda (u37cc@t) ((lambda (u37ce@ls/false) (if u37ce@ls/false (apply (lambda (u37d0@expr) ((lambda (u37d2@pos) (u3102@bless (list 'unless u37d0@expr (list 'assertion-error (list 'quote u37d0@expr) (list 'quote u37d2@pos))))) (or (u322d@expression-position u37ca@stx) (u322d@expression-position u37d0@expr)))) u37ce@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u37cc@t))) (u3148@syntax-dispatch u37cc@t '(_ any)))) u37ca@stx))) (set! u3126@endianness-macro (lambda (u37d4@stx) ((lambda (u37d6@t) ((lambda (u37d8@ls/false) (if u37d8@ls/false (apply (lambda (u37da@e) ((lambda (u37dc@t) (if (memv u37dc@t '(little)) (u3102@bless ''little) (if (memv u37dc@t '(big)) (u3102@bless ''big) ((lambda () (begin '#f (u3239@syntax-violation '#f '"endianness must be big or little" u37d4@stx))))))) (u323f@syntax->datum u37da@e))) u37d8@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u37d6@t))) (u3148@syntax-dispatch u37d6@t '(_ any)))) u37d4@stx))) (set! u3128@identifier-syntax-macro (lambda (u37de@stx) ((lambda (u37e0@t) ((lambda (u37e2@ls/false) (if u37e2@ls/false (apply (lambda (u37e4@expr) (u3102@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax u37e4@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax u37e4@expr) '((syntax (e* ...)))))))))) u37e2@ls/false) ((lambda (u37e6@t) ((lambda (u37e8@ls/false) (if (and u37e8@ls/false (apply (lambda (u37ea@id1 u37eb@expr1 u37ec@id2 u37ed@expr2 u37ee@expr3) (and (u2f41@id? u37ea@id1) (u2f41@id? u37ec@id2) (u2f41@id? u37ed@expr2))) u37e8@ls/false)) (apply (lambda (u37f4@id1 u37f5@expr1 u37f6@id2 u37f7@expr2 u37f8@expr3) (u3102@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax u37f5@expr1)) (list (list 'set! 'id u37f7@expr2) (list 'syntax u37f8@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons u37f5@expr1 '(e* ...))))))))) u37e8@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u37e6@t))) (u3148@syntax-dispatch u37e6@t '(_ (any any) ((#(scheme-id set!) any any) any))))) u37e0@t))) (u3148@syntax-dispatch u37e0@t '(_ any)))) u37de@stx))) (set! u312a@do-macro (lambda (u37fe@stx) ((lambda (u3801@bind) (begin (set! u3801@bind (lambda (u3818@x) ((lambda (u381a@t) ((lambda (u381c@ls/false) (if u381c@ls/false (apply (lambda (u381e@x u381f@init) (list u381e@x u381f@init u381e@x)) u381c@ls/false) ((lambda (u3822@t) ((lambda (u3824@ls/false) (if u3824@ls/false (apply (lambda (u3826@x u3827@init u3828@step) (list u3826@x u3827@init u3828@step)) u3824@ls/false) ((lambda (u382c@t) ((lambda (u382e@ls/false) (if u382e@ls/false (apply (lambda () (u3239@syntax-violation '#f '"invalid binding" u37fe@stx)) u382e@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u382c@t))) (u3148@syntax-dispatch u382c@t '_))) u3822@t))) (u3148@syntax-dispatch u3822@t '(any any any)))) u381a@t))) (u3148@syntax-dispatch u381a@t '(any any)))) u3818@x))) ((lambda (u3802@t) ((lambda (u3804@ls/false) (if u3804@ls/false (apply (lambda (u3806@binding* u3807@test u3808@expr* u3809@command*) ((lambda (u380e@t) ((lambda (u3810@ls/false) (if u3810@ls/false (apply (lambda (u3812@x* u3813@init* u3814@step*) (if (u2f4b@valid-bound-ids? u3812@x*) (u3102@bless (list 'letrec (list (list 'loop (list 'lambda u3812@x* (list 'if u3807@test (cons 'begin (cons '(if #f #f) u3808@expr*)) (cons 'begin (append u3809@command* (list (cons 'loop u3814@step*)))))))) (cons 'loop u3813@init*))) (u3239@syntax-violation '#f '"invalid bindings" u37fe@stx))) u3810@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u380e@t))) (u3148@syntax-dispatch u380e@t '#(each (any any any))))) (map u3801@bind u3806@binding*))) u3804@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3802@t))) (u3148@syntax-dispatch u3802@t '(_ each-any (any . each-any) . each-any)))) u37fe@stx))) '#f))) (set! u312c@let*-macro (lambda (u3830@stx) ((lambda (u3832@t) ((lambda (u3834@ls/false) (if (and u3834@ls/false (apply (lambda (u3836@lhs* u3837@rhs* u3838@b u3839@b*) (for-all u2f41@id? u3836@lhs*)) u3834@ls/false)) (apply (lambda (u383e@lhs* u383f@rhs* u3840@b u3841@b*) (u3102@bless ((letrec ((u3846@f (lambda (u3848@x*) (if (null? u3848@x*) (cons 'let (cons '() (cons u3840@b u3841@b*))) ((lambda () (begin '#f (list 'let (list (car u3848@x*)) (u3846@f (cdr u3848@x*)))))))))) u3846@f) (map list u383e@lhs* u383f@rhs*)))) u3834@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3832@t))) (u3148@syntax-dispatch u3832@t '(_ #(each (any any)) any . each-any)))) u3830@stx))) (set! u312e@or-macro (lambda (u384a@stx) ((lambda (u384c@t) ((lambda (u384e@ls/false) (if u384e@ls/false (apply (lambda () '#f) u384e@ls/false) ((lambda (u3850@t) ((lambda (u3852@ls/false) (if u3852@ls/false (apply (lambda (u3854@e u3855@e*) (u3102@bless ((letrec ((u3858@f (lambda (u385a@e u385b@e*) (if (null? u385b@e*) (list 'begin '#f u385a@e) ((lambda () (begin '#f (list 'let (list (list 't u385a@e)) (list 'if 't 't (u3858@f (car u385b@e*) (cdr u385b@e*))))))))))) u3858@f) u3854@e u3855@e*))) u3852@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3850@t))) (u3148@syntax-dispatch u3850@t '(_ any . each-any)))) u384c@t))) (u3148@syntax-dispatch u384c@t '(_)))) u384a@stx))) (set! u3130@and-macro (lambda (u385e@stx) ((lambda (u3860@t) ((lambda (u3862@ls/false) (if u3862@ls/false (apply (lambda () '#t) u3862@ls/false) ((lambda (u3864@t) ((lambda (u3866@ls/false) (if u3866@ls/false (apply (lambda (u3868@e u3869@e*) (u3102@bless ((letrec ((u386c@f (lambda (u386e@e u386f@e*) (if (null? u386f@e*) (list 'begin '#f u386e@e) ((lambda () (begin '#f (cons 'if (cons u386e@e (cons (u386c@f (car u386f@e*) (cdr u386f@e*)) '(#f))))))))))) u386c@f) u3868@e u3869@e*))) u3866@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3864@t))) (u3148@syntax-dispatch u3864@t '(_ any . each-any)))) u3860@t))) (u3148@syntax-dispatch u3860@t '(_)))) u385e@stx))) (set! u3132@cond-macro (lambda (u3872@stx) ((lambda (u3874@t) ((lambda (u3876@ls/false) (if u3876@ls/false (apply (lambda (u3878@cls u3879@cls*) (u3102@bless ((letrec ((u387c@f (lambda (u387e@cls u387f@cls*) (if (null? u387f@cls*) ((lambda (u3882@t) ((lambda (u3884@ls/false) (if u3884@ls/false (apply (lambda (u3886@e u3887@e*) (cons 'let (cons '() (cons '#f (cons u3886@e u3887@e*))))) u3884@ls/false) ((lambda (u388a@t) ((lambda (u388c@ls/false) (if u388c@ls/false (apply (lambda (u388e@e u388f@p) (list 'let (list (list 't u388e@e)) (list 'if 't (cons u388f@p '(t))))) u388c@ls/false) ((lambda (u3892@t) ((lambda (u3894@ls/false) (if u3894@ls/false (apply (lambda (u3896@e) (cons 'or (cons u3896@e '((if #f #f))))) u3894@ls/false) ((lambda (u3898@t) ((lambda (u389a@ls/false) (if u389a@ls/false (apply (lambda (u389c@e u389d@e*) (list 'if u389c@e (cons 'begin u389d@e*))) u389a@ls/false) ((lambda (u38a0@t) ((lambda (u38a2@ls/false) (if u38a2@ls/false (apply (lambda () (u3239@syntax-violation '#f '"invalid last clause" u3872@stx)) u38a2@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u38a0@t))) (u3148@syntax-dispatch u38a0@t '_))) u3898@t))) (u3148@syntax-dispatch u3898@t '(any . each-any)))) u3892@t))) (u3148@syntax-dispatch u3892@t '(any)))) u388a@t))) (u3148@syntax-dispatch u388a@t '(any #(scheme-id =>) any)))) u3882@t))) (u3148@syntax-dispatch u3882@t '(#(scheme-id else) any . each-any)))) u387e@cls) ((lambda () (begin '#f ((lambda (u38a4@t) ((lambda (u38a6@ls/false) (if u38a6@ls/false (apply (lambda (u38a8@e u38a9@e*) (u3239@syntax-violation '#f '"incorrect position of keyword else" u3872@stx)) u38a6@ls/false) ((lambda (u38ac@t) ((lambda (u38ae@ls/false) (if u38ae@ls/false (apply (lambda (u38b0@e u38b1@p) (list 'let (list (list 't u38b0@e)) (list 'if 't (cons u38b1@p '(t)) (u387c@f (car u387f@cls*) (cdr u387f@cls*))))) u38ae@ls/false) ((lambda (u38b4@t) ((lambda (u38b6@ls/false) (if u38b6@ls/false (apply (lambda (u38b8@e) (list 'or u38b8@e (u387c@f (car u387f@cls*) (cdr u387f@cls*)))) u38b6@ls/false) ((lambda (u38ba@t) ((lambda (u38bc@ls/false) (if u38bc@ls/false (apply (lambda (u38be@e u38bf@e*) (list 'if u38be@e (cons 'begin u38bf@e*) (u387c@f (car u387f@cls*) (cdr u387f@cls*)))) u38bc@ls/false) ((lambda (u38c2@t) ((lambda (u38c4@ls/false) (if u38c4@ls/false (apply (lambda () (u3239@syntax-violation '#f '"invalid last clause" u3872@stx)) u38c4@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u38c2@t))) (u3148@syntax-dispatch u38c2@t '_))) u38ba@t))) (u3148@syntax-dispatch u38ba@t '(any . each-any)))) u38b4@t))) (u3148@syntax-dispatch u38b4@t '(any)))) u38ac@t))) (u3148@syntax-dispatch u38ac@t '(any #(scheme-id =>) any)))) u38a4@t))) (u3148@syntax-dispatch u38a4@t '(#(scheme-id else) any . each-any)))) u387e@cls)))))))) u387c@f) u3878@cls u3879@cls*))) u3876@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3874@t))) (u3148@syntax-dispatch u3874@t '(_ any . each-any)))) u3872@stx))) (set! u3134@syntax-rules-macro (lambda (u38c6@e) ((lambda (u38c8@t) ((lambda (u38ca@ls/false) (if u38ca@ls/false (apply (lambda (u38cc@lits u38cd@pat* u38ce@tmp*) (begin (u314e@verify-literals u38cc@lits u38c6@e) (u3102@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons u38cc@lits (map (lambda (u38d2@pat u38d3@tmp) ((lambda (u38d6@t) ((lambda (u38d8@ls/false) (if u38d8@ls/false (apply (lambda (u38da@rest) (list (cons 'g u38da@rest) (list 'syntax u38d3@tmp))) u38d8@ls/false) ((lambda (u38dc@t) ((lambda (u38de@ls/false) (if u38de@ls/false (apply (lambda () (u3239@syntax-violation '#f '"invalid syntax-rules pattern" u38c6@e u38d2@pat)) u38de@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u38dc@t))) (u3148@syntax-dispatch u38dc@t '_))) u38d6@t))) (u3148@syntax-dispatch u38d6@t '(_ . any)))) u38d2@pat)) u38cd@pat* u38ce@tmp*)))))))) u38ca@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u38c8@t))) (u3148@syntax-dispatch u38c8@t '(_ each-any . #(each (any any)))))) u38c6@e))) (set! u3136@quasiquote-macro ((lambda () ((lambda (u38e1@datum u38fd@quasicons* u38ff@quasicons u3901@quasiappend u3903@quasivector u3905@vquasi u3907@quasi) (begin (set! u38e1@datum (lambda (u39e2@x) (list (u30d6@scheme-stx 'quote) (u2f29@mkstx u39e2@x '() '() '())))) (set! u38fd@quasicons* (lambda (u39da@x u39db@y) ((letrec ((u39de@f (lambda (u39e0@x) (if (null? u39e0@x) u39db@y (u38ff@quasicons (car u39e0@x) (u39de@f (cdr u39e0@x))))))) u39de@f) u39da@x))) (set! u38ff@quasicons (lambda (u39b4@x u39b5@y) ((lambda (u39b8@t) ((lambda (u39ba@ls/false) (if u39ba@ls/false (apply (lambda (u39bc@dy) ((lambda (u39be@t) ((lambda (u39c0@ls/false) (if u39c0@ls/false (apply (lambda (u39c2@dx) (list (u30d6@scheme-stx 'quote) (cons u39c2@dx u39bc@dy))) u39c0@ls/false) ((lambda (u39c4@t) ((lambda (u39c6@ls/false) (if u39c6@ls/false (apply (lambda () ((lambda (u39c8@t) ((lambda (u39ca@ls/false) (if u39ca@ls/false (apply (lambda () (list (u30d6@scheme-stx 'list) u39b4@x)) u39ca@ls/false) ((lambda (u39cc@t) ((lambda (u39ce@ls/false) (if u39ce@ls/false (apply (lambda () (list (u30d6@scheme-stx 'cons) u39b4@x u39b5@y)) u39ce@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u39cc@t))) (u3148@syntax-dispatch u39cc@t '_))) u39c8@t))) (u3148@syntax-dispatch u39c8@t '()))) u39bc@dy)) u39c6@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u39c4@t))) (u3148@syntax-dispatch u39c4@t '_))) u39be@t))) (u3148@syntax-dispatch u39be@t '(#(scheme-id quote) any)))) u39b4@x)) u39ba@ls/false) ((lambda (u39d0@t) ((lambda (u39d2@ls/false) (if u39d2@ls/false (apply (lambda (u39d4@stuff) (cons* (u30d6@scheme-stx 'list) u39b4@x u39d4@stuff)) u39d2@ls/false) ((lambda (u39d6@t) ((lambda (u39d8@ls/false) (if u39d8@ls/false (apply (lambda () (list (u30d6@scheme-stx 'cons) u39b4@x u39b5@y)) u39d8@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u39d6@t))) (u3148@syntax-dispatch u39d6@t '_))) u39d0@t))) (u3148@syntax-dispatch u39d0@t '(#(scheme-id list) . each-any)))) u39b8@t))) (u3148@syntax-dispatch u39b8@t '(#(scheme-id quote) any)))) u39b5@y))) (set! u3901@quasiappend (lambda (u399a@x u399b@y) ((lambda (u399e@ls) (if (null? u399e@ls) (list (u30d6@scheme-stx 'quote) '()) (if (null? (cdr u399e@ls)) (car u399e@ls) ((lambda () (begin '#f (cons* (u30d6@scheme-stx 'append) u399e@ls))))))) ((letrec ((u39a0@f (lambda (u39a2@x) (if (null? u39a2@x) ((lambda (u39a4@t) ((lambda (u39a6@ls/false) (if u39a6@ls/false (apply (lambda () '()) u39a6@ls/false) ((lambda (u39a8@t) ((lambda (u39aa@ls/false) (if u39aa@ls/false (apply (lambda () (list u399b@y)) u39aa@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u39a8@t))) (u3148@syntax-dispatch u39a8@t '_))) u39a4@t))) (u3148@syntax-dispatch u39a4@t '(#(scheme-id quote) ())))) u399b@y) ((lambda (u39ac@t) ((lambda (u39ae@ls/false) (if u39ae@ls/false (apply (lambda () (u39a0@f (cdr u39a2@x))) u39ae@ls/false) ((lambda (u39b0@t) ((lambda (u39b2@ls/false) (if u39b2@ls/false (apply (lambda () (cons (car u39a2@x) (u39a0@f (cdr u39a2@x)))) u39b2@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u39b0@t))) (u3148@syntax-dispatch u39b0@t '_))) u39ac@t))) (u3148@syntax-dispatch u39ac@t '(#(scheme-id quote) ())))) (car u39a2@x)))))) u39a0@f) u399a@x)))) (set! u3903@quasivector (lambda (u3968@x) ((lambda (u396a@pat-x) ((lambda (u396c@t) ((lambda (u396e@ls/false) (if u396e@ls/false (apply (lambda (u3970@x*) (list (u30d6@scheme-stx 'quote) (list->vector u3970@x*))) u396e@ls/false) ((lambda (u3972@t) ((lambda (u3974@ls/false) (if u3974@ls/false (apply (lambda () ((letrec ((u3976@f (lambda (u3978@x u3979@k) ((lambda (u397c@t) ((lambda (u397e@ls/false) (if u397e@ls/false (apply (lambda (u3980@x*) (u3979@k (map (lambda (u3982@x) (list (u30d6@scheme-stx 'quote) u3982@x)) u3980@x*))) u397e@ls/false) ((lambda (u3984@t) ((lambda (u3986@ls/false) (if u3986@ls/false (apply (lambda (u3988@x*) (u3979@k u3988@x*)) u3986@ls/false) ((lambda (u398a@t) ((lambda (u398c@ls/false) (if u398c@ls/false (apply (lambda (u398e@x u398f@y) (u3976@f u398f@y (lambda (u3992@ls) (u3979@k (cons u398e@x u3992@ls))))) u398c@ls/false) ((lambda (u3994@t) ((lambda (u3996@ls/false) (if u3996@ls/false (apply (lambda () (list (u30d6@scheme-stx 'list->vector) u396a@pat-x)) u3996@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3994@t))) (u3148@syntax-dispatch u3994@t '_))) u398a@t))) (u3148@syntax-dispatch u398a@t '(#(scheme-id cons) any any)))) u3984@t))) (u3148@syntax-dispatch u3984@t '(#(scheme-id list) . each-any)))) u397c@t))) (u3148@syntax-dispatch u397c@t '(#(scheme-id quote) each-any)))) u3978@x)))) u3976@f) u3968@x (lambda (u3998@ls) (cons* (u30d6@scheme-stx 'vector) u3998@ls)))) u3974@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3972@t))) (u3148@syntax-dispatch u3972@t '_))) u396c@t))) (u3148@syntax-dispatch u396c@t '(#(scheme-id quote) each-any)))) u396a@pat-x)) u3968@x))) (set! u3905@vquasi (lambda (u3946@p u3947@lev) ((lambda (u394a@t) ((lambda (u394c@ls/false) (if u394c@ls/false (apply (lambda (u394e@p u394f@q) ((lambda (u3952@t) ((lambda (u3954@ls/false) (if u3954@ls/false (apply (lambda (u3956@p) (if (= u3947@lev '0) (u38fd@quasicons* u3956@p (u3905@vquasi u394f@q u3947@lev)) (u38ff@quasicons (u38ff@quasicons (u38e1@datum 'unquote) (u3907@quasi u3956@p (- u3947@lev '1))) (u3905@vquasi u394f@q u3947@lev)))) u3954@ls/false) ((lambda (u3958@t) ((lambda (u395a@ls/false) (if u395a@ls/false (apply (lambda (u395c@p) (if (= u3947@lev '0) (u3901@quasiappend u395c@p (u3905@vquasi u394f@q u3947@lev)) (u38ff@quasicons (u38ff@quasicons (u38e1@datum 'unquote-splicing) (u3907@quasi u395c@p (- u3947@lev '1))) (u3905@vquasi u394f@q u3947@lev)))) u395a@ls/false) ((lambda (u395e@t) ((lambda (u3960@ls/false) (if u3960@ls/false (apply (lambda (u3962@p) (u38ff@quasicons (u3907@quasi u3962@p u3947@lev) (u3905@vquasi u394f@q u3947@lev))) u3960@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u395e@t))) (u3148@syntax-dispatch u395e@t 'any))) u3958@t))) (u3148@syntax-dispatch u3958@t '(#(scheme-id unquote-splicing) . each-any)))) u3952@t))) (u3148@syntax-dispatch u3952@t '(#(scheme-id unquote) . each-any)))) u394e@p)) u394c@ls/false) ((lambda (u3964@t) ((lambda (u3966@ls/false) (if u3966@ls/false (apply (lambda () (list (u30d6@scheme-stx 'quote) '())) u3966@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3964@t))) (u3148@syntax-dispatch u3964@t '()))) u394a@t))) (u3148@syntax-dispatch u394a@t '(any . any)))) u3946@p))) (set! u3907@quasi (lambda (u3910@p u3911@lev) ((lambda (u3914@t) ((lambda (u3916@ls/false) (if u3916@ls/false (apply (lambda (u3918@p) (if (= u3911@lev '0) u3918@p (u38ff@quasicons (u38e1@datum 'unquote) (u3907@quasi (list u3918@p) (- u3911@lev '1))))) u3916@ls/false) ((lambda (u391a@t) ((lambda (u391c@ls/false) (if u391c@ls/false (apply (lambda (u391e@p u391f@q) (if (= u3911@lev '0) (u38fd@quasicons* u391e@p (u3907@quasi u391f@q u3911@lev)) (u38ff@quasicons (u38ff@quasicons (u38e1@datum 'unquote) (u3907@quasi u391e@p (- u3911@lev '1))) (u3907@quasi u391f@q u3911@lev)))) u391c@ls/false) ((lambda (u3922@t) ((lambda (u3924@ls/false) (if u3924@ls/false (apply (lambda (u3926@p u3927@q) (if (= u3911@lev '0) (u3901@quasiappend u3926@p (u3907@quasi u3927@q u3911@lev)) (u38ff@quasicons (u38ff@quasicons (u38e1@datum 'unquote-splicing) (u3907@quasi u3926@p (- u3911@lev '1))) (u3907@quasi u3927@q u3911@lev)))) u3924@ls/false) ((lambda (u392a@t) ((lambda (u392c@ls/false) (if u392c@ls/false (apply (lambda (u392e@p) (u38ff@quasicons (u38e1@datum 'quasiquote) (u3907@quasi (list u392e@p) (+ u3911@lev '1)))) u392c@ls/false) ((lambda (u3930@t) ((lambda (u3932@ls/false) (if u3932@ls/false (apply (lambda (u3934@p u3935@q) (u38ff@quasicons (u3907@quasi u3934@p u3911@lev) (u3907@quasi u3935@q u3911@lev))) u3932@ls/false) ((lambda (u3938@t) ((lambda (u393a@ls/false) (if (and u393a@ls/false (apply (lambda (u393c@x) (not (u2f09@stx? u393c@x))) u393a@ls/false)) (apply (lambda (u393e@x) (u3903@quasivector (u3905@vquasi u393e@x u3911@lev))) u393a@ls/false) ((lambda (u3940@t) ((lambda (u3942@ls/false) (if u3942@ls/false (apply (lambda (u3944@p) (list (u30d6@scheme-stx 'quote) u3944@p)) u3942@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3940@t))) (u3148@syntax-dispatch u3940@t 'any))) u3938@t))) (u3148@syntax-dispatch u3938@t '#(vector each-any)))) u3930@t))) (u3148@syntax-dispatch u3930@t '(any . any)))) u392a@t))) (u3148@syntax-dispatch u392a@t '(#(scheme-id quasiquote) any)))) u3922@t))) (u3148@syntax-dispatch u3922@t '((#(scheme-id unquote-splicing) . each-any) . any)))) u391a@t))) (u3148@syntax-dispatch u391a@t '((#(scheme-id unquote) . each-any) . any)))) u3914@t))) (u3148@syntax-dispatch u3914@t '(#(scheme-id unquote) any)))) u3910@p))) (lambda (u3908@x) ((lambda (u390a@t) ((lambda (u390c@ls/false) (if u390c@ls/false (apply (lambda (u390e@e) (u3907@quasi u390e@e '0)) u390c@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u390a@t))) (u3148@syntax-dispatch u390a@t '(_ any)))) u3908@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! u3138@quasisyntax-macro ((lambda () ((lambda (u39e5@quasi) (begin (set! u39e5@quasi (lambda (u3a00@p u3a01@lev) ((lambda (u3a04@t) ((lambda (u3a06@ls/false) (if u3a06@ls/false (apply (lambda (u3a08@p) (if (= u3a01@lev '0) ((lambda (u3a0a@g) (values (list u3a0a@g) (list u3a08@p) u3a0a@g)) (gensym)) (call-with-values (lambda () (u39e5@quasi u3a08@p (- u3a01@lev '1))) (lambda (u3a12@u3a0d u3a13@u3a0f u3a14@u3a11) ((lambda (u3a18@p u3a19@rhs* u3a1a@lhs*) (values u3a1a@lhs* u3a19@rhs* (list 'unsyntax u3a18@p))) u3a14@u3a11 u3a13@u3a0f u3a12@u3a0d))))) u3a06@ls/false) ((lambda (u3a1e@t) ((lambda (u3a20@ls/false) (if (and u3a20@ls/false (apply (lambda () (= u3a01@lev '0)) u3a20@ls/false)) (apply (lambda () (u3239@syntax-violation '#f '"incorrect use of unsyntax" u3a00@p)) u3a20@ls/false) ((lambda (u3a22@t) ((lambda (u3a24@ls/false) (if u3a24@ls/false (apply (lambda (u3a26@p* u3a27@q) (call-with-values (lambda () (u39e5@quasi u3a27@q u3a01@lev)) (lambda (u3a30@u3a2b u3a31@u3a2d u3a32@u3a2f) ((lambda (u3a36@q u3a37@rhs* u3a38@lhs*) (if (= u3a01@lev '0) ((lambda (u3a3c@g*) (values (append u3a3c@g* u3a38@lhs*) (append u3a26@p* u3a37@rhs*) (append u3a3c@g* u3a36@q))) (map (lambda (u3a3e@x) (gensym)) u3a26@p*)) (call-with-values (lambda () (u39e5@quasi u3a26@p* (- u3a01@lev '1))) (lambda (u3a46@u3a41 u3a47@u3a43 u3a48@u3a45) ((lambda (u3a4c@p* u3a4d@rhs2* u3a4e@lhs2*) (values (append u3a4e@lhs2* u3a38@lhs*) (append u3a4d@rhs2* u3a37@rhs*) (cons (cons 'unsyntax u3a4c@p*) u3a36@q))) u3a48@u3a45 u3a47@u3a43 u3a46@u3a41))))) u3a32@u3a2f u3a31@u3a2d u3a30@u3a2b)))) u3a24@ls/false) ((lambda (u3a52@t) ((lambda (u3a54@ls/false) (if u3a54@ls/false (apply (lambda (u3a56@p* u3a57@q) (call-with-values (lambda () (u39e5@quasi u3a57@q u3a01@lev)) (lambda (u3a60@u3a5b u3a61@u3a5d u3a62@u3a5f) ((lambda (u3a66@q u3a67@rhs* u3a68@lhs*) (if (= u3a01@lev '0) ((lambda (u3a6c@g*) (values (append (map (lambda (u3a6e@g) (cons u3a6e@g '(...))) u3a6c@g*) u3a68@lhs*) (append u3a56@p* u3a67@rhs*) (append (apply append (map (lambda (u3a70@g) (cons u3a70@g '(...))) u3a6c@g*)) u3a66@q))) (map (lambda (u3a72@x) (gensym)) u3a56@p*)) (call-with-values (lambda () (u39e5@quasi u3a56@p* (- u3a01@lev '1))) (lambda (u3a7a@u3a75 u3a7b@u3a77 u3a7c@u3a79) ((lambda (u3a80@p* u3a81@rhs2* u3a82@lhs2*) (values (append u3a82@lhs2* u3a68@lhs*) (append u3a81@rhs2* u3a67@rhs*) (cons (cons 'unsyntax-splicing u3a80@p*) u3a66@q))) u3a7c@u3a79 u3a7b@u3a77 u3a7a@u3a75))))) u3a62@u3a5f u3a61@u3a5d u3a60@u3a5b)))) u3a54@ls/false) ((lambda (u3a86@t) ((lambda (u3a88@ls/false) (if (and u3a88@ls/false (apply (lambda () (= u3a01@lev '0)) u3a88@ls/false)) (apply (lambda () (u3239@syntax-violation '#f '"incorrect use of unsyntax-splicing" u3a00@p)) u3a88@ls/false) ((lambda (u3a8a@t) ((lambda (u3a8c@ls/false) (if u3a8c@ls/false (apply (lambda (u3a8e@p) (call-with-values (lambda () (u39e5@quasi u3a8e@p (+ u3a01@lev '1))) (lambda (u3a96@u3a91 u3a97@u3a93 u3a98@u3a95) ((lambda (u3a9c@p u3a9d@rhs* u3a9e@lhs*) (values u3a9e@lhs* u3a9d@rhs* (list 'quasisyntax u3a9c@p))) u3a98@u3a95 u3a97@u3a93 u3a96@u3a91)))) u3a8c@ls/false) ((lambda (u3aa2@t) ((lambda (u3aa4@ls/false) (if u3aa4@ls/false (apply (lambda (u3aa6@p u3aa7@q) (call-with-values (lambda () (u39e5@quasi u3aa6@p u3a01@lev)) (lambda (u3ab6@u3aab u3ab7@u3aad u3ab8@u3aaf) (call-with-values (lambda () (u39e5@quasi u3aa7@q u3a01@lev)) (lambda (u3abc@u3ab1 u3abd@u3ab3 u3abe@u3ab5) ((lambda (u3ac2@q u3ac3@rhs2* u3ac4@lhs2* u3ac5@p u3ac6@rhs* u3ac7@lhs*) (values (append u3ac4@lhs2* u3ac7@lhs*) (append u3ac3@rhs2* u3ac6@rhs*) (cons u3ac5@p u3ac2@q))) u3abe@u3ab5 u3abd@u3ab3 u3abc@u3ab1 u3ab8@u3aaf u3ab7@u3aad u3ab6@u3aab)))))) u3aa4@ls/false) ((lambda (u3ace@t) ((lambda (u3ad0@ls/false) (if u3ad0@ls/false (apply (lambda (u3ad2@x*) (call-with-values (lambda () (u39e5@quasi u3ad2@x* u3a01@lev)) (lambda (u3ada@u3ad5 u3adb@u3ad7 u3adc@u3ad9) ((lambda (u3ae0@x* u3ae1@rhs* u3ae2@lhs*) (values u3ae2@lhs* u3ae1@rhs* (list->vector u3ae0@x*))) u3adc@u3ad9 u3adb@u3ad7 u3ada@u3ad5)))) u3ad0@ls/false) ((lambda (u3ae6@t) ((lambda (u3ae8@ls/false) (if u3ae8@ls/false (apply (lambda () (values '() '() u3a00@p)) u3ae8@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3ae6@t))) (u3148@syntax-dispatch u3ae6@t '_))) u3ace@t))) (u3148@syntax-dispatch u3ace@t '#(vector each-any)))) u3aa2@t))) (u3148@syntax-dispatch u3aa2@t '(any . any)))) u3a8a@t))) (u3148@syntax-dispatch u3a8a@t '(#(scheme-id quasisyntax) any)))) u3a86@t))) (u3148@syntax-dispatch u3a86@t '#(scheme-id unsyntax-splicing)))) u3a52@t))) (u3148@syntax-dispatch u3a52@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) u3a22@t))) (u3148@syntax-dispatch u3a22@t '((#(scheme-id unsyntax) . each-any) . any)))) u3a1e@t))) (u3148@syntax-dispatch u3a1e@t '#(scheme-id unsyntax)))) u3a04@t))) (u3148@syntax-dispatch u3a04@t '(#(scheme-id unsyntax) any)))) u3a00@p))) (lambda (u39e6@x) ((lambda (u39e8@t) ((lambda (u39ea@ls/false) (if u39ea@ls/false (apply (lambda (u39ec@e) (call-with-values (lambda () (u39e5@quasi u39ec@e '0)) (lambda (u39f4@u39ef u39f5@u39f1 u39f6@u39f3) ((lambda (u39fa@v u39fb@rhs* u39fc@lhs*) (u3102@bless (list 'syntax-case (cons 'list u39fb@rhs*) '() (list u39fc@lhs* (list 'syntax u39fa@v))))) u39f6@u39f3 u39f5@u39f1 u39f4@u39ef)))) u39ea@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u39e8@t))) (u3148@syntax-dispatch u39e8@t '(_ any)))) u39e6@x)))) '#f)))) (set! u313a@define-struct-macro (lambda (u3aea@stx) (u3239@syntax-violation '#f '"define-struct not supported" u3aea@stx))) (set! u313c@define-record-type-macro (lambda (u3aec@x) ((lambda (u3aef@id u3af1@get-record-name u3af3@get-record-constructor-name u3af5@get-record-predicate-name u3af7@get-clause u3af9@foo-rtd-code u3afb@parent-rtd-code u3afd@parent-rcd-code u3aff@foo-rcd-code u3b01@get-protocol-code u3b03@get-fields u3b05@get-mutator-indices u3b07@get-mutators u3b09@get-accessors u3b0b@enumerate u3b0d@do-define-record u3b0f@verify-clauses) (begin (set! u3aef@id (lambda (u3ce2@ctxt . u3ce4@str*) (u323d@datum->syntax u3ce2@ctxt (string->symbol (apply string-append (map (lambda (u3ce6@x) (if (symbol? u3ce6@x) (symbol->string u3ce6@x) (if (string? u3ce6@x) u3ce6@x ((lambda () (begin '#f (assertion-violation 'define-record-type '"BUG"))))))) u3ce4@str*)))))) (set! u3af1@get-record-name (lambda (u3cd0@spec) ((lambda (u3cd2@t) ((lambda (u3cd4@ls/false) (if u3cd4@ls/false (apply (lambda (u3cd6@foo u3cd7@make-foo u3cd8@foo?) u3cd6@foo) u3cd4@ls/false) ((lambda (u3cdc@t) ((lambda (u3cde@ls/false) (if u3cde@ls/false (apply (lambda (u3ce0@foo) u3ce0@foo) u3cde@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3cdc@t))) (u3148@syntax-dispatch u3cdc@t 'any))) u3cd2@t))) (u3148@syntax-dispatch u3cd2@t '(any any any)))) u3cd0@spec))) (set! u3af3@get-record-constructor-name (lambda (u3cbc@spec) ((lambda (u3cbe@t) ((lambda (u3cc0@ls/false) (if u3cc0@ls/false (apply (lambda (u3cc2@foo u3cc3@make-foo u3cc4@foo?) u3cc3@make-foo) u3cc0@ls/false) ((lambda (u3cc8@t) ((lambda (u3cca@ls/false) (if (and u3cca@ls/false (apply (lambda (u3ccc@foo) (u2f41@id? u3ccc@foo)) u3cca@ls/false)) (apply (lambda (u3cce@foo) (u3aef@id u3cce@foo '"make-" (u2f57@stx->datum u3cce@foo))) u3cca@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3cc8@t))) (u3148@syntax-dispatch u3cc8@t 'any))) u3cbe@t))) (u3148@syntax-dispatch u3cbe@t '(any any any)))) u3cbc@spec))) (set! u3af5@get-record-predicate-name (lambda (u3ca8@spec) ((lambda (u3caa@t) ((lambda (u3cac@ls/false) (if u3cac@ls/false (apply (lambda (u3cae@foo u3caf@make-foo u3cb0@foo?) u3cb0@foo?) u3cac@ls/false) ((lambda (u3cb4@t) ((lambda (u3cb6@ls/false) (if (and u3cb6@ls/false (apply (lambda (u3cb8@foo) (u2f41@id? u3cb8@foo)) u3cb6@ls/false)) (apply (lambda (u3cba@foo) (u3aef@id u3cba@foo (u2f57@stx->datum u3cba@foo) '"?")) u3cb6@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3cb4@t))) (u3148@syntax-dispatch u3cb4@t 'any))) u3caa@t))) (u3148@syntax-dispatch u3caa@t '(any any any)))) u3ca8@spec))) (set! u3af7@get-clause (lambda (u3c96@id u3c97@ls) ((lambda (u3c9a@t) ((lambda (u3c9c@ls/false) (if u3c9c@ls/false (apply (lambda () '#f) u3c9c@ls/false) ((lambda (u3c9e@t) ((lambda (u3ca0@ls/false) (if u3ca0@ls/false (apply (lambda (u3ca2@x u3ca3@rest u3ca4@ls) (if (u2f49@free-id=? (u3102@bless u3c96@id) u3ca2@x) (cons u3ca2@x u3ca3@rest) (u3af7@get-clause u3c96@id u3ca4@ls))) u3ca0@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3c9e@t))) (u3148@syntax-dispatch u3c9e@t '((any . any) . any)))) u3c9a@t))) (u3148@syntax-dispatch u3c9a@t '()))) u3c97@ls))) (set! u3af9@foo-rtd-code (lambda (u3c44@name u3c45@clause* u3c46@parent-rtd-code) ((lambda (u3c4b@convert-field-spec*) (begin (set! u3c4b@convert-field-spec* (lambda (u3c7c@ls) (list->vector (map (lambda (u3c7e@x) ((lambda (u3c80@t) ((lambda (u3c82@ls/false) (if u3c82@ls/false (apply (lambda (u3c84@name u3c85@rest) (list 'mutable u3c84@name)) u3c82@ls/false) ((lambda (u3c88@t) ((lambda (u3c8a@ls/false) (if u3c8a@ls/false (apply (lambda (u3c8c@name u3c8d@rest) (list 'immutable u3c8c@name)) u3c8a@ls/false) ((lambda (u3c90@t) ((lambda (u3c92@ls/false) (if u3c92@ls/false (apply (lambda (u3c94@name) (list 'immutable u3c94@name)) u3c92@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3c90@t))) (u3148@syntax-dispatch u3c90@t 'any))) u3c88@t))) (u3148@syntax-dispatch u3c88@t '(#(scheme-id immutable) any . any)))) u3c80@t))) (u3148@syntax-dispatch u3c80@t '(#(scheme-id mutable) any . any)))) u3c7e@x)) u3c7c@ls)))) ((lambda (u3c4c@uid-code u3c4d@sealed? u3c4e@opaque? u3c4f@fields) (u3102@bless (list 'make-record-type-descriptor (list 'quote u3c44@name) u3c46@parent-rtd-code u3c4c@uid-code u3c4d@sealed? u3c4e@opaque? u3c4f@fields))) ((lambda (u3c54@t) ((lambda (u3c56@ls/false) (if u3c56@ls/false (apply (lambda () (list 'quote (gensym))) u3c56@ls/false) ((lambda (u3c58@t) ((lambda (u3c5a@ls/false) (if u3c5a@ls/false (apply (lambda (u3c5c@uid) (list 'quote u3c5c@uid)) u3c5a@ls/false) ((lambda (u3c5e@t) ((lambda (u3c60@ls/false) (if u3c60@ls/false (apply (lambda () '#f) u3c60@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3c5e@t))) (u3148@syntax-dispatch u3c5e@t '_))) u3c58@t))) (u3148@syntax-dispatch u3c58@t '(_ any)))) u3c54@t))) (u3148@syntax-dispatch u3c54@t '(_)))) (u3af7@get-clause 'nongenerative u3c45@clause*)) ((lambda (u3c62@t) ((lambda (u3c64@ls/false) (if u3c64@ls/false (apply (lambda () '#t) u3c64@ls/false) ((lambda (u3c66@t) ((lambda (u3c68@ls/false) (if u3c68@ls/false (apply (lambda () '#f) u3c68@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3c66@t))) (u3148@syntax-dispatch u3c66@t '_))) u3c62@t))) (u3148@syntax-dispatch u3c62@t '(_ #(atom #t))))) (u3af7@get-clause 'sealed u3c45@clause*)) ((lambda (u3c6a@t) ((lambda (u3c6c@ls/false) (if u3c6c@ls/false (apply (lambda () '#t) u3c6c@ls/false) ((lambda (u3c6e@t) ((lambda (u3c70@ls/false) (if u3c70@ls/false (apply (lambda () '#f) u3c70@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3c6e@t))) (u3148@syntax-dispatch u3c6e@t '_))) u3c6a@t))) (u3148@syntax-dispatch u3c6a@t '(_ #(atom #t))))) (u3af7@get-clause 'opaque u3c45@clause*)) ((lambda (u3c72@t) ((lambda (u3c74@ls/false) (if u3c74@ls/false (apply (lambda (u3c76@field-spec*) (list 'quote (u3c4b@convert-field-spec* u3c76@field-spec*))) u3c74@ls/false) ((lambda (u3c78@t) ((lambda (u3c7a@ls/false) (if u3c7a@ls/false (apply (lambda () ''#()) u3c7a@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3c78@t))) (u3148@syntax-dispatch u3c78@t '_))) u3c72@t))) (u3148@syntax-dispatch u3c72@t '(_ . each-any)))) (u3af7@get-clause 'fields u3c45@clause*))))) '#f))) (set! u3afb@parent-rtd-code (lambda (u3c2c@clause*) ((lambda (u3c2e@t) ((lambda (u3c30@ls/false) (if u3c30@ls/false (apply (lambda (u3c32@name) (list 'record-type-descriptor u3c32@name)) u3c30@ls/false) ((lambda (u3c34@t) ((lambda (u3c36@ls/false) (if u3c36@ls/false (apply (lambda () ((lambda (u3c38@t) ((lambda (u3c3a@ls/false) (if u3c3a@ls/false (apply (lambda (u3c3c@rtd u3c3d@rcd) u3c3c@rtd) u3c3a@ls/false) ((lambda (u3c40@t) ((lambda (u3c42@ls/false) (if u3c42@ls/false (apply (lambda () '#f) u3c42@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3c40@t))) (u3148@syntax-dispatch u3c40@t '#(atom #f)))) u3c38@t))) (u3148@syntax-dispatch u3c38@t '(_ any any)))) (u3af7@get-clause 'parent-rtd u3c2c@clause*))) u3c36@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3c34@t))) (u3148@syntax-dispatch u3c34@t '#(atom #f)))) u3c2e@t))) (u3148@syntax-dispatch u3c2e@t '(_ any)))) (u3af7@get-clause 'parent u3c2c@clause*)))) (set! u3afd@parent-rcd-code (lambda (u3c14@clause*) ((lambda (u3c16@t) ((lambda (u3c18@ls/false) (if u3c18@ls/false (apply (lambda (u3c1a@name) (list 'record-constructor-descriptor u3c1a@name)) u3c18@ls/false) ((lambda (u3c1c@t) ((lambda (u3c1e@ls/false) (if u3c1e@ls/false (apply (lambda () ((lambda (u3c20@t) ((lambda (u3c22@ls/false) (if u3c22@ls/false (apply (lambda (u3c24@rtd u3c25@rcd) u3c25@rcd) u3c22@ls/false) ((lambda (u3c28@t) ((lambda (u3c2a@ls/false) (if u3c2a@ls/false (apply (lambda () '#f) u3c2a@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3c28@t))) (u3148@syntax-dispatch u3c28@t '#(atom #f)))) u3c20@t))) (u3148@syntax-dispatch u3c20@t '(_ any any)))) (u3af7@get-clause 'parent-rtd u3c14@clause*))) u3c1e@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3c1c@t))) (u3148@syntax-dispatch u3c1c@t '#(atom #f)))) u3c16@t))) (u3148@syntax-dispatch u3c16@t '(_ any)))) (u3af7@get-clause 'parent u3c14@clause*)))) (set! u3aff@foo-rcd-code (lambda (u3c0c@clause* u3c0d@foo-rtd u3c0e@protocol u3c0f@parent-rcd-code) (list 'make-record-constructor-descriptor u3c0d@foo-rtd u3c0f@parent-rcd-code u3c0e@protocol))) (set! u3b01@get-protocol-code (lambda (u3c00@clause*) ((lambda (u3c02@t) ((lambda (u3c04@ls/false) (if u3c04@ls/false (apply (lambda (u3c06@expr) u3c06@expr) u3c04@ls/false) ((lambda (u3c08@t) ((lambda (u3c0a@ls/false) (if u3c0a@ls/false (apply (lambda () '#f) u3c0a@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3c08@t))) (u3148@syntax-dispatch u3c08@t '_))) u3c02@t))) (u3148@syntax-dispatch u3c02@t '(_ any)))) (u3af7@get-clause 'protocol u3c00@clause*)))) (set! u3b03@get-fields (lambda (u3bee@clause*) ((lambda (u3bf0@t) ((lambda (u3bf2@ls/false) (if u3bf2@ls/false (apply (lambda () '()) u3bf2@ls/false) ((lambda (u3bf4@t) ((lambda (u3bf6@ls/false) (if u3bf6@ls/false (apply (lambda (u3bf8@f*) u3bf8@f*) u3bf6@ls/false) ((lambda (u3bfa@t) ((lambda (u3bfc@ls/false) (if u3bfc@ls/false (apply (lambda (u3bfe@rest) (u3b03@get-fields u3bfe@rest)) u3bfc@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3bfa@t))) (u3148@syntax-dispatch u3bfa@t '(_ . any)))) u3bf4@t))) (u3148@syntax-dispatch u3bf4@t '((#(scheme-id fields) . each-any) . _)))) u3bf0@t))) (u3148@syntax-dispatch u3bf0@t '()))) u3bee@clause*))) (set! u3b05@get-mutator-indices (lambda (u3bd6@fields) ((letrec ((u3bd8@f (lambda (u3bda@fields u3bdb@i) ((lambda (u3bde@t) ((lambda (u3be0@ls/false) (if u3be0@ls/false (apply (lambda () '()) u3be0@ls/false) ((lambda (u3be2@t) ((lambda (u3be4@ls/false) (if u3be4@ls/false (apply (lambda (u3be6@rest) (cons u3bdb@i (u3bd8@f u3be6@rest (+ u3bdb@i '1)))) u3be4@ls/false) ((lambda (u3be8@t) ((lambda (u3bea@ls/false) (if u3bea@ls/false (apply (lambda (u3bec@rest) (u3bd8@f u3bec@rest (+ u3bdb@i '1))) u3bea@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3be8@t))) (u3148@syntax-dispatch u3be8@t '(_ . any)))) u3be2@t))) (u3148@syntax-dispatch u3be2@t '((#(scheme-id mutable) . _) . any)))) u3bde@t))) (u3148@syntax-dispatch u3bde@t '()))) u3bda@fields)))) u3bd8@f) u3bd6@fields '0))) (set! u3b07@get-mutators (lambda (u3bac@foo u3bad@fields) ((lambda (u3bb1@gen-name) (begin (set! u3bb1@gen-name (lambda (u3bd4@x) (u323d@datum->syntax u3bac@foo (string->symbol (string-append (symbol->string (u323f@syntax->datum u3bac@foo)) '"-" (symbol->string (u323f@syntax->datum u3bd4@x)) '"-set!"))))) ((letrec ((u3bb2@f (lambda (u3bb4@fields) ((lambda (u3bb6@t) ((lambda (u3bb8@ls/false) (if u3bb8@ls/false (apply (lambda () '()) u3bb8@ls/false) ((lambda (u3bba@t) ((lambda (u3bbc@ls/false) (if u3bbc@ls/false (apply (lambda (u3bbe@name u3bbf@accessor u3bc0@mutator u3bc1@rest) (cons u3bc0@mutator (u3bb2@f u3bc1@rest))) u3bbc@ls/false) ((lambda (u3bc6@t) ((lambda (u3bc8@ls/false) (if u3bc8@ls/false (apply (lambda (u3bca@name u3bcb@rest) (cons (u3bb1@gen-name u3bca@name) (u3bb2@f u3bcb@rest))) u3bc8@ls/false) ((lambda (u3bce@t) ((lambda (u3bd0@ls/false) (if u3bd0@ls/false (apply (lambda (u3bd2@rest) (u3bb2@f u3bd2@rest)) u3bd0@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3bce@t))) (u3148@syntax-dispatch u3bce@t '(_ . any)))) u3bc6@t))) (u3148@syntax-dispatch u3bc6@t '((#(scheme-id mutable) any) . any)))) u3bba@t))) (u3148@syntax-dispatch u3bba@t '((#(scheme-id mutable) any any any) . any)))) u3bb6@t))) (u3148@syntax-dispatch u3bb6@t '()))) u3bb4@fields)))) u3bb2@f) u3bad@fields))) '#f))) (set! u3b09@get-accessors (lambda (u3b68@foo u3b69@fields) ((lambda (u3b6d@gen-name) (begin (set! u3b6d@gen-name (lambda (u3baa@x) (u323d@datum->syntax u3b68@foo (string->symbol (string-append (symbol->string (u323f@syntax->datum u3b68@foo)) '"-" (symbol->string (u323f@syntax->datum u3baa@x))))))) (map (lambda (u3b6e@field) ((lambda (u3b70@t) ((lambda (u3b72@ls/false) (if (and u3b72@ls/false (apply (lambda (u3b74@name u3b75@accessor u3b76@mutator) (u2f41@id? u3b75@accessor)) u3b72@ls/false)) (apply (lambda (u3b7a@name u3b7b@accessor u3b7c@mutator) u3b7b@accessor) u3b72@ls/false) ((lambda (u3b80@t) ((lambda (u3b82@ls/false) (if (and u3b82@ls/false (apply (lambda (u3b84@name u3b85@accessor) (u2f41@id? u3b85@accessor)) u3b82@ls/false)) (apply (lambda (u3b88@name u3b89@accessor) u3b89@accessor) u3b82@ls/false) ((lambda (u3b8c@t) ((lambda (u3b8e@ls/false) (if (and u3b8e@ls/false (apply (lambda (u3b90@name) (u2f41@id? u3b90@name)) u3b8e@ls/false)) (apply (lambda (u3b92@name) (u3b6d@gen-name u3b92@name)) u3b8e@ls/false) ((lambda (u3b94@t) ((lambda (u3b96@ls/false) (if (and u3b96@ls/false (apply (lambda (u3b98@name) (u2f41@id? u3b98@name)) u3b96@ls/false)) (apply (lambda (u3b9a@name) (u3b6d@gen-name u3b9a@name)) u3b96@ls/false) ((lambda (u3b9c@t) ((lambda (u3b9e@ls/false) (if (and u3b9e@ls/false (apply (lambda (u3ba0@name) (u2f41@id? u3ba0@name)) u3b9e@ls/false)) (apply (lambda (u3ba2@name) (u3b6d@gen-name u3ba2@name)) u3b9e@ls/false) ((lambda (u3ba4@t) ((lambda (u3ba6@ls/false) (if u3ba6@ls/false (apply (lambda (u3ba8@others) (u3239@syntax-violation '#f '"invalid field spec" u3b6e@field)) u3ba6@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3ba4@t))) (u3148@syntax-dispatch u3ba4@t 'any))) u3b9c@t))) (u3148@syntax-dispatch u3b9c@t 'any))) u3b94@t))) (u3148@syntax-dispatch u3b94@t '(#(scheme-id immutable) any)))) u3b8c@t))) (u3148@syntax-dispatch u3b8c@t '(#(scheme-id mutable) any)))) u3b80@t))) (u3148@syntax-dispatch u3b80@t '(#(scheme-id immutable) any any)))) u3b70@t))) (u3148@syntax-dispatch u3b70@t '(#(scheme-id mutable) any any any)))) u3b6e@field)) u3b69@fields))) '#f))) (set! u3b0b@enumerate (lambda (u3b60@ls) ((letrec ((u3b62@f (lambda (u3b64@ls u3b65@i) (if (null? u3b64@ls) '() ((lambda () (begin '#f (cons u3b65@i (u3b62@f (cdr u3b64@ls) (+ u3b65@i '1)))))))))) u3b62@f) u3b60@ls '0))) (set! u3b0d@do-define-record (lambda (u3b38@namespec u3b39@clause*) ((lambda (u3b3c@foo) ((lambda (u3b3e@foo-rtd) ((lambda (u3b40@foo-rcd) ((lambda (u3b42@protocol) ((lambda (u3b44@make-foo) ((lambda (u3b46@fields) ((lambda (u3b48@idx*) ((lambda (u3b4a@foo-x*) ((lambda (u3b4c@set-foo-x!*) ((lambda (u3b4e@set-foo-idx*) ((lambda (u3b50@foo?) ((lambda (u3b52@foo-rtd-code) ((lambda (u3b54@foo-rcd-code) ((lambda (u3b56@protocol-code) ((lambda () (u3102@bless (cons 'begin (cons (list 'define u3b3e@foo-rtd u3b52@foo-rtd-code) (cons (list 'define u3b42@protocol u3b56@protocol-code) (cons (list 'define u3b40@foo-rcd u3b54@foo-rcd-code) (cons (list 'define-syntax u3b3c@foo (list 'list ''$rtd (list 'syntax u3b3e@foo-rtd) (list 'syntax u3b40@foo-rcd))) (cons (list 'define u3b50@foo? (list 'record-predicate u3b3e@foo-rtd)) (cons (list 'define u3b44@make-foo (list 'record-constructor u3b40@foo-rcd)) (append (map (lambda (u3b58@foo-x u3b59@idx) (list 'define u3b58@foo-x (list 'record-accessor u3b3e@foo-rtd u3b59@idx))) u3b4a@foo-x* u3b48@idx*) (map (lambda (u3b5c@set-foo-x! u3b5d@idx) (list 'define u3b5c@set-foo-x! (list 'record-mutator u3b3e@foo-rtd u3b5d@idx))) u3b4c@set-foo-x!* u3b4e@set-foo-idx*))))))))))))) (u3b01@get-protocol-code u3b39@clause*))) (u3aff@foo-rcd-code u3b39@clause* u3b3e@foo-rtd u3b42@protocol (u3afd@parent-rcd-code u3b39@clause*)))) (u3af9@foo-rtd-code u3b3c@foo u3b39@clause* (u3afb@parent-rtd-code u3b39@clause*)))) (u3af5@get-record-predicate-name u3b38@namespec))) (u3b05@get-mutator-indices u3b46@fields))) (u3b07@get-mutators u3b3c@foo u3b46@fields))) (u3b09@get-accessors u3b3c@foo u3b46@fields))) (u3b0b@enumerate u3b46@fields))) (u3b03@get-fields u3b39@clause*))) (u3af3@get-record-constructor-name u3b38@namespec))) (gensym))) (gensym))) (gensym))) (u3af1@get-record-name u3b38@namespec)))) (set! u3b0f@verify-clauses (lambda (u3b18@x u3b19@cls*) ((lambda (u3b1d@valid-kwds u3b1f@free-id-member?) (begin (set! u3b1d@valid-kwds (map u3102@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! u3b1f@free-id-member? (lambda (u3b34@x u3b35@ls) (and (pair? u3b35@ls) (or (u2f49@free-id=? u3b34@x (car u3b35@ls)) (u3b1f@free-id-member? u3b34@x (cdr u3b35@ls)))))) ((letrec ((u3b20@f (lambda (u3b22@cls* u3b23@seen*) (if (not (null? u3b22@cls*)) ((lambda (u3b26@t) ((lambda (u3b28@ls/false) (if u3b28@ls/false (apply (lambda (u3b2a@kwd u3b2b@rest) (if (or (not (u2f41@id? u3b2a@kwd)) (not (u3b1f@free-id-member? u3b2a@kwd u3b1d@valid-kwds))) (u3239@syntax-violation '#f '"not a valid define-record-type keyword" u3b2a@kwd) (if (u2f4f@bound-id-member? u3b2a@kwd u3b23@seen*) (u3239@syntax-violation '#f '"duplicate use of keyword " u3b18@x u3b2a@kwd) ((lambda () (begin '#f (u3b20@f (cdr u3b22@cls*) (cons u3b2a@kwd u3b23@seen*)))))))) u3b28@ls/false) ((lambda (u3b2e@t) ((lambda (u3b30@ls/false) (if u3b30@ls/false (apply (lambda (u3b32@cls) (u3239@syntax-violation '#f '"malformed define-record-type clause" u3b32@cls)) u3b30@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3b2e@t))) (u3148@syntax-dispatch u3b2e@t 'any))) u3b26@t))) (u3148@syntax-dispatch u3b26@t '(any . any)))) (car u3b22@cls*)) (void))))) u3b20@f) u3b19@cls* '()))) '#f '#f))) ((lambda (u3b10@t) ((lambda (u3b12@ls/false) (if u3b12@ls/false (apply (lambda (u3b14@namespec u3b15@clause*) (begin (u3b0f@verify-clauses u3aec@x u3b15@clause*) (u3b0d@do-define-record u3b14@namespec u3b15@clause*))) u3b12@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3b10@t))) (u3148@syntax-dispatch u3b10@t '(_ any . each-any)))) u3aec@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! u313e@define-condition-type-macro (lambda (u3ce8@x) ((lambda (u3ceb@mkname) (begin (set! u3ceb@mkname (lambda (u3d18@name u3d19@suffix) (u323d@datum->syntax u3d18@name (string->symbol (string-append (symbol->string (u323f@syntax->datum u3d18@name)) u3d19@suffix))))) ((lambda (u3cec@t) ((lambda (u3cee@ls/false) (if (and u3cee@ls/false (apply (lambda (u3cf0@ctxt u3cf1@name u3cf2@super u3cf3@constructor u3cf4@predicate u3cf5@field* u3cf6@accessor*) (and (u2f41@id? u3cf1@name) (u2f41@id? u3cf2@super) (u2f41@id? u3cf3@constructor) (u2f41@id? u3cf4@predicate) (for-all u2f41@id? u3cf5@field*) (for-all u2f41@id? u3cf6@accessor*))) u3cee@ls/false)) (apply (lambda (u3cfe@ctxt u3cff@name u3d00@super u3d01@constructor u3d02@predicate u3d03@field* u3d04@accessor*) ((lambda (u3d0c@aux-accessor*) (u3102@bless (cons 'begin (cons (cons 'define-record-type (cons (list u3cff@name u3d01@constructor (gensym)) (cons (list 'parent u3d00@super) (cons (cons 'fields (map (lambda (u3d0e@field u3d0f@aux) (list 'immutable u3d0e@field u3d0f@aux)) u3d03@field* u3d0c@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define u3d02@predicate (list 'condition-predicate (list 'record-type-descriptor u3cff@name))) (map (lambda (u3d12@accessor u3d13@aux) (list 'define u3d12@accessor (list 'condition-accessor (list 'record-type-descriptor u3cff@name) u3d13@aux))) u3d04@accessor* u3d0c@aux-accessor*)))))) (map (lambda (u3d16@x) (gensym)) u3d04@accessor*))) u3cee@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3cec@t))) (u3148@syntax-dispatch u3cec@t '(any any any any any . #(each (any any)))))) u3ce8@x))) '#f))) (set! u3140@incorrect-usage-macro (lambda (u3d1c@e) (u3239@syntax-violation '#f '"incorrect usage of auxiliary keyword" u3d1c@e))) (set! u3142@parameterize-macro (lambda (u3d1e@e) ((lambda (u3d20@t) ((lambda (u3d22@ls/false) (if u3d22@ls/false (apply (lambda (u3d24@b u3d25@b*) (u3102@bless (cons 'let (cons '() (cons u3d24@b u3d25@b*))))) u3d22@ls/false) ((lambda (u3d28@t) ((lambda (u3d2a@ls/false) (if u3d2a@ls/false (apply (lambda (u3d2c@olhs* u3d2d@orhs* u3d2e@b u3d2f@b*) ((lambda (u3d34@lhs* u3d35@rhs*) (u3102@bless (cons (list 'lambda (append u3d34@lhs* u3d35@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (u3d38@lhs u3d39@rhs) (list 'let (list (list 't (list u3d38@lhs))) (list u3d38@lhs u3d39@rhs) (cons 'set! (cons u3d39@rhs '(t))))) u3d34@lhs* u3d35@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons u3d2e@b u3d2f@b*))) '(swap)))))) (append u3d2c@olhs* u3d2d@orhs*)))) (u3223@generate-temporaries u3d2c@olhs*) (u3223@generate-temporaries u3d2d@orhs*))) u3d2a@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3d28@t))) (u3148@syntax-dispatch u3d28@t '(_ #(each (any any)) any . each-any)))) u3d20@t))) (u3148@syntax-dispatch u3d20@t '(_ () any . each-any)))) u3d1e@e))) (set! u3144@foreign-call-transformer (lambda (u3d3c@e u3d3d@r u3d3e@mr) ((lambda (u3d42@t) ((lambda (u3d44@ls/false) (if u3d44@ls/false (apply (lambda (u3d46@name u3d47@arg*) (cons 'foreign-call (cons (u316c@chi-expr u3d46@name u3d3d@r u3d3e@mr) (u3168@chi-expr* u3d47@arg* u3d3d@r u3d3e@mr)))) u3d44@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3d42@t))) (u3148@syntax-dispatch u3d42@t '(_ any . each-any)))) u3d3c@e))) (set! u3146@convert-pattern (lambda (u3d4a@pattern u3d4b@keys) ((lambda (u3d4f@cvt* u3d51@cvt) (begin (set! u3d4f@cvt* (lambda (u3dee@p* u3def@n u3df0@ids) (if (null? u3dee@p*) (values '() u3df0@ids) (call-with-values (lambda () (u3d4f@cvt* (cdr u3dee@p*) u3def@n u3df0@ids)) (lambda (u3df8@u3df5 u3df9@u3df7) ((lambda (u3dfc@ids u3dfd@y) (call-with-values (lambda () (u3d51@cvt (car u3dee@p*) u3def@n u3dfc@ids)) (lambda (u3e04@u3e01 u3e05@u3e03) ((lambda (u3e08@ids u3e09@x) (values (cons u3e09@x u3dfd@y) u3e08@ids)) u3e05@u3e03 u3e04@u3e01)))) u3df9@u3df7 u3df8@u3df5)))))) (set! u3d51@cvt (lambda (u3d52@p u3d53@n u3d54@ids) ((lambda (u3d58@t) ((lambda (u3d5a@ls/false) (if (and u3d5a@ls/false (apply (lambda (u3d5c@id) (u2f41@id? u3d5c@id)) u3d5a@ls/false)) (apply (lambda (u3d5e@id) (if (u2f4f@bound-id-member? u3d52@p u3d4b@keys) (values (vector 'free-id u3d52@p) u3d54@ids) (if (u2f49@free-id=? u3d52@p (u30d6@scheme-stx '_)) (values '_ u3d54@ids) ((lambda () (begin '#f (values 'any (cons (cons u3d52@p u3d53@n) u3d54@ids)))))))) u3d5a@ls/false) ((lambda (u3d60@t) ((lambda (u3d62@ls/false) (if (and u3d62@ls/false (apply (lambda (u3d64@p u3d65@dots) (u314a@ellipsis? u3d65@dots)) u3d62@ls/false)) (apply (lambda (u3d68@p u3d69@dots) (call-with-values (lambda () (u3d51@cvt u3d68@p (+ u3d53@n '1) u3d54@ids)) (lambda (u3d70@u3d6d u3d71@u3d6f) ((lambda (u3d74@ids u3d75@p) (values (if (eq? u3d75@p 'any) 'each-any (vector 'each u3d75@p)) u3d74@ids)) u3d71@u3d6f u3d70@u3d6d)))) u3d62@ls/false) ((lambda (u3d78@t) ((lambda (u3d7a@ls/false) (if (and u3d7a@ls/false (apply (lambda (u3d7c@x u3d7d@dots u3d7e@ys u3d7f@z) (u314a@ellipsis? u3d7d@dots)) u3d7a@ls/false)) (apply (lambda (u3d84@x u3d85@dots u3d86@ys u3d87@z) (call-with-values (lambda () (u3d51@cvt u3d87@z u3d53@n u3d54@ids)) (lambda (u3d90@u3d8d u3d91@u3d8f) ((lambda (u3d94@ids u3d95@z) (call-with-values (lambda () (u3d4f@cvt* u3d86@ys u3d53@n u3d94@ids)) (lambda (u3d9c@u3d99 u3d9d@u3d9b) ((lambda (u3da0@ids u3da1@ys) (call-with-values (lambda () (u3d51@cvt u3d84@x (+ u3d53@n '1) u3da0@ids)) (lambda (u3da8@u3da5 u3da9@u3da7) ((lambda (u3dac@ids u3dad@x) (values (vector 'each+ u3dad@x (reverse u3da1@ys) u3d95@z) u3dac@ids)) u3da9@u3da7 u3da8@u3da5)))) u3d9d@u3d9b u3d9c@u3d99)))) u3d91@u3d8f u3d90@u3d8d)))) u3d7a@ls/false) ((lambda (u3db0@t) ((lambda (u3db2@ls/false) (if u3db2@ls/false (apply (lambda (u3db4@x u3db5@y) (call-with-values (lambda () (u3d51@cvt u3db5@y u3d53@n u3d54@ids)) (lambda (u3dbc@u3db9 u3dbd@u3dbb) ((lambda (u3dc0@ids u3dc1@y) (call-with-values (lambda () (u3d51@cvt u3db4@x u3d53@n u3dc0@ids)) (lambda (u3dc8@u3dc5 u3dc9@u3dc7) ((lambda (u3dcc@ids u3dcd@x) (values (cons u3dcd@x u3dc1@y) u3dcc@ids)) u3dc9@u3dc7 u3dc8@u3dc5)))) u3dbd@u3dbb u3dbc@u3db9)))) u3db2@ls/false) ((lambda (u3dd0@t) ((lambda (u3dd2@ls/false) (if u3dd2@ls/false (apply (lambda () (values '() u3d54@ids)) u3dd2@ls/false) ((lambda (u3dd4@t) ((lambda (u3dd6@ls/false) (if (and u3dd6@ls/false (apply (lambda (u3dd8@p) (not (u2f09@stx? u3dd8@p))) u3dd6@ls/false)) (apply (lambda (u3dda@p) (call-with-values (lambda () (u3d51@cvt u3dda@p u3d53@n u3d54@ids)) (lambda (u3de0@u3ddd u3de1@u3ddf) ((lambda (u3de4@ids u3de5@p) (values (vector 'vector u3de5@p) u3de4@ids)) u3de1@u3ddf u3de0@u3ddd)))) u3dd6@ls/false) ((lambda (u3de8@t) ((lambda (u3dea@ls/false) (if u3dea@ls/false (apply (lambda (u3dec@datum) (values (vector 'atom (u2f57@stx->datum u3dec@datum)) u3d54@ids)) u3dea@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3de8@t))) (u3148@syntax-dispatch u3de8@t 'any))) u3dd4@t))) (u3148@syntax-dispatch u3dd4@t '#(vector each-any)))) u3dd0@t))) (u3148@syntax-dispatch u3dd0@t '()))) u3db0@t))) (u3148@syntax-dispatch u3db0@t '(any . any)))) u3d78@t))) (u3148@syntax-dispatch u3d78@t '(any any . #(each+ any () any))))) u3d60@t))) (u3148@syntax-dispatch u3d60@t '(any any)))) u3d58@t))) (u3148@syntax-dispatch u3d58@t 'any))) u3d52@p))) (u3d51@cvt u3d4a@pattern '0 '()))) '#f '#f))) (set! u3148@syntax-dispatch (lambda (u3e0c@e u3e0d@p) ((lambda (u3e11@stx^ u3e13@match-each u3e15@match-each+ u3e17@match-each-any u3e19@match-empty u3e1b@combine u3e1d@match* u3e1f@match) (begin (set! u3e11@stx^ (lambda (u3ee8@e u3ee9@m* u3eea@s* u3eeb@ae*) (if (and (null? u3ee9@m*) (null? u3eea@s*) (null? u3eeb@ae*)) u3ee8@e (u2f29@mkstx u3ee8@e u3ee9@m* u3eea@s* u3eeb@ae*)))) (set! u3e13@match-each (lambda (u3ec8@e u3ec9@p u3eca@m* u3ecb@s* u3ecc@ae*) (if (pair? u3ec8@e) ((lambda (u3ed2@first) (and u3ed2@first ((lambda (u3ed4@rest) (and u3ed4@rest (cons u3ed2@first u3ed4@rest))) (u3e13@match-each (cdr u3ec8@e) u3ec9@p u3eca@m* u3ecb@s* u3ecc@ae*)))) (u3e1f@match (car u3ec8@e) u3ec9@p u3eca@m* u3ecb@s* u3ecc@ae* '())) (if (null? u3ec8@e) '() (if (u2f09@stx? u3ec8@e) (and (not (u2ec3@top-marked? u3eca@m*)) (call-with-values (lambda () (u2f27@join-wraps u3eca@m* u3ecb@s* u3ecc@ae* u3ec8@e)) (lambda (u3edc@u3ed7 u3edd@u3ed9 u3ede@u3edb) ((lambda (u3ee2@ae* u3ee3@s* u3ee4@m*) (u3e13@match-each (u2f0d@stx-expr u3ec8@e) u3ec9@p u3ee4@m* u3ee3@s* u3ee2@ae*)) u3ede@u3edb u3edd@u3ed9 u3edc@u3ed7)))) (if (u2ac7@u298b@annotation? u3ec8@e) (u3e13@match-each (u2ac9@u298f@annotation-expression u3ec8@e) u3ec9@p u3eca@m* u3ecb@s* u3ecc@ae*) ((lambda () (begin '#f '#f))))))))) (set! u3e15@match-each+ (lambda (u3e88@e u3e89@x-pat u3e8a@y-pat u3e8b@z-pat u3e8c@m* u3e8d@s* u3e8e@ae* u3e8f@r) ((letrec ((u3e98@f (lambda (u3e9a@e u3e9b@m* u3e9c@s* u3e9d@ae*) (if (pair? u3e9a@e) (call-with-values (lambda () (u3e98@f (cdr u3e9a@e) u3e9b@m* u3e9c@s* u3e9d@ae*)) (lambda (u3ea8@u3ea3 u3ea9@u3ea5 u3eaa@u3ea7) ((lambda (u3eae@r u3eaf@y-pat u3eb0@xr*) (if u3eae@r (if (null? u3eaf@y-pat) ((lambda (u3eb4@xr) (if u3eb4@xr (values (cons u3eb4@xr u3eb0@xr*) u3eaf@y-pat u3eae@r) (values '#f '#f '#f))) (u3e1f@match (car u3e9a@e) u3e89@x-pat u3e9b@m* u3e9c@s* u3e9d@ae* '())) (values '() (cdr u3eaf@y-pat) (u3e1f@match (car u3e9a@e) (car u3eaf@y-pat) u3e9b@m* u3e9c@s* u3e9d@ae* u3eae@r))) (values '#f '#f '#f))) u3eaa@u3ea7 u3ea9@u3ea5 u3ea8@u3ea3))) (if (u2f09@stx? u3e9a@e) (if (u2ec3@top-marked? u3e9b@m*) (values '() u3e8a@y-pat (u3e1f@match u3e9a@e u3e8b@z-pat u3e9b@m* u3e9c@s* u3e9d@ae* u3e8f@r)) (call-with-values (lambda () (u2f27@join-wraps u3e9b@m* u3e9c@s* u3e9d@ae* u3e9a@e)) (lambda (u3ebc@u3eb7 u3ebd@u3eb9 u3ebe@u3ebb) ((lambda (u3ec2@ae* u3ec3@s* u3ec4@m*) (u3e98@f (u2f0d@stx-expr u3e9a@e) u3ec4@m* u3ec3@s* u3ec2@ae*)) u3ebe@u3ebb u3ebd@u3eb9 u3ebc@u3eb7)))) (if (u2ac7@u298b@annotation? u3e9a@e) (u3e98@f (u2ac9@u298f@annotation-expression u3e9a@e) u3e9b@m* u3e9c@s* u3e9d@ae*) ((lambda () (begin '#f (values '() u3e8a@y-pat (u3e1f@match u3e9a@e u3e8b@z-pat u3e9b@m* u3e9c@s* u3e9d@ae* u3e8f@r))))))))))) u3e98@f) u3e88@e u3e8c@m* u3e8d@s* u3e8e@ae*))) (set! u3e17@match-each-any (lambda (u3e6c@e u3e6d@m* u3e6e@s* u3e6f@ae*) (if (pair? u3e6c@e) ((lambda (u3e74@l) (and u3e74@l (cons (u3e11@stx^ (car u3e6c@e) u3e6d@m* u3e6e@s* u3e6f@ae*) u3e74@l))) (u3e17@match-each-any (cdr u3e6c@e) u3e6d@m* u3e6e@s* u3e6f@ae*)) (if (null? u3e6c@e) '() (if (u2f09@stx? u3e6c@e) (and (not (u2ec3@top-marked? u3e6d@m*)) (call-with-values (lambda () (u2f27@join-wraps u3e6d@m* u3e6e@s* u3e6f@ae* u3e6c@e)) (lambda (u3e7c@u3e77 u3e7d@u3e79 u3e7e@u3e7b) ((lambda (u3e82@ae* u3e83@s* u3e84@m*) (u3e17@match-each-any (u2f0d@stx-expr u3e6c@e) u3e84@m* u3e83@s* u3e82@ae*)) u3e7e@u3e7b u3e7d@u3e79 u3e7c@u3e77)))) (if (u2ac7@u298b@annotation? u3e6c@e) (u3e17@match-each-any (u2ac9@u298f@annotation-expression u3e6c@e) u3e6d@m* u3e6e@s* u3e6f@ae*) ((lambda () (begin '#f '#f))))))))) (set! u3e19@match-empty (lambda (u3e66@p u3e67@r) (if (null? u3e66@p) u3e67@r (if (eq? u3e66@p '_) u3e67@r (if (eq? u3e66@p 'any) (cons '() u3e67@r) (if (pair? u3e66@p) (u3e19@match-empty (car u3e66@p) (u3e19@match-empty (cdr u3e66@p) u3e67@r)) (if (eq? u3e66@p 'each-any) (cons '() u3e67@r) ((lambda () (begin '#f ((lambda (u3e6a@t) (if (memv u3e6a@t '(each)) (u3e19@match-empty (vector-ref u3e66@p '1) u3e67@r) (if (memv u3e6a@t '(each+)) (u3e19@match-empty (vector-ref u3e66@p '1) (u3e19@match-empty (reverse (vector-ref u3e66@p '2)) (u3e19@match-empty (vector-ref u3e66@p '3) u3e67@r))) (if (memv u3e6a@t '(free-id atom)) u3e67@r (if (memv u3e6a@t '(scheme-id atom)) u3e67@r (if (memv u3e6a@t '(vector)) (u3e19@match-empty (vector-ref u3e66@p '1) u3e67@r) ((lambda () (begin '#f (assertion-violation 'syntax-dispatch '"invalid pattern" u3e66@p)))))))))) (vector-ref u3e66@p '0)))))))))))) (set! u3e1b@combine (lambda (u3e62@r* u3e63@r) (if (null? (car u3e62@r*)) u3e63@r (cons (map car u3e62@r*) (u3e1b@combine (map cdr u3e62@r*) u3e63@r))))) (set! u3e1d@match* (lambda (u3e3e@e u3e3f@p u3e40@m* u3e41@s* u3e42@ae* u3e43@r) (if (null? u3e3f@p) (and (null? u3e3e@e) u3e43@r) (if (pair? u3e3f@p) (and (pair? u3e3e@e) (u3e1f@match (car u3e3e@e) (car u3e3f@p) u3e40@m* u3e41@s* u3e42@ae* (u3e1f@match (cdr u3e3e@e) (cdr u3e3f@p) u3e40@m* u3e41@s* u3e42@ae* u3e43@r))) (if (eq? u3e3f@p 'each-any) ((lambda (u3e4a@l) (and u3e4a@l (cons u3e4a@l u3e43@r))) (u3e17@match-each-any u3e3e@e u3e40@m* u3e41@s* u3e42@ae*)) ((lambda () (begin '#f ((lambda (u3e4c@t) (if (memv u3e4c@t '(each)) (if (null? u3e3e@e) (u3e19@match-empty (vector-ref u3e3f@p '1) u3e43@r) ((lambda (u3e4e@r*) (and u3e4e@r* (u3e1b@combine u3e4e@r* u3e43@r))) (u3e13@match-each u3e3e@e (vector-ref u3e3f@p '1) u3e40@m* u3e41@s* u3e42@ae*))) (if (memv u3e4c@t '(free-id)) (and (symbol? u3e3e@e) (u2ec3@top-marked? u3e40@m*) (u2f49@free-id=? (u3e11@stx^ u3e3e@e u3e40@m* u3e41@s* u3e42@ae*) (vector-ref u3e3f@p '1)) u3e43@r) (if (memv u3e4c@t '(scheme-id)) (and (symbol? u3e3e@e) (u2ec3@top-marked? u3e40@m*) (u2f49@free-id=? (u3e11@stx^ u3e3e@e u3e40@m* u3e41@s* u3e42@ae*) (u30d6@scheme-stx (vector-ref u3e3f@p '1))) u3e43@r) (if (memv u3e4c@t '(each+)) (call-with-values (lambda () (u3e15@match-each+ u3e3e@e (vector-ref u3e3f@p '1) (vector-ref u3e3f@p '2) (vector-ref u3e3f@p '3) u3e40@m* u3e41@s* u3e42@ae* u3e43@r)) (lambda (u3e56@u3e51 u3e57@u3e53 u3e58@u3e55) ((lambda (u3e5c@r u3e5d@y-pat u3e5e@xr*) (and u3e5c@r (null? u3e5d@y-pat) (if (null? u3e5e@xr*) (u3e19@match-empty (vector-ref u3e3f@p '1) u3e5c@r) (u3e1b@combine u3e5e@xr* u3e5c@r)))) u3e58@u3e55 u3e57@u3e53 u3e56@u3e51))) (if (memv u3e4c@t '(atom)) (and (fast-equal? (vector-ref u3e3f@p '1) (u2f55@strip u3e3e@e u3e40@m*)) u3e43@r) (if (memv u3e4c@t '(vector)) (and (vector? u3e3e@e) (u3e1f@match (vector->list u3e3e@e) (vector-ref u3e3f@p '1) u3e40@m* u3e41@s* u3e42@ae* u3e43@r)) ((lambda () (begin '#f (assertion-violation 'syntax-dispatch '"invalid pattern" u3e3f@p))))))))))) (vector-ref u3e3f@p '0)))))))))) (set! u3e1f@match (lambda (u3e20@e u3e21@p u3e22@m* u3e23@s* u3e24@ae* u3e25@r) (if (not u3e25@r) '#f (if (eq? u3e21@p '_) u3e25@r (if (eq? u3e21@p 'any) (cons (u3e11@stx^ u3e20@e u3e22@m* u3e23@s* u3e24@ae*) u3e25@r) (if (u2f09@stx? u3e20@e) (and (not (u2ec3@top-marked? u3e22@m*)) (call-with-values (lambda () (u2f27@join-wraps u3e22@m* u3e23@s* u3e24@ae* u3e20@e)) (lambda (u3e32@u3e2d u3e33@u3e2f u3e34@u3e31) ((lambda (u3e38@ae* u3e39@s* u3e3a@m*) (u3e1f@match (u2f0d@stx-expr u3e20@e) u3e21@p u3e3a@m* u3e39@s* u3e38@ae* u3e25@r)) u3e34@u3e31 u3e33@u3e2f u3e32@u3e2d)))) (if (u2ac7@u298b@annotation? u3e20@e) (u3e1f@match (u2ac9@u298f@annotation-expression u3e20@e) u3e21@p u3e22@m* u3e23@s* u3e24@ae* u3e25@r) ((lambda () (begin '#f (u3e1d@match* u3e20@e u3e21@p u3e22@m* u3e23@s* u3e24@ae* u3e25@r))))))))))) (u3e1f@match u3e0c@e u3e0d@p '() '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! u314a@ellipsis? (lambda (u3ef0@x) (and (u2f41@id? u3ef0@x) (u2f49@free-id=? u3ef0@x (u30d6@scheme-stx '...))))) (set! u314c@underscore? (lambda (u3ef2@x) (and (u2f41@id? u3ef2@x) (u2f49@free-id=? u3ef2@x (u30d6@scheme-stx '_))))) (set! u314e@verify-literals (lambda (u3ef4@lits u3ef5@expr) (for-each (lambda (u3ef8@x) (if (or (not (u2f41@id? u3ef8@x)) (u314a@ellipsis? u3ef8@x) (u314c@underscore? u3ef8@x)) (u3239@syntax-violation '#f '"invalid literal" u3ef5@expr u3ef8@x) (void))) u3ef4@lits))) (set! u3150@syntax-case-transformer ((lambda () ((lambda (u3efb@build-dispatch-call u3efd@invalid-ids-error u3eff@gen-clause u3f01@gen-syntax-case) (begin (set! u3efb@build-dispatch-call (lambda (u3f6c@pvars u3f6d@expr u3f6e@y u3f6f@r u3f70@mr) ((lambda (u3f76@ids u3f77@levels) ((lambda (u3f7a@labels u3f7b@new-vars) ((lambda (u3f7e@body) (u2ea4@u2d80@build-application '#f '(primitive apply) (list (u2ea5@u2dce@build-lambda '#f u3f7b@new-vars u3f7e@body) u3f6e@y))) (u316c@chi-expr (u2f2d@add-subst (u2efc@make-full-rib u3f76@ids u3f7a@labels) u3f6d@expr) (append (map (lambda (u3f80@label u3f81@var u3f82@level) (cons u3f80@label (u2f5f@make-binding 'syntax (cons u3f81@var u3f82@level)))) u3f7a@labels u3f7b@new-vars (map cdr u3f6c@pvars)) u3f6f@r) u3f70@mr))) (map u2ec9@gen-label u3f76@ids) (map u2ec5@gen-lexical u3f76@ids))) (map car u3f6c@pvars) (map cdr u3f6c@pvars)))) (set! u3efd@invalid-ids-error (lambda (u3f60@id* u3f61@e u3f62@class) ((letrec ((u3f66@find (lambda (u3f68@id* u3f69@ok*) (if (null? u3f68@id*) (u3239@syntax-violation '#f '"invalid syntax" u3f61@e) (if (u2f41@id? (car u3f68@id*)) (if (u2f4f@bound-id-member? (car u3f68@id*) u3f69@ok*) (u3233@syntax-error (car u3f68@id*) '"duplicate " u3f62@class) (u3f66@find (cdr u3f68@id*) (cons (car u3f68@id*) u3f69@ok*))) (u3233@syntax-error (car u3f68@id*) '"invalid " u3f62@class)))))) u3f66@find) u3f60@id* '()))) (set! u3eff@gen-clause (lambda (u3f38@x u3f39@keys u3f3a@clauses u3f3b@r u3f3c@mr u3f3d@pat u3f3e@fender u3f3f@expr) (call-with-values (lambda () (u3146@convert-pattern u3f3d@pat u3f39@keys)) (lambda (u3f4c@u3f49 u3f4d@u3f4b) ((lambda (u3f50@pvars u3f51@p) (if (not (u2f4d@distinct-bound-ids? (map car u3f50@pvars))) (u3efd@invalid-ids-error (map car u3f50@pvars) u3f3d@pat '"pattern variable") (if (not (for-all (lambda (u3f54@x) (not (u314a@ellipsis? (car u3f54@x)))) u3f50@pvars)) (u3239@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" u3f3d@pat) ((lambda () (begin '#f ((lambda (u3f56@y) ((lambda (u3f58@test) ((lambda (u3f5a@conseq) ((lambda (u3f5c@altern) (u2ea4@u2d80@build-application '#f (u2ea5@u2dce@build-lambda '#f (list u3f56@y) (list 'if u3f58@test u3f5a@conseq u3f5c@altern)) (list (u2ea4@u2d80@build-application '#f '(primitive syntax-dispatch) (list u3f38@x (list 'quote u3f51@p)))))) (u3f01@gen-syntax-case u3f38@x u3f39@keys u3f3a@clauses u3f3b@r u3f3c@mr))) (u3efb@build-dispatch-call u3f50@pvars u3f3f@expr u3f56@y u3f3b@r u3f3c@mr))) (if (eq? u3f3e@fender '#t) u3f56@y ((lambda () (begin '#f ((lambda (u3f5e@call) (list 'if u3f56@y u3f5e@call (list 'quote '#f))) (u3efb@build-dispatch-call u3f50@pvars u3f3e@fender u3f56@y u3f3b@r u3f3c@mr)))))))) (u2ec5@gen-lexical 'tmp)))))))) u3f4d@u3f4b u3f4c@u3f49))))) (set! u3f01@gen-syntax-case (lambda (u3f16@x u3f17@keys u3f18@clauses u3f19@r u3f1a@mr) (if (null? u3f18@clauses) (u2ea4@u2d80@build-application '#f '(primitive syntax-error) (list u3f16@x)) ((lambda (u3f20@t) ((lambda (u3f22@ls/false) (if u3f22@ls/false (apply (lambda (u3f24@pat u3f25@expr) (if (and (u2f41@id? u3f24@pat) (not (u2f4f@bound-id-member? u3f24@pat u3f17@keys)) (not (u314a@ellipsis? u3f24@pat))) (if (u2f49@free-id=? u3f24@pat (u30d6@scheme-stx '_)) (u316c@chi-expr u3f25@expr u3f19@r u3f1a@mr) ((lambda (u3f28@lab u3f29@lex) ((lambda (u3f2c@body) (u2ea4@u2d80@build-application '#f (u2ea5@u2dce@build-lambda '#f (list u3f29@lex) u3f2c@body) (list u3f16@x))) (u316c@chi-expr (u2f2d@add-subst (u2efc@make-full-rib (list u3f24@pat) (list u3f28@lab)) u3f25@expr) (cons (cons u3f28@lab (u2f5f@make-binding 'syntax (cons u3f29@lex '0))) u3f19@r) u3f1a@mr))) (u2ec9@gen-label u3f24@pat) (u2ec5@gen-lexical u3f24@pat))) (u3eff@gen-clause u3f16@x u3f17@keys (cdr u3f18@clauses) u3f19@r u3f1a@mr u3f24@pat '#t u3f25@expr))) u3f22@ls/false) ((lambda (u3f2e@t) ((lambda (u3f30@ls/false) (if u3f30@ls/false (apply (lambda (u3f32@pat u3f33@fender u3f34@expr) (u3eff@gen-clause u3f16@x u3f17@keys (cdr u3f18@clauses) u3f19@r u3f1a@mr u3f32@pat u3f33@fender u3f34@expr)) u3f30@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3f2e@t))) (u3148@syntax-dispatch u3f2e@t '(any any any)))) u3f20@t))) (u3148@syntax-dispatch u3f20@t '(any any)))) (car u3f18@clauses))))) (lambda (u3f02@e u3f03@r u3f04@mr) ((lambda (u3f08@t) ((lambda (u3f0a@ls/false) (if u3f0a@ls/false (apply (lambda (u3f0c@expr u3f0d@keys u3f0e@clauses) (begin (u314e@verify-literals u3f0d@keys u3f02@e) ((lambda (u3f12@x) ((lambda (u3f14@body) (u2ea4@u2d80@build-application '#f (u2ea5@u2dce@build-lambda '#f (list u3f12@x) u3f14@body) (list (u316c@chi-expr u3f0c@expr u3f03@r u3f04@mr)))) (u3f01@gen-syntax-case u3f12@x u3f0d@keys u3f0e@clauses u3f03@r u3f04@mr))) (u2ec5@gen-lexical 'tmp)))) u3f0a@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3f08@t))) (u3148@syntax-dispatch u3f08@t '(_ any each-any . each-any)))) u3f02@e)))) '#f '#f '#f '#f)))) (set! u3152@ellipsis-map (lambda (u3f86@proc u3f87@ls . u3f8a@ls*) ((lambda (u3f8d@who) (begin (set! u3f8d@who '...) (begin (if (not (list? u3f87@ls)) (assertion-violation u3f8d@who '"not a list" u3f87@ls) (void)) (if (not (null? u3f8a@ls*)) ((lambda (u3f8e@n) (for-each (lambda (u3f90@x) (begin (if (not (list? u3f90@x)) (assertion-violation u3f8d@who '"not a list" u3f90@x) (void)) (if (not (= (length u3f90@x) u3f8e@n)) (assertion-violation u3f8d@who '"length mismatch" u3f87@ls u3f90@x) (void)))) u3f8a@ls*)) (length u3f87@ls)) (void)) (apply map u3f86@proc u3f87@ls u3f8a@ls*)))) '#f))) (set! u3154@syntax-transformer ((lambda () ((lambda (u3f93@gen-syntax u3f95@gen-ref u3f97@gen-append u3f99@gen-mappend u3f9b@gen-map u3f9d@gen-cons u3f9f@gen-vector u3fa1@regen) (begin (set! u3f93@gen-syntax (lambda (u400a@src u400b@e u400c@r u400d@maps u400e@ellipsis? u400f@vec?) ((lambda (u4016@t) ((lambda (u4018@ls/false) (if (and u4018@ls/false (apply (lambda (u401a@dots) (u400e@ellipsis? u401a@dots)) u4018@ls/false)) (apply (lambda (u401c@dots) (u3239@syntax-violation '#f '"misplaced ellipsis in syntax form" u400a@src)) u4018@ls/false) ((lambda (u401e@t) ((lambda (u4020@ls/false) (if (and u4020@ls/false (apply (lambda (u4022@id) (u2f41@id? u4022@id)) u4020@ls/false)) (apply (lambda (u4024@id) ((lambda (u4026@label) ((lambda (u4028@b) ((lambda () (if (eq? (u2f61@binding-type u4028@b) 'syntax) (call-with-values (lambda () ((lambda (u402e@var.lev) (u3f95@gen-ref u400a@src (car u402e@var.lev) (cdr u402e@var.lev) u400d@maps)) (u2f63@binding-value u4028@b))) (lambda (u4030@u402b u4031@u402d) ((lambda (u4034@maps u4035@var) (values (list 'ref u4035@var) u4034@maps)) u4031@u402d u4030@u402b))) (values (list 'quote u400b@e) u400d@maps))))) (u2f5d@label->binding u4026@label u400c@r))) (u2f5b@id->label u400b@e))) u4020@ls/false) ((lambda (u4038@t) ((lambda (u403a@ls/false) (if (and u403a@ls/false (apply (lambda (u403c@dots u403d@e) (u400e@ellipsis? u403c@dots)) u403a@ls/false)) (apply (lambda (u4040@dots u4041@e) (if u400f@vec? (u3239@syntax-violation '#f '"misplaced ellipsis in syntax form" u400a@src) (u3f93@gen-syntax u400a@src u4041@e u400c@r u400d@maps (lambda (u4044@x) '#f) '#f))) u403a@ls/false) ((lambda (u4046@t) ((lambda (u4048@ls/false) (if (and u4048@ls/false (apply (lambda (u404a@x u404b@dots u404c@y) (u400e@ellipsis? u404b@dots)) u4048@ls/false)) (apply (lambda (u4050@x u4051@dots u4052@y) ((letrec ((u4056@f (lambda (u4058@y u4059@k) ((lambda (u405c@t) ((lambda (u405e@ls/false) (if u405e@ls/false (apply (lambda () (u4059@k u400d@maps)) u405e@ls/false) ((lambda (u4060@t) ((lambda (u4062@ls/false) (if (and u4062@ls/false (apply (lambda (u4064@dots u4065@y) (u400e@ellipsis? u4064@dots)) u4062@ls/false)) (apply (lambda (u4068@dots u4069@y) (u4056@f u4069@y (lambda (u406c@maps) (call-with-values (lambda () (u4059@k (cons '() u406c@maps))) (lambda (u4072@u406f u4073@u4071) ((lambda (u4076@maps u4077@x) (if (null? (car u4076@maps)) (u3239@syntax-violation '#f '"extra ellipsis in syntax form" u400a@src) (values (u3f99@gen-mappend u4077@x (car u4076@maps)) (cdr u4076@maps)))) u4073@u4071 u4072@u406f)))))) u4062@ls/false) ((lambda (u407a@t) ((lambda (u407c@ls/false) (if u407c@ls/false (apply (lambda () (call-with-values (lambda () (u3f93@gen-syntax u400a@src u4058@y u400c@r u400d@maps u400e@ellipsis? u400f@vec?)) (lambda (u4082@u407f u4083@u4081) ((lambda (u4086@maps u4087@y) (call-with-values (lambda () (u4059@k u4086@maps)) (lambda (u408e@u408b u408f@u408d) ((lambda (u4092@maps u4093@x) (values (u3f97@gen-append u4093@x u4087@y) u4092@maps)) u408f@u408d u408e@u408b)))) u4083@u4081 u4082@u407f)))) u407c@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u407a@t))) (u3148@syntax-dispatch u407a@t '_))) u4060@t))) (u3148@syntax-dispatch u4060@t '(any . any)))) u405c@t))) (u3148@syntax-dispatch u405c@t '()))) u4058@y)))) u4056@f) u4052@y (lambda (u4096@maps) (call-with-values (lambda () (u3f93@gen-syntax u400a@src u4050@x u400c@r (cons '() u4096@maps) u400e@ellipsis? '#f)) (lambda (u409c@u4099 u409d@u409b) ((lambda (u40a0@maps u40a1@x) (if (null? (car u40a0@maps)) (u3239@syntax-violation '#f '"extra ellipsis in syntax form" u400a@src) (values (u3f9b@gen-map u40a1@x (car u40a0@maps)) (cdr u40a0@maps)))) u409d@u409b u409c@u4099)))))) u4048@ls/false) ((lambda (u40a4@t) ((lambda (u40a6@ls/false) (if u40a6@ls/false (apply (lambda (u40a8@x u40a9@y) (call-with-values (lambda () (u3f93@gen-syntax u400a@src u40a8@x u400c@r u400d@maps u400e@ellipsis? '#f)) (lambda (u40b0@u40ad u40b1@u40af) ((lambda (u40b4@maps u40b5@xnew) (call-with-values (lambda () (u3f93@gen-syntax u400a@src u40a9@y u400c@r u40b4@maps u400e@ellipsis? u400f@vec?)) (lambda (u40bc@u40b9 u40bd@u40bb) ((lambda (u40c0@maps u40c1@ynew) (values (u3f9d@gen-cons u400b@e u40a8@x u40a9@y u40b5@xnew u40c1@ynew) u40c0@maps)) u40bd@u40bb u40bc@u40b9)))) u40b1@u40af u40b0@u40ad)))) u40a6@ls/false) ((lambda (u40c4@t) ((lambda (u40c6@ls/false) (if u40c6@ls/false (apply (lambda (u40c8@ls) (call-with-values (lambda () (u3f93@gen-syntax u400a@src u40c8@ls u400c@r u400d@maps u400e@ellipsis? '#t)) (lambda (u40ce@u40cb u40cf@u40cd) ((lambda (u40d2@maps u40d3@lsnew) (values (u3f9f@gen-vector u400b@e u40c8@ls u40d3@lsnew) u40d2@maps)) u40cf@u40cd u40ce@u40cb)))) u40c6@ls/false) ((lambda (u40d6@t) ((lambda (u40d8@ls/false) (if u40d8@ls/false (apply (lambda () (values (list 'quote u400b@e) u400d@maps)) u40d8@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u40d6@t))) (u3148@syntax-dispatch u40d6@t '_))) u40c4@t))) (u3148@syntax-dispatch u40c4@t '#(vector each-any)))) u40a4@t))) (u3148@syntax-dispatch u40a4@t '(any . any)))) u4046@t))) (u3148@syntax-dispatch u4046@t '(any any . any)))) u4038@t))) (u3148@syntax-dispatch u4038@t '(any any)))) u401e@t))) (u3148@syntax-dispatch u401e@t 'any))) u4016@t))) (u3148@syntax-dispatch u4016@t 'any))) u400b@e))) (set! u3f95@gen-ref (lambda (u3ff0@src u3ff1@var u3ff2@level u3ff3@maps) (if (= u3ff2@level '0) (values u3ff1@var u3ff3@maps) (if (null? u3ff3@maps) (u3239@syntax-violation '#f '"missing ellipsis in syntax form" u3ff0@src) (call-with-values (lambda () (u3f95@gen-ref u3ff0@src u3ff1@var (- u3ff2@level '1) (cdr u3ff3@maps))) (lambda (u3ffc@u3ff9 u3ffd@u3ffb) ((lambda (u4000@outer-maps u4001@outer-var) ((lambda (u4004@t) (if u4004@t ((lambda (u4006@b) (values (cdr u4006@b) u3ff3@maps)) u4004@t) ((lambda () (begin '#f ((lambda (u4008@inner-var) (values u4008@inner-var (cons (cons (cons u4001@outer-var u4008@inner-var) (car u3ff3@maps)) u4000@outer-maps))) (u2ec5@gen-lexical 'tmp))))))) (assq u4001@outer-var (car u3ff3@maps)))) u3ffd@u3ffb u3ffc@u3ff9))))))) (set! u3f97@gen-append (lambda (u3fec@x u3fed@y) (if (fast-equal? u3fed@y ''()) u3fec@x (list 'append u3fec@x u3fed@y)))) (set! u3f99@gen-mappend (lambda (u3fe8@e u3fe9@map-env) (list 'apply '(primitive append) (u3f9b@gen-map u3fe8@e u3fe9@map-env)))) (set! u3f9b@gen-map (lambda (u3fd6@e u3fd7@map-env) ((lambda (u3fda@formals u3fdb@actuals) (if (eq? (car u3fd6@e) 'ref) (car u3fdb@actuals) (if (for-all (lambda (u3fde@x) (and (eq? (car u3fde@x) 'ref) (memq (cadr u3fde@x) u3fda@formals))) (cdr u3fd6@e)) ((lambda (u3fe0@args) (cons 'map (cons (list 'primitive (car u3fd6@e)) u3fe0@args))) (map ((lambda (u3fe2@r) (lambda (u3fe4@x) (cdr (assq (cadr u3fe4@x) u3fe2@r)))) (map cons u3fda@formals u3fdb@actuals)) (cdr u3fd6@e))) ((lambda () (begin '#f (cons* 'map (list 'lambda u3fda@formals u3fd6@e) u3fdb@actuals))))))) (map cdr u3fd7@map-env) (map (lambda (u3fe6@x) (list 'ref (car u3fe6@x))) u3fd7@map-env)))) (set! u3f9d@gen-cons (lambda (u3fc6@e u3fc7@x u3fc8@y u3fc9@xnew u3fca@ynew) ((lambda (u3fd0@t) (if (memv u3fd0@t '(quote)) (if (eq? (car u3fc9@xnew) 'quote) ((lambda (u3fd2@xnew u3fd3@ynew) (if (and (eq? u3fd2@xnew u3fc7@x) (eq? u3fd3@ynew u3fc8@y)) (list 'quote u3fc6@e) (list 'quote (cons u3fd2@xnew u3fd3@ynew)))) (cadr u3fc9@xnew) (cadr u3fca@ynew)) (if (null? (cadr u3fca@ynew)) (list 'list u3fc9@xnew) (list 'cons u3fc9@xnew u3fca@ynew))) (if (memv u3fd0@t '(list)) (cons 'list (cons u3fc9@xnew (cdr u3fca@ynew))) ((lambda () (begin '#f (list 'cons u3fc9@xnew u3fca@ynew))))))) (car u3fca@ynew)))) (set! u3f9f@gen-vector (lambda (u3fc0@e u3fc1@ls u3fc2@lsnew) (if (eq? (car u3fc2@lsnew) 'quote) (if (eq? (cadr u3fc2@lsnew) u3fc1@ls) (list 'quote u3fc0@e) (list 'quote (list->vector (cadr u3fc2@lsnew)))) (if (eq? (car u3fc2@lsnew) 'list) (cons 'vector (cdr u3fc2@lsnew)) ((lambda () (begin '#f (list 'list->vector u3fc2@lsnew)))))))) (set! u3fa1@regen (lambda (u3fba@x) ((lambda (u3fbc@t) (if (memv u3fbc@t '(ref)) (cadr u3fba@x) (if (memv u3fbc@t '(primitive)) (list 'primitive (cadr u3fba@x)) (if (memv u3fbc@t '(quote)) (list 'quote (cadr u3fba@x)) (if (memv u3fbc@t '(lambda)) (u2ea5@u2dce@build-lambda '#f (cadr u3fba@x) (u3fa1@regen (caddr u3fba@x))) (if (memv u3fbc@t '(map)) ((lambda (u3fbe@ls) (u2ea4@u2d80@build-application '#f '(primitive ellipsis-map) u3fbe@ls)) (map u3fa1@regen (cdr u3fba@x))) ((lambda () (begin '#f (u2ea4@u2d80@build-application '#f (list 'primitive (car u3fba@x)) (map u3fa1@regen (cdr u3fba@x)))))))))))) (car u3fba@x)))) (lambda (u3fa2@e u3fa3@r u3fa4@mr) ((lambda (u3fa8@t) ((lambda (u3faa@ls/false) (if u3faa@ls/false (apply (lambda (u3fac@x) (call-with-values (lambda () (u3f93@gen-syntax u3fa2@e u3fac@x u3fa3@r '() u314a@ellipsis? '#f)) (lambda (u3fb2@u3faf u3fb3@u3fb1) ((lambda (u3fb6@maps u3fb7@e) (u3fa1@regen u3fb7@e)) u3fb3@u3fb1 u3fb2@u3faf)))) u3faa@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u3fa8@t))) (u3148@syntax-dispatch u3fa8@t '(_ any)))) u3fa2@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! u3156@core-macro-transformer (lambda (u40da@name) ((lambda (u40dc@t) (if (memv u40dc@t '(quote)) u30fc@quote-transformer (if (memv u40dc@t '(lambda)) u3100@lambda-transformer (if (memv u40dc@t '(case-lambda)) u30fe@case-lambda-transformer (if (memv u40dc@t '(letrec)) u30e4@letrec-transformer (if (memv u40dc@t '(letrec*)) u30e6@letrec*-transformer (if (memv u40dc@t '(if)) u30f4@if-transformer (if (memv u40dc@t '(and)) u30f6@and-transformer (if (memv u40dc@t '(or)) u30f8@or-transformer (if (memv u40dc@t '(foreign-call)) u3144@foreign-call-transformer (if (memv u40dc@t '(syntax-case)) u3150@syntax-case-transformer (if (memv u40dc@t '(syntax)) u3154@syntax-transformer (if (memv u40dc@t '(type-descriptor)) u30ea@type-descriptor-transformer (if (memv u40dc@t '(record-type-descriptor)) u30ec@record-type-descriptor-transformer (if (memv u40dc@t '(record-constructor-descriptor)) u30ee@record-constructor-descriptor-transformer (if (memv u40dc@t '(fluid-let-syntax)) u30e8@fluid-let-syntax-transformer ((lambda () (begin '#f (assertion-violation 'macro-transformer '"BUG: cannot find transformer" u40da@name)))))))))))))))))))) u40da@name))) (set! u3158@file-options-macro (lambda (u40de@x) ((lambda (u40e1@valid-option?) (begin (set! u40e1@valid-option? (lambda (u40ea@x) (and (u2f41@id? u40ea@x) (memq (u2f43@id->sym u40ea@x) '(no-fail no-create no-truncate))))) ((lambda (u40e2@t) ((lambda (u40e4@ls/false) (if (and u40e4@ls/false (apply (lambda (u40e6@opt*) (for-all u40e1@valid-option? u40e6@opt*)) u40e4@ls/false)) (apply (lambda (u40e8@opt*) (u3102@bless (list 'make-file-options (list 'quote u40e8@opt*)))) u40e4@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u40e2@t))) (u3148@syntax-dispatch u40e2@t '(_ . each-any)))) u40de@x))) '#f))) (set! u315a@symbol-macro (lambda (u40ec@x u40ed@set) ((lambda (u40f0@t) ((lambda (u40f2@ls/false) (if (and u40f2@ls/false (apply (lambda (u40f4@name) (and (u2f41@id? u40f4@name) (memq (u2f43@id->sym u40f4@name) u40ed@set))) u40f2@ls/false)) (apply (lambda (u40f6@name) (u3102@bless (list 'quote u40f6@name))) u40f2@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u40f0@t))) (u3148@syntax-dispatch u40f0@t '(_ any)))) u40ec@x))) (set! u315c@macro-transformer (lambda (u40f8@x) (if (procedure? u40f8@x) u40f8@x (if (symbol? u40f8@x) ((lambda (u40fa@t) (if (memv u40fa@t '(define-record-type)) u313c@define-record-type-macro (if (memv u40fa@t '(define-struct)) u313a@define-struct-macro (if (memv u40fa@t '(cond)) u3132@cond-macro (if (memv u40fa@t '(let)) u3108@let-macro (if (memv u40fa@t '(do)) u312a@do-macro (if (memv u40fa@t '(or)) u312e@or-macro (if (memv u40fa@t '(and)) u3130@and-macro (if (memv u40fa@t '(let*)) u312c@let*-macro (if (memv u40fa@t '(let-values)) u310c@let-values-macro (if (memv u40fa@t '(let*-values)) u310e@let*-values-macro (if (memv u40fa@t '(syntax-rules)) u3134@syntax-rules-macro (if (memv u40fa@t '(quasiquote)) u3136@quasiquote-macro (if (memv u40fa@t '(quasisyntax)) u3138@quasisyntax-macro (if (memv u40fa@t '(with-syntax)) u3104@with-syntax-macro (if (memv u40fa@t '(when)) u30f0@when-macro (if (memv u40fa@t '(unless)) u30f2@unless-macro (if (memv u40fa@t '(case)) u30fa@case-macro (if (memv u40fa@t '(identifier-syntax)) u3128@identifier-syntax-macro (if (memv u40fa@t '(time)) u3120@time-macro (if (memv u40fa@t '(delay)) u3122@delay-macro (if (memv u40fa@t '(assert)) u3124@assert-macro (if (memv u40fa@t '(endianness)) u3126@endianness-macro (if (memv u40fa@t '(guard)) u311c@guard-macro (if (memv u40fa@t '(define-enumeration)) u311e@define-enumeration-macro (if (memv u40fa@t '(trace-lambda)) u3110@trace-lambda-macro (if (memv u40fa@t '(trace-define)) u3112@trace-define-macro (if (memv u40fa@t '(trace-let)) u310a@trace-let-macro (if (memv u40fa@t '(trace-define-syntax)) u3114@trace-define-syntax-macro (if (memv u40fa@t '(trace-let-syntax)) u3118@trace-let-syntax-macro (if (memv u40fa@t '(trace-letrec-syntax)) u311a@trace-letrec-syntax-macro (if (memv u40fa@t '(define-condition-type)) u313e@define-condition-type-macro (if (memv u40fa@t '(parameterize)) u3142@parameterize-macro (if (memv u40fa@t '(eol-style)) (lambda (u40fc@x) (u315a@symbol-macro u40fc@x '(none lf cr crlf nel crnel ls))) (if (memv u40fa@t '(error-handling-mode)) (lambda (u40fe@x) (u315a@symbol-macro u40fe@x '(ignore raise replace))) (if (memv u40fa@t '(buffer-mode)) (lambda (u4100@x) (u315a@symbol-macro u4100@x '(none line block))) (if (memv u40fa@t '(file-options)) u3158@file-options-macro (if (memv u40fa@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) u3140@incorrect-usage-macro ((lambda () (begin '#f (error 'macro-transformer '"BUG: invalid macro" u40f8@x)))))))))))))))))))))))))))))))))))))))))) u40f8@x) ((lambda () (begin '#f (error 'core-macro-transformer '"BUG: invalid macro" u40f8@x)))))))) (set! u315e@local-macro-transformer (lambda (u4102@x) (car u4102@x))) (set! u3160@do-macro-call (lambda (u4104@transformer u4105@expr u4106@r) ((lambda (u410b@return) (begin (set! u410b@return (lambda (u411a@x) (begin ((letrec ((u411c@f (lambda (u411e@x) (if (not (u2f09@stx? u411e@x)) (if (pair? u411e@x) (begin (u411c@f (car u411e@x)) (u411c@f (cdr u411e@x))) (if (vector? u411e@x) (vector-for-each u411c@f u411e@x) (if (symbol? u411e@x) (u3239@syntax-violation '#f '"raw symbol encountered in output of macro" u4105@expr u411e@x) (void)))) (void))))) u411c@f) u411a@x) (u2f2b@add-mark (u2f21@gen-mark) u411a@x u4105@expr)))) ((lambda (u410c@x) (if (procedure? u410c@x) (u410b@return (u410c@x (lambda (u410e@id) (begin (if (not (u2f41@id? u410e@id)) (assertion-violation 'rho '"not an identifier" u410e@id) (void)) ((lambda (u4110@label) ((lambda (u4112@binding) ((lambda (u4114@t) (if (memv u4114@t '(local-ctv)) (cadr u4112@binding) (if (memv u4114@t '(global-ctv)) ((lambda (u4116@lib u4117@loc) (begin (if (not (eq? u4116@lib '*interaction*)) (u2d78@u2bf9@visit-library u4116@lib) (void)) (symbol-value u4117@loc))) (cadr u4112@binding) (cddr u4112@binding)) ((lambda () (begin '#f '#f)))))) (car u4112@binding))) (u2f5d@label->binding u4110@label u4106@r))) (u2f5b@id->label u410e@id)))))) (u410b@return u410c@x))) (u4104@transformer (u2f2b@add-mark u2f23@anti-mark u4105@expr '#f))))) '#f))) (set! u3162@chi-macro (lambda (u4120@p u4121@e u4122@r) (u3160@do-macro-call (u315c@macro-transformer u4120@p) u4121@e u4122@r))) (set! u3164@chi-local-macro (lambda (u4126@p u4127@e u4128@r) (u3160@do-macro-call (u315e@local-macro-transformer u4126@p) u4127@e u4128@r))) (set! u3166@chi-global-macro (lambda (u412c@p u412d@e u412e@r) ((lambda (u4132@lib u4133@loc) (begin (if (not (eq? u4132@lib '*interaction*)) (u2d78@u2bf9@visit-library u4132@lib) (void)) ((lambda (u4136@x) ((lambda (u4138@transformer) (u3160@do-macro-call u4138@transformer u412d@e u412e@r)) (if (procedure? u4136@x) u4136@x ((lambda () (begin '#f (assertion-violation 'chi-global-macro '"BUG: not a procedure" u4136@x))))))) (symbol-value u4133@loc)))) (car u412c@p) (cdr u412c@p)))) (set! u3168@chi-expr* (lambda (u413a@e* u413b@r u413c@mr) (if (null? u413a@e*) '() ((lambda () (begin '#f ((lambda (u4140@e) (cons u4140@e (u3168@chi-expr* (cdr u413a@e*) u413b@r u413c@mr))) (u316c@chi-expr (car u413a@e*) u413b@r u413c@mr)))))))) (set! u316a@chi-application (lambda (u4142@e u4143@r u4144@mr) ((lambda (u4148@t) ((lambda (u414a@ls/false) (if u414a@ls/false (apply (lambda (u414c@rator u414d@rands) ((lambda (u4150@rator) (u2ea4@u2d80@build-application (u322f@syntax-annotation u4142@e) u4150@rator (u3168@chi-expr* u414d@rands u4143@r u4144@mr))) (u316c@chi-expr u414c@rator u4143@r u4144@mr))) u414a@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u4148@t))) (u3148@syntax-dispatch u4148@t '(any . each-any)))) u4142@e))) (set! u316c@chi-expr (lambda (u4152@e u4153@r u4154@mr) (call-with-values (lambda () (u2f67@syntax-type u4152@e u4153@r)) (lambda (u415e@u4159 u415f@u415b u4160@u415d) ((lambda (u4164@kwd u4165@value u4166@type) ((lambda (u416a@t) (if (memv u416a@t '(core-macro)) ((lambda (u416c@transformer) (u416c@transformer u4152@e u4153@r u4154@mr)) (u3156@core-macro-transformer u4165@value)) (if (memv u416a@t '(global)) ((lambda (u416e@lib) ((lambda (u4170@loc) ((lambda () (begin ((u31b7@inv-collector) u416e@lib) u4170@loc)))) (cdr u4165@value))) (car u4165@value)) (if (memv u416a@t '(core-prim)) ((lambda (u4172@name) (list 'primitive u4172@name)) u4165@value) (if (memv u416a@t '(call)) (u316a@chi-application u4152@e u4153@r u4154@mr) (if (memv u416a@t '(lexical)) ((lambda (u4174@lex) u4174@lex) (u30d8@lexical-var u4165@value)) (if (memv u416a@t '(global-macro global-macro!)) (u316c@chi-expr (u3166@chi-global-macro u4165@value u4152@e u4153@r) u4153@r u4154@mr) (if (memv u416a@t '(local-macro local-macro!)) (u316c@chi-expr (u3164@chi-local-macro u4165@value u4152@e u4153@r) u4153@r u4154@mr) (if (memv u416a@t '(macro macro!)) (u316c@chi-expr (u3162@chi-macro u4165@value u4152@e u4153@r) u4153@r u4154@mr) (if (memv u416a@t '(constant)) ((lambda (u4176@datum) (list 'quote u4176@datum)) u4165@value) (if (memv u416a@t '(set!)) (u316e@chi-set! u4152@e u4153@r u4154@mr) (if (memv u416a@t '(begin)) ((lambda (u4178@t) ((lambda (u417a@ls/false) (if u417a@ls/false (apply (lambda (u417c@x u417d@x*) (u2ea8@u2e00@build-sequence '#f (u3168@chi-expr* (cons u417c@x u417d@x*) u4153@r u4154@mr))) u417a@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u4178@t))) (u3148@syntax-dispatch u4178@t '(_ any . each-any)))) u4152@e) (if (memv u416a@t '(stale-when)) ((lambda (u4180@t) ((lambda (u4182@ls/false) (if u4182@ls/false (apply (lambda (u4184@guard u4185@x u4186@x*) (begin (u31c7@handle-stale-when u4184@guard u4154@mr) (u2ea8@u2e00@build-sequence '#f (u3168@chi-expr* (cons u4185@x u4186@x*) u4153@r u4154@mr)))) u4182@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u4180@t))) (u3148@syntax-dispatch u4180@t '(_ any any . each-any)))) u4152@e) (if (memv u416a@t '(let-syntax letrec-syntax)) ((lambda (u418a@t) ((lambda (u418c@ls/false) (if (and u418c@ls/false (apply (lambda (u418e@xlhs* u418f@xrhs* u4190@xbody u4191@xbody*) (if (not (u2f4b@valid-bound-ids? u418e@xlhs*)) (u3239@syntax-violation '#f '"invalid identifiers" u4152@e) (void))) u418c@ls/false)) (apply (lambda (u4196@xlhs* u4197@xrhs* u4198@xbody u4199@xbody*) ((lambda (u419e@xlab*) ((lambda (u41a0@xrib) ((lambda (u41a2@xb*) ((lambda () (u2ea8@u2e00@build-sequence '#f (u3168@chi-expr* (map (lambda (u41a4@x) (u2f2d@add-subst u41a0@xrib u41a4@x)) (cons u4198@xbody u4199@xbody*)) (append (map cons u419e@xlab* u41a2@xb*) u4153@r) (append (map cons u419e@xlab* u41a2@xb*) u4154@mr)))))) (map (lambda (u41a6@x) (u2f7f@make-eval-transformer (u31a9@expand-transformer (if (eq? u4166@type 'let-syntax) u41a6@x (u2f2d@add-subst u41a0@xrib u41a6@x)) u4154@mr))) u4197@xrhs*))) (u2efc@make-full-rib u4196@xlhs* u419e@xlab*))) (map u2ec9@gen-label u4196@xlhs*))) u418c@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u418a@t))) (u3148@syntax-dispatch u418a@t '(_ #(each (any any)) any . each-any)))) u4152@e) (if (memv u416a@t '(displaced-lexical)) (u3239@syntax-violation '#f '"identifier out of context" u4152@e) (if (memv u416a@t '(syntax)) (u3239@syntax-violation '#f '"reference to pattern variable outside a syntax form" u4152@e) (if (memv u416a@t '(define define-syntax module import library)) (u3239@syntax-violation '#f (string-append ((lambda (u41a8@t) (if (memv u41a8@t '(define)) '"a definition" (if (memv u41a8@t '(define-syntax)) '"a define-syntax" (if (memv u41a8@t '(module)) '"a module definition" (if (memv u41a8@t '(library)) '"a library definition" (if (memv u41a8@t '(import)) '"an import declaration" (if (memv u41a8@t '(export)) '"an export declaration" ((lambda () (begin '#f '"a non-expression")))))))))) u4166@type) '" was found where an expression was expected") u4152@e) (if (memv u416a@t '(mutable)) ((lambda (u41aa@lib) ((lambda (u41ac@loc) ((lambda () (if (eq? u41aa@lib '*interaction*) u41ac@loc (u3239@syntax-violation '#f '"attempt to reference an unexportable variable" u4152@e))))) (cdr u4165@value))) (car u4165@value)) ((lambda () (begin '#f (u3239@syntax-violation '#f '"invalid expression" u4152@e)))))))))))))))))))))) u4166@type)) u4160@u415d u415f@u415b u415e@u4159))))) (set! u316e@chi-set! (lambda (u41ae@e u41af@r u41b0@mr) ((lambda (u41b4@t) ((lambda (u41b6@ls/false) (if (and u41b6@ls/false (apply (lambda (u41b8@x u41b9@v) (u2f41@id? u41b8@x)) u41b6@ls/false)) (apply (lambda (u41bc@x u41bd@v) (call-with-values (lambda () (u2f67@syntax-type u41bc@x u41af@r)) (lambda (u41c6@u41c1 u41c7@u41c3 u41c8@u41c5) ((lambda (u41cc@kwd u41cd@value u41ce@type) ((lambda (u41d2@t) (if (memv u41d2@t '(lexical)) (begin (u30dc@set-lexical-mutable! u41cd@value '#t) (list 'set! (u30d8@lexical-var u41cd@value) (u316c@chi-expr u41bd@v u41af@r u41b0@mr))) (if (memv u41d2@t '(core-prim)) (u3239@syntax-violation '#f '"cannot modify imported core primitive" u41ae@e) (if (memv u41d2@t '(global)) (u3239@syntax-violation '#f '"attempt to modify an immutable binding" u41ae@e) (if (memv u41d2@t '(global-macro!)) (u316c@chi-expr (u3166@chi-global-macro u41cd@value u41ae@e u41af@r) u41af@r u41b0@mr) (if (memv u41d2@t '(local-macro!)) (u316c@chi-expr (u3164@chi-local-macro u41cd@value u41ae@e u41af@r) u41af@r u41b0@mr) (if (memv u41d2@t '(mutable)) ((lambda (u41d4@lib u41d5@loc) (if (eq? u41d4@lib '*interaction*) (list 'set! u41d5@loc (u316c@chi-expr u41bd@v u41af@r u41b0@mr)) (u3239@syntax-violation '#f '"attempt to modify an unexportable variable" u41ae@e))) (car u41cd@value) (cdr u41cd@value)) ((lambda () (begin '#f (u3239@syntax-violation '#f '"invalid syntax" u41ae@e))))))))))) u41ce@type)) u41c8@u41c5 u41c7@u41c3 u41c6@u41c1)))) u41b6@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u41b4@t))) (u3148@syntax-dispatch u41b4@t '(_ any any)))) u41ae@e))) (set! u3170@verify-formals (lambda (u41d8@fmls u41d9@stx) ((lambda (u41dc@t) ((lambda (u41de@ls/false) (if u41de@ls/false (apply (lambda (u41e0@x*) (if (not (u2f4b@valid-bound-ids? u41e0@x*)) (u3106@invalid-fmls-error u41d9@stx u41d8@fmls) (void))) u41de@ls/false) ((lambda (u41e2@t) ((lambda (u41e4@ls/false) (if u41e4@ls/false (apply (lambda (u41e6@x* u41e7@x) (if (not (u2f4b@valid-bound-ids? (cons u41e7@x u41e6@x*))) (u3106@invalid-fmls-error u41d9@stx u41d8@fmls) (void))) u41e4@ls/false) ((lambda (u41ea@t) ((lambda (u41ec@ls/false) (if u41ec@ls/false (apply (lambda () (u3239@syntax-violation '#f '"invalid syntax" u41d9@stx)) u41ec@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u41ea@t))) (u3148@syntax-dispatch u41ea@t '_))) u41e2@t))) (u3148@syntax-dispatch u41e2@t '#(each+ any () any)))) u41dc@t))) (u3148@syntax-dispatch u41dc@t 'each-any))) u41d8@fmls))) (set! u3172@chi-lambda-clause (lambda (u41ee@stx u41ef@fmls u41f0@body* u41f1@r u41f2@mr) ((lambda (u41f8@t) ((lambda (u41fa@ls/false) (if u41fa@ls/false (apply (lambda (u41fc@x*) (begin (u3170@verify-formals u41ef@fmls u41ee@stx) ((lambda (u41fe@lex* u41ff@lab*) (values u41fe@lex* (u3182@chi-internal (u2f2d@add-subst (u2efc@make-full-rib u41fc@x* u41ff@lab*) u41f0@body*) (u30e0@add-lexicals u41ff@lab* u41fe@lex* u41f1@r) u41f2@mr))) (map u2ec5@gen-lexical u41fc@x*) (map u2ec9@gen-label u41fc@x*)))) u41fa@ls/false) ((lambda (u4202@t) ((lambda (u4204@ls/false) (if u4204@ls/false (apply (lambda (u4206@x* u4207@x) (begin (u3170@verify-formals u41ef@fmls u41ee@stx) ((lambda (u420a@lex* u420b@lab* u420c@lex u420d@lab) (values (append u420a@lex* u420c@lex) (u3182@chi-internal (u2f2d@add-subst (u2efc@make-full-rib (cons u4207@x u4206@x*) (cons u420d@lab u420b@lab*)) u41f0@body*) (u30e0@add-lexicals (cons u420d@lab u420b@lab*) (cons u420c@lex u420a@lex*) u41f1@r) u41f2@mr))) (map u2ec5@gen-lexical u4206@x*) (map u2ec9@gen-label u4206@x*) (u2ec5@gen-lexical u4207@x) (u2ec9@gen-label u4207@x)))) u4204@ls/false) ((lambda (u4212@t) ((lambda (u4214@ls/false) (if u4214@ls/false (apply (lambda () (u3239@syntax-violation '#f '"invalid syntax" u41ef@fmls)) u4214@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u4212@t))) (u3148@syntax-dispatch u4212@t '_))) u4202@t))) (u3148@syntax-dispatch u4202@t '#(each+ any () any)))) u41f8@t))) (u3148@syntax-dispatch u41f8@t 'each-any))) u41ef@fmls))) (set! u3174@chi-lambda-clause* (lambda (u4216@stx u4217@fmls* u4218@body** u4219@r u421a@mr) (if (null? u4217@fmls*) (values '() '()) ((lambda () (begin '#f (call-with-values (lambda () (u3172@chi-lambda-clause u4216@stx (car u4217@fmls*) (car u4218@body**) u4219@r u421a@mr)) (lambda (u4224@u4221 u4225@u4223) ((lambda (u4228@b u4229@a) (call-with-values (lambda () (u3174@chi-lambda-clause* u4216@stx (cdr u4217@fmls*) (cdr u4218@body**) u4219@r u421a@mr)) (lambda (u4230@u422d u4231@u422f) ((lambda (u4234@b* u4235@a*) (values (cons u4229@a u4235@a*) (cons u4228@b u4234@b*))) u4231@u422f u4230@u422d)))) u4225@u4223 u4224@u4221))))))))) (set! u3176@chi-defun (lambda (u4238@x u4239@r u423a@mr) ((lambda (u423e@t) ((lambda (u4240@ls/false) (if u4240@ls/false (apply (lambda (u4242@ctxt u4243@fmls u4244@body*) (call-with-values (lambda () (u3172@chi-lambda-clause u4243@fmls u4243@fmls u4244@body* u4239@r u423a@mr)) (lambda (u424c@u4249 u424d@u424b) ((lambda (u4250@body u4251@fmls) (u2ea5@u2dce@build-lambda (u322f@syntax-annotation u4242@ctxt) u4251@fmls u4250@body)) u424d@u424b u424c@u4249)))) u4240@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u423e@t))) (u3148@syntax-dispatch u423e@t '(_ (any . any) . any)))) u4238@x))) (set! u3178@chi-rhs (lambda (u4254@rhs u4255@r u4256@mr) ((lambda (u425a@t) (if (memv u425a@t '(defun)) (u3176@chi-defun (cdr u4254@rhs) u4255@r u4256@mr) (if (memv u425a@t '(expr)) ((lambda (u425c@expr) (u316c@chi-expr u425c@expr u4255@r u4256@mr)) (cdr u4254@rhs)) (if (memv u425a@t '(top-expr)) ((lambda (u425e@expr) (u2ea8@u2e00@build-sequence '#f (list (u316c@chi-expr u425e@expr u4255@r u4256@mr) (u2ea9@u2e02@build-void)))) (cdr u4254@rhs)) ((lambda () (begin '#f (assertion-violation 'chi-rhs '"BUG: invalid rhs" u4254@rhs)))))))) (car u4254@rhs)))) (set! u317a@expand-interaction-rhs*/init* (lambda (u4260@lhs* u4261@rhs* u4262@init* u4263@r u4264@mr) ((letrec ((u426a@f (lambda (u426c@lhs* u426d@rhs*) (if (null? u426c@lhs*) (map (lambda (u4270@x) (u316c@chi-expr u4270@x u4263@r u4264@mr)) u4262@init*) ((lambda () (begin '#f ((lambda (u4272@lhs u4273@rhs) ((lambda (u4276@t) (if (memv u4276@t '(defun)) ((lambda (u4278@rhs) (cons (list 'set! u4272@lhs u4278@rhs) (u426a@f (cdr u426c@lhs*) (cdr u426d@rhs*)))) (u3176@chi-defun (cdr u4273@rhs) u4263@r u4264@mr)) (if (memv u4276@t '(expr)) ((lambda (u427a@rhs) (cons (list 'set! u4272@lhs u427a@rhs) (u426a@f (cdr u426c@lhs*) (cdr u426d@rhs*)))) (u316c@chi-expr (cdr u4273@rhs) u4263@r u4264@mr)) (if (memv u4276@t '(top-expr)) ((lambda (u427c@e) (cons u427c@e (u426a@f (cdr u426c@lhs*) (cdr u426d@rhs*)))) (u316c@chi-expr (cdr u4273@rhs) u4263@r u4264@mr)) ((lambda () (begin '#f (error 'expand-interaction '"invallid" u4273@rhs)))))))) (car u4273@rhs))) (car u426c@lhs*) (car u426d@rhs*))))))))) u426a@f) u4260@lhs* u4261@rhs*))) (set! u317c@chi-rhs* (lambda (u427e@rhs* u427f@r u4280@mr) ((letrec ((u4284@f (lambda (u4286@ls) (if (null? u4286@ls) '() ((lambda () (begin '#f ((lambda (u4288@a) (cons u4288@a (u4284@f (cdr u4286@ls)))) (u3178@chi-rhs (car u4286@ls) u427f@r u4280@mr))))))))) u4284@f) u427e@rhs*))) (set! u317e@find-bound=? (lambda (u428a@x u428b@lhs* u428c@rhs*) (if (null? u428b@lhs*) '#f (if (u2f47@bound-id=? u428a@x (car u428b@lhs*)) (car u428c@rhs*) ((lambda () (begin '#f (u317e@find-bound=? u428a@x (cdr u428b@lhs*) (cdr u428c@rhs*))))))))) (set! u3180@find-dups (lambda (u4290@ls) ((letrec ((u4292@f (lambda (u4294@ls u4295@dups) (if (null? u4294@ls) u4295@dups ((lambda (u4298@t) (if u4298@t ((lambda (u429a@x) (u4292@f (cdr u4294@ls) (cons (list (car u4294@ls) u429a@x) u4295@dups))) u4298@t) ((lambda () (begin '#f (u4292@f (cdr u4294@ls) u4295@dups)))))) (u317e@find-bound=? (car u4294@ls) (cdr u4294@ls) (cdr u4294@ls))))))) u4292@f) u4290@ls '()))) (set! u3182@chi-internal (lambda (u429c@e* u429d@r u429e@mr) ((lambda (u42a2@rib) (call-with-values (lambda () (u31a7@chi-body* (map (lambda (u42b4@x) (u2f2d@add-subst u42a2@rib u42b4@x)) (u2f3f@syntax->list u429c@e*)) u429d@r u429e@mr '() '() '() '() '() u42a2@rib '#f '#t)) (lambda (u42b6@u42a5 u42b7@u42a7 u42b8@u42a9 u42b9@u42ab u42ba@u42ad u42bb@u42af u42bc@u42b1 u42bd@u42b3) ((lambda (u42c6@_exp* u42c7@kwd* u42c8@mod** u42c9@rhs* u42ca@lex* u42cb@mr u42cc@r u42cd@e*) (begin (if (null? u42cd@e*) (u3239@syntax-violation '#f '"no expression in body" u42cd@e*) (void)) ((lambda (u42d6@init*) ((lambda (u42d8@rhs*) ((lambda () (u2eab@u2e06@build-letrec* '#f (reverse u42ca@lex*) (reverse u42d8@rhs*) (u2ea8@u2e00@build-sequence '#f u42d6@init*))))) (u317c@chi-rhs* u42c9@rhs* u42cc@r u42cb@mr))) (u3168@chi-expr* (append (apply append (reverse u42c8@mod**)) u42cd@e*) u42cc@r u42cb@mr)))) u42bd@u42b3 u42bc@u42b1 u42bb@u42af u42ba@u42ad u42b9@u42ab u42b8@u42a9 u42b7@u42a7 u42b6@u42a5)))) (u2ef0@make-empty-rib)))) (set! u3184@parse-module (lambda (u42da@e) ((lambda (u42dc@t) ((lambda (u42de@ls/false) (if u42de@ls/false (apply (lambda (u42e0@export* u42e1@b*) (begin (if (not (for-all u2f41@id? u42e0@export*)) (u3239@syntax-violation '#f '"module exports must be identifiers" u42da@e) (void)) (values '#f (list->vector u42e0@export*) u42e1@b*))) u42de@ls/false) ((lambda (u42e4@t) ((lambda (u42e6@ls/false) (if u42e6@ls/false (apply (lambda (u42e8@name u42e9@export* u42ea@b*) (begin (if (not (u2f41@id? u42e8@name)) (u3239@syntax-violation '#f '"module name must be an identifier" u42da@e) (void)) (if (not (for-all u2f41@id? u42e9@export*)) (u3239@syntax-violation '#f '"module exports must be identifiers" u42da@e) (void)) (values u42e8@name (list->vector u42e9@export*) u42ea@b*))) u42e6@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u42e4@t))) (u3148@syntax-dispatch u42e4@t '(_ any each-any . each-any)))) u42dc@t))) (u3148@syntax-dispatch u42dc@t '(_ each-any . each-any)))) u42da@e))) (set! u318a@u3185 (make-record-type-descriptor 'module-interface '#f 'u3188 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! u318c@u3187 '#f) (set! u318e@u3186 (make-record-constructor-descriptor u318a@u3185 '#f u318c@u3187)) (set! u3191@module-interface? (record-predicate u318a@u3185)) (set! u3193@make-module-interface (record-constructor u318e@u3186)) (set! u3195@module-interface-first-mark (record-accessor u318a@u3185 '0)) (set! u3197@module-interface-exp-id-vec (record-accessor u318a@u3185 '1)) (set! u3199@module-interface-exp-lab-vec (record-accessor u318a@u3185 '2)) (set! u319b@set-module-interface-first-mark! (record-mutator u318a@u3185 '0)) (set! u319d@set-module-interface-exp-id-vec! (record-mutator u318a@u3185 '1)) (set! u319f@set-module-interface-exp-lab-vec! (record-mutator u318a@u3185 '2)) (set! u31a1@module-interface-exp-id* (lambda (u42ee@iface u42ef@id) ((lambda (u42f3@diff-marks) (begin (set! u42f3@diff-marks (lambda (u42fa@ls u42fb@x) (begin (if (null? u42fa@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (u42fe@a) (if (eq? u42fe@a u42fb@x) '() (cons u42fe@a (u42f3@diff-marks (cdr u42fa@ls) u42fb@x)))) (car u42fa@ls))))) ((lambda (u42f4@diff u42f5@id-vec) (if (null? u42f4@diff) u42f5@id-vec (vector-map (lambda (u42f8@x) (u2f0b@make-stx (u2f0d@stx-expr u42f8@x) (append u42f4@diff (u2f0f@stx-mark* u42f8@x)) '() '())) u42f5@id-vec))) (u42f3@diff-marks (u2f0f@stx-mark* u42ef@id) (u3195@module-interface-first-mark u42ee@iface)) (u3197@module-interface-exp-id-vec u42ee@iface)))) '#f))) (set! u31a3@syntax-transpose (lambda (u4300@object u4301@base-id u4302@new-id) ((lambda (u4307@who u4309@err u430b@split u430d@final u430f@diff) (begin (set! u4307@who 'syntax-transpose) (set! u4309@err (lambda (u435a@msg . u435c@args) (apply assertion-violation u4307@who u435a@msg u435c@args))) (set! u430b@split (lambda (u434c@s*) (if (eq? (car u434c@s*) 'shift) (values (list 'shift) (cdr u434c@s*)) ((lambda () (begin '#f (call-with-values (lambda () (u430b@split (cdr u434c@s*))) (lambda (u4352@u434f u4353@u4351) ((lambda (u4356@s2* u4357@s1*) (values (cons (car u434c@s*) u4357@s1*) u4356@s2*)) u4353@u4351 u4352@u434f))))))))) (set! u430d@final (lambda (u434a@s*) (if (or (null? u434a@s*) (eq? (car u434a@s*) 'shift)) '() ((lambda () (begin '#f (cons (car u434a@s*) (u430d@final (cdr u434a@s*))))))))) (set! u430f@diff (lambda (u4322@m u4323@m* u4324@s* u4325@ae*) (if (null? u4323@m*) (u4309@err '"unmatched identifiers" u4301@base-id u4302@new-id) ((lambda (u432a@m1) (if (eq? u4322@m u432a@m1) (values '() (u430d@final u4324@s*) '()) (call-with-values (lambda () (u430b@split u4324@s*)) (lambda (u4330@u432d u4331@u432f) ((lambda (u4334@s2* u4335@s1*) (call-with-values (lambda () (u430f@diff u4322@m (cdr u4323@m*) u4334@s2* (cdr u4325@ae*))) (lambda (u433e@u4339 u433f@u433b u4340@u433d) ((lambda (u4344@nae* u4345@ns* u4346@nm*) (values (cons u432a@m1 u4346@nm*) (append u4335@s1* u4345@ns*) (cons (car u4325@ae*) u4344@nae*))) u4340@u433d u433f@u433b u433e@u4339)))) u4331@u432f u4330@u432d))))) (car u4323@m*))))) (begin (if (not (u2f41@id? u4301@base-id)) (u4309@err '"not an identifier" u4301@base-id) (void)) (if (not (u2f41@id? u4302@new-id)) (u4309@err '"not an identifier" u4302@new-id) (void)) (if (not (u3225@free-identifier=? u4301@base-id u4302@new-id)) (u4309@err '"not the same identifier" u4301@base-id u4302@new-id) (void)) (call-with-values (lambda () (u430f@diff (car (u2f0f@stx-mark* u4301@base-id)) (u2f0f@stx-mark* u4302@new-id) (u2f11@stx-subst* u4302@new-id) (u2f13@stx-ae* u4302@new-id))) (lambda (u4316@u4311 u4317@u4313 u4318@u4315) ((lambda (u431c@ae* u431d@s* u431e@m*) (if (and (null? u431e@m*) (null? u431d@s*)) u4300@object (u2f29@mkstx u4300@object u431e@m* u431d@s* u431c@ae*))) u4318@u4315 u4317@u4313 u4316@u4311)))))) '#f '#f '#f '#f '#f))) (set! u31a5@chi-internal-module (lambda (u435e@e u435f@r u4360@mr u4361@lex* u4362@rhs* u4363@mod** u4364@kwd*) (call-with-values (lambda () (u3184@parse-module u435e@e)) (lambda (u4372@u436d u4373@u436f u4374@u4371) ((lambda (u4378@e* u4379@exp-id* u437a@name) ((lambda (u437e@rib) ((lambda (u4380@e*) ((lambda () (call-with-values (lambda () (u31a7@chi-body* u4380@e* u435f@r u4360@mr u4361@lex* u4362@rhs* u4363@mod** u4364@kwd* '() u437e@rib '#f '#t)) (lambda (u4392@u4383 u4393@u4385 u4394@u4387 u4395@u4389 u4396@u438b u4397@u438d u4398@u438f u4399@u4391) ((lambda (u43a2@_exp* u43a3@kwd* u43a4@mod** u43a5@rhs* u43a6@lex* u43a7@mr u43a8@r u43a9@e*) ((lambda (u43b2@exp-lab* u43b3@mod**) (if (not u437a@name) (values u43a6@lex* u43a5@rhs* u4379@exp-id* u43b2@exp-lab* u43a8@r u43a7@mr u43b3@mod** u43a3@kwd*) ((lambda (u43b6@lab u43b7@iface) (values u43a6@lex* u43a5@rhs* (vector u437a@name) (vector u43b6@lab) (cons (cons u43b6@lab (cons '$module u43b7@iface)) u43a8@r) (cons (cons u43b6@lab (cons '$module u43b7@iface)) u43a7@mr) u43b3@mod** u43a3@kwd*)) (u2ec9@gen-label 'module) (u3193@make-module-interface (car (u2f0f@stx-mark* u437a@name)) (vector-map (lambda (u43ba@x) (u2f0b@make-stx (u2f0d@stx-expr u43ba@x) (u2f0f@stx-mark* u43ba@x) '() '())) u4379@exp-id*) u43b2@exp-lab*)))) (vector-map (lambda (u43bc@x) (or (u2f5b@id->label (u2f0b@make-stx (u2f43@id->sym u43bc@x) (u2f0f@stx-mark* u43bc@x) (list u437e@rib) '())) (u3239@syntax-violation '#f '"cannot find module export" u43bc@x))) u4379@exp-id*) (cons u43a9@e* u43a4@mod**))) u4399@u4391 u4398@u438f u4397@u438d u4396@u438b u4395@u4389 u4394@u4387 u4393@u4385 u4392@u4383)))))) (map (lambda (u43be@x) (u2f2d@add-subst u437e@rib u43be@x)) (u2f3f@syntax->list u4378@e*)))) (u2ef0@make-empty-rib))) u4374@u4371 u4373@u436f u4372@u436d))))) (set! u31a7@chi-body* (lambda (u43c0@e* u43c1@r u43c2@mr u43c3@lex* u43c4@rhs* u43c5@mod** u43c6@kwd* u43c7@exp* u43c8@rib u43c9@mix? u43ca@sd?) (if (null? u43c0@e*) (values u43c0@e* u43c1@r u43c2@mr u43c3@lex* u43c4@rhs* u43c5@mod** u43c6@kwd* u43c7@exp*) ((lambda () (begin '#f ((lambda (u43d6@e) (call-with-values (lambda () (u2f67@syntax-type u43d6@e u43c1@r)) (lambda (u43de@u43d9 u43df@u43db u43e0@u43dd) ((lambda (u43e4@kwd u43e5@value u43e6@type) ((lambda (u43ea@kwd*) ((lambda (u43ec@t) (if (memv u43ec@t '(define)) (call-with-values (lambda () (u30d0@parse-define u43d6@e)) (lambda (u43f2@u43ef u43f3@u43f1) ((lambda (u43f6@rhs u43f7@id) (begin (if (u2f4f@bound-id-member? u43f7@id u43ea@kwd*) (u3239@syntax-violation '#f '"cannot redefine keyword" u43d6@e) (void)) (call-with-values (lambda () (u2ecd@gen-define-label+loc u43f7@id u43c8@rib u43ca@sd?)) (lambda (u43fe@u43fb u43ff@u43fd) ((lambda (u4402@lex u4403@lab) (begin (u2ef4@extend-rib! u43c8@rib u43f7@id u4403@lab u43ca@sd?) (u31a7@chi-body* (cdr u43c0@e*) (u30de@add-lexical u4403@lab u4402@lex u43c1@r) u43c2@mr (cons u4402@lex u43c3@lex*) (cons u43f6@rhs u43c4@rhs*) u43c5@mod** u43ea@kwd* u43c7@exp* u43c8@rib u43c9@mix? u43ca@sd?))) u43ff@u43fd u43fe@u43fb))))) u43f3@u43f1 u43f2@u43ef))) (if (memv u43ec@t '(define-syntax)) (call-with-values (lambda () (u30d2@parse-define-syntax u43d6@e)) (lambda (u440a@u4407 u440b@u4409) ((lambda (u440e@rhs u440f@id) (begin (if (u2f4f@bound-id-member? u440f@id u43ea@kwd*) (u3239@syntax-violation '#f '"cannot redefine keyword" u43d6@e) (void)) ((lambda (u4412@lab) ((lambda (u4414@expanded-rhs) ((lambda () (begin (u2ef4@extend-rib! u43c8@rib u440f@id u4412@lab u43ca@sd?) ((lambda (u4416@b) (u31a7@chi-body* (cdr u43c0@e*) (cons (cons u4412@lab u4416@b) u43c1@r) (cons (cons u4412@lab u4416@b) u43c2@mr) u43c3@lex* u43c4@rhs* u43c5@mod** u43ea@kwd* u43c7@exp* u43c8@rib u43c9@mix? u43ca@sd?)) (u2f7f@make-eval-transformer u4414@expanded-rhs)))))) (u31a9@expand-transformer u440e@rhs u43c2@mr))) (u2ecf@gen-define-label u440f@id u43c8@rib u43ca@sd?)))) u440b@u4409 u440a@u4407))) (if (memv u43ec@t '(let-syntax letrec-syntax)) ((lambda (u4418@t) ((lambda (u441a@ls/false) (if (and u441a@ls/false (apply (lambda (u441c@xlhs* u441d@xrhs* u441e@xbody*) (if (not (u2f4b@valid-bound-ids? u441c@xlhs*)) (u3239@syntax-violation '#f '"invalid identifiers" u43d6@e) (void))) u441a@ls/false)) (apply (lambda (u4422@xlhs* u4423@xrhs* u4424@xbody*) ((lambda (u4428@xlab*) ((lambda (u442a@xrib) ((lambda (u442c@xb*) ((lambda () (u31a7@chi-body* (append (map (lambda (u442e@x) (u2f2d@add-subst u442a@xrib u442e@x)) u4424@xbody*) (cdr u43c0@e*)) (append (map cons u4428@xlab* u442c@xb*) u43c1@r) (append (map cons u4428@xlab* u442c@xb*) u43c2@mr) u43c3@lex* u43c4@rhs* u43c5@mod** u43ea@kwd* u43c7@exp* u43c8@rib u43c9@mix? u43ca@sd?)))) (map (lambda (u4430@x) (u2f7f@make-eval-transformer (u31a9@expand-transformer (if (eq? u43e6@type 'let-syntax) u4430@x (u2f2d@add-subst u442a@xrib u4430@x)) u43c2@mr))) u4423@xrhs*))) (u2efc@make-full-rib u4422@xlhs* u4428@xlab*))) (map u2ec9@gen-label u4422@xlhs*))) u441a@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u4418@t))) (u3148@syntax-dispatch u4418@t '(_ #(each (any any)) . each-any)))) u43d6@e) (if (memv u43ec@t '(begin)) ((lambda (u4432@t) ((lambda (u4434@ls/false) (if u4434@ls/false (apply (lambda (u4436@x*) (u31a7@chi-body* (append u4436@x* (cdr u43c0@e*)) u43c1@r u43c2@mr u43c3@lex* u43c4@rhs* u43c5@mod** u43ea@kwd* u43c7@exp* u43c8@rib u43c9@mix? u43ca@sd?)) u4434@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u4432@t))) (u3148@syntax-dispatch u4432@t '(_ . each-any)))) u43d6@e) (if (memv u43ec@t '(stale-when)) ((lambda (u4438@t) ((lambda (u443a@ls/false) (if u443a@ls/false (apply (lambda (u443c@guard u443d@x*) (begin (u31c7@handle-stale-when u443c@guard u43c2@mr) (u31a7@chi-body* (append u443d@x* (cdr u43c0@e*)) u43c1@r u43c2@mr u43c3@lex* u43c4@rhs* u43c5@mod** u43ea@kwd* u43c7@exp* u43c8@rib u43c9@mix? u43ca@sd?))) u443a@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u4438@t))) (u3148@syntax-dispatch u4438@t '(_ any . each-any)))) u43d6@e) (if (memv u43ec@t '(global-macro global-macro!)) (u31a7@chi-body* (cons (u2f2d@add-subst u43c8@rib (u3166@chi-global-macro u43e5@value u43d6@e u43c1@r)) (cdr u43c0@e*)) u43c1@r u43c2@mr u43c3@lex* u43c4@rhs* u43c5@mod** u43ea@kwd* u43c7@exp* u43c8@rib u43c9@mix? u43ca@sd?) (if (memv u43ec@t '(local-macro local-macro!)) (u31a7@chi-body* (cons (u2f2d@add-subst u43c8@rib (u3164@chi-local-macro u43e5@value u43d6@e u43c1@r)) (cdr u43c0@e*)) u43c1@r u43c2@mr u43c3@lex* u43c4@rhs* u43c5@mod** u43ea@kwd* u43c7@exp* u43c8@rib u43c9@mix? u43ca@sd?) (if (memv u43ec@t '(macro macro!)) (u31a7@chi-body* (cons (u2f2d@add-subst u43c8@rib (u3162@chi-macro u43e5@value u43d6@e u43c1@r)) (cdr u43c0@e*)) u43c1@r u43c2@mr u43c3@lex* u43c4@rhs* u43c5@mod** u43ea@kwd* u43c7@exp* u43c8@rib u43c9@mix? u43ca@sd?) (if (memv u43ec@t '(module)) (call-with-values (lambda () (u31a5@chi-internal-module u43d6@e u43c1@r u43c2@mr u43c3@lex* u43c4@rhs* u43c5@mod** u43ea@kwd*)) (lambda (u4450@u4441 u4451@u4443 u4452@u4445 u4453@u4447 u4454@u4449 u4455@u444b u4456@u444d u4457@u444f) ((lambda (u4460@kwd* u4461@mod** u4462@mr u4463@r u4464@m-exp-lab* u4465@m-exp-id* u4466@rhs* u4467@lex*) (begin (vector-for-each (lambda (u4470@id u4471@lab) (u2ef4@extend-rib! u43c8@rib u4470@id u4471@lab u43ca@sd?)) u4465@m-exp-id* u4464@m-exp-lab*) (u31a7@chi-body* (cdr u43c0@e*) u4463@r u4462@mr u4467@lex* u4466@rhs* u4461@mod** u4460@kwd* u43c7@exp* u43c8@rib u43c9@mix? u43ca@sd?))) u4457@u444f u4456@u444d u4455@u444b u4454@u4449 u4453@u4447 u4452@u4445 u4451@u4443 u4450@u4441))) (if (memv u43ec@t '(library)) (begin (u3217@library-expander (u2f57@stx->datum u43d6@e)) (u31a7@chi-body* (cdr u43c0@e*) u43c1@r u43c2@mr u43c3@lex* u43c4@rhs* u43c5@mod** u43ea@kwd* u43c7@exp* u43c8@rib u43c9@mix? u43ca@sd?)) (if (memv u43ec@t '(export)) ((lambda (u4474@t) ((lambda (u4476@ls/false) (if u4476@ls/false (apply (lambda (u4478@exp-decl*) (u31a7@chi-body* (cdr u43c0@e*) u43c1@r u43c2@mr u43c3@lex* u43c4@rhs* u43c5@mod** u43ea@kwd* (append u4478@exp-decl* u43c7@exp*) u43c8@rib u43c9@mix? u43ca@sd?)) u4476@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u4474@t))) (u3148@syntax-dispatch u4474@t '(_ . each-any)))) u43d6@e) (if (memv u43ec@t '(import)) ((lambda () ((lambda (u447b@module-import? u447d@module-import u447f@library-import) (begin (set! u447b@module-import? (lambda (u44ce@e) ((lambda (u44d0@t) ((lambda (u44d2@ls/false) (if (and u44d2@ls/false (apply (lambda (u44d4@id) (u2f41@id? u44d4@id)) u44d2@ls/false)) (apply (lambda (u44d6@id) '#t) u44d2@ls/false) ((lambda (u44d8@t) ((lambda (u44da@ls/false) (if u44da@ls/false (apply (lambda (u44dc@imp*) '#f) u44da@ls/false) ((lambda (u44de@t) ((lambda (u44e0@ls/false) (if u44e0@ls/false (apply (lambda () (u3239@syntax-violation '#f '"malformed import form" u44ce@e)) u44e0@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u44de@t))) (u3148@syntax-dispatch u44de@t '_))) u44d8@t))) (u3148@syntax-dispatch u44d8@t '(_ . each-any)))) u44d0@t))) (u3148@syntax-dispatch u44d0@t '(_ any)))) u44ce@e))) (set! u447d@module-import (lambda (u44ac@e u44ad@r) ((lambda (u44b0@t) ((lambda (u44b2@ls/false) (if (and u44b2@ls/false (apply (lambda (u44b4@id) (u2f41@id? u44b4@id)) u44b2@ls/false)) (apply (lambda (u44b6@id) (call-with-values (lambda () (u2f67@syntax-type u44b6@id u44ad@r)) (lambda (u44be@u44b9 u44bf@u44bb u44c0@u44bd) ((lambda (u44c4@kwd u44c5@value u44c6@type) ((lambda (u44ca@t) (if (memv u44ca@t '($module)) ((lambda (u44cc@iface) (values (u31a1@module-interface-exp-id* u44cc@iface u44b6@id) (u3199@module-interface-exp-lab-vec u44cc@iface))) u44c5@value) ((lambda () (begin '#f (u3239@syntax-violation '#f '"invalid import" u44ac@e)))))) u44c6@type)) u44c0@u44bd u44bf@u44bb u44be@u44b9)))) u44b2@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u44b0@t))) (u3148@syntax-dispatch u44b0@t '(_ any)))) u44ac@e))) (set! u447f@library-import (lambda (u4490@e) ((lambda (u4492@t) ((lambda (u4494@ls/false) (if u4494@ls/false (apply (lambda (u4496@ctxt u4497@imp*) (call-with-values (lambda () (u31b1@parse-import-spec* (u323f@syntax->datum u4497@imp*))) (lambda (u449e@u449b u449f@u449d) ((lambda (u44a2@subst-labels u44a3@subst-names) (values (vector-map (lambda (u44a6@name) (u2f1f@datum->stx u4496@ctxt u44a6@name)) u44a3@subst-names) u44a2@subst-labels)) u449f@u449d u449e@u449b)))) u4494@ls/false) ((lambda (u44a8@t) ((lambda (u44aa@ls/false) (if u44aa@ls/false (apply (lambda () (u3239@syntax-violation '#f '"invalid import form" u4490@e)) u44aa@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u44a8@t))) (u3148@syntax-dispatch u44a8@t '_))) u4492@t))) (u3148@syntax-dispatch u4492@t '(any . each-any)))) u4490@e))) (begin (call-with-values (lambda () (if (u447b@module-import? u43d6@e) (u447d@module-import u43d6@e u43c1@r) (u447f@library-import u43d6@e))) (lambda (u4484@u4481 u4485@u4483) ((lambda (u4488@lab* u4489@id*) (vector-for-each (lambda (u448c@id u448d@lab) (u2ef4@extend-rib! u43c8@rib u448c@id u448d@lab u43ca@sd?)) u4489@id* u4488@lab*)) u4485@u4483 u4484@u4481))) (u31a7@chi-body* (cdr u43c0@e*) u43c1@r u43c2@mr u43c3@lex* u43c4@rhs* u43c5@mod** u43ea@kwd* u43c7@exp* u43c8@rib u43c9@mix? u43ca@sd?)))) '#f '#f '#f))) ((lambda () (begin '#f (if u43c9@mix? (u31a7@chi-body* (cdr u43c0@e*) u43c1@r u43c2@mr (cons (u2ec5@gen-lexical 'dummy) u43c3@lex*) (cons (cons 'top-expr u43d6@e) u43c4@rhs*) u43c5@mod** u43ea@kwd* u43c7@exp* u43c8@rib '#t u43ca@sd?) (values u43c0@e* u43c1@r u43c2@mr u43c3@lex* u43c4@rhs* u43c5@mod** u43ea@kwd* u43c7@exp*)))))))))))))))))) u43e6@type)) (if (u2f41@id? u43e4@kwd) (cons u43e4@kwd u43c6@kwd*) u43c6@kwd*))) u43e0@u43dd u43df@u43db u43de@u43d9)))) (car u43c0@e*)))))))) (set! u31a9@expand-transformer (lambda (u44e2@expr u44e3@r) ((lambda (u44e6@rtc) ((lambda (u44e8@expanded-rhs) (begin (for-each ((lambda (u44ea@mark-visit) (lambda (u44ec@x) (begin (u2d77@u2bf7@invoke-library u44ec@x) (u44ea@mark-visit u44ec@x)))) (u31b9@vis-collector)) (u44e6@rtc)) u44e8@expanded-rhs)) ((lambda (u44f6@u44ef u44f7@u44f1 u44f8@u44f3 u44f9@u44f5) ((lambda (u44fe@swap) (dynamic-wind u44fe@swap (lambda () (u316c@chi-expr u44e2@expr u44e3@r u44e3@r)) u44fe@swap)) (lambda () (begin ((lambda (u4500@t) (begin (u44f6@u44ef u44f8@u44f3) (set! u44f8@u44f3 u4500@t))) (u44f6@u44ef)) ((lambda (u4502@t) (begin (u44f7@u44f1 u44f9@u44f5) (set! u44f9@u44f5 u4502@t))) (u44f7@u44f1)))))) u31b7@inv-collector u31b9@vis-collector u44e6@rtc (lambda (u4504@x) (values))))) (u31b5@make-collector)))) (set! u31ab@parse-exports (lambda (u4506@exp*) ((letrec ((u4508@f (lambda (u450a@exp* u450b@int* u450c@ext*) (if (null? u450a@exp*) (begin (if (not (u2f4b@valid-bound-ids? u450c@ext*)) (u3239@syntax-violation 'export '"invalid exports" (u3180@find-dups u450c@ext*)) (void)) (values (map u323f@syntax->datum u450c@ext*) u450b@int*)) ((lambda () (begin '#f ((lambda (u4510@t) ((lambda (u4512@ls/false) (if u4512@ls/false (apply (lambda (u4514@rename u4515@i* u4516@e*) (begin (if (not (and (eq? (u323f@syntax->datum u4514@rename) 'rename) (for-all u2f41@id? u4515@i*) (for-all u2f41@id? u4516@e*))) (u3239@syntax-violation 'export '"invalid export specifier" (car u450a@exp*)) (void)) (u4508@f (cdr u450a@exp*) (append u4515@i* u450b@int*) (append u4516@e* u450c@ext*)))) u4512@ls/false) ((lambda (u451a@t) ((lambda (u451c@ls/false) (if u451c@ls/false (apply (lambda (u451e@ie) (begin (if (not (u2f41@id? u451e@ie)) (u3239@syntax-violation 'export '"invalid export" u451e@ie) (void)) (u4508@f (cdr u450a@exp*) (cons u451e@ie u450b@int*) (cons u451e@ie u450c@ext*)))) u451c@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u451a@t))) (u3148@syntax-dispatch u451a@t 'any))) u4510@t))) (u3148@syntax-dispatch u4510@t '(any . #(each (any any)))))) (car u450a@exp*))))))))) u4508@f) u4506@exp* '() '()))) (set! u31ad@parse-library-name (lambda (u4520@spec) ((lambda (u4523@parse) (begin (set! u4523@parse (lambda (u4530@x) ((lambda (u4532@t) ((lambda (u4534@ls/false) (if (and u4534@ls/false (apply (lambda (u4536@v*) (for-all (lambda (u4538@x) ((lambda (u453a@x) (and (integer? u453a@x) (exact? u453a@x))) (u323f@syntax->datum u4538@x))) u4536@v*)) u4534@ls/false)) (apply (lambda (u453c@v*) (values '() (map u323f@syntax->datum u453c@v*))) u4534@ls/false) ((lambda (u453e@t) ((lambda (u4540@ls/false) (if (and u4540@ls/false (apply (lambda (u4542@x u4543@rest) (symbol? (u323f@syntax->datum u4542@x))) u4540@ls/false)) (apply (lambda (u4546@x u4547@rest) (call-with-values (lambda () (u4523@parse u4547@rest)) (lambda (u454e@u454b u454f@u454d) ((lambda (u4552@v* u4553@x*) (values (cons (u323f@syntax->datum u4546@x) u4553@x*) u4552@v*)) u454f@u454d u454e@u454b)))) u4540@ls/false) ((lambda (u4556@t) ((lambda (u4558@ls/false) (if u4558@ls/false (apply (lambda () (values '() '())) u4558@ls/false) ((lambda (u455a@t) ((lambda (u455c@ls/false) (if u455c@ls/false (apply (lambda () (u3239@syntax-violation '#f '"invalid library name" u4520@spec)) u455c@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u455a@t))) (u3148@syntax-dispatch u455a@t '_))) u4556@t))) (u3148@syntax-dispatch u4556@t '()))) u453e@t))) (u3148@syntax-dispatch u453e@t '(any . any)))) u4532@t))) (u3148@syntax-dispatch u4532@t '(each-any)))) u4530@x))) (call-with-values (lambda () (u4523@parse u4520@spec)) (lambda (u4528@u4525 u4529@u4527) ((lambda (u452c@ver* u452d@name*) (begin (if (null? u452d@name*) (u3239@syntax-violation '#f '"empty library name" u4520@spec) (void)) (values u452d@name* u452c@ver*))) u4529@u4527 u4528@u4525))))) '#f))) (set! u31af@parse-library (lambda (u455e@e) ((lambda (u4560@t) ((lambda (u4562@ls/false) (if (and u4562@ls/false (apply (lambda (u4564@library u4565@name* u4566@export u4567@exp* u4568@import u4569@imp* u456a@b*) (and (eq? (u323f@syntax->datum u4566@export) 'export) (eq? (u323f@syntax->datum u4568@import) 'import) (eq? (u323f@syntax->datum u4564@library) 'library))) u4562@ls/false)) (apply (lambda (u4572@library u4573@name* u4574@export u4575@exp* u4576@import u4577@imp* u4578@b*) (values u4573@name* u4575@exp* u4577@imp* u4578@b*)) u4562@ls/false) ((lambda (u4580@t) ((lambda (u4582@ls/false) (if u4582@ls/false (apply (lambda () (u3239@syntax-violation '#f '"malformed library" u455e@e)) u4582@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u4580@t))) (u3148@syntax-dispatch u4580@t '_))) u4560@t))) (u3148@syntax-dispatch u4560@t '(any each-any (any . each-any) (any . each-any) . each-any)))) u455e@e))) (set! u31b1@parse-import-spec* (lambda (u4584@imp*) ((lambda (u4587@idsyn? u4589@dup-error u458b@merge-substs u458d@exclude* u458f@find* u4591@rem* u4593@remove-dups u4595@parse-library-name u4597@import-library u4599@get-import u459b@add-imports!) (begin (set! u4587@idsyn? (lambda (u478e@x) (symbol? (u323f@syntax->datum u478e@x)))) (set! u4589@dup-error (lambda (u478c@name) (u3239@syntax-violation 'import '"two imports with different bindings" u478c@name))) (set! u458b@merge-substs (lambda (u477a@s u477b@subst) ((lambda (u477f@insert-to-subst) (begin (set! u477f@insert-to-subst (lambda (u4780@a u4781@subst) ((lambda (u4784@name u4785@label) ((lambda (u4788@t) (if u4788@t ((lambda (u478a@x) (if (eq? (cdr u478a@x) u4785@label) u4781@subst ((lambda () (begin '#f (u4589@dup-error u4784@name)))))) u4788@t) ((lambda () (begin '#f (cons u4780@a u4781@subst)))))) (assq u4784@name u4781@subst))) (car u4780@a) (cdr u4780@a)))) (if (null? u477a@s) u477b@subst ((lambda () (begin '#f (u477f@insert-to-subst (car u477a@s) (u458b@merge-substs (cdr u477a@s) u477b@subst)))))))) '#f))) (set! u458d@exclude* (lambda (u474a@sym* u474b@subst) ((lambda (u474f@exclude) (begin (set! u474f@exclude (lambda (u4768@sym u4769@subst) (if (null? u4769@subst) (u3239@syntax-violation 'import '"cannot rename unbound identifier" u4768@sym) (if (eq? u4768@sym (caar u4769@subst)) (values (cdar u4769@subst) (cdr u4769@subst)) ((lambda () (begin '#f ((lambda (u476c@a) (call-with-values (lambda () (u474f@exclude u4768@sym (cdr u4769@subst))) (lambda (u4772@u476f u4773@u4771) ((lambda (u4776@subst u4777@old) (values u4777@old (cons u476c@a u4776@subst))) u4773@u4771 u4772@u476f)))) (car u4769@subst))))))))) (if (null? u474a@sym*) (values '() u474b@subst) ((lambda () (begin '#f (call-with-values (lambda () (u474f@exclude (car u474a@sym*) u474b@subst)) (lambda (u4754@u4751 u4755@u4753) ((lambda (u4758@subst u4759@old) (call-with-values (lambda () (u458d@exclude* (cdr u474a@sym*) u4758@subst)) (lambda (u4760@u475d u4761@u475f) ((lambda (u4764@subst u4765@old*) (values (cons u4759@old u4765@old*) u4764@subst)) u4761@u475f u4760@u475d)))) u4755@u4753 u4754@u4751))))))))) '#f))) (set! u458f@find* (lambda (u4742@sym* u4743@subst) (map (lambda (u4746@x) ((lambda (u4748@t) (if u4748@t (cdr u4748@t) ((lambda () (begin '#f (u3239@syntax-violation 'import '"cannot find identifier" u4746@x)))))) (assq u4746@x u4743@subst))) u4742@sym*))) (set! u4591@rem* (lambda (u473a@sym* u473b@subst) ((letrec ((u473e@f (lambda (u4740@subst) (if (null? u4740@subst) '() (if (memq (caar u4740@subst) u473a@sym*) (u473e@f (cdr u4740@subst)) ((lambda () (begin '#f (cons (car u4740@subst) (u473e@f (cdr u4740@subst))))))))))) u473e@f) u473b@subst))) (set! u4593@remove-dups (lambda (u4738@ls) (if (null? u4738@ls) '() (if (memq (car u4738@ls) (cdr u4738@ls)) (u4593@remove-dups (cdr u4738@ls)) ((lambda () (begin '#f (cons (car u4738@ls) (u4593@remove-dups (cdr u4738@ls)))))))))) (set! u4595@parse-library-name (lambda (u4650@spec) ((lambda (u4653@subversion? u4655@subversion-pred u4657@version-pred) (begin (set! u4653@subversion? (lambda (u4734@x) ((lambda (u4736@x) (and (integer? u4736@x) (exact? u4736@x) (>= u4736@x '0))) (u323f@syntax->datum u4734@x)))) (set! u4655@subversion-pred (lambda (u46d4@x*) ((lambda (u46d6@t) ((lambda (u46d8@ls/false) (if (and u46d8@ls/false (apply (lambda (u46da@n) (u4653@subversion? u46da@n)) u46d8@ls/false)) (apply (lambda (u46dc@n) (lambda (u46de@x) (= u46de@x (u323f@syntax->datum u46dc@n)))) u46d8@ls/false) ((lambda (u46e0@t) ((lambda (u46e2@ls/false) (if (and u46e2@ls/false (apply (lambda (u46e4@p? u46e5@sub*) (eq? (u323f@syntax->datum u46e4@p?) 'and)) u46e2@ls/false)) (apply (lambda (u46e8@p? u46e9@sub*) ((lambda (u46ec@p*) (lambda (u46ee@x) (for-all (lambda (u46f0@p) (u46f0@p u46ee@x)) u46ec@p*))) (map u4655@subversion-pred u46e9@sub*))) u46e2@ls/false) ((lambda (u46f2@t) ((lambda (u46f4@ls/false) (if (and u46f4@ls/false (apply (lambda (u46f6@p? u46f7@sub*) (eq? (u323f@syntax->datum u46f6@p?) 'or)) u46f4@ls/false)) (apply (lambda (u46fa@p? u46fb@sub*) ((lambda (u46fe@p*) (lambda (u4700@x) (exists (lambda (u4702@p) (u4702@p u4700@x)) u46fe@p*))) (map u4655@subversion-pred u46fb@sub*))) u46f4@ls/false) ((lambda (u4704@t) ((lambda (u4706@ls/false) (if (and u4706@ls/false (apply (lambda (u4708@p? u4709@sub) (eq? (u323f@syntax->datum u4708@p?) 'not)) u4706@ls/false)) (apply (lambda (u470c@p? u470d@sub) ((lambda (u4710@p) (lambda (u4712@x) (not (u4710@p u4712@x)))) (u4655@subversion-pred u470d@sub))) u4706@ls/false) ((lambda (u4714@t) ((lambda (u4716@ls/false) (if (and u4716@ls/false (apply (lambda (u4718@p? u4719@n) (and (eq? (u323f@syntax->datum u4718@p?) '<=) (u4653@subversion? u4719@n))) u4716@ls/false)) (apply (lambda (u471c@p? u471d@n) (lambda (u4720@x) (<= u4720@x (u323f@syntax->datum u471d@n)))) u4716@ls/false) ((lambda (u4722@t) ((lambda (u4724@ls/false) (if (and u4724@ls/false (apply (lambda (u4726@p? u4727@n) (and (eq? (u323f@syntax->datum u4726@p?) '>=) (u4653@subversion? u4727@n))) u4724@ls/false)) (apply (lambda (u472a@p? u472b@n) (lambda (u472e@x) (>= u472e@x (u323f@syntax->datum u472b@n)))) u4724@ls/false) ((lambda (u4730@t) ((lambda (u4732@ls/false) (if u4732@ls/false (apply (lambda () (u3239@syntax-violation 'import '"invalid sub-version spec" u4650@spec u46d4@x*)) u4732@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u4730@t))) (u3148@syntax-dispatch u4730@t '_))) u4722@t))) (u3148@syntax-dispatch u4722@t '(any any)))) u4714@t))) (u3148@syntax-dispatch u4714@t '(any any)))) u4704@t))) (u3148@syntax-dispatch u4704@t '(any any)))) u46f2@t))) (u3148@syntax-dispatch u46f2@t '(any . each-any)))) u46e0@t))) (u3148@syntax-dispatch u46e0@t '(any . each-any)))) u46d6@t))) (u3148@syntax-dispatch u46d6@t 'any))) u46d4@x*))) (set! u4657@version-pred (lambda (u4684@x*) ((lambda (u4686@t) ((lambda (u4688@ls/false) (if u4688@ls/false (apply (lambda () (lambda (u468a@x) '#t)) u4688@ls/false) ((lambda (u468c@t) ((lambda (u468e@ls/false) (if (and u468e@ls/false (apply (lambda (u4690@c u4691@ver*) (eq? (u323f@syntax->datum u4690@c) 'and)) u468e@ls/false)) (apply (lambda (u4694@c u4695@ver*) ((lambda (u4698@p*) (lambda (u469a@x) (for-all (lambda (u469c@p) (u469c@p u469a@x)) u4698@p*))) (map u4657@version-pred u4695@ver*))) u468e@ls/false) ((lambda (u469e@t) ((lambda (u46a0@ls/false) (if (and u46a0@ls/false (apply (lambda (u46a2@c u46a3@ver*) (eq? (u323f@syntax->datum u46a2@c) 'or)) u46a0@ls/false)) (apply (lambda (u46a6@c u46a7@ver*) ((lambda (u46aa@p*) (lambda (u46ac@x) (exists (lambda (u46ae@p) (u46ae@p u46ac@x)) u46aa@p*))) (map u4657@version-pred u46a7@ver*))) u46a0@ls/false) ((lambda (u46b0@t) ((lambda (u46b2@ls/false) (if (and u46b2@ls/false (apply (lambda (u46b4@c u46b5@ver) (eq? (u323f@syntax->datum u46b4@c) 'not)) u46b2@ls/false)) (apply (lambda (u46b8@c u46b9@ver) ((lambda (u46bc@p) (lambda (u46be@x) (not (u46bc@p u46be@x)))) (u4657@version-pred u46b9@ver))) u46b2@ls/false) ((lambda (u46c0@t) ((lambda (u46c2@ls/false) (if u46c2@ls/false (apply (lambda (u46c4@sub*) ((lambda (u46c6@p*) (lambda (u46c8@x) ((letrec ((u46ca@f (lambda (u46cc@p* u46cd@x) (if (null? u46cc@p*) '#t (if (null? u46cd@x) '#f ((lambda () (begin '#f (and ((car u46cc@p*) (car u46cd@x)) (u46ca@f (cdr u46cc@p*) (cdr u46cd@x))))))))))) u46ca@f) u46c6@p* u46c8@x))) (map u4655@subversion-pred u46c4@sub*))) u46c2@ls/false) ((lambda (u46d0@t) ((lambda (u46d2@ls/false) (if u46d2@ls/false (apply (lambda () (u3239@syntax-violation 'import '"invalid version spec" u4650@spec u4684@x*)) u46d2@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u46d0@t))) (u3148@syntax-dispatch u46d0@t '_))) u46c0@t))) (u3148@syntax-dispatch u46c0@t 'each-any))) u46b0@t))) (u3148@syntax-dispatch u46b0@t '(any any)))) u469e@t))) (u3148@syntax-dispatch u469e@t '(any . each-any)))) u468c@t))) (u3148@syntax-dispatch u468c@t '(any . each-any)))) u4686@t))) (u3148@syntax-dispatch u4686@t '()))) u4684@x*))) ((letrec ((u4658@f (lambda (u465a@x) ((lambda (u465c@t) ((lambda (u465e@ls/false) (if u465e@ls/false (apply (lambda (u4660@version-spec*) (values '() (u4657@version-pred u4660@version-spec*))) u465e@ls/false) ((lambda (u4662@t) ((lambda (u4664@ls/false) (if (and u4664@ls/false (apply (lambda (u4666@x u4667@x*) (u4587@idsyn? u4666@x)) u4664@ls/false)) (apply (lambda (u466a@x u466b@x*) (call-with-values (lambda () (u4658@f u466b@x*)) (lambda (u4672@u466f u4673@u4671) ((lambda (u4676@pred u4677@name) (values (cons (u323f@syntax->datum u466a@x) u4677@name) u4676@pred)) u4673@u4671 u4672@u466f)))) u4664@ls/false) ((lambda (u467a@t) ((lambda (u467c@ls/false) (if u467c@ls/false (apply (lambda () (values '() (lambda (u467e@x) '#t))) u467c@ls/false) ((lambda (u4680@t) ((lambda (u4682@ls/false) (if u4682@ls/false (apply (lambda () (u3239@syntax-violation '#f '"invalid import spec" u4650@spec)) u4682@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u4680@t))) (u3148@syntax-dispatch u4680@t '_))) u467a@t))) (u3148@syntax-dispatch u467a@t '()))) u4662@t))) (u3148@syntax-dispatch u4662@t '(any . any)))) u465c@t))) (u3148@syntax-dispatch u465c@t '(each-any)))) u465a@x)))) u4658@f) u4650@spec))) '#f '#f '#f))) (set! u4597@import-library (lambda (u4640@spec*) (call-with-values (lambda () (u4595@parse-library-name u4640@spec*)) (lambda (u4646@u4643 u4647@u4645) ((lambda (u464a@pred u464b@name) (begin (if (null? u464b@name) (u3239@syntax-violation 'import '"empty library name" u4640@spec*) (void)) ((lambda (u464e@lib) (begin (if (not u464e@lib) (u3239@syntax-violation 'import '"cannot find library with required name" u464b@name) (void)) (if (not (u464a@pred (u2d43@u2b8f@library-version u464e@lib))) (u3239@syntax-violation 'import '"library does not satisfy version specification" u4640@spec* u464e@lib) (void)) ((u31bb@imp-collector) u464e@lib) (u2d47@u2b97@library-subst u464e@lib))) (u2d6f@u2be7@find-library-by-name u464b@name)))) u4647@u4645 u4646@u4643))))) (set! u4599@get-import (lambda (u45b2@spec) ((lambda (u45b4@t) ((lambda (u45b6@ls/false) (if (and u45b6@ls/false (apply (lambda (u45b8@x u45b9@x*) (not (memq (u323f@syntax->datum u45b8@x) '(for rename except only prefix library)))) u45b6@ls/false)) (apply (lambda (u45bc@x u45bd@x*) (u4597@import-library (cons u45bc@x u45bd@x*))) u45b6@ls/false) ((lambda (u45c0@t) ((lambda (u45c2@ls/false) (if (and u45c2@ls/false (apply (lambda (u45c4@rename u45c5@isp u45c6@old* u45c7@new*) (and (eq? (u323f@syntax->datum u45c4@rename) 'rename) (for-all u4587@idsyn? u45c6@old*) (for-all u4587@idsyn? u45c7@new*))) u45c2@ls/false)) (apply (lambda (u45cc@rename u45cd@isp u45ce@old* u45cf@new*) ((lambda (u45d4@subst u45d5@old* u45d6@new*) ((lambda (u45da@old-label*) ((lambda (u45dc@subst) (u458b@merge-substs (map cons u45d6@new* u45da@old-label*) u45dc@subst)) (u4591@rem* u45d5@old* u45d4@subst))) (u458f@find* u45d5@old* u45d4@subst))) (u4599@get-import u45cd@isp) (map u323f@syntax->datum u45ce@old*) (map u323f@syntax->datum u45cf@new*))) u45c2@ls/false) ((lambda (u45de@t) ((lambda (u45e0@ls/false) (if (and u45e0@ls/false (apply (lambda (u45e2@except u45e3@isp u45e4@sym*) (and (eq? (u323f@syntax->datum u45e2@except) 'except) (for-all u4587@idsyn? u45e4@sym*))) u45e0@ls/false)) (apply (lambda (u45e8@except u45e9@isp u45ea@sym*) ((lambda (u45ee@subst) (u4591@rem* (map u323f@syntax->datum u45ea@sym*) u45ee@subst)) (u4599@get-import u45e9@isp))) u45e0@ls/false) ((lambda (u45f0@t) ((lambda (u45f2@ls/false) (if (and u45f2@ls/false (apply (lambda (u45f4@only u45f5@isp u45f6@sym*) (and (eq? (u323f@syntax->datum u45f4@only) 'only) (for-all u4587@idsyn? u45f6@sym*))) u45f2@ls/false)) (apply (lambda (u45fa@only u45fb@isp u45fc@sym*) ((lambda (u4600@subst u4601@sym*) ((lambda (u4604@sym*) ((lambda (u4606@lab*) (map cons u4604@sym* u4606@lab*)) (u458f@find* u4604@sym* u4600@subst))) (u4593@remove-dups u4601@sym*))) (u4599@get-import u45fb@isp) (map u323f@syntax->datum u45fc@sym*))) u45f2@ls/false) ((lambda (u4608@t) ((lambda (u460a@ls/false) (if (and u460a@ls/false (apply (lambda (u460c@prefix u460d@isp u460e@p) (and (eq? (u323f@syntax->datum u460c@prefix) 'prefix) (u4587@idsyn? u460e@p))) u460a@ls/false)) (apply (lambda (u4612@prefix u4613@isp u4614@p) ((lambda (u4618@subst u4619@prefix) (map (lambda (u461c@x) (cons (string->symbol (string-append u4619@prefix (symbol->string (car u461c@x)))) (cdr u461c@x))) u4618@subst)) (u4599@get-import u4613@isp) (symbol->string (u323f@syntax->datum u4614@p)))) u460a@ls/false) ((lambda (u461e@t) ((lambda (u4620@ls/false) (if (and u4620@ls/false (apply (lambda (u4622@library u4623@spec*) (eq? (u323f@syntax->datum u4622@library) 'library)) u4620@ls/false)) (apply (lambda (u4626@library u4627@spec*) (u4597@import-library u4627@spec*)) u4620@ls/false) ((lambda (u462a@t) ((lambda (u462c@ls/false) (if (and u462c@ls/false (apply (lambda (u462e@for u462f@isp u4630@rest) (eq? (u323f@syntax->datum u462e@for) 'for)) u462c@ls/false)) (apply (lambda (u4634@for u4635@isp u4636@rest) (u4599@get-import u4635@isp)) u462c@ls/false) ((lambda (u463a@t) ((lambda (u463c@ls/false) (if u463c@ls/false (apply (lambda (u463e@spec) (u3239@syntax-violation 'import '"invalid import spec" u463e@spec)) u463c@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u463a@t))) (u3148@syntax-dispatch u463a@t 'any))) u462a@t))) (u3148@syntax-dispatch u462a@t '(any any . any)))) u461e@t))) (u3148@syntax-dispatch u461e@t '(any each-any)))) u4608@t))) (u3148@syntax-dispatch u4608@t '(any any any)))) u45f0@t))) (u3148@syntax-dispatch u45f0@t '(any any . each-any)))) u45de@t))) (u3148@syntax-dispatch u45de@t '(any any . each-any)))) u45c0@t))) (u3148@syntax-dispatch u45c0@t '(any any . #(each (any any)))))) u45b4@t))) (u3148@syntax-dispatch u45b4@t '(any . each-any)))) u45b2@spec))) (set! u459b@add-imports! (lambda (u45a2@imp u45a3@h) ((lambda (u45a6@subst) (for-each (lambda (u45a8@x) ((lambda (u45aa@name u45ab@label) ((lambda (u45ae@t) (if u45ae@t ((lambda (u45b0@l) (if (not (eq? u45b0@l u45ab@label)) (u4589@dup-error u45aa@name) (void))) u45ae@t) ((lambda () (begin '#f (hashtable-set! u45a3@h u45aa@name u45ab@label)))))) (hashtable-ref u45a3@h u45aa@name '#f))) (car u45a8@x) (cdr u45a8@x))) u45a6@subst)) (u4599@get-import u45a2@imp)))) ((letrec ((u459c@f (lambda (u459e@imp* u459f@h) (if (null? u459e@imp*) (hashtable-entries u459f@h) ((lambda () (begin '#f (u459b@add-imports! (car u459e@imp*) u459f@h) (u459c@f (cdr u459e@imp*) u459f@h)))))))) u459c@f) u4584@imp* (make-eq-hashtable)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! u31b3@make-top-rib (lambda (u4790@names u4791@labels) ((lambda (u4794@rib) (begin (vector-for-each (lambda (u4796@name u4797@label) (begin (if (not (symbol? u4796@name)) (error 'make-top-rib '"BUG: not a symbol" u4796@name) (void)) (u2ef4@extend-rib! u4794@rib (u2f0b@make-stx u4796@name u2ec1@top-mark* '() '()) u4797@label '#t))) u4790@names u4791@labels) u4794@rib)) (u2ef0@make-empty-rib)))) (set! u31b5@make-collector (lambda () ((lambda (u479a@ls) (lambda u479e ((lambda (u479f) (if (= u479f '0) (apply (lambda () u479a@ls) u479e) (if (= u479f '1) (apply (lambda (u479c@x) (if (not (eq? u479c@x '*interaction*)) (set! u479a@ls (u2eba@set-cons u479c@x u479a@ls)) (void))) u479e) (error 'apply '"invalid arg count")))) (length u479e)))) '()))) (set! u31b7@inv-collector (u2ad0@u299d@make-parameter (lambda u47a0@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (u47a2@x) (begin (if (not (procedure? u47a2@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" u47a2@x) (void)) u47a2@x)))) (set! u31b9@vis-collector (u2ad0@u299d@make-parameter (lambda u47a4@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (u47a6@x) (begin (if (not (procedure? u47a6@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" u47a6@x) (void)) u47a6@x)))) (set! u31bb@imp-collector (u2ad0@u299d@make-parameter (lambda u47a8@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (u47aa@x) (begin (if (not (procedure? u47aa@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" u47aa@x) (void)) u47aa@x)))) (set! u31bd@chi-library-internal (lambda (u47ac@e* u47ad@rib u47ae@mix?) (call-with-values (lambda () (u31a7@chi-body* u47ac@e* '() '() '() '() '() '() '() u47ad@rib u47ae@mix? '#t)) (lambda (u47c2@u47b3 u47c3@u47b5 u47c4@u47b7 u47c5@u47b9 u47c6@u47bb u47c7@u47bd u47c8@u47bf u47c9@u47c1) ((lambda (u47d2@exp* u47d3@_kwd* u47d4@mod** u47d5@rhs* u47d6@lex* u47d7@mr u47d8@r u47d9@e*) (values (append (apply append (reverse u47d4@mod**)) u47d9@e*) u47d8@r u47d7@mr (reverse u47d6@lex*) (reverse u47d5@rhs*) u47d2@exp*)) u47c9@u47c1 u47c8@u47bf u47c7@u47bd u47c6@u47bb u47c5@u47b9 u47c4@u47b7 u47c3@u47b5 u47c2@u47b3))))) (set! u31bf@chi-interaction-expr (lambda (u47e2@e u47e3@rib u47e4@r) (call-with-values (lambda () (u31a7@chi-body* (list u47e2@e) u47e4@r u47e4@r '() '() '() '() '() u47e3@rib '#t '#f)) (lambda (u47f8@u47e9 u47f9@u47eb u47fa@u47ed u47fb@u47ef u47fc@u47f1 u47fd@u47f3 u47fe@u47f5 u47ff@u47f7) ((lambda (u4808@_exp* u4809@_kwd* u480a@mod** u480b@rhs* u480c@lex* u480d@mr u480e@r u480f@e*) ((lambda (u4818@e*) ((lambda (u481a@e) (values u481a@e u480e@r)) (if (null? u4818@e*) (u2ea9@u2e02@build-void) (if (null? (cdr u4818@e*)) (car u4818@e*) ((lambda () (begin '#f (u2ea8@u2e00@build-sequence '#f u4818@e*)))))))) (u317a@expand-interaction-rhs*/init* (reverse u480c@lex*) (reverse u480b@rhs*) (append (apply append (reverse u480a@mod**)) u480f@e*) u480e@r u480d@mr))) u47ff@u47f7 u47fe@u47f5 u47fd@u47f3 u47fc@u47f1 u47fb@u47ef u47fa@u47ed u47f9@u47eb u47f8@u47e9))))) (set! u31c1@library-body-expander (lambda (u481c@main-exp* u481d@imp* u481e@b* u481f@mix?) ((lambda (u4825@itc) (begin (set! u4825@itc (u31b5@make-collector)) ((lambda (u482e@u4827 u482f@u4829 u4830@u482b u4831@u482d) ((lambda (u4836@swap) (dynamic-wind u4836@swap (lambda () (call-with-values (lambda () (u31b1@parse-import-spec* u481d@imp*)) (lambda (u483c@u4839 u483d@u483b) ((lambda (u4840@subst-labels u4841@subst-names) ((lambda (u4844@rib) ((lambda (u4847@wrap) (begin (set! u4847@wrap (lambda (u48c0@x) (u2f0b@make-stx u48c0@x u2ec1@top-mark* (list u4844@rib) '()))) ((lambda (u4848@b* u4849@rtc u484a@vtc) ((lambda (u4856@u484f u4857@u4851 u4858@u4853 u4859@u4855) ((lambda (u485e@swap) (dynamic-wind u485e@swap (lambda () (call-with-values (lambda () (u31bd@chi-library-internal u4848@b* u4844@rib u481f@mix?)) (lambda (u486c@u4861 u486d@u4863 u486e@u4865 u486f@u4867 u4870@u4869 u4871@u486b) ((lambda (u4878@internal-exp* u4879@rhs* u487a@lex* u487b@mr u487c@r u487d@init*) (call-with-values (lambda () (u31ab@parse-exports (if (eq? u481c@main-exp* 'all) (map u4847@wrap (u2ef2@top-marked-symbols u4844@rib)) (append (map u4847@wrap u481c@main-exp*) u4878@internal-exp*)))) (lambda (u4888@u4885 u4889@u4887) ((lambda (u488c@exp-id* u488d@exp-name*) (begin (u2ef6@seal-rib! u4844@rib) ((lambda (u4890@init*) ((lambda (u4892@rhs*) ((lambda () (begin (u2ef8@unseal-rib! u4844@rib) ((lambda (u4894@loc* u4895@export-subst) ((lambda (u4899@errstr) (begin (set! u4899@errstr '"attempt to export mutated variable") (call-with-values (lambda () (u3221@make-export-env/macros u487a@lex* u4894@loc* u487c@r)) (lambda (u48a0@u489b u48a1@u489d u48a2@u489f) ((lambda (u48a6@macro* u48a7@global* u48a8@export-env) (begin (if (not (eq? u481c@main-exp* 'all)) (for-each (lambda (u48ac@s) ((lambda (u48ae@name u48af@label) ((lambda (u48b2@p) (if u48b2@p ((lambda (u48b4@b) ((lambda (u48b6@type) (if (eq? u48b6@type 'mutable) (u3239@syntax-violation 'export u4899@errstr u48ae@name) (void))) (car u48b4@b))) (cdr u48b2@p)) (void))) (assq u48af@label u48a8@export-env))) (car u48ac@s) (cdr u48ac@s))) u4895@export-subst) (void)) ((lambda (u48b8@invoke-body u48b9@invoke-definitions) (values (u4825@itc) (u4849@rtc) (u484a@vtc) (u2ea8@u2e00@build-sequence '#f (append u48b9@invoke-definitions (list u48b8@invoke-body))) u48a6@macro* u4895@export-subst u48a8@export-env)) (u2eac@u2e08@build-library-letrec* '#f u481f@mix? u487a@lex* u4894@loc* u4892@rhs* (if (null? u4890@init*) (u2ea9@u2e02@build-void) (u2ea8@u2e00@build-sequence '#f u4890@init*))) (map u2ea3@u2d7e@build-global-define (map cdr u48a7@global*))))) u48a2@u489f u48a1@u489d u48a0@u489b))))) '#f)) (map u2ec7@gen-global u487a@lex*) (u321f@make-export-subst u488d@exp-name* u488c@exp-id*)))))) (u317c@chi-rhs* u4879@rhs* u487c@r u487b@mr))) (u3168@chi-expr* u487d@init* u487c@r u487b@mr)))) u4889@u4887 u4888@u4885)))) u4871@u486b u4870@u4869 u486f@u4867 u486e@u4865 u486d@u4863 u486c@u4861)))) u485e@swap)) (lambda () (begin ((lambda (u48bc@t) (begin (u4856@u484f u4858@u4853) (set! u4858@u4853 u48bc@t))) (u4856@u484f)) ((lambda (u48be@t) (begin (u4857@u4851 u4859@u4855) (set! u4859@u4855 u48be@t))) (u4857@u4851)))))) u31b7@inv-collector u31b9@vis-collector u4849@rtc u484a@vtc)) (map u4847@wrap u481e@b*) (u31b5@make-collector) (u31b5@make-collector)))) '#f)) (u31b3@make-top-rib u4841@subst-names u4840@subst-labels))) u483d@u483b u483c@u4839)))) u4836@swap)) (lambda () (begin ((lambda (u48c2@t) (begin (u482e@u4827 u4830@u482b) (set! u4830@u482b u48c2@t))) (u482e@u4827)) ((lambda (u48c4@t) (begin (u482f@u4829 u4831@u482d) (set! u4831@u482d u48c4@t))) (u482f@u4829)))))) u31bb@imp-collector u324b@top-level-context u4825@itc '#f))) '#f))) (set! u31c3@stale-when-collector (u2ad0@u299d@make-parameter '#f)) (set! u31c5@make-stale-collector (lambda () ((lambda (u48c6@code u48c7@req*) (lambda u48ce ((lambda (u48cf) (if (= u48cf '0) (apply (lambda () (values u48c6@code u48c7@req*)) u48ce) (if (= u48cf '2) (apply (lambda (u48ca@c u48cb@r*) (begin (set! u48c6@code (list 'if u48c6@code (list 'quote '#t) u48ca@c)) (set! u48c7@req* (u2ebc@set-union u48cb@r* u48c7@req*)))) u48ce) (error 'apply '"invalid arg count")))) (length u48ce)))) (list 'quote '#f) '()))) (set! u31c7@handle-stale-when (lambda (u48d0@guard-expr u48d1@mr) ((lambda (u48d4@stc) ((lambda (u48d6@core-expr) ((lambda (u48d8@t) (if u48d8@t ((lambda (u48da@c) (u48da@c u48d6@core-expr (u48d4@stc))) u48d8@t) (void))) (u31c3@stale-when-collector))) ((lambda (u48e0@u48dd u48e1@u48df) ((lambda (u48e4@swap) (dynamic-wind u48e4@swap (lambda () (u316c@chi-expr u48d0@guard-expr u48d1@mr u48d1@mr)) u48e4@swap)) (lambda () ((lambda (u48e6@t) (begin (u48e0@u48dd u48e1@u48df) (set! u48e1@u48df u48e6@t))) (u48e0@u48dd))))) u31b7@inv-collector u48d4@stc))) (u31b5@make-collector)))) (set! u31c9@core-library-expander (lambda (u48e8@e u48e9@verify-name) (call-with-values (lambda () (u31af@parse-library u48e8@e)) (lambda (u48f4@u48ed u48f5@u48ef u48f6@u48f1 u48f7@u48f3) ((lambda (u48fc@b* u48fd@imp* u48fe@exp* u48ff@name*) (call-with-values (lambda () (u31ad@parse-library-name u48ff@name*)) (lambda (u4908@u4905 u4909@u4907) ((lambda (u490c@ver u490d@name) (begin (u48e9@verify-name u490d@name) ((lambda (u4910@c) (call-with-values (lambda () ((lambda (u4924@u4921 u4925@u4923) ((lambda (u4928@swap) (dynamic-wind u4928@swap (lambda () (u31c1@library-body-expander u48fe@exp* u48fd@imp* u48fc@b* '#f)) u4928@swap)) (lambda () ((lambda (u492a@t) (begin (u4924@u4921 u4925@u4923) (set! u4925@u4923 u492a@t))) (u4924@u4921))))) u31c3@stale-when-collector u4910@c)) (lambda (u492c@u4913 u492d@u4915 u492e@u4917 u492f@u4919 u4930@u491b u4931@u491d u4932@u491f) ((lambda (u493a@export-env u493b@export-subst u493c@visit-code u493d@invoke-code u493e@visit-req* u493f@invoke-req* u4940@imp*) (call-with-values (lambda () (u4910@c)) (lambda (u494c@u4949 u494d@u494b) ((lambda (u4950@guard-req* u4951@guard-code) (values u490d@name u490c@ver u4940@imp* u493f@invoke-req* u493e@visit-req* u493d@invoke-code u493c@visit-code u493b@export-subst u493a@export-env u4951@guard-code u4950@guard-req*)) u494d@u494b u494c@u4949)))) u4932@u491f u4931@u491d u4930@u491b u492f@u4919 u492e@u4917 u492d@u4915 u492c@u4913)))) (u31c5@make-stale-collector)))) u4909@u4907 u4908@u4905)))) u48f7@u48f3 u48f6@u48f1 u48f5@u48ef u48f4@u48ed))))) (set! u31cb@parse-top-level-program (lambda (u4954@e*) ((lambda (u4956@t) ((lambda (u4958@ls/false) (if (and u4958@ls/false (apply (lambda (u495a@import u495b@imp* u495c@b*) (eq? (u323f@syntax->datum u495a@import) 'import)) u4958@ls/false)) (apply (lambda (u4960@import u4961@imp* u4962@b*) (values u4961@imp* u4962@b*)) u4958@ls/false) ((lambda (u4966@t) ((lambda (u4968@ls/false) (if (and u4968@ls/false (apply (lambda (u496a@import u496b@x u496c@y) (eq? (u323f@syntax->datum u496a@import) 'import)) u4968@ls/false)) (apply (lambda (u4970@import u4971@x u4972@y) (u3239@syntax-violation 'expander '"invalid syntax of top-level program" (u2f3b@syntax-car u4954@e*))) u4968@ls/false) ((lambda (u4976@t) ((lambda (u4978@ls/false) (if u4978@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) u4978@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u4976@t))) (u3148@syntax-dispatch u4976@t '_))) u4966@t))) (u3148@syntax-dispatch u4966@t '((any . any) . any)))) u4956@t))) (u3148@syntax-dispatch u4956@t '((any . each-any) . each-any)))) u4954@e*))) (set! u31d1@u31cc (make-record-type-descriptor 'env '#f 'u31cf '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! u31d3@u31ce '#f) (set! u31d5@u31cd (make-record-constructor-descriptor u31d1@u31cc '#f u31d3@u31ce)) (set! u31d8@env? (record-predicate u31d1@u31cc)) (set! u31da@make-env (record-constructor u31d5@u31cd)) (set! u31dc@env-names (record-accessor u31d1@u31cc '0)) (set! u31de@env-labels (record-accessor u31d1@u31cc '1)) (set! u31e0@env-itc (record-accessor u31d1@u31cc '2)) (set! u31e2@set-env-names! (record-mutator u31d1@u31cc '0)) (set! u31e4@set-env-labels! (record-mutator u31d1@u31cc '1)) (set! u31e6@set-env-itc! (record-mutator u31d1@u31cc '2)) (set! u31e8@rp (u2ab3@u295b@make-record-printer 'env (lambda (u497a@x u497b@p u497c@wr) (display '"#<environment>" u497b@p)))) (set! u31ee@u31e9 (make-record-type-descriptor 'interaction-env '#f 'u31ec '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! u31f0@u31eb '#f) (set! u31f2@u31ea (make-record-constructor-descriptor u31ee@u31e9 '#f u31f0@u31eb)) (set! u31f5@interaction-env? (record-predicate u31ee@u31e9)) (set! u31f7@make-interaction-env (record-constructor u31f2@u31ea)) (set! u31f9@interaction-env-rib (record-accessor u31ee@u31e9 '0)) (set! u31fb@interaction-env-r (record-accessor u31ee@u31e9 '1)) (set! u31fd@interaction-env-locs (record-accessor u31ee@u31e9 '2)) (set! u31ff@set-interaction-env-rib! (record-mutator u31ee@u31e9 '0)) (set! u3201@set-interaction-env-r! (record-mutator u31ee@u31e9 '1)) (set! u3203@set-interaction-env-locs! (record-mutator u31ee@u31e9 '2)) (set! u3205@rp (u2ab3@u295b@make-record-printer 'interaction-env (lambda (u4980@x u4981@p u4982@wr) (display '"#<environment>" u4981@p)))) (set! u3207@environment? (lambda (u4986@x) (or (u31d8@env? u4986@x) (u31f5@interaction-env? u4986@x)))) (set! u3209@environment-symbols (lambda (u4988@x) (if (u31d8@env? u4988@x) (vector->list (u31dc@env-names u4988@x)) (if (u31f5@interaction-env? u4988@x) (map values (u2ee0@rib-sym* (u31f9@interaction-env-rib u4988@x))) ((lambda () (begin '#f (assertion-violation 'environment-symbols '"not an environment" u4988@x)))))))) (set! u320b@environment (lambda u498a@imp* ((lambda (u498c@itc) ((lambda (u4992@u498f u4993@u4991) ((lambda (u4996@swap) (dynamic-wind u4996@swap (lambda () (call-with-values (lambda () (u31b1@parse-import-spec* u498a@imp*)) (lambda (u499c@u4999 u499d@u499b) ((lambda (u49a0@subst-labels u49a1@subst-names) (u31da@make-env u49a1@subst-names u49a0@subst-labels u498c@itc)) u499d@u499b u499c@u4999)))) u4996@swap)) (lambda () ((lambda (u49a4@t) (begin (u4992@u498f u4993@u4991) (set! u4993@u4991 u49a4@t))) (u4992@u498f))))) u31bb@imp-collector u498c@itc)) (u31b5@make-collector)))) (set! u320d@null-environment (lambda (u49a6@n) (begin (if (not (eqv? u49a6@n '5)) (assertion-violation 'null-environment '"not 5" u49a6@n) (void)) (u320b@environment '(psyntax null-environment-5))))) (set! u320f@scheme-report-environment (lambda (u49a8@n) (begin (if (not (eqv? u49a8@n '5)) (assertion-violation 'scheme-report-environment '"not 5" u49a8@n) (void)) (u320b@environment '(psyntax scheme-report-environment-5))))) (set! u3211@core-expand (lambda (u49aa@x u49ab@env) (if (u31d8@env? u49ab@env) ((lambda (u49ae@rib) ((lambda (u49b0@x u49b1@itc u49b2@rtc u49b3@vtc) ((lambda (u49b8@x) (begin (u2ef6@seal-rib! u49ae@rib) (values u49b8@x (u49b2@rtc)))) ((lambda (u49ca@u49bb u49cb@u49bd u49cc@u49bf u49cd@u49c1 u49ce@u49c3 u49cf@u49c5 u49d0@u49c7 u49d1@u49c9) ((lambda (u49da@swap) (dynamic-wind u49da@swap (lambda () (u316c@chi-expr u49b0@x '() '())) u49da@swap)) (lambda () (begin ((lambda (u49dc@t) (begin (u49ca@u49bb u49ce@u49c3) (set! u49ce@u49c3 u49dc@t))) (u49ca@u49bb)) ((lambda (u49de@t) (begin (u49cb@u49bd u49cf@u49c5) (set! u49cf@u49c5 u49de@t))) (u49cb@u49bd)) ((lambda (u49e0@t) (begin (u49cc@u49bf u49d0@u49c7) (set! u49d0@u49c7 u49e0@t))) (u49cc@u49bf)) ((lambda (u49e2@t) (begin (u49cd@u49c1 u49d1@u49c9) (set! u49d1@u49c9 u49e2@t))) (u49cd@u49c1)))))) u324b@top-level-context u31b7@inv-collector u31b9@vis-collector u31bb@imp-collector '#f u49b2@rtc u49b3@vtc u49b1@itc))) (u2f0b@make-stx u49aa@x u2ec1@top-mark* (list u49ae@rib) '()) (u31e0@env-itc u49ab@env) (u31b5@make-collector) (u31b5@make-collector))) (u31b3@make-top-rib (u31dc@env-names u49ab@env) (u31de@env-labels u49ab@env))) (if (u31f5@interaction-env? u49ab@env) ((lambda (u49e4@rib u49e5@r u49e6@rtc) ((lambda (u49ea@x) (call-with-values (lambda () ((lambda (u4a00@u49f1 u4a01@u49f3 u4a02@u49f5 u4a03@u49f7 u4a04@u49f9 u4a05@u49fb u4a06@u49fd u4a07@u49ff) ((lambda (u4a10@swap) (dynamic-wind u4a10@swap (lambda () (u31bf@chi-interaction-expr u49ea@x u49e4@rib u49e5@r)) u4a10@swap)) (lambda () (begin ((lambda (u4a12@t) (begin (u4a00@u49f1 u4a04@u49f9) (set! u4a04@u49f9 u4a12@t))) (u4a00@u49f1)) ((lambda (u4a14@t) (begin (u4a01@u49f3 u4a05@u49fb) (set! u4a05@u49fb u4a14@t))) (u4a01@u49f3)) ((lambda (u4a16@t) (begin (u4a02@u49f5 u4a06@u49fd) (set! u4a06@u49fd u4a16@t))) (u4a02@u49f5)) ((lambda (u4a18@t) (begin (u4a03@u49f7 u4a07@u49ff) (set! u4a07@u49ff u4a18@t))) (u4a03@u49f7)))))) u324b@top-level-context u31b7@inv-collector u31b9@vis-collector u31bb@imp-collector u49ab@env u49e6@rtc (u31b5@make-collector) (u31b5@make-collector))) (lambda (u4a1a@u49ed u4a1b@u49ef) ((lambda (u4a1e@r^ u4a1f@e) (begin (u3201@set-interaction-env-r! u49ab@env u4a1e@r^) (values u4a1f@e (u49e6@rtc)))) u4a1b@u49ef u4a1a@u49ed)))) (u2f0b@make-stx u49aa@x u2ec1@top-mark* (list u49e4@rib) '()))) (u31f9@interaction-env-rib u49ab@env) (u31fb@interaction-env-r u49ab@env) (u31b5@make-collector)) ((lambda () (begin '#f (assertion-violation 'expand '"not an environment" u49ab@env)))))))) (set! u3213@eval (lambda (u4a22@x u4a23@env) (begin (if (not (u3207@environment? u4a23@env)) (error 'eval '"not an environment" u4a23@env) (void)) (call-with-values (lambda () (u3211@core-expand u4a22@x u4a23@env)) (lambda (u4a2a@u4a27 u4a2b@u4a29) ((lambda (u4a2e@invoke-req* u4a2f@x) (begin (for-each u2d77@u2bf7@invoke-library u4a2e@invoke-req*) (eval-core (u2b17@u2ad7@expanded->core u4a2f@x)))) u4a2b@u4a29 u4a2a@u4a27)))))) (set! u3215@initial-visit! (lambda (u4a32@macro*) (for-each (lambda (u4a34@x) ((lambda (u4a36@loc u4a37@proc) (set-symbol-value! u4a36@loc u4a37@proc)) (car u4a34@x) (cadr u4a34@x))) u4a32@macro*))) (set! u3217@library-expander (lambda u4aac ((lambda (u4aad) (if (= u4aad '3) (apply (lambda (u4a3a@x u4a3b@filename u4a3c@verify-name) ((lambda (u4a41@build-visit-code) (begin (set! u4a41@build-visit-code (lambda (u4a9a@macro*) (if (null? u4a9a@macro*) (u2ea9@u2e02@build-void) (u2ea8@u2e00@build-sequence '#f (map (lambda (u4a9c@x) ((lambda (u4a9e@loc u4a9f@src) (list 'set! u4a9e@loc u4a9f@src)) (car u4a9c@x) (cddr u4a9c@x))) u4a9a@macro*))))) (call-with-values (lambda () (u31c9@core-library-expander u4a3a@x u4a3c@verify-name)) (lambda (u4a58@u4a43 u4a59@u4a45 u4a5a@u4a47 u4a5b@u4a49 u4a5c@u4a4b u4a5d@u4a4d u4a5e@u4a4f u4a5f@u4a51 u4a60@u4a53 u4a61@u4a55 u4a62@u4a57) ((lambda (u4a6e@guard-req* u4a6f@guard-code u4a70@export-env u4a71@export-subst u4a72@macro* u4a73@invoke-code u4a74@vis* u4a75@inv* u4a76@imp* u4a77@ver u4a78@name) ((lambda (u4a84@id u4a85@name u4a86@ver u4a87@imp* u4a88@vis* u4a89@inv* u4a8a@guard-req* u4a8b@visit-proc u4a8c@invoke-proc u4a8d@visit-code u4a8e@invoke-code) (begin (u2d75@u2bf3@install-library u4a84@id u4a85@name u4a86@ver u4a87@imp* u4a88@vis* u4a89@inv* u4a71@export-subst u4a70@export-env u4a8b@visit-proc u4a8c@invoke-proc u4a8d@visit-code u4a8e@invoke-code u4a6f@guard-code u4a8a@guard-req* '#t u4a3b@filename) (values u4a84@id u4a85@name u4a86@ver u4a87@imp* u4a88@vis* u4a89@inv* u4a8e@invoke-code u4a8d@visit-code u4a71@export-subst u4a70@export-env u4a6f@guard-code u4a8a@guard-req*))) (gensym) u4a78@name u4a77@ver (map u2d7b@u2bff@library-spec u4a76@imp*) (map u2d7b@u2bff@library-spec u4a74@vis*) (map u2d7b@u2bff@library-spec u4a75@inv*) (map u2d7b@u2bff@library-spec u4a6e@guard-req*) (lambda () (u3215@initial-visit! u4a72@macro*)) (lambda () (eval-core (u2b17@u2ad7@expanded->core u4a73@invoke-code))) (u4a41@build-visit-code u4a72@macro*) u4a73@invoke-code)) u4a62@u4a57 u4a61@u4a55 u4a60@u4a53 u4a5f@u4a51 u4a5e@u4a4f u4a5d@u4a4d u4a5c@u4a4b u4a5b@u4a49 u4a5a@u4a47 u4a59@u4a45 u4a58@u4a43))))) '#f)) u4aac) (if (= u4aad '2) (apply (lambda (u4aa2@x u4aa3@filename) (u3217@library-expander u4aa2@x u4aa3@filename (lambda (u4aa6@x) (values)))) u4aac) (if (= u4aad '1) (apply (lambda (u4aa8@x) (u3217@library-expander u4aa8@x '#f (lambda (u4aaa@x) (values)))) u4aac) (error 'apply '"invalid arg count"))))) (length u4aac)))) (set! u3219@boot-library-expand (lambda (u4aae@x) (call-with-values (lambda () (u3217@library-expander u4aae@x)) (lambda (u4ac8@u4ab1 u4ac9@u4ab3 u4aca@u4ab5 u4acb@u4ab7 u4acc@u4ab9 u4acd@u4abb u4ace@u4abd u4acf@u4abf u4ad0@u4ac1 u4ad1@u4ac3 u4ad2@u4ac5 u4ad3@u4ac7) ((lambda (u4ae0@guard-dep* u4ae1@guard-code u4ae2@export-env u4ae3@export-subst u4ae4@visit-code u4ae5@invoke-code u4ae6@inv* u4ae7@vis* u4ae8@imp* u4ae9@ver u4aea@name u4aeb@id) (values u4aea@name u4ae5@invoke-code u4ae3@export-subst u4ae2@export-env)) u4ad3@u4ac7 u4ad2@u4ac5 u4ad1@u4ac3 u4ad0@u4ac1 u4acf@u4abf u4ace@u4abd u4acd@u4abb u4acc@u4ab9 u4acb@u4ab7 u4aca@u4ab5 u4ac9@u4ab3 u4ac8@u4ab1))))) (set! u321b@rev-map-append (lambda (u4af8@f u4af9@ls u4afa@ac) (if (null? u4af9@ls) u4afa@ac ((lambda () (begin '#f (u321b@rev-map-append u4af8@f (cdr u4af9@ls) (cons (u4af8@f (car u4af9@ls)) u4afa@ac)))))))) (set! u321d@build-exports (lambda (u4afe@lex*+loc* u4aff@init*) (u2ea8@u2e00@build-sequence '#f (cons (u2ea9@u2e02@build-void) (u321b@rev-map-append (lambda (u4b02@x) (list 'set! (cdr u4b02@x) (car u4b02@x))) u4afe@lex*+loc* u4aff@init*))))) (set! u321f@make-export-subst (lambda (u4b04@name* u4b05@id*) (map (lambda (u4b08@name u4b09@id) ((lambda (u4b0c@label) (begin (if (not u4b0c@label) (u3239@syntax-violation '#f '"cannot export unbound identifier" u4b09@id) (void)) (cons u4b08@name u4b0c@label))) (u2f5b@id->label u4b09@id))) u4b04@name* u4b05@id*))) (set! u3221@make-export-env/macros (lambda (u4b0e@lex* u4b0f@loc* u4b10@r) ((lambda (u4b15@lookup) (begin (set! u4b15@lookup (lambda (u4b34@x) ((letrec ((u4b36@f (lambda (u4b38@x u4b39@lex* u4b3a@loc*) (if (pair? u4b39@lex*) (if (eq? u4b38@x (car u4b39@lex*)) (car u4b3a@loc*) (u4b36@f u4b38@x (cdr u4b39@lex*) (cdr u4b3a@loc*))) ((lambda () (begin '#f (assertion-violation 'lookup-make-export '"BUG")))))))) u4b36@f) u4b34@x u4b0e@lex* u4b0f@loc*))) ((letrec ((u4b16@f (lambda (u4b18@r u4b19@env u4b1a@global* u4b1b@macro*) (if (null? u4b18@r) (values u4b19@env u4b1a@global* u4b1b@macro*) ((lambda () (begin '#f ((lambda (u4b20@x) ((lambda (u4b22@label u4b23@b) ((lambda (u4b26@t) (if (memv u4b26@t '(lexical)) ((lambda (u4b28@v) ((lambda (u4b2a@loc u4b2b@type) (u4b16@f (cdr u4b18@r) (cons (cons* u4b22@label u4b2b@type u4b2a@loc) u4b19@env) (cons (cons (u30d8@lexical-var u4b28@v) u4b2a@loc) u4b1a@global*) u4b1b@macro*)) (u4b15@lookup (u30d8@lexical-var u4b28@v)) (if (u30da@lexical-mutable? u4b28@v) 'mutable 'global))) (u2f63@binding-value u4b23@b)) (if (memv u4b26@t '(local-macro)) ((lambda (u4b2e@loc) (u4b16@f (cdr u4b18@r) (cons (cons* u4b22@label 'global-macro u4b2e@loc) u4b19@env) u4b1a@global* (cons (cons u4b2e@loc (u2f63@binding-value u4b23@b)) u4b1b@macro*))) (gensym)) (if (memv u4b26@t '(local-macro!)) ((lambda (u4b30@loc) (u4b16@f (cdr u4b18@r) (cons (cons* u4b22@label 'global-macro! u4b30@loc) u4b19@env) u4b1a@global* (cons (cons u4b30@loc (u2f63@binding-value u4b23@b)) u4b1b@macro*))) (gensym)) (if (memv u4b26@t '(local-ctv)) ((lambda (u4b32@loc) (u4b16@f (cdr u4b18@r) (cons (cons* u4b22@label 'global-ctv u4b32@loc) u4b19@env) u4b1a@global* (cons (cons u4b32@loc (u2f63@binding-value u4b23@b)) u4b1b@macro*))) (gensym)) (if (memv u4b26@t '($rtd $module)) (u4b16@f (cdr u4b18@r) (cons u4b20@x u4b19@env) u4b1a@global* u4b1b@macro*) ((lambda () (begin '#f (assertion-violation 'expander '"BUG: do not know how to export" (u2f61@binding-type u4b23@b) (u2f63@binding-value u4b23@b))))))))))) (u2f61@binding-type u4b23@b))) (car u4b20@x) (cdr u4b20@x))) (car u4b18@r))))))))) u4b16@f) u4b10@r '() '() '()))) '#f))) (set! u3223@generate-temporaries (lambda (u4b3e@ls) ((lambda (u4b40@t) ((lambda (u4b42@ls/false) (if u4b42@ls/false (apply (lambda (u4b44@ls) (map (lambda (u4b46@x) (u2f0b@make-stx ((lambda (u4b48@x) (if (or (symbol? u4b48@x) (string? u4b48@x)) (gensym u4b48@x) ((lambda () (begin '#f (gensym 't)))))) (u323f@syntax->datum u4b46@x)) u2ec1@top-mark* '() '())) u4b44@ls)) u4b42@ls/false) ((lambda (u4b4a@t) ((lambda (u4b4c@ls/false) (if u4b4c@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) u4b4c@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u4b4a@t))) (u3148@syntax-dispatch u4b4a@t '_))) u4b40@t))) (u3148@syntax-dispatch u4b40@t 'each-any))) u4b3e@ls))) (set! u3225@free-identifier=? (lambda (u4b4e@x u4b4f@y) (if (u2f41@id? u4b4e@x) (if (u2f41@id? u4b4f@y) (u2f49@free-id=? u4b4e@x u4b4f@y) (assertion-violation 'free-identifier=? '"not an identifier" u4b4f@y)) (assertion-violation 'free-identifier=? '"not an identifier" u4b4e@x)))) (set! u3227@bound-identifier=? (lambda (u4b52@x u4b53@y) (if (u2f41@id? u4b52@x) (if (u2f41@id? u4b53@y) (u2f47@bound-id=? u4b52@x u4b53@y) (assertion-violation 'bound-identifier=? '"not an identifier" u4b53@y)) (assertion-violation 'bound-identifier=? '"not an identifier" u4b52@x)))) (set! u3229@position->condition (lambda (u4b56@x) (if (pair? u4b56@x) (u2ab8@u296d@make-source-position-condition (car u4b56@x) (cdr u4b56@x)) (condition)))) (set! u322b@extract-position-condition (lambda (u4b58@x) (u3229@position->condition (u322d@expression-position u4b58@x)))) (set! u322d@expression-position (lambda (u4b5a@x) (and (u2f09@stx? u4b5a@x) ((lambda (u4b5c@x) (and (u2ac7@u298b@annotation? u4b5c@x) (u2ac8@u298d@annotation-source u4b5c@x))) (u2f0d@stx-expr u4b5a@x))))) (set! u322f@syntax-annotation (lambda (u4b5e@x) (if (u2f09@stx? u4b5e@x) (u2f0d@stx-expr u4b5e@x) u4b5e@x))) (set! u3231@assertion-error (lambda (u4b60@expr u4b61@pos) (raise (condition (u503c@u4e17@make-assertion-violation) (u504e@u4e49@make-who-condition 'assert) (u5012@u4daa@make-message-condition '"assertion failed") (u5044@u4e2e@make-irritants-condition (list u4b60@expr)) (u3229@position->condition u4b61@pos))))) (set! u3233@syntax-error (lambda (u4b64@x . u4b66@args) (begin (if (not (for-all string? u4b66@args)) (assertion-violation 'syntax-error '"invalid argument" u4b66@args) (void)) (raise (condition (u5012@u4daa@make-message-condition (if (null? u4b66@args) '"invalid syntax" (apply string-append u4b66@args))) (u5070@u4ea5@make-syntax-violation (u323f@syntax->datum u4b64@x) '#f) (u322b@extract-position-condition u4b64@x) (u3235@extract-trace u4b64@x)))))) (set! u3235@extract-trace (lambda (u4b68@x) ((lambda (u4b71@u4b6c u4b73@u4b6e u4b75@u4b6d u4b78@u4b6b u4b7a@make-trace u4b7c@u4b6a u4b7e@trace? u4b80@trace-form) (begin (set! u4b71@u4b6c (make-record-type-descriptor '&trace u500c@u4d53@&condition-rtd 'u4b6f '#f '#f '#((immutable form)))) (set! u4b73@u4b6e '#f) (set! u4b75@u4b6d (make-record-constructor-descriptor u4b71@u4b6c u500d@u4d55@&condition-rcd u4b73@u4b6e)) (set! u4b78@u4b6b (record-predicate u4b71@u4b6c)) (set! u4b7a@make-trace (record-constructor u4b75@u4b6d)) (set! u4b7c@u4b6a (record-accessor u4b71@u4b6c '0)) (set! u4b7e@trace? (condition-predicate u4b71@u4b6c)) (set! u4b80@trace-form (condition-accessor u4b71@u4b6c u4b7c@u4b6a)) ((letrec ((u4b81@f (lambda (u4b83@x) (if (u2f09@stx? u4b83@x) (apply condition (u4b7a@make-trace u4b83@x) (map u4b81@f (u2f13@stx-ae* u4b83@x))) (if (u2ac7@u298b@annotation? u4b83@x) (u4b7a@make-trace (u2f0b@make-stx u4b83@x '() '() '())) ((lambda () (begin '#f (condition))))))))) u4b81@f) u4b68@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! u3237@syntax-violation* (lambda (u4b85@who u4b86@msg u4b87@form u4b88@condition-object) (begin (if (not (string? u4b86@msg)) (assertion-violation 'syntax-violation '"message is not a string" u4b86@msg) (void)) ((lambda (u4b8d@who) (raise (condition (if u4b8d@who (u504e@u4e49@make-who-condition u4b8d@who) (condition)) (u5012@u4daa@make-message-condition u4b86@msg) u4b88@condition-object (u322b@extract-position-condition u4b87@form) (u3235@extract-trace u4b87@form)))) (if (or (string? u4b85@who) (symbol? u4b85@who)) u4b85@who (if (not u4b85@who) ((lambda (u4b8f@t) ((lambda (u4b91@ls/false) (if (and u4b91@ls/false (apply (lambda (u4b93@id) (u2f41@id? u4b93@id)) u4b91@ls/false)) (apply (lambda (u4b95@id) (u323f@syntax->datum u4b95@id)) u4b91@ls/false) ((lambda (u4b97@t) ((lambda (u4b99@ls/false) (if (and u4b99@ls/false (apply (lambda (u4b9b@id u4b9c@rest) (u2f41@id? u4b9b@id)) u4b99@ls/false)) (apply (lambda (u4b9f@id u4ba0@rest) (u323f@syntax->datum u4b9f@id)) u4b99@ls/false) ((lambda (u4ba3@t) ((lambda (u4ba5@ls/false) (if u4ba5@ls/false (apply (lambda () '#f) u4ba5@ls/false) (u3239@syntax-violation '#f '"invalid syntax" u4ba3@t))) (u3148@syntax-dispatch u4ba3@t '_))) u4b97@t))) (u3148@syntax-dispatch u4b97@t '(any . any)))) u4b8f@t))) (u3148@syntax-dispatch u4b8f@t 'any))) u4b87@form) ((lambda () (begin '#f (assertion-violation 'syntax-violation '"invalid who argument" u4b85@who)))))))))) (set! u3239@syntax-violation (lambda u4bb5 ((lambda (u4bb6) (if (= u4bb6 '3) (apply (lambda (u4ba7@who u4ba8@msg u4ba9@form) (u3239@syntax-violation u4ba7@who u4ba8@msg u4ba9@form '#f)) u4bb5) (if (= u4bb6 '4) (apply (lambda (u4bad@who u4bae@msg u4baf@form u4bb0@subform) (u3237@syntax-violation* u4bad@who u4bae@msg u4baf@form (u5070@u4ea5@make-syntax-violation (u323f@syntax->datum u4baf@form) (u323f@syntax->datum u4bb0@subform)))) u4bb5) (error 'apply '"invalid arg count")))) (length u4bb5)))) (set! u323b@identifier? (lambda (u4bb7@x) (u2f41@id? u4bb7@x))) (set! u323d@datum->syntax (lambda (u4bb9@id u4bba@datum) (if (u2f41@id? u4bb9@id) (u2f1f@datum->stx u4bb9@id u4bba@datum) (assertion-violation 'datum->syntax '"not an identifier" u4bb9@id)))) (set! u323f@syntax->datum (lambda (u4bbd@x) (u2f57@stx->datum u4bbd@x))) (set! u3241@top-level-expander (lambda (u4bbf@e*) (call-with-values (lambda () (u31cb@parse-top-level-program u4bbf@e*)) (lambda (u4bc5@u4bc2 u4bc6@u4bc4) ((lambda (u4bc9@b* u4bca@imp*) (call-with-values (lambda () (u31c1@library-body-expander 'all u4bca@imp* u4bc9@b* '#t)) (lambda (u4bdb@u4bce u4bdc@u4bd0 u4bdd@u4bd2 u4bde@u4bd4 u4bdf@u4bd6 u4be0@u4bd8 u4be1@u4bda) ((lambda (u4be9@export-env u4bea@export-subst u4beb@macro* u4bec@invoke-code u4bed@visit-req* u4bee@invoke-req* u4bef@imp*) (values u4bee@invoke-req* u4bec@invoke-code u4beb@macro* u4bea@export-subst u4be9@export-env)) u4be1@u4bda u4be0@u4bd8 u4bdf@u4bd6 u4bde@u4bd4 u4bdd@u4bd2 u4bdc@u4bd0 u4bdb@u4bce)))) u4bc6@u4bc4 u4bc5@u4bc2))))) (set! u3243@compile-r6rs-top-level (lambda (u4bf7@x*) (call-with-values (lambda () (u3241@top-level-expander u4bf7@x*)) (lambda (u4c03@u4bfa u4c04@u4bfc u4c05@u4bfe u4c06@u4c00 u4c07@u4c02) ((lambda (u4c0d@export-env u4c0e@export-subst u4c0f@macro* u4c10@invoke-code u4c11@lib*) (lambda () (begin (for-each u2d77@u2bf7@invoke-library u4c11@lib*) (u3215@initial-visit! u4c0f@macro*) (eval-core (u2b17@u2ad7@expanded->core u4c10@invoke-code)) (u31f7@make-interaction-env (u3245@subst->rib u4c0e@export-subst) (map (lambda (u4c17@x) ((lambda (u4c19@label u4c1a@binding) ((lambda (u4c1d@type u4c1e@val) (cons* u4c19@label u4c1d@type '*interaction* u4c1e@val)) (car u4c1a@binding) (cdr u4c1a@binding))) (car u4c17@x) (cdr u4c17@x))) u4c0d@export-env) '())))) u4c07@u4c02 u4c06@u4c00 u4c05@u4bfe u4c04@u4bfc u4c03@u4bfa))))) (set! u3245@subst->rib (lambda (u4c21@subst) ((lambda (u4c23@rib) (begin (u2ee8@set-rib-sym*! u4c23@rib (map car u4c21@subst)) (u2eea@set-rib-mark**! u4c23@rib (map (lambda (u4c25@x) u2ec1@top-mark*) u4c21@subst)) (u2eec@set-rib-label*! u4c23@rib (map cdr u4c21@subst)) u4c23@rib)) (u2ef0@make-empty-rib)))) (set! u3247@new-interaction-environment (lambda () ((lambda (u4c27@lib) ((lambda (u4c29@rib) (u31f7@make-interaction-env u4c29@rib '() '())) (u3245@subst->rib (u2d47@u2b97@library-subst u4c27@lib)))) (u2d6f@u2be7@find-library-by-name (u2b6e@u2b1d@base-of-interaction-library))))) (set! u3249@interaction-environment ((lambda (u4c2b@e) (lambda u4c2f ((lambda (u4c30) (if (= u4c30 '0) (apply (lambda () (or u4c2b@e (begin (set! u4c2b@e (u3247@new-interaction-environment)) u4c2b@e))) u4c2f) (if (= u4c30 '1) (apply (lambda (u4c2d@x) (begin (if (not (u3207@environment? u4c2d@x)) (assertion-violation 'interaction-environment '"not an environment" u4c2d@x) (void)) (set! u4c2b@e u4c2d@x))) u4c2f) (error 'apply '"invalid arg count")))) (length u4c2f)))) '#f)) (set! u324b@top-level-context (u2ad0@u299d@make-parameter '#f)) (begin (u2d6c@u2be1@current-library-expander u3217@library-expander) (set! u4c31@u2eba@set-cons u2eba@set-cons) (set! u4c32@u2ebc@set-union u2ebc@set-union) (set! u4c33@u2ec1@top-mark* u2ec1@top-mark*) (set! u4c34@u2ec3@top-marked? u2ec3@top-marked?) (set! u4c35@u2ec5@gen-lexical u2ec5@gen-lexical) (set! u4c36@u2ec7@gen-global u2ec7@gen-global) (set! u4c37@u2ec9@gen-label u2ec9@gen-label) (set! u4c38@u2ecb@gen-top-level-label u2ecb@gen-top-level-label) (set! u4c39@u2ecd@gen-define-label+loc u2ecd@gen-define-label+loc) (set! u4c3a@u2ecf@gen-define-label u2ecf@gen-define-label) (set! u4c3b@u2ed5@u2ed0 u2ed5@u2ed0) (set! u4c3c@u2ed7@u2ed2 u2ed7@u2ed2) (set! u4c3d@u2ed9@u2ed1 u2ed9@u2ed1) (set! u4c3e@u2edc@rib? u2edc@rib?) (set! u4c3f@u2ede@make-rib u2ede@make-rib) (set! u4c40@u2ee0@rib-sym* u2ee0@rib-sym*) (set! u4c41@u2ee2@rib-mark** u2ee2@rib-mark**) (set! u4c42@u2ee4@rib-label* u2ee4@rib-label*) (set! u4c43@u2ee6@rib-sealed/freq u2ee6@rib-sealed/freq) (set! u4c44@u2ee8@set-rib-sym*! u2ee8@set-rib-sym*!) (set! u4c45@u2eea@set-rib-mark**! u2eea@set-rib-mark**!) (set! u4c46@u2eec@set-rib-label*! u2eec@set-rib-label*!) (set! u4c47@u2eee@set-rib-sealed/freq! u2eee@set-rib-sealed/freq!) (set! u4c48@u2ef0@make-empty-rib u2ef0@make-empty-rib) (set! u4c49@u2ef2@top-marked-symbols u2ef2@top-marked-symbols) (set! u4c4a@u2ef4@extend-rib! u2ef4@extend-rib!) (set! u4c4b@u2ef6@seal-rib! u2ef6@seal-rib!) (set! u4c4c@u2ef8@unseal-rib! u2ef8@unseal-rib!) (set! u4c4d@u2efa@increment-rib-frequency! u2efa@increment-rib-frequency!) (set! u4c4e@u2efc@make-full-rib u2efc@make-full-rib) (set! u4c4f@u2f02@u2efd u2f02@u2efd) (set! u4c50@u2f04@u2eff u2f04@u2eff) (set! u4c51@u2f06@u2efe u2f06@u2efe) (set! u4c52@u2f09@stx? u2f09@stx?) (set! u4c53@u2f0b@make-stx u2f0b@make-stx) (set! u4c54@u2f0d@stx-expr u2f0d@stx-expr) (set! u4c55@u2f0f@stx-mark* u2f0f@stx-mark*) (set! u4c56@u2f11@stx-subst* u2f11@stx-subst*) (set! u4c57@u2f13@stx-ae* u2f13@stx-ae*) (set! u4c58@u2f15@set-stx-expr! u2f15@set-stx-expr!) (set! u4c59@u2f17@set-stx-mark*! u2f17@set-stx-mark*!) (set! u4c5a@u2f19@set-stx-subst*! u2f19@set-stx-subst*!) (set! u4c5b@u2f1b@set-stx-ae*! u2f1b@set-stx-ae*!) (set! u4c5c@u2f1d@rp u2f1d@rp) (set! u4c5d@u2f1f@datum->stx u2f1f@datum->stx) (set! u4c5e@u2f21@gen-mark u2f21@gen-mark) (set! u4c5f@u2f23@anti-mark u2f23@anti-mark) (set! u4c60@u2f25@anti-mark? u2f25@anti-mark?) (set! u4c61@u2f27@join-wraps u2f27@join-wraps) (set! u4c62@u2f29@mkstx u2f29@mkstx) (set! u4c63@u2f2b@add-mark u2f2b@add-mark) (set! u4c64@u2f2d@add-subst u2f2d@add-subst) (set! u4c65@u2f2f@syntax-kind? u2f2f@syntax-kind?) (set! u4c66@u2f31@syntax-vector->list u2f31@syntax-vector->list) (set! u4c67@u2f33@syntax-pair? u2f33@syntax-pair?) (set! u4c68@u2f35@syntax-vector? u2f35@syntax-vector?) (set! u4c69@u2f37@syntax-null? u2f37@syntax-null?) (set! u4c6a@u2f39@syntax-list? u2f39@syntax-list?) (set! u4c6b@u2f3b@syntax-car u2f3b@syntax-car) (set! u4c6c@u2f3d@syntax-cdr u2f3d@syntax-cdr) (set! u4c6d@u2f3f@syntax->list u2f3f@syntax->list) (set! u4c6e@u2f41@id? u2f41@id?) (set! u4c6f@u2f43@id->sym u2f43@id->sym) (set! u4c70@u2f45@same-marks? u2f45@same-marks?) (set! u4c71@u2f47@bound-id=? u2f47@bound-id=?) (set! u4c72@u2f49@free-id=? u2f49@free-id=?) (set! u4c73@u2f4b@valid-bound-ids? u2f4b@valid-bound-ids?) (set! u4c74@u2f4d@distinct-bound-ids? u2f4d@distinct-bound-ids?) (set! u4c75@u2f4f@bound-id-member? u2f4f@bound-id-member?) (set! u4c76@u2f51@self-evaluating? u2f51@self-evaluating?) (set! u4c77@u2f53@strip-annotations u2f53@strip-annotations) (set! u4c78@u2f55@strip u2f55@strip) (set! u4c79@u2f57@stx->datum u2f57@stx->datum) (set! u4c7a@u2f59@id->label/intern u2f59@id->label/intern) (set! u4c7b@u2f5b@id->label u2f5b@id->label) (set! u4c7c@u2f5d@label->binding u2f5d@label->binding) (set! u4c7d@u2f5f@make-binding u2f5f@make-binding) (set! u4c7e@u2f61@binding-type u2f61@binding-type) (set! u4c7f@u2f63@binding-value u2f63@binding-value) (set! u4c80@u2f65@raise-unbound-error u2f65@raise-unbound-error) (set! u4c81@u2f67@syntax-type u2f67@syntax-type) (set! u4c82@u2f75@sanitize-binding u2f75@sanitize-binding) (set! u4c83@u2f77@make-variable-transformer u2f77@make-variable-transformer) (set! u4c84@u2f79@make-compile-time-value u2f79@make-compile-time-value) (set! u4c85@u2f7b@variable-transformer? u2f7b@variable-transformer?) (set! u4c86@u2f7d@variable-transformer-procedure u2f7d@variable-transformer-procedure) (set! u4c87@u2f7f@make-eval-transformer u2f7f@make-eval-transformer) (set! u4c88@u30d0@parse-define u30d0@parse-define) (set! u4c89@u30d2@parse-define-syntax u30d2@parse-define-syntax) (set! u4c8a@u30d4@scheme-stx-hashtable u30d4@scheme-stx-hashtable) (set! u4c8b@u30d6@scheme-stx u30d6@scheme-stx) (set! u4c8c@u30d8@lexical-var u30d8@lexical-var) (set! u4c8d@u30da@lexical-mutable? u30da@lexical-mutable?) (set! u4c8e@u30dc@set-lexical-mutable! u30dc@set-lexical-mutable!) (set! u4c8f@u30de@add-lexical u30de@add-lexical) (set! u4c90@u30e0@add-lexicals u30e0@add-lexicals) (set! u4c91@u30e2@letrec-helper u30e2@letrec-helper) (set! u4c92@u30e4@letrec-transformer u30e4@letrec-transformer) (set! u4c93@u30e6@letrec*-transformer u30e6@letrec*-transformer) (set! u4c94@u30e8@fluid-let-syntax-transformer u30e8@fluid-let-syntax-transformer) (set! u4c95@u30ea@type-descriptor-transformer u30ea@type-descriptor-transformer) (set! u4c96@u30ec@record-type-descriptor-transformer u30ec@record-type-descriptor-transformer) (set! u4c97@u30ee@record-constructor-descriptor-transformer u30ee@record-constructor-descriptor-transformer) (set! u4c98@u30f0@when-macro u30f0@when-macro) (set! u4c99@u30f2@unless-macro u30f2@unless-macro) (set! u4c9a@u30f4@if-transformer u30f4@if-transformer) (set! u4c9b@u30f6@and-transformer u30f6@and-transformer) (set! u4c9c@u30f8@or-transformer u30f8@or-transformer) (set! u4c9d@u30fa@case-macro u30fa@case-macro) (set! u4c9e@u30fc@quote-transformer u30fc@quote-transformer) (set! u4c9f@u30fe@case-lambda-transformer u30fe@case-lambda-transformer) (set! u4ca0@u3100@lambda-transformer u3100@lambda-transformer) (set! u4ca1@u3102@bless u3102@bless) (set! u4ca2@u3104@with-syntax-macro u3104@with-syntax-macro) (set! u4ca3@u3106@invalid-fmls-error u3106@invalid-fmls-error) (set! u4ca4@u3108@let-macro u3108@let-macro) (set! u4ca5@u310a@trace-let-macro u310a@trace-let-macro) (set! u4ca6@u310c@let-values-macro u310c@let-values-macro) (set! u4ca7@u310e@let*-values-macro u310e@let*-values-macro) (set! u4ca8@u3110@trace-lambda-macro u3110@trace-lambda-macro) (set! u4ca9@u3112@trace-define-macro u3112@trace-define-macro) (set! u4caa@u3114@trace-define-syntax-macro u3114@trace-define-syntax-macro) (set! u4cab@u3116@trace-let/rec-syntax u3116@trace-let/rec-syntax) (set! u4cac@u3118@trace-let-syntax-macro u3118@trace-let-syntax-macro) (set! u4cad@u311a@trace-letrec-syntax-macro u311a@trace-letrec-syntax-macro) (set! u4cae@u311c@guard-macro u311c@guard-macro) (set! u4caf@u311e@define-enumeration-macro u311e@define-enumeration-macro) (set! u4cb0@u3120@time-macro u3120@time-macro) (set! u4cb1@u3122@delay-macro u3122@delay-macro) (set! u4cb2@u3124@assert-macro u3124@assert-macro) (set! u4cb3@u3126@endianness-macro u3126@endianness-macro) (set! u4cb4@u3128@identifier-syntax-macro u3128@identifier-syntax-macro) (set! u4cb5@u312a@do-macro u312a@do-macro) (set! u4cb6@u312c@let*-macro u312c@let*-macro) (set! u4cb7@u312e@or-macro u312e@or-macro) (set! u4cb8@u3130@and-macro u3130@and-macro) (set! u4cb9@u3132@cond-macro u3132@cond-macro) (set! u4cba@u3134@syntax-rules-macro u3134@syntax-rules-macro) (set! u4cbb@u3136@quasiquote-macro u3136@quasiquote-macro) (set! u4cbc@u3138@quasisyntax-macro u3138@quasisyntax-macro) (set! u4cbd@u313a@define-struct-macro u313a@define-struct-macro) (set! u4cbe@u313c@define-record-type-macro u313c@define-record-type-macro) (set! u4cbf@u313e@define-condition-type-macro u313e@define-condition-type-macro) (set! u4cc0@u3140@incorrect-usage-macro u3140@incorrect-usage-macro) (set! u4cc1@u3142@parameterize-macro u3142@parameterize-macro) (set! u4cc2@u3144@foreign-call-transformer u3144@foreign-call-transformer) (set! u4cc3@u3146@convert-pattern u3146@convert-pattern) (set! u4cc4@u3148@syntax-dispatch u3148@syntax-dispatch) (set! u4cc5@u314a@ellipsis? u314a@ellipsis?) (set! u4cc6@u314c@underscore? u314c@underscore?) (set! u4cc7@u314e@verify-literals u314e@verify-literals) (set! u4cc8@u3150@syntax-case-transformer u3150@syntax-case-transformer) (set! u4cc9@u3152@ellipsis-map u3152@ellipsis-map) (set! u4cca@u3154@syntax-transformer u3154@syntax-transformer) (set! u4ccb@u3156@core-macro-transformer u3156@core-macro-transformer) (set! u4ccc@u3158@file-options-macro u3158@file-options-macro) (set! u4ccd@u315a@symbol-macro u315a@symbol-macro) (set! u4cce@u315c@macro-transformer u315c@macro-transformer) (set! u4ccf@u315e@local-macro-transformer u315e@local-macro-transformer) (set! u4cd0@u3160@do-macro-call u3160@do-macro-call) (set! u4cd1@u3162@chi-macro u3162@chi-macro) (set! u4cd2@u3164@chi-local-macro u3164@chi-local-macro) (set! u4cd3@u3166@chi-global-macro u3166@chi-global-macro) (set! u4cd4@u3168@chi-expr* u3168@chi-expr*) (set! u4cd5@u316a@chi-application u316a@chi-application) (set! u4cd6@u316c@chi-expr u316c@chi-expr) (set! u4cd7@u316e@chi-set! u316e@chi-set!) (set! u4cd8@u3170@verify-formals u3170@verify-formals) (set! u4cd9@u3172@chi-lambda-clause u3172@chi-lambda-clause) (set! u4cda@u3174@chi-lambda-clause* u3174@chi-lambda-clause*) (set! u4cdb@u3176@chi-defun u3176@chi-defun) (set! u4cdc@u3178@chi-rhs u3178@chi-rhs) (set! u4cdd@u317a@expand-interaction-rhs*/init* u317a@expand-interaction-rhs*/init*) (set! u4cde@u317c@chi-rhs* u317c@chi-rhs*) (set! u4cdf@u317e@find-bound=? u317e@find-bound=?) (set! u4ce0@u3180@find-dups u3180@find-dups) (set! u4ce1@u3182@chi-internal u3182@chi-internal) (set! u4ce2@u3184@parse-module u3184@parse-module) (set! u4ce3@u318a@u3185 u318a@u3185) (set! u4ce4@u318c@u3187 u318c@u3187) (set! u4ce5@u318e@u3186 u318e@u3186) (set! u4ce6@u3191@module-interface? u3191@module-interface?) (set! u4ce7@u3193@make-module-interface u3193@make-module-interface) (set! u4ce8@u3195@module-interface-first-mark u3195@module-interface-first-mark) (set! u4ce9@u3197@module-interface-exp-id-vec u3197@module-interface-exp-id-vec) (set! u4cea@u3199@module-interface-exp-lab-vec u3199@module-interface-exp-lab-vec) (set! u4ceb@u319b@set-module-interface-first-mark! u319b@set-module-interface-first-mark!) (set! u4cec@u319d@set-module-interface-exp-id-vec! u319d@set-module-interface-exp-id-vec!) (set! u4ced@u319f@set-module-interface-exp-lab-vec! u319f@set-module-interface-exp-lab-vec!) (set! u4cee@u31a1@module-interface-exp-id* u31a1@module-interface-exp-id*) (set! u4cef@u31a3@syntax-transpose u31a3@syntax-transpose) (set! u4cf0@u31a5@chi-internal-module u31a5@chi-internal-module) (set! u4cf1@u31a7@chi-body* u31a7@chi-body*) (set! u4cf2@u31a9@expand-transformer u31a9@expand-transformer) (set! u4cf3@u31ab@parse-exports u31ab@parse-exports) (set! u4cf4@u31ad@parse-library-name u31ad@parse-library-name) (set! u4cf5@u31af@parse-library u31af@parse-library) (set! u4cf6@u31b1@parse-import-spec* u31b1@parse-import-spec*) (set! u4cf7@u31b3@make-top-rib u31b3@make-top-rib) (set! u4cf8@u31b5@make-collector u31b5@make-collector) (set! u4cf9@u31b7@inv-collector u31b7@inv-collector) (set! u4cfa@u31b9@vis-collector u31b9@vis-collector) (set! u4cfb@u31bb@imp-collector u31bb@imp-collector) (set! u4cfc@u31bd@chi-library-internal u31bd@chi-library-internal) (set! u4cfd@u31bf@chi-interaction-expr u31bf@chi-interaction-expr) (set! u4cfe@u31c1@library-body-expander u31c1@library-body-expander) (set! u4cff@u31c3@stale-when-collector u31c3@stale-when-collector) (set! u4d00@u31c5@make-stale-collector u31c5@make-stale-collector) (set! u4d01@u31c7@handle-stale-when u31c7@handle-stale-when) (set! u4d02@u31c9@core-library-expander u31c9@core-library-expander) (set! u4d03@u31cb@parse-top-level-program u31cb@parse-top-level-program) (set! u4d04@u31d1@u31cc u31d1@u31cc) (set! u4d05@u31d3@u31ce u31d3@u31ce) (set! u4d06@u31d5@u31cd u31d5@u31cd) (set! u4d07@u31d8@env? u31d8@env?) (set! u4d08@u31da@make-env u31da@make-env) (set! u4d09@u31dc@env-names u31dc@env-names) (set! u4d0a@u31de@env-labels u31de@env-labels) (set! u4d0b@u31e0@env-itc u31e0@env-itc) (set! u4d0c@u31e2@set-env-names! u31e2@set-env-names!) (set! u4d0d@u31e4@set-env-labels! u31e4@set-env-labels!) (set! u4d0e@u31e6@set-env-itc! u31e6@set-env-itc!) (set! u4d0f@u31e8@rp u31e8@rp) (set! u4d10@u31ee@u31e9 u31ee@u31e9) (set! u4d11@u31f0@u31eb u31f0@u31eb) (set! u4d12@u31f2@u31ea u31f2@u31ea) (set! u4d13@u31f5@interaction-env? u31f5@interaction-env?) (set! u4d14@u31f7@make-interaction-env u31f7@make-interaction-env) (set! u4d15@u31f9@interaction-env-rib u31f9@interaction-env-rib) (set! u4d16@u31fb@interaction-env-r u31fb@interaction-env-r) (set! u4d17@u31fd@interaction-env-locs u31fd@interaction-env-locs) (set! u4d18@u31ff@set-interaction-env-rib! u31ff@set-interaction-env-rib!) (set! u4d19@u3201@set-interaction-env-r! u3201@set-interaction-env-r!) (set! u4d1a@u3203@set-interaction-env-locs! u3203@set-interaction-env-locs!) (set! u4d1b@u3205@rp u3205@rp) (set! u4d1c@u3207@environment? u3207@environment?) (set! u4d1d@u3209@environment-symbols u3209@environment-symbols) (set! u4d1e@u320b@environment u320b@environment) (set! u4d1f@u320d@null-environment u320d@null-environment) (set! u4d20@u320f@scheme-report-environment u320f@scheme-report-environment) (set! u4d21@u3211@core-expand u3211@core-expand) (set! u4d22@u3213@eval u3213@eval) (set! u4d23@u3215@initial-visit! u3215@initial-visit!) (set! u4d24@u3217@library-expander u3217@library-expander) (set! u4d25@u3219@boot-library-expand u3219@boot-library-expand) (set! u4d26@u321b@rev-map-append u321b@rev-map-append) (set! u4d27@u321d@build-exports u321d@build-exports) (set! u4d28@u321f@make-export-subst u321f@make-export-subst) (set! u4d29@u3221@make-export-env/macros u3221@make-export-env/macros) (set! u4d2a@u3223@generate-temporaries u3223@generate-temporaries) (set! u4d2b@u3225@free-identifier=? u3225@free-identifier=?) (set! u4d2c@u3227@bound-identifier=? u3227@bound-identifier=?) (set! u4d2d@u3229@position->condition u3229@position->condition) (set! u4d2e@u322b@extract-position-condition u322b@extract-position-condition) (set! u4d2f@u322d@expression-position u322d@expression-position) (set! u4d30@u322f@syntax-annotation u322f@syntax-annotation) (set! u4d31@u3231@assertion-error u3231@assertion-error) (set! u4d32@u3233@syntax-error u3233@syntax-error) (set! u4d33@u3235@extract-trace u3235@extract-trace) (set! u4d34@u3237@syntax-violation* u3237@syntax-violation*) (set! u4d35@u3239@syntax-violation u3239@syntax-violation) (set! u4d36@u323b@identifier? u323b@identifier?) (set! u4d37@u323d@datum->syntax u323d@datum->syntax) (set! u4d38@u323f@syntax->datum u323f@syntax->datum) (set! u4d39@u3241@top-level-expander u3241@top-level-expander) (set! u4d3a@u3243@compile-r6rs-top-level u3243@compile-r6rs-top-level) (set! u4d3b@u3245@subst->rib u3245@subst->rib) (set! u4d3c@u3247@new-interaction-environment u3247@new-interaction-environment) (set! u4d3d@u3249@interaction-environment u3249@interaction-environment) (set! u4d3e@u324b@top-level-context u324b@top-level-context)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (u4d48@u4d43 u4d4a@u4d45 u4d4c@u4d44 u4d4f@&condition? u4d51@make-&condition u4d53@&condition-rtd u4d55@&condition-rcd u4da1@u4d9c u4da3@u4d9e u4da5@u4d9d u4da8@p? u4daa@make-message-condition u4dac@u4d9b u4dae@message-condition? u4db0@condition-message u4db2@&message-rtd u4db4@&message-rcd u4dba@u4db5 u4dbc@u4db7 u4dbe@u4db6 u4dc1@p? u4dc3@make-warning u4dc5@warning? u4dc7@&warning-rtd u4dc9@&warning-rcd u4dcf@u4dca u4dd1@u4dcc u4dd3@u4dcb u4dd6@p? u4dd8@make-serious-condition u4dda@serious-condition? u4ddc@&serious-rtd u4dde@&serious-rcd u4de4@u4ddf u4de6@u4de1 u4de8@u4de0 u4deb@p? u4ded@make-error u4def@error? u4df1@&error-rtd u4df3@&error-rcd u4df9@u4df4 u4dfb@u4df6 u4dfd@u4df5 u4e00@p? u4e02@make-violation u4e04@violation? u4e06@&violation-rtd u4e08@&violation-rcd u4e0e@u4e09 u4e10@u4e0b u4e12@u4e0a u4e15@p? u4e17@make-assertion-violation u4e19@assertion-violation? u4e1b@&assertion-rtd u4e1d@&assertion-rcd u4e25@u4e20 u4e27@u4e22 u4e29@u4e21 u4e2c@p? u4e2e@make-irritants-condition u4e30@u4e1f u4e32@irritants-condition? u4e34@condition-irritants u4e36@&irritants-rtd u4e38@&irritants-rcd u4e40@u4e3b u4e42@u4e3d u4e44@u4e3c u4e47@p? u4e49@make-who-condition u4e4b@u4e3a u4e4d@who-condition? u4e4f@condition-who u4e51@&who-rtd u4e53@&who-rcd u4e59@u4e54 u4e5b@u4e56 u4e5d@u4e55 u4e60@p? u4e62@make-non-continuable-violation u4e64@non-continuable-violation? u4e66@&non-continuable-rtd u4e68@&non-continuable-rcd u4e6e@u4e69 u4e70@u4e6b u4e72@u4e6a u4e75@p? u4e77@make-implementation-restriction-violation u4e79@implementation-restriction-violation? u4e7b@&implementation-restriction-rtd u4e7d@&implementation-restriction-rcd u4e83@u4e7e u4e85@u4e80 u4e87@u4e7f u4e8a@p? u4e8c@make-lexical-violation u4e8e@lexical-violation? u4e90@&lexical-rtd u4e92@&lexical-rcd u4e9c@u4e97 u4e9e@u4e99 u4ea0@u4e98 u4ea3@p? u4ea5@make-syntax-violation u4ea7@u4e94 u4ea9@u4e96 u4eab@syntax-violation? u4ead@syntax-violation-form u4eaf@syntax-violation-subform u4eb1@&syntax-rtd u4eb3@&syntax-rcd u4eb9@u4eb4 u4ebb@u4eb6 u4ebd@u4eb5 u4ec0@p? u4ec2@make-undefined-violation u4ec4@undefined-violation? u4ec6@&undefined-rtd u4ec8@&undefined-rcd u4ece@u4ec9 u4ed0@u4ecb u4ed2@u4eca u4ed5@p? u4ed7@make-i/o-error u4ed9@i/o-error? u4edb@&i/o-rtd u4edd@&i/o-rcd u4ee3@u4ede u4ee5@u4ee0 u4ee7@u4edf u4eea@p? u4eec@make-i/o-read-error u4eee@i/o-read-error? u4ef0@&i/o-read-rtd u4ef2@&i/o-read-rcd u4ef8@u4ef3 u4efa@u4ef5 u4efc@u4ef4 u4eff@p? u4f01@make-i/o-write-error u4f03@i/o-write-error? u4f05@&i/o-write-rtd u4f07@&i/o-write-rcd u4f0f@u4f0a u4f11@u4f0c u4f13@u4f0b u4f16@p? u4f18@make-i/o-invalid-position-error u4f1a@u4f09 u4f1c@i/o-invalid-position-error? u4f1e@i/o-error-position u4f20@&i/o-invalid-position-rtd u4f22@&i/o-invalid-position-rcd u4f2a@u4f25 u4f2c@u4f27 u4f2e@u4f26 u4f31@p? u4f33@make-i/o-filename-error u4f35@u4f24 u4f37@i/o-filename-error? u4f39@i/o-error-filename u4f3b@&i/o-filename-rtd u4f3d@&i/o-filename-rcd u4f43@u4f3e u4f45@u4f40 u4f47@u4f3f u4f4a@p? u4f4c@make-i/o-file-protection-error u4f4e@i/o-file-protection-error? u4f50@&i/o-file-protection-rtd u4f52@&i/o-file-protection-rcd u4f58@u4f53 u4f5a@u4f55 u4f5c@u4f54 u4f5f@p? u4f61@make-i/o-file-is-read-only-error u4f63@i/o-file-is-read-only-error? u4f65@&i/o-file-is-read-only-rtd u4f67@&i/o-file-is-read-only-rcd u4f6d@u4f68 u4f6f@u4f6a u4f71@u4f69 u4f74@p? u4f76@make-i/o-file-already-exists-error u4f78@i/o-file-already-exists-error? u4f7a@&i/o-file-already-exists-rtd u4f7c@&i/o-file-already-exists-rcd u4f82@u4f7d u4f84@u4f7f u4f86@u4f7e u4f89@p? u4f8b@make-i/o-file-does-not-exist-error u4f8d@i/o-file-does-not-exist-error? u4f8f@&i/o-file-does-not-exist-rtd u4f91@&i/o-file-does-not-exist-rcd u4f99@u4f94 u4f9b@u4f96 u4f9d@u4f95 u4fa0@p? u4fa2@make-i/o-port-error u4fa4@u4f93 u4fa6@i/o-port-error? u4fa8@i/o-error-port u4faa@&i/o-port-rtd u4fac@&i/o-port-rcd u4fb2@u4fad u4fb4@u4faf u4fb6@u4fae u4fb9@p? u4fbb@make-i/o-decoding-error u4fbd@i/o-decoding-error? u4fbf@&i/o-decoding-rtd u4fc1@&i/o-decoding-rcd u4fc9@u4fc4 u4fcb@u4fc6 u4fcd@u4fc5 u4fd0@p? u4fd2@make-i/o-encoding-error u4fd4@u4fc3 u4fd6@i/o-encoding-error? u4fd8@i/o-encoding-error-char u4fda@&i/o-encoding-rtd u4fdc@&i/o-encoding-rcd u4fe2@u4fdd u4fe4@u4fdf u4fe6@u4fde u4fe9@p? u4feb@make-no-infinities-violation u4fed@no-infinities-violation? u4fef@&no-infinities-rtd u4ff1@&no-infinities-rcd u4ff7@u4ff2 u4ff9@u4ff4 u4ffb@u4ff3 u4ffe@p? u5000@make-no-nans-violation u5002@no-nans-violation? u5004@&no-nans-rtd u5006@&no-nans-rcd) (begin (set! u4d48@u4d43 (make-record-type-descriptor '&condition '#f 'u4d46 '#f '#f '#())) (set! u4d4a@u4d45 '#f) (set! u4d4c@u4d44 (make-record-constructor-descriptor u4d48@u4d43 '#f u4d4a@u4d45)) (set! u4d4f@&condition? (record-predicate u4d48@u4d43)) (set! u4d51@make-&condition (record-constructor u4d4c@u4d44)) (set! u4d53@&condition-rtd u4d48@u4d43) (set! u4d55@&condition-rcd u4d4c@u4d44) (set! u4da1@u4d9c (make-record-type-descriptor '&message u4d48@u4d43 'u4d9f '#f '#f '#((immutable message)))) (set! u4da3@u4d9e '#f) (set! u4da5@u4d9d (make-record-constructor-descriptor u4da1@u4d9c u4d4c@u4d44 u4da3@u4d9e)) (set! u4da8@p? (record-predicate u4da1@u4d9c)) (set! u4daa@make-message-condition (record-constructor u4da5@u4d9d)) (set! u4dac@u4d9b (record-accessor u4da1@u4d9c '0)) (set! u4dae@message-condition? (condition-predicate u4da1@u4d9c)) (set! u4db0@condition-message (condition-accessor u4da1@u4d9c u4dac@u4d9b)) (set! u4db2@&message-rtd u4da1@u4d9c) (set! u4db4@&message-rcd u4da5@u4d9d) (set! u4dba@u4db5 (make-record-type-descriptor '&warning u4d48@u4d43 'u4db8 '#f '#f '#())) (set! u4dbc@u4db7 '#f) (set! u4dbe@u4db6 (make-record-constructor-descriptor u4dba@u4db5 u4d4c@u4d44 u4dbc@u4db7)) (set! u4dc1@p? (record-predicate u4dba@u4db5)) (set! u4dc3@make-warning (record-constructor u4dbe@u4db6)) (set! u4dc5@warning? (condition-predicate u4dba@u4db5)) (set! u4dc7@&warning-rtd u4dba@u4db5) (set! u4dc9@&warning-rcd u4dbe@u4db6) (set! u4dcf@u4dca (make-record-type-descriptor '&serious u4d48@u4d43 'u4dcd '#f '#f '#())) (set! u4dd1@u4dcc '#f) (set! u4dd3@u4dcb (make-record-constructor-descriptor u4dcf@u4dca u4d4c@u4d44 u4dd1@u4dcc)) (set! u4dd6@p? (record-predicate u4dcf@u4dca)) (set! u4dd8@make-serious-condition (record-constructor u4dd3@u4dcb)) (set! u4dda@serious-condition? (condition-predicate u4dcf@u4dca)) (set! u4ddc@&serious-rtd u4dcf@u4dca) (set! u4dde@&serious-rcd u4dd3@u4dcb) (set! u4de4@u4ddf (make-record-type-descriptor '&error u4dcf@u4dca 'u4de2 '#f '#f '#())) (set! u4de6@u4de1 '#f) (set! u4de8@u4de0 (make-record-constructor-descriptor u4de4@u4ddf u4dd3@u4dcb u4de6@u4de1)) (set! u4deb@p? (record-predicate u4de4@u4ddf)) (set! u4ded@make-error (record-constructor u4de8@u4de0)) (set! u4def@error? (condition-predicate u4de4@u4ddf)) (set! u4df1@&error-rtd u4de4@u4ddf) (set! u4df3@&error-rcd u4de8@u4de0) (set! u4df9@u4df4 (make-record-type-descriptor '&violation u4dcf@u4dca 'u4df7 '#f '#f '#())) (set! u4dfb@u4df6 '#f) (set! u4dfd@u4df5 (make-record-constructor-descriptor u4df9@u4df4 u4dd3@u4dcb u4dfb@u4df6)) (set! u4e00@p? (record-predicate u4df9@u4df4)) (set! u4e02@make-violation (record-constructor u4dfd@u4df5)) (set! u4e04@violation? (condition-predicate u4df9@u4df4)) (set! u4e06@&violation-rtd u4df9@u4df4) (set! u4e08@&violation-rcd u4dfd@u4df5) (set! u4e0e@u4e09 (make-record-type-descriptor '&assertion u4df9@u4df4 'u4e0c '#f '#f '#())) (set! u4e10@u4e0b '#f) (set! u4e12@u4e0a (make-record-constructor-descriptor u4e0e@u4e09 u4dfd@u4df5 u4e10@u4e0b)) (set! u4e15@p? (record-predicate u4e0e@u4e09)) (set! u4e17@make-assertion-violation (record-constructor u4e12@u4e0a)) (set! u4e19@assertion-violation? (condition-predicate u4e0e@u4e09)) (set! u4e1b@&assertion-rtd u4e0e@u4e09) (set! u4e1d@&assertion-rcd u4e12@u4e0a) (set! u4e25@u4e20 (make-record-type-descriptor '&irritants u4d48@u4d43 'u4e23 '#f '#f '#((immutable irritants)))) (set! u4e27@u4e22 '#f) (set! u4e29@u4e21 (make-record-constructor-descriptor u4e25@u4e20 u4d4c@u4d44 u4e27@u4e22)) (set! u4e2c@p? (record-predicate u4e25@u4e20)) (set! u4e2e@make-irritants-condition (record-constructor u4e29@u4e21)) (set! u4e30@u4e1f (record-accessor u4e25@u4e20 '0)) (set! u4e32@irritants-condition? (condition-predicate u4e25@u4e20)) (set! u4e34@condition-irritants (condition-accessor u4e25@u4e20 u4e30@u4e1f)) (set! u4e36@&irritants-rtd u4e25@u4e20) (set! u4e38@&irritants-rcd u4e29@u4e21) (set! u4e40@u4e3b (make-record-type-descriptor '&who u4d48@u4d43 'u4e3e '#f '#f '#((immutable who)))) (set! u4e42@u4e3d '#f) (set! u4e44@u4e3c (make-record-constructor-descriptor u4e40@u4e3b u4d4c@u4d44 u4e42@u4e3d)) (set! u4e47@p? (record-predicate u4e40@u4e3b)) (set! u4e49@make-who-condition (record-constructor u4e44@u4e3c)) (set! u4e4b@u4e3a (record-accessor u4e40@u4e3b '0)) (set! u4e4d@who-condition? (condition-predicate u4e40@u4e3b)) (set! u4e4f@condition-who (condition-accessor u4e40@u4e3b u4e4b@u4e3a)) (set! u4e51@&who-rtd u4e40@u4e3b) (set! u4e53@&who-rcd u4e44@u4e3c) (set! u4e59@u4e54 (make-record-type-descriptor '&non-continuable u4df9@u4df4 'u4e57 '#f '#f '#())) (set! u4e5b@u4e56 '#f) (set! u4e5d@u4e55 (make-record-constructor-descriptor u4e59@u4e54 u4dfd@u4df5 u4e5b@u4e56)) (set! u4e60@p? (record-predicate u4e59@u4e54)) (set! u4e62@make-non-continuable-violation (record-constructor u4e5d@u4e55)) (set! u4e64@non-continuable-violation? (condition-predicate u4e59@u4e54)) (set! u4e66@&non-continuable-rtd u4e59@u4e54) (set! u4e68@&non-continuable-rcd u4e5d@u4e55) (set! u4e6e@u4e69 (make-record-type-descriptor '&implementation-restriction u4df9@u4df4 'u4e6c '#f '#f '#())) (set! u4e70@u4e6b '#f) (set! u4e72@u4e6a (make-record-constructor-descriptor u4e6e@u4e69 u4dfd@u4df5 u4e70@u4e6b)) (set! u4e75@p? (record-predicate u4e6e@u4e69)) (set! u4e77@make-implementation-restriction-violation (record-constructor u4e72@u4e6a)) (set! u4e79@implementation-restriction-violation? (condition-predicate u4e6e@u4e69)) (set! u4e7b@&implementation-restriction-rtd u4e6e@u4e69) (set! u4e7d@&implementation-restriction-rcd u4e72@u4e6a) (set! u4e83@u4e7e (make-record-type-descriptor '&lexical u4df9@u4df4 'u4e81 '#f '#f '#())) (set! u4e85@u4e80 '#f) (set! u4e87@u4e7f (make-record-constructor-descriptor u4e83@u4e7e u4dfd@u4df5 u4e85@u4e80)) (set! u4e8a@p? (record-predicate u4e83@u4e7e)) (set! u4e8c@make-lexical-violation (record-constructor u4e87@u4e7f)) (set! u4e8e@lexical-violation? (condition-predicate u4e83@u4e7e)) (set! u4e90@&lexical-rtd u4e83@u4e7e) (set! u4e92@&lexical-rcd u4e87@u4e7f) (set! u4e9c@u4e97 (make-record-type-descriptor '&syntax u4df9@u4df4 'u4e9a '#f '#f '#((immutable form) (immutable subform)))) (set! u4e9e@u4e99 '#f) (set! u4ea0@u4e98 (make-record-constructor-descriptor u4e9c@u4e97 u4dfd@u4df5 u4e9e@u4e99)) (set! u4ea3@p? (record-predicate u4e9c@u4e97)) (set! u4ea5@make-syntax-violation (record-constructor u4ea0@u4e98)) (set! u4ea7@u4e94 (record-accessor u4e9c@u4e97 '0)) (set! u4ea9@u4e96 (record-accessor u4e9c@u4e97 '1)) (set! u4eab@syntax-violation? (condition-predicate u4e9c@u4e97)) (set! u4ead@syntax-violation-form (condition-accessor u4e9c@u4e97 u4ea7@u4e94)) (set! u4eaf@syntax-violation-subform (condition-accessor u4e9c@u4e97 u4ea9@u4e96)) (set! u4eb1@&syntax-rtd u4e9c@u4e97) (set! u4eb3@&syntax-rcd u4ea0@u4e98) (set! u4eb9@u4eb4 (make-record-type-descriptor '&undefined u4df9@u4df4 'u4eb7 '#f '#f '#())) (set! u4ebb@u4eb6 '#f) (set! u4ebd@u4eb5 (make-record-constructor-descriptor u4eb9@u4eb4 u4dfd@u4df5 u4ebb@u4eb6)) (set! u4ec0@p? (record-predicate u4eb9@u4eb4)) (set! u4ec2@make-undefined-violation (record-constructor u4ebd@u4eb5)) (set! u4ec4@undefined-violation? (condition-predicate u4eb9@u4eb4)) (set! u4ec6@&undefined-rtd u4eb9@u4eb4) (set! u4ec8@&undefined-rcd u4ebd@u4eb5) (set! u4ece@u4ec9 (make-record-type-descriptor '&i/o u4de4@u4ddf 'u4ecc '#f '#f '#())) (set! u4ed0@u4ecb '#f) (set! u4ed2@u4eca (make-record-constructor-descriptor u4ece@u4ec9 u4de8@u4de0 u4ed0@u4ecb)) (set! u4ed5@p? (record-predicate u4ece@u4ec9)) (set! u4ed7@make-i/o-error (record-constructor u4ed2@u4eca)) (set! u4ed9@i/o-error? (condition-predicate u4ece@u4ec9)) (set! u4edb@&i/o-rtd u4ece@u4ec9) (set! u4edd@&i/o-rcd u4ed2@u4eca) (set! u4ee3@u4ede (make-record-type-descriptor '&i/o-read u4ece@u4ec9 'u4ee1 '#f '#f '#())) (set! u4ee5@u4ee0 '#f) (set! u4ee7@u4edf (make-record-constructor-descriptor u4ee3@u4ede u4ed2@u4eca u4ee5@u4ee0)) (set! u4eea@p? (record-predicate u4ee3@u4ede)) (set! u4eec@make-i/o-read-error (record-constructor u4ee7@u4edf)) (set! u4eee@i/o-read-error? (condition-predicate u4ee3@u4ede)) (set! u4ef0@&i/o-read-rtd u4ee3@u4ede) (set! u4ef2@&i/o-read-rcd u4ee7@u4edf) (set! u4ef8@u4ef3 (make-record-type-descriptor '&i/o-write u4ece@u4ec9 'u4ef6 '#f '#f '#())) (set! u4efa@u4ef5 '#f) (set! u4efc@u4ef4 (make-record-constructor-descriptor u4ef8@u4ef3 u4ed2@u4eca u4efa@u4ef5)) (set! u4eff@p? (record-predicate u4ef8@u4ef3)) (set! u4f01@make-i/o-write-error (record-constructor u4efc@u4ef4)) (set! u4f03@i/o-write-error? (condition-predicate u4ef8@u4ef3)) (set! u4f05@&i/o-write-rtd u4ef8@u4ef3) (set! u4f07@&i/o-write-rcd u4efc@u4ef4) (set! u4f0f@u4f0a (make-record-type-descriptor '&i/o-invalid-position u4ece@u4ec9 'u4f0d '#f '#f '#((immutable position)))) (set! u4f11@u4f0c '#f) (set! u4f13@u4f0b (make-record-constructor-descriptor u4f0f@u4f0a u4ed2@u4eca u4f11@u4f0c)) (set! u4f16@p? (record-predicate u4f0f@u4f0a)) (set! u4f18@make-i/o-invalid-position-error (record-constructor u4f13@u4f0b)) (set! u4f1a@u4f09 (record-accessor u4f0f@u4f0a '0)) (set! u4f1c@i/o-invalid-position-error? (condition-predicate u4f0f@u4f0a)) (set! u4f1e@i/o-error-position (condition-accessor u4f0f@u4f0a u4f1a@u4f09)) (set! u4f20@&i/o-invalid-position-rtd u4f0f@u4f0a) (set! u4f22@&i/o-invalid-position-rcd u4f13@u4f0b) (set! u4f2a@u4f25 (make-record-type-descriptor '&i/o-filename u4ece@u4ec9 'u4f28 '#f '#f '#((immutable filename)))) (set! u4f2c@u4f27 '#f) (set! u4f2e@u4f26 (make-record-constructor-descriptor u4f2a@u4f25 u4ed2@u4eca u4f2c@u4f27)) (set! u4f31@p? (record-predicate u4f2a@u4f25)) (set! u4f33@make-i/o-filename-error (record-constructor u4f2e@u4f26)) (set! u4f35@u4f24 (record-accessor u4f2a@u4f25 '0)) (set! u4f37@i/o-filename-error? (condition-predicate u4f2a@u4f25)) (set! u4f39@i/o-error-filename (condition-accessor u4f2a@u4f25 u4f35@u4f24)) (set! u4f3b@&i/o-filename-rtd u4f2a@u4f25) (set! u4f3d@&i/o-filename-rcd u4f2e@u4f26) (set! u4f43@u4f3e (make-record-type-descriptor '&i/o-file-protection u4f2a@u4f25 'u4f41 '#f '#f '#())) (set! u4f45@u4f40 '#f) (set! u4f47@u4f3f (make-record-constructor-descriptor u4f43@u4f3e u4f2e@u4f26 u4f45@u4f40)) (set! u4f4a@p? (record-predicate u4f43@u4f3e)) (set! u4f4c@make-i/o-file-protection-error (record-constructor u4f47@u4f3f)) (set! u4f4e@i/o-file-protection-error? (condition-predicate u4f43@u4f3e)) (set! u4f50@&i/o-file-protection-rtd u4f43@u4f3e) (set! u4f52@&i/o-file-protection-rcd u4f47@u4f3f) (set! u4f58@u4f53 (make-record-type-descriptor '&i/o-file-is-read-only u4f43@u4f3e 'u4f56 '#f '#f '#())) (set! u4f5a@u4f55 '#f) (set! u4f5c@u4f54 (make-record-constructor-descriptor u4f58@u4f53 u4f47@u4f3f u4f5a@u4f55)) (set! u4f5f@p? (record-predicate u4f58@u4f53)) (set! u4f61@make-i/o-file-is-read-only-error (record-constructor u4f5c@u4f54)) (set! u4f63@i/o-file-is-read-only-error? (condition-predicate u4f58@u4f53)) (set! u4f65@&i/o-file-is-read-only-rtd u4f58@u4f53) (set! u4f67@&i/o-file-is-read-only-rcd u4f5c@u4f54) (set! u4f6d@u4f68 (make-record-type-descriptor '&i/o-file-already-exists u4f2a@u4f25 'u4f6b '#f '#f '#())) (set! u4f6f@u4f6a '#f) (set! u4f71@u4f69 (make-record-constructor-descriptor u4f6d@u4f68 u4f2e@u4f26 u4f6f@u4f6a)) (set! u4f74@p? (record-predicate u4f6d@u4f68)) (set! u4f76@make-i/o-file-already-exists-error (record-constructor u4f71@u4f69)) (set! u4f78@i/o-file-already-exists-error? (condition-predicate u4f6d@u4f68)) (set! u4f7a@&i/o-file-already-exists-rtd u4f6d@u4f68) (set! u4f7c@&i/o-file-already-exists-rcd u4f71@u4f69) (set! u4f82@u4f7d (make-record-type-descriptor '&i/o-file-does-not-exist u4f2a@u4f25 'u4f80 '#f '#f '#())) (set! u4f84@u4f7f '#f) (set! u4f86@u4f7e (make-record-constructor-descriptor u4f82@u4f7d u4f2e@u4f26 u4f84@u4f7f)) (set! u4f89@p? (record-predicate u4f82@u4f7d)) (set! u4f8b@make-i/o-file-does-not-exist-error (record-constructor u4f86@u4f7e)) (set! u4f8d@i/o-file-does-not-exist-error? (condition-predicate u4f82@u4f7d)) (set! u4f8f@&i/o-file-does-not-exist-rtd u4f82@u4f7d) (set! u4f91@&i/o-file-does-not-exist-rcd u4f86@u4f7e) (set! u4f99@u4f94 (make-record-type-descriptor '&i/o-port u4ece@u4ec9 'u4f97 '#f '#f '#((immutable port)))) (set! u4f9b@u4f96 '#f) (set! u4f9d@u4f95 (make-record-constructor-descriptor u4f99@u4f94 u4ed2@u4eca u4f9b@u4f96)) (set! u4fa0@p? (record-predicate u4f99@u4f94)) (set! u4fa2@make-i/o-port-error (record-constructor u4f9d@u4f95)) (set! u4fa4@u4f93 (record-accessor u4f99@u4f94 '0)) (set! u4fa6@i/o-port-error? (condition-predicate u4f99@u4f94)) (set! u4fa8@i/o-error-port (condition-accessor u4f99@u4f94 u4fa4@u4f93)) (set! u4faa@&i/o-port-rtd u4f99@u4f94) (set! u4fac@&i/o-port-rcd u4f9d@u4f95) (set! u4fb2@u4fad (make-record-type-descriptor '&i/o-decoding u4f99@u4f94 'u4fb0 '#f '#f '#())) (set! u4fb4@u4faf '#f) (set! u4fb6@u4fae (make-record-constructor-descriptor u4fb2@u4fad u4f9d@u4f95 u4fb4@u4faf)) (set! u4fb9@p? (record-predicate u4fb2@u4fad)) (set! u4fbb@make-i/o-decoding-error (record-constructor u4fb6@u4fae)) (set! u4fbd@i/o-decoding-error? (condition-predicate u4fb2@u4fad)) (set! u4fbf@&i/o-decoding-rtd u4fb2@u4fad) (set! u4fc1@&i/o-decoding-rcd u4fb6@u4fae) (set! u4fc9@u4fc4 (make-record-type-descriptor '&i/o-encoding u4f99@u4f94 'u4fc7 '#f '#f '#((immutable char)))) (set! u4fcb@u4fc6 '#f) (set! u4fcd@u4fc5 (make-record-constructor-descriptor u4fc9@u4fc4 u4f9d@u4f95 u4fcb@u4fc6)) (set! u4fd0@p? (record-predicate u4fc9@u4fc4)) (set! u4fd2@make-i/o-encoding-error (record-constructor u4fcd@u4fc5)) (set! u4fd4@u4fc3 (record-accessor u4fc9@u4fc4 '0)) (set! u4fd6@i/o-encoding-error? (condition-predicate u4fc9@u4fc4)) (set! u4fd8@i/o-encoding-error-char (condition-accessor u4fc9@u4fc4 u4fd4@u4fc3)) (set! u4fda@&i/o-encoding-rtd u4fc9@u4fc4) (set! u4fdc@&i/o-encoding-rcd u4fcd@u4fc5) (set! u4fe2@u4fdd (make-record-type-descriptor '&no-infinities u4e6e@u4e69 'u4fe0 '#f '#f '#())) (set! u4fe4@u4fdf '#f) (set! u4fe6@u4fde (make-record-constructor-descriptor u4fe2@u4fdd u4e72@u4e6a u4fe4@u4fdf)) (set! u4fe9@p? (record-predicate u4fe2@u4fdd)) (set! u4feb@make-no-infinities-violation (record-constructor u4fe6@u4fde)) (set! u4fed@no-infinities-violation? (condition-predicate u4fe2@u4fdd)) (set! u4fef@&no-infinities-rtd u4fe2@u4fdd) (set! u4ff1@&no-infinities-rcd u4fe6@u4fde) (set! u4ff7@u4ff2 (make-record-type-descriptor '&no-nans u4e6e@u4e69 'u4ff5 '#f '#f '#())) (set! u4ff9@u4ff4 '#f) (set! u4ffb@u4ff3 (make-record-constructor-descriptor u4ff7@u4ff2 u4e72@u4e6a u4ff9@u4ff4)) (set! u4ffe@p? (record-predicate u4ff7@u4ff2)) (set! u5000@make-no-nans-violation (record-constructor u4ffb@u4ff3)) (set! u5002@no-nans-violation? (condition-predicate u4ff7@u4ff2)) (set! u5004@&no-nans-rtd u4ff7@u4ff2) (set! u5006@&no-nans-rcd u4ffb@u4ff3) (begin (set! u5007@u4d48@u4d43 u4d48@u4d43) (set! u5008@u4d4a@u4d45 u4d4a@u4d45) (set! u5009@u4d4c@u4d44 u4d4c@u4d44) (set! u500a@u4d4f@&condition? u4d4f@&condition?) (set! u500b@u4d51@make-&condition u4d51@make-&condition) (set! u500c@u4d53@&condition-rtd u4d53@&condition-rtd) (set! u500d@u4d55@&condition-rcd u4d55@&condition-rcd) (set! u500e@u4da1@u4d9c u4da1@u4d9c) (set! u500f@u4da3@u4d9e u4da3@u4d9e) (set! u5010@u4da5@u4d9d u4da5@u4d9d) (set! u5011@u4da8@p? u4da8@p?) (set! u5012@u4daa@make-message-condition u4daa@make-message-condition) (set! u5013@u4dac@u4d9b u4dac@u4d9b) (set! u5014@u4dae@message-condition? u4dae@message-condition?) (set! u5015@u4db0@condition-message u4db0@condition-message) (set! u5016@u4db2@&message-rtd u4db2@&message-rtd) (set! u5017@u4db4@&message-rcd u4db4@&message-rcd) (set! u5018@u4dba@u4db5 u4dba@u4db5) (set! u5019@u4dbc@u4db7 u4dbc@u4db7) (set! u501a@u4dbe@u4db6 u4dbe@u4db6) (set! u501b@u4dc1@p? u4dc1@p?) (set! u501c@u4dc3@make-warning u4dc3@make-warning) (set! u501d@u4dc5@warning? u4dc5@warning?) (set! u501e@u4dc7@&warning-rtd u4dc7@&warning-rtd) (set! u501f@u4dc9@&warning-rcd u4dc9@&warning-rcd) (set! u5020@u4dcf@u4dca u4dcf@u4dca) (set! u5021@u4dd1@u4dcc u4dd1@u4dcc) (set! u5022@u4dd3@u4dcb u4dd3@u4dcb) (set! u5023@u4dd6@p? u4dd6@p?) (set! u5024@u4dd8@make-serious-condition u4dd8@make-serious-condition) (set! u5025@u4dda@serious-condition? u4dda@serious-condition?) (set! u5026@u4ddc@&serious-rtd u4ddc@&serious-rtd) (set! u5027@u4dde@&serious-rcd u4dde@&serious-rcd) (set! u5028@u4de4@u4ddf u4de4@u4ddf) (set! u5029@u4de6@u4de1 u4de6@u4de1) (set! u502a@u4de8@u4de0 u4de8@u4de0) (set! u502b@u4deb@p? u4deb@p?) (set! u502c@u4ded@make-error u4ded@make-error) (set! u502d@u4def@error? u4def@error?) (set! u502e@u4df1@&error-rtd u4df1@&error-rtd) (set! u502f@u4df3@&error-rcd u4df3@&error-rcd) (set! u5030@u4df9@u4df4 u4df9@u4df4) (set! u5031@u4dfb@u4df6 u4dfb@u4df6) (set! u5032@u4dfd@u4df5 u4dfd@u4df5) (set! u5033@u4e00@p? u4e00@p?) (set! u5034@u4e02@make-violation u4e02@make-violation) (set! u5035@u4e04@violation? u4e04@violation?) (set! u5036@u4e06@&violation-rtd u4e06@&violation-rtd) (set! u5037@u4e08@&violation-rcd u4e08@&violation-rcd) (set! u5038@u4e0e@u4e09 u4e0e@u4e09) (set! u5039@u4e10@u4e0b u4e10@u4e0b) (set! u503a@u4e12@u4e0a u4e12@u4e0a) (set! u503b@u4e15@p? u4e15@p?) (set! u503c@u4e17@make-assertion-violation u4e17@make-assertion-violation) (set! u503d@u4e19@assertion-violation? u4e19@assertion-violation?) (set! u503e@u4e1b@&assertion-rtd u4e1b@&assertion-rtd) (set! u503f@u4e1d@&assertion-rcd u4e1d@&assertion-rcd) (set! u5040@u4e25@u4e20 u4e25@u4e20) (set! u5041@u4e27@u4e22 u4e27@u4e22) (set! u5042@u4e29@u4e21 u4e29@u4e21) (set! u5043@u4e2c@p? u4e2c@p?) (set! u5044@u4e2e@make-irritants-condition u4e2e@make-irritants-condition) (set! u5045@u4e30@u4e1f u4e30@u4e1f) (set! u5046@u4e32@irritants-condition? u4e32@irritants-condition?) (set! u5047@u4e34@condition-irritants u4e34@condition-irritants) (set! u5048@u4e36@&irritants-rtd u4e36@&irritants-rtd) (set! u5049@u4e38@&irritants-rcd u4e38@&irritants-rcd) (set! u504a@u4e40@u4e3b u4e40@u4e3b) (set! u504b@u4e42@u4e3d u4e42@u4e3d) (set! u504c@u4e44@u4e3c u4e44@u4e3c) (set! u504d@u4e47@p? u4e47@p?) (set! u504e@u4e49@make-who-condition u4e49@make-who-condition) (set! u504f@u4e4b@u4e3a u4e4b@u4e3a) (set! u5050@u4e4d@who-condition? u4e4d@who-condition?) (set! u5051@u4e4f@condition-who u4e4f@condition-who) (set! u5052@u4e51@&who-rtd u4e51@&who-rtd) (set! u5053@u4e53@&who-rcd u4e53@&who-rcd) (set! u5054@u4e59@u4e54 u4e59@u4e54) (set! u5055@u4e5b@u4e56 u4e5b@u4e56) (set! u5056@u4e5d@u4e55 u4e5d@u4e55) (set! u5057@u4e60@p? u4e60@p?) (set! u5058@u4e62@make-non-continuable-violation u4e62@make-non-continuable-violation) (set! u5059@u4e64@non-continuable-violation? u4e64@non-continuable-violation?) (set! u505a@u4e66@&non-continuable-rtd u4e66@&non-continuable-rtd) (set! u505b@u4e68@&non-continuable-rcd u4e68@&non-continuable-rcd) (set! u505c@u4e6e@u4e69 u4e6e@u4e69) (set! u505d@u4e70@u4e6b u4e70@u4e6b) (set! u505e@u4e72@u4e6a u4e72@u4e6a) (set! u505f@u4e75@p? u4e75@p?) (set! u5060@u4e77@make-implementation-restriction-violation u4e77@make-implementation-restriction-violation) (set! u5061@u4e79@implementation-restriction-violation? u4e79@implementation-restriction-violation?) (set! u5062@u4e7b@&implementation-restriction-rtd u4e7b@&implementation-restriction-rtd) (set! u5063@u4e7d@&implementation-restriction-rcd u4e7d@&implementation-restriction-rcd) (set! u5064@u4e83@u4e7e u4e83@u4e7e) (set! u5065@u4e85@u4e80 u4e85@u4e80) (set! u5066@u4e87@u4e7f u4e87@u4e7f) (set! u5067@u4e8a@p? u4e8a@p?) (set! u5068@u4e8c@make-lexical-violation u4e8c@make-lexical-violation) (set! u5069@u4e8e@lexical-violation? u4e8e@lexical-violation?) (set! u506a@u4e90@&lexical-rtd u4e90@&lexical-rtd) (set! u506b@u4e92@&lexical-rcd u4e92@&lexical-rcd) (set! u506c@u4e9c@u4e97 u4e9c@u4e97) (set! u506d@u4e9e@u4e99 u4e9e@u4e99) (set! u506e@u4ea0@u4e98 u4ea0@u4e98) (set! u506f@u4ea3@p? u4ea3@p?) (set! u5070@u4ea5@make-syntax-violation u4ea5@make-syntax-violation) (set! u5071@u4ea7@u4e94 u4ea7@u4e94) (set! u5072@u4ea9@u4e96 u4ea9@u4e96) (set! u5073@u4eab@syntax-violation? u4eab@syntax-violation?) (set! u5074@u4ead@syntax-violation-form u4ead@syntax-violation-form) (set! u5075@u4eaf@syntax-violation-subform u4eaf@syntax-violation-subform) (set! u5076@u4eb1@&syntax-rtd u4eb1@&syntax-rtd) (set! u5077@u4eb3@&syntax-rcd u4eb3@&syntax-rcd) (set! u5078@u4eb9@u4eb4 u4eb9@u4eb4) (set! u5079@u4ebb@u4eb6 u4ebb@u4eb6) (set! u507a@u4ebd@u4eb5 u4ebd@u4eb5) (set! u507b@u4ec0@p? u4ec0@p?) (set! u507c@u4ec2@make-undefined-violation u4ec2@make-undefined-violation) (set! u507d@u4ec4@undefined-violation? u4ec4@undefined-violation?) (set! u507e@u4ec6@&undefined-rtd u4ec6@&undefined-rtd) (set! u507f@u4ec8@&undefined-rcd u4ec8@&undefined-rcd) (set! u5080@u4ece@u4ec9 u4ece@u4ec9) (set! u5081@u4ed0@u4ecb u4ed0@u4ecb) (set! u5082@u4ed2@u4eca u4ed2@u4eca) (set! u5083@u4ed5@p? u4ed5@p?) (set! u5084@u4ed7@make-i/o-error u4ed7@make-i/o-error) (set! u5085@u4ed9@i/o-error? u4ed9@i/o-error?) (set! u5086@u4edb@&i/o-rtd u4edb@&i/o-rtd) (set! u5087@u4edd@&i/o-rcd u4edd@&i/o-rcd) (set! u5088@u4ee3@u4ede u4ee3@u4ede) (set! u5089@u4ee5@u4ee0 u4ee5@u4ee0) (set! u508a@u4ee7@u4edf u4ee7@u4edf) (set! u508b@u4eea@p? u4eea@p?) (set! u508c@u4eec@make-i/o-read-error u4eec@make-i/o-read-error) (set! u508d@u4eee@i/o-read-error? u4eee@i/o-read-error?) (set! u508e@u4ef0@&i/o-read-rtd u4ef0@&i/o-read-rtd) (set! u508f@u4ef2@&i/o-read-rcd u4ef2@&i/o-read-rcd) (set! u5090@u4ef8@u4ef3 u4ef8@u4ef3) (set! u5091@u4efa@u4ef5 u4efa@u4ef5) (set! u5092@u4efc@u4ef4 u4efc@u4ef4) (set! u5093@u4eff@p? u4eff@p?) (set! u5094@u4f01@make-i/o-write-error u4f01@make-i/o-write-error) (set! u5095@u4f03@i/o-write-error? u4f03@i/o-write-error?) (set! u5096@u4f05@&i/o-write-rtd u4f05@&i/o-write-rtd) (set! u5097@u4f07@&i/o-write-rcd u4f07@&i/o-write-rcd) (set! u5098@u4f0f@u4f0a u4f0f@u4f0a) (set! u5099@u4f11@u4f0c u4f11@u4f0c) (set! u509a@u4f13@u4f0b u4f13@u4f0b) (set! u509b@u4f16@p? u4f16@p?) (set! u509c@u4f18@make-i/o-invalid-position-error u4f18@make-i/o-invalid-position-error) (set! u509d@u4f1a@u4f09 u4f1a@u4f09) (set! u509e@u4f1c@i/o-invalid-position-error? u4f1c@i/o-invalid-position-error?) (set! u509f@u4f1e@i/o-error-position u4f1e@i/o-error-position) (set! u50a0@u4f20@&i/o-invalid-position-rtd u4f20@&i/o-invalid-position-rtd) (set! u50a1@u4f22@&i/o-invalid-position-rcd u4f22@&i/o-invalid-position-rcd) (set! u50a2@u4f2a@u4f25 u4f2a@u4f25) (set! u50a3@u4f2c@u4f27 u4f2c@u4f27) (set! u50a4@u4f2e@u4f26 u4f2e@u4f26) (set! u50a5@u4f31@p? u4f31@p?) (set! u50a6@u4f33@make-i/o-filename-error u4f33@make-i/o-filename-error) (set! u50a7@u4f35@u4f24 u4f35@u4f24) (set! u50a8@u4f37@i/o-filename-error? u4f37@i/o-filename-error?) (set! u50a9@u4f39@i/o-error-filename u4f39@i/o-error-filename) (set! u50aa@u4f3b@&i/o-filename-rtd u4f3b@&i/o-filename-rtd) (set! u50ab@u4f3d@&i/o-filename-rcd u4f3d@&i/o-filename-rcd) (set! u50ac@u4f43@u4f3e u4f43@u4f3e) (set! u50ad@u4f45@u4f40 u4f45@u4f40) (set! u50ae@u4f47@u4f3f u4f47@u4f3f) (set! u50af@u4f4a@p? u4f4a@p?) (set! u50b0@u4f4c@make-i/o-file-protection-error u4f4c@make-i/o-file-protection-error) (set! u50b1@u4f4e@i/o-file-protection-error? u4f4e@i/o-file-protection-error?) (set! u50b2@u4f50@&i/o-file-protection-rtd u4f50@&i/o-file-protection-rtd) (set! u50b3@u4f52@&i/o-file-protection-rcd u4f52@&i/o-file-protection-rcd) (set! u50b4@u4f58@u4f53 u4f58@u4f53) (set! u50b5@u4f5a@u4f55 u4f5a@u4f55) (set! u50b6@u4f5c@u4f54 u4f5c@u4f54) (set! u50b7@u4f5f@p? u4f5f@p?) (set! u50b8@u4f61@make-i/o-file-is-read-only-error u4f61@make-i/o-file-is-read-only-error) (set! u50b9@u4f63@i/o-file-is-read-only-error? u4f63@i/o-file-is-read-only-error?) (set! u50ba@u4f65@&i/o-file-is-read-only-rtd u4f65@&i/o-file-is-read-only-rtd) (set! u50bb@u4f67@&i/o-file-is-read-only-rcd u4f67@&i/o-file-is-read-only-rcd) (set! u50bc@u4f6d@u4f68 u4f6d@u4f68) (set! u50bd@u4f6f@u4f6a u4f6f@u4f6a) (set! u50be@u4f71@u4f69 u4f71@u4f69) (set! u50bf@u4f74@p? u4f74@p?) (set! u50c0@u4f76@make-i/o-file-already-exists-error u4f76@make-i/o-file-already-exists-error) (set! u50c1@u4f78@i/o-file-already-exists-error? u4f78@i/o-file-already-exists-error?) (set! u50c2@u4f7a@&i/o-file-already-exists-rtd u4f7a@&i/o-file-already-exists-rtd) (set! u50c3@u4f7c@&i/o-file-already-exists-rcd u4f7c@&i/o-file-already-exists-rcd) (set! u50c4@u4f82@u4f7d u4f82@u4f7d) (set! u50c5@u4f84@u4f7f u4f84@u4f7f) (set! u50c6@u4f86@u4f7e u4f86@u4f7e) (set! u50c7@u4f89@p? u4f89@p?) (set! u50c8@u4f8b@make-i/o-file-does-not-exist-error u4f8b@make-i/o-file-does-not-exist-error) (set! u50c9@u4f8d@i/o-file-does-not-exist-error? u4f8d@i/o-file-does-not-exist-error?) (set! u50ca@u4f8f@&i/o-file-does-not-exist-rtd u4f8f@&i/o-file-does-not-exist-rtd) (set! u50cb@u4f91@&i/o-file-does-not-exist-rcd u4f91@&i/o-file-does-not-exist-rcd) (set! u50cc@u4f99@u4f94 u4f99@u4f94) (set! u50cd@u4f9b@u4f96 u4f9b@u4f96) (set! u50ce@u4f9d@u4f95 u4f9d@u4f95) (set! u50cf@u4fa0@p? u4fa0@p?) (set! u50d0@u4fa2@make-i/o-port-error u4fa2@make-i/o-port-error) (set! u50d1@u4fa4@u4f93 u4fa4@u4f93) (set! u50d2@u4fa6@i/o-port-error? u4fa6@i/o-port-error?) (set! u50d3@u4fa8@i/o-error-port u4fa8@i/o-error-port) (set! u50d4@u4faa@&i/o-port-rtd u4faa@&i/o-port-rtd) (set! u50d5@u4fac@&i/o-port-rcd u4fac@&i/o-port-rcd) (set! u50d6@u4fb2@u4fad u4fb2@u4fad) (set! u50d7@u4fb4@u4faf u4fb4@u4faf) (set! u50d8@u4fb6@u4fae u4fb6@u4fae) (set! u50d9@u4fb9@p? u4fb9@p?) (set! u50da@u4fbb@make-i/o-decoding-error u4fbb@make-i/o-decoding-error) (set! u50db@u4fbd@i/o-decoding-error? u4fbd@i/o-decoding-error?) (set! u50dc@u4fbf@&i/o-decoding-rtd u4fbf@&i/o-decoding-rtd) (set! u50dd@u4fc1@&i/o-decoding-rcd u4fc1@&i/o-decoding-rcd) (set! u50de@u4fc9@u4fc4 u4fc9@u4fc4) (set! u50df@u4fcb@u4fc6 u4fcb@u4fc6) (set! u50e0@u4fcd@u4fc5 u4fcd@u4fc5) (set! u50e1@u4fd0@p? u4fd0@p?) (set! u50e2@u4fd2@make-i/o-encoding-error u4fd2@make-i/o-encoding-error) (set! u50e3@u4fd4@u4fc3 u4fd4@u4fc3) (set! u50e4@u4fd6@i/o-encoding-error? u4fd6@i/o-encoding-error?) (set! u50e5@u4fd8@i/o-encoding-error-char u4fd8@i/o-encoding-error-char) (set! u50e6@u4fda@&i/o-encoding-rtd u4fda@&i/o-encoding-rtd) (set! u50e7@u4fdc@&i/o-encoding-rcd u4fdc@&i/o-encoding-rcd) (set! u50e8@u4fe2@u4fdd u4fe2@u4fdd) (set! u50e9@u4fe4@u4fdf u4fe4@u4fdf) (set! u50ea@u4fe6@u4fde u4fe6@u4fde) (set! u50eb@u4fe9@p? u4fe9@p?) (set! u50ec@u4feb@make-no-infinities-violation u4feb@make-no-infinities-violation) (set! u50ed@u4fed@no-infinities-violation? u4fed@no-infinities-violation?) (set! u50ee@u4fef@&no-infinities-rtd u4fef@&no-infinities-rtd) (set! u50ef@u4ff1@&no-infinities-rcd u4ff1@&no-infinities-rcd) (set! u50f0@u4ff7@u4ff2 u4ff7@u4ff2) (set! u50f1@u4ff9@u4ff4 u4ff9@u4ff4) (set! u50f2@u4ffb@u4ff3 u4ffb@u4ff3) (set! u50f3@u4ffe@p? u4ffe@p?) (set! u50f4@u5000@make-no-nans-violation u5000@make-no-nans-violation) (set! u50f5@u5002@no-nans-violation? u5002@no-nans-violation?) (set! u50f6@u5004@&no-nans-rtd u5004@&no-nans-rtd) (set! u50f7@u5006@&no-nans-rcd u5006@&no-nans-rcd)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(psyntax primlocs)
((lambda (u50fb@add-library-path! u50fd@parse-and-add-library-path u50ff@for-each-with-index u5101@rpad u5103@condition-printer u5105@record->field-alist u5107@map-with-index u5109@repl u510b@trace-printer u510d@command-line u510f@local-library-path u5111@load/args u5113@load u5115@ironscheme-build u5117@eval-top-level u5119@compile-system-libraries u511b@compile u511d@compile->closure u511f@pre-compile-r6rs-file u5121@load-r6rs-top-level u5123@load-r6rs-top-level-sexp) (begin (set! u50fb@add-library-path! (lambda (u5146@path) (u2d64@u2bd1@library-path (append (u2d64@u2bd1@library-path) (list u5146@path))))) (set! u50fd@parse-and-add-library-path (lambda (u5148@paths u5149@message) ((lambda (u514c@t) (if u514c@t ((lambda (u514e@paths) (for-each (lambda (u5150@path) (if (file-exists? u5150@path) (u50fb@add-library-path! (expand-path u5150@path)) ((lambda () (begin '#f (format (current-error-port) u5149@message u5150@path)))))) (string-split u514e@paths '#\:))) u514c@t) (void))) u5148@paths))) (set! u50ff@for-each-with-index (lambda (u5152@proc u5153@lst) (letrec ((u5156@loop (lambda (u5158@i u5159@lst) (if (null? u5159@lst) (if '#f '#f (void)) (begin (u5152@proc u5158@i (car u5159@lst)) (u5156@loop (+ u5158@i '1) (cdr u5159@lst))))))) (u5156@loop '1 u5153@lst)))) (set! u5101@rpad (lambda (u515c@str u515d@pad u515e@n) ((lambda (u5162@rest) ((letrec ((u5164@loop (lambda (u5166@rest u5167@ret) (if (<= u5166@rest '0) u5167@ret (u5164@loop (- u5166@rest '1) (string-append u5167@ret u515d@pad)))))) u5164@loop) u5162@rest (format '"~a" u515c@str))) (- u515e@n (string-length (format '"~a" u515c@str)))))) (set! u5103@condition-printer (lambda (u516a@e u516b@port) ((lambda (u516f@max-condition-len) (begin (set! u516f@max-condition-len (apply max (map (lambda (u5180@c) (string-length (symbol->string (record-type-name (record-rtd u5180@c))))) (simple-conditions u516a@e)))) (begin (display '" Condition components:\n" u516b@port) (u50ff@for-each-with-index (lambda (u5170@i u5171@x) ((lambda (u5174@rtd u5175@fields-alist) (begin (format u516b@port '" ~d. ~a" u5170@i (u5101@rpad (symbol->string (record-type-name u5174@rtd)) '" " u516f@max-condition-len)) (if (null? u5175@fields-alist) (newline u516b@port) (void)) ((letrec ((u5178@loop (lambda (u517a@first u517b@fields-alist) (if (null? u517b@fields-alist) '() ((lambda () (begin '#f ((lambda (u517e@field) (begin (if (not u517a@first) (display (u5101@rpad '"" '" " (+ '4 u516f@max-condition-len)) u516b@port) (void)) (display '"       " u516b@port) (display (car u517e@field) u516b@port) (display '": " u516b@port) (write (cdr u517e@field) u516b@port) (newline u516b@port) (u5178@loop '#f (cdr u517b@fields-alist)))) (car u517b@fields-alist))))))))) u5178@loop) '#t u5175@fields-alist))) (record-rtd u5171@x) (u5105@record->field-alist u5171@x))) (simple-conditions u516a@e))))) '#f))) (set! u5105@record->field-alist (lambda (u5182@r) ((lambda (u5185@ref) (begin (set! u5185@ref (lambda (u5190@rtd u5191@i u5192@x) ((lambda (u5196@val) (if (symbol? u5196@val) (ungensym u5196@val) u5196@val)) ((record-accessor u5190@rtd u5191@i) u5192@x)))) ((letrec ((u5186@loop (lambda (u5188@ret u5189@rtd) (if u5189@rtd (u5186@loop (append u5188@ret (u5107@map-with-index (lambda (u518c@i u518d@field) (cons u518d@field (u5185@ref u5189@rtd u518c@i u5182@r))) (vector->list (record-type-field-names u5189@rtd)))) (record-type-parent u5189@rtd)) ((lambda () (begin '#f u5188@ret))))))) u5186@loop) '() (record-rtd u5182@r)))) '#f))) (set! u5107@map-with-index (lambda (u5198@proc u5199@lst) ((letrec ((u519c@loop (lambda (u519e@i u519f@lst u51a0@ret) (if (null? u519f@lst) (reverse u51a0@ret) (u519c@loop (+ u519e@i '1) (cdr u519f@lst) (cons (u5198@proc u519e@i (car u519f@lst)) u51a0@ret)))))) u519c@loop) '0 u5199@lst '()))) (set! u5109@repl (lambda u51a4@x ((lambda (u51a7@rec) (begin (set! u51a7@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (u51aa@u51a8) (lambda () (with-exception-handler (lambda (u51ac@e) ((call/cc (lambda (u51ae@u51a9) (u51aa@u51a8 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? u51ac@e) (u5103@condition-printer u51ac@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" u51ac@e))) (u51ae@u51a9 (lambda () (raise-continuable u51ac@e)))))))))) (lambda () ((letrec ((u51b0@loop (lambda (u51b2@line u51b3@accum) ((lambda (u51b7@parentheses-ok? u51b9@eval-string-print) (begin (set! u51b7@parentheses-ok? (lambda (u51be@text) ((letrec ((u51c0@loop (lambda (u51c2@chars u51c3@p0 u51c4@p1) (if (null? u51c2@chars) (= '0 u51c3@p0 u51c4@p1) ((lambda (u51c8@t) (if (memv u51c8@t '(#\()) (u51c0@loop (cdr u51c2@chars) (+ u51c3@p0 '1) u51c4@p1) (if (memv u51c8@t '(#\))) (u51c0@loop (cdr u51c2@chars) (- u51c3@p0 '1) u51c4@p1) (if (memv u51c8@t '(#\[)) (u51c0@loop (cdr u51c2@chars) u51c3@p0 (+ u51c4@p1 '1)) (if (memv u51c8@t '(#\])) (u51c0@loop (cdr u51c2@chars) u51c3@p0 (- u51c4@p1 '1)) ((lambda () (begin '#f (u51c0@loop (cdr u51c2@chars) u51c3@p0 u51c4@p1))))))))) (car u51c2@chars)))))) u51c0@loop) (string->list u51be@text) '0 '0))) (set! u51b9@eval-string-print (lambda (u51bc@text) (if (not (or (string=? '"\n" u51bc@text) (= '0 (string-length u51bc@text)))) (write (u5117@eval-top-level (call-with-port (open-string-input-port u51bc@text) read))) (void)))) (if (eof-object? u51b2@line) (begin (u51b9@eval-string-print u51b3@accum) (exit)) ((lambda (u51ba@current) (if (u51b7@parentheses-ok? u51ba@current) (u51b9@eval-string-print u51ba@current) (u51b0@loop (get-line (current-input-port)) u51ba@current))) (string-append u51b3@accum u51b2@line))))) '#f '#f)))) u51b0@loop) (get-line (current-input-port)) '""))))))) (newline) (u51a7@rec)))) (u51a7@rec))) '#f))) (set! u510b@trace-printer (u2ad0@u299d@make-parameter write)) (set! u510d@command-line (u2ad0@u299d@make-parameter (get-command-line))) (set! u510f@local-library-path (lambda (u51ca@filename) (u2d64@u2bd1@library-path))) (set! u5111@load/args (lambda (u51cc@filename . u51ce@args) (begin (apply u5121@load-r6rs-top-level u51cc@filename 'load u51ce@args) (void)))) (set! u5113@load (lambda (u51d0@filename) (begin (apply u5121@load-r6rs-top-level u51d0@filename 'load (u510d@command-line)) (void)))) (set! u5115@ironscheme-build (lambda () (u5113@load '"ironscheme-buildscript.ss"))) (set! u5117@eval-top-level (lambda (u51d2@x) (u4d22@u3213@eval u51d2@x (u4d3d@u3249@interaction-environment)))) (set! u5119@compile-system-libraries (lambda () (u5117@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! u511b@compile (lambda (u51d4@filename) (u5121@load-r6rs-top-level u51d4@filename 'compile))) (set! u511d@compile->closure (lambda (u51d6@filename) (u5121@load-r6rs-top-level u51d6@filename 'closure))) (set! u511f@pre-compile-r6rs-file (lambda (u51d8@filename) (u5121@load-r6rs-top-level u51d8@filename 'compile))) (set! u5121@load-r6rs-top-level (lambda (u51da@filename u51db@how . u51de@args) ((lambda (u51e4@u51e1 u51e5@u51e3) ((lambda (u51e8@swap) (dynamic-wind u51e8@swap (lambda () ((lambda (u51ea@x*) ((lambda (u51ec@t) (if (memv u51ec@t '(load)) ((lambda (u51f2@u51ef u51f3@u51f1) ((lambda (u51f6@swap) (dynamic-wind u51f6@swap (lambda () ((u4d3a@u3243@compile-r6rs-top-level u51ea@x*))) u51f6@swap)) (lambda () ((lambda (u51f8@t) (begin (u51f2@u51ef u51f3@u51f1) (set! u51f3@u51f1 u51f8@t))) (u51f2@u51ef))))) u510d@command-line (cons u51da@filename (car u51de@args))) (if (memv u51ec@t '(compile)) (begin (u4d3a@u3243@compile-r6rs-top-level u51ea@x*) (u2d68@u2bd9@serialize-all u2acd@u2997@serialize-library u2b19@u2adb@compile-core-expr)) (if '#f '#f (void))))) u51db@how)) (with-input-from-file u51da@filename (lambda () ((letrec ((u51fa@f (lambda () ((lambda (u51fc@x) (if (eof-object? u51fc@x) '() (cons u51fc@x (u51fa@f)))) (u2ac5@u2987@read-annotated))))) u51fa@f)))))) u51e8@swap)) (lambda () ((lambda (u51fe@t) (begin (u51e4@u51e1 u51e5@u51e3) (set! u51e5@u51e3 u51fe@t))) (u51e4@u51e1))))) u2d64@u2bd1@library-path (u510f@local-library-path u51da@filename)))) (set! u5123@load-r6rs-top-level-sexp (lambda (u5200@import-spec u5201@thunk) ((lambda (u5208@u5205 u5209@u5207) ((lambda (u520c@swap) (dynamic-wind u520c@swap (lambda () ((lambda (u5212@u520f u5213@u5211) ((lambda (u5216@swap) (dynamic-wind u5216@swap (lambda () ((u4d3a@u3243@compile-r6rs-top-level (list (cons 'import u5200@import-spec) (list u5201@thunk))))) u5216@swap)) (lambda () ((lambda (u5218@t) (begin (u5212@u520f u5213@u5211) (set! u5213@u5211 u5218@t))) (u5212@u520f))))) u510d@command-line '())) u520c@swap)) (lambda () ((lambda (u521a@t) (begin (u5208@u5205 u5209@u5207) (set! u5209@u5207 u521a@t))) (u5208@u5205))))) u2d64@u2bd1@library-path (u510f@local-library-path '"")))) (begin (begin (u2d69@u2bdb@current-precompiled-library-loader u2ace@u2999@load-serialized-library) (set-symbol-value! 'load u5113@load) (set-symbol-value! 'pre-compile-r6rs-file u511f@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs u5117@eval-top-level) (set-symbol-value! 'expanded2core u2b17@u2ad7@expanded->core) (set-symbol-value! 'trace-printer u510b@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (u5124@c) (condition (u5058@u4e62@make-non-continuable-violation) (u504e@u4e49@make-who-condition 'raise) (u5012@u4daa@make-message-condition '"returned from non-continuable exception") (u5044@u4e2e@make-irritants-condition (list u5124@c))))) (u50fd@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (u50fd@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (u50fb@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (u50fb@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (u50fb@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (u5126@prefix) (u2d65@u2bd3@library-extensions (u5126@prefix '".mosh" (u2d65@u2bd3@library-extensions)))) (lambda (u5128@ext u5129@ls) (append (map (lambda (u512c@x) (string-append u5128@ext u512c@x)) u5129@ls) u5129@ls))) ((lambda (u512e@args u512f@port) ((lambda (u5133@ref) (begin (set! u5133@ref (lambda (u513e@rtd u513f@i u5140@x) ((lambda (u5144@val) (if (symbol? u5144@val) (ungensym u5144@val) u5144@val)) ((record-accessor u513e@rtd u513f@i) u5140@x)))) (with-exception-handler (lambda (u5134@c) (if (condition? u5134@c) (u5103@condition-printer u5134@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" u5134@c))) (lambda () (if ((call/cc (lambda (u5138@u5136) (lambda () (with-exception-handler (lambda (u513a@c) ((call/cc (lambda (u513c@u5137) (u5138@u5136 (lambda () (if '#t '#f (u513c@u5137 (lambda () (raise-continuable u513a@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (u5123@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? u512e@args) (u5109@repl) ((lambda () (begin '#f (u5121@load-r6rs-top-level (car u512e@args) 'load (cdr u512e@args))))))))))) '#f)) (u510d@command-line) (current-error-port))) (set! u521c@u50fb@add-library-path! u50fb@add-library-path!) (set! u521d@u50fd@parse-and-add-library-path u50fd@parse-and-add-library-path) (set! u521e@u50ff@for-each-with-index u50ff@for-each-with-index) (set! u521f@u5101@rpad u5101@rpad) (set! u5220@u5103@condition-printer u5103@condition-printer) (set! u5221@u5105@record->field-alist u5105@record->field-alist) (set! u5222@u5107@map-with-index u5107@map-with-index) (set! u5223@u5109@repl u5109@repl) (set! u5224@u510b@trace-printer u510b@trace-printer) (set! u5225@u510d@command-line u510d@command-line) (set! u5226@u510f@local-library-path u510f@local-library-path) (set! u5227@u5111@load/args u5111@load/args) (set! u5228@u5113@load u5113@load) (set! u5229@u5115@ironscheme-build u5115@ironscheme-build) (set! u522a@u5117@eval-top-level u5117@eval-top-level) (set! u522b@u5119@compile-system-libraries u5119@compile-system-libraries) (set! u522c@u511b@compile u511b@compile) (set! u522d@u511d@compile->closure u511d@compile->closure) (set! u522e@u511f@pre-compile-r6rs-file u511f@pre-compile-r6rs-file) (set! u522f@u5121@load-r6rs-top-level u5121@load-r6rs-top-level) (set! u5230@u5123@load-r6rs-top-level-sexp u5123@load-r6rs-top-level-sexp)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
