;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define G13958 '#f) (define G13957 '#f) (define G13956 '#f) (define G13955 '#f) (define G13954 '#f) (define G13953 '#f) (define G13952 '#f) (define G13951 '#f) (define G13950 '#f) (define G13949 '#f) (define G13948 '#f) (define G13945 '#f) ((lambda (G13799 G13801 G13803 G13805 G13807 G13809 G13811 G13813 G13815 G13817 G13819 G13903) (begin (set! G13799 read) (set! G13801 (lambda (G13905) G13905)) (set! G13803 (lambda (G13907) '#f)) (set! G13805 (lambda (G13909) '())) (set! G13807 (lambda (G13911) G13911)) (set! G13809 (lambda G13913 '#f)) (set! G13811 (lambda G13915 '#f)) (set! G13813 (lambda (G13917 G13918) (lambda G13921 (begin (display '"record printer") (for-each display G13921))))) (set! G13815 (lambda G13923 (apply error 'comile-core '"not implementated" G13923))) (set! G13817 (lambda (G13925) (with-input-from-file G13925 G13799))) (set! G13819 (lambda G13941 ((lambda (G13942) (if (= G13942 '1) (apply (lambda (G13927) (G13819 G13927 (lambda (G13929) G13929))) G13941) (if (= G13942 '2) (apply (lambda (G13931 G13932) (begin (if (procedure? G13932) (void) (error 'assert '"assertion failed" '(procedure? fender))) ((lambda (G13935) (lambda G13939 ((lambda (G13940) (if (= G13940 '0) (apply (lambda () G13935) G13939) (if (= G13940 '1) (apply (lambda (G13937) (set! G13935 (G13932 G13937))) G13939) (error 'apply '"invalid arg count")))) (length G13939)))) (G13932 G13931)))) G13941) (error 'apply '"invalid arg count")))) (length G13941)))) (set! G13903 (lambda (G13943) G13943)) (begin (set! G13945 G13903) (set! G13948 G13819) (set! G13949 G13817) (set! G13950 G13815) (set! G13951 G13813) (set! G13952 G13811) (set! G13953 G13809) (set! G13954 G13807) (set! G13955 G13805) (set! G13956 G13803) (set! G13957 G13801) (set! G13958 G13799)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define G14057 '#f) (define G14056 '#f) (define G14055 '#f) (define G14054 '#f) (define G14053 '#f) (define G14052 '#f) (define G14051 '#f) ((lambda (G13960 G13962 G13964 G13966 G13968 G13970 G13972) (begin (set! G13960 (G13948 (lambda (G13974) '#f) (lambda (G13976) (begin (if (procedure? G13976) (void) (error 'assert '"assertion failed" '(procedure? p))) G13976)))) (set! G13962 (lambda (G13978) ((lambda (G13980) (begin (set! G13980 (lambda (G13982) ((lambda (G13984) (if G13984 G13984 ((lambda (G13986) (if G13986 G13986 ((lambda (G13988) (if G13988 G13988 ((lambda (G13990) (if G13990 G13990 ((lambda (G13992) (if G13992 G13992 ((lambda (G13994) (if G13994 G13994 (begin '#f (number? G13982)))) (bytevector? G13982)))) (string? G13982)))) (boolean? G13982)))) (symbol? G13982)))) (char? G13982)))) (null? G13982)))) (not (G13980 G13978)))) '#f))) (set! G13964 (lambda (G13996) ((lambda (G13998) (begin (set! G13998 (lambda (G14000) (if (pair? G14000) ((lambda (G14002) (if (memv G14002 '(quote)) (if (if G13996 (begin '#f (G13962 (cadr G14000))) '#f) ((lambda (G14041) (begin (set-symbol-value! G14041 (cadr G14000)) G14041)) (gensym)) G14000) (if (memv G14002 '(case-lambda)) (cons 'case-lambda (map (lambda (G14039) (cons (car G14039) (map G13998 (cdr G14039)))) (cdr G14000))) (if (memv G14002 '(lambda)) (cons* 'lambda (cadr G14000) (map G13998 (cddr G14000))) (if (memv G14002 '(letrec)) ((lambda (G14031 G14032) ((lambda (G14035 G14036) (cons* 'letrec (map list G14035 (map G13998 G14036)) (map G13998 G14032))) (map car G14031) (map cadr G14031))) (cadr G14000) (cddr G14000)) (if (memv G14002 '(letrec*)) ((lambda (G14023 G14024) ((lambda (G14027 G14028) (cons* 'letrec* (map list G14027 (map G13998 G14028)) (map G13998 G14024))) (map car G14023) (map cadr G14023))) (cadr G14000) (cddr G14000)) (if (memv G14002 '(library-letrec*)) ((lambda (G14009 G14010) ((lambda (G14013 G14014) ((lambda (G14017 G14018 G14019) (cons* 'library-letrec* G14009 (map list G14017 G14018 (map G13998 G14019)) (map G13998 G14014))) (map car G14013) (map cadr G14013) (map caddr G14013))) (cadr G14010) (cddr G14010))) (cadr G14000) (cdr G14000)) (if (memv G14002 '(begin)) (cons 'begin (map G13998 (cdr G14000))) (if (memv G14002 '(set!)) (list 'set! (cadr G14000) (G13998 (caddr G14000))) (if (memv G14002 '(primitive)) ((lambda (G14003) ((lambda (G14005) (if G14005 ((lambda (G14007) G14007) G14005) G14003)) ((G13960) G14003))) (cadr G14000)) (if (memv G14002 '(define)) G14000 (if (list? G14000) (map G13998 G14000) (error 'rewrite '"invalid form ~s ~s" G14000 (list? G14000)))))))))))))) (car G14000)) G14000))) G13998)) '#f))) (set! G13966 (lambda (G14043) ((G13964 '#t) G14043))) (set! G13968 (lambda (G14045) ((G13964 '#f) G14045))) (set! G13970 write) (set! G13972 (lambda (G14047 G14048) (G13970 ((G13964 '#f) G14047) G14048))) (begin (set! G14051 G13972) (set! G14052 G13970) (set! G14053 G13968) (set! G14054 G13966) (set! G14055 G13964) (set! G14056 G13962) (set! G14057 G13960)))) '#f '#f '#f '#f '#f '#f '#f))


(void)


(begin (define G14538 '#f) (define G14537 '#f) (define G14536 '#f) (define G14535 '#f) (define G14534 '#f) (define G14533 '#f) (define G14532 '#f) (define G14531 '#f) (define G14530 '#f) (define G14529 '#f) (define G14528 '#f) (define G14527 '#f) (define G14526 '#f) (define G14525 '#f) (define G14524 '#f) (define G14523 '#f) (define G14522 '#f) (define G14521 '#f) (define G14520 '#f) (define G14519 '#f) (define G14518 '#f) (define G14517 '#f) (define G14516 '#f) (define G14515 '#f) (define G14514 '#f) (define G14513 '#f) (define G14512 '#f) (define G14511 '#f) (define G14510 '#f) (define G14509 '#f) (define G14508 '#f) (define G14507 '#f) (define G14506 '#f) (define G14505 '#f) (define G14504 '#f) (define G14503 '#f) (define G14502 '#f) (define G14501 '#f) (define G14500 '#f) (define G14499 '#f) (define G14498 '#f) (define G14497 '#f) (define G14496 '#f) (define G14495 '#f) (define G14494 '#f) (define G14493 '#f) (define G14492 '#f) ((lambda (G14121 G14123 G14125 G14127 G14129 G14131 G14133 G14135 G14137 G14139 G14141 G14143 G14145 G14147 G14149 G14151 G14153 G14155 G14157 G14159 G14161 G14163 G14165 G14167 G14169 G14171 G14173 G14175 G14177 G14179 G14181 G14183 G14185 G14187 G14189 G14191 G14193 G14195 G14197 G14199 G14201 G14203 G14205 G14207 G14209 G14211 G14213) (begin (set! G14121 (lambda () ((lambda (G14215) ((lambda (G14217) (begin (set! G14217 (lambda (G14219 G14220) (if (memq G14219 G14220) G14220 (cons G14219 G14220)))) (lambda G14225 ((lambda (G14226) (if (= G14226 '0) (apply (lambda () G14215) G14225) (if (= G14226 '1) (apply (lambda (G14223) (set! G14215 (G14217 G14223 G14215))) G14225) (error 'apply '"invalid arg count")))) (length G14225))))) '#f)) '()))) (set! G14123 (G13948 (G14121) (lambda (G14227) (begin (if (procedure? G14227) (void) (assertion-violation 'current-library-collection '"not a procedure" G14227)) G14227)))) (set! G14125 (make-record-type-descriptor 'library '#f '#f '#f '#f '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G14127 (make-record-constructor-descriptor G14125 '#f '#f)) (set! G14129 (record-constructor G14127)) (set! G14131 (record-predicate G14125)) (set! G14133 (record-accessor G14125 '0)) (set! G14135 (record-accessor G14125 '1)) (set! G14137 (record-accessor G14125 '2)) (set! G14139 (record-accessor G14125 '3)) (set! G14141 (record-accessor G14125 '4)) (set! G14143 (record-accessor G14125 '5)) (set! G14145 (record-accessor G14125 '6)) (set! G14147 (record-accessor G14125 '7)) (set! G14149 (record-accessor G14125 '8)) (set! G14151 (record-accessor G14125 '9)) (set! G14153 (record-accessor G14125 '10)) (set! G14155 (record-accessor G14125 '11)) (set! G14157 (record-accessor G14125 '12)) (set! G14159 (record-accessor G14125 '13)) (set! G14161 (record-mutator G14125 '9)) (set! G14163 (record-mutator G14125 '8)) (set! G14165 (lambda (G14229) (if (null? G14229) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G14167 (lambda (G14231) (letrec ((G14233 (lambda (G14235) (if (null? G14235) '#f (if (G14231 (car G14235)) (car G14235) (G14233 (cdr G14235))))))) (G14233 ((G14123)))))) (set! G14169 (G13948 '(".") (lambda (G14237) (if (if (list? G14237) (begin '#f (for-all string? G14237)) '#f) (map (lambda (G14239) G14239) G14237) (assertion-violation 'library-path '"not a list of strings" G14237))))) (set! G14171 (G13948 '(".sls" ".ss" ".scm") (lambda (G14241) (if (if (list? G14241) (begin '#f (for-all string? G14241)) '#f) (map (lambda (G14243) G14243) G14241) (assertion-violation 'library-extensions '"not a list of strings" G14241))))) (set! G14173 (lambda (G14245) (call-with-values (lambda () (open-string-output-port)) (lambda (G14247 G14248) ((lambda (G14251) (begin (set! G14251 (lambda (G14253) (if (<= '0 G14253 '9) (display G14253 G14247) (display (integer->char (+ (char->integer '#\A) (- G14253 '10))) G14247)))) (begin (letrec ((G14255 (lambda (G14257) (if (null? G14257) (void) (begin (display '"/" G14247) (for-each (lambda (G14259) (if ((lambda (G14261) (if G14261 G14261 ((lambda (G14263) (if G14263 G14263 ((lambda (G14265) (if G14265 G14265 (begin '#f (memv G14259 '(#\- #\. #\_ #\~))))) (char<=? '#\nul G14259 '#\9)))) (char<=? '#\A G14259 '#\Z)))) (char<=? '#\a G14259 '#\z)) (display G14259 G14247) (begin (display '"%" G14247) ((lambda (G14267) (begin (G14251 (quotient G14267 '16)) (G14251 (remainder G14267 '16)))) (char->integer G14259))))) (string->list (symbol->string (car G14257)))) (G14255 (cdr G14257))))))) (G14255 G14245)) (G14248)))) '#f))))) (set! G14175 (G13948 (lambda (G14269) ((lambda (G14271) (letrec ((G14273 (lambda (G14275 G14276 G14277) (if (null? G14275) ((lambda () ((lambda (G14288 G14290 G14292 G14295 G14297 G14299 G14301 G14303 G14305 G14307) (begin (set! G14288 (make-record-type-descriptor '&library-resolution &condition-rtd 'G14287 '#f '#f '#((immutable library) (immutable files)))) (set! G14290 '#f) (set! G14292 (make-record-constructor-descriptor G14288 &condition-rcd G14290)) (set! G14295 (record-predicate G14288)) (set! G14297 (record-constructor G14292)) (set! G14299 (record-accessor G14288 '0)) (set! G14301 (record-accessor G14288 '1)) (set! G14303 (condition-predicate G14288)) (set! G14305 (condition-accessor G14288 G14299)) (set! G14307 (condition-accessor G14288 G14301)) (raise (condition (G21441) (G21415 'expander) (G21461 '"cannot locate library in library-path") (G14297 G14269 (reverse G14277)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G14276) (G14273 (cdr G14275) (G14171) G14277) ((lambda (G14309) (if (file-exists? G14309) G14309 (G14273 G14275 (cdr G14276) (cons G14309 G14277)))) (string-append (car G14275) G14271 (car G14276)))))))) (G14273 (G14169) (G14171) '()))) (G14173 G14269))) (lambda (G14311) (if (procedure? G14311) G14311 (assertion-violation 'file-locator '"not a procedure" G14311))))) (set! G14177 (lambda (G14313 G14314) ((lambda (G14317) (begin (set! G14317 (lambda (G14319) (list (G14133 G14319) (G14135 G14319)))) (for-each (lambda (G14321) (if (G14159 G14321) (G14313 (G14159 G14321) (list (G14133 G14321) (G14135 G14321) (G14137 G14321) (map G14317 (G14139 G14321)) (map G14317 (G14141 G14321)) (map G14317 (G14143 G14321)) (G14145 G14321) (G14147 G14321) (G14314 (G14153 G14321)) (G14314 (G14155 G14321)) (G14157 G14321))) (void))) ((G14123))))) '#f))) (set! G14179 (G13948 (lambda (G14323 G14324) '#f))) (set! G14181 (lambda (G14327) ((G14179) G14327 (lambda G14365 ((lambda (G14366) (if (= G14366 '11) (apply (lambda (G14329 G14330 G14331 G14332 G14333 G14334 G14335 G14336 G14337 G14338 G14339) (letrec ((G14351 (lambda (G14353) (if (null? G14353) (begin (G14201 G14329 G14330 G14331 G14332 G14333 G14334 G14335 G14336 G14337 G14338 '#f '#f G14339 '#f) '#t) ((lambda (G14355) ((lambda (G14357 G14358) ((lambda (G14361) (if (if (G14131 G14361) (begin '#f (eq? G14357 (G14133 G14361))) '#f) (G14351 (cdr G14353)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source.\n" G14330 G14358 G14327) '#f))) (G14191 G14358))) (car G14355) (cadr G14355))) (car G14353)))))) (G14351 (append G14332 G14333 G14334)))) G14365) (if (>= G14366 '0) (apply (lambda G14363 '#f) G14365) (error 'apply '"invalid arg count")))) (length G14365)))))) (set! G14183 (G13948 (lambda (G14367) ((lambda (G14369) (if (not G14369) (assertion-violation '#f '"cannot file library" G14367) ((lambda (G14371) (if G14371 G14371 (begin '#f ((G14185) (G13949 G14369) G14369 (lambda (G14373) (if (equal? G14373 G14367) (void) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G14375 G14376) (begin (display '"expected to find library " G14375) (write G14367 G14375) (display '" in file " G14375) (display G14369 G14375) (display '", found " G14375) (write G14373 G14375) (display '" instead" G14375) (G14376))))))))))) (G14181 G14369)))) ((G14175) G14367))) (lambda (G14379) (if (procedure? G14379) G14379 (assertion-violation 'library-locator '"not a procedure" G14379))))) (set! G14185 (G13948 (lambda (G14381) (assertion-violation 'library-expander '"not initialized")) (lambda (G14383) (if (procedure? G14383) G14383 (assertion-violation 'library-expander '"not a procedure" G14383))))) (set! G14187 (G13948 '())) (set! G14189 (lambda (G14385) (begin (if (member G14385 (G14187)) (assertion-violation '#f '"circular attempt to import library was detected" G14385) (void)) ((lambda (G14389 G14390) ((lambda (G14393) (dynamic-wind G14393 (lambda () (begin ((G14183) G14385) ((lambda (G14395) (if G14395 G14395 (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G14385)))) (G14167 (lambda (G14397) (equal? (G14135 G14397) G14385)))))) G14393)) (lambda () ((lambda (G14399) (begin (G14389 G14390) (set! G14390 G14399))) (G14389))))) G14187 (cons G14385 (G14187)))))) (set! G14191 (lambda (G14401) ((lambda (G14403) (if G14403 G14403 (begin '#f (G14189 G14401)))) (G14167 (lambda (G14405) (equal? (G14135 G14405) G14401)))))) (set! G14193 (lambda (G14407) (if (G14167 (lambda (G14409) (equal? (G14135 G14409) G14407))) (begin '#f '#t) '#f))) (set! G14195 (lambda (G14411) ((lambda (G14413) ((lambda (G14415) (if G14415 G14415 (begin '#f (assertion-violation '#f '"cannot find library with required spec" G14411)))) (G14167 (lambda (G14417) (eq? G14413 (G14133 G14417)))))) (car G14411)))) (set! G14197 (make-eq-hashtable)) (set! G14199 (lambda (G14419) (begin ((lambda (G14421) (for-each (lambda (G14423) ((lambda (G14425 G14426) ((lambda (G14429) (hashtable-set! G14197 G14425 G14429)) ((lambda (G14431) (if (memv G14431 '(global)) (cons 'global (cons G14419 (cdr G14426))) (if (memv G14431 '(global-macro)) (cons 'global-macro (cons G14419 (cdr G14426))) (if (memv G14431 '(global-macro!)) (cons 'global-macro! (cons G14419 (cdr G14426))) G14426)))) (car G14426)))) (car G14423) (cdr G14423))) G14421)) (G14147 G14419)) ((G14123) G14419)))) (set! G14201 (lambda (G14432 G14433 G14434 G14435 G14436 G14437 G14438 G14439 G14440 G14441 G14442 G14443 G14444 G14445) ((lambda (G14460 G14461 G14462) (begin (if (if (symbol? G14432) (if (list? G14433) (begin '#f (list? G14434)) '#f) '#f) (void) (assertion-violation 'install-library '"invalid spec with id/name/ver" G14432 G14433 G14434)) (if (G14193 G14433) (assertion-violation 'install-library '"library is already installed" G14433) (void)) ((lambda (G14466) (G14199 G14466)) (G14129 G14432 G14433 G14434 G14460 G14461 G14462 G14438 G14439 G14440 G14441 G14442 G14443 G14444 G14445)))) (map G14195 G14435) (map G14195 G14436) (map G14195 G14437)))) (set! G14203 (lambda (G14468) (hashtable-ref G14197 G14468 '#f))) (set! G14205 (lambda (G14470) ((lambda (G14472) (if (procedure? G14472) (begin (G14161 G14470 (lambda () (assertion-violation 'invoke '"circularity detected" G14470))) (for-each G14205 (G14143 G14470)) (G14161 G14470 (lambda () (assertion-violation 'invoke '"first invoke did not return" G14470))) (G14472) (G14161 G14470 '#t)) (void))) (G14151 G14470)))) (set! G14207 (lambda (G14474) ((lambda (G14476) (if (procedure? G14476) (begin (G14163 G14474 (lambda () (assertion-violation 'visit '"circularity detected" G14474))) (for-each G14205 (G14141 G14474)) (G14163 G14474 (lambda () (assertion-violation 'invoke '"first visit did not return" G14474))) (G14476) (G14163 G14474 '#t)) (void))) (G14149 G14474)))) (set! G14209 (lambda (G14478) (G14205 (G14195 G14478)))) (set! G14211 (lambda G14488 ((lambda (G14489) (if (= G14489 '1) (apply (lambda (G14480) (letrec ((G14482 (lambda (G14484) (if (null? G14484) '() (if ((lambda (G14486) (if G14486 G14486 (begin '#f (G14157 (car G14484))))) G14480) (cons (car G14484) (G14482 (cdr G14484))) (G14482 (cdr G14484))))))) (G14482 ((G14123))))) G14488) (if (= G14489 '0) (apply (lambda () (G14211 '#f)) G14488) (error 'apply '"invalid arg count")))) (length G14488)))) (set! G14213 (lambda (G14490) (begin (if (G14131 G14490) (void) (assertion-violation 'library-spec '"not a library" G14490)) (list (G14133 G14490) (G14135 G14490) (G14137 G14490))))) (begin (set! G14492 G14213) (set! G14493 G14211) (set! G14494 G14209) (set! G14495 G14207) (set! G14496 G14205) (set! G14497 G14203) (set! G14498 G14201) (set! G14499 G14199) (set! G14500 G14197) (set! G14501 G14195) (set! G14502 G14193) (set! G14503 G14191) (set! G14504 G14189) (set! G14505 G14187) (set! G14506 G14185) (set! G14507 G14183) (set! G14508 G14181) (set! G14509 G14179) (set! G14510 G14177) (set! G14511 G14175) (set! G14512 G14173) (set! G14513 G14171) (set! G14514 G14169) (set! G14515 G14167) (set! G14516 G14165) (set! G14517 G14163) (set! G14518 G14161) (set! G14519 G14159) (set! G14520 G14157) (set! G14521 G14155) (set! G14522 G14153) (set! G14523 G14151) (set! G14524 G14149) (set! G14525 G14147) (set! G14526 G14145) (set! G14527 G14143) (set! G14528 G14141) (set! G14529 G14139) (set! G14530 G14137) (set! G14531 G14135) (set! G14532 G14133) (set! G14533 G14131) (set! G14534 G14129) (set! G14535 G14127) (set! G14536 G14125) (set! G14537 G14123) (set! G14538 G14121)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define G14801 '#f) (define G14793 '#f) (define G14792 '#f) (define G14791 '#f) (define G14787 '#f) (define G14786 '#f) (define G14785 '#f) (define G14784 '#f) (define G14783 '#f) ((lambda (G14540 G14617 G14619 G14621 G14659 G14661 G14663 G14665 G14667) (begin (set! G14540 (lambda (G14669) (cons 'define (cons G14669 '('#f))))) (set! G14617 (lambda (G14671 G14672 G14673) (list 'lambda G14672 G14673))) (set! G14619 (lambda (G14677 G14678 G14679) ((lambda (G14683 G14685 G14687 G14689) (begin (set! G14683 (lambda (G14731) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G14685 (lambda (G14715 G14716 G14717) (call-with-values (lambda () (letrec ((G14721 (lambda (G14723 G14724) (if (pair? G14723) (G14721 (cdr G14723) (+ G14724 '1)) (if (null? G14723) (values G14724 '=) (values G14724 '>=)))))) (G14721 G14717 '0))) (lambda (G14727 G14728) (list (list 'primitive G14728) G14716 (list 'quote G14727)))))) (set! G14687 (lambda (G14707 G14708 G14709 G14710) (list '(primitive apply) (G14617 G14707 G14709 G14710) G14708))) (set! G14689 (lambda (G14691 G14692 G14693) ((lambda (G14697 G14698) (list 'lambda G14697 (G14621 G14691 (list G14698) (list (list '(primitive length) G14697)) (letrec ((G14701 (lambda (G14703 G14704) (if (null? G14703) (G14683 G14691) (list 'if (G14685 G14691 G14698 (car G14703)) (G14687 G14691 G14697 (car G14703) (car G14704)) (G14701 (cdr G14703) (cdr G14704))))))) (G14701 G14678 G14693))))) (gensym) (gensym)))) (if (= (length G14679) '1) (G14617 G14677 (car G14678) (car G14679)) (G14689 G14677 G14678 G14679)))) '#f '#f '#f '#f))) (set! G14621 (lambda (G14733 G14734 G14735 G14736) (cons (G14617 G14733 G14734 G14736) G14735))) (set! G14659 (lambda (G14741 G14742) (letrec ((G14745 (lambda (G14747) (if (null? (cdr G14747)) (car G14747) (if (equal? (car G14747) (G14661)) (G14745 (cdr G14747)) (cons 'begin G14747)))))) (G14745 G14742)))) (set! G14661 (lambda () '((primitive void)))) (set! G14663 (lambda (G14749 G14750 G14751 G14752) (if (null? G14750) G14752 (list 'letrec (map list G14750 G14751) G14752)))) (set! G14665 (lambda (G14757 G14758 G14759 G14760) (if (null? G14758) G14760 (G14621 G14757 G14758 (map (lambda (G14765) (list 'quote '#f)) G14758) (G14659 G14757 (append (map (lambda (G14767 G14768) (list 'set! G14767 G14768)) G14758 G14759) (list G14760))))))) (set! G14667 (lambda (G14771 G14772 G14773 G14774 G14775 G14776) (list 'library-letrec* G14772 (map list G14773 G14774 G14775) G14776))) (begin (set! G14783 G14667) (set! G14784 G14665) (set! G14785 G14663) (set! G14786 G14661) (set! G14787 G14659) (set! G14791 G14621) (set! G14792 G14619) (set! G14793 G14617) (set! G14801 G14540)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define G21098 '#f) (define G21097 '#f) (define G21096 '#f) (define G21095 '#f) (define G21094 '#f) (define G21093 '#f) (define G21092 '#f) (define G21091 '#f) (define G21090 '#f) (define G21089 '#f) (define G21087 '#f) (define G21086 '#f) (define G21085 '#f) (define G21084 '#f) (define G21083 '#f) (define G21082 '#f) (define G21081 '#f) (define G21080 '#f) (define G21079 '#f) (define G21078 '#f) (define G21077 '#f) (define G21076 '#f) (define G21075 '#f) (define G21074 '#f) (define G21073 '#f) (define G21072 '#f) (define G21071 '#f) (define G21070 '#f) (define G21069 '#f) (define G21068 '#f) (define G21067 '#f) (define G21066 '#f) (define G21065 '#f) (define G21064 '#f) (define G21063 '#f) (define G21062 '#f) (define G21061 '#f) (define G21060 '#f) (define G21059 '#f) (define G21058 '#f) (define G21057 '#f) (define G21056 '#f) (define G21055 '#f) (define G21054 '#f) (define G21053 '#f) (define G21052 '#f) (define G21051 '#f) (define G21050 '#f) (define G21049 '#f) (define G21048 '#f) (define G21047 '#f) (define G21046 '#f) (define G21045 '#f) (define G21044 '#f) (define G21043 '#f) (define G21042 '#f) (define G21041 '#f) (define G21040 '#f) (define G21039 '#f) (define G21038 '#f) (define G21037 '#f) (define G21036 '#f) (define G21035 '#f) (define G21034 '#f) (define G21033 '#f) (define G21032 '#f) (define G21031 '#f) (define G21030 '#f) (define G21029 '#f) (define G21028 '#f) (define G21027 '#f) (define G21026 '#f) (define G21025 '#f) (define G21024 '#f) (define G21022 '#f) (define G21021 '#f) (define G21020 '#f) (define G21019 '#f) (define G21018 '#f) (define G21016 '#f) (define G21015 '#f) (define G21014 '#f) (define G21013 '#f) (define G21012 '#f) (define G21011 '#f) (define G21010 '#f) (define G21009 '#f) (define G21008 '#f) (define G21007 '#f) (define G21006 '#f) (define G21005 '#f) (define G21004 '#f) (define G21003 '#f) (define G21002 '#f) (define G21001 '#f) (define G21000 '#f) (define G20999 '#f) (define G20998 '#f) (define G20997 '#f) (define G20996 '#f) (define G20995 '#f) (define G20994 '#f) (define G20993 '#f) (define G20992 '#f) (define G20991 '#f) (define G20990 '#f) (define G20989 '#f) (define G20988 '#f) (define G20987 '#f) (define G20986 '#f) (define G20985 '#f) (define G20984 '#f) (define G20983 '#f) (define G20982 '#f) (define G20981 '#f) (define G20980 '#f) (define G20979 '#f) (define G20978 '#f) (define G20977 '#f) (define G20976 '#f) (define G20975 '#f) (define G20974 '#f) (define G20973 '#f) (define G20972 '#f) (define G20971 '#f) (define G20970 '#f) (define G20969 '#f) (define G20968 '#f) (define G20967 '#f) (define G20966 '#f) (define G20965 '#f) (define G20964 '#f) (define G20963 '#f) (define G20962 '#f) (define G20961 '#f) (define G20960 '#f) (define G20959 '#f) (define G20958 '#f) (define G20957 '#f) (define G20956 '#f) (define G20955 '#f) (define G20954 '#f) (define G20953 '#f) (define G20952 '#f) (define G20951 '#f) (define G20950 '#f) (define G20949 '#f) (define G20948 '#f) (define G20947 '#f) (define G20946 '#f) (define G20945 '#f) (define G20944 '#f) (define G20943 '#f) (define G20942 '#f) (define G20941 '#f) (define G20940 '#f) (define G20939 '#f) (define G20938 '#f) (define G20937 '#f) (define G20936 '#f) (define G20935 '#f) (define G20934 '#f) (define G20933 '#f) (define G20932 '#f) (define G20931 '#f) (define G20930 '#f) (define G20929 '#f) (define G20928 '#f) (define G20927 '#f) (define G20926 '#f) (define G20925 '#f) (define G20924 '#f) (define G20923 '#f) (define G20922 '#f) (define G20921 '#f) (define G20920 '#f) (define G20919 '#f) (define G20918 '#f) (define G20917 '#f) (define G20916 '#f) (define G20915 '#f) (define G20914 '#f) (define G20913 '#f) (define G20912 '#f) (define G20911 '#f) (define G20910 '#f) (define G20909 '#f) (define G20908 '#f) (define G20907 '#f) (define G20906 '#f) (define G20905 '#f) (define G20904 '#f) (define G20903 '#f) (define G20902 '#f) (define G20901 '#f) (define G20900 '#f) (define G20899 '#f) (define G20898 '#f) (define G20897 '#f) (define G20896 '#f) (define G20895 '#f) (define G20894 '#f) (define G20893 '#f) (define G20892 '#f) (define G20891 '#f) (define G20890 '#f) (define G20889 '#f) (define G20888 '#f) (define G20887 '#f) (define G20886 '#f) (define G20885 '#f) (define G20884 '#f) (define G20883 '#f) (define G20882 '#f) (define G20881 '#f) (define G20880 '#f) (define G20879 '#f) (define G20878 '#f) (define G20877 '#f) (define G20876 '#f) (define G20875 '#f) (define G20874 '#f) (define G20873 '#f) (define G20872 '#f) (define G20871 '#f) (define G20870 '#f) (define G20869 '#f) (define G20868 '#f) (define G20867 '#f) (define G20866 '#f) (define G20865 '#f) (define G20864 '#f) (define G20863 '#f) (define G20862 '#f) (define G20861 '#f) (define G20860 '#f) (define G20859 '#f) (define G20858 '#f) (define G20857 '#f) (define G20856 '#f) (define G20855 '#f) ((lambdabegin (set! G14803 (make-record-type-descriptor 'stx '#f '#f '#f '#f '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G14805 (make-record-constructor-descriptor G14803 '#f '#f)) (set! G14807 (record-constructor G14805)) (set! G14809 (record-predicate G14803)) (set! G14811 (record-accessor G14803 '0)) (set! G14813 (record-accessor G14803 '1)) (set! G14815 (record-accessor G14803 '2)) (set! G14817 (record-accessor G14803 '3)) (set! G14819 (lambda (G15531 G15532) (if (memq G15531 G15532) G15532 (cons G15531 G15532)))) (set! G14821 (lambda (G15535 G15536) (if (null? G15535) G15536 (if (memq (car G15535) G15536) (G14821 (cdr G15535) G15536) (cons (car G15535) (G14821 (cdr G15535) G15536)))))) (set! G14826 '(top)) (set! G14828 (lambda (G15539) (memq 'top G15539))) (set! G14830 (lambda (G15541) (if (symbol? G15541) (gensym G15541) (if (G14809 G15541) (G14830 (G14914 G15541)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G15541))))) (set! G14832 (lambda (G15543) (G14830 G15543))) (set! G14834 (lambda (G15545) (gensym))) (set! G14836 (lambda (G15547 G15548) ((lambda (G15551) (begin (set! G15551 (lambda (G15553 G15554 G15555 G15556 G15557) (if (pair? G15555) (begin '#f (if (if (eq? G15553 (car G15555)) (begin '#f (G14916 G15554 (car G15556))) '#f) (car G15557) (G15551 G15553 G15554 (cdr G15555) (cdr G15556) (cdr G15557)))) '#f))) ((lambda (G15563 G15564) ((lambda (G15567) ((lambda (G15569) (if G15569 ((lambda (G15571) (if (G14497 G15571) (gensym) G15571)) G15569) (gensym))) (if (memq G15563 (G14850 G15548)) (begin '#f (G15551 G15563 G15564 G15567 (G14852 G15548) (G14854 G15548))) '#f))) (G14850 G15548))) (G14914 G15547) (G14813 G15547)))) '#f))) (set! G14838 (lambda (G15573 G15574) ((lambda (G15577) (if G15577 ((lambda (G15579) ((lambda (G15581 G15582) (values G15581 ((lambda (G15585) (if G15585 (cdr G15585) ((lambda (G15587) (begin (G15469 G15579 (cons (cons G15581 G15587) G15582)) G15587)) (G14830 G15573)))) (assq G15581 G15582)))) (G14836 G15573 G15574) (G15467 G15579))) G15577) (values (gensym) (G14830 G15573)))) (G15529)))) (set! G14840 (lambda (G15589 G15590) (if (G15529) (G14836 G15589 G15590) (gensym)))) (set! G14842 (make-record-type-descriptor 'rib '#f '#f '#f '#f '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq)))) (set! G14844 (make-record-constructor-descriptor G14842 '#f '#f)) (set! G14846 (record-constructor G14844)) (set! G14848 (record-predicate G14842)) (set! G14850 (record-accessor G14842 '0)) (set! G14852 (record-accessor G14842 '1)) (set! G14854 (record-accessor G14842 '2)) (set! G14856 (record-accessor G14842 '3)) (set! G14858 (record-mutator G14842 '0)) (set! G14860 (record-mutator G14842 '1)) (set! G14862 (record-mutator G14842 '2)) (set! G14864 (record-mutator G14842 '3)) (set! G14866 (lambda () (G14846 '() '() '() '#f))) (set! G14868 (lambda (G15593 G15594 G15595) ((lambda (G15599) (begin (set! G15599 (lambda (G15601 G15602 G15603 G15604 G15605) (if (pair? G15603) (begin '#f (if (if (eq? G15601 (car G15603)) (begin '#f (G14916 G15602 (car G15604))) '#f) G15605 (G15599 G15601 G15602 (cdr G15603) (cdr G15604) (cdr G15605)))) '#f))) (begin (if (G14856 G15593) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G15593) (void)) ((lambda (G15611 G15612) ((lambda (G15615) ((lambda (G15617) (if G15617 ((lambda (G15619) (if (eq? G15595 (car G15619)) (void) (if (G15529) (set-car! G15619 G15595) (G15515 '#f '"cannot redefine" G15594)))) G15617) (begin (G14858 G15593 (cons G15611 G15615)) (G14860 G15593 (cons G15612 (G14852 G15593))) (G14862 G15593 (cons G15595 (G14854 G15593)))))) (if (memq G15611 (G14850 G15593)) (begin '#f (G15599 G15611 G15612 G15615 (G14852 G15593) (G14854 G15593))) '#f))) (G14850 G15593))) (G14914 G15594) (G14813 G15594))))) '#f))) (set! G14870 (lambda (G15621) ((lambda (G15623) (letrec ((G15625 (lambda (G15627 G15628) (if (null? G15628) G15623 (begin (hashtable-update! G15623 (car G15628) (lambda (G15631) (cons G15627 G15631)) '()) (G15625 (+ G15627 '1) (cdr G15628))))))) (G15625 '0 G15621))) (make-eq-hashtable)))) (set! G14872 (lambda (G15633) ((lambda (G15635) (if (null? G15635) (void) (begin (G14858 G15633 (list->vector G15635)) (G14860 G15633 (list->vector (G14852 G15633))) (G14862 G15633 (list->vector (G14854 G15633))) (G14864 G15633 (G14870 G15635))))) (G14850 G15633)))) (set! G14874 (lambda (G15637) (if (G14856 G15637) (begin (G14864 G15637 '#f) (G14858 G15637 (vector->list (G14850 G15637))) (G14860 G15637 (vector->list (G14852 G15637))) (G14862 G15637 (vector->list (G14854 G15637)))) (void)))) (set! G14876 (lambda (G15639 G15640) ((lambda (G15643) (begin (G14872 G15643) G15643)) (G14846 (map G14914 G15639) (map G14813 G15639) G15640 '#f)))) (set! G14878 (lambda (G15645 G15646) (G14807 G15646 (G14813 G15645) (G14815 G15645) (G14817 G15645)))) (set! G14880 (lambda () (string '#\m))) (set! G14882 '#f) (set! G14884 not) (set! G14886 (lambda (G15649 G15650 G15651 G15652) ((lambda (G15657) (begin (set! G15657 (lambda (G15659 G15660) (letrec ((G15663 (lambda (G15665 G15666) (if (null? G15666) (cdr G15660) (cons G15665 (G15663 (car G15666) (cdr G15666))))))) (G15663 (car G15659) (cdr G15659))))) ((lambda (G15669 G15670 G15671) (if (if (not (null? G15649)) (if (not (null? G15669)) (begin '#f (G14884 (car G15669))) '#f) '#f) (values (G15657 G15649 G15669) (G15657 G15650 G15670) (G15657 G15651 G15671)) (values (append G15649 G15669) (append G15650 G15670) (append G15651 G15671)))) (G14813 G15652) (G14815 G15652) (G14817 G15652)))) '#f))) (set! G14888 (lambda (G15675 G15676 G15677 G15678) (if (G14809 G15675) (call-with-values (lambda () (G14886 G15676 G15677 G15678 G15675)) (lambda (G15683 G15684 G15685) (G14807 (G14811 G15675) G15683 G15684 G15685))) (G14807 G15675 G15676 G15677 G15678)))) (set! G14890 (lambda (G15689 G15690 G15691) (G14888 G15690 (list G15689) '(shift) (list G15691)))) (set! G14892 (lambda (G15695 G15696) (G14888 G15696 '() (list G15695) '()))) (set! G14894 (lambda (G15699 G15700) (if (G14809 G15699) (G14894 (G14811 G15699) G15700) (if (G13956 G15699) (G14894 (G13954 G15699) G15700) (G15700 G15699))))) (set! G14896 (lambda (G15703) (if (G14809 G15703) ((lambda (G15705 G15706 G15707 G15708) (map (lambda (G15713) (G14888 G15713 G15706 G15707 G15708)) G15705)) (G14896 (G14811 G15703)) (G14813 G15703) (G14815 G15703) (G14817 G15703)) (if (G13956 G15703) (G14896 (G13954 G15703)) (if (vector? G15703) (vector->list G15703) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G15703)))))) (set! G14898 (lambda (G15715) (G14894 G15715 pair?))) (set! G14900 (lambda (G15717) (G14894 G15717 vector?))) (set! G14902 (lambda (G15719) (G14894 G15719 null?))) (set! G14904 (lambda (G15721) ((lambda (G15723) (if G15723 G15723 (begin '#f (if (G14898 G15721) (begin '#f (G14904 (G14908 G15721))) '#f)))) (G14902 G15721)))) (set! G14906 (lambda (G15725) (if (G14809 G15725) (G14888 (G14906 (G14811 G15725)) (G14813 G15725) (G14815 G15725) (G14817 G15725)) (if (G13956 G15725) (G14906 (G13954 G15725)) (if (pair? G15725) (car G15725) (assertion-violation 'syntax-car '"BUG: not a pair" G15725)))))) (set! G14908 (lambda (G15727) (if (G14809 G15727) (G14888 (G14908 (G14811 G15727)) (G14813 G15727) (G14815 G15727) (G14817 G15727)) (if (G13956 G15727) (G14908 (G13954 G15727)) (if (pair? G15727) (cdr G15727) (assertion-violation 'syntax-cdr '"BUG: not a pair" G15727)))))) (set! G14910 (lambda (G15729) (if (G14898 G15729) (cons (G14906 G15729) (G14910 (G14908 G15729))) (if (G14902 G15729) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G15729))))) (set! G14912 (lambda (G15731) (if (G14809 G15731) (begin '#f ((lambda (G15733) (symbol? (if (G13956 G15733) (G13957 G15733) G15733))) (G14811 G15731))) '#f))) (set! G14914 (lambda (G15735) (begin (if (G14809 G15735) (void) (error 'id->sym '"BUG in ikarus: not an id" G15735)) ((lambda (G15737) ((lambda (G15739) (if (symbol? G15739) G15739 (error 'id->sym '"BUG in ikarus: not an id" G15735))) (if (G13956 G15737) (G13957 G15737) G15737))) (G14811 G15735))))) (set! G14916 (lambda (G15741 G15742) ((lambda (G15745) (if G15745 G15745 (begin '#f (if (pair? G15741) (if (pair? G15742) (if (eq? (car G15741) (car G15742)) (begin '#f (G14916 (cdr G15741) (cdr G15742))) '#f) '#f) '#f)))) (if (null? G15741) (begin '#f (null? G15742)) '#f)))) (set! G14918 (lambda (G15747 G15748) (if (eq? (G14914 G15747) (G14914 G15748)) (begin '#f (G14916 (G14813 G15747) (G14813 G15748))) '#f))) (set! G14920 (lambda (G15751 G15752) ((lambda (G15755 G15756) (if ((lambda (G15759) (if G15759 G15759 (begin '#f G15756))) G15755) (eq? G15755 G15756) (eq? (G14914 G15751) (G14914 G15752)))) (G14940 G15751) (G14940 G15752)))) (set! G14922 (lambda (G15761) (if (for-all G14912 G15761) (begin '#f (G14924 G15761)) '#f))) (set! G14924 (lambda (G15763) ((lambda (G15765) (if G15765 G15765 (begin '#f (if (not (G14926 (car G15763) (cdr G15763))) (begin '#f (G14924 (cdr G15763))) '#f)))) (null? G15763)))) (set! G14926 (lambda (G15767 G15768) (if (pair? G15768) (begin '#f ((lambda (G15771) (if G15771 G15771 (begin '#f (G14926 G15767 (cdr G15768))))) (G14918 G15767 (car G15768)))) '#f))) (set! G14928 (lambda (G15773) ((lambda (G15775) (if G15775 G15775 ((lambda (G15777) (if G15777 G15777 ((lambda (G15779) (if G15779 G15779 ((lambda (G15781) (if G15781 G15781 (begin '#f (bytevector? G15773)))) (boolean? G15773)))) (char? G15773)))) (string? G15773)))) (number? G15773)))) (set! G14930 (lambda (G15783) (if (pair? G15783) (cons (G14930 (car G15783)) (G14930 (cdr G15783))) (if (vector? G15783) (vector-map G14930 G15783) (if (G13956 G15783) (G13957 G15783) G15783))))) (set! G14932 (lambda (G15785 G15786) (if (G14828 G15786) (if ((lambda (G15789) (if G15789 G15789 ((lambda (G15791) (if G15791 G15791 (begin '#f (if (vector? G15785) (if (> (vector-length G15785) '0) (begin '#f (G13956 (vector-ref G15785 '0))) '#f) '#f)))) (if (pair? G15785) (begin '#f (G13956 (car G15785))) '#f)))) (G13956 G15785)) (G14930 G15785) G15785) (letrec ((G15793 (lambda (G15795) (if (G14809 G15795) (G14932 (G14811 G15795) (G14813 G15795)) (if (G13956 G15795) (G13957 G15795) (if (pair? G15795) ((lambda (G15797 G15798) (if (if (eq? G15797 (car G15795)) (begin '#f (eq? G15798 (cdr G15795))) '#f) G15795 (cons G15797 G15798))) (G15793 (car G15795)) (G15793 (cdr G15795))) (if (vector? G15795) ((lambda (G15801) ((lambda (G15803) (if (for-all eq? G15801 G15803) G15795 (list->vector G15803))) (map G15793 G15801))) (vector->list G15795)) G15795))))))) (G15793 G15785))))) (set! G14934 (lambda (G15805) (G14932 G15805 '()))) (set! G14936 (lambda (G15807 G15808 G15809) (if (null? G15809) '#f (if (G14916 G15807 (vector-ref G15808 (car G15809))) (car G15809) (G14936 G15807 G15808 (cdr G15809)))))) (set! G14938 (lambda (G15813) ((lambda (G15815) (if G15815 G15815 (begin '#f ((lambda (G15817) (if G15817 ((lambda (G15819) ((lambda (G15821) (call-with-values (lambda () (G14838 G15813 G15821)) (lambda (G15823 G15824) (begin (G14868 G15821 G15813 G15823) G15823)))) (G15463 G15819))) G15817) '#f)) (G15529))))) (G14940 G15813)))) (set! G14940 (lambda (G15827) ((lambda (G15829) (letrec ((G15831 (lambda (G15833 G15834) (if (null? G15833) '#f (if (eq? (car G15833) 'shift) (G15831 (cdr G15833) (cdr G15834)) ((lambda (G15837) ((lambda (G15839) (if G15839 ((lambda (G15841) ((lambda (G15843) ((lambda (G15845) (if G15845 (vector-ref (G14854 G15837) G15845) (G15831 (cdr G15833) G15834))) (if G15843 (begin '#f (G14936 G15834 (G14852 G15837) (reverse G15843))) '#f))) (hashtable-ref G15841 G15829 '#f))) G15839) (letrec ((G15847 (lambda (G15849 G15850 G15851) (if (null? G15849) (G15831 (cdr G15833) G15834) (if (if (eq? (car G15849) G15829) (begin '#f (G14916 (car G15850) G15834)) '#f) (car G15851) (G15847 (cdr G15849) (cdr G15850) (cdr G15851))))))) (G15847 (G14850 G15837) (G14852 G15837) (G14854 G15837))))) (G14856 G15837))) (car G15833))))))) (G15831 (G14815 G15827) (G14813 G15827)))) (G14914 G15827)))) (set! G14942 (lambda (G15855 G15856) ((lambda (G15859) (if G15859 ((lambda (G15861) (if (if (pair? G15861) (begin '#f (eq? (car G15861) '$core-rtd)) '#f) (cons '$rtd (map G15253 (cdr G15861))) (if (if (pair? G15861) (begin '#f (eq? (car G15861) 'global-rtd)) '#f) ((lambda (G15863 G15864) (cons '$rtd (symbol-value G15864))) (cadr G15861) (cddr G15861)) G15861))) G15859) ((lambda (G15867) (if G15867 (cdr G15867) ((lambda (G15869) (if G15869 ((lambda (G15871) ((lambda (G15873) (if G15873 ((lambda (G15875) (cons* 'lexical (cdr G15875) '#f)) G15873) '(displaced-lexical . #f))) (assq G15855 (G15467 G15871)))) G15869) '(displaced-lexical . #f))) (G15529)))) (assq G15855 G15856)))) (G14497 G15855)))) (set! G14944 cons) (set! G14946 car) (set! G14948 cdr) (set! G14950 (lambda (G15877) (G15513 '#f '"unbound identifier" G15877 (G21379)))) (set! G14952 (lambda (G15879 G15880) (if (G14912 G15879) ((lambda (G15883) ((lambda (G15885) ((lambda (G15887) ((lambda (G15889) ((lambda () (begin (if G15885 (void) (G14950 G15883)) ((lambda (G15891) (if (memv G15891 '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd library mutable)) (values G15889 (G14948 G15887) G15883) (values 'other '#f '#f))) G15889))))) (G14946 G15887))) (G14942 G15885 G15880))) (G14938 G15883))) G15879) (if (G14898 G15879) ((lambda (G15892) (if (G14912 G15892) ((lambda (G15894) ((lambda (G15896) ((lambda (G15898) ((lambda () (begin (if G15894 (void) (G14950 G15892)) ((lambda (G15900) (if (memv G15900 '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import $core-rtd)) (values G15898 (G14948 G15896) G15892) (values 'call '#f '#f))) G15898))))) (G14946 G15896))) (G14942 G15894 G15880))) (G14938 G15892)) (values 'call '#f '#f))) (G14906 G15879)) ((lambda (G15901) (if (G14928 G15901) (values 'constant G15901 '#f) (values 'other '#f '#f))) (G14934 G15879)))))) (set! G14966 (lambda (G15903 G15904) (if (procedure? G15903) (cons* 'local-macro G15903 G15904) (if (if (pair? G15903) (if (eq? (car G15903) 'macro!) (begin '#f (procedure? (cdr G15903))) '#f) '#f) (cons* 'local-macro! (cdr G15903) G15904) (if (if (pair? G15903) (begin '#f (eq? (car G15903) '$rtd)) '#f) G15903 (assertion-violation 'expand '"invalid transformer" G15903)))))) (set! G14968 (lambda (G15907) (if (procedure? G15907) (cons 'macro! G15907) (assertion-violation 'make-variable-transformer '"not a procedure" G15907)))) (set! G14970 (lambda (G15909) (if (pair? G15909) (if (eq? (car G15909) 'macro!) (begin '#f (procedure? (cdr G15909))) '#f) '#f))) (set! G14972 (lambda (G15911) (if (G14970 G15911) (cdr G15911) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G15911)))) (set! G14974 (lambda (G15913) (G14966 (eval-core (G14054 G15913)) G15913))) (set! G15207 (lambda (G15915) ((lambda (G15917) ((lambda (G15919) (if (if G15919 (begin '#f (apply (lambda (G15921 G15922 G15923 G15924) (G14912 G15921)) G15919)) '#f) (apply (lambda (G15929 G15930 G15931 G15932) (begin (G15367 G15930 G15915) (values G15929 (cons 'defun (cons G15930 (cons G15931 G15932)))))) G15919) ((lambda (G15937) ((lambda (G15939) (if (if G15939 (begin '#f (apply (lambda (G15941 G15942) (G14912 G15941)) G15939)) '#f) (apply (lambda (G15945 G15946) (values G15945 (cons 'expr G15946))) G15939) ((lambda (G15949) ((lambda (G15951) (if (if G15951 (begin '#f (apply (lambda (G15953) (G14912 G15953)) G15951)) '#f) (apply (lambda (G15955) (values G15955 (cons 'expr (G15253 '(void))))) G15951) (G15515 '#f '"invalid syntax" G15949))) (G15327 G15949 '(_ any)))) G15937))) (G15327 G15937 '(_ any any)))) G15917))) (G15327 G15917 '(_ (any . any) any . each-any)))) G15915))) (set! G15209 (lambda (G15957) ((lambda (G15959) ((lambda (G15961) (if (if G15961 (begin '#f (apply (lambda (G15963 G15964) (G14912 G15963)) G15961)) '#f) (apply (lambda (G15967 G15968) (values G15967 G15968)) G15961) (G15515 '#f '"invalid syntax" G15959))) (G15327 G15959 '(_ any any)))) G15957))) (set! G15211 (make-eq-hashtable)) (set! G15213 (lambda (G15971) ((lambda (G15973) (if G15973 G15973 (begin '#f ((lambda (G15975) ((lambda (G15977) ((lambda (G15979) ((lambda () (begin (hashtable-set! G15211 G15971 G15979) G15979)))) ((lambda (G15981) (if G15981 ((lambda (G15983) ((lambda (G15985 G15986) (G14892 (G14846 (list G15985) (list G14826) (list G15986) '#f) G15977)) (car G15983) (cdr G15983))) G15981) G15977)) (assq G15971 G15975)))) (G14807 G15971 G14826 '() '()))) (G14526 (G14503 '(psyntax system $all))))))) (hashtable-ref G15211 G15971 '#f)))) (set! G15215 car) (set! G15217 cdr) (set! G15219 set-cdr!) (set! G15221 (lambda (G15989 G15990 G15991) (cons (cons* G15989 'lexical G15990 '#f) G15991))) (set! G15223 (lambda (G15995 G15996 G15997) (if (null? G15995) G15997 (G15223 (cdr G15995) (cdr G15996) (G15221 (car G15995) (car G15996) G15997))))) (set! G15225 (lambda (G16001 G16002 G16003 G16004) ((lambda (G16009) ((lambda (G16011) (if G16011 (apply (lambda (G16013 G16014 G16015 G16016) (if (not (G14922 G16013)) (G15257 G16001 G16013) ((lambda (G16021 G16022) ((lambda (G16025 G16026) ((lambda (G16029 G16030) (G16004 '#f G16021 G16030 G16029)) (G15385 (G14892 G16025 (cons G16015 G16016)) G16026 G16003) (G15359 (map (lambda (G16033) (G14892 G16025 G16033)) G16014) G16026 G16003))) (G14876 G16013 G16022) (G15223 G16022 G16021 G16002))) (map G14830 G16013) (map G14834 G16013)))) G16011) (G15515 '#f '"invalid syntax" G16009))) (G15327 G16009 '(_ #(each (any any)) any . each-any)))) G16001))) (set! G15227 (lambda (G16035 G16036 G16037) (G15225 G16035 G16036 G16037 G14785))) (set! G15229 (lambda (G16041 G16042 G16043) (G15225 G16041 G16042 G16043 G14784))) (set! G15231 (lambda (G16047 G16048 G16049) ((lambda (G16053) (begin (set! G16053 (lambda (G16055) ((lambda (G16057) (if G16057 G16057 (begin '#f (G15515 '#f '"unbound identifier" G16047 G16055)))) (G14938 G16055)))) ((lambda (G16059) ((lambda (G16061) (if G16061 (apply (lambda (G16063 G16064 G16065 G16066) (if (not (G14922 G16063)) (G15257 G16047 G16063) ((lambda (G16071 G16072) (G15385 (cons G16065 G16066) (append (map cons G16071 G16072) G16048) (append (map cons G16071 G16072) G16049))) (map G16053 G16063) (map (lambda (G16075) (G14974 (G15409 G16075 G16049))) G16064)))) G16061) (G15515 '#f '"invalid syntax" G16059))) (G15327 G16059 '(_ #(each (any any)) any . each-any)))) G16047))) '#f))) (set! G15233 (lambda (G16077 G16078 G16079) ((lambda (G16083) ((lambda (G16085) (if (if G16085 (begin '#f (apply (lambda (G16087) (G14912 G16087)) G16085)) '#f) (apply (lambda (G16089) ((lambda (G16091) ((lambda (G16093) ((lambda (G16095) ((lambda () (begin (if G16091 (void) (G14950 G16089)) (if (if (eq? G16095 '$rtd) (begin '#f (not (list? (G14948 G16093)))) '#f) (void) (G15515 '#f '"not a record type" G16077)) (list 'quote (G14948 G16093)))))) (G14946 G16093))) (G14942 G16091 G16078))) (G14938 G16089))) G16085) (G15515 '#f '"invalid syntax" G16083))) (G15327 G16083 '(_ any)))) G16077))) (set! G15235 (lambda (G16097 G16098 G16099) ((lambda (G16103) ((lambda (G16105) (if (if G16105 (begin '#f (apply (lambda (G16107) (G14912 G16107)) G16105)) '#f) (apply (lambda (G16109) ((lambda (G16111) ((lambda (G16113) ((lambda (G16115) ((lambda () (begin (if G16111 (void) (G14950 G16109)) (if (if (eq? G16115 '$rtd) (begin '#f (list? (G14948 G16113))) '#f) (void) (G15515 '#f '"not a record type" G16097)) (G15363 (car (G14948 G16113)) G16098 G16099))))) (G14946 G16113))) (G14942 G16111 G16098))) (G14938 G16109))) G16105) (G15515 '#f '"invalid syntax" G16103))) (G15327 G16103 '(_ any)))) G16097))) (set! G15237 (lambda (G16117 G16118 G16119) ((lambda (G16123) ((lambda (G16125) (if (if G16125 (begin '#f (apply (lambda (G16127) (G14912 G16127)) G16125)) '#f) (apply (lambda (G16129) ((lambda (G16131) ((lambda (G16133) ((lambda (G16135) ((lambda () (begin (if G16131 (void) (G14950 G16129)) (if (if (eq? G16135 '$rtd) (begin '#f (list? (G14948 G16133))) '#f) (void) (G15515 '#f '"invalid type" G16117)) (G15363 (cadr (G14948 G16133)) G16118 G16119))))) (G14946 G16133))) (G14942 G16131 G16118))) (G14938 G16129))) G16125) (G15515 '#f '"invalid syntax" G16123))) (G15327 G16123 '(_ any)))) G16117))) (set! G15239 (lambda (G16137 G16138 G16139) ((lambda (G16143) ((lambda (G16145) (if G16145 (apply (lambda (G16147 G16148 G16149) (list 'if (G15363 G16147 G16138 G16139) (G14787 '#f (G15359 (cons G16148 G16149) G16138 G16139)) (G14786))) G16145) (G15515 '#f '"invalid syntax" G16143))) (G15327 G16143 '(_ any any . each-any)))) G16137))) (set! G15241 (lambda (G16153 G16154 G16155) ((lambda (G16159) ((lambda (G16161) (if G16161 (apply (lambda (G16163 G16164 G16165) (list 'if (G15363 G16163 G16154 G16155) (G14786) (G14787 '#f (G15359 (cons G16164 G16165) G16154 G16155)))) G16161) (G15515 '#f '"invalid syntax" G16159))) (G15327 G16159 '(_ any any . each-any)))) G16153))) (set! G15243 (lambda (G16169 G16170 G16171) ((lambda (G16175) ((lambda (G16177) (if G16177 (apply (lambda (G16179 G16180 G16181) (list 'if (G15363 G16179 G16170 G16171) (G15363 G16180 G16170 G16171) (G15363 G16181 G16170 G16171))) G16177) ((lambda (G16185) ((lambda (G16187) (if G16187 (apply (lambda (G16189 G16190) (list 'if (G15363 G16189 G16170 G16171) (G15363 G16190 G16170 G16171) (G14786))) G16187) (G15515 '#f '"invalid syntax" G16185))) (G15327 G16185 '(_ any any)))) G16175))) (G15327 G16175 '(_ any any any)))) G16169))) (set! G15245 (lambda (G16193 G16194 G16195) ((lambda (G16199 G16201) (begin (set! G16199 (lambda (G16233 G16234 G16235) ((lambda (G16239) ((lambda (G16241) (if G16241 (apply (lambda (G16243 G16244 G16245) (list 'if ((lambda (G16249) (if (= '1 (length G16249)) (list '(primitive eqv?) G16233 (list 'quote (car G16249))) (list '(primitive memv) G16233 (list 'quote G16249)))) (G14934 G16243)) (G14787 '#f (G15359 (cons G16244 G16245) G16194 G16195)) G16235)) G16241) ((lambda (G16251) ((lambda (G16253) (if G16253 (apply (lambda (G16255) (G15515 '#f '"invalid syntax" G16193)) G16253) (G15515 '#f '"invalid syntax" G16251))) (G15327 G16251 'any))) G16239))) (G15327 G16239 '(each-any any . each-any)))) G16234))) (set! G16201 (lambda (G16203 G16204) ((lambda (G16207) ((lambda (G16209) (if G16209 (apply (lambda (G16211 G16212 G16213) (G16199 G16203 G16204 (G14786))) G16209) ((lambda (G16217) ((lambda (G16219) (if G16219 (apply (lambda (G16221 G16222 G16223) (if (if (G14912 G16221) (begin '#f (G14920 G16221 (G15213 'else))) '#f) (G14787 '#f (G15359 (cons G16222 G16223) G16194 G16195)) (G15515 '#f '"invalid syntax" G16193))) G16219) ((lambda (G16227) ((lambda (G16229) (if G16229 (apply (lambda (G16231) (G15515 '#f '"invalid syntax" G16193)) G16229) (G15515 '#f '"invalid syntax" G16227))) (G15327 G16227 'any))) G16217))) (G15327 G16217 '(any any . each-any)))) G16207))) (G15327 G16207 '(each-any any . each-any)))) G16204))) ((lambda (G16257) ((lambda (G16259) (if G16259 (apply (lambda (G16261) (G14787 '#f (list (G15363 G16261 G16194 G16195) (G14786)))) G16259) ((lambda (G16263) ((lambda (G16265) (if G16265 (apply (lambda (G16267 G16268 G16269) ((lambda (G16273) (G14791 '#f (list G16273) (list (G15363 G16267 G16194 G16195)) (letrec ((G16275 (lambda (G16277 G16278) (if (null? G16278) (G16201 G16273 G16277) (G16199 G16273 G16277 (G16275 (car G16278) (cdr G16278))))))) (G16275 G16268 G16269)))) (G14830 't))) G16265) (G15515 '#f '"invalid syntax" G16263))) (G15327 G16263 '(_ any any . each-any)))) G16257))) (G15327 G16257 '(_ any)))) G16193))) '#f '#f))) (set! G15247 (lambda (G16281 G16282 G16283) ((lambda (G16287) ((lambda (G16289) (if G16289 (apply (lambda (G16291) (list 'quote (G14934 G16291))) G16289) (G15515 '#f '"invalid syntax" G16287))) (G15327 G16287 '(_ any)))) G16281))) (set! G15249 (lambda (G16293 G16294 G16295) ((lambda (G16299) ((lambda (G16301) (if G16301 (apply (lambda (G16303 G16304 G16305) (call-with-values (lambda () (G15371 G16293 G16303 (map cons G16304 G16305) G16294 G16295)) (lambda (G16309 G16310) (G14792 '#f G16309 G16310)))) G16301) (G15515 '#f '"invalid syntax" G16299))) (G15327 G16299 '(_ . #(each (any any . each-any)))))) G16293))) (set! G15251 (lambda (G16313 G16314 G16315) ((lambda (G16319) ((lambda (G16321) (if G16321 (apply (lambda (G16323 G16324 G16325) (call-with-values (lambda () (G15369 G16313 G16323 (cons G16324 G16325) G16314 G16315)) (lambda (G16329 G16330) (G14793 '#f G16329 G16330)))) G16321) (G15515 '#f '"invalid syntax" G16319))) (G15327 G16319 '(_ any any . each-any)))) G16313))) (set! G15253 (lambda (G16333) (G14888 (letrec ((G16335 (lambda (G16337) (if (G14809 G16337) G16337 (if (pair? G16337) (cons (G16335 (car G16337)) (G16335 (cdr G16337))) (if (symbol? G16337) (G15213 G16337) (if (vector? G16337) (vector-map G16335 G16337) G16337))))))) (G16335 G16333)) '() '() '()))) (set! G15255 (lambda (G16339) ((lambda (G16341) ((lambda (G16343) (if G16343 (apply (lambda (G16345 G16346 G16347 G16348) ((lambda (G16353) (begin (G15367 (map car G16353) G16339) ((lambda (G16355) (G15253 (list 'let (map list G16355 G16346) (letrec ((G16357 (lambda (G16359 G16360) (if (null? G16359) (cons 'begin (cons '#f (cons G16347 G16348))) (list 'syntax-case (car G16360) '() (list (car G16359) (G16357 (cdr G16359) (cdr G16360))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G16359)) (car G16360)))))))) (G16357 G16345 G16355))))) (G15501 G16346)))) (letrec ((G16363 (lambda (G16365) (if (null? G16365) '() (call-with-values (lambda () (G15325 (car G16365) '())) (lambda (G16367 G16368) (append G16368 (G16363 (cdr G16365))))))))) (G16363 G16345)))) G16343) (G15515 '#f '"invalid syntax" G16341))) (G15327 G16341 '(_ #(each (any any)) any . each-any)))) G16339))) (set! G15257 (lambda (G16371 G16372) ((lambda (G16375) ((lambda (G16377) (if G16377 (apply (lambda (G16379 G16380) (letrec ((G16383 (lambda (G16385) (if (null? G16385) (values) (if (not (G14912 (car G16385))) (G15515 '#f '"not an identifier" G16371 (car G16385)) (begin (G16383 (cdr G16385)) (if (G14926 (car G16385) (cdr G16385)) (G15515 '#f '"duplicate binding" G16371 (car G16385)) (void)))))))) (G16383 (if (G14912 G16380) (cons G16380 G16379) (if (G14902 G16380) G16379 (G15515 '#f '"not an identifier" G16371 G16380)))))) G16377) ((lambda (G16387) ((lambda (G16389) (if G16389 (apply (lambda () (G15515 '#f '"malformed binding form" G16371 G16372)) G16389) (G15515 '#f '"invalid syntax" G16387))) (G15327 G16387 '_))) G16375))) (G15327 G16375 '#(each+ any () any)))) G16372))) (set! G15259 (lambda (G16391) ((lambda (G16393) ((lambda (G16395) (if G16395 (apply (lambda (G16397 G16398 G16399 G16400) (if (G14922 G16397) (G15253 (cons (cons 'lambda (cons G16397 (cons G16399 G16400))) G16398)) (G15257 G16391 G16397))) G16395) ((lambda (G16405) ((lambda (G16407) (if (if G16407 (begin '#f (apply (lambda (G16409 G16410 G16411 G16412 G16413) (G14912 G16409)) G16407)) '#f) (apply (lambda (G16419 G16420 G16421 G16422 G16423) (if (G14922 G16420) (G15253 (cons (list 'letrec (list (list G16419 (cons 'lambda (cons G16420 (cons G16422 G16423))))) G16419) G16421)) (G15257 G16391 G16420))) G16407) (G15515 '#f '"invalid syntax" G16405))) (G15327 G16405 '(_ any #(each (any any)) any . each-any)))) G16393))) (G15327 G16393 '(_ #(each (any any)) any . each-any)))) G16391))) (set! G15261 (lambda (G16429) ((lambda (G16431 G16433) (begin (set! G16431 (lambda (G16453 G16454 G16455) (begin (if (G14912 G16453) (void) (G15515 '#f '"not an indentifier" G16429 G16453)) (if (G14926 G16453 G16454) (G15515 '#f '"duplicate binding" G16429 G16453) (void)) ((lambda (G16459) (values G16459 (cons G16453 G16454) (cons G16459 G16455))) (gensym (G15521 G16453)))))) (set! G16433 (lambda (G16435 G16436 G16437) (if (null? G16435) (values '() G16436 G16437) (call-with-values (lambda () (G16431 (car G16435) G16436 G16437)) (lambda (G16441 G16442 G16443) (call-with-values (lambda () (G16433 (cdr G16435) G16442 G16443)) (lambda (G16447 G16448 G16449) (values (cons G16441 G16447) G16448 G16449)))))))) ((lambda (G16461) ((lambda (G16463) (if G16463 (apply (lambda (G16465 G16466) (cons* (G15253 'let) '() G16465 G16466)) G16463) ((lambda (G16469) ((lambda (G16471) (if G16471 (apply (lambda (G16473 G16474 G16475 G16476) (G15253 (letrec ((G16481 (lambda (G16483 G16484 G16485 G16486) (if (null? G16483) (cons 'let (cons (map list G16485 G16486) (cons G16475 G16476))) ((lambda (G16491) ((lambda (G16493) (if G16493 (apply (lambda (G16495) (call-with-values (lambda () (G16433 G16495 G16485 G16486)) (lambda (G16497 G16498 G16499) (list 'call-with-values (list 'lambda '() (car G16484)) (list 'lambda G16497 (G16481 (cdr G16483) (cdr G16484) G16498 G16499)))))) G16493) ((lambda (G16503) ((lambda (G16505) (if G16505 (apply (lambda (G16507 G16508) (call-with-values (lambda () (G16431 G16508 G16485 G16486)) (lambda (G16511 G16512 G16513) (call-with-values (lambda () (G16433 G16507 G16512 G16513)) (lambda (G16517 G16518 G16519) (list 'call-with-values (list 'lambda '() (car G16484)) (list 'lambda (append G16517 G16511) (G16481 (cdr G16483) (cdr G16484) G16518 G16519)))))))) G16505) ((lambda (G16523) ((lambda (G16525) (if G16525 (apply (lambda (G16527) (G15515 '#f '"malformed bindings" G16429 G16527)) G16525) (G15515 '#f '"invalid syntax" G16523))) (G15327 G16523 'any))) G16503))) (G15327 G16503 '#(each+ any () any)))) G16491))) (G15327 G16491 'each-any))) (car G16483)))))) (G16481 G16473 G16474 '() '())))) G16471) (G15515 '#f '"invalid syntax" G16469))) (G15327 G16469 '(_ #(each (any any)) any . each-any)))) G16461))) (G15327 G16461 '(_ () any . each-any)))) G16429))) '#f '#f))) (set! G15263 (lambda (G16529) ((lambda (G16531) (begin (set! G16531 (lambda (G16533) (if (null? G16533) (void) ((lambda (G16535) (begin (if (G14912 G16535) (void) (G15515 '#f '"not an identifier" G16529 G16535)) (G16531 (cdr G16533)) (if (G14926 G16535 (cdr G16533)) (G15515 '#f '"duplicate identifier" G16529 G16535) (void)))) (car G16533))))) ((lambda (G16537) ((lambda (G16539) (if G16539 (apply (lambda (G16541 G16542) (cons* (G15253 'let) '() G16541 G16542)) G16539) ((lambda (G16545) ((lambda (G16547) (if G16547 (apply (lambda (G16549 G16550 G16551 G16552) (G15253 (letrec ((G16557 (lambda (G16559 G16560) (if (null? G16559) (cons 'begin (cons G16551 G16552)) ((lambda (G16563) ((lambda (G16565) (if G16565 (apply (lambda (G16567) (begin (G16531 G16567) (list 'call-with-values (list 'lambda '() (car G16560)) (list 'lambda G16567 (G16557 (cdr G16559) (cdr G16560)))))) G16565) ((lambda (G16569) ((lambda (G16571) (if G16571 (apply (lambda (G16573 G16574) (begin (G16531 (cons G16574 G16573)) (list 'call-with-values (list 'lambda '() (car G16560)) (list 'lambda (append G16573 G16574) (G16557 (cdr G16559) (cdr G16560)))))) G16571) ((lambda (G16577) ((lambda (G16579) (if G16579 (apply (lambda (G16581) (G15515 '#f '"malformed bindings" G16529 G16581)) G16579) (G15515 '#f '"invalid syntax" G16577))) (G15327 G16577 'any))) G16569))) (G15327 G16569 '#(each+ any () any)))) G16563))) (G15327 G16563 'each-any))) (car G16559)))))) (G16557 G16549 G16550)))) G16547) (G15515 '#f '"invalid syntax" G16545))) (G15327 G16545 '(_ #(each (any any)) any . each-any)))) G16537))) (G15327 G16537 '(_ () any . each-any)))) G16529))) '#f))) (set! G15265 (lambda (G16583) ((lambda (G16585) ((lambda (G16587) (if G16587 (apply (lambda (G16589 G16590 G16591 G16592) (if (G14922 G16590) (G15253 (list 'make-traced-procedure (list 'quote G16589) (cons 'lambda (cons G16590 (cons G16591 G16592))))) (G15257 G16583 G16590))) G16587) ((lambda (G16597) ((lambda (G16599) (if G16599 (apply (lambda (G16601 G16602 G16603 G16604 G16605) (if (G14922 (cons G16603 G16602)) (G15253 (list 'make-traced-procedure (list 'quote G16601) (cons 'lambda (cons (append G16602 G16603) (cons G16604 G16605))))) (G15257 G16583 (append G16602 G16603)))) G16599) (G15515 '#f '"invalid syntax" G16597))) (G15327 G16597 '(_ any #(each+ any () any) any . each-any)))) G16585))) (G15327 G16585 '(_ any each-any any . each-any)))) G16583))) (set! G15267 (lambda (G16611) ((lambda (G16613) ((lambda (G16615) (if G16615 (apply (lambda (G16617 G16618 G16619 G16620) (if (G14922 G16618) (G15253 (list 'define G16617 (list 'make-traced-procedure (list 'quote G16617) (cons 'lambda (cons G16618 (cons G16619 G16620)))))) (G15257 G16611 G16618))) G16615) ((lambda (G16625) ((lambda (G16627) (if G16627 (apply (lambda (G16629 G16630 G16631 G16632 G16633) (if (G14922 (cons G16631 G16630)) (G15253 (list 'define G16629 (list 'make-traced-procedure (list 'quote G16629) (cons 'lambda (cons (append G16630 G16631) (cons G16632 G16633)))))) (G15257 G16611 (append G16630 G16631)))) G16627) ((lambda (G16639) ((lambda (G16641) (if G16641 (apply (lambda (G16643 G16644) (if (G14912 G16643) (G15253 (list 'define G16643 (list 'let (list (list 'v G16644)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G16643) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G15515 '#f '"invalid name" G16611))) G16641) (G15515 '#f '"invalid syntax" G16639))) (G15327 G16639 '(_ any any)))) G16625))) (G15327 G16625 '(_ (any . #(each+ any () any)) any . each-any)))) G16613))) (G15327 G16613 '(_ (any . each-any) any . each-any)))) G16611))) (set! G15269 (lambda (G16647) ((lambda (G16649) ((lambda (G16651) (if G16651 (apply (lambda (G16653 G16654) (if (G14912 G16653) (G15253 (list 'define-syntax G16653 (list 'make-traced-macro (list 'quote G16653) G16654))) (G15515 '#f '"invalid name" G16647))) G16651) (G15515 '#f '"invalid syntax" G16649))) (G15327 G16649 '(_ any any)))) G16647))) (set! G15271 (lambda (G16657) (lambda (G16659) ((lambda (G16661) ((lambda (G16663) (if G16663 (apply (lambda (G16665 G16666 G16667 G16668) (if (G14922 G16665) ((lambda (G16673) (G15253 (cons G16657 (cons (map list G16665 G16673) (cons G16667 G16668))))) (map (lambda (G16675 G16676) (list 'make-traced-macro (list 'quote G16675) G16676)) G16665 G16666)) (G15257 G16659 G16665))) G16663) (G15515 '#f '"invalid syntax" G16661))) (G15327 G16661 '(_ #(each (any any)) any . each-any)))) G16659)))) (set! G15273 (G15271 'let-syntax)) (set! G15275 (G15271 'letrec-syntax)) (set! G15277 (lambda (G16679) ((lambda (G16681) (begin (set! G16681 (lambda (G16683 G16684 G16685) ((lambda (G16689 G16691) (begin (set! G16689 (lambda (G16725 G16726) ((lambda (G16729) ((lambda (G16731) (if G16731 (apply (lambda (G16733 G16734) ((lambda (G16737) (list 'let (list (list G16737 G16733)) (list 'if G16737 (list G16734 G16737) G16726))) (gensym))) G16731) ((lambda (G16739) ((lambda (G16741) (if G16741 (apply (lambda (G16743) ((lambda (G16745) (list 'let (list (list G16745 G16743)) (list 'if G16745 G16745 G16726))) (gensym))) G16741) ((lambda (G16747) ((lambda (G16749) (if G16749 (apply (lambda (G16751 G16752 G16753) (list 'if G16751 (cons 'begin (cons G16752 G16753)) G16726)) G16749) ((lambda (G16757) ((lambda (G16759) (if G16759 (apply (lambda () (G15515 '#f '"invalid guard clause" G16725)) G16759) (G15515 '#f '"invalid syntax" G16757))) (G15327 G16757 '_))) G16747))) (G15327 G16747 '(any any . each-any)))) G16739))) (G15327 G16739 '(any)))) G16729))) (G15327 G16729 '(any #(scheme-id =>) any)))) G16725))) (set! G16691 (lambda (G16693) ((lambda (G16695) ((lambda (G16697) (if G16697 (apply (lambda () (values (list 'raise G16683) '#t)) G16697) ((lambda (G16699) ((lambda (G16701) (if G16701 (apply (lambda (G16703 G16704) (values (cons 'begin (cons G16703 G16704)) '#f)) G16701) ((lambda (G16707) ((lambda (G16709) (if G16709 (apply (lambda (G16711 G16712) (call-with-values (lambda () (G16691 G16712)) (lambda (G16715 G16716) (values (G16689 G16711 G16715) G16716)))) G16709) ((lambda (G16719) ((lambda (G16721) (if G16721 (apply (lambda (G16723) (G15515 '#f '"invalid guard clause" G16723)) G16721) (G15515 '#f '"invalid syntax" G16719))) (G15327 G16719 'any))) G16707))) (G15327 G16707 '(any . any)))) G16699))) (G15327 G16699 '((#(scheme-id else) any . each-any))))) G16695))) (G15327 G16695 '()))) G16693))) (call-with-values (lambda () (G16691 G16685)) (lambda (G16761 G16762) (if G16762 (list G16684 G16761) G16761))))) '#f '#f))) ((lambda (G16765) ((lambda (G16767) (if (if G16767 (begin '#f (apply (lambda (G16769 G16770 G16771 G16772) (G14912 G16769)) G16767)) '#f) (apply (lambda (G16777 G16778 G16779 G16780) ((lambda (G16785) (G15253 (list 'call/cc (list 'lambda (list G16785) (list 'with-exception-handler (list 'lambda (list G16777) (G16681 G16777 G16785 G16778)) (cons 'lambda (cons '() (cons '#f (cons G16779 G16780))))))))) (gensym))) G16767) (G15515 '#f '"invalid syntax" G16765))) (G15327 G16765 '(_ (any . each-any) any . each-any)))) G16679))) '#f))) (set! G15279 (lambda (G16787) ((lambda (G16789 G16791) (begin (set! G16789 (lambda (G16795) ((lambda (G16797) (if G16797 G16797 (begin '#f (if (not (memq (car G16795) (cdr G16795))) (begin '#f (G16789 (cdr G16795))) '#f)))) (null? G16795)))) (set! G16791 (lambda (G16793) (if (null? G16793) '() (cons (car G16793) (G16791 (remq (car G16793) (cdr G16793))))))) ((lambda (G16799) ((lambda (G16801) (if (if G16801 (begin '#f (apply (lambda (G16803 G16804 G16805) (if (G14912 G16803) (if (G14912 G16805) (begin '#f (for-all G14912 G16804)) '#f) '#f)) G16801)) '#f) (apply (lambda (G16809 G16810 G16811) ((lambda (G16815 G16816) (G15253 (list 'begin (list 'define G16816 (list 'enum-set-constructor (list 'make-enumeration (list 'quote G16815)))) (list 'define-syntax G16809 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G16815)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G16809) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G16811 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G16811) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G16815)) (cons 'syntax-violation (cons (list 'quote G16811) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G16816 '('(n* ...)))))))))))) (G16791 (G15521 G16810)) (gensym))) G16801) (G15515 '#f '"invalid syntax" G16799))) (G15327 G16799 '(_ any each-any any)))) G16787))) '#f '#f))) (set! G15281 (lambda (G16819) ((lambda (G16821) ((lambda (G16823) (if G16823 (apply (lambda (G16825) ((lambda (G16827) (G15253 (list 'time-it G16827 (list 'lambda '() G16825)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G16829 G16830) (begin (write (G15521 G16825) G16829) (G16830)))))) G16823) (G15515 '#f '"invalid syntax" G16821))) (G15327 G16821 '(_ any)))) G16819))) (set! G15283 (lambda (G16833) ((lambda (G16835) ((lambda (G16837) (if G16837 (apply (lambda (G16839) (G15253 (list 'make-promise (list 'lambda '() G16839)))) G16837) (G15515 '#f '"invalid syntax" G16835))) (G15327 G16835 '(_ any)))) G16833))) (set! G15285 (lambda (G16841) ((lambda (G16843) ((lambda (G16845) (if G16845 (apply (lambda (G16847) (G15253 (list 'unless G16847 (list 'assertion-violation ''assert '"assertion failed" (list 'quote G16847))))) G16845) (G15515 '#f '"invalid syntax" G16843))) (G15327 G16843 '(_ any)))) G16841))) (set! G15287 (lambda (G16849) ((lambda (G16851) ((lambda (G16853) (if G16853 (apply (lambda (G16855) ((lambda (G16857) (if (memv G16857 '(little)) (G15253 ''little) (if (memv G16857 '(big)) (G15253 ''big) (G15515 '#f '"endianness must be big or little" G16849)))) (G15521 G16855))) G16853) (G15515 '#f '"invalid syntax" G16851))) (G15327 G16851 '(_ any)))) G16849))) (set! G15289 (lambda (G16858) ((lambda (G16860) ((lambda (G16862) (if G16862 (apply (lambda (G16864) (G15253 (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G16864)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G16864) '((syntax (e* ...)))))))))) G16862) ((lambda (G16866) ((lambda (G16868) (if (if G16868 (begin '#f (apply (lambda (G16870 G16871 G16872 G16873 G16874) (if (G14912 G16870) (if (G14912 G16872) (begin '#f (G14912 G16873)) '#f) '#f)) G16868)) '#f) (apply (lambda (G16880 G16881 G16882 G16883 G16884) (G15253 (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G16881)) (list (list 'set! 'id G16883) (list 'syntax G16884)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G16881 '(e* ...))))))))) G16868) (G15515 '#f '"invalid syntax" G16866))) (G15327 G16866 '(_ (any any) ((#(scheme-id set!) any any) any))))) G16860))) (G15327 G16860 '(_ any)))) G16858))) (set! G15291 (lambda (G16890) ((lambda (G16892) (begin (set! G16892 (lambda (G16894) ((lambda (G16896) ((lambda (G16898) (if G16898 (apply (lambda (G16900 G16901) (list G16900 G16901 G16900)) G16898) ((lambda (G16904) ((lambda (G16906) (if G16906 (apply (lambda (G16908 G16909 G16910) (list G16908 G16909 G16910)) G16906) ((lambda (G16914) ((lambda (G16916) (if G16916 (apply (lambda () (G15515 '#f '"invalid binding" G16890)) G16916) (G15515 '#f '"invalid syntax" G16914))) (G15327 G16914 '_))) G16904))) (G15327 G16904 '(any any any)))) G16896))) (G15327 G16896 '(any any)))) G16894))) ((lambda (G16918) ((lambda (G16920) (if G16920 (apply (lambda (G16922 G16923 G16924 G16925) ((lambda (G16930) ((lambda (G16932) (if G16932 (apply (lambda (G16934 G16935 G16936) (if (G14922 G16934) (G15253 (list 'letrec (list (list 'loop (list 'lambda G16934 (list 'if G16923 (cons 'begin (cons '(if #f #f) G16924)) (cons 'begin (append G16925 (list (cons 'loop G16936)))))))) (cons 'loop G16935))) (G15515 '#f '"invalid bindings" G16890))) G16932) (G15515 '#f '"invalid syntax" G16930))) (G15327 G16930 '#(each (any any any))))) (map G16892 G16922))) G16920) (G15515 '#f '"invalid syntax" G16918))) (G15327 G16918 '(_ each-any (any . each-any) . each-any)))) G16890))) '#f))) (set! G15293 (lambda (G16940) ((lambda (G16942) ((lambda (G16944) (if (if G16944 (begin '#f (apply (lambda (G16946 G16947 G16948 G16949) (for-all G14912 G16946)) G16944)) '#f) (apply (lambda (G16954 G16955 G16956 G16957) (G15253 (letrec ((G16962 (lambda (G16964) (if (null? G16964) (cons 'let (cons '() (cons G16956 G16957))) (list 'let (list (car G16964)) (G16962 (cdr G16964))))))) (G16962 (map list G16954 G16955))))) G16944) (G15515 '#f '"invalid syntax" G16942))) (G15327 G16942 '(_ #(each (any any)) any . each-any)))) G16940))) (set! G15295 (lambda (G16966) ((lambda (G16968) ((lambda (G16970) (if G16970 (apply (lambda () '#f) G16970) ((lambda (G16972) ((lambda (G16974) (if G16974 (apply (lambda (G16976 G16977) (G15253 (letrec ((G16980 (lambda (G16982 G16983) (if (null? G16983) (list 'begin '#f G16982) (list 'let (list (list 't G16982)) (list 'if 't 't (G16980 (car G16983) (cdr G16983)))))))) (G16980 G16976 G16977)))) G16974) (G15515 '#f '"invalid syntax" G16972))) (G15327 G16972 '(_ any . each-any)))) G16968))) (G15327 G16968 '(_)))) G16966))) (set! G15297 (lambda (G16986) ((lambda (G16988) ((lambda (G16990) (if G16990 (apply (lambda () '#t) G16990) ((lambda (G16992) ((lambda (G16994) (if G16994 (apply (lambda (G16996 G16997) (G15253 (letrec ((G17000 (lambda (G17002 G17003) (if (null? G17003) (list 'begin '#f G17002) (cons 'if (cons G17002 (cons (G17000 (car G17003) (cdr G17003)) '(#f)))))))) (G17000 G16996 G16997)))) G16994) (G15515 '#f '"invalid syntax" G16992))) (G15327 G16992 '(_ any . each-any)))) G16988))) (G15327 G16988 '(_)))) G16986))) (set! G15299 (lambda (G17006) ((lambda (G17008) ((lambda (G17010) (if G17010 (apply (lambda (G17012 G17013) (G15253 (letrec ((G17016 (lambda (G17018 G17019) (if (null? G17019) ((lambda (G17022) ((lambda (G17024) (if G17024 (apply (lambda (G17026 G17027) (cons 'begin (cons G17026 G17027))) G17024) ((lambda (G17030) ((lambda (G17032) (if G17032 (apply (lambda (G17034 G17035) (list 'let (list (list 't G17034)) (list 'if 't (cons G17035 '(t))))) G17032) ((lambda (G17038) ((lambda (G17040) (if G17040 (apply (lambda (G17042) (cons 'or (cons G17042 '((if #f #f))))) G17040) ((lambda (G17044) ((lambda (G17046) (if G17046 (apply (lambda (G17048 G17049) (list 'if G17048 (cons 'begin G17049))) G17046) ((lambda (G17052) ((lambda (G17054) (if G17054 (apply (lambda () (G15515 '#f '"invalid last clause" G17006)) G17054) (G15515 '#f '"invalid syntax" G17052))) (G15327 G17052 '_))) G17044))) (G15327 G17044 '(any . each-any)))) G17038))) (G15327 G17038 '(any)))) G17030))) (G15327 G17030 '(any #(scheme-id =>) any)))) G17022))) (G15327 G17022 '(#(scheme-id else) any . each-any)))) G17018) ((lambda (G17056) ((lambda (G17058) (if G17058 (apply (lambda (G17060 G17061) (G15515 '#f '"incorrect position of keyword else" G17006)) G17058) ((lambda (G17064) ((lambda (G17066) (if G17066 (apply (lambda (G17068 G17069) (list 'let (list (list 't G17068)) (list 'if 't (cons G17069 '(t)) (G17016 (car G17019) (cdr G17019))))) G17066) ((lambda (G17072) ((lambda (G17074) (if G17074 (apply (lambda (G17076) (list 'or G17076 (G17016 (car G17019) (cdr G17019)))) G17074) ((lambda (G17078) ((lambda (G17080) (if G17080 (apply (lambda (G17082 G17083) (list 'if G17082 (cons 'begin G17083) (G17016 (car G17019) (cdr G17019)))) G17080) ((lambda (G17086) ((lambda (G17088) (if G17088 (apply (lambda () (G15515 '#f '"invalid last clause" G17006)) G17088) (G15515 '#f '"invalid syntax" G17086))) (G15327 G17086 '_))) G17078))) (G15327 G17078 '(any . each-any)))) G17072))) (G15327 G17072 '(any)))) G17064))) (G15327 G17064 '(any #(scheme-id =>) any)))) G17056))) (G15327 G17056 '(#(scheme-id else) any . each-any)))) G17018))))) (G17016 G17012 G17013)))) G17010) (G15515 '#f '"invalid syntax" G17008))) (G15327 G17008 '(_ any . each-any)))) G17006))) (set! G15301 (lambda (G17090 G17091 G17092) ((lambda (G17096) (begin (if (if (string? G17096) (begin '#f (G14912 G17091)) '#f) (void) (G15515 '#f '"invalid syntax" G17090)) (cons (G15253 'begin) (with-input-from-file G17096 (lambda () (letrec ((G17098 (lambda (G17100) ((lambda (G17102) (if (eof-object? G17102) (reverse G17100) (G17098 (cons (G14878 G17091 G17102) G17100)))) (G13958))))) (G17098 '()))))))) (G14934 G17092)))) (set! G15303 (lambda (G17104) ((lambda (G17106) ((lambda (G17108) (if G17108 (apply (lambda (G17110 G17111) (G15301 G17104 G17110 G17111)) G17108) (G15515 '#f '"invalid syntax" G17106))) (G15327 G17106 '(any any)))) G17104))) (set! G15305 (lambda (G17114) ((lambda (G17116) ((lambda (G17118) (if G17118 (apply (lambda (G17120 G17121) (G15301 G17114 G17120 G17121)) G17118) (G15515 '#f '"invalid syntax" G17116))) (G15327 G17116 '(_ any any)))) G17114))) (set! G15307 (lambda (G17124) ((lambda (G17126) ((lambda (G17128) (if G17128 (apply (lambda (G17130 G17131 G17132) (begin (G15333 G17130 G17124) (G15253 (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G17130 (map (lambda (G17136 G17137) ((lambda (G17140) ((lambda (G17142) (if G17142 (apply (lambda (G17144) (list (cons 'g G17144) (list 'syntax G17137))) G17142) ((lambda (G17146) ((lambda (G17148) (if G17148 (apply (lambda () (G15515 '#f '"invalid syntax-rules pattern" G17124 G17136)) G17148) (G15515 '#f '"invalid syntax" G17146))) (G15327 G17146 '_))) G17140))) (G15327 G17140 '(_ . any)))) G17136)) G17131 G17132)))))))) G17128) (G15515 '#f '"invalid syntax" G17126))) (G15327 G17126 '(_ each-any . #(each (any any)))))) G17124))) (set! G15309 ((lambda () ((lambda (G17150 G17174 G17176 G17178 G17180 G17182 G17184) (begin (set! G17150 (lambda (G17396) (list (G15213 'quote) (G14888 G17396 '() '() '())))) (set! G17174 (lambda (G17388 G17389) (letrec ((G17392 (lambda (G17394) (if (null? G17394) G17389 (G17176 (car G17394) (G17392 (cdr G17394))))))) (G17392 G17388)))) (set! G17176 (lambda (G17350 G17351) ((lambda (G17354) ((lambda (G17356) (if G17356 (apply (lambda (G17358) ((lambda (G17360) ((lambda (G17362) (if G17362 (apply (lambda (G17364) (list (G15213 'quote) (cons G17364 G17358))) G17362) ((lambda (G17366) ((lambda (G17368) (if G17368 (apply (lambda () ((lambda (G17370) ((lambda (G17372) (if G17372 (apply (lambda () (list (G15213 'list) G17350)) G17372) ((lambda (G17374) ((lambda (G17376) (if G17376 (apply (lambda () (list (G15213 'cons) G17350 G17351)) G17376) (G15515 '#f '"invalid syntax" G17374))) (G15327 G17374 '_))) G17370))) (G15327 G17370 '()))) G17358)) G17368) (G15515 '#f '"invalid syntax" G17366))) (G15327 G17366 '_))) G17360))) (G15327 G17360 '(#(scheme-id quote) any)))) G17350)) G17356) ((lambda (G17378) ((lambda (G17380) (if G17380 (apply (lambda (G17382) (cons* (G15213 'list) G17350 G17382)) G17380) ((lambda (G17384) ((lambda (G17386) (if G17386 (apply (lambda () (list (G15213 'cons) G17350 G17351)) G17386) (G15515 '#f '"invalid syntax" G17384))) (G15327 G17384 '_))) G17378))) (G15327 G17378 '(#(scheme-id list) . each-any)))) G17354))) (G15327 G17354 '(#(scheme-id quote) any)))) G17351))) (set! G17178 (lambda (G17324 G17325) ((lambda (G17328) (if (null? G17328) (list (G15213 'quote) '()) (if (null? (cdr G17328)) (car G17328) (cons* (G15213 'append) G17328)))) (letrec ((G17330 (lambda (G17332) (if (null? G17332) ((lambda (G17334) ((lambda (G17336) (if G17336 (apply (lambda () '()) G17336) ((lambda (G17338) ((lambda (G17340) (if G17340 (apply (lambda () (list G17325)) G17340) (G15515 '#f '"invalid syntax" G17338))) (G15327 G17338 '_))) G17334))) (G15327 G17334 '(#(scheme-id quote) ())))) G17325) ((lambda (G17342) ((lambda (G17344) (if G17344 (apply (lambda () (G17330 (cdr G17332))) G17344) ((lambda (G17346) ((lambda (G17348) (if G17348 (apply (lambda () (cons (car G17332) (G17330 (cdr G17332)))) G17348) (G15515 '#f '"invalid syntax" G17346))) (G15327 G17346 '_))) G17342))) (G15327 G17342 '(#(scheme-id quote) ())))) (car G17332)))))) (G17330 G17324))))) (set! G17180 (lambda (G17274) ((lambda (G17276) ((lambda (G17278) ((lambda (G17280) (if G17280 (apply (lambda (G17282) (list (G15213 'quote) (list->vector G17282))) G17280) ((lambda (G17284) ((lambda (G17286) (if G17286 (apply (lambda () (letrec ((G17288 (lambda (G17292 G17293) ((lambda (G17296) ((lambda (G17298) (if G17298 (apply (lambda (G17300) (G17293 (map (lambda (G17302) (list (G15213 'quote) G17302)) G17300))) G17298) ((lambda (G17304) ((lambda (G17306) (if G17306 (apply (lambda (G17308) (G17293 G17308)) G17306) ((lambda (G17310) ((lambda (G17312) (if G17312 (apply (lambda (G17314 G17315) (G17288 G17315 (lambda (G17318) (G17293 (cons G17314 G17318))))) G17312) ((lambda (G17320) ((lambda (G17322) (if G17322 (apply (lambda () (list (G15213 'list->vector) G17276)) G17322) (G15515 '#f '"invalid syntax" G17320))) (G15327 G17320 '_))) G17310))) (G15327 G17310 '(#(scheme-id cons) any any)))) G17304))) (G15327 G17304 '(#(scheme-id list) . each-any)))) G17296))) (G15327 G17296 '(#(scheme-id quote) each-any)))) G17292)))) (G17288 G17274 (lambda (G17290) (cons* (G15213 'vector) G17290))))) G17286) (G15515 '#f '"invalid syntax" G17284))) (G15327 G17284 '_))) G17278))) (G15327 G17278 '(#(scheme-id quote) each-any)))) G17276)) G17274))) (set! G17182 (lambda (G17240 G17241) ((lambda (G17244) ((lambda (G17246) (if G17246 (apply (lambda (G17248 G17249) ((lambda (G17252) ((lambda (G17254) (if G17254 (apply (lambda (G17256) (if (= G17241 '0) (G17174 G17256 (G17182 G17249 G17241)) (G17176 (G17176 (G17150 'unquote) (G17184 G17256 (- G17241 '1))) (G17182 G17249 G17241)))) G17254) ((lambda (G17258) ((lambda (G17260) (if G17260 (apply (lambda (G17262) (if (= G17241 '0) (G17178 G17262 (G17182 G17249 G17241)) (G17176 (G17176 (G17150 'unquote-splicing) (G17184 G17262 (- G17241 '1))) (G17182 G17249 G17241)))) G17260) ((lambda (G17264) ((lambda (G17266) (if G17266 (apply (lambda (G17268) (G17176 (G17184 G17268 G17241) (G17182 G17249 G17241))) G17266) (G15515 '#f '"invalid syntax" G17264))) (G15327 G17264 'any))) G17258))) (G15327 G17258 '(#(scheme-id unquote-splicing) . each-any)))) G17252))) (G15327 G17252 '(#(scheme-id unquote) . each-any)))) G17248)) G17246) ((lambda (G17270) ((lambda (G17272) (if G17272 (apply (lambda () (list (G15213 'quote) '())) G17272) (G15515 '#f '"invalid syntax" G17270))) (G15327 G17270 '()))) G17244))) (G15327 G17244 '(any . any)))) G17240))) (set! G17184 (lambda (G17186 G17187) ((lambda (G17190) ((lambda (G17192) (if G17192 (apply (lambda (G17194) (if (= G17187 '0) G17194 (G17176 (G17150 'unquote) (G17184 (list G17194) (- G17187 '1))))) G17192) ((lambda (G17196) ((lambda (G17198) (if G17198 (apply (lambda (G17200 G17201) (if (= G17187 '0) (G17174 G17200 (G17184 G17201 G17187)) (G17176 (G17176 (G17150 'unquote) (G17184 G17200 (- G17187 '1))) (G17184 G17201 G17187)))) G17198) ((lambda (G17204) ((lambda (G17206) (if G17206 (apply (lambda (G17208 G17209) (if (= G17187 '0) (G17178 G17208 (G17184 G17209 G17187)) (G17176 (G17176 (G17150 'unquote-splicing) (G17184 G17208 (- G17187 '1))) (G17184 G17209 G17187)))) G17206) ((lambda (G17212) ((lambda (G17214) (if G17214 (apply (lambda (G17216) (G17176 (G17150 'quasiquote) (G17184 (list G17216) (+ G17187 '1)))) G17214) ((lambda (G17218) ((lambda (G17220) (if G17220 (apply (lambda (G17222 G17223) (G17176 (G17184 G17222 G17187) (G17184 G17223 G17187))) G17220) ((lambda (G17226) ((lambda (G17228) (if (if G17228 (begin '#f (apply (lambda (G17230) (not (G14809 G17230))) G17228)) '#f) (apply (lambda (G17232) (G17180 (G17182 G17232 G17187))) G17228) ((lambda (G17234) ((lambda (G17236) (if G17236 (apply (lambda (G17238) (list (G15213 'quote) G17238)) G17236) (G15515 '#f '"invalid syntax" G17234))) (G15327 G17234 'any))) G17226))) (G15327 G17226 '#(vector each-any)))) G17218))) (G15327 G17218 '(any . any)))) G17212))) (G15327 G17212 '(#(scheme-id quasiquote) any)))) G17204))) (G15327 G17204 '((#(scheme-id unquote-splicing) . each-any) . any)))) G17196))) (G15327 G17196 '((#(scheme-id unquote) . each-any) . any)))) G17190))) (G15327 G17190 '(#(scheme-id unquote) any)))) G17186))) (lambda (G17398) ((lambda (G17400) ((lambda (G17402) (if G17402 (apply (lambda (G17404) (G17184 G17404 '0)) G17402) (G15515 '#f '"invalid syntax" G17400))) (G15327 G17400 '(_ any)))) G17398)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G15311 ((lambda () ((lambda (G17406) (begin (set! G17406 (lambda (G17408 G17409) ((lambda (G17412) ((lambda (G17414) (if G17414 (apply (lambda (G17416) (if (= G17409 '0) ((lambda (G17418) (values (list G17418) (list G17416) G17418)) (gensym)) (call-with-values (lambda () (G17406 G17416 (- G17409 '1))) (lambda (G17420 G17421 G17422) (values G17420 G17421 (list 'unsyntax G17422)))))) G17414) ((lambda (G17426) ((lambda (G17428) (if (if G17428 (begin '#f (apply (lambda () (= G17409 '0)) G17428)) '#f) (apply (lambda () (G15515 '#f '"incorrect use of unsyntax" G17408)) G17428) ((lambda (G17430) ((lambda (G17432) (if G17432 (apply (lambda (G17434 G17435) (call-with-values (lambda () (G17406 G17435 G17409)) (lambda (G17438 G17439 G17440) (if (= G17409 '0) ((lambda (G17444) (values (cons (cons G17444 '(...)) G17438) (cons G17434 G17439) (cons G17444 (cons '... G17440)))) (gensym)) (call-with-values (lambda () (G17406 G17434 (- G17409 '1))) (lambda (G17446 G17447 G17448) (values (append G17446 G17438) (append G17447 G17439) (cons (list 'unsyntax-splicing G17448) G17440)))))))) G17432) ((lambda (G17452) ((lambda (G17454) (if (if G17454 (begin '#f (apply (lambda () (= G17409 '0)) G17454)) '#f) (apply (lambda () (G15515 '#f '"incorrect use of unsyntax-splicing" G17408)) G17454) ((lambda (G17456) ((lambda (G17458) (if G17458 (apply (lambda (G17460) (call-with-values (lambda () (G17406 G17460 (+ G17409 '1))) (lambda (G17462 G17463 G17464) (values G17462 G17463 (list 'quasisyntax G17464))))) G17458) ((lambda (G17468) ((lambda (G17470) (if G17470 (apply (lambda (G17472 G17473) (call-with-values (lambda () (G17406 G17472 G17409)) (lambda (G17476 G17477 G17478) (call-with-values (lambda () (G17406 G17473 G17409)) (lambda (G17479 G17480 G17481) (values (append G17479 G17476) (append G17480 G17477) (cons G17478 G17481))))))) G17470) ((lambda (G17488) ((lambda (G17490) (if (if G17490 (begin '#f (apply (lambda (G17492) (not (G14809 G17408))) G17490)) '#f) (apply (lambda (G17494) (call-with-values (lambda () (letrec ((G17496 (lambda (G17498) (if (null? G17498) (values '() '() '()) (call-with-values (lambda () (G17406 (car G17498) G17409)) (lambda (G17500 G17501 G17502) (call-with-values (lambda () (G17496 (cdr G17498))) (lambda (G17506 G17507 G17508) (values (append G17500 G17506) (append G17501 G17507) (cons G17502 G17508)))))))))) (G17496 G17494))) (lambda (G17512 G17513 G17514) (values G17512 G17513 (list->vector G17514))))) G17490) ((lambda (G17518) ((lambda (G17520) (if G17520 (apply (lambda () (values '() '() G17408)) G17520) (G15515 '#f '"invalid syntax" G17518))) (G15327 G17518 '_))) G17488))) (G15327 G17488 '#(vector each-any)))) G17468))) (G15327 G17468 '(any . any)))) G17456))) (G15327 G17456 '(#(scheme-id quasisyntax) any)))) G17452))) (G15327 G17452 '#(scheme-id unsyntax-splicing)))) G17430))) (G15327 G17430 '((#(scheme-id unsyntax-splicing) any) . any)))) G17426))) (G15327 G17426 '#(scheme-id unsyntax)))) G17412))) (G15327 G17412 '(#(scheme-id unsyntax) any)))) G17408))) (lambda (G17522) ((lambda (G17524) ((lambda (G17526) (if G17526 (apply (lambda (G17528) (call-with-values (lambda () (G17406 G17528 '0)) (lambda (G17530 G17531 G17532) (G15253 (list 'syntax-case (cons 'list G17531) '() (list G17530 (list 'syntax G17532))))))) G17526) (G15515 '#f '"invalid syntax" G17524))) (G15327 G17524 '(_ any)))) G17522)))) '#f)))) (set! G15313 (lambda (G17536) (G15515 '#f '"define-struct not supported" G17536))) (set! G15315 (lambda (G17538) ((lambda (G17540 G17542 G17544 G17546 G17548 G17550 G17552 G17554 G17556 G17558 G17560 G17562 G17564 G17566 G17568 G17570 G17572) (begin (set! G17540 (lambda (G18036 . G18038) (G15519 G18036 (string->symbol (apply string-append (map (lambda (G18040) (if (symbol? G18040) (symbol->string G18040) (if (string? G18040) G18040 (assertion-violation 'define-record-type '"BUG")))) G18038)))))) (set! G17542 (lambda (G18018) ((lambda (G18020) ((lambda (G18022) (if G18022 (apply (lambda (G18024 G18025 G18026) G18024) G18022) ((lambda (G18030) ((lambda (G18032) (if G18032 (apply (lambda (G18034) G18034) G18032) (G15515 '#f '"invalid syntax" G18030))) (G15327 G18030 'any))) G18020))) (G15327 G18020 '(any any any)))) G18018))) (set! G17544 (lambda (G17998) ((lambda (G18000) ((lambda (G18002) (if G18002 (apply (lambda (G18004 G18005 G18006) G18005) G18002) ((lambda (G18010) ((lambda (G18012) (if (if G18012 (begin '#f (apply (lambda (G18014) (G14912 G18014)) G18012)) '#f) (apply (lambda (G18016) (G17540 G18016 '"make-" (G14934 G18016))) G18012) (G15515 '#f '"invalid syntax" G18010))) (G15327 G18010 'any))) G18000))) (G15327 G18000 '(any any any)))) G17998))) (set! G17546 (lambda (G17978) ((lambda (G17980) ((lambda (G17982) (if G17982 (apply (lambda (G17984 G17985 G17986) G17986) G17982) ((lambda (G17990) ((lambda (G17992) (if (if G17992 (begin '#f (apply (lambda (G17994) (G14912 G17994)) G17992)) '#f) (apply (lambda (G17996) (G17540 G17996 (G14934 G17996) '"?")) G17992) (G15515 '#f '"invalid syntax" G17990))) (G15327 G17990 'any))) G17980))) (G15327 G17980 '(any any any)))) G17978))) (set! G17548 (lambda (G17960 G17961) ((lambda (G17964) ((lambda (G17966) (if G17966 (apply (lambda () '#f) G17966) ((lambda (G17968) ((lambda (G17970) (if G17970 (apply (lambda (G17972 G17973 G17974) (if (G14920 (G15253 G17960) G17972) (cons G17972 G17973) (G17548 G17960 G17974))) G17970) (G15515 '#f '"invalid syntax" G17968))) (G15327 G17968 '((any . any) . any)))) G17964))) (G15327 G17964 '()))) G17961))) (set! G17550 (lambda (G17878 G17879 G17880) ((lambda (G17884) (begin (set! G17884 (lambda (G17886) (list->vector (map (lambda (G17888) ((lambda (G17890) ((lambda (G17892) (if G17892 (apply (lambda (G17894 G17895) (list 'mutable G17894)) G17892) ((lambda (G17898) ((lambda (G17900) (if G17900 (apply (lambda (G17902 G17903) (list 'immutable G17902)) G17900) ((lambda (G17906) ((lambda (G17908) (if G17908 (apply (lambda (G17910) (list 'immutable G17910)) G17908) (G15515 '#f '"invalid syntax" G17906))) (G15327 G17906 'any))) G17898))) (G15327 G17898 '(#(scheme-id immutable) any . any)))) G17890))) (G15327 G17890 '(#(scheme-id mutable) any . any)))) G17888)) G17886)))) ((lambda (G17912 G17913 G17914 G17915) (G15253 (list 'make-record-type-descriptor (list 'quote G17878) G17880 G17912 G17913 G17914 G17915))) ((lambda (G17920) ((lambda (G17922) (if G17922 (apply (lambda () (list 'quote (gensym))) G17922) ((lambda (G17924) ((lambda (G17926) (if G17926 (apply (lambda (G17928) (list 'quote G17928)) G17926) ((lambda (G17930) ((lambda (G17932) (if G17932 (apply (lambda () '#f) G17932) (G15515 '#f '"invalid syntax" G17930))) (G15327 G17930 '_))) G17924))) (G15327 G17924 '(_ any)))) G17920))) (G15327 G17920 '(_)))) (G17548 'nongenerative G17879)) ((lambda (G17934) ((lambda (G17936) (if G17936 (apply (lambda () '#t) G17936) ((lambda (G17938) ((lambda (G17940) (if G17940 (apply (lambda () '#f) G17940) (G15515 '#f '"invalid syntax" G17938))) (G15327 G17938 '_))) G17934))) (G15327 G17934 '(_ #(atom #t))))) (G17548 'sealed G17879)) ((lambda (G17942) ((lambda (G17944) (if G17944 (apply (lambda () '#t) G17944) ((lambda (G17946) ((lambda (G17948) (if G17948 (apply (lambda () '#f) G17948) (G15515 '#f '"invalid syntax" G17946))) (G15327 G17946 '_))) G17942))) (G15327 G17942 '(_ #(atom #t))))) (G17548 'opaque G17879)) ((lambda (G17950) ((lambda (G17952) (if G17952 (apply (lambda (G17954) (list 'quote (G17884 G17954))) G17952) ((lambda (G17956) ((lambda (G17958) (if G17958 (apply (lambda () ''#()) G17958) (G15515 '#f '"invalid syntax" G17956))) (G15327 G17956 '_))) G17950))) (G15327 G17950 '(_ . each-any)))) (G17548 'fields G17879))))) '#f))) (set! G17552 (lambda (G17854) ((lambda (G17856) ((lambda (G17858) (if G17858 (apply (lambda (G17860) (list 'record-type-descriptor G17860)) G17858) ((lambda (G17862) ((lambda (G17864) (if G17864 (apply (lambda () ((lambda (G17866) ((lambda (G17868) (if G17868 (apply (lambda (G17870 G17871) G17870) G17868) ((lambda (G17874) ((lambda (G17876) (if G17876 (apply (lambda () '#f) G17876) (G15515 '#f '"invalid syntax" G17874))) (G15327 G17874 '#(atom #f)))) G17866))) (G15327 G17866 '(_ any any)))) (G17548 'parent-rtd G17854))) G17864) (G15515 '#f '"invalid syntax" G17862))) (G15327 G17862 '#(atom #f)))) G17856))) (G15327 G17856 '(_ any)))) (G17548 'parent G17854)))) (set! G17554 (lambda (G17830) ((lambda (G17832) ((lambda (G17834) (if G17834 (apply (lambda (G17836) (list 'record-constructor-descriptor G17836)) G17834) ((lambda (G17838) ((lambda (G17840) (if G17840 (apply (lambda () ((lambda (G17842) ((lambda (G17844) (if G17844 (apply (lambda (G17846 G17847) G17847) G17844) ((lambda (G17850) ((lambda (G17852) (if G17852 (apply (lambda () '#f) G17852) (G15515 '#f '"invalid syntax" G17850))) (G15327 G17850 '#(atom #f)))) G17842))) (G15327 G17842 '(_ any any)))) (G17548 'parent-rtd G17830))) G17840) (G15515 '#f '"invalid syntax" G17838))) (G15327 G17838 '#(atom #f)))) G17832))) (G15327 G17832 '(_ any)))) (G17548 'parent G17830)))) (set! G17556 (lambda (G17822 G17823 G17824 G17825) (list 'make-record-constructor-descriptor G17823 G17825 G17824))) (set! G17558 (lambda (G17810) ((lambda (G17812) ((lambda (G17814) (if G17814 (apply (lambda (G17816) G17816) G17814) ((lambda (G17818) ((lambda (G17820) (if G17820 (apply (lambda () '#f) G17820) (G15515 '#f '"invalid syntax" G17818))) (G15327 G17818 '_))) G17812))) (G15327 G17812 '(_ any)))) (G17548 'protocol G17810)))) (set! G17560 (lambda (G17792) ((lambda (G17794) ((lambda (G17796) (if G17796 (apply (lambda () '()) G17796) ((lambda (G17798) ((lambda (G17800) (if G17800 (apply (lambda (G17802) G17802) G17800) ((lambda (G17804) ((lambda (G17806) (if G17806 (apply (lambda (G17808) (G17560 G17808)) G17806) (G15515 '#f '"invalid syntax" G17804))) (G15327 G17804 '(_ . any)))) G17798))) (G15327 G17798 '((#(scheme-id fields) . each-any) . _)))) G17794))) (G15327 G17794 '()))) G17792))) (set! G17562 (lambda (G17768) (letrec ((G17770 (lambda (G17772 G17773) ((lambda (G17776) ((lambda (G17778) (if G17778 (apply (lambda () '()) G17778) ((lambda (G17780) ((lambda (G17782) (if G17782 (apply (lambda (G17784) (cons G17773 (G17770 G17784 (+ G17773 '1)))) G17782) ((lambda (G17786) ((lambda (G17788) (if G17788 (apply (lambda (G17790) (G17770 G17790 (+ G17773 '1))) G17788) (G15515 '#f '"invalid syntax" G17786))) (G15327 G17786 '(_ . any)))) G17780))) (G15327 G17780 '((#(scheme-id mutable) . _) . any)))) G17776))) (G15327 G17776 '()))) G17772)))) (G17770 G17768 '0)))) (set! G17564 (lambda (G17726 G17727) ((lambda (G17730) (begin (set! G17730 (lambda (G17732) (G15519 G17726 (string->symbol (string-append (symbol->string (G15521 G17726)) '"-" (symbol->string (G15521 G17732)) '"-set!"))))) (letrec ((G17734 (lambda (G17736) ((lambda (G17738) ((lambda (G17740) (if G17740 (apply (lambda () '()) G17740) ((lambda (G17742) ((lambda (G17744) (if G17744 (apply (lambda (G17746 G17747 G17748 G17749) (cons G17748 (G17734 G17749))) G17744) ((lambda (G17754) ((lambda (G17756) (if G17756 (apply (lambda (G17758 G17759) (cons (G17730 G17758) (G17734 G17759))) G17756) ((lambda (G17762) ((lambda (G17764) (if G17764 (apply (lambda (G17766) (G17734 G17766)) G17764) (G15515 '#f '"invalid syntax" G17762))) (G15327 G17762 '(_ . any)))) G17754))) (G15327 G17754 '((#(scheme-id mutable) any) . any)))) G17742))) (G15327 G17742 '((#(scheme-id mutable) any any any) . any)))) G17738))) (G15327 G17738 '()))) G17736)))) (G17734 G17727)))) '#f))) (set! G17566 (lambda (G17658 G17659) ((lambda (G17662) (begin (set! G17662 (lambda (G17664) (G15519 G17658 (string->symbol (string-append (symbol->string (G15521 G17658)) '"-" (symbol->string (G15521 G17664))))))) (map (lambda (G17666) ((lambda (G17668) ((lambda (G17670) (if (if G17670 (begin '#f (apply (lambda (G17672 G17673 G17674) (G14912 G17673)) G17670)) '#f) (apply (lambda (G17678 G17679 G17680) G17679) G17670) ((lambda (G17684) ((lambda (G17686) (if (if G17686 (begin '#f (apply (lambda (G17688 G17689) (G14912 G17689)) G17686)) '#f) (apply (lambda (G17692 G17693) G17693) G17686) ((lambda (G17696) ((lambda (G17698) (if (if G17698 (begin '#f (apply (lambda (G17700) (G14912 G17700)) G17698)) '#f) (apply (lambda (G17702) (G17662 G17702)) G17698) ((lambda (G17704) ((lambda (G17706) (if (if G17706 (begin '#f (apply (lambda (G17708) (G14912 G17708)) G17706)) '#f) (apply (lambda (G17710) (G17662 G17710)) G17706) ((lambda (G17712) ((lambda (G17714) (if (if G17714 (begin '#f (apply (lambda (G17716) (G14912 G17716)) G17714)) '#f) (apply (lambda (G17718) (G17662 G17718)) G17714) ((lambda (G17720) ((lambda (G17722) (if G17722 (apply (lambda (G17724) (G15515 '#f '"invalid field spec" G17666)) G17722) (G15515 '#f '"invalid syntax" G17720))) (G15327 G17720 'any))) G17712))) (G15327 G17712 'any))) G17704))) (G15327 G17704 '(#(scheme-id immutable) any)))) G17696))) (G15327 G17696 '(#(scheme-id mutable) any)))) G17684))) (G15327 G17684 '(#(scheme-id immutable) any any)))) G17668))) (G15327 G17668 '(#(scheme-id mutable) any any any)))) G17666)) G17659))) '#f))) (set! G17568 (lambda (G17650) (letrec ((G17652 (lambda (G17654 G17655) (if (null? G17654) '() (cons G17655 (G17652 (cdr G17654) (+ G17655 '1))))))) (G17652 G17650 '0)))) (set! G17570 (lambda (G17610 G17611) ((lambda (G17614) ((lambda (G17616) ((lambda (G17618) ((lambda (G17620) ((lambda (G17622) ((lambda (G17624) ((lambda (G17626) ((lambda (G17628) ((lambda (G17630) ((lambda (G17632) ((lambda (G17634) ((lambda (G17636) ((lambda (G17638) ((lambda (G17640) ((lambda () (G15253 (cons 'begin (cons (list 'define G17616 G17636) (cons (list 'define G17620 G17640) (cons (list 'define G17618 G17638) (cons (list 'define-syntax G17614 (list 'list ''$rtd (list 'syntax G17616) (list 'syntax G17618))) (cons (list 'define G17634 (list 'record-predicate G17616)) (cons (list 'define G17622 (list 'record-constructor G17618)) (append (map (lambda (G17642 G17643) (list 'define G17642 (list 'record-accessor G17616 G17643))) G17628 G17626) (map (lambda (G17646 G17647) (list 'define G17646 (list 'record-mutator G17616 G17647))) G17630 G17632))))))))))))) (G17558 G17611))) (G17556 G17611 G17616 G17620 (G17554 G17611)))) (G17550 G17614 G17611 (G17552 G17611)))) (G17546 G17610))) (G17562 G17624))) (G17564 G17614 G17624))) (G17566 G17614 G17624))) (G17568 G17624))) (G17560 G17611))) (G17544 G17610))) (gensym))) (gensym))) (gensym))) (G17542 G17610)))) (set! G17572 (lambda (G17574 G17575) ((lambda (G17578 G17580) (begin (set! G17578 (map G15253 '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G17580 (lambda (G17582 G17583) (if (pair? G17583) (begin '#f ((lambda (G17586) (if G17586 G17586 (begin '#f (G17580 G17582 (cdr G17583))))) (G14920 G17582 (car G17583)))) '#f))) (letrec ((G17588 (lambda (G17590 G17591) (if (null? G17590) (void) ((lambda (G17594) ((lambda (G17596) (if G17596 (apply (lambda (G17598 G17599) (if ((lambda (G17602) (if G17602 G17602 (begin '#f (not (G17580 G17598 G17578))))) (not (G14912 G17598))) (G15515 '#f '"not a valid define-record-type keyword" G17598) (if (G14926 G17598 G17591) (G15515 '#f '"duplicate use of keyword " G17574 G17598) (G17588 (cdr G17590) (cons G17598 G17591))))) G17596) ((lambda (G17604) ((lambda (G17606) (if G17606 (apply (lambda (G17608) (G15515 '#f '"malformed define-record-type clause" G17608)) G17606) (G15515 '#f '"invalid syntax" G17604))) (G15327 G17604 'any))) G17594))) (G15327 G17594 '(any . any)))) (car G17590)))))) (G17588 G17575 '())))) '#f '#f))) ((lambda (G18042) ((lambda (G18044) (if G18044 (apply (lambda (G18046 G18047) (begin (G17572 G17538 G18047) (G17570 G18046 G18047))) G18044) (G15515 '#f '"invalid syntax" G18042))) (G15327 G18042 '(_ any . each-any)))) G17538))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G15317 (lambda (G18050) ((lambda (G18052) (begin (set! G18052 (lambda (G18054 G18055) (G15519 G18054 (string->symbol (string-append (symbol->string (G15521 G18054)) G18055))))) ((lambda (G18058) ((lambda (G18060) (if (if G18060 (begin '#f (apply (lambda (G18062 G18063 G18064 G18065 G18066 G18067 G18068) (if (G14912 G18063) (if (G14912 G18064) (if (G14912 G18065) (if (G14912 G18066) (if (for-all G14912 G18067) (begin '#f (for-all G14912 G18068)) '#f) '#f) '#f) '#f) '#f)) G18060)) '#f) (apply (lambda (G18076 G18077 G18078 G18079 G18080 G18081 G18082) ((lambda (G18090) (G15253 (cons 'begin (cons (cons 'define-record-type (cons (list G18077 G18079 (gensym)) (cons (list 'parent G18078) (cons (cons 'fields (map (lambda (G18092 G18093) (list 'immutable G18092 G18093)) G18081 G18090)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G18080 (list 'condition-predicate (list 'record-type-descriptor G18077))) (map (lambda (G18096 G18097) (list 'define G18096 (list 'condition-accessor (list 'record-type-descriptor G18077) G18097))) G18082 G18090)))))) (map (lambda (G18100) (gensym)) G18082))) G18060) (G15515 '#f '"invalid syntax" G18058))) (G15327 G18058 '(any any any any any . #(each (any any)))))) G18050))) '#f))) (set! G15319 (lambda (G18102) (G15515 '#f '"incorrect usage of auxiliary keyword" G18102))) (set! G15321 (lambda (G18104 G18105 G18106) ((lambda (G18110) ((lambda (G18112) (if G18112 (apply (lambda (G18114 G18115) (G15385 (cons G18114 G18115) G18105 G18106)) G18112) ((lambda (G18118) ((lambda (G18120) (if G18120 (apply (lambda (G18122 G18123 G18124 G18125) ((lambda (G18130 G18131 G18132 G18133) (G14791 '#f (append G18130 G18131) (append (G15359 G18122 G18105 G18106) (G15359 G18123 G18105 G18106)) (G14791 '#f (list G18133) (list (G14793 '#f '() (G14787 '#f (map (lambda (G18138 G18139 G18140) (G14791 '#f (list G18138) (list (list G18139)) (G14787 '#f (list (list G18139 G18140) (list 'set! G18140 G18138))))) G18132 G18130 G18131)))) (list '(primitive dynamic-wind) G18133 (G14793 '#f '() (G15385 (cons G18124 G18125) G18105 G18106)) G18133)))) (map (lambda (G18144) (G14830 'lhs)) G18122) (map (lambda (G18146) (G14830 'rhs)) G18122) (map (lambda (G18148) (G14830 't)) G18122) (G14830 'swap))) G18120) (G15515 '#f '"invalid syntax" G18118))) (G15327 G18118 '(_ #(each (any any)) any . each-any)))) G18110))) (G15327 G18110 '(_ () any . each-any)))) G18104))) (set! G15323 (lambda (G18150 G18151 G18152) ((lambda (G18156) ((lambda (G18158) (if G18158 (apply (lambda (G18160 G18161) (cons 'foreign-call (cons (G15363 G18160 G18151 G18152) (G15359 G18161 G18151 G18152)))) G18158) (G15515 '#f '"invalid syntax" G18156))) (G15327 G18156 '(_ any . each-any)))) G18150))) (set! G15325 (lambda (G18164 G18165) ((lambda (G18168 G18170) (begin (set! G18168 (lambda (G18272 G18273 G18274) (if (null? G18272) (values '() G18274) (call-with-values (lambda () (G18168 (cdr G18272) G18273 G18274)) (lambda (G18278 G18279) (call-with-values (lambda () (G18170 (car G18272) G18273 G18279)) (lambda (G18282 G18283) (values (cons G18282 G18278) G18283)))))))) (set! G18170 (lambda (G18172 G18173 G18174) ((lambda (G18178) ((lambda (G18180) (if (if G18180 (begin '#f (apply (lambda (G18182) (G14912 G18182)) G18180)) '#f) (apply (lambda (G18184) (if (G14926 G18172 G18165) (values (vector 'free-id G18172) G18174) (if (G14920 G18172 (G15213 '_)) (values '_ G18174) (values 'any (cons (cons G18172 G18173) G18174))))) G18180) ((lambda (G18186) ((lambda (G18188) (if (if G18188 (begin '#f (apply (lambda (G18190 G18191) (G15329 G18191)) G18188)) '#f) (apply (lambda (G18194 G18195) (call-with-values (lambda () (G18170 G18194 (+ G18173 '1) G18174)) (lambda (G18198 G18199) (values (if (eq? G18198 'any) 'each-any (vector 'each G18198)) G18199)))) G18188) ((lambda (G18202) ((lambda (G18204) (if (if G18204 (begin '#f (apply (lambda (G18206 G18207 G18208 G18209) (G15329 G18207)) G18204)) '#f) (apply (lambda (G18214 G18215 G18216 G18217) (call-with-values (lambda () (G18170 G18217 G18173 G18174)) (lambda (G18222 G18223) (call-with-values (lambda () (G18168 G18216 G18173 G18223)) (lambda (G18226 G18227) (call-with-values (lambda () (G18170 G18214 (+ G18173 '1) G18227)) (lambda (G18230 G18231) (values (vector 'each+ G18230 (reverse G18226) G18222) G18231)))))))) G18204) ((lambda (G18234) ((lambda (G18236) (if G18236 (apply (lambda (G18238 G18239) (call-with-values (lambda () (G18170 G18239 G18173 G18174)) (lambda (G18242 G18243) (call-with-values (lambda () (G18170 G18238 G18173 G18243)) (lambda (G18246 G18247) (values (cons G18246 G18242) G18247)))))) G18236) ((lambda (G18250) ((lambda (G18252) (if G18252 (apply (lambda () (values '() G18174)) G18252) ((lambda (G18254) ((lambda (G18256) (if (if G18256 (begin '#f (apply (lambda (G18258) (not (G14809 G18258))) G18256)) '#f) (apply (lambda (G18260) (call-with-values (lambda () (G18170 G18260 G18173 G18174)) (lambda (G18262 G18263) (values (vector 'vector G18262) G18263)))) G18256) ((lambda (G18266) ((lambda (G18268) (if G18268 (apply (lambda (G18270) (values (vector 'atom (G14934 G18270)) G18174)) G18268) (G15515 '#f '"invalid syntax" G18266))) (G15327 G18266 'any))) G18254))) (G15327 G18254 '#(vector each-any)))) G18250))) (G15327 G18250 '()))) G18234))) (G15327 G18234 '(any . any)))) G18202))) (G15327 G18202 '(any any . #(each+ any () any))))) G18186))) (G15327 G18186 '(any any)))) G18178))) (G15327 G18178 'any))) G18172))) (G18170 G18164 '0 '()))) '#f '#f))) (set! G15327 (lambda (G18286 G18287) ((lambda (G18290 G18292 G18294 G18296 G18298 G18300 G18302 G18304) (begin (set! G18290 (lambda (G18432 G18433 G18434 G18435) (if (if (null? G18433) (if (null? G18434) (begin '#f (null? G18435)) '#f) '#f) G18432 (G14888 G18432 G18433 G18434 G18435)))) (set! G18292 (lambda (G18412 G18413 G18414 G18415 G18416) (if (pair? G18412) ((lambda (G18422) (if G18422 (begin '#f ((lambda (G18424) (if G18424 (begin '#f (cons G18422 G18424)) '#f)) (G18292 (cdr G18412) G18413 G18414 G18415 G18416))) '#f)) (G18304 (car G18412) G18413 G18414 G18415 G18416 '())) (if (null? G18412) '() (if (G14809 G18412) (if (not (G14828 G18414)) (begin '#f (call-with-values (lambda () (G14886 G18414 G18415 G18416 G18412)) (lambda (G18426 G18427 G18428) (G18292 (G14811 G18412) G18413 G18426 G18427 G18428)))) '#f) (if (G13956 G18412) (G18292 (G13954 G18412) G18413 G18414 G18415 G18416) '#f)))))) (set! G18294 (lambda (G18372 G18373 G18374 G18375 G18376 G18377 G18378 G18379) (letrec ((G18388 (lambda (G18390 G18391 G18392 G18393) (if (pair? G18390) (call-with-values (lambda () (G18388 (cdr G18390) G18391 G18392 G18393)) (lambda (G18398 G18399 G18400) (if G18400 (if (null? G18399) ((lambda (G18404) (if G18404 (values (cons G18404 G18398) G18399 G18400) (values '#f '#f '#f))) (G18304 (car G18390) G18373 G18391 G18392 G18393 '())) (values '() (cdr G18399) (G18304 (car G18390) (car G18399) G18391 G18392 G18393 G18400))) (values '#f '#f '#f)))) (if (G14809 G18390) (if (G14828 G18391) (values '() G18374 (G18304 G18390 G18375 G18391 G18392 G18393 G18379)) (call-with-values (lambda () (G14886 G18391 G18392 G18393 G18390)) (lambda (G18406 G18407 G18408) (G18388 (G14811 G18390) G18406 G18407 G18408)))) (if (G13956 G18390) (G18388 (G13954 G18390) G18391 G18392 G18393) (values '() G18374 (G18304 G18390 G18375 G18391 G18392 G18393 G18379)))))))) (G18388 G18372 G18376 G18377 G18378)))) (set! G18296 (lambda (G18356 G18357 G18358 G18359) (if (pair? G18356) ((lambda (G18364) (if G18364 (begin '#f (cons (G18290 (car G18356) G18357 G18358 G18359) G18364)) '#f)) (G18296 (cdr G18356) G18357 G18358 G18359)) (if (null? G18356) '() (if (G14809 G18356) (if (not (G14828 G18357)) (begin '#f (call-with-values (lambda () (G14886 G18357 G18358 G18359 G18356)) (lambda (G18366 G18367 G18368) (G18296 (G14811 G18356) G18366 G18367 G18368)))) '#f) (if (G13956 G18356) (G18296 (G13954 G18356) G18357 G18358 G18359) '#f)))))) (set! G18298 (lambda (G18351 G18352) (if (null? G18351) G18352 (if (eq? G18351 '_) G18352 (if (eq? G18351 'any) (cons '() G18352) (if (pair? G18351) (G18298 (car G18351) (G18298 (cdr G18351) G18352)) (if (eq? G18351 'each-any) (cons '() G18352) ((lambda (G18355) (if (memv G18355 '(each)) (G18298 (vector-ref G18351 '1) G18352) (if (memv G18355 '(each+)) (G18298 (vector-ref G18351 '1) (G18298 (reverse (vector-ref G18351 '2)) (G18298 (vector-ref G18351 '3) G18352))) (if (memv G18355 '(free-id atom)) G18352 (if (memv G18355 '(scheme-id atom)) G18352 (if (memv G18355 '(vector)) (G18298 (vector-ref G18351 '1) G18352) (assertion-violation 'syntax-dispatch '"invalid pattern" G18351))))))) (vector-ref G18351 '0))))))))) (set! G18300 (lambda (G18347 G18348) (if (null? (car G18347)) G18348 (cons (map car G18347) (G18300 (map cdr G18347) G18348))))) (set! G18302 (lambda (G18324 G18325 G18326 G18327 G18328 G18329) (if (null? G18325) (if (null? G18324) (begin '#f G18329) '#f) (if (pair? G18325) (if (pair? G18324) (begin '#f (G18304 (car G18324) (car G18325) G18326 G18327 G18328 (G18304 (cdr G18324) (cdr G18325) G18326 G18327 G18328 G18329))) '#f) (if (eq? G18325 'each-any) ((lambda (G18336) (if G18336 (begin '#f (cons G18336 G18329)) '#f)) (G18296 G18324 G18326 G18327 G18328)) ((lambda (G18338) (if (memv G18338 '(each)) (if (null? G18324) (G18298 (vector-ref G18325 '1) G18329) ((lambda (G18345) (if G18345 (begin '#f (G18300 G18345 G18329)) '#f)) (G18292 G18324 (vector-ref G18325 '1) G18326 G18327 G18328))) (if (memv G18338 '(free-id)) (if (symbol? G18324) (if (G14828 G18326) (if (G14920 (G18290 G18324 G18326 G18327 G18328) (vector-ref G18325 '1)) (begin '#f G18329) '#f) '#f) '#f) (if (memv G18338 '(scheme-id)) (if (symbol? G18324) (if (G14828 G18326) (if (G14920 (G18290 G18324 G18326 G18327 G18328) (G15213 (vector-ref G18325 '1))) (begin '#f G18329) '#f) '#f) '#f) (if (memv G18338 '(each+)) (call-with-values (lambda () (G18294 G18324 (vector-ref G18325 '1) (vector-ref G18325 '2) (vector-ref G18325 '3) G18326 G18327 G18328 G18329)) (lambda (G18339 G18340 G18341) (if G18341 (if (null? G18340) (begin '#f (if (null? G18339) (G18298 (vector-ref G18325 '1) G18341) (G18300 G18339 G18341))) '#f) '#f))) (if (memv G18338 '(atom)) (if (equal? (vector-ref G18325 '1) (G14932 G18324 G18326)) (begin '#f G18329) '#f) (if (memv G18338 '(vector)) (if (vector? G18324) (begin '#f (G18304 (vector->list G18324) (vector-ref G18325 '1) G18326 G18327 G18328 G18329)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G18325)))))))) (vector-ref G18325 '0))))))) (set! G18304 (lambda (G18306 G18307 G18308 G18309 G18310 G18311) (if (not G18311) '#f (if (eq? G18307 '_) G18311 (if (eq? G18307 'any) (cons (G18290 G18306 G18308 G18309 G18310) G18311) (if (G14809 G18306) (if (not (G14828 G18308)) (begin '#f (call-with-values (lambda () (G14886 G18308 G18309 G18310 G18306)) (lambda (G18318 G18319 G18320) (G18304 (G14811 G18306) G18307 G18318 G18319 G18320 G18311)))) '#f) (if (G13956 G18306) (G18304 (G13954 G18306) G18307 G18308 G18309 G18310 G18311) (G18302 G18306 G18307 G18308 G18309 G18310 G18311)))))))) (G18304 G18286 G18287 '() '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G15329 (lambda (G18440) (if (G14912 G18440) (begin '#f (G14920 G18440 (G15213 '...))) '#f))) (set! G15331 (lambda (G18442) (if (G14912 G18442) (begin '#f (G14920 G18442 (G15213 '_))) '#f))) (set! G15333 (lambda (G18444 G18445) (for-each (lambda (G18448) (if ((lambda (G18450) (if G18450 G18450 ((lambda (G18452) (if G18452 G18452 (begin '#f (G15331 G18448)))) (G15329 G18448)))) (not (G14912 G18448))) (G15515 '#f '"invalid literal" G18445 G18448) (void))) G18444))) (set! G15335 ((lambda () ((lambda (G18454 G18456 G18458 G18460) (begin (set! G18454 (lambda (G18540 G18541 G18542 G18543 G18544) ((lambda (G18550 G18551) ((lambda (G18554 G18555) ((lambda (G18558) (list '(primitive apply) (G14793 '#f G18555 G18558) G18542)) (G15363 (G14892 (G14876 G18550 G18554) G18541) (append (map (lambda (G18560 G18561 G18562) (cons G18560 (G14944 'syntax (cons G18561 G18562)))) G18554 G18555 (map cdr G18540)) G18543) G18544))) (map G14834 G18550) (map G14830 G18550))) (map car G18540) (map cdr G18540)))) (set! G18456 (lambda (G18528 G18529 G18530) (letrec ((G18534 (lambda (G18536 G18537) (if (null? G18536) (G15515 '#f '"invalid syntax" G18529) (if (G14912 (car G18536)) (if (G14926 (car G18536) G18537) (G15509 (car G18536) '"duplicate " G18530) (G18534 (cdr G18536) (cons (car G18536) G18537))) (G15509 (car G18536) '"invalid " G18530)))))) (G18534 G18528 '())))) (set! G18458 (lambda (G18496 G18497 G18498 G18499 G18500 G18501 G18502 G18503) (call-with-values (lambda () (G15325 G18501 G18497)) (lambda (G18512 G18513) (if (not (G14924 (map car G18513))) (G18456 (map car G18513) G18501 '"pattern variable") (if (not (for-all (lambda (G18516) (not (G15329 (car G18516)))) G18513)) (G15515 '#f '"misplaced ellipsis in syntax-case pattern" G18501) ((lambda (G18518) ((lambda (G18520) ((lambda (G18522) ((lambda (G18524) (list (G14793 '#f (list G18518) (list 'if G18520 G18522 G18524)) (list '(primitive syntax-dispatch) G18496 (list 'quote G18512)))) (G18460 G18496 G18497 G18498 G18499 G18500))) (G18454 G18513 G18503 G18518 G18499 G18500))) (if (eq? G18502 '#t) G18518 ((lambda (G18526) (list 'if G18518 G18526 (list 'quote '#f))) (G18454 G18513 G18502 G18518 G18499 G18500))))) (G14830 'tmp)))))))) (set! G18460 (lambda (G18462 G18463 G18464 G18465 G18466) (if (null? G18464) (list '(primitive syntax-error) G18462) ((lambda (G18472) ((lambda (G18474) (if G18474 (apply (lambda (G18476 G18477) (if (if (G14912 G18476) (if (not (G14926 G18476 G18463)) (begin '#f (not (G15329 G18476))) '#f) '#f) (if (G14920 G18476 (G15213 '_)) (G15363 G18477 G18465 G18466) ((lambda (G18480 G18481) ((lambda (G18484) (list (G14793 '#f (list G18481) G18484) G18462)) (G15363 (G14892 (G14876 (list G18476) (list G18480)) G18477) (cons (cons G18480 (G14944 'syntax (cons G18481 '0))) G18465) G18466))) (G14834 G18476) (G14830 G18476))) (G18458 G18462 G18463 (cdr G18464) G18465 G18466 G18476 '#t G18477))) G18474) ((lambda (G18486) ((lambda (G18488) (if G18488 (apply (lambda (G18490 G18491 G18492) (G18458 G18462 G18463 (cdr G18464) G18465 G18466 G18490 G18491 G18492)) G18488) (G15515 '#f '"invalid syntax" G18486))) (G15327 G18486 '(any any any)))) G18472))) (G15327 G18472 '(any any)))) (car G18464))))) (lambda (G18566 G18567 G18568) ((lambda (G18572) ((lambda (G18574) (if G18574 (apply (lambda (G18576 G18577 G18578) (begin (G15333 G18577 G18566) ((lambda (G18582) ((lambda (G18584) (list (G14793 '#f (list G18582) G18584) (G15363 G18576 G18567 G18568))) (G18460 G18582 G18577 G18578 G18567 G18568))) (G14830 'tmp)))) G18574) (G15515 '#f '"invalid syntax" G18572))) (G15327 G18572 '(_ any each-any . each-any)))) G18566)))) '#f '#f '#f '#f)))) (set! G15337 (lambda (G18586 G18587 . G18590) ((lambda (G18592) (begin (set! G18592 '...) (begin (if (list? G18587) (void) (assertion-violation G18592 '"not a list" G18587)) (if (null? G18590) (void) ((lambda (G18594) (for-each (lambda (G18596) (begin (if (list? G18596) (void) (assertion-violation G18592 '"not a list" G18596)) (if (= (length G18596) G18594) (void) (assertion-violation G18592 '"length mismatch" G18587 G18596)))) G18590)) (length G18587))) (apply map G18586 G18587 G18590)))) '#f))) (set! G15339 ((lambda () ((lambda (G18598 G18600 G18602 G18604 G18606 G18608 G18610 G18612) (begin (set! G18598 (lambda (G18684 G18685 G18686 G18687 G18688 G18689) ((lambda (G18696) ((lambda (G18698) (if (if G18698 (begin '#f (apply (lambda (G18700) (G18688 G18700)) G18698)) '#f) (apply (lambda (G18702) (G15515 '#f '"misplaced ellipsis in syntax form" G18684)) G18698) ((lambda (G18704) ((lambda (G18706) (if (if G18706 (begin '#f (apply (lambda (G18708) (G14912 G18708)) G18706)) '#f) (apply (lambda (G18710) ((lambda (G18712) ((lambda (G18714) ((lambda () (if (eq? (G14946 G18714) 'syntax) (call-with-values (lambda () ((lambda (G18716) (G18600 G18684 (car G18716) (cdr G18716) G18687)) (G14948 G18714))) (lambda (G18718 G18719) (values (list 'ref G18718) G18719))) (values (list 'quote G18685) G18687))))) (G14942 G18712 G18686))) (G14938 G18685))) G18706) ((lambda (G18722) ((lambda (G18724) (if (if G18724 (begin '#f (apply (lambda (G18726 G18727) (G18688 G18726)) G18724)) '#f) (apply (lambda (G18730 G18731) (if G18689 (G15515 '#f '"misplaced ellipsis in syntax form" G18684) (G18598 G18684 G18731 G18686 G18687 (lambda (G18734) '#f) '#f))) G18724) ((lambda (G18736) ((lambda (G18738) (if (if G18738 (begin '#f (apply (lambda (G18740 G18741 G18742) (G18688 G18741)) G18738)) '#f) (apply (lambda (G18746 G18747 G18748) (letrec ((G18752 (lambda (G18760 G18761) ((lambda (G18764) ((lambda (G18766) (if G18766 (apply (lambda () (G18761 G18687)) G18766) ((lambda (G18768) ((lambda (G18770) (if (if G18770 (begin '#f (apply (lambda (G18772 G18773) (G18688 G18772)) G18770)) '#f) (apply (lambda (G18776 G18777) (G18752 G18777 (lambda (G18780) (call-with-values (lambda () (G18761 (cons '() G18780))) (lambda (G18782 G18783) (if (null? (car G18783)) (G15515 '#f '"extra ellipsis in syntax form" G18684) (values (G18604 G18782 (car G18783)) (cdr G18783)))))))) G18770) ((lambda (G18786) ((lambda (G18788) (if G18788 (apply (lambda () (call-with-values (lambda () (G18598 G18684 G18760 G18686 G18687 G18688 G18689)) (lambda (G18790 G18791) (call-with-values (lambda () (G18761 G18791)) (lambda (G18794 G18795) (values (G18602 G18794 G18790) G18795)))))) G18788) (G15515 '#f '"invalid syntax" G18786))) (G15327 G18786 '_))) G18768))) (G15327 G18768 '(any . any)))) G18764))) (G15327 G18764 '()))) G18760)))) (G18752 G18748 (lambda (G18754) (call-with-values (lambda () (G18598 G18684 G18746 G18686 (cons '() G18754) G18688 '#f)) (lambda (G18756 G18757) (if (null? (car G18757)) (G15515 '#f '"extra ellipsis in syntax form" G18684) (values (G18606 G18756 (car G18757)) (cdr G18757))))))))) G18738) ((lambda (G18798) ((lambda (G18800) (if G18800 (apply (lambda (G18802 G18803) (call-with-values (lambda () (G18598 G18684 G18802 G18686 G18687 G18688 '#f)) (lambda (G18806 G18807) (call-with-values (lambda () (G18598 G18684 G18803 G18686 G18807 G18688 G18689)) (lambda (G18810 G18811) (values (G18608 G18685 G18802 G18803 G18806 G18810) G18811)))))) G18800) ((lambda (G18814) ((lambda (G18816) (if G18816 (apply (lambda (G18818) (call-with-values (lambda () (G18598 G18684 G18818 G18686 G18687 G18688 '#t)) (lambda (G18820 G18821) (values (G18610 G18685 G18818 G18820) G18821)))) G18816) ((lambda (G18824) ((lambda (G18826) (if G18826 (apply (lambda () (values (list 'quote G18685) G18687)) G18826) (G15515 '#f '"invalid syntax" G18824))) (G15327 G18824 '_))) G18814))) (G15327 G18814 '#(vector each-any)))) G18798))) (G15327 G18798 '(any . any)))) G18736))) (G15327 G18736 '(any any . any)))) G18722))) (G15327 G18722 '(any any)))) G18704))) (G15327 G18704 'any))) G18696))) (G15327 G18696 'any))) G18685))) (set! G18600 (lambda (G18666 G18667 G18668 G18669) (if (= G18668 '0) (values G18667 G18669) (if (null? G18669) (G15515 '#f '"missing ellipsis in syntax form" G18666) (call-with-values (lambda () (G18600 G18666 G18667 (- G18668 '1) (cdr G18669))) (lambda (G18674 G18675) ((lambda (G18678) (if G18678 ((lambda (G18680) (values (cdr G18680) G18669)) G18678) ((lambda (G18682) (values G18682 (cons (cons (cons G18674 G18682) (car G18669)) G18675))) (G14830 'tmp)))) (assq G18674 (car G18669))))))))) (set! G18602 (lambda (G18662 G18663) (if (equal? G18663 ''()) G18662 (list 'append G18662 G18663)))) (set! G18604 (lambda (G18658 G18659) (list 'apply '(primitive append) (G18606 G18658 G18659)))) (set! G18606 (lambda (G18640 G18641) ((lambda (G18644 G18645) (if (eq? (car G18640) 'ref) (car G18645) (if (for-all (lambda (G18648) (if (eq? (car G18648) 'ref) (begin '#f (memq (cadr G18648) G18644)) '#f)) (cdr G18640)) ((lambda (G18650) (cons 'map (cons (list 'primitive (car G18640)) G18650))) (map ((lambda (G18652) (lambda (G18654) (cdr (assq (cadr G18654) G18652)))) (map cons G18644 G18645)) (cdr G18640))) (cons* 'map (list 'lambda G18644 G18640) G18645)))) (map cdr G18641) (map (lambda (G18656) (list 'ref (car G18656))) G18641)))) (set! G18608 (lambda (G18625 G18626 G18627 G18628 G18629) ((lambda (G18635) (if (memv G18635 '(quote)) (if (eq? (car G18628) 'quote) ((lambda (G18636 G18637) (if (if (eq? G18636 G18626) (begin '#f (eq? G18637 G18627)) '#f) (list 'quote G18625) (list 'quote (cons G18636 G18637)))) (cadr G18628) (cadr G18629)) (if (null? (cadr G18629)) (list 'list G18628) (list 'cons G18628 G18629))) (if (memv G18635 '(list)) (cons 'list (cons G18628 (cdr G18629))) (list 'cons G18628 G18629)))) (car G18629)))) (set! G18610 (lambda (G18619 G18620 G18621) (if (eq? (car G18621) 'quote) (if (eq? (cadr G18621) G18620) (list 'quote G18619) (list 'quote (list->vector (cadr G18621)))) (if (eq? (car G18621) 'list) (cons 'vector (cdr G18621)) (list 'list->vector G18621))))) (set! G18612 (lambda (G18614) ((lambda (G18616) (if (memv G18616 '(ref)) (cadr G18614) (if (memv G18616 '(primitive)) (list 'primitive (cadr G18614)) (if (memv G18616 '(quote)) (list 'quote (cadr G18614)) (if (memv G18616 '(lambda)) (G14793 '#f (cadr G18614) (G18612 (caddr G18614))) (if (memv G18616 '(map)) ((lambda (G18617) (cons '(primitive ellipsis-map) G18617)) (map G18612 (cdr G18614))) (cons (list 'primitive (car G18614)) (map G18612 (cdr G18614))))))))) (car G18614)))) (lambda (G18828 G18829 G18830) ((lambda (G18834) ((lambda (G18836) (if G18836 (apply (lambda (G18838) (call-with-values (lambda () (G18598 G18828 G18838 G18829 '() G15329 '#f)) (lambda (G18840 G18841) (G18612 G18840)))) G18836) (G15515 '#f '"invalid syntax" G18834))) (G15327 G18834 '(_ any)))) G18828)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G15341 (lambda (G18844) ((lambda (G18846) (if (memv G18846 '(quote)) G15247 (if (memv G18846 '(lambda)) G15251 (if (memv G18846 '(case-lambda)) G15249 (if (memv G18846 '(letrec)) G15227 (if (memv G18846 '(letrec*)) G15229 (if (memv G18846 '(case)) G15245 (if (memv G18846 '(if)) G15243 (if (memv G18846 '(when)) G15239 (if (memv G18846 '(unless)) G15241 (if (memv G18846 '(parameterize)) G15321 (if (memv G18846 '(foreign-call)) G15323 (if (memv G18846 '(syntax-case)) G15335 (if (memv G18846 '(syntax)) G15339 (if (memv G18846 '(type-descriptor)) G15233 (if (memv G18846 '(record-type-descriptor)) G15235 (if (memv G18846 '(record-constructor-descriptor)) G15237 (if (memv G18846 '(fluid-let-syntax)) G15231 (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G18844))))))))))))))))))) G18844))) (set! G15343 (lambda (G18847) ((lambda (G18849) ((lambda (G18851) (if (if G18851 (begin '#f (apply (lambda (G18853) (if (for-all G14912 G18853) (begin '#f (G13945 (map G14914 G18853))) '#f)) G18851)) '#f) (apply (lambda (G18855) (G15253 (list 'quote (G13945 (map G14914 G18855))))) G18851) (G15515 '#f '"invalid syntax" G18849))) (G15327 G18849 '(_ . each-any)))) G18847))) (set! G15345 (lambda (G18857 G18858) ((lambda (G18861) ((lambda (G18863) (if (if G18863 (begin '#f (apply (lambda (G18865) (if (G14912 G18865) (begin '#f (memq (G14914 G18865) G18858)) '#f)) G18863)) '#f) (apply (lambda (G18867) (G15253 (list 'quote G18867))) G18863) (G15515 '#f '"invalid syntax" G18861))) (G15327 G18861 '(_ any)))) G18857))) (set! G15347 (lambda (G18869) (if (procedure? G18869) G18869 (if (symbol? G18869) ((lambda (G18871) (if (memv G18871 '(define-record-type)) G15315 (if (memv G18871 '(define-struct)) G15313 (if (memv G18871 '(include)) G15303 (if (memv G18871 '(cond)) G15299 (if (memv G18871 '(let)) G15259 (if (memv G18871 '(do)) G15291 (if (memv G18871 '(or)) G15295 (if (memv G18871 '(and)) G15297 (if (memv G18871 '(let*)) G15293 (if (memv G18871 '(let-values)) G15261 (if (memv G18871 '(let*-values)) G15263 (if (memv G18871 '(syntax-rules)) G15307 (if (memv G18871 '(quasiquote)) G15309 (if (memv G18871 '(quasisyntax)) G15311 (if (memv G18871 '(with-syntax)) G15255 (if (memv G18871 '(identifier-syntax)) G15289 (if (memv G18871 '(time)) G15281 (if (memv G18871 '(delay)) G15283 (if (memv G18871 '(assert)) G15285 (if (memv G18871 '(endianness)) G15287 (if (memv G18871 '(guard)) G15277 (if (memv G18871 '(define-enumeration)) G15279 (if (memv G18871 '(trace-lambda)) G15265 (if (memv G18871 '(trace-define)) G15267 (if (memv G18871 '(trace-define-syntax)) G15269 (if (memv G18871 '(trace-let-syntax)) G15273 (if (memv G18871 '(trace-letrec-syntax)) G15275 (if (memv G18871 '(define-condition-type)) G15317 (if (memv G18871 '(include-into)) G15305 (if (memv G18871 '(eol-style)) (lambda (G18876) (G15345 G18876 '(none lf cr crlf nel crnel ls))) (if (memv G18871 '(error-handling-mode)) (lambda (G18874) (G15345 G18874 '(ignore raise replace))) (if (memv G18871 '(buffer-mode)) (lambda (G18872) (G15345 G18872 '(none line block))) (if (memv G18871 '(file-options)) G15343 (if (memv G18871 '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G15319 (error 'macro-transformer '"BUG: invalid macro" G18869)))))))))))))))))))))))))))))))))))) G18869) (error 'core-macro-transformer '"BUG: invalid macro" G18869))))) (set! G15349 (lambda (G18878) (car G18878))) (set! G15351 (lambda (G18880 G18881) ((lambda (G18884) (begin (letrec ((G18886 (lambda (G18888) (if (G14809 G18888) (void) (if (pair? G18888) (begin (G18886 (car G18888)) (G18886 (cdr G18888))) (if (vector? G18888) (vector-for-each G18886 G18888) (if (symbol? G18888) (G15515 '#f '"raw symbol encountered in output of macro" G18881 G18888) (void)))))))) (G18886 G18884)) (G14890 (G14880) G18884 G18881))) (G18880 (G14890 G14882 G18881 '#f))))) (set! G15353 (lambda (G18890 G18891) (G15351 (G15347 G18890) G18891))) (set! G15355 (lambda (G18894 G18895) (G15351 (G15349 G18894) G18895))) (set! G15357 (lambda (G18898 G18899) ((lambda (G18902 G18903) (begin (G14495 G18902) ((lambda (G18906) ((lambda (G18908) (G15351 G18908 G18899)) (if (procedure? G18906) G18906 (assertion-violation 'chi-global-macro '"BUG: not a procedure" G18906)))) (symbol-value G18903)))) (car G18898) (cdr G18898)))) (set! G15359 (lambda (G18910 G18911 G18912) (if (null? G18910) '() ((lambda (G18916) (cons G18916 (G15359 (cdr G18910) G18911 G18912))) (G15363 (car G18910) G18911 G18912))))) (set! G15361 (lambda (G18918 G18919 G18920) ((lambda (G18924) ((lambda (G18926) (if G18926 (apply (lambda (G18928 G18929) ((lambda (G18932) (cons G18932 (G15359 G18929 G18919 G18920))) (G15363 G18928 G18919 G18920))) G18926) (G15515 '#f '"invalid syntax" G18924))) (G15327 G18924 '(any . each-any)))) G18918))) (set! G15363 (lambda (G18934 G18935 G18936) (call-with-values (lambda () (G14952 G18934 G18935)) (lambda (G18940 G18941 G18942) ((lambda (G18946) (if (memv G18946 '(core-macro)) ((lambda (G18996) (G18996 G18934 G18935 G18936)) (G15341 G18941)) (if (memv G18946 '(global)) ((lambda (G18992) ((lambda (G18994) ((lambda () (begin ((G15423) G18992) G18994)))) (cdr G18941))) (car G18941)) (if (memv G18946 '(core-prim)) ((lambda (G18990) (list 'primitive G18990)) G18941) (if (memv G18946 '(call)) (G15361 G18934 G18935 G18936) (if (memv G18946 '(lexical)) ((lambda (G18988) G18988) (G15215 G18941)) (if (memv G18946 '(global-macro global-macro!)) (G15363 (G15357 G18941 G18934) G18935 G18936) (if (memv G18946 '(local-macro local-macro!)) (G15363 (G15355 G18941 G18934) G18935 G18936) (if (memv G18946 '(macro macro!)) (G15363 (G15353 G18941 G18934) G18935 G18936) (if (memv G18946 '(constant)) ((lambda (G18986) (list 'quote G18986)) G18941) (if (memv G18946 '(set!)) (G15365 G18934 G18935 G18936) (if (memv G18946 '(begin)) ((lambda (G18978) ((lambda (G18980) (if G18980 (apply (lambda (G18982 G18983) (G14787 '#f (G15359 (cons G18982 G18983) G18935 G18936))) G18980) (G15515 '#f '"invalid syntax" G18978))) (G15327 G18978 '(_ any . each-any)))) G18934) (if (memv G18946 '(let-syntax letrec-syntax)) ((lambda (G18948) ((lambda (G18950) (if (if G18950 (begin '#f (apply (lambda (G18952 G18953 G18954 G18955) (if (G14922 G18952) (void) (G15515 '#f '"invalid identifiers" G18934))) G18950)) '#f) (apply (lambda (G18960 G18961 G18962 G18963) ((lambda (G18968) ((lambda (G18970) ((lambda (G18972) ((lambda () (G14787 '#f (G15359 (map (lambda (G18974) (G14892 G18970 G18974)) (cons G18962 G18963)) (append (map cons G18968 G18972) G18935) (append (map cons G18968 G18972) G18936)))))) (map (lambda (G18976) (G14974 (G15409 (if (eq? G18940 'let-syntax) G18976 (G14892 G18970 G18976)) G18936))) G18961))) (G14876 G18960 G18968))) (map G14834 G18960))) G18950) (G15515 '#f '"invalid syntax" G18948))) (G15327 G18948 '(_ #(each (any any)) any . each-any)))) G18934) (if (memv G18946 '(displaced-lexical)) (G15515 '#f '"identifier out of context" G18934) (if (memv G18946 '(syntax)) (G15515 '#f '"reference to pattern variable outside a syntax form" G18934) (if (memv G18946 '(define define-syntax module import library)) (G15515 '#f (string-append ((lambda (G18947) (if (memv G18947 '(define)) '"a definition" (if (memv G18947 '(define-syntax)) '"a define-syntax" (if (memv G18947 '(module)) '"a module definition" (if (memv G18947 '(library)) '"a library definition" (if (memv G18947 '(import)) '"an import declaration" '"a non-expression")))))) G18940) '" was found where an expression was expected") G18934) (if (memv G18946 '(mutable)) (G15515 '#f '"attempt to reference an unexportable variable" G18934) (G15515 '#f '"invalid expression" G18934)))))))))))))))))) G18940))))) (set! G15365 (lambda (G18998 G18999 G19000) ((lambda (G19004) ((lambda (G19006) (if (if G19006 (begin '#f (apply (lambda (G19008 G19009) (G14912 G19008)) G19006)) '#f) (apply (lambda (G19012 G19013) (call-with-values (lambda () (G14952 G19012 G18999)) (lambda (G19016 G19017 G19018) ((lambda (G19022) (if (memv G19022 '(lexical)) (begin (G15219 G19017 '#t) (list 'set! (G15215 G19017) (G15363 G19013 G18999 G19000))) (if (memv G19022 '(core-prim)) (G15515 '#f '"cannot modify imported core primitive" G18998) (if (memv G19022 '(global)) (G15515 '#f '"attempt to modify imported binding" G18998) (if (memv G19022 '(global-macro!)) (G15363 (G15357 G19017 G18998) G18999 G19000) (if (memv G19022 '(local-macro!)) (G15363 (G15355 G19017 G18998) G18999 G19000) (if (memv G19022 '(mutable)) (G15515 '#f '"attempt to assign to an unexportable variable" G18998) (G15515 '#f '"invalid syntax" G18998)))))))) G19016)))) G19006) (G15515 '#f '"invalid syntax" G19004))) (G15327 G19004 '(_ any any)))) G18998))) (set! G15367 (lambda (G19023 G19024) ((lambda (G19027) ((lambda (G19029) (if G19029 (apply (lambda (G19031) (if (G14922 G19031) (void) (G15257 G19024 G19023))) G19029) ((lambda (G19033) ((lambda (G19035) (if G19035 (apply (lambda (G19037 G19038) (if (G14922 (cons G19038 G19037)) (void) (G15257 G19024 G19023))) G19035) ((lambda (G19041) ((lambda (G19043) (if G19043 (apply (lambda () (G15515 '#f '"invalid syntax" G19024)) G19043) (G15515 '#f '"invalid syntax" G19041))) (G15327 G19041 '_))) G19033))) (G15327 G19033 '#(each+ any () any)))) G19027))) (G15327 G19027 'each-any))) G19023))) (set! G15369 (lambda (G19045 G19046 G19047 G19048 G19049) ((lambda (G19055) ((lambda (G19057) (if G19057 (apply (lambda (G19059) (begin (G15367 G19046 G19045) ((lambda (G19061 G19062) (values G19061 (G15385 (G14892 (G14876 G19059 G19062) G19047) (G15223 G19062 G19061 G19048) G19049))) (map G14830 G19059) (map G14834 G19059)))) G19057) ((lambda (G19065) ((lambda (G19067) (if G19067 (apply (lambda (G19069 G19070) (begin (G15367 G19046 G19045) ((lambda (G19073 G19074 G19075 G19076) (values (append G19073 G19075) (G15385 (G14892 (G14876 (cons G19070 G19069) (cons G19076 G19074)) G19047) (G15223 (cons G19076 G19074) (cons G19075 G19073) G19048) G19049))) (map G14830 G19069) (map G14834 G19069) (G14830 G19070) (G14834 G19070)))) G19067) ((lambda (G19081) ((lambda (G19083) (if G19083 (apply (lambda () (G15515 '#f '"invalid syntax" G19046)) G19083) (G15515 '#f '"invalid syntax" G19081))) (G15327 G19081 '_))) G19065))) (G15327 G19065 '#(each+ any () any)))) G19055))) (G15327 G19055 'each-any))) G19046))) (set! G15371 (lambda (G19085 G19086 G19087 G19088 G19089) (if (null? G19086) (values '() '()) (call-with-values (lambda () (G15369 G19085 (car G19086) (car G19087) G19088 G19089)) (lambda (G19095 G19096) (call-with-values (lambda () (G15371 G19085 (cdr G19086) (cdr G19087) G19088 G19089)) (lambda (G19099 G19100) (values (cons G19095 G19099) (cons G19096 G19100))))))))) (set! G15373 (lambda (G19103 G19104 G19105) ((lambda (G19109 G19110) (call-with-values (lambda () (G15369 G19109 G19109 G19110 G19104 G19105)) (lambda (G19113 G19114) (G14793 '#f G19113 G19114)))) (car G19103) (cdr G19103)))) (set! G15375 (lambda (G19117 G19118 G19119) ((lambda (G19123) (if (memv G19123 '(defun)) (G15373 (cdr G19117) G19118 G19119) (if (memv G19123 '(expr)) ((lambda (G19126) (G15363 G19126 G19118 G19119)) (cdr G19117)) (if (memv G19123 '(top-expr)) ((lambda (G19124) (G14787 '#f (list (G15363 G19124 G19118 G19119) (G14786)))) (cdr G19117)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G19117))))) (car G19117)))) (set! G15377 (lambda (G19128 G19129 G19130 G19131 G19132) (letrec ((G19138 (lambda (G19140 G19141) (if (null? G19140) (map (lambda (G19144) (G15363 G19144 G19131 G19132)) G19130) ((lambda (G19146 G19147) ((lambda (G19150) (if (memv G19150 '(defun)) ((lambda (G19155) (cons (list 'set! G19146 G19155) (G19138 (cdr G19140) (cdr G19141)))) (G15373 (cdr G19147) G19131 G19132)) (if (memv G19150 '(expr)) ((lambda (G19153) (cons (list 'set! G19146 G19153) (G19138 (cdr G19140) (cdr G19141)))) (G15363 (cdr G19147) G19131 G19132)) (if (memv G19150 '(top-expr)) ((lambda (G19151) (cons G19151 (G19138 (cdr G19140) (cdr G19141)))) (G15363 (cdr G19147) G19131 G19132)) (error 'expand-interaction '"invallid" G19147))))) (car G19147))) (car G19140) (car G19141)))))) (G19138 G19128 G19129)))) (set! G15379 (lambda (G19157 G19158 G19159) (letrec ((G19163 (lambda (G19165) (if (null? G19165) '() ((lambda (G19167) (cons G19167 (G19163 (cdr G19165)))) (G15375 (car G19165) G19158 G19159)))))) (G19163 G19157)))) (set! G15381 (lambda (G19169 G19170 G19171) (if (null? G19170) '#f (if (G14918 G19169 (car G19170)) (car G19171) (G15381 G19169 (cdr G19170) (cdr G19171)))))) (set! G15383 (lambda (G19175) (letrec ((G19177 (lambda (G19179 G19180) (if (null? G19179) G19180 ((lambda (G19183) (if G19183 ((lambda (G19185) (G19177 (cdr G19179) (cons (list (car G19179) G19185) G19180))) G19183) (G19177 (cdr G19179) G19180))) (G15381 (car G19179) (cdr G19179) (cdr G19179))))))) (G19177 G19175 '())))) (set! G15385 (lambda (G19187 G19188 G19189) ((lambda (G19193) (call-with-values (lambda () (G15407 (map (lambda (G19195) (G14892 G19193 G19195)) (G14910 G19187)) G19188 G19189 '() '() '() '() G19193 '#f)) (lambda (G19197 G19198 G19199 G19200 G19201 G19202 G19203) (begin (if (null? G19197) (G15515 '#f '"no expression in body" G19197) (void)) ((lambda (G19211) ((lambda (G19213) ((lambda () (G14784 '#f (reverse G19200) (reverse G19213) (G14787 '#f G19211))))) (G15379 G19201 G19198 G19199))) (G15359 (append (apply append (reverse G19202)) G19197) G19198 G19199)))))) (G14866)))) (set! G15387 (lambda (G19215) ((lambda (G19217) ((lambda (G19219) (if G19219 (apply (lambda (G19221 G19222) (begin (if (for-all G14912 G19221) (void) (G15515 '#f '"module exports must be identifiers" G19215)) (values '#f (list->vector G19221) G19222))) G19219) ((lambda (G19225) ((lambda (G19227) (if G19227 (apply (lambda (G19229 G19230 G19231) (begin (if (G14912 G19229) (void) (G15515 '#f '"module name must be an identifier" G19215)) (if (for-all G14912 G19230) (void) (G15515 '#f '"module exports must be identifiers" G19215)) (values G19229 (list->vector G19230) G19231))) G19227) (G15515 '#f '"invalid syntax" G19225))) (G15327 G19225 '(_ any each-any . each-any)))) G19217))) (G15327 G19217 '(_ each-any . each-any)))) G19215))) (set! G15389 (make-record-type-descriptor 'record '#f '#f '#f '#f '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G15391 (make-record-constructor-descriptor G15389 '#f '#f)) (set! G15393 (record-constructor G15391)) (set! G15395 (record-predicate G15389)) (set! G15397 (record-accessor G15389 '0)) (set! G15399 (record-accessor G15389 '1)) (set! G15401 (record-accessor G15389 '2)) (set! G15403 (lambda (G19235 G19236) ((lambda (G19239) (begin (set! G19239 (lambda (G19241 G19242) (begin (if (null? G19241) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G19245) (if (eq? G19245 G19242) '() (cons G19245 (G19239 (cdr G19241) G19242)))) (car G19241))))) ((lambda (G19247 G19248) (if (null? G19247) G19248 (vector-map (lambda (G19251) (G14807 (G14811 G19251) (append G19247 (G14813 G19251)) '() '())) G19248))) (G19239 (G14813 G19236) (G15397 G19235)) (G15399 G19235)))) '#f))) (set! G15405 (lambda (G19253 G19254 G19255 G19256 G19257 G19258 G19259) (call-with-values (lambda () (G15387 G19253)) (lambda (G19267 G19268 G19269) ((lambda (G19273) ((lambda (G19275) ((lambda () (call-with-values (lambda () (G15407 G19275 G19254 G19255 G19256 G19257 G19258 G19259 G19273 '#f)) (lambda (G19277 G19278 G19279 G19280 G19281 G19282 G19283) ((lambda (G19291 G19292) (if (not G19267) (values G19280 G19281 G19268 G19291 G19278 G19279 G19292 G19283) ((lambda (G19295 G19296) (values G19280 G19281 (vector G19267) (vector G19295) (cons (cons G19295 (cons '$module G19296)) G19278) (cons (cons G19295 (cons '$module G19296)) G19279) G19292 G19283)) (G14834 'module) (G15393 (car (G14813 G19267)) (vector-map (lambda (G19299) (G14807 (G14811 G19299) (G14813 G19299) '() '())) G19268) G19291)))) (vector-map (lambda (G19301) ((lambda (G19303) (if G19303 G19303 (begin '#f (G15515 '#f '"cannot find module export" G19301)))) (G14938 (G14807 (G14914 G19301) (G14813 G19301) (list G19273) '())))) G19268) (cons G19277 G19282))))))) (map (lambda (G19305) (G14892 G19273 G19305)) (G14910 G19269)))) (G14866)))))) (set! G15407 (lambda (G19307 G19308 G19309 G19310 G19311 G19312 G19313 G19314 G19315) (if (null? G19307) (values G19307 G19308 G19309 G19310 G19311 G19312 G19313) ((lambda (G19325) (call-with-values (lambda () (G14952 G19325 G19308)) (lambda (G19327 G19328 G19329) ((lambda (G19333) ((lambda (G19335) (if (memv G19335 '(define)) (call-with-values (lambda () (G15207 G19325)) (lambda (G19473 G19474) (begin (if (G14926 G19473 G19333) (G15515 '#f '"cannot redefine keyword" G19325) (void)) (call-with-values (lambda () (G14838 G19473 G19314)) (lambda (G19477 G19478) (begin (G14868 G19314 G19473 G19477) (G15407 (cdr G19307) (G15221 G19477 G19478 G19308) G19309 (cons G19478 G19310) (cons G19474 G19311) G19312 G19333 G19314 G19315))))))) (if (memv G19335 '(define-syntax)) (call-with-values (lambda () (G15209 G19325)) (lambda (G19463 G19464) (begin (if (G14926 G19463 G19333) (G15515 '#f '"cannot redefine keyword" G19325) (void)) ((lambda (G19467 G19468) (begin (G14868 G19314 G19463 G19467) ((lambda (G19471) (G15407 (cdr G19307) (cons (cons G19467 G19471) G19308) (cons (cons G19467 G19471) G19309) G19310 G19311 G19312 G19333 G19314 G19315)) (G14974 G19468)))) (G14840 G19463 G19314) (G15409 G19464 G19309))))) (if (memv G19335 '(let-syntax letrec-syntax)) ((lambda (G19437) ((lambda (G19439) (if (if G19439 (begin '#f (apply (lambda (G19441 G19442 G19443) (if (G14922 G19441) (void) (G15515 '#f '"invalid identifiers" G19325))) G19439)) '#f) (apply (lambda (G19447 G19448 G19449) ((lambda (G19453) ((lambda (G19455) ((lambda (G19457) ((lambda () (G15407 (append (map (lambda (G19459) (G14892 G19455 G19459)) G19449) (cdr G19307)) (append (map cons G19453 G19457) G19308) (append (map cons G19453 G19457) G19309) G19310 G19311 G19312 G19333 G19314 G19315)))) (map (lambda (G19461) (G14974 (G15409 (if (eq? G19327 'let-syntax) G19461 (G14892 G19455 G19461)) G19309))) G19448))) (G14876 G19447 G19453))) (map G14834 G19447))) G19439) (G15515 '#f '"invalid syntax" G19437))) (G15327 G19437 '(_ #(each (any any)) . each-any)))) G19325) (if (memv G19335 '(begin)) ((lambda (G19431) ((lambda (G19433) (if G19433 (apply (lambda (G19435) (G15407 (append G19435 (cdr G19307)) G19308 G19309 G19310 G19311 G19312 G19333 G19314 G19315)) G19433) (G15515 '#f '"invalid syntax" G19431))) (G15327 G19431 '(_ . each-any)))) G19325) (if (memv G19335 '(global-macro global-macro!)) (G15407 (cons (G14892 G19314 (G15357 G19328 G19325)) (cdr G19307)) G19308 G19309 G19310 G19311 G19312 G19333 G19314 G19315) (if (memv G19335 '(local-macro local-macro!)) (G15407 (cons (G14892 G19314 (G15355 G19328 G19325)) (cdr G19307)) G19308 G19309 G19310 G19311 G19312 G19333 G19314 G19315) (if (memv G19335 '(macro macro!)) (G15407 (cons (G14892 G19314 (G15353 G19328 G19325)) (cdr G19307)) G19308 G19309 G19310 G19311 G19312 G19333 G19314 G19315) (if (memv G19335 '(module)) (call-with-values (lambda () (G15405 G19325 G19308 G19309 G19310 G19311 G19312 G19333)) (lambda (G19411 G19412 G19413 G19414 G19415 G19416 G19417 G19418) (begin (vector-for-each (lambda (G19427 G19428) (G14868 G19314 G19427 G19428)) G19413 G19414) (G15407 (cdr G19307) G19415 G19416 G19411 G19412 G19417 G19418 G19314 G19315)))) (if (memv G19335 '(library)) (begin (G15489 (G14934 G19325)) (G15407 (cdr G19307) G19308 G19309 G19310 G19311 G19312 G19333 G19314 G19315)) (if (memv G19335 '(import)) (begin ((lambda () ((lambda (G19336 G19338 G19340) (begin (set! G19336 (lambda (G19383) ((lambda (G19385) ((lambda (G19387) (if (if G19387 (begin '#f (apply (lambda (G19389) (G14912 G19389)) G19387)) '#f) (apply (lambda (G19391) '#t) G19387) ((lambda (G19393) ((lambda (G19395) (if G19395 (apply (lambda (G19397) '#f) G19395) ((lambda (G19399) ((lambda (G19401) (if G19401 (apply (lambda () (G15515 '#f '"malformed import form" G19383)) G19401) (G15515 '#f '"invalid syntax" G19399))) (G15327 G19399 '_))) G19393))) (G15327 G19393 '(_ . each-any)))) G19385))) (G15327 G19385 '(_ any)))) G19383))) (set! G19338 (lambda (G19362 G19363) ((lambda (G19366) ((lambda (G19368) (if (if G19368 (begin '#f (apply (lambda (G19370) (G14912 G19370)) G19368)) '#f) (apply (lambda (G19372) (call-with-values (lambda () (G14952 G19372 G19363)) (lambda (G19374 G19375 G19376) ((lambda (G19380) (if (memv G19380 '($module)) ((lambda (G19381) (values (G15403 G19381 G19372) (G15401 G19381))) G19375) (G15515 '#f '"invalid import" G19362))) G19374)))) G19368) (G15515 '#f '"invalid syntax" G19366))) (G15327 G19366 '(_ any)))) G19362))) (set! G19340 (lambda (G19342) ((lambda (G19344) ((lambda (G19346) (if G19346 (apply (lambda (G19348 G19349) (call-with-values (lambda () (G15417 (G15521 G19349))) (lambda (G19352 G19353) (values (vector-map (lambda (G19356) (G14878 G19348 G19356)) G19352) G19353)))) G19346) ((lambda (G19358) ((lambda (G19360) (if G19360 (apply (lambda () (G15515 '#f '"invalid import form" G19342)) G19360) (G15515 '#f '"invalid syntax" G19358))) (G15327 G19358 '_))) G19344))) (G15327 G19344 '(any . each-any)))) G19342))) (call-with-values (lambda () (if (G19336 G19325) (G19338 G19325 G19308) (G19340 G19325))) (lambda (G19403 G19404) (vector-for-each (lambda (G19407 G19408) (G14868 G19314 G19407 G19408)) G19403 G19404))))) '#f '#f '#f))) (G15407 (cdr G19307) G19308 G19309 G19310 G19311 G19312 G19333 G19314 G19315)) (if G19315 (G15407 (cdr G19307) G19308 G19309 (cons (G14830 'dummy) G19310) (cons (cons 'top-expr G19325) G19311) G19312 G19333 G19314 G19315) (values G19307 G19308 G19309 G19310 G19311 G19312 G19333))))))))))))) G19327)) (if (G14912 G19329) (cons G19329 G19313) G19313))))) (car G19307))))) (set! G15409 (lambda (G19481 G19482) ((lambda (G19485) ((lambda (G19487) (begin (for-each ((lambda (G19489) (lambda (G19491) (begin (G14496 G19491) (G19489 G19491)))) (G15425)) (G19485)) G19487)) ((lambda (G19497 G19498 G19499 G19500) ((lambda (G19505) (dynamic-wind G19505 (lambda () (G15363 G19481 G19482 G19482)) G19505)) (lambda () (begin ((lambda (G19507) (begin (G19497 G19499) (set! G19499 G19507))) (G19497)) ((lambda (G19509) (begin (G19498 G19500) (set! G19500 G19509))) (G19498)))))) G15423 G15425 G19485 (lambda (G19511) (values))))) (G15421)))) (set! G15411 (lambda (G19513) ((lambda (G19515) (begin (set! G19515 (lambda (G19517) (symbol? (G15521 G19517)))) (letrec ((G19519 (lambda (G19521 G19522 G19523) (if (null? G19521) (begin ((lambda (G19527) (if (G14922 G19527) (void) (G15515 'export '"invalid exports" (G15383 G19527)))) (map (lambda (G19529) (G14807 G19529 G14826 '() '())) G19523)) (values (map G15521 G19522) (map G15521 G19523))) ((lambda (G19531) ((lambda (G19533) (if G19533 (apply (lambda (G19535 G19536 G19537) (begin (if (if (eq? (G15521 G19535) 'rename) (if (for-all G19515 G19536) (begin '#f (for-all G19515 G19537)) '#f) '#f) (void) (G15515 'export '"invalid export specifier" (car G19521))) (G19519 (cdr G19521) (append G19536 G19522) (append G19537 G19523)))) G19533) ((lambda (G19541) ((lambda (G19543) (if G19543 (apply (lambda (G19545) (begin (if (G19515 G19545) (void) (G15515 'export '"invalid export" G19545)) (G19519 (cdr G19521) (cons G19545 G19522) (cons G19545 G19523)))) G19543) (G15515 '#f '"invalid syntax" G19541))) (G15327 G19541 'any))) G19531))) (G15327 G19531 '(any . #(each (any any)))))) (car G19521)))))) (G19519 G19513 '() '())))) '#f))) (set! G15413 (lambda (G19547) ((lambda (G19549) (begin (set! G19549 (lambda (G19551) ((lambda (G19553) ((lambda (G19555) (if (if G19555 (begin '#f (apply (lambda (G19557) (for-all (lambda (G19559) ((lambda (G19561) (if (integer? G19561) (begin '#f (exact? G19561)) '#f)) (G15521 G19559))) G19557)) G19555)) '#f) (apply (lambda (G19563) (values '() (map G15521 G19563))) G19555) ((lambda (G19565) ((lambda (G19567) (if (if G19567 (begin '#f (apply (lambda (G19569 G19570) (symbol? (G15521 G19569))) G19567)) '#f) (apply (lambda (G19573 G19574) (call-with-values (lambda () (G19549 G19574)) (lambda (G19577 G19578) (values (cons (G15521 G19573) G19577) G19578)))) G19567) ((lambda (G19581) ((lambda (G19583) (if G19583 (apply (lambda () (values '() '())) G19583) ((lambda (G19585) ((lambda (G19587) (if G19587 (apply (lambda () (G15515 '#f '"invalid library name" G19547)) G19587) (G15515 '#f '"invalid syntax" G19585))) (G15327 G19585 '_))) G19581))) (G15327 G19581 '()))) G19565))) (G15327 G19565 '(any . any)))) G19553))) (G15327 G19553 '(each-any)))) G19551))) (call-with-values (lambda () (G19549 G19547)) (lambda (G19589 G19590) (begin (if (null? G19589) (G15515 '#f '"empty library name" G19547) (void)) (values G19589 G19590)))))) '#f))) (set! G15415 (lambda (G19593) ((lambda (G19595) ((lambda (G19597) (if (if G19597 (begin '#f (apply (lambda (G19599 G19600 G19601 G19602 G19603 G19604 G19605) (if (eq? (G15521 G19601) 'export) (if (eq? (G15521 G19603) 'import) (begin '#f (eq? (G15521 G19599) 'library)) '#f) '#f)) G19597)) '#f) (apply (lambda (G19613 G19614 G19615 G19616 G19617 G19618 G19619) (values G19614 G19616 G19618 G19619)) G19597) ((lambda (G19627) ((lambda (G19629) (if G19629 (apply (lambda () (G15515 '#f '"malformed library" G19593)) G19629) (G15515 '#f '"invalid syntax" G19627))) (G15327 G19627 '_))) G19595))) (G15327 G19595 '(any each-any (any . each-any) (any . each-any) . each-any)))) G19593))) (set! G15417 (lambda (G19631) ((lambda (G19633 G19635 G19637 G19639 G19641 G19643 G19645 G19647 G19649 G19651 G19653) (begin (set! G19633 (lambda (G20105) (symbol? (G15521 G20105)))) (set! G19635 (lambda (G20103) (G15515 'import '"two imports with different bindings" G20103))) (set! G19637 (lambda (G20085 G20086) ((lambda (G20089) (begin (set! G20089 (lambda (G20091 G20092) ((lambda (G20095 G20096) ((lambda (G20099) (if G20099 ((lambda (G20101) (if (eq? (cdr G20101) G20096) G20092 (G19635 G20095))) G20099) (cons G20091 G20092))) (assq G20095 G20092))) (car G20091) (cdr G20091)))) (if (null? G20085) G20086 (G20089 (car G20085) (G19637 (cdr G20085) G20086))))) '#f))) (set! G19639 (lambda (G20061 G20062) ((lambda (G20065) (begin (set! G20065 (lambda (G20067 G20068) (if (null? G20068) (G15515 'import '"cannot rename unbound identifier" G20067) (if (eq? G20067 (caar G20068)) (values (cdar G20068) (cdr G20068)) ((lambda (G20071) (call-with-values (lambda () (G20065 G20067 (cdr G20068))) (lambda (G20073 G20074) (values G20073 (cons G20071 G20074))))) (car G20068)))))) (if (null? G20061) (values '() G20062) (call-with-values (lambda () (G20065 (car G20061) G20062)) (lambda (G20077 G20078) (call-with-values (lambda () (G19639 (cdr G20061) G20078)) (lambda (G20081 G20082) (values (cons G20077 G20081) G20082)))))))) '#f))) (set! G19641 (lambda (G20053 G20054) (map (lambda (G20057) ((lambda (G20059) (if G20059 (cdr G20059) (G15515 'import '"cannot find identifier" G20057))) (assq G20057 G20054))) G20053))) (set! G19643 (lambda (G20045 G20046) (letrec ((G20049 (lambda (G20051) (if (null? G20051) '() (if (memq (caar G20051) G20045) (G20049 (cdr G20051)) (cons (car G20051) (G20049 (cdr G20051)))))))) (G20049 G20046)))) (set! G19645 (lambda (G20043) (if (null? G20043) '() (if (memq (car G20043) (cdr G20043)) (G19645 (cdr G20043)) (cons (car G20043) (G19645 (cdr G20043))))))) (set! G19647 (lambda (G19821) ((lambda (G19823 G19825 G19827) (begin (set! G19823 (lambda (G20005) (if (integer? G20005) (if (exact? G20005) (begin '#f (>= G20005 '0)) '#f) '#f))) (set! G19825 (lambda (G19909) ((lambda (G19911) ((lambda (G19913) (if (if G19913 (begin '#f (apply (lambda (G19915) (G19823 (G15521 G19915))) G19913)) '#f) (apply (lambda (G19917) (lambda (G19919) (= G19919 (G15521 G19917)))) G19913) ((lambda (G19921) ((lambda (G19923) (if (if G19923 (begin '#f (apply (lambda (G19925 G19926) (eq? (G15521 G19925) 'and)) G19923)) '#f) (apply (lambda (G19929 G19930) ((lambda (G19933) (lambda (G19935) (for-all (lambda (G19937) (G19937 G19935)) G19933))) (map G19825 G19930))) G19923) ((lambda (G19939) ((lambda (G19941) (if (if G19941 (begin '#f (apply (lambda (G19943 G19944) (eq? (G15521 G19943) 'or)) G19941)) '#f) (apply (lambda (G19947 G19948) ((lambda (G19951) (lambda (G19953) (exists (lambda (G19955) (G19955 G19953)) G19951))) (map G19825 G19948))) G19941) ((lambda (G19957) ((lambda (G19959) (if (if G19959 (begin '#f (apply (lambda (G19961 G19962) (eq? (G15521 G19961) 'not)) G19959)) '#f) (apply (lambda (G19965 G19966) ((lambda (G19969) (lambda (G19971) (not (G19969 G19971)))) (G19825 G19966))) G19959) ((lambda (G19973) ((lambda (G19975) (if (if G19975 (begin '#f (apply (lambda (G19977 G19978) (if (eq? (G15521 G19977) '<=) (begin '#f (G19823 (G15521 G19978))) '#f)) G19975)) '#f) (apply (lambda (G19981 G19982) (lambda (G19985) (<= G19985 (G15521 G19982)))) G19975) ((lambda (G19987) ((lambda (G19989) (if (if G19989 (begin '#f (apply (lambda (G19991 G19992) (if (eq? (G15521 G19991) '>=) (begin '#f (G19823 G19992)) '#f)) G19989)) '#f) (apply (lambda (G19995 G19996) (lambda (G19999) (>= G19999 (G15521 G19996)))) G19989) ((lambda (G20001) ((lambda (G20003) (if G20003 (apply (lambda () (G15515 'import '"invalid sub-version spec" G19821 G19909)) G20003) (G15515 '#f '"invalid syntax" G20001))) (G15327 G20001 '_))) G19987))) (G15327 G19987 '(any any)))) G19973))) (G15327 G19973 '(any any)))) G19957))) (G15327 G19957 '(any any)))) G19939))) (G15327 G19939 '(any . each-any)))) G19921))) (G15327 G19921 '(any . each-any)))) G19911))) (G15327 G19911 'any))) G19909))) (set! G19827 (lambda (G19829) ((lambda (G19831) ((lambda (G19833) (if G19833 (apply (lambda () (lambda (G19835) '#t)) G19833) ((lambda (G19837) ((lambda (G19839) (if (if G19839 (begin '#f (apply (lambda (G19841 G19842) (eq? (G15521 G19841) 'and)) G19839)) '#f) (apply (lambda (G19845 G19846) ((lambda (G19849) (lambda (G19851) (for-all (lambda (G19853) (G19853 G19851)) G19849))) (map G19827 G19846))) G19839) ((lambda (G19855) ((lambda (G19857) (if (if G19857 (begin '#f (apply (lambda (G19859 G19860) (eq? (G15521 G19859) 'or)) G19857)) '#f) (apply (lambda (G19863 G19864) ((lambda (G19867) (lambda (G19869) (exists (lambda (G19871) (G19871 G19869)) G19867))) (map G19827 G19864))) G19857) ((lambda (G19873) ((lambda (G19875) (if (if G19875 (begin '#f (apply (lambda (G19877 G19878) (eq? (G15521 G19877) 'not)) G19875)) '#f) (apply (lambda (G19881 G19882) ((lambda (G19885) (lambda (G19887) (not (G19885 G19887)))) (G19827 G19882))) G19875) ((lambda (G19889) ((lambda (G19891) (if G19891 (apply (lambda (G19893) ((lambda (G19895) (lambda (G19897) (letrec ((G19899 (lambda (G19901 G19902) (if (null? G19901) '#t (if (null? G19902) '#f (if ((car G19901) (car G19902)) (begin '#f (G19899 (cdr G19901) (cdr G19902))) '#f)))))) (G19899 G19895 G19897)))) (map G19825 G19893))) G19891) ((lambda (G19905) ((lambda (G19907) (if G19907 (apply (lambda () (G15515 'import '"invalid version spec" G19821 G19829)) G19907) (G15515 '#f '"invalid syntax" G19905))) (G15327 G19905 '_))) G19889))) (G15327 G19889 'each-any))) G19873))) (G15327 G19873 '(any any)))) G19855))) (G15327 G19855 '(any . each-any)))) G19837))) (G15327 G19837 '(any . each-any)))) G19831))) (G15327 G19831 '()))) G19829))) (letrec ((G20007 (lambda (G20009) ((lambda (G20011) ((lambda (G20013) (if G20013 (apply (lambda (G20015) (values '() (G19827 G20015))) G20013) ((lambda (G20017) ((lambda (G20019) (if (if G20019 (begin '#f (apply (lambda (G20021 G20022) (G19633 G20021)) G20019)) '#f) (apply (lambda (G20025 G20026) (call-with-values (lambda () (G20007 G20026)) (lambda (G20029 G20030) (values (cons (G15521 G20025) G20029) G20030)))) G20019) ((lambda (G20033) ((lambda (G20035) (if G20035 (apply (lambda () (values '() (lambda (G20037) '#t))) G20035) ((lambda (G20039) ((lambda (G20041) (if G20041 (apply (lambda () (G15515 '#f '"invalid import spec" G19821)) G20041) (G15515 '#f '"invalid syntax" G20039))) (G15327 G20039 '_))) G20033))) (G15327 G20033 '()))) G20017))) (G15327 G20017 '(any . any)))) G20011))) (G15327 G20011 '(each-any)))) G20009)))) (G20007 G19821)))) '#f '#f '#f))) (set! G19649 (lambda (G19813) (call-with-values (lambda () (G19647 G19813)) (lambda (G19815 G19816) (begin (if (null? G19815) (G15515 'import '"empty library name" G19813) (void)) ((lambda (G19819) (begin (if G19819 (void) (G15515 'import '"cannot find library with required name" G19815)) (if (G19816 (G14530 G19819)) (void) (G15515 'import '"library does not satisfy version specification" G19813 G19819)) ((G15427) G19819) (G14526 G19819))) (G14503 G19815))))))) (set! G19651 (lambda (G19671) ((lambda (G19673) ((lambda (G19675) (if (if G19675 (begin '#f (apply (lambda (G19677 G19678) (not (memq (G15521 G19677) '(for rename except only prefix library)))) G19675)) '#f) (apply (lambda (G19681 G19682) (G19649 (cons G19681 G19682))) G19675) ((lambda (G19685) ((lambda (G19687) (if (if G19687 (begin '#f (apply (lambda (G19689 G19690 G19691 G19692) (if (eq? (G15521 G19689) 'rename) (if (for-all G19633 G19691) (begin '#f (for-all G19633 G19692)) '#f) '#f)) G19687)) '#f) (apply (lambda (G19697 G19698 G19699 G19700) ((lambda (G19705 G19706 G19707) ((lambda (G19711) ((lambda (G19713) (G19637 (map cons G19707 G19711) G19713)) (G19643 G19706 G19705))) (G19641 G19706 G19705))) (G19651 G19698) (map G15521 G19699) (map G15521 G19700))) G19687) ((lambda (G19715) ((lambda (G19717) (if (if G19717 (begin '#f (apply (lambda (G19719 G19720 G19721) (if (eq? (G15521 G19719) 'except) (begin '#f (for-all G19633 G19721)) '#f)) G19717)) '#f) (apply (lambda (G19725 G19726 G19727) ((lambda (G19731) (G19643 (map G15521 G19727) G19731)) (G19651 G19726))) G19717) ((lambda (G19733) ((lambda (G19735) (if (if G19735 (begin '#f (apply (lambda (G19737 G19738 G19739) (if (eq? (G15521 G19737) 'only) (begin '#f (for-all G19633 G19739)) '#f)) G19735)) '#f) (apply (lambda (G19743 G19744 G19745) ((lambda (G19749 G19750) ((lambda (G19753) ((lambda (G19755) (map cons G19753 G19755)) (G19641 G19753 G19749))) (G19645 G19750))) (G19651 G19744) (map G15521 G19745))) G19735) ((lambda (G19757) ((lambda (G19759) (if (if G19759 (begin '#f (apply (lambda (G19761 G19762 G19763) (if (eq? (G15521 G19761) 'prefix) (begin '#f (G19633 G19763)) '#f)) G19759)) '#f) (apply (lambda (G19767 G19768 G19769) ((lambda (G19773 G19774) (map (lambda (G19777) (cons (string->symbol (string-append G19774 (symbol->string (car G19777)))) (cdr G19777))) G19773)) (G19651 G19768) (symbol->string (G15521 G19769)))) G19759) ((lambda (G19779) ((lambda (G19781) (if (if G19781 (begin '#f (apply (lambda (G19783 G19784) (eq? (G15521 G19783) 'library)) G19781)) '#f) (apply (lambda (G19787 G19788) (G19649 G19788)) G19781) ((lambda (G19791) ((lambda (G19793) (if (if G19793 (begin '#f (apply (lambda (G19795 G19796 G19797) (eq? (G15521 G19795) 'for)) G19793)) '#f) (apply (lambda (G19801 G19802 G19803) (G19651 G19802)) G19793) ((lambda (G19807) ((lambda (G19809) (if G19809 (apply (lambda (G19811) (G15515 'import '"invalid import spec" G19811)) G19809) (G15515 '#f '"invalid syntax" G19807))) (G15327 G19807 'any))) G19791))) (G15327 G19791 '(any any . any)))) G19779))) (G15327 G19779 '(any each-any)))) G19757))) (G15327 G19757 '(any any any)))) G19733))) (G15327 G19733 '(any any . each-any)))) G19715))) (G15327 G19715 '(any any . each-any)))) G19685))) (G15327 G19685 '(any any . #(each (any any)))))) G19673))) (G15327 G19673 '(any . each-any)))) G19671))) (set! G19653 (lambda (G19655 G19656) ((lambda (G19659) (for-each (lambda (G19661) ((lambda (G19663 G19664) ((lambda (G19667) (if G19667 ((lambda (G19669) (if (eq? G19669 G19664) (void) (G19635 G19663))) G19667) (hashtable-set! G19656 G19663 G19664))) (hashtable-ref G19656 G19663 '#f))) (car G19661) (cdr G19661))) G19659)) (G19651 G19655)))) (letrec ((G20107 (lambda (G20109 G20110) (if (null? G20109) (hashtable-entries G20110) (begin (G19653 (car G20109) G20110) (G20107 (cdr G20109) G20110)))))) (G20107 G19631 (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G15419 (lambda (G20113 G20114) ((lambda (G20117) (begin (vector-for-each (lambda (G20119 G20120) (begin (if (symbol? G20119) (void) (error 'make-top-rib '"BUG: not a symbol" G20119)) (G14868 G20117 (G14807 G20119 G14826 '() '()) G20120))) G20113 G20114) G20117)) (G14866)))) (set! G15421 (lambda () ((lambda (G20123) (lambda G20127 ((lambda (G20128) (if (= G20128 '0) (apply (lambda () G20123) G20127) (if (= G20128 '1) (apply (lambda (G20125) (set! G20123 (G14819 G20125 G20123))) G20127) (error 'apply '"invalid arg count")))) (length G20127)))) '()))) (set! G15423 (G13948 (lambda G20129 (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G20131) (begin (if (procedure? G20131) (void) (assertion-violation 'inv-collector '"BUG: not a procedure" G20131)) G20131)))) (set! G15425 (G13948 (lambda G20133 (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G20135) (begin (if (procedure? G20135) (void) (assertion-violation 'vis-collector '"BUG: not a procedure" G20135)) G20135)))) (set! G15427 (G13948 (lambda G20137 (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G20139) (begin (if (procedure? G20139) (void) (assertion-violation 'imp-collector '"BUG: not a procedure" G20139)) G20139)))) (set! G15429 (lambda (G20141 G20142 G20143) (call-with-values (lambda () (G15407 G20141 '() '() '() '() '() '() G20142 G20143)) (lambda (G20147 G20148 G20149 G20150 G20151 G20152 G20153) (values (append (apply append (reverse G20152)) G20147) G20148 G20149 (reverse G20150) (reverse G20151)))))) (set! G15431 (lambda (G20161 G20162 G20163) (call-with-values (lambda () (G15407 (list G20161) G20163 G20163 '() '() '() '() G20162 '#t)) (lambda (G20167 G20168 G20169 G20170 G20171 G20172 G20173) ((lambda (G20181) ((lambda (G20183) (values G20183 G20168)) (if (null? G20181) (G14786) (if (null? (cdr G20181)) (car G20181) (G14787 '#f G20181))))) (G15377 (reverse G20170) (reverse G20171) (append (apply append (reverse G20172)) G20167) G20168 G20169)))))) (set! G15433 (lambda (G20185 G20186 G20187 G20188 G20189) ((lambda (G20195) (begin (set! G20195 (G15421)) ((lambda (G20201 G20202 G20203 G20204) ((lambda (G20209) (dynamic-wind G20209 (lambda () (call-with-values (lambda () (G15411 G20186)) (lambda (G20211 G20212) (call-with-values (lambda () (G15417 G20187)) (lambda (G20215 G20216) ((lambda (G20219) ((lambda (G20221 G20222 G20223) ((lambda (G20231 G20232 G20233 G20234) ((lambda (G20239) (dynamic-wind G20239 (lambda () (call-with-values (lambda () (G15429 G20221 G20219 G20189)) (lambda (G20241 G20242 G20243 G20244 G20245) (begin (G14872 G20219) ((lambda (G20251) ((lambda (G20253) ((lambda () (begin (G14874 G20219) ((lambda (G20255 G20256) ((lambda (G20259) (begin (set! G20259 '"attempt to export mutated variable") (call-with-values (lambda () (G15499 G20244 G20255 G20242)) (lambda (G20261 G20262 G20263) (begin (for-each (lambda (G20267) ((lambda (G20269 G20270) ((lambda (G20273) (if G20273 ((lambda (G20275) ((lambda (G20277) (if (eq? G20277 'mutable) (G15515 'export G20259 G20269) (void))) (car G20275))) (cdr G20273)) (void))) (assq G20270 G20261))) (car G20267) (cdr G20267))) G20256) ((lambda (G20279 G20280) (values (G20195) (G20222) (G20223) (G14787 '#f (append G20280 (list G20279))) G20263 G20256 G20261)) (G14784 '#f G20244 G20253 (G15495 G20262 G20251)) (map G14801 (map cdr G20262)))))))) '#f)) (map G14832 G20244) (G15497 G20211 G20212 G20219)))))) (G15379 G20245 G20242 G20243))) (G15359 G20241 G20242 G20243)))))) G20239)) (lambda () (begin ((lambda (G20283) (begin (G20231 G20233) (set! G20233 G20283))) (G20231)) ((lambda (G20285) (begin (G20232 G20234) (set! G20234 G20285))) (G20232)))))) G15423 G15425 G20222 G20223)) (map (lambda (G20287) (G14807 G20287 G14826 (list G20219) '())) G20188) (G15421) (G15421))) (G15419 G20215 G20216))))))) G20209)) (lambda () (begin ((lambda (G20289) (begin (G20201 G20203) (set! G20203 G20289))) (G20201)) ((lambda (G20291) (begin (G20202 G20204) (set! G20204 G20291))) (G20202)))))) G15427 G15529 G20195 '#f))) '#f))) (set! G15435 (lambda (G20293 G20294) (call-with-values (lambda () (G15415 G20293)) (lambda (G20297 G20298 G20299 G20300) (call-with-values (lambda () (G15413 G20297)) (lambda (G20305 G20306) (begin (G20294 G20305) (call-with-values (lambda () (G15433 G20305 G20298 G20299 G20300 '#f)) (lambda (G20309 G20310 G20311 G20312 G20313 G20314 G20315) (values G20305 G20306 G20309 G20310 G20311 G20312 G20313 G20314 G20315)))))))))) (set! G15437 (lambda (G20323) ((lambda (G20325) ((lambda (G20327) (if (if G20327 (begin '#f (apply (lambda (G20329 G20330 G20331) (eq? (G15521 G20329) 'import)) G20327)) '#f) (apply (lambda (G20335 G20336 G20337) (values G20336 G20337)) G20327) ((lambda (G20341) ((lambda (G20343) (if (if G20343 (begin '#f (apply (lambda (G20345 G20346 G20347) (eq? (G15521 G20345) 'import)) G20343)) '#f) (apply (lambda (G20351 G20352 G20353) (G15515 'expander '"invalid syntax of top-level program" (G14906 G20323))) G20343) ((lambda (G20357) ((lambda (G20359) (if G20359 (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G20359) (G15515 '#f '"invalid syntax" G20357))) (G15327 G20357 '_))) G20341))) (G15327 G20341 '((any . any) . any)))) G20325))) (G15327 G20325 '((any . each-any) . each-any)))) G20323))) (set! G15439 (lambda (G20361) (call-with-values (lambda () (G15437 G20361)) (lambda (G20363 G20364) (call-with-values (lambda () (G15433 '() '() G20363 G20364 '#t)) (lambda (G20367 G20368 G20369 G20370 G20371 G20372 G20373) (values G20368 G20370))))))) (set! G15441 (make-record-type-descriptor 'env '#f '#f '#f '#f '#((mutable names) (mutable labels*) (mutable itc)))) (set! G15443 (make-record-constructor-descriptor G15441 '#f '#f)) (set! G15445 (record-constructor G15443)) (set! G15447 (record-predicate G15441)) (set! G15449 (record-accessor G15441 '0)) (set! G15451 (record-accessor G15441 '1)) (set! G15453 (record-accessor G15441 '2)) (set! G15455 (make-record-type-descriptor 'interaction-env '#f '#f '#f '#f '#((mutable rib) (mutable r) (mutable locs)))) (set! G15457 (make-record-constructor-descriptor G15455 '#f '#f)) (set! G15459 (record-constructor G15457)) (set! G15461 (record-predicate G15455)) (set! G15463 (record-accessor G15455 '0)) (set! G15465 (record-accessor G15455 '1)) (set! G15467 (record-accessor G15455 '2)) (set! G15469 (record-mutator G15455 '2)) (set! G15471 (record-mutator G15455 '1)) (set! G15473 (lambda () (map (lambda (G20381) G20381) (G14850 (G15463 (G15527)))))) (set! G15475 (lambda (G20383) (vector->list (G15449 G20383)))) (set! G15477 (lambda (G20385) ((lambda (G20387) (if G20387 G20387 (begin '#f (G15461 G20385)))) (G15447 G20385)))) (set! G15479 (lambda G20389 ((lambda (G20391) ((lambda (G20395 G20396) ((lambda (G20399) (dynamic-wind G20399 (lambda () (call-with-values (lambda () (G15417 G20389)) (lambda (G20401 G20402) (G15445 G20401 G20402 G20391)))) G20399)) (lambda () ((lambda (G20405) (begin (G20395 G20396) (set! G20396 G20405))) (G20395))))) G15427 G20391)) (G15421)))) (set! G15481 (lambda (G20407) (begin (if (eqv? G20407 '5) (void) (assertion-violation 'null-environment '"not 5" G20407)) (G15479 '(psyntax null-environment-5))))) (set! G15483 (lambda (G20409) (begin (if (eqv? G20409 '5) (void) (assertion-violation 'scheme-report-environment '"not 5" G20409)) (G15479 '(psyntax scheme-report-environment-5))))) (set! G15485 (lambda (G20411 G20412) (if (G15447 G20412) ((lambda (G20415) ((lambda (G20417 G20418 G20419 G20420) ((lambda (G20425) (begin (G14872 G20415) (values G20425 (G20419)))) ((lambda (G20433 G20434 G20435 G20436 G20437 G20438) ((lambda (G20445) (dynamic-wind G20445 (lambda () (G15363 G20417 '() '())) G20445)) (lambda () (begin ((lambda (G20447) (begin (G20433 G20436) (set! G20436 G20447))) (G20433)) ((lambda (G20449) (begin (G20434 G20437) (set! G20437 G20449))) (G20434)) ((lambda (G20451) (begin (G20435 G20438) (set! G20438 G20451))) (G20435)))))) G15423 G15425 G15427 G20419 G20420 G20418))) (G14807 G20411 G14826 (list G20415) '()) (G15453 G20412) (G15421) (G15421))) (G15419 (G15449 G20412) (G15451 G20412))) (if (G15461 G20412) ((lambda (G20453 G20454 G20455) ((lambda (G20459) (call-with-values (lambda () ((lambda (G20469 G20470 G20471 G20472 G20473 G20474 G20475 G20476) ((lambda (G20485) (dynamic-wind G20485 (lambda () (G15431 G20459 G20453 G20454)) G20485)) (lambda () (begin ((lambda (G20487) (begin (G20469 G20473) (set! G20473 G20487))) (G20469)) ((lambda (G20489) (begin (G20470 G20474) (set! G20474 G20489))) (G20470)) ((lambda (G20491) (begin (G20471 G20475) (set! G20475 G20491))) (G20471)) ((lambda (G20493) (begin (G20472 G20476) (set! G20476 G20493))) (G20472)))))) G15529 G15423 G15425 G15427 G20412 G20455 (G15421) (G15421))) (lambda (G20495 G20496) (begin (G15471 G20412 G20496) (values G20495 (G20455)))))) (G14807 G20411 G14826 (list G20453) '()))) (G15463 G20412) (G15465 G20412) (G15421)) (assertion-violation 'expand '"not an environment" G20412))))) (set! G15487 (lambda (G20499 G20500) (begin (if (G15477 G20500) (void) (error 'eval '"not an environment" G20500)) (call-with-values (lambda () (G15485 G20499 G20500)) (lambda (G20503 G20504) (begin (for-each G14496 G20504) (eval-core (G14054 G20503)))))))) (set! G15489 (lambda G20581 ((lambda (G20582) (if (= G20582 '3) (apply (lambda (G20507 G20508 G20509) ((lambda (G20513 G20515) (begin (set! G20513 (lambda (G20525) (if (null? G20525) (G14786) (G14787 '#f (map (lambda (G20527) ((lambda (G20529 G20530) (list 'set! G20529 G20530)) (car G20527) (cddr G20527))) G20525))))) (set! G20515 (lambda (G20517) (for-each (lambda (G20519) ((lambda (G20521 G20522) (set-symbol-value! G20521 G20522)) (car G20519) (cadr G20519))) G20517))) (call-with-values (lambda () (G15435 G20507 G20509)) (lambda (G20533 G20534 G20535 G20536 G20537 G20538 G20539 G20540 G20541) ((lambda (G20551 G20552 G20553 G20554 G20555 G20556 G20557 G20558 G20559 G20560) (begin (G14498 G20551 G20552 G20553 G20554 G20555 G20556 G20540 G20541 G20557 G20558 G20559 G20560 '#t G20508) (values G20551 G20552 G20553 G20554 G20555 G20556 G20560 G20559 G20540 G20541))) (gensym) G20533 G20534 (map G14492 G20535) (map G14492 G20537) (map G14492 G20536) (lambda () (G20515 G20539)) (lambda () (eval-core (G14054 G20538))) (G20513 G20539) G20538))))) '#f '#f)) G20581) (if (= G20582 '2) (apply (lambda (G20571 G20572) (G15489 G20571 G20572 (lambda (G20575) (values)))) G20581) (if (= G20582 '1) (apply (lambda (G20577) (G15489 G20577 '#f (lambda (G20579) (values)))) G20581) (error 'apply '"invalid arg count"))))) (length G20581)))) (set! G15491 (lambda (G20583) (call-with-values (lambda () (G15489 G20583)) (lambda (G20585 G20586 G20587 G20588 G20589 G20590 G20591 G20592 G20593 G20594) (values G20586 G20591 G20593 G20594))))) (set! G15493 (lambda (G20605 G20606 G20607) (if (null? G20606) G20607 (G15493 G20605 (cdr G20606) (cons (G20605 (car G20606)) G20607))))) (set! G15495 (lambda (G20611 G20612) (G14787 '#f (cons (G14786) (G15493 (lambda (G20615) (list 'set! (cdr G20615) (car G20615))) G20611 G20612))))) (set! G15497 (lambda (G20617 G20618 G20619) (map (lambda (G20623 G20624) ((lambda (G20627) ((lambda (G20629) ((lambda () (begin (if G20629 (void) (G15515 '#f '"cannot export unbound identifier" G20627)) (cons G20624 G20629))))) (G14938 G20627))) (G14807 G20623 G14826 (list G20619) '()))) G20617 G20618))) (set! G15499 (lambda (G20631 G20632 G20633) ((lambda (G20637) (begin (set! G20637 (lambda (G20639) (letrec ((G20641 (lambda (G20643 G20644 G20645) (if (pair? G20644) (if (eq? G20643 (car G20644)) (car G20645) (G20641 G20643 (cdr G20644) (cdr G20645))) (assertion-violation 'lookup-make-export '"BUG"))))) (G20641 G20639 G20631 G20632)))) (letrec ((G20649 (lambda (G20651 G20652 G20653 G20654) (if (null? G20651) (values G20652 G20653 G20654) ((lambda (G20659) ((lambda (G20661 G20662) ((lambda (G20665) (if (memv G20665 '(lexical)) ((lambda (G20670) ((lambda (G20672 G20673) (G20649 (cdr G20651) (cons (cons* G20661 G20673 G20672) G20652) (cons (cons (G15215 G20670) G20672) G20653) G20654)) (G20637 (G15215 G20670)) (if (G15217 G20670) 'mutable 'global))) (G14948 G20662)) (if (memv G20665 '(local-macro)) ((lambda (G20668) (G20649 (cdr G20651) (cons (cons* G20661 'global-macro G20668) G20652) G20653 (cons (cons G20668 (G14948 G20662)) G20654))) (gensym)) (if (memv G20665 '(local-macro!)) ((lambda (G20666) (G20649 (cdr G20651) (cons (cons* G20661 'global-macro! G20666) G20652) G20653 (cons (cons G20666 (G14948 G20662)) G20654))) (gensym)) (if (memv G20665 '($rtd $module)) (G20649 (cdr G20651) (cons G20659 G20652) G20653 G20654) (assertion-violation 'expander '"BUG: do not know how to export" (G14946 G20662) (G14948 G20662))))))) (G14946 G20662))) (car G20659) (cdr G20659))) (car G20651)))))) (G20649 G20633 '() '() '())))) '#f))) (set! G15501 (lambda (G20676) ((lambda (G20678) ((lambda (G20680) (if G20680 (apply (lambda (G20682) (map (lambda (G20684) (G14807 ((lambda (G20686) (if ((lambda (G20688) (if G20688 G20688 (begin '#f (string? G20686)))) (symbol? G20686)) (gensym G20686) (gensym 't))) (G15521 G20684)) G14826 '() '())) G20682)) G20680) ((lambda (G20690) ((lambda (G20692) (if G20692 (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G20692) (G15515 '#f '"invalid syntax" G20690))) (G15327 G20690 '_))) G20678))) (G15327 G20678 'each-any))) G20676))) (set! G15503 (lambda (G20694 G20695) (if (G14912 G20694) (if (G14912 G20695) (G14920 G20694 G20695) (assertion-violation 'free-identifier=? '"not an identifier" G20695)) (assertion-violation 'free-identifier=? '"not an identifier" G20694)))) (set! G15505 (lambda (G20698 G20699) (if (G14912 G20698) (if (G14912 G20699) (G14918 G20698 G20699) (assertion-violation 'bound-identifier=? '"not an identifier" G20699)) (assertion-violation 'bound-identifier=? '"not an identifier" G20698)))) (set! G15507 (lambda (G20702) ((lambda (G20711 G20713 G20715 G20718 G20720 G20722 G20724 G20726 G20728 G20730) (begin (set! G20711 (make-record-type-descriptor '&source-information &condition-rtd 'G20710 '#f '#f '#((immutable file-name) (immutable character)))) (set! G20713 '#f) (set! G20715 (make-record-constructor-descriptor G20711 &condition-rcd G20713)) (set! G20718 (record-predicate G20711)) (set! G20720 (record-constructor G20715)) (set! G20722 (record-accessor G20711 '0)) (set! G20724 (record-accessor G20711 '1)) (set! G20726 (condition-predicate G20711)) (set! G20728 (condition-accessor G20711 G20722)) (set! G20730 (condition-accessor G20711 G20724)) (if (G14809 G20702) ((lambda (G20732) (if (G13956 G20732) ((lambda (G20734) (if (pair? G20734) (G20720 (car G20734) (cdr G20734)) (condition))) (G13955 G20732)) (condition))) (G14811 G20702)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G15509 (lambda (G20736 . G20738) (begin (if (for-all string? G20738) (void) (assertion-violation 'syntax-error '"invalid argument" G20738)) (raise (condition (G21461 (if (null? G20738) '"invalid syntax" (apply string-append G20738))) (G21389 (G15521 G20736) '#f) (G15507 G20736) (G15511 G20736)))))) (set! G15511 (lambda (G20740) ((lambda (G20748 G20750 G20752 G20755 G20757 G20759 G20761 G20763) (begin (set! G20748 (make-record-type-descriptor '&trace &condition-rtd 'G20747 '#f '#f '#((immutable form)))) (set! G20750 '#f) (set! G20752 (make-record-constructor-descriptor G20748 &condition-rcd G20750)) (set! G20755 (record-predicate G20748)) (set! G20757 (record-constructor G20752)) (set! G20759 (record-accessor G20748 '0)) (set! G20761 (condition-predicate G20748)) (set! G20763 (condition-accessor G20748 G20759)) (letrec ((G20765 (lambda (G20767) (if (G14809 G20767) (apply condition (G20757 G20767) (map G20765 (G14817 G20767))) (if (G13956 G20767) (G20757 (G14807 G20767 '() '() '())) (condition)))))) (G20765 G20740)))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G15513 (lambda (G20769 G20770 G20771 G20772) (begin (if (string? G20770) (void) (assertion-violation 'syntax-violation '"message is not a string" G20770)) ((lambda (G20777) (raise (condition (if G20777 (G21415 G20777) (condition)) (G21461 G20770) G20772 (G15507 G20771) (G15511 G20771)))) (if ((lambda (G20779) (if G20779 G20779 (begin '#f (symbol? G20769)))) (string? G20769)) G20769 (if (not G20769) ((lambda (G20781) ((lambda (G20783) (if (if G20783 (begin '#f (apply (lambda (G20785) (G14912 G20785)) G20783)) '#f) (apply (lambda (G20787) (G15521 G20787)) G20783) ((lambda (G20789) ((lambda (G20791) (if (if G20791 (begin '#f (apply (lambda (G20793 G20794) (G14912 G20793)) G20791)) '#f) (apply (lambda (G20797 G20798) (G15521 G20797)) G20791) ((lambda (G20801) ((lambda (G20803) (if G20803 (apply (lambda () '#f) G20803) (G15515 '#f '"invalid syntax" G20801))) (G15327 G20801 '_))) G20789))) (G15327 G20789 '(any . any)))) G20781))) (G15327 G20781 'any))) G20771) (assertion-violation 'syntax-violation '"invalid who argument" G20769))))))) (set! G15515 (lambda G20819 ((lambda (G20820) (if (= G20820 '3) (apply (lambda (G20805 G20806 G20807) (G15515 G20805 G20806 G20807 '#f)) G20819) (if (= G20820 '4) (apply (lambda (G20811 G20812 G20813 G20814) (G15513 G20811 G20812 G20813 (G21389 (G15521 G20813) (G15521 G20814)))) G20819) (error 'apply '"invalid arg count")))) (length G20819)))) (set! G15517 (lambda (G20821) (G14912 G20821))) (set! G15519 (lambda (G20823 G20824) (if (G14912 G20823) (G14878 G20823 G20824) (assertion-violation 'datum->syntax '"not an identifier" G20823)))) (set! G15521 (lambda (G20827) (G14934 G20827))) (set! G15523 (lambda (G20829) (call-with-values (lambda () (G15439 G20829)) (lambda (G20831 G20832) (lambda () (begin (for-each G14496 G20831) (eval-core (G14054 G20832)))))))) (set! G15525 (lambda (G20835) (call-with-values (lambda () (G15439 G20835)) (lambda (G20837 G20838) (begin (for-each G14496 G20837) (G13950 (G14054 G20838))))))) (set! G15527 ((lambda (G20841) (lambda () ((lambda (G20843) (if G20843 G20843 (begin '#f ((lambda (G20845 G20846) (begin ((lambda (G20849) (begin (G14858 G20846 (map car G20849)) (G14860 G20846 (map (lambda (G20851) G14826) G20849)) (G14862 G20846 (map cdr G20849)))) (G14526 G20845)) ((lambda (G20853) (begin (set! G20841 G20853) G20853)) (G15459 G20846 '() '())))) (G14503 '(ironscheme)) (G14866))))) G20841))) '#f)) (set! G15529 (G13948 '#f)) (begin (set! G20855 G15529) (set! G20856 G15527) (set! G20857 G15525) (set! G20858 G15523) (set! G20859 G15521) (set! G20860 G15519) (set! G20861 G15517) (set! G20862 G15515) (set! G20863 G15513) (set! G20864 G15511) (set! G20865 G15509) (set! G20866 G15507) (set! G20867 G15505) (set! G20868 G15503) (set! G20869 G15501) (set! G20870 G15499) (set! G20871 G15497) (set! G20872 G15495) (set! G20873 G15493) (set! G20874 G15491) (set! G20875 G15489) (set! G20876 G15487) (set! G20877 G15485) (set! G20878 G15483) (set! G20879 G15481) (set! G20880 G15479) (set! G20881 G15477) (set! G20882 G15475) (set! G20883 G15473) (set! G20884 G15471) (set! G20885 G15469) (set! G20886 G15467) (set! G20887 G15465) (set! G20888 G15463) (set! G20889 G15461) (set! G20890 G15459) (set! G20891 G15457) (set! G20892 G15455) (set! G20893 G15453) (set! G20894 G15451) (set! G20895 G15449) (set! G20896 G15447) (set! G20897 G15445) (set! G20898 G15443) (set! G20899 G15441) (set! G20900 G15439) (set! G20901 G15437) (set! G20902 G15435) (set! G20903 G15433) (set! G20904 G15431) (set! G20905 G15429) (set! G20906 G15427) (set! G20907 G15425) (set! G20908 G15423) (set! G20909 G15421) (set! G20910 G15419) (set! G20911 G15417) (set! G20912 G15415) (set! G20913 G15413) (set! G20914 G15411) (set! G20915 G15409) (set! G20916 G15407) (set! G20917 G15405) (set! G20918 G15403) (set! G20919 G15401) (set! G20920 G15399) (set! G20921 G15397) (set! G20922 G15395) (set! G20923 G15393) (set! G20924 G15391) (set! G20925 G15389) (set! G20926 G15387) (set! G20927 G15385) (set! G20928 G15383) (set! G20929 G15381) (set! G20930 G15379) (set! G20931 G15377) (set! G20932 G15375) (set! G20933 G15373) (set! G20934 G15371) (set! G20935 G15369) (set! G20936 G15367) (set! G20937 G15365) (set! G20938 G15363) (set! G20939 G15361) (set! G20940 G15359) (set! G20941 G15357) (set! G20942 G15355) (set! G20943 G15353) (set! G20944 G15351) (set! G20945 G15349) (set! G20946 G15347) (set! G20947 G15345) (set! G20948 G15343) (set! G20949 G15341) (set! G20950 G15339) (set! G20951 G15337) (set! G20952 G15335) (set! G20953 G15333) (set! G20954 G15331) (set! G20955 G15329) (set! G20956 G15327) (set! G20957 G15325) (set! G20958 G15323) (set! G20959 G15321) (set! G20960 G15319) (set! G20961 G15317) (set! G20962 G15315) (set! G20963 G15313) (set! G20964 G15311) (set! G20965 G15309) (set! G20966 G15307) (set! G20967 G15305) (set! G20968 G15303) (set! G20969 G15301) (set! G20970 G15299) (set! G20971 G15297) (set! G20972 G15295) (set! G20973 G15293) (set! G20974 G15291) (set! G20975 G15289) (set! G20976 G15287) (set! G20977 G15285) (set! G20978 G15283) (set! G20979 G15281) (set! G20980 G15279) (set! G20981 G15277) (set! G20982 G15275) (set! G20983 G15273) (set! G20984 G15271) (set! G20985 G15269) (set! G20986 G15267) (set! G20987 G15265) (set! G20988 G15263) (set! G20989 G15261) (set! G20990 G15259) (set! G20991 G15257) (set! G20992 G15255) (set! G20993 G15253) (set! G20994 G15251) (set! G20995 G15249) (set! G20996 G15247) (set! G20997 G15245) (set! G20998 G15243) (set! G20999 G15241) (set! G21000 G15239) (set! G21001 G15237) (set! G21002 G15235) (set! G21003 G15233) (set! G21004 G15231) (set! G21005 G15229) (set! G21006 G15227) (set! G21007 G15225) (set! G21008 G15223) (set! G21009 G15221) (set! G21010 G15219) (set! G21011 G15217) (set! G21012 G15215) (set! G21013 G15213) (set! G21014 G15211) (set! G21015 G15209) (set! G21016 G15207) (set! G21018 G14974) (set! G21019 G14972) (set! G21020 G14970) (set! G21021 G14968) (set! G21022 G14966) (set! G21024 G14952) (set! G21025 G14950) (set! G21026 G14948) (set! G21027 G14946) (set! G21028 G14944) (set! G21029 G14942) (set! G21030 G14940) (set! G21031 G14938) (set! G21032 G14936) (set! G21033 G14934) (set! G21034 G14932) (set! G21035 G14930) (set! G21036 G14928) (set! G21037 G14926) (set! G21038 G14924) (set! G21039 G14922) (set! G21040 G14920) (set! G21041 G14918) (set! G21042 G14916) (set! G21043 G14914) (set! G21044 G14912) (set! G21045 G14910) (set! G21046 G14908) (set! G21047 G14906) (set! G21048 G14904) (set! G21049 G14902) (set! G21050 G14900) (set! G21051 G14898) (set! G21052 G14896) (set! G21053 G14894) (set! G21054 G14892) (set! G21055 G14890) (set! G21056 G14888) (set! G21057 G14886) (set! G21058 G14884) (set! G21059 G14882) (set! G21060 G14880) (set! G21061 G14878) (set! G21062 G14876) (set! G21063 G14874) (set! G21064 G14872) (set! G21065 G14870) (set! G21066 G14868) (set! G21067 G14866) (set! G21068 G14864) (set! G21069 G14862) (set! G21070 G14860) (set! G21071 G14858) (set! G21072 G14856) (set! G21073 G14854) (set! G21074 G14852) (set! G21075 G14850) (set! G21076 G14848) (set! G21077 G14846) (set! G21078 G14844) (set! G21079 G14842) (set! G21080 G14840) (set! G21081 G14838) (set! G21082 G14836) (set! G21083 G14834) (set! G21084 G14832) (set! G21085 G14830) (set! G21086 G14828) (set! G21087 G14826) (set! G21089 G14821) (set! G21090 G14819) (set! G21091 G14817) (set! G21092 G14815) (set! G21093 G14813) (set! G21094 G14811) (set! G21095 G14809) (set! G21096 G14807) (set! G21097 G14805) (set! G21098 G14803) (G14506 G15489)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define G21472 '#f) (define G21471 '#f) (define G21470 '#f) (define G21469 '#f) (define G21468 '#f) (define G21467 '#f) (define G21466 '#f) (define G21465 '#f) (define G21464 '#f) (define G21463 '#f) (define G21462 '#f) (define G21461 '#f) (define G21460 '#f) (define G21459 '#f) (define G21458 '#f) (define G21457 '#f) (define G21456 '#f) (define G21455 '#f) (define G21454 '#f) (define G21453 '#f) (define G21452 '#f) (define G21451 '#f) (define G21450 '#f) (define G21449 '#f) (define G21448 '#f) (define G21447 '#f) (define G21446 '#f) (define G21445 '#f) (define G21444 '#f) (define G21443 '#f) (define G21442 '#f) (define G21441 '#f) (define G21440 '#f) (define G21439 '#f) (define G21438 '#f) (define G21437 '#f) (define G21436 '#f) (define G21435 '#f) (define G21434 '#f) (define G21433 '#f) (define G21432 '#f) (define G21431 '#f) (define G21430 '#f) (define G21429 '#f) (define G21428 '#f) (define G21427 '#f) (define G21426 '#f) (define G21425 '#f) (define G21424 '#f) (define G21423 '#f) (define G21422 '#f) (define G21421 '#f) (define G21420 '#f) (define G21419 '#f) (define G21418 '#f) (define G21417 '#f) (define G21416 '#f) (define G21415 '#f) (define G21414 '#f) (define G21413 '#f) (define G21412 '#f) (define G21411 '#f) (define G21410 '#f) (define G21409 '#f) (define G21408 '#f) (define G21407 '#f) (define G21406 '#f) (define G21405 '#f) (define G21404 '#f) (define G21403 '#f) (define G21402 '#f) (define G21401 '#f) (define G21400 '#f) (define G21399 '#f) (define G21398 '#f) (define G21397 '#f) (define G21396 '#f) (define G21395 '#f) (define G21394 '#f) (define G21393 '#f) (define G21392 '#f) (define G21391 '#f) (define G21390 '#f) (define G21389 '#f) (define G21388 '#f) (define G21387 '#f) (define G21386 '#f) (define G21385 '#f) (define G21384 '#f) (define G21383 '#f) (define G21382 '#f) (define G21381 '#f) (define G21380 '#f) (define G21379 '#f) (define G21378 '#f) ((lambdabegin (set! G21104 (make-record-type-descriptor '&condition '#f 'G21103 '#f '#f '#())) (set! G21106 '#f) (set! G21108 (make-record-constructor-descriptor G21104 '#f G21106)) (set! G21111 (record-predicate G21104)) (set! G21113 (record-constructor G21108)) (set! G21115 G21104) (set! G21117 G21108) (set! G21125 (make-record-type-descriptor '&message G21104 'G21124 '#f '#f '#((immutable message)))) (set! G21127 '#f) (set! G21129 (make-record-constructor-descriptor G21125 G21108 G21127)) (set! G21132 (record-predicate G21125)) (set! G21134 (record-constructor G21129)) (set! G21136 (record-accessor G21125 '0)) (set! G21138 (condition-predicate G21125)) (set! G21140 (condition-accessor G21125 G21136)) (set! G21147 (make-record-type-descriptor '&warning G21104 'G21146 '#f '#f '#())) (set! G21149 '#f) (set! G21151 (make-record-constructor-descriptor G21147 G21108 G21149)) (set! G21154 (record-predicate G21147)) (set! G21156 (record-constructor G21151)) (set! G21158 (condition-predicate G21147)) (set! G21165 (make-record-type-descriptor '&serious G21104 'G21164 '#f '#f '#())) (set! G21167 '#f) (set! G21169 (make-record-constructor-descriptor G21165 G21108 G21167)) (set! G21172 (record-predicate G21165)) (set! G21174 (record-constructor G21169)) (set! G21176 (condition-predicate G21165)) (set! G21183 (make-record-type-descriptor '&error G21165 'G21182 '#f '#f '#())) (set! G21185 '#f) (set! G21187 (make-record-constructor-descriptor G21183 G21169 G21185)) (set! G21190 (record-predicate G21183)) (set! G21192 (record-constructor G21187)) (set! G21194 (condition-predicate G21183)) (set! G21201 (make-record-type-descriptor '&violation G21165 'G21200 '#f '#f '#())) (set! G21203 '#f) (set! G21205 (make-record-constructor-descriptor G21201 G21169 G21203)) (set! G21208 (record-predicate G21201)) (set! G21210 (record-constructor G21205)) (set! G21212 (condition-predicate G21201)) (set! G21219 (make-record-type-descriptor '&assertion G21201 'G21218 '#f '#f '#())) (set! G21221 '#f) (set! G21223 (make-record-constructor-descriptor G21219 G21205 G21221)) (set! G21226 (record-predicate G21219)) (set! G21228 (record-constructor G21223)) (set! G21230 (condition-predicate G21219)) (set! G21238 (make-record-type-descriptor '&irritants G21104 'G21237 '#f '#f '#((immutable irritants)))) (set! G21240 '#f) (set! G21242 (make-record-constructor-descriptor G21238 G21108 G21240)) (set! G21245 (record-predicate G21238)) (set! G21247 (record-constructor G21242)) (set! G21249 (record-accessor G21238 '0)) (set! G21251 (condition-predicate G21238)) (set! G21253 (condition-accessor G21238 G21249)) (set! G21261 (make-record-type-descriptor '&who G21104 'G21260 '#f '#f '#((immutable who)))) (set! G21263 '#f) (set! G21265 (make-record-constructor-descriptor G21261 G21108 G21263)) (set! G21268 (record-predicate G21261)) (set! G21270 (record-constructor G21265)) (set! G21272 (record-accessor G21261 '0)) (set! G21274 (condition-predicate G21261)) (set! G21276 (condition-accessor G21261 G21272)) (set! G21283 (make-record-type-descriptor '&non-continuable G21201 'G21282 '#f '#f '#())) (set! G21285 '#f) (set! G21287 (make-record-constructor-descriptor G21283 G21205 G21285)) (set! G21290 (record-predicate G21283)) (set! G21292 (record-constructor G21287)) (set! G21294 (condition-predicate G21283)) (set! G21301 (make-record-type-descriptor '&implementation-restriction G21201 'G21300 '#f '#f '#())) (set! G21303 '#f) (set! G21305 (make-record-constructor-descriptor G21301 G21205 G21303)) (set! G21308 (record-predicate G21301)) (set! G21310 (record-constructor G21305)) (set! G21312 (condition-predicate G21301)) (set! G21319 (make-record-type-descriptor '&lexical G21201 'G21318 '#f '#f '#())) (set! G21321 '#f) (set! G21323 (make-record-constructor-descriptor G21319 G21205 G21321)) (set! G21326 (record-predicate G21319)) (set! G21328 (record-constructor G21323)) (set! G21330 (condition-predicate G21319)) (set! G21339 (make-record-type-descriptor '&syntax G21201 'G21338 '#f '#f '#((immutable form) (immutable subform)))) (set! G21341 '#f) (set! G21343 (make-record-constructor-descriptor G21339 G21205 G21341)) (set! G21346 (record-predicate G21339)) (set! G21348 (record-constructor G21343)) (set! G21350 (record-accessor G21339 '0)) (set! G21352 (record-accessor G21339 '1)) (set! G21354 (condition-predicate G21339)) (set! G21356 (condition-accessor G21339 G21350)) (set! G21358 (condition-accessor G21339 G21352)) (set! G21365 (make-record-type-descriptor '&undefined G21201 'G21364 '#f '#f '#())) (set! G21367 '#f) (set! G21369 (make-record-constructor-descriptor G21365 G21205 G21367)) (set! G21372 (record-predicate G21365)) (set! G21374 (record-constructor G21369)) (set! G21376 (condition-predicate G21365)) (begin (set! G21378 G21376) (set! G21379 G21374) (set! G21380 G21372) (set! G21381 G21369) (set! G21382 G21367) (set! G21383 G21365) (set! G21384 G21358) (set! G21385 G21356) (set! G21386 G21354) (set! G21387 G21352) (set! G21388 G21350) (set! G21389 G21348) (set! G21390 G21346) (set! G21391 G21343) (set! G21392 G21341) (set! G21393 G21339) (set! G21394 G21330) (set! G21395 G21328) (set! G21396 G21326) (set! G21397 G21323) (set! G21398 G21321) (set! G21399 G21319) (set! G21400 G21312) (set! G21401 G21310) (set! G21402 G21308) (set! G21403 G21305) (set! G21404 G21303) (set! G21405 G21301) (set! G21406 G21294) (set! G21407 G21292) (set! G21408 G21290) (set! G21409 G21287) (set! G21410 G21285) (set! G21411 G21283) (set! G21412 G21276) (set! G21413 G21274) (set! G21414 G21272) (set! G21415 G21270) (set! G21416 G21268) (set! G21417 G21265) (set! G21418 G21263) (set! G21419 G21261) (set! G21420 G21253) (set! G21421 G21251) (set! G21422 G21249) (set! G21423 G21247) (set! G21424 G21245) (set! G21425 G21242) (set! G21426 G21240) (set! G21427 G21238) (set! G21428 G21230) (set! G21429 G21228) (set! G21430 G21226) (set! G21431 G21223) (set! G21432 G21221) (set! G21433 G21219) (set! G21434 G21212) (set! G21435 G21210) (set! G21436 G21208) (set! G21437 G21205) (set! G21438 G21203) (set! G21439 G21201) (set! G21440 G21194) (set! G21441 G21192) (set! G21442 G21190) (set! G21443 G21187) (set! G21444 G21185) (set! G21445 G21183) (set! G21446 G21176) (set! G21447 G21174) (set! G21448 G21172) (set! G21449 G21169) (set! G21450 G21167) (set! G21451 G21165) (set! G21452 G21158) (set! G21453 G21156) (set! G21454 G21154) (set! G21455 G21151) (set! G21456 G21149) (set! G21457 G21147) (set! G21458 G21140) (set! G21459 G21138) (set! G21460 G21136) (set! G21461 G21134) (set! G21462 G21132) (set! G21463 G21129) (set! G21464 G21127) (set! G21465 G21125) (set! G21466 G21117) (set! G21467 G21115) (set! G21468 G21113) (set! G21469 G21111) (set! G21470 G21108) (set! G21471 G21106) (set! G21472 G21104)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define G21789 '#f) (define G21788 '#f) (define G21787 '#f) (define G21786 '#f) (define G21785 '#f) (define G21784 '#f) (define G21783 '#f) (define G21782 '#f) (define G21781 '#f) (define G21780 '#f) (define G21779 '#f) (define G21778 '#f) (define G21777 '#f) (define G21776 '#f) (define G21775 '#f) (define G21774 '#f) (define G21773 '#f) (define G21772 '#f) (define G21771 '#f) (define G21770 '#f) (define G21769 '#f) (define G21768 '#f) (define G21767 '#f) (define G21766 '#f) (define G21765 '#f) (define G21764 '#f) (define G21763 '#f) (define G21762 '#f) (define G21761 '#f) (define G21760 '#f) (define G21759 '#f) (define G21758 '#f) (define G21757 '#f) (define G21756 '#f) (define G21755 '#f) (define G21754 '#f) (define G21753 '#f) (define G21752 '#f) (define G21751 '#f) (define G21750 '#f) (define G21749 '#f) (define G21748 '#f) (define G21747 '#f) (define G21746 '#f) (define G21745 '#f) (define G21744 '#f) (define G21743 '#f) (define G21742 '#f) (define G21741 '#f) (define G21740 '#f) (define G21739 '#f) (define G21738 '#f) (define G21737 '#f) (define G21736 '#f) (define G21735 '#f) (define G21734 '#f) (define G21733 '#f) (define G21732 '#f) (define G21731 '#f) (define G21730 '#f) (define G21729 '#f) (define G21728 '#f) (define G21727 '#f) (define G21726 '#f) (define G21725 '#f) (define G21724 '#f) (define G21723 '#f) (define G21722 '#f) (define G21721 '#f) (define G21720 '#f) (define G21719 '#f) (define G21718 '#f) (define G21717 '#f) (define G21716 '#f) (define G21715 '#f) (define G21714 '#f) (define G21713 '#f) (define G21712 '#f) (define G21711 '#f) (define G21710 '#f) ((lambdabegin (set! G21479 (make-record-type-descriptor '&i/o &error-rtd 'G21478 '#f '#f '#())) (set! G21481 '#f) (set! G21483 (make-record-constructor-descriptor G21479 &error-rcd G21481)) (set! G21486 (record-predicate G21479)) (set! G21488 (record-constructor G21483)) (set! G21490 (condition-predicate G21479)) (set! G21497 (make-record-type-descriptor '&i/o-read G21479 'G21496 '#f '#f '#())) (set! G21499 '#f) (set! G21501 (make-record-constructor-descriptor G21497 G21483 G21499)) (set! G21504 (record-predicate G21497)) (set! G21506 (record-constructor G21501)) (set! G21508 (condition-predicate G21497)) (set! G21515 (make-record-type-descriptor '&i/o-write G21479 'G21514 '#f '#f '#())) (set! G21517 '#f) (set! G21519 (make-record-constructor-descriptor G21515 G21483 G21517)) (set! G21522 (record-predicate G21515)) (set! G21524 (record-constructor G21519)) (set! G21526 (condition-predicate G21515)) (set! G21534 (make-record-type-descriptor '&i/o-invalid-position G21479 'G21533 '#f '#f '#((immutable position)))) (set! G21536 '#f) (set! G21538 (make-record-constructor-descriptor G21534 G21483 G21536)) (set! G21541 (record-predicate G21534)) (set! G21543 (record-constructor G21538)) (set! G21545 (record-accessor G21534 '0)) (set! G21547 (condition-predicate G21534)) (set! G21549 (condition-accessor G21534 G21545)) (set! G21557 (make-record-type-descriptor '&i/o-filename G21479 'G21556 '#f '#f '#((immutable filename)))) (set! G21559 '#f) (set! G21561 (make-record-constructor-descriptor G21557 G21483 G21559)) (set! G21564 (record-predicate G21557)) (set! G21566 (record-constructor G21561)) (set! G21568 (record-accessor G21557 '0)) (set! G21570 (condition-predicate G21557)) (set! G21572 (condition-accessor G21557 G21568)) (set! G21579 (make-record-type-descriptor '&i/o-file-protection G21479 'G21578 '#f '#f '#())) (set! G21581 '#f) (set! G21583 (make-record-constructor-descriptor G21579 G21483 G21581)) (set! G21586 (record-predicate G21579)) (set! G21588 (record-constructor G21583)) (set! G21590 (condition-predicate G21579)) (set! G21597 (make-record-type-descriptor '&i/o-file-is-read-only G21579 'G21596 '#f '#f '#())) (set! G21599 '#f) (set! G21601 (make-record-constructor-descriptor G21597 G21583 G21599)) (set! G21604 (record-predicate G21597)) (set! G21606 (record-constructor G21601)) (set! G21608 (condition-predicate G21597)) (set! G21615 (make-record-type-descriptor '&i/o-file-already-exists G21557 'G21614 '#f '#f '#())) (set! G21617 '#f) (set! G21619 (make-record-constructor-descriptor G21615 G21561 G21617)) (set! G21622 (record-predicate G21615)) (set! G21624 (record-constructor G21619)) (set! G21626 (condition-predicate G21615)) (set! G21633 (make-record-type-descriptor '&i/o-file-does-not-exist G21557 'G21632 '#f '#f '#())) (set! G21635 '#f) (set! G21637 (make-record-constructor-descriptor G21633 G21561 G21635)) (set! G21640 (record-predicate G21633)) (set! G21642 (record-constructor G21637)) (set! G21644 (condition-predicate G21633)) (set! G21652 (make-record-type-descriptor '&i/o-port G21479 'G21651 '#f '#f '#((immutable port)))) (set! G21654 '#f) (set! G21656 (make-record-constructor-descriptor G21652 G21483 G21654)) (set! G21659 (record-predicate G21652)) (set! G21661 (record-constructor G21656)) (set! G21663 (record-accessor G21652 '0)) (set! G21665 (condition-predicate G21652)) (set! G21667 (condition-accessor G21652 G21663)) (set! G21674 (make-record-type-descriptor '&i/o-decoding G21652 'G21673 '#f '#f '#())) (set! G21676 '#f) (set! G21678 (make-record-constructor-descriptor G21674 G21656 G21676)) (set! G21681 (record-predicate G21674)) (set! G21683 (record-constructor G21678)) (set! G21685 (condition-predicate G21674)) (set! G21693 (make-record-type-descriptor '&i/o-encoding G21652 'G21692 '#f '#f '#((immutable char)))) (set! G21695 '#f) (set! G21697 (make-record-constructor-descriptor G21693 G21656 G21695)) (set! G21700 (record-predicate G21693)) (set! G21702 (record-constructor G21697)) (set! G21704 (record-accessor G21693 '0)) (set! G21706 (condition-predicate G21693)) (set! G21708 (condition-accessor G21693 G21704)) (begin (set! G21710 G21708) (set! G21711 G21706) (set! G21712 G21704) (set! G21713 G21702) (set! G21714 G21700) (set! G21715 G21697) (set! G21716 G21695) (set! G21717 G21693) (set! G21718 G21685) (set! G21719 G21683) (set! G21720 G21681) (set! G21721 G21678) (set! G21722 G21676) (set! G21723 G21674) (set! G21724 G21667) (set! G21725 G21665) (set! G21726 G21663) (set! G21727 G21661) (set! G21728 G21659) (set! G21729 G21656) (set! G21730 G21654) (set! G21731 G21652) (set! G21732 G21644) (set! G21733 G21642) (set! G21734 G21640) (set! G21735 G21637) (set! G21736 G21635) (set! G21737 G21633) (set! G21738 G21626) (set! G21739 G21624) (set! G21740 G21622) (set! G21741 G21619) (set! G21742 G21617) (set! G21743 G21615) (set! G21744 G21608) (set! G21745 G21606) (set! G21746 G21604) (set! G21747 G21601) (set! G21748 G21599) (set! G21749 G21597) (set! G21750 G21590) (set! G21751 G21588) (set! G21752 G21586) (set! G21753 G21583) (set! G21754 G21581) (set! G21755 G21579) (set! G21756 G21572) (set! G21757 G21570) (set! G21758 G21568) (set! G21759 G21566) (set! G21760 G21564) (set! G21761 G21561) (set! G21762 G21559) (set! G21763 G21557) (set! G21764 G21549) (set! G21765 G21547) (set! G21766 G21545) (set! G21767 G21543) (set! G21768 G21541) (set! G21769 G21538) (set! G21770 G21536) (set! G21771 G21534) (set! G21772 G21526) (set! G21773 G21524) (set! G21774 G21522) (set! G21775 G21519) (set! G21776 G21517) (set! G21777 G21515) (set! G21778 G21508) (set! G21779 G21506) (set! G21780 G21504) (set! G21781 G21501) (set! G21782 G21499) (set! G21783 G21497) (set! G21784 G21490) (set! G21785 G21488) (set! G21786 G21486) (set! G21787 G21483) (set! G21788 G21481) (set! G21789 G21479)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define G22383 '#f) (define G22382 '#f) (define G22381 '#f) (define G22380 '#f) (define G22379 '#f) (define G22378 '#f) (define G22377 '#f) (define G22376 '#f) (define G22375 '#f) (define G22374 '#f) (define G22373 '#f) (define G22372 '#f) (define G22371 '#f) (define G22370 '#f) (define G22369 '#f) (define G22368 '#f) (define G22367 '#f) (define G22366 '#f) (define G22365 '#f) (define G22364 '#f) (define G22363 '#f) (define G22362 '#f) (define G22361 '#f) (define G22360 '#f) (define G22359 '#f) (define G22358 '#f) (define G22357 '#f) (define G22356 '#f) (define G22355 '#f) (define G22354 '#f) (define G22353 '#f) (define G22352 '#f) (define G22351 '#f) (define G22350 '#f) (define G22349 '#f) (define G22348 '#f) (define G22347 '#f) (define G22346 '#f) (define G22345 '#f) (define G22344 '#f) (define G22343 '#f) (define G22342 '#f) (define G22341 '#f) (define G22340 '#f) (define G22339 '#f) (define G22338 '#f) (define G22337 '#f) (define G22336 '#f) (define G22335 '#f) (define G22334 '#f) (define G22333 '#f) (define G22332 '#f) (define G22331 '#f) (define G22330 '#f) (define G22329 '#f) (define G22328 '#f) (define G22327 '#f) (define G22326 '#f) (define G22325 '#f) (define G22324 '#f) (define G22323 '#f) (define G22322 '#f) (define G22321 '#f) (define G22320 '#f) (define G22319 '#f) (define G22318 '#f) (define G22317 '#f) (define G22316 '#f) (define G22315 '#f) (define G22314 '#f) (define G22313 '#f) (define G22312 '#f) (define G22311 '#f) (define G22310 '#f) (define G22309 '#f) (define G22308 '#f) (define G22307 '#f) ((lambdabegin (set! G21791 (lambda (G21945) ((lambda (G21947) (begin (for-each (lambda (G21949) (hashtable-set! G21947 (car G21949) (cdr G21949))) G21945) G21947)) (make-eq-hashtable)))) (set! G21793 (lambda (G21951) ((lambda (G21953) (begin (for-each (lambda (G21955) (hashtable-set! G21953 (cdr G21955) (car G21955))) G21951) G21953)) (make-eq-hashtable)))) (set! G21795 '(2392 2393 2394 2395 2396 2397 2398 2399 2524 2525 2527 2611 2614 2649 2650 2651 2654 2908 2909 3907 3917 3922 3927 3932 3945 3958 3960 3987 3997 4002 4007 4012 4025 64285 64287 64298 64299 64300 64301 64302 64303 64304 64305 64306 64307 64308 64309 64310 64312 64313 64314 64315 64316 64318 64320 64321 64323 64324 64326 64327 64328 64329 64330 64331 64332 64333 64334 10972 119134 119135 119136 119137 119138 119139 119140 119227 119228 119229 119230 119231 119232)) (set! G21797 '((160 32) (168 32 776) (170 97) (175 32 772) (178 50) (179 51) (180 32 769) (181 956) (184 32 807) (185 49) (186 111) (188 49 8260 52) (189 49 8260 50) (190 51 8260 52) (306 73 74) (307 105 106) (319 76 183) (320 108 183) (329 700 110) (383 115) (452 68 381) (453 68 382) (454 100 382) (455 76 74) (456 76 106) (457 108 106) (458 78 74) (459 78 106) (460 110 106) (497 68 90) (498 68 122) (499 100 122) (688 104) (689 614) (690 106) (691 114) (692 633) (693 635) (694 641) (695 119) (696 121) (728 32 774) (729 32 775) (730 32 778) (731 32 808) (732 32 771) (733 32 779) (736 611) (737 108) (738 115) (739 120) (740 661) (890 32 837) (900 32 769) (976 946) (977 952) (978 933) (981 966) (982 960) (1008 954) (1009 961) (1010 962) (1012 920) (1013 949) (1017 931) (1415 1381 1410) (1653 1575 1652) (1654 1608 1652) (1655 1735 1652) (1656 1610 1652) (3635 3661 3634) (3763 3789 3762) (3804 3755 3737) (3805 3755 3745) (3852 3851) (3959 4018 3969) (3961 4019 3969) (4348 4316) (7468 65) (7469 198) (7470 66) (7472 68) (7473 69) (7474 398) (7475 71) (7476 72) (7477 73) (7478 74) (7479 75) (7480 76) (7481 77) (7482 78) (7484 79) (7485 546) (7486 80) (7487 82) (7488 84) (7489 85) (7490 87) (7491 97) (7492 592) (7493 593) (7494 7426) (7495 98) (7496 100) (7497 101) (7498 601) (7499 603) (7500 604) (7501 103) (7503 107) (7504 109) (7505 331) (7506 111) (7507 596) (7508 7446) (7509 7447) (7510 112) (7511 116) (7512 117) (7513 7453) (7514 623) (7515 118) (7516 7461) (7517 946) (7518 947) (7519 948) (7520 966) (7521 967) (7522 105) (7523 114) (7524 117) (7525 118) (7526 946) (7527 947) (7528 961) (7529 966) (7530 967) (7544 1085) (7579 594) (7580 99) (7581 597) (7582 240) (7583 604) (7584 102) (7585 607) (7586 609) (7587 613) (7588 616) (7589 617) (7590 618) (7591 7547) (7592 669) (7593 621) (7594 7557) (7595 671) (7596 625) (7597 624) (7598 626) (7599 627) (7600 628) (7601 629) (7602 632) (7603 642) (7604 643) (7605 427) (7606 649) (7607 650) (7608 7452) (7609 651) (7610 652) (7611 122) (7612 656) (7613 657) (7614 658) (7615 952) (7834 97 702) (8125 32 787) (8127 32 787) (8128 32 834) (8190 32 788) (8194 32) (8195 32) (8196 32) (8197 32) (8198 32) (8199 32) (8200 32) (8201 32) (8202 32) (8209 8208) (8215 32 819) (8228 46) (8229 46 46) (8230 46 46 46) (8239 32) (8243 8242 8242) (8244 8242 8242 8242) (8246 8245 8245) (8247 8245 8245 8245) (8252 33 33) (8254 32 773) (8263 63 63) (8264 63 33) (8265 33 63) (8279 8242 8242 8242 8242) (8287 32) (8304 48) (8305 105) (8308 52) (8309 53) (8310 54) (8311 55) (8312 56) (8313 57) (8314 43) (8315 8722) (8316 61) (8317 40) (8318 41) (8319 110) (8320 48) (8321 49) (8322 50) (8323 51) (8324 52) (8325 53) (8326 54) (8327 55) (8328 56) (8329 57) (8330 43) (8331 8722) (8332 61) (8333 40) (8334 41) (8336 97) (8337 101) (8338 111) (8339 120) (8340 601) (8360 82 115) (8448 97 47 99) (8449 97 47 115) (8450 67) (8451 176 67) (8453 99 47 111) (8454 99 47 117) (8455 400) (8457 176 70) (8458 103) (8459 72) (8460 72) (8461 72) (8462 104) (8463 295) (8464 73) (8465 73) (8466 76) (8467 108) (8469 78) (8470 78 111) (8473 80) (8474 81) (8475 82) (8476 82) (8477 82) (8480 83 77) (8481 84 69 76) (8482 84 77) (8484 90) (8488 90) (8492 66) (8493 67) (8495 101) (8496 69) (8497 70) (8499 77) (8500 111) (8501 1488) (8502 1489) (8503 1490) (8504 1491) (8505 105) (8507 70 65 88) (8508 960) (8509 947) (8510 915) (8511 928) (8512 8721) (8517 68) (8518 100) (8519 101) (8520 105) (8521 106) (8531 49 8260 51) (8532 50 8260 51) (8533 49 8260 53) (8534 50 8260 53) (8535 51 8260 53) (8536 52 8260 53) (8537 49 8260 54) (8538 53 8260 54) (8539 49 8260 56) (8540 51 8260 56) (8541 53 8260 56) (8542 55 8260 56) (8543 49 8260) (8544 73) (8545 73 73) (8546 73 73 73) (8547 73 86) (8548 86) (8549 86 73) (8550 86 73 73) (8551 86 73 73 73) (8552 73 88) (8553 88) (8554 88 73) (8555 88 73 73) (8556 76) (8557 67) (8558 68) (8559 77) (8560 105) (8561 105 105) (8562 105 105 105) (8563 105 118) (8564 118) (8565 118 105) (8566 118 105 105) (8567 118 105 105 105) (8568 105 120) (8569 120) (8570 120 105) (8571 120 105 105) (8572 108) (8573 99) (8574 100) (8575 109) (8748 8747 8747) (8749 8747 8747 8747) (8751 8750 8750) (8752 8750 8750 8750) (9312 49) (9313 50) (9314 51) (9315 52) (9316 53) (9317 54) (9318 55) (9319 56) (9320 57) (9321 49 48) (9322 49 49) (9323 49 50) (9324 49 51) (9325 49 52) (9326 49 53) (9327 49 54) (9328 49 55) (9329 49 56) (9330 49 57) (9331 50 48) (9332 40 49 41) (9333 40 50 41) (9334 40 51 41) (9335 40 52 41) (9336 40 53 41) (9337 40 54 41) (9338 40 55 41) (9339 40 56 41) (9340 40 57 41) (9341 40 49 48 41) (9342 40 49 49 41) (9343 40 49 50 41) (9344 40 49 51 41) (9345 40 49 52 41) (9346 40 49 53 41) (9347 40 49 54 41) (9348 40 49 55 41) (9349 40 49 56 41) (9350 40 49 57 41) (9351 40 50 48 41) (9352 49 46) (9353 50 46) (9354 51 46) (9355 52 46) (9356 53 46) (9357 54 46) (9358 55 46) (9359 56 46) (9360 57 46) (9361 49 48 46) (9362 49 49 46) (9363 49 50 46) (9364 49 51 46) (9365 49 52 46) (9366 49 53 46) (9367 49 54 46) (9368 49 55 46) (9369 49 56 46) (9370 49 57 46) (9371 50 48 46) (9372 40 97 41) (9373 40 98 41) (9374 40 99 41) (9375 40 100 41) (9376 40 101 41) (9377 40 102 41) (9378 40 103 41) (9379 40 104 41) (9380 40 105 41) (9381 40 106 41) (9382 40 107 41) (9383 40 108 41) (9384 40 109 41) (9385 40 110 41) (9386 40 111 41) (9387 40 112 41) (9388 40 113 41) (9389 40 114 41) (9390 40 115 41) (9391 40 116 41) (9392 40 117 41) (9393 40 118 41) (9394 40 119 41) (9395 40 120 41) (9396 40 121 41) (9397 40 122 41) (9398 65) (9399 66) (9400 67) (9401 68) (9402 69) (9403 70) (9404 71) (9405 72) (9406 73) (9407 74) (9408 75) (9409 76) (9410 77) (9411 78) (9412 79) (9413 80) (9414 81) (9415 82) (9416 83) (9417 84) (9418 85) (9419 86) (9420 87) (9421 88) (9422 89) (9423 90) (9424 97) (9425 98) (9426 99) (9427 100) (9428 101) (9429 102) (9430 103) (9431 104) (9432 105) (9433 106) (9434 107) (9435 108) (9436 109) (9437 110) (9438 111) (9439 112) (9440 113) (9441 114) (9442 115) (9443 116) (9444 117) (9445 118) (9446 119) (9447 120) (9448 121) (9449 122) (9450 48) (10764 8747 8747 8747 8747) (10868 58 58 61) (10869 61 61) (10870 61 61 61) (11388 106) (11389 86) (11631 11617) (11935 27597) (12019 40863) (12032 19968) (12033 20008) (12034 20022) (12035 20031) (12036 20057) (12037 20101) (12038 20108) (12039 20128) (12040 20154) (12041 20799) (12042 20837) (12043 20843) (12044 20866) (12045 20886) (12046 20907) (12047 20960) (12048 20981) (12049 20992) (12050 21147) (12051 21241) (12052 21269) (12053 21274) (12054 21304) (12055 21313) (12056 21340) (12057 21353) (12058 21378) (12059 21430) (12060 21448) (12061 21475) (12062 22231) (12063 22303) (12064 22763) (12065 22786) (12066 22794) (12067 22805) (12068 22823) (12069 22899) (12070 23376) (12071 23424) (12072 23544) (12073 23567) (12074 23586) (12075 23608) (12076 23662) (12077 23665) (12078 24027) (12079 24037) (12080 24049) (12081 24062) (12082 24178) (12083 24186) (12084 24191) (12085 24308) (12086 24318) (12087 24331) (12088 24339) (12089 24400) (12090 24417) (12091 24435) (12092 24515) (12093 25096) (12094 25142) (12095 25163) (12096 25903) (12097 25908) (12098 25991) (12099 26007) (12100 26020) (12101 26041) (12102 26080) (12103 26085) (12104 26352) (12105 26376) (12106 26408) (12107 27424) (12108 27490) (12109 27513) (12110 27571) (12111 27595) (12112 27604) (12113 27611) (12114 27663) (12115 27668) (12116 27700) (12117 28779) (12118 29226) (12119 29238) (12120 29243) (12121 29247) (12122 29255) (12123 29273) (12124 29275) (12125 29356) (12126 29572) (12127 29577) (12128 29916) (12129 29926) (12130 29976) (12131 29983) (12132 29992) (12133 30000) (12134 30091) (12135 30098) (12136 30326) (12137 30333) (12138 30382) (12139 30399) (12140 30446) (12141 30683) (12142 30690) (12143 30707) (12144 31034) (12145 31160) (12146 31166) (12147 31348) (12148 31435) (12149 31481) (12150 31859) (12151 31992) (12152 32566) (12153 32593) (12154 32650) (12155 32701) (12156 32769) (12157 32780) (12158 32786) (12159 32819) (12160 32895) (12161 32905) (12162 33251) (12163 33258) (12164 33267) (12165 33276) (12166 33292) (12167 33307) (12168 33311) (12169 33390) (12170 33394) (12171 33400) (12172 34381) (12173 34411) (12174 34880) (12175 34892) (12176 34915) (12177 35198) (12178 35211) (12179 35282) (12180 35328) (12181 35895) (12182 35910) (12183 35925) (12184 35960) (12185 35997) (12186 36196) (12187 36208) (12188 36275) (12189 36523) (12190 36554) (12191 36763) (12192 36784) (12193 36789) (12194 37009) (12195 37193) (12196 37318) (12197 37324) (12198 37329) (12199 38263) (12200 38272) (12201 38428) (12202 38582) (12203 38585) (12204 38632) (12205 38737) (12206 38750) (12207 38754) (12208 38761) (12209 38859) (12210 38893) (12211 38899) (12212 38913) (12213 39080) (12214 39131) (12215 39135) (12216 39318) (12217 39321) (12218 39340) (12219 39592) (12220 39640) (12221 39647) (12222 39717) (12223 39727) (12224 39730) (12225 39740) (12226 39770) (12227 40165) (12228 40565) (12229 40575) (12230 40613) (12231 40635) (12232 40643) (12233 40653) (12234 40657) (12235 40697) (12236 40701) (12237 40718) (12238 40723) (12239 40736) (12240 40763) (12241 40778) (12242 40786) (12243 40845) (12244 40860) (12245 40864) (12288 32) (12342 12306) (12344 21313) (12345 21316) (12346 21317) (12443 32 12441) (12444 32 12442) (12447 12424 12426) (12543 12467 12488) (12593 4352) (12594 4353) (12595 4522) (12596 4354) (12597 4524) (12598 4525) (12599 4355) (12600 4356) (12601 4357) (12602 4528) (12603 4529) (12604 4530) (12605 4531) (12606 4532) (12607 4533) (12608 4378) (12609 4358) (12610 4359) (12611 4360) (12612 4385) (12613 4361) (12614 4362) (12615 4363) (12616 4364) (12617 4365) (12618 4366) (12619 4367) (12620 4368) (12621 4369) (12622 4370) (12623 4449) (12624 4450) (12625 4451) (12626 4452) (12627 4453) (12628 4454) (12629 4455) (12630 4456) (12631 4457) (12632 4458) (12633 4459) (12634 4460) (12635 4461) (12636 4462) (12637 4463) (12638 4464) (12639 4465) (12640 4466) (12641 4467) (12642 4468) (12643 4469) (12644 4448) (12645 4372) (12646 4373) (12647 4551) (12648 4552) (12649 4556) (12650 4558) (12651 4563) (12652 4567) (12653 4569) (12654 4380) (12655 4573) (12656 4575) (12657 4381) (12658 4382) (12659 4384) (12660 4386) (12661 4387) (12662 4391) (12663 4393) (12664 4395) (12665 4396) (12666 4397) (12667 4398) (12668 4399) (12669 4402) (12670 4406) (12671 4416) (12672 4423) (12673 4428) (12674 4593) (12675 4594) (12676 4439) (12677 4440) (12678 4441) (12679 4484) (12680 4485) (12681 4488) (12682 4497) (12683 4498) (12684 4500) (12685 4510) (12686 4513) (12690 19968) (12691 20108) (12692 19977) (12693 22235) (12694 19978) (12695 20013) (12696 19979) (12697 30002) (12698 20057) (12699 19993) (12700 19969) (12701 22825) (12702 22320) (12703 20154) (12800 40 4352 41) (12801 40 4354 41) (12802 40 4355 41) (12803 40 4357 41) (12804 40 4358 41) (12805 40 4359 41) (12806 40 4361 41) (12807 40 4363 41) (12808 40 4364 41) (12809 40 4366 41) (12810 40 4367 41) (12811 40 4368 41) (12812 40 4369 41) (12813 40 4370 41) (12814 40 4352 4449 41) (12815 40 4354 4449 41) (12816 40 4355 4449 41) (12817 40 4357 4449 41) (12818 40 4358 4449 41) (12819 40 4359 4449 41) (12820 40 4361 4449 41) (12821 40 4363 4449 41) (12822 40 4364 4449 41) (12823 40 4366 4449 41) (12824 40 4367 4449 41) (12825 40 4368 4449 41) (12826 40 4369 4449 41) (12827 40 4370 4449 41) (12828 40 4364 4462 41) (12829 40 4363 4457 4364 4453 4523 41) (12830 40 4363 4457 4370 4462 41) (12832 40 19968 41) (12833 40 20108 41) (12834 40 19977 41) (12835 40 22235 41) (12836 40 20116 41) (12837 40 20845 41) (12838 40 19971 41) (12839 40 20843 41) (12840 40 20061 41) (12841 40 21313 41) (12842 40 26376 41) (12843 40 28779 41) (12844 40 27700 41) (12845 40 26408 41) (12846 40 37329 41) (12847 40 22303 41) (12848 40 26085 41) (12849 40 26666 41) (12850 40 26377 41) (12851 40 31038 41) (12852 40 21517 41) (12853 40 29305 41) (12854 40 36001 41) (12855 40 31069 41) (12856 40 21172 41) (12857 40 20195 41) (12858 40 21628 41) (12859 40 23398 41) (12860 40 30435 41) (12861 40 20225 41) (12862 40 36039 41) (12863 40 21332 41) (12864 40 31085 41) (12865 40 20241 41) (12866 40 33258 41) (12867 40 33267 41) (12880 80 84 69) (12881 50 49) (12882 50 50) (12883 50 51) (12884 50 52) (12885 50 53) (12886 50 54) (12887 50 55) (12888 50 56) (12889 50 57) (12890 51 48) (12891 51 49) (12892 51 50) (12893 51 51) (12894 51 52) (12895 51 53) (12896 4352) (12897 4354) (12898 4355) (12899 4357) (12900 4358) (12901 4359) (12902 4361) (12903 4363) (12904 4364) (12905 4366) (12906 4367) (12907 4368) (12908 4369) (12909 4370) (12910 4352 4449) (12911 4354 4449) (12912 4355 4449) (12913 4357 4449) (12914 4358 4449) (12915 4359 4449) (12916 4361 4449) (12917 4363 4449) (12918 4364 4449) (12919 4366 4449) (12920 4367 4449) (12921 4368 4449) (12922 4369 4449) (12923 4370 4449) (12924 4366 4449 4535 4352 4457) (12925 4364 4462 4363 4468) (12926 4363 4462) (12928 19968) (12929 20108) (12930 19977) (12931 22235) (12932 20116) (12933 20845) (12934 19971) (12935 20843) (12936 20061) (12937 21313) (12938 26376) (12939 28779) (12940 27700) (12941 26408) (12942 37329) (12943 22303) (12944 26085) (12945 26666) (12946 26377) (12947 31038) (12948 21517) (12949 29305) (12950 36001) (12951 31069) (12952 21172) (12953 31192) (12954 30007) (12955 22899) (12956 36969) (12957 20778) (12958 21360) (12959 27880) (12960 38917) (12961 20241) (12962 20889) (12963 27491) (12964 19978) (12965 20013) (12966 19979) (12967 24038) (12968 21491) (12969 21307) (12970 23447) (12971 23398) (12972 30435) (12973 20225) (12974 36039) (12975 21332) (12976 22812) (12977 51 54) (12978 51 55) (12979 51 56) (12980 51 57) (12981 52 48) (12982 52 49) (12983 52 50) (12984 52 51) (12985 52 52) (12986 52 53) (12987 52 54) (12988 52 55) (12989 52 56) (12990 52 57) (12991 53 48) (12992 49 26376) (12993 50 26376) (12994 51 26376) (12995 52 26376) (12996 53 26376) (12997 54 26376) (12998 55 26376) (12999 56 26376) (13000 57 26376) (13001 49 48 26376) (13002 49 49 26376) (13003 49 50 26376) (13004 72 103) (13005 101 114 103) (13006 101 86) (13007 76 84 68) (13008 12450) (13009 12452) (13010 12454) (13011 12456) (13012 12458) (13013 12459) (13014 12461) (13015 12463) (13016 12465) (13017 12467) (13018 12469) (13019 12471) (13020 12473) (13021 12475) (13022 12477) (13023 12479) (13024 12481) (13025 12484) (13026 12486) (13027 12488) (13028 12490) (13029 12491) (13030 12492) (13031 12493) (13032 12494) (13033 12495) (13034 12498) (13035 12501) (13036 12504) (13037 12507) (13038 12510) (13039 12511) (13040 12512) (13041 12513) (13042 12514) (13043 12516) (13044 12518) (13045 12520) (13046 12521) (13047 12522) (13048 12523) (13049 12524) (13050 12525) (13051 12527) (13052 12528) (13053 12529) (13054 12530) (13056 12450 12497 12540 12488) (13057 12450 12523 12501 12449) (13058 12450 12531 12506 12450) (13059 12450 12540 12523) (13060 12452 12491 12531 12464) (13061 12452 12531 12481) (13062 12454 12457 12531) (13063 12456 12473 12463 12540 12489) (13064 12456 12540 12459 12540) (13065 12458 12531 12473) (13066 12458 12540 12512) (13067 12459 12452 12522) (13068 12459 12521 12483 12488) (13069 12459 12525 12522 12540) (13070 12460 12525 12531) (13071 12460 12531 12510) (13072 12462 12460) (13073 12462 12491 12540) (13074 12461 12517 12522 12540) (13075 12462 12523 12480 12540) (13076 12461 12525) (13077 12461 12525 12464 12521 12512) (13078 12461 12525 12513 12540 12488 12523) (13079 12461 12525 12527 12483 12488) (13080 12464 12521 12512) (13081 12464 12521 12512 12488 12531) (13082 12463 12523 12476 12452 12525) (13083 12463 12525 12540 12493) (13084 12465 12540 12473) (13085 12467 12523 12490) (13086 12467 12540 12509) (13087 12469 12452 12463 12523) (13088 12469 12531 12481 12540 12512) (13089 12471 12522 12531 12464) (13090 12475 12531 12481) (13091 12475 12531 12488) (13092 12480 12540 12473) (13093 12487 12471) (13094 12489 12523) (13095 12488 12531) (13096 12490 12494) (13097 12494 12483 12488) (13098 12495 12452 12484) (13099 12497 12540 12475 12531 12488) (13100 12497 12540 12484) (13101 12496 12540 12524 12523) (13102 12500 12450 12473 12488 12523) (13103 12500 12463 12523) (13104 12500 12467) (13105 12499 12523) (13106 12501 12449 12521 12483 12489) (13107 12501 12451 12540 12488) (13108 12502 12483 12471 12455 12523) (13109 12501 12521 12531) (13110 12504 12463 12479 12540 12523) (13111 12506 12477) (13112 12506 12491 12498) (13113 12504 12523 12484) (13114 12506 12531 12473) (13115 12506 12540 12472) (13116 12505 12540 12479) (13117 12509 12452 12531 12488) (13118 12508 12523 12488) (13119 12507 12531) (13120 12509 12531 12489) (13121 12507 12540 12523) (13122 12507 12540 12531) (13123 12510 12452 12463 12525) (13124 12510 12452 12523) (13125 12510 12483 12495) (13126 12510 12523 12463) (13127 12510 12531 12471 12519 12531) (13128 12511 12463 12525 12531) (13129 12511 12522) (13130 12511 12522 12496 12540 12523) (13131 12513 12460) (13132 12513 12460 12488 12531) (13133 12513 12540 12488 12523) (13134 12516 12540 12489) (13135 12516 12540 12523) (13136 12518 12450 12531) (13137 12522 12483 12488 12523) (13138 12522 12521) (13139 12523 12500 12540) (13140 12523 12540 12502 12523) (13141 12524 12512) (13142 12524 12531 12488 12466 12531) (13143 12527 12483 12488) (13144 48 28857) (13145 49 28857) (13146 50 28857) (13147 51 28857) (13148 52 28857) (13149 53 28857) (13150 54 28857) (13151 55 28857) (13152 56 28857) (13153 57 28857) (13154 49 48 28857) (13155 49 49 28857) (13156 49 50 28857) (13157 49 51 28857) (13158 49 52 28857) (13159 49 53 28857) (13160 49 54 28857) (13161 49 55 28857) (13162 49 56 28857) (13163 49 57 28857) (13164 50 48 28857) (13165 50 49 28857) (13166 50 50 28857) (13167 50 51 28857) (13168 50 52 28857) (13169 104 80 97) (13170 100 97) (13171 65 85) (13172 98 97 114) (13173 111 86) (13174 112 99) (13175 100 109) (13176 100 109 178) (13177 100 109 179) (13178 73 85) (13179 24179 25104) (13180 26157 21644) (13181 22823 27491) (13182 26126 27835) (13183 26666 24335 20250 31038) (13184 112 65) (13185 110 65) (13186 956 65) (13187 109 65) (13188 107 65) (13189 75 66) (13190 77 66) (13191 71 66) (13192 99 97 108) (13193 107 99 97 108) (13194 112 70) (13195 110 70) (13196 956 70) (13197 956 103) (13198 109 103) (13199 107 103) (13200 72 122) (13201 107 72 122) (13202 77 72 122) (13203 71 72 122) (13204 84 72 122) (13205 956 8467) (13206 109 8467) (13207 100 8467) (13208 107 8467) (13209 102 109) (13210 110 109) (13211 956 109) (13212 109 109) (13213 99 109) (13214 107 109) (13215 109 109 178) (13216 99 109 178) (13217 109 178) (13218 107 109 178) (13219 109 109 179) (13220 99 109 179) (13221 109 179) (13222 107 109 179) (13223 109 8725 115) (13224 109 8725 115 178) (13225 80 97) (13226 107 80 97) (13227 77 80 97) (13228 71 80 97) (13229 114 97 100) (13230 114 97 100 8725 115) (13231 114 97 100 8725 115 178) (13232 112 115) (13233 110 115) (13234 956 115) (13235 109 115) (13236 112 86) (13237 110 86) (13238 956 86) (13239 109 86) (13240 107 86) (13241 77 86) (13242 112 87) (13243 110 87) (13244 956 87) (13245 109 87) (13246 107 87) (13247 77 87) (13248 107 937) (13249 77 937) (13250 97 46 109 46) (13251 66 113) (13252 99 99) (13253 99 100) (13254 67 8725 107 103) (13255 67 111 46) (13256 100 66) (13257 71 121) (13258 104 97) (13259 72 80) (13260 105 110) (13261 75 75) (13262 75 77) (13263 107 116) (13264 108 109) (13265 108 110) (13266 108 111 103) (13267 108 120) (13268 109 98) (13269 109 105 108) (13270 109 111 108) (13271 80 72) (13272 112 46 109 46) (13273 80 80 77) (13274 80 82) (13275 115 114) (13276 83 118) (13277 87 98) (13278 86 8725 109) (13279 65 8725 109) (13280 49 26085) (13281 50 26085) (13282 51 26085) (13283 52 26085) (13284 53 26085) (13285 54 26085) (13286 55 26085) (13287 56 26085) (13288 57 26085) (13289 49 48 26085) (13290 49 49 26085) (13291 49 50 26085) (13292 49 51 26085) (13293 49 52 26085) (13294 49 53 26085) (13295 49 54 26085) (13296 49 55 26085) (13297 49 56 26085) (13298 49 57 26085) (13299 50 48 26085) (13300 50 49 26085) (13301 50 50 26085) (13302 50 51 26085) (13303 50 52 26085) (13304 50 53 26085) (13305 50 54 26085) (13306 50 55 26085) (13307 50 56 26085) (13308 50 57 26085) (13309 51 48 26085) (13310 51 49 26085) (13311 103 97 108) (42864 42863) (64256 102 102) (64257 102 105) (64258 102 108) (64259 102 102 105) (64260 102 102 108) (64261 383 116) (64262 115 116) (64275 1396 1398) (64276 1396 1381) (64277 1396 1387) (64278 1406 1398) (64279 1396 1389) (64288 1506) (64289 1488) (64290 1491) (64291 1492) (64292 1499) (64293 1500) (64294 1501) (64295 1512) (64296 1514) (64297 43) (64335 1488 1500) (64336 1649) (64337 1649) (64338 1659) (64339 1659) (64340 1659) (64341 1659) (64342 1662) (64343 1662) (64344 1662) (64345 1662) (64346 1664) (64347 1664) (64348 1664) (64349 1664) (64350 1658) (64351 1658) (64352 1658) (64353 1658) (64354 1663) (64355 1663) (64356 1663) (64357 1663) (64358 1657) (64359 1657) (64360 1657) (64361 1657) (64362 1700) (64363 1700) (64364 1700) (64365 1700) (64366 1702) (64367 1702) (64368 1702) (64369 1702) (64370 1668) (64371 1668) (64372 1668) (64373 1668) (64374 1667) (64375 1667) (64376 1667) (64377 1667) (64378 1670) (64379 1670) (64380 1670) (64381 1670) (64382 1671) (64383 1671) (64384 1671) (64385 1671) (64386 1677) (64387 1677) (64388 1676) (64389 1676) (64390 1678) (64391 1678) (64392 1672) (64393 1672) (64394 1688) (64395 1688) (64396 1681) (64397 1681) (64398 1705) (64399 1705) (64400 1705) (64401 1705) (64402 1711) (64403 1711) (64404 1711) (64405 1711) (64406 1715) (64407 1715) (64408 1715) (64409 1715) (64410 1713) (64411 1713) (64412 1713) (64413 1713) (64414 1722) (64415 1722) (64416 1723) (64417 1723) (64418 1723) (64419 1723) (64420 1728) (64421 1728) (64422 1729) (64423 1729) (64424 1729) (64425 1729) (64426 1726) (64427 1726) (64428 1726) (64429 1726) (64430 1746) (64431 1746) (64432 1747) (64433 1747) (64467 1709) (64468 1709) (64469 1709) (64470 1709) (64471 1735) (64472 1735) (64473 1734) (64474 1734) (64475 1736) (64476 1736) (64477 1655) (64478 1739) (64479 1739) (64480 1733) (64481 1733) (64482 1737) (64483 1737) (64484 1744) (64485 1744) (64486 1744) (64487 1744) (64488 1609) (64489 1609) (64490 1574 1575) (64491 1574 1575) (64492 1574 1749) (64493 1574 1749) (64494 1574 1608) (64495 1574 1608) (64496 1574 1735) (64497 1574 1735) (64498 1574 1734) (64499 1574 1734) (64500 1574 1736) (64501 1574 1736) (64502 1574 1744) (64503 1574 1744) (64504 1574 1744) (64505 1574 1609) (64506 1574 1609) (64507 1574 1609) (64508 1740) (64509 1740) (64510 1740) (64511 1740) (64512 1574 1580) (64513 1574 1581) (64514 1574 1605) (64515 1574 1609) (64516 1574 1610) (64517 1576 1580) (64518 1576 1581) (64519 1576 1582) (64520 1576 1605) (64521 1576 1609) (64522 1576 1610) (64523 1578 1580) (64524 1578 1581) (64525 1578 1582) (64526 1578 1605) (64527 1578 1609) (64528 1578 1610) (64529 1579 1580) (64530 1579 1605) (64531 1579 1609) (64532 1579 1610) (64533 1580 1581) (64534 1580 1605) (64535 1581 1580) (64536 1581 1605) (64537 1582 1580) (64538 1582 1581) (64539 1582 1605) (64540 1587 1580) (64541 1587 1581) (64542 1587 1582) (64543 1587 1605) (64544 1589 1581) (64545 1589 1605) (64546 1590 1580) (64547 1590 1581) (64548 1590 1582) (64549 1590 1605) (64550 1591 1581) (64551 1591 1605) (64552 1592 1605) (64553 1593 1580) (64554 1593 1605) (64555 1594 1580) (64556 1594 1605) (64557 1601 1580) (64558 1601 1581) (64559 1601 1582) (64560 1601 1605) (64561 1601 1609) (64562 1601 1610) (64563 1602 1581) (64564 1602 1605) (64565 1602 1609) (64566 1602 1610) (64567 1603 1575) (64568 1603 1580) (64569 1603 1581) (64570 1603 1582) (64571 1603 1604) (64572 1603 1605) (64573 1603 1609) (64574 1603 1610) (64575 1604 1580) (64576 1604 1581) (64577 1604 1582) (64578 1604 1605) (64579 1604 1609) (64580 1604 1610) (64581 1605 1580) (64582 1605 1581) (64583 1605 1582) (64584 1605 1605) (64585 1605 1609) (64586 1605 1610) (64587 1606 1580) (64588 1606 1581) (64589 1606 1582) (64590 1606 1605) (64591 1606 1609) (64592 1606 1610) (64593 1607 1580) (64594 1607 1605) (64595 1607 1609) (64596 1607 1610) (64597 1610 1580) (64598 1610 1581) (64599 1610 1582) (64600 1610 1605) (64601 1610 1609) (64602 1610 1610) (64603 1584 1648) (64604 1585 1648) (64605 1609 1648) (64606 32 1612 1617) (64607 32 1613 1617) (64608 32 1614 1617) (64609 32 1615 1617) (64610 32 1616 1617) (64611 32 1617 1648) (64612 1574 1585) (64613 1574 1586) (64614 1574 1605) (64615 1574 1606) (64616 1574 1609) (64617 1574 1610) (64618 1576 1585) (64619 1576 1586) (64620 1576 1605) (64621 1576 1606) (64622 1576 1609) (64623 1576 1610) (64624 1578 1585) (64625 1578 1586) (64626 1578 1605) (64627 1578 1606) (64628 1578 1609) (64629 1578 1610) (64630 1579 1585) (64631 1579 1586) (64632 1579 1605) (64633 1579 1606) (64634 1579 1609) (64635 1579 1610) (64636 1601 1609) (64637 1601 1610) (64638 1602 1609) (64639 1602 1610) (64640 1603 1575) (64641 1603 1604) (64642 1603 1605) (64643 1603 1609) (64644 1603 1610) (64645 1604 1605) (64646 1604 1609) (64647 1604 1610) (64648 1605 1575) (64649 1605 1605) (64650 1606 1585) (64651 1606 1586) (64652 1606 1605) (64653 1606 1606) (64654 1606 1609) (64655 1606 1610) (64656 1609 1648) (64657 1610 1585) (64658 1610 1586) (64659 1610 1605) (64660 1610 1606) (64661 1610 1609) (64662 1610 1610) (64663 1574 1580) (64664 1574 1581) (64665 1574 1582) (64666 1574 1605) (64667 1574 1607) (64668 1576 1580) (64669 1576 1581) (64670 1576 1582) (64671 1576 1605) (64672 1576 1607) (64673 1578 1580) (64674 1578 1581) (64675 1578 1582) (64676 1578 1605) (64677 1578 1607) (64678 1579 1605) (64679 1580 1581) (64680 1580 1605) (64681 1581 1580) (64682 1581 1605) (64683 1582 1580) (64684 1582 1605) (64685 1587 1580) (64686 1587 1581) (64687 1587 1582) (64688 1587 1605) (64689 1589 1581) (64690 1589 1582) (64691 1589 1605) (64692 1590 1580) (64693 1590 1581) (64694 1590 1582) (64695 1590 1605) (64696 1591 1581) (64697 1592 1605) (64698 1593 1580) (64699 1593 1605) (64700 1594 1580) (64701 1594 1605) (64702 1601 1580) (64703 1601 1581) (64704 1601 1582) (64705 1601 1605) (64706 1602 1581) (64707 1602 1605) (64708 1603 1580) (64709 1603 1581) (64710 1603 1582) (64711 1603 1604) (64712 1603 1605) (64713 1604 1580) (64714 1604 1581) (64715 1604 1582) (64716 1604 1605) (64717 1604 1607) (64718 1605 1580) (64719 1605 1581) (64720 1605 1582) (64721 1605 1605) (64722 1606 1580) (64723 1606 1581) (64724 1606 1582) (64725 1606 1605) (64726 1606 1607) (64727 1607 1580) (64728 1607 1605) (64729 1607 1648) (64730 1610 1580) (64731 1610 1581) (64732 1610 1582) (64733 1610 1605) (64734 1610 1607) (64735 1574 1605) (64736 1574 1607) (64737 1576 1605) (64738 1576 1607) (64739 1578 1605) (64740 1578 1607) (64741 1579 1605) (64742 1579 1607) (64743 1587 1605) (64744 1587 1607) (64745 1588 1605) (64746 1588 1607) (64747 1603 1604) (64748 1603 1605) (64749 1604 1605) (64750 1606 1605) (64751 1606 1607) (64752 1610 1605) (64753 1610 1607) (64754 1600 1614 1617) (64755 1600 1615 1617) (64756 1600 1616 1617) (64757 1591 1609) (64758 1591 1610) (64759 1593 1609) (64760 1593 1610) (64761 1594 1609) (64762 1594 1610) (64763 1587 1609) (64764 1587 1610) (64765 1588 1609) (64766 1588 1610) (64767 1581 1609) (64768 1581 1610) (64769 1580 1609) (64770 1580 1610) (64771 1582 1609) (64772 1582 1610) (64773 1589 1609) (64774 1589 1610) (64775 1590 1609) (64776 1590 1610) (64777 1588 1580) (64778 1588 1581) (64779 1588 1582) (64780 1588 1605) (64781 1588 1585) (64782 1587 1585) (64783 1589 1585) (64784 1590 1585) (64785 1591 1609) (64786 1591 1610) (64787 1593 1609) (64788 1593 1610) (64789 1594 1609) (64790 1594 1610) (64791 1587 1609) (64792 1587 1610) (64793 1588 1609) (64794 1588 1610) (64795 1581 1609) (64796 1581 1610) (64797 1580 1609) (64798 1580 1610) (64799 1582 1609) (64800 1582 1610) (64801 1589 1609) (64802 1589 1610) (64803 1590 1609) (64804 1590 1610) (64805 1588 1580) (64806 1588 1581) (64807 1588 1582) (64808 1588 1605) (64809 1588 1585) (64810 1587 1585) (64811 1589 1585) (64812 1590 1585) (64813 1588 1580) (64814 1588 1581) (64815 1588 1582) (64816 1588 1605) (64817 1587 1607) (64818 1588 1607) (64819 1591 1605) (64820 1587 1580) (64821 1587 1581) (64822 1587 1582) (64823 1588 1580) (64824 1588 1581) (64825 1588 1582) (64826 1591 1605) (64827 1592 1605) (64828 1575 1611) (64829 1575 1611) (64848 1578 1580 1605) (64849 1578 1581 1580) (64850 1578 1581 1580) (64851 1578 1581 1605) (64852 1578 1582 1605) (64853 1578 1605 1580) (64854 1578 1605 1581) (64855 1578 1605 1582) (64856 1580 1605 1581) (64857 1580 1605 1581) (64858 1581 1605 1610) (64859 1581 1605 1609) (64860 1587 1581 1580) (64861 1587 1580 1581) (64862 1587 1580 1609) (64863 1587 1605 1581) (64864 1587 1605 1581) (64865 1587 1605 1580) (64866 1587 1605 1605) (64867 1587 1605 1605) (64868 1589 1581 1581) (64869 1589 1581 1581) (64870 1589 1605 1605) (64871 1588 1581 1605) (64872 1588 1581 1605) (64873 1588 1580 1610) (64874 1588 1605 1582) (64875 1588 1605 1582) (64876 1588 1605 1605) (64877 1588 1605 1605) (64878 1590 1581 1609) (64879 1590 1582 1605) (64880 1590 1582 1605) (64881 1591 1605 1581) (64882 1591 1605 1581) (64883 1591 1605 1605) (64884 1591 1605 1610) (64885 1593 1580 1605) (64886 1593 1605 1605) (64887 1593 1605 1605) (64888 1593 1605 1609) (64889 1594 1605 1605) (64890 1594 1605 1610) (64891 1594 1605 1609) (64892 1601 1582 1605) (64893 1601 1582 1605) (64894 1602 1605 1581) (64895 1602 1605 1605) (64896 1604 1581 1605) (64897 1604 1581 1610) (64898 1604 1581 1609) (64899 1604 1580 1580) (64900 1604 1580 1580) (64901 1604 1582 1605) (64902 1604 1582 1605) (64903 1604 1605 1581) (64904 1604 1605 1581) (64905 1605 1581 1580) (64906 1605 1581 1605) (64907 1605 1581 1610) (64908 1605 1580 1581) (64909 1605 1580 1605) (64910 1605 1582 1580) (64911 1605 1582 1605) (64914 1605 1580 1582) (64915 1607 1605 1580) (64916 1607 1605 1605) (64917 1606 1581 1605) (64918 1606 1581 1609) (64919 1606 1580 1605) (64920 1606 1580 1605) (64921 1606 1580 1609) (64922 1606 1605 1610) (64923 1606 1605 1609) (64924 1610 1605 1605) (64925 1610 1605 1605) (64926 1576 1582 1610) (64927 1578 1580 1610) (64928 1578 1580 1609) (64929 1578 1582 1610) (64930 1578 1582 1609) (64931 1578 1605 1610) (64932 1578 1605 1609) (64933 1580 1605 1610) (64934 1580 1581 1609) (64935 1580 1605 1609) (64936 1587 1582 1609) (64937 1589 1581 1610) (64938 1588 1581 1610) (64939 1590 1581 1610) (64940 1604 1580 1610) (64941 1604 1605 1610) (64942 1610 1581 1610) (64943 1610 1580 1610) (64944 1610 1605 1610) (64945 1605 1605 1610) (64946 1602 1605 1610) (64947 1606 1581 1610) (64948 1602 1605 1581) (64949 1604 1581 1605) (64950 1593 1605 1610) (64951 1603 1605 1610) (64952 1606 1580 1581) (64953 1605 1582 1610) (64954 1604 1580 1605) (64955 1603 1605 1605) (64956 1604 1580 1605) (64957 1606 1580 1581) (64958 1580 1581 1610) (64959 1581 1580 1610) (64960 1605 1580 1610) (64961 1601 1605 1610) (64962 1576 1581 1610) (64963 1603 1605 1605) (64964 1593 1580 1605) (64965 1589 1605 1605) (64966 1587 1582 1610) (64967 1606 1580 1610) (65008 1589 1604 1746) (65009 1602 1604 1746) (65010 1575 1604 1604 1607) (65011 1575 1603 1576 1585) (65012 1605 1581 1605 1583) (65013 1589 1604 1593 1605) (65014 1585 1587 1608 1604) (65015 1593 1604 1610 1607) (65016 1608 1587 1604 1605) (65017 1589 1604 1609) (65018 1589 1604 1609 32 1575 1604 1604 1607 32 1593 1604 1610 1607 32 1608 1587 1604 1605) (65019 1580 1604 32 1580 1604 1575 1604 1607) (65020 1585 1740 1575 1604) (65040 44) (65041 12289) (65042 12290) (65043 58) (65044 59) (65045 33) (65046 63) (65047 12310) (65048 12311) (65049 8230) (65072 8229) (65073 8212) (65074 8211) (65075 95) (65076 95) (65077 40) (65078 41) (65079 123) (65080 125) (65081 12308) (65082 12309) (65083 12304) (65084 12305) (65085 12298) (65086 12299) (65087 12296) (65088 12297) (65089 12300) (65090 12301) (65091 12302) (65092 12303) (65095 91) (65096 93) (65097 8254) (65098 8254) (65099 8254) (65100 8254) (65101 95) (65102 95) (65103 95) (65104 44) (65105 12289) (65106 46) (65108 59) (65109 58) (65110 63) (65111 33) (65112 8212) (65113 40) (65114 41) (65115 123) (65116 125) (65117 12308) (65118 12309) (65119 35) (65120 38) (65121 42) (65122 43) (65123 45) (65124 60) (65125 62) (65126 61) (65128 92) (65129 36) (65130 37) (65131 64) (65136 32 1611) (65137 1600 1611) (65138 32 1612) (65140 32 1613) (65142 32 1614) (65143 1600 1614) (65144 32 1615) (65145 1600 1615) (65146 32 1616) (65147 1600 1616) (65148 32 1617) (65149 1600 1617) (65150 32 1618) (65151 1600 1618) (65152 1569) (65153 1570) (65154 1570) (65155 1571) (65156 1571) (65157 1572) (65158 1572) (65159 1573) (65160 1573) (65161 1574) (65162 1574) (65163 1574) (65164 1574) (65165 1575) (65166 1575) (65167 1576) (65168 1576) (65169 1576) (65170 1576) (65171 1577) (65172 1577) (65173 1578) (65174 1578) (65175 1578) (65176 1578) (65177 1579) (65178 1579) (65179 1579) (65180 1579) (65181 1580) (65182 1580) (65183 1580) (65184 1580) (65185 1581) (65186 1581) (65187 1581) (65188 1581) (65189 1582) (65190 1582) (65191 1582) (65192 1582) (65193 1583) (65194 1583) (65195 1584) (65196 1584) (65197 1585) (65198 1585) (65199 1586) (65200 1586) (65201 1587) (65202 1587) (65203 1587) (65204 1587) (65205 1588) (65206 1588) (65207 1588) (65208 1588) (65209 1589) (65210 1589) (65211 1589) (65212 1589) (65213 1590) (65214 1590) (65215 1590) (65216 1590) (65217 1591) (65218 1591) (65219 1591) (65220 1591) (65221 1592) (65222 1592) (65223 1592) (65224 1592) (65225 1593) (65226 1593) (65227 1593) (65228 1593) (65229 1594) (65230 1594) (65231 1594) (65232 1594) (65233 1601) (65234 1601) (65235 1601) (65236 1601) (65237 1602) (65238 1602) (65239 1602) (65240 1602) (65241 1603) (65242 1603) (65243 1603) (65244 1603) (65245 1604) (65246 1604) (65247 1604) (65248 1604) (65249 1605) (65250 1605) (65251 1605) (65252 1605) (65253 1606) (65254 1606) (65255 1606) (65256 1606) (65257 1607) (65258 1607) (65259 1607) (65260 1607) (65261 1608) (65262 1608) (65263 1609) (65264 1609) (65265 1610) (65266 1610) (65267 1610) (65268 1610) (65269 1604 1570) (65270 1604 1570) (65271 1604 1571) (65272 1604 1571) (65273 1604 1573) (65274 1604 1573) (65275 1604 1575) (65276 1604 1575) (65281 33) (65282 34) (65283 35) (65284 36) (65285 37) (65286 38) (65287 39) (65288 40) (65289 41) (65290 42) (65291 43) (65292 44) (65293 45) (65294 46) (65295 47) (65296 48) (65297 49) (65298 50) (65299 51) (65300 52) (65301 53) (65302 54) (65303 55) (65304 56) (65305 57) (65306 58) (65307 59) (65308 60) (65309 61) (65310 62) (65311 63) (65312 64) (65313 65) (65314 66) (65315 67) (65316 68) (65317 69) (65318 70) (65319 71) (65320 72) (65321 73) (65322 74) (65323 75) (65324 76) (65325 77) (65326 78) (65327 79) (65328 80) (65329 81) (65330 82) (65331 83) (65332 84) (65333 85) (65334 86) (65335 87) (65336 88) (65337 89) (65338 90) (65339 91) (65340 92) (65341 93) (65342 94) (65343 95) (65344 96) (65345 97) (65346 98) (65347 99) (65348 100) (65349 101) (65350 102) (65351 103) (65352 104) (65353 105) (65354 106) (65355 107) (65356 108) (65357 109) (65358 110) (65359 111) (65360 112) (65361 113) (65362 114) (65363 115) (65364 116) (65365 117) (65366 118) (65367 119) (65368 120) (65369 121) (65370 122) (65371 123) (65372 124) (65373 125) (65374 126) (65375 10629) (65376 10630) (65377 12290) (65378 12300) (65379 12301) (65380 12289) (65381 12539) (65382 12530) (65383 12449) (65384 12451) (65385 12453) (65386 12455) (65387 12457) (65388 12515) (65389 12517) (65390 12519) (65391 12483) (65392 12540) (65393 12450) (65394 12452) (65395 12454) (65396 12456) (65397 12458) (65398 12459) (65399 12461) (65400 12463) (65401 12465) (65402 12467) (65403 12469) (65404 12471) (65405 12473) (65406 12475) (65407 12477) (65408 12479) (65409 12481) (65410 12484) (65411 12486) (65412 12488) (65413 12490) (65414 12491) (65415 12492) (65416 12493) (65417 12494) (65418 12495) (65419 12498) (65420 12501) (65421 12504) (65422 12507) (65423 12510) (65424 12511) (65425 12512) (65426 12513) (65427 12514) (65428 12516) (65429 12518) (65430 12520) (65431 12521) (65432 12522) (65433 12523) (65434 12524) (65435 12525) (65436 12527) (65437 12531) (65438 12441) (65439 12442) (65440 12644) (65441 12593) (65442 12594) (65443 12595) (65444 12596) (65445 12597) (65446 12598) (65447 12599) (65448 12600) (65449 12601) (65450 12602) (65451 12603) (65452 12604) (65453 12605) (65454 12606) (65455 12607) (65456 12608) (65457 12609) (65458 12610) (65459 12611) (65460 12612) (65461 12613) (65462 12614) (65463 12615) (65464 12616) (65465 12617) (65466 12618) (65467 12619) (65468 12620) (65469 12621) (65470 12622) (65474 12623) (65475 12624) (65476 12625) (65477 12626) (65478 12627) (65479 12628) (65482 12629) (65483 12630) (65484 12631) (65485 12632) (65486 12633) (65487 12634) (65490 12635) (65491 12636) (65492 12637) (65493 12638) (65494 12639) (65495 12640) (65498 12641) (65499 12642) (65500 12643) (65504 162) (65505 163) (65506 172) (65507 175) (65508 166) (65509 165) (65510 8361) (65512 9474) (65513 8592) (65514 8593) (65515 8594) (65516 8595) (65517 9632) (65518 9675) (119808 65) (119809 66) (119810 67) (119811 68) (119812 69) (119813 70) (119814 71) (119815 72) (119816 73) (119817 74) (119818 75) (119819 76) (119820 77) (119821 78) (119822 79) (119823 80) (119824 81) (119825 82) (119826 83) (119827 84) (119828 85) (119829 86) (119830 87) (119831 88) (119832 89) (119833 90) (119834 97) (119835 98) (119836 99) (119837 100) (119838 101) (119839 102) (119840 103) (119841 104) (119842 105) (119843 106) (119844 107) (119845 108) (119846 109) (119847 110) (119848 111) (119849 112) (119850 113) (119851 114) (119852 115) (119853 116) (119854 117) (119855 118) (119856 119) (119857 120) (119858 121) (119859 122) (119860 65) (119861 66) (119862 67) (119863 68) (119864 69) (119865 70) (119866 71) (119867 72) (119868 73) (119869 74) (119870 75) (119871 76) (119872 77) (119873 78) (119874 79) (119875 80) (119876 81) (119877 82) (119878 83) (119879 84) (119880 85) (119881 86) (119882 87) (119883 88) (119884 89) (119885 90) (119886 97) (119887 98) (119888 99) (119889 100) (119890 101) (119891 102) (119892 103) (119894 105) (119895 106) (119896 107) (119897 108) (119898 109) (119899 110) (119900 111) (119901 112) (119902 113) (119903 114) (119904 115) (119905 116) (119906 117) (119907 118) (119908 119) (119909 120) (119910 121) (119911 122) (119912 65) (119913 66) (119914 67) (119915 68) (119916 69) (119917 70) (119918 71) (119919 72) (119920 73) (119921 74) (119922 75) (119923 76) (119924 77) (119925 78) (119926 79) (119927 80) (119928 81) (119929 82) (119930 83) (119931 84) (119932 85) (119933 86) (119934 87) (119935 88) (119936 89) (119937 90) (119938 97) (119939 98) (119940 99) (119941 100) (119942 101) (119943 102) (119944 103) (119945 104) (119946 105) (119947 106) (119948 107) (119949 108) (119950 109) (119951 110) (119952 111) (119953 112) (119954 113) (119955 114) (119956 115) (119957 116) (119958 117) (119959 118) (119960 119) (119961 120) (119962 121) (119963 122) (119964 65) (119966 67) (119967 68) (119970 71) (119973 74) (119974 75) (119977 78) (119978 79) (119979 80) (119980 81) (119982 83) (119983 84) (119984 85) (119985 86) (119986 87) (119987 88) (119988 89) (119989 90) (119990 97) (119991 98) (119992 99) (119993 100) (119995 102) (119997 104) (119998 105) (119999 106) (120000 107) (120001 108) (120002 109) (120003 110) (120005 112) (120006 113) (120007 114) (120008 115) (120009 116) (120010 117) (120011 118) (120012 119) (120013 120) (120014 121) (120015 122) (120016 65) (120017 66) (120018 67) (120019 68) (120020 69) (120021 70) (120022 71) (120023 72) (120024 73) (120025 74) (120026 75) (120027 76) (120028 77) (120029 78) (120030 79) (120031 80) (120032 81) (120033 82) (120034 83) (120035 84) (120036 85) (120037 86) (120038 87) (120039 88) (120040 89) (120041 90) (120042 97) (120043 98) (120044 99) (120045 100) (120046 101) (120047 102) (120048 103) (120049 104) (120050 105) (120051 106) (120052 107) (120053 108) (120054 109) (120055 110) (120056 111) (120057 112) (120058 113) (120059 114) (120060 115) (120061 116) (120062 117) (120063 118) (120064 119) (120065 120) (120066 121) (120067 122) (120068 65) (120069 66) (120071 68) (120072 69) (120073 70) (120074 71) (120077 74) (120078 75) (120079 76) (120080 77) (120081 78) (120082 79) (120083 80) (120084 81) (120086 83) (120087 84) (120088 85) (120089 86) (120090 87) (120091 88) (120092 89) (120094 97) (120095 98) (120096 99) (120097 100) (120098 101) (120099 102) (120100 103) (120101 104) (120102 105) (120103 106) (120104 107) (120105 108) (120106 109) (120107 110) (120108 111) (120109 112) (120110 113) (120111 114) (120112 115) (120113 116) (120114 117) (120115 118) (120116 119) (120117 120) (120118 121) (120119 122) (120120 65) (120121 66) (120123 68) (120124 69) (120125 70) (120126 71) (120128 73) (120129 74) (120130 75) (120131 76) (120132 77) (120134 79) (120138 83) (120139 84) (120140 85) (120141 86) (120142 87) (120143 88) (120144 89) (120146 97) (120147 98) (120148 99) (120149 100) (120150 101) (120151 102) (120152 103) (120153 104) (120154 105) (120155 106) (120156 107) (120157 108) (120158 109) (120159 110) (120160 111) (120161 112) (120162 113) (120163 114) (120164 115) (120165 116) (120166 117) (120167 118) (120168 119) (120169 120) (120170 121) (120171 122) (120172 65) (120173 66) (120174 67) (120175 68) (120176 69) (120177 70) (120178 71) (120179 72) (120180 73) (120181 74) (120182 75) (120183 76) (120184 77) (120185 78) (120186 79) (120187 80) (120188 81) (120189 82) (120190 83) (120191 84) (120192 85) (120193 86) (120194 87) (120195 88) (120196 89) (120197 90) (120198 97) (120199 98) (120200 99) (120201 100) (120202 101) (120203 102) (120204 103) (120205 104) (120206 105) (120207 106) (120208 107) (120209 108) (120210 109) (120211 110) (120212 111) (120213 112) (120214 113) (120215 114) (120216 115) (120217 116) (120218 117) (120219 118) (120220 119) (120221 120) (120222 121) (120223 122) (120224 65) (120225 66) (120226 67) (120227 68) (120228 69) (120229 70) (120230 71) (120231 72) (120232 73) (120233 74) (120234 75) (120235 76) (120236 77) (120237 78) (120238 79) (120239 80) (120240 81) (120241 82) (120242 83) (120243 84) (120244 85) (120245 86) (120246 87) (120247 88) (120248 89) (120249 90) (120250 97) (120251 98) (120252 99) (120253 100) (120254 101) (120255 102) (120256 103) (120257 104) (120258 105) (120259 106) (120260 107) (120261 108) (120262 109) (120263 110) (120264 111) (120265 112) (120266 113) (120267 114) (120268 115) (120269 116) (120270 117) (120271 118) (120272 119) (120273 120) (120274 121) (120275 122) (120276 65) (120277 66) (120278 67) (120279 68) (120280 69) (120281 70) (120282 71) (120283 72) (120284 73) (120285 74) (120286 75) (120287 76) (120288 77) (120289 78) (120290 79) (120291 80) (120292 81) (120293 82) (120294 83) (120295 84) (120296 85) (120297 86) (120298 87) (120299 88) (120300 89) (120301 90) (120302 97) (120303 98) (120304 99) (120305 100) (120306 101) (120307 102) (120308 103) (120309 104) (120310 105) (120311 106) (120312 107) (120313 108) (120314 109) (120315 110) (120316 111) (120317 112) (120318 113) (120319 114) (120320 115) (120321 116) (120322 117) (120323 118) (120324 119) (120325 120) (120326 121) (120327 122) (120328 65) (120329 66) (120330 67) (120331 68) (120332 69) (120333 70) (120334 71) (120335 72) (120336 73) (120337 74) (120338 75) (120339 76) (120340 77) (120341 78) (120342 79) (120343 80) (120344 81) (120345 82) (120346 83) (120347 84) (120348 85) (120349 86) (120350 87) (120351 88) (120352 89) (120353 90) (120354 97) (120355 98) (120356 99) (120357 100) (120358 101) (120359 102) (120360 103) (120361 104) (120362 105) (120363 106) (120364 107) (120365 108) (120366 109) (120367 110) (120368 111) (120369 112) (120370 113) (120371 114) (120372 115) (120373 116) (120374 117) (120375 118) (120376 119) (120377 120) (120378 121) (120379 122) (120380 65) (120381 66) (120382 67) (120383 68) (120384 69) (120385 70) (120386 71) (120387 72) (120388 73) (120389 74) (120390 75) (120391 76) (120392 77) (120393 78) (120394 79) (120395 80) (120396 81) (120397 82) (120398 83) (120399 84) (120400 85) (120401 86) (120402 87) (120403 88) (120404 89) (120405 90) (120406 97) (120407 98) (120408 99) (120409 100) (120410 101) (120411 102) (120412 103) (120413 104) (120414 105) (120415 106) (120416 107) (120417 108) (120418 109) (120419 110) (120420 111) (120421 112) (120422 113) (120423 114) (120424 115) (120425 116) (120426 117) (120427 118) (120428 119) (120429 120) (120430 121) (120431 122) (120432 65) (120433 66) (120434 67) (120435 68) (120436 69) (120437 70) (120438 71) (120439 72) (120440 73) (120441 74) (120442 75) (120443 76) (120444 77) (120445 78) (120446 79) (120447 80) (120448 81) (120449 82) (120450 83) (120451 84) (120452 85) (120453 86) (120454 87) (120455 88) (120456 89) (120457 90) (120458 97) (120459 98) (120460 99) (120461 100) (120462 101) (120463 102) (120464 103) (120465 104) (120466 105) (120467 106) (120468 107) (120469 108) (120470 109) (120471 110) (120472 111) (120473 112) (120474 113) (120475 114) (120476 115) (120477 116) (120478 117) (120479 118) (120480 119) (120481 120) (120482 121) (120483 122) (120484 305) (120485 567) (120488 913) (120489 914) (120490 915) (120491 916) (120492 917) (120493 918) (120494 919) (120495 920) (120496 921) (120497 922) (120498 923) (120499 924) (120500 925) (120501 926) (120502 927) (120503 928) (120504 929) (120505 1012) (120506 931) (120507 932) (120508 933) (120509 934) (120510 935) (120511 936) (120512 937) (120513 8711) (120514 945) (120515 946) (120516 947) (120517 948) (120518 949) (120519 950) (120520 951) (120521 952) (120522 953) (120523 954) (120524 955) (120525 956) (120526 957) (120527 958) (120528 959) (120529 960) (120530 961) (120531 962) (120532 963) (120533 964) (120534 965) (120535 966) (120536 967) (120537 968) (120538 969) (120539 8706) (120540 1013) (120541 977) (120542 1008) (120543 981) (120544 1009) (120545 982) (120546 913) (120547 914) (120548 915) (120549 916) (120550 917) (120551 918) (120552 919) (120553 920) (120554 921) (120555 922) (120556 923) (120557 924) (120558 925) (120559 926) (120560 927) (120561 928) (120562 929) (120563 1012) (120564 931) (120565 932) (120566 933) (120567 934) (120568 935) (120569 936) (120570 937) (120571 8711) (120572 945) (120573 946) (120574 947) (120575 948) (120576 949) (120577 950) (120578 951) (120579 952) (120580 953) (120581 954) (120582 955) (120583 956) (120584 957) (120585 958) (120586 959) (120587 960) (120588 961) (120589 962) (120590 963) (120591 964) (120592 965) (120593 966) (120594 967) (120595 968) (120596 969) (120597 8706) (120598 1013) (120599 977) (120600 1008) (120601 981) (120602 1009) (120603 982) (120604 913) (120605 914) (120606 915) (120607 916) (120608 917) (120609 918) (120610 919) (120611 920) (120612 921) (120613 922) (120614 923) (120615 924) (120616 925) (120617 926) (120618 927) (120619 928) (120620 929) (120621 1012) (120622 931) (120623 932) (120624 933) (120625 934) (120626 935) (120627 936) (120628 937) (120629 8711) (120630 945) (120631 946) (120632 947) (120633 948) (120634 949) (120635 950) (120636 951) (120637 952) (120638 953) (120639 954) (120640 955) (120641 956) (120642 957) (120643 958) (120644 959) (120645 960) (120646 961) (120647 962) (120648 963) (120649 964) (120650 965) (120651 966) (120652 967) (120653 968) (120654 969) (120655 8706) (120656 1013) (120657 977) (120658 1008) (120659 981) (120660 1009) (120661 982) (120662 913) (120663 914) (120664 915) (120665 916) (120666 917) (120667 918) (120668 919) (120669 920) (120670 921) (120671 922) (120672 923) (120673 924) (120674 925) (120675 926) (120676 927) (120677 928) (120678 929) (120679 1012) (120680 931) (120681 932) (120682 933) (120683 934) (120684 935) (120685 936) (120686 937) (120687 8711) (120688 945) (120689 946) (120690 947) (120691 948) (120692 949) (120693 950) (120694 951) (120695 952) (120696 953) (120697 954) (120698 955) (120699 956) (120700 957) (120701 958) (120702 959) (120703 960) (120704 961) (120705 962) (120706 963) (120707 964) (120708 965) (120709 966) (120710 967) (120711 968) (120712 969) (120713 8706) (120714 1013) (120715 977) (120716 1008) (120717 981) (120718 1009) (120719 982) (120720 913) (120721 914) (120722 915) (120723 916) (120724 917) (120725 918) (120726 919) (120727 920) (120728 921) (120729 922) (120730 923) (120731 924) (120732 925) (120733 926) (120734 927) (120735 928) (120736 929) (120737 1012) (120738 931) (120739 932) (120740 933) (120741 934) (120742 935) (120743 936) (120744 937) (120745 8711) (120746 945) (120747 946) (120748 947) (120749 948) (120750 949) (120751 950) (120752 951) (120753 952) (120754 953) (120755 954) (120756 955) (120757 956) (120758 957) (120759 958) (120760 959) (120761 960) (120762 961) (120763 962) (120764 963) (120765 964) (120766 965) (120767 966) (120768 967) (120769 968) (120770 969) (120771 8706) (120772 1013) (120773 977) (120774 1008) (120775 981) (120776 1009) (120777 982) (120778 988) (120779 989) (120782 48) (120783 49) (120784 50) (120785 51) (120786 52) (120787 53) (120788 54) (120789 55) (120790 56) (120791 57) (120792 48) (120793 49) (120794 50) (120795 51) (120796 52) (120797 53) (120798 54) (120799 55) (120800 56) (120801 57) (120802 48) (120803 49) (120804 50) (120805 51) (120806 52) (120807 53) (120808 54) (120809 55) (120810 56) (120811 57) (120812 48) (120813 49) (120814 50) (120815 51) (120816 52) (120817 53) (120818 54) (120819 55) (120820 56) (120821 57) (120822 48) (120823 49) (120824 50) (120825 51) (120826 52) (120827 53) (120828 54) (120829 55) (120830 56) (120831 57))) (set! G21799 '((1 820 821 822 823 824 8402 8403 8408 8409 8410 8421 8422 8426 8427 68153 119143 119144 119145) (103 3640 3641) (7 2364 2492 2620 2748 2876 3260 4151 6964 7223) (202 801 802 807 808 7632) (8 12441 12442) (9 2381 2509 2637 2765 2893 3021 3149 3277 3405 3530 3642 3972 4153 4154 5908 5940 6098 6980 7082 43014 43204 43347 68159) (107 3656 3657 3658 3659) (10 1456) (11 1457) (12 1458) (13 1459) (14 1460) (15 1461) (16 1462) (17 1463) (18 1464 1479) (19 1465 1466) (214 7630) (20 1467) (118 3768 3769) (21 1468) (216 795 3897 119141 119142 119150 119151 119152 119153 119154) (22 1469) (23 1471) (218 12330) (24 1473) (122 3784 3785 3786 3787) (25 1474) (220 790 791 792 793 796 797 798 799 800 803 804 805 806 809 810 811 812 813 814 815 816 817 818 819 825 826 827 828 839 840 841 845 846 851 852 853 854 857 858 1425 1430 1435 1442 1443 1444 1445 1446 1447 1450 1477 1621 1622 1628 1763 1770 1773 1841 1844 1847 1848 1849 1851 1852 1854 1858 1860 1862 1864 2034 2386 3864 3865 3893 3895 4038 4237 6459 6680 7020 7618 7626 7631 7679 8424 8428 8429 8430 8431 43307 43308 43309 66045 68109 68154 119163 119164 119165 119166 119167 119168 119169 119170 119178 119179) (26 64286) (27 1611) (222 1434 1453 6457 12333) (28 1612) (29 1613) (224 12334 12335) (30 1560 1614) (31 1561 1615) (226 119149) (129 3953) (32 1562 1616) (130 3954 3962 3963 3964 3965 3968) (33 1617) (228 1454 6313 12331) (34 1618) (132 3956) (35 1648) (230 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 829 830 831 832 833 834 835 836 838 842 843 844 848 849 850 855 859 867 868 869 870 871 872 873 874 875 876 877 878 879 1155 1156 1157 1158 1159 1426 1427 1428 1429 1431 1432 1433 1436 1437 1438 1439 1440 1441 1448 1449 1451 1452 1455 1476 1552 1553 1554 1555 1556 1557 1558 1559 1619 1620 1623 1624 1625 1626 1627 1629 1630 1750 1751 1752 1753 1754 1755 1756 1759 1760 1761 1762 1764 1767 1768 1771 1772 1840 1842 1843 1845 1846 1850 1853 1855 1856 1857 1859 1861 1863 1865 1866 2027 2028 2029 2030 2031 2032 2033 2035 2385 2387 2388 3970 3971 3974 3975 4959 6109 6458 6679 7019 7021 7022 7023 7024 7025 7026 7027 7616 7617 7619 7620 7621 7622 7623 7624 7625 7627 7628 7633 7634 7635 7636 7637 7638 7639 7640 7641 7642 7643 7644 7645 7646 7647 7648 7649 7650 7651 7652 7653 7654 7678 8400 8401 8404 8405 8406 8407 8411 8412 8417 8423 8425 8432 11744 11745 11746 11747 11748 11749 11750 11751 11752 11753 11754 11755 11756 11757 11758 11759 11760 11761 11762 11763 11764 11765 11766 11767 11768 11769 11770 11771 11772 11773 11774 11775 42607 42620 42621 65056 65057 65058 65059 65060 65061 65062 68111 68152 119173 119174 119175 119176 119177 119210 119211 119212 119213 119362 119363 119364) (36 1809) (232 789 794 856 12332) (233 860 863 866) (234 861 862 864 865 7629) (240 837) (84 3157) (91 3158))) (set! G21801 '((192 65 768) (193 65 769) (194 65 770) (195 65 771) (196 65 776) (197 65 778) (199 67 807) (200 69 768) (201 69 769) (202 69 770) (203 69 776) (204 73 768) (205 73 769) (206 73 770) (207 73 776) (209 78 771) (210 79 768) (211 79 769) (212 79 770) (213 79 771) (214 79 776) (217 85 768) (218 85 769) (219 85 770) (220 85 776) (221 89 769) (224 97 768) (225 97 769) (226 97 770) (227 97 771) (228 97 776) (229 97 778) (231 99 807) (232 101 768) (233 101 769) (234 101 770) (235 101 776) (236 105 768) (237 105 769) (238 105 770) (239 105 776) (241 110 771) (242 111 768) (243 111 769) (244 111 770) (245 111 771) (246 111 776) (249 117 768) (250 117 769) (251 117 770) (252 117 776) (253 121 769) (255 121 776) (256 65 772) (257 97 772) (258 65 774) (259 97 774) (260 65 808) (261 97 808) (262 67 769) (263 99 769) (264 67 770) (265 99 770) (266 67 775) (267 99 775) (268 67 780) (269 99 780) (270 68 780) (271 100 780) (274 69 772) (275 101 772) (276 69 774) (277 101 774) (278 69 775) (279 101 775) (280 69 808) (281 101 808) (282 69 780) (283 101 780) (284 71 770) (285 103 770) (286 71 774) (287 103 774) (288 71 775) (289 103 775) (290 71 807) (291 103 807) (292 72 770) (293 104 770) (296 73 771) (297 105 771) (298 73 772) (299 105 772) (300 73 774) (301 105 774) (302 73 808) (303 105 808) (304 73 775) (308 74 770) (309 106 770) (310 75 807) (311 107 807) (313 76 769) (314 108 769) (315 76 807) (316 108 807) (317 76 780) (318 108 780) (323 78 769) (324 110 769) (325 78 807) (326 110 807) (327 78 780) (328 110 780) (332 79 772) (333 111 772) (334 79 774) (335 111 774) (336 79 779) (337 111 779) (340 82 769) (341 114 769) (342 82 807) (343 114 807) (344 82 780) (345 114 780) (346 83 769) (347 115 769) (348 83 770) (349 115 770) (350 83 807) (351 115 807) (352 83 780) (353 115 780) (354 84 807) (355 116 807) (356 84 780) (357 116 780) (360 85 771) (361 117 771) (362 85 772) (363 117 772) (364 85 774) (365 117 774) (366 85 778) (367 117 778) (368 85 779) (369 117 779) (370 85 808) (371 117 808) (372 87 770) (373 119 770) (374 89 770) (375 121 770) (376 89 776) (377 90 769) (378 122 769) (379 90 775) (380 122 775) (381 90 780) (382 122 780) (416 79 795) (417 111 795) (431 85 795) (432 117 795) (461 65 780) (462 97 780) (463 73 780) (464 105 780) (465 79 780) (466 111 780) (467 85 780) (468 117 780) (469 220 772) (470 252 772) (471 220 769) (472 252 769) (473 220 780) (474 252 780) (475 220 768) (476 252 768) (478 196 772) (479 228 772) (480 550 772) (481 551 772) (482 198 772) (483 230 772) (486 71 780) (487 103 780) (488 75 780) (489 107 780) (490 79 808) (491 111 808) (492 490 772) (493 491 772) (494 439 780) (495 658 780) (496 106 780) (500 71 769) (501 103 769) (504 78 768) (505 110 768) (506 197 769) (507 229 769) (508 198 769) (509 230 769) (510 216 769) (511 248 769) (512 65 783) (513 97 783) (514 65 785) (515 97 785) (516 69 783) (517 101 783) (518 69 785) (519 101 785) (520 73 783) (521 105 783) (522 73 785) (523 105 785) (524 79 783) (525 111 783) (526 79 785) (527 111 785) (528 82 783) (529 114 783) (530 82 785) (531 114 785) (532 85 783) (533 117 783) (534 85 785) (535 117 785) (536 83 806) (537 115 806) (538 84 806) (539 116 806) (542 72 780) (543 104 780) (550 65 775) (551 97 775) (552 69 807) (553 101 807) (554 214 772) (555 246 772) (556 213 772) (557 245 772) (558 79 775) (559 111 775) (560 558 772) (561 559 772) (562 89 772) (563 121 772) (832 768) (833 769) (835 787) (836 776 769) (884 697) (894 59) (901 168 769) (902 913 769) (903 183) (904 917 769) (905 919 769) (906 921 769) (908 927 769) (910 933 769) (911 937 769) (912 970 769) (938 921 776) (939 933 776) (940 945 769) (941 949 769) (942 951 769) (943 953 769) (944 971 769) (970 953 776) (971 965 776) (972 959 769) (973 965 769) (974 969 769) (979 978 769) (980 978 776) (1024 1045 768) (1025 1045 776) (1027 1043 769) (1031 1030 776) (1036 1050 769) (1037 1048 768) (1038 1059 774) (1049 1048 774) (1081 1080 774) (1104 1077 768) (1105 1077 776) (1107 1075 769) (1111 1110 776) (1116 1082 769) (1117 1080 768) (1118 1091 774) (1142 1140 783) (1143 1141 783) (1217 1046 774) (1218 1078 774) (1232 1040 774) (1233 1072 774) (1234 1040 776) (1235 1072 776) (1238 1045 774) (1239 1077 774) (1242 1240 776) (1243 1241 776) (1244 1046 776) (1245 1078 776) (1246 1047 776) (1247 1079 776) (1250 1048 772) (1251 1080 772) (1252 1048 776) (1253 1080 776) (1254 1054 776) (1255 1086 776) (1258 1256 776) (1259 1257 776) (1260 1069 776) (1261 1101 776) (1262 1059 772) (1263 1091 772) (1264 1059 776) (1265 1091 776) (1266 1059 779) (1267 1091 779) (1268 1063 776) (1269 1095 776) (1272 1067 776) (1273 1099 776) (1570 1575 1619) (1571 1575 1620) (1572 1608 1620) (1573 1575 1621) (1574 1610 1620) (1728 1749 1620) (1730 1729 1620) (1747 1746 1620) (2345 2344 2364) (2353 2352 2364) (2356 2355 2364) (2392 2325 2364) (2393 2326 2364) (2394 2327 2364) (2395 2332 2364) (2396 2337 2364) (2397 2338 2364) (2398 2347 2364) (2399 2351 2364) (2507 2503 2494) (2508 2503 2519) (2524 2465 2492) (2525 2466 2492) (2527 2479 2492) (2611 2610 2620) (2614 2616 2620) (2649 2582 2620) (2650 2583 2620) (2651 2588 2620) (2654 2603 2620) (2888 2887 2902) (2891 2887 2878) (2892 2887 2903) (2908 2849 2876) (2909 2850 2876) (2964 2962 3031) (3018 3014 3006) (3019 3015 3006) (3020 3014 3031) (3144 3142 3158) (3264 3263 3285) (3271 3270 3285) (3272 3270 3286) (3274 3270 3266) (3275 3274 3285) (3402 3398 3390) (3403 3399 3390) (3404 3398 3415) (3546 3545 3530) (3548 3545 3535) (3549 3548 3530) (3550 3545 3551) (3907 3906 4023) (3917 3916 4023) (3922 3921 4023) (3927 3926 4023) (3932 3931 4023) (3945 3904 4021) (3955 3953 3954) (3957 3953 3956) (3958 4018 3968) (3960 4019 3968) (3969 3953 3968) (3987 3986 4023) (3997 3996 4023) (4002 4001 4023) (4007 4006 4023) (4012 4011 4023) (4025 3984 4021) (4134 4133 4142) (6918 6917 6965) (6920 6919 6965) (6922 6921 6965) (6924 6923 6965) (6926 6925 6965) (6930 6929 6965) (6971 6970 6965) (6973 6972 6965) (6976 6974 6965) (6977 6975 6965) (6979 6978 6965) (7680 65 805) (7681 97 805) (7682 66 775) (7683 98 775) (7684 66 803) (7685 98 803) (7686 66 817) (7687 98 817) (7688 199 769) (7689 231 769) (7690 68 775) (7691 100 775) (7692 68 803) (7693 100 803) (7694 68 817) (7695 100 817) (7696 68 807) (7697 100 807) (7698 68 813) (7699 100 813) (7700 274 768) (7701 275 768) (7702 274 769) (7703 275 769) (7704 69 813) (7705 101 813) (7706 69 816) (7707 101 816) (7708 552 774) (7709 553 774) (7710 70 775) (7711 102 775) (7712 71 772) (7713 103 772) (7714 72 775) (7715 104 775) (7716 72 803) (7717 104 803) (7718 72 776) (7719 104 776) (7720 72 807) (7721 104 807) (7722 72 814) (7723 104 814) (7724 73 816) (7725 105 816) (7726 207 769) (7727 239 769) (7728 75 769) (7729 107 769) (7730 75 803) (7731 107 803) (7732 75 817) (7733 107 817) (7734 76 803) (7735 108 803) (7736 7734 772) (7737 7735 772) (7738 76 817) (7739 108 817) (7740 76 813) (7741 108 813) (7742 77 769) (7743 109 769) (7744 77 775) (7745 109 775) (7746 77 803) (7747 109 803) (7748 78 775) (7749 110 775) (7750 78 803) (7751 110 803) (7752 78 817) (7753 110 817) (7754 78 813) (7755 110 813) (7756 213 769) (7757 245 769) (7758 213 776) (7759 245 776) (7760 332 768) (7761 333 768) (7762 332 769) (7763 333 769) (7764 80 769) (7765 112 769) (7766 80 775) (7767 112 775) (7768 82 775) (7769 114 775) (7770 82 803) (7771 114 803) (7772 7770 772) (7773 7771 772) (7774 82 817) (7775 114 817) (7776 83 775) (7777 115 775) (7778 83 803) (7779 115 803) (7780 346 775) (7781 347 775) (7782 352 775) (7783 353 775) (7784 7778 775) (7785 7779 775) (7786 84 775) (7787 116 775) (7788 84 803) (7789 116 803) (7790 84 817) (7791 116 817) (7792 84 813) (7793 116 813) (7794 85 804) (7795 117 804) (7796 85 816) (7797 117 816) (7798 85 813) (7799 117 813) (7800 360 769) (7801 361 769) (7802 362 776) (7803 363 776) (7804 86 771) (7805 118 771) (7806 86 803) (7807 118 803) (7808 87 768) (7809 119 768) (7810 87 769) (7811 119 769) (7812 87 776) (7813 119 776) (7814 87 775) (7815 119 775) (7816 87 803) (7817 119 803) (7818 88 775) (7819 120 775) (7820 88 776) (7821 120 776) (7822 89 775) (7823 121 775) (7824 90 770) (7825 122 770) (7826 90 803) (7827 122 803) (7828 90 817) (7829 122 817) (7830 104 817) (7831 116 776) (7832 119 778) (7833 121 778) (7835 383 775) (7840 65 803) (7841 97 803) (7842 65 777) (7843 97 777) (7844 194 769) (7845 226 769) (7846 194 768) (7847 226 768) (7848 194 777) (7849 226 777) (7850 194 771) (7851 226 771) (7852 7840 770) (7853 7841 770) (7854 258 769) (7855 259 769) (7856 258 768) (7857 259 768) (7858 258 777) (7859 259 777) (7860 258 771) (7861 259 771) (7862 7840 774) (7863 7841 774) (7864 69 803) (7865 101 803) (7866 69 777) (7867 101 777) (7868 69 771) (7869 101 771) (7870 202 769) (7871 234 769) (7872 202 768) (7873 234 768) (7874 202 777) (7875 234 777) (7876 202 771) (7877 234 771) (7878 7864 770) (7879 7865 770) (7880 73 777) (7881 105 777) (7882 73 803) (7883 105 803) (7884 79 803) (7885 111 803) (7886 79 777) (7887 111 777) (7888 212 769) (7889 244 769) (7890 212 768) (7891 244 768) (7892 212 777) (7893 244 777) (7894 212 771) (7895 244 771) (7896 7884 770) (7897 7885 770) (7898 416 769) (7899 417 769) (7900 416 768) (7901 417 768) (7902 416 777) (7903 417 777) (7904 416 771) (7905 417 771) (7906 416 803) (7907 417 803) (7908 85 803) (7909 117 803) (7910 85 777) (7911 117 777) (7912 431 769) (7913 432 769) (7914 431 768) (7915 432 768) (7916 431 777) (7917 432 777) (7918 431 771) (7919 432 771) (7920 431 803) (7921 432 803) (7922 89 768) (7923 121 768) (7924 89 803) (7925 121 803) (7926 89 777) (7927 121 777) (7928 89 771) (7929 121 771) (7936 945 787) (7937 945 788) (7938 7936 768) (7939 7937 768) (7940 7936 769) (7941 7937 769) (7942 7936 834) (7943 7937 834) (7944 913 787) (7945 913 788) (7946 7944 768) (7947 7945 768) (7948 7944 769) (7949 7945 769) (7950 7944 834) (7951 7945 834) (7952 949 787) (7953 949 788) (7954 7952 768) (7955 7953 768) (7956 7952 769) (7957 7953 769) (7960 917 787) (7961 917 788) (7962 7960 768) (7963 7961 768) (7964 7960 769) (7965 7961 769) (7968 951 787) (7969 951 788) (7970 7968 768) (7971 7969 768) (7972 7968 769) (7973 7969 769) (7974 7968 834) (7975 7969 834) (7976 919 787) (7977 919 788) (7978 7976 768) (7979 7977 768) (7980 7976 769) (7981 7977 769) (7982 7976 834) (7983 7977 834) (7984 953 787) (7985 953 788) (7986 7984 768) (7987 7985 768) (7988 7984 769) (7989 7985 769) (7990 7984 834) (7991 7985 834) (7992 921 787) (7993 921 788) (7994 7992 768) (7995 7993 768) (7996 7992 769) (7997 7993 769) (7998 7992 834) (7999 7993 834) (8000 959 787) (8001 959 788) (8002 8000 768) (8003 8001 768) (8004 8000 769) (8005 8001 769) (8008 927 787) (8009 927 788) (8010 8008 768) (8011 8009 768) (8012 8008 769) (8013 8009 769) (8016 965 787) (8017 965 788) (8018 8016 768) (8019 8017 768) (8020 8016 769) (8021 8017 769) (8022 8016 834) (8023 8017 834) (8025 933 788) (8027 8025 768) (8029 8025 769) (8031 8025 834) (8032 969 787) (8033 969 788) (8034 8032 768) (8035 8033 768) (8036 8032 769) (8037 8033 769) (8038 8032 834) (8039 8033 834) (8040 937 787) (8041 937 788) (8042 8040 768) (8043 8041 768) (8044 8040 769) (8045 8041 769) (8046 8040 834) (8047 8041 834) (8048 945 768) (8049 940) (8050 949 768) (8051 941) (8052 951 768) (8053 942) (8054 953 768) (8055 943) (8056 959 768) (8057 972) (8058 965 768) (8059 973) (8060 969 768) (8061 974) (8064 7936 837) (8065 7937 837) (8066 7938 837) (8067 7939 837) (8068 7940 837) (8069 7941 837) (8070 7942 837) (8071 7943 837) (8072 7944 837) (8073 7945 837) (8074 7946 837) (8075 7947 837) (8076 7948 837) (8077 7949 837) (8078 7950 837) (8079 7951 837) (8080 7968 837) (8081 7969 837) (8082 7970 837) (8083 7971 837) (8084 7972 837) (8085 7973 837) (8086 7974 837) (8087 7975 837) (8088 7976 837) (8089 7977 837) (8090 7978 837) (8091 7979 837) (8092 7980 837) (8093 7981 837) (8094 7982 837) (8095 7983 837) (8096 8032 837) (8097 8033 837) (8098 8034 837) (8099 8035 837) (8100 8036 837) (8101 8037 837) (8102 8038 837) (8103 8039 837) (8104 8040 837) (8105 8041 837) (8106 8042 837) (8107 8043 837) (8108 8044 837) (8109 8045 837) (8110 8046 837) (8111 8047 837) (8112 945 774) (8113 945 772) (8114 8048 837) (8115 945 837) (8116 940 837) (8118 945 834) (8119 8118 837) (8120 913 774) (8121 913 772) (8122 913 768) (8123 902) (8124 913 837) (8126 953) (8129 168 834) (8130 8052 837) (8131 951 837) (8132 942 837) (8134 951 834) (8135 8134 837) (8136 917 768) (8137 904) (8138 919 768) (8139 905) (8140 919 837) (8141 8127 768) (8142 8127 769) (8143 8127 834) (8144 953 774) (8145 953 772) (8146 970 768) (8147 912) (8150 953 834) (8151 970 834) (8152 921 774) (8153 921 772) (8154 921 768) (8155 906) (8157 8190 768) (8158 8190 769) (8159 8190 834) (8160 965 774) (8161 965 772) (8162 971 768) (8163 944) (8164 961 787) (8165 961 788) (8166 965 834) (8167 971 834) (8168 933 774) (8169 933 772) (8170 933 768) (8171 910) (8172 929 788) (8173 168 768) (8174 901) (8175 96) (8178 8060 837) (8179 969 837) (8180 974 837) (8182 969 834) (8183 8182 837) (8184 927 768) (8185 908) (8186 937 768) (8187 911) (8188 937 837) (8189 180) (8192 8194) (8193 8195) (8486 937) (8490 75) (8491 197) (8602 8592 824) (8603 8594 824) (8622 8596 824) (8653 8656 824) (8654 8660 824) (8655 8658 824) (8708 8707 824) (8713 8712 824) (8716 8715 824) (8740 8739 824) (8742 8741 824) (8769 8764 824) (8772 8771 824) (8775 8773 824) (8777 8776 824) (8800 61 824) (8802 8801 824) (8813 8781 824) (8814 60 824) (8815 62 824) (8816 8804 824) (8817 8805 824) (8820 8818 824) (8821 8819 824) (8824 8822 824) (8825 8823 824) (8832 8826 824) (8833 8827 824) (8836 8834 824) (8837 8835 824) (8840 8838 824) (8841 8839 824) (8876 8866 824) (8877 8872 824) (8878 8873 824) (8879 8875 824) (8928 8828 824) (8929 8829 824) (8930 8849 824) (8931 8850 824) (8938 8882 824) (8939 8883 824) (8940 8884 824) (8941 8885 824) (9001 12296) (9002 12297) (10972 10973 824) (12364 12363 12441) (12366 12365 12441) (12368 12367 12441) (12370 12369 12441) (12372 12371 12441) (12374 12373 12441) (12376 12375 12441) (12378 12377 12441) (12380 12379 12441) (12382 12381 12441) (12384 12383 12441) (12386 12385 12441) (12389 12388 12441) (12391 12390 12441) (12393 12392 12441) (12400 12399 12441) (12401 12399 12442) (12403 12402 12441) (12404 12402 12442) (12406 12405 12441) (12407 12405 12442) (12409 12408 12441) (12410 12408 12442) (12412 12411 12441) (12413 12411 12442) (12436 12358 12441) (12446 12445 12441) (12460 12459 12441) (12462 12461 12441) (12464 12463 12441) (12466 12465 12441) (12468 12467 12441) (12470 12469 12441) (12472 12471 12441) (12474 12473 12441) (12476 12475 12441) (12478 12477 12441) (12480 12479 12441) (12482 12481 12441) (12485 12484 12441) (12487 12486 12441) (12489 12488 12441) (12496 12495 12441) (12497 12495 12442) (12499 12498 12441) (12500 12498 12442) (12502 12501 12441) (12503 12501 12442) (12505 12504 12441) (12506 12504 12442) (12508 12507 12441) (12509 12507 12442) (12532 12454 12441) (12535 12527 12441) (12536 12528 12441) (12537 12529 12441) (12538 12530 12441) (12542 12541 12441) (63744 35912) (63745 26356) (63746 36554) (63747 36040) (63748 28369) (63749 20018) (63750 21477) (63751 40860) (63752 40860) (63753 22865) (63754 37329) (63755 21895) (63756 22856) (63757 25078) (63758 30313) (63759 32645) (63760 34367) (63761 34746) (63762 35064) (63763 37007) (63764 27138) (63765 27931) (63766 28889) (63767 29662) (63768 33853) (63769 37226) (63770 39409) (63771 20098) (63772 21365) (63773 27396) (63774 29211) (63775 34349) (63776 40478) (63777 23888) (63778 28651) (63779 34253) (63780 35172) (63781 25289) (63782 33240) (63783 34847) (63784 24266) (63785 26391) (63786 28010) (63787 29436) (63788 37070) (63789 20358) (63790 20919) (63791 21214) (63792 25796) (63793 27347) (63794 29200) (63795 30439) (63796 32769) (63797 34310) (63798 34396) (63799 36335) (63800 38706) (63801 39791) (63802 40442) (63803 30860) (63804 31103) (63805 32160) (63806 33737) (63807 37636) (63808 40575) (63809 35542) (63810 22751) (63811 24324) (63812 31840) (63813 32894) (63814 29282) (63815 30922) (63816 36034) (63817 38647) (63818 22744) (63819 23650) (63820 27155) (63821 28122) (63822 28431) (63823 32047) (63824 32311) (63825 38475) (63826 21202) (63827 32907) (63828 20956) (63829 20940) (63830 31260) (63831 32190) (63832 33777) (63833 38517) (63834 35712) (63835 25295) (63836 27138) (63837 35582) (63838 20025) (63839 23527) (63840 24594) (63841 29575) (63842 30064) (63843 21271) (63844 30971) (63845 20415) (63846 24489) (63847 19981) (63848 27852) (63849 25976) (63850 32034) (63851 21443) (63852 22622) (63853 30465) (63854 33865) (63855 35498) (63856 27578) (63857 36784) (63858 27784) (63859 25342) (63860 33509) (63861 25504) (63862 30053) (63863 20142) (63864 20841) (63865 20937) (63866 26753) (63867 31975) (63868 33391) (63869 35538) (63870 37327) (63871 21237) (63872 21570) (63873 22899) (63874 24300) (63875 26053) (63876 28670) (63877 31018) (63878 38317) (63879 39530) (63880 40599) (63881 40654) (63882 21147) (63883 26310) (63884 27511) (63885 36706) (63886 24180) (63887 24976) (63888 25088) (63889 25754) (63890 28451) (63891 29001) (63892 29833) (63893 31178) (63894 32244) (63895 32879) (63896 36646) (63897 34030) (63898 36899) (63899 37706) (63900 21015) (63901 21155) (63902 21693) (63903 28872) (63904 35010) (63905 35498) (63906 24265) (63907 24565) (63908 25467) (63909 27566) (63910 31806) (63911 29557) (63912 20196) (63913 22265) (63914 23527) (63915 23994) (63916 24604) (63917 29618) (63918 29801) (63919 32666) (63920 32838) (63921 37428) (63922 38646) (63923 38728) (63924 38936) (63925 20363) (63926 31150) (63927 37300) (63928 38584) (63929 24801) (63930 20102) (63931 20698) (63932 23534) (63933 23615) (63934 26009) (63935 27138) (63936 29134) (63937 30274) (63938 34044) (63939 36988) (63940 40845) (63941 26248) (63942 38446) (63943 21129) (63944 26491) (63945 26611) (63946 27969) (63947 28316) (63948 29705) (63949 30041) (63950 30827) (63951 32016) (63952 39006) (63953 20845) (63954 25134) (63955 38520) (63956 20523) (63957 23833) (63958 28138) (63959 36650) (63960 24459) (63961 24900) (63962 26647) (63963 29575) (63964 38534) (63965 21033) (63966 21519) (63967 23653) (63968 26131) (63969 26446) (63970 26792) (63971 27877) (63972 29702) (63973 30178) (63974 32633) (63975 35023) (63976 35041) (63977 37324) (63978 38626) (63979 21311) (63980 28346) (63981 21533) (63982 29136) (63983 29848) (63984 34298) (63985 38563) (63986 40023) (63987 40607) (63988 26519) (63989 28107) (63990 33256) (63991 31435) (63992 31520) (63993 31890) (63994 29376) (63995 28825) (63996 35672) (63997 20160) (63998 33590) (63999 21050) (64000 20999) (64001 24230) (64002 25299) (64003 31958) (64004 23429) (64005 27934) (64006 26292) (64007 36667) (64008 34892) (64009 38477) (64010 35211) (64011 24275) (64012 20800) (64013 21952) (64016 22618) (64018 26228) (64021 20958) (64022 29482) (64023 30410) (64024 31036) (64025 31070) (64026 31077) (64027 31119) (64028 38742) (64029 31934) (64030 32701) (64032 34322) (64034 35576) (64037 36920) (64038 37117) (64042 39151) (64043 39164) (64044 39208) (64045 40372) (64048 20398) (64049 20711) (64050 20813) (64051 21193) (64052 21220) (64053 21329) (64054 21917) (64055 22022) (64056 22120) (64057 22592) (64058 22696) (64059 23652) (64060 23662) (64061 24724) (64062 24936) (64063 24974) (64064 25074) (64065 25935) (64066 26082) (64067 26257) (64068 26757) (64069 28023) (64070 28186) (64071 28450) (64072 29038) (64073 29227) (64074 29730) (64075 30865) (64076 31038) (64077 31049) (64078 31048) (64079 31056) (64080 31062) (64081 31069) (64082 31117) (64083 31118) (64084 31296) (64085 31361) (64086 31680) (64087 32244) (64088 32265) (64089 32321) (64090 32626) (64091 32773) (64092 33261) (64093 33401) (64094 33401) (64095 33879) (64096 35088) (64097 35222) (64098 35585) (64099 35641) (64100 36051) (64101 36104) (64102 36790) (64103 36920) (64104 38627) (64105 38911) (64106 38971) (64112 20006) (64113 20917) (64114 20840) (64115 20352) (64116 20805) (64117 20864) (64118 21191) (64119 21242) (64120 21917) (64121 21845) (64122 21913) (64123 21986) (64124 22618) (64125 22707) (64126 22852) (64127 22868) (64128 23138) (64129 23336) (64130 24274) (64131 24281) (64132 24425) (64133 24493) (64134 24792) (64135 24910) (64136 24840) (64137 24974) (64138 24928) (64139 25074) (64140 25140) (64141 25540) (64142 25628) (64143 25682) (64144 25942) (64145 26228) (64146 26391) (64147 26395) (64148 26454) (64149 27513) (64150 27578) (64151 27969) (64152 28379) (64153 28363) (64154 28450) (64155 28702) (64156 29038) (64157 30631) (64158 29237) (64159 29359) (64160 29482) (64161 29809) (64162 29958) (64163 30011) (64164 30237) (64165 30239) (64166 30410) (64167 30427) (64168 30452) (64169 30538) (64170 30528) (64171 30924) (64172 31409) (64173 31680) (64174 31867) (64175 32091) (64176 32244) (64177 32574) (64178 32773) (64179 33618) (64180 33775) (64181 34681) (64182 35137) (64183 35206) (64184 35222) (64185 35519) (64186 35576) (64187 35531) (64188 35585) (64189 35582) (64190 35565) (64191 35641) (64192 35722) (64193 36104) (64194 36664) (64195 36978) (64196 37273) (64197 37494) (64198 38524) (64199 38627) (64200 38742) (64201 38875) (64202 38911) (64203 38923) (64204 38971) (64205 39698) (64206 40860) (64207 141386) (64208 141380) (64209 144341) (64210 15261) (64211 16408) (64212 16441) (64213 152137) (64214 154832) (64215 163539) (64216 40771) (64217 40846) (64285 1497 1460) (64287 1522 1463) (64298 1513 1473) (64299 1513 1474) (64300 64329 1473) (64301 64329 1474) (64302 1488 1463) (64303 1488 1464) (64304 1488 1468) (64305 1489 1468) (64306 1490 1468) (64307 1491 1468) (64308 1492 1468) (64309 1493 1468) (64310 1494 1468) (64312 1496 1468) (64313 1497 1468) (64314 1498 1468) (64315 1499 1468) (64316 1500 1468) (64318 1502 1468) (64320 1504 1468) (64321 1505 1468) (64323 1507 1468) (64324 1508 1468) (64326 1510 1468) (64327 1511 1468) (64328 1512 1468) (64329 1513 1468) (64330 1514 1468) (64331 1493 1465) (64332 1489 1471) (64333 1499 1471) (64334 1508 1471) (119134 119127 119141) (119135 119128 119141) (119136 119135 119150) (119137 119135 119151) (119138 119135 119152) (119139 119135 119153) (119140 119135 119154) (119227 119225 119141) (119228 119226 119141) (119229 119227 119150) (119230 119228 119150) (119231 119227 119151) (119232 119228 119151) (194560 20029) (194561 20024) (194562 20033) (194563 131362) (194564 20320) (194565 20398) (194566 20411) (194567 20482) (194568 20602) (194569 20633) (194570 20711) (194571 20687) (194572 13470) (194573 132666) (194574 20813) (194575 20820) (194576 20836) (194577 20855) (194578 132380) (194579 13497) (194580 20839) (194581 20877) (194582 132427) (194583 20887) (194584 20900) (194585 20172) (194586 20908) (194587 20917) (194588 168415) (194589 20981) (194590 20995) (194591 13535) (194592 21051) (194593 21062) (194594 21106) (194595 21111) (194596 13589) (194597 21191) (194598 21193) (194599 21220) (194600 21242) (194601 21253) (194602 21254) (194603 21271) (194604 21321) (194605 21329) (194606 21338) (194607 21363) (194608 21373) (194609 21375) (194610 21375) (194611 21375) (194612 133676) (194613 28784) (194614 21450) (194615 21471) (194616 133987) (194617 21483) (194618 21489) (194619 21510) (194620 21662) (194621 21560) (194622 21576) (194623 21608) (194624 21666) (194625 21750) (194626 21776) (194627 21843) (194628 21859) (194629 21892) (194630 21892) (194631 21913) (194632 21931) (194633 21939) (194634 21954) (194635 22294) (194636 22022) (194637 22295) (194638 22097) (194639 22132) (194640 20999) (194641 22766) (194642 22478) (194643 22516) (194644 22541) (194645 22411) (194646 22578) (194647 22577) (194648 22700) (194649 136420) (194650 22770) (194651 22775) (194652 22790) (194653 22810) (194654 22818) (194655 22882) (194656 136872) (194657 136938) (194658 23020) (194659 23067) (194660 23079) (194661 23000) (194662 23142) (194663 14062) (194664 14076) (194665 23304) (194666 23358) (194667 23358) (194668 137672) (194669 23491) (194670 23512) (194671 23527) (194672 23539) (194673 138008) (194674 23551) (194675 23558) (194676 24403) (194677 23586) (194678 14209) (194679 23648) (194680 23662) (194681 23744) (194682 23693) (194683 138724) (194684 23875) (194685 138726) (194686 23918) (194687 23915) (194688 23932) (194689 24033) (194690 24034) (194691 14383) (194692 24061) (194693 24104) (194694 24125) (194695 24169) (194696 14434) (194697 139651) (194698 14460) (194699 24240) (194700 24243) (194701 24246) (194702 24266) (194703 172946) (194704 24318) (194705 140081) (194706 140081) (194707 33281) (194708 24354) (194709 24354) (194710 14535) (194711 144056) (194712 156122) (194713 24418) (194714 24427) (194715 14563) (194716 24474) (194717 24525) (194718 24535) (194719 24569) (194720 24705) (194721 14650) (194722 14620) (194723 24724) (194724 141012) (194725 24775) (194726 24904) (194727 24908) (194728 24910) (194729 24908) (194730 24954) (194731 24974) (194732 25010) (194733 24996) (194734 25007) (194735 25054) (194736 25074) (194737 25078) (194738 25104) (194739 25115) (194740 25181) (194741 25265) (194742 25300) (194743 25424) (194744 142092) (194745 25405) (194746 25340) (194747 25448) (194748 25475) (194749 25572) (194750 142321) (194751 25634) (194752 25541) (194753 25513) (194754 14894) (194755 25705) (194756 25726) (194757 25757) (194758 25719) (194759 14956) (194760 25935) (194761 25964) (194762 143370) (194763 26083) (194764 26360) (194765 26185) (194766 15129) (194767 26257) (194768 15112) (194769 15076) (194770 20882) (194771 20885) (194772 26368) (194773 26268) (194774 32941) (194775 17369) (194776 26391) (194777 26395) (194778 26401) (194779 26462) (194780 26451) (194781 144323) (194782 15177) (194783 26618) (194784 26501) (194785 26706) (194786 26757) (194787 144493) (194788 26766) (194789 26655) (194790 26900) (194791 15261) (194792 26946) (194793 27043) (194794 27114) (194795 27304) (194796 145059) (194797 27355) (194798 15384) (194799 27425) (194800 145575) (194801 27476) (194802 15438) (194803 27506) (194804 27551) (194805 27578) (194806 27579) (194807 146061) (194808 138507) (194809 146170) (194810 27726) (194811 146620) (194812 27839) (194813 27853) (194814 27751) (194815 27926) (194816 27966) (194817 28023) (194818 27969) (194819 28009) (194820 28024) (194821 28037) (194822 146718) (194823 27956) (194824 28207) (194825 28270) (194826 15667) (194827 28363) (194828 28359) (194829 147153) (194830 28153) (194831 28526) (194832 147294) (194833 147342) (194834 28614) (194835 28729) (194836 28702) (194837 28699) (194838 15766) (194839 28746) (194840 28797) (194841 28791) (194842 28845) (194843 132389) (194844 28997) (194845 148067) (194846 29084) (194847 148395) (194848 29224) (194849 29237) (194850 29264) (194851 149000) (194852 29312) (194853 29333) (194854 149301) (194855 149524) (194856 29562) (194857 29579) (194858 16044) (194859 29605) (194860 16056) (194861 16056) (194862 29767) (194863 29788) (194864 29809) (194865 29829) (194866 29898) (194867 16155) (194868 29988) (194869 150582) (194870 30014) (194871 150674) (194872 30064) (194873 139679) (194874 30224) (194875 151457) (194876 151480) (194877 151620) (194878 16380) (194879 16392) (194880 30452) (194881 151795) (194882 151794) (194883 151833) (194884 151859) (194885 30494) (194886 30495) (194887 30495) (194888 30538) (194889 16441) (194890 30603) (194891 16454) (194892 16534) (194893 152605) (194894 30798) (194895 30860) (194896 30924) (194897 16611) (194898 153126) (194899 31062) (194900 153242) (194901 153285) (194902 31119) (194903 31211) (194904 16687) (194905 31296) (194906 31306) (194907 31311) (194908 153980) (194909 154279) (194910 154279) (194911 31470) (194912 16898) (194913 154539) (194914 31686) (194915 31689) (194916 16935) (194917 154752) (194918 31954) (194919 17056) (194920 31976) (194921 31971) (194922 32000) (194923 155526) (194924 32099) (194925 17153) (194926 32199) (194927 32258) (194928 32325) (194929 17204) (194930 156200) (194931 156231) (194932 17241) (194933 156377) (194934 32634) (194935 156478) (194936 32661) (194937 32762) (194938 32773) (194939 156890) (194940 156963) (194941 32864) (194942 157096) (194943 32880) (194944 144223) (194945 17365) (194946 32946) (194947 33027) (194948 17419) (194949 33086) (194950 23221) (194951 157607) (194952 157621) (194953 144275) (194954 144284) (194955 33281) (194956 33284) (194957 36766) (194958 17515) (194959 33425) (194960 33419) (194961 33437) (194962 21171) (194963 33457) (194964 33459) (194965 33469) (194966 33510) (194967 158524) (194968 33509) (194969 33565) (194970 33635) (194971 33709) (194972 33571) (194973 33725) (194974 33767) (194975 33879) (194976 33619) (194977 33738) (194978 33740) (194979 33756) (194980 158774) (194981 159083) (194982 158933) (194983 17707) (194984 34033) (194985 34035) (194986 34070) (194987 160714) (194988 34148) (194989 159532) (194990 17757) (194991 17761) (194992 159665) (194993 159954) (194994 17771) (194995 34384) (194996 34396) (194997 34407) (194998 34409) (194999 34473) (195000 34440) (195001 34574) (195002 34530) (195003 34681) (195004 34600) (195005 34667) (195006 34694) (195007 17879) (195008 34785) (195009 34817) (195010 17913) (195011 34912) (195012 34915) (195013 161383) (195014 35031) (195015 35038) (195016 17973) (195017 35066) (195018 13499) (195019 161966) (195020 162150) (195021 18110) (195022 18119) (195023 35488) (195024 35565) (195025 35722) (195026 35925) (195027 162984) (195028 36011) (195029 36033) (195030 36123) (195031 36215) (195032 163631) (195033 133124) (195034 36299) (195035 36284) (195036 36336) (195037 133342) (195038 36564) (195039 36664) (195040 165330) (195041 165357) (195042 37012) (195043 37105) (195044 37137) (195045 165678) (195046 37147) (195047 37432) (195048 37591) (195049 37592) (195050 37500) (195051 37881) (195052 37909) (195053 166906) (195054 38283) (195055 18837) (195056 38327) (195057 167287) (195058 18918) (195059 38595) (195060 23986) (195061 38691) (195062 168261) (195063 168474) (195064 19054) (195065 19062) (195066 38880) (195067 168970) (195068 19122) (195069 169110) (195070 38923) (195071 38923) (195072 38953) (195073 169398) (195074 39138) (195075 19251) (195076 39209) (195077 39335) (195078 39362) (195079 39422) (195080 19406) (195081 170800) (195082 39698) (195083 40000) (195084 40189) (195085 19662) (195086 19693) (195087 40295) (195088 172238) (195089 19704) (195090 172293) (195091 172558) (195092 172689) (195093 40635) (195094 19798) (195095 40697) (195096 40702) (195097 40709) (195098 40719) (195099 40726) (195100 40763) (195101 173568))) (set! G21803 '((65 97) (66 98) (67 99) (68 100) (69 101) (70 102) (71 103) (72 104) (73 105) (74 106) (75 107) (76 108) (77 109) (78 110) (79 111) (80 112) (81 113) (82 114) (83 115) (84 116) (85 117) (86 118) (87 119) (88 120) (89 121) (90 122) (181 956) (192 224) (193 225) (194 226) (195 227) (196 228) (197 229) (198 230) (199 231) (200 232) (201 233) (202 234) (203 235) (204 236) (205 237) (206 238) (207 239) (208 240) (209 241) (210 242) (211 243) (212 244) (213 245) (214 246) (216 248) (217 249) (218 250) (219 251) (220 252) (221 253) (222 254) (223 115 115) (256 257) (258 259) (260 261) (262 263) (264 265) (266 267) (268 269) (270 271) (272 273) (274 275) (276 277) (278 279) (280 281) (282 283) (284 285) (286 287) (288 289) (290 291) (292 293) (294 295) (296 297) (298 299) (300 301) (302 303) (304 105 775) (306 307) (308 309) (310 311) (313 314) (315 316) (317 318) (319 320) (321 322) (323 324) (325 326) (327 328) (329 700 110) (330 331) (332 333) (334 335) (336 337) (338 339) (340 341) (342 343) (344 345) (346 347) (348 349) (350 351) (352 353) (354 355) (356 357) (358 359) (360 361) (362 363) (364 365) (366 367) (368 369) (370 371) (372 373) (374 375) (376 255) (377 378) (379 380) (381 382) (383 115) (385 595) (386 387) (388 389) (390 596) (391 392) (393 598) (394 599) (395 396) (398 477) (399 601) (400 603) (401 402) (403 608) (404 611) (406 617) (407 616) (408 409) (412 623) (413 626) (415 629) (416 417) (418 419) (420 421) (422 640) (423 424) (425 643) (428 429) (430 648) (431 432) (433 650) (434 651) (435 436) (437 438) (439 658) (440 441) (444 445) (452 454) (453 454) (455 457) (456 457) (458 460) (459 460) (461 462) (463 464) (465 466) (467 468) (469 470) (471 472) (473 474) (475 476) (478 479) (480 481) (482 483) (484 485) (486 487) (488 489) (490 491) (492 493) (494 495) (496 106 780) (497 499) (498 499) (500 501) (502 405) (503 447) (504 505) (506 507) (508 509) (510 511) (512 513) (514 515) (516 517) (518 519) (520 521) (522 523) (524 525) (526 527) (528 529) (530 531) (532 533) (534 535) (536 537) (538 539) (540 541) (542 543) (544 414) (546 547) (548 549) (550 551) (552 553) (554 555) (556 557) (558 559) (560 561) (562 563) (570 11365) (571 572) (573 410) (574 11366) (577 578) (579 384) (580 649) (581 652) (582 583) (584 585) (586 587) (588 589) (590 591) (837 953) (880 881) (882 883) (886 887) (902 940) (904 941) (905 942) (906 943) (908 972) (910 973) (911 974) (912 953 776 769) (913 945) (914 946) (915 947) (916 948) (917 949) (918 950) (919 951) (920 952) (921 953) (922 954) (923 955) (924 956) (925 957) (926 958) (927 959) (928 960) (929 961) (931 963) (932 964) (933 965) (934 966) (935 967) (936 968) (937 969) (938 970) (939 971) (944 965 776 769) (962 963) (975 983) (976 946) (977 952) (981 966) (982 960) (984 985) (986 987) (988 989) (990 991) (992 993) (994 995) (996 997) (998 999) (1000 1001) (1002 1003) (1004 1005) (1006 1007) (1008 954) (1009 961) (1012 952) (1013 949) (1015 1016) (1017 1010) (1018 1019) (1021 891) (1022 892) (1023 893) (1024 1104) (1025 1105) (1026 1106) (1027 1107) (1028 1108) (1029 1109) (1030 1110) (1031 1111) (1032 1112) (1033 1113) (1034 1114) (1035 1115) (1036 1116) (1037 1117) (1038 1118) (1039 1119) (1040 1072) (1041 1073) (1042 1074) (1043 1075) (1044 1076) (1045 1077) (1046 1078) (1047 1079) (1048 1080) (1049 1081) (1050 1082) (1051 1083) (1052 1084) (1053 1085) (1054 1086) (1055 1087) (1056 1088) (1057 1089) (1058 1090) (1059 1091) (1060 1092) (1061 1093) (1062 1094) (1063 1095) (1064 1096) (1065 1097) (1066 1098) (1067 1099) (1068 1100) (1069 1101) (1070 1102) (1071 1103) (1120 1121) (1122 1123) (1124 1125) (1126 1127) (1128 1129) (1130 1131) (1132 1133) (1134 1135) (1136 1137) (1138 1139) (1140 1141) (1142 1143) (1144 1145) (1146 1147) (1148 1149) (1150 1151) (1152 1153) (1162 1163) (1164 1165) (1166 1167) (1168 1169) (1170 1171) (1172 1173) (1174 1175) (1176 1177) (1178 1179) (1180 1181) (1182 1183) (1184 1185) (1186 1187) (1188 1189) (1190 1191) (1192 1193) (1194 1195) (1196 1197) (1198 1199) (1200 1201) (1202 1203) (1204 1205) (1206 1207) (1208 1209) (1210 1211) (1212 1213) (1214 1215) (1216 1231) (1217 1218) (1219 1220) (1221 1222) (1223 1224) (1225 1226) (1227 1228) (1229 1230) (1232 1233) (1234 1235) (1236 1237) (1238 1239) (1240 1241) (1242 1243) (1244 1245) (1246 1247) (1248 1249) (1250 1251) (1252 1253) (1254 1255) (1256 1257) (1258 1259) (1260 1261) (1262 1263) (1264 1265) (1266 1267) (1268 1269) (1270 1271) (1272 1273) (1274 1275) (1276 1277) (1278 1279) (1280 1281) (1282 1283) (1284 1285) (1286 1287) (1288 1289) (1290 1291) (1292 1293) (1294 1295) (1296 1297) (1298 1299) (1300 1301) (1302 1303) (1304 1305) (1306 1307) (1308 1309) (1310 1311) (1312 1313) (1314 1315) (1329 1377) (1330 1378) (1331 1379) (1332 1380) (1333 1381) (1334 1382) (1335 1383) (1336 1384) (1337 1385) (1338 1386) (1339 1387) (1340 1388) (1341 1389) (1342 1390) (1343 1391) (1344 1392) (1345 1393) (1346 1394) (1347 1395) (1348 1396) (1349 1397) (1350 1398) (1351 1399) (1352 1400) (1353 1401) (1354 1402) (1355 1403) (1356 1404) (1357 1405) (1358 1406) (1359 1407) (1360 1408) (1361 1409) (1362 1410) (1363 1411) (1364 1412) (1365 1413) (1366 1414) (1415 1381 1410) (4256 11520) (4257 11521) (4258 11522) (4259 11523) (4260 11524) (4261 11525) (4262 11526) (4263 11527) (4264 11528) (4265 11529) (4266 11530) (4267 11531) (4268 11532) (4269 11533) (4270 11534) (4271 11535) (4272 11536) (4273 11537) (4274 11538) (4275 11539) (4276 11540) (4277 11541) (4278 11542) (4279 11543) (4280 11544) (4281 11545) (4282 11546) (4283 11547) (4284 11548) (4285 11549) (4286 11550) (4287 11551) (4288 11552) (4289 11553) (4290 11554) (4291 11555) (4292 11556) (4293 11557) (7680 7681) (7682 7683) (7684 7685) (7686 7687) (7688 7689) (7690 7691) (7692 7693) (7694 7695) (7696 7697) (7698 7699) (7700 7701) (7702 7703) (7704 7705) (7706 7707) (7708 7709) (7710 7711) (7712 7713) (7714 7715) (7716 7717) (7718 7719) (7720 7721) (7722 7723) (7724 7725) (7726 7727) (7728 7729) (7730 7731) (7732 7733) (7734 7735) (7736 7737) (7738 7739) (7740 7741) (7742 7743) (7744 7745) (7746 7747) (7748 7749) (7750 7751) (7752 7753) (7754 7755) (7756 7757) (7758 7759) (7760 7761) (7762 7763) (7764 7765) (7766 7767) (7768 7769) (7770 7771) (7772 7773) (7774 7775) (7776 7777) (7778 7779) (7780 7781) (7782 7783) (7784 7785) (7786 7787) (7788 7789) (7790 7791) (7792 7793) (7794 7795) (7796 7797) (7798 7799) (7800 7801) (7802 7803) (7804 7805) (7806 7807) (7808 7809) (7810 7811) (7812 7813) (7814 7815) (7816 7817) (7818 7819) (7820 7821) (7822 7823) (7824 7825) (7826 7827) (7828 7829) (7830 104 817) (7831 116 776) (7832 119 778) (7833 121 778) (7834 97 702) (7835 7777) (7838 115 115) (7840 7841) (7842 7843) (7844 7845) (7846 7847) (7848 7849) (7850 7851) (7852 7853) (7854 7855) (7856 7857) (7858 7859) (7860 7861) (7862 7863) (7864 7865) (7866 7867) (7868 7869) (7870 7871) (7872 7873) (7874 7875) (7876 7877) (7878 7879) (7880 7881) (7882 7883) (7884 7885) (7886 7887) (7888 7889) (7890 7891) (7892 7893) (7894 7895) (7896 7897) (7898 7899) (7900 7901) (7902 7903) (7904 7905) (7906 7907) (7908 7909) (7910 7911) (7912 7913) (7914 7915) (7916 7917) (7918 7919) (7920 7921) (7922 7923) (7924 7925) (7926 7927) (7928 7929) (7930 7931) (7932 7933) (7934 7935) (7944 7936) (7945 7937) (7946 7938) (7947 7939) (7948 7940) (7949 7941) (7950 7942) (7951 7943) (7960 7952) (7961 7953) (7962 7954) (7963 7955) (7964 7956) (7965 7957) (7976 7968) (7977 7969) (7978 7970) (7979 7971) (7980 7972) (7981 7973) (7982 7974) (7983 7975) (7992 7984) (7993 7985) (7994 7986) (7995 7987) (7996 7988) (7997 7989) (7998 7990) (7999 7991) (8008 8000) (8009 8001) (8010 8002) (8011 8003) (8012 8004) (8013 8005) (8016 965 787) (8018 965 787 768) (8020 965 787 769) (8022 965 787 834) (8025 8017) (8027 8019) (8029 8021) (8031 8023) (8040 8032) (8041 8033) (8042 8034) (8043 8035) (8044 8036) (8045 8037) (8046 8038) (8047 8039) (8064 7936 953) (8065 7937 953) (8066 7938 953) (8067 7939 953) (8068 7940 953) (8069 7941 953) (8070 7942 953) (8071 7943 953) (8072 7936 953) (8073 7937 953) (8074 7938 953) (8075 7939 953) (8076 7940 953) (8077 7941 953) (8078 7942 953) (8079 7943 953) (8080 7968 953) (8081 7969 953) (8082 7970 953) (8083 7971 953) (8084 7972 953) (8085 7973 953) (8086 7974 953) (8087 7975 953) (8088 7968 953) (8089 7969 953) (8090 7970 953) (8091 7971 953) (8092 7972 953) (8093 7973 953) (8094 7974 953) (8095 7975 953) (8096 8032 953) (8097 8033 953) (8098 8034 953) (8099 8035 953) (8100 8036 953) (8101 8037 953) (8102 8038 953) (8103 8039 953) (8104 8032 953) (8105 8033 953) (8106 8034 953) (8107 8035 953) (8108 8036 953) (8109 8037 953) (8110 8038 953) (8111 8039 953) (8114 8048 953) (8115 945 953) (8116 940 953) (8118 945 834) (8119 945 834 953) (8120 8112) (8121 8113) (8122 8048) (8123 8049) (8124 945 953) (8126 953) (8130 8052 953) (8131 951 953) (8132 942 953) (8134 951 834) (8135 951 834 953) (8136 8050) (8137 8051) (8138 8052) (8139 8053) (8140 951 953) (8146 953 776 768) (8147 953 776 769) (8150 953 834) (8151 953 776 834) (8152 8144) (8153 8145) (8154 8054) (8155 8055) (8162 965 776 768) (8163 965 776 769) (8164 961 787) (8166 965 834) (8167 965 776 834) (8168 8160) (8169 8161) (8170 8058) (8171 8059) (8172 8165) (8178 8060 953) (8179 969 953) (8180 974 953) (8182 969 834) (8183 969 834 953) (8184 8056) (8185 8057) (8186 8060) (8187 8061) (8188 969 953) (8486 969) (8490 107) (8491 229) (8498 8526) (8544 8560) (8545 8561) (8546 8562) (8547 8563) (8548 8564) (8549 8565) (8550 8566) (8551 8567) (8552 8568) (8553 8569) (8554 8570) (8555 8571) (8556 8572) (8557 8573) (8558 8574) (8559 8575) (8579 8580) (9398 9424) (9399 9425) (9400 9426) (9401 9427) (9402 9428) (9403 9429) (9404 9430) (9405 9431) (9406 9432) (9407 9433) (9408 9434) (9409 9435) (9410 9436) (9411 9437) (9412 9438) (9413 9439) (9414 9440) (9415 9441) (9416 9442) (9417 9443) (9418 9444) (9419 9445) (9420 9446) (9421 9447) (9422 9448) (9423 9449) (11264 11312) (11265 11313) (11266 11314) (11267 11315) (11268 11316) (11269 11317) (11270 11318) (11271 11319) (11272 11320) (11273 11321) (11274 11322) (11275 11323) (11276 11324) (11277 11325) (11278 11326) (11279 11327) (11280 11328) (11281 11329) (11282 11330) (11283 11331) (11284 11332) (11285 11333) (11286 11334) (11287 11335) (11288 11336) (11289 11337) (11290 11338) (11291 11339) (11292 11340) (11293 11341) (11294 11342) (11295 11343) (11296 11344) (11297 11345) (11298 11346) (11299 11347) (11300 11348) (11301 11349) (11302 11350) (11303 11351) (11304 11352) (11305 11353) (11306 11354) (11307 11355) (11308 11356) (11309 11357) (11310 11358) (11360 11361) (11362 619) (11363 7549) (11364 637) (11367 11368) (11369 11370) (11371 11372) (11373 593) (11374 625) (11375 592) (11378 11379) (11381 11382) (11392 11393) (11394 11395) (11396 11397) (11398 11399) (11400 11401) (11402 11403) (11404 11405) (11406 11407) (11408 11409) (11410 11411) (11412 11413) (11414 11415) (11416 11417) (11418 11419) (11420 11421) (11422 11423) (11424 11425) (11426 11427) (11428 11429) (11430 11431) (11432 11433) (11434 11435) (11436 11437) (11438 11439) (11440 11441) (11442 11443) (11444 11445) (11446 11447) (11448 11449) (11450 11451) (11452 11453) (11454 11455) (11456 11457) (11458 11459) (11460 11461) (11462 11463) (11464 11465) (11466 11467) (11468 11469) (11470 11471) (11472 11473) (11474 11475) (11476 11477) (11478 11479) (11480 11481) (11482 11483) (11484 11485) (11486 11487) (11488 11489) (11490 11491) (42560 42561) (42562 42563) (42564 42565) (42566 42567) (42568 42569) (42570 42571) (42572 42573) (42574 42575) (42576 42577) (42578 42579) (42580 42581) (42582 42583) (42584 42585) (42586 42587) (42588 42589) (42590 42591) (42594 42595) (42596 42597) (42598 42599) (42600 42601) (42602 42603) (42604 42605) (42624 42625) (42626 42627) (42628 42629) (42630 42631) (42632 42633) (42634 42635) (42636 42637) (42638 42639) (42640 42641) (42642 42643) (42644 42645) (42646 42647) (42786 42787) (42788 42789) (42790 42791) (42792 42793) (42794 42795) (42796 42797) (42798 42799) (42802 42803) (42804 42805) (42806 42807) (42808 42809) (42810 42811) (42812 42813) (42814 42815) (42816 42817) (42818 42819) (42820 42821) (42822 42823) (42824 42825) (42826 42827) (42828 42829) (42830 42831) (42832 42833) (42834 42835) (42836 42837) (42838 42839) (42840 42841) (42842 42843) (42844 42845) (42846 42847) (42848 42849) (42850 42851) (42852 42853) (42854 42855) (42856 42857) (42858 42859) (42860 42861) (42862 42863) (42873 42874) (42875 42876) (42877 7545) (42878 42879) (42880 42881) (42882 42883) (42884 42885) (42886 42887) (42891 42892) (64256 102 102) (64257 102 105) (64258 102 108) (64259 102 102 105) (64260 102 102 108) (64261 115 116) (64262 115 116) (64275 1396 1398) (64276 1396 1381) (64277 1396 1387) (64278 1406 1398) (64279 1396 1389) (65313 65345) (65314 65346) (65315 65347) (65316 65348) (65317 65349) (65318 65350) (65319 65351) (65320 65352) (65321 65353) (65322 65354) (65323 65355) (65324 65356) (65325 65357) (65326 65358) (65327 65359) (65328 65360) (65329 65361) (65330 65362) (65331 65363) (65332 65364) (65333 65365) (65334 65366) (65335 65367) (65336 65368) (65337 65369) (65338 65370) (66560 66600) (66561 66601) (66562 66602) (66563 66603) (66564 66604) (66565 66605) (66566 66606) (66567 66607) (66568 66608) (66569 66609) (66570 66610) (66571 66611) (66572 66612) (66573 66613) (66574 66614) (66575 66615) (66576 66616) (66577 66617) (66578 66618) (66579 66619) (66580 66620) (66581 66621) (66582 66622) (66583 66623) (66584 66624) (66585 66625) (66586 66626) (66587 66627) (66588 66628) (66589 66629) (66590 66630) (66591 66631) (66592 66632) (66593 66633) (66594 66634) (66595 66635) (66596 66636) (66597 66637) (66598 66638) (66599 66639))) (set! G21805 '((223 223) (304 105 775) (64256 64256) (64257 64257) (64258 64258) (64259 64259) (64260 64260) (64261 64261) (64262 64262) (1415 1415) (64275 64275) (64276 64276) (64277 64277) (64278 64278) (64279 64279) (329 329) (912 912) (944 944) (496 496) (7830 7830) (7831 7831) (7832 7832) (7833 7833) (7834 7834) (8016 8016) (8018 8018) (8020 8020) (8022 8022) (8118 8118) (8134 8134) (8146 8146) (8147 8147) (8150 8150) (8151 8151) (8162 8162) (8163 8163) (8164 8164) (8166 8166) (8167 8167) (8182 8182) (837 837) (8064 8064) (8065 8065) (8066 8066) (8067 8067) (8068 8068) (8069 8069) (8070 8070) (8071 8071) (8072 8064) (8073 8065) (8074 8066) (8075 8067) (8076 8068) (8077 8069) (8078 8070) (8079 8071) (8080 8080) (8081 8081) (8082 8082) (8083 8083) (8084 8084) (8085 8085) (8086 8086) (8087 8087) (8088 8080) (8089 8081) (8090 8082) (8091 8083) (8092 8084) (8093 8085) (8094 8086) (8095 8087) (8096 8096) (8097 8097) (8098 8098) (8099 8099) (8100 8100) (8101 8101) (8102 8102) (8103 8103) (8104 8096) (8105 8097) (8106 8098) (8107 8099) (8108 8100) (8109 8101) (8110 8102) (8111 8103) (8115 8115) (8124 8115) (8131 8131) (8140 8131) (8179 8179) (8188 8179) (8114 8114) (8116 8116) (8130 8130) (8132 8132) (8178 8178) (8180 8180) (8119 8119) (8135 8135) (8183 8183) (931 963) (963 963) (962 962))) (set! G21807 '((223 83 115) (304 304) (64256 70 102) (64257 70 105) (64258 70 108) (64259 70 102 105) (64260 70 102 108) (64261 83 116) (64262 83 116) (1415 1333 1410) (64275 1348 1398) (64276 1348 1381) (64277 1348 1387) (64278 1358 1398) (64279 1348 1389) (329 700 78) (912 921 776 769) (944 933 776 769) (496 74 780) (7830 72 817) (7831 84 776) (7832 87 778) (7833 89 778) (7834 65 702) (8016 933 787) (8018 933 787 768) (8020 933 787 769) (8022 933 787 834) (8118 913 834) (8134 919 834) (8146 921 776 768) (8147 921 776 769) (8150 921 834) (8151 921 776 834) (8162 933 776 768) (8163 933 776 769) (8164 929 787) (8166 933 834) (8167 933 776 834) (8182 937 834) (837 837) (8064 8072) (8065 8073) (8066 8074) (8067 8075) (8068 8076) (8069 8077) (8070 8078) (8071 8079) (8072 8072) (8073 8073) (8074 8074) (8075 8075) (8076 8076) (8077 8077) (8078 8078) (8079 8079) (8080 8088) (8081 8089) (8082 8090) (8083 8091) (8084 8092) (8085 8093) (8086 8094) (8087 8095) (8088 8088) (8089 8089) (8090 8090) (8091 8091) (8092 8092) (8093 8093) (8094 8094) (8095 8095) (8096 8104) (8097 8105) (8098 8106) (8099 8107) (8100 8108) (8101 8109) (8102 8110) (8103 8111) (8104 8104) (8105 8105) (8106 8106) (8107 8107) (8108 8108) (8109 8109) (8110 8110) (8111 8111) (8115 8124) (8124 8124) (8131 8140) (8140 8140) (8179 8188) (8188 8188) (8114 8122 837) (8116 902 837) (8130 8138 837) (8132 905 837) (8178 8186 837) (8180 911 837) (8119 913 834 837) (8135 919 834 837) (8183 937 834 837) (931 931) (963 931) (962 931))) (set! G21809 '((9 . 13) 32 133 160 5760 6158 (8192 . 8202) 8232 8233 8239 8287 12288)) (set! G21811 '(837 (1456 . 1469) 1471 (1473 . 1474) (1476 . 1477) 1479 (1552 . 1562) (1611 . 1623) (1625 . 1630) 1648 (1750 . 1756) (1761 . 1764) (1767 . 1768) 1773 1809 (1840 . 1855) (1958 . 1968) (2305 . 2306) 2307 (2366 . 2368) (2369 . 2376) (2377 . 2380) (2402 . 2403) 2433 (2434 . 2435) (2494 . 2496) (2497 . 2500) (2503 . 2504) (2507 . 2508) 2519 (2530 . 2531) (2561 . 2562) 2563 (2622 . 2624) (2625 . 2626) (2631 . 2632) (2635 . 2636) 2641 (2672 . 2673) 2677 (2689 . 2690) 2691 (2750 . 2752) (2753 . 2757) (2759 . 2760) 2761 (2763 . 2764) (2786 . 2787) 2817 (2818 . 2819) 2878 2879 2880 (2881 . 2884) (2887 . 2888) (2891 . 2892) 2902 2903 (2914 . 2915) 2946 (3006 . 3007) 3008 (3009 . 3010) (3014 . 3016) (3018 . 3020) 3031 (3073 . 3075) (3134 . 3136) (3137 . 3140) (3142 . 3144) (3146 . 3148) (3157 . 3158) (3170 . 3171) (3202 . 3203) 3262 3263 (3264 . 3268) 3270 (3271 . 3272) (3274 . 3275) 3276 (3285 . 3286) (3298 . 3299) (3330 . 3331) (3390 . 3392) (3393 . 3396) (3398 . 3400) (3402 . 3404) 3415 (3426 . 3427) (3458 . 3459) (3535 . 3537) (3538 . 3540) 3542 (3544 . 3551) (3570 . 3571) 3633 (3636 . 3642) 3661 3761 (3764 . 3769) (3771 . 3772) 3789 (3953 . 3966) 3967 (3968 . 3969) (3984 . 3991) (3993 . 4028) (4139 . 4140) (4141 . 4144) 4145 (4146 . 4150) 4152 (4155 . 4156) (4157 . 4158) (4182 . 4183) (4184 . 4185) (4190 . 4192) 4194 (4199 . 4200) (4209 . 4212) 4226 (4227 . 4228) (4229 . 4230) 4959 (5906 . 5907) (5938 . 5939) (5970 . 5971) (6002 . 6003) 6070 (6071 . 6077) (6078 . 6085) 6086 (6087 . 6088) 6313 (6432 . 6434) (6435 . 6438) (6439 . 6440) (6441 . 6443) (6448 . 6449) 6450 (6451 . 6456) (6576 . 6592) (6600 . 6601) (6679 . 6680) (6681 . 6683) (6912 . 6915) 6916 6965 (6966 . 6970) 6971 6972 (6973 . 6977) 6978 6979 (7040 . 7041) 7042 7073 (7074 . 7077) (7078 . 7079) (7080 . 7081) (7204 . 7211) (7212 . 7219) (7220 . 7221) (9398 . 9449) (11744 . 11775) (43043 . 43044) (43045 . 43046) 43047 (43136 . 43137) (43188 . 43203) (43302 . 43306) (43335 . 43345) 43346 (43561 . 43566) (43567 . 43568) (43569 . 43570) (43571 . 43572) (43573 . 43574) 43587 43596 43597 64286 (68097 . 68099) (68101 . 68102) (68108 . 68111))) (set! G21813 '((8544 . 8559) (9398 . 9423))) (set! G21815 '((688 . 696) (704 . 705) (736 . 740) 837 890 (7468 . 7521) 7544 (7579 . 7615) (8336 . 8340) (8560 . 8575) (9424 . 9449) 11389 42864)) (set! G21817 '((Zl 8232) (Po (33 . 35) (37 . 39) 42 44 (46 . 47) (58 . 59) (63 . 64) 92 161 183 191 894 903 (1370 . 1375) 1417 1472 1475 1478 (1523 . 1524) (1545 . 1546) (1548 . 1549) 1563 (1566 . 1567) (1642 . 1645) 1748 (1792 . 1805) (2039 . 2041) (2404 . 2405) 2416 3572 3663 (3674 . 3675) (3844 . 3858) 3973 (4048 . 4052) (4170 . 4175) 4347 (4961 . 4968) (5741 . 5742) (5867 . 5869) (5941 . 5942) (6100 . 6102) (6104 . 6106) (6144 . 6149) (6151 . 6154) (6468 . 6469) (6622 . 6623) (6686 . 6687) (7002 . 7008) (7227 . 7231) (7294 . 7295) (8214 . 8215) (8224 . 8231) (8240 . 8248) (8251 . 8254) (8257 . 8259) (8263 . 8273) 8275 (8277 . 8286) (11513 . 11516) (11518 . 11519) (11776 . 11777) (11782 . 11784) 11787 (11790 . 11798) (11800 . 11801) 11803 (11806 . 11807) (11818 . 11822) 11824 (12289 . 12291) 12349 12539 (42509 . 42511) 42611 42622 (43124 . 43127) (43214 . 43215) (43310 . 43311) 43359 (43612 . 43615) (65040 . 65046) 65049 65072 (65093 . 65094) (65097 . 65100) (65104 . 65106) (65108 . 65111) (65119 . 65121) 65128 (65130 . 65131) (65281 . 65283) (65285 . 65287) 65290 65292 (65294 . 65295) (65306 . 65307) (65311 . 65312) 65340 65377 (65380 . 65381) (65792 . 65793) 66463 66512 67871 67903 (68176 . 68184) (74864 . 74867)) (Pc 95 (8255 . 8256) 8276 (65075 . 65076) (65101 . 65103) 65343) (Lt 453 456 459 498 (8072 . 8079) (8088 . 8095) (8104 . 8111) 8124 8140 8188) (Pi 171 8216 (8219 . 8220) 8223 8249 11778 11780 11785 11788 11804 11808) (Cc (0 . 31) (127 . 159)) (Nd (48 . 57) (1632 . 1641) (1776 . 1785) (1984 . 1993) (2406 . 2415) (2534 . 2543) (2662 . 2671) (2790 . 2799) (2918 . 2927) (3046 . 3055) (3174 . 3183) (3302 . 3311) (3430 . 3439) (3664 . 3673) (3792 . 3801) (3872 . 3881) (4160 . 4169) (4240 . 4249) (6112 . 6121) (6160 . 6169) (6470 . 6479) (6608 . 6617) (6992 . 7001) (7088 . 7097) (7232 . 7241) (7248 . 7257) (42528 . 42537) (43216 . 43225) (43264 . 43273) (43600 . 43609) (65296 . 65305) (66720 . 66729) (120782 . 120831)) (Mn (768 . 879) (1155 . 1159) (1425 . 1469) 1471 (1473 . 1474) (1476 . 1477) 1479 (1552 . 1562) (1611 . 1630) 1648 (1750 . 1756) (1759 . 1764) (1767 . 1768) (1770 . 1773) 1809 (1840 . 1866) (1958 . 1968) (2027 . 2035) (2305 . 2306) 2364 (2369 . 2376) 2381 (2385 . 2388) (2402 . 2403) 2433 2492 (2497 . 2500) 2509 (2530 . 2531) (2561 . 2562) 2620 (2625 . 2626) (2631 . 2632) (2635 . 2637) 2641 (2672 . 2673) 2677 (2689 . 2690) 2748 (2753 . 2757) (2759 . 2760) 2765 (2786 . 2787) 2817 2876 2879 (2881 . 2884) 2893 2902 (2914 . 2915) 2946 3008 3021 (3134 . 3136) (3142 . 3144) (3146 . 3149) (3157 . 3158) (3170 . 3171) 3260 3263 3270 (3276 . 3277) (3298 . 3299) (3393 . 3396) 3405 (3426 . 3427) 3530 (3538 . 3540) 3542 3633 (3636 . 3642) (3655 . 3662) 3761 (3764 . 3769) (3771 . 3772) (3784 . 3789) (3864 . 3865) 3893 3895 3897 (3953 . 3966) (3968 . 3972) (3974 . 3975) (3984 . 3991) (3993 . 4028) 4038 (4141 . 4144) (4146 . 4151) (4153 . 4154) (4157 . 4158) (4184 . 4185) (4190 . 4192) (4209 . 4212) 4226 (4229 . 4230) 4237 4959 (5906 . 5908) (5938 . 5940) (5970 . 5971) (6002 . 6003) (6071 . 6077) 6086 (6089 . 6099) 6109 (6155 . 6157) 6313 (6432 . 6434) (6439 . 6440) 6450 (6457 . 6459) (6679 . 6680) (6912 . 6915) 6964 (6966 . 6970) 6972 6978 (7019 . 7027) (7040 . 7041) (7074 . 7077) (7080 . 7081) (7212 . 7219) (7222 . 7223) (7616 . 7654) (7678 . 7679) (8400 . 8412) 8417 (8421 . 8432) (11744 . 11775) (12330 . 12335) (12441 . 12442) 42607 (42620 . 42621) 43010 43014 43019 (43045 . 43046) 43204 (43302 . 43309) (43335 . 43345) (43561 . 43566) (43569 . 43570) (43573 . 43574) 43587 43596 64286 (65024 . 65039) (65056 . 65062) 66045 (68097 . 68099) (68101 . 68102) (68108 . 68111) (68152 . 68154) 68159 (119143 . 119145) (119163 . 119170) (119173 . 119179) (119210 . 119213) (119362 . 119364) (917760 . 917999)) (Me (1160 . 1161) 1758 (8413 . 8416) (8418 . 8420) (42608 . 42610)) (Sc 36 (162 . 165) 1547 (2546 . 2547) 2801 3065 3647 6107 (8352 . 8373) 65020 65129 65284 (65504 . 65505) (65509 . 65510)) (Cs 55296 (56191 . 56192) (56319 . 56320) 57343) (Cf 173 (1536 . 1539) 1757 1807 (6068 . 6069) (8203 . 8207) (8234 . 8238) (8288 . 8292) (8298 . 8303) 65279 (65529 . 65531) (119155 . 119162) 917505 (917536 . 917631)) (So (166 . 167) 169 174 176 182 1154 (1550 . 1551) 1769 (1789 . 1790) 2038 2554 2928 (3059 . 3064) 3066 3199 (3313 . 3314) 3449 (3841 . 3843) (3859 . 3863) (3866 . 3871) 3892 3894 3896 (4030 . 4037) (4039 . 4044) (4046 . 4047) (4254 . 4255) 4960 (5008 . 5017) 6464 (6624 . 6655) (7009 . 7018) (7028 . 7036) (8448 . 8449) (8451 . 8454) (8456 . 8457) 8468 (8470 . 8472) (8478 . 8483) 8485 8487 8489 8494 (8506 . 8507) 8522 (8524 . 8525) 8527 (8597 . 8601) (8604 . 8607) (8609 . 8610) (8612 . 8613) (8615 . 8621) (8623 . 8653) (8656 . 8657) 8659 (8661 . 8691) (8960 . 8967) (8972 . 8991) (8994 . 9000) (9003 . 9083) (9085 . 9114) (9140 . 9179) (9186 . 9191) (9216 . 9254) (9280 . 9290) (9372 . 9449) (9472 . 9654) (9656 . 9664) (9666 . 9719) (9728 . 9838) (9840 . 9885) (9888 . 9916) (9920 . 9923) (9985 . 9988) (9990 . 9993) (9996 . 10023) (10025 . 10059) 10061 (10063 . 10066) 10070 (10072 . 10078) (10081 . 10087) 10132 (10136 . 10159) (10161 . 10174) (10240 . 10495) (11008 . 11055) (11077 . 11078) (11088 . 11092) (11493 . 11498) (11904 . 11929) (11931 . 12019) (12032 . 12245) (12272 . 12283) 12292 (12306 . 12307) 12320 (12342 . 12343) (12350 . 12351) (12688 . 12689) (12694 . 12703) (12736 . 12771) (12800 . 12830) (12842 . 12867) 12880 (12896 . 12927) (12938 . 12976) (12992 . 13054) (13056 . 13311) (19904 . 19967) (42128 . 42182) (43048 . 43051) 65021 65508 65512 (65517 . 65518) (65532 . 65533) 65794 (65847 . 65855) (65913 . 65929) (65936 . 65947) (66000 . 66044) (118784 . 119029) (119040 . 119078) (119081 . 119140) (119146 . 119148) (119171 . 119172) (119180 . 119209) (119214 . 119261) (119296 . 119361) 119365 (119552 . 119638) (126976 . 127019) (127024 . 127123)) (Zs 32 160 5760 6158 (8192 . 8202) 8239 8287 12288) (Sm 43 (60 . 62) 124 126 172 177 215 247 1014 (1542 . 1544) 8260 8274 (8314 . 8316) (8330 . 8332) (8512 . 8516) 8523 (8592 . 8596) (8602 . 8603) 8608 8611 8614 8622 (8654 . 8655) 8658 8660 (8692 . 8959) (8968 . 8971) (8992 . 8993) 9084 (9115 . 9139) (9180 . 9185) 9655 9665 (9720 . 9727) 9839 (10176 . 10180) (10183 . 10186) 10188 (10192 . 10213) (10224 . 10239) (10496 . 10626) (10649 . 10711) (10716 . 10747) (10750 . 11007) (11056 . 11076) (11079 . 11084) 64297 65122 (65124 . 65126) 65291 (65308 . 65310) 65372 65374 65506 (65513 . 65516) 120513 120539 120571 120597 120629 120655 120687 120713 120745 120771) (Mc 2307 (2366 . 2368) (2377 . 2380) (2434 . 2435) (2494 . 2496) (2503 . 2504) (2507 . 2508) 2519 2563 (2622 . 2624) 2691 (2750 . 2752) 2761 (2763 . 2764) (2818 . 2819) 2878 2880 (2887 . 2888) (2891 . 2892) 2903 (3006 . 3007) (3009 . 3010) (3014 . 3016) (3018 . 3020) 3031 (3073 . 3075) (3137 . 3140) (3202 . 3203) 3262 (3264 . 3268) (3271 . 3272) (3274 . 3275) (3285 . 3286) (3330 . 3331) (3390 . 3392) (3398 . 3400) (3402 . 3404) 3415 (3458 . 3459) (3535 . 3537) (3544 . 3551) (3570 . 3571) (3902 . 3903) 3967 (4139 . 4140) 4145 4152 (4155 . 4156) (4182 . 4183) (4194 . 4196) (4199 . 4205) (4227 . 4228) (4231 . 4236) 4239 6070 (6078 . 6085) (6087 . 6088) (6435 . 6438) (6441 . 6443) (6448 . 6449) (6451 . 6456) (6576 . 6592) (6600 . 6601) (6681 . 6683) 6916 6965 6971 (6973 . 6977) (6979 . 6980) 7042 7073 (7078 . 7079) 7082 (7204 . 7211) (7220 . 7221) (43043 . 43044) 43047 (43136 . 43137) (43188 . 43203) (43346 . 43347) (43567 . 43568) (43571 . 43572) 43597 (119141 . 119142) (119149 . 119154)) (Sk 94 96 168 175 180 184 (706 . 709) (722 . 735) (741 . 747) 749 (751 . 767) 885 (900 . 901) 8125 (8127 . 8129) (8141 . 8143) (8157 . 8159) (8173 . 8175) (8189 . 8190) (12443 . 12444) (42752 . 42774) (42784 . 42785) (42889 . 42890) 65342 65344 65507) (Lm (688 . 705) (710 . 721) (736 . 740) 748 750 884 890 1369 1600 (1765 . 1766) (2036 . 2037) 2042 2417 3654 3782 4348 6103 6211 (7288 . 7293) (7468 . 7521) 7544 (7579 . 7615) (8336 . 8340) 11389 11631 11823 12293 (12337 . 12341) 12347 (12445 . 12446) (12540 . 12542) 40981 42508 42623 (42775 . 42783) 42864 42888 65392 (65438 . 65439)) (Pe 41 93 125 3899 3901 5788 8262 8318 8334 9002 10089 10091 10093 10095 10097 10099 10101 10182 10215 10217 10219 10221 10223 10628 10630 10632 10634 10636 10638 10640 10642 10644 10646 10648 10713 10715 10749 11811 11813 11815 11817 12297 12299 12301 12303 12305 12309 12311 12313 12315 (12318 . 12319) 64831 65048 65078 65080 65082 65084 65086 65088 65090 65092 65096 65114 65116 65118 65289 65341 65373 65376 65379) (Lo 443 (448 . 451) 660 (1488 . 1514) (1520 . 1522) (1569 . 1599) (1601 . 1610) (1646 . 1647) (1649 . 1747) 1749 (1774 . 1775) (1786 . 1788) 1791 1808 (1810 . 1839) (1869 . 1957) 1969 (1994 . 2026) (2308 . 2361) 2365 2384 (2392 . 2401) 2418 (2427 . 2431) (2437 . 2444) (2447 . 2448) (2451 . 2472) (2474 . 2480) 2482 (2486 . 2489) 2493 2510 (2524 . 2525) (2527 . 2529) (2544 . 2545) (2565 . 2570) (2575 . 2576) (2579 . 2600) (2602 . 2608) (2610 . 2611) (2613 . 2614) (2616 . 2617) (2649 . 2652) 2654 (2674 . 2676) (2693 . 2701) (2703 . 2705) (2707 . 2728) (2730 . 2736) (2738 . 2739) (2741 . 2745) 2749 2768 (2784 . 2785) (2821 . 2828) (2831 . 2832) (2835 . 2856) (2858 . 2864) (2866 . 2867) (2869 . 2873) 2877 (2908 . 2909) (2911 . 2913) 2929 2947 (2949 . 2954) (2958 . 2960) (2962 . 2965) (2969 . 2970) 2972 (2974 . 2975) (2979 . 2980) (2984 . 2986) (2990 . 3001) 3024 (3077 . 3084) (3086 . 3088) (3090 . 3112) (3114 . 3123) (3125 . 3129) 3133 (3160 . 3161) (3168 . 3169) (3205 . 3212) (3214 . 3216) (3218 . 3240) (3242 . 3251) (3253 . 3257) 3261 3294 (3296 . 3297) (3333 . 3340) (3342 . 3344) (3346 . 3368) (3370 . 3385) 3389 (3424 . 3425) (3450 . 3455) (3461 . 3478) (3482 . 3505) (3507 . 3515) 3517 (3520 . 3526) (3585 . 3632) (3634 . 3635) (3648 . 3653) (3713 . 3714) 3716 (3719 . 3720) 3722 3725 (3732 . 3735) (3737 . 3743) (3745 . 3747) 3749 3751 (3754 . 3755) (3757 . 3760) (3762 . 3763) 3773 (3776 . 3780) (3804 . 3805) 3840 (3904 . 3911) (3913 . 3948) (3976 . 3979) (4096 . 4138) 4159 (4176 . 4181) (4186 . 4189) 4193 (4197 . 4198) (4206 . 4208) (4213 . 4225) 4238 (4304 . 4346) (4352 . 4441) (4447 . 4514) (4520 . 4601) (4608 . 4680) (4682 . 4685) (4688 . 4694) 4696 (4698 . 4701) (4704 . 4744) (4746 . 4749) (4752 . 4784) (4786 . 4789) (4792 . 4798) 4800 (4802 . 4805) (4808 . 4822) (4824 . 4880) (4882 . 4885) (4888 . 4954) (4992 . 5007) (5024 . 5108) (5121 . 5740) (5743 . 5750) (5761 . 5786) (5792 . 5866) (5888 . 5900) (5902 . 5905) (5920 . 5937) (5952 . 5969) (5984 . 5996) (5998 . 6000) (6016 . 6067) 6108 (6176 . 6210) (6212 . 6263) (6272 . 6312) 6314 (6400 . 6428) (6480 . 6509) (6512 . 6516) (6528 . 6569) (6593 . 6599) (6656 . 6678) (6917 . 6963) (6981 . 6987) (7043 . 7072) (7086 . 7087) (7168 . 7203) (7245 . 7247) (7258 . 7287) (8501 . 8504) (11568 . 11621) (11648 . 11670) (11680 . 11686) (11688 . 11694) (11696 . 11702) (11704 . 11710) (11712 . 11718) (11720 . 11726) (11728 . 11734) (11736 . 11742) 12294 12348 (12353 . 12438) 12447 (12449 . 12538) 12543 (12549 . 12589) (12593 . 12686) (12704 . 12727) (12784 . 12799) 13312 19893 19968 40899 (40960 . 40980) (40982 . 42124) (42240 . 42507) (42512 . 42527) (42538 . 42539) 42606 (43003 . 43009) (43011 . 43013) (43015 . 43018) (43020 . 43042) (43072 . 43123) (43138 . 43187) (43274 . 43301) (43312 . 43334) (43520 . 43560) (43584 . 43586) (43588 . 43595) 44032 55203 (63744 . 64045) (64048 . 64106) (64112 . 64217) 64285 (64287 . 64296) (64298 . 64310) (64312 . 64316) 64318 (64320 . 64321) (64323 . 64324) (64326 . 64433) (64467 . 64829) (64848 . 64911) (64914 . 64967) (65008 . 65019) (65136 . 65140) (65142 . 65276) (65382 . 65391) (65393 . 65437) (65440 . 65470) (65474 . 65479) (65482 . 65487) (65490 . 65495) (65498 . 65500) (65536 . 65547) (65549 . 65574) (65576 . 65594) (65596 . 65597) (65599 . 65613) (65616 . 65629) (65664 . 65786) (66176 . 66204) (66208 . 66256) (66304 . 66334) (66352 . 66368) (66370 . 66377) (66432 . 66461) (66464 . 66499) (66504 . 66511) (66640 . 66717) (67584 . 67589) 67592 (67594 . 67637) (67639 . 67640) 67644 67647 (67840 . 67861) (67872 . 67897) 68096 (68112 . 68115) (68117 . 68119) (68121 . 68147) (73728 . 74606) 131072 173782 (194560 . 195101)) (Pd 45 1418 1470 6150 (8208 . 8213) 11799 11802 12316 12336 12448 (65073 . 65074) 65112 65123 65293) (Ll (97 . 122) 170 181 186 (223 . 246) (248 . 255) 257 259 261 263 265 267 269 271 273 275 277 279 281 283 285 287 289 291 293 295 297 299 301 303 305 307 309 (311 . 312) 314 316 318 320 322 324 326 (328 . 329) 331 333 335 337 339 341 343 345 347 349 351 353 355 357 359 361 363 365 367 369 371 373 375 378 380 (382 . 384) 387 389 392 (396 . 397) 402 405 (409 . 411) 414 417 419 421 424 (426 . 427) 429 432 436 438 (441 . 442) (445 . 447) 454 457 460 462 464 466 468 470 472 474 (476 . 477) 479 481 483 485 487 489 491 493 (495 . 496) 499 501 505 507 509 511 513 515 517 519 521 523 525 527 529 531 533 535 537 539 541 543 545 547 549 551 553 555 557 559 561 (563 . 569) 572 (575 . 576) 578 583 585 587 589 (591 . 659) (661 . 687) 881 883 887 (891 . 893) 912 (940 . 974) (976 . 977) (981 . 983) 985 987 989 991 993 995 997 999 1001 1003 1005 (1007 . 1011) 1013 1016 (1019 . 1020) (1072 . 1119) 1121 1123 1125 1127 1129 1131 1133 1135 1137 1139 1141 1143 1145 1147 1149 1151 1153 1163 1165 1167 1169 1171 1173 1175 1177 1179 1181 1183 1185 1187 1189 1191 1193 1195 1197 1199 1201 1203 1205 1207 1209 1211 1213 1215 1218 1220 1222 1224 1226 1228 (1230 . 1231) 1233 1235 1237 1239 1241 1243 1245 1247 1249 1251 1253 1255 1257 1259 1261 1263 1265 1267 1269 1271 1273 1275 1277 1279 1281 1283 1285 1287 1289 1291 1293 1295 1297 1299 1301 1303 1305 1307 1309 1311 1313 1315 (1377 . 1415) (7424 . 7467) (7522 . 7543) (7545 . 7578) 7681 7683 7685 7687 7689 7691 7693 7695 7697 7699 7701 7703 7705 7707 7709 7711 7713 7715 7717 7719 7721 7723 7725 7727 7729 7731 7733 7735 7737 7739 7741 7743 7745 7747 7749 7751 7753 7755 7757 7759 7761 7763 7765 7767 7769 7771 7773 7775 7777 7779 7781 7783 7785 7787 7789 7791 7793 7795 7797 7799 7801 7803 7805 7807 7809 7811 7813 7815 7817 7819 7821 7823 7825 7827 (7829 . 7837) 7839 7841 7843 7845 7847 7849 7851 7853 7855 7857 7859 7861 7863 7865 7867 7869 7871 7873 7875 7877 7879 7881 7883 7885 7887 7889 7891 7893 7895 7897 7899 7901 7903 7905 7907 7909 7911 7913 7915 7917 7919 7921 7923 7925 7927 7929 7931 7933 (7935 . 7943) (7952 . 7957) (7968 . 7975) (7984 . 7991) (8000 . 8005) (8016 . 8023) (8032 . 8039) (8048 . 8061) (8064 . 8071) (8080 . 8087) (8096 . 8103) (8112 . 8116) (8118 . 8119) 8126 (8130 . 8132) (8134 . 8135) (8144 . 8147) (8150 . 8151) (8160 . 8167) (8178 . 8180) (8182 . 8183) 8305 8319 8458 (8462 . 8463) 8467 8495 8500 8505 (8508 . 8509) (8518 . 8521) 8526 8580 (11312 . 11358) 11361 (11365 . 11366) 11368 11370 11372 11377 (11379 . 11380) (11382 . 11388) 11393 11395 11397 11399 11401 11403 11405 11407 11409 11411 11413 11415 11417 11419 11421 11423 11425 11427 11429 11431 11433 11435 11437 11439 11441 11443 11445 11447 11449 11451 11453 11455 11457 11459 11461 11463 11465 11467 11469 11471 11473 11475 11477 11479 11481 11483 11485 11487 11489 (11491 . 11492) (11520 . 11557) 42561 42563 42565 42567 42569 42571 42573 42575 42577 42579 42581 42583 42585 42587 42589 42591 42595 42597 42599 42601 42603 42605 42625 42627 42629 42631 42633 42635 42637 42639 42641 42643 42645 42647 42787 42789 42791 42793 42795 42797 (42799 . 42801) 42803 42805 42807 42809 42811 42813 42815 42817 42819 42821 42823 42825 42827 42829 42831 42833 42835 42837 42839 42841 42843 42845 42847 42849 42851 42853 42855 42857 42859 42861 42863 (42865 . 42872) 42874 42876 42879 42881 42883 42885 42887 42892 (64256 . 64262) (64275 . 64279) (65345 . 65370) (66600 . 66639) (119834 . 119859) (119886 . 119892) (119894 . 119911) (119938 . 119963) (119990 . 119993) 119995 (119997 . 120003) (120005 . 120015) (120042 . 120067) (120094 . 120119) (120146 . 120171) (120198 . 120223) (120250 . 120275) (120302 . 120327) (120354 . 120379) (120406 . 120431) (120458 . 120485) (120514 . 120538) (120540 . 120545) (120572 . 120596) (120598 . 120603) (120630 . 120654) (120656 . 120661) (120688 . 120712) (120714 . 120719) (120746 . 120770) (120772 . 120777) 120779) (No (178 . 179) 185 (188 . 190) (2548 . 2553) (3056 . 3058) (3192 . 3198) (3440 . 3445) (3882 . 3891) (4969 . 4988) (6128 . 6137) 8304 (8308 . 8313) (8320 . 8329) (8531 . 8543) (9312 . 9371) (9450 . 9471) (10102 . 10131) 11517 (12690 . 12693) (12832 . 12841) (12881 . 12895) (12928 . 12937) (12977 . 12991) (65799 . 65843) (65909 . 65912) 65930 (66336 . 66339) (67862 . 67865) (68160 . 68167) (119648 . 119665)) (Co 57344 63743 983040 1048573 1048576 1114109) (Pf 187 8217 8221 8250 11779 11781 11786 11789 11805 11809) (Lu (65 . 90) (192 . 214) (216 . 222) 256 258 260 262 264 266 268 270 272 274 276 278 280 282 284 286 288 290 292 294 296 298 300 302 304 306 308 310 313 315 317 319 321 323 325 327 330 332 334 336 338 340 342 344 346 348 350 352 354 356 358 360 362 364 366 368 370 372 374 (376 . 377) 379 381 (385 . 386) 388 (390 . 391) (393 . 395) (398 . 401) (403 . 404) (406 . 408) (412 . 413) (415 . 416) 418 420 (422 . 423) 425 428 (430 . 431) (433 . 435) 437 (439 . 440) 444 452 455 458 461 463 465 467 469 471 473 475 478 480 482 484 486 488 490 492 494 497 500 (502 . 504) 506 508 510 512 514 516 518 520 522 524 526 528 530 532 534 536 538 540 542 544 546 548 550 552 554 556 558 560 562 (570 . 571) (573 . 574) 577 (579 . 582) 584 586 588 590 880 882 886 902 (904 . 906) 908 (910 . 911) (913 . 929) (931 . 939) 975 (978 . 980) 984 986 988 990 992 994 996 998 1000 1002 1004 1006 1012 1015 (1017 . 1018) (1021 . 1071) 1120 1122 1124 1126 1128 1130 1132 1134 1136 1138 1140 1142 1144 1146 1148 1150 1152 1162 1164 1166 1168 1170 1172 1174 1176 1178 1180 1182 1184 1186 1188 1190 1192 1194 1196 1198 1200 1202 1204 1206 1208 1210 1212 1214 (1216 . 1217) 1219 1221 1223 1225 1227 1229 1232 1234 1236 1238 1240 1242 1244 1246 1248 1250 1252 1254 1256 1258 1260 1262 1264 1266 1268 1270 1272 1274 1276 1278 1280 1282 1284 1286 1288 1290 1292 1294 1296 1298 1300 1302 1304 1306 1308 1310 1312 1314 (1329 . 1366) (4256 . 4293) 7680 7682 7684 7686 7688 7690 7692 7694 7696 7698 7700 7702 7704 7706 7708 7710 7712 7714 7716 7718 7720 7722 7724 7726 7728 7730 7732 7734 7736 7738 7740 7742 7744 7746 7748 7750 7752 7754 7756 7758 7760 7762 7764 7766 7768 7770 7772 7774 7776 7778 7780 7782 7784 7786 7788 7790 7792 7794 7796 7798 7800 7802 7804 7806 7808 7810 7812 7814 7816 7818 7820 7822 7824 7826 7828 7838 7840 7842 7844 7846 7848 7850 7852 7854 7856 7858 7860 7862 7864 7866 7868 7870 7872 7874 7876 7878 7880 7882 7884 7886 7888 7890 7892 7894 7896 7898 7900 7902 7904 7906 7908 7910 7912 7914 7916 7918 7920 7922 7924 7926 7928 7930 7932 7934 (7944 . 7951) (7960 . 7965) (7976 . 7983) (7992 . 7999) (8008 . 8013) 8025 8027 8029 8031 (8040 . 8047) (8120 . 8123) (8136 . 8139) (8152 . 8155) (8168 . 8172) (8184 . 8187) 8450 8455 (8459 . 8461) (8464 . 8466) 8469 (8473 . 8477) 8484 8486 8488 (8490 . 8493) (8496 . 8499) (8510 . 8511) 8517 8579 (11264 . 11310) 11360 (11362 . 11364) 11367 11369 11371 (11373 . 11375) 11378 11381 11392 11394 11396 11398 11400 11402 11404 11406 11408 11410 11412 11414 11416 11418 11420 11422 11424 11426 11428 11430 11432 11434 11436 11438 11440 11442 11444 11446 11448 11450 11452 11454 11456 11458 11460 11462 11464 11466 11468 11470 11472 11474 11476 11478 11480 11482 11484 11486 11488 11490 42560 42562 42564 42566 42568 42570 42572 42574 42576 42578 42580 42582 42584 42586 42588 42590 42594 42596 42598 42600 42602 42604 42624 42626 42628 42630 42632 42634 42636 42638 42640 42642 42644 42646 42786 42788 42790 42792 42794 42796 42798 42802 42804 42806 42808 42810 42812 42814 42816 42818 42820 42822 42824 42826 42828 42830 42832 42834 42836 42838 42840 42842 42844 42846 42848 42850 42852 42854 42856 42858 42860 42862 42873 42875 (42877 . 42878) 42880 42882 42884 42886 42891 (65313 . 65338) (66560 . 66599) (119808 . 119833) (119860 . 119885) (119912 . 119937) 119964 (119966 . 119967) 119970 (119973 . 119974) (119977 . 119980) (119982 . 119989) (120016 . 120041) (120068 . 120069) (120071 . 120074) (120077 . 120084) (120086 . 120092) (120120 . 120121) (120123 . 120126) (120128 . 120132) 120134 (120138 . 120144) (120172 . 120197) (120224 . 120249) (120276 . 120301) (120328 . 120353) (120380 . 120405) (120432 . 120457) (120488 . 120512) (120546 . 120570) (120604 . 120628) (120662 . 120686) (120720 . 120744) 120778) (Zp 8233) (Nl (5870 . 5872) (8544 . 8578) (8581 . 8584) 12295 (12321 . 12329) (12344 . 12346) (65856 . 65908) 66369 66378 (66513 . 66517) (74752 . 74850)) (Ps 40 91 123 3898 3900 5787 8218 8222 8261 8317 8333 9001 10088 10090 10092 10094 10096 10098 10100 10181 10214 10216 10218 10220 10222 10627 10629 10631 10633 10635 10637 10639 10641 10643 10645 10647 10712 10714 10748 11810 11812 11814 11816 12296 12298 12300 12302 12304 12308 12310 12312 12314 12317 64830 65047 65077 65079 65081 65083 65085 65087 65089 65091 65095 65113 65115 65117 65288 65339 65371 65375 65378))) (set! G21819 '((97 . 65) (98 . 66) (99 . 67) (100 . 68) (101 . 69) (102 . 70) (103 . 71) (104 . 72) (105 . 73) (106 . 74) (107 . 75) (108 . 76) (109 . 77) (110 . 78) (111 . 79) (112 . 80) (113 . 81) (114 . 82) (115 . 83) (116 . 84) (117 . 85) (118 . 86) (119 . 87) (120 . 88) (121 . 89) (122 . 90) (181 . 924) (224 . 192) (225 . 193) (226 . 194) (227 . 195) (228 . 196) (229 . 197) (230 . 198) (231 . 199) (232 . 200) (233 . 201) (234 . 202) (235 . 203) (236 . 204) (237 . 205) (238 . 206) (239 . 207) (240 . 208) (241 . 209) (242 . 210) (243 . 211) (244 . 212) (245 . 213) (246 . 214) (248 . 216) (249 . 217) (250 . 218) (251 . 219) (252 . 220) (253 . 221) (254 . 222) (255 . 376) (257 . 256) (259 . 258) (261 . 260) (263 . 262) (265 . 264) (267 . 266) (269 . 268) (271 . 270) (273 . 272) (275 . 274) (277 . 276) (279 . 278) (281 . 280) (283 . 282) (285 . 284) (287 . 286) (289 . 288) (291 . 290) (293 . 292) (295 . 294) (297 . 296) (299 . 298) (301 . 300) (303 . 302) (305 . 73) (307 . 306) (309 . 308) (311 . 310) (314 . 313) (316 . 315) (318 . 317) (320 . 319) (322 . 321) (324 . 323) (326 . 325) (328 . 327) (331 . 330) (333 . 332) (335 . 334) (337 . 336) (339 . 338) (341 . 340) (343 . 342) (345 . 344) (347 . 346) (349 . 348) (351 . 350) (353 . 352) (355 . 354) (357 . 356) (359 . 358) (361 . 360) (363 . 362) (365 . 364) (367 . 366) (369 . 368) (371 . 370) (373 . 372) (375 . 374) (378 . 377) (380 . 379) (382 . 381) (383 . 83) (384 . 579) (387 . 386) (389 . 388) (392 . 391) (396 . 395) (402 . 401) (405 . 502) (409 . 408) (410 . 573) (414 . 544) (417 . 416) (419 . 418) (421 . 420) (424 . 423) (429 . 428) (432 . 431) (436 . 435) (438 . 437) (441 . 440) (445 . 444) (447 . 503) (452 . 453) (453 . 453) (454 . 453) (455 . 456) (456 . 456) (457 . 456) (458 . 459) (459 . 459) (460 . 459) (462 . 461) (464 . 463) (466 . 465) (468 . 467) (470 . 469) (472 . 471) (474 . 473) (476 . 475) (477 . 398) (479 . 478) (481 . 480) (483 . 482) (485 . 484) (487 . 486) (489 . 488) (491 . 490) (493 . 492) (495 . 494) (497 . 498) (498 . 498) (499 . 498) (501 . 500) (505 . 504) (507 . 506) (509 . 508) (511 . 510) (513 . 512) (515 . 514) (517 . 516) (519 . 518) (521 . 520) (523 . 522) (525 . 524) (527 . 526) (529 . 528) (531 . 530) (533 . 532) (535 . 534) (537 . 536) (539 . 538) (541 . 540) (543 . 542) (547 . 546) (549 . 548) (551 . 550) (553 . 552) (555 . 554) (557 . 556) (559 . 558) (561 . 560) (563 . 562) (572 . 571) (578 . 577) (583 . 582) (585 . 584) (587 . 586) (589 . 588) (591 . 590) (592 . 11375) (593 . 11373) (595 . 385) (596 . 390) (598 . 393) (599 . 394) (601 . 399) (603 . 400) (608 . 403) (611 . 404) (616 . 407) (617 . 406) (619 . 11362) (623 . 412) (625 . 11374) (626 . 413) (629 . 415) (637 . 11364) (640 . 422) (643 . 425) (648 . 430) (649 . 580) (650 . 433) (651 . 434) (652 . 581) (658 . 439) (837 . 921) (881 . 880) (883 . 882) (887 . 886) (891 . 1021) (892 . 1022) (893 . 1023) (940 . 902) (941 . 904) (942 . 905) (943 . 906) (945 . 913) (946 . 914) (947 . 915) (948 . 916) (949 . 917) (950 . 918) (951 . 919) (952 . 920) (953 . 921) (954 . 922) (955 . 923) (956 . 924) (957 . 925) (958 . 926) (959 . 927) (960 . 928) (961 . 929) (962 . 931) (963 . 931) (964 . 932) (965 . 933) (966 . 934) (967 . 935) (968 . 936) (969 . 937) (970 . 938) (971 . 939) (972 . 908) (973 . 910) (974 . 911) (976 . 914) (977 . 920) (981 . 934) (982 . 928) (983 . 975) (985 . 984) (987 . 986) (989 . 988) (991 . 990) (993 . 992) (995 . 994) (997 . 996) (999 . 998) (1001 . 1000) (1003 . 1002) (1005 . 1004) (1007 . 1006) (1008 . 922) (1009 . 929) (1010 . 1017) (1013 . 917) (1016 . 1015) (1019 . 1018) (1072 . 1040) (1073 . 1041) (1074 . 1042) (1075 . 1043) (1076 . 1044) (1077 . 1045) (1078 . 1046) (1079 . 1047) (1080 . 1048) (1081 . 1049) (1082 . 1050) (1083 . 1051) (1084 . 1052) (1085 . 1053) (1086 . 1054) (1087 . 1055) (1088 . 1056) (1089 . 1057) (1090 . 1058) (1091 . 1059) (1092 . 1060) (1093 . 1061) (1094 . 1062) (1095 . 1063) (1096 . 1064) (1097 . 1065) (1098 . 1066) (1099 . 1067) (1100 . 1068) (1101 . 1069) (1102 . 1070) (1103 . 1071) (1104 . 1024) (1105 . 1025) (1106 . 1026) (1107 . 1027) (1108 . 1028) (1109 . 1029) (1110 . 1030) (1111 . 1031) (1112 . 1032) (1113 . 1033) (1114 . 1034) (1115 . 1035) (1116 . 1036) (1117 . 1037) (1118 . 1038) (1119 . 1039) (1121 . 1120) (1123 . 1122) (1125 . 1124) (1127 . 1126) (1129 . 1128) (1131 . 1130) (1133 . 1132) (1135 . 1134) (1137 . 1136) (1139 . 1138) (1141 . 1140) (1143 . 1142) (1145 . 1144) (1147 . 1146) (1149 . 1148) (1151 . 1150) (1153 . 1152) (1163 . 1162) (1165 . 1164) (1167 . 1166) (1169 . 1168) (1171 . 1170) (1173 . 1172) (1175 . 1174) (1177 . 1176) (1179 . 1178) (1181 . 1180) (1183 . 1182) (1185 . 1184) (1187 . 1186) (1189 . 1188) (1191 . 1190) (1193 . 1192) (1195 . 1194) (1197 . 1196) (1199 . 1198) (1201 . 1200) (1203 . 1202) (1205 . 1204) (1207 . 1206) (1209 . 1208) (1211 . 1210) (1213 . 1212) (1215 . 1214) (1218 . 1217) (1220 . 1219) (1222 . 1221) (1224 . 1223) (1226 . 1225) (1228 . 1227) (1230 . 1229) (1231 . 1216) (1233 . 1232) (1235 . 1234) (1237 . 1236) (1239 . 1238) (1241 . 1240) (1243 . 1242) (1245 . 1244) (1247 . 1246) (1249 . 1248) (1251 . 1250) (1253 . 1252) (1255 . 1254) (1257 . 1256) (1259 . 1258) (1261 . 1260) (1263 . 1262) (1265 . 1264) (1267 . 1266) (1269 . 1268) (1271 . 1270) (1273 . 1272) (1275 . 1274) (1277 . 1276) (1279 . 1278) (1281 . 1280) (1283 . 1282) (1285 . 1284) (1287 . 1286) (1289 . 1288) (1291 . 1290) (1293 . 1292) (1295 . 1294) (1297 . 1296) (1299 . 1298) (1301 . 1300) (1303 . 1302) (1305 . 1304) (1307 . 1306) (1309 . 1308) (1311 . 1310) (1313 . 1312) (1315 . 1314) (1377 . 1329) (1378 . 1330) (1379 . 1331) (1380 . 1332) (1381 . 1333) (1382 . 1334) (1383 . 1335) (1384 . 1336) (1385 . 1337) (1386 . 1338) (1387 . 1339) (1388 . 1340) (1389 . 1341) (1390 . 1342) (1391 . 1343) (1392 . 1344) (1393 . 1345) (1394 . 1346) (1395 . 1347) (1396 . 1348) (1397 . 1349) (1398 . 1350) (1399 . 1351) (1400 . 1352) (1401 . 1353) (1402 . 1354) (1403 . 1355) (1404 . 1356) (1405 . 1357) (1406 . 1358) (1407 . 1359) (1408 . 1360) (1409 . 1361) (1410 . 1362) (1411 . 1363) (1412 . 1364) (1413 . 1365) (1414 . 1366) (7545 . 42877) (7549 . 11363) (7681 . 7680) (7683 . 7682) (7685 . 7684) (7687 . 7686) (7689 . 7688) (7691 . 7690) (7693 . 7692) (7695 . 7694) (7697 . 7696) (7699 . 7698) (7701 . 7700) (7703 . 7702) (7705 . 7704) (7707 . 7706) (7709 . 7708) (7711 . 7710) (7713 . 7712) (7715 . 7714) (7717 . 7716) (7719 . 7718) (7721 . 7720) (7723 . 7722) (7725 . 7724) (7727 . 7726) (7729 . 7728) (7731 . 7730) (7733 . 7732) (7735 . 7734) (7737 . 7736) (7739 . 7738) (7741 . 7740) (7743 . 7742) (7745 . 7744) (7747 . 7746) (7749 . 7748) (7751 . 7750) (7753 . 7752) (7755 . 7754) (7757 . 7756) (7759 . 7758) (7761 . 7760) (7763 . 7762) (7765 . 7764) (7767 . 7766) (7769 . 7768) (7771 . 7770) (7773 . 7772) (7775 . 7774) (7777 . 7776) (7779 . 7778) (7781 . 7780) (7783 . 7782) (7785 . 7784) (7787 . 7786) (7789 . 7788) (7791 . 7790) (7793 . 7792) (7795 . 7794) (7797 . 7796) (7799 . 7798) (7801 . 7800) (7803 . 7802) (7805 . 7804) (7807 . 7806) (7809 . 7808) (7811 . 7810) (7813 . 7812) (7815 . 7814) (7817 . 7816) (7819 . 7818) (7821 . 7820) (7823 . 7822) (7825 . 7824) (7827 . 7826) (7829 . 7828) (7835 . 7776) (7841 . 7840) (7843 . 7842) (7845 . 7844) (7847 . 7846) (7849 . 7848) (7851 . 7850) (7853 . 7852) (7855 . 7854) (7857 . 7856) (7859 . 7858) (7861 . 7860) (7863 . 7862) (7865 . 7864) (7867 . 7866) (7869 . 7868) (7871 . 7870) (7873 . 7872) (7875 . 7874) (7877 . 7876) (7879 . 7878) (7881 . 7880) (7883 . 7882) (7885 . 7884) (7887 . 7886) (7889 . 7888) (7891 . 7890) (7893 . 7892) (7895 . 7894) (7897 . 7896) (7899 . 7898) (7901 . 7900) (7903 . 7902) (7905 . 7904) (7907 . 7906) (7909 . 7908) (7911 . 7910) (7913 . 7912) (7915 . 7914) (7917 . 7916) (7919 . 7918) (7921 . 7920) (7923 . 7922) (7925 . 7924) (7927 . 7926) (7929 . 7928) (7931 . 7930) (7933 . 7932) (7935 . 7934) (7936 . 7944) (7937 . 7945) (7938 . 7946) (7939 . 7947) (7940 . 7948) (7941 . 7949) (7942 . 7950) (7943 . 7951) (7952 . 7960) (7953 . 7961) (7954 . 7962) (7955 . 7963) (7956 . 7964) (7957 . 7965) (7968 . 7976) (7969 . 7977) (7970 . 7978) (7971 . 7979) (7972 . 7980) (7973 . 7981) (7974 . 7982) (7975 . 7983) (7984 . 7992) (7985 . 7993) (7986 . 7994) (7987 . 7995) (7988 . 7996) (7989 . 7997) (7990 . 7998) (7991 . 7999) (8000 . 8008) (8001 . 8009) (8002 . 8010) (8003 . 8011) (8004 . 8012) (8005 . 8013) (8017 . 8025) (8019 . 8027) (8021 . 8029) (8023 . 8031) (8032 . 8040) (8033 . 8041) (8034 . 8042) (8035 . 8043) (8036 . 8044) (8037 . 8045) (8038 . 8046) (8039 . 8047) (8048 . 8122) (8049 . 8123) (8050 . 8136) (8051 . 8137) (8052 . 8138) (8053 . 8139) (8054 . 8154) (8055 . 8155) (8056 . 8184) (8057 . 8185) (8058 . 8170) (8059 . 8171) (8060 . 8186) (8061 . 8187) (8064 . 8072) (8065 . 8073) (8066 . 8074) (8067 . 8075) (8068 . 8076) (8069 . 8077) (8070 . 8078) (8071 . 8079) (8080 . 8088) (8081 . 8089) (8082 . 8090) (8083 . 8091) (8084 . 8092) (8085 . 8093) (8086 . 8094) (8087 . 8095) (8096 . 8104) (8097 . 8105) (8098 . 8106) (8099 . 8107) (8100 . 8108) (8101 . 8109) (8102 . 8110) (8103 . 8111) (8112 . 8120) (8113 . 8121) (8115 . 8124) (8126 . 921) (8131 . 8140) (8144 . 8152) (8145 . 8153) (8160 . 8168) (8161 . 8169) (8165 . 8172) (8179 . 8188) (8526 . 8498) (8560 . 8544) (8561 . 8545) (8562 . 8546) (8563 . 8547) (8564 . 8548) (8565 . 8549) (8566 . 8550) (8567 . 8551) (8568 . 8552) (8569 . 8553) (8570 . 8554) (8571 . 8555) (8572 . 8556) (8573 . 8557) (8574 . 8558) (8575 . 8559) (8580 . 8579) (9424 . 9398) (9425 . 9399) (9426 . 9400) (9427 . 9401) (9428 . 9402) (9429 . 9403) (9430 . 9404) (9431 . 9405) (9432 . 9406) (9433 . 9407) (9434 . 9408) (9435 . 9409) (9436 . 9410) (9437 . 9411) (9438 . 9412) (9439 . 9413) (9440 . 9414) (9441 . 9415) (9442 . 9416) (9443 . 9417) (9444 . 9418) (9445 . 9419) (9446 . 9420) (9447 . 9421) (9448 . 9422) (9449 . 9423) (11312 . 11264) (11313 . 11265) (11314 . 11266) (11315 . 11267) (11316 . 11268) (11317 . 11269) (11318 . 11270) (11319 . 11271) (11320 . 11272) (11321 . 11273) (11322 . 11274) (11323 . 11275) (11324 . 11276) (11325 . 11277) (11326 . 11278) (11327 . 11279) (11328 . 11280) (11329 . 11281) (11330 . 11282) (11331 . 11283) (11332 . 11284) (11333 . 11285) (11334 . 11286) (11335 . 11287) (11336 . 11288) (11337 . 11289) (11338 . 11290) (11339 . 11291) (11340 . 11292) (11341 . 11293) (11342 . 11294) (11343 . 11295) (11344 . 11296) (11345 . 11297) (11346 . 11298) (11347 . 11299) (11348 . 11300) (11349 . 11301) (11350 . 11302) (11351 . 11303) (11352 . 11304) (11353 . 11305) (11354 . 11306) (11355 . 11307) (11356 . 11308) (11357 . 11309) (11358 . 11310) (11361 . 11360) (11365 . 570) (11366 . 574) (11368 . 11367) (11370 . 11369) (11372 . 11371) (11379 . 11378) (11382 . 11381) (11393 . 11392) (11395 . 11394) (11397 . 11396) (11399 . 11398) (11401 . 11400) (11403 . 11402) (11405 . 11404) (11407 . 11406) (11409 . 11408) (11411 . 11410) (11413 . 11412) (11415 . 11414) (11417 . 11416) (11419 . 11418) (11421 . 11420) (11423 . 11422) (11425 . 11424) (11427 . 11426) (11429 . 11428) (11431 . 11430) (11433 . 11432) (11435 . 11434) (11437 . 11436) (11439 . 11438) (11441 . 11440) (11443 . 11442) (11445 . 11444) (11447 . 11446) (11449 . 11448) (11451 . 11450) (11453 . 11452) (11455 . 11454) (11457 . 11456) (11459 . 11458) (11461 . 11460) (11463 . 11462) (11465 . 11464) (11467 . 11466) (11469 . 11468) (11471 . 11470) (11473 . 11472) (11475 . 11474) (11477 . 11476) (11479 . 11478) (11481 . 11480) (11483 . 11482) (11485 . 11484) (11487 . 11486) (11489 . 11488) (11491 . 11490) (11520 . 4256) (11521 . 4257) (11522 . 4258) (11523 . 4259) (11524 . 4260) (11525 . 4261) (11526 . 4262) (11527 . 4263) (11528 . 4264) (11529 . 4265) (11530 . 4266) (11531 . 4267) (11532 . 4268) (11533 . 4269) (11534 . 4270) (11535 . 4271) (11536 . 4272) (11537 . 4273) (11538 . 4274) (11539 . 4275) (11540 . 4276) (11541 . 4277) (11542 . 4278) (11543 . 4279) (11544 . 4280) (11545 . 4281) (11546 . 4282) (11547 . 4283) (11548 . 4284) (11549 . 4285) (11550 . 4286) (11551 . 4287) (11552 . 4288) (11553 . 4289) (11554 . 4290) (11555 . 4291) (11556 . 4292) (11557 . 4293) (42561 . 42560) (42563 . 42562) (42565 . 42564) (42567 . 42566) (42569 . 42568) (42571 . 42570) (42573 . 42572) (42575 . 42574) (42577 . 42576) (42579 . 42578) (42581 . 42580) (42583 . 42582) (42585 . 42584) (42587 . 42586) (42589 . 42588) (42591 . 42590) (42595 . 42594) (42597 . 42596) (42599 . 42598) (42601 . 42600) (42603 . 42602) (42605 . 42604) (42625 . 42624) (42627 . 42626) (42629 . 42628) (42631 . 42630) (42633 . 42632) (42635 . 42634) (42637 . 42636) (42639 . 42638) (42641 . 42640) (42643 . 42642) (42645 . 42644) (42647 . 42646) (42787 . 42786) (42789 . 42788) (42791 . 42790) (42793 . 42792) (42795 . 42794) (42797 . 42796) (42799 . 42798) (42803 . 42802) (42805 . 42804) (42807 . 42806) (42809 . 42808) (42811 . 42810) (42813 . 42812) (42815 . 42814) (42817 . 42816) (42819 . 42818) (42821 . 42820) (42823 . 42822) (42825 . 42824) (42827 . 42826) (42829 . 42828) (42831 . 42830) (42833 . 42832) (42835 . 42834) (42837 . 42836) (42839 . 42838) (42841 . 42840) (42843 . 42842) (42845 . 42844) (42847 . 42846) (42849 . 42848) (42851 . 42850) (42853 . 42852) (42855 . 42854) (42857 . 42856) (42859 . 42858) (42861 . 42860) (42863 . 42862) (42874 . 42873) (42876 . 42875) (42879 . 42878) (42881 . 42880) (42883 . 42882) (42885 . 42884) (42887 . 42886) (42892 . 42891) (65345 . 65313) (65346 . 65314) (65347 . 65315) (65348 . 65316) (65349 . 65317) (65350 . 65318) (65351 . 65319) (65352 . 65320) (65353 . 65321) (65354 . 65322) (65355 . 65323) (65356 . 65324) (65357 . 65325) (65358 . 65326) (65359 . 65327) (65360 . 65328) (65361 . 65329) (65362 . 65330) (65363 . 65331) (65364 . 65332) (65365 . 65333) (65366 . 65334) (65367 . 65335) (65368 . 65336) (65369 . 65337) (65370 . 65338) (66600 . 66560) (66601 . 66561) (66602 . 66562) (66603 . 66563) (66604 . 66564) (66605 . 66565) (66606 . 66566) (66607 . 66567) (66608 . 66568) (66609 . 66569) (66610 . 66570) (66611 . 66571) (66612 . 66572) (66613 . 66573) (66614 . 66574) (66615 . 66575) (66616 . 66576) (66617 . 66577) (66618 . 66578) (66619 . 66579) (66620 . 66580) (66621 . 66581) (66622 . 66582) (66623 . 66583) (66624 . 66584) (66625 . 66585) (66626 . 66586) (66627 . 66587) (66628 . 66588) (66629 . 66589) (66630 . 66590) (66631 . 66591) (66632 . 66592) (66633 . 66593) (66634 . 66594) (66635 . 66595) (66636 . 66596) (66637 . 66597) (66638 . 66598) (66639 . 66599))) (set! G21821 '((65 . 97) (66 . 98) (67 . 99) (68 . 100) (69 . 101) (70 . 102) (71 . 103) (72 . 104) (73 . 105) (74 . 106) (75 . 107) (76 . 108) (77 . 109) (78 . 110) (79 . 111) (80 . 112) (81 . 113) (82 . 114) (83 . 115) (84 . 116) (85 . 117) (86 . 118) (87 . 119) (88 . 120) (89 . 121) (90 . 122) (192 . 224) (193 . 225) (194 . 226) (195 . 227) (196 . 228) (197 . 229) (198 . 230) (199 . 231) (200 . 232) (201 . 233) (202 . 234) (203 . 235) (204 . 236) (205 . 237) (206 . 238) (207 . 239) (208 . 240) (209 . 241) (210 . 242) (211 . 243) (212 . 244) (213 . 245) (214 . 246) (216 . 248) (217 . 249) (218 . 250) (219 . 251) (220 . 252) (221 . 253) (222 . 254) (256 . 257) (258 . 259) (260 . 261) (262 . 263) (264 . 265) (266 . 267) (268 . 269) (270 . 271) (272 . 273) (274 . 275) (276 . 277) (278 . 279) (280 . 281) (282 . 283) (284 . 285) (286 . 287) (288 . 289) (290 . 291) (292 . 293) (294 . 295) (296 . 297) (298 . 299) (300 . 301) (302 . 303) (304 . 105) (306 . 307) (308 . 309) (310 . 311) (313 . 314) (315 . 316) (317 . 318) (319 . 320) (321 . 322) (323 . 324) (325 . 326) (327 . 328) (330 . 331) (332 . 333) (334 . 335) (336 . 337) (338 . 339) (340 . 341) (342 . 343) (344 . 345) (346 . 347) (348 . 349) (350 . 351) (352 . 353) (354 . 355) (356 . 357) (358 . 359) (360 . 361) (362 . 363) (364 . 365) (366 . 367) (368 . 369) (370 . 371) (372 . 373) (374 . 375) (376 . 255) (377 . 378) (379 . 380) (381 . 382) (385 . 595) (386 . 387) (388 . 389) (390 . 596) (391 . 392) (393 . 598) (394 . 599) (395 . 396) (398 . 477) (399 . 601) (400 . 603) (401 . 402) (403 . 608) (404 . 611) (406 . 617) (407 . 616) (408 . 409) (412 . 623) (413 . 626) (415 . 629) (416 . 417) (418 . 419) (420 . 421) (422 . 640) (423 . 424) (425 . 643) (428 . 429) (430 . 648) (431 . 432) (433 . 650) (434 . 651) (435 . 436) (437 . 438) (439 . 658) (440 . 441) (444 . 445) (452 . 454) (453 . 454) (455 . 457) (456 . 457) (458 . 460) (459 . 460) (461 . 462) (463 . 464) (465 . 466) (467 . 468) (469 . 470) (471 . 472) (473 . 474) (475 . 476) (478 . 479) (480 . 481) (482 . 483) (484 . 485) (486 . 487) (488 . 489) (490 . 491) (492 . 493) (494 . 495) (497 . 499) (498 . 499) (500 . 501) (502 . 405) (503 . 447) (504 . 505) (506 . 507) (508 . 509) (510 . 511) (512 . 513) (514 . 515) (516 . 517) (518 . 519) (520 . 521) (522 . 523) (524 . 525) (526 . 527) (528 . 529) (530 . 531) (532 . 533) (534 . 535) (536 . 537) (538 . 539) (540 . 541) (542 . 543) (544 . 414) (546 . 547) (548 . 549) (550 . 551) (552 . 553) (554 . 555) (556 . 557) (558 . 559) (560 . 561) (562 . 563) (570 . 11365) (571 . 572) (573 . 410) (574 . 11366) (577 . 578) (579 . 384) (580 . 649) (581 . 652) (582 . 583) (584 . 585) (586 . 587) (588 . 589) (590 . 591) (880 . 881) (882 . 883) (886 . 887) (902 . 940) (904 . 941) (905 . 942) (906 . 943) (908 . 972) (910 . 973) (911 . 974) (913 . 945) (914 . 946) (915 . 947) (916 . 948) (917 . 949) (918 . 950) (919 . 951) (920 . 952) (921 . 953) (922 . 954) (923 . 955) (924 . 956) (925 . 957) (926 . 958) (927 . 959) (928 . 960) (929 . 961) (931 . 963) (932 . 964) (933 . 965) (934 . 966) (935 . 967) (936 . 968) (937 . 969) (938 . 970) (939 . 971) (975 . 983) (984 . 985) (986 . 987) (988 . 989) (990 . 991) (992 . 993) (994 . 995) (996 . 997) (998 . 999) (1000 . 1001) (1002 . 1003) (1004 . 1005) (1006 . 1007) (1012 . 952) (1015 . 1016) (1017 . 1010) (1018 . 1019) (1021 . 891) (1022 . 892) (1023 . 893) (1024 . 1104) (1025 . 1105) (1026 . 1106) (1027 . 1107) (1028 . 1108) (1029 . 1109) (1030 . 1110) (1031 . 1111) (1032 . 1112) (1033 . 1113) (1034 . 1114) (1035 . 1115) (1036 . 1116) (1037 . 1117) (1038 . 1118) (1039 . 1119) (1040 . 1072) (1041 . 1073) (1042 . 1074) (1043 . 1075) (1044 . 1076) (1045 . 1077) (1046 . 1078) (1047 . 1079) (1048 . 1080) (1049 . 1081) (1050 . 1082) (1051 . 1083) (1052 . 1084) (1053 . 1085) (1054 . 1086) (1055 . 1087) (1056 . 1088) (1057 . 1089) (1058 . 1090) (1059 . 1091) (1060 . 1092) (1061 . 1093) (1062 . 1094) (1063 . 1095) (1064 . 1096) (1065 . 1097) (1066 . 1098) (1067 . 1099) (1068 . 1100) (1069 . 1101) (1070 . 1102) (1071 . 1103) (1120 . 1121) (1122 . 1123) (1124 . 1125) (1126 . 1127) (1128 . 1129) (1130 . 1131) (1132 . 1133) (1134 . 1135) (1136 . 1137) (1138 . 1139) (1140 . 1141) (1142 . 1143) (1144 . 1145) (1146 . 1147) (1148 . 1149) (1150 . 1151) (1152 . 1153) (1162 . 1163) (1164 . 1165) (1166 . 1167) (1168 . 1169) (1170 . 1171) (1172 . 1173) (1174 . 1175) (1176 . 1177) (1178 . 1179) (1180 . 1181) (1182 . 1183) (1184 . 1185) (1186 . 1187) (1188 . 1189) (1190 . 1191) (1192 . 1193) (1194 . 1195) (1196 . 1197) (1198 . 1199) (1200 . 1201) (1202 . 1203) (1204 . 1205) (1206 . 1207) (1208 . 1209) (1210 . 1211) (1212 . 1213) (1214 . 1215) (1216 . 1231) (1217 . 1218) (1219 . 1220) (1221 . 1222) (1223 . 1224) (1225 . 1226) (1227 . 1228) (1229 . 1230) (1232 . 1233) (1234 . 1235) (1236 . 1237) (1238 . 1239) (1240 . 1241) (1242 . 1243) (1244 . 1245) (1246 . 1247) (1248 . 1249) (1250 . 1251) (1252 . 1253) (1254 . 1255) (1256 . 1257) (1258 . 1259) (1260 . 1261) (1262 . 1263) (1264 . 1265) (1266 . 1267) (1268 . 1269) (1270 . 1271) (1272 . 1273) (1274 . 1275) (1276 . 1277) (1278 . 1279) (1280 . 1281) (1282 . 1283) (1284 . 1285) (1286 . 1287) (1288 . 1289) (1290 . 1291) (1292 . 1293) (1294 . 1295) (1296 . 1297) (1298 . 1299) (1300 . 1301) (1302 . 1303) (1304 . 1305) (1306 . 1307) (1308 . 1309) (1310 . 1311) (1312 . 1313) (1314 . 1315) (1329 . 1377) (1330 . 1378) (1331 . 1379) (1332 . 1380) (1333 . 1381) (1334 . 1382) (1335 . 1383) (1336 . 1384) (1337 . 1385) (1338 . 1386) (1339 . 1387) (1340 . 1388) (1341 . 1389) (1342 . 1390) (1343 . 1391) (1344 . 1392) (1345 . 1393) (1346 . 1394) (1347 . 1395) (1348 . 1396) (1349 . 1397) (1350 . 1398) (1351 . 1399) (1352 . 1400) (1353 . 1401) (1354 . 1402) (1355 . 1403) (1356 . 1404) (1357 . 1405) (1358 . 1406) (1359 . 1407) (1360 . 1408) (1361 . 1409) (1362 . 1410) (1363 . 1411) (1364 . 1412) (1365 . 1413) (1366 . 1414) (4256 . 11520) (4257 . 11521) (4258 . 11522) (4259 . 11523) (4260 . 11524) (4261 . 11525) (4262 . 11526) (4263 . 11527) (4264 . 11528) (4265 . 11529) (4266 . 11530) (4267 . 11531) (4268 . 11532) (4269 . 11533) (4270 . 11534) (4271 . 11535) (4272 . 11536) (4273 . 11537) (4274 . 11538) (4275 . 11539) (4276 . 11540) (4277 . 11541) (4278 . 11542) (4279 . 11543) (4280 . 11544) (4281 . 11545) (4282 . 11546) (4283 . 11547) (4284 . 11548) (4285 . 11549) (4286 . 11550) (4287 . 11551) (4288 . 11552) (4289 . 11553) (4290 . 11554) (4291 . 11555) (4292 . 11556) (4293 . 11557) (7680 . 7681) (7682 . 7683) (7684 . 7685) (7686 . 7687) (7688 . 7689) (7690 . 7691) (7692 . 7693) (7694 . 7695) (7696 . 7697) (7698 . 7699) (7700 . 7701) (7702 . 7703) (7704 . 7705) (7706 . 7707) (7708 . 7709) (7710 . 7711) (7712 . 7713) (7714 . 7715) (7716 . 7717) (7718 . 7719) (7720 . 7721) (7722 . 7723) (7724 . 7725) (7726 . 7727) (7728 . 7729) (7730 . 7731) (7732 . 7733) (7734 . 7735) (7736 . 7737) (7738 . 7739) (7740 . 7741) (7742 . 7743) (7744 . 7745) (7746 . 7747) (7748 . 7749) (7750 . 7751) (7752 . 7753) (7754 . 7755) (7756 . 7757) (7758 . 7759) (7760 . 7761) (7762 . 7763) (7764 . 7765) (7766 . 7767) (7768 . 7769) (7770 . 7771) (7772 . 7773) (7774 . 7775) (7776 . 7777) (7778 . 7779) (7780 . 7781) (7782 . 7783) (7784 . 7785) (7786 . 7787) (7788 . 7789) (7790 . 7791) (7792 . 7793) (7794 . 7795) (7796 . 7797) (7798 . 7799) (7800 . 7801) (7802 . 7803) (7804 . 7805) (7806 . 7807) (7808 . 7809) (7810 . 7811) (7812 . 7813) (7814 . 7815) (7816 . 7817) (7818 . 7819) (7820 . 7821) (7822 . 7823) (7824 . 7825) (7826 . 7827) (7828 . 7829) (7838 . 223) (7840 . 7841) (7842 . 7843) (7844 . 7845) (7846 . 7847) (7848 . 7849) (7850 . 7851) (7852 . 7853) (7854 . 7855) (7856 . 7857) (7858 . 7859) (7860 . 7861) (7862 . 7863) (7864 . 7865) (7866 . 7867) (7868 . 7869) (7870 . 7871) (7872 . 7873) (7874 . 7875) (7876 . 7877) (7878 . 7879) (7880 . 7881) (7882 . 7883) (7884 . 7885) (7886 . 7887) (7888 . 7889) (7890 . 7891) (7892 . 7893) (7894 . 7895) (7896 . 7897) (7898 . 7899) (7900 . 7901) (7902 . 7903) (7904 . 7905) (7906 . 7907) (7908 . 7909) (7910 . 7911) (7912 . 7913) (7914 . 7915) (7916 . 7917) (7918 . 7919) (7920 . 7921) (7922 . 7923) (7924 . 7925) (7926 . 7927) (7928 . 7929) (7930 . 7931) (7932 . 7933) (7934 . 7935) (7944 . 7936) (7945 . 7937) (7946 . 7938) (7947 . 7939) (7948 . 7940) (7949 . 7941) (7950 . 7942) (7951 . 7943) (7960 . 7952) (7961 . 7953) (7962 . 7954) (7963 . 7955) (7964 . 7956) (7965 . 7957) (7976 . 7968) (7977 . 7969) (7978 . 7970) (7979 . 7971) (7980 . 7972) (7981 . 7973) (7982 . 7974) (7983 . 7975) (7992 . 7984) (7993 . 7985) (7994 . 7986) (7995 . 7987) (7996 . 7988) (7997 . 7989) (7998 . 7990) (7999 . 7991) (8008 . 8000) (8009 . 8001) (8010 . 8002) (8011 . 8003) (8012 . 8004) (8013 . 8005) (8025 . 8017) (8027 . 8019) (8029 . 8021) (8031 . 8023) (8040 . 8032) (8041 . 8033) (8042 . 8034) (8043 . 8035) (8044 . 8036) (8045 . 8037) (8046 . 8038) (8047 . 8039) (8072 . 8064) (8073 . 8065) (8074 . 8066) (8075 . 8067) (8076 . 8068) (8077 . 8069) (8078 . 8070) (8079 . 8071) (8088 . 8080) (8089 . 8081) (8090 . 8082) (8091 . 8083) (8092 . 8084) (8093 . 8085) (8094 . 8086) (8095 . 8087) (8104 . 8096) (8105 . 8097) (8106 . 8098) (8107 . 8099) (8108 . 8100) (8109 . 8101) (8110 . 8102) (8111 . 8103) (8120 . 8112) (8121 . 8113) (8122 . 8048) (8123 . 8049) (8124 . 8115) (8136 . 8050) (8137 . 8051) (8138 . 8052) (8139 . 8053) (8140 . 8131) (8152 . 8144) (8153 . 8145) (8154 . 8054) (8155 . 8055) (8168 . 8160) (8169 . 8161) (8170 . 8058) (8171 . 8059) (8172 . 8165) (8184 . 8056) (8185 . 8057) (8186 . 8060) (8187 . 8061) (8188 . 8179) (8486 . 969) (8490 . 107) (8491 . 229) (8498 . 8526) (8544 . 8560) (8545 . 8561) (8546 . 8562) (8547 . 8563) (8548 . 8564) (8549 . 8565) (8550 . 8566) (8551 . 8567) (8552 . 8568) (8553 . 8569) (8554 . 8570) (8555 . 8571) (8556 . 8572) (8557 . 8573) (8558 . 8574) (8559 . 8575) (8579 . 8580) (9398 . 9424) (9399 . 9425) (9400 . 9426) (9401 . 9427) (9402 . 9428) (9403 . 9429) (9404 . 9430) (9405 . 9431) (9406 . 9432) (9407 . 9433) (9408 . 9434) (9409 . 9435) (9410 . 9436) (9411 . 9437) (9412 . 9438) (9413 . 9439) (9414 . 9440) (9415 . 9441) (9416 . 9442) (9417 . 9443) (9418 . 9444) (9419 . 9445) (9420 . 9446) (9421 . 9447) (9422 . 9448) (9423 . 9449) (11264 . 11312) (11265 . 11313) (11266 . 11314) (11267 . 11315) (11268 . 11316) (11269 . 11317) (11270 . 11318) (11271 . 11319) (11272 . 11320) (11273 . 11321) (11274 . 11322) (11275 . 11323) (11276 . 11324) (11277 . 11325) (11278 . 11326) (11279 . 11327) (11280 . 11328) (11281 . 11329) (11282 . 11330) (11283 . 11331) (11284 . 11332) (11285 . 11333) (11286 . 11334) (11287 . 11335) (11288 . 11336) (11289 . 11337) (11290 . 11338) (11291 . 11339) (11292 . 11340) (11293 . 11341) (11294 . 11342) (11295 . 11343) (11296 . 11344) (11297 . 11345) (11298 . 11346) (11299 . 11347) (11300 . 11348) (11301 . 11349) (11302 . 11350) (11303 . 11351) (11304 . 11352) (11305 . 11353) (11306 . 11354) (11307 . 11355) (11308 . 11356) (11309 . 11357) (11310 . 11358) (11360 . 11361) (11362 . 619) (11363 . 7549) (11364 . 637) (11367 . 11368) (11369 . 11370) (11371 . 11372) (11373 . 593) (11374 . 625) (11375 . 592) (11378 . 11379) (11381 . 11382) (11392 . 11393) (11394 . 11395) (11396 . 11397) (11398 . 11399) (11400 . 11401) (11402 . 11403) (11404 . 11405) (11406 . 11407) (11408 . 11409) (11410 . 11411) (11412 . 11413) (11414 . 11415) (11416 . 11417) (11418 . 11419) (11420 . 11421) (11422 . 11423) (11424 . 11425) (11426 . 11427) (11428 . 11429) (11430 . 11431) (11432 . 11433) (11434 . 11435) (11436 . 11437) (11438 . 11439) (11440 . 11441) (11442 . 11443) (11444 . 11445) (11446 . 11447) (11448 . 11449) (11450 . 11451) (11452 . 11453) (11454 . 11455) (11456 . 11457) (11458 . 11459) (11460 . 11461) (11462 . 11463) (11464 . 11465) (11466 . 11467) (11468 . 11469) (11470 . 11471) (11472 . 11473) (11474 . 11475) (11476 . 11477) (11478 . 11479) (11480 . 11481) (11482 . 11483) (11484 . 11485) (11486 . 11487) (11488 . 11489) (11490 . 11491) (42560 . 42561) (42562 . 42563) (42564 . 42565) (42566 . 42567) (42568 . 42569) (42570 . 42571) (42572 . 42573) (42574 . 42575) (42576 . 42577) (42578 . 42579) (42580 . 42581) (42582 . 42583) (42584 . 42585) (42586 . 42587) (42588 . 42589) (42590 . 42591) (42594 . 42595) (42596 . 42597) (42598 . 42599) (42600 . 42601) (42602 . 42603) (42604 . 42605) (42624 . 42625) (42626 . 42627) (42628 . 42629) (42630 . 42631) (42632 . 42633) (42634 . 42635) (42636 . 42637) (42638 . 42639) (42640 . 42641) (42642 . 42643) (42644 . 42645) (42646 . 42647) (42786 . 42787) (42788 . 42789) (42790 . 42791) (42792 . 42793) (42794 . 42795) (42796 . 42797) (42798 . 42799) (42802 . 42803) (42804 . 42805) (42806 . 42807) (42808 . 42809) (42810 . 42811) (42812 . 42813) (42814 . 42815) (42816 . 42817) (42818 . 42819) (42820 . 42821) (42822 . 42823) (42824 . 42825) (42826 . 42827) (42828 . 42829) (42830 . 42831) (42832 . 42833) (42834 . 42835) (42836 . 42837) (42838 . 42839) (42840 . 42841) (42842 . 42843) (42844 . 42845) (42846 . 42847) (42848 . 42849) (42850 . 42851) (42852 . 42853) (42854 . 42855) (42856 . 42857) (42858 . 42859) (42860 . 42861) (42862 . 42863) (42873 . 42874) (42875 . 42876) (42877 . 7545) (42878 . 42879) (42880 . 42881) (42882 . 42883) (42884 . 42885) (42886 . 42887) (42891 . 42892) (65313 . 65345) (65314 . 65346) (65315 . 65347) (65316 . 65348) (65317 . 65349) (65318 . 65350) (65319 . 65351) (65320 . 65352) (65321 . 65353) (65322 . 65354) (65323 . 65355) (65324 . 65356) (65325 . 65357) (65326 . 65358) (65327 . 65359) (65328 . 65360) (65329 . 65361) (65330 . 65362) (65331 . 65363) (65332 . 65364) (65333 . 65365) (65334 . 65366) (65335 . 65367) (65336 . 65368) (65337 . 65369) (65338 . 65370) (66560 . 66600) (66561 . 66601) (66562 . 66602) (66563 . 66603) (66564 . 66604) (66565 . 66605) (66566 . 66606) (66567 . 66607) (66568 . 66608) (66569 . 66609) (66570 . 66610) (66571 . 66611) (66572 . 66612) (66573 . 66613) (66574 . 66614) (66575 . 66615) (66576 . 66616) (66577 . 66617) (66578 . 66618) (66579 . 66619) (66580 . 66620) (66581 . 66621) (66582 . 66622) (66583 . 66623) (66584 . 66624) (66585 . 66625) (66586 . 66626) (66587 . 66627) (66588 . 66628) (66589 . 66629) (66590 . 66630) (66591 . 66631) (66592 . 66632) (66593 . 66633) (66594 . 66634) (66595 . 66635) (66596 . 66636) (66597 . 66637) (66598 . 66638) (66599 . 66639))) (set! G21823 '((97 . 65) (98 . 66) (99 . 67) (100 . 68) (101 . 69) (102 . 70) (103 . 71) (104 . 72) (105 . 73) (106 . 74) (107 . 75) (108 . 76) (109 . 77) (110 . 78) (111 . 79) (112 . 80) (113 . 81) (114 . 82) (115 . 83) (116 . 84) (117 . 85) (118 . 86) (119 . 87) (120 . 88) (121 . 89) (122 . 90) (181 . 924) (224 . 192) (225 . 193) (226 . 194) (227 . 195) (228 . 196) (229 . 197) (230 . 198) (231 . 199) (232 . 200) (233 . 201) (234 . 202) (235 . 203) (236 . 204) (237 . 205) (238 . 206) (239 . 207) (240 . 208) (241 . 209) (242 . 210) (243 . 211) (244 . 212) (245 . 213) (246 . 214) (248 . 216) (249 . 217) (250 . 218) (251 . 219) (252 . 220) (253 . 221) (254 . 222) (255 . 376) (257 . 256) (259 . 258) (261 . 260) (263 . 262) (265 . 264) (267 . 266) (269 . 268) (271 . 270) (273 . 272) (275 . 274) (277 . 276) (279 . 278) (281 . 280) (283 . 282) (285 . 284) (287 . 286) (289 . 288) (291 . 290) (293 . 292) (295 . 294) (297 . 296) (299 . 298) (301 . 300) (303 . 302) (305 . 73) (307 . 306) (309 . 308) (311 . 310) (314 . 313) (316 . 315) (318 . 317) (320 . 319) (322 . 321) (324 . 323) (326 . 325) (328 . 327) (331 . 330) (333 . 332) (335 . 334) (337 . 336) (339 . 338) (341 . 340) (343 . 342) (345 . 344) (347 . 346) (349 . 348) (351 . 350) (353 . 352) (355 . 354) (357 . 356) (359 . 358) (361 . 360) (363 . 362) (365 . 364) (367 . 366) (369 . 368) (371 . 370) (373 . 372) (375 . 374) (378 . 377) (380 . 379) (382 . 381) (383 . 83) (384 . 579) (387 . 386) (389 . 388) (392 . 391) (396 . 395) (402 . 401) (405 . 502) (409 . 408) (410 . 573) (414 . 544) (417 . 416) (419 . 418) (421 . 420) (424 . 423) (429 . 428) (432 . 431) (436 . 435) (438 . 437) (441 . 440) (445 . 444) (447 . 503) (453 . 452) (454 . 452) (456 . 455) (457 . 455) (459 . 458) (460 . 458) (462 . 461) (464 . 463) (466 . 465) (468 . 467) (470 . 469) (472 . 471) (474 . 473) (476 . 475) (477 . 398) (479 . 478) (481 . 480) (483 . 482) (485 . 484) (487 . 486) (489 . 488) (491 . 490) (493 . 492) (495 . 494) (498 . 497) (499 . 497) (501 . 500) (505 . 504) (507 . 506) (509 . 508) (511 . 510) (513 . 512) (515 . 514) (517 . 516) (519 . 518) (521 . 520) (523 . 522) (525 . 524) (527 . 526) (529 . 528) (531 . 530) (533 . 532) (535 . 534) (537 . 536) (539 . 538) (541 . 540) (543 . 542) (547 . 546) (549 . 548) (551 . 550) (553 . 552) (555 . 554) (557 . 556) (559 . 558) (561 . 560) (563 . 562) (572 . 571) (578 . 577) (583 . 582) (585 . 584) (587 . 586) (589 . 588) (591 . 590) (592 . 11375) (593 . 11373) (595 . 385) (596 . 390) (598 . 393) (599 . 394) (601 . 399) (603 . 400) (608 . 403) (611 . 404) (616 . 407) (617 . 406) (619 . 11362) (623 . 412) (625 . 11374) (626 . 413) (629 . 415) (637 . 11364) (640 . 422) (643 . 425) (648 . 430) (649 . 580) (650 . 433) (651 . 434) (652 . 581) (658 . 439) (837 . 921) (881 . 880) (883 . 882) (887 . 886) (891 . 1021) (892 . 1022) (893 . 1023) (940 . 902) (941 . 904) (942 . 905) (943 . 906) (945 . 913) (946 . 914) (947 . 915) (948 . 916) (949 . 917) (950 . 918) (951 . 919) (952 . 920) (953 . 921) (954 . 922) (955 . 923) (956 . 924) (957 . 925) (958 . 926) (959 . 927) (960 . 928) (961 . 929) (962 . 931) (963 . 931) (964 . 932) (965 . 933) (966 . 934) (967 . 935) (968 . 936) (969 . 937) (970 . 938) (971 . 939) (972 . 908) (973 . 910) (974 . 911) (976 . 914) (977 . 920) (981 . 934) (982 . 928) (983 . 975) (985 . 984) (987 . 986) (989 . 988) (991 . 990) (993 . 992) (995 . 994) (997 . 996) (999 . 998) (1001 . 1000) (1003 . 1002) (1005 . 1004) (1007 . 1006) (1008 . 922) (1009 . 929) (1010 . 1017) (1013 . 917) (1016 . 1015) (1019 . 1018) (1072 . 1040) (1073 . 1041) (1074 . 1042) (1075 . 1043) (1076 . 1044) (1077 . 1045) (1078 . 1046) (1079 . 1047) (1080 . 1048) (1081 . 1049) (1082 . 1050) (1083 . 1051) (1084 . 1052) (1085 . 1053) (1086 . 1054) (1087 . 1055) (1088 . 1056) (1089 . 1057) (1090 . 1058) (1091 . 1059) (1092 . 1060) (1093 . 1061) (1094 . 1062) (1095 . 1063) (1096 . 1064) (1097 . 1065) (1098 . 1066) (1099 . 1067) (1100 . 1068) (1101 . 1069) (1102 . 1070) (1103 . 1071) (1104 . 1024) (1105 . 1025) (1106 . 1026) (1107 . 1027) (1108 . 1028) (1109 . 1029) (1110 . 1030) (1111 . 1031) (1112 . 1032) (1113 . 1033) (1114 . 1034) (1115 . 1035) (1116 . 1036) (1117 . 1037) (1118 . 1038) (1119 . 1039) (1121 . 1120) (1123 . 1122) (1125 . 1124) (1127 . 1126) (1129 . 1128) (1131 . 1130) (1133 . 1132) (1135 . 1134) (1137 . 1136) (1139 . 1138) (1141 . 1140) (1143 . 1142) (1145 . 1144) (1147 . 1146) (1149 . 1148) (1151 . 1150) (1153 . 1152) (1163 . 1162) (1165 . 1164) (1167 . 1166) (1169 . 1168) (1171 . 1170) (1173 . 1172) (1175 . 1174) (1177 . 1176) (1179 . 1178) (1181 . 1180) (1183 . 1182) (1185 . 1184) (1187 . 1186) (1189 . 1188) (1191 . 1190) (1193 . 1192) (1195 . 1194) (1197 . 1196) (1199 . 1198) (1201 . 1200) (1203 . 1202) (1205 . 1204) (1207 . 1206) (1209 . 1208) (1211 . 1210) (1213 . 1212) (1215 . 1214) (1218 . 1217) (1220 . 1219) (1222 . 1221) (1224 . 1223) (1226 . 1225) (1228 . 1227) (1230 . 1229) (1231 . 1216) (1233 . 1232) (1235 . 1234) (1237 . 1236) (1239 . 1238) (1241 . 1240) (1243 . 1242) (1245 . 1244) (1247 . 1246) (1249 . 1248) (1251 . 1250) (1253 . 1252) (1255 . 1254) (1257 . 1256) (1259 . 1258) (1261 . 1260) (1263 . 1262) (1265 . 1264) (1267 . 1266) (1269 . 1268) (1271 . 1270) (1273 . 1272) (1275 . 1274) (1277 . 1276) (1279 . 1278) (1281 . 1280) (1283 . 1282) (1285 . 1284) (1287 . 1286) (1289 . 1288) (1291 . 1290) (1293 . 1292) (1295 . 1294) (1297 . 1296) (1299 . 1298) (1301 . 1300) (1303 . 1302) (1305 . 1304) (1307 . 1306) (1309 . 1308) (1311 . 1310) (1313 . 1312) (1315 . 1314) (1377 . 1329) (1378 . 1330) (1379 . 1331) (1380 . 1332) (1381 . 1333) (1382 . 1334) (1383 . 1335) (1384 . 1336) (1385 . 1337) (1386 . 1338) (1387 . 1339) (1388 . 1340) (1389 . 1341) (1390 . 1342) (1391 . 1343) (1392 . 1344) (1393 . 1345) (1394 . 1346) (1395 . 1347) (1396 . 1348) (1397 . 1349) (1398 . 1350) (1399 . 1351) (1400 . 1352) (1401 . 1353) (1402 . 1354) (1403 . 1355) (1404 . 1356) (1405 . 1357) (1406 . 1358) (1407 . 1359) (1408 . 1360) (1409 . 1361) (1410 . 1362) (1411 . 1363) (1412 . 1364) (1413 . 1365) (1414 . 1366) (7545 . 42877) (7549 . 11363) (7681 . 7680) (7683 . 7682) (7685 . 7684) (7687 . 7686) (7689 . 7688) (7691 . 7690) (7693 . 7692) (7695 . 7694) (7697 . 7696) (7699 . 7698) (7701 . 7700) (7703 . 7702) (7705 . 7704) (7707 . 7706) (7709 . 7708) (7711 . 7710) (7713 . 7712) (7715 . 7714) (7717 . 7716) (7719 . 7718) (7721 . 7720) (7723 . 7722) (7725 . 7724) (7727 . 7726) (7729 . 7728) (7731 . 7730) (7733 . 7732) (7735 . 7734) (7737 . 7736) (7739 . 7738) (7741 . 7740) (7743 . 7742) (7745 . 7744) (7747 . 7746) (7749 . 7748) (7751 . 7750) (7753 . 7752) (7755 . 7754) (7757 . 7756) (7759 . 7758) (7761 . 7760) (7763 . 7762) (7765 . 7764) (7767 . 7766) (7769 . 7768) (7771 . 7770) (7773 . 7772) (7775 . 7774) (7777 . 7776) (7779 . 7778) (7781 . 7780) (7783 . 7782) (7785 . 7784) (7787 . 7786) (7789 . 7788) (7791 . 7790) (7793 . 7792) (7795 . 7794) (7797 . 7796) (7799 . 7798) (7801 . 7800) (7803 . 7802) (7805 . 7804) (7807 . 7806) (7809 . 7808) (7811 . 7810) (7813 . 7812) (7815 . 7814) (7817 . 7816) (7819 . 7818) (7821 . 7820) (7823 . 7822) (7825 . 7824) (7827 . 7826) (7829 . 7828) (7835 . 7776) (7841 . 7840) (7843 . 7842) (7845 . 7844) (7847 . 7846) (7849 . 7848) (7851 . 7850) (7853 . 7852) (7855 . 7854) (7857 . 7856) (7859 . 7858) (7861 . 7860) (7863 . 7862) (7865 . 7864) (7867 . 7866) (7869 . 7868) (7871 . 7870) (7873 . 7872) (7875 . 7874) (7877 . 7876) (7879 . 7878) (7881 . 7880) (7883 . 7882) (7885 . 7884) (7887 . 7886) (7889 . 7888) (7891 . 7890) (7893 . 7892) (7895 . 7894) (7897 . 7896) (7899 . 7898) (7901 . 7900) (7903 . 7902) (7905 . 7904) (7907 . 7906) (7909 . 7908) (7911 . 7910) (7913 . 7912) (7915 . 7914) (7917 . 7916) (7919 . 7918) (7921 . 7920) (7923 . 7922) (7925 . 7924) (7927 . 7926) (7929 . 7928) (7931 . 7930) (7933 . 7932) (7935 . 7934) (7936 . 7944) (7937 . 7945) (7938 . 7946) (7939 . 7947) (7940 . 7948) (7941 . 7949) (7942 . 7950) (7943 . 7951) (7952 . 7960) (7953 . 7961) (7954 . 7962) (7955 . 7963) (7956 . 7964) (7957 . 7965) (7968 . 7976) (7969 . 7977) (7970 . 7978) (7971 . 7979) (7972 . 7980) (7973 . 7981) (7974 . 7982) (7975 . 7983) (7984 . 7992) (7985 . 7993) (7986 . 7994) (7987 . 7995) (7988 . 7996) (7989 . 7997) (7990 . 7998) (7991 . 7999) (8000 . 8008) (8001 . 8009) (8002 . 8010) (8003 . 8011) (8004 . 8012) (8005 . 8013) (8017 . 8025) (8019 . 8027) (8021 . 8029) (8023 . 8031) (8032 . 8040) (8033 . 8041) (8034 . 8042) (8035 . 8043) (8036 . 8044) (8037 . 8045) (8038 . 8046) (8039 . 8047) (8048 . 8122) (8049 . 8123) (8050 . 8136) (8051 . 8137) (8052 . 8138) (8053 . 8139) (8054 . 8154) (8055 . 8155) (8056 . 8184) (8057 . 8185) (8058 . 8170) (8059 . 8171) (8060 . 8186) (8061 . 8187) (8064 . 8072) (8065 . 8073) (8066 . 8074) (8067 . 8075) (8068 . 8076) (8069 . 8077) (8070 . 8078) (8071 . 8079) (8080 . 8088) (8081 . 8089) (8082 . 8090) (8083 . 8091) (8084 . 8092) (8085 . 8093) (8086 . 8094) (8087 . 8095) (8096 . 8104) (8097 . 8105) (8098 . 8106) (8099 . 8107) (8100 . 8108) (8101 . 8109) (8102 . 8110) (8103 . 8111) (8112 . 8120) (8113 . 8121) (8115 . 8124) (8126 . 921) (8131 . 8140) (8144 . 8152) (8145 . 8153) (8160 . 8168) (8161 . 8169) (8165 . 8172) (8179 . 8188) (8526 . 8498) (8560 . 8544) (8561 . 8545) (8562 . 8546) (8563 . 8547) (8564 . 8548) (8565 . 8549) (8566 . 8550) (8567 . 8551) (8568 . 8552) (8569 . 8553) (8570 . 8554) (8571 . 8555) (8572 . 8556) (8573 . 8557) (8574 . 8558) (8575 . 8559) (8580 . 8579) (9424 . 9398) (9425 . 9399) (9426 . 9400) (9427 . 9401) (9428 . 9402) (9429 . 9403) (9430 . 9404) (9431 . 9405) (9432 . 9406) (9433 . 9407) (9434 . 9408) (9435 . 9409) (9436 . 9410) (9437 . 9411) (9438 . 9412) (9439 . 9413) (9440 . 9414) (9441 . 9415) (9442 . 9416) (9443 . 9417) (9444 . 9418) (9445 . 9419) (9446 . 9420) (9447 . 9421) (9448 . 9422) (9449 . 9423) (11312 . 11264) (11313 . 11265) (11314 . 11266) (11315 . 11267) (11316 . 11268) (11317 . 11269) (11318 . 11270) (11319 . 11271) (11320 . 11272) (11321 . 11273) (11322 . 11274) (11323 . 11275) (11324 . 11276) (11325 . 11277) (11326 . 11278) (11327 . 11279) (11328 . 11280) (11329 . 11281) (11330 . 11282) (11331 . 11283) (11332 . 11284) (11333 . 11285) (11334 . 11286) (11335 . 11287) (11336 . 11288) (11337 . 11289) (11338 . 11290) (11339 . 11291) (11340 . 11292) (11341 . 11293) (11342 . 11294) (11343 . 11295) (11344 . 11296) (11345 . 11297) (11346 . 11298) (11347 . 11299) (11348 . 11300) (11349 . 11301) (11350 . 11302) (11351 . 11303) (11352 . 11304) (11353 . 11305) (11354 . 11306) (11355 . 11307) (11356 . 11308) (11357 . 11309) (11358 . 11310) (11361 . 11360) (11365 . 570) (11366 . 574) (11368 . 11367) (11370 . 11369) (11372 . 11371) (11379 . 11378) (11382 . 11381) (11393 . 11392) (11395 . 11394) (11397 . 11396) (11399 . 11398) (11401 . 11400) (11403 . 11402) (11405 . 11404) (11407 . 11406) (11409 . 11408) (11411 . 11410) (11413 . 11412) (11415 . 11414) (11417 . 11416) (11419 . 11418) (11421 . 11420) (11423 . 11422) (11425 . 11424) (11427 . 11426) (11429 . 11428) (11431 . 11430) (11433 . 11432) (11435 . 11434) (11437 . 11436) (11439 . 11438) (11441 . 11440) (11443 . 11442) (11445 . 11444) (11447 . 11446) (11449 . 11448) (11451 . 11450) (11453 . 11452) (11455 . 11454) (11457 . 11456) (11459 . 11458) (11461 . 11460) (11463 . 11462) (11465 . 11464) (11467 . 11466) (11469 . 11468) (11471 . 11470) (11473 . 11472) (11475 . 11474) (11477 . 11476) (11479 . 11478) (11481 . 11480) (11483 . 11482) (11485 . 11484) (11487 . 11486) (11489 . 11488) (11491 . 11490) (11520 . 4256) (11521 . 4257) (11522 . 4258) (11523 . 4259) (11524 . 4260) (11525 . 4261) (11526 . 4262) (11527 . 4263) (11528 . 4264) (11529 . 4265) (11530 . 4266) (11531 . 4267) (11532 . 4268) (11533 . 4269) (11534 . 4270) (11535 . 4271) (11536 . 4272) (11537 . 4273) (11538 . 4274) (11539 . 4275) (11540 . 4276) (11541 . 4277) (11542 . 4278) (11543 . 4279) (11544 . 4280) (11545 . 4281) (11546 . 4282) (11547 . 4283) (11548 . 4284) (11549 . 4285) (11550 . 4286) (11551 . 4287) (11552 . 4288) (11553 . 4289) (11554 . 4290) (11555 . 4291) (11556 . 4292) (11557 . 4293) (42561 . 42560) (42563 . 42562) (42565 . 42564) (42567 . 42566) (42569 . 42568) (42571 . 42570) (42573 . 42572) (42575 . 42574) (42577 . 42576) (42579 . 42578) (42581 . 42580) (42583 . 42582) (42585 . 42584) (42587 . 42586) (42589 . 42588) (42591 . 42590) (42595 . 42594) (42597 . 42596) (42599 . 42598) (42601 . 42600) (42603 . 42602) (42605 . 42604) (42625 . 42624) (42627 . 42626) (42629 . 42628) (42631 . 42630) (42633 . 42632) (42635 . 42634) (42637 . 42636) (42639 . 42638) (42641 . 42640) (42643 . 42642) (42645 . 42644) (42647 . 42646) (42787 . 42786) (42789 . 42788) (42791 . 42790) (42793 . 42792) (42795 . 42794) (42797 . 42796) (42799 . 42798) (42803 . 42802) (42805 . 42804) (42807 . 42806) (42809 . 42808) (42811 . 42810) (42813 . 42812) (42815 . 42814) (42817 . 42816) (42819 . 42818) (42821 . 42820) (42823 . 42822) (42825 . 42824) (42827 . 42826) (42829 . 42828) (42831 . 42830) (42833 . 42832) (42835 . 42834) (42837 . 42836) (42839 . 42838) (42841 . 42840) (42843 . 42842) (42845 . 42844) (42847 . 42846) (42849 . 42848) (42851 . 42850) (42853 . 42852) (42855 . 42854) (42857 . 42856) (42859 . 42858) (42861 . 42860) (42863 . 42862) (42874 . 42873) (42876 . 42875) (42879 . 42878) (42881 . 42880) (42883 . 42882) (42885 . 42884) (42887 . 42886) (42892 . 42891) (65345 . 65313) (65346 . 65314) (65347 . 65315) (65348 . 65316) (65349 . 65317) (65350 . 65318) (65351 . 65319) (65352 . 65320) (65353 . 65321) (65354 . 65322) (65355 . 65323) (65356 . 65324) (65357 . 65325) (65358 . 65326) (65359 . 65327) (65360 . 65328) (65361 . 65329) (65362 . 65330) (65363 . 65331) (65364 . 65332) (65365 . 65333) (65366 . 65334) (65367 . 65335) (65368 . 65336) (65369 . 65337) (65370 . 65338) (66600 . 66560) (66601 . 66561) (66602 . 66562) (66603 . 66563) (66604 . 66564) (66605 . 66565) (66606 . 66566) (66607 . 66567) (66608 . 66568) (66609 . 66569) (66610 . 66570) (66611 . 66571) (66612 . 66572) (66613 . 66573) (66614 . 66574) (66615 . 66575) (66616 . 66576) (66617 . 66577) (66618 . 66578) (66619 . 66579) (66620 . 66580) (66621 . 66581) (66622 . 66582) (66623 . 66583) (66624 . 66584) (66625 . 66585) (66626 . 66586) (66627 . 66587) (66628 . 66588) (66629 . 66589) (66630 . 66590) (66631 . 66591) (66632 . 66592) (66633 . 66593) (66634 . 66594) (66635 . 66595) (66636 . 66596) (66637 . 66597) (66638 . 66598) (66639 . 66599))) (set! G21825 '#f) (set! G21827 '#f) (set! G21829 '#f) (set! G21831 '#f) (set! G21833 '#f) (set! G21835 '#f) (set! G21837 '#f) (set! G21839 '#f) (set! G21841 '#f) (set! G21843 '#f) (set! G21845 '#f) (set! G21847 '#f) (set! G21849 '#f) (set! G21851 '#f) (set! G21853 '#f) (set! G21855 (lambda (G21957) (begin (if G21845 (void) (set! G21845 (G21791 G21803))) (hashtable-ref G21845 (char->integer G21957) '#f)))) (set! G21857 (lambda (G21959) ((lambda (G21961) (begin (for-each (lambda (G21963) (if (number? G21963) (hashtable-set! G21961 (integer->char G21963) '#t) (if (pair? G21963) (letrec ((G21965 (lambda (G21967 G21968) (if (> G21967 G21968) '() (begin (hashtable-set! G21961 (integer->char G21967) '#t) (G21965 (+ G21967 '1) G21968)))))) (G21965 (car G21963) (cdr G21963))) (void)))) G21959) G21961)) (make-eq-hashtable)))) (set! G21859 (lambda (G21971) (begin (if G21839 (void) (set! G21839 (G21857 G21809))) (hashtable-ref G21839 G21971 '#f)))) (set! G21861 (lambda (G21973) (begin (if G21833 (void) (set! G21833 (G21857 G21811))) (hashtable-ref G21833 G21973 '#f)))) (set! G21863 (lambda (G21975) (begin (if G21835 (void) (set! G21835 (G21857 G21813))) (hashtable-ref G21835 G21975 '#f)))) (set! G21865 (lambda (G21977) (begin (if G21837 (void) (set! G21837 (G21857 G21815))) (hashtable-ref G21837 G21977 '#f)))) (set! G21867 (lambda (G21979) (G21859 G21979))) (set! G21869 (lambda (G21981) ((lambda (G21983) (if (memv G21983 '(Lu Ll Lt Lm Lo Nl)) '#t (if (memv G21983 '(Mn Mc So)) (G21861 G21981) '#f))) (G21887 G21981)))) (set! G21871 (lambda (G21984) (eq? (G21887 G21984) 'Nd))) (set! G21873 (lambda (G21986) ((lambda (G21988) (if (memv G21988 '(Lu)) '#t (if (memv G21988 '(Nl So)) (G21863 G21986) '#f))) (G21887 G21986)))) (set! G21875 (lambda (G21989) ((lambda (G21991) (if (memv G21991 '(Ll)) '#t (if (memv G21991 '(Lm Mn Nl So)) (G21865 G21989) '#f))) (G21887 G21989)))) (set! G21877 (lambda (G21992) (eq? (G21887 G21992) 'Lt))) (set! G21879 (lambda (G21994) (begin (if G21825 (void) (set! G21825 (G21791 G21823))) ((lambda (G21996) (if G21996 (integer->char G21996) G21994)) (hashtable-ref G21825 (char->integer G21994)))))) (set! G21881 (lambda (G21998) (begin (if G21827 (void) (set! G21827 (G21791 G21821))) ((lambda (G22000) (if G22000 (integer->char G22000) G21998)) (hashtable-ref G21827 (char->integer G21998)))))) (set! G21883 (lambda (G22002) (begin (if G21829 (void) (set! G21829 (G21791 G21819))) ((lambda (G22004) (if G22004 (integer->char G22004) (G21879 G22002))) (hashtable-ref G21829 (char->integer G22002)))))) (set! G21885 (lambda (G22006) (if ((lambda (G22008) (if G22008 G22008 (begin '#f (char=? G22006 '#\ı)))) (char=? G22006 '#\İ)) G22006 (G21881 (G21879 G22006))))) (set! G21887 (lambda (G22010) (begin (if G21831 (void) ((lambda (G22012) (begin (for-each (lambda (G22014) (for-each (lambda (G22016) (if (number? G22016) (hashtable-set! G22012 (integer->char G22016) (car G22014)) (if (pair? G22016) (letrec ((G22018 (lambda (G22020 G22021) (if (> G22020 G22021) '() (begin (hashtable-set! G22012 (integer->char G22020) (car G22014)) (G22018 (+ G22020 '1) G22021)))))) (G22018 (car G22016) (cdr G22016))) (void)))) (cdr G22014))) G21817) (set! G21831 G22012))) (make-eq-hashtable))) (hashtable-ref G21831 G22010 'Cn)))) (set! G21889 (lambda G22024 (apply char=? (map G21883 G22024)))) (set! G21891 (lambda G22026 (apply char<? (map G21883 G22026)))) (set! G21893 (lambda G22028 (apply char>? (map G21883 G22028)))) (set! G21895 (lambda G22030 (apply char<=? (map G21883 G22030)))) (set! G21897 (lambda G22032 (apply char>=? (map G21883 G22032)))) (set! G21899 (lambda (G22034) (begin (if G21841 (void) (set! G21841 (G21791 G21807))) (hashtable-ref G21841 (char->integer G22034) '#f)))) (set! G21901 (lambda (G22036) (begin (if G21843 (void) (set! G21843 (G21791 G21805))) (hashtable-ref G21843 (char->integer G22036) '#f)))) (set! G21903 (lambda (G22038) ((lambda (G22040) (call-with-values (lambda () (open-string-output-port)) (lambda (G22042 G22043) ((lambda (G22046) (if (string=? G22038 G22046) G22038 G22046)) (letrec ((G22048 (lambda (G22050 G22051 G22052) (if (eof-object? G22050) (G22043) (if (if ((lambda (G22056) (if G22056 G22056 (begin '#f (eof-object? G22052)))) (G21867 G22052)) (if (not (G21867 G22051)) (begin '#f ((lambda (G22058) (if G22058 G22058 (begin '#f (char=? G22050 '#\σ)))) (char=? G22050 '#\Σ))) '#f) '#f) (begin (display '#\ς G22042) (G22048 (read-char G22040) G22050 (lookahead-char G22040))) ((lambda (G22060) (if G22060 ((lambda (G22062) (begin (for-each (lambda (G22064) (display (G21881 (integer->char G22064)) G22042)) G22062) (G22048 (read-char G22040) G22050 (lookahead-char G22040)))) G22060) (begin (display (G21881 G22050) G22042) (G22048 (read-char G22040) G22050 (lookahead-char G22040))))) (G21901 G22050))))))) (G22048 (read-char G22040) '#\space '#\space)))))) (open-string-input-port G22038)))) (set! G21905 (lambda (G22066) ((lambda (G22068) (call-with-values (lambda () (open-string-output-port)) (lambda (G22070 G22071) ((lambda (G22074) (if (string=? G22066 G22074) G22066 G22074)) (letrec ((G22076 (lambda (G22078) (if (eof-object? G22078) (G22071) ((lambda (G22080) (if G22080 ((lambda (G22082) (begin (for-each (lambda (G22084) (display (G21879 (integer->char G22084)) G22070)) G22082) (G22076 (read-char G22068)))) G22080) (begin (display (G21879 G22078) G22070) (G22076 (read-char G22068))))) (G21899 G22078)))))) (G22076 (read-char G22068))))))) (open-string-input-port G22066)))) (set! G21907 (lambda (G22086) ((lambda (G22088) (call-with-values (lambda () (open-string-output-port)) (lambda (G22090 G22091) ((lambda (G22094) (if (string=? G22086 G22094) G22086 G22094)) (letrec ((G22096 (lambda (G22098) (if (eof-object? G22098) (G22091) ((lambda (G22100) (if G22100 ((lambda (G22102) (begin (for-each (lambda (G22104) (display (G21885 (integer->char G22104)) G22090)) G22102) (G22096 (read-char G22088)))) G22100) (begin (display (G21885 G22098) G22090) (G22096 (read-char G22088))))) (G21855 G22098)))))) (G22096 (read-char G22088))))))) (open-string-input-port G22086)))) (set! G21909 (lambda (G22106) ((lambda (G22108) (call-with-values (lambda () (open-string-output-port)) (lambda (G22110 G22111) (letrec ((G22114 (lambda () (letrec ((G22120 (lambda (G22122) (if (eof-object? G22122) (G22111) ((lambda (G22124) (if (memv G22124 '(Ll Lu Lt)) (begin (display (G21883 G22122) G22110) (G22115)) (begin (display G22122 G22110) (G22120 (read-char G22108))))) (G21887 G22122)))))) (G22120 (read-char G22108))))) (G22115 (lambda () (letrec ((G22125 (lambda (G22127) (if (eof-object? G22127) (G22111) ((lambda (G22129) (if (memv G22129 '(Ll Lu Lt)) (begin (display (G21881 G22127) G22110) (G22125 (read-char G22108))) (if (memv G22129 '(Po Pf)) ((lambda (G22130) (if (memv G22130 '(#\' #\: #\· #\״ #\’ #\‧)) (begin (display G22127 G22110) (G22125 (read-char G22108))) (begin (display G22127 G22110) (G22114)))) G22127) (begin (display G22127 G22110) (G22114))))) (G21887 G22127)))))) (G22125 (read-char G22108)))))) ((lambda (G22118) (if (string=? G22106 G22118) G22106 G22118)) (G22114)))))) (open-string-input-port G22106)))) (set! G21911 (lambda (G22131) ((lambda (G22133 G22135) (begin (set! G22133 (lambda (G22141 G22142) (string->symbol (format '"x~d$~d" G22141 G22142)))) (set! G22135 (lambda (G22137 G22138) (hashtable-ref G21853 (G22133 (char->integer G22137) (char->integer G22138)) '#f))) (begin (if G21853 (void) ((lambda (G22145) (begin (for-each (lambda (G22147) (hashtable-set! G22145 G22147 '#t)) G21795) ((lambda (G22149) (begin (for-each (lambda (G22151) (if (if (= (length (cdr G22151)) '2) (begin '#f (not (hashtable-ref G22145 (cadr G22151)))) '#f) (hashtable-set! G22149 (apply G22133 (cdr G22151)) (integer->char (car G22151))) '())) G21801) (set! G21853 G22149))) (make-eq-hashtable)))) (make-eq-hashtable))) ((lambda (G22153) ((lambda (G22155) ((lambda (G22157) ((lambda () (letrec ((G22159 (lambda (G22161 G22162 G22163 G22164 G22165) (if (>= G22161 G22153) (substring G22131 '0 G22165) ((lambda (G22171) ((lambda (G22173) ((lambda () ((lambda (G22175) (if G22175 ((lambda (G22177) (begin (string-set! G22131 G22164 G22177) (G22159 (+ G22161 '1) G22177 (G21931 G22177) G22164 G22165))) G22175) (begin (string-set! G22131 G22165 G22171) (if (= G22173 '0) (G22159 (+ G22161 '1) G22171 G22173 G22165 (+ G22165 '1)) (G22159 (+ G22161 '1) G22162 G22173 G22164 (+ G22165 '1)))))) (if ((lambda (G22179) (if G22179 G22179 (begin '#f (< G22163 G22173)))) (= G22163 '0)) (begin '#f (G22135 G22162 G22171)) '#f))))) (G21931 G22171))) (string-ref G22131 G22161)))))) (G22159 '1 G22155 G22157 '0 '1))))) (if (zero? (G21931 G22155)) '0 '256))) (string-ref G22131 '0))) (string-length G22131))))) '#f '#f))) (set! G21913 (lambda G22181 (apply string=? (map G21907 G22181)))) (set! G21915 (lambda G22183 (apply string<? (map G21907 G22183)))) (set! G21917 (lambda G22185 (apply string>? (map G21907 G22185)))) (set! G21919 (lambda G22187 (apply string<=? (map G21907 G22187)))) (set! G21921 (lambda G22189 (apply string>=? (map G21907 G22189)))) (set! G21923 (lambda (G22191) (begin (if G21847 (void) (set! G21847 (G21791 G21801))) (hashtable-ref G21847 (char->integer G22191) '#f)))) (set! G21925 (lambda (G22193 G22194) ((lambda (G22197) (if G22197 ((lambda (G22199) (for-each (lambda (G22201) (G21925 (integer->char G22201) G22194)) G22199)) G22197) (display G22193 G22194))) (G21923 G22193)))) (set! G21927 (lambda (G22203) (begin (if G21849 (void) (set! G21849 (G21791 G21797))) (hashtable-ref G21849 (char->integer G22203) '#f)))) (set! G21929 (lambda (G22205 G22206) ((lambda (G22209) (if G22209 ((lambda (G22211) (for-each (lambda (G22213) (G21929 (integer->char G22213) G22206)) G22211)) G22209) ((lambda (G22215) (if G22215 ((lambda (G22217) (for-each (lambda (G22219) (G21929 (integer->char G22219) G22206)) G22217)) G22215) (display G22205 G22206))) (G21923 G22205)))) (G21927 G22205)))) (set! G21931 (lambda (G22221) (begin (if G21851 (void) ((lambda (G22223) (begin (for-each (lambda (G22225) (for-each (lambda (G22227) (hashtable-set! G22223 G22227 (car G22225))) (cdr G22225))) G21799) (set! G21851 G22223))) (make-eq-hashtable))) (hashtable-ref G21851 (char->integer G22221) '0)))) (set! G21933 (lambda (G22229) ((lambda (G22231) (begin (set! G22231 (lambda (G22233 G22234) (letrec ((G22237 (lambda (G22239) (if (= G22234 G22239) G22239 (if (zero? (G21931 (string-ref G22229 G22239))) G22239 (G22237 (+ G22239 '1))))))) (G22237 G22233)))) ((lambda (G22241) (call-with-values (lambda () (open-string-output-port)) (lambda (G22243 G22244) (letrec ((G22247 (lambda (G22249) (if (= G22249 G22241) (G22244) (begin (display (string-ref G22229 G22249) G22243) ((lambda (G22251) (begin (if (> (- G22251 G22249) '1) (for-each (lambda (G22253) (display G22253 G22243)) (string->list (G21935 (lambda (G22255 G22256) (< (G21931 G22255) (G21931 G22256))) (substring G22229 (+ G22249 '1) G22251)))) (void)) (G22247 G22251))) (G22231 (+ G22249 '1) G22241))))))) (G22247 '0))))) (string-length G22229)))) '#f))) (set! G21935 (lambda (G22259 G22260) ((lambda (G22263) (letrec ((G22265 (lambda (G22267) (if (= G22267 (- G22263 '1)) G22260 (letrec ((G22269 (lambda (G22271) (if (= G22267 G22271) (G22265 (+ G22267 '1)) (begin (if (G22259 (string-ref G22260 G22271) (string-ref G22260 (- G22271 '1))) ((lambda (G22273) (begin (string-set! G22260 G22271 (string-ref G22260 (- G22271 '1))) (string-set! G22260 (- G22271 '1) G22273))) (string-ref G22260 G22271)) (void)) (G22269 (- G22271 '1))))))) (G22269 (- G22263 '1))))))) (G22265 '0))) (string-length G22260)))) (set! G21937 (lambda (G22275) ((lambda (G22277) (call-with-values (lambda () (open-string-output-port)) (lambda (G22279 G22280) ((lambda (G22283) (if (string=? G22275 G22283) G22275 G22283)) (letrec ((G22285 (lambda (G22287) (if (eof-object? G22287) (G21933 (G22280)) (begin (G21925 G22287 G22279) (G22285 (read-char G22277))))))) (G22285 (read-char G22277))))))) (open-string-input-port G22275)))) (set! G21939 (lambda (G22289) ((lambda (G22291) (call-with-values (lambda () (open-string-output-port)) (lambda (G22293 G22294) ((lambda (G22297) (if (string=? G22289 G22297) G22289 G22297)) (letrec ((G22299 (lambda (G22301) (if (eof-object? G22301) (G21933 (G22294)) (begin (G21929 G22301 G22293) (G22299 (read-char G22291))))))) (G22299 (read-char G22291))))))) (open-string-input-port G22289)))) (set! G21941 (lambda (G22303) (G21911 (G21937 G22303)))) (set! G21943 (lambda (G22305) (G21911 (G21939 G22305)))) (begin (set! G22307 G21943) (set! G22308 G21941) (set! G22309 G21939) (set! G22310 G21937) (set! G22311 G21935) (set! G22312 G21933) (set! G22313 G21931) (set! G22314 G21929) (set! G22315 G21927) (set! G22316 G21925) (set! G22317 G21923) (set! G22318 G21921) (set! G22319 G21919) (set! G22320 G21917) (set! G22321 G21915) (set! G22322 G21913) (set! G22323 G21911) (set! G22324 G21909) (set! G22325 G21907) (set! G22326 G21905) (set! G22327 G21903) (set! G22328 G21901) (set! G22329 G21899) (set! G22330 G21897) (set! G22331 G21895) (set! G22332 G21893) (set! G22333 G21891) (set! G22334 G21889) (set! G22335 G21887) (set! G22336 G21885) (set! G22337 G21883) (set! G22338 G21881) (set! G22339 G21879) (set! G22340 G21877) (set! G22341 G21875) (set! G22342 G21873) (set! G22343 G21871) (set! G22344 G21869) (set! G22345 G21867) (set! G22346 G21865) (set! G22347 G21863) (set! G22348 G21861) (set! G22349 G21859) (set! G22350 G21857) (set! G22351 G21855) (set! G22352 G21853) (set! G22353 G21851) (set! G22354 G21849) (set! G22355 G21847) (set! G22356 G21845) (set! G22357 G21843) (set! G22358 G21841) (set! G22359 G21839) (set! G22360 G21837) (set! G22361 G21835) (set! G22362 G21833) (set! G22363 G21831) (set! G22364 G21829) (set! G22365 G21827) (set! G22366 G21825) (set! G22367 G21823) (set! G22368 G21821) (set! G22369 G21819) (set! G22370 G21817) (set! G22371 G21815) (set! G22372 G21813) (set! G22373 G21811) (set! G22374 G21809) (set! G22375 G21807) (set! G22376 G21805) (set! G22377 G21803) (set! G22378 G21801) (set! G22379 G21799) (set! G22380 G21797) (set! G22381 G21795) (set! G22382 G21793) (set! G22383 G21791)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (G14057 (lambda (G23259) ((lambda (G23261) (if G23261 (cdr G23261) '#f)) (assq G23259 '((syntax-error . G20865) (syntax-dispatch . G20956) (load . G22484) (interaction-environment . G20856) (string-upcase . G22326) (string-titlecase . G22324) (string-normalize-nfkd . G22309) (string-normalize-nfkc . G22307) (string-normalize-nfd . G22310) (string-normalize-nfc . G22308) (string-foldcase . G22325) (string-downcase . G22327) (string-ci>? . G22320) (string-ci>=? . G22318) (string-ci=? . G22322) (string-ci<? . G22321) (string-ci<=? . G22319) (char-whitespace? . G22345) (char-upper-case? . G22342) (char-title-case? . G22340) (char-numeric? . G22343) (char-lower-case? . G22341) (char-general-category . G22335) (char-upcase . G22339) (char-titlecase . G22337) (char-foldcase . G22336) (char-downcase . G22338) (char-ci>? . G22332) (char-ci>=? . G22330) (char-ci=? . G22334) (char-ci<? . G22333) (char-ci<=? . G22331) (char-alphabetic? . G22344) (make-variable-transformer . G21021) (identifier? . G20861) (generate-temporaries . G20869) (free-identifier=? . G20868) (syntax->datum . G20859) (datum->syntax . G20860) (bound-identifier=? . G20867) (make-i/o-write-error . G21773) (make-i/o-read-error . G21779) (make-i/o-port-error . G21727) (make-i/o-invalid-position-error . G21767) (make-i/o-filename-error . G21759) (make-i/o-file-protection-error . G21751) (make-i/o-file-is-read-only-error . G21745) (make-i/o-file-does-not-exist-error . G21733) (make-i/o-file-already-exists-error . G21739) (make-i/o-error . G21785) (make-i/o-encoding-error . G21713) (make-i/o-decoding-error . G21719) (i/o-write-error? . G21772) (i/o-read-error? . G21778) (i/o-port-error? . G21725) (i/o-invalid-position-error? . G21765) (i/o-filename-error? . G21757) (i/o-file-protection-error? . G21750) (i/o-file-is-read-only-error? . G21744) (i/o-file-does-not-exist-error? . G21732) (i/o-file-already-exists-error? . G21738) (i/o-error? . G21784) (i/o-error-port . G21724) (i/o-error-filename . G21756) (i/o-encoding-error? . G21711) (i/o-encoding-error-char . G21710) (i/o-decoding-error? . G21718) (scheme-report-environment . G20878) (null-environment . G20879) (command-line . G22487) (eval . G20876) (environment . G20880) (who-condition? . G21413) (warning? . G21452) (violation? . G21434) (undefined-violation? . G21378) (syntax-violation? . G21386) (syntax-violation-subform . G21384) (syntax-violation-form . G21385) (syntax-violation . G20862) (serious-condition? . G21446) (non-continuable-violation? . G21406) (message-condition? . G21459) (make-who-condition . G21415) (make-warning . G21453) (make-violation . G21435) (make-undefined-violation . G21379) (make-syntax-violation . G21389) (make-serious-condition . G21447) (make-non-continuable-violation . G21407) (make-message-condition . G21461) (make-lexical-violation . G21395) (make-irritants-condition . G21423) (make-implementation-restriction-violation . G21401) (make-error . G21441) (make-assertion-violation . G21429) (lexical-violation? . G21394) (irritants-condition? . G21421) (implementation-restriction-violation? . G21400) (error? . G21440) (condition-who . G21412) (condition-message . G21458) (condition-irritants . G21420) (assertion-violation? . G21428)))))) (G14498 'G23216 '(ikarus interaction) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G14498 'G23217 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G22538) (unquote . G22537) (delay . G22530) (or . G22528) (and . G22527) (do . G22526) (cond . G22525) (let* . G22524) (let . G22523) (quasiquote . G22518) (syntax-rules . G22517) (case . G22512) (if . G22508) (letrec . G22506) (lambda . G22503) (quote . G22500) (letrec-syntax . G22498) (let-syntax . G22497) (set! . G22496) (begin . G22494) (define-syntax . G22492) (define . G22491)) '() values values '#f '#f '#t '#f) (G14498 'G23218 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G21918) (string-ci>=? . G21922) (string-ci=? . G21914) (string-ci<? . G21916) (string-ci<=? . G21920) (char-whitespace? . G21868) (char-upper-case? . G21874) (char-numeric? . G21872) (char-lower-case? . G21876) (char-upcase . G21880) (char-downcase . G21882) (char-ci>? . G21894) (char-ci>=? . G21898) (char-ci=? . G21890) (char-ci<? . G21892) (char-ci<=? . G21896) (char-alphabetic? . G21870) (call-with-output-file . G23056) (call-with-input-file . G23055) (write-char . G23054) (write . G23053) (with-output-to-file . G23052) (with-input-from-file . G23051) (read-char . G23050) (read . G23049) (peek-char . G23048) (open-output-file . G23047) (open-input-file . G23046) (newline . G23045) (display . G23044) (close-output-port . G23043) (close-input-port . G23042) (eof-object . G23040) (current-output-port . G23038) (current-input-port . G23037) (output-port? . G23036) (input-port? . G23035) (scheme-report-environment . G15484) (quotient . G22977) (null-environment . G15482) (remainder . G22976) (modulo . G22975) (inexact->exact . G22974) (force . G22973) (exact->inexact . G22972) (string-fill! . G22970) (string-set! . G22969) (set-cdr! . G22968) (set-car! . G22967) (memv . G22961) (memq . G22960) (member . G22958) (assv . G22950) (assq . G22949) (assoc . G22947) (eval . G15488) (zero? . G22750) (vector? . G22749) (vector-set! . G22748) (vector-ref . G22747) (vector-length . G22745) (vector-fill! . G22743) (vector->list . G22742) (vector . G22741) (values . G22740) (truncate . G22739) (tan . G22738) (symbol? . G22737) (symbol->string . G22735) (substring . G22734) (string? . G22733) (string>? . G22732) (string>=? . G22731) (string=? . G22730) (string<? . G22729) (string<=? . G22728) (string-ref . G22727) (string-length . G22726) (string-copy . G22724) (string-append . G22723) (string->symbol . G22722) (string->number . G22721) (string->list . G22720) (string . G22719) (sqrt . G22718) (sin . G22717) (round . G22716) (reverse . G22715) (real? . G22714) (real-part . G22712) (rationalize . G22711) (rational? . G22710) (procedure? . G22708) (positive? . G22707) (pair? . G22706) (odd? . G22705) (numerator . G22704) (number? . G22703) (number->string . G22702) (not . G22700) (negative? . G22699) (min . G22697) (max . G22696) (map . G22695) (make-vector . G22694) (make-string . G22693) (make-rectangular . G22692) (make-polar . G22691) (magnitude . G22690) (log . G22689) (list? . G22688) (list-tail . G22687) (list-ref . G22686) (list->vector . G22685) (list->string . G22684) (list . G22683) (length . G22682) (lcm . G22681) (integer? . G22680) (integer->char . G22678) (inexact? . G22676) (imag-part . G22674) (gcd . G22673) (for-each . G22672) (floor . G22671) (expt . G22669) (exp . G22668) (exact? . G22667) (even? . G22664) (eqv? . G22662) (equal? . G22661) (eq? . G22660) (dynamic-wind . G22659) (denominator . G22652) (cos . G22651) (cons . G22650) (complex? . G22649) (char? . G22648) (char>? . G22647) (char>=? . G22646) (char=? . G22645) (char<? . G22644) (char<=? . G22643) (char->integer . G22642) (ceiling . G22641) (call-with-values . G22640) (call-with-current-continuation . G22638) (cddddr . G22637) (cdddar . G22636) (cddadr . G22635) (cddaar . G22634) (cdaddr . G22633) (cdadar . G22632) (cdaadr . G22631) (cdaaar . G22630) (cadddr . G22629) (caddar . G22628) (cadadr . G22627) (cadaar . G22626) (caaddr . G22625) (caadar . G22624) (caaadr . G22623) (caaaar . G22622) (cdddr . G22621) (cddar . G22620) (cdadr . G22619) (cdaar . G22618) (caddr . G22617) (cadar . G22616) (caadr . G22615) (caaar . G22614) (cddr . G22613) (cdar . G22612) (cadr . G22611) (caar . G22610) (cdr . G22609) (car . G22608) (boolean? . G22607) (atan . G22605) (asin . G22603) (apply . G22602) (append . G22601) (angle . G22600) (acos . G22599) (abs . G22598) (/ . G22597) (* . G22596) (- . G22595) (+ . G22594) (>= . G22593) (> . G22592) (= . G22591) (<= . G22590) (< . G22589) (unquote-splicing . G22538) (unquote . G22537) (delay . G22530) (or . G22528) (and . G22527) (do . G22526) (cond . G22525) (let* . G22524) (let . G22523) (quasiquote . G22518) (syntax-rules . G22517) (case . G22512) (if . G22508) (letrec . G22506) (lambda . G22503) (quote . G22500) (letrec-syntax . G22498) (let-syntax . G22497) (set! . G22496) (begin . G22494) (define-syntax . G22492) (define . G22491)) '() values values '#f '#f '#t '#f) (G14498 'G23219 '(psyntax modules) '() '() '() '() '((module . G22493)) '() values values '#f '#f '#t '#f) (G14498 'G23220 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G14498 'G23221 '(rnrs) '(6) '() '() '() '((regexp? . G23152) (string-upcase . G21906) (string-titlecase . G21910) (string-normalize-nfkd . G21940) (string-normalize-nfkc . G21944) (string-normalize-nfd . G21938) (string-normalize-nfc . G21942) (string-foldcase . G21908) (string-downcase . G21904) (string-ci>? . G21918) (string-ci>=? . G21922) (string-ci=? . G21914) (string-ci<? . G21916) (string-ci<=? . G21920) (char-whitespace? . G21868) (char-upper-case? . G21874) (char-title-case? . G21878) (char-numeric? . G21872) (char-lower-case? . G21876) (char-general-category . G21888) (char-upcase . G21880) (char-titlecase . G21884) (char-foldcase . G21886) (char-downcase . G21882) (char-ci>? . G21894) (char-ci>=? . G21898) (char-ci=? . G21890) (char-ci<? . G21892) (char-ci<=? . G21896) (char-alphabetic? . G21870) (make-variable-transformer . G14969) (identifier? . G15518) (generate-temporaries . G15502) (free-identifier=? . G15504) (syntax->datum . G15522) (datum->syntax . G15520) (bound-identifier=? . G15506) (record-type-descriptor? . G23099) (record-predicate . G23098) (record-mutator . G23097) (record-constructor . G23096) (record-accessor . G23095) (make-record-type-descriptor . G23094) (make-record-constructor-descriptor . G23093) (record? . G23092) (record-type-uid . G23091) (record-type-sealed? . G23090) (record-type-parent . G23089) (record-type-opaque? . G23088) (record-type-name . G23087) (record-type-generative? . G23086) (record-type-field-names . G23085) (record-rtd . G23084) (record-field-mutable? . G23083) (delete-file . G23082) (file-exists? . G23081) (vector-sort! . G23080) (vector-sort . G23079) (list-sort . G23078) (symbol-hash . G23077) (string-ci-hash . G23076) (string-hash . G23075) (equal-hash . G23074) (hashtable-equivalence-function . G23073) (make-hashtable . G23072) (hashtable-hash-function . G23071) (make-eqv-hashtable . G23070) (make-eq-hashtable . G23069) (hashtable? . G23068) (hashtable-update! . G23067) (hashtable-size . G23066) (hashtable-set! . G23065) (hashtable-ref . G23064) (hashtable-mutable? . G23063) (hashtable-keys . G23062) (hashtable-entries . G23061) (hashtable-delete! . G23060) (hashtable-copy . G23059) (hashtable-contains? . G23058) (hashtable-clear! . G23057) (call-with-output-file . G23056) (call-with-input-file . G23055) (write-char . G23054) (write . G23053) (with-output-to-file . G23052) (with-input-from-file . G23051) (read-char . G23050) (read . G23049) (peek-char . G23048) (open-output-file . G23047) (open-input-file . G23046) (newline . G23045) (display . G23044) (close-output-port . G23043) (close-input-port . G23042) (eof-object? . G23041) (eof-object . G23040) (current-error-port . G23039) (current-output-port . G23038) (current-input-port . G23037) (output-port? . G23036) (input-port? . G23035) (utf-8-codec . G23034) (utf-16-codec . G23033) (transcoder-error-handling-mode . G23032) (transcoder-eol-style . G23031) (transcoder-codec . G23030) (transcoded-port . G23029) (textual-port? . G23028) (string->bytevector . G23027) (standard-output-port . G23026) (standard-input-port . G23025) (standard-error-port . G23024) (set-port-position! . G23023) (put-u8 . G23022) (put-string . G23021) (put-datum . G23020) (put-char . G23019) (put-bytevector . G23018) (port? . G23017) (port-transcoder . G23016) (port-position . G23015) (port-has-set-port-position!? . G23014) (port-has-port-position? . G23013) (port-eof? . G23012) (output-port-buffer-mode . G23011) (open-string-output-port . G23010) (open-string-input-port . G23009) (open-file-output-port . G23008) (open-file-input/output-port . G23007) (open-file-input-port . G23006) (open-bytevector-output-port . G23005) (open-bytevector-input-port . G23004) (native-transcoder . G23003) (native-eol-style . G23002) (make-transcoder . G23001) (latin-1-codec . G23000) (make-i/o-write-error . G21525) (make-i/o-read-error . G21507) (make-i/o-port-error . G21662) (make-i/o-invalid-position-error . G21544) (make-i/o-filename-error . G21567) (make-i/o-file-protection-error . G21589) (make-i/o-file-is-read-only-error . G21607) (make-i/o-file-does-not-exist-error . G21643) (make-i/o-file-already-exists-error . G21625) (make-i/o-error . G21489) (make-i/o-encoding-error . G21703) (make-i/o-decoding-error . G21684) (make-custom-textual-output-port . G22999) (make-custom-textual-input/output-port . G22998) (make-custom-textual-input-port . G22997) (make-custom-binary-output-port . G22996) (make-custom-binary-input/output-port . G22995) (make-custom-binary-input-port . G22994) (make-bytevector . G22993) (lookahead-u8 . G22992) (lookahead-char . G22991) (i/o-write-error? . G21527) (i/o-read-error? . G21509) (i/o-port-error? . G21666) (i/o-invalid-position-error? . G21548) (i/o-filename-error? . G21571) (i/o-file-protection-error? . G21591) (i/o-file-is-read-only-error? . G21609) (i/o-file-does-not-exist-error? . G21645) (i/o-file-already-exists-error? . G21627) (i/o-error? . G21491) (i/o-error-port . G21668) (i/o-error-filename . G21573) (i/o-encoding-error? . G21707) (i/o-encoding-error-char . G21709) (i/o-decoding-error? . G21686) (get-u8 . G22990) (get-string-n! . G22989) (get-string-n . G22988) (get-string-all . G22987) (get-line . G22986) (get-datum . G22985) (get-char . G22984) (get-bytevector-some . G22983) (get-bytevector-n! . G22982) (get-bytevector-n . G22981) (get-bytevector-all . G22980) (flush-output-port . G22979) (close-port . G22978) (exit . G22971) (command-line . G22390) (remove . G22966) (remv . G22965) (remp . G22964) (remq . G22963) (partition . G22962) (memv . G22961) (memq . G22960) (memp . G22959) (member . G22958) (exists . G22957) (for-all . G22956) (fold-right . G22955) (fold-left . G22954) (find . G22953) (filter . G22952) (cons* . G22951) (assv . G22950) (assq . G22949) (assp . G22948) (assoc . G22947) (call-with-string-output-port . G22946) (call-with-port . G22945) (call-with-bytevector-output-port . G22944) (bytevector->string . G22943) (buffer-mode? . G22942) (binary-port? . G22941) (with-exception-handler . G22940) (raise-continuable . G22939) (raise . G22938) (make-enumeration . G22937) (enum-set=? . G22936) (enum-set-universe . G22935) (enum-set-union . G22934) (enum-set-subset? . G22933) (enum-set-projection . G22932) (enum-set-member? . G22931) (enum-set-intersection . G22930) (enum-set-indexer . G22929) (enum-set-difference . G22928) (enum-set-constructor . G22927) (enum-set-complement . G22926) (enum-set->list . G22925) (who-condition? . G21275) (warning? . G21159) (violation? . G21213) (undefined-violation? . G21377) (syntax-violation? . G21355) (syntax-violation-subform . G21359) (syntax-violation-form . G21357) (syntax-violation . G15516) (simple-conditions . G22924) (serious-condition? . G21177) (non-continuable-violation? . G21295) (message-condition? . G21139) (make-who-condition . G21271) (make-warning . G21157) (make-violation . G21211) (make-undefined-violation . G21375) (make-syntax-violation . G21349) (make-serious-condition . G21175) (make-non-continuable-violation . G21293) (make-message-condition . G21135) (make-lexical-violation . G21329) (make-irritants-condition . G21248) (make-implementation-restriction-violation . G21311) (make-error . G21193) (make-assertion-violation . G21229) (lexical-violation? . G21331) (irritants-condition? . G21252) (implementation-restriction-violation? . G21313) (error? . G21195) (condition-who . G21277) (condition-predicate . G22923) (condition-message . G21141) (condition-irritants . G21254) (condition-accessor . G22922) (condition . G22921) (assertion-violation? . G21231) (condition? . G22920) (utf32->string . G22919) (utf16->string . G22918) (utf8->string . G22917) (uint-list->bytevector . G22916) (u8-list->bytevector . G22915) (string->utf8 . G22914) (string->utf32 . G22913) (string->utf16 . G22912) (sint-list->bytevector . G22911) (native-endianness . G22910) (bytevector? . G22909) (bytevector=? . G22908) (bytevector-uint-set! . G22907) (bytevector-uint-ref . G22906) (bytevector-u8-set! . G22905) (bytevector-u8-ref . G22904) (bytevector-u64-set! . G22903) (bytevector-u64-ref . G22902) (bytevector-u64-native-set! . G22901) (bytevector-u64-native-ref . G22900) (bytevector-u32-set! . G22899) (bytevector-u32-ref . G22898) (bytevector-u32-native-set! . G22897) (bytevector-u32-native-ref . G22896) (bytevector-u16-set! . G22895) (bytevector-u16-ref . G22894) (bytevector-u16-native-set! . G22893) (bytevector-u16-native-ref . G22892) (bytevector-sint-set! . G22891) (bytevector-sint-ref . G22890) (bytevector-s8-set! . G22889) (bytevector-s8-ref . G22888) (bytevector-s64-set! . G22887) (bytevector-s64-ref . G22886) (bytevector-s64-native-set! . G22885) (bytevector-s64-native-ref . G22884) (bytevector-s32-set! . G22883) (bytevector-s32-ref . G22882) (bytevector-s32-native-set! . G22881) (bytevector-s32-native-ref . G22880) (bytevector-s16-set! . G22879) (bytevector-s16-ref . G22878) (bytevector-s16-native-set! . G22877) (bytevector-s16-native-ref . G22876) (bytevector-length . G22875) (bytevector-ieee-single-ref . G22874) (bytevector-ieee-single-native-set! . G22873) (bytevector-ieee-single-native-ref . G22872) (bytevector-ieee-double-ref . G22871) (bytevector-ieee-double-native-set! . G22870) (bytevector-ieee-double-native-ref . G22869) (bytevector-fill! . G22868) (bytevector-copy! . G22867) (bytevector-copy . G22866) (bytevector->uint-list . G22865) (bytevector->u8-list . G22864) (bytevector->sint-list . G22863) (no-nans-violation? . G22862) (no-infinities-violation? . G22861) (make-no-nans-violation . G22860) (make-no-infinities-violation . G22859) (real->flonum . G22858) (flzero? . G22857) (fltruncate . G22856) (fltan . G22855) (flsqrt . G22854) (flsin . G22853) (flround . G22852) (flpositive? . G22851) (flonum? . G22850) (flodd? . G22849) (flnumerator . G22848) (flnegative? . G22847) (flnan? . G22846) (flmod0 . G22845) (flmod . G22844) (flmin . G22843) (flmax . G22842) (fllog . G22841) (flinteger? . G22840) (flinfinite? . G22839) (flfloor . G22838) (flfinite? . G22837) (flexpt . G22836) (flexp . G22835) (fleven? . G22834) (fldiv0-and-mod0 . G22833) (fldiv0 . G22832) (fldiv-and-mod . G22831) (fldiv . G22830) (fldenominator . G22829) (flcos . G22828) (flceiling . G22827) (flatan . G22826) (flasin . G22825) (flacos . G22824) (flabs . G22823) (fl>? . G22822) (fl>=? . G22821) (fl=? . G22820) (fl<? . G22819) (fl<=? . G22818) (fl/ . G22817) (fl- . G22816) (fl+ . G22815) (fl* . G22814) (fixnum->flonum . G22813) (fxzero? . G22812) (fxxor . G22811) (fxrotate-bit-field . G22810) (fxreverse-bit-field . G22809) (fxpositive? . G22808) (fxodd? . G22807) (fxnot . G22806) (fxnegative? . G22805) (fxmod0 . G22804) (fxmod . G22803) (fxmin . G22802) (fxmax . G22801) (fxlength . G22800) (fxior . G22799) (fxif . G22798) (fxfirst-bit-set . G22797) (fxeven? . G22796) (fxdiv0-and-mod0 . G22795) (fxdiv0 . G22794) (fxdiv-and-mod . G22793) (fxdiv . G22792) (fxcopy-bit-field . G22791) (fxcopy-bit . G22790) (fxbit-set? . G22789) (fxbit-field . G22788) (fxbit-count . G22787) (fxarithmetic-shift-right . G22786) (fxarithmetic-shift-left . G22785) (fxarithmetic-shift . G22784) (fxand . G22783) (fx>? . G22782) (fx>=? . G22781) (fx=? . G22780) (fx<? . G22779) (fx<=? . G22778) (fx-/carry . G22777) (fx- . G22776) (fx+/carry . G22775) (fx+ . G22774) (fx*/carry . G22773) (fx* . G22772) (greatest-fixnum . G22771) (least-fixnum . G22770) (fixnum-width . G22769) (fixnum? . G22768) (bitwise-rotate-bit-field . G22767) (bitwise-reverse-bit-field . G22766) (bitwise-length . G22765) (bitwise-if . G22764) (bitwise-first-bit-set . G22763) (bitwise-copy-bit-field . G22762) (bitwise-copy-bit . G22761) (bitwise-bit-set? . G22760) (bitwise-bit-field . G22759) (bitwise-bit-count . G22758) (bitwise-xor . G22757) (bitwise-ior . G22756) (bitwise-and . G22755) (bitwise-not . G22754) (bitwise-arithmetic-shift-right . G22753) (bitwise-arithmetic-shift-left . G22752) (bitwise-arithmetic-shift . G22751) (zero? . G22750) (vector? . G22749) (vector-set! . G22748) (vector-ref . G22747) (vector-map . G22746) (vector-length . G22745) (vector-for-each . G22744) (vector-fill! . G22743) (vector->list . G22742) (vector . G22741) (values . G22740) (truncate . G22739) (tan . G22738) (symbol? . G22737) (symbol=? . G22736) (symbol->string . G22735) (substring . G22734) (string? . G22733) (string>? . G22732) (string>=? . G22731) (string=? . G22730) (string<? . G22729) (string<=? . G22728) (string-ref . G22727) (string-length . G22726) (string-for-each . G22725) (string-copy . G22724) (string-append . G22723) (string->symbol . G22722) (string->number . G22721) (string->list . G22720) (string . G22719) (sqrt . G22718) (sin . G22717) (round . G22716) (reverse . G22715) (real? . G22714) (real-valued? . G22713) (real-part . G22712) (rationalize . G22711) (rational? . G22710) (rational-valued? . G22709) (procedure? . G22708) (positive? . G22707) (pair? . G22706) (odd? . G22705) (numerator . G22704) (number? . G22703) (number->string . G22702) (null? . G22701) (not . G22700) (negative? . G22699) (nan? . G22698) (min . G22697) (max . G22696) (map . G22695) (make-vector . G22694) (make-string . G22693) (make-rectangular . G22692) (make-polar . G22691) (magnitude . G22690) (log . G22689) (list? . G22688) (list-tail . G22687) (list-ref . G22686) (list->vector . G22685) (list->string . G22684) (list . G22683) (length . G22682) (lcm . G22681) (integer? . G22680) (integer-valued? . G22679) (integer->char . G22678) (infinite? . G22677) (inexact? . G22676) (inexact . G22675) (imag-part . G22674) (gcd . G22673) (for-each . G22672) (floor . G22671) (finite? . G22670) (expt . G22669) (exp . G22668) (exact? . G22667) (exact-integer-sqrt . G22666) (exact . G22665) (even? . G22664) (error . G22663) (eqv? . G22662) (equal? . G22661) (eq? . G22660) (dynamic-wind . G22659) (div0-and-mod0 . G22658) (mod0 . G22657) (div0 . G22656) (div-and-mod . G22655) (mod . G22654) (div . G22653) (denominator . G22652) (cos . G22651) (cons . G22650) (complex? . G22649) (char? . G22648) (char>? . G22647) (char>=? . G22646) (char=? . G22645) (char<? . G22644) (char<=? . G22643) (char->integer . G22642) (ceiling . G22641) (call-with-values . G22640) (call/cc . G22639) (call-with-current-continuation . G22638) (cddddr . G22637) (cdddar . G22636) (cddadr . G22635) (cddaar . G22634) (cdaddr . G22633) (cdadar . G22632) (cdaadr . G22631) (cdaaar . G22630) (cadddr . G22629) (caddar . G22628) (cadadr . G22627) (cadaar . G22626) (caaddr . G22625) (caadar . G22624) (caaadr . G22623) (caaaar . G22622) (cdddr . G22621) (cddar . G22620) (cdadr . G22619) (cdaar . G22618) (caddr . G22617) (cadar . G22616) (caadr . G22615) (caaar . G22614) (cddr . G22613) (cdar . G22612) (cadr . G22611) (caar . G22610) (cdr . G22609) (car . G22608) (boolean? . G22607) (boolean=? . G22606) (atan . G22605) (assertion-violation . G22604) (asin . G22603) (apply . G22602) (append . G22601) (angle . G22600) (acos . G22599) (abs . G22598) (/ . G22597) (* . G22596) (- . G22595) (+ . G22594) (>= . G22593) (> . G22592) (= . G22591) (<= . G22590) (< . G22589) (let*-values . G22588) (&no-nans . G22587) (&no-infinities . G22586) (&i/o-encoding . G22585) (&i/o-decoding . G22584) (&i/o-port . G22583) (&i/o-file-does-not-exist . G22582) (&i/o-file-already-exists . G22581) (&i/o-file-is-read-only . G22580) (&i/o-file-protection . G22579) (&i/o-filename . G22578) (&i/o-invalid-position . G22577) (&i/o-write . G22576) (&i/o-read . G22575) (&i/o . G22574) (&undefined . G22573) (&syntax . G22572) (&lexical . G22571) (&implementation-restriction . G22570) (&non-continuable . G22569) (&who . G22568) (&irritants . G22567) (&assertion . G22566) (&violation . G22565) (&error . G22564) (&serious . G22563) (&warning . G22562) (&message . G22561) (&condition . G22560) (define-condition-type . G22559) (define-enumeration . G22558) (define-record-type . G22557) (parent-rtd . G22556) (nongenerative . G22555) (opaque . G22554) (sealed . G22553) (protocol . G22552) (parent . G22551) (immutable . G22550) (mutable . G22549) (fields . G22548) (error-handling-mode . G22547) (file-options . G22546) (buffer-mode . G22545) (eol-style . G22544) (guard . G22543) (unsyntax-splicing . G22540) (unsyntax . G22539) (unquote-splicing . G22538) (unquote . G22537) (_ . G22536) (else . G22535) (=> . G22534) (... . G22533) (assert . G22532) (endianness . G22531) (or . G22528) (and . G22527) (do . G22526) (cond . G22525) (let* . G22524) (let . G22523) (let-values . G22522) (identifier-syntax . G22521) (with-syntax . G22520) (quasisyntax . G22519) (quasiquote . G22518) (syntax-rules . G22517) (record-constructor-descriptor . G22514) (record-type-descriptor . G22513) (case . G22512) (unless . G22510) (when . G22509) (if . G22508) (letrec* . G22507) (letrec . G22506) (case-lambda . G22504) (lambda . G22503) (syntax . G22502) (syntax-case . G22501) (quote . G22500) (letrec-syntax . G22498) (let-syntax . G22497) (set! . G22496) (begin . G22494) (define-syntax . G22492) (define . G22491)) '() values values '#f '#f '#t '#f) (G14498 'G23222 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G15484) (quotient . G22977) (null-environment . G15482) (remainder . G22976) (modulo . G22975) (inexact->exact . G22974) (force . G22973) (exact->inexact . G22972) (delay . G22530)) '() values values '#f '#f '#t '#f) (G14498 'G23223 '(rnrs control) '(6) '() '() '() '((do . G22526) (unless . G22510) (when . G22509) (case-lambda . G22504)) '() values values '#f '#f '#t '#f) (G14498 'G23224 '(rnrs eval) '(6) '() '() '() '((eval . G15488) (environment . G15480)) '() values values '#f '#f '#t '#f) (G14498 'G23225 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G22968) (set-car! . G22967)) '() values values '#f '#f '#t '#f) (G14498 'G23226 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G22970) (string-set! . G22969)) '() values values '#f '#f '#t '#f) (G14498 'G23227 '(rnrs programs) '(6) '() '() '() '((exit . G22971) (command-line . G22390)) '() values values '#f '#f '#t '#f) (G14498 'G23228 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G14969) (identifier? . G15518) (generate-temporaries . G15502) (free-identifier=? . G15504) (syntax->datum . G15522) (datum->syntax . G15520) (bound-identifier=? . G15506) (syntax-violation . G15516) (unsyntax-splicing . G22540) (unsyntax . G22539) (_ . G22536) (... . G22533) (with-syntax . G22520) (quasisyntax . G22519) (syntax . G22502) (syntax-case . G22501)) '() values values '#f '#f '#t '#f) (G14498 'G23229 '(rnrs files) '(6) '() '() '() '((delete-file . G23082) (file-exists? . G23081) (make-i/o-write-error . G21525) (make-i/o-read-error . G21507) (make-i/o-port-error . G21662) (make-i/o-invalid-position-error . G21544) (make-i/o-filename-error . G21567) (make-i/o-file-protection-error . G21589) (make-i/o-file-is-read-only-error . G21607) (make-i/o-file-does-not-exist-error . G21643) (make-i/o-file-already-exists-error . G21625) (make-i/o-error . G21489) (i/o-write-error? . G21527) (i/o-read-error? . G21509) (i/o-port-error? . G21666) (i/o-invalid-position-error? . G21548) (i/o-filename-error? . G21571) (i/o-file-protection-error? . G21591) (i/o-file-is-read-only-error? . G21609) (i/o-file-does-not-exist-error? . G21645) (i/o-file-already-exists-error? . G21627) (i/o-error? . G21491) (i/o-error-port . G21668) (i/o-error-filename . G21573) (&i/o-port . G22583) (&i/o-file-does-not-exist . G22582) (&i/o-file-already-exists . G22581) (&i/o-file-is-read-only . G22580) (&i/o-file-protection . G22579) (&i/o-filename . G22578) (&i/o-invalid-position . G22577) (&i/o-write . G22576) (&i/o-read . G22575) (&i/o . G22574)) '() values values '#f '#f '#t '#f) (G14498 'G23230 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G23080) (vector-sort . G23079) (list-sort . G23078)) '() values values '#f '#f '#t '#f) (G14498 'G23231 '(rnrs base) '(6) '() '() '() '((zero? . G22750) (vector? . G22749) (vector-set! . G22748) (vector-ref . G22747) (vector-map . G22746) (vector-length . G22745) (vector-for-each . G22744) (vector-fill! . G22743) (vector->list . G22742) (vector . G22741) (values . G22740) (truncate . G22739) (tan . G22738) (symbol? . G22737) (symbol=? . G22736) (symbol->string . G22735) (substring . G22734) (string? . G22733) (string>? . G22732) (string>=? . G22731) (string=? . G22730) (string<? . G22729) (string<=? . G22728) (string-ref . G22727) (string-length . G22726) (string-for-each . G22725) (string-copy . G22724) (string-append . G22723) (string->symbol . G22722) (string->number . G22721) (string->list . G22720) (string . G22719) (sqrt . G22718) (sin . G22717) (round . G22716) (reverse . G22715) (real? . G22714) (real-valued? . G22713) (real-part . G22712) (rationalize . G22711) (rational? . G22710) (rational-valued? . G22709) (procedure? . G22708) (positive? . G22707) (pair? . G22706) (odd? . G22705) (numerator . G22704) (number? . G22703) (number->string . G22702) (null? . G22701) (not . G22700) (negative? . G22699) (nan? . G22698) (min . G22697) (max . G22696) (map . G22695) (make-vector . G22694) (make-string . G22693) (make-rectangular . G22692) (make-polar . G22691) (magnitude . G22690) (log . G22689) (list? . G22688) (list-tail . G22687) (list-ref . G22686) (list->vector . G22685) (list->string . G22684) (list . G22683) (length . G22682) (lcm . G22681) (integer? . G22680) (integer-valued? . G22679) (integer->char . G22678) (infinite? . G22677) (inexact? . G22676) (inexact . G22675) (imag-part . G22674) (gcd . G22673) (for-each . G22672) (floor . G22671) (finite? . G22670) (expt . G22669) (exp . G22668) (exact? . G22667) (exact-integer-sqrt . G22666) (exact . G22665) (even? . G22664) (error . G22663) (eqv? . G22662) (equal? . G22661) (eq? . G22660) (dynamic-wind . G22659) (div0-and-mod0 . G22658) (mod0 . G22657) (div0 . G22656) (div-and-mod . G22655) (mod . G22654) (div . G22653) (denominator . G22652) (cos . G22651) (cons . G22650) (complex? . G22649) (char? . G22648) (char>? . G22647) (char>=? . G22646) (char=? . G22645) (char<? . G22644) (char<=? . G22643) (char->integer . G22642) (ceiling . G22641) (call-with-values . G22640) (call/cc . G22639) (call-with-current-continuation . G22638) (cddddr . G22637) (cdddar . G22636) (cddadr . G22635) (cddaar . G22634) (cdaddr . G22633) (cdadar . G22632) (cdaadr . G22631) (cdaaar . G22630) (cadddr . G22629) (caddar . G22628) (cadadr . G22627) (cadaar . G22626) (caaddr . G22625) (caadar . G22624) (caaadr . G22623) (caaaar . G22622) (cdddr . G22621) (cddar . G22620) (cdadr . G22619) (cdaar . G22618) (caddr . G22617) (cadar . G22616) (caadr . G22615) (caaar . G22614) (cddr . G22613) (cdar . G22612) (cadr . G22611) (caar . G22610) (cdr . G22609) (car . G22608) (boolean? . G22607) (boolean=? . G22606) (atan . G22605) (assertion-violation . G22604) (asin . G22603) (apply . G22602) (append . G22601) (angle . G22600) (acos . G22599) (abs . G22598) (/ . G22597) (* . G22596) (- . G22595) (+ . G22594) (>= . G22593) (> . G22592) (= . G22591) (<= . G22590) (< . G22589) (let*-values . G22588) (unquote-splicing . G22538) (unquote . G22537) (_ . G22536) (else . G22535) (=> . G22534) (... . G22533) (assert . G22532) (or . G22528) (and . G22527) (cond . G22525) (let* . G22524) (let . G22523) (let-values . G22522) (identifier-syntax . G22521) (quasiquote . G22518) (syntax-rules . G22517) (case . G22512) (if . G22508) (letrec* . G22507) (letrec . G22506) (lambda . G22503) (quote . G22500) (letrec-syntax . G22498) (let-syntax . G22497) (set! . G22496) (begin . G22494) (define-syntax . G22492) (define . G22491)) '() values values '#f '#f '#t '#f) (G14498 'G23232 '(rnrs lists) '(6) '() '() '() '((remove . G22966) (remv . G22965) (remp . G22964) (remq . G22963) (partition . G22962) (memv . G22961) (memq . G22960) (memp . G22959) (member . G22958) (exists . G22957) (for-all . G22956) (fold-right . G22955) (fold-left . G22954) (find . G22953) (filter . G22952) (cons* . G22951) (assv . G22950) (assq . G22949) (assp . G22948) (assoc . G22947)) '() values values '#f '#f '#t '#f) (G14498 'G23233 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G23056) (call-with-input-file . G23055) (write-char . G23054) (write . G23053) (with-output-to-file . G23052) (with-input-from-file . G23051) (read-char . G23050) (read . G23049) (peek-char . G23048) (open-output-file . G23047) (open-input-file . G23046) (newline . G23045) (display . G23044) (close-output-port . G23043) (close-input-port . G23042) (eof-object? . G23041) (eof-object . G23040) (current-error-port . G23039) (current-output-port . G23038) (current-input-port . G23037) (output-port? . G23036) (input-port? . G23035) (make-i/o-write-error . G21525) (make-i/o-read-error . G21507) (make-i/o-port-error . G21662) (make-i/o-invalid-position-error . G21544) (make-i/o-filename-error . G21567) (make-i/o-file-protection-error . G21589) (make-i/o-file-is-read-only-error . G21607) (make-i/o-file-does-not-exist-error . G21643) (make-i/o-file-already-exists-error . G21625) (make-i/o-error . G21489) (i/o-write-error? . G21527) (i/o-read-error? . G21509) (i/o-port-error? . G21666) (i/o-invalid-position-error? . G21548) (i/o-filename-error? . G21571) (i/o-file-protection-error? . G21591) (i/o-file-is-read-only-error? . G21609) (i/o-file-does-not-exist-error? . G21645) (i/o-file-already-exists-error? . G21627) (i/o-error? . G21491) (i/o-error-port . G21668) (i/o-error-filename . G21573) (&i/o-port . G22583) (&i/o-file-does-not-exist . G22582) (&i/o-file-already-exists . G22581) (&i/o-file-is-read-only . G22580) (&i/o-file-protection . G22579) (&i/o-filename . G22578) (&i/o-invalid-position . G22577) (&i/o-write . G22576) (&i/o-read . G22575) (&i/o . G22574)) '() values values '#f '#f '#t '#f) (G14498 'G23234 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G22993) (utf32->string . G22919) (utf16->string . G22918) (utf8->string . G22917) (uint-list->bytevector . G22916) (u8-list->bytevector . G22915) (string->utf8 . G22914) (string->utf32 . G22913) (string->utf16 . G22912) (sint-list->bytevector . G22911) (native-endianness . G22910) (bytevector? . G22909) (bytevector=? . G22908) (bytevector-uint-set! . G22907) (bytevector-uint-ref . G22906) (bytevector-u8-set! . G22905) (bytevector-u8-ref . G22904) (bytevector-u64-set! . G22903) (bytevector-u64-ref . G22902) (bytevector-u64-native-set! . G22901) (bytevector-u64-native-ref . G22900) (bytevector-u32-set! . G22899) (bytevector-u32-ref . G22898) (bytevector-u32-native-set! . G22897) (bytevector-u32-native-ref . G22896) (bytevector-u16-set! . G22895) (bytevector-u16-ref . G22894) (bytevector-u16-native-set! . G22893) (bytevector-u16-native-ref . G22892) (bytevector-sint-set! . G22891) (bytevector-sint-ref . G22890) (bytevector-s8-set! . G22889) (bytevector-s8-ref . G22888) (bytevector-s64-set! . G22887) (bytevector-s64-ref . G22886) (bytevector-s64-native-set! . G22885) (bytevector-s64-native-ref . G22884) (bytevector-s32-set! . G22883) (bytevector-s32-ref . G22882) (bytevector-s32-native-set! . G22881) (bytevector-s32-native-ref . G22880) (bytevector-s16-set! . G22879) (bytevector-s16-ref . G22878) (bytevector-s16-native-set! . G22877) (bytevector-s16-native-ref . G22876) (bytevector-length . G22875) (bytevector-ieee-single-ref . G22874) (bytevector-ieee-single-native-set! . G22873) (bytevector-ieee-single-native-ref . G22872) (bytevector-ieee-double-ref . G22871) (bytevector-ieee-double-native-set! . G22870) (bytevector-ieee-double-native-ref . G22869) (bytevector-fill! . G22868) (bytevector-copy! . G22867) (bytevector-copy . G22866) (bytevector->uint-list . G22865) (bytevector->u8-list . G22864) (bytevector->sint-list . G22863) (endianness . G22531)) '() values values '#f '#f '#t '#f) (G14498 'G23235 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G21906) (string-titlecase . G21910) (string-normalize-nfkd . G21940) (string-normalize-nfkc . G21944) (string-normalize-nfd . G21938) (string-normalize-nfc . G21942) (string-foldcase . G21908) (string-downcase . G21904) (string-ci>? . G21918) (string-ci>=? . G21922) (string-ci=? . G21914) (string-ci<? . G21916) (string-ci<=? . G21920) (char-whitespace? . G21868) (char-upper-case? . G21874) (char-title-case? . G21878) (char-numeric? . G21872) (char-lower-case? . G21876) (char-general-category . G21888) (char-upcase . G21880) (char-titlecase . G21884) (char-foldcase . G21886) (char-downcase . G21882) (char-ci>? . G21894) (char-ci>=? . G21898) (char-ci=? . G21890) (char-ci<? . G21892) (char-ci<=? . G21896) (char-alphabetic? . G21870)) '() values values '#f '#f '#t '#f) (G14498 'G23236 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G22940) (raise-continuable . G22939) (raise . G22938) (guard . G22543) (else . G22535) (=> . G22534)) '() values values '#f '#f '#t '#f) (G14498 'G23237 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G22767) (bitwise-reverse-bit-field . G22766) (bitwise-length . G22765) (bitwise-if . G22764) (bitwise-first-bit-set . G22763) (bitwise-copy-bit-field . G22762) (bitwise-copy-bit . G22761) (bitwise-bit-set? . G22760) (bitwise-bit-field . G22759) (bitwise-bit-count . G22758) (bitwise-xor . G22757) (bitwise-ior . G22756) (bitwise-and . G22755) (bitwise-not . G22754) (bitwise-arithmetic-shift-right . G22753) (bitwise-arithmetic-shift-left . G22752) (bitwise-arithmetic-shift . G22751)) '() values values '#f '#f '#t '#f) (G14498 'G23238 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G22812) (fxxor . G22811) (fxrotate-bit-field . G22810) (fxreverse-bit-field . G22809) (fxpositive? . G22808) (fxodd? . G22807) (fxnot . G22806) (fxnegative? . G22805) (fxmod0 . G22804) (fxmod . G22803) (fxmin . G22802) (fxmax . G22801) (fxlength . G22800) (fxior . G22799) (fxif . G22798) (fxfirst-bit-set . G22797) (fxeven? . G22796) (fxdiv0-and-mod0 . G22795) (fxdiv0 . G22794) (fxdiv-and-mod . G22793) (fxdiv . G22792) (fxcopy-bit-field . G22791) (fxcopy-bit . G22790) (fxbit-set? . G22789) (fxbit-field . G22788) (fxbit-count . G22787) (fxarithmetic-shift-right . G22786) (fxarithmetic-shift-left . G22785) (fxarithmetic-shift . G22784) (fxand . G22783) (fx>? . G22782) (fx>=? . G22781) (fx=? . G22780) (fx<? . G22779) (fx<=? . G22778) (fx-/carry . G22777) (fx- . G22776) (fx+/carry . G22775) (fx+ . G22774) (fx*/carry . G22773) (fx* . G22772) (greatest-fixnum . G22771) (least-fixnum . G22770) (fixnum-width . G22769) (fixnum? . G22768)) '() values values '#f '#f '#t '#f) (G14498 'G23239 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G22862) (no-infinities-violation? . G22861) (make-no-nans-violation . G22860) (make-no-infinities-violation . G22859) (real->flonum . G22858) (flzero? . G22857) (fltruncate . G22856) (fltan . G22855) (flsqrt . G22854) (flsin . G22853) (flround . G22852) (flpositive? . G22851) (flonum? . G22850) (flodd? . G22849) (flnumerator . G22848) (flnegative? . G22847) (flnan? . G22846) (flmod0 . G22845) (flmod . G22844) (flmin . G22843) (flmax . G22842) (fllog . G22841) (flinteger? . G22840) (flinfinite? . G22839) (flfloor . G22838) (flfinite? . G22837) (flexpt . G22836) (flexp . G22835) (fleven? . G22834) (fldiv0-and-mod0 . G22833) (fldiv0 . G22832) (fldiv-and-mod . G22831) (fldiv . G22830) (fldenominator . G22829) (flcos . G22828) (flceiling . G22827) (flatan . G22826) (flasin . G22825) (flacos . G22824) (flabs . G22823) (fl>? . G22822) (fl>=? . G22821) (fl=? . G22820) (fl<? . G22819) (fl<=? . G22818) (fl/ . G22817) (fl- . G22816) (fl+ . G22815) (fl* . G22814) (fixnum->flonum . G22813) (&no-nans . G22587) (&no-infinities . G22586)) '() values values '#f '#f '#t '#f) (G14498 'G23240 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G23077) (string-ci-hash . G23076) (string-hash . G23075) (equal-hash . G23074) (hashtable-equivalence-function . G23073) (make-hashtable . G23072) (hashtable-hash-function . G23071) (make-eqv-hashtable . G23070) (make-eq-hashtable . G23069) (hashtable? . G23068) (hashtable-update! . G23067) (hashtable-size . G23066) (hashtable-set! . G23065) (hashtable-ref . G23064) (hashtable-mutable? . G23063) (hashtable-keys . G23062) (hashtable-entries . G23061) (hashtable-delete! . G23060) (hashtable-copy . G23059) (hashtable-contains? . G23058) (hashtable-clear! . G23057)) '() values values '#f '#f '#t '#f) (G14498 'G23241 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G23041) (eof-object . G23040) (current-error-port . G23039) (current-output-port . G23038) (current-input-port . G23037) (output-port? . G23036) (input-port? . G23035) (utf-8-codec . G23034) (utf-16-codec . G23033) (transcoder-error-handling-mode . G23032) (transcoder-eol-style . G23031) (transcoder-codec . G23030) (transcoded-port . G23029) (textual-port? . G23028) (string->bytevector . G23027) (standard-output-port . G23026) (standard-input-port . G23025) (standard-error-port . G23024) (set-port-position! . G23023) (put-u8 . G23022) (put-string . G23021) (put-datum . G23020) (put-char . G23019) (put-bytevector . G23018) (port? . G23017) (port-transcoder . G23016) (port-position . G23015) (port-has-set-port-position!? . G23014) (port-has-port-position? . G23013) (port-eof? . G23012) (output-port-buffer-mode . G23011) (open-string-output-port . G23010) (open-string-input-port . G23009) (open-file-output-port . G23008) (open-file-input/output-port . G23007) (open-file-input-port . G23006) (open-bytevector-output-port . G23005) (open-bytevector-input-port . G23004) (native-transcoder . G23003) (native-eol-style . G23002) (make-transcoder . G23001) (latin-1-codec . G23000) (make-i/o-write-error . G21525) (make-i/o-read-error . G21507) (make-i/o-port-error . G21662) (make-i/o-invalid-position-error . G21544) (make-i/o-filename-error . G21567) (make-i/o-file-protection-error . G21589) (make-i/o-file-is-read-only-error . G21607) (make-i/o-file-does-not-exist-error . G21643) (make-i/o-file-already-exists-error . G21625) (make-i/o-error . G21489) (make-i/o-encoding-error . G21703) (make-i/o-decoding-error . G21684) (make-custom-textual-output-port . G22999) (make-custom-textual-input/output-port . G22998) (make-custom-textual-input-port . G22997) (make-custom-binary-output-port . G22996) (make-custom-binary-input/output-port . G22995) (make-custom-binary-input-port . G22994) (lookahead-u8 . G22992) (lookahead-char . G22991) (i/o-write-error? . G21527) (i/o-read-error? . G21509) (i/o-port-error? . G21666) (i/o-invalid-position-error? . G21548) (i/o-filename-error? . G21571) (i/o-file-protection-error? . G21591) (i/o-file-is-read-only-error? . G21609) (i/o-file-does-not-exist-error? . G21645) (i/o-file-already-exists-error? . G21627) (i/o-error? . G21491) (i/o-error-port . G21668) (i/o-error-filename . G21573) (i/o-encoding-error? . G21707) (i/o-encoding-error-char . G21709) (i/o-decoding-error? . G21686) (get-u8 . G22990) (get-string-n! . G22989) (get-string-n . G22988) (get-string-all . G22987) (get-line . G22986) (get-datum . G22985) (get-char . G22984) (get-bytevector-some . G22983) (get-bytevector-n! . G22982) (get-bytevector-n . G22981) (get-bytevector-all . G22980) (flush-output-port . G22979) (close-port . G22978) (call-with-string-output-port . G22946) (call-with-port . G22945) (call-with-bytevector-output-port . G22944) (bytevector->string . G22943) (buffer-mode? . G22942) (binary-port? . G22941) (&i/o-encoding . G22585) (&i/o-decoding . G22584) (&i/o-port . G22583) (&i/o-file-does-not-exist . G22582) (&i/o-file-already-exists . G22581) (&i/o-file-is-read-only . G22580) (&i/o-file-protection . G22579) (&i/o-filename . G22578) (&i/o-invalid-position . G22577) (&i/o-write . G22576) (&i/o-read . G22575) (&i/o . G22574) (error-handling-mode . G22547) (file-options . G22546) (buffer-mode . G22545) (eol-style . G22544)) '() values values '#f '#f '#t '#f) (G14498 'G23242 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G22937) (enum-set=? . G22936) (enum-set-universe . G22935) (enum-set-union . G22934) (enum-set-subset? . G22933) (enum-set-projection . G22932) (enum-set-member? . G22931) (enum-set-intersection . G22930) (enum-set-indexer . G22929) (enum-set-difference . G22928) (enum-set-constructor . G22927) (enum-set-complement . G22926) (enum-set->list . G22925) (define-enumeration . G22558)) '() values values '#f '#f '#t '#f) (G14498 'G23243 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G21275) (warning? . G21159) (violation? . G21213) (undefined-violation? . G21377) (syntax-violation? . G21355) (syntax-violation-subform . G21359) (syntax-violation-form . G21357) (syntax-violation . G15516) (simple-conditions . G22924) (serious-condition? . G21177) (non-continuable-violation? . G21295) (message-condition? . G21139) (make-who-condition . G21271) (make-warning . G21157) (make-violation . G21211) (make-undefined-violation . G21375) (make-syntax-violation . G21349) (make-serious-condition . G21175) (make-non-continuable-violation . G21293) (make-message-condition . G21135) (make-lexical-violation . G21329) (make-irritants-condition . G21248) (make-implementation-restriction-violation . G21311) (make-error . G21193) (make-assertion-violation . G21229) (lexical-violation? . G21331) (irritants-condition? . G21252) (implementation-restriction-violation? . G21313) (error? . G21195) (condition-who . G21277) (condition-predicate . G22923) (condition-message . G21141) (condition-irritants . G21254) (condition-accessor . G22922) (condition . G22921) (assertion-violation? . G21231) (condition? . G22920) (&undefined . G22573) (&syntax . G22572) (&lexical . G22571) (&implementation-restriction . G22570) (&non-continuable . G22569) (&who . G22568) (&irritants . G22567) (&assertion . G22566) (&violation . G22565) (&error . G22564) (&serious . G22563) (&warning . G22562) (&message . G22561) (&condition . G22560) (define-condition-type . G22559)) '() values values '#f '#f '#t '#f) (G14498 'G23244 '(rnrs records inspection) '(6) '() '() '() '((record? . G23092) (record-type-uid . G23091) (record-type-sealed? . G23090) (record-type-parent . G23089) (record-type-opaque? . G23088) (record-type-name . G23087) (record-type-generative? . G23086) (record-type-field-names . G23085) (record-rtd . G23084) (record-field-mutable? . G23083)) '() values values '#f '#f '#t '#f) (G14498 'G23245 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G23099) (record-predicate . G23098) (record-mutator . G23097) (record-constructor . G23096) (record-accessor . G23095) (make-record-type-descriptor . G23094) (make-record-constructor-descriptor . G23093)) '() values values '#f '#f '#t '#f) (G14498 'G23246 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G22557) (parent-rtd . G22556) (nongenerative . G22555) (opaque . G22554) (sealed . G22553) (protocol . G22552) (parent . G22551) (immutable . G22550) (mutable . G22549) (fields . G22548) (record-constructor-descriptor . G22514) (record-type-descriptor . G22513)) '() values values '#f '#f '#t '#f) (G14498 'G23247 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G23215) (&no-nans-rtd . G23214) (&no-infinities-rcd . G23213) (&no-infinities-rtd . G23212) (&i/o-encoding-rcd . G23211) (&i/o-encoding-rtd . G23210) (&i/o-decoding-rcd . G23209) (&i/o-decoding-rtd . G23208) (&i/o-port-rcd . G23207) (&i/o-port-rtd . G23206) (&i/o-file-does-not-exist-rcd . G23205) (&i/o-file-does-not-exist-rtd . G23204) (&i/o-file-already-exists-rcd . G23203) (&i/o-file-already-exists-rtd . G23202) (&i/o-file-is-read-only-rcd . G23201) (&i/o-file-is-read-only-rtd . G23200) (&i/o-file-protection-rcd . G23199) (&i/o-file-protection-rtd . G23198) (&i/o-filename-rcd . G23197) (&i/o-filename-rtd . G23196) (&i/o-invalid-position-rcd . G23195) (&i/o-invalid-position-rtd . G23194) (&i/o-write-rcd . G23193) (&i/o-write-rtd . G23192) (&i/o-read-rcd . G23191) (&i/o-read-rtd . G23190) (&i/o-rcd . G23189) (&i/o-rtd . G23188) (&undefined-rcd . G23187) (&undefined-rtd . G23186) (&syntax-rcd . G23185) (&syntax-rtd . G23184) (&lexical-rcd . G23183) (&lexical-rtd . G23182) (&implementation-restriction-rcd . G23181) (&implementation-restriction-rtd . G23180) (&non-continuable-rcd . G23179) (&non-continuable-rtd . G23178) (&who-rcd . G23177) (&who-rtd . G23176) (&irritants-rcd . G23175) (&irritants-rtd . G23174) (&assertion-rcd . G23173) (&assertion-rtd . G23172) (&violation-rcd . G23171) (&violation-rtd . G23170) (&error-rcd . G23169) (&error-rtd . G23168) (&serious-rcd . G23167) (&serious-rtd . G23166) (&warning-rcd . G23165) (&warning-rtd . G23164) (&message-rcd . G23163) (&message-rtd . G23162) (&condition-rcd . G23161) (&condition-rtd . G23160) (syntax-error . G15510) (syntax-dispatch . G15328) (pretty-print . G23159) (eval-core . G23158) (set-symbol-value! . G23157) (symbol-value . G23156) (gensym . G23155) (void . G23154) (load . G22396) (interaction-environment . G15528) (char-ready? . G23153) (regexp? . G23152) (read-line . G23151) (dotted-list? . G23150) (circular-list? . G23149) (proper-list? . G23148) (circular-list . G23147) (last . G23146) (last-pair . G23145) (not-pair? . G23144) (split-at! . G23143) (split-at . G23142) (list= . G23141) (list-copy . G23140) (list-tabulate . G23139) (make-list . G23138) (xcons . G23137) (tenth . G23136) (ninth . G23135) (eighth . G23134) (seventh . G23133) (sixth . G23132) (fifth . G23131) (drop-right! . G23130) (drop-right . G23129) (take-right . G23128) (take! . G23127) (drop . G23126) (take . G23125) (car+cdr . G23124) (third . G23123) (second . G23122) (first . G23121) (assoc-ref . G23120) (alist-cons . G23119) (print . G23118) (format . G23117) (write-to-file . G23116) (file->list . G23115) (file->string . G23114) (digit->integer . G23113) (call-with-string-input-port . G23112) (call-with-string-io . G23111) (string-split . G23110) (bytevector-for-each . G23109) (string->regexp . G23108) (rxmatch . G23107) (regexp-replace-all . G23106) (hashtable-for-each . G23105) (readdir . G23104) (get-environment-variables . G23103) (get-environment-variable . G23102) (get-command-line . G23101) (sys-display . G23100) (string-upcase . G21906) (string-titlecase . G21910) (string-normalize-nfkd . G21940) (string-normalize-nfkc . G21944) (string-normalize-nfd . G21938) (string-normalize-nfc . G21942) (string-foldcase . G21908) (string-downcase . G21904) (string-ci>? . G21918) (string-ci>=? . G21922) (string-ci=? . G21914) (string-ci<? . G21916) (string-ci<=? . G21920) (char-whitespace? . G21868) (char-upper-case? . G21874) (char-title-case? . G21878) (char-numeric? . G21872) (char-lower-case? . G21876) (char-general-category . G21888) (char-upcase . G21880) (char-titlecase . G21884) (char-foldcase . G21886) (char-downcase . G21882) (char-ci>? . G21894) (char-ci>=? . G21898) (char-ci=? . G21890) (char-ci<? . G21892) (char-ci<=? . G21896) (char-alphabetic? . G21870) (make-variable-transformer . G14969) (identifier? . G15518) (generate-temporaries . G15502) (free-identifier=? . G15504) (syntax->datum . G15522) (datum->syntax . G15520) (bound-identifier=? . G15506) (record-type-descriptor? . G23099) (record-predicate . G23098) (record-mutator . G23097) (record-constructor . G23096) (record-accessor . G23095) (make-record-type-descriptor . G23094) (make-record-constructor-descriptor . G23093) (record? . G23092) (record-type-uid . G23091) (record-type-sealed? . G23090) (record-type-parent . G23089) (record-type-opaque? . G23088) (record-type-name . G23087) (record-type-generative? . G23086) (record-type-field-names . G23085) (record-rtd . G23084) (record-field-mutable? . G23083) (delete-file . G23082) (file-exists? . G23081) (vector-sort! . G23080) (vector-sort . G23079) (list-sort . G23078) (symbol-hash . G23077) (string-ci-hash . G23076) (string-hash . G23075) (equal-hash . G23074) (hashtable-equivalence-function . G23073) (make-hashtable . G23072) (hashtable-hash-function . G23071) (make-eqv-hashtable . G23070) (make-eq-hashtable . G23069) (hashtable? . G23068) (hashtable-update! . G23067) (hashtable-size . G23066) (hashtable-set! . G23065) (hashtable-ref . G23064) (hashtable-mutable? . G23063) (hashtable-keys . G23062) (hashtable-entries . G23061) (hashtable-delete! . G23060) (hashtable-copy . G23059) (hashtable-contains? . G23058) (hashtable-clear! . G23057) (call-with-output-file . G23056) (call-with-input-file . G23055) (write-char . G23054) (write . G23053) (with-output-to-file . G23052) (with-input-from-file . G23051) (read-char . G23050) (read . G23049) (peek-char . G23048) (open-output-file . G23047) (open-input-file . G23046) (newline . G23045) (display . G23044) (close-output-port . G23043) (close-input-port . G23042) (eof-object? . G23041) (eof-object . G23040) (current-error-port . G23039) (current-output-port . G23038) (current-input-port . G23037) (output-port? . G23036) (input-port? . G23035) (utf-8-codec . G23034) (utf-16-codec . G23033) (transcoder-error-handling-mode . G23032) (transcoder-eol-style . G23031) (transcoder-codec . G23030) (transcoded-port . G23029) (textual-port? . G23028) (string->bytevector . G23027) (standard-output-port . G23026) (standard-input-port . G23025) (standard-error-port . G23024) (set-port-position! . G23023) (put-u8 . G23022) (put-string . G23021) (put-datum . G23020) (put-char . G23019) (put-bytevector . G23018) (port? . G23017) (port-transcoder . G23016) (port-position . G23015) (port-has-set-port-position!? . G23014) (port-has-port-position? . G23013) (port-eof? . G23012) (output-port-buffer-mode . G23011) (open-string-output-port . G23010) (open-string-input-port . G23009) (open-file-output-port . G23008) (open-file-input/output-port . G23007) (open-file-input-port . G23006) (open-bytevector-output-port . G23005) (open-bytevector-input-port . G23004) (native-transcoder . G23003) (native-eol-style . G23002) (make-transcoder . G23001) (latin-1-codec . G23000) (make-i/o-write-error . G21525) (make-i/o-read-error . G21507) (make-i/o-port-error . G21662) (make-i/o-invalid-position-error . G21544) (make-i/o-filename-error . G21567) (make-i/o-file-protection-error . G21589) (make-i/o-file-is-read-only-error . G21607) (make-i/o-file-does-not-exist-error . G21643) (make-i/o-file-already-exists-error . G21625) (make-i/o-error . G21489) (make-i/o-encoding-error . G21703) (make-i/o-decoding-error . G21684) (make-custom-textual-output-port . G22999) (make-custom-textual-input/output-port . G22998) (make-custom-textual-input-port . G22997) (make-custom-binary-output-port . G22996) (make-custom-binary-input/output-port . G22995) (make-custom-binary-input-port . G22994) (make-bytevector . G22993) (lookahead-u8 . G22992) (lookahead-char . G22991) (i/o-write-error? . G21527) (i/o-read-error? . G21509) (i/o-port-error? . G21666) (i/o-invalid-position-error? . G21548) (i/o-filename-error? . G21571) (i/o-file-protection-error? . G21591) (i/o-file-is-read-only-error? . G21609) (i/o-file-does-not-exist-error? . G21645) (i/o-file-already-exists-error? . G21627) (i/o-error? . G21491) (i/o-error-port . G21668) (i/o-error-filename . G21573) (i/o-encoding-error? . G21707) (i/o-encoding-error-char . G21709) (i/o-decoding-error? . G21686) (get-u8 . G22990) (get-string-n! . G22989) (get-string-n . G22988) (get-string-all . G22987) (get-line . G22986) (get-datum . G22985) (get-char . G22984) (get-bytevector-some . G22983) (get-bytevector-n! . G22982) (get-bytevector-n . G22981) (get-bytevector-all . G22980) (flush-output-port . G22979) (close-port . G22978) (scheme-report-environment . G15484) (quotient . G22977) (null-environment . G15482) (remainder . G22976) (modulo . G22975) (inexact->exact . G22974) (force . G22973) (exact->inexact . G22972) (exit . G22971) (command-line . G22390) (string-fill! . G22970) (string-set! . G22969) (set-cdr! . G22968) (set-car! . G22967) (remove . G22966) (remv . G22965) (remp . G22964) (remq . G22963) (partition . G22962) (memv . G22961) (memq . G22960) (memp . G22959) (member . G22958) (exists . G22957) (for-all . G22956) (fold-right . G22955) (fold-left . G22954) (find . G22953) (filter . G22952) (cons* . G22951) (assv . G22950) (assq . G22949) (assp . G22948) (assoc . G22947) (call-with-string-output-port . G22946) (call-with-port . G22945) (call-with-bytevector-output-port . G22944) (bytevector->string . G22943) (buffer-mode? . G22942) (binary-port? . G22941) (with-exception-handler . G22940) (raise-continuable . G22939) (raise . G22938) (eval . G15488) (environment . G15480) (make-enumeration . G22937) (enum-set=? . G22936) (enum-set-universe . G22935) (enum-set-union . G22934) (enum-set-subset? . G22933) (enum-set-projection . G22932) (enum-set-member? . G22931) (enum-set-intersection . G22930) (enum-set-indexer . G22929) (enum-set-difference . G22928) (enum-set-constructor . G22927) (enum-set-complement . G22926) (enum-set->list . G22925) (who-condition? . G21275) (warning? . G21159) (violation? . G21213) (undefined-violation? . G21377) (syntax-violation? . G21355) (syntax-violation-subform . G21359) (syntax-violation-form . G21357) (syntax-violation . G15516) (simple-conditions . G22924) (serious-condition? . G21177) (non-continuable-violation? . G21295) (message-condition? . G21139) (make-who-condition . G21271) (make-warning . G21157) (make-violation . G21211) (make-undefined-violation . G21375) (make-syntax-violation . G21349) (make-serious-condition . G21175) (make-non-continuable-violation . G21293) (make-message-condition . G21135) (make-lexical-violation . G21329) (make-irritants-condition . G21248) (make-implementation-restriction-violation . G21311) (make-error . G21193) (make-assertion-violation . G21229) (lexical-violation? . G21331) (irritants-condition? . G21252) (implementation-restriction-violation? . G21313) (error? . G21195) (condition-who . G21277) (condition-predicate . G22923) (condition-message . G21141) (condition-irritants . G21254) (condition-accessor . G22922) (condition . G22921) (assertion-violation? . G21231) (condition? . G22920) (utf32->string . G22919) (utf16->string . G22918) (utf8->string . G22917) (uint-list->bytevector . G22916) (u8-list->bytevector . G22915) (string->utf8 . G22914) (string->utf32 . G22913) (string->utf16 . G22912) (sint-list->bytevector . G22911) (native-endianness . G22910) (bytevector? . G22909) (bytevector=? . G22908) (bytevector-uint-set! . G22907) (bytevector-uint-ref . G22906) (bytevector-u8-set! . G22905) (bytevector-u8-ref . G22904) (bytevector-u64-set! . G22903) (bytevector-u64-ref . G22902) (bytevector-u64-native-set! . G22901) (bytevector-u64-native-ref . G22900) (bytevector-u32-set! . G22899) (bytevector-u32-ref . G22898) (bytevector-u32-native-set! . G22897) (bytevector-u32-native-ref . G22896) (bytevector-u16-set! . G22895) (bytevector-u16-ref . G22894) (bytevector-u16-native-set! . G22893) (bytevector-u16-native-ref . G22892) (bytevector-sint-set! . G22891) (bytevector-sint-ref . G22890) (bytevector-s8-set! . G22889) (bytevector-s8-ref . G22888) (bytevector-s64-set! . G22887) (bytevector-s64-ref . G22886) (bytevector-s64-native-set! . G22885) (bytevector-s64-native-ref . G22884) (bytevector-s32-set! . G22883) (bytevector-s32-ref . G22882) (bytevector-s32-native-set! . G22881) (bytevector-s32-native-ref . G22880) (bytevector-s16-set! . G22879) (bytevector-s16-ref . G22878) (bytevector-s16-native-set! . G22877) (bytevector-s16-native-ref . G22876) (bytevector-length . G22875) (bytevector-ieee-single-ref . G22874) (bytevector-ieee-single-native-set! . G22873) (bytevector-ieee-single-native-ref . G22872) (bytevector-ieee-double-ref . G22871) (bytevector-ieee-double-native-set! . G22870) (bytevector-ieee-double-native-ref . G22869) (bytevector-fill! . G22868) (bytevector-copy! . G22867) (bytevector-copy . G22866) (bytevector->uint-list . G22865) (bytevector->u8-list . G22864) (bytevector->sint-list . G22863) (no-nans-violation? . G22862) (no-infinities-violation? . G22861) (make-no-nans-violation . G22860) (make-no-infinities-violation . G22859) (real->flonum . G22858) (flzero? . G22857) (fltruncate . G22856) (fltan . G22855) (flsqrt . G22854) (flsin . G22853) (flround . G22852) (flpositive? . G22851) (flonum? . G22850) (flodd? . G22849) (flnumerator . G22848) (flnegative? . G22847) (flnan? . G22846) (flmod0 . G22845) (flmod . G22844) (flmin . G22843) (flmax . G22842) (fllog . G22841) (flinteger? . G22840) (flinfinite? . G22839) (flfloor . G22838) (flfinite? . G22837) (flexpt . G22836) (flexp . G22835) (fleven? . G22834) (fldiv0-and-mod0 . G22833) (fldiv0 . G22832) (fldiv-and-mod . G22831) (fldiv . G22830) (fldenominator . G22829) (flcos . G22828) (flceiling . G22827) (flatan . G22826) (flasin . G22825) (flacos . G22824) (flabs . G22823) (fl>? . G22822) (fl>=? . G22821) (fl=? . G22820) (fl<? . G22819) (fl<=? . G22818) (fl/ . G22817) (fl- . G22816) (fl+ . G22815) (fl* . G22814) (fixnum->flonum . G22813) (fxzero? . G22812) (fxxor . G22811) (fxrotate-bit-field . G22810) (fxreverse-bit-field . G22809) (fxpositive? . G22808) (fxodd? . G22807) (fxnot . G22806) (fxnegative? . G22805) (fxmod0 . G22804) (fxmod . G22803) (fxmin . G22802) (fxmax . G22801) (fxlength . G22800) (fxior . G22799) (fxif . G22798) (fxfirst-bit-set . G22797) (fxeven? . G22796) (fxdiv0-and-mod0 . G22795) (fxdiv0 . G22794) (fxdiv-and-mod . G22793) (fxdiv . G22792) (fxcopy-bit-field . G22791) (fxcopy-bit . G22790) (fxbit-set? . G22789) (fxbit-field . G22788) (fxbit-count . G22787) (fxarithmetic-shift-right . G22786) (fxarithmetic-shift-left . G22785) (fxarithmetic-shift . G22784) (fxand . G22783) (fx>? . G22782) (fx>=? . G22781) (fx=? . G22780) (fx<? . G22779) (fx<=? . G22778) (fx-/carry . G22777) (fx- . G22776) (fx+/carry . G22775) (fx+ . G22774) (fx*/carry . G22773) (fx* . G22772) (greatest-fixnum . G22771) (least-fixnum . G22770) (fixnum-width . G22769) (fixnum? . G22768) (bitwise-rotate-bit-field . G22767) (bitwise-reverse-bit-field . G22766) (bitwise-length . G22765) (bitwise-if . G22764) (bitwise-first-bit-set . G22763) (bitwise-copy-bit-field . G22762) (bitwise-copy-bit . G22761) (bitwise-bit-set? . G22760) (bitwise-bit-field . G22759) (bitwise-bit-count . G22758) (bitwise-xor . G22757) (bitwise-ior . G22756) (bitwise-and . G22755) (bitwise-not . G22754) (bitwise-arithmetic-shift-right . G22753) (bitwise-arithmetic-shift-left . G22752) (bitwise-arithmetic-shift . G22751) (zero? . G22750) (vector? . G22749) (vector-set! . G22748) (vector-ref . G22747) (vector-map . G22746) (vector-length . G22745) (vector-for-each . G22744) (vector-fill! . G22743) (vector->list . G22742) (vector . G22741) (values . G22740) (truncate . G22739) (tan . G22738) (symbol? . G22737) (symbol=? . G22736) (symbol->string . G22735) (substring . G22734) (string? . G22733) (string>? . G22732) (string>=? . G22731) (string=? . G22730) (string<? . G22729) (string<=? . G22728) (string-ref . G22727) (string-length . G22726) (string-for-each . G22725) (string-copy . G22724) (string-append . G22723) (string->symbol . G22722) (string->number . G22721) (string->list . G22720) (string . G22719) (sqrt . G22718) (sin . G22717) (round . G22716) (reverse . G22715) (real? . G22714) (real-valued? . G22713) (real-part . G22712) (rationalize . G22711) (rational? . G22710) (rational-valued? . G22709) (procedure? . G22708) (positive? . G22707) (pair? . G22706) (odd? . G22705) (numerator . G22704) (number? . G22703) (number->string . G22702) (null? . G22701) (not . G22700) (negative? . G22699) (nan? . G22698) (min . G22697) (max . G22696) (map . G22695) (make-vector . G22694) (make-string . G22693) (make-rectangular . G22692) (make-polar . G22691) (magnitude . G22690) (log . G22689) (list? . G22688) (list-tail . G22687) (list-ref . G22686) (list->vector . G22685) (list->string . G22684) (list . G22683) (length . G22682) (lcm . G22681) (integer? . G22680) (integer-valued? . G22679) (integer->char . G22678) (infinite? . G22677) (inexact? . G22676) (inexact . G22675) (imag-part . G22674) (gcd . G22673) (for-each . G22672) (floor . G22671) (finite? . G22670) (expt . G22669) (exp . G22668) (exact? . G22667) (exact-integer-sqrt . G22666) (exact . G22665) (even? . G22664) (error . G22663) (eqv? . G22662) (equal? . G22661) (eq? . G22660) (dynamic-wind . G22659) (div0-and-mod0 . G22658) (mod0 . G22657) (div0 . G22656) (div-and-mod . G22655) (mod . G22654) (div . G22653) (denominator . G22652) (cos . G22651) (cons . G22650) (complex? . G22649) (char? . G22648) (char>? . G22647) (char>=? . G22646) (char=? . G22645) (char<? . G22644) (char<=? . G22643) (char->integer . G22642) (ceiling . G22641) (call-with-values . G22640) (call/cc . G22639) (call-with-current-continuation . G22638) (cddddr . G22637) (cdddar . G22636) (cddadr . G22635) (cddaar . G22634) (cdaddr . G22633) (cdadar . G22632) (cdaadr . G22631) (cdaaar . G22630) (cadddr . G22629) (caddar . G22628) (cadadr . G22627) (cadaar . G22626) (caaddr . G22625) (caadar . G22624) (caaadr . G22623) (caaaar . G22622) (cdddr . G22621) (cddar . G22620) (cdadr . G22619) (cdaar . G22618) (caddr . G22617) (cadar . G22616) (caadr . G22615) (caaar . G22614) (cddr . G22613) (cdar . G22612) (cadr . G22611) (caar . G22610) (cdr . G22609) (car . G22608) (boolean? . G22607) (boolean=? . G22606) (atan . G22605) (assertion-violation . G22604) (asin . G22603) (apply . G22602) (append . G22601) (angle . G22600) (acos . G22599) (abs . G22598) (/ . G22597) (* . G22596) (- . G22595) (+ . G22594) (>= . G22593) (> . G22592) (= . G22591) (<= . G22590) (< . G22589) (let*-values . G22588) (&no-nans . G22587) (&no-infinities . G22586) (&i/o-encoding . G22585) (&i/o-decoding . G22584) (&i/o-port . G22583) (&i/o-file-does-not-exist . G22582) (&i/o-file-already-exists . G22581) (&i/o-file-is-read-only . G22580) (&i/o-file-protection . G22579) (&i/o-filename . G22578) (&i/o-invalid-position . G22577) (&i/o-write . G22576) (&i/o-read . G22575) (&i/o . G22574) (&undefined . G22573) (&syntax . G22572) (&lexical . G22571) (&implementation-restriction . G22570) (&non-continuable . G22569) (&who . G22568) (&irritants . G22567) (&assertion . G22566) (&violation . G22565) (&error . G22564) (&serious . G22563) (&warning . G22562) (&message . G22561) (&condition . G22560) (define-condition-type . G22559) (define-enumeration . G22558) (define-record-type . G22557) (parent-rtd . G22556) (nongenerative . G22555) (opaque . G22554) (sealed . G22553) (protocol . G22552) (parent . G22551) (immutable . G22550) (mutable . G22549) (fields . G22548) (error-handling-mode . G22547) (file-options . G22546) (buffer-mode . G22545) (eol-style . G22544) (guard . G22543) (trace-define . G22542) (trace-lambda . G22541) (unsyntax-splicing . G22540) (unsyntax . G22539) (unquote-splicing . G22538) (unquote . G22537) (_ . G22536) (else . G22535) (=> . G22534) (... . G22533) (assert . G22532) (endianness . G22531) (delay . G22530) (time . G22529) (or . G22528) (and . G22527) (do . G22526) (cond . G22525) (let* . G22524) (let . G22523) (let-values . G22522) (identifier-syntax . G22521) (with-syntax . G22520) (quasisyntax . G22519) (quasiquote . G22518) (syntax-rules . G22517) (include . G22516) (define-struct . G22515) (record-constructor-descriptor . G22514) (record-type-descriptor . G22513) (case . G22512) (parameterize . G22511) (unless . G22510) (when . G22509) (if . G22508) (letrec* . G22507) (letrec . G22506) (type-descriptor . G22505) (case-lambda . G22504) (lambda . G22503) (syntax . G22502) (syntax-case . G22501) (quote . G22500) (foreign-call . G22499) (letrec-syntax . G22498) (let-syntax . G22497) (set! . G22496) (import . G22495) (begin . G22494) (module . G22493) (define-syntax . G22492) (define . G22491)) '((G23215 core-prim . &no-nans-rcd) (G23214 core-prim . &no-nans-rtd) (G23213 core-prim . &no-infinities-rcd) (G23212 core-prim . &no-infinities-rtd) (G23211 core-prim . &i/o-encoding-rcd) (G23210 core-prim . &i/o-encoding-rtd) (G23209 core-prim . &i/o-decoding-rcd) (G23208 core-prim . &i/o-decoding-rtd) (G23207 core-prim . &i/o-port-rcd) (G23206 core-prim . &i/o-port-rtd) (G23205 core-prim . &i/o-file-does-not-exist-rcd) (G23204 core-prim . &i/o-file-does-not-exist-rtd) (G23203 core-prim . &i/o-file-already-exists-rcd) (G23202 core-prim . &i/o-file-already-exists-rtd) (G23201 core-prim . &i/o-file-is-read-only-rcd) (G23200 core-prim . &i/o-file-is-read-only-rtd) (G23199 core-prim . &i/o-file-protection-rcd) (G23198 core-prim . &i/o-file-protection-rtd) (G23197 core-prim . &i/o-filename-rcd) (G23196 core-prim . &i/o-filename-rtd) (G23195 core-prim . &i/o-invalid-position-rcd) (G23194 core-prim . &i/o-invalid-position-rtd) (G23193 core-prim . &i/o-write-rcd) (G23192 core-prim . &i/o-write-rtd) (G23191 core-prim . &i/o-read-rcd) (G23190 core-prim . &i/o-read-rtd) (G23189 core-prim . &i/o-rcd) (G23188 core-prim . &i/o-rtd) (G23187 core-prim . &undefined-rcd) (G23186 core-prim . &undefined-rtd) (G23185 core-prim . &syntax-rcd) (G23184 core-prim . &syntax-rtd) (G23183 core-prim . &lexical-rcd) (G23182 core-prim . &lexical-rtd) (G23181 core-prim . &implementation-restriction-rcd) (G23180 core-prim . &implementation-restriction-rtd) (G23179 core-prim . &non-continuable-rcd) (G23178 core-prim . &non-continuable-rtd) (G23177 core-prim . &who-rcd) (G23176 core-prim . &who-rtd) (G23175 core-prim . &irritants-rcd) (G23174 core-prim . &irritants-rtd) (G23173 core-prim . &assertion-rcd) (G23172 core-prim . &assertion-rtd) (G23171 core-prim . &violation-rcd) (G23170 core-prim . &violation-rtd) (G23169 core-prim . &error-rcd) (G23168 core-prim . &error-rtd) (G23167 core-prim . &serious-rcd) (G23166 core-prim . &serious-rtd) (G23165 core-prim . &warning-rcd) (G23164 core-prim . &warning-rtd) (G23163 core-prim . &message-rcd) (G23162 core-prim . &message-rtd) (G23161 core-prim . &condition-rcd) (G23160 core-prim . &condition-rtd) (G15510 core-prim . syntax-error) (G15328 core-prim . syntax-dispatch) (G23159 core-prim . pretty-print) (G23158 core-prim . eval-core) (G23157 core-prim . set-symbol-value!) (G23156 core-prim . symbol-value) (G23155 core-prim . gensym) (G23154 core-prim . void) (G22396 core-prim . load) (G15528 core-prim . interaction-environment) (G23153 core-prim . char-ready?) (G23152 core-prim . regexp?) (G23151 core-prim . read-line) (G23150 core-prim . dotted-list?) (G23149 core-prim . circular-list?) (G23148 core-prim . proper-list?) (G23147 core-prim . circular-list) (G23146 core-prim . last) (G23145 core-prim . last-pair) (G23144 core-prim . not-pair?) (G23143 core-prim . split-at!) (G23142 core-prim . split-at) (G23141 core-prim . list=) (G23140 core-prim . list-copy) (G23139 core-prim . list-tabulate) (G23138 core-prim . make-list) (G23137 core-prim . xcons) (G23136 core-prim . tenth) (G23135 core-prim . ninth) (G23134 core-prim . eighth) (G23133 core-prim . seventh) (G23132 core-prim . sixth) (G23131 core-prim . fifth) (G23130 core-prim . drop-right!) (G23129 core-prim . drop-right) (G23128 core-prim . take-right) (G23127 core-prim . take!) (G23126 core-prim . drop) (G23125 core-prim . take) (G23124 core-prim . car+cdr) (G23123 core-prim . third) (G23122 core-prim . second) (G23121 core-prim . first) (G23120 core-prim . assoc-ref) (G23119 core-prim . alist-cons) (G23118 core-prim . print) (G23117 core-prim . format) (G23116 core-prim . write-to-file) (G23115 core-prim . file->list) (G23114 core-prim . file->string) (G23113 core-prim . digit->integer) (G23112 core-prim . call-with-string-input-port) (G23111 core-prim . call-with-string-io) (G23110 core-prim . string-split) (G23109 core-prim . bytevector-for-each) (G23108 core-prim . string->regexp) (G23107 core-prim . rxmatch) (G23106 core-prim . regexp-replace-all) (G23105 core-prim . hashtable-for-each) (G23104 core-prim . readdir) (G23103 core-prim . get-environment-variables) (G23102 core-prim . get-environment-variable) (G23101 core-prim . get-command-line) (G23100 core-prim . sys-display) (G21906 core-prim . string-upcase) (G21910 core-prim . string-titlecase) (G21940 core-prim . string-normalize-nfkd) (G21944 core-prim . string-normalize-nfkc) (G21938 core-prim . string-normalize-nfd) (G21942 core-prim . string-normalize-nfc) (G21908 core-prim . string-foldcase) (G21904 core-prim . string-downcase) (G21918 core-prim . string-ci>?) (G21922 core-prim . string-ci>=?) (G21914 core-prim . string-ci=?) (G21916 core-prim . string-ci<?) (G21920 core-prim . string-ci<=?) (G21868 core-prim . char-whitespace?) (G21874 core-prim . char-upper-case?) (G21878 core-prim . char-title-case?) (G21872 core-prim . char-numeric?) (G21876 core-prim . char-lower-case?) (G21888 core-prim . char-general-category) (G21880 core-prim . char-upcase) (G21884 core-prim . char-titlecase) (G21886 core-prim . char-foldcase) (G21882 core-prim . char-downcase) (G21894 core-prim . char-ci>?) (G21898 core-prim . char-ci>=?) (G21890 core-prim . char-ci=?) (G21892 core-prim . char-ci<?) (G21896 core-prim . char-ci<=?) (G21870 core-prim . char-alphabetic?) (G14969 core-prim . make-variable-transformer) (G15518 core-prim . identifier?) (G15502 core-prim . generate-temporaries) (G15504 core-prim . free-identifier=?) (G15522 core-prim . syntax->datum) (G15520 core-prim . datum->syntax) (G15506 core-prim . bound-identifier=?) (G23099 core-prim . record-type-descriptor?) (G23098 core-prim . record-predicate) (G23097 core-prim . record-mutator) (G23096 core-prim . record-constructor) (G23095 core-prim . record-accessor) (G23094 core-prim . make-record-type-descriptor) (G23093 core-prim . make-record-constructor-descriptor) (G23092 core-prim . record?) (G23091 core-prim . record-type-uid) (G23090 core-prim . record-type-sealed?) (G23089 core-prim . record-type-parent) (G23088 core-prim . record-type-opaque?) (G23087 core-prim . record-type-name) (G23086 core-prim . record-type-generative?) (G23085 core-prim . record-type-field-names) (G23084 core-prim . record-rtd) (G23083 core-prim . record-field-mutable?) (G23082 core-prim . delete-file) (G23081 core-prim . file-exists?) (G23080 core-prim . vector-sort!) (G23079 core-prim . vector-sort) (G23078 core-prim . list-sort) (G23077 core-prim . symbol-hash) (G23076 core-prim . string-ci-hash) (G23075 core-prim . string-hash) (G23074 core-prim . equal-hash) (G23073 core-prim . hashtable-equivalence-function) (G23072 core-prim . make-hashtable) (G23071 core-prim . hashtable-hash-function) (G23070 core-prim . make-eqv-hashtable) (G23069 core-prim . make-eq-hashtable) (G23068 core-prim . hashtable?) (G23067 core-prim . hashtable-update!) (G23066 core-prim . hashtable-size) (G23065 core-prim . hashtable-set!) (G23064 core-prim . hashtable-ref) (G23063 core-prim . hashtable-mutable?) (G23062 core-prim . hashtable-keys) (G23061 core-prim . hashtable-entries) (G23060 core-prim . hashtable-delete!) (G23059 core-prim . hashtable-copy) (G23058 core-prim . hashtable-contains?) (G23057 core-prim . hashtable-clear!) (G23056 core-prim . call-with-output-file) (G23055 core-prim . call-with-input-file) (G23054 core-prim . write-char) (G23053 core-prim . write) (G23052 core-prim . with-output-to-file) (G23051 core-prim . with-input-from-file) (G23050 core-prim . read-char) (G23049 core-prim . read) (G23048 core-prim . peek-char) (G23047 core-prim . open-output-file) (G23046 core-prim . open-input-file) (G23045 core-prim . newline) (G23044 core-prim . display) (G23043 core-prim . close-output-port) (G23042 core-prim . close-input-port) (G23041 core-prim . eof-object?) (G23040 core-prim . eof-object) (G23039 core-prim . current-error-port) (G23038 core-prim . current-output-port) (G23037 core-prim . current-input-port) (G23036 core-prim . output-port?) (G23035 core-prim . input-port?) (G23034 core-prim . utf-8-codec) (G23033 core-prim . utf-16-codec) (G23032 core-prim . transcoder-error-handling-mode) (G23031 core-prim . transcoder-eol-style) (G23030 core-prim . transcoder-codec) (G23029 core-prim . transcoded-port) (G23028 core-prim . textual-port?) (G23027 core-prim . string->bytevector) (G23026 core-prim . standard-output-port) (G23025 core-prim . standard-input-port) (G23024 core-prim . standard-error-port) (G23023 core-prim . set-port-position!) (G23022 core-prim . put-u8) (G23021 core-prim . put-string) (G23020 core-prim . put-datum) (G23019 core-prim . put-char) (G23018 core-prim . put-bytevector) (G23017 core-prim . port?) (G23016 core-prim . port-transcoder) (G23015 core-prim . port-position) (G23014 core-prim . port-has-set-port-position!?) (G23013 core-prim . port-has-port-position?) (G23012 core-prim . port-eof?) (G23011 core-prim . output-port-buffer-mode) (G23010 core-prim . open-string-output-port) (G23009 core-prim . open-string-input-port) (G23008 core-prim . open-file-output-port) (G23007 core-prim . open-file-input/output-port) (G23006 core-prim . open-file-input-port) (G23005 core-prim . open-bytevector-output-port) (G23004 core-prim . open-bytevector-input-port) (G23003 core-prim . native-transcoder) (G23002 core-prim . native-eol-style) (G23001 core-prim . make-transcoder) (G23000 core-prim . latin-1-codec) (G21525 core-prim . make-i/o-write-error) (G21507 core-prim . make-i/o-read-error) (G21662 core-prim . make-i/o-port-error) (G21544 core-prim . make-i/o-invalid-position-error) (G21567 core-prim . make-i/o-filename-error) (G21589 core-prim . make-i/o-file-protection-error) (G21607 core-prim . make-i/o-file-is-read-only-error) (G21643 core-prim . make-i/o-file-does-not-exist-error) (G21625 core-prim . make-i/o-file-already-exists-error) (G21489 core-prim . make-i/o-error) (G21703 core-prim . make-i/o-encoding-error) (G21684 core-prim . make-i/o-decoding-error) (G22999 core-prim . make-custom-textual-output-port) (G22998 core-prim . make-custom-textual-input/output-port) (G22997 core-prim . make-custom-textual-input-port) (G22996 core-prim . make-custom-binary-output-port) (G22995 core-prim . make-custom-binary-input/output-port) (G22994 core-prim . make-custom-binary-input-port) (G22993 core-prim . make-bytevector) (G22992 core-prim . lookahead-u8) (G22991 core-prim . lookahead-char) (G21527 core-prim . i/o-write-error?) (G21509 core-prim . i/o-read-error?) (G21666 core-prim . i/o-port-error?) (G21548 core-prim . i/o-invalid-position-error?) (G21571 core-prim . i/o-filename-error?) (G21591 core-prim . i/o-file-protection-error?) (G21609 core-prim . i/o-file-is-read-only-error?) (G21645 core-prim . i/o-file-does-not-exist-error?) (G21627 core-prim . i/o-file-already-exists-error?) (G21491 core-prim . i/o-error?) (G21668 core-prim . i/o-error-port) (G21573 core-prim . i/o-error-filename) (G21707 core-prim . i/o-encoding-error?) (G21709 core-prim . i/o-encoding-error-char) (G21686 core-prim . i/o-decoding-error?) (G22990 core-prim . get-u8) (G22989 core-prim . get-string-n!) (G22988 core-prim . get-string-n) (G22987 core-prim . get-string-all) (G22986 core-prim . get-line) (G22985 core-prim . get-datum) (G22984 core-prim . get-char) (G22983 core-prim . get-bytevector-some) (G22982 core-prim . get-bytevector-n!) (G22981 core-prim . get-bytevector-n) (G22980 core-prim . get-bytevector-all) (G22979 core-prim . flush-output-port) (G22978 core-prim . close-port) (G15484 core-prim . scheme-report-environment) (G22977 core-prim . quotient) (G15482 core-prim . null-environment) (G22976 core-prim . remainder) (G22975 core-prim . modulo) (G22974 core-prim . inexact->exact) (G22973 core-prim . force) (G22972 core-prim . exact->inexact) (G22971 core-prim . exit) (G22390 core-prim . command-line) (G22970 core-prim . string-fill!) (G22969 core-prim . string-set!) (G22968 core-prim . set-cdr!) (G22967 core-prim . set-car!) (G22966 core-prim . remove) (G22965 core-prim . remv) (G22964 core-prim . remp) (G22963 core-prim . remq) (G22962 core-prim . partition) (G22961 core-prim . memv) (G22960 core-prim . memq) (G22959 core-prim . memp) (G22958 core-prim . member) (G22957 core-prim . exists) (G22956 core-prim . for-all) (G22955 core-prim . fold-right) (G22954 core-prim . fold-left) (G22953 core-prim . find) (G22952 core-prim . filter) (G22951 core-prim . cons*) (G22950 core-prim . assv) (G22949 core-prim . assq) (G22948 core-prim . assp) (G22947 core-prim . assoc) (G22946 core-prim . call-with-string-output-port) (G22945 core-prim . call-with-port) (G22944 core-prim . call-with-bytevector-output-port) (G22943 core-prim . bytevector->string) (G22942 core-prim . buffer-mode?) (G22941 core-prim . binary-port?) (G22940 core-prim . with-exception-handler) (G22939 core-prim . raise-continuable) (G22938 core-prim . raise) (G15488 core-prim . eval) (G15480 core-prim . environment) (G22937 core-prim . make-enumeration) (G22936 core-prim . enum-set=?) (G22935 core-prim . enum-set-universe) (G22934 core-prim . enum-set-union) (G22933 core-prim . enum-set-subset?) (G22932 core-prim . enum-set-projection) (G22931 core-prim . enum-set-member?) (G22930 core-prim . enum-set-intersection) (G22929 core-prim . enum-set-indexer) (G22928 core-prim . enum-set-difference) (G22927 core-prim . enum-set-constructor) (G22926 core-prim . enum-set-complement) (G22925 core-prim . enum-set->list) (G21275 core-prim . who-condition?) (G21159 core-prim . warning?) (G21213 core-prim . violation?) (G21377 core-prim . undefined-violation?) (G21355 core-prim . syntax-violation?) (G21359 core-prim . syntax-violation-subform) (G21357 core-prim . syntax-violation-form) (G15516 core-prim . syntax-violation) (G22924 core-prim . simple-conditions) (G21177 core-prim . serious-condition?) (G21295 core-prim . non-continuable-violation?) (G21139 core-prim . message-condition?) (G21271 core-prim . make-who-condition) (G21157 core-prim . make-warning) (G21211 core-prim . make-violation) (G21375 core-prim . make-undefined-violation) (G21349 core-prim . make-syntax-violation) (G21175 core-prim . make-serious-condition) (G21293 core-prim . make-non-continuable-violation) (G21135 core-prim . make-message-condition) (G21329 core-prim . make-lexical-violation) (G21248 core-prim . make-irritants-condition) (G21311 core-prim . make-implementation-restriction-violation) (G21193 core-prim . make-error) (G21229 core-prim . make-assertion-violation) (G21331 core-prim . lexical-violation?) (G21252 core-prim . irritants-condition?) (G21313 core-prim . implementation-restriction-violation?) (G21195 core-prim . error?) (G21277 core-prim . condition-who) (G22923 core-prim . condition-predicate) (G21141 core-prim . condition-message) (G21254 core-prim . condition-irritants) (G22922 core-prim . condition-accessor) (G22921 core-prim . condition) (G21231 core-prim . assertion-violation?) (G22920 core-prim . condition?) (G22919 core-prim . utf32->string) (G22918 core-prim . utf16->string) (G22917 core-prim . utf8->string) (G22916 core-prim . uint-list->bytevector) (G22915 core-prim . u8-list->bytevector) (G22914 core-prim . string->utf8) (G22913 core-prim . string->utf32) (G22912 core-prim . string->utf16) (G22911 core-prim . sint-list->bytevector) (G22910 core-prim . native-endianness) (G22909 core-prim . bytevector?) (G22908 core-prim . bytevector=?) (G22907 core-prim . bytevector-uint-set!) (G22906 core-prim . bytevector-uint-ref) (G22905 core-prim . bytevector-u8-set!) (G22904 core-prim . bytevector-u8-ref) (G22903 core-prim . bytevector-u64-set!) (G22902 core-prim . bytevector-u64-ref) (G22901 core-prim . bytevector-u64-native-set!) (G22900 core-prim . bytevector-u64-native-ref) (G22899 core-prim . bytevector-u32-set!) (G22898 core-prim . bytevector-u32-ref) (G22897 core-prim . bytevector-u32-native-set!) (G22896 core-prim . bytevector-u32-native-ref) (G22895 core-prim . bytevector-u16-set!) (G22894 core-prim . bytevector-u16-ref) (G22893 core-prim . bytevector-u16-native-set!) (G22892 core-prim . bytevector-u16-native-ref) (G22891 core-prim . bytevector-sint-set!) (G22890 core-prim . bytevector-sint-ref) (G22889 core-prim . bytevector-s8-set!) (G22888 core-prim . bytevector-s8-ref) (G22887 core-prim . bytevector-s64-set!) (G22886 core-prim . bytevector-s64-ref) (G22885 core-prim . bytevector-s64-native-set!) (G22884 core-prim . bytevector-s64-native-ref) (G22883 core-prim . bytevector-s32-set!) (G22882 core-prim . bytevector-s32-ref) (G22881 core-prim . bytevector-s32-native-set!) (G22880 core-prim . bytevector-s32-native-ref) (G22879 core-prim . bytevector-s16-set!) (G22878 core-prim . bytevector-s16-ref) (G22877 core-prim . bytevector-s16-native-set!) (G22876 core-prim . bytevector-s16-native-ref) (G22875 core-prim . bytevector-length) (G22874 core-prim . bytevector-ieee-single-ref) (G22873 core-prim . bytevector-ieee-single-native-set!) (G22872 core-prim . bytevector-ieee-single-native-ref) (G22871 core-prim . bytevector-ieee-double-ref) (G22870 core-prim . bytevector-ieee-double-native-set!) (G22869 core-prim . bytevector-ieee-double-native-ref) (G22868 core-prim . bytevector-fill!) (G22867 core-prim . bytevector-copy!) (G22866 core-prim . bytevector-copy) (G22865 core-prim . bytevector->uint-list) (G22864 core-prim . bytevector->u8-list) (G22863 core-prim . bytevector->sint-list) (G22862 core-prim . no-nans-violation?) (G22861 core-prim . no-infinities-violation?) (G22860 core-prim . make-no-nans-violation) (G22859 core-prim . make-no-infinities-violation) (G22858 core-prim . real->flonum) (G22857 core-prim . flzero?) (G22856 core-prim . fltruncate) (G22855 core-prim . fltan) (G22854 core-prim . flsqrt) (G22853 core-prim . flsin) (G22852 core-prim . flround) (G22851 core-prim . flpositive?) (G22850 core-prim . flonum?) (G22849 core-prim . flodd?) (G22848 core-prim . flnumerator) (G22847 core-prim . flnegative?) (G22846 core-prim . flnan?) (G22845 core-prim . flmod0) (G22844 core-prim . flmod) (G22843 core-prim . flmin) (G22842 core-prim . flmax) (G22841 core-prim . fllog) (G22840 core-prim . flinteger?) (G22839 core-prim . flinfinite?) (G22838 core-prim . flfloor) (G22837 core-prim . flfinite?) (G22836 core-prim . flexpt) (G22835 core-prim . flexp) (G22834 core-prim . fleven?) (G22833 core-prim . fldiv0-and-mod0) (G22832 core-prim . fldiv0) (G22831 core-prim . fldiv-and-mod) (G22830 core-prim . fldiv) (G22829 core-prim . fldenominator) (G22828 core-prim . flcos) (G22827 core-prim . flceiling) (G22826 core-prim . flatan) (G22825 core-prim . flasin) (G22824 core-prim . flacos) (G22823 core-prim . flabs) (G22822 core-prim . fl>?) (G22821 core-prim . fl>=?) (G22820 core-prim . fl=?) (G22819 core-prim . fl<?) (G22818 core-prim . fl<=?) (G22817 core-prim . fl/) (G22816 core-prim . fl-) (G22815 core-prim . fl+) (G22814 core-prim . fl*) (G22813 core-prim . fixnum->flonum) (G22812 core-prim . fxzero?) (G22811 core-prim . fxxor) (G22810 core-prim . fxrotate-bit-field) (G22809 core-prim . fxreverse-bit-field) (G22808 core-prim . fxpositive?) (G22807 core-prim . fxodd?) (G22806 core-prim . fxnot) (G22805 core-prim . fxnegative?) (G22804 core-prim . fxmod0) (G22803 core-prim . fxmod) (G22802 core-prim . fxmin) (G22801 core-prim . fxmax) (G22800 core-prim . fxlength) (G22799 core-prim . fxior) (G22798 core-prim . fxif) (G22797 core-prim . fxfirst-bit-set) (G22796 core-prim . fxeven?) (G22795 core-prim . fxdiv0-and-mod0) (G22794 core-prim . fxdiv0) (G22793 core-prim . fxdiv-and-mod) (G22792 core-prim . fxdiv) (G22791 core-prim . fxcopy-bit-field) (G22790 core-prim . fxcopy-bit) (G22789 core-prim . fxbit-set?) (G22788 core-prim . fxbit-field) (G22787 core-prim . fxbit-count) (G22786 core-prim . fxarithmetic-shift-right) (G22785 core-prim . fxarithmetic-shift-left) (G22784 core-prim . fxarithmetic-shift) (G22783 core-prim . fxand) (G22782 core-prim . fx>?) (G22781 core-prim . fx>=?) (G22780 core-prim . fx=?) (G22779 core-prim . fx<?) (G22778 core-prim . fx<=?) (G22777 core-prim . fx-/carry) (G22776 core-prim . fx-) (G22775 core-prim . fx+/carry) (G22774 core-prim . fx+) (G22773 core-prim . fx*/carry) (G22772 core-prim . fx*) (G22771 core-prim . greatest-fixnum) (G22770 core-prim . least-fixnum) (G22769 core-prim . fixnum-width) (G22768 core-prim . fixnum?) (G22767 core-prim . bitwise-rotate-bit-field) (G22766 core-prim . bitwise-reverse-bit-field) (G22765 core-prim . bitwise-length) (G22764 core-prim . bitwise-if) (G22763 core-prim . bitwise-first-bit-set) (G22762 core-prim . bitwise-copy-bit-field) (G22761 core-prim . bitwise-copy-bit) (G22760 core-prim . bitwise-bit-set?) (G22759 core-prim . bitwise-bit-field) (G22758 core-prim . bitwise-bit-count) (G22757 core-prim . bitwise-xor) (G22756 core-prim . bitwise-ior) (G22755 core-prim . bitwise-and) (G22754 core-prim . bitwise-not) (G22753 core-prim . bitwise-arithmetic-shift-right) (G22752 core-prim . bitwise-arithmetic-shift-left) (G22751 core-prim . bitwise-arithmetic-shift) (G22750 core-prim . zero?) (G22749 core-prim . vector?) (G22748 core-prim . vector-set!) (G22747 core-prim . vector-ref) (G22746 core-prim . vector-map) (G22745 core-prim . vector-length) (G22744 core-prim . vector-for-each) (G22743 core-prim . vector-fill!) (G22742 core-prim . vector->list) (G22741 core-prim . vector) (G22740 core-prim . values) (G22739 core-prim . truncate) (G22738 core-prim . tan) (G22737 core-prim . symbol?) (G22736 core-prim . symbol=?) (G22735 core-prim . symbol->string) (G22734 core-prim . substring) (G22733 core-prim . string?) (G22732 core-prim . string>?) (G22731 core-prim . string>=?) (G22730 core-prim . string=?) (G22729 core-prim . string<?) (G22728 core-prim . string<=?) (G22727 core-prim . string-ref) (G22726 core-prim . string-length) (G22725 core-prim . string-for-each) (G22724 core-prim . string-copy) (G22723 core-prim . string-append) (G22722 core-prim . string->symbol) (G22721 core-prim . string->number) (G22720 core-prim . string->list) (G22719 core-prim . string) (G22718 core-prim . sqrt) (G22717 core-prim . sin) (G22716 core-prim . round) (G22715 core-prim . reverse) (G22714 core-prim . real?) (G22713 core-prim . real-valued?) (G22712 core-prim . real-part) (G22711 core-prim . rationalize) (G22710 core-prim . rational?) (G22709 core-prim . rational-valued?) (G22708 core-prim . procedure?) (G22707 core-prim . positive?) (G22706 core-prim . pair?) (G22705 core-prim . odd?) (G22704 core-prim . numerator) (G22703 core-prim . number?) (G22702 core-prim . number->string) (G22701 core-prim . null?) (G22700 core-prim . not) (G22699 core-prim . negative?) (G22698 core-prim . nan?) (G22697 core-prim . min) (G22696 core-prim . max) (G22695 core-prim . map) (G22694 core-prim . make-vector) (G22693 core-prim . make-string) (G22692 core-prim . make-rectangular) (G22691 core-prim . make-polar) (G22690 core-prim . magnitude) (G22689 core-prim . log) (G22688 core-prim . list?) (G22687 core-prim . list-tail) (G22686 core-prim . list-ref) (G22685 core-prim . list->vector) (G22684 core-prim . list->string) (G22683 core-prim . list) (G22682 core-prim . length) (G22681 core-prim . lcm) (G22680 core-prim . integer?) (G22679 core-prim . integer-valued?) (G22678 core-prim . integer->char) (G22677 core-prim . infinite?) (G22676 core-prim . inexact?) (G22675 core-prim . inexact) (G22674 core-prim . imag-part) (G22673 core-prim . gcd) (G22672 core-prim . for-each) (G22671 core-prim . floor) (G22670 core-prim . finite?) (G22669 core-prim . expt) (G22668 core-prim . exp) (G22667 core-prim . exact?) (G22666 core-prim . exact-integer-sqrt) (G22665 core-prim . exact) (G22664 core-prim . even?) (G22663 core-prim . error) (G22662 core-prim . eqv?) (G22661 core-prim . equal?) (G22660 core-prim . eq?) (G22659 core-prim . dynamic-wind) (G22658 core-prim . div0-and-mod0) (G22657 core-prim . mod0) (G22656 core-prim . div0) (G22655 core-prim . div-and-mod) (G22654 core-prim . mod) (G22653 core-prim . div) (G22652 core-prim . denominator) (G22651 core-prim . cos) (G22650 core-prim . cons) (G22649 core-prim . complex?) (G22648 core-prim . char?) (G22647 core-prim . char>?) (G22646 core-prim . char>=?) (G22645 core-prim . char=?) (G22644 core-prim . char<?) (G22643 core-prim . char<=?) (G22642 core-prim . char->integer) (G22641 core-prim . ceiling) (G22640 core-prim . call-with-values) (G22639 core-prim . call/cc) (G22638 core-prim . call-with-current-continuation) (G22637 core-prim . cddddr) (G22636 core-prim . cdddar) (G22635 core-prim . cddadr) (G22634 core-prim . cddaar) (G22633 core-prim . cdaddr) (G22632 core-prim . cdadar) (G22631 core-prim . cdaadr) (G22630 core-prim . cdaaar) (G22629 core-prim . cadddr) (G22628 core-prim . caddar) (G22627 core-prim . cadadr) (G22626 core-prim . cadaar) (G22625 core-prim . caaddr) (G22624 core-prim . caadar) (G22623 core-prim . caaadr) (G22622 core-prim . caaaar) (G22621 core-prim . cdddr) (G22620 core-prim . cddar) (G22619 core-prim . cdadr) (G22618 core-prim . cdaar) (G22617 core-prim . caddr) (G22616 core-prim . cadar) (G22615 core-prim . caadr) (G22614 core-prim . caaar) (G22613 core-prim . cddr) (G22612 core-prim . cdar) (G22611 core-prim . cadr) (G22610 core-prim . caar) (G22609 core-prim . cdr) (G22608 core-prim . car) (G22607 core-prim . boolean?) (G22606 core-prim . boolean=?) (G22605 core-prim . atan) (G22604 core-prim . assertion-violation) (G22603 core-prim . asin) (G22602 core-prim . apply) (G22601 core-prim . append) (G22600 core-prim . angle) (G22599 core-prim . acos) (G22598 core-prim . abs) (G22597 core-prim . /) (G22596 core-prim . *) (G22595 core-prim . -) (G22594 core-prim . +) (G22593 core-prim . >=) (G22592 core-prim . >) (G22591 core-prim . =) (G22590 core-prim . <=) (G22589 core-prim . <) (G22588 core-prim . let*-values) (G22587 $core-rtd &no-nans-rtd &no-nans-rcd) (G22586 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G22585 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G22584 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G22583 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G22582 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G22581 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G22580 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G22579 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G22578 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G22577 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G22576 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G22575 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G22574 $core-rtd &i/o-rtd &i/o-rcd) (G22573 $core-rtd &undefined-rtd &undefined-rcd) (G22572 $core-rtd &syntax-rtd &syntax-rcd) (G22571 $core-rtd &lexical-rtd &lexical-rcd) (G22570 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G22569 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G22568 $core-rtd &who-rtd &who-rcd) (G22567 $core-rtd &irritants-rtd &irritants-rcd) (G22566 $core-rtd &assertion-rtd &assertion-rcd) (G22565 $core-rtd &violation-rtd &violation-rcd) (G22564 $core-rtd &error-rtd &error-rcd) (G22563 $core-rtd &serious-rtd &serious-rcd) (G22562 $core-rtd &warning-rtd &warning-rcd) (G22561 $core-rtd &message-rtd &message-rcd) (G22560 $core-rtd &condition-rtd &condition-rcd) (G22559 macro . define-condition-type) (G22558 macro . define-enumeration) (G22557 macro . define-record-type) (G22556 macro . parent-rtd) (G22555 macro . nongenerative) (G22554 macro . opaque) (G22553 macro . sealed) (G22552 macro . protocol) (G22551 macro . parent) (G22550 macro . immutable) (G22549 macro . mutable) (G22548 macro . fields) (G22547 macro . error-handling-mode) (G22546 macro . file-options) (G22545 macro . buffer-mode) (G22544 macro . eol-style) (G22543 macro . guard) (G22542 macro . trace-define) (G22541 macro . trace-lambda) (G22540 macro . unsyntax-splicing) (G22539 macro . unsyntax) (G22538 macro . unquote-splicing) (G22537 macro . unquote) (G22536 macro . _) (G22535 macro . else) (G22534 macro . =>) (G22533 macro . ...) (G22532 macro . assert) (G22531 macro . endianness) (G22530 macro . delay) (G22529 macro . time) (G22528 macro . or) (G22527 macro . and) (G22526 macro . do) (G22525 macro . cond) (G22524 macro . let*) (G22523 macro . let) (G22522 macro . let-values) (G22521 macro . identifier-syntax) (G22520 macro . with-syntax) (G22519 macro . quasisyntax) (G22518 macro . quasiquote) (G22517 macro . syntax-rules) (G22516 macro . include) (G22515 macro . define-struct) (G22514 core-macro . record-constructor-descriptor) (G22513 core-macro . record-type-descriptor) (G22512 core-macro . case) (G22511 core-macro . parameterize) (G22510 core-macro . unless) (G22509 core-macro . when) (G22508 core-macro . if) (G22507 core-macro . letrec*) (G22506 core-macro . letrec) (G22505 core-macro . type-descriptor) (G22504 core-macro . case-lambda) (G22503 core-macro . lambda) (G22502 core-macro . syntax) (G22501 core-macro . syntax-case) (G22500 core-macro . quote) (G22499 core-macro . foreign-call) (G22498 letrec-syntax) (G22497 let-syntax) (G22496 set!) (G22495 import) (G22494 begin) (G22493 module) (G22492 define-syntax) (G22491 define)) values values '#f '#f '#f '#f) (G14498 'G23248 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G23159) (eval-core . G23158) (set-symbol-value! . G23157) (symbol-value . G23156) (gensym . G23155) (void . G23154)) '() values values '#f '#f '#f '#f) (G14498 'G23249 '(mosh) '() '() '() '() '((get-command-line . G23101) (sys-display . G23100)) '() values values '#f '#f '#f '#f) (G14498 'G23250 '(mosh file) '() '() '() '() '((read-line . G23151) (write-to-file . G23116) (file->list . G23115) (file->string . G23114)) '() values values '#f '#f '#f '#f) (G14498 'G23251 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G23109)) '() values values '#f '#f '#f '#f) (G14498 'G23252 '(mosh number) '() '() '() '() '((digit->integer . G23113)) '() values values '#f '#f '#f '#f) (G14498 'G23253 '(mosh string) '() '() '() '() '((print . G23118) (format . G23117) (call-with-string-input-port . G23112) (call-with-string-io . G23111) (string-split . G23110) (string->regexp . G23108)) '() values values '#f '#f '#f '#f) (G14498 'G23254 '(mosh list) '() '() '() '() '((assoc-ref . G23120)) '() values values '#f '#f '#f '#f) (G14498 'G23255 '(mosh regexp) '() '() '() '() '((rxmatch . G23107) (regexp-replace-all . G23106)) '() values values '#f '#f '#f '#f) (G14498 'G23256 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G23105)) '() values values '#f '#f '#f '#f) (G14498 'G23257 '(system) '() '() '() '() '((readdir . G23104) (get-environment-variables . G23103) (get-environment-variable . G23102)) '() values values '#f '#f '#f '#f) (G14498 'G23258 '(srfi-1) '() '() '() '() '((dotted-list? . G23150) (circular-list? . G23149) (proper-list? . G23148) (circular-list . G23147) (last . G23146) (last-pair . G23145) (not-pair? . G23144) (split-at! . G23143) (split-at . G23142) (list= . G23141) (list-copy . G23140) (list-tabulate . G23139) (make-list . G23138) (xcons . G23137) (tenth . G23136) (ninth . G23135) (eighth . G23134) (seventh . G23133) (sixth . G23132) (fifth . G23131) (drop-right! . G23130) (drop-right . G23129) (take-right . G23128) (take! . G23127) (drop . G23126) (take . G23125) (car+cdr . G23124) (third . G23123) (second . G23122) (first . G23121) (alist-cons . G23119)) '() values values '#f '#f '#f '#f))


(begin (define G22489 '#f) (define G22488 '#f) (define G22487 '#f) (define G22486 '#f) (define G22485 '#f) (define G22484 '#f) (define G22483 '#f) (define G22482 '#f) (define G22481 '#f) (define G22480 '#f) (define G22479 '#f) (define G22478 '#f) ((lambda (G22385 G22387 G22389 G22391 G22393 G22395 G22397 G22399 G22401 G22403 G22405 G22407) (begin (set! G22385 (lambda (G22409 G22410) (letrec ((G22413 (lambda (G22415 G22416) (if (null? G22416) (if '#f '#f (void)) (begin (G22409 G22415 (car G22416)) (G22413 (+ G22415 '1) (cdr G22416))))))) (G22413 '1 G22410)))) (set! G22387 (G13948 write)) (set! G22389 (G13948 (get-command-line))) (set! G22391 (lambda (G22419) (cons '"." (G14514)))) (set! G22393 (lambda (G22421 . G22423) (begin (apply G22407 G22421 'load G22423) (void)))) (set! G22395 (lambda (G22425) (begin (apply G22407 G22425 'load (G22389)) (void)))) (set! G22397 (lambda () (G22395 '"ironscheme-buildscript.ss"))) (set! G22399 (lambda (G22427) (G20876 G22427 (G20856)))) (set! G22401 (lambda () (G22399 '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G22403 (lambda (G22429) (G22407 G22429 'compile))) (set! G22405 (lambda (G22431) (G22407 G22431 'closure))) (set! G22407 (lambda (G22433 G22434 . G22437) ((lambda (G22441 G22442) ((lambda (G22445) (dynamic-wind G22445 (lambda () ((lambda (G22447) ((lambda (G22449) (if (memv G22449 '(closure)) (G20857 G22447) (if (memv G22449 '(load)) ((lambda (G22452 G22453) ((lambda (G22456) (dynamic-wind G22456 (lambda () ((G20858 G22447))) G22456)) (lambda () ((lambda (G22458) (begin (G22452 G22453) (set! G22453 G22458))) (G22452))))) G22389 (cons G22433 (map (lambda (G22460) (format '"~a" G22460)) G22437))) (if (memv G22449 '(compile)) (begin (G20858 G22447) (G14510 G13953 G14053)) (void))))) G22434)) (with-input-from-file G22433 (lambda () (letrec ((G22462 (lambda () ((lambda (G22464) (if (eof-object? G22464) '() (cons G22464 (G22462)))) (G13958))))) (G22462)))))) G22445)) (lambda () ((lambda (G22466) (begin (G22441 G22442) (set! G22442 G22466))) (G22441))))) G14514 (G22391 G22433)))) (begin (set! G22478 G22407) (set! G22479 G22405) (set! G22480 G22403) (set! G22481 G22401) (set! G22482 G22399) (set! G22483 G22397) (set! G22484 G22395) (set! G22485 G22393) (set! G22486 G22391) (set! G22487 G22389) (set! G22488 G22387) (set! G22489 G22385) (G14509 G13952) (set-symbol-value! 'load G22395) (set-symbol-value! 'eval-r6rs G22399) (set-symbol-value! 'int-env-syms G20883) (set-symbol-value! 'expanded2core G14054) (set-symbol-value! 'trace-printer G22387) (G14514 '(".")) ((lambda (G22468 G22469) (with-exception-handler (lambda (G22472) (begin (display '" Condition components:\n" G22469) (G22385 (lambda (G22474 G22475) (if (G21413 G22475) (format G22469 '"   ~d. &who: ~a\n" G22474 (G21412 G22475)) (if (G21459 G22475) (format G22469 '"   ~d. &message: ~s\n" G22474 (G21458 G22475)) (if (G21434 G22475) (format G22469 '"   ~d. ~a\n" G22474 (record-type-name (record-rtd G22475))) (if (G21421 G22475) (format G22469 '"   ~d. &irritants: ~s\n" G22474 (G21420 G22475)) (format G22469 '"   ~d. ~a\n" G22474 (record-type-name (record-rtd G22475)))))))) (simple-conditions G22472)))) (lambda () (G22407 (cadr G22468) 'load)))) (G22389) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


