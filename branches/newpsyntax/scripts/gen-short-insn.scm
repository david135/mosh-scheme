#!/usr/bin/env gosh
(use gauche.sequence)
(use srfi-1)
(use util.match)

;; generate DebugInstruction.h

(define (print-header)
  (print "// Do not edit this file generated by gen-insn.scm")
  (print "#ifndef __SCHEME_DEBUG_INSTRUCTION_H__")
  (print "#define __SCHEME_DEBUG_INSTRUCTION_H__")
  (print "")
  (print "class DebugInstruction")
  (print "{")
  (print "public:")
)

(define (print-enum lst)
  (print "    enum {")
  (for-each-with-index (lambda (i l)
                         (print (format "        ~a = ~d," l i))) lst)
  (format #t "        COUNT = ~d,\n" (length lst))
  (format #t "        OPERAND_MAX = ~d\n" 5) ; 1 is for NONE
  (print "    };"))

(define (print-to-string lst)
  (print "    static const char* toString(int v) {")
  (print "        switch(v) {")
  (print "        case NO_INSN: { return \"\"; }")
  (for-each (lambda (l)
              (format #t "            case ~a: { return \"~a\";}\n" l l)) lst)
  (print "    }};"))


(define (print-footer)
  (print "};")
  (print "#endif // __SCHEME_DEBUG_INSTRUCTION_H__")
)

(define (main args)
  (print-header)
  (let1 lst
   (with-input-from-file (second args)
     (lambda ()
       (let loop ([obj (read)]
                  [ret '()])
         (if (eof-object? obj)
             (reverse ret)
             (match obj
               [('define-insn name n)
                (loop (read) (cons name ret))])))))
  (print-enum (cons "NO_INSN" lst))
  (print-to-string lst))
  (print-footer)
  0
)
