;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (v918@make-gensym-counter v920@gen-sym-prefix v922@gen-sym-counter v924@gensym v926@read-annotated v928@annotation-stripped v930@annotation? v932@annotation-source v934@annotation-expression v936@scm->fasl v938@fasl-save v940@fasl-load v942@serialize-library v944@load-serialized-library v946@make-record-printer v948@compile-core v950@read-library-source-file v952@make-parameter v1052@file-options-spec) (begin (set! v918@make-gensym-counter (lambda (v1053@i) ((lambda (v1056@inc) (begin (set! v1056@inc (lambda () (begin (set! v1053@i (+ v1053@i '1)) v1053@i))) v1056@inc)) '#f))) (set! v920@gen-sym-prefix ((lambda (v1057@v) (if v1057@v (string->symbol v1057@v) 'A)) (get-environment-variable '"MOSH_GENSYM_PREFIX"))) (set! v922@gen-sym-counter (v918@make-gensym-counter '0)) (set! v924@gensym (lambda v1059@x (string->symbol (if (null? v1059@x) (format '"~a~a" v920@gen-sym-prefix (v922@gen-sym-counter)) (format '"~a~a@~a" v920@gen-sym-prefix (v922@gen-sym-counter) (car v1059@x)))))) (set! v926@read-annotated read) (set! v928@annotation-stripped (lambda (v1061@x) (v934@annotation-expression v1061@x))) (set! v930@annotation? (lambda (v1063@x) (source-info v1063@x))) (set! v932@annotation-source (lambda (v1065@x) (source-info v1065@x))) (set! v934@annotation-expression (lambda (v1067@x) (if (pair? v1067@x) (cons (car v1067@x) (cdr v1067@x)) (display '"line:46\n")))) (set! v936@scm->fasl (lambda (v1069@filename) (string-append v1069@filename '".fasl"))) (set! v938@fasl-save (lambda (v1071@filename v1072@obj) (call-with-port (open-file-output-port v1071@filename) (lambda (v1075@port) ((symbol-value 'fasl-write!) v1072@obj v1075@port))))) (set! v940@fasl-load (lambda (v1077@filename) (call-with-port (open-file-input-port v1077@filename) (symbol-value 'fasl-read!)))) (set! v942@serialize-library (lambda (v1079@filename v1080@obj) (begin (format '#t '"serialize-library ~a\n..." v1079@filename) ((lambda (v1083@expanded2core) ((lambda (v1085@compile) ((lambda (v1087@code) ((lambda (v1089@pivot) ((lambda (v1091@visit) ((lambda () (begin (set-car! v1089@pivot v1091@visit) ((lambda (v1093@pivot) ((lambda (v1095@invoke) ((lambda () (set-car! v1093@pivot v1095@invoke)))) (v1085@compile (v1083@expanded2core (car v1093@pivot))))) (cdr v1089@pivot)))))) (v1085@compile (v1083@expanded2core (car v1089@pivot))))) (cddddr (cddddr v1087@code)))) v1080@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (v1097@fasl-file) (begin (if (file-exists? v1097@fasl-file) (delete-file v1097@fasl-file) (void)) ((call/cc (lambda (v1101@v1099) (lambda () (with-exception-handler (lambda (v1103@c) ((call/cc (lambda (v1105@v1100) (v1101@v1099 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " v1079@filename) (if (file-exists? v1097@fasl-file) (delete-file v1097@fasl-file) (void)) '#f) (v1105@v1100 (lambda () (raise-continuable v1103@c)))))))))) (lambda () (begin (v938@fasl-save v1097@fasl-file v1080@obj) (display '"OK\n")))))))))) (v936@scm->fasl v1079@filename))))) (set! v944@load-serialized-library (lambda (v1107@filename v1108@obj) ((lambda (v1111@fasl-file) (if (and (file-exists? v1111@fasl-file) ((symbol-value 'file-newer?) v1111@fasl-file v1107@filename)) ((lambda (v1113@expanded2core) ((lambda (v1115@eval-compiled-core) ((lambda (v1117@code) ((lambda (v1119@pivot) ((lambda (v1121@visit) ((lambda (v1123@visit-proc) ((lambda () (begin (set-car! v1119@pivot v1123@visit-proc) ((lambda (v1125@pivot) ((lambda (v1127@invoke) ((lambda () (begin (set-car! v1125@pivot (lambda () (v1115@eval-compiled-core v1127@invoke))) (apply v1108@obj v1117@code))))) (car v1125@pivot))) (cdr v1119@pivot)) '#t)))) (lambda () (v1115@eval-compiled-core v1121@visit)))) (car v1119@pivot))) (cddddr (cddddr v1117@code)))) (v940@fasl-load v1111@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (v936@scm->fasl v1107@filename)))) (set! v946@make-record-printer (lambda (v1129@name v1130@printer) (lambda v1133@x (begin (display '"record printer") (for-each display v1133@x))))) (set! v948@compile-core (lambda v1135@x (apply error 'comile-core '"not implementated" v1135@x))) (set! v950@read-library-source-file (lambda (v1137@file-name) (with-input-from-file v1137@file-name v926@read-annotated))) (set! v952@make-parameter (lambda v1153 ((lambda (v1154) (if (= v1154 '1) (apply (lambda (v1139@x) (v952@make-parameter v1139@x (lambda (v1141@x) v1141@x))) v1153) (if (= v1154 '2) (apply (lambda (v1143@x v1144@fender) ((lambda (v1147@x) (lambda v1151 ((lambda (v1152) (if (= v1152 '0) (apply (lambda () v1147@x) v1151) (if (= v1152 '1) (apply (lambda (v1149@v) (set! v1147@x (v1144@fender v1149@v))) v1151) (error 'apply '"invalid arg count")))) (length v1151)))) (v1144@fender v1143@x))) v1153) (error 'apply '"invalid arg count")))) (length v1153)))) (set! v1052@file-options-spec (lambda (v1155@x) v1155@x)) (begin (set! v1175@v1052@file-options-spec v1052@file-options-spec) (set! v1174@v952@make-parameter v952@make-parameter) (set! v1173@v950@read-library-source-file v950@read-library-source-file) (set! v1172@v948@compile-core v948@compile-core) (set! v1171@v946@make-record-printer v946@make-record-printer) (set! v1170@v944@load-serialized-library v944@load-serialized-library) (set! v1169@v942@serialize-library v942@serialize-library) (set! v1168@v940@fasl-load v940@fasl-load) (set! v1167@v938@fasl-save v938@fasl-save) (set! v1166@v936@scm->fasl v936@scm->fasl) (set! v1165@v934@annotation-expression v934@annotation-expression) (set! v1164@v932@annotation-source v932@annotation-source) (set! v1163@v930@annotation? v930@annotation?) (set! v1162@v928@annotation-stripped v928@annotation-stripped) (set! v1161@v926@read-annotated v926@read-annotated) (set! v1160@v924@gensym v924@gensym) (set! v1159@v922@gen-sym-counter v922@gen-sym-counter) (set! v1158@v920@gen-sym-prefix v920@gen-sym-prefix) (set! v1157@v918@make-gensym-counter v918@make-gensym-counter)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (v1180@current-primitive-locations v1182@mutable? v1184@rewriter v1186@expanded->core v1188@compile-core-expr v1190@pretty-print v1192@compile-core-expr-to-port) (begin (set! v1180@current-primitive-locations (v1174@v952@make-parameter (lambda (v1193@x) '#f) (lambda (v1195@p) v1195@p))) (set! v1182@mutable? (lambda (v1197@x) (or (pair? v1197@x) (vector? v1197@x) (hashtable? v1197@x)))) (set! v1184@rewriter (lambda (v1199@quote-hack?) ((lambda (v1202@f) (begin (set! v1202@f (lambda (v1203@x) (if (pair? v1203@x) ((lambda (v1205@t) (if (memv v1205@t '(quote)) (if (and v1199@quote-hack? (v1182@mutable? (cadr v1203@x))) ((lambda (v1207@g) (begin (set-symbol-value! v1207@g (cadr v1203@x)) v1207@g)) (v1160@v924@gensym)) v1203@x) (if (memv v1205@t '(case-lambda)) (cons 'case-lambda (map (lambda (v1209@x) (cons (car v1209@x) (map v1202@f (cdr v1209@x)))) (cdr v1203@x))) (if (memv v1205@t '(lambda)) (cons* 'lambda (cadr v1203@x) (map v1202@f (cddr v1203@x))) (if (memv v1205@t '(letrec)) ((lambda (v1211@bindings v1212@body*) ((lambda (v1215@lhs* v1216@rhs*) (cons* 'letrec (map list v1215@lhs* (map v1202@f v1216@rhs*)) (map v1202@f v1212@body*))) (map car v1211@bindings) (map cadr v1211@bindings))) (cadr v1203@x) (cddr v1203@x)) (if (memv v1205@t '(letrec*)) ((lambda (v1219@bindings v1220@body*) ((lambda (v1223@lhs* v1224@rhs*) (cons* 'letrec* (map list v1223@lhs* (map v1202@f v1224@rhs*)) (map v1202@f v1220@body*))) (map car v1219@bindings) (map cadr v1219@bindings))) (cadr v1203@x) (cddr v1203@x)) (if (memv v1205@t '(library-letrec*)) ((lambda (v1227@name v1228@x) ((lambda (v1231@bindings v1232@body*) ((lambda (v1235@lhs* v1236@lhs** v1237@rhs*) (cons* 'library-letrec* v1227@name (map list v1235@lhs* v1236@lhs** (map v1202@f v1237@rhs*)) (map v1202@f v1232@body*))) (map car v1231@bindings) (map cadr v1231@bindings) (map caddr v1231@bindings))) (cadr v1228@x) (cddr v1228@x))) (cadr v1203@x) (cdr v1203@x)) (if (memv v1205@t '(begin)) (cons 'begin (map v1202@f (cdr v1203@x))) (if (memv v1205@t '(set!)) (list 'set! (cadr v1203@x) (v1202@f (caddr v1203@x))) (if (memv v1205@t '(primitive)) ((lambda (v1241@op) ((lambda (v1243@t) (if v1243@t ((lambda (v1245@loc) v1245@loc) v1243@t) v1241@op)) ((v1180@current-primitive-locations) v1241@op))) (cadr v1203@x)) (if (memv v1205@t '(define)) v1203@x (if (list? v1203@x) (map v1202@f v1203@x) (error 'rewrite '"invalid form ~s ~s" v1203@x (list? v1203@x)))))))))))))) (car v1203@x)) v1203@x))) v1202@f)) '#f))) (set! v1186@expanded->core (lambda (v1247@x) ((v1184@rewriter '#f) v1247@x))) (set! v1188@compile-core-expr (lambda (v1249@x) ((v1184@rewriter '#f) v1249@x))) (set! v1190@pretty-print write) (set! v1192@compile-core-expr-to-port (lambda (v1251@x v1252@p) (v1190@pretty-print ((v1184@rewriter '#f) v1251@x) v1252@p))) (begin (set! v1261@v1192@compile-core-expr-to-port v1192@compile-core-expr-to-port) (set! v1260@v1190@pretty-print v1190@pretty-print) (set! v1259@v1188@compile-core-expr v1188@compile-core-expr) (set! v1258@v1186@expanded->core v1186@expanded->core) (set! v1257@v1184@rewriter v1184@rewriter) (set! v1256@v1182@mutable? v1182@mutable?) (set! v1255@v1180@current-primitive-locations v1180@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (v1340@make-collection v1342@current-library-collection v1348@v1343 v1350@v1345 v1352@v1344 v1355@library? v1357@make-library v1359@library-id v1361@library-name v1363@library-version v1365@library-imp* v1367@library-vis* v1369@library-inv* v1371@library-subst v1373@library-env v1375@library-visit-state v1377@library-invoke-state v1379@library-visit-code v1381@library-invoke-code v1383@library-visible? v1385@library-source-file-name v1387@set-library-id! v1389@set-library-name! v1391@set-library-version! v1393@set-library-imp*! v1395@set-library-vis*! v1397@set-library-inv*! v1399@set-library-subst! v1401@set-library-env! v1403@set-library-visit-state! v1405@set-library-invoke-state! v1407@set-library-visit-code! v1409@set-library-invoke-code! v1411@set-library-visible?! v1413@set-library-source-file-name! v1415@rp v1417@find-dependencies v1419@find-library-by v1421@library-path v1423@library-extensions v1425@library-name->file-name v1427@file-locator v1429@serialize-all v1431@current-precompiled-library-loader v1433@try-load-from-file v1435@library-loader v1437@current-library-expander v1439@external-pending-libraries v1441@find-external-library v1443@find-library-by-name v1445@library-exists? v1447@find-library-by-spec/die v1449@label->binding-table v1451@install-library-record v1453@install-library v1455@imported-label->binding v1457@invoke-library v1459@visit-library v1461@invoke-library-by-spec v1463@installed-libraries v1465@library-spec) (begin (set! v1340@make-collection (lambda () ((lambda (v1466@set) ((lambda (v1469@set-cons) (begin (set! v1469@set-cons (lambda (v1474@x v1475@ls) (if (memq v1474@x v1475@ls) v1475@ls (cons v1474@x v1475@ls)))) (lambda v1472 ((lambda (v1473) (if (= v1473 '0) (apply (lambda () v1466@set) v1472) (if (= v1473 '1) (apply (lambda (v1470@x) (set! v1466@set (v1469@set-cons v1470@x v1466@set))) v1472) (error 'apply '"invalid arg count")))) (length v1472))))) '#f)) '()))) (set! v1342@current-library-collection (v1174@v952@make-parameter (v1340@make-collection) (lambda (v1478@x) (begin (if (not (procedure? v1478@x)) (assertion-violation 'current-library-collection '"not a procedure" v1478@x) (void)) v1478@x)))) (set! v1348@v1343 (make-record-type-descriptor 'library '#f 'v1346 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! v1350@v1345 '#f) (set! v1352@v1344 (make-record-constructor-descriptor v1348@v1343 '#f v1350@v1345)) (set! v1355@library? (record-predicate v1348@v1343)) (set! v1357@make-library (record-constructor v1352@v1344)) (set! v1359@library-id (record-accessor v1348@v1343 '0)) (set! v1361@library-name (record-accessor v1348@v1343 '1)) (set! v1363@library-version (record-accessor v1348@v1343 '2)) (set! v1365@library-imp* (record-accessor v1348@v1343 '3)) (set! v1367@library-vis* (record-accessor v1348@v1343 '4)) (set! v1369@library-inv* (record-accessor v1348@v1343 '5)) (set! v1371@library-subst (record-accessor v1348@v1343 '6)) (set! v1373@library-env (record-accessor v1348@v1343 '7)) (set! v1375@library-visit-state (record-accessor v1348@v1343 '8)) (set! v1377@library-invoke-state (record-accessor v1348@v1343 '9)) (set! v1379@library-visit-code (record-accessor v1348@v1343 '10)) (set! v1381@library-invoke-code (record-accessor v1348@v1343 '11)) (set! v1383@library-visible? (record-accessor v1348@v1343 '12)) (set! v1385@library-source-file-name (record-accessor v1348@v1343 '13)) (set! v1387@set-library-id! (record-mutator v1348@v1343 '0)) (set! v1389@set-library-name! (record-mutator v1348@v1343 '1)) (set! v1391@set-library-version! (record-mutator v1348@v1343 '2)) (set! v1393@set-library-imp*! (record-mutator v1348@v1343 '3)) (set! v1395@set-library-vis*! (record-mutator v1348@v1343 '4)) (set! v1397@set-library-inv*! (record-mutator v1348@v1343 '5)) (set! v1399@set-library-subst! (record-mutator v1348@v1343 '6)) (set! v1401@set-library-env! (record-mutator v1348@v1343 '7)) (set! v1403@set-library-visit-state! (record-mutator v1348@v1343 '8)) (set! v1405@set-library-invoke-state! (record-mutator v1348@v1343 '9)) (set! v1407@set-library-visit-code! (record-mutator v1348@v1343 '10)) (set! v1409@set-library-invoke-code! (record-mutator v1348@v1343 '11)) (set! v1411@set-library-visible?! (record-mutator v1348@v1343 '12)) (set! v1413@set-library-source-file-name! (record-mutator v1348@v1343 '13)) (set! v1415@rp (v1171@v946@make-record-printer 'library (lambda (v1480@x v1481@p v1482@wr) (begin (if (not (v1355@library? v1480@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (v1363@library-version v1480@x)) (v1361@library-name v1480@x) (append (v1361@library-name v1480@x) (list (v1363@library-version v1480@x))))) v1481@p))))) (set! v1417@find-dependencies (lambda (v1486@ls) (if (null? v1486@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! v1419@find-library-by (lambda (v1488@pred) ((letrec ((v1490@f (lambda (v1492@ls) (if (null? v1492@ls) '#f (if (v1488@pred (car v1492@ls)) (car v1492@ls) (v1490@f (cdr v1492@ls))))))) v1490@f) ((v1342@current-library-collection))))) (set! v1421@library-path (v1174@v952@make-parameter '(".") (lambda (v1494@x) (if (and (list? v1494@x) (for-all string? v1494@x)) (map (lambda (v1496@x) v1496@x) v1494@x) (assertion-violation 'library-path '"not a list of strings" v1494@x))))) (set! v1423@library-extensions (v1174@v952@make-parameter '(".sls" ".ss" ".scm") (lambda (v1498@x) (if (and (list? v1498@x) (for-all string? v1498@x)) (map (lambda (v1500@x) v1500@x) v1498@x) (assertion-violation 'library-extensions '"not a list of strings" v1498@x))))) (set! v1425@library-name->file-name (lambda (v1502@x) (call-with-values (lambda () (open-string-output-port)) (lambda (v1506@v1504@p v1507@v1505@extract) ((lambda (v1510@extract v1511@p) ((lambda (v1515@display-hex) (begin (set! v1515@display-hex (lambda (v1524@n) (if (<= '0 v1524@n '9) (display v1524@n v1511@p) (display (integer->char (+ (char->integer '#\a) (- v1524@n '10))) v1511@p)))) (begin ((letrec ((v1516@f (lambda (v1518@ls) (if (not (null? v1518@ls)) (begin (display '"/" v1511@p) (for-each (lambda (v1520@c) (if (or (char<=? '#\a v1520@c '#\z) (char<=? '#\A v1520@c '#\Z) (char<=? '#\0 v1520@c '#\9) (memv v1520@c '(#\- #\. #\_ #\~))) (display v1520@c v1511@p) (begin (display '"%" v1511@p) ((lambda (v1522@n) (begin (v1515@display-hex (quotient v1522@n '16)) (v1515@display-hex (remainder v1522@n '16)))) (char->integer v1520@c))))) (string->list (symbol->string (car v1518@ls)))) (v1516@f (cdr v1518@ls))) (void))))) v1516@f) v1502@x) (v1510@extract)))) '#f)) v1507@v1505@extract v1506@v1504@p))))) (set! v1427@file-locator (v1174@v952@make-parameter (lambda (v1526@x) ((lambda (v1528@str) ((letrec ((v1530@f (lambda (v1532@ls v1533@exts v1534@failed-list) (if (null? v1532@ls) ((lambda () ((lambda (v1546@v1541 v1548@v1543 v1550@v1542 v1553@v1540 v1555@make-library-resolution-condition v1557@v1538 v1559@v1539 v1561@library-resolution-condition? v1563@condition-library v1565@condition-files) (begin (set! v1546@v1541 (make-record-type-descriptor '&library-resolution v10082@v9397@&condition-rtd 'v1544 '#f '#f '#((immutable library) (immutable files)))) (set! v1548@v1543 '#f) (set! v1550@v1542 (make-record-constructor-descriptor v1546@v1541 v10083@v9399@&condition-rcd v1548@v1543)) (set! v1553@v1540 (record-predicate v1546@v1541)) (set! v1555@make-library-resolution-condition (record-constructor v1550@v1542)) (set! v1557@v1538 (record-accessor v1546@v1541 '0)) (set! v1559@v1539 (record-accessor v1546@v1541 '1)) (set! v1561@library-resolution-condition? (condition-predicate v1546@v1541)) (set! v1563@condition-library (condition-accessor v1546@v1541 v1557@v1538)) (set! v1565@condition-files (condition-accessor v1546@v1541 v1559@v1539)) (raise (condition (v10114@v9547@make-error) (v10148@v9637@make-who-condition 'expander) (v10088@v9480@make-message-condition '"cannot locate library in library-path") (v1555@make-library-resolution-condition v1526@x (reverse v1534@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? v1533@exts) (v1530@f (cdr v1532@ls) (v1423@library-extensions) v1534@failed-list) ((lambda (v1566@name) (if (file-exists? v1566@name) v1566@name (v1530@f v1532@ls (cdr v1533@exts) (cons v1566@name v1534@failed-list)))) (string-append (car v1532@ls) v1528@str (car v1533@exts)))))))) v1530@f) (v1421@library-path) (v1423@library-extensions) '())) (v1425@library-name->file-name v1526@x))) (lambda (v1568@f) (if (procedure? v1568@f) v1568@f (assertion-violation 'file-locator '"not a procedure" v1568@f))))) (set! v1429@serialize-all (lambda (v1570@serialize v1571@compile) ((lambda (v1575@library-desc) (begin (set! v1575@library-desc (lambda (v1578@x) (list (v1359@library-id v1578@x) (v1361@library-name v1578@x)))) (for-each (lambda (v1576@x) (if (v1385@library-source-file-name v1576@x) (v1570@serialize (v1385@library-source-file-name v1576@x) (list (v1359@library-id v1576@x) (v1361@library-name v1576@x) (v1363@library-version v1576@x) (map v1575@library-desc (v1365@library-imp* v1576@x)) (map v1575@library-desc (v1367@library-vis* v1576@x)) (map v1575@library-desc (v1369@library-inv* v1576@x)) (v1371@library-subst v1576@x) (v1373@library-env v1576@x) (v1571@compile (v1379@library-visit-code v1576@x)) (v1571@compile (v1381@library-invoke-code v1576@x)) (v1383@library-visible? v1576@x))) (void))) ((v1342@current-library-collection))))) '#f))) (set! v1431@current-precompiled-library-loader (v1174@v952@make-parameter (lambda (v1580@filename v1581@sk) '#f))) (set! v1433@try-load-from-file (lambda (v1584@filename) ((v1431@current-precompiled-library-loader) v1584@filename (lambda v1622 ((lambda (v1623) (if (= v1623 '11) (apply (lambda (v1586@id v1587@name v1588@ver v1589@imp* v1590@vis* v1591@inv* v1592@exp-subst v1593@exp-env v1594@visit-proc v1595@invoke-proc v1596@visible?) ((letrec ((v1608@f (lambda (v1610@deps) (if (null? v1610@deps) (begin (v1453@install-library v1586@id v1587@name v1588@ver v1589@imp* v1590@vis* v1591@inv* v1592@exp-subst v1593@exp-env v1594@visit-proc v1595@invoke-proc '#f '#f v1596@visible? '#f) '#t) ((lambda (v1612@d) ((lambda (v1614@label v1615@dname) ((lambda (v1618@l) (if (and (v1355@library? v1618@l) (eq? v1614@label (v1359@library-id v1618@l))) (v1608@f (cdr v1610@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" v1587@name v1615@dname v1584@filename v1618@l v1614@label (v1359@library-id v1618@l)) '#f))) (v1443@find-library-by-name v1615@dname))) (car v1612@d) (cadr v1612@d))) (car v1610@deps)))))) v1608@f) (append v1589@imp* v1590@vis* v1591@inv*))) v1622) (if (>= v1623 '0) (apply (lambda v1620@others '#f) v1622) (error 'apply '"invalid arg count")))) (length v1622)))))) (set! v1435@library-loader (v1174@v952@make-parameter (lambda (v1624@x) ((lambda (v1626@file-name) (if (not v1626@file-name) (assertion-violation '#f '"cannot file library" v1624@x) (or (v1433@try-load-from-file v1626@file-name) ((v1437@current-library-expander) (v1173@v950@read-library-source-file v1626@file-name) v1626@file-name (lambda (v1628@name) (if (not (fast-equal? v1628@name v1624@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (v1632@v1630@p v1633@v1631@e) ((lambda (v1636@e v1637@p) (begin (display '"expected to find library " v1637@p) (write v1624@x v1637@p) (display '" in file " v1637@p) (display v1626@file-name v1637@p) (display '", found " v1637@p) (write v1628@name v1637@p) (display '" instead" v1637@p) (v1636@e))) v1633@v1631@e v1632@v1630@p)))) (void))))))) ((v1427@file-locator) v1624@x))) (lambda (v1640@f) (if (procedure? v1640@f) v1640@f (assertion-violation 'library-locator '"not a procedure" v1640@f))))) (set! v1437@current-library-expander (v1174@v952@make-parameter (lambda (v1642@x) (assertion-violation 'library-expander '"not initialized")) (lambda (v1644@f) (if (procedure? v1644@f) v1644@f (assertion-violation 'library-expander '"not a procedure" v1644@f))))) (set! v1439@external-pending-libraries (v1174@v952@make-parameter '())) (set! v1441@find-external-library (lambda (v1646@name) (begin (if (member v1646@name (v1439@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" v1646@name) (void)) ((lambda (v1650@v1648@external-pending-libraries v1651@v1649@external-pending-libraries) ((lambda (v1654@swap) (dynamic-wind v1654@swap (lambda () (begin ((v1435@library-loader) v1646@name) (or (v1419@find-library-by (lambda (v1656@x) (fast-equal? (v1361@library-name v1656@x) v1646@name))) (assertion-violation '#f '"handling external library did not yield the correct library" v1646@name)))) v1654@swap)) (lambda () ((lambda (v1658@t) (begin (v1650@v1648@external-pending-libraries v1651@v1649@external-pending-libraries) (set! v1651@v1649@external-pending-libraries v1658@t))) (v1650@v1648@external-pending-libraries))))) v1439@external-pending-libraries (cons v1646@name (v1439@external-pending-libraries)))))) (set! v1443@find-library-by-name (lambda (v1660@name) (or (v1419@find-library-by (lambda (v1662@x) (fast-equal? (v1361@library-name v1662@x) v1660@name))) (v1441@find-external-library v1660@name)))) (set! v1445@library-exists? (lambda (v1664@name) (and (v1419@find-library-by (lambda (v1666@x) (fast-equal? (v1361@library-name v1666@x) v1664@name))) '#t))) (set! v1447@find-library-by-spec/die (lambda (v1668@spec) ((lambda (v1670@id) (or (v1419@find-library-by (lambda (v1672@x) (eq? v1670@id (v1359@library-id v1672@x)))) (assertion-violation '#f '"cannot find library with required spec" v1668@spec))) (car v1668@spec)))) (set! v1449@label->binding-table (make-eq-hashtable)) (set! v1451@install-library-record (lambda (v1674@lib) (begin ((lambda (v1676@exp-env) (for-each (lambda (v1678@x) ((lambda (v1680@label v1681@binding) ((lambda (v1684@binding) (begin (if (hashtable-ref v1449@label->binding-table v1680@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" v1680@label (hashtable-ref v1449@label->binding-table v1680@label '#f) v1684@binding) (exit)) (void)) (hashtable-set! v1449@label->binding-table v1680@label v1684@binding))) ((lambda (v1686@t) (if (memv v1686@t '(global)) (cons 'global (cons v1674@lib (cdr v1681@binding))) (if (memv v1686@t '(global-macro)) (cons 'global-macro (cons v1674@lib (cdr v1681@binding))) (if (memv v1686@t '(global-macro!)) (cons 'global-macro! (cons v1674@lib (cdr v1681@binding))) v1681@binding)))) (car v1681@binding)))) (car v1678@x) (cdr v1678@x))) v1676@exp-env)) (v1373@library-env v1674@lib)) ((v1342@current-library-collection) v1674@lib)))) (set! v1453@install-library (lambda (v1688@id v1689@name v1690@ver v1691@imp* v1692@vis* v1693@inv* v1694@exp-subst v1695@exp-env v1696@visit-proc v1697@invoke-proc v1698@visit-code v1699@invoke-code v1700@visible? v1701@source-file-name) ((lambda (v1716@imp-lib* v1717@vis-lib* v1718@inv-lib*) (begin (if (not (and (symbol? v1688@id) (list? v1689@name) (list? v1690@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" v1688@id v1689@name v1690@ver) (void)) (if (v1445@library-exists? v1689@name) (assertion-violation 'install-library '"library is already installed" v1689@name) (void)) ((lambda (v1722@lib) (v1451@install-library-record v1722@lib)) (v1357@make-library v1688@id v1689@name v1690@ver v1716@imp-lib* v1717@vis-lib* v1718@inv-lib* v1694@exp-subst v1695@exp-env v1696@visit-proc v1697@invoke-proc v1698@visit-code v1699@invoke-code v1700@visible? v1701@source-file-name)))) (map v1447@find-library-by-spec/die v1691@imp*) (map v1447@find-library-by-spec/die v1692@vis*) (map v1447@find-library-by-spec/die v1693@inv*)))) (set! v1455@imported-label->binding (lambda (v1724@lab) (hashtable-ref v1449@label->binding-table v1724@lab '#f))) (set! v1457@invoke-library (lambda (v1726@lib) ((lambda (v1728@invoke) (if (procedure? v1728@invoke) (begin (v1405@set-library-invoke-state! v1726@lib (lambda () (assertion-violation 'invoke '"circularity detected" v1726@lib))) (for-each v1457@invoke-library (v1369@library-inv* v1726@lib)) (v1405@set-library-invoke-state! v1726@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" v1726@lib))) (v1728@invoke) (v1405@set-library-invoke-state! v1726@lib '#t)) (void))) (v1377@library-invoke-state v1726@lib)))) (set! v1459@visit-library (lambda (v1730@lib) ((lambda (v1732@visit) (if (procedure? v1732@visit) (begin (v1403@set-library-visit-state! v1730@lib (lambda () (assertion-violation 'visit '"circularity detected" v1730@lib))) (for-each v1457@invoke-library (v1367@library-vis* v1730@lib)) (v1403@set-library-visit-state! v1730@lib (lambda () (assertion-violation 'invoke '"first visit did not return" v1730@lib))) (v1732@visit) (v1403@set-library-visit-state! v1730@lib '#t)) (void))) (v1375@library-visit-state v1730@lib)))) (set! v1461@invoke-library-by-spec (lambda (v1734@spec) (v1457@invoke-library (v1447@find-library-by-spec/die v1734@spec)))) (set! v1463@installed-libraries (lambda v1742 ((lambda (v1743) (if (= v1743 '1) (apply (lambda (v1736@all?) ((letrec ((v1738@f (lambda (v1740@ls) (if (null? v1740@ls) '() (if (or v1736@all? (v1383@library-visible? (car v1740@ls))) (cons (car v1740@ls) (v1738@f (cdr v1740@ls))) (v1738@f (cdr v1740@ls))))))) v1738@f) ((v1342@current-library-collection)))) v1742) (if (= v1743 '0) (apply (lambda () (v1463@installed-libraries '#f)) v1742) (error 'apply '"invalid arg count")))) (length v1742)))) (set! v1465@library-spec (lambda (v1744@x) (begin (if (not (v1355@library? v1744@x)) (assertion-violation 'library-spec '"not a library" v1744@x) (void)) (list (v1359@library-id v1744@x) (v1361@library-name v1744@x) (v1363@library-version v1744@x))))) (begin (set! v1806@v1465@library-spec v1465@library-spec) (set! v1805@v1463@installed-libraries v1463@installed-libraries) (set! v1804@v1461@invoke-library-by-spec v1461@invoke-library-by-spec) (set! v1803@v1459@visit-library v1459@visit-library) (set! v1802@v1457@invoke-library v1457@invoke-library) (set! v1801@v1455@imported-label->binding v1455@imported-label->binding) (set! v1800@v1453@install-library v1453@install-library) (set! v1799@v1451@install-library-record v1451@install-library-record) (set! v1798@v1449@label->binding-table v1449@label->binding-table) (set! v1797@v1447@find-library-by-spec/die v1447@find-library-by-spec/die) (set! v1796@v1445@library-exists? v1445@library-exists?) (set! v1795@v1443@find-library-by-name v1443@find-library-by-name) (set! v1794@v1441@find-external-library v1441@find-external-library) (set! v1793@v1439@external-pending-libraries v1439@external-pending-libraries) (set! v1792@v1437@current-library-expander v1437@current-library-expander) (set! v1791@v1435@library-loader v1435@library-loader) (set! v1790@v1433@try-load-from-file v1433@try-load-from-file) (set! v1789@v1431@current-precompiled-library-loader v1431@current-precompiled-library-loader) (set! v1788@v1429@serialize-all v1429@serialize-all) (set! v1787@v1427@file-locator v1427@file-locator) (set! v1786@v1425@library-name->file-name v1425@library-name->file-name) (set! v1785@v1423@library-extensions v1423@library-extensions) (set! v1784@v1421@library-path v1421@library-path) (set! v1783@v1419@find-library-by v1419@find-library-by) (set! v1782@v1417@find-dependencies v1417@find-dependencies) (set! v1781@v1415@rp v1415@rp) (set! v1780@v1413@set-library-source-file-name! v1413@set-library-source-file-name!) (set! v1779@v1411@set-library-visible?! v1411@set-library-visible?!) (set! v1778@v1409@set-library-invoke-code! v1409@set-library-invoke-code!) (set! v1777@v1407@set-library-visit-code! v1407@set-library-visit-code!) (set! v1776@v1405@set-library-invoke-state! v1405@set-library-invoke-state!) (set! v1775@v1403@set-library-visit-state! v1403@set-library-visit-state!) (set! v1774@v1401@set-library-env! v1401@set-library-env!) (set! v1773@v1399@set-library-subst! v1399@set-library-subst!) (set! v1772@v1397@set-library-inv*! v1397@set-library-inv*!) (set! v1771@v1395@set-library-vis*! v1395@set-library-vis*!) (set! v1770@v1393@set-library-imp*! v1393@set-library-imp*!) (set! v1769@v1391@set-library-version! v1391@set-library-version!) (set! v1768@v1389@set-library-name! v1389@set-library-name!) (set! v1767@v1387@set-library-id! v1387@set-library-id!) (set! v1766@v1385@library-source-file-name v1385@library-source-file-name) (set! v1765@v1383@library-visible? v1383@library-visible?) (set! v1764@v1381@library-invoke-code v1381@library-invoke-code) (set! v1763@v1379@library-visit-code v1379@library-visit-code) (set! v1762@v1377@library-invoke-state v1377@library-invoke-state) (set! v1761@v1375@library-visit-state v1375@library-visit-state) (set! v1760@v1373@library-env v1373@library-env) (set! v1759@v1371@library-subst v1371@library-subst) (set! v1758@v1369@library-inv* v1369@library-inv*) (set! v1757@v1367@library-vis* v1367@library-vis*) (set! v1756@v1365@library-imp* v1365@library-imp*) (set! v1755@v1363@library-version v1363@library-version) (set! v1754@v1361@library-name v1361@library-name) (set! v1753@v1359@library-id v1359@library-id) (set! v1752@v1357@make-library v1357@make-library) (set! v1751@v1355@library? v1355@library?) (set! v1750@v1352@v1344 v1352@v1344) (set! v1749@v1350@v1345 v1350@v1345) (set! v1748@v1348@v1343 v1348@v1343) (set! v1747@v1342@current-library-collection v1342@current-library-collection) (set! v1746@v1340@make-collection v1340@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (v1809@build-global-define v1922@build-lambda v1924@build-case-lambda v1926@build-let v1972@build-sequence v1974@build-void v1976@build-letrec v1978@build-letrec* v1980@build-library-letrec* v1982@build-receive) (begin (set! v1809@build-global-define (lambda (v1983@x) (v1974@build-void))) (set! v1922@build-lambda (lambda (v1985@ae v1986@vars v1987@exp) (list 'lambda v1986@vars v1987@exp))) (set! v1924@build-case-lambda (lambda (v1991@ae v1992@vars* v1993@exp*) ((lambda (v1998@build-error v2000@build-pred v2002@build-apply v2004@expand-case-lambda) (begin (set! v1998@build-error (lambda (v2051@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! v2000@build-pred (lambda (v2029@ae v2030@n v2031@vars) (call-with-values (lambda () ((letrec ((v2037@f (lambda (v2039@vars v2040@count) (if (pair? v2039@vars) (v2037@f (cdr v2039@vars) (+ v2040@count '1)) (if (null? v2039@vars) (values v2040@count '=) (values v2040@count '>=)))))) v2037@f) v2031@vars '0)) (lambda (v2043@v2035@count v2044@v2036@pred) ((lambda (v2047@pred v2048@count) (list (list 'primitive v2047@pred) v2030@n (list 'quote v2048@count))) v2044@v2036@pred v2043@v2035@count))))) (set! v2002@build-apply (lambda (v2021@ae v2022@g v2023@vars v2024@exp) (list '(primitive apply) (v1922@build-lambda v2021@ae v2023@vars v2024@exp) v2022@g))) (set! v2004@expand-case-lambda (lambda (v2005@ae v2006@vars v2007@exp*) ((lambda (v2011@g v2012@n) (list 'lambda v2011@g (v1926@build-let v2005@ae (list v2012@n) (list (list '(primitive length) v2011@g)) ((letrec ((v2015@f (lambda (v2017@vars* v2018@exp*) (if (null? v2017@vars*) (v1998@build-error v2005@ae) (list 'if (v2000@build-pred v2005@ae v2012@n (car v2017@vars*)) (v2002@build-apply v2005@ae v2011@g (car v2017@vars*) (car v2018@exp*)) (v2015@f (cdr v2017@vars*) (cdr v2018@exp*))))))) v2015@f) v1992@vars* v2007@exp*)))) (v1160@v924@gensym) (v1160@v924@gensym)))) (if (= (length v1993@exp*) '1) (v1922@build-lambda v1991@ae (car v1992@vars*) (car v1993@exp*)) (v2004@expand-case-lambda v1991@ae v1992@vars* v1993@exp*)))) '#f '#f '#f '#f))) (set! v1926@build-let (lambda (v2053@ae v2054@lhs* v2055@rhs* v2056@body) (cons (v1922@build-lambda v2053@ae v2054@lhs* v2056@body) v2055@rhs*))) (set! v1972@build-sequence (lambda (v2061@ae v2062@exps) ((letrec ((v2065@loop (lambda (v2067@exps) (if (null? (cdr v2067@exps)) (car v2067@exps) (if (equal? (car v2067@exps) (v1974@build-void)) (v2065@loop (cdr v2067@exps)) (cons 'begin v2067@exps)))))) v2065@loop) v2062@exps))) (set! v1974@build-void (lambda () '((primitive void)))) (set! v1976@build-letrec (lambda (v2069@ae v2070@vars v2071@val-exps v2072@body-exp) (if (null? v2070@vars) v2072@body-exp (list 'letrec (map list v2070@vars v2071@val-exps) v2072@body-exp)))) (set! v1978@build-letrec* (lambda (v2077@ae v2078@vars v2079@val-exps v2080@body-exp) (if (null? v2078@vars) v2080@body-exp (v1926@build-let v2077@ae v2078@vars (map (lambda (v2085@x) (list 'quote '#f)) v2078@vars) (v1972@build-sequence v2077@ae (append (map (lambda (v2087@lhs v2088@rhs) (list 'set! v2087@lhs v2088@rhs)) v2078@vars v2079@val-exps) (list v2080@body-exp))))))) (set! v1980@build-library-letrec* (lambda (v2091@ae v2092@name v2093@vars v2094@locs v2095@val-exps v2096@body-exp) (list 'library-letrec* v2092@name (map list v2093@vars v2094@locs v2095@val-exps) v2096@body-exp))) (set! v1982@build-receive (lambda (v2103@ae v2104@vars v2105@producer v2106@body*) (begin (display '"************** in ") (cons 'receive (cons v2104@vars (cons v2105@producer v2106@body*)))))) (begin (set! v2120@v1982@build-receive v1982@build-receive) (set! v2119@v1980@build-library-letrec* v1980@build-library-letrec*) (set! v2118@v1978@build-letrec* v1978@build-letrec*) (set! v2117@v1976@build-letrec v1976@build-letrec) (set! v2116@v1974@build-void v1974@build-void) (set! v2115@v1972@build-sequence v1972@build-sequence) (set! v2114@v1926@build-let v1926@build-let) (set! v2113@v1924@build-case-lambda v1924@build-case-lambda) (set! v2112@v1922@build-lambda v1922@build-lambda) (set! v2111@v1809@build-global-define v1809@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (v2135@file-options-macro v2137@set-cons v2139@set-union v2144@top-mark* v2146@top-marked? v2148@gen-lexical v2150@gen-global v2152@gen-label v2154@gen-top-level-label v2156@gen-define-label+loc v2158@gen-define-label v2164@v2159 v2166@v2161 v2168@v2160 v2171@rib? v2173@make-rib v2175@rib-sym* v2177@rib-mark** v2179@rib-label* v2181@rib-sealed/freq v2183@rib-cache v2185@set-rib-sym*! v2187@set-rib-mark**! v2189@set-rib-label*! v2191@set-rib-sealed/freq! v2193@set-rib-cache! v2195@make-empty-rib v2197@extend-rib! v2199@extend-rib/nc! v2201@make-rib-map v2203@seal-rib! v2205@unseal-rib! v2207@make-full-rib v2213@v2208 v2215@v2210 v2217@v2209 v2220@stx? v2222@make-stx v2224@stx-expr v2226@stx-mark* v2228@stx-subst* v2230@stx-ae* v2232@set-stx-expr! v2234@set-stx-mark*! v2236@set-stx-subst*! v2238@set-stx-ae*! v2240@rp v2242@datum->stx v2244@gen-mark v2246@anti-mark v2248@anti-mark? v2250@join-wraps v2252@mkstx v2254@add-mark v2256@add-subst v2258@syntax-kind? v2260@syntax-vector->list v2262@syntax-pair? v2264@syntax-vector? v2266@syntax-null? v2268@syntax-list? v2270@syntax-car v2272@syntax-cdr v2274@syntax->list v2276@id? v2278@id->sym v2280@same-marks? v2282@bound-id=? v2284@free-id=? v2286@valid-bound-ids? v2288@distinct-bound-ids? v2290@bound-id-member? v2292@self-evaluating? v2294@strip-annotations v2296@strip v2298@stx->datum v2300@same-marks*? v2302@id->label v2304@id->real-label v2306@label->binding v2308@make-binding v2310@binding-type v2312@binding-value v2314@raise-unbound-error v2316@syntax-type v2330@sanitize-binding v2332@make-variable-transformer v2334@variable-transformer? v2336@variable-transformer-procedure v2338@make-eval-transformer v2649@parse-define v2651@parse-define-syntax v2653@scheme-stx-hashtable v2655@scheme-stx v2657@lexical-var v2659@lexical-mutable? v2661@set-lexical-mutable! v2663@add-lexical v2665@add-lexicals v2667@letrec-helper v2669@letrec-transformer v2671@letrec*-transformer v2673@fluid-let-syntax-transformer v2675@type-descriptor-transformer v2677@record-type-descriptor-transformer v2679@record-constructor-descriptor-transformer v2681@when-macro v2683@unless-macro v2685@if-transformer v2687@and-transformer v2689@or-transformer v2691@case-macro v2693@quote-transformer v2695@case-lambda-transformer v2697@lambda-transformer v2699@bless v2701@with-syntax-macro v2703@invalid-fmls-error v2705@let-macro v2707@let-values-macro v2709@let*-values-macro v2711@trace-lambda-macro v2713@trace-define-macro v2715@trace-define-syntax-macro v2717@trace-let/rec-syntax v2719@trace-let-syntax-macro v2721@trace-letrec-syntax-macro v2723@guard-macro v2725@define-enumeration-macro v2727@time-macro v2729@delay-macro v2731@assert-macro v2733@endianness-macro v2735@identifier-syntax-macro v2737@do-macro v2739@let*-macro v2741@or-macro v2743@and-macro v2745@cond-macro v2747@do-include v2749@include-macro v2751@include-into-macro v2753@syntax-rules-macro v2755@quasiquote-macro v2757@quasisyntax-macro v2759@define-struct-macro v2761@define-record-type-macro v2763@define-condition-type-macro v2765@incorrect-usage-macro v2767@parameterize-macro v2769@foreign-call-transformer v2771@convert-pattern v2773@syntax-dispatch v2775@ellipsis? v2777@underscore? v2779@verify-literals v2781@syntax-case-transformer v2783@ellipsis-map v2785@syntax-transformer v2787@core-macro-transformer v2789@symbol-macro v2791@macro-transformer v2793@local-macro-transformer v2795@do-macro-call v2797@chi-macro v2799@chi-local-macro v2801@chi-global-macro v2803@chi-expr* v2805@chi-application v2807@chi-expr v2809@chi-set! v2811@verify-formals v2813@chi-lambda-clause v2815@chi-lambda-clause* v2817@chi-defun v2819@chi-rhs v2821@expand-interaction-rhs*/init* v2823@chi-rhs* v2825@find-bound=? v2827@find-dups v2829@chi-internal v2831@parse-module v2837@v2832 v2839@v2834 v2841@v2833 v2844@module-interface? v2846@make-module-interface v2848@module-interface-first-mark v2850@module-interface-exp-id-vec v2852@module-interface-exp-lab-vec v2854@set-module-interface-first-mark! v2856@set-module-interface-exp-id-vec! v2858@set-module-interface-exp-lab-vec! v2860@module-interface-exp-id* v2862@chi-internal-module v2864@chi-body* v2866@expand-transformer v2868@parse-exports v2870@parse-library-name v2872@parse-library v2874@parse-import-spec* v2876@make-top-rib v2878@make-collector v2880@inv-collector v2882@vis-collector v2884@imp-collector v2886@chi-library-internal v2888@chi-interaction-expr v2890@library-body-expander v2892@core-library-expander v2894@parse-top-level-program v2896@top-level-expander v2902@v2897 v2904@v2899 v2906@v2898 v2909@env? v2911@make-env v2913@env-names v2915@env-labels v2917@env-itc v2919@set-env-names! v2921@set-env-labels! v2923@set-env-itc! v2925@rp v2931@v2926 v2933@v2928 v2935@v2927 v2938@interaction-env? v2940@make-interaction-env v2942@interaction-env-rib v2944@interaction-env-r v2946@interaction-env-locs v2948@set-interaction-env-rib! v2950@set-interaction-env-r! v2952@set-interaction-env-locs! v2954@rp v2956@interaction-environment-symbols v2958@environment-bindings v2960@parse-binding v2962@environment? v2964@environment-symbols v2966@environment v2968@null-environment v2970@scheme-report-environment v2972@expand v2974@eval v2976@library-expander v2978@boot-library-expand v2980@rev-map-append v2982@build-exports v2984@make-export-subst v2986@make-export-env/macros v2988@generate-temporaries v2990@free-identifier=? v2992@bound-identifier=? v2994@make-source-condition v2996@extract-position-condition v2998@expression-position v3000@assertion-error v3002@syntax-error v3004@syntax-violation* v3006@syntax-violation v3008@identifier? v3010@datum->syntax v3012@syntax->datum v3014@compile-r6rs-top-level v3016@pre-compile-r6rs-top-level v3018@interaction-environment v3020@top-level-context) (begin (set! v2135@file-options-macro (lambda (v3021@x) ((lambda (v3024@valid-option?) (begin (set! v3024@valid-option? (lambda (v3033@x) (and (v2276@id? v3033@x) (memq (v2278@id->sym v3033@x) '(no-fail no-create no-truncate))))) ((lambda (v3025@t) ((lambda (v3027@ls/false) (if (and v3027@ls/false (apply (lambda (v3029@opt*) (for-all v3024@valid-option? v3029@opt*)) v3027@ls/false)) (apply (lambda (v3031@opt*) (v2699@bless (list 'make-file-options (list 'quote v3031@opt*)))) v3027@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3025@t))) (v2773@syntax-dispatch v3025@t '(_ . each-any)))) v3021@x))) '#f))) (set! v2137@set-cons (lambda (v3035@x v3036@ls) (if (memq v3035@x v3036@ls) v3036@ls (cons v3035@x v3036@ls)))) (set! v2139@set-union (lambda (v3039@ls1 v3040@ls2) (if (null? v3039@ls1) v3040@ls2 (if (memq (car v3039@ls1) v3040@ls2) (v2139@set-union (cdr v3039@ls1) v3040@ls2) (cons (car v3039@ls1) (v2139@set-union (cdr v3039@ls1) v3040@ls2)))))) (set! v2144@top-mark* '(top)) (set! v2146@top-marked? (lambda (v3043@m*) (memq 'top v3043@m*))) (set! v2148@gen-lexical (lambda (v3045@sym) (if (symbol? v3045@sym) (v1160@v924@gensym v3045@sym) (if (v2220@stx? v3045@sym) (v2148@gen-lexical (v2278@id->sym v3045@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" v3045@sym))))) (set! v2150@gen-global (lambda (v3047@x) (v2148@gen-lexical v3047@x))) (set! v2152@gen-label (lambda (v3049@_) (v1160@v924@gensym))) (set! v2154@gen-top-level-label (lambda (v3051@id v3052@rib) ((lambda (v3056@find) (begin (set! v3056@find (lambda (v3067@sym v3068@mark* v3069@sym* v3070@mark** v3071@label*) (and (pair? v3069@sym*) (if (and (eq? v3067@sym (car v3069@sym*)) (v2280@same-marks? v3068@mark* (car v3070@mark**))) (car v3071@label*) (v3056@find v3067@sym v3068@mark* (cdr v3069@sym*) (cdr v3070@mark**) (cdr v3071@label*)))))) ((lambda (v3057@sym v3058@mark*) ((lambda (v3061@sym*) ((lambda (v3063@t) (if v3063@t ((lambda (v3065@label) (if (v1801@v1455@imported-label->binding v3065@label) (v1160@v924@gensym) v3065@label)) v3063@t) (v1160@v924@gensym))) (and (memq v3057@sym (v2175@rib-sym* v3052@rib)) (v3056@find v3057@sym v3058@mark* v3061@sym* (v2177@rib-mark** v3052@rib) (v2179@rib-label* v3052@rib))))) (v2175@rib-sym* v3052@rib))) (v2278@id->sym v3051@id) (v2226@stx-mark* v3051@id)))) '#f))) (set! v2156@gen-define-label+loc (lambda (v3077@id v3078@rib) ((lambda (v3081@t) (if v3081@t ((lambda (v3083@env) ((lambda (v3085@label v3086@locs) (values v3085@label ((lambda (v3089@t) (if v3089@t (cdr v3089@t) ((lambda (v3091@loc) (begin (v2952@set-interaction-env-locs! v3083@env (cons (cons v3085@label v3091@loc) v3086@locs)) v3091@loc)) (v2148@gen-lexical v3077@id)))) (assq v3085@label v3086@locs)))) (v2154@gen-top-level-label v3077@id v3078@rib) (v2946@interaction-env-locs v3083@env))) v3081@t) (values (v1160@v924@gensym) (v2148@gen-lexical v3077@id)))) (v3020@top-level-context)))) (set! v2158@gen-define-label (lambda (v3093@id v3094@rib) (if (v3020@top-level-context) (v2154@gen-top-level-label v3093@id v3094@rib) (v1160@v924@gensym)))) (set! v2164@v2159 (make-record-type-descriptor 'rib '#f 'v2162 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! v2166@v2161 '#f) (set! v2168@v2160 (make-record-constructor-descriptor v2164@v2159 '#f v2166@v2161)) (set! v2171@rib? (record-predicate v2164@v2159)) (set! v2173@make-rib (record-constructor v2168@v2160)) (set! v2175@rib-sym* (record-accessor v2164@v2159 '0)) (set! v2177@rib-mark** (record-accessor v2164@v2159 '1)) (set! v2179@rib-label* (record-accessor v2164@v2159 '2)) (set! v2181@rib-sealed/freq (record-accessor v2164@v2159 '3)) (set! v2183@rib-cache (record-accessor v2164@v2159 '4)) (set! v2185@set-rib-sym*! (record-mutator v2164@v2159 '0)) (set! v2187@set-rib-mark**! (record-mutator v2164@v2159 '1)) (set! v2189@set-rib-label*! (record-mutator v2164@v2159 '2)) (set! v2191@set-rib-sealed/freq! (record-mutator v2164@v2159 '3)) (set! v2193@set-rib-cache! (record-mutator v2164@v2159 '4)) (set! v2195@make-empty-rib (lambda () (v2173@make-rib '() '() '() '#f '#f))) (set! v2197@extend-rib! (lambda (v3097@rib v3098@id v3099@label) ((lambda (v3104@find) (begin (set! v3104@find (lambda (v3117@sym v3118@mark* v3119@sym* v3120@mark** v3121@label*) (and (pair? v3119@sym*) (if (and (eq? v3117@sym (car v3119@sym*)) (v2280@same-marks? v3118@mark* (car v3120@mark**))) v3121@label* (v3104@find v3117@sym v3118@mark* (cdr v3119@sym*) (cdr v3120@mark**) (cdr v3121@label*)))))) (begin (if (v2181@rib-sealed/freq v3097@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" v3097@rib) (void)) ((lambda (v3105@sym v3106@mark*) ((lambda (v3109@sym*) ((lambda (v3111@t) (if v3111@t ((lambda (v3113@p) (if (not (eq? v3099@label (car v3113@p))) (if (v3020@top-level-context) (set-car! v3113@p v3099@label) (v3006@syntax-violation '#f '"multiple definitions of identifier" v3098@id)) (void))) v3111@t) (begin (if (v2183@rib-cache v3097@rib) (hashtable-update! (v2183@rib-cache v3097@rib) v3105@sym (lambda (v3115@e) (cons (cons v3106@mark* v3099@label) v3115@e)) '()) (void)) (v2185@set-rib-sym*! v3097@rib (cons v3105@sym v3109@sym*)) (v2187@set-rib-mark**! v3097@rib (cons v3106@mark* (v2177@rib-mark** v3097@rib))) (v2189@set-rib-label*! v3097@rib (cons v3099@label (v2179@rib-label* v3097@rib)))))) (and (memq v3105@sym (v2175@rib-sym* v3097@rib)) (v3104@find v3105@sym v3106@mark* v3109@sym* (v2177@rib-mark** v3097@rib) (v2179@rib-label* v3097@rib))))) (v2175@rib-sym* v3097@rib))) (v2278@id->sym v3098@id) (v2226@stx-mark* v3098@id))))) '#f))) (set! v2199@extend-rib/nc! (lambda (v3127@rib v3128@id v3129@label) ((lambda (v3133@sym v3134@mark*) ((lambda (v3137@sym*) (begin (if (v2183@rib-cache v3127@rib) (hashtable-update! (v2183@rib-cache v3127@rib) v3133@sym (lambda (v3139@e) (cons (cons v3134@mark* v3129@label) v3139@e)) '()) (void)) (v2185@set-rib-sym*! v3127@rib (cons v3133@sym v3137@sym*)) (v2187@set-rib-mark**! v3127@rib (cons v3134@mark* (v2177@rib-mark** v3127@rib))) (v2189@set-rib-label*! v3127@rib (cons v3129@label (v2179@rib-label* v3127@rib))))) (v2175@rib-sym* v3127@rib))) (v2278@id->sym v3128@id) (v2226@stx-mark* v3128@id)))) (set! v2201@make-rib-map (lambda (v3141@sym*) ((lambda (v3143@ht) ((letrec ((v3145@f (lambda (v3147@i v3148@sym*) (if (null? v3148@sym*) v3143@ht (begin (hashtable-update! v3143@ht (car v3148@sym*) (lambda (v3151@x) (cons v3147@i v3151@x)) '()) (v3145@f (+ v3147@i '1) (cdr v3148@sym*))))))) v3145@f) '0 v3141@sym*)) (make-eq-hashtable)))) (set! v2203@seal-rib! (lambda (v3153@rib) ((lambda (v3155@sym*) (if (not (null? v3155@sym*)) (begin (v2185@set-rib-sym*! v3153@rib (list->vector v3155@sym*)) (v2187@set-rib-mark**! v3153@rib (list->vector (v2177@rib-mark** v3153@rib))) (v2189@set-rib-label*! v3153@rib (list->vector (v2179@rib-label* v3153@rib))) (v2191@set-rib-sealed/freq! v3153@rib (v2201@make-rib-map v3155@sym*))) (void))) (v2175@rib-sym* v3153@rib)))) (set! v2205@unseal-rib! (lambda (v3157@rib) (if (v2181@rib-sealed/freq v3157@rib) (begin (v2191@set-rib-sealed/freq! v3157@rib '#f) (v2185@set-rib-sym*! v3157@rib (vector->list (v2175@rib-sym* v3157@rib))) (v2187@set-rib-mark**! v3157@rib (vector->list (v2177@rib-mark** v3157@rib))) (v2189@set-rib-label*! v3157@rib (vector->list (v2179@rib-label* v3157@rib)))) (void)))) (set! v2207@make-full-rib (lambda (v3159@id* v3160@label*) ((lambda (v3163@r) (begin (v2203@seal-rib! v3163@r) v3163@r)) (v2173@make-rib (map v2278@id->sym v3159@id*) (map v2226@stx-mark* v3159@id*) v3160@label* '#f '#f)))) (set! v2213@v2208 (make-record-type-descriptor 'stx '#f 'v2211 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! v2215@v2210 '#f) (set! v2217@v2209 (make-record-constructor-descriptor v2213@v2208 '#f v2215@v2210)) (set! v2220@stx? (record-predicate v2213@v2208)) (set! v2222@make-stx (record-constructor v2217@v2209)) (set! v2224@stx-expr (record-accessor v2213@v2208 '0)) (set! v2226@stx-mark* (record-accessor v2213@v2208 '1)) (set! v2228@stx-subst* (record-accessor v2213@v2208 '2)) (set! v2230@stx-ae* (record-accessor v2213@v2208 '3)) (set! v2232@set-stx-expr! (record-mutator v2213@v2208 '0)) (set! v2234@set-stx-mark*! (record-mutator v2213@v2208 '1)) (set! v2236@set-stx-subst*! (record-mutator v2213@v2208 '2)) (set! v2238@set-stx-ae*! (record-mutator v2213@v2208 '3)) (set! v2240@rp (v1171@v946@make-record-printer 'stx (lambda (v3165@x v3166@p v3167@wr) (begin (display '"#<syntax " v3166@p) (write (v2298@stx->datum v3165@x) v3166@p) ((lambda (v3171@expr) (if (v1163@v930@annotation? v3171@expr) ((lambda (v3173@src) (if (pair? v3173@src) (begin (display '" [" v3166@p) (display (cdr v3173@src) v3166@p) (display '" of " v3166@p) (display (car v3173@src) v3166@p) (display '"]" v3166@p)) (void))) (v1164@v932@annotation-source v3171@expr)) (void))) (v2224@stx-expr v3165@x)) (display '">" v3166@p))))) (set! v2242@datum->stx (lambda (v3175@id v3176@datum) (v2222@make-stx v3176@datum (v2226@stx-mark* v3175@id) (v2228@stx-subst* v3175@id) (v2230@stx-ae* v3175@id)))) (set! v2244@gen-mark (lambda () (string '#\m))) (set! v2246@anti-mark '#f) (set! v2248@anti-mark? not) (set! v2250@join-wraps (lambda (v3179@m1* v3180@s1* v3181@ae1* v3182@e) ((lambda (v3188@cancel) (begin (set! v3188@cancel (lambda (v3195@ls1 v3196@ls2) ((letrec ((v3199@f (lambda (v3201@x v3202@ls1) (if (null? v3202@ls1) (cdr v3196@ls2) (cons v3201@x (v3199@f (car v3202@ls1) (cdr v3202@ls1))))))) v3199@f) (car v3195@ls1) (cdr v3195@ls1)))) ((lambda (v3189@m2* v3190@s2* v3191@ae2*) (if (and (not (null? v3179@m1*)) (not (null? v3189@m2*)) (v2248@anti-mark? (car v3189@m2*))) (values (v3188@cancel v3179@m1* v3189@m2*) (v3188@cancel v3180@s1* v3190@s2*) (v3188@cancel v3181@ae1* v3191@ae2*)) (values (append v3179@m1* v3189@m2*) (append v3180@s1* v3190@s2*) (append v3181@ae1* v3191@ae2*)))) (v2226@stx-mark* v3182@e) (v2228@stx-subst* v3182@e) (v2230@stx-ae* v3182@e)))) '#f))) (set! v2252@mkstx (lambda (v3205@e v3206@m* v3207@s* v3208@ae*) (if (and (v2220@stx? v3205@e) (not (v2146@top-marked? v3206@m*))) (call-with-values (lambda () (v2250@join-wraps v3206@m* v3207@s* v3208@ae* v3205@e)) (lambda (v3216@v3213@m* v3217@v3214@s* v3218@v3215@ae*) ((lambda (v3222@ae* v3223@s* v3224@m*) (v2222@make-stx (v2224@stx-expr v3205@e) v3224@m* v3223@s* v3222@ae*)) v3218@v3215@ae* v3217@v3214@s* v3216@v3213@m*))) (v2222@make-stx v3205@e v3206@m* v3207@s* v3208@ae*)))) (set! v2254@add-mark (lambda (v3228@m v3229@e v3230@ae) (v2252@mkstx v3229@e (list v3228@m) '(shift) (list v3230@ae)))) (set! v2256@add-subst (lambda (v3234@subst v3235@e) (v2252@mkstx v3235@e '() (list v3234@subst) '()))) (set! v2258@syntax-kind? (lambda (v3238@x v3239@p?) (if (v2220@stx? v3238@x) (v2258@syntax-kind? (v2224@stx-expr v3238@x) v3239@p?) (if (v1163@v930@annotation? v3238@x) (v2258@syntax-kind? (v1165@v934@annotation-expression v3238@x) v3239@p?) (v3239@p? v3238@x))))) (set! v2260@syntax-vector->list (lambda (v3242@x) (if (v2220@stx? v3242@x) ((lambda (v3244@ls v3245@m* v3246@s* v3247@ae*) (map (lambda (v3252@x) (v2252@mkstx v3252@x v3245@m* v3246@s* v3247@ae*)) v3244@ls)) (v2260@syntax-vector->list (v2224@stx-expr v3242@x)) (v2226@stx-mark* v3242@x) (v2228@stx-subst* v3242@x) (v2230@stx-ae* v3242@x)) (if (v1163@v930@annotation? v3242@x) (v2260@syntax-vector->list (v1165@v934@annotation-expression v3242@x)) (if (vector? v3242@x) (vector->list v3242@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" v3242@x)))))) (set! v2262@syntax-pair? (lambda (v3254@x) (v2258@syntax-kind? v3254@x pair?))) (set! v2264@syntax-vector? (lambda (v3256@x) (v2258@syntax-kind? v3256@x vector?))) (set! v2266@syntax-null? (lambda (v3258@x) (v2258@syntax-kind? v3258@x null?))) (set! v2268@syntax-list? (lambda (v3260@x) (or (v2266@syntax-null? v3260@x) (and (v2262@syntax-pair? v3260@x) (v2268@syntax-list? (v2272@syntax-cdr v3260@x)))))) (set! v2270@syntax-car (lambda (v3262@x) (if (v2220@stx? v3262@x) (v2252@mkstx (v2270@syntax-car (v2224@stx-expr v3262@x)) (v2226@stx-mark* v3262@x) (v2228@stx-subst* v3262@x) (v2230@stx-ae* v3262@x)) (if (v1163@v930@annotation? v3262@x) (v2270@syntax-car (v1165@v934@annotation-expression v3262@x)) (if (pair? v3262@x) (car v3262@x) (assertion-violation 'syntax-car '"BUG: not a pair" v3262@x)))))) (set! v2272@syntax-cdr (lambda (v3264@x) (if (v2220@stx? v3264@x) (v2252@mkstx (v2272@syntax-cdr (v2224@stx-expr v3264@x)) (v2226@stx-mark* v3264@x) (v2228@stx-subst* v3264@x) (v2230@stx-ae* v3264@x)) (if (v1163@v930@annotation? v3264@x) (v2272@syntax-cdr (v1165@v934@annotation-expression v3264@x)) (if (pair? v3264@x) (cdr v3264@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" v3264@x)))))) (set! v2274@syntax->list (lambda (v3266@x) (if (v2262@syntax-pair? v3266@x) (cons (v2270@syntax-car v3266@x) (v2274@syntax->list (v2272@syntax-cdr v3266@x))) (if (v2266@syntax-null? v3266@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" v3266@x))))) (set! v2276@id? (lambda (v3268@x) (and (v2220@stx? v3268@x) ((lambda (v3270@expr) (symbol? (if (v1163@v930@annotation? v3270@expr) (v1162@v928@annotation-stripped v3270@expr) v3270@expr))) (v2224@stx-expr v3268@x))))) (set! v2278@id->sym (lambda (v3272@x) (begin (if (not (v2220@stx? v3272@x)) (error 'id->sym '"BUG in ikarus: not an id" v3272@x) (void)) ((lambda (v3274@expr) ((lambda (v3276@sym) (if (symbol? v3276@sym) v3276@sym (error 'id->sym '"BUG in ikarus: not an id" v3272@x))) (if (v1163@v930@annotation? v3274@expr) (v1162@v928@annotation-stripped v3274@expr) v3274@expr))) (v2224@stx-expr v3272@x))))) (set! v2280@same-marks? (lambda (v3278@x v3279@y) (or (and (null? v3278@x) (null? v3279@y)) (and (pair? v3278@x) (pair? v3279@y) (eq? (car v3278@x) (car v3279@y)) (v2280@same-marks? (cdr v3278@x) (cdr v3279@y)))))) (set! v2282@bound-id=? (lambda (v3282@x v3283@y) (and (eq? (v2278@id->sym v3282@x) (v2278@id->sym v3283@y)) (v2280@same-marks? (v2226@stx-mark* v3282@x) (v2226@stx-mark* v3283@y))))) (set! v2284@free-id=? (lambda (v3286@i v3287@j) ((lambda (v3290@t0 v3291@t1) (if (or v3290@t0 v3291@t1) (eq? v3290@t0 v3291@t1) (eq? (v2278@id->sym v3286@i) (v2278@id->sym v3287@j)))) (v2304@id->real-label v3286@i) (v2304@id->real-label v3287@j)))) (set! v2286@valid-bound-ids? (lambda (v3294@id*) (and (for-all v2276@id? v3294@id*) (v2288@distinct-bound-ids? v3294@id*)))) (set! v2288@distinct-bound-ids? (lambda (v3296@id*) (or (null? v3296@id*) (and (not (v2290@bound-id-member? (car v3296@id*) (cdr v3296@id*))) (v2288@distinct-bound-ids? (cdr v3296@id*)))))) (set! v2290@bound-id-member? (lambda (v3298@id v3299@id*) (and (pair? v3299@id*) (or (v2282@bound-id=? v3298@id (car v3299@id*)) (v2290@bound-id-member? v3298@id (cdr v3299@id*)))))) (set! v2292@self-evaluating? (lambda (v3302@x) (or (number? v3302@x) (string? v3302@x) (char? v3302@x) (boolean? v3302@x) (regexp? v3302@x) (bytevector? v3302@x)))) (set! v2294@strip-annotations (lambda (v3304@x) (if (pair? v3304@x) (cons (v2294@strip-annotations (car v3304@x)) (v2294@strip-annotations (cdr v3304@x))) (if (vector? v3304@x) (vector-map v2294@strip-annotations v3304@x) (if (v1163@v930@annotation? v3304@x) (v1162@v928@annotation-stripped v3304@x) v3304@x))))) (set! v2296@strip (lambda (v3306@x v3307@m*) (if (v2146@top-marked? v3307@m*) (if (or (v1163@v930@annotation? v3306@x) (and (pair? v3306@x) (v1163@v930@annotation? (car v3306@x))) (and (vector? v3306@x) (> (vector-length v3306@x) '0) (v1163@v930@annotation? (vector-ref v3306@x '0)))) (v2294@strip-annotations v3306@x) v3306@x) ((letrec ((v3310@f (lambda (v3312@x) (if (v2220@stx? v3312@x) (v2296@strip (v2224@stx-expr v3312@x) (v2226@stx-mark* v3312@x)) (if (v1163@v930@annotation? v3312@x) (v1162@v928@annotation-stripped v3312@x) (if (pair? v3312@x) ((lambda (v3314@a v3315@d) (if (and (eq? v3314@a (car v3312@x)) (eq? v3315@d (cdr v3312@x))) v3312@x (cons v3314@a v3315@d))) (v3310@f (car v3312@x)) (v3310@f (cdr v3312@x))) (if (vector? v3312@x) ((lambda (v3318@old) ((lambda (v3320@new) (if (for-all eq? v3318@old v3320@new) v3312@x (list->vector v3320@new))) (map v3310@f v3318@old))) (vector->list v3312@x)) v3312@x))))))) v3310@f) v3306@x)))) (set! v2298@stx->datum (lambda (v3322@x) (v2296@strip v3322@x '()))) (set! v2300@same-marks*? (lambda (v3324@mark* v3325@mark** v3326@si) (if (null? v3326@si) '#f (if (v2280@same-marks? v3324@mark* (vector-ref v3325@mark** (car v3326@si))) (car v3326@si) (v2300@same-marks*? v3324@mark* v3325@mark** (cdr v3326@si)))))) (set! v2302@id->label (lambda (v3330@id) (or (v2304@id->real-label v3330@id) ((lambda (v3332@t) (if v3332@t ((lambda (v3334@env) ((lambda (v3336@rib) (call-with-values (lambda () (v2156@gen-define-label+loc v3330@id v3336@rib)) (lambda (v3340@v3338@lab v3341@v3339@loc_) ((lambda (v3344@loc_ v3345@lab) (begin (v2197@extend-rib! v3336@rib v3330@id v3345@lab) v3345@lab)) v3341@v3339@loc_ v3340@v3338@lab)))) (v2942@interaction-env-rib v3334@env))) v3332@t) '#f)) (v3020@top-level-context))))) (set! v2304@id->real-label (lambda (v3348@id) ((lambda (v3350@sym) ((letrec ((v3352@search (lambda (v3354@subst* v3355@mark*) (if (null? v3354@subst*) '#f (if (eq? (car v3354@subst*) 'shift) (v3352@search (cdr v3354@subst*) (cdr v3355@mark*)) ((lambda (v3358@rib) ((lambda (v3360@t) (if v3360@t ((lambda (v3362@ht) ((lambda (v3364@si) ((lambda (v3366@i) (if v3366@i (vector-ref (v2179@rib-label* v3358@rib) v3366@i) (v3352@search (cdr v3354@subst*) v3355@mark*))) (and v3364@si (v2300@same-marks*? v3355@mark* (v2177@rib-mark** v3358@rib) (reverse v3364@si))))) (hashtable-ref v3362@ht v3350@sym '#f))) v3360@t) ((letrec ((v3368@f (lambda (v3370@sym* v3371@mark** v3372@label*) (if (null? v3370@sym*) (v3352@search (cdr v3354@subst*) v3355@mark*) (if (and (eq? (car v3370@sym*) v3350@sym) (v2280@same-marks? (car v3371@mark**) v3355@mark*)) (car v3372@label*) (v3368@f (cdr v3370@sym*) (cdr v3371@mark**) (cdr v3372@label*))))))) v3368@f) (v2175@rib-sym* v3358@rib) (v2177@rib-mark** v3358@rib) (v2179@rib-label* v3358@rib)))) (v2181@rib-sealed/freq v3358@rib))) (car v3354@subst*))))))) v3352@search) (v2228@stx-subst* v3348@id) (v2226@stx-mark* v3348@id))) (v2278@id->sym v3348@id)))) (set! v2306@label->binding (lambda (v3376@x v3377@r) ((lambda (v3380@t) (if v3380@t ((lambda (v3382@b) (if (and (pair? v3382@b) (eq? (car v3382@b) '$core-rtd)) (cons '$rtd (map v2699@bless (cdr v3382@b))) (if (and (pair? v3382@b) (eq? (car v3382@b) 'global-rtd)) ((lambda (v3384@lib v3385@loc) (cons '$rtd (symbol-value v3385@loc))) (cadr v3382@b) (cddr v3382@b)) v3382@b))) v3380@t) ((lambda (v3388@t) (if v3388@t (cdr v3388@t) ((lambda (v3390@t) (if v3390@t ((lambda (v3392@env) ((lambda (v3394@t) (if v3394@t ((lambda (v3396@p) (cons* 'lexical (cdr v3396@p) '#f)) v3394@t) '(displaced-lexical . #f))) (assq v3376@x (v2946@interaction-env-locs v3392@env)))) v3390@t) '(displaced-lexical . #f))) (v3020@top-level-context)))) (assq v3376@x v3377@r)))) (v1801@v1455@imported-label->binding v3376@x)))) (set! v2308@make-binding cons) (set! v2310@binding-type car) (set! v2312@binding-value cdr) (set! v2314@raise-unbound-error (lambda (v3398@id) (v3004@syntax-violation* '#f '"unbound identifier" v3398@id (v10194@v9756@make-undefined-violation)))) (set! v2316@syntax-type (lambda (v3400@e v3401@r) (if (v2276@id? v3400@e) ((lambda (v3404@id) ((lambda (v3406@label) ((lambda (v3408@b) ((lambda (v3410@type) ((lambda () (begin (if (not v3406@label) (v2314@raise-unbound-error v3404@id) (void)) ((lambda (v3412@t) (if (memv v3412@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values v3410@type (v2312@binding-value v3408@b) v3404@id) (values 'other '#f '#f))) v3410@type))))) (v2310@binding-type v3408@b))) (v2306@label->binding v3406@label v3401@r))) (v2302@id->label v3404@id))) v3400@e) (if (v2262@syntax-pair? v3400@e) ((lambda (v3414@id) (if (v2276@id? v3414@id) ((lambda (v3416@label) ((lambda (v3418@b) ((lambda (v3420@type) ((lambda () (begin (if (not v3416@label) (v2314@raise-unbound-error v3414@id) (void)) ((lambda (v3422@t) (if (memv v3422@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values v3420@type (v2312@binding-value v3418@b) v3414@id) (values 'call '#f '#f))) v3420@type))))) (v2310@binding-type v3418@b))) (v2306@label->binding v3416@label v3401@r))) (v2302@id->label v3414@id)) (values 'call '#f '#f))) (v2270@syntax-car v3400@e)) ((lambda (v3424@d) (if (v2292@self-evaluating? v3424@d) (values 'constant v3424@d '#f) (values 'other '#f '#f))) (v2298@stx->datum v3400@e)))))) (set! v2330@sanitize-binding (lambda (v3426@x v3427@src) (if (procedure? v3426@x) (cons* 'local-macro v3426@x v3427@src) (if (and (pair? v3426@x) (eq? (car v3426@x) 'macro!) (procedure? (cdr v3426@x))) (cons* 'local-macro! (cdr v3426@x) v3427@src) (if (and (pair? v3426@x) (eq? (car v3426@x) '$rtd)) v3426@x (assertion-violation 'expand '"invalid transformer" v3426@x)))))) (set! v2332@make-variable-transformer (lambda (v3430@x) (if (procedure? v3430@x) (cons 'macro! v3430@x) (assertion-violation 'make-variable-transformer '"not a procedure" v3430@x)))) (set! v2334@variable-transformer? (lambda (v3432@x) (and (pair? v3432@x) (eq? (car v3432@x) 'macro!) (procedure? (cdr v3432@x))))) (set! v2336@variable-transformer-procedure (lambda (v3434@x) (if (v2334@variable-transformer? v3434@x) (cdr v3434@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" v3434@x)))) (set! v2338@make-eval-transformer (lambda (v3436@x) (v2330@sanitize-binding (eval-core (v1258@v1186@expanded->core v3436@x)) v3436@x))) (set! v2649@parse-define (lambda (v3438@x) ((lambda (v3440@t) ((lambda (v3442@ls/false) (if (and v3442@ls/false (apply (lambda (v3444@id v3445@fmls v3446@b v3447@b*) (v2276@id? v3444@id)) v3442@ls/false)) (apply (lambda (v3452@id v3453@fmls v3454@b v3455@b*) (begin (v2811@verify-formals v3453@fmls v3438@x) (values v3452@id (cons 'defun (cons v3453@fmls (cons v3454@b v3455@b*)))))) v3442@ls/false) ((lambda (v3460@t) ((lambda (v3462@ls/false) (if (and v3462@ls/false (apply (lambda (v3464@id v3465@val) (v2276@id? v3464@id)) v3462@ls/false)) (apply (lambda (v3468@id v3469@val) (values v3468@id (cons 'expr v3469@val))) v3462@ls/false) ((lambda (v3472@t) ((lambda (v3474@ls/false) (if (and v3474@ls/false (apply (lambda (v3476@id) (v2276@id? v3476@id)) v3474@ls/false)) (apply (lambda (v3478@id) (values v3478@id (cons 'expr (v2699@bless '(void))))) v3474@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3472@t))) (v2773@syntax-dispatch v3472@t '(_ any)))) v3460@t))) (v2773@syntax-dispatch v3460@t '(_ any any)))) v3440@t))) (v2773@syntax-dispatch v3440@t '(_ (any . any) any . each-any)))) v3438@x))) (set! v2651@parse-define-syntax (lambda (v3480@x) ((lambda (v3482@t) ((lambda (v3484@ls/false) (if (and v3484@ls/false (apply (lambda (v3486@id v3487@val) (v2276@id? v3486@id)) v3484@ls/false)) (apply (lambda (v3490@id v3491@val) (values v3490@id v3491@val)) v3484@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3482@t))) (v2773@syntax-dispatch v3482@t '(_ any any)))) v3480@x))) (set! v2653@scheme-stx-hashtable (make-eq-hashtable)) (set! v2655@scheme-stx (lambda (v3494@sym) (or (hashtable-ref v2653@scheme-stx-hashtable v3494@sym '#f) ((lambda (v3496@subst) ((lambda (v3498@stx) ((lambda (v3500@stx) ((lambda () (begin (hashtable-set! v2653@scheme-stx-hashtable v3494@sym v3500@stx) v3500@stx)))) ((lambda (v3502@t) (if v3502@t ((lambda (v3504@x) ((lambda (v3506@name v3507@label) (v2256@add-subst (v2173@make-rib (list v3506@name) (list v2144@top-mark*) (list v3507@label) '#f '#f) v3498@stx)) (car v3504@x) (cdr v3504@x))) v3502@t) v3498@stx)) (assq v3494@sym v3496@subst)))) (v2222@make-stx v3494@sym v2144@top-mark* '() '()))) (v1759@v1371@library-subst (v1795@v1443@find-library-by-name '(psyntax system $all))))))) (set! v2657@lexical-var car) (set! v2659@lexical-mutable? cdr) (set! v2661@set-lexical-mutable! set-cdr!) (set! v2663@add-lexical (lambda (v3510@lab v3511@lex v3512@r) (cons (cons* v3510@lab 'lexical v3511@lex '#f) v3512@r))) (set! v2665@add-lexicals (lambda (v3516@lab* v3517@lex* v3518@r) (if (null? v3516@lab*) v3518@r (v2665@add-lexicals (cdr v3516@lab*) (cdr v3517@lex*) (v2663@add-lexical (car v3516@lab*) (car v3517@lex*) v3518@r))))) (set! v2667@letrec-helper (lambda (v3522@e v3523@r v3524@mr v3525@build) ((lambda (v3530@t) ((lambda (v3532@ls/false) (if v3532@ls/false (apply (lambda (v3534@lhs* v3535@rhs* v3536@b v3537@b*) (if (not (v2286@valid-bound-ids? v3534@lhs*)) (v2703@invalid-fmls-error v3522@e v3534@lhs*) ((lambda (v3542@lex* v3543@lab*) ((lambda (v3546@rib v3547@r) ((lambda (v3550@body v3551@rhs*) (v3525@build '#f v3542@lex* v3551@rhs* v3550@body)) (v2829@chi-internal (v2256@add-subst v3546@rib (cons v3536@b v3537@b*)) v3547@r v3524@mr) (v2803@chi-expr* (map (lambda (v3554@x) (v2256@add-subst v3546@rib v3554@x)) v3535@rhs*) v3547@r v3524@mr))) (v2207@make-full-rib v3534@lhs* v3543@lab*) (v2665@add-lexicals v3543@lab* v3542@lex* v3523@r))) (map v2148@gen-lexical v3534@lhs*) (map v2152@gen-label v3534@lhs*)))) v3532@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3530@t))) (v2773@syntax-dispatch v3530@t '(_ #(each (any any)) any . each-any)))) v3522@e))) (set! v2669@letrec-transformer (lambda (v3556@e v3557@r v3558@mr) (v2667@letrec-helper v3556@e v3557@r v3558@mr v2117@v1976@build-letrec))) (set! v2671@letrec*-transformer (lambda (v3562@e v3563@r v3564@mr) (v2667@letrec-helper v3562@e v3563@r v3564@mr v2118@v1978@build-letrec*))) (set! v2673@fluid-let-syntax-transformer (lambda (v3568@e v3569@r v3570@mr) ((lambda (v3575@lookup) (begin (set! v3575@lookup (lambda (v3594@x) (or (v2302@id->label v3594@x) (v3006@syntax-violation '#f '"unbound identifier" v3568@e v3594@x)))) ((lambda (v3576@t) ((lambda (v3578@ls/false) (if v3578@ls/false (apply (lambda (v3580@lhs* v3581@rhs* v3582@b v3583@b*) (if (not (v2286@valid-bound-ids? v3580@lhs*)) (v2703@invalid-fmls-error v3568@e v3580@lhs*) ((lambda (v3588@lab* v3589@rhs*) (v2829@chi-internal (cons v3582@b v3583@b*) (append (map cons v3588@lab* v3589@rhs*) v3569@r) (append (map cons v3588@lab* v3589@rhs*) v3570@mr))) (map v3575@lookup v3580@lhs*) (map (lambda (v3592@x) (v2338@make-eval-transformer (v2866@expand-transformer v3592@x v3570@mr))) v3581@rhs*)))) v3578@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3576@t))) (v2773@syntax-dispatch v3576@t '(_ #(each (any any)) any . each-any)))) v3568@e))) '#f))) (set! v2675@type-descriptor-transformer (lambda (v3596@e v3597@r v3598@mr) ((lambda (v3602@t) ((lambda (v3604@ls/false) (if (and v3604@ls/false (apply (lambda (v3606@id) (v2276@id? v3606@id)) v3604@ls/false)) (apply (lambda (v3608@id) ((lambda (v3610@lab) ((lambda (v3612@b) ((lambda (v3614@type) ((lambda () (begin (if (not v3610@lab) (v2314@raise-unbound-error v3608@id) (void)) (if (not (and (eq? v3614@type '$rtd) (not (list? (v2312@binding-value v3612@b))))) (v3006@syntax-violation '#f '"not a record type" v3596@e) (void)) (list 'quote (v2312@binding-value v3612@b)))))) (v2310@binding-type v3612@b))) (v2306@label->binding v3610@lab v3597@r))) (v2302@id->label v3608@id))) v3604@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3602@t))) (v2773@syntax-dispatch v3602@t '(_ any)))) v3596@e))) (set! v2677@record-type-descriptor-transformer (lambda (v3616@e v3617@r v3618@mr) ((lambda (v3622@t) ((lambda (v3624@ls/false) (if (and v3624@ls/false (apply (lambda (v3626@id) (v2276@id? v3626@id)) v3624@ls/false)) (apply (lambda (v3628@id) ((lambda (v3630@lab) ((lambda (v3632@b) ((lambda (v3634@type) ((lambda () (begin (if (not v3630@lab) (v2314@raise-unbound-error v3628@id) (void)) (if (not (and (eq? v3634@type '$rtd) (list? (v2312@binding-value v3632@b)))) (v3006@syntax-violation '#f '"not a record type" v3616@e) (void)) (v2807@chi-expr (car (v2312@binding-value v3632@b)) v3617@r v3618@mr))))) (v2310@binding-type v3632@b))) (v2306@label->binding v3630@lab v3617@r))) (v2302@id->label v3628@id))) v3624@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3622@t))) (v2773@syntax-dispatch v3622@t '(_ any)))) v3616@e))) (set! v2679@record-constructor-descriptor-transformer (lambda (v3636@e v3637@r v3638@mr) ((lambda (v3642@t) ((lambda (v3644@ls/false) (if (and v3644@ls/false (apply (lambda (v3646@id) (v2276@id? v3646@id)) v3644@ls/false)) (apply (lambda (v3648@id) ((lambda (v3650@lab) ((lambda (v3652@b) ((lambda (v3654@type) ((lambda () (begin (if (not v3650@lab) (v2314@raise-unbound-error v3648@id) (void)) (if (not (and (eq? v3654@type '$rtd) (list? (v2312@binding-value v3652@b)))) (v3006@syntax-violation '#f '"invalid type" v3636@e) (void)) (v2807@chi-expr (cadr (v2312@binding-value v3652@b)) v3637@r v3638@mr))))) (v2310@binding-type v3652@b))) (v2306@label->binding v3650@lab v3637@r))) (v2302@id->label v3648@id))) v3644@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3642@t))) (v2773@syntax-dispatch v3642@t '(_ any)))) v3636@e))) (set! v2681@when-macro (lambda (v3656@e) ((lambda (v3658@t) ((lambda (v3660@ls/false) (if v3660@ls/false (apply (lambda (v3662@test v3663@e v3664@e*) (v2699@bless (list 'if v3662@test (cons 'begin (cons v3663@e v3664@e*))))) v3660@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3658@t))) (v2773@syntax-dispatch v3658@t '(_ any any . each-any)))) v3656@e))) (set! v2683@unless-macro (lambda (v3668@e) ((lambda (v3670@t) ((lambda (v3672@ls/false) (if v3672@ls/false (apply (lambda (v3674@test v3675@e v3676@e*) (v2699@bless (list 'if (list 'not v3674@test) (cons 'begin (cons v3675@e v3676@e*))))) v3672@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3670@t))) (v2773@syntax-dispatch v3670@t '(_ any any . each-any)))) v3668@e))) (set! v2685@if-transformer (lambda (v3680@e v3681@r v3682@mr) ((lambda (v3686@t) ((lambda (v3688@ls/false) (if v3688@ls/false (apply (lambda (v3690@e0 v3691@e1 v3692@e2) (list 'if (v2807@chi-expr v3690@e0 v3681@r v3682@mr) (v2807@chi-expr v3691@e1 v3681@r v3682@mr) (v2807@chi-expr v3692@e2 v3681@r v3682@mr))) v3688@ls/false) ((lambda (v3696@t) ((lambda (v3698@ls/false) (if v3698@ls/false (apply (lambda (v3700@e0 v3701@e1) (list 'if (v2807@chi-expr v3700@e0 v3681@r v3682@mr) (v2807@chi-expr v3701@e1 v3681@r v3682@mr) (v2116@v1974@build-void))) v3698@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3696@t))) (v2773@syntax-dispatch v3696@t '(_ any any)))) v3686@t))) (v2773@syntax-dispatch v3686@t '(_ any any any)))) v3680@e))) (set! v2687@and-transformer (lambda (v3704@e v3705@r v3706@mr) ((lambda (v3710@t) ((lambda (v3712@ls/false) (if v3712@ls/false (apply (lambda (v3714@e*) (cons 'and (v2803@chi-expr* v3714@e* v3705@r v3706@mr))) v3712@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3710@t))) (v2773@syntax-dispatch v3710@t '(_ . each-any)))) v3704@e))) (set! v2689@or-transformer (lambda (v3716@e v3717@r v3718@mr) ((lambda (v3722@t) ((lambda (v3724@ls/false) (if v3724@ls/false (apply (lambda (v3726@e*) (cons 'or (v2803@chi-expr* v3726@e* v3717@r v3718@mr))) v3724@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3722@t))) (v2773@syntax-dispatch v3722@t '(_ . each-any)))) v3716@e))) (set! v2691@case-macro (lambda (v3728@e) ((lambda (v3731@build-last v3733@build-one) (begin (set! v3731@build-last (lambda (v3770@cls) ((lambda (v3772@t) ((lambda (v3774@ls/false) (if v3774@ls/false (apply (lambda (v3776@e v3777@e*) (cons 'begin (cons v3776@e v3777@e*))) v3774@ls/false) ((lambda (v3780@t) ((lambda (v3782@ls/false) (if v3782@ls/false (apply (lambda () (v3733@build-one v3770@cls '(if #f #f))) v3782@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3780@t))) (v2773@syntax-dispatch v3780@t '_))) v3772@t))) (v2773@syntax-dispatch v3772@t '(#(scheme-id else) any . each-any)))) v3770@cls))) (set! v3733@build-one (lambda (v3756@cls v3757@k) ((lambda (v3760@t) ((lambda (v3762@ls/false) (if v3762@ls/false (apply (lambda (v3764@d* v3765@e v3766@e*) (list 'if (list 'memv 't (list 'quote v3764@d*)) (cons 'begin (cons v3765@e v3766@e*)) v3757@k)) v3762@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3760@t))) (v2773@syntax-dispatch v3760@t '(each-any any . each-any)))) v3756@cls))) ((lambda (v3734@t) ((lambda (v3736@ls/false) (if v3736@ls/false (apply (lambda (v3738@expr) (v2699@bless (cons 'let (cons (list (list 't v3738@expr)) '((if #f #f)))))) v3736@ls/false) ((lambda (v3740@t) ((lambda (v3742@ls/false) (if v3742@ls/false (apply (lambda (v3744@expr v3745@cls v3746@cls*) (v2699@bless (list 'let (list (list 't v3744@expr)) ((letrec ((v3750@f (lambda (v3752@cls v3753@cls*) (if (null? v3753@cls*) (v3731@build-last v3752@cls) (v3733@build-one v3752@cls (v3750@f (car v3753@cls*) (cdr v3753@cls*))))))) v3750@f) v3745@cls v3746@cls*)))) v3742@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3740@t))) (v2773@syntax-dispatch v3740@t '(_ any any . each-any)))) v3734@t))) (v2773@syntax-dispatch v3734@t '(_ any)))) v3728@e))) '#f '#f))) (set! v2693@quote-transformer (lambda (v3784@e v3785@r v3786@mr) ((lambda (v3790@t) ((lambda (v3792@ls/false) (if v3792@ls/false (apply (lambda (v3794@datum) (list 'quote (v2298@stx->datum v3794@datum))) v3792@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3790@t))) (v2773@syntax-dispatch v3790@t '(_ any)))) v3784@e))) (set! v2695@case-lambda-transformer (lambda (v3796@e v3797@r v3798@mr) ((lambda (v3802@t) ((lambda (v3804@ls/false) (if v3804@ls/false (apply (lambda (v3806@fmls* v3807@b* v3808@b**) (call-with-values (lambda () (v2815@chi-lambda-clause* v3796@e v3806@fmls* (map cons v3807@b* v3808@b**) v3797@r v3798@mr)) (lambda (v3814@v3812@fmls* v3815@v3813@body*) ((lambda (v3818@body* v3819@fmls*) (v2113@v1924@build-case-lambda '#f v3819@fmls* v3818@body*)) v3815@v3813@body* v3814@v3812@fmls*)))) v3804@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3802@t))) (v2773@syntax-dispatch v3802@t '(_ . #(each (any any . each-any)))))) v3796@e))) (set! v2697@lambda-transformer (lambda (v3822@e v3823@r v3824@mr) ((lambda (v3828@t) ((lambda (v3830@ls/false) (if v3830@ls/false (apply (lambda (v3832@fmls v3833@b v3834@b*) (call-with-values (lambda () (v2813@chi-lambda-clause v3822@e v3832@fmls (cons v3833@b v3834@b*) v3823@r v3824@mr)) (lambda (v3840@v3838@fmls v3841@v3839@body) ((lambda (v3844@body v3845@fmls) (v2112@v1922@build-lambda '#f v3845@fmls v3844@body)) v3841@v3839@body v3840@v3838@fmls)))) v3830@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3828@t))) (v2773@syntax-dispatch v3828@t '(_ any any . each-any)))) v3822@e))) (set! v2699@bless (lambda (v3848@x) (v2252@mkstx ((letrec ((v3850@f (lambda (v3852@x) (if (v2220@stx? v3852@x) v3852@x (if (pair? v3852@x) (cons (v3850@f (car v3852@x)) (v3850@f (cdr v3852@x))) (if (symbol? v3852@x) (v2655@scheme-stx v3852@x) (if (vector? v3852@x) (vector-map v3850@f v3852@x) v3852@x))))))) v3850@f) v3848@x) '() '() '()))) (set! v2701@with-syntax-macro (lambda (v3854@e) ((lambda (v3856@t) ((lambda (v3858@ls/false) (if v3858@ls/false (apply (lambda (v3860@pat* v3861@expr* v3862@b v3863@b*) ((lambda (v3868@idn*) (begin (v2811@verify-formals (map car v3868@idn*) v3854@e) ((lambda (v3870@t*) (v2699@bless (list 'let (map list v3870@t* v3861@expr*) ((letrec ((v3872@f (lambda (v3874@pat* v3875@t*) (if (null? v3874@pat*) (cons 'begin (cons '#f (cons v3862@b v3863@b*))) (list 'syntax-case (car v3875@t*) '() (list (car v3874@pat*) (v3872@f (cdr v3874@pat*) (cdr v3875@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car v3874@pat*)) (car v3875@t*)))))))) v3872@f) v3860@pat* v3870@t*)))) (v2988@generate-temporaries v3861@expr*)))) ((letrec ((v3878@f (lambda (v3880@pat*) (if (null? v3880@pat*) '() (call-with-values (lambda () (v2771@convert-pattern (car v3880@pat*) '())) (lambda (v3884@v3882@pat v3885@v3883@idn*) ((lambda (v3888@idn* v3889@pat) (append v3888@idn* (v3878@f (cdr v3880@pat*)))) v3885@v3883@idn* v3884@v3882@pat))))))) v3878@f) v3860@pat*))) v3858@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3856@t))) (v2773@syntax-dispatch v3856@t '(_ #(each (any any)) any . each-any)))) v3854@e))) (set! v2703@invalid-fmls-error (lambda (v3892@stx v3893@fmls) ((lambda (v3896@t) ((lambda (v3898@ls/false) (if v3898@ls/false (apply (lambda (v3900@id* v3901@last) ((letrec ((v3904@f (lambda (v3906@id*) (if (null? v3906@id*) (values) (if (not (v2276@id? (car v3906@id*))) (v3006@syntax-violation '#f '"not an identifier" v3892@stx (car v3906@id*)) (begin (v3904@f (cdr v3906@id*)) (if (v2290@bound-id-member? (car v3906@id*) (cdr v3906@id*)) (v3006@syntax-violation '#f '"duplicate binding" v3892@stx (car v3906@id*)) (void)))))))) v3904@f) (if (v2276@id? v3901@last) (cons v3901@last v3900@id*) (if (v2266@syntax-null? v3901@last) v3900@id* (v3006@syntax-violation '#f '"not an identifier" v3892@stx v3901@last))))) v3898@ls/false) ((lambda (v3908@t) ((lambda (v3910@ls/false) (if v3910@ls/false (apply (lambda () (v3006@syntax-violation '#f '"malformed binding form" v3892@stx v3893@fmls)) v3910@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3908@t))) (v2773@syntax-dispatch v3908@t '_))) v3896@t))) (v2773@syntax-dispatch v3896@t '#(each+ any () any)))) v3893@fmls))) (set! v2705@let-macro (lambda (v3912@stx) ((lambda (v3914@t) ((lambda (v3916@ls/false) (if v3916@ls/false (apply (lambda (v3918@lhs* v3919@rhs* v3920@b v3921@b*) (if (v2286@valid-bound-ids? v3918@lhs*) (v2699@bless (cons (cons 'lambda (cons v3918@lhs* (cons v3920@b v3921@b*))) v3919@rhs*)) (v2703@invalid-fmls-error v3912@stx v3918@lhs*))) v3916@ls/false) ((lambda (v3926@t) ((lambda (v3928@ls/false) (if (and v3928@ls/false (apply (lambda (v3930@f v3931@lhs* v3932@rhs* v3933@b v3934@b*) (v2276@id? v3930@f)) v3928@ls/false)) (apply (lambda (v3940@f v3941@lhs* v3942@rhs* v3943@b v3944@b*) (if (v2286@valid-bound-ids? v3941@lhs*) (v2699@bless (cons (list 'letrec (list (list v3940@f (cons 'lambda (cons v3941@lhs* (cons v3943@b v3944@b*))))) v3940@f) v3942@rhs*)) (v2703@invalid-fmls-error v3912@stx v3941@lhs*))) v3928@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3926@t))) (v2773@syntax-dispatch v3926@t '(_ any #(each (any any)) any . each-any)))) v3914@t))) (v2773@syntax-dispatch v3914@t '(_ #(each (any any)) any . each-any)))) v3912@stx))) (set! v2707@let-values-macro (lambda (v3950@stx) ((lambda (v3953@rename v3955@rename*) (begin (set! v3953@rename (lambda (v4051@x v4052@old* v4053@new*) (begin (if (not (v2276@id? v4051@x)) (v3006@syntax-violation '#f '"not an indentifier" v3950@stx v4051@x) (void)) (if (v2290@bound-id-member? v4051@x v4052@old*) (v3006@syntax-violation '#f '"duplicate binding" v3950@stx v4051@x) (void)) ((lambda (v4057@y) (values v4057@y (cons v4051@x v4052@old*) (cons v4057@y v4053@new*))) (v1160@v924@gensym (v3012@syntax->datum v4051@x)))))) (set! v3955@rename* (lambda (v4033@x* v4034@old* v4035@new*) (if (null? v4033@x*) (values '() v4034@old* v4035@new*) (call-with-values (lambda () (v3953@rename (car v4033@x*) v4034@old* v4035@new*)) (lambda (v4039@x v4040@old* v4041@new*) (call-with-values (lambda () (v3955@rename* (cdr v4033@x*) v4040@old* v4041@new*)) (lambda (v4045@x* v4046@old* v4047@new*) (values (cons v4039@x v4045@x*) v4046@old* v4047@new*)))))))) ((lambda (v3956@t) ((lambda (v3958@ls/false) (if v3958@ls/false (apply (lambda (v3960@b v3961@b*) (cons* (v2699@bless 'let) '() v3960@b v3961@b*)) v3958@ls/false) ((lambda (v3964@t) ((lambda (v3966@ls/false) (if v3966@ls/false (apply (lambda (v3968@lhs* v3969@rhs* v3970@b v3971@b*) (v2699@bless ((letrec ((v3976@f (lambda (v3978@lhs* v3979@rhs* v3980@old* v3981@new*) (if (null? v3978@lhs*) (cons 'let (cons (map list v3980@old* v3981@new*) (cons v3970@b v3971@b*))) ((lambda (v3986@t) ((lambda (v3988@ls/false) (if v3988@ls/false (apply (lambda (v3990@x*) (call-with-values (lambda () (v3955@rename* v3990@x* v3980@old* v3981@new*)) (lambda (v3995@v3992@y* v3996@v3993@old* v3997@v3994@new*) ((lambda (v4001@new* v4002@old* v4003@y*) (list 'call-with-values (list 'lambda '() (car v3979@rhs*)) (list 'lambda v4003@y* (v3976@f (cdr v3978@lhs*) (cdr v3979@rhs*) v4002@old* v4001@new*)))) v3997@v3994@new* v3996@v3993@old* v3995@v3992@y*)))) v3988@ls/false) ((lambda (v4007@t) ((lambda (v4009@ls/false) (if v4009@ls/false (apply (lambda (v4011@x* v4012@x) (call-with-values (lambda () (v3953@rename v4012@x v3980@old* v3981@new*)) (lambda (v4015@y v4016@old* v4017@new*) (call-with-values (lambda () (v3955@rename* v4011@x* v4016@old* v4017@new*)) (lambda (v4021@y* v4022@old* v4023@new*) (list 'call-with-values (list 'lambda '() (car v3979@rhs*)) (list 'lambda (append v4021@y* v4015@y) (v3976@f (cdr v3978@lhs*) (cdr v3979@rhs*) v4022@old* v4023@new*)))))))) v4009@ls/false) ((lambda (v4027@t) ((lambda (v4029@ls/false) (if v4029@ls/false (apply (lambda (v4031@others) (v3006@syntax-violation '#f '"malformed bindings" v3950@stx v4031@others)) v4029@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4027@t))) (v2773@syntax-dispatch v4027@t 'any))) v4007@t))) (v2773@syntax-dispatch v4007@t '#(each+ any () any)))) v3986@t))) (v2773@syntax-dispatch v3986@t 'each-any))) (car v3978@lhs*)))))) v3976@f) v3968@lhs* v3969@rhs* '() '()))) v3966@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v3964@t))) (v2773@syntax-dispatch v3964@t '(_ #(each (any any)) any . each-any)))) v3956@t))) (v2773@syntax-dispatch v3956@t '(_ () any . each-any)))) v3950@stx))) '#f '#f))) (set! v2709@let*-values-macro (lambda (v4059@stx) ((lambda (v4062@check) (begin (set! v4062@check (lambda (v4109@x*) (if (not (null? v4109@x*)) ((lambda (v4111@x) (begin (if (not (v2276@id? v4111@x)) (v3006@syntax-violation '#f '"not an identifier" v4059@stx v4111@x) (void)) (v4062@check (cdr v4109@x*)) (if (v2290@bound-id-member? v4111@x (cdr v4109@x*)) (v3006@syntax-violation '#f '"duplicate identifier" v4059@stx v4111@x) (void)))) (car v4109@x*)) (void)))) ((lambda (v4063@t) ((lambda (v4065@ls/false) (if v4065@ls/false (apply (lambda (v4067@b v4068@b*) (cons* (v2699@bless 'let) '() v4067@b v4068@b*)) v4065@ls/false) ((lambda (v4071@t) ((lambda (v4073@ls/false) (if v4073@ls/false (apply (lambda (v4075@lhs* v4076@rhs* v4077@b v4078@b*) (v2699@bless ((letrec ((v4083@f (lambda (v4085@lhs* v4086@rhs*) (if (null? v4085@lhs*) (cons 'begin (cons v4077@b v4078@b*)) ((lambda (v4089@t) ((lambda (v4091@ls/false) (if v4091@ls/false (apply (lambda (v4093@x*) (begin (v4062@check v4093@x*) (list 'call-with-values (list 'lambda '() (car v4086@rhs*)) (list 'lambda v4093@x* (v4083@f (cdr v4085@lhs*) (cdr v4086@rhs*)))))) v4091@ls/false) ((lambda (v4095@t) ((lambda (v4097@ls/false) (if v4097@ls/false (apply (lambda (v4099@x* v4100@x) (begin (v4062@check (cons v4100@x v4099@x*)) (list 'call-with-values (list 'lambda '() (car v4086@rhs*)) (list 'lambda (append v4099@x* v4100@x) (v4083@f (cdr v4085@lhs*) (cdr v4086@rhs*)))))) v4097@ls/false) ((lambda (v4103@t) ((lambda (v4105@ls/false) (if v4105@ls/false (apply (lambda (v4107@others) (v3006@syntax-violation '#f '"malformed bindings" v4059@stx v4107@others)) v4105@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4103@t))) (v2773@syntax-dispatch v4103@t 'any))) v4095@t))) (v2773@syntax-dispatch v4095@t '#(each+ any () any)))) v4089@t))) (v2773@syntax-dispatch v4089@t 'each-any))) (car v4085@lhs*)))))) v4083@f) v4075@lhs* v4076@rhs*))) v4073@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4071@t))) (v2773@syntax-dispatch v4071@t '(_ #(each (any any)) any . each-any)))) v4063@t))) (v2773@syntax-dispatch v4063@t '(_ () any . each-any)))) v4059@stx))) '#f))) (set! v2711@trace-lambda-macro (lambda (v4113@stx) ((lambda (v4115@t) ((lambda (v4117@ls/false) (if v4117@ls/false (apply (lambda (v4119@who v4120@fmls v4121@b v4122@b*) (if (v2286@valid-bound-ids? v4120@fmls) (v2699@bless (list 'make-traced-procedure (list 'quote v4119@who) (cons 'lambda (cons v4120@fmls (cons v4121@b v4122@b*))))) (v2703@invalid-fmls-error v4113@stx v4120@fmls))) v4117@ls/false) ((lambda (v4127@t) ((lambda (v4129@ls/false) (if v4129@ls/false (apply (lambda (v4131@who v4132@fmls v4133@last v4134@b v4135@b*) (if (v2286@valid-bound-ids? (cons v4133@last v4132@fmls)) (v2699@bless (list 'make-traced-procedure (list 'quote v4131@who) (cons 'lambda (cons (append v4132@fmls v4133@last) (cons v4134@b v4135@b*))))) (v2703@invalid-fmls-error v4113@stx (append v4132@fmls v4133@last)))) v4129@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4127@t))) (v2773@syntax-dispatch v4127@t '(_ any #(each+ any () any) any . each-any)))) v4115@t))) (v2773@syntax-dispatch v4115@t '(_ any each-any any . each-any)))) v4113@stx))) (set! v2713@trace-define-macro (lambda (v4141@stx) ((lambda (v4143@t) ((lambda (v4145@ls/false) (if v4145@ls/false (apply (lambda (v4147@who v4148@fmls v4149@b v4150@b*) (if (v2286@valid-bound-ids? v4148@fmls) (v2699@bless (list 'define v4147@who (list 'make-traced-procedure (list 'quote v4147@who) (cons 'lambda (cons v4148@fmls (cons v4149@b v4150@b*)))))) (v2703@invalid-fmls-error v4141@stx v4148@fmls))) v4145@ls/false) ((lambda (v4155@t) ((lambda (v4157@ls/false) (if v4157@ls/false (apply (lambda (v4159@who v4160@fmls v4161@last v4162@b v4163@b*) (if (v2286@valid-bound-ids? (cons v4161@last v4160@fmls)) (v2699@bless (list 'define v4159@who (list 'make-traced-procedure (list 'quote v4159@who) (cons 'lambda (cons (append v4160@fmls v4161@last) (cons v4162@b v4163@b*)))))) (v2703@invalid-fmls-error v4141@stx (append v4160@fmls v4161@last)))) v4157@ls/false) ((lambda (v4169@t) ((lambda (v4171@ls/false) (if v4171@ls/false (apply (lambda (v4173@who v4174@expr) (if (v2276@id? v4173@who) (v2699@bless (list 'define v4173@who (list 'let (list (list 'v v4174@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote v4173@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (v3006@syntax-violation '#f '"invalid name" v4141@stx))) v4171@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4169@t))) (v2773@syntax-dispatch v4169@t '(_ any any)))) v4155@t))) (v2773@syntax-dispatch v4155@t '(_ (any . #(each+ any () any)) any . each-any)))) v4143@t))) (v2773@syntax-dispatch v4143@t '(_ (any . each-any) any . each-any)))) v4141@stx))) (set! v2715@trace-define-syntax-macro (lambda (v4177@stx) ((lambda (v4179@t) ((lambda (v4181@ls/false) (if v4181@ls/false (apply (lambda (v4183@who v4184@expr) (if (v2276@id? v4183@who) (v2699@bless (list 'define-syntax v4183@who (list 'make-traced-macro (list 'quote v4183@who) v4184@expr))) (v3006@syntax-violation '#f '"invalid name" v4177@stx))) v4181@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4179@t))) (v2773@syntax-dispatch v4179@t '(_ any any)))) v4177@stx))) (set! v2717@trace-let/rec-syntax (lambda (v4187@who) (lambda (v4189@stx) ((lambda (v4191@t) ((lambda (v4193@ls/false) (if v4193@ls/false (apply (lambda (v4195@lhs* v4196@rhs* v4197@b v4198@b*) (if (v2286@valid-bound-ids? v4195@lhs*) ((lambda (v4203@rhs*) (v2699@bless (cons v4187@who (cons (map list v4195@lhs* v4203@rhs*) (cons v4197@b v4198@b*))))) (map (lambda (v4205@lhs v4206@rhs) (list 'make-traced-macro (list 'quote v4205@lhs) v4206@rhs)) v4195@lhs* v4196@rhs*)) (v2703@invalid-fmls-error v4189@stx v4195@lhs*))) v4193@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4191@t))) (v2773@syntax-dispatch v4191@t '(_ #(each (any any)) any . each-any)))) v4189@stx)))) (set! v2719@trace-let-syntax-macro (v2717@trace-let/rec-syntax 'let-syntax)) (set! v2721@trace-letrec-syntax-macro (v2717@trace-let/rec-syntax 'letrec-syntax)) (set! v2723@guard-macro (lambda (v4209@x) ((lambda (v4212@gen-clauses) (begin (set! v4212@gen-clauses (lambda (v4235@con v4236@outerk v4237@clause*) ((lambda (v4242@f v4244@f*) (begin (set! v4242@f (lambda (v4295@x v4296@k) ((lambda (v4299@t) ((lambda (v4301@ls/false) (if v4301@ls/false (apply (lambda (v4303@e v4304@p) ((lambda (v4307@t) (list 'let (list (list v4307@t v4303@e)) (list 'if v4307@t (list v4304@p v4307@t) v4296@k))) (v1160@v924@gensym))) v4301@ls/false) ((lambda (v4309@t) ((lambda (v4311@ls/false) (if v4311@ls/false (apply (lambda (v4313@e) ((lambda (v4315@t) (list 'let (list (list v4315@t v4313@e)) (list 'if v4315@t v4315@t v4296@k))) (v1160@v924@gensym))) v4311@ls/false) ((lambda (v4317@t) ((lambda (v4319@ls/false) (if v4319@ls/false (apply (lambda (v4321@e v4322@v v4323@v*) (list 'if v4321@e (cons 'begin (cons v4322@v v4323@v*)) v4296@k)) v4319@ls/false) ((lambda (v4327@t) ((lambda (v4329@ls/false) (if v4329@ls/false (apply (lambda () (v3006@syntax-violation '#f '"invalid guard clause" v4295@x)) v4329@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4327@t))) (v2773@syntax-dispatch v4327@t '_))) v4317@t))) (v2773@syntax-dispatch v4317@t '(any any . each-any)))) v4309@t))) (v2773@syntax-dispatch v4309@t '(any)))) v4299@t))) (v2773@syntax-dispatch v4299@t '(any #(scheme-id =>) any)))) v4295@x))) (set! v4244@f* (lambda (v4255@x*) ((lambda (v4257@t) ((lambda (v4259@ls/false) (if v4259@ls/false (apply (lambda () ((lambda (v4261@g) (values (list v4261@g (list 'lambda '() (list 'raise-continuable v4235@con))) v4261@g)) (v1160@v924@gensym))) v4259@ls/false) ((lambda (v4263@t) ((lambda (v4265@ls/false) (if v4265@ls/false (apply (lambda (v4267@e v4268@e*) (values (cons 'begin (cons v4267@e v4268@e*)) '#f)) v4265@ls/false) ((lambda (v4271@t) ((lambda (v4273@ls/false) (if v4273@ls/false (apply (lambda (v4275@cls v4276@cls*) (call-with-values (lambda () (v4244@f* v4276@cls*)) (lambda (v4281@v4279@e v4282@v4280@g) ((lambda (v4285@g v4286@e) (values (v4242@f v4275@cls v4286@e) v4285@g)) v4282@v4280@g v4281@v4279@e)))) v4273@ls/false) ((lambda (v4289@t) ((lambda (v4291@ls/false) (if v4291@ls/false (apply (lambda (v4293@others) (v3006@syntax-violation '#f '"invalid guard clause" v4293@others)) v4291@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4289@t))) (v2773@syntax-dispatch v4289@t 'any))) v4271@t))) (v2773@syntax-dispatch v4271@t '(any . any)))) v4263@t))) (v2773@syntax-dispatch v4263@t '((#(scheme-id else) any . each-any))))) v4257@t))) (v2773@syntax-dispatch v4257@t '()))) v4255@x*))) (call-with-values (lambda () (v4244@f* v4237@clause*)) (lambda (v4247@v4245@code v4248@v4246@raisek) ((lambda (v4251@raisek v4252@code) (if v4251@raisek (list (list 'call/cc (list 'lambda (list v4251@raisek) (list v4236@outerk (list 'lambda '() v4252@code))))) (list v4236@outerk (list 'lambda '() v4252@code)))) v4248@v4246@raisek v4247@v4245@code))))) '#f '#f))) ((lambda (v4213@t) ((lambda (v4215@ls/false) (if (and v4215@ls/false (apply (lambda (v4217@con v4218@clause* v4219@b v4220@b*) (v2276@id? v4217@con)) v4215@ls/false)) (apply (lambda (v4225@con v4226@clause* v4227@b v4228@b*) ((lambda (v4233@outerk) (v2699@bless (list (list 'call/cc (list 'lambda (list v4233@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list v4225@con) (v4212@gen-clauses v4225@con v4233@outerk v4226@clause*)) (cons 'lambda (cons '() (cons v4227@b v4228@b*)))))))))) (v1160@v924@gensym))) v4215@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4213@t))) (v2773@syntax-dispatch v4213@t '(_ (any . each-any) any . each-any)))) v4209@x))) '#f))) (set! v2725@define-enumeration-macro (lambda (v4331@stx) ((lambda (v4334@set? v4336@remove-dups) (begin (set! v4334@set? (lambda (v4359@x) (or (null? v4359@x) (and (not (memq (car v4359@x) (cdr v4359@x))) (v4334@set? (cdr v4359@x)))))) (set! v4336@remove-dups (lambda (v4357@ls) (if (null? v4357@ls) '() (cons (car v4357@ls) (v4336@remove-dups (remq (car v4357@ls) (cdr v4357@ls))))))) ((lambda (v4337@t) ((lambda (v4339@ls/false) (if (and v4339@ls/false (apply (lambda (v4341@name v4342@id* v4343@maker) (and (v2276@id? v4341@name) (v2276@id? v4343@maker) (for-all v2276@id? v4342@id*))) v4339@ls/false)) (apply (lambda (v4347@name v4348@id* v4349@maker) ((lambda (v4353@name* v4354@mk) (v2699@bless (list 'begin (list 'define v4354@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote v4353@name*)))) (list 'define-syntax v4347@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote v4353@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote v4347@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax v4349@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote v4349@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote v4353@name*)) (cons 'syntax-violation (cons (list 'quote v4349@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons v4354@mk '('(n* ...)))))))))))) (v4336@remove-dups (v3012@syntax->datum v4348@id*)) (v1160@v924@gensym))) v4339@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4337@t))) (v2773@syntax-dispatch v4337@t '(_ any each-any any)))) v4331@stx))) '#f '#f))) (set! v2727@time-macro (lambda (v4361@stx) ((lambda (v4363@t) ((lambda (v4365@ls/false) (if v4365@ls/false (apply (lambda (v4367@expr) (v2699@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() v4367@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) v4365@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4363@t))) (v2773@syntax-dispatch v4363@t '(_ any)))) v4361@stx))) (set! v2729@delay-macro (lambda (v4369@stx) ((lambda (v4371@t) ((lambda (v4373@ls/false) (if v4373@ls/false (apply (lambda (v4375@expr) (v2699@bless (list 'make-promise (list 'lambda '() v4375@expr)))) v4373@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4371@t))) (v2773@syntax-dispatch v4371@t '(_ any)))) v4369@stx))) (set! v2731@assert-macro (lambda (v4377@stx) ((lambda (v4379@t) ((lambda (v4381@ls/false) (if v4381@ls/false (apply (lambda (v4383@expr) ((lambda (v4385@pos) (v2699@bless (list 'unless v4383@expr (list 'assertion-error (list 'quote v4383@expr) (list 'quote v4385@pos))))) (or (v2998@expression-position v4377@stx) (v2998@expression-position v4383@expr)))) v4381@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4379@t))) (v2773@syntax-dispatch v4379@t '(_ any)))) v4377@stx))) (set! v2733@endianness-macro (lambda (v4387@stx) ((lambda (v4389@t) ((lambda (v4391@ls/false) (if v4391@ls/false (apply (lambda (v4393@e) ((lambda (v4395@t) (if (memv v4395@t '(little)) (v2699@bless ''little) (if (memv v4395@t '(big)) (v2699@bless ''big) (v3006@syntax-violation '#f '"endianness must be big or little" v4387@stx)))) (v3012@syntax->datum v4393@e))) v4391@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4389@t))) (v2773@syntax-dispatch v4389@t '(_ any)))) v4387@stx))) (set! v2735@identifier-syntax-macro (lambda (v4397@stx) ((lambda (v4399@t) ((lambda (v4401@ls/false) (if v4401@ls/false (apply (lambda (v4403@expr) (v2699@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax v4403@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax v4403@expr) '((syntax (e* ...)))))))))) v4401@ls/false) ((lambda (v4405@t) ((lambda (v4407@ls/false) (if (and v4407@ls/false (apply (lambda (v4409@id1 v4410@expr1 v4411@id2 v4412@expr2 v4413@expr3) (and (v2276@id? v4409@id1) (v2276@id? v4411@id2) (v2276@id? v4412@expr2))) v4407@ls/false)) (apply (lambda (v4419@id1 v4420@expr1 v4421@id2 v4422@expr2 v4423@expr3) (v2699@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax v4420@expr1)) (list (list 'set! 'id v4422@expr2) (list 'syntax v4423@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons v4420@expr1 '(e* ...))))))))) v4407@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4405@t))) (v2773@syntax-dispatch v4405@t '(_ (any any) ((#(scheme-id set!) any any) any))))) v4399@t))) (v2773@syntax-dispatch v4399@t '(_ any)))) v4397@stx))) (set! v2737@do-macro (lambda (v4429@stx) ((lambda (v4432@bind) (begin (set! v4432@bind (lambda (v4455@x) ((lambda (v4457@t) ((lambda (v4459@ls/false) (if v4459@ls/false (apply (lambda (v4461@x v4462@init) (list v4461@x v4462@init v4461@x)) v4459@ls/false) ((lambda (v4465@t) ((lambda (v4467@ls/false) (if v4467@ls/false (apply (lambda (v4469@x v4470@init v4471@step) (list v4469@x v4470@init v4471@step)) v4467@ls/false) ((lambda (v4475@t) ((lambda (v4477@ls/false) (if v4477@ls/false (apply (lambda () (v3006@syntax-violation '#f '"invalid binding" v4429@stx)) v4477@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4475@t))) (v2773@syntax-dispatch v4475@t '_))) v4465@t))) (v2773@syntax-dispatch v4465@t '(any any any)))) v4457@t))) (v2773@syntax-dispatch v4457@t '(any any)))) v4455@x))) ((lambda (v4433@t) ((lambda (v4435@ls/false) (if v4435@ls/false (apply (lambda (v4437@binding* v4438@test v4439@expr* v4440@command*) ((lambda (v4445@t) ((lambda (v4447@ls/false) (if v4447@ls/false (apply (lambda (v4449@x* v4450@init* v4451@step*) (if (v2286@valid-bound-ids? v4449@x*) (v2699@bless (list 'letrec (list (list 'loop (list 'lambda v4449@x* (list 'if v4438@test (cons 'begin (cons '(if #f #f) v4439@expr*)) (cons 'begin (append v4440@command* (list (cons 'loop v4451@step*)))))))) (cons 'loop v4450@init*))) (v3006@syntax-violation '#f '"invalid bindings" v4429@stx))) v4447@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4445@t))) (v2773@syntax-dispatch v4445@t '#(each (any any any))))) (map v4432@bind v4437@binding*))) v4435@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4433@t))) (v2773@syntax-dispatch v4433@t '(_ each-any (any . each-any) . each-any)))) v4429@stx))) '#f))) (set! v2739@let*-macro (lambda (v4479@stx) ((lambda (v4481@t) ((lambda (v4483@ls/false) (if (and v4483@ls/false (apply (lambda (v4485@lhs* v4486@rhs* v4487@b v4488@b*) (for-all v2276@id? v4485@lhs*)) v4483@ls/false)) (apply (lambda (v4493@lhs* v4494@rhs* v4495@b v4496@b*) (v2699@bless ((letrec ((v4501@f (lambda (v4503@x*) (if (null? v4503@x*) (cons 'let (cons '() (cons v4495@b v4496@b*))) (list 'let (list (car v4503@x*)) (v4501@f (cdr v4503@x*))))))) v4501@f) (map list v4493@lhs* v4494@rhs*)))) v4483@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4481@t))) (v2773@syntax-dispatch v4481@t '(_ #(each (any any)) any . each-any)))) v4479@stx))) (set! v2741@or-macro (lambda (v4505@stx) ((lambda (v4507@t) ((lambda (v4509@ls/false) (if v4509@ls/false (apply (lambda () '#f) v4509@ls/false) ((lambda (v4511@t) ((lambda (v4513@ls/false) (if v4513@ls/false (apply (lambda (v4515@e v4516@e*) (v2699@bless ((letrec ((v4519@f (lambda (v4521@e v4522@e*) (if (null? v4522@e*) (list 'begin '#f v4521@e) (list 'let (list (list 't v4521@e)) (list 'if 't 't (v4519@f (car v4522@e*) (cdr v4522@e*)))))))) v4519@f) v4515@e v4516@e*))) v4513@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4511@t))) (v2773@syntax-dispatch v4511@t '(_ any . each-any)))) v4507@t))) (v2773@syntax-dispatch v4507@t '(_)))) v4505@stx))) (set! v2743@and-macro (lambda (v4525@stx) ((lambda (v4527@t) ((lambda (v4529@ls/false) (if v4529@ls/false (apply (lambda () '#t) v4529@ls/false) ((lambda (v4531@t) ((lambda (v4533@ls/false) (if v4533@ls/false (apply (lambda (v4535@e v4536@e*) (v2699@bless ((letrec ((v4539@f (lambda (v4541@e v4542@e*) (if (null? v4542@e*) (list 'begin '#f v4541@e) (cons 'if (cons v4541@e (cons (v4539@f (car v4542@e*) (cdr v4542@e*)) '(#f)))))))) v4539@f) v4535@e v4536@e*))) v4533@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4531@t))) (v2773@syntax-dispatch v4531@t '(_ any . each-any)))) v4527@t))) (v2773@syntax-dispatch v4527@t '(_)))) v4525@stx))) (set! v2745@cond-macro (lambda (v4545@stx) ((lambda (v4547@t) ((lambda (v4549@ls/false) (if v4549@ls/false (apply (lambda (v4551@cls v4552@cls*) (v2699@bless ((letrec ((v4555@f (lambda (v4557@cls v4558@cls*) (if (null? v4558@cls*) ((lambda (v4561@t) ((lambda (v4563@ls/false) (if v4563@ls/false (apply (lambda (v4565@e v4566@e*) (cons 'begin (cons v4565@e v4566@e*))) v4563@ls/false) ((lambda (v4569@t) ((lambda (v4571@ls/false) (if v4571@ls/false (apply (lambda (v4573@e v4574@p) (list 'let (list (list 't v4573@e)) (list 'if 't (cons v4574@p '(t))))) v4571@ls/false) ((lambda (v4577@t) ((lambda (v4579@ls/false) (if v4579@ls/false (apply (lambda (v4581@e) (cons 'or (cons v4581@e '((if #f #f))))) v4579@ls/false) ((lambda (v4583@t) ((lambda (v4585@ls/false) (if v4585@ls/false (apply (lambda (v4587@e v4588@e*) (list 'if v4587@e (cons 'begin v4588@e*))) v4585@ls/false) ((lambda (v4591@t) ((lambda (v4593@ls/false) (if v4593@ls/false (apply (lambda () (v3006@syntax-violation '#f '"invalid last clause" v4545@stx)) v4593@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4591@t))) (v2773@syntax-dispatch v4591@t '_))) v4583@t))) (v2773@syntax-dispatch v4583@t '(any . each-any)))) v4577@t))) (v2773@syntax-dispatch v4577@t '(any)))) v4569@t))) (v2773@syntax-dispatch v4569@t '(any #(scheme-id =>) any)))) v4561@t))) (v2773@syntax-dispatch v4561@t '(#(scheme-id else) any . each-any)))) v4557@cls) ((lambda (v4595@t) ((lambda (v4597@ls/false) (if v4597@ls/false (apply (lambda (v4599@e v4600@e*) (v3006@syntax-violation '#f '"incorrect position of keyword else" v4545@stx)) v4597@ls/false) ((lambda (v4603@t) ((lambda (v4605@ls/false) (if v4605@ls/false (apply (lambda (v4607@e v4608@p) (list 'let (list (list 't v4607@e)) (list 'if 't (cons v4608@p '(t)) (v4555@f (car v4558@cls*) (cdr v4558@cls*))))) v4605@ls/false) ((lambda (v4611@t) ((lambda (v4613@ls/false) (if v4613@ls/false (apply (lambda (v4615@e) (list 'or v4615@e (v4555@f (car v4558@cls*) (cdr v4558@cls*)))) v4613@ls/false) ((lambda (v4617@t) ((lambda (v4619@ls/false) (if v4619@ls/false (apply (lambda (v4621@e v4622@e*) (list 'if v4621@e (cons 'begin v4622@e*) (v4555@f (car v4558@cls*) (cdr v4558@cls*)))) v4619@ls/false) ((lambda (v4625@t) ((lambda (v4627@ls/false) (if v4627@ls/false (apply (lambda () (v3006@syntax-violation '#f '"invalid last clause" v4545@stx)) v4627@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4625@t))) (v2773@syntax-dispatch v4625@t '_))) v4617@t))) (v2773@syntax-dispatch v4617@t '(any . each-any)))) v4611@t))) (v2773@syntax-dispatch v4611@t '(any)))) v4603@t))) (v2773@syntax-dispatch v4603@t '(any #(scheme-id =>) any)))) v4595@t))) (v2773@syntax-dispatch v4595@t '(#(scheme-id else) any . each-any)))) v4557@cls))))) v4555@f) v4551@cls v4552@cls*))) v4549@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4547@t))) (v2773@syntax-dispatch v4547@t '(_ any . each-any)))) v4545@stx))) (set! v2747@do-include (lambda (v4629@stx v4630@id v4631@filename) ((lambda (v4635@filename) (begin (if (not (and (string? v4635@filename) (v2276@id? v4630@id))) (v3006@syntax-violation '#f '"invalid syntax" v4629@stx) (void)) (cons (v2699@bless 'begin) (with-input-from-file v4635@filename (lambda () ((letrec ((v4637@f (lambda (v4639@ls) ((lambda (v4641@x) (if (eof-object? v4641@x) (reverse v4639@ls) (v4637@f (cons (v2242@datum->stx v4630@id v4641@x) v4639@ls)))) (v1161@v926@read-annotated))))) v4637@f) '())))))) (v2298@stx->datum v4631@filename)))) (set! v2749@include-macro (lambda (v4643@e) ((lambda (v4645@t) ((lambda (v4647@ls/false) (if v4647@ls/false (apply (lambda (v4649@id v4650@filename) (v2747@do-include v4643@e v4649@id v4650@filename)) v4647@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4645@t))) (v2773@syntax-dispatch v4645@t '(any any)))) v4643@e))) (set! v2751@include-into-macro (lambda (v4653@e) ((lambda (v4655@t) ((lambda (v4657@ls/false) (if v4657@ls/false (apply (lambda (v4659@id v4660@filename) (v2747@do-include v4653@e v4659@id v4660@filename)) v4657@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4655@t))) (v2773@syntax-dispatch v4655@t '(_ any any)))) v4653@e))) (set! v2753@syntax-rules-macro (lambda (v4663@e) ((lambda (v4665@t) ((lambda (v4667@ls/false) (if v4667@ls/false (apply (lambda (v4669@lits v4670@pat* v4671@tmp*) (begin (v2779@verify-literals v4669@lits v4663@e) (v2699@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons v4669@lits (map (lambda (v4675@pat v4676@tmp) ((lambda (v4679@t) ((lambda (v4681@ls/false) (if v4681@ls/false (apply (lambda (v4683@rest) (list (cons 'g v4683@rest) (list 'syntax v4676@tmp))) v4681@ls/false) ((lambda (v4685@t) ((lambda (v4687@ls/false) (if v4687@ls/false (apply (lambda () (v3006@syntax-violation '#f '"invalid syntax-rules pattern" v4663@e v4675@pat)) v4687@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4685@t))) (v2773@syntax-dispatch v4685@t '_))) v4679@t))) (v2773@syntax-dispatch v4679@t '(_ . any)))) v4675@pat)) v4670@pat* v4671@tmp*)))))))) v4667@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4665@t))) (v2773@syntax-dispatch v4665@t '(_ each-any . #(each (any any)))))) v4663@e))) (set! v2755@quasiquote-macro ((lambda () ((lambda (v4690@datum v4718@quasicons* v4720@quasicons v4722@quasiappend v4724@quasivector v4726@vquasi v4728@quasi) (begin (set! v4690@datum (lambda (v4947@x) (list (v2655@scheme-stx 'quote) (v2252@mkstx v4947@x '() '() '())))) (set! v4718@quasicons* (lambda (v4939@x v4940@y) ((letrec ((v4943@f (lambda (v4945@x) (if (null? v4945@x) v4940@y (v4720@quasicons (car v4945@x) (v4943@f (cdr v4945@x))))))) v4943@f) v4939@x))) (set! v4720@quasicons (lambda (v4901@x v4902@y) ((lambda (v4905@t) ((lambda (v4907@ls/false) (if v4907@ls/false (apply (lambda (v4909@dy) ((lambda (v4911@t) ((lambda (v4913@ls/false) (if v4913@ls/false (apply (lambda (v4915@dx) (list (v2655@scheme-stx 'quote) (cons v4915@dx v4909@dy))) v4913@ls/false) ((lambda (v4917@t) ((lambda (v4919@ls/false) (if v4919@ls/false (apply (lambda () ((lambda (v4921@t) ((lambda (v4923@ls/false) (if v4923@ls/false (apply (lambda () (list (v2655@scheme-stx 'list) v4901@x)) v4923@ls/false) ((lambda (v4925@t) ((lambda (v4927@ls/false) (if v4927@ls/false (apply (lambda () (list (v2655@scheme-stx 'cons) v4901@x v4902@y)) v4927@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4925@t))) (v2773@syntax-dispatch v4925@t '_))) v4921@t))) (v2773@syntax-dispatch v4921@t '()))) v4909@dy)) v4919@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4917@t))) (v2773@syntax-dispatch v4917@t '_))) v4911@t))) (v2773@syntax-dispatch v4911@t '(#(scheme-id quote) any)))) v4901@x)) v4907@ls/false) ((lambda (v4929@t) ((lambda (v4931@ls/false) (if v4931@ls/false (apply (lambda (v4933@stuff) (cons* (v2655@scheme-stx 'list) v4901@x v4933@stuff)) v4931@ls/false) ((lambda (v4935@t) ((lambda (v4937@ls/false) (if v4937@ls/false (apply (lambda () (list (v2655@scheme-stx 'cons) v4901@x v4902@y)) v4937@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4935@t))) (v2773@syntax-dispatch v4935@t '_))) v4929@t))) (v2773@syntax-dispatch v4929@t '(#(scheme-id list) . each-any)))) v4905@t))) (v2773@syntax-dispatch v4905@t '(#(scheme-id quote) any)))) v4902@y))) (set! v4722@quasiappend (lambda (v4875@x v4876@y) ((lambda (v4879@ls) (if (null? v4879@ls) (list (v2655@scheme-stx 'quote) '()) (if (null? (cdr v4879@ls)) (car v4879@ls) (cons* (v2655@scheme-stx 'append) v4879@ls)))) ((letrec ((v4881@f (lambda (v4883@x) (if (null? v4883@x) ((lambda (v4885@t) ((lambda (v4887@ls/false) (if v4887@ls/false (apply (lambda () '()) v4887@ls/false) ((lambda (v4889@t) ((lambda (v4891@ls/false) (if v4891@ls/false (apply (lambda () (list v4876@y)) v4891@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4889@t))) (v2773@syntax-dispatch v4889@t '_))) v4885@t))) (v2773@syntax-dispatch v4885@t '(#(scheme-id quote) ())))) v4876@y) ((lambda (v4893@t) ((lambda (v4895@ls/false) (if v4895@ls/false (apply (lambda () (v4881@f (cdr v4883@x))) v4895@ls/false) ((lambda (v4897@t) ((lambda (v4899@ls/false) (if v4899@ls/false (apply (lambda () (cons (car v4883@x) (v4881@f (cdr v4883@x)))) v4899@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4897@t))) (v2773@syntax-dispatch v4897@t '_))) v4893@t))) (v2773@syntax-dispatch v4893@t '(#(scheme-id quote) ())))) (car v4883@x)))))) v4881@f) v4875@x)))) (set! v4724@quasivector (lambda (v4825@x) ((lambda (v4827@pat-x) ((lambda (v4829@t) ((lambda (v4831@ls/false) (if v4831@ls/false (apply (lambda (v4833@x*) (list (v2655@scheme-stx 'quote) (list->vector v4833@x*))) v4831@ls/false) ((lambda (v4835@t) ((lambda (v4837@ls/false) (if v4837@ls/false (apply (lambda () ((letrec ((v4839@f (lambda (v4841@x v4842@k) ((lambda (v4845@t) ((lambda (v4847@ls/false) (if v4847@ls/false (apply (lambda (v4849@x*) (v4842@k (map (lambda (v4851@x) (list (v2655@scheme-stx 'quote) v4851@x)) v4849@x*))) v4847@ls/false) ((lambda (v4853@t) ((lambda (v4855@ls/false) (if v4855@ls/false (apply (lambda (v4857@x*) (v4842@k v4857@x*)) v4855@ls/false) ((lambda (v4859@t) ((lambda (v4861@ls/false) (if v4861@ls/false (apply (lambda (v4863@x v4864@y) (v4839@f v4864@y (lambda (v4867@ls) (v4842@k (cons v4863@x v4867@ls))))) v4861@ls/false) ((lambda (v4869@t) ((lambda (v4871@ls/false) (if v4871@ls/false (apply (lambda () (list (v2655@scheme-stx 'list->vector) v4827@pat-x)) v4871@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4869@t))) (v2773@syntax-dispatch v4869@t '_))) v4859@t))) (v2773@syntax-dispatch v4859@t '(#(scheme-id cons) any any)))) v4853@t))) (v2773@syntax-dispatch v4853@t '(#(scheme-id list) . each-any)))) v4845@t))) (v2773@syntax-dispatch v4845@t '(#(scheme-id quote) each-any)))) v4841@x)))) v4839@f) v4825@x (lambda (v4873@ls) (cons* (v2655@scheme-stx 'vector) v4873@ls)))) v4837@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4835@t))) (v2773@syntax-dispatch v4835@t '_))) v4829@t))) (v2773@syntax-dispatch v4829@t '(#(scheme-id quote) each-any)))) v4827@pat-x)) v4825@x))) (set! v4726@vquasi (lambda (v4791@p v4792@lev) ((lambda (v4795@t) ((lambda (v4797@ls/false) (if v4797@ls/false (apply (lambda (v4799@p v4800@q) ((lambda (v4803@t) ((lambda (v4805@ls/false) (if v4805@ls/false (apply (lambda (v4807@p) (if (= v4792@lev '0) (v4718@quasicons* v4807@p (v4726@vquasi v4800@q v4792@lev)) (v4720@quasicons (v4720@quasicons (v4690@datum 'unquote) (v4728@quasi v4807@p (- v4792@lev '1))) (v4726@vquasi v4800@q v4792@lev)))) v4805@ls/false) ((lambda (v4809@t) ((lambda (v4811@ls/false) (if v4811@ls/false (apply (lambda (v4813@p) (if (= v4792@lev '0) (v4722@quasiappend v4813@p (v4726@vquasi v4800@q v4792@lev)) (v4720@quasicons (v4720@quasicons (v4690@datum 'unquote-splicing) (v4728@quasi v4813@p (- v4792@lev '1))) (v4726@vquasi v4800@q v4792@lev)))) v4811@ls/false) ((lambda (v4815@t) ((lambda (v4817@ls/false) (if v4817@ls/false (apply (lambda (v4819@p) (v4720@quasicons (v4728@quasi v4819@p v4792@lev) (v4726@vquasi v4800@q v4792@lev))) v4817@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4815@t))) (v2773@syntax-dispatch v4815@t 'any))) v4809@t))) (v2773@syntax-dispatch v4809@t '(#(scheme-id unquote-splicing) . each-any)))) v4803@t))) (v2773@syntax-dispatch v4803@t '(#(scheme-id unquote) . each-any)))) v4799@p)) v4797@ls/false) ((lambda (v4821@t) ((lambda (v4823@ls/false) (if v4823@ls/false (apply (lambda () (list (v2655@scheme-stx 'quote) '())) v4823@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4821@t))) (v2773@syntax-dispatch v4821@t '()))) v4795@t))) (v2773@syntax-dispatch v4795@t '(any . any)))) v4791@p))) (set! v4728@quasi (lambda (v4737@p v4738@lev) ((lambda (v4741@t) ((lambda (v4743@ls/false) (if v4743@ls/false (apply (lambda (v4745@p) (if (= v4738@lev '0) v4745@p (v4720@quasicons (v4690@datum 'unquote) (v4728@quasi (list v4745@p) (- v4738@lev '1))))) v4743@ls/false) ((lambda (v4747@t) ((lambda (v4749@ls/false) (if v4749@ls/false (apply (lambda (v4751@p v4752@q) (if (= v4738@lev '0) (v4718@quasicons* v4751@p (v4728@quasi v4752@q v4738@lev)) (v4720@quasicons (v4720@quasicons (v4690@datum 'unquote) (v4728@quasi v4751@p (- v4738@lev '1))) (v4728@quasi v4752@q v4738@lev)))) v4749@ls/false) ((lambda (v4755@t) ((lambda (v4757@ls/false) (if v4757@ls/false (apply (lambda (v4759@p v4760@q) (if (= v4738@lev '0) (v4722@quasiappend v4759@p (v4728@quasi v4760@q v4738@lev)) (v4720@quasicons (v4720@quasicons (v4690@datum 'unquote-splicing) (v4728@quasi v4759@p (- v4738@lev '1))) (v4728@quasi v4760@q v4738@lev)))) v4757@ls/false) ((lambda (v4763@t) ((lambda (v4765@ls/false) (if v4765@ls/false (apply (lambda (v4767@p) (v4720@quasicons (v4690@datum 'quasiquote) (v4728@quasi (list v4767@p) (+ v4738@lev '1)))) v4765@ls/false) ((lambda (v4769@t) ((lambda (v4771@ls/false) (if v4771@ls/false (apply (lambda (v4773@p v4774@q) (v4720@quasicons (v4728@quasi v4773@p v4738@lev) (v4728@quasi v4774@q v4738@lev))) v4771@ls/false) ((lambda (v4777@t) ((lambda (v4779@ls/false) (if (and v4779@ls/false (apply (lambda (v4781@x) (not (v2220@stx? v4781@x))) v4779@ls/false)) (apply (lambda (v4783@x) (v4724@quasivector (v4726@vquasi v4783@x v4738@lev))) v4779@ls/false) ((lambda (v4785@t) ((lambda (v4787@ls/false) (if v4787@ls/false (apply (lambda (v4789@p) (list (v2655@scheme-stx 'quote) v4789@p)) v4787@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4785@t))) (v2773@syntax-dispatch v4785@t 'any))) v4777@t))) (v2773@syntax-dispatch v4777@t '#(vector each-any)))) v4769@t))) (v2773@syntax-dispatch v4769@t '(any . any)))) v4763@t))) (v2773@syntax-dispatch v4763@t '(#(scheme-id quasiquote) any)))) v4755@t))) (v2773@syntax-dispatch v4755@t '((#(scheme-id unquote-splicing) . each-any) . any)))) v4747@t))) (v2773@syntax-dispatch v4747@t '((#(scheme-id unquote) . each-any) . any)))) v4741@t))) (v2773@syntax-dispatch v4741@t '(#(scheme-id unquote) any)))) v4737@p))) (lambda (v4729@x) ((lambda (v4731@t) ((lambda (v4733@ls/false) (if v4733@ls/false (apply (lambda (v4735@e) (v4728@quasi v4735@e '0)) v4733@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4731@t))) (v2773@syntax-dispatch v4731@t '(_ any)))) v4729@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! v2757@quasisyntax-macro ((lambda () ((lambda (v4950@quasi) (begin (set! v4950@quasi (lambda (v4974@p v4975@lev) ((lambda (v4978@t) ((lambda (v4980@ls/false) (if v4980@ls/false (apply (lambda (v4982@p) (if (= v4975@lev '0) ((lambda (v4984@g) (values (list v4984@g) (list v4982@p) v4984@g)) (v1160@v924@gensym)) (call-with-values (lambda () (v4950@quasi v4982@p (- v4975@lev '1))) (lambda (v4989@v4986@lhs* v4990@v4987@rhs* v4991@v4988@p) ((lambda (v4995@p v4996@rhs* v4997@lhs*) (values v4997@lhs* v4996@rhs* (list 'unsyntax v4995@p))) v4991@v4988@p v4990@v4987@rhs* v4989@v4986@lhs*))))) v4980@ls/false) ((lambda (v5001@t) ((lambda (v5003@ls/false) (if (and v5003@ls/false (apply (lambda () (= v4975@lev '0)) v5003@ls/false)) (apply (lambda () (v3006@syntax-violation '#f '"incorrect use of unsyntax" v4974@p)) v5003@ls/false) ((lambda (v5005@t) ((lambda (v5007@ls/false) (if v5007@ls/false (apply (lambda (v5009@p* v5010@q) (call-with-values (lambda () (v4950@quasi v5010@q v4975@lev)) (lambda (v5016@v5013@lhs* v5017@v5014@rhs* v5018@v5015@q) ((lambda (v5022@q v5023@rhs* v5024@lhs*) (if (= v4975@lev '0) ((lambda (v5028@g*) (values (append v5028@g* v5024@lhs*) (append v5009@p* v5023@rhs*) (append v5028@g* v5022@q))) (map (lambda (v5030@x) (v1160@v924@gensym)) v5009@p*)) (call-with-values (lambda () (v4950@quasi v5009@p* (- v4975@lev '1))) (lambda (v5035@v5032@lhs2* v5036@v5033@rhs2* v5037@v5034@p*) ((lambda (v5041@p* v5042@rhs2* v5043@lhs2*) (values (append v5043@lhs2* v5024@lhs*) (append v5042@rhs2* v5023@rhs*) (cons (cons 'unsyntax v5041@p*) v5022@q))) v5037@v5034@p* v5036@v5033@rhs2* v5035@v5032@lhs2*))))) v5018@v5015@q v5017@v5014@rhs* v5016@v5013@lhs*)))) v5007@ls/false) ((lambda (v5047@t) ((lambda (v5049@ls/false) (if v5049@ls/false (apply (lambda (v5051@p* v5052@q) (call-with-values (lambda () (v4950@quasi v5052@q v4975@lev)) (lambda (v5058@v5055@lhs* v5059@v5056@rhs* v5060@v5057@q) ((lambda (v5064@q v5065@rhs* v5066@lhs*) (if (= v4975@lev '0) ((lambda (v5070@g*) (values (append (map (lambda (v5072@g) (cons v5072@g '(...))) v5070@g*) v5066@lhs*) (append v5051@p* v5065@rhs*) (append (apply append (map (lambda (v5074@g) (cons v5074@g '(...))) v5070@g*)) v5064@q))) (map (lambda (v5076@x) (v1160@v924@gensym)) v5051@p*)) (call-with-values (lambda () (v4950@quasi v5051@p* (- v4975@lev '1))) (lambda (v5081@v5078@lhs2* v5082@v5079@rhs2* v5083@v5080@p*) ((lambda (v5087@p* v5088@rhs2* v5089@lhs2*) (values (append v5089@lhs2* v5066@lhs*) (append v5088@rhs2* v5065@rhs*) (cons (cons 'unsyntax-splicing v5087@p*) v5064@q))) v5083@v5080@p* v5082@v5079@rhs2* v5081@v5078@lhs2*))))) v5060@v5057@q v5059@v5056@rhs* v5058@v5055@lhs*)))) v5049@ls/false) ((lambda (v5093@t) ((lambda (v5095@ls/false) (if (and v5095@ls/false (apply (lambda () (= v4975@lev '0)) v5095@ls/false)) (apply (lambda () (v3006@syntax-violation '#f '"incorrect use of unsyntax-splicing" v4974@p)) v5095@ls/false) ((lambda (v5097@t) ((lambda (v5099@ls/false) (if v5099@ls/false (apply (lambda (v5101@p) (call-with-values (lambda () (v4950@quasi v5101@p (+ v4975@lev '1))) (lambda (v5106@v5103@lhs* v5107@v5104@rhs* v5108@v5105@p) ((lambda (v5112@p v5113@rhs* v5114@lhs*) (values v5114@lhs* v5113@rhs* (list 'quasisyntax v5112@p))) v5108@v5105@p v5107@v5104@rhs* v5106@v5103@lhs*)))) v5099@ls/false) ((lambda (v5118@t) ((lambda (v5120@ls/false) (if v5120@ls/false (apply (lambda (v5122@p v5123@q) (call-with-values (lambda () (v4950@quasi v5122@p v4975@lev)) (lambda (v5132@v5126@lhs* v5133@v5127@rhs* v5134@v5128@p) (call-with-values (lambda () (v4950@quasi v5123@q v4975@lev)) (lambda (v5138@v5129@lhs2* v5139@v5130@rhs2* v5140@v5131@q) ((lambda (v5144@q v5145@rhs2* v5146@lhs2* v5147@p v5148@rhs* v5149@lhs*) (values (append v5146@lhs2* v5149@lhs*) (append v5145@rhs2* v5148@rhs*) (cons v5147@p v5144@q))) v5140@v5131@q v5139@v5130@rhs2* v5138@v5129@lhs2* v5134@v5128@p v5133@v5127@rhs* v5132@v5126@lhs*)))))) v5120@ls/false) ((lambda (v5156@t) ((lambda (v5158@ls/false) (if v5158@ls/false (apply (lambda (v5160@x*) (call-with-values (lambda () (v4950@quasi v5160@x* v4975@lev)) (lambda (v5165@v5162@lhs* v5166@v5163@rhs* v5167@v5164@x*) ((lambda (v5171@x* v5172@rhs* v5173@lhs*) (values v5173@lhs* v5172@rhs* (list->vector v5171@x*))) v5167@v5164@x* v5166@v5163@rhs* v5165@v5162@lhs*)))) v5158@ls/false) ((lambda (v5177@t) ((lambda (v5179@ls/false) (if v5179@ls/false (apply (lambda () (values '() '() v4974@p)) v5179@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5177@t))) (v2773@syntax-dispatch v5177@t '_))) v5156@t))) (v2773@syntax-dispatch v5156@t '#(vector each-any)))) v5118@t))) (v2773@syntax-dispatch v5118@t '(any . any)))) v5097@t))) (v2773@syntax-dispatch v5097@t '(#(scheme-id quasisyntax) any)))) v5093@t))) (v2773@syntax-dispatch v5093@t '#(scheme-id unsyntax-splicing)))) v5047@t))) (v2773@syntax-dispatch v5047@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) v5005@t))) (v2773@syntax-dispatch v5005@t '((#(scheme-id unsyntax) . each-any) . any)))) v5001@t))) (v2773@syntax-dispatch v5001@t '#(scheme-id unsyntax)))) v4978@t))) (v2773@syntax-dispatch v4978@t '(#(scheme-id unsyntax) any)))) v4974@p))) (lambda (v4951@x) ((lambda (v4953@t) ((lambda (v4955@ls/false) (if v4955@ls/false (apply (lambda (v4957@e) (call-with-values (lambda () (v4950@quasi v4957@e '0)) (lambda (v4962@v4959@lhs* v4963@v4960@rhs* v4964@v4961@v) ((lambda (v4968@v v4969@rhs* v4970@lhs*) (v2699@bless (list 'syntax-case (cons 'list v4969@rhs*) '() (list v4970@lhs* (list 'syntax v4968@v))))) v4964@v4961@v v4963@v4960@rhs* v4962@v4959@lhs*)))) v4955@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v4953@t))) (v2773@syntax-dispatch v4953@t '(_ any)))) v4951@x)))) '#f)))) (set! v2759@define-struct-macro (lambda (v5181@stx) (v3006@syntax-violation '#f '"define-struct not supported" v5181@stx))) (set! v2761@define-record-type-macro (lambda (v5183@x) ((lambda (v5186@id v5188@get-record-name v5190@get-record-constructor-name v5192@get-record-predicate-name v5194@get-clause v5196@foo-rtd-code v5198@parent-rtd-code v5200@parent-rcd-code v5202@foo-rcd-code v5204@get-protocol-code v5206@get-fields v5208@get-mutator-indices v5210@get-mutators v5212@get-accessors v5214@enumerate v5216@do-define-record v5218@verify-clauses) (begin (set! v5186@id (lambda (v5685@ctxt . v5687@str*) (v3010@datum->syntax v5685@ctxt (string->symbol (apply string-append (map (lambda (v5689@x) (if (symbol? v5689@x) (symbol->string v5689@x) (if (string? v5689@x) v5689@x (assertion-violation 'define-record-type '"BUG")))) v5687@str*)))))) (set! v5188@get-record-name (lambda (v5667@spec) ((lambda (v5669@t) ((lambda (v5671@ls/false) (if v5671@ls/false (apply (lambda (v5673@foo v5674@make-foo v5675@foo?) v5673@foo) v5671@ls/false) ((lambda (v5679@t) ((lambda (v5681@ls/false) (if v5681@ls/false (apply (lambda (v5683@foo) v5683@foo) v5681@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5679@t))) (v2773@syntax-dispatch v5679@t 'any))) v5669@t))) (v2773@syntax-dispatch v5669@t '(any any any)))) v5667@spec))) (set! v5190@get-record-constructor-name (lambda (v5647@spec) ((lambda (v5649@t) ((lambda (v5651@ls/false) (if v5651@ls/false (apply (lambda (v5653@foo v5654@make-foo v5655@foo?) v5654@make-foo) v5651@ls/false) ((lambda (v5659@t) ((lambda (v5661@ls/false) (if (and v5661@ls/false (apply (lambda (v5663@foo) (v2276@id? v5663@foo)) v5661@ls/false)) (apply (lambda (v5665@foo) (v5186@id v5665@foo '"make-" (v2298@stx->datum v5665@foo))) v5661@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5659@t))) (v2773@syntax-dispatch v5659@t 'any))) v5649@t))) (v2773@syntax-dispatch v5649@t '(any any any)))) v5647@spec))) (set! v5192@get-record-predicate-name (lambda (v5627@spec) ((lambda (v5629@t) ((lambda (v5631@ls/false) (if v5631@ls/false (apply (lambda (v5633@foo v5634@make-foo v5635@foo?) v5635@foo?) v5631@ls/false) ((lambda (v5639@t) ((lambda (v5641@ls/false) (if (and v5641@ls/false (apply (lambda (v5643@foo) (v2276@id? v5643@foo)) v5641@ls/false)) (apply (lambda (v5645@foo) (v5186@id v5645@foo (v2298@stx->datum v5645@foo) '"?")) v5641@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5639@t))) (v2773@syntax-dispatch v5639@t 'any))) v5629@t))) (v2773@syntax-dispatch v5629@t '(any any any)))) v5627@spec))) (set! v5194@get-clause (lambda (v5609@id v5610@ls) ((lambda (v5613@t) ((lambda (v5615@ls/false) (if v5615@ls/false (apply (lambda () '#f) v5615@ls/false) ((lambda (v5617@t) ((lambda (v5619@ls/false) (if v5619@ls/false (apply (lambda (v5621@x v5622@rest v5623@ls) (if (v2284@free-id=? (v2699@bless v5609@id) v5621@x) (cons v5621@x v5622@rest) (v5194@get-clause v5609@id v5623@ls))) v5619@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5617@t))) (v2773@syntax-dispatch v5617@t '((any . any) . any)))) v5613@t))) (v2773@syntax-dispatch v5613@t '()))) v5610@ls))) (set! v5196@foo-rtd-code (lambda (v5527@name v5528@clause* v5529@parent-rtd-code) ((lambda (v5534@convert-field-spec*) (begin (set! v5534@convert-field-spec* (lambda (v5583@ls) (list->vector (map (lambda (v5585@x) ((lambda (v5587@t) ((lambda (v5589@ls/false) (if v5589@ls/false (apply (lambda (v5591@name v5592@rest) (list 'mutable v5591@name)) v5589@ls/false) ((lambda (v5595@t) ((lambda (v5597@ls/false) (if v5597@ls/false (apply (lambda (v5599@name v5600@rest) (list 'immutable v5599@name)) v5597@ls/false) ((lambda (v5603@t) ((lambda (v5605@ls/false) (if v5605@ls/false (apply (lambda (v5607@name) (list 'immutable v5607@name)) v5605@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5603@t))) (v2773@syntax-dispatch v5603@t 'any))) v5595@t))) (v2773@syntax-dispatch v5595@t '(#(scheme-id immutable) any . any)))) v5587@t))) (v2773@syntax-dispatch v5587@t '(#(scheme-id mutable) any . any)))) v5585@x)) v5583@ls)))) ((lambda (v5535@uid-code v5536@sealed? v5537@opaque? v5538@fields) (v2699@bless (list 'make-record-type-descriptor (list 'quote v5527@name) v5529@parent-rtd-code v5535@uid-code v5536@sealed? v5537@opaque? v5538@fields))) ((lambda (v5543@t) ((lambda (v5545@ls/false) (if v5545@ls/false (apply (lambda () (list 'quote (v1160@v924@gensym))) v5545@ls/false) ((lambda (v5547@t) ((lambda (v5549@ls/false) (if v5549@ls/false (apply (lambda (v5551@uid) (list 'quote v5551@uid)) v5549@ls/false) ((lambda (v5553@t) ((lambda (v5555@ls/false) (if v5555@ls/false (apply (lambda () '#f) v5555@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5553@t))) (v2773@syntax-dispatch v5553@t '_))) v5547@t))) (v2773@syntax-dispatch v5547@t '(_ any)))) v5543@t))) (v2773@syntax-dispatch v5543@t '(_)))) (v5194@get-clause 'nongenerative v5528@clause*)) ((lambda (v5557@t) ((lambda (v5559@ls/false) (if v5559@ls/false (apply (lambda () '#t) v5559@ls/false) ((lambda (v5561@t) ((lambda (v5563@ls/false) (if v5563@ls/false (apply (lambda () '#f) v5563@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5561@t))) (v2773@syntax-dispatch v5561@t '_))) v5557@t))) (v2773@syntax-dispatch v5557@t '(_ #(atom #t))))) (v5194@get-clause 'sealed v5528@clause*)) ((lambda (v5565@t) ((lambda (v5567@ls/false) (if v5567@ls/false (apply (lambda () '#t) v5567@ls/false) ((lambda (v5569@t) ((lambda (v5571@ls/false) (if v5571@ls/false (apply (lambda () '#f) v5571@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5569@t))) (v2773@syntax-dispatch v5569@t '_))) v5565@t))) (v2773@syntax-dispatch v5565@t '(_ #(atom #t))))) (v5194@get-clause 'opaque v5528@clause*)) ((lambda (v5573@t) ((lambda (v5575@ls/false) (if v5575@ls/false (apply (lambda (v5577@field-spec*) (list 'quote (v5534@convert-field-spec* v5577@field-spec*))) v5575@ls/false) ((lambda (v5579@t) ((lambda (v5581@ls/false) (if v5581@ls/false (apply (lambda () ''#()) v5581@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5579@t))) (v2773@syntax-dispatch v5579@t '_))) v5573@t))) (v2773@syntax-dispatch v5573@t '(_ . each-any)))) (v5194@get-clause 'fields v5528@clause*))))) '#f))) (set! v5198@parent-rtd-code (lambda (v5503@clause*) ((lambda (v5505@t) ((lambda (v5507@ls/false) (if v5507@ls/false (apply (lambda (v5509@name) (list 'record-type-descriptor v5509@name)) v5507@ls/false) ((lambda (v5511@t) ((lambda (v5513@ls/false) (if v5513@ls/false (apply (lambda () ((lambda (v5515@t) ((lambda (v5517@ls/false) (if v5517@ls/false (apply (lambda (v5519@rtd v5520@rcd) v5519@rtd) v5517@ls/false) ((lambda (v5523@t) ((lambda (v5525@ls/false) (if v5525@ls/false (apply (lambda () '#f) v5525@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5523@t))) (v2773@syntax-dispatch v5523@t '#(atom #f)))) v5515@t))) (v2773@syntax-dispatch v5515@t '(_ any any)))) (v5194@get-clause 'parent-rtd v5503@clause*))) v5513@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5511@t))) (v2773@syntax-dispatch v5511@t '#(atom #f)))) v5505@t))) (v2773@syntax-dispatch v5505@t '(_ any)))) (v5194@get-clause 'parent v5503@clause*)))) (set! v5200@parent-rcd-code (lambda (v5479@clause*) ((lambda (v5481@t) ((lambda (v5483@ls/false) (if v5483@ls/false (apply (lambda (v5485@name) (list 'record-constructor-descriptor v5485@name)) v5483@ls/false) ((lambda (v5487@t) ((lambda (v5489@ls/false) (if v5489@ls/false (apply (lambda () ((lambda (v5491@t) ((lambda (v5493@ls/false) (if v5493@ls/false (apply (lambda (v5495@rtd v5496@rcd) v5496@rcd) v5493@ls/false) ((lambda (v5499@t) ((lambda (v5501@ls/false) (if v5501@ls/false (apply (lambda () '#f) v5501@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5499@t))) (v2773@syntax-dispatch v5499@t '#(atom #f)))) v5491@t))) (v2773@syntax-dispatch v5491@t '(_ any any)))) (v5194@get-clause 'parent-rtd v5479@clause*))) v5489@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5487@t))) (v2773@syntax-dispatch v5487@t '#(atom #f)))) v5481@t))) (v2773@syntax-dispatch v5481@t '(_ any)))) (v5194@get-clause 'parent v5479@clause*)))) (set! v5202@foo-rcd-code (lambda (v5471@clause* v5472@foo-rtd v5473@protocol v5474@parent-rcd-code) (list 'make-record-constructor-descriptor v5472@foo-rtd v5474@parent-rcd-code v5473@protocol))) (set! v5204@get-protocol-code (lambda (v5459@clause*) ((lambda (v5461@t) ((lambda (v5463@ls/false) (if v5463@ls/false (apply (lambda (v5465@expr) v5465@expr) v5463@ls/false) ((lambda (v5467@t) ((lambda (v5469@ls/false) (if v5469@ls/false (apply (lambda () '#f) v5469@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5467@t))) (v2773@syntax-dispatch v5467@t '_))) v5461@t))) (v2773@syntax-dispatch v5461@t '(_ any)))) (v5194@get-clause 'protocol v5459@clause*)))) (set! v5206@get-fields (lambda (v5441@clause*) ((lambda (v5443@t) ((lambda (v5445@ls/false) (if v5445@ls/false (apply (lambda () '()) v5445@ls/false) ((lambda (v5447@t) ((lambda (v5449@ls/false) (if v5449@ls/false (apply (lambda (v5451@f*) v5451@f*) v5449@ls/false) ((lambda (v5453@t) ((lambda (v5455@ls/false) (if v5455@ls/false (apply (lambda (v5457@rest) (v5206@get-fields v5457@rest)) v5455@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5453@t))) (v2773@syntax-dispatch v5453@t '(_ . any)))) v5447@t))) (v2773@syntax-dispatch v5447@t '((#(scheme-id fields) . each-any) . _)))) v5443@t))) (v2773@syntax-dispatch v5443@t '()))) v5441@clause*))) (set! v5208@get-mutator-indices (lambda (v5417@fields) ((letrec ((v5419@f (lambda (v5421@fields v5422@i) ((lambda (v5425@t) ((lambda (v5427@ls/false) (if v5427@ls/false (apply (lambda () '()) v5427@ls/false) ((lambda (v5429@t) ((lambda (v5431@ls/false) (if v5431@ls/false (apply (lambda (v5433@rest) (cons v5422@i (v5419@f v5433@rest (+ v5422@i '1)))) v5431@ls/false) ((lambda (v5435@t) ((lambda (v5437@ls/false) (if v5437@ls/false (apply (lambda (v5439@rest) (v5419@f v5439@rest (+ v5422@i '1))) v5437@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5435@t))) (v2773@syntax-dispatch v5435@t '(_ . any)))) v5429@t))) (v2773@syntax-dispatch v5429@t '((#(scheme-id mutable) . _) . any)))) v5425@t))) (v2773@syntax-dispatch v5425@t '()))) v5421@fields)))) v5419@f) v5417@fields '0))) (set! v5210@get-mutators (lambda (v5375@foo v5376@fields) ((lambda (v5380@gen-name) (begin (set! v5380@gen-name (lambda (v5415@x) (v3010@datum->syntax v5375@foo (string->symbol (string-append (symbol->string (v3012@syntax->datum v5375@foo)) '"-" (symbol->string (v3012@syntax->datum v5415@x)) '"-set!"))))) ((letrec ((v5381@f (lambda (v5383@fields) ((lambda (v5385@t) ((lambda (v5387@ls/false) (if v5387@ls/false (apply (lambda () '()) v5387@ls/false) ((lambda (v5389@t) ((lambda (v5391@ls/false) (if v5391@ls/false (apply (lambda (v5393@name v5394@accessor v5395@mutator v5396@rest) (cons v5395@mutator (v5381@f v5396@rest))) v5391@ls/false) ((lambda (v5401@t) ((lambda (v5403@ls/false) (if v5403@ls/false (apply (lambda (v5405@name v5406@rest) (cons (v5380@gen-name v5405@name) (v5381@f v5406@rest))) v5403@ls/false) ((lambda (v5409@t) ((lambda (v5411@ls/false) (if v5411@ls/false (apply (lambda (v5413@rest) (v5381@f v5413@rest)) v5411@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5409@t))) (v2773@syntax-dispatch v5409@t '(_ . any)))) v5401@t))) (v2773@syntax-dispatch v5401@t '((#(scheme-id mutable) any) . any)))) v5389@t))) (v2773@syntax-dispatch v5389@t '((#(scheme-id mutable) any any any) . any)))) v5385@t))) (v2773@syntax-dispatch v5385@t '()))) v5383@fields)))) v5381@f) v5376@fields))) '#f))) (set! v5212@get-accessors (lambda (v5307@foo v5308@fields) ((lambda (v5312@gen-name) (begin (set! v5312@gen-name (lambda (v5373@x) (v3010@datum->syntax v5307@foo (string->symbol (string-append (symbol->string (v3012@syntax->datum v5307@foo)) '"-" (symbol->string (v3012@syntax->datum v5373@x))))))) (map (lambda (v5313@field) ((lambda (v5315@t) ((lambda (v5317@ls/false) (if (and v5317@ls/false (apply (lambda (v5319@name v5320@accessor v5321@mutator) (v2276@id? v5320@accessor)) v5317@ls/false)) (apply (lambda (v5325@name v5326@accessor v5327@mutator) v5326@accessor) v5317@ls/false) ((lambda (v5331@t) ((lambda (v5333@ls/false) (if (and v5333@ls/false (apply (lambda (v5335@name v5336@accessor) (v2276@id? v5336@accessor)) v5333@ls/false)) (apply (lambda (v5339@name v5340@accessor) v5340@accessor) v5333@ls/false) ((lambda (v5343@t) ((lambda (v5345@ls/false) (if (and v5345@ls/false (apply (lambda (v5347@name) (v2276@id? v5347@name)) v5345@ls/false)) (apply (lambda (v5349@name) (v5312@gen-name v5349@name)) v5345@ls/false) ((lambda (v5351@t) ((lambda (v5353@ls/false) (if (and v5353@ls/false (apply (lambda (v5355@name) (v2276@id? v5355@name)) v5353@ls/false)) (apply (lambda (v5357@name) (v5312@gen-name v5357@name)) v5353@ls/false) ((lambda (v5359@t) ((lambda (v5361@ls/false) (if (and v5361@ls/false (apply (lambda (v5363@name) (v2276@id? v5363@name)) v5361@ls/false)) (apply (lambda (v5365@name) (v5312@gen-name v5365@name)) v5361@ls/false) ((lambda (v5367@t) ((lambda (v5369@ls/false) (if v5369@ls/false (apply (lambda (v5371@others) (v3006@syntax-violation '#f '"invalid field spec" v5313@field)) v5369@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5367@t))) (v2773@syntax-dispatch v5367@t 'any))) v5359@t))) (v2773@syntax-dispatch v5359@t 'any))) v5351@t))) (v2773@syntax-dispatch v5351@t '(#(scheme-id immutable) any)))) v5343@t))) (v2773@syntax-dispatch v5343@t '(#(scheme-id mutable) any)))) v5331@t))) (v2773@syntax-dispatch v5331@t '(#(scheme-id immutable) any any)))) v5315@t))) (v2773@syntax-dispatch v5315@t '(#(scheme-id mutable) any any any)))) v5313@field)) v5308@fields))) '#f))) (set! v5214@enumerate (lambda (v5299@ls) ((letrec ((v5301@f (lambda (v5303@ls v5304@i) (if (null? v5303@ls) '() (cons v5304@i (v5301@f (cdr v5303@ls) (+ v5304@i '1))))))) v5301@f) v5299@ls '0))) (set! v5216@do-define-record (lambda (v5259@namespec v5260@clause*) ((lambda (v5263@foo) ((lambda (v5265@foo-rtd) ((lambda (v5267@foo-rcd) ((lambda (v5269@protocol) ((lambda (v5271@make-foo) ((lambda (v5273@fields) ((lambda (v5275@idx*) ((lambda (v5277@foo-x*) ((lambda (v5279@set-foo-x!*) ((lambda (v5281@set-foo-idx*) ((lambda (v5283@foo?) ((lambda (v5285@foo-rtd-code) ((lambda (v5287@foo-rcd-code) ((lambda (v5289@protocol-code) ((lambda () (v2699@bless (cons 'begin (cons (list 'define v5265@foo-rtd v5285@foo-rtd-code) (cons (list 'define v5269@protocol v5289@protocol-code) (cons (list 'define v5267@foo-rcd v5287@foo-rcd-code) (cons (list 'define-syntax v5263@foo (list 'list ''$rtd (list 'syntax v5265@foo-rtd) (list 'syntax v5267@foo-rcd))) (cons (list 'define v5283@foo? (list 'record-predicate v5265@foo-rtd)) (cons (list 'define v5271@make-foo (list 'record-constructor v5267@foo-rcd)) (append (map (lambda (v5291@foo-x v5292@idx) (list 'define v5291@foo-x (list 'record-accessor v5265@foo-rtd v5292@idx))) v5277@foo-x* v5275@idx*) (map (lambda (v5295@set-foo-x! v5296@idx) (list 'define v5295@set-foo-x! (list 'record-mutator v5265@foo-rtd v5296@idx))) v5279@set-foo-x!* v5281@set-foo-idx*))))))))))))) (v5204@get-protocol-code v5260@clause*))) (v5202@foo-rcd-code v5260@clause* v5265@foo-rtd v5269@protocol (v5200@parent-rcd-code v5260@clause*)))) (v5196@foo-rtd-code v5263@foo v5260@clause* (v5198@parent-rtd-code v5260@clause*)))) (v5192@get-record-predicate-name v5259@namespec))) (v5208@get-mutator-indices v5273@fields))) (v5210@get-mutators v5263@foo v5273@fields))) (v5212@get-accessors v5263@foo v5273@fields))) (v5214@enumerate v5273@fields))) (v5206@get-fields v5260@clause*))) (v5190@get-record-constructor-name v5259@namespec))) (v1160@v924@gensym))) (v1160@v924@gensym))) (v1160@v924@gensym))) (v5188@get-record-name v5259@namespec)))) (set! v5218@verify-clauses (lambda (v5227@x v5228@cls*) ((lambda (v5232@valid-kwds v5234@free-id-member?) (begin (set! v5232@valid-kwds (map v2699@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! v5234@free-id-member? (lambda (v5255@x v5256@ls) (and (pair? v5256@ls) (or (v2284@free-id=? v5255@x (car v5256@ls)) (v5234@free-id-member? v5255@x (cdr v5256@ls)))))) ((letrec ((v5235@f (lambda (v5237@cls* v5238@seen*) (if (not (null? v5237@cls*)) ((lambda (v5241@t) ((lambda (v5243@ls/false) (if v5243@ls/false (apply (lambda (v5245@kwd v5246@rest) (if (or (not (v2276@id? v5245@kwd)) (not (v5234@free-id-member? v5245@kwd v5232@valid-kwds))) (v3006@syntax-violation '#f '"not a valid define-record-type keyword" v5245@kwd) (if (v2290@bound-id-member? v5245@kwd v5238@seen*) (v3006@syntax-violation '#f '"duplicate use of keyword " v5227@x v5245@kwd) (v5235@f (cdr v5237@cls*) (cons v5245@kwd v5238@seen*))))) v5243@ls/false) ((lambda (v5249@t) ((lambda (v5251@ls/false) (if v5251@ls/false (apply (lambda (v5253@cls) (v3006@syntax-violation '#f '"malformed define-record-type clause" v5253@cls)) v5251@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5249@t))) (v2773@syntax-dispatch v5249@t 'any))) v5241@t))) (v2773@syntax-dispatch v5241@t '(any . any)))) (car v5237@cls*)) (void))))) v5235@f) v5228@cls* '()))) '#f '#f))) ((lambda (v5219@t) ((lambda (v5221@ls/false) (if v5221@ls/false (apply (lambda (v5223@namespec v5224@clause*) (begin (v5218@verify-clauses v5183@x v5224@clause*) (v5216@do-define-record v5223@namespec v5224@clause*))) v5221@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5219@t))) (v2773@syntax-dispatch v5219@t '(_ any . each-any)))) v5183@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! v2763@define-condition-type-macro (lambda (v5691@x) ((lambda (v5694@mkname) (begin (set! v5694@mkname (lambda (v5739@name v5740@suffix) (v3010@datum->syntax v5739@name (string->symbol (string-append (symbol->string (v3012@syntax->datum v5739@name)) v5740@suffix))))) ((lambda (v5695@t) ((lambda (v5697@ls/false) (if (and v5697@ls/false (apply (lambda (v5699@ctxt v5700@name v5701@super v5702@constructor v5703@predicate v5704@field* v5705@accessor*) (and (v2276@id? v5700@name) (v2276@id? v5701@super) (v2276@id? v5702@constructor) (v2276@id? v5703@predicate) (for-all v2276@id? v5704@field*) (for-all v2276@id? v5705@accessor*))) v5697@ls/false)) (apply (lambda (v5713@ctxt v5714@name v5715@super v5716@constructor v5717@predicate v5718@field* v5719@accessor*) ((lambda (v5727@aux-accessor*) (v2699@bless (cons 'begin (cons (cons 'define-record-type (cons (list v5714@name v5716@constructor (v1160@v924@gensym)) (cons (list 'parent v5715@super) (cons (cons 'fields (map (lambda (v5729@field v5730@aux) (list 'immutable v5729@field v5730@aux)) v5718@field* v5727@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define v5717@predicate (list 'condition-predicate (list 'record-type-descriptor v5714@name))) (map (lambda (v5733@accessor v5734@aux) (list 'define v5733@accessor (list 'condition-accessor (list 'record-type-descriptor v5714@name) v5734@aux))) v5719@accessor* v5727@aux-accessor*)))))) (map (lambda (v5737@x) (v1160@v924@gensym)) v5719@accessor*))) v5697@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5695@t))) (v2773@syntax-dispatch v5695@t '(any any any any any . #(each (any any)))))) v5691@x))) '#f))) (set! v2765@incorrect-usage-macro (lambda (v5743@e) (v3006@syntax-violation '#f '"incorrect usage of auxiliary keyword" v5743@e))) (set! v2767@parameterize-macro (lambda (v5745@e) ((lambda (v5747@t) ((lambda (v5749@ls/false) (if v5749@ls/false (apply (lambda (v5751@b v5752@b*) (v2699@bless (cons 'let (cons '() (cons v5751@b v5752@b*))))) v5749@ls/false) ((lambda (v5755@t) ((lambda (v5757@ls/false) (if v5757@ls/false (apply (lambda (v5759@olhs* v5760@orhs* v5761@b v5762@b*) ((lambda (v5767@lhs* v5768@rhs*) (v2699@bless (cons (list 'lambda (append v5767@lhs* v5768@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (v5771@lhs v5772@rhs) (list 'let (list (list 't (list v5771@lhs))) (list v5771@lhs v5772@rhs) (cons 'set! (cons v5772@rhs '(t))))) v5767@lhs* v5768@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons v5761@b v5762@b*))) '(swap)))))) (append v5759@olhs* v5760@orhs*)))) (v2988@generate-temporaries v5759@olhs*) (v2988@generate-temporaries v5760@orhs*))) v5757@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5755@t))) (v2773@syntax-dispatch v5755@t '(_ #(each (any any)) any . each-any)))) v5747@t))) (v2773@syntax-dispatch v5747@t '(_ () any . each-any)))) v5745@e))) (set! v2769@foreign-call-transformer (lambda (v5775@e v5776@r v5777@mr) ((lambda (v5781@t) ((lambda (v5783@ls/false) (if v5783@ls/false (apply (lambda (v5785@name v5786@arg*) (cons 'foreign-call (cons (v2807@chi-expr v5785@name v5776@r v5777@mr) (v2803@chi-expr* v5786@arg* v5776@r v5777@mr)))) v5783@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5781@t))) (v2773@syntax-dispatch v5781@t '(_ any . each-any)))) v5775@e))) (set! v2771@convert-pattern (lambda (v5789@pattern v5790@keys) ((lambda (v5794@cvt* v5796@cvt) (begin (set! v5794@cvt* (lambda (v5939@p* v5940@n v5941@ids) (if (null? v5939@p*) (values '() v5941@ids) (call-with-values (lambda () (v5794@cvt* (cdr v5939@p*) v5940@n v5941@ids)) (lambda (v5947@v5945@y v5948@v5946@ids) ((lambda (v5951@ids v5952@y) (call-with-values (lambda () (v5796@cvt (car v5939@p*) v5940@n v5951@ids)) (lambda (v5957@v5955@x v5958@v5956@ids) ((lambda (v5961@ids v5962@x) (values (cons v5962@x v5952@y) v5961@ids)) v5958@v5956@ids v5957@v5955@x)))) v5948@v5946@ids v5947@v5945@y)))))) (set! v5796@cvt (lambda (v5797@p v5798@n v5799@ids) ((lambda (v5803@t) ((lambda (v5805@ls/false) (if (and v5805@ls/false (apply (lambda (v5807@id) (v2276@id? v5807@id)) v5805@ls/false)) (apply (lambda (v5809@id) (if (v2290@bound-id-member? v5797@p v5790@keys) (values (vector 'free-id v5797@p) v5799@ids) (if (v2284@free-id=? v5797@p (v2655@scheme-stx '_)) (values '_ v5799@ids) (values 'any (cons (cons v5797@p v5798@n) v5799@ids))))) v5805@ls/false) ((lambda (v5811@t) ((lambda (v5813@ls/false) (if (and v5813@ls/false (apply (lambda (v5815@p v5816@dots) (v2775@ellipsis? v5816@dots)) v5813@ls/false)) (apply (lambda (v5819@p v5820@dots) (call-with-values (lambda () (v5796@cvt v5819@p (+ v5798@n '1) v5799@ids)) (lambda (v5825@v5823@p v5826@v5824@ids) ((lambda (v5829@ids v5830@p) (values (if (eq? v5830@p 'any) 'each-any (vector 'each v5830@p)) v5829@ids)) v5826@v5824@ids v5825@v5823@p)))) v5813@ls/false) ((lambda (v5833@t) ((lambda (v5835@ls/false) (if (and v5835@ls/false (apply (lambda (v5837@x v5838@dots v5839@ys v5840@z) (v2775@ellipsis? v5838@dots)) v5835@ls/false)) (apply (lambda (v5845@x v5846@dots v5847@ys v5848@z) (call-with-values (lambda () (v5796@cvt v5848@z v5798@n v5799@ids)) (lambda (v5855@v5853@z v5856@v5854@ids) ((lambda (v5859@ids v5860@z) (call-with-values (lambda () (v5794@cvt* v5847@ys v5798@n v5859@ids)) (lambda (v5865@v5863@ys v5866@v5864@ids) ((lambda (v5869@ids v5870@ys) (call-with-values (lambda () (v5796@cvt v5845@x (+ v5798@n '1) v5869@ids)) (lambda (v5875@v5873@x v5876@v5874@ids) ((lambda (v5879@ids v5880@x) (values (vector 'each+ v5880@x (reverse v5870@ys) v5860@z) v5879@ids)) v5876@v5874@ids v5875@v5873@x)))) v5866@v5864@ids v5865@v5863@ys)))) v5856@v5854@ids v5855@v5853@z)))) v5835@ls/false) ((lambda (v5883@t) ((lambda (v5885@ls/false) (if v5885@ls/false (apply (lambda (v5887@x v5888@y) (call-with-values (lambda () (v5796@cvt v5888@y v5798@n v5799@ids)) (lambda (v5893@v5891@y v5894@v5892@ids) ((lambda (v5897@ids v5898@y) (call-with-values (lambda () (v5796@cvt v5887@x v5798@n v5897@ids)) (lambda (v5903@v5901@x v5904@v5902@ids) ((lambda (v5907@ids v5908@x) (values (cons v5908@x v5898@y) v5907@ids)) v5904@v5902@ids v5903@v5901@x)))) v5894@v5892@ids v5893@v5891@y)))) v5885@ls/false) ((lambda (v5911@t) ((lambda (v5913@ls/false) (if v5913@ls/false (apply (lambda () (values '() v5799@ids)) v5913@ls/false) ((lambda (v5915@t) ((lambda (v5917@ls/false) (if (and v5917@ls/false (apply (lambda (v5919@p) (not (v2220@stx? v5919@p))) v5917@ls/false)) (apply (lambda (v5921@p) (call-with-values (lambda () (v5796@cvt v5921@p v5798@n v5799@ids)) (lambda (v5925@v5923@p v5926@v5924@ids) ((lambda (v5929@ids v5930@p) (values (vector 'vector v5930@p) v5929@ids)) v5926@v5924@ids v5925@v5923@p)))) v5917@ls/false) ((lambda (v5933@t) ((lambda (v5935@ls/false) (if v5935@ls/false (apply (lambda (v5937@datum) (values (vector 'atom (v2298@stx->datum v5937@datum)) v5799@ids)) v5935@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v5933@t))) (v2773@syntax-dispatch v5933@t 'any))) v5915@t))) (v2773@syntax-dispatch v5915@t '#(vector each-any)))) v5911@t))) (v2773@syntax-dispatch v5911@t '()))) v5883@t))) (v2773@syntax-dispatch v5883@t '(any . any)))) v5833@t))) (v2773@syntax-dispatch v5833@t '(any any . #(each+ any () any))))) v5811@t))) (v2773@syntax-dispatch v5811@t '(any any)))) v5803@t))) (v2773@syntax-dispatch v5803@t 'any))) v5797@p))) (v5796@cvt v5789@pattern '0 '()))) '#f '#f))) (set! v2773@syntax-dispatch ((lambda () ((lambda (v5966@stx^ v5968@match-each v5970@match-each+ v5972@match-each-any v5974@match-empty v5976@combine v5978@match* v5980@match) (begin (set! v5966@stx^ (lambda (v6167@e v6168@m* v6169@s* v6170@ae*) (if (and (null? v6168@m*) (null? v6169@s*) (null? v6170@ae*)) v6167@e (v2252@mkstx v6167@e v6168@m* v6169@s* v6170@ae*)))) (set! v5968@match-each (lambda (v6138@e v6139@p v6140@m* v6141@s* v6142@ae*) (if (pair? v6138@e) ((lambda (v6148@first) (and v6148@first ((lambda (v6150@rest) (and v6150@rest (cons v6148@first v6150@rest))) (v5968@match-each (cdr v6138@e) v6139@p v6140@m* v6141@s* v6142@ae*)))) (v5980@match (car v6138@e) v6139@p v6140@m* v6141@s* v6142@ae* '())) (if (null? v6138@e) '() (if (v2220@stx? v6138@e) (and (not (v2146@top-marked? v6140@m*)) (call-with-values (lambda () (v2250@join-wraps v6140@m* v6141@s* v6142@ae* v6138@e)) (lambda (v6155@v6152@m* v6156@v6153@s* v6157@v6154@ae*) ((lambda (v6161@ae* v6162@s* v6163@m*) (v5968@match-each (v2224@stx-expr v6138@e) v6139@p v6163@m* v6162@s* v6161@ae*)) v6157@v6154@ae* v6156@v6153@s* v6155@v6152@m*)))) (if (v1163@v930@annotation? v6138@e) (v5968@match-each (v1165@v934@annotation-expression v6138@e) v6139@p v6140@m* v6141@s* v6142@ae*) '#f)))))) (set! v5970@match-each+ (lambda (v6080@e v6081@x-pat v6082@y-pat v6083@z-pat v6084@m* v6085@s* v6086@ae* v6087@r) ((letrec ((v6096@f (lambda (v6098@e v6099@m* v6100@s* v6101@ae*) (if (pair? v6098@e) (call-with-values (lambda () (v6096@f (cdr v6098@e) v6099@m* v6100@s* v6101@ae*)) (lambda (v6109@v6106@xr* v6110@v6107@y-pat v6111@v6108@r) ((lambda (v6115@r v6116@y-pat v6117@xr*) (if v6115@r (if (null? v6116@y-pat) ((lambda (v6121@xr) (if v6121@xr (values (cons v6121@xr v6117@xr*) v6116@y-pat v6115@r) (values '#f '#f '#f))) (v5980@match (car v6098@e) v6081@x-pat v6099@m* v6100@s* v6101@ae* '())) (values '() (cdr v6116@y-pat) (v5980@match (car v6098@e) (car v6116@y-pat) v6099@m* v6100@s* v6101@ae* v6115@r))) (values '#f '#f '#f))) v6111@v6108@r v6110@v6107@y-pat v6109@v6106@xr*))) (if (v2220@stx? v6098@e) (if (v2146@top-marked? v6099@m*) (values '() v6082@y-pat (v5980@match v6098@e v6083@z-pat v6099@m* v6100@s* v6101@ae* v6087@r)) (call-with-values (lambda () (v2250@join-wraps v6099@m* v6100@s* v6101@ae* v6098@e)) (lambda (v6126@v6123@m* v6127@v6124@s* v6128@v6125@ae*) ((lambda (v6132@ae* v6133@s* v6134@m*) (v6096@f (v2224@stx-expr v6098@e) v6134@m* v6133@s* v6132@ae*)) v6128@v6125@ae* v6127@v6124@s* v6126@v6123@m*)))) (if (v1163@v930@annotation? v6098@e) (v6096@f (v1165@v934@annotation-expression v6098@e) v6099@m* v6100@s* v6101@ae*) (values '() v6082@y-pat (v5980@match v6098@e v6083@z-pat v6099@m* v6100@s* v6101@ae* v6087@r)))))))) v6096@f) v6080@e v6084@m* v6085@s* v6086@ae*))) (set! v5972@match-each-any (lambda (v6055@e v6056@m* v6057@s* v6058@ae*) (if (pair? v6055@e) ((lambda (v6063@l) (and v6063@l (cons (v5966@stx^ (car v6055@e) v6056@m* v6057@s* v6058@ae*) v6063@l))) (v5972@match-each-any (cdr v6055@e) v6056@m* v6057@s* v6058@ae*)) (if (null? v6055@e) '() (if (v2220@stx? v6055@e) (and (not (v2146@top-marked? v6056@m*)) (call-with-values (lambda () (v2250@join-wraps v6056@m* v6057@s* v6058@ae* v6055@e)) (lambda (v6068@v6065@m* v6069@v6066@s* v6070@v6067@ae*) ((lambda (v6074@ae* v6075@s* v6076@m*) (v5972@match-each-any (v2224@stx-expr v6055@e) v6076@m* v6075@s* v6074@ae*)) v6070@v6067@ae* v6069@v6066@s* v6068@v6065@m*)))) (if (v1163@v930@annotation? v6055@e) (v5972@match-each-any (v1165@v934@annotation-expression v6055@e) v6056@m* v6057@s* v6058@ae*) '#f)))))) (set! v5974@match-empty (lambda (v6049@p v6050@r) (if (null? v6049@p) v6050@r (if (eq? v6049@p '_) v6050@r (if (eq? v6049@p 'any) (cons '() v6050@r) (if (pair? v6049@p) (v5974@match-empty (car v6049@p) (v5974@match-empty (cdr v6049@p) v6050@r)) (if (eq? v6049@p 'each-any) (cons '() v6050@r) ((lambda (v6053@t) (if (memv v6053@t '(each)) (v5974@match-empty (vector-ref v6049@p '1) v6050@r) (if (memv v6053@t '(each+)) (v5974@match-empty (vector-ref v6049@p '1) (v5974@match-empty (reverse (vector-ref v6049@p '2)) (v5974@match-empty (vector-ref v6049@p '3) v6050@r))) (if (memv v6053@t '(free-id atom)) v6050@r (if (memv v6053@t '(scheme-id atom)) v6050@r (if (memv v6053@t '(vector)) (v5974@match-empty (vector-ref v6049@p '1) v6050@r) (assertion-violation 'syntax-dispatch '"invalid pattern" v6049@p))))))) (vector-ref v6049@p '0))))))))) (set! v5976@combine (lambda (v6045@r* v6046@r) (if (null? (car v6045@r*)) v6046@r (cons (map car v6045@r*) (v5976@combine (map cdr v6045@r*) v6046@r))))) (set! v5978@match* (lambda (v6012@e v6013@p v6014@m* v6015@s* v6016@ae* v6017@r) (if (null? v6013@p) (and (null? v6012@e) v6017@r) (if (pair? v6013@p) (and (pair? v6012@e) (v5980@match (car v6012@e) (car v6013@p) v6014@m* v6015@s* v6016@ae* (v5980@match (cdr v6012@e) (cdr v6013@p) v6014@m* v6015@s* v6016@ae* v6017@r))) (if (eq? v6013@p 'each-any) ((lambda (v6024@l) (and v6024@l (cons v6024@l v6017@r))) (v5972@match-each-any v6012@e v6014@m* v6015@s* v6016@ae*)) ((lambda (v6026@t) (if (memv v6026@t '(each)) (if (null? v6012@e) (v5974@match-empty (vector-ref v6013@p '1) v6017@r) ((lambda (v6028@r*) (and v6028@r* (v5976@combine v6028@r* v6017@r))) (v5968@match-each v6012@e (vector-ref v6013@p '1) v6014@m* v6015@s* v6016@ae*))) (if (memv v6026@t '(free-id)) (and (symbol? v6012@e) (v2146@top-marked? v6014@m*) (v2284@free-id=? (v5966@stx^ v6012@e v6014@m* v6015@s* v6016@ae*) (vector-ref v6013@p '1)) v6017@r) (if (memv v6026@t '(scheme-id)) (and (symbol? v6012@e) (v2146@top-marked? v6014@m*) (v2284@free-id=? (v5966@stx^ v6012@e v6014@m* v6015@s* v6016@ae*) (v2655@scheme-stx (vector-ref v6013@p '1))) v6017@r) (if (memv v6026@t '(each+)) (call-with-values (lambda () (v5970@match-each+ v6012@e (vector-ref v6013@p '1) (vector-ref v6013@p '2) (vector-ref v6013@p '3) v6014@m* v6015@s* v6016@ae* v6017@r)) (lambda (v6033@v6030@xr* v6034@v6031@y-pat v6035@v6032@r) ((lambda (v6039@r v6040@y-pat v6041@xr*) (and v6039@r (null? v6040@y-pat) (if (null? v6041@xr*) (v5974@match-empty (vector-ref v6013@p '1) v6039@r) (v5976@combine v6041@xr* v6039@r)))) v6035@v6032@r v6034@v6031@y-pat v6033@v6030@xr*))) (if (memv v6026@t '(atom)) (and (fast-equal? (vector-ref v6013@p '1) (v2296@strip v6012@e v6014@m*)) v6017@r) (if (memv v6026@t '(vector)) (and (vector? v6012@e) (v5980@match (vector->list v6012@e) (vector-ref v6013@p '1) v6014@m* v6015@s* v6016@ae* v6017@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" v6013@p)))))))) (vector-ref v6013@p '0))))))) (set! v5980@match (lambda (v5985@e v5986@p v5987@m* v5988@s* v5989@ae* v5990@r) (if (not v5990@r) '#f (if (eq? v5986@p '_) v5990@r (if (eq? v5986@p 'any) (cons (v5966@stx^ v5985@e v5987@m* v5988@s* v5989@ae*) v5990@r) (if (v2220@stx? v5985@e) (and (not (v2146@top-marked? v5987@m*)) (call-with-values (lambda () (v2250@join-wraps v5987@m* v5988@s* v5989@ae* v5985@e)) (lambda (v6000@v5997@m* v6001@v5998@s* v6002@v5999@ae*) ((lambda (v6006@ae* v6007@s* v6008@m*) (v5980@match (v2224@stx-expr v5985@e) v5986@p v6008@m* v6007@s* v6006@ae* v5990@r)) v6002@v5999@ae* v6001@v5998@s* v6000@v5997@m*)))) (if (v1163@v930@annotation? v5985@e) (v5980@match (v1165@v934@annotation-expression v5985@e) v5986@p v5987@m* v5988@s* v5989@ae* v5990@r) (v5978@match* v5985@e v5986@p v5987@m* v5988@s* v5989@ae* v5990@r)))))))) (lambda (v5981@e v5982@p) (v5980@match v5981@e v5982@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! v2775@ellipsis? (lambda (v6175@x) (and (v2276@id? v6175@x) (v2284@free-id=? v6175@x (v2655@scheme-stx '...))))) (set! v2777@underscore? (lambda (v6177@x) (and (v2276@id? v6177@x) (v2284@free-id=? v6177@x (v2655@scheme-stx '_))))) (set! v2779@verify-literals (lambda (v6179@lits v6180@expr) (for-each (lambda (v6183@x) (if (or (not (v2276@id? v6183@x)) (v2775@ellipsis? v6183@x) (v2777@underscore? v6183@x)) (v3006@syntax-violation '#f '"invalid literal" v6180@expr v6183@x) (void))) v6179@lits))) (set! v2781@syntax-case-transformer ((lambda () ((lambda (v6186@build-dispatch-call v6188@invalid-ids-error v6190@gen-clause v6192@gen-syntax-case) (begin (set! v6186@build-dispatch-call (lambda (v6297@pvars v6298@expr v6299@y v6300@r v6301@mr) ((lambda (v6307@ids v6308@levels) ((lambda (v6311@labels v6312@new-vars) ((lambda (v6315@body) (list '(primitive apply) (v2112@v1922@build-lambda '#f v6312@new-vars v6315@body) v6299@y)) (v2807@chi-expr (v2256@add-subst (v2207@make-full-rib v6307@ids v6311@labels) v6298@expr) (append (map (lambda (v6317@label v6318@var v6319@level) (cons v6317@label (v2308@make-binding 'syntax (cons v6318@var v6319@level)))) v6311@labels v6312@new-vars (map cdr v6297@pvars)) v6300@r) v6301@mr))) (map v2152@gen-label v6307@ids) (map v2148@gen-lexical v6307@ids))) (map car v6297@pvars) (map cdr v6297@pvars)))) (set! v6188@invalid-ids-error (lambda (v6285@id* v6286@e v6287@class) ((letrec ((v6291@find (lambda (v6293@id* v6294@ok*) (if (null? v6293@id*) (v3006@syntax-violation '#f '"invalid syntax" v6286@e) (if (v2276@id? (car v6293@id*)) (if (v2290@bound-id-member? (car v6293@id*) v6294@ok*) (v3002@syntax-error (car v6293@id*) '"duplicate " v6287@class) (v6291@find (cdr v6293@id*) (cons (car v6293@id*) v6294@ok*))) (v3002@syntax-error (car v6293@id*) '"invalid " v6287@class)))))) v6291@find) v6285@id* '()))) (set! v6190@gen-clause (lambda (v6247@x v6248@keys v6249@clauses v6250@r v6251@mr v6252@pat v6253@fender v6254@expr) (call-with-values (lambda () (v2771@convert-pattern v6252@pat v6248@keys)) (lambda (v6265@v6263@p v6266@v6264@pvars) ((lambda (v6269@pvars v6270@p) (if (not (v2288@distinct-bound-ids? (map car v6269@pvars))) (v6188@invalid-ids-error (map car v6269@pvars) v6252@pat '"pattern variable") (if (not (for-all (lambda (v6273@x) (not (v2775@ellipsis? (car v6273@x)))) v6269@pvars)) (v3006@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" v6252@pat) ((lambda (v6275@y) ((lambda (v6277@test) ((lambda (v6279@conseq) ((lambda (v6281@altern) (list (v2112@v1922@build-lambda '#f (list v6275@y) (list 'if v6277@test v6279@conseq v6281@altern)) (list '(primitive syntax-dispatch) v6247@x (list 'quote v6270@p)))) (v6192@gen-syntax-case v6247@x v6248@keys v6249@clauses v6250@r v6251@mr))) (v6186@build-dispatch-call v6269@pvars v6254@expr v6275@y v6250@r v6251@mr))) (if (eq? v6253@fender '#t) v6275@y ((lambda (v6283@call) (list 'if v6275@y v6283@call (list 'quote '#f))) (v6186@build-dispatch-call v6269@pvars v6253@fender v6275@y v6250@r v6251@mr))))) (v2148@gen-lexical 'tmp))))) v6266@v6264@pvars v6265@v6263@p))))) (set! v6192@gen-syntax-case (lambda (v6213@x v6214@keys v6215@clauses v6216@r v6217@mr) (if (null? v6215@clauses) (list '(primitive syntax-error) v6213@x) ((lambda (v6223@t) ((lambda (v6225@ls/false) (if v6225@ls/false (apply (lambda (v6227@pat v6228@expr) (if (and (v2276@id? v6227@pat) (not (v2290@bound-id-member? v6227@pat v6214@keys)) (not (v2775@ellipsis? v6227@pat))) (if (v2284@free-id=? v6227@pat (v2655@scheme-stx '_)) (v2807@chi-expr v6228@expr v6216@r v6217@mr) ((lambda (v6231@lab v6232@lex) ((lambda (v6235@body) (list (v2112@v1922@build-lambda '#f (list v6232@lex) v6235@body) v6213@x)) (v2807@chi-expr (v2256@add-subst (v2207@make-full-rib (list v6227@pat) (list v6231@lab)) v6228@expr) (cons (cons v6231@lab (v2308@make-binding 'syntax (cons v6232@lex '0))) v6216@r) v6217@mr))) (v2152@gen-label v6227@pat) (v2148@gen-lexical v6227@pat))) (v6190@gen-clause v6213@x v6214@keys (cdr v6215@clauses) v6216@r v6217@mr v6227@pat '#t v6228@expr))) v6225@ls/false) ((lambda (v6237@t) ((lambda (v6239@ls/false) (if v6239@ls/false (apply (lambda (v6241@pat v6242@fender v6243@expr) (v6190@gen-clause v6213@x v6214@keys (cdr v6215@clauses) v6216@r v6217@mr v6241@pat v6242@fender v6243@expr)) v6239@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v6237@t))) (v2773@syntax-dispatch v6237@t '(any any any)))) v6223@t))) (v2773@syntax-dispatch v6223@t '(any any)))) (car v6215@clauses))))) (lambda (v6193@e v6194@r v6195@mr) ((lambda (v6199@t) ((lambda (v6201@ls/false) (if v6201@ls/false (apply (lambda (v6203@expr v6204@keys v6205@clauses) (begin (v2779@verify-literals v6204@keys v6193@e) ((lambda (v6209@x) ((lambda (v6211@body) (list (v2112@v1922@build-lambda '#f (list v6209@x) v6211@body) (v2807@chi-expr v6203@expr v6194@r v6195@mr))) (v6192@gen-syntax-case v6209@x v6204@keys v6205@clauses v6194@r v6195@mr))) (v2148@gen-lexical 'tmp)))) v6201@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v6199@t))) (v2773@syntax-dispatch v6199@t '(_ any each-any . each-any)))) v6193@e)))) '#f '#f '#f '#f)))) (set! v2783@ellipsis-map (lambda (v6323@proc v6324@ls . v6327@ls*) ((lambda (v6330@who) (begin (set! v6330@who '...) (begin (if (not (list? v6324@ls)) (assertion-violation v6330@who '"not a list" v6324@ls) (void)) (if (not (null? v6327@ls*)) ((lambda (v6331@n) (for-each (lambda (v6333@x) (begin (if (not (list? v6333@x)) (assertion-violation v6330@who '"not a list" v6333@x) (void)) (if (not (= (length v6333@x) v6331@n)) (assertion-violation v6330@who '"length mismatch" v6324@ls v6333@x) (void)))) v6327@ls*)) (length v6324@ls)) (void)) (apply map v6323@proc v6324@ls v6327@ls*)))) '#f))) (set! v2785@syntax-transformer ((lambda () ((lambda (v6336@gen-syntax v6338@gen-ref v6340@gen-append v6342@gen-mappend v6344@gen-map v6346@gen-cons v6348@gen-vector v6350@regen) (begin (set! v6336@gen-syntax (lambda (v6451@src v6452@e v6453@r v6454@maps v6455@ellipsis? v6456@vec?) ((lambda (v6463@t) ((lambda (v6465@ls/false) (if (and v6465@ls/false (apply (lambda (v6467@dots) (v6455@ellipsis? v6467@dots)) v6465@ls/false)) (apply (lambda (v6469@dots) (v3006@syntax-violation '#f '"misplaced ellipsis in syntax form" v6451@src)) v6465@ls/false) ((lambda (v6471@t) ((lambda (v6473@ls/false) (if (and v6473@ls/false (apply (lambda (v6475@id) (v2276@id? v6475@id)) v6473@ls/false)) (apply (lambda (v6477@id) ((lambda (v6479@label) ((lambda (v6481@b) ((lambda () (if (eq? (v2310@binding-type v6481@b) 'syntax) (call-with-values (lambda () ((lambda (v6485@var.lev) (v6338@gen-ref v6451@src (car v6485@var.lev) (cdr v6485@var.lev) v6454@maps)) (v2312@binding-value v6481@b))) (lambda (v6487@v6483@var v6488@v6484@maps) ((lambda (v6491@maps v6492@var) (values (list 'ref v6492@var) v6491@maps)) v6488@v6484@maps v6487@v6483@var))) (values (list 'quote v6452@e) v6454@maps))))) (v2306@label->binding v6479@label v6453@r))) (v2302@id->label v6452@e))) v6473@ls/false) ((lambda (v6495@t) ((lambda (v6497@ls/false) (if (and v6497@ls/false (apply (lambda (v6499@dots v6500@e) (v6455@ellipsis? v6499@dots)) v6497@ls/false)) (apply (lambda (v6503@dots v6504@e) (if v6456@vec? (v3006@syntax-violation '#f '"misplaced ellipsis in syntax form" v6451@src) (v6336@gen-syntax v6451@src v6504@e v6453@r v6454@maps (lambda (v6507@x) '#f) '#f))) v6497@ls/false) ((lambda (v6509@t) ((lambda (v6511@ls/false) (if (and v6511@ls/false (apply (lambda (v6513@x v6514@dots v6515@y) (v6455@ellipsis? v6514@dots)) v6511@ls/false)) (apply (lambda (v6519@x v6520@dots v6521@y) ((letrec ((v6525@f (lambda (v6527@y v6528@k) ((lambda (v6531@t) ((lambda (v6533@ls/false) (if v6533@ls/false (apply (lambda () (v6528@k v6454@maps)) v6533@ls/false) ((lambda (v6535@t) ((lambda (v6537@ls/false) (if (and v6537@ls/false (apply (lambda (v6539@dots v6540@y) (v6455@ellipsis? v6539@dots)) v6537@ls/false)) (apply (lambda (v6543@dots v6544@y) (v6525@f v6544@y (lambda (v6547@maps) (call-with-values (lambda () (v6528@k (cons '() v6547@maps))) (lambda (v6551@v6549@x v6552@v6550@maps) ((lambda (v6555@maps v6556@x) (if (null? (car v6555@maps)) (v3006@syntax-violation '#f '"extra ellipsis in syntax form" v6451@src) (values (v6342@gen-mappend v6556@x (car v6555@maps)) (cdr v6555@maps)))) v6552@v6550@maps v6551@v6549@x)))))) v6537@ls/false) ((lambda (v6559@t) ((lambda (v6561@ls/false) (if v6561@ls/false (apply (lambda () (call-with-values (lambda () (v6336@gen-syntax v6451@src v6527@y v6453@r v6454@maps v6455@ellipsis? v6456@vec?)) (lambda (v6565@v6563@y v6566@v6564@maps) ((lambda (v6569@maps v6570@y) (call-with-values (lambda () (v6528@k v6569@maps)) (lambda (v6575@v6573@x v6576@v6574@maps) ((lambda (v6579@maps v6580@x) (values (v6340@gen-append v6580@x v6570@y) v6579@maps)) v6576@v6574@maps v6575@v6573@x)))) v6566@v6564@maps v6565@v6563@y)))) v6561@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v6559@t))) (v2773@syntax-dispatch v6559@t '_))) v6535@t))) (v2773@syntax-dispatch v6535@t '(any . any)))) v6531@t))) (v2773@syntax-dispatch v6531@t '()))) v6527@y)))) v6525@f) v6521@y (lambda (v6583@maps) (call-with-values (lambda () (v6336@gen-syntax v6451@src v6519@x v6453@r (cons '() v6583@maps) v6455@ellipsis? '#f)) (lambda (v6587@v6585@x v6588@v6586@maps) ((lambda (v6591@maps v6592@x) (if (null? (car v6591@maps)) (v3006@syntax-violation '#f '"extra ellipsis in syntax form" v6451@src) (values (v6344@gen-map v6592@x (car v6591@maps)) (cdr v6591@maps)))) v6588@v6586@maps v6587@v6585@x)))))) v6511@ls/false) ((lambda (v6595@t) ((lambda (v6597@ls/false) (if v6597@ls/false (apply (lambda (v6599@x v6600@y) (call-with-values (lambda () (v6336@gen-syntax v6451@src v6599@x v6453@r v6454@maps v6455@ellipsis? '#f)) (lambda (v6605@v6603@xnew v6606@v6604@maps) ((lambda (v6609@maps v6610@xnew) (call-with-values (lambda () (v6336@gen-syntax v6451@src v6600@y v6453@r v6609@maps v6455@ellipsis? v6456@vec?)) (lambda (v6615@v6613@ynew v6616@v6614@maps) ((lambda (v6619@maps v6620@ynew) (values (v6346@gen-cons v6452@e v6599@x v6600@y v6610@xnew v6620@ynew) v6619@maps)) v6616@v6614@maps v6615@v6613@ynew)))) v6606@v6604@maps v6605@v6603@xnew)))) v6597@ls/false) ((lambda (v6623@t) ((lambda (v6625@ls/false) (if v6625@ls/false (apply (lambda (v6627@ls) (call-with-values (lambda () (v6336@gen-syntax v6451@src v6627@ls v6453@r v6454@maps v6455@ellipsis? '#t)) (lambda (v6631@v6629@lsnew v6632@v6630@maps) ((lambda (v6635@maps v6636@lsnew) (values (v6348@gen-vector v6452@e v6627@ls v6636@lsnew) v6635@maps)) v6632@v6630@maps v6631@v6629@lsnew)))) v6625@ls/false) ((lambda (v6639@t) ((lambda (v6641@ls/false) (if v6641@ls/false (apply (lambda () (values (list 'quote v6452@e) v6454@maps)) v6641@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v6639@t))) (v2773@syntax-dispatch v6639@t '_))) v6623@t))) (v2773@syntax-dispatch v6623@t '#(vector each-any)))) v6595@t))) (v2773@syntax-dispatch v6595@t '(any . any)))) v6509@t))) (v2773@syntax-dispatch v6509@t '(any any . any)))) v6495@t))) (v2773@syntax-dispatch v6495@t '(any any)))) v6471@t))) (v2773@syntax-dispatch v6471@t 'any))) v6463@t))) (v2773@syntax-dispatch v6463@t 'any))) v6452@e))) (set! v6338@gen-ref (lambda (v6427@src v6428@var v6429@level v6430@maps) (if (= v6429@level '0) (values v6428@var v6430@maps) (if (null? v6430@maps) (v3006@syntax-violation '#f '"missing ellipsis in syntax form" v6427@src) (call-with-values (lambda () (v6338@gen-ref v6427@src v6428@var (- v6429@level '1) (cdr v6430@maps))) (lambda (v6437@v6435@outer-var v6438@v6436@outer-maps) ((lambda (v6441@outer-maps v6442@outer-var) ((lambda (v6445@t) (if v6445@t ((lambda (v6447@b) (values (cdr v6447@b) v6430@maps)) v6445@t) ((lambda (v6449@inner-var) (values v6449@inner-var (cons (cons (cons v6442@outer-var v6449@inner-var) (car v6430@maps)) v6441@outer-maps))) (v2148@gen-lexical 'tmp)))) (assq v6442@outer-var (car v6430@maps)))) v6438@v6436@outer-maps v6437@v6435@outer-var))))))) (set! v6340@gen-append (lambda (v6423@x v6424@y) (if (fast-equal? v6424@y ''()) v6423@x (list 'append v6423@x v6424@y)))) (set! v6342@gen-mappend (lambda (v6419@e v6420@map-env) (list 'apply '(primitive append) (v6344@gen-map v6419@e v6420@map-env)))) (set! v6344@gen-map (lambda (v6401@e v6402@map-env) ((lambda (v6405@formals v6406@actuals) (if (eq? (car v6401@e) 'ref) (car v6406@actuals) (if (for-all (lambda (v6409@x) (and (eq? (car v6409@x) 'ref) (memq (cadr v6409@x) v6405@formals))) (cdr v6401@e)) ((lambda (v6411@args) (cons 'map (cons (list 'primitive (car v6401@e)) v6411@args))) (map ((lambda (v6413@r) (lambda (v6415@x) (cdr (assq (cadr v6415@x) v6413@r)))) (map cons v6405@formals v6406@actuals)) (cdr v6401@e))) (cons* 'map (list 'lambda v6405@formals v6401@e) v6406@actuals)))) (map cdr v6402@map-env) (map (lambda (v6417@x) (list 'ref (car v6417@x))) v6402@map-env)))) (set! v6346@gen-cons (lambda (v6385@e v6386@x v6387@y v6388@xnew v6389@ynew) ((lambda (v6395@t) (if (memv v6395@t '(quote)) (if (eq? (car v6388@xnew) 'quote) ((lambda (v6397@xnew v6398@ynew) (if (and (eq? v6397@xnew v6386@x) (eq? v6398@ynew v6387@y)) (list 'quote v6385@e) (list 'quote (cons v6397@xnew v6398@ynew)))) (cadr v6388@xnew) (cadr v6389@ynew)) (if (null? (cadr v6389@ynew)) (list 'list v6388@xnew) (list 'cons v6388@xnew v6389@ynew))) (if (memv v6395@t '(list)) (cons 'list (cons v6388@xnew (cdr v6389@ynew))) (list 'cons v6388@xnew v6389@ynew)))) (car v6389@ynew)))) (set! v6348@gen-vector (lambda (v6379@e v6380@ls v6381@lsnew) (if (eq? (car v6381@lsnew) 'quote) (if (eq? (cadr v6381@lsnew) v6380@ls) (list 'quote v6379@e) (list 'quote (list->vector (cadr v6381@lsnew)))) (if (eq? (car v6381@lsnew) 'list) (cons 'vector (cdr v6381@lsnew)) (list 'list->vector v6381@lsnew))))) (set! v6350@regen (lambda (v6373@x) ((lambda (v6375@t) (if (memv v6375@t '(ref)) (cadr v6373@x) (if (memv v6375@t '(primitive)) (list 'primitive (cadr v6373@x)) (if (memv v6375@t '(quote)) (list 'quote (cadr v6373@x)) (if (memv v6375@t '(lambda)) (v2112@v1922@build-lambda '#f (cadr v6373@x) (v6350@regen (caddr v6373@x))) (if (memv v6375@t '(map)) ((lambda (v6377@ls) (cons '(primitive ellipsis-map) v6377@ls)) (map v6350@regen (cdr v6373@x))) (cons (list 'primitive (car v6373@x)) (map v6350@regen (cdr v6373@x))))))))) (car v6373@x)))) (lambda (v6351@e v6352@r v6353@mr) ((lambda (v6357@t) ((lambda (v6359@ls/false) (if v6359@ls/false (apply (lambda (v6361@x) (call-with-values (lambda () (v6336@gen-syntax v6351@e v6361@x v6352@r '() v2775@ellipsis? '#f)) (lambda (v6365@v6363@e v6366@v6364@maps) ((lambda (v6369@maps v6370@e) (v6350@regen v6370@e)) v6366@v6364@maps v6365@v6363@e)))) v6359@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v6357@t))) (v2773@syntax-dispatch v6357@t '(_ any)))) v6351@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! v2787@core-macro-transformer (lambda (v6643@name) ((lambda (v6645@t) (if (memv v6645@t '(quote)) v2693@quote-transformer (if (memv v6645@t '(lambda)) v2697@lambda-transformer (if (memv v6645@t '(case-lambda)) v2695@case-lambda-transformer (if (memv v6645@t '(letrec)) v2669@letrec-transformer (if (memv v6645@t '(letrec*)) v2671@letrec*-transformer (if (memv v6645@t '(if)) v2685@if-transformer (if (memv v6645@t '(and)) v2687@and-transformer (if (memv v6645@t '(or)) v2689@or-transformer (if (memv v6645@t '(foreign-call)) v2769@foreign-call-transformer (if (memv v6645@t '(syntax-case)) v2781@syntax-case-transformer (if (memv v6645@t '(syntax)) v2785@syntax-transformer (if (memv v6645@t '(type-descriptor)) v2675@type-descriptor-transformer (if (memv v6645@t '(record-type-descriptor)) v2677@record-type-descriptor-transformer (if (memv v6645@t '(record-constructor-descriptor)) v2679@record-constructor-descriptor-transformer (if (memv v6645@t '(fluid-let-syntax)) v2673@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" v6643@name))))))))))))))))) v6643@name))) (set! v2789@symbol-macro (lambda (v6647@x v6648@set) ((lambda (v6651@t) ((lambda (v6653@ls/false) (if (and v6653@ls/false (apply (lambda (v6655@name) (and (v2276@id? v6655@name) (memq (v2278@id->sym v6655@name) v6648@set))) v6653@ls/false)) (apply (lambda (v6657@name) (v2699@bless (list 'quote v6657@name))) v6653@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v6651@t))) (v2773@syntax-dispatch v6651@t '(_ any)))) v6647@x))) (set! v2791@macro-transformer (lambda (v6659@x) (if (procedure? v6659@x) v6659@x (if (symbol? v6659@x) ((lambda (v6661@t) (if (memv v6661@t '(define-record-type)) v2761@define-record-type-macro (if (memv v6661@t '(define-struct)) v2759@define-struct-macro (if (memv v6661@t '(include)) v2749@include-macro (if (memv v6661@t '(cond)) v2745@cond-macro (if (memv v6661@t '(let)) v2705@let-macro (if (memv v6661@t '(do)) v2737@do-macro (if (memv v6661@t '(or)) v2741@or-macro (if (memv v6661@t '(and)) v2743@and-macro (if (memv v6661@t '(let*)) v2739@let*-macro (if (memv v6661@t '(let-values)) v2707@let-values-macro (if (memv v6661@t '(let*-values)) v2709@let*-values-macro (if (memv v6661@t '(syntax-rules)) v2753@syntax-rules-macro (if (memv v6661@t '(quasiquote)) v2755@quasiquote-macro (if (memv v6661@t '(quasisyntax)) v2757@quasisyntax-macro (if (memv v6661@t '(with-syntax)) v2701@with-syntax-macro (if (memv v6661@t '(when)) v2681@when-macro (if (memv v6661@t '(unless)) v2683@unless-macro (if (memv v6661@t '(case)) v2691@case-macro (if (memv v6661@t '(identifier-syntax)) v2735@identifier-syntax-macro (if (memv v6661@t '(time)) v2727@time-macro (if (memv v6661@t '(delay)) v2729@delay-macro (if (memv v6661@t '(assert)) v2731@assert-macro (if (memv v6661@t '(endianness)) v2733@endianness-macro (if (memv v6661@t '(guard)) v2723@guard-macro (if (memv v6661@t '(define-enumeration)) v2725@define-enumeration-macro (if (memv v6661@t '(trace-lambda)) v2711@trace-lambda-macro (if (memv v6661@t '(trace-define)) v2713@trace-define-macro (if (memv v6661@t '(trace-define-syntax)) v2715@trace-define-syntax-macro (if (memv v6661@t '(trace-let-syntax)) v2719@trace-let-syntax-macro (if (memv v6661@t '(trace-letrec-syntax)) v2721@trace-letrec-syntax-macro (if (memv v6661@t '(define-condition-type)) v2763@define-condition-type-macro (if (memv v6661@t '(parameterize)) v2767@parameterize-macro (if (memv v6661@t '(include-into)) v2751@include-into-macro (if (memv v6661@t '(eol-style)) (lambda (v6663@x) (v2789@symbol-macro v6663@x '(none lf cr crlf nel crnel ls))) (if (memv v6661@t '(error-handling-mode)) (lambda (v6665@x) (v2789@symbol-macro v6665@x '(ignore raise replace))) (if (memv v6661@t '(buffer-mode)) (lambda (v6667@x) (v2789@symbol-macro v6667@x '(none line block))) (if (memv v6661@t '(file-options)) v2135@file-options-macro (if (memv v6661@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) v2765@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" v6659@x)))))))))))))))))))))))))))))))))))))))) v6659@x) (error 'core-macro-transformer '"BUG: invalid macro" v6659@x))))) (set! v2793@local-macro-transformer (lambda (v6669@x) (car v6669@x))) (set! v2795@do-macro-call (lambda (v6671@transformer v6672@expr) ((lambda (v6675@out) (begin ((letrec ((v6677@f (lambda (v6679@x) (if (not (v2220@stx? v6679@x)) (if (pair? v6679@x) (begin (v6677@f (car v6679@x)) (v6677@f (cdr v6679@x))) (if (vector? v6679@x) (vector-for-each v6677@f v6679@x) (if (symbol? v6679@x) (v3006@syntax-violation '#f '"raw symbol encountered in output of macro" v6672@expr v6679@x) (void)))) (void))))) v6677@f) v6675@out) (v2254@add-mark (v2244@gen-mark) v6675@out v6672@expr))) (v6671@transformer (v2254@add-mark v2246@anti-mark v6672@expr '#f))))) (set! v2797@chi-macro (lambda (v6681@p v6682@e) (v2795@do-macro-call (v2791@macro-transformer v6681@p) v6682@e))) (set! v2799@chi-local-macro (lambda (v6685@p v6686@e) (v2795@do-macro-call (v2793@local-macro-transformer v6685@p) v6686@e))) (set! v2801@chi-global-macro (lambda (v6689@p v6690@e) ((lambda (v6693@lib v6694@loc) (begin (v1803@v1459@visit-library v6693@lib) ((lambda (v6697@x) ((lambda (v6699@transformer) (v2795@do-macro-call v6699@transformer v6690@e)) (if (procedure? v6697@x) v6697@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" v6697@x)))) (symbol-value v6694@loc)))) (car v6689@p) (cdr v6689@p)))) (set! v2803@chi-expr* (lambda (v6701@e* v6702@r v6703@mr) (if (null? v6701@e*) '() ((lambda (v6707@e) (cons v6707@e (v2803@chi-expr* (cdr v6701@e*) v6702@r v6703@mr))) (v2807@chi-expr (car v6701@e*) v6702@r v6703@mr))))) (set! v2805@chi-application (lambda (v6709@e v6710@r v6711@mr) ((lambda (v6715@t) ((lambda (v6717@ls/false) (if v6717@ls/false (apply (lambda (v6719@rator v6720@rands) ((lambda (v6723@rator) (cons v6723@rator (v2803@chi-expr* v6720@rands v6710@r v6711@mr))) (v2807@chi-expr v6719@rator v6710@r v6711@mr))) v6717@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v6715@t))) (v2773@syntax-dispatch v6715@t '(any . each-any)))) v6709@e))) (set! v2807@chi-expr (lambda (v6725@e v6726@r v6727@mr) (call-with-values (lambda () (v2316@syntax-type v6725@e v6726@r)) (lambda (v6734@v6731@type v6735@v6732@value v6736@v6733@kwd) ((lambda (v6740@kwd v6741@value v6742@type) ((lambda (v6746@t) (if (memv v6746@t '(core-macro)) ((lambda (v6748@transformer) (v6748@transformer v6725@e v6726@r v6727@mr)) (v2787@core-macro-transformer v6741@value)) (if (memv v6746@t '(global)) ((lambda (v6750@lib) ((lambda (v6752@loc) ((lambda () (begin ((v2880@inv-collector) v6750@lib) v6752@loc)))) (cdr v6741@value))) (car v6741@value)) (if (memv v6746@t '(core-prim)) ((lambda (v6754@name) (list 'primitive v6754@name)) v6741@value) (if (memv v6746@t '(call)) (v2805@chi-application v6725@e v6726@r v6727@mr) (if (memv v6746@t '(lexical)) ((lambda (v6756@lex) v6756@lex) (v2657@lexical-var v6741@value)) (if (memv v6746@t '(global-macro global-macro!)) (v2807@chi-expr (v2801@chi-global-macro v6741@value v6725@e) v6726@r v6727@mr) (if (memv v6746@t '(local-macro local-macro!)) (v2807@chi-expr (v2799@chi-local-macro v6741@value v6725@e) v6726@r v6727@mr) (if (memv v6746@t '(macro macro!)) (v2807@chi-expr (v2797@chi-macro v6741@value v6725@e) v6726@r v6727@mr) (if (memv v6746@t '(constant)) ((lambda (v6758@datum) (list 'quote v6758@datum)) v6741@value) (if (memv v6746@t '(set!)) (v2809@chi-set! v6725@e v6726@r v6727@mr) (if (memv v6746@t '(begin)) ((lambda (v6760@t) ((lambda (v6762@ls/false) (if v6762@ls/false (apply (lambda (v6764@x v6765@x*) (v2115@v1972@build-sequence '#f (v2803@chi-expr* (cons v6764@x v6765@x*) v6726@r v6727@mr))) v6762@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v6760@t))) (v2773@syntax-dispatch v6760@t '(_ any . each-any)))) v6725@e) (if (memv v6746@t '(let-syntax letrec-syntax)) ((lambda (v6768@t) ((lambda (v6770@ls/false) (if (and v6770@ls/false (apply (lambda (v6772@xlhs* v6773@xrhs* v6774@xbody v6775@xbody*) (if (not (v2286@valid-bound-ids? v6772@xlhs*)) (v3006@syntax-violation '#f '"invalid identifiers" v6725@e) (void))) v6770@ls/false)) (apply (lambda (v6780@xlhs* v6781@xrhs* v6782@xbody v6783@xbody*) ((lambda (v6788@xlab*) ((lambda (v6790@xrib) ((lambda (v6792@xb*) ((lambda () (v2115@v1972@build-sequence '#f (v2803@chi-expr* (map (lambda (v6794@x) (v2256@add-subst v6790@xrib v6794@x)) (cons v6782@xbody v6783@xbody*)) (append (map cons v6788@xlab* v6792@xb*) v6726@r) (append (map cons v6788@xlab* v6792@xb*) v6727@mr)))))) (map (lambda (v6796@x) (v2338@make-eval-transformer (v2866@expand-transformer (if (eq? v6742@type 'let-syntax) v6796@x (v2256@add-subst v6790@xrib v6796@x)) v6727@mr))) v6781@xrhs*))) (v2207@make-full-rib v6780@xlhs* v6788@xlab*))) (map v2152@gen-label v6780@xlhs*))) v6770@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v6768@t))) (v2773@syntax-dispatch v6768@t '(_ #(each (any any)) any . each-any)))) v6725@e) (if (memv v6746@t '(displaced-lexical)) (v3006@syntax-violation '#f '"identifier out of context" v6725@e) (if (memv v6746@t '(syntax)) (v3006@syntax-violation '#f '"reference to pattern variable outside a syntax form" v6725@e) (if (memv v6746@t '(define define-syntax module import library)) (v3006@syntax-violation '#f (string-append ((lambda (v6798@t) (if (memv v6798@t '(define)) '"a definition" (if (memv v6798@t '(define-syntax)) '"a define-syntax" (if (memv v6798@t '(module)) '"a module definition" (if (memv v6798@t '(library)) '"a library definition" (if (memv v6798@t '(import)) '"an import declaration" (if (memv v6798@t '(export)) '"an export declaration" '"a non-expression"))))))) v6742@type) '" was found where an expression was expected") v6725@e) (if (memv v6746@t '(mutable)) (v3006@syntax-violation '#f '"attempt to reference an unexportable variable" v6725@e) (v3006@syntax-violation '#f '"invalid expression" v6725@e)))))))))))))))))) v6742@type)) v6736@v6733@kwd v6735@v6732@value v6734@v6731@type))))) (set! v2809@chi-set! (lambda (v6800@e v6801@r v6802@mr) ((lambda (v6806@t) ((lambda (v6808@ls/false) (if (and v6808@ls/false (apply (lambda (v6810@x v6811@v) (v2276@id? v6810@x)) v6808@ls/false)) (apply (lambda (v6814@x v6815@v) (call-with-values (lambda () (v2316@syntax-type v6814@x v6801@r)) (lambda (v6821@v6818@type v6822@v6819@value v6823@v6820@kwd) ((lambda (v6827@kwd v6828@value v6829@type) ((lambda (v6833@t) (if (memv v6833@t '(lexical)) (begin (v2661@set-lexical-mutable! v6828@value '#t) (list 'set! (v2657@lexical-var v6828@value) (v2807@chi-expr v6815@v v6801@r v6802@mr))) (if (memv v6833@t '(core-prim)) (v3006@syntax-violation '#f '"cannot modify imported core primitive" v6800@e) (if (memv v6833@t '(global)) (v3006@syntax-violation '#f '"attempt to modify imported binding" v6800@e) (if (memv v6833@t '(global-macro!)) (v2807@chi-expr (v2801@chi-global-macro v6828@value v6800@e) v6801@r v6802@mr) (if (memv v6833@t '(local-macro!)) (v2807@chi-expr (v2799@chi-local-macro v6828@value v6800@e) v6801@r v6802@mr) (if (memv v6833@t '(mutable)) (v3006@syntax-violation '#f '"attempt to assign to an unexportable variable" v6800@e) (v3006@syntax-violation '#f '"invalid syntax" v6800@e)))))))) v6829@type)) v6823@v6820@kwd v6822@v6819@value v6821@v6818@type)))) v6808@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v6806@t))) (v2773@syntax-dispatch v6806@t '(_ any any)))) v6800@e))) (set! v2811@verify-formals (lambda (v6835@fmls v6836@stx) ((lambda (v6839@t) ((lambda (v6841@ls/false) (if v6841@ls/false (apply (lambda (v6843@x*) (if (not (v2286@valid-bound-ids? v6843@x*)) (v2703@invalid-fmls-error v6836@stx v6835@fmls) (void))) v6841@ls/false) ((lambda (v6845@t) ((lambda (v6847@ls/false) (if v6847@ls/false (apply (lambda (v6849@x* v6850@x) (if (not (v2286@valid-bound-ids? (cons v6850@x v6849@x*))) (v2703@invalid-fmls-error v6836@stx v6835@fmls) (void))) v6847@ls/false) ((lambda (v6853@t) ((lambda (v6855@ls/false) (if v6855@ls/false (apply (lambda () (v3006@syntax-violation '#f '"invalid syntax" v6836@stx)) v6855@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v6853@t))) (v2773@syntax-dispatch v6853@t '_))) v6845@t))) (v2773@syntax-dispatch v6845@t '#(each+ any () any)))) v6839@t))) (v2773@syntax-dispatch v6839@t 'each-any))) v6835@fmls))) (set! v2813@chi-lambda-clause (lambda (v6857@stx v6858@fmls v6859@body* v6860@r v6861@mr) ((lambda (v6867@t) ((lambda (v6869@ls/false) (if v6869@ls/false (apply (lambda (v6871@x*) (begin (v2811@verify-formals v6858@fmls v6857@stx) ((lambda (v6873@lex* v6874@lab*) (values v6873@lex* (v2829@chi-internal (v2256@add-subst (v2207@make-full-rib v6871@x* v6874@lab*) v6859@body*) (v2665@add-lexicals v6874@lab* v6873@lex* v6860@r) v6861@mr))) (map v2148@gen-lexical v6871@x*) (map v2152@gen-label v6871@x*)))) v6869@ls/false) ((lambda (v6877@t) ((lambda (v6879@ls/false) (if v6879@ls/false (apply (lambda (v6881@x* v6882@x) (begin (v2811@verify-formals v6858@fmls v6857@stx) ((lambda (v6885@lex* v6886@lab* v6887@lex v6888@lab) (values (append v6885@lex* v6887@lex) (v2829@chi-internal (v2256@add-subst (v2207@make-full-rib (cons v6882@x v6881@x*) (cons v6888@lab v6886@lab*)) v6859@body*) (v2665@add-lexicals (cons v6888@lab v6886@lab*) (cons v6887@lex v6885@lex*) v6860@r) v6861@mr))) (map v2148@gen-lexical v6881@x*) (map v2152@gen-label v6881@x*) (v2148@gen-lexical v6882@x) (v2152@gen-label v6882@x)))) v6879@ls/false) ((lambda (v6893@t) ((lambda (v6895@ls/false) (if v6895@ls/false (apply (lambda () (v3006@syntax-violation '#f '"invalid syntax" v6858@fmls)) v6895@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v6893@t))) (v2773@syntax-dispatch v6893@t '_))) v6877@t))) (v2773@syntax-dispatch v6877@t '#(each+ any () any)))) v6867@t))) (v2773@syntax-dispatch v6867@t 'each-any))) v6858@fmls))) (set! v2815@chi-lambda-clause* (lambda (v6897@stx v6898@fmls* v6899@body** v6900@r v6901@mr) (if (null? v6898@fmls*) (values '() '()) (call-with-values (lambda () (v2813@chi-lambda-clause v6897@stx (car v6898@fmls*) (car v6899@body**) v6900@r v6901@mr)) (lambda (v6909@v6907@a v6910@v6908@b) ((lambda (v6913@b v6914@a) (call-with-values (lambda () (v2815@chi-lambda-clause* v6897@stx (cdr v6898@fmls*) (cdr v6899@body**) v6900@r v6901@mr)) (lambda (v6919@v6917@a* v6920@v6918@b*) ((lambda (v6923@b* v6924@a*) (values (cons v6914@a v6924@a*) (cons v6913@b v6923@b*))) v6920@v6918@b* v6919@v6917@a*)))) v6910@v6908@b v6909@v6907@a)))))) (set! v2817@chi-defun (lambda (v6927@x v6928@r v6929@mr) ((lambda (v6933@fmls v6934@body*) (call-with-values (lambda () (v2813@chi-lambda-clause v6933@fmls v6933@fmls v6934@body* v6928@r v6929@mr)) (lambda (v6939@v6937@fmls v6940@v6938@body) ((lambda (v6943@body v6944@fmls) (v2112@v1922@build-lambda '#f v6944@fmls v6943@body)) v6940@v6938@body v6939@v6937@fmls)))) (car v6927@x) (cdr v6927@x)))) (set! v2819@chi-rhs (lambda (v6947@rhs v6948@r v6949@mr) ((lambda (v6953@t) (if (memv v6953@t '(defun)) (v2817@chi-defun (cdr v6947@rhs) v6948@r v6949@mr) (if (memv v6953@t '(expr)) ((lambda (v6955@expr) (v2807@chi-expr v6955@expr v6948@r v6949@mr)) (cdr v6947@rhs)) (if (memv v6953@t '(top-expr)) ((lambda (v6957@expr) (v2115@v1972@build-sequence '#f (list (v2807@chi-expr v6957@expr v6948@r v6949@mr) (v2116@v1974@build-void)))) (cdr v6947@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" v6947@rhs))))) (car v6947@rhs)))) (set! v2821@expand-interaction-rhs*/init* (lambda (v6959@lhs* v6960@rhs* v6961@init* v6962@r v6963@mr) ((letrec ((v6969@f (lambda (v6971@lhs* v6972@rhs*) (if (null? v6971@lhs*) (map (lambda (v6975@x) (v2807@chi-expr v6975@x v6962@r v6963@mr)) v6961@init*) ((lambda (v6977@lhs v6978@rhs) ((lambda (v6981@t) (if (memv v6981@t '(defun)) ((lambda (v6983@rhs) (cons (list 'set! v6977@lhs v6983@rhs) (v6969@f (cdr v6971@lhs*) (cdr v6972@rhs*)))) (v2817@chi-defun (cdr v6978@rhs) v6962@r v6963@mr)) (if (memv v6981@t '(expr)) ((lambda (v6985@rhs) (cons (list 'set! v6977@lhs v6985@rhs) (v6969@f (cdr v6971@lhs*) (cdr v6972@rhs*)))) (v2807@chi-expr (cdr v6978@rhs) v6962@r v6963@mr)) (if (memv v6981@t '(top-expr)) ((lambda (v6987@e) (cons v6987@e (v6969@f (cdr v6971@lhs*) (cdr v6972@rhs*)))) (v2807@chi-expr (cdr v6978@rhs) v6962@r v6963@mr)) (error 'expand-interaction '"invallid" v6978@rhs))))) (car v6978@rhs))) (car v6971@lhs*) (car v6972@rhs*)))))) v6969@f) v6959@lhs* v6960@rhs*))) (set! v2823@chi-rhs* (lambda (v6989@rhs* v6990@r v6991@mr) ((letrec ((v6995@f (lambda (v6997@ls) (if (null? v6997@ls) '() ((lambda (v6999@a) (cons v6999@a (v6995@f (cdr v6997@ls)))) (v2819@chi-rhs (car v6997@ls) v6990@r v6991@mr)))))) v6995@f) v6989@rhs*))) (set! v2825@find-bound=? (lambda (v7001@x v7002@lhs* v7003@rhs*) (if (null? v7002@lhs*) '#f (if (v2282@bound-id=? v7001@x (car v7002@lhs*)) (car v7003@rhs*) (v2825@find-bound=? v7001@x (cdr v7002@lhs*) (cdr v7003@rhs*)))))) (set! v2827@find-dups (lambda (v7007@ls) ((letrec ((v7009@f (lambda (v7011@ls v7012@dups) (if (null? v7011@ls) v7012@dups ((lambda (v7015@t) (if v7015@t ((lambda (v7017@x) (v7009@f (cdr v7011@ls) (cons (list (car v7011@ls) v7017@x) v7012@dups))) v7015@t) (v7009@f (cdr v7011@ls) v7012@dups))) (v2825@find-bound=? (car v7011@ls) (cdr v7011@ls) (cdr v7011@ls))))))) v7009@f) v7007@ls '()))) (set! v2829@chi-internal (lambda (v7019@e* v7020@r v7021@mr) ((lambda (v7025@rib) (call-with-values (lambda () (v2864@chi-body* (map (lambda (v7035@x) (v2256@add-subst v7025@rib v7035@x)) (v2274@syntax->list v7019@e*)) v7020@r v7021@mr '() '() '() '() '() v7025@rib '#f)) (lambda (v7037@v7027@e* v7038@v7028@r v7039@v7029@mr v7040@v7030@lex* v7041@v7031@rhs* v7042@v7032@mod** v7043@v7033@kwd* v7044@v7034@_exp*) ((lambda (v7053@_exp* v7054@kwd* v7055@mod** v7056@rhs* v7057@lex* v7058@mr v7059@r v7060@e*) (begin (if (null? v7060@e*) (v3006@syntax-violation '#f '"no expression in body" v7060@e*) (void)) ((lambda (v7069@init*) ((lambda (v7071@rhs*) ((lambda () (v2118@v1978@build-letrec* '#f (reverse v7057@lex*) (reverse v7071@rhs*) (v2115@v1972@build-sequence '#f v7069@init*))))) (v2823@chi-rhs* v7056@rhs* v7059@r v7058@mr))) (v2803@chi-expr* (append (apply append (reverse v7055@mod**)) v7060@e*) v7059@r v7058@mr)))) v7044@v7034@_exp* v7043@v7033@kwd* v7042@v7032@mod** v7041@v7031@rhs* v7040@v7030@lex* v7039@v7029@mr v7038@v7028@r v7037@v7027@e*)))) (v2195@make-empty-rib)))) (set! v2831@parse-module (lambda (v7073@e) ((lambda (v7075@t) ((lambda (v7077@ls/false) (if v7077@ls/false (apply (lambda (v7079@export* v7080@b*) (begin (if (not (for-all v2276@id? v7079@export*)) (v3006@syntax-violation '#f '"module exports must be identifiers" v7073@e) (void)) (values '#f (list->vector v7079@export*) v7080@b*))) v7077@ls/false) ((lambda (v7083@t) ((lambda (v7085@ls/false) (if v7085@ls/false (apply (lambda (v7087@name v7088@export* v7089@b*) (begin (if (not (v2276@id? v7087@name)) (v3006@syntax-violation '#f '"module name must be an identifier" v7073@e) (void)) (if (not (for-all v2276@id? v7088@export*)) (v3006@syntax-violation '#f '"module exports must be identifiers" v7073@e) (void)) (values v7087@name (list->vector v7088@export*) v7089@b*))) v7085@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v7083@t))) (v2773@syntax-dispatch v7083@t '(_ any each-any . each-any)))) v7075@t))) (v2773@syntax-dispatch v7075@t '(_ each-any . each-any)))) v7073@e))) (set! v2837@v2832 (make-record-type-descriptor 'module-interface '#f 'v2835 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! v2839@v2834 '#f) (set! v2841@v2833 (make-record-constructor-descriptor v2837@v2832 '#f v2839@v2834)) (set! v2844@module-interface? (record-predicate v2837@v2832)) (set! v2846@make-module-interface (record-constructor v2841@v2833)) (set! v2848@module-interface-first-mark (record-accessor v2837@v2832 '0)) (set! v2850@module-interface-exp-id-vec (record-accessor v2837@v2832 '1)) (set! v2852@module-interface-exp-lab-vec (record-accessor v2837@v2832 '2)) (set! v2854@set-module-interface-first-mark! (record-mutator v2837@v2832 '0)) (set! v2856@set-module-interface-exp-id-vec! (record-mutator v2837@v2832 '1)) (set! v2858@set-module-interface-exp-lab-vec! (record-mutator v2837@v2832 '2)) (set! v2860@module-interface-exp-id* (lambda (v7093@iface v7094@id) ((lambda (v7098@diff-marks) (begin (set! v7098@diff-marks (lambda (v7105@ls v7106@x) (begin (if (null? v7105@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (v7109@a) (if (eq? v7109@a v7106@x) '() (cons v7109@a (v7098@diff-marks (cdr v7105@ls) v7106@x)))) (car v7105@ls))))) ((lambda (v7099@diff v7100@id-vec) (if (null? v7099@diff) v7100@id-vec (vector-map (lambda (v7103@x) (v2222@make-stx (v2224@stx-expr v7103@x) (append v7099@diff (v2226@stx-mark* v7103@x)) '() '())) v7100@id-vec))) (v7098@diff-marks (v2226@stx-mark* v7094@id) (v2848@module-interface-first-mark v7093@iface)) (v2850@module-interface-exp-id-vec v7093@iface)))) '#f))) (set! v2862@chi-internal-module (lambda (v7111@e v7112@r v7113@mr v7114@lex* v7115@rhs* v7116@mod** v7117@kwd*) (call-with-values (lambda () (v2831@parse-module v7111@e)) (lambda (v7128@v7125@name v7129@v7126@exp-id* v7130@v7127@e*) ((lambda (v7134@e* v7135@exp-id* v7136@name) ((lambda (v7140@rib) ((lambda (v7142@e*) ((lambda () (call-with-values (lambda () (v2864@chi-body* v7142@e* v7112@r v7113@mr v7114@lex* v7115@rhs* v7116@mod** v7117@kwd* '() v7140@rib '#f)) (lambda (v7152@v7144@e* v7153@v7145@r v7154@v7146@mr v7155@v7147@lex* v7156@v7148@rhs* v7157@v7149@mod** v7158@v7150@kwd* v7159@v7151@_exp*) ((lambda (v7168@_exp* v7169@kwd* v7170@mod** v7171@rhs* v7172@lex* v7173@mr v7174@r v7175@e*) ((lambda (v7184@exp-lab* v7185@mod**) (if (not v7136@name) (values v7172@lex* v7171@rhs* v7135@exp-id* v7184@exp-lab* v7174@r v7173@mr v7185@mod** v7169@kwd*) ((lambda (v7188@lab v7189@iface) (values v7172@lex* v7171@rhs* (vector v7136@name) (vector v7188@lab) (cons (cons v7188@lab (cons '$module v7189@iface)) v7174@r) (cons (cons v7188@lab (cons '$module v7189@iface)) v7173@mr) v7185@mod** v7169@kwd*)) (v2152@gen-label 'module) (v2846@make-module-interface (car (v2226@stx-mark* v7136@name)) (vector-map (lambda (v7192@x) (v2222@make-stx (v2224@stx-expr v7192@x) (v2226@stx-mark* v7192@x) '() '())) v7135@exp-id*) v7184@exp-lab*)))) (vector-map (lambda (v7194@x) (or (v2302@id->label (v2222@make-stx (v2278@id->sym v7194@x) (v2226@stx-mark* v7194@x) (list v7140@rib) '())) (v3006@syntax-violation '#f '"cannot find module export" v7194@x))) v7135@exp-id*) (cons v7175@e* v7170@mod**))) v7159@v7151@_exp* v7158@v7150@kwd* v7157@v7149@mod** v7156@v7148@rhs* v7155@v7147@lex* v7154@v7146@mr v7153@v7145@r v7152@v7144@e*)))))) (map (lambda (v7196@x) (v2256@add-subst v7140@rib v7196@x)) (v2274@syntax->list v7134@e*)))) (v2195@make-empty-rib))) v7130@v7127@e* v7129@v7126@exp-id* v7128@v7125@name))))) (set! v2864@chi-body* (lambda (v7198@e* v7199@r v7200@mr v7201@lex* v7202@rhs* v7203@mod** v7204@kwd* v7205@exp* v7206@rib v7207@top?) (if (null? v7198@e*) (values v7198@e* v7199@r v7200@mr v7201@lex* v7202@rhs* v7203@mod** v7204@kwd* v7205@exp*) ((lambda (v7218@e) (call-with-values (lambda () (v2316@syntax-type v7218@e v7199@r)) (lambda (v7223@v7220@type v7224@v7221@value v7225@v7222@kwd) ((lambda (v7229@kwd v7230@value v7231@type) ((lambda (v7235@kwd*) ((lambda (v7237@t) (if (memv v7237@t '(define)) (call-with-values (lambda () (v2649@parse-define v7218@e)) (lambda (v7241@v7239@id v7242@v7240@rhs) ((lambda (v7245@rhs v7246@id) (begin (if (v2290@bound-id-member? v7246@id v7235@kwd*) (v3006@syntax-violation '#f '"cannot redefine keyword" v7218@e) (void)) (call-with-values (lambda () (v2156@gen-define-label+loc v7246@id v7206@rib)) (lambda (v7251@v7249@lab v7252@v7250@lex) ((lambda (v7255@lex v7256@lab) (begin (v2197@extend-rib! v7206@rib v7246@id v7256@lab) (v2864@chi-body* (cdr v7198@e*) (v2663@add-lexical v7256@lab v7255@lex v7199@r) v7200@mr (cons v7255@lex v7201@lex*) (cons v7245@rhs v7202@rhs*) v7203@mod** v7235@kwd* v7205@exp* v7206@rib v7207@top?))) v7252@v7250@lex v7251@v7249@lab))))) v7242@v7240@rhs v7241@v7239@id))) (if (memv v7237@t '(define-syntax)) (call-with-values (lambda () (v2651@parse-define-syntax v7218@e)) (lambda (v7261@v7259@id v7262@v7260@rhs) ((lambda (v7265@rhs v7266@id) (begin (if (v2290@bound-id-member? v7266@id v7235@kwd*) (v3006@syntax-violation '#f '"cannot redefine keyword" v7218@e) (void)) ((lambda (v7269@lab v7270@expanded-rhs) (begin (v2197@extend-rib! v7206@rib v7266@id v7269@lab) ((lambda (v7273@b) (v2864@chi-body* (cdr v7198@e*) (cons (cons v7269@lab v7273@b) v7199@r) (cons (cons v7269@lab v7273@b) v7200@mr) v7201@lex* v7202@rhs* v7203@mod** v7235@kwd* v7205@exp* v7206@rib v7207@top?)) (v2338@make-eval-transformer v7270@expanded-rhs)))) (v2158@gen-define-label v7266@id v7206@rib) (v2866@expand-transformer v7265@rhs v7200@mr)))) v7262@v7260@rhs v7261@v7259@id))) (if (memv v7237@t '(let-syntax letrec-syntax)) ((lambda (v7275@t) ((lambda (v7277@ls/false) (if (and v7277@ls/false (apply (lambda (v7279@xlhs* v7280@xrhs* v7281@xbody*) (if (not (v2286@valid-bound-ids? v7279@xlhs*)) (v3006@syntax-violation '#f '"invalid identifiers" v7218@e) (void))) v7277@ls/false)) (apply (lambda (v7285@xlhs* v7286@xrhs* v7287@xbody*) ((lambda (v7291@xlab*) ((lambda (v7293@xrib) ((lambda (v7295@xb*) ((lambda () (v2864@chi-body* (append (map (lambda (v7297@x) (v2256@add-subst v7293@xrib v7297@x)) v7287@xbody*) (cdr v7198@e*)) (append (map cons v7291@xlab* v7295@xb*) v7199@r) (append (map cons v7291@xlab* v7295@xb*) v7200@mr) v7201@lex* v7202@rhs* v7203@mod** v7235@kwd* v7205@exp* v7206@rib v7207@top?)))) (map (lambda (v7299@x) (v2338@make-eval-transformer (v2866@expand-transformer (if (eq? v7231@type 'let-syntax) v7299@x (v2256@add-subst v7293@xrib v7299@x)) v7200@mr))) v7286@xrhs*))) (v2207@make-full-rib v7285@xlhs* v7291@xlab*))) (map v2152@gen-label v7285@xlhs*))) v7277@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v7275@t))) (v2773@syntax-dispatch v7275@t '(_ #(each (any any)) . each-any)))) v7218@e) (if (memv v7237@t '(begin)) ((lambda (v7301@t) ((lambda (v7303@ls/false) (if v7303@ls/false (apply (lambda (v7305@x*) (v2864@chi-body* (append v7305@x* (cdr v7198@e*)) v7199@r v7200@mr v7201@lex* v7202@rhs* v7203@mod** v7235@kwd* v7205@exp* v7206@rib v7207@top?)) v7303@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v7301@t))) (v2773@syntax-dispatch v7301@t '(_ . each-any)))) v7218@e) (if (memv v7237@t '(global-macro global-macro!)) (v2864@chi-body* (cons (v2256@add-subst v7206@rib (v2801@chi-global-macro v7230@value v7218@e)) (cdr v7198@e*)) v7199@r v7200@mr v7201@lex* v7202@rhs* v7203@mod** v7235@kwd* v7205@exp* v7206@rib v7207@top?) (if (memv v7237@t '(local-macro local-macro!)) (v2864@chi-body* (cons (v2256@add-subst v7206@rib (v2799@chi-local-macro v7230@value v7218@e)) (cdr v7198@e*)) v7199@r v7200@mr v7201@lex* v7202@rhs* v7203@mod** v7235@kwd* v7205@exp* v7206@rib v7207@top?) (if (memv v7237@t '(macro macro!)) (v2864@chi-body* (cons (v2256@add-subst v7206@rib (v2797@chi-macro v7230@value v7218@e)) (cdr v7198@e*)) v7199@r v7200@mr v7201@lex* v7202@rhs* v7203@mod** v7235@kwd* v7205@exp* v7206@rib v7207@top?) (if (memv v7237@t '(module)) (call-with-values (lambda () (v2862@chi-internal-module v7218@e v7199@r v7200@mr v7201@lex* v7202@rhs* v7203@mod** v7235@kwd*)) (lambda (v7315@v7307@lex* v7316@v7308@rhs* v7317@v7309@m-exp-id* v7318@v7310@m-exp-lab* v7319@v7311@r v7320@v7312@mr v7321@v7313@mod** v7322@v7314@kwd*) ((lambda (v7331@kwd* v7332@mod** v7333@mr v7334@r v7335@m-exp-lab* v7336@m-exp-id* v7337@rhs* v7338@lex*) (begin (vector-for-each (lambda (v7347@id v7348@lab) (v2197@extend-rib! v7206@rib v7347@id v7348@lab)) v7336@m-exp-id* v7335@m-exp-lab*) (v2864@chi-body* (cdr v7198@e*) v7334@r v7333@mr v7338@lex* v7337@rhs* v7332@mod** v7331@kwd* v7205@exp* v7206@rib v7207@top?))) v7322@v7314@kwd* v7321@v7313@mod** v7320@v7312@mr v7319@v7311@r v7318@v7310@m-exp-lab* v7317@v7309@m-exp-id* v7316@v7308@rhs* v7315@v7307@lex*))) (if (memv v7237@t '(library)) (begin (v2976@library-expander (v2298@stx->datum v7218@e)) (v2864@chi-body* (cdr v7198@e*) v7199@r v7200@mr v7201@lex* v7202@rhs* v7203@mod** v7235@kwd* v7205@exp* v7206@rib v7207@top?)) (if (memv v7237@t '(export)) ((lambda (v7351@t) ((lambda (v7353@ls/false) (if v7353@ls/false (apply (lambda (v7355@exp-decl*) (v2864@chi-body* (cdr v7198@e*) v7199@r v7200@mr v7201@lex* v7202@rhs* v7203@mod** v7235@kwd* (append v7355@exp-decl* v7205@exp*) v7206@rib v7207@top?)) v7353@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v7351@t))) (v2773@syntax-dispatch v7351@t '(_ . each-any)))) v7218@e) (if (memv v7237@t '(import)) ((lambda () ((lambda (v7358@module-import? v7360@module-import v7362@library-import) (begin (set! v7358@module-import? (lambda (v7434@e) ((lambda (v7436@t) ((lambda (v7438@ls/false) (if (and v7438@ls/false (apply (lambda (v7440@id) (v2276@id? v7440@id)) v7438@ls/false)) (apply (lambda (v7442@id) '#t) v7438@ls/false) ((lambda (v7444@t) ((lambda (v7446@ls/false) (if v7446@ls/false (apply (lambda (v7448@imp*) '#f) v7446@ls/false) ((lambda (v7450@t) ((lambda (v7452@ls/false) (if v7452@ls/false (apply (lambda () (v3006@syntax-violation '#f '"malformed import form" v7434@e)) v7452@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v7450@t))) (v2773@syntax-dispatch v7450@t '_))) v7444@t))) (v2773@syntax-dispatch v7444@t '(_ . each-any)))) v7436@t))) (v2773@syntax-dispatch v7436@t '(_ any)))) v7434@e))) (set! v7360@module-import (lambda (v7403@e v7404@r) ((lambda (v7407@t) ((lambda (v7409@ls/false) (if (and v7409@ls/false (apply (lambda (v7411@id) (v2276@id? v7411@id)) v7409@ls/false)) (apply (lambda (v7413@id) (call-with-values (lambda () (v2316@syntax-type v7413@id v7404@r)) (lambda (v7418@v7415@type v7419@v7416@value v7420@v7417@kwd) ((lambda (v7424@kwd v7425@value v7426@type) ((lambda (v7430@t) (if (memv v7430@t '($module)) ((lambda (v7432@iface) (values (v2860@module-interface-exp-id* v7432@iface v7413@id) (v2852@module-interface-exp-lab-vec v7432@iface))) v7425@value) (v3006@syntax-violation '#f '"invalid import" v7403@e))) v7426@type)) v7420@v7417@kwd v7419@v7416@value v7418@v7415@type)))) v7409@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v7407@t))) (v2773@syntax-dispatch v7407@t '(_ any)))) v7403@e))) (set! v7362@library-import (lambda (v7377@e) ((lambda (v7379@t) ((lambda (v7381@ls/false) (if v7381@ls/false (apply (lambda (v7383@ctxt v7384@imp*) (call-with-values (lambda () (v2874@parse-import-spec* (v3012@syntax->datum v7384@imp*))) (lambda (v7389@v7387@subst-names v7390@v7388@subst-labels) ((lambda (v7393@subst-labels v7394@subst-names) (values (vector-map (lambda (v7397@name) (v2242@datum->stx v7383@ctxt v7397@name)) v7394@subst-names) v7393@subst-labels)) v7390@v7388@subst-labels v7389@v7387@subst-names)))) v7381@ls/false) ((lambda (v7399@t) ((lambda (v7401@ls/false) (if v7401@ls/false (apply (lambda () (v3006@syntax-violation '#f '"invalid import form" v7377@e)) v7401@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v7399@t))) (v2773@syntax-dispatch v7399@t '_))) v7379@t))) (v2773@syntax-dispatch v7379@t '(any . each-any)))) v7377@e))) (begin (call-with-values (lambda () (if (v7358@module-import? v7218@e) (v7360@module-import v7218@e v7199@r) (v7362@library-import v7218@e))) (lambda (v7365@v7363@id* v7366@v7364@lab*) ((lambda (v7369@lab* v7370@id*) (vector-for-each (lambda (v7373@id v7374@lab) (v2197@extend-rib! v7206@rib v7373@id v7374@lab)) v7370@id* v7369@lab*)) v7366@v7364@lab* v7365@v7363@id*))) (v2864@chi-body* (cdr v7198@e*) v7199@r v7200@mr v7201@lex* v7202@rhs* v7203@mod** v7235@kwd* v7205@exp* v7206@rib v7207@top?)))) '#f '#f '#f))) (if v7207@top? (v2864@chi-body* (cdr v7198@e*) v7199@r v7200@mr (cons (v2148@gen-lexical 'dummy) v7201@lex*) (cons (cons 'top-expr v7218@e) v7202@rhs*) v7203@mod** v7235@kwd* v7205@exp* v7206@rib v7207@top?) (values v7198@e* v7199@r v7200@mr v7201@lex* v7202@rhs* v7203@mod** v7235@kwd* v7205@exp*)))))))))))))) v7231@type)) (if (v2276@id? v7229@kwd) (cons v7229@kwd v7204@kwd*) v7204@kwd*))) v7225@v7222@kwd v7224@v7221@value v7223@v7220@type)))) (car v7198@e*))))) (set! v2866@expand-transformer (lambda (v7454@expr v7455@r) ((lambda (v7458@rtc) ((lambda (v7460@expanded-rhs) (begin (for-each ((lambda (v7462@mark-visit) (lambda (v7464@x) (begin (v1802@v1457@invoke-library v7464@x) (v7462@mark-visit v7464@x)))) (v2882@vis-collector)) (v7458@rtc)) v7460@expanded-rhs)) ((lambda (v7470@v7466@inv-collector v7471@v7467@vis-collector v7472@v7468@inv-collector v7473@v7469@vis-collector) ((lambda (v7478@swap) (dynamic-wind v7478@swap (lambda () (v2807@chi-expr v7454@expr v7455@r v7455@r)) v7478@swap)) (lambda () (begin ((lambda (v7480@t) (begin (v7470@v7466@inv-collector v7472@v7468@inv-collector) (set! v7472@v7468@inv-collector v7480@t))) (v7470@v7466@inv-collector)) ((lambda (v7482@t) (begin (v7471@v7467@vis-collector v7473@v7469@vis-collector) (set! v7473@v7469@vis-collector v7482@t))) (v7471@v7467@vis-collector)))))) v2880@inv-collector v2882@vis-collector v7458@rtc (lambda (v7484@x) (values))))) (v2878@make-collector)))) (set! v2868@parse-exports (lambda (v7486@exp*) ((letrec ((v7488@f (lambda (v7490@exp* v7491@int* v7492@ext*) (if (null? v7490@exp*) (begin (if (not (v2286@valid-bound-ids? v7492@ext*)) (v3006@syntax-violation 'export '"invalid exports" (v2827@find-dups v7492@ext*)) (void)) (values (map v3012@syntax->datum v7492@ext*) v7491@int*)) ((lambda (v7496@t) ((lambda (v7498@ls/false) (if v7498@ls/false (apply (lambda (v7500@rename v7501@i* v7502@e*) (begin (if (not (and (eq? (v3012@syntax->datum v7500@rename) 'rename) (for-all v2276@id? v7501@i*) (for-all v2276@id? v7502@e*))) (v3006@syntax-violation 'export '"invalid export specifier" (car v7490@exp*)) (void)) (v7488@f (cdr v7490@exp*) (append v7501@i* v7491@int*) (append v7502@e* v7492@ext*)))) v7498@ls/false) ((lambda (v7506@t) ((lambda (v7508@ls/false) (if v7508@ls/false (apply (lambda (v7510@ie) (begin (if (not (v2276@id? v7510@ie)) (v3006@syntax-violation 'export '"invalid export" v7510@ie) (void)) (v7488@f (cdr v7490@exp*) (cons v7510@ie v7491@int*) (cons v7510@ie v7492@ext*)))) v7508@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v7506@t))) (v2773@syntax-dispatch v7506@t 'any))) v7496@t))) (v2773@syntax-dispatch v7496@t '(any . #(each (any any)))))) (car v7490@exp*)))))) v7488@f) v7486@exp* '() '()))) (set! v2870@parse-library-name (lambda (v7512@spec) ((lambda (v7515@parse) (begin (set! v7515@parse (lambda (v7526@x) ((lambda (v7528@t) ((lambda (v7530@ls/false) (if (and v7530@ls/false (apply (lambda (v7532@v*) (for-all (lambda (v7534@x) ((lambda (v7536@x) (and (integer? v7536@x) (exact? v7536@x))) (v3012@syntax->datum v7534@x))) v7532@v*)) v7530@ls/false)) (apply (lambda (v7538@v*) (values '() (map v3012@syntax->datum v7538@v*))) v7530@ls/false) ((lambda (v7540@t) ((lambda (v7542@ls/false) (if (and v7542@ls/false (apply (lambda (v7544@x v7545@rest) (symbol? (v3012@syntax->datum v7544@x))) v7542@ls/false)) (apply (lambda (v7548@x v7549@rest) (call-with-values (lambda () (v7515@parse v7549@rest)) (lambda (v7554@v7552@x* v7555@v7553@v*) ((lambda (v7558@v* v7559@x*) (values (cons (v3012@syntax->datum v7548@x) v7559@x*) v7558@v*)) v7555@v7553@v* v7554@v7552@x*)))) v7542@ls/false) ((lambda (v7562@t) ((lambda (v7564@ls/false) (if v7564@ls/false (apply (lambda () (values '() '())) v7564@ls/false) ((lambda (v7566@t) ((lambda (v7568@ls/false) (if v7568@ls/false (apply (lambda () (v3006@syntax-violation '#f '"invalid library name" v7512@spec)) v7568@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v7566@t))) (v2773@syntax-dispatch v7566@t '_))) v7562@t))) (v2773@syntax-dispatch v7562@t '()))) v7540@t))) (v2773@syntax-dispatch v7540@t '(any . any)))) v7528@t))) (v2773@syntax-dispatch v7528@t '(each-any)))) v7526@x))) (call-with-values (lambda () (v7515@parse v7512@spec)) (lambda (v7518@v7516@name* v7519@v7517@ver*) ((lambda (v7522@ver* v7523@name*) (begin (if (null? v7523@name*) (v3006@syntax-violation '#f '"empty library name" v7512@spec) (void)) (values v7523@name* v7522@ver*))) v7519@v7517@ver* v7518@v7516@name*))))) '#f))) (set! v2872@parse-library (lambda (v7570@e) ((lambda (v7572@t) ((lambda (v7574@ls/false) (if (and v7574@ls/false (apply (lambda (v7576@library v7577@name* v7578@export v7579@exp* v7580@import v7581@imp* v7582@b*) (and (eq? (v3012@syntax->datum v7578@export) 'export) (eq? (v3012@syntax->datum v7580@import) 'import) (eq? (v3012@syntax->datum v7576@library) 'library))) v7574@ls/false)) (apply (lambda (v7590@library v7591@name* v7592@export v7593@exp* v7594@import v7595@imp* v7596@b*) (values v7591@name* v7593@exp* v7595@imp* v7596@b*)) v7574@ls/false) ((lambda (v7604@t) ((lambda (v7606@ls/false) (if v7606@ls/false (apply (lambda () (v3006@syntax-violation '#f '"malformed library" v7570@e)) v7606@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v7604@t))) (v2773@syntax-dispatch v7604@t '_))) v7572@t))) (v2773@syntax-dispatch v7572@t '(any each-any (any . each-any) (any . each-any) . each-any)))) v7570@e))) (set! v2874@parse-import-spec* ((lambda () ((lambda (v7609@idsyn? v7611@dup-error v7613@merge-substs v7615@exclude* v7617@find* v7619@rem* v7621@remove-dups v7623@parse-library-name v7625@import-library v7627@get-import v7629@add-imports!) (begin (set! v7609@idsyn? (lambda (v8120@x) (symbol? (v3012@syntax->datum v8120@x)))) (set! v7611@dup-error (lambda (v8118@name) (v3006@syntax-violation 'import '"two imports with different bindings" v8118@name))) (set! v7613@merge-substs (lambda (v8100@s v8101@subst) ((lambda (v8105@insert-to-subst) (begin (set! v8105@insert-to-subst (lambda (v8106@a v8107@subst) ((lambda (v8110@name v8111@label) ((lambda (v8114@t) (if v8114@t ((lambda (v8116@x) (if (eq? (cdr v8116@x) v8111@label) v8107@subst (v7611@dup-error v8110@name))) v8114@t) (cons v8106@a v8107@subst))) (assq v8110@name v8107@subst))) (car v8106@a) (cdr v8106@a)))) (if (null? v8100@s) v8101@subst (v8105@insert-to-subst (car v8100@s) (v7613@merge-substs (cdr v8100@s) v8101@subst))))) '#f))) (set! v7615@exclude* (lambda (v8058@sym* v8059@subst) ((lambda (v8063@exclude) (begin (set! v8063@exclude (lambda (v8084@sym v8085@subst) (if (null? v8085@subst) (v3006@syntax-violation 'import '"cannot rename unbound identifier" v8084@sym) (if (eq? v8084@sym (caar v8085@subst)) (values (cdar v8085@subst) (cdr v8085@subst)) ((lambda (v8088@a) (call-with-values (lambda () (v8063@exclude v8084@sym (cdr v8085@subst))) (lambda (v8092@v8090@old v8093@v8091@subst) ((lambda (v8096@subst v8097@old) (values v8097@old (cons v8088@a v8096@subst))) v8093@v8091@subst v8092@v8090@old)))) (car v8085@subst)))))) (if (null? v8058@sym*) (values '() v8059@subst) (call-with-values (lambda () (v8063@exclude (car v8058@sym*) v8059@subst)) (lambda (v8066@v8064@old v8067@v8065@subst) ((lambda (v8070@subst v8071@old) (call-with-values (lambda () (v7615@exclude* (cdr v8058@sym*) v8070@subst)) (lambda (v8076@v8074@old* v8077@v8075@subst) ((lambda (v8080@subst v8081@old*) (values (cons v8071@old v8081@old*) v8080@subst)) v8077@v8075@subst v8076@v8074@old*)))) v8067@v8065@subst v8066@v8064@old)))))) '#f))) (set! v7617@find* (lambda (v8050@sym* v8051@subst) (map (lambda (v8054@x) ((lambda (v8056@t) (if v8056@t (cdr v8056@t) (v3006@syntax-violation 'import '"cannot find identifier" v8054@x))) (assq v8054@x v8051@subst))) v8050@sym*))) (set! v7619@rem* (lambda (v8042@sym* v8043@subst) ((letrec ((v8046@f (lambda (v8048@subst) (if (null? v8048@subst) '() (if (memq (caar v8048@subst) v8042@sym*) (v8046@f (cdr v8048@subst)) (cons (car v8048@subst) (v8046@f (cdr v8048@subst)))))))) v8046@f) v8043@subst))) (set! v7621@remove-dups (lambda (v8040@ls) (if (null? v8040@ls) '() (if (memq (car v8040@ls) (cdr v8040@ls)) (v7621@remove-dups (cdr v8040@ls)) (cons (car v8040@ls) (v7621@remove-dups (cdr v8040@ls))))))) (set! v7623@parse-library-name (lambda (v7810@spec) ((lambda (v7813@subversion? v7815@subversion-pred v7817@version-pred) (begin (set! v7813@subversion? (lambda (v8036@x) ((lambda (v8038@x) (and (integer? v8038@x) (exact? v8038@x) (>= v8038@x '0))) (v3012@syntax->datum v8036@x)))) (set! v7815@subversion-pred (lambda (v7940@x*) ((lambda (v7942@t) ((lambda (v7944@ls/false) (if (and v7944@ls/false (apply (lambda (v7946@n) (v7813@subversion? v7946@n)) v7944@ls/false)) (apply (lambda (v7948@n) (lambda (v7950@x) (= v7950@x (v3012@syntax->datum v7948@n)))) v7944@ls/false) ((lambda (v7952@t) ((lambda (v7954@ls/false) (if (and v7954@ls/false (apply (lambda (v7956@p? v7957@sub*) (eq? (v3012@syntax->datum v7956@p?) 'and)) v7954@ls/false)) (apply (lambda (v7960@p? v7961@sub*) ((lambda (v7964@p*) (lambda (v7966@x) (for-all (lambda (v7968@p) (v7968@p v7966@x)) v7964@p*))) (map v7815@subversion-pred v7961@sub*))) v7954@ls/false) ((lambda (v7970@t) ((lambda (v7972@ls/false) (if (and v7972@ls/false (apply (lambda (v7974@p? v7975@sub*) (eq? (v3012@syntax->datum v7974@p?) 'or)) v7972@ls/false)) (apply (lambda (v7978@p? v7979@sub*) ((lambda (v7982@p*) (lambda (v7984@x) (exists (lambda (v7986@p) (v7986@p v7984@x)) v7982@p*))) (map v7815@subversion-pred v7979@sub*))) v7972@ls/false) ((lambda (v7988@t) ((lambda (v7990@ls/false) (if (and v7990@ls/false (apply (lambda (v7992@p? v7993@sub) (eq? (v3012@syntax->datum v7992@p?) 'not)) v7990@ls/false)) (apply (lambda (v7996@p? v7997@sub) ((lambda (v8000@p) (lambda (v8002@x) (not (v8000@p v8002@x)))) (v7815@subversion-pred v7997@sub))) v7990@ls/false) ((lambda (v8004@t) ((lambda (v8006@ls/false) (if (and v8006@ls/false (apply (lambda (v8008@p? v8009@n) (and (eq? (v3012@syntax->datum v8008@p?) '<=) (v7813@subversion? v8009@n))) v8006@ls/false)) (apply (lambda (v8012@p? v8013@n) (lambda (v8016@x) (<= v8016@x (v3012@syntax->datum v8013@n)))) v8006@ls/false) ((lambda (v8018@t) ((lambda (v8020@ls/false) (if (and v8020@ls/false (apply (lambda (v8022@p? v8023@n) (and (eq? (v3012@syntax->datum v8022@p?) '>=) (v7813@subversion? v8023@n))) v8020@ls/false)) (apply (lambda (v8026@p? v8027@n) (lambda (v8030@x) (>= v8030@x (v3012@syntax->datum v8027@n)))) v8020@ls/false) ((lambda (v8032@t) ((lambda (v8034@ls/false) (if v8034@ls/false (apply (lambda () (v3006@syntax-violation 'import '"invalid sub-version spec" v7810@spec v7940@x*)) v8034@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v8032@t))) (v2773@syntax-dispatch v8032@t '_))) v8018@t))) (v2773@syntax-dispatch v8018@t '(any any)))) v8004@t))) (v2773@syntax-dispatch v8004@t '(any any)))) v7988@t))) (v2773@syntax-dispatch v7988@t '(any any)))) v7970@t))) (v2773@syntax-dispatch v7970@t '(any . each-any)))) v7952@t))) (v2773@syntax-dispatch v7952@t '(any . each-any)))) v7942@t))) (v2773@syntax-dispatch v7942@t 'any))) v7940@x*))) (set! v7817@version-pred (lambda (v7860@x*) ((lambda (v7862@t) ((lambda (v7864@ls/false) (if v7864@ls/false (apply (lambda () (lambda (v7866@x) '#t)) v7864@ls/false) ((lambda (v7868@t) ((lambda (v7870@ls/false) (if (and v7870@ls/false (apply (lambda (v7872@c v7873@ver*) (eq? (v3012@syntax->datum v7872@c) 'and)) v7870@ls/false)) (apply (lambda (v7876@c v7877@ver*) ((lambda (v7880@p*) (lambda (v7882@x) (for-all (lambda (v7884@p) (v7884@p v7882@x)) v7880@p*))) (map v7817@version-pred v7877@ver*))) v7870@ls/false) ((lambda (v7886@t) ((lambda (v7888@ls/false) (if (and v7888@ls/false (apply (lambda (v7890@c v7891@ver*) (eq? (v3012@syntax->datum v7890@c) 'or)) v7888@ls/false)) (apply (lambda (v7894@c v7895@ver*) ((lambda (v7898@p*) (lambda (v7900@x) (exists (lambda (v7902@p) (v7902@p v7900@x)) v7898@p*))) (map v7817@version-pred v7895@ver*))) v7888@ls/false) ((lambda (v7904@t) ((lambda (v7906@ls/false) (if (and v7906@ls/false (apply (lambda (v7908@c v7909@ver) (eq? (v3012@syntax->datum v7908@c) 'not)) v7906@ls/false)) (apply (lambda (v7912@c v7913@ver) ((lambda (v7916@p) (lambda (v7918@x) (not (v7916@p v7918@x)))) (v7817@version-pred v7913@ver))) v7906@ls/false) ((lambda (v7920@t) ((lambda (v7922@ls/false) (if v7922@ls/false (apply (lambda (v7924@sub*) ((lambda (v7926@p*) (lambda (v7928@x) ((letrec ((v7930@f (lambda (v7932@p* v7933@x) (if (null? v7932@p*) '#t (if (null? v7933@x) '#f (and ((car v7932@p*) (car v7933@x)) (v7930@f (cdr v7932@p*) (cdr v7933@x)))))))) v7930@f) v7926@p* v7928@x))) (map v7815@subversion-pred v7924@sub*))) v7922@ls/false) ((lambda (v7936@t) ((lambda (v7938@ls/false) (if v7938@ls/false (apply (lambda () (v3006@syntax-violation 'import '"invalid version spec" v7810@spec v7860@x*)) v7938@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v7936@t))) (v2773@syntax-dispatch v7936@t '_))) v7920@t))) (v2773@syntax-dispatch v7920@t 'each-any))) v7904@t))) (v2773@syntax-dispatch v7904@t '(any any)))) v7886@t))) (v2773@syntax-dispatch v7886@t '(any . each-any)))) v7868@t))) (v2773@syntax-dispatch v7868@t '(any . each-any)))) v7862@t))) (v2773@syntax-dispatch v7862@t '()))) v7860@x*))) ((letrec ((v7818@f (lambda (v7820@x) ((lambda (v7822@t) ((lambda (v7824@ls/false) (if v7824@ls/false (apply (lambda (v7826@version-spec*) (values '() (v7817@version-pred v7826@version-spec*))) v7824@ls/false) ((lambda (v7828@t) ((lambda (v7830@ls/false) (if (and v7830@ls/false (apply (lambda (v7832@x v7833@x*) (v7609@idsyn? v7832@x)) v7830@ls/false)) (apply (lambda (v7836@x v7837@x*) (call-with-values (lambda () (v7818@f v7837@x*)) (lambda (v7842@v7840@name v7843@v7841@pred) ((lambda (v7846@pred v7847@name) (values (cons (v3012@syntax->datum v7836@x) v7847@name) v7846@pred)) v7843@v7841@pred v7842@v7840@name)))) v7830@ls/false) ((lambda (v7850@t) ((lambda (v7852@ls/false) (if v7852@ls/false (apply (lambda () (values '() (lambda (v7854@x) '#t))) v7852@ls/false) ((lambda (v7856@t) ((lambda (v7858@ls/false) (if v7858@ls/false (apply (lambda () (v3006@syntax-violation '#f '"invalid import spec" v7810@spec)) v7858@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v7856@t))) (v2773@syntax-dispatch v7856@t '_))) v7850@t))) (v2773@syntax-dispatch v7850@t '()))) v7828@t))) (v2773@syntax-dispatch v7828@t '(any . any)))) v7822@t))) (v2773@syntax-dispatch v7822@t '(each-any)))) v7820@x)))) v7818@f) v7810@spec))) '#f '#f '#f))) (set! v7625@import-library (lambda (v7796@spec*) (call-with-values (lambda () (v7623@parse-library-name v7796@spec*)) (lambda (v7800@v7798@name v7801@v7799@pred) ((lambda (v7804@pred v7805@name) (begin (if (null? v7805@name) (v3006@syntax-violation 'import '"empty library name" v7796@spec*) (void)) ((lambda (v7808@lib) (begin (if (not v7808@lib) (v3006@syntax-violation 'import '"cannot find library with required name" v7805@name) (void)) (if (not (v7804@pred (v1755@v1363@library-version v7808@lib))) (v3006@syntax-violation 'import '"library does not satisfy version specification" v7796@spec* v7808@lib) (void)) ((v2884@imp-collector) v7808@lib) (v1759@v1371@library-subst v7808@lib))) (v1795@v1443@find-library-by-name v7805@name)))) v7801@v7799@pred v7800@v7798@name))))) (set! v7627@get-import (lambda (v7654@spec) ((lambda (v7656@t) ((lambda (v7658@ls/false) (if (and v7658@ls/false (apply (lambda (v7660@x v7661@x*) (not (memq (v3012@syntax->datum v7660@x) '(for rename except only prefix library)))) v7658@ls/false)) (apply (lambda (v7664@x v7665@x*) (v7625@import-library (cons v7664@x v7665@x*))) v7658@ls/false) ((lambda (v7668@t) ((lambda (v7670@ls/false) (if (and v7670@ls/false (apply (lambda (v7672@rename v7673@isp v7674@old* v7675@new*) (and (eq? (v3012@syntax->datum v7672@rename) 'rename) (for-all v7609@idsyn? v7674@old*) (for-all v7609@idsyn? v7675@new*))) v7670@ls/false)) (apply (lambda (v7680@rename v7681@isp v7682@old* v7683@new*) ((lambda (v7688@subst v7689@old* v7690@new*) ((lambda (v7694@old-label*) ((lambda (v7696@subst) (v7613@merge-substs (map cons v7690@new* v7694@old-label*) v7696@subst)) (v7619@rem* v7689@old* v7688@subst))) (v7617@find* v7689@old* v7688@subst))) (v7627@get-import v7681@isp) (map v3012@syntax->datum v7682@old*) (map v3012@syntax->datum v7683@new*))) v7670@ls/false) ((lambda (v7698@t) ((lambda (v7700@ls/false) (if (and v7700@ls/false (apply (lambda (v7702@except v7703@isp v7704@sym*) (and (eq? (v3012@syntax->datum v7702@except) 'except) (for-all v7609@idsyn? v7704@sym*))) v7700@ls/false)) (apply (lambda (v7708@except v7709@isp v7710@sym*) ((lambda (v7714@subst) (v7619@rem* (map v3012@syntax->datum v7710@sym*) v7714@subst)) (v7627@get-import v7709@isp))) v7700@ls/false) ((lambda (v7716@t) ((lambda (v7718@ls/false) (if (and v7718@ls/false (apply (lambda (v7720@only v7721@isp v7722@sym*) (and (eq? (v3012@syntax->datum v7720@only) 'only) (for-all v7609@idsyn? v7722@sym*))) v7718@ls/false)) (apply (lambda (v7726@only v7727@isp v7728@sym*) ((lambda (v7732@subst v7733@sym*) ((lambda (v7736@sym*) ((lambda (v7738@lab*) (map cons v7736@sym* v7738@lab*)) (v7617@find* v7736@sym* v7732@subst))) (v7621@remove-dups v7733@sym*))) (v7627@get-import v7727@isp) (map v3012@syntax->datum v7728@sym*))) v7718@ls/false) ((lambda (v7740@t) ((lambda (v7742@ls/false) (if (and v7742@ls/false (apply (lambda (v7744@prefix v7745@isp v7746@p) (and (eq? (v3012@syntax->datum v7744@prefix) 'prefix) (v7609@idsyn? v7746@p))) v7742@ls/false)) (apply (lambda (v7750@prefix v7751@isp v7752@p) ((lambda (v7756@subst v7757@prefix) (map (lambda (v7760@x) (cons (string->symbol (string-append v7757@prefix (symbol->string (car v7760@x)))) (cdr v7760@x))) v7756@subst)) (v7627@get-import v7751@isp) (symbol->string (v3012@syntax->datum v7752@p)))) v7742@ls/false) ((lambda (v7762@t) ((lambda (v7764@ls/false) (if (and v7764@ls/false (apply (lambda (v7766@library v7767@spec*) (eq? (v3012@syntax->datum v7766@library) 'library)) v7764@ls/false)) (apply (lambda (v7770@library v7771@spec*) (v7625@import-library v7771@spec*)) v7764@ls/false) ((lambda (v7774@t) ((lambda (v7776@ls/false) (if (and v7776@ls/false (apply (lambda (v7778@for v7779@isp v7780@rest) (eq? (v3012@syntax->datum v7778@for) 'for)) v7776@ls/false)) (apply (lambda (v7784@for v7785@isp v7786@rest) (v7627@get-import v7785@isp)) v7776@ls/false) ((lambda (v7790@t) ((lambda (v7792@ls/false) (if v7792@ls/false (apply (lambda (v7794@spec) (v3006@syntax-violation 'import '"invalid import spec" v7794@spec)) v7792@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v7790@t))) (v2773@syntax-dispatch v7790@t 'any))) v7774@t))) (v2773@syntax-dispatch v7774@t '(any any . any)))) v7762@t))) (v2773@syntax-dispatch v7762@t '(any each-any)))) v7740@t))) (v2773@syntax-dispatch v7740@t '(any any any)))) v7716@t))) (v2773@syntax-dispatch v7716@t '(any any . each-any)))) v7698@t))) (v2773@syntax-dispatch v7698@t '(any any . each-any)))) v7668@t))) (v2773@syntax-dispatch v7668@t '(any any . #(each (any any)))))) v7656@t))) (v2773@syntax-dispatch v7656@t '(any . each-any)))) v7654@spec))) (set! v7629@add-imports! (lambda (v7638@imp v7639@h) ((lambda (v7642@subst) (for-each (lambda (v7644@x) ((lambda (v7646@name v7647@label) ((lambda (v7650@t) (if v7650@t ((lambda (v7652@l) (if (not (eq? v7652@l v7647@label)) (v7611@dup-error v7646@name) (void))) v7650@t) (hashtable-set! v7639@h v7646@name v7647@label))) (hashtable-ref v7639@h v7646@name '#f))) (car v7644@x) (cdr v7644@x))) v7642@subst)) (v7627@get-import v7638@imp)))) (lambda (v7630@imp*) ((letrec ((v7632@f (lambda (v7634@imp* v7635@h) (if (null? v7634@imp*) (hashtable-entries v7635@h) (begin (v7629@add-imports! (car v7634@imp*) v7635@h) (v7632@f (cdr v7634@imp*) v7635@h)))))) v7632@f) v7630@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! v2876@make-top-rib (lambda (v8122@names v8123@labels) ((lambda (v8126@rib) (begin (vector-for-each (lambda (v8128@name v8129@label) (begin (if (not (symbol? v8128@name)) (error 'make-top-rib '"BUG: not a symbol" v8128@name) (void)) (v2199@extend-rib/nc! v8126@rib (v2222@make-stx v8128@name v2144@top-mark* '() '()) v8129@label))) v8122@names v8123@labels) v8126@rib)) (v2195@make-empty-rib)))) (set! v2878@make-collector (lambda () ((lambda (v8132@ls) (lambda v8136 ((lambda (v8137) (if (= v8137 '0) (apply (lambda () v8132@ls) v8136) (if (= v8137 '1) (apply (lambda (v8134@x) (set! v8132@ls (v2137@set-cons v8134@x v8132@ls))) v8136) (error 'apply '"invalid arg count")))) (length v8136)))) '()))) (set! v2880@inv-collector (v1174@v952@make-parameter (lambda v8138@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (v8140@x) (begin (if (not (procedure? v8140@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" v8140@x) (void)) v8140@x)))) (set! v2882@vis-collector (v1174@v952@make-parameter (lambda v8142@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (v8144@x) (begin (if (not (procedure? v8144@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" v8144@x) (void)) v8144@x)))) (set! v2884@imp-collector (v1174@v952@make-parameter (lambda v8146@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (v8148@x) (begin (if (not (procedure? v8148@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" v8148@x) (void)) v8148@x)))) (set! v2886@chi-library-internal (lambda (v8150@e* v8151@rib v8152@top?) (call-with-values (lambda () (v2864@chi-body* v8150@e* '() '() '() '() '() '() '() v8151@rib v8152@top?)) (lambda (v8164@v8156@e* v8165@v8157@r v8166@v8158@mr v8167@v8159@lex* v8168@v8160@rhs* v8169@v8161@mod** v8170@v8162@_kwd* v8171@v8163@exp*) ((lambda (v8180@exp* v8181@_kwd* v8182@mod** v8183@rhs* v8184@lex* v8185@mr v8186@r v8187@e*) (values (append (apply append (reverse v8182@mod**)) v8187@e*) v8186@r v8185@mr (reverse v8184@lex*) (reverse v8183@rhs*) v8180@exp*)) v8171@v8163@exp* v8170@v8162@_kwd* v8169@v8161@mod** v8168@v8160@rhs* v8167@v8159@lex* v8166@v8158@mr v8165@v8157@r v8164@v8156@e*))))) (set! v2888@chi-interaction-expr (lambda (v8196@e v8197@rib v8198@r) (call-with-values (lambda () (v2864@chi-body* (list v8196@e) v8198@r v8198@r '() '() '() '() '() v8197@rib '#t)) (lambda (v8210@v8202@e* v8211@v8203@r v8212@v8204@mr v8213@v8205@lex* v8214@v8206@rhs* v8215@v8207@mod** v8216@v8208@_kwd* v8217@v8209@_exp*) ((lambda (v8226@_exp* v8227@_kwd* v8228@mod** v8229@rhs* v8230@lex* v8231@mr v8232@r v8233@e*) ((lambda (v8242@e*) ((lambda (v8244@e) (values v8244@e v8232@r)) (if (null? v8242@e*) (v2116@v1974@build-void) (if (null? (cdr v8242@e*)) (car v8242@e*) (v2115@v1972@build-sequence '#f v8242@e*))))) (v2821@expand-interaction-rhs*/init* (reverse v8230@lex*) (reverse v8229@rhs*) (append (apply append (reverse v8228@mod**)) v8233@e*) v8232@r v8231@mr))) v8217@v8209@_exp* v8216@v8208@_kwd* v8215@v8207@mod** v8214@v8206@rhs* v8213@v8205@lex* v8212@v8204@mr v8211@v8203@r v8210@v8202@e*))))) (set! v2890@library-body-expander (lambda (v8246@name v8247@main-exp* v8248@imp* v8249@b* v8250@top?) ((lambda (v8257@itc) (begin (set! v8257@itc (v2878@make-collector)) ((lambda (v8262@v8258@imp-collector v8263@v8259@top-level-context v8264@v8260@imp-collector v8265@v8261@top-level-context) ((lambda (v8270@swap) (dynamic-wind v8270@swap (lambda () (call-with-values (lambda () (v2874@parse-import-spec* v8248@imp*)) (lambda (v8274@v8272@subst-names v8275@v8273@subst-labels) ((lambda (v8278@subst-labels v8279@subst-names) ((lambda (v8282@rib) ((lambda (v8285@wrap) (begin (set! v8285@wrap (lambda (v8393@x) (v2222@make-stx v8393@x v2144@top-mark* (list v8282@rib) '()))) ((lambda (v8286@b* v8287@main-exp* v8288@rtc v8289@vtc) ((lambda (v8298@v8294@inv-collector v8299@v8295@vis-collector v8300@v8296@inv-collector v8301@v8297@vis-collector) ((lambda (v8306@swap) (dynamic-wind v8306@swap (lambda () (call-with-values (lambda () (v2886@chi-library-internal v8286@b* v8282@rib v8250@top?)) (lambda (v8314@v8308@init* v8315@v8309@r v8316@v8310@mr v8317@v8311@lex* v8318@v8312@rhs* v8319@v8313@internal-exp*) ((lambda (v8326@internal-exp* v8327@rhs* v8328@lex* v8329@mr v8330@r v8331@init*) (call-with-values (lambda () (v2868@parse-exports (append v8287@main-exp* v8326@internal-exp*))) (lambda (v8340@v8338@exp-name* v8341@v8339@exp-id*) ((lambda (v8344@exp-id* v8345@exp-name*) (begin (v2203@seal-rib! v8282@rib) ((lambda (v8348@init*) ((lambda (v8350@rhs*) ((lambda () (begin (v2205@unseal-rib! v8282@rib) ((lambda (v8352@loc* v8353@export-subst) ((lambda (v8357@errstr) (begin (set! v8357@errstr '"attempt to export mutated variable") (call-with-values (lambda () (v2986@make-export-env/macros v8328@lex* v8352@loc* v8330@r)) (lambda (v8361@v8358@export-env v8362@v8359@global* v8363@v8360@macro*) ((lambda (v8367@macro* v8368@global* v8369@export-env) (begin (for-each (lambda (v8373@s) ((lambda (v8375@name v8376@label) ((lambda (v8379@p) (if v8379@p ((lambda (v8381@b) ((lambda (v8383@type) (if (eq? v8383@type 'mutable) (v3006@syntax-violation 'export v8357@errstr v8375@name) (void))) (car v8381@b))) (cdr v8379@p)) (void))) (assq v8376@label v8369@export-env))) (car v8373@s) (cdr v8373@s))) v8353@export-subst) ((lambda (v8385@invoke-body v8386@invoke-definitions) (values (v8257@itc) (v8288@rtc) (v8289@vtc) (v2115@v1972@build-sequence '#f (append v8386@invoke-definitions (list v8385@invoke-body))) v8367@macro* v8353@export-subst v8369@export-env)) (v2118@v1978@build-letrec* '#f v8328@lex* v8350@rhs* (v2982@build-exports v8368@global* v8348@init*)) (map v2111@v1809@build-global-define (map cdr v8368@global*))))) v8363@v8360@macro* v8362@v8359@global* v8361@v8358@export-env))))) '#f)) (map v2150@gen-global v8328@lex*) (v2984@make-export-subst v8345@exp-name* v8344@exp-id*)))))) (v2823@chi-rhs* v8327@rhs* v8330@r v8329@mr))) (v2803@chi-expr* v8331@init* v8330@r v8329@mr)))) v8341@v8339@exp-id* v8340@v8338@exp-name*)))) v8319@v8313@internal-exp* v8318@v8312@rhs* v8317@v8311@lex* v8316@v8310@mr v8315@v8309@r v8314@v8308@init*)))) v8306@swap)) (lambda () (begin ((lambda (v8389@t) (begin (v8298@v8294@inv-collector v8300@v8296@inv-collector) (set! v8300@v8296@inv-collector v8389@t))) (v8298@v8294@inv-collector)) ((lambda (v8391@t) (begin (v8299@v8295@vis-collector v8301@v8297@vis-collector) (set! v8301@v8297@vis-collector v8391@t))) (v8299@v8295@vis-collector)))))) v2880@inv-collector v2882@vis-collector v8288@rtc v8289@vtc)) (map v8285@wrap v8249@b*) (map v8285@wrap v8247@main-exp*) (v2878@make-collector) (v2878@make-collector)))) '#f)) (v2876@make-top-rib v8279@subst-names v8278@subst-labels))) v8275@v8273@subst-labels v8274@v8272@subst-names)))) v8270@swap)) (lambda () (begin ((lambda (v8395@t) (begin (v8262@v8258@imp-collector v8264@v8260@imp-collector) (set! v8264@v8260@imp-collector v8395@t))) (v8262@v8258@imp-collector)) ((lambda (v8397@t) (begin (v8263@v8259@top-level-context v8265@v8261@top-level-context) (set! v8265@v8261@top-level-context v8397@t))) (v8263@v8259@top-level-context)))))) v2884@imp-collector v3020@top-level-context v8257@itc '#f))) '#f))) (set! v2892@core-library-expander (lambda (v8399@e v8400@verify-name) (call-with-values (lambda () (v2872@parse-library v8399@e)) (lambda (v8407@v8403@name* v8408@v8404@exp* v8409@v8405@imp* v8410@v8406@b*) ((lambda (v8415@b* v8416@imp* v8417@exp* v8418@name*) (call-with-values (lambda () (v2870@parse-library-name v8418@name*)) (lambda (v8425@v8423@name v8426@v8424@ver) ((lambda (v8429@ver v8430@name) (begin (v8400@verify-name v8430@name) (call-with-values (lambda () (v2890@library-body-expander v8430@name v8417@exp* v8416@imp* v8415@b* '#f)) (lambda (v8440@v8433@imp* v8441@v8434@invoke-req* v8442@v8435@visit-req* v8443@v8436@invoke-code v8444@v8437@visit-code v8445@v8438@export-subst v8446@v8439@export-env) ((lambda (v8454@export-env v8455@export-subst v8456@visit-code v8457@invoke-code v8458@visit-req* v8459@invoke-req* v8460@imp*) (values v8430@name v8429@ver v8460@imp* v8459@invoke-req* v8458@visit-req* v8457@invoke-code v8456@visit-code v8455@export-subst v8454@export-env)) v8446@v8439@export-env v8445@v8438@export-subst v8444@v8437@visit-code v8443@v8436@invoke-code v8442@v8435@visit-req* v8441@v8434@invoke-req* v8440@v8433@imp*))))) v8426@v8424@ver v8425@v8423@name)))) v8410@v8406@b* v8409@v8405@imp* v8408@v8404@exp* v8407@v8403@name*))))) (set! v2894@parse-top-level-program (lambda (v8468@e*) ((lambda (v8470@t) ((lambda (v8472@ls/false) (if (and v8472@ls/false (apply (lambda (v8474@import v8475@imp* v8476@b*) (eq? (v3012@syntax->datum v8474@import) 'import)) v8472@ls/false)) (apply (lambda (v8480@import v8481@imp* v8482@b*) (values v8481@imp* v8482@b*)) v8472@ls/false) ((lambda (v8486@t) ((lambda (v8488@ls/false) (if (and v8488@ls/false (apply (lambda (v8490@import v8491@x v8492@y) (eq? (v3012@syntax->datum v8490@import) 'import)) v8488@ls/false)) (apply (lambda (v8496@import v8497@x v8498@y) (v3006@syntax-violation 'expander '"invalid syntax of top-level program" (v2270@syntax-car v8468@e*))) v8488@ls/false) ((lambda (v8502@t) ((lambda (v8504@ls/false) (if v8504@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) v8504@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v8502@t))) (v2773@syntax-dispatch v8502@t '_))) v8486@t))) (v2773@syntax-dispatch v8486@t '((any . any) . any)))) v8470@t))) (v2773@syntax-dispatch v8470@t '((any . each-any) . each-any)))) v8468@e*))) (set! v2896@top-level-expander (lambda (v8506@e*) (call-with-values (lambda () (v2894@parse-top-level-program v8506@e*)) (lambda (v8510@v8508@imp* v8511@v8509@b*) ((lambda (v8514@b* v8515@imp*) (call-with-values (lambda () (v2890@library-body-expander '() '() v8515@imp* v8514@b* '#t)) (lambda (v8525@v8518@imp* v8526@v8519@invoke-req* v8527@v8520@visit-req* v8528@v8521@invoke-code v8529@v8522@visit-code v8530@v8523@export-subst v8531@v8524@export-env) ((lambda (v8539@export-env v8540@export-subst v8541@visit-code v8542@invoke-code v8543@visit-req* v8544@invoke-req* v8545@imp*) (values v8544@invoke-req* v8542@invoke-code)) v8531@v8524@export-env v8530@v8523@export-subst v8529@v8522@visit-code v8528@v8521@invoke-code v8527@v8520@visit-req* v8526@v8519@invoke-req* v8525@v8518@imp*)))) v8511@v8509@b* v8510@v8508@imp*))))) (set! v2902@v2897 (make-record-type-descriptor 'env '#f 'v2900 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! v2904@v2899 '#f) (set! v2906@v2898 (make-record-constructor-descriptor v2902@v2897 '#f v2904@v2899)) (set! v2909@env? (record-predicate v2902@v2897)) (set! v2911@make-env (record-constructor v2906@v2898)) (set! v2913@env-names (record-accessor v2902@v2897 '0)) (set! v2915@env-labels (record-accessor v2902@v2897 '1)) (set! v2917@env-itc (record-accessor v2902@v2897 '2)) (set! v2919@set-env-names! (record-mutator v2902@v2897 '0)) (set! v2921@set-env-labels! (record-mutator v2902@v2897 '1)) (set! v2923@set-env-itc! (record-mutator v2902@v2897 '2)) (set! v2925@rp (v1171@v946@make-record-printer 'env (lambda (v8553@x v8554@p v8555@wr) (display '"#<environment>" v8554@p)))) (set! v2931@v2926 (make-record-type-descriptor 'interaction-env '#f 'v2929 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! v2933@v2928 '#f) (set! v2935@v2927 (make-record-constructor-descriptor v2931@v2926 '#f v2933@v2928)) (set! v2938@interaction-env? (record-predicate v2931@v2926)) (set! v2940@make-interaction-env (record-constructor v2935@v2927)) (set! v2942@interaction-env-rib (record-accessor v2931@v2926 '0)) (set! v2944@interaction-env-r (record-accessor v2931@v2926 '1)) (set! v2946@interaction-env-locs (record-accessor v2931@v2926 '2)) (set! v2948@set-interaction-env-rib! (record-mutator v2931@v2926 '0)) (set! v2950@set-interaction-env-r! (record-mutator v2931@v2926 '1)) (set! v2952@set-interaction-env-locs! (record-mutator v2931@v2926 '2)) (set! v2954@rp (v1171@v946@make-record-printer 'interaction-env (lambda (v8559@x v8560@p v8561@wr) (display '"#<environment>" v8560@p)))) (set! v2956@interaction-environment-symbols (lambda () (v2964@environment-symbols (v3018@interaction-environment)))) (set! v2958@environment-bindings (lambda (v8565@e) (vector->list (vector-map (lambda (v8567@name v8568@label) (v2960@parse-binding (cons v8567@name (v1801@v1455@imported-label->binding v8568@label)))) (v2913@env-names v8565@e) (v2915@env-labels v8565@e))))) (set! v2960@parse-binding (lambda (v8571@b) (cons (car v8571@b) ((lambda (v8573@t) (if (memv v8573@t '(core-prim global)) 'procedure (if (memv v8573@t '(core-macro macro global-macro)) 'syntax (if (memv v8573@t '($core-rtd)) 'record (if (eq? (car v8571@b) (cadr v8571@b)) 'syntax 'unknown))))) (cadr v8571@b))))) (set! v2962@environment? (lambda (v8575@x) (or (v2909@env? v8575@x) (v2938@interaction-env? v8575@x)))) (set! v2964@environment-symbols (lambda (v8577@x) (if (v2909@env? v8577@x) (vector->list (v2913@env-names v8577@x)) (if (v2938@interaction-env? v8577@x) (map values (v2175@rib-sym* (v2942@interaction-env-rib v8577@x))) (assertion-violation 'environment-symbols '"not an environment" v8577@x))))) (set! v2966@environment (lambda v8579@imp* ((lambda (v8581@itc) ((lambda (v8585@v8583@imp-collector v8586@v8584@imp-collector) ((lambda (v8589@swap) (dynamic-wind v8589@swap (lambda () (call-with-values (lambda () (v2874@parse-import-spec* v8579@imp*)) (lambda (v8593@v8591@subst-names v8594@v8592@subst-labels) ((lambda (v8597@subst-labels v8598@subst-names) (v2911@make-env v8598@subst-names v8597@subst-labels v8581@itc)) v8594@v8592@subst-labels v8593@v8591@subst-names)))) v8589@swap)) (lambda () ((lambda (v8601@t) (begin (v8585@v8583@imp-collector v8586@v8584@imp-collector) (set! v8586@v8584@imp-collector v8601@t))) (v8585@v8583@imp-collector))))) v2884@imp-collector v8581@itc)) (v2878@make-collector)))) (set! v2968@null-environment (lambda (v8603@n) (begin (if (not (eqv? v8603@n '5)) (assertion-violation 'null-environment '"not 5" v8603@n) (void)) (v2966@environment '(psyntax null-environment-5))))) (set! v2970@scheme-report-environment (lambda (v8605@n) (begin (if (not (eqv? v8605@n '5)) (assertion-violation 'scheme-report-environment '"not 5" v8605@n) (void)) (v2966@environment '(psyntax scheme-report-environment-5))))) (set! v2972@expand (lambda (v8607@x v8608@env) (if (v2909@env? v8608@env) ((lambda (v8611@rib) ((lambda (v8613@x v8614@itc v8615@rtc v8616@vtc) ((lambda (v8621@x) (begin (v2203@seal-rib! v8611@rib) (values v8621@x (v8615@rtc)))) ((lambda (v8631@v8623@top-level-context v8632@v8624@inv-collector v8633@v8625@vis-collector v8634@v8626@imp-collector v8635@v8627@top-level-context v8636@v8628@inv-collector v8637@v8629@vis-collector v8638@v8630@imp-collector) ((lambda (v8647@swap) (dynamic-wind v8647@swap (lambda () (v2807@chi-expr v8613@x '() '())) v8647@swap)) (lambda () (begin ((lambda (v8649@t) (begin (v8631@v8623@top-level-context v8635@v8627@top-level-context) (set! v8635@v8627@top-level-context v8649@t))) (v8631@v8623@top-level-context)) ((lambda (v8651@t) (begin (v8632@v8624@inv-collector v8636@v8628@inv-collector) (set! v8636@v8628@inv-collector v8651@t))) (v8632@v8624@inv-collector)) ((lambda (v8653@t) (begin (v8633@v8625@vis-collector v8637@v8629@vis-collector) (set! v8637@v8629@vis-collector v8653@t))) (v8633@v8625@vis-collector)) ((lambda (v8655@t) (begin (v8634@v8626@imp-collector v8638@v8630@imp-collector) (set! v8638@v8630@imp-collector v8655@t))) (v8634@v8626@imp-collector)))))) v3020@top-level-context v2880@inv-collector v2882@vis-collector v2884@imp-collector '#f v8615@rtc v8616@vtc v8614@itc))) (v2222@make-stx v8607@x v2144@top-mark* (list v8611@rib) '()) (v2917@env-itc v8608@env) (v2878@make-collector) (v2878@make-collector))) (v2876@make-top-rib (v2913@env-names v8608@env) (v2915@env-labels v8608@env))) (if (v2938@interaction-env? v8608@env) ((lambda (v8657@rib v8658@r v8659@rtc) ((lambda (v8663@x) (call-with-values (lambda () ((lambda (v8675@v8667@top-level-context v8676@v8668@inv-collector v8677@v8669@vis-collector v8678@v8670@imp-collector v8679@v8671@top-level-context v8680@v8672@inv-collector v8681@v8673@vis-collector v8682@v8674@imp-collector) ((lambda (v8691@swap) (dynamic-wind v8691@swap (lambda () (v2888@chi-interaction-expr v8663@x v8657@rib v8658@r)) v8691@swap)) (lambda () (begin ((lambda (v8693@t) (begin (v8675@v8667@top-level-context v8679@v8671@top-level-context) (set! v8679@v8671@top-level-context v8693@t))) (v8675@v8667@top-level-context)) ((lambda (v8695@t) (begin (v8676@v8668@inv-collector v8680@v8672@inv-collector) (set! v8680@v8672@inv-collector v8695@t))) (v8676@v8668@inv-collector)) ((lambda (v8697@t) (begin (v8677@v8669@vis-collector v8681@v8673@vis-collector) (set! v8681@v8673@vis-collector v8697@t))) (v8677@v8669@vis-collector)) ((lambda (v8699@t) (begin (v8678@v8670@imp-collector v8682@v8674@imp-collector) (set! v8682@v8674@imp-collector v8699@t))) (v8678@v8670@imp-collector)))))) v3020@top-level-context v2880@inv-collector v2882@vis-collector v2884@imp-collector v8608@env v8659@rtc (v2878@make-collector) (v2878@make-collector))) (lambda (v8701@v8665@e v8702@v8666@r^) ((lambda (v8705@r^ v8706@e) (begin (v2950@set-interaction-env-r! v8608@env v8705@r^) (values v8706@e (v8659@rtc)))) v8702@v8666@r^ v8701@v8665@e)))) (v2222@make-stx v8607@x v2144@top-mark* (list v8657@rib) '()))) (v2942@interaction-env-rib v8608@env) (v2944@interaction-env-r v8608@env) (v2878@make-collector)) (assertion-violation 'expand '"not an environment" v8608@env))))) (set! v2974@eval (lambda (v8709@x v8710@env) (begin (if (not (v2962@environment? v8710@env)) (error 'eval '"not an environment" v8710@env) (void)) (call-with-values (lambda () (v2972@expand v8709@x v8710@env)) (lambda (v8715@v8713@x v8716@v8714@invoke-req*) ((lambda (v8719@invoke-req* v8720@x) (begin (for-each v1802@v1457@invoke-library v8719@invoke-req*) (eval-core (v1258@v1186@expanded->core v8720@x)))) v8716@v8714@invoke-req* v8715@v8713@x)))))) (set! v2976@library-expander (lambda v8824 ((lambda (v8825) (if (= v8825 '3) (apply (lambda (v8723@x v8724@filename v8725@verify-name) ((lambda (v8730@build-visit-code v8732@visit!) (begin (set! v8730@build-visit-code (lambda (v8806@macro*) (if (null? v8806@macro*) (v2116@v1974@build-void) (v2115@v1972@build-sequence '#f (map (lambda (v8808@x) ((lambda (v8810@loc v8811@src) (list 'set! v8810@loc v8811@src)) (car v8808@x) (cddr v8808@x))) v8806@macro*))))) (set! v8732@visit! (lambda (v8798@macro*) (for-each (lambda (v8800@x) ((lambda (v8802@loc v8803@proc) (set-symbol-value! v8802@loc v8803@proc)) (car v8800@x) (cadr v8800@x))) v8798@macro*))) (call-with-values (lambda () (v2892@core-library-expander v8723@x v8725@verify-name)) (lambda (v8742@v8733@name v8743@v8734@ver v8744@v8735@imp* v8745@v8736@inv* v8746@v8737@vis* v8747@v8738@invoke-code v8748@v8739@macro* v8749@v8740@export-subst v8750@v8741@export-env) ((lambda (v8760@export-env v8761@export-subst v8762@macro* v8763@invoke-code v8764@vis* v8765@inv* v8766@imp* v8767@ver v8768@name) ((lambda (v8778@id v8779@name v8780@ver v8781@imp* v8782@vis* v8783@inv* v8784@visit-proc v8785@invoke-proc v8786@visit-code v8787@invoke-code) (begin (v1800@v1453@install-library v8778@id v8779@name v8780@ver v8781@imp* v8782@vis* v8783@inv* v8761@export-subst v8760@export-env v8784@visit-proc v8785@invoke-proc v8786@visit-code v8787@invoke-code '#t v8724@filename) (values v8778@id v8779@name v8780@ver v8781@imp* v8782@vis* v8783@inv* v8787@invoke-code v8786@visit-code v8761@export-subst v8760@export-env))) (v1160@v924@gensym) v8768@name v8767@ver (map v1806@v1465@library-spec v8766@imp*) (map v1806@v1465@library-spec v8764@vis*) (map v1806@v1465@library-spec v8765@inv*) (lambda () (v8732@visit! v8762@macro*)) (lambda () (eval-core (v1258@v1186@expanded->core v8763@invoke-code))) (v8730@build-visit-code v8762@macro*) v8763@invoke-code)) v8750@v8741@export-env v8749@v8740@export-subst v8748@v8739@macro* v8747@v8738@invoke-code v8746@v8737@vis* v8745@v8736@inv* v8744@v8735@imp* v8743@v8734@ver v8742@v8733@name))))) '#f '#f)) v8824) (if (= v8825 '2) (apply (lambda (v8814@x v8815@filename) (v2976@library-expander v8814@x v8815@filename (lambda (v8818@x) (values)))) v8824) (if (= v8825 '1) (apply (lambda (v8820@x) (v2976@library-expander v8820@x '#f (lambda (v8822@x) (values)))) v8824) (error 'apply '"invalid arg count"))))) (length v8824)))) (set! v2978@boot-library-expand (lambda (v8826@x) (call-with-values (lambda () (v2976@library-expander v8826@x)) (lambda (v8838@v8828@id v8839@v8829@name v8840@v8830@ver v8841@v8831@imp* v8842@v8832@vis* v8843@v8833@inv* v8844@v8834@invoke-code v8845@v8835@visit-code v8846@v8836@export-subst v8847@v8837@export-env) ((lambda (v8858@export-env v8859@export-subst v8860@visit-code v8861@invoke-code v8862@inv* v8863@vis* v8864@imp* v8865@ver v8866@name v8867@id) (values v8866@name v8861@invoke-code v8859@export-subst v8858@export-env)) v8847@v8837@export-env v8846@v8836@export-subst v8845@v8835@visit-code v8844@v8834@invoke-code v8843@v8833@inv* v8842@v8832@vis* v8841@v8831@imp* v8840@v8830@ver v8839@v8829@name v8838@v8828@id))))) (set! v2980@rev-map-append (lambda (v8878@f v8879@ls v8880@ac) (if (null? v8879@ls) v8880@ac (v2980@rev-map-append v8878@f (cdr v8879@ls) (cons (v8878@f (car v8879@ls)) v8880@ac))))) (set! v2982@build-exports (lambda (v8884@lex*+loc* v8885@init*) (v2115@v1972@build-sequence '#f (cons (v2116@v1974@build-void) (v2980@rev-map-append (lambda (v8888@x) (list 'set! (cdr v8888@x) (car v8888@x))) v8884@lex*+loc* v8885@init*))))) (set! v2984@make-export-subst (lambda (v8890@name* v8891@id*) (map (lambda (v8894@name v8895@id) ((lambda (v8898@label) (begin (if (not v8898@label) (v3006@syntax-violation '#f '"cannot export unbound identifier" v8895@id) (void)) (cons v8894@name v8898@label))) (v2302@id->label v8895@id))) v8890@name* v8891@id*))) (set! v2986@make-export-env/macros (lambda (v8900@lex* v8901@loc* v8902@r) ((lambda (v8907@lookup) (begin (set! v8907@lookup (lambda (v8936@x) ((letrec ((v8938@f (lambda (v8940@x v8941@lex* v8942@loc*) (if (pair? v8941@lex*) (if (eq? v8940@x (car v8941@lex*)) (car v8942@loc*) (v8938@f v8940@x (cdr v8941@lex*) (cdr v8942@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) v8938@f) v8936@x v8900@lex* v8901@loc*))) ((letrec ((v8908@f (lambda (v8910@r v8911@env v8912@global* v8913@macro*) (if (null? v8910@r) (values v8911@env v8912@global* v8913@macro*) ((lambda (v8918@x) ((lambda (v8920@label v8921@b) ((lambda (v8924@t) (if (memv v8924@t '(lexical)) ((lambda (v8926@v) ((lambda (v8928@loc v8929@type) (v8908@f (cdr v8910@r) (cons (cons* v8920@label v8929@type v8928@loc) v8911@env) (cons (cons (v2657@lexical-var v8926@v) v8928@loc) v8912@global*) v8913@macro*)) (v8907@lookup (v2657@lexical-var v8926@v)) (if (v2659@lexical-mutable? v8926@v) 'mutable 'global))) (v2312@binding-value v8921@b)) (if (memv v8924@t '(local-macro)) ((lambda (v8932@loc) (v8908@f (cdr v8910@r) (cons (cons* v8920@label 'global-macro v8932@loc) v8911@env) v8912@global* (cons (cons v8932@loc (v2312@binding-value v8921@b)) v8913@macro*))) (v1160@v924@gensym)) (if (memv v8924@t '(local-macro!)) ((lambda (v8934@loc) (v8908@f (cdr v8910@r) (cons (cons* v8920@label 'global-macro! v8934@loc) v8911@env) v8912@global* (cons (cons v8934@loc (v2312@binding-value v8921@b)) v8913@macro*))) (v1160@v924@gensym)) (if (memv v8924@t '($rtd $module)) (v8908@f (cdr v8910@r) (cons v8918@x v8911@env) v8912@global* v8913@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (v2310@binding-type v8921@b) (v2312@binding-value v8921@b))))))) (v2310@binding-type v8921@b))) (car v8918@x) (cdr v8918@x))) (car v8910@r)))))) v8908@f) v8902@r '() '() '()))) '#f))) (set! v2988@generate-temporaries (lambda (v8946@ls) ((lambda (v8948@t) ((lambda (v8950@ls/false) (if v8950@ls/false (apply (lambda (v8952@ls) (map (lambda (v8954@x) (v2222@make-stx ((lambda (v8956@x) (if (or (symbol? v8956@x) (string? v8956@x)) (v1160@v924@gensym v8956@x) (v1160@v924@gensym 't))) (v3012@syntax->datum v8954@x)) v2144@top-mark* '() '())) v8952@ls)) v8950@ls/false) ((lambda (v8958@t) ((lambda (v8960@ls/false) (if v8960@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) v8960@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v8958@t))) (v2773@syntax-dispatch v8958@t '_))) v8948@t))) (v2773@syntax-dispatch v8948@t 'each-any))) v8946@ls))) (set! v2990@free-identifier=? (lambda (v8962@x v8963@y) (if (v2276@id? v8962@x) (if (v2276@id? v8963@y) (v2284@free-id=? v8962@x v8963@y) (assertion-violation 'free-identifier=? '"not an identifier" v8963@y)) (assertion-violation 'free-identifier=? '"not an identifier" v8962@x)))) (set! v2992@bound-identifier=? (lambda (v8966@x v8967@y) (if (v2276@id? v8966@x) (if (v2276@id? v8967@y) (v2282@bound-id=? v8966@x v8967@y) (assertion-violation 'bound-identifier=? '"not an identifier" v8967@y)) (assertion-violation 'bound-identifier=? '"not an identifier" v8966@x)))) (set! v2994@make-source-condition (lambda (v8970@x) ((lambda (v8980@v8975 v8982@v8977 v8984@v8976 v8987@v8974 v8989@make-source-condition v8991@v8972 v8993@v8973 v8995@source-condition? v8997@source-filename v8999@source-character) (begin (set! v8980@v8975 (make-record-type-descriptor '&source-information v10082@v9397@&condition-rtd 'v8978 '#f '#f '#((immutable file-name) (immutable character)))) (set! v8982@v8977 '#f) (set! v8984@v8976 (make-record-constructor-descriptor v8980@v8975 v10083@v9399@&condition-rcd v8982@v8977)) (set! v8987@v8974 (record-predicate v8980@v8975)) (set! v8989@make-source-condition (record-constructor v8984@v8976)) (set! v8991@v8972 (record-accessor v8980@v8975 '0)) (set! v8993@v8973 (record-accessor v8980@v8975 '1)) (set! v8995@source-condition? (condition-predicate v8980@v8975)) (set! v8997@source-filename (condition-accessor v8980@v8975 v8991@v8972)) (set! v8999@source-character (condition-accessor v8980@v8975 v8993@v8973)) (if (pair? v8970@x) (v8989@make-source-condition (car v8970@x) (cdr v8970@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! v2996@extract-position-condition (lambda (v9000@x) (v2994@make-source-condition (v2998@expression-position v9000@x)))) (set! v2998@expression-position (lambda (v9002@x) (and (v2220@stx? v9002@x) ((lambda (v9004@x) (and (v1163@v930@annotation? v9004@x) (v1164@v932@annotation-source v9004@x))) (v2224@stx-expr v9002@x))))) (set! v3000@assertion-error (lambda (v9006@expr v9007@pos) (raise (condition (v10130@v9589@make-assertion-violation) (v10148@v9637@make-who-condition 'assert) (v10088@v9480@make-message-condition '"assertion failed") (v10138@v9611@make-irritants-condition (list v9006@expr)) (v2994@make-source-condition v9007@pos))))) (set! v3002@syntax-error (lambda (v9010@x . v9012@args) (begin (if (not (for-all string? v9012@args)) (assertion-violation 'syntax-error '"invalid argument" v9012@args) (void)) (raise (condition (v10088@v9480@make-message-condition (if (null? v9012@args) '"invalid syntax" (apply string-append v9012@args))) (v10182@v9727@make-syntax-violation (v3012@syntax->datum v9010@x) '#f) (v2996@extract-position-condition v9010@x)))))) (set! v3004@syntax-violation* (lambda (v9014@who v9015@msg v9016@form v9017@condition-object) (begin (if (not (string? v9015@msg)) (assertion-violation 'syntax-violation '"message is not a string" v9015@msg) (void)) ((lambda (v9022@who) (raise (condition (if v9022@who (v10148@v9637@make-who-condition v9022@who) (condition)) (v10088@v9480@make-message-condition v9015@msg) v9017@condition-object (v2996@extract-position-condition v9016@form)))) (if (or (string? v9014@who) (symbol? v9014@who)) v9014@who (if (not v9014@who) ((lambda (v9024@t) ((lambda (v9026@ls/false) (if (and v9026@ls/false (apply (lambda (v9028@id) (v2276@id? v9028@id)) v9026@ls/false)) (apply (lambda (v9030@id) (v3012@syntax->datum v9030@id)) v9026@ls/false) ((lambda (v9032@t) ((lambda (v9034@ls/false) (if (and v9034@ls/false (apply (lambda (v9036@id v9037@rest) (v2276@id? v9036@id)) v9034@ls/false)) (apply (lambda (v9040@id v9041@rest) (v3012@syntax->datum v9040@id)) v9034@ls/false) ((lambda (v9044@t) ((lambda (v9046@ls/false) (if v9046@ls/false (apply (lambda () '#f) v9046@ls/false) (v3006@syntax-violation '#f '"invalid syntax" v9044@t))) (v2773@syntax-dispatch v9044@t '_))) v9032@t))) (v2773@syntax-dispatch v9032@t '(any . any)))) v9024@t))) (v2773@syntax-dispatch v9024@t 'any))) v9016@form) (assertion-violation 'syntax-violation '"invalid who argument" v9014@who))))))) (set! v3006@syntax-violation (lambda v9062 ((lambda (v9063) (if (= v9063 '3) (apply (lambda (v9048@who v9049@msg v9050@form) (v3006@syntax-violation v9048@who v9049@msg v9050@form '#f)) v9062) (if (= v9063 '4) (apply (lambda (v9054@who v9055@msg v9056@form v9057@subform) (v3004@syntax-violation* v9054@who v9055@msg v9056@form (v10182@v9727@make-syntax-violation (v3012@syntax->datum v9056@form) (v3012@syntax->datum v9057@subform)))) v9062) (error 'apply '"invalid arg count")))) (length v9062)))) (set! v3008@identifier? (lambda (v9064@x) (v2276@id? v9064@x))) (set! v3010@datum->syntax (lambda (v9066@id v9067@datum) (if (v2276@id? v9066@id) (v2242@datum->stx v9066@id v9067@datum) (assertion-violation 'datum->syntax '"not an identifier" v9066@id)))) (set! v3012@syntax->datum (lambda (v9070@x) (v2298@stx->datum v9070@x))) (set! v3014@compile-r6rs-top-level (lambda (v9072@x*) (call-with-values (lambda () (v2896@top-level-expander v9072@x*)) (lambda (v9076@v9074@lib* v9077@v9075@invoke-code) ((lambda (v9080@invoke-code v9081@lib*) (lambda () (begin (for-each v1802@v1457@invoke-library v9081@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (v1258@v1186@expanded->core v9080@invoke-code)) (void)) (eval-core (v1258@v1186@expanded->core v9080@invoke-code))))) v9077@v9075@invoke-code v9076@v9074@lib*))))) (set! v3016@pre-compile-r6rs-top-level (lambda (v9084@x*) (call-with-values (lambda () (v2896@top-level-expander v9084@x*)) (lambda (v9088@v9086@lib* v9089@v9087@invoke-code) ((lambda (v9092@invoke-code v9093@lib*) (begin (for-each v1802@v1457@invoke-library v9093@lib*) (v1172@v948@compile-core (v1258@v1186@expanded->core v9092@invoke-code)))) v9089@v9087@invoke-code v9088@v9086@lib*))))) (set! v3018@interaction-environment ((lambda (v9096@the-env) (lambda () (or v9096@the-env ((lambda (v9098@lib v9099@rib) (begin ((lambda (v9102@subst) (begin (v2185@set-rib-sym*! v9099@rib (map car v9102@subst)) (v2187@set-rib-mark**! v9099@rib (map (lambda (v9104@x) v2144@top-mark*) v9102@subst)) (v2189@set-rib-label*! v9099@rib (map cdr v9102@subst)))) (v1759@v1371@library-subst v9098@lib)) ((lambda (v9106@env) (begin (set! v9096@the-env v9106@env) v9106@env)) (v2940@make-interaction-env v9099@rib '() '())))) (v1795@v1443@find-library-by-name '(mosh interaction)) (v2195@make-empty-rib))))) '#f)) (set! v3020@top-level-context (v1174@v952@make-parameter '#f)) (begin (set! v9376@v3020@top-level-context v3020@top-level-context) (set! v9375@v3018@interaction-environment v3018@interaction-environment) (set! v9374@v3016@pre-compile-r6rs-top-level v3016@pre-compile-r6rs-top-level) (set! v9373@v3014@compile-r6rs-top-level v3014@compile-r6rs-top-level) (set! v9372@v3012@syntax->datum v3012@syntax->datum) (set! v9371@v3010@datum->syntax v3010@datum->syntax) (set! v9370@v3008@identifier? v3008@identifier?) (set! v9369@v3006@syntax-violation v3006@syntax-violation) (set! v9368@v3004@syntax-violation* v3004@syntax-violation*) (set! v9367@v3002@syntax-error v3002@syntax-error) (set! v9366@v3000@assertion-error v3000@assertion-error) (set! v9365@v2998@expression-position v2998@expression-position) (set! v9364@v2996@extract-position-condition v2996@extract-position-condition) (set! v9363@v2994@make-source-condition v2994@make-source-condition) (set! v9362@v2992@bound-identifier=? v2992@bound-identifier=?) (set! v9361@v2990@free-identifier=? v2990@free-identifier=?) (set! v9360@v2988@generate-temporaries v2988@generate-temporaries) (set! v9359@v2986@make-export-env/macros v2986@make-export-env/macros) (set! v9358@v2984@make-export-subst v2984@make-export-subst) (set! v9357@v2982@build-exports v2982@build-exports) (set! v9356@v2980@rev-map-append v2980@rev-map-append) (set! v9355@v2978@boot-library-expand v2978@boot-library-expand) (set! v9354@v2976@library-expander v2976@library-expander) (set! v9353@v2974@eval v2974@eval) (set! v9352@v2972@expand v2972@expand) (set! v9351@v2970@scheme-report-environment v2970@scheme-report-environment) (set! v9350@v2968@null-environment v2968@null-environment) (set! v9349@v2966@environment v2966@environment) (set! v9348@v2964@environment-symbols v2964@environment-symbols) (set! v9347@v2962@environment? v2962@environment?) (set! v9346@v2960@parse-binding v2960@parse-binding) (set! v9345@v2958@environment-bindings v2958@environment-bindings) (set! v9344@v2956@interaction-environment-symbols v2956@interaction-environment-symbols) (set! v9343@v2954@rp v2954@rp) (set! v9342@v2952@set-interaction-env-locs! v2952@set-interaction-env-locs!) (set! v9341@v2950@set-interaction-env-r! v2950@set-interaction-env-r!) (set! v9340@v2948@set-interaction-env-rib! v2948@set-interaction-env-rib!) (set! v9339@v2946@interaction-env-locs v2946@interaction-env-locs) (set! v9338@v2944@interaction-env-r v2944@interaction-env-r) (set! v9337@v2942@interaction-env-rib v2942@interaction-env-rib) (set! v9336@v2940@make-interaction-env v2940@make-interaction-env) (set! v9335@v2938@interaction-env? v2938@interaction-env?) (set! v9334@v2935@v2927 v2935@v2927) (set! v9333@v2933@v2928 v2933@v2928) (set! v9332@v2931@v2926 v2931@v2926) (set! v9331@v2925@rp v2925@rp) (set! v9330@v2923@set-env-itc! v2923@set-env-itc!) (set! v9329@v2921@set-env-labels! v2921@set-env-labels!) (set! v9328@v2919@set-env-names! v2919@set-env-names!) (set! v9327@v2917@env-itc v2917@env-itc) (set! v9326@v2915@env-labels v2915@env-labels) (set! v9325@v2913@env-names v2913@env-names) (set! v9324@v2911@make-env v2911@make-env) (set! v9323@v2909@env? v2909@env?) (set! v9322@v2906@v2898 v2906@v2898) (set! v9321@v2904@v2899 v2904@v2899) (set! v9320@v2902@v2897 v2902@v2897) (set! v9319@v2896@top-level-expander v2896@top-level-expander) (set! v9318@v2894@parse-top-level-program v2894@parse-top-level-program) (set! v9317@v2892@core-library-expander v2892@core-library-expander) (set! v9316@v2890@library-body-expander v2890@library-body-expander) (set! v9315@v2888@chi-interaction-expr v2888@chi-interaction-expr) (set! v9314@v2886@chi-library-internal v2886@chi-library-internal) (set! v9313@v2884@imp-collector v2884@imp-collector) (set! v9312@v2882@vis-collector v2882@vis-collector) (set! v9311@v2880@inv-collector v2880@inv-collector) (set! v9310@v2878@make-collector v2878@make-collector) (set! v9309@v2876@make-top-rib v2876@make-top-rib) (set! v9308@v2874@parse-import-spec* v2874@parse-import-spec*) (set! v9307@v2872@parse-library v2872@parse-library) (set! v9306@v2870@parse-library-name v2870@parse-library-name) (set! v9305@v2868@parse-exports v2868@parse-exports) (set! v9304@v2866@expand-transformer v2866@expand-transformer) (set! v9303@v2864@chi-body* v2864@chi-body*) (set! v9302@v2862@chi-internal-module v2862@chi-internal-module) (set! v9301@v2860@module-interface-exp-id* v2860@module-interface-exp-id*) (set! v9300@v2858@set-module-interface-exp-lab-vec! v2858@set-module-interface-exp-lab-vec!) (set! v9299@v2856@set-module-interface-exp-id-vec! v2856@set-module-interface-exp-id-vec!) (set! v9298@v2854@set-module-interface-first-mark! v2854@set-module-interface-first-mark!) (set! v9297@v2852@module-interface-exp-lab-vec v2852@module-interface-exp-lab-vec) (set! v9296@v2850@module-interface-exp-id-vec v2850@module-interface-exp-id-vec) (set! v9295@v2848@module-interface-first-mark v2848@module-interface-first-mark) (set! v9294@v2846@make-module-interface v2846@make-module-interface) (set! v9293@v2844@module-interface? v2844@module-interface?) (set! v9292@v2841@v2833 v2841@v2833) (set! v9291@v2839@v2834 v2839@v2834) (set! v9290@v2837@v2832 v2837@v2832) (set! v9289@v2831@parse-module v2831@parse-module) (set! v9288@v2829@chi-internal v2829@chi-internal) (set! v9287@v2827@find-dups v2827@find-dups) (set! v9286@v2825@find-bound=? v2825@find-bound=?) (set! v9285@v2823@chi-rhs* v2823@chi-rhs*) (set! v9284@v2821@expand-interaction-rhs*/init* v2821@expand-interaction-rhs*/init*) (set! v9283@v2819@chi-rhs v2819@chi-rhs) (set! v9282@v2817@chi-defun v2817@chi-defun) (set! v9281@v2815@chi-lambda-clause* v2815@chi-lambda-clause*) (set! v9280@v2813@chi-lambda-clause v2813@chi-lambda-clause) (set! v9279@v2811@verify-formals v2811@verify-formals) (set! v9278@v2809@chi-set! v2809@chi-set!) (set! v9277@v2807@chi-expr v2807@chi-expr) (set! v9276@v2805@chi-application v2805@chi-application) (set! v9275@v2803@chi-expr* v2803@chi-expr*) (set! v9274@v2801@chi-global-macro v2801@chi-global-macro) (set! v9273@v2799@chi-local-macro v2799@chi-local-macro) (set! v9272@v2797@chi-macro v2797@chi-macro) (set! v9271@v2795@do-macro-call v2795@do-macro-call) (set! v9270@v2793@local-macro-transformer v2793@local-macro-transformer) (set! v9269@v2791@macro-transformer v2791@macro-transformer) (set! v9268@v2789@symbol-macro v2789@symbol-macro) (set! v9267@v2787@core-macro-transformer v2787@core-macro-transformer) (set! v9266@v2785@syntax-transformer v2785@syntax-transformer) (set! v9265@v2783@ellipsis-map v2783@ellipsis-map) (set! v9264@v2781@syntax-case-transformer v2781@syntax-case-transformer) (set! v9263@v2779@verify-literals v2779@verify-literals) (set! v9262@v2777@underscore? v2777@underscore?) (set! v9261@v2775@ellipsis? v2775@ellipsis?) (set! v9260@v2773@syntax-dispatch v2773@syntax-dispatch) (set! v9259@v2771@convert-pattern v2771@convert-pattern) (set! v9258@v2769@foreign-call-transformer v2769@foreign-call-transformer) (set! v9257@v2767@parameterize-macro v2767@parameterize-macro) (set! v9256@v2765@incorrect-usage-macro v2765@incorrect-usage-macro) (set! v9255@v2763@define-condition-type-macro v2763@define-condition-type-macro) (set! v9254@v2761@define-record-type-macro v2761@define-record-type-macro) (set! v9253@v2759@define-struct-macro v2759@define-struct-macro) (set! v9252@v2757@quasisyntax-macro v2757@quasisyntax-macro) (set! v9251@v2755@quasiquote-macro v2755@quasiquote-macro) (set! v9250@v2753@syntax-rules-macro v2753@syntax-rules-macro) (set! v9249@v2751@include-into-macro v2751@include-into-macro) (set! v9248@v2749@include-macro v2749@include-macro) (set! v9247@v2747@do-include v2747@do-include) (set! v9246@v2745@cond-macro v2745@cond-macro) (set! v9245@v2743@and-macro v2743@and-macro) (set! v9244@v2741@or-macro v2741@or-macro) (set! v9243@v2739@let*-macro v2739@let*-macro) (set! v9242@v2737@do-macro v2737@do-macro) (set! v9241@v2735@identifier-syntax-macro v2735@identifier-syntax-macro) (set! v9240@v2733@endianness-macro v2733@endianness-macro) (set! v9239@v2731@assert-macro v2731@assert-macro) (set! v9238@v2729@delay-macro v2729@delay-macro) (set! v9237@v2727@time-macro v2727@time-macro) (set! v9236@v2725@define-enumeration-macro v2725@define-enumeration-macro) (set! v9235@v2723@guard-macro v2723@guard-macro) (set! v9234@v2721@trace-letrec-syntax-macro v2721@trace-letrec-syntax-macro) (set! v9233@v2719@trace-let-syntax-macro v2719@trace-let-syntax-macro) (set! v9232@v2717@trace-let/rec-syntax v2717@trace-let/rec-syntax) (set! v9231@v2715@trace-define-syntax-macro v2715@trace-define-syntax-macro) (set! v9230@v2713@trace-define-macro v2713@trace-define-macro) (set! v9229@v2711@trace-lambda-macro v2711@trace-lambda-macro) (set! v9228@v2709@let*-values-macro v2709@let*-values-macro) (set! v9227@v2707@let-values-macro v2707@let-values-macro) (set! v9226@v2705@let-macro v2705@let-macro) (set! v9225@v2703@invalid-fmls-error v2703@invalid-fmls-error) (set! v9224@v2701@with-syntax-macro v2701@with-syntax-macro) (set! v9223@v2699@bless v2699@bless) (set! v9222@v2697@lambda-transformer v2697@lambda-transformer) (set! v9221@v2695@case-lambda-transformer v2695@case-lambda-transformer) (set! v9220@v2693@quote-transformer v2693@quote-transformer) (set! v9219@v2691@case-macro v2691@case-macro) (set! v9218@v2689@or-transformer v2689@or-transformer) (set! v9217@v2687@and-transformer v2687@and-transformer) (set! v9216@v2685@if-transformer v2685@if-transformer) (set! v9215@v2683@unless-macro v2683@unless-macro) (set! v9214@v2681@when-macro v2681@when-macro) (set! v9213@v2679@record-constructor-descriptor-transformer v2679@record-constructor-descriptor-transformer) (set! v9212@v2677@record-type-descriptor-transformer v2677@record-type-descriptor-transformer) (set! v9211@v2675@type-descriptor-transformer v2675@type-descriptor-transformer) (set! v9210@v2673@fluid-let-syntax-transformer v2673@fluid-let-syntax-transformer) (set! v9209@v2671@letrec*-transformer v2671@letrec*-transformer) (set! v9208@v2669@letrec-transformer v2669@letrec-transformer) (set! v9207@v2667@letrec-helper v2667@letrec-helper) (set! v9206@v2665@add-lexicals v2665@add-lexicals) (set! v9205@v2663@add-lexical v2663@add-lexical) (set! v9204@v2661@set-lexical-mutable! v2661@set-lexical-mutable!) (set! v9203@v2659@lexical-mutable? v2659@lexical-mutable?) (set! v9202@v2657@lexical-var v2657@lexical-var) (set! v9201@v2655@scheme-stx v2655@scheme-stx) (set! v9200@v2653@scheme-stx-hashtable v2653@scheme-stx-hashtable) (set! v9199@v2651@parse-define-syntax v2651@parse-define-syntax) (set! v9198@v2649@parse-define v2649@parse-define) (set! v9197@v2338@make-eval-transformer v2338@make-eval-transformer) (set! v9196@v2336@variable-transformer-procedure v2336@variable-transformer-procedure) (set! v9195@v2334@variable-transformer? v2334@variable-transformer?) (set! v9194@v2332@make-variable-transformer v2332@make-variable-transformer) (set! v9193@v2330@sanitize-binding v2330@sanitize-binding) (set! v9192@v2316@syntax-type v2316@syntax-type) (set! v9191@v2314@raise-unbound-error v2314@raise-unbound-error) (set! v9190@v2312@binding-value v2312@binding-value) (set! v9189@v2310@binding-type v2310@binding-type) (set! v9188@v2308@make-binding v2308@make-binding) (set! v9187@v2306@label->binding v2306@label->binding) (set! v9186@v2304@id->real-label v2304@id->real-label) (set! v9185@v2302@id->label v2302@id->label) (set! v9184@v2300@same-marks*? v2300@same-marks*?) (set! v9183@v2298@stx->datum v2298@stx->datum) (set! v9182@v2296@strip v2296@strip) (set! v9181@v2294@strip-annotations v2294@strip-annotations) (set! v9180@v2292@self-evaluating? v2292@self-evaluating?) (set! v9179@v2290@bound-id-member? v2290@bound-id-member?) (set! v9178@v2288@distinct-bound-ids? v2288@distinct-bound-ids?) (set! v9177@v2286@valid-bound-ids? v2286@valid-bound-ids?) (set! v9176@v2284@free-id=? v2284@free-id=?) (set! v9175@v2282@bound-id=? v2282@bound-id=?) (set! v9174@v2280@same-marks? v2280@same-marks?) (set! v9173@v2278@id->sym v2278@id->sym) (set! v9172@v2276@id? v2276@id?) (set! v9171@v2274@syntax->list v2274@syntax->list) (set! v9170@v2272@syntax-cdr v2272@syntax-cdr) (set! v9169@v2270@syntax-car v2270@syntax-car) (set! v9168@v2268@syntax-list? v2268@syntax-list?) (set! v9167@v2266@syntax-null? v2266@syntax-null?) (set! v9166@v2264@syntax-vector? v2264@syntax-vector?) (set! v9165@v2262@syntax-pair? v2262@syntax-pair?) (set! v9164@v2260@syntax-vector->list v2260@syntax-vector->list) (set! v9163@v2258@syntax-kind? v2258@syntax-kind?) (set! v9162@v2256@add-subst v2256@add-subst) (set! v9161@v2254@add-mark v2254@add-mark) (set! v9160@v2252@mkstx v2252@mkstx) (set! v9159@v2250@join-wraps v2250@join-wraps) (set! v9158@v2248@anti-mark? v2248@anti-mark?) (set! v9157@v2246@anti-mark v2246@anti-mark) (set! v9156@v2244@gen-mark v2244@gen-mark) (set! v9155@v2242@datum->stx v2242@datum->stx) (set! v9154@v2240@rp v2240@rp) (set! v9153@v2238@set-stx-ae*! v2238@set-stx-ae*!) (set! v9152@v2236@set-stx-subst*! v2236@set-stx-subst*!) (set! v9151@v2234@set-stx-mark*! v2234@set-stx-mark*!) (set! v9150@v2232@set-stx-expr! v2232@set-stx-expr!) (set! v9149@v2230@stx-ae* v2230@stx-ae*) (set! v9148@v2228@stx-subst* v2228@stx-subst*) (set! v9147@v2226@stx-mark* v2226@stx-mark*) (set! v9146@v2224@stx-expr v2224@stx-expr) (set! v9145@v2222@make-stx v2222@make-stx) (set! v9144@v2220@stx? v2220@stx?) (set! v9143@v2217@v2209 v2217@v2209) (set! v9142@v2215@v2210 v2215@v2210) (set! v9141@v2213@v2208 v2213@v2208) (set! v9140@v2207@make-full-rib v2207@make-full-rib) (set! v9139@v2205@unseal-rib! v2205@unseal-rib!) (set! v9138@v2203@seal-rib! v2203@seal-rib!) (set! v9137@v2201@make-rib-map v2201@make-rib-map) (set! v9136@v2199@extend-rib/nc! v2199@extend-rib/nc!) (set! v9135@v2197@extend-rib! v2197@extend-rib!) (set! v9134@v2195@make-empty-rib v2195@make-empty-rib) (set! v9133@v2193@set-rib-cache! v2193@set-rib-cache!) (set! v9132@v2191@set-rib-sealed/freq! v2191@set-rib-sealed/freq!) (set! v9131@v2189@set-rib-label*! v2189@set-rib-label*!) (set! v9130@v2187@set-rib-mark**! v2187@set-rib-mark**!) (set! v9129@v2185@set-rib-sym*! v2185@set-rib-sym*!) (set! v9128@v2183@rib-cache v2183@rib-cache) (set! v9127@v2181@rib-sealed/freq v2181@rib-sealed/freq) (set! v9126@v2179@rib-label* v2179@rib-label*) (set! v9125@v2177@rib-mark** v2177@rib-mark**) (set! v9124@v2175@rib-sym* v2175@rib-sym*) (set! v9123@v2173@make-rib v2173@make-rib) (set! v9122@v2171@rib? v2171@rib?) (set! v9121@v2168@v2160 v2168@v2160) (set! v9120@v2166@v2161 v2166@v2161) (set! v9119@v2164@v2159 v2164@v2159) (set! v9118@v2158@gen-define-label v2158@gen-define-label) (set! v9117@v2156@gen-define-label+loc v2156@gen-define-label+loc) (set! v9116@v2154@gen-top-level-label v2154@gen-top-level-label) (set! v9115@v2152@gen-label v2152@gen-label) (set! v9114@v2150@gen-global v2150@gen-global) (set! v9113@v2148@gen-lexical v2148@gen-lexical) (set! v9112@v2146@top-marked? v2146@top-marked?) (set! v9111@v2144@top-mark* v2144@top-mark*) (set! v9110@v2139@set-union v2139@set-union) (set! v9109@v2137@set-cons v2137@set-cons) (set! v9108@v2135@file-options-macro v2135@file-options-macro) (v1792@v1437@current-library-expander v2976@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (v9386@v9381 v9388@v9383 v9390@v9382 v9393@&condition? v9395@make-&condition v9397@&condition-rtd v9399@&condition-rcd v9471@v9466 v9473@v9468 v9475@v9467 v9478@p? v9480@make-message-condition v9482@v9465@condition-message v9484@message-condition? v9486@condition-message v9488@&message-rtd v9490@&message-rcd v9496@v9491 v9498@v9493 v9500@v9492 v9503@p? v9505@make-warning v9507@warning? v9509@&warning-rtd v9511@&warning-rcd v9517@v9512 v9519@v9514 v9521@v9513 v9524@p? v9526@make-serious-condition v9528@serious-condition? v9530@&serious-rtd v9532@&serious-rcd v9538@v9533 v9540@v9535 v9542@v9534 v9545@p? v9547@make-error v9549@error? v9551@&error-rtd v9553@&error-rcd v9559@v9554 v9561@v9556 v9563@v9555 v9566@p? v9568@make-violation v9570@violation? v9572@&violation-rtd v9574@&violation-rcd v9580@v9575 v9582@v9577 v9584@v9576 v9587@p? v9589@make-assertion-violation v9591@assertion-violation? v9593@&assertion-rtd v9595@&assertion-rcd v9602@v9597 v9604@v9599 v9606@v9598 v9609@p? v9611@make-irritants-condition v9613@v9596@condition-irritants v9615@irritants-condition? v9617@condition-irritants v9619@&irritants-rtd v9621@&irritants-rcd v9628@v9623 v9630@v9625 v9632@v9624 v9635@p? v9637@make-who-condition v9639@v9622@condition-who v9641@who-condition? v9643@condition-who v9645@&who-rtd v9647@&who-rcd v9653@v9648 v9655@v9650 v9657@v9649 v9660@p? v9662@make-non-continuable-violation v9664@non-continuable-violation? v9666@&non-continuable-rtd v9668@&non-continuable-rcd v9674@v9669 v9676@v9671 v9678@v9670 v9681@p? v9683@make-implementation-restriction-violation v9685@implementation-restriction-violation? v9687@&implementation-restriction-rtd v9689@&implementation-restriction-rcd v9695@v9690 v9697@v9692 v9699@v9691 v9702@p? v9704@make-lexical-violation v9706@lexical-violation? v9708@&lexical-rtd v9710@&lexical-rcd v9718@v9713 v9720@v9715 v9722@v9714 v9725@p? v9727@make-syntax-violation v9729@v9711@syntax-violation-form v9731@v9712@syntax-violation-subform v9733@syntax-violation? v9735@syntax-violation-form v9737@syntax-violation-subform v9739@&syntax-rtd v9741@&syntax-rcd v9747@v9742 v9749@v9744 v9751@v9743 v9754@p? v9756@make-undefined-violation v9758@undefined-violation? v9760@&undefined-rtd v9762@&undefined-rcd v9768@v9763 v9770@v9765 v9772@v9764 v9775@p? v9777@make-i/o-error v9779@i/o-error? v9781@&i/o-rtd v9783@&i/o-rcd v9789@v9784 v9791@v9786 v9793@v9785 v9796@p? v9798@make-i/o-read-error v9800@i/o-read-error? v9802@&i/o-read-rtd v9804@&i/o-read-rcd v9810@v9805 v9812@v9807 v9814@v9806 v9817@p? v9819@make-i/o-write-error v9821@i/o-write-error? v9823@&i/o-write-rtd v9825@&i/o-write-rcd v9832@v9827 v9834@v9829 v9836@v9828 v9839@p? v9841@make-i/o-invalid-position-error v9843@v9826@i/o-error-position v9845@i/o-invalid-position-error? v9847@i/o-error-position v9849@&i/o-invalid-position-rtd v9851@&i/o-invalid-position-rcd v9858@v9853 v9860@v9855 v9862@v9854 v9865@p? v9867@make-i/o-filename-error v9869@v9852@i/o-error-filename v9871@i/o-filename-error? v9873@i/o-error-filename v9875@&i/o-filename-rtd v9877@&i/o-filename-rcd v9883@v9878 v9885@v9880 v9887@v9879 v9890@p? v9892@make-i/o-file-protection-error v9894@i/o-file-protection-error? v9896@&i/o-file-protection-rtd v9898@&i/o-file-protection-rcd v9904@v9899 v9906@v9901 v9908@v9900 v9911@p? v9913@make-i/o-file-is-read-only-error v9915@i/o-file-is-read-only-error? v9917@&i/o-file-is-read-only-rtd v9919@&i/o-file-is-read-only-rcd v9925@v9920 v9927@v9922 v9929@v9921 v9932@p? v9934@make-i/o-file-already-exists-error v9936@i/o-file-already-exists-error? v9938@&i/o-file-already-exists-rtd v9940@&i/o-file-already-exists-rcd v9946@v9941 v9948@v9943 v9950@v9942 v9953@p? v9955@make-i/o-file-does-not-exist-error v9957@i/o-file-does-not-exist-error? v9959@&i/o-file-does-not-exist-rtd v9961@&i/o-file-does-not-exist-rcd v9968@v9963 v9970@v9965 v9972@v9964 v9975@p? v9977@make-i/o-port-error v9979@v9962@i/o-error-port v9981@i/o-port-error? v9983@i/o-error-port v9985@&i/o-port-rtd v9987@&i/o-port-rcd v9993@v9988 v9995@v9990 v9997@v9989 v10000@p? v10002@make-i/o-decoding-error v10004@i/o-decoding-error? v10006@&i/o-decoding-rtd v10008@&i/o-decoding-rcd v10015@v10010 v10017@v10012 v10019@v10011 v10022@p? v10024@make-i/o-encoding-error v10026@v10009@i/o-encoding-error-char v10028@i/o-encoding-error? v10030@i/o-encoding-error-char v10032@&i/o-encoding-rtd v10034@&i/o-encoding-rcd v10040@v10035 v10042@v10037 v10044@v10036 v10047@p? v10049@make-no-infinities-violation v10051@no-infinities-violation? v10053@&no-infinities-rtd v10055@&no-infinities-rcd v10061@v10056 v10063@v10058 v10065@v10057 v10068@p? v10070@make-no-nans-violation v10072@no-nans-violation? v10074@&no-nans-rtd v10076@&no-nans-rcd) (begin (set! v9386@v9381 (make-record-type-descriptor '&condition '#f 'v9384 '#f '#f '#())) (set! v9388@v9383 '#f) (set! v9390@v9382 (make-record-constructor-descriptor v9386@v9381 '#f v9388@v9383)) (set! v9393@&condition? (record-predicate v9386@v9381)) (set! v9395@make-&condition (record-constructor v9390@v9382)) (set! v9397@&condition-rtd v9386@v9381) (set! v9399@&condition-rcd v9390@v9382) (set! v9471@v9466 (make-record-type-descriptor '&message v9386@v9381 'v9469 '#f '#f '#((immutable message)))) (set! v9473@v9468 '#f) (set! v9475@v9467 (make-record-constructor-descriptor v9471@v9466 v9390@v9382 v9473@v9468)) (set! v9478@p? (record-predicate v9471@v9466)) (set! v9480@make-message-condition (record-constructor v9475@v9467)) (set! v9482@v9465@condition-message (record-accessor v9471@v9466 '0)) (set! v9484@message-condition? (condition-predicate v9471@v9466)) (set! v9486@condition-message (condition-accessor v9471@v9466 v9482@v9465@condition-message)) (set! v9488@&message-rtd v9471@v9466) (set! v9490@&message-rcd v9475@v9467) (set! v9496@v9491 (make-record-type-descriptor '&warning v9386@v9381 'v9494 '#f '#f '#())) (set! v9498@v9493 '#f) (set! v9500@v9492 (make-record-constructor-descriptor v9496@v9491 v9390@v9382 v9498@v9493)) (set! v9503@p? (record-predicate v9496@v9491)) (set! v9505@make-warning (record-constructor v9500@v9492)) (set! v9507@warning? (condition-predicate v9496@v9491)) (set! v9509@&warning-rtd v9496@v9491) (set! v9511@&warning-rcd v9500@v9492) (set! v9517@v9512 (make-record-type-descriptor '&serious v9386@v9381 'v9515 '#f '#f '#())) (set! v9519@v9514 '#f) (set! v9521@v9513 (make-record-constructor-descriptor v9517@v9512 v9390@v9382 v9519@v9514)) (set! v9524@p? (record-predicate v9517@v9512)) (set! v9526@make-serious-condition (record-constructor v9521@v9513)) (set! v9528@serious-condition? (condition-predicate v9517@v9512)) (set! v9530@&serious-rtd v9517@v9512) (set! v9532@&serious-rcd v9521@v9513) (set! v9538@v9533 (make-record-type-descriptor '&error v9517@v9512 'v9536 '#f '#f '#())) (set! v9540@v9535 '#f) (set! v9542@v9534 (make-record-constructor-descriptor v9538@v9533 v9521@v9513 v9540@v9535)) (set! v9545@p? (record-predicate v9538@v9533)) (set! v9547@make-error (record-constructor v9542@v9534)) (set! v9549@error? (condition-predicate v9538@v9533)) (set! v9551@&error-rtd v9538@v9533) (set! v9553@&error-rcd v9542@v9534) (set! v9559@v9554 (make-record-type-descriptor '&violation v9517@v9512 'v9557 '#f '#f '#())) (set! v9561@v9556 '#f) (set! v9563@v9555 (make-record-constructor-descriptor v9559@v9554 v9521@v9513 v9561@v9556)) (set! v9566@p? (record-predicate v9559@v9554)) (set! v9568@make-violation (record-constructor v9563@v9555)) (set! v9570@violation? (condition-predicate v9559@v9554)) (set! v9572@&violation-rtd v9559@v9554) (set! v9574@&violation-rcd v9563@v9555) (set! v9580@v9575 (make-record-type-descriptor '&assertion v9559@v9554 'v9578 '#f '#f '#())) (set! v9582@v9577 '#f) (set! v9584@v9576 (make-record-constructor-descriptor v9580@v9575 v9563@v9555 v9582@v9577)) (set! v9587@p? (record-predicate v9580@v9575)) (set! v9589@make-assertion-violation (record-constructor v9584@v9576)) (set! v9591@assertion-violation? (condition-predicate v9580@v9575)) (set! v9593@&assertion-rtd v9580@v9575) (set! v9595@&assertion-rcd v9584@v9576) (set! v9602@v9597 (make-record-type-descriptor '&irritants v9386@v9381 'v9600 '#f '#f '#((immutable irritants)))) (set! v9604@v9599 '#f) (set! v9606@v9598 (make-record-constructor-descriptor v9602@v9597 v9390@v9382 v9604@v9599)) (set! v9609@p? (record-predicate v9602@v9597)) (set! v9611@make-irritants-condition (record-constructor v9606@v9598)) (set! v9613@v9596@condition-irritants (record-accessor v9602@v9597 '0)) (set! v9615@irritants-condition? (condition-predicate v9602@v9597)) (set! v9617@condition-irritants (condition-accessor v9602@v9597 v9613@v9596@condition-irritants)) (set! v9619@&irritants-rtd v9602@v9597) (set! v9621@&irritants-rcd v9606@v9598) (set! v9628@v9623 (make-record-type-descriptor '&who v9386@v9381 'v9626 '#f '#f '#((immutable who)))) (set! v9630@v9625 '#f) (set! v9632@v9624 (make-record-constructor-descriptor v9628@v9623 v9390@v9382 v9630@v9625)) (set! v9635@p? (record-predicate v9628@v9623)) (set! v9637@make-who-condition (record-constructor v9632@v9624)) (set! v9639@v9622@condition-who (record-accessor v9628@v9623 '0)) (set! v9641@who-condition? (condition-predicate v9628@v9623)) (set! v9643@condition-who (condition-accessor v9628@v9623 v9639@v9622@condition-who)) (set! v9645@&who-rtd v9628@v9623) (set! v9647@&who-rcd v9632@v9624) (set! v9653@v9648 (make-record-type-descriptor '&non-continuable v9559@v9554 'v9651 '#f '#f '#())) (set! v9655@v9650 '#f) (set! v9657@v9649 (make-record-constructor-descriptor v9653@v9648 v9563@v9555 v9655@v9650)) (set! v9660@p? (record-predicate v9653@v9648)) (set! v9662@make-non-continuable-violation (record-constructor v9657@v9649)) (set! v9664@non-continuable-violation? (condition-predicate v9653@v9648)) (set! v9666@&non-continuable-rtd v9653@v9648) (set! v9668@&non-continuable-rcd v9657@v9649) (set! v9674@v9669 (make-record-type-descriptor '&implementation-restriction v9559@v9554 'v9672 '#f '#f '#())) (set! v9676@v9671 '#f) (set! v9678@v9670 (make-record-constructor-descriptor v9674@v9669 v9563@v9555 v9676@v9671)) (set! v9681@p? (record-predicate v9674@v9669)) (set! v9683@make-implementation-restriction-violation (record-constructor v9678@v9670)) (set! v9685@implementation-restriction-violation? (condition-predicate v9674@v9669)) (set! v9687@&implementation-restriction-rtd v9674@v9669) (set! v9689@&implementation-restriction-rcd v9678@v9670) (set! v9695@v9690 (make-record-type-descriptor '&lexical v9559@v9554 'v9693 '#f '#f '#())) (set! v9697@v9692 '#f) (set! v9699@v9691 (make-record-constructor-descriptor v9695@v9690 v9563@v9555 v9697@v9692)) (set! v9702@p? (record-predicate v9695@v9690)) (set! v9704@make-lexical-violation (record-constructor v9699@v9691)) (set! v9706@lexical-violation? (condition-predicate v9695@v9690)) (set! v9708@&lexical-rtd v9695@v9690) (set! v9710@&lexical-rcd v9699@v9691) (set! v9718@v9713 (make-record-type-descriptor '&syntax v9559@v9554 'v9716 '#f '#f '#((immutable form) (immutable subform)))) (set! v9720@v9715 '#f) (set! v9722@v9714 (make-record-constructor-descriptor v9718@v9713 v9563@v9555 v9720@v9715)) (set! v9725@p? (record-predicate v9718@v9713)) (set! v9727@make-syntax-violation (record-constructor v9722@v9714)) (set! v9729@v9711@syntax-violation-form (record-accessor v9718@v9713 '0)) (set! v9731@v9712@syntax-violation-subform (record-accessor v9718@v9713 '1)) (set! v9733@syntax-violation? (condition-predicate v9718@v9713)) (set! v9735@syntax-violation-form (condition-accessor v9718@v9713 v9729@v9711@syntax-violation-form)) (set! v9737@syntax-violation-subform (condition-accessor v9718@v9713 v9731@v9712@syntax-violation-subform)) (set! v9739@&syntax-rtd v9718@v9713) (set! v9741@&syntax-rcd v9722@v9714) (set! v9747@v9742 (make-record-type-descriptor '&undefined v9559@v9554 'v9745 '#f '#f '#())) (set! v9749@v9744 '#f) (set! v9751@v9743 (make-record-constructor-descriptor v9747@v9742 v9563@v9555 v9749@v9744)) (set! v9754@p? (record-predicate v9747@v9742)) (set! v9756@make-undefined-violation (record-constructor v9751@v9743)) (set! v9758@undefined-violation? (condition-predicate v9747@v9742)) (set! v9760@&undefined-rtd v9747@v9742) (set! v9762@&undefined-rcd v9751@v9743) (set! v9768@v9763 (make-record-type-descriptor '&i/o v9538@v9533 'v9766 '#f '#f '#())) (set! v9770@v9765 '#f) (set! v9772@v9764 (make-record-constructor-descriptor v9768@v9763 v9542@v9534 v9770@v9765)) (set! v9775@p? (record-predicate v9768@v9763)) (set! v9777@make-i/o-error (record-constructor v9772@v9764)) (set! v9779@i/o-error? (condition-predicate v9768@v9763)) (set! v9781@&i/o-rtd v9768@v9763) (set! v9783@&i/o-rcd v9772@v9764) (set! v9789@v9784 (make-record-type-descriptor '&i/o-read v9768@v9763 'v9787 '#f '#f '#())) (set! v9791@v9786 '#f) (set! v9793@v9785 (make-record-constructor-descriptor v9789@v9784 v9772@v9764 v9791@v9786)) (set! v9796@p? (record-predicate v9789@v9784)) (set! v9798@make-i/o-read-error (record-constructor v9793@v9785)) (set! v9800@i/o-read-error? (condition-predicate v9789@v9784)) (set! v9802@&i/o-read-rtd v9789@v9784) (set! v9804@&i/o-read-rcd v9793@v9785) (set! v9810@v9805 (make-record-type-descriptor '&i/o-write v9768@v9763 'v9808 '#f '#f '#())) (set! v9812@v9807 '#f) (set! v9814@v9806 (make-record-constructor-descriptor v9810@v9805 v9772@v9764 v9812@v9807)) (set! v9817@p? (record-predicate v9810@v9805)) (set! v9819@make-i/o-write-error (record-constructor v9814@v9806)) (set! v9821@i/o-write-error? (condition-predicate v9810@v9805)) (set! v9823@&i/o-write-rtd v9810@v9805) (set! v9825@&i/o-write-rcd v9814@v9806) (set! v9832@v9827 (make-record-type-descriptor '&i/o-invalid-position v9768@v9763 'v9830 '#f '#f '#((immutable position)))) (set! v9834@v9829 '#f) (set! v9836@v9828 (make-record-constructor-descriptor v9832@v9827 v9772@v9764 v9834@v9829)) (set! v9839@p? (record-predicate v9832@v9827)) (set! v9841@make-i/o-invalid-position-error (record-constructor v9836@v9828)) (set! v9843@v9826@i/o-error-position (record-accessor v9832@v9827 '0)) (set! v9845@i/o-invalid-position-error? (condition-predicate v9832@v9827)) (set! v9847@i/o-error-position (condition-accessor v9832@v9827 v9843@v9826@i/o-error-position)) (set! v9849@&i/o-invalid-position-rtd v9832@v9827) (set! v9851@&i/o-invalid-position-rcd v9836@v9828) (set! v9858@v9853 (make-record-type-descriptor '&i/o-filename v9768@v9763 'v9856 '#f '#f '#((immutable filename)))) (set! v9860@v9855 '#f) (set! v9862@v9854 (make-record-constructor-descriptor v9858@v9853 v9772@v9764 v9860@v9855)) (set! v9865@p? (record-predicate v9858@v9853)) (set! v9867@make-i/o-filename-error (record-constructor v9862@v9854)) (set! v9869@v9852@i/o-error-filename (record-accessor v9858@v9853 '0)) (set! v9871@i/o-filename-error? (condition-predicate v9858@v9853)) (set! v9873@i/o-error-filename (condition-accessor v9858@v9853 v9869@v9852@i/o-error-filename)) (set! v9875@&i/o-filename-rtd v9858@v9853) (set! v9877@&i/o-filename-rcd v9862@v9854) (set! v9883@v9878 (make-record-type-descriptor '&i/o-file-protection v9858@v9853 'v9881 '#f '#f '#())) (set! v9885@v9880 '#f) (set! v9887@v9879 (make-record-constructor-descriptor v9883@v9878 v9862@v9854 v9885@v9880)) (set! v9890@p? (record-predicate v9883@v9878)) (set! v9892@make-i/o-file-protection-error (record-constructor v9887@v9879)) (set! v9894@i/o-file-protection-error? (condition-predicate v9883@v9878)) (set! v9896@&i/o-file-protection-rtd v9883@v9878) (set! v9898@&i/o-file-protection-rcd v9887@v9879) (set! v9904@v9899 (make-record-type-descriptor '&i/o-file-is-read-only v9883@v9878 'v9902 '#f '#f '#())) (set! v9906@v9901 '#f) (set! v9908@v9900 (make-record-constructor-descriptor v9904@v9899 v9887@v9879 v9906@v9901)) (set! v9911@p? (record-predicate v9904@v9899)) (set! v9913@make-i/o-file-is-read-only-error (record-constructor v9908@v9900)) (set! v9915@i/o-file-is-read-only-error? (condition-predicate v9904@v9899)) (set! v9917@&i/o-file-is-read-only-rtd v9904@v9899) (set! v9919@&i/o-file-is-read-only-rcd v9908@v9900) (set! v9925@v9920 (make-record-type-descriptor '&i/o-file-already-exists v9858@v9853 'v9923 '#f '#f '#())) (set! v9927@v9922 '#f) (set! v9929@v9921 (make-record-constructor-descriptor v9925@v9920 v9862@v9854 v9927@v9922)) (set! v9932@p? (record-predicate v9925@v9920)) (set! v9934@make-i/o-file-already-exists-error (record-constructor v9929@v9921)) (set! v9936@i/o-file-already-exists-error? (condition-predicate v9925@v9920)) (set! v9938@&i/o-file-already-exists-rtd v9925@v9920) (set! v9940@&i/o-file-already-exists-rcd v9929@v9921) (set! v9946@v9941 (make-record-type-descriptor '&i/o-file-does-not-exist v9858@v9853 'v9944 '#f '#f '#())) (set! v9948@v9943 '#f) (set! v9950@v9942 (make-record-constructor-descriptor v9946@v9941 v9862@v9854 v9948@v9943)) (set! v9953@p? (record-predicate v9946@v9941)) (set! v9955@make-i/o-file-does-not-exist-error (record-constructor v9950@v9942)) (set! v9957@i/o-file-does-not-exist-error? (condition-predicate v9946@v9941)) (set! v9959@&i/o-file-does-not-exist-rtd v9946@v9941) (set! v9961@&i/o-file-does-not-exist-rcd v9950@v9942) (set! v9968@v9963 (make-record-type-descriptor '&i/o-port v9768@v9763 'v9966 '#f '#f '#((immutable port)))) (set! v9970@v9965 '#f) (set! v9972@v9964 (make-record-constructor-descriptor v9968@v9963 v9772@v9764 v9970@v9965)) (set! v9975@p? (record-predicate v9968@v9963)) (set! v9977@make-i/o-port-error (record-constructor v9972@v9964)) (set! v9979@v9962@i/o-error-port (record-accessor v9968@v9963 '0)) (set! v9981@i/o-port-error? (condition-predicate v9968@v9963)) (set! v9983@i/o-error-port (condition-accessor v9968@v9963 v9979@v9962@i/o-error-port)) (set! v9985@&i/o-port-rtd v9968@v9963) (set! v9987@&i/o-port-rcd v9972@v9964) (set! v9993@v9988 (make-record-type-descriptor '&i/o-decoding v9968@v9963 'v9991 '#f '#f '#())) (set! v9995@v9990 '#f) (set! v9997@v9989 (make-record-constructor-descriptor v9993@v9988 v9972@v9964 v9995@v9990)) (set! v10000@p? (record-predicate v9993@v9988)) (set! v10002@make-i/o-decoding-error (record-constructor v9997@v9989)) (set! v10004@i/o-decoding-error? (condition-predicate v9993@v9988)) (set! v10006@&i/o-decoding-rtd v9993@v9988) (set! v10008@&i/o-decoding-rcd v9997@v9989) (set! v10015@v10010 (make-record-type-descriptor '&i/o-encoding v9968@v9963 'v10013 '#f '#f '#((immutable char)))) (set! v10017@v10012 '#f) (set! v10019@v10011 (make-record-constructor-descriptor v10015@v10010 v9972@v9964 v10017@v10012)) (set! v10022@p? (record-predicate v10015@v10010)) (set! v10024@make-i/o-encoding-error (record-constructor v10019@v10011)) (set! v10026@v10009@i/o-encoding-error-char (record-accessor v10015@v10010 '0)) (set! v10028@i/o-encoding-error? (condition-predicate v10015@v10010)) (set! v10030@i/o-encoding-error-char (condition-accessor v10015@v10010 v10026@v10009@i/o-encoding-error-char)) (set! v10032@&i/o-encoding-rtd v10015@v10010) (set! v10034@&i/o-encoding-rcd v10019@v10011) (set! v10040@v10035 (make-record-type-descriptor '&no-infinities v9674@v9669 'v10038 '#f '#f '#())) (set! v10042@v10037 '#f) (set! v10044@v10036 (make-record-constructor-descriptor v10040@v10035 v9678@v9670 v10042@v10037)) (set! v10047@p? (record-predicate v10040@v10035)) (set! v10049@make-no-infinities-violation (record-constructor v10044@v10036)) (set! v10051@no-infinities-violation? (condition-predicate v10040@v10035)) (set! v10053@&no-infinities-rtd v10040@v10035) (set! v10055@&no-infinities-rcd v10044@v10036) (set! v10061@v10056 (make-record-type-descriptor '&no-nans v9674@v9669 'v10059 '#f '#f '#())) (set! v10063@v10058 '#f) (set! v10065@v10057 (make-record-constructor-descriptor v10061@v10056 v9678@v9670 v10063@v10058)) (set! v10068@p? (record-predicate v10061@v10056)) (set! v10070@make-no-nans-violation (record-constructor v10065@v10057)) (set! v10072@no-nans-violation? (condition-predicate v10061@v10056)) (set! v10074@&no-nans-rtd v10061@v10056) (set! v10076@&no-nans-rcd v10065@v10057) (begin (set! v10317@v10076@&no-nans-rcd v10076@&no-nans-rcd) (set! v10316@v10074@&no-nans-rtd v10074@&no-nans-rtd) (set! v10315@v10072@no-nans-violation? v10072@no-nans-violation?) (set! v10314@v10070@make-no-nans-violation v10070@make-no-nans-violation) (set! v10313@v10068@p? v10068@p?) (set! v10312@v10065@v10057 v10065@v10057) (set! v10311@v10063@v10058 v10063@v10058) (set! v10310@v10061@v10056 v10061@v10056) (set! v10309@v10055@&no-infinities-rcd v10055@&no-infinities-rcd) (set! v10308@v10053@&no-infinities-rtd v10053@&no-infinities-rtd) (set! v10307@v10051@no-infinities-violation? v10051@no-infinities-violation?) (set! v10306@v10049@make-no-infinities-violation v10049@make-no-infinities-violation) (set! v10305@v10047@p? v10047@p?) (set! v10304@v10044@v10036 v10044@v10036) (set! v10303@v10042@v10037 v10042@v10037) (set! v10302@v10040@v10035 v10040@v10035) (set! v10301@v10034@&i/o-encoding-rcd v10034@&i/o-encoding-rcd) (set! v10300@v10032@&i/o-encoding-rtd v10032@&i/o-encoding-rtd) (set! v10299@v10030@i/o-encoding-error-char v10030@i/o-encoding-error-char) (set! v10298@v10028@i/o-encoding-error? v10028@i/o-encoding-error?) (set! v10297@v10026@v10009@i/o-encoding-error-char v10026@v10009@i/o-encoding-error-char) (set! v10296@v10024@make-i/o-encoding-error v10024@make-i/o-encoding-error) (set! v10295@v10022@p? v10022@p?) (set! v10294@v10019@v10011 v10019@v10011) (set! v10293@v10017@v10012 v10017@v10012) (set! v10292@v10015@v10010 v10015@v10010) (set! v10291@v10008@&i/o-decoding-rcd v10008@&i/o-decoding-rcd) (set! v10290@v10006@&i/o-decoding-rtd v10006@&i/o-decoding-rtd) (set! v10289@v10004@i/o-decoding-error? v10004@i/o-decoding-error?) (set! v10288@v10002@make-i/o-decoding-error v10002@make-i/o-decoding-error) (set! v10287@v10000@p? v10000@p?) (set! v10286@v9997@v9989 v9997@v9989) (set! v10285@v9995@v9990 v9995@v9990) (set! v10284@v9993@v9988 v9993@v9988) (set! v10283@v9987@&i/o-port-rcd v9987@&i/o-port-rcd) (set! v10282@v9985@&i/o-port-rtd v9985@&i/o-port-rtd) (set! v10281@v9983@i/o-error-port v9983@i/o-error-port) (set! v10280@v9981@i/o-port-error? v9981@i/o-port-error?) (set! v10279@v9979@v9962@i/o-error-port v9979@v9962@i/o-error-port) (set! v10278@v9977@make-i/o-port-error v9977@make-i/o-port-error) (set! v10277@v9975@p? v9975@p?) (set! v10276@v9972@v9964 v9972@v9964) (set! v10275@v9970@v9965 v9970@v9965) (set! v10274@v9968@v9963 v9968@v9963) (set! v10273@v9961@&i/o-file-does-not-exist-rcd v9961@&i/o-file-does-not-exist-rcd) (set! v10272@v9959@&i/o-file-does-not-exist-rtd v9959@&i/o-file-does-not-exist-rtd) (set! v10271@v9957@i/o-file-does-not-exist-error? v9957@i/o-file-does-not-exist-error?) (set! v10270@v9955@make-i/o-file-does-not-exist-error v9955@make-i/o-file-does-not-exist-error) (set! v10269@v9953@p? v9953@p?) (set! v10268@v9950@v9942 v9950@v9942) (set! v10267@v9948@v9943 v9948@v9943) (set! v10266@v9946@v9941 v9946@v9941) (set! v10265@v9940@&i/o-file-already-exists-rcd v9940@&i/o-file-already-exists-rcd) (set! v10264@v9938@&i/o-file-already-exists-rtd v9938@&i/o-file-already-exists-rtd) (set! v10263@v9936@i/o-file-already-exists-error? v9936@i/o-file-already-exists-error?) (set! v10262@v9934@make-i/o-file-already-exists-error v9934@make-i/o-file-already-exists-error) (set! v10261@v9932@p? v9932@p?) (set! v10260@v9929@v9921 v9929@v9921) (set! v10259@v9927@v9922 v9927@v9922) (set! v10258@v9925@v9920 v9925@v9920) (set! v10257@v9919@&i/o-file-is-read-only-rcd v9919@&i/o-file-is-read-only-rcd) (set! v10256@v9917@&i/o-file-is-read-only-rtd v9917@&i/o-file-is-read-only-rtd) (set! v10255@v9915@i/o-file-is-read-only-error? v9915@i/o-file-is-read-only-error?) (set! v10254@v9913@make-i/o-file-is-read-only-error v9913@make-i/o-file-is-read-only-error) (set! v10253@v9911@p? v9911@p?) (set! v10252@v9908@v9900 v9908@v9900) (set! v10251@v9906@v9901 v9906@v9901) (set! v10250@v9904@v9899 v9904@v9899) (set! v10249@v9898@&i/o-file-protection-rcd v9898@&i/o-file-protection-rcd) (set! v10248@v9896@&i/o-file-protection-rtd v9896@&i/o-file-protection-rtd) (set! v10247@v9894@i/o-file-protection-error? v9894@i/o-file-protection-error?) (set! v10246@v9892@make-i/o-file-protection-error v9892@make-i/o-file-protection-error) (set! v10245@v9890@p? v9890@p?) (set! v10244@v9887@v9879 v9887@v9879) (set! v10243@v9885@v9880 v9885@v9880) (set! v10242@v9883@v9878 v9883@v9878) (set! v10241@v9877@&i/o-filename-rcd v9877@&i/o-filename-rcd) (set! v10240@v9875@&i/o-filename-rtd v9875@&i/o-filename-rtd) (set! v10239@v9873@i/o-error-filename v9873@i/o-error-filename) (set! v10238@v9871@i/o-filename-error? v9871@i/o-filename-error?) (set! v10237@v9869@v9852@i/o-error-filename v9869@v9852@i/o-error-filename) (set! v10236@v9867@make-i/o-filename-error v9867@make-i/o-filename-error) (set! v10235@v9865@p? v9865@p?) (set! v10234@v9862@v9854 v9862@v9854) (set! v10233@v9860@v9855 v9860@v9855) (set! v10232@v9858@v9853 v9858@v9853) (set! v10231@v9851@&i/o-invalid-position-rcd v9851@&i/o-invalid-position-rcd) (set! v10230@v9849@&i/o-invalid-position-rtd v9849@&i/o-invalid-position-rtd) (set! v10229@v9847@i/o-error-position v9847@i/o-error-position) (set! v10228@v9845@i/o-invalid-position-error? v9845@i/o-invalid-position-error?) (set! v10227@v9843@v9826@i/o-error-position v9843@v9826@i/o-error-position) (set! v10226@v9841@make-i/o-invalid-position-error v9841@make-i/o-invalid-position-error) (set! v10225@v9839@p? v9839@p?) (set! v10224@v9836@v9828 v9836@v9828) (set! v10223@v9834@v9829 v9834@v9829) (set! v10222@v9832@v9827 v9832@v9827) (set! v10221@v9825@&i/o-write-rcd v9825@&i/o-write-rcd) (set! v10220@v9823@&i/o-write-rtd v9823@&i/o-write-rtd) (set! v10219@v9821@i/o-write-error? v9821@i/o-write-error?) (set! v10218@v9819@make-i/o-write-error v9819@make-i/o-write-error) (set! v10217@v9817@p? v9817@p?) (set! v10216@v9814@v9806 v9814@v9806) (set! v10215@v9812@v9807 v9812@v9807) (set! v10214@v9810@v9805 v9810@v9805) (set! v10213@v9804@&i/o-read-rcd v9804@&i/o-read-rcd) (set! v10212@v9802@&i/o-read-rtd v9802@&i/o-read-rtd) (set! v10211@v9800@i/o-read-error? v9800@i/o-read-error?) (set! v10210@v9798@make-i/o-read-error v9798@make-i/o-read-error) (set! v10209@v9796@p? v9796@p?) (set! v10208@v9793@v9785 v9793@v9785) (set! v10207@v9791@v9786 v9791@v9786) (set! v10206@v9789@v9784 v9789@v9784) (set! v10205@v9783@&i/o-rcd v9783@&i/o-rcd) (set! v10204@v9781@&i/o-rtd v9781@&i/o-rtd) (set! v10203@v9779@i/o-error? v9779@i/o-error?) (set! v10202@v9777@make-i/o-error v9777@make-i/o-error) (set! v10201@v9775@p? v9775@p?) (set! v10200@v9772@v9764 v9772@v9764) (set! v10199@v9770@v9765 v9770@v9765) (set! v10198@v9768@v9763 v9768@v9763) (set! v10197@v9762@&undefined-rcd v9762@&undefined-rcd) (set! v10196@v9760@&undefined-rtd v9760@&undefined-rtd) (set! v10195@v9758@undefined-violation? v9758@undefined-violation?) (set! v10194@v9756@make-undefined-violation v9756@make-undefined-violation) (set! v10193@v9754@p? v9754@p?) (set! v10192@v9751@v9743 v9751@v9743) (set! v10191@v9749@v9744 v9749@v9744) (set! v10190@v9747@v9742 v9747@v9742) (set! v10189@v9741@&syntax-rcd v9741@&syntax-rcd) (set! v10188@v9739@&syntax-rtd v9739@&syntax-rtd) (set! v10187@v9737@syntax-violation-subform v9737@syntax-violation-subform) (set! v10186@v9735@syntax-violation-form v9735@syntax-violation-form) (set! v10185@v9733@syntax-violation? v9733@syntax-violation?) (set! v10184@v9731@v9712@syntax-violation-subform v9731@v9712@syntax-violation-subform) (set! v10183@v9729@v9711@syntax-violation-form v9729@v9711@syntax-violation-form) (set! v10182@v9727@make-syntax-violation v9727@make-syntax-violation) (set! v10181@v9725@p? v9725@p?) (set! v10180@v9722@v9714 v9722@v9714) (set! v10179@v9720@v9715 v9720@v9715) (set! v10178@v9718@v9713 v9718@v9713) (set! v10177@v9710@&lexical-rcd v9710@&lexical-rcd) (set! v10176@v9708@&lexical-rtd v9708@&lexical-rtd) (set! v10175@v9706@lexical-violation? v9706@lexical-violation?) (set! v10174@v9704@make-lexical-violation v9704@make-lexical-violation) (set! v10173@v9702@p? v9702@p?) (set! v10172@v9699@v9691 v9699@v9691) (set! v10171@v9697@v9692 v9697@v9692) (set! v10170@v9695@v9690 v9695@v9690) (set! v10169@v9689@&implementation-restriction-rcd v9689@&implementation-restriction-rcd) (set! v10168@v9687@&implementation-restriction-rtd v9687@&implementation-restriction-rtd) (set! v10167@v9685@implementation-restriction-violation? v9685@implementation-restriction-violation?) (set! v10166@v9683@make-implementation-restriction-violation v9683@make-implementation-restriction-violation) (set! v10165@v9681@p? v9681@p?) (set! v10164@v9678@v9670 v9678@v9670) (set! v10163@v9676@v9671 v9676@v9671) (set! v10162@v9674@v9669 v9674@v9669) (set! v10161@v9668@&non-continuable-rcd v9668@&non-continuable-rcd) (set! v10160@v9666@&non-continuable-rtd v9666@&non-continuable-rtd) (set! v10159@v9664@non-continuable-violation? v9664@non-continuable-violation?) (set! v10158@v9662@make-non-continuable-violation v9662@make-non-continuable-violation) (set! v10157@v9660@p? v9660@p?) (set! v10156@v9657@v9649 v9657@v9649) (set! v10155@v9655@v9650 v9655@v9650) (set! v10154@v9653@v9648 v9653@v9648) (set! v10153@v9647@&who-rcd v9647@&who-rcd) (set! v10152@v9645@&who-rtd v9645@&who-rtd) (set! v10151@v9643@condition-who v9643@condition-who) (set! v10150@v9641@who-condition? v9641@who-condition?) (set! v10149@v9639@v9622@condition-who v9639@v9622@condition-who) (set! v10148@v9637@make-who-condition v9637@make-who-condition) (set! v10147@v9635@p? v9635@p?) (set! v10146@v9632@v9624 v9632@v9624) (set! v10145@v9630@v9625 v9630@v9625) (set! v10144@v9628@v9623 v9628@v9623) (set! v10143@v9621@&irritants-rcd v9621@&irritants-rcd) (set! v10142@v9619@&irritants-rtd v9619@&irritants-rtd) (set! v10141@v9617@condition-irritants v9617@condition-irritants) (set! v10140@v9615@irritants-condition? v9615@irritants-condition?) (set! v10139@v9613@v9596@condition-irritants v9613@v9596@condition-irritants) (set! v10138@v9611@make-irritants-condition v9611@make-irritants-condition) (set! v10137@v9609@p? v9609@p?) (set! v10136@v9606@v9598 v9606@v9598) (set! v10135@v9604@v9599 v9604@v9599) (set! v10134@v9602@v9597 v9602@v9597) (set! v10133@v9595@&assertion-rcd v9595@&assertion-rcd) (set! v10132@v9593@&assertion-rtd v9593@&assertion-rtd) (set! v10131@v9591@assertion-violation? v9591@assertion-violation?) (set! v10130@v9589@make-assertion-violation v9589@make-assertion-violation) (set! v10129@v9587@p? v9587@p?) (set! v10128@v9584@v9576 v9584@v9576) (set! v10127@v9582@v9577 v9582@v9577) (set! v10126@v9580@v9575 v9580@v9575) (set! v10125@v9574@&violation-rcd v9574@&violation-rcd) (set! v10124@v9572@&violation-rtd v9572@&violation-rtd) (set! v10123@v9570@violation? v9570@violation?) (set! v10122@v9568@make-violation v9568@make-violation) (set! v10121@v9566@p? v9566@p?) (set! v10120@v9563@v9555 v9563@v9555) (set! v10119@v9561@v9556 v9561@v9556) (set! v10118@v9559@v9554 v9559@v9554) (set! v10117@v9553@&error-rcd v9553@&error-rcd) (set! v10116@v9551@&error-rtd v9551@&error-rtd) (set! v10115@v9549@error? v9549@error?) (set! v10114@v9547@make-error v9547@make-error) (set! v10113@v9545@p? v9545@p?) (set! v10112@v9542@v9534 v9542@v9534) (set! v10111@v9540@v9535 v9540@v9535) (set! v10110@v9538@v9533 v9538@v9533) (set! v10109@v9532@&serious-rcd v9532@&serious-rcd) (set! v10108@v9530@&serious-rtd v9530@&serious-rtd) (set! v10107@v9528@serious-condition? v9528@serious-condition?) (set! v10106@v9526@make-serious-condition v9526@make-serious-condition) (set! v10105@v9524@p? v9524@p?) (set! v10104@v9521@v9513 v9521@v9513) (set! v10103@v9519@v9514 v9519@v9514) (set! v10102@v9517@v9512 v9517@v9512) (set! v10101@v9511@&warning-rcd v9511@&warning-rcd) (set! v10100@v9509@&warning-rtd v9509@&warning-rtd) (set! v10099@v9507@warning? v9507@warning?) (set! v10098@v9505@make-warning v9505@make-warning) (set! v10097@v9503@p? v9503@p?) (set! v10096@v9500@v9492 v9500@v9492) (set! v10095@v9498@v9493 v9498@v9493) (set! v10094@v9496@v9491 v9496@v9491) (set! v10093@v9490@&message-rcd v9490@&message-rcd) (set! v10092@v9488@&message-rtd v9488@&message-rtd) (set! v10091@v9486@condition-message v9486@condition-message) (set! v10090@v9484@message-condition? v9484@message-condition?) (set! v10089@v9482@v9465@condition-message v9482@v9465@condition-message) (set! v10088@v9480@make-message-condition v9480@make-message-condition) (set! v10087@v9478@p? v9478@p?) (set! v10086@v9475@v9467 v9475@v9467) (set! v10085@v9473@v9468 v9473@v9468) (set! v10084@v9471@v9466 v9471@v9466) (set! v10083@v9399@&condition-rcd v9399@&condition-rcd) (set! v10082@v9397@&condition-rtd v9397@&condition-rtd) (set! v10081@v9395@make-&condition v9395@make-&condition) (set! v10080@v9393@&condition? v9393@&condition?) (set! v10079@v9390@v9382 v9390@v9382) (set! v10078@v9388@v9383 v9388@v9383) (set! v10077@v9386@v9381 v9386@v9381)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (v1255@v1180@current-primitive-locations (lambda (v11341@x) ((lambda (v11343@t) (if v11343@t (cdr v11343@t) '#f)) (assq v11341@x '((&no-nans-rcd . v10317@v10076@&no-nans-rcd) (&no-nans-rtd . v10316@v10074@&no-nans-rtd) (&no-infinities-rcd . v10309@v10055@&no-infinities-rcd) (&no-infinities-rtd . v10308@v10053@&no-infinities-rtd) (&i/o-encoding-rcd . v10301@v10034@&i/o-encoding-rcd) (&i/o-encoding-rtd . v10300@v10032@&i/o-encoding-rtd) (&i/o-decoding-rcd . v10291@v10008@&i/o-decoding-rcd) (&i/o-decoding-rtd . v10290@v10006@&i/o-decoding-rtd) (&i/o-port-rcd . v10283@v9987@&i/o-port-rcd) (&i/o-port-rtd . v10282@v9985@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . v10273@v9961@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . v10272@v9959@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . v10265@v9940@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . v10264@v9938@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . v10257@v9919@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . v10256@v9917@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . v10249@v9898@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . v10248@v9896@&i/o-file-protection-rtd) (&i/o-filename-rcd . v10241@v9877@&i/o-filename-rcd) (&i/o-filename-rtd . v10240@v9875@&i/o-filename-rtd) (&i/o-invalid-position-rcd . v10231@v9851@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . v10230@v9849@&i/o-invalid-position-rtd) (&i/o-write-rcd . v10221@v9825@&i/o-write-rcd) (&i/o-write-rtd . v10220@v9823@&i/o-write-rtd) (&i/o-read-rcd . v10213@v9804@&i/o-read-rcd) (&i/o-read-rtd . v10212@v9802@&i/o-read-rtd) (&i/o-rcd . v10205@v9783@&i/o-rcd) (&i/o-rtd . v10204@v9781@&i/o-rtd) (&undefined-rcd . v10197@v9762@&undefined-rcd) (&undefined-rtd . v10196@v9760@&undefined-rtd) (&syntax-rcd . v10189@v9741@&syntax-rcd) (&syntax-rtd . v10188@v9739@&syntax-rtd) (&lexical-rcd . v10177@v9710@&lexical-rcd) (&lexical-rtd . v10176@v9708@&lexical-rtd) (&implementation-restriction-rcd . v10169@v9689@&implementation-restriction-rcd) (&implementation-restriction-rtd . v10168@v9687@&implementation-restriction-rtd) (&non-continuable-rcd . v10161@v9668@&non-continuable-rcd) (&non-continuable-rtd . v10160@v9666@&non-continuable-rtd) (&who-rcd . v10153@v9647@&who-rcd) (&who-rtd . v10152@v9645@&who-rtd) (&irritants-rcd . v10143@v9621@&irritants-rcd) (&irritants-rtd . v10142@v9619@&irritants-rtd) (&assertion-rcd . v10133@v9595@&assertion-rcd) (&assertion-rtd . v10132@v9593@&assertion-rtd) (&violation-rcd . v10125@v9574@&violation-rcd) (&violation-rtd . v10124@v9572@&violation-rtd) (&error-rcd . v10117@v9553@&error-rcd) (&error-rtd . v10116@v9551@&error-rtd) (&serious-rcd . v10109@v9532@&serious-rcd) (&serious-rtd . v10108@v9530@&serious-rtd) (&warning-rcd . v10101@v9511@&warning-rcd) (&warning-rtd . v10100@v9509@&warning-rtd) (&message-rcd . v10093@v9490@&message-rcd) (&message-rtd . v10092@v9488@&message-rtd) (&condition-rcd . v10083@v9399@&condition-rcd) (&condition-rtd . v10082@v9397@&condition-rtd) (syntax-error . v9367@v3002@syntax-error) (syntax-dispatch . v9260@v2773@syntax-dispatch) (gensym . v1160@v924@gensym) (load . v10580@v10345@load) (interaction-environment . v9375@v3018@interaction-environment) (library-path . v1784@v1421@library-path) (make-parameter . v1174@v952@make-parameter) (make-variable-transformer . v9194@v2332@make-variable-transformer) (identifier? . v9370@v3008@identifier?) (generate-temporaries . v9360@v2988@generate-temporaries) (free-identifier=? . v9361@v2990@free-identifier=?) (syntax->datum . v9372@v3012@syntax->datum) (datum->syntax . v9371@v3010@datum->syntax) (bound-identifier=? . v9362@v2992@bound-identifier=?) (make-i/o-write-error . v10218@v9819@make-i/o-write-error) (make-i/o-read-error . v10210@v9798@make-i/o-read-error) (make-i/o-port-error . v10278@v9977@make-i/o-port-error) (make-i/o-invalid-position-error . v10226@v9841@make-i/o-invalid-position-error) (make-i/o-filename-error . v10236@v9867@make-i/o-filename-error) (make-i/o-file-protection-error . v10246@v9892@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . v10254@v9913@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . v10270@v9955@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . v10262@v9934@make-i/o-file-already-exists-error) (make-i/o-error . v10202@v9777@make-i/o-error) (make-i/o-encoding-error . v10296@v10024@make-i/o-encoding-error) (make-i/o-decoding-error . v10288@v10002@make-i/o-decoding-error) (i/o-write-error? . v10219@v9821@i/o-write-error?) (i/o-read-error? . v10211@v9800@i/o-read-error?) (i/o-port-error? . v10280@v9981@i/o-port-error?) (i/o-invalid-position-error? . v10228@v9845@i/o-invalid-position-error?) (i/o-filename-error? . v10238@v9871@i/o-filename-error?) (i/o-file-protection-error? . v10247@v9894@i/o-file-protection-error?) (i/o-file-is-read-only-error? . v10255@v9915@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . v10271@v9957@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . v10263@v9936@i/o-file-already-exists-error?) (i/o-error? . v10203@v9779@i/o-error?) (i/o-error-position . v10229@v9847@i/o-error-position) (i/o-error-port . v10281@v9983@i/o-error-port) (i/o-error-filename . v10239@v9873@i/o-error-filename) (i/o-encoding-error? . v10298@v10028@i/o-encoding-error?) (i/o-encoding-error-char . v10299@v10030@i/o-encoding-error-char) (i/o-decoding-error? . v10289@v10004@i/o-decoding-error?) (scheme-report-environment . v9351@v2970@scheme-report-environment) (null-environment . v9350@v2968@null-environment) (command-line . v10577@v10339@command-line) (eval . v9353@v2974@eval) (environment . v9349@v2966@environment) (who-condition? . v10150@v9641@who-condition?) (warning? . v10099@v9507@warning?) (violation? . v10123@v9570@violation?) (undefined-violation? . v10195@v9758@undefined-violation?) (syntax-violation? . v10185@v9733@syntax-violation?) (syntax-violation-subform . v10187@v9737@syntax-violation-subform) (syntax-violation-form . v10186@v9735@syntax-violation-form) (syntax-violation . v9369@v3006@syntax-violation) (serious-condition? . v10107@v9528@serious-condition?) (non-continuable-violation? . v10159@v9664@non-continuable-violation?) (message-condition? . v10090@v9484@message-condition?) (make-who-condition . v10148@v9637@make-who-condition) (make-warning . v10098@v9505@make-warning) (make-violation . v10122@v9568@make-violation) (make-undefined-violation . v10194@v9756@make-undefined-violation) (make-syntax-violation . v10182@v9727@make-syntax-violation) (make-serious-condition . v10106@v9526@make-serious-condition) (make-non-continuable-violation . v10158@v9662@make-non-continuable-violation) (make-message-condition . v10088@v9480@make-message-condition) (make-lexical-violation . v10174@v9704@make-lexical-violation) (make-irritants-condition . v10138@v9611@make-irritants-condition) (make-implementation-restriction-violation . v10166@v9683@make-implementation-restriction-violation) (make-error . v10114@v9547@make-error) (make-assertion-violation . v10130@v9589@make-assertion-violation) (lexical-violation? . v10175@v9706@lexical-violation?) (irritants-condition? . v10140@v9615@irritants-condition?) (implementation-restriction-violation? . v10167@v9685@implementation-restriction-violation?) (error? . v10115@v9549@error?) (condition-who . v10151@v9643@condition-who) (condition-message . v10091@v9486@condition-message) (condition-irritants . v10141@v9617@condition-irritants) (assertion-violation? . v10131@v9591@assertion-violation?) (no-nans-violation? . v10315@v10072@no-nans-violation?) (no-infinities-violation? . v10307@v10051@no-infinities-violation?) (make-no-nans-violation . v10314@v10070@make-no-nans-violation) (make-no-infinities-violation . v10306@v10049@make-no-infinities-violation) (assertion-error . v9366@v3000@assertion-error)))))) (v1800@v1453@install-library 'v11306 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . v11296) (format . v11293) (string-split . v11282) (call-process . v11276) (set-current-directory! . v11272) (expand-path . v11271) (current-directory . v11270) (%spawn . v11269) (%waitpid . v11268) (%ffi-supported? . v11267) (%ffi-pointer-ref . v11266) (%ffi-pointer->string . v11265) (%ffi-call->string-or-zero . v11264) (%ffi-call->double . v11263) (%ffi-call->void* . v11262) (%ffi-call->void . v11261) (%ffi-call->int . v11260) (%ffi-lookup . v11259) (%ffi-open . v11258) (%fork . v11257) (%pipe . v11256) (p . v11255) (string-upcase . v11226) (string-titlecase . v11225) (string-normalize-nfkd . v11224) (string-normalize-nfkc . v11223) (string-normalize-nfd . v11222) (string-normalize-nfc . v11221) (string-foldcase . v11220) (string-downcase . v11219) (string-ci>? . v11218) (string-ci>=? . v11217) (string-ci=? . v11216) (string-ci<? . v11215) (string-ci<=? . v11214) (char-whitespace? . v11213) (char-upper-case? . v11212) (char-title-case? . v11211) (char-numeric? . v11210) (char-lower-case? . v11209) (char-general-category . v11208) (char-upcase . v11207) (char-titlecase . v11206) (char-foldcase . v11205) (char-downcase . v11204) (char-ci>? . v11203) (char-ci>=? . v11202) (char-ci=? . v11201) (char-ci<? . v11200) (char-ci<=? . v11199) (char-alphabetic? . v11198) (make-variable-transformer . v2331) (identifier? . v3007) (generate-temporaries . v2987) (free-identifier=? . v2989) (syntax->datum . v3011) (datum->syntax . v3009) (bound-identifier=? . v2991) (record-type-descriptor? . v11197) (record-predicate . v11196) (record-mutator . v11195) (record-constructor . v11194) (record-accessor . v11193) (make-record-type-descriptor . v11192) (make-record-constructor-descriptor . v11191) (record? . v11190) (record-type-uid . v11189) (record-type-sealed? . v11188) (record-type-parent . v11187) (record-type-opaque? . v11186) (record-type-name . v11185) (record-type-generative? . v11184) (record-type-field-names . v11183) (record-rtd . v11182) (record-field-mutable? . v11181) (delete-file . v11180) (file-exists? . v11179) (vector-sort! . v11178) (vector-sort . v11177) (list-sort . v11176) (symbol-hash . v11175) (string-ci-hash . v11174) (string-hash . v11173) (equal-hash . v11172) (hashtable-equivalence-function . v11171) (make-hashtable . v11170) (hashtable-hash-function . v11169) (make-eqv-hashtable . v11168) (make-eq-hashtable . v11167) (hashtable? . v11166) (hashtable-update! . v11165) (hashtable-size . v11164) (hashtable-set! . v11163) (hashtable-ref . v11162) (hashtable-mutable? . v11161) (hashtable-keys . v11160) (hashtable-entries . v11159) (hashtable-delete! . v11158) (hashtable-copy . v11157) (hashtable-contains? . v11156) (hashtable-clear! . v11155) (call-with-output-file . v11154) (call-with-input-file . v11153) (write-char . v11152) (write . v11151) (with-output-to-file . v11150) (with-input-from-file . v11149) (read-char . v11148) (read . v11147) (peek-char . v11146) (open-output-file . v11145) (open-input-file . v11144) (newline . v11143) (display . v11142) (close-output-port . v11141) (close-input-port . v11140) (eof-object? . v11139) (eof-object . v11138) (current-error-port . v11137) (current-output-port . v11136) (current-input-port . v11135) (output-port? . v11134) (input-port? . v11133) (utf-8-codec . v11132) (utf-16-codec . v11131) (transcoder-error-handling-mode . v11130) (transcoder-eol-style . v11129) (transcoder-codec . v11128) (transcoded-port . v11127) (textual-port? . v11126) (string->bytevector . v11125) (standard-output-port . v11124) (standard-input-port . v11123) (standard-error-port . v11122) (set-port-position! . v11121) (put-u8 . v11120) (put-string . v11119) (put-datum . v11118) (put-char . v11117) (put-bytevector . v11116) (port? . v11115) (port-transcoder . v11114) (port-position . v11113) (port-has-set-port-position!? . v11112) (port-has-port-position? . v11111) (port-eof? . v11110) (output-port-buffer-mode . v11109) (open-string-output-port . v11108) (open-string-input-port . v11107) (open-file-output-port . v11106) (open-file-input/output-port . v11105) (open-file-input-port . v11104) (open-bytevector-output-port . v11103) (open-bytevector-input-port . v11102) (native-transcoder . v11101) (native-eol-style . v11100) (make-transcoder . v11099) (latin-1-codec . v11098) (make-i/o-write-error . v9818) (make-i/o-read-error . v9797) (make-i/o-port-error . v9976) (make-i/o-invalid-position-error . v9840) (make-i/o-filename-error . v9866) (make-i/o-file-protection-error . v9891) (make-i/o-file-is-read-only-error . v9912) (make-i/o-file-does-not-exist-error . v9954) (make-i/o-file-already-exists-error . v9933) (make-i/o-error . v9776) (make-i/o-encoding-error . v10023) (make-i/o-decoding-error . v10001) (make-custom-textual-output-port . v11097) (make-custom-textual-input/output-port . v11096) (make-custom-textual-input-port . v11095) (make-custom-binary-output-port . v11094) (make-custom-binary-input/output-port . v11093) (make-custom-binary-input-port . v11092) (make-bytevector . v11091) (lookahead-u8 . v11090) (lookahead-char . v11089) (i/o-write-error? . v9820) (i/o-read-error? . v9799) (i/o-port-error? . v9980) (i/o-invalid-position-error? . v9844) (i/o-filename-error? . v9870) (i/o-file-protection-error? . v9893) (i/o-file-is-read-only-error? . v9914) (i/o-file-does-not-exist-error? . v9956) (i/o-file-already-exists-error? . v9935) (i/o-error? . v9778) (i/o-error-position . v9846) (i/o-error-port . v9982) (i/o-error-filename . v9872) (i/o-encoding-error? . v10027) (i/o-encoding-error-char . v10029) (i/o-decoding-error? . v10003) (get-u8 . v11088) (get-string-n! . v11087) (get-string-n . v11086) (get-string-all . v11085) (get-line . v11084) (get-datum . v11083) (get-char . v11082) (get-bytevector-some . v11081) (get-bytevector-n! . v11080) (get-bytevector-n . v11079) (get-bytevector-all . v11078) (flush-output-port . v11077) (close-port . v11076) (exit . v11068) (command-line . v10338) (string-fill! . v11067) (string-set! . v11066) (set-cdr! . v11065) (set-car! . v11064) (remove . v11063) (remv . v11062) (remp . v11061) (remq . v11060) (partition . v11059) (memv . v11058) (memq . v11057) (memp . v11056) (member . v11055) (exists . v11054) (for-all . v11053) (fold-right . v11052) (fold-left . v11051) (find . v11050) (filter . v11049) (cons* . v11048) (assv . v11047) (assq . v11046) (assp . v11045) (assoc . v11044) (call-with-string-output-port . v11043) (call-with-port . v11042) (call-with-bytevector-output-port . v11041) (bytevector->string . v11040) (buffer-mode? . v11039) (binary-port? . v11038) (with-exception-handler . v11037) (raise-continuable . v11036) (raise . v11035) (eval . v2973) (environment . v2965) (make-enumeration . v11034) (enum-set=? . v11033) (enum-set-universe . v11032) (enum-set-union . v11031) (enum-set-subset? . v11030) (enum-set-projection . v11029) (enum-set-member? . v11028) (enum-set-intersection . v11027) (enum-set-indexer . v11026) (enum-set-difference . v11025) (enum-set-constructor . v11024) (enum-set-complement . v11023) (enum-set->list . v11022) (who-condition? . v9640) (warning? . v9506) (violation? . v9569) (undefined-violation? . v9757) (syntax-violation? . v9732) (syntax-violation-subform . v9736) (syntax-violation-form . v9734) (syntax-violation . v3005) (simple-conditions . v11021) (serious-condition? . v9527) (non-continuable-violation? . v9663) (message-condition? . v9483) (make-who-condition . v9636) (make-warning . v9504) (make-violation . v9567) (make-undefined-violation . v9755) (make-syntax-violation . v9726) (make-serious-condition . v9525) (make-non-continuable-violation . v9661) (make-message-condition . v9479) (make-lexical-violation . v9703) (make-irritants-condition . v9610) (make-implementation-restriction-violation . v9682) (make-error . v9546) (make-assertion-violation . v9588) (lexical-violation? . v9705) (irritants-condition? . v9614) (implementation-restriction-violation? . v9684) (error? . v9548) (condition-who . v9642) (condition-predicate . v11020) (condition-message . v9485) (condition-irritants . v9616) (condition-accessor . v11019) (condition . v11018) (assertion-violation? . v9590) (condition? . v11017) (utf32->string . v11016) (utf16->string . v11015) (utf8->string . v11014) (uint-list->bytevector . v11013) (u8-list->bytevector . v11012) (string->utf8 . v11011) (string->utf32 . v11010) (string->utf16 . v11009) (sint-list->bytevector . v11008) (native-endianness . v11007) (bytevector? . v11006) (bytevector=? . v11005) (bytevector-uint-set! . v11004) (bytevector-uint-ref . v11003) (bytevector-u8-set! . v11002) (bytevector-u8-ref . v11001) (bytevector-u64-set! . v11000) (bytevector-u64-ref . v10999) (bytevector-u64-native-set! . v10998) (bytevector-u64-native-ref . v10997) (bytevector-u32-set! . v10996) (bytevector-u32-ref . v10995) (bytevector-u32-native-set! . v10994) (bytevector-u32-native-ref . v10993) (bytevector-u16-set! . v10992) (bytevector-u16-ref . v10991) (bytevector-u16-native-set! . v10990) (bytevector-u16-native-ref . v10989) (bytevector-sint-set! . v10988) (bytevector-sint-ref . v10987) (bytevector-s8-set! . v10986) (bytevector-s8-ref . v10985) (bytevector-s64-set! . v10984) (bytevector-s64-ref . v10983) (bytevector-s64-native-set! . v10982) (bytevector-s64-native-ref . v10981) (bytevector-s32-set! . v10980) (bytevector-s32-ref . v10979) (bytevector-s32-native-set! . v10978) (bytevector-s32-native-ref . v10977) (bytevector-s16-set! . v10976) (bytevector-s16-ref . v10975) (bytevector-s16-native-set! . v10974) (bytevector-s16-native-ref . v10973) (bytevector-length . v10972) (bytevector-ieee-single-ref . v10971) (bytevector-ieee-single-set! . v10970) (bytevector-ieee-single-native-set! . v10969) (bytevector-ieee-single-native-ref . v10968) (bytevector-ieee-double-set! . v10967) (bytevector-ieee-double-ref . v10966) (bytevector-ieee-double-native-set! . v10965) (bytevector-ieee-double-native-ref . v10964) (bytevector-fill! . v10963) (bytevector-copy! . v10962) (bytevector-copy . v10961) (bytevector->uint-list . v10960) (bytevector->u8-list . v10959) (bytevector->sint-list . v10958) (no-nans-violation? . v10071) (no-infinities-violation? . v10050) (make-no-nans-violation . v10069) (make-no-infinities-violation . v10048) (real->flonum . v10957) (flzero? . v10956) (fltruncate . v10955) (fltan . v10954) (flsqrt . v10953) (flsin . v10952) (flround . v10951) (flpositive? . v10950) (flonum? . v10949) (flodd? . v10948) (flnumerator . v10947) (flnegative? . v10946) (flnan? . v10945) (flmod0 . v10944) (flmod . v10943) (flmin . v10942) (flmax . v10941) (fllog . v10940) (flinteger? . v10939) (flinfinite? . v10938) (flfloor . v10937) (flfinite? . v10936) (flexpt . v10935) (flexp . v10934) (fleven? . v10933) (fldiv0-and-mod0 . v10932) (fldiv0 . v10931) (fldiv-and-mod . v10930) (fldiv . v10929) (fldenominator . v10928) (flcos . v10927) (flceiling . v10926) (flatan . v10925) (flasin . v10924) (flacos . v10923) (flabs . v10922) (fl>? . v10921) (fl>=? . v10920) (fl=? . v10919) (fl<? . v10918) (fl<=? . v10917) (fl/ . v10916) (fl- . v10915) (fl+ . v10914) (fl* . v10913) (fixnum->flonum . v10912) (fxzero? . v10911) (fxxor . v10910) (fxrotate-bit-field . v10909) (fxreverse-bit-field . v10908) (fxpositive? . v10907) (fxodd? . v10906) (fxnot . v10905) (fxnegative? . v10904) (fxmod0 . v10903) (fxmod . v10902) (fxmin . v10901) (fxmax . v10900) (fxlength . v10899) (fxior . v10898) (fxif . v10897) (fxfirst-bit-set . v10896) (fxeven? . v10895) (fxdiv0-and-mod0 . v10894) (fxdiv0 . v10893) (fxdiv-and-mod . v10892) (fxdiv . v10891) (fxcopy-bit-field . v10890) (fxcopy-bit . v10889) (fxbit-set? . v10888) (fxbit-field . v10887) (fxbit-count . v10886) (fxarithmetic-shift-right . v10885) (fxarithmetic-shift-left . v10884) (fxarithmetic-shift . v10883) (fxand . v10882) (fx>? . v10881) (fx>=? . v10880) (fx=? . v10879) (fx<? . v10878) (fx<=? . v10877) (fx-/carry . v10876) (fx- . v10875) (fx+/carry . v10874) (fx+ . v10873) (fx*/carry . v10872) (fx* . v10871) (greatest-fixnum . v10870) (least-fixnum . v10869) (fixnum-width . v10868) (fixnum? . v10867) (bitwise-rotate-bit-field . v10866) (bitwise-reverse-bit-field . v10865) (bitwise-length . v10864) (bitwise-if . v10863) (bitwise-first-bit-set . v10862) (bitwise-copy-bit-field . v10861) (bitwise-copy-bit . v10860) (bitwise-bit-set? . v10859) (bitwise-bit-field . v10858) (bitwise-bit-count . v10857) (bitwise-xor . v10856) (bitwise-ior . v10855) (bitwise-and . v10854) (bitwise-not . v10853) (bitwise-arithmetic-shift-right . v10852) (bitwise-arithmetic-shift-left . v10851) (bitwise-arithmetic-shift . v10850) (zero? . v10849) (vector? . v10848) (vector-set! . v10847) (vector-ref . v10846) (vector-map . v10845) (vector-length . v10844) (vector-for-each . v10843) (vector-fill! . v10842) (vector->list . v10841) (vector . v10840) (values . v10839) (truncate . v10838) (tan . v10837) (symbol? . v10836) (symbol=? . v10835) (symbol->string . v10834) (substring . v10833) (string? . v10832) (string>? . v10831) (string>=? . v10830) (string=? . v10829) (string<? . v10828) (string<=? . v10827) (string-ref . v10826) (string-length . v10825) (string-for-each . v10824) (string-copy . v10823) (string-append . v10822) (string->symbol . v10821) (string->number . v10820) (string->list . v10819) (string . v10818) (sqrt . v10817) (sin . v10816) (round . v10815) (reverse . v10814) (real? . v10813) (real-valued? . v10812) (real-part . v10811) (rationalize . v10810) (rational? . v10809) (rational-valued? . v10808) (procedure? . v10807) (positive? . v10806) (pair? . v10805) (odd? . v10804) (numerator . v10803) (number? . v10802) (number->string . v10801) (null? . v10800) (not . v10799) (negative? . v10798) (nan? . v10797) (min . v10796) (max . v10795) (map . v10794) (make-vector . v10793) (make-string . v10792) (make-rectangular . v10791) (make-polar . v10790) (magnitude . v10789) (log . v10788) (list? . v10787) (list-tail . v10786) (list-ref . v10785) (list->vector . v10784) (list->string . v10783) (list . v10782) (length . v10781) (lcm . v10780) (integer? . v10779) (integer-valued? . v10778) (integer->char . v10777) (infinite? . v10776) (inexact? . v10775) (inexact . v10774) (imag-part . v10773) (gcd . v10772) (for-each . v10771) (floor . v10770) (finite? . v10769) (expt . v10768) (exp . v10767) (exact? . v10766) (exact-integer-sqrt . v10765) (exact . v10764) (even? . v10763) (error . v10762) (eqv? . v10761) (equal? . v10760) (eq? . v10759) (dynamic-wind . v10758) (div0-and-mod0 . v10757) (mod0 . v10756) (div0 . v10755) (div-and-mod . v10754) (mod . v10753) (div . v10752) (denominator . v10751) (cos . v10750) (cons . v10749) (complex? . v10748) (char? . v10747) (char>? . v10746) (char>=? . v10745) (char=? . v10744) (char<? . v10743) (char<=? . v10742) (char->integer . v10741) (ceiling . v10740) (call-with-values . v10739) (call/cc . v10738) (call-with-current-continuation . v10737) (cddddr . v10736) (cdddar . v10735) (cddadr . v10734) (cddaar . v10733) (cdaddr . v10732) (cdadar . v10731) (cdaadr . v10730) (cdaaar . v10729) (cadddr . v10728) (caddar . v10727) (cadadr . v10726) (cadaar . v10725) (caaddr . v10724) (caadar . v10723) (caaadr . v10722) (caaaar . v10721) (cdddr . v10720) (cddar . v10719) (cdadr . v10718) (cdaar . v10717) (caddr . v10716) (cadar . v10715) (caadr . v10714) (caaar . v10713) (cddr . v10712) (cdar . v10711) (cadr . v10710) (caar . v10709) (cdr . v10708) (car . v10707) (boolean? . v10706) (boolean=? . v10705) (atan . v10704) (assertion-violation . v10703) (asin . v10702) (apply . v10701) (append . v10700) (angle . v10699) (acos . v10698) (abs . v10697) (/ . v10696) (* . v10695) (- . v10694) (+ . v10693) (>= . v10692) (> . v10691) (= . v10690) (<= . v10689) (< . v10688) (library . v10687) (&no-nans . v10686) (&no-infinities . v10685) (&i/o-encoding . v10684) (&i/o-decoding . v10683) (&i/o-port . v10682) (&i/o-file-does-not-exist . v10681) (&i/o-file-already-exists . v10680) (&i/o-file-is-read-only . v10679) (&i/o-file-protection . v10678) (&i/o-filename . v10677) (&i/o-invalid-position . v10676) (&i/o-write . v10675) (&i/o-read . v10674) (&i/o . v10673) (&undefined . v10672) (&syntax . v10671) (&lexical . v10670) (&implementation-restriction . v10669) (&non-continuable . v10668) (&who . v10667) (&irritants . v10666) (&assertion . v10665) (&violation . v10664) (&error . v10663) (&serious . v10662) (&warning . v10661) (&message . v10660) (&condition . v10659) (define-condition-type . v10658) (define-enumeration . v10657) (define-record-type . v10656) (parent-rtd . v10655) (nongenerative . v10654) (opaque . v10653) (sealed . v10652) (protocol . v10651) (parent . v10650) (immutable . v10649) (mutable . v10648) (fields . v10647) (error-handling-mode . v10646) (file-options . v10645) (buffer-mode . v10644) (eol-style . v10643) (guard . v10642) (unsyntax-splicing . v10639) (unsyntax . v10638) (unquote-splicing . v10637) (unquote . v10636) (_ . v10635) (else . v10634) (=> . v10633) (... . v10632) (assert . v10631) (endianness . v10630) (do . v10627) (cond . v10626) (let* . v10625) (let . v10624) (let*-values . v10623) (let-values . v10622) (identifier-syntax . v10621) (with-syntax . v10620) (quasisyntax . v10619) (quasiquote . v10618) (syntax-rules . v10617) (include . v10616) (record-constructor-descriptor . v10614) (record-type-descriptor . v10613) (case . v10612) (unless . v10610) (when . v10609) (or . v10608) (and . v10607) (if . v10606) (letrec* . v10605) (letrec . v10604) (case-lambda . v10602) (lambda . v10601) (syntax . v10600) (syntax-case . v10599) (quote . v10598) (letrec-syntax . v10596) (let-syntax . v10595) (set! . v10594) (import . v10593) (begin . v10592) (define-syntax . v10590) (define . v10589)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11307 '(psyntax null-environment-5) '() '() '() '() '((make-promise . v11069) (unquote-splicing . v10637) (unquote . v10636) (_ . v10635) (else . v10634) (=> . v10633) (... . v10632) (delay . v10629) (do . v10627) (cond . v10626) (let* . v10625) (let . v10624) (quasiquote . v10618) (syntax-rules . v10617) (case . v10612) (or . v10608) (and . v10607) (if . v10606) (letrec . v10604) (lambda . v10601) (quote . v10598) (letrec-syntax . v10596) (let-syntax . v10595) (set! . v10594) (begin . v10592) (define-syntax . v10590) (define . v10589)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11308 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . v11218) (string-ci>=? . v11217) (string-ci=? . v11216) (string-ci<? . v11215) (string-ci<=? . v11214) (char-whitespace? . v11213) (char-upper-case? . v11212) (char-numeric? . v11210) (char-lower-case? . v11209) (char-upcase . v11207) (char-downcase . v11204) (char-ci>? . v11203) (char-ci>=? . v11202) (char-ci=? . v11201) (char-ci<? . v11200) (char-ci<=? . v11199) (char-alphabetic? . v11198) (call-with-output-file . v11154) (call-with-input-file . v11153) (write-char . v11152) (write . v11151) (with-output-to-file . v11150) (with-input-from-file . v11149) (read-char . v11148) (read . v11147) (peek-char . v11146) (open-output-file . v11145) (open-input-file . v11144) (newline . v11143) (display . v11142) (close-output-port . v11141) (close-input-port . v11140) (eof-object . v11138) (current-output-port . v11136) (current-input-port . v11135) (output-port? . v11134) (input-port? . v11133) (scheme-report-environment . v2969) (quotient . v11075) (null-environment . v2967) (remainder . v11074) (modulo . v11073) (inexact->exact . v11072) (force . v11071) (exact->inexact . v11070) (make-promise . v11069) (string-fill! . v11067) (string-set! . v11066) (set-cdr! . v11065) (set-car! . v11064) (memv . v11058) (memq . v11057) (member . v11055) (assv . v11047) (assq . v11046) (assoc . v11044) (eval . v2973) (zero? . v10849) (vector? . v10848) (vector-set! . v10847) (vector-ref . v10846) (vector-length . v10844) (vector-fill! . v10842) (vector->list . v10841) (vector . v10840) (values . v10839) (truncate . v10838) (tan . v10837) (symbol? . v10836) (symbol->string . v10834) (substring . v10833) (string? . v10832) (string>? . v10831) (string>=? . v10830) (string=? . v10829) (string<? . v10828) (string<=? . v10827) (string-ref . v10826) (string-length . v10825) (string-copy . v10823) (string-append . v10822) (string->symbol . v10821) (string->number . v10820) (string->list . v10819) (string . v10818) (sqrt . v10817) (sin . v10816) (round . v10815) (reverse . v10814) (real? . v10813) (real-part . v10811) (rationalize . v10810) (rational? . v10809) (procedure? . v10807) (positive? . v10806) (pair? . v10805) (odd? . v10804) (numerator . v10803) (number? . v10802) (number->string . v10801) (not . v10799) (negative? . v10798) (min . v10796) (max . v10795) (map . v10794) (make-vector . v10793) (make-string . v10792) (make-rectangular . v10791) (make-polar . v10790) (magnitude . v10789) (log . v10788) (list? . v10787) (list-tail . v10786) (list-ref . v10785) (list->vector . v10784) (list->string . v10783) (list . v10782) (length . v10781) (lcm . v10780) (integer? . v10779) (integer->char . v10777) (inexact? . v10775) (imag-part . v10773) (gcd . v10772) (for-each . v10771) (floor . v10770) (expt . v10768) (exp . v10767) (exact? . v10766) (even? . v10763) (eqv? . v10761) (equal? . v10760) (eq? . v10759) (dynamic-wind . v10758) (denominator . v10751) (cos . v10750) (cons . v10749) (complex? . v10748) (char? . v10747) (char>? . v10746) (char>=? . v10745) (char=? . v10744) (char<? . v10743) (char<=? . v10742) (char->integer . v10741) (ceiling . v10740) (call-with-values . v10739) (call-with-current-continuation . v10737) (cddddr . v10736) (cdddar . v10735) (cddadr . v10734) (cddaar . v10733) (cdaddr . v10732) (cdadar . v10731) (cdaadr . v10730) (cdaaar . v10729) (cadddr . v10728) (caddar . v10727) (cadadr . v10726) (cadaar . v10725) (caaddr . v10724) (caadar . v10723) (caaadr . v10722) (caaaar . v10721) (cdddr . v10720) (cddar . v10719) (cdadr . v10718) (cdaar . v10717) (caddr . v10716) (cadar . v10715) (caadr . v10714) (caaar . v10713) (cddr . v10712) (cdar . v10711) (cadr . v10710) (caar . v10709) (cdr . v10708) (car . v10707) (boolean? . v10706) (atan . v10704) (asin . v10702) (apply . v10701) (append . v10700) (angle . v10699) (acos . v10698) (abs . v10697) (/ . v10696) (* . v10695) (- . v10694) (+ . v10693) (>= . v10692) (> . v10691) (= . v10690) (<= . v10689) (< . v10688) (unquote-splicing . v10637) (unquote . v10636) (else . v10634) (=> . v10633) (... . v10632) (delay . v10629) (do . v10627) (cond . v10626) (let* . v10625) (let . v10624) (quasiquote . v10618) (syntax-rules . v10617) (case . v10612) (or . v10608) (and . v10607) (if . v10606) (letrec . v10604) (lambda . v10601) (quote . v10598) (letrec-syntax . v10596) (let-syntax . v10595) (set! . v10594) (begin . v10592) (define-syntax . v10590) (define . v10589)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11309 '(psyntax modules) '() '() '() '() '((module . v10591)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11310 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11311 '(rnrs) '(6) '() '() '() '((regexp? . v11299) (string-upcase . v11226) (string-titlecase . v11225) (string-normalize-nfkd . v11224) (string-normalize-nfkc . v11223) (string-normalize-nfd . v11222) (string-normalize-nfc . v11221) (string-foldcase . v11220) (string-downcase . v11219) (string-ci>? . v11218) (string-ci>=? . v11217) (string-ci=? . v11216) (string-ci<? . v11215) (string-ci<=? . v11214) (char-whitespace? . v11213) (char-upper-case? . v11212) (char-title-case? . v11211) (char-numeric? . v11210) (char-lower-case? . v11209) (char-general-category . v11208) (char-upcase . v11207) (char-titlecase . v11206) (char-foldcase . v11205) (char-downcase . v11204) (char-ci>? . v11203) (char-ci>=? . v11202) (char-ci=? . v11201) (char-ci<? . v11200) (char-ci<=? . v11199) (char-alphabetic? . v11198) (make-variable-transformer . v2331) (identifier? . v3007) (generate-temporaries . v2987) (free-identifier=? . v2989) (syntax->datum . v3011) (datum->syntax . v3009) (bound-identifier=? . v2991) (record-type-descriptor? . v11197) (record-predicate . v11196) (record-mutator . v11195) (record-constructor . v11194) (record-accessor . v11193) (make-record-type-descriptor . v11192) (make-record-constructor-descriptor . v11191) (record? . v11190) (record-type-uid . v11189) (record-type-sealed? . v11188) (record-type-parent . v11187) (record-type-opaque? . v11186) (record-type-name . v11185) (record-type-generative? . v11184) (record-type-field-names . v11183) (record-rtd . v11182) (record-field-mutable? . v11181) (delete-file . v11180) (file-exists? . v11179) (vector-sort! . v11178) (vector-sort . v11177) (list-sort . v11176) (symbol-hash . v11175) (string-ci-hash . v11174) (string-hash . v11173) (equal-hash . v11172) (hashtable-equivalence-function . v11171) (make-hashtable . v11170) (hashtable-hash-function . v11169) (make-eqv-hashtable . v11168) (make-eq-hashtable . v11167) (hashtable? . v11166) (hashtable-update! . v11165) (hashtable-size . v11164) (hashtable-set! . v11163) (hashtable-ref . v11162) (hashtable-mutable? . v11161) (hashtable-keys . v11160) (hashtable-entries . v11159) (hashtable-delete! . v11158) (hashtable-copy . v11157) (hashtable-contains? . v11156) (hashtable-clear! . v11155) (call-with-output-file . v11154) (call-with-input-file . v11153) (write-char . v11152) (write . v11151) (with-output-to-file . v11150) (with-input-from-file . v11149) (read-char . v11148) (read . v11147) (peek-char . v11146) (open-output-file . v11145) (open-input-file . v11144) (newline . v11143) (display . v11142) (close-output-port . v11141) (close-input-port . v11140) (eof-object? . v11139) (eof-object . v11138) (current-error-port . v11137) (current-output-port . v11136) (current-input-port . v11135) (output-port? . v11134) (input-port? . v11133) (utf-8-codec . v11132) (utf-16-codec . v11131) (transcoder-error-handling-mode . v11130) (transcoder-eol-style . v11129) (transcoder-codec . v11128) (transcoded-port . v11127) (textual-port? . v11126) (string->bytevector . v11125) (standard-output-port . v11124) (standard-input-port . v11123) (standard-error-port . v11122) (set-port-position! . v11121) (put-u8 . v11120) (put-string . v11119) (put-datum . v11118) (put-char . v11117) (put-bytevector . v11116) (port? . v11115) (port-transcoder . v11114) (port-position . v11113) (port-has-set-port-position!? . v11112) (port-has-port-position? . v11111) (port-eof? . v11110) (output-port-buffer-mode . v11109) (open-string-output-port . v11108) (open-string-input-port . v11107) (open-file-output-port . v11106) (open-file-input/output-port . v11105) (open-file-input-port . v11104) (open-bytevector-output-port . v11103) (open-bytevector-input-port . v11102) (native-transcoder . v11101) (native-eol-style . v11100) (make-transcoder . v11099) (latin-1-codec . v11098) (make-i/o-write-error . v9818) (make-i/o-read-error . v9797) (make-i/o-port-error . v9976) (make-i/o-invalid-position-error . v9840) (make-i/o-filename-error . v9866) (make-i/o-file-protection-error . v9891) (make-i/o-file-is-read-only-error . v9912) (make-i/o-file-does-not-exist-error . v9954) (make-i/o-file-already-exists-error . v9933) (make-i/o-error . v9776) (make-i/o-encoding-error . v10023) (make-i/o-decoding-error . v10001) (make-custom-textual-output-port . v11097) (make-custom-textual-input/output-port . v11096) (make-custom-textual-input-port . v11095) (make-custom-binary-output-port . v11094) (make-custom-binary-input/output-port . v11093) (make-custom-binary-input-port . v11092) (make-bytevector . v11091) (lookahead-u8 . v11090) (lookahead-char . v11089) (i/o-write-error? . v9820) (i/o-read-error? . v9799) (i/o-port-error? . v9980) (i/o-invalid-position-error? . v9844) (i/o-filename-error? . v9870) (i/o-file-protection-error? . v9893) (i/o-file-is-read-only-error? . v9914) (i/o-file-does-not-exist-error? . v9956) (i/o-file-already-exists-error? . v9935) (i/o-error? . v9778) (i/o-error-position . v9846) (i/o-error-port . v9982) (i/o-error-filename . v9872) (i/o-encoding-error? . v10027) (i/o-encoding-error-char . v10029) (i/o-decoding-error? . v10003) (get-u8 . v11088) (get-string-n! . v11087) (get-string-n . v11086) (get-string-all . v11085) (get-line . v11084) (get-datum . v11083) (get-char . v11082) (get-bytevector-some . v11081) (get-bytevector-n! . v11080) (get-bytevector-n . v11079) (get-bytevector-all . v11078) (flush-output-port . v11077) (close-port . v11076) (exit . v11068) (command-line . v10338) (remove . v11063) (remv . v11062) (remp . v11061) (remq . v11060) (partition . v11059) (memv . v11058) (memq . v11057) (memp . v11056) (member . v11055) (exists . v11054) (for-all . v11053) (fold-right . v11052) (fold-left . v11051) (find . v11050) (filter . v11049) (cons* . v11048) (assv . v11047) (assq . v11046) (assp . v11045) (assoc . v11044) (call-with-string-output-port . v11043) (call-with-port . v11042) (call-with-bytevector-output-port . v11041) (bytevector->string . v11040) (buffer-mode? . v11039) (binary-port? . v11038) (with-exception-handler . v11037) (raise-continuable . v11036) (raise . v11035) (make-enumeration . v11034) (enum-set=? . v11033) (enum-set-universe . v11032) (enum-set-union . v11031) (enum-set-subset? . v11030) (enum-set-projection . v11029) (enum-set-member? . v11028) (enum-set-intersection . v11027) (enum-set-indexer . v11026) (enum-set-difference . v11025) (enum-set-constructor . v11024) (enum-set-complement . v11023) (enum-set->list . v11022) (who-condition? . v9640) (warning? . v9506) (violation? . v9569) (undefined-violation? . v9757) (syntax-violation? . v9732) (syntax-violation-subform . v9736) (syntax-violation-form . v9734) (syntax-violation . v3005) (simple-conditions . v11021) (serious-condition? . v9527) (non-continuable-violation? . v9663) (message-condition? . v9483) (make-who-condition . v9636) (make-warning . v9504) (make-violation . v9567) (make-undefined-violation . v9755) (make-syntax-violation . v9726) (make-serious-condition . v9525) (make-non-continuable-violation . v9661) (make-message-condition . v9479) (make-lexical-violation . v9703) (make-irritants-condition . v9610) (make-implementation-restriction-violation . v9682) (make-error . v9546) (make-assertion-violation . v9588) (lexical-violation? . v9705) (irritants-condition? . v9614) (implementation-restriction-violation? . v9684) (error? . v9548) (condition-who . v9642) (condition-predicate . v11020) (condition-message . v9485) (condition-irritants . v9616) (condition-accessor . v11019) (condition . v11018) (assertion-violation? . v9590) (condition? . v11017) (utf32->string . v11016) (utf16->string . v11015) (utf8->string . v11014) (uint-list->bytevector . v11013) (u8-list->bytevector . v11012) (string->utf8 . v11011) (string->utf32 . v11010) (string->utf16 . v11009) (sint-list->bytevector . v11008) (native-endianness . v11007) (bytevector? . v11006) (bytevector=? . v11005) (bytevector-uint-set! . v11004) (bytevector-uint-ref . v11003) (bytevector-u8-set! . v11002) (bytevector-u8-ref . v11001) (bytevector-u64-set! . v11000) (bytevector-u64-ref . v10999) (bytevector-u64-native-set! . v10998) (bytevector-u64-native-ref . v10997) (bytevector-u32-set! . v10996) (bytevector-u32-ref . v10995) (bytevector-u32-native-set! . v10994) (bytevector-u32-native-ref . v10993) (bytevector-u16-set! . v10992) (bytevector-u16-ref . v10991) (bytevector-u16-native-set! . v10990) (bytevector-u16-native-ref . v10989) (bytevector-sint-set! . v10988) (bytevector-sint-ref . v10987) (bytevector-s8-set! . v10986) (bytevector-s8-ref . v10985) (bytevector-s64-set! . v10984) (bytevector-s64-ref . v10983) (bytevector-s64-native-set! . v10982) (bytevector-s64-native-ref . v10981) (bytevector-s32-set! . v10980) (bytevector-s32-ref . v10979) (bytevector-s32-native-set! . v10978) (bytevector-s32-native-ref . v10977) (bytevector-s16-set! . v10976) (bytevector-s16-ref . v10975) (bytevector-s16-native-set! . v10974) (bytevector-s16-native-ref . v10973) (bytevector-length . v10972) (bytevector-ieee-single-ref . v10971) (bytevector-ieee-single-set! . v10970) (bytevector-ieee-single-native-set! . v10969) (bytevector-ieee-single-native-ref . v10968) (bytevector-ieee-double-set! . v10967) (bytevector-ieee-double-ref . v10966) (bytevector-ieee-double-native-set! . v10965) (bytevector-ieee-double-native-ref . v10964) (bytevector-fill! . v10963) (bytevector-copy! . v10962) (bytevector-copy . v10961) (bytevector->uint-list . v10960) (bytevector->u8-list . v10959) (bytevector->sint-list . v10958) (no-nans-violation? . v10071) (no-infinities-violation? . v10050) (make-no-nans-violation . v10069) (make-no-infinities-violation . v10048) (real->flonum . v10957) (flzero? . v10956) (fltruncate . v10955) (fltan . v10954) (flsqrt . v10953) (flsin . v10952) (flround . v10951) (flpositive? . v10950) (flonum? . v10949) (flodd? . v10948) (flnumerator . v10947) (flnegative? . v10946) (flnan? . v10945) (flmod0 . v10944) (flmod . v10943) (flmin . v10942) (flmax . v10941) (fllog . v10940) (flinteger? . v10939) (flinfinite? . v10938) (flfloor . v10937) (flfinite? . v10936) (flexpt . v10935) (flexp . v10934) (fleven? . v10933) (fldiv0-and-mod0 . v10932) (fldiv0 . v10931) (fldiv-and-mod . v10930) (fldiv . v10929) (fldenominator . v10928) (flcos . v10927) (flceiling . v10926) (flatan . v10925) (flasin . v10924) (flacos . v10923) (flabs . v10922) (fl>? . v10921) (fl>=? . v10920) (fl=? . v10919) (fl<? . v10918) (fl<=? . v10917) (fl/ . v10916) (fl- . v10915) (fl+ . v10914) (fl* . v10913) (fixnum->flonum . v10912) (fxzero? . v10911) (fxxor . v10910) (fxrotate-bit-field . v10909) (fxreverse-bit-field . v10908) (fxpositive? . v10907) (fxodd? . v10906) (fxnot . v10905) (fxnegative? . v10904) (fxmod0 . v10903) (fxmod . v10902) (fxmin . v10901) (fxmax . v10900) (fxlength . v10899) (fxior . v10898) (fxif . v10897) (fxfirst-bit-set . v10896) (fxeven? . v10895) (fxdiv0-and-mod0 . v10894) (fxdiv0 . v10893) (fxdiv-and-mod . v10892) (fxdiv . v10891) (fxcopy-bit-field . v10890) (fxcopy-bit . v10889) (fxbit-set? . v10888) (fxbit-field . v10887) (fxbit-count . v10886) (fxarithmetic-shift-right . v10885) (fxarithmetic-shift-left . v10884) (fxarithmetic-shift . v10883) (fxand . v10882) (fx>? . v10881) (fx>=? . v10880) (fx=? . v10879) (fx<? . v10878) (fx<=? . v10877) (fx-/carry . v10876) (fx- . v10875) (fx+/carry . v10874) (fx+ . v10873) (fx*/carry . v10872) (fx* . v10871) (greatest-fixnum . v10870) (least-fixnum . v10869) (fixnum-width . v10868) (fixnum? . v10867) (bitwise-rotate-bit-field . v10866) (bitwise-reverse-bit-field . v10865) (bitwise-length . v10864) (bitwise-if . v10863) (bitwise-first-bit-set . v10862) (bitwise-copy-bit-field . v10861) (bitwise-copy-bit . v10860) (bitwise-bit-set? . v10859) (bitwise-bit-field . v10858) (bitwise-bit-count . v10857) (bitwise-xor . v10856) (bitwise-ior . v10855) (bitwise-and . v10854) (bitwise-not . v10853) (bitwise-arithmetic-shift-right . v10852) (bitwise-arithmetic-shift-left . v10851) (bitwise-arithmetic-shift . v10850) (zero? . v10849) (vector? . v10848) (vector-set! . v10847) (vector-ref . v10846) (vector-map . v10845) (vector-length . v10844) (vector-for-each . v10843) (vector-fill! . v10842) (vector->list . v10841) (vector . v10840) (values . v10839) (truncate . v10838) (tan . v10837) (symbol? . v10836) (symbol=? . v10835) (symbol->string . v10834) (substring . v10833) (string? . v10832) (string>? . v10831) (string>=? . v10830) (string=? . v10829) (string<? . v10828) (string<=? . v10827) (string-ref . v10826) (string-length . v10825) (string-for-each . v10824) (string-copy . v10823) (string-append . v10822) (string->symbol . v10821) (string->number . v10820) (string->list . v10819) (string . v10818) (sqrt . v10817) (sin . v10816) (round . v10815) (reverse . v10814) (real? . v10813) (real-valued? . v10812) (real-part . v10811) (rationalize . v10810) (rational? . v10809) (rational-valued? . v10808) (procedure? . v10807) (positive? . v10806) (pair? . v10805) (odd? . v10804) (numerator . v10803) (number? . v10802) (number->string . v10801) (null? . v10800) (not . v10799) (negative? . v10798) (nan? . v10797) (min . v10796) (max . v10795) (map . v10794) (make-vector . v10793) (make-string . v10792) (make-rectangular . v10791) (make-polar . v10790) (magnitude . v10789) (log . v10788) (list? . v10787) (list-tail . v10786) (list-ref . v10785) (list->vector . v10784) (list->string . v10783) (list . v10782) (length . v10781) (lcm . v10780) (integer? . v10779) (integer-valued? . v10778) (integer->char . v10777) (infinite? . v10776) (inexact? . v10775) (inexact . v10774) (imag-part . v10773) (gcd . v10772) (for-each . v10771) (floor . v10770) (finite? . v10769) (expt . v10768) (exp . v10767) (exact? . v10766) (exact-integer-sqrt . v10765) (exact . v10764) (even? . v10763) (error . v10762) (eqv? . v10761) (equal? . v10760) (eq? . v10759) (dynamic-wind . v10758) (div0-and-mod0 . v10757) (mod0 . v10756) (div0 . v10755) (div-and-mod . v10754) (mod . v10753) (div . v10752) (denominator . v10751) (cos . v10750) (cons . v10749) (complex? . v10748) (char? . v10747) (char>? . v10746) (char>=? . v10745) (char=? . v10744) (char<? . v10743) (char<=? . v10742) (char->integer . v10741) (ceiling . v10740) (call-with-values . v10739) (call/cc . v10738) (call-with-current-continuation . v10737) (cddddr . v10736) (cdddar . v10735) (cddadr . v10734) (cddaar . v10733) (cdaddr . v10732) (cdadar . v10731) (cdaadr . v10730) (cdaaar . v10729) (cadddr . v10728) (caddar . v10727) (cadadr . v10726) (cadaar . v10725) (caaddr . v10724) (caadar . v10723) (caaadr . v10722) (caaaar . v10721) (cdddr . v10720) (cddar . v10719) (cdadr . v10718) (cdaar . v10717) (caddr . v10716) (cadar . v10715) (caadr . v10714) (caaar . v10713) (cddr . v10712) (cdar . v10711) (cadr . v10710) (caar . v10709) (cdr . v10708) (car . v10707) (boolean? . v10706) (boolean=? . v10705) (atan . v10704) (assertion-violation . v10703) (asin . v10702) (apply . v10701) (append . v10700) (angle . v10699) (acos . v10698) (abs . v10697) (/ . v10696) (* . v10695) (- . v10694) (+ . v10693) (>= . v10692) (> . v10691) (= . v10690) (<= . v10689) (< . v10688) (&no-nans . v10686) (&no-infinities . v10685) (&i/o-encoding . v10684) (&i/o-decoding . v10683) (&i/o-port . v10682) (&i/o-file-does-not-exist . v10681) (&i/o-file-already-exists . v10680) (&i/o-file-is-read-only . v10679) (&i/o-file-protection . v10678) (&i/o-filename . v10677) (&i/o-invalid-position . v10676) (&i/o-write . v10675) (&i/o-read . v10674) (&i/o . v10673) (&undefined . v10672) (&syntax . v10671) (&lexical . v10670) (&implementation-restriction . v10669) (&non-continuable . v10668) (&who . v10667) (&irritants . v10666) (&assertion . v10665) (&violation . v10664) (&error . v10663) (&serious . v10662) (&warning . v10661) (&message . v10660) (&condition . v10659) (define-condition-type . v10658) (define-enumeration . v10657) (define-record-type . v10656) (parent-rtd . v10655) (nongenerative . v10654) (opaque . v10653) (sealed . v10652) (protocol . v10651) (parent . v10650) (immutable . v10649) (mutable . v10648) (fields . v10647) (error-handling-mode . v10646) (file-options . v10645) (buffer-mode . v10644) (eol-style . v10643) (guard . v10642) (unsyntax-splicing . v10639) (unsyntax . v10638) (unquote-splicing . v10637) (unquote . v10636) (_ . v10635) (else . v10634) (=> . v10633) (... . v10632) (assert . v10631) (endianness . v10630) (do . v10627) (cond . v10626) (let* . v10625) (let . v10624) (let*-values . v10623) (let-values . v10622) (identifier-syntax . v10621) (with-syntax . v10620) (quasisyntax . v10619) (quasiquote . v10618) (syntax-rules . v10617) (record-constructor-descriptor . v10614) (record-type-descriptor . v10613) (case . v10612) (unless . v10610) (when . v10609) (or . v10608) (and . v10607) (if . v10606) (letrec* . v10605) (letrec . v10604) (case-lambda . v10602) (lambda . v10601) (syntax . v10600) (syntax-case . v10599) (quote . v10598) (letrec-syntax . v10596) (let-syntax . v10595) (set! . v10594) (begin . v10592) (define-syntax . v10590) (define . v10589)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11312 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . v2969) (quotient . v11075) (null-environment . v2967) (remainder . v11074) (modulo . v11073) (inexact->exact . v11072) (force . v11071) (exact->inexact . v11070) (make-promise . v11069) (delay . v10629)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11313 '(rnrs control) '(6) '() '() '() '((do . v10627) (unless . v10610) (when . v10609) (case-lambda . v10602)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11314 '(rnrs eval) '(6) '() '() '() '((eval . v2973) (environment . v2965)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11315 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . v11065) (set-car! . v11064)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11316 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . v11067) (string-set! . v11066)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11317 '(rnrs programs) '(6) '() '() '() '((exit . v11068) (command-line . v10338)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11318 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . v2331) (identifier? . v3007) (generate-temporaries . v2987) (free-identifier=? . v2989) (syntax->datum . v3011) (datum->syntax . v3009) (bound-identifier=? . v2991) (syntax-violation . v3005) (unsyntax-splicing . v10639) (unsyntax . v10638) (_ . v10635) (... . v10632) (with-syntax . v10620) (quasisyntax . v10619) (syntax . v10600) (syntax-case . v10599)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11319 '(rnrs files) '(6) '() '() '() '((delete-file . v11180) (file-exists? . v11179) (make-i/o-write-error . v9818) (make-i/o-read-error . v9797) (make-i/o-port-error . v9976) (make-i/o-invalid-position-error . v9840) (make-i/o-filename-error . v9866) (make-i/o-file-protection-error . v9891) (make-i/o-file-is-read-only-error . v9912) (make-i/o-file-does-not-exist-error . v9954) (make-i/o-file-already-exists-error . v9933) (make-i/o-error . v9776) (i/o-write-error? . v9820) (i/o-read-error? . v9799) (i/o-port-error? . v9980) (i/o-invalid-position-error? . v9844) (i/o-filename-error? . v9870) (i/o-file-protection-error? . v9893) (i/o-file-is-read-only-error? . v9914) (i/o-file-does-not-exist-error? . v9956) (i/o-file-already-exists-error? . v9935) (i/o-error? . v9778) (i/o-error-position . v9846) (i/o-error-port . v9982) (i/o-error-filename . v9872) (&i/o-port . v10682) (&i/o-file-does-not-exist . v10681) (&i/o-file-already-exists . v10680) (&i/o-file-is-read-only . v10679) (&i/o-file-protection . v10678) (&i/o-filename . v10677) (&i/o-invalid-position . v10676) (&i/o-write . v10675) (&i/o-read . v10674) (&i/o . v10673)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11320 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . v11178) (vector-sort . v11177) (list-sort . v11176)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11321 '(rnrs base) '(6) '() '() '() '((zero? . v10849) (vector? . v10848) (vector-set! . v10847) (vector-ref . v10846) (vector-map . v10845) (vector-length . v10844) (vector-for-each . v10843) (vector-fill! . v10842) (vector->list . v10841) (vector . v10840) (values . v10839) (truncate . v10838) (tan . v10837) (symbol? . v10836) (symbol=? . v10835) (symbol->string . v10834) (substring . v10833) (string? . v10832) (string>? . v10831) (string>=? . v10830) (string=? . v10829) (string<? . v10828) (string<=? . v10827) (string-ref . v10826) (string-length . v10825) (string-for-each . v10824) (string-copy . v10823) (string-append . v10822) (string->symbol . v10821) (string->number . v10820) (string->list . v10819) (string . v10818) (sqrt . v10817) (sin . v10816) (round . v10815) (reverse . v10814) (real? . v10813) (real-valued? . v10812) (real-part . v10811) (rationalize . v10810) (rational? . v10809) (rational-valued? . v10808) (procedure? . v10807) (positive? . v10806) (pair? . v10805) (odd? . v10804) (numerator . v10803) (number? . v10802) (number->string . v10801) (null? . v10800) (not . v10799) (negative? . v10798) (nan? . v10797) (min . v10796) (max . v10795) (map . v10794) (make-vector . v10793) (make-string . v10792) (make-rectangular . v10791) (make-polar . v10790) (magnitude . v10789) (log . v10788) (list? . v10787) (list-tail . v10786) (list-ref . v10785) (list->vector . v10784) (list->string . v10783) (list . v10782) (length . v10781) (lcm . v10780) (integer? . v10779) (integer-valued? . v10778) (integer->char . v10777) (infinite? . v10776) (inexact? . v10775) (inexact . v10774) (imag-part . v10773) (gcd . v10772) (for-each . v10771) (floor . v10770) (finite? . v10769) (expt . v10768) (exp . v10767) (exact? . v10766) (exact-integer-sqrt . v10765) (exact . v10764) (even? . v10763) (error . v10762) (eqv? . v10761) (equal? . v10760) (eq? . v10759) (dynamic-wind . v10758) (div0-and-mod0 . v10757) (mod0 . v10756) (div0 . v10755) (div-and-mod . v10754) (mod . v10753) (div . v10752) (denominator . v10751) (cos . v10750) (cons . v10749) (complex? . v10748) (char? . v10747) (char>? . v10746) (char>=? . v10745) (char=? . v10744) (char<? . v10743) (char<=? . v10742) (char->integer . v10741) (ceiling . v10740) (call-with-values . v10739) (call/cc . v10738) (call-with-current-continuation . v10737) (cddddr . v10736) (cdddar . v10735) (cddadr . v10734) (cddaar . v10733) (cdaddr . v10732) (cdadar . v10731) (cdaadr . v10730) (cdaaar . v10729) (cadddr . v10728) (caddar . v10727) (cadadr . v10726) (cadaar . v10725) (caaddr . v10724) (caadar . v10723) (caaadr . v10722) (caaaar . v10721) (cdddr . v10720) (cddar . v10719) (cdadr . v10718) (cdaar . v10717) (caddr . v10716) (cadar . v10715) (caadr . v10714) (caaar . v10713) (cddr . v10712) (cdar . v10711) (cadr . v10710) (caar . v10709) (cdr . v10708) (car . v10707) (boolean? . v10706) (boolean=? . v10705) (atan . v10704) (assertion-violation . v10703) (asin . v10702) (apply . v10701) (append . v10700) (angle . v10699) (acos . v10698) (abs . v10697) (/ . v10696) (* . v10695) (- . v10694) (+ . v10693) (>= . v10692) (> . v10691) (= . v10690) (<= . v10689) (< . v10688) (unquote-splicing . v10637) (unquote . v10636) (_ . v10635) (else . v10634) (=> . v10633) (... . v10632) (assert . v10631) (cond . v10626) (let* . v10625) (let . v10624) (let*-values . v10623) (let-values . v10622) (identifier-syntax . v10621) (quasiquote . v10618) (syntax-rules . v10617) (case . v10612) (or . v10608) (and . v10607) (if . v10606) (letrec* . v10605) (letrec . v10604) (lambda . v10601) (quote . v10598) (letrec-syntax . v10596) (let-syntax . v10595) (set! . v10594) (begin . v10592) (define-syntax . v10590) (define . v10589)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11322 '(rnrs lists) '(6) '() '() '() '((remove . v11063) (remv . v11062) (remp . v11061) (remq . v11060) (partition . v11059) (memv . v11058) (memq . v11057) (memp . v11056) (member . v11055) (exists . v11054) (for-all . v11053) (fold-right . v11052) (fold-left . v11051) (find . v11050) (filter . v11049) (cons* . v11048) (assv . v11047) (assq . v11046) (assp . v11045) (assoc . v11044)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11323 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . v11154) (call-with-input-file . v11153) (write-char . v11152) (write . v11151) (with-output-to-file . v11150) (with-input-from-file . v11149) (read-char . v11148) (read . v11147) (peek-char . v11146) (open-output-file . v11145) (open-input-file . v11144) (newline . v11143) (display . v11142) (close-output-port . v11141) (close-input-port . v11140) (eof-object? . v11139) (eof-object . v11138) (current-error-port . v11137) (current-output-port . v11136) (current-input-port . v11135) (output-port? . v11134) (input-port? . v11133) (make-i/o-write-error . v9818) (make-i/o-read-error . v9797) (make-i/o-port-error . v9976) (make-i/o-invalid-position-error . v9840) (make-i/o-filename-error . v9866) (make-i/o-file-protection-error . v9891) (make-i/o-file-is-read-only-error . v9912) (make-i/o-file-does-not-exist-error . v9954) (make-i/o-file-already-exists-error . v9933) (make-i/o-error . v9776) (i/o-write-error? . v9820) (i/o-read-error? . v9799) (i/o-port-error? . v9980) (i/o-invalid-position-error? . v9844) (i/o-filename-error? . v9870) (i/o-file-protection-error? . v9893) (i/o-file-is-read-only-error? . v9914) (i/o-file-does-not-exist-error? . v9956) (i/o-file-already-exists-error? . v9935) (i/o-error? . v9778) (i/o-error-position . v9846) (i/o-error-port . v9982) (i/o-error-filename . v9872) (&i/o-port . v10682) (&i/o-file-does-not-exist . v10681) (&i/o-file-already-exists . v10680) (&i/o-file-is-read-only . v10679) (&i/o-file-protection . v10678) (&i/o-filename . v10677) (&i/o-invalid-position . v10676) (&i/o-write . v10675) (&i/o-read . v10674) (&i/o . v10673)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11324 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . v11091) (utf32->string . v11016) (utf16->string . v11015) (utf8->string . v11014) (uint-list->bytevector . v11013) (u8-list->bytevector . v11012) (string->utf8 . v11011) (string->utf32 . v11010) (string->utf16 . v11009) (sint-list->bytevector . v11008) (native-endianness . v11007) (bytevector? . v11006) (bytevector=? . v11005) (bytevector-uint-set! . v11004) (bytevector-uint-ref . v11003) (bytevector-u8-set! . v11002) (bytevector-u8-ref . v11001) (bytevector-u64-set! . v11000) (bytevector-u64-ref . v10999) (bytevector-u64-native-set! . v10998) (bytevector-u64-native-ref . v10997) (bytevector-u32-set! . v10996) (bytevector-u32-ref . v10995) (bytevector-u32-native-set! . v10994) (bytevector-u32-native-ref . v10993) (bytevector-u16-set! . v10992) (bytevector-u16-ref . v10991) (bytevector-u16-native-set! . v10990) (bytevector-u16-native-ref . v10989) (bytevector-sint-set! . v10988) (bytevector-sint-ref . v10987) (bytevector-s8-set! . v10986) (bytevector-s8-ref . v10985) (bytevector-s64-set! . v10984) (bytevector-s64-ref . v10983) (bytevector-s64-native-set! . v10982) (bytevector-s64-native-ref . v10981) (bytevector-s32-set! . v10980) (bytevector-s32-ref . v10979) (bytevector-s32-native-set! . v10978) (bytevector-s32-native-ref . v10977) (bytevector-s16-set! . v10976) (bytevector-s16-ref . v10975) (bytevector-s16-native-set! . v10974) (bytevector-s16-native-ref . v10973) (bytevector-length . v10972) (bytevector-ieee-single-ref . v10971) (bytevector-ieee-single-set! . v10970) (bytevector-ieee-single-native-set! . v10969) (bytevector-ieee-single-native-ref . v10968) (bytevector-ieee-double-set! . v10967) (bytevector-ieee-double-ref . v10966) (bytevector-ieee-double-native-set! . v10965) (bytevector-ieee-double-native-ref . v10964) (bytevector-fill! . v10963) (bytevector-copy! . v10962) (bytevector-copy . v10961) (bytevector->uint-list . v10960) (bytevector->u8-list . v10959) (bytevector->sint-list . v10958) (endianness . v10630)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11325 '(rnrs unicode) '(6) '() '() '() '((string-upcase . v11226) (string-titlecase . v11225) (string-normalize-nfkd . v11224) (string-normalize-nfkc . v11223) (string-normalize-nfd . v11222) (string-normalize-nfc . v11221) (string-foldcase . v11220) (string-downcase . v11219) (string-ci>? . v11218) (string-ci>=? . v11217) (string-ci=? . v11216) (string-ci<? . v11215) (string-ci<=? . v11214) (char-whitespace? . v11213) (char-upper-case? . v11212) (char-title-case? . v11211) (char-numeric? . v11210) (char-lower-case? . v11209) (char-general-category . v11208) (char-upcase . v11207) (char-titlecase . v11206) (char-foldcase . v11205) (char-downcase . v11204) (char-ci>? . v11203) (char-ci>=? . v11202) (char-ci=? . v11201) (char-ci<? . v11200) (char-ci<=? . v11199) (char-alphabetic? . v11198)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11326 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . v11037) (raise-continuable . v11036) (raise . v11035) (guard . v10642) (else . v10634) (=> . v10633)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11327 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . v10866) (bitwise-reverse-bit-field . v10865) (bitwise-length . v10864) (bitwise-if . v10863) (bitwise-first-bit-set . v10862) (bitwise-copy-bit-field . v10861) (bitwise-copy-bit . v10860) (bitwise-bit-set? . v10859) (bitwise-bit-field . v10858) (bitwise-bit-count . v10857) (bitwise-xor . v10856) (bitwise-ior . v10855) (bitwise-and . v10854) (bitwise-not . v10853) (bitwise-arithmetic-shift-right . v10852) (bitwise-arithmetic-shift-left . v10851) (bitwise-arithmetic-shift . v10850)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11328 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . v10911) (fxxor . v10910) (fxrotate-bit-field . v10909) (fxreverse-bit-field . v10908) (fxpositive? . v10907) (fxodd? . v10906) (fxnot . v10905) (fxnegative? . v10904) (fxmod0 . v10903) (fxmod . v10902) (fxmin . v10901) (fxmax . v10900) (fxlength . v10899) (fxior . v10898) (fxif . v10897) (fxfirst-bit-set . v10896) (fxeven? . v10895) (fxdiv0-and-mod0 . v10894) (fxdiv0 . v10893) (fxdiv-and-mod . v10892) (fxdiv . v10891) (fxcopy-bit-field . v10890) (fxcopy-bit . v10889) (fxbit-set? . v10888) (fxbit-field . v10887) (fxbit-count . v10886) (fxarithmetic-shift-right . v10885) (fxarithmetic-shift-left . v10884) (fxarithmetic-shift . v10883) (fxand . v10882) (fx>? . v10881) (fx>=? . v10880) (fx=? . v10879) (fx<? . v10878) (fx<=? . v10877) (fx-/carry . v10876) (fx- . v10875) (fx+/carry . v10874) (fx+ . v10873) (fx*/carry . v10872) (fx* . v10871) (greatest-fixnum . v10870) (least-fixnum . v10869) (fixnum-width . v10868) (fixnum? . v10867)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11329 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . v10071) (no-infinities-violation? . v10050) (make-no-nans-violation . v10069) (make-no-infinities-violation . v10048) (real->flonum . v10957) (flzero? . v10956) (fltruncate . v10955) (fltan . v10954) (flsqrt . v10953) (flsin . v10952) (flround . v10951) (flpositive? . v10950) (flonum? . v10949) (flodd? . v10948) (flnumerator . v10947) (flnegative? . v10946) (flnan? . v10945) (flmod0 . v10944) (flmod . v10943) (flmin . v10942) (flmax . v10941) (fllog . v10940) (flinteger? . v10939) (flinfinite? . v10938) (flfloor . v10937) (flfinite? . v10936) (flexpt . v10935) (flexp . v10934) (fleven? . v10933) (fldiv0-and-mod0 . v10932) (fldiv0 . v10931) (fldiv-and-mod . v10930) (fldiv . v10929) (fldenominator . v10928) (flcos . v10927) (flceiling . v10926) (flatan . v10925) (flasin . v10924) (flacos . v10923) (flabs . v10922) (fl>? . v10921) (fl>=? . v10920) (fl=? . v10919) (fl<? . v10918) (fl<=? . v10917) (fl/ . v10916) (fl- . v10915) (fl+ . v10914) (fl* . v10913) (fixnum->flonum . v10912) (&no-nans . v10686) (&no-infinities . v10685)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11330 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . v11175) (string-ci-hash . v11174) (string-hash . v11173) (equal-hash . v11172) (hashtable-equivalence-function . v11171) (make-hashtable . v11170) (hashtable-hash-function . v11169) (make-eqv-hashtable . v11168) (make-eq-hashtable . v11167) (hashtable? . v11166) (hashtable-update! . v11165) (hashtable-size . v11164) (hashtable-set! . v11163) (hashtable-ref . v11162) (hashtable-mutable? . v11161) (hashtable-keys . v11160) (hashtable-entries . v11159) (hashtable-delete! . v11158) (hashtable-copy . v11157) (hashtable-contains? . v11156) (hashtable-clear! . v11155)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11331 '(rnrs io ports) '(6) '() '() '() '((eof-object? . v11139) (eof-object . v11138) (current-error-port . v11137) (current-output-port . v11136) (current-input-port . v11135) (output-port? . v11134) (input-port? . v11133) (utf-8-codec . v11132) (utf-16-codec . v11131) (transcoder-error-handling-mode . v11130) (transcoder-eol-style . v11129) (transcoder-codec . v11128) (transcoded-port . v11127) (textual-port? . v11126) (string->bytevector . v11125) (standard-output-port . v11124) (standard-input-port . v11123) (standard-error-port . v11122) (set-port-position! . v11121) (put-u8 . v11120) (put-string . v11119) (put-datum . v11118) (put-char . v11117) (put-bytevector . v11116) (port? . v11115) (port-transcoder . v11114) (port-position . v11113) (port-has-set-port-position!? . v11112) (port-has-port-position? . v11111) (port-eof? . v11110) (output-port-buffer-mode . v11109) (open-string-output-port . v11108) (open-string-input-port . v11107) (open-file-output-port . v11106) (open-file-input/output-port . v11105) (open-file-input-port . v11104) (open-bytevector-output-port . v11103) (open-bytevector-input-port . v11102) (native-transcoder . v11101) (native-eol-style . v11100) (make-transcoder . v11099) (latin-1-codec . v11098) (make-i/o-write-error . v9818) (make-i/o-read-error . v9797) (make-i/o-port-error . v9976) (make-i/o-invalid-position-error . v9840) (make-i/o-filename-error . v9866) (make-i/o-file-protection-error . v9891) (make-i/o-file-is-read-only-error . v9912) (make-i/o-file-does-not-exist-error . v9954) (make-i/o-file-already-exists-error . v9933) (make-i/o-error . v9776) (make-i/o-encoding-error . v10023) (make-i/o-decoding-error . v10001) (make-custom-textual-output-port . v11097) (make-custom-textual-input/output-port . v11096) (make-custom-textual-input-port . v11095) (make-custom-binary-output-port . v11094) (make-custom-binary-input/output-port . v11093) (make-custom-binary-input-port . v11092) (lookahead-u8 . v11090) (lookahead-char . v11089) (i/o-write-error? . v9820) (i/o-read-error? . v9799) (i/o-port-error? . v9980) (i/o-invalid-position-error? . v9844) (i/o-filename-error? . v9870) (i/o-file-protection-error? . v9893) (i/o-file-is-read-only-error? . v9914) (i/o-file-does-not-exist-error? . v9956) (i/o-file-already-exists-error? . v9935) (i/o-error? . v9778) (i/o-error-position . v9846) (i/o-error-port . v9982) (i/o-error-filename . v9872) (i/o-encoding-error? . v10027) (i/o-encoding-error-char . v10029) (i/o-decoding-error? . v10003) (get-u8 . v11088) (get-string-n! . v11087) (get-string-n . v11086) (get-string-all . v11085) (get-line . v11084) (get-datum . v11083) (get-char . v11082) (get-bytevector-some . v11081) (get-bytevector-n! . v11080) (get-bytevector-n . v11079) (get-bytevector-all . v11078) (flush-output-port . v11077) (close-port . v11076) (call-with-string-output-port . v11043) (call-with-port . v11042) (call-with-bytevector-output-port . v11041) (bytevector->string . v11040) (buffer-mode? . v11039) (binary-port? . v11038) (&i/o-encoding . v10684) (&i/o-decoding . v10683) (&i/o-port . v10682) (&i/o-file-does-not-exist . v10681) (&i/o-file-already-exists . v10680) (&i/o-file-is-read-only . v10679) (&i/o-file-protection . v10678) (&i/o-filename . v10677) (&i/o-invalid-position . v10676) (&i/o-write . v10675) (&i/o-read . v10674) (&i/o . v10673) (error-handling-mode . v10646) (file-options . v10645) (buffer-mode . v10644) (eol-style . v10643)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11332 '(rnrs enums) '(6) '() '() '() '((make-enumeration . v11034) (enum-set=? . v11033) (enum-set-universe . v11032) (enum-set-union . v11031) (enum-set-subset? . v11030) (enum-set-projection . v11029) (enum-set-member? . v11028) (enum-set-intersection . v11027) (enum-set-indexer . v11026) (enum-set-difference . v11025) (enum-set-constructor . v11024) (enum-set-complement . v11023) (enum-set->list . v11022) (define-enumeration . v10657)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11333 '(rnrs conditions) '(6) '() '() '() '((who-condition? . v9640) (warning? . v9506) (violation? . v9569) (undefined-violation? . v9757) (syntax-violation? . v9732) (syntax-violation-subform . v9736) (syntax-violation-form . v9734) (syntax-violation . v3005) (simple-conditions . v11021) (serious-condition? . v9527) (non-continuable-violation? . v9663) (message-condition? . v9483) (make-who-condition . v9636) (make-warning . v9504) (make-violation . v9567) (make-undefined-violation . v9755) (make-syntax-violation . v9726) (make-serious-condition . v9525) (make-non-continuable-violation . v9661) (make-message-condition . v9479) (make-lexical-violation . v9703) (make-irritants-condition . v9610) (make-implementation-restriction-violation . v9682) (make-error . v9546) (make-assertion-violation . v9588) (lexical-violation? . v9705) (irritants-condition? . v9614) (implementation-restriction-violation? . v9684) (error? . v9548) (condition-who . v9642) (condition-predicate . v11020) (condition-message . v9485) (condition-irritants . v9616) (condition-accessor . v11019) (condition . v11018) (assertion-violation? . v9590) (condition? . v11017) (&undefined . v10672) (&syntax . v10671) (&lexical . v10670) (&implementation-restriction . v10669) (&non-continuable . v10668) (&who . v10667) (&irritants . v10666) (&assertion . v10665) (&violation . v10664) (&error . v10663) (&serious . v10662) (&warning . v10661) (&message . v10660) (&condition . v10659) (define-condition-type . v10658)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11334 '(rnrs records inspection) '(6) '() '() '() '((record? . v11190) (record-type-uid . v11189) (record-type-sealed? . v11188) (record-type-parent . v11187) (record-type-opaque? . v11186) (record-type-name . v11185) (record-type-generative? . v11184) (record-type-field-names . v11183) (record-rtd . v11182) (record-field-mutable? . v11181)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11335 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . v11197) (record-predicate . v11196) (record-mutator . v11195) (record-constructor . v11194) (record-accessor . v11193) (make-record-type-descriptor . v11192) (make-record-constructor-descriptor . v11191)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11336 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . v10656) (parent-rtd . v10655) (nongenerative . v10654) (opaque . v10653) (sealed . v10652) (protocol . v10651) (parent . v10650) (immutable . v10649) (mutable . v10648) (fields . v10647) (record-constructor-descriptor . v10614) (record-type-descriptor . v10613)) '() values values '#f '#f '#t '#f) (v1800@v1453@install-library 'v11337 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . v10075) (&no-nans-rtd . v10073) (&no-infinities-rcd . v10054) (&no-infinities-rtd . v10052) (&i/o-encoding-rcd . v10033) (&i/o-encoding-rtd . v10031) (&i/o-decoding-rcd . v10007) (&i/o-decoding-rtd . v10005) (&i/o-port-rcd . v9986) (&i/o-port-rtd . v9984) (&i/o-file-does-not-exist-rcd . v9960) (&i/o-file-does-not-exist-rtd . v9958) (&i/o-file-already-exists-rcd . v9939) (&i/o-file-already-exists-rtd . v9937) (&i/o-file-is-read-only-rcd . v9918) (&i/o-file-is-read-only-rtd . v9916) (&i/o-file-protection-rcd . v9897) (&i/o-file-protection-rtd . v9895) (&i/o-filename-rcd . v9876) (&i/o-filename-rtd . v9874) (&i/o-invalid-position-rcd . v9850) (&i/o-invalid-position-rtd . v9848) (&i/o-write-rcd . v9824) (&i/o-write-rtd . v9822) (&i/o-read-rcd . v9803) (&i/o-read-rtd . v9801) (&i/o-rcd . v9782) (&i/o-rtd . v9780) (&undefined-rcd . v9761) (&undefined-rtd . v9759) (&syntax-rcd . v9740) (&syntax-rtd . v9738) (&lexical-rcd . v9709) (&lexical-rtd . v9707) (&implementation-restriction-rcd . v9688) (&implementation-restriction-rtd . v9686) (&non-continuable-rcd . v9667) (&non-continuable-rtd . v9665) (&who-rcd . v9646) (&who-rtd . v9644) (&irritants-rcd . v9620) (&irritants-rtd . v9618) (&assertion-rcd . v9594) (&assertion-rtd . v9592) (&violation-rcd . v9573) (&violation-rtd . v9571) (&error-rcd . v9552) (&error-rtd . v9550) (&serious-rcd . v9531) (&serious-rtd . v9529) (&warning-rcd . v9510) (&warning-rtd . v9508) (&message-rcd . v9489) (&message-rtd . v9487) (&condition-rcd . v9398) (&condition-rtd . v9396) (syntax-error . v3001) (syntax-dispatch . v2772) (pretty-print . v11305) (eval-core . v11304) (set-symbol-value! . v11303) (symbol-value . v11302) (gensym . v923) (void . v11301) (load . v10344) (interaction-environment . v3017) (char-ready? . v11300) (regexp? . v11299) (read-line . v11298) (ungensym . v11297) (alist->eq-hash-table . v11296) (assoc-ref . v11295) (print . v11294) (format . v11293) (host-os . v11292) (library-path . v1420) (standard-library-path . v11291) (file-newer? . v11290) (stat-mtime . v11289) (write-to-file . v11288) (file->list . v11287) (file->string . v11286) (digit->integer . v11285) (call-with-string-input-port . v11284) (call-with-string-io . v11283) (string-split . v11282) (bytevector-for-each . v11281) (string->regexp . v11280) (rxmatch . v11279) (regexp-replace-all . v11278) (hashtable-for-each . v11277) (call-process . v11276) (local-tz-offset . v11275) (microseconds . v11274) (readdir . v11273) (set-current-directory! . v11272) (expand-path . v11271) (current-directory . v11270) (%spawn . v11269) (%waitpid . v11268) (%ffi-supported? . v11267) (%ffi-pointer-ref . v11266) (%ffi-pointer->string . v11265) (%ffi-call->string-or-zero . v11264) (%ffi-call->double . v11263) (%ffi-call->void* . v11262) (%ffi-call->void . v11261) (%ffi-call->int . v11260) (%ffi-lookup . v11259) (%ffi-open . v11258) (%fork . v11257) (%pipe . v11256) (p . v11255) (open-output-string . v11254) (get-output-string . v11253) (get-environment-variables . v11252) (get-environment-variable . v11251) (get-timeofday . v11250) (get-command-line . v11249) (sys-display . v11248) (mosh-executable-path . v11247) (make-file-options . v11246) (source-info . v11245) (make-compiler-instruction . v11244) (make-instruction . v11243) (set-source-info! . v11242) (bignum? . v11241) (fast-equal? . v11240) (fasl-read . v11239) (fasl-write . v11238) (time-usage . v11237) (os-constant . v11236) (make-parameter . v951) (socket-port . v11235) (socket-shutdown . v11234) (socket-close . v11233) (socket-send . v11232) (socket-recv . v11231) (make-server-socket . v11230) (make-client-socket . v11229) (socket-accept . v11228) (socket? . v11227) (string-upcase . v11226) (string-titlecase . v11225) (string-normalize-nfkd . v11224) (string-normalize-nfkc . v11223) (string-normalize-nfd . v11222) (string-normalize-nfc . v11221) (string-foldcase . v11220) (string-downcase . v11219) (string-ci>? . v11218) (string-ci>=? . v11217) (string-ci=? . v11216) (string-ci<? . v11215) (string-ci<=? . v11214) (char-whitespace? . v11213) (char-upper-case? . v11212) (char-title-case? . v11211) (char-numeric? . v11210) (char-lower-case? . v11209) (char-general-category . v11208) (char-upcase . v11207) (char-titlecase . v11206) (char-foldcase . v11205) (char-downcase . v11204) (char-ci>? . v11203) (char-ci>=? . v11202) (char-ci=? . v11201) (char-ci<? . v11200) (char-ci<=? . v11199) (char-alphabetic? . v11198) (make-variable-transformer . v2331) (identifier? . v3007) (generate-temporaries . v2987) (free-identifier=? . v2989) (syntax->datum . v3011) (datum->syntax . v3009) (bound-identifier=? . v2991) (record-type-descriptor? . v11197) (record-predicate . v11196) (record-mutator . v11195) (record-constructor . v11194) (record-accessor . v11193) (make-record-type-descriptor . v11192) (make-record-constructor-descriptor . v11191) (record? . v11190) (record-type-uid . v11189) (record-type-sealed? . v11188) (record-type-parent . v11187) (record-type-opaque? . v11186) (record-type-name . v11185) (record-type-generative? . v11184) (record-type-field-names . v11183) (record-rtd . v11182) (record-field-mutable? . v11181) (delete-file . v11180) (file-exists? . v11179) (vector-sort! . v11178) (vector-sort . v11177) (list-sort . v11176) (symbol-hash . v11175) (string-ci-hash . v11174) (string-hash . v11173) (equal-hash . v11172) (hashtable-equivalence-function . v11171) (make-hashtable . v11170) (hashtable-hash-function . v11169) (make-eqv-hashtable . v11168) (make-eq-hashtable . v11167) (hashtable? . v11166) (hashtable-update! . v11165) (hashtable-size . v11164) (hashtable-set! . v11163) (hashtable-ref . v11162) (hashtable-mutable? . v11161) (hashtable-keys . v11160) (hashtable-entries . v11159) (hashtable-delete! . v11158) (hashtable-copy . v11157) (hashtable-contains? . v11156) (hashtable-clear! . v11155) (call-with-output-file . v11154) (call-with-input-file . v11153) (write-char . v11152) (write . v11151) (with-output-to-file . v11150) (with-input-from-file . v11149) (read-char . v11148) (read . v11147) (peek-char . v11146) (open-output-file . v11145) (open-input-file . v11144) (newline . v11143) (display . v11142) (close-output-port . v11141) (close-input-port . v11140) (eof-object? . v11139) (eof-object . v11138) (current-error-port . v11137) (current-output-port . v11136) (current-input-port . v11135) (output-port? . v11134) (input-port? . v11133) (utf-8-codec . v11132) (utf-16-codec . v11131) (transcoder-error-handling-mode . v11130) (transcoder-eol-style . v11129) (transcoder-codec . v11128) (transcoded-port . v11127) (textual-port? . v11126) (string->bytevector . v11125) (standard-output-port . v11124) (standard-input-port . v11123) (standard-error-port . v11122) (set-port-position! . v11121) (put-u8 . v11120) (put-string . v11119) (put-datum . v11118) (put-char . v11117) (put-bytevector . v11116) (port? . v11115) (port-transcoder . v11114) (port-position . v11113) (port-has-set-port-position!? . v11112) (port-has-port-position? . v11111) (port-eof? . v11110) (output-port-buffer-mode . v11109) (open-string-output-port . v11108) (open-string-input-port . v11107) (open-file-output-port . v11106) (open-file-input/output-port . v11105) (open-file-input-port . v11104) (open-bytevector-output-port . v11103) (open-bytevector-input-port . v11102) (native-transcoder . v11101) (native-eol-style . v11100) (make-transcoder . v11099) (latin-1-codec . v11098) (make-i/o-write-error . v9818) (make-i/o-read-error . v9797) (make-i/o-port-error . v9976) (make-i/o-invalid-position-error . v9840) (make-i/o-filename-error . v9866) (make-i/o-file-protection-error . v9891) (make-i/o-file-is-read-only-error . v9912) (make-i/o-file-does-not-exist-error . v9954) (make-i/o-file-already-exists-error . v9933) (make-i/o-error . v9776) (make-i/o-encoding-error . v10023) (make-i/o-decoding-error . v10001) (make-custom-textual-output-port . v11097) (make-custom-textual-input/output-port . v11096) (make-custom-textual-input-port . v11095) (make-custom-binary-output-port . v11094) (make-custom-binary-input/output-port . v11093) (make-custom-binary-input-port . v11092) (make-bytevector . v11091) (lookahead-u8 . v11090) (lookahead-char . v11089) (i/o-write-error? . v9820) (i/o-read-error? . v9799) (i/o-port-error? . v9980) (i/o-invalid-position-error? . v9844) (i/o-filename-error? . v9870) (i/o-file-protection-error? . v9893) (i/o-file-is-read-only-error? . v9914) (i/o-file-does-not-exist-error? . v9956) (i/o-file-already-exists-error? . v9935) (i/o-error? . v9778) (i/o-error-position . v9846) (i/o-error-port . v9982) (i/o-error-filename . v9872) (i/o-encoding-error? . v10027) (i/o-encoding-error-char . v10029) (i/o-decoding-error? . v10003) (get-u8 . v11088) (get-string-n! . v11087) (get-string-n . v11086) (get-string-all . v11085) (get-line . v11084) (get-datum . v11083) (get-char . v11082) (get-bytevector-some . v11081) (get-bytevector-n! . v11080) (get-bytevector-n . v11079) (get-bytevector-all . v11078) (flush-output-port . v11077) (close-port . v11076) (scheme-report-environment . v2969) (quotient . v11075) (null-environment . v2967) (remainder . v11074) (modulo . v11073) (inexact->exact . v11072) (force . v11071) (exact->inexact . v11070) (make-promise . v11069) (exit . v11068) (command-line . v10338) (string-fill! . v11067) (string-set! . v11066) (set-cdr! . v11065) (set-car! . v11064) (remove . v11063) (remv . v11062) (remp . v11061) (remq . v11060) (partition . v11059) (memv . v11058) (memq . v11057) (memp . v11056) (member . v11055) (exists . v11054) (for-all . v11053) (fold-right . v11052) (fold-left . v11051) (find . v11050) (filter . v11049) (cons* . v11048) (assv . v11047) (assq . v11046) (assp . v11045) (assoc . v11044) (call-with-string-output-port . v11043) (call-with-port . v11042) (call-with-bytevector-output-port . v11041) (bytevector->string . v11040) (buffer-mode? . v11039) (binary-port? . v11038) (with-exception-handler . v11037) (raise-continuable . v11036) (raise . v11035) (eval . v2973) (environment . v2965) (make-enumeration . v11034) (enum-set=? . v11033) (enum-set-universe . v11032) (enum-set-union . v11031) (enum-set-subset? . v11030) (enum-set-projection . v11029) (enum-set-member? . v11028) (enum-set-intersection . v11027) (enum-set-indexer . v11026) (enum-set-difference . v11025) (enum-set-constructor . v11024) (enum-set-complement . v11023) (enum-set->list . v11022) (who-condition? . v9640) (warning? . v9506) (violation? . v9569) (undefined-violation? . v9757) (syntax-violation? . v9732) (syntax-violation-subform . v9736) (syntax-violation-form . v9734) (syntax-violation . v3005) (simple-conditions . v11021) (serious-condition? . v9527) (non-continuable-violation? . v9663) (message-condition? . v9483) (make-who-condition . v9636) (make-warning . v9504) (make-violation . v9567) (make-undefined-violation . v9755) (make-syntax-violation . v9726) (make-serious-condition . v9525) (make-non-continuable-violation . v9661) (make-message-condition . v9479) (make-lexical-violation . v9703) (make-irritants-condition . v9610) (make-implementation-restriction-violation . v9682) (make-error . v9546) (make-assertion-violation . v9588) (lexical-violation? . v9705) (irritants-condition? . v9614) (implementation-restriction-violation? . v9684) (error? . v9548) (condition-who . v9642) (condition-predicate . v11020) (condition-message . v9485) (condition-irritants . v9616) (condition-accessor . v11019) (condition . v11018) (assertion-violation? . v9590) (condition? . v11017) (utf32->string . v11016) (utf16->string . v11015) (utf8->string . v11014) (uint-list->bytevector . v11013) (u8-list->bytevector . v11012) (string->utf8 . v11011) (string->utf32 . v11010) (string->utf16 . v11009) (sint-list->bytevector . v11008) (native-endianness . v11007) (bytevector? . v11006) (bytevector=? . v11005) (bytevector-uint-set! . v11004) (bytevector-uint-ref . v11003) (bytevector-u8-set! . v11002) (bytevector-u8-ref . v11001) (bytevector-u64-set! . v11000) (bytevector-u64-ref . v10999) (bytevector-u64-native-set! . v10998) (bytevector-u64-native-ref . v10997) (bytevector-u32-set! . v10996) (bytevector-u32-ref . v10995) (bytevector-u32-native-set! . v10994) (bytevector-u32-native-ref . v10993) (bytevector-u16-set! . v10992) (bytevector-u16-ref . v10991) (bytevector-u16-native-set! . v10990) (bytevector-u16-native-ref . v10989) (bytevector-sint-set! . v10988) (bytevector-sint-ref . v10987) (bytevector-s8-set! . v10986) (bytevector-s8-ref . v10985) (bytevector-s64-set! . v10984) (bytevector-s64-ref . v10983) (bytevector-s64-native-set! . v10982) (bytevector-s64-native-ref . v10981) (bytevector-s32-set! . v10980) (bytevector-s32-ref . v10979) (bytevector-s32-native-set! . v10978) (bytevector-s32-native-ref . v10977) (bytevector-s16-set! . v10976) (bytevector-s16-ref . v10975) (bytevector-s16-native-set! . v10974) (bytevector-s16-native-ref . v10973) (bytevector-length . v10972) (bytevector-ieee-single-ref . v10971) (bytevector-ieee-single-set! . v10970) (bytevector-ieee-single-native-set! . v10969) (bytevector-ieee-single-native-ref . v10968) (bytevector-ieee-double-set! . v10967) (bytevector-ieee-double-ref . v10966) (bytevector-ieee-double-native-set! . v10965) (bytevector-ieee-double-native-ref . v10964) (bytevector-fill! . v10963) (bytevector-copy! . v10962) (bytevector-copy . v10961) (bytevector->uint-list . v10960) (bytevector->u8-list . v10959) (bytevector->sint-list . v10958) (no-nans-violation? . v10071) (no-infinities-violation? . v10050) (make-no-nans-violation . v10069) (make-no-infinities-violation . v10048) (real->flonum . v10957) (flzero? . v10956) (fltruncate . v10955) (fltan . v10954) (flsqrt . v10953) (flsin . v10952) (flround . v10951) (flpositive? . v10950) (flonum? . v10949) (flodd? . v10948) (flnumerator . v10947) (flnegative? . v10946) (flnan? . v10945) (flmod0 . v10944) (flmod . v10943) (flmin . v10942) (flmax . v10941) (fllog . v10940) (flinteger? . v10939) (flinfinite? . v10938) (flfloor . v10937) (flfinite? . v10936) (flexpt . v10935) (flexp . v10934) (fleven? . v10933) (fldiv0-and-mod0 . v10932) (fldiv0 . v10931) (fldiv-and-mod . v10930) (fldiv . v10929) (fldenominator . v10928) (flcos . v10927) (flceiling . v10926) (flatan . v10925) (flasin . v10924) (flacos . v10923) (flabs . v10922) (fl>? . v10921) (fl>=? . v10920) (fl=? . v10919) (fl<? . v10918) (fl<=? . v10917) (fl/ . v10916) (fl- . v10915) (fl+ . v10914) (fl* . v10913) (fixnum->flonum . v10912) (fxzero? . v10911) (fxxor . v10910) (fxrotate-bit-field . v10909) (fxreverse-bit-field . v10908) (fxpositive? . v10907) (fxodd? . v10906) (fxnot . v10905) (fxnegative? . v10904) (fxmod0 . v10903) (fxmod . v10902) (fxmin . v10901) (fxmax . v10900) (fxlength . v10899) (fxior . v10898) (fxif . v10897) (fxfirst-bit-set . v10896) (fxeven? . v10895) (fxdiv0-and-mod0 . v10894) (fxdiv0 . v10893) (fxdiv-and-mod . v10892) (fxdiv . v10891) (fxcopy-bit-field . v10890) (fxcopy-bit . v10889) (fxbit-set? . v10888) (fxbit-field . v10887) (fxbit-count . v10886) (fxarithmetic-shift-right . v10885) (fxarithmetic-shift-left . v10884) (fxarithmetic-shift . v10883) (fxand . v10882) (fx>? . v10881) (fx>=? . v10880) (fx=? . v10879) (fx<? . v10878) (fx<=? . v10877) (fx-/carry . v10876) (fx- . v10875) (fx+/carry . v10874) (fx+ . v10873) (fx*/carry . v10872) (fx* . v10871) (greatest-fixnum . v10870) (least-fixnum . v10869) (fixnum-width . v10868) (fixnum? . v10867) (bitwise-rotate-bit-field . v10866) (bitwise-reverse-bit-field . v10865) (bitwise-length . v10864) (bitwise-if . v10863) (bitwise-first-bit-set . v10862) (bitwise-copy-bit-field . v10861) (bitwise-copy-bit . v10860) (bitwise-bit-set? . v10859) (bitwise-bit-field . v10858) (bitwise-bit-count . v10857) (bitwise-xor . v10856) (bitwise-ior . v10855) (bitwise-and . v10854) (bitwise-not . v10853) (bitwise-arithmetic-shift-right . v10852) (bitwise-arithmetic-shift-left . v10851) (bitwise-arithmetic-shift . v10850) (zero? . v10849) (vector? . v10848) (vector-set! . v10847) (vector-ref . v10846) (vector-map . v10845) (vector-length . v10844) (vector-for-each . v10843) (vector-fill! . v10842) (vector->list . v10841) (vector . v10840) (values . v10839) (truncate . v10838) (tan . v10837) (symbol? . v10836) (symbol=? . v10835) (symbol->string . v10834) (substring . v10833) (string? . v10832) (string>? . v10831) (string>=? . v10830) (string=? . v10829) (string<? . v10828) (string<=? . v10827) (string-ref . v10826) (string-length . v10825) (string-for-each . v10824) (string-copy . v10823) (string-append . v10822) (string->symbol . v10821) (string->number . v10820) (string->list . v10819) (string . v10818) (sqrt . v10817) (sin . v10816) (round . v10815) (reverse . v10814) (real? . v10813) (real-valued? . v10812) (real-part . v10811) (rationalize . v10810) (rational? . v10809) (rational-valued? . v10808) (procedure? . v10807) (positive? . v10806) (pair? . v10805) (odd? . v10804) (numerator . v10803) (number? . v10802) (number->string . v10801) (null? . v10800) (not . v10799) (negative? . v10798) (nan? . v10797) (min . v10796) (max . v10795) (map . v10794) (make-vector . v10793) (make-string . v10792) (make-rectangular . v10791) (make-polar . v10790) (magnitude . v10789) (log . v10788) (list? . v10787) (list-tail . v10786) (list-ref . v10785) (list->vector . v10784) (list->string . v10783) (list . v10782) (length . v10781) (lcm . v10780) (integer? . v10779) (integer-valued? . v10778) (integer->char . v10777) (infinite? . v10776) (inexact? . v10775) (inexact . v10774) (imag-part . v10773) (gcd . v10772) (for-each . v10771) (floor . v10770) (finite? . v10769) (expt . v10768) (exp . v10767) (exact? . v10766) (exact-integer-sqrt . v10765) (exact . v10764) (even? . v10763) (error . v10762) (eqv? . v10761) (equal? . v10760) (eq? . v10759) (dynamic-wind . v10758) (div0-and-mod0 . v10757) (mod0 . v10756) (div0 . v10755) (div-and-mod . v10754) (mod . v10753) (div . v10752) (denominator . v10751) (cos . v10750) (cons . v10749) (complex? . v10748) (char? . v10747) (char>? . v10746) (char>=? . v10745) (char=? . v10744) (char<? . v10743) (char<=? . v10742) (char->integer . v10741) (ceiling . v10740) (call-with-values . v10739) (call/cc . v10738) (call-with-current-continuation . v10737) (cddddr . v10736) (cdddar . v10735) (cddadr . v10734) (cddaar . v10733) (cdaddr . v10732) (cdadar . v10731) (cdaadr . v10730) (cdaaar . v10729) (cadddr . v10728) (caddar . v10727) (cadadr . v10726) (cadaar . v10725) (caaddr . v10724) (caadar . v10723) (caaadr . v10722) (caaaar . v10721) (cdddr . v10720) (cddar . v10719) (cdadr . v10718) (cdaar . v10717) (caddr . v10716) (cadar . v10715) (caadr . v10714) (caaar . v10713) (cddr . v10712) (cdar . v10711) (cadr . v10710) (caar . v10709) (cdr . v10708) (car . v10707) (boolean? . v10706) (boolean=? . v10705) (atan . v10704) (assertion-violation . v10703) (assertion-error . v2999) (asin . v10702) (apply . v10701) (append . v10700) (angle . v10699) (acos . v10698) (abs . v10697) (/ . v10696) (* . v10695) (- . v10694) (+ . v10693) (>= . v10692) (> . v10691) (= . v10690) (<= . v10689) (< . v10688) (library . v10687) (&no-nans . v10686) (&no-infinities . v10685) (&i/o-encoding . v10684) (&i/o-decoding . v10683) (&i/o-port . v10682) (&i/o-file-does-not-exist . v10681) (&i/o-file-already-exists . v10680) (&i/o-file-is-read-only . v10679) (&i/o-file-protection . v10678) (&i/o-filename . v10677) (&i/o-invalid-position . v10676) (&i/o-write . v10675) (&i/o-read . v10674) (&i/o . v10673) (&undefined . v10672) (&syntax . v10671) (&lexical . v10670) (&implementation-restriction . v10669) (&non-continuable . v10668) (&who . v10667) (&irritants . v10666) (&assertion . v10665) (&violation . v10664) (&error . v10663) (&serious . v10662) (&warning . v10661) (&message . v10660) (&condition . v10659) (define-condition-type . v10658) (define-enumeration . v10657) (define-record-type . v10656) (parent-rtd . v10655) (nongenerative . v10654) (opaque . v10653) (sealed . v10652) (protocol . v10651) (parent . v10650) (immutable . v10649) (mutable . v10648) (fields . v10647) (error-handling-mode . v10646) (file-options . v10645) (buffer-mode . v10644) (eol-style . v10643) (guard . v10642) (trace-define . v10641) (trace-lambda . v10640) (unsyntax-splicing . v10639) (unsyntax . v10638) (unquote-splicing . v10637) (unquote . v10636) (_ . v10635) (else . v10634) (=> . v10633) (... . v10632) (assert . v10631) (endianness . v10630) (delay . v10629) (time . v10628) (do . v10627) (cond . v10626) (let* . v10625) (let . v10624) (let*-values . v10623) (let-values . v10622) (identifier-syntax . v10621) (with-syntax . v10620) (quasisyntax . v10619) (quasiquote . v10618) (syntax-rules . v10617) (include . v10616) (define-struct . v10615) (record-constructor-descriptor . v10614) (record-type-descriptor . v10613) (case . v10612) (parameterize . v10611) (unless . v10610) (when . v10609) (or . v10608) (and . v10607) (if . v10606) (letrec* . v10605) (letrec . v10604) (type-descriptor . v10603) (case-lambda . v10602) (lambda . v10601) (syntax . v10600) (syntax-case . v10599) (quote . v10598) (foreign-call . v10597) (letrec-syntax . v10596) (let-syntax . v10595) (set! . v10594) (import . v10593) (begin . v10592) (module . v10591) (define-syntax . v10590) (define . v10589)) '((v10075 core-prim . &no-nans-rcd) (v10073 core-prim . &no-nans-rtd) (v10054 core-prim . &no-infinities-rcd) (v10052 core-prim . &no-infinities-rtd) (v10033 core-prim . &i/o-encoding-rcd) (v10031 core-prim . &i/o-encoding-rtd) (v10007 core-prim . &i/o-decoding-rcd) (v10005 core-prim . &i/o-decoding-rtd) (v9986 core-prim . &i/o-port-rcd) (v9984 core-prim . &i/o-port-rtd) (v9960 core-prim . &i/o-file-does-not-exist-rcd) (v9958 core-prim . &i/o-file-does-not-exist-rtd) (v9939 core-prim . &i/o-file-already-exists-rcd) (v9937 core-prim . &i/o-file-already-exists-rtd) (v9918 core-prim . &i/o-file-is-read-only-rcd) (v9916 core-prim . &i/o-file-is-read-only-rtd) (v9897 core-prim . &i/o-file-protection-rcd) (v9895 core-prim . &i/o-file-protection-rtd) (v9876 core-prim . &i/o-filename-rcd) (v9874 core-prim . &i/o-filename-rtd) (v9850 core-prim . &i/o-invalid-position-rcd) (v9848 core-prim . &i/o-invalid-position-rtd) (v9824 core-prim . &i/o-write-rcd) (v9822 core-prim . &i/o-write-rtd) (v9803 core-prim . &i/o-read-rcd) (v9801 core-prim . &i/o-read-rtd) (v9782 core-prim . &i/o-rcd) (v9780 core-prim . &i/o-rtd) (v9761 core-prim . &undefined-rcd) (v9759 core-prim . &undefined-rtd) (v9740 core-prim . &syntax-rcd) (v9738 core-prim . &syntax-rtd) (v9709 core-prim . &lexical-rcd) (v9707 core-prim . &lexical-rtd) (v9688 core-prim . &implementation-restriction-rcd) (v9686 core-prim . &implementation-restriction-rtd) (v9667 core-prim . &non-continuable-rcd) (v9665 core-prim . &non-continuable-rtd) (v9646 core-prim . &who-rcd) (v9644 core-prim . &who-rtd) (v9620 core-prim . &irritants-rcd) (v9618 core-prim . &irritants-rtd) (v9594 core-prim . &assertion-rcd) (v9592 core-prim . &assertion-rtd) (v9573 core-prim . &violation-rcd) (v9571 core-prim . &violation-rtd) (v9552 core-prim . &error-rcd) (v9550 core-prim . &error-rtd) (v9531 core-prim . &serious-rcd) (v9529 core-prim . &serious-rtd) (v9510 core-prim . &warning-rcd) (v9508 core-prim . &warning-rtd) (v9489 core-prim . &message-rcd) (v9487 core-prim . &message-rtd) (v9398 core-prim . &condition-rcd) (v9396 core-prim . &condition-rtd) (v3001 core-prim . syntax-error) (v2772 core-prim . syntax-dispatch) (v11305 core-prim . pretty-print) (v11304 core-prim . eval-core) (v11303 core-prim . set-symbol-value!) (v11302 core-prim . symbol-value) (v923 core-prim . gensym) (v11301 core-prim . void) (v10344 core-prim . load) (v3017 core-prim . interaction-environment) (v11300 core-prim . char-ready?) (v11299 core-prim . regexp?) (v11298 core-prim . read-line) (v11297 core-prim . ungensym) (v11296 core-prim . alist->eq-hash-table) (v11295 core-prim . assoc-ref) (v11294 core-prim . print) (v11293 core-prim . format) (v11292 core-prim . host-os) (v1420 core-prim . library-path) (v11291 core-prim . standard-library-path) (v11290 core-prim . file-newer?) (v11289 core-prim . stat-mtime) (v11288 core-prim . write-to-file) (v11287 core-prim . file->list) (v11286 core-prim . file->string) (v11285 core-prim . digit->integer) (v11284 core-prim . call-with-string-input-port) (v11283 core-prim . call-with-string-io) (v11282 core-prim . string-split) (v11281 core-prim . bytevector-for-each) (v11280 core-prim . string->regexp) (v11279 core-prim . rxmatch) (v11278 core-prim . regexp-replace-all) (v11277 core-prim . hashtable-for-each) (v11276 core-prim . call-process) (v11275 core-prim . local-tz-offset) (v11274 core-prim . microseconds) (v11273 core-prim . readdir) (v11272 core-prim . set-current-directory!) (v11271 core-prim . expand-path) (v11270 core-prim . current-directory) (v11269 core-prim . %spawn) (v11268 core-prim . %waitpid) (v11267 core-prim . %ffi-supported?) (v11266 core-prim . %ffi-pointer-ref) (v11265 core-prim . %ffi-pointer->string) (v11264 core-prim . %ffi-call->string-or-zero) (v11263 core-prim . %ffi-call->double) (v11262 core-prim . %ffi-call->void*) (v11261 core-prim . %ffi-call->void) (v11260 core-prim . %ffi-call->int) (v11259 core-prim . %ffi-lookup) (v11258 core-prim . %ffi-open) (v11257 core-prim . %fork) (v11256 core-prim . %pipe) (v11255 core-prim . p) (v11254 core-prim . open-output-string) (v11253 core-prim . get-output-string) (v11252 core-prim . get-environment-variables) (v11251 core-prim . get-environment-variable) (v11250 core-prim . get-timeofday) (v11249 core-prim . get-command-line) (v11248 core-prim . sys-display) (v11247 core-prim . mosh-executable-path) (v11246 core-prim . make-file-options) (v11245 core-prim . source-info) (v11244 core-prim . make-compiler-instruction) (v11243 core-prim . make-instruction) (v11242 core-prim . set-source-info!) (v11241 core-prim . bignum?) (v11240 core-prim . fast-equal?) (v11239 core-prim . fasl-read) (v11238 core-prim . fasl-write) (v11237 core-prim . time-usage) (v11236 core-prim . os-constant) (v951 core-prim . make-parameter) (v11235 core-prim . socket-port) (v11234 core-prim . socket-shutdown) (v11233 core-prim . socket-close) (v11232 core-prim . socket-send) (v11231 core-prim . socket-recv) (v11230 core-prim . make-server-socket) (v11229 core-prim . make-client-socket) (v11228 core-prim . socket-accept) (v11227 core-prim . socket?) (v11226 core-prim . string-upcase) (v11225 core-prim . string-titlecase) (v11224 core-prim . string-normalize-nfkd) (v11223 core-prim . string-normalize-nfkc) (v11222 core-prim . string-normalize-nfd) (v11221 core-prim . string-normalize-nfc) (v11220 core-prim . string-foldcase) (v11219 core-prim . string-downcase) (v11218 core-prim . string-ci>?) (v11217 core-prim . string-ci>=?) (v11216 core-prim . string-ci=?) (v11215 core-prim . string-ci<?) (v11214 core-prim . string-ci<=?) (v11213 core-prim . char-whitespace?) (v11212 core-prim . char-upper-case?) (v11211 core-prim . char-title-case?) (v11210 core-prim . char-numeric?) (v11209 core-prim . char-lower-case?) (v11208 core-prim . char-general-category) (v11207 core-prim . char-upcase) (v11206 core-prim . char-titlecase) (v11205 core-prim . char-foldcase) (v11204 core-prim . char-downcase) (v11203 core-prim . char-ci>?) (v11202 core-prim . char-ci>=?) (v11201 core-prim . char-ci=?) (v11200 core-prim . char-ci<?) (v11199 core-prim . char-ci<=?) (v11198 core-prim . char-alphabetic?) (v2331 core-prim . make-variable-transformer) (v3007 core-prim . identifier?) (v2987 core-prim . generate-temporaries) (v2989 core-prim . free-identifier=?) (v3011 core-prim . syntax->datum) (v3009 core-prim . datum->syntax) (v2991 core-prim . bound-identifier=?) (v11197 core-prim . record-type-descriptor?) (v11196 core-prim . record-predicate) (v11195 core-prim . record-mutator) (v11194 core-prim . record-constructor) (v11193 core-prim . record-accessor) (v11192 core-prim . make-record-type-descriptor) (v11191 core-prim . make-record-constructor-descriptor) (v11190 core-prim . record?) (v11189 core-prim . record-type-uid) (v11188 core-prim . record-type-sealed?) (v11187 core-prim . record-type-parent) (v11186 core-prim . record-type-opaque?) (v11185 core-prim . record-type-name) (v11184 core-prim . record-type-generative?) (v11183 core-prim . record-type-field-names) (v11182 core-prim . record-rtd) (v11181 core-prim . record-field-mutable?) (v11180 core-prim . delete-file) (v11179 core-prim . file-exists?) (v11178 core-prim . vector-sort!) (v11177 core-prim . vector-sort) (v11176 core-prim . list-sort) (v11175 core-prim . symbol-hash) (v11174 core-prim . string-ci-hash) (v11173 core-prim . string-hash) (v11172 core-prim . equal-hash) (v11171 core-prim . hashtable-equivalence-function) (v11170 core-prim . make-hashtable) (v11169 core-prim . hashtable-hash-function) (v11168 core-prim . make-eqv-hashtable) (v11167 core-prim . make-eq-hashtable) (v11166 core-prim . hashtable?) (v11165 core-prim . hashtable-update!) (v11164 core-prim . hashtable-size) (v11163 core-prim . hashtable-set!) (v11162 core-prim . hashtable-ref) (v11161 core-prim . hashtable-mutable?) (v11160 core-prim . hashtable-keys) (v11159 core-prim . hashtable-entries) (v11158 core-prim . hashtable-delete!) (v11157 core-prim . hashtable-copy) (v11156 core-prim . hashtable-contains?) (v11155 core-prim . hashtable-clear!) (v11154 core-prim . call-with-output-file) (v11153 core-prim . call-with-input-file) (v11152 core-prim . write-char) (v11151 core-prim . write) (v11150 core-prim . with-output-to-file) (v11149 core-prim . with-input-from-file) (v11148 core-prim . read-char) (v11147 core-prim . read) (v11146 core-prim . peek-char) (v11145 core-prim . open-output-file) (v11144 core-prim . open-input-file) (v11143 core-prim . newline) (v11142 core-prim . display) (v11141 core-prim . close-output-port) (v11140 core-prim . close-input-port) (v11139 core-prim . eof-object?) (v11138 core-prim . eof-object) (v11137 core-prim . current-error-port) (v11136 core-prim . current-output-port) (v11135 core-prim . current-input-port) (v11134 core-prim . output-port?) (v11133 core-prim . input-port?) (v11132 core-prim . utf-8-codec) (v11131 core-prim . utf-16-codec) (v11130 core-prim . transcoder-error-handling-mode) (v11129 core-prim . transcoder-eol-style) (v11128 core-prim . transcoder-codec) (v11127 core-prim . transcoded-port) (v11126 core-prim . textual-port?) (v11125 core-prim . string->bytevector) (v11124 core-prim . standard-output-port) (v11123 core-prim . standard-input-port) (v11122 core-prim . standard-error-port) (v11121 core-prim . set-port-position!) (v11120 core-prim . put-u8) (v11119 core-prim . put-string) (v11118 core-prim . put-datum) (v11117 core-prim . put-char) (v11116 core-prim . put-bytevector) (v11115 core-prim . port?) (v11114 core-prim . port-transcoder) (v11113 core-prim . port-position) (v11112 core-prim . port-has-set-port-position!?) (v11111 core-prim . port-has-port-position?) (v11110 core-prim . port-eof?) (v11109 core-prim . output-port-buffer-mode) (v11108 core-prim . open-string-output-port) (v11107 core-prim . open-string-input-port) (v11106 core-prim . open-file-output-port) (v11105 core-prim . open-file-input/output-port) (v11104 core-prim . open-file-input-port) (v11103 core-prim . open-bytevector-output-port) (v11102 core-prim . open-bytevector-input-port) (v11101 core-prim . native-transcoder) (v11100 core-prim . native-eol-style) (v11099 core-prim . make-transcoder) (v11098 core-prim . latin-1-codec) (v9818 core-prim . make-i/o-write-error) (v9797 core-prim . make-i/o-read-error) (v9976 core-prim . make-i/o-port-error) (v9840 core-prim . make-i/o-invalid-position-error) (v9866 core-prim . make-i/o-filename-error) (v9891 core-prim . make-i/o-file-protection-error) (v9912 core-prim . make-i/o-file-is-read-only-error) (v9954 core-prim . make-i/o-file-does-not-exist-error) (v9933 core-prim . make-i/o-file-already-exists-error) (v9776 core-prim . make-i/o-error) (v10023 core-prim . make-i/o-encoding-error) (v10001 core-prim . make-i/o-decoding-error) (v11097 core-prim . make-custom-textual-output-port) (v11096 core-prim . make-custom-textual-input/output-port) (v11095 core-prim . make-custom-textual-input-port) (v11094 core-prim . make-custom-binary-output-port) (v11093 core-prim . make-custom-binary-input/output-port) (v11092 core-prim . make-custom-binary-input-port) (v11091 core-prim . make-bytevector) (v11090 core-prim . lookahead-u8) (v11089 core-prim . lookahead-char) (v9820 core-prim . i/o-write-error?) (v9799 core-prim . i/o-read-error?) (v9980 core-prim . i/o-port-error?) (v9844 core-prim . i/o-invalid-position-error?) (v9870 core-prim . i/o-filename-error?) (v9893 core-prim . i/o-file-protection-error?) (v9914 core-prim . i/o-file-is-read-only-error?) (v9956 core-prim . i/o-file-does-not-exist-error?) (v9935 core-prim . i/o-file-already-exists-error?) (v9778 core-prim . i/o-error?) (v9846 core-prim . i/o-error-position) (v9982 core-prim . i/o-error-port) (v9872 core-prim . i/o-error-filename) (v10027 core-prim . i/o-encoding-error?) (v10029 core-prim . i/o-encoding-error-char) (v10003 core-prim . i/o-decoding-error?) (v11088 core-prim . get-u8) (v11087 core-prim . get-string-n!) (v11086 core-prim . get-string-n) (v11085 core-prim . get-string-all) (v11084 core-prim . get-line) (v11083 core-prim . get-datum) (v11082 core-prim . get-char) (v11081 core-prim . get-bytevector-some) (v11080 core-prim . get-bytevector-n!) (v11079 core-prim . get-bytevector-n) (v11078 core-prim . get-bytevector-all) (v11077 core-prim . flush-output-port) (v11076 core-prim . close-port) (v2969 core-prim . scheme-report-environment) (v11075 core-prim . quotient) (v2967 core-prim . null-environment) (v11074 core-prim . remainder) (v11073 core-prim . modulo) (v11072 core-prim . inexact->exact) (v11071 core-prim . force) (v11070 core-prim . exact->inexact) (v11069 core-prim . make-promise) (v11068 core-prim . exit) (v10338 core-prim . command-line) (v11067 core-prim . string-fill!) (v11066 core-prim . string-set!) (v11065 core-prim . set-cdr!) (v11064 core-prim . set-car!) (v11063 core-prim . remove) (v11062 core-prim . remv) (v11061 core-prim . remp) (v11060 core-prim . remq) (v11059 core-prim . partition) (v11058 core-prim . memv) (v11057 core-prim . memq) (v11056 core-prim . memp) (v11055 core-prim . member) (v11054 core-prim . exists) (v11053 core-prim . for-all) (v11052 core-prim . fold-right) (v11051 core-prim . fold-left) (v11050 core-prim . find) (v11049 core-prim . filter) (v11048 core-prim . cons*) (v11047 core-prim . assv) (v11046 core-prim . assq) (v11045 core-prim . assp) (v11044 core-prim . assoc) (v11043 core-prim . call-with-string-output-port) (v11042 core-prim . call-with-port) (v11041 core-prim . call-with-bytevector-output-port) (v11040 core-prim . bytevector->string) (v11039 core-prim . buffer-mode?) (v11038 core-prim . binary-port?) (v11037 core-prim . with-exception-handler) (v11036 core-prim . raise-continuable) (v11035 core-prim . raise) (v2973 core-prim . eval) (v2965 core-prim . environment) (v11034 core-prim . make-enumeration) (v11033 core-prim . enum-set=?) (v11032 core-prim . enum-set-universe) (v11031 core-prim . enum-set-union) (v11030 core-prim . enum-set-subset?) (v11029 core-prim . enum-set-projection) (v11028 core-prim . enum-set-member?) (v11027 core-prim . enum-set-intersection) (v11026 core-prim . enum-set-indexer) (v11025 core-prim . enum-set-difference) (v11024 core-prim . enum-set-constructor) (v11023 core-prim . enum-set-complement) (v11022 core-prim . enum-set->list) (v9640 core-prim . who-condition?) (v9506 core-prim . warning?) (v9569 core-prim . violation?) (v9757 core-prim . undefined-violation?) (v9732 core-prim . syntax-violation?) (v9736 core-prim . syntax-violation-subform) (v9734 core-prim . syntax-violation-form) (v3005 core-prim . syntax-violation) (v11021 core-prim . simple-conditions) (v9527 core-prim . serious-condition?) (v9663 core-prim . non-continuable-violation?) (v9483 core-prim . message-condition?) (v9636 core-prim . make-who-condition) (v9504 core-prim . make-warning) (v9567 core-prim . make-violation) (v9755 core-prim . make-undefined-violation) (v9726 core-prim . make-syntax-violation) (v9525 core-prim . make-serious-condition) (v9661 core-prim . make-non-continuable-violation) (v9479 core-prim . make-message-condition) (v9703 core-prim . make-lexical-violation) (v9610 core-prim . make-irritants-condition) (v9682 core-prim . make-implementation-restriction-violation) (v9546 core-prim . make-error) (v9588 core-prim . make-assertion-violation) (v9705 core-prim . lexical-violation?) (v9614 core-prim . irritants-condition?) (v9684 core-prim . implementation-restriction-violation?) (v9548 core-prim . error?) (v9642 core-prim . condition-who) (v11020 core-prim . condition-predicate) (v9485 core-prim . condition-message) (v9616 core-prim . condition-irritants) (v11019 core-prim . condition-accessor) (v11018 core-prim . condition) (v9590 core-prim . assertion-violation?) (v11017 core-prim . condition?) (v11016 core-prim . utf32->string) (v11015 core-prim . utf16->string) (v11014 core-prim . utf8->string) (v11013 core-prim . uint-list->bytevector) (v11012 core-prim . u8-list->bytevector) (v11011 core-prim . string->utf8) (v11010 core-prim . string->utf32) (v11009 core-prim . string->utf16) (v11008 core-prim . sint-list->bytevector) (v11007 core-prim . native-endianness) (v11006 core-prim . bytevector?) (v11005 core-prim . bytevector=?) (v11004 core-prim . bytevector-uint-set!) (v11003 core-prim . bytevector-uint-ref) (v11002 core-prim . bytevector-u8-set!) (v11001 core-prim . bytevector-u8-ref) (v11000 core-prim . bytevector-u64-set!) (v10999 core-prim . bytevector-u64-ref) (v10998 core-prim . bytevector-u64-native-set!) (v10997 core-prim . bytevector-u64-native-ref) (v10996 core-prim . bytevector-u32-set!) (v10995 core-prim . bytevector-u32-ref) (v10994 core-prim . bytevector-u32-native-set!) (v10993 core-prim . bytevector-u32-native-ref) (v10992 core-prim . bytevector-u16-set!) (v10991 core-prim . bytevector-u16-ref) (v10990 core-prim . bytevector-u16-native-set!) (v10989 core-prim . bytevector-u16-native-ref) (v10988 core-prim . bytevector-sint-set!) (v10987 core-prim . bytevector-sint-ref) (v10986 core-prim . bytevector-s8-set!) (v10985 core-prim . bytevector-s8-ref) (v10984 core-prim . bytevector-s64-set!) (v10983 core-prim . bytevector-s64-ref) (v10982 core-prim . bytevector-s64-native-set!) (v10981 core-prim . bytevector-s64-native-ref) (v10980 core-prim . bytevector-s32-set!) (v10979 core-prim . bytevector-s32-ref) (v10978 core-prim . bytevector-s32-native-set!) (v10977 core-prim . bytevector-s32-native-ref) (v10976 core-prim . bytevector-s16-set!) (v10975 core-prim . bytevector-s16-ref) (v10974 core-prim . bytevector-s16-native-set!) (v10973 core-prim . bytevector-s16-native-ref) (v10972 core-prim . bytevector-length) (v10971 core-prim . bytevector-ieee-single-ref) (v10970 core-prim . bytevector-ieee-single-set!) (v10969 core-prim . bytevector-ieee-single-native-set!) (v10968 core-prim . bytevector-ieee-single-native-ref) (v10967 core-prim . bytevector-ieee-double-set!) (v10966 core-prim . bytevector-ieee-double-ref) (v10965 core-prim . bytevector-ieee-double-native-set!) (v10964 core-prim . bytevector-ieee-double-native-ref) (v10963 core-prim . bytevector-fill!) (v10962 core-prim . bytevector-copy!) (v10961 core-prim . bytevector-copy) (v10960 core-prim . bytevector->uint-list) (v10959 core-prim . bytevector->u8-list) (v10958 core-prim . bytevector->sint-list) (v10071 core-prim . no-nans-violation?) (v10050 core-prim . no-infinities-violation?) (v10069 core-prim . make-no-nans-violation) (v10048 core-prim . make-no-infinities-violation) (v10957 core-prim . real->flonum) (v10956 core-prim . flzero?) (v10955 core-prim . fltruncate) (v10954 core-prim . fltan) (v10953 core-prim . flsqrt) (v10952 core-prim . flsin) (v10951 core-prim . flround) (v10950 core-prim . flpositive?) (v10949 core-prim . flonum?) (v10948 core-prim . flodd?) (v10947 core-prim . flnumerator) (v10946 core-prim . flnegative?) (v10945 core-prim . flnan?) (v10944 core-prim . flmod0) (v10943 core-prim . flmod) (v10942 core-prim . flmin) (v10941 core-prim . flmax) (v10940 core-prim . fllog) (v10939 core-prim . flinteger?) (v10938 core-prim . flinfinite?) (v10937 core-prim . flfloor) (v10936 core-prim . flfinite?) (v10935 core-prim . flexpt) (v10934 core-prim . flexp) (v10933 core-prim . fleven?) (v10932 core-prim . fldiv0-and-mod0) (v10931 core-prim . fldiv0) (v10930 core-prim . fldiv-and-mod) (v10929 core-prim . fldiv) (v10928 core-prim . fldenominator) (v10927 core-prim . flcos) (v10926 core-prim . flceiling) (v10925 core-prim . flatan) (v10924 core-prim . flasin) (v10923 core-prim . flacos) (v10922 core-prim . flabs) (v10921 core-prim . fl>?) (v10920 core-prim . fl>=?) (v10919 core-prim . fl=?) (v10918 core-prim . fl<?) (v10917 core-prim . fl<=?) (v10916 core-prim . fl/) (v10915 core-prim . fl-) (v10914 core-prim . fl+) (v10913 core-prim . fl*) (v10912 core-prim . fixnum->flonum) (v10911 core-prim . fxzero?) (v10910 core-prim . fxxor) (v10909 core-prim . fxrotate-bit-field) (v10908 core-prim . fxreverse-bit-field) (v10907 core-prim . fxpositive?) (v10906 core-prim . fxodd?) (v10905 core-prim . fxnot) (v10904 core-prim . fxnegative?) (v10903 core-prim . fxmod0) (v10902 core-prim . fxmod) (v10901 core-prim . fxmin) (v10900 core-prim . fxmax) (v10899 core-prim . fxlength) (v10898 core-prim . fxior) (v10897 core-prim . fxif) (v10896 core-prim . fxfirst-bit-set) (v10895 core-prim . fxeven?) (v10894 core-prim . fxdiv0-and-mod0) (v10893 core-prim . fxdiv0) (v10892 core-prim . fxdiv-and-mod) (v10891 core-prim . fxdiv) (v10890 core-prim . fxcopy-bit-field) (v10889 core-prim . fxcopy-bit) (v10888 core-prim . fxbit-set?) (v10887 core-prim . fxbit-field) (v10886 core-prim . fxbit-count) (v10885 core-prim . fxarithmetic-shift-right) (v10884 core-prim . fxarithmetic-shift-left) (v10883 core-prim . fxarithmetic-shift) (v10882 core-prim . fxand) (v10881 core-prim . fx>?) (v10880 core-prim . fx>=?) (v10879 core-prim . fx=?) (v10878 core-prim . fx<?) (v10877 core-prim . fx<=?) (v10876 core-prim . fx-/carry) (v10875 core-prim . fx-) (v10874 core-prim . fx+/carry) (v10873 core-prim . fx+) (v10872 core-prim . fx*/carry) (v10871 core-prim . fx*) (v10870 core-prim . greatest-fixnum) (v10869 core-prim . least-fixnum) (v10868 core-prim . fixnum-width) (v10867 core-prim . fixnum?) (v10866 core-prim . bitwise-rotate-bit-field) (v10865 core-prim . bitwise-reverse-bit-field) (v10864 core-prim . bitwise-length) (v10863 core-prim . bitwise-if) (v10862 core-prim . bitwise-first-bit-set) (v10861 core-prim . bitwise-copy-bit-field) (v10860 core-prim . bitwise-copy-bit) (v10859 core-prim . bitwise-bit-set?) (v10858 core-prim . bitwise-bit-field) (v10857 core-prim . bitwise-bit-count) (v10856 core-prim . bitwise-xor) (v10855 core-prim . bitwise-ior) (v10854 core-prim . bitwise-and) (v10853 core-prim . bitwise-not) (v10852 core-prim . bitwise-arithmetic-shift-right) (v10851 core-prim . bitwise-arithmetic-shift-left) (v10850 core-prim . bitwise-arithmetic-shift) (v10849 core-prim . zero?) (v10848 core-prim . vector?) (v10847 core-prim . vector-set!) (v10846 core-prim . vector-ref) (v10845 core-prim . vector-map) (v10844 core-prim . vector-length) (v10843 core-prim . vector-for-each) (v10842 core-prim . vector-fill!) (v10841 core-prim . vector->list) (v10840 core-prim . vector) (v10839 core-prim . values) (v10838 core-prim . truncate) (v10837 core-prim . tan) (v10836 core-prim . symbol?) (v10835 core-prim . symbol=?) (v10834 core-prim . symbol->string) (v10833 core-prim . substring) (v10832 core-prim . string?) (v10831 core-prim . string>?) (v10830 core-prim . string>=?) (v10829 core-prim . string=?) (v10828 core-prim . string<?) (v10827 core-prim . string<=?) (v10826 core-prim . string-ref) (v10825 core-prim . string-length) (v10824 core-prim . string-for-each) (v10823 core-prim . string-copy) (v10822 core-prim . string-append) (v10821 core-prim . string->symbol) (v10820 core-prim . string->number) (v10819 core-prim . string->list) (v10818 core-prim . string) (v10817 core-prim . sqrt) (v10816 core-prim . sin) (v10815 core-prim . round) (v10814 core-prim . reverse) (v10813 core-prim . real?) (v10812 core-prim . real-valued?) (v10811 core-prim . real-part) (v10810 core-prim . rationalize) (v10809 core-prim . rational?) (v10808 core-prim . rational-valued?) (v10807 core-prim . procedure?) (v10806 core-prim . positive?) (v10805 core-prim . pair?) (v10804 core-prim . odd?) (v10803 core-prim . numerator) (v10802 core-prim . number?) (v10801 core-prim . number->string) (v10800 core-prim . null?) (v10799 core-prim . not) (v10798 core-prim . negative?) (v10797 core-prim . nan?) (v10796 core-prim . min) (v10795 core-prim . max) (v10794 core-prim . map) (v10793 core-prim . make-vector) (v10792 core-prim . make-string) (v10791 core-prim . make-rectangular) (v10790 core-prim . make-polar) (v10789 core-prim . magnitude) (v10788 core-prim . log) (v10787 core-prim . list?) (v10786 core-prim . list-tail) (v10785 core-prim . list-ref) (v10784 core-prim . list->vector) (v10783 core-prim . list->string) (v10782 core-prim . list) (v10781 core-prim . length) (v10780 core-prim . lcm) (v10779 core-prim . integer?) (v10778 core-prim . integer-valued?) (v10777 core-prim . integer->char) (v10776 core-prim . infinite?) (v10775 core-prim . inexact?) (v10774 core-prim . inexact) (v10773 core-prim . imag-part) (v10772 core-prim . gcd) (v10771 core-prim . for-each) (v10770 core-prim . floor) (v10769 core-prim . finite?) (v10768 core-prim . expt) (v10767 core-prim . exp) (v10766 core-prim . exact?) (v10765 core-prim . exact-integer-sqrt) (v10764 core-prim . exact) (v10763 core-prim . even?) (v10762 core-prim . error) (v10761 core-prim . eqv?) (v10760 core-prim . equal?) (v10759 core-prim . eq?) (v10758 core-prim . dynamic-wind) (v10757 core-prim . div0-and-mod0) (v10756 core-prim . mod0) (v10755 core-prim . div0) (v10754 core-prim . div-and-mod) (v10753 core-prim . mod) (v10752 core-prim . div) (v10751 core-prim . denominator) (v10750 core-prim . cos) (v10749 core-prim . cons) (v10748 core-prim . complex?) (v10747 core-prim . char?) (v10746 core-prim . char>?) (v10745 core-prim . char>=?) (v10744 core-prim . char=?) (v10743 core-prim . char<?) (v10742 core-prim . char<=?) (v10741 core-prim . char->integer) (v10740 core-prim . ceiling) (v10739 core-prim . call-with-values) (v10738 core-prim . call/cc) (v10737 core-prim . call-with-current-continuation) (v10736 core-prim . cddddr) (v10735 core-prim . cdddar) (v10734 core-prim . cddadr) (v10733 core-prim . cddaar) (v10732 core-prim . cdaddr) (v10731 core-prim . cdadar) (v10730 core-prim . cdaadr) (v10729 core-prim . cdaaar) (v10728 core-prim . cadddr) (v10727 core-prim . caddar) (v10726 core-prim . cadadr) (v10725 core-prim . cadaar) (v10724 core-prim . caaddr) (v10723 core-prim . caadar) (v10722 core-prim . caaadr) (v10721 core-prim . caaaar) (v10720 core-prim . cdddr) (v10719 core-prim . cddar) (v10718 core-prim . cdadr) (v10717 core-prim . cdaar) (v10716 core-prim . caddr) (v10715 core-prim . cadar) (v10714 core-prim . caadr) (v10713 core-prim . caaar) (v10712 core-prim . cddr) (v10711 core-prim . cdar) (v10710 core-prim . cadr) (v10709 core-prim . caar) (v10708 core-prim . cdr) (v10707 core-prim . car) (v10706 core-prim . boolean?) (v10705 core-prim . boolean=?) (v10704 core-prim . atan) (v10703 core-prim . assertion-violation) (v2999 core-prim . assertion-error) (v10702 core-prim . asin) (v10701 core-prim . apply) (v10700 core-prim . append) (v10699 core-prim . angle) (v10698 core-prim . acos) (v10697 core-prim . abs) (v10696 core-prim . /) (v10695 core-prim . *) (v10694 core-prim . -) (v10693 core-prim . +) (v10692 core-prim . >=) (v10691 core-prim . >) (v10690 core-prim . =) (v10689 core-prim . <=) (v10688 core-prim . <) (v10687 core-prim . library) (v10686 $core-rtd &no-nans-rtd &no-nans-rcd) (v10685 $core-rtd &no-infinities-rtd &no-infinities-rcd) (v10684 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (v10683 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (v10682 $core-rtd &i/o-port-rtd &i/o-port-rcd) (v10681 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (v10680 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (v10679 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (v10678 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (v10677 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (v10676 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (v10675 $core-rtd &i/o-write-rtd &i/o-write-rcd) (v10674 $core-rtd &i/o-read-rtd &i/o-read-rcd) (v10673 $core-rtd &i/o-rtd &i/o-rcd) (v10672 $core-rtd &undefined-rtd &undefined-rcd) (v10671 $core-rtd &syntax-rtd &syntax-rcd) (v10670 $core-rtd &lexical-rtd &lexical-rcd) (v10669 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (v10668 $core-rtd &non-continuable-rtd &non-continuable-rcd) (v10667 $core-rtd &who-rtd &who-rcd) (v10666 $core-rtd &irritants-rtd &irritants-rcd) (v10665 $core-rtd &assertion-rtd &assertion-rcd) (v10664 $core-rtd &violation-rtd &violation-rcd) (v10663 $core-rtd &error-rtd &error-rcd) (v10662 $core-rtd &serious-rtd &serious-rcd) (v10661 $core-rtd &warning-rtd &warning-rcd) (v10660 $core-rtd &message-rtd &message-rcd) (v10659 $core-rtd &condition-rtd &condition-rcd) (v10658 macro . define-condition-type) (v10657 macro . define-enumeration) (v10656 macro . define-record-type) (v10655 macro . parent-rtd) (v10654 macro . nongenerative) (v10653 macro . opaque) (v10652 macro . sealed) (v10651 macro . protocol) (v10650 macro . parent) (v10649 macro . immutable) (v10648 macro . mutable) (v10647 macro . fields) (v10646 macro . error-handling-mode) (v10645 macro . file-options) (v10644 macro . buffer-mode) (v10643 macro . eol-style) (v10642 macro . guard) (v10641 macro . trace-define) (v10640 macro . trace-lambda) (v10639 macro . unsyntax-splicing) (v10638 macro . unsyntax) (v10637 macro . unquote-splicing) (v10636 macro . unquote) (v10635 macro . _) (v10634 macro . else) (v10633 macro . =>) (v10632 macro . ...) (v10631 macro . assert) (v10630 macro . endianness) (v10629 macro . delay) (v10628 macro . time) (v10627 macro . do) (v10626 macro . cond) (v10625 macro . let*) (v10624 macro . let) (v10623 macro . let*-values) (v10622 macro . let-values) (v10621 macro . identifier-syntax) (v10620 macro . with-syntax) (v10619 macro . quasisyntax) (v10618 macro . quasiquote) (v10617 macro . syntax-rules) (v10616 macro . include) (v10615 macro . define-struct) (v10614 core-macro . record-constructor-descriptor) (v10613 core-macro . record-type-descriptor) (v10612 macro . case) (v10611 macro . parameterize) (v10610 macro . unless) (v10609 macro . when) (v10608 core-macro . or) (v10607 core-macro . and) (v10606 core-macro . if) (v10605 core-macro . letrec*) (v10604 core-macro . letrec) (v10603 core-macro . type-descriptor) (v10602 core-macro . case-lambda) (v10601 core-macro . lambda) (v10600 core-macro . syntax) (v10599 core-macro . syntax-case) (v10598 core-macro . quote) (v10597 core-macro . foreign-call) (v10596 letrec-syntax) (v10595 let-syntax) (v10594 set!) (v10593 import) (v10592 begin) (v10591 module) (v10590 define-syntax) (v10589 define)) values values '#f '#f '#f '#f) (v1800@v1453@install-library 'v11338 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . v11305) (eval-core . v11304) (set-symbol-value! . v11303) (symbol-value . v11302) (gensym . v923) (void . v11301)) '() values values '#f '#f '#f '#f) (v1800@v1453@install-library 'v11339 '(mosh) '() '() '() '() '((set-symbol-value! . v11303) (symbol-value . v11302) (read-line . v11298) (ungensym . v11297) (alist->eq-hash-table . v11296) (assoc-ref . v11295) (print . v11294) (format . v11293) (host-os . v11292) (library-path . v1420) (standard-library-path . v11291) (file-newer? . v11290) (stat-mtime . v11289) (write-to-file . v11288) (file->list . v11287) (file->string . v11286) (digit->integer . v11285) (call-with-string-input-port . v11284) (call-with-string-io . v11283) (string-split . v11282) (bytevector-for-each . v11281) (string->regexp . v11280) (rxmatch . v11279) (regexp-replace-all . v11278) (hashtable-for-each . v11277) (readdir . v11273) (set-current-directory! . v11272) (expand-path . v11271) (current-directory . v11270) (p . v11255) (get-timeofday . v11250) (get-command-line . v11249) (sys-display . v11248) (mosh-executable-path . v11247) (make-file-options . v11246) (source-info . v11245) (make-compiler-instruction . v11244) (make-instruction . v11243) (set-source-info! . v11242) (bignum? . v11241) (fast-equal? . v11240) (fasl-read . v11239) (fasl-write . v11238) (time-usage . v11237) (os-constant . v11236) (time . v10628) (include . v10616)) '() values values '#f '#f '#f '#f) (v1800@v1453@install-library 'v11340 '(system) '() '() '() '() '((call-process . v11276) (local-tz-offset . v11275) (microseconds . v11274) (expand-path . v11271) (%spawn . v11269) (%waitpid . v11268) (%ffi-supported? . v11267) (%ffi-pointer-ref . v11266) (%ffi-pointer->string . v11265) (%ffi-call->string-or-zero . v11264) (%ffi-call->double . v11263) (%ffi-call->void* . v11262) (%ffi-call->void . v11261) (%ffi-call->int . v11260) (%ffi-lookup . v11259) (%ffi-open . v11258) (%fork . v11257) (%pipe . v11256) (open-output-string . v11254) (get-output-string . v11253) (get-environment-variables . v11252) (get-environment-variable . v11251) (make-parameter . v951) (socket-port . v11235) (socket-shutdown . v11234) (socket-close . v11233) (socket-send . v11232) (socket-recv . v11231) (make-server-socket . v11230) (make-client-socket . v11229) (socket-accept . v11228) (socket? . v11227) (parameterize . v10611)) '() values values '#f '#f '#f '#f))
((lambda (v10321@add-library-path! v10323@parse-and-add-library-path v10325@for-each-with-index v10327@rpad v10329@condition-printer v10331@record->field-alist v10333@map-with-index v10335@repl v10337@trace-printer v10339@command-line v10341@local-library-path v10343@load/args v10345@load v10347@ironscheme-build v10349@eval-top-level v10351@compile-system-libraries v10353@compile v10355@compile->closure v10357@pre-compile-r6rs-file v10359@load-r6rs-top-level) (begin (set! v10321@add-library-path! (lambda (v10386@path) (v1784@v1421@library-path (append (v1784@v1421@library-path) (list v10386@path))))) (set! v10323@parse-and-add-library-path (lambda (v10388@paths v10389@message) ((lambda (v10392@t) (if v10392@t ((lambda (v10394@paths) (for-each (lambda (v10396@path) (if (file-exists? v10396@path) (v10321@add-library-path! (expand-path v10396@path)) (format (current-error-port) v10389@message v10396@path))) (reverse (string-split v10394@paths '#\:)))) v10392@t) (void))) v10388@paths))) (set! v10325@for-each-with-index (lambda (v10398@proc v10399@lst) (letrec ((v10402@loop (lambda (v10404@i v10405@lst) (if (null? v10405@lst) (if '#f '#f (void)) (begin (v10398@proc v10404@i (car v10405@lst)) (v10402@loop (+ v10404@i '1) (cdr v10405@lst))))))) (v10402@loop '1 v10399@lst)))) (set! v10327@rpad (lambda (v10408@str v10409@pad v10410@n) ((lambda (v10414@rest) ((letrec ((v10416@loop (lambda (v10418@rest v10419@ret) (if (<= v10418@rest '0) v10419@ret (v10416@loop (- v10418@rest '1) (string-append v10419@ret v10409@pad)))))) v10416@loop) v10414@rest (format '"~a" v10408@str))) (- v10410@n (string-length (format '"~a" v10408@str)))))) (set! v10329@condition-printer (lambda (v10422@e v10423@port) ((lambda (v10427@max-condition-len) (begin (set! v10427@max-condition-len (apply max (map (lambda (v10444@c) (string-length (symbol->string (record-type-name (record-rtd v10444@c))))) (simple-conditions v10422@e)))) (begin (display '" Condition components:\n" v10423@port) (v10325@for-each-with-index (lambda (v10428@i v10429@x) ((lambda (v10432@rtd v10433@fields-alist) (begin (format v10423@port '" ~d. ~a" v10428@i (v10327@rpad (symbol->string (record-type-name v10432@rtd)) '" " v10427@max-condition-len)) (if (null? v10433@fields-alist) (newline v10423@port) (void)) ((letrec ((v10436@loop (lambda (v10438@first v10439@fields-alist) (if (null? v10439@fields-alist) '() ((lambda (v10442@field) (begin (if (not v10438@first) (display (v10327@rpad '"" '" " (+ '4 v10427@max-condition-len)) v10423@port) (void)) (display '"       " v10423@port) (display (car v10442@field) v10423@port) (display '": " v10423@port) (write (cdr v10442@field) v10423@port) (newline v10423@port) (v10436@loop '#f (cdr v10439@fields-alist)))) (car v10439@fields-alist)))))) v10436@loop) '#t v10433@fields-alist))) (record-rtd v10429@x) (v10331@record->field-alist v10429@x))) (simple-conditions v10422@e))))) '#f))) (set! v10331@record->field-alist (lambda (v10446@r) ((lambda (v10449@ref) (begin (set! v10449@ref (lambda (v10460@rtd v10461@i v10462@x) ((lambda (v10466@val) (if (symbol? v10466@val) (ungensym v10466@val) v10466@val)) ((record-accessor v10460@rtd v10461@i) v10462@x)))) ((letrec ((v10450@loop (lambda (v10452@ret v10453@rtd) (if v10453@rtd (v10450@loop (append v10452@ret (v10333@map-with-index (lambda (v10456@i v10457@field) (cons v10457@field (v10449@ref v10453@rtd v10456@i v10446@r))) (vector->list (record-type-field-names v10453@rtd)))) (record-type-parent v10453@rtd)) v10452@ret)))) v10450@loop) '() (record-rtd v10446@r)))) '#f))) (set! v10333@map-with-index (lambda (v10468@proc v10469@lst) ((letrec ((v10472@loop (lambda (v10474@i v10475@lst v10476@ret) (if (null? v10475@lst) (reverse v10476@ret) (v10472@loop (+ v10474@i '1) (cdr v10475@lst) (cons (v10468@proc v10474@i (car v10475@lst)) v10476@ret)))))) v10472@loop) '0 v10469@lst '()))) (set! v10335@repl (lambda v10480@x ((lambda (v10483@rec) (begin (set! v10483@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (v10486@v10484) (lambda () (with-exception-handler (lambda (v10488@e) ((call/cc (lambda (v10490@v10485) (v10486@v10484 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? v10488@e) (v10329@condition-printer v10488@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" v10488@e))) (v10490@v10485 (lambda () (raise-continuable v10488@e)))))))))) (lambda () ((letrec ((v10492@loop (lambda (v10494@line v10495@accum) ((lambda (v10499@parentheses-ok? v10501@eval-string-print) (begin (set! v10499@parentheses-ok? (lambda (v10506@text) ((letrec ((v10508@loop (lambda (v10510@chars v10511@p0 v10512@p1) (if (null? v10510@chars) (= '0 v10511@p0 v10512@p1) ((lambda (v10516@t) (if (memv v10516@t '(#\()) (v10508@loop (cdr v10510@chars) (+ v10511@p0 '1) v10512@p1) (if (memv v10516@t '(#\))) (v10508@loop (cdr v10510@chars) (- v10511@p0 '1) v10512@p1) (if (memv v10516@t '(#\[)) (v10508@loop (cdr v10510@chars) v10511@p0 (+ v10512@p1 '1)) (if (memv v10516@t '(#\])) (v10508@loop (cdr v10510@chars) v10511@p0 (- v10512@p1 '1)) (v10508@loop (cdr v10510@chars) v10511@p0 v10512@p1)))))) (car v10510@chars)))))) v10508@loop) (string->list v10506@text) '0 '0))) (set! v10501@eval-string-print (lambda (v10504@text) (if (not (or (string=? '"\n" v10504@text) (= '0 (string-length v10504@text)))) (write (v10349@eval-top-level (call-with-port (open-string-input-port v10504@text) read))) (void)))) (if (eof-object? v10494@line) (begin (v10501@eval-string-print v10495@accum) (exit)) ((lambda (v10502@current) (if (v10499@parentheses-ok? v10502@current) (v10501@eval-string-print v10502@current) (v10492@loop (get-line (current-input-port)) v10502@current))) (string-append v10495@accum v10494@line))))) '#f '#f)))) v10492@loop) (get-line (current-input-port)) '""))))))) (newline) (v10483@rec)))) (v10483@rec))) '#f))) (set! v10337@trace-printer (v1174@v952@make-parameter write)) (set! v10339@command-line (v1174@v952@make-parameter (get-command-line))) (set! v10341@local-library-path (lambda (v10518@filename) (cons (expand-path '".") (v1784@v1421@library-path)))) (set! v10343@load/args (lambda (v10520@filename . v10522@args) (begin (apply v10359@load-r6rs-top-level v10520@filename 'load v10522@args) (void)))) (set! v10345@load (lambda (v10524@filename) (begin (apply v10359@load-r6rs-top-level v10524@filename 'load (v10339@command-line)) (void)))) (set! v10347@ironscheme-build (lambda () (v10345@load '"ironscheme-buildscript.ss"))) (set! v10349@eval-top-level (lambda (v10526@x) (v9353@v2974@eval v10526@x (v9375@v3018@interaction-environment)))) (set! v10351@compile-system-libraries (lambda () (v10349@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! v10353@compile (lambda (v10528@filename) (v10359@load-r6rs-top-level v10528@filename 'compile))) (set! v10355@compile->closure (lambda (v10530@filename) (v10359@load-r6rs-top-level v10530@filename 'closure))) (set! v10357@pre-compile-r6rs-file (lambda (v10532@filename) (v10359@load-r6rs-top-level v10532@filename 'compile))) (set! v10359@load-r6rs-top-level (lambda (v10534@filename v10535@how . v10538@args) ((lambda (v10542@v10540@library-path v10543@v10541@library-path) ((lambda (v10546@swap) (dynamic-wind v10546@swap (lambda () ((lambda (v10548@x*) ((lambda (v10550@t) (if (memv v10550@t '(closure)) (v9374@v3016@pre-compile-r6rs-top-level v10548@x*) (if (memv v10550@t '(load)) ((lambda (v10554@v10552@command-line v10555@v10553@command-line) ((lambda (v10558@swap) (dynamic-wind v10558@swap (lambda () ((v9373@v3014@compile-r6rs-top-level v10548@x*))) v10558@swap)) (lambda () ((lambda (v10560@t) (begin (v10554@v10552@command-line v10555@v10553@command-line) (set! v10555@v10553@command-line v10560@t))) (v10554@v10552@command-line))))) v10339@command-line (cons v10534@filename (car v10538@args))) (if (memv v10550@t '(compile)) (begin (v9373@v3014@compile-r6rs-top-level v10548@x*) (v1788@v1429@serialize-all v1169@v942@serialize-library v1259@v1188@compile-core-expr)) (if '#f '#f (void)))))) v10535@how)) (with-input-from-file v10534@filename (lambda () ((letrec ((v10562@f (lambda () ((lambda (v10564@x) (if (eof-object? v10564@x) '() (cons v10564@x (v10562@f)))) (v1161@v926@read-annotated))))) v10562@f)))))) v10546@swap)) (lambda () ((lambda (v10566@t) (begin (v10542@v10540@library-path v10543@v10541@library-path) (set! v10543@v10541@library-path v10566@t))) (v10542@v10540@library-path))))) v1784@v1421@library-path (v10341@local-library-path v10534@filename)))) (begin (set! v10587@v10359@load-r6rs-top-level v10359@load-r6rs-top-level) (set! v10586@v10357@pre-compile-r6rs-file v10357@pre-compile-r6rs-file) (set! v10585@v10355@compile->closure v10355@compile->closure) (set! v10584@v10353@compile v10353@compile) (set! v10583@v10351@compile-system-libraries v10351@compile-system-libraries) (set! v10582@v10349@eval-top-level v10349@eval-top-level) (set! v10581@v10347@ironscheme-build v10347@ironscheme-build) (set! v10580@v10345@load v10345@load) (set! v10579@v10343@load/args v10343@load/args) (set! v10578@v10341@local-library-path v10341@local-library-path) (set! v10577@v10339@command-line v10339@command-line) (set! v10576@v10337@trace-printer v10337@trace-printer) (set! v10575@v10335@repl v10335@repl) (set! v10574@v10333@map-with-index v10333@map-with-index) (set! v10573@v10331@record->field-alist v10331@record->field-alist) (set! v10572@v10329@condition-printer v10329@condition-printer) (set! v10571@v10327@rpad v10327@rpad) (set! v10570@v10325@for-each-with-index v10325@for-each-with-index) (set! v10569@v10323@parse-and-add-library-path v10323@parse-and-add-library-path) (set! v10568@v10321@add-library-path! v10321@add-library-path!) (v1789@v1431@current-precompiled-library-loader v1170@v944@load-serialized-library) (set-symbol-value! 'load v10345@load) (set-symbol-value! 'pre-compile-r6rs-file v10357@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs v10349@eval-top-level) (set-symbol-value! 'int-env-syms v9344@v2956@interaction-environment-symbols) (set-symbol-value! 'expanded2core v1258@v1186@expanded->core) (set-symbol-value! 'trace-printer v10337@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (v10360@c) (condition (v10158@v9662@make-non-continuable-violation) (v10148@v9637@make-who-condition 'raise) (v10088@v9480@make-message-condition '"returned from non-continuable exception") (v10138@v9611@make-irritants-condition (list v10360@c))))) (v10323@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (v10323@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (v10321@add-library-path! (string-append (mosh-executable-path) '"/lib")) (v10321@add-library-path! (string-append (current-directory) '"/lib"))) (v10321@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (v10362@prefix) (v1785@v1423@library-extensions (v10362@prefix '".mosh" (v1785@v1423@library-extensions)))) (lambda (v10364@ext v10365@ls) (append (map (lambda (v10368@x) (string-append v10364@ext v10368@x)) v10365@ls) v10365@ls))) ((lambda (v10370@args v10371@port) ((lambda (v10375@ref) (begin (set! v10375@ref (lambda (v10378@rtd v10379@i v10380@x) ((lambda (v10384@val) (if (symbol? v10384@val) (ungensym v10384@val) v10384@val)) ((record-accessor v10378@rtd v10379@i) v10380@x)))) (with-exception-handler (lambda (v10376@c) (if (condition? v10376@c) (v10329@condition-printer v10376@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" v10376@c))) (lambda () (if (null? v10370@args) (v10335@repl) (v10359@load-r6rs-top-level (car v10370@args) 'load (cdr v10370@args))))))) '#f)) (v10339@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
