;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (u917@make-gensym-counter u919@gen-sym-prefix u921@gen-sym-counter u923@gensym u925@read-annotated u927@annotation-stripped u929@annotation? u931@annotation-source u933@annotation-expression u935@scm->fasl u937@fasl-save u939@fasl-load u941@serialize-library u943@load-serialized-library u945@make-record-printer u947@compile-core u949@read-library-source-file u951@make-parameter u1051@file-options-spec) (begin (set! u917@make-gensym-counter (lambda (u1052@i) ((lambda (u1055@inc) (begin (set! u1055@inc (lambda () (begin (set! u1052@i (+ u1052@i '1)) u1052@i))) u1055@inc)) '#f))) (set! u919@gen-sym-prefix ((lambda (u1056@v) (if u1056@v (string->symbol u1056@v) 'A)) (get-environment-variable '"MOSH_GENSYM_PREFIX"))) (set! u921@gen-sym-counter (u917@make-gensym-counter '0)) (set! u923@gensym (lambda u1058@x (string->symbol (if (null? u1058@x) (format '"~a~a" u919@gen-sym-prefix (u921@gen-sym-counter)) (format '"~a~a@~a" u919@gen-sym-prefix (u921@gen-sym-counter) (car u1058@x)))))) (set! u925@read-annotated read) (set! u927@annotation-stripped (lambda (u1060@x) (u933@annotation-expression u1060@x))) (set! u929@annotation? (lambda (u1062@x) (source-info u1062@x))) (set! u931@annotation-source (lambda (u1064@x) (source-info u1064@x))) (set! u933@annotation-expression (lambda (u1066@x) (if (pair? u1066@x) (cons (car u1066@x) (cdr u1066@x)) (display '"line:46\n")))) (set! u935@scm->fasl (lambda (u1068@filename) (string-append u1068@filename '".fasl"))) (set! u937@fasl-save (lambda (u1070@filename u1071@obj) (call-with-port (open-file-output-port u1070@filename) (lambda (u1074@port) ((symbol-value 'fasl-write!) u1071@obj u1074@port))))) (set! u939@fasl-load (lambda (u1076@filename) (call-with-port (open-file-input-port u1076@filename) (symbol-value 'fasl-read!)))) (set! u941@serialize-library (lambda (u1078@filename u1079@obj) (begin (format '#t '"serialize-library ~a\n..." u1078@filename) ((lambda (u1082@expanded2core) ((lambda (u1084@compile) ((lambda (u1086@code) ((lambda (u1088@pivot) ((lambda (u1090@visit) ((lambda () (begin (set-car! u1088@pivot u1090@visit) ((lambda (u1092@pivot) ((lambda (u1094@invoke) ((lambda () (set-car! u1092@pivot u1094@invoke)))) (u1084@compile (u1082@expanded2core (car u1092@pivot))))) (cdr u1088@pivot)))))) (u1084@compile (u1082@expanded2core (car u1088@pivot))))) (cddddr (cddddr u1086@code)))) u1079@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (u1096@fasl-file) (begin (if (file-exists? u1096@fasl-file) (delete-file u1096@fasl-file) (void)) ((call/cc (lambda (u1100@u1098) (lambda () (with-exception-handler (lambda (u1102@c) ((call/cc (lambda (u1104@u1099) (u1100@u1098 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " u1078@filename) (if (file-exists? u1096@fasl-file) (delete-file u1096@fasl-file) (void)) '#f) (u1104@u1099 (lambda () (raise-continuable u1102@c)))))))))) (lambda () (begin (u937@fasl-save u1096@fasl-file u1079@obj) (display '"OK\n")))))))))) (u935@scm->fasl u1078@filename))))) (set! u943@load-serialized-library (lambda (u1106@filename u1107@obj) ((lambda (u1110@fasl-file) (if (and (file-exists? u1110@fasl-file) ((symbol-value 'file-newer?) u1110@fasl-file u1106@filename)) ((lambda (u1112@expanded2core) ((lambda (u1114@eval-compiled-core) ((lambda (u1116@code) ((lambda (u1118@pivot) ((lambda (u1120@visit) ((lambda (u1122@visit-proc) ((lambda () (begin (set-car! u1118@pivot u1122@visit-proc) ((lambda (u1124@pivot) ((lambda (u1126@invoke) ((lambda () (begin (set-car! u1124@pivot (lambda () (u1114@eval-compiled-core u1126@invoke))) (apply u1107@obj u1116@code))))) (car u1124@pivot))) (cdr u1118@pivot)) '#t)))) (lambda () (u1114@eval-compiled-core u1120@visit)))) (car u1118@pivot))) (cddddr (cddddr u1116@code)))) (u939@fasl-load u1110@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (u935@scm->fasl u1106@filename)))) (set! u945@make-record-printer (lambda (u1128@name u1129@printer) (lambda u1132@x (begin (display '"record printer") (for-each display u1132@x))))) (set! u947@compile-core (lambda u1134@x (apply error 'comile-core '"not implementated" u1134@x))) (set! u949@read-library-source-file (lambda (u1136@file-name) (with-input-from-file u1136@file-name u925@read-annotated))) (set! u951@make-parameter (lambda u1152 ((lambda (u1153) (if (= u1153 '1) (apply (lambda (u1138@x) (u951@make-parameter u1138@x (lambda (u1140@x) u1140@x))) u1152) (if (= u1153 '2) (apply (lambda (u1142@x u1143@fender) ((lambda (u1146@x) (lambda u1150 ((lambda (u1151) (if (= u1151 '0) (apply (lambda () u1146@x) u1150) (if (= u1151 '1) (apply (lambda (u1148@v) (set! u1146@x (u1143@fender u1148@v))) u1150) (error 'apply '"invalid arg count")))) (length u1150)))) (u1143@fender u1142@x))) u1152) (error 'apply '"invalid arg count")))) (length u1152)))) (set! u1051@file-options-spec (lambda (u1154@x) u1154@x)) (begin (set! u1174@u1051@file-options-spec u1051@file-options-spec) (set! u1173@u951@make-parameter u951@make-parameter) (set! u1172@u949@read-library-source-file u949@read-library-source-file) (set! u1171@u947@compile-core u947@compile-core) (set! u1170@u945@make-record-printer u945@make-record-printer) (set! u1169@u943@load-serialized-library u943@load-serialized-library) (set! u1168@u941@serialize-library u941@serialize-library) (set! u1167@u939@fasl-load u939@fasl-load) (set! u1166@u937@fasl-save u937@fasl-save) (set! u1165@u935@scm->fasl u935@scm->fasl) (set! u1164@u933@annotation-expression u933@annotation-expression) (set! u1163@u931@annotation-source u931@annotation-source) (set! u1162@u929@annotation? u929@annotation?) (set! u1161@u927@annotation-stripped u927@annotation-stripped) (set! u1160@u925@read-annotated u925@read-annotated) (set! u1159@u923@gensym u923@gensym) (set! u1158@u921@gen-sym-counter u921@gen-sym-counter) (set! u1157@u919@gen-sym-prefix u919@gen-sym-prefix) (set! u1156@u917@make-gensym-counter u917@make-gensym-counter)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (u1179@current-primitive-locations u1181@mutable? u1183@rewriter u1185@expanded->core u1187@compile-core-expr u1189@pretty-print u1191@compile-core-expr-to-port) (begin (set! u1179@current-primitive-locations (u1173@u951@make-parameter (lambda (u1192@x) '#f) (lambda (u1194@p) u1194@p))) (set! u1181@mutable? (lambda (u1196@x) (or (pair? u1196@x) (vector? u1196@x) (hashtable? u1196@x)))) (set! u1183@rewriter (lambda (u1198@quote-hack?) ((lambda (u1201@f) (begin (set! u1201@f (lambda (u1202@x) (if (pair? u1202@x) ((lambda (u1204@t) (if (memv u1204@t '(quote)) (if (and u1198@quote-hack? (u1181@mutable? (cadr u1202@x))) ((lambda (u1206@g) (begin (set-symbol-value! u1206@g (cadr u1202@x)) u1206@g)) (u1159@u923@gensym)) u1202@x) (if (memv u1204@t '(case-lambda)) (cons 'case-lambda (map (lambda (u1208@x) (cons (car u1208@x) (map u1201@f (cdr u1208@x)))) (cdr u1202@x))) (if (memv u1204@t '(lambda)) (cons* 'lambda (cadr u1202@x) (map u1201@f (cddr u1202@x))) (if (memv u1204@t '(letrec)) ((lambda (u1210@bindings u1211@body*) ((lambda (u1214@lhs* u1215@rhs*) (cons* 'letrec (map list u1214@lhs* (map u1201@f u1215@rhs*)) (map u1201@f u1211@body*))) (map car u1210@bindings) (map cadr u1210@bindings))) (cadr u1202@x) (cddr u1202@x)) (if (memv u1204@t '(letrec*)) ((lambda (u1218@bindings u1219@body*) ((lambda (u1222@lhs* u1223@rhs*) (cons* 'letrec* (map list u1222@lhs* (map u1201@f u1223@rhs*)) (map u1201@f u1219@body*))) (map car u1218@bindings) (map cadr u1218@bindings))) (cadr u1202@x) (cddr u1202@x)) (if (memv u1204@t '(library-letrec*)) ((lambda (u1226@name u1227@x) ((lambda (u1230@bindings u1231@body*) ((lambda (u1234@lhs* u1235@lhs** u1236@rhs*) (cons* 'library-letrec* u1226@name (map list u1234@lhs* u1235@lhs** (map u1201@f u1236@rhs*)) (map u1201@f u1231@body*))) (map car u1230@bindings) (map cadr u1230@bindings) (map caddr u1230@bindings))) (cadr u1227@x) (cddr u1227@x))) (cadr u1202@x) (cdr u1202@x)) (if (memv u1204@t '(begin)) (cons 'begin (map u1201@f (cdr u1202@x))) (if (memv u1204@t '(set!)) (list 'set! (cadr u1202@x) (u1201@f (caddr u1202@x))) (if (memv u1204@t '(primitive)) ((lambda (u1240@op) ((lambda (u1242@t) (if u1242@t ((lambda (u1244@loc) u1244@loc) u1242@t) u1240@op)) ((u1179@current-primitive-locations) u1240@op))) (cadr u1202@x)) (if (memv u1204@t '(define)) u1202@x (if (list? u1202@x) (map u1201@f u1202@x) (error 'rewrite '"invalid form ~s ~s" u1202@x (list? u1202@x)))))))))))))) (car u1202@x)) u1202@x))) u1201@f)) '#f))) (set! u1185@expanded->core (lambda (u1246@x) ((u1183@rewriter '#f) u1246@x))) (set! u1187@compile-core-expr (lambda (u1248@x) ((u1183@rewriter '#f) u1248@x))) (set! u1189@pretty-print write) (set! u1191@compile-core-expr-to-port (lambda (u1250@x u1251@p) (u1189@pretty-print ((u1183@rewriter '#f) u1250@x) u1251@p))) (begin (set! u1260@u1191@compile-core-expr-to-port u1191@compile-core-expr-to-port) (set! u1259@u1189@pretty-print u1189@pretty-print) (set! u1258@u1187@compile-core-expr u1187@compile-core-expr) (set! u1257@u1185@expanded->core u1185@expanded->core) (set! u1256@u1183@rewriter u1183@rewriter) (set! u1255@u1181@mutable? u1181@mutable?) (set! u1254@u1179@current-primitive-locations u1179@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (u1339@make-collection u1341@current-library-collection u1347@u1342 u1349@u1344 u1351@u1343 u1354@library? u1356@make-library u1358@library-id u1360@library-name u1362@library-version u1364@library-imp* u1366@library-vis* u1368@library-inv* u1370@library-subst u1372@library-env u1374@library-visit-state u1376@library-invoke-state u1378@library-visit-code u1380@library-invoke-code u1382@library-visible? u1384@library-source-file-name u1386@set-library-id! u1388@set-library-name! u1390@set-library-version! u1392@set-library-imp*! u1394@set-library-vis*! u1396@set-library-inv*! u1398@set-library-subst! u1400@set-library-env! u1402@set-library-visit-state! u1404@set-library-invoke-state! u1406@set-library-visit-code! u1408@set-library-invoke-code! u1410@set-library-visible?! u1412@set-library-source-file-name! u1414@rp u1416@find-dependencies u1418@find-library-by u1420@library-path u1422@library-extensions u1424@library-name->file-name u1426@file-locator u1428@serialize-all u1430@current-precompiled-library-loader u1432@try-load-from-file u1434@library-loader u1436@current-library-expander u1438@external-pending-libraries u1440@find-external-library u1442@find-library-by-name u1444@library-exists? u1446@find-library-by-spec/die u1448@label->binding-table u1450@install-library-record u1452@install-library u1454@imported-label->binding u1456@invoke-library u1458@visit-library u1460@invoke-library-by-spec u1462@installed-libraries u1464@library-spec) (begin (set! u1339@make-collection (lambda () ((lambda (u1465@set) ((lambda (u1468@set-cons) (begin (set! u1468@set-cons (lambda (u1473@x u1474@ls) (if (memq u1473@x u1474@ls) u1474@ls (cons u1473@x u1474@ls)))) (lambda u1471 ((lambda (u1472) (if (= u1472 '0) (apply (lambda () u1465@set) u1471) (if (= u1472 '1) (apply (lambda (u1469@x) (set! u1465@set (u1468@set-cons u1469@x u1465@set))) u1471) (error 'apply '"invalid arg count")))) (length u1471))))) '#f)) '()))) (set! u1341@current-library-collection (u1173@u951@make-parameter (u1339@make-collection) (lambda (u1477@x) (begin (if (not (procedure? u1477@x)) (assertion-violation 'current-library-collection '"not a procedure" u1477@x) (void)) u1477@x)))) (set! u1347@u1342 (make-record-type-descriptor 'library '#f 'u1345 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! u1349@u1344 '#f) (set! u1351@u1343 (make-record-constructor-descriptor u1347@u1342 '#f u1349@u1344)) (set! u1354@library? (record-predicate u1347@u1342)) (set! u1356@make-library (record-constructor u1351@u1343)) (set! u1358@library-id (record-accessor u1347@u1342 '0)) (set! u1360@library-name (record-accessor u1347@u1342 '1)) (set! u1362@library-version (record-accessor u1347@u1342 '2)) (set! u1364@library-imp* (record-accessor u1347@u1342 '3)) (set! u1366@library-vis* (record-accessor u1347@u1342 '4)) (set! u1368@library-inv* (record-accessor u1347@u1342 '5)) (set! u1370@library-subst (record-accessor u1347@u1342 '6)) (set! u1372@library-env (record-accessor u1347@u1342 '7)) (set! u1374@library-visit-state (record-accessor u1347@u1342 '8)) (set! u1376@library-invoke-state (record-accessor u1347@u1342 '9)) (set! u1378@library-visit-code (record-accessor u1347@u1342 '10)) (set! u1380@library-invoke-code (record-accessor u1347@u1342 '11)) (set! u1382@library-visible? (record-accessor u1347@u1342 '12)) (set! u1384@library-source-file-name (record-accessor u1347@u1342 '13)) (set! u1386@set-library-id! (record-mutator u1347@u1342 '0)) (set! u1388@set-library-name! (record-mutator u1347@u1342 '1)) (set! u1390@set-library-version! (record-mutator u1347@u1342 '2)) (set! u1392@set-library-imp*! (record-mutator u1347@u1342 '3)) (set! u1394@set-library-vis*! (record-mutator u1347@u1342 '4)) (set! u1396@set-library-inv*! (record-mutator u1347@u1342 '5)) (set! u1398@set-library-subst! (record-mutator u1347@u1342 '6)) (set! u1400@set-library-env! (record-mutator u1347@u1342 '7)) (set! u1402@set-library-visit-state! (record-mutator u1347@u1342 '8)) (set! u1404@set-library-invoke-state! (record-mutator u1347@u1342 '9)) (set! u1406@set-library-visit-code! (record-mutator u1347@u1342 '10)) (set! u1408@set-library-invoke-code! (record-mutator u1347@u1342 '11)) (set! u1410@set-library-visible?! (record-mutator u1347@u1342 '12)) (set! u1412@set-library-source-file-name! (record-mutator u1347@u1342 '13)) (set! u1414@rp (u1170@u945@make-record-printer 'library (lambda (u1479@x u1480@p u1481@wr) (begin (if (not (u1354@library? u1479@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (u1362@library-version u1479@x)) (u1360@library-name u1479@x) (append (u1360@library-name u1479@x) (list (u1362@library-version u1479@x))))) u1480@p))))) (set! u1416@find-dependencies (lambda (u1485@ls) (if (null? u1485@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! u1418@find-library-by (lambda (u1487@pred) ((letrec ((u1489@f (lambda (u1491@ls) (if (null? u1491@ls) '#f (if (u1487@pred (car u1491@ls)) (car u1491@ls) (u1489@f (cdr u1491@ls))))))) u1489@f) ((u1341@current-library-collection))))) (set! u1420@library-path (u1173@u951@make-parameter '(".") (lambda (u1493@x) (if (and (list? u1493@x) (for-all string? u1493@x)) (map (lambda (u1495@x) u1495@x) u1493@x) (assertion-violation 'library-path '"not a list of strings" u1493@x))))) (set! u1422@library-extensions (u1173@u951@make-parameter '(".sls" ".ss" ".scm") (lambda (u1497@x) (if (and (list? u1497@x) (for-all string? u1497@x)) (map (lambda (u1499@x) u1499@x) u1497@x) (assertion-violation 'library-extensions '"not a list of strings" u1497@x))))) (set! u1424@library-name->file-name (lambda (u1501@x) (call-with-values (lambda () (open-string-output-port)) (lambda (u1505@u1503@p u1506@u1504@extract) ((lambda (u1509@extract u1510@p) ((lambda (u1514@display-hex) (begin (set! u1514@display-hex (lambda (u1523@n) (if (<= '0 u1523@n '9) (display u1523@n u1510@p) (display (integer->char (+ (char->integer '#\a) (- u1523@n '10))) u1510@p)))) (begin ((letrec ((u1515@f (lambda (u1517@ls) (if (not (null? u1517@ls)) (begin (display '"/" u1510@p) (for-each (lambda (u1519@c) (if (or (char<=? '#\a u1519@c '#\z) (char<=? '#\A u1519@c '#\Z) (char<=? '#\0 u1519@c '#\9) (memv u1519@c '(#\- #\. #\_ #\~))) (display u1519@c u1510@p) (begin (display '"%" u1510@p) ((lambda (u1521@n) (begin (u1514@display-hex (quotient u1521@n '16)) (u1514@display-hex (remainder u1521@n '16)))) (char->integer u1519@c))))) (string->list (symbol->string (car u1517@ls)))) (u1515@f (cdr u1517@ls))) (void))))) u1515@f) u1501@x) (u1509@extract)))) '#f)) u1506@u1504@extract u1505@u1503@p))))) (set! u1426@file-locator (u1173@u951@make-parameter (lambda (u1525@x) ((lambda (u1527@str) ((letrec ((u1529@f (lambda (u1531@ls u1532@exts u1533@failed-list) (if (null? u1531@ls) ((lambda () ((lambda (u1545@u1540 u1547@u1542 u1549@u1541 u1552@u1539 u1554@make-library-resolution-condition u1556@u1537 u1558@u1538 u1560@library-resolution-condition? u1562@condition-library u1564@condition-files) (begin (set! u1545@u1540 (make-record-type-descriptor '&library-resolution u10081@u9396@&condition-rtd 'u1543 '#f '#f '#((immutable library) (immutable files)))) (set! u1547@u1542 '#f) (set! u1549@u1541 (make-record-constructor-descriptor u1545@u1540 u10082@u9398@&condition-rcd u1547@u1542)) (set! u1552@u1539 (record-predicate u1545@u1540)) (set! u1554@make-library-resolution-condition (record-constructor u1549@u1541)) (set! u1556@u1537 (record-accessor u1545@u1540 '0)) (set! u1558@u1538 (record-accessor u1545@u1540 '1)) (set! u1560@library-resolution-condition? (condition-predicate u1545@u1540)) (set! u1562@condition-library (condition-accessor u1545@u1540 u1556@u1537)) (set! u1564@condition-files (condition-accessor u1545@u1540 u1558@u1538)) (raise (condition (u10113@u9546@make-error) (u10147@u9636@make-who-condition 'expander) (u10087@u9479@make-message-condition '"cannot locate library in library-path") (u1554@make-library-resolution-condition u1525@x (reverse u1533@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? u1532@exts) (u1529@f (cdr u1531@ls) (u1422@library-extensions) u1533@failed-list) ((lambda (u1565@name) (if (file-exists? u1565@name) u1565@name (u1529@f u1531@ls (cdr u1532@exts) (cons u1565@name u1533@failed-list)))) (string-append (car u1531@ls) u1527@str (car u1532@exts)))))))) u1529@f) (u1420@library-path) (u1422@library-extensions) '())) (u1424@library-name->file-name u1525@x))) (lambda (u1567@f) (if (procedure? u1567@f) u1567@f (assertion-violation 'file-locator '"not a procedure" u1567@f))))) (set! u1428@serialize-all (lambda (u1569@serialize u1570@compile) ((lambda (u1574@library-desc) (begin (set! u1574@library-desc (lambda (u1577@x) (list (u1358@library-id u1577@x) (u1360@library-name u1577@x)))) (for-each (lambda (u1575@x) (if (u1384@library-source-file-name u1575@x) (u1569@serialize (u1384@library-source-file-name u1575@x) (list (u1358@library-id u1575@x) (u1360@library-name u1575@x) (u1362@library-version u1575@x) (map u1574@library-desc (u1364@library-imp* u1575@x)) (map u1574@library-desc (u1366@library-vis* u1575@x)) (map u1574@library-desc (u1368@library-inv* u1575@x)) (u1370@library-subst u1575@x) (u1372@library-env u1575@x) (u1570@compile (u1378@library-visit-code u1575@x)) (u1570@compile (u1380@library-invoke-code u1575@x)) (u1382@library-visible? u1575@x))) (void))) ((u1341@current-library-collection))))) '#f))) (set! u1430@current-precompiled-library-loader (u1173@u951@make-parameter (lambda (u1579@filename u1580@sk) '#f))) (set! u1432@try-load-from-file (lambda (u1583@filename) ((u1430@current-precompiled-library-loader) u1583@filename (lambda u1621 ((lambda (u1622) (if (= u1622 '11) (apply (lambda (u1585@id u1586@name u1587@ver u1588@imp* u1589@vis* u1590@inv* u1591@exp-subst u1592@exp-env u1593@visit-proc u1594@invoke-proc u1595@visible?) ((letrec ((u1607@f (lambda (u1609@deps) (if (null? u1609@deps) (begin (u1452@install-library u1585@id u1586@name u1587@ver u1588@imp* u1589@vis* u1590@inv* u1591@exp-subst u1592@exp-env u1593@visit-proc u1594@invoke-proc '#f '#f u1595@visible? '#f) '#t) ((lambda (u1611@d) ((lambda (u1613@label u1614@dname) ((lambda (u1617@l) (if (and (u1354@library? u1617@l) (eq? u1613@label (u1358@library-id u1617@l))) (u1607@f (cdr u1609@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" u1586@name u1614@dname u1583@filename u1617@l u1613@label (u1358@library-id u1617@l)) '#f))) (u1442@find-library-by-name u1614@dname))) (car u1611@d) (cadr u1611@d))) (car u1609@deps)))))) u1607@f) (append u1588@imp* u1589@vis* u1590@inv*))) u1621) (if (>= u1622 '0) (apply (lambda u1619@others '#f) u1621) (error 'apply '"invalid arg count")))) (length u1621)))))) (set! u1434@library-loader (u1173@u951@make-parameter (lambda (u1623@x) ((lambda (u1625@file-name) (if (not u1625@file-name) (assertion-violation '#f '"cannot file library" u1623@x) (or (u1432@try-load-from-file u1625@file-name) ((u1436@current-library-expander) (u1172@u949@read-library-source-file u1625@file-name) u1625@file-name (lambda (u1627@name) (if (not (fast-equal? u1627@name u1623@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (u1631@u1629@p u1632@u1630@e) ((lambda (u1635@e u1636@p) (begin (display '"expected to find library " u1636@p) (write u1623@x u1636@p) (display '" in file " u1636@p) (display u1625@file-name u1636@p) (display '", found " u1636@p) (write u1627@name u1636@p) (display '" instead" u1636@p) (u1635@e))) u1632@u1630@e u1631@u1629@p)))) (void))))))) ((u1426@file-locator) u1623@x))) (lambda (u1639@f) (if (procedure? u1639@f) u1639@f (assertion-violation 'library-locator '"not a procedure" u1639@f))))) (set! u1436@current-library-expander (u1173@u951@make-parameter (lambda (u1641@x) (assertion-violation 'library-expander '"not initialized")) (lambda (u1643@f) (if (procedure? u1643@f) u1643@f (assertion-violation 'library-expander '"not a procedure" u1643@f))))) (set! u1438@external-pending-libraries (u1173@u951@make-parameter '())) (set! u1440@find-external-library (lambda (u1645@name) (begin (if (member u1645@name (u1438@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" u1645@name) (void)) ((lambda (u1649@u1647@external-pending-libraries u1650@u1648@external-pending-libraries) ((lambda (u1653@swap) (dynamic-wind u1653@swap (lambda () (begin ((u1434@library-loader) u1645@name) (or (u1418@find-library-by (lambda (u1655@x) (fast-equal? (u1360@library-name u1655@x) u1645@name))) (assertion-violation '#f '"handling external library did not yield the correct library" u1645@name)))) u1653@swap)) (lambda () ((lambda (u1657@t) (begin (u1649@u1647@external-pending-libraries u1650@u1648@external-pending-libraries) (set! u1650@u1648@external-pending-libraries u1657@t))) (u1649@u1647@external-pending-libraries))))) u1438@external-pending-libraries (cons u1645@name (u1438@external-pending-libraries)))))) (set! u1442@find-library-by-name (lambda (u1659@name) (or (u1418@find-library-by (lambda (u1661@x) (fast-equal? (u1360@library-name u1661@x) u1659@name))) (u1440@find-external-library u1659@name)))) (set! u1444@library-exists? (lambda (u1663@name) (and (u1418@find-library-by (lambda (u1665@x) (fast-equal? (u1360@library-name u1665@x) u1663@name))) '#t))) (set! u1446@find-library-by-spec/die (lambda (u1667@spec) ((lambda (u1669@id) (or (u1418@find-library-by (lambda (u1671@x) (eq? u1669@id (u1358@library-id u1671@x)))) (assertion-violation '#f '"cannot find library with required spec" u1667@spec))) (car u1667@spec)))) (set! u1448@label->binding-table (make-eq-hashtable)) (set! u1450@install-library-record (lambda (u1673@lib) (begin ((lambda (u1675@exp-env) (for-each (lambda (u1677@x) ((lambda (u1679@label u1680@binding) ((lambda (u1683@binding) (begin (if (hashtable-ref u1448@label->binding-table u1679@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" u1679@label (hashtable-ref u1448@label->binding-table u1679@label '#f) u1683@binding) (exit)) (void)) (hashtable-set! u1448@label->binding-table u1679@label u1683@binding))) ((lambda (u1685@t) (if (memv u1685@t '(global)) (cons 'global (cons u1673@lib (cdr u1680@binding))) (if (memv u1685@t '(global-macro)) (cons 'global-macro (cons u1673@lib (cdr u1680@binding))) (if (memv u1685@t '(global-macro!)) (cons 'global-macro! (cons u1673@lib (cdr u1680@binding))) u1680@binding)))) (car u1680@binding)))) (car u1677@x) (cdr u1677@x))) u1675@exp-env)) (u1372@library-env u1673@lib)) ((u1341@current-library-collection) u1673@lib)))) (set! u1452@install-library (lambda (u1687@id u1688@name u1689@ver u1690@imp* u1691@vis* u1692@inv* u1693@exp-subst u1694@exp-env u1695@visit-proc u1696@invoke-proc u1697@visit-code u1698@invoke-code u1699@visible? u1700@source-file-name) ((lambda (u1715@imp-lib* u1716@vis-lib* u1717@inv-lib*) (begin (if (not (and (symbol? u1687@id) (list? u1688@name) (list? u1689@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" u1687@id u1688@name u1689@ver) (void)) (if (u1444@library-exists? u1688@name) (assertion-violation 'install-library '"library is already installed" u1688@name) (void)) ((lambda (u1721@lib) (u1450@install-library-record u1721@lib)) (u1356@make-library u1687@id u1688@name u1689@ver u1715@imp-lib* u1716@vis-lib* u1717@inv-lib* u1693@exp-subst u1694@exp-env u1695@visit-proc u1696@invoke-proc u1697@visit-code u1698@invoke-code u1699@visible? u1700@source-file-name)))) (map u1446@find-library-by-spec/die u1690@imp*) (map u1446@find-library-by-spec/die u1691@vis*) (map u1446@find-library-by-spec/die u1692@inv*)))) (set! u1454@imported-label->binding (lambda (u1723@lab) (hashtable-ref u1448@label->binding-table u1723@lab '#f))) (set! u1456@invoke-library (lambda (u1725@lib) ((lambda (u1727@invoke) (if (procedure? u1727@invoke) (begin (u1404@set-library-invoke-state! u1725@lib (lambda () (assertion-violation 'invoke '"circularity detected" u1725@lib))) (for-each u1456@invoke-library (u1368@library-inv* u1725@lib)) (u1404@set-library-invoke-state! u1725@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" u1725@lib))) (u1727@invoke) (u1404@set-library-invoke-state! u1725@lib '#t)) (void))) (u1376@library-invoke-state u1725@lib)))) (set! u1458@visit-library (lambda (u1729@lib) ((lambda (u1731@visit) (if (procedure? u1731@visit) (begin (u1402@set-library-visit-state! u1729@lib (lambda () (assertion-violation 'visit '"circularity detected" u1729@lib))) (for-each u1456@invoke-library (u1366@library-vis* u1729@lib)) (u1402@set-library-visit-state! u1729@lib (lambda () (assertion-violation 'invoke '"first visit did not return" u1729@lib))) (u1731@visit) (u1402@set-library-visit-state! u1729@lib '#t)) (void))) (u1374@library-visit-state u1729@lib)))) (set! u1460@invoke-library-by-spec (lambda (u1733@spec) (u1456@invoke-library (u1446@find-library-by-spec/die u1733@spec)))) (set! u1462@installed-libraries (lambda u1741 ((lambda (u1742) (if (= u1742 '1) (apply (lambda (u1735@all?) ((letrec ((u1737@f (lambda (u1739@ls) (if (null? u1739@ls) '() (if (or u1735@all? (u1382@library-visible? (car u1739@ls))) (cons (car u1739@ls) (u1737@f (cdr u1739@ls))) (u1737@f (cdr u1739@ls))))))) u1737@f) ((u1341@current-library-collection)))) u1741) (if (= u1742 '0) (apply (lambda () (u1462@installed-libraries '#f)) u1741) (error 'apply '"invalid arg count")))) (length u1741)))) (set! u1464@library-spec (lambda (u1743@x) (begin (if (not (u1354@library? u1743@x)) (assertion-violation 'library-spec '"not a library" u1743@x) (void)) (list (u1358@library-id u1743@x) (u1360@library-name u1743@x) (u1362@library-version u1743@x))))) (begin (set! u1805@u1464@library-spec u1464@library-spec) (set! u1804@u1462@installed-libraries u1462@installed-libraries) (set! u1803@u1460@invoke-library-by-spec u1460@invoke-library-by-spec) (set! u1802@u1458@visit-library u1458@visit-library) (set! u1801@u1456@invoke-library u1456@invoke-library) (set! u1800@u1454@imported-label->binding u1454@imported-label->binding) (set! u1799@u1452@install-library u1452@install-library) (set! u1798@u1450@install-library-record u1450@install-library-record) (set! u1797@u1448@label->binding-table u1448@label->binding-table) (set! u1796@u1446@find-library-by-spec/die u1446@find-library-by-spec/die) (set! u1795@u1444@library-exists? u1444@library-exists?) (set! u1794@u1442@find-library-by-name u1442@find-library-by-name) (set! u1793@u1440@find-external-library u1440@find-external-library) (set! u1792@u1438@external-pending-libraries u1438@external-pending-libraries) (set! u1791@u1436@current-library-expander u1436@current-library-expander) (set! u1790@u1434@library-loader u1434@library-loader) (set! u1789@u1432@try-load-from-file u1432@try-load-from-file) (set! u1788@u1430@current-precompiled-library-loader u1430@current-precompiled-library-loader) (set! u1787@u1428@serialize-all u1428@serialize-all) (set! u1786@u1426@file-locator u1426@file-locator) (set! u1785@u1424@library-name->file-name u1424@library-name->file-name) (set! u1784@u1422@library-extensions u1422@library-extensions) (set! u1783@u1420@library-path u1420@library-path) (set! u1782@u1418@find-library-by u1418@find-library-by) (set! u1781@u1416@find-dependencies u1416@find-dependencies) (set! u1780@u1414@rp u1414@rp) (set! u1779@u1412@set-library-source-file-name! u1412@set-library-source-file-name!) (set! u1778@u1410@set-library-visible?! u1410@set-library-visible?!) (set! u1777@u1408@set-library-invoke-code! u1408@set-library-invoke-code!) (set! u1776@u1406@set-library-visit-code! u1406@set-library-visit-code!) (set! u1775@u1404@set-library-invoke-state! u1404@set-library-invoke-state!) (set! u1774@u1402@set-library-visit-state! u1402@set-library-visit-state!) (set! u1773@u1400@set-library-env! u1400@set-library-env!) (set! u1772@u1398@set-library-subst! u1398@set-library-subst!) (set! u1771@u1396@set-library-inv*! u1396@set-library-inv*!) (set! u1770@u1394@set-library-vis*! u1394@set-library-vis*!) (set! u1769@u1392@set-library-imp*! u1392@set-library-imp*!) (set! u1768@u1390@set-library-version! u1390@set-library-version!) (set! u1767@u1388@set-library-name! u1388@set-library-name!) (set! u1766@u1386@set-library-id! u1386@set-library-id!) (set! u1765@u1384@library-source-file-name u1384@library-source-file-name) (set! u1764@u1382@library-visible? u1382@library-visible?) (set! u1763@u1380@library-invoke-code u1380@library-invoke-code) (set! u1762@u1378@library-visit-code u1378@library-visit-code) (set! u1761@u1376@library-invoke-state u1376@library-invoke-state) (set! u1760@u1374@library-visit-state u1374@library-visit-state) (set! u1759@u1372@library-env u1372@library-env) (set! u1758@u1370@library-subst u1370@library-subst) (set! u1757@u1368@library-inv* u1368@library-inv*) (set! u1756@u1366@library-vis* u1366@library-vis*) (set! u1755@u1364@library-imp* u1364@library-imp*) (set! u1754@u1362@library-version u1362@library-version) (set! u1753@u1360@library-name u1360@library-name) (set! u1752@u1358@library-id u1358@library-id) (set! u1751@u1356@make-library u1356@make-library) (set! u1750@u1354@library? u1354@library?) (set! u1749@u1351@u1343 u1351@u1343) (set! u1748@u1349@u1344 u1349@u1344) (set! u1747@u1347@u1342 u1347@u1342) (set! u1746@u1341@current-library-collection u1341@current-library-collection) (set! u1745@u1339@make-collection u1339@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (u1808@build-global-define u1921@build-lambda u1923@build-case-lambda u1925@build-let u1971@build-sequence u1973@build-void u1975@build-letrec u1977@build-letrec* u1979@build-library-letrec* u1981@build-receive) (begin (set! u1808@build-global-define (lambda (u1982@x) (u1973@build-void))) (set! u1921@build-lambda (lambda (u1984@ae u1985@vars u1986@exp) (list 'lambda u1985@vars u1986@exp))) (set! u1923@build-case-lambda (lambda (u1990@ae u1991@vars* u1992@exp*) ((lambda (u1997@build-error u1999@build-pred u2001@build-apply u2003@expand-case-lambda) (begin (set! u1997@build-error (lambda (u2050@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! u1999@build-pred (lambda (u2028@ae u2029@n u2030@vars) (call-with-values (lambda () ((letrec ((u2036@f (lambda (u2038@vars u2039@count) (if (pair? u2038@vars) (u2036@f (cdr u2038@vars) (+ u2039@count '1)) (if (null? u2038@vars) (values u2039@count '=) (values u2039@count '>=)))))) u2036@f) u2030@vars '0)) (lambda (u2042@u2034@count u2043@u2035@pred) ((lambda (u2046@pred u2047@count) (list (list 'primitive u2046@pred) u2029@n (list 'quote u2047@count))) u2043@u2035@pred u2042@u2034@count))))) (set! u2001@build-apply (lambda (u2020@ae u2021@g u2022@vars u2023@exp) (list '(primitive apply) (u1921@build-lambda u2020@ae u2022@vars u2023@exp) u2021@g))) (set! u2003@expand-case-lambda (lambda (u2004@ae u2005@vars u2006@exp*) ((lambda (u2010@g u2011@n) (list 'lambda u2010@g (u1925@build-let u2004@ae (list u2011@n) (list (list '(primitive length) u2010@g)) ((letrec ((u2014@f (lambda (u2016@vars* u2017@exp*) (if (null? u2016@vars*) (u1997@build-error u2004@ae) (list 'if (u1999@build-pred u2004@ae u2011@n (car u2016@vars*)) (u2001@build-apply u2004@ae u2010@g (car u2016@vars*) (car u2017@exp*)) (u2014@f (cdr u2016@vars*) (cdr u2017@exp*))))))) u2014@f) u1991@vars* u2006@exp*)))) (u1159@u923@gensym) (u1159@u923@gensym)))) (if (= (length u1992@exp*) '1) (u1921@build-lambda u1990@ae (car u1991@vars*) (car u1992@exp*)) (u2003@expand-case-lambda u1990@ae u1991@vars* u1992@exp*)))) '#f '#f '#f '#f))) (set! u1925@build-let (lambda (u2052@ae u2053@lhs* u2054@rhs* u2055@body) (cons (u1921@build-lambda u2052@ae u2053@lhs* u2055@body) u2054@rhs*))) (set! u1971@build-sequence (lambda (u2060@ae u2061@exps) ((letrec ((u2064@loop (lambda (u2066@exps) (if (null? (cdr u2066@exps)) (car u2066@exps) (if (equal? (car u2066@exps) (u1973@build-void)) (u2064@loop (cdr u2066@exps)) (cons 'begin u2066@exps)))))) u2064@loop) u2061@exps))) (set! u1973@build-void (lambda () '((primitive void)))) (set! u1975@build-letrec (lambda (u2068@ae u2069@vars u2070@val-exps u2071@body-exp) (if (null? u2069@vars) u2071@body-exp (list 'letrec (map list u2069@vars u2070@val-exps) u2071@body-exp)))) (set! u1977@build-letrec* (lambda (u2076@ae u2077@vars u2078@val-exps u2079@body-exp) (if (null? u2077@vars) u2079@body-exp (u1925@build-let u2076@ae u2077@vars (map (lambda (u2084@x) (list 'quote '#f)) u2077@vars) (u1971@build-sequence u2076@ae (append (map (lambda (u2086@lhs u2087@rhs) (list 'set! u2086@lhs u2087@rhs)) u2077@vars u2078@val-exps) (list u2079@body-exp))))))) (set! u1979@build-library-letrec* (lambda (u2090@ae u2091@name u2092@vars u2093@locs u2094@val-exps u2095@body-exp) (list 'library-letrec* u2091@name (map list u2092@vars u2093@locs u2094@val-exps) u2095@body-exp))) (set! u1981@build-receive (lambda (u2102@ae u2103@vars u2104@producer u2105@body*) (begin (display '"************** in ") (cons 'receive (cons u2103@vars (cons u2104@producer u2105@body*)))))) (begin (set! u2119@u1981@build-receive u1981@build-receive) (set! u2118@u1979@build-library-letrec* u1979@build-library-letrec*) (set! u2117@u1977@build-letrec* u1977@build-letrec*) (set! u2116@u1975@build-letrec u1975@build-letrec) (set! u2115@u1973@build-void u1973@build-void) (set! u2114@u1971@build-sequence u1971@build-sequence) (set! u2113@u1925@build-let u1925@build-let) (set! u2112@u1923@build-case-lambda u1923@build-case-lambda) (set! u2111@u1921@build-lambda u1921@build-lambda) (set! u2110@u1808@build-global-define u1808@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (u2134@file-options-macro u2136@set-cons u2138@set-union u2143@top-mark* u2145@top-marked? u2147@gen-lexical u2149@gen-global u2151@gen-label u2153@gen-top-level-label u2155@gen-define-label+loc u2157@gen-define-label u2163@u2158 u2165@u2160 u2167@u2159 u2170@rib? u2172@make-rib u2174@rib-sym* u2176@rib-mark** u2178@rib-label* u2180@rib-sealed/freq u2182@rib-cache u2184@set-rib-sym*! u2186@set-rib-mark**! u2188@set-rib-label*! u2190@set-rib-sealed/freq! u2192@set-rib-cache! u2194@make-empty-rib u2196@extend-rib! u2198@extend-rib/nc! u2200@make-rib-map u2202@seal-rib! u2204@unseal-rib! u2206@make-full-rib u2212@u2207 u2214@u2209 u2216@u2208 u2219@stx? u2221@make-stx u2223@stx-expr u2225@stx-mark* u2227@stx-subst* u2229@stx-ae* u2231@set-stx-expr! u2233@set-stx-mark*! u2235@set-stx-subst*! u2237@set-stx-ae*! u2239@rp u2241@datum->stx u2243@gen-mark u2245@anti-mark u2247@anti-mark? u2249@join-wraps u2251@mkstx u2253@add-mark u2255@add-subst u2257@syntax-kind? u2259@syntax-vector->list u2261@syntax-pair? u2263@syntax-vector? u2265@syntax-null? u2267@syntax-list? u2269@syntax-car u2271@syntax-cdr u2273@syntax->list u2275@id? u2277@id->sym u2279@same-marks? u2281@bound-id=? u2283@free-id=? u2285@valid-bound-ids? u2287@distinct-bound-ids? u2289@bound-id-member? u2291@self-evaluating? u2293@strip-annotations u2295@strip u2297@stx->datum u2299@same-marks*? u2301@id->label u2303@id->real-label u2305@label->binding u2307@make-binding u2309@binding-type u2311@binding-value u2313@raise-unbound-error u2315@syntax-type u2329@sanitize-binding u2331@make-variable-transformer u2333@variable-transformer? u2335@variable-transformer-procedure u2337@make-eval-transformer u2648@parse-define u2650@parse-define-syntax u2652@scheme-stx-hashtable u2654@scheme-stx u2656@lexical-var u2658@lexical-mutable? u2660@set-lexical-mutable! u2662@add-lexical u2664@add-lexicals u2666@letrec-helper u2668@letrec-transformer u2670@letrec*-transformer u2672@fluid-let-syntax-transformer u2674@type-descriptor-transformer u2676@record-type-descriptor-transformer u2678@record-constructor-descriptor-transformer u2680@when-macro u2682@unless-macro u2684@if-transformer u2686@and-transformer u2688@or-transformer u2690@case-macro u2692@quote-transformer u2694@case-lambda-transformer u2696@lambda-transformer u2698@bless u2700@with-syntax-macro u2702@invalid-fmls-error u2704@let-macro u2706@let-values-macro u2708@let*-values-macro u2710@trace-lambda-macro u2712@trace-define-macro u2714@trace-define-syntax-macro u2716@trace-let/rec-syntax u2718@trace-let-syntax-macro u2720@trace-letrec-syntax-macro u2722@guard-macro u2724@define-enumeration-macro u2726@time-macro u2728@delay-macro u2730@assert-macro u2732@endianness-macro u2734@identifier-syntax-macro u2736@do-macro u2738@let*-macro u2740@or-macro u2742@and-macro u2744@cond-macro u2746@do-include u2748@include-macro u2750@include-into-macro u2752@syntax-rules-macro u2754@quasiquote-macro u2756@quasisyntax-macro u2758@define-struct-macro u2760@define-record-type-macro u2762@define-condition-type-macro u2764@incorrect-usage-macro u2766@parameterize-macro u2768@foreign-call-transformer u2770@convert-pattern u2772@syntax-dispatch u2774@ellipsis? u2776@underscore? u2778@verify-literals u2780@syntax-case-transformer u2782@ellipsis-map u2784@syntax-transformer u2786@core-macro-transformer u2788@symbol-macro u2790@macro-transformer u2792@local-macro-transformer u2794@do-macro-call u2796@chi-macro u2798@chi-local-macro u2800@chi-global-macro u2802@chi-expr* u2804@chi-application u2806@chi-expr u2808@chi-set! u2810@verify-formals u2812@chi-lambda-clause u2814@chi-lambda-clause* u2816@chi-defun u2818@chi-rhs u2820@expand-interaction-rhs*/init* u2822@chi-rhs* u2824@find-bound=? u2826@find-dups u2828@chi-internal u2830@parse-module u2836@u2831 u2838@u2833 u2840@u2832 u2843@module-interface? u2845@make-module-interface u2847@module-interface-first-mark u2849@module-interface-exp-id-vec u2851@module-interface-exp-lab-vec u2853@set-module-interface-first-mark! u2855@set-module-interface-exp-id-vec! u2857@set-module-interface-exp-lab-vec! u2859@module-interface-exp-id* u2861@chi-internal-module u2863@chi-body* u2865@expand-transformer u2867@parse-exports u2869@parse-library-name u2871@parse-library u2873@parse-import-spec* u2875@make-top-rib u2877@make-collector u2879@inv-collector u2881@vis-collector u2883@imp-collector u2885@chi-library-internal u2887@chi-interaction-expr u2889@library-body-expander u2891@core-library-expander u2893@parse-top-level-program u2895@top-level-expander u2901@u2896 u2903@u2898 u2905@u2897 u2908@env? u2910@make-env u2912@env-names u2914@env-labels u2916@env-itc u2918@set-env-names! u2920@set-env-labels! u2922@set-env-itc! u2924@rp u2930@u2925 u2932@u2927 u2934@u2926 u2937@interaction-env? u2939@make-interaction-env u2941@interaction-env-rib u2943@interaction-env-r u2945@interaction-env-locs u2947@set-interaction-env-rib! u2949@set-interaction-env-r! u2951@set-interaction-env-locs! u2953@rp u2955@interaction-environment-symbols u2957@environment-bindings u2959@parse-binding u2961@environment? u2963@environment-symbols u2965@environment u2967@null-environment u2969@scheme-report-environment u2971@expand u2973@eval u2975@library-expander u2977@boot-library-expand u2979@rev-map-append u2981@build-exports u2983@make-export-subst u2985@make-export-env/macros u2987@generate-temporaries u2989@free-identifier=? u2991@bound-identifier=? u2993@make-source-condition u2995@extract-position-condition u2997@expression-position u2999@assertion-error u3001@syntax-error u3003@syntax-violation* u3005@syntax-violation u3007@identifier? u3009@datum->syntax u3011@syntax->datum u3013@compile-r6rs-top-level u3015@pre-compile-r6rs-top-level u3017@interaction-environment u3019@top-level-context) (begin (set! u2134@file-options-macro (lambda (u3020@x) ((lambda (u3023@valid-option?) (begin (set! u3023@valid-option? (lambda (u3032@x) (and (u2275@id? u3032@x) (memq (u2277@id->sym u3032@x) '(no-fail no-create no-truncate))))) ((lambda (u3024@t) ((lambda (u3026@ls/false) (if (and u3026@ls/false (apply (lambda (u3028@opt*) (for-all u3023@valid-option? u3028@opt*)) u3026@ls/false)) (apply (lambda (u3030@opt*) (u2698@bless (list 'make-file-options (list 'quote u3030@opt*)))) u3026@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3024@t))) (u2772@syntax-dispatch u3024@t '(_ . each-any)))) u3020@x))) '#f))) (set! u2136@set-cons (lambda (u3034@x u3035@ls) (if (memq u3034@x u3035@ls) u3035@ls (cons u3034@x u3035@ls)))) (set! u2138@set-union (lambda (u3038@ls1 u3039@ls2) (if (null? u3038@ls1) u3039@ls2 (if (memq (car u3038@ls1) u3039@ls2) (u2138@set-union (cdr u3038@ls1) u3039@ls2) (cons (car u3038@ls1) (u2138@set-union (cdr u3038@ls1) u3039@ls2)))))) (set! u2143@top-mark* '(top)) (set! u2145@top-marked? (lambda (u3042@m*) (memq 'top u3042@m*))) (set! u2147@gen-lexical (lambda (u3044@sym) (if (symbol? u3044@sym) (u1159@u923@gensym u3044@sym) (if (u2219@stx? u3044@sym) (u2147@gen-lexical (u2277@id->sym u3044@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" u3044@sym))))) (set! u2149@gen-global (lambda (u3046@x) (u2147@gen-lexical u3046@x))) (set! u2151@gen-label (lambda (u3048@_) (u1159@u923@gensym))) (set! u2153@gen-top-level-label (lambda (u3050@id u3051@rib) ((lambda (u3055@find) (begin (set! u3055@find (lambda (u3066@sym u3067@mark* u3068@sym* u3069@mark** u3070@label*) (and (pair? u3068@sym*) (if (and (eq? u3066@sym (car u3068@sym*)) (u2279@same-marks? u3067@mark* (car u3069@mark**))) (car u3070@label*) (u3055@find u3066@sym u3067@mark* (cdr u3068@sym*) (cdr u3069@mark**) (cdr u3070@label*)))))) ((lambda (u3056@sym u3057@mark*) ((lambda (u3060@sym*) ((lambda (u3062@t) (if u3062@t ((lambda (u3064@label) (if (u1800@u1454@imported-label->binding u3064@label) (u1159@u923@gensym) u3064@label)) u3062@t) (u1159@u923@gensym))) (and (memq u3056@sym (u2174@rib-sym* u3051@rib)) (u3055@find u3056@sym u3057@mark* u3060@sym* (u2176@rib-mark** u3051@rib) (u2178@rib-label* u3051@rib))))) (u2174@rib-sym* u3051@rib))) (u2277@id->sym u3050@id) (u2225@stx-mark* u3050@id)))) '#f))) (set! u2155@gen-define-label+loc (lambda (u3076@id u3077@rib) ((lambda (u3080@t) (if u3080@t ((lambda (u3082@env) ((lambda (u3084@label u3085@locs) (values u3084@label ((lambda (u3088@t) (if u3088@t (cdr u3088@t) ((lambda (u3090@loc) (begin (u2951@set-interaction-env-locs! u3082@env (cons (cons u3084@label u3090@loc) u3085@locs)) u3090@loc)) (u2147@gen-lexical u3076@id)))) (assq u3084@label u3085@locs)))) (u2153@gen-top-level-label u3076@id u3077@rib) (u2945@interaction-env-locs u3082@env))) u3080@t) (values (u1159@u923@gensym) (u2147@gen-lexical u3076@id)))) (u3019@top-level-context)))) (set! u2157@gen-define-label (lambda (u3092@id u3093@rib) (if (u3019@top-level-context) (u2153@gen-top-level-label u3092@id u3093@rib) (u1159@u923@gensym)))) (set! u2163@u2158 (make-record-type-descriptor 'rib '#f 'u2161 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! u2165@u2160 '#f) (set! u2167@u2159 (make-record-constructor-descriptor u2163@u2158 '#f u2165@u2160)) (set! u2170@rib? (record-predicate u2163@u2158)) (set! u2172@make-rib (record-constructor u2167@u2159)) (set! u2174@rib-sym* (record-accessor u2163@u2158 '0)) (set! u2176@rib-mark** (record-accessor u2163@u2158 '1)) (set! u2178@rib-label* (record-accessor u2163@u2158 '2)) (set! u2180@rib-sealed/freq (record-accessor u2163@u2158 '3)) (set! u2182@rib-cache (record-accessor u2163@u2158 '4)) (set! u2184@set-rib-sym*! (record-mutator u2163@u2158 '0)) (set! u2186@set-rib-mark**! (record-mutator u2163@u2158 '1)) (set! u2188@set-rib-label*! (record-mutator u2163@u2158 '2)) (set! u2190@set-rib-sealed/freq! (record-mutator u2163@u2158 '3)) (set! u2192@set-rib-cache! (record-mutator u2163@u2158 '4)) (set! u2194@make-empty-rib (lambda () (u2172@make-rib '() '() '() '#f '#f))) (set! u2196@extend-rib! (lambda (u3096@rib u3097@id u3098@label) ((lambda (u3103@find) (begin (set! u3103@find (lambda (u3116@sym u3117@mark* u3118@sym* u3119@mark** u3120@label*) (and (pair? u3118@sym*) (if (and (eq? u3116@sym (car u3118@sym*)) (u2279@same-marks? u3117@mark* (car u3119@mark**))) u3120@label* (u3103@find u3116@sym u3117@mark* (cdr u3118@sym*) (cdr u3119@mark**) (cdr u3120@label*)))))) (begin (if (u2180@rib-sealed/freq u3096@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" u3096@rib) (void)) ((lambda (u3104@sym u3105@mark*) ((lambda (u3108@sym*) ((lambda (u3110@t) (if u3110@t ((lambda (u3112@p) (if (not (eq? u3098@label (car u3112@p))) (if (u3019@top-level-context) (set-car! u3112@p u3098@label) (u3005@syntax-violation '#f '"multiple definitions of identifier" u3097@id)) (void))) u3110@t) (begin (if (u2182@rib-cache u3096@rib) (hashtable-update! (u2182@rib-cache u3096@rib) u3104@sym (lambda (u3114@e) (cons (cons u3105@mark* u3098@label) u3114@e)) '()) (void)) (u2184@set-rib-sym*! u3096@rib (cons u3104@sym u3108@sym*)) (u2186@set-rib-mark**! u3096@rib (cons u3105@mark* (u2176@rib-mark** u3096@rib))) (u2188@set-rib-label*! u3096@rib (cons u3098@label (u2178@rib-label* u3096@rib)))))) (and (memq u3104@sym (u2174@rib-sym* u3096@rib)) (u3103@find u3104@sym u3105@mark* u3108@sym* (u2176@rib-mark** u3096@rib) (u2178@rib-label* u3096@rib))))) (u2174@rib-sym* u3096@rib))) (u2277@id->sym u3097@id) (u2225@stx-mark* u3097@id))))) '#f))) (set! u2198@extend-rib/nc! (lambda (u3126@rib u3127@id u3128@label) ((lambda (u3132@sym u3133@mark*) ((lambda (u3136@sym*) (begin (if (u2182@rib-cache u3126@rib) (hashtable-update! (u2182@rib-cache u3126@rib) u3132@sym (lambda (u3138@e) (cons (cons u3133@mark* u3128@label) u3138@e)) '()) (void)) (u2184@set-rib-sym*! u3126@rib (cons u3132@sym u3136@sym*)) (u2186@set-rib-mark**! u3126@rib (cons u3133@mark* (u2176@rib-mark** u3126@rib))) (u2188@set-rib-label*! u3126@rib (cons u3128@label (u2178@rib-label* u3126@rib))))) (u2174@rib-sym* u3126@rib))) (u2277@id->sym u3127@id) (u2225@stx-mark* u3127@id)))) (set! u2200@make-rib-map (lambda (u3140@sym*) ((lambda (u3142@ht) ((letrec ((u3144@f (lambda (u3146@i u3147@sym*) (if (null? u3147@sym*) u3142@ht (begin (hashtable-update! u3142@ht (car u3147@sym*) (lambda (u3150@x) (cons u3146@i u3150@x)) '()) (u3144@f (+ u3146@i '1) (cdr u3147@sym*))))))) u3144@f) '0 u3140@sym*)) (make-eq-hashtable)))) (set! u2202@seal-rib! (lambda (u3152@rib) ((lambda (u3154@sym*) (if (not (null? u3154@sym*)) (begin (u2184@set-rib-sym*! u3152@rib (list->vector u3154@sym*)) (u2186@set-rib-mark**! u3152@rib (list->vector (u2176@rib-mark** u3152@rib))) (u2188@set-rib-label*! u3152@rib (list->vector (u2178@rib-label* u3152@rib))) (u2190@set-rib-sealed/freq! u3152@rib (u2200@make-rib-map u3154@sym*))) (void))) (u2174@rib-sym* u3152@rib)))) (set! u2204@unseal-rib! (lambda (u3156@rib) (if (u2180@rib-sealed/freq u3156@rib) (begin (u2190@set-rib-sealed/freq! u3156@rib '#f) (u2184@set-rib-sym*! u3156@rib (vector->list (u2174@rib-sym* u3156@rib))) (u2186@set-rib-mark**! u3156@rib (vector->list (u2176@rib-mark** u3156@rib))) (u2188@set-rib-label*! u3156@rib (vector->list (u2178@rib-label* u3156@rib)))) (void)))) (set! u2206@make-full-rib (lambda (u3158@id* u3159@label*) ((lambda (u3162@r) (begin (u2202@seal-rib! u3162@r) u3162@r)) (u2172@make-rib (map u2277@id->sym u3158@id*) (map u2225@stx-mark* u3158@id*) u3159@label* '#f '#f)))) (set! u2212@u2207 (make-record-type-descriptor 'stx '#f 'u2210 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! u2214@u2209 '#f) (set! u2216@u2208 (make-record-constructor-descriptor u2212@u2207 '#f u2214@u2209)) (set! u2219@stx? (record-predicate u2212@u2207)) (set! u2221@make-stx (record-constructor u2216@u2208)) (set! u2223@stx-expr (record-accessor u2212@u2207 '0)) (set! u2225@stx-mark* (record-accessor u2212@u2207 '1)) (set! u2227@stx-subst* (record-accessor u2212@u2207 '2)) (set! u2229@stx-ae* (record-accessor u2212@u2207 '3)) (set! u2231@set-stx-expr! (record-mutator u2212@u2207 '0)) (set! u2233@set-stx-mark*! (record-mutator u2212@u2207 '1)) (set! u2235@set-stx-subst*! (record-mutator u2212@u2207 '2)) (set! u2237@set-stx-ae*! (record-mutator u2212@u2207 '3)) (set! u2239@rp (u1170@u945@make-record-printer 'stx (lambda (u3164@x u3165@p u3166@wr) (begin (display '"#<syntax " u3165@p) (write (u2297@stx->datum u3164@x) u3165@p) ((lambda (u3170@expr) (if (u1162@u929@annotation? u3170@expr) ((lambda (u3172@src) (if (pair? u3172@src) (begin (display '" [" u3165@p) (display (cdr u3172@src) u3165@p) (display '" of " u3165@p) (display (car u3172@src) u3165@p) (display '"]" u3165@p)) (void))) (u1163@u931@annotation-source u3170@expr)) (void))) (u2223@stx-expr u3164@x)) (display '">" u3165@p))))) (set! u2241@datum->stx (lambda (u3174@id u3175@datum) (u2221@make-stx u3175@datum (u2225@stx-mark* u3174@id) (u2227@stx-subst* u3174@id) (u2229@stx-ae* u3174@id)))) (set! u2243@gen-mark (lambda () (string '#\m))) (set! u2245@anti-mark '#f) (set! u2247@anti-mark? not) (set! u2249@join-wraps (lambda (u3178@m1* u3179@s1* u3180@ae1* u3181@e) ((lambda (u3187@cancel) (begin (set! u3187@cancel (lambda (u3194@ls1 u3195@ls2) ((letrec ((u3198@f (lambda (u3200@x u3201@ls1) (if (null? u3201@ls1) (cdr u3195@ls2) (cons u3200@x (u3198@f (car u3201@ls1) (cdr u3201@ls1))))))) u3198@f) (car u3194@ls1) (cdr u3194@ls1)))) ((lambda (u3188@m2* u3189@s2* u3190@ae2*) (if (and (not (null? u3178@m1*)) (not (null? u3188@m2*)) (u2247@anti-mark? (car u3188@m2*))) (values (u3187@cancel u3178@m1* u3188@m2*) (u3187@cancel u3179@s1* u3189@s2*) (u3187@cancel u3180@ae1* u3190@ae2*)) (values (append u3178@m1* u3188@m2*) (append u3179@s1* u3189@s2*) (append u3180@ae1* u3190@ae2*)))) (u2225@stx-mark* u3181@e) (u2227@stx-subst* u3181@e) (u2229@stx-ae* u3181@e)))) '#f))) (set! u2251@mkstx (lambda (u3204@e u3205@m* u3206@s* u3207@ae*) (if (and (u2219@stx? u3204@e) (not (u2145@top-marked? u3205@m*))) (call-with-values (lambda () (u2249@join-wraps u3205@m* u3206@s* u3207@ae* u3204@e)) (lambda (u3215@u3212@m* u3216@u3213@s* u3217@u3214@ae*) ((lambda (u3221@ae* u3222@s* u3223@m*) (u2221@make-stx (u2223@stx-expr u3204@e) u3223@m* u3222@s* u3221@ae*)) u3217@u3214@ae* u3216@u3213@s* u3215@u3212@m*))) (u2221@make-stx u3204@e u3205@m* u3206@s* u3207@ae*)))) (set! u2253@add-mark (lambda (u3227@m u3228@e u3229@ae) (u2251@mkstx u3228@e (list u3227@m) '(shift) (list u3229@ae)))) (set! u2255@add-subst (lambda (u3233@subst u3234@e) (u2251@mkstx u3234@e '() (list u3233@subst) '()))) (set! u2257@syntax-kind? (lambda (u3237@x u3238@p?) (if (u2219@stx? u3237@x) (u2257@syntax-kind? (u2223@stx-expr u3237@x) u3238@p?) (if (u1162@u929@annotation? u3237@x) (u2257@syntax-kind? (u1164@u933@annotation-expression u3237@x) u3238@p?) (u3238@p? u3237@x))))) (set! u2259@syntax-vector->list (lambda (u3241@x) (if (u2219@stx? u3241@x) ((lambda (u3243@ls u3244@m* u3245@s* u3246@ae*) (map (lambda (u3251@x) (u2251@mkstx u3251@x u3244@m* u3245@s* u3246@ae*)) u3243@ls)) (u2259@syntax-vector->list (u2223@stx-expr u3241@x)) (u2225@stx-mark* u3241@x) (u2227@stx-subst* u3241@x) (u2229@stx-ae* u3241@x)) (if (u1162@u929@annotation? u3241@x) (u2259@syntax-vector->list (u1164@u933@annotation-expression u3241@x)) (if (vector? u3241@x) (vector->list u3241@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" u3241@x)))))) (set! u2261@syntax-pair? (lambda (u3253@x) (u2257@syntax-kind? u3253@x pair?))) (set! u2263@syntax-vector? (lambda (u3255@x) (u2257@syntax-kind? u3255@x vector?))) (set! u2265@syntax-null? (lambda (u3257@x) (u2257@syntax-kind? u3257@x null?))) (set! u2267@syntax-list? (lambda (u3259@x) (or (u2265@syntax-null? u3259@x) (and (u2261@syntax-pair? u3259@x) (u2267@syntax-list? (u2271@syntax-cdr u3259@x)))))) (set! u2269@syntax-car (lambda (u3261@x) (if (u2219@stx? u3261@x) (u2251@mkstx (u2269@syntax-car (u2223@stx-expr u3261@x)) (u2225@stx-mark* u3261@x) (u2227@stx-subst* u3261@x) (u2229@stx-ae* u3261@x)) (if (u1162@u929@annotation? u3261@x) (u2269@syntax-car (u1164@u933@annotation-expression u3261@x)) (if (pair? u3261@x) (car u3261@x) (assertion-violation 'syntax-car '"BUG: not a pair" u3261@x)))))) (set! u2271@syntax-cdr (lambda (u3263@x) (if (u2219@stx? u3263@x) (u2251@mkstx (u2271@syntax-cdr (u2223@stx-expr u3263@x)) (u2225@stx-mark* u3263@x) (u2227@stx-subst* u3263@x) (u2229@stx-ae* u3263@x)) (if (u1162@u929@annotation? u3263@x) (u2271@syntax-cdr (u1164@u933@annotation-expression u3263@x)) (if (pair? u3263@x) (cdr u3263@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" u3263@x)))))) (set! u2273@syntax->list (lambda (u3265@x) (if (u2261@syntax-pair? u3265@x) (cons (u2269@syntax-car u3265@x) (u2273@syntax->list (u2271@syntax-cdr u3265@x))) (if (u2265@syntax-null? u3265@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" u3265@x))))) (set! u2275@id? (lambda (u3267@x) (and (u2219@stx? u3267@x) ((lambda (u3269@expr) (symbol? (if (u1162@u929@annotation? u3269@expr) (u1161@u927@annotation-stripped u3269@expr) u3269@expr))) (u2223@stx-expr u3267@x))))) (set! u2277@id->sym (lambda (u3271@x) (begin (if (not (u2219@stx? u3271@x)) (error 'id->sym '"BUG in ikarus: not an id" u3271@x) (void)) ((lambda (u3273@expr) ((lambda (u3275@sym) (if (symbol? u3275@sym) u3275@sym (error 'id->sym '"BUG in ikarus: not an id" u3271@x))) (if (u1162@u929@annotation? u3273@expr) (u1161@u927@annotation-stripped u3273@expr) u3273@expr))) (u2223@stx-expr u3271@x))))) (set! u2279@same-marks? (lambda (u3277@x u3278@y) (or (and (null? u3277@x) (null? u3278@y)) (and (pair? u3277@x) (pair? u3278@y) (eq? (car u3277@x) (car u3278@y)) (u2279@same-marks? (cdr u3277@x) (cdr u3278@y)))))) (set! u2281@bound-id=? (lambda (u3281@x u3282@y) (and (eq? (u2277@id->sym u3281@x) (u2277@id->sym u3282@y)) (u2279@same-marks? (u2225@stx-mark* u3281@x) (u2225@stx-mark* u3282@y))))) (set! u2283@free-id=? (lambda (u3285@i u3286@j) ((lambda (u3289@t0 u3290@t1) (if (or u3289@t0 u3290@t1) (eq? u3289@t0 u3290@t1) (eq? (u2277@id->sym u3285@i) (u2277@id->sym u3286@j)))) (u2303@id->real-label u3285@i) (u2303@id->real-label u3286@j)))) (set! u2285@valid-bound-ids? (lambda (u3293@id*) (and (for-all u2275@id? u3293@id*) (u2287@distinct-bound-ids? u3293@id*)))) (set! u2287@distinct-bound-ids? (lambda (u3295@id*) (or (null? u3295@id*) (and (not (u2289@bound-id-member? (car u3295@id*) (cdr u3295@id*))) (u2287@distinct-bound-ids? (cdr u3295@id*)))))) (set! u2289@bound-id-member? (lambda (u3297@id u3298@id*) (and (pair? u3298@id*) (or (u2281@bound-id=? u3297@id (car u3298@id*)) (u2289@bound-id-member? u3297@id (cdr u3298@id*)))))) (set! u2291@self-evaluating? (lambda (u3301@x) (or (number? u3301@x) (string? u3301@x) (char? u3301@x) (boolean? u3301@x) (regexp? u3301@x) (bytevector? u3301@x)))) (set! u2293@strip-annotations (lambda (u3303@x) (if (pair? u3303@x) (cons (u2293@strip-annotations (car u3303@x)) (u2293@strip-annotations (cdr u3303@x))) (if (vector? u3303@x) (vector-map u2293@strip-annotations u3303@x) (if (u1162@u929@annotation? u3303@x) (u1161@u927@annotation-stripped u3303@x) u3303@x))))) (set! u2295@strip (lambda (u3305@x u3306@m*) (if (u2145@top-marked? u3306@m*) (if (or (u1162@u929@annotation? u3305@x) (and (pair? u3305@x) (u1162@u929@annotation? (car u3305@x))) (and (vector? u3305@x) (> (vector-length u3305@x) '0) (u1162@u929@annotation? (vector-ref u3305@x '0)))) (u2293@strip-annotations u3305@x) u3305@x) ((letrec ((u3309@f (lambda (u3311@x) (if (u2219@stx? u3311@x) (u2295@strip (u2223@stx-expr u3311@x) (u2225@stx-mark* u3311@x)) (if (u1162@u929@annotation? u3311@x) (u1161@u927@annotation-stripped u3311@x) (if (pair? u3311@x) ((lambda (u3313@a u3314@d) (if (and (eq? u3313@a (car u3311@x)) (eq? u3314@d (cdr u3311@x))) u3311@x (cons u3313@a u3314@d))) (u3309@f (car u3311@x)) (u3309@f (cdr u3311@x))) (if (vector? u3311@x) ((lambda (u3317@old) ((lambda (u3319@new) (if (for-all eq? u3317@old u3319@new) u3311@x (list->vector u3319@new))) (map u3309@f u3317@old))) (vector->list u3311@x)) u3311@x))))))) u3309@f) u3305@x)))) (set! u2297@stx->datum (lambda (u3321@x) (u2295@strip u3321@x '()))) (set! u2299@same-marks*? (lambda (u3323@mark* u3324@mark** u3325@si) (if (null? u3325@si) '#f (if (u2279@same-marks? u3323@mark* (vector-ref u3324@mark** (car u3325@si))) (car u3325@si) (u2299@same-marks*? u3323@mark* u3324@mark** (cdr u3325@si)))))) (set! u2301@id->label (lambda (u3329@id) (or (u2303@id->real-label u3329@id) ((lambda (u3331@t) (if u3331@t ((lambda (u3333@env) ((lambda (u3335@rib) (call-with-values (lambda () (u2155@gen-define-label+loc u3329@id u3335@rib)) (lambda (u3339@u3337@lab u3340@u3338@loc_) ((lambda (u3343@loc_ u3344@lab) (begin (u2196@extend-rib! u3335@rib u3329@id u3344@lab) u3344@lab)) u3340@u3338@loc_ u3339@u3337@lab)))) (u2941@interaction-env-rib u3333@env))) u3331@t) '#f)) (u3019@top-level-context))))) (set! u2303@id->real-label (lambda (u3347@id) ((lambda (u3349@sym) ((letrec ((u3351@search (lambda (u3353@subst* u3354@mark*) (if (null? u3353@subst*) '#f (if (eq? (car u3353@subst*) 'shift) (u3351@search (cdr u3353@subst*) (cdr u3354@mark*)) ((lambda (u3357@rib) ((lambda (u3359@t) (if u3359@t ((lambda (u3361@ht) ((lambda (u3363@si) ((lambda (u3365@i) (if u3365@i (vector-ref (u2178@rib-label* u3357@rib) u3365@i) (u3351@search (cdr u3353@subst*) u3354@mark*))) (and u3363@si (u2299@same-marks*? u3354@mark* (u2176@rib-mark** u3357@rib) (reverse u3363@si))))) (hashtable-ref u3361@ht u3349@sym '#f))) u3359@t) ((letrec ((u3367@f (lambda (u3369@sym* u3370@mark** u3371@label*) (if (null? u3369@sym*) (u3351@search (cdr u3353@subst*) u3354@mark*) (if (and (eq? (car u3369@sym*) u3349@sym) (u2279@same-marks? (car u3370@mark**) u3354@mark*)) (car u3371@label*) (u3367@f (cdr u3369@sym*) (cdr u3370@mark**) (cdr u3371@label*))))))) u3367@f) (u2174@rib-sym* u3357@rib) (u2176@rib-mark** u3357@rib) (u2178@rib-label* u3357@rib)))) (u2180@rib-sealed/freq u3357@rib))) (car u3353@subst*))))))) u3351@search) (u2227@stx-subst* u3347@id) (u2225@stx-mark* u3347@id))) (u2277@id->sym u3347@id)))) (set! u2305@label->binding (lambda (u3375@x u3376@r) ((lambda (u3379@t) (if u3379@t ((lambda (u3381@b) (if (and (pair? u3381@b) (eq? (car u3381@b) '$core-rtd)) (cons '$rtd (map u2698@bless (cdr u3381@b))) (if (and (pair? u3381@b) (eq? (car u3381@b) 'global-rtd)) ((lambda (u3383@lib u3384@loc) (cons '$rtd (symbol-value u3384@loc))) (cadr u3381@b) (cddr u3381@b)) u3381@b))) u3379@t) ((lambda (u3387@t) (if u3387@t (cdr u3387@t) ((lambda (u3389@t) (if u3389@t ((lambda (u3391@env) ((lambda (u3393@t) (if u3393@t ((lambda (u3395@p) (cons* 'lexical (cdr u3395@p) '#f)) u3393@t) '(displaced-lexical . #f))) (assq u3375@x (u2945@interaction-env-locs u3391@env)))) u3389@t) '(displaced-lexical . #f))) (u3019@top-level-context)))) (assq u3375@x u3376@r)))) (u1800@u1454@imported-label->binding u3375@x)))) (set! u2307@make-binding cons) (set! u2309@binding-type car) (set! u2311@binding-value cdr) (set! u2313@raise-unbound-error (lambda (u3397@id) (u3003@syntax-violation* '#f '"unbound identifier" u3397@id (u10193@u9755@make-undefined-violation)))) (set! u2315@syntax-type (lambda (u3399@e u3400@r) (if (u2275@id? u3399@e) ((lambda (u3403@id) ((lambda (u3405@label) ((lambda (u3407@b) ((lambda (u3409@type) ((lambda () (begin (if (not u3405@label) (u2313@raise-unbound-error u3403@id) (void)) ((lambda (u3411@t) (if (memv u3411@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values u3409@type (u2311@binding-value u3407@b) u3403@id) (values 'other '#f '#f))) u3409@type))))) (u2309@binding-type u3407@b))) (u2305@label->binding u3405@label u3400@r))) (u2301@id->label u3403@id))) u3399@e) (if (u2261@syntax-pair? u3399@e) ((lambda (u3413@id) (if (u2275@id? u3413@id) ((lambda (u3415@label) ((lambda (u3417@b) ((lambda (u3419@type) ((lambda () (begin (if (not u3415@label) (u2313@raise-unbound-error u3413@id) (void)) ((lambda (u3421@t) (if (memv u3421@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values u3419@type (u2311@binding-value u3417@b) u3413@id) (values 'call '#f '#f))) u3419@type))))) (u2309@binding-type u3417@b))) (u2305@label->binding u3415@label u3400@r))) (u2301@id->label u3413@id)) (values 'call '#f '#f))) (u2269@syntax-car u3399@e)) ((lambda (u3423@d) (if (u2291@self-evaluating? u3423@d) (values 'constant u3423@d '#f) (values 'other '#f '#f))) (u2297@stx->datum u3399@e)))))) (set! u2329@sanitize-binding (lambda (u3425@x u3426@src) (if (procedure? u3425@x) (cons* 'local-macro u3425@x u3426@src) (if (and (pair? u3425@x) (eq? (car u3425@x) 'macro!) (procedure? (cdr u3425@x))) (cons* 'local-macro! (cdr u3425@x) u3426@src) (if (and (pair? u3425@x) (eq? (car u3425@x) '$rtd)) u3425@x (assertion-violation 'expand '"invalid transformer" u3425@x)))))) (set! u2331@make-variable-transformer (lambda (u3429@x) (if (procedure? u3429@x) (cons 'macro! u3429@x) (assertion-violation 'make-variable-transformer '"not a procedure" u3429@x)))) (set! u2333@variable-transformer? (lambda (u3431@x) (and (pair? u3431@x) (eq? (car u3431@x) 'macro!) (procedure? (cdr u3431@x))))) (set! u2335@variable-transformer-procedure (lambda (u3433@x) (if (u2333@variable-transformer? u3433@x) (cdr u3433@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" u3433@x)))) (set! u2337@make-eval-transformer (lambda (u3435@x) (u2329@sanitize-binding (eval-core (u1257@u1185@expanded->core u3435@x)) u3435@x))) (set! u2648@parse-define (lambda (u3437@x) ((lambda (u3439@t) ((lambda (u3441@ls/false) (if (and u3441@ls/false (apply (lambda (u3443@id u3444@fmls u3445@b u3446@b*) (u2275@id? u3443@id)) u3441@ls/false)) (apply (lambda (u3451@id u3452@fmls u3453@b u3454@b*) (begin (u2810@verify-formals u3452@fmls u3437@x) (values u3451@id (cons 'defun (cons u3452@fmls (cons u3453@b u3454@b*)))))) u3441@ls/false) ((lambda (u3459@t) ((lambda (u3461@ls/false) (if (and u3461@ls/false (apply (lambda (u3463@id u3464@val) (u2275@id? u3463@id)) u3461@ls/false)) (apply (lambda (u3467@id u3468@val) (values u3467@id (cons 'expr u3468@val))) u3461@ls/false) ((lambda (u3471@t) ((lambda (u3473@ls/false) (if (and u3473@ls/false (apply (lambda (u3475@id) (u2275@id? u3475@id)) u3473@ls/false)) (apply (lambda (u3477@id) (values u3477@id (cons 'expr (u2698@bless '(void))))) u3473@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3471@t))) (u2772@syntax-dispatch u3471@t '(_ any)))) u3459@t))) (u2772@syntax-dispatch u3459@t '(_ any any)))) u3439@t))) (u2772@syntax-dispatch u3439@t '(_ (any . any) any . each-any)))) u3437@x))) (set! u2650@parse-define-syntax (lambda (u3479@x) ((lambda (u3481@t) ((lambda (u3483@ls/false) (if (and u3483@ls/false (apply (lambda (u3485@id u3486@val) (u2275@id? u3485@id)) u3483@ls/false)) (apply (lambda (u3489@id u3490@val) (values u3489@id u3490@val)) u3483@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3481@t))) (u2772@syntax-dispatch u3481@t '(_ any any)))) u3479@x))) (set! u2652@scheme-stx-hashtable (make-eq-hashtable)) (set! u2654@scheme-stx (lambda (u3493@sym) (or (hashtable-ref u2652@scheme-stx-hashtable u3493@sym '#f) ((lambda (u3495@subst) ((lambda (u3497@stx) ((lambda (u3499@stx) ((lambda () (begin (hashtable-set! u2652@scheme-stx-hashtable u3493@sym u3499@stx) u3499@stx)))) ((lambda (u3501@t) (if u3501@t ((lambda (u3503@x) ((lambda (u3505@name u3506@label) (u2255@add-subst (u2172@make-rib (list u3505@name) (list u2143@top-mark*) (list u3506@label) '#f '#f) u3497@stx)) (car u3503@x) (cdr u3503@x))) u3501@t) u3497@stx)) (assq u3493@sym u3495@subst)))) (u2221@make-stx u3493@sym u2143@top-mark* '() '()))) (u1758@u1370@library-subst (u1794@u1442@find-library-by-name '(psyntax system $all))))))) (set! u2656@lexical-var car) (set! u2658@lexical-mutable? cdr) (set! u2660@set-lexical-mutable! set-cdr!) (set! u2662@add-lexical (lambda (u3509@lab u3510@lex u3511@r) (cons (cons* u3509@lab 'lexical u3510@lex '#f) u3511@r))) (set! u2664@add-lexicals (lambda (u3515@lab* u3516@lex* u3517@r) (if (null? u3515@lab*) u3517@r (u2664@add-lexicals (cdr u3515@lab*) (cdr u3516@lex*) (u2662@add-lexical (car u3515@lab*) (car u3516@lex*) u3517@r))))) (set! u2666@letrec-helper (lambda (u3521@e u3522@r u3523@mr u3524@build) ((lambda (u3529@t) ((lambda (u3531@ls/false) (if u3531@ls/false (apply (lambda (u3533@lhs* u3534@rhs* u3535@b u3536@b*) (if (not (u2285@valid-bound-ids? u3533@lhs*)) (u2702@invalid-fmls-error u3521@e u3533@lhs*) ((lambda (u3541@lex* u3542@lab*) ((lambda (u3545@rib u3546@r) ((lambda (u3549@body u3550@rhs*) (u3524@build '#f u3541@lex* u3550@rhs* u3549@body)) (u2828@chi-internal (u2255@add-subst u3545@rib (cons u3535@b u3536@b*)) u3546@r u3523@mr) (u2802@chi-expr* (map (lambda (u3553@x) (u2255@add-subst u3545@rib u3553@x)) u3534@rhs*) u3546@r u3523@mr))) (u2206@make-full-rib u3533@lhs* u3542@lab*) (u2664@add-lexicals u3542@lab* u3541@lex* u3522@r))) (map u2147@gen-lexical u3533@lhs*) (map u2151@gen-label u3533@lhs*)))) u3531@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3529@t))) (u2772@syntax-dispatch u3529@t '(_ #(each (any any)) any . each-any)))) u3521@e))) (set! u2668@letrec-transformer (lambda (u3555@e u3556@r u3557@mr) (u2666@letrec-helper u3555@e u3556@r u3557@mr u2116@u1975@build-letrec))) (set! u2670@letrec*-transformer (lambda (u3561@e u3562@r u3563@mr) (u2666@letrec-helper u3561@e u3562@r u3563@mr u2117@u1977@build-letrec*))) (set! u2672@fluid-let-syntax-transformer (lambda (u3567@e u3568@r u3569@mr) ((lambda (u3574@lookup) (begin (set! u3574@lookup (lambda (u3593@x) (or (u2301@id->label u3593@x) (u3005@syntax-violation '#f '"unbound identifier" u3567@e u3593@x)))) ((lambda (u3575@t) ((lambda (u3577@ls/false) (if u3577@ls/false (apply (lambda (u3579@lhs* u3580@rhs* u3581@b u3582@b*) (if (not (u2285@valid-bound-ids? u3579@lhs*)) (u2702@invalid-fmls-error u3567@e u3579@lhs*) ((lambda (u3587@lab* u3588@rhs*) (u2828@chi-internal (cons u3581@b u3582@b*) (append (map cons u3587@lab* u3588@rhs*) u3568@r) (append (map cons u3587@lab* u3588@rhs*) u3569@mr))) (map u3574@lookup u3579@lhs*) (map (lambda (u3591@x) (u2337@make-eval-transformer (u2865@expand-transformer u3591@x u3569@mr))) u3580@rhs*)))) u3577@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3575@t))) (u2772@syntax-dispatch u3575@t '(_ #(each (any any)) any . each-any)))) u3567@e))) '#f))) (set! u2674@type-descriptor-transformer (lambda (u3595@e u3596@r u3597@mr) ((lambda (u3601@t) ((lambda (u3603@ls/false) (if (and u3603@ls/false (apply (lambda (u3605@id) (u2275@id? u3605@id)) u3603@ls/false)) (apply (lambda (u3607@id) ((lambda (u3609@lab) ((lambda (u3611@b) ((lambda (u3613@type) ((lambda () (begin (if (not u3609@lab) (u2313@raise-unbound-error u3607@id) (void)) (if (not (and (eq? u3613@type '$rtd) (not (list? (u2311@binding-value u3611@b))))) (u3005@syntax-violation '#f '"not a record type" u3595@e) (void)) (list 'quote (u2311@binding-value u3611@b)))))) (u2309@binding-type u3611@b))) (u2305@label->binding u3609@lab u3596@r))) (u2301@id->label u3607@id))) u3603@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3601@t))) (u2772@syntax-dispatch u3601@t '(_ any)))) u3595@e))) (set! u2676@record-type-descriptor-transformer (lambda (u3615@e u3616@r u3617@mr) ((lambda (u3621@t) ((lambda (u3623@ls/false) (if (and u3623@ls/false (apply (lambda (u3625@id) (u2275@id? u3625@id)) u3623@ls/false)) (apply (lambda (u3627@id) ((lambda (u3629@lab) ((lambda (u3631@b) ((lambda (u3633@type) ((lambda () (begin (if (not u3629@lab) (u2313@raise-unbound-error u3627@id) (void)) (if (not (and (eq? u3633@type '$rtd) (list? (u2311@binding-value u3631@b)))) (u3005@syntax-violation '#f '"not a record type" u3615@e) (void)) (u2806@chi-expr (car (u2311@binding-value u3631@b)) u3616@r u3617@mr))))) (u2309@binding-type u3631@b))) (u2305@label->binding u3629@lab u3616@r))) (u2301@id->label u3627@id))) u3623@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3621@t))) (u2772@syntax-dispatch u3621@t '(_ any)))) u3615@e))) (set! u2678@record-constructor-descriptor-transformer (lambda (u3635@e u3636@r u3637@mr) ((lambda (u3641@t) ((lambda (u3643@ls/false) (if (and u3643@ls/false (apply (lambda (u3645@id) (u2275@id? u3645@id)) u3643@ls/false)) (apply (lambda (u3647@id) ((lambda (u3649@lab) ((lambda (u3651@b) ((lambda (u3653@type) ((lambda () (begin (if (not u3649@lab) (u2313@raise-unbound-error u3647@id) (void)) (if (not (and (eq? u3653@type '$rtd) (list? (u2311@binding-value u3651@b)))) (u3005@syntax-violation '#f '"invalid type" u3635@e) (void)) (u2806@chi-expr (cadr (u2311@binding-value u3651@b)) u3636@r u3637@mr))))) (u2309@binding-type u3651@b))) (u2305@label->binding u3649@lab u3636@r))) (u2301@id->label u3647@id))) u3643@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3641@t))) (u2772@syntax-dispatch u3641@t '(_ any)))) u3635@e))) (set! u2680@when-macro (lambda (u3655@e) ((lambda (u3657@t) ((lambda (u3659@ls/false) (if u3659@ls/false (apply (lambda (u3661@test u3662@e u3663@e*) (u2698@bless (list 'if u3661@test (cons 'begin (cons u3662@e u3663@e*))))) u3659@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3657@t))) (u2772@syntax-dispatch u3657@t '(_ any any . each-any)))) u3655@e))) (set! u2682@unless-macro (lambda (u3667@e) ((lambda (u3669@t) ((lambda (u3671@ls/false) (if u3671@ls/false (apply (lambda (u3673@test u3674@e u3675@e*) (u2698@bless (list 'if (list 'not u3673@test) (cons 'begin (cons u3674@e u3675@e*))))) u3671@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3669@t))) (u2772@syntax-dispatch u3669@t '(_ any any . each-any)))) u3667@e))) (set! u2684@if-transformer (lambda (u3679@e u3680@r u3681@mr) ((lambda (u3685@t) ((lambda (u3687@ls/false) (if u3687@ls/false (apply (lambda (u3689@e0 u3690@e1 u3691@e2) (list 'if (u2806@chi-expr u3689@e0 u3680@r u3681@mr) (u2806@chi-expr u3690@e1 u3680@r u3681@mr) (u2806@chi-expr u3691@e2 u3680@r u3681@mr))) u3687@ls/false) ((lambda (u3695@t) ((lambda (u3697@ls/false) (if u3697@ls/false (apply (lambda (u3699@e0 u3700@e1) (list 'if (u2806@chi-expr u3699@e0 u3680@r u3681@mr) (u2806@chi-expr u3700@e1 u3680@r u3681@mr) (u2115@u1973@build-void))) u3697@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3695@t))) (u2772@syntax-dispatch u3695@t '(_ any any)))) u3685@t))) (u2772@syntax-dispatch u3685@t '(_ any any any)))) u3679@e))) (set! u2686@and-transformer (lambda (u3703@e u3704@r u3705@mr) ((lambda (u3709@t) ((lambda (u3711@ls/false) (if u3711@ls/false (apply (lambda (u3713@e*) (cons 'and (u2802@chi-expr* u3713@e* u3704@r u3705@mr))) u3711@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3709@t))) (u2772@syntax-dispatch u3709@t '(_ . each-any)))) u3703@e))) (set! u2688@or-transformer (lambda (u3715@e u3716@r u3717@mr) ((lambda (u3721@t) ((lambda (u3723@ls/false) (if u3723@ls/false (apply (lambda (u3725@e*) (cons 'or (u2802@chi-expr* u3725@e* u3716@r u3717@mr))) u3723@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3721@t))) (u2772@syntax-dispatch u3721@t '(_ . each-any)))) u3715@e))) (set! u2690@case-macro (lambda (u3727@e) ((lambda (u3730@build-last u3732@build-one) (begin (set! u3730@build-last (lambda (u3769@cls) ((lambda (u3771@t) ((lambda (u3773@ls/false) (if u3773@ls/false (apply (lambda (u3775@e u3776@e*) (cons 'begin (cons u3775@e u3776@e*))) u3773@ls/false) ((lambda (u3779@t) ((lambda (u3781@ls/false) (if u3781@ls/false (apply (lambda () (u3732@build-one u3769@cls '(if #f #f))) u3781@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3779@t))) (u2772@syntax-dispatch u3779@t '_))) u3771@t))) (u2772@syntax-dispatch u3771@t '(#(scheme-id else) any . each-any)))) u3769@cls))) (set! u3732@build-one (lambda (u3755@cls u3756@k) ((lambda (u3759@t) ((lambda (u3761@ls/false) (if u3761@ls/false (apply (lambda (u3763@d* u3764@e u3765@e*) (list 'if (list 'memv 't (list 'quote u3763@d*)) (cons 'begin (cons u3764@e u3765@e*)) u3756@k)) u3761@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3759@t))) (u2772@syntax-dispatch u3759@t '(each-any any . each-any)))) u3755@cls))) ((lambda (u3733@t) ((lambda (u3735@ls/false) (if u3735@ls/false (apply (lambda (u3737@expr) (u2698@bless (cons 'let (cons (list (list 't u3737@expr)) '((if #f #f)))))) u3735@ls/false) ((lambda (u3739@t) ((lambda (u3741@ls/false) (if u3741@ls/false (apply (lambda (u3743@expr u3744@cls u3745@cls*) (u2698@bless (list 'let (list (list 't u3743@expr)) ((letrec ((u3749@f (lambda (u3751@cls u3752@cls*) (if (null? u3752@cls*) (u3730@build-last u3751@cls) (u3732@build-one u3751@cls (u3749@f (car u3752@cls*) (cdr u3752@cls*))))))) u3749@f) u3744@cls u3745@cls*)))) u3741@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3739@t))) (u2772@syntax-dispatch u3739@t '(_ any any . each-any)))) u3733@t))) (u2772@syntax-dispatch u3733@t '(_ any)))) u3727@e))) '#f '#f))) (set! u2692@quote-transformer (lambda (u3783@e u3784@r u3785@mr) ((lambda (u3789@t) ((lambda (u3791@ls/false) (if u3791@ls/false (apply (lambda (u3793@datum) (list 'quote (u2297@stx->datum u3793@datum))) u3791@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3789@t))) (u2772@syntax-dispatch u3789@t '(_ any)))) u3783@e))) (set! u2694@case-lambda-transformer (lambda (u3795@e u3796@r u3797@mr) ((lambda (u3801@t) ((lambda (u3803@ls/false) (if u3803@ls/false (apply (lambda (u3805@fmls* u3806@b* u3807@b**) (call-with-values (lambda () (u2814@chi-lambda-clause* u3795@e u3805@fmls* (map cons u3806@b* u3807@b**) u3796@r u3797@mr)) (lambda (u3813@u3811@fmls* u3814@u3812@body*) ((lambda (u3817@body* u3818@fmls*) (u2112@u1923@build-case-lambda '#f u3818@fmls* u3817@body*)) u3814@u3812@body* u3813@u3811@fmls*)))) u3803@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3801@t))) (u2772@syntax-dispatch u3801@t '(_ . #(each (any any . each-any)))))) u3795@e))) (set! u2696@lambda-transformer (lambda (u3821@e u3822@r u3823@mr) ((lambda (u3827@t) ((lambda (u3829@ls/false) (if u3829@ls/false (apply (lambda (u3831@fmls u3832@b u3833@b*) (call-with-values (lambda () (u2812@chi-lambda-clause u3821@e u3831@fmls (cons u3832@b u3833@b*) u3822@r u3823@mr)) (lambda (u3839@u3837@fmls u3840@u3838@body) ((lambda (u3843@body u3844@fmls) (u2111@u1921@build-lambda '#f u3844@fmls u3843@body)) u3840@u3838@body u3839@u3837@fmls)))) u3829@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3827@t))) (u2772@syntax-dispatch u3827@t '(_ any any . each-any)))) u3821@e))) (set! u2698@bless (lambda (u3847@x) (u2251@mkstx ((letrec ((u3849@f (lambda (u3851@x) (if (u2219@stx? u3851@x) u3851@x (if (pair? u3851@x) (cons (u3849@f (car u3851@x)) (u3849@f (cdr u3851@x))) (if (symbol? u3851@x) (u2654@scheme-stx u3851@x) (if (vector? u3851@x) (vector-map u3849@f u3851@x) u3851@x))))))) u3849@f) u3847@x) '() '() '()))) (set! u2700@with-syntax-macro (lambda (u3853@e) ((lambda (u3855@t) ((lambda (u3857@ls/false) (if u3857@ls/false (apply (lambda (u3859@pat* u3860@expr* u3861@b u3862@b*) ((lambda (u3867@idn*) (begin (u2810@verify-formals (map car u3867@idn*) u3853@e) ((lambda (u3869@t*) (u2698@bless (list 'let (map list u3869@t* u3860@expr*) ((letrec ((u3871@f (lambda (u3873@pat* u3874@t*) (if (null? u3873@pat*) (cons 'begin (cons '#f (cons u3861@b u3862@b*))) (list 'syntax-case (car u3874@t*) '() (list (car u3873@pat*) (u3871@f (cdr u3873@pat*) (cdr u3874@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car u3873@pat*)) (car u3874@t*)))))))) u3871@f) u3859@pat* u3869@t*)))) (u2987@generate-temporaries u3860@expr*)))) ((letrec ((u3877@f (lambda (u3879@pat*) (if (null? u3879@pat*) '() (call-with-values (lambda () (u2770@convert-pattern (car u3879@pat*) '())) (lambda (u3883@u3881@pat u3884@u3882@idn*) ((lambda (u3887@idn* u3888@pat) (append u3887@idn* (u3877@f (cdr u3879@pat*)))) u3884@u3882@idn* u3883@u3881@pat))))))) u3877@f) u3859@pat*))) u3857@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3855@t))) (u2772@syntax-dispatch u3855@t '(_ #(each (any any)) any . each-any)))) u3853@e))) (set! u2702@invalid-fmls-error (lambda (u3891@stx u3892@fmls) ((lambda (u3895@t) ((lambda (u3897@ls/false) (if u3897@ls/false (apply (lambda (u3899@id* u3900@last) ((letrec ((u3903@f (lambda (u3905@id*) (if (null? u3905@id*) (values) (if (not (u2275@id? (car u3905@id*))) (u3005@syntax-violation '#f '"not an identifier" u3891@stx (car u3905@id*)) (begin (u3903@f (cdr u3905@id*)) (if (u2289@bound-id-member? (car u3905@id*) (cdr u3905@id*)) (u3005@syntax-violation '#f '"duplicate binding" u3891@stx (car u3905@id*)) (void)))))))) u3903@f) (if (u2275@id? u3900@last) (cons u3900@last u3899@id*) (if (u2265@syntax-null? u3900@last) u3899@id* (u3005@syntax-violation '#f '"not an identifier" u3891@stx u3900@last))))) u3897@ls/false) ((lambda (u3907@t) ((lambda (u3909@ls/false) (if u3909@ls/false (apply (lambda () (u3005@syntax-violation '#f '"malformed binding form" u3891@stx u3892@fmls)) u3909@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3907@t))) (u2772@syntax-dispatch u3907@t '_))) u3895@t))) (u2772@syntax-dispatch u3895@t '#(each+ any () any)))) u3892@fmls))) (set! u2704@let-macro (lambda (u3911@stx) ((lambda (u3913@t) ((lambda (u3915@ls/false) (if u3915@ls/false (apply (lambda (u3917@lhs* u3918@rhs* u3919@b u3920@b*) (if (u2285@valid-bound-ids? u3917@lhs*) (u2698@bless (cons (cons 'lambda (cons u3917@lhs* (cons u3919@b u3920@b*))) u3918@rhs*)) (u2702@invalid-fmls-error u3911@stx u3917@lhs*))) u3915@ls/false) ((lambda (u3925@t) ((lambda (u3927@ls/false) (if (and u3927@ls/false (apply (lambda (u3929@f u3930@lhs* u3931@rhs* u3932@b u3933@b*) (u2275@id? u3929@f)) u3927@ls/false)) (apply (lambda (u3939@f u3940@lhs* u3941@rhs* u3942@b u3943@b*) (if (u2285@valid-bound-ids? u3940@lhs*) (u2698@bless (cons (list 'letrec (list (list u3939@f (cons 'lambda (cons u3940@lhs* (cons u3942@b u3943@b*))))) u3939@f) u3941@rhs*)) (u2702@invalid-fmls-error u3911@stx u3940@lhs*))) u3927@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3925@t))) (u2772@syntax-dispatch u3925@t '(_ any #(each (any any)) any . each-any)))) u3913@t))) (u2772@syntax-dispatch u3913@t '(_ #(each (any any)) any . each-any)))) u3911@stx))) (set! u2706@let-values-macro (lambda (u3949@stx) ((lambda (u3952@rename u3954@rename*) (begin (set! u3952@rename (lambda (u4050@x u4051@old* u4052@new*) (begin (if (not (u2275@id? u4050@x)) (u3005@syntax-violation '#f '"not an indentifier" u3949@stx u4050@x) (void)) (if (u2289@bound-id-member? u4050@x u4051@old*) (u3005@syntax-violation '#f '"duplicate binding" u3949@stx u4050@x) (void)) ((lambda (u4056@y) (values u4056@y (cons u4050@x u4051@old*) (cons u4056@y u4052@new*))) (u1159@u923@gensym (u3011@syntax->datum u4050@x)))))) (set! u3954@rename* (lambda (u4032@x* u4033@old* u4034@new*) (if (null? u4032@x*) (values '() u4033@old* u4034@new*) (call-with-values (lambda () (u3952@rename (car u4032@x*) u4033@old* u4034@new*)) (lambda (u4038@x u4039@old* u4040@new*) (call-with-values (lambda () (u3954@rename* (cdr u4032@x*) u4039@old* u4040@new*)) (lambda (u4044@x* u4045@old* u4046@new*) (values (cons u4038@x u4044@x*) u4045@old* u4046@new*)))))))) ((lambda (u3955@t) ((lambda (u3957@ls/false) (if u3957@ls/false (apply (lambda (u3959@b u3960@b*) (cons* (u2698@bless 'let) '() u3959@b u3960@b*)) u3957@ls/false) ((lambda (u3963@t) ((lambda (u3965@ls/false) (if u3965@ls/false (apply (lambda (u3967@lhs* u3968@rhs* u3969@b u3970@b*) (u2698@bless ((letrec ((u3975@f (lambda (u3977@lhs* u3978@rhs* u3979@old* u3980@new*) (if (null? u3977@lhs*) (cons 'let (cons (map list u3979@old* u3980@new*) (cons u3969@b u3970@b*))) ((lambda (u3985@t) ((lambda (u3987@ls/false) (if u3987@ls/false (apply (lambda (u3989@x*) (call-with-values (lambda () (u3954@rename* u3989@x* u3979@old* u3980@new*)) (lambda (u3994@u3991@y* u3995@u3992@old* u3996@u3993@new*) ((lambda (u4000@new* u4001@old* u4002@y*) (list 'call-with-values (list 'lambda '() (car u3978@rhs*)) (list 'lambda u4002@y* (u3975@f (cdr u3977@lhs*) (cdr u3978@rhs*) u4001@old* u4000@new*)))) u3996@u3993@new* u3995@u3992@old* u3994@u3991@y*)))) u3987@ls/false) ((lambda (u4006@t) ((lambda (u4008@ls/false) (if u4008@ls/false (apply (lambda (u4010@x* u4011@x) (call-with-values (lambda () (u3952@rename u4011@x u3979@old* u3980@new*)) (lambda (u4014@y u4015@old* u4016@new*) (call-with-values (lambda () (u3954@rename* u4010@x* u4015@old* u4016@new*)) (lambda (u4020@y* u4021@old* u4022@new*) (list 'call-with-values (list 'lambda '() (car u3978@rhs*)) (list 'lambda (append u4020@y* u4014@y) (u3975@f (cdr u3977@lhs*) (cdr u3978@rhs*) u4021@old* u4022@new*)))))))) u4008@ls/false) ((lambda (u4026@t) ((lambda (u4028@ls/false) (if u4028@ls/false (apply (lambda (u4030@others) (u3005@syntax-violation '#f '"malformed bindings" u3949@stx u4030@others)) u4028@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4026@t))) (u2772@syntax-dispatch u4026@t 'any))) u4006@t))) (u2772@syntax-dispatch u4006@t '#(each+ any () any)))) u3985@t))) (u2772@syntax-dispatch u3985@t 'each-any))) (car u3977@lhs*)))))) u3975@f) u3967@lhs* u3968@rhs* '() '()))) u3965@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u3963@t))) (u2772@syntax-dispatch u3963@t '(_ #(each (any any)) any . each-any)))) u3955@t))) (u2772@syntax-dispatch u3955@t '(_ () any . each-any)))) u3949@stx))) '#f '#f))) (set! u2708@let*-values-macro (lambda (u4058@stx) ((lambda (u4061@check) (begin (set! u4061@check (lambda (u4108@x*) (if (not (null? u4108@x*)) ((lambda (u4110@x) (begin (if (not (u2275@id? u4110@x)) (u3005@syntax-violation '#f '"not an identifier" u4058@stx u4110@x) (void)) (u4061@check (cdr u4108@x*)) (if (u2289@bound-id-member? u4110@x (cdr u4108@x*)) (u3005@syntax-violation '#f '"duplicate identifier" u4058@stx u4110@x) (void)))) (car u4108@x*)) (void)))) ((lambda (u4062@t) ((lambda (u4064@ls/false) (if u4064@ls/false (apply (lambda (u4066@b u4067@b*) (cons* (u2698@bless 'let) '() u4066@b u4067@b*)) u4064@ls/false) ((lambda (u4070@t) ((lambda (u4072@ls/false) (if u4072@ls/false (apply (lambda (u4074@lhs* u4075@rhs* u4076@b u4077@b*) (u2698@bless ((letrec ((u4082@f (lambda (u4084@lhs* u4085@rhs*) (if (null? u4084@lhs*) (cons 'begin (cons u4076@b u4077@b*)) ((lambda (u4088@t) ((lambda (u4090@ls/false) (if u4090@ls/false (apply (lambda (u4092@x*) (begin (u4061@check u4092@x*) (list 'call-with-values (list 'lambda '() (car u4085@rhs*)) (list 'lambda u4092@x* (u4082@f (cdr u4084@lhs*) (cdr u4085@rhs*)))))) u4090@ls/false) ((lambda (u4094@t) ((lambda (u4096@ls/false) (if u4096@ls/false (apply (lambda (u4098@x* u4099@x) (begin (u4061@check (cons u4099@x u4098@x*)) (list 'call-with-values (list 'lambda '() (car u4085@rhs*)) (list 'lambda (append u4098@x* u4099@x) (u4082@f (cdr u4084@lhs*) (cdr u4085@rhs*)))))) u4096@ls/false) ((lambda (u4102@t) ((lambda (u4104@ls/false) (if u4104@ls/false (apply (lambda (u4106@others) (u3005@syntax-violation '#f '"malformed bindings" u4058@stx u4106@others)) u4104@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4102@t))) (u2772@syntax-dispatch u4102@t 'any))) u4094@t))) (u2772@syntax-dispatch u4094@t '#(each+ any () any)))) u4088@t))) (u2772@syntax-dispatch u4088@t 'each-any))) (car u4084@lhs*)))))) u4082@f) u4074@lhs* u4075@rhs*))) u4072@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4070@t))) (u2772@syntax-dispatch u4070@t '(_ #(each (any any)) any . each-any)))) u4062@t))) (u2772@syntax-dispatch u4062@t '(_ () any . each-any)))) u4058@stx))) '#f))) (set! u2710@trace-lambda-macro (lambda (u4112@stx) ((lambda (u4114@t) ((lambda (u4116@ls/false) (if u4116@ls/false (apply (lambda (u4118@who u4119@fmls u4120@b u4121@b*) (if (u2285@valid-bound-ids? u4119@fmls) (u2698@bless (list 'make-traced-procedure (list 'quote u4118@who) (cons 'lambda (cons u4119@fmls (cons u4120@b u4121@b*))))) (u2702@invalid-fmls-error u4112@stx u4119@fmls))) u4116@ls/false) ((lambda (u4126@t) ((lambda (u4128@ls/false) (if u4128@ls/false (apply (lambda (u4130@who u4131@fmls u4132@last u4133@b u4134@b*) (if (u2285@valid-bound-ids? (cons u4132@last u4131@fmls)) (u2698@bless (list 'make-traced-procedure (list 'quote u4130@who) (cons 'lambda (cons (append u4131@fmls u4132@last) (cons u4133@b u4134@b*))))) (u2702@invalid-fmls-error u4112@stx (append u4131@fmls u4132@last)))) u4128@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4126@t))) (u2772@syntax-dispatch u4126@t '(_ any #(each+ any () any) any . each-any)))) u4114@t))) (u2772@syntax-dispatch u4114@t '(_ any each-any any . each-any)))) u4112@stx))) (set! u2712@trace-define-macro (lambda (u4140@stx) ((lambda (u4142@t) ((lambda (u4144@ls/false) (if u4144@ls/false (apply (lambda (u4146@who u4147@fmls u4148@b u4149@b*) (if (u2285@valid-bound-ids? u4147@fmls) (u2698@bless (list 'define u4146@who (list 'make-traced-procedure (list 'quote u4146@who) (cons 'lambda (cons u4147@fmls (cons u4148@b u4149@b*)))))) (u2702@invalid-fmls-error u4140@stx u4147@fmls))) u4144@ls/false) ((lambda (u4154@t) ((lambda (u4156@ls/false) (if u4156@ls/false (apply (lambda (u4158@who u4159@fmls u4160@last u4161@b u4162@b*) (if (u2285@valid-bound-ids? (cons u4160@last u4159@fmls)) (u2698@bless (list 'define u4158@who (list 'make-traced-procedure (list 'quote u4158@who) (cons 'lambda (cons (append u4159@fmls u4160@last) (cons u4161@b u4162@b*)))))) (u2702@invalid-fmls-error u4140@stx (append u4159@fmls u4160@last)))) u4156@ls/false) ((lambda (u4168@t) ((lambda (u4170@ls/false) (if u4170@ls/false (apply (lambda (u4172@who u4173@expr) (if (u2275@id? u4172@who) (u2698@bless (list 'define u4172@who (list 'let (list (list 'v u4173@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote u4172@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (u3005@syntax-violation '#f '"invalid name" u4140@stx))) u4170@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4168@t))) (u2772@syntax-dispatch u4168@t '(_ any any)))) u4154@t))) (u2772@syntax-dispatch u4154@t '(_ (any . #(each+ any () any)) any . each-any)))) u4142@t))) (u2772@syntax-dispatch u4142@t '(_ (any . each-any) any . each-any)))) u4140@stx))) (set! u2714@trace-define-syntax-macro (lambda (u4176@stx) ((lambda (u4178@t) ((lambda (u4180@ls/false) (if u4180@ls/false (apply (lambda (u4182@who u4183@expr) (if (u2275@id? u4182@who) (u2698@bless (list 'define-syntax u4182@who (list 'make-traced-macro (list 'quote u4182@who) u4183@expr))) (u3005@syntax-violation '#f '"invalid name" u4176@stx))) u4180@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4178@t))) (u2772@syntax-dispatch u4178@t '(_ any any)))) u4176@stx))) (set! u2716@trace-let/rec-syntax (lambda (u4186@who) (lambda (u4188@stx) ((lambda (u4190@t) ((lambda (u4192@ls/false) (if u4192@ls/false (apply (lambda (u4194@lhs* u4195@rhs* u4196@b u4197@b*) (if (u2285@valid-bound-ids? u4194@lhs*) ((lambda (u4202@rhs*) (u2698@bless (cons u4186@who (cons (map list u4194@lhs* u4202@rhs*) (cons u4196@b u4197@b*))))) (map (lambda (u4204@lhs u4205@rhs) (list 'make-traced-macro (list 'quote u4204@lhs) u4205@rhs)) u4194@lhs* u4195@rhs*)) (u2702@invalid-fmls-error u4188@stx u4194@lhs*))) u4192@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4190@t))) (u2772@syntax-dispatch u4190@t '(_ #(each (any any)) any . each-any)))) u4188@stx)))) (set! u2718@trace-let-syntax-macro (u2716@trace-let/rec-syntax 'let-syntax)) (set! u2720@trace-letrec-syntax-macro (u2716@trace-let/rec-syntax 'letrec-syntax)) (set! u2722@guard-macro (lambda (u4208@x) ((lambda (u4211@gen-clauses) (begin (set! u4211@gen-clauses (lambda (u4234@con u4235@outerk u4236@clause*) ((lambda (u4241@f u4243@f*) (begin (set! u4241@f (lambda (u4294@x u4295@k) ((lambda (u4298@t) ((lambda (u4300@ls/false) (if u4300@ls/false (apply (lambda (u4302@e u4303@p) ((lambda (u4306@t) (list 'let (list (list u4306@t u4302@e)) (list 'if u4306@t (list u4303@p u4306@t) u4295@k))) (u1159@u923@gensym))) u4300@ls/false) ((lambda (u4308@t) ((lambda (u4310@ls/false) (if u4310@ls/false (apply (lambda (u4312@e) ((lambda (u4314@t) (list 'let (list (list u4314@t u4312@e)) (list 'if u4314@t u4314@t u4295@k))) (u1159@u923@gensym))) u4310@ls/false) ((lambda (u4316@t) ((lambda (u4318@ls/false) (if u4318@ls/false (apply (lambda (u4320@e u4321@v u4322@v*) (list 'if u4320@e (cons 'begin (cons u4321@v u4322@v*)) u4295@k)) u4318@ls/false) ((lambda (u4326@t) ((lambda (u4328@ls/false) (if u4328@ls/false (apply (lambda () (u3005@syntax-violation '#f '"invalid guard clause" u4294@x)) u4328@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4326@t))) (u2772@syntax-dispatch u4326@t '_))) u4316@t))) (u2772@syntax-dispatch u4316@t '(any any . each-any)))) u4308@t))) (u2772@syntax-dispatch u4308@t '(any)))) u4298@t))) (u2772@syntax-dispatch u4298@t '(any #(scheme-id =>) any)))) u4294@x))) (set! u4243@f* (lambda (u4254@x*) ((lambda (u4256@t) ((lambda (u4258@ls/false) (if u4258@ls/false (apply (lambda () ((lambda (u4260@g) (values (list u4260@g (list 'lambda '() (list 'raise-continuable u4234@con))) u4260@g)) (u1159@u923@gensym))) u4258@ls/false) ((lambda (u4262@t) ((lambda (u4264@ls/false) (if u4264@ls/false (apply (lambda (u4266@e u4267@e*) (values (cons 'begin (cons u4266@e u4267@e*)) '#f)) u4264@ls/false) ((lambda (u4270@t) ((lambda (u4272@ls/false) (if u4272@ls/false (apply (lambda (u4274@cls u4275@cls*) (call-with-values (lambda () (u4243@f* u4275@cls*)) (lambda (u4280@u4278@e u4281@u4279@g) ((lambda (u4284@g u4285@e) (values (u4241@f u4274@cls u4285@e) u4284@g)) u4281@u4279@g u4280@u4278@e)))) u4272@ls/false) ((lambda (u4288@t) ((lambda (u4290@ls/false) (if u4290@ls/false (apply (lambda (u4292@others) (u3005@syntax-violation '#f '"invalid guard clause" u4292@others)) u4290@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4288@t))) (u2772@syntax-dispatch u4288@t 'any))) u4270@t))) (u2772@syntax-dispatch u4270@t '(any . any)))) u4262@t))) (u2772@syntax-dispatch u4262@t '((#(scheme-id else) any . each-any))))) u4256@t))) (u2772@syntax-dispatch u4256@t '()))) u4254@x*))) (call-with-values (lambda () (u4243@f* u4236@clause*)) (lambda (u4246@u4244@code u4247@u4245@raisek) ((lambda (u4250@raisek u4251@code) (if u4250@raisek (list (list 'call/cc (list 'lambda (list u4250@raisek) (list u4235@outerk (list 'lambda '() u4251@code))))) (list u4235@outerk (list 'lambda '() u4251@code)))) u4247@u4245@raisek u4246@u4244@code))))) '#f '#f))) ((lambda (u4212@t) ((lambda (u4214@ls/false) (if (and u4214@ls/false (apply (lambda (u4216@con u4217@clause* u4218@b u4219@b*) (u2275@id? u4216@con)) u4214@ls/false)) (apply (lambda (u4224@con u4225@clause* u4226@b u4227@b*) ((lambda (u4232@outerk) (u2698@bless (list (list 'call/cc (list 'lambda (list u4232@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list u4224@con) (u4211@gen-clauses u4224@con u4232@outerk u4225@clause*)) (cons 'lambda (cons '() (cons u4226@b u4227@b*)))))))))) (u1159@u923@gensym))) u4214@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4212@t))) (u2772@syntax-dispatch u4212@t '(_ (any . each-any) any . each-any)))) u4208@x))) '#f))) (set! u2724@define-enumeration-macro (lambda (u4330@stx) ((lambda (u4333@set? u4335@remove-dups) (begin (set! u4333@set? (lambda (u4358@x) (or (null? u4358@x) (and (not (memq (car u4358@x) (cdr u4358@x))) (u4333@set? (cdr u4358@x)))))) (set! u4335@remove-dups (lambda (u4356@ls) (if (null? u4356@ls) '() (cons (car u4356@ls) (u4335@remove-dups (remq (car u4356@ls) (cdr u4356@ls))))))) ((lambda (u4336@t) ((lambda (u4338@ls/false) (if (and u4338@ls/false (apply (lambda (u4340@name u4341@id* u4342@maker) (and (u2275@id? u4340@name) (u2275@id? u4342@maker) (for-all u2275@id? u4341@id*))) u4338@ls/false)) (apply (lambda (u4346@name u4347@id* u4348@maker) ((lambda (u4352@name* u4353@mk) (u2698@bless (list 'begin (list 'define u4353@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote u4352@name*)))) (list 'define-syntax u4346@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote u4352@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote u4346@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax u4348@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote u4348@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote u4352@name*)) (cons 'syntax-violation (cons (list 'quote u4348@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons u4353@mk '('(n* ...)))))))))))) (u4335@remove-dups (u3011@syntax->datum u4347@id*)) (u1159@u923@gensym))) u4338@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4336@t))) (u2772@syntax-dispatch u4336@t '(_ any each-any any)))) u4330@stx))) '#f '#f))) (set! u2726@time-macro (lambda (u4360@stx) ((lambda (u4362@t) ((lambda (u4364@ls/false) (if u4364@ls/false (apply (lambda (u4366@expr) (u2698@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() u4366@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) u4364@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4362@t))) (u2772@syntax-dispatch u4362@t '(_ any)))) u4360@stx))) (set! u2728@delay-macro (lambda (u4368@stx) ((lambda (u4370@t) ((lambda (u4372@ls/false) (if u4372@ls/false (apply (lambda (u4374@expr) (u2698@bless (list 'make-promise (list 'lambda '() u4374@expr)))) u4372@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4370@t))) (u2772@syntax-dispatch u4370@t '(_ any)))) u4368@stx))) (set! u2730@assert-macro (lambda (u4376@stx) ((lambda (u4378@t) ((lambda (u4380@ls/false) (if u4380@ls/false (apply (lambda (u4382@expr) ((lambda (u4384@pos) (u2698@bless (list 'unless u4382@expr (list 'assertion-error (list 'quote u4382@expr) (list 'quote u4384@pos))))) (or (u2997@expression-position u4376@stx) (u2997@expression-position u4382@expr)))) u4380@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4378@t))) (u2772@syntax-dispatch u4378@t '(_ any)))) u4376@stx))) (set! u2732@endianness-macro (lambda (u4386@stx) ((lambda (u4388@t) ((lambda (u4390@ls/false) (if u4390@ls/false (apply (lambda (u4392@e) ((lambda (u4394@t) (if (memv u4394@t '(little)) (u2698@bless ''little) (if (memv u4394@t '(big)) (u2698@bless ''big) (u3005@syntax-violation '#f '"endianness must be big or little" u4386@stx)))) (u3011@syntax->datum u4392@e))) u4390@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4388@t))) (u2772@syntax-dispatch u4388@t '(_ any)))) u4386@stx))) (set! u2734@identifier-syntax-macro (lambda (u4396@stx) ((lambda (u4398@t) ((lambda (u4400@ls/false) (if u4400@ls/false (apply (lambda (u4402@expr) (u2698@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax u4402@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax u4402@expr) '((syntax (e* ...)))))))))) u4400@ls/false) ((lambda (u4404@t) ((lambda (u4406@ls/false) (if (and u4406@ls/false (apply (lambda (u4408@id1 u4409@expr1 u4410@id2 u4411@expr2 u4412@expr3) (and (u2275@id? u4408@id1) (u2275@id? u4410@id2) (u2275@id? u4411@expr2))) u4406@ls/false)) (apply (lambda (u4418@id1 u4419@expr1 u4420@id2 u4421@expr2 u4422@expr3) (u2698@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax u4419@expr1)) (list (list 'set! 'id u4421@expr2) (list 'syntax u4422@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons u4419@expr1 '(e* ...))))))))) u4406@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4404@t))) (u2772@syntax-dispatch u4404@t '(_ (any any) ((#(scheme-id set!) any any) any))))) u4398@t))) (u2772@syntax-dispatch u4398@t '(_ any)))) u4396@stx))) (set! u2736@do-macro (lambda (u4428@stx) ((lambda (u4431@bind) (begin (set! u4431@bind (lambda (u4454@x) ((lambda (u4456@t) ((lambda (u4458@ls/false) (if u4458@ls/false (apply (lambda (u4460@x u4461@init) (list u4460@x u4461@init u4460@x)) u4458@ls/false) ((lambda (u4464@t) ((lambda (u4466@ls/false) (if u4466@ls/false (apply (lambda (u4468@x u4469@init u4470@step) (list u4468@x u4469@init u4470@step)) u4466@ls/false) ((lambda (u4474@t) ((lambda (u4476@ls/false) (if u4476@ls/false (apply (lambda () (u3005@syntax-violation '#f '"invalid binding" u4428@stx)) u4476@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4474@t))) (u2772@syntax-dispatch u4474@t '_))) u4464@t))) (u2772@syntax-dispatch u4464@t '(any any any)))) u4456@t))) (u2772@syntax-dispatch u4456@t '(any any)))) u4454@x))) ((lambda (u4432@t) ((lambda (u4434@ls/false) (if u4434@ls/false (apply (lambda (u4436@binding* u4437@test u4438@expr* u4439@command*) ((lambda (u4444@t) ((lambda (u4446@ls/false) (if u4446@ls/false (apply (lambda (u4448@x* u4449@init* u4450@step*) (if (u2285@valid-bound-ids? u4448@x*) (u2698@bless (list 'letrec (list (list 'loop (list 'lambda u4448@x* (list 'if u4437@test (cons 'begin (cons '(if #f #f) u4438@expr*)) (cons 'begin (append u4439@command* (list (cons 'loop u4450@step*)))))))) (cons 'loop u4449@init*))) (u3005@syntax-violation '#f '"invalid bindings" u4428@stx))) u4446@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4444@t))) (u2772@syntax-dispatch u4444@t '#(each (any any any))))) (map u4431@bind u4436@binding*))) u4434@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4432@t))) (u2772@syntax-dispatch u4432@t '(_ each-any (any . each-any) . each-any)))) u4428@stx))) '#f))) (set! u2738@let*-macro (lambda (u4478@stx) ((lambda (u4480@t) ((lambda (u4482@ls/false) (if (and u4482@ls/false (apply (lambda (u4484@lhs* u4485@rhs* u4486@b u4487@b*) (for-all u2275@id? u4484@lhs*)) u4482@ls/false)) (apply (lambda (u4492@lhs* u4493@rhs* u4494@b u4495@b*) (u2698@bless ((letrec ((u4500@f (lambda (u4502@x*) (if (null? u4502@x*) (cons 'let (cons '() (cons u4494@b u4495@b*))) (list 'let (list (car u4502@x*)) (u4500@f (cdr u4502@x*))))))) u4500@f) (map list u4492@lhs* u4493@rhs*)))) u4482@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4480@t))) (u2772@syntax-dispatch u4480@t '(_ #(each (any any)) any . each-any)))) u4478@stx))) (set! u2740@or-macro (lambda (u4504@stx) ((lambda (u4506@t) ((lambda (u4508@ls/false) (if u4508@ls/false (apply (lambda () '#f) u4508@ls/false) ((lambda (u4510@t) ((lambda (u4512@ls/false) (if u4512@ls/false (apply (lambda (u4514@e u4515@e*) (u2698@bless ((letrec ((u4518@f (lambda (u4520@e u4521@e*) (if (null? u4521@e*) (list 'begin '#f u4520@e) (list 'let (list (list 't u4520@e)) (list 'if 't 't (u4518@f (car u4521@e*) (cdr u4521@e*)))))))) u4518@f) u4514@e u4515@e*))) u4512@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4510@t))) (u2772@syntax-dispatch u4510@t '(_ any . each-any)))) u4506@t))) (u2772@syntax-dispatch u4506@t '(_)))) u4504@stx))) (set! u2742@and-macro (lambda (u4524@stx) ((lambda (u4526@t) ((lambda (u4528@ls/false) (if u4528@ls/false (apply (lambda () '#t) u4528@ls/false) ((lambda (u4530@t) ((lambda (u4532@ls/false) (if u4532@ls/false (apply (lambda (u4534@e u4535@e*) (u2698@bless ((letrec ((u4538@f (lambda (u4540@e u4541@e*) (if (null? u4541@e*) (list 'begin '#f u4540@e) (cons 'if (cons u4540@e (cons (u4538@f (car u4541@e*) (cdr u4541@e*)) '(#f)))))))) u4538@f) u4534@e u4535@e*))) u4532@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4530@t))) (u2772@syntax-dispatch u4530@t '(_ any . each-any)))) u4526@t))) (u2772@syntax-dispatch u4526@t '(_)))) u4524@stx))) (set! u2744@cond-macro (lambda (u4544@stx) ((lambda (u4546@t) ((lambda (u4548@ls/false) (if u4548@ls/false (apply (lambda (u4550@cls u4551@cls*) (u2698@bless ((letrec ((u4554@f (lambda (u4556@cls u4557@cls*) (if (null? u4557@cls*) ((lambda (u4560@t) ((lambda (u4562@ls/false) (if u4562@ls/false (apply (lambda (u4564@e u4565@e*) (cons 'begin (cons u4564@e u4565@e*))) u4562@ls/false) ((lambda (u4568@t) ((lambda (u4570@ls/false) (if u4570@ls/false (apply (lambda (u4572@e u4573@p) (list 'let (list (list 't u4572@e)) (list 'if 't (cons u4573@p '(t))))) u4570@ls/false) ((lambda (u4576@t) ((lambda (u4578@ls/false) (if u4578@ls/false (apply (lambda (u4580@e) (cons 'or (cons u4580@e '((if #f #f))))) u4578@ls/false) ((lambda (u4582@t) ((lambda (u4584@ls/false) (if u4584@ls/false (apply (lambda (u4586@e u4587@e*) (list 'if u4586@e (cons 'begin u4587@e*))) u4584@ls/false) ((lambda (u4590@t) ((lambda (u4592@ls/false) (if u4592@ls/false (apply (lambda () (u3005@syntax-violation '#f '"invalid last clause" u4544@stx)) u4592@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4590@t))) (u2772@syntax-dispatch u4590@t '_))) u4582@t))) (u2772@syntax-dispatch u4582@t '(any . each-any)))) u4576@t))) (u2772@syntax-dispatch u4576@t '(any)))) u4568@t))) (u2772@syntax-dispatch u4568@t '(any #(scheme-id =>) any)))) u4560@t))) (u2772@syntax-dispatch u4560@t '(#(scheme-id else) any . each-any)))) u4556@cls) ((lambda (u4594@t) ((lambda (u4596@ls/false) (if u4596@ls/false (apply (lambda (u4598@e u4599@e*) (u3005@syntax-violation '#f '"incorrect position of keyword else" u4544@stx)) u4596@ls/false) ((lambda (u4602@t) ((lambda (u4604@ls/false) (if u4604@ls/false (apply (lambda (u4606@e u4607@p) (list 'let (list (list 't u4606@e)) (list 'if 't (cons u4607@p '(t)) (u4554@f (car u4557@cls*) (cdr u4557@cls*))))) u4604@ls/false) ((lambda (u4610@t) ((lambda (u4612@ls/false) (if u4612@ls/false (apply (lambda (u4614@e) (list 'or u4614@e (u4554@f (car u4557@cls*) (cdr u4557@cls*)))) u4612@ls/false) ((lambda (u4616@t) ((lambda (u4618@ls/false) (if u4618@ls/false (apply (lambda (u4620@e u4621@e*) (list 'if u4620@e (cons 'begin u4621@e*) (u4554@f (car u4557@cls*) (cdr u4557@cls*)))) u4618@ls/false) ((lambda (u4624@t) ((lambda (u4626@ls/false) (if u4626@ls/false (apply (lambda () (u3005@syntax-violation '#f '"invalid last clause" u4544@stx)) u4626@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4624@t))) (u2772@syntax-dispatch u4624@t '_))) u4616@t))) (u2772@syntax-dispatch u4616@t '(any . each-any)))) u4610@t))) (u2772@syntax-dispatch u4610@t '(any)))) u4602@t))) (u2772@syntax-dispatch u4602@t '(any #(scheme-id =>) any)))) u4594@t))) (u2772@syntax-dispatch u4594@t '(#(scheme-id else) any . each-any)))) u4556@cls))))) u4554@f) u4550@cls u4551@cls*))) u4548@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4546@t))) (u2772@syntax-dispatch u4546@t '(_ any . each-any)))) u4544@stx))) (set! u2746@do-include (lambda (u4628@stx u4629@id u4630@filename) ((lambda (u4634@filename) (begin (if (not (and (string? u4634@filename) (u2275@id? u4629@id))) (u3005@syntax-violation '#f '"invalid syntax" u4628@stx) (void)) (cons (u2698@bless 'begin) (with-input-from-file u4634@filename (lambda () ((letrec ((u4636@f (lambda (u4638@ls) ((lambda (u4640@x) (if (eof-object? u4640@x) (reverse u4638@ls) (u4636@f (cons (u2241@datum->stx u4629@id u4640@x) u4638@ls)))) (u1160@u925@read-annotated))))) u4636@f) '())))))) (u2297@stx->datum u4630@filename)))) (set! u2748@include-macro (lambda (u4642@e) ((lambda (u4644@t) ((lambda (u4646@ls/false) (if u4646@ls/false (apply (lambda (u4648@id u4649@filename) (u2746@do-include u4642@e u4648@id u4649@filename)) u4646@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4644@t))) (u2772@syntax-dispatch u4644@t '(any any)))) u4642@e))) (set! u2750@include-into-macro (lambda (u4652@e) ((lambda (u4654@t) ((lambda (u4656@ls/false) (if u4656@ls/false (apply (lambda (u4658@id u4659@filename) (u2746@do-include u4652@e u4658@id u4659@filename)) u4656@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4654@t))) (u2772@syntax-dispatch u4654@t '(_ any any)))) u4652@e))) (set! u2752@syntax-rules-macro (lambda (u4662@e) ((lambda (u4664@t) ((lambda (u4666@ls/false) (if u4666@ls/false (apply (lambda (u4668@lits u4669@pat* u4670@tmp*) (begin (u2778@verify-literals u4668@lits u4662@e) (u2698@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons u4668@lits (map (lambda (u4674@pat u4675@tmp) ((lambda (u4678@t) ((lambda (u4680@ls/false) (if u4680@ls/false (apply (lambda (u4682@rest) (list (cons 'g u4682@rest) (list 'syntax u4675@tmp))) u4680@ls/false) ((lambda (u4684@t) ((lambda (u4686@ls/false) (if u4686@ls/false (apply (lambda () (u3005@syntax-violation '#f '"invalid syntax-rules pattern" u4662@e u4674@pat)) u4686@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4684@t))) (u2772@syntax-dispatch u4684@t '_))) u4678@t))) (u2772@syntax-dispatch u4678@t '(_ . any)))) u4674@pat)) u4669@pat* u4670@tmp*)))))))) u4666@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4664@t))) (u2772@syntax-dispatch u4664@t '(_ each-any . #(each (any any)))))) u4662@e))) (set! u2754@quasiquote-macro ((lambda () ((lambda (u4689@datum u4717@quasicons* u4719@quasicons u4721@quasiappend u4723@quasivector u4725@vquasi u4727@quasi) (begin (set! u4689@datum (lambda (u4946@x) (list (u2654@scheme-stx 'quote) (u2251@mkstx u4946@x '() '() '())))) (set! u4717@quasicons* (lambda (u4938@x u4939@y) ((letrec ((u4942@f (lambda (u4944@x) (if (null? u4944@x) u4939@y (u4719@quasicons (car u4944@x) (u4942@f (cdr u4944@x))))))) u4942@f) u4938@x))) (set! u4719@quasicons (lambda (u4900@x u4901@y) ((lambda (u4904@t) ((lambda (u4906@ls/false) (if u4906@ls/false (apply (lambda (u4908@dy) ((lambda (u4910@t) ((lambda (u4912@ls/false) (if u4912@ls/false (apply (lambda (u4914@dx) (list (u2654@scheme-stx 'quote) (cons u4914@dx u4908@dy))) u4912@ls/false) ((lambda (u4916@t) ((lambda (u4918@ls/false) (if u4918@ls/false (apply (lambda () ((lambda (u4920@t) ((lambda (u4922@ls/false) (if u4922@ls/false (apply (lambda () (list (u2654@scheme-stx 'list) u4900@x)) u4922@ls/false) ((lambda (u4924@t) ((lambda (u4926@ls/false) (if u4926@ls/false (apply (lambda () (list (u2654@scheme-stx 'cons) u4900@x u4901@y)) u4926@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4924@t))) (u2772@syntax-dispatch u4924@t '_))) u4920@t))) (u2772@syntax-dispatch u4920@t '()))) u4908@dy)) u4918@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4916@t))) (u2772@syntax-dispatch u4916@t '_))) u4910@t))) (u2772@syntax-dispatch u4910@t '(#(scheme-id quote) any)))) u4900@x)) u4906@ls/false) ((lambda (u4928@t) ((lambda (u4930@ls/false) (if u4930@ls/false (apply (lambda (u4932@stuff) (cons* (u2654@scheme-stx 'list) u4900@x u4932@stuff)) u4930@ls/false) ((lambda (u4934@t) ((lambda (u4936@ls/false) (if u4936@ls/false (apply (lambda () (list (u2654@scheme-stx 'cons) u4900@x u4901@y)) u4936@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4934@t))) (u2772@syntax-dispatch u4934@t '_))) u4928@t))) (u2772@syntax-dispatch u4928@t '(#(scheme-id list) . each-any)))) u4904@t))) (u2772@syntax-dispatch u4904@t '(#(scheme-id quote) any)))) u4901@y))) (set! u4721@quasiappend (lambda (u4874@x u4875@y) ((lambda (u4878@ls) (if (null? u4878@ls) (list (u2654@scheme-stx 'quote) '()) (if (null? (cdr u4878@ls)) (car u4878@ls) (cons* (u2654@scheme-stx 'append) u4878@ls)))) ((letrec ((u4880@f (lambda (u4882@x) (if (null? u4882@x) ((lambda (u4884@t) ((lambda (u4886@ls/false) (if u4886@ls/false (apply (lambda () '()) u4886@ls/false) ((lambda (u4888@t) ((lambda (u4890@ls/false) (if u4890@ls/false (apply (lambda () (list u4875@y)) u4890@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4888@t))) (u2772@syntax-dispatch u4888@t '_))) u4884@t))) (u2772@syntax-dispatch u4884@t '(#(scheme-id quote) ())))) u4875@y) ((lambda (u4892@t) ((lambda (u4894@ls/false) (if u4894@ls/false (apply (lambda () (u4880@f (cdr u4882@x))) u4894@ls/false) ((lambda (u4896@t) ((lambda (u4898@ls/false) (if u4898@ls/false (apply (lambda () (cons (car u4882@x) (u4880@f (cdr u4882@x)))) u4898@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4896@t))) (u2772@syntax-dispatch u4896@t '_))) u4892@t))) (u2772@syntax-dispatch u4892@t '(#(scheme-id quote) ())))) (car u4882@x)))))) u4880@f) u4874@x)))) (set! u4723@quasivector (lambda (u4824@x) ((lambda (u4826@pat-x) ((lambda (u4828@t) ((lambda (u4830@ls/false) (if u4830@ls/false (apply (lambda (u4832@x*) (list (u2654@scheme-stx 'quote) (list->vector u4832@x*))) u4830@ls/false) ((lambda (u4834@t) ((lambda (u4836@ls/false) (if u4836@ls/false (apply (lambda () ((letrec ((u4838@f (lambda (u4840@x u4841@k) ((lambda (u4844@t) ((lambda (u4846@ls/false) (if u4846@ls/false (apply (lambda (u4848@x*) (u4841@k (map (lambda (u4850@x) (list (u2654@scheme-stx 'quote) u4850@x)) u4848@x*))) u4846@ls/false) ((lambda (u4852@t) ((lambda (u4854@ls/false) (if u4854@ls/false (apply (lambda (u4856@x*) (u4841@k u4856@x*)) u4854@ls/false) ((lambda (u4858@t) ((lambda (u4860@ls/false) (if u4860@ls/false (apply (lambda (u4862@x u4863@y) (u4838@f u4863@y (lambda (u4866@ls) (u4841@k (cons u4862@x u4866@ls))))) u4860@ls/false) ((lambda (u4868@t) ((lambda (u4870@ls/false) (if u4870@ls/false (apply (lambda () (list (u2654@scheme-stx 'list->vector) u4826@pat-x)) u4870@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4868@t))) (u2772@syntax-dispatch u4868@t '_))) u4858@t))) (u2772@syntax-dispatch u4858@t '(#(scheme-id cons) any any)))) u4852@t))) (u2772@syntax-dispatch u4852@t '(#(scheme-id list) . each-any)))) u4844@t))) (u2772@syntax-dispatch u4844@t '(#(scheme-id quote) each-any)))) u4840@x)))) u4838@f) u4824@x (lambda (u4872@ls) (cons* (u2654@scheme-stx 'vector) u4872@ls)))) u4836@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4834@t))) (u2772@syntax-dispatch u4834@t '_))) u4828@t))) (u2772@syntax-dispatch u4828@t '(#(scheme-id quote) each-any)))) u4826@pat-x)) u4824@x))) (set! u4725@vquasi (lambda (u4790@p u4791@lev) ((lambda (u4794@t) ((lambda (u4796@ls/false) (if u4796@ls/false (apply (lambda (u4798@p u4799@q) ((lambda (u4802@t) ((lambda (u4804@ls/false) (if u4804@ls/false (apply (lambda (u4806@p) (if (= u4791@lev '0) (u4717@quasicons* u4806@p (u4725@vquasi u4799@q u4791@lev)) (u4719@quasicons (u4719@quasicons (u4689@datum 'unquote) (u4727@quasi u4806@p (- u4791@lev '1))) (u4725@vquasi u4799@q u4791@lev)))) u4804@ls/false) ((lambda (u4808@t) ((lambda (u4810@ls/false) (if u4810@ls/false (apply (lambda (u4812@p) (if (= u4791@lev '0) (u4721@quasiappend u4812@p (u4725@vquasi u4799@q u4791@lev)) (u4719@quasicons (u4719@quasicons (u4689@datum 'unquote-splicing) (u4727@quasi u4812@p (- u4791@lev '1))) (u4725@vquasi u4799@q u4791@lev)))) u4810@ls/false) ((lambda (u4814@t) ((lambda (u4816@ls/false) (if u4816@ls/false (apply (lambda (u4818@p) (u4719@quasicons (u4727@quasi u4818@p u4791@lev) (u4725@vquasi u4799@q u4791@lev))) u4816@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4814@t))) (u2772@syntax-dispatch u4814@t 'any))) u4808@t))) (u2772@syntax-dispatch u4808@t '(#(scheme-id unquote-splicing) . each-any)))) u4802@t))) (u2772@syntax-dispatch u4802@t '(#(scheme-id unquote) . each-any)))) u4798@p)) u4796@ls/false) ((lambda (u4820@t) ((lambda (u4822@ls/false) (if u4822@ls/false (apply (lambda () (list (u2654@scheme-stx 'quote) '())) u4822@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4820@t))) (u2772@syntax-dispatch u4820@t '()))) u4794@t))) (u2772@syntax-dispatch u4794@t '(any . any)))) u4790@p))) (set! u4727@quasi (lambda (u4736@p u4737@lev) ((lambda (u4740@t) ((lambda (u4742@ls/false) (if u4742@ls/false (apply (lambda (u4744@p) (if (= u4737@lev '0) u4744@p (u4719@quasicons (u4689@datum 'unquote) (u4727@quasi (list u4744@p) (- u4737@lev '1))))) u4742@ls/false) ((lambda (u4746@t) ((lambda (u4748@ls/false) (if u4748@ls/false (apply (lambda (u4750@p u4751@q) (if (= u4737@lev '0) (u4717@quasicons* u4750@p (u4727@quasi u4751@q u4737@lev)) (u4719@quasicons (u4719@quasicons (u4689@datum 'unquote) (u4727@quasi u4750@p (- u4737@lev '1))) (u4727@quasi u4751@q u4737@lev)))) u4748@ls/false) ((lambda (u4754@t) ((lambda (u4756@ls/false) (if u4756@ls/false (apply (lambda (u4758@p u4759@q) (if (= u4737@lev '0) (u4721@quasiappend u4758@p (u4727@quasi u4759@q u4737@lev)) (u4719@quasicons (u4719@quasicons (u4689@datum 'unquote-splicing) (u4727@quasi u4758@p (- u4737@lev '1))) (u4727@quasi u4759@q u4737@lev)))) u4756@ls/false) ((lambda (u4762@t) ((lambda (u4764@ls/false) (if u4764@ls/false (apply (lambda (u4766@p) (u4719@quasicons (u4689@datum 'quasiquote) (u4727@quasi (list u4766@p) (+ u4737@lev '1)))) u4764@ls/false) ((lambda (u4768@t) ((lambda (u4770@ls/false) (if u4770@ls/false (apply (lambda (u4772@p u4773@q) (u4719@quasicons (u4727@quasi u4772@p u4737@lev) (u4727@quasi u4773@q u4737@lev))) u4770@ls/false) ((lambda (u4776@t) ((lambda (u4778@ls/false) (if (and u4778@ls/false (apply (lambda (u4780@x) (not (u2219@stx? u4780@x))) u4778@ls/false)) (apply (lambda (u4782@x) (u4723@quasivector (u4725@vquasi u4782@x u4737@lev))) u4778@ls/false) ((lambda (u4784@t) ((lambda (u4786@ls/false) (if u4786@ls/false (apply (lambda (u4788@p) (list (u2654@scheme-stx 'quote) u4788@p)) u4786@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4784@t))) (u2772@syntax-dispatch u4784@t 'any))) u4776@t))) (u2772@syntax-dispatch u4776@t '#(vector each-any)))) u4768@t))) (u2772@syntax-dispatch u4768@t '(any . any)))) u4762@t))) (u2772@syntax-dispatch u4762@t '(#(scheme-id quasiquote) any)))) u4754@t))) (u2772@syntax-dispatch u4754@t '((#(scheme-id unquote-splicing) . each-any) . any)))) u4746@t))) (u2772@syntax-dispatch u4746@t '((#(scheme-id unquote) . each-any) . any)))) u4740@t))) (u2772@syntax-dispatch u4740@t '(#(scheme-id unquote) any)))) u4736@p))) (lambda (u4728@x) ((lambda (u4730@t) ((lambda (u4732@ls/false) (if u4732@ls/false (apply (lambda (u4734@e) (u4727@quasi u4734@e '0)) u4732@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4730@t))) (u2772@syntax-dispatch u4730@t '(_ any)))) u4728@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! u2756@quasisyntax-macro ((lambda () ((lambda (u4949@quasi) (begin (set! u4949@quasi (lambda (u4973@p u4974@lev) ((lambda (u4977@t) ((lambda (u4979@ls/false) (if u4979@ls/false (apply (lambda (u4981@p) (if (= u4974@lev '0) ((lambda (u4983@g) (values (list u4983@g) (list u4981@p) u4983@g)) (u1159@u923@gensym)) (call-with-values (lambda () (u4949@quasi u4981@p (- u4974@lev '1))) (lambda (u4988@u4985@lhs* u4989@u4986@rhs* u4990@u4987@p) ((lambda (u4994@p u4995@rhs* u4996@lhs*) (values u4996@lhs* u4995@rhs* (list 'unsyntax u4994@p))) u4990@u4987@p u4989@u4986@rhs* u4988@u4985@lhs*))))) u4979@ls/false) ((lambda (u5000@t) ((lambda (u5002@ls/false) (if (and u5002@ls/false (apply (lambda () (= u4974@lev '0)) u5002@ls/false)) (apply (lambda () (u3005@syntax-violation '#f '"incorrect use of unsyntax" u4973@p)) u5002@ls/false) ((lambda (u5004@t) ((lambda (u5006@ls/false) (if u5006@ls/false (apply (lambda (u5008@p* u5009@q) (call-with-values (lambda () (u4949@quasi u5009@q u4974@lev)) (lambda (u5015@u5012@lhs* u5016@u5013@rhs* u5017@u5014@q) ((lambda (u5021@q u5022@rhs* u5023@lhs*) (if (= u4974@lev '0) ((lambda (u5027@g*) (values (append u5027@g* u5023@lhs*) (append u5008@p* u5022@rhs*) (append u5027@g* u5021@q))) (map (lambda (u5029@x) (u1159@u923@gensym)) u5008@p*)) (call-with-values (lambda () (u4949@quasi u5008@p* (- u4974@lev '1))) (lambda (u5034@u5031@lhs2* u5035@u5032@rhs2* u5036@u5033@p*) ((lambda (u5040@p* u5041@rhs2* u5042@lhs2*) (values (append u5042@lhs2* u5023@lhs*) (append u5041@rhs2* u5022@rhs*) (cons (cons 'unsyntax u5040@p*) u5021@q))) u5036@u5033@p* u5035@u5032@rhs2* u5034@u5031@lhs2*))))) u5017@u5014@q u5016@u5013@rhs* u5015@u5012@lhs*)))) u5006@ls/false) ((lambda (u5046@t) ((lambda (u5048@ls/false) (if u5048@ls/false (apply (lambda (u5050@p* u5051@q) (call-with-values (lambda () (u4949@quasi u5051@q u4974@lev)) (lambda (u5057@u5054@lhs* u5058@u5055@rhs* u5059@u5056@q) ((lambda (u5063@q u5064@rhs* u5065@lhs*) (if (= u4974@lev '0) ((lambda (u5069@g*) (values (append (map (lambda (u5071@g) (cons u5071@g '(...))) u5069@g*) u5065@lhs*) (append u5050@p* u5064@rhs*) (append (apply append (map (lambda (u5073@g) (cons u5073@g '(...))) u5069@g*)) u5063@q))) (map (lambda (u5075@x) (u1159@u923@gensym)) u5050@p*)) (call-with-values (lambda () (u4949@quasi u5050@p* (- u4974@lev '1))) (lambda (u5080@u5077@lhs2* u5081@u5078@rhs2* u5082@u5079@p*) ((lambda (u5086@p* u5087@rhs2* u5088@lhs2*) (values (append u5088@lhs2* u5065@lhs*) (append u5087@rhs2* u5064@rhs*) (cons (cons 'unsyntax-splicing u5086@p*) u5063@q))) u5082@u5079@p* u5081@u5078@rhs2* u5080@u5077@lhs2*))))) u5059@u5056@q u5058@u5055@rhs* u5057@u5054@lhs*)))) u5048@ls/false) ((lambda (u5092@t) ((lambda (u5094@ls/false) (if (and u5094@ls/false (apply (lambda () (= u4974@lev '0)) u5094@ls/false)) (apply (lambda () (u3005@syntax-violation '#f '"incorrect use of unsyntax-splicing" u4973@p)) u5094@ls/false) ((lambda (u5096@t) ((lambda (u5098@ls/false) (if u5098@ls/false (apply (lambda (u5100@p) (call-with-values (lambda () (u4949@quasi u5100@p (+ u4974@lev '1))) (lambda (u5105@u5102@lhs* u5106@u5103@rhs* u5107@u5104@p) ((lambda (u5111@p u5112@rhs* u5113@lhs*) (values u5113@lhs* u5112@rhs* (list 'quasisyntax u5111@p))) u5107@u5104@p u5106@u5103@rhs* u5105@u5102@lhs*)))) u5098@ls/false) ((lambda (u5117@t) ((lambda (u5119@ls/false) (if u5119@ls/false (apply (lambda (u5121@p u5122@q) (call-with-values (lambda () (u4949@quasi u5121@p u4974@lev)) (lambda (u5131@u5125@lhs* u5132@u5126@rhs* u5133@u5127@p) (call-with-values (lambda () (u4949@quasi u5122@q u4974@lev)) (lambda (u5137@u5128@lhs2* u5138@u5129@rhs2* u5139@u5130@q) ((lambda (u5143@q u5144@rhs2* u5145@lhs2* u5146@p u5147@rhs* u5148@lhs*) (values (append u5145@lhs2* u5148@lhs*) (append u5144@rhs2* u5147@rhs*) (cons u5146@p u5143@q))) u5139@u5130@q u5138@u5129@rhs2* u5137@u5128@lhs2* u5133@u5127@p u5132@u5126@rhs* u5131@u5125@lhs*)))))) u5119@ls/false) ((lambda (u5155@t) ((lambda (u5157@ls/false) (if u5157@ls/false (apply (lambda (u5159@x*) (call-with-values (lambda () (u4949@quasi u5159@x* u4974@lev)) (lambda (u5164@u5161@lhs* u5165@u5162@rhs* u5166@u5163@x*) ((lambda (u5170@x* u5171@rhs* u5172@lhs*) (values u5172@lhs* u5171@rhs* (list->vector u5170@x*))) u5166@u5163@x* u5165@u5162@rhs* u5164@u5161@lhs*)))) u5157@ls/false) ((lambda (u5176@t) ((lambda (u5178@ls/false) (if u5178@ls/false (apply (lambda () (values '() '() u4973@p)) u5178@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5176@t))) (u2772@syntax-dispatch u5176@t '_))) u5155@t))) (u2772@syntax-dispatch u5155@t '#(vector each-any)))) u5117@t))) (u2772@syntax-dispatch u5117@t '(any . any)))) u5096@t))) (u2772@syntax-dispatch u5096@t '(#(scheme-id quasisyntax) any)))) u5092@t))) (u2772@syntax-dispatch u5092@t '#(scheme-id unsyntax-splicing)))) u5046@t))) (u2772@syntax-dispatch u5046@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) u5004@t))) (u2772@syntax-dispatch u5004@t '((#(scheme-id unsyntax) . each-any) . any)))) u5000@t))) (u2772@syntax-dispatch u5000@t '#(scheme-id unsyntax)))) u4977@t))) (u2772@syntax-dispatch u4977@t '(#(scheme-id unsyntax) any)))) u4973@p))) (lambda (u4950@x) ((lambda (u4952@t) ((lambda (u4954@ls/false) (if u4954@ls/false (apply (lambda (u4956@e) (call-with-values (lambda () (u4949@quasi u4956@e '0)) (lambda (u4961@u4958@lhs* u4962@u4959@rhs* u4963@u4960@v) ((lambda (u4967@v u4968@rhs* u4969@lhs*) (u2698@bless (list 'syntax-case (cons 'list u4968@rhs*) '() (list u4969@lhs* (list 'syntax u4967@v))))) u4963@u4960@v u4962@u4959@rhs* u4961@u4958@lhs*)))) u4954@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u4952@t))) (u2772@syntax-dispatch u4952@t '(_ any)))) u4950@x)))) '#f)))) (set! u2758@define-struct-macro (lambda (u5180@stx) (u3005@syntax-violation '#f '"define-struct not supported" u5180@stx))) (set! u2760@define-record-type-macro (lambda (u5182@x) ((lambda (u5185@id u5187@get-record-name u5189@get-record-constructor-name u5191@get-record-predicate-name u5193@get-clause u5195@foo-rtd-code u5197@parent-rtd-code u5199@parent-rcd-code u5201@foo-rcd-code u5203@get-protocol-code u5205@get-fields u5207@get-mutator-indices u5209@get-mutators u5211@get-accessors u5213@enumerate u5215@do-define-record u5217@verify-clauses) (begin (set! u5185@id (lambda (u5684@ctxt . u5686@str*) (u3009@datum->syntax u5684@ctxt (string->symbol (apply string-append (map (lambda (u5688@x) (if (symbol? u5688@x) (symbol->string u5688@x) (if (string? u5688@x) u5688@x (assertion-violation 'define-record-type '"BUG")))) u5686@str*)))))) (set! u5187@get-record-name (lambda (u5666@spec) ((lambda (u5668@t) ((lambda (u5670@ls/false) (if u5670@ls/false (apply (lambda (u5672@foo u5673@make-foo u5674@foo?) u5672@foo) u5670@ls/false) ((lambda (u5678@t) ((lambda (u5680@ls/false) (if u5680@ls/false (apply (lambda (u5682@foo) u5682@foo) u5680@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5678@t))) (u2772@syntax-dispatch u5678@t 'any))) u5668@t))) (u2772@syntax-dispatch u5668@t '(any any any)))) u5666@spec))) (set! u5189@get-record-constructor-name (lambda (u5646@spec) ((lambda (u5648@t) ((lambda (u5650@ls/false) (if u5650@ls/false (apply (lambda (u5652@foo u5653@make-foo u5654@foo?) u5653@make-foo) u5650@ls/false) ((lambda (u5658@t) ((lambda (u5660@ls/false) (if (and u5660@ls/false (apply (lambda (u5662@foo) (u2275@id? u5662@foo)) u5660@ls/false)) (apply (lambda (u5664@foo) (u5185@id u5664@foo '"make-" (u2297@stx->datum u5664@foo))) u5660@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5658@t))) (u2772@syntax-dispatch u5658@t 'any))) u5648@t))) (u2772@syntax-dispatch u5648@t '(any any any)))) u5646@spec))) (set! u5191@get-record-predicate-name (lambda (u5626@spec) ((lambda (u5628@t) ((lambda (u5630@ls/false) (if u5630@ls/false (apply (lambda (u5632@foo u5633@make-foo u5634@foo?) u5634@foo?) u5630@ls/false) ((lambda (u5638@t) ((lambda (u5640@ls/false) (if (and u5640@ls/false (apply (lambda (u5642@foo) (u2275@id? u5642@foo)) u5640@ls/false)) (apply (lambda (u5644@foo) (u5185@id u5644@foo (u2297@stx->datum u5644@foo) '"?")) u5640@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5638@t))) (u2772@syntax-dispatch u5638@t 'any))) u5628@t))) (u2772@syntax-dispatch u5628@t '(any any any)))) u5626@spec))) (set! u5193@get-clause (lambda (u5608@id u5609@ls) ((lambda (u5612@t) ((lambda (u5614@ls/false) (if u5614@ls/false (apply (lambda () '#f) u5614@ls/false) ((lambda (u5616@t) ((lambda (u5618@ls/false) (if u5618@ls/false (apply (lambda (u5620@x u5621@rest u5622@ls) (if (u2283@free-id=? (u2698@bless u5608@id) u5620@x) (cons u5620@x u5621@rest) (u5193@get-clause u5608@id u5622@ls))) u5618@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5616@t))) (u2772@syntax-dispatch u5616@t '((any . any) . any)))) u5612@t))) (u2772@syntax-dispatch u5612@t '()))) u5609@ls))) (set! u5195@foo-rtd-code (lambda (u5526@name u5527@clause* u5528@parent-rtd-code) ((lambda (u5533@convert-field-spec*) (begin (set! u5533@convert-field-spec* (lambda (u5582@ls) (list->vector (map (lambda (u5584@x) ((lambda (u5586@t) ((lambda (u5588@ls/false) (if u5588@ls/false (apply (lambda (u5590@name u5591@rest) (list 'mutable u5590@name)) u5588@ls/false) ((lambda (u5594@t) ((lambda (u5596@ls/false) (if u5596@ls/false (apply (lambda (u5598@name u5599@rest) (list 'immutable u5598@name)) u5596@ls/false) ((lambda (u5602@t) ((lambda (u5604@ls/false) (if u5604@ls/false (apply (lambda (u5606@name) (list 'immutable u5606@name)) u5604@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5602@t))) (u2772@syntax-dispatch u5602@t 'any))) u5594@t))) (u2772@syntax-dispatch u5594@t '(#(scheme-id immutable) any . any)))) u5586@t))) (u2772@syntax-dispatch u5586@t '(#(scheme-id mutable) any . any)))) u5584@x)) u5582@ls)))) ((lambda (u5534@uid-code u5535@sealed? u5536@opaque? u5537@fields) (u2698@bless (list 'make-record-type-descriptor (list 'quote u5526@name) u5528@parent-rtd-code u5534@uid-code u5535@sealed? u5536@opaque? u5537@fields))) ((lambda (u5542@t) ((lambda (u5544@ls/false) (if u5544@ls/false (apply (lambda () (list 'quote (u1159@u923@gensym))) u5544@ls/false) ((lambda (u5546@t) ((lambda (u5548@ls/false) (if u5548@ls/false (apply (lambda (u5550@uid) (list 'quote u5550@uid)) u5548@ls/false) ((lambda (u5552@t) ((lambda (u5554@ls/false) (if u5554@ls/false (apply (lambda () '#f) u5554@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5552@t))) (u2772@syntax-dispatch u5552@t '_))) u5546@t))) (u2772@syntax-dispatch u5546@t '(_ any)))) u5542@t))) (u2772@syntax-dispatch u5542@t '(_)))) (u5193@get-clause 'nongenerative u5527@clause*)) ((lambda (u5556@t) ((lambda (u5558@ls/false) (if u5558@ls/false (apply (lambda () '#t) u5558@ls/false) ((lambda (u5560@t) ((lambda (u5562@ls/false) (if u5562@ls/false (apply (lambda () '#f) u5562@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5560@t))) (u2772@syntax-dispatch u5560@t '_))) u5556@t))) (u2772@syntax-dispatch u5556@t '(_ #(atom #t))))) (u5193@get-clause 'sealed u5527@clause*)) ((lambda (u5564@t) ((lambda (u5566@ls/false) (if u5566@ls/false (apply (lambda () '#t) u5566@ls/false) ((lambda (u5568@t) ((lambda (u5570@ls/false) (if u5570@ls/false (apply (lambda () '#f) u5570@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5568@t))) (u2772@syntax-dispatch u5568@t '_))) u5564@t))) (u2772@syntax-dispatch u5564@t '(_ #(atom #t))))) (u5193@get-clause 'opaque u5527@clause*)) ((lambda (u5572@t) ((lambda (u5574@ls/false) (if u5574@ls/false (apply (lambda (u5576@field-spec*) (list 'quote (u5533@convert-field-spec* u5576@field-spec*))) u5574@ls/false) ((lambda (u5578@t) ((lambda (u5580@ls/false) (if u5580@ls/false (apply (lambda () ''#()) u5580@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5578@t))) (u2772@syntax-dispatch u5578@t '_))) u5572@t))) (u2772@syntax-dispatch u5572@t '(_ . each-any)))) (u5193@get-clause 'fields u5527@clause*))))) '#f))) (set! u5197@parent-rtd-code (lambda (u5502@clause*) ((lambda (u5504@t) ((lambda (u5506@ls/false) (if u5506@ls/false (apply (lambda (u5508@name) (list 'record-type-descriptor u5508@name)) u5506@ls/false) ((lambda (u5510@t) ((lambda (u5512@ls/false) (if u5512@ls/false (apply (lambda () ((lambda (u5514@t) ((lambda (u5516@ls/false) (if u5516@ls/false (apply (lambda (u5518@rtd u5519@rcd) u5518@rtd) u5516@ls/false) ((lambda (u5522@t) ((lambda (u5524@ls/false) (if u5524@ls/false (apply (lambda () '#f) u5524@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5522@t))) (u2772@syntax-dispatch u5522@t '#(atom #f)))) u5514@t))) (u2772@syntax-dispatch u5514@t '(_ any any)))) (u5193@get-clause 'parent-rtd u5502@clause*))) u5512@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5510@t))) (u2772@syntax-dispatch u5510@t '#(atom #f)))) u5504@t))) (u2772@syntax-dispatch u5504@t '(_ any)))) (u5193@get-clause 'parent u5502@clause*)))) (set! u5199@parent-rcd-code (lambda (u5478@clause*) ((lambda (u5480@t) ((lambda (u5482@ls/false) (if u5482@ls/false (apply (lambda (u5484@name) (list 'record-constructor-descriptor u5484@name)) u5482@ls/false) ((lambda (u5486@t) ((lambda (u5488@ls/false) (if u5488@ls/false (apply (lambda () ((lambda (u5490@t) ((lambda (u5492@ls/false) (if u5492@ls/false (apply (lambda (u5494@rtd u5495@rcd) u5495@rcd) u5492@ls/false) ((lambda (u5498@t) ((lambda (u5500@ls/false) (if u5500@ls/false (apply (lambda () '#f) u5500@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5498@t))) (u2772@syntax-dispatch u5498@t '#(atom #f)))) u5490@t))) (u2772@syntax-dispatch u5490@t '(_ any any)))) (u5193@get-clause 'parent-rtd u5478@clause*))) u5488@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5486@t))) (u2772@syntax-dispatch u5486@t '#(atom #f)))) u5480@t))) (u2772@syntax-dispatch u5480@t '(_ any)))) (u5193@get-clause 'parent u5478@clause*)))) (set! u5201@foo-rcd-code (lambda (u5470@clause* u5471@foo-rtd u5472@protocol u5473@parent-rcd-code) (list 'make-record-constructor-descriptor u5471@foo-rtd u5473@parent-rcd-code u5472@protocol))) (set! u5203@get-protocol-code (lambda (u5458@clause*) ((lambda (u5460@t) ((lambda (u5462@ls/false) (if u5462@ls/false (apply (lambda (u5464@expr) u5464@expr) u5462@ls/false) ((lambda (u5466@t) ((lambda (u5468@ls/false) (if u5468@ls/false (apply (lambda () '#f) u5468@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5466@t))) (u2772@syntax-dispatch u5466@t '_))) u5460@t))) (u2772@syntax-dispatch u5460@t '(_ any)))) (u5193@get-clause 'protocol u5458@clause*)))) (set! u5205@get-fields (lambda (u5440@clause*) ((lambda (u5442@t) ((lambda (u5444@ls/false) (if u5444@ls/false (apply (lambda () '()) u5444@ls/false) ((lambda (u5446@t) ((lambda (u5448@ls/false) (if u5448@ls/false (apply (lambda (u5450@f*) u5450@f*) u5448@ls/false) ((lambda (u5452@t) ((lambda (u5454@ls/false) (if u5454@ls/false (apply (lambda (u5456@rest) (u5205@get-fields u5456@rest)) u5454@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5452@t))) (u2772@syntax-dispatch u5452@t '(_ . any)))) u5446@t))) (u2772@syntax-dispatch u5446@t '((#(scheme-id fields) . each-any) . _)))) u5442@t))) (u2772@syntax-dispatch u5442@t '()))) u5440@clause*))) (set! u5207@get-mutator-indices (lambda (u5416@fields) ((letrec ((u5418@f (lambda (u5420@fields u5421@i) ((lambda (u5424@t) ((lambda (u5426@ls/false) (if u5426@ls/false (apply (lambda () '()) u5426@ls/false) ((lambda (u5428@t) ((lambda (u5430@ls/false) (if u5430@ls/false (apply (lambda (u5432@rest) (cons u5421@i (u5418@f u5432@rest (+ u5421@i '1)))) u5430@ls/false) ((lambda (u5434@t) ((lambda (u5436@ls/false) (if u5436@ls/false (apply (lambda (u5438@rest) (u5418@f u5438@rest (+ u5421@i '1))) u5436@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5434@t))) (u2772@syntax-dispatch u5434@t '(_ . any)))) u5428@t))) (u2772@syntax-dispatch u5428@t '((#(scheme-id mutable) . _) . any)))) u5424@t))) (u2772@syntax-dispatch u5424@t '()))) u5420@fields)))) u5418@f) u5416@fields '0))) (set! u5209@get-mutators (lambda (u5374@foo u5375@fields) ((lambda (u5379@gen-name) (begin (set! u5379@gen-name (lambda (u5414@x) (u3009@datum->syntax u5374@foo (string->symbol (string-append (symbol->string (u3011@syntax->datum u5374@foo)) '"-" (symbol->string (u3011@syntax->datum u5414@x)) '"-set!"))))) ((letrec ((u5380@f (lambda (u5382@fields) ((lambda (u5384@t) ((lambda (u5386@ls/false) (if u5386@ls/false (apply (lambda () '()) u5386@ls/false) ((lambda (u5388@t) ((lambda (u5390@ls/false) (if u5390@ls/false (apply (lambda (u5392@name u5393@accessor u5394@mutator u5395@rest) (cons u5394@mutator (u5380@f u5395@rest))) u5390@ls/false) ((lambda (u5400@t) ((lambda (u5402@ls/false) (if u5402@ls/false (apply (lambda (u5404@name u5405@rest) (cons (u5379@gen-name u5404@name) (u5380@f u5405@rest))) u5402@ls/false) ((lambda (u5408@t) ((lambda (u5410@ls/false) (if u5410@ls/false (apply (lambda (u5412@rest) (u5380@f u5412@rest)) u5410@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5408@t))) (u2772@syntax-dispatch u5408@t '(_ . any)))) u5400@t))) (u2772@syntax-dispatch u5400@t '((#(scheme-id mutable) any) . any)))) u5388@t))) (u2772@syntax-dispatch u5388@t '((#(scheme-id mutable) any any any) . any)))) u5384@t))) (u2772@syntax-dispatch u5384@t '()))) u5382@fields)))) u5380@f) u5375@fields))) '#f))) (set! u5211@get-accessors (lambda (u5306@foo u5307@fields) ((lambda (u5311@gen-name) (begin (set! u5311@gen-name (lambda (u5372@x) (u3009@datum->syntax u5306@foo (string->symbol (string-append (symbol->string (u3011@syntax->datum u5306@foo)) '"-" (symbol->string (u3011@syntax->datum u5372@x))))))) (map (lambda (u5312@field) ((lambda (u5314@t) ((lambda (u5316@ls/false) (if (and u5316@ls/false (apply (lambda (u5318@name u5319@accessor u5320@mutator) (u2275@id? u5319@accessor)) u5316@ls/false)) (apply (lambda (u5324@name u5325@accessor u5326@mutator) u5325@accessor) u5316@ls/false) ((lambda (u5330@t) ((lambda (u5332@ls/false) (if (and u5332@ls/false (apply (lambda (u5334@name u5335@accessor) (u2275@id? u5335@accessor)) u5332@ls/false)) (apply (lambda (u5338@name u5339@accessor) u5339@accessor) u5332@ls/false) ((lambda (u5342@t) ((lambda (u5344@ls/false) (if (and u5344@ls/false (apply (lambda (u5346@name) (u2275@id? u5346@name)) u5344@ls/false)) (apply (lambda (u5348@name) (u5311@gen-name u5348@name)) u5344@ls/false) ((lambda (u5350@t) ((lambda (u5352@ls/false) (if (and u5352@ls/false (apply (lambda (u5354@name) (u2275@id? u5354@name)) u5352@ls/false)) (apply (lambda (u5356@name) (u5311@gen-name u5356@name)) u5352@ls/false) ((lambda (u5358@t) ((lambda (u5360@ls/false) (if (and u5360@ls/false (apply (lambda (u5362@name) (u2275@id? u5362@name)) u5360@ls/false)) (apply (lambda (u5364@name) (u5311@gen-name u5364@name)) u5360@ls/false) ((lambda (u5366@t) ((lambda (u5368@ls/false) (if u5368@ls/false (apply (lambda (u5370@others) (u3005@syntax-violation '#f '"invalid field spec" u5312@field)) u5368@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5366@t))) (u2772@syntax-dispatch u5366@t 'any))) u5358@t))) (u2772@syntax-dispatch u5358@t 'any))) u5350@t))) (u2772@syntax-dispatch u5350@t '(#(scheme-id immutable) any)))) u5342@t))) (u2772@syntax-dispatch u5342@t '(#(scheme-id mutable) any)))) u5330@t))) (u2772@syntax-dispatch u5330@t '(#(scheme-id immutable) any any)))) u5314@t))) (u2772@syntax-dispatch u5314@t '(#(scheme-id mutable) any any any)))) u5312@field)) u5307@fields))) '#f))) (set! u5213@enumerate (lambda (u5298@ls) ((letrec ((u5300@f (lambda (u5302@ls u5303@i) (if (null? u5302@ls) '() (cons u5303@i (u5300@f (cdr u5302@ls) (+ u5303@i '1))))))) u5300@f) u5298@ls '0))) (set! u5215@do-define-record (lambda (u5258@namespec u5259@clause*) ((lambda (u5262@foo) ((lambda (u5264@foo-rtd) ((lambda (u5266@foo-rcd) ((lambda (u5268@protocol) ((lambda (u5270@make-foo) ((lambda (u5272@fields) ((lambda (u5274@idx*) ((lambda (u5276@foo-x*) ((lambda (u5278@set-foo-x!*) ((lambda (u5280@set-foo-idx*) ((lambda (u5282@foo?) ((lambda (u5284@foo-rtd-code) ((lambda (u5286@foo-rcd-code) ((lambda (u5288@protocol-code) ((lambda () (u2698@bless (cons 'begin (cons (list 'define u5264@foo-rtd u5284@foo-rtd-code) (cons (list 'define u5268@protocol u5288@protocol-code) (cons (list 'define u5266@foo-rcd u5286@foo-rcd-code) (cons (list 'define-syntax u5262@foo (list 'list ''$rtd (list 'syntax u5264@foo-rtd) (list 'syntax u5266@foo-rcd))) (cons (list 'define u5282@foo? (list 'record-predicate u5264@foo-rtd)) (cons (list 'define u5270@make-foo (list 'record-constructor u5266@foo-rcd)) (append (map (lambda (u5290@foo-x u5291@idx) (list 'define u5290@foo-x (list 'record-accessor u5264@foo-rtd u5291@idx))) u5276@foo-x* u5274@idx*) (map (lambda (u5294@set-foo-x! u5295@idx) (list 'define u5294@set-foo-x! (list 'record-mutator u5264@foo-rtd u5295@idx))) u5278@set-foo-x!* u5280@set-foo-idx*))))))))))))) (u5203@get-protocol-code u5259@clause*))) (u5201@foo-rcd-code u5259@clause* u5264@foo-rtd u5268@protocol (u5199@parent-rcd-code u5259@clause*)))) (u5195@foo-rtd-code u5262@foo u5259@clause* (u5197@parent-rtd-code u5259@clause*)))) (u5191@get-record-predicate-name u5258@namespec))) (u5207@get-mutator-indices u5272@fields))) (u5209@get-mutators u5262@foo u5272@fields))) (u5211@get-accessors u5262@foo u5272@fields))) (u5213@enumerate u5272@fields))) (u5205@get-fields u5259@clause*))) (u5189@get-record-constructor-name u5258@namespec))) (u1159@u923@gensym))) (u1159@u923@gensym))) (u1159@u923@gensym))) (u5187@get-record-name u5258@namespec)))) (set! u5217@verify-clauses (lambda (u5226@x u5227@cls*) ((lambda (u5231@valid-kwds u5233@free-id-member?) (begin (set! u5231@valid-kwds (map u2698@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! u5233@free-id-member? (lambda (u5254@x u5255@ls) (and (pair? u5255@ls) (or (u2283@free-id=? u5254@x (car u5255@ls)) (u5233@free-id-member? u5254@x (cdr u5255@ls)))))) ((letrec ((u5234@f (lambda (u5236@cls* u5237@seen*) (if (not (null? u5236@cls*)) ((lambda (u5240@t) ((lambda (u5242@ls/false) (if u5242@ls/false (apply (lambda (u5244@kwd u5245@rest) (if (or (not (u2275@id? u5244@kwd)) (not (u5233@free-id-member? u5244@kwd u5231@valid-kwds))) (u3005@syntax-violation '#f '"not a valid define-record-type keyword" u5244@kwd) (if (u2289@bound-id-member? u5244@kwd u5237@seen*) (u3005@syntax-violation '#f '"duplicate use of keyword " u5226@x u5244@kwd) (u5234@f (cdr u5236@cls*) (cons u5244@kwd u5237@seen*))))) u5242@ls/false) ((lambda (u5248@t) ((lambda (u5250@ls/false) (if u5250@ls/false (apply (lambda (u5252@cls) (u3005@syntax-violation '#f '"malformed define-record-type clause" u5252@cls)) u5250@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5248@t))) (u2772@syntax-dispatch u5248@t 'any))) u5240@t))) (u2772@syntax-dispatch u5240@t '(any . any)))) (car u5236@cls*)) (void))))) u5234@f) u5227@cls* '()))) '#f '#f))) ((lambda (u5218@t) ((lambda (u5220@ls/false) (if u5220@ls/false (apply (lambda (u5222@namespec u5223@clause*) (begin (u5217@verify-clauses u5182@x u5223@clause*) (u5215@do-define-record u5222@namespec u5223@clause*))) u5220@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5218@t))) (u2772@syntax-dispatch u5218@t '(_ any . each-any)))) u5182@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! u2762@define-condition-type-macro (lambda (u5690@x) ((lambda (u5693@mkname) (begin (set! u5693@mkname (lambda (u5738@name u5739@suffix) (u3009@datum->syntax u5738@name (string->symbol (string-append (symbol->string (u3011@syntax->datum u5738@name)) u5739@suffix))))) ((lambda (u5694@t) ((lambda (u5696@ls/false) (if (and u5696@ls/false (apply (lambda (u5698@ctxt u5699@name u5700@super u5701@constructor u5702@predicate u5703@field* u5704@accessor*) (and (u2275@id? u5699@name) (u2275@id? u5700@super) (u2275@id? u5701@constructor) (u2275@id? u5702@predicate) (for-all u2275@id? u5703@field*) (for-all u2275@id? u5704@accessor*))) u5696@ls/false)) (apply (lambda (u5712@ctxt u5713@name u5714@super u5715@constructor u5716@predicate u5717@field* u5718@accessor*) ((lambda (u5726@aux-accessor*) (u2698@bless (cons 'begin (cons (cons 'define-record-type (cons (list u5713@name u5715@constructor (u1159@u923@gensym)) (cons (list 'parent u5714@super) (cons (cons 'fields (map (lambda (u5728@field u5729@aux) (list 'immutable u5728@field u5729@aux)) u5717@field* u5726@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define u5716@predicate (list 'condition-predicate (list 'record-type-descriptor u5713@name))) (map (lambda (u5732@accessor u5733@aux) (list 'define u5732@accessor (list 'condition-accessor (list 'record-type-descriptor u5713@name) u5733@aux))) u5718@accessor* u5726@aux-accessor*)))))) (map (lambda (u5736@x) (u1159@u923@gensym)) u5718@accessor*))) u5696@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5694@t))) (u2772@syntax-dispatch u5694@t '(any any any any any . #(each (any any)))))) u5690@x))) '#f))) (set! u2764@incorrect-usage-macro (lambda (u5742@e) (u3005@syntax-violation '#f '"incorrect usage of auxiliary keyword" u5742@e))) (set! u2766@parameterize-macro (lambda (u5744@e) ((lambda (u5746@t) ((lambda (u5748@ls/false) (if u5748@ls/false (apply (lambda (u5750@b u5751@b*) (u2698@bless (cons 'let (cons '() (cons u5750@b u5751@b*))))) u5748@ls/false) ((lambda (u5754@t) ((lambda (u5756@ls/false) (if u5756@ls/false (apply (lambda (u5758@olhs* u5759@orhs* u5760@b u5761@b*) ((lambda (u5766@lhs* u5767@rhs*) (u2698@bless (cons (list 'lambda (append u5766@lhs* u5767@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (u5770@lhs u5771@rhs) (list 'let (list (list 't (list u5770@lhs))) (list u5770@lhs u5771@rhs) (cons 'set! (cons u5771@rhs '(t))))) u5766@lhs* u5767@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons u5760@b u5761@b*))) '(swap)))))) (append u5758@olhs* u5759@orhs*)))) (u2987@generate-temporaries u5758@olhs*) (u2987@generate-temporaries u5759@orhs*))) u5756@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5754@t))) (u2772@syntax-dispatch u5754@t '(_ #(each (any any)) any . each-any)))) u5746@t))) (u2772@syntax-dispatch u5746@t '(_ () any . each-any)))) u5744@e))) (set! u2768@foreign-call-transformer (lambda (u5774@e u5775@r u5776@mr) ((lambda (u5780@t) ((lambda (u5782@ls/false) (if u5782@ls/false (apply (lambda (u5784@name u5785@arg*) (cons 'foreign-call (cons (u2806@chi-expr u5784@name u5775@r u5776@mr) (u2802@chi-expr* u5785@arg* u5775@r u5776@mr)))) u5782@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5780@t))) (u2772@syntax-dispatch u5780@t '(_ any . each-any)))) u5774@e))) (set! u2770@convert-pattern (lambda (u5788@pattern u5789@keys) ((lambda (u5793@cvt* u5795@cvt) (begin (set! u5793@cvt* (lambda (u5938@p* u5939@n u5940@ids) (if (null? u5938@p*) (values '() u5940@ids) (call-with-values (lambda () (u5793@cvt* (cdr u5938@p*) u5939@n u5940@ids)) (lambda (u5946@u5944@y u5947@u5945@ids) ((lambda (u5950@ids u5951@y) (call-with-values (lambda () (u5795@cvt (car u5938@p*) u5939@n u5950@ids)) (lambda (u5956@u5954@x u5957@u5955@ids) ((lambda (u5960@ids u5961@x) (values (cons u5961@x u5951@y) u5960@ids)) u5957@u5955@ids u5956@u5954@x)))) u5947@u5945@ids u5946@u5944@y)))))) (set! u5795@cvt (lambda (u5796@p u5797@n u5798@ids) ((lambda (u5802@t) ((lambda (u5804@ls/false) (if (and u5804@ls/false (apply (lambda (u5806@id) (u2275@id? u5806@id)) u5804@ls/false)) (apply (lambda (u5808@id) (if (u2289@bound-id-member? u5796@p u5789@keys) (values (vector 'free-id u5796@p) u5798@ids) (if (u2283@free-id=? u5796@p (u2654@scheme-stx '_)) (values '_ u5798@ids) (values 'any (cons (cons u5796@p u5797@n) u5798@ids))))) u5804@ls/false) ((lambda (u5810@t) ((lambda (u5812@ls/false) (if (and u5812@ls/false (apply (lambda (u5814@p u5815@dots) (u2774@ellipsis? u5815@dots)) u5812@ls/false)) (apply (lambda (u5818@p u5819@dots) (call-with-values (lambda () (u5795@cvt u5818@p (+ u5797@n '1) u5798@ids)) (lambda (u5824@u5822@p u5825@u5823@ids) ((lambda (u5828@ids u5829@p) (values (if (eq? u5829@p 'any) 'each-any (vector 'each u5829@p)) u5828@ids)) u5825@u5823@ids u5824@u5822@p)))) u5812@ls/false) ((lambda (u5832@t) ((lambda (u5834@ls/false) (if (and u5834@ls/false (apply (lambda (u5836@x u5837@dots u5838@ys u5839@z) (u2774@ellipsis? u5837@dots)) u5834@ls/false)) (apply (lambda (u5844@x u5845@dots u5846@ys u5847@z) (call-with-values (lambda () (u5795@cvt u5847@z u5797@n u5798@ids)) (lambda (u5854@u5852@z u5855@u5853@ids) ((lambda (u5858@ids u5859@z) (call-with-values (lambda () (u5793@cvt* u5846@ys u5797@n u5858@ids)) (lambda (u5864@u5862@ys u5865@u5863@ids) ((lambda (u5868@ids u5869@ys) (call-with-values (lambda () (u5795@cvt u5844@x (+ u5797@n '1) u5868@ids)) (lambda (u5874@u5872@x u5875@u5873@ids) ((lambda (u5878@ids u5879@x) (values (vector 'each+ u5879@x (reverse u5869@ys) u5859@z) u5878@ids)) u5875@u5873@ids u5874@u5872@x)))) u5865@u5863@ids u5864@u5862@ys)))) u5855@u5853@ids u5854@u5852@z)))) u5834@ls/false) ((lambda (u5882@t) ((lambda (u5884@ls/false) (if u5884@ls/false (apply (lambda (u5886@x u5887@y) (call-with-values (lambda () (u5795@cvt u5887@y u5797@n u5798@ids)) (lambda (u5892@u5890@y u5893@u5891@ids) ((lambda (u5896@ids u5897@y) (call-with-values (lambda () (u5795@cvt u5886@x u5797@n u5896@ids)) (lambda (u5902@u5900@x u5903@u5901@ids) ((lambda (u5906@ids u5907@x) (values (cons u5907@x u5897@y) u5906@ids)) u5903@u5901@ids u5902@u5900@x)))) u5893@u5891@ids u5892@u5890@y)))) u5884@ls/false) ((lambda (u5910@t) ((lambda (u5912@ls/false) (if u5912@ls/false (apply (lambda () (values '() u5798@ids)) u5912@ls/false) ((lambda (u5914@t) ((lambda (u5916@ls/false) (if (and u5916@ls/false (apply (lambda (u5918@p) (not (u2219@stx? u5918@p))) u5916@ls/false)) (apply (lambda (u5920@p) (call-with-values (lambda () (u5795@cvt u5920@p u5797@n u5798@ids)) (lambda (u5924@u5922@p u5925@u5923@ids) ((lambda (u5928@ids u5929@p) (values (vector 'vector u5929@p) u5928@ids)) u5925@u5923@ids u5924@u5922@p)))) u5916@ls/false) ((lambda (u5932@t) ((lambda (u5934@ls/false) (if u5934@ls/false (apply (lambda (u5936@datum) (values (vector 'atom (u2297@stx->datum u5936@datum)) u5798@ids)) u5934@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u5932@t))) (u2772@syntax-dispatch u5932@t 'any))) u5914@t))) (u2772@syntax-dispatch u5914@t '#(vector each-any)))) u5910@t))) (u2772@syntax-dispatch u5910@t '()))) u5882@t))) (u2772@syntax-dispatch u5882@t '(any . any)))) u5832@t))) (u2772@syntax-dispatch u5832@t '(any any . #(each+ any () any))))) u5810@t))) (u2772@syntax-dispatch u5810@t '(any any)))) u5802@t))) (u2772@syntax-dispatch u5802@t 'any))) u5796@p))) (u5795@cvt u5788@pattern '0 '()))) '#f '#f))) (set! u2772@syntax-dispatch ((lambda () ((lambda (u5965@stx^ u5967@match-each u5969@match-each+ u5971@match-each-any u5973@match-empty u5975@combine u5977@match* u5979@match) (begin (set! u5965@stx^ (lambda (u6166@e u6167@m* u6168@s* u6169@ae*) (if (and (null? u6167@m*) (null? u6168@s*) (null? u6169@ae*)) u6166@e (u2251@mkstx u6166@e u6167@m* u6168@s* u6169@ae*)))) (set! u5967@match-each (lambda (u6137@e u6138@p u6139@m* u6140@s* u6141@ae*) (if (pair? u6137@e) ((lambda (u6147@first) (and u6147@first ((lambda (u6149@rest) (and u6149@rest (cons u6147@first u6149@rest))) (u5967@match-each (cdr u6137@e) u6138@p u6139@m* u6140@s* u6141@ae*)))) (u5979@match (car u6137@e) u6138@p u6139@m* u6140@s* u6141@ae* '())) (if (null? u6137@e) '() (if (u2219@stx? u6137@e) (and (not (u2145@top-marked? u6139@m*)) (call-with-values (lambda () (u2249@join-wraps u6139@m* u6140@s* u6141@ae* u6137@e)) (lambda (u6154@u6151@m* u6155@u6152@s* u6156@u6153@ae*) ((lambda (u6160@ae* u6161@s* u6162@m*) (u5967@match-each (u2223@stx-expr u6137@e) u6138@p u6162@m* u6161@s* u6160@ae*)) u6156@u6153@ae* u6155@u6152@s* u6154@u6151@m*)))) (if (u1162@u929@annotation? u6137@e) (u5967@match-each (u1164@u933@annotation-expression u6137@e) u6138@p u6139@m* u6140@s* u6141@ae*) '#f)))))) (set! u5969@match-each+ (lambda (u6079@e u6080@x-pat u6081@y-pat u6082@z-pat u6083@m* u6084@s* u6085@ae* u6086@r) ((letrec ((u6095@f (lambda (u6097@e u6098@m* u6099@s* u6100@ae*) (if (pair? u6097@e) (call-with-values (lambda () (u6095@f (cdr u6097@e) u6098@m* u6099@s* u6100@ae*)) (lambda (u6108@u6105@xr* u6109@u6106@y-pat u6110@u6107@r) ((lambda (u6114@r u6115@y-pat u6116@xr*) (if u6114@r (if (null? u6115@y-pat) ((lambda (u6120@xr) (if u6120@xr (values (cons u6120@xr u6116@xr*) u6115@y-pat u6114@r) (values '#f '#f '#f))) (u5979@match (car u6097@e) u6080@x-pat u6098@m* u6099@s* u6100@ae* '())) (values '() (cdr u6115@y-pat) (u5979@match (car u6097@e) (car u6115@y-pat) u6098@m* u6099@s* u6100@ae* u6114@r))) (values '#f '#f '#f))) u6110@u6107@r u6109@u6106@y-pat u6108@u6105@xr*))) (if (u2219@stx? u6097@e) (if (u2145@top-marked? u6098@m*) (values '() u6081@y-pat (u5979@match u6097@e u6082@z-pat u6098@m* u6099@s* u6100@ae* u6086@r)) (call-with-values (lambda () (u2249@join-wraps u6098@m* u6099@s* u6100@ae* u6097@e)) (lambda (u6125@u6122@m* u6126@u6123@s* u6127@u6124@ae*) ((lambda (u6131@ae* u6132@s* u6133@m*) (u6095@f (u2223@stx-expr u6097@e) u6133@m* u6132@s* u6131@ae*)) u6127@u6124@ae* u6126@u6123@s* u6125@u6122@m*)))) (if (u1162@u929@annotation? u6097@e) (u6095@f (u1164@u933@annotation-expression u6097@e) u6098@m* u6099@s* u6100@ae*) (values '() u6081@y-pat (u5979@match u6097@e u6082@z-pat u6098@m* u6099@s* u6100@ae* u6086@r)))))))) u6095@f) u6079@e u6083@m* u6084@s* u6085@ae*))) (set! u5971@match-each-any (lambda (u6054@e u6055@m* u6056@s* u6057@ae*) (if (pair? u6054@e) ((lambda (u6062@l) (and u6062@l (cons (u5965@stx^ (car u6054@e) u6055@m* u6056@s* u6057@ae*) u6062@l))) (u5971@match-each-any (cdr u6054@e) u6055@m* u6056@s* u6057@ae*)) (if (null? u6054@e) '() (if (u2219@stx? u6054@e) (and (not (u2145@top-marked? u6055@m*)) (call-with-values (lambda () (u2249@join-wraps u6055@m* u6056@s* u6057@ae* u6054@e)) (lambda (u6067@u6064@m* u6068@u6065@s* u6069@u6066@ae*) ((lambda (u6073@ae* u6074@s* u6075@m*) (u5971@match-each-any (u2223@stx-expr u6054@e) u6075@m* u6074@s* u6073@ae*)) u6069@u6066@ae* u6068@u6065@s* u6067@u6064@m*)))) (if (u1162@u929@annotation? u6054@e) (u5971@match-each-any (u1164@u933@annotation-expression u6054@e) u6055@m* u6056@s* u6057@ae*) '#f)))))) (set! u5973@match-empty (lambda (u6048@p u6049@r) (if (null? u6048@p) u6049@r (if (eq? u6048@p '_) u6049@r (if (eq? u6048@p 'any) (cons '() u6049@r) (if (pair? u6048@p) (u5973@match-empty (car u6048@p) (u5973@match-empty (cdr u6048@p) u6049@r)) (if (eq? u6048@p 'each-any) (cons '() u6049@r) ((lambda (u6052@t) (if (memv u6052@t '(each)) (u5973@match-empty (vector-ref u6048@p '1) u6049@r) (if (memv u6052@t '(each+)) (u5973@match-empty (vector-ref u6048@p '1) (u5973@match-empty (reverse (vector-ref u6048@p '2)) (u5973@match-empty (vector-ref u6048@p '3) u6049@r))) (if (memv u6052@t '(free-id atom)) u6049@r (if (memv u6052@t '(scheme-id atom)) u6049@r (if (memv u6052@t '(vector)) (u5973@match-empty (vector-ref u6048@p '1) u6049@r) (assertion-violation 'syntax-dispatch '"invalid pattern" u6048@p))))))) (vector-ref u6048@p '0))))))))) (set! u5975@combine (lambda (u6044@r* u6045@r) (if (null? (car u6044@r*)) u6045@r (cons (map car u6044@r*) (u5975@combine (map cdr u6044@r*) u6045@r))))) (set! u5977@match* (lambda (u6011@e u6012@p u6013@m* u6014@s* u6015@ae* u6016@r) (if (null? u6012@p) (and (null? u6011@e) u6016@r) (if (pair? u6012@p) (and (pair? u6011@e) (u5979@match (car u6011@e) (car u6012@p) u6013@m* u6014@s* u6015@ae* (u5979@match (cdr u6011@e) (cdr u6012@p) u6013@m* u6014@s* u6015@ae* u6016@r))) (if (eq? u6012@p 'each-any) ((lambda (u6023@l) (and u6023@l (cons u6023@l u6016@r))) (u5971@match-each-any u6011@e u6013@m* u6014@s* u6015@ae*)) ((lambda (u6025@t) (if (memv u6025@t '(each)) (if (null? u6011@e) (u5973@match-empty (vector-ref u6012@p '1) u6016@r) ((lambda (u6027@r*) (and u6027@r* (u5975@combine u6027@r* u6016@r))) (u5967@match-each u6011@e (vector-ref u6012@p '1) u6013@m* u6014@s* u6015@ae*))) (if (memv u6025@t '(free-id)) (and (symbol? u6011@e) (u2145@top-marked? u6013@m*) (u2283@free-id=? (u5965@stx^ u6011@e u6013@m* u6014@s* u6015@ae*) (vector-ref u6012@p '1)) u6016@r) (if (memv u6025@t '(scheme-id)) (and (symbol? u6011@e) (u2145@top-marked? u6013@m*) (u2283@free-id=? (u5965@stx^ u6011@e u6013@m* u6014@s* u6015@ae*) (u2654@scheme-stx (vector-ref u6012@p '1))) u6016@r) (if (memv u6025@t '(each+)) (call-with-values (lambda () (u5969@match-each+ u6011@e (vector-ref u6012@p '1) (vector-ref u6012@p '2) (vector-ref u6012@p '3) u6013@m* u6014@s* u6015@ae* u6016@r)) (lambda (u6032@u6029@xr* u6033@u6030@y-pat u6034@u6031@r) ((lambda (u6038@r u6039@y-pat u6040@xr*) (and u6038@r (null? u6039@y-pat) (if (null? u6040@xr*) (u5973@match-empty (vector-ref u6012@p '1) u6038@r) (u5975@combine u6040@xr* u6038@r)))) u6034@u6031@r u6033@u6030@y-pat u6032@u6029@xr*))) (if (memv u6025@t '(atom)) (and (fast-equal? (vector-ref u6012@p '1) (u2295@strip u6011@e u6013@m*)) u6016@r) (if (memv u6025@t '(vector)) (and (vector? u6011@e) (u5979@match (vector->list u6011@e) (vector-ref u6012@p '1) u6013@m* u6014@s* u6015@ae* u6016@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" u6012@p)))))))) (vector-ref u6012@p '0))))))) (set! u5979@match (lambda (u5984@e u5985@p u5986@m* u5987@s* u5988@ae* u5989@r) (if (not u5989@r) '#f (if (eq? u5985@p '_) u5989@r (if (eq? u5985@p 'any) (cons (u5965@stx^ u5984@e u5986@m* u5987@s* u5988@ae*) u5989@r) (if (u2219@stx? u5984@e) (and (not (u2145@top-marked? u5986@m*)) (call-with-values (lambda () (u2249@join-wraps u5986@m* u5987@s* u5988@ae* u5984@e)) (lambda (u5999@u5996@m* u6000@u5997@s* u6001@u5998@ae*) ((lambda (u6005@ae* u6006@s* u6007@m*) (u5979@match (u2223@stx-expr u5984@e) u5985@p u6007@m* u6006@s* u6005@ae* u5989@r)) u6001@u5998@ae* u6000@u5997@s* u5999@u5996@m*)))) (if (u1162@u929@annotation? u5984@e) (u5979@match (u1164@u933@annotation-expression u5984@e) u5985@p u5986@m* u5987@s* u5988@ae* u5989@r) (u5977@match* u5984@e u5985@p u5986@m* u5987@s* u5988@ae* u5989@r)))))))) (lambda (u5980@e u5981@p) (u5979@match u5980@e u5981@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! u2774@ellipsis? (lambda (u6174@x) (and (u2275@id? u6174@x) (u2283@free-id=? u6174@x (u2654@scheme-stx '...))))) (set! u2776@underscore? (lambda (u6176@x) (and (u2275@id? u6176@x) (u2283@free-id=? u6176@x (u2654@scheme-stx '_))))) (set! u2778@verify-literals (lambda (u6178@lits u6179@expr) (for-each (lambda (u6182@x) (if (or (not (u2275@id? u6182@x)) (u2774@ellipsis? u6182@x) (u2776@underscore? u6182@x)) (u3005@syntax-violation '#f '"invalid literal" u6179@expr u6182@x) (void))) u6178@lits))) (set! u2780@syntax-case-transformer ((lambda () ((lambda (u6185@build-dispatch-call u6187@invalid-ids-error u6189@gen-clause u6191@gen-syntax-case) (begin (set! u6185@build-dispatch-call (lambda (u6296@pvars u6297@expr u6298@y u6299@r u6300@mr) ((lambda (u6306@ids u6307@levels) ((lambda (u6310@labels u6311@new-vars) ((lambda (u6314@body) (list '(primitive apply) (u2111@u1921@build-lambda '#f u6311@new-vars u6314@body) u6298@y)) (u2806@chi-expr (u2255@add-subst (u2206@make-full-rib u6306@ids u6310@labels) u6297@expr) (append (map (lambda (u6316@label u6317@var u6318@level) (cons u6316@label (u2307@make-binding 'syntax (cons u6317@var u6318@level)))) u6310@labels u6311@new-vars (map cdr u6296@pvars)) u6299@r) u6300@mr))) (map u2151@gen-label u6306@ids) (map u2147@gen-lexical u6306@ids))) (map car u6296@pvars) (map cdr u6296@pvars)))) (set! u6187@invalid-ids-error (lambda (u6284@id* u6285@e u6286@class) ((letrec ((u6290@find (lambda (u6292@id* u6293@ok*) (if (null? u6292@id*) (u3005@syntax-violation '#f '"invalid syntax" u6285@e) (if (u2275@id? (car u6292@id*)) (if (u2289@bound-id-member? (car u6292@id*) u6293@ok*) (u3001@syntax-error (car u6292@id*) '"duplicate " u6286@class) (u6290@find (cdr u6292@id*) (cons (car u6292@id*) u6293@ok*))) (u3001@syntax-error (car u6292@id*) '"invalid " u6286@class)))))) u6290@find) u6284@id* '()))) (set! u6189@gen-clause (lambda (u6246@x u6247@keys u6248@clauses u6249@r u6250@mr u6251@pat u6252@fender u6253@expr) (call-with-values (lambda () (u2770@convert-pattern u6251@pat u6247@keys)) (lambda (u6264@u6262@p u6265@u6263@pvars) ((lambda (u6268@pvars u6269@p) (if (not (u2287@distinct-bound-ids? (map car u6268@pvars))) (u6187@invalid-ids-error (map car u6268@pvars) u6251@pat '"pattern variable") (if (not (for-all (lambda (u6272@x) (not (u2774@ellipsis? (car u6272@x)))) u6268@pvars)) (u3005@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" u6251@pat) ((lambda (u6274@y) ((lambda (u6276@test) ((lambda (u6278@conseq) ((lambda (u6280@altern) (list (u2111@u1921@build-lambda '#f (list u6274@y) (list 'if u6276@test u6278@conseq u6280@altern)) (list '(primitive syntax-dispatch) u6246@x (list 'quote u6269@p)))) (u6191@gen-syntax-case u6246@x u6247@keys u6248@clauses u6249@r u6250@mr))) (u6185@build-dispatch-call u6268@pvars u6253@expr u6274@y u6249@r u6250@mr))) (if (eq? u6252@fender '#t) u6274@y ((lambda (u6282@call) (list 'if u6274@y u6282@call (list 'quote '#f))) (u6185@build-dispatch-call u6268@pvars u6252@fender u6274@y u6249@r u6250@mr))))) (u2147@gen-lexical 'tmp))))) u6265@u6263@pvars u6264@u6262@p))))) (set! u6191@gen-syntax-case (lambda (u6212@x u6213@keys u6214@clauses u6215@r u6216@mr) (if (null? u6214@clauses) (list '(primitive syntax-error) u6212@x) ((lambda (u6222@t) ((lambda (u6224@ls/false) (if u6224@ls/false (apply (lambda (u6226@pat u6227@expr) (if (and (u2275@id? u6226@pat) (not (u2289@bound-id-member? u6226@pat u6213@keys)) (not (u2774@ellipsis? u6226@pat))) (if (u2283@free-id=? u6226@pat (u2654@scheme-stx '_)) (u2806@chi-expr u6227@expr u6215@r u6216@mr) ((lambda (u6230@lab u6231@lex) ((lambda (u6234@body) (list (u2111@u1921@build-lambda '#f (list u6231@lex) u6234@body) u6212@x)) (u2806@chi-expr (u2255@add-subst (u2206@make-full-rib (list u6226@pat) (list u6230@lab)) u6227@expr) (cons (cons u6230@lab (u2307@make-binding 'syntax (cons u6231@lex '0))) u6215@r) u6216@mr))) (u2151@gen-label u6226@pat) (u2147@gen-lexical u6226@pat))) (u6189@gen-clause u6212@x u6213@keys (cdr u6214@clauses) u6215@r u6216@mr u6226@pat '#t u6227@expr))) u6224@ls/false) ((lambda (u6236@t) ((lambda (u6238@ls/false) (if u6238@ls/false (apply (lambda (u6240@pat u6241@fender u6242@expr) (u6189@gen-clause u6212@x u6213@keys (cdr u6214@clauses) u6215@r u6216@mr u6240@pat u6241@fender u6242@expr)) u6238@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u6236@t))) (u2772@syntax-dispatch u6236@t '(any any any)))) u6222@t))) (u2772@syntax-dispatch u6222@t '(any any)))) (car u6214@clauses))))) (lambda (u6192@e u6193@r u6194@mr) ((lambda (u6198@t) ((lambda (u6200@ls/false) (if u6200@ls/false (apply (lambda (u6202@expr u6203@keys u6204@clauses) (begin (u2778@verify-literals u6203@keys u6192@e) ((lambda (u6208@x) ((lambda (u6210@body) (list (u2111@u1921@build-lambda '#f (list u6208@x) u6210@body) (u2806@chi-expr u6202@expr u6193@r u6194@mr))) (u6191@gen-syntax-case u6208@x u6203@keys u6204@clauses u6193@r u6194@mr))) (u2147@gen-lexical 'tmp)))) u6200@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u6198@t))) (u2772@syntax-dispatch u6198@t '(_ any each-any . each-any)))) u6192@e)))) '#f '#f '#f '#f)))) (set! u2782@ellipsis-map (lambda (u6322@proc u6323@ls . u6326@ls*) ((lambda (u6329@who) (begin (set! u6329@who '...) (begin (if (not (list? u6323@ls)) (assertion-violation u6329@who '"not a list" u6323@ls) (void)) (if (not (null? u6326@ls*)) ((lambda (u6330@n) (for-each (lambda (u6332@x) (begin (if (not (list? u6332@x)) (assertion-violation u6329@who '"not a list" u6332@x) (void)) (if (not (= (length u6332@x) u6330@n)) (assertion-violation u6329@who '"length mismatch" u6323@ls u6332@x) (void)))) u6326@ls*)) (length u6323@ls)) (void)) (apply map u6322@proc u6323@ls u6326@ls*)))) '#f))) (set! u2784@syntax-transformer ((lambda () ((lambda (u6335@gen-syntax u6337@gen-ref u6339@gen-append u6341@gen-mappend u6343@gen-map u6345@gen-cons u6347@gen-vector u6349@regen) (begin (set! u6335@gen-syntax (lambda (u6450@src u6451@e u6452@r u6453@maps u6454@ellipsis? u6455@vec?) ((lambda (u6462@t) ((lambda (u6464@ls/false) (if (and u6464@ls/false (apply (lambda (u6466@dots) (u6454@ellipsis? u6466@dots)) u6464@ls/false)) (apply (lambda (u6468@dots) (u3005@syntax-violation '#f '"misplaced ellipsis in syntax form" u6450@src)) u6464@ls/false) ((lambda (u6470@t) ((lambda (u6472@ls/false) (if (and u6472@ls/false (apply (lambda (u6474@id) (u2275@id? u6474@id)) u6472@ls/false)) (apply (lambda (u6476@id) ((lambda (u6478@label) ((lambda (u6480@b) ((lambda () (if (eq? (u2309@binding-type u6480@b) 'syntax) (call-with-values (lambda () ((lambda (u6484@var.lev) (u6337@gen-ref u6450@src (car u6484@var.lev) (cdr u6484@var.lev) u6453@maps)) (u2311@binding-value u6480@b))) (lambda (u6486@u6482@var u6487@u6483@maps) ((lambda (u6490@maps u6491@var) (values (list 'ref u6491@var) u6490@maps)) u6487@u6483@maps u6486@u6482@var))) (values (list 'quote u6451@e) u6453@maps))))) (u2305@label->binding u6478@label u6452@r))) (u2301@id->label u6451@e))) u6472@ls/false) ((lambda (u6494@t) ((lambda (u6496@ls/false) (if (and u6496@ls/false (apply (lambda (u6498@dots u6499@e) (u6454@ellipsis? u6498@dots)) u6496@ls/false)) (apply (lambda (u6502@dots u6503@e) (if u6455@vec? (u3005@syntax-violation '#f '"misplaced ellipsis in syntax form" u6450@src) (u6335@gen-syntax u6450@src u6503@e u6452@r u6453@maps (lambda (u6506@x) '#f) '#f))) u6496@ls/false) ((lambda (u6508@t) ((lambda (u6510@ls/false) (if (and u6510@ls/false (apply (lambda (u6512@x u6513@dots u6514@y) (u6454@ellipsis? u6513@dots)) u6510@ls/false)) (apply (lambda (u6518@x u6519@dots u6520@y) ((letrec ((u6524@f (lambda (u6526@y u6527@k) ((lambda (u6530@t) ((lambda (u6532@ls/false) (if u6532@ls/false (apply (lambda () (u6527@k u6453@maps)) u6532@ls/false) ((lambda (u6534@t) ((lambda (u6536@ls/false) (if (and u6536@ls/false (apply (lambda (u6538@dots u6539@y) (u6454@ellipsis? u6538@dots)) u6536@ls/false)) (apply (lambda (u6542@dots u6543@y) (u6524@f u6543@y (lambda (u6546@maps) (call-with-values (lambda () (u6527@k (cons '() u6546@maps))) (lambda (u6550@u6548@x u6551@u6549@maps) ((lambda (u6554@maps u6555@x) (if (null? (car u6554@maps)) (u3005@syntax-violation '#f '"extra ellipsis in syntax form" u6450@src) (values (u6341@gen-mappend u6555@x (car u6554@maps)) (cdr u6554@maps)))) u6551@u6549@maps u6550@u6548@x)))))) u6536@ls/false) ((lambda (u6558@t) ((lambda (u6560@ls/false) (if u6560@ls/false (apply (lambda () (call-with-values (lambda () (u6335@gen-syntax u6450@src u6526@y u6452@r u6453@maps u6454@ellipsis? u6455@vec?)) (lambda (u6564@u6562@y u6565@u6563@maps) ((lambda (u6568@maps u6569@y) (call-with-values (lambda () (u6527@k u6568@maps)) (lambda (u6574@u6572@x u6575@u6573@maps) ((lambda (u6578@maps u6579@x) (values (u6339@gen-append u6579@x u6569@y) u6578@maps)) u6575@u6573@maps u6574@u6572@x)))) u6565@u6563@maps u6564@u6562@y)))) u6560@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u6558@t))) (u2772@syntax-dispatch u6558@t '_))) u6534@t))) (u2772@syntax-dispatch u6534@t '(any . any)))) u6530@t))) (u2772@syntax-dispatch u6530@t '()))) u6526@y)))) u6524@f) u6520@y (lambda (u6582@maps) (call-with-values (lambda () (u6335@gen-syntax u6450@src u6518@x u6452@r (cons '() u6582@maps) u6454@ellipsis? '#f)) (lambda (u6586@u6584@x u6587@u6585@maps) ((lambda (u6590@maps u6591@x) (if (null? (car u6590@maps)) (u3005@syntax-violation '#f '"extra ellipsis in syntax form" u6450@src) (values (u6343@gen-map u6591@x (car u6590@maps)) (cdr u6590@maps)))) u6587@u6585@maps u6586@u6584@x)))))) u6510@ls/false) ((lambda (u6594@t) ((lambda (u6596@ls/false) (if u6596@ls/false (apply (lambda (u6598@x u6599@y) (call-with-values (lambda () (u6335@gen-syntax u6450@src u6598@x u6452@r u6453@maps u6454@ellipsis? '#f)) (lambda (u6604@u6602@xnew u6605@u6603@maps) ((lambda (u6608@maps u6609@xnew) (call-with-values (lambda () (u6335@gen-syntax u6450@src u6599@y u6452@r u6608@maps u6454@ellipsis? u6455@vec?)) (lambda (u6614@u6612@ynew u6615@u6613@maps) ((lambda (u6618@maps u6619@ynew) (values (u6345@gen-cons u6451@e u6598@x u6599@y u6609@xnew u6619@ynew) u6618@maps)) u6615@u6613@maps u6614@u6612@ynew)))) u6605@u6603@maps u6604@u6602@xnew)))) u6596@ls/false) ((lambda (u6622@t) ((lambda (u6624@ls/false) (if u6624@ls/false (apply (lambda (u6626@ls) (call-with-values (lambda () (u6335@gen-syntax u6450@src u6626@ls u6452@r u6453@maps u6454@ellipsis? '#t)) (lambda (u6630@u6628@lsnew u6631@u6629@maps) ((lambda (u6634@maps u6635@lsnew) (values (u6347@gen-vector u6451@e u6626@ls u6635@lsnew) u6634@maps)) u6631@u6629@maps u6630@u6628@lsnew)))) u6624@ls/false) ((lambda (u6638@t) ((lambda (u6640@ls/false) (if u6640@ls/false (apply (lambda () (values (list 'quote u6451@e) u6453@maps)) u6640@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u6638@t))) (u2772@syntax-dispatch u6638@t '_))) u6622@t))) (u2772@syntax-dispatch u6622@t '#(vector each-any)))) u6594@t))) (u2772@syntax-dispatch u6594@t '(any . any)))) u6508@t))) (u2772@syntax-dispatch u6508@t '(any any . any)))) u6494@t))) (u2772@syntax-dispatch u6494@t '(any any)))) u6470@t))) (u2772@syntax-dispatch u6470@t 'any))) u6462@t))) (u2772@syntax-dispatch u6462@t 'any))) u6451@e))) (set! u6337@gen-ref (lambda (u6426@src u6427@var u6428@level u6429@maps) (if (= u6428@level '0) (values u6427@var u6429@maps) (if (null? u6429@maps) (u3005@syntax-violation '#f '"missing ellipsis in syntax form" u6426@src) (call-with-values (lambda () (u6337@gen-ref u6426@src u6427@var (- u6428@level '1) (cdr u6429@maps))) (lambda (u6436@u6434@outer-var u6437@u6435@outer-maps) ((lambda (u6440@outer-maps u6441@outer-var) ((lambda (u6444@t) (if u6444@t ((lambda (u6446@b) (values (cdr u6446@b) u6429@maps)) u6444@t) ((lambda (u6448@inner-var) (values u6448@inner-var (cons (cons (cons u6441@outer-var u6448@inner-var) (car u6429@maps)) u6440@outer-maps))) (u2147@gen-lexical 'tmp)))) (assq u6441@outer-var (car u6429@maps)))) u6437@u6435@outer-maps u6436@u6434@outer-var))))))) (set! u6339@gen-append (lambda (u6422@x u6423@y) (if (fast-equal? u6423@y ''()) u6422@x (list 'append u6422@x u6423@y)))) (set! u6341@gen-mappend (lambda (u6418@e u6419@map-env) (list 'apply '(primitive append) (u6343@gen-map u6418@e u6419@map-env)))) (set! u6343@gen-map (lambda (u6400@e u6401@map-env) ((lambda (u6404@formals u6405@actuals) (if (eq? (car u6400@e) 'ref) (car u6405@actuals) (if (for-all (lambda (u6408@x) (and (eq? (car u6408@x) 'ref) (memq (cadr u6408@x) u6404@formals))) (cdr u6400@e)) ((lambda (u6410@args) (cons 'map (cons (list 'primitive (car u6400@e)) u6410@args))) (map ((lambda (u6412@r) (lambda (u6414@x) (cdr (assq (cadr u6414@x) u6412@r)))) (map cons u6404@formals u6405@actuals)) (cdr u6400@e))) (cons* 'map (list 'lambda u6404@formals u6400@e) u6405@actuals)))) (map cdr u6401@map-env) (map (lambda (u6416@x) (list 'ref (car u6416@x))) u6401@map-env)))) (set! u6345@gen-cons (lambda (u6384@e u6385@x u6386@y u6387@xnew u6388@ynew) ((lambda (u6394@t) (if (memv u6394@t '(quote)) (if (eq? (car u6387@xnew) 'quote) ((lambda (u6396@xnew u6397@ynew) (if (and (eq? u6396@xnew u6385@x) (eq? u6397@ynew u6386@y)) (list 'quote u6384@e) (list 'quote (cons u6396@xnew u6397@ynew)))) (cadr u6387@xnew) (cadr u6388@ynew)) (if (null? (cadr u6388@ynew)) (list 'list u6387@xnew) (list 'cons u6387@xnew u6388@ynew))) (if (memv u6394@t '(list)) (cons 'list (cons u6387@xnew (cdr u6388@ynew))) (list 'cons u6387@xnew u6388@ynew)))) (car u6388@ynew)))) (set! u6347@gen-vector (lambda (u6378@e u6379@ls u6380@lsnew) (if (eq? (car u6380@lsnew) 'quote) (if (eq? (cadr u6380@lsnew) u6379@ls) (list 'quote u6378@e) (list 'quote (list->vector (cadr u6380@lsnew)))) (if (eq? (car u6380@lsnew) 'list) (cons 'vector (cdr u6380@lsnew)) (list 'list->vector u6380@lsnew))))) (set! u6349@regen (lambda (u6372@x) ((lambda (u6374@t) (if (memv u6374@t '(ref)) (cadr u6372@x) (if (memv u6374@t '(primitive)) (list 'primitive (cadr u6372@x)) (if (memv u6374@t '(quote)) (list 'quote (cadr u6372@x)) (if (memv u6374@t '(lambda)) (u2111@u1921@build-lambda '#f (cadr u6372@x) (u6349@regen (caddr u6372@x))) (if (memv u6374@t '(map)) ((lambda (u6376@ls) (cons '(primitive ellipsis-map) u6376@ls)) (map u6349@regen (cdr u6372@x))) (cons (list 'primitive (car u6372@x)) (map u6349@regen (cdr u6372@x))))))))) (car u6372@x)))) (lambda (u6350@e u6351@r u6352@mr) ((lambda (u6356@t) ((lambda (u6358@ls/false) (if u6358@ls/false (apply (lambda (u6360@x) (call-with-values (lambda () (u6335@gen-syntax u6350@e u6360@x u6351@r '() u2774@ellipsis? '#f)) (lambda (u6364@u6362@e u6365@u6363@maps) ((lambda (u6368@maps u6369@e) (u6349@regen u6369@e)) u6365@u6363@maps u6364@u6362@e)))) u6358@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u6356@t))) (u2772@syntax-dispatch u6356@t '(_ any)))) u6350@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! u2786@core-macro-transformer (lambda (u6642@name) ((lambda (u6644@t) (if (memv u6644@t '(quote)) u2692@quote-transformer (if (memv u6644@t '(lambda)) u2696@lambda-transformer (if (memv u6644@t '(case-lambda)) u2694@case-lambda-transformer (if (memv u6644@t '(letrec)) u2668@letrec-transformer (if (memv u6644@t '(letrec*)) u2670@letrec*-transformer (if (memv u6644@t '(if)) u2684@if-transformer (if (memv u6644@t '(and)) u2686@and-transformer (if (memv u6644@t '(or)) u2688@or-transformer (if (memv u6644@t '(foreign-call)) u2768@foreign-call-transformer (if (memv u6644@t '(syntax-case)) u2780@syntax-case-transformer (if (memv u6644@t '(syntax)) u2784@syntax-transformer (if (memv u6644@t '(type-descriptor)) u2674@type-descriptor-transformer (if (memv u6644@t '(record-type-descriptor)) u2676@record-type-descriptor-transformer (if (memv u6644@t '(record-constructor-descriptor)) u2678@record-constructor-descriptor-transformer (if (memv u6644@t '(fluid-let-syntax)) u2672@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" u6642@name))))))))))))))))) u6642@name))) (set! u2788@symbol-macro (lambda (u6646@x u6647@set) ((lambda (u6650@t) ((lambda (u6652@ls/false) (if (and u6652@ls/false (apply (lambda (u6654@name) (and (u2275@id? u6654@name) (memq (u2277@id->sym u6654@name) u6647@set))) u6652@ls/false)) (apply (lambda (u6656@name) (u2698@bless (list 'quote u6656@name))) u6652@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u6650@t))) (u2772@syntax-dispatch u6650@t '(_ any)))) u6646@x))) (set! u2790@macro-transformer (lambda (u6658@x) (if (procedure? u6658@x) u6658@x (if (symbol? u6658@x) ((lambda (u6660@t) (if (memv u6660@t '(define-record-type)) u2760@define-record-type-macro (if (memv u6660@t '(define-struct)) u2758@define-struct-macro (if (memv u6660@t '(include)) u2748@include-macro (if (memv u6660@t '(cond)) u2744@cond-macro (if (memv u6660@t '(let)) u2704@let-macro (if (memv u6660@t '(do)) u2736@do-macro (if (memv u6660@t '(or)) u2740@or-macro (if (memv u6660@t '(and)) u2742@and-macro (if (memv u6660@t '(let*)) u2738@let*-macro (if (memv u6660@t '(let-values)) u2706@let-values-macro (if (memv u6660@t '(let*-values)) u2708@let*-values-macro (if (memv u6660@t '(syntax-rules)) u2752@syntax-rules-macro (if (memv u6660@t '(quasiquote)) u2754@quasiquote-macro (if (memv u6660@t '(quasisyntax)) u2756@quasisyntax-macro (if (memv u6660@t '(with-syntax)) u2700@with-syntax-macro (if (memv u6660@t '(when)) u2680@when-macro (if (memv u6660@t '(unless)) u2682@unless-macro (if (memv u6660@t '(case)) u2690@case-macro (if (memv u6660@t '(identifier-syntax)) u2734@identifier-syntax-macro (if (memv u6660@t '(time)) u2726@time-macro (if (memv u6660@t '(delay)) u2728@delay-macro (if (memv u6660@t '(assert)) u2730@assert-macro (if (memv u6660@t '(endianness)) u2732@endianness-macro (if (memv u6660@t '(guard)) u2722@guard-macro (if (memv u6660@t '(define-enumeration)) u2724@define-enumeration-macro (if (memv u6660@t '(trace-lambda)) u2710@trace-lambda-macro (if (memv u6660@t '(trace-define)) u2712@trace-define-macro (if (memv u6660@t '(trace-define-syntax)) u2714@trace-define-syntax-macro (if (memv u6660@t '(trace-let-syntax)) u2718@trace-let-syntax-macro (if (memv u6660@t '(trace-letrec-syntax)) u2720@trace-letrec-syntax-macro (if (memv u6660@t '(define-condition-type)) u2762@define-condition-type-macro (if (memv u6660@t '(parameterize)) u2766@parameterize-macro (if (memv u6660@t '(include-into)) u2750@include-into-macro (if (memv u6660@t '(eol-style)) (lambda (u6662@x) (u2788@symbol-macro u6662@x '(none lf cr crlf nel crnel ls))) (if (memv u6660@t '(error-handling-mode)) (lambda (u6664@x) (u2788@symbol-macro u6664@x '(ignore raise replace))) (if (memv u6660@t '(buffer-mode)) (lambda (u6666@x) (u2788@symbol-macro u6666@x '(none line block))) (if (memv u6660@t '(file-options)) u2134@file-options-macro (if (memv u6660@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) u2764@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" u6658@x)))))))))))))))))))))))))))))))))))))))) u6658@x) (error 'core-macro-transformer '"BUG: invalid macro" u6658@x))))) (set! u2792@local-macro-transformer (lambda (u6668@x) (car u6668@x))) (set! u2794@do-macro-call (lambda (u6670@transformer u6671@expr) ((lambda (u6674@out) (begin ((letrec ((u6676@f (lambda (u6678@x) (if (not (u2219@stx? u6678@x)) (if (pair? u6678@x) (begin (u6676@f (car u6678@x)) (u6676@f (cdr u6678@x))) (if (vector? u6678@x) (vector-for-each u6676@f u6678@x) (if (symbol? u6678@x) (u3005@syntax-violation '#f '"raw symbol encountered in output of macro" u6671@expr u6678@x) (void)))) (void))))) u6676@f) u6674@out) (u2253@add-mark (u2243@gen-mark) u6674@out u6671@expr))) (u6670@transformer (u2253@add-mark u2245@anti-mark u6671@expr '#f))))) (set! u2796@chi-macro (lambda (u6680@p u6681@e) (u2794@do-macro-call (u2790@macro-transformer u6680@p) u6681@e))) (set! u2798@chi-local-macro (lambda (u6684@p u6685@e) (u2794@do-macro-call (u2792@local-macro-transformer u6684@p) u6685@e))) (set! u2800@chi-global-macro (lambda (u6688@p u6689@e) ((lambda (u6692@lib u6693@loc) (begin (u1802@u1458@visit-library u6692@lib) ((lambda (u6696@x) ((lambda (u6698@transformer) (u2794@do-macro-call u6698@transformer u6689@e)) (if (procedure? u6696@x) u6696@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" u6696@x)))) (symbol-value u6693@loc)))) (car u6688@p) (cdr u6688@p)))) (set! u2802@chi-expr* (lambda (u6700@e* u6701@r u6702@mr) (if (null? u6700@e*) '() ((lambda (u6706@e) (cons u6706@e (u2802@chi-expr* (cdr u6700@e*) u6701@r u6702@mr))) (u2806@chi-expr (car u6700@e*) u6701@r u6702@mr))))) (set! u2804@chi-application (lambda (u6708@e u6709@r u6710@mr) ((lambda (u6714@t) ((lambda (u6716@ls/false) (if u6716@ls/false (apply (lambda (u6718@rator u6719@rands) ((lambda (u6722@rator) (cons u6722@rator (u2802@chi-expr* u6719@rands u6709@r u6710@mr))) (u2806@chi-expr u6718@rator u6709@r u6710@mr))) u6716@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u6714@t))) (u2772@syntax-dispatch u6714@t '(any . each-any)))) u6708@e))) (set! u2806@chi-expr (lambda (u6724@e u6725@r u6726@mr) (call-with-values (lambda () (u2315@syntax-type u6724@e u6725@r)) (lambda (u6733@u6730@type u6734@u6731@value u6735@u6732@kwd) ((lambda (u6739@kwd u6740@value u6741@type) ((lambda (u6745@t) (if (memv u6745@t '(core-macro)) ((lambda (u6747@transformer) (u6747@transformer u6724@e u6725@r u6726@mr)) (u2786@core-macro-transformer u6740@value)) (if (memv u6745@t '(global)) ((lambda (u6749@lib) ((lambda (u6751@loc) ((lambda () (begin ((u2879@inv-collector) u6749@lib) u6751@loc)))) (cdr u6740@value))) (car u6740@value)) (if (memv u6745@t '(core-prim)) ((lambda (u6753@name) (list 'primitive u6753@name)) u6740@value) (if (memv u6745@t '(call)) (u2804@chi-application u6724@e u6725@r u6726@mr) (if (memv u6745@t '(lexical)) ((lambda (u6755@lex) u6755@lex) (u2656@lexical-var u6740@value)) (if (memv u6745@t '(global-macro global-macro!)) (u2806@chi-expr (u2800@chi-global-macro u6740@value u6724@e) u6725@r u6726@mr) (if (memv u6745@t '(local-macro local-macro!)) (u2806@chi-expr (u2798@chi-local-macro u6740@value u6724@e) u6725@r u6726@mr) (if (memv u6745@t '(macro macro!)) (u2806@chi-expr (u2796@chi-macro u6740@value u6724@e) u6725@r u6726@mr) (if (memv u6745@t '(constant)) ((lambda (u6757@datum) (list 'quote u6757@datum)) u6740@value) (if (memv u6745@t '(set!)) (u2808@chi-set! u6724@e u6725@r u6726@mr) (if (memv u6745@t '(begin)) ((lambda (u6759@t) ((lambda (u6761@ls/false) (if u6761@ls/false (apply (lambda (u6763@x u6764@x*) (u2114@u1971@build-sequence '#f (u2802@chi-expr* (cons u6763@x u6764@x*) u6725@r u6726@mr))) u6761@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u6759@t))) (u2772@syntax-dispatch u6759@t '(_ any . each-any)))) u6724@e) (if (memv u6745@t '(let-syntax letrec-syntax)) ((lambda (u6767@t) ((lambda (u6769@ls/false) (if (and u6769@ls/false (apply (lambda (u6771@xlhs* u6772@xrhs* u6773@xbody u6774@xbody*) (if (not (u2285@valid-bound-ids? u6771@xlhs*)) (u3005@syntax-violation '#f '"invalid identifiers" u6724@e) (void))) u6769@ls/false)) (apply (lambda (u6779@xlhs* u6780@xrhs* u6781@xbody u6782@xbody*) ((lambda (u6787@xlab*) ((lambda (u6789@xrib) ((lambda (u6791@xb*) ((lambda () (u2114@u1971@build-sequence '#f (u2802@chi-expr* (map (lambda (u6793@x) (u2255@add-subst u6789@xrib u6793@x)) (cons u6781@xbody u6782@xbody*)) (append (map cons u6787@xlab* u6791@xb*) u6725@r) (append (map cons u6787@xlab* u6791@xb*) u6726@mr)))))) (map (lambda (u6795@x) (u2337@make-eval-transformer (u2865@expand-transformer (if (eq? u6741@type 'let-syntax) u6795@x (u2255@add-subst u6789@xrib u6795@x)) u6726@mr))) u6780@xrhs*))) (u2206@make-full-rib u6779@xlhs* u6787@xlab*))) (map u2151@gen-label u6779@xlhs*))) u6769@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u6767@t))) (u2772@syntax-dispatch u6767@t '(_ #(each (any any)) any . each-any)))) u6724@e) (if (memv u6745@t '(displaced-lexical)) (u3005@syntax-violation '#f '"identifier out of context" u6724@e) (if (memv u6745@t '(syntax)) (u3005@syntax-violation '#f '"reference to pattern variable outside a syntax form" u6724@e) (if (memv u6745@t '(define define-syntax module import library)) (u3005@syntax-violation '#f (string-append ((lambda (u6797@t) (if (memv u6797@t '(define)) '"a definition" (if (memv u6797@t '(define-syntax)) '"a define-syntax" (if (memv u6797@t '(module)) '"a module definition" (if (memv u6797@t '(library)) '"a library definition" (if (memv u6797@t '(import)) '"an import declaration" (if (memv u6797@t '(export)) '"an export declaration" '"a non-expression"))))))) u6741@type) '" was found where an expression was expected") u6724@e) (if (memv u6745@t '(mutable)) (u3005@syntax-violation '#f '"attempt to reference an unexportable variable" u6724@e) (u3005@syntax-violation '#f '"invalid expression" u6724@e)))))))))))))))))) u6741@type)) u6735@u6732@kwd u6734@u6731@value u6733@u6730@type))))) (set! u2808@chi-set! (lambda (u6799@e u6800@r u6801@mr) ((lambda (u6805@t) ((lambda (u6807@ls/false) (if (and u6807@ls/false (apply (lambda (u6809@x u6810@v) (u2275@id? u6809@x)) u6807@ls/false)) (apply (lambda (u6813@x u6814@v) (call-with-values (lambda () (u2315@syntax-type u6813@x u6800@r)) (lambda (u6820@u6817@type u6821@u6818@value u6822@u6819@kwd) ((lambda (u6826@kwd u6827@value u6828@type) ((lambda (u6832@t) (if (memv u6832@t '(lexical)) (begin (u2660@set-lexical-mutable! u6827@value '#t) (list 'set! (u2656@lexical-var u6827@value) (u2806@chi-expr u6814@v u6800@r u6801@mr))) (if (memv u6832@t '(core-prim)) (u3005@syntax-violation '#f '"cannot modify imported core primitive" u6799@e) (if (memv u6832@t '(global)) (u3005@syntax-violation '#f '"attempt to modify imported binding" u6799@e) (if (memv u6832@t '(global-macro!)) (u2806@chi-expr (u2800@chi-global-macro u6827@value u6799@e) u6800@r u6801@mr) (if (memv u6832@t '(local-macro!)) (u2806@chi-expr (u2798@chi-local-macro u6827@value u6799@e) u6800@r u6801@mr) (if (memv u6832@t '(mutable)) (u3005@syntax-violation '#f '"attempt to assign to an unexportable variable" u6799@e) (u3005@syntax-violation '#f '"invalid syntax" u6799@e)))))))) u6828@type)) u6822@u6819@kwd u6821@u6818@value u6820@u6817@type)))) u6807@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u6805@t))) (u2772@syntax-dispatch u6805@t '(_ any any)))) u6799@e))) (set! u2810@verify-formals (lambda (u6834@fmls u6835@stx) ((lambda (u6838@t) ((lambda (u6840@ls/false) (if u6840@ls/false (apply (lambda (u6842@x*) (if (not (u2285@valid-bound-ids? u6842@x*)) (u2702@invalid-fmls-error u6835@stx u6834@fmls) (void))) u6840@ls/false) ((lambda (u6844@t) ((lambda (u6846@ls/false) (if u6846@ls/false (apply (lambda (u6848@x* u6849@x) (if (not (u2285@valid-bound-ids? (cons u6849@x u6848@x*))) (u2702@invalid-fmls-error u6835@stx u6834@fmls) (void))) u6846@ls/false) ((lambda (u6852@t) ((lambda (u6854@ls/false) (if u6854@ls/false (apply (lambda () (u3005@syntax-violation '#f '"invalid syntax" u6835@stx)) u6854@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u6852@t))) (u2772@syntax-dispatch u6852@t '_))) u6844@t))) (u2772@syntax-dispatch u6844@t '#(each+ any () any)))) u6838@t))) (u2772@syntax-dispatch u6838@t 'each-any))) u6834@fmls))) (set! u2812@chi-lambda-clause (lambda (u6856@stx u6857@fmls u6858@body* u6859@r u6860@mr) ((lambda (u6866@t) ((lambda (u6868@ls/false) (if u6868@ls/false (apply (lambda (u6870@x*) (begin (u2810@verify-formals u6857@fmls u6856@stx) ((lambda (u6872@lex* u6873@lab*) (values u6872@lex* (u2828@chi-internal (u2255@add-subst (u2206@make-full-rib u6870@x* u6873@lab*) u6858@body*) (u2664@add-lexicals u6873@lab* u6872@lex* u6859@r) u6860@mr))) (map u2147@gen-lexical u6870@x*) (map u2151@gen-label u6870@x*)))) u6868@ls/false) ((lambda (u6876@t) ((lambda (u6878@ls/false) (if u6878@ls/false (apply (lambda (u6880@x* u6881@x) (begin (u2810@verify-formals u6857@fmls u6856@stx) ((lambda (u6884@lex* u6885@lab* u6886@lex u6887@lab) (values (append u6884@lex* u6886@lex) (u2828@chi-internal (u2255@add-subst (u2206@make-full-rib (cons u6881@x u6880@x*) (cons u6887@lab u6885@lab*)) u6858@body*) (u2664@add-lexicals (cons u6887@lab u6885@lab*) (cons u6886@lex u6884@lex*) u6859@r) u6860@mr))) (map u2147@gen-lexical u6880@x*) (map u2151@gen-label u6880@x*) (u2147@gen-lexical u6881@x) (u2151@gen-label u6881@x)))) u6878@ls/false) ((lambda (u6892@t) ((lambda (u6894@ls/false) (if u6894@ls/false (apply (lambda () (u3005@syntax-violation '#f '"invalid syntax" u6857@fmls)) u6894@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u6892@t))) (u2772@syntax-dispatch u6892@t '_))) u6876@t))) (u2772@syntax-dispatch u6876@t '#(each+ any () any)))) u6866@t))) (u2772@syntax-dispatch u6866@t 'each-any))) u6857@fmls))) (set! u2814@chi-lambda-clause* (lambda (u6896@stx u6897@fmls* u6898@body** u6899@r u6900@mr) (if (null? u6897@fmls*) (values '() '()) (call-with-values (lambda () (u2812@chi-lambda-clause u6896@stx (car u6897@fmls*) (car u6898@body**) u6899@r u6900@mr)) (lambda (u6908@u6906@a u6909@u6907@b) ((lambda (u6912@b u6913@a) (call-with-values (lambda () (u2814@chi-lambda-clause* u6896@stx (cdr u6897@fmls*) (cdr u6898@body**) u6899@r u6900@mr)) (lambda (u6918@u6916@a* u6919@u6917@b*) ((lambda (u6922@b* u6923@a*) (values (cons u6913@a u6923@a*) (cons u6912@b u6922@b*))) u6919@u6917@b* u6918@u6916@a*)))) u6909@u6907@b u6908@u6906@a)))))) (set! u2816@chi-defun (lambda (u6926@x u6927@r u6928@mr) ((lambda (u6932@fmls u6933@body*) (call-with-values (lambda () (u2812@chi-lambda-clause u6932@fmls u6932@fmls u6933@body* u6927@r u6928@mr)) (lambda (u6938@u6936@fmls u6939@u6937@body) ((lambda (u6942@body u6943@fmls) (u2111@u1921@build-lambda '#f u6943@fmls u6942@body)) u6939@u6937@body u6938@u6936@fmls)))) (car u6926@x) (cdr u6926@x)))) (set! u2818@chi-rhs (lambda (u6946@rhs u6947@r u6948@mr) ((lambda (u6952@t) (if (memv u6952@t '(defun)) (u2816@chi-defun (cdr u6946@rhs) u6947@r u6948@mr) (if (memv u6952@t '(expr)) ((lambda (u6954@expr) (u2806@chi-expr u6954@expr u6947@r u6948@mr)) (cdr u6946@rhs)) (if (memv u6952@t '(top-expr)) ((lambda (u6956@expr) (u2114@u1971@build-sequence '#f (list (u2806@chi-expr u6956@expr u6947@r u6948@mr) (u2115@u1973@build-void)))) (cdr u6946@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" u6946@rhs))))) (car u6946@rhs)))) (set! u2820@expand-interaction-rhs*/init* (lambda (u6958@lhs* u6959@rhs* u6960@init* u6961@r u6962@mr) ((letrec ((u6968@f (lambda (u6970@lhs* u6971@rhs*) (if (null? u6970@lhs*) (map (lambda (u6974@x) (u2806@chi-expr u6974@x u6961@r u6962@mr)) u6960@init*) ((lambda (u6976@lhs u6977@rhs) ((lambda (u6980@t) (if (memv u6980@t '(defun)) ((lambda (u6982@rhs) (cons (list 'set! u6976@lhs u6982@rhs) (u6968@f (cdr u6970@lhs*) (cdr u6971@rhs*)))) (u2816@chi-defun (cdr u6977@rhs) u6961@r u6962@mr)) (if (memv u6980@t '(expr)) ((lambda (u6984@rhs) (cons (list 'set! u6976@lhs u6984@rhs) (u6968@f (cdr u6970@lhs*) (cdr u6971@rhs*)))) (u2806@chi-expr (cdr u6977@rhs) u6961@r u6962@mr)) (if (memv u6980@t '(top-expr)) ((lambda (u6986@e) (cons u6986@e (u6968@f (cdr u6970@lhs*) (cdr u6971@rhs*)))) (u2806@chi-expr (cdr u6977@rhs) u6961@r u6962@mr)) (error 'expand-interaction '"invallid" u6977@rhs))))) (car u6977@rhs))) (car u6970@lhs*) (car u6971@rhs*)))))) u6968@f) u6958@lhs* u6959@rhs*))) (set! u2822@chi-rhs* (lambda (u6988@rhs* u6989@r u6990@mr) ((letrec ((u6994@f (lambda (u6996@ls) (if (null? u6996@ls) '() ((lambda (u6998@a) (cons u6998@a (u6994@f (cdr u6996@ls)))) (u2818@chi-rhs (car u6996@ls) u6989@r u6990@mr)))))) u6994@f) u6988@rhs*))) (set! u2824@find-bound=? (lambda (u7000@x u7001@lhs* u7002@rhs*) (if (null? u7001@lhs*) '#f (if (u2281@bound-id=? u7000@x (car u7001@lhs*)) (car u7002@rhs*) (u2824@find-bound=? u7000@x (cdr u7001@lhs*) (cdr u7002@rhs*)))))) (set! u2826@find-dups (lambda (u7006@ls) ((letrec ((u7008@f (lambda (u7010@ls u7011@dups) (if (null? u7010@ls) u7011@dups ((lambda (u7014@t) (if u7014@t ((lambda (u7016@x) (u7008@f (cdr u7010@ls) (cons (list (car u7010@ls) u7016@x) u7011@dups))) u7014@t) (u7008@f (cdr u7010@ls) u7011@dups))) (u2824@find-bound=? (car u7010@ls) (cdr u7010@ls) (cdr u7010@ls))))))) u7008@f) u7006@ls '()))) (set! u2828@chi-internal (lambda (u7018@e* u7019@r u7020@mr) ((lambda (u7024@rib) (call-with-values (lambda () (u2863@chi-body* (map (lambda (u7034@x) (u2255@add-subst u7024@rib u7034@x)) (u2273@syntax->list u7018@e*)) u7019@r u7020@mr '() '() '() '() '() u7024@rib '#f)) (lambda (u7036@u7026@e* u7037@u7027@r u7038@u7028@mr u7039@u7029@lex* u7040@u7030@rhs* u7041@u7031@mod** u7042@u7032@kwd* u7043@u7033@_exp*) ((lambda (u7052@_exp* u7053@kwd* u7054@mod** u7055@rhs* u7056@lex* u7057@mr u7058@r u7059@e*) (begin (if (null? u7059@e*) (u3005@syntax-violation '#f '"no expression in body" u7059@e*) (void)) ((lambda (u7068@init*) ((lambda (u7070@rhs*) ((lambda () (u2117@u1977@build-letrec* '#f (reverse u7056@lex*) (reverse u7070@rhs*) (u2114@u1971@build-sequence '#f u7068@init*))))) (u2822@chi-rhs* u7055@rhs* u7058@r u7057@mr))) (u2802@chi-expr* (append (apply append (reverse u7054@mod**)) u7059@e*) u7058@r u7057@mr)))) u7043@u7033@_exp* u7042@u7032@kwd* u7041@u7031@mod** u7040@u7030@rhs* u7039@u7029@lex* u7038@u7028@mr u7037@u7027@r u7036@u7026@e*)))) (u2194@make-empty-rib)))) (set! u2830@parse-module (lambda (u7072@e) ((lambda (u7074@t) ((lambda (u7076@ls/false) (if u7076@ls/false (apply (lambda (u7078@export* u7079@b*) (begin (if (not (for-all u2275@id? u7078@export*)) (u3005@syntax-violation '#f '"module exports must be identifiers" u7072@e) (void)) (values '#f (list->vector u7078@export*) u7079@b*))) u7076@ls/false) ((lambda (u7082@t) ((lambda (u7084@ls/false) (if u7084@ls/false (apply (lambda (u7086@name u7087@export* u7088@b*) (begin (if (not (u2275@id? u7086@name)) (u3005@syntax-violation '#f '"module name must be an identifier" u7072@e) (void)) (if (not (for-all u2275@id? u7087@export*)) (u3005@syntax-violation '#f '"module exports must be identifiers" u7072@e) (void)) (values u7086@name (list->vector u7087@export*) u7088@b*))) u7084@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u7082@t))) (u2772@syntax-dispatch u7082@t '(_ any each-any . each-any)))) u7074@t))) (u2772@syntax-dispatch u7074@t '(_ each-any . each-any)))) u7072@e))) (set! u2836@u2831 (make-record-type-descriptor 'module-interface '#f 'u2834 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! u2838@u2833 '#f) (set! u2840@u2832 (make-record-constructor-descriptor u2836@u2831 '#f u2838@u2833)) (set! u2843@module-interface? (record-predicate u2836@u2831)) (set! u2845@make-module-interface (record-constructor u2840@u2832)) (set! u2847@module-interface-first-mark (record-accessor u2836@u2831 '0)) (set! u2849@module-interface-exp-id-vec (record-accessor u2836@u2831 '1)) (set! u2851@module-interface-exp-lab-vec (record-accessor u2836@u2831 '2)) (set! u2853@set-module-interface-first-mark! (record-mutator u2836@u2831 '0)) (set! u2855@set-module-interface-exp-id-vec! (record-mutator u2836@u2831 '1)) (set! u2857@set-module-interface-exp-lab-vec! (record-mutator u2836@u2831 '2)) (set! u2859@module-interface-exp-id* (lambda (u7092@iface u7093@id) ((lambda (u7097@diff-marks) (begin (set! u7097@diff-marks (lambda (u7104@ls u7105@x) (begin (if (null? u7104@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (u7108@a) (if (eq? u7108@a u7105@x) '() (cons u7108@a (u7097@diff-marks (cdr u7104@ls) u7105@x)))) (car u7104@ls))))) ((lambda (u7098@diff u7099@id-vec) (if (null? u7098@diff) u7099@id-vec (vector-map (lambda (u7102@x) (u2221@make-stx (u2223@stx-expr u7102@x) (append u7098@diff (u2225@stx-mark* u7102@x)) '() '())) u7099@id-vec))) (u7097@diff-marks (u2225@stx-mark* u7093@id) (u2847@module-interface-first-mark u7092@iface)) (u2849@module-interface-exp-id-vec u7092@iface)))) '#f))) (set! u2861@chi-internal-module (lambda (u7110@e u7111@r u7112@mr u7113@lex* u7114@rhs* u7115@mod** u7116@kwd*) (call-with-values (lambda () (u2830@parse-module u7110@e)) (lambda (u7127@u7124@name u7128@u7125@exp-id* u7129@u7126@e*) ((lambda (u7133@e* u7134@exp-id* u7135@name) ((lambda (u7139@rib) ((lambda (u7141@e*) ((lambda () (call-with-values (lambda () (u2863@chi-body* u7141@e* u7111@r u7112@mr u7113@lex* u7114@rhs* u7115@mod** u7116@kwd* '() u7139@rib '#f)) (lambda (u7151@u7143@e* u7152@u7144@r u7153@u7145@mr u7154@u7146@lex* u7155@u7147@rhs* u7156@u7148@mod** u7157@u7149@kwd* u7158@u7150@_exp*) ((lambda (u7167@_exp* u7168@kwd* u7169@mod** u7170@rhs* u7171@lex* u7172@mr u7173@r u7174@e*) ((lambda (u7183@exp-lab* u7184@mod**) (if (not u7135@name) (values u7171@lex* u7170@rhs* u7134@exp-id* u7183@exp-lab* u7173@r u7172@mr u7184@mod** u7168@kwd*) ((lambda (u7187@lab u7188@iface) (values u7171@lex* u7170@rhs* (vector u7135@name) (vector u7187@lab) (cons (cons u7187@lab (cons '$module u7188@iface)) u7173@r) (cons (cons u7187@lab (cons '$module u7188@iface)) u7172@mr) u7184@mod** u7168@kwd*)) (u2151@gen-label 'module) (u2845@make-module-interface (car (u2225@stx-mark* u7135@name)) (vector-map (lambda (u7191@x) (u2221@make-stx (u2223@stx-expr u7191@x) (u2225@stx-mark* u7191@x) '() '())) u7134@exp-id*) u7183@exp-lab*)))) (vector-map (lambda (u7193@x) (or (u2301@id->label (u2221@make-stx (u2277@id->sym u7193@x) (u2225@stx-mark* u7193@x) (list u7139@rib) '())) (u3005@syntax-violation '#f '"cannot find module export" u7193@x))) u7134@exp-id*) (cons u7174@e* u7169@mod**))) u7158@u7150@_exp* u7157@u7149@kwd* u7156@u7148@mod** u7155@u7147@rhs* u7154@u7146@lex* u7153@u7145@mr u7152@u7144@r u7151@u7143@e*)))))) (map (lambda (u7195@x) (u2255@add-subst u7139@rib u7195@x)) (u2273@syntax->list u7133@e*)))) (u2194@make-empty-rib))) u7129@u7126@e* u7128@u7125@exp-id* u7127@u7124@name))))) (set! u2863@chi-body* (lambda (u7197@e* u7198@r u7199@mr u7200@lex* u7201@rhs* u7202@mod** u7203@kwd* u7204@exp* u7205@rib u7206@top?) (if (null? u7197@e*) (values u7197@e* u7198@r u7199@mr u7200@lex* u7201@rhs* u7202@mod** u7203@kwd* u7204@exp*) ((lambda (u7217@e) (call-with-values (lambda () (u2315@syntax-type u7217@e u7198@r)) (lambda (u7222@u7219@type u7223@u7220@value u7224@u7221@kwd) ((lambda (u7228@kwd u7229@value u7230@type) ((lambda (u7234@kwd*) ((lambda (u7236@t) (if (memv u7236@t '(define)) (call-with-values (lambda () (u2648@parse-define u7217@e)) (lambda (u7240@u7238@id u7241@u7239@rhs) ((lambda (u7244@rhs u7245@id) (begin (if (u2289@bound-id-member? u7245@id u7234@kwd*) (u3005@syntax-violation '#f '"cannot redefine keyword" u7217@e) (void)) (call-with-values (lambda () (u2155@gen-define-label+loc u7245@id u7205@rib)) (lambda (u7250@u7248@lab u7251@u7249@lex) ((lambda (u7254@lex u7255@lab) (begin (u2196@extend-rib! u7205@rib u7245@id u7255@lab) (u2863@chi-body* (cdr u7197@e*) (u2662@add-lexical u7255@lab u7254@lex u7198@r) u7199@mr (cons u7254@lex u7200@lex*) (cons u7244@rhs u7201@rhs*) u7202@mod** u7234@kwd* u7204@exp* u7205@rib u7206@top?))) u7251@u7249@lex u7250@u7248@lab))))) u7241@u7239@rhs u7240@u7238@id))) (if (memv u7236@t '(define-syntax)) (call-with-values (lambda () (u2650@parse-define-syntax u7217@e)) (lambda (u7260@u7258@id u7261@u7259@rhs) ((lambda (u7264@rhs u7265@id) (begin (if (u2289@bound-id-member? u7265@id u7234@kwd*) (u3005@syntax-violation '#f '"cannot redefine keyword" u7217@e) (void)) ((lambda (u7268@lab u7269@expanded-rhs) (begin (u2196@extend-rib! u7205@rib u7265@id u7268@lab) ((lambda (u7272@b) (u2863@chi-body* (cdr u7197@e*) (cons (cons u7268@lab u7272@b) u7198@r) (cons (cons u7268@lab u7272@b) u7199@mr) u7200@lex* u7201@rhs* u7202@mod** u7234@kwd* u7204@exp* u7205@rib u7206@top?)) (u2337@make-eval-transformer u7269@expanded-rhs)))) (u2157@gen-define-label u7265@id u7205@rib) (u2865@expand-transformer u7264@rhs u7199@mr)))) u7261@u7259@rhs u7260@u7258@id))) (if (memv u7236@t '(let-syntax letrec-syntax)) ((lambda (u7274@t) ((lambda (u7276@ls/false) (if (and u7276@ls/false (apply (lambda (u7278@xlhs* u7279@xrhs* u7280@xbody*) (if (not (u2285@valid-bound-ids? u7278@xlhs*)) (u3005@syntax-violation '#f '"invalid identifiers" u7217@e) (void))) u7276@ls/false)) (apply (lambda (u7284@xlhs* u7285@xrhs* u7286@xbody*) ((lambda (u7290@xlab*) ((lambda (u7292@xrib) ((lambda (u7294@xb*) ((lambda () (u2863@chi-body* (append (map (lambda (u7296@x) (u2255@add-subst u7292@xrib u7296@x)) u7286@xbody*) (cdr u7197@e*)) (append (map cons u7290@xlab* u7294@xb*) u7198@r) (append (map cons u7290@xlab* u7294@xb*) u7199@mr) u7200@lex* u7201@rhs* u7202@mod** u7234@kwd* u7204@exp* u7205@rib u7206@top?)))) (map (lambda (u7298@x) (u2337@make-eval-transformer (u2865@expand-transformer (if (eq? u7230@type 'let-syntax) u7298@x (u2255@add-subst u7292@xrib u7298@x)) u7199@mr))) u7285@xrhs*))) (u2206@make-full-rib u7284@xlhs* u7290@xlab*))) (map u2151@gen-label u7284@xlhs*))) u7276@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u7274@t))) (u2772@syntax-dispatch u7274@t '(_ #(each (any any)) . each-any)))) u7217@e) (if (memv u7236@t '(begin)) ((lambda (u7300@t) ((lambda (u7302@ls/false) (if u7302@ls/false (apply (lambda (u7304@x*) (u2863@chi-body* (append u7304@x* (cdr u7197@e*)) u7198@r u7199@mr u7200@lex* u7201@rhs* u7202@mod** u7234@kwd* u7204@exp* u7205@rib u7206@top?)) u7302@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u7300@t))) (u2772@syntax-dispatch u7300@t '(_ . each-any)))) u7217@e) (if (memv u7236@t '(global-macro global-macro!)) (u2863@chi-body* (cons (u2255@add-subst u7205@rib (u2800@chi-global-macro u7229@value u7217@e)) (cdr u7197@e*)) u7198@r u7199@mr u7200@lex* u7201@rhs* u7202@mod** u7234@kwd* u7204@exp* u7205@rib u7206@top?) (if (memv u7236@t '(local-macro local-macro!)) (u2863@chi-body* (cons (u2255@add-subst u7205@rib (u2798@chi-local-macro u7229@value u7217@e)) (cdr u7197@e*)) u7198@r u7199@mr u7200@lex* u7201@rhs* u7202@mod** u7234@kwd* u7204@exp* u7205@rib u7206@top?) (if (memv u7236@t '(macro macro!)) (u2863@chi-body* (cons (u2255@add-subst u7205@rib (u2796@chi-macro u7229@value u7217@e)) (cdr u7197@e*)) u7198@r u7199@mr u7200@lex* u7201@rhs* u7202@mod** u7234@kwd* u7204@exp* u7205@rib u7206@top?) (if (memv u7236@t '(module)) (call-with-values (lambda () (u2861@chi-internal-module u7217@e u7198@r u7199@mr u7200@lex* u7201@rhs* u7202@mod** u7234@kwd*)) (lambda (u7314@u7306@lex* u7315@u7307@rhs* u7316@u7308@m-exp-id* u7317@u7309@m-exp-lab* u7318@u7310@r u7319@u7311@mr u7320@u7312@mod** u7321@u7313@kwd*) ((lambda (u7330@kwd* u7331@mod** u7332@mr u7333@r u7334@m-exp-lab* u7335@m-exp-id* u7336@rhs* u7337@lex*) (begin (vector-for-each (lambda (u7346@id u7347@lab) (u2196@extend-rib! u7205@rib u7346@id u7347@lab)) u7335@m-exp-id* u7334@m-exp-lab*) (u2863@chi-body* (cdr u7197@e*) u7333@r u7332@mr u7337@lex* u7336@rhs* u7331@mod** u7330@kwd* u7204@exp* u7205@rib u7206@top?))) u7321@u7313@kwd* u7320@u7312@mod** u7319@u7311@mr u7318@u7310@r u7317@u7309@m-exp-lab* u7316@u7308@m-exp-id* u7315@u7307@rhs* u7314@u7306@lex*))) (if (memv u7236@t '(library)) (begin (u2975@library-expander (u2297@stx->datum u7217@e)) (u2863@chi-body* (cdr u7197@e*) u7198@r u7199@mr u7200@lex* u7201@rhs* u7202@mod** u7234@kwd* u7204@exp* u7205@rib u7206@top?)) (if (memv u7236@t '(export)) ((lambda (u7350@t) ((lambda (u7352@ls/false) (if u7352@ls/false (apply (lambda (u7354@exp-decl*) (u2863@chi-body* (cdr u7197@e*) u7198@r u7199@mr u7200@lex* u7201@rhs* u7202@mod** u7234@kwd* (append u7354@exp-decl* u7204@exp*) u7205@rib u7206@top?)) u7352@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u7350@t))) (u2772@syntax-dispatch u7350@t '(_ . each-any)))) u7217@e) (if (memv u7236@t '(import)) ((lambda () ((lambda (u7357@module-import? u7359@module-import u7361@library-import) (begin (set! u7357@module-import? (lambda (u7433@e) ((lambda (u7435@t) ((lambda (u7437@ls/false) (if (and u7437@ls/false (apply (lambda (u7439@id) (u2275@id? u7439@id)) u7437@ls/false)) (apply (lambda (u7441@id) '#t) u7437@ls/false) ((lambda (u7443@t) ((lambda (u7445@ls/false) (if u7445@ls/false (apply (lambda (u7447@imp*) '#f) u7445@ls/false) ((lambda (u7449@t) ((lambda (u7451@ls/false) (if u7451@ls/false (apply (lambda () (u3005@syntax-violation '#f '"malformed import form" u7433@e)) u7451@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u7449@t))) (u2772@syntax-dispatch u7449@t '_))) u7443@t))) (u2772@syntax-dispatch u7443@t '(_ . each-any)))) u7435@t))) (u2772@syntax-dispatch u7435@t '(_ any)))) u7433@e))) (set! u7359@module-import (lambda (u7402@e u7403@r) ((lambda (u7406@t) ((lambda (u7408@ls/false) (if (and u7408@ls/false (apply (lambda (u7410@id) (u2275@id? u7410@id)) u7408@ls/false)) (apply (lambda (u7412@id) (call-with-values (lambda () (u2315@syntax-type u7412@id u7403@r)) (lambda (u7417@u7414@type u7418@u7415@value u7419@u7416@kwd) ((lambda (u7423@kwd u7424@value u7425@type) ((lambda (u7429@t) (if (memv u7429@t '($module)) ((lambda (u7431@iface) (values (u2859@module-interface-exp-id* u7431@iface u7412@id) (u2851@module-interface-exp-lab-vec u7431@iface))) u7424@value) (u3005@syntax-violation '#f '"invalid import" u7402@e))) u7425@type)) u7419@u7416@kwd u7418@u7415@value u7417@u7414@type)))) u7408@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u7406@t))) (u2772@syntax-dispatch u7406@t '(_ any)))) u7402@e))) (set! u7361@library-import (lambda (u7376@e) ((lambda (u7378@t) ((lambda (u7380@ls/false) (if u7380@ls/false (apply (lambda (u7382@ctxt u7383@imp*) (call-with-values (lambda () (u2873@parse-import-spec* (u3011@syntax->datum u7383@imp*))) (lambda (u7388@u7386@subst-names u7389@u7387@subst-labels) ((lambda (u7392@subst-labels u7393@subst-names) (values (vector-map (lambda (u7396@name) (u2241@datum->stx u7382@ctxt u7396@name)) u7393@subst-names) u7392@subst-labels)) u7389@u7387@subst-labels u7388@u7386@subst-names)))) u7380@ls/false) ((lambda (u7398@t) ((lambda (u7400@ls/false) (if u7400@ls/false (apply (lambda () (u3005@syntax-violation '#f '"invalid import form" u7376@e)) u7400@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u7398@t))) (u2772@syntax-dispatch u7398@t '_))) u7378@t))) (u2772@syntax-dispatch u7378@t '(any . each-any)))) u7376@e))) (begin (call-with-values (lambda () (if (u7357@module-import? u7217@e) (u7359@module-import u7217@e u7198@r) (u7361@library-import u7217@e))) (lambda (u7364@u7362@id* u7365@u7363@lab*) ((lambda (u7368@lab* u7369@id*) (vector-for-each (lambda (u7372@id u7373@lab) (u2196@extend-rib! u7205@rib u7372@id u7373@lab)) u7369@id* u7368@lab*)) u7365@u7363@lab* u7364@u7362@id*))) (u2863@chi-body* (cdr u7197@e*) u7198@r u7199@mr u7200@lex* u7201@rhs* u7202@mod** u7234@kwd* u7204@exp* u7205@rib u7206@top?)))) '#f '#f '#f))) (if u7206@top? (u2863@chi-body* (cdr u7197@e*) u7198@r u7199@mr (cons (u2147@gen-lexical 'dummy) u7200@lex*) (cons (cons 'top-expr u7217@e) u7201@rhs*) u7202@mod** u7234@kwd* u7204@exp* u7205@rib u7206@top?) (values u7197@e* u7198@r u7199@mr u7200@lex* u7201@rhs* u7202@mod** u7234@kwd* u7204@exp*)))))))))))))) u7230@type)) (if (u2275@id? u7228@kwd) (cons u7228@kwd u7203@kwd*) u7203@kwd*))) u7224@u7221@kwd u7223@u7220@value u7222@u7219@type)))) (car u7197@e*))))) (set! u2865@expand-transformer (lambda (u7453@expr u7454@r) ((lambda (u7457@rtc) ((lambda (u7459@expanded-rhs) (begin (for-each ((lambda (u7461@mark-visit) (lambda (u7463@x) (begin (u1801@u1456@invoke-library u7463@x) (u7461@mark-visit u7463@x)))) (u2881@vis-collector)) (u7457@rtc)) u7459@expanded-rhs)) ((lambda (u7469@u7465@inv-collector u7470@u7466@vis-collector u7471@u7467@inv-collector u7472@u7468@vis-collector) ((lambda (u7477@swap) (dynamic-wind u7477@swap (lambda () (u2806@chi-expr u7453@expr u7454@r u7454@r)) u7477@swap)) (lambda () (begin ((lambda (u7479@t) (begin (u7469@u7465@inv-collector u7471@u7467@inv-collector) (set! u7471@u7467@inv-collector u7479@t))) (u7469@u7465@inv-collector)) ((lambda (u7481@t) (begin (u7470@u7466@vis-collector u7472@u7468@vis-collector) (set! u7472@u7468@vis-collector u7481@t))) (u7470@u7466@vis-collector)))))) u2879@inv-collector u2881@vis-collector u7457@rtc (lambda (u7483@x) (values))))) (u2877@make-collector)))) (set! u2867@parse-exports (lambda (u7485@exp*) ((letrec ((u7487@f (lambda (u7489@exp* u7490@int* u7491@ext*) (if (null? u7489@exp*) (begin (if (not (u2285@valid-bound-ids? u7491@ext*)) (u3005@syntax-violation 'export '"invalid exports" (u2826@find-dups u7491@ext*)) (void)) (values (map u3011@syntax->datum u7491@ext*) u7490@int*)) ((lambda (u7495@t) ((lambda (u7497@ls/false) (if u7497@ls/false (apply (lambda (u7499@rename u7500@i* u7501@e*) (begin (if (not (and (eq? (u3011@syntax->datum u7499@rename) 'rename) (for-all u2275@id? u7500@i*) (for-all u2275@id? u7501@e*))) (u3005@syntax-violation 'export '"invalid export specifier" (car u7489@exp*)) (void)) (u7487@f (cdr u7489@exp*) (append u7500@i* u7490@int*) (append u7501@e* u7491@ext*)))) u7497@ls/false) ((lambda (u7505@t) ((lambda (u7507@ls/false) (if u7507@ls/false (apply (lambda (u7509@ie) (begin (if (not (u2275@id? u7509@ie)) (u3005@syntax-violation 'export '"invalid export" u7509@ie) (void)) (u7487@f (cdr u7489@exp*) (cons u7509@ie u7490@int*) (cons u7509@ie u7491@ext*)))) u7507@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u7505@t))) (u2772@syntax-dispatch u7505@t 'any))) u7495@t))) (u2772@syntax-dispatch u7495@t '(any . #(each (any any)))))) (car u7489@exp*)))))) u7487@f) u7485@exp* '() '()))) (set! u2869@parse-library-name (lambda (u7511@spec) ((lambda (u7514@parse) (begin (set! u7514@parse (lambda (u7525@x) ((lambda (u7527@t) ((lambda (u7529@ls/false) (if (and u7529@ls/false (apply (lambda (u7531@v*) (for-all (lambda (u7533@x) ((lambda (u7535@x) (and (integer? u7535@x) (exact? u7535@x))) (u3011@syntax->datum u7533@x))) u7531@v*)) u7529@ls/false)) (apply (lambda (u7537@v*) (values '() (map u3011@syntax->datum u7537@v*))) u7529@ls/false) ((lambda (u7539@t) ((lambda (u7541@ls/false) (if (and u7541@ls/false (apply (lambda (u7543@x u7544@rest) (symbol? (u3011@syntax->datum u7543@x))) u7541@ls/false)) (apply (lambda (u7547@x u7548@rest) (call-with-values (lambda () (u7514@parse u7548@rest)) (lambda (u7553@u7551@x* u7554@u7552@v*) ((lambda (u7557@v* u7558@x*) (values (cons (u3011@syntax->datum u7547@x) u7558@x*) u7557@v*)) u7554@u7552@v* u7553@u7551@x*)))) u7541@ls/false) ((lambda (u7561@t) ((lambda (u7563@ls/false) (if u7563@ls/false (apply (lambda () (values '() '())) u7563@ls/false) ((lambda (u7565@t) ((lambda (u7567@ls/false) (if u7567@ls/false (apply (lambda () (u3005@syntax-violation '#f '"invalid library name" u7511@spec)) u7567@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u7565@t))) (u2772@syntax-dispatch u7565@t '_))) u7561@t))) (u2772@syntax-dispatch u7561@t '()))) u7539@t))) (u2772@syntax-dispatch u7539@t '(any . any)))) u7527@t))) (u2772@syntax-dispatch u7527@t '(each-any)))) u7525@x))) (call-with-values (lambda () (u7514@parse u7511@spec)) (lambda (u7517@u7515@name* u7518@u7516@ver*) ((lambda (u7521@ver* u7522@name*) (begin (if (null? u7522@name*) (u3005@syntax-violation '#f '"empty library name" u7511@spec) (void)) (values u7522@name* u7521@ver*))) u7518@u7516@ver* u7517@u7515@name*))))) '#f))) (set! u2871@parse-library (lambda (u7569@e) ((lambda (u7571@t) ((lambda (u7573@ls/false) (if (and u7573@ls/false (apply (lambda (u7575@library u7576@name* u7577@export u7578@exp* u7579@import u7580@imp* u7581@b*) (and (eq? (u3011@syntax->datum u7577@export) 'export) (eq? (u3011@syntax->datum u7579@import) 'import) (eq? (u3011@syntax->datum u7575@library) 'library))) u7573@ls/false)) (apply (lambda (u7589@library u7590@name* u7591@export u7592@exp* u7593@import u7594@imp* u7595@b*) (values u7590@name* u7592@exp* u7594@imp* u7595@b*)) u7573@ls/false) ((lambda (u7603@t) ((lambda (u7605@ls/false) (if u7605@ls/false (apply (lambda () (u3005@syntax-violation '#f '"malformed library" u7569@e)) u7605@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u7603@t))) (u2772@syntax-dispatch u7603@t '_))) u7571@t))) (u2772@syntax-dispatch u7571@t '(any each-any (any . each-any) (any . each-any) . each-any)))) u7569@e))) (set! u2873@parse-import-spec* ((lambda () ((lambda (u7608@idsyn? u7610@dup-error u7612@merge-substs u7614@exclude* u7616@find* u7618@rem* u7620@remove-dups u7622@parse-library-name u7624@import-library u7626@get-import u7628@add-imports!) (begin (set! u7608@idsyn? (lambda (u8119@x) (symbol? (u3011@syntax->datum u8119@x)))) (set! u7610@dup-error (lambda (u8117@name) (u3005@syntax-violation 'import '"two imports with different bindings" u8117@name))) (set! u7612@merge-substs (lambda (u8099@s u8100@subst) ((lambda (u8104@insert-to-subst) (begin (set! u8104@insert-to-subst (lambda (u8105@a u8106@subst) ((lambda (u8109@name u8110@label) ((lambda (u8113@t) (if u8113@t ((lambda (u8115@x) (if (eq? (cdr u8115@x) u8110@label) u8106@subst (u7610@dup-error u8109@name))) u8113@t) (cons u8105@a u8106@subst))) (assq u8109@name u8106@subst))) (car u8105@a) (cdr u8105@a)))) (if (null? u8099@s) u8100@subst (u8104@insert-to-subst (car u8099@s) (u7612@merge-substs (cdr u8099@s) u8100@subst))))) '#f))) (set! u7614@exclude* (lambda (u8057@sym* u8058@subst) ((lambda (u8062@exclude) (begin (set! u8062@exclude (lambda (u8083@sym u8084@subst) (if (null? u8084@subst) (u3005@syntax-violation 'import '"cannot rename unbound identifier" u8083@sym) (if (eq? u8083@sym (caar u8084@subst)) (values (cdar u8084@subst) (cdr u8084@subst)) ((lambda (u8087@a) (call-with-values (lambda () (u8062@exclude u8083@sym (cdr u8084@subst))) (lambda (u8091@u8089@old u8092@u8090@subst) ((lambda (u8095@subst u8096@old) (values u8096@old (cons u8087@a u8095@subst))) u8092@u8090@subst u8091@u8089@old)))) (car u8084@subst)))))) (if (null? u8057@sym*) (values '() u8058@subst) (call-with-values (lambda () (u8062@exclude (car u8057@sym*) u8058@subst)) (lambda (u8065@u8063@old u8066@u8064@subst) ((lambda (u8069@subst u8070@old) (call-with-values (lambda () (u7614@exclude* (cdr u8057@sym*) u8069@subst)) (lambda (u8075@u8073@old* u8076@u8074@subst) ((lambda (u8079@subst u8080@old*) (values (cons u8070@old u8080@old*) u8079@subst)) u8076@u8074@subst u8075@u8073@old*)))) u8066@u8064@subst u8065@u8063@old)))))) '#f))) (set! u7616@find* (lambda (u8049@sym* u8050@subst) (map (lambda (u8053@x) ((lambda (u8055@t) (if u8055@t (cdr u8055@t) (u3005@syntax-violation 'import '"cannot find identifier" u8053@x))) (assq u8053@x u8050@subst))) u8049@sym*))) (set! u7618@rem* (lambda (u8041@sym* u8042@subst) ((letrec ((u8045@f (lambda (u8047@subst) (if (null? u8047@subst) '() (if (memq (caar u8047@subst) u8041@sym*) (u8045@f (cdr u8047@subst)) (cons (car u8047@subst) (u8045@f (cdr u8047@subst)))))))) u8045@f) u8042@subst))) (set! u7620@remove-dups (lambda (u8039@ls) (if (null? u8039@ls) '() (if (memq (car u8039@ls) (cdr u8039@ls)) (u7620@remove-dups (cdr u8039@ls)) (cons (car u8039@ls) (u7620@remove-dups (cdr u8039@ls))))))) (set! u7622@parse-library-name (lambda (u7809@spec) ((lambda (u7812@subversion? u7814@subversion-pred u7816@version-pred) (begin (set! u7812@subversion? (lambda (u8035@x) ((lambda (u8037@x) (and (integer? u8037@x) (exact? u8037@x) (>= u8037@x '0))) (u3011@syntax->datum u8035@x)))) (set! u7814@subversion-pred (lambda (u7939@x*) ((lambda (u7941@t) ((lambda (u7943@ls/false) (if (and u7943@ls/false (apply (lambda (u7945@n) (u7812@subversion? u7945@n)) u7943@ls/false)) (apply (lambda (u7947@n) (lambda (u7949@x) (= u7949@x (u3011@syntax->datum u7947@n)))) u7943@ls/false) ((lambda (u7951@t) ((lambda (u7953@ls/false) (if (and u7953@ls/false (apply (lambda (u7955@p? u7956@sub*) (eq? (u3011@syntax->datum u7955@p?) 'and)) u7953@ls/false)) (apply (lambda (u7959@p? u7960@sub*) ((lambda (u7963@p*) (lambda (u7965@x) (for-all (lambda (u7967@p) (u7967@p u7965@x)) u7963@p*))) (map u7814@subversion-pred u7960@sub*))) u7953@ls/false) ((lambda (u7969@t) ((lambda (u7971@ls/false) (if (and u7971@ls/false (apply (lambda (u7973@p? u7974@sub*) (eq? (u3011@syntax->datum u7973@p?) 'or)) u7971@ls/false)) (apply (lambda (u7977@p? u7978@sub*) ((lambda (u7981@p*) (lambda (u7983@x) (exists (lambda (u7985@p) (u7985@p u7983@x)) u7981@p*))) (map u7814@subversion-pred u7978@sub*))) u7971@ls/false) ((lambda (u7987@t) ((lambda (u7989@ls/false) (if (and u7989@ls/false (apply (lambda (u7991@p? u7992@sub) (eq? (u3011@syntax->datum u7991@p?) 'not)) u7989@ls/false)) (apply (lambda (u7995@p? u7996@sub) ((lambda (u7999@p) (lambda (u8001@x) (not (u7999@p u8001@x)))) (u7814@subversion-pred u7996@sub))) u7989@ls/false) ((lambda (u8003@t) ((lambda (u8005@ls/false) (if (and u8005@ls/false (apply (lambda (u8007@p? u8008@n) (and (eq? (u3011@syntax->datum u8007@p?) '<=) (u7812@subversion? u8008@n))) u8005@ls/false)) (apply (lambda (u8011@p? u8012@n) (lambda (u8015@x) (<= u8015@x (u3011@syntax->datum u8012@n)))) u8005@ls/false) ((lambda (u8017@t) ((lambda (u8019@ls/false) (if (and u8019@ls/false (apply (lambda (u8021@p? u8022@n) (and (eq? (u3011@syntax->datum u8021@p?) '>=) (u7812@subversion? u8022@n))) u8019@ls/false)) (apply (lambda (u8025@p? u8026@n) (lambda (u8029@x) (>= u8029@x (u3011@syntax->datum u8026@n)))) u8019@ls/false) ((lambda (u8031@t) ((lambda (u8033@ls/false) (if u8033@ls/false (apply (lambda () (u3005@syntax-violation 'import '"invalid sub-version spec" u7809@spec u7939@x*)) u8033@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u8031@t))) (u2772@syntax-dispatch u8031@t '_))) u8017@t))) (u2772@syntax-dispatch u8017@t '(any any)))) u8003@t))) (u2772@syntax-dispatch u8003@t '(any any)))) u7987@t))) (u2772@syntax-dispatch u7987@t '(any any)))) u7969@t))) (u2772@syntax-dispatch u7969@t '(any . each-any)))) u7951@t))) (u2772@syntax-dispatch u7951@t '(any . each-any)))) u7941@t))) (u2772@syntax-dispatch u7941@t 'any))) u7939@x*))) (set! u7816@version-pred (lambda (u7859@x*) ((lambda (u7861@t) ((lambda (u7863@ls/false) (if u7863@ls/false (apply (lambda () (lambda (u7865@x) '#t)) u7863@ls/false) ((lambda (u7867@t) ((lambda (u7869@ls/false) (if (and u7869@ls/false (apply (lambda (u7871@c u7872@ver*) (eq? (u3011@syntax->datum u7871@c) 'and)) u7869@ls/false)) (apply (lambda (u7875@c u7876@ver*) ((lambda (u7879@p*) (lambda (u7881@x) (for-all (lambda (u7883@p) (u7883@p u7881@x)) u7879@p*))) (map u7816@version-pred u7876@ver*))) u7869@ls/false) ((lambda (u7885@t) ((lambda (u7887@ls/false) (if (and u7887@ls/false (apply (lambda (u7889@c u7890@ver*) (eq? (u3011@syntax->datum u7889@c) 'or)) u7887@ls/false)) (apply (lambda (u7893@c u7894@ver*) ((lambda (u7897@p*) (lambda (u7899@x) (exists (lambda (u7901@p) (u7901@p u7899@x)) u7897@p*))) (map u7816@version-pred u7894@ver*))) u7887@ls/false) ((lambda (u7903@t) ((lambda (u7905@ls/false) (if (and u7905@ls/false (apply (lambda (u7907@c u7908@ver) (eq? (u3011@syntax->datum u7907@c) 'not)) u7905@ls/false)) (apply (lambda (u7911@c u7912@ver) ((lambda (u7915@p) (lambda (u7917@x) (not (u7915@p u7917@x)))) (u7816@version-pred u7912@ver))) u7905@ls/false) ((lambda (u7919@t) ((lambda (u7921@ls/false) (if u7921@ls/false (apply (lambda (u7923@sub*) ((lambda (u7925@p*) (lambda (u7927@x) ((letrec ((u7929@f (lambda (u7931@p* u7932@x) (if (null? u7931@p*) '#t (if (null? u7932@x) '#f (and ((car u7931@p*) (car u7932@x)) (u7929@f (cdr u7931@p*) (cdr u7932@x)))))))) u7929@f) u7925@p* u7927@x))) (map u7814@subversion-pred u7923@sub*))) u7921@ls/false) ((lambda (u7935@t) ((lambda (u7937@ls/false) (if u7937@ls/false (apply (lambda () (u3005@syntax-violation 'import '"invalid version spec" u7809@spec u7859@x*)) u7937@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u7935@t))) (u2772@syntax-dispatch u7935@t '_))) u7919@t))) (u2772@syntax-dispatch u7919@t 'each-any))) u7903@t))) (u2772@syntax-dispatch u7903@t '(any any)))) u7885@t))) (u2772@syntax-dispatch u7885@t '(any . each-any)))) u7867@t))) (u2772@syntax-dispatch u7867@t '(any . each-any)))) u7861@t))) (u2772@syntax-dispatch u7861@t '()))) u7859@x*))) ((letrec ((u7817@f (lambda (u7819@x) ((lambda (u7821@t) ((lambda (u7823@ls/false) (if u7823@ls/false (apply (lambda (u7825@version-spec*) (values '() (u7816@version-pred u7825@version-spec*))) u7823@ls/false) ((lambda (u7827@t) ((lambda (u7829@ls/false) (if (and u7829@ls/false (apply (lambda (u7831@x u7832@x*) (u7608@idsyn? u7831@x)) u7829@ls/false)) (apply (lambda (u7835@x u7836@x*) (call-with-values (lambda () (u7817@f u7836@x*)) (lambda (u7841@u7839@name u7842@u7840@pred) ((lambda (u7845@pred u7846@name) (values (cons (u3011@syntax->datum u7835@x) u7846@name) u7845@pred)) u7842@u7840@pred u7841@u7839@name)))) u7829@ls/false) ((lambda (u7849@t) ((lambda (u7851@ls/false) (if u7851@ls/false (apply (lambda () (values '() (lambda (u7853@x) '#t))) u7851@ls/false) ((lambda (u7855@t) ((lambda (u7857@ls/false) (if u7857@ls/false (apply (lambda () (u3005@syntax-violation '#f '"invalid import spec" u7809@spec)) u7857@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u7855@t))) (u2772@syntax-dispatch u7855@t '_))) u7849@t))) (u2772@syntax-dispatch u7849@t '()))) u7827@t))) (u2772@syntax-dispatch u7827@t '(any . any)))) u7821@t))) (u2772@syntax-dispatch u7821@t '(each-any)))) u7819@x)))) u7817@f) u7809@spec))) '#f '#f '#f))) (set! u7624@import-library (lambda (u7795@spec*) (call-with-values (lambda () (u7622@parse-library-name u7795@spec*)) (lambda (u7799@u7797@name u7800@u7798@pred) ((lambda (u7803@pred u7804@name) (begin (if (null? u7804@name) (u3005@syntax-violation 'import '"empty library name" u7795@spec*) (void)) ((lambda (u7807@lib) (begin (if (not u7807@lib) (u3005@syntax-violation 'import '"cannot find library with required name" u7804@name) (void)) (if (not (u7803@pred (u1754@u1362@library-version u7807@lib))) (u3005@syntax-violation 'import '"library does not satisfy version specification" u7795@spec* u7807@lib) (void)) ((u2883@imp-collector) u7807@lib) (u1758@u1370@library-subst u7807@lib))) (u1794@u1442@find-library-by-name u7804@name)))) u7800@u7798@pred u7799@u7797@name))))) (set! u7626@get-import (lambda (u7653@spec) ((lambda (u7655@t) ((lambda (u7657@ls/false) (if (and u7657@ls/false (apply (lambda (u7659@x u7660@x*) (not (memq (u3011@syntax->datum u7659@x) '(for rename except only prefix library)))) u7657@ls/false)) (apply (lambda (u7663@x u7664@x*) (u7624@import-library (cons u7663@x u7664@x*))) u7657@ls/false) ((lambda (u7667@t) ((lambda (u7669@ls/false) (if (and u7669@ls/false (apply (lambda (u7671@rename u7672@isp u7673@old* u7674@new*) (and (eq? (u3011@syntax->datum u7671@rename) 'rename) (for-all u7608@idsyn? u7673@old*) (for-all u7608@idsyn? u7674@new*))) u7669@ls/false)) (apply (lambda (u7679@rename u7680@isp u7681@old* u7682@new*) ((lambda (u7687@subst u7688@old* u7689@new*) ((lambda (u7693@old-label*) ((lambda (u7695@subst) (u7612@merge-substs (map cons u7689@new* u7693@old-label*) u7695@subst)) (u7618@rem* u7688@old* u7687@subst))) (u7616@find* u7688@old* u7687@subst))) (u7626@get-import u7680@isp) (map u3011@syntax->datum u7681@old*) (map u3011@syntax->datum u7682@new*))) u7669@ls/false) ((lambda (u7697@t) ((lambda (u7699@ls/false) (if (and u7699@ls/false (apply (lambda (u7701@except u7702@isp u7703@sym*) (and (eq? (u3011@syntax->datum u7701@except) 'except) (for-all u7608@idsyn? u7703@sym*))) u7699@ls/false)) (apply (lambda (u7707@except u7708@isp u7709@sym*) ((lambda (u7713@subst) (u7618@rem* (map u3011@syntax->datum u7709@sym*) u7713@subst)) (u7626@get-import u7708@isp))) u7699@ls/false) ((lambda (u7715@t) ((lambda (u7717@ls/false) (if (and u7717@ls/false (apply (lambda (u7719@only u7720@isp u7721@sym*) (and (eq? (u3011@syntax->datum u7719@only) 'only) (for-all u7608@idsyn? u7721@sym*))) u7717@ls/false)) (apply (lambda (u7725@only u7726@isp u7727@sym*) ((lambda (u7731@subst u7732@sym*) ((lambda (u7735@sym*) ((lambda (u7737@lab*) (map cons u7735@sym* u7737@lab*)) (u7616@find* u7735@sym* u7731@subst))) (u7620@remove-dups u7732@sym*))) (u7626@get-import u7726@isp) (map u3011@syntax->datum u7727@sym*))) u7717@ls/false) ((lambda (u7739@t) ((lambda (u7741@ls/false) (if (and u7741@ls/false (apply (lambda (u7743@prefix u7744@isp u7745@p) (and (eq? (u3011@syntax->datum u7743@prefix) 'prefix) (u7608@idsyn? u7745@p))) u7741@ls/false)) (apply (lambda (u7749@prefix u7750@isp u7751@p) ((lambda (u7755@subst u7756@prefix) (map (lambda (u7759@x) (cons (string->symbol (string-append u7756@prefix (symbol->string (car u7759@x)))) (cdr u7759@x))) u7755@subst)) (u7626@get-import u7750@isp) (symbol->string (u3011@syntax->datum u7751@p)))) u7741@ls/false) ((lambda (u7761@t) ((lambda (u7763@ls/false) (if (and u7763@ls/false (apply (lambda (u7765@library u7766@spec*) (eq? (u3011@syntax->datum u7765@library) 'library)) u7763@ls/false)) (apply (lambda (u7769@library u7770@spec*) (u7624@import-library u7770@spec*)) u7763@ls/false) ((lambda (u7773@t) ((lambda (u7775@ls/false) (if (and u7775@ls/false (apply (lambda (u7777@for u7778@isp u7779@rest) (eq? (u3011@syntax->datum u7777@for) 'for)) u7775@ls/false)) (apply (lambda (u7783@for u7784@isp u7785@rest) (u7626@get-import u7784@isp)) u7775@ls/false) ((lambda (u7789@t) ((lambda (u7791@ls/false) (if u7791@ls/false (apply (lambda (u7793@spec) (u3005@syntax-violation 'import '"invalid import spec" u7793@spec)) u7791@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u7789@t))) (u2772@syntax-dispatch u7789@t 'any))) u7773@t))) (u2772@syntax-dispatch u7773@t '(any any . any)))) u7761@t))) (u2772@syntax-dispatch u7761@t '(any each-any)))) u7739@t))) (u2772@syntax-dispatch u7739@t '(any any any)))) u7715@t))) (u2772@syntax-dispatch u7715@t '(any any . each-any)))) u7697@t))) (u2772@syntax-dispatch u7697@t '(any any . each-any)))) u7667@t))) (u2772@syntax-dispatch u7667@t '(any any . #(each (any any)))))) u7655@t))) (u2772@syntax-dispatch u7655@t '(any . each-any)))) u7653@spec))) (set! u7628@add-imports! (lambda (u7637@imp u7638@h) ((lambda (u7641@subst) (for-each (lambda (u7643@x) ((lambda (u7645@name u7646@label) ((lambda (u7649@t) (if u7649@t ((lambda (u7651@l) (if (not (eq? u7651@l u7646@label)) (u7610@dup-error u7645@name) (void))) u7649@t) (hashtable-set! u7638@h u7645@name u7646@label))) (hashtable-ref u7638@h u7645@name '#f))) (car u7643@x) (cdr u7643@x))) u7641@subst)) (u7626@get-import u7637@imp)))) (lambda (u7629@imp*) ((letrec ((u7631@f (lambda (u7633@imp* u7634@h) (if (null? u7633@imp*) (hashtable-entries u7634@h) (begin (u7628@add-imports! (car u7633@imp*) u7634@h) (u7631@f (cdr u7633@imp*) u7634@h)))))) u7631@f) u7629@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! u2875@make-top-rib (lambda (u8121@names u8122@labels) ((lambda (u8125@rib) (begin (vector-for-each (lambda (u8127@name u8128@label) (begin (if (not (symbol? u8127@name)) (error 'make-top-rib '"BUG: not a symbol" u8127@name) (void)) (u2198@extend-rib/nc! u8125@rib (u2221@make-stx u8127@name u2143@top-mark* '() '()) u8128@label))) u8121@names u8122@labels) u8125@rib)) (u2194@make-empty-rib)))) (set! u2877@make-collector (lambda () ((lambda (u8131@ls) (lambda u8135 ((lambda (u8136) (if (= u8136 '0) (apply (lambda () u8131@ls) u8135) (if (= u8136 '1) (apply (lambda (u8133@x) (set! u8131@ls (u2136@set-cons u8133@x u8131@ls))) u8135) (error 'apply '"invalid arg count")))) (length u8135)))) '()))) (set! u2879@inv-collector (u1173@u951@make-parameter (lambda u8137@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (u8139@x) (begin (if (not (procedure? u8139@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" u8139@x) (void)) u8139@x)))) (set! u2881@vis-collector (u1173@u951@make-parameter (lambda u8141@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (u8143@x) (begin (if (not (procedure? u8143@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" u8143@x) (void)) u8143@x)))) (set! u2883@imp-collector (u1173@u951@make-parameter (lambda u8145@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (u8147@x) (begin (if (not (procedure? u8147@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" u8147@x) (void)) u8147@x)))) (set! u2885@chi-library-internal (lambda (u8149@e* u8150@rib u8151@top?) (call-with-values (lambda () (u2863@chi-body* u8149@e* '() '() '() '() '() '() '() u8150@rib u8151@top?)) (lambda (u8163@u8155@e* u8164@u8156@r u8165@u8157@mr u8166@u8158@lex* u8167@u8159@rhs* u8168@u8160@mod** u8169@u8161@_kwd* u8170@u8162@exp*) ((lambda (u8179@exp* u8180@_kwd* u8181@mod** u8182@rhs* u8183@lex* u8184@mr u8185@r u8186@e*) (values (append (apply append (reverse u8181@mod**)) u8186@e*) u8185@r u8184@mr (reverse u8183@lex*) (reverse u8182@rhs*) u8179@exp*)) u8170@u8162@exp* u8169@u8161@_kwd* u8168@u8160@mod** u8167@u8159@rhs* u8166@u8158@lex* u8165@u8157@mr u8164@u8156@r u8163@u8155@e*))))) (set! u2887@chi-interaction-expr (lambda (u8195@e u8196@rib u8197@r) (call-with-values (lambda () (u2863@chi-body* (list u8195@e) u8197@r u8197@r '() '() '() '() '() u8196@rib '#t)) (lambda (u8209@u8201@e* u8210@u8202@r u8211@u8203@mr u8212@u8204@lex* u8213@u8205@rhs* u8214@u8206@mod** u8215@u8207@_kwd* u8216@u8208@_exp*) ((lambda (u8225@_exp* u8226@_kwd* u8227@mod** u8228@rhs* u8229@lex* u8230@mr u8231@r u8232@e*) ((lambda (u8241@e*) ((lambda (u8243@e) (values u8243@e u8231@r)) (if (null? u8241@e*) (u2115@u1973@build-void) (if (null? (cdr u8241@e*)) (car u8241@e*) (u2114@u1971@build-sequence '#f u8241@e*))))) (u2820@expand-interaction-rhs*/init* (reverse u8229@lex*) (reverse u8228@rhs*) (append (apply append (reverse u8227@mod**)) u8232@e*) u8231@r u8230@mr))) u8216@u8208@_exp* u8215@u8207@_kwd* u8214@u8206@mod** u8213@u8205@rhs* u8212@u8204@lex* u8211@u8203@mr u8210@u8202@r u8209@u8201@e*))))) (set! u2889@library-body-expander (lambda (u8245@name u8246@main-exp* u8247@imp* u8248@b* u8249@top?) ((lambda (u8256@itc) (begin (set! u8256@itc (u2877@make-collector)) ((lambda (u8261@u8257@imp-collector u8262@u8258@top-level-context u8263@u8259@imp-collector u8264@u8260@top-level-context) ((lambda (u8269@swap) (dynamic-wind u8269@swap (lambda () (call-with-values (lambda () (u2873@parse-import-spec* u8247@imp*)) (lambda (u8273@u8271@subst-names u8274@u8272@subst-labels) ((lambda (u8277@subst-labels u8278@subst-names) ((lambda (u8281@rib) ((lambda (u8284@wrap) (begin (set! u8284@wrap (lambda (u8392@x) (u2221@make-stx u8392@x u2143@top-mark* (list u8281@rib) '()))) ((lambda (u8285@b* u8286@main-exp* u8287@rtc u8288@vtc) ((lambda (u8297@u8293@inv-collector u8298@u8294@vis-collector u8299@u8295@inv-collector u8300@u8296@vis-collector) ((lambda (u8305@swap) (dynamic-wind u8305@swap (lambda () (call-with-values (lambda () (u2885@chi-library-internal u8285@b* u8281@rib u8249@top?)) (lambda (u8313@u8307@init* u8314@u8308@r u8315@u8309@mr u8316@u8310@lex* u8317@u8311@rhs* u8318@u8312@internal-exp*) ((lambda (u8325@internal-exp* u8326@rhs* u8327@lex* u8328@mr u8329@r u8330@init*) (call-with-values (lambda () (u2867@parse-exports (append u8286@main-exp* u8325@internal-exp*))) (lambda (u8339@u8337@exp-name* u8340@u8338@exp-id*) ((lambda (u8343@exp-id* u8344@exp-name*) (begin (u2202@seal-rib! u8281@rib) ((lambda (u8347@init*) ((lambda (u8349@rhs*) ((lambda () (begin (u2204@unseal-rib! u8281@rib) ((lambda (u8351@loc* u8352@export-subst) ((lambda (u8356@errstr) (begin (set! u8356@errstr '"attempt to export mutated variable") (call-with-values (lambda () (u2985@make-export-env/macros u8327@lex* u8351@loc* u8329@r)) (lambda (u8360@u8357@export-env u8361@u8358@global* u8362@u8359@macro*) ((lambda (u8366@macro* u8367@global* u8368@export-env) (begin (for-each (lambda (u8372@s) ((lambda (u8374@name u8375@label) ((lambda (u8378@p) (if u8378@p ((lambda (u8380@b) ((lambda (u8382@type) (if (eq? u8382@type 'mutable) (u3005@syntax-violation 'export u8356@errstr u8374@name) (void))) (car u8380@b))) (cdr u8378@p)) (void))) (assq u8375@label u8368@export-env))) (car u8372@s) (cdr u8372@s))) u8352@export-subst) ((lambda (u8384@invoke-body u8385@invoke-definitions) (values (u8256@itc) (u8287@rtc) (u8288@vtc) (u2114@u1971@build-sequence '#f (append u8385@invoke-definitions (list u8384@invoke-body))) u8366@macro* u8352@export-subst u8368@export-env)) (u2117@u1977@build-letrec* '#f u8327@lex* u8349@rhs* (u2981@build-exports u8367@global* u8347@init*)) (map u2110@u1808@build-global-define (map cdr u8367@global*))))) u8362@u8359@macro* u8361@u8358@global* u8360@u8357@export-env))))) '#f)) (map u2149@gen-global u8327@lex*) (u2983@make-export-subst u8344@exp-name* u8343@exp-id*)))))) (u2822@chi-rhs* u8326@rhs* u8329@r u8328@mr))) (u2802@chi-expr* u8330@init* u8329@r u8328@mr)))) u8340@u8338@exp-id* u8339@u8337@exp-name*)))) u8318@u8312@internal-exp* u8317@u8311@rhs* u8316@u8310@lex* u8315@u8309@mr u8314@u8308@r u8313@u8307@init*)))) u8305@swap)) (lambda () (begin ((lambda (u8388@t) (begin (u8297@u8293@inv-collector u8299@u8295@inv-collector) (set! u8299@u8295@inv-collector u8388@t))) (u8297@u8293@inv-collector)) ((lambda (u8390@t) (begin (u8298@u8294@vis-collector u8300@u8296@vis-collector) (set! u8300@u8296@vis-collector u8390@t))) (u8298@u8294@vis-collector)))))) u2879@inv-collector u2881@vis-collector u8287@rtc u8288@vtc)) (map u8284@wrap u8248@b*) (map u8284@wrap u8246@main-exp*) (u2877@make-collector) (u2877@make-collector)))) '#f)) (u2875@make-top-rib u8278@subst-names u8277@subst-labels))) u8274@u8272@subst-labels u8273@u8271@subst-names)))) u8269@swap)) (lambda () (begin ((lambda (u8394@t) (begin (u8261@u8257@imp-collector u8263@u8259@imp-collector) (set! u8263@u8259@imp-collector u8394@t))) (u8261@u8257@imp-collector)) ((lambda (u8396@t) (begin (u8262@u8258@top-level-context u8264@u8260@top-level-context) (set! u8264@u8260@top-level-context u8396@t))) (u8262@u8258@top-level-context)))))) u2883@imp-collector u3019@top-level-context u8256@itc '#f))) '#f))) (set! u2891@core-library-expander (lambda (u8398@e u8399@verify-name) (call-with-values (lambda () (u2871@parse-library u8398@e)) (lambda (u8406@u8402@name* u8407@u8403@exp* u8408@u8404@imp* u8409@u8405@b*) ((lambda (u8414@b* u8415@imp* u8416@exp* u8417@name*) (call-with-values (lambda () (u2869@parse-library-name u8417@name*)) (lambda (u8424@u8422@name u8425@u8423@ver) ((lambda (u8428@ver u8429@name) (begin (u8399@verify-name u8429@name) (call-with-values (lambda () (u2889@library-body-expander u8429@name u8416@exp* u8415@imp* u8414@b* '#f)) (lambda (u8439@u8432@imp* u8440@u8433@invoke-req* u8441@u8434@visit-req* u8442@u8435@invoke-code u8443@u8436@visit-code u8444@u8437@export-subst u8445@u8438@export-env) ((lambda (u8453@export-env u8454@export-subst u8455@visit-code u8456@invoke-code u8457@visit-req* u8458@invoke-req* u8459@imp*) (values u8429@name u8428@ver u8459@imp* u8458@invoke-req* u8457@visit-req* u8456@invoke-code u8455@visit-code u8454@export-subst u8453@export-env)) u8445@u8438@export-env u8444@u8437@export-subst u8443@u8436@visit-code u8442@u8435@invoke-code u8441@u8434@visit-req* u8440@u8433@invoke-req* u8439@u8432@imp*))))) u8425@u8423@ver u8424@u8422@name)))) u8409@u8405@b* u8408@u8404@imp* u8407@u8403@exp* u8406@u8402@name*))))) (set! u2893@parse-top-level-program (lambda (u8467@e*) ((lambda (u8469@t) ((lambda (u8471@ls/false) (if (and u8471@ls/false (apply (lambda (u8473@import u8474@imp* u8475@b*) (eq? (u3011@syntax->datum u8473@import) 'import)) u8471@ls/false)) (apply (lambda (u8479@import u8480@imp* u8481@b*) (values u8480@imp* u8481@b*)) u8471@ls/false) ((lambda (u8485@t) ((lambda (u8487@ls/false) (if (and u8487@ls/false (apply (lambda (u8489@import u8490@x u8491@y) (eq? (u3011@syntax->datum u8489@import) 'import)) u8487@ls/false)) (apply (lambda (u8495@import u8496@x u8497@y) (u3005@syntax-violation 'expander '"invalid syntax of top-level program" (u2269@syntax-car u8467@e*))) u8487@ls/false) ((lambda (u8501@t) ((lambda (u8503@ls/false) (if u8503@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) u8503@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u8501@t))) (u2772@syntax-dispatch u8501@t '_))) u8485@t))) (u2772@syntax-dispatch u8485@t '((any . any) . any)))) u8469@t))) (u2772@syntax-dispatch u8469@t '((any . each-any) . each-any)))) u8467@e*))) (set! u2895@top-level-expander (lambda (u8505@e*) (call-with-values (lambda () (u2893@parse-top-level-program u8505@e*)) (lambda (u8509@u8507@imp* u8510@u8508@b*) ((lambda (u8513@b* u8514@imp*) (call-with-values (lambda () (u2889@library-body-expander '() '() u8514@imp* u8513@b* '#t)) (lambda (u8524@u8517@imp* u8525@u8518@invoke-req* u8526@u8519@visit-req* u8527@u8520@invoke-code u8528@u8521@visit-code u8529@u8522@export-subst u8530@u8523@export-env) ((lambda (u8538@export-env u8539@export-subst u8540@visit-code u8541@invoke-code u8542@visit-req* u8543@invoke-req* u8544@imp*) (values u8543@invoke-req* u8541@invoke-code)) u8530@u8523@export-env u8529@u8522@export-subst u8528@u8521@visit-code u8527@u8520@invoke-code u8526@u8519@visit-req* u8525@u8518@invoke-req* u8524@u8517@imp*)))) u8510@u8508@b* u8509@u8507@imp*))))) (set! u2901@u2896 (make-record-type-descriptor 'env '#f 'u2899 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! u2903@u2898 '#f) (set! u2905@u2897 (make-record-constructor-descriptor u2901@u2896 '#f u2903@u2898)) (set! u2908@env? (record-predicate u2901@u2896)) (set! u2910@make-env (record-constructor u2905@u2897)) (set! u2912@env-names (record-accessor u2901@u2896 '0)) (set! u2914@env-labels (record-accessor u2901@u2896 '1)) (set! u2916@env-itc (record-accessor u2901@u2896 '2)) (set! u2918@set-env-names! (record-mutator u2901@u2896 '0)) (set! u2920@set-env-labels! (record-mutator u2901@u2896 '1)) (set! u2922@set-env-itc! (record-mutator u2901@u2896 '2)) (set! u2924@rp (u1170@u945@make-record-printer 'env (lambda (u8552@x u8553@p u8554@wr) (display '"#<environment>" u8553@p)))) (set! u2930@u2925 (make-record-type-descriptor 'interaction-env '#f 'u2928 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! u2932@u2927 '#f) (set! u2934@u2926 (make-record-constructor-descriptor u2930@u2925 '#f u2932@u2927)) (set! u2937@interaction-env? (record-predicate u2930@u2925)) (set! u2939@make-interaction-env (record-constructor u2934@u2926)) (set! u2941@interaction-env-rib (record-accessor u2930@u2925 '0)) (set! u2943@interaction-env-r (record-accessor u2930@u2925 '1)) (set! u2945@interaction-env-locs (record-accessor u2930@u2925 '2)) (set! u2947@set-interaction-env-rib! (record-mutator u2930@u2925 '0)) (set! u2949@set-interaction-env-r! (record-mutator u2930@u2925 '1)) (set! u2951@set-interaction-env-locs! (record-mutator u2930@u2925 '2)) (set! u2953@rp (u1170@u945@make-record-printer 'interaction-env (lambda (u8558@x u8559@p u8560@wr) (display '"#<environment>" u8559@p)))) (set! u2955@interaction-environment-symbols (lambda () (u2963@environment-symbols (u3017@interaction-environment)))) (set! u2957@environment-bindings (lambda (u8564@e) (vector->list (vector-map (lambda (u8566@name u8567@label) (u2959@parse-binding (cons u8566@name (u1800@u1454@imported-label->binding u8567@label)))) (u2912@env-names u8564@e) (u2914@env-labels u8564@e))))) (set! u2959@parse-binding (lambda (u8570@b) (cons (car u8570@b) ((lambda (u8572@t) (if (memv u8572@t '(core-prim global)) 'procedure (if (memv u8572@t '(core-macro macro global-macro)) 'syntax (if (memv u8572@t '($core-rtd)) 'record (if (eq? (car u8570@b) (cadr u8570@b)) 'syntax 'unknown))))) (cadr u8570@b))))) (set! u2961@environment? (lambda (u8574@x) (or (u2908@env? u8574@x) (u2937@interaction-env? u8574@x)))) (set! u2963@environment-symbols (lambda (u8576@x) (if (u2908@env? u8576@x) (vector->list (u2912@env-names u8576@x)) (if (u2937@interaction-env? u8576@x) (map values (u2174@rib-sym* (u2941@interaction-env-rib u8576@x))) (assertion-violation 'environment-symbols '"not an environment" u8576@x))))) (set! u2965@environment (lambda u8578@imp* ((lambda (u8580@itc) ((lambda (u8584@u8582@imp-collector u8585@u8583@imp-collector) ((lambda (u8588@swap) (dynamic-wind u8588@swap (lambda () (call-with-values (lambda () (u2873@parse-import-spec* u8578@imp*)) (lambda (u8592@u8590@subst-names u8593@u8591@subst-labels) ((lambda (u8596@subst-labels u8597@subst-names) (u2910@make-env u8597@subst-names u8596@subst-labels u8580@itc)) u8593@u8591@subst-labels u8592@u8590@subst-names)))) u8588@swap)) (lambda () ((lambda (u8600@t) (begin (u8584@u8582@imp-collector u8585@u8583@imp-collector) (set! u8585@u8583@imp-collector u8600@t))) (u8584@u8582@imp-collector))))) u2883@imp-collector u8580@itc)) (u2877@make-collector)))) (set! u2967@null-environment (lambda (u8602@n) (begin (if (not (eqv? u8602@n '5)) (assertion-violation 'null-environment '"not 5" u8602@n) (void)) (u2965@environment '(psyntax null-environment-5))))) (set! u2969@scheme-report-environment (lambda (u8604@n) (begin (if (not (eqv? u8604@n '5)) (assertion-violation 'scheme-report-environment '"not 5" u8604@n) (void)) (u2965@environment '(psyntax scheme-report-environment-5))))) (set! u2971@expand (lambda (u8606@x u8607@env) (if (u2908@env? u8607@env) ((lambda (u8610@rib) ((lambda (u8612@x u8613@itc u8614@rtc u8615@vtc) ((lambda (u8620@x) (begin (u2202@seal-rib! u8610@rib) (values u8620@x (u8614@rtc)))) ((lambda (u8630@u8622@top-level-context u8631@u8623@inv-collector u8632@u8624@vis-collector u8633@u8625@imp-collector u8634@u8626@top-level-context u8635@u8627@inv-collector u8636@u8628@vis-collector u8637@u8629@imp-collector) ((lambda (u8646@swap) (dynamic-wind u8646@swap (lambda () (u2806@chi-expr u8612@x '() '())) u8646@swap)) (lambda () (begin ((lambda (u8648@t) (begin (u8630@u8622@top-level-context u8634@u8626@top-level-context) (set! u8634@u8626@top-level-context u8648@t))) (u8630@u8622@top-level-context)) ((lambda (u8650@t) (begin (u8631@u8623@inv-collector u8635@u8627@inv-collector) (set! u8635@u8627@inv-collector u8650@t))) (u8631@u8623@inv-collector)) ((lambda (u8652@t) (begin (u8632@u8624@vis-collector u8636@u8628@vis-collector) (set! u8636@u8628@vis-collector u8652@t))) (u8632@u8624@vis-collector)) ((lambda (u8654@t) (begin (u8633@u8625@imp-collector u8637@u8629@imp-collector) (set! u8637@u8629@imp-collector u8654@t))) (u8633@u8625@imp-collector)))))) u3019@top-level-context u2879@inv-collector u2881@vis-collector u2883@imp-collector '#f u8614@rtc u8615@vtc u8613@itc))) (u2221@make-stx u8606@x u2143@top-mark* (list u8610@rib) '()) (u2916@env-itc u8607@env) (u2877@make-collector) (u2877@make-collector))) (u2875@make-top-rib (u2912@env-names u8607@env) (u2914@env-labels u8607@env))) (if (u2937@interaction-env? u8607@env) ((lambda (u8656@rib u8657@r u8658@rtc) ((lambda (u8662@x) (call-with-values (lambda () ((lambda (u8674@u8666@top-level-context u8675@u8667@inv-collector u8676@u8668@vis-collector u8677@u8669@imp-collector u8678@u8670@top-level-context u8679@u8671@inv-collector u8680@u8672@vis-collector u8681@u8673@imp-collector) ((lambda (u8690@swap) (dynamic-wind u8690@swap (lambda () (u2887@chi-interaction-expr u8662@x u8656@rib u8657@r)) u8690@swap)) (lambda () (begin ((lambda (u8692@t) (begin (u8674@u8666@top-level-context u8678@u8670@top-level-context) (set! u8678@u8670@top-level-context u8692@t))) (u8674@u8666@top-level-context)) ((lambda (u8694@t) (begin (u8675@u8667@inv-collector u8679@u8671@inv-collector) (set! u8679@u8671@inv-collector u8694@t))) (u8675@u8667@inv-collector)) ((lambda (u8696@t) (begin (u8676@u8668@vis-collector u8680@u8672@vis-collector) (set! u8680@u8672@vis-collector u8696@t))) (u8676@u8668@vis-collector)) ((lambda (u8698@t) (begin (u8677@u8669@imp-collector u8681@u8673@imp-collector) (set! u8681@u8673@imp-collector u8698@t))) (u8677@u8669@imp-collector)))))) u3019@top-level-context u2879@inv-collector u2881@vis-collector u2883@imp-collector u8607@env u8658@rtc (u2877@make-collector) (u2877@make-collector))) (lambda (u8700@u8664@e u8701@u8665@r^) ((lambda (u8704@r^ u8705@e) (begin (u2949@set-interaction-env-r! u8607@env u8704@r^) (values u8705@e (u8658@rtc)))) u8701@u8665@r^ u8700@u8664@e)))) (u2221@make-stx u8606@x u2143@top-mark* (list u8656@rib) '()))) (u2941@interaction-env-rib u8607@env) (u2943@interaction-env-r u8607@env) (u2877@make-collector)) (assertion-violation 'expand '"not an environment" u8607@env))))) (set! u2973@eval (lambda (u8708@x u8709@env) (begin (if (not (u2961@environment? u8709@env)) (error 'eval '"not an environment" u8709@env) (void)) (call-with-values (lambda () (u2971@expand u8708@x u8709@env)) (lambda (u8714@u8712@x u8715@u8713@invoke-req*) ((lambda (u8718@invoke-req* u8719@x) (begin (for-each u1801@u1456@invoke-library u8718@invoke-req*) (eval-core (u1257@u1185@expanded->core u8719@x)))) u8715@u8713@invoke-req* u8714@u8712@x)))))) (set! u2975@library-expander (lambda u8823 ((lambda (u8824) (if (= u8824 '3) (apply (lambda (u8722@x u8723@filename u8724@verify-name) ((lambda (u8729@build-visit-code u8731@visit!) (begin (set! u8729@build-visit-code (lambda (u8805@macro*) (if (null? u8805@macro*) (u2115@u1973@build-void) (u2114@u1971@build-sequence '#f (map (lambda (u8807@x) ((lambda (u8809@loc u8810@src) (list 'set! u8809@loc u8810@src)) (car u8807@x) (cddr u8807@x))) u8805@macro*))))) (set! u8731@visit! (lambda (u8797@macro*) (for-each (lambda (u8799@x) ((lambda (u8801@loc u8802@proc) (set-symbol-value! u8801@loc u8802@proc)) (car u8799@x) (cadr u8799@x))) u8797@macro*))) (call-with-values (lambda () (u2891@core-library-expander u8722@x u8724@verify-name)) (lambda (u8741@u8732@name u8742@u8733@ver u8743@u8734@imp* u8744@u8735@inv* u8745@u8736@vis* u8746@u8737@invoke-code u8747@u8738@macro* u8748@u8739@export-subst u8749@u8740@export-env) ((lambda (u8759@export-env u8760@export-subst u8761@macro* u8762@invoke-code u8763@vis* u8764@inv* u8765@imp* u8766@ver u8767@name) ((lambda (u8777@id u8778@name u8779@ver u8780@imp* u8781@vis* u8782@inv* u8783@visit-proc u8784@invoke-proc u8785@visit-code u8786@invoke-code) (begin (u1799@u1452@install-library u8777@id u8778@name u8779@ver u8780@imp* u8781@vis* u8782@inv* u8760@export-subst u8759@export-env u8783@visit-proc u8784@invoke-proc u8785@visit-code u8786@invoke-code '#t u8723@filename) (values u8777@id u8778@name u8779@ver u8780@imp* u8781@vis* u8782@inv* u8786@invoke-code u8785@visit-code u8760@export-subst u8759@export-env))) (u1159@u923@gensym) u8767@name u8766@ver (map u1805@u1464@library-spec u8765@imp*) (map u1805@u1464@library-spec u8763@vis*) (map u1805@u1464@library-spec u8764@inv*) (lambda () (u8731@visit! u8761@macro*)) (lambda () (eval-core (u1257@u1185@expanded->core u8762@invoke-code))) (u8729@build-visit-code u8761@macro*) u8762@invoke-code)) u8749@u8740@export-env u8748@u8739@export-subst u8747@u8738@macro* u8746@u8737@invoke-code u8745@u8736@vis* u8744@u8735@inv* u8743@u8734@imp* u8742@u8733@ver u8741@u8732@name))))) '#f '#f)) u8823) (if (= u8824 '2) (apply (lambda (u8813@x u8814@filename) (u2975@library-expander u8813@x u8814@filename (lambda (u8817@x) (values)))) u8823) (if (= u8824 '1) (apply (lambda (u8819@x) (u2975@library-expander u8819@x '#f (lambda (u8821@x) (values)))) u8823) (error 'apply '"invalid arg count"))))) (length u8823)))) (set! u2977@boot-library-expand (lambda (u8825@x) (call-with-values (lambda () (u2975@library-expander u8825@x)) (lambda (u8837@u8827@id u8838@u8828@name u8839@u8829@ver u8840@u8830@imp* u8841@u8831@vis* u8842@u8832@inv* u8843@u8833@invoke-code u8844@u8834@visit-code u8845@u8835@export-subst u8846@u8836@export-env) ((lambda (u8857@export-env u8858@export-subst u8859@visit-code u8860@invoke-code u8861@inv* u8862@vis* u8863@imp* u8864@ver u8865@name u8866@id) (values u8865@name u8860@invoke-code u8858@export-subst u8857@export-env)) u8846@u8836@export-env u8845@u8835@export-subst u8844@u8834@visit-code u8843@u8833@invoke-code u8842@u8832@inv* u8841@u8831@vis* u8840@u8830@imp* u8839@u8829@ver u8838@u8828@name u8837@u8827@id))))) (set! u2979@rev-map-append (lambda (u8877@f u8878@ls u8879@ac) (if (null? u8878@ls) u8879@ac (u2979@rev-map-append u8877@f (cdr u8878@ls) (cons (u8877@f (car u8878@ls)) u8879@ac))))) (set! u2981@build-exports (lambda (u8883@lex*+loc* u8884@init*) (u2114@u1971@build-sequence '#f (cons (u2115@u1973@build-void) (u2979@rev-map-append (lambda (u8887@x) (list 'set! (cdr u8887@x) (car u8887@x))) u8883@lex*+loc* u8884@init*))))) (set! u2983@make-export-subst (lambda (u8889@name* u8890@id*) (map (lambda (u8893@name u8894@id) ((lambda (u8897@label) (begin (if (not u8897@label) (u3005@syntax-violation '#f '"cannot export unbound identifier" u8894@id) (void)) (cons u8893@name u8897@label))) (u2301@id->label u8894@id))) u8889@name* u8890@id*))) (set! u2985@make-export-env/macros (lambda (u8899@lex* u8900@loc* u8901@r) ((lambda (u8906@lookup) (begin (set! u8906@lookup (lambda (u8935@x) ((letrec ((u8937@f (lambda (u8939@x u8940@lex* u8941@loc*) (if (pair? u8940@lex*) (if (eq? u8939@x (car u8940@lex*)) (car u8941@loc*) (u8937@f u8939@x (cdr u8940@lex*) (cdr u8941@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) u8937@f) u8935@x u8899@lex* u8900@loc*))) ((letrec ((u8907@f (lambda (u8909@r u8910@env u8911@global* u8912@macro*) (if (null? u8909@r) (values u8910@env u8911@global* u8912@macro*) ((lambda (u8917@x) ((lambda (u8919@label u8920@b) ((lambda (u8923@t) (if (memv u8923@t '(lexical)) ((lambda (u8925@v) ((lambda (u8927@loc u8928@type) (u8907@f (cdr u8909@r) (cons (cons* u8919@label u8928@type u8927@loc) u8910@env) (cons (cons (u2656@lexical-var u8925@v) u8927@loc) u8911@global*) u8912@macro*)) (u8906@lookup (u2656@lexical-var u8925@v)) (if (u2658@lexical-mutable? u8925@v) 'mutable 'global))) (u2311@binding-value u8920@b)) (if (memv u8923@t '(local-macro)) ((lambda (u8931@loc) (u8907@f (cdr u8909@r) (cons (cons* u8919@label 'global-macro u8931@loc) u8910@env) u8911@global* (cons (cons u8931@loc (u2311@binding-value u8920@b)) u8912@macro*))) (u1159@u923@gensym)) (if (memv u8923@t '(local-macro!)) ((lambda (u8933@loc) (u8907@f (cdr u8909@r) (cons (cons* u8919@label 'global-macro! u8933@loc) u8910@env) u8911@global* (cons (cons u8933@loc (u2311@binding-value u8920@b)) u8912@macro*))) (u1159@u923@gensym)) (if (memv u8923@t '($rtd $module)) (u8907@f (cdr u8909@r) (cons u8917@x u8910@env) u8911@global* u8912@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (u2309@binding-type u8920@b) (u2311@binding-value u8920@b))))))) (u2309@binding-type u8920@b))) (car u8917@x) (cdr u8917@x))) (car u8909@r)))))) u8907@f) u8901@r '() '() '()))) '#f))) (set! u2987@generate-temporaries (lambda (u8945@ls) ((lambda (u8947@t) ((lambda (u8949@ls/false) (if u8949@ls/false (apply (lambda (u8951@ls) (map (lambda (u8953@x) (u2221@make-stx ((lambda (u8955@x) (if (or (symbol? u8955@x) (string? u8955@x)) (u1159@u923@gensym u8955@x) (u1159@u923@gensym 't))) (u3011@syntax->datum u8953@x)) u2143@top-mark* '() '())) u8951@ls)) u8949@ls/false) ((lambda (u8957@t) ((lambda (u8959@ls/false) (if u8959@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) u8959@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u8957@t))) (u2772@syntax-dispatch u8957@t '_))) u8947@t))) (u2772@syntax-dispatch u8947@t 'each-any))) u8945@ls))) (set! u2989@free-identifier=? (lambda (u8961@x u8962@y) (if (u2275@id? u8961@x) (if (u2275@id? u8962@y) (u2283@free-id=? u8961@x u8962@y) (assertion-violation 'free-identifier=? '"not an identifier" u8962@y)) (assertion-violation 'free-identifier=? '"not an identifier" u8961@x)))) (set! u2991@bound-identifier=? (lambda (u8965@x u8966@y) (if (u2275@id? u8965@x) (if (u2275@id? u8966@y) (u2281@bound-id=? u8965@x u8966@y) (assertion-violation 'bound-identifier=? '"not an identifier" u8966@y)) (assertion-violation 'bound-identifier=? '"not an identifier" u8965@x)))) (set! u2993@make-source-condition (lambda (u8969@x) ((lambda (u8979@u8974 u8981@u8976 u8983@u8975 u8986@u8973 u8988@make-source-condition u8990@u8971 u8992@u8972 u8994@source-condition? u8996@source-filename u8998@source-character) (begin (set! u8979@u8974 (make-record-type-descriptor '&source-information u10081@u9396@&condition-rtd 'u8977 '#f '#f '#((immutable file-name) (immutable character)))) (set! u8981@u8976 '#f) (set! u8983@u8975 (make-record-constructor-descriptor u8979@u8974 u10082@u9398@&condition-rcd u8981@u8976)) (set! u8986@u8973 (record-predicate u8979@u8974)) (set! u8988@make-source-condition (record-constructor u8983@u8975)) (set! u8990@u8971 (record-accessor u8979@u8974 '0)) (set! u8992@u8972 (record-accessor u8979@u8974 '1)) (set! u8994@source-condition? (condition-predicate u8979@u8974)) (set! u8996@source-filename (condition-accessor u8979@u8974 u8990@u8971)) (set! u8998@source-character (condition-accessor u8979@u8974 u8992@u8972)) (if (pair? u8969@x) (u8988@make-source-condition (car u8969@x) (cdr u8969@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! u2995@extract-position-condition (lambda (u8999@x) (u2993@make-source-condition (u2997@expression-position u8999@x)))) (set! u2997@expression-position (lambda (u9001@x) (and (u2219@stx? u9001@x) ((lambda (u9003@x) (and (u1162@u929@annotation? u9003@x) (u1163@u931@annotation-source u9003@x))) (u2223@stx-expr u9001@x))))) (set! u2999@assertion-error (lambda (u9005@expr u9006@pos) (raise (condition (u10129@u9588@make-assertion-violation) (u10147@u9636@make-who-condition 'assert) (u10087@u9479@make-message-condition '"assertion failed") (u10137@u9610@make-irritants-condition (list u9005@expr)) (u2993@make-source-condition u9006@pos))))) (set! u3001@syntax-error (lambda (u9009@x . u9011@args) (begin (if (not (for-all string? u9011@args)) (assertion-violation 'syntax-error '"invalid argument" u9011@args) (void)) (raise (condition (u10087@u9479@make-message-condition (if (null? u9011@args) '"invalid syntax" (apply string-append u9011@args))) (u10181@u9726@make-syntax-violation (u3011@syntax->datum u9009@x) '#f) (u2995@extract-position-condition u9009@x)))))) (set! u3003@syntax-violation* (lambda (u9013@who u9014@msg u9015@form u9016@condition-object) (begin (if (not (string? u9014@msg)) (assertion-violation 'syntax-violation '"message is not a string" u9014@msg) (void)) ((lambda (u9021@who) (raise (condition (if u9021@who (u10147@u9636@make-who-condition u9021@who) (condition)) (u10087@u9479@make-message-condition u9014@msg) u9016@condition-object (u2995@extract-position-condition u9015@form)))) (if (or (string? u9013@who) (symbol? u9013@who)) u9013@who (if (not u9013@who) ((lambda (u9023@t) ((lambda (u9025@ls/false) (if (and u9025@ls/false (apply (lambda (u9027@id) (u2275@id? u9027@id)) u9025@ls/false)) (apply (lambda (u9029@id) (u3011@syntax->datum u9029@id)) u9025@ls/false) ((lambda (u9031@t) ((lambda (u9033@ls/false) (if (and u9033@ls/false (apply (lambda (u9035@id u9036@rest) (u2275@id? u9035@id)) u9033@ls/false)) (apply (lambda (u9039@id u9040@rest) (u3011@syntax->datum u9039@id)) u9033@ls/false) ((lambda (u9043@t) ((lambda (u9045@ls/false) (if u9045@ls/false (apply (lambda () '#f) u9045@ls/false) (u3005@syntax-violation '#f '"invalid syntax" u9043@t))) (u2772@syntax-dispatch u9043@t '_))) u9031@t))) (u2772@syntax-dispatch u9031@t '(any . any)))) u9023@t))) (u2772@syntax-dispatch u9023@t 'any))) u9015@form) (assertion-violation 'syntax-violation '"invalid who argument" u9013@who))))))) (set! u3005@syntax-violation (lambda u9061 ((lambda (u9062) (if (= u9062 '3) (apply (lambda (u9047@who u9048@msg u9049@form) (u3005@syntax-violation u9047@who u9048@msg u9049@form '#f)) u9061) (if (= u9062 '4) (apply (lambda (u9053@who u9054@msg u9055@form u9056@subform) (u3003@syntax-violation* u9053@who u9054@msg u9055@form (u10181@u9726@make-syntax-violation (u3011@syntax->datum u9055@form) (u3011@syntax->datum u9056@subform)))) u9061) (error 'apply '"invalid arg count")))) (length u9061)))) (set! u3007@identifier? (lambda (u9063@x) (u2275@id? u9063@x))) (set! u3009@datum->syntax (lambda (u9065@id u9066@datum) (if (u2275@id? u9065@id) (u2241@datum->stx u9065@id u9066@datum) (assertion-violation 'datum->syntax '"not an identifier" u9065@id)))) (set! u3011@syntax->datum (lambda (u9069@x) (u2297@stx->datum u9069@x))) (set! u3013@compile-r6rs-top-level (lambda (u9071@x*) (call-with-values (lambda () (u2895@top-level-expander u9071@x*)) (lambda (u9075@u9073@lib* u9076@u9074@invoke-code) ((lambda (u9079@invoke-code u9080@lib*) (lambda () (begin (for-each u1801@u1456@invoke-library u9080@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (u1257@u1185@expanded->core u9079@invoke-code)) (void)) (eval-core (u1257@u1185@expanded->core u9079@invoke-code))))) u9076@u9074@invoke-code u9075@u9073@lib*))))) (set! u3015@pre-compile-r6rs-top-level (lambda (u9083@x*) (call-with-values (lambda () (u2895@top-level-expander u9083@x*)) (lambda (u9087@u9085@lib* u9088@u9086@invoke-code) ((lambda (u9091@invoke-code u9092@lib*) (begin (for-each u1801@u1456@invoke-library u9092@lib*) (u1171@u947@compile-core (u1257@u1185@expanded->core u9091@invoke-code)))) u9088@u9086@invoke-code u9087@u9085@lib*))))) (set! u3017@interaction-environment ((lambda (u9095@the-env) (lambda () (or u9095@the-env ((lambda (u9097@lib u9098@rib) (begin ((lambda (u9101@subst) (begin (u2184@set-rib-sym*! u9098@rib (map car u9101@subst)) (u2186@set-rib-mark**! u9098@rib (map (lambda (u9103@x) u2143@top-mark*) u9101@subst)) (u2188@set-rib-label*! u9098@rib (map cdr u9101@subst)))) (u1758@u1370@library-subst u9097@lib)) ((lambda (u9105@env) (begin (set! u9095@the-env u9105@env) u9105@env)) (u2939@make-interaction-env u9098@rib '() '())))) (u1794@u1442@find-library-by-name '(mosh interaction)) (u2194@make-empty-rib))))) '#f)) (set! u3019@top-level-context (u1173@u951@make-parameter '#f)) (begin (set! u9375@u3019@top-level-context u3019@top-level-context) (set! u9374@u3017@interaction-environment u3017@interaction-environment) (set! u9373@u3015@pre-compile-r6rs-top-level u3015@pre-compile-r6rs-top-level) (set! u9372@u3013@compile-r6rs-top-level u3013@compile-r6rs-top-level) (set! u9371@u3011@syntax->datum u3011@syntax->datum) (set! u9370@u3009@datum->syntax u3009@datum->syntax) (set! u9369@u3007@identifier? u3007@identifier?) (set! u9368@u3005@syntax-violation u3005@syntax-violation) (set! u9367@u3003@syntax-violation* u3003@syntax-violation*) (set! u9366@u3001@syntax-error u3001@syntax-error) (set! u9365@u2999@assertion-error u2999@assertion-error) (set! u9364@u2997@expression-position u2997@expression-position) (set! u9363@u2995@extract-position-condition u2995@extract-position-condition) (set! u9362@u2993@make-source-condition u2993@make-source-condition) (set! u9361@u2991@bound-identifier=? u2991@bound-identifier=?) (set! u9360@u2989@free-identifier=? u2989@free-identifier=?) (set! u9359@u2987@generate-temporaries u2987@generate-temporaries) (set! u9358@u2985@make-export-env/macros u2985@make-export-env/macros) (set! u9357@u2983@make-export-subst u2983@make-export-subst) (set! u9356@u2981@build-exports u2981@build-exports) (set! u9355@u2979@rev-map-append u2979@rev-map-append) (set! u9354@u2977@boot-library-expand u2977@boot-library-expand) (set! u9353@u2975@library-expander u2975@library-expander) (set! u9352@u2973@eval u2973@eval) (set! u9351@u2971@expand u2971@expand) (set! u9350@u2969@scheme-report-environment u2969@scheme-report-environment) (set! u9349@u2967@null-environment u2967@null-environment) (set! u9348@u2965@environment u2965@environment) (set! u9347@u2963@environment-symbols u2963@environment-symbols) (set! u9346@u2961@environment? u2961@environment?) (set! u9345@u2959@parse-binding u2959@parse-binding) (set! u9344@u2957@environment-bindings u2957@environment-bindings) (set! u9343@u2955@interaction-environment-symbols u2955@interaction-environment-symbols) (set! u9342@u2953@rp u2953@rp) (set! u9341@u2951@set-interaction-env-locs! u2951@set-interaction-env-locs!) (set! u9340@u2949@set-interaction-env-r! u2949@set-interaction-env-r!) (set! u9339@u2947@set-interaction-env-rib! u2947@set-interaction-env-rib!) (set! u9338@u2945@interaction-env-locs u2945@interaction-env-locs) (set! u9337@u2943@interaction-env-r u2943@interaction-env-r) (set! u9336@u2941@interaction-env-rib u2941@interaction-env-rib) (set! u9335@u2939@make-interaction-env u2939@make-interaction-env) (set! u9334@u2937@interaction-env? u2937@interaction-env?) (set! u9333@u2934@u2926 u2934@u2926) (set! u9332@u2932@u2927 u2932@u2927) (set! u9331@u2930@u2925 u2930@u2925) (set! u9330@u2924@rp u2924@rp) (set! u9329@u2922@set-env-itc! u2922@set-env-itc!) (set! u9328@u2920@set-env-labels! u2920@set-env-labels!) (set! u9327@u2918@set-env-names! u2918@set-env-names!) (set! u9326@u2916@env-itc u2916@env-itc) (set! u9325@u2914@env-labels u2914@env-labels) (set! u9324@u2912@env-names u2912@env-names) (set! u9323@u2910@make-env u2910@make-env) (set! u9322@u2908@env? u2908@env?) (set! u9321@u2905@u2897 u2905@u2897) (set! u9320@u2903@u2898 u2903@u2898) (set! u9319@u2901@u2896 u2901@u2896) (set! u9318@u2895@top-level-expander u2895@top-level-expander) (set! u9317@u2893@parse-top-level-program u2893@parse-top-level-program) (set! u9316@u2891@core-library-expander u2891@core-library-expander) (set! u9315@u2889@library-body-expander u2889@library-body-expander) (set! u9314@u2887@chi-interaction-expr u2887@chi-interaction-expr) (set! u9313@u2885@chi-library-internal u2885@chi-library-internal) (set! u9312@u2883@imp-collector u2883@imp-collector) (set! u9311@u2881@vis-collector u2881@vis-collector) (set! u9310@u2879@inv-collector u2879@inv-collector) (set! u9309@u2877@make-collector u2877@make-collector) (set! u9308@u2875@make-top-rib u2875@make-top-rib) (set! u9307@u2873@parse-import-spec* u2873@parse-import-spec*) (set! u9306@u2871@parse-library u2871@parse-library) (set! u9305@u2869@parse-library-name u2869@parse-library-name) (set! u9304@u2867@parse-exports u2867@parse-exports) (set! u9303@u2865@expand-transformer u2865@expand-transformer) (set! u9302@u2863@chi-body* u2863@chi-body*) (set! u9301@u2861@chi-internal-module u2861@chi-internal-module) (set! u9300@u2859@module-interface-exp-id* u2859@module-interface-exp-id*) (set! u9299@u2857@set-module-interface-exp-lab-vec! u2857@set-module-interface-exp-lab-vec!) (set! u9298@u2855@set-module-interface-exp-id-vec! u2855@set-module-interface-exp-id-vec!) (set! u9297@u2853@set-module-interface-first-mark! u2853@set-module-interface-first-mark!) (set! u9296@u2851@module-interface-exp-lab-vec u2851@module-interface-exp-lab-vec) (set! u9295@u2849@module-interface-exp-id-vec u2849@module-interface-exp-id-vec) (set! u9294@u2847@module-interface-first-mark u2847@module-interface-first-mark) (set! u9293@u2845@make-module-interface u2845@make-module-interface) (set! u9292@u2843@module-interface? u2843@module-interface?) (set! u9291@u2840@u2832 u2840@u2832) (set! u9290@u2838@u2833 u2838@u2833) (set! u9289@u2836@u2831 u2836@u2831) (set! u9288@u2830@parse-module u2830@parse-module) (set! u9287@u2828@chi-internal u2828@chi-internal) (set! u9286@u2826@find-dups u2826@find-dups) (set! u9285@u2824@find-bound=? u2824@find-bound=?) (set! u9284@u2822@chi-rhs* u2822@chi-rhs*) (set! u9283@u2820@expand-interaction-rhs*/init* u2820@expand-interaction-rhs*/init*) (set! u9282@u2818@chi-rhs u2818@chi-rhs) (set! u9281@u2816@chi-defun u2816@chi-defun) (set! u9280@u2814@chi-lambda-clause* u2814@chi-lambda-clause*) (set! u9279@u2812@chi-lambda-clause u2812@chi-lambda-clause) (set! u9278@u2810@verify-formals u2810@verify-formals) (set! u9277@u2808@chi-set! u2808@chi-set!) (set! u9276@u2806@chi-expr u2806@chi-expr) (set! u9275@u2804@chi-application u2804@chi-application) (set! u9274@u2802@chi-expr* u2802@chi-expr*) (set! u9273@u2800@chi-global-macro u2800@chi-global-macro) (set! u9272@u2798@chi-local-macro u2798@chi-local-macro) (set! u9271@u2796@chi-macro u2796@chi-macro) (set! u9270@u2794@do-macro-call u2794@do-macro-call) (set! u9269@u2792@local-macro-transformer u2792@local-macro-transformer) (set! u9268@u2790@macro-transformer u2790@macro-transformer) (set! u9267@u2788@symbol-macro u2788@symbol-macro) (set! u9266@u2786@core-macro-transformer u2786@core-macro-transformer) (set! u9265@u2784@syntax-transformer u2784@syntax-transformer) (set! u9264@u2782@ellipsis-map u2782@ellipsis-map) (set! u9263@u2780@syntax-case-transformer u2780@syntax-case-transformer) (set! u9262@u2778@verify-literals u2778@verify-literals) (set! u9261@u2776@underscore? u2776@underscore?) (set! u9260@u2774@ellipsis? u2774@ellipsis?) (set! u9259@u2772@syntax-dispatch u2772@syntax-dispatch) (set! u9258@u2770@convert-pattern u2770@convert-pattern) (set! u9257@u2768@foreign-call-transformer u2768@foreign-call-transformer) (set! u9256@u2766@parameterize-macro u2766@parameterize-macro) (set! u9255@u2764@incorrect-usage-macro u2764@incorrect-usage-macro) (set! u9254@u2762@define-condition-type-macro u2762@define-condition-type-macro) (set! u9253@u2760@define-record-type-macro u2760@define-record-type-macro) (set! u9252@u2758@define-struct-macro u2758@define-struct-macro) (set! u9251@u2756@quasisyntax-macro u2756@quasisyntax-macro) (set! u9250@u2754@quasiquote-macro u2754@quasiquote-macro) (set! u9249@u2752@syntax-rules-macro u2752@syntax-rules-macro) (set! u9248@u2750@include-into-macro u2750@include-into-macro) (set! u9247@u2748@include-macro u2748@include-macro) (set! u9246@u2746@do-include u2746@do-include) (set! u9245@u2744@cond-macro u2744@cond-macro) (set! u9244@u2742@and-macro u2742@and-macro) (set! u9243@u2740@or-macro u2740@or-macro) (set! u9242@u2738@let*-macro u2738@let*-macro) (set! u9241@u2736@do-macro u2736@do-macro) (set! u9240@u2734@identifier-syntax-macro u2734@identifier-syntax-macro) (set! u9239@u2732@endianness-macro u2732@endianness-macro) (set! u9238@u2730@assert-macro u2730@assert-macro) (set! u9237@u2728@delay-macro u2728@delay-macro) (set! u9236@u2726@time-macro u2726@time-macro) (set! u9235@u2724@define-enumeration-macro u2724@define-enumeration-macro) (set! u9234@u2722@guard-macro u2722@guard-macro) (set! u9233@u2720@trace-letrec-syntax-macro u2720@trace-letrec-syntax-macro) (set! u9232@u2718@trace-let-syntax-macro u2718@trace-let-syntax-macro) (set! u9231@u2716@trace-let/rec-syntax u2716@trace-let/rec-syntax) (set! u9230@u2714@trace-define-syntax-macro u2714@trace-define-syntax-macro) (set! u9229@u2712@trace-define-macro u2712@trace-define-macro) (set! u9228@u2710@trace-lambda-macro u2710@trace-lambda-macro) (set! u9227@u2708@let*-values-macro u2708@let*-values-macro) (set! u9226@u2706@let-values-macro u2706@let-values-macro) (set! u9225@u2704@let-macro u2704@let-macro) (set! u9224@u2702@invalid-fmls-error u2702@invalid-fmls-error) (set! u9223@u2700@with-syntax-macro u2700@with-syntax-macro) (set! u9222@u2698@bless u2698@bless) (set! u9221@u2696@lambda-transformer u2696@lambda-transformer) (set! u9220@u2694@case-lambda-transformer u2694@case-lambda-transformer) (set! u9219@u2692@quote-transformer u2692@quote-transformer) (set! u9218@u2690@case-macro u2690@case-macro) (set! u9217@u2688@or-transformer u2688@or-transformer) (set! u9216@u2686@and-transformer u2686@and-transformer) (set! u9215@u2684@if-transformer u2684@if-transformer) (set! u9214@u2682@unless-macro u2682@unless-macro) (set! u9213@u2680@when-macro u2680@when-macro) (set! u9212@u2678@record-constructor-descriptor-transformer u2678@record-constructor-descriptor-transformer) (set! u9211@u2676@record-type-descriptor-transformer u2676@record-type-descriptor-transformer) (set! u9210@u2674@type-descriptor-transformer u2674@type-descriptor-transformer) (set! u9209@u2672@fluid-let-syntax-transformer u2672@fluid-let-syntax-transformer) (set! u9208@u2670@letrec*-transformer u2670@letrec*-transformer) (set! u9207@u2668@letrec-transformer u2668@letrec-transformer) (set! u9206@u2666@letrec-helper u2666@letrec-helper) (set! u9205@u2664@add-lexicals u2664@add-lexicals) (set! u9204@u2662@add-lexical u2662@add-lexical) (set! u9203@u2660@set-lexical-mutable! u2660@set-lexical-mutable!) (set! u9202@u2658@lexical-mutable? u2658@lexical-mutable?) (set! u9201@u2656@lexical-var u2656@lexical-var) (set! u9200@u2654@scheme-stx u2654@scheme-stx) (set! u9199@u2652@scheme-stx-hashtable u2652@scheme-stx-hashtable) (set! u9198@u2650@parse-define-syntax u2650@parse-define-syntax) (set! u9197@u2648@parse-define u2648@parse-define) (set! u9196@u2337@make-eval-transformer u2337@make-eval-transformer) (set! u9195@u2335@variable-transformer-procedure u2335@variable-transformer-procedure) (set! u9194@u2333@variable-transformer? u2333@variable-transformer?) (set! u9193@u2331@make-variable-transformer u2331@make-variable-transformer) (set! u9192@u2329@sanitize-binding u2329@sanitize-binding) (set! u9191@u2315@syntax-type u2315@syntax-type) (set! u9190@u2313@raise-unbound-error u2313@raise-unbound-error) (set! u9189@u2311@binding-value u2311@binding-value) (set! u9188@u2309@binding-type u2309@binding-type) (set! u9187@u2307@make-binding u2307@make-binding) (set! u9186@u2305@label->binding u2305@label->binding) (set! u9185@u2303@id->real-label u2303@id->real-label) (set! u9184@u2301@id->label u2301@id->label) (set! u9183@u2299@same-marks*? u2299@same-marks*?) (set! u9182@u2297@stx->datum u2297@stx->datum) (set! u9181@u2295@strip u2295@strip) (set! u9180@u2293@strip-annotations u2293@strip-annotations) (set! u9179@u2291@self-evaluating? u2291@self-evaluating?) (set! u9178@u2289@bound-id-member? u2289@bound-id-member?) (set! u9177@u2287@distinct-bound-ids? u2287@distinct-bound-ids?) (set! u9176@u2285@valid-bound-ids? u2285@valid-bound-ids?) (set! u9175@u2283@free-id=? u2283@free-id=?) (set! u9174@u2281@bound-id=? u2281@bound-id=?) (set! u9173@u2279@same-marks? u2279@same-marks?) (set! u9172@u2277@id->sym u2277@id->sym) (set! u9171@u2275@id? u2275@id?) (set! u9170@u2273@syntax->list u2273@syntax->list) (set! u9169@u2271@syntax-cdr u2271@syntax-cdr) (set! u9168@u2269@syntax-car u2269@syntax-car) (set! u9167@u2267@syntax-list? u2267@syntax-list?) (set! u9166@u2265@syntax-null? u2265@syntax-null?) (set! u9165@u2263@syntax-vector? u2263@syntax-vector?) (set! u9164@u2261@syntax-pair? u2261@syntax-pair?) (set! u9163@u2259@syntax-vector->list u2259@syntax-vector->list) (set! u9162@u2257@syntax-kind? u2257@syntax-kind?) (set! u9161@u2255@add-subst u2255@add-subst) (set! u9160@u2253@add-mark u2253@add-mark) (set! u9159@u2251@mkstx u2251@mkstx) (set! u9158@u2249@join-wraps u2249@join-wraps) (set! u9157@u2247@anti-mark? u2247@anti-mark?) (set! u9156@u2245@anti-mark u2245@anti-mark) (set! u9155@u2243@gen-mark u2243@gen-mark) (set! u9154@u2241@datum->stx u2241@datum->stx) (set! u9153@u2239@rp u2239@rp) (set! u9152@u2237@set-stx-ae*! u2237@set-stx-ae*!) (set! u9151@u2235@set-stx-subst*! u2235@set-stx-subst*!) (set! u9150@u2233@set-stx-mark*! u2233@set-stx-mark*!) (set! u9149@u2231@set-stx-expr! u2231@set-stx-expr!) (set! u9148@u2229@stx-ae* u2229@stx-ae*) (set! u9147@u2227@stx-subst* u2227@stx-subst*) (set! u9146@u2225@stx-mark* u2225@stx-mark*) (set! u9145@u2223@stx-expr u2223@stx-expr) (set! u9144@u2221@make-stx u2221@make-stx) (set! u9143@u2219@stx? u2219@stx?) (set! u9142@u2216@u2208 u2216@u2208) (set! u9141@u2214@u2209 u2214@u2209) (set! u9140@u2212@u2207 u2212@u2207) (set! u9139@u2206@make-full-rib u2206@make-full-rib) (set! u9138@u2204@unseal-rib! u2204@unseal-rib!) (set! u9137@u2202@seal-rib! u2202@seal-rib!) (set! u9136@u2200@make-rib-map u2200@make-rib-map) (set! u9135@u2198@extend-rib/nc! u2198@extend-rib/nc!) (set! u9134@u2196@extend-rib! u2196@extend-rib!) (set! u9133@u2194@make-empty-rib u2194@make-empty-rib) (set! u9132@u2192@set-rib-cache! u2192@set-rib-cache!) (set! u9131@u2190@set-rib-sealed/freq! u2190@set-rib-sealed/freq!) (set! u9130@u2188@set-rib-label*! u2188@set-rib-label*!) (set! u9129@u2186@set-rib-mark**! u2186@set-rib-mark**!) (set! u9128@u2184@set-rib-sym*! u2184@set-rib-sym*!) (set! u9127@u2182@rib-cache u2182@rib-cache) (set! u9126@u2180@rib-sealed/freq u2180@rib-sealed/freq) (set! u9125@u2178@rib-label* u2178@rib-label*) (set! u9124@u2176@rib-mark** u2176@rib-mark**) (set! u9123@u2174@rib-sym* u2174@rib-sym*) (set! u9122@u2172@make-rib u2172@make-rib) (set! u9121@u2170@rib? u2170@rib?) (set! u9120@u2167@u2159 u2167@u2159) (set! u9119@u2165@u2160 u2165@u2160) (set! u9118@u2163@u2158 u2163@u2158) (set! u9117@u2157@gen-define-label u2157@gen-define-label) (set! u9116@u2155@gen-define-label+loc u2155@gen-define-label+loc) (set! u9115@u2153@gen-top-level-label u2153@gen-top-level-label) (set! u9114@u2151@gen-label u2151@gen-label) (set! u9113@u2149@gen-global u2149@gen-global) (set! u9112@u2147@gen-lexical u2147@gen-lexical) (set! u9111@u2145@top-marked? u2145@top-marked?) (set! u9110@u2143@top-mark* u2143@top-mark*) (set! u9109@u2138@set-union u2138@set-union) (set! u9108@u2136@set-cons u2136@set-cons) (set! u9107@u2134@file-options-macro u2134@file-options-macro) (u1791@u1436@current-library-expander u2975@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (u9385@u9380 u9387@u9382 u9389@u9381 u9392@&condition? u9394@make-&condition u9396@&condition-rtd u9398@&condition-rcd u9470@u9465 u9472@u9467 u9474@u9466 u9477@p? u9479@make-message-condition u9481@u9464@condition-message u9483@message-condition? u9485@condition-message u9487@&message-rtd u9489@&message-rcd u9495@u9490 u9497@u9492 u9499@u9491 u9502@p? u9504@make-warning u9506@warning? u9508@&warning-rtd u9510@&warning-rcd u9516@u9511 u9518@u9513 u9520@u9512 u9523@p? u9525@make-serious-condition u9527@serious-condition? u9529@&serious-rtd u9531@&serious-rcd u9537@u9532 u9539@u9534 u9541@u9533 u9544@p? u9546@make-error u9548@error? u9550@&error-rtd u9552@&error-rcd u9558@u9553 u9560@u9555 u9562@u9554 u9565@p? u9567@make-violation u9569@violation? u9571@&violation-rtd u9573@&violation-rcd u9579@u9574 u9581@u9576 u9583@u9575 u9586@p? u9588@make-assertion-violation u9590@assertion-violation? u9592@&assertion-rtd u9594@&assertion-rcd u9601@u9596 u9603@u9598 u9605@u9597 u9608@p? u9610@make-irritants-condition u9612@u9595@condition-irritants u9614@irritants-condition? u9616@condition-irritants u9618@&irritants-rtd u9620@&irritants-rcd u9627@u9622 u9629@u9624 u9631@u9623 u9634@p? u9636@make-who-condition u9638@u9621@condition-who u9640@who-condition? u9642@condition-who u9644@&who-rtd u9646@&who-rcd u9652@u9647 u9654@u9649 u9656@u9648 u9659@p? u9661@make-non-continuable-violation u9663@non-continuable-violation? u9665@&non-continuable-rtd u9667@&non-continuable-rcd u9673@u9668 u9675@u9670 u9677@u9669 u9680@p? u9682@make-implementation-restriction-violation u9684@implementation-restriction-violation? u9686@&implementation-restriction-rtd u9688@&implementation-restriction-rcd u9694@u9689 u9696@u9691 u9698@u9690 u9701@p? u9703@make-lexical-violation u9705@lexical-violation? u9707@&lexical-rtd u9709@&lexical-rcd u9717@u9712 u9719@u9714 u9721@u9713 u9724@p? u9726@make-syntax-violation u9728@u9710@syntax-violation-form u9730@u9711@syntax-violation-subform u9732@syntax-violation? u9734@syntax-violation-form u9736@syntax-violation-subform u9738@&syntax-rtd u9740@&syntax-rcd u9746@u9741 u9748@u9743 u9750@u9742 u9753@p? u9755@make-undefined-violation u9757@undefined-violation? u9759@&undefined-rtd u9761@&undefined-rcd u9767@u9762 u9769@u9764 u9771@u9763 u9774@p? u9776@make-i/o-error u9778@i/o-error? u9780@&i/o-rtd u9782@&i/o-rcd u9788@u9783 u9790@u9785 u9792@u9784 u9795@p? u9797@make-i/o-read-error u9799@i/o-read-error? u9801@&i/o-read-rtd u9803@&i/o-read-rcd u9809@u9804 u9811@u9806 u9813@u9805 u9816@p? u9818@make-i/o-write-error u9820@i/o-write-error? u9822@&i/o-write-rtd u9824@&i/o-write-rcd u9831@u9826 u9833@u9828 u9835@u9827 u9838@p? u9840@make-i/o-invalid-position-error u9842@u9825@i/o-error-position u9844@i/o-invalid-position-error? u9846@i/o-error-position u9848@&i/o-invalid-position-rtd u9850@&i/o-invalid-position-rcd u9857@u9852 u9859@u9854 u9861@u9853 u9864@p? u9866@make-i/o-filename-error u9868@u9851@i/o-error-filename u9870@i/o-filename-error? u9872@i/o-error-filename u9874@&i/o-filename-rtd u9876@&i/o-filename-rcd u9882@u9877 u9884@u9879 u9886@u9878 u9889@p? u9891@make-i/o-file-protection-error u9893@i/o-file-protection-error? u9895@&i/o-file-protection-rtd u9897@&i/o-file-protection-rcd u9903@u9898 u9905@u9900 u9907@u9899 u9910@p? u9912@make-i/o-file-is-read-only-error u9914@i/o-file-is-read-only-error? u9916@&i/o-file-is-read-only-rtd u9918@&i/o-file-is-read-only-rcd u9924@u9919 u9926@u9921 u9928@u9920 u9931@p? u9933@make-i/o-file-already-exists-error u9935@i/o-file-already-exists-error? u9937@&i/o-file-already-exists-rtd u9939@&i/o-file-already-exists-rcd u9945@u9940 u9947@u9942 u9949@u9941 u9952@p? u9954@make-i/o-file-does-not-exist-error u9956@i/o-file-does-not-exist-error? u9958@&i/o-file-does-not-exist-rtd u9960@&i/o-file-does-not-exist-rcd u9967@u9962 u9969@u9964 u9971@u9963 u9974@p? u9976@make-i/o-port-error u9978@u9961@i/o-error-port u9980@i/o-port-error? u9982@i/o-error-port u9984@&i/o-port-rtd u9986@&i/o-port-rcd u9992@u9987 u9994@u9989 u9996@u9988 u9999@p? u10001@make-i/o-decoding-error u10003@i/o-decoding-error? u10005@&i/o-decoding-rtd u10007@&i/o-decoding-rcd u10014@u10009 u10016@u10011 u10018@u10010 u10021@p? u10023@make-i/o-encoding-error u10025@u10008@i/o-encoding-error-char u10027@i/o-encoding-error? u10029@i/o-encoding-error-char u10031@&i/o-encoding-rtd u10033@&i/o-encoding-rcd u10039@u10034 u10041@u10036 u10043@u10035 u10046@p? u10048@make-no-infinities-violation u10050@no-infinities-violation? u10052@&no-infinities-rtd u10054@&no-infinities-rcd u10060@u10055 u10062@u10057 u10064@u10056 u10067@p? u10069@make-no-nans-violation u10071@no-nans-violation? u10073@&no-nans-rtd u10075@&no-nans-rcd) (begin (set! u9385@u9380 (make-record-type-descriptor '&condition '#f 'u9383 '#f '#f '#())) (set! u9387@u9382 '#f) (set! u9389@u9381 (make-record-constructor-descriptor u9385@u9380 '#f u9387@u9382)) (set! u9392@&condition? (record-predicate u9385@u9380)) (set! u9394@make-&condition (record-constructor u9389@u9381)) (set! u9396@&condition-rtd u9385@u9380) (set! u9398@&condition-rcd u9389@u9381) (set! u9470@u9465 (make-record-type-descriptor '&message u9385@u9380 'u9468 '#f '#f '#((immutable message)))) (set! u9472@u9467 '#f) (set! u9474@u9466 (make-record-constructor-descriptor u9470@u9465 u9389@u9381 u9472@u9467)) (set! u9477@p? (record-predicate u9470@u9465)) (set! u9479@make-message-condition (record-constructor u9474@u9466)) (set! u9481@u9464@condition-message (record-accessor u9470@u9465 '0)) (set! u9483@message-condition? (condition-predicate u9470@u9465)) (set! u9485@condition-message (condition-accessor u9470@u9465 u9481@u9464@condition-message)) (set! u9487@&message-rtd u9470@u9465) (set! u9489@&message-rcd u9474@u9466) (set! u9495@u9490 (make-record-type-descriptor '&warning u9385@u9380 'u9493 '#f '#f '#())) (set! u9497@u9492 '#f) (set! u9499@u9491 (make-record-constructor-descriptor u9495@u9490 u9389@u9381 u9497@u9492)) (set! u9502@p? (record-predicate u9495@u9490)) (set! u9504@make-warning (record-constructor u9499@u9491)) (set! u9506@warning? (condition-predicate u9495@u9490)) (set! u9508@&warning-rtd u9495@u9490) (set! u9510@&warning-rcd u9499@u9491) (set! u9516@u9511 (make-record-type-descriptor '&serious u9385@u9380 'u9514 '#f '#f '#())) (set! u9518@u9513 '#f) (set! u9520@u9512 (make-record-constructor-descriptor u9516@u9511 u9389@u9381 u9518@u9513)) (set! u9523@p? (record-predicate u9516@u9511)) (set! u9525@make-serious-condition (record-constructor u9520@u9512)) (set! u9527@serious-condition? (condition-predicate u9516@u9511)) (set! u9529@&serious-rtd u9516@u9511) (set! u9531@&serious-rcd u9520@u9512) (set! u9537@u9532 (make-record-type-descriptor '&error u9516@u9511 'u9535 '#f '#f '#())) (set! u9539@u9534 '#f) (set! u9541@u9533 (make-record-constructor-descriptor u9537@u9532 u9520@u9512 u9539@u9534)) (set! u9544@p? (record-predicate u9537@u9532)) (set! u9546@make-error (record-constructor u9541@u9533)) (set! u9548@error? (condition-predicate u9537@u9532)) (set! u9550@&error-rtd u9537@u9532) (set! u9552@&error-rcd u9541@u9533) (set! u9558@u9553 (make-record-type-descriptor '&violation u9516@u9511 'u9556 '#f '#f '#())) (set! u9560@u9555 '#f) (set! u9562@u9554 (make-record-constructor-descriptor u9558@u9553 u9520@u9512 u9560@u9555)) (set! u9565@p? (record-predicate u9558@u9553)) (set! u9567@make-violation (record-constructor u9562@u9554)) (set! u9569@violation? (condition-predicate u9558@u9553)) (set! u9571@&violation-rtd u9558@u9553) (set! u9573@&violation-rcd u9562@u9554) (set! u9579@u9574 (make-record-type-descriptor '&assertion u9558@u9553 'u9577 '#f '#f '#())) (set! u9581@u9576 '#f) (set! u9583@u9575 (make-record-constructor-descriptor u9579@u9574 u9562@u9554 u9581@u9576)) (set! u9586@p? (record-predicate u9579@u9574)) (set! u9588@make-assertion-violation (record-constructor u9583@u9575)) (set! u9590@assertion-violation? (condition-predicate u9579@u9574)) (set! u9592@&assertion-rtd u9579@u9574) (set! u9594@&assertion-rcd u9583@u9575) (set! u9601@u9596 (make-record-type-descriptor '&irritants u9385@u9380 'u9599 '#f '#f '#((immutable irritants)))) (set! u9603@u9598 '#f) (set! u9605@u9597 (make-record-constructor-descriptor u9601@u9596 u9389@u9381 u9603@u9598)) (set! u9608@p? (record-predicate u9601@u9596)) (set! u9610@make-irritants-condition (record-constructor u9605@u9597)) (set! u9612@u9595@condition-irritants (record-accessor u9601@u9596 '0)) (set! u9614@irritants-condition? (condition-predicate u9601@u9596)) (set! u9616@condition-irritants (condition-accessor u9601@u9596 u9612@u9595@condition-irritants)) (set! u9618@&irritants-rtd u9601@u9596) (set! u9620@&irritants-rcd u9605@u9597) (set! u9627@u9622 (make-record-type-descriptor '&who u9385@u9380 'u9625 '#f '#f '#((immutable who)))) (set! u9629@u9624 '#f) (set! u9631@u9623 (make-record-constructor-descriptor u9627@u9622 u9389@u9381 u9629@u9624)) (set! u9634@p? (record-predicate u9627@u9622)) (set! u9636@make-who-condition (record-constructor u9631@u9623)) (set! u9638@u9621@condition-who (record-accessor u9627@u9622 '0)) (set! u9640@who-condition? (condition-predicate u9627@u9622)) (set! u9642@condition-who (condition-accessor u9627@u9622 u9638@u9621@condition-who)) (set! u9644@&who-rtd u9627@u9622) (set! u9646@&who-rcd u9631@u9623) (set! u9652@u9647 (make-record-type-descriptor '&non-continuable u9558@u9553 'u9650 '#f '#f '#())) (set! u9654@u9649 '#f) (set! u9656@u9648 (make-record-constructor-descriptor u9652@u9647 u9562@u9554 u9654@u9649)) (set! u9659@p? (record-predicate u9652@u9647)) (set! u9661@make-non-continuable-violation (record-constructor u9656@u9648)) (set! u9663@non-continuable-violation? (condition-predicate u9652@u9647)) (set! u9665@&non-continuable-rtd u9652@u9647) (set! u9667@&non-continuable-rcd u9656@u9648) (set! u9673@u9668 (make-record-type-descriptor '&implementation-restriction u9558@u9553 'u9671 '#f '#f '#())) (set! u9675@u9670 '#f) (set! u9677@u9669 (make-record-constructor-descriptor u9673@u9668 u9562@u9554 u9675@u9670)) (set! u9680@p? (record-predicate u9673@u9668)) (set! u9682@make-implementation-restriction-violation (record-constructor u9677@u9669)) (set! u9684@implementation-restriction-violation? (condition-predicate u9673@u9668)) (set! u9686@&implementation-restriction-rtd u9673@u9668) (set! u9688@&implementation-restriction-rcd u9677@u9669) (set! u9694@u9689 (make-record-type-descriptor '&lexical u9558@u9553 'u9692 '#f '#f '#())) (set! u9696@u9691 '#f) (set! u9698@u9690 (make-record-constructor-descriptor u9694@u9689 u9562@u9554 u9696@u9691)) (set! u9701@p? (record-predicate u9694@u9689)) (set! u9703@make-lexical-violation (record-constructor u9698@u9690)) (set! u9705@lexical-violation? (condition-predicate u9694@u9689)) (set! u9707@&lexical-rtd u9694@u9689) (set! u9709@&lexical-rcd u9698@u9690) (set! u9717@u9712 (make-record-type-descriptor '&syntax u9558@u9553 'u9715 '#f '#f '#((immutable form) (immutable subform)))) (set! u9719@u9714 '#f) (set! u9721@u9713 (make-record-constructor-descriptor u9717@u9712 u9562@u9554 u9719@u9714)) (set! u9724@p? (record-predicate u9717@u9712)) (set! u9726@make-syntax-violation (record-constructor u9721@u9713)) (set! u9728@u9710@syntax-violation-form (record-accessor u9717@u9712 '0)) (set! u9730@u9711@syntax-violation-subform (record-accessor u9717@u9712 '1)) (set! u9732@syntax-violation? (condition-predicate u9717@u9712)) (set! u9734@syntax-violation-form (condition-accessor u9717@u9712 u9728@u9710@syntax-violation-form)) (set! u9736@syntax-violation-subform (condition-accessor u9717@u9712 u9730@u9711@syntax-violation-subform)) (set! u9738@&syntax-rtd u9717@u9712) (set! u9740@&syntax-rcd u9721@u9713) (set! u9746@u9741 (make-record-type-descriptor '&undefined u9558@u9553 'u9744 '#f '#f '#())) (set! u9748@u9743 '#f) (set! u9750@u9742 (make-record-constructor-descriptor u9746@u9741 u9562@u9554 u9748@u9743)) (set! u9753@p? (record-predicate u9746@u9741)) (set! u9755@make-undefined-violation (record-constructor u9750@u9742)) (set! u9757@undefined-violation? (condition-predicate u9746@u9741)) (set! u9759@&undefined-rtd u9746@u9741) (set! u9761@&undefined-rcd u9750@u9742) (set! u9767@u9762 (make-record-type-descriptor '&i/o u9537@u9532 'u9765 '#f '#f '#())) (set! u9769@u9764 '#f) (set! u9771@u9763 (make-record-constructor-descriptor u9767@u9762 u9541@u9533 u9769@u9764)) (set! u9774@p? (record-predicate u9767@u9762)) (set! u9776@make-i/o-error (record-constructor u9771@u9763)) (set! u9778@i/o-error? (condition-predicate u9767@u9762)) (set! u9780@&i/o-rtd u9767@u9762) (set! u9782@&i/o-rcd u9771@u9763) (set! u9788@u9783 (make-record-type-descriptor '&i/o-read u9767@u9762 'u9786 '#f '#f '#())) (set! u9790@u9785 '#f) (set! u9792@u9784 (make-record-constructor-descriptor u9788@u9783 u9771@u9763 u9790@u9785)) (set! u9795@p? (record-predicate u9788@u9783)) (set! u9797@make-i/o-read-error (record-constructor u9792@u9784)) (set! u9799@i/o-read-error? (condition-predicate u9788@u9783)) (set! u9801@&i/o-read-rtd u9788@u9783) (set! u9803@&i/o-read-rcd u9792@u9784) (set! u9809@u9804 (make-record-type-descriptor '&i/o-write u9767@u9762 'u9807 '#f '#f '#())) (set! u9811@u9806 '#f) (set! u9813@u9805 (make-record-constructor-descriptor u9809@u9804 u9771@u9763 u9811@u9806)) (set! u9816@p? (record-predicate u9809@u9804)) (set! u9818@make-i/o-write-error (record-constructor u9813@u9805)) (set! u9820@i/o-write-error? (condition-predicate u9809@u9804)) (set! u9822@&i/o-write-rtd u9809@u9804) (set! u9824@&i/o-write-rcd u9813@u9805) (set! u9831@u9826 (make-record-type-descriptor '&i/o-invalid-position u9767@u9762 'u9829 '#f '#f '#((immutable position)))) (set! u9833@u9828 '#f) (set! u9835@u9827 (make-record-constructor-descriptor u9831@u9826 u9771@u9763 u9833@u9828)) (set! u9838@p? (record-predicate u9831@u9826)) (set! u9840@make-i/o-invalid-position-error (record-constructor u9835@u9827)) (set! u9842@u9825@i/o-error-position (record-accessor u9831@u9826 '0)) (set! u9844@i/o-invalid-position-error? (condition-predicate u9831@u9826)) (set! u9846@i/o-error-position (condition-accessor u9831@u9826 u9842@u9825@i/o-error-position)) (set! u9848@&i/o-invalid-position-rtd u9831@u9826) (set! u9850@&i/o-invalid-position-rcd u9835@u9827) (set! u9857@u9852 (make-record-type-descriptor '&i/o-filename u9767@u9762 'u9855 '#f '#f '#((immutable filename)))) (set! u9859@u9854 '#f) (set! u9861@u9853 (make-record-constructor-descriptor u9857@u9852 u9771@u9763 u9859@u9854)) (set! u9864@p? (record-predicate u9857@u9852)) (set! u9866@make-i/o-filename-error (record-constructor u9861@u9853)) (set! u9868@u9851@i/o-error-filename (record-accessor u9857@u9852 '0)) (set! u9870@i/o-filename-error? (condition-predicate u9857@u9852)) (set! u9872@i/o-error-filename (condition-accessor u9857@u9852 u9868@u9851@i/o-error-filename)) (set! u9874@&i/o-filename-rtd u9857@u9852) (set! u9876@&i/o-filename-rcd u9861@u9853) (set! u9882@u9877 (make-record-type-descriptor '&i/o-file-protection u9857@u9852 'u9880 '#f '#f '#())) (set! u9884@u9879 '#f) (set! u9886@u9878 (make-record-constructor-descriptor u9882@u9877 u9861@u9853 u9884@u9879)) (set! u9889@p? (record-predicate u9882@u9877)) (set! u9891@make-i/o-file-protection-error (record-constructor u9886@u9878)) (set! u9893@i/o-file-protection-error? (condition-predicate u9882@u9877)) (set! u9895@&i/o-file-protection-rtd u9882@u9877) (set! u9897@&i/o-file-protection-rcd u9886@u9878) (set! u9903@u9898 (make-record-type-descriptor '&i/o-file-is-read-only u9882@u9877 'u9901 '#f '#f '#())) (set! u9905@u9900 '#f) (set! u9907@u9899 (make-record-constructor-descriptor u9903@u9898 u9886@u9878 u9905@u9900)) (set! u9910@p? (record-predicate u9903@u9898)) (set! u9912@make-i/o-file-is-read-only-error (record-constructor u9907@u9899)) (set! u9914@i/o-file-is-read-only-error? (condition-predicate u9903@u9898)) (set! u9916@&i/o-file-is-read-only-rtd u9903@u9898) (set! u9918@&i/o-file-is-read-only-rcd u9907@u9899) (set! u9924@u9919 (make-record-type-descriptor '&i/o-file-already-exists u9857@u9852 'u9922 '#f '#f '#())) (set! u9926@u9921 '#f) (set! u9928@u9920 (make-record-constructor-descriptor u9924@u9919 u9861@u9853 u9926@u9921)) (set! u9931@p? (record-predicate u9924@u9919)) (set! u9933@make-i/o-file-already-exists-error (record-constructor u9928@u9920)) (set! u9935@i/o-file-already-exists-error? (condition-predicate u9924@u9919)) (set! u9937@&i/o-file-already-exists-rtd u9924@u9919) (set! u9939@&i/o-file-already-exists-rcd u9928@u9920) (set! u9945@u9940 (make-record-type-descriptor '&i/o-file-does-not-exist u9857@u9852 'u9943 '#f '#f '#())) (set! u9947@u9942 '#f) (set! u9949@u9941 (make-record-constructor-descriptor u9945@u9940 u9861@u9853 u9947@u9942)) (set! u9952@p? (record-predicate u9945@u9940)) (set! u9954@make-i/o-file-does-not-exist-error (record-constructor u9949@u9941)) (set! u9956@i/o-file-does-not-exist-error? (condition-predicate u9945@u9940)) (set! u9958@&i/o-file-does-not-exist-rtd u9945@u9940) (set! u9960@&i/o-file-does-not-exist-rcd u9949@u9941) (set! u9967@u9962 (make-record-type-descriptor '&i/o-port u9767@u9762 'u9965 '#f '#f '#((immutable port)))) (set! u9969@u9964 '#f) (set! u9971@u9963 (make-record-constructor-descriptor u9967@u9962 u9771@u9763 u9969@u9964)) (set! u9974@p? (record-predicate u9967@u9962)) (set! u9976@make-i/o-port-error (record-constructor u9971@u9963)) (set! u9978@u9961@i/o-error-port (record-accessor u9967@u9962 '0)) (set! u9980@i/o-port-error? (condition-predicate u9967@u9962)) (set! u9982@i/o-error-port (condition-accessor u9967@u9962 u9978@u9961@i/o-error-port)) (set! u9984@&i/o-port-rtd u9967@u9962) (set! u9986@&i/o-port-rcd u9971@u9963) (set! u9992@u9987 (make-record-type-descriptor '&i/o-decoding u9967@u9962 'u9990 '#f '#f '#())) (set! u9994@u9989 '#f) (set! u9996@u9988 (make-record-constructor-descriptor u9992@u9987 u9971@u9963 u9994@u9989)) (set! u9999@p? (record-predicate u9992@u9987)) (set! u10001@make-i/o-decoding-error (record-constructor u9996@u9988)) (set! u10003@i/o-decoding-error? (condition-predicate u9992@u9987)) (set! u10005@&i/o-decoding-rtd u9992@u9987) (set! u10007@&i/o-decoding-rcd u9996@u9988) (set! u10014@u10009 (make-record-type-descriptor '&i/o-encoding u9967@u9962 'u10012 '#f '#f '#((immutable char)))) (set! u10016@u10011 '#f) (set! u10018@u10010 (make-record-constructor-descriptor u10014@u10009 u9971@u9963 u10016@u10011)) (set! u10021@p? (record-predicate u10014@u10009)) (set! u10023@make-i/o-encoding-error (record-constructor u10018@u10010)) (set! u10025@u10008@i/o-encoding-error-char (record-accessor u10014@u10009 '0)) (set! u10027@i/o-encoding-error? (condition-predicate u10014@u10009)) (set! u10029@i/o-encoding-error-char (condition-accessor u10014@u10009 u10025@u10008@i/o-encoding-error-char)) (set! u10031@&i/o-encoding-rtd u10014@u10009) (set! u10033@&i/o-encoding-rcd u10018@u10010) (set! u10039@u10034 (make-record-type-descriptor '&no-infinities u9673@u9668 'u10037 '#f '#f '#())) (set! u10041@u10036 '#f) (set! u10043@u10035 (make-record-constructor-descriptor u10039@u10034 u9677@u9669 u10041@u10036)) (set! u10046@p? (record-predicate u10039@u10034)) (set! u10048@make-no-infinities-violation (record-constructor u10043@u10035)) (set! u10050@no-infinities-violation? (condition-predicate u10039@u10034)) (set! u10052@&no-infinities-rtd u10039@u10034) (set! u10054@&no-infinities-rcd u10043@u10035) (set! u10060@u10055 (make-record-type-descriptor '&no-nans u9673@u9668 'u10058 '#f '#f '#())) (set! u10062@u10057 '#f) (set! u10064@u10056 (make-record-constructor-descriptor u10060@u10055 u9677@u9669 u10062@u10057)) (set! u10067@p? (record-predicate u10060@u10055)) (set! u10069@make-no-nans-violation (record-constructor u10064@u10056)) (set! u10071@no-nans-violation? (condition-predicate u10060@u10055)) (set! u10073@&no-nans-rtd u10060@u10055) (set! u10075@&no-nans-rcd u10064@u10056) (begin (set! u10316@u10075@&no-nans-rcd u10075@&no-nans-rcd) (set! u10315@u10073@&no-nans-rtd u10073@&no-nans-rtd) (set! u10314@u10071@no-nans-violation? u10071@no-nans-violation?) (set! u10313@u10069@make-no-nans-violation u10069@make-no-nans-violation) (set! u10312@u10067@p? u10067@p?) (set! u10311@u10064@u10056 u10064@u10056) (set! u10310@u10062@u10057 u10062@u10057) (set! u10309@u10060@u10055 u10060@u10055) (set! u10308@u10054@&no-infinities-rcd u10054@&no-infinities-rcd) (set! u10307@u10052@&no-infinities-rtd u10052@&no-infinities-rtd) (set! u10306@u10050@no-infinities-violation? u10050@no-infinities-violation?) (set! u10305@u10048@make-no-infinities-violation u10048@make-no-infinities-violation) (set! u10304@u10046@p? u10046@p?) (set! u10303@u10043@u10035 u10043@u10035) (set! u10302@u10041@u10036 u10041@u10036) (set! u10301@u10039@u10034 u10039@u10034) (set! u10300@u10033@&i/o-encoding-rcd u10033@&i/o-encoding-rcd) (set! u10299@u10031@&i/o-encoding-rtd u10031@&i/o-encoding-rtd) (set! u10298@u10029@i/o-encoding-error-char u10029@i/o-encoding-error-char) (set! u10297@u10027@i/o-encoding-error? u10027@i/o-encoding-error?) (set! u10296@u10025@u10008@i/o-encoding-error-char u10025@u10008@i/o-encoding-error-char) (set! u10295@u10023@make-i/o-encoding-error u10023@make-i/o-encoding-error) (set! u10294@u10021@p? u10021@p?) (set! u10293@u10018@u10010 u10018@u10010) (set! u10292@u10016@u10011 u10016@u10011) (set! u10291@u10014@u10009 u10014@u10009) (set! u10290@u10007@&i/o-decoding-rcd u10007@&i/o-decoding-rcd) (set! u10289@u10005@&i/o-decoding-rtd u10005@&i/o-decoding-rtd) (set! u10288@u10003@i/o-decoding-error? u10003@i/o-decoding-error?) (set! u10287@u10001@make-i/o-decoding-error u10001@make-i/o-decoding-error) (set! u10286@u9999@p? u9999@p?) (set! u10285@u9996@u9988 u9996@u9988) (set! u10284@u9994@u9989 u9994@u9989) (set! u10283@u9992@u9987 u9992@u9987) (set! u10282@u9986@&i/o-port-rcd u9986@&i/o-port-rcd) (set! u10281@u9984@&i/o-port-rtd u9984@&i/o-port-rtd) (set! u10280@u9982@i/o-error-port u9982@i/o-error-port) (set! u10279@u9980@i/o-port-error? u9980@i/o-port-error?) (set! u10278@u9978@u9961@i/o-error-port u9978@u9961@i/o-error-port) (set! u10277@u9976@make-i/o-port-error u9976@make-i/o-port-error) (set! u10276@u9974@p? u9974@p?) (set! u10275@u9971@u9963 u9971@u9963) (set! u10274@u9969@u9964 u9969@u9964) (set! u10273@u9967@u9962 u9967@u9962) (set! u10272@u9960@&i/o-file-does-not-exist-rcd u9960@&i/o-file-does-not-exist-rcd) (set! u10271@u9958@&i/o-file-does-not-exist-rtd u9958@&i/o-file-does-not-exist-rtd) (set! u10270@u9956@i/o-file-does-not-exist-error? u9956@i/o-file-does-not-exist-error?) (set! u10269@u9954@make-i/o-file-does-not-exist-error u9954@make-i/o-file-does-not-exist-error) (set! u10268@u9952@p? u9952@p?) (set! u10267@u9949@u9941 u9949@u9941) (set! u10266@u9947@u9942 u9947@u9942) (set! u10265@u9945@u9940 u9945@u9940) (set! u10264@u9939@&i/o-file-already-exists-rcd u9939@&i/o-file-already-exists-rcd) (set! u10263@u9937@&i/o-file-already-exists-rtd u9937@&i/o-file-already-exists-rtd) (set! u10262@u9935@i/o-file-already-exists-error? u9935@i/o-file-already-exists-error?) (set! u10261@u9933@make-i/o-file-already-exists-error u9933@make-i/o-file-already-exists-error) (set! u10260@u9931@p? u9931@p?) (set! u10259@u9928@u9920 u9928@u9920) (set! u10258@u9926@u9921 u9926@u9921) (set! u10257@u9924@u9919 u9924@u9919) (set! u10256@u9918@&i/o-file-is-read-only-rcd u9918@&i/o-file-is-read-only-rcd) (set! u10255@u9916@&i/o-file-is-read-only-rtd u9916@&i/o-file-is-read-only-rtd) (set! u10254@u9914@i/o-file-is-read-only-error? u9914@i/o-file-is-read-only-error?) (set! u10253@u9912@make-i/o-file-is-read-only-error u9912@make-i/o-file-is-read-only-error) (set! u10252@u9910@p? u9910@p?) (set! u10251@u9907@u9899 u9907@u9899) (set! u10250@u9905@u9900 u9905@u9900) (set! u10249@u9903@u9898 u9903@u9898) (set! u10248@u9897@&i/o-file-protection-rcd u9897@&i/o-file-protection-rcd) (set! u10247@u9895@&i/o-file-protection-rtd u9895@&i/o-file-protection-rtd) (set! u10246@u9893@i/o-file-protection-error? u9893@i/o-file-protection-error?) (set! u10245@u9891@make-i/o-file-protection-error u9891@make-i/o-file-protection-error) (set! u10244@u9889@p? u9889@p?) (set! u10243@u9886@u9878 u9886@u9878) (set! u10242@u9884@u9879 u9884@u9879) (set! u10241@u9882@u9877 u9882@u9877) (set! u10240@u9876@&i/o-filename-rcd u9876@&i/o-filename-rcd) (set! u10239@u9874@&i/o-filename-rtd u9874@&i/o-filename-rtd) (set! u10238@u9872@i/o-error-filename u9872@i/o-error-filename) (set! u10237@u9870@i/o-filename-error? u9870@i/o-filename-error?) (set! u10236@u9868@u9851@i/o-error-filename u9868@u9851@i/o-error-filename) (set! u10235@u9866@make-i/o-filename-error u9866@make-i/o-filename-error) (set! u10234@u9864@p? u9864@p?) (set! u10233@u9861@u9853 u9861@u9853) (set! u10232@u9859@u9854 u9859@u9854) (set! u10231@u9857@u9852 u9857@u9852) (set! u10230@u9850@&i/o-invalid-position-rcd u9850@&i/o-invalid-position-rcd) (set! u10229@u9848@&i/o-invalid-position-rtd u9848@&i/o-invalid-position-rtd) (set! u10228@u9846@i/o-error-position u9846@i/o-error-position) (set! u10227@u9844@i/o-invalid-position-error? u9844@i/o-invalid-position-error?) (set! u10226@u9842@u9825@i/o-error-position u9842@u9825@i/o-error-position) (set! u10225@u9840@make-i/o-invalid-position-error u9840@make-i/o-invalid-position-error) (set! u10224@u9838@p? u9838@p?) (set! u10223@u9835@u9827 u9835@u9827) (set! u10222@u9833@u9828 u9833@u9828) (set! u10221@u9831@u9826 u9831@u9826) (set! u10220@u9824@&i/o-write-rcd u9824@&i/o-write-rcd) (set! u10219@u9822@&i/o-write-rtd u9822@&i/o-write-rtd) (set! u10218@u9820@i/o-write-error? u9820@i/o-write-error?) (set! u10217@u9818@make-i/o-write-error u9818@make-i/o-write-error) (set! u10216@u9816@p? u9816@p?) (set! u10215@u9813@u9805 u9813@u9805) (set! u10214@u9811@u9806 u9811@u9806) (set! u10213@u9809@u9804 u9809@u9804) (set! u10212@u9803@&i/o-read-rcd u9803@&i/o-read-rcd) (set! u10211@u9801@&i/o-read-rtd u9801@&i/o-read-rtd) (set! u10210@u9799@i/o-read-error? u9799@i/o-read-error?) (set! u10209@u9797@make-i/o-read-error u9797@make-i/o-read-error) (set! u10208@u9795@p? u9795@p?) (set! u10207@u9792@u9784 u9792@u9784) (set! u10206@u9790@u9785 u9790@u9785) (set! u10205@u9788@u9783 u9788@u9783) (set! u10204@u9782@&i/o-rcd u9782@&i/o-rcd) (set! u10203@u9780@&i/o-rtd u9780@&i/o-rtd) (set! u10202@u9778@i/o-error? u9778@i/o-error?) (set! u10201@u9776@make-i/o-error u9776@make-i/o-error) (set! u10200@u9774@p? u9774@p?) (set! u10199@u9771@u9763 u9771@u9763) (set! u10198@u9769@u9764 u9769@u9764) (set! u10197@u9767@u9762 u9767@u9762) (set! u10196@u9761@&undefined-rcd u9761@&undefined-rcd) (set! u10195@u9759@&undefined-rtd u9759@&undefined-rtd) (set! u10194@u9757@undefined-violation? u9757@undefined-violation?) (set! u10193@u9755@make-undefined-violation u9755@make-undefined-violation) (set! u10192@u9753@p? u9753@p?) (set! u10191@u9750@u9742 u9750@u9742) (set! u10190@u9748@u9743 u9748@u9743) (set! u10189@u9746@u9741 u9746@u9741) (set! u10188@u9740@&syntax-rcd u9740@&syntax-rcd) (set! u10187@u9738@&syntax-rtd u9738@&syntax-rtd) (set! u10186@u9736@syntax-violation-subform u9736@syntax-violation-subform) (set! u10185@u9734@syntax-violation-form u9734@syntax-violation-form) (set! u10184@u9732@syntax-violation? u9732@syntax-violation?) (set! u10183@u9730@u9711@syntax-violation-subform u9730@u9711@syntax-violation-subform) (set! u10182@u9728@u9710@syntax-violation-form u9728@u9710@syntax-violation-form) (set! u10181@u9726@make-syntax-violation u9726@make-syntax-violation) (set! u10180@u9724@p? u9724@p?) (set! u10179@u9721@u9713 u9721@u9713) (set! u10178@u9719@u9714 u9719@u9714) (set! u10177@u9717@u9712 u9717@u9712) (set! u10176@u9709@&lexical-rcd u9709@&lexical-rcd) (set! u10175@u9707@&lexical-rtd u9707@&lexical-rtd) (set! u10174@u9705@lexical-violation? u9705@lexical-violation?) (set! u10173@u9703@make-lexical-violation u9703@make-lexical-violation) (set! u10172@u9701@p? u9701@p?) (set! u10171@u9698@u9690 u9698@u9690) (set! u10170@u9696@u9691 u9696@u9691) (set! u10169@u9694@u9689 u9694@u9689) (set! u10168@u9688@&implementation-restriction-rcd u9688@&implementation-restriction-rcd) (set! u10167@u9686@&implementation-restriction-rtd u9686@&implementation-restriction-rtd) (set! u10166@u9684@implementation-restriction-violation? u9684@implementation-restriction-violation?) (set! u10165@u9682@make-implementation-restriction-violation u9682@make-implementation-restriction-violation) (set! u10164@u9680@p? u9680@p?) (set! u10163@u9677@u9669 u9677@u9669) (set! u10162@u9675@u9670 u9675@u9670) (set! u10161@u9673@u9668 u9673@u9668) (set! u10160@u9667@&non-continuable-rcd u9667@&non-continuable-rcd) (set! u10159@u9665@&non-continuable-rtd u9665@&non-continuable-rtd) (set! u10158@u9663@non-continuable-violation? u9663@non-continuable-violation?) (set! u10157@u9661@make-non-continuable-violation u9661@make-non-continuable-violation) (set! u10156@u9659@p? u9659@p?) (set! u10155@u9656@u9648 u9656@u9648) (set! u10154@u9654@u9649 u9654@u9649) (set! u10153@u9652@u9647 u9652@u9647) (set! u10152@u9646@&who-rcd u9646@&who-rcd) (set! u10151@u9644@&who-rtd u9644@&who-rtd) (set! u10150@u9642@condition-who u9642@condition-who) (set! u10149@u9640@who-condition? u9640@who-condition?) (set! u10148@u9638@u9621@condition-who u9638@u9621@condition-who) (set! u10147@u9636@make-who-condition u9636@make-who-condition) (set! u10146@u9634@p? u9634@p?) (set! u10145@u9631@u9623 u9631@u9623) (set! u10144@u9629@u9624 u9629@u9624) (set! u10143@u9627@u9622 u9627@u9622) (set! u10142@u9620@&irritants-rcd u9620@&irritants-rcd) (set! u10141@u9618@&irritants-rtd u9618@&irritants-rtd) (set! u10140@u9616@condition-irritants u9616@condition-irritants) (set! u10139@u9614@irritants-condition? u9614@irritants-condition?) (set! u10138@u9612@u9595@condition-irritants u9612@u9595@condition-irritants) (set! u10137@u9610@make-irritants-condition u9610@make-irritants-condition) (set! u10136@u9608@p? u9608@p?) (set! u10135@u9605@u9597 u9605@u9597) (set! u10134@u9603@u9598 u9603@u9598) (set! u10133@u9601@u9596 u9601@u9596) (set! u10132@u9594@&assertion-rcd u9594@&assertion-rcd) (set! u10131@u9592@&assertion-rtd u9592@&assertion-rtd) (set! u10130@u9590@assertion-violation? u9590@assertion-violation?) (set! u10129@u9588@make-assertion-violation u9588@make-assertion-violation) (set! u10128@u9586@p? u9586@p?) (set! u10127@u9583@u9575 u9583@u9575) (set! u10126@u9581@u9576 u9581@u9576) (set! u10125@u9579@u9574 u9579@u9574) (set! u10124@u9573@&violation-rcd u9573@&violation-rcd) (set! u10123@u9571@&violation-rtd u9571@&violation-rtd) (set! u10122@u9569@violation? u9569@violation?) (set! u10121@u9567@make-violation u9567@make-violation) (set! u10120@u9565@p? u9565@p?) (set! u10119@u9562@u9554 u9562@u9554) (set! u10118@u9560@u9555 u9560@u9555) (set! u10117@u9558@u9553 u9558@u9553) (set! u10116@u9552@&error-rcd u9552@&error-rcd) (set! u10115@u9550@&error-rtd u9550@&error-rtd) (set! u10114@u9548@error? u9548@error?) (set! u10113@u9546@make-error u9546@make-error) (set! u10112@u9544@p? u9544@p?) (set! u10111@u9541@u9533 u9541@u9533) (set! u10110@u9539@u9534 u9539@u9534) (set! u10109@u9537@u9532 u9537@u9532) (set! u10108@u9531@&serious-rcd u9531@&serious-rcd) (set! u10107@u9529@&serious-rtd u9529@&serious-rtd) (set! u10106@u9527@serious-condition? u9527@serious-condition?) (set! u10105@u9525@make-serious-condition u9525@make-serious-condition) (set! u10104@u9523@p? u9523@p?) (set! u10103@u9520@u9512 u9520@u9512) (set! u10102@u9518@u9513 u9518@u9513) (set! u10101@u9516@u9511 u9516@u9511) (set! u10100@u9510@&warning-rcd u9510@&warning-rcd) (set! u10099@u9508@&warning-rtd u9508@&warning-rtd) (set! u10098@u9506@warning? u9506@warning?) (set! u10097@u9504@make-warning u9504@make-warning) (set! u10096@u9502@p? u9502@p?) (set! u10095@u9499@u9491 u9499@u9491) (set! u10094@u9497@u9492 u9497@u9492) (set! u10093@u9495@u9490 u9495@u9490) (set! u10092@u9489@&message-rcd u9489@&message-rcd) (set! u10091@u9487@&message-rtd u9487@&message-rtd) (set! u10090@u9485@condition-message u9485@condition-message) (set! u10089@u9483@message-condition? u9483@message-condition?) (set! u10088@u9481@u9464@condition-message u9481@u9464@condition-message) (set! u10087@u9479@make-message-condition u9479@make-message-condition) (set! u10086@u9477@p? u9477@p?) (set! u10085@u9474@u9466 u9474@u9466) (set! u10084@u9472@u9467 u9472@u9467) (set! u10083@u9470@u9465 u9470@u9465) (set! u10082@u9398@&condition-rcd u9398@&condition-rcd) (set! u10081@u9396@&condition-rtd u9396@&condition-rtd) (set! u10080@u9394@make-&condition u9394@make-&condition) (set! u10079@u9392@&condition? u9392@&condition?) (set! u10078@u9389@u9381 u9389@u9381) (set! u10077@u9387@u9382 u9387@u9382) (set! u10076@u9385@u9380 u9385@u9380)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (u1254@u1179@current-primitive-locations (lambda (u11339@x) ((lambda (u11341@t) (if u11341@t (cdr u11341@t) '#f)) (assq u11339@x '((&no-nans-rcd . u10316@u10075@&no-nans-rcd) (&no-nans-rtd . u10315@u10073@&no-nans-rtd) (&no-infinities-rcd . u10308@u10054@&no-infinities-rcd) (&no-infinities-rtd . u10307@u10052@&no-infinities-rtd) (&i/o-encoding-rcd . u10300@u10033@&i/o-encoding-rcd) (&i/o-encoding-rtd . u10299@u10031@&i/o-encoding-rtd) (&i/o-decoding-rcd . u10290@u10007@&i/o-decoding-rcd) (&i/o-decoding-rtd . u10289@u10005@&i/o-decoding-rtd) (&i/o-port-rcd . u10282@u9986@&i/o-port-rcd) (&i/o-port-rtd . u10281@u9984@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . u10272@u9960@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . u10271@u9958@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . u10264@u9939@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . u10263@u9937@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . u10256@u9918@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . u10255@u9916@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . u10248@u9897@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . u10247@u9895@&i/o-file-protection-rtd) (&i/o-filename-rcd . u10240@u9876@&i/o-filename-rcd) (&i/o-filename-rtd . u10239@u9874@&i/o-filename-rtd) (&i/o-invalid-position-rcd . u10230@u9850@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . u10229@u9848@&i/o-invalid-position-rtd) (&i/o-write-rcd . u10220@u9824@&i/o-write-rcd) (&i/o-write-rtd . u10219@u9822@&i/o-write-rtd) (&i/o-read-rcd . u10212@u9803@&i/o-read-rcd) (&i/o-read-rtd . u10211@u9801@&i/o-read-rtd) (&i/o-rcd . u10204@u9782@&i/o-rcd) (&i/o-rtd . u10203@u9780@&i/o-rtd) (&undefined-rcd . u10196@u9761@&undefined-rcd) (&undefined-rtd . u10195@u9759@&undefined-rtd) (&syntax-rcd . u10188@u9740@&syntax-rcd) (&syntax-rtd . u10187@u9738@&syntax-rtd) (&lexical-rcd . u10176@u9709@&lexical-rcd) (&lexical-rtd . u10175@u9707@&lexical-rtd) (&implementation-restriction-rcd . u10168@u9688@&implementation-restriction-rcd) (&implementation-restriction-rtd . u10167@u9686@&implementation-restriction-rtd) (&non-continuable-rcd . u10160@u9667@&non-continuable-rcd) (&non-continuable-rtd . u10159@u9665@&non-continuable-rtd) (&who-rcd . u10152@u9646@&who-rcd) (&who-rtd . u10151@u9644@&who-rtd) (&irritants-rcd . u10142@u9620@&irritants-rcd) (&irritants-rtd . u10141@u9618@&irritants-rtd) (&assertion-rcd . u10132@u9594@&assertion-rcd) (&assertion-rtd . u10131@u9592@&assertion-rtd) (&violation-rcd . u10124@u9573@&violation-rcd) (&violation-rtd . u10123@u9571@&violation-rtd) (&error-rcd . u10116@u9552@&error-rcd) (&error-rtd . u10115@u9550@&error-rtd) (&serious-rcd . u10108@u9531@&serious-rcd) (&serious-rtd . u10107@u9529@&serious-rtd) (&warning-rcd . u10100@u9510@&warning-rcd) (&warning-rtd . u10099@u9508@&warning-rtd) (&message-rcd . u10092@u9489@&message-rcd) (&message-rtd . u10091@u9487@&message-rtd) (&condition-rcd . u10082@u9398@&condition-rcd) (&condition-rtd . u10081@u9396@&condition-rtd) (syntax-error . u9366@u3001@syntax-error) (syntax-dispatch . u9259@u2772@syntax-dispatch) (gensym . u1159@u923@gensym) (load . u10579@u10344@load) (interaction-environment . u9374@u3017@interaction-environment) (library-path . u1783@u1420@library-path) (make-parameter . u1173@u951@make-parameter) (make-variable-transformer . u9193@u2331@make-variable-transformer) (identifier? . u9369@u3007@identifier?) (generate-temporaries . u9359@u2987@generate-temporaries) (free-identifier=? . u9360@u2989@free-identifier=?) (syntax->datum . u9371@u3011@syntax->datum) (datum->syntax . u9370@u3009@datum->syntax) (bound-identifier=? . u9361@u2991@bound-identifier=?) (make-i/o-write-error . u10217@u9818@make-i/o-write-error) (make-i/o-read-error . u10209@u9797@make-i/o-read-error) (make-i/o-port-error . u10277@u9976@make-i/o-port-error) (make-i/o-invalid-position-error . u10225@u9840@make-i/o-invalid-position-error) (make-i/o-filename-error . u10235@u9866@make-i/o-filename-error) (make-i/o-file-protection-error . u10245@u9891@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . u10253@u9912@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . u10269@u9954@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . u10261@u9933@make-i/o-file-already-exists-error) (make-i/o-error . u10201@u9776@make-i/o-error) (make-i/o-encoding-error . u10295@u10023@make-i/o-encoding-error) (make-i/o-decoding-error . u10287@u10001@make-i/o-decoding-error) (i/o-write-error? . u10218@u9820@i/o-write-error?) (i/o-read-error? . u10210@u9799@i/o-read-error?) (i/o-port-error? . u10279@u9980@i/o-port-error?) (i/o-invalid-position-error? . u10227@u9844@i/o-invalid-position-error?) (i/o-filename-error? . u10237@u9870@i/o-filename-error?) (i/o-file-protection-error? . u10246@u9893@i/o-file-protection-error?) (i/o-file-is-read-only-error? . u10254@u9914@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . u10270@u9956@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . u10262@u9935@i/o-file-already-exists-error?) (i/o-error? . u10202@u9778@i/o-error?) (i/o-error-position . u10228@u9846@i/o-error-position) (i/o-error-port . u10280@u9982@i/o-error-port) (i/o-error-filename . u10238@u9872@i/o-error-filename) (i/o-encoding-error? . u10297@u10027@i/o-encoding-error?) (i/o-encoding-error-char . u10298@u10029@i/o-encoding-error-char) (i/o-decoding-error? . u10288@u10003@i/o-decoding-error?) (scheme-report-environment . u9350@u2969@scheme-report-environment) (null-environment . u9349@u2967@null-environment) (command-line . u10576@u10338@command-line) (eval . u9352@u2973@eval) (environment . u9348@u2965@environment) (who-condition? . u10149@u9640@who-condition?) (warning? . u10098@u9506@warning?) (violation? . u10122@u9569@violation?) (undefined-violation? . u10194@u9757@undefined-violation?) (syntax-violation? . u10184@u9732@syntax-violation?) (syntax-violation-subform . u10186@u9736@syntax-violation-subform) (syntax-violation-form . u10185@u9734@syntax-violation-form) (syntax-violation . u9368@u3005@syntax-violation) (serious-condition? . u10106@u9527@serious-condition?) (non-continuable-violation? . u10158@u9663@non-continuable-violation?) (message-condition? . u10089@u9483@message-condition?) (make-who-condition . u10147@u9636@make-who-condition) (make-warning . u10097@u9504@make-warning) (make-violation . u10121@u9567@make-violation) (make-undefined-violation . u10193@u9755@make-undefined-violation) (make-syntax-violation . u10181@u9726@make-syntax-violation) (make-serious-condition . u10105@u9525@make-serious-condition) (make-non-continuable-violation . u10157@u9661@make-non-continuable-violation) (make-message-condition . u10087@u9479@make-message-condition) (make-lexical-violation . u10173@u9703@make-lexical-violation) (make-irritants-condition . u10137@u9610@make-irritants-condition) (make-implementation-restriction-violation . u10165@u9682@make-implementation-restriction-violation) (make-error . u10113@u9546@make-error) (make-assertion-violation . u10129@u9588@make-assertion-violation) (lexical-violation? . u10174@u9705@lexical-violation?) (irritants-condition? . u10139@u9614@irritants-condition?) (implementation-restriction-violation? . u10166@u9684@implementation-restriction-violation?) (error? . u10114@u9548@error?) (condition-who . u10150@u9642@condition-who) (condition-message . u10090@u9485@condition-message) (condition-irritants . u10140@u9616@condition-irritants) (assertion-violation? . u10130@u9590@assertion-violation?) (no-nans-violation? . u10314@u10071@no-nans-violation?) (no-infinities-violation? . u10306@u10050@no-infinities-violation?) (make-no-nans-violation . u10313@u10069@make-no-nans-violation) (make-no-infinities-violation . u10305@u10048@make-no-infinities-violation) (assertion-error . u9365@u2999@assertion-error)))))) (u1799@u1452@install-library 'u11304 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . u11294) (format . u11291) (string-split . u11280) (call-process . u11274) (set-current-directory! . u11270) (expand-path . u11269) (current-directory . u11268) (%spawn . u11267) (%waitpid . u11266) (%ffi-supported? . u11265) (%ffi-pointer-ref . u11264) (%ffi-pointer->string . u11263) (%ffi-call->string-or-zero . u11262) (%ffi-call->double . u11261) (%ffi-call->void* . u11260) (%ffi-call->void . u11259) (%ffi-call->int . u11258) (%ffi-lookup . u11257) (%ffi-open . u11256) (%fork . u11255) (%pipe . u11254) (p . u11253) (string-upcase . u11225) (string-titlecase . u11224) (string-normalize-nfkd . u11223) (string-normalize-nfkc . u11222) (string-normalize-nfd . u11221) (string-normalize-nfc . u11220) (string-foldcase . u11219) (string-downcase . u11218) (string-ci>? . u11217) (string-ci>=? . u11216) (string-ci=? . u11215) (string-ci<? . u11214) (string-ci<=? . u11213) (char-whitespace? . u11212) (char-upper-case? . u11211) (char-title-case? . u11210) (char-numeric? . u11209) (char-lower-case? . u11208) (char-general-category . u11207) (char-upcase . u11206) (char-titlecase . u11205) (char-foldcase . u11204) (char-downcase . u11203) (char-ci>? . u11202) (char-ci>=? . u11201) (char-ci=? . u11200) (char-ci<? . u11199) (char-ci<=? . u11198) (char-alphabetic? . u11197) (make-variable-transformer . u2330) (identifier? . u3006) (generate-temporaries . u2986) (free-identifier=? . u2988) (syntax->datum . u3010) (datum->syntax . u3008) (bound-identifier=? . u2990) (record-type-descriptor? . u11196) (record-predicate . u11195) (record-mutator . u11194) (record-constructor . u11193) (record-accessor . u11192) (make-record-type-descriptor . u11191) (make-record-constructor-descriptor . u11190) (record? . u11189) (record-type-uid . u11188) (record-type-sealed? . u11187) (record-type-parent . u11186) (record-type-opaque? . u11185) (record-type-name . u11184) (record-type-generative? . u11183) (record-type-field-names . u11182) (record-rtd . u11181) (record-field-mutable? . u11180) (delete-file . u11179) (file-exists? . u11178) (vector-sort! . u11177) (vector-sort . u11176) (list-sort . u11175) (symbol-hash . u11174) (string-ci-hash . u11173) (string-hash . u11172) (equal-hash . u11171) (hashtable-equivalence-function . u11170) (make-hashtable . u11169) (hashtable-hash-function . u11168) (make-eqv-hashtable . u11167) (make-eq-hashtable . u11166) (hashtable? . u11165) (hashtable-update! . u11164) (hashtable-size . u11163) (hashtable-set! . u11162) (hashtable-ref . u11161) (hashtable-mutable? . u11160) (hashtable-keys . u11159) (hashtable-entries . u11158) (hashtable-delete! . u11157) (hashtable-copy . u11156) (hashtable-contains? . u11155) (hashtable-clear! . u11154) (call-with-output-file . u11153) (call-with-input-file . u11152) (write-char . u11151) (write . u11150) (with-output-to-file . u11149) (with-input-from-file . u11148) (read-char . u11147) (read . u11146) (peek-char . u11145) (open-output-file . u11144) (open-input-file . u11143) (newline . u11142) (display . u11141) (close-output-port . u11140) (close-input-port . u11139) (eof-object? . u11138) (eof-object . u11137) (current-error-port . u11136) (current-output-port . u11135) (current-input-port . u11134) (output-port? . u11133) (input-port? . u11132) (utf-8-codec . u11131) (utf-16-codec . u11130) (transcoder-error-handling-mode . u11129) (transcoder-eol-style . u11128) (transcoder-codec . u11127) (transcoded-port . u11126) (textual-port? . u11125) (string->bytevector . u11124) (standard-output-port . u11123) (standard-input-port . u11122) (standard-error-port . u11121) (set-port-position! . u11120) (put-u8 . u11119) (put-string . u11118) (put-datum . u11117) (put-char . u11116) (put-bytevector . u11115) (port? . u11114) (port-transcoder . u11113) (port-position . u11112) (port-has-set-port-position!? . u11111) (port-has-port-position? . u11110) (port-eof? . u11109) (output-port-buffer-mode . u11108) (open-string-output-port . u11107) (open-string-input-port . u11106) (open-file-output-port . u11105) (open-file-input/output-port . u11104) (open-file-input-port . u11103) (open-bytevector-output-port . u11102) (open-bytevector-input-port . u11101) (native-transcoder . u11100) (native-eol-style . u11099) (make-transcoder . u11098) (latin-1-codec . u11097) (make-i/o-write-error . u9817) (make-i/o-read-error . u9796) (make-i/o-port-error . u9975) (make-i/o-invalid-position-error . u9839) (make-i/o-filename-error . u9865) (make-i/o-file-protection-error . u9890) (make-i/o-file-is-read-only-error . u9911) (make-i/o-file-does-not-exist-error . u9953) (make-i/o-file-already-exists-error . u9932) (make-i/o-error . u9775) (make-i/o-encoding-error . u10022) (make-i/o-decoding-error . u10000) (make-custom-textual-output-port . u11096) (make-custom-textual-input/output-port . u11095) (make-custom-textual-input-port . u11094) (make-custom-binary-output-port . u11093) (make-custom-binary-input/output-port . u11092) (make-custom-binary-input-port . u11091) (make-bytevector . u11090) (lookahead-u8 . u11089) (lookahead-char . u11088) (i/o-write-error? . u9819) (i/o-read-error? . u9798) (i/o-port-error? . u9979) (i/o-invalid-position-error? . u9843) (i/o-filename-error? . u9869) (i/o-file-protection-error? . u9892) (i/o-file-is-read-only-error? . u9913) (i/o-file-does-not-exist-error? . u9955) (i/o-file-already-exists-error? . u9934) (i/o-error? . u9777) (i/o-error-position . u9845) (i/o-error-port . u9981) (i/o-error-filename . u9871) (i/o-encoding-error? . u10026) (i/o-encoding-error-char . u10028) (i/o-decoding-error? . u10002) (get-u8 . u11087) (get-string-n! . u11086) (get-string-n . u11085) (get-string-all . u11084) (get-line . u11083) (get-datum . u11082) (get-char . u11081) (get-bytevector-some . u11080) (get-bytevector-n! . u11079) (get-bytevector-n . u11078) (get-bytevector-all . u11077) (flush-output-port . u11076) (close-port . u11075) (exit . u11067) (command-line . u10337) (string-fill! . u11066) (string-set! . u11065) (set-cdr! . u11064) (set-car! . u11063) (remove . u11062) (remv . u11061) (remp . u11060) (remq . u11059) (partition . u11058) (memv . u11057) (memq . u11056) (memp . u11055) (member . u11054) (exists . u11053) (for-all . u11052) (fold-right . u11051) (fold-left . u11050) (find . u11049) (filter . u11048) (cons* . u11047) (assv . u11046) (assq . u11045) (assp . u11044) (assoc . u11043) (call-with-string-output-port . u11042) (call-with-port . u11041) (call-with-bytevector-output-port . u11040) (bytevector->string . u11039) (buffer-mode? . u11038) (binary-port? . u11037) (with-exception-handler . u11036) (raise-continuable . u11035) (raise . u11034) (eval . u2972) (environment . u2964) (make-enumeration . u11033) (enum-set=? . u11032) (enum-set-universe . u11031) (enum-set-union . u11030) (enum-set-subset? . u11029) (enum-set-projection . u11028) (enum-set-member? . u11027) (enum-set-intersection . u11026) (enum-set-indexer . u11025) (enum-set-difference . u11024) (enum-set-constructor . u11023) (enum-set-complement . u11022) (enum-set->list . u11021) (who-condition? . u9639) (warning? . u9505) (violation? . u9568) (undefined-violation? . u9756) (syntax-violation? . u9731) (syntax-violation-subform . u9735) (syntax-violation-form . u9733) (syntax-violation . u3004) (simple-conditions . u11020) (serious-condition? . u9526) (non-continuable-violation? . u9662) (message-condition? . u9482) (make-who-condition . u9635) (make-warning . u9503) (make-violation . u9566) (make-undefined-violation . u9754) (make-syntax-violation . u9725) (make-serious-condition . u9524) (make-non-continuable-violation . u9660) (make-message-condition . u9478) (make-lexical-violation . u9702) (make-irritants-condition . u9609) (make-implementation-restriction-violation . u9681) (make-error . u9545) (make-assertion-violation . u9587) (lexical-violation? . u9704) (irritants-condition? . u9613) (implementation-restriction-violation? . u9683) (error? . u9547) (condition-who . u9641) (condition-predicate . u11019) (condition-message . u9484) (condition-irritants . u9615) (condition-accessor . u11018) (condition . u11017) (assertion-violation? . u9589) (condition? . u11016) (utf32->string . u11015) (utf16->string . u11014) (utf8->string . u11013) (uint-list->bytevector . u11012) (u8-list->bytevector . u11011) (string->utf8 . u11010) (string->utf32 . u11009) (string->utf16 . u11008) (sint-list->bytevector . u11007) (native-endianness . u11006) (bytevector? . u11005) (bytevector=? . u11004) (bytevector-uint-set! . u11003) (bytevector-uint-ref . u11002) (bytevector-u8-set! . u11001) (bytevector-u8-ref . u11000) (bytevector-u64-set! . u10999) (bytevector-u64-ref . u10998) (bytevector-u64-native-set! . u10997) (bytevector-u64-native-ref . u10996) (bytevector-u32-set! . u10995) (bytevector-u32-ref . u10994) (bytevector-u32-native-set! . u10993) (bytevector-u32-native-ref . u10992) (bytevector-u16-set! . u10991) (bytevector-u16-ref . u10990) (bytevector-u16-native-set! . u10989) (bytevector-u16-native-ref . u10988) (bytevector-sint-set! . u10987) (bytevector-sint-ref . u10986) (bytevector-s8-set! . u10985) (bytevector-s8-ref . u10984) (bytevector-s64-set! . u10983) (bytevector-s64-ref . u10982) (bytevector-s64-native-set! . u10981) (bytevector-s64-native-ref . u10980) (bytevector-s32-set! . u10979) (bytevector-s32-ref . u10978) (bytevector-s32-native-set! . u10977) (bytevector-s32-native-ref . u10976) (bytevector-s16-set! . u10975) (bytevector-s16-ref . u10974) (bytevector-s16-native-set! . u10973) (bytevector-s16-native-ref . u10972) (bytevector-length . u10971) (bytevector-ieee-single-ref . u10970) (bytevector-ieee-single-set! . u10969) (bytevector-ieee-single-native-set! . u10968) (bytevector-ieee-single-native-ref . u10967) (bytevector-ieee-double-set! . u10966) (bytevector-ieee-double-ref . u10965) (bytevector-ieee-double-native-set! . u10964) (bytevector-ieee-double-native-ref . u10963) (bytevector-fill! . u10962) (bytevector-copy! . u10961) (bytevector-copy . u10960) (bytevector->uint-list . u10959) (bytevector->u8-list . u10958) (bytevector->sint-list . u10957) (no-nans-violation? . u10070) (no-infinities-violation? . u10049) (make-no-nans-violation . u10068) (make-no-infinities-violation . u10047) (real->flonum . u10956) (flzero? . u10955) (fltruncate . u10954) (fltan . u10953) (flsqrt . u10952) (flsin . u10951) (flround . u10950) (flpositive? . u10949) (flonum? . u10948) (flodd? . u10947) (flnumerator . u10946) (flnegative? . u10945) (flnan? . u10944) (flmod0 . u10943) (flmod . u10942) (flmin . u10941) (flmax . u10940) (fllog . u10939) (flinteger? . u10938) (flinfinite? . u10937) (flfloor . u10936) (flfinite? . u10935) (flexpt . u10934) (flexp . u10933) (fleven? . u10932) (fldiv0-and-mod0 . u10931) (fldiv0 . u10930) (fldiv-and-mod . u10929) (fldiv . u10928) (fldenominator . u10927) (flcos . u10926) (flceiling . u10925) (flatan . u10924) (flasin . u10923) (flacos . u10922) (flabs . u10921) (fl>? . u10920) (fl>=? . u10919) (fl=? . u10918) (fl<? . u10917) (fl<=? . u10916) (fl/ . u10915) (fl- . u10914) (fl+ . u10913) (fl* . u10912) (fixnum->flonum . u10911) (fxzero? . u10910) (fxxor . u10909) (fxrotate-bit-field . u10908) (fxreverse-bit-field . u10907) (fxpositive? . u10906) (fxodd? . u10905) (fxnot . u10904) (fxnegative? . u10903) (fxmod0 . u10902) (fxmod . u10901) (fxmin . u10900) (fxmax . u10899) (fxlength . u10898) (fxior . u10897) (fxif . u10896) (fxfirst-bit-set . u10895) (fxeven? . u10894) (fxdiv0-and-mod0 . u10893) (fxdiv0 . u10892) (fxdiv-and-mod . u10891) (fxdiv . u10890) (fxcopy-bit-field . u10889) (fxcopy-bit . u10888) (fxbit-set? . u10887) (fxbit-field . u10886) (fxbit-count . u10885) (fxarithmetic-shift-right . u10884) (fxarithmetic-shift-left . u10883) (fxarithmetic-shift . u10882) (fxand . u10881) (fx>? . u10880) (fx>=? . u10879) (fx=? . u10878) (fx<? . u10877) (fx<=? . u10876) (fx-/carry . u10875) (fx- . u10874) (fx+/carry . u10873) (fx+ . u10872) (fx*/carry . u10871) (fx* . u10870) (greatest-fixnum . u10869) (least-fixnum . u10868) (fixnum-width . u10867) (fixnum? . u10866) (bitwise-rotate-bit-field . u10865) (bitwise-reverse-bit-field . u10864) (bitwise-length . u10863) (bitwise-if . u10862) (bitwise-first-bit-set . u10861) (bitwise-copy-bit-field . u10860) (bitwise-copy-bit . u10859) (bitwise-bit-set? . u10858) (bitwise-bit-field . u10857) (bitwise-bit-count . u10856) (bitwise-xor . u10855) (bitwise-ior . u10854) (bitwise-and . u10853) (bitwise-not . u10852) (bitwise-arithmetic-shift-right . u10851) (bitwise-arithmetic-shift-left . u10850) (bitwise-arithmetic-shift . u10849) (zero? . u10848) (vector? . u10847) (vector-set! . u10846) (vector-ref . u10845) (vector-map . u10844) (vector-length . u10843) (vector-for-each . u10842) (vector-fill! . u10841) (vector->list . u10840) (vector . u10839) (values . u10838) (truncate . u10837) (tan . u10836) (symbol? . u10835) (symbol=? . u10834) (symbol->string . u10833) (substring . u10832) (string? . u10831) (string>? . u10830) (string>=? . u10829) (string=? . u10828) (string<? . u10827) (string<=? . u10826) (string-ref . u10825) (string-length . u10824) (string-for-each . u10823) (string-copy . u10822) (string-append . u10821) (string->symbol . u10820) (string->number . u10819) (string->list . u10818) (string . u10817) (sqrt . u10816) (sin . u10815) (round . u10814) (reverse . u10813) (real? . u10812) (real-valued? . u10811) (real-part . u10810) (rationalize . u10809) (rational? . u10808) (rational-valued? . u10807) (procedure? . u10806) (positive? . u10805) (pair? . u10804) (odd? . u10803) (numerator . u10802) (number? . u10801) (number->string . u10800) (null? . u10799) (not . u10798) (negative? . u10797) (nan? . u10796) (min . u10795) (max . u10794) (map . u10793) (make-vector . u10792) (make-string . u10791) (make-rectangular . u10790) (make-polar . u10789) (magnitude . u10788) (log . u10787) (list? . u10786) (list-tail . u10785) (list-ref . u10784) (list->vector . u10783) (list->string . u10782) (list . u10781) (length . u10780) (lcm . u10779) (integer? . u10778) (integer-valued? . u10777) (integer->char . u10776) (infinite? . u10775) (inexact? . u10774) (inexact . u10773) (imag-part . u10772) (gcd . u10771) (for-each . u10770) (floor . u10769) (finite? . u10768) (expt . u10767) (exp . u10766) (exact? . u10765) (exact-integer-sqrt . u10764) (exact . u10763) (even? . u10762) (error . u10761) (eqv? . u10760) (equal? . u10759) (eq? . u10758) (dynamic-wind . u10757) (div0-and-mod0 . u10756) (mod0 . u10755) (div0 . u10754) (div-and-mod . u10753) (mod . u10752) (div . u10751) (denominator . u10750) (cos . u10749) (cons . u10748) (complex? . u10747) (char? . u10746) (char>? . u10745) (char>=? . u10744) (char=? . u10743) (char<? . u10742) (char<=? . u10741) (char->integer . u10740) (ceiling . u10739) (call-with-values . u10738) (call/cc . u10737) (call-with-current-continuation . u10736) (cddddr . u10735) (cdddar . u10734) (cddadr . u10733) (cddaar . u10732) (cdaddr . u10731) (cdadar . u10730) (cdaadr . u10729) (cdaaar . u10728) (cadddr . u10727) (caddar . u10726) (cadadr . u10725) (cadaar . u10724) (caaddr . u10723) (caadar . u10722) (caaadr . u10721) (caaaar . u10720) (cdddr . u10719) (cddar . u10718) (cdadr . u10717) (cdaar . u10716) (caddr . u10715) (cadar . u10714) (caadr . u10713) (caaar . u10712) (cddr . u10711) (cdar . u10710) (cadr . u10709) (caar . u10708) (cdr . u10707) (car . u10706) (boolean? . u10705) (boolean=? . u10704) (atan . u10703) (assertion-violation . u10702) (asin . u10701) (apply . u10700) (append . u10699) (angle . u10698) (acos . u10697) (abs . u10696) (/ . u10695) (* . u10694) (- . u10693) (+ . u10692) (>= . u10691) (> . u10690) (= . u10689) (<= . u10688) (< . u10687) (library . u10686) (&no-nans . u10685) (&no-infinities . u10684) (&i/o-encoding . u10683) (&i/o-decoding . u10682) (&i/o-port . u10681) (&i/o-file-does-not-exist . u10680) (&i/o-file-already-exists . u10679) (&i/o-file-is-read-only . u10678) (&i/o-file-protection . u10677) (&i/o-filename . u10676) (&i/o-invalid-position . u10675) (&i/o-write . u10674) (&i/o-read . u10673) (&i/o . u10672) (&undefined . u10671) (&syntax . u10670) (&lexical . u10669) (&implementation-restriction . u10668) (&non-continuable . u10667) (&who . u10666) (&irritants . u10665) (&assertion . u10664) (&violation . u10663) (&error . u10662) (&serious . u10661) (&warning . u10660) (&message . u10659) (&condition . u10658) (define-condition-type . u10657) (define-enumeration . u10656) (define-record-type . u10655) (parent-rtd . u10654) (nongenerative . u10653) (opaque . u10652) (sealed . u10651) (protocol . u10650) (parent . u10649) (immutable . u10648) (mutable . u10647) (fields . u10646) (error-handling-mode . u10645) (file-options . u10644) (buffer-mode . u10643) (eol-style . u10642) (guard . u10641) (unsyntax-splicing . u10638) (unsyntax . u10637) (unquote-splicing . u10636) (unquote . u10635) (_ . u10634) (else . u10633) (=> . u10632) (... . u10631) (assert . u10630) (endianness . u10629) (do . u10626) (cond . u10625) (let* . u10624) (let . u10623) (let*-values . u10622) (let-values . u10621) (identifier-syntax . u10620) (with-syntax . u10619) (quasisyntax . u10618) (quasiquote . u10617) (syntax-rules . u10616) (include . u10615) (record-constructor-descriptor . u10613) (record-type-descriptor . u10612) (case . u10611) (unless . u10609) (when . u10608) (or . u10607) (and . u10606) (if . u10605) (letrec* . u10604) (letrec . u10603) (case-lambda . u10601) (lambda . u10600) (syntax . u10599) (syntax-case . u10598) (quote . u10597) (letrec-syntax . u10595) (let-syntax . u10594) (set! . u10593) (import . u10592) (begin . u10591) (define-syntax . u10589) (define . u10588)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11305 '(psyntax null-environment-5) '() '() '() '() '((make-promise . u11068) (unquote-splicing . u10636) (unquote . u10635) (_ . u10634) (else . u10633) (=> . u10632) (... . u10631) (delay . u10628) (do . u10626) (cond . u10625) (let* . u10624) (let . u10623) (quasiquote . u10617) (syntax-rules . u10616) (case . u10611) (or . u10607) (and . u10606) (if . u10605) (letrec . u10603) (lambda . u10600) (quote . u10597) (letrec-syntax . u10595) (let-syntax . u10594) (set! . u10593) (begin . u10591) (define-syntax . u10589) (define . u10588)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11306 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . u11217) (string-ci>=? . u11216) (string-ci=? . u11215) (string-ci<? . u11214) (string-ci<=? . u11213) (char-whitespace? . u11212) (char-upper-case? . u11211) (char-numeric? . u11209) (char-lower-case? . u11208) (char-upcase . u11206) (char-downcase . u11203) (char-ci>? . u11202) (char-ci>=? . u11201) (char-ci=? . u11200) (char-ci<? . u11199) (char-ci<=? . u11198) (char-alphabetic? . u11197) (call-with-output-file . u11153) (call-with-input-file . u11152) (write-char . u11151) (write . u11150) (with-output-to-file . u11149) (with-input-from-file . u11148) (read-char . u11147) (read . u11146) (peek-char . u11145) (open-output-file . u11144) (open-input-file . u11143) (newline . u11142) (display . u11141) (close-output-port . u11140) (close-input-port . u11139) (eof-object . u11137) (current-output-port . u11135) (current-input-port . u11134) (output-port? . u11133) (input-port? . u11132) (scheme-report-environment . u2968) (quotient . u11074) (null-environment . u2966) (remainder . u11073) (modulo . u11072) (inexact->exact . u11071) (force . u11070) (exact->inexact . u11069) (make-promise . u11068) (string-fill! . u11066) (string-set! . u11065) (set-cdr! . u11064) (set-car! . u11063) (memv . u11057) (memq . u11056) (member . u11054) (assv . u11046) (assq . u11045) (assoc . u11043) (eval . u2972) (zero? . u10848) (vector? . u10847) (vector-set! . u10846) (vector-ref . u10845) (vector-length . u10843) (vector-fill! . u10841) (vector->list . u10840) (vector . u10839) (values . u10838) (truncate . u10837) (tan . u10836) (symbol? . u10835) (symbol->string . u10833) (substring . u10832) (string? . u10831) (string>? . u10830) (string>=? . u10829) (string=? . u10828) (string<? . u10827) (string<=? . u10826) (string-ref . u10825) (string-length . u10824) (string-copy . u10822) (string-append . u10821) (string->symbol . u10820) (string->number . u10819) (string->list . u10818) (string . u10817) (sqrt . u10816) (sin . u10815) (round . u10814) (reverse . u10813) (real? . u10812) (real-part . u10810) (rationalize . u10809) (rational? . u10808) (procedure? . u10806) (positive? . u10805) (pair? . u10804) (odd? . u10803) (numerator . u10802) (number? . u10801) (number->string . u10800) (not . u10798) (negative? . u10797) (min . u10795) (max . u10794) (map . u10793) (make-vector . u10792) (make-string . u10791) (make-rectangular . u10790) (make-polar . u10789) (magnitude . u10788) (log . u10787) (list? . u10786) (list-tail . u10785) (list-ref . u10784) (list->vector . u10783) (list->string . u10782) (list . u10781) (length . u10780) (lcm . u10779) (integer? . u10778) (integer->char . u10776) (inexact? . u10774) (imag-part . u10772) (gcd . u10771) (for-each . u10770) (floor . u10769) (expt . u10767) (exp . u10766) (exact? . u10765) (even? . u10762) (eqv? . u10760) (equal? . u10759) (eq? . u10758) (dynamic-wind . u10757) (denominator . u10750) (cos . u10749) (cons . u10748) (complex? . u10747) (char? . u10746) (char>? . u10745) (char>=? . u10744) (char=? . u10743) (char<? . u10742) (char<=? . u10741) (char->integer . u10740) (ceiling . u10739) (call-with-values . u10738) (call-with-current-continuation . u10736) (cddddr . u10735) (cdddar . u10734) (cddadr . u10733) (cddaar . u10732) (cdaddr . u10731) (cdadar . u10730) (cdaadr . u10729) (cdaaar . u10728) (cadddr . u10727) (caddar . u10726) (cadadr . u10725) (cadaar . u10724) (caaddr . u10723) (caadar . u10722) (caaadr . u10721) (caaaar . u10720) (cdddr . u10719) (cddar . u10718) (cdadr . u10717) (cdaar . u10716) (caddr . u10715) (cadar . u10714) (caadr . u10713) (caaar . u10712) (cddr . u10711) (cdar . u10710) (cadr . u10709) (caar . u10708) (cdr . u10707) (car . u10706) (boolean? . u10705) (atan . u10703) (asin . u10701) (apply . u10700) (append . u10699) (angle . u10698) (acos . u10697) (abs . u10696) (/ . u10695) (* . u10694) (- . u10693) (+ . u10692) (>= . u10691) (> . u10690) (= . u10689) (<= . u10688) (< . u10687) (unquote-splicing . u10636) (unquote . u10635) (else . u10633) (=> . u10632) (... . u10631) (delay . u10628) (do . u10626) (cond . u10625) (let* . u10624) (let . u10623) (quasiquote . u10617) (syntax-rules . u10616) (case . u10611) (or . u10607) (and . u10606) (if . u10605) (letrec . u10603) (lambda . u10600) (quote . u10597) (letrec-syntax . u10595) (let-syntax . u10594) (set! . u10593) (begin . u10591) (define-syntax . u10589) (define . u10588)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11307 '(psyntax modules) '() '() '() '() '((module . u10590)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11308 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11309 '(rnrs) '(6) '() '() '() '((regexp? . u11297) (string-upcase . u11225) (string-titlecase . u11224) (string-normalize-nfkd . u11223) (string-normalize-nfkc . u11222) (string-normalize-nfd . u11221) (string-normalize-nfc . u11220) (string-foldcase . u11219) (string-downcase . u11218) (string-ci>? . u11217) (string-ci>=? . u11216) (string-ci=? . u11215) (string-ci<? . u11214) (string-ci<=? . u11213) (char-whitespace? . u11212) (char-upper-case? . u11211) (char-title-case? . u11210) (char-numeric? . u11209) (char-lower-case? . u11208) (char-general-category . u11207) (char-upcase . u11206) (char-titlecase . u11205) (char-foldcase . u11204) (char-downcase . u11203) (char-ci>? . u11202) (char-ci>=? . u11201) (char-ci=? . u11200) (char-ci<? . u11199) (char-ci<=? . u11198) (char-alphabetic? . u11197) (make-variable-transformer . u2330) (identifier? . u3006) (generate-temporaries . u2986) (free-identifier=? . u2988) (syntax->datum . u3010) (datum->syntax . u3008) (bound-identifier=? . u2990) (record-type-descriptor? . u11196) (record-predicate . u11195) (record-mutator . u11194) (record-constructor . u11193) (record-accessor . u11192) (make-record-type-descriptor . u11191) (make-record-constructor-descriptor . u11190) (record? . u11189) (record-type-uid . u11188) (record-type-sealed? . u11187) (record-type-parent . u11186) (record-type-opaque? . u11185) (record-type-name . u11184) (record-type-generative? . u11183) (record-type-field-names . u11182) (record-rtd . u11181) (record-field-mutable? . u11180) (delete-file . u11179) (file-exists? . u11178) (vector-sort! . u11177) (vector-sort . u11176) (list-sort . u11175) (symbol-hash . u11174) (string-ci-hash . u11173) (string-hash . u11172) (equal-hash . u11171) (hashtable-equivalence-function . u11170) (make-hashtable . u11169) (hashtable-hash-function . u11168) (make-eqv-hashtable . u11167) (make-eq-hashtable . u11166) (hashtable? . u11165) (hashtable-update! . u11164) (hashtable-size . u11163) (hashtable-set! . u11162) (hashtable-ref . u11161) (hashtable-mutable? . u11160) (hashtable-keys . u11159) (hashtable-entries . u11158) (hashtable-delete! . u11157) (hashtable-copy . u11156) (hashtable-contains? . u11155) (hashtable-clear! . u11154) (call-with-output-file . u11153) (call-with-input-file . u11152) (write-char . u11151) (write . u11150) (with-output-to-file . u11149) (with-input-from-file . u11148) (read-char . u11147) (read . u11146) (peek-char . u11145) (open-output-file . u11144) (open-input-file . u11143) (newline . u11142) (display . u11141) (close-output-port . u11140) (close-input-port . u11139) (eof-object? . u11138) (eof-object . u11137) (current-error-port . u11136) (current-output-port . u11135) (current-input-port . u11134) (output-port? . u11133) (input-port? . u11132) (utf-8-codec . u11131) (utf-16-codec . u11130) (transcoder-error-handling-mode . u11129) (transcoder-eol-style . u11128) (transcoder-codec . u11127) (transcoded-port . u11126) (textual-port? . u11125) (string->bytevector . u11124) (standard-output-port . u11123) (standard-input-port . u11122) (standard-error-port . u11121) (set-port-position! . u11120) (put-u8 . u11119) (put-string . u11118) (put-datum . u11117) (put-char . u11116) (put-bytevector . u11115) (port? . u11114) (port-transcoder . u11113) (port-position . u11112) (port-has-set-port-position!? . u11111) (port-has-port-position? . u11110) (port-eof? . u11109) (output-port-buffer-mode . u11108) (open-string-output-port . u11107) (open-string-input-port . u11106) (open-file-output-port . u11105) (open-file-input/output-port . u11104) (open-file-input-port . u11103) (open-bytevector-output-port . u11102) (open-bytevector-input-port . u11101) (native-transcoder . u11100) (native-eol-style . u11099) (make-transcoder . u11098) (latin-1-codec . u11097) (make-i/o-write-error . u9817) (make-i/o-read-error . u9796) (make-i/o-port-error . u9975) (make-i/o-invalid-position-error . u9839) (make-i/o-filename-error . u9865) (make-i/o-file-protection-error . u9890) (make-i/o-file-is-read-only-error . u9911) (make-i/o-file-does-not-exist-error . u9953) (make-i/o-file-already-exists-error . u9932) (make-i/o-error . u9775) (make-i/o-encoding-error . u10022) (make-i/o-decoding-error . u10000) (make-custom-textual-output-port . u11096) (make-custom-textual-input/output-port . u11095) (make-custom-textual-input-port . u11094) (make-custom-binary-output-port . u11093) (make-custom-binary-input/output-port . u11092) (make-custom-binary-input-port . u11091) (make-bytevector . u11090) (lookahead-u8 . u11089) (lookahead-char . u11088) (i/o-write-error? . u9819) (i/o-read-error? . u9798) (i/o-port-error? . u9979) (i/o-invalid-position-error? . u9843) (i/o-filename-error? . u9869) (i/o-file-protection-error? . u9892) (i/o-file-is-read-only-error? . u9913) (i/o-file-does-not-exist-error? . u9955) (i/o-file-already-exists-error? . u9934) (i/o-error? . u9777) (i/o-error-position . u9845) (i/o-error-port . u9981) (i/o-error-filename . u9871) (i/o-encoding-error? . u10026) (i/o-encoding-error-char . u10028) (i/o-decoding-error? . u10002) (get-u8 . u11087) (get-string-n! . u11086) (get-string-n . u11085) (get-string-all . u11084) (get-line . u11083) (get-datum . u11082) (get-char . u11081) (get-bytevector-some . u11080) (get-bytevector-n! . u11079) (get-bytevector-n . u11078) (get-bytevector-all . u11077) (flush-output-port . u11076) (close-port . u11075) (exit . u11067) (command-line . u10337) (remove . u11062) (remv . u11061) (remp . u11060) (remq . u11059) (partition . u11058) (memv . u11057) (memq . u11056) (memp . u11055) (member . u11054) (exists . u11053) (for-all . u11052) (fold-right . u11051) (fold-left . u11050) (find . u11049) (filter . u11048) (cons* . u11047) (assv . u11046) (assq . u11045) (assp . u11044) (assoc . u11043) (call-with-string-output-port . u11042) (call-with-port . u11041) (call-with-bytevector-output-port . u11040) (bytevector->string . u11039) (buffer-mode? . u11038) (binary-port? . u11037) (with-exception-handler . u11036) (raise-continuable . u11035) (raise . u11034) (make-enumeration . u11033) (enum-set=? . u11032) (enum-set-universe . u11031) (enum-set-union . u11030) (enum-set-subset? . u11029) (enum-set-projection . u11028) (enum-set-member? . u11027) (enum-set-intersection . u11026) (enum-set-indexer . u11025) (enum-set-difference . u11024) (enum-set-constructor . u11023) (enum-set-complement . u11022) (enum-set->list . u11021) (who-condition? . u9639) (warning? . u9505) (violation? . u9568) (undefined-violation? . u9756) (syntax-violation? . u9731) (syntax-violation-subform . u9735) (syntax-violation-form . u9733) (syntax-violation . u3004) (simple-conditions . u11020) (serious-condition? . u9526) (non-continuable-violation? . u9662) (message-condition? . u9482) (make-who-condition . u9635) (make-warning . u9503) (make-violation . u9566) (make-undefined-violation . u9754) (make-syntax-violation . u9725) (make-serious-condition . u9524) (make-non-continuable-violation . u9660) (make-message-condition . u9478) (make-lexical-violation . u9702) (make-irritants-condition . u9609) (make-implementation-restriction-violation . u9681) (make-error . u9545) (make-assertion-violation . u9587) (lexical-violation? . u9704) (irritants-condition? . u9613) (implementation-restriction-violation? . u9683) (error? . u9547) (condition-who . u9641) (condition-predicate . u11019) (condition-message . u9484) (condition-irritants . u9615) (condition-accessor . u11018) (condition . u11017) (assertion-violation? . u9589) (condition? . u11016) (utf32->string . u11015) (utf16->string . u11014) (utf8->string . u11013) (uint-list->bytevector . u11012) (u8-list->bytevector . u11011) (string->utf8 . u11010) (string->utf32 . u11009) (string->utf16 . u11008) (sint-list->bytevector . u11007) (native-endianness . u11006) (bytevector? . u11005) (bytevector=? . u11004) (bytevector-uint-set! . u11003) (bytevector-uint-ref . u11002) (bytevector-u8-set! . u11001) (bytevector-u8-ref . u11000) (bytevector-u64-set! . u10999) (bytevector-u64-ref . u10998) (bytevector-u64-native-set! . u10997) (bytevector-u64-native-ref . u10996) (bytevector-u32-set! . u10995) (bytevector-u32-ref . u10994) (bytevector-u32-native-set! . u10993) (bytevector-u32-native-ref . u10992) (bytevector-u16-set! . u10991) (bytevector-u16-ref . u10990) (bytevector-u16-native-set! . u10989) (bytevector-u16-native-ref . u10988) (bytevector-sint-set! . u10987) (bytevector-sint-ref . u10986) (bytevector-s8-set! . u10985) (bytevector-s8-ref . u10984) (bytevector-s64-set! . u10983) (bytevector-s64-ref . u10982) (bytevector-s64-native-set! . u10981) (bytevector-s64-native-ref . u10980) (bytevector-s32-set! . u10979) (bytevector-s32-ref . u10978) (bytevector-s32-native-set! . u10977) (bytevector-s32-native-ref . u10976) (bytevector-s16-set! . u10975) (bytevector-s16-ref . u10974) (bytevector-s16-native-set! . u10973) (bytevector-s16-native-ref . u10972) (bytevector-length . u10971) (bytevector-ieee-single-ref . u10970) (bytevector-ieee-single-set! . u10969) (bytevector-ieee-single-native-set! . u10968) (bytevector-ieee-single-native-ref . u10967) (bytevector-ieee-double-set! . u10966) (bytevector-ieee-double-ref . u10965) (bytevector-ieee-double-native-set! . u10964) (bytevector-ieee-double-native-ref . u10963) (bytevector-fill! . u10962) (bytevector-copy! . u10961) (bytevector-copy . u10960) (bytevector->uint-list . u10959) (bytevector->u8-list . u10958) (bytevector->sint-list . u10957) (no-nans-violation? . u10070) (no-infinities-violation? . u10049) (make-no-nans-violation . u10068) (make-no-infinities-violation . u10047) (real->flonum . u10956) (flzero? . u10955) (fltruncate . u10954) (fltan . u10953) (flsqrt . u10952) (flsin . u10951) (flround . u10950) (flpositive? . u10949) (flonum? . u10948) (flodd? . u10947) (flnumerator . u10946) (flnegative? . u10945) (flnan? . u10944) (flmod0 . u10943) (flmod . u10942) (flmin . u10941) (flmax . u10940) (fllog . u10939) (flinteger? . u10938) (flinfinite? . u10937) (flfloor . u10936) (flfinite? . u10935) (flexpt . u10934) (flexp . u10933) (fleven? . u10932) (fldiv0-and-mod0 . u10931) (fldiv0 . u10930) (fldiv-and-mod . u10929) (fldiv . u10928) (fldenominator . u10927) (flcos . u10926) (flceiling . u10925) (flatan . u10924) (flasin . u10923) (flacos . u10922) (flabs . u10921) (fl>? . u10920) (fl>=? . u10919) (fl=? . u10918) (fl<? . u10917) (fl<=? . u10916) (fl/ . u10915) (fl- . u10914) (fl+ . u10913) (fl* . u10912) (fixnum->flonum . u10911) (fxzero? . u10910) (fxxor . u10909) (fxrotate-bit-field . u10908) (fxreverse-bit-field . u10907) (fxpositive? . u10906) (fxodd? . u10905) (fxnot . u10904) (fxnegative? . u10903) (fxmod0 . u10902) (fxmod . u10901) (fxmin . u10900) (fxmax . u10899) (fxlength . u10898) (fxior . u10897) (fxif . u10896) (fxfirst-bit-set . u10895) (fxeven? . u10894) (fxdiv0-and-mod0 . u10893) (fxdiv0 . u10892) (fxdiv-and-mod . u10891) (fxdiv . u10890) (fxcopy-bit-field . u10889) (fxcopy-bit . u10888) (fxbit-set? . u10887) (fxbit-field . u10886) (fxbit-count . u10885) (fxarithmetic-shift-right . u10884) (fxarithmetic-shift-left . u10883) (fxarithmetic-shift . u10882) (fxand . u10881) (fx>? . u10880) (fx>=? . u10879) (fx=? . u10878) (fx<? . u10877) (fx<=? . u10876) (fx-/carry . u10875) (fx- . u10874) (fx+/carry . u10873) (fx+ . u10872) (fx*/carry . u10871) (fx* . u10870) (greatest-fixnum . u10869) (least-fixnum . u10868) (fixnum-width . u10867) (fixnum? . u10866) (bitwise-rotate-bit-field . u10865) (bitwise-reverse-bit-field . u10864) (bitwise-length . u10863) (bitwise-if . u10862) (bitwise-first-bit-set . u10861) (bitwise-copy-bit-field . u10860) (bitwise-copy-bit . u10859) (bitwise-bit-set? . u10858) (bitwise-bit-field . u10857) (bitwise-bit-count . u10856) (bitwise-xor . u10855) (bitwise-ior . u10854) (bitwise-and . u10853) (bitwise-not . u10852) (bitwise-arithmetic-shift-right . u10851) (bitwise-arithmetic-shift-left . u10850) (bitwise-arithmetic-shift . u10849) (zero? . u10848) (vector? . u10847) (vector-set! . u10846) (vector-ref . u10845) (vector-map . u10844) (vector-length . u10843) (vector-for-each . u10842) (vector-fill! . u10841) (vector->list . u10840) (vector . u10839) (values . u10838) (truncate . u10837) (tan . u10836) (symbol? . u10835) (symbol=? . u10834) (symbol->string . u10833) (substring . u10832) (string? . u10831) (string>? . u10830) (string>=? . u10829) (string=? . u10828) (string<? . u10827) (string<=? . u10826) (string-ref . u10825) (string-length . u10824) (string-for-each . u10823) (string-copy . u10822) (string-append . u10821) (string->symbol . u10820) (string->number . u10819) (string->list . u10818) (string . u10817) (sqrt . u10816) (sin . u10815) (round . u10814) (reverse . u10813) (real? . u10812) (real-valued? . u10811) (real-part . u10810) (rationalize . u10809) (rational? . u10808) (rational-valued? . u10807) (procedure? . u10806) (positive? . u10805) (pair? . u10804) (odd? . u10803) (numerator . u10802) (number? . u10801) (number->string . u10800) (null? . u10799) (not . u10798) (negative? . u10797) (nan? . u10796) (min . u10795) (max . u10794) (map . u10793) (make-vector . u10792) (make-string . u10791) (make-rectangular . u10790) (make-polar . u10789) (magnitude . u10788) (log . u10787) (list? . u10786) (list-tail . u10785) (list-ref . u10784) (list->vector . u10783) (list->string . u10782) (list . u10781) (length . u10780) (lcm . u10779) (integer? . u10778) (integer-valued? . u10777) (integer->char . u10776) (infinite? . u10775) (inexact? . u10774) (inexact . u10773) (imag-part . u10772) (gcd . u10771) (for-each . u10770) (floor . u10769) (finite? . u10768) (expt . u10767) (exp . u10766) (exact? . u10765) (exact-integer-sqrt . u10764) (exact . u10763) (even? . u10762) (error . u10761) (eqv? . u10760) (equal? . u10759) (eq? . u10758) (dynamic-wind . u10757) (div0-and-mod0 . u10756) (mod0 . u10755) (div0 . u10754) (div-and-mod . u10753) (mod . u10752) (div . u10751) (denominator . u10750) (cos . u10749) (cons . u10748) (complex? . u10747) (char? . u10746) (char>? . u10745) (char>=? . u10744) (char=? . u10743) (char<? . u10742) (char<=? . u10741) (char->integer . u10740) (ceiling . u10739) (call-with-values . u10738) (call/cc . u10737) (call-with-current-continuation . u10736) (cddddr . u10735) (cdddar . u10734) (cddadr . u10733) (cddaar . u10732) (cdaddr . u10731) (cdadar . u10730) (cdaadr . u10729) (cdaaar . u10728) (cadddr . u10727) (caddar . u10726) (cadadr . u10725) (cadaar . u10724) (caaddr . u10723) (caadar . u10722) (caaadr . u10721) (caaaar . u10720) (cdddr . u10719) (cddar . u10718) (cdadr . u10717) (cdaar . u10716) (caddr . u10715) (cadar . u10714) (caadr . u10713) (caaar . u10712) (cddr . u10711) (cdar . u10710) (cadr . u10709) (caar . u10708) (cdr . u10707) (car . u10706) (boolean? . u10705) (boolean=? . u10704) (atan . u10703) (assertion-violation . u10702) (asin . u10701) (apply . u10700) (append . u10699) (angle . u10698) (acos . u10697) (abs . u10696) (/ . u10695) (* . u10694) (- . u10693) (+ . u10692) (>= . u10691) (> . u10690) (= . u10689) (<= . u10688) (< . u10687) (&no-nans . u10685) (&no-infinities . u10684) (&i/o-encoding . u10683) (&i/o-decoding . u10682) (&i/o-port . u10681) (&i/o-file-does-not-exist . u10680) (&i/o-file-already-exists . u10679) (&i/o-file-is-read-only . u10678) (&i/o-file-protection . u10677) (&i/o-filename . u10676) (&i/o-invalid-position . u10675) (&i/o-write . u10674) (&i/o-read . u10673) (&i/o . u10672) (&undefined . u10671) (&syntax . u10670) (&lexical . u10669) (&implementation-restriction . u10668) (&non-continuable . u10667) (&who . u10666) (&irritants . u10665) (&assertion . u10664) (&violation . u10663) (&error . u10662) (&serious . u10661) (&warning . u10660) (&message . u10659) (&condition . u10658) (define-condition-type . u10657) (define-enumeration . u10656) (define-record-type . u10655) (parent-rtd . u10654) (nongenerative . u10653) (opaque . u10652) (sealed . u10651) (protocol . u10650) (parent . u10649) (immutable . u10648) (mutable . u10647) (fields . u10646) (error-handling-mode . u10645) (file-options . u10644) (buffer-mode . u10643) (eol-style . u10642) (guard . u10641) (unsyntax-splicing . u10638) (unsyntax . u10637) (unquote-splicing . u10636) (unquote . u10635) (_ . u10634) (else . u10633) (=> . u10632) (... . u10631) (assert . u10630) (endianness . u10629) (do . u10626) (cond . u10625) (let* . u10624) (let . u10623) (let*-values . u10622) (let-values . u10621) (identifier-syntax . u10620) (with-syntax . u10619) (quasisyntax . u10618) (quasiquote . u10617) (syntax-rules . u10616) (record-constructor-descriptor . u10613) (record-type-descriptor . u10612) (case . u10611) (unless . u10609) (when . u10608) (or . u10607) (and . u10606) (if . u10605) (letrec* . u10604) (letrec . u10603) (case-lambda . u10601) (lambda . u10600) (syntax . u10599) (syntax-case . u10598) (quote . u10597) (letrec-syntax . u10595) (let-syntax . u10594) (set! . u10593) (begin . u10591) (define-syntax . u10589) (define . u10588)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11310 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . u2968) (quotient . u11074) (null-environment . u2966) (remainder . u11073) (modulo . u11072) (inexact->exact . u11071) (force . u11070) (exact->inexact . u11069) (make-promise . u11068) (delay . u10628)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11311 '(rnrs control) '(6) '() '() '() '((do . u10626) (unless . u10609) (when . u10608) (case-lambda . u10601)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11312 '(rnrs eval) '(6) '() '() '() '((eval . u2972) (environment . u2964)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11313 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . u11064) (set-car! . u11063)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11314 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . u11066) (string-set! . u11065)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11315 '(rnrs programs) '(6) '() '() '() '((exit . u11067) (command-line . u10337)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11316 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . u2330) (identifier? . u3006) (generate-temporaries . u2986) (free-identifier=? . u2988) (syntax->datum . u3010) (datum->syntax . u3008) (bound-identifier=? . u2990) (syntax-violation . u3004) (unsyntax-splicing . u10638) (unsyntax . u10637) (_ . u10634) (... . u10631) (with-syntax . u10619) (quasisyntax . u10618) (syntax . u10599) (syntax-case . u10598)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11317 '(rnrs files) '(6) '() '() '() '((delete-file . u11179) (file-exists? . u11178) (make-i/o-write-error . u9817) (make-i/o-read-error . u9796) (make-i/o-port-error . u9975) (make-i/o-invalid-position-error . u9839) (make-i/o-filename-error . u9865) (make-i/o-file-protection-error . u9890) (make-i/o-file-is-read-only-error . u9911) (make-i/o-file-does-not-exist-error . u9953) (make-i/o-file-already-exists-error . u9932) (make-i/o-error . u9775) (i/o-write-error? . u9819) (i/o-read-error? . u9798) (i/o-port-error? . u9979) (i/o-invalid-position-error? . u9843) (i/o-filename-error? . u9869) (i/o-file-protection-error? . u9892) (i/o-file-is-read-only-error? . u9913) (i/o-file-does-not-exist-error? . u9955) (i/o-file-already-exists-error? . u9934) (i/o-error? . u9777) (i/o-error-position . u9845) (i/o-error-port . u9981) (i/o-error-filename . u9871) (&i/o-port . u10681) (&i/o-file-does-not-exist . u10680) (&i/o-file-already-exists . u10679) (&i/o-file-is-read-only . u10678) (&i/o-file-protection . u10677) (&i/o-filename . u10676) (&i/o-invalid-position . u10675) (&i/o-write . u10674) (&i/o-read . u10673) (&i/o . u10672)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11318 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . u11177) (vector-sort . u11176) (list-sort . u11175)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11319 '(rnrs base) '(6) '() '() '() '((zero? . u10848) (vector? . u10847) (vector-set! . u10846) (vector-ref . u10845) (vector-map . u10844) (vector-length . u10843) (vector-for-each . u10842) (vector-fill! . u10841) (vector->list . u10840) (vector . u10839) (values . u10838) (truncate . u10837) (tan . u10836) (symbol? . u10835) (symbol=? . u10834) (symbol->string . u10833) (substring . u10832) (string? . u10831) (string>? . u10830) (string>=? . u10829) (string=? . u10828) (string<? . u10827) (string<=? . u10826) (string-ref . u10825) (string-length . u10824) (string-for-each . u10823) (string-copy . u10822) (string-append . u10821) (string->symbol . u10820) (string->number . u10819) (string->list . u10818) (string . u10817) (sqrt . u10816) (sin . u10815) (round . u10814) (reverse . u10813) (real? . u10812) (real-valued? . u10811) (real-part . u10810) (rationalize . u10809) (rational? . u10808) (rational-valued? . u10807) (procedure? . u10806) (positive? . u10805) (pair? . u10804) (odd? . u10803) (numerator . u10802) (number? . u10801) (number->string . u10800) (null? . u10799) (not . u10798) (negative? . u10797) (nan? . u10796) (min . u10795) (max . u10794) (map . u10793) (make-vector . u10792) (make-string . u10791) (make-rectangular . u10790) (make-polar . u10789) (magnitude . u10788) (log . u10787) (list? . u10786) (list-tail . u10785) (list-ref . u10784) (list->vector . u10783) (list->string . u10782) (list . u10781) (length . u10780) (lcm . u10779) (integer? . u10778) (integer-valued? . u10777) (integer->char . u10776) (infinite? . u10775) (inexact? . u10774) (inexact . u10773) (imag-part . u10772) (gcd . u10771) (for-each . u10770) (floor . u10769) (finite? . u10768) (expt . u10767) (exp . u10766) (exact? . u10765) (exact-integer-sqrt . u10764) (exact . u10763) (even? . u10762) (error . u10761) (eqv? . u10760) (equal? . u10759) (eq? . u10758) (dynamic-wind . u10757) (div0-and-mod0 . u10756) (mod0 . u10755) (div0 . u10754) (div-and-mod . u10753) (mod . u10752) (div . u10751) (denominator . u10750) (cos . u10749) (cons . u10748) (complex? . u10747) (char? . u10746) (char>? . u10745) (char>=? . u10744) (char=? . u10743) (char<? . u10742) (char<=? . u10741) (char->integer . u10740) (ceiling . u10739) (call-with-values . u10738) (call/cc . u10737) (call-with-current-continuation . u10736) (cddddr . u10735) (cdddar . u10734) (cddadr . u10733) (cddaar . u10732) (cdaddr . u10731) (cdadar . u10730) (cdaadr . u10729) (cdaaar . u10728) (cadddr . u10727) (caddar . u10726) (cadadr . u10725) (cadaar . u10724) (caaddr . u10723) (caadar . u10722) (caaadr . u10721) (caaaar . u10720) (cdddr . u10719) (cddar . u10718) (cdadr . u10717) (cdaar . u10716) (caddr . u10715) (cadar . u10714) (caadr . u10713) (caaar . u10712) (cddr . u10711) (cdar . u10710) (cadr . u10709) (caar . u10708) (cdr . u10707) (car . u10706) (boolean? . u10705) (boolean=? . u10704) (atan . u10703) (assertion-violation . u10702) (asin . u10701) (apply . u10700) (append . u10699) (angle . u10698) (acos . u10697) (abs . u10696) (/ . u10695) (* . u10694) (- . u10693) (+ . u10692) (>= . u10691) (> . u10690) (= . u10689) (<= . u10688) (< . u10687) (unquote-splicing . u10636) (unquote . u10635) (_ . u10634) (else . u10633) (=> . u10632) (... . u10631) (assert . u10630) (cond . u10625) (let* . u10624) (let . u10623) (let*-values . u10622) (let-values . u10621) (identifier-syntax . u10620) (quasiquote . u10617) (syntax-rules . u10616) (case . u10611) (or . u10607) (and . u10606) (if . u10605) (letrec* . u10604) (letrec . u10603) (lambda . u10600) (quote . u10597) (letrec-syntax . u10595) (let-syntax . u10594) (set! . u10593) (begin . u10591) (define-syntax . u10589) (define . u10588)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11320 '(rnrs lists) '(6) '() '() '() '((remove . u11062) (remv . u11061) (remp . u11060) (remq . u11059) (partition . u11058) (memv . u11057) (memq . u11056) (memp . u11055) (member . u11054) (exists . u11053) (for-all . u11052) (fold-right . u11051) (fold-left . u11050) (find . u11049) (filter . u11048) (cons* . u11047) (assv . u11046) (assq . u11045) (assp . u11044) (assoc . u11043)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11321 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . u11153) (call-with-input-file . u11152) (write-char . u11151) (write . u11150) (with-output-to-file . u11149) (with-input-from-file . u11148) (read-char . u11147) (read . u11146) (peek-char . u11145) (open-output-file . u11144) (open-input-file . u11143) (newline . u11142) (display . u11141) (close-output-port . u11140) (close-input-port . u11139) (eof-object? . u11138) (eof-object . u11137) (current-error-port . u11136) (current-output-port . u11135) (current-input-port . u11134) (output-port? . u11133) (input-port? . u11132) (make-i/o-write-error . u9817) (make-i/o-read-error . u9796) (make-i/o-port-error . u9975) (make-i/o-invalid-position-error . u9839) (make-i/o-filename-error . u9865) (make-i/o-file-protection-error . u9890) (make-i/o-file-is-read-only-error . u9911) (make-i/o-file-does-not-exist-error . u9953) (make-i/o-file-already-exists-error . u9932) (make-i/o-error . u9775) (i/o-write-error? . u9819) (i/o-read-error? . u9798) (i/o-port-error? . u9979) (i/o-invalid-position-error? . u9843) (i/o-filename-error? . u9869) (i/o-file-protection-error? . u9892) (i/o-file-is-read-only-error? . u9913) (i/o-file-does-not-exist-error? . u9955) (i/o-file-already-exists-error? . u9934) (i/o-error? . u9777) (i/o-error-position . u9845) (i/o-error-port . u9981) (i/o-error-filename . u9871) (&i/o-port . u10681) (&i/o-file-does-not-exist . u10680) (&i/o-file-already-exists . u10679) (&i/o-file-is-read-only . u10678) (&i/o-file-protection . u10677) (&i/o-filename . u10676) (&i/o-invalid-position . u10675) (&i/o-write . u10674) (&i/o-read . u10673) (&i/o . u10672)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11322 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . u11090) (utf32->string . u11015) (utf16->string . u11014) (utf8->string . u11013) (uint-list->bytevector . u11012) (u8-list->bytevector . u11011) (string->utf8 . u11010) (string->utf32 . u11009) (string->utf16 . u11008) (sint-list->bytevector . u11007) (native-endianness . u11006) (bytevector? . u11005) (bytevector=? . u11004) (bytevector-uint-set! . u11003) (bytevector-uint-ref . u11002) (bytevector-u8-set! . u11001) (bytevector-u8-ref . u11000) (bytevector-u64-set! . u10999) (bytevector-u64-ref . u10998) (bytevector-u64-native-set! . u10997) (bytevector-u64-native-ref . u10996) (bytevector-u32-set! . u10995) (bytevector-u32-ref . u10994) (bytevector-u32-native-set! . u10993) (bytevector-u32-native-ref . u10992) (bytevector-u16-set! . u10991) (bytevector-u16-ref . u10990) (bytevector-u16-native-set! . u10989) (bytevector-u16-native-ref . u10988) (bytevector-sint-set! . u10987) (bytevector-sint-ref . u10986) (bytevector-s8-set! . u10985) (bytevector-s8-ref . u10984) (bytevector-s64-set! . u10983) (bytevector-s64-ref . u10982) (bytevector-s64-native-set! . u10981) (bytevector-s64-native-ref . u10980) (bytevector-s32-set! . u10979) (bytevector-s32-ref . u10978) (bytevector-s32-native-set! . u10977) (bytevector-s32-native-ref . u10976) (bytevector-s16-set! . u10975) (bytevector-s16-ref . u10974) (bytevector-s16-native-set! . u10973) (bytevector-s16-native-ref . u10972) (bytevector-length . u10971) (bytevector-ieee-single-ref . u10970) (bytevector-ieee-single-set! . u10969) (bytevector-ieee-single-native-set! . u10968) (bytevector-ieee-single-native-ref . u10967) (bytevector-ieee-double-set! . u10966) (bytevector-ieee-double-ref . u10965) (bytevector-ieee-double-native-set! . u10964) (bytevector-ieee-double-native-ref . u10963) (bytevector-fill! . u10962) (bytevector-copy! . u10961) (bytevector-copy . u10960) (bytevector->uint-list . u10959) (bytevector->u8-list . u10958) (bytevector->sint-list . u10957) (endianness . u10629)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11323 '(rnrs unicode) '(6) '() '() '() '((string-upcase . u11225) (string-titlecase . u11224) (string-normalize-nfkd . u11223) (string-normalize-nfkc . u11222) (string-normalize-nfd . u11221) (string-normalize-nfc . u11220) (string-foldcase . u11219) (string-downcase . u11218) (string-ci>? . u11217) (string-ci>=? . u11216) (string-ci=? . u11215) (string-ci<? . u11214) (string-ci<=? . u11213) (char-whitespace? . u11212) (char-upper-case? . u11211) (char-title-case? . u11210) (char-numeric? . u11209) (char-lower-case? . u11208) (char-general-category . u11207) (char-upcase . u11206) (char-titlecase . u11205) (char-foldcase . u11204) (char-downcase . u11203) (char-ci>? . u11202) (char-ci>=? . u11201) (char-ci=? . u11200) (char-ci<? . u11199) (char-ci<=? . u11198) (char-alphabetic? . u11197)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11324 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . u11036) (raise-continuable . u11035) (raise . u11034) (guard . u10641) (else . u10633) (=> . u10632)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11325 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . u10865) (bitwise-reverse-bit-field . u10864) (bitwise-length . u10863) (bitwise-if . u10862) (bitwise-first-bit-set . u10861) (bitwise-copy-bit-field . u10860) (bitwise-copy-bit . u10859) (bitwise-bit-set? . u10858) (bitwise-bit-field . u10857) (bitwise-bit-count . u10856) (bitwise-xor . u10855) (bitwise-ior . u10854) (bitwise-and . u10853) (bitwise-not . u10852) (bitwise-arithmetic-shift-right . u10851) (bitwise-arithmetic-shift-left . u10850) (bitwise-arithmetic-shift . u10849)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11326 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . u10910) (fxxor . u10909) (fxrotate-bit-field . u10908) (fxreverse-bit-field . u10907) (fxpositive? . u10906) (fxodd? . u10905) (fxnot . u10904) (fxnegative? . u10903) (fxmod0 . u10902) (fxmod . u10901) (fxmin . u10900) (fxmax . u10899) (fxlength . u10898) (fxior . u10897) (fxif . u10896) (fxfirst-bit-set . u10895) (fxeven? . u10894) (fxdiv0-and-mod0 . u10893) (fxdiv0 . u10892) (fxdiv-and-mod . u10891) (fxdiv . u10890) (fxcopy-bit-field . u10889) (fxcopy-bit . u10888) (fxbit-set? . u10887) (fxbit-field . u10886) (fxbit-count . u10885) (fxarithmetic-shift-right . u10884) (fxarithmetic-shift-left . u10883) (fxarithmetic-shift . u10882) (fxand . u10881) (fx>? . u10880) (fx>=? . u10879) (fx=? . u10878) (fx<? . u10877) (fx<=? . u10876) (fx-/carry . u10875) (fx- . u10874) (fx+/carry . u10873) (fx+ . u10872) (fx*/carry . u10871) (fx* . u10870) (greatest-fixnum . u10869) (least-fixnum . u10868) (fixnum-width . u10867) (fixnum? . u10866)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11327 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . u10070) (no-infinities-violation? . u10049) (make-no-nans-violation . u10068) (make-no-infinities-violation . u10047) (real->flonum . u10956) (flzero? . u10955) (fltruncate . u10954) (fltan . u10953) (flsqrt . u10952) (flsin . u10951) (flround . u10950) (flpositive? . u10949) (flonum? . u10948) (flodd? . u10947) (flnumerator . u10946) (flnegative? . u10945) (flnan? . u10944) (flmod0 . u10943) (flmod . u10942) (flmin . u10941) (flmax . u10940) (fllog . u10939) (flinteger? . u10938) (flinfinite? . u10937) (flfloor . u10936) (flfinite? . u10935) (flexpt . u10934) (flexp . u10933) (fleven? . u10932) (fldiv0-and-mod0 . u10931) (fldiv0 . u10930) (fldiv-and-mod . u10929) (fldiv . u10928) (fldenominator . u10927) (flcos . u10926) (flceiling . u10925) (flatan . u10924) (flasin . u10923) (flacos . u10922) (flabs . u10921) (fl>? . u10920) (fl>=? . u10919) (fl=? . u10918) (fl<? . u10917) (fl<=? . u10916) (fl/ . u10915) (fl- . u10914) (fl+ . u10913) (fl* . u10912) (fixnum->flonum . u10911) (&no-nans . u10685) (&no-infinities . u10684)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11328 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . u11174) (string-ci-hash . u11173) (string-hash . u11172) (equal-hash . u11171) (hashtable-equivalence-function . u11170) (make-hashtable . u11169) (hashtable-hash-function . u11168) (make-eqv-hashtable . u11167) (make-eq-hashtable . u11166) (hashtable? . u11165) (hashtable-update! . u11164) (hashtable-size . u11163) (hashtable-set! . u11162) (hashtable-ref . u11161) (hashtable-mutable? . u11160) (hashtable-keys . u11159) (hashtable-entries . u11158) (hashtable-delete! . u11157) (hashtable-copy . u11156) (hashtable-contains? . u11155) (hashtable-clear! . u11154)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11329 '(rnrs io ports) '(6) '() '() '() '((eof-object? . u11138) (eof-object . u11137) (current-error-port . u11136) (current-output-port . u11135) (current-input-port . u11134) (output-port? . u11133) (input-port? . u11132) (utf-8-codec . u11131) (utf-16-codec . u11130) (transcoder-error-handling-mode . u11129) (transcoder-eol-style . u11128) (transcoder-codec . u11127) (transcoded-port . u11126) (textual-port? . u11125) (string->bytevector . u11124) (standard-output-port . u11123) (standard-input-port . u11122) (standard-error-port . u11121) (set-port-position! . u11120) (put-u8 . u11119) (put-string . u11118) (put-datum . u11117) (put-char . u11116) (put-bytevector . u11115) (port? . u11114) (port-transcoder . u11113) (port-position . u11112) (port-has-set-port-position!? . u11111) (port-has-port-position? . u11110) (port-eof? . u11109) (output-port-buffer-mode . u11108) (open-string-output-port . u11107) (open-string-input-port . u11106) (open-file-output-port . u11105) (open-file-input/output-port . u11104) (open-file-input-port . u11103) (open-bytevector-output-port . u11102) (open-bytevector-input-port . u11101) (native-transcoder . u11100) (native-eol-style . u11099) (make-transcoder . u11098) (latin-1-codec . u11097) (make-i/o-write-error . u9817) (make-i/o-read-error . u9796) (make-i/o-port-error . u9975) (make-i/o-invalid-position-error . u9839) (make-i/o-filename-error . u9865) (make-i/o-file-protection-error . u9890) (make-i/o-file-is-read-only-error . u9911) (make-i/o-file-does-not-exist-error . u9953) (make-i/o-file-already-exists-error . u9932) (make-i/o-error . u9775) (make-i/o-encoding-error . u10022) (make-i/o-decoding-error . u10000) (make-custom-textual-output-port . u11096) (make-custom-textual-input/output-port . u11095) (make-custom-textual-input-port . u11094) (make-custom-binary-output-port . u11093) (make-custom-binary-input/output-port . u11092) (make-custom-binary-input-port . u11091) (lookahead-u8 . u11089) (lookahead-char . u11088) (i/o-write-error? . u9819) (i/o-read-error? . u9798) (i/o-port-error? . u9979) (i/o-invalid-position-error? . u9843) (i/o-filename-error? . u9869) (i/o-file-protection-error? . u9892) (i/o-file-is-read-only-error? . u9913) (i/o-file-does-not-exist-error? . u9955) (i/o-file-already-exists-error? . u9934) (i/o-error? . u9777) (i/o-error-position . u9845) (i/o-error-port . u9981) (i/o-error-filename . u9871) (i/o-encoding-error? . u10026) (i/o-encoding-error-char . u10028) (i/o-decoding-error? . u10002) (get-u8 . u11087) (get-string-n! . u11086) (get-string-n . u11085) (get-string-all . u11084) (get-line . u11083) (get-datum . u11082) (get-char . u11081) (get-bytevector-some . u11080) (get-bytevector-n! . u11079) (get-bytevector-n . u11078) (get-bytevector-all . u11077) (flush-output-port . u11076) (close-port . u11075) (call-with-string-output-port . u11042) (call-with-port . u11041) (call-with-bytevector-output-port . u11040) (bytevector->string . u11039) (buffer-mode? . u11038) (binary-port? . u11037) (&i/o-encoding . u10683) (&i/o-decoding . u10682) (&i/o-port . u10681) (&i/o-file-does-not-exist . u10680) (&i/o-file-already-exists . u10679) (&i/o-file-is-read-only . u10678) (&i/o-file-protection . u10677) (&i/o-filename . u10676) (&i/o-invalid-position . u10675) (&i/o-write . u10674) (&i/o-read . u10673) (&i/o . u10672) (error-handling-mode . u10645) (file-options . u10644) (buffer-mode . u10643) (eol-style . u10642)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11330 '(rnrs enums) '(6) '() '() '() '((make-enumeration . u11033) (enum-set=? . u11032) (enum-set-universe . u11031) (enum-set-union . u11030) (enum-set-subset? . u11029) (enum-set-projection . u11028) (enum-set-member? . u11027) (enum-set-intersection . u11026) (enum-set-indexer . u11025) (enum-set-difference . u11024) (enum-set-constructor . u11023) (enum-set-complement . u11022) (enum-set->list . u11021) (define-enumeration . u10656)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11331 '(rnrs conditions) '(6) '() '() '() '((who-condition? . u9639) (warning? . u9505) (violation? . u9568) (undefined-violation? . u9756) (syntax-violation? . u9731) (syntax-violation-subform . u9735) (syntax-violation-form . u9733) (syntax-violation . u3004) (simple-conditions . u11020) (serious-condition? . u9526) (non-continuable-violation? . u9662) (message-condition? . u9482) (make-who-condition . u9635) (make-warning . u9503) (make-violation . u9566) (make-undefined-violation . u9754) (make-syntax-violation . u9725) (make-serious-condition . u9524) (make-non-continuable-violation . u9660) (make-message-condition . u9478) (make-lexical-violation . u9702) (make-irritants-condition . u9609) (make-implementation-restriction-violation . u9681) (make-error . u9545) (make-assertion-violation . u9587) (lexical-violation? . u9704) (irritants-condition? . u9613) (implementation-restriction-violation? . u9683) (error? . u9547) (condition-who . u9641) (condition-predicate . u11019) (condition-message . u9484) (condition-irritants . u9615) (condition-accessor . u11018) (condition . u11017) (assertion-violation? . u9589) (condition? . u11016) (&undefined . u10671) (&syntax . u10670) (&lexical . u10669) (&implementation-restriction . u10668) (&non-continuable . u10667) (&who . u10666) (&irritants . u10665) (&assertion . u10664) (&violation . u10663) (&error . u10662) (&serious . u10661) (&warning . u10660) (&message . u10659) (&condition . u10658) (define-condition-type . u10657)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11332 '(rnrs records inspection) '(6) '() '() '() '((record? . u11189) (record-type-uid . u11188) (record-type-sealed? . u11187) (record-type-parent . u11186) (record-type-opaque? . u11185) (record-type-name . u11184) (record-type-generative? . u11183) (record-type-field-names . u11182) (record-rtd . u11181) (record-field-mutable? . u11180)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11333 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . u11196) (record-predicate . u11195) (record-mutator . u11194) (record-constructor . u11193) (record-accessor . u11192) (make-record-type-descriptor . u11191) (make-record-constructor-descriptor . u11190)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11334 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . u10655) (parent-rtd . u10654) (nongenerative . u10653) (opaque . u10652) (sealed . u10651) (protocol . u10650) (parent . u10649) (immutable . u10648) (mutable . u10647) (fields . u10646) (record-constructor-descriptor . u10613) (record-type-descriptor . u10612)) '() values values '#f '#f '#t '#f) (u1799@u1452@install-library 'u11335 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . u10074) (&no-nans-rtd . u10072) (&no-infinities-rcd . u10053) (&no-infinities-rtd . u10051) (&i/o-encoding-rcd . u10032) (&i/o-encoding-rtd . u10030) (&i/o-decoding-rcd . u10006) (&i/o-decoding-rtd . u10004) (&i/o-port-rcd . u9985) (&i/o-port-rtd . u9983) (&i/o-file-does-not-exist-rcd . u9959) (&i/o-file-does-not-exist-rtd . u9957) (&i/o-file-already-exists-rcd . u9938) (&i/o-file-already-exists-rtd . u9936) (&i/o-file-is-read-only-rcd . u9917) (&i/o-file-is-read-only-rtd . u9915) (&i/o-file-protection-rcd . u9896) (&i/o-file-protection-rtd . u9894) (&i/o-filename-rcd . u9875) (&i/o-filename-rtd . u9873) (&i/o-invalid-position-rcd . u9849) (&i/o-invalid-position-rtd . u9847) (&i/o-write-rcd . u9823) (&i/o-write-rtd . u9821) (&i/o-read-rcd . u9802) (&i/o-read-rtd . u9800) (&i/o-rcd . u9781) (&i/o-rtd . u9779) (&undefined-rcd . u9760) (&undefined-rtd . u9758) (&syntax-rcd . u9739) (&syntax-rtd . u9737) (&lexical-rcd . u9708) (&lexical-rtd . u9706) (&implementation-restriction-rcd . u9687) (&implementation-restriction-rtd . u9685) (&non-continuable-rcd . u9666) (&non-continuable-rtd . u9664) (&who-rcd . u9645) (&who-rtd . u9643) (&irritants-rcd . u9619) (&irritants-rtd . u9617) (&assertion-rcd . u9593) (&assertion-rtd . u9591) (&violation-rcd . u9572) (&violation-rtd . u9570) (&error-rcd . u9551) (&error-rtd . u9549) (&serious-rcd . u9530) (&serious-rtd . u9528) (&warning-rcd . u9509) (&warning-rtd . u9507) (&message-rcd . u9488) (&message-rtd . u9486) (&condition-rcd . u9397) (&condition-rtd . u9395) (syntax-error . u3000) (syntax-dispatch . u2771) (pretty-print . u11303) (eval-core . u11302) (set-symbol-value! . u11301) (symbol-value . u11300) (gensym . u922) (void . u11299) (load . u10343) (interaction-environment . u3016) (char-ready? . u11298) (regexp? . u11297) (read-line . u11296) (ungensym . u11295) (alist->eq-hash-table . u11294) (assoc-ref . u11293) (print . u11292) (format . u11291) (host-os . u11290) (library-path . u1419) (standard-library-path . u11289) (file-newer? . u11288) (stat-mtime . u11287) (write-to-file . u11286) (file->list . u11285) (file->string . u11284) (digit->integer . u11283) (call-with-string-input-port . u11282) (call-with-string-io . u11281) (string-split . u11280) (bytevector-for-each . u11279) (string->regexp . u11278) (rxmatch . u11277) (regexp-replace-all . u11276) (hashtable-for-each . u11275) (call-process . u11274) (local-tz-offset . u11273) (microseconds . u11272) (readdir . u11271) (set-current-directory! . u11270) (expand-path . u11269) (current-directory . u11268) (%spawn . u11267) (%waitpid . u11266) (%ffi-supported? . u11265) (%ffi-pointer-ref . u11264) (%ffi-pointer->string . u11263) (%ffi-call->string-or-zero . u11262) (%ffi-call->double . u11261) (%ffi-call->void* . u11260) (%ffi-call->void . u11259) (%ffi-call->int . u11258) (%ffi-lookup . u11257) (%ffi-open . u11256) (%fork . u11255) (%pipe . u11254) (p . u11253) (open-output-string . u11252) (get-output-string . u11251) (get-environment-variables . u11250) (get-environment-variable . u11249) (get-timeofday . u11248) (get-command-line . u11247) (sys-display . u11246) (mosh-executable-path . u11245) (make-file-options . u11244) (source-info . u11243) (make-compiler-instruction . u11242) (make-instruction . u11241) (set-source-info! . u11240) (bignum? . u11239) (fast-equal? . u11238) (fasl-read . u11237) (fasl-write . u11236) (time-usage . u11235) (os-constant . u11234) (make-parameter . u950) (socket-shutdown . u11233) (socket-close . u11232) (socket-send . u11231) (socket-recv . u11230) (make-server-socket . u11229) (make-client-socket . u11228) (socket-accept . u11227) (socket? . u11226) (string-upcase . u11225) (string-titlecase . u11224) (string-normalize-nfkd . u11223) (string-normalize-nfkc . u11222) (string-normalize-nfd . u11221) (string-normalize-nfc . u11220) (string-foldcase . u11219) (string-downcase . u11218) (string-ci>? . u11217) (string-ci>=? . u11216) (string-ci=? . u11215) (string-ci<? . u11214) (string-ci<=? . u11213) (char-whitespace? . u11212) (char-upper-case? . u11211) (char-title-case? . u11210) (char-numeric? . u11209) (char-lower-case? . u11208) (char-general-category . u11207) (char-upcase . u11206) (char-titlecase . u11205) (char-foldcase . u11204) (char-downcase . u11203) (char-ci>? . u11202) (char-ci>=? . u11201) (char-ci=? . u11200) (char-ci<? . u11199) (char-ci<=? . u11198) (char-alphabetic? . u11197) (make-variable-transformer . u2330) (identifier? . u3006) (generate-temporaries . u2986) (free-identifier=? . u2988) (syntax->datum . u3010) (datum->syntax . u3008) (bound-identifier=? . u2990) (record-type-descriptor? . u11196) (record-predicate . u11195) (record-mutator . u11194) (record-constructor . u11193) (record-accessor . u11192) (make-record-type-descriptor . u11191) (make-record-constructor-descriptor . u11190) (record? . u11189) (record-type-uid . u11188) (record-type-sealed? . u11187) (record-type-parent . u11186) (record-type-opaque? . u11185) (record-type-name . u11184) (record-type-generative? . u11183) (record-type-field-names . u11182) (record-rtd . u11181) (record-field-mutable? . u11180) (delete-file . u11179) (file-exists? . u11178) (vector-sort! . u11177) (vector-sort . u11176) (list-sort . u11175) (symbol-hash . u11174) (string-ci-hash . u11173) (string-hash . u11172) (equal-hash . u11171) (hashtable-equivalence-function . u11170) (make-hashtable . u11169) (hashtable-hash-function . u11168) (make-eqv-hashtable . u11167) (make-eq-hashtable . u11166) (hashtable? . u11165) (hashtable-update! . u11164) (hashtable-size . u11163) (hashtable-set! . u11162) (hashtable-ref . u11161) (hashtable-mutable? . u11160) (hashtable-keys . u11159) (hashtable-entries . u11158) (hashtable-delete! . u11157) (hashtable-copy . u11156) (hashtable-contains? . u11155) (hashtable-clear! . u11154) (call-with-output-file . u11153) (call-with-input-file . u11152) (write-char . u11151) (write . u11150) (with-output-to-file . u11149) (with-input-from-file . u11148) (read-char . u11147) (read . u11146) (peek-char . u11145) (open-output-file . u11144) (open-input-file . u11143) (newline . u11142) (display . u11141) (close-output-port . u11140) (close-input-port . u11139) (eof-object? . u11138) (eof-object . u11137) (current-error-port . u11136) (current-output-port . u11135) (current-input-port . u11134) (output-port? . u11133) (input-port? . u11132) (utf-8-codec . u11131) (utf-16-codec . u11130) (transcoder-error-handling-mode . u11129) (transcoder-eol-style . u11128) (transcoder-codec . u11127) (transcoded-port . u11126) (textual-port? . u11125) (string->bytevector . u11124) (standard-output-port . u11123) (standard-input-port . u11122) (standard-error-port . u11121) (set-port-position! . u11120) (put-u8 . u11119) (put-string . u11118) (put-datum . u11117) (put-char . u11116) (put-bytevector . u11115) (port? . u11114) (port-transcoder . u11113) (port-position . u11112) (port-has-set-port-position!? . u11111) (port-has-port-position? . u11110) (port-eof? . u11109) (output-port-buffer-mode . u11108) (open-string-output-port . u11107) (open-string-input-port . u11106) (open-file-output-port . u11105) (open-file-input/output-port . u11104) (open-file-input-port . u11103) (open-bytevector-output-port . u11102) (open-bytevector-input-port . u11101) (native-transcoder . u11100) (native-eol-style . u11099) (make-transcoder . u11098) (latin-1-codec . u11097) (make-i/o-write-error . u9817) (make-i/o-read-error . u9796) (make-i/o-port-error . u9975) (make-i/o-invalid-position-error . u9839) (make-i/o-filename-error . u9865) (make-i/o-file-protection-error . u9890) (make-i/o-file-is-read-only-error . u9911) (make-i/o-file-does-not-exist-error . u9953) (make-i/o-file-already-exists-error . u9932) (make-i/o-error . u9775) (make-i/o-encoding-error . u10022) (make-i/o-decoding-error . u10000) (make-custom-textual-output-port . u11096) (make-custom-textual-input/output-port . u11095) (make-custom-textual-input-port . u11094) (make-custom-binary-output-port . u11093) (make-custom-binary-input/output-port . u11092) (make-custom-binary-input-port . u11091) (make-bytevector . u11090) (lookahead-u8 . u11089) (lookahead-char . u11088) (i/o-write-error? . u9819) (i/o-read-error? . u9798) (i/o-port-error? . u9979) (i/o-invalid-position-error? . u9843) (i/o-filename-error? . u9869) (i/o-file-protection-error? . u9892) (i/o-file-is-read-only-error? . u9913) (i/o-file-does-not-exist-error? . u9955) (i/o-file-already-exists-error? . u9934) (i/o-error? . u9777) (i/o-error-position . u9845) (i/o-error-port . u9981) (i/o-error-filename . u9871) (i/o-encoding-error? . u10026) (i/o-encoding-error-char . u10028) (i/o-decoding-error? . u10002) (get-u8 . u11087) (get-string-n! . u11086) (get-string-n . u11085) (get-string-all . u11084) (get-line . u11083) (get-datum . u11082) (get-char . u11081) (get-bytevector-some . u11080) (get-bytevector-n! . u11079) (get-bytevector-n . u11078) (get-bytevector-all . u11077) (flush-output-port . u11076) (close-port . u11075) (scheme-report-environment . u2968) (quotient . u11074) (null-environment . u2966) (remainder . u11073) (modulo . u11072) (inexact->exact . u11071) (force . u11070) (exact->inexact . u11069) (make-promise . u11068) (exit . u11067) (command-line . u10337) (string-fill! . u11066) (string-set! . u11065) (set-cdr! . u11064) (set-car! . u11063) (remove . u11062) (remv . u11061) (remp . u11060) (remq . u11059) (partition . u11058) (memv . u11057) (memq . u11056) (memp . u11055) (member . u11054) (exists . u11053) (for-all . u11052) (fold-right . u11051) (fold-left . u11050) (find . u11049) (filter . u11048) (cons* . u11047) (assv . u11046) (assq . u11045) (assp . u11044) (assoc . u11043) (call-with-string-output-port . u11042) (call-with-port . u11041) (call-with-bytevector-output-port . u11040) (bytevector->string . u11039) (buffer-mode? . u11038) (binary-port? . u11037) (with-exception-handler . u11036) (raise-continuable . u11035) (raise . u11034) (eval . u2972) (environment . u2964) (make-enumeration . u11033) (enum-set=? . u11032) (enum-set-universe . u11031) (enum-set-union . u11030) (enum-set-subset? . u11029) (enum-set-projection . u11028) (enum-set-member? . u11027) (enum-set-intersection . u11026) (enum-set-indexer . u11025) (enum-set-difference . u11024) (enum-set-constructor . u11023) (enum-set-complement . u11022) (enum-set->list . u11021) (who-condition? . u9639) (warning? . u9505) (violation? . u9568) (undefined-violation? . u9756) (syntax-violation? . u9731) (syntax-violation-subform . u9735) (syntax-violation-form . u9733) (syntax-violation . u3004) (simple-conditions . u11020) (serious-condition? . u9526) (non-continuable-violation? . u9662) (message-condition? . u9482) (make-who-condition . u9635) (make-warning . u9503) (make-violation . u9566) (make-undefined-violation . u9754) (make-syntax-violation . u9725) (make-serious-condition . u9524) (make-non-continuable-violation . u9660) (make-message-condition . u9478) (make-lexical-violation . u9702) (make-irritants-condition . u9609) (make-implementation-restriction-violation . u9681) (make-error . u9545) (make-assertion-violation . u9587) (lexical-violation? . u9704) (irritants-condition? . u9613) (implementation-restriction-violation? . u9683) (error? . u9547) (condition-who . u9641) (condition-predicate . u11019) (condition-message . u9484) (condition-irritants . u9615) (condition-accessor . u11018) (condition . u11017) (assertion-violation? . u9589) (condition? . u11016) (utf32->string . u11015) (utf16->string . u11014) (utf8->string . u11013) (uint-list->bytevector . u11012) (u8-list->bytevector . u11011) (string->utf8 . u11010) (string->utf32 . u11009) (string->utf16 . u11008) (sint-list->bytevector . u11007) (native-endianness . u11006) (bytevector? . u11005) (bytevector=? . u11004) (bytevector-uint-set! . u11003) (bytevector-uint-ref . u11002) (bytevector-u8-set! . u11001) (bytevector-u8-ref . u11000) (bytevector-u64-set! . u10999) (bytevector-u64-ref . u10998) (bytevector-u64-native-set! . u10997) (bytevector-u64-native-ref . u10996) (bytevector-u32-set! . u10995) (bytevector-u32-ref . u10994) (bytevector-u32-native-set! . u10993) (bytevector-u32-native-ref . u10992) (bytevector-u16-set! . u10991) (bytevector-u16-ref . u10990) (bytevector-u16-native-set! . u10989) (bytevector-u16-native-ref . u10988) (bytevector-sint-set! . u10987) (bytevector-sint-ref . u10986) (bytevector-s8-set! . u10985) (bytevector-s8-ref . u10984) (bytevector-s64-set! . u10983) (bytevector-s64-ref . u10982) (bytevector-s64-native-set! . u10981) (bytevector-s64-native-ref . u10980) (bytevector-s32-set! . u10979) (bytevector-s32-ref . u10978) (bytevector-s32-native-set! . u10977) (bytevector-s32-native-ref . u10976) (bytevector-s16-set! . u10975) (bytevector-s16-ref . u10974) (bytevector-s16-native-set! . u10973) (bytevector-s16-native-ref . u10972) (bytevector-length . u10971) (bytevector-ieee-single-ref . u10970) (bytevector-ieee-single-set! . u10969) (bytevector-ieee-single-native-set! . u10968) (bytevector-ieee-single-native-ref . u10967) (bytevector-ieee-double-set! . u10966) (bytevector-ieee-double-ref . u10965) (bytevector-ieee-double-native-set! . u10964) (bytevector-ieee-double-native-ref . u10963) (bytevector-fill! . u10962) (bytevector-copy! . u10961) (bytevector-copy . u10960) (bytevector->uint-list . u10959) (bytevector->u8-list . u10958) (bytevector->sint-list . u10957) (no-nans-violation? . u10070) (no-infinities-violation? . u10049) (make-no-nans-violation . u10068) (make-no-infinities-violation . u10047) (real->flonum . u10956) (flzero? . u10955) (fltruncate . u10954) (fltan . u10953) (flsqrt . u10952) (flsin . u10951) (flround . u10950) (flpositive? . u10949) (flonum? . u10948) (flodd? . u10947) (flnumerator . u10946) (flnegative? . u10945) (flnan? . u10944) (flmod0 . u10943) (flmod . u10942) (flmin . u10941) (flmax . u10940) (fllog . u10939) (flinteger? . u10938) (flinfinite? . u10937) (flfloor . u10936) (flfinite? . u10935) (flexpt . u10934) (flexp . u10933) (fleven? . u10932) (fldiv0-and-mod0 . u10931) (fldiv0 . u10930) (fldiv-and-mod . u10929) (fldiv . u10928) (fldenominator . u10927) (flcos . u10926) (flceiling . u10925) (flatan . u10924) (flasin . u10923) (flacos . u10922) (flabs . u10921) (fl>? . u10920) (fl>=? . u10919) (fl=? . u10918) (fl<? . u10917) (fl<=? . u10916) (fl/ . u10915) (fl- . u10914) (fl+ . u10913) (fl* . u10912) (fixnum->flonum . u10911) (fxzero? . u10910) (fxxor . u10909) (fxrotate-bit-field . u10908) (fxreverse-bit-field . u10907) (fxpositive? . u10906) (fxodd? . u10905) (fxnot . u10904) (fxnegative? . u10903) (fxmod0 . u10902) (fxmod . u10901) (fxmin . u10900) (fxmax . u10899) (fxlength . u10898) (fxior . u10897) (fxif . u10896) (fxfirst-bit-set . u10895) (fxeven? . u10894) (fxdiv0-and-mod0 . u10893) (fxdiv0 . u10892) (fxdiv-and-mod . u10891) (fxdiv . u10890) (fxcopy-bit-field . u10889) (fxcopy-bit . u10888) (fxbit-set? . u10887) (fxbit-field . u10886) (fxbit-count . u10885) (fxarithmetic-shift-right . u10884) (fxarithmetic-shift-left . u10883) (fxarithmetic-shift . u10882) (fxand . u10881) (fx>? . u10880) (fx>=? . u10879) (fx=? . u10878) (fx<? . u10877) (fx<=? . u10876) (fx-/carry . u10875) (fx- . u10874) (fx+/carry . u10873) (fx+ . u10872) (fx*/carry . u10871) (fx* . u10870) (greatest-fixnum . u10869) (least-fixnum . u10868) (fixnum-width . u10867) (fixnum? . u10866) (bitwise-rotate-bit-field . u10865) (bitwise-reverse-bit-field . u10864) (bitwise-length . u10863) (bitwise-if . u10862) (bitwise-first-bit-set . u10861) (bitwise-copy-bit-field . u10860) (bitwise-copy-bit . u10859) (bitwise-bit-set? . u10858) (bitwise-bit-field . u10857) (bitwise-bit-count . u10856) (bitwise-xor . u10855) (bitwise-ior . u10854) (bitwise-and . u10853) (bitwise-not . u10852) (bitwise-arithmetic-shift-right . u10851) (bitwise-arithmetic-shift-left . u10850) (bitwise-arithmetic-shift . u10849) (zero? . u10848) (vector? . u10847) (vector-set! . u10846) (vector-ref . u10845) (vector-map . u10844) (vector-length . u10843) (vector-for-each . u10842) (vector-fill! . u10841) (vector->list . u10840) (vector . u10839) (values . u10838) (truncate . u10837) (tan . u10836) (symbol? . u10835) (symbol=? . u10834) (symbol->string . u10833) (substring . u10832) (string? . u10831) (string>? . u10830) (string>=? . u10829) (string=? . u10828) (string<? . u10827) (string<=? . u10826) (string-ref . u10825) (string-length . u10824) (string-for-each . u10823) (string-copy . u10822) (string-append . u10821) (string->symbol . u10820) (string->number . u10819) (string->list . u10818) (string . u10817) (sqrt . u10816) (sin . u10815) (round . u10814) (reverse . u10813) (real? . u10812) (real-valued? . u10811) (real-part . u10810) (rationalize . u10809) (rational? . u10808) (rational-valued? . u10807) (procedure? . u10806) (positive? . u10805) (pair? . u10804) (odd? . u10803) (numerator . u10802) (number? . u10801) (number->string . u10800) (null? . u10799) (not . u10798) (negative? . u10797) (nan? . u10796) (min . u10795) (max . u10794) (map . u10793) (make-vector . u10792) (make-string . u10791) (make-rectangular . u10790) (make-polar . u10789) (magnitude . u10788) (log . u10787) (list? . u10786) (list-tail . u10785) (list-ref . u10784) (list->vector . u10783) (list->string . u10782) (list . u10781) (length . u10780) (lcm . u10779) (integer? . u10778) (integer-valued? . u10777) (integer->char . u10776) (infinite? . u10775) (inexact? . u10774) (inexact . u10773) (imag-part . u10772) (gcd . u10771) (for-each . u10770) (floor . u10769) (finite? . u10768) (expt . u10767) (exp . u10766) (exact? . u10765) (exact-integer-sqrt . u10764) (exact . u10763) (even? . u10762) (error . u10761) (eqv? . u10760) (equal? . u10759) (eq? . u10758) (dynamic-wind . u10757) (div0-and-mod0 . u10756) (mod0 . u10755) (div0 . u10754) (div-and-mod . u10753) (mod . u10752) (div . u10751) (denominator . u10750) (cos . u10749) (cons . u10748) (complex? . u10747) (char? . u10746) (char>? . u10745) (char>=? . u10744) (char=? . u10743) (char<? . u10742) (char<=? . u10741) (char->integer . u10740) (ceiling . u10739) (call-with-values . u10738) (call/cc . u10737) (call-with-current-continuation . u10736) (cddddr . u10735) (cdddar . u10734) (cddadr . u10733) (cddaar . u10732) (cdaddr . u10731) (cdadar . u10730) (cdaadr . u10729) (cdaaar . u10728) (cadddr . u10727) (caddar . u10726) (cadadr . u10725) (cadaar . u10724) (caaddr . u10723) (caadar . u10722) (caaadr . u10721) (caaaar . u10720) (cdddr . u10719) (cddar . u10718) (cdadr . u10717) (cdaar . u10716) (caddr . u10715) (cadar . u10714) (caadr . u10713) (caaar . u10712) (cddr . u10711) (cdar . u10710) (cadr . u10709) (caar . u10708) (cdr . u10707) (car . u10706) (boolean? . u10705) (boolean=? . u10704) (atan . u10703) (assertion-violation . u10702) (assertion-error . u2998) (asin . u10701) (apply . u10700) (append . u10699) (angle . u10698) (acos . u10697) (abs . u10696) (/ . u10695) (* . u10694) (- . u10693) (+ . u10692) (>= . u10691) (> . u10690) (= . u10689) (<= . u10688) (< . u10687) (library . u10686) (&no-nans . u10685) (&no-infinities . u10684) (&i/o-encoding . u10683) (&i/o-decoding . u10682) (&i/o-port . u10681) (&i/o-file-does-not-exist . u10680) (&i/o-file-already-exists . u10679) (&i/o-file-is-read-only . u10678) (&i/o-file-protection . u10677) (&i/o-filename . u10676) (&i/o-invalid-position . u10675) (&i/o-write . u10674) (&i/o-read . u10673) (&i/o . u10672) (&undefined . u10671) (&syntax . u10670) (&lexical . u10669) (&implementation-restriction . u10668) (&non-continuable . u10667) (&who . u10666) (&irritants . u10665) (&assertion . u10664) (&violation . u10663) (&error . u10662) (&serious . u10661) (&warning . u10660) (&message . u10659) (&condition . u10658) (define-condition-type . u10657) (define-enumeration . u10656) (define-record-type . u10655) (parent-rtd . u10654) (nongenerative . u10653) (opaque . u10652) (sealed . u10651) (protocol . u10650) (parent . u10649) (immutable . u10648) (mutable . u10647) (fields . u10646) (error-handling-mode . u10645) (file-options . u10644) (buffer-mode . u10643) (eol-style . u10642) (guard . u10641) (trace-define . u10640) (trace-lambda . u10639) (unsyntax-splicing . u10638) (unsyntax . u10637) (unquote-splicing . u10636) (unquote . u10635) (_ . u10634) (else . u10633) (=> . u10632) (... . u10631) (assert . u10630) (endianness . u10629) (delay . u10628) (time . u10627) (do . u10626) (cond . u10625) (let* . u10624) (let . u10623) (let*-values . u10622) (let-values . u10621) (identifier-syntax . u10620) (with-syntax . u10619) (quasisyntax . u10618) (quasiquote . u10617) (syntax-rules . u10616) (include . u10615) (define-struct . u10614) (record-constructor-descriptor . u10613) (record-type-descriptor . u10612) (case . u10611) (parameterize . u10610) (unless . u10609) (when . u10608) (or . u10607) (and . u10606) (if . u10605) (letrec* . u10604) (letrec . u10603) (type-descriptor . u10602) (case-lambda . u10601) (lambda . u10600) (syntax . u10599) (syntax-case . u10598) (quote . u10597) (foreign-call . u10596) (letrec-syntax . u10595) (let-syntax . u10594) (set! . u10593) (import . u10592) (begin . u10591) (module . u10590) (define-syntax . u10589) (define . u10588)) '((u10074 core-prim . &no-nans-rcd) (u10072 core-prim . &no-nans-rtd) (u10053 core-prim . &no-infinities-rcd) (u10051 core-prim . &no-infinities-rtd) (u10032 core-prim . &i/o-encoding-rcd) (u10030 core-prim . &i/o-encoding-rtd) (u10006 core-prim . &i/o-decoding-rcd) (u10004 core-prim . &i/o-decoding-rtd) (u9985 core-prim . &i/o-port-rcd) (u9983 core-prim . &i/o-port-rtd) (u9959 core-prim . &i/o-file-does-not-exist-rcd) (u9957 core-prim . &i/o-file-does-not-exist-rtd) (u9938 core-prim . &i/o-file-already-exists-rcd) (u9936 core-prim . &i/o-file-already-exists-rtd) (u9917 core-prim . &i/o-file-is-read-only-rcd) (u9915 core-prim . &i/o-file-is-read-only-rtd) (u9896 core-prim . &i/o-file-protection-rcd) (u9894 core-prim . &i/o-file-protection-rtd) (u9875 core-prim . &i/o-filename-rcd) (u9873 core-prim . &i/o-filename-rtd) (u9849 core-prim . &i/o-invalid-position-rcd) (u9847 core-prim . &i/o-invalid-position-rtd) (u9823 core-prim . &i/o-write-rcd) (u9821 core-prim . &i/o-write-rtd) (u9802 core-prim . &i/o-read-rcd) (u9800 core-prim . &i/o-read-rtd) (u9781 core-prim . &i/o-rcd) (u9779 core-prim . &i/o-rtd) (u9760 core-prim . &undefined-rcd) (u9758 core-prim . &undefined-rtd) (u9739 core-prim . &syntax-rcd) (u9737 core-prim . &syntax-rtd) (u9708 core-prim . &lexical-rcd) (u9706 core-prim . &lexical-rtd) (u9687 core-prim . &implementation-restriction-rcd) (u9685 core-prim . &implementation-restriction-rtd) (u9666 core-prim . &non-continuable-rcd) (u9664 core-prim . &non-continuable-rtd) (u9645 core-prim . &who-rcd) (u9643 core-prim . &who-rtd) (u9619 core-prim . &irritants-rcd) (u9617 core-prim . &irritants-rtd) (u9593 core-prim . &assertion-rcd) (u9591 core-prim . &assertion-rtd) (u9572 core-prim . &violation-rcd) (u9570 core-prim . &violation-rtd) (u9551 core-prim . &error-rcd) (u9549 core-prim . &error-rtd) (u9530 core-prim . &serious-rcd) (u9528 core-prim . &serious-rtd) (u9509 core-prim . &warning-rcd) (u9507 core-prim . &warning-rtd) (u9488 core-prim . &message-rcd) (u9486 core-prim . &message-rtd) (u9397 core-prim . &condition-rcd) (u9395 core-prim . &condition-rtd) (u3000 core-prim . syntax-error) (u2771 core-prim . syntax-dispatch) (u11303 core-prim . pretty-print) (u11302 core-prim . eval-core) (u11301 core-prim . set-symbol-value!) (u11300 core-prim . symbol-value) (u922 core-prim . gensym) (u11299 core-prim . void) (u10343 core-prim . load) (u3016 core-prim . interaction-environment) (u11298 core-prim . char-ready?) (u11297 core-prim . regexp?) (u11296 core-prim . read-line) (u11295 core-prim . ungensym) (u11294 core-prim . alist->eq-hash-table) (u11293 core-prim . assoc-ref) (u11292 core-prim . print) (u11291 core-prim . format) (u11290 core-prim . host-os) (u1419 core-prim . library-path) (u11289 core-prim . standard-library-path) (u11288 core-prim . file-newer?) (u11287 core-prim . stat-mtime) (u11286 core-prim . write-to-file) (u11285 core-prim . file->list) (u11284 core-prim . file->string) (u11283 core-prim . digit->integer) (u11282 core-prim . call-with-string-input-port) (u11281 core-prim . call-with-string-io) (u11280 core-prim . string-split) (u11279 core-prim . bytevector-for-each) (u11278 core-prim . string->regexp) (u11277 core-prim . rxmatch) (u11276 core-prim . regexp-replace-all) (u11275 core-prim . hashtable-for-each) (u11274 core-prim . call-process) (u11273 core-prim . local-tz-offset) (u11272 core-prim . microseconds) (u11271 core-prim . readdir) (u11270 core-prim . set-current-directory!) (u11269 core-prim . expand-path) (u11268 core-prim . current-directory) (u11267 core-prim . %spawn) (u11266 core-prim . %waitpid) (u11265 core-prim . %ffi-supported?) (u11264 core-prim . %ffi-pointer-ref) (u11263 core-prim . %ffi-pointer->string) (u11262 core-prim . %ffi-call->string-or-zero) (u11261 core-prim . %ffi-call->double) (u11260 core-prim . %ffi-call->void*) (u11259 core-prim . %ffi-call->void) (u11258 core-prim . %ffi-call->int) (u11257 core-prim . %ffi-lookup) (u11256 core-prim . %ffi-open) (u11255 core-prim . %fork) (u11254 core-prim . %pipe) (u11253 core-prim . p) (u11252 core-prim . open-output-string) (u11251 core-prim . get-output-string) (u11250 core-prim . get-environment-variables) (u11249 core-prim . get-environment-variable) (u11248 core-prim . get-timeofday) (u11247 core-prim . get-command-line) (u11246 core-prim . sys-display) (u11245 core-prim . mosh-executable-path) (u11244 core-prim . make-file-options) (u11243 core-prim . source-info) (u11242 core-prim . make-compiler-instruction) (u11241 core-prim . make-instruction) (u11240 core-prim . set-source-info!) (u11239 core-prim . bignum?) (u11238 core-prim . fast-equal?) (u11237 core-prim . fasl-read) (u11236 core-prim . fasl-write) (u11235 core-prim . time-usage) (u11234 core-prim . os-constant) (u950 core-prim . make-parameter) (u11233 core-prim . socket-shutdown) (u11232 core-prim . socket-close) (u11231 core-prim . socket-send) (u11230 core-prim . socket-recv) (u11229 core-prim . make-server-socket) (u11228 core-prim . make-client-socket) (u11227 core-prim . socket-accept) (u11226 core-prim . socket?) (u11225 core-prim . string-upcase) (u11224 core-prim . string-titlecase) (u11223 core-prim . string-normalize-nfkd) (u11222 core-prim . string-normalize-nfkc) (u11221 core-prim . string-normalize-nfd) (u11220 core-prim . string-normalize-nfc) (u11219 core-prim . string-foldcase) (u11218 core-prim . string-downcase) (u11217 core-prim . string-ci>?) (u11216 core-prim . string-ci>=?) (u11215 core-prim . string-ci=?) (u11214 core-prim . string-ci<?) (u11213 core-prim . string-ci<=?) (u11212 core-prim . char-whitespace?) (u11211 core-prim . char-upper-case?) (u11210 core-prim . char-title-case?) (u11209 core-prim . char-numeric?) (u11208 core-prim . char-lower-case?) (u11207 core-prim . char-general-category) (u11206 core-prim . char-upcase) (u11205 core-prim . char-titlecase) (u11204 core-prim . char-foldcase) (u11203 core-prim . char-downcase) (u11202 core-prim . char-ci>?) (u11201 core-prim . char-ci>=?) (u11200 core-prim . char-ci=?) (u11199 core-prim . char-ci<?) (u11198 core-prim . char-ci<=?) (u11197 core-prim . char-alphabetic?) (u2330 core-prim . make-variable-transformer) (u3006 core-prim . identifier?) (u2986 core-prim . generate-temporaries) (u2988 core-prim . free-identifier=?) (u3010 core-prim . syntax->datum) (u3008 core-prim . datum->syntax) (u2990 core-prim . bound-identifier=?) (u11196 core-prim . record-type-descriptor?) (u11195 core-prim . record-predicate) (u11194 core-prim . record-mutator) (u11193 core-prim . record-constructor) (u11192 core-prim . record-accessor) (u11191 core-prim . make-record-type-descriptor) (u11190 core-prim . make-record-constructor-descriptor) (u11189 core-prim . record?) (u11188 core-prim . record-type-uid) (u11187 core-prim . record-type-sealed?) (u11186 core-prim . record-type-parent) (u11185 core-prim . record-type-opaque?) (u11184 core-prim . record-type-name) (u11183 core-prim . record-type-generative?) (u11182 core-prim . record-type-field-names) (u11181 core-prim . record-rtd) (u11180 core-prim . record-field-mutable?) (u11179 core-prim . delete-file) (u11178 core-prim . file-exists?) (u11177 core-prim . vector-sort!) (u11176 core-prim . vector-sort) (u11175 core-prim . list-sort) (u11174 core-prim . symbol-hash) (u11173 core-prim . string-ci-hash) (u11172 core-prim . string-hash) (u11171 core-prim . equal-hash) (u11170 core-prim . hashtable-equivalence-function) (u11169 core-prim . make-hashtable) (u11168 core-prim . hashtable-hash-function) (u11167 core-prim . make-eqv-hashtable) (u11166 core-prim . make-eq-hashtable) (u11165 core-prim . hashtable?) (u11164 core-prim . hashtable-update!) (u11163 core-prim . hashtable-size) (u11162 core-prim . hashtable-set!) (u11161 core-prim . hashtable-ref) (u11160 core-prim . hashtable-mutable?) (u11159 core-prim . hashtable-keys) (u11158 core-prim . hashtable-entries) (u11157 core-prim . hashtable-delete!) (u11156 core-prim . hashtable-copy) (u11155 core-prim . hashtable-contains?) (u11154 core-prim . hashtable-clear!) (u11153 core-prim . call-with-output-file) (u11152 core-prim . call-with-input-file) (u11151 core-prim . write-char) (u11150 core-prim . write) (u11149 core-prim . with-output-to-file) (u11148 core-prim . with-input-from-file) (u11147 core-prim . read-char) (u11146 core-prim . read) (u11145 core-prim . peek-char) (u11144 core-prim . open-output-file) (u11143 core-prim . open-input-file) (u11142 core-prim . newline) (u11141 core-prim . display) (u11140 core-prim . close-output-port) (u11139 core-prim . close-input-port) (u11138 core-prim . eof-object?) (u11137 core-prim . eof-object) (u11136 core-prim . current-error-port) (u11135 core-prim . current-output-port) (u11134 core-prim . current-input-port) (u11133 core-prim . output-port?) (u11132 core-prim . input-port?) (u11131 core-prim . utf-8-codec) (u11130 core-prim . utf-16-codec) (u11129 core-prim . transcoder-error-handling-mode) (u11128 core-prim . transcoder-eol-style) (u11127 core-prim . transcoder-codec) (u11126 core-prim . transcoded-port) (u11125 core-prim . textual-port?) (u11124 core-prim . string->bytevector) (u11123 core-prim . standard-output-port) (u11122 core-prim . standard-input-port) (u11121 core-prim . standard-error-port) (u11120 core-prim . set-port-position!) (u11119 core-prim . put-u8) (u11118 core-prim . put-string) (u11117 core-prim . put-datum) (u11116 core-prim . put-char) (u11115 core-prim . put-bytevector) (u11114 core-prim . port?) (u11113 core-prim . port-transcoder) (u11112 core-prim . port-position) (u11111 core-prim . port-has-set-port-position!?) (u11110 core-prim . port-has-port-position?) (u11109 core-prim . port-eof?) (u11108 core-prim . output-port-buffer-mode) (u11107 core-prim . open-string-output-port) (u11106 core-prim . open-string-input-port) (u11105 core-prim . open-file-output-port) (u11104 core-prim . open-file-input/output-port) (u11103 core-prim . open-file-input-port) (u11102 core-prim . open-bytevector-output-port) (u11101 core-prim . open-bytevector-input-port) (u11100 core-prim . native-transcoder) (u11099 core-prim . native-eol-style) (u11098 core-prim . make-transcoder) (u11097 core-prim . latin-1-codec) (u9817 core-prim . make-i/o-write-error) (u9796 core-prim . make-i/o-read-error) (u9975 core-prim . make-i/o-port-error) (u9839 core-prim . make-i/o-invalid-position-error) (u9865 core-prim . make-i/o-filename-error) (u9890 core-prim . make-i/o-file-protection-error) (u9911 core-prim . make-i/o-file-is-read-only-error) (u9953 core-prim . make-i/o-file-does-not-exist-error) (u9932 core-prim . make-i/o-file-already-exists-error) (u9775 core-prim . make-i/o-error) (u10022 core-prim . make-i/o-encoding-error) (u10000 core-prim . make-i/o-decoding-error) (u11096 core-prim . make-custom-textual-output-port) (u11095 core-prim . make-custom-textual-input/output-port) (u11094 core-prim . make-custom-textual-input-port) (u11093 core-prim . make-custom-binary-output-port) (u11092 core-prim . make-custom-binary-input/output-port) (u11091 core-prim . make-custom-binary-input-port) (u11090 core-prim . make-bytevector) (u11089 core-prim . lookahead-u8) (u11088 core-prim . lookahead-char) (u9819 core-prim . i/o-write-error?) (u9798 core-prim . i/o-read-error?) (u9979 core-prim . i/o-port-error?) (u9843 core-prim . i/o-invalid-position-error?) (u9869 core-prim . i/o-filename-error?) (u9892 core-prim . i/o-file-protection-error?) (u9913 core-prim . i/o-file-is-read-only-error?) (u9955 core-prim . i/o-file-does-not-exist-error?) (u9934 core-prim . i/o-file-already-exists-error?) (u9777 core-prim . i/o-error?) (u9845 core-prim . i/o-error-position) (u9981 core-prim . i/o-error-port) (u9871 core-prim . i/o-error-filename) (u10026 core-prim . i/o-encoding-error?) (u10028 core-prim . i/o-encoding-error-char) (u10002 core-prim . i/o-decoding-error?) (u11087 core-prim . get-u8) (u11086 core-prim . get-string-n!) (u11085 core-prim . get-string-n) (u11084 core-prim . get-string-all) (u11083 core-prim . get-line) (u11082 core-prim . get-datum) (u11081 core-prim . get-char) (u11080 core-prim . get-bytevector-some) (u11079 core-prim . get-bytevector-n!) (u11078 core-prim . get-bytevector-n) (u11077 core-prim . get-bytevector-all) (u11076 core-prim . flush-output-port) (u11075 core-prim . close-port) (u2968 core-prim . scheme-report-environment) (u11074 core-prim . quotient) (u2966 core-prim . null-environment) (u11073 core-prim . remainder) (u11072 core-prim . modulo) (u11071 core-prim . inexact->exact) (u11070 core-prim . force) (u11069 core-prim . exact->inexact) (u11068 core-prim . make-promise) (u11067 core-prim . exit) (u10337 core-prim . command-line) (u11066 core-prim . string-fill!) (u11065 core-prim . string-set!) (u11064 core-prim . set-cdr!) (u11063 core-prim . set-car!) (u11062 core-prim . remove) (u11061 core-prim . remv) (u11060 core-prim . remp) (u11059 core-prim . remq) (u11058 core-prim . partition) (u11057 core-prim . memv) (u11056 core-prim . memq) (u11055 core-prim . memp) (u11054 core-prim . member) (u11053 core-prim . exists) (u11052 core-prim . for-all) (u11051 core-prim . fold-right) (u11050 core-prim . fold-left) (u11049 core-prim . find) (u11048 core-prim . filter) (u11047 core-prim . cons*) (u11046 core-prim . assv) (u11045 core-prim . assq) (u11044 core-prim . assp) (u11043 core-prim . assoc) (u11042 core-prim . call-with-string-output-port) (u11041 core-prim . call-with-port) (u11040 core-prim . call-with-bytevector-output-port) (u11039 core-prim . bytevector->string) (u11038 core-prim . buffer-mode?) (u11037 core-prim . binary-port?) (u11036 core-prim . with-exception-handler) (u11035 core-prim . raise-continuable) (u11034 core-prim . raise) (u2972 core-prim . eval) (u2964 core-prim . environment) (u11033 core-prim . make-enumeration) (u11032 core-prim . enum-set=?) (u11031 core-prim . enum-set-universe) (u11030 core-prim . enum-set-union) (u11029 core-prim . enum-set-subset?) (u11028 core-prim . enum-set-projection) (u11027 core-prim . enum-set-member?) (u11026 core-prim . enum-set-intersection) (u11025 core-prim . enum-set-indexer) (u11024 core-prim . enum-set-difference) (u11023 core-prim . enum-set-constructor) (u11022 core-prim . enum-set-complement) (u11021 core-prim . enum-set->list) (u9639 core-prim . who-condition?) (u9505 core-prim . warning?) (u9568 core-prim . violation?) (u9756 core-prim . undefined-violation?) (u9731 core-prim . syntax-violation?) (u9735 core-prim . syntax-violation-subform) (u9733 core-prim . syntax-violation-form) (u3004 core-prim . syntax-violation) (u11020 core-prim . simple-conditions) (u9526 core-prim . serious-condition?) (u9662 core-prim . non-continuable-violation?) (u9482 core-prim . message-condition?) (u9635 core-prim . make-who-condition) (u9503 core-prim . make-warning) (u9566 core-prim . make-violation) (u9754 core-prim . make-undefined-violation) (u9725 core-prim . make-syntax-violation) (u9524 core-prim . make-serious-condition) (u9660 core-prim . make-non-continuable-violation) (u9478 core-prim . make-message-condition) (u9702 core-prim . make-lexical-violation) (u9609 core-prim . make-irritants-condition) (u9681 core-prim . make-implementation-restriction-violation) (u9545 core-prim . make-error) (u9587 core-prim . make-assertion-violation) (u9704 core-prim . lexical-violation?) (u9613 core-prim . irritants-condition?) (u9683 core-prim . implementation-restriction-violation?) (u9547 core-prim . error?) (u9641 core-prim . condition-who) (u11019 core-prim . condition-predicate) (u9484 core-prim . condition-message) (u9615 core-prim . condition-irritants) (u11018 core-prim . condition-accessor) (u11017 core-prim . condition) (u9589 core-prim . assertion-violation?) (u11016 core-prim . condition?) (u11015 core-prim . utf32->string) (u11014 core-prim . utf16->string) (u11013 core-prim . utf8->string) (u11012 core-prim . uint-list->bytevector) (u11011 core-prim . u8-list->bytevector) (u11010 core-prim . string->utf8) (u11009 core-prim . string->utf32) (u11008 core-prim . string->utf16) (u11007 core-prim . sint-list->bytevector) (u11006 core-prim . native-endianness) (u11005 core-prim . bytevector?) (u11004 core-prim . bytevector=?) (u11003 core-prim . bytevector-uint-set!) (u11002 core-prim . bytevector-uint-ref) (u11001 core-prim . bytevector-u8-set!) (u11000 core-prim . bytevector-u8-ref) (u10999 core-prim . bytevector-u64-set!) (u10998 core-prim . bytevector-u64-ref) (u10997 core-prim . bytevector-u64-native-set!) (u10996 core-prim . bytevector-u64-native-ref) (u10995 core-prim . bytevector-u32-set!) (u10994 core-prim . bytevector-u32-ref) (u10993 core-prim . bytevector-u32-native-set!) (u10992 core-prim . bytevector-u32-native-ref) (u10991 core-prim . bytevector-u16-set!) (u10990 core-prim . bytevector-u16-ref) (u10989 core-prim . bytevector-u16-native-set!) (u10988 core-prim . bytevector-u16-native-ref) (u10987 core-prim . bytevector-sint-set!) (u10986 core-prim . bytevector-sint-ref) (u10985 core-prim . bytevector-s8-set!) (u10984 core-prim . bytevector-s8-ref) (u10983 core-prim . bytevector-s64-set!) (u10982 core-prim . bytevector-s64-ref) (u10981 core-prim . bytevector-s64-native-set!) (u10980 core-prim . bytevector-s64-native-ref) (u10979 core-prim . bytevector-s32-set!) (u10978 core-prim . bytevector-s32-ref) (u10977 core-prim . bytevector-s32-native-set!) (u10976 core-prim . bytevector-s32-native-ref) (u10975 core-prim . bytevector-s16-set!) (u10974 core-prim . bytevector-s16-ref) (u10973 core-prim . bytevector-s16-native-set!) (u10972 core-prim . bytevector-s16-native-ref) (u10971 core-prim . bytevector-length) (u10970 core-prim . bytevector-ieee-single-ref) (u10969 core-prim . bytevector-ieee-single-set!) (u10968 core-prim . bytevector-ieee-single-native-set!) (u10967 core-prim . bytevector-ieee-single-native-ref) (u10966 core-prim . bytevector-ieee-double-set!) (u10965 core-prim . bytevector-ieee-double-ref) (u10964 core-prim . bytevector-ieee-double-native-set!) (u10963 core-prim . bytevector-ieee-double-native-ref) (u10962 core-prim . bytevector-fill!) (u10961 core-prim . bytevector-copy!) (u10960 core-prim . bytevector-copy) (u10959 core-prim . bytevector->uint-list) (u10958 core-prim . bytevector->u8-list) (u10957 core-prim . bytevector->sint-list) (u10070 core-prim . no-nans-violation?) (u10049 core-prim . no-infinities-violation?) (u10068 core-prim . make-no-nans-violation) (u10047 core-prim . make-no-infinities-violation) (u10956 core-prim . real->flonum) (u10955 core-prim . flzero?) (u10954 core-prim . fltruncate) (u10953 core-prim . fltan) (u10952 core-prim . flsqrt) (u10951 core-prim . flsin) (u10950 core-prim . flround) (u10949 core-prim . flpositive?) (u10948 core-prim . flonum?) (u10947 core-prim . flodd?) (u10946 core-prim . flnumerator) (u10945 core-prim . flnegative?) (u10944 core-prim . flnan?) (u10943 core-prim . flmod0) (u10942 core-prim . flmod) (u10941 core-prim . flmin) (u10940 core-prim . flmax) (u10939 core-prim . fllog) (u10938 core-prim . flinteger?) (u10937 core-prim . flinfinite?) (u10936 core-prim . flfloor) (u10935 core-prim . flfinite?) (u10934 core-prim . flexpt) (u10933 core-prim . flexp) (u10932 core-prim . fleven?) (u10931 core-prim . fldiv0-and-mod0) (u10930 core-prim . fldiv0) (u10929 core-prim . fldiv-and-mod) (u10928 core-prim . fldiv) (u10927 core-prim . fldenominator) (u10926 core-prim . flcos) (u10925 core-prim . flceiling) (u10924 core-prim . flatan) (u10923 core-prim . flasin) (u10922 core-prim . flacos) (u10921 core-prim . flabs) (u10920 core-prim . fl>?) (u10919 core-prim . fl>=?) (u10918 core-prim . fl=?) (u10917 core-prim . fl<?) (u10916 core-prim . fl<=?) (u10915 core-prim . fl/) (u10914 core-prim . fl-) (u10913 core-prim . fl+) (u10912 core-prim . fl*) (u10911 core-prim . fixnum->flonum) (u10910 core-prim . fxzero?) (u10909 core-prim . fxxor) (u10908 core-prim . fxrotate-bit-field) (u10907 core-prim . fxreverse-bit-field) (u10906 core-prim . fxpositive?) (u10905 core-prim . fxodd?) (u10904 core-prim . fxnot) (u10903 core-prim . fxnegative?) (u10902 core-prim . fxmod0) (u10901 core-prim . fxmod) (u10900 core-prim . fxmin) (u10899 core-prim . fxmax) (u10898 core-prim . fxlength) (u10897 core-prim . fxior) (u10896 core-prim . fxif) (u10895 core-prim . fxfirst-bit-set) (u10894 core-prim . fxeven?) (u10893 core-prim . fxdiv0-and-mod0) (u10892 core-prim . fxdiv0) (u10891 core-prim . fxdiv-and-mod) (u10890 core-prim . fxdiv) (u10889 core-prim . fxcopy-bit-field) (u10888 core-prim . fxcopy-bit) (u10887 core-prim . fxbit-set?) (u10886 core-prim . fxbit-field) (u10885 core-prim . fxbit-count) (u10884 core-prim . fxarithmetic-shift-right) (u10883 core-prim . fxarithmetic-shift-left) (u10882 core-prim . fxarithmetic-shift) (u10881 core-prim . fxand) (u10880 core-prim . fx>?) (u10879 core-prim . fx>=?) (u10878 core-prim . fx=?) (u10877 core-prim . fx<?) (u10876 core-prim . fx<=?) (u10875 core-prim . fx-/carry) (u10874 core-prim . fx-) (u10873 core-prim . fx+/carry) (u10872 core-prim . fx+) (u10871 core-prim . fx*/carry) (u10870 core-prim . fx*) (u10869 core-prim . greatest-fixnum) (u10868 core-prim . least-fixnum) (u10867 core-prim . fixnum-width) (u10866 core-prim . fixnum?) (u10865 core-prim . bitwise-rotate-bit-field) (u10864 core-prim . bitwise-reverse-bit-field) (u10863 core-prim . bitwise-length) (u10862 core-prim . bitwise-if) (u10861 core-prim . bitwise-first-bit-set) (u10860 core-prim . bitwise-copy-bit-field) (u10859 core-prim . bitwise-copy-bit) (u10858 core-prim . bitwise-bit-set?) (u10857 core-prim . bitwise-bit-field) (u10856 core-prim . bitwise-bit-count) (u10855 core-prim . bitwise-xor) (u10854 core-prim . bitwise-ior) (u10853 core-prim . bitwise-and) (u10852 core-prim . bitwise-not) (u10851 core-prim . bitwise-arithmetic-shift-right) (u10850 core-prim . bitwise-arithmetic-shift-left) (u10849 core-prim . bitwise-arithmetic-shift) (u10848 core-prim . zero?) (u10847 core-prim . vector?) (u10846 core-prim . vector-set!) (u10845 core-prim . vector-ref) (u10844 core-prim . vector-map) (u10843 core-prim . vector-length) (u10842 core-prim . vector-for-each) (u10841 core-prim . vector-fill!) (u10840 core-prim . vector->list) (u10839 core-prim . vector) (u10838 core-prim . values) (u10837 core-prim . truncate) (u10836 core-prim . tan) (u10835 core-prim . symbol?) (u10834 core-prim . symbol=?) (u10833 core-prim . symbol->string) (u10832 core-prim . substring) (u10831 core-prim . string?) (u10830 core-prim . string>?) (u10829 core-prim . string>=?) (u10828 core-prim . string=?) (u10827 core-prim . string<?) (u10826 core-prim . string<=?) (u10825 core-prim . string-ref) (u10824 core-prim . string-length) (u10823 core-prim . string-for-each) (u10822 core-prim . string-copy) (u10821 core-prim . string-append) (u10820 core-prim . string->symbol) (u10819 core-prim . string->number) (u10818 core-prim . string->list) (u10817 core-prim . string) (u10816 core-prim . sqrt) (u10815 core-prim . sin) (u10814 core-prim . round) (u10813 core-prim . reverse) (u10812 core-prim . real?) (u10811 core-prim . real-valued?) (u10810 core-prim . real-part) (u10809 core-prim . rationalize) (u10808 core-prim . rational?) (u10807 core-prim . rational-valued?) (u10806 core-prim . procedure?) (u10805 core-prim . positive?) (u10804 core-prim . pair?) (u10803 core-prim . odd?) (u10802 core-prim . numerator) (u10801 core-prim . number?) (u10800 core-prim . number->string) (u10799 core-prim . null?) (u10798 core-prim . not) (u10797 core-prim . negative?) (u10796 core-prim . nan?) (u10795 core-prim . min) (u10794 core-prim . max) (u10793 core-prim . map) (u10792 core-prim . make-vector) (u10791 core-prim . make-string) (u10790 core-prim . make-rectangular) (u10789 core-prim . make-polar) (u10788 core-prim . magnitude) (u10787 core-prim . log) (u10786 core-prim . list?) (u10785 core-prim . list-tail) (u10784 core-prim . list-ref) (u10783 core-prim . list->vector) (u10782 core-prim . list->string) (u10781 core-prim . list) (u10780 core-prim . length) (u10779 core-prim . lcm) (u10778 core-prim . integer?) (u10777 core-prim . integer-valued?) (u10776 core-prim . integer->char) (u10775 core-prim . infinite?) (u10774 core-prim . inexact?) (u10773 core-prim . inexact) (u10772 core-prim . imag-part) (u10771 core-prim . gcd) (u10770 core-prim . for-each) (u10769 core-prim . floor) (u10768 core-prim . finite?) (u10767 core-prim . expt) (u10766 core-prim . exp) (u10765 core-prim . exact?) (u10764 core-prim . exact-integer-sqrt) (u10763 core-prim . exact) (u10762 core-prim . even?) (u10761 core-prim . error) (u10760 core-prim . eqv?) (u10759 core-prim . equal?) (u10758 core-prim . eq?) (u10757 core-prim . dynamic-wind) (u10756 core-prim . div0-and-mod0) (u10755 core-prim . mod0) (u10754 core-prim . div0) (u10753 core-prim . div-and-mod) (u10752 core-prim . mod) (u10751 core-prim . div) (u10750 core-prim . denominator) (u10749 core-prim . cos) (u10748 core-prim . cons) (u10747 core-prim . complex?) (u10746 core-prim . char?) (u10745 core-prim . char>?) (u10744 core-prim . char>=?) (u10743 core-prim . char=?) (u10742 core-prim . char<?) (u10741 core-prim . char<=?) (u10740 core-prim . char->integer) (u10739 core-prim . ceiling) (u10738 core-prim . call-with-values) (u10737 core-prim . call/cc) (u10736 core-prim . call-with-current-continuation) (u10735 core-prim . cddddr) (u10734 core-prim . cdddar) (u10733 core-prim . cddadr) (u10732 core-prim . cddaar) (u10731 core-prim . cdaddr) (u10730 core-prim . cdadar) (u10729 core-prim . cdaadr) (u10728 core-prim . cdaaar) (u10727 core-prim . cadddr) (u10726 core-prim . caddar) (u10725 core-prim . cadadr) (u10724 core-prim . cadaar) (u10723 core-prim . caaddr) (u10722 core-prim . caadar) (u10721 core-prim . caaadr) (u10720 core-prim . caaaar) (u10719 core-prim . cdddr) (u10718 core-prim . cddar) (u10717 core-prim . cdadr) (u10716 core-prim . cdaar) (u10715 core-prim . caddr) (u10714 core-prim . cadar) (u10713 core-prim . caadr) (u10712 core-prim . caaar) (u10711 core-prim . cddr) (u10710 core-prim . cdar) (u10709 core-prim . cadr) (u10708 core-prim . caar) (u10707 core-prim . cdr) (u10706 core-prim . car) (u10705 core-prim . boolean?) (u10704 core-prim . boolean=?) (u10703 core-prim . atan) (u10702 core-prim . assertion-violation) (u2998 core-prim . assertion-error) (u10701 core-prim . asin) (u10700 core-prim . apply) (u10699 core-prim . append) (u10698 core-prim . angle) (u10697 core-prim . acos) (u10696 core-prim . abs) (u10695 core-prim . /) (u10694 core-prim . *) (u10693 core-prim . -) (u10692 core-prim . +) (u10691 core-prim . >=) (u10690 core-prim . >) (u10689 core-prim . =) (u10688 core-prim . <=) (u10687 core-prim . <) (u10686 core-prim . library) (u10685 $core-rtd &no-nans-rtd &no-nans-rcd) (u10684 $core-rtd &no-infinities-rtd &no-infinities-rcd) (u10683 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (u10682 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (u10681 $core-rtd &i/o-port-rtd &i/o-port-rcd) (u10680 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (u10679 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (u10678 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (u10677 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (u10676 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (u10675 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (u10674 $core-rtd &i/o-write-rtd &i/o-write-rcd) (u10673 $core-rtd &i/o-read-rtd &i/o-read-rcd) (u10672 $core-rtd &i/o-rtd &i/o-rcd) (u10671 $core-rtd &undefined-rtd &undefined-rcd) (u10670 $core-rtd &syntax-rtd &syntax-rcd) (u10669 $core-rtd &lexical-rtd &lexical-rcd) (u10668 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (u10667 $core-rtd &non-continuable-rtd &non-continuable-rcd) (u10666 $core-rtd &who-rtd &who-rcd) (u10665 $core-rtd &irritants-rtd &irritants-rcd) (u10664 $core-rtd &assertion-rtd &assertion-rcd) (u10663 $core-rtd &violation-rtd &violation-rcd) (u10662 $core-rtd &error-rtd &error-rcd) (u10661 $core-rtd &serious-rtd &serious-rcd) (u10660 $core-rtd &warning-rtd &warning-rcd) (u10659 $core-rtd &message-rtd &message-rcd) (u10658 $core-rtd &condition-rtd &condition-rcd) (u10657 macro . define-condition-type) (u10656 macro . define-enumeration) (u10655 macro . define-record-type) (u10654 macro . parent-rtd) (u10653 macro . nongenerative) (u10652 macro . opaque) (u10651 macro . sealed) (u10650 macro . protocol) (u10649 macro . parent) (u10648 macro . immutable) (u10647 macro . mutable) (u10646 macro . fields) (u10645 macro . error-handling-mode) (u10644 macro . file-options) (u10643 macro . buffer-mode) (u10642 macro . eol-style) (u10641 macro . guard) (u10640 macro . trace-define) (u10639 macro . trace-lambda) (u10638 macro . unsyntax-splicing) (u10637 macro . unsyntax) (u10636 macro . unquote-splicing) (u10635 macro . unquote) (u10634 macro . _) (u10633 macro . else) (u10632 macro . =>) (u10631 macro . ...) (u10630 macro . assert) (u10629 macro . endianness) (u10628 macro . delay) (u10627 macro . time) (u10626 macro . do) (u10625 macro . cond) (u10624 macro . let*) (u10623 macro . let) (u10622 macro . let*-values) (u10621 macro . let-values) (u10620 macro . identifier-syntax) (u10619 macro . with-syntax) (u10618 macro . quasisyntax) (u10617 macro . quasiquote) (u10616 macro . syntax-rules) (u10615 macro . include) (u10614 macro . define-struct) (u10613 core-macro . record-constructor-descriptor) (u10612 core-macro . record-type-descriptor) (u10611 macro . case) (u10610 macro . parameterize) (u10609 macro . unless) (u10608 macro . when) (u10607 core-macro . or) (u10606 core-macro . and) (u10605 core-macro . if) (u10604 core-macro . letrec*) (u10603 core-macro . letrec) (u10602 core-macro . type-descriptor) (u10601 core-macro . case-lambda) (u10600 core-macro . lambda) (u10599 core-macro . syntax) (u10598 core-macro . syntax-case) (u10597 core-macro . quote) (u10596 core-macro . foreign-call) (u10595 letrec-syntax) (u10594 let-syntax) (u10593 set!) (u10592 import) (u10591 begin) (u10590 module) (u10589 define-syntax) (u10588 define)) values values '#f '#f '#f '#f) (u1799@u1452@install-library 'u11336 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . u11303) (eval-core . u11302) (set-symbol-value! . u11301) (symbol-value . u11300) (gensym . u922) (void . u11299)) '() values values '#f '#f '#f '#f) (u1799@u1452@install-library 'u11337 '(mosh) '() '() '() '() '((set-symbol-value! . u11301) (symbol-value . u11300) (read-line . u11296) (ungensym . u11295) (alist->eq-hash-table . u11294) (assoc-ref . u11293) (print . u11292) (format . u11291) (host-os . u11290) (library-path . u1419) (standard-library-path . u11289) (file-newer? . u11288) (stat-mtime . u11287) (write-to-file . u11286) (file->list . u11285) (file->string . u11284) (digit->integer . u11283) (call-with-string-input-port . u11282) (call-with-string-io . u11281) (string-split . u11280) (bytevector-for-each . u11279) (string->regexp . u11278) (rxmatch . u11277) (regexp-replace-all . u11276) (hashtable-for-each . u11275) (readdir . u11271) (set-current-directory! . u11270) (expand-path . u11269) (current-directory . u11268) (p . u11253) (get-timeofday . u11248) (get-command-line . u11247) (sys-display . u11246) (mosh-executable-path . u11245) (make-file-options . u11244) (source-info . u11243) (make-compiler-instruction . u11242) (make-instruction . u11241) (set-source-info! . u11240) (bignum? . u11239) (fast-equal? . u11238) (fasl-read . u11237) (fasl-write . u11236) (time-usage . u11235) (os-constant . u11234) (time . u10627) (include . u10615)) '() values values '#f '#f '#f '#f) (u1799@u1452@install-library 'u11338 '(system) '() '() '() '() '((call-process . u11274) (local-tz-offset . u11273) (microseconds . u11272) (expand-path . u11269) (%spawn . u11267) (%waitpid . u11266) (%ffi-supported? . u11265) (%ffi-pointer-ref . u11264) (%ffi-pointer->string . u11263) (%ffi-call->string-or-zero . u11262) (%ffi-call->double . u11261) (%ffi-call->void* . u11260) (%ffi-call->void . u11259) (%ffi-call->int . u11258) (%ffi-lookup . u11257) (%ffi-open . u11256) (%fork . u11255) (%pipe . u11254) (open-output-string . u11252) (get-output-string . u11251) (get-environment-variables . u11250) (get-environment-variable . u11249) (make-parameter . u950) (socket-shutdown . u11233) (socket-close . u11232) (socket-send . u11231) (socket-recv . u11230) (make-server-socket . u11229) (make-client-socket . u11228) (socket-accept . u11227) (socket? . u11226) (parameterize . u10610)) '() values values '#f '#f '#f '#f))
((lambda (u10320@add-library-path! u10322@parse-and-add-library-path u10324@for-each-with-index u10326@rpad u10328@condition-printer u10330@record->field-alist u10332@map-with-index u10334@repl u10336@trace-printer u10338@command-line u10340@local-library-path u10342@load/args u10344@load u10346@ironscheme-build u10348@eval-top-level u10350@compile-system-libraries u10352@compile u10354@compile->closure u10356@pre-compile-r6rs-file u10358@load-r6rs-top-level) (begin (set! u10320@add-library-path! (lambda (u10385@path) (u1783@u1420@library-path (append (u1783@u1420@library-path) (list u10385@path))))) (set! u10322@parse-and-add-library-path (lambda (u10387@paths u10388@message) ((lambda (u10391@t) (if u10391@t ((lambda (u10393@paths) (for-each (lambda (u10395@path) (if (file-exists? u10395@path) (u10320@add-library-path! (expand-path u10395@path)) (format (current-error-port) u10388@message u10395@path))) (reverse (string-split u10393@paths '#\:)))) u10391@t) (void))) u10387@paths))) (set! u10324@for-each-with-index (lambda (u10397@proc u10398@lst) (letrec ((u10401@loop (lambda (u10403@i u10404@lst) (if (null? u10404@lst) (if '#f '#f (void)) (begin (u10397@proc u10403@i (car u10404@lst)) (u10401@loop (+ u10403@i '1) (cdr u10404@lst))))))) (u10401@loop '1 u10398@lst)))) (set! u10326@rpad (lambda (u10407@str u10408@pad u10409@n) ((lambda (u10413@rest) ((letrec ((u10415@loop (lambda (u10417@rest u10418@ret) (if (<= u10417@rest '0) u10418@ret (u10415@loop (- u10417@rest '1) (string-append u10418@ret u10408@pad)))))) u10415@loop) u10413@rest (format '"~a" u10407@str))) (- u10409@n (string-length (format '"~a" u10407@str)))))) (set! u10328@condition-printer (lambda (u10421@e u10422@port) ((lambda (u10426@max-condition-len) (begin (set! u10426@max-condition-len (apply max (map (lambda (u10443@c) (string-length (symbol->string (record-type-name (record-rtd u10443@c))))) (simple-conditions u10421@e)))) (begin (display '" Condition components:\n" u10422@port) (u10324@for-each-with-index (lambda (u10427@i u10428@x) ((lambda (u10431@rtd u10432@fields-alist) (begin (format u10422@port '" ~d. ~a" u10427@i (u10326@rpad (symbol->string (record-type-name u10431@rtd)) '" " u10426@max-condition-len)) (if (null? u10432@fields-alist) (newline u10422@port) (void)) ((letrec ((u10435@loop (lambda (u10437@first u10438@fields-alist) (if (null? u10438@fields-alist) '() ((lambda (u10441@field) (begin (if (not u10437@first) (display (u10326@rpad '"" '" " (+ '4 u10426@max-condition-len)) u10422@port) (void)) (display '"       " u10422@port) (display (car u10441@field) u10422@port) (display '": " u10422@port) (write (cdr u10441@field) u10422@port) (newline u10422@port) (u10435@loop '#f (cdr u10438@fields-alist)))) (car u10438@fields-alist)))))) u10435@loop) '#t u10432@fields-alist))) (record-rtd u10428@x) (u10330@record->field-alist u10428@x))) (simple-conditions u10421@e))))) '#f))) (set! u10330@record->field-alist (lambda (u10445@r) ((lambda (u10448@ref) (begin (set! u10448@ref (lambda (u10459@rtd u10460@i u10461@x) ((lambda (u10465@val) (if (symbol? u10465@val) (ungensym u10465@val) u10465@val)) ((record-accessor u10459@rtd u10460@i) u10461@x)))) ((letrec ((u10449@loop (lambda (u10451@ret u10452@rtd) (if u10452@rtd (u10449@loop (append u10451@ret (u10332@map-with-index (lambda (u10455@i u10456@field) (cons u10456@field (u10448@ref u10452@rtd u10455@i u10445@r))) (vector->list (record-type-field-names u10452@rtd)))) (record-type-parent u10452@rtd)) u10451@ret)))) u10449@loop) '() (record-rtd u10445@r)))) '#f))) (set! u10332@map-with-index (lambda (u10467@proc u10468@lst) ((letrec ((u10471@loop (lambda (u10473@i u10474@lst u10475@ret) (if (null? u10474@lst) (reverse u10475@ret) (u10471@loop (+ u10473@i '1) (cdr u10474@lst) (cons (u10467@proc u10473@i (car u10474@lst)) u10475@ret)))))) u10471@loop) '0 u10468@lst '()))) (set! u10334@repl (lambda u10479@x ((lambda (u10482@rec) (begin (set! u10482@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (u10485@u10483) (lambda () (with-exception-handler (lambda (u10487@e) ((call/cc (lambda (u10489@u10484) (u10485@u10483 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? u10487@e) (u10328@condition-printer u10487@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" u10487@e))) (u10489@u10484 (lambda () (raise-continuable u10487@e)))))))))) (lambda () ((letrec ((u10491@loop (lambda (u10493@line u10494@accum) ((lambda (u10498@parentheses-ok? u10500@eval-string-print) (begin (set! u10498@parentheses-ok? (lambda (u10505@text) ((letrec ((u10507@loop (lambda (u10509@chars u10510@p0 u10511@p1) (if (null? u10509@chars) (= '0 u10510@p0 u10511@p1) ((lambda (u10515@t) (if (memv u10515@t '(#\()) (u10507@loop (cdr u10509@chars) (+ u10510@p0 '1) u10511@p1) (if (memv u10515@t '(#\))) (u10507@loop (cdr u10509@chars) (- u10510@p0 '1) u10511@p1) (if (memv u10515@t '(#\[)) (u10507@loop (cdr u10509@chars) u10510@p0 (+ u10511@p1 '1)) (if (memv u10515@t '(#\])) (u10507@loop (cdr u10509@chars) u10510@p0 (- u10511@p1 '1)) (u10507@loop (cdr u10509@chars) u10510@p0 u10511@p1)))))) (car u10509@chars)))))) u10507@loop) (string->list u10505@text) '0 '0))) (set! u10500@eval-string-print (lambda (u10503@text) (if (not (or (string=? '"\n" u10503@text) (= '0 (string-length u10503@text)))) (write (u10348@eval-top-level (call-with-port (open-string-input-port u10503@text) read))) (void)))) (if (eof-object? u10493@line) (begin (u10500@eval-string-print u10494@accum) (exit)) ((lambda (u10501@current) (if (u10498@parentheses-ok? u10501@current) (u10500@eval-string-print u10501@current) (u10491@loop (get-line (current-input-port)) u10501@current))) (string-append u10494@accum u10493@line))))) '#f '#f)))) u10491@loop) (get-line (current-input-port)) '""))))))) (newline) (u10482@rec)))) (u10482@rec))) '#f))) (set! u10336@trace-printer (u1173@u951@make-parameter write)) (set! u10338@command-line (u1173@u951@make-parameter (get-command-line))) (set! u10340@local-library-path (lambda (u10517@filename) (cons (expand-path '".") (u1783@u1420@library-path)))) (set! u10342@load/args (lambda (u10519@filename . u10521@args) (begin (apply u10358@load-r6rs-top-level u10519@filename 'load u10521@args) (void)))) (set! u10344@load (lambda (u10523@filename) (begin (apply u10358@load-r6rs-top-level u10523@filename 'load (u10338@command-line)) (void)))) (set! u10346@ironscheme-build (lambda () (u10344@load '"ironscheme-buildscript.ss"))) (set! u10348@eval-top-level (lambda (u10525@x) (u9352@u2973@eval u10525@x (u9374@u3017@interaction-environment)))) (set! u10350@compile-system-libraries (lambda () (u10348@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! u10352@compile (lambda (u10527@filename) (u10358@load-r6rs-top-level u10527@filename 'compile))) (set! u10354@compile->closure (lambda (u10529@filename) (u10358@load-r6rs-top-level u10529@filename 'closure))) (set! u10356@pre-compile-r6rs-file (lambda (u10531@filename) (u10358@load-r6rs-top-level u10531@filename 'compile))) (set! u10358@load-r6rs-top-level (lambda (u10533@filename u10534@how . u10537@args) ((lambda (u10541@u10539@library-path u10542@u10540@library-path) ((lambda (u10545@swap) (dynamic-wind u10545@swap (lambda () ((lambda (u10547@x*) ((lambda (u10549@t) (if (memv u10549@t '(closure)) (u9373@u3015@pre-compile-r6rs-top-level u10547@x*) (if (memv u10549@t '(load)) ((lambda (u10553@u10551@command-line u10554@u10552@command-line) ((lambda (u10557@swap) (dynamic-wind u10557@swap (lambda () ((u9372@u3013@compile-r6rs-top-level u10547@x*))) u10557@swap)) (lambda () ((lambda (u10559@t) (begin (u10553@u10551@command-line u10554@u10552@command-line) (set! u10554@u10552@command-line u10559@t))) (u10553@u10551@command-line))))) u10338@command-line (cons u10533@filename (car u10537@args))) (if (memv u10549@t '(compile)) (begin (u9372@u3013@compile-r6rs-top-level u10547@x*) (u1787@u1428@serialize-all u1168@u941@serialize-library u1258@u1187@compile-core-expr)) (if '#f '#f (void)))))) u10534@how)) (with-input-from-file u10533@filename (lambda () ((letrec ((u10561@f (lambda () ((lambda (u10563@x) (if (eof-object? u10563@x) '() (cons u10563@x (u10561@f)))) (u1160@u925@read-annotated))))) u10561@f)))))) u10545@swap)) (lambda () ((lambda (u10565@t) (begin (u10541@u10539@library-path u10542@u10540@library-path) (set! u10542@u10540@library-path u10565@t))) (u10541@u10539@library-path))))) u1783@u1420@library-path (u10340@local-library-path u10533@filename)))) (begin (set! u10586@u10358@load-r6rs-top-level u10358@load-r6rs-top-level) (set! u10585@u10356@pre-compile-r6rs-file u10356@pre-compile-r6rs-file) (set! u10584@u10354@compile->closure u10354@compile->closure) (set! u10583@u10352@compile u10352@compile) (set! u10582@u10350@compile-system-libraries u10350@compile-system-libraries) (set! u10581@u10348@eval-top-level u10348@eval-top-level) (set! u10580@u10346@ironscheme-build u10346@ironscheme-build) (set! u10579@u10344@load u10344@load) (set! u10578@u10342@load/args u10342@load/args) (set! u10577@u10340@local-library-path u10340@local-library-path) (set! u10576@u10338@command-line u10338@command-line) (set! u10575@u10336@trace-printer u10336@trace-printer) (set! u10574@u10334@repl u10334@repl) (set! u10573@u10332@map-with-index u10332@map-with-index) (set! u10572@u10330@record->field-alist u10330@record->field-alist) (set! u10571@u10328@condition-printer u10328@condition-printer) (set! u10570@u10326@rpad u10326@rpad) (set! u10569@u10324@for-each-with-index u10324@for-each-with-index) (set! u10568@u10322@parse-and-add-library-path u10322@parse-and-add-library-path) (set! u10567@u10320@add-library-path! u10320@add-library-path!) (u1788@u1430@current-precompiled-library-loader u1169@u943@load-serialized-library) (set-symbol-value! 'load u10344@load) (set-symbol-value! 'pre-compile-r6rs-file u10356@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs u10348@eval-top-level) (set-symbol-value! 'int-env-syms u9343@u2955@interaction-environment-symbols) (set-symbol-value! 'expanded2core u1257@u1185@expanded->core) (set-symbol-value! 'trace-printer u10336@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (u10359@c) (condition (u10157@u9661@make-non-continuable-violation) (u10147@u9636@make-who-condition 'raise) (u10087@u9479@make-message-condition '"returned from non-continuable exception") (u10137@u9610@make-irritants-condition (list u10359@c))))) (u10322@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (u10322@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (u10320@add-library-path! (string-append (mosh-executable-path) '"/lib")) (u10320@add-library-path! (string-append (current-directory) '"/lib"))) (u10320@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (u10361@prefix) (u1784@u1422@library-extensions (u10361@prefix '".mosh" (u1784@u1422@library-extensions)))) (lambda (u10363@ext u10364@ls) (append (map (lambda (u10367@x) (string-append u10363@ext u10367@x)) u10364@ls) u10364@ls))) ((lambda (u10369@args u10370@port) ((lambda (u10374@ref) (begin (set! u10374@ref (lambda (u10377@rtd u10378@i u10379@x) ((lambda (u10383@val) (if (symbol? u10383@val) (ungensym u10383@val) u10383@val)) ((record-accessor u10377@rtd u10378@i) u10379@x)))) (with-exception-handler (lambda (u10375@c) (if (condition? u10375@c) (u10328@condition-printer u10375@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" u10375@c))) (lambda () (if (null? u10369@args) (u10334@repl) (u10358@load-r6rs-top-level (car u10369@args) 'load (cdr u10369@args))))))) '#f)) (u10338@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
