;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (p910@make-gensym-counter p912@gen-sym-prefix p914@gen-sym-counter p916@gensym p918@read-annotated p920@annotation-stripped p922@annotation? p924@annotation-source p926@annotation-expression p928@scm->fasl p930@fasl-save p932@fasl-load p934@serialize-library p936@load-serialized-library p938@make-record-printer p940@compile-core p942@read-library-source-file p944@make-parameter p1044@file-options-spec) (begin (set! p910@make-gensym-counter (lambda (p1045@i) ((lambda (p1048@inc) (begin (set! p1048@inc (lambda () (begin (set! p1045@i (+ p1045@i '1)) p1045@i))) p1048@inc)) '#f))) (set! p912@gen-sym-prefix ((lambda (p1049@v) (if p1049@v (string->symbol p1049@v) 'A)) (get-environment-variable '"MOSH_GENSYM_PREFIX"))) (set! p914@gen-sym-counter (p910@make-gensym-counter '0)) (set! p916@gensym (lambda p1051@x (string->symbol (if (null? p1051@x) (format '"~a~a" p912@gen-sym-prefix (p914@gen-sym-counter)) (format '"~a~a@~a" p912@gen-sym-prefix (p914@gen-sym-counter) (car p1051@x)))))) (set! p918@read-annotated read) (set! p920@annotation-stripped (lambda (p1053@x) (p926@annotation-expression p1053@x))) (set! p922@annotation? (lambda (p1055@x) (source-info p1055@x))) (set! p924@annotation-source (lambda (p1057@x) (source-info p1057@x))) (set! p926@annotation-expression (lambda (p1059@x) (if (pair? p1059@x) (cons (car p1059@x) (cdr p1059@x)) (display '"line:46\n")))) (set! p928@scm->fasl (lambda (p1061@filename) (string-append p1061@filename '".fasl"))) (set! p930@fasl-save (lambda (p1063@filename p1064@obj) (call-with-port (open-file-output-port p1063@filename) (lambda (p1067@port) ((symbol-value 'fasl-write!) p1064@obj p1067@port))))) (set! p932@fasl-load (lambda (p1069@filename) (call-with-port (open-file-input-port p1069@filename) (symbol-value 'fasl-read!)))) (set! p934@serialize-library (lambda (p1071@filename p1072@obj) (begin (format '#t '"serialize-library ~a\n..." p1071@filename) ((lambda (p1075@expanded2core) ((lambda (p1077@compile) ((lambda (p1079@code) ((lambda (p1081@pivot) ((lambda (p1083@visit) ((lambda () (begin (set-car! p1081@pivot p1083@visit) ((lambda (p1085@pivot) ((lambda (p1087@invoke) ((lambda () (set-car! p1085@pivot p1087@invoke)))) (p1077@compile (p1075@expanded2core (car p1085@pivot))))) (cdr p1081@pivot)))))) (p1077@compile (p1075@expanded2core (car p1081@pivot))))) (cddddr (cddddr p1079@code)))) p1072@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (p1089@fasl-file) (begin (if (file-exists? p1089@fasl-file) (delete-file p1089@fasl-file) (void)) ((call/cc (lambda (p1093@p1091) (lambda () (with-exception-handler (lambda (p1095@c) ((call/cc (lambda (p1097@p1092) (p1093@p1091 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " p1071@filename) (if (file-exists? p1089@fasl-file) (delete-file p1089@fasl-file) (void)) '#f) (p1097@p1092 (lambda () (raise-continuable p1095@c)))))))))) (lambda () (begin (p930@fasl-save p1089@fasl-file p1072@obj) (display '"OK\n")))))))))) (p928@scm->fasl p1071@filename))))) (set! p936@load-serialized-library (lambda (p1099@filename p1100@obj) ((lambda (p1103@fasl-file) (if (and (file-exists? p1103@fasl-file) ((symbol-value 'file-newer?) p1103@fasl-file p1099@filename)) ((lambda (p1105@expanded2core) ((lambda (p1107@eval-compiled-core) ((lambda (p1109@code) ((lambda (p1111@pivot) ((lambda (p1113@visit) ((lambda (p1115@visit-proc) ((lambda () (begin (set-car! p1111@pivot p1115@visit-proc) ((lambda (p1117@pivot) ((lambda (p1119@invoke) ((lambda () (begin (set-car! p1117@pivot (lambda () (p1107@eval-compiled-core p1119@invoke))) (apply p1100@obj p1109@code))))) (car p1117@pivot))) (cdr p1111@pivot)) '#t)))) (lambda () (p1107@eval-compiled-core p1113@visit)))) (car p1111@pivot))) (cddddr (cddddr p1109@code)))) (p932@fasl-load p1103@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (p928@scm->fasl p1099@filename)))) (set! p938@make-record-printer (lambda (p1121@name p1122@printer) (lambda p1125@x (begin (display '"record printer") (for-each display p1125@x))))) (set! p940@compile-core (lambda p1127@x (apply error 'comile-core '"not implementated" p1127@x))) (set! p942@read-library-source-file (lambda (p1129@file-name) (with-input-from-file p1129@file-name p918@read-annotated))) (set! p944@make-parameter (lambda p1145 ((lambda (p1146) (if (= p1146 '1) (apply (lambda (p1131@x) (p944@make-parameter p1131@x (lambda (p1133@x) p1133@x))) p1145) (if (= p1146 '2) (apply (lambda (p1135@x p1136@fender) ((lambda (p1139@x) (lambda p1143 ((lambda (p1144) (if (= p1144 '0) (apply (lambda () p1139@x) p1143) (if (= p1144 '1) (apply (lambda (p1141@v) (set! p1139@x (p1136@fender p1141@v))) p1143) (error 'apply '"invalid arg count")))) (length p1143)))) (p1136@fender p1135@x))) p1145) (error 'apply '"invalid arg count")))) (length p1145)))) (set! p1044@file-options-spec (lambda (p1147@x) p1147@x)) (begin (set! p1167@p1044@file-options-spec p1044@file-options-spec) (set! p1166@p944@make-parameter p944@make-parameter) (set! p1165@p942@read-library-source-file p942@read-library-source-file) (set! p1164@p940@compile-core p940@compile-core) (set! p1163@p938@make-record-printer p938@make-record-printer) (set! p1162@p936@load-serialized-library p936@load-serialized-library) (set! p1161@p934@serialize-library p934@serialize-library) (set! p1160@p932@fasl-load p932@fasl-load) (set! p1159@p930@fasl-save p930@fasl-save) (set! p1158@p928@scm->fasl p928@scm->fasl) (set! p1157@p926@annotation-expression p926@annotation-expression) (set! p1156@p924@annotation-source p924@annotation-source) (set! p1155@p922@annotation? p922@annotation?) (set! p1154@p920@annotation-stripped p920@annotation-stripped) (set! p1153@p918@read-annotated p918@read-annotated) (set! p1152@p916@gensym p916@gensym) (set! p1151@p914@gen-sym-counter p914@gen-sym-counter) (set! p1150@p912@gen-sym-prefix p912@gen-sym-prefix) (set! p1149@p910@make-gensym-counter p910@make-gensym-counter)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (p1172@current-primitive-locations p1174@mutable? p1176@rewriter p1178@expanded->core p1180@compile-core-expr p1182@pretty-print p1184@compile-core-expr-to-port) (begin (set! p1172@current-primitive-locations (p1166@p944@make-parameter (lambda (p1185@x) '#f) (lambda (p1187@p) p1187@p))) (set! p1174@mutable? (lambda (p1189@x) (or (pair? p1189@x) (vector? p1189@x) (hashtable? p1189@x)))) (set! p1176@rewriter (lambda (p1191@quote-hack?) ((lambda (p1194@f) (begin (set! p1194@f (lambda (p1195@x) (if (pair? p1195@x) ((lambda (p1197@t) (if (memv p1197@t '(quote)) (if (and p1191@quote-hack? (p1174@mutable? (cadr p1195@x))) ((lambda (p1199@g) (begin (set-symbol-value! p1199@g (cadr p1195@x)) p1199@g)) (p1152@p916@gensym)) p1195@x) (if (memv p1197@t '(case-lambda)) (cons 'case-lambda (map (lambda (p1201@x) (cons (car p1201@x) (map p1194@f (cdr p1201@x)))) (cdr p1195@x))) (if (memv p1197@t '(lambda)) (cons* 'lambda (cadr p1195@x) (map p1194@f (cddr p1195@x))) (if (memv p1197@t '(letrec)) ((lambda (p1203@bindings p1204@body*) ((lambda (p1207@lhs* p1208@rhs*) (cons* 'letrec (map list p1207@lhs* (map p1194@f p1208@rhs*)) (map p1194@f p1204@body*))) (map car p1203@bindings) (map cadr p1203@bindings))) (cadr p1195@x) (cddr p1195@x)) (if (memv p1197@t '(letrec*)) ((lambda (p1211@bindings p1212@body*) ((lambda (p1215@lhs* p1216@rhs*) (cons* 'letrec* (map list p1215@lhs* (map p1194@f p1216@rhs*)) (map p1194@f p1212@body*))) (map car p1211@bindings) (map cadr p1211@bindings))) (cadr p1195@x) (cddr p1195@x)) (if (memv p1197@t '(library-letrec*)) ((lambda (p1219@name p1220@x) ((lambda (p1223@bindings p1224@body*) ((lambda (p1227@lhs* p1228@lhs** p1229@rhs*) (cons* 'library-letrec* p1219@name (map list p1227@lhs* p1228@lhs** (map p1194@f p1229@rhs*)) (map p1194@f p1224@body*))) (map car p1223@bindings) (map cadr p1223@bindings) (map caddr p1223@bindings))) (cadr p1220@x) (cddr p1220@x))) (cadr p1195@x) (cdr p1195@x)) (if (memv p1197@t '(begin)) (cons 'begin (map p1194@f (cdr p1195@x))) (if (memv p1197@t '(set!)) (list 'set! (cadr p1195@x) (p1194@f (caddr p1195@x))) (if (memv p1197@t '(primitive)) ((lambda (p1233@op) ((lambda (p1235@t) (if p1235@t ((lambda (p1237@loc) p1237@loc) p1235@t) p1233@op)) ((p1172@current-primitive-locations) p1233@op))) (cadr p1195@x)) (if (memv p1197@t '(define)) p1195@x (if (list? p1195@x) (map p1194@f p1195@x) (error 'rewrite '"invalid form ~s ~s" p1195@x (list? p1195@x)))))))))))))) (car p1195@x)) p1195@x))) p1194@f)) '#f))) (set! p1178@expanded->core (lambda (p1239@x) ((p1176@rewriter '#f) p1239@x))) (set! p1180@compile-core-expr (lambda (p1241@x) ((p1176@rewriter '#f) p1241@x))) (set! p1182@pretty-print write) (set! p1184@compile-core-expr-to-port (lambda (p1243@x p1244@p) (p1182@pretty-print ((p1176@rewriter '#f) p1243@x) p1244@p))) (begin (set! p1253@p1184@compile-core-expr-to-port p1184@compile-core-expr-to-port) (set! p1252@p1182@pretty-print p1182@pretty-print) (set! p1251@p1180@compile-core-expr p1180@compile-core-expr) (set! p1250@p1178@expanded->core p1178@expanded->core) (set! p1249@p1176@rewriter p1176@rewriter) (set! p1248@p1174@mutable? p1174@mutable?) (set! p1247@p1172@current-primitive-locations p1172@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (p1332@make-collection p1334@current-library-collection p1340@p1335 p1342@p1337 p1344@p1336 p1347@library? p1349@make-library p1351@library-id p1353@library-name p1355@library-version p1357@library-imp* p1359@library-vis* p1361@library-inv* p1363@library-subst p1365@library-env p1367@library-visit-state p1369@library-invoke-state p1371@library-visit-code p1373@library-invoke-code p1375@library-visible? p1377@library-source-file-name p1379@set-library-id! p1381@set-library-name! p1383@set-library-version! p1385@set-library-imp*! p1387@set-library-vis*! p1389@set-library-inv*! p1391@set-library-subst! p1393@set-library-env! p1395@set-library-visit-state! p1397@set-library-invoke-state! p1399@set-library-visit-code! p1401@set-library-invoke-code! p1403@set-library-visible?! p1405@set-library-source-file-name! p1407@rp p1409@find-dependencies p1411@find-library-by p1413@library-path p1415@library-extensions p1417@library-name->file-name p1419@file-locator p1421@serialize-all p1423@current-precompiled-library-loader p1425@try-load-from-file p1427@library-loader p1429@current-library-expander p1431@external-pending-libraries p1433@find-external-library p1435@find-library-by-name p1437@library-exists? p1439@find-library-by-spec/die p1441@label->binding-table p1443@install-library-record p1445@install-library p1447@imported-label->binding p1449@invoke-library p1451@visit-library p1453@invoke-library-by-spec p1455@installed-libraries p1457@library-spec) (begin (set! p1332@make-collection (lambda () ((lambda (p1458@set) ((lambda (p1461@set-cons) (begin (set! p1461@set-cons (lambda (p1466@x p1467@ls) (if (memq p1466@x p1467@ls) p1467@ls (cons p1466@x p1467@ls)))) (lambda p1464 ((lambda (p1465) (if (= p1465 '0) (apply (lambda () p1458@set) p1464) (if (= p1465 '1) (apply (lambda (p1462@x) (set! p1458@set (p1461@set-cons p1462@x p1458@set))) p1464) (error 'apply '"invalid arg count")))) (length p1464))))) '#f)) '()))) (set! p1334@current-library-collection (p1166@p944@make-parameter (p1332@make-collection) (lambda (p1470@x) (begin (if (not (procedure? p1470@x)) (assertion-violation 'current-library-collection '"not a procedure" p1470@x) (void)) p1470@x)))) (set! p1340@p1335 (make-record-type-descriptor 'library '#f 'p1338 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! p1342@p1337 '#f) (set! p1344@p1336 (make-record-constructor-descriptor p1340@p1335 '#f p1342@p1337)) (set! p1347@library? (record-predicate p1340@p1335)) (set! p1349@make-library (record-constructor p1344@p1336)) (set! p1351@library-id (record-accessor p1340@p1335 '0)) (set! p1353@library-name (record-accessor p1340@p1335 '1)) (set! p1355@library-version (record-accessor p1340@p1335 '2)) (set! p1357@library-imp* (record-accessor p1340@p1335 '3)) (set! p1359@library-vis* (record-accessor p1340@p1335 '4)) (set! p1361@library-inv* (record-accessor p1340@p1335 '5)) (set! p1363@library-subst (record-accessor p1340@p1335 '6)) (set! p1365@library-env (record-accessor p1340@p1335 '7)) (set! p1367@library-visit-state (record-accessor p1340@p1335 '8)) (set! p1369@library-invoke-state (record-accessor p1340@p1335 '9)) (set! p1371@library-visit-code (record-accessor p1340@p1335 '10)) (set! p1373@library-invoke-code (record-accessor p1340@p1335 '11)) (set! p1375@library-visible? (record-accessor p1340@p1335 '12)) (set! p1377@library-source-file-name (record-accessor p1340@p1335 '13)) (set! p1379@set-library-id! (record-mutator p1340@p1335 '0)) (set! p1381@set-library-name! (record-mutator p1340@p1335 '1)) (set! p1383@set-library-version! (record-mutator p1340@p1335 '2)) (set! p1385@set-library-imp*! (record-mutator p1340@p1335 '3)) (set! p1387@set-library-vis*! (record-mutator p1340@p1335 '4)) (set! p1389@set-library-inv*! (record-mutator p1340@p1335 '5)) (set! p1391@set-library-subst! (record-mutator p1340@p1335 '6)) (set! p1393@set-library-env! (record-mutator p1340@p1335 '7)) (set! p1395@set-library-visit-state! (record-mutator p1340@p1335 '8)) (set! p1397@set-library-invoke-state! (record-mutator p1340@p1335 '9)) (set! p1399@set-library-visit-code! (record-mutator p1340@p1335 '10)) (set! p1401@set-library-invoke-code! (record-mutator p1340@p1335 '11)) (set! p1403@set-library-visible?! (record-mutator p1340@p1335 '12)) (set! p1405@set-library-source-file-name! (record-mutator p1340@p1335 '13)) (set! p1407@rp (p1163@p938@make-record-printer 'library (lambda (p1472@x p1473@p p1474@wr) (begin (if (not (p1347@library? p1472@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (p1355@library-version p1472@x)) (p1353@library-name p1472@x) (append (p1353@library-name p1472@x) (list (p1355@library-version p1472@x))))) p1473@p))))) (set! p1409@find-dependencies (lambda (p1478@ls) (if (null? p1478@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! p1411@find-library-by (lambda (p1480@pred) ((letrec ((p1482@f (lambda (p1484@ls) (if (null? p1484@ls) '#f (if (p1480@pred (car p1484@ls)) (car p1484@ls) (p1482@f (cdr p1484@ls))))))) p1482@f) ((p1334@current-library-collection))))) (set! p1413@library-path (p1166@p944@make-parameter '(".") (lambda (p1486@x) (if (and (list? p1486@x) (for-all string? p1486@x)) (map (lambda (p1488@x) p1488@x) p1486@x) (assertion-violation 'library-path '"not a list of strings" p1486@x))))) (set! p1415@library-extensions (p1166@p944@make-parameter '(".sls" ".ss" ".scm") (lambda (p1490@x) (if (and (list? p1490@x) (for-all string? p1490@x)) (map (lambda (p1492@x) p1492@x) p1490@x) (assertion-violation 'library-extensions '"not a list of strings" p1490@x))))) (set! p1417@library-name->file-name (lambda (p1494@x) (call-with-values (lambda () (open-string-output-port)) (lambda (p1498@p1496@p p1499@p1497@extract) ((lambda (p1502@extract p1503@p) ((lambda (p1507@display-hex) (begin (set! p1507@display-hex (lambda (p1516@n) (if (<= '0 p1516@n '9) (display p1516@n p1503@p) (display (integer->char (+ (char->integer '#\a) (- p1516@n '10))) p1503@p)))) (begin ((letrec ((p1508@f (lambda (p1510@ls) (if (not (null? p1510@ls)) (begin (display '"/" p1503@p) (for-each (lambda (p1512@c) (if (or (char<=? '#\a p1512@c '#\z) (char<=? '#\A p1512@c '#\Z) (char<=? '#\0 p1512@c '#\9) (memv p1512@c '(#\- #\. #\_ #\~))) (display p1512@c p1503@p) (begin (display '"%" p1503@p) ((lambda (p1514@n) (begin (p1507@display-hex (quotient p1514@n '16)) (p1507@display-hex (remainder p1514@n '16)))) (char->integer p1512@c))))) (string->list (symbol->string (car p1510@ls)))) (p1508@f (cdr p1510@ls))) (void))))) p1508@f) p1494@x) (p1502@extract)))) '#f)) p1499@p1497@extract p1498@p1496@p))))) (set! p1419@file-locator (p1166@p944@make-parameter (lambda (p1518@x) ((lambda (p1520@str) ((letrec ((p1522@f (lambda (p1524@ls p1525@exts p1526@failed-list) (if (null? p1524@ls) ((lambda () ((lambda (p1538@p1533 p1540@p1535 p1542@p1534 p1545@p1532 p1547@make-library-resolution-condition p1549@p1530 p1551@p1531 p1553@library-resolution-condition? p1555@condition-library p1557@condition-files) (begin (set! p1538@p1533 (make-record-type-descriptor '&library-resolution p10074@p9389@&condition-rtd 'p1536 '#f '#f '#((immutable library) (immutable files)))) (set! p1540@p1535 '#f) (set! p1542@p1534 (make-record-constructor-descriptor p1538@p1533 p10075@p9391@&condition-rcd p1540@p1535)) (set! p1545@p1532 (record-predicate p1538@p1533)) (set! p1547@make-library-resolution-condition (record-constructor p1542@p1534)) (set! p1549@p1530 (record-accessor p1538@p1533 '0)) (set! p1551@p1531 (record-accessor p1538@p1533 '1)) (set! p1553@library-resolution-condition? (condition-predicate p1538@p1533)) (set! p1555@condition-library (condition-accessor p1538@p1533 p1549@p1530)) (set! p1557@condition-files (condition-accessor p1538@p1533 p1551@p1531)) (raise (condition (p10106@p9539@make-error) (p10140@p9629@make-who-condition 'expander) (p10080@p9472@make-message-condition '"cannot locate library in library-path") (p1547@make-library-resolution-condition p1518@x (reverse p1526@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? p1525@exts) (p1522@f (cdr p1524@ls) (p1415@library-extensions) p1526@failed-list) ((lambda (p1558@name) (if (file-exists? p1558@name) p1558@name (p1522@f p1524@ls (cdr p1525@exts) (cons p1558@name p1526@failed-list)))) (string-append (car p1524@ls) p1520@str (car p1525@exts)))))))) p1522@f) (p1413@library-path) (p1415@library-extensions) '())) (p1417@library-name->file-name p1518@x))) (lambda (p1560@f) (if (procedure? p1560@f) p1560@f (assertion-violation 'file-locator '"not a procedure" p1560@f))))) (set! p1421@serialize-all (lambda (p1562@serialize p1563@compile) ((lambda (p1567@library-desc) (begin (set! p1567@library-desc (lambda (p1570@x) (list (p1351@library-id p1570@x) (p1353@library-name p1570@x)))) (for-each (lambda (p1568@x) (if (p1377@library-source-file-name p1568@x) (p1562@serialize (p1377@library-source-file-name p1568@x) (list (p1351@library-id p1568@x) (p1353@library-name p1568@x) (p1355@library-version p1568@x) (map p1567@library-desc (p1357@library-imp* p1568@x)) (map p1567@library-desc (p1359@library-vis* p1568@x)) (map p1567@library-desc (p1361@library-inv* p1568@x)) (p1363@library-subst p1568@x) (p1365@library-env p1568@x) (p1563@compile (p1371@library-visit-code p1568@x)) (p1563@compile (p1373@library-invoke-code p1568@x)) (p1375@library-visible? p1568@x))) (void))) ((p1334@current-library-collection))))) '#f))) (set! p1423@current-precompiled-library-loader (p1166@p944@make-parameter (lambda (p1572@filename p1573@sk) '#f))) (set! p1425@try-load-from-file (lambda (p1576@filename) ((p1423@current-precompiled-library-loader) p1576@filename (lambda p1614 ((lambda (p1615) (if (= p1615 '11) (apply (lambda (p1578@id p1579@name p1580@ver p1581@imp* p1582@vis* p1583@inv* p1584@exp-subst p1585@exp-env p1586@visit-proc p1587@invoke-proc p1588@visible?) ((letrec ((p1600@f (lambda (p1602@deps) (if (null? p1602@deps) (begin (p1445@install-library p1578@id p1579@name p1580@ver p1581@imp* p1582@vis* p1583@inv* p1584@exp-subst p1585@exp-env p1586@visit-proc p1587@invoke-proc '#f '#f p1588@visible? '#f) '#t) ((lambda (p1604@d) ((lambda (p1606@label p1607@dname) ((lambda (p1610@l) (if (and (p1347@library? p1610@l) (eq? p1606@label (p1351@library-id p1610@l))) (p1600@f (cdr p1602@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" p1579@name p1607@dname p1576@filename p1610@l p1606@label (p1351@library-id p1610@l)) '#f))) (p1435@find-library-by-name p1607@dname))) (car p1604@d) (cadr p1604@d))) (car p1602@deps)))))) p1600@f) (append p1581@imp* p1582@vis* p1583@inv*))) p1614) (if (>= p1615 '0) (apply (lambda p1612@others '#f) p1614) (error 'apply '"invalid arg count")))) (length p1614)))))) (set! p1427@library-loader (p1166@p944@make-parameter (lambda (p1616@x) ((lambda (p1618@file-name) (if (not p1618@file-name) (assertion-violation '#f '"cannot file library" p1616@x) (or (p1425@try-load-from-file p1618@file-name) ((p1429@current-library-expander) (p1165@p942@read-library-source-file p1618@file-name) p1618@file-name (lambda (p1620@name) (if (not (fast-equal? p1620@name p1616@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (p1624@p1622@p p1625@p1623@e) ((lambda (p1628@e p1629@p) (begin (display '"expected to find library " p1629@p) (write p1616@x p1629@p) (display '" in file " p1629@p) (display p1618@file-name p1629@p) (display '", found " p1629@p) (write p1620@name p1629@p) (display '" instead" p1629@p) (p1628@e))) p1625@p1623@e p1624@p1622@p)))) (void))))))) ((p1419@file-locator) p1616@x))) (lambda (p1632@f) (if (procedure? p1632@f) p1632@f (assertion-violation 'library-locator '"not a procedure" p1632@f))))) (set! p1429@current-library-expander (p1166@p944@make-parameter (lambda (p1634@x) (assertion-violation 'library-expander '"not initialized")) (lambda (p1636@f) (if (procedure? p1636@f) p1636@f (assertion-violation 'library-expander '"not a procedure" p1636@f))))) (set! p1431@external-pending-libraries (p1166@p944@make-parameter '())) (set! p1433@find-external-library (lambda (p1638@name) (begin (if (member p1638@name (p1431@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" p1638@name) (void)) ((lambda (p1642@p1640@external-pending-libraries p1643@p1641@external-pending-libraries) ((lambda (p1646@swap) (dynamic-wind p1646@swap (lambda () (begin ((p1427@library-loader) p1638@name) (or (p1411@find-library-by (lambda (p1648@x) (fast-equal? (p1353@library-name p1648@x) p1638@name))) (assertion-violation '#f '"handling external library did not yield the correct library" p1638@name)))) p1646@swap)) (lambda () ((lambda (p1650@t) (begin (p1642@p1640@external-pending-libraries p1643@p1641@external-pending-libraries) (set! p1643@p1641@external-pending-libraries p1650@t))) (p1642@p1640@external-pending-libraries))))) p1431@external-pending-libraries (cons p1638@name (p1431@external-pending-libraries)))))) (set! p1435@find-library-by-name (lambda (p1652@name) (or (p1411@find-library-by (lambda (p1654@x) (fast-equal? (p1353@library-name p1654@x) p1652@name))) (p1433@find-external-library p1652@name)))) (set! p1437@library-exists? (lambda (p1656@name) (and (p1411@find-library-by (lambda (p1658@x) (fast-equal? (p1353@library-name p1658@x) p1656@name))) '#t))) (set! p1439@find-library-by-spec/die (lambda (p1660@spec) ((lambda (p1662@id) (or (p1411@find-library-by (lambda (p1664@x) (eq? p1662@id (p1351@library-id p1664@x)))) (assertion-violation '#f '"cannot find library with required spec" p1660@spec))) (car p1660@spec)))) (set! p1441@label->binding-table (make-eq-hashtable)) (set! p1443@install-library-record (lambda (p1666@lib) (begin ((lambda (p1668@exp-env) (for-each (lambda (p1670@x) ((lambda (p1672@label p1673@binding) ((lambda (p1676@binding) (begin (if (hashtable-ref p1441@label->binding-table p1672@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" p1672@label (hashtable-ref p1441@label->binding-table p1672@label '#f) p1676@binding) (exit)) (void)) (hashtable-set! p1441@label->binding-table p1672@label p1676@binding))) ((lambda (p1678@t) (if (memv p1678@t '(global)) (cons 'global (cons p1666@lib (cdr p1673@binding))) (if (memv p1678@t '(global-macro)) (cons 'global-macro (cons p1666@lib (cdr p1673@binding))) (if (memv p1678@t '(global-macro!)) (cons 'global-macro! (cons p1666@lib (cdr p1673@binding))) p1673@binding)))) (car p1673@binding)))) (car p1670@x) (cdr p1670@x))) p1668@exp-env)) (p1365@library-env p1666@lib)) ((p1334@current-library-collection) p1666@lib)))) (set! p1445@install-library (lambda (p1680@id p1681@name p1682@ver p1683@imp* p1684@vis* p1685@inv* p1686@exp-subst p1687@exp-env p1688@visit-proc p1689@invoke-proc p1690@visit-code p1691@invoke-code p1692@visible? p1693@source-file-name) ((lambda (p1708@imp-lib* p1709@vis-lib* p1710@inv-lib*) (begin (if (not (and (symbol? p1680@id) (list? p1681@name) (list? p1682@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" p1680@id p1681@name p1682@ver) (void)) (if (p1437@library-exists? p1681@name) (assertion-violation 'install-library '"library is already installed" p1681@name) (void)) ((lambda (p1714@lib) (p1443@install-library-record p1714@lib)) (p1349@make-library p1680@id p1681@name p1682@ver p1708@imp-lib* p1709@vis-lib* p1710@inv-lib* p1686@exp-subst p1687@exp-env p1688@visit-proc p1689@invoke-proc p1690@visit-code p1691@invoke-code p1692@visible? p1693@source-file-name)))) (map p1439@find-library-by-spec/die p1683@imp*) (map p1439@find-library-by-spec/die p1684@vis*) (map p1439@find-library-by-spec/die p1685@inv*)))) (set! p1447@imported-label->binding (lambda (p1716@lab) (hashtable-ref p1441@label->binding-table p1716@lab '#f))) (set! p1449@invoke-library (lambda (p1718@lib) ((lambda (p1720@invoke) (if (procedure? p1720@invoke) (begin (p1397@set-library-invoke-state! p1718@lib (lambda () (assertion-violation 'invoke '"circularity detected" p1718@lib))) (for-each p1449@invoke-library (p1361@library-inv* p1718@lib)) (p1397@set-library-invoke-state! p1718@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" p1718@lib))) (p1720@invoke) (p1397@set-library-invoke-state! p1718@lib '#t)) (void))) (p1369@library-invoke-state p1718@lib)))) (set! p1451@visit-library (lambda (p1722@lib) ((lambda (p1724@visit) (if (procedure? p1724@visit) (begin (p1395@set-library-visit-state! p1722@lib (lambda () (assertion-violation 'visit '"circularity detected" p1722@lib))) (for-each p1449@invoke-library (p1359@library-vis* p1722@lib)) (p1395@set-library-visit-state! p1722@lib (lambda () (assertion-violation 'invoke '"first visit did not return" p1722@lib))) (p1724@visit) (p1395@set-library-visit-state! p1722@lib '#t)) (void))) (p1367@library-visit-state p1722@lib)))) (set! p1453@invoke-library-by-spec (lambda (p1726@spec) (p1449@invoke-library (p1439@find-library-by-spec/die p1726@spec)))) (set! p1455@installed-libraries (lambda p1734 ((lambda (p1735) (if (= p1735 '1) (apply (lambda (p1728@all?) ((letrec ((p1730@f (lambda (p1732@ls) (if (null? p1732@ls) '() (if (or p1728@all? (p1375@library-visible? (car p1732@ls))) (cons (car p1732@ls) (p1730@f (cdr p1732@ls))) (p1730@f (cdr p1732@ls))))))) p1730@f) ((p1334@current-library-collection)))) p1734) (if (= p1735 '0) (apply (lambda () (p1455@installed-libraries '#f)) p1734) (error 'apply '"invalid arg count")))) (length p1734)))) (set! p1457@library-spec (lambda (p1736@x) (begin (if (not (p1347@library? p1736@x)) (assertion-violation 'library-spec '"not a library" p1736@x) (void)) (list (p1351@library-id p1736@x) (p1353@library-name p1736@x) (p1355@library-version p1736@x))))) (begin (set! p1798@p1457@library-spec p1457@library-spec) (set! p1797@p1455@installed-libraries p1455@installed-libraries) (set! p1796@p1453@invoke-library-by-spec p1453@invoke-library-by-spec) (set! p1795@p1451@visit-library p1451@visit-library) (set! p1794@p1449@invoke-library p1449@invoke-library) (set! p1793@p1447@imported-label->binding p1447@imported-label->binding) (set! p1792@p1445@install-library p1445@install-library) (set! p1791@p1443@install-library-record p1443@install-library-record) (set! p1790@p1441@label->binding-table p1441@label->binding-table) (set! p1789@p1439@find-library-by-spec/die p1439@find-library-by-spec/die) (set! p1788@p1437@library-exists? p1437@library-exists?) (set! p1787@p1435@find-library-by-name p1435@find-library-by-name) (set! p1786@p1433@find-external-library p1433@find-external-library) (set! p1785@p1431@external-pending-libraries p1431@external-pending-libraries) (set! p1784@p1429@current-library-expander p1429@current-library-expander) (set! p1783@p1427@library-loader p1427@library-loader) (set! p1782@p1425@try-load-from-file p1425@try-load-from-file) (set! p1781@p1423@current-precompiled-library-loader p1423@current-precompiled-library-loader) (set! p1780@p1421@serialize-all p1421@serialize-all) (set! p1779@p1419@file-locator p1419@file-locator) (set! p1778@p1417@library-name->file-name p1417@library-name->file-name) (set! p1777@p1415@library-extensions p1415@library-extensions) (set! p1776@p1413@library-path p1413@library-path) (set! p1775@p1411@find-library-by p1411@find-library-by) (set! p1774@p1409@find-dependencies p1409@find-dependencies) (set! p1773@p1407@rp p1407@rp) (set! p1772@p1405@set-library-source-file-name! p1405@set-library-source-file-name!) (set! p1771@p1403@set-library-visible?! p1403@set-library-visible?!) (set! p1770@p1401@set-library-invoke-code! p1401@set-library-invoke-code!) (set! p1769@p1399@set-library-visit-code! p1399@set-library-visit-code!) (set! p1768@p1397@set-library-invoke-state! p1397@set-library-invoke-state!) (set! p1767@p1395@set-library-visit-state! p1395@set-library-visit-state!) (set! p1766@p1393@set-library-env! p1393@set-library-env!) (set! p1765@p1391@set-library-subst! p1391@set-library-subst!) (set! p1764@p1389@set-library-inv*! p1389@set-library-inv*!) (set! p1763@p1387@set-library-vis*! p1387@set-library-vis*!) (set! p1762@p1385@set-library-imp*! p1385@set-library-imp*!) (set! p1761@p1383@set-library-version! p1383@set-library-version!) (set! p1760@p1381@set-library-name! p1381@set-library-name!) (set! p1759@p1379@set-library-id! p1379@set-library-id!) (set! p1758@p1377@library-source-file-name p1377@library-source-file-name) (set! p1757@p1375@library-visible? p1375@library-visible?) (set! p1756@p1373@library-invoke-code p1373@library-invoke-code) (set! p1755@p1371@library-visit-code p1371@library-visit-code) (set! p1754@p1369@library-invoke-state p1369@library-invoke-state) (set! p1753@p1367@library-visit-state p1367@library-visit-state) (set! p1752@p1365@library-env p1365@library-env) (set! p1751@p1363@library-subst p1363@library-subst) (set! p1750@p1361@library-inv* p1361@library-inv*) (set! p1749@p1359@library-vis* p1359@library-vis*) (set! p1748@p1357@library-imp* p1357@library-imp*) (set! p1747@p1355@library-version p1355@library-version) (set! p1746@p1353@library-name p1353@library-name) (set! p1745@p1351@library-id p1351@library-id) (set! p1744@p1349@make-library p1349@make-library) (set! p1743@p1347@library? p1347@library?) (set! p1742@p1344@p1336 p1344@p1336) (set! p1741@p1342@p1337 p1342@p1337) (set! p1740@p1340@p1335 p1340@p1335) (set! p1739@p1334@current-library-collection p1334@current-library-collection) (set! p1738@p1332@make-collection p1332@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (p1801@build-global-define p1914@build-lambda p1916@build-case-lambda p1918@build-let p1964@build-sequence p1966@build-void p1968@build-letrec p1970@build-letrec* p1972@build-library-letrec* p1974@build-receive) (begin (set! p1801@build-global-define (lambda (p1975@x) (p1966@build-void))) (set! p1914@build-lambda (lambda (p1977@ae p1978@vars p1979@exp) (list 'lambda p1978@vars p1979@exp))) (set! p1916@build-case-lambda (lambda (p1983@ae p1984@vars* p1985@exp*) ((lambda (p1990@build-error p1992@build-pred p1994@build-apply p1996@expand-case-lambda) (begin (set! p1990@build-error (lambda (p2043@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! p1992@build-pred (lambda (p2021@ae p2022@n p2023@vars) (call-with-values (lambda () ((letrec ((p2029@f (lambda (p2031@vars p2032@count) (if (pair? p2031@vars) (p2029@f (cdr p2031@vars) (+ p2032@count '1)) (if (null? p2031@vars) (values p2032@count '=) (values p2032@count '>=)))))) p2029@f) p2023@vars '0)) (lambda (p2035@p2027@count p2036@p2028@pred) ((lambda (p2039@pred p2040@count) (list (list 'primitive p2039@pred) p2022@n (list 'quote p2040@count))) p2036@p2028@pred p2035@p2027@count))))) (set! p1994@build-apply (lambda (p2013@ae p2014@g p2015@vars p2016@exp) (list '(primitive apply) (p1914@build-lambda p2013@ae p2015@vars p2016@exp) p2014@g))) (set! p1996@expand-case-lambda (lambda (p1997@ae p1998@vars p1999@exp*) ((lambda (p2003@g p2004@n) (list 'lambda p2003@g (p1918@build-let p1997@ae (list p2004@n) (list (list '(primitive length) p2003@g)) ((letrec ((p2007@f (lambda (p2009@vars* p2010@exp*) (if (null? p2009@vars*) (p1990@build-error p1997@ae) (list 'if (p1992@build-pred p1997@ae p2004@n (car p2009@vars*)) (p1994@build-apply p1997@ae p2003@g (car p2009@vars*) (car p2010@exp*)) (p2007@f (cdr p2009@vars*) (cdr p2010@exp*))))))) p2007@f) p1984@vars* p1999@exp*)))) (p1152@p916@gensym) (p1152@p916@gensym)))) (if (= (length p1985@exp*) '1) (p1914@build-lambda p1983@ae (car p1984@vars*) (car p1985@exp*)) (p1996@expand-case-lambda p1983@ae p1984@vars* p1985@exp*)))) '#f '#f '#f '#f))) (set! p1918@build-let (lambda (p2045@ae p2046@lhs* p2047@rhs* p2048@body) (cons (p1914@build-lambda p2045@ae p2046@lhs* p2048@body) p2047@rhs*))) (set! p1964@build-sequence (lambda (p2053@ae p2054@exps) ((letrec ((p2057@loop (lambda (p2059@exps) (if (null? (cdr p2059@exps)) (car p2059@exps) (if (equal? (car p2059@exps) (p1966@build-void)) (p2057@loop (cdr p2059@exps)) (cons 'begin p2059@exps)))))) p2057@loop) p2054@exps))) (set! p1966@build-void (lambda () '((primitive void)))) (set! p1968@build-letrec (lambda (p2061@ae p2062@vars p2063@val-exps p2064@body-exp) (if (null? p2062@vars) p2064@body-exp (list 'letrec (map list p2062@vars p2063@val-exps) p2064@body-exp)))) (set! p1970@build-letrec* (lambda (p2069@ae p2070@vars p2071@val-exps p2072@body-exp) (if (null? p2070@vars) p2072@body-exp (p1918@build-let p2069@ae p2070@vars (map (lambda (p2077@x) (list 'quote '#f)) p2070@vars) (p1964@build-sequence p2069@ae (append (map (lambda (p2079@lhs p2080@rhs) (list 'set! p2079@lhs p2080@rhs)) p2070@vars p2071@val-exps) (list p2072@body-exp))))))) (set! p1972@build-library-letrec* (lambda (p2083@ae p2084@name p2085@vars p2086@locs p2087@val-exps p2088@body-exp) (list 'library-letrec* p2084@name (map list p2085@vars p2086@locs p2087@val-exps) p2088@body-exp))) (set! p1974@build-receive (lambda (p2095@ae p2096@vars p2097@producer p2098@body*) (begin (display '"************** in ") (cons 'receive (cons p2096@vars (cons p2097@producer p2098@body*)))))) (begin (set! p2112@p1974@build-receive p1974@build-receive) (set! p2111@p1972@build-library-letrec* p1972@build-library-letrec*) (set! p2110@p1970@build-letrec* p1970@build-letrec*) (set! p2109@p1968@build-letrec p1968@build-letrec) (set! p2108@p1966@build-void p1966@build-void) (set! p2107@p1964@build-sequence p1964@build-sequence) (set! p2106@p1918@build-let p1918@build-let) (set! p2105@p1916@build-case-lambda p1916@build-case-lambda) (set! p2104@p1914@build-lambda p1914@build-lambda) (set! p2103@p1801@build-global-define p1801@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (p2127@file-options-macro p2129@set-cons p2131@set-union p2136@top-mark* p2138@top-marked? p2140@gen-lexical p2142@gen-global p2144@gen-label p2146@gen-top-level-label p2148@gen-define-label+loc p2150@gen-define-label p2156@p2151 p2158@p2153 p2160@p2152 p2163@rib? p2165@make-rib p2167@rib-sym* p2169@rib-mark** p2171@rib-label* p2173@rib-sealed/freq p2175@rib-cache p2177@set-rib-sym*! p2179@set-rib-mark**! p2181@set-rib-label*! p2183@set-rib-sealed/freq! p2185@set-rib-cache! p2187@make-empty-rib p2189@extend-rib! p2191@extend-rib/nc! p2193@make-rib-map p2195@seal-rib! p2197@unseal-rib! p2199@make-full-rib p2205@p2200 p2207@p2202 p2209@p2201 p2212@stx? p2214@make-stx p2216@stx-expr p2218@stx-mark* p2220@stx-subst* p2222@stx-ae* p2224@set-stx-expr! p2226@set-stx-mark*! p2228@set-stx-subst*! p2230@set-stx-ae*! p2232@rp p2234@datum->stx p2236@gen-mark p2238@anti-mark p2240@anti-mark? p2242@join-wraps p2244@mkstx p2246@add-mark p2248@add-subst p2250@syntax-kind? p2252@syntax-vector->list p2254@syntax-pair? p2256@syntax-vector? p2258@syntax-null? p2260@syntax-list? p2262@syntax-car p2264@syntax-cdr p2266@syntax->list p2268@id? p2270@id->sym p2272@same-marks? p2274@bound-id=? p2276@free-id=? p2278@valid-bound-ids? p2280@distinct-bound-ids? p2282@bound-id-member? p2284@self-evaluating? p2286@strip-annotations p2288@strip p2290@stx->datum p2292@same-marks*? p2294@id->label p2296@id->real-label p2298@label->binding p2300@make-binding p2302@binding-type p2304@binding-value p2306@raise-unbound-error p2308@syntax-type p2322@sanitize-binding p2324@make-variable-transformer p2326@variable-transformer? p2328@variable-transformer-procedure p2330@make-eval-transformer p2641@parse-define p2643@parse-define-syntax p2645@scheme-stx-hashtable p2647@scheme-stx p2649@lexical-var p2651@lexical-mutable? p2653@set-lexical-mutable! p2655@add-lexical p2657@add-lexicals p2659@letrec-helper p2661@letrec-transformer p2663@letrec*-transformer p2665@fluid-let-syntax-transformer p2667@type-descriptor-transformer p2669@record-type-descriptor-transformer p2671@record-constructor-descriptor-transformer p2673@when-macro p2675@unless-macro p2677@if-transformer p2679@and-transformer p2681@or-transformer p2683@case-macro p2685@quote-transformer p2687@case-lambda-transformer p2689@lambda-transformer p2691@bless p2693@with-syntax-macro p2695@invalid-fmls-error p2697@let-macro p2699@let-values-macro p2701@let*-values-macro p2703@trace-lambda-macro p2705@trace-define-macro p2707@trace-define-syntax-macro p2709@trace-let/rec-syntax p2711@trace-let-syntax-macro p2713@trace-letrec-syntax-macro p2715@guard-macro p2717@define-enumeration-macro p2719@time-macro p2721@delay-macro p2723@assert-macro p2725@endianness-macro p2727@identifier-syntax-macro p2729@do-macro p2731@let*-macro p2733@or-macro p2735@and-macro p2737@cond-macro p2739@do-include p2741@include-macro p2743@include-into-macro p2745@syntax-rules-macro p2747@quasiquote-macro p2749@quasisyntax-macro p2751@define-struct-macro p2753@define-record-type-macro p2755@define-condition-type-macro p2757@incorrect-usage-macro p2759@parameterize-macro p2761@foreign-call-transformer p2763@convert-pattern p2765@syntax-dispatch p2767@ellipsis? p2769@underscore? p2771@verify-literals p2773@syntax-case-transformer p2775@ellipsis-map p2777@syntax-transformer p2779@core-macro-transformer p2781@symbol-macro p2783@macro-transformer p2785@local-macro-transformer p2787@do-macro-call p2789@chi-macro p2791@chi-local-macro p2793@chi-global-macro p2795@chi-expr* p2797@chi-application p2799@chi-expr p2801@chi-set! p2803@verify-formals p2805@chi-lambda-clause p2807@chi-lambda-clause* p2809@chi-defun p2811@chi-rhs p2813@expand-interaction-rhs*/init* p2815@chi-rhs* p2817@find-bound=? p2819@find-dups p2821@chi-internal p2823@parse-module p2829@p2824 p2831@p2826 p2833@p2825 p2836@module-interface? p2838@make-module-interface p2840@module-interface-first-mark p2842@module-interface-exp-id-vec p2844@module-interface-exp-lab-vec p2846@set-module-interface-first-mark! p2848@set-module-interface-exp-id-vec! p2850@set-module-interface-exp-lab-vec! p2852@module-interface-exp-id* p2854@chi-internal-module p2856@chi-body* p2858@expand-transformer p2860@parse-exports p2862@parse-library-name p2864@parse-library p2866@parse-import-spec* p2868@make-top-rib p2870@make-collector p2872@inv-collector p2874@vis-collector p2876@imp-collector p2878@chi-library-internal p2880@chi-interaction-expr p2882@library-body-expander p2884@core-library-expander p2886@parse-top-level-program p2888@top-level-expander p2894@p2889 p2896@p2891 p2898@p2890 p2901@env? p2903@make-env p2905@env-names p2907@env-labels p2909@env-itc p2911@set-env-names! p2913@set-env-labels! p2915@set-env-itc! p2917@rp p2923@p2918 p2925@p2920 p2927@p2919 p2930@interaction-env? p2932@make-interaction-env p2934@interaction-env-rib p2936@interaction-env-r p2938@interaction-env-locs p2940@set-interaction-env-rib! p2942@set-interaction-env-r! p2944@set-interaction-env-locs! p2946@rp p2948@interaction-environment-symbols p2950@environment-bindings p2952@parse-binding p2954@environment? p2956@environment-symbols p2958@environment p2960@null-environment p2962@scheme-report-environment p2964@expand p2966@eval p2968@library-expander p2970@boot-library-expand p2972@rev-map-append p2974@build-exports p2976@make-export-subst p2978@make-export-env/macros p2980@generate-temporaries p2982@free-identifier=? p2984@bound-identifier=? p2986@make-source-condition p2988@extract-position-condition p2990@expression-position p2992@assertion-error p2994@syntax-error p2996@syntax-violation* p2998@syntax-violation p3000@identifier? p3002@datum->syntax p3004@syntax->datum p3006@compile-r6rs-top-level p3008@pre-compile-r6rs-top-level p3010@interaction-environment p3012@top-level-context) (begin (set! p2127@file-options-macro (lambda (p3013@x) ((lambda (p3016@valid-option?) (begin (set! p3016@valid-option? (lambda (p3025@x) (and (p2268@id? p3025@x) (memq (p2270@id->sym p3025@x) '(no-fail no-create no-truncate))))) ((lambda (p3017@t) ((lambda (p3019@ls/false) (if (and p3019@ls/false (apply (lambda (p3021@opt*) (for-all p3016@valid-option? p3021@opt*)) p3019@ls/false)) (apply (lambda (p3023@opt*) (p2691@bless (list 'make-file-options (list 'quote p3023@opt*)))) p3019@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3017@t))) (p2765@syntax-dispatch p3017@t '(_ . each-any)))) p3013@x))) '#f))) (set! p2129@set-cons (lambda (p3027@x p3028@ls) (if (memq p3027@x p3028@ls) p3028@ls (cons p3027@x p3028@ls)))) (set! p2131@set-union (lambda (p3031@ls1 p3032@ls2) (if (null? p3031@ls1) p3032@ls2 (if (memq (car p3031@ls1) p3032@ls2) (p2131@set-union (cdr p3031@ls1) p3032@ls2) (cons (car p3031@ls1) (p2131@set-union (cdr p3031@ls1) p3032@ls2)))))) (set! p2136@top-mark* '(top)) (set! p2138@top-marked? (lambda (p3035@m*) (memq 'top p3035@m*))) (set! p2140@gen-lexical (lambda (p3037@sym) (if (symbol? p3037@sym) (p1152@p916@gensym p3037@sym) (if (p2212@stx? p3037@sym) (p2140@gen-lexical (p2270@id->sym p3037@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" p3037@sym))))) (set! p2142@gen-global (lambda (p3039@x) (p2140@gen-lexical p3039@x))) (set! p2144@gen-label (lambda (p3041@_) (p1152@p916@gensym))) (set! p2146@gen-top-level-label (lambda (p3043@id p3044@rib) ((lambda (p3048@find) (begin (set! p3048@find (lambda (p3059@sym p3060@mark* p3061@sym* p3062@mark** p3063@label*) (and (pair? p3061@sym*) (if (and (eq? p3059@sym (car p3061@sym*)) (p2272@same-marks? p3060@mark* (car p3062@mark**))) (car p3063@label*) (p3048@find p3059@sym p3060@mark* (cdr p3061@sym*) (cdr p3062@mark**) (cdr p3063@label*)))))) ((lambda (p3049@sym p3050@mark*) ((lambda (p3053@sym*) ((lambda (p3055@t) (if p3055@t ((lambda (p3057@label) (if (p1793@p1447@imported-label->binding p3057@label) (p1152@p916@gensym) p3057@label)) p3055@t) (p1152@p916@gensym))) (and (memq p3049@sym (p2167@rib-sym* p3044@rib)) (p3048@find p3049@sym p3050@mark* p3053@sym* (p2169@rib-mark** p3044@rib) (p2171@rib-label* p3044@rib))))) (p2167@rib-sym* p3044@rib))) (p2270@id->sym p3043@id) (p2218@stx-mark* p3043@id)))) '#f))) (set! p2148@gen-define-label+loc (lambda (p3069@id p3070@rib) ((lambda (p3073@t) (if p3073@t ((lambda (p3075@env) ((lambda (p3077@label p3078@locs) (values p3077@label ((lambda (p3081@t) (if p3081@t (cdr p3081@t) ((lambda (p3083@loc) (begin (p2944@set-interaction-env-locs! p3075@env (cons (cons p3077@label p3083@loc) p3078@locs)) p3083@loc)) (p2140@gen-lexical p3069@id)))) (assq p3077@label p3078@locs)))) (p2146@gen-top-level-label p3069@id p3070@rib) (p2938@interaction-env-locs p3075@env))) p3073@t) (values (p1152@p916@gensym) (p2140@gen-lexical p3069@id)))) (p3012@top-level-context)))) (set! p2150@gen-define-label (lambda (p3085@id p3086@rib) (if (p3012@top-level-context) (p2146@gen-top-level-label p3085@id p3086@rib) (p1152@p916@gensym)))) (set! p2156@p2151 (make-record-type-descriptor 'rib '#f 'p2154 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! p2158@p2153 '#f) (set! p2160@p2152 (make-record-constructor-descriptor p2156@p2151 '#f p2158@p2153)) (set! p2163@rib? (record-predicate p2156@p2151)) (set! p2165@make-rib (record-constructor p2160@p2152)) (set! p2167@rib-sym* (record-accessor p2156@p2151 '0)) (set! p2169@rib-mark** (record-accessor p2156@p2151 '1)) (set! p2171@rib-label* (record-accessor p2156@p2151 '2)) (set! p2173@rib-sealed/freq (record-accessor p2156@p2151 '3)) (set! p2175@rib-cache (record-accessor p2156@p2151 '4)) (set! p2177@set-rib-sym*! (record-mutator p2156@p2151 '0)) (set! p2179@set-rib-mark**! (record-mutator p2156@p2151 '1)) (set! p2181@set-rib-label*! (record-mutator p2156@p2151 '2)) (set! p2183@set-rib-sealed/freq! (record-mutator p2156@p2151 '3)) (set! p2185@set-rib-cache! (record-mutator p2156@p2151 '4)) (set! p2187@make-empty-rib (lambda () (p2165@make-rib '() '() '() '#f '#f))) (set! p2189@extend-rib! (lambda (p3089@rib p3090@id p3091@label) ((lambda (p3096@find) (begin (set! p3096@find (lambda (p3109@sym p3110@mark* p3111@sym* p3112@mark** p3113@label*) (and (pair? p3111@sym*) (if (and (eq? p3109@sym (car p3111@sym*)) (p2272@same-marks? p3110@mark* (car p3112@mark**))) p3113@label* (p3096@find p3109@sym p3110@mark* (cdr p3111@sym*) (cdr p3112@mark**) (cdr p3113@label*)))))) (begin (if (p2173@rib-sealed/freq p3089@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" p3089@rib) (void)) ((lambda (p3097@sym p3098@mark*) ((lambda (p3101@sym*) ((lambda (p3103@t) (if p3103@t ((lambda (p3105@p) (if (not (eq? p3091@label (car p3105@p))) (if (p3012@top-level-context) (set-car! p3105@p p3091@label) (p2998@syntax-violation '#f '"multiple definitions of identifier" p3090@id)) (void))) p3103@t) (begin (if (p2175@rib-cache p3089@rib) (hashtable-update! (p2175@rib-cache p3089@rib) p3097@sym (lambda (p3107@e) (cons (cons p3098@mark* p3091@label) p3107@e)) '()) (void)) (p2177@set-rib-sym*! p3089@rib (cons p3097@sym p3101@sym*)) (p2179@set-rib-mark**! p3089@rib (cons p3098@mark* (p2169@rib-mark** p3089@rib))) (p2181@set-rib-label*! p3089@rib (cons p3091@label (p2171@rib-label* p3089@rib)))))) (and (memq p3097@sym (p2167@rib-sym* p3089@rib)) (p3096@find p3097@sym p3098@mark* p3101@sym* (p2169@rib-mark** p3089@rib) (p2171@rib-label* p3089@rib))))) (p2167@rib-sym* p3089@rib))) (p2270@id->sym p3090@id) (p2218@stx-mark* p3090@id))))) '#f))) (set! p2191@extend-rib/nc! (lambda (p3119@rib p3120@id p3121@label) ((lambda (p3125@sym p3126@mark*) ((lambda (p3129@sym*) (begin (if (p2175@rib-cache p3119@rib) (hashtable-update! (p2175@rib-cache p3119@rib) p3125@sym (lambda (p3131@e) (cons (cons p3126@mark* p3121@label) p3131@e)) '()) (void)) (p2177@set-rib-sym*! p3119@rib (cons p3125@sym p3129@sym*)) (p2179@set-rib-mark**! p3119@rib (cons p3126@mark* (p2169@rib-mark** p3119@rib))) (p2181@set-rib-label*! p3119@rib (cons p3121@label (p2171@rib-label* p3119@rib))))) (p2167@rib-sym* p3119@rib))) (p2270@id->sym p3120@id) (p2218@stx-mark* p3120@id)))) (set! p2193@make-rib-map (lambda (p3133@sym*) ((lambda (p3135@ht) ((letrec ((p3137@f (lambda (p3139@i p3140@sym*) (if (null? p3140@sym*) p3135@ht (begin (hashtable-update! p3135@ht (car p3140@sym*) (lambda (p3143@x) (cons p3139@i p3143@x)) '()) (p3137@f (+ p3139@i '1) (cdr p3140@sym*))))))) p3137@f) '0 p3133@sym*)) (make-eq-hashtable)))) (set! p2195@seal-rib! (lambda (p3145@rib) ((lambda (p3147@sym*) (if (not (null? p3147@sym*)) (begin (p2177@set-rib-sym*! p3145@rib (list->vector p3147@sym*)) (p2179@set-rib-mark**! p3145@rib (list->vector (p2169@rib-mark** p3145@rib))) (p2181@set-rib-label*! p3145@rib (list->vector (p2171@rib-label* p3145@rib))) (p2183@set-rib-sealed/freq! p3145@rib (p2193@make-rib-map p3147@sym*))) (void))) (p2167@rib-sym* p3145@rib)))) (set! p2197@unseal-rib! (lambda (p3149@rib) (if (p2173@rib-sealed/freq p3149@rib) (begin (p2183@set-rib-sealed/freq! p3149@rib '#f) (p2177@set-rib-sym*! p3149@rib (vector->list (p2167@rib-sym* p3149@rib))) (p2179@set-rib-mark**! p3149@rib (vector->list (p2169@rib-mark** p3149@rib))) (p2181@set-rib-label*! p3149@rib (vector->list (p2171@rib-label* p3149@rib)))) (void)))) (set! p2199@make-full-rib (lambda (p3151@id* p3152@label*) ((lambda (p3155@r) (begin (p2195@seal-rib! p3155@r) p3155@r)) (p2165@make-rib (map p2270@id->sym p3151@id*) (map p2218@stx-mark* p3151@id*) p3152@label* '#f '#f)))) (set! p2205@p2200 (make-record-type-descriptor 'stx '#f 'p2203 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! p2207@p2202 '#f) (set! p2209@p2201 (make-record-constructor-descriptor p2205@p2200 '#f p2207@p2202)) (set! p2212@stx? (record-predicate p2205@p2200)) (set! p2214@make-stx (record-constructor p2209@p2201)) (set! p2216@stx-expr (record-accessor p2205@p2200 '0)) (set! p2218@stx-mark* (record-accessor p2205@p2200 '1)) (set! p2220@stx-subst* (record-accessor p2205@p2200 '2)) (set! p2222@stx-ae* (record-accessor p2205@p2200 '3)) (set! p2224@set-stx-expr! (record-mutator p2205@p2200 '0)) (set! p2226@set-stx-mark*! (record-mutator p2205@p2200 '1)) (set! p2228@set-stx-subst*! (record-mutator p2205@p2200 '2)) (set! p2230@set-stx-ae*! (record-mutator p2205@p2200 '3)) (set! p2232@rp (p1163@p938@make-record-printer 'stx (lambda (p3157@x p3158@p p3159@wr) (begin (display '"#<syntax " p3158@p) (write (p2290@stx->datum p3157@x) p3158@p) ((lambda (p3163@expr) (if (p1155@p922@annotation? p3163@expr) ((lambda (p3165@src) (if (pair? p3165@src) (begin (display '" [" p3158@p) (display (cdr p3165@src) p3158@p) (display '" of " p3158@p) (display (car p3165@src) p3158@p) (display '"]" p3158@p)) (void))) (p1156@p924@annotation-source p3163@expr)) (void))) (p2216@stx-expr p3157@x)) (display '">" p3158@p))))) (set! p2234@datum->stx (lambda (p3167@id p3168@datum) (p2214@make-stx p3168@datum (p2218@stx-mark* p3167@id) (p2220@stx-subst* p3167@id) (p2222@stx-ae* p3167@id)))) (set! p2236@gen-mark (lambda () (string '#\m))) (set! p2238@anti-mark '#f) (set! p2240@anti-mark? not) (set! p2242@join-wraps (lambda (p3171@m1* p3172@s1* p3173@ae1* p3174@e) ((lambda (p3180@cancel) (begin (set! p3180@cancel (lambda (p3187@ls1 p3188@ls2) ((letrec ((p3191@f (lambda (p3193@x p3194@ls1) (if (null? p3194@ls1) (cdr p3188@ls2) (cons p3193@x (p3191@f (car p3194@ls1) (cdr p3194@ls1))))))) p3191@f) (car p3187@ls1) (cdr p3187@ls1)))) ((lambda (p3181@m2* p3182@s2* p3183@ae2*) (if (and (not (null? p3171@m1*)) (not (null? p3181@m2*)) (p2240@anti-mark? (car p3181@m2*))) (values (p3180@cancel p3171@m1* p3181@m2*) (p3180@cancel p3172@s1* p3182@s2*) (p3180@cancel p3173@ae1* p3183@ae2*)) (values (append p3171@m1* p3181@m2*) (append p3172@s1* p3182@s2*) (append p3173@ae1* p3183@ae2*)))) (p2218@stx-mark* p3174@e) (p2220@stx-subst* p3174@e) (p2222@stx-ae* p3174@e)))) '#f))) (set! p2244@mkstx (lambda (p3197@e p3198@m* p3199@s* p3200@ae*) (if (and (p2212@stx? p3197@e) (not (p2138@top-marked? p3198@m*))) (call-with-values (lambda () (p2242@join-wraps p3198@m* p3199@s* p3200@ae* p3197@e)) (lambda (p3208@p3205@m* p3209@p3206@s* p3210@p3207@ae*) ((lambda (p3214@ae* p3215@s* p3216@m*) (p2214@make-stx (p2216@stx-expr p3197@e) p3216@m* p3215@s* p3214@ae*)) p3210@p3207@ae* p3209@p3206@s* p3208@p3205@m*))) (p2214@make-stx p3197@e p3198@m* p3199@s* p3200@ae*)))) (set! p2246@add-mark (lambda (p3220@m p3221@e p3222@ae) (p2244@mkstx p3221@e (list p3220@m) '(shift) (list p3222@ae)))) (set! p2248@add-subst (lambda (p3226@subst p3227@e) (p2244@mkstx p3227@e '() (list p3226@subst) '()))) (set! p2250@syntax-kind? (lambda (p3230@x p3231@p?) (if (p2212@stx? p3230@x) (p2250@syntax-kind? (p2216@stx-expr p3230@x) p3231@p?) (if (p1155@p922@annotation? p3230@x) (p2250@syntax-kind? (p1157@p926@annotation-expression p3230@x) p3231@p?) (p3231@p? p3230@x))))) (set! p2252@syntax-vector->list (lambda (p3234@x) (if (p2212@stx? p3234@x) ((lambda (p3236@ls p3237@m* p3238@s* p3239@ae*) (map (lambda (p3244@x) (p2244@mkstx p3244@x p3237@m* p3238@s* p3239@ae*)) p3236@ls)) (p2252@syntax-vector->list (p2216@stx-expr p3234@x)) (p2218@stx-mark* p3234@x) (p2220@stx-subst* p3234@x) (p2222@stx-ae* p3234@x)) (if (p1155@p922@annotation? p3234@x) (p2252@syntax-vector->list (p1157@p926@annotation-expression p3234@x)) (if (vector? p3234@x) (vector->list p3234@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" p3234@x)))))) (set! p2254@syntax-pair? (lambda (p3246@x) (p2250@syntax-kind? p3246@x pair?))) (set! p2256@syntax-vector? (lambda (p3248@x) (p2250@syntax-kind? p3248@x vector?))) (set! p2258@syntax-null? (lambda (p3250@x) (p2250@syntax-kind? p3250@x null?))) (set! p2260@syntax-list? (lambda (p3252@x) (or (p2258@syntax-null? p3252@x) (and (p2254@syntax-pair? p3252@x) (p2260@syntax-list? (p2264@syntax-cdr p3252@x)))))) (set! p2262@syntax-car (lambda (p3254@x) (if (p2212@stx? p3254@x) (p2244@mkstx (p2262@syntax-car (p2216@stx-expr p3254@x)) (p2218@stx-mark* p3254@x) (p2220@stx-subst* p3254@x) (p2222@stx-ae* p3254@x)) (if (p1155@p922@annotation? p3254@x) (p2262@syntax-car (p1157@p926@annotation-expression p3254@x)) (if (pair? p3254@x) (car p3254@x) (assertion-violation 'syntax-car '"BUG: not a pair" p3254@x)))))) (set! p2264@syntax-cdr (lambda (p3256@x) (if (p2212@stx? p3256@x) (p2244@mkstx (p2264@syntax-cdr (p2216@stx-expr p3256@x)) (p2218@stx-mark* p3256@x) (p2220@stx-subst* p3256@x) (p2222@stx-ae* p3256@x)) (if (p1155@p922@annotation? p3256@x) (p2264@syntax-cdr (p1157@p926@annotation-expression p3256@x)) (if (pair? p3256@x) (cdr p3256@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" p3256@x)))))) (set! p2266@syntax->list (lambda (p3258@x) (if (p2254@syntax-pair? p3258@x) (cons (p2262@syntax-car p3258@x) (p2266@syntax->list (p2264@syntax-cdr p3258@x))) (if (p2258@syntax-null? p3258@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" p3258@x))))) (set! p2268@id? (lambda (p3260@x) (and (p2212@stx? p3260@x) ((lambda (p3262@expr) (symbol? (if (p1155@p922@annotation? p3262@expr) (p1154@p920@annotation-stripped p3262@expr) p3262@expr))) (p2216@stx-expr p3260@x))))) (set! p2270@id->sym (lambda (p3264@x) (begin (if (not (p2212@stx? p3264@x)) (error 'id->sym '"BUG in ikarus: not an id" p3264@x) (void)) ((lambda (p3266@expr) ((lambda (p3268@sym) (if (symbol? p3268@sym) p3268@sym (error 'id->sym '"BUG in ikarus: not an id" p3264@x))) (if (p1155@p922@annotation? p3266@expr) (p1154@p920@annotation-stripped p3266@expr) p3266@expr))) (p2216@stx-expr p3264@x))))) (set! p2272@same-marks? (lambda (p3270@x p3271@y) (or (and (null? p3270@x) (null? p3271@y)) (and (pair? p3270@x) (pair? p3271@y) (eq? (car p3270@x) (car p3271@y)) (p2272@same-marks? (cdr p3270@x) (cdr p3271@y)))))) (set! p2274@bound-id=? (lambda (p3274@x p3275@y) (and (eq? (p2270@id->sym p3274@x) (p2270@id->sym p3275@y)) (p2272@same-marks? (p2218@stx-mark* p3274@x) (p2218@stx-mark* p3275@y))))) (set! p2276@free-id=? (lambda (p3278@i p3279@j) ((lambda (p3282@t0 p3283@t1) (if (or p3282@t0 p3283@t1) (eq? p3282@t0 p3283@t1) (eq? (p2270@id->sym p3278@i) (p2270@id->sym p3279@j)))) (p2296@id->real-label p3278@i) (p2296@id->real-label p3279@j)))) (set! p2278@valid-bound-ids? (lambda (p3286@id*) (and (for-all p2268@id? p3286@id*) (p2280@distinct-bound-ids? p3286@id*)))) (set! p2280@distinct-bound-ids? (lambda (p3288@id*) (or (null? p3288@id*) (and (not (p2282@bound-id-member? (car p3288@id*) (cdr p3288@id*))) (p2280@distinct-bound-ids? (cdr p3288@id*)))))) (set! p2282@bound-id-member? (lambda (p3290@id p3291@id*) (and (pair? p3291@id*) (or (p2274@bound-id=? p3290@id (car p3291@id*)) (p2282@bound-id-member? p3290@id (cdr p3291@id*)))))) (set! p2284@self-evaluating? (lambda (p3294@x) (or (number? p3294@x) (string? p3294@x) (char? p3294@x) (boolean? p3294@x) (regexp? p3294@x) (bytevector? p3294@x)))) (set! p2286@strip-annotations (lambda (p3296@x) (if (pair? p3296@x) (cons (p2286@strip-annotations (car p3296@x)) (p2286@strip-annotations (cdr p3296@x))) (if (vector? p3296@x) (vector-map p2286@strip-annotations p3296@x) (if (p1155@p922@annotation? p3296@x) (p1154@p920@annotation-stripped p3296@x) p3296@x))))) (set! p2288@strip (lambda (p3298@x p3299@m*) (if (p2138@top-marked? p3299@m*) (if (or (p1155@p922@annotation? p3298@x) (and (pair? p3298@x) (p1155@p922@annotation? (car p3298@x))) (and (vector? p3298@x) (> (vector-length p3298@x) '0) (p1155@p922@annotation? (vector-ref p3298@x '0)))) (p2286@strip-annotations p3298@x) p3298@x) ((letrec ((p3302@f (lambda (p3304@x) (if (p2212@stx? p3304@x) (p2288@strip (p2216@stx-expr p3304@x) (p2218@stx-mark* p3304@x)) (if (p1155@p922@annotation? p3304@x) (p1154@p920@annotation-stripped p3304@x) (if (pair? p3304@x) ((lambda (p3306@a p3307@d) (if (and (eq? p3306@a (car p3304@x)) (eq? p3307@d (cdr p3304@x))) p3304@x (cons p3306@a p3307@d))) (p3302@f (car p3304@x)) (p3302@f (cdr p3304@x))) (if (vector? p3304@x) ((lambda (p3310@old) ((lambda (p3312@new) (if (for-all eq? p3310@old p3312@new) p3304@x (list->vector p3312@new))) (map p3302@f p3310@old))) (vector->list p3304@x)) p3304@x))))))) p3302@f) p3298@x)))) (set! p2290@stx->datum (lambda (p3314@x) (p2288@strip p3314@x '()))) (set! p2292@same-marks*? (lambda (p3316@mark* p3317@mark** p3318@si) (if (null? p3318@si) '#f (if (p2272@same-marks? p3316@mark* (vector-ref p3317@mark** (car p3318@si))) (car p3318@si) (p2292@same-marks*? p3316@mark* p3317@mark** (cdr p3318@si)))))) (set! p2294@id->label (lambda (p3322@id) (or (p2296@id->real-label p3322@id) ((lambda (p3324@t) (if p3324@t ((lambda (p3326@env) ((lambda (p3328@rib) (call-with-values (lambda () (p2148@gen-define-label+loc p3322@id p3328@rib)) (lambda (p3332@p3330@lab p3333@p3331@loc_) ((lambda (p3336@loc_ p3337@lab) (begin (p2189@extend-rib! p3328@rib p3322@id p3337@lab) p3337@lab)) p3333@p3331@loc_ p3332@p3330@lab)))) (p2934@interaction-env-rib p3326@env))) p3324@t) '#f)) (p3012@top-level-context))))) (set! p2296@id->real-label (lambda (p3340@id) ((lambda (p3342@sym) ((letrec ((p3344@search (lambda (p3346@subst* p3347@mark*) (if (null? p3346@subst*) '#f (if (eq? (car p3346@subst*) 'shift) (p3344@search (cdr p3346@subst*) (cdr p3347@mark*)) ((lambda (p3350@rib) ((lambda (p3352@t) (if p3352@t ((lambda (p3354@ht) ((lambda (p3356@si) ((lambda (p3358@i) (if p3358@i (vector-ref (p2171@rib-label* p3350@rib) p3358@i) (p3344@search (cdr p3346@subst*) p3347@mark*))) (and p3356@si (p2292@same-marks*? p3347@mark* (p2169@rib-mark** p3350@rib) (reverse p3356@si))))) (hashtable-ref p3354@ht p3342@sym '#f))) p3352@t) ((letrec ((p3360@f (lambda (p3362@sym* p3363@mark** p3364@label*) (if (null? p3362@sym*) (p3344@search (cdr p3346@subst*) p3347@mark*) (if (and (eq? (car p3362@sym*) p3342@sym) (p2272@same-marks? (car p3363@mark**) p3347@mark*)) (car p3364@label*) (p3360@f (cdr p3362@sym*) (cdr p3363@mark**) (cdr p3364@label*))))))) p3360@f) (p2167@rib-sym* p3350@rib) (p2169@rib-mark** p3350@rib) (p2171@rib-label* p3350@rib)))) (p2173@rib-sealed/freq p3350@rib))) (car p3346@subst*))))))) p3344@search) (p2220@stx-subst* p3340@id) (p2218@stx-mark* p3340@id))) (p2270@id->sym p3340@id)))) (set! p2298@label->binding (lambda (p3368@x p3369@r) ((lambda (p3372@t) (if p3372@t ((lambda (p3374@b) (if (and (pair? p3374@b) (eq? (car p3374@b) '$core-rtd)) (cons '$rtd (map p2691@bless (cdr p3374@b))) (if (and (pair? p3374@b) (eq? (car p3374@b) 'global-rtd)) ((lambda (p3376@lib p3377@loc) (cons '$rtd (symbol-value p3377@loc))) (cadr p3374@b) (cddr p3374@b)) p3374@b))) p3372@t) ((lambda (p3380@t) (if p3380@t (cdr p3380@t) ((lambda (p3382@t) (if p3382@t ((lambda (p3384@env) ((lambda (p3386@t) (if p3386@t ((lambda (p3388@p) (cons* 'lexical (cdr p3388@p) '#f)) p3386@t) '(displaced-lexical . #f))) (assq p3368@x (p2938@interaction-env-locs p3384@env)))) p3382@t) '(displaced-lexical . #f))) (p3012@top-level-context)))) (assq p3368@x p3369@r)))) (p1793@p1447@imported-label->binding p3368@x)))) (set! p2300@make-binding cons) (set! p2302@binding-type car) (set! p2304@binding-value cdr) (set! p2306@raise-unbound-error (lambda (p3390@id) (p2996@syntax-violation* '#f '"unbound identifier" p3390@id (p10186@p9748@make-undefined-violation)))) (set! p2308@syntax-type (lambda (p3392@e p3393@r) (if (p2268@id? p3392@e) ((lambda (p3396@id) ((lambda (p3398@label) ((lambda (p3400@b) ((lambda (p3402@type) ((lambda () (begin (if (not p3398@label) (p2306@raise-unbound-error p3396@id) (void)) ((lambda (p3404@t) (if (memv p3404@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values p3402@type (p2304@binding-value p3400@b) p3396@id) (values 'other '#f '#f))) p3402@type))))) (p2302@binding-type p3400@b))) (p2298@label->binding p3398@label p3393@r))) (p2294@id->label p3396@id))) p3392@e) (if (p2254@syntax-pair? p3392@e) ((lambda (p3406@id) (if (p2268@id? p3406@id) ((lambda (p3408@label) ((lambda (p3410@b) ((lambda (p3412@type) ((lambda () (begin (if (not p3408@label) (p2306@raise-unbound-error p3406@id) (void)) ((lambda (p3414@t) (if (memv p3414@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values p3412@type (p2304@binding-value p3410@b) p3406@id) (values 'call '#f '#f))) p3412@type))))) (p2302@binding-type p3410@b))) (p2298@label->binding p3408@label p3393@r))) (p2294@id->label p3406@id)) (values 'call '#f '#f))) (p2262@syntax-car p3392@e)) ((lambda (p3416@d) (if (p2284@self-evaluating? p3416@d) (values 'constant p3416@d '#f) (values 'other '#f '#f))) (p2290@stx->datum p3392@e)))))) (set! p2322@sanitize-binding (lambda (p3418@x p3419@src) (if (procedure? p3418@x) (cons* 'local-macro p3418@x p3419@src) (if (and (pair? p3418@x) (eq? (car p3418@x) 'macro!) (procedure? (cdr p3418@x))) (cons* 'local-macro! (cdr p3418@x) p3419@src) (if (and (pair? p3418@x) (eq? (car p3418@x) '$rtd)) p3418@x (assertion-violation 'expand '"invalid transformer" p3418@x)))))) (set! p2324@make-variable-transformer (lambda (p3422@x) (if (procedure? p3422@x) (cons 'macro! p3422@x) (assertion-violation 'make-variable-transformer '"not a procedure" p3422@x)))) (set! p2326@variable-transformer? (lambda (p3424@x) (and (pair? p3424@x) (eq? (car p3424@x) 'macro!) (procedure? (cdr p3424@x))))) (set! p2328@variable-transformer-procedure (lambda (p3426@x) (if (p2326@variable-transformer? p3426@x) (cdr p3426@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" p3426@x)))) (set! p2330@make-eval-transformer (lambda (p3428@x) (p2322@sanitize-binding (eval-core (p1250@p1178@expanded->core p3428@x)) p3428@x))) (set! p2641@parse-define (lambda (p3430@x) ((lambda (p3432@t) ((lambda (p3434@ls/false) (if (and p3434@ls/false (apply (lambda (p3436@id p3437@fmls p3438@b p3439@b*) (p2268@id? p3436@id)) p3434@ls/false)) (apply (lambda (p3444@id p3445@fmls p3446@b p3447@b*) (begin (p2803@verify-formals p3445@fmls p3430@x) (values p3444@id (cons 'defun (cons p3445@fmls (cons p3446@b p3447@b*)))))) p3434@ls/false) ((lambda (p3452@t) ((lambda (p3454@ls/false) (if (and p3454@ls/false (apply (lambda (p3456@id p3457@val) (p2268@id? p3456@id)) p3454@ls/false)) (apply (lambda (p3460@id p3461@val) (values p3460@id (cons 'expr p3461@val))) p3454@ls/false) ((lambda (p3464@t) ((lambda (p3466@ls/false) (if (and p3466@ls/false (apply (lambda (p3468@id) (p2268@id? p3468@id)) p3466@ls/false)) (apply (lambda (p3470@id) (values p3470@id (cons 'expr (p2691@bless '(void))))) p3466@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3464@t))) (p2765@syntax-dispatch p3464@t '(_ any)))) p3452@t))) (p2765@syntax-dispatch p3452@t '(_ any any)))) p3432@t))) (p2765@syntax-dispatch p3432@t '(_ (any . any) any . each-any)))) p3430@x))) (set! p2643@parse-define-syntax (lambda (p3472@x) ((lambda (p3474@t) ((lambda (p3476@ls/false) (if (and p3476@ls/false (apply (lambda (p3478@id p3479@val) (p2268@id? p3478@id)) p3476@ls/false)) (apply (lambda (p3482@id p3483@val) (values p3482@id p3483@val)) p3476@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3474@t))) (p2765@syntax-dispatch p3474@t '(_ any any)))) p3472@x))) (set! p2645@scheme-stx-hashtable (make-eq-hashtable)) (set! p2647@scheme-stx (lambda (p3486@sym) (or (hashtable-ref p2645@scheme-stx-hashtable p3486@sym '#f) ((lambda (p3488@subst) ((lambda (p3490@stx) ((lambda (p3492@stx) ((lambda () (begin (hashtable-set! p2645@scheme-stx-hashtable p3486@sym p3492@stx) p3492@stx)))) ((lambda (p3494@t) (if p3494@t ((lambda (p3496@x) ((lambda (p3498@name p3499@label) (p2248@add-subst (p2165@make-rib (list p3498@name) (list p2136@top-mark*) (list p3499@label) '#f '#f) p3490@stx)) (car p3496@x) (cdr p3496@x))) p3494@t) p3490@stx)) (assq p3486@sym p3488@subst)))) (p2214@make-stx p3486@sym p2136@top-mark* '() '()))) (p1751@p1363@library-subst (p1787@p1435@find-library-by-name '(psyntax system $all))))))) (set! p2649@lexical-var car) (set! p2651@lexical-mutable? cdr) (set! p2653@set-lexical-mutable! set-cdr!) (set! p2655@add-lexical (lambda (p3502@lab p3503@lex p3504@r) (cons (cons* p3502@lab 'lexical p3503@lex '#f) p3504@r))) (set! p2657@add-lexicals (lambda (p3508@lab* p3509@lex* p3510@r) (if (null? p3508@lab*) p3510@r (p2657@add-lexicals (cdr p3508@lab*) (cdr p3509@lex*) (p2655@add-lexical (car p3508@lab*) (car p3509@lex*) p3510@r))))) (set! p2659@letrec-helper (lambda (p3514@e p3515@r p3516@mr p3517@build) ((lambda (p3522@t) ((lambda (p3524@ls/false) (if p3524@ls/false (apply (lambda (p3526@lhs* p3527@rhs* p3528@b p3529@b*) (if (not (p2278@valid-bound-ids? p3526@lhs*)) (p2695@invalid-fmls-error p3514@e p3526@lhs*) ((lambda (p3534@lex* p3535@lab*) ((lambda (p3538@rib p3539@r) ((lambda (p3542@body p3543@rhs*) (p3517@build '#f p3534@lex* p3543@rhs* p3542@body)) (p2821@chi-internal (p2248@add-subst p3538@rib (cons p3528@b p3529@b*)) p3539@r p3516@mr) (p2795@chi-expr* (map (lambda (p3546@x) (p2248@add-subst p3538@rib p3546@x)) p3527@rhs*) p3539@r p3516@mr))) (p2199@make-full-rib p3526@lhs* p3535@lab*) (p2657@add-lexicals p3535@lab* p3534@lex* p3515@r))) (map p2140@gen-lexical p3526@lhs*) (map p2144@gen-label p3526@lhs*)))) p3524@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3522@t))) (p2765@syntax-dispatch p3522@t '(_ #(each (any any)) any . each-any)))) p3514@e))) (set! p2661@letrec-transformer (lambda (p3548@e p3549@r p3550@mr) (p2659@letrec-helper p3548@e p3549@r p3550@mr p2109@p1968@build-letrec))) (set! p2663@letrec*-transformer (lambda (p3554@e p3555@r p3556@mr) (p2659@letrec-helper p3554@e p3555@r p3556@mr p2110@p1970@build-letrec*))) (set! p2665@fluid-let-syntax-transformer (lambda (p3560@e p3561@r p3562@mr) ((lambda (p3567@lookup) (begin (set! p3567@lookup (lambda (p3586@x) (or (p2294@id->label p3586@x) (p2998@syntax-violation '#f '"unbound identifier" p3560@e p3586@x)))) ((lambda (p3568@t) ((lambda (p3570@ls/false) (if p3570@ls/false (apply (lambda (p3572@lhs* p3573@rhs* p3574@b p3575@b*) (if (not (p2278@valid-bound-ids? p3572@lhs*)) (p2695@invalid-fmls-error p3560@e p3572@lhs*) ((lambda (p3580@lab* p3581@rhs*) (p2821@chi-internal (cons p3574@b p3575@b*) (append (map cons p3580@lab* p3581@rhs*) p3561@r) (append (map cons p3580@lab* p3581@rhs*) p3562@mr))) (map p3567@lookup p3572@lhs*) (map (lambda (p3584@x) (p2330@make-eval-transformer (p2858@expand-transformer p3584@x p3562@mr))) p3573@rhs*)))) p3570@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3568@t))) (p2765@syntax-dispatch p3568@t '(_ #(each (any any)) any . each-any)))) p3560@e))) '#f))) (set! p2667@type-descriptor-transformer (lambda (p3588@e p3589@r p3590@mr) ((lambda (p3594@t) ((lambda (p3596@ls/false) (if (and p3596@ls/false (apply (lambda (p3598@id) (p2268@id? p3598@id)) p3596@ls/false)) (apply (lambda (p3600@id) ((lambda (p3602@lab) ((lambda (p3604@b) ((lambda (p3606@type) ((lambda () (begin (if (not p3602@lab) (p2306@raise-unbound-error p3600@id) (void)) (if (not (and (eq? p3606@type '$rtd) (not (list? (p2304@binding-value p3604@b))))) (p2998@syntax-violation '#f '"not a record type" p3588@e) (void)) (list 'quote (p2304@binding-value p3604@b)))))) (p2302@binding-type p3604@b))) (p2298@label->binding p3602@lab p3589@r))) (p2294@id->label p3600@id))) p3596@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3594@t))) (p2765@syntax-dispatch p3594@t '(_ any)))) p3588@e))) (set! p2669@record-type-descriptor-transformer (lambda (p3608@e p3609@r p3610@mr) ((lambda (p3614@t) ((lambda (p3616@ls/false) (if (and p3616@ls/false (apply (lambda (p3618@id) (p2268@id? p3618@id)) p3616@ls/false)) (apply (lambda (p3620@id) ((lambda (p3622@lab) ((lambda (p3624@b) ((lambda (p3626@type) ((lambda () (begin (if (not p3622@lab) (p2306@raise-unbound-error p3620@id) (void)) (if (not (and (eq? p3626@type '$rtd) (list? (p2304@binding-value p3624@b)))) (p2998@syntax-violation '#f '"not a record type" p3608@e) (void)) (p2799@chi-expr (car (p2304@binding-value p3624@b)) p3609@r p3610@mr))))) (p2302@binding-type p3624@b))) (p2298@label->binding p3622@lab p3609@r))) (p2294@id->label p3620@id))) p3616@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3614@t))) (p2765@syntax-dispatch p3614@t '(_ any)))) p3608@e))) (set! p2671@record-constructor-descriptor-transformer (lambda (p3628@e p3629@r p3630@mr) ((lambda (p3634@t) ((lambda (p3636@ls/false) (if (and p3636@ls/false (apply (lambda (p3638@id) (p2268@id? p3638@id)) p3636@ls/false)) (apply (lambda (p3640@id) ((lambda (p3642@lab) ((lambda (p3644@b) ((lambda (p3646@type) ((lambda () (begin (if (not p3642@lab) (p2306@raise-unbound-error p3640@id) (void)) (if (not (and (eq? p3646@type '$rtd) (list? (p2304@binding-value p3644@b)))) (p2998@syntax-violation '#f '"invalid type" p3628@e) (void)) (p2799@chi-expr (cadr (p2304@binding-value p3644@b)) p3629@r p3630@mr))))) (p2302@binding-type p3644@b))) (p2298@label->binding p3642@lab p3629@r))) (p2294@id->label p3640@id))) p3636@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3634@t))) (p2765@syntax-dispatch p3634@t '(_ any)))) p3628@e))) (set! p2673@when-macro (lambda (p3648@e) ((lambda (p3650@t) ((lambda (p3652@ls/false) (if p3652@ls/false (apply (lambda (p3654@test p3655@e p3656@e*) (p2691@bless (list 'if p3654@test (cons 'begin (cons p3655@e p3656@e*))))) p3652@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3650@t))) (p2765@syntax-dispatch p3650@t '(_ any any . each-any)))) p3648@e))) (set! p2675@unless-macro (lambda (p3660@e) ((lambda (p3662@t) ((lambda (p3664@ls/false) (if p3664@ls/false (apply (lambda (p3666@test p3667@e p3668@e*) (p2691@bless (list 'if (list 'not p3666@test) (cons 'begin (cons p3667@e p3668@e*))))) p3664@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3662@t))) (p2765@syntax-dispatch p3662@t '(_ any any . each-any)))) p3660@e))) (set! p2677@if-transformer (lambda (p3672@e p3673@r p3674@mr) ((lambda (p3678@t) ((lambda (p3680@ls/false) (if p3680@ls/false (apply (lambda (p3682@e0 p3683@e1 p3684@e2) (list 'if (p2799@chi-expr p3682@e0 p3673@r p3674@mr) (p2799@chi-expr p3683@e1 p3673@r p3674@mr) (p2799@chi-expr p3684@e2 p3673@r p3674@mr))) p3680@ls/false) ((lambda (p3688@t) ((lambda (p3690@ls/false) (if p3690@ls/false (apply (lambda (p3692@e0 p3693@e1) (list 'if (p2799@chi-expr p3692@e0 p3673@r p3674@mr) (p2799@chi-expr p3693@e1 p3673@r p3674@mr) (p2108@p1966@build-void))) p3690@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3688@t))) (p2765@syntax-dispatch p3688@t '(_ any any)))) p3678@t))) (p2765@syntax-dispatch p3678@t '(_ any any any)))) p3672@e))) (set! p2679@and-transformer (lambda (p3696@e p3697@r p3698@mr) ((lambda (p3702@t) ((lambda (p3704@ls/false) (if p3704@ls/false (apply (lambda (p3706@e*) (cons 'and (p2795@chi-expr* p3706@e* p3697@r p3698@mr))) p3704@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3702@t))) (p2765@syntax-dispatch p3702@t '(_ . each-any)))) p3696@e))) (set! p2681@or-transformer (lambda (p3708@e p3709@r p3710@mr) ((lambda (p3714@t) ((lambda (p3716@ls/false) (if p3716@ls/false (apply (lambda (p3718@e*) (cons 'or (p2795@chi-expr* p3718@e* p3709@r p3710@mr))) p3716@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3714@t))) (p2765@syntax-dispatch p3714@t '(_ . each-any)))) p3708@e))) (set! p2683@case-macro (lambda (p3720@e) ((lambda (p3723@build-last p3725@build-one) (begin (set! p3723@build-last (lambda (p3762@cls) ((lambda (p3764@t) ((lambda (p3766@ls/false) (if p3766@ls/false (apply (lambda (p3768@e p3769@e*) (cons 'begin (cons p3768@e p3769@e*))) p3766@ls/false) ((lambda (p3772@t) ((lambda (p3774@ls/false) (if p3774@ls/false (apply (lambda () (p3725@build-one p3762@cls '(if #f #f))) p3774@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3772@t))) (p2765@syntax-dispatch p3772@t '_))) p3764@t))) (p2765@syntax-dispatch p3764@t '(#(scheme-id else) any . each-any)))) p3762@cls))) (set! p3725@build-one (lambda (p3748@cls p3749@k) ((lambda (p3752@t) ((lambda (p3754@ls/false) (if p3754@ls/false (apply (lambda (p3756@d* p3757@e p3758@e*) (list 'if (list 'memv 't (list 'quote p3756@d*)) (cons 'begin (cons p3757@e p3758@e*)) p3749@k)) p3754@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3752@t))) (p2765@syntax-dispatch p3752@t '(each-any any . each-any)))) p3748@cls))) ((lambda (p3726@t) ((lambda (p3728@ls/false) (if p3728@ls/false (apply (lambda (p3730@expr) (p2691@bless (cons 'let (cons (list (list 't p3730@expr)) '((if #f #f)))))) p3728@ls/false) ((lambda (p3732@t) ((lambda (p3734@ls/false) (if p3734@ls/false (apply (lambda (p3736@expr p3737@cls p3738@cls*) (p2691@bless (list 'let (list (list 't p3736@expr)) ((letrec ((p3742@f (lambda (p3744@cls p3745@cls*) (if (null? p3745@cls*) (p3723@build-last p3744@cls) (p3725@build-one p3744@cls (p3742@f (car p3745@cls*) (cdr p3745@cls*))))))) p3742@f) p3737@cls p3738@cls*)))) p3734@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3732@t))) (p2765@syntax-dispatch p3732@t '(_ any any . each-any)))) p3726@t))) (p2765@syntax-dispatch p3726@t '(_ any)))) p3720@e))) '#f '#f))) (set! p2685@quote-transformer (lambda (p3776@e p3777@r p3778@mr) ((lambda (p3782@t) ((lambda (p3784@ls/false) (if p3784@ls/false (apply (lambda (p3786@datum) (list 'quote (p2290@stx->datum p3786@datum))) p3784@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3782@t))) (p2765@syntax-dispatch p3782@t '(_ any)))) p3776@e))) (set! p2687@case-lambda-transformer (lambda (p3788@e p3789@r p3790@mr) ((lambda (p3794@t) ((lambda (p3796@ls/false) (if p3796@ls/false (apply (lambda (p3798@fmls* p3799@b* p3800@b**) (call-with-values (lambda () (p2807@chi-lambda-clause* p3788@e p3798@fmls* (map cons p3799@b* p3800@b**) p3789@r p3790@mr)) (lambda (p3806@p3804@fmls* p3807@p3805@body*) ((lambda (p3810@body* p3811@fmls*) (p2105@p1916@build-case-lambda '#f p3811@fmls* p3810@body*)) p3807@p3805@body* p3806@p3804@fmls*)))) p3796@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3794@t))) (p2765@syntax-dispatch p3794@t '(_ . #(each (any any . each-any)))))) p3788@e))) (set! p2689@lambda-transformer (lambda (p3814@e p3815@r p3816@mr) ((lambda (p3820@t) ((lambda (p3822@ls/false) (if p3822@ls/false (apply (lambda (p3824@fmls p3825@b p3826@b*) (call-with-values (lambda () (p2805@chi-lambda-clause p3814@e p3824@fmls (cons p3825@b p3826@b*) p3815@r p3816@mr)) (lambda (p3832@p3830@fmls p3833@p3831@body) ((lambda (p3836@body p3837@fmls) (p2104@p1914@build-lambda '#f p3837@fmls p3836@body)) p3833@p3831@body p3832@p3830@fmls)))) p3822@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3820@t))) (p2765@syntax-dispatch p3820@t '(_ any any . each-any)))) p3814@e))) (set! p2691@bless (lambda (p3840@x) (p2244@mkstx ((letrec ((p3842@f (lambda (p3844@x) (if (p2212@stx? p3844@x) p3844@x (if (pair? p3844@x) (cons (p3842@f (car p3844@x)) (p3842@f (cdr p3844@x))) (if (symbol? p3844@x) (p2647@scheme-stx p3844@x) (if (vector? p3844@x) (vector-map p3842@f p3844@x) p3844@x))))))) p3842@f) p3840@x) '() '() '()))) (set! p2693@with-syntax-macro (lambda (p3846@e) ((lambda (p3848@t) ((lambda (p3850@ls/false) (if p3850@ls/false (apply (lambda (p3852@pat* p3853@expr* p3854@b p3855@b*) ((lambda (p3860@idn*) (begin (p2803@verify-formals (map car p3860@idn*) p3846@e) ((lambda (p3862@t*) (p2691@bless (list 'let (map list p3862@t* p3853@expr*) ((letrec ((p3864@f (lambda (p3866@pat* p3867@t*) (if (null? p3866@pat*) (cons 'begin (cons '#f (cons p3854@b p3855@b*))) (list 'syntax-case (car p3867@t*) '() (list (car p3866@pat*) (p3864@f (cdr p3866@pat*) (cdr p3867@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car p3866@pat*)) (car p3867@t*)))))))) p3864@f) p3852@pat* p3862@t*)))) (p2980@generate-temporaries p3853@expr*)))) ((letrec ((p3870@f (lambda (p3872@pat*) (if (null? p3872@pat*) '() (call-with-values (lambda () (p2763@convert-pattern (car p3872@pat*) '())) (lambda (p3876@p3874@pat p3877@p3875@idn*) ((lambda (p3880@idn* p3881@pat) (append p3880@idn* (p3870@f (cdr p3872@pat*)))) p3877@p3875@idn* p3876@p3874@pat))))))) p3870@f) p3852@pat*))) p3850@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3848@t))) (p2765@syntax-dispatch p3848@t '(_ #(each (any any)) any . each-any)))) p3846@e))) (set! p2695@invalid-fmls-error (lambda (p3884@stx p3885@fmls) ((lambda (p3888@t) ((lambda (p3890@ls/false) (if p3890@ls/false (apply (lambda (p3892@id* p3893@last) ((letrec ((p3896@f (lambda (p3898@id*) (if (null? p3898@id*) (values) (if (not (p2268@id? (car p3898@id*))) (p2998@syntax-violation '#f '"not an identifier" p3884@stx (car p3898@id*)) (begin (p3896@f (cdr p3898@id*)) (if (p2282@bound-id-member? (car p3898@id*) (cdr p3898@id*)) (p2998@syntax-violation '#f '"duplicate binding" p3884@stx (car p3898@id*)) (void)))))))) p3896@f) (if (p2268@id? p3893@last) (cons p3893@last p3892@id*) (if (p2258@syntax-null? p3893@last) p3892@id* (p2998@syntax-violation '#f '"not an identifier" p3884@stx p3893@last))))) p3890@ls/false) ((lambda (p3900@t) ((lambda (p3902@ls/false) (if p3902@ls/false (apply (lambda () (p2998@syntax-violation '#f '"malformed binding form" p3884@stx p3885@fmls)) p3902@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3900@t))) (p2765@syntax-dispatch p3900@t '_))) p3888@t))) (p2765@syntax-dispatch p3888@t '#(each+ any () any)))) p3885@fmls))) (set! p2697@let-macro (lambda (p3904@stx) ((lambda (p3906@t) ((lambda (p3908@ls/false) (if p3908@ls/false (apply (lambda (p3910@lhs* p3911@rhs* p3912@b p3913@b*) (if (p2278@valid-bound-ids? p3910@lhs*) (p2691@bless (cons (cons 'lambda (cons p3910@lhs* (cons p3912@b p3913@b*))) p3911@rhs*)) (p2695@invalid-fmls-error p3904@stx p3910@lhs*))) p3908@ls/false) ((lambda (p3918@t) ((lambda (p3920@ls/false) (if (and p3920@ls/false (apply (lambda (p3922@f p3923@lhs* p3924@rhs* p3925@b p3926@b*) (p2268@id? p3922@f)) p3920@ls/false)) (apply (lambda (p3932@f p3933@lhs* p3934@rhs* p3935@b p3936@b*) (if (p2278@valid-bound-ids? p3933@lhs*) (p2691@bless (cons (list 'letrec (list (list p3932@f (cons 'lambda (cons p3933@lhs* (cons p3935@b p3936@b*))))) p3932@f) p3934@rhs*)) (p2695@invalid-fmls-error p3904@stx p3933@lhs*))) p3920@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3918@t))) (p2765@syntax-dispatch p3918@t '(_ any #(each (any any)) any . each-any)))) p3906@t))) (p2765@syntax-dispatch p3906@t '(_ #(each (any any)) any . each-any)))) p3904@stx))) (set! p2699@let-values-macro (lambda (p3942@stx) ((lambda (p3945@rename p3947@rename*) (begin (set! p3945@rename (lambda (p4043@x p4044@old* p4045@new*) (begin (if (not (p2268@id? p4043@x)) (p2998@syntax-violation '#f '"not an indentifier" p3942@stx p4043@x) (void)) (if (p2282@bound-id-member? p4043@x p4044@old*) (p2998@syntax-violation '#f '"duplicate binding" p3942@stx p4043@x) (void)) ((lambda (p4049@y) (values p4049@y (cons p4043@x p4044@old*) (cons p4049@y p4045@new*))) (p1152@p916@gensym (p3004@syntax->datum p4043@x)))))) (set! p3947@rename* (lambda (p4025@x* p4026@old* p4027@new*) (if (null? p4025@x*) (values '() p4026@old* p4027@new*) (call-with-values (lambda () (p3945@rename (car p4025@x*) p4026@old* p4027@new*)) (lambda (p4031@x p4032@old* p4033@new*) (call-with-values (lambda () (p3947@rename* (cdr p4025@x*) p4032@old* p4033@new*)) (lambda (p4037@x* p4038@old* p4039@new*) (values (cons p4031@x p4037@x*) p4038@old* p4039@new*)))))))) ((lambda (p3948@t) ((lambda (p3950@ls/false) (if p3950@ls/false (apply (lambda (p3952@b p3953@b*) (cons* (p2691@bless 'let) '() p3952@b p3953@b*)) p3950@ls/false) ((lambda (p3956@t) ((lambda (p3958@ls/false) (if p3958@ls/false (apply (lambda (p3960@lhs* p3961@rhs* p3962@b p3963@b*) (p2691@bless ((letrec ((p3968@f (lambda (p3970@lhs* p3971@rhs* p3972@old* p3973@new*) (if (null? p3970@lhs*) (cons 'let (cons (map list p3972@old* p3973@new*) (cons p3962@b p3963@b*))) ((lambda (p3978@t) ((lambda (p3980@ls/false) (if p3980@ls/false (apply (lambda (p3982@x*) (call-with-values (lambda () (p3947@rename* p3982@x* p3972@old* p3973@new*)) (lambda (p3987@p3984@y* p3988@p3985@old* p3989@p3986@new*) ((lambda (p3993@new* p3994@old* p3995@y*) (list 'call-with-values (list 'lambda '() (car p3971@rhs*)) (list 'lambda p3995@y* (p3968@f (cdr p3970@lhs*) (cdr p3971@rhs*) p3994@old* p3993@new*)))) p3989@p3986@new* p3988@p3985@old* p3987@p3984@y*)))) p3980@ls/false) ((lambda (p3999@t) ((lambda (p4001@ls/false) (if p4001@ls/false (apply (lambda (p4003@x* p4004@x) (call-with-values (lambda () (p3945@rename p4004@x p3972@old* p3973@new*)) (lambda (p4007@y p4008@old* p4009@new*) (call-with-values (lambda () (p3947@rename* p4003@x* p4008@old* p4009@new*)) (lambda (p4013@y* p4014@old* p4015@new*) (list 'call-with-values (list 'lambda '() (car p3971@rhs*)) (list 'lambda (append p4013@y* p4007@y) (p3968@f (cdr p3970@lhs*) (cdr p3971@rhs*) p4014@old* p4015@new*)))))))) p4001@ls/false) ((lambda (p4019@t) ((lambda (p4021@ls/false) (if p4021@ls/false (apply (lambda (p4023@others) (p2998@syntax-violation '#f '"malformed bindings" p3942@stx p4023@others)) p4021@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4019@t))) (p2765@syntax-dispatch p4019@t 'any))) p3999@t))) (p2765@syntax-dispatch p3999@t '#(each+ any () any)))) p3978@t))) (p2765@syntax-dispatch p3978@t 'each-any))) (car p3970@lhs*)))))) p3968@f) p3960@lhs* p3961@rhs* '() '()))) p3958@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p3956@t))) (p2765@syntax-dispatch p3956@t '(_ #(each (any any)) any . each-any)))) p3948@t))) (p2765@syntax-dispatch p3948@t '(_ () any . each-any)))) p3942@stx))) '#f '#f))) (set! p2701@let*-values-macro (lambda (p4051@stx) ((lambda (p4054@check) (begin (set! p4054@check (lambda (p4101@x*) (if (not (null? p4101@x*)) ((lambda (p4103@x) (begin (if (not (p2268@id? p4103@x)) (p2998@syntax-violation '#f '"not an identifier" p4051@stx p4103@x) (void)) (p4054@check (cdr p4101@x*)) (if (p2282@bound-id-member? p4103@x (cdr p4101@x*)) (p2998@syntax-violation '#f '"duplicate identifier" p4051@stx p4103@x) (void)))) (car p4101@x*)) (void)))) ((lambda (p4055@t) ((lambda (p4057@ls/false) (if p4057@ls/false (apply (lambda (p4059@b p4060@b*) (cons* (p2691@bless 'let) '() p4059@b p4060@b*)) p4057@ls/false) ((lambda (p4063@t) ((lambda (p4065@ls/false) (if p4065@ls/false (apply (lambda (p4067@lhs* p4068@rhs* p4069@b p4070@b*) (p2691@bless ((letrec ((p4075@f (lambda (p4077@lhs* p4078@rhs*) (if (null? p4077@lhs*) (cons 'begin (cons p4069@b p4070@b*)) ((lambda (p4081@t) ((lambda (p4083@ls/false) (if p4083@ls/false (apply (lambda (p4085@x*) (begin (p4054@check p4085@x*) (list 'call-with-values (list 'lambda '() (car p4078@rhs*)) (list 'lambda p4085@x* (p4075@f (cdr p4077@lhs*) (cdr p4078@rhs*)))))) p4083@ls/false) ((lambda (p4087@t) ((lambda (p4089@ls/false) (if p4089@ls/false (apply (lambda (p4091@x* p4092@x) (begin (p4054@check (cons p4092@x p4091@x*)) (list 'call-with-values (list 'lambda '() (car p4078@rhs*)) (list 'lambda (append p4091@x* p4092@x) (p4075@f (cdr p4077@lhs*) (cdr p4078@rhs*)))))) p4089@ls/false) ((lambda (p4095@t) ((lambda (p4097@ls/false) (if p4097@ls/false (apply (lambda (p4099@others) (p2998@syntax-violation '#f '"malformed bindings" p4051@stx p4099@others)) p4097@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4095@t))) (p2765@syntax-dispatch p4095@t 'any))) p4087@t))) (p2765@syntax-dispatch p4087@t '#(each+ any () any)))) p4081@t))) (p2765@syntax-dispatch p4081@t 'each-any))) (car p4077@lhs*)))))) p4075@f) p4067@lhs* p4068@rhs*))) p4065@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4063@t))) (p2765@syntax-dispatch p4063@t '(_ #(each (any any)) any . each-any)))) p4055@t))) (p2765@syntax-dispatch p4055@t '(_ () any . each-any)))) p4051@stx))) '#f))) (set! p2703@trace-lambda-macro (lambda (p4105@stx) ((lambda (p4107@t) ((lambda (p4109@ls/false) (if p4109@ls/false (apply (lambda (p4111@who p4112@fmls p4113@b p4114@b*) (if (p2278@valid-bound-ids? p4112@fmls) (p2691@bless (list 'make-traced-procedure (list 'quote p4111@who) (cons 'lambda (cons p4112@fmls (cons p4113@b p4114@b*))))) (p2695@invalid-fmls-error p4105@stx p4112@fmls))) p4109@ls/false) ((lambda (p4119@t) ((lambda (p4121@ls/false) (if p4121@ls/false (apply (lambda (p4123@who p4124@fmls p4125@last p4126@b p4127@b*) (if (p2278@valid-bound-ids? (cons p4125@last p4124@fmls)) (p2691@bless (list 'make-traced-procedure (list 'quote p4123@who) (cons 'lambda (cons (append p4124@fmls p4125@last) (cons p4126@b p4127@b*))))) (p2695@invalid-fmls-error p4105@stx (append p4124@fmls p4125@last)))) p4121@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4119@t))) (p2765@syntax-dispatch p4119@t '(_ any #(each+ any () any) any . each-any)))) p4107@t))) (p2765@syntax-dispatch p4107@t '(_ any each-any any . each-any)))) p4105@stx))) (set! p2705@trace-define-macro (lambda (p4133@stx) ((lambda (p4135@t) ((lambda (p4137@ls/false) (if p4137@ls/false (apply (lambda (p4139@who p4140@fmls p4141@b p4142@b*) (if (p2278@valid-bound-ids? p4140@fmls) (p2691@bless (list 'define p4139@who (list 'make-traced-procedure (list 'quote p4139@who) (cons 'lambda (cons p4140@fmls (cons p4141@b p4142@b*)))))) (p2695@invalid-fmls-error p4133@stx p4140@fmls))) p4137@ls/false) ((lambda (p4147@t) ((lambda (p4149@ls/false) (if p4149@ls/false (apply (lambda (p4151@who p4152@fmls p4153@last p4154@b p4155@b*) (if (p2278@valid-bound-ids? (cons p4153@last p4152@fmls)) (p2691@bless (list 'define p4151@who (list 'make-traced-procedure (list 'quote p4151@who) (cons 'lambda (cons (append p4152@fmls p4153@last) (cons p4154@b p4155@b*)))))) (p2695@invalid-fmls-error p4133@stx (append p4152@fmls p4153@last)))) p4149@ls/false) ((lambda (p4161@t) ((lambda (p4163@ls/false) (if p4163@ls/false (apply (lambda (p4165@who p4166@expr) (if (p2268@id? p4165@who) (p2691@bless (list 'define p4165@who (list 'let (list (list 'v p4166@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote p4165@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (p2998@syntax-violation '#f '"invalid name" p4133@stx))) p4163@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4161@t))) (p2765@syntax-dispatch p4161@t '(_ any any)))) p4147@t))) (p2765@syntax-dispatch p4147@t '(_ (any . #(each+ any () any)) any . each-any)))) p4135@t))) (p2765@syntax-dispatch p4135@t '(_ (any . each-any) any . each-any)))) p4133@stx))) (set! p2707@trace-define-syntax-macro (lambda (p4169@stx) ((lambda (p4171@t) ((lambda (p4173@ls/false) (if p4173@ls/false (apply (lambda (p4175@who p4176@expr) (if (p2268@id? p4175@who) (p2691@bless (list 'define-syntax p4175@who (list 'make-traced-macro (list 'quote p4175@who) p4176@expr))) (p2998@syntax-violation '#f '"invalid name" p4169@stx))) p4173@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4171@t))) (p2765@syntax-dispatch p4171@t '(_ any any)))) p4169@stx))) (set! p2709@trace-let/rec-syntax (lambda (p4179@who) (lambda (p4181@stx) ((lambda (p4183@t) ((lambda (p4185@ls/false) (if p4185@ls/false (apply (lambda (p4187@lhs* p4188@rhs* p4189@b p4190@b*) (if (p2278@valid-bound-ids? p4187@lhs*) ((lambda (p4195@rhs*) (p2691@bless (cons p4179@who (cons (map list p4187@lhs* p4195@rhs*) (cons p4189@b p4190@b*))))) (map (lambda (p4197@lhs p4198@rhs) (list 'make-traced-macro (list 'quote p4197@lhs) p4198@rhs)) p4187@lhs* p4188@rhs*)) (p2695@invalid-fmls-error p4181@stx p4187@lhs*))) p4185@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4183@t))) (p2765@syntax-dispatch p4183@t '(_ #(each (any any)) any . each-any)))) p4181@stx)))) (set! p2711@trace-let-syntax-macro (p2709@trace-let/rec-syntax 'let-syntax)) (set! p2713@trace-letrec-syntax-macro (p2709@trace-let/rec-syntax 'letrec-syntax)) (set! p2715@guard-macro (lambda (p4201@x) ((lambda (p4204@gen-clauses) (begin (set! p4204@gen-clauses (lambda (p4227@con p4228@outerk p4229@clause*) ((lambda (p4234@f p4236@f*) (begin (set! p4234@f (lambda (p4287@x p4288@k) ((lambda (p4291@t) ((lambda (p4293@ls/false) (if p4293@ls/false (apply (lambda (p4295@e p4296@p) ((lambda (p4299@t) (list 'let (list (list p4299@t p4295@e)) (list 'if p4299@t (list p4296@p p4299@t) p4288@k))) (p1152@p916@gensym))) p4293@ls/false) ((lambda (p4301@t) ((lambda (p4303@ls/false) (if p4303@ls/false (apply (lambda (p4305@e) ((lambda (p4307@t) (list 'let (list (list p4307@t p4305@e)) (list 'if p4307@t p4307@t p4288@k))) (p1152@p916@gensym))) p4303@ls/false) ((lambda (p4309@t) ((lambda (p4311@ls/false) (if p4311@ls/false (apply (lambda (p4313@e p4314@v p4315@v*) (list 'if p4313@e (cons 'begin (cons p4314@v p4315@v*)) p4288@k)) p4311@ls/false) ((lambda (p4319@t) ((lambda (p4321@ls/false) (if p4321@ls/false (apply (lambda () (p2998@syntax-violation '#f '"invalid guard clause" p4287@x)) p4321@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4319@t))) (p2765@syntax-dispatch p4319@t '_))) p4309@t))) (p2765@syntax-dispatch p4309@t '(any any . each-any)))) p4301@t))) (p2765@syntax-dispatch p4301@t '(any)))) p4291@t))) (p2765@syntax-dispatch p4291@t '(any #(scheme-id =>) any)))) p4287@x))) (set! p4236@f* (lambda (p4247@x*) ((lambda (p4249@t) ((lambda (p4251@ls/false) (if p4251@ls/false (apply (lambda () ((lambda (p4253@g) (values (list p4253@g (list 'lambda '() (list 'raise-continuable p4227@con))) p4253@g)) (p1152@p916@gensym))) p4251@ls/false) ((lambda (p4255@t) ((lambda (p4257@ls/false) (if p4257@ls/false (apply (lambda (p4259@e p4260@e*) (values (cons 'begin (cons p4259@e p4260@e*)) '#f)) p4257@ls/false) ((lambda (p4263@t) ((lambda (p4265@ls/false) (if p4265@ls/false (apply (lambda (p4267@cls p4268@cls*) (call-with-values (lambda () (p4236@f* p4268@cls*)) (lambda (p4273@p4271@e p4274@p4272@g) ((lambda (p4277@g p4278@e) (values (p4234@f p4267@cls p4278@e) p4277@g)) p4274@p4272@g p4273@p4271@e)))) p4265@ls/false) ((lambda (p4281@t) ((lambda (p4283@ls/false) (if p4283@ls/false (apply (lambda (p4285@others) (p2998@syntax-violation '#f '"invalid guard clause" p4285@others)) p4283@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4281@t))) (p2765@syntax-dispatch p4281@t 'any))) p4263@t))) (p2765@syntax-dispatch p4263@t '(any . any)))) p4255@t))) (p2765@syntax-dispatch p4255@t '((#(scheme-id else) any . each-any))))) p4249@t))) (p2765@syntax-dispatch p4249@t '()))) p4247@x*))) (call-with-values (lambda () (p4236@f* p4229@clause*)) (lambda (p4239@p4237@code p4240@p4238@raisek) ((lambda (p4243@raisek p4244@code) (if p4243@raisek (list (list 'call/cc (list 'lambda (list p4243@raisek) (list p4228@outerk (list 'lambda '() p4244@code))))) (list p4228@outerk (list 'lambda '() p4244@code)))) p4240@p4238@raisek p4239@p4237@code))))) '#f '#f))) ((lambda (p4205@t) ((lambda (p4207@ls/false) (if (and p4207@ls/false (apply (lambda (p4209@con p4210@clause* p4211@b p4212@b*) (p2268@id? p4209@con)) p4207@ls/false)) (apply (lambda (p4217@con p4218@clause* p4219@b p4220@b*) ((lambda (p4225@outerk) (p2691@bless (list (list 'call/cc (list 'lambda (list p4225@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list p4217@con) (p4204@gen-clauses p4217@con p4225@outerk p4218@clause*)) (cons 'lambda (cons '() (cons p4219@b p4220@b*)))))))))) (p1152@p916@gensym))) p4207@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4205@t))) (p2765@syntax-dispatch p4205@t '(_ (any . each-any) any . each-any)))) p4201@x))) '#f))) (set! p2717@define-enumeration-macro (lambda (p4323@stx) ((lambda (p4326@set? p4328@remove-dups) (begin (set! p4326@set? (lambda (p4351@x) (or (null? p4351@x) (and (not (memq (car p4351@x) (cdr p4351@x))) (p4326@set? (cdr p4351@x)))))) (set! p4328@remove-dups (lambda (p4349@ls) (if (null? p4349@ls) '() (cons (car p4349@ls) (p4328@remove-dups (remq (car p4349@ls) (cdr p4349@ls))))))) ((lambda (p4329@t) ((lambda (p4331@ls/false) (if (and p4331@ls/false (apply (lambda (p4333@name p4334@id* p4335@maker) (and (p2268@id? p4333@name) (p2268@id? p4335@maker) (for-all p2268@id? p4334@id*))) p4331@ls/false)) (apply (lambda (p4339@name p4340@id* p4341@maker) ((lambda (p4345@name* p4346@mk) (p2691@bless (list 'begin (list 'define p4346@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote p4345@name*)))) (list 'define-syntax p4339@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote p4345@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote p4339@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax p4341@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote p4341@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote p4345@name*)) (cons 'syntax-violation (cons (list 'quote p4341@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons p4346@mk '('(n* ...)))))))))))) (p4328@remove-dups (p3004@syntax->datum p4340@id*)) (p1152@p916@gensym))) p4331@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4329@t))) (p2765@syntax-dispatch p4329@t '(_ any each-any any)))) p4323@stx))) '#f '#f))) (set! p2719@time-macro (lambda (p4353@stx) ((lambda (p4355@t) ((lambda (p4357@ls/false) (if p4357@ls/false (apply (lambda (p4359@expr) (p2691@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() p4359@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) p4357@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4355@t))) (p2765@syntax-dispatch p4355@t '(_ any)))) p4353@stx))) (set! p2721@delay-macro (lambda (p4361@stx) ((lambda (p4363@t) ((lambda (p4365@ls/false) (if p4365@ls/false (apply (lambda (p4367@expr) (p2691@bless (list 'make-promise (list 'lambda '() p4367@expr)))) p4365@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4363@t))) (p2765@syntax-dispatch p4363@t '(_ any)))) p4361@stx))) (set! p2723@assert-macro (lambda (p4369@stx) ((lambda (p4371@t) ((lambda (p4373@ls/false) (if p4373@ls/false (apply (lambda (p4375@expr) ((lambda (p4377@pos) (p2691@bless (list 'unless p4375@expr (list 'assertion-error (list 'quote p4375@expr) (list 'quote p4377@pos))))) (or (p2990@expression-position p4369@stx) (p2990@expression-position p4375@expr)))) p4373@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4371@t))) (p2765@syntax-dispatch p4371@t '(_ any)))) p4369@stx))) (set! p2725@endianness-macro (lambda (p4379@stx) ((lambda (p4381@t) ((lambda (p4383@ls/false) (if p4383@ls/false (apply (lambda (p4385@e) ((lambda (p4387@t) (if (memv p4387@t '(little)) (p2691@bless ''little) (if (memv p4387@t '(big)) (p2691@bless ''big) (p2998@syntax-violation '#f '"endianness must be big or little" p4379@stx)))) (p3004@syntax->datum p4385@e))) p4383@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4381@t))) (p2765@syntax-dispatch p4381@t '(_ any)))) p4379@stx))) (set! p2727@identifier-syntax-macro (lambda (p4389@stx) ((lambda (p4391@t) ((lambda (p4393@ls/false) (if p4393@ls/false (apply (lambda (p4395@expr) (p2691@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax p4395@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax p4395@expr) '((syntax (e* ...)))))))))) p4393@ls/false) ((lambda (p4397@t) ((lambda (p4399@ls/false) (if (and p4399@ls/false (apply (lambda (p4401@id1 p4402@expr1 p4403@id2 p4404@expr2 p4405@expr3) (and (p2268@id? p4401@id1) (p2268@id? p4403@id2) (p2268@id? p4404@expr2))) p4399@ls/false)) (apply (lambda (p4411@id1 p4412@expr1 p4413@id2 p4414@expr2 p4415@expr3) (p2691@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax p4412@expr1)) (list (list 'set! 'id p4414@expr2) (list 'syntax p4415@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons p4412@expr1 '(e* ...))))))))) p4399@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4397@t))) (p2765@syntax-dispatch p4397@t '(_ (any any) ((#(scheme-id set!) any any) any))))) p4391@t))) (p2765@syntax-dispatch p4391@t '(_ any)))) p4389@stx))) (set! p2729@do-macro (lambda (p4421@stx) ((lambda (p4424@bind) (begin (set! p4424@bind (lambda (p4447@x) ((lambda (p4449@t) ((lambda (p4451@ls/false) (if p4451@ls/false (apply (lambda (p4453@x p4454@init) (list p4453@x p4454@init p4453@x)) p4451@ls/false) ((lambda (p4457@t) ((lambda (p4459@ls/false) (if p4459@ls/false (apply (lambda (p4461@x p4462@init p4463@step) (list p4461@x p4462@init p4463@step)) p4459@ls/false) ((lambda (p4467@t) ((lambda (p4469@ls/false) (if p4469@ls/false (apply (lambda () (p2998@syntax-violation '#f '"invalid binding" p4421@stx)) p4469@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4467@t))) (p2765@syntax-dispatch p4467@t '_))) p4457@t))) (p2765@syntax-dispatch p4457@t '(any any any)))) p4449@t))) (p2765@syntax-dispatch p4449@t '(any any)))) p4447@x))) ((lambda (p4425@t) ((lambda (p4427@ls/false) (if p4427@ls/false (apply (lambda (p4429@binding* p4430@test p4431@expr* p4432@command*) ((lambda (p4437@t) ((lambda (p4439@ls/false) (if p4439@ls/false (apply (lambda (p4441@x* p4442@init* p4443@step*) (if (p2278@valid-bound-ids? p4441@x*) (p2691@bless (list 'letrec (list (list 'loop (list 'lambda p4441@x* (list 'if p4430@test (cons 'begin (cons '(if #f #f) p4431@expr*)) (cons 'begin (append p4432@command* (list (cons 'loop p4443@step*)))))))) (cons 'loop p4442@init*))) (p2998@syntax-violation '#f '"invalid bindings" p4421@stx))) p4439@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4437@t))) (p2765@syntax-dispatch p4437@t '#(each (any any any))))) (map p4424@bind p4429@binding*))) p4427@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4425@t))) (p2765@syntax-dispatch p4425@t '(_ each-any (any . each-any) . each-any)))) p4421@stx))) '#f))) (set! p2731@let*-macro (lambda (p4471@stx) ((lambda (p4473@t) ((lambda (p4475@ls/false) (if (and p4475@ls/false (apply (lambda (p4477@lhs* p4478@rhs* p4479@b p4480@b*) (for-all p2268@id? p4477@lhs*)) p4475@ls/false)) (apply (lambda (p4485@lhs* p4486@rhs* p4487@b p4488@b*) (p2691@bless ((letrec ((p4493@f (lambda (p4495@x*) (if (null? p4495@x*) (cons 'let (cons '() (cons p4487@b p4488@b*))) (list 'let (list (car p4495@x*)) (p4493@f (cdr p4495@x*))))))) p4493@f) (map list p4485@lhs* p4486@rhs*)))) p4475@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4473@t))) (p2765@syntax-dispatch p4473@t '(_ #(each (any any)) any . each-any)))) p4471@stx))) (set! p2733@or-macro (lambda (p4497@stx) ((lambda (p4499@t) ((lambda (p4501@ls/false) (if p4501@ls/false (apply (lambda () '#f) p4501@ls/false) ((lambda (p4503@t) ((lambda (p4505@ls/false) (if p4505@ls/false (apply (lambda (p4507@e p4508@e*) (p2691@bless ((letrec ((p4511@f (lambda (p4513@e p4514@e*) (if (null? p4514@e*) (list 'begin '#f p4513@e) (list 'let (list (list 't p4513@e)) (list 'if 't 't (p4511@f (car p4514@e*) (cdr p4514@e*)))))))) p4511@f) p4507@e p4508@e*))) p4505@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4503@t))) (p2765@syntax-dispatch p4503@t '(_ any . each-any)))) p4499@t))) (p2765@syntax-dispatch p4499@t '(_)))) p4497@stx))) (set! p2735@and-macro (lambda (p4517@stx) ((lambda (p4519@t) ((lambda (p4521@ls/false) (if p4521@ls/false (apply (lambda () '#t) p4521@ls/false) ((lambda (p4523@t) ((lambda (p4525@ls/false) (if p4525@ls/false (apply (lambda (p4527@e p4528@e*) (p2691@bless ((letrec ((p4531@f (lambda (p4533@e p4534@e*) (if (null? p4534@e*) (list 'begin '#f p4533@e) (cons 'if (cons p4533@e (cons (p4531@f (car p4534@e*) (cdr p4534@e*)) '(#f)))))))) p4531@f) p4527@e p4528@e*))) p4525@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4523@t))) (p2765@syntax-dispatch p4523@t '(_ any . each-any)))) p4519@t))) (p2765@syntax-dispatch p4519@t '(_)))) p4517@stx))) (set! p2737@cond-macro (lambda (p4537@stx) ((lambda (p4539@t) ((lambda (p4541@ls/false) (if p4541@ls/false (apply (lambda (p4543@cls p4544@cls*) (p2691@bless ((letrec ((p4547@f (lambda (p4549@cls p4550@cls*) (if (null? p4550@cls*) ((lambda (p4553@t) ((lambda (p4555@ls/false) (if p4555@ls/false (apply (lambda (p4557@e p4558@e*) (cons 'begin (cons p4557@e p4558@e*))) p4555@ls/false) ((lambda (p4561@t) ((lambda (p4563@ls/false) (if p4563@ls/false (apply (lambda (p4565@e p4566@p) (list 'let (list (list 't p4565@e)) (list 'if 't (cons p4566@p '(t))))) p4563@ls/false) ((lambda (p4569@t) ((lambda (p4571@ls/false) (if p4571@ls/false (apply (lambda (p4573@e) (cons 'or (cons p4573@e '((if #f #f))))) p4571@ls/false) ((lambda (p4575@t) ((lambda (p4577@ls/false) (if p4577@ls/false (apply (lambda (p4579@e p4580@e*) (list 'if p4579@e (cons 'begin p4580@e*))) p4577@ls/false) ((lambda (p4583@t) ((lambda (p4585@ls/false) (if p4585@ls/false (apply (lambda () (p2998@syntax-violation '#f '"invalid last clause" p4537@stx)) p4585@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4583@t))) (p2765@syntax-dispatch p4583@t '_))) p4575@t))) (p2765@syntax-dispatch p4575@t '(any . each-any)))) p4569@t))) (p2765@syntax-dispatch p4569@t '(any)))) p4561@t))) (p2765@syntax-dispatch p4561@t '(any #(scheme-id =>) any)))) p4553@t))) (p2765@syntax-dispatch p4553@t '(#(scheme-id else) any . each-any)))) p4549@cls) ((lambda (p4587@t) ((lambda (p4589@ls/false) (if p4589@ls/false (apply (lambda (p4591@e p4592@e*) (p2998@syntax-violation '#f '"incorrect position of keyword else" p4537@stx)) p4589@ls/false) ((lambda (p4595@t) ((lambda (p4597@ls/false) (if p4597@ls/false (apply (lambda (p4599@e p4600@p) (list 'let (list (list 't p4599@e)) (list 'if 't (cons p4600@p '(t)) (p4547@f (car p4550@cls*) (cdr p4550@cls*))))) p4597@ls/false) ((lambda (p4603@t) ((lambda (p4605@ls/false) (if p4605@ls/false (apply (lambda (p4607@e) (list 'or p4607@e (p4547@f (car p4550@cls*) (cdr p4550@cls*)))) p4605@ls/false) ((lambda (p4609@t) ((lambda (p4611@ls/false) (if p4611@ls/false (apply (lambda (p4613@e p4614@e*) (list 'if p4613@e (cons 'begin p4614@e*) (p4547@f (car p4550@cls*) (cdr p4550@cls*)))) p4611@ls/false) ((lambda (p4617@t) ((lambda (p4619@ls/false) (if p4619@ls/false (apply (lambda () (p2998@syntax-violation '#f '"invalid last clause" p4537@stx)) p4619@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4617@t))) (p2765@syntax-dispatch p4617@t '_))) p4609@t))) (p2765@syntax-dispatch p4609@t '(any . each-any)))) p4603@t))) (p2765@syntax-dispatch p4603@t '(any)))) p4595@t))) (p2765@syntax-dispatch p4595@t '(any #(scheme-id =>) any)))) p4587@t))) (p2765@syntax-dispatch p4587@t '(#(scheme-id else) any . each-any)))) p4549@cls))))) p4547@f) p4543@cls p4544@cls*))) p4541@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4539@t))) (p2765@syntax-dispatch p4539@t '(_ any . each-any)))) p4537@stx))) (set! p2739@do-include (lambda (p4621@stx p4622@id p4623@filename) ((lambda (p4627@filename) (begin (if (not (and (string? p4627@filename) (p2268@id? p4622@id))) (p2998@syntax-violation '#f '"invalid syntax" p4621@stx) (void)) (cons (p2691@bless 'begin) (with-input-from-file p4627@filename (lambda () ((letrec ((p4629@f (lambda (p4631@ls) ((lambda (p4633@x) (if (eof-object? p4633@x) (reverse p4631@ls) (p4629@f (cons (p2234@datum->stx p4622@id p4633@x) p4631@ls)))) (p1153@p918@read-annotated))))) p4629@f) '())))))) (p2290@stx->datum p4623@filename)))) (set! p2741@include-macro (lambda (p4635@e) ((lambda (p4637@t) ((lambda (p4639@ls/false) (if p4639@ls/false (apply (lambda (p4641@id p4642@filename) (p2739@do-include p4635@e p4641@id p4642@filename)) p4639@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4637@t))) (p2765@syntax-dispatch p4637@t '(any any)))) p4635@e))) (set! p2743@include-into-macro (lambda (p4645@e) ((lambda (p4647@t) ((lambda (p4649@ls/false) (if p4649@ls/false (apply (lambda (p4651@id p4652@filename) (p2739@do-include p4645@e p4651@id p4652@filename)) p4649@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4647@t))) (p2765@syntax-dispatch p4647@t '(_ any any)))) p4645@e))) (set! p2745@syntax-rules-macro (lambda (p4655@e) ((lambda (p4657@t) ((lambda (p4659@ls/false) (if p4659@ls/false (apply (lambda (p4661@lits p4662@pat* p4663@tmp*) (begin (p2771@verify-literals p4661@lits p4655@e) (p2691@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons p4661@lits (map (lambda (p4667@pat p4668@tmp) ((lambda (p4671@t) ((lambda (p4673@ls/false) (if p4673@ls/false (apply (lambda (p4675@rest) (list (cons 'g p4675@rest) (list 'syntax p4668@tmp))) p4673@ls/false) ((lambda (p4677@t) ((lambda (p4679@ls/false) (if p4679@ls/false (apply (lambda () (p2998@syntax-violation '#f '"invalid syntax-rules pattern" p4655@e p4667@pat)) p4679@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4677@t))) (p2765@syntax-dispatch p4677@t '_))) p4671@t))) (p2765@syntax-dispatch p4671@t '(_ . any)))) p4667@pat)) p4662@pat* p4663@tmp*)))))))) p4659@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4657@t))) (p2765@syntax-dispatch p4657@t '(_ each-any . #(each (any any)))))) p4655@e))) (set! p2747@quasiquote-macro ((lambda () ((lambda (p4682@datum p4710@quasicons* p4712@quasicons p4714@quasiappend p4716@quasivector p4718@vquasi p4720@quasi) (begin (set! p4682@datum (lambda (p4939@x) (list (p2647@scheme-stx 'quote) (p2244@mkstx p4939@x '() '() '())))) (set! p4710@quasicons* (lambda (p4931@x p4932@y) ((letrec ((p4935@f (lambda (p4937@x) (if (null? p4937@x) p4932@y (p4712@quasicons (car p4937@x) (p4935@f (cdr p4937@x))))))) p4935@f) p4931@x))) (set! p4712@quasicons (lambda (p4893@x p4894@y) ((lambda (p4897@t) ((lambda (p4899@ls/false) (if p4899@ls/false (apply (lambda (p4901@dy) ((lambda (p4903@t) ((lambda (p4905@ls/false) (if p4905@ls/false (apply (lambda (p4907@dx) (list (p2647@scheme-stx 'quote) (cons p4907@dx p4901@dy))) p4905@ls/false) ((lambda (p4909@t) ((lambda (p4911@ls/false) (if p4911@ls/false (apply (lambda () ((lambda (p4913@t) ((lambda (p4915@ls/false) (if p4915@ls/false (apply (lambda () (list (p2647@scheme-stx 'list) p4893@x)) p4915@ls/false) ((lambda (p4917@t) ((lambda (p4919@ls/false) (if p4919@ls/false (apply (lambda () (list (p2647@scheme-stx 'cons) p4893@x p4894@y)) p4919@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4917@t))) (p2765@syntax-dispatch p4917@t '_))) p4913@t))) (p2765@syntax-dispatch p4913@t '()))) p4901@dy)) p4911@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4909@t))) (p2765@syntax-dispatch p4909@t '_))) p4903@t))) (p2765@syntax-dispatch p4903@t '(#(scheme-id quote) any)))) p4893@x)) p4899@ls/false) ((lambda (p4921@t) ((lambda (p4923@ls/false) (if p4923@ls/false (apply (lambda (p4925@stuff) (cons* (p2647@scheme-stx 'list) p4893@x p4925@stuff)) p4923@ls/false) ((lambda (p4927@t) ((lambda (p4929@ls/false) (if p4929@ls/false (apply (lambda () (list (p2647@scheme-stx 'cons) p4893@x p4894@y)) p4929@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4927@t))) (p2765@syntax-dispatch p4927@t '_))) p4921@t))) (p2765@syntax-dispatch p4921@t '(#(scheme-id list) . each-any)))) p4897@t))) (p2765@syntax-dispatch p4897@t '(#(scheme-id quote) any)))) p4894@y))) (set! p4714@quasiappend (lambda (p4867@x p4868@y) ((lambda (p4871@ls) (if (null? p4871@ls) (list (p2647@scheme-stx 'quote) '()) (if (null? (cdr p4871@ls)) (car p4871@ls) (cons* (p2647@scheme-stx 'append) p4871@ls)))) ((letrec ((p4873@f (lambda (p4875@x) (if (null? p4875@x) ((lambda (p4877@t) ((lambda (p4879@ls/false) (if p4879@ls/false (apply (lambda () '()) p4879@ls/false) ((lambda (p4881@t) ((lambda (p4883@ls/false) (if p4883@ls/false (apply (lambda () (list p4868@y)) p4883@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4881@t))) (p2765@syntax-dispatch p4881@t '_))) p4877@t))) (p2765@syntax-dispatch p4877@t '(#(scheme-id quote) ())))) p4868@y) ((lambda (p4885@t) ((lambda (p4887@ls/false) (if p4887@ls/false (apply (lambda () (p4873@f (cdr p4875@x))) p4887@ls/false) ((lambda (p4889@t) ((lambda (p4891@ls/false) (if p4891@ls/false (apply (lambda () (cons (car p4875@x) (p4873@f (cdr p4875@x)))) p4891@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4889@t))) (p2765@syntax-dispatch p4889@t '_))) p4885@t))) (p2765@syntax-dispatch p4885@t '(#(scheme-id quote) ())))) (car p4875@x)))))) p4873@f) p4867@x)))) (set! p4716@quasivector (lambda (p4817@x) ((lambda (p4819@pat-x) ((lambda (p4821@t) ((lambda (p4823@ls/false) (if p4823@ls/false (apply (lambda (p4825@x*) (list (p2647@scheme-stx 'quote) (list->vector p4825@x*))) p4823@ls/false) ((lambda (p4827@t) ((lambda (p4829@ls/false) (if p4829@ls/false (apply (lambda () ((letrec ((p4831@f (lambda (p4833@x p4834@k) ((lambda (p4837@t) ((lambda (p4839@ls/false) (if p4839@ls/false (apply (lambda (p4841@x*) (p4834@k (map (lambda (p4843@x) (list (p2647@scheme-stx 'quote) p4843@x)) p4841@x*))) p4839@ls/false) ((lambda (p4845@t) ((lambda (p4847@ls/false) (if p4847@ls/false (apply (lambda (p4849@x*) (p4834@k p4849@x*)) p4847@ls/false) ((lambda (p4851@t) ((lambda (p4853@ls/false) (if p4853@ls/false (apply (lambda (p4855@x p4856@y) (p4831@f p4856@y (lambda (p4859@ls) (p4834@k (cons p4855@x p4859@ls))))) p4853@ls/false) ((lambda (p4861@t) ((lambda (p4863@ls/false) (if p4863@ls/false (apply (lambda () (list (p2647@scheme-stx 'list->vector) p4819@pat-x)) p4863@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4861@t))) (p2765@syntax-dispatch p4861@t '_))) p4851@t))) (p2765@syntax-dispatch p4851@t '(#(scheme-id cons) any any)))) p4845@t))) (p2765@syntax-dispatch p4845@t '(#(scheme-id list) . each-any)))) p4837@t))) (p2765@syntax-dispatch p4837@t '(#(scheme-id quote) each-any)))) p4833@x)))) p4831@f) p4817@x (lambda (p4865@ls) (cons* (p2647@scheme-stx 'vector) p4865@ls)))) p4829@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4827@t))) (p2765@syntax-dispatch p4827@t '_))) p4821@t))) (p2765@syntax-dispatch p4821@t '(#(scheme-id quote) each-any)))) p4819@pat-x)) p4817@x))) (set! p4718@vquasi (lambda (p4783@p p4784@lev) ((lambda (p4787@t) ((lambda (p4789@ls/false) (if p4789@ls/false (apply (lambda (p4791@p p4792@q) ((lambda (p4795@t) ((lambda (p4797@ls/false) (if p4797@ls/false (apply (lambda (p4799@p) (if (= p4784@lev '0) (p4710@quasicons* p4799@p (p4718@vquasi p4792@q p4784@lev)) (p4712@quasicons (p4712@quasicons (p4682@datum 'unquote) (p4720@quasi p4799@p (- p4784@lev '1))) (p4718@vquasi p4792@q p4784@lev)))) p4797@ls/false) ((lambda (p4801@t) ((lambda (p4803@ls/false) (if p4803@ls/false (apply (lambda (p4805@p) (if (= p4784@lev '0) (p4714@quasiappend p4805@p (p4718@vquasi p4792@q p4784@lev)) (p4712@quasicons (p4712@quasicons (p4682@datum 'unquote-splicing) (p4720@quasi p4805@p (- p4784@lev '1))) (p4718@vquasi p4792@q p4784@lev)))) p4803@ls/false) ((lambda (p4807@t) ((lambda (p4809@ls/false) (if p4809@ls/false (apply (lambda (p4811@p) (p4712@quasicons (p4720@quasi p4811@p p4784@lev) (p4718@vquasi p4792@q p4784@lev))) p4809@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4807@t))) (p2765@syntax-dispatch p4807@t 'any))) p4801@t))) (p2765@syntax-dispatch p4801@t '(#(scheme-id unquote-splicing) . each-any)))) p4795@t))) (p2765@syntax-dispatch p4795@t '(#(scheme-id unquote) . each-any)))) p4791@p)) p4789@ls/false) ((lambda (p4813@t) ((lambda (p4815@ls/false) (if p4815@ls/false (apply (lambda () (list (p2647@scheme-stx 'quote) '())) p4815@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4813@t))) (p2765@syntax-dispatch p4813@t '()))) p4787@t))) (p2765@syntax-dispatch p4787@t '(any . any)))) p4783@p))) (set! p4720@quasi (lambda (p4729@p p4730@lev) ((lambda (p4733@t) ((lambda (p4735@ls/false) (if p4735@ls/false (apply (lambda (p4737@p) (if (= p4730@lev '0) p4737@p (p4712@quasicons (p4682@datum 'unquote) (p4720@quasi (list p4737@p) (- p4730@lev '1))))) p4735@ls/false) ((lambda (p4739@t) ((lambda (p4741@ls/false) (if p4741@ls/false (apply (lambda (p4743@p p4744@q) (if (= p4730@lev '0) (p4710@quasicons* p4743@p (p4720@quasi p4744@q p4730@lev)) (p4712@quasicons (p4712@quasicons (p4682@datum 'unquote) (p4720@quasi p4743@p (- p4730@lev '1))) (p4720@quasi p4744@q p4730@lev)))) p4741@ls/false) ((lambda (p4747@t) ((lambda (p4749@ls/false) (if p4749@ls/false (apply (lambda (p4751@p p4752@q) (if (= p4730@lev '0) (p4714@quasiappend p4751@p (p4720@quasi p4752@q p4730@lev)) (p4712@quasicons (p4712@quasicons (p4682@datum 'unquote-splicing) (p4720@quasi p4751@p (- p4730@lev '1))) (p4720@quasi p4752@q p4730@lev)))) p4749@ls/false) ((lambda (p4755@t) ((lambda (p4757@ls/false) (if p4757@ls/false (apply (lambda (p4759@p) (p4712@quasicons (p4682@datum 'quasiquote) (p4720@quasi (list p4759@p) (+ p4730@lev '1)))) p4757@ls/false) ((lambda (p4761@t) ((lambda (p4763@ls/false) (if p4763@ls/false (apply (lambda (p4765@p p4766@q) (p4712@quasicons (p4720@quasi p4765@p p4730@lev) (p4720@quasi p4766@q p4730@lev))) p4763@ls/false) ((lambda (p4769@t) ((lambda (p4771@ls/false) (if (and p4771@ls/false (apply (lambda (p4773@x) (not (p2212@stx? p4773@x))) p4771@ls/false)) (apply (lambda (p4775@x) (p4716@quasivector (p4718@vquasi p4775@x p4730@lev))) p4771@ls/false) ((lambda (p4777@t) ((lambda (p4779@ls/false) (if p4779@ls/false (apply (lambda (p4781@p) (list (p2647@scheme-stx 'quote) p4781@p)) p4779@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4777@t))) (p2765@syntax-dispatch p4777@t 'any))) p4769@t))) (p2765@syntax-dispatch p4769@t '#(vector each-any)))) p4761@t))) (p2765@syntax-dispatch p4761@t '(any . any)))) p4755@t))) (p2765@syntax-dispatch p4755@t '(#(scheme-id quasiquote) any)))) p4747@t))) (p2765@syntax-dispatch p4747@t '((#(scheme-id unquote-splicing) . each-any) . any)))) p4739@t))) (p2765@syntax-dispatch p4739@t '((#(scheme-id unquote) . each-any) . any)))) p4733@t))) (p2765@syntax-dispatch p4733@t '(#(scheme-id unquote) any)))) p4729@p))) (lambda (p4721@x) ((lambda (p4723@t) ((lambda (p4725@ls/false) (if p4725@ls/false (apply (lambda (p4727@e) (p4720@quasi p4727@e '0)) p4725@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4723@t))) (p2765@syntax-dispatch p4723@t '(_ any)))) p4721@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! p2749@quasisyntax-macro ((lambda () ((lambda (p4942@quasi) (begin (set! p4942@quasi (lambda (p4966@p p4967@lev) ((lambda (p4970@t) ((lambda (p4972@ls/false) (if p4972@ls/false (apply (lambda (p4974@p) (if (= p4967@lev '0) ((lambda (p4976@g) (values (list p4976@g) (list p4974@p) p4976@g)) (p1152@p916@gensym)) (call-with-values (lambda () (p4942@quasi p4974@p (- p4967@lev '1))) (lambda (p4981@p4978@lhs* p4982@p4979@rhs* p4983@p4980@p) ((lambda (p4987@p p4988@rhs* p4989@lhs*) (values p4989@lhs* p4988@rhs* (list 'unsyntax p4987@p))) p4983@p4980@p p4982@p4979@rhs* p4981@p4978@lhs*))))) p4972@ls/false) ((lambda (p4993@t) ((lambda (p4995@ls/false) (if (and p4995@ls/false (apply (lambda () (= p4967@lev '0)) p4995@ls/false)) (apply (lambda () (p2998@syntax-violation '#f '"incorrect use of unsyntax" p4966@p)) p4995@ls/false) ((lambda (p4997@t) ((lambda (p4999@ls/false) (if p4999@ls/false (apply (lambda (p5001@p* p5002@q) (call-with-values (lambda () (p4942@quasi p5002@q p4967@lev)) (lambda (p5008@p5005@lhs* p5009@p5006@rhs* p5010@p5007@q) ((lambda (p5014@q p5015@rhs* p5016@lhs*) (if (= p4967@lev '0) ((lambda (p5020@g*) (values (append p5020@g* p5016@lhs*) (append p5001@p* p5015@rhs*) (append p5020@g* p5014@q))) (map (lambda (p5022@x) (p1152@p916@gensym)) p5001@p*)) (call-with-values (lambda () (p4942@quasi p5001@p* (- p4967@lev '1))) (lambda (p5027@p5024@lhs2* p5028@p5025@rhs2* p5029@p5026@p*) ((lambda (p5033@p* p5034@rhs2* p5035@lhs2*) (values (append p5035@lhs2* p5016@lhs*) (append p5034@rhs2* p5015@rhs*) (cons (cons 'unsyntax p5033@p*) p5014@q))) p5029@p5026@p* p5028@p5025@rhs2* p5027@p5024@lhs2*))))) p5010@p5007@q p5009@p5006@rhs* p5008@p5005@lhs*)))) p4999@ls/false) ((lambda (p5039@t) ((lambda (p5041@ls/false) (if p5041@ls/false (apply (lambda (p5043@p* p5044@q) (call-with-values (lambda () (p4942@quasi p5044@q p4967@lev)) (lambda (p5050@p5047@lhs* p5051@p5048@rhs* p5052@p5049@q) ((lambda (p5056@q p5057@rhs* p5058@lhs*) (if (= p4967@lev '0) ((lambda (p5062@g*) (values (append (map (lambda (p5064@g) (cons p5064@g '(...))) p5062@g*) p5058@lhs*) (append p5043@p* p5057@rhs*) (append (apply append (map (lambda (p5066@g) (cons p5066@g '(...))) p5062@g*)) p5056@q))) (map (lambda (p5068@x) (p1152@p916@gensym)) p5043@p*)) (call-with-values (lambda () (p4942@quasi p5043@p* (- p4967@lev '1))) (lambda (p5073@p5070@lhs2* p5074@p5071@rhs2* p5075@p5072@p*) ((lambda (p5079@p* p5080@rhs2* p5081@lhs2*) (values (append p5081@lhs2* p5058@lhs*) (append p5080@rhs2* p5057@rhs*) (cons (cons 'unsyntax-splicing p5079@p*) p5056@q))) p5075@p5072@p* p5074@p5071@rhs2* p5073@p5070@lhs2*))))) p5052@p5049@q p5051@p5048@rhs* p5050@p5047@lhs*)))) p5041@ls/false) ((lambda (p5085@t) ((lambda (p5087@ls/false) (if (and p5087@ls/false (apply (lambda () (= p4967@lev '0)) p5087@ls/false)) (apply (lambda () (p2998@syntax-violation '#f '"incorrect use of unsyntax-splicing" p4966@p)) p5087@ls/false) ((lambda (p5089@t) ((lambda (p5091@ls/false) (if p5091@ls/false (apply (lambda (p5093@p) (call-with-values (lambda () (p4942@quasi p5093@p (+ p4967@lev '1))) (lambda (p5098@p5095@lhs* p5099@p5096@rhs* p5100@p5097@p) ((lambda (p5104@p p5105@rhs* p5106@lhs*) (values p5106@lhs* p5105@rhs* (list 'quasisyntax p5104@p))) p5100@p5097@p p5099@p5096@rhs* p5098@p5095@lhs*)))) p5091@ls/false) ((lambda (p5110@t) ((lambda (p5112@ls/false) (if p5112@ls/false (apply (lambda (p5114@p p5115@q) (call-with-values (lambda () (p4942@quasi p5114@p p4967@lev)) (lambda (p5124@p5118@lhs* p5125@p5119@rhs* p5126@p5120@p) (call-with-values (lambda () (p4942@quasi p5115@q p4967@lev)) (lambda (p5130@p5121@lhs2* p5131@p5122@rhs2* p5132@p5123@q) ((lambda (p5136@q p5137@rhs2* p5138@lhs2* p5139@p p5140@rhs* p5141@lhs*) (values (append p5138@lhs2* p5141@lhs*) (append p5137@rhs2* p5140@rhs*) (cons p5139@p p5136@q))) p5132@p5123@q p5131@p5122@rhs2* p5130@p5121@lhs2* p5126@p5120@p p5125@p5119@rhs* p5124@p5118@lhs*)))))) p5112@ls/false) ((lambda (p5148@t) ((lambda (p5150@ls/false) (if p5150@ls/false (apply (lambda (p5152@x*) (call-with-values (lambda () (p4942@quasi p5152@x* p4967@lev)) (lambda (p5157@p5154@lhs* p5158@p5155@rhs* p5159@p5156@x*) ((lambda (p5163@x* p5164@rhs* p5165@lhs*) (values p5165@lhs* p5164@rhs* (list->vector p5163@x*))) p5159@p5156@x* p5158@p5155@rhs* p5157@p5154@lhs*)))) p5150@ls/false) ((lambda (p5169@t) ((lambda (p5171@ls/false) (if p5171@ls/false (apply (lambda () (values '() '() p4966@p)) p5171@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5169@t))) (p2765@syntax-dispatch p5169@t '_))) p5148@t))) (p2765@syntax-dispatch p5148@t '#(vector each-any)))) p5110@t))) (p2765@syntax-dispatch p5110@t '(any . any)))) p5089@t))) (p2765@syntax-dispatch p5089@t '(#(scheme-id quasisyntax) any)))) p5085@t))) (p2765@syntax-dispatch p5085@t '#(scheme-id unsyntax-splicing)))) p5039@t))) (p2765@syntax-dispatch p5039@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) p4997@t))) (p2765@syntax-dispatch p4997@t '((#(scheme-id unsyntax) . each-any) . any)))) p4993@t))) (p2765@syntax-dispatch p4993@t '#(scheme-id unsyntax)))) p4970@t))) (p2765@syntax-dispatch p4970@t '(#(scheme-id unsyntax) any)))) p4966@p))) (lambda (p4943@x) ((lambda (p4945@t) ((lambda (p4947@ls/false) (if p4947@ls/false (apply (lambda (p4949@e) (call-with-values (lambda () (p4942@quasi p4949@e '0)) (lambda (p4954@p4951@lhs* p4955@p4952@rhs* p4956@p4953@v) ((lambda (p4960@v p4961@rhs* p4962@lhs*) (p2691@bless (list 'syntax-case (cons 'list p4961@rhs*) '() (list p4962@lhs* (list 'syntax p4960@v))))) p4956@p4953@v p4955@p4952@rhs* p4954@p4951@lhs*)))) p4947@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p4945@t))) (p2765@syntax-dispatch p4945@t '(_ any)))) p4943@x)))) '#f)))) (set! p2751@define-struct-macro (lambda (p5173@stx) (p2998@syntax-violation '#f '"define-struct not supported" p5173@stx))) (set! p2753@define-record-type-macro (lambda (p5175@x) ((lambda (p5178@id p5180@get-record-name p5182@get-record-constructor-name p5184@get-record-predicate-name p5186@get-clause p5188@foo-rtd-code p5190@parent-rtd-code p5192@parent-rcd-code p5194@foo-rcd-code p5196@get-protocol-code p5198@get-fields p5200@get-mutator-indices p5202@get-mutators p5204@get-accessors p5206@enumerate p5208@do-define-record p5210@verify-clauses) (begin (set! p5178@id (lambda (p5677@ctxt . p5679@str*) (p3002@datum->syntax p5677@ctxt (string->symbol (apply string-append (map (lambda (p5681@x) (if (symbol? p5681@x) (symbol->string p5681@x) (if (string? p5681@x) p5681@x (assertion-violation 'define-record-type '"BUG")))) p5679@str*)))))) (set! p5180@get-record-name (lambda (p5659@spec) ((lambda (p5661@t) ((lambda (p5663@ls/false) (if p5663@ls/false (apply (lambda (p5665@foo p5666@make-foo p5667@foo?) p5665@foo) p5663@ls/false) ((lambda (p5671@t) ((lambda (p5673@ls/false) (if p5673@ls/false (apply (lambda (p5675@foo) p5675@foo) p5673@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5671@t))) (p2765@syntax-dispatch p5671@t 'any))) p5661@t))) (p2765@syntax-dispatch p5661@t '(any any any)))) p5659@spec))) (set! p5182@get-record-constructor-name (lambda (p5639@spec) ((lambda (p5641@t) ((lambda (p5643@ls/false) (if p5643@ls/false (apply (lambda (p5645@foo p5646@make-foo p5647@foo?) p5646@make-foo) p5643@ls/false) ((lambda (p5651@t) ((lambda (p5653@ls/false) (if (and p5653@ls/false (apply (lambda (p5655@foo) (p2268@id? p5655@foo)) p5653@ls/false)) (apply (lambda (p5657@foo) (p5178@id p5657@foo '"make-" (p2290@stx->datum p5657@foo))) p5653@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5651@t))) (p2765@syntax-dispatch p5651@t 'any))) p5641@t))) (p2765@syntax-dispatch p5641@t '(any any any)))) p5639@spec))) (set! p5184@get-record-predicate-name (lambda (p5619@spec) ((lambda (p5621@t) ((lambda (p5623@ls/false) (if p5623@ls/false (apply (lambda (p5625@foo p5626@make-foo p5627@foo?) p5627@foo?) p5623@ls/false) ((lambda (p5631@t) ((lambda (p5633@ls/false) (if (and p5633@ls/false (apply (lambda (p5635@foo) (p2268@id? p5635@foo)) p5633@ls/false)) (apply (lambda (p5637@foo) (p5178@id p5637@foo (p2290@stx->datum p5637@foo) '"?")) p5633@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5631@t))) (p2765@syntax-dispatch p5631@t 'any))) p5621@t))) (p2765@syntax-dispatch p5621@t '(any any any)))) p5619@spec))) (set! p5186@get-clause (lambda (p5601@id p5602@ls) ((lambda (p5605@t) ((lambda (p5607@ls/false) (if p5607@ls/false (apply (lambda () '#f) p5607@ls/false) ((lambda (p5609@t) ((lambda (p5611@ls/false) (if p5611@ls/false (apply (lambda (p5613@x p5614@rest p5615@ls) (if (p2276@free-id=? (p2691@bless p5601@id) p5613@x) (cons p5613@x p5614@rest) (p5186@get-clause p5601@id p5615@ls))) p5611@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5609@t))) (p2765@syntax-dispatch p5609@t '((any . any) . any)))) p5605@t))) (p2765@syntax-dispatch p5605@t '()))) p5602@ls))) (set! p5188@foo-rtd-code (lambda (p5519@name p5520@clause* p5521@parent-rtd-code) ((lambda (p5526@convert-field-spec*) (begin (set! p5526@convert-field-spec* (lambda (p5575@ls) (list->vector (map (lambda (p5577@x) ((lambda (p5579@t) ((lambda (p5581@ls/false) (if p5581@ls/false (apply (lambda (p5583@name p5584@rest) (list 'mutable p5583@name)) p5581@ls/false) ((lambda (p5587@t) ((lambda (p5589@ls/false) (if p5589@ls/false (apply (lambda (p5591@name p5592@rest) (list 'immutable p5591@name)) p5589@ls/false) ((lambda (p5595@t) ((lambda (p5597@ls/false) (if p5597@ls/false (apply (lambda (p5599@name) (list 'immutable p5599@name)) p5597@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5595@t))) (p2765@syntax-dispatch p5595@t 'any))) p5587@t))) (p2765@syntax-dispatch p5587@t '(#(scheme-id immutable) any . any)))) p5579@t))) (p2765@syntax-dispatch p5579@t '(#(scheme-id mutable) any . any)))) p5577@x)) p5575@ls)))) ((lambda (p5527@uid-code p5528@sealed? p5529@opaque? p5530@fields) (p2691@bless (list 'make-record-type-descriptor (list 'quote p5519@name) p5521@parent-rtd-code p5527@uid-code p5528@sealed? p5529@opaque? p5530@fields))) ((lambda (p5535@t) ((lambda (p5537@ls/false) (if p5537@ls/false (apply (lambda () (list 'quote (p1152@p916@gensym))) p5537@ls/false) ((lambda (p5539@t) ((lambda (p5541@ls/false) (if p5541@ls/false (apply (lambda (p5543@uid) (list 'quote p5543@uid)) p5541@ls/false) ((lambda (p5545@t) ((lambda (p5547@ls/false) (if p5547@ls/false (apply (lambda () '#f) p5547@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5545@t))) (p2765@syntax-dispatch p5545@t '_))) p5539@t))) (p2765@syntax-dispatch p5539@t '(_ any)))) p5535@t))) (p2765@syntax-dispatch p5535@t '(_)))) (p5186@get-clause 'nongenerative p5520@clause*)) ((lambda (p5549@t) ((lambda (p5551@ls/false) (if p5551@ls/false (apply (lambda () '#t) p5551@ls/false) ((lambda (p5553@t) ((lambda (p5555@ls/false) (if p5555@ls/false (apply (lambda () '#f) p5555@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5553@t))) (p2765@syntax-dispatch p5553@t '_))) p5549@t))) (p2765@syntax-dispatch p5549@t '(_ #(atom #t))))) (p5186@get-clause 'sealed p5520@clause*)) ((lambda (p5557@t) ((lambda (p5559@ls/false) (if p5559@ls/false (apply (lambda () '#t) p5559@ls/false) ((lambda (p5561@t) ((lambda (p5563@ls/false) (if p5563@ls/false (apply (lambda () '#f) p5563@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5561@t))) (p2765@syntax-dispatch p5561@t '_))) p5557@t))) (p2765@syntax-dispatch p5557@t '(_ #(atom #t))))) (p5186@get-clause 'opaque p5520@clause*)) ((lambda (p5565@t) ((lambda (p5567@ls/false) (if p5567@ls/false (apply (lambda (p5569@field-spec*) (list 'quote (p5526@convert-field-spec* p5569@field-spec*))) p5567@ls/false) ((lambda (p5571@t) ((lambda (p5573@ls/false) (if p5573@ls/false (apply (lambda () ''#()) p5573@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5571@t))) (p2765@syntax-dispatch p5571@t '_))) p5565@t))) (p2765@syntax-dispatch p5565@t '(_ . each-any)))) (p5186@get-clause 'fields p5520@clause*))))) '#f))) (set! p5190@parent-rtd-code (lambda (p5495@clause*) ((lambda (p5497@t) ((lambda (p5499@ls/false) (if p5499@ls/false (apply (lambda (p5501@name) (list 'record-type-descriptor p5501@name)) p5499@ls/false) ((lambda (p5503@t) ((lambda (p5505@ls/false) (if p5505@ls/false (apply (lambda () ((lambda (p5507@t) ((lambda (p5509@ls/false) (if p5509@ls/false (apply (lambda (p5511@rtd p5512@rcd) p5511@rtd) p5509@ls/false) ((lambda (p5515@t) ((lambda (p5517@ls/false) (if p5517@ls/false (apply (lambda () '#f) p5517@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5515@t))) (p2765@syntax-dispatch p5515@t '#(atom #f)))) p5507@t))) (p2765@syntax-dispatch p5507@t '(_ any any)))) (p5186@get-clause 'parent-rtd p5495@clause*))) p5505@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5503@t))) (p2765@syntax-dispatch p5503@t '#(atom #f)))) p5497@t))) (p2765@syntax-dispatch p5497@t '(_ any)))) (p5186@get-clause 'parent p5495@clause*)))) (set! p5192@parent-rcd-code (lambda (p5471@clause*) ((lambda (p5473@t) ((lambda (p5475@ls/false) (if p5475@ls/false (apply (lambda (p5477@name) (list 'record-constructor-descriptor p5477@name)) p5475@ls/false) ((lambda (p5479@t) ((lambda (p5481@ls/false) (if p5481@ls/false (apply (lambda () ((lambda (p5483@t) ((lambda (p5485@ls/false) (if p5485@ls/false (apply (lambda (p5487@rtd p5488@rcd) p5488@rcd) p5485@ls/false) ((lambda (p5491@t) ((lambda (p5493@ls/false) (if p5493@ls/false (apply (lambda () '#f) p5493@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5491@t))) (p2765@syntax-dispatch p5491@t '#(atom #f)))) p5483@t))) (p2765@syntax-dispatch p5483@t '(_ any any)))) (p5186@get-clause 'parent-rtd p5471@clause*))) p5481@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5479@t))) (p2765@syntax-dispatch p5479@t '#(atom #f)))) p5473@t))) (p2765@syntax-dispatch p5473@t '(_ any)))) (p5186@get-clause 'parent p5471@clause*)))) (set! p5194@foo-rcd-code (lambda (p5463@clause* p5464@foo-rtd p5465@protocol p5466@parent-rcd-code) (list 'make-record-constructor-descriptor p5464@foo-rtd p5466@parent-rcd-code p5465@protocol))) (set! p5196@get-protocol-code (lambda (p5451@clause*) ((lambda (p5453@t) ((lambda (p5455@ls/false) (if p5455@ls/false (apply (lambda (p5457@expr) p5457@expr) p5455@ls/false) ((lambda (p5459@t) ((lambda (p5461@ls/false) (if p5461@ls/false (apply (lambda () '#f) p5461@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5459@t))) (p2765@syntax-dispatch p5459@t '_))) p5453@t))) (p2765@syntax-dispatch p5453@t '(_ any)))) (p5186@get-clause 'protocol p5451@clause*)))) (set! p5198@get-fields (lambda (p5433@clause*) ((lambda (p5435@t) ((lambda (p5437@ls/false) (if p5437@ls/false (apply (lambda () '()) p5437@ls/false) ((lambda (p5439@t) ((lambda (p5441@ls/false) (if p5441@ls/false (apply (lambda (p5443@f*) p5443@f*) p5441@ls/false) ((lambda (p5445@t) ((lambda (p5447@ls/false) (if p5447@ls/false (apply (lambda (p5449@rest) (p5198@get-fields p5449@rest)) p5447@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5445@t))) (p2765@syntax-dispatch p5445@t '(_ . any)))) p5439@t))) (p2765@syntax-dispatch p5439@t '((#(scheme-id fields) . each-any) . _)))) p5435@t))) (p2765@syntax-dispatch p5435@t '()))) p5433@clause*))) (set! p5200@get-mutator-indices (lambda (p5409@fields) ((letrec ((p5411@f (lambda (p5413@fields p5414@i) ((lambda (p5417@t) ((lambda (p5419@ls/false) (if p5419@ls/false (apply (lambda () '()) p5419@ls/false) ((lambda (p5421@t) ((lambda (p5423@ls/false) (if p5423@ls/false (apply (lambda (p5425@rest) (cons p5414@i (p5411@f p5425@rest (+ p5414@i '1)))) p5423@ls/false) ((lambda (p5427@t) ((lambda (p5429@ls/false) (if p5429@ls/false (apply (lambda (p5431@rest) (p5411@f p5431@rest (+ p5414@i '1))) p5429@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5427@t))) (p2765@syntax-dispatch p5427@t '(_ . any)))) p5421@t))) (p2765@syntax-dispatch p5421@t '((#(scheme-id mutable) . _) . any)))) p5417@t))) (p2765@syntax-dispatch p5417@t '()))) p5413@fields)))) p5411@f) p5409@fields '0))) (set! p5202@get-mutators (lambda (p5367@foo p5368@fields) ((lambda (p5372@gen-name) (begin (set! p5372@gen-name (lambda (p5407@x) (p3002@datum->syntax p5367@foo (string->symbol (string-append (symbol->string (p3004@syntax->datum p5367@foo)) '"-" (symbol->string (p3004@syntax->datum p5407@x)) '"-set!"))))) ((letrec ((p5373@f (lambda (p5375@fields) ((lambda (p5377@t) ((lambda (p5379@ls/false) (if p5379@ls/false (apply (lambda () '()) p5379@ls/false) ((lambda (p5381@t) ((lambda (p5383@ls/false) (if p5383@ls/false (apply (lambda (p5385@name p5386@accessor p5387@mutator p5388@rest) (cons p5387@mutator (p5373@f p5388@rest))) p5383@ls/false) ((lambda (p5393@t) ((lambda (p5395@ls/false) (if p5395@ls/false (apply (lambda (p5397@name p5398@rest) (cons (p5372@gen-name p5397@name) (p5373@f p5398@rest))) p5395@ls/false) ((lambda (p5401@t) ((lambda (p5403@ls/false) (if p5403@ls/false (apply (lambda (p5405@rest) (p5373@f p5405@rest)) p5403@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5401@t))) (p2765@syntax-dispatch p5401@t '(_ . any)))) p5393@t))) (p2765@syntax-dispatch p5393@t '((#(scheme-id mutable) any) . any)))) p5381@t))) (p2765@syntax-dispatch p5381@t '((#(scheme-id mutable) any any any) . any)))) p5377@t))) (p2765@syntax-dispatch p5377@t '()))) p5375@fields)))) p5373@f) p5368@fields))) '#f))) (set! p5204@get-accessors (lambda (p5299@foo p5300@fields) ((lambda (p5304@gen-name) (begin (set! p5304@gen-name (lambda (p5365@x) (p3002@datum->syntax p5299@foo (string->symbol (string-append (symbol->string (p3004@syntax->datum p5299@foo)) '"-" (symbol->string (p3004@syntax->datum p5365@x))))))) (map (lambda (p5305@field) ((lambda (p5307@t) ((lambda (p5309@ls/false) (if (and p5309@ls/false (apply (lambda (p5311@name p5312@accessor p5313@mutator) (p2268@id? p5312@accessor)) p5309@ls/false)) (apply (lambda (p5317@name p5318@accessor p5319@mutator) p5318@accessor) p5309@ls/false) ((lambda (p5323@t) ((lambda (p5325@ls/false) (if (and p5325@ls/false (apply (lambda (p5327@name p5328@accessor) (p2268@id? p5328@accessor)) p5325@ls/false)) (apply (lambda (p5331@name p5332@accessor) p5332@accessor) p5325@ls/false) ((lambda (p5335@t) ((lambda (p5337@ls/false) (if (and p5337@ls/false (apply (lambda (p5339@name) (p2268@id? p5339@name)) p5337@ls/false)) (apply (lambda (p5341@name) (p5304@gen-name p5341@name)) p5337@ls/false) ((lambda (p5343@t) ((lambda (p5345@ls/false) (if (and p5345@ls/false (apply (lambda (p5347@name) (p2268@id? p5347@name)) p5345@ls/false)) (apply (lambda (p5349@name) (p5304@gen-name p5349@name)) p5345@ls/false) ((lambda (p5351@t) ((lambda (p5353@ls/false) (if (and p5353@ls/false (apply (lambda (p5355@name) (p2268@id? p5355@name)) p5353@ls/false)) (apply (lambda (p5357@name) (p5304@gen-name p5357@name)) p5353@ls/false) ((lambda (p5359@t) ((lambda (p5361@ls/false) (if p5361@ls/false (apply (lambda (p5363@others) (p2998@syntax-violation '#f '"invalid field spec" p5305@field)) p5361@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5359@t))) (p2765@syntax-dispatch p5359@t 'any))) p5351@t))) (p2765@syntax-dispatch p5351@t 'any))) p5343@t))) (p2765@syntax-dispatch p5343@t '(#(scheme-id immutable) any)))) p5335@t))) (p2765@syntax-dispatch p5335@t '(#(scheme-id mutable) any)))) p5323@t))) (p2765@syntax-dispatch p5323@t '(#(scheme-id immutable) any any)))) p5307@t))) (p2765@syntax-dispatch p5307@t '(#(scheme-id mutable) any any any)))) p5305@field)) p5300@fields))) '#f))) (set! p5206@enumerate (lambda (p5291@ls) ((letrec ((p5293@f (lambda (p5295@ls p5296@i) (if (null? p5295@ls) '() (cons p5296@i (p5293@f (cdr p5295@ls) (+ p5296@i '1))))))) p5293@f) p5291@ls '0))) (set! p5208@do-define-record (lambda (p5251@namespec p5252@clause*) ((lambda (p5255@foo) ((lambda (p5257@foo-rtd) ((lambda (p5259@foo-rcd) ((lambda (p5261@protocol) ((lambda (p5263@make-foo) ((lambda (p5265@fields) ((lambda (p5267@idx*) ((lambda (p5269@foo-x*) ((lambda (p5271@set-foo-x!*) ((lambda (p5273@set-foo-idx*) ((lambda (p5275@foo?) ((lambda (p5277@foo-rtd-code) ((lambda (p5279@foo-rcd-code) ((lambda (p5281@protocol-code) ((lambda () (p2691@bless (cons 'begin (cons (list 'define p5257@foo-rtd p5277@foo-rtd-code) (cons (list 'define p5261@protocol p5281@protocol-code) (cons (list 'define p5259@foo-rcd p5279@foo-rcd-code) (cons (list 'define-syntax p5255@foo (list 'list ''$rtd (list 'syntax p5257@foo-rtd) (list 'syntax p5259@foo-rcd))) (cons (list 'define p5275@foo? (list 'record-predicate p5257@foo-rtd)) (cons (list 'define p5263@make-foo (list 'record-constructor p5259@foo-rcd)) (append (map (lambda (p5283@foo-x p5284@idx) (list 'define p5283@foo-x (list 'record-accessor p5257@foo-rtd p5284@idx))) p5269@foo-x* p5267@idx*) (map (lambda (p5287@set-foo-x! p5288@idx) (list 'define p5287@set-foo-x! (list 'record-mutator p5257@foo-rtd p5288@idx))) p5271@set-foo-x!* p5273@set-foo-idx*))))))))))))) (p5196@get-protocol-code p5252@clause*))) (p5194@foo-rcd-code p5252@clause* p5257@foo-rtd p5261@protocol (p5192@parent-rcd-code p5252@clause*)))) (p5188@foo-rtd-code p5255@foo p5252@clause* (p5190@parent-rtd-code p5252@clause*)))) (p5184@get-record-predicate-name p5251@namespec))) (p5200@get-mutator-indices p5265@fields))) (p5202@get-mutators p5255@foo p5265@fields))) (p5204@get-accessors p5255@foo p5265@fields))) (p5206@enumerate p5265@fields))) (p5198@get-fields p5252@clause*))) (p5182@get-record-constructor-name p5251@namespec))) (p1152@p916@gensym))) (p1152@p916@gensym))) (p1152@p916@gensym))) (p5180@get-record-name p5251@namespec)))) (set! p5210@verify-clauses (lambda (p5219@x p5220@cls*) ((lambda (p5224@valid-kwds p5226@free-id-member?) (begin (set! p5224@valid-kwds (map p2691@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! p5226@free-id-member? (lambda (p5247@x p5248@ls) (and (pair? p5248@ls) (or (p2276@free-id=? p5247@x (car p5248@ls)) (p5226@free-id-member? p5247@x (cdr p5248@ls)))))) ((letrec ((p5227@f (lambda (p5229@cls* p5230@seen*) (if (not (null? p5229@cls*)) ((lambda (p5233@t) ((lambda (p5235@ls/false) (if p5235@ls/false (apply (lambda (p5237@kwd p5238@rest) (if (or (not (p2268@id? p5237@kwd)) (not (p5226@free-id-member? p5237@kwd p5224@valid-kwds))) (p2998@syntax-violation '#f '"not a valid define-record-type keyword" p5237@kwd) (if (p2282@bound-id-member? p5237@kwd p5230@seen*) (p2998@syntax-violation '#f '"duplicate use of keyword " p5219@x p5237@kwd) (p5227@f (cdr p5229@cls*) (cons p5237@kwd p5230@seen*))))) p5235@ls/false) ((lambda (p5241@t) ((lambda (p5243@ls/false) (if p5243@ls/false (apply (lambda (p5245@cls) (p2998@syntax-violation '#f '"malformed define-record-type clause" p5245@cls)) p5243@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5241@t))) (p2765@syntax-dispatch p5241@t 'any))) p5233@t))) (p2765@syntax-dispatch p5233@t '(any . any)))) (car p5229@cls*)) (void))))) p5227@f) p5220@cls* '()))) '#f '#f))) ((lambda (p5211@t) ((lambda (p5213@ls/false) (if p5213@ls/false (apply (lambda (p5215@namespec p5216@clause*) (begin (p5210@verify-clauses p5175@x p5216@clause*) (p5208@do-define-record p5215@namespec p5216@clause*))) p5213@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5211@t))) (p2765@syntax-dispatch p5211@t '(_ any . each-any)))) p5175@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! p2755@define-condition-type-macro (lambda (p5683@x) ((lambda (p5686@mkname) (begin (set! p5686@mkname (lambda (p5731@name p5732@suffix) (p3002@datum->syntax p5731@name (string->symbol (string-append (symbol->string (p3004@syntax->datum p5731@name)) p5732@suffix))))) ((lambda (p5687@t) ((lambda (p5689@ls/false) (if (and p5689@ls/false (apply (lambda (p5691@ctxt p5692@name p5693@super p5694@constructor p5695@predicate p5696@field* p5697@accessor*) (and (p2268@id? p5692@name) (p2268@id? p5693@super) (p2268@id? p5694@constructor) (p2268@id? p5695@predicate) (for-all p2268@id? p5696@field*) (for-all p2268@id? p5697@accessor*))) p5689@ls/false)) (apply (lambda (p5705@ctxt p5706@name p5707@super p5708@constructor p5709@predicate p5710@field* p5711@accessor*) ((lambda (p5719@aux-accessor*) (p2691@bless (cons 'begin (cons (cons 'define-record-type (cons (list p5706@name p5708@constructor (p1152@p916@gensym)) (cons (list 'parent p5707@super) (cons (cons 'fields (map (lambda (p5721@field p5722@aux) (list 'immutable p5721@field p5722@aux)) p5710@field* p5719@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define p5709@predicate (list 'condition-predicate (list 'record-type-descriptor p5706@name))) (map (lambda (p5725@accessor p5726@aux) (list 'define p5725@accessor (list 'condition-accessor (list 'record-type-descriptor p5706@name) p5726@aux))) p5711@accessor* p5719@aux-accessor*)))))) (map (lambda (p5729@x) (p1152@p916@gensym)) p5711@accessor*))) p5689@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5687@t))) (p2765@syntax-dispatch p5687@t '(any any any any any . #(each (any any)))))) p5683@x))) '#f))) (set! p2757@incorrect-usage-macro (lambda (p5735@e) (p2998@syntax-violation '#f '"incorrect usage of auxiliary keyword" p5735@e))) (set! p2759@parameterize-macro (lambda (p5737@e) ((lambda (p5739@t) ((lambda (p5741@ls/false) (if p5741@ls/false (apply (lambda (p5743@b p5744@b*) (p2691@bless (cons 'let (cons '() (cons p5743@b p5744@b*))))) p5741@ls/false) ((lambda (p5747@t) ((lambda (p5749@ls/false) (if p5749@ls/false (apply (lambda (p5751@olhs* p5752@orhs* p5753@b p5754@b*) ((lambda (p5759@lhs* p5760@rhs*) (p2691@bless (cons (list 'lambda (append p5759@lhs* p5760@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (p5763@lhs p5764@rhs) (list 'let (list (list 't (list p5763@lhs))) (list p5763@lhs p5764@rhs) (cons 'set! (cons p5764@rhs '(t))))) p5759@lhs* p5760@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons p5753@b p5754@b*))) '(swap)))))) (append p5751@olhs* p5752@orhs*)))) (p2980@generate-temporaries p5751@olhs*) (p2980@generate-temporaries p5752@orhs*))) p5749@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5747@t))) (p2765@syntax-dispatch p5747@t '(_ #(each (any any)) any . each-any)))) p5739@t))) (p2765@syntax-dispatch p5739@t '(_ () any . each-any)))) p5737@e))) (set! p2761@foreign-call-transformer (lambda (p5767@e p5768@r p5769@mr) ((lambda (p5773@t) ((lambda (p5775@ls/false) (if p5775@ls/false (apply (lambda (p5777@name p5778@arg*) (cons 'foreign-call (cons (p2799@chi-expr p5777@name p5768@r p5769@mr) (p2795@chi-expr* p5778@arg* p5768@r p5769@mr)))) p5775@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5773@t))) (p2765@syntax-dispatch p5773@t '(_ any . each-any)))) p5767@e))) (set! p2763@convert-pattern (lambda (p5781@pattern p5782@keys) ((lambda (p5786@cvt* p5788@cvt) (begin (set! p5786@cvt* (lambda (p5931@p* p5932@n p5933@ids) (if (null? p5931@p*) (values '() p5933@ids) (call-with-values (lambda () (p5786@cvt* (cdr p5931@p*) p5932@n p5933@ids)) (lambda (p5939@p5937@y p5940@p5938@ids) ((lambda (p5943@ids p5944@y) (call-with-values (lambda () (p5788@cvt (car p5931@p*) p5932@n p5943@ids)) (lambda (p5949@p5947@x p5950@p5948@ids) ((lambda (p5953@ids p5954@x) (values (cons p5954@x p5944@y) p5953@ids)) p5950@p5948@ids p5949@p5947@x)))) p5940@p5938@ids p5939@p5937@y)))))) (set! p5788@cvt (lambda (p5789@p p5790@n p5791@ids) ((lambda (p5795@t) ((lambda (p5797@ls/false) (if (and p5797@ls/false (apply (lambda (p5799@id) (p2268@id? p5799@id)) p5797@ls/false)) (apply (lambda (p5801@id) (if (p2282@bound-id-member? p5789@p p5782@keys) (values (vector 'free-id p5789@p) p5791@ids) (if (p2276@free-id=? p5789@p (p2647@scheme-stx '_)) (values '_ p5791@ids) (values 'any (cons (cons p5789@p p5790@n) p5791@ids))))) p5797@ls/false) ((lambda (p5803@t) ((lambda (p5805@ls/false) (if (and p5805@ls/false (apply (lambda (p5807@p p5808@dots) (p2767@ellipsis? p5808@dots)) p5805@ls/false)) (apply (lambda (p5811@p p5812@dots) (call-with-values (lambda () (p5788@cvt p5811@p (+ p5790@n '1) p5791@ids)) (lambda (p5817@p5815@p p5818@p5816@ids) ((lambda (p5821@ids p5822@p) (values (if (eq? p5822@p 'any) 'each-any (vector 'each p5822@p)) p5821@ids)) p5818@p5816@ids p5817@p5815@p)))) p5805@ls/false) ((lambda (p5825@t) ((lambda (p5827@ls/false) (if (and p5827@ls/false (apply (lambda (p5829@x p5830@dots p5831@ys p5832@z) (p2767@ellipsis? p5830@dots)) p5827@ls/false)) (apply (lambda (p5837@x p5838@dots p5839@ys p5840@z) (call-with-values (lambda () (p5788@cvt p5840@z p5790@n p5791@ids)) (lambda (p5847@p5845@z p5848@p5846@ids) ((lambda (p5851@ids p5852@z) (call-with-values (lambda () (p5786@cvt* p5839@ys p5790@n p5851@ids)) (lambda (p5857@p5855@ys p5858@p5856@ids) ((lambda (p5861@ids p5862@ys) (call-with-values (lambda () (p5788@cvt p5837@x (+ p5790@n '1) p5861@ids)) (lambda (p5867@p5865@x p5868@p5866@ids) ((lambda (p5871@ids p5872@x) (values (vector 'each+ p5872@x (reverse p5862@ys) p5852@z) p5871@ids)) p5868@p5866@ids p5867@p5865@x)))) p5858@p5856@ids p5857@p5855@ys)))) p5848@p5846@ids p5847@p5845@z)))) p5827@ls/false) ((lambda (p5875@t) ((lambda (p5877@ls/false) (if p5877@ls/false (apply (lambda (p5879@x p5880@y) (call-with-values (lambda () (p5788@cvt p5880@y p5790@n p5791@ids)) (lambda (p5885@p5883@y p5886@p5884@ids) ((lambda (p5889@ids p5890@y) (call-with-values (lambda () (p5788@cvt p5879@x p5790@n p5889@ids)) (lambda (p5895@p5893@x p5896@p5894@ids) ((lambda (p5899@ids p5900@x) (values (cons p5900@x p5890@y) p5899@ids)) p5896@p5894@ids p5895@p5893@x)))) p5886@p5884@ids p5885@p5883@y)))) p5877@ls/false) ((lambda (p5903@t) ((lambda (p5905@ls/false) (if p5905@ls/false (apply (lambda () (values '() p5791@ids)) p5905@ls/false) ((lambda (p5907@t) ((lambda (p5909@ls/false) (if (and p5909@ls/false (apply (lambda (p5911@p) (not (p2212@stx? p5911@p))) p5909@ls/false)) (apply (lambda (p5913@p) (call-with-values (lambda () (p5788@cvt p5913@p p5790@n p5791@ids)) (lambda (p5917@p5915@p p5918@p5916@ids) ((lambda (p5921@ids p5922@p) (values (vector 'vector p5922@p) p5921@ids)) p5918@p5916@ids p5917@p5915@p)))) p5909@ls/false) ((lambda (p5925@t) ((lambda (p5927@ls/false) (if p5927@ls/false (apply (lambda (p5929@datum) (values (vector 'atom (p2290@stx->datum p5929@datum)) p5791@ids)) p5927@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p5925@t))) (p2765@syntax-dispatch p5925@t 'any))) p5907@t))) (p2765@syntax-dispatch p5907@t '#(vector each-any)))) p5903@t))) (p2765@syntax-dispatch p5903@t '()))) p5875@t))) (p2765@syntax-dispatch p5875@t '(any . any)))) p5825@t))) (p2765@syntax-dispatch p5825@t '(any any . #(each+ any () any))))) p5803@t))) (p2765@syntax-dispatch p5803@t '(any any)))) p5795@t))) (p2765@syntax-dispatch p5795@t 'any))) p5789@p))) (p5788@cvt p5781@pattern '0 '()))) '#f '#f))) (set! p2765@syntax-dispatch ((lambda () ((lambda (p5958@stx^ p5960@match-each p5962@match-each+ p5964@match-each-any p5966@match-empty p5968@combine p5970@match* p5972@match) (begin (set! p5958@stx^ (lambda (p6159@e p6160@m* p6161@s* p6162@ae*) (if (and (null? p6160@m*) (null? p6161@s*) (null? p6162@ae*)) p6159@e (p2244@mkstx p6159@e p6160@m* p6161@s* p6162@ae*)))) (set! p5960@match-each (lambda (p6130@e p6131@p p6132@m* p6133@s* p6134@ae*) (if (pair? p6130@e) ((lambda (p6140@first) (and p6140@first ((lambda (p6142@rest) (and p6142@rest (cons p6140@first p6142@rest))) (p5960@match-each (cdr p6130@e) p6131@p p6132@m* p6133@s* p6134@ae*)))) (p5972@match (car p6130@e) p6131@p p6132@m* p6133@s* p6134@ae* '())) (if (null? p6130@e) '() (if (p2212@stx? p6130@e) (and (not (p2138@top-marked? p6132@m*)) (call-with-values (lambda () (p2242@join-wraps p6132@m* p6133@s* p6134@ae* p6130@e)) (lambda (p6147@p6144@m* p6148@p6145@s* p6149@p6146@ae*) ((lambda (p6153@ae* p6154@s* p6155@m*) (p5960@match-each (p2216@stx-expr p6130@e) p6131@p p6155@m* p6154@s* p6153@ae*)) p6149@p6146@ae* p6148@p6145@s* p6147@p6144@m*)))) (if (p1155@p922@annotation? p6130@e) (p5960@match-each (p1157@p926@annotation-expression p6130@e) p6131@p p6132@m* p6133@s* p6134@ae*) '#f)))))) (set! p5962@match-each+ (lambda (p6072@e p6073@x-pat p6074@y-pat p6075@z-pat p6076@m* p6077@s* p6078@ae* p6079@r) ((letrec ((p6088@f (lambda (p6090@e p6091@m* p6092@s* p6093@ae*) (if (pair? p6090@e) (call-with-values (lambda () (p6088@f (cdr p6090@e) p6091@m* p6092@s* p6093@ae*)) (lambda (p6101@p6098@xr* p6102@p6099@y-pat p6103@p6100@r) ((lambda (p6107@r p6108@y-pat p6109@xr*) (if p6107@r (if (null? p6108@y-pat) ((lambda (p6113@xr) (if p6113@xr (values (cons p6113@xr p6109@xr*) p6108@y-pat p6107@r) (values '#f '#f '#f))) (p5972@match (car p6090@e) p6073@x-pat p6091@m* p6092@s* p6093@ae* '())) (values '() (cdr p6108@y-pat) (p5972@match (car p6090@e) (car p6108@y-pat) p6091@m* p6092@s* p6093@ae* p6107@r))) (values '#f '#f '#f))) p6103@p6100@r p6102@p6099@y-pat p6101@p6098@xr*))) (if (p2212@stx? p6090@e) (if (p2138@top-marked? p6091@m*) (values '() p6074@y-pat (p5972@match p6090@e p6075@z-pat p6091@m* p6092@s* p6093@ae* p6079@r)) (call-with-values (lambda () (p2242@join-wraps p6091@m* p6092@s* p6093@ae* p6090@e)) (lambda (p6118@p6115@m* p6119@p6116@s* p6120@p6117@ae*) ((lambda (p6124@ae* p6125@s* p6126@m*) (p6088@f (p2216@stx-expr p6090@e) p6126@m* p6125@s* p6124@ae*)) p6120@p6117@ae* p6119@p6116@s* p6118@p6115@m*)))) (if (p1155@p922@annotation? p6090@e) (p6088@f (p1157@p926@annotation-expression p6090@e) p6091@m* p6092@s* p6093@ae*) (values '() p6074@y-pat (p5972@match p6090@e p6075@z-pat p6091@m* p6092@s* p6093@ae* p6079@r)))))))) p6088@f) p6072@e p6076@m* p6077@s* p6078@ae*))) (set! p5964@match-each-any (lambda (p6047@e p6048@m* p6049@s* p6050@ae*) (if (pair? p6047@e) ((lambda (p6055@l) (and p6055@l (cons (p5958@stx^ (car p6047@e) p6048@m* p6049@s* p6050@ae*) p6055@l))) (p5964@match-each-any (cdr p6047@e) p6048@m* p6049@s* p6050@ae*)) (if (null? p6047@e) '() (if (p2212@stx? p6047@e) (and (not (p2138@top-marked? p6048@m*)) (call-with-values (lambda () (p2242@join-wraps p6048@m* p6049@s* p6050@ae* p6047@e)) (lambda (p6060@p6057@m* p6061@p6058@s* p6062@p6059@ae*) ((lambda (p6066@ae* p6067@s* p6068@m*) (p5964@match-each-any (p2216@stx-expr p6047@e) p6068@m* p6067@s* p6066@ae*)) p6062@p6059@ae* p6061@p6058@s* p6060@p6057@m*)))) (if (p1155@p922@annotation? p6047@e) (p5964@match-each-any (p1157@p926@annotation-expression p6047@e) p6048@m* p6049@s* p6050@ae*) '#f)))))) (set! p5966@match-empty (lambda (p6041@p p6042@r) (if (null? p6041@p) p6042@r (if (eq? p6041@p '_) p6042@r (if (eq? p6041@p 'any) (cons '() p6042@r) (if (pair? p6041@p) (p5966@match-empty (car p6041@p) (p5966@match-empty (cdr p6041@p) p6042@r)) (if (eq? p6041@p 'each-any) (cons '() p6042@r) ((lambda (p6045@t) (if (memv p6045@t '(each)) (p5966@match-empty (vector-ref p6041@p '1) p6042@r) (if (memv p6045@t '(each+)) (p5966@match-empty (vector-ref p6041@p '1) (p5966@match-empty (reverse (vector-ref p6041@p '2)) (p5966@match-empty (vector-ref p6041@p '3) p6042@r))) (if (memv p6045@t '(free-id atom)) p6042@r (if (memv p6045@t '(scheme-id atom)) p6042@r (if (memv p6045@t '(vector)) (p5966@match-empty (vector-ref p6041@p '1) p6042@r) (assertion-violation 'syntax-dispatch '"invalid pattern" p6041@p))))))) (vector-ref p6041@p '0))))))))) (set! p5968@combine (lambda (p6037@r* p6038@r) (if (null? (car p6037@r*)) p6038@r (cons (map car p6037@r*) (p5968@combine (map cdr p6037@r*) p6038@r))))) (set! p5970@match* (lambda (p6004@e p6005@p p6006@m* p6007@s* p6008@ae* p6009@r) (if (null? p6005@p) (and (null? p6004@e) p6009@r) (if (pair? p6005@p) (and (pair? p6004@e) (p5972@match (car p6004@e) (car p6005@p) p6006@m* p6007@s* p6008@ae* (p5972@match (cdr p6004@e) (cdr p6005@p) p6006@m* p6007@s* p6008@ae* p6009@r))) (if (eq? p6005@p 'each-any) ((lambda (p6016@l) (and p6016@l (cons p6016@l p6009@r))) (p5964@match-each-any p6004@e p6006@m* p6007@s* p6008@ae*)) ((lambda (p6018@t) (if (memv p6018@t '(each)) (if (null? p6004@e) (p5966@match-empty (vector-ref p6005@p '1) p6009@r) ((lambda (p6020@r*) (and p6020@r* (p5968@combine p6020@r* p6009@r))) (p5960@match-each p6004@e (vector-ref p6005@p '1) p6006@m* p6007@s* p6008@ae*))) (if (memv p6018@t '(free-id)) (and (symbol? p6004@e) (p2138@top-marked? p6006@m*) (p2276@free-id=? (p5958@stx^ p6004@e p6006@m* p6007@s* p6008@ae*) (vector-ref p6005@p '1)) p6009@r) (if (memv p6018@t '(scheme-id)) (and (symbol? p6004@e) (p2138@top-marked? p6006@m*) (p2276@free-id=? (p5958@stx^ p6004@e p6006@m* p6007@s* p6008@ae*) (p2647@scheme-stx (vector-ref p6005@p '1))) p6009@r) (if (memv p6018@t '(each+)) (call-with-values (lambda () (p5962@match-each+ p6004@e (vector-ref p6005@p '1) (vector-ref p6005@p '2) (vector-ref p6005@p '3) p6006@m* p6007@s* p6008@ae* p6009@r)) (lambda (p6025@p6022@xr* p6026@p6023@y-pat p6027@p6024@r) ((lambda (p6031@r p6032@y-pat p6033@xr*) (and p6031@r (null? p6032@y-pat) (if (null? p6033@xr*) (p5966@match-empty (vector-ref p6005@p '1) p6031@r) (p5968@combine p6033@xr* p6031@r)))) p6027@p6024@r p6026@p6023@y-pat p6025@p6022@xr*))) (if (memv p6018@t '(atom)) (and (fast-equal? (vector-ref p6005@p '1) (p2288@strip p6004@e p6006@m*)) p6009@r) (if (memv p6018@t '(vector)) (and (vector? p6004@e) (p5972@match (vector->list p6004@e) (vector-ref p6005@p '1) p6006@m* p6007@s* p6008@ae* p6009@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" p6005@p)))))))) (vector-ref p6005@p '0))))))) (set! p5972@match (lambda (p5977@e p5978@p p5979@m* p5980@s* p5981@ae* p5982@r) (if (not p5982@r) '#f (if (eq? p5978@p '_) p5982@r (if (eq? p5978@p 'any) (cons (p5958@stx^ p5977@e p5979@m* p5980@s* p5981@ae*) p5982@r) (if (p2212@stx? p5977@e) (and (not (p2138@top-marked? p5979@m*)) (call-with-values (lambda () (p2242@join-wraps p5979@m* p5980@s* p5981@ae* p5977@e)) (lambda (p5992@p5989@m* p5993@p5990@s* p5994@p5991@ae*) ((lambda (p5998@ae* p5999@s* p6000@m*) (p5972@match (p2216@stx-expr p5977@e) p5978@p p6000@m* p5999@s* p5998@ae* p5982@r)) p5994@p5991@ae* p5993@p5990@s* p5992@p5989@m*)))) (if (p1155@p922@annotation? p5977@e) (p5972@match (p1157@p926@annotation-expression p5977@e) p5978@p p5979@m* p5980@s* p5981@ae* p5982@r) (p5970@match* p5977@e p5978@p p5979@m* p5980@s* p5981@ae* p5982@r)))))))) (lambda (p5973@e p5974@p) (p5972@match p5973@e p5974@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! p2767@ellipsis? (lambda (p6167@x) (and (p2268@id? p6167@x) (p2276@free-id=? p6167@x (p2647@scheme-stx '...))))) (set! p2769@underscore? (lambda (p6169@x) (and (p2268@id? p6169@x) (p2276@free-id=? p6169@x (p2647@scheme-stx '_))))) (set! p2771@verify-literals (lambda (p6171@lits p6172@expr) (for-each (lambda (p6175@x) (if (or (not (p2268@id? p6175@x)) (p2767@ellipsis? p6175@x) (p2769@underscore? p6175@x)) (p2998@syntax-violation '#f '"invalid literal" p6172@expr p6175@x) (void))) p6171@lits))) (set! p2773@syntax-case-transformer ((lambda () ((lambda (p6178@build-dispatch-call p6180@invalid-ids-error p6182@gen-clause p6184@gen-syntax-case) (begin (set! p6178@build-dispatch-call (lambda (p6289@pvars p6290@expr p6291@y p6292@r p6293@mr) ((lambda (p6299@ids p6300@levels) ((lambda (p6303@labels p6304@new-vars) ((lambda (p6307@body) (list '(primitive apply) (p2104@p1914@build-lambda '#f p6304@new-vars p6307@body) p6291@y)) (p2799@chi-expr (p2248@add-subst (p2199@make-full-rib p6299@ids p6303@labels) p6290@expr) (append (map (lambda (p6309@label p6310@var p6311@level) (cons p6309@label (p2300@make-binding 'syntax (cons p6310@var p6311@level)))) p6303@labels p6304@new-vars (map cdr p6289@pvars)) p6292@r) p6293@mr))) (map p2144@gen-label p6299@ids) (map p2140@gen-lexical p6299@ids))) (map car p6289@pvars) (map cdr p6289@pvars)))) (set! p6180@invalid-ids-error (lambda (p6277@id* p6278@e p6279@class) ((letrec ((p6283@find (lambda (p6285@id* p6286@ok*) (if (null? p6285@id*) (p2998@syntax-violation '#f '"invalid syntax" p6278@e) (if (p2268@id? (car p6285@id*)) (if (p2282@bound-id-member? (car p6285@id*) p6286@ok*) (p2994@syntax-error (car p6285@id*) '"duplicate " p6279@class) (p6283@find (cdr p6285@id*) (cons (car p6285@id*) p6286@ok*))) (p2994@syntax-error (car p6285@id*) '"invalid " p6279@class)))))) p6283@find) p6277@id* '()))) (set! p6182@gen-clause (lambda (p6239@x p6240@keys p6241@clauses p6242@r p6243@mr p6244@pat p6245@fender p6246@expr) (call-with-values (lambda () (p2763@convert-pattern p6244@pat p6240@keys)) (lambda (p6257@p6255@p p6258@p6256@pvars) ((lambda (p6261@pvars p6262@p) (if (not (p2280@distinct-bound-ids? (map car p6261@pvars))) (p6180@invalid-ids-error (map car p6261@pvars) p6244@pat '"pattern variable") (if (not (for-all (lambda (p6265@x) (not (p2767@ellipsis? (car p6265@x)))) p6261@pvars)) (p2998@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" p6244@pat) ((lambda (p6267@y) ((lambda (p6269@test) ((lambda (p6271@conseq) ((lambda (p6273@altern) (list (p2104@p1914@build-lambda '#f (list p6267@y) (list 'if p6269@test p6271@conseq p6273@altern)) (list '(primitive syntax-dispatch) p6239@x (list 'quote p6262@p)))) (p6184@gen-syntax-case p6239@x p6240@keys p6241@clauses p6242@r p6243@mr))) (p6178@build-dispatch-call p6261@pvars p6246@expr p6267@y p6242@r p6243@mr))) (if (eq? p6245@fender '#t) p6267@y ((lambda (p6275@call) (list 'if p6267@y p6275@call (list 'quote '#f))) (p6178@build-dispatch-call p6261@pvars p6245@fender p6267@y p6242@r p6243@mr))))) (p2140@gen-lexical 'tmp))))) p6258@p6256@pvars p6257@p6255@p))))) (set! p6184@gen-syntax-case (lambda (p6205@x p6206@keys p6207@clauses p6208@r p6209@mr) (if (null? p6207@clauses) (list '(primitive syntax-error) p6205@x) ((lambda (p6215@t) ((lambda (p6217@ls/false) (if p6217@ls/false (apply (lambda (p6219@pat p6220@expr) (if (and (p2268@id? p6219@pat) (not (p2282@bound-id-member? p6219@pat p6206@keys)) (not (p2767@ellipsis? p6219@pat))) (if (p2276@free-id=? p6219@pat (p2647@scheme-stx '_)) (p2799@chi-expr p6220@expr p6208@r p6209@mr) ((lambda (p6223@lab p6224@lex) ((lambda (p6227@body) (list (p2104@p1914@build-lambda '#f (list p6224@lex) p6227@body) p6205@x)) (p2799@chi-expr (p2248@add-subst (p2199@make-full-rib (list p6219@pat) (list p6223@lab)) p6220@expr) (cons (cons p6223@lab (p2300@make-binding 'syntax (cons p6224@lex '0))) p6208@r) p6209@mr))) (p2144@gen-label p6219@pat) (p2140@gen-lexical p6219@pat))) (p6182@gen-clause p6205@x p6206@keys (cdr p6207@clauses) p6208@r p6209@mr p6219@pat '#t p6220@expr))) p6217@ls/false) ((lambda (p6229@t) ((lambda (p6231@ls/false) (if p6231@ls/false (apply (lambda (p6233@pat p6234@fender p6235@expr) (p6182@gen-clause p6205@x p6206@keys (cdr p6207@clauses) p6208@r p6209@mr p6233@pat p6234@fender p6235@expr)) p6231@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p6229@t))) (p2765@syntax-dispatch p6229@t '(any any any)))) p6215@t))) (p2765@syntax-dispatch p6215@t '(any any)))) (car p6207@clauses))))) (lambda (p6185@e p6186@r p6187@mr) ((lambda (p6191@t) ((lambda (p6193@ls/false) (if p6193@ls/false (apply (lambda (p6195@expr p6196@keys p6197@clauses) (begin (p2771@verify-literals p6196@keys p6185@e) ((lambda (p6201@x) ((lambda (p6203@body) (list (p2104@p1914@build-lambda '#f (list p6201@x) p6203@body) (p2799@chi-expr p6195@expr p6186@r p6187@mr))) (p6184@gen-syntax-case p6201@x p6196@keys p6197@clauses p6186@r p6187@mr))) (p2140@gen-lexical 'tmp)))) p6193@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p6191@t))) (p2765@syntax-dispatch p6191@t '(_ any each-any . each-any)))) p6185@e)))) '#f '#f '#f '#f)))) (set! p2775@ellipsis-map (lambda (p6315@proc p6316@ls . p6319@ls*) ((lambda (p6322@who) (begin (set! p6322@who '...) (begin (if (not (list? p6316@ls)) (assertion-violation p6322@who '"not a list" p6316@ls) (void)) (if (not (null? p6319@ls*)) ((lambda (p6323@n) (for-each (lambda (p6325@x) (begin (if (not (list? p6325@x)) (assertion-violation p6322@who '"not a list" p6325@x) (void)) (if (not (= (length p6325@x) p6323@n)) (assertion-violation p6322@who '"length mismatch" p6316@ls p6325@x) (void)))) p6319@ls*)) (length p6316@ls)) (void)) (apply map p6315@proc p6316@ls p6319@ls*)))) '#f))) (set! p2777@syntax-transformer ((lambda () ((lambda (p6328@gen-syntax p6330@gen-ref p6332@gen-append p6334@gen-mappend p6336@gen-map p6338@gen-cons p6340@gen-vector p6342@regen) (begin (set! p6328@gen-syntax (lambda (p6443@src p6444@e p6445@r p6446@maps p6447@ellipsis? p6448@vec?) ((lambda (p6455@t) ((lambda (p6457@ls/false) (if (and p6457@ls/false (apply (lambda (p6459@dots) (p6447@ellipsis? p6459@dots)) p6457@ls/false)) (apply (lambda (p6461@dots) (p2998@syntax-violation '#f '"misplaced ellipsis in syntax form" p6443@src)) p6457@ls/false) ((lambda (p6463@t) ((lambda (p6465@ls/false) (if (and p6465@ls/false (apply (lambda (p6467@id) (p2268@id? p6467@id)) p6465@ls/false)) (apply (lambda (p6469@id) ((lambda (p6471@label) ((lambda (p6473@b) ((lambda () (if (eq? (p2302@binding-type p6473@b) 'syntax) (call-with-values (lambda () ((lambda (p6477@var.lev) (p6330@gen-ref p6443@src (car p6477@var.lev) (cdr p6477@var.lev) p6446@maps)) (p2304@binding-value p6473@b))) (lambda (p6479@p6475@var p6480@p6476@maps) ((lambda (p6483@maps p6484@var) (values (list 'ref p6484@var) p6483@maps)) p6480@p6476@maps p6479@p6475@var))) (values (list 'quote p6444@e) p6446@maps))))) (p2298@label->binding p6471@label p6445@r))) (p2294@id->label p6444@e))) p6465@ls/false) ((lambda (p6487@t) ((lambda (p6489@ls/false) (if (and p6489@ls/false (apply (lambda (p6491@dots p6492@e) (p6447@ellipsis? p6491@dots)) p6489@ls/false)) (apply (lambda (p6495@dots p6496@e) (if p6448@vec? (p2998@syntax-violation '#f '"misplaced ellipsis in syntax form" p6443@src) (p6328@gen-syntax p6443@src p6496@e p6445@r p6446@maps (lambda (p6499@x) '#f) '#f))) p6489@ls/false) ((lambda (p6501@t) ((lambda (p6503@ls/false) (if (and p6503@ls/false (apply (lambda (p6505@x p6506@dots p6507@y) (p6447@ellipsis? p6506@dots)) p6503@ls/false)) (apply (lambda (p6511@x p6512@dots p6513@y) ((letrec ((p6517@f (lambda (p6519@y p6520@k) ((lambda (p6523@t) ((lambda (p6525@ls/false) (if p6525@ls/false (apply (lambda () (p6520@k p6446@maps)) p6525@ls/false) ((lambda (p6527@t) ((lambda (p6529@ls/false) (if (and p6529@ls/false (apply (lambda (p6531@dots p6532@y) (p6447@ellipsis? p6531@dots)) p6529@ls/false)) (apply (lambda (p6535@dots p6536@y) (p6517@f p6536@y (lambda (p6539@maps) (call-with-values (lambda () (p6520@k (cons '() p6539@maps))) (lambda (p6543@p6541@x p6544@p6542@maps) ((lambda (p6547@maps p6548@x) (if (null? (car p6547@maps)) (p2998@syntax-violation '#f '"extra ellipsis in syntax form" p6443@src) (values (p6334@gen-mappend p6548@x (car p6547@maps)) (cdr p6547@maps)))) p6544@p6542@maps p6543@p6541@x)))))) p6529@ls/false) ((lambda (p6551@t) ((lambda (p6553@ls/false) (if p6553@ls/false (apply (lambda () (call-with-values (lambda () (p6328@gen-syntax p6443@src p6519@y p6445@r p6446@maps p6447@ellipsis? p6448@vec?)) (lambda (p6557@p6555@y p6558@p6556@maps) ((lambda (p6561@maps p6562@y) (call-with-values (lambda () (p6520@k p6561@maps)) (lambda (p6567@p6565@x p6568@p6566@maps) ((lambda (p6571@maps p6572@x) (values (p6332@gen-append p6572@x p6562@y) p6571@maps)) p6568@p6566@maps p6567@p6565@x)))) p6558@p6556@maps p6557@p6555@y)))) p6553@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p6551@t))) (p2765@syntax-dispatch p6551@t '_))) p6527@t))) (p2765@syntax-dispatch p6527@t '(any . any)))) p6523@t))) (p2765@syntax-dispatch p6523@t '()))) p6519@y)))) p6517@f) p6513@y (lambda (p6575@maps) (call-with-values (lambda () (p6328@gen-syntax p6443@src p6511@x p6445@r (cons '() p6575@maps) p6447@ellipsis? '#f)) (lambda (p6579@p6577@x p6580@p6578@maps) ((lambda (p6583@maps p6584@x) (if (null? (car p6583@maps)) (p2998@syntax-violation '#f '"extra ellipsis in syntax form" p6443@src) (values (p6336@gen-map p6584@x (car p6583@maps)) (cdr p6583@maps)))) p6580@p6578@maps p6579@p6577@x)))))) p6503@ls/false) ((lambda (p6587@t) ((lambda (p6589@ls/false) (if p6589@ls/false (apply (lambda (p6591@x p6592@y) (call-with-values (lambda () (p6328@gen-syntax p6443@src p6591@x p6445@r p6446@maps p6447@ellipsis? '#f)) (lambda (p6597@p6595@xnew p6598@p6596@maps) ((lambda (p6601@maps p6602@xnew) (call-with-values (lambda () (p6328@gen-syntax p6443@src p6592@y p6445@r p6601@maps p6447@ellipsis? p6448@vec?)) (lambda (p6607@p6605@ynew p6608@p6606@maps) ((lambda (p6611@maps p6612@ynew) (values (p6338@gen-cons p6444@e p6591@x p6592@y p6602@xnew p6612@ynew) p6611@maps)) p6608@p6606@maps p6607@p6605@ynew)))) p6598@p6596@maps p6597@p6595@xnew)))) p6589@ls/false) ((lambda (p6615@t) ((lambda (p6617@ls/false) (if p6617@ls/false (apply (lambda (p6619@ls) (call-with-values (lambda () (p6328@gen-syntax p6443@src p6619@ls p6445@r p6446@maps p6447@ellipsis? '#t)) (lambda (p6623@p6621@lsnew p6624@p6622@maps) ((lambda (p6627@maps p6628@lsnew) (values (p6340@gen-vector p6444@e p6619@ls p6628@lsnew) p6627@maps)) p6624@p6622@maps p6623@p6621@lsnew)))) p6617@ls/false) ((lambda (p6631@t) ((lambda (p6633@ls/false) (if p6633@ls/false (apply (lambda () (values (list 'quote p6444@e) p6446@maps)) p6633@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p6631@t))) (p2765@syntax-dispatch p6631@t '_))) p6615@t))) (p2765@syntax-dispatch p6615@t '#(vector each-any)))) p6587@t))) (p2765@syntax-dispatch p6587@t '(any . any)))) p6501@t))) (p2765@syntax-dispatch p6501@t '(any any . any)))) p6487@t))) (p2765@syntax-dispatch p6487@t '(any any)))) p6463@t))) (p2765@syntax-dispatch p6463@t 'any))) p6455@t))) (p2765@syntax-dispatch p6455@t 'any))) p6444@e))) (set! p6330@gen-ref (lambda (p6419@src p6420@var p6421@level p6422@maps) (if (= p6421@level '0) (values p6420@var p6422@maps) (if (null? p6422@maps) (p2998@syntax-violation '#f '"missing ellipsis in syntax form" p6419@src) (call-with-values (lambda () (p6330@gen-ref p6419@src p6420@var (- p6421@level '1) (cdr p6422@maps))) (lambda (p6429@p6427@outer-var p6430@p6428@outer-maps) ((lambda (p6433@outer-maps p6434@outer-var) ((lambda (p6437@t) (if p6437@t ((lambda (p6439@b) (values (cdr p6439@b) p6422@maps)) p6437@t) ((lambda (p6441@inner-var) (values p6441@inner-var (cons (cons (cons p6434@outer-var p6441@inner-var) (car p6422@maps)) p6433@outer-maps))) (p2140@gen-lexical 'tmp)))) (assq p6434@outer-var (car p6422@maps)))) p6430@p6428@outer-maps p6429@p6427@outer-var))))))) (set! p6332@gen-append (lambda (p6415@x p6416@y) (if (fast-equal? p6416@y ''()) p6415@x (list 'append p6415@x p6416@y)))) (set! p6334@gen-mappend (lambda (p6411@e p6412@map-env) (list 'apply '(primitive append) (p6336@gen-map p6411@e p6412@map-env)))) (set! p6336@gen-map (lambda (p6393@e p6394@map-env) ((lambda (p6397@formals p6398@actuals) (if (eq? (car p6393@e) 'ref) (car p6398@actuals) (if (for-all (lambda (p6401@x) (and (eq? (car p6401@x) 'ref) (memq (cadr p6401@x) p6397@formals))) (cdr p6393@e)) ((lambda (p6403@args) (cons 'map (cons (list 'primitive (car p6393@e)) p6403@args))) (map ((lambda (p6405@r) (lambda (p6407@x) (cdr (assq (cadr p6407@x) p6405@r)))) (map cons p6397@formals p6398@actuals)) (cdr p6393@e))) (cons* 'map (list 'lambda p6397@formals p6393@e) p6398@actuals)))) (map cdr p6394@map-env) (map (lambda (p6409@x) (list 'ref (car p6409@x))) p6394@map-env)))) (set! p6338@gen-cons (lambda (p6377@e p6378@x p6379@y p6380@xnew p6381@ynew) ((lambda (p6387@t) (if (memv p6387@t '(quote)) (if (eq? (car p6380@xnew) 'quote) ((lambda (p6389@xnew p6390@ynew) (if (and (eq? p6389@xnew p6378@x) (eq? p6390@ynew p6379@y)) (list 'quote p6377@e) (list 'quote (cons p6389@xnew p6390@ynew)))) (cadr p6380@xnew) (cadr p6381@ynew)) (if (null? (cadr p6381@ynew)) (list 'list p6380@xnew) (list 'cons p6380@xnew p6381@ynew))) (if (memv p6387@t '(list)) (cons 'list (cons p6380@xnew (cdr p6381@ynew))) (list 'cons p6380@xnew p6381@ynew)))) (car p6381@ynew)))) (set! p6340@gen-vector (lambda (p6371@e p6372@ls p6373@lsnew) (if (eq? (car p6373@lsnew) 'quote) (if (eq? (cadr p6373@lsnew) p6372@ls) (list 'quote p6371@e) (list 'quote (list->vector (cadr p6373@lsnew)))) (if (eq? (car p6373@lsnew) 'list) (cons 'vector (cdr p6373@lsnew)) (list 'list->vector p6373@lsnew))))) (set! p6342@regen (lambda (p6365@x) ((lambda (p6367@t) (if (memv p6367@t '(ref)) (cadr p6365@x) (if (memv p6367@t '(primitive)) (list 'primitive (cadr p6365@x)) (if (memv p6367@t '(quote)) (list 'quote (cadr p6365@x)) (if (memv p6367@t '(lambda)) (p2104@p1914@build-lambda '#f (cadr p6365@x) (p6342@regen (caddr p6365@x))) (if (memv p6367@t '(map)) ((lambda (p6369@ls) (cons '(primitive ellipsis-map) p6369@ls)) (map p6342@regen (cdr p6365@x))) (cons (list 'primitive (car p6365@x)) (map p6342@regen (cdr p6365@x))))))))) (car p6365@x)))) (lambda (p6343@e p6344@r p6345@mr) ((lambda (p6349@t) ((lambda (p6351@ls/false) (if p6351@ls/false (apply (lambda (p6353@x) (call-with-values (lambda () (p6328@gen-syntax p6343@e p6353@x p6344@r '() p2767@ellipsis? '#f)) (lambda (p6357@p6355@e p6358@p6356@maps) ((lambda (p6361@maps p6362@e) (p6342@regen p6362@e)) p6358@p6356@maps p6357@p6355@e)))) p6351@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p6349@t))) (p2765@syntax-dispatch p6349@t '(_ any)))) p6343@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! p2779@core-macro-transformer (lambda (p6635@name) ((lambda (p6637@t) (if (memv p6637@t '(quote)) p2685@quote-transformer (if (memv p6637@t '(lambda)) p2689@lambda-transformer (if (memv p6637@t '(case-lambda)) p2687@case-lambda-transformer (if (memv p6637@t '(letrec)) p2661@letrec-transformer (if (memv p6637@t '(letrec*)) p2663@letrec*-transformer (if (memv p6637@t '(if)) p2677@if-transformer (if (memv p6637@t '(and)) p2679@and-transformer (if (memv p6637@t '(or)) p2681@or-transformer (if (memv p6637@t '(foreign-call)) p2761@foreign-call-transformer (if (memv p6637@t '(syntax-case)) p2773@syntax-case-transformer (if (memv p6637@t '(syntax)) p2777@syntax-transformer (if (memv p6637@t '(type-descriptor)) p2667@type-descriptor-transformer (if (memv p6637@t '(record-type-descriptor)) p2669@record-type-descriptor-transformer (if (memv p6637@t '(record-constructor-descriptor)) p2671@record-constructor-descriptor-transformer (if (memv p6637@t '(fluid-let-syntax)) p2665@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" p6635@name))))))))))))))))) p6635@name))) (set! p2781@symbol-macro (lambda (p6639@x p6640@set) ((lambda (p6643@t) ((lambda (p6645@ls/false) (if (and p6645@ls/false (apply (lambda (p6647@name) (and (p2268@id? p6647@name) (memq (p2270@id->sym p6647@name) p6640@set))) p6645@ls/false)) (apply (lambda (p6649@name) (p2691@bless (list 'quote p6649@name))) p6645@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p6643@t))) (p2765@syntax-dispatch p6643@t '(_ any)))) p6639@x))) (set! p2783@macro-transformer (lambda (p6651@x) (if (procedure? p6651@x) p6651@x (if (symbol? p6651@x) ((lambda (p6653@t) (if (memv p6653@t '(define-record-type)) p2753@define-record-type-macro (if (memv p6653@t '(define-struct)) p2751@define-struct-macro (if (memv p6653@t '(include)) p2741@include-macro (if (memv p6653@t '(cond)) p2737@cond-macro (if (memv p6653@t '(let)) p2697@let-macro (if (memv p6653@t '(do)) p2729@do-macro (if (memv p6653@t '(or)) p2733@or-macro (if (memv p6653@t '(and)) p2735@and-macro (if (memv p6653@t '(let*)) p2731@let*-macro (if (memv p6653@t '(let-values)) p2699@let-values-macro (if (memv p6653@t '(let*-values)) p2701@let*-values-macro (if (memv p6653@t '(syntax-rules)) p2745@syntax-rules-macro (if (memv p6653@t '(quasiquote)) p2747@quasiquote-macro (if (memv p6653@t '(quasisyntax)) p2749@quasisyntax-macro (if (memv p6653@t '(with-syntax)) p2693@with-syntax-macro (if (memv p6653@t '(when)) p2673@when-macro (if (memv p6653@t '(unless)) p2675@unless-macro (if (memv p6653@t '(case)) p2683@case-macro (if (memv p6653@t '(identifier-syntax)) p2727@identifier-syntax-macro (if (memv p6653@t '(time)) p2719@time-macro (if (memv p6653@t '(delay)) p2721@delay-macro (if (memv p6653@t '(assert)) p2723@assert-macro (if (memv p6653@t '(endianness)) p2725@endianness-macro (if (memv p6653@t '(guard)) p2715@guard-macro (if (memv p6653@t '(define-enumeration)) p2717@define-enumeration-macro (if (memv p6653@t '(trace-lambda)) p2703@trace-lambda-macro (if (memv p6653@t '(trace-define)) p2705@trace-define-macro (if (memv p6653@t '(trace-define-syntax)) p2707@trace-define-syntax-macro (if (memv p6653@t '(trace-let-syntax)) p2711@trace-let-syntax-macro (if (memv p6653@t '(trace-letrec-syntax)) p2713@trace-letrec-syntax-macro (if (memv p6653@t '(define-condition-type)) p2755@define-condition-type-macro (if (memv p6653@t '(parameterize)) p2759@parameterize-macro (if (memv p6653@t '(include-into)) p2743@include-into-macro (if (memv p6653@t '(eol-style)) (lambda (p6655@x) (p2781@symbol-macro p6655@x '(none lf cr crlf nel crnel ls))) (if (memv p6653@t '(error-handling-mode)) (lambda (p6657@x) (p2781@symbol-macro p6657@x '(ignore raise replace))) (if (memv p6653@t '(buffer-mode)) (lambda (p6659@x) (p2781@symbol-macro p6659@x '(none line block))) (if (memv p6653@t '(file-options)) p2127@file-options-macro (if (memv p6653@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) p2757@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" p6651@x)))))))))))))))))))))))))))))))))))))))) p6651@x) (error 'core-macro-transformer '"BUG: invalid macro" p6651@x))))) (set! p2785@local-macro-transformer (lambda (p6661@x) (car p6661@x))) (set! p2787@do-macro-call (lambda (p6663@transformer p6664@expr) ((lambda (p6667@out) (begin ((letrec ((p6669@f (lambda (p6671@x) (if (not (p2212@stx? p6671@x)) (if (pair? p6671@x) (begin (p6669@f (car p6671@x)) (p6669@f (cdr p6671@x))) (if (vector? p6671@x) (vector-for-each p6669@f p6671@x) (if (symbol? p6671@x) (p2998@syntax-violation '#f '"raw symbol encountered in output of macro" p6664@expr p6671@x) (void)))) (void))))) p6669@f) p6667@out) (p2246@add-mark (p2236@gen-mark) p6667@out p6664@expr))) (p6663@transformer (p2246@add-mark p2238@anti-mark p6664@expr '#f))))) (set! p2789@chi-macro (lambda (p6673@p p6674@e) (p2787@do-macro-call (p2783@macro-transformer p6673@p) p6674@e))) (set! p2791@chi-local-macro (lambda (p6677@p p6678@e) (p2787@do-macro-call (p2785@local-macro-transformer p6677@p) p6678@e))) (set! p2793@chi-global-macro (lambda (p6681@p p6682@e) ((lambda (p6685@lib p6686@loc) (begin (p1795@p1451@visit-library p6685@lib) ((lambda (p6689@x) ((lambda (p6691@transformer) (p2787@do-macro-call p6691@transformer p6682@e)) (if (procedure? p6689@x) p6689@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" p6689@x)))) (symbol-value p6686@loc)))) (car p6681@p) (cdr p6681@p)))) (set! p2795@chi-expr* (lambda (p6693@e* p6694@r p6695@mr) (if (null? p6693@e*) '() ((lambda (p6699@e) (cons p6699@e (p2795@chi-expr* (cdr p6693@e*) p6694@r p6695@mr))) (p2799@chi-expr (car p6693@e*) p6694@r p6695@mr))))) (set! p2797@chi-application (lambda (p6701@e p6702@r p6703@mr) ((lambda (p6707@t) ((lambda (p6709@ls/false) (if p6709@ls/false (apply (lambda (p6711@rator p6712@rands) ((lambda (p6715@rator) (cons p6715@rator (p2795@chi-expr* p6712@rands p6702@r p6703@mr))) (p2799@chi-expr p6711@rator p6702@r p6703@mr))) p6709@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p6707@t))) (p2765@syntax-dispatch p6707@t '(any . each-any)))) p6701@e))) (set! p2799@chi-expr (lambda (p6717@e p6718@r p6719@mr) (call-with-values (lambda () (p2308@syntax-type p6717@e p6718@r)) (lambda (p6726@p6723@type p6727@p6724@value p6728@p6725@kwd) ((lambda (p6732@kwd p6733@value p6734@type) ((lambda (p6738@t) (if (memv p6738@t '(core-macro)) ((lambda (p6740@transformer) (p6740@transformer p6717@e p6718@r p6719@mr)) (p2779@core-macro-transformer p6733@value)) (if (memv p6738@t '(global)) ((lambda (p6742@lib) ((lambda (p6744@loc) ((lambda () (begin ((p2872@inv-collector) p6742@lib) p6744@loc)))) (cdr p6733@value))) (car p6733@value)) (if (memv p6738@t '(core-prim)) ((lambda (p6746@name) (list 'primitive p6746@name)) p6733@value) (if (memv p6738@t '(call)) (p2797@chi-application p6717@e p6718@r p6719@mr) (if (memv p6738@t '(lexical)) ((lambda (p6748@lex) p6748@lex) (p2649@lexical-var p6733@value)) (if (memv p6738@t '(global-macro global-macro!)) (p2799@chi-expr (p2793@chi-global-macro p6733@value p6717@e) p6718@r p6719@mr) (if (memv p6738@t '(local-macro local-macro!)) (p2799@chi-expr (p2791@chi-local-macro p6733@value p6717@e) p6718@r p6719@mr) (if (memv p6738@t '(macro macro!)) (p2799@chi-expr (p2789@chi-macro p6733@value p6717@e) p6718@r p6719@mr) (if (memv p6738@t '(constant)) ((lambda (p6750@datum) (list 'quote p6750@datum)) p6733@value) (if (memv p6738@t '(set!)) (p2801@chi-set! p6717@e p6718@r p6719@mr) (if (memv p6738@t '(begin)) ((lambda (p6752@t) ((lambda (p6754@ls/false) (if p6754@ls/false (apply (lambda (p6756@x p6757@x*) (p2107@p1964@build-sequence '#f (p2795@chi-expr* (cons p6756@x p6757@x*) p6718@r p6719@mr))) p6754@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p6752@t))) (p2765@syntax-dispatch p6752@t '(_ any . each-any)))) p6717@e) (if (memv p6738@t '(let-syntax letrec-syntax)) ((lambda (p6760@t) ((lambda (p6762@ls/false) (if (and p6762@ls/false (apply (lambda (p6764@xlhs* p6765@xrhs* p6766@xbody p6767@xbody*) (if (not (p2278@valid-bound-ids? p6764@xlhs*)) (p2998@syntax-violation '#f '"invalid identifiers" p6717@e) (void))) p6762@ls/false)) (apply (lambda (p6772@xlhs* p6773@xrhs* p6774@xbody p6775@xbody*) ((lambda (p6780@xlab*) ((lambda (p6782@xrib) ((lambda (p6784@xb*) ((lambda () (p2107@p1964@build-sequence '#f (p2795@chi-expr* (map (lambda (p6786@x) (p2248@add-subst p6782@xrib p6786@x)) (cons p6774@xbody p6775@xbody*)) (append (map cons p6780@xlab* p6784@xb*) p6718@r) (append (map cons p6780@xlab* p6784@xb*) p6719@mr)))))) (map (lambda (p6788@x) (p2330@make-eval-transformer (p2858@expand-transformer (if (eq? p6734@type 'let-syntax) p6788@x (p2248@add-subst p6782@xrib p6788@x)) p6719@mr))) p6773@xrhs*))) (p2199@make-full-rib p6772@xlhs* p6780@xlab*))) (map p2144@gen-label p6772@xlhs*))) p6762@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p6760@t))) (p2765@syntax-dispatch p6760@t '(_ #(each (any any)) any . each-any)))) p6717@e) (if (memv p6738@t '(displaced-lexical)) (p2998@syntax-violation '#f '"identifier out of context" p6717@e) (if (memv p6738@t '(syntax)) (p2998@syntax-violation '#f '"reference to pattern variable outside a syntax form" p6717@e) (if (memv p6738@t '(define define-syntax module import library)) (p2998@syntax-violation '#f (string-append ((lambda (p6790@t) (if (memv p6790@t '(define)) '"a definition" (if (memv p6790@t '(define-syntax)) '"a define-syntax" (if (memv p6790@t '(module)) '"a module definition" (if (memv p6790@t '(library)) '"a library definition" (if (memv p6790@t '(import)) '"an import declaration" (if (memv p6790@t '(export)) '"an export declaration" '"a non-expression"))))))) p6734@type) '" was found where an expression was expected") p6717@e) (if (memv p6738@t '(mutable)) (p2998@syntax-violation '#f '"attempt to reference an unexportable variable" p6717@e) (p2998@syntax-violation '#f '"invalid expression" p6717@e)))))))))))))))))) p6734@type)) p6728@p6725@kwd p6727@p6724@value p6726@p6723@type))))) (set! p2801@chi-set! (lambda (p6792@e p6793@r p6794@mr) ((lambda (p6798@t) ((lambda (p6800@ls/false) (if (and p6800@ls/false (apply (lambda (p6802@x p6803@v) (p2268@id? p6802@x)) p6800@ls/false)) (apply (lambda (p6806@x p6807@v) (call-with-values (lambda () (p2308@syntax-type p6806@x p6793@r)) (lambda (p6813@p6810@type p6814@p6811@value p6815@p6812@kwd) ((lambda (p6819@kwd p6820@value p6821@type) ((lambda (p6825@t) (if (memv p6825@t '(lexical)) (begin (p2653@set-lexical-mutable! p6820@value '#t) (list 'set! (p2649@lexical-var p6820@value) (p2799@chi-expr p6807@v p6793@r p6794@mr))) (if (memv p6825@t '(core-prim)) (p2998@syntax-violation '#f '"cannot modify imported core primitive" p6792@e) (if (memv p6825@t '(global)) (p2998@syntax-violation '#f '"attempt to modify imported binding" p6792@e) (if (memv p6825@t '(global-macro!)) (p2799@chi-expr (p2793@chi-global-macro p6820@value p6792@e) p6793@r p6794@mr) (if (memv p6825@t '(local-macro!)) (p2799@chi-expr (p2791@chi-local-macro p6820@value p6792@e) p6793@r p6794@mr) (if (memv p6825@t '(mutable)) (p2998@syntax-violation '#f '"attempt to assign to an unexportable variable" p6792@e) (p2998@syntax-violation '#f '"invalid syntax" p6792@e)))))))) p6821@type)) p6815@p6812@kwd p6814@p6811@value p6813@p6810@type)))) p6800@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p6798@t))) (p2765@syntax-dispatch p6798@t '(_ any any)))) p6792@e))) (set! p2803@verify-formals (lambda (p6827@fmls p6828@stx) ((lambda (p6831@t) ((lambda (p6833@ls/false) (if p6833@ls/false (apply (lambda (p6835@x*) (if (not (p2278@valid-bound-ids? p6835@x*)) (p2695@invalid-fmls-error p6828@stx p6827@fmls) (void))) p6833@ls/false) ((lambda (p6837@t) ((lambda (p6839@ls/false) (if p6839@ls/false (apply (lambda (p6841@x* p6842@x) (if (not (p2278@valid-bound-ids? (cons p6842@x p6841@x*))) (p2695@invalid-fmls-error p6828@stx p6827@fmls) (void))) p6839@ls/false) ((lambda (p6845@t) ((lambda (p6847@ls/false) (if p6847@ls/false (apply (lambda () (p2998@syntax-violation '#f '"invalid syntax" p6828@stx)) p6847@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p6845@t))) (p2765@syntax-dispatch p6845@t '_))) p6837@t))) (p2765@syntax-dispatch p6837@t '#(each+ any () any)))) p6831@t))) (p2765@syntax-dispatch p6831@t 'each-any))) p6827@fmls))) (set! p2805@chi-lambda-clause (lambda (p6849@stx p6850@fmls p6851@body* p6852@r p6853@mr) ((lambda (p6859@t) ((lambda (p6861@ls/false) (if p6861@ls/false (apply (lambda (p6863@x*) (begin (p2803@verify-formals p6850@fmls p6849@stx) ((lambda (p6865@lex* p6866@lab*) (values p6865@lex* (p2821@chi-internal (p2248@add-subst (p2199@make-full-rib p6863@x* p6866@lab*) p6851@body*) (p2657@add-lexicals p6866@lab* p6865@lex* p6852@r) p6853@mr))) (map p2140@gen-lexical p6863@x*) (map p2144@gen-label p6863@x*)))) p6861@ls/false) ((lambda (p6869@t) ((lambda (p6871@ls/false) (if p6871@ls/false (apply (lambda (p6873@x* p6874@x) (begin (p2803@verify-formals p6850@fmls p6849@stx) ((lambda (p6877@lex* p6878@lab* p6879@lex p6880@lab) (values (append p6877@lex* p6879@lex) (p2821@chi-internal (p2248@add-subst (p2199@make-full-rib (cons p6874@x p6873@x*) (cons p6880@lab p6878@lab*)) p6851@body*) (p2657@add-lexicals (cons p6880@lab p6878@lab*) (cons p6879@lex p6877@lex*) p6852@r) p6853@mr))) (map p2140@gen-lexical p6873@x*) (map p2144@gen-label p6873@x*) (p2140@gen-lexical p6874@x) (p2144@gen-label p6874@x)))) p6871@ls/false) ((lambda (p6885@t) ((lambda (p6887@ls/false) (if p6887@ls/false (apply (lambda () (p2998@syntax-violation '#f '"invalid syntax" p6850@fmls)) p6887@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p6885@t))) (p2765@syntax-dispatch p6885@t '_))) p6869@t))) (p2765@syntax-dispatch p6869@t '#(each+ any () any)))) p6859@t))) (p2765@syntax-dispatch p6859@t 'each-any))) p6850@fmls))) (set! p2807@chi-lambda-clause* (lambda (p6889@stx p6890@fmls* p6891@body** p6892@r p6893@mr) (if (null? p6890@fmls*) (values '() '()) (call-with-values (lambda () (p2805@chi-lambda-clause p6889@stx (car p6890@fmls*) (car p6891@body**) p6892@r p6893@mr)) (lambda (p6901@p6899@a p6902@p6900@b) ((lambda (p6905@b p6906@a) (call-with-values (lambda () (p2807@chi-lambda-clause* p6889@stx (cdr p6890@fmls*) (cdr p6891@body**) p6892@r p6893@mr)) (lambda (p6911@p6909@a* p6912@p6910@b*) ((lambda (p6915@b* p6916@a*) (values (cons p6906@a p6916@a*) (cons p6905@b p6915@b*))) p6912@p6910@b* p6911@p6909@a*)))) p6902@p6900@b p6901@p6899@a)))))) (set! p2809@chi-defun (lambda (p6919@x p6920@r p6921@mr) ((lambda (p6925@fmls p6926@body*) (call-with-values (lambda () (p2805@chi-lambda-clause p6925@fmls p6925@fmls p6926@body* p6920@r p6921@mr)) (lambda (p6931@p6929@fmls p6932@p6930@body) ((lambda (p6935@body p6936@fmls) (p2104@p1914@build-lambda '#f p6936@fmls p6935@body)) p6932@p6930@body p6931@p6929@fmls)))) (car p6919@x) (cdr p6919@x)))) (set! p2811@chi-rhs (lambda (p6939@rhs p6940@r p6941@mr) ((lambda (p6945@t) (if (memv p6945@t '(defun)) (p2809@chi-defun (cdr p6939@rhs) p6940@r p6941@mr) (if (memv p6945@t '(expr)) ((lambda (p6947@expr) (p2799@chi-expr p6947@expr p6940@r p6941@mr)) (cdr p6939@rhs)) (if (memv p6945@t '(top-expr)) ((lambda (p6949@expr) (p2107@p1964@build-sequence '#f (list (p2799@chi-expr p6949@expr p6940@r p6941@mr) (p2108@p1966@build-void)))) (cdr p6939@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" p6939@rhs))))) (car p6939@rhs)))) (set! p2813@expand-interaction-rhs*/init* (lambda (p6951@lhs* p6952@rhs* p6953@init* p6954@r p6955@mr) ((letrec ((p6961@f (lambda (p6963@lhs* p6964@rhs*) (if (null? p6963@lhs*) (map (lambda (p6967@x) (p2799@chi-expr p6967@x p6954@r p6955@mr)) p6953@init*) ((lambda (p6969@lhs p6970@rhs) ((lambda (p6973@t) (if (memv p6973@t '(defun)) ((lambda (p6975@rhs) (cons (list 'set! p6969@lhs p6975@rhs) (p6961@f (cdr p6963@lhs*) (cdr p6964@rhs*)))) (p2809@chi-defun (cdr p6970@rhs) p6954@r p6955@mr)) (if (memv p6973@t '(expr)) ((lambda (p6977@rhs) (cons (list 'set! p6969@lhs p6977@rhs) (p6961@f (cdr p6963@lhs*) (cdr p6964@rhs*)))) (p2799@chi-expr (cdr p6970@rhs) p6954@r p6955@mr)) (if (memv p6973@t '(top-expr)) ((lambda (p6979@e) (cons p6979@e (p6961@f (cdr p6963@lhs*) (cdr p6964@rhs*)))) (p2799@chi-expr (cdr p6970@rhs) p6954@r p6955@mr)) (error 'expand-interaction '"invallid" p6970@rhs))))) (car p6970@rhs))) (car p6963@lhs*) (car p6964@rhs*)))))) p6961@f) p6951@lhs* p6952@rhs*))) (set! p2815@chi-rhs* (lambda (p6981@rhs* p6982@r p6983@mr) ((letrec ((p6987@f (lambda (p6989@ls) (if (null? p6989@ls) '() ((lambda (p6991@a) (cons p6991@a (p6987@f (cdr p6989@ls)))) (p2811@chi-rhs (car p6989@ls) p6982@r p6983@mr)))))) p6987@f) p6981@rhs*))) (set! p2817@find-bound=? (lambda (p6993@x p6994@lhs* p6995@rhs*) (if (null? p6994@lhs*) '#f (if (p2274@bound-id=? p6993@x (car p6994@lhs*)) (car p6995@rhs*) (p2817@find-bound=? p6993@x (cdr p6994@lhs*) (cdr p6995@rhs*)))))) (set! p2819@find-dups (lambda (p6999@ls) ((letrec ((p7001@f (lambda (p7003@ls p7004@dups) (if (null? p7003@ls) p7004@dups ((lambda (p7007@t) (if p7007@t ((lambda (p7009@x) (p7001@f (cdr p7003@ls) (cons (list (car p7003@ls) p7009@x) p7004@dups))) p7007@t) (p7001@f (cdr p7003@ls) p7004@dups))) (p2817@find-bound=? (car p7003@ls) (cdr p7003@ls) (cdr p7003@ls))))))) p7001@f) p6999@ls '()))) (set! p2821@chi-internal (lambda (p7011@e* p7012@r p7013@mr) ((lambda (p7017@rib) (call-with-values (lambda () (p2856@chi-body* (map (lambda (p7027@x) (p2248@add-subst p7017@rib p7027@x)) (p2266@syntax->list p7011@e*)) p7012@r p7013@mr '() '() '() '() '() p7017@rib '#f)) (lambda (p7029@p7019@e* p7030@p7020@r p7031@p7021@mr p7032@p7022@lex* p7033@p7023@rhs* p7034@p7024@mod** p7035@p7025@kwd* p7036@p7026@_exp*) ((lambda (p7045@_exp* p7046@kwd* p7047@mod** p7048@rhs* p7049@lex* p7050@mr p7051@r p7052@e*) (begin (if (null? p7052@e*) (p2998@syntax-violation '#f '"no expression in body" p7052@e*) (void)) ((lambda (p7061@init*) ((lambda (p7063@rhs*) ((lambda () (p2110@p1970@build-letrec* '#f (reverse p7049@lex*) (reverse p7063@rhs*) (p2107@p1964@build-sequence '#f p7061@init*))))) (p2815@chi-rhs* p7048@rhs* p7051@r p7050@mr))) (p2795@chi-expr* (append (apply append (reverse p7047@mod**)) p7052@e*) p7051@r p7050@mr)))) p7036@p7026@_exp* p7035@p7025@kwd* p7034@p7024@mod** p7033@p7023@rhs* p7032@p7022@lex* p7031@p7021@mr p7030@p7020@r p7029@p7019@e*)))) (p2187@make-empty-rib)))) (set! p2823@parse-module (lambda (p7065@e) ((lambda (p7067@t) ((lambda (p7069@ls/false) (if p7069@ls/false (apply (lambda (p7071@export* p7072@b*) (begin (if (not (for-all p2268@id? p7071@export*)) (p2998@syntax-violation '#f '"module exports must be identifiers" p7065@e) (void)) (values '#f (list->vector p7071@export*) p7072@b*))) p7069@ls/false) ((lambda (p7075@t) ((lambda (p7077@ls/false) (if p7077@ls/false (apply (lambda (p7079@name p7080@export* p7081@b*) (begin (if (not (p2268@id? p7079@name)) (p2998@syntax-violation '#f '"module name must be an identifier" p7065@e) (void)) (if (not (for-all p2268@id? p7080@export*)) (p2998@syntax-violation '#f '"module exports must be identifiers" p7065@e) (void)) (values p7079@name (list->vector p7080@export*) p7081@b*))) p7077@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p7075@t))) (p2765@syntax-dispatch p7075@t '(_ any each-any . each-any)))) p7067@t))) (p2765@syntax-dispatch p7067@t '(_ each-any . each-any)))) p7065@e))) (set! p2829@p2824 (make-record-type-descriptor 'module-interface '#f 'p2827 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! p2831@p2826 '#f) (set! p2833@p2825 (make-record-constructor-descriptor p2829@p2824 '#f p2831@p2826)) (set! p2836@module-interface? (record-predicate p2829@p2824)) (set! p2838@make-module-interface (record-constructor p2833@p2825)) (set! p2840@module-interface-first-mark (record-accessor p2829@p2824 '0)) (set! p2842@module-interface-exp-id-vec (record-accessor p2829@p2824 '1)) (set! p2844@module-interface-exp-lab-vec (record-accessor p2829@p2824 '2)) (set! p2846@set-module-interface-first-mark! (record-mutator p2829@p2824 '0)) (set! p2848@set-module-interface-exp-id-vec! (record-mutator p2829@p2824 '1)) (set! p2850@set-module-interface-exp-lab-vec! (record-mutator p2829@p2824 '2)) (set! p2852@module-interface-exp-id* (lambda (p7085@iface p7086@id) ((lambda (p7090@diff-marks) (begin (set! p7090@diff-marks (lambda (p7097@ls p7098@x) (begin (if (null? p7097@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (p7101@a) (if (eq? p7101@a p7098@x) '() (cons p7101@a (p7090@diff-marks (cdr p7097@ls) p7098@x)))) (car p7097@ls))))) ((lambda (p7091@diff p7092@id-vec) (if (null? p7091@diff) p7092@id-vec (vector-map (lambda (p7095@x) (p2214@make-stx (p2216@stx-expr p7095@x) (append p7091@diff (p2218@stx-mark* p7095@x)) '() '())) p7092@id-vec))) (p7090@diff-marks (p2218@stx-mark* p7086@id) (p2840@module-interface-first-mark p7085@iface)) (p2842@module-interface-exp-id-vec p7085@iface)))) '#f))) (set! p2854@chi-internal-module (lambda (p7103@e p7104@r p7105@mr p7106@lex* p7107@rhs* p7108@mod** p7109@kwd*) (call-with-values (lambda () (p2823@parse-module p7103@e)) (lambda (p7120@p7117@name p7121@p7118@exp-id* p7122@p7119@e*) ((lambda (p7126@e* p7127@exp-id* p7128@name) ((lambda (p7132@rib) ((lambda (p7134@e*) ((lambda () (call-with-values (lambda () (p2856@chi-body* p7134@e* p7104@r p7105@mr p7106@lex* p7107@rhs* p7108@mod** p7109@kwd* '() p7132@rib '#f)) (lambda (p7144@p7136@e* p7145@p7137@r p7146@p7138@mr p7147@p7139@lex* p7148@p7140@rhs* p7149@p7141@mod** p7150@p7142@kwd* p7151@p7143@_exp*) ((lambda (p7160@_exp* p7161@kwd* p7162@mod** p7163@rhs* p7164@lex* p7165@mr p7166@r p7167@e*) ((lambda (p7176@exp-lab* p7177@mod**) (if (not p7128@name) (values p7164@lex* p7163@rhs* p7127@exp-id* p7176@exp-lab* p7166@r p7165@mr p7177@mod** p7161@kwd*) ((lambda (p7180@lab p7181@iface) (values p7164@lex* p7163@rhs* (vector p7128@name) (vector p7180@lab) (cons (cons p7180@lab (cons '$module p7181@iface)) p7166@r) (cons (cons p7180@lab (cons '$module p7181@iface)) p7165@mr) p7177@mod** p7161@kwd*)) (p2144@gen-label 'module) (p2838@make-module-interface (car (p2218@stx-mark* p7128@name)) (vector-map (lambda (p7184@x) (p2214@make-stx (p2216@stx-expr p7184@x) (p2218@stx-mark* p7184@x) '() '())) p7127@exp-id*) p7176@exp-lab*)))) (vector-map (lambda (p7186@x) (or (p2294@id->label (p2214@make-stx (p2270@id->sym p7186@x) (p2218@stx-mark* p7186@x) (list p7132@rib) '())) (p2998@syntax-violation '#f '"cannot find module export" p7186@x))) p7127@exp-id*) (cons p7167@e* p7162@mod**))) p7151@p7143@_exp* p7150@p7142@kwd* p7149@p7141@mod** p7148@p7140@rhs* p7147@p7139@lex* p7146@p7138@mr p7145@p7137@r p7144@p7136@e*)))))) (map (lambda (p7188@x) (p2248@add-subst p7132@rib p7188@x)) (p2266@syntax->list p7126@e*)))) (p2187@make-empty-rib))) p7122@p7119@e* p7121@p7118@exp-id* p7120@p7117@name))))) (set! p2856@chi-body* (lambda (p7190@e* p7191@r p7192@mr p7193@lex* p7194@rhs* p7195@mod** p7196@kwd* p7197@exp* p7198@rib p7199@top?) (if (null? p7190@e*) (values p7190@e* p7191@r p7192@mr p7193@lex* p7194@rhs* p7195@mod** p7196@kwd* p7197@exp*) ((lambda (p7210@e) (call-with-values (lambda () (p2308@syntax-type p7210@e p7191@r)) (lambda (p7215@p7212@type p7216@p7213@value p7217@p7214@kwd) ((lambda (p7221@kwd p7222@value p7223@type) ((lambda (p7227@kwd*) ((lambda (p7229@t) (if (memv p7229@t '(define)) (call-with-values (lambda () (p2641@parse-define p7210@e)) (lambda (p7233@p7231@id p7234@p7232@rhs) ((lambda (p7237@rhs p7238@id) (begin (if (p2282@bound-id-member? p7238@id p7227@kwd*) (p2998@syntax-violation '#f '"cannot redefine keyword" p7210@e) (void)) (call-with-values (lambda () (p2148@gen-define-label+loc p7238@id p7198@rib)) (lambda (p7243@p7241@lab p7244@p7242@lex) ((lambda (p7247@lex p7248@lab) (begin (p2189@extend-rib! p7198@rib p7238@id p7248@lab) (p2856@chi-body* (cdr p7190@e*) (p2655@add-lexical p7248@lab p7247@lex p7191@r) p7192@mr (cons p7247@lex p7193@lex*) (cons p7237@rhs p7194@rhs*) p7195@mod** p7227@kwd* p7197@exp* p7198@rib p7199@top?))) p7244@p7242@lex p7243@p7241@lab))))) p7234@p7232@rhs p7233@p7231@id))) (if (memv p7229@t '(define-syntax)) (call-with-values (lambda () (p2643@parse-define-syntax p7210@e)) (lambda (p7253@p7251@id p7254@p7252@rhs) ((lambda (p7257@rhs p7258@id) (begin (if (p2282@bound-id-member? p7258@id p7227@kwd*) (p2998@syntax-violation '#f '"cannot redefine keyword" p7210@e) (void)) ((lambda (p7261@lab p7262@expanded-rhs) (begin (p2189@extend-rib! p7198@rib p7258@id p7261@lab) ((lambda (p7265@b) (p2856@chi-body* (cdr p7190@e*) (cons (cons p7261@lab p7265@b) p7191@r) (cons (cons p7261@lab p7265@b) p7192@mr) p7193@lex* p7194@rhs* p7195@mod** p7227@kwd* p7197@exp* p7198@rib p7199@top?)) (p2330@make-eval-transformer p7262@expanded-rhs)))) (p2150@gen-define-label p7258@id p7198@rib) (p2858@expand-transformer p7257@rhs p7192@mr)))) p7254@p7252@rhs p7253@p7251@id))) (if (memv p7229@t '(let-syntax letrec-syntax)) ((lambda (p7267@t) ((lambda (p7269@ls/false) (if (and p7269@ls/false (apply (lambda (p7271@xlhs* p7272@xrhs* p7273@xbody*) (if (not (p2278@valid-bound-ids? p7271@xlhs*)) (p2998@syntax-violation '#f '"invalid identifiers" p7210@e) (void))) p7269@ls/false)) (apply (lambda (p7277@xlhs* p7278@xrhs* p7279@xbody*) ((lambda (p7283@xlab*) ((lambda (p7285@xrib) ((lambda (p7287@xb*) ((lambda () (p2856@chi-body* (append (map (lambda (p7289@x) (p2248@add-subst p7285@xrib p7289@x)) p7279@xbody*) (cdr p7190@e*)) (append (map cons p7283@xlab* p7287@xb*) p7191@r) (append (map cons p7283@xlab* p7287@xb*) p7192@mr) p7193@lex* p7194@rhs* p7195@mod** p7227@kwd* p7197@exp* p7198@rib p7199@top?)))) (map (lambda (p7291@x) (p2330@make-eval-transformer (p2858@expand-transformer (if (eq? p7223@type 'let-syntax) p7291@x (p2248@add-subst p7285@xrib p7291@x)) p7192@mr))) p7278@xrhs*))) (p2199@make-full-rib p7277@xlhs* p7283@xlab*))) (map p2144@gen-label p7277@xlhs*))) p7269@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p7267@t))) (p2765@syntax-dispatch p7267@t '(_ #(each (any any)) . each-any)))) p7210@e) (if (memv p7229@t '(begin)) ((lambda (p7293@t) ((lambda (p7295@ls/false) (if p7295@ls/false (apply (lambda (p7297@x*) (p2856@chi-body* (append p7297@x* (cdr p7190@e*)) p7191@r p7192@mr p7193@lex* p7194@rhs* p7195@mod** p7227@kwd* p7197@exp* p7198@rib p7199@top?)) p7295@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p7293@t))) (p2765@syntax-dispatch p7293@t '(_ . each-any)))) p7210@e) (if (memv p7229@t '(global-macro global-macro!)) (p2856@chi-body* (cons (p2248@add-subst p7198@rib (p2793@chi-global-macro p7222@value p7210@e)) (cdr p7190@e*)) p7191@r p7192@mr p7193@lex* p7194@rhs* p7195@mod** p7227@kwd* p7197@exp* p7198@rib p7199@top?) (if (memv p7229@t '(local-macro local-macro!)) (p2856@chi-body* (cons (p2248@add-subst p7198@rib (p2791@chi-local-macro p7222@value p7210@e)) (cdr p7190@e*)) p7191@r p7192@mr p7193@lex* p7194@rhs* p7195@mod** p7227@kwd* p7197@exp* p7198@rib p7199@top?) (if (memv p7229@t '(macro macro!)) (p2856@chi-body* (cons (p2248@add-subst p7198@rib (p2789@chi-macro p7222@value p7210@e)) (cdr p7190@e*)) p7191@r p7192@mr p7193@lex* p7194@rhs* p7195@mod** p7227@kwd* p7197@exp* p7198@rib p7199@top?) (if (memv p7229@t '(module)) (call-with-values (lambda () (p2854@chi-internal-module p7210@e p7191@r p7192@mr p7193@lex* p7194@rhs* p7195@mod** p7227@kwd*)) (lambda (p7307@p7299@lex* p7308@p7300@rhs* p7309@p7301@m-exp-id* p7310@p7302@m-exp-lab* p7311@p7303@r p7312@p7304@mr p7313@p7305@mod** p7314@p7306@kwd*) ((lambda (p7323@kwd* p7324@mod** p7325@mr p7326@r p7327@m-exp-lab* p7328@m-exp-id* p7329@rhs* p7330@lex*) (begin (vector-for-each (lambda (p7339@id p7340@lab) (p2189@extend-rib! p7198@rib p7339@id p7340@lab)) p7328@m-exp-id* p7327@m-exp-lab*) (p2856@chi-body* (cdr p7190@e*) p7326@r p7325@mr p7330@lex* p7329@rhs* p7324@mod** p7323@kwd* p7197@exp* p7198@rib p7199@top?))) p7314@p7306@kwd* p7313@p7305@mod** p7312@p7304@mr p7311@p7303@r p7310@p7302@m-exp-lab* p7309@p7301@m-exp-id* p7308@p7300@rhs* p7307@p7299@lex*))) (if (memv p7229@t '(library)) (begin (p2968@library-expander (p2290@stx->datum p7210@e)) (p2856@chi-body* (cdr p7190@e*) p7191@r p7192@mr p7193@lex* p7194@rhs* p7195@mod** p7227@kwd* p7197@exp* p7198@rib p7199@top?)) (if (memv p7229@t '(export)) ((lambda (p7343@t) ((lambda (p7345@ls/false) (if p7345@ls/false (apply (lambda (p7347@exp-decl*) (p2856@chi-body* (cdr p7190@e*) p7191@r p7192@mr p7193@lex* p7194@rhs* p7195@mod** p7227@kwd* (append p7347@exp-decl* p7197@exp*) p7198@rib p7199@top?)) p7345@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p7343@t))) (p2765@syntax-dispatch p7343@t '(_ . each-any)))) p7210@e) (if (memv p7229@t '(import)) ((lambda () ((lambda (p7350@module-import? p7352@module-import p7354@library-import) (begin (set! p7350@module-import? (lambda (p7426@e) ((lambda (p7428@t) ((lambda (p7430@ls/false) (if (and p7430@ls/false (apply (lambda (p7432@id) (p2268@id? p7432@id)) p7430@ls/false)) (apply (lambda (p7434@id) '#t) p7430@ls/false) ((lambda (p7436@t) ((lambda (p7438@ls/false) (if p7438@ls/false (apply (lambda (p7440@imp*) '#f) p7438@ls/false) ((lambda (p7442@t) ((lambda (p7444@ls/false) (if p7444@ls/false (apply (lambda () (p2998@syntax-violation '#f '"malformed import form" p7426@e)) p7444@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p7442@t))) (p2765@syntax-dispatch p7442@t '_))) p7436@t))) (p2765@syntax-dispatch p7436@t '(_ . each-any)))) p7428@t))) (p2765@syntax-dispatch p7428@t '(_ any)))) p7426@e))) (set! p7352@module-import (lambda (p7395@e p7396@r) ((lambda (p7399@t) ((lambda (p7401@ls/false) (if (and p7401@ls/false (apply (lambda (p7403@id) (p2268@id? p7403@id)) p7401@ls/false)) (apply (lambda (p7405@id) (call-with-values (lambda () (p2308@syntax-type p7405@id p7396@r)) (lambda (p7410@p7407@type p7411@p7408@value p7412@p7409@kwd) ((lambda (p7416@kwd p7417@value p7418@type) ((lambda (p7422@t) (if (memv p7422@t '($module)) ((lambda (p7424@iface) (values (p2852@module-interface-exp-id* p7424@iface p7405@id) (p2844@module-interface-exp-lab-vec p7424@iface))) p7417@value) (p2998@syntax-violation '#f '"invalid import" p7395@e))) p7418@type)) p7412@p7409@kwd p7411@p7408@value p7410@p7407@type)))) p7401@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p7399@t))) (p2765@syntax-dispatch p7399@t '(_ any)))) p7395@e))) (set! p7354@library-import (lambda (p7369@e) ((lambda (p7371@t) ((lambda (p7373@ls/false) (if p7373@ls/false (apply (lambda (p7375@ctxt p7376@imp*) (call-with-values (lambda () (p2866@parse-import-spec* (p3004@syntax->datum p7376@imp*))) (lambda (p7381@p7379@subst-names p7382@p7380@subst-labels) ((lambda (p7385@subst-labels p7386@subst-names) (values (vector-map (lambda (p7389@name) (p2234@datum->stx p7375@ctxt p7389@name)) p7386@subst-names) p7385@subst-labels)) p7382@p7380@subst-labels p7381@p7379@subst-names)))) p7373@ls/false) ((lambda (p7391@t) ((lambda (p7393@ls/false) (if p7393@ls/false (apply (lambda () (p2998@syntax-violation '#f '"invalid import form" p7369@e)) p7393@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p7391@t))) (p2765@syntax-dispatch p7391@t '_))) p7371@t))) (p2765@syntax-dispatch p7371@t '(any . each-any)))) p7369@e))) (begin (call-with-values (lambda () (if (p7350@module-import? p7210@e) (p7352@module-import p7210@e p7191@r) (p7354@library-import p7210@e))) (lambda (p7357@p7355@id* p7358@p7356@lab*) ((lambda (p7361@lab* p7362@id*) (vector-for-each (lambda (p7365@id p7366@lab) (p2189@extend-rib! p7198@rib p7365@id p7366@lab)) p7362@id* p7361@lab*)) p7358@p7356@lab* p7357@p7355@id*))) (p2856@chi-body* (cdr p7190@e*) p7191@r p7192@mr p7193@lex* p7194@rhs* p7195@mod** p7227@kwd* p7197@exp* p7198@rib p7199@top?)))) '#f '#f '#f))) (if p7199@top? (p2856@chi-body* (cdr p7190@e*) p7191@r p7192@mr (cons (p2140@gen-lexical 'dummy) p7193@lex*) (cons (cons 'top-expr p7210@e) p7194@rhs*) p7195@mod** p7227@kwd* p7197@exp* p7198@rib p7199@top?) (values p7190@e* p7191@r p7192@mr p7193@lex* p7194@rhs* p7195@mod** p7227@kwd* p7197@exp*)))))))))))))) p7223@type)) (if (p2268@id? p7221@kwd) (cons p7221@kwd p7196@kwd*) p7196@kwd*))) p7217@p7214@kwd p7216@p7213@value p7215@p7212@type)))) (car p7190@e*))))) (set! p2858@expand-transformer (lambda (p7446@expr p7447@r) ((lambda (p7450@rtc) ((lambda (p7452@expanded-rhs) (begin (for-each ((lambda (p7454@mark-visit) (lambda (p7456@x) (begin (p1794@p1449@invoke-library p7456@x) (p7454@mark-visit p7456@x)))) (p2874@vis-collector)) (p7450@rtc)) p7452@expanded-rhs)) ((lambda (p7462@p7458@inv-collector p7463@p7459@vis-collector p7464@p7460@inv-collector p7465@p7461@vis-collector) ((lambda (p7470@swap) (dynamic-wind p7470@swap (lambda () (p2799@chi-expr p7446@expr p7447@r p7447@r)) p7470@swap)) (lambda () (begin ((lambda (p7472@t) (begin (p7462@p7458@inv-collector p7464@p7460@inv-collector) (set! p7464@p7460@inv-collector p7472@t))) (p7462@p7458@inv-collector)) ((lambda (p7474@t) (begin (p7463@p7459@vis-collector p7465@p7461@vis-collector) (set! p7465@p7461@vis-collector p7474@t))) (p7463@p7459@vis-collector)))))) p2872@inv-collector p2874@vis-collector p7450@rtc (lambda (p7476@x) (values))))) (p2870@make-collector)))) (set! p2860@parse-exports (lambda (p7478@exp*) ((letrec ((p7480@f (lambda (p7482@exp* p7483@int* p7484@ext*) (if (null? p7482@exp*) (begin (if (not (p2278@valid-bound-ids? p7484@ext*)) (p2998@syntax-violation 'export '"invalid exports" (p2819@find-dups p7484@ext*)) (void)) (values (map p3004@syntax->datum p7484@ext*) p7483@int*)) ((lambda (p7488@t) ((lambda (p7490@ls/false) (if p7490@ls/false (apply (lambda (p7492@rename p7493@i* p7494@e*) (begin (if (not (and (eq? (p3004@syntax->datum p7492@rename) 'rename) (for-all p2268@id? p7493@i*) (for-all p2268@id? p7494@e*))) (p2998@syntax-violation 'export '"invalid export specifier" (car p7482@exp*)) (void)) (p7480@f (cdr p7482@exp*) (append p7493@i* p7483@int*) (append p7494@e* p7484@ext*)))) p7490@ls/false) ((lambda (p7498@t) ((lambda (p7500@ls/false) (if p7500@ls/false (apply (lambda (p7502@ie) (begin (if (not (p2268@id? p7502@ie)) (p2998@syntax-violation 'export '"invalid export" p7502@ie) (void)) (p7480@f (cdr p7482@exp*) (cons p7502@ie p7483@int*) (cons p7502@ie p7484@ext*)))) p7500@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p7498@t))) (p2765@syntax-dispatch p7498@t 'any))) p7488@t))) (p2765@syntax-dispatch p7488@t '(any . #(each (any any)))))) (car p7482@exp*)))))) p7480@f) p7478@exp* '() '()))) (set! p2862@parse-library-name (lambda (p7504@spec) ((lambda (p7507@parse) (begin (set! p7507@parse (lambda (p7518@x) ((lambda (p7520@t) ((lambda (p7522@ls/false) (if (and p7522@ls/false (apply (lambda (p7524@v*) (for-all (lambda (p7526@x) ((lambda (p7528@x) (and (integer? p7528@x) (exact? p7528@x))) (p3004@syntax->datum p7526@x))) p7524@v*)) p7522@ls/false)) (apply (lambda (p7530@v*) (values '() (map p3004@syntax->datum p7530@v*))) p7522@ls/false) ((lambda (p7532@t) ((lambda (p7534@ls/false) (if (and p7534@ls/false (apply (lambda (p7536@x p7537@rest) (symbol? (p3004@syntax->datum p7536@x))) p7534@ls/false)) (apply (lambda (p7540@x p7541@rest) (call-with-values (lambda () (p7507@parse p7541@rest)) (lambda (p7546@p7544@x* p7547@p7545@v*) ((lambda (p7550@v* p7551@x*) (values (cons (p3004@syntax->datum p7540@x) p7551@x*) p7550@v*)) p7547@p7545@v* p7546@p7544@x*)))) p7534@ls/false) ((lambda (p7554@t) ((lambda (p7556@ls/false) (if p7556@ls/false (apply (lambda () (values '() '())) p7556@ls/false) ((lambda (p7558@t) ((lambda (p7560@ls/false) (if p7560@ls/false (apply (lambda () (p2998@syntax-violation '#f '"invalid library name" p7504@spec)) p7560@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p7558@t))) (p2765@syntax-dispatch p7558@t '_))) p7554@t))) (p2765@syntax-dispatch p7554@t '()))) p7532@t))) (p2765@syntax-dispatch p7532@t '(any . any)))) p7520@t))) (p2765@syntax-dispatch p7520@t '(each-any)))) p7518@x))) (call-with-values (lambda () (p7507@parse p7504@spec)) (lambda (p7510@p7508@name* p7511@p7509@ver*) ((lambda (p7514@ver* p7515@name*) (begin (if (null? p7515@name*) (p2998@syntax-violation '#f '"empty library name" p7504@spec) (void)) (values p7515@name* p7514@ver*))) p7511@p7509@ver* p7510@p7508@name*))))) '#f))) (set! p2864@parse-library (lambda (p7562@e) ((lambda (p7564@t) ((lambda (p7566@ls/false) (if (and p7566@ls/false (apply (lambda (p7568@library p7569@name* p7570@export p7571@exp* p7572@import p7573@imp* p7574@b*) (and (eq? (p3004@syntax->datum p7570@export) 'export) (eq? (p3004@syntax->datum p7572@import) 'import) (eq? (p3004@syntax->datum p7568@library) 'library))) p7566@ls/false)) (apply (lambda (p7582@library p7583@name* p7584@export p7585@exp* p7586@import p7587@imp* p7588@b*) (values p7583@name* p7585@exp* p7587@imp* p7588@b*)) p7566@ls/false) ((lambda (p7596@t) ((lambda (p7598@ls/false) (if p7598@ls/false (apply (lambda () (p2998@syntax-violation '#f '"malformed library" p7562@e)) p7598@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p7596@t))) (p2765@syntax-dispatch p7596@t '_))) p7564@t))) (p2765@syntax-dispatch p7564@t '(any each-any (any . each-any) (any . each-any) . each-any)))) p7562@e))) (set! p2866@parse-import-spec* ((lambda () ((lambda (p7601@idsyn? p7603@dup-error p7605@merge-substs p7607@exclude* p7609@find* p7611@rem* p7613@remove-dups p7615@parse-library-name p7617@import-library p7619@get-import p7621@add-imports!) (begin (set! p7601@idsyn? (lambda (p8112@x) (symbol? (p3004@syntax->datum p8112@x)))) (set! p7603@dup-error (lambda (p8110@name) (p2998@syntax-violation 'import '"two imports with different bindings" p8110@name))) (set! p7605@merge-substs (lambda (p8092@s p8093@subst) ((lambda (p8097@insert-to-subst) (begin (set! p8097@insert-to-subst (lambda (p8098@a p8099@subst) ((lambda (p8102@name p8103@label) ((lambda (p8106@t) (if p8106@t ((lambda (p8108@x) (if (eq? (cdr p8108@x) p8103@label) p8099@subst (p7603@dup-error p8102@name))) p8106@t) (cons p8098@a p8099@subst))) (assq p8102@name p8099@subst))) (car p8098@a) (cdr p8098@a)))) (if (null? p8092@s) p8093@subst (p8097@insert-to-subst (car p8092@s) (p7605@merge-substs (cdr p8092@s) p8093@subst))))) '#f))) (set! p7607@exclude* (lambda (p8050@sym* p8051@subst) ((lambda (p8055@exclude) (begin (set! p8055@exclude (lambda (p8076@sym p8077@subst) (if (null? p8077@subst) (p2998@syntax-violation 'import '"cannot rename unbound identifier" p8076@sym) (if (eq? p8076@sym (caar p8077@subst)) (values (cdar p8077@subst) (cdr p8077@subst)) ((lambda (p8080@a) (call-with-values (lambda () (p8055@exclude p8076@sym (cdr p8077@subst))) (lambda (p8084@p8082@old p8085@p8083@subst) ((lambda (p8088@subst p8089@old) (values p8089@old (cons p8080@a p8088@subst))) p8085@p8083@subst p8084@p8082@old)))) (car p8077@subst)))))) (if (null? p8050@sym*) (values '() p8051@subst) (call-with-values (lambda () (p8055@exclude (car p8050@sym*) p8051@subst)) (lambda (p8058@p8056@old p8059@p8057@subst) ((lambda (p8062@subst p8063@old) (call-with-values (lambda () (p7607@exclude* (cdr p8050@sym*) p8062@subst)) (lambda (p8068@p8066@old* p8069@p8067@subst) ((lambda (p8072@subst p8073@old*) (values (cons p8063@old p8073@old*) p8072@subst)) p8069@p8067@subst p8068@p8066@old*)))) p8059@p8057@subst p8058@p8056@old)))))) '#f))) (set! p7609@find* (lambda (p8042@sym* p8043@subst) (map (lambda (p8046@x) ((lambda (p8048@t) (if p8048@t (cdr p8048@t) (p2998@syntax-violation 'import '"cannot find identifier" p8046@x))) (assq p8046@x p8043@subst))) p8042@sym*))) (set! p7611@rem* (lambda (p8034@sym* p8035@subst) ((letrec ((p8038@f (lambda (p8040@subst) (if (null? p8040@subst) '() (if (memq (caar p8040@subst) p8034@sym*) (p8038@f (cdr p8040@subst)) (cons (car p8040@subst) (p8038@f (cdr p8040@subst)))))))) p8038@f) p8035@subst))) (set! p7613@remove-dups (lambda (p8032@ls) (if (null? p8032@ls) '() (if (memq (car p8032@ls) (cdr p8032@ls)) (p7613@remove-dups (cdr p8032@ls)) (cons (car p8032@ls) (p7613@remove-dups (cdr p8032@ls))))))) (set! p7615@parse-library-name (lambda (p7802@spec) ((lambda (p7805@subversion? p7807@subversion-pred p7809@version-pred) (begin (set! p7805@subversion? (lambda (p8028@x) ((lambda (p8030@x) (and (integer? p8030@x) (exact? p8030@x) (>= p8030@x '0))) (p3004@syntax->datum p8028@x)))) (set! p7807@subversion-pred (lambda (p7932@x*) ((lambda (p7934@t) ((lambda (p7936@ls/false) (if (and p7936@ls/false (apply (lambda (p7938@n) (p7805@subversion? p7938@n)) p7936@ls/false)) (apply (lambda (p7940@n) (lambda (p7942@x) (= p7942@x (p3004@syntax->datum p7940@n)))) p7936@ls/false) ((lambda (p7944@t) ((lambda (p7946@ls/false) (if (and p7946@ls/false (apply (lambda (p7948@p? p7949@sub*) (eq? (p3004@syntax->datum p7948@p?) 'and)) p7946@ls/false)) (apply (lambda (p7952@p? p7953@sub*) ((lambda (p7956@p*) (lambda (p7958@x) (for-all (lambda (p7960@p) (p7960@p p7958@x)) p7956@p*))) (map p7807@subversion-pred p7953@sub*))) p7946@ls/false) ((lambda (p7962@t) ((lambda (p7964@ls/false) (if (and p7964@ls/false (apply (lambda (p7966@p? p7967@sub*) (eq? (p3004@syntax->datum p7966@p?) 'or)) p7964@ls/false)) (apply (lambda (p7970@p? p7971@sub*) ((lambda (p7974@p*) (lambda (p7976@x) (exists (lambda (p7978@p) (p7978@p p7976@x)) p7974@p*))) (map p7807@subversion-pred p7971@sub*))) p7964@ls/false) ((lambda (p7980@t) ((lambda (p7982@ls/false) (if (and p7982@ls/false (apply (lambda (p7984@p? p7985@sub) (eq? (p3004@syntax->datum p7984@p?) 'not)) p7982@ls/false)) (apply (lambda (p7988@p? p7989@sub) ((lambda (p7992@p) (lambda (p7994@x) (not (p7992@p p7994@x)))) (p7807@subversion-pred p7989@sub))) p7982@ls/false) ((lambda (p7996@t) ((lambda (p7998@ls/false) (if (and p7998@ls/false (apply (lambda (p8000@p? p8001@n) (and (eq? (p3004@syntax->datum p8000@p?) '<=) (p7805@subversion? p8001@n))) p7998@ls/false)) (apply (lambda (p8004@p? p8005@n) (lambda (p8008@x) (<= p8008@x (p3004@syntax->datum p8005@n)))) p7998@ls/false) ((lambda (p8010@t) ((lambda (p8012@ls/false) (if (and p8012@ls/false (apply (lambda (p8014@p? p8015@n) (and (eq? (p3004@syntax->datum p8014@p?) '>=) (p7805@subversion? p8015@n))) p8012@ls/false)) (apply (lambda (p8018@p? p8019@n) (lambda (p8022@x) (>= p8022@x (p3004@syntax->datum p8019@n)))) p8012@ls/false) ((lambda (p8024@t) ((lambda (p8026@ls/false) (if p8026@ls/false (apply (lambda () (p2998@syntax-violation 'import '"invalid sub-version spec" p7802@spec p7932@x*)) p8026@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p8024@t))) (p2765@syntax-dispatch p8024@t '_))) p8010@t))) (p2765@syntax-dispatch p8010@t '(any any)))) p7996@t))) (p2765@syntax-dispatch p7996@t '(any any)))) p7980@t))) (p2765@syntax-dispatch p7980@t '(any any)))) p7962@t))) (p2765@syntax-dispatch p7962@t '(any . each-any)))) p7944@t))) (p2765@syntax-dispatch p7944@t '(any . each-any)))) p7934@t))) (p2765@syntax-dispatch p7934@t 'any))) p7932@x*))) (set! p7809@version-pred (lambda (p7852@x*) ((lambda (p7854@t) ((lambda (p7856@ls/false) (if p7856@ls/false (apply (lambda () (lambda (p7858@x) '#t)) p7856@ls/false) ((lambda (p7860@t) ((lambda (p7862@ls/false) (if (and p7862@ls/false (apply (lambda (p7864@c p7865@ver*) (eq? (p3004@syntax->datum p7864@c) 'and)) p7862@ls/false)) (apply (lambda (p7868@c p7869@ver*) ((lambda (p7872@p*) (lambda (p7874@x) (for-all (lambda (p7876@p) (p7876@p p7874@x)) p7872@p*))) (map p7809@version-pred p7869@ver*))) p7862@ls/false) ((lambda (p7878@t) ((lambda (p7880@ls/false) (if (and p7880@ls/false (apply (lambda (p7882@c p7883@ver*) (eq? (p3004@syntax->datum p7882@c) 'or)) p7880@ls/false)) (apply (lambda (p7886@c p7887@ver*) ((lambda (p7890@p*) (lambda (p7892@x) (exists (lambda (p7894@p) (p7894@p p7892@x)) p7890@p*))) (map p7809@version-pred p7887@ver*))) p7880@ls/false) ((lambda (p7896@t) ((lambda (p7898@ls/false) (if (and p7898@ls/false (apply (lambda (p7900@c p7901@ver) (eq? (p3004@syntax->datum p7900@c) 'not)) p7898@ls/false)) (apply (lambda (p7904@c p7905@ver) ((lambda (p7908@p) (lambda (p7910@x) (not (p7908@p p7910@x)))) (p7809@version-pred p7905@ver))) p7898@ls/false) ((lambda (p7912@t) ((lambda (p7914@ls/false) (if p7914@ls/false (apply (lambda (p7916@sub*) ((lambda (p7918@p*) (lambda (p7920@x) ((letrec ((p7922@f (lambda (p7924@p* p7925@x) (if (null? p7924@p*) '#t (if (null? p7925@x) '#f (and ((car p7924@p*) (car p7925@x)) (p7922@f (cdr p7924@p*) (cdr p7925@x)))))))) p7922@f) p7918@p* p7920@x))) (map p7807@subversion-pred p7916@sub*))) p7914@ls/false) ((lambda (p7928@t) ((lambda (p7930@ls/false) (if p7930@ls/false (apply (lambda () (p2998@syntax-violation 'import '"invalid version spec" p7802@spec p7852@x*)) p7930@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p7928@t))) (p2765@syntax-dispatch p7928@t '_))) p7912@t))) (p2765@syntax-dispatch p7912@t 'each-any))) p7896@t))) (p2765@syntax-dispatch p7896@t '(any any)))) p7878@t))) (p2765@syntax-dispatch p7878@t '(any . each-any)))) p7860@t))) (p2765@syntax-dispatch p7860@t '(any . each-any)))) p7854@t))) (p2765@syntax-dispatch p7854@t '()))) p7852@x*))) ((letrec ((p7810@f (lambda (p7812@x) ((lambda (p7814@t) ((lambda (p7816@ls/false) (if p7816@ls/false (apply (lambda (p7818@version-spec*) (values '() (p7809@version-pred p7818@version-spec*))) p7816@ls/false) ((lambda (p7820@t) ((lambda (p7822@ls/false) (if (and p7822@ls/false (apply (lambda (p7824@x p7825@x*) (p7601@idsyn? p7824@x)) p7822@ls/false)) (apply (lambda (p7828@x p7829@x*) (call-with-values (lambda () (p7810@f p7829@x*)) (lambda (p7834@p7832@name p7835@p7833@pred) ((lambda (p7838@pred p7839@name) (values (cons (p3004@syntax->datum p7828@x) p7839@name) p7838@pred)) p7835@p7833@pred p7834@p7832@name)))) p7822@ls/false) ((lambda (p7842@t) ((lambda (p7844@ls/false) (if p7844@ls/false (apply (lambda () (values '() (lambda (p7846@x) '#t))) p7844@ls/false) ((lambda (p7848@t) ((lambda (p7850@ls/false) (if p7850@ls/false (apply (lambda () (p2998@syntax-violation '#f '"invalid import spec" p7802@spec)) p7850@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p7848@t))) (p2765@syntax-dispatch p7848@t '_))) p7842@t))) (p2765@syntax-dispatch p7842@t '()))) p7820@t))) (p2765@syntax-dispatch p7820@t '(any . any)))) p7814@t))) (p2765@syntax-dispatch p7814@t '(each-any)))) p7812@x)))) p7810@f) p7802@spec))) '#f '#f '#f))) (set! p7617@import-library (lambda (p7788@spec*) (call-with-values (lambda () (p7615@parse-library-name p7788@spec*)) (lambda (p7792@p7790@name p7793@p7791@pred) ((lambda (p7796@pred p7797@name) (begin (if (null? p7797@name) (p2998@syntax-violation 'import '"empty library name" p7788@spec*) (void)) ((lambda (p7800@lib) (begin (if (not p7800@lib) (p2998@syntax-violation 'import '"cannot find library with required name" p7797@name) (void)) (if (not (p7796@pred (p1747@p1355@library-version p7800@lib))) (p2998@syntax-violation 'import '"library does not satisfy version specification" p7788@spec* p7800@lib) (void)) ((p2876@imp-collector) p7800@lib) (p1751@p1363@library-subst p7800@lib))) (p1787@p1435@find-library-by-name p7797@name)))) p7793@p7791@pred p7792@p7790@name))))) (set! p7619@get-import (lambda (p7646@spec) ((lambda (p7648@t) ((lambda (p7650@ls/false) (if (and p7650@ls/false (apply (lambda (p7652@x p7653@x*) (not (memq (p3004@syntax->datum p7652@x) '(for rename except only prefix library)))) p7650@ls/false)) (apply (lambda (p7656@x p7657@x*) (p7617@import-library (cons p7656@x p7657@x*))) p7650@ls/false) ((lambda (p7660@t) ((lambda (p7662@ls/false) (if (and p7662@ls/false (apply (lambda (p7664@rename p7665@isp p7666@old* p7667@new*) (and (eq? (p3004@syntax->datum p7664@rename) 'rename) (for-all p7601@idsyn? p7666@old*) (for-all p7601@idsyn? p7667@new*))) p7662@ls/false)) (apply (lambda (p7672@rename p7673@isp p7674@old* p7675@new*) ((lambda (p7680@subst p7681@old* p7682@new*) ((lambda (p7686@old-label*) ((lambda (p7688@subst) (p7605@merge-substs (map cons p7682@new* p7686@old-label*) p7688@subst)) (p7611@rem* p7681@old* p7680@subst))) (p7609@find* p7681@old* p7680@subst))) (p7619@get-import p7673@isp) (map p3004@syntax->datum p7674@old*) (map p3004@syntax->datum p7675@new*))) p7662@ls/false) ((lambda (p7690@t) ((lambda (p7692@ls/false) (if (and p7692@ls/false (apply (lambda (p7694@except p7695@isp p7696@sym*) (and (eq? (p3004@syntax->datum p7694@except) 'except) (for-all p7601@idsyn? p7696@sym*))) p7692@ls/false)) (apply (lambda (p7700@except p7701@isp p7702@sym*) ((lambda (p7706@subst) (p7611@rem* (map p3004@syntax->datum p7702@sym*) p7706@subst)) (p7619@get-import p7701@isp))) p7692@ls/false) ((lambda (p7708@t) ((lambda (p7710@ls/false) (if (and p7710@ls/false (apply (lambda (p7712@only p7713@isp p7714@sym*) (and (eq? (p3004@syntax->datum p7712@only) 'only) (for-all p7601@idsyn? p7714@sym*))) p7710@ls/false)) (apply (lambda (p7718@only p7719@isp p7720@sym*) ((lambda (p7724@subst p7725@sym*) ((lambda (p7728@sym*) ((lambda (p7730@lab*) (map cons p7728@sym* p7730@lab*)) (p7609@find* p7728@sym* p7724@subst))) (p7613@remove-dups p7725@sym*))) (p7619@get-import p7719@isp) (map p3004@syntax->datum p7720@sym*))) p7710@ls/false) ((lambda (p7732@t) ((lambda (p7734@ls/false) (if (and p7734@ls/false (apply (lambda (p7736@prefix p7737@isp p7738@p) (and (eq? (p3004@syntax->datum p7736@prefix) 'prefix) (p7601@idsyn? p7738@p))) p7734@ls/false)) (apply (lambda (p7742@prefix p7743@isp p7744@p) ((lambda (p7748@subst p7749@prefix) (map (lambda (p7752@x) (cons (string->symbol (string-append p7749@prefix (symbol->string (car p7752@x)))) (cdr p7752@x))) p7748@subst)) (p7619@get-import p7743@isp) (symbol->string (p3004@syntax->datum p7744@p)))) p7734@ls/false) ((lambda (p7754@t) ((lambda (p7756@ls/false) (if (and p7756@ls/false (apply (lambda (p7758@library p7759@spec*) (eq? (p3004@syntax->datum p7758@library) 'library)) p7756@ls/false)) (apply (lambda (p7762@library p7763@spec*) (p7617@import-library p7763@spec*)) p7756@ls/false) ((lambda (p7766@t) ((lambda (p7768@ls/false) (if (and p7768@ls/false (apply (lambda (p7770@for p7771@isp p7772@rest) (eq? (p3004@syntax->datum p7770@for) 'for)) p7768@ls/false)) (apply (lambda (p7776@for p7777@isp p7778@rest) (p7619@get-import p7777@isp)) p7768@ls/false) ((lambda (p7782@t) ((lambda (p7784@ls/false) (if p7784@ls/false (apply (lambda (p7786@spec) (p2998@syntax-violation 'import '"invalid import spec" p7786@spec)) p7784@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p7782@t))) (p2765@syntax-dispatch p7782@t 'any))) p7766@t))) (p2765@syntax-dispatch p7766@t '(any any . any)))) p7754@t))) (p2765@syntax-dispatch p7754@t '(any each-any)))) p7732@t))) (p2765@syntax-dispatch p7732@t '(any any any)))) p7708@t))) (p2765@syntax-dispatch p7708@t '(any any . each-any)))) p7690@t))) (p2765@syntax-dispatch p7690@t '(any any . each-any)))) p7660@t))) (p2765@syntax-dispatch p7660@t '(any any . #(each (any any)))))) p7648@t))) (p2765@syntax-dispatch p7648@t '(any . each-any)))) p7646@spec))) (set! p7621@add-imports! (lambda (p7630@imp p7631@h) ((lambda (p7634@subst) (for-each (lambda (p7636@x) ((lambda (p7638@name p7639@label) ((lambda (p7642@t) (if p7642@t ((lambda (p7644@l) (if (not (eq? p7644@l p7639@label)) (p7603@dup-error p7638@name) (void))) p7642@t) (hashtable-set! p7631@h p7638@name p7639@label))) (hashtable-ref p7631@h p7638@name '#f))) (car p7636@x) (cdr p7636@x))) p7634@subst)) (p7619@get-import p7630@imp)))) (lambda (p7622@imp*) ((letrec ((p7624@f (lambda (p7626@imp* p7627@h) (if (null? p7626@imp*) (hashtable-entries p7627@h) (begin (p7621@add-imports! (car p7626@imp*) p7627@h) (p7624@f (cdr p7626@imp*) p7627@h)))))) p7624@f) p7622@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! p2868@make-top-rib (lambda (p8114@names p8115@labels) ((lambda (p8118@rib) (begin (vector-for-each (lambda (p8120@name p8121@label) (begin (if (not (symbol? p8120@name)) (error 'make-top-rib '"BUG: not a symbol" p8120@name) (void)) (p2191@extend-rib/nc! p8118@rib (p2214@make-stx p8120@name p2136@top-mark* '() '()) p8121@label))) p8114@names p8115@labels) p8118@rib)) (p2187@make-empty-rib)))) (set! p2870@make-collector (lambda () ((lambda (p8124@ls) (lambda p8128 ((lambda (p8129) (if (= p8129 '0) (apply (lambda () p8124@ls) p8128) (if (= p8129 '1) (apply (lambda (p8126@x) (set! p8124@ls (p2129@set-cons p8126@x p8124@ls))) p8128) (error 'apply '"invalid arg count")))) (length p8128)))) '()))) (set! p2872@inv-collector (p1166@p944@make-parameter (lambda p8130@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (p8132@x) (begin (if (not (procedure? p8132@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" p8132@x) (void)) p8132@x)))) (set! p2874@vis-collector (p1166@p944@make-parameter (lambda p8134@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (p8136@x) (begin (if (not (procedure? p8136@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" p8136@x) (void)) p8136@x)))) (set! p2876@imp-collector (p1166@p944@make-parameter (lambda p8138@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (p8140@x) (begin (if (not (procedure? p8140@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" p8140@x) (void)) p8140@x)))) (set! p2878@chi-library-internal (lambda (p8142@e* p8143@rib p8144@top?) (call-with-values (lambda () (p2856@chi-body* p8142@e* '() '() '() '() '() '() '() p8143@rib p8144@top?)) (lambda (p8156@p8148@e* p8157@p8149@r p8158@p8150@mr p8159@p8151@lex* p8160@p8152@rhs* p8161@p8153@mod** p8162@p8154@_kwd* p8163@p8155@exp*) ((lambda (p8172@exp* p8173@_kwd* p8174@mod** p8175@rhs* p8176@lex* p8177@mr p8178@r p8179@e*) (values (append (apply append (reverse p8174@mod**)) p8179@e*) p8178@r p8177@mr (reverse p8176@lex*) (reverse p8175@rhs*) p8172@exp*)) p8163@p8155@exp* p8162@p8154@_kwd* p8161@p8153@mod** p8160@p8152@rhs* p8159@p8151@lex* p8158@p8150@mr p8157@p8149@r p8156@p8148@e*))))) (set! p2880@chi-interaction-expr (lambda (p8188@e p8189@rib p8190@r) (call-with-values (lambda () (p2856@chi-body* (list p8188@e) p8190@r p8190@r '() '() '() '() '() p8189@rib '#t)) (lambda (p8202@p8194@e* p8203@p8195@r p8204@p8196@mr p8205@p8197@lex* p8206@p8198@rhs* p8207@p8199@mod** p8208@p8200@_kwd* p8209@p8201@_exp*) ((lambda (p8218@_exp* p8219@_kwd* p8220@mod** p8221@rhs* p8222@lex* p8223@mr p8224@r p8225@e*) ((lambda (p8234@e*) ((lambda (p8236@e) (values p8236@e p8224@r)) (if (null? p8234@e*) (p2108@p1966@build-void) (if (null? (cdr p8234@e*)) (car p8234@e*) (p2107@p1964@build-sequence '#f p8234@e*))))) (p2813@expand-interaction-rhs*/init* (reverse p8222@lex*) (reverse p8221@rhs*) (append (apply append (reverse p8220@mod**)) p8225@e*) p8224@r p8223@mr))) p8209@p8201@_exp* p8208@p8200@_kwd* p8207@p8199@mod** p8206@p8198@rhs* p8205@p8197@lex* p8204@p8196@mr p8203@p8195@r p8202@p8194@e*))))) (set! p2882@library-body-expander (lambda (p8238@name p8239@main-exp* p8240@imp* p8241@b* p8242@top?) ((lambda (p8249@itc) (begin (set! p8249@itc (p2870@make-collector)) ((lambda (p8254@p8250@imp-collector p8255@p8251@top-level-context p8256@p8252@imp-collector p8257@p8253@top-level-context) ((lambda (p8262@swap) (dynamic-wind p8262@swap (lambda () (call-with-values (lambda () (p2866@parse-import-spec* p8240@imp*)) (lambda (p8266@p8264@subst-names p8267@p8265@subst-labels) ((lambda (p8270@subst-labels p8271@subst-names) ((lambda (p8274@rib) ((lambda (p8277@wrap) (begin (set! p8277@wrap (lambda (p8385@x) (p2214@make-stx p8385@x p2136@top-mark* (list p8274@rib) '()))) ((lambda (p8278@b* p8279@main-exp* p8280@rtc p8281@vtc) ((lambda (p8290@p8286@inv-collector p8291@p8287@vis-collector p8292@p8288@inv-collector p8293@p8289@vis-collector) ((lambda (p8298@swap) (dynamic-wind p8298@swap (lambda () (call-with-values (lambda () (p2878@chi-library-internal p8278@b* p8274@rib p8242@top?)) (lambda (p8306@p8300@init* p8307@p8301@r p8308@p8302@mr p8309@p8303@lex* p8310@p8304@rhs* p8311@p8305@internal-exp*) ((lambda (p8318@internal-exp* p8319@rhs* p8320@lex* p8321@mr p8322@r p8323@init*) (call-with-values (lambda () (p2860@parse-exports (append p8279@main-exp* p8318@internal-exp*))) (lambda (p8332@p8330@exp-name* p8333@p8331@exp-id*) ((lambda (p8336@exp-id* p8337@exp-name*) (begin (p2195@seal-rib! p8274@rib) ((lambda (p8340@init*) ((lambda (p8342@rhs*) ((lambda () (begin (p2197@unseal-rib! p8274@rib) ((lambda (p8344@loc* p8345@export-subst) ((lambda (p8349@errstr) (begin (set! p8349@errstr '"attempt to export mutated variable") (call-with-values (lambda () (p2978@make-export-env/macros p8320@lex* p8344@loc* p8322@r)) (lambda (p8353@p8350@export-env p8354@p8351@global* p8355@p8352@macro*) ((lambda (p8359@macro* p8360@global* p8361@export-env) (begin (for-each (lambda (p8365@s) ((lambda (p8367@name p8368@label) ((lambda (p8371@p) (if p8371@p ((lambda (p8373@b) ((lambda (p8375@type) (if (eq? p8375@type 'mutable) (p2998@syntax-violation 'export p8349@errstr p8367@name) (void))) (car p8373@b))) (cdr p8371@p)) (void))) (assq p8368@label p8361@export-env))) (car p8365@s) (cdr p8365@s))) p8345@export-subst) ((lambda (p8377@invoke-body p8378@invoke-definitions) (values (p8249@itc) (p8280@rtc) (p8281@vtc) (p2107@p1964@build-sequence '#f (append p8378@invoke-definitions (list p8377@invoke-body))) p8359@macro* p8345@export-subst p8361@export-env)) (p2110@p1970@build-letrec* '#f p8320@lex* p8342@rhs* (p2974@build-exports p8360@global* p8340@init*)) (map p2103@p1801@build-global-define (map cdr p8360@global*))))) p8355@p8352@macro* p8354@p8351@global* p8353@p8350@export-env))))) '#f)) (map p2142@gen-global p8320@lex*) (p2976@make-export-subst p8337@exp-name* p8336@exp-id*)))))) (p2815@chi-rhs* p8319@rhs* p8322@r p8321@mr))) (p2795@chi-expr* p8323@init* p8322@r p8321@mr)))) p8333@p8331@exp-id* p8332@p8330@exp-name*)))) p8311@p8305@internal-exp* p8310@p8304@rhs* p8309@p8303@lex* p8308@p8302@mr p8307@p8301@r p8306@p8300@init*)))) p8298@swap)) (lambda () (begin ((lambda (p8381@t) (begin (p8290@p8286@inv-collector p8292@p8288@inv-collector) (set! p8292@p8288@inv-collector p8381@t))) (p8290@p8286@inv-collector)) ((lambda (p8383@t) (begin (p8291@p8287@vis-collector p8293@p8289@vis-collector) (set! p8293@p8289@vis-collector p8383@t))) (p8291@p8287@vis-collector)))))) p2872@inv-collector p2874@vis-collector p8280@rtc p8281@vtc)) (map p8277@wrap p8241@b*) (map p8277@wrap p8239@main-exp*) (p2870@make-collector) (p2870@make-collector)))) '#f)) (p2868@make-top-rib p8271@subst-names p8270@subst-labels))) p8267@p8265@subst-labels p8266@p8264@subst-names)))) p8262@swap)) (lambda () (begin ((lambda (p8387@t) (begin (p8254@p8250@imp-collector p8256@p8252@imp-collector) (set! p8256@p8252@imp-collector p8387@t))) (p8254@p8250@imp-collector)) ((lambda (p8389@t) (begin (p8255@p8251@top-level-context p8257@p8253@top-level-context) (set! p8257@p8253@top-level-context p8389@t))) (p8255@p8251@top-level-context)))))) p2876@imp-collector p3012@top-level-context p8249@itc '#f))) '#f))) (set! p2884@core-library-expander (lambda (p8391@e p8392@verify-name) (call-with-values (lambda () (p2864@parse-library p8391@e)) (lambda (p8399@p8395@name* p8400@p8396@exp* p8401@p8397@imp* p8402@p8398@b*) ((lambda (p8407@b* p8408@imp* p8409@exp* p8410@name*) (call-with-values (lambda () (p2862@parse-library-name p8410@name*)) (lambda (p8417@p8415@name p8418@p8416@ver) ((lambda (p8421@ver p8422@name) (begin (p8392@verify-name p8422@name) (call-with-values (lambda () (p2882@library-body-expander p8422@name p8409@exp* p8408@imp* p8407@b* '#f)) (lambda (p8432@p8425@imp* p8433@p8426@invoke-req* p8434@p8427@visit-req* p8435@p8428@invoke-code p8436@p8429@visit-code p8437@p8430@export-subst p8438@p8431@export-env) ((lambda (p8446@export-env p8447@export-subst p8448@visit-code p8449@invoke-code p8450@visit-req* p8451@invoke-req* p8452@imp*) (values p8422@name p8421@ver p8452@imp* p8451@invoke-req* p8450@visit-req* p8449@invoke-code p8448@visit-code p8447@export-subst p8446@export-env)) p8438@p8431@export-env p8437@p8430@export-subst p8436@p8429@visit-code p8435@p8428@invoke-code p8434@p8427@visit-req* p8433@p8426@invoke-req* p8432@p8425@imp*))))) p8418@p8416@ver p8417@p8415@name)))) p8402@p8398@b* p8401@p8397@imp* p8400@p8396@exp* p8399@p8395@name*))))) (set! p2886@parse-top-level-program (lambda (p8460@e*) ((lambda (p8462@t) ((lambda (p8464@ls/false) (if (and p8464@ls/false (apply (lambda (p8466@import p8467@imp* p8468@b*) (eq? (p3004@syntax->datum p8466@import) 'import)) p8464@ls/false)) (apply (lambda (p8472@import p8473@imp* p8474@b*) (values p8473@imp* p8474@b*)) p8464@ls/false) ((lambda (p8478@t) ((lambda (p8480@ls/false) (if (and p8480@ls/false (apply (lambda (p8482@import p8483@x p8484@y) (eq? (p3004@syntax->datum p8482@import) 'import)) p8480@ls/false)) (apply (lambda (p8488@import p8489@x p8490@y) (p2998@syntax-violation 'expander '"invalid syntax of top-level program" (p2262@syntax-car p8460@e*))) p8480@ls/false) ((lambda (p8494@t) ((lambda (p8496@ls/false) (if p8496@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) p8496@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p8494@t))) (p2765@syntax-dispatch p8494@t '_))) p8478@t))) (p2765@syntax-dispatch p8478@t '((any . any) . any)))) p8462@t))) (p2765@syntax-dispatch p8462@t '((any . each-any) . each-any)))) p8460@e*))) (set! p2888@top-level-expander (lambda (p8498@e*) (call-with-values (lambda () (p2886@parse-top-level-program p8498@e*)) (lambda (p8502@p8500@imp* p8503@p8501@b*) ((lambda (p8506@b* p8507@imp*) (call-with-values (lambda () (p2882@library-body-expander '() '() p8507@imp* p8506@b* '#t)) (lambda (p8517@p8510@imp* p8518@p8511@invoke-req* p8519@p8512@visit-req* p8520@p8513@invoke-code p8521@p8514@visit-code p8522@p8515@export-subst p8523@p8516@export-env) ((lambda (p8531@export-env p8532@export-subst p8533@visit-code p8534@invoke-code p8535@visit-req* p8536@invoke-req* p8537@imp*) (values p8536@invoke-req* p8534@invoke-code)) p8523@p8516@export-env p8522@p8515@export-subst p8521@p8514@visit-code p8520@p8513@invoke-code p8519@p8512@visit-req* p8518@p8511@invoke-req* p8517@p8510@imp*)))) p8503@p8501@b* p8502@p8500@imp*))))) (set! p2894@p2889 (make-record-type-descriptor 'env '#f 'p2892 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! p2896@p2891 '#f) (set! p2898@p2890 (make-record-constructor-descriptor p2894@p2889 '#f p2896@p2891)) (set! p2901@env? (record-predicate p2894@p2889)) (set! p2903@make-env (record-constructor p2898@p2890)) (set! p2905@env-names (record-accessor p2894@p2889 '0)) (set! p2907@env-labels (record-accessor p2894@p2889 '1)) (set! p2909@env-itc (record-accessor p2894@p2889 '2)) (set! p2911@set-env-names! (record-mutator p2894@p2889 '0)) (set! p2913@set-env-labels! (record-mutator p2894@p2889 '1)) (set! p2915@set-env-itc! (record-mutator p2894@p2889 '2)) (set! p2917@rp (p1163@p938@make-record-printer 'env (lambda (p8545@x p8546@p p8547@wr) (display '"#<environment>" p8546@p)))) (set! p2923@p2918 (make-record-type-descriptor 'interaction-env '#f 'p2921 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! p2925@p2920 '#f) (set! p2927@p2919 (make-record-constructor-descriptor p2923@p2918 '#f p2925@p2920)) (set! p2930@interaction-env? (record-predicate p2923@p2918)) (set! p2932@make-interaction-env (record-constructor p2927@p2919)) (set! p2934@interaction-env-rib (record-accessor p2923@p2918 '0)) (set! p2936@interaction-env-r (record-accessor p2923@p2918 '1)) (set! p2938@interaction-env-locs (record-accessor p2923@p2918 '2)) (set! p2940@set-interaction-env-rib! (record-mutator p2923@p2918 '0)) (set! p2942@set-interaction-env-r! (record-mutator p2923@p2918 '1)) (set! p2944@set-interaction-env-locs! (record-mutator p2923@p2918 '2)) (set! p2946@rp (p1163@p938@make-record-printer 'interaction-env (lambda (p8551@x p8552@p p8553@wr) (display '"#<environment>" p8552@p)))) (set! p2948@interaction-environment-symbols (lambda () (p2956@environment-symbols (p3010@interaction-environment)))) (set! p2950@environment-bindings (lambda (p8557@e) (vector->list (vector-map (lambda (p8559@name p8560@label) (p2952@parse-binding (cons p8559@name (p1793@p1447@imported-label->binding p8560@label)))) (p2905@env-names p8557@e) (p2907@env-labels p8557@e))))) (set! p2952@parse-binding (lambda (p8563@b) (cons (car p8563@b) ((lambda (p8565@t) (if (memv p8565@t '(core-prim global)) 'procedure (if (memv p8565@t '(core-macro macro global-macro)) 'syntax (if (memv p8565@t '($core-rtd)) 'record (if (eq? (car p8563@b) (cadr p8563@b)) 'syntax 'unknown))))) (cadr p8563@b))))) (set! p2954@environment? (lambda (p8567@x) (or (p2901@env? p8567@x) (p2930@interaction-env? p8567@x)))) (set! p2956@environment-symbols (lambda (p8569@x) (if (p2901@env? p8569@x) (vector->list (p2905@env-names p8569@x)) (if (p2930@interaction-env? p8569@x) (map values (p2167@rib-sym* (p2934@interaction-env-rib p8569@x))) (assertion-violation 'environment-symbols '"not an environment" p8569@x))))) (set! p2958@environment (lambda p8571@imp* ((lambda (p8573@itc) ((lambda (p8577@p8575@imp-collector p8578@p8576@imp-collector) ((lambda (p8581@swap) (dynamic-wind p8581@swap (lambda () (call-with-values (lambda () (p2866@parse-import-spec* p8571@imp*)) (lambda (p8585@p8583@subst-names p8586@p8584@subst-labels) ((lambda (p8589@subst-labels p8590@subst-names) (p2903@make-env p8590@subst-names p8589@subst-labels p8573@itc)) p8586@p8584@subst-labels p8585@p8583@subst-names)))) p8581@swap)) (lambda () ((lambda (p8593@t) (begin (p8577@p8575@imp-collector p8578@p8576@imp-collector) (set! p8578@p8576@imp-collector p8593@t))) (p8577@p8575@imp-collector))))) p2876@imp-collector p8573@itc)) (p2870@make-collector)))) (set! p2960@null-environment (lambda (p8595@n) (begin (if (not (eqv? p8595@n '5)) (assertion-violation 'null-environment '"not 5" p8595@n) (void)) (p2958@environment '(psyntax null-environment-5))))) (set! p2962@scheme-report-environment (lambda (p8597@n) (begin (if (not (eqv? p8597@n '5)) (assertion-violation 'scheme-report-environment '"not 5" p8597@n) (void)) (p2958@environment '(psyntax scheme-report-environment-5))))) (set! p2964@expand (lambda (p8599@x p8600@env) (if (p2901@env? p8600@env) ((lambda (p8603@rib) ((lambda (p8605@x p8606@itc p8607@rtc p8608@vtc) ((lambda (p8613@x) (begin (p2195@seal-rib! p8603@rib) (values p8613@x (p8607@rtc)))) ((lambda (p8623@p8615@top-level-context p8624@p8616@inv-collector p8625@p8617@vis-collector p8626@p8618@imp-collector p8627@p8619@top-level-context p8628@p8620@inv-collector p8629@p8621@vis-collector p8630@p8622@imp-collector) ((lambda (p8639@swap) (dynamic-wind p8639@swap (lambda () (p2799@chi-expr p8605@x '() '())) p8639@swap)) (lambda () (begin ((lambda (p8641@t) (begin (p8623@p8615@top-level-context p8627@p8619@top-level-context) (set! p8627@p8619@top-level-context p8641@t))) (p8623@p8615@top-level-context)) ((lambda (p8643@t) (begin (p8624@p8616@inv-collector p8628@p8620@inv-collector) (set! p8628@p8620@inv-collector p8643@t))) (p8624@p8616@inv-collector)) ((lambda (p8645@t) (begin (p8625@p8617@vis-collector p8629@p8621@vis-collector) (set! p8629@p8621@vis-collector p8645@t))) (p8625@p8617@vis-collector)) ((lambda (p8647@t) (begin (p8626@p8618@imp-collector p8630@p8622@imp-collector) (set! p8630@p8622@imp-collector p8647@t))) (p8626@p8618@imp-collector)))))) p3012@top-level-context p2872@inv-collector p2874@vis-collector p2876@imp-collector '#f p8607@rtc p8608@vtc p8606@itc))) (p2214@make-stx p8599@x p2136@top-mark* (list p8603@rib) '()) (p2909@env-itc p8600@env) (p2870@make-collector) (p2870@make-collector))) (p2868@make-top-rib (p2905@env-names p8600@env) (p2907@env-labels p8600@env))) (if (p2930@interaction-env? p8600@env) ((lambda (p8649@rib p8650@r p8651@rtc) ((lambda (p8655@x) (call-with-values (lambda () ((lambda (p8667@p8659@top-level-context p8668@p8660@inv-collector p8669@p8661@vis-collector p8670@p8662@imp-collector p8671@p8663@top-level-context p8672@p8664@inv-collector p8673@p8665@vis-collector p8674@p8666@imp-collector) ((lambda (p8683@swap) (dynamic-wind p8683@swap (lambda () (p2880@chi-interaction-expr p8655@x p8649@rib p8650@r)) p8683@swap)) (lambda () (begin ((lambda (p8685@t) (begin (p8667@p8659@top-level-context p8671@p8663@top-level-context) (set! p8671@p8663@top-level-context p8685@t))) (p8667@p8659@top-level-context)) ((lambda (p8687@t) (begin (p8668@p8660@inv-collector p8672@p8664@inv-collector) (set! p8672@p8664@inv-collector p8687@t))) (p8668@p8660@inv-collector)) ((lambda (p8689@t) (begin (p8669@p8661@vis-collector p8673@p8665@vis-collector) (set! p8673@p8665@vis-collector p8689@t))) (p8669@p8661@vis-collector)) ((lambda (p8691@t) (begin (p8670@p8662@imp-collector p8674@p8666@imp-collector) (set! p8674@p8666@imp-collector p8691@t))) (p8670@p8662@imp-collector)))))) p3012@top-level-context p2872@inv-collector p2874@vis-collector p2876@imp-collector p8600@env p8651@rtc (p2870@make-collector) (p2870@make-collector))) (lambda (p8693@p8657@e p8694@p8658@r^) ((lambda (p8697@r^ p8698@e) (begin (p2942@set-interaction-env-r! p8600@env p8697@r^) (values p8698@e (p8651@rtc)))) p8694@p8658@r^ p8693@p8657@e)))) (p2214@make-stx p8599@x p2136@top-mark* (list p8649@rib) '()))) (p2934@interaction-env-rib p8600@env) (p2936@interaction-env-r p8600@env) (p2870@make-collector)) (assertion-violation 'expand '"not an environment" p8600@env))))) (set! p2966@eval (lambda (p8701@x p8702@env) (begin (if (not (p2954@environment? p8702@env)) (error 'eval '"not an environment" p8702@env) (void)) (call-with-values (lambda () (p2964@expand p8701@x p8702@env)) (lambda (p8707@p8705@x p8708@p8706@invoke-req*) ((lambda (p8711@invoke-req* p8712@x) (begin (for-each p1794@p1449@invoke-library p8711@invoke-req*) (eval-core (p1250@p1178@expanded->core p8712@x)))) p8708@p8706@invoke-req* p8707@p8705@x)))))) (set! p2968@library-expander (lambda p8816 ((lambda (p8817) (if (= p8817 '3) (apply (lambda (p8715@x p8716@filename p8717@verify-name) ((lambda (p8722@build-visit-code p8724@visit!) (begin (set! p8722@build-visit-code (lambda (p8798@macro*) (if (null? p8798@macro*) (p2108@p1966@build-void) (p2107@p1964@build-sequence '#f (map (lambda (p8800@x) ((lambda (p8802@loc p8803@src) (list 'set! p8802@loc p8803@src)) (car p8800@x) (cddr p8800@x))) p8798@macro*))))) (set! p8724@visit! (lambda (p8790@macro*) (for-each (lambda (p8792@x) ((lambda (p8794@loc p8795@proc) (set-symbol-value! p8794@loc p8795@proc)) (car p8792@x) (cadr p8792@x))) p8790@macro*))) (call-with-values (lambda () (p2884@core-library-expander p8715@x p8717@verify-name)) (lambda (p8734@p8725@name p8735@p8726@ver p8736@p8727@imp* p8737@p8728@inv* p8738@p8729@vis* p8739@p8730@invoke-code p8740@p8731@macro* p8741@p8732@export-subst p8742@p8733@export-env) ((lambda (p8752@export-env p8753@export-subst p8754@macro* p8755@invoke-code p8756@vis* p8757@inv* p8758@imp* p8759@ver p8760@name) ((lambda (p8770@id p8771@name p8772@ver p8773@imp* p8774@vis* p8775@inv* p8776@visit-proc p8777@invoke-proc p8778@visit-code p8779@invoke-code) (begin (p1792@p1445@install-library p8770@id p8771@name p8772@ver p8773@imp* p8774@vis* p8775@inv* p8753@export-subst p8752@export-env p8776@visit-proc p8777@invoke-proc p8778@visit-code p8779@invoke-code '#t p8716@filename) (values p8770@id p8771@name p8772@ver p8773@imp* p8774@vis* p8775@inv* p8779@invoke-code p8778@visit-code p8753@export-subst p8752@export-env))) (p1152@p916@gensym) p8760@name p8759@ver (map p1798@p1457@library-spec p8758@imp*) (map p1798@p1457@library-spec p8756@vis*) (map p1798@p1457@library-spec p8757@inv*) (lambda () (p8724@visit! p8754@macro*)) (lambda () (eval-core (p1250@p1178@expanded->core p8755@invoke-code))) (p8722@build-visit-code p8754@macro*) p8755@invoke-code)) p8742@p8733@export-env p8741@p8732@export-subst p8740@p8731@macro* p8739@p8730@invoke-code p8738@p8729@vis* p8737@p8728@inv* p8736@p8727@imp* p8735@p8726@ver p8734@p8725@name))))) '#f '#f)) p8816) (if (= p8817 '2) (apply (lambda (p8806@x p8807@filename) (p2968@library-expander p8806@x p8807@filename (lambda (p8810@x) (values)))) p8816) (if (= p8817 '1) (apply (lambda (p8812@x) (p2968@library-expander p8812@x '#f (lambda (p8814@x) (values)))) p8816) (error 'apply '"invalid arg count"))))) (length p8816)))) (set! p2970@boot-library-expand (lambda (p8818@x) (call-with-values (lambda () (p2968@library-expander p8818@x)) (lambda (p8830@p8820@id p8831@p8821@name p8832@p8822@ver p8833@p8823@imp* p8834@p8824@vis* p8835@p8825@inv* p8836@p8826@invoke-code p8837@p8827@visit-code p8838@p8828@export-subst p8839@p8829@export-env) ((lambda (p8850@export-env p8851@export-subst p8852@visit-code p8853@invoke-code p8854@inv* p8855@vis* p8856@imp* p8857@ver p8858@name p8859@id) (values p8858@name p8853@invoke-code p8851@export-subst p8850@export-env)) p8839@p8829@export-env p8838@p8828@export-subst p8837@p8827@visit-code p8836@p8826@invoke-code p8835@p8825@inv* p8834@p8824@vis* p8833@p8823@imp* p8832@p8822@ver p8831@p8821@name p8830@p8820@id))))) (set! p2972@rev-map-append (lambda (p8870@f p8871@ls p8872@ac) (if (null? p8871@ls) p8872@ac (p2972@rev-map-append p8870@f (cdr p8871@ls) (cons (p8870@f (car p8871@ls)) p8872@ac))))) (set! p2974@build-exports (lambda (p8876@lex*+loc* p8877@init*) (p2107@p1964@build-sequence '#f (cons (p2108@p1966@build-void) (p2972@rev-map-append (lambda (p8880@x) (list 'set! (cdr p8880@x) (car p8880@x))) p8876@lex*+loc* p8877@init*))))) (set! p2976@make-export-subst (lambda (p8882@name* p8883@id*) (map (lambda (p8886@name p8887@id) ((lambda (p8890@label) (begin (if (not p8890@label) (p2998@syntax-violation '#f '"cannot export unbound identifier" p8887@id) (void)) (cons p8886@name p8890@label))) (p2294@id->label p8887@id))) p8882@name* p8883@id*))) (set! p2978@make-export-env/macros (lambda (p8892@lex* p8893@loc* p8894@r) ((lambda (p8899@lookup) (begin (set! p8899@lookup (lambda (p8928@x) ((letrec ((p8930@f (lambda (p8932@x p8933@lex* p8934@loc*) (if (pair? p8933@lex*) (if (eq? p8932@x (car p8933@lex*)) (car p8934@loc*) (p8930@f p8932@x (cdr p8933@lex*) (cdr p8934@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) p8930@f) p8928@x p8892@lex* p8893@loc*))) ((letrec ((p8900@f (lambda (p8902@r p8903@env p8904@global* p8905@macro*) (if (null? p8902@r) (values p8903@env p8904@global* p8905@macro*) ((lambda (p8910@x) ((lambda (p8912@label p8913@b) ((lambda (p8916@t) (if (memv p8916@t '(lexical)) ((lambda (p8918@v) ((lambda (p8920@loc p8921@type) (p8900@f (cdr p8902@r) (cons (cons* p8912@label p8921@type p8920@loc) p8903@env) (cons (cons (p2649@lexical-var p8918@v) p8920@loc) p8904@global*) p8905@macro*)) (p8899@lookup (p2649@lexical-var p8918@v)) (if (p2651@lexical-mutable? p8918@v) 'mutable 'global))) (p2304@binding-value p8913@b)) (if (memv p8916@t '(local-macro)) ((lambda (p8924@loc) (p8900@f (cdr p8902@r) (cons (cons* p8912@label 'global-macro p8924@loc) p8903@env) p8904@global* (cons (cons p8924@loc (p2304@binding-value p8913@b)) p8905@macro*))) (p1152@p916@gensym)) (if (memv p8916@t '(local-macro!)) ((lambda (p8926@loc) (p8900@f (cdr p8902@r) (cons (cons* p8912@label 'global-macro! p8926@loc) p8903@env) p8904@global* (cons (cons p8926@loc (p2304@binding-value p8913@b)) p8905@macro*))) (p1152@p916@gensym)) (if (memv p8916@t '($rtd $module)) (p8900@f (cdr p8902@r) (cons p8910@x p8903@env) p8904@global* p8905@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (p2302@binding-type p8913@b) (p2304@binding-value p8913@b))))))) (p2302@binding-type p8913@b))) (car p8910@x) (cdr p8910@x))) (car p8902@r)))))) p8900@f) p8894@r '() '() '()))) '#f))) (set! p2980@generate-temporaries (lambda (p8938@ls) ((lambda (p8940@t) ((lambda (p8942@ls/false) (if p8942@ls/false (apply (lambda (p8944@ls) (map (lambda (p8946@x) (p2214@make-stx ((lambda (p8948@x) (if (or (symbol? p8948@x) (string? p8948@x)) (p1152@p916@gensym p8948@x) (p1152@p916@gensym 't))) (p3004@syntax->datum p8946@x)) p2136@top-mark* '() '())) p8944@ls)) p8942@ls/false) ((lambda (p8950@t) ((lambda (p8952@ls/false) (if p8952@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) p8952@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p8950@t))) (p2765@syntax-dispatch p8950@t '_))) p8940@t))) (p2765@syntax-dispatch p8940@t 'each-any))) p8938@ls))) (set! p2982@free-identifier=? (lambda (p8954@x p8955@y) (if (p2268@id? p8954@x) (if (p2268@id? p8955@y) (p2276@free-id=? p8954@x p8955@y) (assertion-violation 'free-identifier=? '"not an identifier" p8955@y)) (assertion-violation 'free-identifier=? '"not an identifier" p8954@x)))) (set! p2984@bound-identifier=? (lambda (p8958@x p8959@y) (if (p2268@id? p8958@x) (if (p2268@id? p8959@y) (p2274@bound-id=? p8958@x p8959@y) (assertion-violation 'bound-identifier=? '"not an identifier" p8959@y)) (assertion-violation 'bound-identifier=? '"not an identifier" p8958@x)))) (set! p2986@make-source-condition (lambda (p8962@x) ((lambda (p8972@p8967 p8974@p8969 p8976@p8968 p8979@p8966 p8981@make-source-condition p8983@p8964 p8985@p8965 p8987@source-condition? p8989@source-filename p8991@source-character) (begin (set! p8972@p8967 (make-record-type-descriptor '&source-information p10074@p9389@&condition-rtd 'p8970 '#f '#f '#((immutable file-name) (immutable character)))) (set! p8974@p8969 '#f) (set! p8976@p8968 (make-record-constructor-descriptor p8972@p8967 p10075@p9391@&condition-rcd p8974@p8969)) (set! p8979@p8966 (record-predicate p8972@p8967)) (set! p8981@make-source-condition (record-constructor p8976@p8968)) (set! p8983@p8964 (record-accessor p8972@p8967 '0)) (set! p8985@p8965 (record-accessor p8972@p8967 '1)) (set! p8987@source-condition? (condition-predicate p8972@p8967)) (set! p8989@source-filename (condition-accessor p8972@p8967 p8983@p8964)) (set! p8991@source-character (condition-accessor p8972@p8967 p8985@p8965)) (if (pair? p8962@x) (p8981@make-source-condition (car p8962@x) (cdr p8962@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! p2988@extract-position-condition (lambda (p8992@x) (p2986@make-source-condition (p2990@expression-position p8992@x)))) (set! p2990@expression-position (lambda (p8994@x) (and (p2212@stx? p8994@x) ((lambda (p8996@x) (and (p1155@p922@annotation? p8996@x) (p1156@p924@annotation-source p8996@x))) (p2216@stx-expr p8994@x))))) (set! p2992@assertion-error (lambda (p8998@expr p8999@pos) (raise (condition (p10122@p9581@make-assertion-violation) (p10140@p9629@make-who-condition 'assert) (p10080@p9472@make-message-condition '"assertion failed") (p10130@p9603@make-irritants-condition (list p8998@expr)) (p2986@make-source-condition p8999@pos))))) (set! p2994@syntax-error (lambda (p9002@x . p9004@args) (begin (if (not (for-all string? p9004@args)) (assertion-violation 'syntax-error '"invalid argument" p9004@args) (void)) (raise (condition (p10080@p9472@make-message-condition (if (null? p9004@args) '"invalid syntax" (apply string-append p9004@args))) (p10174@p9719@make-syntax-violation (p3004@syntax->datum p9002@x) '#f) (p2988@extract-position-condition p9002@x)))))) (set! p2996@syntax-violation* (lambda (p9006@who p9007@msg p9008@form p9009@condition-object) (begin (if (not (string? p9007@msg)) (assertion-violation 'syntax-violation '"message is not a string" p9007@msg) (void)) ((lambda (p9014@who) (raise (condition (if p9014@who (p10140@p9629@make-who-condition p9014@who) (condition)) (p10080@p9472@make-message-condition p9007@msg) p9009@condition-object (p2988@extract-position-condition p9008@form)))) (if (or (string? p9006@who) (symbol? p9006@who)) p9006@who (if (not p9006@who) ((lambda (p9016@t) ((lambda (p9018@ls/false) (if (and p9018@ls/false (apply (lambda (p9020@id) (p2268@id? p9020@id)) p9018@ls/false)) (apply (lambda (p9022@id) (p3004@syntax->datum p9022@id)) p9018@ls/false) ((lambda (p9024@t) ((lambda (p9026@ls/false) (if (and p9026@ls/false (apply (lambda (p9028@id p9029@rest) (p2268@id? p9028@id)) p9026@ls/false)) (apply (lambda (p9032@id p9033@rest) (p3004@syntax->datum p9032@id)) p9026@ls/false) ((lambda (p9036@t) ((lambda (p9038@ls/false) (if p9038@ls/false (apply (lambda () '#f) p9038@ls/false) (p2998@syntax-violation '#f '"invalid syntax" p9036@t))) (p2765@syntax-dispatch p9036@t '_))) p9024@t))) (p2765@syntax-dispatch p9024@t '(any . any)))) p9016@t))) (p2765@syntax-dispatch p9016@t 'any))) p9008@form) (assertion-violation 'syntax-violation '"invalid who argument" p9006@who))))))) (set! p2998@syntax-violation (lambda p9054 ((lambda (p9055) (if (= p9055 '3) (apply (lambda (p9040@who p9041@msg p9042@form) (p2998@syntax-violation p9040@who p9041@msg p9042@form '#f)) p9054) (if (= p9055 '4) (apply (lambda (p9046@who p9047@msg p9048@form p9049@subform) (p2996@syntax-violation* p9046@who p9047@msg p9048@form (p10174@p9719@make-syntax-violation (p3004@syntax->datum p9048@form) (p3004@syntax->datum p9049@subform)))) p9054) (error 'apply '"invalid arg count")))) (length p9054)))) (set! p3000@identifier? (lambda (p9056@x) (p2268@id? p9056@x))) (set! p3002@datum->syntax (lambda (p9058@id p9059@datum) (if (p2268@id? p9058@id) (p2234@datum->stx p9058@id p9059@datum) (assertion-violation 'datum->syntax '"not an identifier" p9058@id)))) (set! p3004@syntax->datum (lambda (p9062@x) (p2290@stx->datum p9062@x))) (set! p3006@compile-r6rs-top-level (lambda (p9064@x*) (call-with-values (lambda () (p2888@top-level-expander p9064@x*)) (lambda (p9068@p9066@lib* p9069@p9067@invoke-code) ((lambda (p9072@invoke-code p9073@lib*) (lambda () (begin (for-each p1794@p1449@invoke-library p9073@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (p1250@p1178@expanded->core p9072@invoke-code)) (void)) (eval-core (p1250@p1178@expanded->core p9072@invoke-code))))) p9069@p9067@invoke-code p9068@p9066@lib*))))) (set! p3008@pre-compile-r6rs-top-level (lambda (p9076@x*) (call-with-values (lambda () (p2888@top-level-expander p9076@x*)) (lambda (p9080@p9078@lib* p9081@p9079@invoke-code) ((lambda (p9084@invoke-code p9085@lib*) (begin (for-each p1794@p1449@invoke-library p9085@lib*) (p1164@p940@compile-core (p1250@p1178@expanded->core p9084@invoke-code)))) p9081@p9079@invoke-code p9080@p9078@lib*))))) (set! p3010@interaction-environment ((lambda (p9088@the-env) (lambda () (or p9088@the-env ((lambda (p9090@lib p9091@rib) (begin ((lambda (p9094@subst) (begin (p2177@set-rib-sym*! p9091@rib (map car p9094@subst)) (p2179@set-rib-mark**! p9091@rib (map (lambda (p9096@x) p2136@top-mark*) p9094@subst)) (p2181@set-rib-label*! p9091@rib (map cdr p9094@subst)))) (p1751@p1363@library-subst p9090@lib)) ((lambda (p9098@env) (begin (set! p9088@the-env p9098@env) p9098@env)) (p2932@make-interaction-env p9091@rib '() '())))) (p1787@p1435@find-library-by-name '(mosh interaction)) (p2187@make-empty-rib))))) '#f)) (set! p3012@top-level-context (p1166@p944@make-parameter '#f)) (begin (set! p9368@p3012@top-level-context p3012@top-level-context) (set! p9367@p3010@interaction-environment p3010@interaction-environment) (set! p9366@p3008@pre-compile-r6rs-top-level p3008@pre-compile-r6rs-top-level) (set! p9365@p3006@compile-r6rs-top-level p3006@compile-r6rs-top-level) (set! p9364@p3004@syntax->datum p3004@syntax->datum) (set! p9363@p3002@datum->syntax p3002@datum->syntax) (set! p9362@p3000@identifier? p3000@identifier?) (set! p9361@p2998@syntax-violation p2998@syntax-violation) (set! p9360@p2996@syntax-violation* p2996@syntax-violation*) (set! p9359@p2994@syntax-error p2994@syntax-error) (set! p9358@p2992@assertion-error p2992@assertion-error) (set! p9357@p2990@expression-position p2990@expression-position) (set! p9356@p2988@extract-position-condition p2988@extract-position-condition) (set! p9355@p2986@make-source-condition p2986@make-source-condition) (set! p9354@p2984@bound-identifier=? p2984@bound-identifier=?) (set! p9353@p2982@free-identifier=? p2982@free-identifier=?) (set! p9352@p2980@generate-temporaries p2980@generate-temporaries) (set! p9351@p2978@make-export-env/macros p2978@make-export-env/macros) (set! p9350@p2976@make-export-subst p2976@make-export-subst) (set! p9349@p2974@build-exports p2974@build-exports) (set! p9348@p2972@rev-map-append p2972@rev-map-append) (set! p9347@p2970@boot-library-expand p2970@boot-library-expand) (set! p9346@p2968@library-expander p2968@library-expander) (set! p9345@p2966@eval p2966@eval) (set! p9344@p2964@expand p2964@expand) (set! p9343@p2962@scheme-report-environment p2962@scheme-report-environment) (set! p9342@p2960@null-environment p2960@null-environment) (set! p9341@p2958@environment p2958@environment) (set! p9340@p2956@environment-symbols p2956@environment-symbols) (set! p9339@p2954@environment? p2954@environment?) (set! p9338@p2952@parse-binding p2952@parse-binding) (set! p9337@p2950@environment-bindings p2950@environment-bindings) (set! p9336@p2948@interaction-environment-symbols p2948@interaction-environment-symbols) (set! p9335@p2946@rp p2946@rp) (set! p9334@p2944@set-interaction-env-locs! p2944@set-interaction-env-locs!) (set! p9333@p2942@set-interaction-env-r! p2942@set-interaction-env-r!) (set! p9332@p2940@set-interaction-env-rib! p2940@set-interaction-env-rib!) (set! p9331@p2938@interaction-env-locs p2938@interaction-env-locs) (set! p9330@p2936@interaction-env-r p2936@interaction-env-r) (set! p9329@p2934@interaction-env-rib p2934@interaction-env-rib) (set! p9328@p2932@make-interaction-env p2932@make-interaction-env) (set! p9327@p2930@interaction-env? p2930@interaction-env?) (set! p9326@p2927@p2919 p2927@p2919) (set! p9325@p2925@p2920 p2925@p2920) (set! p9324@p2923@p2918 p2923@p2918) (set! p9323@p2917@rp p2917@rp) (set! p9322@p2915@set-env-itc! p2915@set-env-itc!) (set! p9321@p2913@set-env-labels! p2913@set-env-labels!) (set! p9320@p2911@set-env-names! p2911@set-env-names!) (set! p9319@p2909@env-itc p2909@env-itc) (set! p9318@p2907@env-labels p2907@env-labels) (set! p9317@p2905@env-names p2905@env-names) (set! p9316@p2903@make-env p2903@make-env) (set! p9315@p2901@env? p2901@env?) (set! p9314@p2898@p2890 p2898@p2890) (set! p9313@p2896@p2891 p2896@p2891) (set! p9312@p2894@p2889 p2894@p2889) (set! p9311@p2888@top-level-expander p2888@top-level-expander) (set! p9310@p2886@parse-top-level-program p2886@parse-top-level-program) (set! p9309@p2884@core-library-expander p2884@core-library-expander) (set! p9308@p2882@library-body-expander p2882@library-body-expander) (set! p9307@p2880@chi-interaction-expr p2880@chi-interaction-expr) (set! p9306@p2878@chi-library-internal p2878@chi-library-internal) (set! p9305@p2876@imp-collector p2876@imp-collector) (set! p9304@p2874@vis-collector p2874@vis-collector) (set! p9303@p2872@inv-collector p2872@inv-collector) (set! p9302@p2870@make-collector p2870@make-collector) (set! p9301@p2868@make-top-rib p2868@make-top-rib) (set! p9300@p2866@parse-import-spec* p2866@parse-import-spec*) (set! p9299@p2864@parse-library p2864@parse-library) (set! p9298@p2862@parse-library-name p2862@parse-library-name) (set! p9297@p2860@parse-exports p2860@parse-exports) (set! p9296@p2858@expand-transformer p2858@expand-transformer) (set! p9295@p2856@chi-body* p2856@chi-body*) (set! p9294@p2854@chi-internal-module p2854@chi-internal-module) (set! p9293@p2852@module-interface-exp-id* p2852@module-interface-exp-id*) (set! p9292@p2850@set-module-interface-exp-lab-vec! p2850@set-module-interface-exp-lab-vec!) (set! p9291@p2848@set-module-interface-exp-id-vec! p2848@set-module-interface-exp-id-vec!) (set! p9290@p2846@set-module-interface-first-mark! p2846@set-module-interface-first-mark!) (set! p9289@p2844@module-interface-exp-lab-vec p2844@module-interface-exp-lab-vec) (set! p9288@p2842@module-interface-exp-id-vec p2842@module-interface-exp-id-vec) (set! p9287@p2840@module-interface-first-mark p2840@module-interface-first-mark) (set! p9286@p2838@make-module-interface p2838@make-module-interface) (set! p9285@p2836@module-interface? p2836@module-interface?) (set! p9284@p2833@p2825 p2833@p2825) (set! p9283@p2831@p2826 p2831@p2826) (set! p9282@p2829@p2824 p2829@p2824) (set! p9281@p2823@parse-module p2823@parse-module) (set! p9280@p2821@chi-internal p2821@chi-internal) (set! p9279@p2819@find-dups p2819@find-dups) (set! p9278@p2817@find-bound=? p2817@find-bound=?) (set! p9277@p2815@chi-rhs* p2815@chi-rhs*) (set! p9276@p2813@expand-interaction-rhs*/init* p2813@expand-interaction-rhs*/init*) (set! p9275@p2811@chi-rhs p2811@chi-rhs) (set! p9274@p2809@chi-defun p2809@chi-defun) (set! p9273@p2807@chi-lambda-clause* p2807@chi-lambda-clause*) (set! p9272@p2805@chi-lambda-clause p2805@chi-lambda-clause) (set! p9271@p2803@verify-formals p2803@verify-formals) (set! p9270@p2801@chi-set! p2801@chi-set!) (set! p9269@p2799@chi-expr p2799@chi-expr) (set! p9268@p2797@chi-application p2797@chi-application) (set! p9267@p2795@chi-expr* p2795@chi-expr*) (set! p9266@p2793@chi-global-macro p2793@chi-global-macro) (set! p9265@p2791@chi-local-macro p2791@chi-local-macro) (set! p9264@p2789@chi-macro p2789@chi-macro) (set! p9263@p2787@do-macro-call p2787@do-macro-call) (set! p9262@p2785@local-macro-transformer p2785@local-macro-transformer) (set! p9261@p2783@macro-transformer p2783@macro-transformer) (set! p9260@p2781@symbol-macro p2781@symbol-macro) (set! p9259@p2779@core-macro-transformer p2779@core-macro-transformer) (set! p9258@p2777@syntax-transformer p2777@syntax-transformer) (set! p9257@p2775@ellipsis-map p2775@ellipsis-map) (set! p9256@p2773@syntax-case-transformer p2773@syntax-case-transformer) (set! p9255@p2771@verify-literals p2771@verify-literals) (set! p9254@p2769@underscore? p2769@underscore?) (set! p9253@p2767@ellipsis? p2767@ellipsis?) (set! p9252@p2765@syntax-dispatch p2765@syntax-dispatch) (set! p9251@p2763@convert-pattern p2763@convert-pattern) (set! p9250@p2761@foreign-call-transformer p2761@foreign-call-transformer) (set! p9249@p2759@parameterize-macro p2759@parameterize-macro) (set! p9248@p2757@incorrect-usage-macro p2757@incorrect-usage-macro) (set! p9247@p2755@define-condition-type-macro p2755@define-condition-type-macro) (set! p9246@p2753@define-record-type-macro p2753@define-record-type-macro) (set! p9245@p2751@define-struct-macro p2751@define-struct-macro) (set! p9244@p2749@quasisyntax-macro p2749@quasisyntax-macro) (set! p9243@p2747@quasiquote-macro p2747@quasiquote-macro) (set! p9242@p2745@syntax-rules-macro p2745@syntax-rules-macro) (set! p9241@p2743@include-into-macro p2743@include-into-macro) (set! p9240@p2741@include-macro p2741@include-macro) (set! p9239@p2739@do-include p2739@do-include) (set! p9238@p2737@cond-macro p2737@cond-macro) (set! p9237@p2735@and-macro p2735@and-macro) (set! p9236@p2733@or-macro p2733@or-macro) (set! p9235@p2731@let*-macro p2731@let*-macro) (set! p9234@p2729@do-macro p2729@do-macro) (set! p9233@p2727@identifier-syntax-macro p2727@identifier-syntax-macro) (set! p9232@p2725@endianness-macro p2725@endianness-macro) (set! p9231@p2723@assert-macro p2723@assert-macro) (set! p9230@p2721@delay-macro p2721@delay-macro) (set! p9229@p2719@time-macro p2719@time-macro) (set! p9228@p2717@define-enumeration-macro p2717@define-enumeration-macro) (set! p9227@p2715@guard-macro p2715@guard-macro) (set! p9226@p2713@trace-letrec-syntax-macro p2713@trace-letrec-syntax-macro) (set! p9225@p2711@trace-let-syntax-macro p2711@trace-let-syntax-macro) (set! p9224@p2709@trace-let/rec-syntax p2709@trace-let/rec-syntax) (set! p9223@p2707@trace-define-syntax-macro p2707@trace-define-syntax-macro) (set! p9222@p2705@trace-define-macro p2705@trace-define-macro) (set! p9221@p2703@trace-lambda-macro p2703@trace-lambda-macro) (set! p9220@p2701@let*-values-macro p2701@let*-values-macro) (set! p9219@p2699@let-values-macro p2699@let-values-macro) (set! p9218@p2697@let-macro p2697@let-macro) (set! p9217@p2695@invalid-fmls-error p2695@invalid-fmls-error) (set! p9216@p2693@with-syntax-macro p2693@with-syntax-macro) (set! p9215@p2691@bless p2691@bless) (set! p9214@p2689@lambda-transformer p2689@lambda-transformer) (set! p9213@p2687@case-lambda-transformer p2687@case-lambda-transformer) (set! p9212@p2685@quote-transformer p2685@quote-transformer) (set! p9211@p2683@case-macro p2683@case-macro) (set! p9210@p2681@or-transformer p2681@or-transformer) (set! p9209@p2679@and-transformer p2679@and-transformer) (set! p9208@p2677@if-transformer p2677@if-transformer) (set! p9207@p2675@unless-macro p2675@unless-macro) (set! p9206@p2673@when-macro p2673@when-macro) (set! p9205@p2671@record-constructor-descriptor-transformer p2671@record-constructor-descriptor-transformer) (set! p9204@p2669@record-type-descriptor-transformer p2669@record-type-descriptor-transformer) (set! p9203@p2667@type-descriptor-transformer p2667@type-descriptor-transformer) (set! p9202@p2665@fluid-let-syntax-transformer p2665@fluid-let-syntax-transformer) (set! p9201@p2663@letrec*-transformer p2663@letrec*-transformer) (set! p9200@p2661@letrec-transformer p2661@letrec-transformer) (set! p9199@p2659@letrec-helper p2659@letrec-helper) (set! p9198@p2657@add-lexicals p2657@add-lexicals) (set! p9197@p2655@add-lexical p2655@add-lexical) (set! p9196@p2653@set-lexical-mutable! p2653@set-lexical-mutable!) (set! p9195@p2651@lexical-mutable? p2651@lexical-mutable?) (set! p9194@p2649@lexical-var p2649@lexical-var) (set! p9193@p2647@scheme-stx p2647@scheme-stx) (set! p9192@p2645@scheme-stx-hashtable p2645@scheme-stx-hashtable) (set! p9191@p2643@parse-define-syntax p2643@parse-define-syntax) (set! p9190@p2641@parse-define p2641@parse-define) (set! p9189@p2330@make-eval-transformer p2330@make-eval-transformer) (set! p9188@p2328@variable-transformer-procedure p2328@variable-transformer-procedure) (set! p9187@p2326@variable-transformer? p2326@variable-transformer?) (set! p9186@p2324@make-variable-transformer p2324@make-variable-transformer) (set! p9185@p2322@sanitize-binding p2322@sanitize-binding) (set! p9184@p2308@syntax-type p2308@syntax-type) (set! p9183@p2306@raise-unbound-error p2306@raise-unbound-error) (set! p9182@p2304@binding-value p2304@binding-value) (set! p9181@p2302@binding-type p2302@binding-type) (set! p9180@p2300@make-binding p2300@make-binding) (set! p9179@p2298@label->binding p2298@label->binding) (set! p9178@p2296@id->real-label p2296@id->real-label) (set! p9177@p2294@id->label p2294@id->label) (set! p9176@p2292@same-marks*? p2292@same-marks*?) (set! p9175@p2290@stx->datum p2290@stx->datum) (set! p9174@p2288@strip p2288@strip) (set! p9173@p2286@strip-annotations p2286@strip-annotations) (set! p9172@p2284@self-evaluating? p2284@self-evaluating?) (set! p9171@p2282@bound-id-member? p2282@bound-id-member?) (set! p9170@p2280@distinct-bound-ids? p2280@distinct-bound-ids?) (set! p9169@p2278@valid-bound-ids? p2278@valid-bound-ids?) (set! p9168@p2276@free-id=? p2276@free-id=?) (set! p9167@p2274@bound-id=? p2274@bound-id=?) (set! p9166@p2272@same-marks? p2272@same-marks?) (set! p9165@p2270@id->sym p2270@id->sym) (set! p9164@p2268@id? p2268@id?) (set! p9163@p2266@syntax->list p2266@syntax->list) (set! p9162@p2264@syntax-cdr p2264@syntax-cdr) (set! p9161@p2262@syntax-car p2262@syntax-car) (set! p9160@p2260@syntax-list? p2260@syntax-list?) (set! p9159@p2258@syntax-null? p2258@syntax-null?) (set! p9158@p2256@syntax-vector? p2256@syntax-vector?) (set! p9157@p2254@syntax-pair? p2254@syntax-pair?) (set! p9156@p2252@syntax-vector->list p2252@syntax-vector->list) (set! p9155@p2250@syntax-kind? p2250@syntax-kind?) (set! p9154@p2248@add-subst p2248@add-subst) (set! p9153@p2246@add-mark p2246@add-mark) (set! p9152@p2244@mkstx p2244@mkstx) (set! p9151@p2242@join-wraps p2242@join-wraps) (set! p9150@p2240@anti-mark? p2240@anti-mark?) (set! p9149@p2238@anti-mark p2238@anti-mark) (set! p9148@p2236@gen-mark p2236@gen-mark) (set! p9147@p2234@datum->stx p2234@datum->stx) (set! p9146@p2232@rp p2232@rp) (set! p9145@p2230@set-stx-ae*! p2230@set-stx-ae*!) (set! p9144@p2228@set-stx-subst*! p2228@set-stx-subst*!) (set! p9143@p2226@set-stx-mark*! p2226@set-stx-mark*!) (set! p9142@p2224@set-stx-expr! p2224@set-stx-expr!) (set! p9141@p2222@stx-ae* p2222@stx-ae*) (set! p9140@p2220@stx-subst* p2220@stx-subst*) (set! p9139@p2218@stx-mark* p2218@stx-mark*) (set! p9138@p2216@stx-expr p2216@stx-expr) (set! p9137@p2214@make-stx p2214@make-stx) (set! p9136@p2212@stx? p2212@stx?) (set! p9135@p2209@p2201 p2209@p2201) (set! p9134@p2207@p2202 p2207@p2202) (set! p9133@p2205@p2200 p2205@p2200) (set! p9132@p2199@make-full-rib p2199@make-full-rib) (set! p9131@p2197@unseal-rib! p2197@unseal-rib!) (set! p9130@p2195@seal-rib! p2195@seal-rib!) (set! p9129@p2193@make-rib-map p2193@make-rib-map) (set! p9128@p2191@extend-rib/nc! p2191@extend-rib/nc!) (set! p9127@p2189@extend-rib! p2189@extend-rib!) (set! p9126@p2187@make-empty-rib p2187@make-empty-rib) (set! p9125@p2185@set-rib-cache! p2185@set-rib-cache!) (set! p9124@p2183@set-rib-sealed/freq! p2183@set-rib-sealed/freq!) (set! p9123@p2181@set-rib-label*! p2181@set-rib-label*!) (set! p9122@p2179@set-rib-mark**! p2179@set-rib-mark**!) (set! p9121@p2177@set-rib-sym*! p2177@set-rib-sym*!) (set! p9120@p2175@rib-cache p2175@rib-cache) (set! p9119@p2173@rib-sealed/freq p2173@rib-sealed/freq) (set! p9118@p2171@rib-label* p2171@rib-label*) (set! p9117@p2169@rib-mark** p2169@rib-mark**) (set! p9116@p2167@rib-sym* p2167@rib-sym*) (set! p9115@p2165@make-rib p2165@make-rib) (set! p9114@p2163@rib? p2163@rib?) (set! p9113@p2160@p2152 p2160@p2152) (set! p9112@p2158@p2153 p2158@p2153) (set! p9111@p2156@p2151 p2156@p2151) (set! p9110@p2150@gen-define-label p2150@gen-define-label) (set! p9109@p2148@gen-define-label+loc p2148@gen-define-label+loc) (set! p9108@p2146@gen-top-level-label p2146@gen-top-level-label) (set! p9107@p2144@gen-label p2144@gen-label) (set! p9106@p2142@gen-global p2142@gen-global) (set! p9105@p2140@gen-lexical p2140@gen-lexical) (set! p9104@p2138@top-marked? p2138@top-marked?) (set! p9103@p2136@top-mark* p2136@top-mark*) (set! p9102@p2131@set-union p2131@set-union) (set! p9101@p2129@set-cons p2129@set-cons) (set! p9100@p2127@file-options-macro p2127@file-options-macro) (p1784@p1429@current-library-expander p2968@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (p9378@p9373 p9380@p9375 p9382@p9374 p9385@&condition? p9387@make-&condition p9389@&condition-rtd p9391@&condition-rcd p9463@p9458 p9465@p9460 p9467@p9459 p9470@p? p9472@make-message-condition p9474@p9457@condition-message p9476@message-condition? p9478@condition-message p9480@&message-rtd p9482@&message-rcd p9488@p9483 p9490@p9485 p9492@p9484 p9495@p? p9497@make-warning p9499@warning? p9501@&warning-rtd p9503@&warning-rcd p9509@p9504 p9511@p9506 p9513@p9505 p9516@p? p9518@make-serious-condition p9520@serious-condition? p9522@&serious-rtd p9524@&serious-rcd p9530@p9525 p9532@p9527 p9534@p9526 p9537@p? p9539@make-error p9541@error? p9543@&error-rtd p9545@&error-rcd p9551@p9546 p9553@p9548 p9555@p9547 p9558@p? p9560@make-violation p9562@violation? p9564@&violation-rtd p9566@&violation-rcd p9572@p9567 p9574@p9569 p9576@p9568 p9579@p? p9581@make-assertion-violation p9583@assertion-violation? p9585@&assertion-rtd p9587@&assertion-rcd p9594@p9589 p9596@p9591 p9598@p9590 p9601@p? p9603@make-irritants-condition p9605@p9588@condition-irritants p9607@irritants-condition? p9609@condition-irritants p9611@&irritants-rtd p9613@&irritants-rcd p9620@p9615 p9622@p9617 p9624@p9616 p9627@p? p9629@make-who-condition p9631@p9614@condition-who p9633@who-condition? p9635@condition-who p9637@&who-rtd p9639@&who-rcd p9645@p9640 p9647@p9642 p9649@p9641 p9652@p? p9654@make-non-continuable-violation p9656@non-continuable-violation? p9658@&non-continuable-rtd p9660@&non-continuable-rcd p9666@p9661 p9668@p9663 p9670@p9662 p9673@p? p9675@make-implementation-restriction-violation p9677@implementation-restriction-violation? p9679@&implementation-restriction-rtd p9681@&implementation-restriction-rcd p9687@p9682 p9689@p9684 p9691@p9683 p9694@p? p9696@make-lexical-violation p9698@lexical-violation? p9700@&lexical-rtd p9702@&lexical-rcd p9710@p9705 p9712@p9707 p9714@p9706 p9717@p? p9719@make-syntax-violation p9721@p9703@syntax-violation-form p9723@p9704@syntax-violation-subform p9725@syntax-violation? p9727@syntax-violation-form p9729@syntax-violation-subform p9731@&syntax-rtd p9733@&syntax-rcd p9739@p9734 p9741@p9736 p9743@p9735 p9746@p? p9748@make-undefined-violation p9750@undefined-violation? p9752@&undefined-rtd p9754@&undefined-rcd p9760@p9755 p9762@p9757 p9764@p9756 p9767@p? p9769@make-i/o-error p9771@i/o-error? p9773@&i/o-rtd p9775@&i/o-rcd p9781@p9776 p9783@p9778 p9785@p9777 p9788@p? p9790@make-i/o-read-error p9792@i/o-read-error? p9794@&i/o-read-rtd p9796@&i/o-read-rcd p9802@p9797 p9804@p9799 p9806@p9798 p9809@p? p9811@make-i/o-write-error p9813@i/o-write-error? p9815@&i/o-write-rtd p9817@&i/o-write-rcd p9824@p9819 p9826@p9821 p9828@p9820 p9831@p? p9833@make-i/o-invalid-position-error p9835@p9818@i/o-error-position p9837@i/o-invalid-position-error? p9839@i/o-error-position p9841@&i/o-invalid-position-rtd p9843@&i/o-invalid-position-rcd p9850@p9845 p9852@p9847 p9854@p9846 p9857@p? p9859@make-i/o-filename-error p9861@p9844@i/o-error-filename p9863@i/o-filename-error? p9865@i/o-error-filename p9867@&i/o-filename-rtd p9869@&i/o-filename-rcd p9875@p9870 p9877@p9872 p9879@p9871 p9882@p? p9884@make-i/o-file-protection-error p9886@i/o-file-protection-error? p9888@&i/o-file-protection-rtd p9890@&i/o-file-protection-rcd p9896@p9891 p9898@p9893 p9900@p9892 p9903@p? p9905@make-i/o-file-is-read-only-error p9907@i/o-file-is-read-only-error? p9909@&i/o-file-is-read-only-rtd p9911@&i/o-file-is-read-only-rcd p9917@p9912 p9919@p9914 p9921@p9913 p9924@p? p9926@make-i/o-file-already-exists-error p9928@i/o-file-already-exists-error? p9930@&i/o-file-already-exists-rtd p9932@&i/o-file-already-exists-rcd p9938@p9933 p9940@p9935 p9942@p9934 p9945@p? p9947@make-i/o-file-does-not-exist-error p9949@i/o-file-does-not-exist-error? p9951@&i/o-file-does-not-exist-rtd p9953@&i/o-file-does-not-exist-rcd p9960@p9955 p9962@p9957 p9964@p9956 p9967@p? p9969@make-i/o-port-error p9971@p9954@i/o-error-port p9973@i/o-port-error? p9975@i/o-error-port p9977@&i/o-port-rtd p9979@&i/o-port-rcd p9985@p9980 p9987@p9982 p9989@p9981 p9992@p? p9994@make-i/o-decoding-error p9996@i/o-decoding-error? p9998@&i/o-decoding-rtd p10000@&i/o-decoding-rcd p10007@p10002 p10009@p10004 p10011@p10003 p10014@p? p10016@make-i/o-encoding-error p10018@p10001@i/o-encoding-error-char p10020@i/o-encoding-error? p10022@i/o-encoding-error-char p10024@&i/o-encoding-rtd p10026@&i/o-encoding-rcd p10032@p10027 p10034@p10029 p10036@p10028 p10039@p? p10041@make-no-infinities-violation p10043@no-infinities-violation? p10045@&no-infinities-rtd p10047@&no-infinities-rcd p10053@p10048 p10055@p10050 p10057@p10049 p10060@p? p10062@make-no-nans-violation p10064@no-nans-violation? p10066@&no-nans-rtd p10068@&no-nans-rcd) (begin (set! p9378@p9373 (make-record-type-descriptor '&condition '#f 'p9376 '#f '#f '#())) (set! p9380@p9375 '#f) (set! p9382@p9374 (make-record-constructor-descriptor p9378@p9373 '#f p9380@p9375)) (set! p9385@&condition? (record-predicate p9378@p9373)) (set! p9387@make-&condition (record-constructor p9382@p9374)) (set! p9389@&condition-rtd p9378@p9373) (set! p9391@&condition-rcd p9382@p9374) (set! p9463@p9458 (make-record-type-descriptor '&message p9378@p9373 'p9461 '#f '#f '#((immutable message)))) (set! p9465@p9460 '#f) (set! p9467@p9459 (make-record-constructor-descriptor p9463@p9458 p9382@p9374 p9465@p9460)) (set! p9470@p? (record-predicate p9463@p9458)) (set! p9472@make-message-condition (record-constructor p9467@p9459)) (set! p9474@p9457@condition-message (record-accessor p9463@p9458 '0)) (set! p9476@message-condition? (condition-predicate p9463@p9458)) (set! p9478@condition-message (condition-accessor p9463@p9458 p9474@p9457@condition-message)) (set! p9480@&message-rtd p9463@p9458) (set! p9482@&message-rcd p9467@p9459) (set! p9488@p9483 (make-record-type-descriptor '&warning p9378@p9373 'p9486 '#f '#f '#())) (set! p9490@p9485 '#f) (set! p9492@p9484 (make-record-constructor-descriptor p9488@p9483 p9382@p9374 p9490@p9485)) (set! p9495@p? (record-predicate p9488@p9483)) (set! p9497@make-warning (record-constructor p9492@p9484)) (set! p9499@warning? (condition-predicate p9488@p9483)) (set! p9501@&warning-rtd p9488@p9483) (set! p9503@&warning-rcd p9492@p9484) (set! p9509@p9504 (make-record-type-descriptor '&serious p9378@p9373 'p9507 '#f '#f '#())) (set! p9511@p9506 '#f) (set! p9513@p9505 (make-record-constructor-descriptor p9509@p9504 p9382@p9374 p9511@p9506)) (set! p9516@p? (record-predicate p9509@p9504)) (set! p9518@make-serious-condition (record-constructor p9513@p9505)) (set! p9520@serious-condition? (condition-predicate p9509@p9504)) (set! p9522@&serious-rtd p9509@p9504) (set! p9524@&serious-rcd p9513@p9505) (set! p9530@p9525 (make-record-type-descriptor '&error p9509@p9504 'p9528 '#f '#f '#())) (set! p9532@p9527 '#f) (set! p9534@p9526 (make-record-constructor-descriptor p9530@p9525 p9513@p9505 p9532@p9527)) (set! p9537@p? (record-predicate p9530@p9525)) (set! p9539@make-error (record-constructor p9534@p9526)) (set! p9541@error? (condition-predicate p9530@p9525)) (set! p9543@&error-rtd p9530@p9525) (set! p9545@&error-rcd p9534@p9526) (set! p9551@p9546 (make-record-type-descriptor '&violation p9509@p9504 'p9549 '#f '#f '#())) (set! p9553@p9548 '#f) (set! p9555@p9547 (make-record-constructor-descriptor p9551@p9546 p9513@p9505 p9553@p9548)) (set! p9558@p? (record-predicate p9551@p9546)) (set! p9560@make-violation (record-constructor p9555@p9547)) (set! p9562@violation? (condition-predicate p9551@p9546)) (set! p9564@&violation-rtd p9551@p9546) (set! p9566@&violation-rcd p9555@p9547) (set! p9572@p9567 (make-record-type-descriptor '&assertion p9551@p9546 'p9570 '#f '#f '#())) (set! p9574@p9569 '#f) (set! p9576@p9568 (make-record-constructor-descriptor p9572@p9567 p9555@p9547 p9574@p9569)) (set! p9579@p? (record-predicate p9572@p9567)) (set! p9581@make-assertion-violation (record-constructor p9576@p9568)) (set! p9583@assertion-violation? (condition-predicate p9572@p9567)) (set! p9585@&assertion-rtd p9572@p9567) (set! p9587@&assertion-rcd p9576@p9568) (set! p9594@p9589 (make-record-type-descriptor '&irritants p9378@p9373 'p9592 '#f '#f '#((immutable irritants)))) (set! p9596@p9591 '#f) (set! p9598@p9590 (make-record-constructor-descriptor p9594@p9589 p9382@p9374 p9596@p9591)) (set! p9601@p? (record-predicate p9594@p9589)) (set! p9603@make-irritants-condition (record-constructor p9598@p9590)) (set! p9605@p9588@condition-irritants (record-accessor p9594@p9589 '0)) (set! p9607@irritants-condition? (condition-predicate p9594@p9589)) (set! p9609@condition-irritants (condition-accessor p9594@p9589 p9605@p9588@condition-irritants)) (set! p9611@&irritants-rtd p9594@p9589) (set! p9613@&irritants-rcd p9598@p9590) (set! p9620@p9615 (make-record-type-descriptor '&who p9378@p9373 'p9618 '#f '#f '#((immutable who)))) (set! p9622@p9617 '#f) (set! p9624@p9616 (make-record-constructor-descriptor p9620@p9615 p9382@p9374 p9622@p9617)) (set! p9627@p? (record-predicate p9620@p9615)) (set! p9629@make-who-condition (record-constructor p9624@p9616)) (set! p9631@p9614@condition-who (record-accessor p9620@p9615 '0)) (set! p9633@who-condition? (condition-predicate p9620@p9615)) (set! p9635@condition-who (condition-accessor p9620@p9615 p9631@p9614@condition-who)) (set! p9637@&who-rtd p9620@p9615) (set! p9639@&who-rcd p9624@p9616) (set! p9645@p9640 (make-record-type-descriptor '&non-continuable p9551@p9546 'p9643 '#f '#f '#())) (set! p9647@p9642 '#f) (set! p9649@p9641 (make-record-constructor-descriptor p9645@p9640 p9555@p9547 p9647@p9642)) (set! p9652@p? (record-predicate p9645@p9640)) (set! p9654@make-non-continuable-violation (record-constructor p9649@p9641)) (set! p9656@non-continuable-violation? (condition-predicate p9645@p9640)) (set! p9658@&non-continuable-rtd p9645@p9640) (set! p9660@&non-continuable-rcd p9649@p9641) (set! p9666@p9661 (make-record-type-descriptor '&implementation-restriction p9551@p9546 'p9664 '#f '#f '#())) (set! p9668@p9663 '#f) (set! p9670@p9662 (make-record-constructor-descriptor p9666@p9661 p9555@p9547 p9668@p9663)) (set! p9673@p? (record-predicate p9666@p9661)) (set! p9675@make-implementation-restriction-violation (record-constructor p9670@p9662)) (set! p9677@implementation-restriction-violation? (condition-predicate p9666@p9661)) (set! p9679@&implementation-restriction-rtd p9666@p9661) (set! p9681@&implementation-restriction-rcd p9670@p9662) (set! p9687@p9682 (make-record-type-descriptor '&lexical p9551@p9546 'p9685 '#f '#f '#())) (set! p9689@p9684 '#f) (set! p9691@p9683 (make-record-constructor-descriptor p9687@p9682 p9555@p9547 p9689@p9684)) (set! p9694@p? (record-predicate p9687@p9682)) (set! p9696@make-lexical-violation (record-constructor p9691@p9683)) (set! p9698@lexical-violation? (condition-predicate p9687@p9682)) (set! p9700@&lexical-rtd p9687@p9682) (set! p9702@&lexical-rcd p9691@p9683) (set! p9710@p9705 (make-record-type-descriptor '&syntax p9551@p9546 'p9708 '#f '#f '#((immutable form) (immutable subform)))) (set! p9712@p9707 '#f) (set! p9714@p9706 (make-record-constructor-descriptor p9710@p9705 p9555@p9547 p9712@p9707)) (set! p9717@p? (record-predicate p9710@p9705)) (set! p9719@make-syntax-violation (record-constructor p9714@p9706)) (set! p9721@p9703@syntax-violation-form (record-accessor p9710@p9705 '0)) (set! p9723@p9704@syntax-violation-subform (record-accessor p9710@p9705 '1)) (set! p9725@syntax-violation? (condition-predicate p9710@p9705)) (set! p9727@syntax-violation-form (condition-accessor p9710@p9705 p9721@p9703@syntax-violation-form)) (set! p9729@syntax-violation-subform (condition-accessor p9710@p9705 p9723@p9704@syntax-violation-subform)) (set! p9731@&syntax-rtd p9710@p9705) (set! p9733@&syntax-rcd p9714@p9706) (set! p9739@p9734 (make-record-type-descriptor '&undefined p9551@p9546 'p9737 '#f '#f '#())) (set! p9741@p9736 '#f) (set! p9743@p9735 (make-record-constructor-descriptor p9739@p9734 p9555@p9547 p9741@p9736)) (set! p9746@p? (record-predicate p9739@p9734)) (set! p9748@make-undefined-violation (record-constructor p9743@p9735)) (set! p9750@undefined-violation? (condition-predicate p9739@p9734)) (set! p9752@&undefined-rtd p9739@p9734) (set! p9754@&undefined-rcd p9743@p9735) (set! p9760@p9755 (make-record-type-descriptor '&i/o p9530@p9525 'p9758 '#f '#f '#())) (set! p9762@p9757 '#f) (set! p9764@p9756 (make-record-constructor-descriptor p9760@p9755 p9534@p9526 p9762@p9757)) (set! p9767@p? (record-predicate p9760@p9755)) (set! p9769@make-i/o-error (record-constructor p9764@p9756)) (set! p9771@i/o-error? (condition-predicate p9760@p9755)) (set! p9773@&i/o-rtd p9760@p9755) (set! p9775@&i/o-rcd p9764@p9756) (set! p9781@p9776 (make-record-type-descriptor '&i/o-read p9760@p9755 'p9779 '#f '#f '#())) (set! p9783@p9778 '#f) (set! p9785@p9777 (make-record-constructor-descriptor p9781@p9776 p9764@p9756 p9783@p9778)) (set! p9788@p? (record-predicate p9781@p9776)) (set! p9790@make-i/o-read-error (record-constructor p9785@p9777)) (set! p9792@i/o-read-error? (condition-predicate p9781@p9776)) (set! p9794@&i/o-read-rtd p9781@p9776) (set! p9796@&i/o-read-rcd p9785@p9777) (set! p9802@p9797 (make-record-type-descriptor '&i/o-write p9760@p9755 'p9800 '#f '#f '#())) (set! p9804@p9799 '#f) (set! p9806@p9798 (make-record-constructor-descriptor p9802@p9797 p9764@p9756 p9804@p9799)) (set! p9809@p? (record-predicate p9802@p9797)) (set! p9811@make-i/o-write-error (record-constructor p9806@p9798)) (set! p9813@i/o-write-error? (condition-predicate p9802@p9797)) (set! p9815@&i/o-write-rtd p9802@p9797) (set! p9817@&i/o-write-rcd p9806@p9798) (set! p9824@p9819 (make-record-type-descriptor '&i/o-invalid-position p9760@p9755 'p9822 '#f '#f '#((immutable position)))) (set! p9826@p9821 '#f) (set! p9828@p9820 (make-record-constructor-descriptor p9824@p9819 p9764@p9756 p9826@p9821)) (set! p9831@p? (record-predicate p9824@p9819)) (set! p9833@make-i/o-invalid-position-error (record-constructor p9828@p9820)) (set! p9835@p9818@i/o-error-position (record-accessor p9824@p9819 '0)) (set! p9837@i/o-invalid-position-error? (condition-predicate p9824@p9819)) (set! p9839@i/o-error-position (condition-accessor p9824@p9819 p9835@p9818@i/o-error-position)) (set! p9841@&i/o-invalid-position-rtd p9824@p9819) (set! p9843@&i/o-invalid-position-rcd p9828@p9820) (set! p9850@p9845 (make-record-type-descriptor '&i/o-filename p9760@p9755 'p9848 '#f '#f '#((immutable filename)))) (set! p9852@p9847 '#f) (set! p9854@p9846 (make-record-constructor-descriptor p9850@p9845 p9764@p9756 p9852@p9847)) (set! p9857@p? (record-predicate p9850@p9845)) (set! p9859@make-i/o-filename-error (record-constructor p9854@p9846)) (set! p9861@p9844@i/o-error-filename (record-accessor p9850@p9845 '0)) (set! p9863@i/o-filename-error? (condition-predicate p9850@p9845)) (set! p9865@i/o-error-filename (condition-accessor p9850@p9845 p9861@p9844@i/o-error-filename)) (set! p9867@&i/o-filename-rtd p9850@p9845) (set! p9869@&i/o-filename-rcd p9854@p9846) (set! p9875@p9870 (make-record-type-descriptor '&i/o-file-protection p9850@p9845 'p9873 '#f '#f '#())) (set! p9877@p9872 '#f) (set! p9879@p9871 (make-record-constructor-descriptor p9875@p9870 p9854@p9846 p9877@p9872)) (set! p9882@p? (record-predicate p9875@p9870)) (set! p9884@make-i/o-file-protection-error (record-constructor p9879@p9871)) (set! p9886@i/o-file-protection-error? (condition-predicate p9875@p9870)) (set! p9888@&i/o-file-protection-rtd p9875@p9870) (set! p9890@&i/o-file-protection-rcd p9879@p9871) (set! p9896@p9891 (make-record-type-descriptor '&i/o-file-is-read-only p9875@p9870 'p9894 '#f '#f '#())) (set! p9898@p9893 '#f) (set! p9900@p9892 (make-record-constructor-descriptor p9896@p9891 p9879@p9871 p9898@p9893)) (set! p9903@p? (record-predicate p9896@p9891)) (set! p9905@make-i/o-file-is-read-only-error (record-constructor p9900@p9892)) (set! p9907@i/o-file-is-read-only-error? (condition-predicate p9896@p9891)) (set! p9909@&i/o-file-is-read-only-rtd p9896@p9891) (set! p9911@&i/o-file-is-read-only-rcd p9900@p9892) (set! p9917@p9912 (make-record-type-descriptor '&i/o-file-already-exists p9850@p9845 'p9915 '#f '#f '#())) (set! p9919@p9914 '#f) (set! p9921@p9913 (make-record-constructor-descriptor p9917@p9912 p9854@p9846 p9919@p9914)) (set! p9924@p? (record-predicate p9917@p9912)) (set! p9926@make-i/o-file-already-exists-error (record-constructor p9921@p9913)) (set! p9928@i/o-file-already-exists-error? (condition-predicate p9917@p9912)) (set! p9930@&i/o-file-already-exists-rtd p9917@p9912) (set! p9932@&i/o-file-already-exists-rcd p9921@p9913) (set! p9938@p9933 (make-record-type-descriptor '&i/o-file-does-not-exist p9850@p9845 'p9936 '#f '#f '#())) (set! p9940@p9935 '#f) (set! p9942@p9934 (make-record-constructor-descriptor p9938@p9933 p9854@p9846 p9940@p9935)) (set! p9945@p? (record-predicate p9938@p9933)) (set! p9947@make-i/o-file-does-not-exist-error (record-constructor p9942@p9934)) (set! p9949@i/o-file-does-not-exist-error? (condition-predicate p9938@p9933)) (set! p9951@&i/o-file-does-not-exist-rtd p9938@p9933) (set! p9953@&i/o-file-does-not-exist-rcd p9942@p9934) (set! p9960@p9955 (make-record-type-descriptor '&i/o-port p9760@p9755 'p9958 '#f '#f '#((immutable port)))) (set! p9962@p9957 '#f) (set! p9964@p9956 (make-record-constructor-descriptor p9960@p9955 p9764@p9756 p9962@p9957)) (set! p9967@p? (record-predicate p9960@p9955)) (set! p9969@make-i/o-port-error (record-constructor p9964@p9956)) (set! p9971@p9954@i/o-error-port (record-accessor p9960@p9955 '0)) (set! p9973@i/o-port-error? (condition-predicate p9960@p9955)) (set! p9975@i/o-error-port (condition-accessor p9960@p9955 p9971@p9954@i/o-error-port)) (set! p9977@&i/o-port-rtd p9960@p9955) (set! p9979@&i/o-port-rcd p9964@p9956) (set! p9985@p9980 (make-record-type-descriptor '&i/o-decoding p9960@p9955 'p9983 '#f '#f '#())) (set! p9987@p9982 '#f) (set! p9989@p9981 (make-record-constructor-descriptor p9985@p9980 p9964@p9956 p9987@p9982)) (set! p9992@p? (record-predicate p9985@p9980)) (set! p9994@make-i/o-decoding-error (record-constructor p9989@p9981)) (set! p9996@i/o-decoding-error? (condition-predicate p9985@p9980)) (set! p9998@&i/o-decoding-rtd p9985@p9980) (set! p10000@&i/o-decoding-rcd p9989@p9981) (set! p10007@p10002 (make-record-type-descriptor '&i/o-encoding p9960@p9955 'p10005 '#f '#f '#((immutable char)))) (set! p10009@p10004 '#f) (set! p10011@p10003 (make-record-constructor-descriptor p10007@p10002 p9964@p9956 p10009@p10004)) (set! p10014@p? (record-predicate p10007@p10002)) (set! p10016@make-i/o-encoding-error (record-constructor p10011@p10003)) (set! p10018@p10001@i/o-encoding-error-char (record-accessor p10007@p10002 '0)) (set! p10020@i/o-encoding-error? (condition-predicate p10007@p10002)) (set! p10022@i/o-encoding-error-char (condition-accessor p10007@p10002 p10018@p10001@i/o-encoding-error-char)) (set! p10024@&i/o-encoding-rtd p10007@p10002) (set! p10026@&i/o-encoding-rcd p10011@p10003) (set! p10032@p10027 (make-record-type-descriptor '&no-infinities p9666@p9661 'p10030 '#f '#f '#())) (set! p10034@p10029 '#f) (set! p10036@p10028 (make-record-constructor-descriptor p10032@p10027 p9670@p9662 p10034@p10029)) (set! p10039@p? (record-predicate p10032@p10027)) (set! p10041@make-no-infinities-violation (record-constructor p10036@p10028)) (set! p10043@no-infinities-violation? (condition-predicate p10032@p10027)) (set! p10045@&no-infinities-rtd p10032@p10027) (set! p10047@&no-infinities-rcd p10036@p10028) (set! p10053@p10048 (make-record-type-descriptor '&no-nans p9666@p9661 'p10051 '#f '#f '#())) (set! p10055@p10050 '#f) (set! p10057@p10049 (make-record-constructor-descriptor p10053@p10048 p9670@p9662 p10055@p10050)) (set! p10060@p? (record-predicate p10053@p10048)) (set! p10062@make-no-nans-violation (record-constructor p10057@p10049)) (set! p10064@no-nans-violation? (condition-predicate p10053@p10048)) (set! p10066@&no-nans-rtd p10053@p10048) (set! p10068@&no-nans-rcd p10057@p10049) (begin (set! p10309@p10068@&no-nans-rcd p10068@&no-nans-rcd) (set! p10308@p10066@&no-nans-rtd p10066@&no-nans-rtd) (set! p10307@p10064@no-nans-violation? p10064@no-nans-violation?) (set! p10306@p10062@make-no-nans-violation p10062@make-no-nans-violation) (set! p10305@p10060@p? p10060@p?) (set! p10304@p10057@p10049 p10057@p10049) (set! p10303@p10055@p10050 p10055@p10050) (set! p10302@p10053@p10048 p10053@p10048) (set! p10301@p10047@&no-infinities-rcd p10047@&no-infinities-rcd) (set! p10300@p10045@&no-infinities-rtd p10045@&no-infinities-rtd) (set! p10299@p10043@no-infinities-violation? p10043@no-infinities-violation?) (set! p10298@p10041@make-no-infinities-violation p10041@make-no-infinities-violation) (set! p10297@p10039@p? p10039@p?) (set! p10296@p10036@p10028 p10036@p10028) (set! p10295@p10034@p10029 p10034@p10029) (set! p10294@p10032@p10027 p10032@p10027) (set! p10293@p10026@&i/o-encoding-rcd p10026@&i/o-encoding-rcd) (set! p10292@p10024@&i/o-encoding-rtd p10024@&i/o-encoding-rtd) (set! p10291@p10022@i/o-encoding-error-char p10022@i/o-encoding-error-char) (set! p10290@p10020@i/o-encoding-error? p10020@i/o-encoding-error?) (set! p10289@p10018@p10001@i/o-encoding-error-char p10018@p10001@i/o-encoding-error-char) (set! p10288@p10016@make-i/o-encoding-error p10016@make-i/o-encoding-error) (set! p10287@p10014@p? p10014@p?) (set! p10286@p10011@p10003 p10011@p10003) (set! p10285@p10009@p10004 p10009@p10004) (set! p10284@p10007@p10002 p10007@p10002) (set! p10283@p10000@&i/o-decoding-rcd p10000@&i/o-decoding-rcd) (set! p10282@p9998@&i/o-decoding-rtd p9998@&i/o-decoding-rtd) (set! p10281@p9996@i/o-decoding-error? p9996@i/o-decoding-error?) (set! p10280@p9994@make-i/o-decoding-error p9994@make-i/o-decoding-error) (set! p10279@p9992@p? p9992@p?) (set! p10278@p9989@p9981 p9989@p9981) (set! p10277@p9987@p9982 p9987@p9982) (set! p10276@p9985@p9980 p9985@p9980) (set! p10275@p9979@&i/o-port-rcd p9979@&i/o-port-rcd) (set! p10274@p9977@&i/o-port-rtd p9977@&i/o-port-rtd) (set! p10273@p9975@i/o-error-port p9975@i/o-error-port) (set! p10272@p9973@i/o-port-error? p9973@i/o-port-error?) (set! p10271@p9971@p9954@i/o-error-port p9971@p9954@i/o-error-port) (set! p10270@p9969@make-i/o-port-error p9969@make-i/o-port-error) (set! p10269@p9967@p? p9967@p?) (set! p10268@p9964@p9956 p9964@p9956) (set! p10267@p9962@p9957 p9962@p9957) (set! p10266@p9960@p9955 p9960@p9955) (set! p10265@p9953@&i/o-file-does-not-exist-rcd p9953@&i/o-file-does-not-exist-rcd) (set! p10264@p9951@&i/o-file-does-not-exist-rtd p9951@&i/o-file-does-not-exist-rtd) (set! p10263@p9949@i/o-file-does-not-exist-error? p9949@i/o-file-does-not-exist-error?) (set! p10262@p9947@make-i/o-file-does-not-exist-error p9947@make-i/o-file-does-not-exist-error) (set! p10261@p9945@p? p9945@p?) (set! p10260@p9942@p9934 p9942@p9934) (set! p10259@p9940@p9935 p9940@p9935) (set! p10258@p9938@p9933 p9938@p9933) (set! p10257@p9932@&i/o-file-already-exists-rcd p9932@&i/o-file-already-exists-rcd) (set! p10256@p9930@&i/o-file-already-exists-rtd p9930@&i/o-file-already-exists-rtd) (set! p10255@p9928@i/o-file-already-exists-error? p9928@i/o-file-already-exists-error?) (set! p10254@p9926@make-i/o-file-already-exists-error p9926@make-i/o-file-already-exists-error) (set! p10253@p9924@p? p9924@p?) (set! p10252@p9921@p9913 p9921@p9913) (set! p10251@p9919@p9914 p9919@p9914) (set! p10250@p9917@p9912 p9917@p9912) (set! p10249@p9911@&i/o-file-is-read-only-rcd p9911@&i/o-file-is-read-only-rcd) (set! p10248@p9909@&i/o-file-is-read-only-rtd p9909@&i/o-file-is-read-only-rtd) (set! p10247@p9907@i/o-file-is-read-only-error? p9907@i/o-file-is-read-only-error?) (set! p10246@p9905@make-i/o-file-is-read-only-error p9905@make-i/o-file-is-read-only-error) (set! p10245@p9903@p? p9903@p?) (set! p10244@p9900@p9892 p9900@p9892) (set! p10243@p9898@p9893 p9898@p9893) (set! p10242@p9896@p9891 p9896@p9891) (set! p10241@p9890@&i/o-file-protection-rcd p9890@&i/o-file-protection-rcd) (set! p10240@p9888@&i/o-file-protection-rtd p9888@&i/o-file-protection-rtd) (set! p10239@p9886@i/o-file-protection-error? p9886@i/o-file-protection-error?) (set! p10238@p9884@make-i/o-file-protection-error p9884@make-i/o-file-protection-error) (set! p10237@p9882@p? p9882@p?) (set! p10236@p9879@p9871 p9879@p9871) (set! p10235@p9877@p9872 p9877@p9872) (set! p10234@p9875@p9870 p9875@p9870) (set! p10233@p9869@&i/o-filename-rcd p9869@&i/o-filename-rcd) (set! p10232@p9867@&i/o-filename-rtd p9867@&i/o-filename-rtd) (set! p10231@p9865@i/o-error-filename p9865@i/o-error-filename) (set! p10230@p9863@i/o-filename-error? p9863@i/o-filename-error?) (set! p10229@p9861@p9844@i/o-error-filename p9861@p9844@i/o-error-filename) (set! p10228@p9859@make-i/o-filename-error p9859@make-i/o-filename-error) (set! p10227@p9857@p? p9857@p?) (set! p10226@p9854@p9846 p9854@p9846) (set! p10225@p9852@p9847 p9852@p9847) (set! p10224@p9850@p9845 p9850@p9845) (set! p10223@p9843@&i/o-invalid-position-rcd p9843@&i/o-invalid-position-rcd) (set! p10222@p9841@&i/o-invalid-position-rtd p9841@&i/o-invalid-position-rtd) (set! p10221@p9839@i/o-error-position p9839@i/o-error-position) (set! p10220@p9837@i/o-invalid-position-error? p9837@i/o-invalid-position-error?) (set! p10219@p9835@p9818@i/o-error-position p9835@p9818@i/o-error-position) (set! p10218@p9833@make-i/o-invalid-position-error p9833@make-i/o-invalid-position-error) (set! p10217@p9831@p? p9831@p?) (set! p10216@p9828@p9820 p9828@p9820) (set! p10215@p9826@p9821 p9826@p9821) (set! p10214@p9824@p9819 p9824@p9819) (set! p10213@p9817@&i/o-write-rcd p9817@&i/o-write-rcd) (set! p10212@p9815@&i/o-write-rtd p9815@&i/o-write-rtd) (set! p10211@p9813@i/o-write-error? p9813@i/o-write-error?) (set! p10210@p9811@make-i/o-write-error p9811@make-i/o-write-error) (set! p10209@p9809@p? p9809@p?) (set! p10208@p9806@p9798 p9806@p9798) (set! p10207@p9804@p9799 p9804@p9799) (set! p10206@p9802@p9797 p9802@p9797) (set! p10205@p9796@&i/o-read-rcd p9796@&i/o-read-rcd) (set! p10204@p9794@&i/o-read-rtd p9794@&i/o-read-rtd) (set! p10203@p9792@i/o-read-error? p9792@i/o-read-error?) (set! p10202@p9790@make-i/o-read-error p9790@make-i/o-read-error) (set! p10201@p9788@p? p9788@p?) (set! p10200@p9785@p9777 p9785@p9777) (set! p10199@p9783@p9778 p9783@p9778) (set! p10198@p9781@p9776 p9781@p9776) (set! p10197@p9775@&i/o-rcd p9775@&i/o-rcd) (set! p10196@p9773@&i/o-rtd p9773@&i/o-rtd) (set! p10195@p9771@i/o-error? p9771@i/o-error?) (set! p10194@p9769@make-i/o-error p9769@make-i/o-error) (set! p10193@p9767@p? p9767@p?) (set! p10192@p9764@p9756 p9764@p9756) (set! p10191@p9762@p9757 p9762@p9757) (set! p10190@p9760@p9755 p9760@p9755) (set! p10189@p9754@&undefined-rcd p9754@&undefined-rcd) (set! p10188@p9752@&undefined-rtd p9752@&undefined-rtd) (set! p10187@p9750@undefined-violation? p9750@undefined-violation?) (set! p10186@p9748@make-undefined-violation p9748@make-undefined-violation) (set! p10185@p9746@p? p9746@p?) (set! p10184@p9743@p9735 p9743@p9735) (set! p10183@p9741@p9736 p9741@p9736) (set! p10182@p9739@p9734 p9739@p9734) (set! p10181@p9733@&syntax-rcd p9733@&syntax-rcd) (set! p10180@p9731@&syntax-rtd p9731@&syntax-rtd) (set! p10179@p9729@syntax-violation-subform p9729@syntax-violation-subform) (set! p10178@p9727@syntax-violation-form p9727@syntax-violation-form) (set! p10177@p9725@syntax-violation? p9725@syntax-violation?) (set! p10176@p9723@p9704@syntax-violation-subform p9723@p9704@syntax-violation-subform) (set! p10175@p9721@p9703@syntax-violation-form p9721@p9703@syntax-violation-form) (set! p10174@p9719@make-syntax-violation p9719@make-syntax-violation) (set! p10173@p9717@p? p9717@p?) (set! p10172@p9714@p9706 p9714@p9706) (set! p10171@p9712@p9707 p9712@p9707) (set! p10170@p9710@p9705 p9710@p9705) (set! p10169@p9702@&lexical-rcd p9702@&lexical-rcd) (set! p10168@p9700@&lexical-rtd p9700@&lexical-rtd) (set! p10167@p9698@lexical-violation? p9698@lexical-violation?) (set! p10166@p9696@make-lexical-violation p9696@make-lexical-violation) (set! p10165@p9694@p? p9694@p?) (set! p10164@p9691@p9683 p9691@p9683) (set! p10163@p9689@p9684 p9689@p9684) (set! p10162@p9687@p9682 p9687@p9682) (set! p10161@p9681@&implementation-restriction-rcd p9681@&implementation-restriction-rcd) (set! p10160@p9679@&implementation-restriction-rtd p9679@&implementation-restriction-rtd) (set! p10159@p9677@implementation-restriction-violation? p9677@implementation-restriction-violation?) (set! p10158@p9675@make-implementation-restriction-violation p9675@make-implementation-restriction-violation) (set! p10157@p9673@p? p9673@p?) (set! p10156@p9670@p9662 p9670@p9662) (set! p10155@p9668@p9663 p9668@p9663) (set! p10154@p9666@p9661 p9666@p9661) (set! p10153@p9660@&non-continuable-rcd p9660@&non-continuable-rcd) (set! p10152@p9658@&non-continuable-rtd p9658@&non-continuable-rtd) (set! p10151@p9656@non-continuable-violation? p9656@non-continuable-violation?) (set! p10150@p9654@make-non-continuable-violation p9654@make-non-continuable-violation) (set! p10149@p9652@p? p9652@p?) (set! p10148@p9649@p9641 p9649@p9641) (set! p10147@p9647@p9642 p9647@p9642) (set! p10146@p9645@p9640 p9645@p9640) (set! p10145@p9639@&who-rcd p9639@&who-rcd) (set! p10144@p9637@&who-rtd p9637@&who-rtd) (set! p10143@p9635@condition-who p9635@condition-who) (set! p10142@p9633@who-condition? p9633@who-condition?) (set! p10141@p9631@p9614@condition-who p9631@p9614@condition-who) (set! p10140@p9629@make-who-condition p9629@make-who-condition) (set! p10139@p9627@p? p9627@p?) (set! p10138@p9624@p9616 p9624@p9616) (set! p10137@p9622@p9617 p9622@p9617) (set! p10136@p9620@p9615 p9620@p9615) (set! p10135@p9613@&irritants-rcd p9613@&irritants-rcd) (set! p10134@p9611@&irritants-rtd p9611@&irritants-rtd) (set! p10133@p9609@condition-irritants p9609@condition-irritants) (set! p10132@p9607@irritants-condition? p9607@irritants-condition?) (set! p10131@p9605@p9588@condition-irritants p9605@p9588@condition-irritants) (set! p10130@p9603@make-irritants-condition p9603@make-irritants-condition) (set! p10129@p9601@p? p9601@p?) (set! p10128@p9598@p9590 p9598@p9590) (set! p10127@p9596@p9591 p9596@p9591) (set! p10126@p9594@p9589 p9594@p9589) (set! p10125@p9587@&assertion-rcd p9587@&assertion-rcd) (set! p10124@p9585@&assertion-rtd p9585@&assertion-rtd) (set! p10123@p9583@assertion-violation? p9583@assertion-violation?) (set! p10122@p9581@make-assertion-violation p9581@make-assertion-violation) (set! p10121@p9579@p? p9579@p?) (set! p10120@p9576@p9568 p9576@p9568) (set! p10119@p9574@p9569 p9574@p9569) (set! p10118@p9572@p9567 p9572@p9567) (set! p10117@p9566@&violation-rcd p9566@&violation-rcd) (set! p10116@p9564@&violation-rtd p9564@&violation-rtd) (set! p10115@p9562@violation? p9562@violation?) (set! p10114@p9560@make-violation p9560@make-violation) (set! p10113@p9558@p? p9558@p?) (set! p10112@p9555@p9547 p9555@p9547) (set! p10111@p9553@p9548 p9553@p9548) (set! p10110@p9551@p9546 p9551@p9546) (set! p10109@p9545@&error-rcd p9545@&error-rcd) (set! p10108@p9543@&error-rtd p9543@&error-rtd) (set! p10107@p9541@error? p9541@error?) (set! p10106@p9539@make-error p9539@make-error) (set! p10105@p9537@p? p9537@p?) (set! p10104@p9534@p9526 p9534@p9526) (set! p10103@p9532@p9527 p9532@p9527) (set! p10102@p9530@p9525 p9530@p9525) (set! p10101@p9524@&serious-rcd p9524@&serious-rcd) (set! p10100@p9522@&serious-rtd p9522@&serious-rtd) (set! p10099@p9520@serious-condition? p9520@serious-condition?) (set! p10098@p9518@make-serious-condition p9518@make-serious-condition) (set! p10097@p9516@p? p9516@p?) (set! p10096@p9513@p9505 p9513@p9505) (set! p10095@p9511@p9506 p9511@p9506) (set! p10094@p9509@p9504 p9509@p9504) (set! p10093@p9503@&warning-rcd p9503@&warning-rcd) (set! p10092@p9501@&warning-rtd p9501@&warning-rtd) (set! p10091@p9499@warning? p9499@warning?) (set! p10090@p9497@make-warning p9497@make-warning) (set! p10089@p9495@p? p9495@p?) (set! p10088@p9492@p9484 p9492@p9484) (set! p10087@p9490@p9485 p9490@p9485) (set! p10086@p9488@p9483 p9488@p9483) (set! p10085@p9482@&message-rcd p9482@&message-rcd) (set! p10084@p9480@&message-rtd p9480@&message-rtd) (set! p10083@p9478@condition-message p9478@condition-message) (set! p10082@p9476@message-condition? p9476@message-condition?) (set! p10081@p9474@p9457@condition-message p9474@p9457@condition-message) (set! p10080@p9472@make-message-condition p9472@make-message-condition) (set! p10079@p9470@p? p9470@p?) (set! p10078@p9467@p9459 p9467@p9459) (set! p10077@p9465@p9460 p9465@p9460) (set! p10076@p9463@p9458 p9463@p9458) (set! p10075@p9391@&condition-rcd p9391@&condition-rcd) (set! p10074@p9389@&condition-rtd p9389@&condition-rtd) (set! p10073@p9387@make-&condition p9387@make-&condition) (set! p10072@p9385@&condition? p9385@&condition?) (set! p10071@p9382@p9374 p9382@p9374) (set! p10070@p9380@p9375 p9380@p9375) (set! p10069@p9378@p9373 p9378@p9373)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (p1247@p1172@current-primitive-locations (lambda (p11325@x) ((lambda (p11327@t) (if p11327@t (cdr p11327@t) '#f)) (assq p11325@x '((&no-nans-rcd . p10309@p10068@&no-nans-rcd) (&no-nans-rtd . p10308@p10066@&no-nans-rtd) (&no-infinities-rcd . p10301@p10047@&no-infinities-rcd) (&no-infinities-rtd . p10300@p10045@&no-infinities-rtd) (&i/o-encoding-rcd . p10293@p10026@&i/o-encoding-rcd) (&i/o-encoding-rtd . p10292@p10024@&i/o-encoding-rtd) (&i/o-decoding-rcd . p10283@p10000@&i/o-decoding-rcd) (&i/o-decoding-rtd . p10282@p9998@&i/o-decoding-rtd) (&i/o-port-rcd . p10275@p9979@&i/o-port-rcd) (&i/o-port-rtd . p10274@p9977@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . p10265@p9953@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . p10264@p9951@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . p10257@p9932@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . p10256@p9930@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . p10249@p9911@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . p10248@p9909@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . p10241@p9890@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . p10240@p9888@&i/o-file-protection-rtd) (&i/o-filename-rcd . p10233@p9869@&i/o-filename-rcd) (&i/o-filename-rtd . p10232@p9867@&i/o-filename-rtd) (&i/o-invalid-position-rcd . p10223@p9843@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . p10222@p9841@&i/o-invalid-position-rtd) (&i/o-write-rcd . p10213@p9817@&i/o-write-rcd) (&i/o-write-rtd . p10212@p9815@&i/o-write-rtd) (&i/o-read-rcd . p10205@p9796@&i/o-read-rcd) (&i/o-read-rtd . p10204@p9794@&i/o-read-rtd) (&i/o-rcd . p10197@p9775@&i/o-rcd) (&i/o-rtd . p10196@p9773@&i/o-rtd) (&undefined-rcd . p10189@p9754@&undefined-rcd) (&undefined-rtd . p10188@p9752@&undefined-rtd) (&syntax-rcd . p10181@p9733@&syntax-rcd) (&syntax-rtd . p10180@p9731@&syntax-rtd) (&lexical-rcd . p10169@p9702@&lexical-rcd) (&lexical-rtd . p10168@p9700@&lexical-rtd) (&implementation-restriction-rcd . p10161@p9681@&implementation-restriction-rcd) (&implementation-restriction-rtd . p10160@p9679@&implementation-restriction-rtd) (&non-continuable-rcd . p10153@p9660@&non-continuable-rcd) (&non-continuable-rtd . p10152@p9658@&non-continuable-rtd) (&who-rcd . p10145@p9639@&who-rcd) (&who-rtd . p10144@p9637@&who-rtd) (&irritants-rcd . p10135@p9613@&irritants-rcd) (&irritants-rtd . p10134@p9611@&irritants-rtd) (&assertion-rcd . p10125@p9587@&assertion-rcd) (&assertion-rtd . p10124@p9585@&assertion-rtd) (&violation-rcd . p10117@p9566@&violation-rcd) (&violation-rtd . p10116@p9564@&violation-rtd) (&error-rcd . p10109@p9545@&error-rcd) (&error-rtd . p10108@p9543@&error-rtd) (&serious-rcd . p10101@p9524@&serious-rcd) (&serious-rtd . p10100@p9522@&serious-rtd) (&warning-rcd . p10093@p9503@&warning-rcd) (&warning-rtd . p10092@p9501@&warning-rtd) (&message-rcd . p10085@p9482@&message-rcd) (&message-rtd . p10084@p9480@&message-rtd) (&condition-rcd . p10075@p9391@&condition-rcd) (&condition-rtd . p10074@p9389@&condition-rtd) (syntax-error . p9359@p2994@syntax-error) (syntax-dispatch . p9252@p2765@syntax-dispatch) (gensym . p1152@p916@gensym) (load . p10572@p10337@load) (interaction-environment . p9367@p3010@interaction-environment) (library-path . p1776@p1413@library-path) (make-parameter . p1166@p944@make-parameter) (make-variable-transformer . p9186@p2324@make-variable-transformer) (identifier? . p9362@p3000@identifier?) (generate-temporaries . p9352@p2980@generate-temporaries) (free-identifier=? . p9353@p2982@free-identifier=?) (syntax->datum . p9364@p3004@syntax->datum) (datum->syntax . p9363@p3002@datum->syntax) (bound-identifier=? . p9354@p2984@bound-identifier=?) (make-i/o-write-error . p10210@p9811@make-i/o-write-error) (make-i/o-read-error . p10202@p9790@make-i/o-read-error) (make-i/o-port-error . p10270@p9969@make-i/o-port-error) (make-i/o-invalid-position-error . p10218@p9833@make-i/o-invalid-position-error) (make-i/o-filename-error . p10228@p9859@make-i/o-filename-error) (make-i/o-file-protection-error . p10238@p9884@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . p10246@p9905@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . p10262@p9947@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . p10254@p9926@make-i/o-file-already-exists-error) (make-i/o-error . p10194@p9769@make-i/o-error) (make-i/o-encoding-error . p10288@p10016@make-i/o-encoding-error) (make-i/o-decoding-error . p10280@p9994@make-i/o-decoding-error) (i/o-write-error? . p10211@p9813@i/o-write-error?) (i/o-read-error? . p10203@p9792@i/o-read-error?) (i/o-port-error? . p10272@p9973@i/o-port-error?) (i/o-invalid-position-error? . p10220@p9837@i/o-invalid-position-error?) (i/o-filename-error? . p10230@p9863@i/o-filename-error?) (i/o-file-protection-error? . p10239@p9886@i/o-file-protection-error?) (i/o-file-is-read-only-error? . p10247@p9907@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . p10263@p9949@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . p10255@p9928@i/o-file-already-exists-error?) (i/o-error? . p10195@p9771@i/o-error?) (i/o-error-position . p10221@p9839@i/o-error-position) (i/o-error-port . p10273@p9975@i/o-error-port) (i/o-error-filename . p10231@p9865@i/o-error-filename) (i/o-encoding-error? . p10290@p10020@i/o-encoding-error?) (i/o-encoding-error-char . p10291@p10022@i/o-encoding-error-char) (i/o-decoding-error? . p10281@p9996@i/o-decoding-error?) (scheme-report-environment . p9343@p2962@scheme-report-environment) (null-environment . p9342@p2960@null-environment) (command-line . p10569@p10331@command-line) (eval . p9345@p2966@eval) (environment . p9341@p2958@environment) (who-condition? . p10142@p9633@who-condition?) (warning? . p10091@p9499@warning?) (violation? . p10115@p9562@violation?) (undefined-violation? . p10187@p9750@undefined-violation?) (syntax-violation? . p10177@p9725@syntax-violation?) (syntax-violation-subform . p10179@p9729@syntax-violation-subform) (syntax-violation-form . p10178@p9727@syntax-violation-form) (syntax-violation . p9361@p2998@syntax-violation) (serious-condition? . p10099@p9520@serious-condition?) (non-continuable-violation? . p10151@p9656@non-continuable-violation?) (message-condition? . p10082@p9476@message-condition?) (make-who-condition . p10140@p9629@make-who-condition) (make-warning . p10090@p9497@make-warning) (make-violation . p10114@p9560@make-violation) (make-undefined-violation . p10186@p9748@make-undefined-violation) (make-syntax-violation . p10174@p9719@make-syntax-violation) (make-serious-condition . p10098@p9518@make-serious-condition) (make-non-continuable-violation . p10150@p9654@make-non-continuable-violation) (make-message-condition . p10080@p9472@make-message-condition) (make-lexical-violation . p10166@p9696@make-lexical-violation) (make-irritants-condition . p10130@p9603@make-irritants-condition) (make-implementation-restriction-violation . p10158@p9675@make-implementation-restriction-violation) (make-error . p10106@p9539@make-error) (make-assertion-violation . p10122@p9581@make-assertion-violation) (lexical-violation? . p10167@p9698@lexical-violation?) (irritants-condition? . p10132@p9607@irritants-condition?) (implementation-restriction-violation? . p10159@p9677@implementation-restriction-violation?) (error? . p10107@p9541@error?) (condition-who . p10143@p9635@condition-who) (condition-message . p10083@p9478@condition-message) (condition-irritants . p10133@p9609@condition-irritants) (assertion-violation? . p10123@p9583@assertion-violation?) (no-nans-violation? . p10307@p10064@no-nans-violation?) (no-infinities-violation? . p10299@p10043@no-infinities-violation?) (make-no-nans-violation . p10306@p10062@make-no-nans-violation) (make-no-infinities-violation . p10298@p10041@make-no-infinities-violation) (assertion-error . p9358@p2992@assertion-error)))))) (p1792@p1445@install-library 'p11290 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . p11280) (format . p11277) (string-split . p11266) (call-process . p11260) (set-current-directory! . p11256) (expand-path . p11255) (current-directory . p11254) (%spawn . p11253) (%waitpid . p11252) (%ffi-supported? . p11251) (%ffi-pointer-ref . p11250) (%ffi-pointer->string . p11249) (%ffi-call->string-or-zero . p11248) (%ffi-call->double . p11247) (%ffi-call->void* . p11246) (%ffi-call->void . p11245) (%ffi-call->int . p11244) (%ffi-lookup . p11243) (%ffi-open . p11242) (%fork . p11241) (%pipe . p11240) (p . p11239) (string-upcase . p11218) (string-titlecase . p11217) (string-normalize-nfkd . p11216) (string-normalize-nfkc . p11215) (string-normalize-nfd . p11214) (string-normalize-nfc . p11213) (string-foldcase . p11212) (string-downcase . p11211) (string-ci>? . p11210) (string-ci>=? . p11209) (string-ci=? . p11208) (string-ci<? . p11207) (string-ci<=? . p11206) (char-whitespace? . p11205) (char-upper-case? . p11204) (char-title-case? . p11203) (char-numeric? . p11202) (char-lower-case? . p11201) (char-general-category . p11200) (char-upcase . p11199) (char-titlecase . p11198) (char-foldcase . p11197) (char-downcase . p11196) (char-ci>? . p11195) (char-ci>=? . p11194) (char-ci=? . p11193) (char-ci<? . p11192) (char-ci<=? . p11191) (char-alphabetic? . p11190) (make-variable-transformer . p2323) (identifier? . p2999) (generate-temporaries . p2979) (free-identifier=? . p2981) (syntax->datum . p3003) (datum->syntax . p3001) (bound-identifier=? . p2983) (record-type-descriptor? . p11189) (record-predicate . p11188) (record-mutator . p11187) (record-constructor . p11186) (record-accessor . p11185) (make-record-type-descriptor . p11184) (make-record-constructor-descriptor . p11183) (record? . p11182) (record-type-uid . p11181) (record-type-sealed? . p11180) (record-type-parent . p11179) (record-type-opaque? . p11178) (record-type-name . p11177) (record-type-generative? . p11176) (record-type-field-names . p11175) (record-rtd . p11174) (record-field-mutable? . p11173) (delete-file . p11172) (file-exists? . p11171) (vector-sort! . p11170) (vector-sort . p11169) (list-sort . p11168) (symbol-hash . p11167) (string-ci-hash . p11166) (string-hash . p11165) (equal-hash . p11164) (hashtable-equivalence-function . p11163) (make-hashtable . p11162) (hashtable-hash-function . p11161) (make-eqv-hashtable . p11160) (make-eq-hashtable . p11159) (hashtable? . p11158) (hashtable-update! . p11157) (hashtable-size . p11156) (hashtable-set! . p11155) (hashtable-ref . p11154) (hashtable-mutable? . p11153) (hashtable-keys . p11152) (hashtable-entries . p11151) (hashtable-delete! . p11150) (hashtable-copy . p11149) (hashtable-contains? . p11148) (hashtable-clear! . p11147) (call-with-output-file . p11146) (call-with-input-file . p11145) (write-char . p11144) (write . p11143) (with-output-to-file . p11142) (with-input-from-file . p11141) (read-char . p11140) (read . p11139) (peek-char . p11138) (open-output-file . p11137) (open-input-file . p11136) (newline . p11135) (display . p11134) (close-output-port . p11133) (close-input-port . p11132) (eof-object? . p11131) (eof-object . p11130) (current-error-port . p11129) (current-output-port . p11128) (current-input-port . p11127) (output-port? . p11126) (input-port? . p11125) (utf-8-codec . p11124) (utf-16-codec . p11123) (transcoder-error-handling-mode . p11122) (transcoder-eol-style . p11121) (transcoder-codec . p11120) (transcoded-port . p11119) (textual-port? . p11118) (string->bytevector . p11117) (standard-output-port . p11116) (standard-input-port . p11115) (standard-error-port . p11114) (set-port-position! . p11113) (put-u8 . p11112) (put-string . p11111) (put-datum . p11110) (put-char . p11109) (put-bytevector . p11108) (port? . p11107) (port-transcoder . p11106) (port-position . p11105) (port-has-set-port-position!? . p11104) (port-has-port-position? . p11103) (port-eof? . p11102) (output-port-buffer-mode . p11101) (open-string-output-port . p11100) (open-string-input-port . p11099) (open-file-output-port . p11098) (open-file-input/output-port . p11097) (open-file-input-port . p11096) (open-bytevector-output-port . p11095) (open-bytevector-input-port . p11094) (native-transcoder . p11093) (native-eol-style . p11092) (make-transcoder . p11091) (latin-1-codec . p11090) (make-i/o-write-error . p9810) (make-i/o-read-error . p9789) (make-i/o-port-error . p9968) (make-i/o-invalid-position-error . p9832) (make-i/o-filename-error . p9858) (make-i/o-file-protection-error . p9883) (make-i/o-file-is-read-only-error . p9904) (make-i/o-file-does-not-exist-error . p9946) (make-i/o-file-already-exists-error . p9925) (make-i/o-error . p9768) (make-i/o-encoding-error . p10015) (make-i/o-decoding-error . p9993) (make-custom-textual-output-port . p11089) (make-custom-textual-input/output-port . p11088) (make-custom-textual-input-port . p11087) (make-custom-binary-output-port . p11086) (make-custom-binary-input/output-port . p11085) (make-custom-binary-input-port . p11084) (make-bytevector . p11083) (lookahead-u8 . p11082) (lookahead-char . p11081) (i/o-write-error? . p9812) (i/o-read-error? . p9791) (i/o-port-error? . p9972) (i/o-invalid-position-error? . p9836) (i/o-filename-error? . p9862) (i/o-file-protection-error? . p9885) (i/o-file-is-read-only-error? . p9906) (i/o-file-does-not-exist-error? . p9948) (i/o-file-already-exists-error? . p9927) (i/o-error? . p9770) (i/o-error-position . p9838) (i/o-error-port . p9974) (i/o-error-filename . p9864) (i/o-encoding-error? . p10019) (i/o-encoding-error-char . p10021) (i/o-decoding-error? . p9995) (get-u8 . p11080) (get-string-n! . p11079) (get-string-n . p11078) (get-string-all . p11077) (get-line . p11076) (get-datum . p11075) (get-char . p11074) (get-bytevector-some . p11073) (get-bytevector-n! . p11072) (get-bytevector-n . p11071) (get-bytevector-all . p11070) (flush-output-port . p11069) (close-port . p11068) (exit . p11060) (command-line . p10330) (string-fill! . p11059) (string-set! . p11058) (set-cdr! . p11057) (set-car! . p11056) (remove . p11055) (remv . p11054) (remp . p11053) (remq . p11052) (partition . p11051) (memv . p11050) (memq . p11049) (memp . p11048) (member . p11047) (exists . p11046) (for-all . p11045) (fold-right . p11044) (fold-left . p11043) (find . p11042) (filter . p11041) (cons* . p11040) (assv . p11039) (assq . p11038) (assp . p11037) (assoc . p11036) (call-with-string-output-port . p11035) (call-with-port . p11034) (call-with-bytevector-output-port . p11033) (bytevector->string . p11032) (buffer-mode? . p11031) (binary-port? . p11030) (with-exception-handler . p11029) (raise-continuable . p11028) (raise . p11027) (eval . p2965) (environment . p2957) (make-enumeration . p11026) (enum-set=? . p11025) (enum-set-universe . p11024) (enum-set-union . p11023) (enum-set-subset? . p11022) (enum-set-projection . p11021) (enum-set-member? . p11020) (enum-set-intersection . p11019) (enum-set-indexer . p11018) (enum-set-difference . p11017) (enum-set-constructor . p11016) (enum-set-complement . p11015) (enum-set->list . p11014) (who-condition? . p9632) (warning? . p9498) (violation? . p9561) (undefined-violation? . p9749) (syntax-violation? . p9724) (syntax-violation-subform . p9728) (syntax-violation-form . p9726) (syntax-violation . p2997) (simple-conditions . p11013) (serious-condition? . p9519) (non-continuable-violation? . p9655) (message-condition? . p9475) (make-who-condition . p9628) (make-warning . p9496) (make-violation . p9559) (make-undefined-violation . p9747) (make-syntax-violation . p9718) (make-serious-condition . p9517) (make-non-continuable-violation . p9653) (make-message-condition . p9471) (make-lexical-violation . p9695) (make-irritants-condition . p9602) (make-implementation-restriction-violation . p9674) (make-error . p9538) (make-assertion-violation . p9580) (lexical-violation? . p9697) (irritants-condition? . p9606) (implementation-restriction-violation? . p9676) (error? . p9540) (condition-who . p9634) (condition-predicate . p11012) (condition-message . p9477) (condition-irritants . p9608) (condition-accessor . p11011) (condition . p11010) (assertion-violation? . p9582) (condition? . p11009) (utf32->string . p11008) (utf16->string . p11007) (utf8->string . p11006) (uint-list->bytevector . p11005) (u8-list->bytevector . p11004) (string->utf8 . p11003) (string->utf32 . p11002) (string->utf16 . p11001) (sint-list->bytevector . p11000) (native-endianness . p10999) (bytevector? . p10998) (bytevector=? . p10997) (bytevector-uint-set! . p10996) (bytevector-uint-ref . p10995) (bytevector-u8-set! . p10994) (bytevector-u8-ref . p10993) (bytevector-u64-set! . p10992) (bytevector-u64-ref . p10991) (bytevector-u64-native-set! . p10990) (bytevector-u64-native-ref . p10989) (bytevector-u32-set! . p10988) (bytevector-u32-ref . p10987) (bytevector-u32-native-set! . p10986) (bytevector-u32-native-ref . p10985) (bytevector-u16-set! . p10984) (bytevector-u16-ref . p10983) (bytevector-u16-native-set! . p10982) (bytevector-u16-native-ref . p10981) (bytevector-sint-set! . p10980) (bytevector-sint-ref . p10979) (bytevector-s8-set! . p10978) (bytevector-s8-ref . p10977) (bytevector-s64-set! . p10976) (bytevector-s64-ref . p10975) (bytevector-s64-native-set! . p10974) (bytevector-s64-native-ref . p10973) (bytevector-s32-set! . p10972) (bytevector-s32-ref . p10971) (bytevector-s32-native-set! . p10970) (bytevector-s32-native-ref . p10969) (bytevector-s16-set! . p10968) (bytevector-s16-ref . p10967) (bytevector-s16-native-set! . p10966) (bytevector-s16-native-ref . p10965) (bytevector-length . p10964) (bytevector-ieee-single-ref . p10963) (bytevector-ieee-single-set! . p10962) (bytevector-ieee-single-native-set! . p10961) (bytevector-ieee-single-native-ref . p10960) (bytevector-ieee-double-set! . p10959) (bytevector-ieee-double-ref . p10958) (bytevector-ieee-double-native-set! . p10957) (bytevector-ieee-double-native-ref . p10956) (bytevector-fill! . p10955) (bytevector-copy! . p10954) (bytevector-copy . p10953) (bytevector->uint-list . p10952) (bytevector->u8-list . p10951) (bytevector->sint-list . p10950) (no-nans-violation? . p10063) (no-infinities-violation? . p10042) (make-no-nans-violation . p10061) (make-no-infinities-violation . p10040) (real->flonum . p10949) (flzero? . p10948) (fltruncate . p10947) (fltan . p10946) (flsqrt . p10945) (flsin . p10944) (flround . p10943) (flpositive? . p10942) (flonum? . p10941) (flodd? . p10940) (flnumerator . p10939) (flnegative? . p10938) (flnan? . p10937) (flmod0 . p10936) (flmod . p10935) (flmin . p10934) (flmax . p10933) (fllog . p10932) (flinteger? . p10931) (flinfinite? . p10930) (flfloor . p10929) (flfinite? . p10928) (flexpt . p10927) (flexp . p10926) (fleven? . p10925) (fldiv0-and-mod0 . p10924) (fldiv0 . p10923) (fldiv-and-mod . p10922) (fldiv . p10921) (fldenominator . p10920) (flcos . p10919) (flceiling . p10918) (flatan . p10917) (flasin . p10916) (flacos . p10915) (flabs . p10914) (fl>? . p10913) (fl>=? . p10912) (fl=? . p10911) (fl<? . p10910) (fl<=? . p10909) (fl/ . p10908) (fl- . p10907) (fl+ . p10906) (fl* . p10905) (fixnum->flonum . p10904) (fxzero? . p10903) (fxxor . p10902) (fxrotate-bit-field . p10901) (fxreverse-bit-field . p10900) (fxpositive? . p10899) (fxodd? . p10898) (fxnot . p10897) (fxnegative? . p10896) (fxmod0 . p10895) (fxmod . p10894) (fxmin . p10893) (fxmax . p10892) (fxlength . p10891) (fxior . p10890) (fxif . p10889) (fxfirst-bit-set . p10888) (fxeven? . p10887) (fxdiv0-and-mod0 . p10886) (fxdiv0 . p10885) (fxdiv-and-mod . p10884) (fxdiv . p10883) (fxcopy-bit-field . p10882) (fxcopy-bit . p10881) (fxbit-set? . p10880) (fxbit-field . p10879) (fxbit-count . p10878) (fxarithmetic-shift-right . p10877) (fxarithmetic-shift-left . p10876) (fxarithmetic-shift . p10875) (fxand . p10874) (fx>? . p10873) (fx>=? . p10872) (fx=? . p10871) (fx<? . p10870) (fx<=? . p10869) (fx-/carry . p10868) (fx- . p10867) (fx+/carry . p10866) (fx+ . p10865) (fx*/carry . p10864) (fx* . p10863) (greatest-fixnum . p10862) (least-fixnum . p10861) (fixnum-width . p10860) (fixnum? . p10859) (bitwise-rotate-bit-field . p10858) (bitwise-reverse-bit-field . p10857) (bitwise-length . p10856) (bitwise-if . p10855) (bitwise-first-bit-set . p10854) (bitwise-copy-bit-field . p10853) (bitwise-copy-bit . p10852) (bitwise-bit-set? . p10851) (bitwise-bit-field . p10850) (bitwise-bit-count . p10849) (bitwise-xor . p10848) (bitwise-ior . p10847) (bitwise-and . p10846) (bitwise-not . p10845) (bitwise-arithmetic-shift-right . p10844) (bitwise-arithmetic-shift-left . p10843) (bitwise-arithmetic-shift . p10842) (zero? . p10841) (vector? . p10840) (vector-set! . p10839) (vector-ref . p10838) (vector-map . p10837) (vector-length . p10836) (vector-for-each . p10835) (vector-fill! . p10834) (vector->list . p10833) (vector . p10832) (values . p10831) (truncate . p10830) (tan . p10829) (symbol? . p10828) (symbol=? . p10827) (symbol->string . p10826) (substring . p10825) (string? . p10824) (string>? . p10823) (string>=? . p10822) (string=? . p10821) (string<? . p10820) (string<=? . p10819) (string-ref . p10818) (string-length . p10817) (string-for-each . p10816) (string-copy . p10815) (string-append . p10814) (string->symbol . p10813) (string->number . p10812) (string->list . p10811) (string . p10810) (sqrt . p10809) (sin . p10808) (round . p10807) (reverse . p10806) (real? . p10805) (real-valued? . p10804) (real-part . p10803) (rationalize . p10802) (rational? . p10801) (rational-valued? . p10800) (procedure? . p10799) (positive? . p10798) (pair? . p10797) (odd? . p10796) (numerator . p10795) (number? . p10794) (number->string . p10793) (null? . p10792) (not . p10791) (negative? . p10790) (nan? . p10789) (min . p10788) (max . p10787) (map . p10786) (make-vector . p10785) (make-string . p10784) (make-rectangular . p10783) (make-polar . p10782) (magnitude . p10781) (log . p10780) (list? . p10779) (list-tail . p10778) (list-ref . p10777) (list->vector . p10776) (list->string . p10775) (list . p10774) (length . p10773) (lcm . p10772) (integer? . p10771) (integer-valued? . p10770) (integer->char . p10769) (infinite? . p10768) (inexact? . p10767) (inexact . p10766) (imag-part . p10765) (gcd . p10764) (for-each . p10763) (floor . p10762) (finite? . p10761) (expt . p10760) (exp . p10759) (exact? . p10758) (exact-integer-sqrt . p10757) (exact . p10756) (even? . p10755) (error . p10754) (eqv? . p10753) (equal? . p10752) (eq? . p10751) (dynamic-wind . p10750) (div0-and-mod0 . p10749) (mod0 . p10748) (div0 . p10747) (div-and-mod . p10746) (mod . p10745) (div . p10744) (denominator . p10743) (cos . p10742) (cons . p10741) (complex? . p10740) (char? . p10739) (char>? . p10738) (char>=? . p10737) (char=? . p10736) (char<? . p10735) (char<=? . p10734) (char->integer . p10733) (ceiling . p10732) (call-with-values . p10731) (call/cc . p10730) (call-with-current-continuation . p10729) (cddddr . p10728) (cdddar . p10727) (cddadr . p10726) (cddaar . p10725) (cdaddr . p10724) (cdadar . p10723) (cdaadr . p10722) (cdaaar . p10721) (cadddr . p10720) (caddar . p10719) (cadadr . p10718) (cadaar . p10717) (caaddr . p10716) (caadar . p10715) (caaadr . p10714) (caaaar . p10713) (cdddr . p10712) (cddar . p10711) (cdadr . p10710) (cdaar . p10709) (caddr . p10708) (cadar . p10707) (caadr . p10706) (caaar . p10705) (cddr . p10704) (cdar . p10703) (cadr . p10702) (caar . p10701) (cdr . p10700) (car . p10699) (boolean? . p10698) (boolean=? . p10697) (atan . p10696) (assertion-violation . p10695) (asin . p10694) (apply . p10693) (append . p10692) (angle . p10691) (acos . p10690) (abs . p10689) (/ . p10688) (* . p10687) (- . p10686) (+ . p10685) (>= . p10684) (> . p10683) (= . p10682) (<= . p10681) (< . p10680) (library . p10679) (&no-nans . p10678) (&no-infinities . p10677) (&i/o-encoding . p10676) (&i/o-decoding . p10675) (&i/o-port . p10674) (&i/o-file-does-not-exist . p10673) (&i/o-file-already-exists . p10672) (&i/o-file-is-read-only . p10671) (&i/o-file-protection . p10670) (&i/o-filename . p10669) (&i/o-invalid-position . p10668) (&i/o-write . p10667) (&i/o-read . p10666) (&i/o . p10665) (&undefined . p10664) (&syntax . p10663) (&lexical . p10662) (&implementation-restriction . p10661) (&non-continuable . p10660) (&who . p10659) (&irritants . p10658) (&assertion . p10657) (&violation . p10656) (&error . p10655) (&serious . p10654) (&warning . p10653) (&message . p10652) (&condition . p10651) (define-condition-type . p10650) (define-enumeration . p10649) (define-record-type . p10648) (parent-rtd . p10647) (nongenerative . p10646) (opaque . p10645) (sealed . p10644) (protocol . p10643) (parent . p10642) (immutable . p10641) (mutable . p10640) (fields . p10639) (error-handling-mode . p10638) (file-options . p10637) (buffer-mode . p10636) (eol-style . p10635) (guard . p10634) (unsyntax-splicing . p10631) (unsyntax . p10630) (unquote-splicing . p10629) (unquote . p10628) (_ . p10627) (else . p10626) (=> . p10625) (... . p10624) (assert . p10623) (endianness . p10622) (do . p10619) (cond . p10618) (let* . p10617) (let . p10616) (let*-values . p10615) (let-values . p10614) (identifier-syntax . p10613) (with-syntax . p10612) (quasisyntax . p10611) (quasiquote . p10610) (syntax-rules . p10609) (include . p10608) (record-constructor-descriptor . p10606) (record-type-descriptor . p10605) (case . p10604) (unless . p10602) (when . p10601) (or . p10600) (and . p10599) (if . p10598) (letrec* . p10597) (letrec . p10596) (case-lambda . p10594) (lambda . p10593) (syntax . p10592) (syntax-case . p10591) (quote . p10590) (letrec-syntax . p10588) (let-syntax . p10587) (set! . p10586) (import . p10585) (begin . p10584) (define-syntax . p10582) (define . p10581)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11291 '(psyntax null-environment-5) '() '() '() '() '((make-promise . p11061) (unquote-splicing . p10629) (unquote . p10628) (_ . p10627) (else . p10626) (=> . p10625) (... . p10624) (delay . p10621) (do . p10619) (cond . p10618) (let* . p10617) (let . p10616) (quasiquote . p10610) (syntax-rules . p10609) (case . p10604) (or . p10600) (and . p10599) (if . p10598) (letrec . p10596) (lambda . p10593) (quote . p10590) (letrec-syntax . p10588) (let-syntax . p10587) (set! . p10586) (begin . p10584) (define-syntax . p10582) (define . p10581)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11292 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . p11210) (string-ci>=? . p11209) (string-ci=? . p11208) (string-ci<? . p11207) (string-ci<=? . p11206) (char-whitespace? . p11205) (char-upper-case? . p11204) (char-numeric? . p11202) (char-lower-case? . p11201) (char-upcase . p11199) (char-downcase . p11196) (char-ci>? . p11195) (char-ci>=? . p11194) (char-ci=? . p11193) (char-ci<? . p11192) (char-ci<=? . p11191) (char-alphabetic? . p11190) (call-with-output-file . p11146) (call-with-input-file . p11145) (write-char . p11144) (write . p11143) (with-output-to-file . p11142) (with-input-from-file . p11141) (read-char . p11140) (read . p11139) (peek-char . p11138) (open-output-file . p11137) (open-input-file . p11136) (newline . p11135) (display . p11134) (close-output-port . p11133) (close-input-port . p11132) (eof-object . p11130) (current-output-port . p11128) (current-input-port . p11127) (output-port? . p11126) (input-port? . p11125) (scheme-report-environment . p2961) (quotient . p11067) (null-environment . p2959) (remainder . p11066) (modulo . p11065) (inexact->exact . p11064) (force . p11063) (exact->inexact . p11062) (make-promise . p11061) (string-fill! . p11059) (string-set! . p11058) (set-cdr! . p11057) (set-car! . p11056) (memv . p11050) (memq . p11049) (member . p11047) (assv . p11039) (assq . p11038) (assoc . p11036) (eval . p2965) (zero? . p10841) (vector? . p10840) (vector-set! . p10839) (vector-ref . p10838) (vector-length . p10836) (vector-fill! . p10834) (vector->list . p10833) (vector . p10832) (values . p10831) (truncate . p10830) (tan . p10829) (symbol? . p10828) (symbol->string . p10826) (substring . p10825) (string? . p10824) (string>? . p10823) (string>=? . p10822) (string=? . p10821) (string<? . p10820) (string<=? . p10819) (string-ref . p10818) (string-length . p10817) (string-copy . p10815) (string-append . p10814) (string->symbol . p10813) (string->number . p10812) (string->list . p10811) (string . p10810) (sqrt . p10809) (sin . p10808) (round . p10807) (reverse . p10806) (real? . p10805) (real-part . p10803) (rationalize . p10802) (rational? . p10801) (procedure? . p10799) (positive? . p10798) (pair? . p10797) (odd? . p10796) (numerator . p10795) (number? . p10794) (number->string . p10793) (not . p10791) (negative? . p10790) (min . p10788) (max . p10787) (map . p10786) (make-vector . p10785) (make-string . p10784) (make-rectangular . p10783) (make-polar . p10782) (magnitude . p10781) (log . p10780) (list? . p10779) (list-tail . p10778) (list-ref . p10777) (list->vector . p10776) (list->string . p10775) (list . p10774) (length . p10773) (lcm . p10772) (integer? . p10771) (integer->char . p10769) (inexact? . p10767) (imag-part . p10765) (gcd . p10764) (for-each . p10763) (floor . p10762) (expt . p10760) (exp . p10759) (exact? . p10758) (even? . p10755) (eqv? . p10753) (equal? . p10752) (eq? . p10751) (dynamic-wind . p10750) (denominator . p10743) (cos . p10742) (cons . p10741) (complex? . p10740) (char? . p10739) (char>? . p10738) (char>=? . p10737) (char=? . p10736) (char<? . p10735) (char<=? . p10734) (char->integer . p10733) (ceiling . p10732) (call-with-values . p10731) (call-with-current-continuation . p10729) (cddddr . p10728) (cdddar . p10727) (cddadr . p10726) (cddaar . p10725) (cdaddr . p10724) (cdadar . p10723) (cdaadr . p10722) (cdaaar . p10721) (cadddr . p10720) (caddar . p10719) (cadadr . p10718) (cadaar . p10717) (caaddr . p10716) (caadar . p10715) (caaadr . p10714) (caaaar . p10713) (cdddr . p10712) (cddar . p10711) (cdadr . p10710) (cdaar . p10709) (caddr . p10708) (cadar . p10707) (caadr . p10706) (caaar . p10705) (cddr . p10704) (cdar . p10703) (cadr . p10702) (caar . p10701) (cdr . p10700) (car . p10699) (boolean? . p10698) (atan . p10696) (asin . p10694) (apply . p10693) (append . p10692) (angle . p10691) (acos . p10690) (abs . p10689) (/ . p10688) (* . p10687) (- . p10686) (+ . p10685) (>= . p10684) (> . p10683) (= . p10682) (<= . p10681) (< . p10680) (unquote-splicing . p10629) (unquote . p10628) (else . p10626) (=> . p10625) (... . p10624) (delay . p10621) (do . p10619) (cond . p10618) (let* . p10617) (let . p10616) (quasiquote . p10610) (syntax-rules . p10609) (case . p10604) (or . p10600) (and . p10599) (if . p10598) (letrec . p10596) (lambda . p10593) (quote . p10590) (letrec-syntax . p10588) (let-syntax . p10587) (set! . p10586) (begin . p10584) (define-syntax . p10582) (define . p10581)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11293 '(psyntax modules) '() '() '() '() '((module . p10583)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11294 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11295 '(rnrs) '(6) '() '() '() '((regexp? . p11283) (string-upcase . p11218) (string-titlecase . p11217) (string-normalize-nfkd . p11216) (string-normalize-nfkc . p11215) (string-normalize-nfd . p11214) (string-normalize-nfc . p11213) (string-foldcase . p11212) (string-downcase . p11211) (string-ci>? . p11210) (string-ci>=? . p11209) (string-ci=? . p11208) (string-ci<? . p11207) (string-ci<=? . p11206) (char-whitespace? . p11205) (char-upper-case? . p11204) (char-title-case? . p11203) (char-numeric? . p11202) (char-lower-case? . p11201) (char-general-category . p11200) (char-upcase . p11199) (char-titlecase . p11198) (char-foldcase . p11197) (char-downcase . p11196) (char-ci>? . p11195) (char-ci>=? . p11194) (char-ci=? . p11193) (char-ci<? . p11192) (char-ci<=? . p11191) (char-alphabetic? . p11190) (make-variable-transformer . p2323) (identifier? . p2999) (generate-temporaries . p2979) (free-identifier=? . p2981) (syntax->datum . p3003) (datum->syntax . p3001) (bound-identifier=? . p2983) (record-type-descriptor? . p11189) (record-predicate . p11188) (record-mutator . p11187) (record-constructor . p11186) (record-accessor . p11185) (make-record-type-descriptor . p11184) (make-record-constructor-descriptor . p11183) (record? . p11182) (record-type-uid . p11181) (record-type-sealed? . p11180) (record-type-parent . p11179) (record-type-opaque? . p11178) (record-type-name . p11177) (record-type-generative? . p11176) (record-type-field-names . p11175) (record-rtd . p11174) (record-field-mutable? . p11173) (delete-file . p11172) (file-exists? . p11171) (vector-sort! . p11170) (vector-sort . p11169) (list-sort . p11168) (symbol-hash . p11167) (string-ci-hash . p11166) (string-hash . p11165) (equal-hash . p11164) (hashtable-equivalence-function . p11163) (make-hashtable . p11162) (hashtable-hash-function . p11161) (make-eqv-hashtable . p11160) (make-eq-hashtable . p11159) (hashtable? . p11158) (hashtable-update! . p11157) (hashtable-size . p11156) (hashtable-set! . p11155) (hashtable-ref . p11154) (hashtable-mutable? . p11153) (hashtable-keys . p11152) (hashtable-entries . p11151) (hashtable-delete! . p11150) (hashtable-copy . p11149) (hashtable-contains? . p11148) (hashtable-clear! . p11147) (call-with-output-file . p11146) (call-with-input-file . p11145) (write-char . p11144) (write . p11143) (with-output-to-file . p11142) (with-input-from-file . p11141) (read-char . p11140) (read . p11139) (peek-char . p11138) (open-output-file . p11137) (open-input-file . p11136) (newline . p11135) (display . p11134) (close-output-port . p11133) (close-input-port . p11132) (eof-object? . p11131) (eof-object . p11130) (current-error-port . p11129) (current-output-port . p11128) (current-input-port . p11127) (output-port? . p11126) (input-port? . p11125) (utf-8-codec . p11124) (utf-16-codec . p11123) (transcoder-error-handling-mode . p11122) (transcoder-eol-style . p11121) (transcoder-codec . p11120) (transcoded-port . p11119) (textual-port? . p11118) (string->bytevector . p11117) (standard-output-port . p11116) (standard-input-port . p11115) (standard-error-port . p11114) (set-port-position! . p11113) (put-u8 . p11112) (put-string . p11111) (put-datum . p11110) (put-char . p11109) (put-bytevector . p11108) (port? . p11107) (port-transcoder . p11106) (port-position . p11105) (port-has-set-port-position!? . p11104) (port-has-port-position? . p11103) (port-eof? . p11102) (output-port-buffer-mode . p11101) (open-string-output-port . p11100) (open-string-input-port . p11099) (open-file-output-port . p11098) (open-file-input/output-port . p11097) (open-file-input-port . p11096) (open-bytevector-output-port . p11095) (open-bytevector-input-port . p11094) (native-transcoder . p11093) (native-eol-style . p11092) (make-transcoder . p11091) (latin-1-codec . p11090) (make-i/o-write-error . p9810) (make-i/o-read-error . p9789) (make-i/o-port-error . p9968) (make-i/o-invalid-position-error . p9832) (make-i/o-filename-error . p9858) (make-i/o-file-protection-error . p9883) (make-i/o-file-is-read-only-error . p9904) (make-i/o-file-does-not-exist-error . p9946) (make-i/o-file-already-exists-error . p9925) (make-i/o-error . p9768) (make-i/o-encoding-error . p10015) (make-i/o-decoding-error . p9993) (make-custom-textual-output-port . p11089) (make-custom-textual-input/output-port . p11088) (make-custom-textual-input-port . p11087) (make-custom-binary-output-port . p11086) (make-custom-binary-input/output-port . p11085) (make-custom-binary-input-port . p11084) (make-bytevector . p11083) (lookahead-u8 . p11082) (lookahead-char . p11081) (i/o-write-error? . p9812) (i/o-read-error? . p9791) (i/o-port-error? . p9972) (i/o-invalid-position-error? . p9836) (i/o-filename-error? . p9862) (i/o-file-protection-error? . p9885) (i/o-file-is-read-only-error? . p9906) (i/o-file-does-not-exist-error? . p9948) (i/o-file-already-exists-error? . p9927) (i/o-error? . p9770) (i/o-error-position . p9838) (i/o-error-port . p9974) (i/o-error-filename . p9864) (i/o-encoding-error? . p10019) (i/o-encoding-error-char . p10021) (i/o-decoding-error? . p9995) (get-u8 . p11080) (get-string-n! . p11079) (get-string-n . p11078) (get-string-all . p11077) (get-line . p11076) (get-datum . p11075) (get-char . p11074) (get-bytevector-some . p11073) (get-bytevector-n! . p11072) (get-bytevector-n . p11071) (get-bytevector-all . p11070) (flush-output-port . p11069) (close-port . p11068) (exit . p11060) (command-line . p10330) (remove . p11055) (remv . p11054) (remp . p11053) (remq . p11052) (partition . p11051) (memv . p11050) (memq . p11049) (memp . p11048) (member . p11047) (exists . p11046) (for-all . p11045) (fold-right . p11044) (fold-left . p11043) (find . p11042) (filter . p11041) (cons* . p11040) (assv . p11039) (assq . p11038) (assp . p11037) (assoc . p11036) (call-with-string-output-port . p11035) (call-with-port . p11034) (call-with-bytevector-output-port . p11033) (bytevector->string . p11032) (buffer-mode? . p11031) (binary-port? . p11030) (with-exception-handler . p11029) (raise-continuable . p11028) (raise . p11027) (make-enumeration . p11026) (enum-set=? . p11025) (enum-set-universe . p11024) (enum-set-union . p11023) (enum-set-subset? . p11022) (enum-set-projection . p11021) (enum-set-member? . p11020) (enum-set-intersection . p11019) (enum-set-indexer . p11018) (enum-set-difference . p11017) (enum-set-constructor . p11016) (enum-set-complement . p11015) (enum-set->list . p11014) (who-condition? . p9632) (warning? . p9498) (violation? . p9561) (undefined-violation? . p9749) (syntax-violation? . p9724) (syntax-violation-subform . p9728) (syntax-violation-form . p9726) (syntax-violation . p2997) (simple-conditions . p11013) (serious-condition? . p9519) (non-continuable-violation? . p9655) (message-condition? . p9475) (make-who-condition . p9628) (make-warning . p9496) (make-violation . p9559) (make-undefined-violation . p9747) (make-syntax-violation . p9718) (make-serious-condition . p9517) (make-non-continuable-violation . p9653) (make-message-condition . p9471) (make-lexical-violation . p9695) (make-irritants-condition . p9602) (make-implementation-restriction-violation . p9674) (make-error . p9538) (make-assertion-violation . p9580) (lexical-violation? . p9697) (irritants-condition? . p9606) (implementation-restriction-violation? . p9676) (error? . p9540) (condition-who . p9634) (condition-predicate . p11012) (condition-message . p9477) (condition-irritants . p9608) (condition-accessor . p11011) (condition . p11010) (assertion-violation? . p9582) (condition? . p11009) (utf32->string . p11008) (utf16->string . p11007) (utf8->string . p11006) (uint-list->bytevector . p11005) (u8-list->bytevector . p11004) (string->utf8 . p11003) (string->utf32 . p11002) (string->utf16 . p11001) (sint-list->bytevector . p11000) (native-endianness . p10999) (bytevector? . p10998) (bytevector=? . p10997) (bytevector-uint-set! . p10996) (bytevector-uint-ref . p10995) (bytevector-u8-set! . p10994) (bytevector-u8-ref . p10993) (bytevector-u64-set! . p10992) (bytevector-u64-ref . p10991) (bytevector-u64-native-set! . p10990) (bytevector-u64-native-ref . p10989) (bytevector-u32-set! . p10988) (bytevector-u32-ref . p10987) (bytevector-u32-native-set! . p10986) (bytevector-u32-native-ref . p10985) (bytevector-u16-set! . p10984) (bytevector-u16-ref . p10983) (bytevector-u16-native-set! . p10982) (bytevector-u16-native-ref . p10981) (bytevector-sint-set! . p10980) (bytevector-sint-ref . p10979) (bytevector-s8-set! . p10978) (bytevector-s8-ref . p10977) (bytevector-s64-set! . p10976) (bytevector-s64-ref . p10975) (bytevector-s64-native-set! . p10974) (bytevector-s64-native-ref . p10973) (bytevector-s32-set! . p10972) (bytevector-s32-ref . p10971) (bytevector-s32-native-set! . p10970) (bytevector-s32-native-ref . p10969) (bytevector-s16-set! . p10968) (bytevector-s16-ref . p10967) (bytevector-s16-native-set! . p10966) (bytevector-s16-native-ref . p10965) (bytevector-length . p10964) (bytevector-ieee-single-ref . p10963) (bytevector-ieee-single-set! . p10962) (bytevector-ieee-single-native-set! . p10961) (bytevector-ieee-single-native-ref . p10960) (bytevector-ieee-double-set! . p10959) (bytevector-ieee-double-ref . p10958) (bytevector-ieee-double-native-set! . p10957) (bytevector-ieee-double-native-ref . p10956) (bytevector-fill! . p10955) (bytevector-copy! . p10954) (bytevector-copy . p10953) (bytevector->uint-list . p10952) (bytevector->u8-list . p10951) (bytevector->sint-list . p10950) (no-nans-violation? . p10063) (no-infinities-violation? . p10042) (make-no-nans-violation . p10061) (make-no-infinities-violation . p10040) (real->flonum . p10949) (flzero? . p10948) (fltruncate . p10947) (fltan . p10946) (flsqrt . p10945) (flsin . p10944) (flround . p10943) (flpositive? . p10942) (flonum? . p10941) (flodd? . p10940) (flnumerator . p10939) (flnegative? . p10938) (flnan? . p10937) (flmod0 . p10936) (flmod . p10935) (flmin . p10934) (flmax . p10933) (fllog . p10932) (flinteger? . p10931) (flinfinite? . p10930) (flfloor . p10929) (flfinite? . p10928) (flexpt . p10927) (flexp . p10926) (fleven? . p10925) (fldiv0-and-mod0 . p10924) (fldiv0 . p10923) (fldiv-and-mod . p10922) (fldiv . p10921) (fldenominator . p10920) (flcos . p10919) (flceiling . p10918) (flatan . p10917) (flasin . p10916) (flacos . p10915) (flabs . p10914) (fl>? . p10913) (fl>=? . p10912) (fl=? . p10911) (fl<? . p10910) (fl<=? . p10909) (fl/ . p10908) (fl- . p10907) (fl+ . p10906) (fl* . p10905) (fixnum->flonum . p10904) (fxzero? . p10903) (fxxor . p10902) (fxrotate-bit-field . p10901) (fxreverse-bit-field . p10900) (fxpositive? . p10899) (fxodd? . p10898) (fxnot . p10897) (fxnegative? . p10896) (fxmod0 . p10895) (fxmod . p10894) (fxmin . p10893) (fxmax . p10892) (fxlength . p10891) (fxior . p10890) (fxif . p10889) (fxfirst-bit-set . p10888) (fxeven? . p10887) (fxdiv0-and-mod0 . p10886) (fxdiv0 . p10885) (fxdiv-and-mod . p10884) (fxdiv . p10883) (fxcopy-bit-field . p10882) (fxcopy-bit . p10881) (fxbit-set? . p10880) (fxbit-field . p10879) (fxbit-count . p10878) (fxarithmetic-shift-right . p10877) (fxarithmetic-shift-left . p10876) (fxarithmetic-shift . p10875) (fxand . p10874) (fx>? . p10873) (fx>=? . p10872) (fx=? . p10871) (fx<? . p10870) (fx<=? . p10869) (fx-/carry . p10868) (fx- . p10867) (fx+/carry . p10866) (fx+ . p10865) (fx*/carry . p10864) (fx* . p10863) (greatest-fixnum . p10862) (least-fixnum . p10861) (fixnum-width . p10860) (fixnum? . p10859) (bitwise-rotate-bit-field . p10858) (bitwise-reverse-bit-field . p10857) (bitwise-length . p10856) (bitwise-if . p10855) (bitwise-first-bit-set . p10854) (bitwise-copy-bit-field . p10853) (bitwise-copy-bit . p10852) (bitwise-bit-set? . p10851) (bitwise-bit-field . p10850) (bitwise-bit-count . p10849) (bitwise-xor . p10848) (bitwise-ior . p10847) (bitwise-and . p10846) (bitwise-not . p10845) (bitwise-arithmetic-shift-right . p10844) (bitwise-arithmetic-shift-left . p10843) (bitwise-arithmetic-shift . p10842) (zero? . p10841) (vector? . p10840) (vector-set! . p10839) (vector-ref . p10838) (vector-map . p10837) (vector-length . p10836) (vector-for-each . p10835) (vector-fill! . p10834) (vector->list . p10833) (vector . p10832) (values . p10831) (truncate . p10830) (tan . p10829) (symbol? . p10828) (symbol=? . p10827) (symbol->string . p10826) (substring . p10825) (string? . p10824) (string>? . p10823) (string>=? . p10822) (string=? . p10821) (string<? . p10820) (string<=? . p10819) (string-ref . p10818) (string-length . p10817) (string-for-each . p10816) (string-copy . p10815) (string-append . p10814) (string->symbol . p10813) (string->number . p10812) (string->list . p10811) (string . p10810) (sqrt . p10809) (sin . p10808) (round . p10807) (reverse . p10806) (real? . p10805) (real-valued? . p10804) (real-part . p10803) (rationalize . p10802) (rational? . p10801) (rational-valued? . p10800) (procedure? . p10799) (positive? . p10798) (pair? . p10797) (odd? . p10796) (numerator . p10795) (number? . p10794) (number->string . p10793) (null? . p10792) (not . p10791) (negative? . p10790) (nan? . p10789) (min . p10788) (max . p10787) (map . p10786) (make-vector . p10785) (make-string . p10784) (make-rectangular . p10783) (make-polar . p10782) (magnitude . p10781) (log . p10780) (list? . p10779) (list-tail . p10778) (list-ref . p10777) (list->vector . p10776) (list->string . p10775) (list . p10774) (length . p10773) (lcm . p10772) (integer? . p10771) (integer-valued? . p10770) (integer->char . p10769) (infinite? . p10768) (inexact? . p10767) (inexact . p10766) (imag-part . p10765) (gcd . p10764) (for-each . p10763) (floor . p10762) (finite? . p10761) (expt . p10760) (exp . p10759) (exact? . p10758) (exact-integer-sqrt . p10757) (exact . p10756) (even? . p10755) (error . p10754) (eqv? . p10753) (equal? . p10752) (eq? . p10751) (dynamic-wind . p10750) (div0-and-mod0 . p10749) (mod0 . p10748) (div0 . p10747) (div-and-mod . p10746) (mod . p10745) (div . p10744) (denominator . p10743) (cos . p10742) (cons . p10741) (complex? . p10740) (char? . p10739) (char>? . p10738) (char>=? . p10737) (char=? . p10736) (char<? . p10735) (char<=? . p10734) (char->integer . p10733) (ceiling . p10732) (call-with-values . p10731) (call/cc . p10730) (call-with-current-continuation . p10729) (cddddr . p10728) (cdddar . p10727) (cddadr . p10726) (cddaar . p10725) (cdaddr . p10724) (cdadar . p10723) (cdaadr . p10722) (cdaaar . p10721) (cadddr . p10720) (caddar . p10719) (cadadr . p10718) (cadaar . p10717) (caaddr . p10716) (caadar . p10715) (caaadr . p10714) (caaaar . p10713) (cdddr . p10712) (cddar . p10711) (cdadr . p10710) (cdaar . p10709) (caddr . p10708) (cadar . p10707) (caadr . p10706) (caaar . p10705) (cddr . p10704) (cdar . p10703) (cadr . p10702) (caar . p10701) (cdr . p10700) (car . p10699) (boolean? . p10698) (boolean=? . p10697) (atan . p10696) (assertion-violation . p10695) (asin . p10694) (apply . p10693) (append . p10692) (angle . p10691) (acos . p10690) (abs . p10689) (/ . p10688) (* . p10687) (- . p10686) (+ . p10685) (>= . p10684) (> . p10683) (= . p10682) (<= . p10681) (< . p10680) (&no-nans . p10678) (&no-infinities . p10677) (&i/o-encoding . p10676) (&i/o-decoding . p10675) (&i/o-port . p10674) (&i/o-file-does-not-exist . p10673) (&i/o-file-already-exists . p10672) (&i/o-file-is-read-only . p10671) (&i/o-file-protection . p10670) (&i/o-filename . p10669) (&i/o-invalid-position . p10668) (&i/o-write . p10667) (&i/o-read . p10666) (&i/o . p10665) (&undefined . p10664) (&syntax . p10663) (&lexical . p10662) (&implementation-restriction . p10661) (&non-continuable . p10660) (&who . p10659) (&irritants . p10658) (&assertion . p10657) (&violation . p10656) (&error . p10655) (&serious . p10654) (&warning . p10653) (&message . p10652) (&condition . p10651) (define-condition-type . p10650) (define-enumeration . p10649) (define-record-type . p10648) (parent-rtd . p10647) (nongenerative . p10646) (opaque . p10645) (sealed . p10644) (protocol . p10643) (parent . p10642) (immutable . p10641) (mutable . p10640) (fields . p10639) (error-handling-mode . p10638) (file-options . p10637) (buffer-mode . p10636) (eol-style . p10635) (guard . p10634) (unsyntax-splicing . p10631) (unsyntax . p10630) (unquote-splicing . p10629) (unquote . p10628) (_ . p10627) (else . p10626) (=> . p10625) (... . p10624) (assert . p10623) (endianness . p10622) (do . p10619) (cond . p10618) (let* . p10617) (let . p10616) (let*-values . p10615) (let-values . p10614) (identifier-syntax . p10613) (with-syntax . p10612) (quasisyntax . p10611) (quasiquote . p10610) (syntax-rules . p10609) (record-constructor-descriptor . p10606) (record-type-descriptor . p10605) (case . p10604) (unless . p10602) (when . p10601) (or . p10600) (and . p10599) (if . p10598) (letrec* . p10597) (letrec . p10596) (case-lambda . p10594) (lambda . p10593) (syntax . p10592) (syntax-case . p10591) (quote . p10590) (letrec-syntax . p10588) (let-syntax . p10587) (set! . p10586) (begin . p10584) (define-syntax . p10582) (define . p10581)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11296 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . p2961) (quotient . p11067) (null-environment . p2959) (remainder . p11066) (modulo . p11065) (inexact->exact . p11064) (force . p11063) (exact->inexact . p11062) (make-promise . p11061) (delay . p10621)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11297 '(rnrs control) '(6) '() '() '() '((do . p10619) (unless . p10602) (when . p10601) (case-lambda . p10594)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11298 '(rnrs eval) '(6) '() '() '() '((eval . p2965) (environment . p2957)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11299 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . p11057) (set-car! . p11056)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11300 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . p11059) (string-set! . p11058)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11301 '(rnrs programs) '(6) '() '() '() '((exit . p11060) (command-line . p10330)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11302 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . p2323) (identifier? . p2999) (generate-temporaries . p2979) (free-identifier=? . p2981) (syntax->datum . p3003) (datum->syntax . p3001) (bound-identifier=? . p2983) (syntax-violation . p2997) (unsyntax-splicing . p10631) (unsyntax . p10630) (_ . p10627) (... . p10624) (with-syntax . p10612) (quasisyntax . p10611) (syntax . p10592) (syntax-case . p10591)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11303 '(rnrs files) '(6) '() '() '() '((delete-file . p11172) (file-exists? . p11171) (make-i/o-write-error . p9810) (make-i/o-read-error . p9789) (make-i/o-port-error . p9968) (make-i/o-invalid-position-error . p9832) (make-i/o-filename-error . p9858) (make-i/o-file-protection-error . p9883) (make-i/o-file-is-read-only-error . p9904) (make-i/o-file-does-not-exist-error . p9946) (make-i/o-file-already-exists-error . p9925) (make-i/o-error . p9768) (i/o-write-error? . p9812) (i/o-read-error? . p9791) (i/o-port-error? . p9972) (i/o-invalid-position-error? . p9836) (i/o-filename-error? . p9862) (i/o-file-protection-error? . p9885) (i/o-file-is-read-only-error? . p9906) (i/o-file-does-not-exist-error? . p9948) (i/o-file-already-exists-error? . p9927) (i/o-error? . p9770) (i/o-error-position . p9838) (i/o-error-port . p9974) (i/o-error-filename . p9864) (&i/o-port . p10674) (&i/o-file-does-not-exist . p10673) (&i/o-file-already-exists . p10672) (&i/o-file-is-read-only . p10671) (&i/o-file-protection . p10670) (&i/o-filename . p10669) (&i/o-invalid-position . p10668) (&i/o-write . p10667) (&i/o-read . p10666) (&i/o . p10665)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11304 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . p11170) (vector-sort . p11169) (list-sort . p11168)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11305 '(rnrs base) '(6) '() '() '() '((zero? . p10841) (vector? . p10840) (vector-set! . p10839) (vector-ref . p10838) (vector-map . p10837) (vector-length . p10836) (vector-for-each . p10835) (vector-fill! . p10834) (vector->list . p10833) (vector . p10832) (values . p10831) (truncate . p10830) (tan . p10829) (symbol? . p10828) (symbol=? . p10827) (symbol->string . p10826) (substring . p10825) (string? . p10824) (string>? . p10823) (string>=? . p10822) (string=? . p10821) (string<? . p10820) (string<=? . p10819) (string-ref . p10818) (string-length . p10817) (string-for-each . p10816) (string-copy . p10815) (string-append . p10814) (string->symbol . p10813) (string->number . p10812) (string->list . p10811) (string . p10810) (sqrt . p10809) (sin . p10808) (round . p10807) (reverse . p10806) (real? . p10805) (real-valued? . p10804) (real-part . p10803) (rationalize . p10802) (rational? . p10801) (rational-valued? . p10800) (procedure? . p10799) (positive? . p10798) (pair? . p10797) (odd? . p10796) (numerator . p10795) (number? . p10794) (number->string . p10793) (null? . p10792) (not . p10791) (negative? . p10790) (nan? . p10789) (min . p10788) (max . p10787) (map . p10786) (make-vector . p10785) (make-string . p10784) (make-rectangular . p10783) (make-polar . p10782) (magnitude . p10781) (log . p10780) (list? . p10779) (list-tail . p10778) (list-ref . p10777) (list->vector . p10776) (list->string . p10775) (list . p10774) (length . p10773) (lcm . p10772) (integer? . p10771) (integer-valued? . p10770) (integer->char . p10769) (infinite? . p10768) (inexact? . p10767) (inexact . p10766) (imag-part . p10765) (gcd . p10764) (for-each . p10763) (floor . p10762) (finite? . p10761) (expt . p10760) (exp . p10759) (exact? . p10758) (exact-integer-sqrt . p10757) (exact . p10756) (even? . p10755) (error . p10754) (eqv? . p10753) (equal? . p10752) (eq? . p10751) (dynamic-wind . p10750) (div0-and-mod0 . p10749) (mod0 . p10748) (div0 . p10747) (div-and-mod . p10746) (mod . p10745) (div . p10744) (denominator . p10743) (cos . p10742) (cons . p10741) (complex? . p10740) (char? . p10739) (char>? . p10738) (char>=? . p10737) (char=? . p10736) (char<? . p10735) (char<=? . p10734) (char->integer . p10733) (ceiling . p10732) (call-with-values . p10731) (call/cc . p10730) (call-with-current-continuation . p10729) (cddddr . p10728) (cdddar . p10727) (cddadr . p10726) (cddaar . p10725) (cdaddr . p10724) (cdadar . p10723) (cdaadr . p10722) (cdaaar . p10721) (cadddr . p10720) (caddar . p10719) (cadadr . p10718) (cadaar . p10717) (caaddr . p10716) (caadar . p10715) (caaadr . p10714) (caaaar . p10713) (cdddr . p10712) (cddar . p10711) (cdadr . p10710) (cdaar . p10709) (caddr . p10708) (cadar . p10707) (caadr . p10706) (caaar . p10705) (cddr . p10704) (cdar . p10703) (cadr . p10702) (caar . p10701) (cdr . p10700) (car . p10699) (boolean? . p10698) (boolean=? . p10697) (atan . p10696) (assertion-violation . p10695) (asin . p10694) (apply . p10693) (append . p10692) (angle . p10691) (acos . p10690) (abs . p10689) (/ . p10688) (* . p10687) (- . p10686) (+ . p10685) (>= . p10684) (> . p10683) (= . p10682) (<= . p10681) (< . p10680) (unquote-splicing . p10629) (unquote . p10628) (_ . p10627) (else . p10626) (=> . p10625) (... . p10624) (assert . p10623) (cond . p10618) (let* . p10617) (let . p10616) (let*-values . p10615) (let-values . p10614) (identifier-syntax . p10613) (quasiquote . p10610) (syntax-rules . p10609) (case . p10604) (or . p10600) (and . p10599) (if . p10598) (letrec* . p10597) (letrec . p10596) (lambda . p10593) (quote . p10590) (letrec-syntax . p10588) (let-syntax . p10587) (set! . p10586) (begin . p10584) (define-syntax . p10582) (define . p10581)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11306 '(rnrs lists) '(6) '() '() '() '((remove . p11055) (remv . p11054) (remp . p11053) (remq . p11052) (partition . p11051) (memv . p11050) (memq . p11049) (memp . p11048) (member . p11047) (exists . p11046) (for-all . p11045) (fold-right . p11044) (fold-left . p11043) (find . p11042) (filter . p11041) (cons* . p11040) (assv . p11039) (assq . p11038) (assp . p11037) (assoc . p11036)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11307 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . p11146) (call-with-input-file . p11145) (write-char . p11144) (write . p11143) (with-output-to-file . p11142) (with-input-from-file . p11141) (read-char . p11140) (read . p11139) (peek-char . p11138) (open-output-file . p11137) (open-input-file . p11136) (newline . p11135) (display . p11134) (close-output-port . p11133) (close-input-port . p11132) (eof-object? . p11131) (eof-object . p11130) (current-error-port . p11129) (current-output-port . p11128) (current-input-port . p11127) (output-port? . p11126) (input-port? . p11125) (make-i/o-write-error . p9810) (make-i/o-read-error . p9789) (make-i/o-port-error . p9968) (make-i/o-invalid-position-error . p9832) (make-i/o-filename-error . p9858) (make-i/o-file-protection-error . p9883) (make-i/o-file-is-read-only-error . p9904) (make-i/o-file-does-not-exist-error . p9946) (make-i/o-file-already-exists-error . p9925) (make-i/o-error . p9768) (i/o-write-error? . p9812) (i/o-read-error? . p9791) (i/o-port-error? . p9972) (i/o-invalid-position-error? . p9836) (i/o-filename-error? . p9862) (i/o-file-protection-error? . p9885) (i/o-file-is-read-only-error? . p9906) (i/o-file-does-not-exist-error? . p9948) (i/o-file-already-exists-error? . p9927) (i/o-error? . p9770) (i/o-error-position . p9838) (i/o-error-port . p9974) (i/o-error-filename . p9864) (&i/o-port . p10674) (&i/o-file-does-not-exist . p10673) (&i/o-file-already-exists . p10672) (&i/o-file-is-read-only . p10671) (&i/o-file-protection . p10670) (&i/o-filename . p10669) (&i/o-invalid-position . p10668) (&i/o-write . p10667) (&i/o-read . p10666) (&i/o . p10665)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11308 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . p11083) (utf32->string . p11008) (utf16->string . p11007) (utf8->string . p11006) (uint-list->bytevector . p11005) (u8-list->bytevector . p11004) (string->utf8 . p11003) (string->utf32 . p11002) (string->utf16 . p11001) (sint-list->bytevector . p11000) (native-endianness . p10999) (bytevector? . p10998) (bytevector=? . p10997) (bytevector-uint-set! . p10996) (bytevector-uint-ref . p10995) (bytevector-u8-set! . p10994) (bytevector-u8-ref . p10993) (bytevector-u64-set! . p10992) (bytevector-u64-ref . p10991) (bytevector-u64-native-set! . p10990) (bytevector-u64-native-ref . p10989) (bytevector-u32-set! . p10988) (bytevector-u32-ref . p10987) (bytevector-u32-native-set! . p10986) (bytevector-u32-native-ref . p10985) (bytevector-u16-set! . p10984) (bytevector-u16-ref . p10983) (bytevector-u16-native-set! . p10982) (bytevector-u16-native-ref . p10981) (bytevector-sint-set! . p10980) (bytevector-sint-ref . p10979) (bytevector-s8-set! . p10978) (bytevector-s8-ref . p10977) (bytevector-s64-set! . p10976) (bytevector-s64-ref . p10975) (bytevector-s64-native-set! . p10974) (bytevector-s64-native-ref . p10973) (bytevector-s32-set! . p10972) (bytevector-s32-ref . p10971) (bytevector-s32-native-set! . p10970) (bytevector-s32-native-ref . p10969) (bytevector-s16-set! . p10968) (bytevector-s16-ref . p10967) (bytevector-s16-native-set! . p10966) (bytevector-s16-native-ref . p10965) (bytevector-length . p10964) (bytevector-ieee-single-ref . p10963) (bytevector-ieee-single-set! . p10962) (bytevector-ieee-single-native-set! . p10961) (bytevector-ieee-single-native-ref . p10960) (bytevector-ieee-double-set! . p10959) (bytevector-ieee-double-ref . p10958) (bytevector-ieee-double-native-set! . p10957) (bytevector-ieee-double-native-ref . p10956) (bytevector-fill! . p10955) (bytevector-copy! . p10954) (bytevector-copy . p10953) (bytevector->uint-list . p10952) (bytevector->u8-list . p10951) (bytevector->sint-list . p10950) (endianness . p10622)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11309 '(rnrs unicode) '(6) '() '() '() '((string-upcase . p11218) (string-titlecase . p11217) (string-normalize-nfkd . p11216) (string-normalize-nfkc . p11215) (string-normalize-nfd . p11214) (string-normalize-nfc . p11213) (string-foldcase . p11212) (string-downcase . p11211) (string-ci>? . p11210) (string-ci>=? . p11209) (string-ci=? . p11208) (string-ci<? . p11207) (string-ci<=? . p11206) (char-whitespace? . p11205) (char-upper-case? . p11204) (char-title-case? . p11203) (char-numeric? . p11202) (char-lower-case? . p11201) (char-general-category . p11200) (char-upcase . p11199) (char-titlecase . p11198) (char-foldcase . p11197) (char-downcase . p11196) (char-ci>? . p11195) (char-ci>=? . p11194) (char-ci=? . p11193) (char-ci<? . p11192) (char-ci<=? . p11191) (char-alphabetic? . p11190)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11310 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . p11029) (raise-continuable . p11028) (raise . p11027) (guard . p10634) (else . p10626) (=> . p10625)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11311 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . p10858) (bitwise-reverse-bit-field . p10857) (bitwise-length . p10856) (bitwise-if . p10855) (bitwise-first-bit-set . p10854) (bitwise-copy-bit-field . p10853) (bitwise-copy-bit . p10852) (bitwise-bit-set? . p10851) (bitwise-bit-field . p10850) (bitwise-bit-count . p10849) (bitwise-xor . p10848) (bitwise-ior . p10847) (bitwise-and . p10846) (bitwise-not . p10845) (bitwise-arithmetic-shift-right . p10844) (bitwise-arithmetic-shift-left . p10843) (bitwise-arithmetic-shift . p10842)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11312 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . p10903) (fxxor . p10902) (fxrotate-bit-field . p10901) (fxreverse-bit-field . p10900) (fxpositive? . p10899) (fxodd? . p10898) (fxnot . p10897) (fxnegative? . p10896) (fxmod0 . p10895) (fxmod . p10894) (fxmin . p10893) (fxmax . p10892) (fxlength . p10891) (fxior . p10890) (fxif . p10889) (fxfirst-bit-set . p10888) (fxeven? . p10887) (fxdiv0-and-mod0 . p10886) (fxdiv0 . p10885) (fxdiv-and-mod . p10884) (fxdiv . p10883) (fxcopy-bit-field . p10882) (fxcopy-bit . p10881) (fxbit-set? . p10880) (fxbit-field . p10879) (fxbit-count . p10878) (fxarithmetic-shift-right . p10877) (fxarithmetic-shift-left . p10876) (fxarithmetic-shift . p10875) (fxand . p10874) (fx>? . p10873) (fx>=? . p10872) (fx=? . p10871) (fx<? . p10870) (fx<=? . p10869) (fx-/carry . p10868) (fx- . p10867) (fx+/carry . p10866) (fx+ . p10865) (fx*/carry . p10864) (fx* . p10863) (greatest-fixnum . p10862) (least-fixnum . p10861) (fixnum-width . p10860) (fixnum? . p10859)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11313 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . p10063) (no-infinities-violation? . p10042) (make-no-nans-violation . p10061) (make-no-infinities-violation . p10040) (real->flonum . p10949) (flzero? . p10948) (fltruncate . p10947) (fltan . p10946) (flsqrt . p10945) (flsin . p10944) (flround . p10943) (flpositive? . p10942) (flonum? . p10941) (flodd? . p10940) (flnumerator . p10939) (flnegative? . p10938) (flnan? . p10937) (flmod0 . p10936) (flmod . p10935) (flmin . p10934) (flmax . p10933) (fllog . p10932) (flinteger? . p10931) (flinfinite? . p10930) (flfloor . p10929) (flfinite? . p10928) (flexpt . p10927) (flexp . p10926) (fleven? . p10925) (fldiv0-and-mod0 . p10924) (fldiv0 . p10923) (fldiv-and-mod . p10922) (fldiv . p10921) (fldenominator . p10920) (flcos . p10919) (flceiling . p10918) (flatan . p10917) (flasin . p10916) (flacos . p10915) (flabs . p10914) (fl>? . p10913) (fl>=? . p10912) (fl=? . p10911) (fl<? . p10910) (fl<=? . p10909) (fl/ . p10908) (fl- . p10907) (fl+ . p10906) (fl* . p10905) (fixnum->flonum . p10904) (&no-nans . p10678) (&no-infinities . p10677)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11314 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . p11167) (string-ci-hash . p11166) (string-hash . p11165) (equal-hash . p11164) (hashtable-equivalence-function . p11163) (make-hashtable . p11162) (hashtable-hash-function . p11161) (make-eqv-hashtable . p11160) (make-eq-hashtable . p11159) (hashtable? . p11158) (hashtable-update! . p11157) (hashtable-size . p11156) (hashtable-set! . p11155) (hashtable-ref . p11154) (hashtable-mutable? . p11153) (hashtable-keys . p11152) (hashtable-entries . p11151) (hashtable-delete! . p11150) (hashtable-copy . p11149) (hashtable-contains? . p11148) (hashtable-clear! . p11147)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11315 '(rnrs io ports) '(6) '() '() '() '((eof-object? . p11131) (eof-object . p11130) (current-error-port . p11129) (current-output-port . p11128) (current-input-port . p11127) (output-port? . p11126) (input-port? . p11125) (utf-8-codec . p11124) (utf-16-codec . p11123) (transcoder-error-handling-mode . p11122) (transcoder-eol-style . p11121) (transcoder-codec . p11120) (transcoded-port . p11119) (textual-port? . p11118) (string->bytevector . p11117) (standard-output-port . p11116) (standard-input-port . p11115) (standard-error-port . p11114) (set-port-position! . p11113) (put-u8 . p11112) (put-string . p11111) (put-datum . p11110) (put-char . p11109) (put-bytevector . p11108) (port? . p11107) (port-transcoder . p11106) (port-position . p11105) (port-has-set-port-position!? . p11104) (port-has-port-position? . p11103) (port-eof? . p11102) (output-port-buffer-mode . p11101) (open-string-output-port . p11100) (open-string-input-port . p11099) (open-file-output-port . p11098) (open-file-input/output-port . p11097) (open-file-input-port . p11096) (open-bytevector-output-port . p11095) (open-bytevector-input-port . p11094) (native-transcoder . p11093) (native-eol-style . p11092) (make-transcoder . p11091) (latin-1-codec . p11090) (make-i/o-write-error . p9810) (make-i/o-read-error . p9789) (make-i/o-port-error . p9968) (make-i/o-invalid-position-error . p9832) (make-i/o-filename-error . p9858) (make-i/o-file-protection-error . p9883) (make-i/o-file-is-read-only-error . p9904) (make-i/o-file-does-not-exist-error . p9946) (make-i/o-file-already-exists-error . p9925) (make-i/o-error . p9768) (make-i/o-encoding-error . p10015) (make-i/o-decoding-error . p9993) (make-custom-textual-output-port . p11089) (make-custom-textual-input/output-port . p11088) (make-custom-textual-input-port . p11087) (make-custom-binary-output-port . p11086) (make-custom-binary-input/output-port . p11085) (make-custom-binary-input-port . p11084) (lookahead-u8 . p11082) (lookahead-char . p11081) (i/o-write-error? . p9812) (i/o-read-error? . p9791) (i/o-port-error? . p9972) (i/o-invalid-position-error? . p9836) (i/o-filename-error? . p9862) (i/o-file-protection-error? . p9885) (i/o-file-is-read-only-error? . p9906) (i/o-file-does-not-exist-error? . p9948) (i/o-file-already-exists-error? . p9927) (i/o-error? . p9770) (i/o-error-position . p9838) (i/o-error-port . p9974) (i/o-error-filename . p9864) (i/o-encoding-error? . p10019) (i/o-encoding-error-char . p10021) (i/o-decoding-error? . p9995) (get-u8 . p11080) (get-string-n! . p11079) (get-string-n . p11078) (get-string-all . p11077) (get-line . p11076) (get-datum . p11075) (get-char . p11074) (get-bytevector-some . p11073) (get-bytevector-n! . p11072) (get-bytevector-n . p11071) (get-bytevector-all . p11070) (flush-output-port . p11069) (close-port . p11068) (call-with-string-output-port . p11035) (call-with-port . p11034) (call-with-bytevector-output-port . p11033) (bytevector->string . p11032) (buffer-mode? . p11031) (binary-port? . p11030) (&i/o-encoding . p10676) (&i/o-decoding . p10675) (&i/o-port . p10674) (&i/o-file-does-not-exist . p10673) (&i/o-file-already-exists . p10672) (&i/o-file-is-read-only . p10671) (&i/o-file-protection . p10670) (&i/o-filename . p10669) (&i/o-invalid-position . p10668) (&i/o-write . p10667) (&i/o-read . p10666) (&i/o . p10665) (error-handling-mode . p10638) (file-options . p10637) (buffer-mode . p10636) (eol-style . p10635)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11316 '(rnrs enums) '(6) '() '() '() '((make-enumeration . p11026) (enum-set=? . p11025) (enum-set-universe . p11024) (enum-set-union . p11023) (enum-set-subset? . p11022) (enum-set-projection . p11021) (enum-set-member? . p11020) (enum-set-intersection . p11019) (enum-set-indexer . p11018) (enum-set-difference . p11017) (enum-set-constructor . p11016) (enum-set-complement . p11015) (enum-set->list . p11014) (define-enumeration . p10649)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11317 '(rnrs conditions) '(6) '() '() '() '((who-condition? . p9632) (warning? . p9498) (violation? . p9561) (undefined-violation? . p9749) (syntax-violation? . p9724) (syntax-violation-subform . p9728) (syntax-violation-form . p9726) (syntax-violation . p2997) (simple-conditions . p11013) (serious-condition? . p9519) (non-continuable-violation? . p9655) (message-condition? . p9475) (make-who-condition . p9628) (make-warning . p9496) (make-violation . p9559) (make-undefined-violation . p9747) (make-syntax-violation . p9718) (make-serious-condition . p9517) (make-non-continuable-violation . p9653) (make-message-condition . p9471) (make-lexical-violation . p9695) (make-irritants-condition . p9602) (make-implementation-restriction-violation . p9674) (make-error . p9538) (make-assertion-violation . p9580) (lexical-violation? . p9697) (irritants-condition? . p9606) (implementation-restriction-violation? . p9676) (error? . p9540) (condition-who . p9634) (condition-predicate . p11012) (condition-message . p9477) (condition-irritants . p9608) (condition-accessor . p11011) (condition . p11010) (assertion-violation? . p9582) (condition? . p11009) (&undefined . p10664) (&syntax . p10663) (&lexical . p10662) (&implementation-restriction . p10661) (&non-continuable . p10660) (&who . p10659) (&irritants . p10658) (&assertion . p10657) (&violation . p10656) (&error . p10655) (&serious . p10654) (&warning . p10653) (&message . p10652) (&condition . p10651) (define-condition-type . p10650)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11318 '(rnrs records inspection) '(6) '() '() '() '((record? . p11182) (record-type-uid . p11181) (record-type-sealed? . p11180) (record-type-parent . p11179) (record-type-opaque? . p11178) (record-type-name . p11177) (record-type-generative? . p11176) (record-type-field-names . p11175) (record-rtd . p11174) (record-field-mutable? . p11173)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11319 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . p11189) (record-predicate . p11188) (record-mutator . p11187) (record-constructor . p11186) (record-accessor . p11185) (make-record-type-descriptor . p11184) (make-record-constructor-descriptor . p11183)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11320 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . p10648) (parent-rtd . p10647) (nongenerative . p10646) (opaque . p10645) (sealed . p10644) (protocol . p10643) (parent . p10642) (immutable . p10641) (mutable . p10640) (fields . p10639) (record-constructor-descriptor . p10606) (record-type-descriptor . p10605)) '() values values '#f '#f '#t '#f) (p1792@p1445@install-library 'p11321 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . p10067) (&no-nans-rtd . p10065) (&no-infinities-rcd . p10046) (&no-infinities-rtd . p10044) (&i/o-encoding-rcd . p10025) (&i/o-encoding-rtd . p10023) (&i/o-decoding-rcd . p9999) (&i/o-decoding-rtd . p9997) (&i/o-port-rcd . p9978) (&i/o-port-rtd . p9976) (&i/o-file-does-not-exist-rcd . p9952) (&i/o-file-does-not-exist-rtd . p9950) (&i/o-file-already-exists-rcd . p9931) (&i/o-file-already-exists-rtd . p9929) (&i/o-file-is-read-only-rcd . p9910) (&i/o-file-is-read-only-rtd . p9908) (&i/o-file-protection-rcd . p9889) (&i/o-file-protection-rtd . p9887) (&i/o-filename-rcd . p9868) (&i/o-filename-rtd . p9866) (&i/o-invalid-position-rcd . p9842) (&i/o-invalid-position-rtd . p9840) (&i/o-write-rcd . p9816) (&i/o-write-rtd . p9814) (&i/o-read-rcd . p9795) (&i/o-read-rtd . p9793) (&i/o-rcd . p9774) (&i/o-rtd . p9772) (&undefined-rcd . p9753) (&undefined-rtd . p9751) (&syntax-rcd . p9732) (&syntax-rtd . p9730) (&lexical-rcd . p9701) (&lexical-rtd . p9699) (&implementation-restriction-rcd . p9680) (&implementation-restriction-rtd . p9678) (&non-continuable-rcd . p9659) (&non-continuable-rtd . p9657) (&who-rcd . p9638) (&who-rtd . p9636) (&irritants-rcd . p9612) (&irritants-rtd . p9610) (&assertion-rcd . p9586) (&assertion-rtd . p9584) (&violation-rcd . p9565) (&violation-rtd . p9563) (&error-rcd . p9544) (&error-rtd . p9542) (&serious-rcd . p9523) (&serious-rtd . p9521) (&warning-rcd . p9502) (&warning-rtd . p9500) (&message-rcd . p9481) (&message-rtd . p9479) (&condition-rcd . p9390) (&condition-rtd . p9388) (syntax-error . p2993) (syntax-dispatch . p2764) (pretty-print . p11289) (eval-core . p11288) (set-symbol-value! . p11287) (symbol-value . p11286) (gensym . p915) (void . p11285) (load . p10336) (interaction-environment . p3009) (char-ready? . p11284) (regexp? . p11283) (read-line . p11282) (ungensym . p11281) (alist->eq-hash-table . p11280) (assoc-ref . p11279) (print . p11278) (format . p11277) (host-os . p11276) (library-path . p1412) (standard-library-path . p11275) (file-newer? . p11274) (stat-mtime . p11273) (write-to-file . p11272) (file->list . p11271) (file->string . p11270) (digit->integer . p11269) (call-with-string-input-port . p11268) (call-with-string-io . p11267) (string-split . p11266) (bytevector-for-each . p11265) (string->regexp . p11264) (rxmatch . p11263) (regexp-replace-all . p11262) (hashtable-for-each . p11261) (call-process . p11260) (local-tz-offset . p11259) (microseconds . p11258) (readdir . p11257) (set-current-directory! . p11256) (expand-path . p11255) (current-directory . p11254) (%spawn . p11253) (%waitpid . p11252) (%ffi-supported? . p11251) (%ffi-pointer-ref . p11250) (%ffi-pointer->string . p11249) (%ffi-call->string-or-zero . p11248) (%ffi-call->double . p11247) (%ffi-call->void* . p11246) (%ffi-call->void . p11245) (%ffi-call->int . p11244) (%ffi-lookup . p11243) (%ffi-open . p11242) (%fork . p11241) (%pipe . p11240) (p . p11239) (open-output-string . p11238) (get-output-string . p11237) (get-environment-variables . p11236) (get-environment-variable . p11235) (get-timeofday . p11234) (get-command-line . p11233) (sys-display . p11232) (mosh-executable-path . p11231) (make-file-options . p11230) (source-info . p11229) (make-compiler-instruction . p11228) (make-instruction . p11227) (set-source-info! . p11226) (bignum? . p11225) (fast-equal? . p11224) (fasl-read . p11223) (fasl-write . p11222) (time-usage . p11221) (os-constant . p11220) (make-parameter . p943) (make-socket . p11219) (string-upcase . p11218) (string-titlecase . p11217) (string-normalize-nfkd . p11216) (string-normalize-nfkc . p11215) (string-normalize-nfd . p11214) (string-normalize-nfc . p11213) (string-foldcase . p11212) (string-downcase . p11211) (string-ci>? . p11210) (string-ci>=? . p11209) (string-ci=? . p11208) (string-ci<? . p11207) (string-ci<=? . p11206) (char-whitespace? . p11205) (char-upper-case? . p11204) (char-title-case? . p11203) (char-numeric? . p11202) (char-lower-case? . p11201) (char-general-category . p11200) (char-upcase . p11199) (char-titlecase . p11198) (char-foldcase . p11197) (char-downcase . p11196) (char-ci>? . p11195) (char-ci>=? . p11194) (char-ci=? . p11193) (char-ci<? . p11192) (char-ci<=? . p11191) (char-alphabetic? . p11190) (make-variable-transformer . p2323) (identifier? . p2999) (generate-temporaries . p2979) (free-identifier=? . p2981) (syntax->datum . p3003) (datum->syntax . p3001) (bound-identifier=? . p2983) (record-type-descriptor? . p11189) (record-predicate . p11188) (record-mutator . p11187) (record-constructor . p11186) (record-accessor . p11185) (make-record-type-descriptor . p11184) (make-record-constructor-descriptor . p11183) (record? . p11182) (record-type-uid . p11181) (record-type-sealed? . p11180) (record-type-parent . p11179) (record-type-opaque? . p11178) (record-type-name . p11177) (record-type-generative? . p11176) (record-type-field-names . p11175) (record-rtd . p11174) (record-field-mutable? . p11173) (delete-file . p11172) (file-exists? . p11171) (vector-sort! . p11170) (vector-sort . p11169) (list-sort . p11168) (symbol-hash . p11167) (string-ci-hash . p11166) (string-hash . p11165) (equal-hash . p11164) (hashtable-equivalence-function . p11163) (make-hashtable . p11162) (hashtable-hash-function . p11161) (make-eqv-hashtable . p11160) (make-eq-hashtable . p11159) (hashtable? . p11158) (hashtable-update! . p11157) (hashtable-size . p11156) (hashtable-set! . p11155) (hashtable-ref . p11154) (hashtable-mutable? . p11153) (hashtable-keys . p11152) (hashtable-entries . p11151) (hashtable-delete! . p11150) (hashtable-copy . p11149) (hashtable-contains? . p11148) (hashtable-clear! . p11147) (call-with-output-file . p11146) (call-with-input-file . p11145) (write-char . p11144) (write . p11143) (with-output-to-file . p11142) (with-input-from-file . p11141) (read-char . p11140) (read . p11139) (peek-char . p11138) (open-output-file . p11137) (open-input-file . p11136) (newline . p11135) (display . p11134) (close-output-port . p11133) (close-input-port . p11132) (eof-object? . p11131) (eof-object . p11130) (current-error-port . p11129) (current-output-port . p11128) (current-input-port . p11127) (output-port? . p11126) (input-port? . p11125) (utf-8-codec . p11124) (utf-16-codec . p11123) (transcoder-error-handling-mode . p11122) (transcoder-eol-style . p11121) (transcoder-codec . p11120) (transcoded-port . p11119) (textual-port? . p11118) (string->bytevector . p11117) (standard-output-port . p11116) (standard-input-port . p11115) (standard-error-port . p11114) (set-port-position! . p11113) (put-u8 . p11112) (put-string . p11111) (put-datum . p11110) (put-char . p11109) (put-bytevector . p11108) (port? . p11107) (port-transcoder . p11106) (port-position . p11105) (port-has-set-port-position!? . p11104) (port-has-port-position? . p11103) (port-eof? . p11102) (output-port-buffer-mode . p11101) (open-string-output-port . p11100) (open-string-input-port . p11099) (open-file-output-port . p11098) (open-file-input/output-port . p11097) (open-file-input-port . p11096) (open-bytevector-output-port . p11095) (open-bytevector-input-port . p11094) (native-transcoder . p11093) (native-eol-style . p11092) (make-transcoder . p11091) (latin-1-codec . p11090) (make-i/o-write-error . p9810) (make-i/o-read-error . p9789) (make-i/o-port-error . p9968) (make-i/o-invalid-position-error . p9832) (make-i/o-filename-error . p9858) (make-i/o-file-protection-error . p9883) (make-i/o-file-is-read-only-error . p9904) (make-i/o-file-does-not-exist-error . p9946) (make-i/o-file-already-exists-error . p9925) (make-i/o-error . p9768) (make-i/o-encoding-error . p10015) (make-i/o-decoding-error . p9993) (make-custom-textual-output-port . p11089) (make-custom-textual-input/output-port . p11088) (make-custom-textual-input-port . p11087) (make-custom-binary-output-port . p11086) (make-custom-binary-input/output-port . p11085) (make-custom-binary-input-port . p11084) (make-bytevector . p11083) (lookahead-u8 . p11082) (lookahead-char . p11081) (i/o-write-error? . p9812) (i/o-read-error? . p9791) (i/o-port-error? . p9972) (i/o-invalid-position-error? . p9836) (i/o-filename-error? . p9862) (i/o-file-protection-error? . p9885) (i/o-file-is-read-only-error? . p9906) (i/o-file-does-not-exist-error? . p9948) (i/o-file-already-exists-error? . p9927) (i/o-error? . p9770) (i/o-error-position . p9838) (i/o-error-port . p9974) (i/o-error-filename . p9864) (i/o-encoding-error? . p10019) (i/o-encoding-error-char . p10021) (i/o-decoding-error? . p9995) (get-u8 . p11080) (get-string-n! . p11079) (get-string-n . p11078) (get-string-all . p11077) (get-line . p11076) (get-datum . p11075) (get-char . p11074) (get-bytevector-some . p11073) (get-bytevector-n! . p11072) (get-bytevector-n . p11071) (get-bytevector-all . p11070) (flush-output-port . p11069) (close-port . p11068) (scheme-report-environment . p2961) (quotient . p11067) (null-environment . p2959) (remainder . p11066) (modulo . p11065) (inexact->exact . p11064) (force . p11063) (exact->inexact . p11062) (make-promise . p11061) (exit . p11060) (command-line . p10330) (string-fill! . p11059) (string-set! . p11058) (set-cdr! . p11057) (set-car! . p11056) (remove . p11055) (remv . p11054) (remp . p11053) (remq . p11052) (partition . p11051) (memv . p11050) (memq . p11049) (memp . p11048) (member . p11047) (exists . p11046) (for-all . p11045) (fold-right . p11044) (fold-left . p11043) (find . p11042) (filter . p11041) (cons* . p11040) (assv . p11039) (assq . p11038) (assp . p11037) (assoc . p11036) (call-with-string-output-port . p11035) (call-with-port . p11034) (call-with-bytevector-output-port . p11033) (bytevector->string . p11032) (buffer-mode? . p11031) (binary-port? . p11030) (with-exception-handler . p11029) (raise-continuable . p11028) (raise . p11027) (eval . p2965) (environment . p2957) (make-enumeration . p11026) (enum-set=? . p11025) (enum-set-universe . p11024) (enum-set-union . p11023) (enum-set-subset? . p11022) (enum-set-projection . p11021) (enum-set-member? . p11020) (enum-set-intersection . p11019) (enum-set-indexer . p11018) (enum-set-difference . p11017) (enum-set-constructor . p11016) (enum-set-complement . p11015) (enum-set->list . p11014) (who-condition? . p9632) (warning? . p9498) (violation? . p9561) (undefined-violation? . p9749) (syntax-violation? . p9724) (syntax-violation-subform . p9728) (syntax-violation-form . p9726) (syntax-violation . p2997) (simple-conditions . p11013) (serious-condition? . p9519) (non-continuable-violation? . p9655) (message-condition? . p9475) (make-who-condition . p9628) (make-warning . p9496) (make-violation . p9559) (make-undefined-violation . p9747) (make-syntax-violation . p9718) (make-serious-condition . p9517) (make-non-continuable-violation . p9653) (make-message-condition . p9471) (make-lexical-violation . p9695) (make-irritants-condition . p9602) (make-implementation-restriction-violation . p9674) (make-error . p9538) (make-assertion-violation . p9580) (lexical-violation? . p9697) (irritants-condition? . p9606) (implementation-restriction-violation? . p9676) (error? . p9540) (condition-who . p9634) (condition-predicate . p11012) (condition-message . p9477) (condition-irritants . p9608) (condition-accessor . p11011) (condition . p11010) (assertion-violation? . p9582) (condition? . p11009) (utf32->string . p11008) (utf16->string . p11007) (utf8->string . p11006) (uint-list->bytevector . p11005) (u8-list->bytevector . p11004) (string->utf8 . p11003) (string->utf32 . p11002) (string->utf16 . p11001) (sint-list->bytevector . p11000) (native-endianness . p10999) (bytevector? . p10998) (bytevector=? . p10997) (bytevector-uint-set! . p10996) (bytevector-uint-ref . p10995) (bytevector-u8-set! . p10994) (bytevector-u8-ref . p10993) (bytevector-u64-set! . p10992) (bytevector-u64-ref . p10991) (bytevector-u64-native-set! . p10990) (bytevector-u64-native-ref . p10989) (bytevector-u32-set! . p10988) (bytevector-u32-ref . p10987) (bytevector-u32-native-set! . p10986) (bytevector-u32-native-ref . p10985) (bytevector-u16-set! . p10984) (bytevector-u16-ref . p10983) (bytevector-u16-native-set! . p10982) (bytevector-u16-native-ref . p10981) (bytevector-sint-set! . p10980) (bytevector-sint-ref . p10979) (bytevector-s8-set! . p10978) (bytevector-s8-ref . p10977) (bytevector-s64-set! . p10976) (bytevector-s64-ref . p10975) (bytevector-s64-native-set! . p10974) (bytevector-s64-native-ref . p10973) (bytevector-s32-set! . p10972) (bytevector-s32-ref . p10971) (bytevector-s32-native-set! . p10970) (bytevector-s32-native-ref . p10969) (bytevector-s16-set! . p10968) (bytevector-s16-ref . p10967) (bytevector-s16-native-set! . p10966) (bytevector-s16-native-ref . p10965) (bytevector-length . p10964) (bytevector-ieee-single-ref . p10963) (bytevector-ieee-single-set! . p10962) (bytevector-ieee-single-native-set! . p10961) (bytevector-ieee-single-native-ref . p10960) (bytevector-ieee-double-set! . p10959) (bytevector-ieee-double-ref . p10958) (bytevector-ieee-double-native-set! . p10957) (bytevector-ieee-double-native-ref . p10956) (bytevector-fill! . p10955) (bytevector-copy! . p10954) (bytevector-copy . p10953) (bytevector->uint-list . p10952) (bytevector->u8-list . p10951) (bytevector->sint-list . p10950) (no-nans-violation? . p10063) (no-infinities-violation? . p10042) (make-no-nans-violation . p10061) (make-no-infinities-violation . p10040) (real->flonum . p10949) (flzero? . p10948) (fltruncate . p10947) (fltan . p10946) (flsqrt . p10945) (flsin . p10944) (flround . p10943) (flpositive? . p10942) (flonum? . p10941) (flodd? . p10940) (flnumerator . p10939) (flnegative? . p10938) (flnan? . p10937) (flmod0 . p10936) (flmod . p10935) (flmin . p10934) (flmax . p10933) (fllog . p10932) (flinteger? . p10931) (flinfinite? . p10930) (flfloor . p10929) (flfinite? . p10928) (flexpt . p10927) (flexp . p10926) (fleven? . p10925) (fldiv0-and-mod0 . p10924) (fldiv0 . p10923) (fldiv-and-mod . p10922) (fldiv . p10921) (fldenominator . p10920) (flcos . p10919) (flceiling . p10918) (flatan . p10917) (flasin . p10916) (flacos . p10915) (flabs . p10914) (fl>? . p10913) (fl>=? . p10912) (fl=? . p10911) (fl<? . p10910) (fl<=? . p10909) (fl/ . p10908) (fl- . p10907) (fl+ . p10906) (fl* . p10905) (fixnum->flonum . p10904) (fxzero? . p10903) (fxxor . p10902) (fxrotate-bit-field . p10901) (fxreverse-bit-field . p10900) (fxpositive? . p10899) (fxodd? . p10898) (fxnot . p10897) (fxnegative? . p10896) (fxmod0 . p10895) (fxmod . p10894) (fxmin . p10893) (fxmax . p10892) (fxlength . p10891) (fxior . p10890) (fxif . p10889) (fxfirst-bit-set . p10888) (fxeven? . p10887) (fxdiv0-and-mod0 . p10886) (fxdiv0 . p10885) (fxdiv-and-mod . p10884) (fxdiv . p10883) (fxcopy-bit-field . p10882) (fxcopy-bit . p10881) (fxbit-set? . p10880) (fxbit-field . p10879) (fxbit-count . p10878) (fxarithmetic-shift-right . p10877) (fxarithmetic-shift-left . p10876) (fxarithmetic-shift . p10875) (fxand . p10874) (fx>? . p10873) (fx>=? . p10872) (fx=? . p10871) (fx<? . p10870) (fx<=? . p10869) (fx-/carry . p10868) (fx- . p10867) (fx+/carry . p10866) (fx+ . p10865) (fx*/carry . p10864) (fx* . p10863) (greatest-fixnum . p10862) (least-fixnum . p10861) (fixnum-width . p10860) (fixnum? . p10859) (bitwise-rotate-bit-field . p10858) (bitwise-reverse-bit-field . p10857) (bitwise-length . p10856) (bitwise-if . p10855) (bitwise-first-bit-set . p10854) (bitwise-copy-bit-field . p10853) (bitwise-copy-bit . p10852) (bitwise-bit-set? . p10851) (bitwise-bit-field . p10850) (bitwise-bit-count . p10849) (bitwise-xor . p10848) (bitwise-ior . p10847) (bitwise-and . p10846) (bitwise-not . p10845) (bitwise-arithmetic-shift-right . p10844) (bitwise-arithmetic-shift-left . p10843) (bitwise-arithmetic-shift . p10842) (zero? . p10841) (vector? . p10840) (vector-set! . p10839) (vector-ref . p10838) (vector-map . p10837) (vector-length . p10836) (vector-for-each . p10835) (vector-fill! . p10834) (vector->list . p10833) (vector . p10832) (values . p10831) (truncate . p10830) (tan . p10829) (symbol? . p10828) (symbol=? . p10827) (symbol->string . p10826) (substring . p10825) (string? . p10824) (string>? . p10823) (string>=? . p10822) (string=? . p10821) (string<? . p10820) (string<=? . p10819) (string-ref . p10818) (string-length . p10817) (string-for-each . p10816) (string-copy . p10815) (string-append . p10814) (string->symbol . p10813) (string->number . p10812) (string->list . p10811) (string . p10810) (sqrt . p10809) (sin . p10808) (round . p10807) (reverse . p10806) (real? . p10805) (real-valued? . p10804) (real-part . p10803) (rationalize . p10802) (rational? . p10801) (rational-valued? . p10800) (procedure? . p10799) (positive? . p10798) (pair? . p10797) (odd? . p10796) (numerator . p10795) (number? . p10794) (number->string . p10793) (null? . p10792) (not . p10791) (negative? . p10790) (nan? . p10789) (min . p10788) (max . p10787) (map . p10786) (make-vector . p10785) (make-string . p10784) (make-rectangular . p10783) (make-polar . p10782) (magnitude . p10781) (log . p10780) (list? . p10779) (list-tail . p10778) (list-ref . p10777) (list->vector . p10776) (list->string . p10775) (list . p10774) (length . p10773) (lcm . p10772) (integer? . p10771) (integer-valued? . p10770) (integer->char . p10769) (infinite? . p10768) (inexact? . p10767) (inexact . p10766) (imag-part . p10765) (gcd . p10764) (for-each . p10763) (floor . p10762) (finite? . p10761) (expt . p10760) (exp . p10759) (exact? . p10758) (exact-integer-sqrt . p10757) (exact . p10756) (even? . p10755) (error . p10754) (eqv? . p10753) (equal? . p10752) (eq? . p10751) (dynamic-wind . p10750) (div0-and-mod0 . p10749) (mod0 . p10748) (div0 . p10747) (div-and-mod . p10746) (mod . p10745) (div . p10744) (denominator . p10743) (cos . p10742) (cons . p10741) (complex? . p10740) (char? . p10739) (char>? . p10738) (char>=? . p10737) (char=? . p10736) (char<? . p10735) (char<=? . p10734) (char->integer . p10733) (ceiling . p10732) (call-with-values . p10731) (call/cc . p10730) (call-with-current-continuation . p10729) (cddddr . p10728) (cdddar . p10727) (cddadr . p10726) (cddaar . p10725) (cdaddr . p10724) (cdadar . p10723) (cdaadr . p10722) (cdaaar . p10721) (cadddr . p10720) (caddar . p10719) (cadadr . p10718) (cadaar . p10717) (caaddr . p10716) (caadar . p10715) (caaadr . p10714) (caaaar . p10713) (cdddr . p10712) (cddar . p10711) (cdadr . p10710) (cdaar . p10709) (caddr . p10708) (cadar . p10707) (caadr . p10706) (caaar . p10705) (cddr . p10704) (cdar . p10703) (cadr . p10702) (caar . p10701) (cdr . p10700) (car . p10699) (boolean? . p10698) (boolean=? . p10697) (atan . p10696) (assertion-violation . p10695) (assertion-error . p2991) (asin . p10694) (apply . p10693) (append . p10692) (angle . p10691) (acos . p10690) (abs . p10689) (/ . p10688) (* . p10687) (- . p10686) (+ . p10685) (>= . p10684) (> . p10683) (= . p10682) (<= . p10681) (< . p10680) (library . p10679) (&no-nans . p10678) (&no-infinities . p10677) (&i/o-encoding . p10676) (&i/o-decoding . p10675) (&i/o-port . p10674) (&i/o-file-does-not-exist . p10673) (&i/o-file-already-exists . p10672) (&i/o-file-is-read-only . p10671) (&i/o-file-protection . p10670) (&i/o-filename . p10669) (&i/o-invalid-position . p10668) (&i/o-write . p10667) (&i/o-read . p10666) (&i/o . p10665) (&undefined . p10664) (&syntax . p10663) (&lexical . p10662) (&implementation-restriction . p10661) (&non-continuable . p10660) (&who . p10659) (&irritants . p10658) (&assertion . p10657) (&violation . p10656) (&error . p10655) (&serious . p10654) (&warning . p10653) (&message . p10652) (&condition . p10651) (define-condition-type . p10650) (define-enumeration . p10649) (define-record-type . p10648) (parent-rtd . p10647) (nongenerative . p10646) (opaque . p10645) (sealed . p10644) (protocol . p10643) (parent . p10642) (immutable . p10641) (mutable . p10640) (fields . p10639) (error-handling-mode . p10638) (file-options . p10637) (buffer-mode . p10636) (eol-style . p10635) (guard . p10634) (trace-define . p10633) (trace-lambda . p10632) (unsyntax-splicing . p10631) (unsyntax . p10630) (unquote-splicing . p10629) (unquote . p10628) (_ . p10627) (else . p10626) (=> . p10625) (... . p10624) (assert . p10623) (endianness . p10622) (delay . p10621) (time . p10620) (do . p10619) (cond . p10618) (let* . p10617) (let . p10616) (let*-values . p10615) (let-values . p10614) (identifier-syntax . p10613) (with-syntax . p10612) (quasisyntax . p10611) (quasiquote . p10610) (syntax-rules . p10609) (include . p10608) (define-struct . p10607) (record-constructor-descriptor . p10606) (record-type-descriptor . p10605) (case . p10604) (parameterize . p10603) (unless . p10602) (when . p10601) (or . p10600) (and . p10599) (if . p10598) (letrec* . p10597) (letrec . p10596) (type-descriptor . p10595) (case-lambda . p10594) (lambda . p10593) (syntax . p10592) (syntax-case . p10591) (quote . p10590) (foreign-call . p10589) (letrec-syntax . p10588) (let-syntax . p10587) (set! . p10586) (import . p10585) (begin . p10584) (module . p10583) (define-syntax . p10582) (define . p10581)) '((p10067 core-prim . &no-nans-rcd) (p10065 core-prim . &no-nans-rtd) (p10046 core-prim . &no-infinities-rcd) (p10044 core-prim . &no-infinities-rtd) (p10025 core-prim . &i/o-encoding-rcd) (p10023 core-prim . &i/o-encoding-rtd) (p9999 core-prim . &i/o-decoding-rcd) (p9997 core-prim . &i/o-decoding-rtd) (p9978 core-prim . &i/o-port-rcd) (p9976 core-prim . &i/o-port-rtd) (p9952 core-prim . &i/o-file-does-not-exist-rcd) (p9950 core-prim . &i/o-file-does-not-exist-rtd) (p9931 core-prim . &i/o-file-already-exists-rcd) (p9929 core-prim . &i/o-file-already-exists-rtd) (p9910 core-prim . &i/o-file-is-read-only-rcd) (p9908 core-prim . &i/o-file-is-read-only-rtd) (p9889 core-prim . &i/o-file-protection-rcd) (p9887 core-prim . &i/o-file-protection-rtd) (p9868 core-prim . &i/o-filename-rcd) (p9866 core-prim . &i/o-filename-rtd) (p9842 core-prim . &i/o-invalid-position-rcd) (p9840 core-prim . &i/o-invalid-position-rtd) (p9816 core-prim . &i/o-write-rcd) (p9814 core-prim . &i/o-write-rtd) (p9795 core-prim . &i/o-read-rcd) (p9793 core-prim . &i/o-read-rtd) (p9774 core-prim . &i/o-rcd) (p9772 core-prim . &i/o-rtd) (p9753 core-prim . &undefined-rcd) (p9751 core-prim . &undefined-rtd) (p9732 core-prim . &syntax-rcd) (p9730 core-prim . &syntax-rtd) (p9701 core-prim . &lexical-rcd) (p9699 core-prim . &lexical-rtd) (p9680 core-prim . &implementation-restriction-rcd) (p9678 core-prim . &implementation-restriction-rtd) (p9659 core-prim . &non-continuable-rcd) (p9657 core-prim . &non-continuable-rtd) (p9638 core-prim . &who-rcd) (p9636 core-prim . &who-rtd) (p9612 core-prim . &irritants-rcd) (p9610 core-prim . &irritants-rtd) (p9586 core-prim . &assertion-rcd) (p9584 core-prim . &assertion-rtd) (p9565 core-prim . &violation-rcd) (p9563 core-prim . &violation-rtd) (p9544 core-prim . &error-rcd) (p9542 core-prim . &error-rtd) (p9523 core-prim . &serious-rcd) (p9521 core-prim . &serious-rtd) (p9502 core-prim . &warning-rcd) (p9500 core-prim . &warning-rtd) (p9481 core-prim . &message-rcd) (p9479 core-prim . &message-rtd) (p9390 core-prim . &condition-rcd) (p9388 core-prim . &condition-rtd) (p2993 core-prim . syntax-error) (p2764 core-prim . syntax-dispatch) (p11289 core-prim . pretty-print) (p11288 core-prim . eval-core) (p11287 core-prim . set-symbol-value!) (p11286 core-prim . symbol-value) (p915 core-prim . gensym) (p11285 core-prim . void) (p10336 core-prim . load) (p3009 core-prim . interaction-environment) (p11284 core-prim . char-ready?) (p11283 core-prim . regexp?) (p11282 core-prim . read-line) (p11281 core-prim . ungensym) (p11280 core-prim . alist->eq-hash-table) (p11279 core-prim . assoc-ref) (p11278 core-prim . print) (p11277 core-prim . format) (p11276 core-prim . host-os) (p1412 core-prim . library-path) (p11275 core-prim . standard-library-path) (p11274 core-prim . file-newer?) (p11273 core-prim . stat-mtime) (p11272 core-prim . write-to-file) (p11271 core-prim . file->list) (p11270 core-prim . file->string) (p11269 core-prim . digit->integer) (p11268 core-prim . call-with-string-input-port) (p11267 core-prim . call-with-string-io) (p11266 core-prim . string-split) (p11265 core-prim . bytevector-for-each) (p11264 core-prim . string->regexp) (p11263 core-prim . rxmatch) (p11262 core-prim . regexp-replace-all) (p11261 core-prim . hashtable-for-each) (p11260 core-prim . call-process) (p11259 core-prim . local-tz-offset) (p11258 core-prim . microseconds) (p11257 core-prim . readdir) (p11256 core-prim . set-current-directory!) (p11255 core-prim . expand-path) (p11254 core-prim . current-directory) (p11253 core-prim . %spawn) (p11252 core-prim . %waitpid) (p11251 core-prim . %ffi-supported?) (p11250 core-prim . %ffi-pointer-ref) (p11249 core-prim . %ffi-pointer->string) (p11248 core-prim . %ffi-call->string-or-zero) (p11247 core-prim . %ffi-call->double) (p11246 core-prim . %ffi-call->void*) (p11245 core-prim . %ffi-call->void) (p11244 core-prim . %ffi-call->int) (p11243 core-prim . %ffi-lookup) (p11242 core-prim . %ffi-open) (p11241 core-prim . %fork) (p11240 core-prim . %pipe) (p11239 core-prim . p) (p11238 core-prim . open-output-string) (p11237 core-prim . get-output-string) (p11236 core-prim . get-environment-variables) (p11235 core-prim . get-environment-variable) (p11234 core-prim . get-timeofday) (p11233 core-prim . get-command-line) (p11232 core-prim . sys-display) (p11231 core-prim . mosh-executable-path) (p11230 core-prim . make-file-options) (p11229 core-prim . source-info) (p11228 core-prim . make-compiler-instruction) (p11227 core-prim . make-instruction) (p11226 core-prim . set-source-info!) (p11225 core-prim . bignum?) (p11224 core-prim . fast-equal?) (p11223 core-prim . fasl-read) (p11222 core-prim . fasl-write) (p11221 core-prim . time-usage) (p11220 core-prim . os-constant) (p943 core-prim . make-parameter) (p11219 core-prim . make-socket) (p11218 core-prim . string-upcase) (p11217 core-prim . string-titlecase) (p11216 core-prim . string-normalize-nfkd) (p11215 core-prim . string-normalize-nfkc) (p11214 core-prim . string-normalize-nfd) (p11213 core-prim . string-normalize-nfc) (p11212 core-prim . string-foldcase) (p11211 core-prim . string-downcase) (p11210 core-prim . string-ci>?) (p11209 core-prim . string-ci>=?) (p11208 core-prim . string-ci=?) (p11207 core-prim . string-ci<?) (p11206 core-prim . string-ci<=?) (p11205 core-prim . char-whitespace?) (p11204 core-prim . char-upper-case?) (p11203 core-prim . char-title-case?) (p11202 core-prim . char-numeric?) (p11201 core-prim . char-lower-case?) (p11200 core-prim . char-general-category) (p11199 core-prim . char-upcase) (p11198 core-prim . char-titlecase) (p11197 core-prim . char-foldcase) (p11196 core-prim . char-downcase) (p11195 core-prim . char-ci>?) (p11194 core-prim . char-ci>=?) (p11193 core-prim . char-ci=?) (p11192 core-prim . char-ci<?) (p11191 core-prim . char-ci<=?) (p11190 core-prim . char-alphabetic?) (p2323 core-prim . make-variable-transformer) (p2999 core-prim . identifier?) (p2979 core-prim . generate-temporaries) (p2981 core-prim . free-identifier=?) (p3003 core-prim . syntax->datum) (p3001 core-prim . datum->syntax) (p2983 core-prim . bound-identifier=?) (p11189 core-prim . record-type-descriptor?) (p11188 core-prim . record-predicate) (p11187 core-prim . record-mutator) (p11186 core-prim . record-constructor) (p11185 core-prim . record-accessor) (p11184 core-prim . make-record-type-descriptor) (p11183 core-prim . make-record-constructor-descriptor) (p11182 core-prim . record?) (p11181 core-prim . record-type-uid) (p11180 core-prim . record-type-sealed?) (p11179 core-prim . record-type-parent) (p11178 core-prim . record-type-opaque?) (p11177 core-prim . record-type-name) (p11176 core-prim . record-type-generative?) (p11175 core-prim . record-type-field-names) (p11174 core-prim . record-rtd) (p11173 core-prim . record-field-mutable?) (p11172 core-prim . delete-file) (p11171 core-prim . file-exists?) (p11170 core-prim . vector-sort!) (p11169 core-prim . vector-sort) (p11168 core-prim . list-sort) (p11167 core-prim . symbol-hash) (p11166 core-prim . string-ci-hash) (p11165 core-prim . string-hash) (p11164 core-prim . equal-hash) (p11163 core-prim . hashtable-equivalence-function) (p11162 core-prim . make-hashtable) (p11161 core-prim . hashtable-hash-function) (p11160 core-prim . make-eqv-hashtable) (p11159 core-prim . make-eq-hashtable) (p11158 core-prim . hashtable?) (p11157 core-prim . hashtable-update!) (p11156 core-prim . hashtable-size) (p11155 core-prim . hashtable-set!) (p11154 core-prim . hashtable-ref) (p11153 core-prim . hashtable-mutable?) (p11152 core-prim . hashtable-keys) (p11151 core-prim . hashtable-entries) (p11150 core-prim . hashtable-delete!) (p11149 core-prim . hashtable-copy) (p11148 core-prim . hashtable-contains?) (p11147 core-prim . hashtable-clear!) (p11146 core-prim . call-with-output-file) (p11145 core-prim . call-with-input-file) (p11144 core-prim . write-char) (p11143 core-prim . write) (p11142 core-prim . with-output-to-file) (p11141 core-prim . with-input-from-file) (p11140 core-prim . read-char) (p11139 core-prim . read) (p11138 core-prim . peek-char) (p11137 core-prim . open-output-file) (p11136 core-prim . open-input-file) (p11135 core-prim . newline) (p11134 core-prim . display) (p11133 core-prim . close-output-port) (p11132 core-prim . close-input-port) (p11131 core-prim . eof-object?) (p11130 core-prim . eof-object) (p11129 core-prim . current-error-port) (p11128 core-prim . current-output-port) (p11127 core-prim . current-input-port) (p11126 core-prim . output-port?) (p11125 core-prim . input-port?) (p11124 core-prim . utf-8-codec) (p11123 core-prim . utf-16-codec) (p11122 core-prim . transcoder-error-handling-mode) (p11121 core-prim . transcoder-eol-style) (p11120 core-prim . transcoder-codec) (p11119 core-prim . transcoded-port) (p11118 core-prim . textual-port?) (p11117 core-prim . string->bytevector) (p11116 core-prim . standard-output-port) (p11115 core-prim . standard-input-port) (p11114 core-prim . standard-error-port) (p11113 core-prim . set-port-position!) (p11112 core-prim . put-u8) (p11111 core-prim . put-string) (p11110 core-prim . put-datum) (p11109 core-prim . put-char) (p11108 core-prim . put-bytevector) (p11107 core-prim . port?) (p11106 core-prim . port-transcoder) (p11105 core-prim . port-position) (p11104 core-prim . port-has-set-port-position!?) (p11103 core-prim . port-has-port-position?) (p11102 core-prim . port-eof?) (p11101 core-prim . output-port-buffer-mode) (p11100 core-prim . open-string-output-port) (p11099 core-prim . open-string-input-port) (p11098 core-prim . open-file-output-port) (p11097 core-prim . open-file-input/output-port) (p11096 core-prim . open-file-input-port) (p11095 core-prim . open-bytevector-output-port) (p11094 core-prim . open-bytevector-input-port) (p11093 core-prim . native-transcoder) (p11092 core-prim . native-eol-style) (p11091 core-prim . make-transcoder) (p11090 core-prim . latin-1-codec) (p9810 core-prim . make-i/o-write-error) (p9789 core-prim . make-i/o-read-error) (p9968 core-prim . make-i/o-port-error) (p9832 core-prim . make-i/o-invalid-position-error) (p9858 core-prim . make-i/o-filename-error) (p9883 core-prim . make-i/o-file-protection-error) (p9904 core-prim . make-i/o-file-is-read-only-error) (p9946 core-prim . make-i/o-file-does-not-exist-error) (p9925 core-prim . make-i/o-file-already-exists-error) (p9768 core-prim . make-i/o-error) (p10015 core-prim . make-i/o-encoding-error) (p9993 core-prim . make-i/o-decoding-error) (p11089 core-prim . make-custom-textual-output-port) (p11088 core-prim . make-custom-textual-input/output-port) (p11087 core-prim . make-custom-textual-input-port) (p11086 core-prim . make-custom-binary-output-port) (p11085 core-prim . make-custom-binary-input/output-port) (p11084 core-prim . make-custom-binary-input-port) (p11083 core-prim . make-bytevector) (p11082 core-prim . lookahead-u8) (p11081 core-prim . lookahead-char) (p9812 core-prim . i/o-write-error?) (p9791 core-prim . i/o-read-error?) (p9972 core-prim . i/o-port-error?) (p9836 core-prim . i/o-invalid-position-error?) (p9862 core-prim . i/o-filename-error?) (p9885 core-prim . i/o-file-protection-error?) (p9906 core-prim . i/o-file-is-read-only-error?) (p9948 core-prim . i/o-file-does-not-exist-error?) (p9927 core-prim . i/o-file-already-exists-error?) (p9770 core-prim . i/o-error?) (p9838 core-prim . i/o-error-position) (p9974 core-prim . i/o-error-port) (p9864 core-prim . i/o-error-filename) (p10019 core-prim . i/o-encoding-error?) (p10021 core-prim . i/o-encoding-error-char) (p9995 core-prim . i/o-decoding-error?) (p11080 core-prim . get-u8) (p11079 core-prim . get-string-n!) (p11078 core-prim . get-string-n) (p11077 core-prim . get-string-all) (p11076 core-prim . get-line) (p11075 core-prim . get-datum) (p11074 core-prim . get-char) (p11073 core-prim . get-bytevector-some) (p11072 core-prim . get-bytevector-n!) (p11071 core-prim . get-bytevector-n) (p11070 core-prim . get-bytevector-all) (p11069 core-prim . flush-output-port) (p11068 core-prim . close-port) (p2961 core-prim . scheme-report-environment) (p11067 core-prim . quotient) (p2959 core-prim . null-environment) (p11066 core-prim . remainder) (p11065 core-prim . modulo) (p11064 core-prim . inexact->exact) (p11063 core-prim . force) (p11062 core-prim . exact->inexact) (p11061 core-prim . make-promise) (p11060 core-prim . exit) (p10330 core-prim . command-line) (p11059 core-prim . string-fill!) (p11058 core-prim . string-set!) (p11057 core-prim . set-cdr!) (p11056 core-prim . set-car!) (p11055 core-prim . remove) (p11054 core-prim . remv) (p11053 core-prim . remp) (p11052 core-prim . remq) (p11051 core-prim . partition) (p11050 core-prim . memv) (p11049 core-prim . memq) (p11048 core-prim . memp) (p11047 core-prim . member) (p11046 core-prim . exists) (p11045 core-prim . for-all) (p11044 core-prim . fold-right) (p11043 core-prim . fold-left) (p11042 core-prim . find) (p11041 core-prim . filter) (p11040 core-prim . cons*) (p11039 core-prim . assv) (p11038 core-prim . assq) (p11037 core-prim . assp) (p11036 core-prim . assoc) (p11035 core-prim . call-with-string-output-port) (p11034 core-prim . call-with-port) (p11033 core-prim . call-with-bytevector-output-port) (p11032 core-prim . bytevector->string) (p11031 core-prim . buffer-mode?) (p11030 core-prim . binary-port?) (p11029 core-prim . with-exception-handler) (p11028 core-prim . raise-continuable) (p11027 core-prim . raise) (p2965 core-prim . eval) (p2957 core-prim . environment) (p11026 core-prim . make-enumeration) (p11025 core-prim . enum-set=?) (p11024 core-prim . enum-set-universe) (p11023 core-prim . enum-set-union) (p11022 core-prim . enum-set-subset?) (p11021 core-prim . enum-set-projection) (p11020 core-prim . enum-set-member?) (p11019 core-prim . enum-set-intersection) (p11018 core-prim . enum-set-indexer) (p11017 core-prim . enum-set-difference) (p11016 core-prim . enum-set-constructor) (p11015 core-prim . enum-set-complement) (p11014 core-prim . enum-set->list) (p9632 core-prim . who-condition?) (p9498 core-prim . warning?) (p9561 core-prim . violation?) (p9749 core-prim . undefined-violation?) (p9724 core-prim . syntax-violation?) (p9728 core-prim . syntax-violation-subform) (p9726 core-prim . syntax-violation-form) (p2997 core-prim . syntax-violation) (p11013 core-prim . simple-conditions) (p9519 core-prim . serious-condition?) (p9655 core-prim . non-continuable-violation?) (p9475 core-prim . message-condition?) (p9628 core-prim . make-who-condition) (p9496 core-prim . make-warning) (p9559 core-prim . make-violation) (p9747 core-prim . make-undefined-violation) (p9718 core-prim . make-syntax-violation) (p9517 core-prim . make-serious-condition) (p9653 core-prim . make-non-continuable-violation) (p9471 core-prim . make-message-condition) (p9695 core-prim . make-lexical-violation) (p9602 core-prim . make-irritants-condition) (p9674 core-prim . make-implementation-restriction-violation) (p9538 core-prim . make-error) (p9580 core-prim . make-assertion-violation) (p9697 core-prim . lexical-violation?) (p9606 core-prim . irritants-condition?) (p9676 core-prim . implementation-restriction-violation?) (p9540 core-prim . error?) (p9634 core-prim . condition-who) (p11012 core-prim . condition-predicate) (p9477 core-prim . condition-message) (p9608 core-prim . condition-irritants) (p11011 core-prim . condition-accessor) (p11010 core-prim . condition) (p9582 core-prim . assertion-violation?) (p11009 core-prim . condition?) (p11008 core-prim . utf32->string) (p11007 core-prim . utf16->string) (p11006 core-prim . utf8->string) (p11005 core-prim . uint-list->bytevector) (p11004 core-prim . u8-list->bytevector) (p11003 core-prim . string->utf8) (p11002 core-prim . string->utf32) (p11001 core-prim . string->utf16) (p11000 core-prim . sint-list->bytevector) (p10999 core-prim . native-endianness) (p10998 core-prim . bytevector?) (p10997 core-prim . bytevector=?) (p10996 core-prim . bytevector-uint-set!) (p10995 core-prim . bytevector-uint-ref) (p10994 core-prim . bytevector-u8-set!) (p10993 core-prim . bytevector-u8-ref) (p10992 core-prim . bytevector-u64-set!) (p10991 core-prim . bytevector-u64-ref) (p10990 core-prim . bytevector-u64-native-set!) (p10989 core-prim . bytevector-u64-native-ref) (p10988 core-prim . bytevector-u32-set!) (p10987 core-prim . bytevector-u32-ref) (p10986 core-prim . bytevector-u32-native-set!) (p10985 core-prim . bytevector-u32-native-ref) (p10984 core-prim . bytevector-u16-set!) (p10983 core-prim . bytevector-u16-ref) (p10982 core-prim . bytevector-u16-native-set!) (p10981 core-prim . bytevector-u16-native-ref) (p10980 core-prim . bytevector-sint-set!) (p10979 core-prim . bytevector-sint-ref) (p10978 core-prim . bytevector-s8-set!) (p10977 core-prim . bytevector-s8-ref) (p10976 core-prim . bytevector-s64-set!) (p10975 core-prim . bytevector-s64-ref) (p10974 core-prim . bytevector-s64-native-set!) (p10973 core-prim . bytevector-s64-native-ref) (p10972 core-prim . bytevector-s32-set!) (p10971 core-prim . bytevector-s32-ref) (p10970 core-prim . bytevector-s32-native-set!) (p10969 core-prim . bytevector-s32-native-ref) (p10968 core-prim . bytevector-s16-set!) (p10967 core-prim . bytevector-s16-ref) (p10966 core-prim . bytevector-s16-native-set!) (p10965 core-prim . bytevector-s16-native-ref) (p10964 core-prim . bytevector-length) (p10963 core-prim . bytevector-ieee-single-ref) (p10962 core-prim . bytevector-ieee-single-set!) (p10961 core-prim . bytevector-ieee-single-native-set!) (p10960 core-prim . bytevector-ieee-single-native-ref) (p10959 core-prim . bytevector-ieee-double-set!) (p10958 core-prim . bytevector-ieee-double-ref) (p10957 core-prim . bytevector-ieee-double-native-set!) (p10956 core-prim . bytevector-ieee-double-native-ref) (p10955 core-prim . bytevector-fill!) (p10954 core-prim . bytevector-copy!) (p10953 core-prim . bytevector-copy) (p10952 core-prim . bytevector->uint-list) (p10951 core-prim . bytevector->u8-list) (p10950 core-prim . bytevector->sint-list) (p10063 core-prim . no-nans-violation?) (p10042 core-prim . no-infinities-violation?) (p10061 core-prim . make-no-nans-violation) (p10040 core-prim . make-no-infinities-violation) (p10949 core-prim . real->flonum) (p10948 core-prim . flzero?) (p10947 core-prim . fltruncate) (p10946 core-prim . fltan) (p10945 core-prim . flsqrt) (p10944 core-prim . flsin) (p10943 core-prim . flround) (p10942 core-prim . flpositive?) (p10941 core-prim . flonum?) (p10940 core-prim . flodd?) (p10939 core-prim . flnumerator) (p10938 core-prim . flnegative?) (p10937 core-prim . flnan?) (p10936 core-prim . flmod0) (p10935 core-prim . flmod) (p10934 core-prim . flmin) (p10933 core-prim . flmax) (p10932 core-prim . fllog) (p10931 core-prim . flinteger?) (p10930 core-prim . flinfinite?) (p10929 core-prim . flfloor) (p10928 core-prim . flfinite?) (p10927 core-prim . flexpt) (p10926 core-prim . flexp) (p10925 core-prim . fleven?) (p10924 core-prim . fldiv0-and-mod0) (p10923 core-prim . fldiv0) (p10922 core-prim . fldiv-and-mod) (p10921 core-prim . fldiv) (p10920 core-prim . fldenominator) (p10919 core-prim . flcos) (p10918 core-prim . flceiling) (p10917 core-prim . flatan) (p10916 core-prim . flasin) (p10915 core-prim . flacos) (p10914 core-prim . flabs) (p10913 core-prim . fl>?) (p10912 core-prim . fl>=?) (p10911 core-prim . fl=?) (p10910 core-prim . fl<?) (p10909 core-prim . fl<=?) (p10908 core-prim . fl/) (p10907 core-prim . fl-) (p10906 core-prim . fl+) (p10905 core-prim . fl*) (p10904 core-prim . fixnum->flonum) (p10903 core-prim . fxzero?) (p10902 core-prim . fxxor) (p10901 core-prim . fxrotate-bit-field) (p10900 core-prim . fxreverse-bit-field) (p10899 core-prim . fxpositive?) (p10898 core-prim . fxodd?) (p10897 core-prim . fxnot) (p10896 core-prim . fxnegative?) (p10895 core-prim . fxmod0) (p10894 core-prim . fxmod) (p10893 core-prim . fxmin) (p10892 core-prim . fxmax) (p10891 core-prim . fxlength) (p10890 core-prim . fxior) (p10889 core-prim . fxif) (p10888 core-prim . fxfirst-bit-set) (p10887 core-prim . fxeven?) (p10886 core-prim . fxdiv0-and-mod0) (p10885 core-prim . fxdiv0) (p10884 core-prim . fxdiv-and-mod) (p10883 core-prim . fxdiv) (p10882 core-prim . fxcopy-bit-field) (p10881 core-prim . fxcopy-bit) (p10880 core-prim . fxbit-set?) (p10879 core-prim . fxbit-field) (p10878 core-prim . fxbit-count) (p10877 core-prim . fxarithmetic-shift-right) (p10876 core-prim . fxarithmetic-shift-left) (p10875 core-prim . fxarithmetic-shift) (p10874 core-prim . fxand) (p10873 core-prim . fx>?) (p10872 core-prim . fx>=?) (p10871 core-prim . fx=?) (p10870 core-prim . fx<?) (p10869 core-prim . fx<=?) (p10868 core-prim . fx-/carry) (p10867 core-prim . fx-) (p10866 core-prim . fx+/carry) (p10865 core-prim . fx+) (p10864 core-prim . fx*/carry) (p10863 core-prim . fx*) (p10862 core-prim . greatest-fixnum) (p10861 core-prim . least-fixnum) (p10860 core-prim . fixnum-width) (p10859 core-prim . fixnum?) (p10858 core-prim . bitwise-rotate-bit-field) (p10857 core-prim . bitwise-reverse-bit-field) (p10856 core-prim . bitwise-length) (p10855 core-prim . bitwise-if) (p10854 core-prim . bitwise-first-bit-set) (p10853 core-prim . bitwise-copy-bit-field) (p10852 core-prim . bitwise-copy-bit) (p10851 core-prim . bitwise-bit-set?) (p10850 core-prim . bitwise-bit-field) (p10849 core-prim . bitwise-bit-count) (p10848 core-prim . bitwise-xor) (p10847 core-prim . bitwise-ior) (p10846 core-prim . bitwise-and) (p10845 core-prim . bitwise-not) (p10844 core-prim . bitwise-arithmetic-shift-right) (p10843 core-prim . bitwise-arithmetic-shift-left) (p10842 core-prim . bitwise-arithmetic-shift) (p10841 core-prim . zero?) (p10840 core-prim . vector?) (p10839 core-prim . vector-set!) (p10838 core-prim . vector-ref) (p10837 core-prim . vector-map) (p10836 core-prim . vector-length) (p10835 core-prim . vector-for-each) (p10834 core-prim . vector-fill!) (p10833 core-prim . vector->list) (p10832 core-prim . vector) (p10831 core-prim . values) (p10830 core-prim . truncate) (p10829 core-prim . tan) (p10828 core-prim . symbol?) (p10827 core-prim . symbol=?) (p10826 core-prim . symbol->string) (p10825 core-prim . substring) (p10824 core-prim . string?) (p10823 core-prim . string>?) (p10822 core-prim . string>=?) (p10821 core-prim . string=?) (p10820 core-prim . string<?) (p10819 core-prim . string<=?) (p10818 core-prim . string-ref) (p10817 core-prim . string-length) (p10816 core-prim . string-for-each) (p10815 core-prim . string-copy) (p10814 core-prim . string-append) (p10813 core-prim . string->symbol) (p10812 core-prim . string->number) (p10811 core-prim . string->list) (p10810 core-prim . string) (p10809 core-prim . sqrt) (p10808 core-prim . sin) (p10807 core-prim . round) (p10806 core-prim . reverse) (p10805 core-prim . real?) (p10804 core-prim . real-valued?) (p10803 core-prim . real-part) (p10802 core-prim . rationalize) (p10801 core-prim . rational?) (p10800 core-prim . rational-valued?) (p10799 core-prim . procedure?) (p10798 core-prim . positive?) (p10797 core-prim . pair?) (p10796 core-prim . odd?) (p10795 core-prim . numerator) (p10794 core-prim . number?) (p10793 core-prim . number->string) (p10792 core-prim . null?) (p10791 core-prim . not) (p10790 core-prim . negative?) (p10789 core-prim . nan?) (p10788 core-prim . min) (p10787 core-prim . max) (p10786 core-prim . map) (p10785 core-prim . make-vector) (p10784 core-prim . make-string) (p10783 core-prim . make-rectangular) (p10782 core-prim . make-polar) (p10781 core-prim . magnitude) (p10780 core-prim . log) (p10779 core-prim . list?) (p10778 core-prim . list-tail) (p10777 core-prim . list-ref) (p10776 core-prim . list->vector) (p10775 core-prim . list->string) (p10774 core-prim . list) (p10773 core-prim . length) (p10772 core-prim . lcm) (p10771 core-prim . integer?) (p10770 core-prim . integer-valued?) (p10769 core-prim . integer->char) (p10768 core-prim . infinite?) (p10767 core-prim . inexact?) (p10766 core-prim . inexact) (p10765 core-prim . imag-part) (p10764 core-prim . gcd) (p10763 core-prim . for-each) (p10762 core-prim . floor) (p10761 core-prim . finite?) (p10760 core-prim . expt) (p10759 core-prim . exp) (p10758 core-prim . exact?) (p10757 core-prim . exact-integer-sqrt) (p10756 core-prim . exact) (p10755 core-prim . even?) (p10754 core-prim . error) (p10753 core-prim . eqv?) (p10752 core-prim . equal?) (p10751 core-prim . eq?) (p10750 core-prim . dynamic-wind) (p10749 core-prim . div0-and-mod0) (p10748 core-prim . mod0) (p10747 core-prim . div0) (p10746 core-prim . div-and-mod) (p10745 core-prim . mod) (p10744 core-prim . div) (p10743 core-prim . denominator) (p10742 core-prim . cos) (p10741 core-prim . cons) (p10740 core-prim . complex?) (p10739 core-prim . char?) (p10738 core-prim . char>?) (p10737 core-prim . char>=?) (p10736 core-prim . char=?) (p10735 core-prim . char<?) (p10734 core-prim . char<=?) (p10733 core-prim . char->integer) (p10732 core-prim . ceiling) (p10731 core-prim . call-with-values) (p10730 core-prim . call/cc) (p10729 core-prim . call-with-current-continuation) (p10728 core-prim . cddddr) (p10727 core-prim . cdddar) (p10726 core-prim . cddadr) (p10725 core-prim . cddaar) (p10724 core-prim . cdaddr) (p10723 core-prim . cdadar) (p10722 core-prim . cdaadr) (p10721 core-prim . cdaaar) (p10720 core-prim . cadddr) (p10719 core-prim . caddar) (p10718 core-prim . cadadr) (p10717 core-prim . cadaar) (p10716 core-prim . caaddr) (p10715 core-prim . caadar) (p10714 core-prim . caaadr) (p10713 core-prim . caaaar) (p10712 core-prim . cdddr) (p10711 core-prim . cddar) (p10710 core-prim . cdadr) (p10709 core-prim . cdaar) (p10708 core-prim . caddr) (p10707 core-prim . cadar) (p10706 core-prim . caadr) (p10705 core-prim . caaar) (p10704 core-prim . cddr) (p10703 core-prim . cdar) (p10702 core-prim . cadr) (p10701 core-prim . caar) (p10700 core-prim . cdr) (p10699 core-prim . car) (p10698 core-prim . boolean?) (p10697 core-prim . boolean=?) (p10696 core-prim . atan) (p10695 core-prim . assertion-violation) (p2991 core-prim . assertion-error) (p10694 core-prim . asin) (p10693 core-prim . apply) (p10692 core-prim . append) (p10691 core-prim . angle) (p10690 core-prim . acos) (p10689 core-prim . abs) (p10688 core-prim . /) (p10687 core-prim . *) (p10686 core-prim . -) (p10685 core-prim . +) (p10684 core-prim . >=) (p10683 core-prim . >) (p10682 core-prim . =) (p10681 core-prim . <=) (p10680 core-prim . <) (p10679 core-prim . library) (p10678 $core-rtd &no-nans-rtd &no-nans-rcd) (p10677 $core-rtd &no-infinities-rtd &no-infinities-rcd) (p10676 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (p10675 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (p10674 $core-rtd &i/o-port-rtd &i/o-port-rcd) (p10673 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (p10672 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (p10671 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (p10670 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (p10669 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (p10668 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (p10667 $core-rtd &i/o-write-rtd &i/o-write-rcd) (p10666 $core-rtd &i/o-read-rtd &i/o-read-rcd) (p10665 $core-rtd &i/o-rtd &i/o-rcd) (p10664 $core-rtd &undefined-rtd &undefined-rcd) (p10663 $core-rtd &syntax-rtd &syntax-rcd) (p10662 $core-rtd &lexical-rtd &lexical-rcd) (p10661 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (p10660 $core-rtd &non-continuable-rtd &non-continuable-rcd) (p10659 $core-rtd &who-rtd &who-rcd) (p10658 $core-rtd &irritants-rtd &irritants-rcd) (p10657 $core-rtd &assertion-rtd &assertion-rcd) (p10656 $core-rtd &violation-rtd &violation-rcd) (p10655 $core-rtd &error-rtd &error-rcd) (p10654 $core-rtd &serious-rtd &serious-rcd) (p10653 $core-rtd &warning-rtd &warning-rcd) (p10652 $core-rtd &message-rtd &message-rcd) (p10651 $core-rtd &condition-rtd &condition-rcd) (p10650 macro . define-condition-type) (p10649 macro . define-enumeration) (p10648 macro . define-record-type) (p10647 macro . parent-rtd) (p10646 macro . nongenerative) (p10645 macro . opaque) (p10644 macro . sealed) (p10643 macro . protocol) (p10642 macro . parent) (p10641 macro . immutable) (p10640 macro . mutable) (p10639 macro . fields) (p10638 macro . error-handling-mode) (p10637 macro . file-options) (p10636 macro . buffer-mode) (p10635 macro . eol-style) (p10634 macro . guard) (p10633 macro . trace-define) (p10632 macro . trace-lambda) (p10631 macro . unsyntax-splicing) (p10630 macro . unsyntax) (p10629 macro . unquote-splicing) (p10628 macro . unquote) (p10627 macro . _) (p10626 macro . else) (p10625 macro . =>) (p10624 macro . ...) (p10623 macro . assert) (p10622 macro . endianness) (p10621 macro . delay) (p10620 macro . time) (p10619 macro . do) (p10618 macro . cond) (p10617 macro . let*) (p10616 macro . let) (p10615 macro . let*-values) (p10614 macro . let-values) (p10613 macro . identifier-syntax) (p10612 macro . with-syntax) (p10611 macro . quasisyntax) (p10610 macro . quasiquote) (p10609 macro . syntax-rules) (p10608 macro . include) (p10607 macro . define-struct) (p10606 core-macro . record-constructor-descriptor) (p10605 core-macro . record-type-descriptor) (p10604 macro . case) (p10603 macro . parameterize) (p10602 macro . unless) (p10601 macro . when) (p10600 core-macro . or) (p10599 core-macro . and) (p10598 core-macro . if) (p10597 core-macro . letrec*) (p10596 core-macro . letrec) (p10595 core-macro . type-descriptor) (p10594 core-macro . case-lambda) (p10593 core-macro . lambda) (p10592 core-macro . syntax) (p10591 core-macro . syntax-case) (p10590 core-macro . quote) (p10589 core-macro . foreign-call) (p10588 letrec-syntax) (p10587 let-syntax) (p10586 set!) (p10585 import) (p10584 begin) (p10583 module) (p10582 define-syntax) (p10581 define)) values values '#f '#f '#f '#f) (p1792@p1445@install-library 'p11322 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . p11289) (eval-core . p11288) (set-symbol-value! . p11287) (symbol-value . p11286) (gensym . p915) (void . p11285)) '() values values '#f '#f '#f '#f) (p1792@p1445@install-library 'p11323 '(mosh) '() '() '() '() '((set-symbol-value! . p11287) (symbol-value . p11286) (read-line . p11282) (ungensym . p11281) (alist->eq-hash-table . p11280) (assoc-ref . p11279) (print . p11278) (format . p11277) (host-os . p11276) (library-path . p1412) (standard-library-path . p11275) (file-newer? . p11274) (stat-mtime . p11273) (write-to-file . p11272) (file->list . p11271) (file->string . p11270) (digit->integer . p11269) (call-with-string-input-port . p11268) (call-with-string-io . p11267) (string-split . p11266) (bytevector-for-each . p11265) (string->regexp . p11264) (rxmatch . p11263) (regexp-replace-all . p11262) (hashtable-for-each . p11261) (readdir . p11257) (set-current-directory! . p11256) (expand-path . p11255) (current-directory . p11254) (p . p11239) (get-timeofday . p11234) (get-command-line . p11233) (sys-display . p11232) (mosh-executable-path . p11231) (make-file-options . p11230) (source-info . p11229) (make-compiler-instruction . p11228) (make-instruction . p11227) (set-source-info! . p11226) (bignum? . p11225) (fast-equal? . p11224) (fasl-read . p11223) (fasl-write . p11222) (time-usage . p11221) (os-constant . p11220) (time . p10620) (include . p10608)) '() values values '#f '#f '#f '#f) (p1792@p1445@install-library 'p11324 '(system) '() '() '() '() '((call-process . p11260) (local-tz-offset . p11259) (microseconds . p11258) (expand-path . p11255) (%spawn . p11253) (%waitpid . p11252) (%ffi-supported? . p11251) (%ffi-pointer-ref . p11250) (%ffi-pointer->string . p11249) (%ffi-call->string-or-zero . p11248) (%ffi-call->double . p11247) (%ffi-call->void* . p11246) (%ffi-call->void . p11245) (%ffi-call->int . p11244) (%ffi-lookup . p11243) (%ffi-open . p11242) (%fork . p11241) (%pipe . p11240) (open-output-string . p11238) (get-output-string . p11237) (get-environment-variables . p11236) (get-environment-variable . p11235) (make-parameter . p943) (make-socket . p11219) (parameterize . p10603)) '() values values '#f '#f '#f '#f))
((lambda (p10313@add-library-path! p10315@parse-and-add-library-path p10317@for-each-with-index p10319@rpad p10321@condition-printer p10323@record->field-alist p10325@map-with-index p10327@repl p10329@trace-printer p10331@command-line p10333@local-library-path p10335@load/args p10337@load p10339@ironscheme-build p10341@eval-top-level p10343@compile-system-libraries p10345@compile p10347@compile->closure p10349@pre-compile-r6rs-file p10351@load-r6rs-top-level) (begin (set! p10313@add-library-path! (lambda (p10378@path) (p1776@p1413@library-path (append (p1776@p1413@library-path) (list p10378@path))))) (set! p10315@parse-and-add-library-path (lambda (p10380@paths p10381@message) ((lambda (p10384@t) (if p10384@t ((lambda (p10386@paths) (for-each (lambda (p10388@path) (if (file-exists? p10388@path) (p10313@add-library-path! (expand-path p10388@path)) (format (current-error-port) p10381@message p10388@path))) (reverse (string-split p10386@paths '#\:)))) p10384@t) (void))) p10380@paths))) (set! p10317@for-each-with-index (lambda (p10390@proc p10391@lst) (letrec ((p10394@loop (lambda (p10396@i p10397@lst) (if (null? p10397@lst) (if '#f '#f (void)) (begin (p10390@proc p10396@i (car p10397@lst)) (p10394@loop (+ p10396@i '1) (cdr p10397@lst))))))) (p10394@loop '1 p10391@lst)))) (set! p10319@rpad (lambda (p10400@str p10401@pad p10402@n) ((lambda (p10406@rest) ((letrec ((p10408@loop (lambda (p10410@rest p10411@ret) (if (<= p10410@rest '0) p10411@ret (p10408@loop (- p10410@rest '1) (string-append p10411@ret p10401@pad)))))) p10408@loop) p10406@rest (format '"~a" p10400@str))) (- p10402@n (string-length (format '"~a" p10400@str)))))) (set! p10321@condition-printer (lambda (p10414@e p10415@port) ((lambda (p10419@max-condition-len) (begin (set! p10419@max-condition-len (apply max (map (lambda (p10436@c) (string-length (symbol->string (record-type-name (record-rtd p10436@c))))) (simple-conditions p10414@e)))) (begin (display '" Condition components:\n" p10415@port) (p10317@for-each-with-index (lambda (p10420@i p10421@x) ((lambda (p10424@rtd p10425@fields-alist) (begin (format p10415@port '" ~d. ~a" p10420@i (p10319@rpad (symbol->string (record-type-name p10424@rtd)) '" " p10419@max-condition-len)) (if (null? p10425@fields-alist) (newline p10415@port) (void)) ((letrec ((p10428@loop (lambda (p10430@first p10431@fields-alist) (if (null? p10431@fields-alist) '() ((lambda (p10434@field) (begin (if (not p10430@first) (display (p10319@rpad '"" '" " (+ '4 p10419@max-condition-len)) p10415@port) (void)) (display '"       " p10415@port) (display (car p10434@field) p10415@port) (display '": " p10415@port) (write (cdr p10434@field) p10415@port) (newline p10415@port) (p10428@loop '#f (cdr p10431@fields-alist)))) (car p10431@fields-alist)))))) p10428@loop) '#t p10425@fields-alist))) (record-rtd p10421@x) (p10323@record->field-alist p10421@x))) (simple-conditions p10414@e))))) '#f))) (set! p10323@record->field-alist (lambda (p10438@r) ((lambda (p10441@ref) (begin (set! p10441@ref (lambda (p10452@rtd p10453@i p10454@x) ((lambda (p10458@val) (if (symbol? p10458@val) (ungensym p10458@val) p10458@val)) ((record-accessor p10452@rtd p10453@i) p10454@x)))) ((letrec ((p10442@loop (lambda (p10444@ret p10445@rtd) (if p10445@rtd (p10442@loop (append p10444@ret (p10325@map-with-index (lambda (p10448@i p10449@field) (cons p10449@field (p10441@ref p10445@rtd p10448@i p10438@r))) (vector->list (record-type-field-names p10445@rtd)))) (record-type-parent p10445@rtd)) p10444@ret)))) p10442@loop) '() (record-rtd p10438@r)))) '#f))) (set! p10325@map-with-index (lambda (p10460@proc p10461@lst) ((letrec ((p10464@loop (lambda (p10466@i p10467@lst p10468@ret) (if (null? p10467@lst) (reverse p10468@ret) (p10464@loop (+ p10466@i '1) (cdr p10467@lst) (cons (p10460@proc p10466@i (car p10467@lst)) p10468@ret)))))) p10464@loop) '0 p10461@lst '()))) (set! p10327@repl (lambda p10472@x ((lambda (p10475@rec) (begin (set! p10475@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (p10478@p10476) (lambda () (with-exception-handler (lambda (p10480@e) ((call/cc (lambda (p10482@p10477) (p10478@p10476 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? p10480@e) (p10321@condition-printer p10480@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" p10480@e))) (p10482@p10477 (lambda () (raise-continuable p10480@e)))))))))) (lambda () ((letrec ((p10484@loop (lambda (p10486@line p10487@accum) ((lambda (p10491@parentheses-ok? p10493@eval-string-print) (begin (set! p10491@parentheses-ok? (lambda (p10498@text) ((letrec ((p10500@loop (lambda (p10502@chars p10503@p0 p10504@p1) (if (null? p10502@chars) (= '0 p10503@p0 p10504@p1) ((lambda (p10508@t) (if (memv p10508@t '(#\()) (p10500@loop (cdr p10502@chars) (+ p10503@p0 '1) p10504@p1) (if (memv p10508@t '(#\))) (p10500@loop (cdr p10502@chars) (- p10503@p0 '1) p10504@p1) (if (memv p10508@t '(#\[)) (p10500@loop (cdr p10502@chars) p10503@p0 (+ p10504@p1 '1)) (if (memv p10508@t '(#\])) (p10500@loop (cdr p10502@chars) p10503@p0 (- p10504@p1 '1)) (p10500@loop (cdr p10502@chars) p10503@p0 p10504@p1)))))) (car p10502@chars)))))) p10500@loop) (string->list p10498@text) '0 '0))) (set! p10493@eval-string-print (lambda (p10496@text) (if (not (or (string=? '"\n" p10496@text) (= '0 (string-length p10496@text)))) (write (p10341@eval-top-level (call-with-port (open-string-input-port p10496@text) read))) (void)))) (if (eof-object? p10486@line) (begin (p10493@eval-string-print p10487@accum) (exit)) ((lambda (p10494@current) (if (p10491@parentheses-ok? p10494@current) (p10493@eval-string-print p10494@current) (p10484@loop (get-line (current-input-port)) p10494@current))) (string-append p10487@accum p10486@line))))) '#f '#f)))) p10484@loop) (get-line (current-input-port)) '""))))))) (newline) (p10475@rec)))) (p10475@rec))) '#f))) (set! p10329@trace-printer (p1166@p944@make-parameter write)) (set! p10331@command-line (p1166@p944@make-parameter (get-command-line))) (set! p10333@local-library-path (lambda (p10510@filename) (cons (expand-path '".") (p1776@p1413@library-path)))) (set! p10335@load/args (lambda (p10512@filename . p10514@args) (begin (apply p10351@load-r6rs-top-level p10512@filename 'load p10514@args) (void)))) (set! p10337@load (lambda (p10516@filename) (begin (apply p10351@load-r6rs-top-level p10516@filename 'load (p10331@command-line)) (void)))) (set! p10339@ironscheme-build (lambda () (p10337@load '"ironscheme-buildscript.ss"))) (set! p10341@eval-top-level (lambda (p10518@x) (p9345@p2966@eval p10518@x (p9367@p3010@interaction-environment)))) (set! p10343@compile-system-libraries (lambda () (p10341@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! p10345@compile (lambda (p10520@filename) (p10351@load-r6rs-top-level p10520@filename 'compile))) (set! p10347@compile->closure (lambda (p10522@filename) (p10351@load-r6rs-top-level p10522@filename 'closure))) (set! p10349@pre-compile-r6rs-file (lambda (p10524@filename) (p10351@load-r6rs-top-level p10524@filename 'compile))) (set! p10351@load-r6rs-top-level (lambda (p10526@filename p10527@how . p10530@args) ((lambda (p10534@p10532@library-path p10535@p10533@library-path) ((lambda (p10538@swap) (dynamic-wind p10538@swap (lambda () ((lambda (p10540@x*) ((lambda (p10542@t) (if (memv p10542@t '(closure)) (p9366@p3008@pre-compile-r6rs-top-level p10540@x*) (if (memv p10542@t '(load)) ((lambda (p10546@p10544@command-line p10547@p10545@command-line) ((lambda (p10550@swap) (dynamic-wind p10550@swap (lambda () ((p9365@p3006@compile-r6rs-top-level p10540@x*))) p10550@swap)) (lambda () ((lambda (p10552@t) (begin (p10546@p10544@command-line p10547@p10545@command-line) (set! p10547@p10545@command-line p10552@t))) (p10546@p10544@command-line))))) p10331@command-line (cons p10526@filename (car p10530@args))) (if (memv p10542@t '(compile)) (begin (p9365@p3006@compile-r6rs-top-level p10540@x*) (p1780@p1421@serialize-all p1161@p934@serialize-library p1251@p1180@compile-core-expr)) (if '#f '#f (void)))))) p10527@how)) (with-input-from-file p10526@filename (lambda () ((letrec ((p10554@f (lambda () ((lambda (p10556@x) (if (eof-object? p10556@x) '() (cons p10556@x (p10554@f)))) (p1153@p918@read-annotated))))) p10554@f)))))) p10538@swap)) (lambda () ((lambda (p10558@t) (begin (p10534@p10532@library-path p10535@p10533@library-path) (set! p10535@p10533@library-path p10558@t))) (p10534@p10532@library-path))))) p1776@p1413@library-path (p10333@local-library-path p10526@filename)))) (begin (set! p10579@p10351@load-r6rs-top-level p10351@load-r6rs-top-level) (set! p10578@p10349@pre-compile-r6rs-file p10349@pre-compile-r6rs-file) (set! p10577@p10347@compile->closure p10347@compile->closure) (set! p10576@p10345@compile p10345@compile) (set! p10575@p10343@compile-system-libraries p10343@compile-system-libraries) (set! p10574@p10341@eval-top-level p10341@eval-top-level) (set! p10573@p10339@ironscheme-build p10339@ironscheme-build) (set! p10572@p10337@load p10337@load) (set! p10571@p10335@load/args p10335@load/args) (set! p10570@p10333@local-library-path p10333@local-library-path) (set! p10569@p10331@command-line p10331@command-line) (set! p10568@p10329@trace-printer p10329@trace-printer) (set! p10567@p10327@repl p10327@repl) (set! p10566@p10325@map-with-index p10325@map-with-index) (set! p10565@p10323@record->field-alist p10323@record->field-alist) (set! p10564@p10321@condition-printer p10321@condition-printer) (set! p10563@p10319@rpad p10319@rpad) (set! p10562@p10317@for-each-with-index p10317@for-each-with-index) (set! p10561@p10315@parse-and-add-library-path p10315@parse-and-add-library-path) (set! p10560@p10313@add-library-path! p10313@add-library-path!) (p1781@p1423@current-precompiled-library-loader p1162@p936@load-serialized-library) (set-symbol-value! 'load p10337@load) (set-symbol-value! 'pre-compile-r6rs-file p10349@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs p10341@eval-top-level) (set-symbol-value! 'int-env-syms p9336@p2948@interaction-environment-symbols) (set-symbol-value! 'expanded2core p1250@p1178@expanded->core) (set-symbol-value! 'trace-printer p10329@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (p10352@c) (condition (p10150@p9654@make-non-continuable-violation) (p10140@p9629@make-who-condition 'raise) (p10080@p9472@make-message-condition '"returned from non-continuable exception") (p10130@p9603@make-irritants-condition (list p10352@c))))) (p10315@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (p10315@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (p10313@add-library-path! (string-append (mosh-executable-path) '"/lib")) (p10313@add-library-path! (string-append (current-directory) '"/lib"))) (p10313@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (p10354@prefix) (p1777@p1415@library-extensions (p10354@prefix '".mosh" (p1777@p1415@library-extensions)))) (lambda (p10356@ext p10357@ls) (append (map (lambda (p10360@x) (string-append p10356@ext p10360@x)) p10357@ls) p10357@ls))) ((lambda (p10362@args p10363@port) ((lambda (p10367@ref) (begin (set! p10367@ref (lambda (p10370@rtd p10371@i p10372@x) ((lambda (p10376@val) (if (symbol? p10376@val) (ungensym p10376@val) p10376@val)) ((record-accessor p10370@rtd p10371@i) p10372@x)))) (with-exception-handler (lambda (p10368@c) (if (condition? p10368@c) (p10321@condition-printer p10368@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" p10368@c))) (lambda () (if (null? p10362@args) (p10327@repl) (p10351@load-r6rs-top-level (car p10362@args) 'load (cdr p10362@args))))))) '#f)) (p10331@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
