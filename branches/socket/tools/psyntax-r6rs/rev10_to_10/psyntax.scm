;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (n909@make-gensym-counter n911@gen-sym-prefix n913@gen-sym-counter n915@gensym n917@read-annotated n919@annotation-stripped n921@annotation? n923@annotation-source n925@annotation-expression n927@scm->fasl n929@fasl-save n931@fasl-load n933@serialize-library n935@load-serialized-library n937@make-record-printer n939@compile-core n941@read-library-source-file n943@make-parameter n1043@file-options-spec) (begin (set! n909@make-gensym-counter (lambda (n1044@i) ((lambda (n1047@inc) (begin (set! n1047@inc (lambda () (begin (set! n1044@i (+ n1044@i '1)) n1044@i))) n1047@inc)) '#f))) (set! n911@gen-sym-prefix ((lambda (n1048@v) (if n1048@v (string->symbol n1048@v) 'A)) (get-environment-variable '"MOSH_GENSYM_PREFIX"))) (set! n913@gen-sym-counter (n909@make-gensym-counter '0)) (set! n915@gensym (lambda n1050@x (string->symbol (if (null? n1050@x) (format '"~a~a" n911@gen-sym-prefix (n913@gen-sym-counter)) (format '"~a~a@~a" n911@gen-sym-prefix (n913@gen-sym-counter) (car n1050@x)))))) (set! n917@read-annotated read) (set! n919@annotation-stripped (lambda (n1052@x) (n925@annotation-expression n1052@x))) (set! n921@annotation? (lambda (n1054@x) (source-info n1054@x))) (set! n923@annotation-source (lambda (n1056@x) (source-info n1056@x))) (set! n925@annotation-expression (lambda (n1058@x) (if (pair? n1058@x) (cons (car n1058@x) (cdr n1058@x)) (display '"line:46\n")))) (set! n927@scm->fasl (lambda (n1060@filename) (string-append n1060@filename '".fasl"))) (set! n929@fasl-save (lambda (n1062@filename n1063@obj) (call-with-port (open-file-output-port n1062@filename) (lambda (n1066@port) ((symbol-value 'fasl-write!) n1063@obj n1066@port))))) (set! n931@fasl-load (lambda (n1068@filename) (call-with-port (open-file-input-port n1068@filename) (symbol-value 'fasl-read!)))) (set! n933@serialize-library (lambda (n1070@filename n1071@obj) (begin (format '#t '"serialize-library ~a\n..." n1070@filename) ((lambda (n1074@expanded2core) ((lambda (n1076@compile) ((lambda (n1078@code) ((lambda (n1080@pivot) ((lambda (n1082@visit) ((lambda () (begin (set-car! n1080@pivot n1082@visit) ((lambda (n1084@pivot) ((lambda (n1086@invoke) ((lambda () (set-car! n1084@pivot n1086@invoke)))) (n1076@compile (n1074@expanded2core (car n1084@pivot))))) (cdr n1080@pivot)))))) (n1076@compile (n1074@expanded2core (car n1080@pivot))))) (cddddr (cddddr n1078@code)))) n1071@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (n1088@fasl-file) (begin (if (file-exists? n1088@fasl-file) (delete-file n1088@fasl-file) (void)) ((call/cc (lambda (n1092@n1090) (lambda () (with-exception-handler (lambda (n1094@c) ((call/cc (lambda (n1096@n1091) (n1092@n1090 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " n1070@filename) (if (file-exists? n1088@fasl-file) (delete-file n1088@fasl-file) (void)) '#f) (n1096@n1091 (lambda () (raise-continuable n1094@c)))))))))) (lambda () (begin (n929@fasl-save n1088@fasl-file n1071@obj) (display '"OK\n")))))))))) (n927@scm->fasl n1070@filename))))) (set! n935@load-serialized-library (lambda (n1098@filename n1099@obj) ((lambda (n1102@fasl-file) (if (and (file-exists? n1102@fasl-file) ((symbol-value 'file-newer?) n1102@fasl-file n1098@filename)) ((lambda (n1104@expanded2core) ((lambda (n1106@eval-compiled-core) ((lambda (n1108@code) ((lambda (n1110@pivot) ((lambda (n1112@visit) ((lambda (n1114@visit-proc) ((lambda () (begin (set-car! n1110@pivot n1114@visit-proc) ((lambda (n1116@pivot) ((lambda (n1118@invoke) ((lambda () (begin (set-car! n1116@pivot (lambda () (n1106@eval-compiled-core n1118@invoke))) (apply n1099@obj n1108@code))))) (car n1116@pivot))) (cdr n1110@pivot)) '#t)))) (lambda () (n1106@eval-compiled-core n1112@visit)))) (car n1110@pivot))) (cddddr (cddddr n1108@code)))) (n931@fasl-load n1102@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (n927@scm->fasl n1098@filename)))) (set! n937@make-record-printer (lambda (n1120@name n1121@printer) (lambda n1124@x (begin (display '"record printer") (for-each display n1124@x))))) (set! n939@compile-core (lambda n1126@x (apply error 'comile-core '"not implementated" n1126@x))) (set! n941@read-library-source-file (lambda (n1128@file-name) (with-input-from-file n1128@file-name n917@read-annotated))) (set! n943@make-parameter (lambda n1144 ((lambda (n1145) (if (= n1145 '1) (apply (lambda (n1130@x) (n943@make-parameter n1130@x (lambda (n1132@x) n1132@x))) n1144) (if (= n1145 '2) (apply (lambda (n1134@x n1135@fender) ((lambda (n1138@x) (lambda n1142 ((lambda (n1143) (if (= n1143 '0) (apply (lambda () n1138@x) n1142) (if (= n1143 '1) (apply (lambda (n1140@v) (set! n1138@x (n1135@fender n1140@v))) n1142) (error 'apply '"invalid arg count")))) (length n1142)))) (n1135@fender n1134@x))) n1144) (error 'apply '"invalid arg count")))) (length n1144)))) (set! n1043@file-options-spec (lambda (n1146@x) n1146@x)) (begin (set! n1166@n1043@file-options-spec n1043@file-options-spec) (set! n1165@n943@make-parameter n943@make-parameter) (set! n1164@n941@read-library-source-file n941@read-library-source-file) (set! n1163@n939@compile-core n939@compile-core) (set! n1162@n937@make-record-printer n937@make-record-printer) (set! n1161@n935@load-serialized-library n935@load-serialized-library) (set! n1160@n933@serialize-library n933@serialize-library) (set! n1159@n931@fasl-load n931@fasl-load) (set! n1158@n929@fasl-save n929@fasl-save) (set! n1157@n927@scm->fasl n927@scm->fasl) (set! n1156@n925@annotation-expression n925@annotation-expression) (set! n1155@n923@annotation-source n923@annotation-source) (set! n1154@n921@annotation? n921@annotation?) (set! n1153@n919@annotation-stripped n919@annotation-stripped) (set! n1152@n917@read-annotated n917@read-annotated) (set! n1151@n915@gensym n915@gensym) (set! n1150@n913@gen-sym-counter n913@gen-sym-counter) (set! n1149@n911@gen-sym-prefix n911@gen-sym-prefix) (set! n1148@n909@make-gensym-counter n909@make-gensym-counter)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (n1171@current-primitive-locations n1173@mutable? n1175@rewriter n1177@expanded->core n1179@compile-core-expr n1181@pretty-print n1183@compile-core-expr-to-port) (begin (set! n1171@current-primitive-locations (n1165@n943@make-parameter (lambda (n1184@x) '#f) (lambda (n1186@p) n1186@p))) (set! n1173@mutable? (lambda (n1188@x) (or (pair? n1188@x) (vector? n1188@x) (hashtable? n1188@x)))) (set! n1175@rewriter (lambda (n1190@quote-hack?) ((lambda (n1193@f) (begin (set! n1193@f (lambda (n1194@x) (if (pair? n1194@x) ((lambda (n1196@t) (if (memv n1196@t '(quote)) (if (and n1190@quote-hack? (n1173@mutable? (cadr n1194@x))) ((lambda (n1198@g) (begin (set-symbol-value! n1198@g (cadr n1194@x)) n1198@g)) (n1151@n915@gensym)) n1194@x) (if (memv n1196@t '(case-lambda)) (cons 'case-lambda (map (lambda (n1200@x) (cons (car n1200@x) (map n1193@f (cdr n1200@x)))) (cdr n1194@x))) (if (memv n1196@t '(lambda)) (cons* 'lambda (cadr n1194@x) (map n1193@f (cddr n1194@x))) (if (memv n1196@t '(letrec)) ((lambda (n1202@bindings n1203@body*) ((lambda (n1206@lhs* n1207@rhs*) (cons* 'letrec (map list n1206@lhs* (map n1193@f n1207@rhs*)) (map n1193@f n1203@body*))) (map car n1202@bindings) (map cadr n1202@bindings))) (cadr n1194@x) (cddr n1194@x)) (if (memv n1196@t '(letrec*)) ((lambda (n1210@bindings n1211@body*) ((lambda (n1214@lhs* n1215@rhs*) (cons* 'letrec* (map list n1214@lhs* (map n1193@f n1215@rhs*)) (map n1193@f n1211@body*))) (map car n1210@bindings) (map cadr n1210@bindings))) (cadr n1194@x) (cddr n1194@x)) (if (memv n1196@t '(library-letrec*)) ((lambda (n1218@name n1219@x) ((lambda (n1222@bindings n1223@body*) ((lambda (n1226@lhs* n1227@lhs** n1228@rhs*) (cons* 'library-letrec* n1218@name (map list n1226@lhs* n1227@lhs** (map n1193@f n1228@rhs*)) (map n1193@f n1223@body*))) (map car n1222@bindings) (map cadr n1222@bindings) (map caddr n1222@bindings))) (cadr n1219@x) (cddr n1219@x))) (cadr n1194@x) (cdr n1194@x)) (if (memv n1196@t '(begin)) (cons 'begin (map n1193@f (cdr n1194@x))) (if (memv n1196@t '(set!)) (list 'set! (cadr n1194@x) (n1193@f (caddr n1194@x))) (if (memv n1196@t '(primitive)) ((lambda (n1232@op) ((lambda (n1234@t) (if n1234@t ((lambda (n1236@loc) n1236@loc) n1234@t) n1232@op)) ((n1171@current-primitive-locations) n1232@op))) (cadr n1194@x)) (if (memv n1196@t '(define)) n1194@x (if (list? n1194@x) (map n1193@f n1194@x) (error 'rewrite '"invalid form ~s ~s" n1194@x (list? n1194@x)))))))))))))) (car n1194@x)) n1194@x))) n1193@f)) '#f))) (set! n1177@expanded->core (lambda (n1238@x) ((n1175@rewriter '#f) n1238@x))) (set! n1179@compile-core-expr (lambda (n1240@x) ((n1175@rewriter '#f) n1240@x))) (set! n1181@pretty-print write) (set! n1183@compile-core-expr-to-port (lambda (n1242@x n1243@p) (n1181@pretty-print ((n1175@rewriter '#f) n1242@x) n1243@p))) (begin (set! n1252@n1183@compile-core-expr-to-port n1183@compile-core-expr-to-port) (set! n1251@n1181@pretty-print n1181@pretty-print) (set! n1250@n1179@compile-core-expr n1179@compile-core-expr) (set! n1249@n1177@expanded->core n1177@expanded->core) (set! n1248@n1175@rewriter n1175@rewriter) (set! n1247@n1173@mutable? n1173@mutable?) (set! n1246@n1171@current-primitive-locations n1171@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (n1331@make-collection n1333@current-library-collection n1339@n1334 n1341@n1336 n1343@n1335 n1346@library? n1348@make-library n1350@library-id n1352@library-name n1354@library-version n1356@library-imp* n1358@library-vis* n1360@library-inv* n1362@library-subst n1364@library-env n1366@library-visit-state n1368@library-invoke-state n1370@library-visit-code n1372@library-invoke-code n1374@library-visible? n1376@library-source-file-name n1378@set-library-id! n1380@set-library-name! n1382@set-library-version! n1384@set-library-imp*! n1386@set-library-vis*! n1388@set-library-inv*! n1390@set-library-subst! n1392@set-library-env! n1394@set-library-visit-state! n1396@set-library-invoke-state! n1398@set-library-visit-code! n1400@set-library-invoke-code! n1402@set-library-visible?! n1404@set-library-source-file-name! n1406@rp n1408@find-dependencies n1410@find-library-by n1412@library-path n1414@library-extensions n1416@library-name->file-name n1418@file-locator n1420@serialize-all n1422@current-precompiled-library-loader n1424@try-load-from-file n1426@library-loader n1428@current-library-expander n1430@external-pending-libraries n1432@find-external-library n1434@find-library-by-name n1436@library-exists? n1438@find-library-by-spec/die n1440@label->binding-table n1442@install-library-record n1444@install-library n1446@imported-label->binding n1448@invoke-library n1450@visit-library n1452@invoke-library-by-spec n1454@installed-libraries n1456@library-spec) (begin (set! n1331@make-collection (lambda () ((lambda (n1457@set) ((lambda (n1460@set-cons) (begin (set! n1460@set-cons (lambda (n1465@x n1466@ls) (if (memq n1465@x n1466@ls) n1466@ls (cons n1465@x n1466@ls)))) (lambda n1463 ((lambda (n1464) (if (= n1464 '0) (apply (lambda () n1457@set) n1463) (if (= n1464 '1) (apply (lambda (n1461@x) (set! n1457@set (n1460@set-cons n1461@x n1457@set))) n1463) (error 'apply '"invalid arg count")))) (length n1463))))) '#f)) '()))) (set! n1333@current-library-collection (n1165@n943@make-parameter (n1331@make-collection) (lambda (n1469@x) (begin (if (not (procedure? n1469@x)) (assertion-violation 'current-library-collection '"not a procedure" n1469@x) (void)) n1469@x)))) (set! n1339@n1334 (make-record-type-descriptor 'library '#f 'n1337 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! n1341@n1336 '#f) (set! n1343@n1335 (make-record-constructor-descriptor n1339@n1334 '#f n1341@n1336)) (set! n1346@library? (record-predicate n1339@n1334)) (set! n1348@make-library (record-constructor n1343@n1335)) (set! n1350@library-id (record-accessor n1339@n1334 '0)) (set! n1352@library-name (record-accessor n1339@n1334 '1)) (set! n1354@library-version (record-accessor n1339@n1334 '2)) (set! n1356@library-imp* (record-accessor n1339@n1334 '3)) (set! n1358@library-vis* (record-accessor n1339@n1334 '4)) (set! n1360@library-inv* (record-accessor n1339@n1334 '5)) (set! n1362@library-subst (record-accessor n1339@n1334 '6)) (set! n1364@library-env (record-accessor n1339@n1334 '7)) (set! n1366@library-visit-state (record-accessor n1339@n1334 '8)) (set! n1368@library-invoke-state (record-accessor n1339@n1334 '9)) (set! n1370@library-visit-code (record-accessor n1339@n1334 '10)) (set! n1372@library-invoke-code (record-accessor n1339@n1334 '11)) (set! n1374@library-visible? (record-accessor n1339@n1334 '12)) (set! n1376@library-source-file-name (record-accessor n1339@n1334 '13)) (set! n1378@set-library-id! (record-mutator n1339@n1334 '0)) (set! n1380@set-library-name! (record-mutator n1339@n1334 '1)) (set! n1382@set-library-version! (record-mutator n1339@n1334 '2)) (set! n1384@set-library-imp*! (record-mutator n1339@n1334 '3)) (set! n1386@set-library-vis*! (record-mutator n1339@n1334 '4)) (set! n1388@set-library-inv*! (record-mutator n1339@n1334 '5)) (set! n1390@set-library-subst! (record-mutator n1339@n1334 '6)) (set! n1392@set-library-env! (record-mutator n1339@n1334 '7)) (set! n1394@set-library-visit-state! (record-mutator n1339@n1334 '8)) (set! n1396@set-library-invoke-state! (record-mutator n1339@n1334 '9)) (set! n1398@set-library-visit-code! (record-mutator n1339@n1334 '10)) (set! n1400@set-library-invoke-code! (record-mutator n1339@n1334 '11)) (set! n1402@set-library-visible?! (record-mutator n1339@n1334 '12)) (set! n1404@set-library-source-file-name! (record-mutator n1339@n1334 '13)) (set! n1406@rp (n1162@n937@make-record-printer 'library (lambda (n1471@x n1472@p n1473@wr) (begin (if (not (n1346@library? n1471@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (n1354@library-version n1471@x)) (n1352@library-name n1471@x) (append (n1352@library-name n1471@x) (list (n1354@library-version n1471@x))))) n1472@p))))) (set! n1408@find-dependencies (lambda (n1477@ls) (if (null? n1477@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! n1410@find-library-by (lambda (n1479@pred) ((letrec ((n1481@f (lambda (n1483@ls) (if (null? n1483@ls) '#f (if (n1479@pred (car n1483@ls)) (car n1483@ls) (n1481@f (cdr n1483@ls))))))) n1481@f) ((n1333@current-library-collection))))) (set! n1412@library-path (n1165@n943@make-parameter '(".") (lambda (n1485@x) (if (and (list? n1485@x) (for-all string? n1485@x)) (map (lambda (n1487@x) n1487@x) n1485@x) (assertion-violation 'library-path '"not a list of strings" n1485@x))))) (set! n1414@library-extensions (n1165@n943@make-parameter '(".sls" ".ss" ".scm") (lambda (n1489@x) (if (and (list? n1489@x) (for-all string? n1489@x)) (map (lambda (n1491@x) n1491@x) n1489@x) (assertion-violation 'library-extensions '"not a list of strings" n1489@x))))) (set! n1416@library-name->file-name (lambda (n1493@x) (call-with-values (lambda () (open-string-output-port)) (lambda (n1497@n1495@p n1498@n1496@extract) ((lambda (n1501@extract n1502@p) ((lambda (n1506@display-hex) (begin (set! n1506@display-hex (lambda (n1515@n) (if (<= '0 n1515@n '9) (display n1515@n n1502@p) (display (integer->char (+ (char->integer '#\a) (- n1515@n '10))) n1502@p)))) (begin ((letrec ((n1507@f (lambda (n1509@ls) (if (not (null? n1509@ls)) (begin (display '"/" n1502@p) (for-each (lambda (n1511@c) (if (or (char<=? '#\a n1511@c '#\z) (char<=? '#\A n1511@c '#\Z) (char<=? '#\0 n1511@c '#\9) (memv n1511@c '(#\- #\. #\_ #\~))) (display n1511@c n1502@p) (begin (display '"%" n1502@p) ((lambda (n1513@n) (begin (n1506@display-hex (quotient n1513@n '16)) (n1506@display-hex (remainder n1513@n '16)))) (char->integer n1511@c))))) (string->list (symbol->string (car n1509@ls)))) (n1507@f (cdr n1509@ls))) (void))))) n1507@f) n1493@x) (n1501@extract)))) '#f)) n1498@n1496@extract n1497@n1495@p))))) (set! n1418@file-locator (n1165@n943@make-parameter (lambda (n1517@x) ((lambda (n1519@str) ((letrec ((n1521@f (lambda (n1523@ls n1524@exts n1525@failed-list) (if (null? n1523@ls) ((lambda () ((lambda (n1537@n1532 n1539@n1534 n1541@n1533 n1544@n1531 n1546@make-library-resolution-condition n1548@n1529 n1550@n1530 n1552@library-resolution-condition? n1554@condition-library n1556@condition-files) (begin (set! n1537@n1532 (make-record-type-descriptor '&library-resolution n10073@n9388@&condition-rtd 'n1535 '#f '#f '#((immutable library) (immutable files)))) (set! n1539@n1534 '#f) (set! n1541@n1533 (make-record-constructor-descriptor n1537@n1532 n10074@n9390@&condition-rcd n1539@n1534)) (set! n1544@n1531 (record-predicate n1537@n1532)) (set! n1546@make-library-resolution-condition (record-constructor n1541@n1533)) (set! n1548@n1529 (record-accessor n1537@n1532 '0)) (set! n1550@n1530 (record-accessor n1537@n1532 '1)) (set! n1552@library-resolution-condition? (condition-predicate n1537@n1532)) (set! n1554@condition-library (condition-accessor n1537@n1532 n1548@n1529)) (set! n1556@condition-files (condition-accessor n1537@n1532 n1550@n1530)) (raise (condition (n10105@n9538@make-error) (n10139@n9628@make-who-condition 'expander) (n10079@n9471@make-message-condition '"cannot locate library in library-path") (n1546@make-library-resolution-condition n1517@x (reverse n1525@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? n1524@exts) (n1521@f (cdr n1523@ls) (n1414@library-extensions) n1525@failed-list) ((lambda (n1557@name) (if (file-exists? n1557@name) n1557@name (n1521@f n1523@ls (cdr n1524@exts) (cons n1557@name n1525@failed-list)))) (string-append (car n1523@ls) n1519@str (car n1524@exts)))))))) n1521@f) (n1412@library-path) (n1414@library-extensions) '())) (n1416@library-name->file-name n1517@x))) (lambda (n1559@f) (if (procedure? n1559@f) n1559@f (assertion-violation 'file-locator '"not a procedure" n1559@f))))) (set! n1420@serialize-all (lambda (n1561@serialize n1562@compile) ((lambda (n1566@library-desc) (begin (set! n1566@library-desc (lambda (n1569@x) (list (n1350@library-id n1569@x) (n1352@library-name n1569@x)))) (for-each (lambda (n1567@x) (if (n1376@library-source-file-name n1567@x) (n1561@serialize (n1376@library-source-file-name n1567@x) (list (n1350@library-id n1567@x) (n1352@library-name n1567@x) (n1354@library-version n1567@x) (map n1566@library-desc (n1356@library-imp* n1567@x)) (map n1566@library-desc (n1358@library-vis* n1567@x)) (map n1566@library-desc (n1360@library-inv* n1567@x)) (n1362@library-subst n1567@x) (n1364@library-env n1567@x) (n1562@compile (n1370@library-visit-code n1567@x)) (n1562@compile (n1372@library-invoke-code n1567@x)) (n1374@library-visible? n1567@x))) (void))) ((n1333@current-library-collection))))) '#f))) (set! n1422@current-precompiled-library-loader (n1165@n943@make-parameter (lambda (n1571@filename n1572@sk) '#f))) (set! n1424@try-load-from-file (lambda (n1575@filename) ((n1422@current-precompiled-library-loader) n1575@filename (lambda n1613 ((lambda (n1614) (if (= n1614 '11) (apply (lambda (n1577@id n1578@name n1579@ver n1580@imp* n1581@vis* n1582@inv* n1583@exp-subst n1584@exp-env n1585@visit-proc n1586@invoke-proc n1587@visible?) ((letrec ((n1599@f (lambda (n1601@deps) (if (null? n1601@deps) (begin (n1444@install-library n1577@id n1578@name n1579@ver n1580@imp* n1581@vis* n1582@inv* n1583@exp-subst n1584@exp-env n1585@visit-proc n1586@invoke-proc '#f '#f n1587@visible? '#f) '#t) ((lambda (n1603@d) ((lambda (n1605@label n1606@dname) ((lambda (n1609@l) (if (and (n1346@library? n1609@l) (eq? n1605@label (n1350@library-id n1609@l))) (n1599@f (cdr n1601@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" n1578@name n1606@dname n1575@filename n1609@l n1605@label (n1350@library-id n1609@l)) '#f))) (n1434@find-library-by-name n1606@dname))) (car n1603@d) (cadr n1603@d))) (car n1601@deps)))))) n1599@f) (append n1580@imp* n1581@vis* n1582@inv*))) n1613) (if (>= n1614 '0) (apply (lambda n1611@others '#f) n1613) (error 'apply '"invalid arg count")))) (length n1613)))))) (set! n1426@library-loader (n1165@n943@make-parameter (lambda (n1615@x) ((lambda (n1617@file-name) (if (not n1617@file-name) (assertion-violation '#f '"cannot file library" n1615@x) (or (n1424@try-load-from-file n1617@file-name) ((n1428@current-library-expander) (n1164@n941@read-library-source-file n1617@file-name) n1617@file-name (lambda (n1619@name) (if (not (fast-equal? n1619@name n1615@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (n1623@n1621@p n1624@n1622@e) ((lambda (n1627@e n1628@p) (begin (display '"expected to find library " n1628@p) (write n1615@x n1628@p) (display '" in file " n1628@p) (display n1617@file-name n1628@p) (display '", found " n1628@p) (write n1619@name n1628@p) (display '" instead" n1628@p) (n1627@e))) n1624@n1622@e n1623@n1621@p)))) (void))))))) ((n1418@file-locator) n1615@x))) (lambda (n1631@f) (if (procedure? n1631@f) n1631@f (assertion-violation 'library-locator '"not a procedure" n1631@f))))) (set! n1428@current-library-expander (n1165@n943@make-parameter (lambda (n1633@x) (assertion-violation 'library-expander '"not initialized")) (lambda (n1635@f) (if (procedure? n1635@f) n1635@f (assertion-violation 'library-expander '"not a procedure" n1635@f))))) (set! n1430@external-pending-libraries (n1165@n943@make-parameter '())) (set! n1432@find-external-library (lambda (n1637@name) (begin (if (member n1637@name (n1430@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" n1637@name) (void)) ((lambda (n1641@n1639@external-pending-libraries n1642@n1640@external-pending-libraries) ((lambda (n1645@swap) (dynamic-wind n1645@swap (lambda () (begin ((n1426@library-loader) n1637@name) (or (n1410@find-library-by (lambda (n1647@x) (fast-equal? (n1352@library-name n1647@x) n1637@name))) (assertion-violation '#f '"handling external library did not yield the correct library" n1637@name)))) n1645@swap)) (lambda () ((lambda (n1649@t) (begin (n1641@n1639@external-pending-libraries n1642@n1640@external-pending-libraries) (set! n1642@n1640@external-pending-libraries n1649@t))) (n1641@n1639@external-pending-libraries))))) n1430@external-pending-libraries (cons n1637@name (n1430@external-pending-libraries)))))) (set! n1434@find-library-by-name (lambda (n1651@name) (or (n1410@find-library-by (lambda (n1653@x) (fast-equal? (n1352@library-name n1653@x) n1651@name))) (n1432@find-external-library n1651@name)))) (set! n1436@library-exists? (lambda (n1655@name) (and (n1410@find-library-by (lambda (n1657@x) (fast-equal? (n1352@library-name n1657@x) n1655@name))) '#t))) (set! n1438@find-library-by-spec/die (lambda (n1659@spec) ((lambda (n1661@id) (or (n1410@find-library-by (lambda (n1663@x) (eq? n1661@id (n1350@library-id n1663@x)))) (assertion-violation '#f '"cannot find library with required spec" n1659@spec))) (car n1659@spec)))) (set! n1440@label->binding-table (make-eq-hashtable)) (set! n1442@install-library-record (lambda (n1665@lib) (begin ((lambda (n1667@exp-env) (for-each (lambda (n1669@x) ((lambda (n1671@label n1672@binding) ((lambda (n1675@binding) (begin (if (hashtable-ref n1440@label->binding-table n1671@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" n1671@label (hashtable-ref n1440@label->binding-table n1671@label '#f) n1675@binding) (exit)) (void)) (hashtable-set! n1440@label->binding-table n1671@label n1675@binding))) ((lambda (n1677@t) (if (memv n1677@t '(global)) (cons 'global (cons n1665@lib (cdr n1672@binding))) (if (memv n1677@t '(global-macro)) (cons 'global-macro (cons n1665@lib (cdr n1672@binding))) (if (memv n1677@t '(global-macro!)) (cons 'global-macro! (cons n1665@lib (cdr n1672@binding))) n1672@binding)))) (car n1672@binding)))) (car n1669@x) (cdr n1669@x))) n1667@exp-env)) (n1364@library-env n1665@lib)) ((n1333@current-library-collection) n1665@lib)))) (set! n1444@install-library (lambda (n1679@id n1680@name n1681@ver n1682@imp* n1683@vis* n1684@inv* n1685@exp-subst n1686@exp-env n1687@visit-proc n1688@invoke-proc n1689@visit-code n1690@invoke-code n1691@visible? n1692@source-file-name) ((lambda (n1707@imp-lib* n1708@vis-lib* n1709@inv-lib*) (begin (if (not (and (symbol? n1679@id) (list? n1680@name) (list? n1681@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" n1679@id n1680@name n1681@ver) (void)) (if (n1436@library-exists? n1680@name) (assertion-violation 'install-library '"library is already installed" n1680@name) (void)) ((lambda (n1713@lib) (n1442@install-library-record n1713@lib)) (n1348@make-library n1679@id n1680@name n1681@ver n1707@imp-lib* n1708@vis-lib* n1709@inv-lib* n1685@exp-subst n1686@exp-env n1687@visit-proc n1688@invoke-proc n1689@visit-code n1690@invoke-code n1691@visible? n1692@source-file-name)))) (map n1438@find-library-by-spec/die n1682@imp*) (map n1438@find-library-by-spec/die n1683@vis*) (map n1438@find-library-by-spec/die n1684@inv*)))) (set! n1446@imported-label->binding (lambda (n1715@lab) (hashtable-ref n1440@label->binding-table n1715@lab '#f))) (set! n1448@invoke-library (lambda (n1717@lib) ((lambda (n1719@invoke) (if (procedure? n1719@invoke) (begin (n1396@set-library-invoke-state! n1717@lib (lambda () (assertion-violation 'invoke '"circularity detected" n1717@lib))) (for-each n1448@invoke-library (n1360@library-inv* n1717@lib)) (n1396@set-library-invoke-state! n1717@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" n1717@lib))) (n1719@invoke) (n1396@set-library-invoke-state! n1717@lib '#t)) (void))) (n1368@library-invoke-state n1717@lib)))) (set! n1450@visit-library (lambda (n1721@lib) ((lambda (n1723@visit) (if (procedure? n1723@visit) (begin (n1394@set-library-visit-state! n1721@lib (lambda () (assertion-violation 'visit '"circularity detected" n1721@lib))) (for-each n1448@invoke-library (n1358@library-vis* n1721@lib)) (n1394@set-library-visit-state! n1721@lib (lambda () (assertion-violation 'invoke '"first visit did not return" n1721@lib))) (n1723@visit) (n1394@set-library-visit-state! n1721@lib '#t)) (void))) (n1366@library-visit-state n1721@lib)))) (set! n1452@invoke-library-by-spec (lambda (n1725@spec) (n1448@invoke-library (n1438@find-library-by-spec/die n1725@spec)))) (set! n1454@installed-libraries (lambda n1733 ((lambda (n1734) (if (= n1734 '1) (apply (lambda (n1727@all?) ((letrec ((n1729@f (lambda (n1731@ls) (if (null? n1731@ls) '() (if (or n1727@all? (n1374@library-visible? (car n1731@ls))) (cons (car n1731@ls) (n1729@f (cdr n1731@ls))) (n1729@f (cdr n1731@ls))))))) n1729@f) ((n1333@current-library-collection)))) n1733) (if (= n1734 '0) (apply (lambda () (n1454@installed-libraries '#f)) n1733) (error 'apply '"invalid arg count")))) (length n1733)))) (set! n1456@library-spec (lambda (n1735@x) (begin (if (not (n1346@library? n1735@x)) (assertion-violation 'library-spec '"not a library" n1735@x) (void)) (list (n1350@library-id n1735@x) (n1352@library-name n1735@x) (n1354@library-version n1735@x))))) (begin (set! n1797@n1456@library-spec n1456@library-spec) (set! n1796@n1454@installed-libraries n1454@installed-libraries) (set! n1795@n1452@invoke-library-by-spec n1452@invoke-library-by-spec) (set! n1794@n1450@visit-library n1450@visit-library) (set! n1793@n1448@invoke-library n1448@invoke-library) (set! n1792@n1446@imported-label->binding n1446@imported-label->binding) (set! n1791@n1444@install-library n1444@install-library) (set! n1790@n1442@install-library-record n1442@install-library-record) (set! n1789@n1440@label->binding-table n1440@label->binding-table) (set! n1788@n1438@find-library-by-spec/die n1438@find-library-by-spec/die) (set! n1787@n1436@library-exists? n1436@library-exists?) (set! n1786@n1434@find-library-by-name n1434@find-library-by-name) (set! n1785@n1432@find-external-library n1432@find-external-library) (set! n1784@n1430@external-pending-libraries n1430@external-pending-libraries) (set! n1783@n1428@current-library-expander n1428@current-library-expander) (set! n1782@n1426@library-loader n1426@library-loader) (set! n1781@n1424@try-load-from-file n1424@try-load-from-file) (set! n1780@n1422@current-precompiled-library-loader n1422@current-precompiled-library-loader) (set! n1779@n1420@serialize-all n1420@serialize-all) (set! n1778@n1418@file-locator n1418@file-locator) (set! n1777@n1416@library-name->file-name n1416@library-name->file-name) (set! n1776@n1414@library-extensions n1414@library-extensions) (set! n1775@n1412@library-path n1412@library-path) (set! n1774@n1410@find-library-by n1410@find-library-by) (set! n1773@n1408@find-dependencies n1408@find-dependencies) (set! n1772@n1406@rp n1406@rp) (set! n1771@n1404@set-library-source-file-name! n1404@set-library-source-file-name!) (set! n1770@n1402@set-library-visible?! n1402@set-library-visible?!) (set! n1769@n1400@set-library-invoke-code! n1400@set-library-invoke-code!) (set! n1768@n1398@set-library-visit-code! n1398@set-library-visit-code!) (set! n1767@n1396@set-library-invoke-state! n1396@set-library-invoke-state!) (set! n1766@n1394@set-library-visit-state! n1394@set-library-visit-state!) (set! n1765@n1392@set-library-env! n1392@set-library-env!) (set! n1764@n1390@set-library-subst! n1390@set-library-subst!) (set! n1763@n1388@set-library-inv*! n1388@set-library-inv*!) (set! n1762@n1386@set-library-vis*! n1386@set-library-vis*!) (set! n1761@n1384@set-library-imp*! n1384@set-library-imp*!) (set! n1760@n1382@set-library-version! n1382@set-library-version!) (set! n1759@n1380@set-library-name! n1380@set-library-name!) (set! n1758@n1378@set-library-id! n1378@set-library-id!) (set! n1757@n1376@library-source-file-name n1376@library-source-file-name) (set! n1756@n1374@library-visible? n1374@library-visible?) (set! n1755@n1372@library-invoke-code n1372@library-invoke-code) (set! n1754@n1370@library-visit-code n1370@library-visit-code) (set! n1753@n1368@library-invoke-state n1368@library-invoke-state) (set! n1752@n1366@library-visit-state n1366@library-visit-state) (set! n1751@n1364@library-env n1364@library-env) (set! n1750@n1362@library-subst n1362@library-subst) (set! n1749@n1360@library-inv* n1360@library-inv*) (set! n1748@n1358@library-vis* n1358@library-vis*) (set! n1747@n1356@library-imp* n1356@library-imp*) (set! n1746@n1354@library-version n1354@library-version) (set! n1745@n1352@library-name n1352@library-name) (set! n1744@n1350@library-id n1350@library-id) (set! n1743@n1348@make-library n1348@make-library) (set! n1742@n1346@library? n1346@library?) (set! n1741@n1343@n1335 n1343@n1335) (set! n1740@n1341@n1336 n1341@n1336) (set! n1739@n1339@n1334 n1339@n1334) (set! n1738@n1333@current-library-collection n1333@current-library-collection) (set! n1737@n1331@make-collection n1331@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (n1800@build-global-define n1913@build-lambda n1915@build-case-lambda n1917@build-let n1963@build-sequence n1965@build-void n1967@build-letrec n1969@build-letrec* n1971@build-library-letrec* n1973@build-receive) (begin (set! n1800@build-global-define (lambda (n1974@x) (n1965@build-void))) (set! n1913@build-lambda (lambda (n1976@ae n1977@vars n1978@exp) (list 'lambda n1977@vars n1978@exp))) (set! n1915@build-case-lambda (lambda (n1982@ae n1983@vars* n1984@exp*) ((lambda (n1989@build-error n1991@build-pred n1993@build-apply n1995@expand-case-lambda) (begin (set! n1989@build-error (lambda (n2042@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! n1991@build-pred (lambda (n2020@ae n2021@n n2022@vars) (call-with-values (lambda () ((letrec ((n2028@f (lambda (n2030@vars n2031@count) (if (pair? n2030@vars) (n2028@f (cdr n2030@vars) (+ n2031@count '1)) (if (null? n2030@vars) (values n2031@count '=) (values n2031@count '>=)))))) n2028@f) n2022@vars '0)) (lambda (n2034@n2026@count n2035@n2027@pred) ((lambda (n2038@pred n2039@count) (list (list 'primitive n2038@pred) n2021@n (list 'quote n2039@count))) n2035@n2027@pred n2034@n2026@count))))) (set! n1993@build-apply (lambda (n2012@ae n2013@g n2014@vars n2015@exp) (list '(primitive apply) (n1913@build-lambda n2012@ae n2014@vars n2015@exp) n2013@g))) (set! n1995@expand-case-lambda (lambda (n1996@ae n1997@vars n1998@exp*) ((lambda (n2002@g n2003@n) (list 'lambda n2002@g (n1917@build-let n1996@ae (list n2003@n) (list (list '(primitive length) n2002@g)) ((letrec ((n2006@f (lambda (n2008@vars* n2009@exp*) (if (null? n2008@vars*) (n1989@build-error n1996@ae) (list 'if (n1991@build-pred n1996@ae n2003@n (car n2008@vars*)) (n1993@build-apply n1996@ae n2002@g (car n2008@vars*) (car n2009@exp*)) (n2006@f (cdr n2008@vars*) (cdr n2009@exp*))))))) n2006@f) n1983@vars* n1998@exp*)))) (n1151@n915@gensym) (n1151@n915@gensym)))) (if (= (length n1984@exp*) '1) (n1913@build-lambda n1982@ae (car n1983@vars*) (car n1984@exp*)) (n1995@expand-case-lambda n1982@ae n1983@vars* n1984@exp*)))) '#f '#f '#f '#f))) (set! n1917@build-let (lambda (n2044@ae n2045@lhs* n2046@rhs* n2047@body) (cons (n1913@build-lambda n2044@ae n2045@lhs* n2047@body) n2046@rhs*))) (set! n1963@build-sequence (lambda (n2052@ae n2053@exps) ((letrec ((n2056@loop (lambda (n2058@exps) (if (null? (cdr n2058@exps)) (car n2058@exps) (if (equal? (car n2058@exps) (n1965@build-void)) (n2056@loop (cdr n2058@exps)) (cons 'begin n2058@exps)))))) n2056@loop) n2053@exps))) (set! n1965@build-void (lambda () '((primitive void)))) (set! n1967@build-letrec (lambda (n2060@ae n2061@vars n2062@val-exps n2063@body-exp) (if (null? n2061@vars) n2063@body-exp (list 'letrec (map list n2061@vars n2062@val-exps) n2063@body-exp)))) (set! n1969@build-letrec* (lambda (n2068@ae n2069@vars n2070@val-exps n2071@body-exp) (if (null? n2069@vars) n2071@body-exp (n1917@build-let n2068@ae n2069@vars (map (lambda (n2076@x) (list 'quote '#f)) n2069@vars) (n1963@build-sequence n2068@ae (append (map (lambda (n2078@lhs n2079@rhs) (list 'set! n2078@lhs n2079@rhs)) n2069@vars n2070@val-exps) (list n2071@body-exp))))))) (set! n1971@build-library-letrec* (lambda (n2082@ae n2083@name n2084@vars n2085@locs n2086@val-exps n2087@body-exp) (list 'library-letrec* n2083@name (map list n2084@vars n2085@locs n2086@val-exps) n2087@body-exp))) (set! n1973@build-receive (lambda (n2094@ae n2095@vars n2096@producer n2097@body*) (begin (display '"************** in ") (cons 'receive (cons n2095@vars (cons n2096@producer n2097@body*)))))) (begin (set! n2111@n1973@build-receive n1973@build-receive) (set! n2110@n1971@build-library-letrec* n1971@build-library-letrec*) (set! n2109@n1969@build-letrec* n1969@build-letrec*) (set! n2108@n1967@build-letrec n1967@build-letrec) (set! n2107@n1965@build-void n1965@build-void) (set! n2106@n1963@build-sequence n1963@build-sequence) (set! n2105@n1917@build-let n1917@build-let) (set! n2104@n1915@build-case-lambda n1915@build-case-lambda) (set! n2103@n1913@build-lambda n1913@build-lambda) (set! n2102@n1800@build-global-define n1800@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (n2126@file-options-macro n2128@set-cons n2130@set-union n2135@top-mark* n2137@top-marked? n2139@gen-lexical n2141@gen-global n2143@gen-label n2145@gen-top-level-label n2147@gen-define-label+loc n2149@gen-define-label n2155@n2150 n2157@n2152 n2159@n2151 n2162@rib? n2164@make-rib n2166@rib-sym* n2168@rib-mark** n2170@rib-label* n2172@rib-sealed/freq n2174@rib-cache n2176@set-rib-sym*! n2178@set-rib-mark**! n2180@set-rib-label*! n2182@set-rib-sealed/freq! n2184@set-rib-cache! n2186@make-empty-rib n2188@extend-rib! n2190@extend-rib/nc! n2192@make-rib-map n2194@seal-rib! n2196@unseal-rib! n2198@make-full-rib n2204@n2199 n2206@n2201 n2208@n2200 n2211@stx? n2213@make-stx n2215@stx-expr n2217@stx-mark* n2219@stx-subst* n2221@stx-ae* n2223@set-stx-expr! n2225@set-stx-mark*! n2227@set-stx-subst*! n2229@set-stx-ae*! n2231@rp n2233@datum->stx n2235@gen-mark n2237@anti-mark n2239@anti-mark? n2241@join-wraps n2243@mkstx n2245@add-mark n2247@add-subst n2249@syntax-kind? n2251@syntax-vector->list n2253@syntax-pair? n2255@syntax-vector? n2257@syntax-null? n2259@syntax-list? n2261@syntax-car n2263@syntax-cdr n2265@syntax->list n2267@id? n2269@id->sym n2271@same-marks? n2273@bound-id=? n2275@free-id=? n2277@valid-bound-ids? n2279@distinct-bound-ids? n2281@bound-id-member? n2283@self-evaluating? n2285@strip-annotations n2287@strip n2289@stx->datum n2291@same-marks*? n2293@id->label n2295@id->real-label n2297@label->binding n2299@make-binding n2301@binding-type n2303@binding-value n2305@raise-unbound-error n2307@syntax-type n2321@sanitize-binding n2323@make-variable-transformer n2325@variable-transformer? n2327@variable-transformer-procedure n2329@make-eval-transformer n2640@parse-define n2642@parse-define-syntax n2644@scheme-stx-hashtable n2646@scheme-stx n2648@lexical-var n2650@lexical-mutable? n2652@set-lexical-mutable! n2654@add-lexical n2656@add-lexicals n2658@letrec-helper n2660@letrec-transformer n2662@letrec*-transformer n2664@fluid-let-syntax-transformer n2666@type-descriptor-transformer n2668@record-type-descriptor-transformer n2670@record-constructor-descriptor-transformer n2672@when-macro n2674@unless-macro n2676@if-transformer n2678@and-transformer n2680@or-transformer n2682@case-macro n2684@quote-transformer n2686@case-lambda-transformer n2688@lambda-transformer n2690@bless n2692@with-syntax-macro n2694@invalid-fmls-error n2696@let-macro n2698@let-values-macro n2700@let*-values-macro n2702@trace-lambda-macro n2704@trace-define-macro n2706@trace-define-syntax-macro n2708@trace-let/rec-syntax n2710@trace-let-syntax-macro n2712@trace-letrec-syntax-macro n2714@guard-macro n2716@define-enumeration-macro n2718@time-macro n2720@delay-macro n2722@assert-macro n2724@endianness-macro n2726@identifier-syntax-macro n2728@do-macro n2730@let*-macro n2732@or-macro n2734@and-macro n2736@cond-macro n2738@do-include n2740@include-macro n2742@include-into-macro n2744@syntax-rules-macro n2746@quasiquote-macro n2748@quasisyntax-macro n2750@define-struct-macro n2752@define-record-type-macro n2754@define-condition-type-macro n2756@incorrect-usage-macro n2758@parameterize-macro n2760@foreign-call-transformer n2762@convert-pattern n2764@syntax-dispatch n2766@ellipsis? n2768@underscore? n2770@verify-literals n2772@syntax-case-transformer n2774@ellipsis-map n2776@syntax-transformer n2778@core-macro-transformer n2780@symbol-macro n2782@macro-transformer n2784@local-macro-transformer n2786@do-macro-call n2788@chi-macro n2790@chi-local-macro n2792@chi-global-macro n2794@chi-expr* n2796@chi-application n2798@chi-expr n2800@chi-set! n2802@verify-formals n2804@chi-lambda-clause n2806@chi-lambda-clause* n2808@chi-defun n2810@chi-rhs n2812@expand-interaction-rhs*/init* n2814@chi-rhs* n2816@find-bound=? n2818@find-dups n2820@chi-internal n2822@parse-module n2828@n2823 n2830@n2825 n2832@n2824 n2835@module-interface? n2837@make-module-interface n2839@module-interface-first-mark n2841@module-interface-exp-id-vec n2843@module-interface-exp-lab-vec n2845@set-module-interface-first-mark! n2847@set-module-interface-exp-id-vec! n2849@set-module-interface-exp-lab-vec! n2851@module-interface-exp-id* n2853@chi-internal-module n2855@chi-body* n2857@expand-transformer n2859@parse-exports n2861@parse-library-name n2863@parse-library n2865@parse-import-spec* n2867@make-top-rib n2869@make-collector n2871@inv-collector n2873@vis-collector n2875@imp-collector n2877@chi-library-internal n2879@chi-interaction-expr n2881@library-body-expander n2883@core-library-expander n2885@parse-top-level-program n2887@top-level-expander n2893@n2888 n2895@n2890 n2897@n2889 n2900@env? n2902@make-env n2904@env-names n2906@env-labels n2908@env-itc n2910@set-env-names! n2912@set-env-labels! n2914@set-env-itc! n2916@rp n2922@n2917 n2924@n2919 n2926@n2918 n2929@interaction-env? n2931@make-interaction-env n2933@interaction-env-rib n2935@interaction-env-r n2937@interaction-env-locs n2939@set-interaction-env-rib! n2941@set-interaction-env-r! n2943@set-interaction-env-locs! n2945@rp n2947@interaction-environment-symbols n2949@environment-bindings n2951@parse-binding n2953@environment? n2955@environment-symbols n2957@environment n2959@null-environment n2961@scheme-report-environment n2963@expand n2965@eval n2967@library-expander n2969@boot-library-expand n2971@rev-map-append n2973@build-exports n2975@make-export-subst n2977@make-export-env/macros n2979@generate-temporaries n2981@free-identifier=? n2983@bound-identifier=? n2985@make-source-condition n2987@extract-position-condition n2989@expression-position n2991@assertion-error n2993@syntax-error n2995@syntax-violation* n2997@syntax-violation n2999@identifier? n3001@datum->syntax n3003@syntax->datum n3005@compile-r6rs-top-level n3007@pre-compile-r6rs-top-level n3009@interaction-environment n3011@top-level-context) (begin (set! n2126@file-options-macro (lambda (n3012@x) ((lambda (n3015@valid-option?) (begin (set! n3015@valid-option? (lambda (n3024@x) (and (n2267@id? n3024@x) (memq (n2269@id->sym n3024@x) '(no-fail no-create no-truncate))))) ((lambda (n3016@t) ((lambda (n3018@ls/false) (if (and n3018@ls/false (apply (lambda (n3020@opt*) (for-all n3015@valid-option? n3020@opt*)) n3018@ls/false)) (apply (lambda (n3022@opt*) (n2690@bless (list 'make-file-options (list 'quote n3022@opt*)))) n3018@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3016@t))) (n2764@syntax-dispatch n3016@t '(_ . each-any)))) n3012@x))) '#f))) (set! n2128@set-cons (lambda (n3026@x n3027@ls) (if (memq n3026@x n3027@ls) n3027@ls (cons n3026@x n3027@ls)))) (set! n2130@set-union (lambda (n3030@ls1 n3031@ls2) (if (null? n3030@ls1) n3031@ls2 (if (memq (car n3030@ls1) n3031@ls2) (n2130@set-union (cdr n3030@ls1) n3031@ls2) (cons (car n3030@ls1) (n2130@set-union (cdr n3030@ls1) n3031@ls2)))))) (set! n2135@top-mark* '(top)) (set! n2137@top-marked? (lambda (n3034@m*) (memq 'top n3034@m*))) (set! n2139@gen-lexical (lambda (n3036@sym) (if (symbol? n3036@sym) (n1151@n915@gensym n3036@sym) (if (n2211@stx? n3036@sym) (n2139@gen-lexical (n2269@id->sym n3036@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" n3036@sym))))) (set! n2141@gen-global (lambda (n3038@x) (n2139@gen-lexical n3038@x))) (set! n2143@gen-label (lambda (n3040@_) (n1151@n915@gensym))) (set! n2145@gen-top-level-label (lambda (n3042@id n3043@rib) ((lambda (n3047@find) (begin (set! n3047@find (lambda (n3058@sym n3059@mark* n3060@sym* n3061@mark** n3062@label*) (and (pair? n3060@sym*) (if (and (eq? n3058@sym (car n3060@sym*)) (n2271@same-marks? n3059@mark* (car n3061@mark**))) (car n3062@label*) (n3047@find n3058@sym n3059@mark* (cdr n3060@sym*) (cdr n3061@mark**) (cdr n3062@label*)))))) ((lambda (n3048@sym n3049@mark*) ((lambda (n3052@sym*) ((lambda (n3054@t) (if n3054@t ((lambda (n3056@label) (if (n1792@n1446@imported-label->binding n3056@label) (n1151@n915@gensym) n3056@label)) n3054@t) (n1151@n915@gensym))) (and (memq n3048@sym (n2166@rib-sym* n3043@rib)) (n3047@find n3048@sym n3049@mark* n3052@sym* (n2168@rib-mark** n3043@rib) (n2170@rib-label* n3043@rib))))) (n2166@rib-sym* n3043@rib))) (n2269@id->sym n3042@id) (n2217@stx-mark* n3042@id)))) '#f))) (set! n2147@gen-define-label+loc (lambda (n3068@id n3069@rib) ((lambda (n3072@t) (if n3072@t ((lambda (n3074@env) ((lambda (n3076@label n3077@locs) (values n3076@label ((lambda (n3080@t) (if n3080@t (cdr n3080@t) ((lambda (n3082@loc) (begin (n2943@set-interaction-env-locs! n3074@env (cons (cons n3076@label n3082@loc) n3077@locs)) n3082@loc)) (n2139@gen-lexical n3068@id)))) (assq n3076@label n3077@locs)))) (n2145@gen-top-level-label n3068@id n3069@rib) (n2937@interaction-env-locs n3074@env))) n3072@t) (values (n1151@n915@gensym) (n2139@gen-lexical n3068@id)))) (n3011@top-level-context)))) (set! n2149@gen-define-label (lambda (n3084@id n3085@rib) (if (n3011@top-level-context) (n2145@gen-top-level-label n3084@id n3085@rib) (n1151@n915@gensym)))) (set! n2155@n2150 (make-record-type-descriptor 'rib '#f 'n2153 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! n2157@n2152 '#f) (set! n2159@n2151 (make-record-constructor-descriptor n2155@n2150 '#f n2157@n2152)) (set! n2162@rib? (record-predicate n2155@n2150)) (set! n2164@make-rib (record-constructor n2159@n2151)) (set! n2166@rib-sym* (record-accessor n2155@n2150 '0)) (set! n2168@rib-mark** (record-accessor n2155@n2150 '1)) (set! n2170@rib-label* (record-accessor n2155@n2150 '2)) (set! n2172@rib-sealed/freq (record-accessor n2155@n2150 '3)) (set! n2174@rib-cache (record-accessor n2155@n2150 '4)) (set! n2176@set-rib-sym*! (record-mutator n2155@n2150 '0)) (set! n2178@set-rib-mark**! (record-mutator n2155@n2150 '1)) (set! n2180@set-rib-label*! (record-mutator n2155@n2150 '2)) (set! n2182@set-rib-sealed/freq! (record-mutator n2155@n2150 '3)) (set! n2184@set-rib-cache! (record-mutator n2155@n2150 '4)) (set! n2186@make-empty-rib (lambda () (n2164@make-rib '() '() '() '#f '#f))) (set! n2188@extend-rib! (lambda (n3088@rib n3089@id n3090@label) ((lambda (n3095@find) (begin (set! n3095@find (lambda (n3108@sym n3109@mark* n3110@sym* n3111@mark** n3112@label*) (and (pair? n3110@sym*) (if (and (eq? n3108@sym (car n3110@sym*)) (n2271@same-marks? n3109@mark* (car n3111@mark**))) n3112@label* (n3095@find n3108@sym n3109@mark* (cdr n3110@sym*) (cdr n3111@mark**) (cdr n3112@label*)))))) (begin (if (n2172@rib-sealed/freq n3088@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" n3088@rib) (void)) ((lambda (n3096@sym n3097@mark*) ((lambda (n3100@sym*) ((lambda (n3102@t) (if n3102@t ((lambda (n3104@p) (if (not (eq? n3090@label (car n3104@p))) (if (n3011@top-level-context) (set-car! n3104@p n3090@label) (n2997@syntax-violation '#f '"multiple definitions of identifier" n3089@id)) (void))) n3102@t) (begin (if (n2174@rib-cache n3088@rib) (hashtable-update! (n2174@rib-cache n3088@rib) n3096@sym (lambda (n3106@e) (cons (cons n3097@mark* n3090@label) n3106@e)) '()) (void)) (n2176@set-rib-sym*! n3088@rib (cons n3096@sym n3100@sym*)) (n2178@set-rib-mark**! n3088@rib (cons n3097@mark* (n2168@rib-mark** n3088@rib))) (n2180@set-rib-label*! n3088@rib (cons n3090@label (n2170@rib-label* n3088@rib)))))) (and (memq n3096@sym (n2166@rib-sym* n3088@rib)) (n3095@find n3096@sym n3097@mark* n3100@sym* (n2168@rib-mark** n3088@rib) (n2170@rib-label* n3088@rib))))) (n2166@rib-sym* n3088@rib))) (n2269@id->sym n3089@id) (n2217@stx-mark* n3089@id))))) '#f))) (set! n2190@extend-rib/nc! (lambda (n3118@rib n3119@id n3120@label) ((lambda (n3124@sym n3125@mark*) ((lambda (n3128@sym*) (begin (if (n2174@rib-cache n3118@rib) (hashtable-update! (n2174@rib-cache n3118@rib) n3124@sym (lambda (n3130@e) (cons (cons n3125@mark* n3120@label) n3130@e)) '()) (void)) (n2176@set-rib-sym*! n3118@rib (cons n3124@sym n3128@sym*)) (n2178@set-rib-mark**! n3118@rib (cons n3125@mark* (n2168@rib-mark** n3118@rib))) (n2180@set-rib-label*! n3118@rib (cons n3120@label (n2170@rib-label* n3118@rib))))) (n2166@rib-sym* n3118@rib))) (n2269@id->sym n3119@id) (n2217@stx-mark* n3119@id)))) (set! n2192@make-rib-map (lambda (n3132@sym*) ((lambda (n3134@ht) ((letrec ((n3136@f (lambda (n3138@i n3139@sym*) (if (null? n3139@sym*) n3134@ht (begin (hashtable-update! n3134@ht (car n3139@sym*) (lambda (n3142@x) (cons n3138@i n3142@x)) '()) (n3136@f (+ n3138@i '1) (cdr n3139@sym*))))))) n3136@f) '0 n3132@sym*)) (make-eq-hashtable)))) (set! n2194@seal-rib! (lambda (n3144@rib) ((lambda (n3146@sym*) (if (not (null? n3146@sym*)) (begin (n2176@set-rib-sym*! n3144@rib (list->vector n3146@sym*)) (n2178@set-rib-mark**! n3144@rib (list->vector (n2168@rib-mark** n3144@rib))) (n2180@set-rib-label*! n3144@rib (list->vector (n2170@rib-label* n3144@rib))) (n2182@set-rib-sealed/freq! n3144@rib (n2192@make-rib-map n3146@sym*))) (void))) (n2166@rib-sym* n3144@rib)))) (set! n2196@unseal-rib! (lambda (n3148@rib) (if (n2172@rib-sealed/freq n3148@rib) (begin (n2182@set-rib-sealed/freq! n3148@rib '#f) (n2176@set-rib-sym*! n3148@rib (vector->list (n2166@rib-sym* n3148@rib))) (n2178@set-rib-mark**! n3148@rib (vector->list (n2168@rib-mark** n3148@rib))) (n2180@set-rib-label*! n3148@rib (vector->list (n2170@rib-label* n3148@rib)))) (void)))) (set! n2198@make-full-rib (lambda (n3150@id* n3151@label*) ((lambda (n3154@r) (begin (n2194@seal-rib! n3154@r) n3154@r)) (n2164@make-rib (map n2269@id->sym n3150@id*) (map n2217@stx-mark* n3150@id*) n3151@label* '#f '#f)))) (set! n2204@n2199 (make-record-type-descriptor 'stx '#f 'n2202 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! n2206@n2201 '#f) (set! n2208@n2200 (make-record-constructor-descriptor n2204@n2199 '#f n2206@n2201)) (set! n2211@stx? (record-predicate n2204@n2199)) (set! n2213@make-stx (record-constructor n2208@n2200)) (set! n2215@stx-expr (record-accessor n2204@n2199 '0)) (set! n2217@stx-mark* (record-accessor n2204@n2199 '1)) (set! n2219@stx-subst* (record-accessor n2204@n2199 '2)) (set! n2221@stx-ae* (record-accessor n2204@n2199 '3)) (set! n2223@set-stx-expr! (record-mutator n2204@n2199 '0)) (set! n2225@set-stx-mark*! (record-mutator n2204@n2199 '1)) (set! n2227@set-stx-subst*! (record-mutator n2204@n2199 '2)) (set! n2229@set-stx-ae*! (record-mutator n2204@n2199 '3)) (set! n2231@rp (n1162@n937@make-record-printer 'stx (lambda (n3156@x n3157@p n3158@wr) (begin (display '"#<syntax " n3157@p) (write (n2289@stx->datum n3156@x) n3157@p) ((lambda (n3162@expr) (if (n1154@n921@annotation? n3162@expr) ((lambda (n3164@src) (if (pair? n3164@src) (begin (display '" [" n3157@p) (display (cdr n3164@src) n3157@p) (display '" of " n3157@p) (display (car n3164@src) n3157@p) (display '"]" n3157@p)) (void))) (n1155@n923@annotation-source n3162@expr)) (void))) (n2215@stx-expr n3156@x)) (display '">" n3157@p))))) (set! n2233@datum->stx (lambda (n3166@id n3167@datum) (n2213@make-stx n3167@datum (n2217@stx-mark* n3166@id) (n2219@stx-subst* n3166@id) (n2221@stx-ae* n3166@id)))) (set! n2235@gen-mark (lambda () (string '#\m))) (set! n2237@anti-mark '#f) (set! n2239@anti-mark? not) (set! n2241@join-wraps (lambda (n3170@m1* n3171@s1* n3172@ae1* n3173@e) ((lambda (n3179@cancel) (begin (set! n3179@cancel (lambda (n3186@ls1 n3187@ls2) ((letrec ((n3190@f (lambda (n3192@x n3193@ls1) (if (null? n3193@ls1) (cdr n3187@ls2) (cons n3192@x (n3190@f (car n3193@ls1) (cdr n3193@ls1))))))) n3190@f) (car n3186@ls1) (cdr n3186@ls1)))) ((lambda (n3180@m2* n3181@s2* n3182@ae2*) (if (and (not (null? n3170@m1*)) (not (null? n3180@m2*)) (n2239@anti-mark? (car n3180@m2*))) (values (n3179@cancel n3170@m1* n3180@m2*) (n3179@cancel n3171@s1* n3181@s2*) (n3179@cancel n3172@ae1* n3182@ae2*)) (values (append n3170@m1* n3180@m2*) (append n3171@s1* n3181@s2*) (append n3172@ae1* n3182@ae2*)))) (n2217@stx-mark* n3173@e) (n2219@stx-subst* n3173@e) (n2221@stx-ae* n3173@e)))) '#f))) (set! n2243@mkstx (lambda (n3196@e n3197@m* n3198@s* n3199@ae*) (if (and (n2211@stx? n3196@e) (not (n2137@top-marked? n3197@m*))) (call-with-values (lambda () (n2241@join-wraps n3197@m* n3198@s* n3199@ae* n3196@e)) (lambda (n3207@n3204@m* n3208@n3205@s* n3209@n3206@ae*) ((lambda (n3213@ae* n3214@s* n3215@m*) (n2213@make-stx (n2215@stx-expr n3196@e) n3215@m* n3214@s* n3213@ae*)) n3209@n3206@ae* n3208@n3205@s* n3207@n3204@m*))) (n2213@make-stx n3196@e n3197@m* n3198@s* n3199@ae*)))) (set! n2245@add-mark (lambda (n3219@m n3220@e n3221@ae) (n2243@mkstx n3220@e (list n3219@m) '(shift) (list n3221@ae)))) (set! n2247@add-subst (lambda (n3225@subst n3226@e) (n2243@mkstx n3226@e '() (list n3225@subst) '()))) (set! n2249@syntax-kind? (lambda (n3229@x n3230@p?) (if (n2211@stx? n3229@x) (n2249@syntax-kind? (n2215@stx-expr n3229@x) n3230@p?) (if (n1154@n921@annotation? n3229@x) (n2249@syntax-kind? (n1156@n925@annotation-expression n3229@x) n3230@p?) (n3230@p? n3229@x))))) (set! n2251@syntax-vector->list (lambda (n3233@x) (if (n2211@stx? n3233@x) ((lambda (n3235@ls n3236@m* n3237@s* n3238@ae*) (map (lambda (n3243@x) (n2243@mkstx n3243@x n3236@m* n3237@s* n3238@ae*)) n3235@ls)) (n2251@syntax-vector->list (n2215@stx-expr n3233@x)) (n2217@stx-mark* n3233@x) (n2219@stx-subst* n3233@x) (n2221@stx-ae* n3233@x)) (if (n1154@n921@annotation? n3233@x) (n2251@syntax-vector->list (n1156@n925@annotation-expression n3233@x)) (if (vector? n3233@x) (vector->list n3233@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" n3233@x)))))) (set! n2253@syntax-pair? (lambda (n3245@x) (n2249@syntax-kind? n3245@x pair?))) (set! n2255@syntax-vector? (lambda (n3247@x) (n2249@syntax-kind? n3247@x vector?))) (set! n2257@syntax-null? (lambda (n3249@x) (n2249@syntax-kind? n3249@x null?))) (set! n2259@syntax-list? (lambda (n3251@x) (or (n2257@syntax-null? n3251@x) (and (n2253@syntax-pair? n3251@x) (n2259@syntax-list? (n2263@syntax-cdr n3251@x)))))) (set! n2261@syntax-car (lambda (n3253@x) (if (n2211@stx? n3253@x) (n2243@mkstx (n2261@syntax-car (n2215@stx-expr n3253@x)) (n2217@stx-mark* n3253@x) (n2219@stx-subst* n3253@x) (n2221@stx-ae* n3253@x)) (if (n1154@n921@annotation? n3253@x) (n2261@syntax-car (n1156@n925@annotation-expression n3253@x)) (if (pair? n3253@x) (car n3253@x) (assertion-violation 'syntax-car '"BUG: not a pair" n3253@x)))))) (set! n2263@syntax-cdr (lambda (n3255@x) (if (n2211@stx? n3255@x) (n2243@mkstx (n2263@syntax-cdr (n2215@stx-expr n3255@x)) (n2217@stx-mark* n3255@x) (n2219@stx-subst* n3255@x) (n2221@stx-ae* n3255@x)) (if (n1154@n921@annotation? n3255@x) (n2263@syntax-cdr (n1156@n925@annotation-expression n3255@x)) (if (pair? n3255@x) (cdr n3255@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" n3255@x)))))) (set! n2265@syntax->list (lambda (n3257@x) (if (n2253@syntax-pair? n3257@x) (cons (n2261@syntax-car n3257@x) (n2265@syntax->list (n2263@syntax-cdr n3257@x))) (if (n2257@syntax-null? n3257@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" n3257@x))))) (set! n2267@id? (lambda (n3259@x) (and (n2211@stx? n3259@x) ((lambda (n3261@expr) (symbol? (if (n1154@n921@annotation? n3261@expr) (n1153@n919@annotation-stripped n3261@expr) n3261@expr))) (n2215@stx-expr n3259@x))))) (set! n2269@id->sym (lambda (n3263@x) (begin (if (not (n2211@stx? n3263@x)) (error 'id->sym '"BUG in ikarus: not an id" n3263@x) (void)) ((lambda (n3265@expr) ((lambda (n3267@sym) (if (symbol? n3267@sym) n3267@sym (error 'id->sym '"BUG in ikarus: not an id" n3263@x))) (if (n1154@n921@annotation? n3265@expr) (n1153@n919@annotation-stripped n3265@expr) n3265@expr))) (n2215@stx-expr n3263@x))))) (set! n2271@same-marks? (lambda (n3269@x n3270@y) (or (and (null? n3269@x) (null? n3270@y)) (and (pair? n3269@x) (pair? n3270@y) (eq? (car n3269@x) (car n3270@y)) (n2271@same-marks? (cdr n3269@x) (cdr n3270@y)))))) (set! n2273@bound-id=? (lambda (n3273@x n3274@y) (and (eq? (n2269@id->sym n3273@x) (n2269@id->sym n3274@y)) (n2271@same-marks? (n2217@stx-mark* n3273@x) (n2217@stx-mark* n3274@y))))) (set! n2275@free-id=? (lambda (n3277@i n3278@j) ((lambda (n3281@t0 n3282@t1) (if (or n3281@t0 n3282@t1) (eq? n3281@t0 n3282@t1) (eq? (n2269@id->sym n3277@i) (n2269@id->sym n3278@j)))) (n2295@id->real-label n3277@i) (n2295@id->real-label n3278@j)))) (set! n2277@valid-bound-ids? (lambda (n3285@id*) (and (for-all n2267@id? n3285@id*) (n2279@distinct-bound-ids? n3285@id*)))) (set! n2279@distinct-bound-ids? (lambda (n3287@id*) (or (null? n3287@id*) (and (not (n2281@bound-id-member? (car n3287@id*) (cdr n3287@id*))) (n2279@distinct-bound-ids? (cdr n3287@id*)))))) (set! n2281@bound-id-member? (lambda (n3289@id n3290@id*) (and (pair? n3290@id*) (or (n2273@bound-id=? n3289@id (car n3290@id*)) (n2281@bound-id-member? n3289@id (cdr n3290@id*)))))) (set! n2283@self-evaluating? (lambda (n3293@x) (or (number? n3293@x) (string? n3293@x) (char? n3293@x) (boolean? n3293@x) (regexp? n3293@x) (bytevector? n3293@x)))) (set! n2285@strip-annotations (lambda (n3295@x) (if (pair? n3295@x) (cons (n2285@strip-annotations (car n3295@x)) (n2285@strip-annotations (cdr n3295@x))) (if (vector? n3295@x) (vector-map n2285@strip-annotations n3295@x) (if (n1154@n921@annotation? n3295@x) (n1153@n919@annotation-stripped n3295@x) n3295@x))))) (set! n2287@strip (lambda (n3297@x n3298@m*) (if (n2137@top-marked? n3298@m*) (if (or (n1154@n921@annotation? n3297@x) (and (pair? n3297@x) (n1154@n921@annotation? (car n3297@x))) (and (vector? n3297@x) (> (vector-length n3297@x) '0) (n1154@n921@annotation? (vector-ref n3297@x '0)))) (n2285@strip-annotations n3297@x) n3297@x) ((letrec ((n3301@f (lambda (n3303@x) (if (n2211@stx? n3303@x) (n2287@strip (n2215@stx-expr n3303@x) (n2217@stx-mark* n3303@x)) (if (n1154@n921@annotation? n3303@x) (n1153@n919@annotation-stripped n3303@x) (if (pair? n3303@x) ((lambda (n3305@a n3306@d) (if (and (eq? n3305@a (car n3303@x)) (eq? n3306@d (cdr n3303@x))) n3303@x (cons n3305@a n3306@d))) (n3301@f (car n3303@x)) (n3301@f (cdr n3303@x))) (if (vector? n3303@x) ((lambda (n3309@old) ((lambda (n3311@new) (if (for-all eq? n3309@old n3311@new) n3303@x (list->vector n3311@new))) (map n3301@f n3309@old))) (vector->list n3303@x)) n3303@x))))))) n3301@f) n3297@x)))) (set! n2289@stx->datum (lambda (n3313@x) (n2287@strip n3313@x '()))) (set! n2291@same-marks*? (lambda (n3315@mark* n3316@mark** n3317@si) (if (null? n3317@si) '#f (if (n2271@same-marks? n3315@mark* (vector-ref n3316@mark** (car n3317@si))) (car n3317@si) (n2291@same-marks*? n3315@mark* n3316@mark** (cdr n3317@si)))))) (set! n2293@id->label (lambda (n3321@id) (or (n2295@id->real-label n3321@id) ((lambda (n3323@t) (if n3323@t ((lambda (n3325@env) ((lambda (n3327@rib) (call-with-values (lambda () (n2147@gen-define-label+loc n3321@id n3327@rib)) (lambda (n3331@n3329@lab n3332@n3330@loc_) ((lambda (n3335@loc_ n3336@lab) (begin (n2188@extend-rib! n3327@rib n3321@id n3336@lab) n3336@lab)) n3332@n3330@loc_ n3331@n3329@lab)))) (n2933@interaction-env-rib n3325@env))) n3323@t) '#f)) (n3011@top-level-context))))) (set! n2295@id->real-label (lambda (n3339@id) ((lambda (n3341@sym) ((letrec ((n3343@search (lambda (n3345@subst* n3346@mark*) (if (null? n3345@subst*) '#f (if (eq? (car n3345@subst*) 'shift) (n3343@search (cdr n3345@subst*) (cdr n3346@mark*)) ((lambda (n3349@rib) ((lambda (n3351@t) (if n3351@t ((lambda (n3353@ht) ((lambda (n3355@si) ((lambda (n3357@i) (if n3357@i (vector-ref (n2170@rib-label* n3349@rib) n3357@i) (n3343@search (cdr n3345@subst*) n3346@mark*))) (and n3355@si (n2291@same-marks*? n3346@mark* (n2168@rib-mark** n3349@rib) (reverse n3355@si))))) (hashtable-ref n3353@ht n3341@sym '#f))) n3351@t) ((letrec ((n3359@f (lambda (n3361@sym* n3362@mark** n3363@label*) (if (null? n3361@sym*) (n3343@search (cdr n3345@subst*) n3346@mark*) (if (and (eq? (car n3361@sym*) n3341@sym) (n2271@same-marks? (car n3362@mark**) n3346@mark*)) (car n3363@label*) (n3359@f (cdr n3361@sym*) (cdr n3362@mark**) (cdr n3363@label*))))))) n3359@f) (n2166@rib-sym* n3349@rib) (n2168@rib-mark** n3349@rib) (n2170@rib-label* n3349@rib)))) (n2172@rib-sealed/freq n3349@rib))) (car n3345@subst*))))))) n3343@search) (n2219@stx-subst* n3339@id) (n2217@stx-mark* n3339@id))) (n2269@id->sym n3339@id)))) (set! n2297@label->binding (lambda (n3367@x n3368@r) ((lambda (n3371@t) (if n3371@t ((lambda (n3373@b) (if (and (pair? n3373@b) (eq? (car n3373@b) '$core-rtd)) (cons '$rtd (map n2690@bless (cdr n3373@b))) (if (and (pair? n3373@b) (eq? (car n3373@b) 'global-rtd)) ((lambda (n3375@lib n3376@loc) (cons '$rtd (symbol-value n3376@loc))) (cadr n3373@b) (cddr n3373@b)) n3373@b))) n3371@t) ((lambda (n3379@t) (if n3379@t (cdr n3379@t) ((lambda (n3381@t) (if n3381@t ((lambda (n3383@env) ((lambda (n3385@t) (if n3385@t ((lambda (n3387@p) (cons* 'lexical (cdr n3387@p) '#f)) n3385@t) '(displaced-lexical . #f))) (assq n3367@x (n2937@interaction-env-locs n3383@env)))) n3381@t) '(displaced-lexical . #f))) (n3011@top-level-context)))) (assq n3367@x n3368@r)))) (n1792@n1446@imported-label->binding n3367@x)))) (set! n2299@make-binding cons) (set! n2301@binding-type car) (set! n2303@binding-value cdr) (set! n2305@raise-unbound-error (lambda (n3389@id) (n2995@syntax-violation* '#f '"unbound identifier" n3389@id (n10185@n9747@make-undefined-violation)))) (set! n2307@syntax-type (lambda (n3391@e n3392@r) (if (n2267@id? n3391@e) ((lambda (n3395@id) ((lambda (n3397@label) ((lambda (n3399@b) ((lambda (n3401@type) ((lambda () (begin (if (not n3397@label) (n2305@raise-unbound-error n3395@id) (void)) ((lambda (n3403@t) (if (memv n3403@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values n3401@type (n2303@binding-value n3399@b) n3395@id) (values 'other '#f '#f))) n3401@type))))) (n2301@binding-type n3399@b))) (n2297@label->binding n3397@label n3392@r))) (n2293@id->label n3395@id))) n3391@e) (if (n2253@syntax-pair? n3391@e) ((lambda (n3405@id) (if (n2267@id? n3405@id) ((lambda (n3407@label) ((lambda (n3409@b) ((lambda (n3411@type) ((lambda () (begin (if (not n3407@label) (n2305@raise-unbound-error n3405@id) (void)) ((lambda (n3413@t) (if (memv n3413@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values n3411@type (n2303@binding-value n3409@b) n3405@id) (values 'call '#f '#f))) n3411@type))))) (n2301@binding-type n3409@b))) (n2297@label->binding n3407@label n3392@r))) (n2293@id->label n3405@id)) (values 'call '#f '#f))) (n2261@syntax-car n3391@e)) ((lambda (n3415@d) (if (n2283@self-evaluating? n3415@d) (values 'constant n3415@d '#f) (values 'other '#f '#f))) (n2289@stx->datum n3391@e)))))) (set! n2321@sanitize-binding (lambda (n3417@x n3418@src) (if (procedure? n3417@x) (cons* 'local-macro n3417@x n3418@src) (if (and (pair? n3417@x) (eq? (car n3417@x) 'macro!) (procedure? (cdr n3417@x))) (cons* 'local-macro! (cdr n3417@x) n3418@src) (if (and (pair? n3417@x) (eq? (car n3417@x) '$rtd)) n3417@x (assertion-violation 'expand '"invalid transformer" n3417@x)))))) (set! n2323@make-variable-transformer (lambda (n3421@x) (if (procedure? n3421@x) (cons 'macro! n3421@x) (assertion-violation 'make-variable-transformer '"not a procedure" n3421@x)))) (set! n2325@variable-transformer? (lambda (n3423@x) (and (pair? n3423@x) (eq? (car n3423@x) 'macro!) (procedure? (cdr n3423@x))))) (set! n2327@variable-transformer-procedure (lambda (n3425@x) (if (n2325@variable-transformer? n3425@x) (cdr n3425@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" n3425@x)))) (set! n2329@make-eval-transformer (lambda (n3427@x) (n2321@sanitize-binding (eval-core (n1249@n1177@expanded->core n3427@x)) n3427@x))) (set! n2640@parse-define (lambda (n3429@x) ((lambda (n3431@t) ((lambda (n3433@ls/false) (if (and n3433@ls/false (apply (lambda (n3435@id n3436@fmls n3437@b n3438@b*) (n2267@id? n3435@id)) n3433@ls/false)) (apply (lambda (n3443@id n3444@fmls n3445@b n3446@b*) (begin (n2802@verify-formals n3444@fmls n3429@x) (values n3443@id (cons 'defun (cons n3444@fmls (cons n3445@b n3446@b*)))))) n3433@ls/false) ((lambda (n3451@t) ((lambda (n3453@ls/false) (if (and n3453@ls/false (apply (lambda (n3455@id n3456@val) (n2267@id? n3455@id)) n3453@ls/false)) (apply (lambda (n3459@id n3460@val) (values n3459@id (cons 'expr n3460@val))) n3453@ls/false) ((lambda (n3463@t) ((lambda (n3465@ls/false) (if (and n3465@ls/false (apply (lambda (n3467@id) (n2267@id? n3467@id)) n3465@ls/false)) (apply (lambda (n3469@id) (values n3469@id (cons 'expr (n2690@bless '(void))))) n3465@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3463@t))) (n2764@syntax-dispatch n3463@t '(_ any)))) n3451@t))) (n2764@syntax-dispatch n3451@t '(_ any any)))) n3431@t))) (n2764@syntax-dispatch n3431@t '(_ (any . any) any . each-any)))) n3429@x))) (set! n2642@parse-define-syntax (lambda (n3471@x) ((lambda (n3473@t) ((lambda (n3475@ls/false) (if (and n3475@ls/false (apply (lambda (n3477@id n3478@val) (n2267@id? n3477@id)) n3475@ls/false)) (apply (lambda (n3481@id n3482@val) (values n3481@id n3482@val)) n3475@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3473@t))) (n2764@syntax-dispatch n3473@t '(_ any any)))) n3471@x))) (set! n2644@scheme-stx-hashtable (make-eq-hashtable)) (set! n2646@scheme-stx (lambda (n3485@sym) (or (hashtable-ref n2644@scheme-stx-hashtable n3485@sym '#f) ((lambda (n3487@subst) ((lambda (n3489@stx) ((lambda (n3491@stx) ((lambda () (begin (hashtable-set! n2644@scheme-stx-hashtable n3485@sym n3491@stx) n3491@stx)))) ((lambda (n3493@t) (if n3493@t ((lambda (n3495@x) ((lambda (n3497@name n3498@label) (n2247@add-subst (n2164@make-rib (list n3497@name) (list n2135@top-mark*) (list n3498@label) '#f '#f) n3489@stx)) (car n3495@x) (cdr n3495@x))) n3493@t) n3489@stx)) (assq n3485@sym n3487@subst)))) (n2213@make-stx n3485@sym n2135@top-mark* '() '()))) (n1750@n1362@library-subst (n1786@n1434@find-library-by-name '(psyntax system $all))))))) (set! n2648@lexical-var car) (set! n2650@lexical-mutable? cdr) (set! n2652@set-lexical-mutable! set-cdr!) (set! n2654@add-lexical (lambda (n3501@lab n3502@lex n3503@r) (cons (cons* n3501@lab 'lexical n3502@lex '#f) n3503@r))) (set! n2656@add-lexicals (lambda (n3507@lab* n3508@lex* n3509@r) (if (null? n3507@lab*) n3509@r (n2656@add-lexicals (cdr n3507@lab*) (cdr n3508@lex*) (n2654@add-lexical (car n3507@lab*) (car n3508@lex*) n3509@r))))) (set! n2658@letrec-helper (lambda (n3513@e n3514@r n3515@mr n3516@build) ((lambda (n3521@t) ((lambda (n3523@ls/false) (if n3523@ls/false (apply (lambda (n3525@lhs* n3526@rhs* n3527@b n3528@b*) (if (not (n2277@valid-bound-ids? n3525@lhs*)) (n2694@invalid-fmls-error n3513@e n3525@lhs*) ((lambda (n3533@lex* n3534@lab*) ((lambda (n3537@rib n3538@r) ((lambda (n3541@body n3542@rhs*) (n3516@build '#f n3533@lex* n3542@rhs* n3541@body)) (n2820@chi-internal (n2247@add-subst n3537@rib (cons n3527@b n3528@b*)) n3538@r n3515@mr) (n2794@chi-expr* (map (lambda (n3545@x) (n2247@add-subst n3537@rib n3545@x)) n3526@rhs*) n3538@r n3515@mr))) (n2198@make-full-rib n3525@lhs* n3534@lab*) (n2656@add-lexicals n3534@lab* n3533@lex* n3514@r))) (map n2139@gen-lexical n3525@lhs*) (map n2143@gen-label n3525@lhs*)))) n3523@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3521@t))) (n2764@syntax-dispatch n3521@t '(_ #(each (any any)) any . each-any)))) n3513@e))) (set! n2660@letrec-transformer (lambda (n3547@e n3548@r n3549@mr) (n2658@letrec-helper n3547@e n3548@r n3549@mr n2108@n1967@build-letrec))) (set! n2662@letrec*-transformer (lambda (n3553@e n3554@r n3555@mr) (n2658@letrec-helper n3553@e n3554@r n3555@mr n2109@n1969@build-letrec*))) (set! n2664@fluid-let-syntax-transformer (lambda (n3559@e n3560@r n3561@mr) ((lambda (n3566@lookup) (begin (set! n3566@lookup (lambda (n3585@x) (or (n2293@id->label n3585@x) (n2997@syntax-violation '#f '"unbound identifier" n3559@e n3585@x)))) ((lambda (n3567@t) ((lambda (n3569@ls/false) (if n3569@ls/false (apply (lambda (n3571@lhs* n3572@rhs* n3573@b n3574@b*) (if (not (n2277@valid-bound-ids? n3571@lhs*)) (n2694@invalid-fmls-error n3559@e n3571@lhs*) ((lambda (n3579@lab* n3580@rhs*) (n2820@chi-internal (cons n3573@b n3574@b*) (append (map cons n3579@lab* n3580@rhs*) n3560@r) (append (map cons n3579@lab* n3580@rhs*) n3561@mr))) (map n3566@lookup n3571@lhs*) (map (lambda (n3583@x) (n2329@make-eval-transformer (n2857@expand-transformer n3583@x n3561@mr))) n3572@rhs*)))) n3569@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3567@t))) (n2764@syntax-dispatch n3567@t '(_ #(each (any any)) any . each-any)))) n3559@e))) '#f))) (set! n2666@type-descriptor-transformer (lambda (n3587@e n3588@r n3589@mr) ((lambda (n3593@t) ((lambda (n3595@ls/false) (if (and n3595@ls/false (apply (lambda (n3597@id) (n2267@id? n3597@id)) n3595@ls/false)) (apply (lambda (n3599@id) ((lambda (n3601@lab) ((lambda (n3603@b) ((lambda (n3605@type) ((lambda () (begin (if (not n3601@lab) (n2305@raise-unbound-error n3599@id) (void)) (if (not (and (eq? n3605@type '$rtd) (not (list? (n2303@binding-value n3603@b))))) (n2997@syntax-violation '#f '"not a record type" n3587@e) (void)) (list 'quote (n2303@binding-value n3603@b)))))) (n2301@binding-type n3603@b))) (n2297@label->binding n3601@lab n3588@r))) (n2293@id->label n3599@id))) n3595@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3593@t))) (n2764@syntax-dispatch n3593@t '(_ any)))) n3587@e))) (set! n2668@record-type-descriptor-transformer (lambda (n3607@e n3608@r n3609@mr) ((lambda (n3613@t) ((lambda (n3615@ls/false) (if (and n3615@ls/false (apply (lambda (n3617@id) (n2267@id? n3617@id)) n3615@ls/false)) (apply (lambda (n3619@id) ((lambda (n3621@lab) ((lambda (n3623@b) ((lambda (n3625@type) ((lambda () (begin (if (not n3621@lab) (n2305@raise-unbound-error n3619@id) (void)) (if (not (and (eq? n3625@type '$rtd) (list? (n2303@binding-value n3623@b)))) (n2997@syntax-violation '#f '"not a record type" n3607@e) (void)) (n2798@chi-expr (car (n2303@binding-value n3623@b)) n3608@r n3609@mr))))) (n2301@binding-type n3623@b))) (n2297@label->binding n3621@lab n3608@r))) (n2293@id->label n3619@id))) n3615@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3613@t))) (n2764@syntax-dispatch n3613@t '(_ any)))) n3607@e))) (set! n2670@record-constructor-descriptor-transformer (lambda (n3627@e n3628@r n3629@mr) ((lambda (n3633@t) ((lambda (n3635@ls/false) (if (and n3635@ls/false (apply (lambda (n3637@id) (n2267@id? n3637@id)) n3635@ls/false)) (apply (lambda (n3639@id) ((lambda (n3641@lab) ((lambda (n3643@b) ((lambda (n3645@type) ((lambda () (begin (if (not n3641@lab) (n2305@raise-unbound-error n3639@id) (void)) (if (not (and (eq? n3645@type '$rtd) (list? (n2303@binding-value n3643@b)))) (n2997@syntax-violation '#f '"invalid type" n3627@e) (void)) (n2798@chi-expr (cadr (n2303@binding-value n3643@b)) n3628@r n3629@mr))))) (n2301@binding-type n3643@b))) (n2297@label->binding n3641@lab n3628@r))) (n2293@id->label n3639@id))) n3635@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3633@t))) (n2764@syntax-dispatch n3633@t '(_ any)))) n3627@e))) (set! n2672@when-macro (lambda (n3647@e) ((lambda (n3649@t) ((lambda (n3651@ls/false) (if n3651@ls/false (apply (lambda (n3653@test n3654@e n3655@e*) (n2690@bless (list 'if n3653@test (cons 'begin (cons n3654@e n3655@e*))))) n3651@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3649@t))) (n2764@syntax-dispatch n3649@t '(_ any any . each-any)))) n3647@e))) (set! n2674@unless-macro (lambda (n3659@e) ((lambda (n3661@t) ((lambda (n3663@ls/false) (if n3663@ls/false (apply (lambda (n3665@test n3666@e n3667@e*) (n2690@bless (list 'if (list 'not n3665@test) (cons 'begin (cons n3666@e n3667@e*))))) n3663@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3661@t))) (n2764@syntax-dispatch n3661@t '(_ any any . each-any)))) n3659@e))) (set! n2676@if-transformer (lambda (n3671@e n3672@r n3673@mr) ((lambda (n3677@t) ((lambda (n3679@ls/false) (if n3679@ls/false (apply (lambda (n3681@e0 n3682@e1 n3683@e2) (list 'if (n2798@chi-expr n3681@e0 n3672@r n3673@mr) (n2798@chi-expr n3682@e1 n3672@r n3673@mr) (n2798@chi-expr n3683@e2 n3672@r n3673@mr))) n3679@ls/false) ((lambda (n3687@t) ((lambda (n3689@ls/false) (if n3689@ls/false (apply (lambda (n3691@e0 n3692@e1) (list 'if (n2798@chi-expr n3691@e0 n3672@r n3673@mr) (n2798@chi-expr n3692@e1 n3672@r n3673@mr) (n2107@n1965@build-void))) n3689@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3687@t))) (n2764@syntax-dispatch n3687@t '(_ any any)))) n3677@t))) (n2764@syntax-dispatch n3677@t '(_ any any any)))) n3671@e))) (set! n2678@and-transformer (lambda (n3695@e n3696@r n3697@mr) ((lambda (n3701@t) ((lambda (n3703@ls/false) (if n3703@ls/false (apply (lambda (n3705@e*) (cons 'and (n2794@chi-expr* n3705@e* n3696@r n3697@mr))) n3703@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3701@t))) (n2764@syntax-dispatch n3701@t '(_ . each-any)))) n3695@e))) (set! n2680@or-transformer (lambda (n3707@e n3708@r n3709@mr) ((lambda (n3713@t) ((lambda (n3715@ls/false) (if n3715@ls/false (apply (lambda (n3717@e*) (cons 'or (n2794@chi-expr* n3717@e* n3708@r n3709@mr))) n3715@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3713@t))) (n2764@syntax-dispatch n3713@t '(_ . each-any)))) n3707@e))) (set! n2682@case-macro (lambda (n3719@e) ((lambda (n3722@build-last n3724@build-one) (begin (set! n3722@build-last (lambda (n3761@cls) ((lambda (n3763@t) ((lambda (n3765@ls/false) (if n3765@ls/false (apply (lambda (n3767@e n3768@e*) (cons 'begin (cons n3767@e n3768@e*))) n3765@ls/false) ((lambda (n3771@t) ((lambda (n3773@ls/false) (if n3773@ls/false (apply (lambda () (n3724@build-one n3761@cls '(if #f #f))) n3773@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3771@t))) (n2764@syntax-dispatch n3771@t '_))) n3763@t))) (n2764@syntax-dispatch n3763@t '(#(scheme-id else) any . each-any)))) n3761@cls))) (set! n3724@build-one (lambda (n3747@cls n3748@k) ((lambda (n3751@t) ((lambda (n3753@ls/false) (if n3753@ls/false (apply (lambda (n3755@d* n3756@e n3757@e*) (list 'if (list 'memv 't (list 'quote n3755@d*)) (cons 'begin (cons n3756@e n3757@e*)) n3748@k)) n3753@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3751@t))) (n2764@syntax-dispatch n3751@t '(each-any any . each-any)))) n3747@cls))) ((lambda (n3725@t) ((lambda (n3727@ls/false) (if n3727@ls/false (apply (lambda (n3729@expr) (n2690@bless (cons 'let (cons (list (list 't n3729@expr)) '((if #f #f)))))) n3727@ls/false) ((lambda (n3731@t) ((lambda (n3733@ls/false) (if n3733@ls/false (apply (lambda (n3735@expr n3736@cls n3737@cls*) (n2690@bless (list 'let (list (list 't n3735@expr)) ((letrec ((n3741@f (lambda (n3743@cls n3744@cls*) (if (null? n3744@cls*) (n3722@build-last n3743@cls) (n3724@build-one n3743@cls (n3741@f (car n3744@cls*) (cdr n3744@cls*))))))) n3741@f) n3736@cls n3737@cls*)))) n3733@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3731@t))) (n2764@syntax-dispatch n3731@t '(_ any any . each-any)))) n3725@t))) (n2764@syntax-dispatch n3725@t '(_ any)))) n3719@e))) '#f '#f))) (set! n2684@quote-transformer (lambda (n3775@e n3776@r n3777@mr) ((lambda (n3781@t) ((lambda (n3783@ls/false) (if n3783@ls/false (apply (lambda (n3785@datum) (list 'quote (n2289@stx->datum n3785@datum))) n3783@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3781@t))) (n2764@syntax-dispatch n3781@t '(_ any)))) n3775@e))) (set! n2686@case-lambda-transformer (lambda (n3787@e n3788@r n3789@mr) ((lambda (n3793@t) ((lambda (n3795@ls/false) (if n3795@ls/false (apply (lambda (n3797@fmls* n3798@b* n3799@b**) (call-with-values (lambda () (n2806@chi-lambda-clause* n3787@e n3797@fmls* (map cons n3798@b* n3799@b**) n3788@r n3789@mr)) (lambda (n3805@n3803@fmls* n3806@n3804@body*) ((lambda (n3809@body* n3810@fmls*) (n2104@n1915@build-case-lambda '#f n3810@fmls* n3809@body*)) n3806@n3804@body* n3805@n3803@fmls*)))) n3795@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3793@t))) (n2764@syntax-dispatch n3793@t '(_ . #(each (any any . each-any)))))) n3787@e))) (set! n2688@lambda-transformer (lambda (n3813@e n3814@r n3815@mr) ((lambda (n3819@t) ((lambda (n3821@ls/false) (if n3821@ls/false (apply (lambda (n3823@fmls n3824@b n3825@b*) (call-with-values (lambda () (n2804@chi-lambda-clause n3813@e n3823@fmls (cons n3824@b n3825@b*) n3814@r n3815@mr)) (lambda (n3831@n3829@fmls n3832@n3830@body) ((lambda (n3835@body n3836@fmls) (n2103@n1913@build-lambda '#f n3836@fmls n3835@body)) n3832@n3830@body n3831@n3829@fmls)))) n3821@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3819@t))) (n2764@syntax-dispatch n3819@t '(_ any any . each-any)))) n3813@e))) (set! n2690@bless (lambda (n3839@x) (n2243@mkstx ((letrec ((n3841@f (lambda (n3843@x) (if (n2211@stx? n3843@x) n3843@x (if (pair? n3843@x) (cons (n3841@f (car n3843@x)) (n3841@f (cdr n3843@x))) (if (symbol? n3843@x) (n2646@scheme-stx n3843@x) (if (vector? n3843@x) (vector-map n3841@f n3843@x) n3843@x))))))) n3841@f) n3839@x) '() '() '()))) (set! n2692@with-syntax-macro (lambda (n3845@e) ((lambda (n3847@t) ((lambda (n3849@ls/false) (if n3849@ls/false (apply (lambda (n3851@pat* n3852@expr* n3853@b n3854@b*) ((lambda (n3859@idn*) (begin (n2802@verify-formals (map car n3859@idn*) n3845@e) ((lambda (n3861@t*) (n2690@bless (list 'let (map list n3861@t* n3852@expr*) ((letrec ((n3863@f (lambda (n3865@pat* n3866@t*) (if (null? n3865@pat*) (cons 'begin (cons '#f (cons n3853@b n3854@b*))) (list 'syntax-case (car n3866@t*) '() (list (car n3865@pat*) (n3863@f (cdr n3865@pat*) (cdr n3866@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car n3865@pat*)) (car n3866@t*)))))))) n3863@f) n3851@pat* n3861@t*)))) (n2979@generate-temporaries n3852@expr*)))) ((letrec ((n3869@f (lambda (n3871@pat*) (if (null? n3871@pat*) '() (call-with-values (lambda () (n2762@convert-pattern (car n3871@pat*) '())) (lambda (n3875@n3873@pat n3876@n3874@idn*) ((lambda (n3879@idn* n3880@pat) (append n3879@idn* (n3869@f (cdr n3871@pat*)))) n3876@n3874@idn* n3875@n3873@pat))))))) n3869@f) n3851@pat*))) n3849@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3847@t))) (n2764@syntax-dispatch n3847@t '(_ #(each (any any)) any . each-any)))) n3845@e))) (set! n2694@invalid-fmls-error (lambda (n3883@stx n3884@fmls) ((lambda (n3887@t) ((lambda (n3889@ls/false) (if n3889@ls/false (apply (lambda (n3891@id* n3892@last) ((letrec ((n3895@f (lambda (n3897@id*) (if (null? n3897@id*) (values) (if (not (n2267@id? (car n3897@id*))) (n2997@syntax-violation '#f '"not an identifier" n3883@stx (car n3897@id*)) (begin (n3895@f (cdr n3897@id*)) (if (n2281@bound-id-member? (car n3897@id*) (cdr n3897@id*)) (n2997@syntax-violation '#f '"duplicate binding" n3883@stx (car n3897@id*)) (void)))))))) n3895@f) (if (n2267@id? n3892@last) (cons n3892@last n3891@id*) (if (n2257@syntax-null? n3892@last) n3891@id* (n2997@syntax-violation '#f '"not an identifier" n3883@stx n3892@last))))) n3889@ls/false) ((lambda (n3899@t) ((lambda (n3901@ls/false) (if n3901@ls/false (apply (lambda () (n2997@syntax-violation '#f '"malformed binding form" n3883@stx n3884@fmls)) n3901@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3899@t))) (n2764@syntax-dispatch n3899@t '_))) n3887@t))) (n2764@syntax-dispatch n3887@t '#(each+ any () any)))) n3884@fmls))) (set! n2696@let-macro (lambda (n3903@stx) ((lambda (n3905@t) ((lambda (n3907@ls/false) (if n3907@ls/false (apply (lambda (n3909@lhs* n3910@rhs* n3911@b n3912@b*) (if (n2277@valid-bound-ids? n3909@lhs*) (n2690@bless (cons (cons 'lambda (cons n3909@lhs* (cons n3911@b n3912@b*))) n3910@rhs*)) (n2694@invalid-fmls-error n3903@stx n3909@lhs*))) n3907@ls/false) ((lambda (n3917@t) ((lambda (n3919@ls/false) (if (and n3919@ls/false (apply (lambda (n3921@f n3922@lhs* n3923@rhs* n3924@b n3925@b*) (n2267@id? n3921@f)) n3919@ls/false)) (apply (lambda (n3931@f n3932@lhs* n3933@rhs* n3934@b n3935@b*) (if (n2277@valid-bound-ids? n3932@lhs*) (n2690@bless (cons (list 'letrec (list (list n3931@f (cons 'lambda (cons n3932@lhs* (cons n3934@b n3935@b*))))) n3931@f) n3933@rhs*)) (n2694@invalid-fmls-error n3903@stx n3932@lhs*))) n3919@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3917@t))) (n2764@syntax-dispatch n3917@t '(_ any #(each (any any)) any . each-any)))) n3905@t))) (n2764@syntax-dispatch n3905@t '(_ #(each (any any)) any . each-any)))) n3903@stx))) (set! n2698@let-values-macro (lambda (n3941@stx) ((lambda (n3944@rename n3946@rename*) (begin (set! n3944@rename (lambda (n4042@x n4043@old* n4044@new*) (begin (if (not (n2267@id? n4042@x)) (n2997@syntax-violation '#f '"not an indentifier" n3941@stx n4042@x) (void)) (if (n2281@bound-id-member? n4042@x n4043@old*) (n2997@syntax-violation '#f '"duplicate binding" n3941@stx n4042@x) (void)) ((lambda (n4048@y) (values n4048@y (cons n4042@x n4043@old*) (cons n4048@y n4044@new*))) (n1151@n915@gensym (n3003@syntax->datum n4042@x)))))) (set! n3946@rename* (lambda (n4024@x* n4025@old* n4026@new*) (if (null? n4024@x*) (values '() n4025@old* n4026@new*) (call-with-values (lambda () (n3944@rename (car n4024@x*) n4025@old* n4026@new*)) (lambda (n4030@x n4031@old* n4032@new*) (call-with-values (lambda () (n3946@rename* (cdr n4024@x*) n4031@old* n4032@new*)) (lambda (n4036@x* n4037@old* n4038@new*) (values (cons n4030@x n4036@x*) n4037@old* n4038@new*)))))))) ((lambda (n3947@t) ((lambda (n3949@ls/false) (if n3949@ls/false (apply (lambda (n3951@b n3952@b*) (cons* (n2690@bless 'let) '() n3951@b n3952@b*)) n3949@ls/false) ((lambda (n3955@t) ((lambda (n3957@ls/false) (if n3957@ls/false (apply (lambda (n3959@lhs* n3960@rhs* n3961@b n3962@b*) (n2690@bless ((letrec ((n3967@f (lambda (n3969@lhs* n3970@rhs* n3971@old* n3972@new*) (if (null? n3969@lhs*) (cons 'let (cons (map list n3971@old* n3972@new*) (cons n3961@b n3962@b*))) ((lambda (n3977@t) ((lambda (n3979@ls/false) (if n3979@ls/false (apply (lambda (n3981@x*) (call-with-values (lambda () (n3946@rename* n3981@x* n3971@old* n3972@new*)) (lambda (n3986@n3983@y* n3987@n3984@old* n3988@n3985@new*) ((lambda (n3992@new* n3993@old* n3994@y*) (list 'call-with-values (list 'lambda '() (car n3970@rhs*)) (list 'lambda n3994@y* (n3967@f (cdr n3969@lhs*) (cdr n3970@rhs*) n3993@old* n3992@new*)))) n3988@n3985@new* n3987@n3984@old* n3986@n3983@y*)))) n3979@ls/false) ((lambda (n3998@t) ((lambda (n4000@ls/false) (if n4000@ls/false (apply (lambda (n4002@x* n4003@x) (call-with-values (lambda () (n3944@rename n4003@x n3971@old* n3972@new*)) (lambda (n4006@y n4007@old* n4008@new*) (call-with-values (lambda () (n3946@rename* n4002@x* n4007@old* n4008@new*)) (lambda (n4012@y* n4013@old* n4014@new*) (list 'call-with-values (list 'lambda '() (car n3970@rhs*)) (list 'lambda (append n4012@y* n4006@y) (n3967@f (cdr n3969@lhs*) (cdr n3970@rhs*) n4013@old* n4014@new*)))))))) n4000@ls/false) ((lambda (n4018@t) ((lambda (n4020@ls/false) (if n4020@ls/false (apply (lambda (n4022@others) (n2997@syntax-violation '#f '"malformed bindings" n3941@stx n4022@others)) n4020@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4018@t))) (n2764@syntax-dispatch n4018@t 'any))) n3998@t))) (n2764@syntax-dispatch n3998@t '#(each+ any () any)))) n3977@t))) (n2764@syntax-dispatch n3977@t 'each-any))) (car n3969@lhs*)))))) n3967@f) n3959@lhs* n3960@rhs* '() '()))) n3957@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n3955@t))) (n2764@syntax-dispatch n3955@t '(_ #(each (any any)) any . each-any)))) n3947@t))) (n2764@syntax-dispatch n3947@t '(_ () any . each-any)))) n3941@stx))) '#f '#f))) (set! n2700@let*-values-macro (lambda (n4050@stx) ((lambda (n4053@check) (begin (set! n4053@check (lambda (n4100@x*) (if (not (null? n4100@x*)) ((lambda (n4102@x) (begin (if (not (n2267@id? n4102@x)) (n2997@syntax-violation '#f '"not an identifier" n4050@stx n4102@x) (void)) (n4053@check (cdr n4100@x*)) (if (n2281@bound-id-member? n4102@x (cdr n4100@x*)) (n2997@syntax-violation '#f '"duplicate identifier" n4050@stx n4102@x) (void)))) (car n4100@x*)) (void)))) ((lambda (n4054@t) ((lambda (n4056@ls/false) (if n4056@ls/false (apply (lambda (n4058@b n4059@b*) (cons* (n2690@bless 'let) '() n4058@b n4059@b*)) n4056@ls/false) ((lambda (n4062@t) ((lambda (n4064@ls/false) (if n4064@ls/false (apply (lambda (n4066@lhs* n4067@rhs* n4068@b n4069@b*) (n2690@bless ((letrec ((n4074@f (lambda (n4076@lhs* n4077@rhs*) (if (null? n4076@lhs*) (cons 'begin (cons n4068@b n4069@b*)) ((lambda (n4080@t) ((lambda (n4082@ls/false) (if n4082@ls/false (apply (lambda (n4084@x*) (begin (n4053@check n4084@x*) (list 'call-with-values (list 'lambda '() (car n4077@rhs*)) (list 'lambda n4084@x* (n4074@f (cdr n4076@lhs*) (cdr n4077@rhs*)))))) n4082@ls/false) ((lambda (n4086@t) ((lambda (n4088@ls/false) (if n4088@ls/false (apply (lambda (n4090@x* n4091@x) (begin (n4053@check (cons n4091@x n4090@x*)) (list 'call-with-values (list 'lambda '() (car n4077@rhs*)) (list 'lambda (append n4090@x* n4091@x) (n4074@f (cdr n4076@lhs*) (cdr n4077@rhs*)))))) n4088@ls/false) ((lambda (n4094@t) ((lambda (n4096@ls/false) (if n4096@ls/false (apply (lambda (n4098@others) (n2997@syntax-violation '#f '"malformed bindings" n4050@stx n4098@others)) n4096@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4094@t))) (n2764@syntax-dispatch n4094@t 'any))) n4086@t))) (n2764@syntax-dispatch n4086@t '#(each+ any () any)))) n4080@t))) (n2764@syntax-dispatch n4080@t 'each-any))) (car n4076@lhs*)))))) n4074@f) n4066@lhs* n4067@rhs*))) n4064@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4062@t))) (n2764@syntax-dispatch n4062@t '(_ #(each (any any)) any . each-any)))) n4054@t))) (n2764@syntax-dispatch n4054@t '(_ () any . each-any)))) n4050@stx))) '#f))) (set! n2702@trace-lambda-macro (lambda (n4104@stx) ((lambda (n4106@t) ((lambda (n4108@ls/false) (if n4108@ls/false (apply (lambda (n4110@who n4111@fmls n4112@b n4113@b*) (if (n2277@valid-bound-ids? n4111@fmls) (n2690@bless (list 'make-traced-procedure (list 'quote n4110@who) (cons 'lambda (cons n4111@fmls (cons n4112@b n4113@b*))))) (n2694@invalid-fmls-error n4104@stx n4111@fmls))) n4108@ls/false) ((lambda (n4118@t) ((lambda (n4120@ls/false) (if n4120@ls/false (apply (lambda (n4122@who n4123@fmls n4124@last n4125@b n4126@b*) (if (n2277@valid-bound-ids? (cons n4124@last n4123@fmls)) (n2690@bless (list 'make-traced-procedure (list 'quote n4122@who) (cons 'lambda (cons (append n4123@fmls n4124@last) (cons n4125@b n4126@b*))))) (n2694@invalid-fmls-error n4104@stx (append n4123@fmls n4124@last)))) n4120@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4118@t))) (n2764@syntax-dispatch n4118@t '(_ any #(each+ any () any) any . each-any)))) n4106@t))) (n2764@syntax-dispatch n4106@t '(_ any each-any any . each-any)))) n4104@stx))) (set! n2704@trace-define-macro (lambda (n4132@stx) ((lambda (n4134@t) ((lambda (n4136@ls/false) (if n4136@ls/false (apply (lambda (n4138@who n4139@fmls n4140@b n4141@b*) (if (n2277@valid-bound-ids? n4139@fmls) (n2690@bless (list 'define n4138@who (list 'make-traced-procedure (list 'quote n4138@who) (cons 'lambda (cons n4139@fmls (cons n4140@b n4141@b*)))))) (n2694@invalid-fmls-error n4132@stx n4139@fmls))) n4136@ls/false) ((lambda (n4146@t) ((lambda (n4148@ls/false) (if n4148@ls/false (apply (lambda (n4150@who n4151@fmls n4152@last n4153@b n4154@b*) (if (n2277@valid-bound-ids? (cons n4152@last n4151@fmls)) (n2690@bless (list 'define n4150@who (list 'make-traced-procedure (list 'quote n4150@who) (cons 'lambda (cons (append n4151@fmls n4152@last) (cons n4153@b n4154@b*)))))) (n2694@invalid-fmls-error n4132@stx (append n4151@fmls n4152@last)))) n4148@ls/false) ((lambda (n4160@t) ((lambda (n4162@ls/false) (if n4162@ls/false (apply (lambda (n4164@who n4165@expr) (if (n2267@id? n4164@who) (n2690@bless (list 'define n4164@who (list 'let (list (list 'v n4165@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote n4164@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (n2997@syntax-violation '#f '"invalid name" n4132@stx))) n4162@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4160@t))) (n2764@syntax-dispatch n4160@t '(_ any any)))) n4146@t))) (n2764@syntax-dispatch n4146@t '(_ (any . #(each+ any () any)) any . each-any)))) n4134@t))) (n2764@syntax-dispatch n4134@t '(_ (any . each-any) any . each-any)))) n4132@stx))) (set! n2706@trace-define-syntax-macro (lambda (n4168@stx) ((lambda (n4170@t) ((lambda (n4172@ls/false) (if n4172@ls/false (apply (lambda (n4174@who n4175@expr) (if (n2267@id? n4174@who) (n2690@bless (list 'define-syntax n4174@who (list 'make-traced-macro (list 'quote n4174@who) n4175@expr))) (n2997@syntax-violation '#f '"invalid name" n4168@stx))) n4172@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4170@t))) (n2764@syntax-dispatch n4170@t '(_ any any)))) n4168@stx))) (set! n2708@trace-let/rec-syntax (lambda (n4178@who) (lambda (n4180@stx) ((lambda (n4182@t) ((lambda (n4184@ls/false) (if n4184@ls/false (apply (lambda (n4186@lhs* n4187@rhs* n4188@b n4189@b*) (if (n2277@valid-bound-ids? n4186@lhs*) ((lambda (n4194@rhs*) (n2690@bless (cons n4178@who (cons (map list n4186@lhs* n4194@rhs*) (cons n4188@b n4189@b*))))) (map (lambda (n4196@lhs n4197@rhs) (list 'make-traced-macro (list 'quote n4196@lhs) n4197@rhs)) n4186@lhs* n4187@rhs*)) (n2694@invalid-fmls-error n4180@stx n4186@lhs*))) n4184@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4182@t))) (n2764@syntax-dispatch n4182@t '(_ #(each (any any)) any . each-any)))) n4180@stx)))) (set! n2710@trace-let-syntax-macro (n2708@trace-let/rec-syntax 'let-syntax)) (set! n2712@trace-letrec-syntax-macro (n2708@trace-let/rec-syntax 'letrec-syntax)) (set! n2714@guard-macro (lambda (n4200@x) ((lambda (n4203@gen-clauses) (begin (set! n4203@gen-clauses (lambda (n4226@con n4227@outerk n4228@clause*) ((lambda (n4233@f n4235@f*) (begin (set! n4233@f (lambda (n4286@x n4287@k) ((lambda (n4290@t) ((lambda (n4292@ls/false) (if n4292@ls/false (apply (lambda (n4294@e n4295@p) ((lambda (n4298@t) (list 'let (list (list n4298@t n4294@e)) (list 'if n4298@t (list n4295@p n4298@t) n4287@k))) (n1151@n915@gensym))) n4292@ls/false) ((lambda (n4300@t) ((lambda (n4302@ls/false) (if n4302@ls/false (apply (lambda (n4304@e) ((lambda (n4306@t) (list 'let (list (list n4306@t n4304@e)) (list 'if n4306@t n4306@t n4287@k))) (n1151@n915@gensym))) n4302@ls/false) ((lambda (n4308@t) ((lambda (n4310@ls/false) (if n4310@ls/false (apply (lambda (n4312@e n4313@v n4314@v*) (list 'if n4312@e (cons 'begin (cons n4313@v n4314@v*)) n4287@k)) n4310@ls/false) ((lambda (n4318@t) ((lambda (n4320@ls/false) (if n4320@ls/false (apply (lambda () (n2997@syntax-violation '#f '"invalid guard clause" n4286@x)) n4320@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4318@t))) (n2764@syntax-dispatch n4318@t '_))) n4308@t))) (n2764@syntax-dispatch n4308@t '(any any . each-any)))) n4300@t))) (n2764@syntax-dispatch n4300@t '(any)))) n4290@t))) (n2764@syntax-dispatch n4290@t '(any #(scheme-id =>) any)))) n4286@x))) (set! n4235@f* (lambda (n4246@x*) ((lambda (n4248@t) ((lambda (n4250@ls/false) (if n4250@ls/false (apply (lambda () ((lambda (n4252@g) (values (list n4252@g (list 'lambda '() (list 'raise-continuable n4226@con))) n4252@g)) (n1151@n915@gensym))) n4250@ls/false) ((lambda (n4254@t) ((lambda (n4256@ls/false) (if n4256@ls/false (apply (lambda (n4258@e n4259@e*) (values (cons 'begin (cons n4258@e n4259@e*)) '#f)) n4256@ls/false) ((lambda (n4262@t) ((lambda (n4264@ls/false) (if n4264@ls/false (apply (lambda (n4266@cls n4267@cls*) (call-with-values (lambda () (n4235@f* n4267@cls*)) (lambda (n4272@n4270@e n4273@n4271@g) ((lambda (n4276@g n4277@e) (values (n4233@f n4266@cls n4277@e) n4276@g)) n4273@n4271@g n4272@n4270@e)))) n4264@ls/false) ((lambda (n4280@t) ((lambda (n4282@ls/false) (if n4282@ls/false (apply (lambda (n4284@others) (n2997@syntax-violation '#f '"invalid guard clause" n4284@others)) n4282@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4280@t))) (n2764@syntax-dispatch n4280@t 'any))) n4262@t))) (n2764@syntax-dispatch n4262@t '(any . any)))) n4254@t))) (n2764@syntax-dispatch n4254@t '((#(scheme-id else) any . each-any))))) n4248@t))) (n2764@syntax-dispatch n4248@t '()))) n4246@x*))) (call-with-values (lambda () (n4235@f* n4228@clause*)) (lambda (n4238@n4236@code n4239@n4237@raisek) ((lambda (n4242@raisek n4243@code) (if n4242@raisek (list (list 'call/cc (list 'lambda (list n4242@raisek) (list n4227@outerk (list 'lambda '() n4243@code))))) (list n4227@outerk (list 'lambda '() n4243@code)))) n4239@n4237@raisek n4238@n4236@code))))) '#f '#f))) ((lambda (n4204@t) ((lambda (n4206@ls/false) (if (and n4206@ls/false (apply (lambda (n4208@con n4209@clause* n4210@b n4211@b*) (n2267@id? n4208@con)) n4206@ls/false)) (apply (lambda (n4216@con n4217@clause* n4218@b n4219@b*) ((lambda (n4224@outerk) (n2690@bless (list (list 'call/cc (list 'lambda (list n4224@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list n4216@con) (n4203@gen-clauses n4216@con n4224@outerk n4217@clause*)) (cons 'lambda (cons '() (cons n4218@b n4219@b*)))))))))) (n1151@n915@gensym))) n4206@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4204@t))) (n2764@syntax-dispatch n4204@t '(_ (any . each-any) any . each-any)))) n4200@x))) '#f))) (set! n2716@define-enumeration-macro (lambda (n4322@stx) ((lambda (n4325@set? n4327@remove-dups) (begin (set! n4325@set? (lambda (n4350@x) (or (null? n4350@x) (and (not (memq (car n4350@x) (cdr n4350@x))) (n4325@set? (cdr n4350@x)))))) (set! n4327@remove-dups (lambda (n4348@ls) (if (null? n4348@ls) '() (cons (car n4348@ls) (n4327@remove-dups (remq (car n4348@ls) (cdr n4348@ls))))))) ((lambda (n4328@t) ((lambda (n4330@ls/false) (if (and n4330@ls/false (apply (lambda (n4332@name n4333@id* n4334@maker) (and (n2267@id? n4332@name) (n2267@id? n4334@maker) (for-all n2267@id? n4333@id*))) n4330@ls/false)) (apply (lambda (n4338@name n4339@id* n4340@maker) ((lambda (n4344@name* n4345@mk) (n2690@bless (list 'begin (list 'define n4345@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote n4344@name*)))) (list 'define-syntax n4338@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote n4344@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote n4338@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax n4340@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote n4340@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote n4344@name*)) (cons 'syntax-violation (cons (list 'quote n4340@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons n4345@mk '('(n* ...)))))))))))) (n4327@remove-dups (n3003@syntax->datum n4339@id*)) (n1151@n915@gensym))) n4330@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4328@t))) (n2764@syntax-dispatch n4328@t '(_ any each-any any)))) n4322@stx))) '#f '#f))) (set! n2718@time-macro (lambda (n4352@stx) ((lambda (n4354@t) ((lambda (n4356@ls/false) (if n4356@ls/false (apply (lambda (n4358@expr) (n2690@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() n4358@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) n4356@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4354@t))) (n2764@syntax-dispatch n4354@t '(_ any)))) n4352@stx))) (set! n2720@delay-macro (lambda (n4360@stx) ((lambda (n4362@t) ((lambda (n4364@ls/false) (if n4364@ls/false (apply (lambda (n4366@expr) (n2690@bless (list 'make-promise (list 'lambda '() n4366@expr)))) n4364@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4362@t))) (n2764@syntax-dispatch n4362@t '(_ any)))) n4360@stx))) (set! n2722@assert-macro (lambda (n4368@stx) ((lambda (n4370@t) ((lambda (n4372@ls/false) (if n4372@ls/false (apply (lambda (n4374@expr) ((lambda (n4376@pos) (n2690@bless (list 'unless n4374@expr (list 'assertion-error (list 'quote n4374@expr) (list 'quote n4376@pos))))) (or (n2989@expression-position n4368@stx) (n2989@expression-position n4374@expr)))) n4372@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4370@t))) (n2764@syntax-dispatch n4370@t '(_ any)))) n4368@stx))) (set! n2724@endianness-macro (lambda (n4378@stx) ((lambda (n4380@t) ((lambda (n4382@ls/false) (if n4382@ls/false (apply (lambda (n4384@e) ((lambda (n4386@t) (if (memv n4386@t '(little)) (n2690@bless ''little) (if (memv n4386@t '(big)) (n2690@bless ''big) (n2997@syntax-violation '#f '"endianness must be big or little" n4378@stx)))) (n3003@syntax->datum n4384@e))) n4382@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4380@t))) (n2764@syntax-dispatch n4380@t '(_ any)))) n4378@stx))) (set! n2726@identifier-syntax-macro (lambda (n4388@stx) ((lambda (n4390@t) ((lambda (n4392@ls/false) (if n4392@ls/false (apply (lambda (n4394@expr) (n2690@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax n4394@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax n4394@expr) '((syntax (e* ...)))))))))) n4392@ls/false) ((lambda (n4396@t) ((lambda (n4398@ls/false) (if (and n4398@ls/false (apply (lambda (n4400@id1 n4401@expr1 n4402@id2 n4403@expr2 n4404@expr3) (and (n2267@id? n4400@id1) (n2267@id? n4402@id2) (n2267@id? n4403@expr2))) n4398@ls/false)) (apply (lambda (n4410@id1 n4411@expr1 n4412@id2 n4413@expr2 n4414@expr3) (n2690@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax n4411@expr1)) (list (list 'set! 'id n4413@expr2) (list 'syntax n4414@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons n4411@expr1 '(e* ...))))))))) n4398@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4396@t))) (n2764@syntax-dispatch n4396@t '(_ (any any) ((#(scheme-id set!) any any) any))))) n4390@t))) (n2764@syntax-dispatch n4390@t '(_ any)))) n4388@stx))) (set! n2728@do-macro (lambda (n4420@stx) ((lambda (n4423@bind) (begin (set! n4423@bind (lambda (n4446@x) ((lambda (n4448@t) ((lambda (n4450@ls/false) (if n4450@ls/false (apply (lambda (n4452@x n4453@init) (list n4452@x n4453@init n4452@x)) n4450@ls/false) ((lambda (n4456@t) ((lambda (n4458@ls/false) (if n4458@ls/false (apply (lambda (n4460@x n4461@init n4462@step) (list n4460@x n4461@init n4462@step)) n4458@ls/false) ((lambda (n4466@t) ((lambda (n4468@ls/false) (if n4468@ls/false (apply (lambda () (n2997@syntax-violation '#f '"invalid binding" n4420@stx)) n4468@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4466@t))) (n2764@syntax-dispatch n4466@t '_))) n4456@t))) (n2764@syntax-dispatch n4456@t '(any any any)))) n4448@t))) (n2764@syntax-dispatch n4448@t '(any any)))) n4446@x))) ((lambda (n4424@t) ((lambda (n4426@ls/false) (if n4426@ls/false (apply (lambda (n4428@binding* n4429@test n4430@expr* n4431@command*) ((lambda (n4436@t) ((lambda (n4438@ls/false) (if n4438@ls/false (apply (lambda (n4440@x* n4441@init* n4442@step*) (if (n2277@valid-bound-ids? n4440@x*) (n2690@bless (list 'letrec (list (list 'loop (list 'lambda n4440@x* (list 'if n4429@test (cons 'begin (cons '(if #f #f) n4430@expr*)) (cons 'begin (append n4431@command* (list (cons 'loop n4442@step*)))))))) (cons 'loop n4441@init*))) (n2997@syntax-violation '#f '"invalid bindings" n4420@stx))) n4438@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4436@t))) (n2764@syntax-dispatch n4436@t '#(each (any any any))))) (map n4423@bind n4428@binding*))) n4426@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4424@t))) (n2764@syntax-dispatch n4424@t '(_ each-any (any . each-any) . each-any)))) n4420@stx))) '#f))) (set! n2730@let*-macro (lambda (n4470@stx) ((lambda (n4472@t) ((lambda (n4474@ls/false) (if (and n4474@ls/false (apply (lambda (n4476@lhs* n4477@rhs* n4478@b n4479@b*) (for-all n2267@id? n4476@lhs*)) n4474@ls/false)) (apply (lambda (n4484@lhs* n4485@rhs* n4486@b n4487@b*) (n2690@bless ((letrec ((n4492@f (lambda (n4494@x*) (if (null? n4494@x*) (cons 'let (cons '() (cons n4486@b n4487@b*))) (list 'let (list (car n4494@x*)) (n4492@f (cdr n4494@x*))))))) n4492@f) (map list n4484@lhs* n4485@rhs*)))) n4474@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4472@t))) (n2764@syntax-dispatch n4472@t '(_ #(each (any any)) any . each-any)))) n4470@stx))) (set! n2732@or-macro (lambda (n4496@stx) ((lambda (n4498@t) ((lambda (n4500@ls/false) (if n4500@ls/false (apply (lambda () '#f) n4500@ls/false) ((lambda (n4502@t) ((lambda (n4504@ls/false) (if n4504@ls/false (apply (lambda (n4506@e n4507@e*) (n2690@bless ((letrec ((n4510@f (lambda (n4512@e n4513@e*) (if (null? n4513@e*) (list 'begin '#f n4512@e) (list 'let (list (list 't n4512@e)) (list 'if 't 't (n4510@f (car n4513@e*) (cdr n4513@e*)))))))) n4510@f) n4506@e n4507@e*))) n4504@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4502@t))) (n2764@syntax-dispatch n4502@t '(_ any . each-any)))) n4498@t))) (n2764@syntax-dispatch n4498@t '(_)))) n4496@stx))) (set! n2734@and-macro (lambda (n4516@stx) ((lambda (n4518@t) ((lambda (n4520@ls/false) (if n4520@ls/false (apply (lambda () '#t) n4520@ls/false) ((lambda (n4522@t) ((lambda (n4524@ls/false) (if n4524@ls/false (apply (lambda (n4526@e n4527@e*) (n2690@bless ((letrec ((n4530@f (lambda (n4532@e n4533@e*) (if (null? n4533@e*) (list 'begin '#f n4532@e) (cons 'if (cons n4532@e (cons (n4530@f (car n4533@e*) (cdr n4533@e*)) '(#f)))))))) n4530@f) n4526@e n4527@e*))) n4524@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4522@t))) (n2764@syntax-dispatch n4522@t '(_ any . each-any)))) n4518@t))) (n2764@syntax-dispatch n4518@t '(_)))) n4516@stx))) (set! n2736@cond-macro (lambda (n4536@stx) ((lambda (n4538@t) ((lambda (n4540@ls/false) (if n4540@ls/false (apply (lambda (n4542@cls n4543@cls*) (n2690@bless ((letrec ((n4546@f (lambda (n4548@cls n4549@cls*) (if (null? n4549@cls*) ((lambda (n4552@t) ((lambda (n4554@ls/false) (if n4554@ls/false (apply (lambda (n4556@e n4557@e*) (cons 'begin (cons n4556@e n4557@e*))) n4554@ls/false) ((lambda (n4560@t) ((lambda (n4562@ls/false) (if n4562@ls/false (apply (lambda (n4564@e n4565@p) (list 'let (list (list 't n4564@e)) (list 'if 't (cons n4565@p '(t))))) n4562@ls/false) ((lambda (n4568@t) ((lambda (n4570@ls/false) (if n4570@ls/false (apply (lambda (n4572@e) (cons 'or (cons n4572@e '((if #f #f))))) n4570@ls/false) ((lambda (n4574@t) ((lambda (n4576@ls/false) (if n4576@ls/false (apply (lambda (n4578@e n4579@e*) (list 'if n4578@e (cons 'begin n4579@e*))) n4576@ls/false) ((lambda (n4582@t) ((lambda (n4584@ls/false) (if n4584@ls/false (apply (lambda () (n2997@syntax-violation '#f '"invalid last clause" n4536@stx)) n4584@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4582@t))) (n2764@syntax-dispatch n4582@t '_))) n4574@t))) (n2764@syntax-dispatch n4574@t '(any . each-any)))) n4568@t))) (n2764@syntax-dispatch n4568@t '(any)))) n4560@t))) (n2764@syntax-dispatch n4560@t '(any #(scheme-id =>) any)))) n4552@t))) (n2764@syntax-dispatch n4552@t '(#(scheme-id else) any . each-any)))) n4548@cls) ((lambda (n4586@t) ((lambda (n4588@ls/false) (if n4588@ls/false (apply (lambda (n4590@e n4591@e*) (n2997@syntax-violation '#f '"incorrect position of keyword else" n4536@stx)) n4588@ls/false) ((lambda (n4594@t) ((lambda (n4596@ls/false) (if n4596@ls/false (apply (lambda (n4598@e n4599@p) (list 'let (list (list 't n4598@e)) (list 'if 't (cons n4599@p '(t)) (n4546@f (car n4549@cls*) (cdr n4549@cls*))))) n4596@ls/false) ((lambda (n4602@t) ((lambda (n4604@ls/false) (if n4604@ls/false (apply (lambda (n4606@e) (list 'or n4606@e (n4546@f (car n4549@cls*) (cdr n4549@cls*)))) n4604@ls/false) ((lambda (n4608@t) ((lambda (n4610@ls/false) (if n4610@ls/false (apply (lambda (n4612@e n4613@e*) (list 'if n4612@e (cons 'begin n4613@e*) (n4546@f (car n4549@cls*) (cdr n4549@cls*)))) n4610@ls/false) ((lambda (n4616@t) ((lambda (n4618@ls/false) (if n4618@ls/false (apply (lambda () (n2997@syntax-violation '#f '"invalid last clause" n4536@stx)) n4618@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4616@t))) (n2764@syntax-dispatch n4616@t '_))) n4608@t))) (n2764@syntax-dispatch n4608@t '(any . each-any)))) n4602@t))) (n2764@syntax-dispatch n4602@t '(any)))) n4594@t))) (n2764@syntax-dispatch n4594@t '(any #(scheme-id =>) any)))) n4586@t))) (n2764@syntax-dispatch n4586@t '(#(scheme-id else) any . each-any)))) n4548@cls))))) n4546@f) n4542@cls n4543@cls*))) n4540@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4538@t))) (n2764@syntax-dispatch n4538@t '(_ any . each-any)))) n4536@stx))) (set! n2738@do-include (lambda (n4620@stx n4621@id n4622@filename) ((lambda (n4626@filename) (begin (if (not (and (string? n4626@filename) (n2267@id? n4621@id))) (n2997@syntax-violation '#f '"invalid syntax" n4620@stx) (void)) (cons (n2690@bless 'begin) (with-input-from-file n4626@filename (lambda () ((letrec ((n4628@f (lambda (n4630@ls) ((lambda (n4632@x) (if (eof-object? n4632@x) (reverse n4630@ls) (n4628@f (cons (n2233@datum->stx n4621@id n4632@x) n4630@ls)))) (n1152@n917@read-annotated))))) n4628@f) '())))))) (n2289@stx->datum n4622@filename)))) (set! n2740@include-macro (lambda (n4634@e) ((lambda (n4636@t) ((lambda (n4638@ls/false) (if n4638@ls/false (apply (lambda (n4640@id n4641@filename) (n2738@do-include n4634@e n4640@id n4641@filename)) n4638@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4636@t))) (n2764@syntax-dispatch n4636@t '(any any)))) n4634@e))) (set! n2742@include-into-macro (lambda (n4644@e) ((lambda (n4646@t) ((lambda (n4648@ls/false) (if n4648@ls/false (apply (lambda (n4650@id n4651@filename) (n2738@do-include n4644@e n4650@id n4651@filename)) n4648@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4646@t))) (n2764@syntax-dispatch n4646@t '(_ any any)))) n4644@e))) (set! n2744@syntax-rules-macro (lambda (n4654@e) ((lambda (n4656@t) ((lambda (n4658@ls/false) (if n4658@ls/false (apply (lambda (n4660@lits n4661@pat* n4662@tmp*) (begin (n2770@verify-literals n4660@lits n4654@e) (n2690@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons n4660@lits (map (lambda (n4666@pat n4667@tmp) ((lambda (n4670@t) ((lambda (n4672@ls/false) (if n4672@ls/false (apply (lambda (n4674@rest) (list (cons 'g n4674@rest) (list 'syntax n4667@tmp))) n4672@ls/false) ((lambda (n4676@t) ((lambda (n4678@ls/false) (if n4678@ls/false (apply (lambda () (n2997@syntax-violation '#f '"invalid syntax-rules pattern" n4654@e n4666@pat)) n4678@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4676@t))) (n2764@syntax-dispatch n4676@t '_))) n4670@t))) (n2764@syntax-dispatch n4670@t '(_ . any)))) n4666@pat)) n4661@pat* n4662@tmp*)))))))) n4658@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4656@t))) (n2764@syntax-dispatch n4656@t '(_ each-any . #(each (any any)))))) n4654@e))) (set! n2746@quasiquote-macro ((lambda () ((lambda (n4681@datum n4709@quasicons* n4711@quasicons n4713@quasiappend n4715@quasivector n4717@vquasi n4719@quasi) (begin (set! n4681@datum (lambda (n4938@x) (list (n2646@scheme-stx 'quote) (n2243@mkstx n4938@x '() '() '())))) (set! n4709@quasicons* (lambda (n4930@x n4931@y) ((letrec ((n4934@f (lambda (n4936@x) (if (null? n4936@x) n4931@y (n4711@quasicons (car n4936@x) (n4934@f (cdr n4936@x))))))) n4934@f) n4930@x))) (set! n4711@quasicons (lambda (n4892@x n4893@y) ((lambda (n4896@t) ((lambda (n4898@ls/false) (if n4898@ls/false (apply (lambda (n4900@dy) ((lambda (n4902@t) ((lambda (n4904@ls/false) (if n4904@ls/false (apply (lambda (n4906@dx) (list (n2646@scheme-stx 'quote) (cons n4906@dx n4900@dy))) n4904@ls/false) ((lambda (n4908@t) ((lambda (n4910@ls/false) (if n4910@ls/false (apply (lambda () ((lambda (n4912@t) ((lambda (n4914@ls/false) (if n4914@ls/false (apply (lambda () (list (n2646@scheme-stx 'list) n4892@x)) n4914@ls/false) ((lambda (n4916@t) ((lambda (n4918@ls/false) (if n4918@ls/false (apply (lambda () (list (n2646@scheme-stx 'cons) n4892@x n4893@y)) n4918@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4916@t))) (n2764@syntax-dispatch n4916@t '_))) n4912@t))) (n2764@syntax-dispatch n4912@t '()))) n4900@dy)) n4910@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4908@t))) (n2764@syntax-dispatch n4908@t '_))) n4902@t))) (n2764@syntax-dispatch n4902@t '(#(scheme-id quote) any)))) n4892@x)) n4898@ls/false) ((lambda (n4920@t) ((lambda (n4922@ls/false) (if n4922@ls/false (apply (lambda (n4924@stuff) (cons* (n2646@scheme-stx 'list) n4892@x n4924@stuff)) n4922@ls/false) ((lambda (n4926@t) ((lambda (n4928@ls/false) (if n4928@ls/false (apply (lambda () (list (n2646@scheme-stx 'cons) n4892@x n4893@y)) n4928@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4926@t))) (n2764@syntax-dispatch n4926@t '_))) n4920@t))) (n2764@syntax-dispatch n4920@t '(#(scheme-id list) . each-any)))) n4896@t))) (n2764@syntax-dispatch n4896@t '(#(scheme-id quote) any)))) n4893@y))) (set! n4713@quasiappend (lambda (n4866@x n4867@y) ((lambda (n4870@ls) (if (null? n4870@ls) (list (n2646@scheme-stx 'quote) '()) (if (null? (cdr n4870@ls)) (car n4870@ls) (cons* (n2646@scheme-stx 'append) n4870@ls)))) ((letrec ((n4872@f (lambda (n4874@x) (if (null? n4874@x) ((lambda (n4876@t) ((lambda (n4878@ls/false) (if n4878@ls/false (apply (lambda () '()) n4878@ls/false) ((lambda (n4880@t) ((lambda (n4882@ls/false) (if n4882@ls/false (apply (lambda () (list n4867@y)) n4882@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4880@t))) (n2764@syntax-dispatch n4880@t '_))) n4876@t))) (n2764@syntax-dispatch n4876@t '(#(scheme-id quote) ())))) n4867@y) ((lambda (n4884@t) ((lambda (n4886@ls/false) (if n4886@ls/false (apply (lambda () (n4872@f (cdr n4874@x))) n4886@ls/false) ((lambda (n4888@t) ((lambda (n4890@ls/false) (if n4890@ls/false (apply (lambda () (cons (car n4874@x) (n4872@f (cdr n4874@x)))) n4890@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4888@t))) (n2764@syntax-dispatch n4888@t '_))) n4884@t))) (n2764@syntax-dispatch n4884@t '(#(scheme-id quote) ())))) (car n4874@x)))))) n4872@f) n4866@x)))) (set! n4715@quasivector (lambda (n4816@x) ((lambda (n4818@pat-x) ((lambda (n4820@t) ((lambda (n4822@ls/false) (if n4822@ls/false (apply (lambda (n4824@x*) (list (n2646@scheme-stx 'quote) (list->vector n4824@x*))) n4822@ls/false) ((lambda (n4826@t) ((lambda (n4828@ls/false) (if n4828@ls/false (apply (lambda () ((letrec ((n4830@f (lambda (n4832@x n4833@k) ((lambda (n4836@t) ((lambda (n4838@ls/false) (if n4838@ls/false (apply (lambda (n4840@x*) (n4833@k (map (lambda (n4842@x) (list (n2646@scheme-stx 'quote) n4842@x)) n4840@x*))) n4838@ls/false) ((lambda (n4844@t) ((lambda (n4846@ls/false) (if n4846@ls/false (apply (lambda (n4848@x*) (n4833@k n4848@x*)) n4846@ls/false) ((lambda (n4850@t) ((lambda (n4852@ls/false) (if n4852@ls/false (apply (lambda (n4854@x n4855@y) (n4830@f n4855@y (lambda (n4858@ls) (n4833@k (cons n4854@x n4858@ls))))) n4852@ls/false) ((lambda (n4860@t) ((lambda (n4862@ls/false) (if n4862@ls/false (apply (lambda () (list (n2646@scheme-stx 'list->vector) n4818@pat-x)) n4862@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4860@t))) (n2764@syntax-dispatch n4860@t '_))) n4850@t))) (n2764@syntax-dispatch n4850@t '(#(scheme-id cons) any any)))) n4844@t))) (n2764@syntax-dispatch n4844@t '(#(scheme-id list) . each-any)))) n4836@t))) (n2764@syntax-dispatch n4836@t '(#(scheme-id quote) each-any)))) n4832@x)))) n4830@f) n4816@x (lambda (n4864@ls) (cons* (n2646@scheme-stx 'vector) n4864@ls)))) n4828@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4826@t))) (n2764@syntax-dispatch n4826@t '_))) n4820@t))) (n2764@syntax-dispatch n4820@t '(#(scheme-id quote) each-any)))) n4818@pat-x)) n4816@x))) (set! n4717@vquasi (lambda (n4782@p n4783@lev) ((lambda (n4786@t) ((lambda (n4788@ls/false) (if n4788@ls/false (apply (lambda (n4790@p n4791@q) ((lambda (n4794@t) ((lambda (n4796@ls/false) (if n4796@ls/false (apply (lambda (n4798@p) (if (= n4783@lev '0) (n4709@quasicons* n4798@p (n4717@vquasi n4791@q n4783@lev)) (n4711@quasicons (n4711@quasicons (n4681@datum 'unquote) (n4719@quasi n4798@p (- n4783@lev '1))) (n4717@vquasi n4791@q n4783@lev)))) n4796@ls/false) ((lambda (n4800@t) ((lambda (n4802@ls/false) (if n4802@ls/false (apply (lambda (n4804@p) (if (= n4783@lev '0) (n4713@quasiappend n4804@p (n4717@vquasi n4791@q n4783@lev)) (n4711@quasicons (n4711@quasicons (n4681@datum 'unquote-splicing) (n4719@quasi n4804@p (- n4783@lev '1))) (n4717@vquasi n4791@q n4783@lev)))) n4802@ls/false) ((lambda (n4806@t) ((lambda (n4808@ls/false) (if n4808@ls/false (apply (lambda (n4810@p) (n4711@quasicons (n4719@quasi n4810@p n4783@lev) (n4717@vquasi n4791@q n4783@lev))) n4808@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4806@t))) (n2764@syntax-dispatch n4806@t 'any))) n4800@t))) (n2764@syntax-dispatch n4800@t '(#(scheme-id unquote-splicing) . each-any)))) n4794@t))) (n2764@syntax-dispatch n4794@t '(#(scheme-id unquote) . each-any)))) n4790@p)) n4788@ls/false) ((lambda (n4812@t) ((lambda (n4814@ls/false) (if n4814@ls/false (apply (lambda () (list (n2646@scheme-stx 'quote) '())) n4814@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4812@t))) (n2764@syntax-dispatch n4812@t '()))) n4786@t))) (n2764@syntax-dispatch n4786@t '(any . any)))) n4782@p))) (set! n4719@quasi (lambda (n4728@p n4729@lev) ((lambda (n4732@t) ((lambda (n4734@ls/false) (if n4734@ls/false (apply (lambda (n4736@p) (if (= n4729@lev '0) n4736@p (n4711@quasicons (n4681@datum 'unquote) (n4719@quasi (list n4736@p) (- n4729@lev '1))))) n4734@ls/false) ((lambda (n4738@t) ((lambda (n4740@ls/false) (if n4740@ls/false (apply (lambda (n4742@p n4743@q) (if (= n4729@lev '0) (n4709@quasicons* n4742@p (n4719@quasi n4743@q n4729@lev)) (n4711@quasicons (n4711@quasicons (n4681@datum 'unquote) (n4719@quasi n4742@p (- n4729@lev '1))) (n4719@quasi n4743@q n4729@lev)))) n4740@ls/false) ((lambda (n4746@t) ((lambda (n4748@ls/false) (if n4748@ls/false (apply (lambda (n4750@p n4751@q) (if (= n4729@lev '0) (n4713@quasiappend n4750@p (n4719@quasi n4751@q n4729@lev)) (n4711@quasicons (n4711@quasicons (n4681@datum 'unquote-splicing) (n4719@quasi n4750@p (- n4729@lev '1))) (n4719@quasi n4751@q n4729@lev)))) n4748@ls/false) ((lambda (n4754@t) ((lambda (n4756@ls/false) (if n4756@ls/false (apply (lambda (n4758@p) (n4711@quasicons (n4681@datum 'quasiquote) (n4719@quasi (list n4758@p) (+ n4729@lev '1)))) n4756@ls/false) ((lambda (n4760@t) ((lambda (n4762@ls/false) (if n4762@ls/false (apply (lambda (n4764@p n4765@q) (n4711@quasicons (n4719@quasi n4764@p n4729@lev) (n4719@quasi n4765@q n4729@lev))) n4762@ls/false) ((lambda (n4768@t) ((lambda (n4770@ls/false) (if (and n4770@ls/false (apply (lambda (n4772@x) (not (n2211@stx? n4772@x))) n4770@ls/false)) (apply (lambda (n4774@x) (n4715@quasivector (n4717@vquasi n4774@x n4729@lev))) n4770@ls/false) ((lambda (n4776@t) ((lambda (n4778@ls/false) (if n4778@ls/false (apply (lambda (n4780@p) (list (n2646@scheme-stx 'quote) n4780@p)) n4778@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4776@t))) (n2764@syntax-dispatch n4776@t 'any))) n4768@t))) (n2764@syntax-dispatch n4768@t '#(vector each-any)))) n4760@t))) (n2764@syntax-dispatch n4760@t '(any . any)))) n4754@t))) (n2764@syntax-dispatch n4754@t '(#(scheme-id quasiquote) any)))) n4746@t))) (n2764@syntax-dispatch n4746@t '((#(scheme-id unquote-splicing) . each-any) . any)))) n4738@t))) (n2764@syntax-dispatch n4738@t '((#(scheme-id unquote) . each-any) . any)))) n4732@t))) (n2764@syntax-dispatch n4732@t '(#(scheme-id unquote) any)))) n4728@p))) (lambda (n4720@x) ((lambda (n4722@t) ((lambda (n4724@ls/false) (if n4724@ls/false (apply (lambda (n4726@e) (n4719@quasi n4726@e '0)) n4724@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4722@t))) (n2764@syntax-dispatch n4722@t '(_ any)))) n4720@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! n2748@quasisyntax-macro ((lambda () ((lambda (n4941@quasi) (begin (set! n4941@quasi (lambda (n4965@p n4966@lev) ((lambda (n4969@t) ((lambda (n4971@ls/false) (if n4971@ls/false (apply (lambda (n4973@p) (if (= n4966@lev '0) ((lambda (n4975@g) (values (list n4975@g) (list n4973@p) n4975@g)) (n1151@n915@gensym)) (call-with-values (lambda () (n4941@quasi n4973@p (- n4966@lev '1))) (lambda (n4980@n4977@lhs* n4981@n4978@rhs* n4982@n4979@p) ((lambda (n4986@p n4987@rhs* n4988@lhs*) (values n4988@lhs* n4987@rhs* (list 'unsyntax n4986@p))) n4982@n4979@p n4981@n4978@rhs* n4980@n4977@lhs*))))) n4971@ls/false) ((lambda (n4992@t) ((lambda (n4994@ls/false) (if (and n4994@ls/false (apply (lambda () (= n4966@lev '0)) n4994@ls/false)) (apply (lambda () (n2997@syntax-violation '#f '"incorrect use of unsyntax" n4965@p)) n4994@ls/false) ((lambda (n4996@t) ((lambda (n4998@ls/false) (if n4998@ls/false (apply (lambda (n5000@p* n5001@q) (call-with-values (lambda () (n4941@quasi n5001@q n4966@lev)) (lambda (n5007@n5004@lhs* n5008@n5005@rhs* n5009@n5006@q) ((lambda (n5013@q n5014@rhs* n5015@lhs*) (if (= n4966@lev '0) ((lambda (n5019@g*) (values (append n5019@g* n5015@lhs*) (append n5000@p* n5014@rhs*) (append n5019@g* n5013@q))) (map (lambda (n5021@x) (n1151@n915@gensym)) n5000@p*)) (call-with-values (lambda () (n4941@quasi n5000@p* (- n4966@lev '1))) (lambda (n5026@n5023@lhs2* n5027@n5024@rhs2* n5028@n5025@p*) ((lambda (n5032@p* n5033@rhs2* n5034@lhs2*) (values (append n5034@lhs2* n5015@lhs*) (append n5033@rhs2* n5014@rhs*) (cons (cons 'unsyntax n5032@p*) n5013@q))) n5028@n5025@p* n5027@n5024@rhs2* n5026@n5023@lhs2*))))) n5009@n5006@q n5008@n5005@rhs* n5007@n5004@lhs*)))) n4998@ls/false) ((lambda (n5038@t) ((lambda (n5040@ls/false) (if n5040@ls/false (apply (lambda (n5042@p* n5043@q) (call-with-values (lambda () (n4941@quasi n5043@q n4966@lev)) (lambda (n5049@n5046@lhs* n5050@n5047@rhs* n5051@n5048@q) ((lambda (n5055@q n5056@rhs* n5057@lhs*) (if (= n4966@lev '0) ((lambda (n5061@g*) (values (append (map (lambda (n5063@g) (cons n5063@g '(...))) n5061@g*) n5057@lhs*) (append n5042@p* n5056@rhs*) (append (apply append (map (lambda (n5065@g) (cons n5065@g '(...))) n5061@g*)) n5055@q))) (map (lambda (n5067@x) (n1151@n915@gensym)) n5042@p*)) (call-with-values (lambda () (n4941@quasi n5042@p* (- n4966@lev '1))) (lambda (n5072@n5069@lhs2* n5073@n5070@rhs2* n5074@n5071@p*) ((lambda (n5078@p* n5079@rhs2* n5080@lhs2*) (values (append n5080@lhs2* n5057@lhs*) (append n5079@rhs2* n5056@rhs*) (cons (cons 'unsyntax-splicing n5078@p*) n5055@q))) n5074@n5071@p* n5073@n5070@rhs2* n5072@n5069@lhs2*))))) n5051@n5048@q n5050@n5047@rhs* n5049@n5046@lhs*)))) n5040@ls/false) ((lambda (n5084@t) ((lambda (n5086@ls/false) (if (and n5086@ls/false (apply (lambda () (= n4966@lev '0)) n5086@ls/false)) (apply (lambda () (n2997@syntax-violation '#f '"incorrect use of unsyntax-splicing" n4965@p)) n5086@ls/false) ((lambda (n5088@t) ((lambda (n5090@ls/false) (if n5090@ls/false (apply (lambda (n5092@p) (call-with-values (lambda () (n4941@quasi n5092@p (+ n4966@lev '1))) (lambda (n5097@n5094@lhs* n5098@n5095@rhs* n5099@n5096@p) ((lambda (n5103@p n5104@rhs* n5105@lhs*) (values n5105@lhs* n5104@rhs* (list 'quasisyntax n5103@p))) n5099@n5096@p n5098@n5095@rhs* n5097@n5094@lhs*)))) n5090@ls/false) ((lambda (n5109@t) ((lambda (n5111@ls/false) (if n5111@ls/false (apply (lambda (n5113@p n5114@q) (call-with-values (lambda () (n4941@quasi n5113@p n4966@lev)) (lambda (n5123@n5117@lhs* n5124@n5118@rhs* n5125@n5119@p) (call-with-values (lambda () (n4941@quasi n5114@q n4966@lev)) (lambda (n5129@n5120@lhs2* n5130@n5121@rhs2* n5131@n5122@q) ((lambda (n5135@q n5136@rhs2* n5137@lhs2* n5138@p n5139@rhs* n5140@lhs*) (values (append n5137@lhs2* n5140@lhs*) (append n5136@rhs2* n5139@rhs*) (cons n5138@p n5135@q))) n5131@n5122@q n5130@n5121@rhs2* n5129@n5120@lhs2* n5125@n5119@p n5124@n5118@rhs* n5123@n5117@lhs*)))))) n5111@ls/false) ((lambda (n5147@t) ((lambda (n5149@ls/false) (if n5149@ls/false (apply (lambda (n5151@x*) (call-with-values (lambda () (n4941@quasi n5151@x* n4966@lev)) (lambda (n5156@n5153@lhs* n5157@n5154@rhs* n5158@n5155@x*) ((lambda (n5162@x* n5163@rhs* n5164@lhs*) (values n5164@lhs* n5163@rhs* (list->vector n5162@x*))) n5158@n5155@x* n5157@n5154@rhs* n5156@n5153@lhs*)))) n5149@ls/false) ((lambda (n5168@t) ((lambda (n5170@ls/false) (if n5170@ls/false (apply (lambda () (values '() '() n4965@p)) n5170@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5168@t))) (n2764@syntax-dispatch n5168@t '_))) n5147@t))) (n2764@syntax-dispatch n5147@t '#(vector each-any)))) n5109@t))) (n2764@syntax-dispatch n5109@t '(any . any)))) n5088@t))) (n2764@syntax-dispatch n5088@t '(#(scheme-id quasisyntax) any)))) n5084@t))) (n2764@syntax-dispatch n5084@t '#(scheme-id unsyntax-splicing)))) n5038@t))) (n2764@syntax-dispatch n5038@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) n4996@t))) (n2764@syntax-dispatch n4996@t '((#(scheme-id unsyntax) . each-any) . any)))) n4992@t))) (n2764@syntax-dispatch n4992@t '#(scheme-id unsyntax)))) n4969@t))) (n2764@syntax-dispatch n4969@t '(#(scheme-id unsyntax) any)))) n4965@p))) (lambda (n4942@x) ((lambda (n4944@t) ((lambda (n4946@ls/false) (if n4946@ls/false (apply (lambda (n4948@e) (call-with-values (lambda () (n4941@quasi n4948@e '0)) (lambda (n4953@n4950@lhs* n4954@n4951@rhs* n4955@n4952@v) ((lambda (n4959@v n4960@rhs* n4961@lhs*) (n2690@bless (list 'syntax-case (cons 'list n4960@rhs*) '() (list n4961@lhs* (list 'syntax n4959@v))))) n4955@n4952@v n4954@n4951@rhs* n4953@n4950@lhs*)))) n4946@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n4944@t))) (n2764@syntax-dispatch n4944@t '(_ any)))) n4942@x)))) '#f)))) (set! n2750@define-struct-macro (lambda (n5172@stx) (n2997@syntax-violation '#f '"define-struct not supported" n5172@stx))) (set! n2752@define-record-type-macro (lambda (n5174@x) ((lambda (n5177@id n5179@get-record-name n5181@get-record-constructor-name n5183@get-record-predicate-name n5185@get-clause n5187@foo-rtd-code n5189@parent-rtd-code n5191@parent-rcd-code n5193@foo-rcd-code n5195@get-protocol-code n5197@get-fields n5199@get-mutator-indices n5201@get-mutators n5203@get-accessors n5205@enumerate n5207@do-define-record n5209@verify-clauses) (begin (set! n5177@id (lambda (n5676@ctxt . n5678@str*) (n3001@datum->syntax n5676@ctxt (string->symbol (apply string-append (map (lambda (n5680@x) (if (symbol? n5680@x) (symbol->string n5680@x) (if (string? n5680@x) n5680@x (assertion-violation 'define-record-type '"BUG")))) n5678@str*)))))) (set! n5179@get-record-name (lambda (n5658@spec) ((lambda (n5660@t) ((lambda (n5662@ls/false) (if n5662@ls/false (apply (lambda (n5664@foo n5665@make-foo n5666@foo?) n5664@foo) n5662@ls/false) ((lambda (n5670@t) ((lambda (n5672@ls/false) (if n5672@ls/false (apply (lambda (n5674@foo) n5674@foo) n5672@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5670@t))) (n2764@syntax-dispatch n5670@t 'any))) n5660@t))) (n2764@syntax-dispatch n5660@t '(any any any)))) n5658@spec))) (set! n5181@get-record-constructor-name (lambda (n5638@spec) ((lambda (n5640@t) ((lambda (n5642@ls/false) (if n5642@ls/false (apply (lambda (n5644@foo n5645@make-foo n5646@foo?) n5645@make-foo) n5642@ls/false) ((lambda (n5650@t) ((lambda (n5652@ls/false) (if (and n5652@ls/false (apply (lambda (n5654@foo) (n2267@id? n5654@foo)) n5652@ls/false)) (apply (lambda (n5656@foo) (n5177@id n5656@foo '"make-" (n2289@stx->datum n5656@foo))) n5652@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5650@t))) (n2764@syntax-dispatch n5650@t 'any))) n5640@t))) (n2764@syntax-dispatch n5640@t '(any any any)))) n5638@spec))) (set! n5183@get-record-predicate-name (lambda (n5618@spec) ((lambda (n5620@t) ((lambda (n5622@ls/false) (if n5622@ls/false (apply (lambda (n5624@foo n5625@make-foo n5626@foo?) n5626@foo?) n5622@ls/false) ((lambda (n5630@t) ((lambda (n5632@ls/false) (if (and n5632@ls/false (apply (lambda (n5634@foo) (n2267@id? n5634@foo)) n5632@ls/false)) (apply (lambda (n5636@foo) (n5177@id n5636@foo (n2289@stx->datum n5636@foo) '"?")) n5632@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5630@t))) (n2764@syntax-dispatch n5630@t 'any))) n5620@t))) (n2764@syntax-dispatch n5620@t '(any any any)))) n5618@spec))) (set! n5185@get-clause (lambda (n5600@id n5601@ls) ((lambda (n5604@t) ((lambda (n5606@ls/false) (if n5606@ls/false (apply (lambda () '#f) n5606@ls/false) ((lambda (n5608@t) ((lambda (n5610@ls/false) (if n5610@ls/false (apply (lambda (n5612@x n5613@rest n5614@ls) (if (n2275@free-id=? (n2690@bless n5600@id) n5612@x) (cons n5612@x n5613@rest) (n5185@get-clause n5600@id n5614@ls))) n5610@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5608@t))) (n2764@syntax-dispatch n5608@t '((any . any) . any)))) n5604@t))) (n2764@syntax-dispatch n5604@t '()))) n5601@ls))) (set! n5187@foo-rtd-code (lambda (n5518@name n5519@clause* n5520@parent-rtd-code) ((lambda (n5525@convert-field-spec*) (begin (set! n5525@convert-field-spec* (lambda (n5574@ls) (list->vector (map (lambda (n5576@x) ((lambda (n5578@t) ((lambda (n5580@ls/false) (if n5580@ls/false (apply (lambda (n5582@name n5583@rest) (list 'mutable n5582@name)) n5580@ls/false) ((lambda (n5586@t) ((lambda (n5588@ls/false) (if n5588@ls/false (apply (lambda (n5590@name n5591@rest) (list 'immutable n5590@name)) n5588@ls/false) ((lambda (n5594@t) ((lambda (n5596@ls/false) (if n5596@ls/false (apply (lambda (n5598@name) (list 'immutable n5598@name)) n5596@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5594@t))) (n2764@syntax-dispatch n5594@t 'any))) n5586@t))) (n2764@syntax-dispatch n5586@t '(#(scheme-id immutable) any . any)))) n5578@t))) (n2764@syntax-dispatch n5578@t '(#(scheme-id mutable) any . any)))) n5576@x)) n5574@ls)))) ((lambda (n5526@uid-code n5527@sealed? n5528@opaque? n5529@fields) (n2690@bless (list 'make-record-type-descriptor (list 'quote n5518@name) n5520@parent-rtd-code n5526@uid-code n5527@sealed? n5528@opaque? n5529@fields))) ((lambda (n5534@t) ((lambda (n5536@ls/false) (if n5536@ls/false (apply (lambda () (list 'quote (n1151@n915@gensym))) n5536@ls/false) ((lambda (n5538@t) ((lambda (n5540@ls/false) (if n5540@ls/false (apply (lambda (n5542@uid) (list 'quote n5542@uid)) n5540@ls/false) ((lambda (n5544@t) ((lambda (n5546@ls/false) (if n5546@ls/false (apply (lambda () '#f) n5546@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5544@t))) (n2764@syntax-dispatch n5544@t '_))) n5538@t))) (n2764@syntax-dispatch n5538@t '(_ any)))) n5534@t))) (n2764@syntax-dispatch n5534@t '(_)))) (n5185@get-clause 'nongenerative n5519@clause*)) ((lambda (n5548@t) ((lambda (n5550@ls/false) (if n5550@ls/false (apply (lambda () '#t) n5550@ls/false) ((lambda (n5552@t) ((lambda (n5554@ls/false) (if n5554@ls/false (apply (lambda () '#f) n5554@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5552@t))) (n2764@syntax-dispatch n5552@t '_))) n5548@t))) (n2764@syntax-dispatch n5548@t '(_ #(atom #t))))) (n5185@get-clause 'sealed n5519@clause*)) ((lambda (n5556@t) ((lambda (n5558@ls/false) (if n5558@ls/false (apply (lambda () '#t) n5558@ls/false) ((lambda (n5560@t) ((lambda (n5562@ls/false) (if n5562@ls/false (apply (lambda () '#f) n5562@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5560@t))) (n2764@syntax-dispatch n5560@t '_))) n5556@t))) (n2764@syntax-dispatch n5556@t '(_ #(atom #t))))) (n5185@get-clause 'opaque n5519@clause*)) ((lambda (n5564@t) ((lambda (n5566@ls/false) (if n5566@ls/false (apply (lambda (n5568@field-spec*) (list 'quote (n5525@convert-field-spec* n5568@field-spec*))) n5566@ls/false) ((lambda (n5570@t) ((lambda (n5572@ls/false) (if n5572@ls/false (apply (lambda () ''#()) n5572@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5570@t))) (n2764@syntax-dispatch n5570@t '_))) n5564@t))) (n2764@syntax-dispatch n5564@t '(_ . each-any)))) (n5185@get-clause 'fields n5519@clause*))))) '#f))) (set! n5189@parent-rtd-code (lambda (n5494@clause*) ((lambda (n5496@t) ((lambda (n5498@ls/false) (if n5498@ls/false (apply (lambda (n5500@name) (list 'record-type-descriptor n5500@name)) n5498@ls/false) ((lambda (n5502@t) ((lambda (n5504@ls/false) (if n5504@ls/false (apply (lambda () ((lambda (n5506@t) ((lambda (n5508@ls/false) (if n5508@ls/false (apply (lambda (n5510@rtd n5511@rcd) n5510@rtd) n5508@ls/false) ((lambda (n5514@t) ((lambda (n5516@ls/false) (if n5516@ls/false (apply (lambda () '#f) n5516@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5514@t))) (n2764@syntax-dispatch n5514@t '#(atom #f)))) n5506@t))) (n2764@syntax-dispatch n5506@t '(_ any any)))) (n5185@get-clause 'parent-rtd n5494@clause*))) n5504@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5502@t))) (n2764@syntax-dispatch n5502@t '#(atom #f)))) n5496@t))) (n2764@syntax-dispatch n5496@t '(_ any)))) (n5185@get-clause 'parent n5494@clause*)))) (set! n5191@parent-rcd-code (lambda (n5470@clause*) ((lambda (n5472@t) ((lambda (n5474@ls/false) (if n5474@ls/false (apply (lambda (n5476@name) (list 'record-constructor-descriptor n5476@name)) n5474@ls/false) ((lambda (n5478@t) ((lambda (n5480@ls/false) (if n5480@ls/false (apply (lambda () ((lambda (n5482@t) ((lambda (n5484@ls/false) (if n5484@ls/false (apply (lambda (n5486@rtd n5487@rcd) n5487@rcd) n5484@ls/false) ((lambda (n5490@t) ((lambda (n5492@ls/false) (if n5492@ls/false (apply (lambda () '#f) n5492@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5490@t))) (n2764@syntax-dispatch n5490@t '#(atom #f)))) n5482@t))) (n2764@syntax-dispatch n5482@t '(_ any any)))) (n5185@get-clause 'parent-rtd n5470@clause*))) n5480@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5478@t))) (n2764@syntax-dispatch n5478@t '#(atom #f)))) n5472@t))) (n2764@syntax-dispatch n5472@t '(_ any)))) (n5185@get-clause 'parent n5470@clause*)))) (set! n5193@foo-rcd-code (lambda (n5462@clause* n5463@foo-rtd n5464@protocol n5465@parent-rcd-code) (list 'make-record-constructor-descriptor n5463@foo-rtd n5465@parent-rcd-code n5464@protocol))) (set! n5195@get-protocol-code (lambda (n5450@clause*) ((lambda (n5452@t) ((lambda (n5454@ls/false) (if n5454@ls/false (apply (lambda (n5456@expr) n5456@expr) n5454@ls/false) ((lambda (n5458@t) ((lambda (n5460@ls/false) (if n5460@ls/false (apply (lambda () '#f) n5460@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5458@t))) (n2764@syntax-dispatch n5458@t '_))) n5452@t))) (n2764@syntax-dispatch n5452@t '(_ any)))) (n5185@get-clause 'protocol n5450@clause*)))) (set! n5197@get-fields (lambda (n5432@clause*) ((lambda (n5434@t) ((lambda (n5436@ls/false) (if n5436@ls/false (apply (lambda () '()) n5436@ls/false) ((lambda (n5438@t) ((lambda (n5440@ls/false) (if n5440@ls/false (apply (lambda (n5442@f*) n5442@f*) n5440@ls/false) ((lambda (n5444@t) ((lambda (n5446@ls/false) (if n5446@ls/false (apply (lambda (n5448@rest) (n5197@get-fields n5448@rest)) n5446@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5444@t))) (n2764@syntax-dispatch n5444@t '(_ . any)))) n5438@t))) (n2764@syntax-dispatch n5438@t '((#(scheme-id fields) . each-any) . _)))) n5434@t))) (n2764@syntax-dispatch n5434@t '()))) n5432@clause*))) (set! n5199@get-mutator-indices (lambda (n5408@fields) ((letrec ((n5410@f (lambda (n5412@fields n5413@i) ((lambda (n5416@t) ((lambda (n5418@ls/false) (if n5418@ls/false (apply (lambda () '()) n5418@ls/false) ((lambda (n5420@t) ((lambda (n5422@ls/false) (if n5422@ls/false (apply (lambda (n5424@rest) (cons n5413@i (n5410@f n5424@rest (+ n5413@i '1)))) n5422@ls/false) ((lambda (n5426@t) ((lambda (n5428@ls/false) (if n5428@ls/false (apply (lambda (n5430@rest) (n5410@f n5430@rest (+ n5413@i '1))) n5428@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5426@t))) (n2764@syntax-dispatch n5426@t '(_ . any)))) n5420@t))) (n2764@syntax-dispatch n5420@t '((#(scheme-id mutable) . _) . any)))) n5416@t))) (n2764@syntax-dispatch n5416@t '()))) n5412@fields)))) n5410@f) n5408@fields '0))) (set! n5201@get-mutators (lambda (n5366@foo n5367@fields) ((lambda (n5371@gen-name) (begin (set! n5371@gen-name (lambda (n5406@x) (n3001@datum->syntax n5366@foo (string->symbol (string-append (symbol->string (n3003@syntax->datum n5366@foo)) '"-" (symbol->string (n3003@syntax->datum n5406@x)) '"-set!"))))) ((letrec ((n5372@f (lambda (n5374@fields) ((lambda (n5376@t) ((lambda (n5378@ls/false) (if n5378@ls/false (apply (lambda () '()) n5378@ls/false) ((lambda (n5380@t) ((lambda (n5382@ls/false) (if n5382@ls/false (apply (lambda (n5384@name n5385@accessor n5386@mutator n5387@rest) (cons n5386@mutator (n5372@f n5387@rest))) n5382@ls/false) ((lambda (n5392@t) ((lambda (n5394@ls/false) (if n5394@ls/false (apply (lambda (n5396@name n5397@rest) (cons (n5371@gen-name n5396@name) (n5372@f n5397@rest))) n5394@ls/false) ((lambda (n5400@t) ((lambda (n5402@ls/false) (if n5402@ls/false (apply (lambda (n5404@rest) (n5372@f n5404@rest)) n5402@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5400@t))) (n2764@syntax-dispatch n5400@t '(_ . any)))) n5392@t))) (n2764@syntax-dispatch n5392@t '((#(scheme-id mutable) any) . any)))) n5380@t))) (n2764@syntax-dispatch n5380@t '((#(scheme-id mutable) any any any) . any)))) n5376@t))) (n2764@syntax-dispatch n5376@t '()))) n5374@fields)))) n5372@f) n5367@fields))) '#f))) (set! n5203@get-accessors (lambda (n5298@foo n5299@fields) ((lambda (n5303@gen-name) (begin (set! n5303@gen-name (lambda (n5364@x) (n3001@datum->syntax n5298@foo (string->symbol (string-append (symbol->string (n3003@syntax->datum n5298@foo)) '"-" (symbol->string (n3003@syntax->datum n5364@x))))))) (map (lambda (n5304@field) ((lambda (n5306@t) ((lambda (n5308@ls/false) (if (and n5308@ls/false (apply (lambda (n5310@name n5311@accessor n5312@mutator) (n2267@id? n5311@accessor)) n5308@ls/false)) (apply (lambda (n5316@name n5317@accessor n5318@mutator) n5317@accessor) n5308@ls/false) ((lambda (n5322@t) ((lambda (n5324@ls/false) (if (and n5324@ls/false (apply (lambda (n5326@name n5327@accessor) (n2267@id? n5327@accessor)) n5324@ls/false)) (apply (lambda (n5330@name n5331@accessor) n5331@accessor) n5324@ls/false) ((lambda (n5334@t) ((lambda (n5336@ls/false) (if (and n5336@ls/false (apply (lambda (n5338@name) (n2267@id? n5338@name)) n5336@ls/false)) (apply (lambda (n5340@name) (n5303@gen-name n5340@name)) n5336@ls/false) ((lambda (n5342@t) ((lambda (n5344@ls/false) (if (and n5344@ls/false (apply (lambda (n5346@name) (n2267@id? n5346@name)) n5344@ls/false)) (apply (lambda (n5348@name) (n5303@gen-name n5348@name)) n5344@ls/false) ((lambda (n5350@t) ((lambda (n5352@ls/false) (if (and n5352@ls/false (apply (lambda (n5354@name) (n2267@id? n5354@name)) n5352@ls/false)) (apply (lambda (n5356@name) (n5303@gen-name n5356@name)) n5352@ls/false) ((lambda (n5358@t) ((lambda (n5360@ls/false) (if n5360@ls/false (apply (lambda (n5362@others) (n2997@syntax-violation '#f '"invalid field spec" n5304@field)) n5360@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5358@t))) (n2764@syntax-dispatch n5358@t 'any))) n5350@t))) (n2764@syntax-dispatch n5350@t 'any))) n5342@t))) (n2764@syntax-dispatch n5342@t '(#(scheme-id immutable) any)))) n5334@t))) (n2764@syntax-dispatch n5334@t '(#(scheme-id mutable) any)))) n5322@t))) (n2764@syntax-dispatch n5322@t '(#(scheme-id immutable) any any)))) n5306@t))) (n2764@syntax-dispatch n5306@t '(#(scheme-id mutable) any any any)))) n5304@field)) n5299@fields))) '#f))) (set! n5205@enumerate (lambda (n5290@ls) ((letrec ((n5292@f (lambda (n5294@ls n5295@i) (if (null? n5294@ls) '() (cons n5295@i (n5292@f (cdr n5294@ls) (+ n5295@i '1))))))) n5292@f) n5290@ls '0))) (set! n5207@do-define-record (lambda (n5250@namespec n5251@clause*) ((lambda (n5254@foo) ((lambda (n5256@foo-rtd) ((lambda (n5258@foo-rcd) ((lambda (n5260@protocol) ((lambda (n5262@make-foo) ((lambda (n5264@fields) ((lambda (n5266@idx*) ((lambda (n5268@foo-x*) ((lambda (n5270@set-foo-x!*) ((lambda (n5272@set-foo-idx*) ((lambda (n5274@foo?) ((lambda (n5276@foo-rtd-code) ((lambda (n5278@foo-rcd-code) ((lambda (n5280@protocol-code) ((lambda () (n2690@bless (cons 'begin (cons (list 'define n5256@foo-rtd n5276@foo-rtd-code) (cons (list 'define n5260@protocol n5280@protocol-code) (cons (list 'define n5258@foo-rcd n5278@foo-rcd-code) (cons (list 'define-syntax n5254@foo (list 'list ''$rtd (list 'syntax n5256@foo-rtd) (list 'syntax n5258@foo-rcd))) (cons (list 'define n5274@foo? (list 'record-predicate n5256@foo-rtd)) (cons (list 'define n5262@make-foo (list 'record-constructor n5258@foo-rcd)) (append (map (lambda (n5282@foo-x n5283@idx) (list 'define n5282@foo-x (list 'record-accessor n5256@foo-rtd n5283@idx))) n5268@foo-x* n5266@idx*) (map (lambda (n5286@set-foo-x! n5287@idx) (list 'define n5286@set-foo-x! (list 'record-mutator n5256@foo-rtd n5287@idx))) n5270@set-foo-x!* n5272@set-foo-idx*))))))))))))) (n5195@get-protocol-code n5251@clause*))) (n5193@foo-rcd-code n5251@clause* n5256@foo-rtd n5260@protocol (n5191@parent-rcd-code n5251@clause*)))) (n5187@foo-rtd-code n5254@foo n5251@clause* (n5189@parent-rtd-code n5251@clause*)))) (n5183@get-record-predicate-name n5250@namespec))) (n5199@get-mutator-indices n5264@fields))) (n5201@get-mutators n5254@foo n5264@fields))) (n5203@get-accessors n5254@foo n5264@fields))) (n5205@enumerate n5264@fields))) (n5197@get-fields n5251@clause*))) (n5181@get-record-constructor-name n5250@namespec))) (n1151@n915@gensym))) (n1151@n915@gensym))) (n1151@n915@gensym))) (n5179@get-record-name n5250@namespec)))) (set! n5209@verify-clauses (lambda (n5218@x n5219@cls*) ((lambda (n5223@valid-kwds n5225@free-id-member?) (begin (set! n5223@valid-kwds (map n2690@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! n5225@free-id-member? (lambda (n5246@x n5247@ls) (and (pair? n5247@ls) (or (n2275@free-id=? n5246@x (car n5247@ls)) (n5225@free-id-member? n5246@x (cdr n5247@ls)))))) ((letrec ((n5226@f (lambda (n5228@cls* n5229@seen*) (if (not (null? n5228@cls*)) ((lambda (n5232@t) ((lambda (n5234@ls/false) (if n5234@ls/false (apply (lambda (n5236@kwd n5237@rest) (if (or (not (n2267@id? n5236@kwd)) (not (n5225@free-id-member? n5236@kwd n5223@valid-kwds))) (n2997@syntax-violation '#f '"not a valid define-record-type keyword" n5236@kwd) (if (n2281@bound-id-member? n5236@kwd n5229@seen*) (n2997@syntax-violation '#f '"duplicate use of keyword " n5218@x n5236@kwd) (n5226@f (cdr n5228@cls*) (cons n5236@kwd n5229@seen*))))) n5234@ls/false) ((lambda (n5240@t) ((lambda (n5242@ls/false) (if n5242@ls/false (apply (lambda (n5244@cls) (n2997@syntax-violation '#f '"malformed define-record-type clause" n5244@cls)) n5242@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5240@t))) (n2764@syntax-dispatch n5240@t 'any))) n5232@t))) (n2764@syntax-dispatch n5232@t '(any . any)))) (car n5228@cls*)) (void))))) n5226@f) n5219@cls* '()))) '#f '#f))) ((lambda (n5210@t) ((lambda (n5212@ls/false) (if n5212@ls/false (apply (lambda (n5214@namespec n5215@clause*) (begin (n5209@verify-clauses n5174@x n5215@clause*) (n5207@do-define-record n5214@namespec n5215@clause*))) n5212@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5210@t))) (n2764@syntax-dispatch n5210@t '(_ any . each-any)))) n5174@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! n2754@define-condition-type-macro (lambda (n5682@x) ((lambda (n5685@mkname) (begin (set! n5685@mkname (lambda (n5730@name n5731@suffix) (n3001@datum->syntax n5730@name (string->symbol (string-append (symbol->string (n3003@syntax->datum n5730@name)) n5731@suffix))))) ((lambda (n5686@t) ((lambda (n5688@ls/false) (if (and n5688@ls/false (apply (lambda (n5690@ctxt n5691@name n5692@super n5693@constructor n5694@predicate n5695@field* n5696@accessor*) (and (n2267@id? n5691@name) (n2267@id? n5692@super) (n2267@id? n5693@constructor) (n2267@id? n5694@predicate) (for-all n2267@id? n5695@field*) (for-all n2267@id? n5696@accessor*))) n5688@ls/false)) (apply (lambda (n5704@ctxt n5705@name n5706@super n5707@constructor n5708@predicate n5709@field* n5710@accessor*) ((lambda (n5718@aux-accessor*) (n2690@bless (cons 'begin (cons (cons 'define-record-type (cons (list n5705@name n5707@constructor (n1151@n915@gensym)) (cons (list 'parent n5706@super) (cons (cons 'fields (map (lambda (n5720@field n5721@aux) (list 'immutable n5720@field n5721@aux)) n5709@field* n5718@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define n5708@predicate (list 'condition-predicate (list 'record-type-descriptor n5705@name))) (map (lambda (n5724@accessor n5725@aux) (list 'define n5724@accessor (list 'condition-accessor (list 'record-type-descriptor n5705@name) n5725@aux))) n5710@accessor* n5718@aux-accessor*)))))) (map (lambda (n5728@x) (n1151@n915@gensym)) n5710@accessor*))) n5688@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5686@t))) (n2764@syntax-dispatch n5686@t '(any any any any any . #(each (any any)))))) n5682@x))) '#f))) (set! n2756@incorrect-usage-macro (lambda (n5734@e) (n2997@syntax-violation '#f '"incorrect usage of auxiliary keyword" n5734@e))) (set! n2758@parameterize-macro (lambda (n5736@e) ((lambda (n5738@t) ((lambda (n5740@ls/false) (if n5740@ls/false (apply (lambda (n5742@b n5743@b*) (n2690@bless (cons 'let (cons '() (cons n5742@b n5743@b*))))) n5740@ls/false) ((lambda (n5746@t) ((lambda (n5748@ls/false) (if n5748@ls/false (apply (lambda (n5750@olhs* n5751@orhs* n5752@b n5753@b*) ((lambda (n5758@lhs* n5759@rhs*) (n2690@bless (cons (list 'lambda (append n5758@lhs* n5759@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (n5762@lhs n5763@rhs) (list 'let (list (list 't (list n5762@lhs))) (list n5762@lhs n5763@rhs) (cons 'set! (cons n5763@rhs '(t))))) n5758@lhs* n5759@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons n5752@b n5753@b*))) '(swap)))))) (append n5750@olhs* n5751@orhs*)))) (n2979@generate-temporaries n5750@olhs*) (n2979@generate-temporaries n5751@orhs*))) n5748@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5746@t))) (n2764@syntax-dispatch n5746@t '(_ #(each (any any)) any . each-any)))) n5738@t))) (n2764@syntax-dispatch n5738@t '(_ () any . each-any)))) n5736@e))) (set! n2760@foreign-call-transformer (lambda (n5766@e n5767@r n5768@mr) ((lambda (n5772@t) ((lambda (n5774@ls/false) (if n5774@ls/false (apply (lambda (n5776@name n5777@arg*) (cons 'foreign-call (cons (n2798@chi-expr n5776@name n5767@r n5768@mr) (n2794@chi-expr* n5777@arg* n5767@r n5768@mr)))) n5774@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5772@t))) (n2764@syntax-dispatch n5772@t '(_ any . each-any)))) n5766@e))) (set! n2762@convert-pattern (lambda (n5780@pattern n5781@keys) ((lambda (n5785@cvt* n5787@cvt) (begin (set! n5785@cvt* (lambda (n5930@p* n5931@n n5932@ids) (if (null? n5930@p*) (values '() n5932@ids) (call-with-values (lambda () (n5785@cvt* (cdr n5930@p*) n5931@n n5932@ids)) (lambda (n5938@n5936@y n5939@n5937@ids) ((lambda (n5942@ids n5943@y) (call-with-values (lambda () (n5787@cvt (car n5930@p*) n5931@n n5942@ids)) (lambda (n5948@n5946@x n5949@n5947@ids) ((lambda (n5952@ids n5953@x) (values (cons n5953@x n5943@y) n5952@ids)) n5949@n5947@ids n5948@n5946@x)))) n5939@n5937@ids n5938@n5936@y)))))) (set! n5787@cvt (lambda (n5788@p n5789@n n5790@ids) ((lambda (n5794@t) ((lambda (n5796@ls/false) (if (and n5796@ls/false (apply (lambda (n5798@id) (n2267@id? n5798@id)) n5796@ls/false)) (apply (lambda (n5800@id) (if (n2281@bound-id-member? n5788@p n5781@keys) (values (vector 'free-id n5788@p) n5790@ids) (if (n2275@free-id=? n5788@p (n2646@scheme-stx '_)) (values '_ n5790@ids) (values 'any (cons (cons n5788@p n5789@n) n5790@ids))))) n5796@ls/false) ((lambda (n5802@t) ((lambda (n5804@ls/false) (if (and n5804@ls/false (apply (lambda (n5806@p n5807@dots) (n2766@ellipsis? n5807@dots)) n5804@ls/false)) (apply (lambda (n5810@p n5811@dots) (call-with-values (lambda () (n5787@cvt n5810@p (+ n5789@n '1) n5790@ids)) (lambda (n5816@n5814@p n5817@n5815@ids) ((lambda (n5820@ids n5821@p) (values (if (eq? n5821@p 'any) 'each-any (vector 'each n5821@p)) n5820@ids)) n5817@n5815@ids n5816@n5814@p)))) n5804@ls/false) ((lambda (n5824@t) ((lambda (n5826@ls/false) (if (and n5826@ls/false (apply (lambda (n5828@x n5829@dots n5830@ys n5831@z) (n2766@ellipsis? n5829@dots)) n5826@ls/false)) (apply (lambda (n5836@x n5837@dots n5838@ys n5839@z) (call-with-values (lambda () (n5787@cvt n5839@z n5789@n n5790@ids)) (lambda (n5846@n5844@z n5847@n5845@ids) ((lambda (n5850@ids n5851@z) (call-with-values (lambda () (n5785@cvt* n5838@ys n5789@n n5850@ids)) (lambda (n5856@n5854@ys n5857@n5855@ids) ((lambda (n5860@ids n5861@ys) (call-with-values (lambda () (n5787@cvt n5836@x (+ n5789@n '1) n5860@ids)) (lambda (n5866@n5864@x n5867@n5865@ids) ((lambda (n5870@ids n5871@x) (values (vector 'each+ n5871@x (reverse n5861@ys) n5851@z) n5870@ids)) n5867@n5865@ids n5866@n5864@x)))) n5857@n5855@ids n5856@n5854@ys)))) n5847@n5845@ids n5846@n5844@z)))) n5826@ls/false) ((lambda (n5874@t) ((lambda (n5876@ls/false) (if n5876@ls/false (apply (lambda (n5878@x n5879@y) (call-with-values (lambda () (n5787@cvt n5879@y n5789@n n5790@ids)) (lambda (n5884@n5882@y n5885@n5883@ids) ((lambda (n5888@ids n5889@y) (call-with-values (lambda () (n5787@cvt n5878@x n5789@n n5888@ids)) (lambda (n5894@n5892@x n5895@n5893@ids) ((lambda (n5898@ids n5899@x) (values (cons n5899@x n5889@y) n5898@ids)) n5895@n5893@ids n5894@n5892@x)))) n5885@n5883@ids n5884@n5882@y)))) n5876@ls/false) ((lambda (n5902@t) ((lambda (n5904@ls/false) (if n5904@ls/false (apply (lambda () (values '() n5790@ids)) n5904@ls/false) ((lambda (n5906@t) ((lambda (n5908@ls/false) (if (and n5908@ls/false (apply (lambda (n5910@p) (not (n2211@stx? n5910@p))) n5908@ls/false)) (apply (lambda (n5912@p) (call-with-values (lambda () (n5787@cvt n5912@p n5789@n n5790@ids)) (lambda (n5916@n5914@p n5917@n5915@ids) ((lambda (n5920@ids n5921@p) (values (vector 'vector n5921@p) n5920@ids)) n5917@n5915@ids n5916@n5914@p)))) n5908@ls/false) ((lambda (n5924@t) ((lambda (n5926@ls/false) (if n5926@ls/false (apply (lambda (n5928@datum) (values (vector 'atom (n2289@stx->datum n5928@datum)) n5790@ids)) n5926@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n5924@t))) (n2764@syntax-dispatch n5924@t 'any))) n5906@t))) (n2764@syntax-dispatch n5906@t '#(vector each-any)))) n5902@t))) (n2764@syntax-dispatch n5902@t '()))) n5874@t))) (n2764@syntax-dispatch n5874@t '(any . any)))) n5824@t))) (n2764@syntax-dispatch n5824@t '(any any . #(each+ any () any))))) n5802@t))) (n2764@syntax-dispatch n5802@t '(any any)))) n5794@t))) (n2764@syntax-dispatch n5794@t 'any))) n5788@p))) (n5787@cvt n5780@pattern '0 '()))) '#f '#f))) (set! n2764@syntax-dispatch ((lambda () ((lambda (n5957@stx^ n5959@match-each n5961@match-each+ n5963@match-each-any n5965@match-empty n5967@combine n5969@match* n5971@match) (begin (set! n5957@stx^ (lambda (n6158@e n6159@m* n6160@s* n6161@ae*) (if (and (null? n6159@m*) (null? n6160@s*) (null? n6161@ae*)) n6158@e (n2243@mkstx n6158@e n6159@m* n6160@s* n6161@ae*)))) (set! n5959@match-each (lambda (n6129@e n6130@p n6131@m* n6132@s* n6133@ae*) (if (pair? n6129@e) ((lambda (n6139@first) (and n6139@first ((lambda (n6141@rest) (and n6141@rest (cons n6139@first n6141@rest))) (n5959@match-each (cdr n6129@e) n6130@p n6131@m* n6132@s* n6133@ae*)))) (n5971@match (car n6129@e) n6130@p n6131@m* n6132@s* n6133@ae* '())) (if (null? n6129@e) '() (if (n2211@stx? n6129@e) (and (not (n2137@top-marked? n6131@m*)) (call-with-values (lambda () (n2241@join-wraps n6131@m* n6132@s* n6133@ae* n6129@e)) (lambda (n6146@n6143@m* n6147@n6144@s* n6148@n6145@ae*) ((lambda (n6152@ae* n6153@s* n6154@m*) (n5959@match-each (n2215@stx-expr n6129@e) n6130@p n6154@m* n6153@s* n6152@ae*)) n6148@n6145@ae* n6147@n6144@s* n6146@n6143@m*)))) (if (n1154@n921@annotation? n6129@e) (n5959@match-each (n1156@n925@annotation-expression n6129@e) n6130@p n6131@m* n6132@s* n6133@ae*) '#f)))))) (set! n5961@match-each+ (lambda (n6071@e n6072@x-pat n6073@y-pat n6074@z-pat n6075@m* n6076@s* n6077@ae* n6078@r) ((letrec ((n6087@f (lambda (n6089@e n6090@m* n6091@s* n6092@ae*) (if (pair? n6089@e) (call-with-values (lambda () (n6087@f (cdr n6089@e) n6090@m* n6091@s* n6092@ae*)) (lambda (n6100@n6097@xr* n6101@n6098@y-pat n6102@n6099@r) ((lambda (n6106@r n6107@y-pat n6108@xr*) (if n6106@r (if (null? n6107@y-pat) ((lambda (n6112@xr) (if n6112@xr (values (cons n6112@xr n6108@xr*) n6107@y-pat n6106@r) (values '#f '#f '#f))) (n5971@match (car n6089@e) n6072@x-pat n6090@m* n6091@s* n6092@ae* '())) (values '() (cdr n6107@y-pat) (n5971@match (car n6089@e) (car n6107@y-pat) n6090@m* n6091@s* n6092@ae* n6106@r))) (values '#f '#f '#f))) n6102@n6099@r n6101@n6098@y-pat n6100@n6097@xr*))) (if (n2211@stx? n6089@e) (if (n2137@top-marked? n6090@m*) (values '() n6073@y-pat (n5971@match n6089@e n6074@z-pat n6090@m* n6091@s* n6092@ae* n6078@r)) (call-with-values (lambda () (n2241@join-wraps n6090@m* n6091@s* n6092@ae* n6089@e)) (lambda (n6117@n6114@m* n6118@n6115@s* n6119@n6116@ae*) ((lambda (n6123@ae* n6124@s* n6125@m*) (n6087@f (n2215@stx-expr n6089@e) n6125@m* n6124@s* n6123@ae*)) n6119@n6116@ae* n6118@n6115@s* n6117@n6114@m*)))) (if (n1154@n921@annotation? n6089@e) (n6087@f (n1156@n925@annotation-expression n6089@e) n6090@m* n6091@s* n6092@ae*) (values '() n6073@y-pat (n5971@match n6089@e n6074@z-pat n6090@m* n6091@s* n6092@ae* n6078@r)))))))) n6087@f) n6071@e n6075@m* n6076@s* n6077@ae*))) (set! n5963@match-each-any (lambda (n6046@e n6047@m* n6048@s* n6049@ae*) (if (pair? n6046@e) ((lambda (n6054@l) (and n6054@l (cons (n5957@stx^ (car n6046@e) n6047@m* n6048@s* n6049@ae*) n6054@l))) (n5963@match-each-any (cdr n6046@e) n6047@m* n6048@s* n6049@ae*)) (if (null? n6046@e) '() (if (n2211@stx? n6046@e) (and (not (n2137@top-marked? n6047@m*)) (call-with-values (lambda () (n2241@join-wraps n6047@m* n6048@s* n6049@ae* n6046@e)) (lambda (n6059@n6056@m* n6060@n6057@s* n6061@n6058@ae*) ((lambda (n6065@ae* n6066@s* n6067@m*) (n5963@match-each-any (n2215@stx-expr n6046@e) n6067@m* n6066@s* n6065@ae*)) n6061@n6058@ae* n6060@n6057@s* n6059@n6056@m*)))) (if (n1154@n921@annotation? n6046@e) (n5963@match-each-any (n1156@n925@annotation-expression n6046@e) n6047@m* n6048@s* n6049@ae*) '#f)))))) (set! n5965@match-empty (lambda (n6040@p n6041@r) (if (null? n6040@p) n6041@r (if (eq? n6040@p '_) n6041@r (if (eq? n6040@p 'any) (cons '() n6041@r) (if (pair? n6040@p) (n5965@match-empty (car n6040@p) (n5965@match-empty (cdr n6040@p) n6041@r)) (if (eq? n6040@p 'each-any) (cons '() n6041@r) ((lambda (n6044@t) (if (memv n6044@t '(each)) (n5965@match-empty (vector-ref n6040@p '1) n6041@r) (if (memv n6044@t '(each+)) (n5965@match-empty (vector-ref n6040@p '1) (n5965@match-empty (reverse (vector-ref n6040@p '2)) (n5965@match-empty (vector-ref n6040@p '3) n6041@r))) (if (memv n6044@t '(free-id atom)) n6041@r (if (memv n6044@t '(scheme-id atom)) n6041@r (if (memv n6044@t '(vector)) (n5965@match-empty (vector-ref n6040@p '1) n6041@r) (assertion-violation 'syntax-dispatch '"invalid pattern" n6040@p))))))) (vector-ref n6040@p '0))))))))) (set! n5967@combine (lambda (n6036@r* n6037@r) (if (null? (car n6036@r*)) n6037@r (cons (map car n6036@r*) (n5967@combine (map cdr n6036@r*) n6037@r))))) (set! n5969@match* (lambda (n6003@e n6004@p n6005@m* n6006@s* n6007@ae* n6008@r) (if (null? n6004@p) (and (null? n6003@e) n6008@r) (if (pair? n6004@p) (and (pair? n6003@e) (n5971@match (car n6003@e) (car n6004@p) n6005@m* n6006@s* n6007@ae* (n5971@match (cdr n6003@e) (cdr n6004@p) n6005@m* n6006@s* n6007@ae* n6008@r))) (if (eq? n6004@p 'each-any) ((lambda (n6015@l) (and n6015@l (cons n6015@l n6008@r))) (n5963@match-each-any n6003@e n6005@m* n6006@s* n6007@ae*)) ((lambda (n6017@t) (if (memv n6017@t '(each)) (if (null? n6003@e) (n5965@match-empty (vector-ref n6004@p '1) n6008@r) ((lambda (n6019@r*) (and n6019@r* (n5967@combine n6019@r* n6008@r))) (n5959@match-each n6003@e (vector-ref n6004@p '1) n6005@m* n6006@s* n6007@ae*))) (if (memv n6017@t '(free-id)) (and (symbol? n6003@e) (n2137@top-marked? n6005@m*) (n2275@free-id=? (n5957@stx^ n6003@e n6005@m* n6006@s* n6007@ae*) (vector-ref n6004@p '1)) n6008@r) (if (memv n6017@t '(scheme-id)) (and (symbol? n6003@e) (n2137@top-marked? n6005@m*) (n2275@free-id=? (n5957@stx^ n6003@e n6005@m* n6006@s* n6007@ae*) (n2646@scheme-stx (vector-ref n6004@p '1))) n6008@r) (if (memv n6017@t '(each+)) (call-with-values (lambda () (n5961@match-each+ n6003@e (vector-ref n6004@p '1) (vector-ref n6004@p '2) (vector-ref n6004@p '3) n6005@m* n6006@s* n6007@ae* n6008@r)) (lambda (n6024@n6021@xr* n6025@n6022@y-pat n6026@n6023@r) ((lambda (n6030@r n6031@y-pat n6032@xr*) (and n6030@r (null? n6031@y-pat) (if (null? n6032@xr*) (n5965@match-empty (vector-ref n6004@p '1) n6030@r) (n5967@combine n6032@xr* n6030@r)))) n6026@n6023@r n6025@n6022@y-pat n6024@n6021@xr*))) (if (memv n6017@t '(atom)) (and (fast-equal? (vector-ref n6004@p '1) (n2287@strip n6003@e n6005@m*)) n6008@r) (if (memv n6017@t '(vector)) (and (vector? n6003@e) (n5971@match (vector->list n6003@e) (vector-ref n6004@p '1) n6005@m* n6006@s* n6007@ae* n6008@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" n6004@p)))))))) (vector-ref n6004@p '0))))))) (set! n5971@match (lambda (n5976@e n5977@p n5978@m* n5979@s* n5980@ae* n5981@r) (if (not n5981@r) '#f (if (eq? n5977@p '_) n5981@r (if (eq? n5977@p 'any) (cons (n5957@stx^ n5976@e n5978@m* n5979@s* n5980@ae*) n5981@r) (if (n2211@stx? n5976@e) (and (not (n2137@top-marked? n5978@m*)) (call-with-values (lambda () (n2241@join-wraps n5978@m* n5979@s* n5980@ae* n5976@e)) (lambda (n5991@n5988@m* n5992@n5989@s* n5993@n5990@ae*) ((lambda (n5997@ae* n5998@s* n5999@m*) (n5971@match (n2215@stx-expr n5976@e) n5977@p n5999@m* n5998@s* n5997@ae* n5981@r)) n5993@n5990@ae* n5992@n5989@s* n5991@n5988@m*)))) (if (n1154@n921@annotation? n5976@e) (n5971@match (n1156@n925@annotation-expression n5976@e) n5977@p n5978@m* n5979@s* n5980@ae* n5981@r) (n5969@match* n5976@e n5977@p n5978@m* n5979@s* n5980@ae* n5981@r)))))))) (lambda (n5972@e n5973@p) (n5971@match n5972@e n5973@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! n2766@ellipsis? (lambda (n6166@x) (and (n2267@id? n6166@x) (n2275@free-id=? n6166@x (n2646@scheme-stx '...))))) (set! n2768@underscore? (lambda (n6168@x) (and (n2267@id? n6168@x) (n2275@free-id=? n6168@x (n2646@scheme-stx '_))))) (set! n2770@verify-literals (lambda (n6170@lits n6171@expr) (for-each (lambda (n6174@x) (if (or (not (n2267@id? n6174@x)) (n2766@ellipsis? n6174@x) (n2768@underscore? n6174@x)) (n2997@syntax-violation '#f '"invalid literal" n6171@expr n6174@x) (void))) n6170@lits))) (set! n2772@syntax-case-transformer ((lambda () ((lambda (n6177@build-dispatch-call n6179@invalid-ids-error n6181@gen-clause n6183@gen-syntax-case) (begin (set! n6177@build-dispatch-call (lambda (n6288@pvars n6289@expr n6290@y n6291@r n6292@mr) ((lambda (n6298@ids n6299@levels) ((lambda (n6302@labels n6303@new-vars) ((lambda (n6306@body) (list '(primitive apply) (n2103@n1913@build-lambda '#f n6303@new-vars n6306@body) n6290@y)) (n2798@chi-expr (n2247@add-subst (n2198@make-full-rib n6298@ids n6302@labels) n6289@expr) (append (map (lambda (n6308@label n6309@var n6310@level) (cons n6308@label (n2299@make-binding 'syntax (cons n6309@var n6310@level)))) n6302@labels n6303@new-vars (map cdr n6288@pvars)) n6291@r) n6292@mr))) (map n2143@gen-label n6298@ids) (map n2139@gen-lexical n6298@ids))) (map car n6288@pvars) (map cdr n6288@pvars)))) (set! n6179@invalid-ids-error (lambda (n6276@id* n6277@e n6278@class) ((letrec ((n6282@find (lambda (n6284@id* n6285@ok*) (if (null? n6284@id*) (n2997@syntax-violation '#f '"invalid syntax" n6277@e) (if (n2267@id? (car n6284@id*)) (if (n2281@bound-id-member? (car n6284@id*) n6285@ok*) (n2993@syntax-error (car n6284@id*) '"duplicate " n6278@class) (n6282@find (cdr n6284@id*) (cons (car n6284@id*) n6285@ok*))) (n2993@syntax-error (car n6284@id*) '"invalid " n6278@class)))))) n6282@find) n6276@id* '()))) (set! n6181@gen-clause (lambda (n6238@x n6239@keys n6240@clauses n6241@r n6242@mr n6243@pat n6244@fender n6245@expr) (call-with-values (lambda () (n2762@convert-pattern n6243@pat n6239@keys)) (lambda (n6256@n6254@p n6257@n6255@pvars) ((lambda (n6260@pvars n6261@p) (if (not (n2279@distinct-bound-ids? (map car n6260@pvars))) (n6179@invalid-ids-error (map car n6260@pvars) n6243@pat '"pattern variable") (if (not (for-all (lambda (n6264@x) (not (n2766@ellipsis? (car n6264@x)))) n6260@pvars)) (n2997@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" n6243@pat) ((lambda (n6266@y) ((lambda (n6268@test) ((lambda (n6270@conseq) ((lambda (n6272@altern) (list (n2103@n1913@build-lambda '#f (list n6266@y) (list 'if n6268@test n6270@conseq n6272@altern)) (list '(primitive syntax-dispatch) n6238@x (list 'quote n6261@p)))) (n6183@gen-syntax-case n6238@x n6239@keys n6240@clauses n6241@r n6242@mr))) (n6177@build-dispatch-call n6260@pvars n6245@expr n6266@y n6241@r n6242@mr))) (if (eq? n6244@fender '#t) n6266@y ((lambda (n6274@call) (list 'if n6266@y n6274@call (list 'quote '#f))) (n6177@build-dispatch-call n6260@pvars n6244@fender n6266@y n6241@r n6242@mr))))) (n2139@gen-lexical 'tmp))))) n6257@n6255@pvars n6256@n6254@p))))) (set! n6183@gen-syntax-case (lambda (n6204@x n6205@keys n6206@clauses n6207@r n6208@mr) (if (null? n6206@clauses) (list '(primitive syntax-error) n6204@x) ((lambda (n6214@t) ((lambda (n6216@ls/false) (if n6216@ls/false (apply (lambda (n6218@pat n6219@expr) (if (and (n2267@id? n6218@pat) (not (n2281@bound-id-member? n6218@pat n6205@keys)) (not (n2766@ellipsis? n6218@pat))) (if (n2275@free-id=? n6218@pat (n2646@scheme-stx '_)) (n2798@chi-expr n6219@expr n6207@r n6208@mr) ((lambda (n6222@lab n6223@lex) ((lambda (n6226@body) (list (n2103@n1913@build-lambda '#f (list n6223@lex) n6226@body) n6204@x)) (n2798@chi-expr (n2247@add-subst (n2198@make-full-rib (list n6218@pat) (list n6222@lab)) n6219@expr) (cons (cons n6222@lab (n2299@make-binding 'syntax (cons n6223@lex '0))) n6207@r) n6208@mr))) (n2143@gen-label n6218@pat) (n2139@gen-lexical n6218@pat))) (n6181@gen-clause n6204@x n6205@keys (cdr n6206@clauses) n6207@r n6208@mr n6218@pat '#t n6219@expr))) n6216@ls/false) ((lambda (n6228@t) ((lambda (n6230@ls/false) (if n6230@ls/false (apply (lambda (n6232@pat n6233@fender n6234@expr) (n6181@gen-clause n6204@x n6205@keys (cdr n6206@clauses) n6207@r n6208@mr n6232@pat n6233@fender n6234@expr)) n6230@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n6228@t))) (n2764@syntax-dispatch n6228@t '(any any any)))) n6214@t))) (n2764@syntax-dispatch n6214@t '(any any)))) (car n6206@clauses))))) (lambda (n6184@e n6185@r n6186@mr) ((lambda (n6190@t) ((lambda (n6192@ls/false) (if n6192@ls/false (apply (lambda (n6194@expr n6195@keys n6196@clauses) (begin (n2770@verify-literals n6195@keys n6184@e) ((lambda (n6200@x) ((lambda (n6202@body) (list (n2103@n1913@build-lambda '#f (list n6200@x) n6202@body) (n2798@chi-expr n6194@expr n6185@r n6186@mr))) (n6183@gen-syntax-case n6200@x n6195@keys n6196@clauses n6185@r n6186@mr))) (n2139@gen-lexical 'tmp)))) n6192@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n6190@t))) (n2764@syntax-dispatch n6190@t '(_ any each-any . each-any)))) n6184@e)))) '#f '#f '#f '#f)))) (set! n2774@ellipsis-map (lambda (n6314@proc n6315@ls . n6318@ls*) ((lambda (n6321@who) (begin (set! n6321@who '...) (begin (if (not (list? n6315@ls)) (assertion-violation n6321@who '"not a list" n6315@ls) (void)) (if (not (null? n6318@ls*)) ((lambda (n6322@n) (for-each (lambda (n6324@x) (begin (if (not (list? n6324@x)) (assertion-violation n6321@who '"not a list" n6324@x) (void)) (if (not (= (length n6324@x) n6322@n)) (assertion-violation n6321@who '"length mismatch" n6315@ls n6324@x) (void)))) n6318@ls*)) (length n6315@ls)) (void)) (apply map n6314@proc n6315@ls n6318@ls*)))) '#f))) (set! n2776@syntax-transformer ((lambda () ((lambda (n6327@gen-syntax n6329@gen-ref n6331@gen-append n6333@gen-mappend n6335@gen-map n6337@gen-cons n6339@gen-vector n6341@regen) (begin (set! n6327@gen-syntax (lambda (n6442@src n6443@e n6444@r n6445@maps n6446@ellipsis? n6447@vec?) ((lambda (n6454@t) ((lambda (n6456@ls/false) (if (and n6456@ls/false (apply (lambda (n6458@dots) (n6446@ellipsis? n6458@dots)) n6456@ls/false)) (apply (lambda (n6460@dots) (n2997@syntax-violation '#f '"misplaced ellipsis in syntax form" n6442@src)) n6456@ls/false) ((lambda (n6462@t) ((lambda (n6464@ls/false) (if (and n6464@ls/false (apply (lambda (n6466@id) (n2267@id? n6466@id)) n6464@ls/false)) (apply (lambda (n6468@id) ((lambda (n6470@label) ((lambda (n6472@b) ((lambda () (if (eq? (n2301@binding-type n6472@b) 'syntax) (call-with-values (lambda () ((lambda (n6476@var.lev) (n6329@gen-ref n6442@src (car n6476@var.lev) (cdr n6476@var.lev) n6445@maps)) (n2303@binding-value n6472@b))) (lambda (n6478@n6474@var n6479@n6475@maps) ((lambda (n6482@maps n6483@var) (values (list 'ref n6483@var) n6482@maps)) n6479@n6475@maps n6478@n6474@var))) (values (list 'quote n6443@e) n6445@maps))))) (n2297@label->binding n6470@label n6444@r))) (n2293@id->label n6443@e))) n6464@ls/false) ((lambda (n6486@t) ((lambda (n6488@ls/false) (if (and n6488@ls/false (apply (lambda (n6490@dots n6491@e) (n6446@ellipsis? n6490@dots)) n6488@ls/false)) (apply (lambda (n6494@dots n6495@e) (if n6447@vec? (n2997@syntax-violation '#f '"misplaced ellipsis in syntax form" n6442@src) (n6327@gen-syntax n6442@src n6495@e n6444@r n6445@maps (lambda (n6498@x) '#f) '#f))) n6488@ls/false) ((lambda (n6500@t) ((lambda (n6502@ls/false) (if (and n6502@ls/false (apply (lambda (n6504@x n6505@dots n6506@y) (n6446@ellipsis? n6505@dots)) n6502@ls/false)) (apply (lambda (n6510@x n6511@dots n6512@y) ((letrec ((n6516@f (lambda (n6518@y n6519@k) ((lambda (n6522@t) ((lambda (n6524@ls/false) (if n6524@ls/false (apply (lambda () (n6519@k n6445@maps)) n6524@ls/false) ((lambda (n6526@t) ((lambda (n6528@ls/false) (if (and n6528@ls/false (apply (lambda (n6530@dots n6531@y) (n6446@ellipsis? n6530@dots)) n6528@ls/false)) (apply (lambda (n6534@dots n6535@y) (n6516@f n6535@y (lambda (n6538@maps) (call-with-values (lambda () (n6519@k (cons '() n6538@maps))) (lambda (n6542@n6540@x n6543@n6541@maps) ((lambda (n6546@maps n6547@x) (if (null? (car n6546@maps)) (n2997@syntax-violation '#f '"extra ellipsis in syntax form" n6442@src) (values (n6333@gen-mappend n6547@x (car n6546@maps)) (cdr n6546@maps)))) n6543@n6541@maps n6542@n6540@x)))))) n6528@ls/false) ((lambda (n6550@t) ((lambda (n6552@ls/false) (if n6552@ls/false (apply (lambda () (call-with-values (lambda () (n6327@gen-syntax n6442@src n6518@y n6444@r n6445@maps n6446@ellipsis? n6447@vec?)) (lambda (n6556@n6554@y n6557@n6555@maps) ((lambda (n6560@maps n6561@y) (call-with-values (lambda () (n6519@k n6560@maps)) (lambda (n6566@n6564@x n6567@n6565@maps) ((lambda (n6570@maps n6571@x) (values (n6331@gen-append n6571@x n6561@y) n6570@maps)) n6567@n6565@maps n6566@n6564@x)))) n6557@n6555@maps n6556@n6554@y)))) n6552@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n6550@t))) (n2764@syntax-dispatch n6550@t '_))) n6526@t))) (n2764@syntax-dispatch n6526@t '(any . any)))) n6522@t))) (n2764@syntax-dispatch n6522@t '()))) n6518@y)))) n6516@f) n6512@y (lambda (n6574@maps) (call-with-values (lambda () (n6327@gen-syntax n6442@src n6510@x n6444@r (cons '() n6574@maps) n6446@ellipsis? '#f)) (lambda (n6578@n6576@x n6579@n6577@maps) ((lambda (n6582@maps n6583@x) (if (null? (car n6582@maps)) (n2997@syntax-violation '#f '"extra ellipsis in syntax form" n6442@src) (values (n6335@gen-map n6583@x (car n6582@maps)) (cdr n6582@maps)))) n6579@n6577@maps n6578@n6576@x)))))) n6502@ls/false) ((lambda (n6586@t) ((lambda (n6588@ls/false) (if n6588@ls/false (apply (lambda (n6590@x n6591@y) (call-with-values (lambda () (n6327@gen-syntax n6442@src n6590@x n6444@r n6445@maps n6446@ellipsis? '#f)) (lambda (n6596@n6594@xnew n6597@n6595@maps) ((lambda (n6600@maps n6601@xnew) (call-with-values (lambda () (n6327@gen-syntax n6442@src n6591@y n6444@r n6600@maps n6446@ellipsis? n6447@vec?)) (lambda (n6606@n6604@ynew n6607@n6605@maps) ((lambda (n6610@maps n6611@ynew) (values (n6337@gen-cons n6443@e n6590@x n6591@y n6601@xnew n6611@ynew) n6610@maps)) n6607@n6605@maps n6606@n6604@ynew)))) n6597@n6595@maps n6596@n6594@xnew)))) n6588@ls/false) ((lambda (n6614@t) ((lambda (n6616@ls/false) (if n6616@ls/false (apply (lambda (n6618@ls) (call-with-values (lambda () (n6327@gen-syntax n6442@src n6618@ls n6444@r n6445@maps n6446@ellipsis? '#t)) (lambda (n6622@n6620@lsnew n6623@n6621@maps) ((lambda (n6626@maps n6627@lsnew) (values (n6339@gen-vector n6443@e n6618@ls n6627@lsnew) n6626@maps)) n6623@n6621@maps n6622@n6620@lsnew)))) n6616@ls/false) ((lambda (n6630@t) ((lambda (n6632@ls/false) (if n6632@ls/false (apply (lambda () (values (list 'quote n6443@e) n6445@maps)) n6632@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n6630@t))) (n2764@syntax-dispatch n6630@t '_))) n6614@t))) (n2764@syntax-dispatch n6614@t '#(vector each-any)))) n6586@t))) (n2764@syntax-dispatch n6586@t '(any . any)))) n6500@t))) (n2764@syntax-dispatch n6500@t '(any any . any)))) n6486@t))) (n2764@syntax-dispatch n6486@t '(any any)))) n6462@t))) (n2764@syntax-dispatch n6462@t 'any))) n6454@t))) (n2764@syntax-dispatch n6454@t 'any))) n6443@e))) (set! n6329@gen-ref (lambda (n6418@src n6419@var n6420@level n6421@maps) (if (= n6420@level '0) (values n6419@var n6421@maps) (if (null? n6421@maps) (n2997@syntax-violation '#f '"missing ellipsis in syntax form" n6418@src) (call-with-values (lambda () (n6329@gen-ref n6418@src n6419@var (- n6420@level '1) (cdr n6421@maps))) (lambda (n6428@n6426@outer-var n6429@n6427@outer-maps) ((lambda (n6432@outer-maps n6433@outer-var) ((lambda (n6436@t) (if n6436@t ((lambda (n6438@b) (values (cdr n6438@b) n6421@maps)) n6436@t) ((lambda (n6440@inner-var) (values n6440@inner-var (cons (cons (cons n6433@outer-var n6440@inner-var) (car n6421@maps)) n6432@outer-maps))) (n2139@gen-lexical 'tmp)))) (assq n6433@outer-var (car n6421@maps)))) n6429@n6427@outer-maps n6428@n6426@outer-var))))))) (set! n6331@gen-append (lambda (n6414@x n6415@y) (if (fast-equal? n6415@y ''()) n6414@x (list 'append n6414@x n6415@y)))) (set! n6333@gen-mappend (lambda (n6410@e n6411@map-env) (list 'apply '(primitive append) (n6335@gen-map n6410@e n6411@map-env)))) (set! n6335@gen-map (lambda (n6392@e n6393@map-env) ((lambda (n6396@formals n6397@actuals) (if (eq? (car n6392@e) 'ref) (car n6397@actuals) (if (for-all (lambda (n6400@x) (and (eq? (car n6400@x) 'ref) (memq (cadr n6400@x) n6396@formals))) (cdr n6392@e)) ((lambda (n6402@args) (cons 'map (cons (list 'primitive (car n6392@e)) n6402@args))) (map ((lambda (n6404@r) (lambda (n6406@x) (cdr (assq (cadr n6406@x) n6404@r)))) (map cons n6396@formals n6397@actuals)) (cdr n6392@e))) (cons* 'map (list 'lambda n6396@formals n6392@e) n6397@actuals)))) (map cdr n6393@map-env) (map (lambda (n6408@x) (list 'ref (car n6408@x))) n6393@map-env)))) (set! n6337@gen-cons (lambda (n6376@e n6377@x n6378@y n6379@xnew n6380@ynew) ((lambda (n6386@t) (if (memv n6386@t '(quote)) (if (eq? (car n6379@xnew) 'quote) ((lambda (n6388@xnew n6389@ynew) (if (and (eq? n6388@xnew n6377@x) (eq? n6389@ynew n6378@y)) (list 'quote n6376@e) (list 'quote (cons n6388@xnew n6389@ynew)))) (cadr n6379@xnew) (cadr n6380@ynew)) (if (null? (cadr n6380@ynew)) (list 'list n6379@xnew) (list 'cons n6379@xnew n6380@ynew))) (if (memv n6386@t '(list)) (cons 'list (cons n6379@xnew (cdr n6380@ynew))) (list 'cons n6379@xnew n6380@ynew)))) (car n6380@ynew)))) (set! n6339@gen-vector (lambda (n6370@e n6371@ls n6372@lsnew) (if (eq? (car n6372@lsnew) 'quote) (if (eq? (cadr n6372@lsnew) n6371@ls) (list 'quote n6370@e) (list 'quote (list->vector (cadr n6372@lsnew)))) (if (eq? (car n6372@lsnew) 'list) (cons 'vector (cdr n6372@lsnew)) (list 'list->vector n6372@lsnew))))) (set! n6341@regen (lambda (n6364@x) ((lambda (n6366@t) (if (memv n6366@t '(ref)) (cadr n6364@x) (if (memv n6366@t '(primitive)) (list 'primitive (cadr n6364@x)) (if (memv n6366@t '(quote)) (list 'quote (cadr n6364@x)) (if (memv n6366@t '(lambda)) (n2103@n1913@build-lambda '#f (cadr n6364@x) (n6341@regen (caddr n6364@x))) (if (memv n6366@t '(map)) ((lambda (n6368@ls) (cons '(primitive ellipsis-map) n6368@ls)) (map n6341@regen (cdr n6364@x))) (cons (list 'primitive (car n6364@x)) (map n6341@regen (cdr n6364@x))))))))) (car n6364@x)))) (lambda (n6342@e n6343@r n6344@mr) ((lambda (n6348@t) ((lambda (n6350@ls/false) (if n6350@ls/false (apply (lambda (n6352@x) (call-with-values (lambda () (n6327@gen-syntax n6342@e n6352@x n6343@r '() n2766@ellipsis? '#f)) (lambda (n6356@n6354@e n6357@n6355@maps) ((lambda (n6360@maps n6361@e) (n6341@regen n6361@e)) n6357@n6355@maps n6356@n6354@e)))) n6350@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n6348@t))) (n2764@syntax-dispatch n6348@t '(_ any)))) n6342@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! n2778@core-macro-transformer (lambda (n6634@name) ((lambda (n6636@t) (if (memv n6636@t '(quote)) n2684@quote-transformer (if (memv n6636@t '(lambda)) n2688@lambda-transformer (if (memv n6636@t '(case-lambda)) n2686@case-lambda-transformer (if (memv n6636@t '(letrec)) n2660@letrec-transformer (if (memv n6636@t '(letrec*)) n2662@letrec*-transformer (if (memv n6636@t '(if)) n2676@if-transformer (if (memv n6636@t '(and)) n2678@and-transformer (if (memv n6636@t '(or)) n2680@or-transformer (if (memv n6636@t '(foreign-call)) n2760@foreign-call-transformer (if (memv n6636@t '(syntax-case)) n2772@syntax-case-transformer (if (memv n6636@t '(syntax)) n2776@syntax-transformer (if (memv n6636@t '(type-descriptor)) n2666@type-descriptor-transformer (if (memv n6636@t '(record-type-descriptor)) n2668@record-type-descriptor-transformer (if (memv n6636@t '(record-constructor-descriptor)) n2670@record-constructor-descriptor-transformer (if (memv n6636@t '(fluid-let-syntax)) n2664@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" n6634@name))))))))))))))))) n6634@name))) (set! n2780@symbol-macro (lambda (n6638@x n6639@set) ((lambda (n6642@t) ((lambda (n6644@ls/false) (if (and n6644@ls/false (apply (lambda (n6646@name) (and (n2267@id? n6646@name) (memq (n2269@id->sym n6646@name) n6639@set))) n6644@ls/false)) (apply (lambda (n6648@name) (n2690@bless (list 'quote n6648@name))) n6644@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n6642@t))) (n2764@syntax-dispatch n6642@t '(_ any)))) n6638@x))) (set! n2782@macro-transformer (lambda (n6650@x) (if (procedure? n6650@x) n6650@x (if (symbol? n6650@x) ((lambda (n6652@t) (if (memv n6652@t '(define-record-type)) n2752@define-record-type-macro (if (memv n6652@t '(define-struct)) n2750@define-struct-macro (if (memv n6652@t '(include)) n2740@include-macro (if (memv n6652@t '(cond)) n2736@cond-macro (if (memv n6652@t '(let)) n2696@let-macro (if (memv n6652@t '(do)) n2728@do-macro (if (memv n6652@t '(or)) n2732@or-macro (if (memv n6652@t '(and)) n2734@and-macro (if (memv n6652@t '(let*)) n2730@let*-macro (if (memv n6652@t '(let-values)) n2698@let-values-macro (if (memv n6652@t '(let*-values)) n2700@let*-values-macro (if (memv n6652@t '(syntax-rules)) n2744@syntax-rules-macro (if (memv n6652@t '(quasiquote)) n2746@quasiquote-macro (if (memv n6652@t '(quasisyntax)) n2748@quasisyntax-macro (if (memv n6652@t '(with-syntax)) n2692@with-syntax-macro (if (memv n6652@t '(when)) n2672@when-macro (if (memv n6652@t '(unless)) n2674@unless-macro (if (memv n6652@t '(case)) n2682@case-macro (if (memv n6652@t '(identifier-syntax)) n2726@identifier-syntax-macro (if (memv n6652@t '(time)) n2718@time-macro (if (memv n6652@t '(delay)) n2720@delay-macro (if (memv n6652@t '(assert)) n2722@assert-macro (if (memv n6652@t '(endianness)) n2724@endianness-macro (if (memv n6652@t '(guard)) n2714@guard-macro (if (memv n6652@t '(define-enumeration)) n2716@define-enumeration-macro (if (memv n6652@t '(trace-lambda)) n2702@trace-lambda-macro (if (memv n6652@t '(trace-define)) n2704@trace-define-macro (if (memv n6652@t '(trace-define-syntax)) n2706@trace-define-syntax-macro (if (memv n6652@t '(trace-let-syntax)) n2710@trace-let-syntax-macro (if (memv n6652@t '(trace-letrec-syntax)) n2712@trace-letrec-syntax-macro (if (memv n6652@t '(define-condition-type)) n2754@define-condition-type-macro (if (memv n6652@t '(parameterize)) n2758@parameterize-macro (if (memv n6652@t '(include-into)) n2742@include-into-macro (if (memv n6652@t '(eol-style)) (lambda (n6654@x) (n2780@symbol-macro n6654@x '(none lf cr crlf nel crnel ls))) (if (memv n6652@t '(error-handling-mode)) (lambda (n6656@x) (n2780@symbol-macro n6656@x '(ignore raise replace))) (if (memv n6652@t '(buffer-mode)) (lambda (n6658@x) (n2780@symbol-macro n6658@x '(none line block))) (if (memv n6652@t '(file-options)) n2126@file-options-macro (if (memv n6652@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) n2756@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" n6650@x)))))))))))))))))))))))))))))))))))))))) n6650@x) (error 'core-macro-transformer '"BUG: invalid macro" n6650@x))))) (set! n2784@local-macro-transformer (lambda (n6660@x) (car n6660@x))) (set! n2786@do-macro-call (lambda (n6662@transformer n6663@expr) ((lambda (n6666@out) (begin ((letrec ((n6668@f (lambda (n6670@x) (if (not (n2211@stx? n6670@x)) (if (pair? n6670@x) (begin (n6668@f (car n6670@x)) (n6668@f (cdr n6670@x))) (if (vector? n6670@x) (vector-for-each n6668@f n6670@x) (if (symbol? n6670@x) (n2997@syntax-violation '#f '"raw symbol encountered in output of macro" n6663@expr n6670@x) (void)))) (void))))) n6668@f) n6666@out) (n2245@add-mark (n2235@gen-mark) n6666@out n6663@expr))) (n6662@transformer (n2245@add-mark n2237@anti-mark n6663@expr '#f))))) (set! n2788@chi-macro (lambda (n6672@p n6673@e) (n2786@do-macro-call (n2782@macro-transformer n6672@p) n6673@e))) (set! n2790@chi-local-macro (lambda (n6676@p n6677@e) (n2786@do-macro-call (n2784@local-macro-transformer n6676@p) n6677@e))) (set! n2792@chi-global-macro (lambda (n6680@p n6681@e) ((lambda (n6684@lib n6685@loc) (begin (n1794@n1450@visit-library n6684@lib) ((lambda (n6688@x) ((lambda (n6690@transformer) (n2786@do-macro-call n6690@transformer n6681@e)) (if (procedure? n6688@x) n6688@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" n6688@x)))) (symbol-value n6685@loc)))) (car n6680@p) (cdr n6680@p)))) (set! n2794@chi-expr* (lambda (n6692@e* n6693@r n6694@mr) (if (null? n6692@e*) '() ((lambda (n6698@e) (cons n6698@e (n2794@chi-expr* (cdr n6692@e*) n6693@r n6694@mr))) (n2798@chi-expr (car n6692@e*) n6693@r n6694@mr))))) (set! n2796@chi-application (lambda (n6700@e n6701@r n6702@mr) ((lambda (n6706@t) ((lambda (n6708@ls/false) (if n6708@ls/false (apply (lambda (n6710@rator n6711@rands) ((lambda (n6714@rator) (cons n6714@rator (n2794@chi-expr* n6711@rands n6701@r n6702@mr))) (n2798@chi-expr n6710@rator n6701@r n6702@mr))) n6708@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n6706@t))) (n2764@syntax-dispatch n6706@t '(any . each-any)))) n6700@e))) (set! n2798@chi-expr (lambda (n6716@e n6717@r n6718@mr) (call-with-values (lambda () (n2307@syntax-type n6716@e n6717@r)) (lambda (n6725@n6722@type n6726@n6723@value n6727@n6724@kwd) ((lambda (n6731@kwd n6732@value n6733@type) ((lambda (n6737@t) (if (memv n6737@t '(core-macro)) ((lambda (n6739@transformer) (n6739@transformer n6716@e n6717@r n6718@mr)) (n2778@core-macro-transformer n6732@value)) (if (memv n6737@t '(global)) ((lambda (n6741@lib) ((lambda (n6743@loc) ((lambda () (begin ((n2871@inv-collector) n6741@lib) n6743@loc)))) (cdr n6732@value))) (car n6732@value)) (if (memv n6737@t '(core-prim)) ((lambda (n6745@name) (list 'primitive n6745@name)) n6732@value) (if (memv n6737@t '(call)) (n2796@chi-application n6716@e n6717@r n6718@mr) (if (memv n6737@t '(lexical)) ((lambda (n6747@lex) n6747@lex) (n2648@lexical-var n6732@value)) (if (memv n6737@t '(global-macro global-macro!)) (n2798@chi-expr (n2792@chi-global-macro n6732@value n6716@e) n6717@r n6718@mr) (if (memv n6737@t '(local-macro local-macro!)) (n2798@chi-expr (n2790@chi-local-macro n6732@value n6716@e) n6717@r n6718@mr) (if (memv n6737@t '(macro macro!)) (n2798@chi-expr (n2788@chi-macro n6732@value n6716@e) n6717@r n6718@mr) (if (memv n6737@t '(constant)) ((lambda (n6749@datum) (list 'quote n6749@datum)) n6732@value) (if (memv n6737@t '(set!)) (n2800@chi-set! n6716@e n6717@r n6718@mr) (if (memv n6737@t '(begin)) ((lambda (n6751@t) ((lambda (n6753@ls/false) (if n6753@ls/false (apply (lambda (n6755@x n6756@x*) (n2106@n1963@build-sequence '#f (n2794@chi-expr* (cons n6755@x n6756@x*) n6717@r n6718@mr))) n6753@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n6751@t))) (n2764@syntax-dispatch n6751@t '(_ any . each-any)))) n6716@e) (if (memv n6737@t '(let-syntax letrec-syntax)) ((lambda (n6759@t) ((lambda (n6761@ls/false) (if (and n6761@ls/false (apply (lambda (n6763@xlhs* n6764@xrhs* n6765@xbody n6766@xbody*) (if (not (n2277@valid-bound-ids? n6763@xlhs*)) (n2997@syntax-violation '#f '"invalid identifiers" n6716@e) (void))) n6761@ls/false)) (apply (lambda (n6771@xlhs* n6772@xrhs* n6773@xbody n6774@xbody*) ((lambda (n6779@xlab*) ((lambda (n6781@xrib) ((lambda (n6783@xb*) ((lambda () (n2106@n1963@build-sequence '#f (n2794@chi-expr* (map (lambda (n6785@x) (n2247@add-subst n6781@xrib n6785@x)) (cons n6773@xbody n6774@xbody*)) (append (map cons n6779@xlab* n6783@xb*) n6717@r) (append (map cons n6779@xlab* n6783@xb*) n6718@mr)))))) (map (lambda (n6787@x) (n2329@make-eval-transformer (n2857@expand-transformer (if (eq? n6733@type 'let-syntax) n6787@x (n2247@add-subst n6781@xrib n6787@x)) n6718@mr))) n6772@xrhs*))) (n2198@make-full-rib n6771@xlhs* n6779@xlab*))) (map n2143@gen-label n6771@xlhs*))) n6761@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n6759@t))) (n2764@syntax-dispatch n6759@t '(_ #(each (any any)) any . each-any)))) n6716@e) (if (memv n6737@t '(displaced-lexical)) (n2997@syntax-violation '#f '"identifier out of context" n6716@e) (if (memv n6737@t '(syntax)) (n2997@syntax-violation '#f '"reference to pattern variable outside a syntax form" n6716@e) (if (memv n6737@t '(define define-syntax module import library)) (n2997@syntax-violation '#f (string-append ((lambda (n6789@t) (if (memv n6789@t '(define)) '"a definition" (if (memv n6789@t '(define-syntax)) '"a define-syntax" (if (memv n6789@t '(module)) '"a module definition" (if (memv n6789@t '(library)) '"a library definition" (if (memv n6789@t '(import)) '"an import declaration" (if (memv n6789@t '(export)) '"an export declaration" '"a non-expression"))))))) n6733@type) '" was found where an expression was expected") n6716@e) (if (memv n6737@t '(mutable)) (n2997@syntax-violation '#f '"attempt to reference an unexportable variable" n6716@e) (n2997@syntax-violation '#f '"invalid expression" n6716@e)))))))))))))))))) n6733@type)) n6727@n6724@kwd n6726@n6723@value n6725@n6722@type))))) (set! n2800@chi-set! (lambda (n6791@e n6792@r n6793@mr) ((lambda (n6797@t) ((lambda (n6799@ls/false) (if (and n6799@ls/false (apply (lambda (n6801@x n6802@v) (n2267@id? n6801@x)) n6799@ls/false)) (apply (lambda (n6805@x n6806@v) (call-with-values (lambda () (n2307@syntax-type n6805@x n6792@r)) (lambda (n6812@n6809@type n6813@n6810@value n6814@n6811@kwd) ((lambda (n6818@kwd n6819@value n6820@type) ((lambda (n6824@t) (if (memv n6824@t '(lexical)) (begin (n2652@set-lexical-mutable! n6819@value '#t) (list 'set! (n2648@lexical-var n6819@value) (n2798@chi-expr n6806@v n6792@r n6793@mr))) (if (memv n6824@t '(core-prim)) (n2997@syntax-violation '#f '"cannot modify imported core primitive" n6791@e) (if (memv n6824@t '(global)) (n2997@syntax-violation '#f '"attempt to modify imported binding" n6791@e) (if (memv n6824@t '(global-macro!)) (n2798@chi-expr (n2792@chi-global-macro n6819@value n6791@e) n6792@r n6793@mr) (if (memv n6824@t '(local-macro!)) (n2798@chi-expr (n2790@chi-local-macro n6819@value n6791@e) n6792@r n6793@mr) (if (memv n6824@t '(mutable)) (n2997@syntax-violation '#f '"attempt to assign to an unexportable variable" n6791@e) (n2997@syntax-violation '#f '"invalid syntax" n6791@e)))))))) n6820@type)) n6814@n6811@kwd n6813@n6810@value n6812@n6809@type)))) n6799@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n6797@t))) (n2764@syntax-dispatch n6797@t '(_ any any)))) n6791@e))) (set! n2802@verify-formals (lambda (n6826@fmls n6827@stx) ((lambda (n6830@t) ((lambda (n6832@ls/false) (if n6832@ls/false (apply (lambda (n6834@x*) (if (not (n2277@valid-bound-ids? n6834@x*)) (n2694@invalid-fmls-error n6827@stx n6826@fmls) (void))) n6832@ls/false) ((lambda (n6836@t) ((lambda (n6838@ls/false) (if n6838@ls/false (apply (lambda (n6840@x* n6841@x) (if (not (n2277@valid-bound-ids? (cons n6841@x n6840@x*))) (n2694@invalid-fmls-error n6827@stx n6826@fmls) (void))) n6838@ls/false) ((lambda (n6844@t) ((lambda (n6846@ls/false) (if n6846@ls/false (apply (lambda () (n2997@syntax-violation '#f '"invalid syntax" n6827@stx)) n6846@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n6844@t))) (n2764@syntax-dispatch n6844@t '_))) n6836@t))) (n2764@syntax-dispatch n6836@t '#(each+ any () any)))) n6830@t))) (n2764@syntax-dispatch n6830@t 'each-any))) n6826@fmls))) (set! n2804@chi-lambda-clause (lambda (n6848@stx n6849@fmls n6850@body* n6851@r n6852@mr) ((lambda (n6858@t) ((lambda (n6860@ls/false) (if n6860@ls/false (apply (lambda (n6862@x*) (begin (n2802@verify-formals n6849@fmls n6848@stx) ((lambda (n6864@lex* n6865@lab*) (values n6864@lex* (n2820@chi-internal (n2247@add-subst (n2198@make-full-rib n6862@x* n6865@lab*) n6850@body*) (n2656@add-lexicals n6865@lab* n6864@lex* n6851@r) n6852@mr))) (map n2139@gen-lexical n6862@x*) (map n2143@gen-label n6862@x*)))) n6860@ls/false) ((lambda (n6868@t) ((lambda (n6870@ls/false) (if n6870@ls/false (apply (lambda (n6872@x* n6873@x) (begin (n2802@verify-formals n6849@fmls n6848@stx) ((lambda (n6876@lex* n6877@lab* n6878@lex n6879@lab) (values (append n6876@lex* n6878@lex) (n2820@chi-internal (n2247@add-subst (n2198@make-full-rib (cons n6873@x n6872@x*) (cons n6879@lab n6877@lab*)) n6850@body*) (n2656@add-lexicals (cons n6879@lab n6877@lab*) (cons n6878@lex n6876@lex*) n6851@r) n6852@mr))) (map n2139@gen-lexical n6872@x*) (map n2143@gen-label n6872@x*) (n2139@gen-lexical n6873@x) (n2143@gen-label n6873@x)))) n6870@ls/false) ((lambda (n6884@t) ((lambda (n6886@ls/false) (if n6886@ls/false (apply (lambda () (n2997@syntax-violation '#f '"invalid syntax" n6849@fmls)) n6886@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n6884@t))) (n2764@syntax-dispatch n6884@t '_))) n6868@t))) (n2764@syntax-dispatch n6868@t '#(each+ any () any)))) n6858@t))) (n2764@syntax-dispatch n6858@t 'each-any))) n6849@fmls))) (set! n2806@chi-lambda-clause* (lambda (n6888@stx n6889@fmls* n6890@body** n6891@r n6892@mr) (if (null? n6889@fmls*) (values '() '()) (call-with-values (lambda () (n2804@chi-lambda-clause n6888@stx (car n6889@fmls*) (car n6890@body**) n6891@r n6892@mr)) (lambda (n6900@n6898@a n6901@n6899@b) ((lambda (n6904@b n6905@a) (call-with-values (lambda () (n2806@chi-lambda-clause* n6888@stx (cdr n6889@fmls*) (cdr n6890@body**) n6891@r n6892@mr)) (lambda (n6910@n6908@a* n6911@n6909@b*) ((lambda (n6914@b* n6915@a*) (values (cons n6905@a n6915@a*) (cons n6904@b n6914@b*))) n6911@n6909@b* n6910@n6908@a*)))) n6901@n6899@b n6900@n6898@a)))))) (set! n2808@chi-defun (lambda (n6918@x n6919@r n6920@mr) ((lambda (n6924@fmls n6925@body*) (call-with-values (lambda () (n2804@chi-lambda-clause n6924@fmls n6924@fmls n6925@body* n6919@r n6920@mr)) (lambda (n6930@n6928@fmls n6931@n6929@body) ((lambda (n6934@body n6935@fmls) (n2103@n1913@build-lambda '#f n6935@fmls n6934@body)) n6931@n6929@body n6930@n6928@fmls)))) (car n6918@x) (cdr n6918@x)))) (set! n2810@chi-rhs (lambda (n6938@rhs n6939@r n6940@mr) ((lambda (n6944@t) (if (memv n6944@t '(defun)) (n2808@chi-defun (cdr n6938@rhs) n6939@r n6940@mr) (if (memv n6944@t '(expr)) ((lambda (n6946@expr) (n2798@chi-expr n6946@expr n6939@r n6940@mr)) (cdr n6938@rhs)) (if (memv n6944@t '(top-expr)) ((lambda (n6948@expr) (n2106@n1963@build-sequence '#f (list (n2798@chi-expr n6948@expr n6939@r n6940@mr) (n2107@n1965@build-void)))) (cdr n6938@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" n6938@rhs))))) (car n6938@rhs)))) (set! n2812@expand-interaction-rhs*/init* (lambda (n6950@lhs* n6951@rhs* n6952@init* n6953@r n6954@mr) ((letrec ((n6960@f (lambda (n6962@lhs* n6963@rhs*) (if (null? n6962@lhs*) (map (lambda (n6966@x) (n2798@chi-expr n6966@x n6953@r n6954@mr)) n6952@init*) ((lambda (n6968@lhs n6969@rhs) ((lambda (n6972@t) (if (memv n6972@t '(defun)) ((lambda (n6974@rhs) (cons (list 'set! n6968@lhs n6974@rhs) (n6960@f (cdr n6962@lhs*) (cdr n6963@rhs*)))) (n2808@chi-defun (cdr n6969@rhs) n6953@r n6954@mr)) (if (memv n6972@t '(expr)) ((lambda (n6976@rhs) (cons (list 'set! n6968@lhs n6976@rhs) (n6960@f (cdr n6962@lhs*) (cdr n6963@rhs*)))) (n2798@chi-expr (cdr n6969@rhs) n6953@r n6954@mr)) (if (memv n6972@t '(top-expr)) ((lambda (n6978@e) (cons n6978@e (n6960@f (cdr n6962@lhs*) (cdr n6963@rhs*)))) (n2798@chi-expr (cdr n6969@rhs) n6953@r n6954@mr)) (error 'expand-interaction '"invallid" n6969@rhs))))) (car n6969@rhs))) (car n6962@lhs*) (car n6963@rhs*)))))) n6960@f) n6950@lhs* n6951@rhs*))) (set! n2814@chi-rhs* (lambda (n6980@rhs* n6981@r n6982@mr) ((letrec ((n6986@f (lambda (n6988@ls) (if (null? n6988@ls) '() ((lambda (n6990@a) (cons n6990@a (n6986@f (cdr n6988@ls)))) (n2810@chi-rhs (car n6988@ls) n6981@r n6982@mr)))))) n6986@f) n6980@rhs*))) (set! n2816@find-bound=? (lambda (n6992@x n6993@lhs* n6994@rhs*) (if (null? n6993@lhs*) '#f (if (n2273@bound-id=? n6992@x (car n6993@lhs*)) (car n6994@rhs*) (n2816@find-bound=? n6992@x (cdr n6993@lhs*) (cdr n6994@rhs*)))))) (set! n2818@find-dups (lambda (n6998@ls) ((letrec ((n7000@f (lambda (n7002@ls n7003@dups) (if (null? n7002@ls) n7003@dups ((lambda (n7006@t) (if n7006@t ((lambda (n7008@x) (n7000@f (cdr n7002@ls) (cons (list (car n7002@ls) n7008@x) n7003@dups))) n7006@t) (n7000@f (cdr n7002@ls) n7003@dups))) (n2816@find-bound=? (car n7002@ls) (cdr n7002@ls) (cdr n7002@ls))))))) n7000@f) n6998@ls '()))) (set! n2820@chi-internal (lambda (n7010@e* n7011@r n7012@mr) ((lambda (n7016@rib) (call-with-values (lambda () (n2855@chi-body* (map (lambda (n7026@x) (n2247@add-subst n7016@rib n7026@x)) (n2265@syntax->list n7010@e*)) n7011@r n7012@mr '() '() '() '() '() n7016@rib '#f)) (lambda (n7028@n7018@e* n7029@n7019@r n7030@n7020@mr n7031@n7021@lex* n7032@n7022@rhs* n7033@n7023@mod** n7034@n7024@kwd* n7035@n7025@_exp*) ((lambda (n7044@_exp* n7045@kwd* n7046@mod** n7047@rhs* n7048@lex* n7049@mr n7050@r n7051@e*) (begin (if (null? n7051@e*) (n2997@syntax-violation '#f '"no expression in body" n7051@e*) (void)) ((lambda (n7060@init*) ((lambda (n7062@rhs*) ((lambda () (n2109@n1969@build-letrec* '#f (reverse n7048@lex*) (reverse n7062@rhs*) (n2106@n1963@build-sequence '#f n7060@init*))))) (n2814@chi-rhs* n7047@rhs* n7050@r n7049@mr))) (n2794@chi-expr* (append (apply append (reverse n7046@mod**)) n7051@e*) n7050@r n7049@mr)))) n7035@n7025@_exp* n7034@n7024@kwd* n7033@n7023@mod** n7032@n7022@rhs* n7031@n7021@lex* n7030@n7020@mr n7029@n7019@r n7028@n7018@e*)))) (n2186@make-empty-rib)))) (set! n2822@parse-module (lambda (n7064@e) ((lambda (n7066@t) ((lambda (n7068@ls/false) (if n7068@ls/false (apply (lambda (n7070@export* n7071@b*) (begin (if (not (for-all n2267@id? n7070@export*)) (n2997@syntax-violation '#f '"module exports must be identifiers" n7064@e) (void)) (values '#f (list->vector n7070@export*) n7071@b*))) n7068@ls/false) ((lambda (n7074@t) ((lambda (n7076@ls/false) (if n7076@ls/false (apply (lambda (n7078@name n7079@export* n7080@b*) (begin (if (not (n2267@id? n7078@name)) (n2997@syntax-violation '#f '"module name must be an identifier" n7064@e) (void)) (if (not (for-all n2267@id? n7079@export*)) (n2997@syntax-violation '#f '"module exports must be identifiers" n7064@e) (void)) (values n7078@name (list->vector n7079@export*) n7080@b*))) n7076@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n7074@t))) (n2764@syntax-dispatch n7074@t '(_ any each-any . each-any)))) n7066@t))) (n2764@syntax-dispatch n7066@t '(_ each-any . each-any)))) n7064@e))) (set! n2828@n2823 (make-record-type-descriptor 'module-interface '#f 'n2826 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! n2830@n2825 '#f) (set! n2832@n2824 (make-record-constructor-descriptor n2828@n2823 '#f n2830@n2825)) (set! n2835@module-interface? (record-predicate n2828@n2823)) (set! n2837@make-module-interface (record-constructor n2832@n2824)) (set! n2839@module-interface-first-mark (record-accessor n2828@n2823 '0)) (set! n2841@module-interface-exp-id-vec (record-accessor n2828@n2823 '1)) (set! n2843@module-interface-exp-lab-vec (record-accessor n2828@n2823 '2)) (set! n2845@set-module-interface-first-mark! (record-mutator n2828@n2823 '0)) (set! n2847@set-module-interface-exp-id-vec! (record-mutator n2828@n2823 '1)) (set! n2849@set-module-interface-exp-lab-vec! (record-mutator n2828@n2823 '2)) (set! n2851@module-interface-exp-id* (lambda (n7084@iface n7085@id) ((lambda (n7089@diff-marks) (begin (set! n7089@diff-marks (lambda (n7096@ls n7097@x) (begin (if (null? n7096@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (n7100@a) (if (eq? n7100@a n7097@x) '() (cons n7100@a (n7089@diff-marks (cdr n7096@ls) n7097@x)))) (car n7096@ls))))) ((lambda (n7090@diff n7091@id-vec) (if (null? n7090@diff) n7091@id-vec (vector-map (lambda (n7094@x) (n2213@make-stx (n2215@stx-expr n7094@x) (append n7090@diff (n2217@stx-mark* n7094@x)) '() '())) n7091@id-vec))) (n7089@diff-marks (n2217@stx-mark* n7085@id) (n2839@module-interface-first-mark n7084@iface)) (n2841@module-interface-exp-id-vec n7084@iface)))) '#f))) (set! n2853@chi-internal-module (lambda (n7102@e n7103@r n7104@mr n7105@lex* n7106@rhs* n7107@mod** n7108@kwd*) (call-with-values (lambda () (n2822@parse-module n7102@e)) (lambda (n7119@n7116@name n7120@n7117@exp-id* n7121@n7118@e*) ((lambda (n7125@e* n7126@exp-id* n7127@name) ((lambda (n7131@rib) ((lambda (n7133@e*) ((lambda () (call-with-values (lambda () (n2855@chi-body* n7133@e* n7103@r n7104@mr n7105@lex* n7106@rhs* n7107@mod** n7108@kwd* '() n7131@rib '#f)) (lambda (n7143@n7135@e* n7144@n7136@r n7145@n7137@mr n7146@n7138@lex* n7147@n7139@rhs* n7148@n7140@mod** n7149@n7141@kwd* n7150@n7142@_exp*) ((lambda (n7159@_exp* n7160@kwd* n7161@mod** n7162@rhs* n7163@lex* n7164@mr n7165@r n7166@e*) ((lambda (n7175@exp-lab* n7176@mod**) (if (not n7127@name) (values n7163@lex* n7162@rhs* n7126@exp-id* n7175@exp-lab* n7165@r n7164@mr n7176@mod** n7160@kwd*) ((lambda (n7179@lab n7180@iface) (values n7163@lex* n7162@rhs* (vector n7127@name) (vector n7179@lab) (cons (cons n7179@lab (cons '$module n7180@iface)) n7165@r) (cons (cons n7179@lab (cons '$module n7180@iface)) n7164@mr) n7176@mod** n7160@kwd*)) (n2143@gen-label 'module) (n2837@make-module-interface (car (n2217@stx-mark* n7127@name)) (vector-map (lambda (n7183@x) (n2213@make-stx (n2215@stx-expr n7183@x) (n2217@stx-mark* n7183@x) '() '())) n7126@exp-id*) n7175@exp-lab*)))) (vector-map (lambda (n7185@x) (or (n2293@id->label (n2213@make-stx (n2269@id->sym n7185@x) (n2217@stx-mark* n7185@x) (list n7131@rib) '())) (n2997@syntax-violation '#f '"cannot find module export" n7185@x))) n7126@exp-id*) (cons n7166@e* n7161@mod**))) n7150@n7142@_exp* n7149@n7141@kwd* n7148@n7140@mod** n7147@n7139@rhs* n7146@n7138@lex* n7145@n7137@mr n7144@n7136@r n7143@n7135@e*)))))) (map (lambda (n7187@x) (n2247@add-subst n7131@rib n7187@x)) (n2265@syntax->list n7125@e*)))) (n2186@make-empty-rib))) n7121@n7118@e* n7120@n7117@exp-id* n7119@n7116@name))))) (set! n2855@chi-body* (lambda (n7189@e* n7190@r n7191@mr n7192@lex* n7193@rhs* n7194@mod** n7195@kwd* n7196@exp* n7197@rib n7198@top?) (if (null? n7189@e*) (values n7189@e* n7190@r n7191@mr n7192@lex* n7193@rhs* n7194@mod** n7195@kwd* n7196@exp*) ((lambda (n7209@e) (call-with-values (lambda () (n2307@syntax-type n7209@e n7190@r)) (lambda (n7214@n7211@type n7215@n7212@value n7216@n7213@kwd) ((lambda (n7220@kwd n7221@value n7222@type) ((lambda (n7226@kwd*) ((lambda (n7228@t) (if (memv n7228@t '(define)) (call-with-values (lambda () (n2640@parse-define n7209@e)) (lambda (n7232@n7230@id n7233@n7231@rhs) ((lambda (n7236@rhs n7237@id) (begin (if (n2281@bound-id-member? n7237@id n7226@kwd*) (n2997@syntax-violation '#f '"cannot redefine keyword" n7209@e) (void)) (call-with-values (lambda () (n2147@gen-define-label+loc n7237@id n7197@rib)) (lambda (n7242@n7240@lab n7243@n7241@lex) ((lambda (n7246@lex n7247@lab) (begin (n2188@extend-rib! n7197@rib n7237@id n7247@lab) (n2855@chi-body* (cdr n7189@e*) (n2654@add-lexical n7247@lab n7246@lex n7190@r) n7191@mr (cons n7246@lex n7192@lex*) (cons n7236@rhs n7193@rhs*) n7194@mod** n7226@kwd* n7196@exp* n7197@rib n7198@top?))) n7243@n7241@lex n7242@n7240@lab))))) n7233@n7231@rhs n7232@n7230@id))) (if (memv n7228@t '(define-syntax)) (call-with-values (lambda () (n2642@parse-define-syntax n7209@e)) (lambda (n7252@n7250@id n7253@n7251@rhs) ((lambda (n7256@rhs n7257@id) (begin (if (n2281@bound-id-member? n7257@id n7226@kwd*) (n2997@syntax-violation '#f '"cannot redefine keyword" n7209@e) (void)) ((lambda (n7260@lab n7261@expanded-rhs) (begin (n2188@extend-rib! n7197@rib n7257@id n7260@lab) ((lambda (n7264@b) (n2855@chi-body* (cdr n7189@e*) (cons (cons n7260@lab n7264@b) n7190@r) (cons (cons n7260@lab n7264@b) n7191@mr) n7192@lex* n7193@rhs* n7194@mod** n7226@kwd* n7196@exp* n7197@rib n7198@top?)) (n2329@make-eval-transformer n7261@expanded-rhs)))) (n2149@gen-define-label n7257@id n7197@rib) (n2857@expand-transformer n7256@rhs n7191@mr)))) n7253@n7251@rhs n7252@n7250@id))) (if (memv n7228@t '(let-syntax letrec-syntax)) ((lambda (n7266@t) ((lambda (n7268@ls/false) (if (and n7268@ls/false (apply (lambda (n7270@xlhs* n7271@xrhs* n7272@xbody*) (if (not (n2277@valid-bound-ids? n7270@xlhs*)) (n2997@syntax-violation '#f '"invalid identifiers" n7209@e) (void))) n7268@ls/false)) (apply (lambda (n7276@xlhs* n7277@xrhs* n7278@xbody*) ((lambda (n7282@xlab*) ((lambda (n7284@xrib) ((lambda (n7286@xb*) ((lambda () (n2855@chi-body* (append (map (lambda (n7288@x) (n2247@add-subst n7284@xrib n7288@x)) n7278@xbody*) (cdr n7189@e*)) (append (map cons n7282@xlab* n7286@xb*) n7190@r) (append (map cons n7282@xlab* n7286@xb*) n7191@mr) n7192@lex* n7193@rhs* n7194@mod** n7226@kwd* n7196@exp* n7197@rib n7198@top?)))) (map (lambda (n7290@x) (n2329@make-eval-transformer (n2857@expand-transformer (if (eq? n7222@type 'let-syntax) n7290@x (n2247@add-subst n7284@xrib n7290@x)) n7191@mr))) n7277@xrhs*))) (n2198@make-full-rib n7276@xlhs* n7282@xlab*))) (map n2143@gen-label n7276@xlhs*))) n7268@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n7266@t))) (n2764@syntax-dispatch n7266@t '(_ #(each (any any)) . each-any)))) n7209@e) (if (memv n7228@t '(begin)) ((lambda (n7292@t) ((lambda (n7294@ls/false) (if n7294@ls/false (apply (lambda (n7296@x*) (n2855@chi-body* (append n7296@x* (cdr n7189@e*)) n7190@r n7191@mr n7192@lex* n7193@rhs* n7194@mod** n7226@kwd* n7196@exp* n7197@rib n7198@top?)) n7294@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n7292@t))) (n2764@syntax-dispatch n7292@t '(_ . each-any)))) n7209@e) (if (memv n7228@t '(global-macro global-macro!)) (n2855@chi-body* (cons (n2247@add-subst n7197@rib (n2792@chi-global-macro n7221@value n7209@e)) (cdr n7189@e*)) n7190@r n7191@mr n7192@lex* n7193@rhs* n7194@mod** n7226@kwd* n7196@exp* n7197@rib n7198@top?) (if (memv n7228@t '(local-macro local-macro!)) (n2855@chi-body* (cons (n2247@add-subst n7197@rib (n2790@chi-local-macro n7221@value n7209@e)) (cdr n7189@e*)) n7190@r n7191@mr n7192@lex* n7193@rhs* n7194@mod** n7226@kwd* n7196@exp* n7197@rib n7198@top?) (if (memv n7228@t '(macro macro!)) (n2855@chi-body* (cons (n2247@add-subst n7197@rib (n2788@chi-macro n7221@value n7209@e)) (cdr n7189@e*)) n7190@r n7191@mr n7192@lex* n7193@rhs* n7194@mod** n7226@kwd* n7196@exp* n7197@rib n7198@top?) (if (memv n7228@t '(module)) (call-with-values (lambda () (n2853@chi-internal-module n7209@e n7190@r n7191@mr n7192@lex* n7193@rhs* n7194@mod** n7226@kwd*)) (lambda (n7306@n7298@lex* n7307@n7299@rhs* n7308@n7300@m-exp-id* n7309@n7301@m-exp-lab* n7310@n7302@r n7311@n7303@mr n7312@n7304@mod** n7313@n7305@kwd*) ((lambda (n7322@kwd* n7323@mod** n7324@mr n7325@r n7326@m-exp-lab* n7327@m-exp-id* n7328@rhs* n7329@lex*) (begin (vector-for-each (lambda (n7338@id n7339@lab) (n2188@extend-rib! n7197@rib n7338@id n7339@lab)) n7327@m-exp-id* n7326@m-exp-lab*) (n2855@chi-body* (cdr n7189@e*) n7325@r n7324@mr n7329@lex* n7328@rhs* n7323@mod** n7322@kwd* n7196@exp* n7197@rib n7198@top?))) n7313@n7305@kwd* n7312@n7304@mod** n7311@n7303@mr n7310@n7302@r n7309@n7301@m-exp-lab* n7308@n7300@m-exp-id* n7307@n7299@rhs* n7306@n7298@lex*))) (if (memv n7228@t '(library)) (begin (n2967@library-expander (n2289@stx->datum n7209@e)) (n2855@chi-body* (cdr n7189@e*) n7190@r n7191@mr n7192@lex* n7193@rhs* n7194@mod** n7226@kwd* n7196@exp* n7197@rib n7198@top?)) (if (memv n7228@t '(export)) ((lambda (n7342@t) ((lambda (n7344@ls/false) (if n7344@ls/false (apply (lambda (n7346@exp-decl*) (n2855@chi-body* (cdr n7189@e*) n7190@r n7191@mr n7192@lex* n7193@rhs* n7194@mod** n7226@kwd* (append n7346@exp-decl* n7196@exp*) n7197@rib n7198@top?)) n7344@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n7342@t))) (n2764@syntax-dispatch n7342@t '(_ . each-any)))) n7209@e) (if (memv n7228@t '(import)) ((lambda () ((lambda (n7349@module-import? n7351@module-import n7353@library-import) (begin (set! n7349@module-import? (lambda (n7425@e) ((lambda (n7427@t) ((lambda (n7429@ls/false) (if (and n7429@ls/false (apply (lambda (n7431@id) (n2267@id? n7431@id)) n7429@ls/false)) (apply (lambda (n7433@id) '#t) n7429@ls/false) ((lambda (n7435@t) ((lambda (n7437@ls/false) (if n7437@ls/false (apply (lambda (n7439@imp*) '#f) n7437@ls/false) ((lambda (n7441@t) ((lambda (n7443@ls/false) (if n7443@ls/false (apply (lambda () (n2997@syntax-violation '#f '"malformed import form" n7425@e)) n7443@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n7441@t))) (n2764@syntax-dispatch n7441@t '_))) n7435@t))) (n2764@syntax-dispatch n7435@t '(_ . each-any)))) n7427@t))) (n2764@syntax-dispatch n7427@t '(_ any)))) n7425@e))) (set! n7351@module-import (lambda (n7394@e n7395@r) ((lambda (n7398@t) ((lambda (n7400@ls/false) (if (and n7400@ls/false (apply (lambda (n7402@id) (n2267@id? n7402@id)) n7400@ls/false)) (apply (lambda (n7404@id) (call-with-values (lambda () (n2307@syntax-type n7404@id n7395@r)) (lambda (n7409@n7406@type n7410@n7407@value n7411@n7408@kwd) ((lambda (n7415@kwd n7416@value n7417@type) ((lambda (n7421@t) (if (memv n7421@t '($module)) ((lambda (n7423@iface) (values (n2851@module-interface-exp-id* n7423@iface n7404@id) (n2843@module-interface-exp-lab-vec n7423@iface))) n7416@value) (n2997@syntax-violation '#f '"invalid import" n7394@e))) n7417@type)) n7411@n7408@kwd n7410@n7407@value n7409@n7406@type)))) n7400@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n7398@t))) (n2764@syntax-dispatch n7398@t '(_ any)))) n7394@e))) (set! n7353@library-import (lambda (n7368@e) ((lambda (n7370@t) ((lambda (n7372@ls/false) (if n7372@ls/false (apply (lambda (n7374@ctxt n7375@imp*) (call-with-values (lambda () (n2865@parse-import-spec* (n3003@syntax->datum n7375@imp*))) (lambda (n7380@n7378@subst-names n7381@n7379@subst-labels) ((lambda (n7384@subst-labels n7385@subst-names) (values (vector-map (lambda (n7388@name) (n2233@datum->stx n7374@ctxt n7388@name)) n7385@subst-names) n7384@subst-labels)) n7381@n7379@subst-labels n7380@n7378@subst-names)))) n7372@ls/false) ((lambda (n7390@t) ((lambda (n7392@ls/false) (if n7392@ls/false (apply (lambda () (n2997@syntax-violation '#f '"invalid import form" n7368@e)) n7392@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n7390@t))) (n2764@syntax-dispatch n7390@t '_))) n7370@t))) (n2764@syntax-dispatch n7370@t '(any . each-any)))) n7368@e))) (begin (call-with-values (lambda () (if (n7349@module-import? n7209@e) (n7351@module-import n7209@e n7190@r) (n7353@library-import n7209@e))) (lambda (n7356@n7354@id* n7357@n7355@lab*) ((lambda (n7360@lab* n7361@id*) (vector-for-each (lambda (n7364@id n7365@lab) (n2188@extend-rib! n7197@rib n7364@id n7365@lab)) n7361@id* n7360@lab*)) n7357@n7355@lab* n7356@n7354@id*))) (n2855@chi-body* (cdr n7189@e*) n7190@r n7191@mr n7192@lex* n7193@rhs* n7194@mod** n7226@kwd* n7196@exp* n7197@rib n7198@top?)))) '#f '#f '#f))) (if n7198@top? (n2855@chi-body* (cdr n7189@e*) n7190@r n7191@mr (cons (n2139@gen-lexical 'dummy) n7192@lex*) (cons (cons 'top-expr n7209@e) n7193@rhs*) n7194@mod** n7226@kwd* n7196@exp* n7197@rib n7198@top?) (values n7189@e* n7190@r n7191@mr n7192@lex* n7193@rhs* n7194@mod** n7226@kwd* n7196@exp*)))))))))))))) n7222@type)) (if (n2267@id? n7220@kwd) (cons n7220@kwd n7195@kwd*) n7195@kwd*))) n7216@n7213@kwd n7215@n7212@value n7214@n7211@type)))) (car n7189@e*))))) (set! n2857@expand-transformer (lambda (n7445@expr n7446@r) ((lambda (n7449@rtc) ((lambda (n7451@expanded-rhs) (begin (for-each ((lambda (n7453@mark-visit) (lambda (n7455@x) (begin (n1793@n1448@invoke-library n7455@x) (n7453@mark-visit n7455@x)))) (n2873@vis-collector)) (n7449@rtc)) n7451@expanded-rhs)) ((lambda (n7461@n7457@inv-collector n7462@n7458@vis-collector n7463@n7459@inv-collector n7464@n7460@vis-collector) ((lambda (n7469@swap) (dynamic-wind n7469@swap (lambda () (n2798@chi-expr n7445@expr n7446@r n7446@r)) n7469@swap)) (lambda () (begin ((lambda (n7471@t) (begin (n7461@n7457@inv-collector n7463@n7459@inv-collector) (set! n7463@n7459@inv-collector n7471@t))) (n7461@n7457@inv-collector)) ((lambda (n7473@t) (begin (n7462@n7458@vis-collector n7464@n7460@vis-collector) (set! n7464@n7460@vis-collector n7473@t))) (n7462@n7458@vis-collector)))))) n2871@inv-collector n2873@vis-collector n7449@rtc (lambda (n7475@x) (values))))) (n2869@make-collector)))) (set! n2859@parse-exports (lambda (n7477@exp*) ((letrec ((n7479@f (lambda (n7481@exp* n7482@int* n7483@ext*) (if (null? n7481@exp*) (begin (if (not (n2277@valid-bound-ids? n7483@ext*)) (n2997@syntax-violation 'export '"invalid exports" (n2818@find-dups n7483@ext*)) (void)) (values (map n3003@syntax->datum n7483@ext*) n7482@int*)) ((lambda (n7487@t) ((lambda (n7489@ls/false) (if n7489@ls/false (apply (lambda (n7491@rename n7492@i* n7493@e*) (begin (if (not (and (eq? (n3003@syntax->datum n7491@rename) 'rename) (for-all n2267@id? n7492@i*) (for-all n2267@id? n7493@e*))) (n2997@syntax-violation 'export '"invalid export specifier" (car n7481@exp*)) (void)) (n7479@f (cdr n7481@exp*) (append n7492@i* n7482@int*) (append n7493@e* n7483@ext*)))) n7489@ls/false) ((lambda (n7497@t) ((lambda (n7499@ls/false) (if n7499@ls/false (apply (lambda (n7501@ie) (begin (if (not (n2267@id? n7501@ie)) (n2997@syntax-violation 'export '"invalid export" n7501@ie) (void)) (n7479@f (cdr n7481@exp*) (cons n7501@ie n7482@int*) (cons n7501@ie n7483@ext*)))) n7499@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n7497@t))) (n2764@syntax-dispatch n7497@t 'any))) n7487@t))) (n2764@syntax-dispatch n7487@t '(any . #(each (any any)))))) (car n7481@exp*)))))) n7479@f) n7477@exp* '() '()))) (set! n2861@parse-library-name (lambda (n7503@spec) ((lambda (n7506@parse) (begin (set! n7506@parse (lambda (n7517@x) ((lambda (n7519@t) ((lambda (n7521@ls/false) (if (and n7521@ls/false (apply (lambda (n7523@v*) (for-all (lambda (n7525@x) ((lambda (n7527@x) (and (integer? n7527@x) (exact? n7527@x))) (n3003@syntax->datum n7525@x))) n7523@v*)) n7521@ls/false)) (apply (lambda (n7529@v*) (values '() (map n3003@syntax->datum n7529@v*))) n7521@ls/false) ((lambda (n7531@t) ((lambda (n7533@ls/false) (if (and n7533@ls/false (apply (lambda (n7535@x n7536@rest) (symbol? (n3003@syntax->datum n7535@x))) n7533@ls/false)) (apply (lambda (n7539@x n7540@rest) (call-with-values (lambda () (n7506@parse n7540@rest)) (lambda (n7545@n7543@x* n7546@n7544@v*) ((lambda (n7549@v* n7550@x*) (values (cons (n3003@syntax->datum n7539@x) n7550@x*) n7549@v*)) n7546@n7544@v* n7545@n7543@x*)))) n7533@ls/false) ((lambda (n7553@t) ((lambda (n7555@ls/false) (if n7555@ls/false (apply (lambda () (values '() '())) n7555@ls/false) ((lambda (n7557@t) ((lambda (n7559@ls/false) (if n7559@ls/false (apply (lambda () (n2997@syntax-violation '#f '"invalid library name" n7503@spec)) n7559@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n7557@t))) (n2764@syntax-dispatch n7557@t '_))) n7553@t))) (n2764@syntax-dispatch n7553@t '()))) n7531@t))) (n2764@syntax-dispatch n7531@t '(any . any)))) n7519@t))) (n2764@syntax-dispatch n7519@t '(each-any)))) n7517@x))) (call-with-values (lambda () (n7506@parse n7503@spec)) (lambda (n7509@n7507@name* n7510@n7508@ver*) ((lambda (n7513@ver* n7514@name*) (begin (if (null? n7514@name*) (n2997@syntax-violation '#f '"empty library name" n7503@spec) (void)) (values n7514@name* n7513@ver*))) n7510@n7508@ver* n7509@n7507@name*))))) '#f))) (set! n2863@parse-library (lambda (n7561@e) ((lambda (n7563@t) ((lambda (n7565@ls/false) (if (and n7565@ls/false (apply (lambda (n7567@library n7568@name* n7569@export n7570@exp* n7571@import n7572@imp* n7573@b*) (and (eq? (n3003@syntax->datum n7569@export) 'export) (eq? (n3003@syntax->datum n7571@import) 'import) (eq? (n3003@syntax->datum n7567@library) 'library))) n7565@ls/false)) (apply (lambda (n7581@library n7582@name* n7583@export n7584@exp* n7585@import n7586@imp* n7587@b*) (values n7582@name* n7584@exp* n7586@imp* n7587@b*)) n7565@ls/false) ((lambda (n7595@t) ((lambda (n7597@ls/false) (if n7597@ls/false (apply (lambda () (n2997@syntax-violation '#f '"malformed library" n7561@e)) n7597@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n7595@t))) (n2764@syntax-dispatch n7595@t '_))) n7563@t))) (n2764@syntax-dispatch n7563@t '(any each-any (any . each-any) (any . each-any) . each-any)))) n7561@e))) (set! n2865@parse-import-spec* ((lambda () ((lambda (n7600@idsyn? n7602@dup-error n7604@merge-substs n7606@exclude* n7608@find* n7610@rem* n7612@remove-dups n7614@parse-library-name n7616@import-library n7618@get-import n7620@add-imports!) (begin (set! n7600@idsyn? (lambda (n8111@x) (symbol? (n3003@syntax->datum n8111@x)))) (set! n7602@dup-error (lambda (n8109@name) (n2997@syntax-violation 'import '"two imports with different bindings" n8109@name))) (set! n7604@merge-substs (lambda (n8091@s n8092@subst) ((lambda (n8096@insert-to-subst) (begin (set! n8096@insert-to-subst (lambda (n8097@a n8098@subst) ((lambda (n8101@name n8102@label) ((lambda (n8105@t) (if n8105@t ((lambda (n8107@x) (if (eq? (cdr n8107@x) n8102@label) n8098@subst (n7602@dup-error n8101@name))) n8105@t) (cons n8097@a n8098@subst))) (assq n8101@name n8098@subst))) (car n8097@a) (cdr n8097@a)))) (if (null? n8091@s) n8092@subst (n8096@insert-to-subst (car n8091@s) (n7604@merge-substs (cdr n8091@s) n8092@subst))))) '#f))) (set! n7606@exclude* (lambda (n8049@sym* n8050@subst) ((lambda (n8054@exclude) (begin (set! n8054@exclude (lambda (n8075@sym n8076@subst) (if (null? n8076@subst) (n2997@syntax-violation 'import '"cannot rename unbound identifier" n8075@sym) (if (eq? n8075@sym (caar n8076@subst)) (values (cdar n8076@subst) (cdr n8076@subst)) ((lambda (n8079@a) (call-with-values (lambda () (n8054@exclude n8075@sym (cdr n8076@subst))) (lambda (n8083@n8081@old n8084@n8082@subst) ((lambda (n8087@subst n8088@old) (values n8088@old (cons n8079@a n8087@subst))) n8084@n8082@subst n8083@n8081@old)))) (car n8076@subst)))))) (if (null? n8049@sym*) (values '() n8050@subst) (call-with-values (lambda () (n8054@exclude (car n8049@sym*) n8050@subst)) (lambda (n8057@n8055@old n8058@n8056@subst) ((lambda (n8061@subst n8062@old) (call-with-values (lambda () (n7606@exclude* (cdr n8049@sym*) n8061@subst)) (lambda (n8067@n8065@old* n8068@n8066@subst) ((lambda (n8071@subst n8072@old*) (values (cons n8062@old n8072@old*) n8071@subst)) n8068@n8066@subst n8067@n8065@old*)))) n8058@n8056@subst n8057@n8055@old)))))) '#f))) (set! n7608@find* (lambda (n8041@sym* n8042@subst) (map (lambda (n8045@x) ((lambda (n8047@t) (if n8047@t (cdr n8047@t) (n2997@syntax-violation 'import '"cannot find identifier" n8045@x))) (assq n8045@x n8042@subst))) n8041@sym*))) (set! n7610@rem* (lambda (n8033@sym* n8034@subst) ((letrec ((n8037@f (lambda (n8039@subst) (if (null? n8039@subst) '() (if (memq (caar n8039@subst) n8033@sym*) (n8037@f (cdr n8039@subst)) (cons (car n8039@subst) (n8037@f (cdr n8039@subst)))))))) n8037@f) n8034@subst))) (set! n7612@remove-dups (lambda (n8031@ls) (if (null? n8031@ls) '() (if (memq (car n8031@ls) (cdr n8031@ls)) (n7612@remove-dups (cdr n8031@ls)) (cons (car n8031@ls) (n7612@remove-dups (cdr n8031@ls))))))) (set! n7614@parse-library-name (lambda (n7801@spec) ((lambda (n7804@subversion? n7806@subversion-pred n7808@version-pred) (begin (set! n7804@subversion? (lambda (n8027@x) ((lambda (n8029@x) (and (integer? n8029@x) (exact? n8029@x) (>= n8029@x '0))) (n3003@syntax->datum n8027@x)))) (set! n7806@subversion-pred (lambda (n7931@x*) ((lambda (n7933@t) ((lambda (n7935@ls/false) (if (and n7935@ls/false (apply (lambda (n7937@n) (n7804@subversion? n7937@n)) n7935@ls/false)) (apply (lambda (n7939@n) (lambda (n7941@x) (= n7941@x (n3003@syntax->datum n7939@n)))) n7935@ls/false) ((lambda (n7943@t) ((lambda (n7945@ls/false) (if (and n7945@ls/false (apply (lambda (n7947@p? n7948@sub*) (eq? (n3003@syntax->datum n7947@p?) 'and)) n7945@ls/false)) (apply (lambda (n7951@p? n7952@sub*) ((lambda (n7955@p*) (lambda (n7957@x) (for-all (lambda (n7959@p) (n7959@p n7957@x)) n7955@p*))) (map n7806@subversion-pred n7952@sub*))) n7945@ls/false) ((lambda (n7961@t) ((lambda (n7963@ls/false) (if (and n7963@ls/false (apply (lambda (n7965@p? n7966@sub*) (eq? (n3003@syntax->datum n7965@p?) 'or)) n7963@ls/false)) (apply (lambda (n7969@p? n7970@sub*) ((lambda (n7973@p*) (lambda (n7975@x) (exists (lambda (n7977@p) (n7977@p n7975@x)) n7973@p*))) (map n7806@subversion-pred n7970@sub*))) n7963@ls/false) ((lambda (n7979@t) ((lambda (n7981@ls/false) (if (and n7981@ls/false (apply (lambda (n7983@p? n7984@sub) (eq? (n3003@syntax->datum n7983@p?) 'not)) n7981@ls/false)) (apply (lambda (n7987@p? n7988@sub) ((lambda (n7991@p) (lambda (n7993@x) (not (n7991@p n7993@x)))) (n7806@subversion-pred n7988@sub))) n7981@ls/false) ((lambda (n7995@t) ((lambda (n7997@ls/false) (if (and n7997@ls/false (apply (lambda (n7999@p? n8000@n) (and (eq? (n3003@syntax->datum n7999@p?) '<=) (n7804@subversion? n8000@n))) n7997@ls/false)) (apply (lambda (n8003@p? n8004@n) (lambda (n8007@x) (<= n8007@x (n3003@syntax->datum n8004@n)))) n7997@ls/false) ((lambda (n8009@t) ((lambda (n8011@ls/false) (if (and n8011@ls/false (apply (lambda (n8013@p? n8014@n) (and (eq? (n3003@syntax->datum n8013@p?) '>=) (n7804@subversion? n8014@n))) n8011@ls/false)) (apply (lambda (n8017@p? n8018@n) (lambda (n8021@x) (>= n8021@x (n3003@syntax->datum n8018@n)))) n8011@ls/false) ((lambda (n8023@t) ((lambda (n8025@ls/false) (if n8025@ls/false (apply (lambda () (n2997@syntax-violation 'import '"invalid sub-version spec" n7801@spec n7931@x*)) n8025@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n8023@t))) (n2764@syntax-dispatch n8023@t '_))) n8009@t))) (n2764@syntax-dispatch n8009@t '(any any)))) n7995@t))) (n2764@syntax-dispatch n7995@t '(any any)))) n7979@t))) (n2764@syntax-dispatch n7979@t '(any any)))) n7961@t))) (n2764@syntax-dispatch n7961@t '(any . each-any)))) n7943@t))) (n2764@syntax-dispatch n7943@t '(any . each-any)))) n7933@t))) (n2764@syntax-dispatch n7933@t 'any))) n7931@x*))) (set! n7808@version-pred (lambda (n7851@x*) ((lambda (n7853@t) ((lambda (n7855@ls/false) (if n7855@ls/false (apply (lambda () (lambda (n7857@x) '#t)) n7855@ls/false) ((lambda (n7859@t) ((lambda (n7861@ls/false) (if (and n7861@ls/false (apply (lambda (n7863@c n7864@ver*) (eq? (n3003@syntax->datum n7863@c) 'and)) n7861@ls/false)) (apply (lambda (n7867@c n7868@ver*) ((lambda (n7871@p*) (lambda (n7873@x) (for-all (lambda (n7875@p) (n7875@p n7873@x)) n7871@p*))) (map n7808@version-pred n7868@ver*))) n7861@ls/false) ((lambda (n7877@t) ((lambda (n7879@ls/false) (if (and n7879@ls/false (apply (lambda (n7881@c n7882@ver*) (eq? (n3003@syntax->datum n7881@c) 'or)) n7879@ls/false)) (apply (lambda (n7885@c n7886@ver*) ((lambda (n7889@p*) (lambda (n7891@x) (exists (lambda (n7893@p) (n7893@p n7891@x)) n7889@p*))) (map n7808@version-pred n7886@ver*))) n7879@ls/false) ((lambda (n7895@t) ((lambda (n7897@ls/false) (if (and n7897@ls/false (apply (lambda (n7899@c n7900@ver) (eq? (n3003@syntax->datum n7899@c) 'not)) n7897@ls/false)) (apply (lambda (n7903@c n7904@ver) ((lambda (n7907@p) (lambda (n7909@x) (not (n7907@p n7909@x)))) (n7808@version-pred n7904@ver))) n7897@ls/false) ((lambda (n7911@t) ((lambda (n7913@ls/false) (if n7913@ls/false (apply (lambda (n7915@sub*) ((lambda (n7917@p*) (lambda (n7919@x) ((letrec ((n7921@f (lambda (n7923@p* n7924@x) (if (null? n7923@p*) '#t (if (null? n7924@x) '#f (and ((car n7923@p*) (car n7924@x)) (n7921@f (cdr n7923@p*) (cdr n7924@x)))))))) n7921@f) n7917@p* n7919@x))) (map n7806@subversion-pred n7915@sub*))) n7913@ls/false) ((lambda (n7927@t) ((lambda (n7929@ls/false) (if n7929@ls/false (apply (lambda () (n2997@syntax-violation 'import '"invalid version spec" n7801@spec n7851@x*)) n7929@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n7927@t))) (n2764@syntax-dispatch n7927@t '_))) n7911@t))) (n2764@syntax-dispatch n7911@t 'each-any))) n7895@t))) (n2764@syntax-dispatch n7895@t '(any any)))) n7877@t))) (n2764@syntax-dispatch n7877@t '(any . each-any)))) n7859@t))) (n2764@syntax-dispatch n7859@t '(any . each-any)))) n7853@t))) (n2764@syntax-dispatch n7853@t '()))) n7851@x*))) ((letrec ((n7809@f (lambda (n7811@x) ((lambda (n7813@t) ((lambda (n7815@ls/false) (if n7815@ls/false (apply (lambda (n7817@version-spec*) (values '() (n7808@version-pred n7817@version-spec*))) n7815@ls/false) ((lambda (n7819@t) ((lambda (n7821@ls/false) (if (and n7821@ls/false (apply (lambda (n7823@x n7824@x*) (n7600@idsyn? n7823@x)) n7821@ls/false)) (apply (lambda (n7827@x n7828@x*) (call-with-values (lambda () (n7809@f n7828@x*)) (lambda (n7833@n7831@name n7834@n7832@pred) ((lambda (n7837@pred n7838@name) (values (cons (n3003@syntax->datum n7827@x) n7838@name) n7837@pred)) n7834@n7832@pred n7833@n7831@name)))) n7821@ls/false) ((lambda (n7841@t) ((lambda (n7843@ls/false) (if n7843@ls/false (apply (lambda () (values '() (lambda (n7845@x) '#t))) n7843@ls/false) ((lambda (n7847@t) ((lambda (n7849@ls/false) (if n7849@ls/false (apply (lambda () (n2997@syntax-violation '#f '"invalid import spec" n7801@spec)) n7849@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n7847@t))) (n2764@syntax-dispatch n7847@t '_))) n7841@t))) (n2764@syntax-dispatch n7841@t '()))) n7819@t))) (n2764@syntax-dispatch n7819@t '(any . any)))) n7813@t))) (n2764@syntax-dispatch n7813@t '(each-any)))) n7811@x)))) n7809@f) n7801@spec))) '#f '#f '#f))) (set! n7616@import-library (lambda (n7787@spec*) (call-with-values (lambda () (n7614@parse-library-name n7787@spec*)) (lambda (n7791@n7789@name n7792@n7790@pred) ((lambda (n7795@pred n7796@name) (begin (if (null? n7796@name) (n2997@syntax-violation 'import '"empty library name" n7787@spec*) (void)) ((lambda (n7799@lib) (begin (if (not n7799@lib) (n2997@syntax-violation 'import '"cannot find library with required name" n7796@name) (void)) (if (not (n7795@pred (n1746@n1354@library-version n7799@lib))) (n2997@syntax-violation 'import '"library does not satisfy version specification" n7787@spec* n7799@lib) (void)) ((n2875@imp-collector) n7799@lib) (n1750@n1362@library-subst n7799@lib))) (n1786@n1434@find-library-by-name n7796@name)))) n7792@n7790@pred n7791@n7789@name))))) (set! n7618@get-import (lambda (n7645@spec) ((lambda (n7647@t) ((lambda (n7649@ls/false) (if (and n7649@ls/false (apply (lambda (n7651@x n7652@x*) (not (memq (n3003@syntax->datum n7651@x) '(for rename except only prefix library)))) n7649@ls/false)) (apply (lambda (n7655@x n7656@x*) (n7616@import-library (cons n7655@x n7656@x*))) n7649@ls/false) ((lambda (n7659@t) ((lambda (n7661@ls/false) (if (and n7661@ls/false (apply (lambda (n7663@rename n7664@isp n7665@old* n7666@new*) (and (eq? (n3003@syntax->datum n7663@rename) 'rename) (for-all n7600@idsyn? n7665@old*) (for-all n7600@idsyn? n7666@new*))) n7661@ls/false)) (apply (lambda (n7671@rename n7672@isp n7673@old* n7674@new*) ((lambda (n7679@subst n7680@old* n7681@new*) ((lambda (n7685@old-label*) ((lambda (n7687@subst) (n7604@merge-substs (map cons n7681@new* n7685@old-label*) n7687@subst)) (n7610@rem* n7680@old* n7679@subst))) (n7608@find* n7680@old* n7679@subst))) (n7618@get-import n7672@isp) (map n3003@syntax->datum n7673@old*) (map n3003@syntax->datum n7674@new*))) n7661@ls/false) ((lambda (n7689@t) ((lambda (n7691@ls/false) (if (and n7691@ls/false (apply (lambda (n7693@except n7694@isp n7695@sym*) (and (eq? (n3003@syntax->datum n7693@except) 'except) (for-all n7600@idsyn? n7695@sym*))) n7691@ls/false)) (apply (lambda (n7699@except n7700@isp n7701@sym*) ((lambda (n7705@subst) (n7610@rem* (map n3003@syntax->datum n7701@sym*) n7705@subst)) (n7618@get-import n7700@isp))) n7691@ls/false) ((lambda (n7707@t) ((lambda (n7709@ls/false) (if (and n7709@ls/false (apply (lambda (n7711@only n7712@isp n7713@sym*) (and (eq? (n3003@syntax->datum n7711@only) 'only) (for-all n7600@idsyn? n7713@sym*))) n7709@ls/false)) (apply (lambda (n7717@only n7718@isp n7719@sym*) ((lambda (n7723@subst n7724@sym*) ((lambda (n7727@sym*) ((lambda (n7729@lab*) (map cons n7727@sym* n7729@lab*)) (n7608@find* n7727@sym* n7723@subst))) (n7612@remove-dups n7724@sym*))) (n7618@get-import n7718@isp) (map n3003@syntax->datum n7719@sym*))) n7709@ls/false) ((lambda (n7731@t) ((lambda (n7733@ls/false) (if (and n7733@ls/false (apply (lambda (n7735@prefix n7736@isp n7737@p) (and (eq? (n3003@syntax->datum n7735@prefix) 'prefix) (n7600@idsyn? n7737@p))) n7733@ls/false)) (apply (lambda (n7741@prefix n7742@isp n7743@p) ((lambda (n7747@subst n7748@prefix) (map (lambda (n7751@x) (cons (string->symbol (string-append n7748@prefix (symbol->string (car n7751@x)))) (cdr n7751@x))) n7747@subst)) (n7618@get-import n7742@isp) (symbol->string (n3003@syntax->datum n7743@p)))) n7733@ls/false) ((lambda (n7753@t) ((lambda (n7755@ls/false) (if (and n7755@ls/false (apply (lambda (n7757@library n7758@spec*) (eq? (n3003@syntax->datum n7757@library) 'library)) n7755@ls/false)) (apply (lambda (n7761@library n7762@spec*) (n7616@import-library n7762@spec*)) n7755@ls/false) ((lambda (n7765@t) ((lambda (n7767@ls/false) (if (and n7767@ls/false (apply (lambda (n7769@for n7770@isp n7771@rest) (eq? (n3003@syntax->datum n7769@for) 'for)) n7767@ls/false)) (apply (lambda (n7775@for n7776@isp n7777@rest) (n7618@get-import n7776@isp)) n7767@ls/false) ((lambda (n7781@t) ((lambda (n7783@ls/false) (if n7783@ls/false (apply (lambda (n7785@spec) (n2997@syntax-violation 'import '"invalid import spec" n7785@spec)) n7783@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n7781@t))) (n2764@syntax-dispatch n7781@t 'any))) n7765@t))) (n2764@syntax-dispatch n7765@t '(any any . any)))) n7753@t))) (n2764@syntax-dispatch n7753@t '(any each-any)))) n7731@t))) (n2764@syntax-dispatch n7731@t '(any any any)))) n7707@t))) (n2764@syntax-dispatch n7707@t '(any any . each-any)))) n7689@t))) (n2764@syntax-dispatch n7689@t '(any any . each-any)))) n7659@t))) (n2764@syntax-dispatch n7659@t '(any any . #(each (any any)))))) n7647@t))) (n2764@syntax-dispatch n7647@t '(any . each-any)))) n7645@spec))) (set! n7620@add-imports! (lambda (n7629@imp n7630@h) ((lambda (n7633@subst) (for-each (lambda (n7635@x) ((lambda (n7637@name n7638@label) ((lambda (n7641@t) (if n7641@t ((lambda (n7643@l) (if (not (eq? n7643@l n7638@label)) (n7602@dup-error n7637@name) (void))) n7641@t) (hashtable-set! n7630@h n7637@name n7638@label))) (hashtable-ref n7630@h n7637@name '#f))) (car n7635@x) (cdr n7635@x))) n7633@subst)) (n7618@get-import n7629@imp)))) (lambda (n7621@imp*) ((letrec ((n7623@f (lambda (n7625@imp* n7626@h) (if (null? n7625@imp*) (hashtable-entries n7626@h) (begin (n7620@add-imports! (car n7625@imp*) n7626@h) (n7623@f (cdr n7625@imp*) n7626@h)))))) n7623@f) n7621@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! n2867@make-top-rib (lambda (n8113@names n8114@labels) ((lambda (n8117@rib) (begin (vector-for-each (lambda (n8119@name n8120@label) (begin (if (not (symbol? n8119@name)) (error 'make-top-rib '"BUG: not a symbol" n8119@name) (void)) (n2190@extend-rib/nc! n8117@rib (n2213@make-stx n8119@name n2135@top-mark* '() '()) n8120@label))) n8113@names n8114@labels) n8117@rib)) (n2186@make-empty-rib)))) (set! n2869@make-collector (lambda () ((lambda (n8123@ls) (lambda n8127 ((lambda (n8128) (if (= n8128 '0) (apply (lambda () n8123@ls) n8127) (if (= n8128 '1) (apply (lambda (n8125@x) (set! n8123@ls (n2128@set-cons n8125@x n8123@ls))) n8127) (error 'apply '"invalid arg count")))) (length n8127)))) '()))) (set! n2871@inv-collector (n1165@n943@make-parameter (lambda n8129@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (n8131@x) (begin (if (not (procedure? n8131@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" n8131@x) (void)) n8131@x)))) (set! n2873@vis-collector (n1165@n943@make-parameter (lambda n8133@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (n8135@x) (begin (if (not (procedure? n8135@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" n8135@x) (void)) n8135@x)))) (set! n2875@imp-collector (n1165@n943@make-parameter (lambda n8137@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (n8139@x) (begin (if (not (procedure? n8139@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" n8139@x) (void)) n8139@x)))) (set! n2877@chi-library-internal (lambda (n8141@e* n8142@rib n8143@top?) (call-with-values (lambda () (n2855@chi-body* n8141@e* '() '() '() '() '() '() '() n8142@rib n8143@top?)) (lambda (n8155@n8147@e* n8156@n8148@r n8157@n8149@mr n8158@n8150@lex* n8159@n8151@rhs* n8160@n8152@mod** n8161@n8153@_kwd* n8162@n8154@exp*) ((lambda (n8171@exp* n8172@_kwd* n8173@mod** n8174@rhs* n8175@lex* n8176@mr n8177@r n8178@e*) (values (append (apply append (reverse n8173@mod**)) n8178@e*) n8177@r n8176@mr (reverse n8175@lex*) (reverse n8174@rhs*) n8171@exp*)) n8162@n8154@exp* n8161@n8153@_kwd* n8160@n8152@mod** n8159@n8151@rhs* n8158@n8150@lex* n8157@n8149@mr n8156@n8148@r n8155@n8147@e*))))) (set! n2879@chi-interaction-expr (lambda (n8187@e n8188@rib n8189@r) (call-with-values (lambda () (n2855@chi-body* (list n8187@e) n8189@r n8189@r '() '() '() '() '() n8188@rib '#t)) (lambda (n8201@n8193@e* n8202@n8194@r n8203@n8195@mr n8204@n8196@lex* n8205@n8197@rhs* n8206@n8198@mod** n8207@n8199@_kwd* n8208@n8200@_exp*) ((lambda (n8217@_exp* n8218@_kwd* n8219@mod** n8220@rhs* n8221@lex* n8222@mr n8223@r n8224@e*) ((lambda (n8233@e*) ((lambda (n8235@e) (values n8235@e n8223@r)) (if (null? n8233@e*) (n2107@n1965@build-void) (if (null? (cdr n8233@e*)) (car n8233@e*) (n2106@n1963@build-sequence '#f n8233@e*))))) (n2812@expand-interaction-rhs*/init* (reverse n8221@lex*) (reverse n8220@rhs*) (append (apply append (reverse n8219@mod**)) n8224@e*) n8223@r n8222@mr))) n8208@n8200@_exp* n8207@n8199@_kwd* n8206@n8198@mod** n8205@n8197@rhs* n8204@n8196@lex* n8203@n8195@mr n8202@n8194@r n8201@n8193@e*))))) (set! n2881@library-body-expander (lambda (n8237@name n8238@main-exp* n8239@imp* n8240@b* n8241@top?) ((lambda (n8248@itc) (begin (set! n8248@itc (n2869@make-collector)) ((lambda (n8253@n8249@imp-collector n8254@n8250@top-level-context n8255@n8251@imp-collector n8256@n8252@top-level-context) ((lambda (n8261@swap) (dynamic-wind n8261@swap (lambda () (call-with-values (lambda () (n2865@parse-import-spec* n8239@imp*)) (lambda (n8265@n8263@subst-names n8266@n8264@subst-labels) ((lambda (n8269@subst-labels n8270@subst-names) ((lambda (n8273@rib) ((lambda (n8276@wrap) (begin (set! n8276@wrap (lambda (n8384@x) (n2213@make-stx n8384@x n2135@top-mark* (list n8273@rib) '()))) ((lambda (n8277@b* n8278@main-exp* n8279@rtc n8280@vtc) ((lambda (n8289@n8285@inv-collector n8290@n8286@vis-collector n8291@n8287@inv-collector n8292@n8288@vis-collector) ((lambda (n8297@swap) (dynamic-wind n8297@swap (lambda () (call-with-values (lambda () (n2877@chi-library-internal n8277@b* n8273@rib n8241@top?)) (lambda (n8305@n8299@init* n8306@n8300@r n8307@n8301@mr n8308@n8302@lex* n8309@n8303@rhs* n8310@n8304@internal-exp*) ((lambda (n8317@internal-exp* n8318@rhs* n8319@lex* n8320@mr n8321@r n8322@init*) (call-with-values (lambda () (n2859@parse-exports (append n8278@main-exp* n8317@internal-exp*))) (lambda (n8331@n8329@exp-name* n8332@n8330@exp-id*) ((lambda (n8335@exp-id* n8336@exp-name*) (begin (n2194@seal-rib! n8273@rib) ((lambda (n8339@init*) ((lambda (n8341@rhs*) ((lambda () (begin (n2196@unseal-rib! n8273@rib) ((lambda (n8343@loc* n8344@export-subst) ((lambda (n8348@errstr) (begin (set! n8348@errstr '"attempt to export mutated variable") (call-with-values (lambda () (n2977@make-export-env/macros n8319@lex* n8343@loc* n8321@r)) (lambda (n8352@n8349@export-env n8353@n8350@global* n8354@n8351@macro*) ((lambda (n8358@macro* n8359@global* n8360@export-env) (begin (for-each (lambda (n8364@s) ((lambda (n8366@name n8367@label) ((lambda (n8370@p) (if n8370@p ((lambda (n8372@b) ((lambda (n8374@type) (if (eq? n8374@type 'mutable) (n2997@syntax-violation 'export n8348@errstr n8366@name) (void))) (car n8372@b))) (cdr n8370@p)) (void))) (assq n8367@label n8360@export-env))) (car n8364@s) (cdr n8364@s))) n8344@export-subst) ((lambda (n8376@invoke-body n8377@invoke-definitions) (values (n8248@itc) (n8279@rtc) (n8280@vtc) (n2106@n1963@build-sequence '#f (append n8377@invoke-definitions (list n8376@invoke-body))) n8358@macro* n8344@export-subst n8360@export-env)) (n2109@n1969@build-letrec* '#f n8319@lex* n8341@rhs* (n2973@build-exports n8359@global* n8339@init*)) (map n2102@n1800@build-global-define (map cdr n8359@global*))))) n8354@n8351@macro* n8353@n8350@global* n8352@n8349@export-env))))) '#f)) (map n2141@gen-global n8319@lex*) (n2975@make-export-subst n8336@exp-name* n8335@exp-id*)))))) (n2814@chi-rhs* n8318@rhs* n8321@r n8320@mr))) (n2794@chi-expr* n8322@init* n8321@r n8320@mr)))) n8332@n8330@exp-id* n8331@n8329@exp-name*)))) n8310@n8304@internal-exp* n8309@n8303@rhs* n8308@n8302@lex* n8307@n8301@mr n8306@n8300@r n8305@n8299@init*)))) n8297@swap)) (lambda () (begin ((lambda (n8380@t) (begin (n8289@n8285@inv-collector n8291@n8287@inv-collector) (set! n8291@n8287@inv-collector n8380@t))) (n8289@n8285@inv-collector)) ((lambda (n8382@t) (begin (n8290@n8286@vis-collector n8292@n8288@vis-collector) (set! n8292@n8288@vis-collector n8382@t))) (n8290@n8286@vis-collector)))))) n2871@inv-collector n2873@vis-collector n8279@rtc n8280@vtc)) (map n8276@wrap n8240@b*) (map n8276@wrap n8238@main-exp*) (n2869@make-collector) (n2869@make-collector)))) '#f)) (n2867@make-top-rib n8270@subst-names n8269@subst-labels))) n8266@n8264@subst-labels n8265@n8263@subst-names)))) n8261@swap)) (lambda () (begin ((lambda (n8386@t) (begin (n8253@n8249@imp-collector n8255@n8251@imp-collector) (set! n8255@n8251@imp-collector n8386@t))) (n8253@n8249@imp-collector)) ((lambda (n8388@t) (begin (n8254@n8250@top-level-context n8256@n8252@top-level-context) (set! n8256@n8252@top-level-context n8388@t))) (n8254@n8250@top-level-context)))))) n2875@imp-collector n3011@top-level-context n8248@itc '#f))) '#f))) (set! n2883@core-library-expander (lambda (n8390@e n8391@verify-name) (call-with-values (lambda () (n2863@parse-library n8390@e)) (lambda (n8398@n8394@name* n8399@n8395@exp* n8400@n8396@imp* n8401@n8397@b*) ((lambda (n8406@b* n8407@imp* n8408@exp* n8409@name*) (call-with-values (lambda () (n2861@parse-library-name n8409@name*)) (lambda (n8416@n8414@name n8417@n8415@ver) ((lambda (n8420@ver n8421@name) (begin (n8391@verify-name n8421@name) (call-with-values (lambda () (n2881@library-body-expander n8421@name n8408@exp* n8407@imp* n8406@b* '#f)) (lambda (n8431@n8424@imp* n8432@n8425@invoke-req* n8433@n8426@visit-req* n8434@n8427@invoke-code n8435@n8428@visit-code n8436@n8429@export-subst n8437@n8430@export-env) ((lambda (n8445@export-env n8446@export-subst n8447@visit-code n8448@invoke-code n8449@visit-req* n8450@invoke-req* n8451@imp*) (values n8421@name n8420@ver n8451@imp* n8450@invoke-req* n8449@visit-req* n8448@invoke-code n8447@visit-code n8446@export-subst n8445@export-env)) n8437@n8430@export-env n8436@n8429@export-subst n8435@n8428@visit-code n8434@n8427@invoke-code n8433@n8426@visit-req* n8432@n8425@invoke-req* n8431@n8424@imp*))))) n8417@n8415@ver n8416@n8414@name)))) n8401@n8397@b* n8400@n8396@imp* n8399@n8395@exp* n8398@n8394@name*))))) (set! n2885@parse-top-level-program (lambda (n8459@e*) ((lambda (n8461@t) ((lambda (n8463@ls/false) (if (and n8463@ls/false (apply (lambda (n8465@import n8466@imp* n8467@b*) (eq? (n3003@syntax->datum n8465@import) 'import)) n8463@ls/false)) (apply (lambda (n8471@import n8472@imp* n8473@b*) (values n8472@imp* n8473@b*)) n8463@ls/false) ((lambda (n8477@t) ((lambda (n8479@ls/false) (if (and n8479@ls/false (apply (lambda (n8481@import n8482@x n8483@y) (eq? (n3003@syntax->datum n8481@import) 'import)) n8479@ls/false)) (apply (lambda (n8487@import n8488@x n8489@y) (n2997@syntax-violation 'expander '"invalid syntax of top-level program" (n2261@syntax-car n8459@e*))) n8479@ls/false) ((lambda (n8493@t) ((lambda (n8495@ls/false) (if n8495@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) n8495@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n8493@t))) (n2764@syntax-dispatch n8493@t '_))) n8477@t))) (n2764@syntax-dispatch n8477@t '((any . any) . any)))) n8461@t))) (n2764@syntax-dispatch n8461@t '((any . each-any) . each-any)))) n8459@e*))) (set! n2887@top-level-expander (lambda (n8497@e*) (call-with-values (lambda () (n2885@parse-top-level-program n8497@e*)) (lambda (n8501@n8499@imp* n8502@n8500@b*) ((lambda (n8505@b* n8506@imp*) (call-with-values (lambda () (n2881@library-body-expander '() '() n8506@imp* n8505@b* '#t)) (lambda (n8516@n8509@imp* n8517@n8510@invoke-req* n8518@n8511@visit-req* n8519@n8512@invoke-code n8520@n8513@visit-code n8521@n8514@export-subst n8522@n8515@export-env) ((lambda (n8530@export-env n8531@export-subst n8532@visit-code n8533@invoke-code n8534@visit-req* n8535@invoke-req* n8536@imp*) (values n8535@invoke-req* n8533@invoke-code)) n8522@n8515@export-env n8521@n8514@export-subst n8520@n8513@visit-code n8519@n8512@invoke-code n8518@n8511@visit-req* n8517@n8510@invoke-req* n8516@n8509@imp*)))) n8502@n8500@b* n8501@n8499@imp*))))) (set! n2893@n2888 (make-record-type-descriptor 'env '#f 'n2891 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! n2895@n2890 '#f) (set! n2897@n2889 (make-record-constructor-descriptor n2893@n2888 '#f n2895@n2890)) (set! n2900@env? (record-predicate n2893@n2888)) (set! n2902@make-env (record-constructor n2897@n2889)) (set! n2904@env-names (record-accessor n2893@n2888 '0)) (set! n2906@env-labels (record-accessor n2893@n2888 '1)) (set! n2908@env-itc (record-accessor n2893@n2888 '2)) (set! n2910@set-env-names! (record-mutator n2893@n2888 '0)) (set! n2912@set-env-labels! (record-mutator n2893@n2888 '1)) (set! n2914@set-env-itc! (record-mutator n2893@n2888 '2)) (set! n2916@rp (n1162@n937@make-record-printer 'env (lambda (n8544@x n8545@p n8546@wr) (display '"#<environment>" n8545@p)))) (set! n2922@n2917 (make-record-type-descriptor 'interaction-env '#f 'n2920 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! n2924@n2919 '#f) (set! n2926@n2918 (make-record-constructor-descriptor n2922@n2917 '#f n2924@n2919)) (set! n2929@interaction-env? (record-predicate n2922@n2917)) (set! n2931@make-interaction-env (record-constructor n2926@n2918)) (set! n2933@interaction-env-rib (record-accessor n2922@n2917 '0)) (set! n2935@interaction-env-r (record-accessor n2922@n2917 '1)) (set! n2937@interaction-env-locs (record-accessor n2922@n2917 '2)) (set! n2939@set-interaction-env-rib! (record-mutator n2922@n2917 '0)) (set! n2941@set-interaction-env-r! (record-mutator n2922@n2917 '1)) (set! n2943@set-interaction-env-locs! (record-mutator n2922@n2917 '2)) (set! n2945@rp (n1162@n937@make-record-printer 'interaction-env (lambda (n8550@x n8551@p n8552@wr) (display '"#<environment>" n8551@p)))) (set! n2947@interaction-environment-symbols (lambda () (n2955@environment-symbols (n3009@interaction-environment)))) (set! n2949@environment-bindings (lambda (n8556@e) (vector->list (vector-map (lambda (n8558@name n8559@label) (n2951@parse-binding (cons n8558@name (n1792@n1446@imported-label->binding n8559@label)))) (n2904@env-names n8556@e) (n2906@env-labels n8556@e))))) (set! n2951@parse-binding (lambda (n8562@b) (cons (car n8562@b) ((lambda (n8564@t) (if (memv n8564@t '(core-prim global)) 'procedure (if (memv n8564@t '(core-macro macro global-macro)) 'syntax (if (memv n8564@t '($core-rtd)) 'record (if (eq? (car n8562@b) (cadr n8562@b)) 'syntax 'unknown))))) (cadr n8562@b))))) (set! n2953@environment? (lambda (n8566@x) (or (n2900@env? n8566@x) (n2929@interaction-env? n8566@x)))) (set! n2955@environment-symbols (lambda (n8568@x) (if (n2900@env? n8568@x) (vector->list (n2904@env-names n8568@x)) (if (n2929@interaction-env? n8568@x) (map values (n2166@rib-sym* (n2933@interaction-env-rib n8568@x))) (assertion-violation 'environment-symbols '"not an environment" n8568@x))))) (set! n2957@environment (lambda n8570@imp* ((lambda (n8572@itc) ((lambda (n8576@n8574@imp-collector n8577@n8575@imp-collector) ((lambda (n8580@swap) (dynamic-wind n8580@swap (lambda () (call-with-values (lambda () (n2865@parse-import-spec* n8570@imp*)) (lambda (n8584@n8582@subst-names n8585@n8583@subst-labels) ((lambda (n8588@subst-labels n8589@subst-names) (n2902@make-env n8589@subst-names n8588@subst-labels n8572@itc)) n8585@n8583@subst-labels n8584@n8582@subst-names)))) n8580@swap)) (lambda () ((lambda (n8592@t) (begin (n8576@n8574@imp-collector n8577@n8575@imp-collector) (set! n8577@n8575@imp-collector n8592@t))) (n8576@n8574@imp-collector))))) n2875@imp-collector n8572@itc)) (n2869@make-collector)))) (set! n2959@null-environment (lambda (n8594@n) (begin (if (not (eqv? n8594@n '5)) (assertion-violation 'null-environment '"not 5" n8594@n) (void)) (n2957@environment '(psyntax null-environment-5))))) (set! n2961@scheme-report-environment (lambda (n8596@n) (begin (if (not (eqv? n8596@n '5)) (assertion-violation 'scheme-report-environment '"not 5" n8596@n) (void)) (n2957@environment '(psyntax scheme-report-environment-5))))) (set! n2963@expand (lambda (n8598@x n8599@env) (if (n2900@env? n8599@env) ((lambda (n8602@rib) ((lambda (n8604@x n8605@itc n8606@rtc n8607@vtc) ((lambda (n8612@x) (begin (n2194@seal-rib! n8602@rib) (values n8612@x (n8606@rtc)))) ((lambda (n8622@n8614@top-level-context n8623@n8615@inv-collector n8624@n8616@vis-collector n8625@n8617@imp-collector n8626@n8618@top-level-context n8627@n8619@inv-collector n8628@n8620@vis-collector n8629@n8621@imp-collector) ((lambda (n8638@swap) (dynamic-wind n8638@swap (lambda () (n2798@chi-expr n8604@x '() '())) n8638@swap)) (lambda () (begin ((lambda (n8640@t) (begin (n8622@n8614@top-level-context n8626@n8618@top-level-context) (set! n8626@n8618@top-level-context n8640@t))) (n8622@n8614@top-level-context)) ((lambda (n8642@t) (begin (n8623@n8615@inv-collector n8627@n8619@inv-collector) (set! n8627@n8619@inv-collector n8642@t))) (n8623@n8615@inv-collector)) ((lambda (n8644@t) (begin (n8624@n8616@vis-collector n8628@n8620@vis-collector) (set! n8628@n8620@vis-collector n8644@t))) (n8624@n8616@vis-collector)) ((lambda (n8646@t) (begin (n8625@n8617@imp-collector n8629@n8621@imp-collector) (set! n8629@n8621@imp-collector n8646@t))) (n8625@n8617@imp-collector)))))) n3011@top-level-context n2871@inv-collector n2873@vis-collector n2875@imp-collector '#f n8606@rtc n8607@vtc n8605@itc))) (n2213@make-stx n8598@x n2135@top-mark* (list n8602@rib) '()) (n2908@env-itc n8599@env) (n2869@make-collector) (n2869@make-collector))) (n2867@make-top-rib (n2904@env-names n8599@env) (n2906@env-labels n8599@env))) (if (n2929@interaction-env? n8599@env) ((lambda (n8648@rib n8649@r n8650@rtc) ((lambda (n8654@x) (call-with-values (lambda () ((lambda (n8666@n8658@top-level-context n8667@n8659@inv-collector n8668@n8660@vis-collector n8669@n8661@imp-collector n8670@n8662@top-level-context n8671@n8663@inv-collector n8672@n8664@vis-collector n8673@n8665@imp-collector) ((lambda (n8682@swap) (dynamic-wind n8682@swap (lambda () (n2879@chi-interaction-expr n8654@x n8648@rib n8649@r)) n8682@swap)) (lambda () (begin ((lambda (n8684@t) (begin (n8666@n8658@top-level-context n8670@n8662@top-level-context) (set! n8670@n8662@top-level-context n8684@t))) (n8666@n8658@top-level-context)) ((lambda (n8686@t) (begin (n8667@n8659@inv-collector n8671@n8663@inv-collector) (set! n8671@n8663@inv-collector n8686@t))) (n8667@n8659@inv-collector)) ((lambda (n8688@t) (begin (n8668@n8660@vis-collector n8672@n8664@vis-collector) (set! n8672@n8664@vis-collector n8688@t))) (n8668@n8660@vis-collector)) ((lambda (n8690@t) (begin (n8669@n8661@imp-collector n8673@n8665@imp-collector) (set! n8673@n8665@imp-collector n8690@t))) (n8669@n8661@imp-collector)))))) n3011@top-level-context n2871@inv-collector n2873@vis-collector n2875@imp-collector n8599@env n8650@rtc (n2869@make-collector) (n2869@make-collector))) (lambda (n8692@n8656@e n8693@n8657@r^) ((lambda (n8696@r^ n8697@e) (begin (n2941@set-interaction-env-r! n8599@env n8696@r^) (values n8697@e (n8650@rtc)))) n8693@n8657@r^ n8692@n8656@e)))) (n2213@make-stx n8598@x n2135@top-mark* (list n8648@rib) '()))) (n2933@interaction-env-rib n8599@env) (n2935@interaction-env-r n8599@env) (n2869@make-collector)) (assertion-violation 'expand '"not an environment" n8599@env))))) (set! n2965@eval (lambda (n8700@x n8701@env) (begin (if (not (n2953@environment? n8701@env)) (error 'eval '"not an environment" n8701@env) (void)) (call-with-values (lambda () (n2963@expand n8700@x n8701@env)) (lambda (n8706@n8704@x n8707@n8705@invoke-req*) ((lambda (n8710@invoke-req* n8711@x) (begin (for-each n1793@n1448@invoke-library n8710@invoke-req*) (eval-core (n1249@n1177@expanded->core n8711@x)))) n8707@n8705@invoke-req* n8706@n8704@x)))))) (set! n2967@library-expander (lambda n8815 ((lambda (n8816) (if (= n8816 '3) (apply (lambda (n8714@x n8715@filename n8716@verify-name) ((lambda (n8721@build-visit-code n8723@visit!) (begin (set! n8721@build-visit-code (lambda (n8797@macro*) (if (null? n8797@macro*) (n2107@n1965@build-void) (n2106@n1963@build-sequence '#f (map (lambda (n8799@x) ((lambda (n8801@loc n8802@src) (list 'set! n8801@loc n8802@src)) (car n8799@x) (cddr n8799@x))) n8797@macro*))))) (set! n8723@visit! (lambda (n8789@macro*) (for-each (lambda (n8791@x) ((lambda (n8793@loc n8794@proc) (set-symbol-value! n8793@loc n8794@proc)) (car n8791@x) (cadr n8791@x))) n8789@macro*))) (call-with-values (lambda () (n2883@core-library-expander n8714@x n8716@verify-name)) (lambda (n8733@n8724@name n8734@n8725@ver n8735@n8726@imp* n8736@n8727@inv* n8737@n8728@vis* n8738@n8729@invoke-code n8739@n8730@macro* n8740@n8731@export-subst n8741@n8732@export-env) ((lambda (n8751@export-env n8752@export-subst n8753@macro* n8754@invoke-code n8755@vis* n8756@inv* n8757@imp* n8758@ver n8759@name) ((lambda (n8769@id n8770@name n8771@ver n8772@imp* n8773@vis* n8774@inv* n8775@visit-proc n8776@invoke-proc n8777@visit-code n8778@invoke-code) (begin (n1791@n1444@install-library n8769@id n8770@name n8771@ver n8772@imp* n8773@vis* n8774@inv* n8752@export-subst n8751@export-env n8775@visit-proc n8776@invoke-proc n8777@visit-code n8778@invoke-code '#t n8715@filename) (values n8769@id n8770@name n8771@ver n8772@imp* n8773@vis* n8774@inv* n8778@invoke-code n8777@visit-code n8752@export-subst n8751@export-env))) (n1151@n915@gensym) n8759@name n8758@ver (map n1797@n1456@library-spec n8757@imp*) (map n1797@n1456@library-spec n8755@vis*) (map n1797@n1456@library-spec n8756@inv*) (lambda () (n8723@visit! n8753@macro*)) (lambda () (eval-core (n1249@n1177@expanded->core n8754@invoke-code))) (n8721@build-visit-code n8753@macro*) n8754@invoke-code)) n8741@n8732@export-env n8740@n8731@export-subst n8739@n8730@macro* n8738@n8729@invoke-code n8737@n8728@vis* n8736@n8727@inv* n8735@n8726@imp* n8734@n8725@ver n8733@n8724@name))))) '#f '#f)) n8815) (if (= n8816 '2) (apply (lambda (n8805@x n8806@filename) (n2967@library-expander n8805@x n8806@filename (lambda (n8809@x) (values)))) n8815) (if (= n8816 '1) (apply (lambda (n8811@x) (n2967@library-expander n8811@x '#f (lambda (n8813@x) (values)))) n8815) (error 'apply '"invalid arg count"))))) (length n8815)))) (set! n2969@boot-library-expand (lambda (n8817@x) (call-with-values (lambda () (n2967@library-expander n8817@x)) (lambda (n8829@n8819@id n8830@n8820@name n8831@n8821@ver n8832@n8822@imp* n8833@n8823@vis* n8834@n8824@inv* n8835@n8825@invoke-code n8836@n8826@visit-code n8837@n8827@export-subst n8838@n8828@export-env) ((lambda (n8849@export-env n8850@export-subst n8851@visit-code n8852@invoke-code n8853@inv* n8854@vis* n8855@imp* n8856@ver n8857@name n8858@id) (values n8857@name n8852@invoke-code n8850@export-subst n8849@export-env)) n8838@n8828@export-env n8837@n8827@export-subst n8836@n8826@visit-code n8835@n8825@invoke-code n8834@n8824@inv* n8833@n8823@vis* n8832@n8822@imp* n8831@n8821@ver n8830@n8820@name n8829@n8819@id))))) (set! n2971@rev-map-append (lambda (n8869@f n8870@ls n8871@ac) (if (null? n8870@ls) n8871@ac (n2971@rev-map-append n8869@f (cdr n8870@ls) (cons (n8869@f (car n8870@ls)) n8871@ac))))) (set! n2973@build-exports (lambda (n8875@lex*+loc* n8876@init*) (n2106@n1963@build-sequence '#f (cons (n2107@n1965@build-void) (n2971@rev-map-append (lambda (n8879@x) (list 'set! (cdr n8879@x) (car n8879@x))) n8875@lex*+loc* n8876@init*))))) (set! n2975@make-export-subst (lambda (n8881@name* n8882@id*) (map (lambda (n8885@name n8886@id) ((lambda (n8889@label) (begin (if (not n8889@label) (n2997@syntax-violation '#f '"cannot export unbound identifier" n8886@id) (void)) (cons n8885@name n8889@label))) (n2293@id->label n8886@id))) n8881@name* n8882@id*))) (set! n2977@make-export-env/macros (lambda (n8891@lex* n8892@loc* n8893@r) ((lambda (n8898@lookup) (begin (set! n8898@lookup (lambda (n8927@x) ((letrec ((n8929@f (lambda (n8931@x n8932@lex* n8933@loc*) (if (pair? n8932@lex*) (if (eq? n8931@x (car n8932@lex*)) (car n8933@loc*) (n8929@f n8931@x (cdr n8932@lex*) (cdr n8933@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) n8929@f) n8927@x n8891@lex* n8892@loc*))) ((letrec ((n8899@f (lambda (n8901@r n8902@env n8903@global* n8904@macro*) (if (null? n8901@r) (values n8902@env n8903@global* n8904@macro*) ((lambda (n8909@x) ((lambda (n8911@label n8912@b) ((lambda (n8915@t) (if (memv n8915@t '(lexical)) ((lambda (n8917@v) ((lambda (n8919@loc n8920@type) (n8899@f (cdr n8901@r) (cons (cons* n8911@label n8920@type n8919@loc) n8902@env) (cons (cons (n2648@lexical-var n8917@v) n8919@loc) n8903@global*) n8904@macro*)) (n8898@lookup (n2648@lexical-var n8917@v)) (if (n2650@lexical-mutable? n8917@v) 'mutable 'global))) (n2303@binding-value n8912@b)) (if (memv n8915@t '(local-macro)) ((lambda (n8923@loc) (n8899@f (cdr n8901@r) (cons (cons* n8911@label 'global-macro n8923@loc) n8902@env) n8903@global* (cons (cons n8923@loc (n2303@binding-value n8912@b)) n8904@macro*))) (n1151@n915@gensym)) (if (memv n8915@t '(local-macro!)) ((lambda (n8925@loc) (n8899@f (cdr n8901@r) (cons (cons* n8911@label 'global-macro! n8925@loc) n8902@env) n8903@global* (cons (cons n8925@loc (n2303@binding-value n8912@b)) n8904@macro*))) (n1151@n915@gensym)) (if (memv n8915@t '($rtd $module)) (n8899@f (cdr n8901@r) (cons n8909@x n8902@env) n8903@global* n8904@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (n2301@binding-type n8912@b) (n2303@binding-value n8912@b))))))) (n2301@binding-type n8912@b))) (car n8909@x) (cdr n8909@x))) (car n8901@r)))))) n8899@f) n8893@r '() '() '()))) '#f))) (set! n2979@generate-temporaries (lambda (n8937@ls) ((lambda (n8939@t) ((lambda (n8941@ls/false) (if n8941@ls/false (apply (lambda (n8943@ls) (map (lambda (n8945@x) (n2213@make-stx ((lambda (n8947@x) (if (or (symbol? n8947@x) (string? n8947@x)) (n1151@n915@gensym n8947@x) (n1151@n915@gensym 't))) (n3003@syntax->datum n8945@x)) n2135@top-mark* '() '())) n8943@ls)) n8941@ls/false) ((lambda (n8949@t) ((lambda (n8951@ls/false) (if n8951@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) n8951@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n8949@t))) (n2764@syntax-dispatch n8949@t '_))) n8939@t))) (n2764@syntax-dispatch n8939@t 'each-any))) n8937@ls))) (set! n2981@free-identifier=? (lambda (n8953@x n8954@y) (if (n2267@id? n8953@x) (if (n2267@id? n8954@y) (n2275@free-id=? n8953@x n8954@y) (assertion-violation 'free-identifier=? '"not an identifier" n8954@y)) (assertion-violation 'free-identifier=? '"not an identifier" n8953@x)))) (set! n2983@bound-identifier=? (lambda (n8957@x n8958@y) (if (n2267@id? n8957@x) (if (n2267@id? n8958@y) (n2273@bound-id=? n8957@x n8958@y) (assertion-violation 'bound-identifier=? '"not an identifier" n8958@y)) (assertion-violation 'bound-identifier=? '"not an identifier" n8957@x)))) (set! n2985@make-source-condition (lambda (n8961@x) ((lambda (n8971@n8966 n8973@n8968 n8975@n8967 n8978@n8965 n8980@make-source-condition n8982@n8963 n8984@n8964 n8986@source-condition? n8988@source-filename n8990@source-character) (begin (set! n8971@n8966 (make-record-type-descriptor '&source-information n10073@n9388@&condition-rtd 'n8969 '#f '#f '#((immutable file-name) (immutable character)))) (set! n8973@n8968 '#f) (set! n8975@n8967 (make-record-constructor-descriptor n8971@n8966 n10074@n9390@&condition-rcd n8973@n8968)) (set! n8978@n8965 (record-predicate n8971@n8966)) (set! n8980@make-source-condition (record-constructor n8975@n8967)) (set! n8982@n8963 (record-accessor n8971@n8966 '0)) (set! n8984@n8964 (record-accessor n8971@n8966 '1)) (set! n8986@source-condition? (condition-predicate n8971@n8966)) (set! n8988@source-filename (condition-accessor n8971@n8966 n8982@n8963)) (set! n8990@source-character (condition-accessor n8971@n8966 n8984@n8964)) (if (pair? n8961@x) (n8980@make-source-condition (car n8961@x) (cdr n8961@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! n2987@extract-position-condition (lambda (n8991@x) (n2985@make-source-condition (n2989@expression-position n8991@x)))) (set! n2989@expression-position (lambda (n8993@x) (and (n2211@stx? n8993@x) ((lambda (n8995@x) (and (n1154@n921@annotation? n8995@x) (n1155@n923@annotation-source n8995@x))) (n2215@stx-expr n8993@x))))) (set! n2991@assertion-error (lambda (n8997@expr n8998@pos) (raise (condition (n10121@n9580@make-assertion-violation) (n10139@n9628@make-who-condition 'assert) (n10079@n9471@make-message-condition '"assertion failed") (n10129@n9602@make-irritants-condition (list n8997@expr)) (n2985@make-source-condition n8998@pos))))) (set! n2993@syntax-error (lambda (n9001@x . n9003@args) (begin (if (not (for-all string? n9003@args)) (assertion-violation 'syntax-error '"invalid argument" n9003@args) (void)) (raise (condition (n10079@n9471@make-message-condition (if (null? n9003@args) '"invalid syntax" (apply string-append n9003@args))) (n10173@n9718@make-syntax-violation (n3003@syntax->datum n9001@x) '#f) (n2987@extract-position-condition n9001@x)))))) (set! n2995@syntax-violation* (lambda (n9005@who n9006@msg n9007@form n9008@condition-object) (begin (if (not (string? n9006@msg)) (assertion-violation 'syntax-violation '"message is not a string" n9006@msg) (void)) ((lambda (n9013@who) (raise (condition (if n9013@who (n10139@n9628@make-who-condition n9013@who) (condition)) (n10079@n9471@make-message-condition n9006@msg) n9008@condition-object (n2987@extract-position-condition n9007@form)))) (if (or (string? n9005@who) (symbol? n9005@who)) n9005@who (if (not n9005@who) ((lambda (n9015@t) ((lambda (n9017@ls/false) (if (and n9017@ls/false (apply (lambda (n9019@id) (n2267@id? n9019@id)) n9017@ls/false)) (apply (lambda (n9021@id) (n3003@syntax->datum n9021@id)) n9017@ls/false) ((lambda (n9023@t) ((lambda (n9025@ls/false) (if (and n9025@ls/false (apply (lambda (n9027@id n9028@rest) (n2267@id? n9027@id)) n9025@ls/false)) (apply (lambda (n9031@id n9032@rest) (n3003@syntax->datum n9031@id)) n9025@ls/false) ((lambda (n9035@t) ((lambda (n9037@ls/false) (if n9037@ls/false (apply (lambda () '#f) n9037@ls/false) (n2997@syntax-violation '#f '"invalid syntax" n9035@t))) (n2764@syntax-dispatch n9035@t '_))) n9023@t))) (n2764@syntax-dispatch n9023@t '(any . any)))) n9015@t))) (n2764@syntax-dispatch n9015@t 'any))) n9007@form) (assertion-violation 'syntax-violation '"invalid who argument" n9005@who))))))) (set! n2997@syntax-violation (lambda n9053 ((lambda (n9054) (if (= n9054 '3) (apply (lambda (n9039@who n9040@msg n9041@form) (n2997@syntax-violation n9039@who n9040@msg n9041@form '#f)) n9053) (if (= n9054 '4) (apply (lambda (n9045@who n9046@msg n9047@form n9048@subform) (n2995@syntax-violation* n9045@who n9046@msg n9047@form (n10173@n9718@make-syntax-violation (n3003@syntax->datum n9047@form) (n3003@syntax->datum n9048@subform)))) n9053) (error 'apply '"invalid arg count")))) (length n9053)))) (set! n2999@identifier? (lambda (n9055@x) (n2267@id? n9055@x))) (set! n3001@datum->syntax (lambda (n9057@id n9058@datum) (if (n2267@id? n9057@id) (n2233@datum->stx n9057@id n9058@datum) (assertion-violation 'datum->syntax '"not an identifier" n9057@id)))) (set! n3003@syntax->datum (lambda (n9061@x) (n2289@stx->datum n9061@x))) (set! n3005@compile-r6rs-top-level (lambda (n9063@x*) (call-with-values (lambda () (n2887@top-level-expander n9063@x*)) (lambda (n9067@n9065@lib* n9068@n9066@invoke-code) ((lambda (n9071@invoke-code n9072@lib*) (lambda () (begin (for-each n1793@n1448@invoke-library n9072@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (n1249@n1177@expanded->core n9071@invoke-code)) (void)) (eval-core (n1249@n1177@expanded->core n9071@invoke-code))))) n9068@n9066@invoke-code n9067@n9065@lib*))))) (set! n3007@pre-compile-r6rs-top-level (lambda (n9075@x*) (call-with-values (lambda () (n2887@top-level-expander n9075@x*)) (lambda (n9079@n9077@lib* n9080@n9078@invoke-code) ((lambda (n9083@invoke-code n9084@lib*) (begin (for-each n1793@n1448@invoke-library n9084@lib*) (n1163@n939@compile-core (n1249@n1177@expanded->core n9083@invoke-code)))) n9080@n9078@invoke-code n9079@n9077@lib*))))) (set! n3009@interaction-environment ((lambda (n9087@the-env) (lambda () (or n9087@the-env ((lambda (n9089@lib n9090@rib) (begin ((lambda (n9093@subst) (begin (n2176@set-rib-sym*! n9090@rib (map car n9093@subst)) (n2178@set-rib-mark**! n9090@rib (map (lambda (n9095@x) n2135@top-mark*) n9093@subst)) (n2180@set-rib-label*! n9090@rib (map cdr n9093@subst)))) (n1750@n1362@library-subst n9089@lib)) ((lambda (n9097@env) (begin (set! n9087@the-env n9097@env) n9097@env)) (n2931@make-interaction-env n9090@rib '() '())))) (n1786@n1434@find-library-by-name '(mosh interaction)) (n2186@make-empty-rib))))) '#f)) (set! n3011@top-level-context (n1165@n943@make-parameter '#f)) (begin (set! n9367@n3011@top-level-context n3011@top-level-context) (set! n9366@n3009@interaction-environment n3009@interaction-environment) (set! n9365@n3007@pre-compile-r6rs-top-level n3007@pre-compile-r6rs-top-level) (set! n9364@n3005@compile-r6rs-top-level n3005@compile-r6rs-top-level) (set! n9363@n3003@syntax->datum n3003@syntax->datum) (set! n9362@n3001@datum->syntax n3001@datum->syntax) (set! n9361@n2999@identifier? n2999@identifier?) (set! n9360@n2997@syntax-violation n2997@syntax-violation) (set! n9359@n2995@syntax-violation* n2995@syntax-violation*) (set! n9358@n2993@syntax-error n2993@syntax-error) (set! n9357@n2991@assertion-error n2991@assertion-error) (set! n9356@n2989@expression-position n2989@expression-position) (set! n9355@n2987@extract-position-condition n2987@extract-position-condition) (set! n9354@n2985@make-source-condition n2985@make-source-condition) (set! n9353@n2983@bound-identifier=? n2983@bound-identifier=?) (set! n9352@n2981@free-identifier=? n2981@free-identifier=?) (set! n9351@n2979@generate-temporaries n2979@generate-temporaries) (set! n9350@n2977@make-export-env/macros n2977@make-export-env/macros) (set! n9349@n2975@make-export-subst n2975@make-export-subst) (set! n9348@n2973@build-exports n2973@build-exports) (set! n9347@n2971@rev-map-append n2971@rev-map-append) (set! n9346@n2969@boot-library-expand n2969@boot-library-expand) (set! n9345@n2967@library-expander n2967@library-expander) (set! n9344@n2965@eval n2965@eval) (set! n9343@n2963@expand n2963@expand) (set! n9342@n2961@scheme-report-environment n2961@scheme-report-environment) (set! n9341@n2959@null-environment n2959@null-environment) (set! n9340@n2957@environment n2957@environment) (set! n9339@n2955@environment-symbols n2955@environment-symbols) (set! n9338@n2953@environment? n2953@environment?) (set! n9337@n2951@parse-binding n2951@parse-binding) (set! n9336@n2949@environment-bindings n2949@environment-bindings) (set! n9335@n2947@interaction-environment-symbols n2947@interaction-environment-symbols) (set! n9334@n2945@rp n2945@rp) (set! n9333@n2943@set-interaction-env-locs! n2943@set-interaction-env-locs!) (set! n9332@n2941@set-interaction-env-r! n2941@set-interaction-env-r!) (set! n9331@n2939@set-interaction-env-rib! n2939@set-interaction-env-rib!) (set! n9330@n2937@interaction-env-locs n2937@interaction-env-locs) (set! n9329@n2935@interaction-env-r n2935@interaction-env-r) (set! n9328@n2933@interaction-env-rib n2933@interaction-env-rib) (set! n9327@n2931@make-interaction-env n2931@make-interaction-env) (set! n9326@n2929@interaction-env? n2929@interaction-env?) (set! n9325@n2926@n2918 n2926@n2918) (set! n9324@n2924@n2919 n2924@n2919) (set! n9323@n2922@n2917 n2922@n2917) (set! n9322@n2916@rp n2916@rp) (set! n9321@n2914@set-env-itc! n2914@set-env-itc!) (set! n9320@n2912@set-env-labels! n2912@set-env-labels!) (set! n9319@n2910@set-env-names! n2910@set-env-names!) (set! n9318@n2908@env-itc n2908@env-itc) (set! n9317@n2906@env-labels n2906@env-labels) (set! n9316@n2904@env-names n2904@env-names) (set! n9315@n2902@make-env n2902@make-env) (set! n9314@n2900@env? n2900@env?) (set! n9313@n2897@n2889 n2897@n2889) (set! n9312@n2895@n2890 n2895@n2890) (set! n9311@n2893@n2888 n2893@n2888) (set! n9310@n2887@top-level-expander n2887@top-level-expander) (set! n9309@n2885@parse-top-level-program n2885@parse-top-level-program) (set! n9308@n2883@core-library-expander n2883@core-library-expander) (set! n9307@n2881@library-body-expander n2881@library-body-expander) (set! n9306@n2879@chi-interaction-expr n2879@chi-interaction-expr) (set! n9305@n2877@chi-library-internal n2877@chi-library-internal) (set! n9304@n2875@imp-collector n2875@imp-collector) (set! n9303@n2873@vis-collector n2873@vis-collector) (set! n9302@n2871@inv-collector n2871@inv-collector) (set! n9301@n2869@make-collector n2869@make-collector) (set! n9300@n2867@make-top-rib n2867@make-top-rib) (set! n9299@n2865@parse-import-spec* n2865@parse-import-spec*) (set! n9298@n2863@parse-library n2863@parse-library) (set! n9297@n2861@parse-library-name n2861@parse-library-name) (set! n9296@n2859@parse-exports n2859@parse-exports) (set! n9295@n2857@expand-transformer n2857@expand-transformer) (set! n9294@n2855@chi-body* n2855@chi-body*) (set! n9293@n2853@chi-internal-module n2853@chi-internal-module) (set! n9292@n2851@module-interface-exp-id* n2851@module-interface-exp-id*) (set! n9291@n2849@set-module-interface-exp-lab-vec! n2849@set-module-interface-exp-lab-vec!) (set! n9290@n2847@set-module-interface-exp-id-vec! n2847@set-module-interface-exp-id-vec!) (set! n9289@n2845@set-module-interface-first-mark! n2845@set-module-interface-first-mark!) (set! n9288@n2843@module-interface-exp-lab-vec n2843@module-interface-exp-lab-vec) (set! n9287@n2841@module-interface-exp-id-vec n2841@module-interface-exp-id-vec) (set! n9286@n2839@module-interface-first-mark n2839@module-interface-first-mark) (set! n9285@n2837@make-module-interface n2837@make-module-interface) (set! n9284@n2835@module-interface? n2835@module-interface?) (set! n9283@n2832@n2824 n2832@n2824) (set! n9282@n2830@n2825 n2830@n2825) (set! n9281@n2828@n2823 n2828@n2823) (set! n9280@n2822@parse-module n2822@parse-module) (set! n9279@n2820@chi-internal n2820@chi-internal) (set! n9278@n2818@find-dups n2818@find-dups) (set! n9277@n2816@find-bound=? n2816@find-bound=?) (set! n9276@n2814@chi-rhs* n2814@chi-rhs*) (set! n9275@n2812@expand-interaction-rhs*/init* n2812@expand-interaction-rhs*/init*) (set! n9274@n2810@chi-rhs n2810@chi-rhs) (set! n9273@n2808@chi-defun n2808@chi-defun) (set! n9272@n2806@chi-lambda-clause* n2806@chi-lambda-clause*) (set! n9271@n2804@chi-lambda-clause n2804@chi-lambda-clause) (set! n9270@n2802@verify-formals n2802@verify-formals) (set! n9269@n2800@chi-set! n2800@chi-set!) (set! n9268@n2798@chi-expr n2798@chi-expr) (set! n9267@n2796@chi-application n2796@chi-application) (set! n9266@n2794@chi-expr* n2794@chi-expr*) (set! n9265@n2792@chi-global-macro n2792@chi-global-macro) (set! n9264@n2790@chi-local-macro n2790@chi-local-macro) (set! n9263@n2788@chi-macro n2788@chi-macro) (set! n9262@n2786@do-macro-call n2786@do-macro-call) (set! n9261@n2784@local-macro-transformer n2784@local-macro-transformer) (set! n9260@n2782@macro-transformer n2782@macro-transformer) (set! n9259@n2780@symbol-macro n2780@symbol-macro) (set! n9258@n2778@core-macro-transformer n2778@core-macro-transformer) (set! n9257@n2776@syntax-transformer n2776@syntax-transformer) (set! n9256@n2774@ellipsis-map n2774@ellipsis-map) (set! n9255@n2772@syntax-case-transformer n2772@syntax-case-transformer) (set! n9254@n2770@verify-literals n2770@verify-literals) (set! n9253@n2768@underscore? n2768@underscore?) (set! n9252@n2766@ellipsis? n2766@ellipsis?) (set! n9251@n2764@syntax-dispatch n2764@syntax-dispatch) (set! n9250@n2762@convert-pattern n2762@convert-pattern) (set! n9249@n2760@foreign-call-transformer n2760@foreign-call-transformer) (set! n9248@n2758@parameterize-macro n2758@parameterize-macro) (set! n9247@n2756@incorrect-usage-macro n2756@incorrect-usage-macro) (set! n9246@n2754@define-condition-type-macro n2754@define-condition-type-macro) (set! n9245@n2752@define-record-type-macro n2752@define-record-type-macro) (set! n9244@n2750@define-struct-macro n2750@define-struct-macro) (set! n9243@n2748@quasisyntax-macro n2748@quasisyntax-macro) (set! n9242@n2746@quasiquote-macro n2746@quasiquote-macro) (set! n9241@n2744@syntax-rules-macro n2744@syntax-rules-macro) (set! n9240@n2742@include-into-macro n2742@include-into-macro) (set! n9239@n2740@include-macro n2740@include-macro) (set! n9238@n2738@do-include n2738@do-include) (set! n9237@n2736@cond-macro n2736@cond-macro) (set! n9236@n2734@and-macro n2734@and-macro) (set! n9235@n2732@or-macro n2732@or-macro) (set! n9234@n2730@let*-macro n2730@let*-macro) (set! n9233@n2728@do-macro n2728@do-macro) (set! n9232@n2726@identifier-syntax-macro n2726@identifier-syntax-macro) (set! n9231@n2724@endianness-macro n2724@endianness-macro) (set! n9230@n2722@assert-macro n2722@assert-macro) (set! n9229@n2720@delay-macro n2720@delay-macro) (set! n9228@n2718@time-macro n2718@time-macro) (set! n9227@n2716@define-enumeration-macro n2716@define-enumeration-macro) (set! n9226@n2714@guard-macro n2714@guard-macro) (set! n9225@n2712@trace-letrec-syntax-macro n2712@trace-letrec-syntax-macro) (set! n9224@n2710@trace-let-syntax-macro n2710@trace-let-syntax-macro) (set! n9223@n2708@trace-let/rec-syntax n2708@trace-let/rec-syntax) (set! n9222@n2706@trace-define-syntax-macro n2706@trace-define-syntax-macro) (set! n9221@n2704@trace-define-macro n2704@trace-define-macro) (set! n9220@n2702@trace-lambda-macro n2702@trace-lambda-macro) (set! n9219@n2700@let*-values-macro n2700@let*-values-macro) (set! n9218@n2698@let-values-macro n2698@let-values-macro) (set! n9217@n2696@let-macro n2696@let-macro) (set! n9216@n2694@invalid-fmls-error n2694@invalid-fmls-error) (set! n9215@n2692@with-syntax-macro n2692@with-syntax-macro) (set! n9214@n2690@bless n2690@bless) (set! n9213@n2688@lambda-transformer n2688@lambda-transformer) (set! n9212@n2686@case-lambda-transformer n2686@case-lambda-transformer) (set! n9211@n2684@quote-transformer n2684@quote-transformer) (set! n9210@n2682@case-macro n2682@case-macro) (set! n9209@n2680@or-transformer n2680@or-transformer) (set! n9208@n2678@and-transformer n2678@and-transformer) (set! n9207@n2676@if-transformer n2676@if-transformer) (set! n9206@n2674@unless-macro n2674@unless-macro) (set! n9205@n2672@when-macro n2672@when-macro) (set! n9204@n2670@record-constructor-descriptor-transformer n2670@record-constructor-descriptor-transformer) (set! n9203@n2668@record-type-descriptor-transformer n2668@record-type-descriptor-transformer) (set! n9202@n2666@type-descriptor-transformer n2666@type-descriptor-transformer) (set! n9201@n2664@fluid-let-syntax-transformer n2664@fluid-let-syntax-transformer) (set! n9200@n2662@letrec*-transformer n2662@letrec*-transformer) (set! n9199@n2660@letrec-transformer n2660@letrec-transformer) (set! n9198@n2658@letrec-helper n2658@letrec-helper) (set! n9197@n2656@add-lexicals n2656@add-lexicals) (set! n9196@n2654@add-lexical n2654@add-lexical) (set! n9195@n2652@set-lexical-mutable! n2652@set-lexical-mutable!) (set! n9194@n2650@lexical-mutable? n2650@lexical-mutable?) (set! n9193@n2648@lexical-var n2648@lexical-var) (set! n9192@n2646@scheme-stx n2646@scheme-stx) (set! n9191@n2644@scheme-stx-hashtable n2644@scheme-stx-hashtable) (set! n9190@n2642@parse-define-syntax n2642@parse-define-syntax) (set! n9189@n2640@parse-define n2640@parse-define) (set! n9188@n2329@make-eval-transformer n2329@make-eval-transformer) (set! n9187@n2327@variable-transformer-procedure n2327@variable-transformer-procedure) (set! n9186@n2325@variable-transformer? n2325@variable-transformer?) (set! n9185@n2323@make-variable-transformer n2323@make-variable-transformer) (set! n9184@n2321@sanitize-binding n2321@sanitize-binding) (set! n9183@n2307@syntax-type n2307@syntax-type) (set! n9182@n2305@raise-unbound-error n2305@raise-unbound-error) (set! n9181@n2303@binding-value n2303@binding-value) (set! n9180@n2301@binding-type n2301@binding-type) (set! n9179@n2299@make-binding n2299@make-binding) (set! n9178@n2297@label->binding n2297@label->binding) (set! n9177@n2295@id->real-label n2295@id->real-label) (set! n9176@n2293@id->label n2293@id->label) (set! n9175@n2291@same-marks*? n2291@same-marks*?) (set! n9174@n2289@stx->datum n2289@stx->datum) (set! n9173@n2287@strip n2287@strip) (set! n9172@n2285@strip-annotations n2285@strip-annotations) (set! n9171@n2283@self-evaluating? n2283@self-evaluating?) (set! n9170@n2281@bound-id-member? n2281@bound-id-member?) (set! n9169@n2279@distinct-bound-ids? n2279@distinct-bound-ids?) (set! n9168@n2277@valid-bound-ids? n2277@valid-bound-ids?) (set! n9167@n2275@free-id=? n2275@free-id=?) (set! n9166@n2273@bound-id=? n2273@bound-id=?) (set! n9165@n2271@same-marks? n2271@same-marks?) (set! n9164@n2269@id->sym n2269@id->sym) (set! n9163@n2267@id? n2267@id?) (set! n9162@n2265@syntax->list n2265@syntax->list) (set! n9161@n2263@syntax-cdr n2263@syntax-cdr) (set! n9160@n2261@syntax-car n2261@syntax-car) (set! n9159@n2259@syntax-list? n2259@syntax-list?) (set! n9158@n2257@syntax-null? n2257@syntax-null?) (set! n9157@n2255@syntax-vector? n2255@syntax-vector?) (set! n9156@n2253@syntax-pair? n2253@syntax-pair?) (set! n9155@n2251@syntax-vector->list n2251@syntax-vector->list) (set! n9154@n2249@syntax-kind? n2249@syntax-kind?) (set! n9153@n2247@add-subst n2247@add-subst) (set! n9152@n2245@add-mark n2245@add-mark) (set! n9151@n2243@mkstx n2243@mkstx) (set! n9150@n2241@join-wraps n2241@join-wraps) (set! n9149@n2239@anti-mark? n2239@anti-mark?) (set! n9148@n2237@anti-mark n2237@anti-mark) (set! n9147@n2235@gen-mark n2235@gen-mark) (set! n9146@n2233@datum->stx n2233@datum->stx) (set! n9145@n2231@rp n2231@rp) (set! n9144@n2229@set-stx-ae*! n2229@set-stx-ae*!) (set! n9143@n2227@set-stx-subst*! n2227@set-stx-subst*!) (set! n9142@n2225@set-stx-mark*! n2225@set-stx-mark*!) (set! n9141@n2223@set-stx-expr! n2223@set-stx-expr!) (set! n9140@n2221@stx-ae* n2221@stx-ae*) (set! n9139@n2219@stx-subst* n2219@stx-subst*) (set! n9138@n2217@stx-mark* n2217@stx-mark*) (set! n9137@n2215@stx-expr n2215@stx-expr) (set! n9136@n2213@make-stx n2213@make-stx) (set! n9135@n2211@stx? n2211@stx?) (set! n9134@n2208@n2200 n2208@n2200) (set! n9133@n2206@n2201 n2206@n2201) (set! n9132@n2204@n2199 n2204@n2199) (set! n9131@n2198@make-full-rib n2198@make-full-rib) (set! n9130@n2196@unseal-rib! n2196@unseal-rib!) (set! n9129@n2194@seal-rib! n2194@seal-rib!) (set! n9128@n2192@make-rib-map n2192@make-rib-map) (set! n9127@n2190@extend-rib/nc! n2190@extend-rib/nc!) (set! n9126@n2188@extend-rib! n2188@extend-rib!) (set! n9125@n2186@make-empty-rib n2186@make-empty-rib) (set! n9124@n2184@set-rib-cache! n2184@set-rib-cache!) (set! n9123@n2182@set-rib-sealed/freq! n2182@set-rib-sealed/freq!) (set! n9122@n2180@set-rib-label*! n2180@set-rib-label*!) (set! n9121@n2178@set-rib-mark**! n2178@set-rib-mark**!) (set! n9120@n2176@set-rib-sym*! n2176@set-rib-sym*!) (set! n9119@n2174@rib-cache n2174@rib-cache) (set! n9118@n2172@rib-sealed/freq n2172@rib-sealed/freq) (set! n9117@n2170@rib-label* n2170@rib-label*) (set! n9116@n2168@rib-mark** n2168@rib-mark**) (set! n9115@n2166@rib-sym* n2166@rib-sym*) (set! n9114@n2164@make-rib n2164@make-rib) (set! n9113@n2162@rib? n2162@rib?) (set! n9112@n2159@n2151 n2159@n2151) (set! n9111@n2157@n2152 n2157@n2152) (set! n9110@n2155@n2150 n2155@n2150) (set! n9109@n2149@gen-define-label n2149@gen-define-label) (set! n9108@n2147@gen-define-label+loc n2147@gen-define-label+loc) (set! n9107@n2145@gen-top-level-label n2145@gen-top-level-label) (set! n9106@n2143@gen-label n2143@gen-label) (set! n9105@n2141@gen-global n2141@gen-global) (set! n9104@n2139@gen-lexical n2139@gen-lexical) (set! n9103@n2137@top-marked? n2137@top-marked?) (set! n9102@n2135@top-mark* n2135@top-mark*) (set! n9101@n2130@set-union n2130@set-union) (set! n9100@n2128@set-cons n2128@set-cons) (set! n9099@n2126@file-options-macro n2126@file-options-macro) (n1783@n1428@current-library-expander n2967@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (n9377@n9372 n9379@n9374 n9381@n9373 n9384@&condition? n9386@make-&condition n9388@&condition-rtd n9390@&condition-rcd n9462@n9457 n9464@n9459 n9466@n9458 n9469@p? n9471@make-message-condition n9473@n9456@condition-message n9475@message-condition? n9477@condition-message n9479@&message-rtd n9481@&message-rcd n9487@n9482 n9489@n9484 n9491@n9483 n9494@p? n9496@make-warning n9498@warning? n9500@&warning-rtd n9502@&warning-rcd n9508@n9503 n9510@n9505 n9512@n9504 n9515@p? n9517@make-serious-condition n9519@serious-condition? n9521@&serious-rtd n9523@&serious-rcd n9529@n9524 n9531@n9526 n9533@n9525 n9536@p? n9538@make-error n9540@error? n9542@&error-rtd n9544@&error-rcd n9550@n9545 n9552@n9547 n9554@n9546 n9557@p? n9559@make-violation n9561@violation? n9563@&violation-rtd n9565@&violation-rcd n9571@n9566 n9573@n9568 n9575@n9567 n9578@p? n9580@make-assertion-violation n9582@assertion-violation? n9584@&assertion-rtd n9586@&assertion-rcd n9593@n9588 n9595@n9590 n9597@n9589 n9600@p? n9602@make-irritants-condition n9604@n9587@condition-irritants n9606@irritants-condition? n9608@condition-irritants n9610@&irritants-rtd n9612@&irritants-rcd n9619@n9614 n9621@n9616 n9623@n9615 n9626@p? n9628@make-who-condition n9630@n9613@condition-who n9632@who-condition? n9634@condition-who n9636@&who-rtd n9638@&who-rcd n9644@n9639 n9646@n9641 n9648@n9640 n9651@p? n9653@make-non-continuable-violation n9655@non-continuable-violation? n9657@&non-continuable-rtd n9659@&non-continuable-rcd n9665@n9660 n9667@n9662 n9669@n9661 n9672@p? n9674@make-implementation-restriction-violation n9676@implementation-restriction-violation? n9678@&implementation-restriction-rtd n9680@&implementation-restriction-rcd n9686@n9681 n9688@n9683 n9690@n9682 n9693@p? n9695@make-lexical-violation n9697@lexical-violation? n9699@&lexical-rtd n9701@&lexical-rcd n9709@n9704 n9711@n9706 n9713@n9705 n9716@p? n9718@make-syntax-violation n9720@n9702@syntax-violation-form n9722@n9703@syntax-violation-subform n9724@syntax-violation? n9726@syntax-violation-form n9728@syntax-violation-subform n9730@&syntax-rtd n9732@&syntax-rcd n9738@n9733 n9740@n9735 n9742@n9734 n9745@p? n9747@make-undefined-violation n9749@undefined-violation? n9751@&undefined-rtd n9753@&undefined-rcd n9759@n9754 n9761@n9756 n9763@n9755 n9766@p? n9768@make-i/o-error n9770@i/o-error? n9772@&i/o-rtd n9774@&i/o-rcd n9780@n9775 n9782@n9777 n9784@n9776 n9787@p? n9789@make-i/o-read-error n9791@i/o-read-error? n9793@&i/o-read-rtd n9795@&i/o-read-rcd n9801@n9796 n9803@n9798 n9805@n9797 n9808@p? n9810@make-i/o-write-error n9812@i/o-write-error? n9814@&i/o-write-rtd n9816@&i/o-write-rcd n9823@n9818 n9825@n9820 n9827@n9819 n9830@p? n9832@make-i/o-invalid-position-error n9834@n9817@i/o-error-position n9836@i/o-invalid-position-error? n9838@i/o-error-position n9840@&i/o-invalid-position-rtd n9842@&i/o-invalid-position-rcd n9849@n9844 n9851@n9846 n9853@n9845 n9856@p? n9858@make-i/o-filename-error n9860@n9843@i/o-error-filename n9862@i/o-filename-error? n9864@i/o-error-filename n9866@&i/o-filename-rtd n9868@&i/o-filename-rcd n9874@n9869 n9876@n9871 n9878@n9870 n9881@p? n9883@make-i/o-file-protection-error n9885@i/o-file-protection-error? n9887@&i/o-file-protection-rtd n9889@&i/o-file-protection-rcd n9895@n9890 n9897@n9892 n9899@n9891 n9902@p? n9904@make-i/o-file-is-read-only-error n9906@i/o-file-is-read-only-error? n9908@&i/o-file-is-read-only-rtd n9910@&i/o-file-is-read-only-rcd n9916@n9911 n9918@n9913 n9920@n9912 n9923@p? n9925@make-i/o-file-already-exists-error n9927@i/o-file-already-exists-error? n9929@&i/o-file-already-exists-rtd n9931@&i/o-file-already-exists-rcd n9937@n9932 n9939@n9934 n9941@n9933 n9944@p? n9946@make-i/o-file-does-not-exist-error n9948@i/o-file-does-not-exist-error? n9950@&i/o-file-does-not-exist-rtd n9952@&i/o-file-does-not-exist-rcd n9959@n9954 n9961@n9956 n9963@n9955 n9966@p? n9968@make-i/o-port-error n9970@n9953@i/o-error-port n9972@i/o-port-error? n9974@i/o-error-port n9976@&i/o-port-rtd n9978@&i/o-port-rcd n9984@n9979 n9986@n9981 n9988@n9980 n9991@p? n9993@make-i/o-decoding-error n9995@i/o-decoding-error? n9997@&i/o-decoding-rtd n9999@&i/o-decoding-rcd n10006@n10001 n10008@n10003 n10010@n10002 n10013@p? n10015@make-i/o-encoding-error n10017@n10000@i/o-encoding-error-char n10019@i/o-encoding-error? n10021@i/o-encoding-error-char n10023@&i/o-encoding-rtd n10025@&i/o-encoding-rcd n10031@n10026 n10033@n10028 n10035@n10027 n10038@p? n10040@make-no-infinities-violation n10042@no-infinities-violation? n10044@&no-infinities-rtd n10046@&no-infinities-rcd n10052@n10047 n10054@n10049 n10056@n10048 n10059@p? n10061@make-no-nans-violation n10063@no-nans-violation? n10065@&no-nans-rtd n10067@&no-nans-rcd) (begin (set! n9377@n9372 (make-record-type-descriptor '&condition '#f 'n9375 '#f '#f '#())) (set! n9379@n9374 '#f) (set! n9381@n9373 (make-record-constructor-descriptor n9377@n9372 '#f n9379@n9374)) (set! n9384@&condition? (record-predicate n9377@n9372)) (set! n9386@make-&condition (record-constructor n9381@n9373)) (set! n9388@&condition-rtd n9377@n9372) (set! n9390@&condition-rcd n9381@n9373) (set! n9462@n9457 (make-record-type-descriptor '&message n9377@n9372 'n9460 '#f '#f '#((immutable message)))) (set! n9464@n9459 '#f) (set! n9466@n9458 (make-record-constructor-descriptor n9462@n9457 n9381@n9373 n9464@n9459)) (set! n9469@p? (record-predicate n9462@n9457)) (set! n9471@make-message-condition (record-constructor n9466@n9458)) (set! n9473@n9456@condition-message (record-accessor n9462@n9457 '0)) (set! n9475@message-condition? (condition-predicate n9462@n9457)) (set! n9477@condition-message (condition-accessor n9462@n9457 n9473@n9456@condition-message)) (set! n9479@&message-rtd n9462@n9457) (set! n9481@&message-rcd n9466@n9458) (set! n9487@n9482 (make-record-type-descriptor '&warning n9377@n9372 'n9485 '#f '#f '#())) (set! n9489@n9484 '#f) (set! n9491@n9483 (make-record-constructor-descriptor n9487@n9482 n9381@n9373 n9489@n9484)) (set! n9494@p? (record-predicate n9487@n9482)) (set! n9496@make-warning (record-constructor n9491@n9483)) (set! n9498@warning? (condition-predicate n9487@n9482)) (set! n9500@&warning-rtd n9487@n9482) (set! n9502@&warning-rcd n9491@n9483) (set! n9508@n9503 (make-record-type-descriptor '&serious n9377@n9372 'n9506 '#f '#f '#())) (set! n9510@n9505 '#f) (set! n9512@n9504 (make-record-constructor-descriptor n9508@n9503 n9381@n9373 n9510@n9505)) (set! n9515@p? (record-predicate n9508@n9503)) (set! n9517@make-serious-condition (record-constructor n9512@n9504)) (set! n9519@serious-condition? (condition-predicate n9508@n9503)) (set! n9521@&serious-rtd n9508@n9503) (set! n9523@&serious-rcd n9512@n9504) (set! n9529@n9524 (make-record-type-descriptor '&error n9508@n9503 'n9527 '#f '#f '#())) (set! n9531@n9526 '#f) (set! n9533@n9525 (make-record-constructor-descriptor n9529@n9524 n9512@n9504 n9531@n9526)) (set! n9536@p? (record-predicate n9529@n9524)) (set! n9538@make-error (record-constructor n9533@n9525)) (set! n9540@error? (condition-predicate n9529@n9524)) (set! n9542@&error-rtd n9529@n9524) (set! n9544@&error-rcd n9533@n9525) (set! n9550@n9545 (make-record-type-descriptor '&violation n9508@n9503 'n9548 '#f '#f '#())) (set! n9552@n9547 '#f) (set! n9554@n9546 (make-record-constructor-descriptor n9550@n9545 n9512@n9504 n9552@n9547)) (set! n9557@p? (record-predicate n9550@n9545)) (set! n9559@make-violation (record-constructor n9554@n9546)) (set! n9561@violation? (condition-predicate n9550@n9545)) (set! n9563@&violation-rtd n9550@n9545) (set! n9565@&violation-rcd n9554@n9546) (set! n9571@n9566 (make-record-type-descriptor '&assertion n9550@n9545 'n9569 '#f '#f '#())) (set! n9573@n9568 '#f) (set! n9575@n9567 (make-record-constructor-descriptor n9571@n9566 n9554@n9546 n9573@n9568)) (set! n9578@p? (record-predicate n9571@n9566)) (set! n9580@make-assertion-violation (record-constructor n9575@n9567)) (set! n9582@assertion-violation? (condition-predicate n9571@n9566)) (set! n9584@&assertion-rtd n9571@n9566) (set! n9586@&assertion-rcd n9575@n9567) (set! n9593@n9588 (make-record-type-descriptor '&irritants n9377@n9372 'n9591 '#f '#f '#((immutable irritants)))) (set! n9595@n9590 '#f) (set! n9597@n9589 (make-record-constructor-descriptor n9593@n9588 n9381@n9373 n9595@n9590)) (set! n9600@p? (record-predicate n9593@n9588)) (set! n9602@make-irritants-condition (record-constructor n9597@n9589)) (set! n9604@n9587@condition-irritants (record-accessor n9593@n9588 '0)) (set! n9606@irritants-condition? (condition-predicate n9593@n9588)) (set! n9608@condition-irritants (condition-accessor n9593@n9588 n9604@n9587@condition-irritants)) (set! n9610@&irritants-rtd n9593@n9588) (set! n9612@&irritants-rcd n9597@n9589) (set! n9619@n9614 (make-record-type-descriptor '&who n9377@n9372 'n9617 '#f '#f '#((immutable who)))) (set! n9621@n9616 '#f) (set! n9623@n9615 (make-record-constructor-descriptor n9619@n9614 n9381@n9373 n9621@n9616)) (set! n9626@p? (record-predicate n9619@n9614)) (set! n9628@make-who-condition (record-constructor n9623@n9615)) (set! n9630@n9613@condition-who (record-accessor n9619@n9614 '0)) (set! n9632@who-condition? (condition-predicate n9619@n9614)) (set! n9634@condition-who (condition-accessor n9619@n9614 n9630@n9613@condition-who)) (set! n9636@&who-rtd n9619@n9614) (set! n9638@&who-rcd n9623@n9615) (set! n9644@n9639 (make-record-type-descriptor '&non-continuable n9550@n9545 'n9642 '#f '#f '#())) (set! n9646@n9641 '#f) (set! n9648@n9640 (make-record-constructor-descriptor n9644@n9639 n9554@n9546 n9646@n9641)) (set! n9651@p? (record-predicate n9644@n9639)) (set! n9653@make-non-continuable-violation (record-constructor n9648@n9640)) (set! n9655@non-continuable-violation? (condition-predicate n9644@n9639)) (set! n9657@&non-continuable-rtd n9644@n9639) (set! n9659@&non-continuable-rcd n9648@n9640) (set! n9665@n9660 (make-record-type-descriptor '&implementation-restriction n9550@n9545 'n9663 '#f '#f '#())) (set! n9667@n9662 '#f) (set! n9669@n9661 (make-record-constructor-descriptor n9665@n9660 n9554@n9546 n9667@n9662)) (set! n9672@p? (record-predicate n9665@n9660)) (set! n9674@make-implementation-restriction-violation (record-constructor n9669@n9661)) (set! n9676@implementation-restriction-violation? (condition-predicate n9665@n9660)) (set! n9678@&implementation-restriction-rtd n9665@n9660) (set! n9680@&implementation-restriction-rcd n9669@n9661) (set! n9686@n9681 (make-record-type-descriptor '&lexical n9550@n9545 'n9684 '#f '#f '#())) (set! n9688@n9683 '#f) (set! n9690@n9682 (make-record-constructor-descriptor n9686@n9681 n9554@n9546 n9688@n9683)) (set! n9693@p? (record-predicate n9686@n9681)) (set! n9695@make-lexical-violation (record-constructor n9690@n9682)) (set! n9697@lexical-violation? (condition-predicate n9686@n9681)) (set! n9699@&lexical-rtd n9686@n9681) (set! n9701@&lexical-rcd n9690@n9682) (set! n9709@n9704 (make-record-type-descriptor '&syntax n9550@n9545 'n9707 '#f '#f '#((immutable form) (immutable subform)))) (set! n9711@n9706 '#f) (set! n9713@n9705 (make-record-constructor-descriptor n9709@n9704 n9554@n9546 n9711@n9706)) (set! n9716@p? (record-predicate n9709@n9704)) (set! n9718@make-syntax-violation (record-constructor n9713@n9705)) (set! n9720@n9702@syntax-violation-form (record-accessor n9709@n9704 '0)) (set! n9722@n9703@syntax-violation-subform (record-accessor n9709@n9704 '1)) (set! n9724@syntax-violation? (condition-predicate n9709@n9704)) (set! n9726@syntax-violation-form (condition-accessor n9709@n9704 n9720@n9702@syntax-violation-form)) (set! n9728@syntax-violation-subform (condition-accessor n9709@n9704 n9722@n9703@syntax-violation-subform)) (set! n9730@&syntax-rtd n9709@n9704) (set! n9732@&syntax-rcd n9713@n9705) (set! n9738@n9733 (make-record-type-descriptor '&undefined n9550@n9545 'n9736 '#f '#f '#())) (set! n9740@n9735 '#f) (set! n9742@n9734 (make-record-constructor-descriptor n9738@n9733 n9554@n9546 n9740@n9735)) (set! n9745@p? (record-predicate n9738@n9733)) (set! n9747@make-undefined-violation (record-constructor n9742@n9734)) (set! n9749@undefined-violation? (condition-predicate n9738@n9733)) (set! n9751@&undefined-rtd n9738@n9733) (set! n9753@&undefined-rcd n9742@n9734) (set! n9759@n9754 (make-record-type-descriptor '&i/o n9529@n9524 'n9757 '#f '#f '#())) (set! n9761@n9756 '#f) (set! n9763@n9755 (make-record-constructor-descriptor n9759@n9754 n9533@n9525 n9761@n9756)) (set! n9766@p? (record-predicate n9759@n9754)) (set! n9768@make-i/o-error (record-constructor n9763@n9755)) (set! n9770@i/o-error? (condition-predicate n9759@n9754)) (set! n9772@&i/o-rtd n9759@n9754) (set! n9774@&i/o-rcd n9763@n9755) (set! n9780@n9775 (make-record-type-descriptor '&i/o-read n9759@n9754 'n9778 '#f '#f '#())) (set! n9782@n9777 '#f) (set! n9784@n9776 (make-record-constructor-descriptor n9780@n9775 n9763@n9755 n9782@n9777)) (set! n9787@p? (record-predicate n9780@n9775)) (set! n9789@make-i/o-read-error (record-constructor n9784@n9776)) (set! n9791@i/o-read-error? (condition-predicate n9780@n9775)) (set! n9793@&i/o-read-rtd n9780@n9775) (set! n9795@&i/o-read-rcd n9784@n9776) (set! n9801@n9796 (make-record-type-descriptor '&i/o-write n9759@n9754 'n9799 '#f '#f '#())) (set! n9803@n9798 '#f) (set! n9805@n9797 (make-record-constructor-descriptor n9801@n9796 n9763@n9755 n9803@n9798)) (set! n9808@p? (record-predicate n9801@n9796)) (set! n9810@make-i/o-write-error (record-constructor n9805@n9797)) (set! n9812@i/o-write-error? (condition-predicate n9801@n9796)) (set! n9814@&i/o-write-rtd n9801@n9796) (set! n9816@&i/o-write-rcd n9805@n9797) (set! n9823@n9818 (make-record-type-descriptor '&i/o-invalid-position n9759@n9754 'n9821 '#f '#f '#((immutable position)))) (set! n9825@n9820 '#f) (set! n9827@n9819 (make-record-constructor-descriptor n9823@n9818 n9763@n9755 n9825@n9820)) (set! n9830@p? (record-predicate n9823@n9818)) (set! n9832@make-i/o-invalid-position-error (record-constructor n9827@n9819)) (set! n9834@n9817@i/o-error-position (record-accessor n9823@n9818 '0)) (set! n9836@i/o-invalid-position-error? (condition-predicate n9823@n9818)) (set! n9838@i/o-error-position (condition-accessor n9823@n9818 n9834@n9817@i/o-error-position)) (set! n9840@&i/o-invalid-position-rtd n9823@n9818) (set! n9842@&i/o-invalid-position-rcd n9827@n9819) (set! n9849@n9844 (make-record-type-descriptor '&i/o-filename n9759@n9754 'n9847 '#f '#f '#((immutable filename)))) (set! n9851@n9846 '#f) (set! n9853@n9845 (make-record-constructor-descriptor n9849@n9844 n9763@n9755 n9851@n9846)) (set! n9856@p? (record-predicate n9849@n9844)) (set! n9858@make-i/o-filename-error (record-constructor n9853@n9845)) (set! n9860@n9843@i/o-error-filename (record-accessor n9849@n9844 '0)) (set! n9862@i/o-filename-error? (condition-predicate n9849@n9844)) (set! n9864@i/o-error-filename (condition-accessor n9849@n9844 n9860@n9843@i/o-error-filename)) (set! n9866@&i/o-filename-rtd n9849@n9844) (set! n9868@&i/o-filename-rcd n9853@n9845) (set! n9874@n9869 (make-record-type-descriptor '&i/o-file-protection n9849@n9844 'n9872 '#f '#f '#())) (set! n9876@n9871 '#f) (set! n9878@n9870 (make-record-constructor-descriptor n9874@n9869 n9853@n9845 n9876@n9871)) (set! n9881@p? (record-predicate n9874@n9869)) (set! n9883@make-i/o-file-protection-error (record-constructor n9878@n9870)) (set! n9885@i/o-file-protection-error? (condition-predicate n9874@n9869)) (set! n9887@&i/o-file-protection-rtd n9874@n9869) (set! n9889@&i/o-file-protection-rcd n9878@n9870) (set! n9895@n9890 (make-record-type-descriptor '&i/o-file-is-read-only n9874@n9869 'n9893 '#f '#f '#())) (set! n9897@n9892 '#f) (set! n9899@n9891 (make-record-constructor-descriptor n9895@n9890 n9878@n9870 n9897@n9892)) (set! n9902@p? (record-predicate n9895@n9890)) (set! n9904@make-i/o-file-is-read-only-error (record-constructor n9899@n9891)) (set! n9906@i/o-file-is-read-only-error? (condition-predicate n9895@n9890)) (set! n9908@&i/o-file-is-read-only-rtd n9895@n9890) (set! n9910@&i/o-file-is-read-only-rcd n9899@n9891) (set! n9916@n9911 (make-record-type-descriptor '&i/o-file-already-exists n9849@n9844 'n9914 '#f '#f '#())) (set! n9918@n9913 '#f) (set! n9920@n9912 (make-record-constructor-descriptor n9916@n9911 n9853@n9845 n9918@n9913)) (set! n9923@p? (record-predicate n9916@n9911)) (set! n9925@make-i/o-file-already-exists-error (record-constructor n9920@n9912)) (set! n9927@i/o-file-already-exists-error? (condition-predicate n9916@n9911)) (set! n9929@&i/o-file-already-exists-rtd n9916@n9911) (set! n9931@&i/o-file-already-exists-rcd n9920@n9912) (set! n9937@n9932 (make-record-type-descriptor '&i/o-file-does-not-exist n9849@n9844 'n9935 '#f '#f '#())) (set! n9939@n9934 '#f) (set! n9941@n9933 (make-record-constructor-descriptor n9937@n9932 n9853@n9845 n9939@n9934)) (set! n9944@p? (record-predicate n9937@n9932)) (set! n9946@make-i/o-file-does-not-exist-error (record-constructor n9941@n9933)) (set! n9948@i/o-file-does-not-exist-error? (condition-predicate n9937@n9932)) (set! n9950@&i/o-file-does-not-exist-rtd n9937@n9932) (set! n9952@&i/o-file-does-not-exist-rcd n9941@n9933) (set! n9959@n9954 (make-record-type-descriptor '&i/o-port n9759@n9754 'n9957 '#f '#f '#((immutable port)))) (set! n9961@n9956 '#f) (set! n9963@n9955 (make-record-constructor-descriptor n9959@n9954 n9763@n9755 n9961@n9956)) (set! n9966@p? (record-predicate n9959@n9954)) (set! n9968@make-i/o-port-error (record-constructor n9963@n9955)) (set! n9970@n9953@i/o-error-port (record-accessor n9959@n9954 '0)) (set! n9972@i/o-port-error? (condition-predicate n9959@n9954)) (set! n9974@i/o-error-port (condition-accessor n9959@n9954 n9970@n9953@i/o-error-port)) (set! n9976@&i/o-port-rtd n9959@n9954) (set! n9978@&i/o-port-rcd n9963@n9955) (set! n9984@n9979 (make-record-type-descriptor '&i/o-decoding n9959@n9954 'n9982 '#f '#f '#())) (set! n9986@n9981 '#f) (set! n9988@n9980 (make-record-constructor-descriptor n9984@n9979 n9963@n9955 n9986@n9981)) (set! n9991@p? (record-predicate n9984@n9979)) (set! n9993@make-i/o-decoding-error (record-constructor n9988@n9980)) (set! n9995@i/o-decoding-error? (condition-predicate n9984@n9979)) (set! n9997@&i/o-decoding-rtd n9984@n9979) (set! n9999@&i/o-decoding-rcd n9988@n9980) (set! n10006@n10001 (make-record-type-descriptor '&i/o-encoding n9959@n9954 'n10004 '#f '#f '#((immutable char)))) (set! n10008@n10003 '#f) (set! n10010@n10002 (make-record-constructor-descriptor n10006@n10001 n9963@n9955 n10008@n10003)) (set! n10013@p? (record-predicate n10006@n10001)) (set! n10015@make-i/o-encoding-error (record-constructor n10010@n10002)) (set! n10017@n10000@i/o-encoding-error-char (record-accessor n10006@n10001 '0)) (set! n10019@i/o-encoding-error? (condition-predicate n10006@n10001)) (set! n10021@i/o-encoding-error-char (condition-accessor n10006@n10001 n10017@n10000@i/o-encoding-error-char)) (set! n10023@&i/o-encoding-rtd n10006@n10001) (set! n10025@&i/o-encoding-rcd n10010@n10002) (set! n10031@n10026 (make-record-type-descriptor '&no-infinities n9665@n9660 'n10029 '#f '#f '#())) (set! n10033@n10028 '#f) (set! n10035@n10027 (make-record-constructor-descriptor n10031@n10026 n9669@n9661 n10033@n10028)) (set! n10038@p? (record-predicate n10031@n10026)) (set! n10040@make-no-infinities-violation (record-constructor n10035@n10027)) (set! n10042@no-infinities-violation? (condition-predicate n10031@n10026)) (set! n10044@&no-infinities-rtd n10031@n10026) (set! n10046@&no-infinities-rcd n10035@n10027) (set! n10052@n10047 (make-record-type-descriptor '&no-nans n9665@n9660 'n10050 '#f '#f '#())) (set! n10054@n10049 '#f) (set! n10056@n10048 (make-record-constructor-descriptor n10052@n10047 n9669@n9661 n10054@n10049)) (set! n10059@p? (record-predicate n10052@n10047)) (set! n10061@make-no-nans-violation (record-constructor n10056@n10048)) (set! n10063@no-nans-violation? (condition-predicate n10052@n10047)) (set! n10065@&no-nans-rtd n10052@n10047) (set! n10067@&no-nans-rcd n10056@n10048) (begin (set! n10308@n10067@&no-nans-rcd n10067@&no-nans-rcd) (set! n10307@n10065@&no-nans-rtd n10065@&no-nans-rtd) (set! n10306@n10063@no-nans-violation? n10063@no-nans-violation?) (set! n10305@n10061@make-no-nans-violation n10061@make-no-nans-violation) (set! n10304@n10059@p? n10059@p?) (set! n10303@n10056@n10048 n10056@n10048) (set! n10302@n10054@n10049 n10054@n10049) (set! n10301@n10052@n10047 n10052@n10047) (set! n10300@n10046@&no-infinities-rcd n10046@&no-infinities-rcd) (set! n10299@n10044@&no-infinities-rtd n10044@&no-infinities-rtd) (set! n10298@n10042@no-infinities-violation? n10042@no-infinities-violation?) (set! n10297@n10040@make-no-infinities-violation n10040@make-no-infinities-violation) (set! n10296@n10038@p? n10038@p?) (set! n10295@n10035@n10027 n10035@n10027) (set! n10294@n10033@n10028 n10033@n10028) (set! n10293@n10031@n10026 n10031@n10026) (set! n10292@n10025@&i/o-encoding-rcd n10025@&i/o-encoding-rcd) (set! n10291@n10023@&i/o-encoding-rtd n10023@&i/o-encoding-rtd) (set! n10290@n10021@i/o-encoding-error-char n10021@i/o-encoding-error-char) (set! n10289@n10019@i/o-encoding-error? n10019@i/o-encoding-error?) (set! n10288@n10017@n10000@i/o-encoding-error-char n10017@n10000@i/o-encoding-error-char) (set! n10287@n10015@make-i/o-encoding-error n10015@make-i/o-encoding-error) (set! n10286@n10013@p? n10013@p?) (set! n10285@n10010@n10002 n10010@n10002) (set! n10284@n10008@n10003 n10008@n10003) (set! n10283@n10006@n10001 n10006@n10001) (set! n10282@n9999@&i/o-decoding-rcd n9999@&i/o-decoding-rcd) (set! n10281@n9997@&i/o-decoding-rtd n9997@&i/o-decoding-rtd) (set! n10280@n9995@i/o-decoding-error? n9995@i/o-decoding-error?) (set! n10279@n9993@make-i/o-decoding-error n9993@make-i/o-decoding-error) (set! n10278@n9991@p? n9991@p?) (set! n10277@n9988@n9980 n9988@n9980) (set! n10276@n9986@n9981 n9986@n9981) (set! n10275@n9984@n9979 n9984@n9979) (set! n10274@n9978@&i/o-port-rcd n9978@&i/o-port-rcd) (set! n10273@n9976@&i/o-port-rtd n9976@&i/o-port-rtd) (set! n10272@n9974@i/o-error-port n9974@i/o-error-port) (set! n10271@n9972@i/o-port-error? n9972@i/o-port-error?) (set! n10270@n9970@n9953@i/o-error-port n9970@n9953@i/o-error-port) (set! n10269@n9968@make-i/o-port-error n9968@make-i/o-port-error) (set! n10268@n9966@p? n9966@p?) (set! n10267@n9963@n9955 n9963@n9955) (set! n10266@n9961@n9956 n9961@n9956) (set! n10265@n9959@n9954 n9959@n9954) (set! n10264@n9952@&i/o-file-does-not-exist-rcd n9952@&i/o-file-does-not-exist-rcd) (set! n10263@n9950@&i/o-file-does-not-exist-rtd n9950@&i/o-file-does-not-exist-rtd) (set! n10262@n9948@i/o-file-does-not-exist-error? n9948@i/o-file-does-not-exist-error?) (set! n10261@n9946@make-i/o-file-does-not-exist-error n9946@make-i/o-file-does-not-exist-error) (set! n10260@n9944@p? n9944@p?) (set! n10259@n9941@n9933 n9941@n9933) (set! n10258@n9939@n9934 n9939@n9934) (set! n10257@n9937@n9932 n9937@n9932) (set! n10256@n9931@&i/o-file-already-exists-rcd n9931@&i/o-file-already-exists-rcd) (set! n10255@n9929@&i/o-file-already-exists-rtd n9929@&i/o-file-already-exists-rtd) (set! n10254@n9927@i/o-file-already-exists-error? n9927@i/o-file-already-exists-error?) (set! n10253@n9925@make-i/o-file-already-exists-error n9925@make-i/o-file-already-exists-error) (set! n10252@n9923@p? n9923@p?) (set! n10251@n9920@n9912 n9920@n9912) (set! n10250@n9918@n9913 n9918@n9913) (set! n10249@n9916@n9911 n9916@n9911) (set! n10248@n9910@&i/o-file-is-read-only-rcd n9910@&i/o-file-is-read-only-rcd) (set! n10247@n9908@&i/o-file-is-read-only-rtd n9908@&i/o-file-is-read-only-rtd) (set! n10246@n9906@i/o-file-is-read-only-error? n9906@i/o-file-is-read-only-error?) (set! n10245@n9904@make-i/o-file-is-read-only-error n9904@make-i/o-file-is-read-only-error) (set! n10244@n9902@p? n9902@p?) (set! n10243@n9899@n9891 n9899@n9891) (set! n10242@n9897@n9892 n9897@n9892) (set! n10241@n9895@n9890 n9895@n9890) (set! n10240@n9889@&i/o-file-protection-rcd n9889@&i/o-file-protection-rcd) (set! n10239@n9887@&i/o-file-protection-rtd n9887@&i/o-file-protection-rtd) (set! n10238@n9885@i/o-file-protection-error? n9885@i/o-file-protection-error?) (set! n10237@n9883@make-i/o-file-protection-error n9883@make-i/o-file-protection-error) (set! n10236@n9881@p? n9881@p?) (set! n10235@n9878@n9870 n9878@n9870) (set! n10234@n9876@n9871 n9876@n9871) (set! n10233@n9874@n9869 n9874@n9869) (set! n10232@n9868@&i/o-filename-rcd n9868@&i/o-filename-rcd) (set! n10231@n9866@&i/o-filename-rtd n9866@&i/o-filename-rtd) (set! n10230@n9864@i/o-error-filename n9864@i/o-error-filename) (set! n10229@n9862@i/o-filename-error? n9862@i/o-filename-error?) (set! n10228@n9860@n9843@i/o-error-filename n9860@n9843@i/o-error-filename) (set! n10227@n9858@make-i/o-filename-error n9858@make-i/o-filename-error) (set! n10226@n9856@p? n9856@p?) (set! n10225@n9853@n9845 n9853@n9845) (set! n10224@n9851@n9846 n9851@n9846) (set! n10223@n9849@n9844 n9849@n9844) (set! n10222@n9842@&i/o-invalid-position-rcd n9842@&i/o-invalid-position-rcd) (set! n10221@n9840@&i/o-invalid-position-rtd n9840@&i/o-invalid-position-rtd) (set! n10220@n9838@i/o-error-position n9838@i/o-error-position) (set! n10219@n9836@i/o-invalid-position-error? n9836@i/o-invalid-position-error?) (set! n10218@n9834@n9817@i/o-error-position n9834@n9817@i/o-error-position) (set! n10217@n9832@make-i/o-invalid-position-error n9832@make-i/o-invalid-position-error) (set! n10216@n9830@p? n9830@p?) (set! n10215@n9827@n9819 n9827@n9819) (set! n10214@n9825@n9820 n9825@n9820) (set! n10213@n9823@n9818 n9823@n9818) (set! n10212@n9816@&i/o-write-rcd n9816@&i/o-write-rcd) (set! n10211@n9814@&i/o-write-rtd n9814@&i/o-write-rtd) (set! n10210@n9812@i/o-write-error? n9812@i/o-write-error?) (set! n10209@n9810@make-i/o-write-error n9810@make-i/o-write-error) (set! n10208@n9808@p? n9808@p?) (set! n10207@n9805@n9797 n9805@n9797) (set! n10206@n9803@n9798 n9803@n9798) (set! n10205@n9801@n9796 n9801@n9796) (set! n10204@n9795@&i/o-read-rcd n9795@&i/o-read-rcd) (set! n10203@n9793@&i/o-read-rtd n9793@&i/o-read-rtd) (set! n10202@n9791@i/o-read-error? n9791@i/o-read-error?) (set! n10201@n9789@make-i/o-read-error n9789@make-i/o-read-error) (set! n10200@n9787@p? n9787@p?) (set! n10199@n9784@n9776 n9784@n9776) (set! n10198@n9782@n9777 n9782@n9777) (set! n10197@n9780@n9775 n9780@n9775) (set! n10196@n9774@&i/o-rcd n9774@&i/o-rcd) (set! n10195@n9772@&i/o-rtd n9772@&i/o-rtd) (set! n10194@n9770@i/o-error? n9770@i/o-error?) (set! n10193@n9768@make-i/o-error n9768@make-i/o-error) (set! n10192@n9766@p? n9766@p?) (set! n10191@n9763@n9755 n9763@n9755) (set! n10190@n9761@n9756 n9761@n9756) (set! n10189@n9759@n9754 n9759@n9754) (set! n10188@n9753@&undefined-rcd n9753@&undefined-rcd) (set! n10187@n9751@&undefined-rtd n9751@&undefined-rtd) (set! n10186@n9749@undefined-violation? n9749@undefined-violation?) (set! n10185@n9747@make-undefined-violation n9747@make-undefined-violation) (set! n10184@n9745@p? n9745@p?) (set! n10183@n9742@n9734 n9742@n9734) (set! n10182@n9740@n9735 n9740@n9735) (set! n10181@n9738@n9733 n9738@n9733) (set! n10180@n9732@&syntax-rcd n9732@&syntax-rcd) (set! n10179@n9730@&syntax-rtd n9730@&syntax-rtd) (set! n10178@n9728@syntax-violation-subform n9728@syntax-violation-subform) (set! n10177@n9726@syntax-violation-form n9726@syntax-violation-form) (set! n10176@n9724@syntax-violation? n9724@syntax-violation?) (set! n10175@n9722@n9703@syntax-violation-subform n9722@n9703@syntax-violation-subform) (set! n10174@n9720@n9702@syntax-violation-form n9720@n9702@syntax-violation-form) (set! n10173@n9718@make-syntax-violation n9718@make-syntax-violation) (set! n10172@n9716@p? n9716@p?) (set! n10171@n9713@n9705 n9713@n9705) (set! n10170@n9711@n9706 n9711@n9706) (set! n10169@n9709@n9704 n9709@n9704) (set! n10168@n9701@&lexical-rcd n9701@&lexical-rcd) (set! n10167@n9699@&lexical-rtd n9699@&lexical-rtd) (set! n10166@n9697@lexical-violation? n9697@lexical-violation?) (set! n10165@n9695@make-lexical-violation n9695@make-lexical-violation) (set! n10164@n9693@p? n9693@p?) (set! n10163@n9690@n9682 n9690@n9682) (set! n10162@n9688@n9683 n9688@n9683) (set! n10161@n9686@n9681 n9686@n9681) (set! n10160@n9680@&implementation-restriction-rcd n9680@&implementation-restriction-rcd) (set! n10159@n9678@&implementation-restriction-rtd n9678@&implementation-restriction-rtd) (set! n10158@n9676@implementation-restriction-violation? n9676@implementation-restriction-violation?) (set! n10157@n9674@make-implementation-restriction-violation n9674@make-implementation-restriction-violation) (set! n10156@n9672@p? n9672@p?) (set! n10155@n9669@n9661 n9669@n9661) (set! n10154@n9667@n9662 n9667@n9662) (set! n10153@n9665@n9660 n9665@n9660) (set! n10152@n9659@&non-continuable-rcd n9659@&non-continuable-rcd) (set! n10151@n9657@&non-continuable-rtd n9657@&non-continuable-rtd) (set! n10150@n9655@non-continuable-violation? n9655@non-continuable-violation?) (set! n10149@n9653@make-non-continuable-violation n9653@make-non-continuable-violation) (set! n10148@n9651@p? n9651@p?) (set! n10147@n9648@n9640 n9648@n9640) (set! n10146@n9646@n9641 n9646@n9641) (set! n10145@n9644@n9639 n9644@n9639) (set! n10144@n9638@&who-rcd n9638@&who-rcd) (set! n10143@n9636@&who-rtd n9636@&who-rtd) (set! n10142@n9634@condition-who n9634@condition-who) (set! n10141@n9632@who-condition? n9632@who-condition?) (set! n10140@n9630@n9613@condition-who n9630@n9613@condition-who) (set! n10139@n9628@make-who-condition n9628@make-who-condition) (set! n10138@n9626@p? n9626@p?) (set! n10137@n9623@n9615 n9623@n9615) (set! n10136@n9621@n9616 n9621@n9616) (set! n10135@n9619@n9614 n9619@n9614) (set! n10134@n9612@&irritants-rcd n9612@&irritants-rcd) (set! n10133@n9610@&irritants-rtd n9610@&irritants-rtd) (set! n10132@n9608@condition-irritants n9608@condition-irritants) (set! n10131@n9606@irritants-condition? n9606@irritants-condition?) (set! n10130@n9604@n9587@condition-irritants n9604@n9587@condition-irritants) (set! n10129@n9602@make-irritants-condition n9602@make-irritants-condition) (set! n10128@n9600@p? n9600@p?) (set! n10127@n9597@n9589 n9597@n9589) (set! n10126@n9595@n9590 n9595@n9590) (set! n10125@n9593@n9588 n9593@n9588) (set! n10124@n9586@&assertion-rcd n9586@&assertion-rcd) (set! n10123@n9584@&assertion-rtd n9584@&assertion-rtd) (set! n10122@n9582@assertion-violation? n9582@assertion-violation?) (set! n10121@n9580@make-assertion-violation n9580@make-assertion-violation) (set! n10120@n9578@p? n9578@p?) (set! n10119@n9575@n9567 n9575@n9567) (set! n10118@n9573@n9568 n9573@n9568) (set! n10117@n9571@n9566 n9571@n9566) (set! n10116@n9565@&violation-rcd n9565@&violation-rcd) (set! n10115@n9563@&violation-rtd n9563@&violation-rtd) (set! n10114@n9561@violation? n9561@violation?) (set! n10113@n9559@make-violation n9559@make-violation) (set! n10112@n9557@p? n9557@p?) (set! n10111@n9554@n9546 n9554@n9546) (set! n10110@n9552@n9547 n9552@n9547) (set! n10109@n9550@n9545 n9550@n9545) (set! n10108@n9544@&error-rcd n9544@&error-rcd) (set! n10107@n9542@&error-rtd n9542@&error-rtd) (set! n10106@n9540@error? n9540@error?) (set! n10105@n9538@make-error n9538@make-error) (set! n10104@n9536@p? n9536@p?) (set! n10103@n9533@n9525 n9533@n9525) (set! n10102@n9531@n9526 n9531@n9526) (set! n10101@n9529@n9524 n9529@n9524) (set! n10100@n9523@&serious-rcd n9523@&serious-rcd) (set! n10099@n9521@&serious-rtd n9521@&serious-rtd) (set! n10098@n9519@serious-condition? n9519@serious-condition?) (set! n10097@n9517@make-serious-condition n9517@make-serious-condition) (set! n10096@n9515@p? n9515@p?) (set! n10095@n9512@n9504 n9512@n9504) (set! n10094@n9510@n9505 n9510@n9505) (set! n10093@n9508@n9503 n9508@n9503) (set! n10092@n9502@&warning-rcd n9502@&warning-rcd) (set! n10091@n9500@&warning-rtd n9500@&warning-rtd) (set! n10090@n9498@warning? n9498@warning?) (set! n10089@n9496@make-warning n9496@make-warning) (set! n10088@n9494@p? n9494@p?) (set! n10087@n9491@n9483 n9491@n9483) (set! n10086@n9489@n9484 n9489@n9484) (set! n10085@n9487@n9482 n9487@n9482) (set! n10084@n9481@&message-rcd n9481@&message-rcd) (set! n10083@n9479@&message-rtd n9479@&message-rtd) (set! n10082@n9477@condition-message n9477@condition-message) (set! n10081@n9475@message-condition? n9475@message-condition?) (set! n10080@n9473@n9456@condition-message n9473@n9456@condition-message) (set! n10079@n9471@make-message-condition n9471@make-message-condition) (set! n10078@n9469@p? n9469@p?) (set! n10077@n9466@n9458 n9466@n9458) (set! n10076@n9464@n9459 n9464@n9459) (set! n10075@n9462@n9457 n9462@n9457) (set! n10074@n9390@&condition-rcd n9390@&condition-rcd) (set! n10073@n9388@&condition-rtd n9388@&condition-rtd) (set! n10072@n9386@make-&condition n9386@make-&condition) (set! n10071@n9384@&condition? n9384@&condition?) (set! n10070@n9381@n9373 n9381@n9373) (set! n10069@n9379@n9374 n9379@n9374) (set! n10068@n9377@n9372 n9377@n9372)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (n1246@n1171@current-primitive-locations (lambda (n11323@x) ((lambda (n11325@t) (if n11325@t (cdr n11325@t) '#f)) (assq n11323@x '((&no-nans-rcd . n10308@n10067@&no-nans-rcd) (&no-nans-rtd . n10307@n10065@&no-nans-rtd) (&no-infinities-rcd . n10300@n10046@&no-infinities-rcd) (&no-infinities-rtd . n10299@n10044@&no-infinities-rtd) (&i/o-encoding-rcd . n10292@n10025@&i/o-encoding-rcd) (&i/o-encoding-rtd . n10291@n10023@&i/o-encoding-rtd) (&i/o-decoding-rcd . n10282@n9999@&i/o-decoding-rcd) (&i/o-decoding-rtd . n10281@n9997@&i/o-decoding-rtd) (&i/o-port-rcd . n10274@n9978@&i/o-port-rcd) (&i/o-port-rtd . n10273@n9976@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . n10264@n9952@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . n10263@n9950@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . n10256@n9931@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . n10255@n9929@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . n10248@n9910@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . n10247@n9908@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . n10240@n9889@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . n10239@n9887@&i/o-file-protection-rtd) (&i/o-filename-rcd . n10232@n9868@&i/o-filename-rcd) (&i/o-filename-rtd . n10231@n9866@&i/o-filename-rtd) (&i/o-invalid-position-rcd . n10222@n9842@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . n10221@n9840@&i/o-invalid-position-rtd) (&i/o-write-rcd . n10212@n9816@&i/o-write-rcd) (&i/o-write-rtd . n10211@n9814@&i/o-write-rtd) (&i/o-read-rcd . n10204@n9795@&i/o-read-rcd) (&i/o-read-rtd . n10203@n9793@&i/o-read-rtd) (&i/o-rcd . n10196@n9774@&i/o-rcd) (&i/o-rtd . n10195@n9772@&i/o-rtd) (&undefined-rcd . n10188@n9753@&undefined-rcd) (&undefined-rtd . n10187@n9751@&undefined-rtd) (&syntax-rcd . n10180@n9732@&syntax-rcd) (&syntax-rtd . n10179@n9730@&syntax-rtd) (&lexical-rcd . n10168@n9701@&lexical-rcd) (&lexical-rtd . n10167@n9699@&lexical-rtd) (&implementation-restriction-rcd . n10160@n9680@&implementation-restriction-rcd) (&implementation-restriction-rtd . n10159@n9678@&implementation-restriction-rtd) (&non-continuable-rcd . n10152@n9659@&non-continuable-rcd) (&non-continuable-rtd . n10151@n9657@&non-continuable-rtd) (&who-rcd . n10144@n9638@&who-rcd) (&who-rtd . n10143@n9636@&who-rtd) (&irritants-rcd . n10134@n9612@&irritants-rcd) (&irritants-rtd . n10133@n9610@&irritants-rtd) (&assertion-rcd . n10124@n9586@&assertion-rcd) (&assertion-rtd . n10123@n9584@&assertion-rtd) (&violation-rcd . n10116@n9565@&violation-rcd) (&violation-rtd . n10115@n9563@&violation-rtd) (&error-rcd . n10108@n9544@&error-rcd) (&error-rtd . n10107@n9542@&error-rtd) (&serious-rcd . n10100@n9523@&serious-rcd) (&serious-rtd . n10099@n9521@&serious-rtd) (&warning-rcd . n10092@n9502@&warning-rcd) (&warning-rtd . n10091@n9500@&warning-rtd) (&message-rcd . n10084@n9481@&message-rcd) (&message-rtd . n10083@n9479@&message-rtd) (&condition-rcd . n10074@n9390@&condition-rcd) (&condition-rtd . n10073@n9388@&condition-rtd) (syntax-error . n9358@n2993@syntax-error) (syntax-dispatch . n9251@n2764@syntax-dispatch) (gensym . n1151@n915@gensym) (load . n10571@n10336@load) (interaction-environment . n9366@n3009@interaction-environment) (library-path . n1775@n1412@library-path) (make-parameter . n1165@n943@make-parameter) (make-variable-transformer . n9185@n2323@make-variable-transformer) (identifier? . n9361@n2999@identifier?) (generate-temporaries . n9351@n2979@generate-temporaries) (free-identifier=? . n9352@n2981@free-identifier=?) (syntax->datum . n9363@n3003@syntax->datum) (datum->syntax . n9362@n3001@datum->syntax) (bound-identifier=? . n9353@n2983@bound-identifier=?) (make-i/o-write-error . n10209@n9810@make-i/o-write-error) (make-i/o-read-error . n10201@n9789@make-i/o-read-error) (make-i/o-port-error . n10269@n9968@make-i/o-port-error) (make-i/o-invalid-position-error . n10217@n9832@make-i/o-invalid-position-error) (make-i/o-filename-error . n10227@n9858@make-i/o-filename-error) (make-i/o-file-protection-error . n10237@n9883@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . n10245@n9904@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . n10261@n9946@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . n10253@n9925@make-i/o-file-already-exists-error) (make-i/o-error . n10193@n9768@make-i/o-error) (make-i/o-encoding-error . n10287@n10015@make-i/o-encoding-error) (make-i/o-decoding-error . n10279@n9993@make-i/o-decoding-error) (i/o-write-error? . n10210@n9812@i/o-write-error?) (i/o-read-error? . n10202@n9791@i/o-read-error?) (i/o-port-error? . n10271@n9972@i/o-port-error?) (i/o-invalid-position-error? . n10219@n9836@i/o-invalid-position-error?) (i/o-filename-error? . n10229@n9862@i/o-filename-error?) (i/o-file-protection-error? . n10238@n9885@i/o-file-protection-error?) (i/o-file-is-read-only-error? . n10246@n9906@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . n10262@n9948@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . n10254@n9927@i/o-file-already-exists-error?) (i/o-error? . n10194@n9770@i/o-error?) (i/o-error-position . n10220@n9838@i/o-error-position) (i/o-error-port . n10272@n9974@i/o-error-port) (i/o-error-filename . n10230@n9864@i/o-error-filename) (i/o-encoding-error? . n10289@n10019@i/o-encoding-error?) (i/o-encoding-error-char . n10290@n10021@i/o-encoding-error-char) (i/o-decoding-error? . n10280@n9995@i/o-decoding-error?) (scheme-report-environment . n9342@n2961@scheme-report-environment) (null-environment . n9341@n2959@null-environment) (command-line . n10568@n10330@command-line) (eval . n9344@n2965@eval) (environment . n9340@n2957@environment) (who-condition? . n10141@n9632@who-condition?) (warning? . n10090@n9498@warning?) (violation? . n10114@n9561@violation?) (undefined-violation? . n10186@n9749@undefined-violation?) (syntax-violation? . n10176@n9724@syntax-violation?) (syntax-violation-subform . n10178@n9728@syntax-violation-subform) (syntax-violation-form . n10177@n9726@syntax-violation-form) (syntax-violation . n9360@n2997@syntax-violation) (serious-condition? . n10098@n9519@serious-condition?) (non-continuable-violation? . n10150@n9655@non-continuable-violation?) (message-condition? . n10081@n9475@message-condition?) (make-who-condition . n10139@n9628@make-who-condition) (make-warning . n10089@n9496@make-warning) (make-violation . n10113@n9559@make-violation) (make-undefined-violation . n10185@n9747@make-undefined-violation) (make-syntax-violation . n10173@n9718@make-syntax-violation) (make-serious-condition . n10097@n9517@make-serious-condition) (make-non-continuable-violation . n10149@n9653@make-non-continuable-violation) (make-message-condition . n10079@n9471@make-message-condition) (make-lexical-violation . n10165@n9695@make-lexical-violation) (make-irritants-condition . n10129@n9602@make-irritants-condition) (make-implementation-restriction-violation . n10157@n9674@make-implementation-restriction-violation) (make-error . n10105@n9538@make-error) (make-assertion-violation . n10121@n9580@make-assertion-violation) (lexical-violation? . n10166@n9697@lexical-violation?) (irritants-condition? . n10131@n9606@irritants-condition?) (implementation-restriction-violation? . n10158@n9676@implementation-restriction-violation?) (error? . n10106@n9540@error?) (condition-who . n10142@n9634@condition-who) (condition-message . n10082@n9477@condition-message) (condition-irritants . n10132@n9608@condition-irritants) (assertion-violation? . n10122@n9582@assertion-violation?) (no-nans-violation? . n10306@n10063@no-nans-violation?) (no-infinities-violation? . n10298@n10042@no-infinities-violation?) (make-no-nans-violation . n10305@n10061@make-no-nans-violation) (make-no-infinities-violation . n10297@n10040@make-no-infinities-violation) (assertion-error . n9357@n2991@assertion-error)))))) (n1791@n1444@install-library 'n11288 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . n11278) (format . n11275) (string-split . n11264) (call-process . n11258) (set-current-directory! . n11254) (expand-path . n11253) (current-directory . n11252) (%spawn . n11251) (%waitpid . n11250) (%ffi-supported? . n11249) (%ffi-pointer-ref . n11248) (%ffi-pointer->string . n11247) (%ffi-call->string-or-zero . n11246) (%ffi-call->double . n11245) (%ffi-call->void* . n11244) (%ffi-call->void . n11243) (%ffi-call->int . n11242) (%ffi-lookup . n11241) (%ffi-open . n11240) (%fork . n11239) (%pipe . n11238) (p . n11237) (string-upcase . n11217) (string-titlecase . n11216) (string-normalize-nfkd . n11215) (string-normalize-nfkc . n11214) (string-normalize-nfd . n11213) (string-normalize-nfc . n11212) (string-foldcase . n11211) (string-downcase . n11210) (string-ci>? . n11209) (string-ci>=? . n11208) (string-ci=? . n11207) (string-ci<? . n11206) (string-ci<=? . n11205) (char-whitespace? . n11204) (char-upper-case? . n11203) (char-title-case? . n11202) (char-numeric? . n11201) (char-lower-case? . n11200) (char-general-category . n11199) (char-upcase . n11198) (char-titlecase . n11197) (char-foldcase . n11196) (char-downcase . n11195) (char-ci>? . n11194) (char-ci>=? . n11193) (char-ci=? . n11192) (char-ci<? . n11191) (char-ci<=? . n11190) (char-alphabetic? . n11189) (make-variable-transformer . n2322) (identifier? . n2998) (generate-temporaries . n2978) (free-identifier=? . n2980) (syntax->datum . n3002) (datum->syntax . n3000) (bound-identifier=? . n2982) (record-type-descriptor? . n11188) (record-predicate . n11187) (record-mutator . n11186) (record-constructor . n11185) (record-accessor . n11184) (make-record-type-descriptor . n11183) (make-record-constructor-descriptor . n11182) (record? . n11181) (record-type-uid . n11180) (record-type-sealed? . n11179) (record-type-parent . n11178) (record-type-opaque? . n11177) (record-type-name . n11176) (record-type-generative? . n11175) (record-type-field-names . n11174) (record-rtd . n11173) (record-field-mutable? . n11172) (delete-file . n11171) (file-exists? . n11170) (vector-sort! . n11169) (vector-sort . n11168) (list-sort . n11167) (symbol-hash . n11166) (string-ci-hash . n11165) (string-hash . n11164) (equal-hash . n11163) (hashtable-equivalence-function . n11162) (make-hashtable . n11161) (hashtable-hash-function . n11160) (make-eqv-hashtable . n11159) (make-eq-hashtable . n11158) (hashtable? . n11157) (hashtable-update! . n11156) (hashtable-size . n11155) (hashtable-set! . n11154) (hashtable-ref . n11153) (hashtable-mutable? . n11152) (hashtable-keys . n11151) (hashtable-entries . n11150) (hashtable-delete! . n11149) (hashtable-copy . n11148) (hashtable-contains? . n11147) (hashtable-clear! . n11146) (call-with-output-file . n11145) (call-with-input-file . n11144) (write-char . n11143) (write . n11142) (with-output-to-file . n11141) (with-input-from-file . n11140) (read-char . n11139) (read . n11138) (peek-char . n11137) (open-output-file . n11136) (open-input-file . n11135) (newline . n11134) (display . n11133) (close-output-port . n11132) (close-input-port . n11131) (eof-object? . n11130) (eof-object . n11129) (current-error-port . n11128) (current-output-port . n11127) (current-input-port . n11126) (output-port? . n11125) (input-port? . n11124) (utf-8-codec . n11123) (utf-16-codec . n11122) (transcoder-error-handling-mode . n11121) (transcoder-eol-style . n11120) (transcoder-codec . n11119) (transcoded-port . n11118) (textual-port? . n11117) (string->bytevector . n11116) (standard-output-port . n11115) (standard-input-port . n11114) (standard-error-port . n11113) (set-port-position! . n11112) (put-u8 . n11111) (put-string . n11110) (put-datum . n11109) (put-char . n11108) (put-bytevector . n11107) (port? . n11106) (port-transcoder . n11105) (port-position . n11104) (port-has-set-port-position!? . n11103) (port-has-port-position? . n11102) (port-eof? . n11101) (output-port-buffer-mode . n11100) (open-string-output-port . n11099) (open-string-input-port . n11098) (open-file-output-port . n11097) (open-file-input/output-port . n11096) (open-file-input-port . n11095) (open-bytevector-output-port . n11094) (open-bytevector-input-port . n11093) (native-transcoder . n11092) (native-eol-style . n11091) (make-transcoder . n11090) (latin-1-codec . n11089) (make-i/o-write-error . n9809) (make-i/o-read-error . n9788) (make-i/o-port-error . n9967) (make-i/o-invalid-position-error . n9831) (make-i/o-filename-error . n9857) (make-i/o-file-protection-error . n9882) (make-i/o-file-is-read-only-error . n9903) (make-i/o-file-does-not-exist-error . n9945) (make-i/o-file-already-exists-error . n9924) (make-i/o-error . n9767) (make-i/o-encoding-error . n10014) (make-i/o-decoding-error . n9992) (make-custom-textual-output-port . n11088) (make-custom-textual-input/output-port . n11087) (make-custom-textual-input-port . n11086) (make-custom-binary-output-port . n11085) (make-custom-binary-input/output-port . n11084) (make-custom-binary-input-port . n11083) (make-bytevector . n11082) (lookahead-u8 . n11081) (lookahead-char . n11080) (i/o-write-error? . n9811) (i/o-read-error? . n9790) (i/o-port-error? . n9971) (i/o-invalid-position-error? . n9835) (i/o-filename-error? . n9861) (i/o-file-protection-error? . n9884) (i/o-file-is-read-only-error? . n9905) (i/o-file-does-not-exist-error? . n9947) (i/o-file-already-exists-error? . n9926) (i/o-error? . n9769) (i/o-error-position . n9837) (i/o-error-port . n9973) (i/o-error-filename . n9863) (i/o-encoding-error? . n10018) (i/o-encoding-error-char . n10020) (i/o-decoding-error? . n9994) (get-u8 . n11079) (get-string-n! . n11078) (get-string-n . n11077) (get-string-all . n11076) (get-line . n11075) (get-datum . n11074) (get-char . n11073) (get-bytevector-some . n11072) (get-bytevector-n! . n11071) (get-bytevector-n . n11070) (get-bytevector-all . n11069) (flush-output-port . n11068) (close-port . n11067) (exit . n11059) (command-line . n10329) (string-fill! . n11058) (string-set! . n11057) (set-cdr! . n11056) (set-car! . n11055) (remove . n11054) (remv . n11053) (remp . n11052) (remq . n11051) (partition . n11050) (memv . n11049) (memq . n11048) (memp . n11047) (member . n11046) (exists . n11045) (for-all . n11044) (fold-right . n11043) (fold-left . n11042) (find . n11041) (filter . n11040) (cons* . n11039) (assv . n11038) (assq . n11037) (assp . n11036) (assoc . n11035) (call-with-string-output-port . n11034) (call-with-port . n11033) (call-with-bytevector-output-port . n11032) (bytevector->string . n11031) (buffer-mode? . n11030) (binary-port? . n11029) (with-exception-handler . n11028) (raise-continuable . n11027) (raise . n11026) (eval . n2964) (environment . n2956) (make-enumeration . n11025) (enum-set=? . n11024) (enum-set-universe . n11023) (enum-set-union . n11022) (enum-set-subset? . n11021) (enum-set-projection . n11020) (enum-set-member? . n11019) (enum-set-intersection . n11018) (enum-set-indexer . n11017) (enum-set-difference . n11016) (enum-set-constructor . n11015) (enum-set-complement . n11014) (enum-set->list . n11013) (who-condition? . n9631) (warning? . n9497) (violation? . n9560) (undefined-violation? . n9748) (syntax-violation? . n9723) (syntax-violation-subform . n9727) (syntax-violation-form . n9725) (syntax-violation . n2996) (simple-conditions . n11012) (serious-condition? . n9518) (non-continuable-violation? . n9654) (message-condition? . n9474) (make-who-condition . n9627) (make-warning . n9495) (make-violation . n9558) (make-undefined-violation . n9746) (make-syntax-violation . n9717) (make-serious-condition . n9516) (make-non-continuable-violation . n9652) (make-message-condition . n9470) (make-lexical-violation . n9694) (make-irritants-condition . n9601) (make-implementation-restriction-violation . n9673) (make-error . n9537) (make-assertion-violation . n9579) (lexical-violation? . n9696) (irritants-condition? . n9605) (implementation-restriction-violation? . n9675) (error? . n9539) (condition-who . n9633) (condition-predicate . n11011) (condition-message . n9476) (condition-irritants . n9607) (condition-accessor . n11010) (condition . n11009) (assertion-violation? . n9581) (condition? . n11008) (utf32->string . n11007) (utf16->string . n11006) (utf8->string . n11005) (uint-list->bytevector . n11004) (u8-list->bytevector . n11003) (string->utf8 . n11002) (string->utf32 . n11001) (string->utf16 . n11000) (sint-list->bytevector . n10999) (native-endianness . n10998) (bytevector? . n10997) (bytevector=? . n10996) (bytevector-uint-set! . n10995) (bytevector-uint-ref . n10994) (bytevector-u8-set! . n10993) (bytevector-u8-ref . n10992) (bytevector-u64-set! . n10991) (bytevector-u64-ref . n10990) (bytevector-u64-native-set! . n10989) (bytevector-u64-native-ref . n10988) (bytevector-u32-set! . n10987) (bytevector-u32-ref . n10986) (bytevector-u32-native-set! . n10985) (bytevector-u32-native-ref . n10984) (bytevector-u16-set! . n10983) (bytevector-u16-ref . n10982) (bytevector-u16-native-set! . n10981) (bytevector-u16-native-ref . n10980) (bytevector-sint-set! . n10979) (bytevector-sint-ref . n10978) (bytevector-s8-set! . n10977) (bytevector-s8-ref . n10976) (bytevector-s64-set! . n10975) (bytevector-s64-ref . n10974) (bytevector-s64-native-set! . n10973) (bytevector-s64-native-ref . n10972) (bytevector-s32-set! . n10971) (bytevector-s32-ref . n10970) (bytevector-s32-native-set! . n10969) (bytevector-s32-native-ref . n10968) (bytevector-s16-set! . n10967) (bytevector-s16-ref . n10966) (bytevector-s16-native-set! . n10965) (bytevector-s16-native-ref . n10964) (bytevector-length . n10963) (bytevector-ieee-single-ref . n10962) (bytevector-ieee-single-set! . n10961) (bytevector-ieee-single-native-set! . n10960) (bytevector-ieee-single-native-ref . n10959) (bytevector-ieee-double-set! . n10958) (bytevector-ieee-double-ref . n10957) (bytevector-ieee-double-native-set! . n10956) (bytevector-ieee-double-native-ref . n10955) (bytevector-fill! . n10954) (bytevector-copy! . n10953) (bytevector-copy . n10952) (bytevector->uint-list . n10951) (bytevector->u8-list . n10950) (bytevector->sint-list . n10949) (no-nans-violation? . n10062) (no-infinities-violation? . n10041) (make-no-nans-violation . n10060) (make-no-infinities-violation . n10039) (real->flonum . n10948) (flzero? . n10947) (fltruncate . n10946) (fltan . n10945) (flsqrt . n10944) (flsin . n10943) (flround . n10942) (flpositive? . n10941) (flonum? . n10940) (flodd? . n10939) (flnumerator . n10938) (flnegative? . n10937) (flnan? . n10936) (flmod0 . n10935) (flmod . n10934) (flmin . n10933) (flmax . n10932) (fllog . n10931) (flinteger? . n10930) (flinfinite? . n10929) (flfloor . n10928) (flfinite? . n10927) (flexpt . n10926) (flexp . n10925) (fleven? . n10924) (fldiv0-and-mod0 . n10923) (fldiv0 . n10922) (fldiv-and-mod . n10921) (fldiv . n10920) (fldenominator . n10919) (flcos . n10918) (flceiling . n10917) (flatan . n10916) (flasin . n10915) (flacos . n10914) (flabs . n10913) (fl>? . n10912) (fl>=? . n10911) (fl=? . n10910) (fl<? . n10909) (fl<=? . n10908) (fl/ . n10907) (fl- . n10906) (fl+ . n10905) (fl* . n10904) (fixnum->flonum . n10903) (fxzero? . n10902) (fxxor . n10901) (fxrotate-bit-field . n10900) (fxreverse-bit-field . n10899) (fxpositive? . n10898) (fxodd? . n10897) (fxnot . n10896) (fxnegative? . n10895) (fxmod0 . n10894) (fxmod . n10893) (fxmin . n10892) (fxmax . n10891) (fxlength . n10890) (fxior . n10889) (fxif . n10888) (fxfirst-bit-set . n10887) (fxeven? . n10886) (fxdiv0-and-mod0 . n10885) (fxdiv0 . n10884) (fxdiv-and-mod . n10883) (fxdiv . n10882) (fxcopy-bit-field . n10881) (fxcopy-bit . n10880) (fxbit-set? . n10879) (fxbit-field . n10878) (fxbit-count . n10877) (fxarithmetic-shift-right . n10876) (fxarithmetic-shift-left . n10875) (fxarithmetic-shift . n10874) (fxand . n10873) (fx>? . n10872) (fx>=? . n10871) (fx=? . n10870) (fx<? . n10869) (fx<=? . n10868) (fx-/carry . n10867) (fx- . n10866) (fx+/carry . n10865) (fx+ . n10864) (fx*/carry . n10863) (fx* . n10862) (greatest-fixnum . n10861) (least-fixnum . n10860) (fixnum-width . n10859) (fixnum? . n10858) (bitwise-rotate-bit-field . n10857) (bitwise-reverse-bit-field . n10856) (bitwise-length . n10855) (bitwise-if . n10854) (bitwise-first-bit-set . n10853) (bitwise-copy-bit-field . n10852) (bitwise-copy-bit . n10851) (bitwise-bit-set? . n10850) (bitwise-bit-field . n10849) (bitwise-bit-count . n10848) (bitwise-xor . n10847) (bitwise-ior . n10846) (bitwise-and . n10845) (bitwise-not . n10844) (bitwise-arithmetic-shift-right . n10843) (bitwise-arithmetic-shift-left . n10842) (bitwise-arithmetic-shift . n10841) (zero? . n10840) (vector? . n10839) (vector-set! . n10838) (vector-ref . n10837) (vector-map . n10836) (vector-length . n10835) (vector-for-each . n10834) (vector-fill! . n10833) (vector->list . n10832) (vector . n10831) (values . n10830) (truncate . n10829) (tan . n10828) (symbol? . n10827) (symbol=? . n10826) (symbol->string . n10825) (substring . n10824) (string? . n10823) (string>? . n10822) (string>=? . n10821) (string=? . n10820) (string<? . n10819) (string<=? . n10818) (string-ref . n10817) (string-length . n10816) (string-for-each . n10815) (string-copy . n10814) (string-append . n10813) (string->symbol . n10812) (string->number . n10811) (string->list . n10810) (string . n10809) (sqrt . n10808) (sin . n10807) (round . n10806) (reverse . n10805) (real? . n10804) (real-valued? . n10803) (real-part . n10802) (rationalize . n10801) (rational? . n10800) (rational-valued? . n10799) (procedure? . n10798) (positive? . n10797) (pair? . n10796) (odd? . n10795) (numerator . n10794) (number? . n10793) (number->string . n10792) (null? . n10791) (not . n10790) (negative? . n10789) (nan? . n10788) (min . n10787) (max . n10786) (map . n10785) (make-vector . n10784) (make-string . n10783) (make-rectangular . n10782) (make-polar . n10781) (magnitude . n10780) (log . n10779) (list? . n10778) (list-tail . n10777) (list-ref . n10776) (list->vector . n10775) (list->string . n10774) (list . n10773) (length . n10772) (lcm . n10771) (integer? . n10770) (integer-valued? . n10769) (integer->char . n10768) (infinite? . n10767) (inexact? . n10766) (inexact . n10765) (imag-part . n10764) (gcd . n10763) (for-each . n10762) (floor . n10761) (finite? . n10760) (expt . n10759) (exp . n10758) (exact? . n10757) (exact-integer-sqrt . n10756) (exact . n10755) (even? . n10754) (error . n10753) (eqv? . n10752) (equal? . n10751) (eq? . n10750) (dynamic-wind . n10749) (div0-and-mod0 . n10748) (mod0 . n10747) (div0 . n10746) (div-and-mod . n10745) (mod . n10744) (div . n10743) (denominator . n10742) (cos . n10741) (cons . n10740) (complex? . n10739) (char? . n10738) (char>? . n10737) (char>=? . n10736) (char=? . n10735) (char<? . n10734) (char<=? . n10733) (char->integer . n10732) (ceiling . n10731) (call-with-values . n10730) (call/cc . n10729) (call-with-current-continuation . n10728) (cddddr . n10727) (cdddar . n10726) (cddadr . n10725) (cddaar . n10724) (cdaddr . n10723) (cdadar . n10722) (cdaadr . n10721) (cdaaar . n10720) (cadddr . n10719) (caddar . n10718) (cadadr . n10717) (cadaar . n10716) (caaddr . n10715) (caadar . n10714) (caaadr . n10713) (caaaar . n10712) (cdddr . n10711) (cddar . n10710) (cdadr . n10709) (cdaar . n10708) (caddr . n10707) (cadar . n10706) (caadr . n10705) (caaar . n10704) (cddr . n10703) (cdar . n10702) (cadr . n10701) (caar . n10700) (cdr . n10699) (car . n10698) (boolean? . n10697) (boolean=? . n10696) (atan . n10695) (assertion-violation . n10694) (asin . n10693) (apply . n10692) (append . n10691) (angle . n10690) (acos . n10689) (abs . n10688) (/ . n10687) (* . n10686) (- . n10685) (+ . n10684) (>= . n10683) (> . n10682) (= . n10681) (<= . n10680) (< . n10679) (library . n10678) (&no-nans . n10677) (&no-infinities . n10676) (&i/o-encoding . n10675) (&i/o-decoding . n10674) (&i/o-port . n10673) (&i/o-file-does-not-exist . n10672) (&i/o-file-already-exists . n10671) (&i/o-file-is-read-only . n10670) (&i/o-file-protection . n10669) (&i/o-filename . n10668) (&i/o-invalid-position . n10667) (&i/o-write . n10666) (&i/o-read . n10665) (&i/o . n10664) (&undefined . n10663) (&syntax . n10662) (&lexical . n10661) (&implementation-restriction . n10660) (&non-continuable . n10659) (&who . n10658) (&irritants . n10657) (&assertion . n10656) (&violation . n10655) (&error . n10654) (&serious . n10653) (&warning . n10652) (&message . n10651) (&condition . n10650) (define-condition-type . n10649) (define-enumeration . n10648) (define-record-type . n10647) (parent-rtd . n10646) (nongenerative . n10645) (opaque . n10644) (sealed . n10643) (protocol . n10642) (parent . n10641) (immutable . n10640) (mutable . n10639) (fields . n10638) (error-handling-mode . n10637) (file-options . n10636) (buffer-mode . n10635) (eol-style . n10634) (guard . n10633) (unsyntax-splicing . n10630) (unsyntax . n10629) (unquote-splicing . n10628) (unquote . n10627) (_ . n10626) (else . n10625) (=> . n10624) (... . n10623) (assert . n10622) (endianness . n10621) (do . n10618) (cond . n10617) (let* . n10616) (let . n10615) (let*-values . n10614) (let-values . n10613) (identifier-syntax . n10612) (with-syntax . n10611) (quasisyntax . n10610) (quasiquote . n10609) (syntax-rules . n10608) (include . n10607) (record-constructor-descriptor . n10605) (record-type-descriptor . n10604) (case . n10603) (unless . n10601) (when . n10600) (or . n10599) (and . n10598) (if . n10597) (letrec* . n10596) (letrec . n10595) (case-lambda . n10593) (lambda . n10592) (syntax . n10591) (syntax-case . n10590) (quote . n10589) (letrec-syntax . n10587) (let-syntax . n10586) (set! . n10585) (import . n10584) (begin . n10583) (define-syntax . n10581) (define . n10580)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11289 '(psyntax null-environment-5) '() '() '() '() '((make-promise . n11060) (unquote-splicing . n10628) (unquote . n10627) (_ . n10626) (else . n10625) (=> . n10624) (... . n10623) (delay . n10620) (do . n10618) (cond . n10617) (let* . n10616) (let . n10615) (quasiquote . n10609) (syntax-rules . n10608) (case . n10603) (or . n10599) (and . n10598) (if . n10597) (letrec . n10595) (lambda . n10592) (quote . n10589) (letrec-syntax . n10587) (let-syntax . n10586) (set! . n10585) (begin . n10583) (define-syntax . n10581) (define . n10580)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11290 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . n11209) (string-ci>=? . n11208) (string-ci=? . n11207) (string-ci<? . n11206) (string-ci<=? . n11205) (char-whitespace? . n11204) (char-upper-case? . n11203) (char-numeric? . n11201) (char-lower-case? . n11200) (char-upcase . n11198) (char-downcase . n11195) (char-ci>? . n11194) (char-ci>=? . n11193) (char-ci=? . n11192) (char-ci<? . n11191) (char-ci<=? . n11190) (char-alphabetic? . n11189) (call-with-output-file . n11145) (call-with-input-file . n11144) (write-char . n11143) (write . n11142) (with-output-to-file . n11141) (with-input-from-file . n11140) (read-char . n11139) (read . n11138) (peek-char . n11137) (open-output-file . n11136) (open-input-file . n11135) (newline . n11134) (display . n11133) (close-output-port . n11132) (close-input-port . n11131) (eof-object . n11129) (current-output-port . n11127) (current-input-port . n11126) (output-port? . n11125) (input-port? . n11124) (scheme-report-environment . n2960) (quotient . n11066) (null-environment . n2958) (remainder . n11065) (modulo . n11064) (inexact->exact . n11063) (force . n11062) (exact->inexact . n11061) (make-promise . n11060) (string-fill! . n11058) (string-set! . n11057) (set-cdr! . n11056) (set-car! . n11055) (memv . n11049) (memq . n11048) (member . n11046) (assv . n11038) (assq . n11037) (assoc . n11035) (eval . n2964) (zero? . n10840) (vector? . n10839) (vector-set! . n10838) (vector-ref . n10837) (vector-length . n10835) (vector-fill! . n10833) (vector->list . n10832) (vector . n10831) (values . n10830) (truncate . n10829) (tan . n10828) (symbol? . n10827) (symbol->string . n10825) (substring . n10824) (string? . n10823) (string>? . n10822) (string>=? . n10821) (string=? . n10820) (string<? . n10819) (string<=? . n10818) (string-ref . n10817) (string-length . n10816) (string-copy . n10814) (string-append . n10813) (string->symbol . n10812) (string->number . n10811) (string->list . n10810) (string . n10809) (sqrt . n10808) (sin . n10807) (round . n10806) (reverse . n10805) (real? . n10804) (real-part . n10802) (rationalize . n10801) (rational? . n10800) (procedure? . n10798) (positive? . n10797) (pair? . n10796) (odd? . n10795) (numerator . n10794) (number? . n10793) (number->string . n10792) (not . n10790) (negative? . n10789) (min . n10787) (max . n10786) (map . n10785) (make-vector . n10784) (make-string . n10783) (make-rectangular . n10782) (make-polar . n10781) (magnitude . n10780) (log . n10779) (list? . n10778) (list-tail . n10777) (list-ref . n10776) (list->vector . n10775) (list->string . n10774) (list . n10773) (length . n10772) (lcm . n10771) (integer? . n10770) (integer->char . n10768) (inexact? . n10766) (imag-part . n10764) (gcd . n10763) (for-each . n10762) (floor . n10761) (expt . n10759) (exp . n10758) (exact? . n10757) (even? . n10754) (eqv? . n10752) (equal? . n10751) (eq? . n10750) (dynamic-wind . n10749) (denominator . n10742) (cos . n10741) (cons . n10740) (complex? . n10739) (char? . n10738) (char>? . n10737) (char>=? . n10736) (char=? . n10735) (char<? . n10734) (char<=? . n10733) (char->integer . n10732) (ceiling . n10731) (call-with-values . n10730) (call-with-current-continuation . n10728) (cddddr . n10727) (cdddar . n10726) (cddadr . n10725) (cddaar . n10724) (cdaddr . n10723) (cdadar . n10722) (cdaadr . n10721) (cdaaar . n10720) (cadddr . n10719) (caddar . n10718) (cadadr . n10717) (cadaar . n10716) (caaddr . n10715) (caadar . n10714) (caaadr . n10713) (caaaar . n10712) (cdddr . n10711) (cddar . n10710) (cdadr . n10709) (cdaar . n10708) (caddr . n10707) (cadar . n10706) (caadr . n10705) (caaar . n10704) (cddr . n10703) (cdar . n10702) (cadr . n10701) (caar . n10700) (cdr . n10699) (car . n10698) (boolean? . n10697) (atan . n10695) (asin . n10693) (apply . n10692) (append . n10691) (angle . n10690) (acos . n10689) (abs . n10688) (/ . n10687) (* . n10686) (- . n10685) (+ . n10684) (>= . n10683) (> . n10682) (= . n10681) (<= . n10680) (< . n10679) (unquote-splicing . n10628) (unquote . n10627) (else . n10625) (=> . n10624) (... . n10623) (delay . n10620) (do . n10618) (cond . n10617) (let* . n10616) (let . n10615) (quasiquote . n10609) (syntax-rules . n10608) (case . n10603) (or . n10599) (and . n10598) (if . n10597) (letrec . n10595) (lambda . n10592) (quote . n10589) (letrec-syntax . n10587) (let-syntax . n10586) (set! . n10585) (begin . n10583) (define-syntax . n10581) (define . n10580)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11291 '(psyntax modules) '() '() '() '() '((module . n10582)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11292 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11293 '(rnrs) '(6) '() '() '() '((regexp? . n11281) (string-upcase . n11217) (string-titlecase . n11216) (string-normalize-nfkd . n11215) (string-normalize-nfkc . n11214) (string-normalize-nfd . n11213) (string-normalize-nfc . n11212) (string-foldcase . n11211) (string-downcase . n11210) (string-ci>? . n11209) (string-ci>=? . n11208) (string-ci=? . n11207) (string-ci<? . n11206) (string-ci<=? . n11205) (char-whitespace? . n11204) (char-upper-case? . n11203) (char-title-case? . n11202) (char-numeric? . n11201) (char-lower-case? . n11200) (char-general-category . n11199) (char-upcase . n11198) (char-titlecase . n11197) (char-foldcase . n11196) (char-downcase . n11195) (char-ci>? . n11194) (char-ci>=? . n11193) (char-ci=? . n11192) (char-ci<? . n11191) (char-ci<=? . n11190) (char-alphabetic? . n11189) (make-variable-transformer . n2322) (identifier? . n2998) (generate-temporaries . n2978) (free-identifier=? . n2980) (syntax->datum . n3002) (datum->syntax . n3000) (bound-identifier=? . n2982) (record-type-descriptor? . n11188) (record-predicate . n11187) (record-mutator . n11186) (record-constructor . n11185) (record-accessor . n11184) (make-record-type-descriptor . n11183) (make-record-constructor-descriptor . n11182) (record? . n11181) (record-type-uid . n11180) (record-type-sealed? . n11179) (record-type-parent . n11178) (record-type-opaque? . n11177) (record-type-name . n11176) (record-type-generative? . n11175) (record-type-field-names . n11174) (record-rtd . n11173) (record-field-mutable? . n11172) (delete-file . n11171) (file-exists? . n11170) (vector-sort! . n11169) (vector-sort . n11168) (list-sort . n11167) (symbol-hash . n11166) (string-ci-hash . n11165) (string-hash . n11164) (equal-hash . n11163) (hashtable-equivalence-function . n11162) (make-hashtable . n11161) (hashtable-hash-function . n11160) (make-eqv-hashtable . n11159) (make-eq-hashtable . n11158) (hashtable? . n11157) (hashtable-update! . n11156) (hashtable-size . n11155) (hashtable-set! . n11154) (hashtable-ref . n11153) (hashtable-mutable? . n11152) (hashtable-keys . n11151) (hashtable-entries . n11150) (hashtable-delete! . n11149) (hashtable-copy . n11148) (hashtable-contains? . n11147) (hashtable-clear! . n11146) (call-with-output-file . n11145) (call-with-input-file . n11144) (write-char . n11143) (write . n11142) (with-output-to-file . n11141) (with-input-from-file . n11140) (read-char . n11139) (read . n11138) (peek-char . n11137) (open-output-file . n11136) (open-input-file . n11135) (newline . n11134) (display . n11133) (close-output-port . n11132) (close-input-port . n11131) (eof-object? . n11130) (eof-object . n11129) (current-error-port . n11128) (current-output-port . n11127) (current-input-port . n11126) (output-port? . n11125) (input-port? . n11124) (utf-8-codec . n11123) (utf-16-codec . n11122) (transcoder-error-handling-mode . n11121) (transcoder-eol-style . n11120) (transcoder-codec . n11119) (transcoded-port . n11118) (textual-port? . n11117) (string->bytevector . n11116) (standard-output-port . n11115) (standard-input-port . n11114) (standard-error-port . n11113) (set-port-position! . n11112) (put-u8 . n11111) (put-string . n11110) (put-datum . n11109) (put-char . n11108) (put-bytevector . n11107) (port? . n11106) (port-transcoder . n11105) (port-position . n11104) (port-has-set-port-position!? . n11103) (port-has-port-position? . n11102) (port-eof? . n11101) (output-port-buffer-mode . n11100) (open-string-output-port . n11099) (open-string-input-port . n11098) (open-file-output-port . n11097) (open-file-input/output-port . n11096) (open-file-input-port . n11095) (open-bytevector-output-port . n11094) (open-bytevector-input-port . n11093) (native-transcoder . n11092) (native-eol-style . n11091) (make-transcoder . n11090) (latin-1-codec . n11089) (make-i/o-write-error . n9809) (make-i/o-read-error . n9788) (make-i/o-port-error . n9967) (make-i/o-invalid-position-error . n9831) (make-i/o-filename-error . n9857) (make-i/o-file-protection-error . n9882) (make-i/o-file-is-read-only-error . n9903) (make-i/o-file-does-not-exist-error . n9945) (make-i/o-file-already-exists-error . n9924) (make-i/o-error . n9767) (make-i/o-encoding-error . n10014) (make-i/o-decoding-error . n9992) (make-custom-textual-output-port . n11088) (make-custom-textual-input/output-port . n11087) (make-custom-textual-input-port . n11086) (make-custom-binary-output-port . n11085) (make-custom-binary-input/output-port . n11084) (make-custom-binary-input-port . n11083) (make-bytevector . n11082) (lookahead-u8 . n11081) (lookahead-char . n11080) (i/o-write-error? . n9811) (i/o-read-error? . n9790) (i/o-port-error? . n9971) (i/o-invalid-position-error? . n9835) (i/o-filename-error? . n9861) (i/o-file-protection-error? . n9884) (i/o-file-is-read-only-error? . n9905) (i/o-file-does-not-exist-error? . n9947) (i/o-file-already-exists-error? . n9926) (i/o-error? . n9769) (i/o-error-position . n9837) (i/o-error-port . n9973) (i/o-error-filename . n9863) (i/o-encoding-error? . n10018) (i/o-encoding-error-char . n10020) (i/o-decoding-error? . n9994) (get-u8 . n11079) (get-string-n! . n11078) (get-string-n . n11077) (get-string-all . n11076) (get-line . n11075) (get-datum . n11074) (get-char . n11073) (get-bytevector-some . n11072) (get-bytevector-n! . n11071) (get-bytevector-n . n11070) (get-bytevector-all . n11069) (flush-output-port . n11068) (close-port . n11067) (exit . n11059) (command-line . n10329) (remove . n11054) (remv . n11053) (remp . n11052) (remq . n11051) (partition . n11050) (memv . n11049) (memq . n11048) (memp . n11047) (member . n11046) (exists . n11045) (for-all . n11044) (fold-right . n11043) (fold-left . n11042) (find . n11041) (filter . n11040) (cons* . n11039) (assv . n11038) (assq . n11037) (assp . n11036) (assoc . n11035) (call-with-string-output-port . n11034) (call-with-port . n11033) (call-with-bytevector-output-port . n11032) (bytevector->string . n11031) (buffer-mode? . n11030) (binary-port? . n11029) (with-exception-handler . n11028) (raise-continuable . n11027) (raise . n11026) (make-enumeration . n11025) (enum-set=? . n11024) (enum-set-universe . n11023) (enum-set-union . n11022) (enum-set-subset? . n11021) (enum-set-projection . n11020) (enum-set-member? . n11019) (enum-set-intersection . n11018) (enum-set-indexer . n11017) (enum-set-difference . n11016) (enum-set-constructor . n11015) (enum-set-complement . n11014) (enum-set->list . n11013) (who-condition? . n9631) (warning? . n9497) (violation? . n9560) (undefined-violation? . n9748) (syntax-violation? . n9723) (syntax-violation-subform . n9727) (syntax-violation-form . n9725) (syntax-violation . n2996) (simple-conditions . n11012) (serious-condition? . n9518) (non-continuable-violation? . n9654) (message-condition? . n9474) (make-who-condition . n9627) (make-warning . n9495) (make-violation . n9558) (make-undefined-violation . n9746) (make-syntax-violation . n9717) (make-serious-condition . n9516) (make-non-continuable-violation . n9652) (make-message-condition . n9470) (make-lexical-violation . n9694) (make-irritants-condition . n9601) (make-implementation-restriction-violation . n9673) (make-error . n9537) (make-assertion-violation . n9579) (lexical-violation? . n9696) (irritants-condition? . n9605) (implementation-restriction-violation? . n9675) (error? . n9539) (condition-who . n9633) (condition-predicate . n11011) (condition-message . n9476) (condition-irritants . n9607) (condition-accessor . n11010) (condition . n11009) (assertion-violation? . n9581) (condition? . n11008) (utf32->string . n11007) (utf16->string . n11006) (utf8->string . n11005) (uint-list->bytevector . n11004) (u8-list->bytevector . n11003) (string->utf8 . n11002) (string->utf32 . n11001) (string->utf16 . n11000) (sint-list->bytevector . n10999) (native-endianness . n10998) (bytevector? . n10997) (bytevector=? . n10996) (bytevector-uint-set! . n10995) (bytevector-uint-ref . n10994) (bytevector-u8-set! . n10993) (bytevector-u8-ref . n10992) (bytevector-u64-set! . n10991) (bytevector-u64-ref . n10990) (bytevector-u64-native-set! . n10989) (bytevector-u64-native-ref . n10988) (bytevector-u32-set! . n10987) (bytevector-u32-ref . n10986) (bytevector-u32-native-set! . n10985) (bytevector-u32-native-ref . n10984) (bytevector-u16-set! . n10983) (bytevector-u16-ref . n10982) (bytevector-u16-native-set! . n10981) (bytevector-u16-native-ref . n10980) (bytevector-sint-set! . n10979) (bytevector-sint-ref . n10978) (bytevector-s8-set! . n10977) (bytevector-s8-ref . n10976) (bytevector-s64-set! . n10975) (bytevector-s64-ref . n10974) (bytevector-s64-native-set! . n10973) (bytevector-s64-native-ref . n10972) (bytevector-s32-set! . n10971) (bytevector-s32-ref . n10970) (bytevector-s32-native-set! . n10969) (bytevector-s32-native-ref . n10968) (bytevector-s16-set! . n10967) (bytevector-s16-ref . n10966) (bytevector-s16-native-set! . n10965) (bytevector-s16-native-ref . n10964) (bytevector-length . n10963) (bytevector-ieee-single-ref . n10962) (bytevector-ieee-single-set! . n10961) (bytevector-ieee-single-native-set! . n10960) (bytevector-ieee-single-native-ref . n10959) (bytevector-ieee-double-set! . n10958) (bytevector-ieee-double-ref . n10957) (bytevector-ieee-double-native-set! . n10956) (bytevector-ieee-double-native-ref . n10955) (bytevector-fill! . n10954) (bytevector-copy! . n10953) (bytevector-copy . n10952) (bytevector->uint-list . n10951) (bytevector->u8-list . n10950) (bytevector->sint-list . n10949) (no-nans-violation? . n10062) (no-infinities-violation? . n10041) (make-no-nans-violation . n10060) (make-no-infinities-violation . n10039) (real->flonum . n10948) (flzero? . n10947) (fltruncate . n10946) (fltan . n10945) (flsqrt . n10944) (flsin . n10943) (flround . n10942) (flpositive? . n10941) (flonum? . n10940) (flodd? . n10939) (flnumerator . n10938) (flnegative? . n10937) (flnan? . n10936) (flmod0 . n10935) (flmod . n10934) (flmin . n10933) (flmax . n10932) (fllog . n10931) (flinteger? . n10930) (flinfinite? . n10929) (flfloor . n10928) (flfinite? . n10927) (flexpt . n10926) (flexp . n10925) (fleven? . n10924) (fldiv0-and-mod0 . n10923) (fldiv0 . n10922) (fldiv-and-mod . n10921) (fldiv . n10920) (fldenominator . n10919) (flcos . n10918) (flceiling . n10917) (flatan . n10916) (flasin . n10915) (flacos . n10914) (flabs . n10913) (fl>? . n10912) (fl>=? . n10911) (fl=? . n10910) (fl<? . n10909) (fl<=? . n10908) (fl/ . n10907) (fl- . n10906) (fl+ . n10905) (fl* . n10904) (fixnum->flonum . n10903) (fxzero? . n10902) (fxxor . n10901) (fxrotate-bit-field . n10900) (fxreverse-bit-field . n10899) (fxpositive? . n10898) (fxodd? . n10897) (fxnot . n10896) (fxnegative? . n10895) (fxmod0 . n10894) (fxmod . n10893) (fxmin . n10892) (fxmax . n10891) (fxlength . n10890) (fxior . n10889) (fxif . n10888) (fxfirst-bit-set . n10887) (fxeven? . n10886) (fxdiv0-and-mod0 . n10885) (fxdiv0 . n10884) (fxdiv-and-mod . n10883) (fxdiv . n10882) (fxcopy-bit-field . n10881) (fxcopy-bit . n10880) (fxbit-set? . n10879) (fxbit-field . n10878) (fxbit-count . n10877) (fxarithmetic-shift-right . n10876) (fxarithmetic-shift-left . n10875) (fxarithmetic-shift . n10874) (fxand . n10873) (fx>? . n10872) (fx>=? . n10871) (fx=? . n10870) (fx<? . n10869) (fx<=? . n10868) (fx-/carry . n10867) (fx- . n10866) (fx+/carry . n10865) (fx+ . n10864) (fx*/carry . n10863) (fx* . n10862) (greatest-fixnum . n10861) (least-fixnum . n10860) (fixnum-width . n10859) (fixnum? . n10858) (bitwise-rotate-bit-field . n10857) (bitwise-reverse-bit-field . n10856) (bitwise-length . n10855) (bitwise-if . n10854) (bitwise-first-bit-set . n10853) (bitwise-copy-bit-field . n10852) (bitwise-copy-bit . n10851) (bitwise-bit-set? . n10850) (bitwise-bit-field . n10849) (bitwise-bit-count . n10848) (bitwise-xor . n10847) (bitwise-ior . n10846) (bitwise-and . n10845) (bitwise-not . n10844) (bitwise-arithmetic-shift-right . n10843) (bitwise-arithmetic-shift-left . n10842) (bitwise-arithmetic-shift . n10841) (zero? . n10840) (vector? . n10839) (vector-set! . n10838) (vector-ref . n10837) (vector-map . n10836) (vector-length . n10835) (vector-for-each . n10834) (vector-fill! . n10833) (vector->list . n10832) (vector . n10831) (values . n10830) (truncate . n10829) (tan . n10828) (symbol? . n10827) (symbol=? . n10826) (symbol->string . n10825) (substring . n10824) (string? . n10823) (string>? . n10822) (string>=? . n10821) (string=? . n10820) (string<? . n10819) (string<=? . n10818) (string-ref . n10817) (string-length . n10816) (string-for-each . n10815) (string-copy . n10814) (string-append . n10813) (string->symbol . n10812) (string->number . n10811) (string->list . n10810) (string . n10809) (sqrt . n10808) (sin . n10807) (round . n10806) (reverse . n10805) (real? . n10804) (real-valued? . n10803) (real-part . n10802) (rationalize . n10801) (rational? . n10800) (rational-valued? . n10799) (procedure? . n10798) (positive? . n10797) (pair? . n10796) (odd? . n10795) (numerator . n10794) (number? . n10793) (number->string . n10792) (null? . n10791) (not . n10790) (negative? . n10789) (nan? . n10788) (min . n10787) (max . n10786) (map . n10785) (make-vector . n10784) (make-string . n10783) (make-rectangular . n10782) (make-polar . n10781) (magnitude . n10780) (log . n10779) (list? . n10778) (list-tail . n10777) (list-ref . n10776) (list->vector . n10775) (list->string . n10774) (list . n10773) (length . n10772) (lcm . n10771) (integer? . n10770) (integer-valued? . n10769) (integer->char . n10768) (infinite? . n10767) (inexact? . n10766) (inexact . n10765) (imag-part . n10764) (gcd . n10763) (for-each . n10762) (floor . n10761) (finite? . n10760) (expt . n10759) (exp . n10758) (exact? . n10757) (exact-integer-sqrt . n10756) (exact . n10755) (even? . n10754) (error . n10753) (eqv? . n10752) (equal? . n10751) (eq? . n10750) (dynamic-wind . n10749) (div0-and-mod0 . n10748) (mod0 . n10747) (div0 . n10746) (div-and-mod . n10745) (mod . n10744) (div . n10743) (denominator . n10742) (cos . n10741) (cons . n10740) (complex? . n10739) (char? . n10738) (char>? . n10737) (char>=? . n10736) (char=? . n10735) (char<? . n10734) (char<=? . n10733) (char->integer . n10732) (ceiling . n10731) (call-with-values . n10730) (call/cc . n10729) (call-with-current-continuation . n10728) (cddddr . n10727) (cdddar . n10726) (cddadr . n10725) (cddaar . n10724) (cdaddr . n10723) (cdadar . n10722) (cdaadr . n10721) (cdaaar . n10720) (cadddr . n10719) (caddar . n10718) (cadadr . n10717) (cadaar . n10716) (caaddr . n10715) (caadar . n10714) (caaadr . n10713) (caaaar . n10712) (cdddr . n10711) (cddar . n10710) (cdadr . n10709) (cdaar . n10708) (caddr . n10707) (cadar . n10706) (caadr . n10705) (caaar . n10704) (cddr . n10703) (cdar . n10702) (cadr . n10701) (caar . n10700) (cdr . n10699) (car . n10698) (boolean? . n10697) (boolean=? . n10696) (atan . n10695) (assertion-violation . n10694) (asin . n10693) (apply . n10692) (append . n10691) (angle . n10690) (acos . n10689) (abs . n10688) (/ . n10687) (* . n10686) (- . n10685) (+ . n10684) (>= . n10683) (> . n10682) (= . n10681) (<= . n10680) (< . n10679) (&no-nans . n10677) (&no-infinities . n10676) (&i/o-encoding . n10675) (&i/o-decoding . n10674) (&i/o-port . n10673) (&i/o-file-does-not-exist . n10672) (&i/o-file-already-exists . n10671) (&i/o-file-is-read-only . n10670) (&i/o-file-protection . n10669) (&i/o-filename . n10668) (&i/o-invalid-position . n10667) (&i/o-write . n10666) (&i/o-read . n10665) (&i/o . n10664) (&undefined . n10663) (&syntax . n10662) (&lexical . n10661) (&implementation-restriction . n10660) (&non-continuable . n10659) (&who . n10658) (&irritants . n10657) (&assertion . n10656) (&violation . n10655) (&error . n10654) (&serious . n10653) (&warning . n10652) (&message . n10651) (&condition . n10650) (define-condition-type . n10649) (define-enumeration . n10648) (define-record-type . n10647) (parent-rtd . n10646) (nongenerative . n10645) (opaque . n10644) (sealed . n10643) (protocol . n10642) (parent . n10641) (immutable . n10640) (mutable . n10639) (fields . n10638) (error-handling-mode . n10637) (file-options . n10636) (buffer-mode . n10635) (eol-style . n10634) (guard . n10633) (unsyntax-splicing . n10630) (unsyntax . n10629) (unquote-splicing . n10628) (unquote . n10627) (_ . n10626) (else . n10625) (=> . n10624) (... . n10623) (assert . n10622) (endianness . n10621) (do . n10618) (cond . n10617) (let* . n10616) (let . n10615) (let*-values . n10614) (let-values . n10613) (identifier-syntax . n10612) (with-syntax . n10611) (quasisyntax . n10610) (quasiquote . n10609) (syntax-rules . n10608) (record-constructor-descriptor . n10605) (record-type-descriptor . n10604) (case . n10603) (unless . n10601) (when . n10600) (or . n10599) (and . n10598) (if . n10597) (letrec* . n10596) (letrec . n10595) (case-lambda . n10593) (lambda . n10592) (syntax . n10591) (syntax-case . n10590) (quote . n10589) (letrec-syntax . n10587) (let-syntax . n10586) (set! . n10585) (begin . n10583) (define-syntax . n10581) (define . n10580)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11294 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . n2960) (quotient . n11066) (null-environment . n2958) (remainder . n11065) (modulo . n11064) (inexact->exact . n11063) (force . n11062) (exact->inexact . n11061) (make-promise . n11060) (delay . n10620)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11295 '(rnrs control) '(6) '() '() '() '((do . n10618) (unless . n10601) (when . n10600) (case-lambda . n10593)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11296 '(rnrs eval) '(6) '() '() '() '((eval . n2964) (environment . n2956)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11297 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . n11056) (set-car! . n11055)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11298 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . n11058) (string-set! . n11057)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11299 '(rnrs programs) '(6) '() '() '() '((exit . n11059) (command-line . n10329)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11300 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . n2322) (identifier? . n2998) (generate-temporaries . n2978) (free-identifier=? . n2980) (syntax->datum . n3002) (datum->syntax . n3000) (bound-identifier=? . n2982) (syntax-violation . n2996) (unsyntax-splicing . n10630) (unsyntax . n10629) (_ . n10626) (... . n10623) (with-syntax . n10611) (quasisyntax . n10610) (syntax . n10591) (syntax-case . n10590)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11301 '(rnrs files) '(6) '() '() '() '((delete-file . n11171) (file-exists? . n11170) (make-i/o-write-error . n9809) (make-i/o-read-error . n9788) (make-i/o-port-error . n9967) (make-i/o-invalid-position-error . n9831) (make-i/o-filename-error . n9857) (make-i/o-file-protection-error . n9882) (make-i/o-file-is-read-only-error . n9903) (make-i/o-file-does-not-exist-error . n9945) (make-i/o-file-already-exists-error . n9924) (make-i/o-error . n9767) (i/o-write-error? . n9811) (i/o-read-error? . n9790) (i/o-port-error? . n9971) (i/o-invalid-position-error? . n9835) (i/o-filename-error? . n9861) (i/o-file-protection-error? . n9884) (i/o-file-is-read-only-error? . n9905) (i/o-file-does-not-exist-error? . n9947) (i/o-file-already-exists-error? . n9926) (i/o-error? . n9769) (i/o-error-position . n9837) (i/o-error-port . n9973) (i/o-error-filename . n9863) (&i/o-port . n10673) (&i/o-file-does-not-exist . n10672) (&i/o-file-already-exists . n10671) (&i/o-file-is-read-only . n10670) (&i/o-file-protection . n10669) (&i/o-filename . n10668) (&i/o-invalid-position . n10667) (&i/o-write . n10666) (&i/o-read . n10665) (&i/o . n10664)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11302 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . n11169) (vector-sort . n11168) (list-sort . n11167)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11303 '(rnrs base) '(6) '() '() '() '((zero? . n10840) (vector? . n10839) (vector-set! . n10838) (vector-ref . n10837) (vector-map . n10836) (vector-length . n10835) (vector-for-each . n10834) (vector-fill! . n10833) (vector->list . n10832) (vector . n10831) (values . n10830) (truncate . n10829) (tan . n10828) (symbol? . n10827) (symbol=? . n10826) (symbol->string . n10825) (substring . n10824) (string? . n10823) (string>? . n10822) (string>=? . n10821) (string=? . n10820) (string<? . n10819) (string<=? . n10818) (string-ref . n10817) (string-length . n10816) (string-for-each . n10815) (string-copy . n10814) (string-append . n10813) (string->symbol . n10812) (string->number . n10811) (string->list . n10810) (string . n10809) (sqrt . n10808) (sin . n10807) (round . n10806) (reverse . n10805) (real? . n10804) (real-valued? . n10803) (real-part . n10802) (rationalize . n10801) (rational? . n10800) (rational-valued? . n10799) (procedure? . n10798) (positive? . n10797) (pair? . n10796) (odd? . n10795) (numerator . n10794) (number? . n10793) (number->string . n10792) (null? . n10791) (not . n10790) (negative? . n10789) (nan? . n10788) (min . n10787) (max . n10786) (map . n10785) (make-vector . n10784) (make-string . n10783) (make-rectangular . n10782) (make-polar . n10781) (magnitude . n10780) (log . n10779) (list? . n10778) (list-tail . n10777) (list-ref . n10776) (list->vector . n10775) (list->string . n10774) (list . n10773) (length . n10772) (lcm . n10771) (integer? . n10770) (integer-valued? . n10769) (integer->char . n10768) (infinite? . n10767) (inexact? . n10766) (inexact . n10765) (imag-part . n10764) (gcd . n10763) (for-each . n10762) (floor . n10761) (finite? . n10760) (expt . n10759) (exp . n10758) (exact? . n10757) (exact-integer-sqrt . n10756) (exact . n10755) (even? . n10754) (error . n10753) (eqv? . n10752) (equal? . n10751) (eq? . n10750) (dynamic-wind . n10749) (div0-and-mod0 . n10748) (mod0 . n10747) (div0 . n10746) (div-and-mod . n10745) (mod . n10744) (div . n10743) (denominator . n10742) (cos . n10741) (cons . n10740) (complex? . n10739) (char? . n10738) (char>? . n10737) (char>=? . n10736) (char=? . n10735) (char<? . n10734) (char<=? . n10733) (char->integer . n10732) (ceiling . n10731) (call-with-values . n10730) (call/cc . n10729) (call-with-current-continuation . n10728) (cddddr . n10727) (cdddar . n10726) (cddadr . n10725) (cddaar . n10724) (cdaddr . n10723) (cdadar . n10722) (cdaadr . n10721) (cdaaar . n10720) (cadddr . n10719) (caddar . n10718) (cadadr . n10717) (cadaar . n10716) (caaddr . n10715) (caadar . n10714) (caaadr . n10713) (caaaar . n10712) (cdddr . n10711) (cddar . n10710) (cdadr . n10709) (cdaar . n10708) (caddr . n10707) (cadar . n10706) (caadr . n10705) (caaar . n10704) (cddr . n10703) (cdar . n10702) (cadr . n10701) (caar . n10700) (cdr . n10699) (car . n10698) (boolean? . n10697) (boolean=? . n10696) (atan . n10695) (assertion-violation . n10694) (asin . n10693) (apply . n10692) (append . n10691) (angle . n10690) (acos . n10689) (abs . n10688) (/ . n10687) (* . n10686) (- . n10685) (+ . n10684) (>= . n10683) (> . n10682) (= . n10681) (<= . n10680) (< . n10679) (unquote-splicing . n10628) (unquote . n10627) (_ . n10626) (else . n10625) (=> . n10624) (... . n10623) (assert . n10622) (cond . n10617) (let* . n10616) (let . n10615) (let*-values . n10614) (let-values . n10613) (identifier-syntax . n10612) (quasiquote . n10609) (syntax-rules . n10608) (case . n10603) (or . n10599) (and . n10598) (if . n10597) (letrec* . n10596) (letrec . n10595) (lambda . n10592) (quote . n10589) (letrec-syntax . n10587) (let-syntax . n10586) (set! . n10585) (begin . n10583) (define-syntax . n10581) (define . n10580)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11304 '(rnrs lists) '(6) '() '() '() '((remove . n11054) (remv . n11053) (remp . n11052) (remq . n11051) (partition . n11050) (memv . n11049) (memq . n11048) (memp . n11047) (member . n11046) (exists . n11045) (for-all . n11044) (fold-right . n11043) (fold-left . n11042) (find . n11041) (filter . n11040) (cons* . n11039) (assv . n11038) (assq . n11037) (assp . n11036) (assoc . n11035)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11305 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . n11145) (call-with-input-file . n11144) (write-char . n11143) (write . n11142) (with-output-to-file . n11141) (with-input-from-file . n11140) (read-char . n11139) (read . n11138) (peek-char . n11137) (open-output-file . n11136) (open-input-file . n11135) (newline . n11134) (display . n11133) (close-output-port . n11132) (close-input-port . n11131) (eof-object? . n11130) (eof-object . n11129) (current-error-port . n11128) (current-output-port . n11127) (current-input-port . n11126) (output-port? . n11125) (input-port? . n11124) (make-i/o-write-error . n9809) (make-i/o-read-error . n9788) (make-i/o-port-error . n9967) (make-i/o-invalid-position-error . n9831) (make-i/o-filename-error . n9857) (make-i/o-file-protection-error . n9882) (make-i/o-file-is-read-only-error . n9903) (make-i/o-file-does-not-exist-error . n9945) (make-i/o-file-already-exists-error . n9924) (make-i/o-error . n9767) (i/o-write-error? . n9811) (i/o-read-error? . n9790) (i/o-port-error? . n9971) (i/o-invalid-position-error? . n9835) (i/o-filename-error? . n9861) (i/o-file-protection-error? . n9884) (i/o-file-is-read-only-error? . n9905) (i/o-file-does-not-exist-error? . n9947) (i/o-file-already-exists-error? . n9926) (i/o-error? . n9769) (i/o-error-position . n9837) (i/o-error-port . n9973) (i/o-error-filename . n9863) (&i/o-port . n10673) (&i/o-file-does-not-exist . n10672) (&i/o-file-already-exists . n10671) (&i/o-file-is-read-only . n10670) (&i/o-file-protection . n10669) (&i/o-filename . n10668) (&i/o-invalid-position . n10667) (&i/o-write . n10666) (&i/o-read . n10665) (&i/o . n10664)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11306 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . n11082) (utf32->string . n11007) (utf16->string . n11006) (utf8->string . n11005) (uint-list->bytevector . n11004) (u8-list->bytevector . n11003) (string->utf8 . n11002) (string->utf32 . n11001) (string->utf16 . n11000) (sint-list->bytevector . n10999) (native-endianness . n10998) (bytevector? . n10997) (bytevector=? . n10996) (bytevector-uint-set! . n10995) (bytevector-uint-ref . n10994) (bytevector-u8-set! . n10993) (bytevector-u8-ref . n10992) (bytevector-u64-set! . n10991) (bytevector-u64-ref . n10990) (bytevector-u64-native-set! . n10989) (bytevector-u64-native-ref . n10988) (bytevector-u32-set! . n10987) (bytevector-u32-ref . n10986) (bytevector-u32-native-set! . n10985) (bytevector-u32-native-ref . n10984) (bytevector-u16-set! . n10983) (bytevector-u16-ref . n10982) (bytevector-u16-native-set! . n10981) (bytevector-u16-native-ref . n10980) (bytevector-sint-set! . n10979) (bytevector-sint-ref . n10978) (bytevector-s8-set! . n10977) (bytevector-s8-ref . n10976) (bytevector-s64-set! . n10975) (bytevector-s64-ref . n10974) (bytevector-s64-native-set! . n10973) (bytevector-s64-native-ref . n10972) (bytevector-s32-set! . n10971) (bytevector-s32-ref . n10970) (bytevector-s32-native-set! . n10969) (bytevector-s32-native-ref . n10968) (bytevector-s16-set! . n10967) (bytevector-s16-ref . n10966) (bytevector-s16-native-set! . n10965) (bytevector-s16-native-ref . n10964) (bytevector-length . n10963) (bytevector-ieee-single-ref . n10962) (bytevector-ieee-single-set! . n10961) (bytevector-ieee-single-native-set! . n10960) (bytevector-ieee-single-native-ref . n10959) (bytevector-ieee-double-set! . n10958) (bytevector-ieee-double-ref . n10957) (bytevector-ieee-double-native-set! . n10956) (bytevector-ieee-double-native-ref . n10955) (bytevector-fill! . n10954) (bytevector-copy! . n10953) (bytevector-copy . n10952) (bytevector->uint-list . n10951) (bytevector->u8-list . n10950) (bytevector->sint-list . n10949) (endianness . n10621)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11307 '(rnrs unicode) '(6) '() '() '() '((string-upcase . n11217) (string-titlecase . n11216) (string-normalize-nfkd . n11215) (string-normalize-nfkc . n11214) (string-normalize-nfd . n11213) (string-normalize-nfc . n11212) (string-foldcase . n11211) (string-downcase . n11210) (string-ci>? . n11209) (string-ci>=? . n11208) (string-ci=? . n11207) (string-ci<? . n11206) (string-ci<=? . n11205) (char-whitespace? . n11204) (char-upper-case? . n11203) (char-title-case? . n11202) (char-numeric? . n11201) (char-lower-case? . n11200) (char-general-category . n11199) (char-upcase . n11198) (char-titlecase . n11197) (char-foldcase . n11196) (char-downcase . n11195) (char-ci>? . n11194) (char-ci>=? . n11193) (char-ci=? . n11192) (char-ci<? . n11191) (char-ci<=? . n11190) (char-alphabetic? . n11189)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11308 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . n11028) (raise-continuable . n11027) (raise . n11026) (guard . n10633) (else . n10625) (=> . n10624)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11309 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . n10857) (bitwise-reverse-bit-field . n10856) (bitwise-length . n10855) (bitwise-if . n10854) (bitwise-first-bit-set . n10853) (bitwise-copy-bit-field . n10852) (bitwise-copy-bit . n10851) (bitwise-bit-set? . n10850) (bitwise-bit-field . n10849) (bitwise-bit-count . n10848) (bitwise-xor . n10847) (bitwise-ior . n10846) (bitwise-and . n10845) (bitwise-not . n10844) (bitwise-arithmetic-shift-right . n10843) (bitwise-arithmetic-shift-left . n10842) (bitwise-arithmetic-shift . n10841)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11310 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . n10902) (fxxor . n10901) (fxrotate-bit-field . n10900) (fxreverse-bit-field . n10899) (fxpositive? . n10898) (fxodd? . n10897) (fxnot . n10896) (fxnegative? . n10895) (fxmod0 . n10894) (fxmod . n10893) (fxmin . n10892) (fxmax . n10891) (fxlength . n10890) (fxior . n10889) (fxif . n10888) (fxfirst-bit-set . n10887) (fxeven? . n10886) (fxdiv0-and-mod0 . n10885) (fxdiv0 . n10884) (fxdiv-and-mod . n10883) (fxdiv . n10882) (fxcopy-bit-field . n10881) (fxcopy-bit . n10880) (fxbit-set? . n10879) (fxbit-field . n10878) (fxbit-count . n10877) (fxarithmetic-shift-right . n10876) (fxarithmetic-shift-left . n10875) (fxarithmetic-shift . n10874) (fxand . n10873) (fx>? . n10872) (fx>=? . n10871) (fx=? . n10870) (fx<? . n10869) (fx<=? . n10868) (fx-/carry . n10867) (fx- . n10866) (fx+/carry . n10865) (fx+ . n10864) (fx*/carry . n10863) (fx* . n10862) (greatest-fixnum . n10861) (least-fixnum . n10860) (fixnum-width . n10859) (fixnum? . n10858)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11311 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . n10062) (no-infinities-violation? . n10041) (make-no-nans-violation . n10060) (make-no-infinities-violation . n10039) (real->flonum . n10948) (flzero? . n10947) (fltruncate . n10946) (fltan . n10945) (flsqrt . n10944) (flsin . n10943) (flround . n10942) (flpositive? . n10941) (flonum? . n10940) (flodd? . n10939) (flnumerator . n10938) (flnegative? . n10937) (flnan? . n10936) (flmod0 . n10935) (flmod . n10934) (flmin . n10933) (flmax . n10932) (fllog . n10931) (flinteger? . n10930) (flinfinite? . n10929) (flfloor . n10928) (flfinite? . n10927) (flexpt . n10926) (flexp . n10925) (fleven? . n10924) (fldiv0-and-mod0 . n10923) (fldiv0 . n10922) (fldiv-and-mod . n10921) (fldiv . n10920) (fldenominator . n10919) (flcos . n10918) (flceiling . n10917) (flatan . n10916) (flasin . n10915) (flacos . n10914) (flabs . n10913) (fl>? . n10912) (fl>=? . n10911) (fl=? . n10910) (fl<? . n10909) (fl<=? . n10908) (fl/ . n10907) (fl- . n10906) (fl+ . n10905) (fl* . n10904) (fixnum->flonum . n10903) (&no-nans . n10677) (&no-infinities . n10676)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11312 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . n11166) (string-ci-hash . n11165) (string-hash . n11164) (equal-hash . n11163) (hashtable-equivalence-function . n11162) (make-hashtable . n11161) (hashtable-hash-function . n11160) (make-eqv-hashtable . n11159) (make-eq-hashtable . n11158) (hashtable? . n11157) (hashtable-update! . n11156) (hashtable-size . n11155) (hashtable-set! . n11154) (hashtable-ref . n11153) (hashtable-mutable? . n11152) (hashtable-keys . n11151) (hashtable-entries . n11150) (hashtable-delete! . n11149) (hashtable-copy . n11148) (hashtable-contains? . n11147) (hashtable-clear! . n11146)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11313 '(rnrs io ports) '(6) '() '() '() '((eof-object? . n11130) (eof-object . n11129) (current-error-port . n11128) (current-output-port . n11127) (current-input-port . n11126) (output-port? . n11125) (input-port? . n11124) (utf-8-codec . n11123) (utf-16-codec . n11122) (transcoder-error-handling-mode . n11121) (transcoder-eol-style . n11120) (transcoder-codec . n11119) (transcoded-port . n11118) (textual-port? . n11117) (string->bytevector . n11116) (standard-output-port . n11115) (standard-input-port . n11114) (standard-error-port . n11113) (set-port-position! . n11112) (put-u8 . n11111) (put-string . n11110) (put-datum . n11109) (put-char . n11108) (put-bytevector . n11107) (port? . n11106) (port-transcoder . n11105) (port-position . n11104) (port-has-set-port-position!? . n11103) (port-has-port-position? . n11102) (port-eof? . n11101) (output-port-buffer-mode . n11100) (open-string-output-port . n11099) (open-string-input-port . n11098) (open-file-output-port . n11097) (open-file-input/output-port . n11096) (open-file-input-port . n11095) (open-bytevector-output-port . n11094) (open-bytevector-input-port . n11093) (native-transcoder . n11092) (native-eol-style . n11091) (make-transcoder . n11090) (latin-1-codec . n11089) (make-i/o-write-error . n9809) (make-i/o-read-error . n9788) (make-i/o-port-error . n9967) (make-i/o-invalid-position-error . n9831) (make-i/o-filename-error . n9857) (make-i/o-file-protection-error . n9882) (make-i/o-file-is-read-only-error . n9903) (make-i/o-file-does-not-exist-error . n9945) (make-i/o-file-already-exists-error . n9924) (make-i/o-error . n9767) (make-i/o-encoding-error . n10014) (make-i/o-decoding-error . n9992) (make-custom-textual-output-port . n11088) (make-custom-textual-input/output-port . n11087) (make-custom-textual-input-port . n11086) (make-custom-binary-output-port . n11085) (make-custom-binary-input/output-port . n11084) (make-custom-binary-input-port . n11083) (lookahead-u8 . n11081) (lookahead-char . n11080) (i/o-write-error? . n9811) (i/o-read-error? . n9790) (i/o-port-error? . n9971) (i/o-invalid-position-error? . n9835) (i/o-filename-error? . n9861) (i/o-file-protection-error? . n9884) (i/o-file-is-read-only-error? . n9905) (i/o-file-does-not-exist-error? . n9947) (i/o-file-already-exists-error? . n9926) (i/o-error? . n9769) (i/o-error-position . n9837) (i/o-error-port . n9973) (i/o-error-filename . n9863) (i/o-encoding-error? . n10018) (i/o-encoding-error-char . n10020) (i/o-decoding-error? . n9994) (get-u8 . n11079) (get-string-n! . n11078) (get-string-n . n11077) (get-string-all . n11076) (get-line . n11075) (get-datum . n11074) (get-char . n11073) (get-bytevector-some . n11072) (get-bytevector-n! . n11071) (get-bytevector-n . n11070) (get-bytevector-all . n11069) (flush-output-port . n11068) (close-port . n11067) (call-with-string-output-port . n11034) (call-with-port . n11033) (call-with-bytevector-output-port . n11032) (bytevector->string . n11031) (buffer-mode? . n11030) (binary-port? . n11029) (&i/o-encoding . n10675) (&i/o-decoding . n10674) (&i/o-port . n10673) (&i/o-file-does-not-exist . n10672) (&i/o-file-already-exists . n10671) (&i/o-file-is-read-only . n10670) (&i/o-file-protection . n10669) (&i/o-filename . n10668) (&i/o-invalid-position . n10667) (&i/o-write . n10666) (&i/o-read . n10665) (&i/o . n10664) (error-handling-mode . n10637) (file-options . n10636) (buffer-mode . n10635) (eol-style . n10634)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11314 '(rnrs enums) '(6) '() '() '() '((make-enumeration . n11025) (enum-set=? . n11024) (enum-set-universe . n11023) (enum-set-union . n11022) (enum-set-subset? . n11021) (enum-set-projection . n11020) (enum-set-member? . n11019) (enum-set-intersection . n11018) (enum-set-indexer . n11017) (enum-set-difference . n11016) (enum-set-constructor . n11015) (enum-set-complement . n11014) (enum-set->list . n11013) (define-enumeration . n10648)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11315 '(rnrs conditions) '(6) '() '() '() '((who-condition? . n9631) (warning? . n9497) (violation? . n9560) (undefined-violation? . n9748) (syntax-violation? . n9723) (syntax-violation-subform . n9727) (syntax-violation-form . n9725) (syntax-violation . n2996) (simple-conditions . n11012) (serious-condition? . n9518) (non-continuable-violation? . n9654) (message-condition? . n9474) (make-who-condition . n9627) (make-warning . n9495) (make-violation . n9558) (make-undefined-violation . n9746) (make-syntax-violation . n9717) (make-serious-condition . n9516) (make-non-continuable-violation . n9652) (make-message-condition . n9470) (make-lexical-violation . n9694) (make-irritants-condition . n9601) (make-implementation-restriction-violation . n9673) (make-error . n9537) (make-assertion-violation . n9579) (lexical-violation? . n9696) (irritants-condition? . n9605) (implementation-restriction-violation? . n9675) (error? . n9539) (condition-who . n9633) (condition-predicate . n11011) (condition-message . n9476) (condition-irritants . n9607) (condition-accessor . n11010) (condition . n11009) (assertion-violation? . n9581) (condition? . n11008) (&undefined . n10663) (&syntax . n10662) (&lexical . n10661) (&implementation-restriction . n10660) (&non-continuable . n10659) (&who . n10658) (&irritants . n10657) (&assertion . n10656) (&violation . n10655) (&error . n10654) (&serious . n10653) (&warning . n10652) (&message . n10651) (&condition . n10650) (define-condition-type . n10649)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11316 '(rnrs records inspection) '(6) '() '() '() '((record? . n11181) (record-type-uid . n11180) (record-type-sealed? . n11179) (record-type-parent . n11178) (record-type-opaque? . n11177) (record-type-name . n11176) (record-type-generative? . n11175) (record-type-field-names . n11174) (record-rtd . n11173) (record-field-mutable? . n11172)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11317 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . n11188) (record-predicate . n11187) (record-mutator . n11186) (record-constructor . n11185) (record-accessor . n11184) (make-record-type-descriptor . n11183) (make-record-constructor-descriptor . n11182)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11318 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . n10647) (parent-rtd . n10646) (nongenerative . n10645) (opaque . n10644) (sealed . n10643) (protocol . n10642) (parent . n10641) (immutable . n10640) (mutable . n10639) (fields . n10638) (record-constructor-descriptor . n10605) (record-type-descriptor . n10604)) '() values values '#f '#f '#t '#f) (n1791@n1444@install-library 'n11319 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . n10066) (&no-nans-rtd . n10064) (&no-infinities-rcd . n10045) (&no-infinities-rtd . n10043) (&i/o-encoding-rcd . n10024) (&i/o-encoding-rtd . n10022) (&i/o-decoding-rcd . n9998) (&i/o-decoding-rtd . n9996) (&i/o-port-rcd . n9977) (&i/o-port-rtd . n9975) (&i/o-file-does-not-exist-rcd . n9951) (&i/o-file-does-not-exist-rtd . n9949) (&i/o-file-already-exists-rcd . n9930) (&i/o-file-already-exists-rtd . n9928) (&i/o-file-is-read-only-rcd . n9909) (&i/o-file-is-read-only-rtd . n9907) (&i/o-file-protection-rcd . n9888) (&i/o-file-protection-rtd . n9886) (&i/o-filename-rcd . n9867) (&i/o-filename-rtd . n9865) (&i/o-invalid-position-rcd . n9841) (&i/o-invalid-position-rtd . n9839) (&i/o-write-rcd . n9815) (&i/o-write-rtd . n9813) (&i/o-read-rcd . n9794) (&i/o-read-rtd . n9792) (&i/o-rcd . n9773) (&i/o-rtd . n9771) (&undefined-rcd . n9752) (&undefined-rtd . n9750) (&syntax-rcd . n9731) (&syntax-rtd . n9729) (&lexical-rcd . n9700) (&lexical-rtd . n9698) (&implementation-restriction-rcd . n9679) (&implementation-restriction-rtd . n9677) (&non-continuable-rcd . n9658) (&non-continuable-rtd . n9656) (&who-rcd . n9637) (&who-rtd . n9635) (&irritants-rcd . n9611) (&irritants-rtd . n9609) (&assertion-rcd . n9585) (&assertion-rtd . n9583) (&violation-rcd . n9564) (&violation-rtd . n9562) (&error-rcd . n9543) (&error-rtd . n9541) (&serious-rcd . n9522) (&serious-rtd . n9520) (&warning-rcd . n9501) (&warning-rtd . n9499) (&message-rcd . n9480) (&message-rtd . n9478) (&condition-rcd . n9389) (&condition-rtd . n9387) (syntax-error . n2992) (syntax-dispatch . n2763) (pretty-print . n11287) (eval-core . n11286) (set-symbol-value! . n11285) (symbol-value . n11284) (gensym . n914) (void . n11283) (load . n10335) (interaction-environment . n3008) (char-ready? . n11282) (regexp? . n11281) (read-line . n11280) (ungensym . n11279) (alist->eq-hash-table . n11278) (assoc-ref . n11277) (print . n11276) (format . n11275) (host-os . n11274) (library-path . n1411) (standard-library-path . n11273) (file-newer? . n11272) (stat-mtime . n11271) (write-to-file . n11270) (file->list . n11269) (file->string . n11268) (digit->integer . n11267) (call-with-string-input-port . n11266) (call-with-string-io . n11265) (string-split . n11264) (bytevector-for-each . n11263) (string->regexp . n11262) (rxmatch . n11261) (regexp-replace-all . n11260) (hashtable-for-each . n11259) (call-process . n11258) (local-tz-offset . n11257) (microseconds . n11256) (readdir . n11255) (set-current-directory! . n11254) (expand-path . n11253) (current-directory . n11252) (%spawn . n11251) (%waitpid . n11250) (%ffi-supported? . n11249) (%ffi-pointer-ref . n11248) (%ffi-pointer->string . n11247) (%ffi-call->string-or-zero . n11246) (%ffi-call->double . n11245) (%ffi-call->void* . n11244) (%ffi-call->void . n11243) (%ffi-call->int . n11242) (%ffi-lookup . n11241) (%ffi-open . n11240) (%fork . n11239) (%pipe . n11238) (p . n11237) (open-output-string . n11236) (get-output-string . n11235) (get-environment-variables . n11234) (get-environment-variable . n11233) (get-timeofday . n11232) (get-command-line . n11231) (sys-display . n11230) (mosh-executable-path . n11229) (make-file-options . n11228) (source-info . n11227) (make-compiler-instruction . n11226) (make-instruction . n11225) (set-source-info! . n11224) (bignum? . n11223) (fast-equal? . n11222) (fasl-read . n11221) (fasl-write . n11220) (time-usage . n11219) (os-constant . n11218) (make-parameter . n942) (string-upcase . n11217) (string-titlecase . n11216) (string-normalize-nfkd . n11215) (string-normalize-nfkc . n11214) (string-normalize-nfd . n11213) (string-normalize-nfc . n11212) (string-foldcase . n11211) (string-downcase . n11210) (string-ci>? . n11209) (string-ci>=? . n11208) (string-ci=? . n11207) (string-ci<? . n11206) (string-ci<=? . n11205) (char-whitespace? . n11204) (char-upper-case? . n11203) (char-title-case? . n11202) (char-numeric? . n11201) (char-lower-case? . n11200) (char-general-category . n11199) (char-upcase . n11198) (char-titlecase . n11197) (char-foldcase . n11196) (char-downcase . n11195) (char-ci>? . n11194) (char-ci>=? . n11193) (char-ci=? . n11192) (char-ci<? . n11191) (char-ci<=? . n11190) (char-alphabetic? . n11189) (make-variable-transformer . n2322) (identifier? . n2998) (generate-temporaries . n2978) (free-identifier=? . n2980) (syntax->datum . n3002) (datum->syntax . n3000) (bound-identifier=? . n2982) (record-type-descriptor? . n11188) (record-predicate . n11187) (record-mutator . n11186) (record-constructor . n11185) (record-accessor . n11184) (make-record-type-descriptor . n11183) (make-record-constructor-descriptor . n11182) (record? . n11181) (record-type-uid . n11180) (record-type-sealed? . n11179) (record-type-parent . n11178) (record-type-opaque? . n11177) (record-type-name . n11176) (record-type-generative? . n11175) (record-type-field-names . n11174) (record-rtd . n11173) (record-field-mutable? . n11172) (delete-file . n11171) (file-exists? . n11170) (vector-sort! . n11169) (vector-sort . n11168) (list-sort . n11167) (symbol-hash . n11166) (string-ci-hash . n11165) (string-hash . n11164) (equal-hash . n11163) (hashtable-equivalence-function . n11162) (make-hashtable . n11161) (hashtable-hash-function . n11160) (make-eqv-hashtable . n11159) (make-eq-hashtable . n11158) (hashtable? . n11157) (hashtable-update! . n11156) (hashtable-size . n11155) (hashtable-set! . n11154) (hashtable-ref . n11153) (hashtable-mutable? . n11152) (hashtable-keys . n11151) (hashtable-entries . n11150) (hashtable-delete! . n11149) (hashtable-copy . n11148) (hashtable-contains? . n11147) (hashtable-clear! . n11146) (call-with-output-file . n11145) (call-with-input-file . n11144) (write-char . n11143) (write . n11142) (with-output-to-file . n11141) (with-input-from-file . n11140) (read-char . n11139) (read . n11138) (peek-char . n11137) (open-output-file . n11136) (open-input-file . n11135) (newline . n11134) (display . n11133) (close-output-port . n11132) (close-input-port . n11131) (eof-object? . n11130) (eof-object . n11129) (current-error-port . n11128) (current-output-port . n11127) (current-input-port . n11126) (output-port? . n11125) (input-port? . n11124) (utf-8-codec . n11123) (utf-16-codec . n11122) (transcoder-error-handling-mode . n11121) (transcoder-eol-style . n11120) (transcoder-codec . n11119) (transcoded-port . n11118) (textual-port? . n11117) (string->bytevector . n11116) (standard-output-port . n11115) (standard-input-port . n11114) (standard-error-port . n11113) (set-port-position! . n11112) (put-u8 . n11111) (put-string . n11110) (put-datum . n11109) (put-char . n11108) (put-bytevector . n11107) (port? . n11106) (port-transcoder . n11105) (port-position . n11104) (port-has-set-port-position!? . n11103) (port-has-port-position? . n11102) (port-eof? . n11101) (output-port-buffer-mode . n11100) (open-string-output-port . n11099) (open-string-input-port . n11098) (open-file-output-port . n11097) (open-file-input/output-port . n11096) (open-file-input-port . n11095) (open-bytevector-output-port . n11094) (open-bytevector-input-port . n11093) (native-transcoder . n11092) (native-eol-style . n11091) (make-transcoder . n11090) (latin-1-codec . n11089) (make-i/o-write-error . n9809) (make-i/o-read-error . n9788) (make-i/o-port-error . n9967) (make-i/o-invalid-position-error . n9831) (make-i/o-filename-error . n9857) (make-i/o-file-protection-error . n9882) (make-i/o-file-is-read-only-error . n9903) (make-i/o-file-does-not-exist-error . n9945) (make-i/o-file-already-exists-error . n9924) (make-i/o-error . n9767) (make-i/o-encoding-error . n10014) (make-i/o-decoding-error . n9992) (make-custom-textual-output-port . n11088) (make-custom-textual-input/output-port . n11087) (make-custom-textual-input-port . n11086) (make-custom-binary-output-port . n11085) (make-custom-binary-input/output-port . n11084) (make-custom-binary-input-port . n11083) (make-bytevector . n11082) (lookahead-u8 . n11081) (lookahead-char . n11080) (i/o-write-error? . n9811) (i/o-read-error? . n9790) (i/o-port-error? . n9971) (i/o-invalid-position-error? . n9835) (i/o-filename-error? . n9861) (i/o-file-protection-error? . n9884) (i/o-file-is-read-only-error? . n9905) (i/o-file-does-not-exist-error? . n9947) (i/o-file-already-exists-error? . n9926) (i/o-error? . n9769) (i/o-error-position . n9837) (i/o-error-port . n9973) (i/o-error-filename . n9863) (i/o-encoding-error? . n10018) (i/o-encoding-error-char . n10020) (i/o-decoding-error? . n9994) (get-u8 . n11079) (get-string-n! . n11078) (get-string-n . n11077) (get-string-all . n11076) (get-line . n11075) (get-datum . n11074) (get-char . n11073) (get-bytevector-some . n11072) (get-bytevector-n! . n11071) (get-bytevector-n . n11070) (get-bytevector-all . n11069) (flush-output-port . n11068) (close-port . n11067) (scheme-report-environment . n2960) (quotient . n11066) (null-environment . n2958) (remainder . n11065) (modulo . n11064) (inexact->exact . n11063) (force . n11062) (exact->inexact . n11061) (make-promise . n11060) (exit . n11059) (command-line . n10329) (string-fill! . n11058) (string-set! . n11057) (set-cdr! . n11056) (set-car! . n11055) (remove . n11054) (remv . n11053) (remp . n11052) (remq . n11051) (partition . n11050) (memv . n11049) (memq . n11048) (memp . n11047) (member . n11046) (exists . n11045) (for-all . n11044) (fold-right . n11043) (fold-left . n11042) (find . n11041) (filter . n11040) (cons* . n11039) (assv . n11038) (assq . n11037) (assp . n11036) (assoc . n11035) (call-with-string-output-port . n11034) (call-with-port . n11033) (call-with-bytevector-output-port . n11032) (bytevector->string . n11031) (buffer-mode? . n11030) (binary-port? . n11029) (with-exception-handler . n11028) (raise-continuable . n11027) (raise . n11026) (eval . n2964) (environment . n2956) (make-enumeration . n11025) (enum-set=? . n11024) (enum-set-universe . n11023) (enum-set-union . n11022) (enum-set-subset? . n11021) (enum-set-projection . n11020) (enum-set-member? . n11019) (enum-set-intersection . n11018) (enum-set-indexer . n11017) (enum-set-difference . n11016) (enum-set-constructor . n11015) (enum-set-complement . n11014) (enum-set->list . n11013) (who-condition? . n9631) (warning? . n9497) (violation? . n9560) (undefined-violation? . n9748) (syntax-violation? . n9723) (syntax-violation-subform . n9727) (syntax-violation-form . n9725) (syntax-violation . n2996) (simple-conditions . n11012) (serious-condition? . n9518) (non-continuable-violation? . n9654) (message-condition? . n9474) (make-who-condition . n9627) (make-warning . n9495) (make-violation . n9558) (make-undefined-violation . n9746) (make-syntax-violation . n9717) (make-serious-condition . n9516) (make-non-continuable-violation . n9652) (make-message-condition . n9470) (make-lexical-violation . n9694) (make-irritants-condition . n9601) (make-implementation-restriction-violation . n9673) (make-error . n9537) (make-assertion-violation . n9579) (lexical-violation? . n9696) (irritants-condition? . n9605) (implementation-restriction-violation? . n9675) (error? . n9539) (condition-who . n9633) (condition-predicate . n11011) (condition-message . n9476) (condition-irritants . n9607) (condition-accessor . n11010) (condition . n11009) (assertion-violation? . n9581) (condition? . n11008) (utf32->string . n11007) (utf16->string . n11006) (utf8->string . n11005) (uint-list->bytevector . n11004) (u8-list->bytevector . n11003) (string->utf8 . n11002) (string->utf32 . n11001) (string->utf16 . n11000) (sint-list->bytevector . n10999) (native-endianness . n10998) (bytevector? . n10997) (bytevector=? . n10996) (bytevector-uint-set! . n10995) (bytevector-uint-ref . n10994) (bytevector-u8-set! . n10993) (bytevector-u8-ref . n10992) (bytevector-u64-set! . n10991) (bytevector-u64-ref . n10990) (bytevector-u64-native-set! . n10989) (bytevector-u64-native-ref . n10988) (bytevector-u32-set! . n10987) (bytevector-u32-ref . n10986) (bytevector-u32-native-set! . n10985) (bytevector-u32-native-ref . n10984) (bytevector-u16-set! . n10983) (bytevector-u16-ref . n10982) (bytevector-u16-native-set! . n10981) (bytevector-u16-native-ref . n10980) (bytevector-sint-set! . n10979) (bytevector-sint-ref . n10978) (bytevector-s8-set! . n10977) (bytevector-s8-ref . n10976) (bytevector-s64-set! . n10975) (bytevector-s64-ref . n10974) (bytevector-s64-native-set! . n10973) (bytevector-s64-native-ref . n10972) (bytevector-s32-set! . n10971) (bytevector-s32-ref . n10970) (bytevector-s32-native-set! . n10969) (bytevector-s32-native-ref . n10968) (bytevector-s16-set! . n10967) (bytevector-s16-ref . n10966) (bytevector-s16-native-set! . n10965) (bytevector-s16-native-ref . n10964) (bytevector-length . n10963) (bytevector-ieee-single-ref . n10962) (bytevector-ieee-single-set! . n10961) (bytevector-ieee-single-native-set! . n10960) (bytevector-ieee-single-native-ref . n10959) (bytevector-ieee-double-set! . n10958) (bytevector-ieee-double-ref . n10957) (bytevector-ieee-double-native-set! . n10956) (bytevector-ieee-double-native-ref . n10955) (bytevector-fill! . n10954) (bytevector-copy! . n10953) (bytevector-copy . n10952) (bytevector->uint-list . n10951) (bytevector->u8-list . n10950) (bytevector->sint-list . n10949) (no-nans-violation? . n10062) (no-infinities-violation? . n10041) (make-no-nans-violation . n10060) (make-no-infinities-violation . n10039) (real->flonum . n10948) (flzero? . n10947) (fltruncate . n10946) (fltan . n10945) (flsqrt . n10944) (flsin . n10943) (flround . n10942) (flpositive? . n10941) (flonum? . n10940) (flodd? . n10939) (flnumerator . n10938) (flnegative? . n10937) (flnan? . n10936) (flmod0 . n10935) (flmod . n10934) (flmin . n10933) (flmax . n10932) (fllog . n10931) (flinteger? . n10930) (flinfinite? . n10929) (flfloor . n10928) (flfinite? . n10927) (flexpt . n10926) (flexp . n10925) (fleven? . n10924) (fldiv0-and-mod0 . n10923) (fldiv0 . n10922) (fldiv-and-mod . n10921) (fldiv . n10920) (fldenominator . n10919) (flcos . n10918) (flceiling . n10917) (flatan . n10916) (flasin . n10915) (flacos . n10914) (flabs . n10913) (fl>? . n10912) (fl>=? . n10911) (fl=? . n10910) (fl<? . n10909) (fl<=? . n10908) (fl/ . n10907) (fl- . n10906) (fl+ . n10905) (fl* . n10904) (fixnum->flonum . n10903) (fxzero? . n10902) (fxxor . n10901) (fxrotate-bit-field . n10900) (fxreverse-bit-field . n10899) (fxpositive? . n10898) (fxodd? . n10897) (fxnot . n10896) (fxnegative? . n10895) (fxmod0 . n10894) (fxmod . n10893) (fxmin . n10892) (fxmax . n10891) (fxlength . n10890) (fxior . n10889) (fxif . n10888) (fxfirst-bit-set . n10887) (fxeven? . n10886) (fxdiv0-and-mod0 . n10885) (fxdiv0 . n10884) (fxdiv-and-mod . n10883) (fxdiv . n10882) (fxcopy-bit-field . n10881) (fxcopy-bit . n10880) (fxbit-set? . n10879) (fxbit-field . n10878) (fxbit-count . n10877) (fxarithmetic-shift-right . n10876) (fxarithmetic-shift-left . n10875) (fxarithmetic-shift . n10874) (fxand . n10873) (fx>? . n10872) (fx>=? . n10871) (fx=? . n10870) (fx<? . n10869) (fx<=? . n10868) (fx-/carry . n10867) (fx- . n10866) (fx+/carry . n10865) (fx+ . n10864) (fx*/carry . n10863) (fx* . n10862) (greatest-fixnum . n10861) (least-fixnum . n10860) (fixnum-width . n10859) (fixnum? . n10858) (bitwise-rotate-bit-field . n10857) (bitwise-reverse-bit-field . n10856) (bitwise-length . n10855) (bitwise-if . n10854) (bitwise-first-bit-set . n10853) (bitwise-copy-bit-field . n10852) (bitwise-copy-bit . n10851) (bitwise-bit-set? . n10850) (bitwise-bit-field . n10849) (bitwise-bit-count . n10848) (bitwise-xor . n10847) (bitwise-ior . n10846) (bitwise-and . n10845) (bitwise-not . n10844) (bitwise-arithmetic-shift-right . n10843) (bitwise-arithmetic-shift-left . n10842) (bitwise-arithmetic-shift . n10841) (zero? . n10840) (vector? . n10839) (vector-set! . n10838) (vector-ref . n10837) (vector-map . n10836) (vector-length . n10835) (vector-for-each . n10834) (vector-fill! . n10833) (vector->list . n10832) (vector . n10831) (values . n10830) (truncate . n10829) (tan . n10828) (symbol? . n10827) (symbol=? . n10826) (symbol->string . n10825) (substring . n10824) (string? . n10823) (string>? . n10822) (string>=? . n10821) (string=? . n10820) (string<? . n10819) (string<=? . n10818) (string-ref . n10817) (string-length . n10816) (string-for-each . n10815) (string-copy . n10814) (string-append . n10813) (string->symbol . n10812) (string->number . n10811) (string->list . n10810) (string . n10809) (sqrt . n10808) (sin . n10807) (round . n10806) (reverse . n10805) (real? . n10804) (real-valued? . n10803) (real-part . n10802) (rationalize . n10801) (rational? . n10800) (rational-valued? . n10799) (procedure? . n10798) (positive? . n10797) (pair? . n10796) (odd? . n10795) (numerator . n10794) (number? . n10793) (number->string . n10792) (null? . n10791) (not . n10790) (negative? . n10789) (nan? . n10788) (min . n10787) (max . n10786) (map . n10785) (make-vector . n10784) (make-string . n10783) (make-rectangular . n10782) (make-polar . n10781) (magnitude . n10780) (log . n10779) (list? . n10778) (list-tail . n10777) (list-ref . n10776) (list->vector . n10775) (list->string . n10774) (list . n10773) (length . n10772) (lcm . n10771) (integer? . n10770) (integer-valued? . n10769) (integer->char . n10768) (infinite? . n10767) (inexact? . n10766) (inexact . n10765) (imag-part . n10764) (gcd . n10763) (for-each . n10762) (floor . n10761) (finite? . n10760) (expt . n10759) (exp . n10758) (exact? . n10757) (exact-integer-sqrt . n10756) (exact . n10755) (even? . n10754) (error . n10753) (eqv? . n10752) (equal? . n10751) (eq? . n10750) (dynamic-wind . n10749) (div0-and-mod0 . n10748) (mod0 . n10747) (div0 . n10746) (div-and-mod . n10745) (mod . n10744) (div . n10743) (denominator . n10742) (cos . n10741) (cons . n10740) (complex? . n10739) (char? . n10738) (char>? . n10737) (char>=? . n10736) (char=? . n10735) (char<? . n10734) (char<=? . n10733) (char->integer . n10732) (ceiling . n10731) (call-with-values . n10730) (call/cc . n10729) (call-with-current-continuation . n10728) (cddddr . n10727) (cdddar . n10726) (cddadr . n10725) (cddaar . n10724) (cdaddr . n10723) (cdadar . n10722) (cdaadr . n10721) (cdaaar . n10720) (cadddr . n10719) (caddar . n10718) (cadadr . n10717) (cadaar . n10716) (caaddr . n10715) (caadar . n10714) (caaadr . n10713) (caaaar . n10712) (cdddr . n10711) (cddar . n10710) (cdadr . n10709) (cdaar . n10708) (caddr . n10707) (cadar . n10706) (caadr . n10705) (caaar . n10704) (cddr . n10703) (cdar . n10702) (cadr . n10701) (caar . n10700) (cdr . n10699) (car . n10698) (boolean? . n10697) (boolean=? . n10696) (atan . n10695) (assertion-violation . n10694) (assertion-error . n2990) (asin . n10693) (apply . n10692) (append . n10691) (angle . n10690) (acos . n10689) (abs . n10688) (/ . n10687) (* . n10686) (- . n10685) (+ . n10684) (>= . n10683) (> . n10682) (= . n10681) (<= . n10680) (< . n10679) (library . n10678) (&no-nans . n10677) (&no-infinities . n10676) (&i/o-encoding . n10675) (&i/o-decoding . n10674) (&i/o-port . n10673) (&i/o-file-does-not-exist . n10672) (&i/o-file-already-exists . n10671) (&i/o-file-is-read-only . n10670) (&i/o-file-protection . n10669) (&i/o-filename . n10668) (&i/o-invalid-position . n10667) (&i/o-write . n10666) (&i/o-read . n10665) (&i/o . n10664) (&undefined . n10663) (&syntax . n10662) (&lexical . n10661) (&implementation-restriction . n10660) (&non-continuable . n10659) (&who . n10658) (&irritants . n10657) (&assertion . n10656) (&violation . n10655) (&error . n10654) (&serious . n10653) (&warning . n10652) (&message . n10651) (&condition . n10650) (define-condition-type . n10649) (define-enumeration . n10648) (define-record-type . n10647) (parent-rtd . n10646) (nongenerative . n10645) (opaque . n10644) (sealed . n10643) (protocol . n10642) (parent . n10641) (immutable . n10640) (mutable . n10639) (fields . n10638) (error-handling-mode . n10637) (file-options . n10636) (buffer-mode . n10635) (eol-style . n10634) (guard . n10633) (trace-define . n10632) (trace-lambda . n10631) (unsyntax-splicing . n10630) (unsyntax . n10629) (unquote-splicing . n10628) (unquote . n10627) (_ . n10626) (else . n10625) (=> . n10624) (... . n10623) (assert . n10622) (endianness . n10621) (delay . n10620) (time . n10619) (do . n10618) (cond . n10617) (let* . n10616) (let . n10615) (let*-values . n10614) (let-values . n10613) (identifier-syntax . n10612) (with-syntax . n10611) (quasisyntax . n10610) (quasiquote . n10609) (syntax-rules . n10608) (include . n10607) (define-struct . n10606) (record-constructor-descriptor . n10605) (record-type-descriptor . n10604) (case . n10603) (parameterize . n10602) (unless . n10601) (when . n10600) (or . n10599) (and . n10598) (if . n10597) (letrec* . n10596) (letrec . n10595) (type-descriptor . n10594) (case-lambda . n10593) (lambda . n10592) (syntax . n10591) (syntax-case . n10590) (quote . n10589) (foreign-call . n10588) (letrec-syntax . n10587) (let-syntax . n10586) (set! . n10585) (import . n10584) (begin . n10583) (module . n10582) (define-syntax . n10581) (define . n10580)) '((n10066 core-prim . &no-nans-rcd) (n10064 core-prim . &no-nans-rtd) (n10045 core-prim . &no-infinities-rcd) (n10043 core-prim . &no-infinities-rtd) (n10024 core-prim . &i/o-encoding-rcd) (n10022 core-prim . &i/o-encoding-rtd) (n9998 core-prim . &i/o-decoding-rcd) (n9996 core-prim . &i/o-decoding-rtd) (n9977 core-prim . &i/o-port-rcd) (n9975 core-prim . &i/o-port-rtd) (n9951 core-prim . &i/o-file-does-not-exist-rcd) (n9949 core-prim . &i/o-file-does-not-exist-rtd) (n9930 core-prim . &i/o-file-already-exists-rcd) (n9928 core-prim . &i/o-file-already-exists-rtd) (n9909 core-prim . &i/o-file-is-read-only-rcd) (n9907 core-prim . &i/o-file-is-read-only-rtd) (n9888 core-prim . &i/o-file-protection-rcd) (n9886 core-prim . &i/o-file-protection-rtd) (n9867 core-prim . &i/o-filename-rcd) (n9865 core-prim . &i/o-filename-rtd) (n9841 core-prim . &i/o-invalid-position-rcd) (n9839 core-prim . &i/o-invalid-position-rtd) (n9815 core-prim . &i/o-write-rcd) (n9813 core-prim . &i/o-write-rtd) (n9794 core-prim . &i/o-read-rcd) (n9792 core-prim . &i/o-read-rtd) (n9773 core-prim . &i/o-rcd) (n9771 core-prim . &i/o-rtd) (n9752 core-prim . &undefined-rcd) (n9750 core-prim . &undefined-rtd) (n9731 core-prim . &syntax-rcd) (n9729 core-prim . &syntax-rtd) (n9700 core-prim . &lexical-rcd) (n9698 core-prim . &lexical-rtd) (n9679 core-prim . &implementation-restriction-rcd) (n9677 core-prim . &implementation-restriction-rtd) (n9658 core-prim . &non-continuable-rcd) (n9656 core-prim . &non-continuable-rtd) (n9637 core-prim . &who-rcd) (n9635 core-prim . &who-rtd) (n9611 core-prim . &irritants-rcd) (n9609 core-prim . &irritants-rtd) (n9585 core-prim . &assertion-rcd) (n9583 core-prim . &assertion-rtd) (n9564 core-prim . &violation-rcd) (n9562 core-prim . &violation-rtd) (n9543 core-prim . &error-rcd) (n9541 core-prim . &error-rtd) (n9522 core-prim . &serious-rcd) (n9520 core-prim . &serious-rtd) (n9501 core-prim . &warning-rcd) (n9499 core-prim . &warning-rtd) (n9480 core-prim . &message-rcd) (n9478 core-prim . &message-rtd) (n9389 core-prim . &condition-rcd) (n9387 core-prim . &condition-rtd) (n2992 core-prim . syntax-error) (n2763 core-prim . syntax-dispatch) (n11287 core-prim . pretty-print) (n11286 core-prim . eval-core) (n11285 core-prim . set-symbol-value!) (n11284 core-prim . symbol-value) (n914 core-prim . gensym) (n11283 core-prim . void) (n10335 core-prim . load) (n3008 core-prim . interaction-environment) (n11282 core-prim . char-ready?) (n11281 core-prim . regexp?) (n11280 core-prim . read-line) (n11279 core-prim . ungensym) (n11278 core-prim . alist->eq-hash-table) (n11277 core-prim . assoc-ref) (n11276 core-prim . print) (n11275 core-prim . format) (n11274 core-prim . host-os) (n1411 core-prim . library-path) (n11273 core-prim . standard-library-path) (n11272 core-prim . file-newer?) (n11271 core-prim . stat-mtime) (n11270 core-prim . write-to-file) (n11269 core-prim . file->list) (n11268 core-prim . file->string) (n11267 core-prim . digit->integer) (n11266 core-prim . call-with-string-input-port) (n11265 core-prim . call-with-string-io) (n11264 core-prim . string-split) (n11263 core-prim . bytevector-for-each) (n11262 core-prim . string->regexp) (n11261 core-prim . rxmatch) (n11260 core-prim . regexp-replace-all) (n11259 core-prim . hashtable-for-each) (n11258 core-prim . call-process) (n11257 core-prim . local-tz-offset) (n11256 core-prim . microseconds) (n11255 core-prim . readdir) (n11254 core-prim . set-current-directory!) (n11253 core-prim . expand-path) (n11252 core-prim . current-directory) (n11251 core-prim . %spawn) (n11250 core-prim . %waitpid) (n11249 core-prim . %ffi-supported?) (n11248 core-prim . %ffi-pointer-ref) (n11247 core-prim . %ffi-pointer->string) (n11246 core-prim . %ffi-call->string-or-zero) (n11245 core-prim . %ffi-call->double) (n11244 core-prim . %ffi-call->void*) (n11243 core-prim . %ffi-call->void) (n11242 core-prim . %ffi-call->int) (n11241 core-prim . %ffi-lookup) (n11240 core-prim . %ffi-open) (n11239 core-prim . %fork) (n11238 core-prim . %pipe) (n11237 core-prim . p) (n11236 core-prim . open-output-string) (n11235 core-prim . get-output-string) (n11234 core-prim . get-environment-variables) (n11233 core-prim . get-environment-variable) (n11232 core-prim . get-timeofday) (n11231 core-prim . get-command-line) (n11230 core-prim . sys-display) (n11229 core-prim . mosh-executable-path) (n11228 core-prim . make-file-options) (n11227 core-prim . source-info) (n11226 core-prim . make-compiler-instruction) (n11225 core-prim . make-instruction) (n11224 core-prim . set-source-info!) (n11223 core-prim . bignum?) (n11222 core-prim . fast-equal?) (n11221 core-prim . fasl-read) (n11220 core-prim . fasl-write) (n11219 core-prim . time-usage) (n11218 core-prim . os-constant) (n942 core-prim . make-parameter) (n11217 core-prim . string-upcase) (n11216 core-prim . string-titlecase) (n11215 core-prim . string-normalize-nfkd) (n11214 core-prim . string-normalize-nfkc) (n11213 core-prim . string-normalize-nfd) (n11212 core-prim . string-normalize-nfc) (n11211 core-prim . string-foldcase) (n11210 core-prim . string-downcase) (n11209 core-prim . string-ci>?) (n11208 core-prim . string-ci>=?) (n11207 core-prim . string-ci=?) (n11206 core-prim . string-ci<?) (n11205 core-prim . string-ci<=?) (n11204 core-prim . char-whitespace?) (n11203 core-prim . char-upper-case?) (n11202 core-prim . char-title-case?) (n11201 core-prim . char-numeric?) (n11200 core-prim . char-lower-case?) (n11199 core-prim . char-general-category) (n11198 core-prim . char-upcase) (n11197 core-prim . char-titlecase) (n11196 core-prim . char-foldcase) (n11195 core-prim . char-downcase) (n11194 core-prim . char-ci>?) (n11193 core-prim . char-ci>=?) (n11192 core-prim . char-ci=?) (n11191 core-prim . char-ci<?) (n11190 core-prim . char-ci<=?) (n11189 core-prim . char-alphabetic?) (n2322 core-prim . make-variable-transformer) (n2998 core-prim . identifier?) (n2978 core-prim . generate-temporaries) (n2980 core-prim . free-identifier=?) (n3002 core-prim . syntax->datum) (n3000 core-prim . datum->syntax) (n2982 core-prim . bound-identifier=?) (n11188 core-prim . record-type-descriptor?) (n11187 core-prim . record-predicate) (n11186 core-prim . record-mutator) (n11185 core-prim . record-constructor) (n11184 core-prim . record-accessor) (n11183 core-prim . make-record-type-descriptor) (n11182 core-prim . make-record-constructor-descriptor) (n11181 core-prim . record?) (n11180 core-prim . record-type-uid) (n11179 core-prim . record-type-sealed?) (n11178 core-prim . record-type-parent) (n11177 core-prim . record-type-opaque?) (n11176 core-prim . record-type-name) (n11175 core-prim . record-type-generative?) (n11174 core-prim . record-type-field-names) (n11173 core-prim . record-rtd) (n11172 core-prim . record-field-mutable?) (n11171 core-prim . delete-file) (n11170 core-prim . file-exists?) (n11169 core-prim . vector-sort!) (n11168 core-prim . vector-sort) (n11167 core-prim . list-sort) (n11166 core-prim . symbol-hash) (n11165 core-prim . string-ci-hash) (n11164 core-prim . string-hash) (n11163 core-prim . equal-hash) (n11162 core-prim . hashtable-equivalence-function) (n11161 core-prim . make-hashtable) (n11160 core-prim . hashtable-hash-function) (n11159 core-prim . make-eqv-hashtable) (n11158 core-prim . make-eq-hashtable) (n11157 core-prim . hashtable?) (n11156 core-prim . hashtable-update!) (n11155 core-prim . hashtable-size) (n11154 core-prim . hashtable-set!) (n11153 core-prim . hashtable-ref) (n11152 core-prim . hashtable-mutable?) (n11151 core-prim . hashtable-keys) (n11150 core-prim . hashtable-entries) (n11149 core-prim . hashtable-delete!) (n11148 core-prim . hashtable-copy) (n11147 core-prim . hashtable-contains?) (n11146 core-prim . hashtable-clear!) (n11145 core-prim . call-with-output-file) (n11144 core-prim . call-with-input-file) (n11143 core-prim . write-char) (n11142 core-prim . write) (n11141 core-prim . with-output-to-file) (n11140 core-prim . with-input-from-file) (n11139 core-prim . read-char) (n11138 core-prim . read) (n11137 core-prim . peek-char) (n11136 core-prim . open-output-file) (n11135 core-prim . open-input-file) (n11134 core-prim . newline) (n11133 core-prim . display) (n11132 core-prim . close-output-port) (n11131 core-prim . close-input-port) (n11130 core-prim . eof-object?) (n11129 core-prim . eof-object) (n11128 core-prim . current-error-port) (n11127 core-prim . current-output-port) (n11126 core-prim . current-input-port) (n11125 core-prim . output-port?) (n11124 core-prim . input-port?) (n11123 core-prim . utf-8-codec) (n11122 core-prim . utf-16-codec) (n11121 core-prim . transcoder-error-handling-mode) (n11120 core-prim . transcoder-eol-style) (n11119 core-prim . transcoder-codec) (n11118 core-prim . transcoded-port) (n11117 core-prim . textual-port?) (n11116 core-prim . string->bytevector) (n11115 core-prim . standard-output-port) (n11114 core-prim . standard-input-port) (n11113 core-prim . standard-error-port) (n11112 core-prim . set-port-position!) (n11111 core-prim . put-u8) (n11110 core-prim . put-string) (n11109 core-prim . put-datum) (n11108 core-prim . put-char) (n11107 core-prim . put-bytevector) (n11106 core-prim . port?) (n11105 core-prim . port-transcoder) (n11104 core-prim . port-position) (n11103 core-prim . port-has-set-port-position!?) (n11102 core-prim . port-has-port-position?) (n11101 core-prim . port-eof?) (n11100 core-prim . output-port-buffer-mode) (n11099 core-prim . open-string-output-port) (n11098 core-prim . open-string-input-port) (n11097 core-prim . open-file-output-port) (n11096 core-prim . open-file-input/output-port) (n11095 core-prim . open-file-input-port) (n11094 core-prim . open-bytevector-output-port) (n11093 core-prim . open-bytevector-input-port) (n11092 core-prim . native-transcoder) (n11091 core-prim . native-eol-style) (n11090 core-prim . make-transcoder) (n11089 core-prim . latin-1-codec) (n9809 core-prim . make-i/o-write-error) (n9788 core-prim . make-i/o-read-error) (n9967 core-prim . make-i/o-port-error) (n9831 core-prim . make-i/o-invalid-position-error) (n9857 core-prim . make-i/o-filename-error) (n9882 core-prim . make-i/o-file-protection-error) (n9903 core-prim . make-i/o-file-is-read-only-error) (n9945 core-prim . make-i/o-file-does-not-exist-error) (n9924 core-prim . make-i/o-file-already-exists-error) (n9767 core-prim . make-i/o-error) (n10014 core-prim . make-i/o-encoding-error) (n9992 core-prim . make-i/o-decoding-error) (n11088 core-prim . make-custom-textual-output-port) (n11087 core-prim . make-custom-textual-input/output-port) (n11086 core-prim . make-custom-textual-input-port) (n11085 core-prim . make-custom-binary-output-port) (n11084 core-prim . make-custom-binary-input/output-port) (n11083 core-prim . make-custom-binary-input-port) (n11082 core-prim . make-bytevector) (n11081 core-prim . lookahead-u8) (n11080 core-prim . lookahead-char) (n9811 core-prim . i/o-write-error?) (n9790 core-prim . i/o-read-error?) (n9971 core-prim . i/o-port-error?) (n9835 core-prim . i/o-invalid-position-error?) (n9861 core-prim . i/o-filename-error?) (n9884 core-prim . i/o-file-protection-error?) (n9905 core-prim . i/o-file-is-read-only-error?) (n9947 core-prim . i/o-file-does-not-exist-error?) (n9926 core-prim . i/o-file-already-exists-error?) (n9769 core-prim . i/o-error?) (n9837 core-prim . i/o-error-position) (n9973 core-prim . i/o-error-port) (n9863 core-prim . i/o-error-filename) (n10018 core-prim . i/o-encoding-error?) (n10020 core-prim . i/o-encoding-error-char) (n9994 core-prim . i/o-decoding-error?) (n11079 core-prim . get-u8) (n11078 core-prim . get-string-n!) (n11077 core-prim . get-string-n) (n11076 core-prim . get-string-all) (n11075 core-prim . get-line) (n11074 core-prim . get-datum) (n11073 core-prim . get-char) (n11072 core-prim . get-bytevector-some) (n11071 core-prim . get-bytevector-n!) (n11070 core-prim . get-bytevector-n) (n11069 core-prim . get-bytevector-all) (n11068 core-prim . flush-output-port) (n11067 core-prim . close-port) (n2960 core-prim . scheme-report-environment) (n11066 core-prim . quotient) (n2958 core-prim . null-environment) (n11065 core-prim . remainder) (n11064 core-prim . modulo) (n11063 core-prim . inexact->exact) (n11062 core-prim . force) (n11061 core-prim . exact->inexact) (n11060 core-prim . make-promise) (n11059 core-prim . exit) (n10329 core-prim . command-line) (n11058 core-prim . string-fill!) (n11057 core-prim . string-set!) (n11056 core-prim . set-cdr!) (n11055 core-prim . set-car!) (n11054 core-prim . remove) (n11053 core-prim . remv) (n11052 core-prim . remp) (n11051 core-prim . remq) (n11050 core-prim . partition) (n11049 core-prim . memv) (n11048 core-prim . memq) (n11047 core-prim . memp) (n11046 core-prim . member) (n11045 core-prim . exists) (n11044 core-prim . for-all) (n11043 core-prim . fold-right) (n11042 core-prim . fold-left) (n11041 core-prim . find) (n11040 core-prim . filter) (n11039 core-prim . cons*) (n11038 core-prim . assv) (n11037 core-prim . assq) (n11036 core-prim . assp) (n11035 core-prim . assoc) (n11034 core-prim . call-with-string-output-port) (n11033 core-prim . call-with-port) (n11032 core-prim . call-with-bytevector-output-port) (n11031 core-prim . bytevector->string) (n11030 core-prim . buffer-mode?) (n11029 core-prim . binary-port?) (n11028 core-prim . with-exception-handler) (n11027 core-prim . raise-continuable) (n11026 core-prim . raise) (n2964 core-prim . eval) (n2956 core-prim . environment) (n11025 core-prim . make-enumeration) (n11024 core-prim . enum-set=?) (n11023 core-prim . enum-set-universe) (n11022 core-prim . enum-set-union) (n11021 core-prim . enum-set-subset?) (n11020 core-prim . enum-set-projection) (n11019 core-prim . enum-set-member?) (n11018 core-prim . enum-set-intersection) (n11017 core-prim . enum-set-indexer) (n11016 core-prim . enum-set-difference) (n11015 core-prim . enum-set-constructor) (n11014 core-prim . enum-set-complement) (n11013 core-prim . enum-set->list) (n9631 core-prim . who-condition?) (n9497 core-prim . warning?) (n9560 core-prim . violation?) (n9748 core-prim . undefined-violation?) (n9723 core-prim . syntax-violation?) (n9727 core-prim . syntax-violation-subform) (n9725 core-prim . syntax-violation-form) (n2996 core-prim . syntax-violation) (n11012 core-prim . simple-conditions) (n9518 core-prim . serious-condition?) (n9654 core-prim . non-continuable-violation?) (n9474 core-prim . message-condition?) (n9627 core-prim . make-who-condition) (n9495 core-prim . make-warning) (n9558 core-prim . make-violation) (n9746 core-prim . make-undefined-violation) (n9717 core-prim . make-syntax-violation) (n9516 core-prim . make-serious-condition) (n9652 core-prim . make-non-continuable-violation) (n9470 core-prim . make-message-condition) (n9694 core-prim . make-lexical-violation) (n9601 core-prim . make-irritants-condition) (n9673 core-prim . make-implementation-restriction-violation) (n9537 core-prim . make-error) (n9579 core-prim . make-assertion-violation) (n9696 core-prim . lexical-violation?) (n9605 core-prim . irritants-condition?) (n9675 core-prim . implementation-restriction-violation?) (n9539 core-prim . error?) (n9633 core-prim . condition-who) (n11011 core-prim . condition-predicate) (n9476 core-prim . condition-message) (n9607 core-prim . condition-irritants) (n11010 core-prim . condition-accessor) (n11009 core-prim . condition) (n9581 core-prim . assertion-violation?) (n11008 core-prim . condition?) (n11007 core-prim . utf32->string) (n11006 core-prim . utf16->string) (n11005 core-prim . utf8->string) (n11004 core-prim . uint-list->bytevector) (n11003 core-prim . u8-list->bytevector) (n11002 core-prim . string->utf8) (n11001 core-prim . string->utf32) (n11000 core-prim . string->utf16) (n10999 core-prim . sint-list->bytevector) (n10998 core-prim . native-endianness) (n10997 core-prim . bytevector?) (n10996 core-prim . bytevector=?) (n10995 core-prim . bytevector-uint-set!) (n10994 core-prim . bytevector-uint-ref) (n10993 core-prim . bytevector-u8-set!) (n10992 core-prim . bytevector-u8-ref) (n10991 core-prim . bytevector-u64-set!) (n10990 core-prim . bytevector-u64-ref) (n10989 core-prim . bytevector-u64-native-set!) (n10988 core-prim . bytevector-u64-native-ref) (n10987 core-prim . bytevector-u32-set!) (n10986 core-prim . bytevector-u32-ref) (n10985 core-prim . bytevector-u32-native-set!) (n10984 core-prim . bytevector-u32-native-ref) (n10983 core-prim . bytevector-u16-set!) (n10982 core-prim . bytevector-u16-ref) (n10981 core-prim . bytevector-u16-native-set!) (n10980 core-prim . bytevector-u16-native-ref) (n10979 core-prim . bytevector-sint-set!) (n10978 core-prim . bytevector-sint-ref) (n10977 core-prim . bytevector-s8-set!) (n10976 core-prim . bytevector-s8-ref) (n10975 core-prim . bytevector-s64-set!) (n10974 core-prim . bytevector-s64-ref) (n10973 core-prim . bytevector-s64-native-set!) (n10972 core-prim . bytevector-s64-native-ref) (n10971 core-prim . bytevector-s32-set!) (n10970 core-prim . bytevector-s32-ref) (n10969 core-prim . bytevector-s32-native-set!) (n10968 core-prim . bytevector-s32-native-ref) (n10967 core-prim . bytevector-s16-set!) (n10966 core-prim . bytevector-s16-ref) (n10965 core-prim . bytevector-s16-native-set!) (n10964 core-prim . bytevector-s16-native-ref) (n10963 core-prim . bytevector-length) (n10962 core-prim . bytevector-ieee-single-ref) (n10961 core-prim . bytevector-ieee-single-set!) (n10960 core-prim . bytevector-ieee-single-native-set!) (n10959 core-prim . bytevector-ieee-single-native-ref) (n10958 core-prim . bytevector-ieee-double-set!) (n10957 core-prim . bytevector-ieee-double-ref) (n10956 core-prim . bytevector-ieee-double-native-set!) (n10955 core-prim . bytevector-ieee-double-native-ref) (n10954 core-prim . bytevector-fill!) (n10953 core-prim . bytevector-copy!) (n10952 core-prim . bytevector-copy) (n10951 core-prim . bytevector->uint-list) (n10950 core-prim . bytevector->u8-list) (n10949 core-prim . bytevector->sint-list) (n10062 core-prim . no-nans-violation?) (n10041 core-prim . no-infinities-violation?) (n10060 core-prim . make-no-nans-violation) (n10039 core-prim . make-no-infinities-violation) (n10948 core-prim . real->flonum) (n10947 core-prim . flzero?) (n10946 core-prim . fltruncate) (n10945 core-prim . fltan) (n10944 core-prim . flsqrt) (n10943 core-prim . flsin) (n10942 core-prim . flround) (n10941 core-prim . flpositive?) (n10940 core-prim . flonum?) (n10939 core-prim . flodd?) (n10938 core-prim . flnumerator) (n10937 core-prim . flnegative?) (n10936 core-prim . flnan?) (n10935 core-prim . flmod0) (n10934 core-prim . flmod) (n10933 core-prim . flmin) (n10932 core-prim . flmax) (n10931 core-prim . fllog) (n10930 core-prim . flinteger?) (n10929 core-prim . flinfinite?) (n10928 core-prim . flfloor) (n10927 core-prim . flfinite?) (n10926 core-prim . flexpt) (n10925 core-prim . flexp) (n10924 core-prim . fleven?) (n10923 core-prim . fldiv0-and-mod0) (n10922 core-prim . fldiv0) (n10921 core-prim . fldiv-and-mod) (n10920 core-prim . fldiv) (n10919 core-prim . fldenominator) (n10918 core-prim . flcos) (n10917 core-prim . flceiling) (n10916 core-prim . flatan) (n10915 core-prim . flasin) (n10914 core-prim . flacos) (n10913 core-prim . flabs) (n10912 core-prim . fl>?) (n10911 core-prim . fl>=?) (n10910 core-prim . fl=?) (n10909 core-prim . fl<?) (n10908 core-prim . fl<=?) (n10907 core-prim . fl/) (n10906 core-prim . fl-) (n10905 core-prim . fl+) (n10904 core-prim . fl*) (n10903 core-prim . fixnum->flonum) (n10902 core-prim . fxzero?) (n10901 core-prim . fxxor) (n10900 core-prim . fxrotate-bit-field) (n10899 core-prim . fxreverse-bit-field) (n10898 core-prim . fxpositive?) (n10897 core-prim . fxodd?) (n10896 core-prim . fxnot) (n10895 core-prim . fxnegative?) (n10894 core-prim . fxmod0) (n10893 core-prim . fxmod) (n10892 core-prim . fxmin) (n10891 core-prim . fxmax) (n10890 core-prim . fxlength) (n10889 core-prim . fxior) (n10888 core-prim . fxif) (n10887 core-prim . fxfirst-bit-set) (n10886 core-prim . fxeven?) (n10885 core-prim . fxdiv0-and-mod0) (n10884 core-prim . fxdiv0) (n10883 core-prim . fxdiv-and-mod) (n10882 core-prim . fxdiv) (n10881 core-prim . fxcopy-bit-field) (n10880 core-prim . fxcopy-bit) (n10879 core-prim . fxbit-set?) (n10878 core-prim . fxbit-field) (n10877 core-prim . fxbit-count) (n10876 core-prim . fxarithmetic-shift-right) (n10875 core-prim . fxarithmetic-shift-left) (n10874 core-prim . fxarithmetic-shift) (n10873 core-prim . fxand) (n10872 core-prim . fx>?) (n10871 core-prim . fx>=?) (n10870 core-prim . fx=?) (n10869 core-prim . fx<?) (n10868 core-prim . fx<=?) (n10867 core-prim . fx-/carry) (n10866 core-prim . fx-) (n10865 core-prim . fx+/carry) (n10864 core-prim . fx+) (n10863 core-prim . fx*/carry) (n10862 core-prim . fx*) (n10861 core-prim . greatest-fixnum) (n10860 core-prim . least-fixnum) (n10859 core-prim . fixnum-width) (n10858 core-prim . fixnum?) (n10857 core-prim . bitwise-rotate-bit-field) (n10856 core-prim . bitwise-reverse-bit-field) (n10855 core-prim . bitwise-length) (n10854 core-prim . bitwise-if) (n10853 core-prim . bitwise-first-bit-set) (n10852 core-prim . bitwise-copy-bit-field) (n10851 core-prim . bitwise-copy-bit) (n10850 core-prim . bitwise-bit-set?) (n10849 core-prim . bitwise-bit-field) (n10848 core-prim . bitwise-bit-count) (n10847 core-prim . bitwise-xor) (n10846 core-prim . bitwise-ior) (n10845 core-prim . bitwise-and) (n10844 core-prim . bitwise-not) (n10843 core-prim . bitwise-arithmetic-shift-right) (n10842 core-prim . bitwise-arithmetic-shift-left) (n10841 core-prim . bitwise-arithmetic-shift) (n10840 core-prim . zero?) (n10839 core-prim . vector?) (n10838 core-prim . vector-set!) (n10837 core-prim . vector-ref) (n10836 core-prim . vector-map) (n10835 core-prim . vector-length) (n10834 core-prim . vector-for-each) (n10833 core-prim . vector-fill!) (n10832 core-prim . vector->list) (n10831 core-prim . vector) (n10830 core-prim . values) (n10829 core-prim . truncate) (n10828 core-prim . tan) (n10827 core-prim . symbol?) (n10826 core-prim . symbol=?) (n10825 core-prim . symbol->string) (n10824 core-prim . substring) (n10823 core-prim . string?) (n10822 core-prim . string>?) (n10821 core-prim . string>=?) (n10820 core-prim . string=?) (n10819 core-prim . string<?) (n10818 core-prim . string<=?) (n10817 core-prim . string-ref) (n10816 core-prim . string-length) (n10815 core-prim . string-for-each) (n10814 core-prim . string-copy) (n10813 core-prim . string-append) (n10812 core-prim . string->symbol) (n10811 core-prim . string->number) (n10810 core-prim . string->list) (n10809 core-prim . string) (n10808 core-prim . sqrt) (n10807 core-prim . sin) (n10806 core-prim . round) (n10805 core-prim . reverse) (n10804 core-prim . real?) (n10803 core-prim . real-valued?) (n10802 core-prim . real-part) (n10801 core-prim . rationalize) (n10800 core-prim . rational?) (n10799 core-prim . rational-valued?) (n10798 core-prim . procedure?) (n10797 core-prim . positive?) (n10796 core-prim . pair?) (n10795 core-prim . odd?) (n10794 core-prim . numerator) (n10793 core-prim . number?) (n10792 core-prim . number->string) (n10791 core-prim . null?) (n10790 core-prim . not) (n10789 core-prim . negative?) (n10788 core-prim . nan?) (n10787 core-prim . min) (n10786 core-prim . max) (n10785 core-prim . map) (n10784 core-prim . make-vector) (n10783 core-prim . make-string) (n10782 core-prim . make-rectangular) (n10781 core-prim . make-polar) (n10780 core-prim . magnitude) (n10779 core-prim . log) (n10778 core-prim . list?) (n10777 core-prim . list-tail) (n10776 core-prim . list-ref) (n10775 core-prim . list->vector) (n10774 core-prim . list->string) (n10773 core-prim . list) (n10772 core-prim . length) (n10771 core-prim . lcm) (n10770 core-prim . integer?) (n10769 core-prim . integer-valued?) (n10768 core-prim . integer->char) (n10767 core-prim . infinite?) (n10766 core-prim . inexact?) (n10765 core-prim . inexact) (n10764 core-prim . imag-part) (n10763 core-prim . gcd) (n10762 core-prim . for-each) (n10761 core-prim . floor) (n10760 core-prim . finite?) (n10759 core-prim . expt) (n10758 core-prim . exp) (n10757 core-prim . exact?) (n10756 core-prim . exact-integer-sqrt) (n10755 core-prim . exact) (n10754 core-prim . even?) (n10753 core-prim . error) (n10752 core-prim . eqv?) (n10751 core-prim . equal?) (n10750 core-prim . eq?) (n10749 core-prim . dynamic-wind) (n10748 core-prim . div0-and-mod0) (n10747 core-prim . mod0) (n10746 core-prim . div0) (n10745 core-prim . div-and-mod) (n10744 core-prim . mod) (n10743 core-prim . div) (n10742 core-prim . denominator) (n10741 core-prim . cos) (n10740 core-prim . cons) (n10739 core-prim . complex?) (n10738 core-prim . char?) (n10737 core-prim . char>?) (n10736 core-prim . char>=?) (n10735 core-prim . char=?) (n10734 core-prim . char<?) (n10733 core-prim . char<=?) (n10732 core-prim . char->integer) (n10731 core-prim . ceiling) (n10730 core-prim . call-with-values) (n10729 core-prim . call/cc) (n10728 core-prim . call-with-current-continuation) (n10727 core-prim . cddddr) (n10726 core-prim . cdddar) (n10725 core-prim . cddadr) (n10724 core-prim . cddaar) (n10723 core-prim . cdaddr) (n10722 core-prim . cdadar) (n10721 core-prim . cdaadr) (n10720 core-prim . cdaaar) (n10719 core-prim . cadddr) (n10718 core-prim . caddar) (n10717 core-prim . cadadr) (n10716 core-prim . cadaar) (n10715 core-prim . caaddr) (n10714 core-prim . caadar) (n10713 core-prim . caaadr) (n10712 core-prim . caaaar) (n10711 core-prim . cdddr) (n10710 core-prim . cddar) (n10709 core-prim . cdadr) (n10708 core-prim . cdaar) (n10707 core-prim . caddr) (n10706 core-prim . cadar) (n10705 core-prim . caadr) (n10704 core-prim . caaar) (n10703 core-prim . cddr) (n10702 core-prim . cdar) (n10701 core-prim . cadr) (n10700 core-prim . caar) (n10699 core-prim . cdr) (n10698 core-prim . car) (n10697 core-prim . boolean?) (n10696 core-prim . boolean=?) (n10695 core-prim . atan) (n10694 core-prim . assertion-violation) (n2990 core-prim . assertion-error) (n10693 core-prim . asin) (n10692 core-prim . apply) (n10691 core-prim . append) (n10690 core-prim . angle) (n10689 core-prim . acos) (n10688 core-prim . abs) (n10687 core-prim . /) (n10686 core-prim . *) (n10685 core-prim . -) (n10684 core-prim . +) (n10683 core-prim . >=) (n10682 core-prim . >) (n10681 core-prim . =) (n10680 core-prim . <=) (n10679 core-prim . <) (n10678 core-prim . library) (n10677 $core-rtd &no-nans-rtd &no-nans-rcd) (n10676 $core-rtd &no-infinities-rtd &no-infinities-rcd) (n10675 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (n10674 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (n10673 $core-rtd &i/o-port-rtd &i/o-port-rcd) (n10672 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (n10671 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (n10670 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (n10669 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (n10668 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (n10667 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (n10666 $core-rtd &i/o-write-rtd &i/o-write-rcd) (n10665 $core-rtd &i/o-read-rtd &i/o-read-rcd) (n10664 $core-rtd &i/o-rtd &i/o-rcd) (n10663 $core-rtd &undefined-rtd &undefined-rcd) (n10662 $core-rtd &syntax-rtd &syntax-rcd) (n10661 $core-rtd &lexical-rtd &lexical-rcd) (n10660 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (n10659 $core-rtd &non-continuable-rtd &non-continuable-rcd) (n10658 $core-rtd &who-rtd &who-rcd) (n10657 $core-rtd &irritants-rtd &irritants-rcd) (n10656 $core-rtd &assertion-rtd &assertion-rcd) (n10655 $core-rtd &violation-rtd &violation-rcd) (n10654 $core-rtd &error-rtd &error-rcd) (n10653 $core-rtd &serious-rtd &serious-rcd) (n10652 $core-rtd &warning-rtd &warning-rcd) (n10651 $core-rtd &message-rtd &message-rcd) (n10650 $core-rtd &condition-rtd &condition-rcd) (n10649 macro . define-condition-type) (n10648 macro . define-enumeration) (n10647 macro . define-record-type) (n10646 macro . parent-rtd) (n10645 macro . nongenerative) (n10644 macro . opaque) (n10643 macro . sealed) (n10642 macro . protocol) (n10641 macro . parent) (n10640 macro . immutable) (n10639 macro . mutable) (n10638 macro . fields) (n10637 macro . error-handling-mode) (n10636 macro . file-options) (n10635 macro . buffer-mode) (n10634 macro . eol-style) (n10633 macro . guard) (n10632 macro . trace-define) (n10631 macro . trace-lambda) (n10630 macro . unsyntax-splicing) (n10629 macro . unsyntax) (n10628 macro . unquote-splicing) (n10627 macro . unquote) (n10626 macro . _) (n10625 macro . else) (n10624 macro . =>) (n10623 macro . ...) (n10622 macro . assert) (n10621 macro . endianness) (n10620 macro . delay) (n10619 macro . time) (n10618 macro . do) (n10617 macro . cond) (n10616 macro . let*) (n10615 macro . let) (n10614 macro . let*-values) (n10613 macro . let-values) (n10612 macro . identifier-syntax) (n10611 macro . with-syntax) (n10610 macro . quasisyntax) (n10609 macro . quasiquote) (n10608 macro . syntax-rules) (n10607 macro . include) (n10606 macro . define-struct) (n10605 core-macro . record-constructor-descriptor) (n10604 core-macro . record-type-descriptor) (n10603 macro . case) (n10602 macro . parameterize) (n10601 macro . unless) (n10600 macro . when) (n10599 core-macro . or) (n10598 core-macro . and) (n10597 core-macro . if) (n10596 core-macro . letrec*) (n10595 core-macro . letrec) (n10594 core-macro . type-descriptor) (n10593 core-macro . case-lambda) (n10592 core-macro . lambda) (n10591 core-macro . syntax) (n10590 core-macro . syntax-case) (n10589 core-macro . quote) (n10588 core-macro . foreign-call) (n10587 letrec-syntax) (n10586 let-syntax) (n10585 set!) (n10584 import) (n10583 begin) (n10582 module) (n10581 define-syntax) (n10580 define)) values values '#f '#f '#f '#f) (n1791@n1444@install-library 'n11320 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . n11287) (eval-core . n11286) (set-symbol-value! . n11285) (symbol-value . n11284) (gensym . n914) (void . n11283)) '() values values '#f '#f '#f '#f) (n1791@n1444@install-library 'n11321 '(mosh) '() '() '() '() '((set-symbol-value! . n11285) (symbol-value . n11284) (read-line . n11280) (ungensym . n11279) (alist->eq-hash-table . n11278) (assoc-ref . n11277) (print . n11276) (format . n11275) (host-os . n11274) (library-path . n1411) (standard-library-path . n11273) (file-newer? . n11272) (stat-mtime . n11271) (write-to-file . n11270) (file->list . n11269) (file->string . n11268) (digit->integer . n11267) (call-with-string-input-port . n11266) (call-with-string-io . n11265) (string-split . n11264) (bytevector-for-each . n11263) (string->regexp . n11262) (rxmatch . n11261) (regexp-replace-all . n11260) (hashtable-for-each . n11259) (readdir . n11255) (set-current-directory! . n11254) (expand-path . n11253) (current-directory . n11252) (p . n11237) (get-timeofday . n11232) (get-command-line . n11231) (sys-display . n11230) (mosh-executable-path . n11229) (make-file-options . n11228) (source-info . n11227) (make-compiler-instruction . n11226) (make-instruction . n11225) (set-source-info! . n11224) (bignum? . n11223) (fast-equal? . n11222) (fasl-read . n11221) (fasl-write . n11220) (time-usage . n11219) (os-constant . n11218) (time . n10619) (include . n10607)) '() values values '#f '#f '#f '#f) (n1791@n1444@install-library 'n11322 '(system) '() '() '() '() '((call-process . n11258) (local-tz-offset . n11257) (microseconds . n11256) (expand-path . n11253) (%spawn . n11251) (%waitpid . n11250) (%ffi-supported? . n11249) (%ffi-pointer-ref . n11248) (%ffi-pointer->string . n11247) (%ffi-call->string-or-zero . n11246) (%ffi-call->double . n11245) (%ffi-call->void* . n11244) (%ffi-call->void . n11243) (%ffi-call->int . n11242) (%ffi-lookup . n11241) (%ffi-open . n11240) (%fork . n11239) (%pipe . n11238) (open-output-string . n11236) (get-output-string . n11235) (get-environment-variables . n11234) (get-environment-variable . n11233) (make-parameter . n942) (parameterize . n10602)) '() values values '#f '#f '#f '#f))
((lambda (n10312@add-library-path! n10314@parse-and-add-library-path n10316@for-each-with-index n10318@rpad n10320@condition-printer n10322@record->field-alist n10324@map-with-index n10326@repl n10328@trace-printer n10330@command-line n10332@local-library-path n10334@load/args n10336@load n10338@ironscheme-build n10340@eval-top-level n10342@compile-system-libraries n10344@compile n10346@compile->closure n10348@pre-compile-r6rs-file n10350@load-r6rs-top-level) (begin (set! n10312@add-library-path! (lambda (n10377@path) (n1775@n1412@library-path (append (n1775@n1412@library-path) (list n10377@path))))) (set! n10314@parse-and-add-library-path (lambda (n10379@paths n10380@message) ((lambda (n10383@t) (if n10383@t ((lambda (n10385@paths) (for-each (lambda (n10387@path) (if (file-exists? n10387@path) (n10312@add-library-path! (expand-path n10387@path)) (format (current-error-port) n10380@message n10387@path))) (reverse (string-split n10385@paths '#\:)))) n10383@t) (void))) n10379@paths))) (set! n10316@for-each-with-index (lambda (n10389@proc n10390@lst) (letrec ((n10393@loop (lambda (n10395@i n10396@lst) (if (null? n10396@lst) (if '#f '#f (void)) (begin (n10389@proc n10395@i (car n10396@lst)) (n10393@loop (+ n10395@i '1) (cdr n10396@lst))))))) (n10393@loop '1 n10390@lst)))) (set! n10318@rpad (lambda (n10399@str n10400@pad n10401@n) ((lambda (n10405@rest) ((letrec ((n10407@loop (lambda (n10409@rest n10410@ret) (if (<= n10409@rest '0) n10410@ret (n10407@loop (- n10409@rest '1) (string-append n10410@ret n10400@pad)))))) n10407@loop) n10405@rest (format '"~a" n10399@str))) (- n10401@n (string-length (format '"~a" n10399@str)))))) (set! n10320@condition-printer (lambda (n10413@e n10414@port) ((lambda (n10418@max-condition-len) (begin (set! n10418@max-condition-len (apply max (map (lambda (n10435@c) (string-length (symbol->string (record-type-name (record-rtd n10435@c))))) (simple-conditions n10413@e)))) (begin (display '" Condition components:\n" n10414@port) (n10316@for-each-with-index (lambda (n10419@i n10420@x) ((lambda (n10423@rtd n10424@fields-alist) (begin (format n10414@port '" ~d. ~a" n10419@i (n10318@rpad (symbol->string (record-type-name n10423@rtd)) '" " n10418@max-condition-len)) (if (null? n10424@fields-alist) (newline n10414@port) (void)) ((letrec ((n10427@loop (lambda (n10429@first n10430@fields-alist) (if (null? n10430@fields-alist) '() ((lambda (n10433@field) (begin (if (not n10429@first) (display (n10318@rpad '"" '" " (+ '4 n10418@max-condition-len)) n10414@port) (void)) (display '"       " n10414@port) (display (car n10433@field) n10414@port) (display '": " n10414@port) (write (cdr n10433@field) n10414@port) (newline n10414@port) (n10427@loop '#f (cdr n10430@fields-alist)))) (car n10430@fields-alist)))))) n10427@loop) '#t n10424@fields-alist))) (record-rtd n10420@x) (n10322@record->field-alist n10420@x))) (simple-conditions n10413@e))))) '#f))) (set! n10322@record->field-alist (lambda (n10437@r) ((lambda (n10440@ref) (begin (set! n10440@ref (lambda (n10451@rtd n10452@i n10453@x) ((lambda (n10457@val) (if (symbol? n10457@val) (ungensym n10457@val) n10457@val)) ((record-accessor n10451@rtd n10452@i) n10453@x)))) ((letrec ((n10441@loop (lambda (n10443@ret n10444@rtd) (if n10444@rtd (n10441@loop (append n10443@ret (n10324@map-with-index (lambda (n10447@i n10448@field) (cons n10448@field (n10440@ref n10444@rtd n10447@i n10437@r))) (vector->list (record-type-field-names n10444@rtd)))) (record-type-parent n10444@rtd)) n10443@ret)))) n10441@loop) '() (record-rtd n10437@r)))) '#f))) (set! n10324@map-with-index (lambda (n10459@proc n10460@lst) ((letrec ((n10463@loop (lambda (n10465@i n10466@lst n10467@ret) (if (null? n10466@lst) (reverse n10467@ret) (n10463@loop (+ n10465@i '1) (cdr n10466@lst) (cons (n10459@proc n10465@i (car n10466@lst)) n10467@ret)))))) n10463@loop) '0 n10460@lst '()))) (set! n10326@repl (lambda n10471@x ((lambda (n10474@rec) (begin (set! n10474@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (n10477@n10475) (lambda () (with-exception-handler (lambda (n10479@e) ((call/cc (lambda (n10481@n10476) (n10477@n10475 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? n10479@e) (n10320@condition-printer n10479@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" n10479@e))) (n10481@n10476 (lambda () (raise-continuable n10479@e)))))))))) (lambda () ((letrec ((n10483@loop (lambda (n10485@line n10486@accum) ((lambda (n10490@parentheses-ok? n10492@eval-string-print) (begin (set! n10490@parentheses-ok? (lambda (n10497@text) ((letrec ((n10499@loop (lambda (n10501@chars n10502@p0 n10503@p1) (if (null? n10501@chars) (= '0 n10502@p0 n10503@p1) ((lambda (n10507@t) (if (memv n10507@t '(#\()) (n10499@loop (cdr n10501@chars) (+ n10502@p0 '1) n10503@p1) (if (memv n10507@t '(#\))) (n10499@loop (cdr n10501@chars) (- n10502@p0 '1) n10503@p1) (if (memv n10507@t '(#\[)) (n10499@loop (cdr n10501@chars) n10502@p0 (+ n10503@p1 '1)) (if (memv n10507@t '(#\])) (n10499@loop (cdr n10501@chars) n10502@p0 (- n10503@p1 '1)) (n10499@loop (cdr n10501@chars) n10502@p0 n10503@p1)))))) (car n10501@chars)))))) n10499@loop) (string->list n10497@text) '0 '0))) (set! n10492@eval-string-print (lambda (n10495@text) (if (not (or (string=? '"\n" n10495@text) (= '0 (string-length n10495@text)))) (write (n10340@eval-top-level (call-with-port (open-string-input-port n10495@text) read))) (void)))) (if (eof-object? n10485@line) (begin (n10492@eval-string-print n10486@accum) (exit)) ((lambda (n10493@current) (if (n10490@parentheses-ok? n10493@current) (n10492@eval-string-print n10493@current) (n10483@loop (get-line (current-input-port)) n10493@current))) (string-append n10486@accum n10485@line))))) '#f '#f)))) n10483@loop) (get-line (current-input-port)) '""))))))) (newline) (n10474@rec)))) (n10474@rec))) '#f))) (set! n10328@trace-printer (n1165@n943@make-parameter write)) (set! n10330@command-line (n1165@n943@make-parameter (get-command-line))) (set! n10332@local-library-path (lambda (n10509@filename) (cons (expand-path '".") (n1775@n1412@library-path)))) (set! n10334@load/args (lambda (n10511@filename . n10513@args) (begin (apply n10350@load-r6rs-top-level n10511@filename 'load n10513@args) (void)))) (set! n10336@load (lambda (n10515@filename) (begin (apply n10350@load-r6rs-top-level n10515@filename 'load (n10330@command-line)) (void)))) (set! n10338@ironscheme-build (lambda () (n10336@load '"ironscheme-buildscript.ss"))) (set! n10340@eval-top-level (lambda (n10517@x) (n9344@n2965@eval n10517@x (n9366@n3009@interaction-environment)))) (set! n10342@compile-system-libraries (lambda () (n10340@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! n10344@compile (lambda (n10519@filename) (n10350@load-r6rs-top-level n10519@filename 'compile))) (set! n10346@compile->closure (lambda (n10521@filename) (n10350@load-r6rs-top-level n10521@filename 'closure))) (set! n10348@pre-compile-r6rs-file (lambda (n10523@filename) (n10350@load-r6rs-top-level n10523@filename 'compile))) (set! n10350@load-r6rs-top-level (lambda (n10525@filename n10526@how . n10529@args) ((lambda (n10533@n10531@library-path n10534@n10532@library-path) ((lambda (n10537@swap) (dynamic-wind n10537@swap (lambda () ((lambda (n10539@x*) ((lambda (n10541@t) (if (memv n10541@t '(closure)) (n9365@n3007@pre-compile-r6rs-top-level n10539@x*) (if (memv n10541@t '(load)) ((lambda (n10545@n10543@command-line n10546@n10544@command-line) ((lambda (n10549@swap) (dynamic-wind n10549@swap (lambda () ((n9364@n3005@compile-r6rs-top-level n10539@x*))) n10549@swap)) (lambda () ((lambda (n10551@t) (begin (n10545@n10543@command-line n10546@n10544@command-line) (set! n10546@n10544@command-line n10551@t))) (n10545@n10543@command-line))))) n10330@command-line (cons n10525@filename (car n10529@args))) (if (memv n10541@t '(compile)) (begin (n9364@n3005@compile-r6rs-top-level n10539@x*) (n1779@n1420@serialize-all n1160@n933@serialize-library n1250@n1179@compile-core-expr)) (if '#f '#f (void)))))) n10526@how)) (with-input-from-file n10525@filename (lambda () ((letrec ((n10553@f (lambda () ((lambda (n10555@x) (if (eof-object? n10555@x) '() (cons n10555@x (n10553@f)))) (n1152@n917@read-annotated))))) n10553@f)))))) n10537@swap)) (lambda () ((lambda (n10557@t) (begin (n10533@n10531@library-path n10534@n10532@library-path) (set! n10534@n10532@library-path n10557@t))) (n10533@n10531@library-path))))) n1775@n1412@library-path (n10332@local-library-path n10525@filename)))) (begin (set! n10578@n10350@load-r6rs-top-level n10350@load-r6rs-top-level) (set! n10577@n10348@pre-compile-r6rs-file n10348@pre-compile-r6rs-file) (set! n10576@n10346@compile->closure n10346@compile->closure) (set! n10575@n10344@compile n10344@compile) (set! n10574@n10342@compile-system-libraries n10342@compile-system-libraries) (set! n10573@n10340@eval-top-level n10340@eval-top-level) (set! n10572@n10338@ironscheme-build n10338@ironscheme-build) (set! n10571@n10336@load n10336@load) (set! n10570@n10334@load/args n10334@load/args) (set! n10569@n10332@local-library-path n10332@local-library-path) (set! n10568@n10330@command-line n10330@command-line) (set! n10567@n10328@trace-printer n10328@trace-printer) (set! n10566@n10326@repl n10326@repl) (set! n10565@n10324@map-with-index n10324@map-with-index) (set! n10564@n10322@record->field-alist n10322@record->field-alist) (set! n10563@n10320@condition-printer n10320@condition-printer) (set! n10562@n10318@rpad n10318@rpad) (set! n10561@n10316@for-each-with-index n10316@for-each-with-index) (set! n10560@n10314@parse-and-add-library-path n10314@parse-and-add-library-path) (set! n10559@n10312@add-library-path! n10312@add-library-path!) (n1780@n1422@current-precompiled-library-loader n1161@n935@load-serialized-library) (set-symbol-value! 'load n10336@load) (set-symbol-value! 'pre-compile-r6rs-file n10348@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs n10340@eval-top-level) (set-symbol-value! 'int-env-syms n9335@n2947@interaction-environment-symbols) (set-symbol-value! 'expanded2core n1249@n1177@expanded->core) (set-symbol-value! 'trace-printer n10328@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (n10351@c) (condition (n10149@n9653@make-non-continuable-violation) (n10139@n9628@make-who-condition 'raise) (n10079@n9471@make-message-condition '"returned from non-continuable exception") (n10129@n9602@make-irritants-condition (list n10351@c))))) (n10314@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (n10314@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (n10312@add-library-path! (string-append (mosh-executable-path) '"/lib")) (n10312@add-library-path! (string-append (current-directory) '"/lib"))) (n10312@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (n10353@prefix) (n1776@n1414@library-extensions (n10353@prefix '".mosh" (n1776@n1414@library-extensions)))) (lambda (n10355@ext n10356@ls) (append (map (lambda (n10359@x) (string-append n10355@ext n10359@x)) n10356@ls) n10356@ls))) ((lambda (n10361@args n10362@port) ((lambda (n10366@ref) (begin (set! n10366@ref (lambda (n10369@rtd n10370@i n10371@x) ((lambda (n10375@val) (if (symbol? n10375@val) (ungensym n10375@val) n10375@val)) ((record-accessor n10369@rtd n10370@i) n10371@x)))) (with-exception-handler (lambda (n10367@c) (if (condition? n10367@c) (n10320@condition-printer n10367@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" n10367@c))) (lambda () (if (null? n10361@args) (n10326@repl) (n10350@load-r6rs-top-level (car n10361@args) 'load (cdr n10361@args))))))) '#f)) (n10330@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
