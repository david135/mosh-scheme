;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (w919@make-gensym-counter w921@gen-sym-prefix w923@gen-sym-counter w925@gensym w927@read-annotated w929@annotation-stripped w931@annotation? w933@annotation-source w935@annotation-expression w937@scm->fasl w939@fasl-save w941@fasl-load w943@serialize-library w945@load-serialized-library w947@make-record-printer w949@compile-core w951@read-library-source-file w953@make-parameter w1053@file-options-spec) (begin (set! w919@make-gensym-counter (lambda (w1054@i) ((lambda (w1057@inc) (begin (set! w1057@inc (lambda () (begin (set! w1054@i (+ w1054@i '1)) w1054@i))) w1057@inc)) '#f))) (set! w921@gen-sym-prefix ((lambda (w1058@v) (if w1058@v (string->symbol w1058@v) 'A)) (get-environment-variable '"MOSH_GENSYM_PREFIX"))) (set! w923@gen-sym-counter (w919@make-gensym-counter '0)) (set! w925@gensym (lambda w1060@x (string->symbol (if (null? w1060@x) (format '"~a~a" w921@gen-sym-prefix (w923@gen-sym-counter)) (format '"~a~a@~a" w921@gen-sym-prefix (w923@gen-sym-counter) (car w1060@x)))))) (set! w927@read-annotated read) (set! w929@annotation-stripped (lambda (w1062@x) (w935@annotation-expression w1062@x))) (set! w931@annotation? (lambda (w1064@x) (source-info w1064@x))) (set! w933@annotation-source (lambda (w1066@x) (source-info w1066@x))) (set! w935@annotation-expression (lambda (w1068@x) (if (pair? w1068@x) (cons (car w1068@x) (cdr w1068@x)) (display '"line:46\n")))) (set! w937@scm->fasl (lambda (w1070@filename) (string-append w1070@filename '".fasl"))) (set! w939@fasl-save (lambda (w1072@filename w1073@obj) (call-with-port (open-file-output-port w1072@filename) (lambda (w1076@port) ((symbol-value 'fasl-write!) w1073@obj w1076@port))))) (set! w941@fasl-load (lambda (w1078@filename) (call-with-port (open-file-input-port w1078@filename) (symbol-value 'fasl-read!)))) (set! w943@serialize-library (lambda (w1080@filename w1081@obj) (begin (format '#t '"serialize-library ~a\n..." w1080@filename) ((lambda (w1084@expanded2core) ((lambda (w1086@compile) ((lambda (w1088@code) ((lambda (w1090@pivot) ((lambda (w1092@visit) ((lambda () (begin (set-car! w1090@pivot w1092@visit) ((lambda (w1094@pivot) ((lambda (w1096@invoke) ((lambda () (set-car! w1094@pivot w1096@invoke)))) (w1086@compile (w1084@expanded2core (car w1094@pivot))))) (cdr w1090@pivot)))))) (w1086@compile (w1084@expanded2core (car w1090@pivot))))) (cddddr (cddddr w1088@code)))) w1081@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (w1098@fasl-file) (begin (if (file-exists? w1098@fasl-file) (delete-file w1098@fasl-file) (void)) ((call/cc (lambda (w1102@w1100) (lambda () (with-exception-handler (lambda (w1104@c) ((call/cc (lambda (w1106@w1101) (w1102@w1100 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " w1080@filename) (if (file-exists? w1098@fasl-file) (delete-file w1098@fasl-file) (void)) '#f) (w1106@w1101 (lambda () (raise-continuable w1104@c)))))))))) (lambda () (begin (w939@fasl-save w1098@fasl-file w1081@obj) (display '"OK\n")))))))))) (w937@scm->fasl w1080@filename))))) (set! w945@load-serialized-library (lambda (w1108@filename w1109@obj) ((lambda (w1112@fasl-file) (if (and (file-exists? w1112@fasl-file) ((symbol-value 'file-newer?) w1112@fasl-file w1108@filename)) ((lambda (w1114@expanded2core) ((lambda (w1116@eval-compiled-core) ((lambda (w1118@code) ((lambda (w1120@pivot) ((lambda (w1122@visit) ((lambda (w1124@visit-proc) ((lambda () (begin (set-car! w1120@pivot w1124@visit-proc) ((lambda (w1126@pivot) ((lambda (w1128@invoke) ((lambda () (begin (set-car! w1126@pivot (lambda () (w1116@eval-compiled-core w1128@invoke))) (apply w1109@obj w1118@code))))) (car w1126@pivot))) (cdr w1120@pivot)) '#t)))) (lambda () (w1116@eval-compiled-core w1122@visit)))) (car w1120@pivot))) (cddddr (cddddr w1118@code)))) (w941@fasl-load w1112@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (w937@scm->fasl w1108@filename)))) (set! w947@make-record-printer (lambda (w1130@name w1131@printer) (lambda w1134@x (begin (display '"record printer") (for-each display w1134@x))))) (set! w949@compile-core (lambda w1136@x (apply error 'comile-core '"not implementated" w1136@x))) (set! w951@read-library-source-file (lambda (w1138@file-name) (with-input-from-file w1138@file-name w927@read-annotated))) (set! w953@make-parameter (lambda w1154 ((lambda (w1155) (if (= w1155 '1) (apply (lambda (w1140@x) (w953@make-parameter w1140@x (lambda (w1142@x) w1142@x))) w1154) (if (= w1155 '2) (apply (lambda (w1144@x w1145@fender) ((lambda (w1148@x) (lambda w1152 ((lambda (w1153) (if (= w1153 '0) (apply (lambda () w1148@x) w1152) (if (= w1153 '1) (apply (lambda (w1150@v) (set! w1148@x (w1145@fender w1150@v))) w1152) (error 'apply '"invalid arg count")))) (length w1152)))) (w1145@fender w1144@x))) w1154) (error 'apply '"invalid arg count")))) (length w1154)))) (set! w1053@file-options-spec (lambda (w1156@x) w1156@x)) (begin (set! w1176@w1053@file-options-spec w1053@file-options-spec) (set! w1175@w953@make-parameter w953@make-parameter) (set! w1174@w951@read-library-source-file w951@read-library-source-file) (set! w1173@w949@compile-core w949@compile-core) (set! w1172@w947@make-record-printer w947@make-record-printer) (set! w1171@w945@load-serialized-library w945@load-serialized-library) (set! w1170@w943@serialize-library w943@serialize-library) (set! w1169@w941@fasl-load w941@fasl-load) (set! w1168@w939@fasl-save w939@fasl-save) (set! w1167@w937@scm->fasl w937@scm->fasl) (set! w1166@w935@annotation-expression w935@annotation-expression) (set! w1165@w933@annotation-source w933@annotation-source) (set! w1164@w931@annotation? w931@annotation?) (set! w1163@w929@annotation-stripped w929@annotation-stripped) (set! w1162@w927@read-annotated w927@read-annotated) (set! w1161@w925@gensym w925@gensym) (set! w1160@w923@gen-sym-counter w923@gen-sym-counter) (set! w1159@w921@gen-sym-prefix w921@gen-sym-prefix) (set! w1158@w919@make-gensym-counter w919@make-gensym-counter)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (w1181@current-primitive-locations w1183@mutable? w1185@rewriter w1187@expanded->core w1189@compile-core-expr w1191@pretty-print w1193@compile-core-expr-to-port) (begin (set! w1181@current-primitive-locations (w1175@w953@make-parameter (lambda (w1194@x) '#f) (lambda (w1196@p) w1196@p))) (set! w1183@mutable? (lambda (w1198@x) (or (pair? w1198@x) (vector? w1198@x) (hashtable? w1198@x)))) (set! w1185@rewriter (lambda (w1200@quote-hack?) ((lambda (w1203@f) (begin (set! w1203@f (lambda (w1204@x) (if (pair? w1204@x) ((lambda (w1206@t) (if (memv w1206@t '(quote)) (if (and w1200@quote-hack? (w1183@mutable? (cadr w1204@x))) ((lambda (w1208@g) (begin (set-symbol-value! w1208@g (cadr w1204@x)) w1208@g)) (w1161@w925@gensym)) w1204@x) (if (memv w1206@t '(case-lambda)) (cons 'case-lambda (map (lambda (w1210@x) (cons (car w1210@x) (map w1203@f (cdr w1210@x)))) (cdr w1204@x))) (if (memv w1206@t '(lambda)) (cons* 'lambda (cadr w1204@x) (map w1203@f (cddr w1204@x))) (if (memv w1206@t '(letrec)) ((lambda (w1212@bindings w1213@body*) ((lambda (w1216@lhs* w1217@rhs*) (cons* 'letrec (map list w1216@lhs* (map w1203@f w1217@rhs*)) (map w1203@f w1213@body*))) (map car w1212@bindings) (map cadr w1212@bindings))) (cadr w1204@x) (cddr w1204@x)) (if (memv w1206@t '(letrec*)) ((lambda (w1220@bindings w1221@body*) ((lambda (w1224@lhs* w1225@rhs*) (cons* 'letrec* (map list w1224@lhs* (map w1203@f w1225@rhs*)) (map w1203@f w1221@body*))) (map car w1220@bindings) (map cadr w1220@bindings))) (cadr w1204@x) (cddr w1204@x)) (if (memv w1206@t '(library-letrec*)) ((lambda (w1228@name w1229@x) ((lambda (w1232@bindings w1233@body*) ((lambda (w1236@lhs* w1237@lhs** w1238@rhs*) (cons* 'library-letrec* w1228@name (map list w1236@lhs* w1237@lhs** (map w1203@f w1238@rhs*)) (map w1203@f w1233@body*))) (map car w1232@bindings) (map cadr w1232@bindings) (map caddr w1232@bindings))) (cadr w1229@x) (cddr w1229@x))) (cadr w1204@x) (cdr w1204@x)) (if (memv w1206@t '(begin)) (cons 'begin (map w1203@f (cdr w1204@x))) (if (memv w1206@t '(set!)) (list 'set! (cadr w1204@x) (w1203@f (caddr w1204@x))) (if (memv w1206@t '(primitive)) ((lambda (w1242@op) ((lambda (w1244@t) (if w1244@t ((lambda (w1246@loc) w1246@loc) w1244@t) w1242@op)) ((w1181@current-primitive-locations) w1242@op))) (cadr w1204@x)) (if (memv w1206@t '(define)) w1204@x (if (list? w1204@x) (map w1203@f w1204@x) (error 'rewrite '"invalid form ~s ~s" w1204@x (list? w1204@x)))))))))))))) (car w1204@x)) w1204@x))) w1203@f)) '#f))) (set! w1187@expanded->core (lambda (w1248@x) ((w1185@rewriter '#f) w1248@x))) (set! w1189@compile-core-expr (lambda (w1250@x) ((w1185@rewriter '#f) w1250@x))) (set! w1191@pretty-print write) (set! w1193@compile-core-expr-to-port (lambda (w1252@x w1253@p) (w1191@pretty-print ((w1185@rewriter '#f) w1252@x) w1253@p))) (begin (set! w1262@w1193@compile-core-expr-to-port w1193@compile-core-expr-to-port) (set! w1261@w1191@pretty-print w1191@pretty-print) (set! w1260@w1189@compile-core-expr w1189@compile-core-expr) (set! w1259@w1187@expanded->core w1187@expanded->core) (set! w1258@w1185@rewriter w1185@rewriter) (set! w1257@w1183@mutable? w1183@mutable?) (set! w1256@w1181@current-primitive-locations w1181@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (w1341@make-collection w1343@current-library-collection w1349@w1344 w1351@w1346 w1353@w1345 w1356@library? w1358@make-library w1360@library-id w1362@library-name w1364@library-version w1366@library-imp* w1368@library-vis* w1370@library-inv* w1372@library-subst w1374@library-env w1376@library-visit-state w1378@library-invoke-state w1380@library-visit-code w1382@library-invoke-code w1384@library-visible? w1386@library-source-file-name w1388@set-library-id! w1390@set-library-name! w1392@set-library-version! w1394@set-library-imp*! w1396@set-library-vis*! w1398@set-library-inv*! w1400@set-library-subst! w1402@set-library-env! w1404@set-library-visit-state! w1406@set-library-invoke-state! w1408@set-library-visit-code! w1410@set-library-invoke-code! w1412@set-library-visible?! w1414@set-library-source-file-name! w1416@rp w1418@find-dependencies w1420@find-library-by w1422@library-path w1424@library-extensions w1426@library-name->file-name w1428@file-locator w1430@serialize-all w1432@current-precompiled-library-loader w1434@try-load-from-file w1436@library-loader w1438@current-library-expander w1440@external-pending-libraries w1442@find-external-library w1444@find-library-by-name w1446@library-exists? w1448@find-library-by-spec/die w1450@label->binding-table w1452@install-library-record w1454@install-library w1456@imported-label->binding w1458@invoke-library w1460@visit-library w1462@invoke-library-by-spec w1464@installed-libraries w1466@library-spec) (begin (set! w1341@make-collection (lambda () ((lambda (w1467@set) ((lambda (w1470@set-cons) (begin (set! w1470@set-cons (lambda (w1475@x w1476@ls) (if (memq w1475@x w1476@ls) w1476@ls (cons w1475@x w1476@ls)))) (lambda w1473 ((lambda (w1474) (if (= w1474 '0) (apply (lambda () w1467@set) w1473) (if (= w1474 '1) (apply (lambda (w1471@x) (set! w1467@set (w1470@set-cons w1471@x w1467@set))) w1473) (error 'apply '"invalid arg count")))) (length w1473))))) '#f)) '()))) (set! w1343@current-library-collection (w1175@w953@make-parameter (w1341@make-collection) (lambda (w1479@x) (begin (if (not (procedure? w1479@x)) (assertion-violation 'current-library-collection '"not a procedure" w1479@x) (void)) w1479@x)))) (set! w1349@w1344 (make-record-type-descriptor 'library '#f 'w1347 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! w1351@w1346 '#f) (set! w1353@w1345 (make-record-constructor-descriptor w1349@w1344 '#f w1351@w1346)) (set! w1356@library? (record-predicate w1349@w1344)) (set! w1358@make-library (record-constructor w1353@w1345)) (set! w1360@library-id (record-accessor w1349@w1344 '0)) (set! w1362@library-name (record-accessor w1349@w1344 '1)) (set! w1364@library-version (record-accessor w1349@w1344 '2)) (set! w1366@library-imp* (record-accessor w1349@w1344 '3)) (set! w1368@library-vis* (record-accessor w1349@w1344 '4)) (set! w1370@library-inv* (record-accessor w1349@w1344 '5)) (set! w1372@library-subst (record-accessor w1349@w1344 '6)) (set! w1374@library-env (record-accessor w1349@w1344 '7)) (set! w1376@library-visit-state (record-accessor w1349@w1344 '8)) (set! w1378@library-invoke-state (record-accessor w1349@w1344 '9)) (set! w1380@library-visit-code (record-accessor w1349@w1344 '10)) (set! w1382@library-invoke-code (record-accessor w1349@w1344 '11)) (set! w1384@library-visible? (record-accessor w1349@w1344 '12)) (set! w1386@library-source-file-name (record-accessor w1349@w1344 '13)) (set! w1388@set-library-id! (record-mutator w1349@w1344 '0)) (set! w1390@set-library-name! (record-mutator w1349@w1344 '1)) (set! w1392@set-library-version! (record-mutator w1349@w1344 '2)) (set! w1394@set-library-imp*! (record-mutator w1349@w1344 '3)) (set! w1396@set-library-vis*! (record-mutator w1349@w1344 '4)) (set! w1398@set-library-inv*! (record-mutator w1349@w1344 '5)) (set! w1400@set-library-subst! (record-mutator w1349@w1344 '6)) (set! w1402@set-library-env! (record-mutator w1349@w1344 '7)) (set! w1404@set-library-visit-state! (record-mutator w1349@w1344 '8)) (set! w1406@set-library-invoke-state! (record-mutator w1349@w1344 '9)) (set! w1408@set-library-visit-code! (record-mutator w1349@w1344 '10)) (set! w1410@set-library-invoke-code! (record-mutator w1349@w1344 '11)) (set! w1412@set-library-visible?! (record-mutator w1349@w1344 '12)) (set! w1414@set-library-source-file-name! (record-mutator w1349@w1344 '13)) (set! w1416@rp (w1172@w947@make-record-printer 'library (lambda (w1481@x w1482@p w1483@wr) (begin (if (not (w1356@library? w1481@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (w1364@library-version w1481@x)) (w1362@library-name w1481@x) (append (w1362@library-name w1481@x) (list (w1364@library-version w1481@x))))) w1482@p))))) (set! w1418@find-dependencies (lambda (w1487@ls) (if (null? w1487@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! w1420@find-library-by (lambda (w1489@pred) ((letrec ((w1491@f (lambda (w1493@ls) (if (null? w1493@ls) '#f (if (w1489@pred (car w1493@ls)) (car w1493@ls) (w1491@f (cdr w1493@ls))))))) w1491@f) ((w1343@current-library-collection))))) (set! w1422@library-path (w1175@w953@make-parameter '(".") (lambda (w1495@x) (if (and (list? w1495@x) (for-all string? w1495@x)) (map (lambda (w1497@x) w1497@x) w1495@x) (assertion-violation 'library-path '"not a list of strings" w1495@x))))) (set! w1424@library-extensions (w1175@w953@make-parameter '(".sls" ".ss" ".scm") (lambda (w1499@x) (if (and (list? w1499@x) (for-all string? w1499@x)) (map (lambda (w1501@x) w1501@x) w1499@x) (assertion-violation 'library-extensions '"not a list of strings" w1499@x))))) (set! w1426@library-name->file-name (lambda (w1503@x) (call-with-values (lambda () (open-string-output-port)) (lambda (w1507@w1505@p w1508@w1506@extract) ((lambda (w1511@extract w1512@p) ((lambda (w1516@display-hex) (begin (set! w1516@display-hex (lambda (w1525@n) (if (<= '0 w1525@n '9) (display w1525@n w1512@p) (display (integer->char (+ (char->integer '#\a) (- w1525@n '10))) w1512@p)))) (begin ((letrec ((w1517@f (lambda (w1519@ls) (if (not (null? w1519@ls)) (begin (display '"/" w1512@p) (for-each (lambda (w1521@c) (if (or (char<=? '#\a w1521@c '#\z) (char<=? '#\A w1521@c '#\Z) (char<=? '#\0 w1521@c '#\9) (memv w1521@c '(#\- #\. #\_ #\~))) (display w1521@c w1512@p) (begin (display '"%" w1512@p) ((lambda (w1523@n) (begin (w1516@display-hex (quotient w1523@n '16)) (w1516@display-hex (remainder w1523@n '16)))) (char->integer w1521@c))))) (string->list (symbol->string (car w1519@ls)))) (w1517@f (cdr w1519@ls))) (void))))) w1517@f) w1503@x) (w1511@extract)))) '#f)) w1508@w1506@extract w1507@w1505@p))))) (set! w1428@file-locator (w1175@w953@make-parameter (lambda (w1527@x) ((lambda (w1529@str) ((letrec ((w1531@f (lambda (w1533@ls w1534@exts w1535@failed-list) (if (null? w1533@ls) ((lambda () ((lambda (w1547@w1542 w1549@w1544 w1551@w1543 w1554@w1541 w1556@make-library-resolution-condition w1558@w1539 w1560@w1540 w1562@library-resolution-condition? w1564@condition-library w1566@condition-files) (begin (set! w1547@w1542 (make-record-type-descriptor '&library-resolution w10083@w9398@&condition-rtd 'w1545 '#f '#f '#((immutable library) (immutable files)))) (set! w1549@w1544 '#f) (set! w1551@w1543 (make-record-constructor-descriptor w1547@w1542 w10084@w9400@&condition-rcd w1549@w1544)) (set! w1554@w1541 (record-predicate w1547@w1542)) (set! w1556@make-library-resolution-condition (record-constructor w1551@w1543)) (set! w1558@w1539 (record-accessor w1547@w1542 '0)) (set! w1560@w1540 (record-accessor w1547@w1542 '1)) (set! w1562@library-resolution-condition? (condition-predicate w1547@w1542)) (set! w1564@condition-library (condition-accessor w1547@w1542 w1558@w1539)) (set! w1566@condition-files (condition-accessor w1547@w1542 w1560@w1540)) (raise (condition (w10115@w9548@make-error) (w10149@w9638@make-who-condition 'expander) (w10089@w9481@make-message-condition '"cannot locate library in library-path") (w1556@make-library-resolution-condition w1527@x (reverse w1535@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? w1534@exts) (w1531@f (cdr w1533@ls) (w1424@library-extensions) w1535@failed-list) ((lambda (w1567@name) (if (file-exists? w1567@name) w1567@name (w1531@f w1533@ls (cdr w1534@exts) (cons w1567@name w1535@failed-list)))) (string-append (car w1533@ls) w1529@str (car w1534@exts)))))))) w1531@f) (w1422@library-path) (w1424@library-extensions) '())) (w1426@library-name->file-name w1527@x))) (lambda (w1569@f) (if (procedure? w1569@f) w1569@f (assertion-violation 'file-locator '"not a procedure" w1569@f))))) (set! w1430@serialize-all (lambda (w1571@serialize w1572@compile) ((lambda (w1576@library-desc) (begin (set! w1576@library-desc (lambda (w1579@x) (list (w1360@library-id w1579@x) (w1362@library-name w1579@x)))) (for-each (lambda (w1577@x) (if (w1386@library-source-file-name w1577@x) (w1571@serialize (w1386@library-source-file-name w1577@x) (list (w1360@library-id w1577@x) (w1362@library-name w1577@x) (w1364@library-version w1577@x) (map w1576@library-desc (w1366@library-imp* w1577@x)) (map w1576@library-desc (w1368@library-vis* w1577@x)) (map w1576@library-desc (w1370@library-inv* w1577@x)) (w1372@library-subst w1577@x) (w1374@library-env w1577@x) (w1572@compile (w1380@library-visit-code w1577@x)) (w1572@compile (w1382@library-invoke-code w1577@x)) (w1384@library-visible? w1577@x))) (void))) ((w1343@current-library-collection))))) '#f))) (set! w1432@current-precompiled-library-loader (w1175@w953@make-parameter (lambda (w1581@filename w1582@sk) '#f))) (set! w1434@try-load-from-file (lambda (w1585@filename) ((w1432@current-precompiled-library-loader) w1585@filename (lambda w1623 ((lambda (w1624) (if (= w1624 '11) (apply (lambda (w1587@id w1588@name w1589@ver w1590@imp* w1591@vis* w1592@inv* w1593@exp-subst w1594@exp-env w1595@visit-proc w1596@invoke-proc w1597@visible?) ((letrec ((w1609@f (lambda (w1611@deps) (if (null? w1611@deps) (begin (w1454@install-library w1587@id w1588@name w1589@ver w1590@imp* w1591@vis* w1592@inv* w1593@exp-subst w1594@exp-env w1595@visit-proc w1596@invoke-proc '#f '#f w1597@visible? '#f) '#t) ((lambda (w1613@d) ((lambda (w1615@label w1616@dname) ((lambda (w1619@l) (if (and (w1356@library? w1619@l) (eq? w1615@label (w1360@library-id w1619@l))) (w1609@f (cdr w1611@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" w1588@name w1616@dname w1585@filename w1619@l w1615@label (w1360@library-id w1619@l)) '#f))) (w1444@find-library-by-name w1616@dname))) (car w1613@d) (cadr w1613@d))) (car w1611@deps)))))) w1609@f) (append w1590@imp* w1591@vis* w1592@inv*))) w1623) (if (>= w1624 '0) (apply (lambda w1621@others '#f) w1623) (error 'apply '"invalid arg count")))) (length w1623)))))) (set! w1436@library-loader (w1175@w953@make-parameter (lambda (w1625@x) ((lambda (w1627@file-name) (if (not w1627@file-name) (assertion-violation '#f '"cannot file library" w1625@x) (or (w1434@try-load-from-file w1627@file-name) ((w1438@current-library-expander) (w1174@w951@read-library-source-file w1627@file-name) w1627@file-name (lambda (w1629@name) (if (not (fast-equal? w1629@name w1625@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (w1633@w1631@p w1634@w1632@e) ((lambda (w1637@e w1638@p) (begin (display '"expected to find library " w1638@p) (write w1625@x w1638@p) (display '" in file " w1638@p) (display w1627@file-name w1638@p) (display '", found " w1638@p) (write w1629@name w1638@p) (display '" instead" w1638@p) (w1637@e))) w1634@w1632@e w1633@w1631@p)))) (void))))))) ((w1428@file-locator) w1625@x))) (lambda (w1641@f) (if (procedure? w1641@f) w1641@f (assertion-violation 'library-locator '"not a procedure" w1641@f))))) (set! w1438@current-library-expander (w1175@w953@make-parameter (lambda (w1643@x) (assertion-violation 'library-expander '"not initialized")) (lambda (w1645@f) (if (procedure? w1645@f) w1645@f (assertion-violation 'library-expander '"not a procedure" w1645@f))))) (set! w1440@external-pending-libraries (w1175@w953@make-parameter '())) (set! w1442@find-external-library (lambda (w1647@name) (begin (if (member w1647@name (w1440@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" w1647@name) (void)) ((lambda (w1651@w1649@external-pending-libraries w1652@w1650@external-pending-libraries) ((lambda (w1655@swap) (dynamic-wind w1655@swap (lambda () (begin ((w1436@library-loader) w1647@name) (or (w1420@find-library-by (lambda (w1657@x) (fast-equal? (w1362@library-name w1657@x) w1647@name))) (assertion-violation '#f '"handling external library did not yield the correct library" w1647@name)))) w1655@swap)) (lambda () ((lambda (w1659@t) (begin (w1651@w1649@external-pending-libraries w1652@w1650@external-pending-libraries) (set! w1652@w1650@external-pending-libraries w1659@t))) (w1651@w1649@external-pending-libraries))))) w1440@external-pending-libraries (cons w1647@name (w1440@external-pending-libraries)))))) (set! w1444@find-library-by-name (lambda (w1661@name) (or (w1420@find-library-by (lambda (w1663@x) (fast-equal? (w1362@library-name w1663@x) w1661@name))) (w1442@find-external-library w1661@name)))) (set! w1446@library-exists? (lambda (w1665@name) (and (w1420@find-library-by (lambda (w1667@x) (fast-equal? (w1362@library-name w1667@x) w1665@name))) '#t))) (set! w1448@find-library-by-spec/die (lambda (w1669@spec) ((lambda (w1671@id) (or (w1420@find-library-by (lambda (w1673@x) (eq? w1671@id (w1360@library-id w1673@x)))) (assertion-violation '#f '"cannot find library with required spec" w1669@spec))) (car w1669@spec)))) (set! w1450@label->binding-table (make-eq-hashtable)) (set! w1452@install-library-record (lambda (w1675@lib) (begin ((lambda (w1677@exp-env) (for-each (lambda (w1679@x) ((lambda (w1681@label w1682@binding) ((lambda (w1685@binding) (begin (if (hashtable-ref w1450@label->binding-table w1681@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" w1681@label (hashtable-ref w1450@label->binding-table w1681@label '#f) w1685@binding) (exit)) (void)) (hashtable-set! w1450@label->binding-table w1681@label w1685@binding))) ((lambda (w1687@t) (if (memv w1687@t '(global)) (cons 'global (cons w1675@lib (cdr w1682@binding))) (if (memv w1687@t '(global-macro)) (cons 'global-macro (cons w1675@lib (cdr w1682@binding))) (if (memv w1687@t '(global-macro!)) (cons 'global-macro! (cons w1675@lib (cdr w1682@binding))) w1682@binding)))) (car w1682@binding)))) (car w1679@x) (cdr w1679@x))) w1677@exp-env)) (w1374@library-env w1675@lib)) ((w1343@current-library-collection) w1675@lib)))) (set! w1454@install-library (lambda (w1689@id w1690@name w1691@ver w1692@imp* w1693@vis* w1694@inv* w1695@exp-subst w1696@exp-env w1697@visit-proc w1698@invoke-proc w1699@visit-code w1700@invoke-code w1701@visible? w1702@source-file-name) ((lambda (w1717@imp-lib* w1718@vis-lib* w1719@inv-lib*) (begin (if (not (and (symbol? w1689@id) (list? w1690@name) (list? w1691@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" w1689@id w1690@name w1691@ver) (void)) (if (w1446@library-exists? w1690@name) (assertion-violation 'install-library '"library is already installed" w1690@name) (void)) ((lambda (w1723@lib) (w1452@install-library-record w1723@lib)) (w1358@make-library w1689@id w1690@name w1691@ver w1717@imp-lib* w1718@vis-lib* w1719@inv-lib* w1695@exp-subst w1696@exp-env w1697@visit-proc w1698@invoke-proc w1699@visit-code w1700@invoke-code w1701@visible? w1702@source-file-name)))) (map w1448@find-library-by-spec/die w1692@imp*) (map w1448@find-library-by-spec/die w1693@vis*) (map w1448@find-library-by-spec/die w1694@inv*)))) (set! w1456@imported-label->binding (lambda (w1725@lab) (hashtable-ref w1450@label->binding-table w1725@lab '#f))) (set! w1458@invoke-library (lambda (w1727@lib) ((lambda (w1729@invoke) (if (procedure? w1729@invoke) (begin (w1406@set-library-invoke-state! w1727@lib (lambda () (assertion-violation 'invoke '"circularity detected" w1727@lib))) (for-each w1458@invoke-library (w1370@library-inv* w1727@lib)) (w1406@set-library-invoke-state! w1727@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" w1727@lib))) (w1729@invoke) (w1406@set-library-invoke-state! w1727@lib '#t)) (void))) (w1378@library-invoke-state w1727@lib)))) (set! w1460@visit-library (lambda (w1731@lib) ((lambda (w1733@visit) (if (procedure? w1733@visit) (begin (w1404@set-library-visit-state! w1731@lib (lambda () (assertion-violation 'visit '"circularity detected" w1731@lib))) (for-each w1458@invoke-library (w1368@library-vis* w1731@lib)) (w1404@set-library-visit-state! w1731@lib (lambda () (assertion-violation 'invoke '"first visit did not return" w1731@lib))) (w1733@visit) (w1404@set-library-visit-state! w1731@lib '#t)) (void))) (w1376@library-visit-state w1731@lib)))) (set! w1462@invoke-library-by-spec (lambda (w1735@spec) (w1458@invoke-library (w1448@find-library-by-spec/die w1735@spec)))) (set! w1464@installed-libraries (lambda w1743 ((lambda (w1744) (if (= w1744 '1) (apply (lambda (w1737@all?) ((letrec ((w1739@f (lambda (w1741@ls) (if (null? w1741@ls) '() (if (or w1737@all? (w1384@library-visible? (car w1741@ls))) (cons (car w1741@ls) (w1739@f (cdr w1741@ls))) (w1739@f (cdr w1741@ls))))))) w1739@f) ((w1343@current-library-collection)))) w1743) (if (= w1744 '0) (apply (lambda () (w1464@installed-libraries '#f)) w1743) (error 'apply '"invalid arg count")))) (length w1743)))) (set! w1466@library-spec (lambda (w1745@x) (begin (if (not (w1356@library? w1745@x)) (assertion-violation 'library-spec '"not a library" w1745@x) (void)) (list (w1360@library-id w1745@x) (w1362@library-name w1745@x) (w1364@library-version w1745@x))))) (begin (set! w1807@w1466@library-spec w1466@library-spec) (set! w1806@w1464@installed-libraries w1464@installed-libraries) (set! w1805@w1462@invoke-library-by-spec w1462@invoke-library-by-spec) (set! w1804@w1460@visit-library w1460@visit-library) (set! w1803@w1458@invoke-library w1458@invoke-library) (set! w1802@w1456@imported-label->binding w1456@imported-label->binding) (set! w1801@w1454@install-library w1454@install-library) (set! w1800@w1452@install-library-record w1452@install-library-record) (set! w1799@w1450@label->binding-table w1450@label->binding-table) (set! w1798@w1448@find-library-by-spec/die w1448@find-library-by-spec/die) (set! w1797@w1446@library-exists? w1446@library-exists?) (set! w1796@w1444@find-library-by-name w1444@find-library-by-name) (set! w1795@w1442@find-external-library w1442@find-external-library) (set! w1794@w1440@external-pending-libraries w1440@external-pending-libraries) (set! w1793@w1438@current-library-expander w1438@current-library-expander) (set! w1792@w1436@library-loader w1436@library-loader) (set! w1791@w1434@try-load-from-file w1434@try-load-from-file) (set! w1790@w1432@current-precompiled-library-loader w1432@current-precompiled-library-loader) (set! w1789@w1430@serialize-all w1430@serialize-all) (set! w1788@w1428@file-locator w1428@file-locator) (set! w1787@w1426@library-name->file-name w1426@library-name->file-name) (set! w1786@w1424@library-extensions w1424@library-extensions) (set! w1785@w1422@library-path w1422@library-path) (set! w1784@w1420@find-library-by w1420@find-library-by) (set! w1783@w1418@find-dependencies w1418@find-dependencies) (set! w1782@w1416@rp w1416@rp) (set! w1781@w1414@set-library-source-file-name! w1414@set-library-source-file-name!) (set! w1780@w1412@set-library-visible?! w1412@set-library-visible?!) (set! w1779@w1410@set-library-invoke-code! w1410@set-library-invoke-code!) (set! w1778@w1408@set-library-visit-code! w1408@set-library-visit-code!) (set! w1777@w1406@set-library-invoke-state! w1406@set-library-invoke-state!) (set! w1776@w1404@set-library-visit-state! w1404@set-library-visit-state!) (set! w1775@w1402@set-library-env! w1402@set-library-env!) (set! w1774@w1400@set-library-subst! w1400@set-library-subst!) (set! w1773@w1398@set-library-inv*! w1398@set-library-inv*!) (set! w1772@w1396@set-library-vis*! w1396@set-library-vis*!) (set! w1771@w1394@set-library-imp*! w1394@set-library-imp*!) (set! w1770@w1392@set-library-version! w1392@set-library-version!) (set! w1769@w1390@set-library-name! w1390@set-library-name!) (set! w1768@w1388@set-library-id! w1388@set-library-id!) (set! w1767@w1386@library-source-file-name w1386@library-source-file-name) (set! w1766@w1384@library-visible? w1384@library-visible?) (set! w1765@w1382@library-invoke-code w1382@library-invoke-code) (set! w1764@w1380@library-visit-code w1380@library-visit-code) (set! w1763@w1378@library-invoke-state w1378@library-invoke-state) (set! w1762@w1376@library-visit-state w1376@library-visit-state) (set! w1761@w1374@library-env w1374@library-env) (set! w1760@w1372@library-subst w1372@library-subst) (set! w1759@w1370@library-inv* w1370@library-inv*) (set! w1758@w1368@library-vis* w1368@library-vis*) (set! w1757@w1366@library-imp* w1366@library-imp*) (set! w1756@w1364@library-version w1364@library-version) (set! w1755@w1362@library-name w1362@library-name) (set! w1754@w1360@library-id w1360@library-id) (set! w1753@w1358@make-library w1358@make-library) (set! w1752@w1356@library? w1356@library?) (set! w1751@w1353@w1345 w1353@w1345) (set! w1750@w1351@w1346 w1351@w1346) (set! w1749@w1349@w1344 w1349@w1344) (set! w1748@w1343@current-library-collection w1343@current-library-collection) (set! w1747@w1341@make-collection w1341@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (w1810@build-global-define w1923@build-lambda w1925@build-case-lambda w1927@build-let w1973@build-sequence w1975@build-void w1977@build-letrec w1979@build-letrec* w1981@build-library-letrec* w1983@build-receive) (begin (set! w1810@build-global-define (lambda (w1984@x) (w1975@build-void))) (set! w1923@build-lambda (lambda (w1986@ae w1987@vars w1988@exp) (list 'lambda w1987@vars w1988@exp))) (set! w1925@build-case-lambda (lambda (w1992@ae w1993@vars* w1994@exp*) ((lambda (w1999@build-error w2001@build-pred w2003@build-apply w2005@expand-case-lambda) (begin (set! w1999@build-error (lambda (w2052@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! w2001@build-pred (lambda (w2030@ae w2031@n w2032@vars) (call-with-values (lambda () ((letrec ((w2038@f (lambda (w2040@vars w2041@count) (if (pair? w2040@vars) (w2038@f (cdr w2040@vars) (+ w2041@count '1)) (if (null? w2040@vars) (values w2041@count '=) (values w2041@count '>=)))))) w2038@f) w2032@vars '0)) (lambda (w2044@w2036@count w2045@w2037@pred) ((lambda (w2048@pred w2049@count) (list (list 'primitive w2048@pred) w2031@n (list 'quote w2049@count))) w2045@w2037@pred w2044@w2036@count))))) (set! w2003@build-apply (lambda (w2022@ae w2023@g w2024@vars w2025@exp) (list '(primitive apply) (w1923@build-lambda w2022@ae w2024@vars w2025@exp) w2023@g))) (set! w2005@expand-case-lambda (lambda (w2006@ae w2007@vars w2008@exp*) ((lambda (w2012@g w2013@n) (list 'lambda w2012@g (w1927@build-let w2006@ae (list w2013@n) (list (list '(primitive length) w2012@g)) ((letrec ((w2016@f (lambda (w2018@vars* w2019@exp*) (if (null? w2018@vars*) (w1999@build-error w2006@ae) (list 'if (w2001@build-pred w2006@ae w2013@n (car w2018@vars*)) (w2003@build-apply w2006@ae w2012@g (car w2018@vars*) (car w2019@exp*)) (w2016@f (cdr w2018@vars*) (cdr w2019@exp*))))))) w2016@f) w1993@vars* w2008@exp*)))) (w1161@w925@gensym) (w1161@w925@gensym)))) (if (= (length w1994@exp*) '1) (w1923@build-lambda w1992@ae (car w1993@vars*) (car w1994@exp*)) (w2005@expand-case-lambda w1992@ae w1993@vars* w1994@exp*)))) '#f '#f '#f '#f))) (set! w1927@build-let (lambda (w2054@ae w2055@lhs* w2056@rhs* w2057@body) (cons (w1923@build-lambda w2054@ae w2055@lhs* w2057@body) w2056@rhs*))) (set! w1973@build-sequence (lambda (w2062@ae w2063@exps) ((letrec ((w2066@loop (lambda (w2068@exps) (if (null? (cdr w2068@exps)) (car w2068@exps) (if (equal? (car w2068@exps) (w1975@build-void)) (w2066@loop (cdr w2068@exps)) (cons 'begin w2068@exps)))))) w2066@loop) w2063@exps))) (set! w1975@build-void (lambda () '((primitive void)))) (set! w1977@build-letrec (lambda (w2070@ae w2071@vars w2072@val-exps w2073@body-exp) (if (null? w2071@vars) w2073@body-exp (list 'letrec (map list w2071@vars w2072@val-exps) w2073@body-exp)))) (set! w1979@build-letrec* (lambda (w2078@ae w2079@vars w2080@val-exps w2081@body-exp) (if (null? w2079@vars) w2081@body-exp (w1927@build-let w2078@ae w2079@vars (map (lambda (w2086@x) (list 'quote '#f)) w2079@vars) (w1973@build-sequence w2078@ae (append (map (lambda (w2088@lhs w2089@rhs) (list 'set! w2088@lhs w2089@rhs)) w2079@vars w2080@val-exps) (list w2081@body-exp))))))) (set! w1981@build-library-letrec* (lambda (w2092@ae w2093@name w2094@vars w2095@locs w2096@val-exps w2097@body-exp) (list 'library-letrec* w2093@name (map list w2094@vars w2095@locs w2096@val-exps) w2097@body-exp))) (set! w1983@build-receive (lambda (w2104@ae w2105@vars w2106@producer w2107@body*) (begin (display '"************** in ") (cons 'receive (cons w2105@vars (cons w2106@producer w2107@body*)))))) (begin (set! w2121@w1983@build-receive w1983@build-receive) (set! w2120@w1981@build-library-letrec* w1981@build-library-letrec*) (set! w2119@w1979@build-letrec* w1979@build-letrec*) (set! w2118@w1977@build-letrec w1977@build-letrec) (set! w2117@w1975@build-void w1975@build-void) (set! w2116@w1973@build-sequence w1973@build-sequence) (set! w2115@w1927@build-let w1927@build-let) (set! w2114@w1925@build-case-lambda w1925@build-case-lambda) (set! w2113@w1923@build-lambda w1923@build-lambda) (set! w2112@w1810@build-global-define w1810@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (w2136@file-options-macro w2138@set-cons w2140@set-union w2145@top-mark* w2147@top-marked? w2149@gen-lexical w2151@gen-global w2153@gen-label w2155@gen-top-level-label w2157@gen-define-label+loc w2159@gen-define-label w2165@w2160 w2167@w2162 w2169@w2161 w2172@rib? w2174@make-rib w2176@rib-sym* w2178@rib-mark** w2180@rib-label* w2182@rib-sealed/freq w2184@rib-cache w2186@set-rib-sym*! w2188@set-rib-mark**! w2190@set-rib-label*! w2192@set-rib-sealed/freq! w2194@set-rib-cache! w2196@make-empty-rib w2198@extend-rib! w2200@extend-rib/nc! w2202@make-rib-map w2204@seal-rib! w2206@unseal-rib! w2208@make-full-rib w2214@w2209 w2216@w2211 w2218@w2210 w2221@stx? w2223@make-stx w2225@stx-expr w2227@stx-mark* w2229@stx-subst* w2231@stx-ae* w2233@set-stx-expr! w2235@set-stx-mark*! w2237@set-stx-subst*! w2239@set-stx-ae*! w2241@rp w2243@datum->stx w2245@gen-mark w2247@anti-mark w2249@anti-mark? w2251@join-wraps w2253@mkstx w2255@add-mark w2257@add-subst w2259@syntax-kind? w2261@syntax-vector->list w2263@syntax-pair? w2265@syntax-vector? w2267@syntax-null? w2269@syntax-list? w2271@syntax-car w2273@syntax-cdr w2275@syntax->list w2277@id? w2279@id->sym w2281@same-marks? w2283@bound-id=? w2285@free-id=? w2287@valid-bound-ids? w2289@distinct-bound-ids? w2291@bound-id-member? w2293@self-evaluating? w2295@strip-annotations w2297@strip w2299@stx->datum w2301@same-marks*? w2303@id->label w2305@id->real-label w2307@label->binding w2309@make-binding w2311@binding-type w2313@binding-value w2315@raise-unbound-error w2317@syntax-type w2331@sanitize-binding w2333@make-variable-transformer w2335@variable-transformer? w2337@variable-transformer-procedure w2339@make-eval-transformer w2650@parse-define w2652@parse-define-syntax w2654@scheme-stx-hashtable w2656@scheme-stx w2658@lexical-var w2660@lexical-mutable? w2662@set-lexical-mutable! w2664@add-lexical w2666@add-lexicals w2668@letrec-helper w2670@letrec-transformer w2672@letrec*-transformer w2674@fluid-let-syntax-transformer w2676@type-descriptor-transformer w2678@record-type-descriptor-transformer w2680@record-constructor-descriptor-transformer w2682@when-macro w2684@unless-macro w2686@if-transformer w2688@and-transformer w2690@or-transformer w2692@case-macro w2694@quote-transformer w2696@case-lambda-transformer w2698@lambda-transformer w2700@bless w2702@with-syntax-macro w2704@invalid-fmls-error w2706@let-macro w2708@let-values-macro w2710@let*-values-macro w2712@trace-lambda-macro w2714@trace-define-macro w2716@trace-define-syntax-macro w2718@trace-let/rec-syntax w2720@trace-let-syntax-macro w2722@trace-letrec-syntax-macro w2724@guard-macro w2726@define-enumeration-macro w2728@time-macro w2730@delay-macro w2732@assert-macro w2734@endianness-macro w2736@identifier-syntax-macro w2738@do-macro w2740@let*-macro w2742@or-macro w2744@and-macro w2746@cond-macro w2748@do-include w2750@include-macro w2752@include-into-macro w2754@syntax-rules-macro w2756@quasiquote-macro w2758@quasisyntax-macro w2760@define-struct-macro w2762@define-record-type-macro w2764@define-condition-type-macro w2766@incorrect-usage-macro w2768@parameterize-macro w2770@foreign-call-transformer w2772@convert-pattern w2774@syntax-dispatch w2776@ellipsis? w2778@underscore? w2780@verify-literals w2782@syntax-case-transformer w2784@ellipsis-map w2786@syntax-transformer w2788@core-macro-transformer w2790@symbol-macro w2792@macro-transformer w2794@local-macro-transformer w2796@do-macro-call w2798@chi-macro w2800@chi-local-macro w2802@chi-global-macro w2804@chi-expr* w2806@chi-application w2808@chi-expr w2810@chi-set! w2812@verify-formals w2814@chi-lambda-clause w2816@chi-lambda-clause* w2818@chi-defun w2820@chi-rhs w2822@expand-interaction-rhs*/init* w2824@chi-rhs* w2826@find-bound=? w2828@find-dups w2830@chi-internal w2832@parse-module w2838@w2833 w2840@w2835 w2842@w2834 w2845@module-interface? w2847@make-module-interface w2849@module-interface-first-mark w2851@module-interface-exp-id-vec w2853@module-interface-exp-lab-vec w2855@set-module-interface-first-mark! w2857@set-module-interface-exp-id-vec! w2859@set-module-interface-exp-lab-vec! w2861@module-interface-exp-id* w2863@chi-internal-module w2865@chi-body* w2867@expand-transformer w2869@parse-exports w2871@parse-library-name w2873@parse-library w2875@parse-import-spec* w2877@make-top-rib w2879@make-collector w2881@inv-collector w2883@vis-collector w2885@imp-collector w2887@chi-library-internal w2889@chi-interaction-expr w2891@library-body-expander w2893@core-library-expander w2895@parse-top-level-program w2897@top-level-expander w2903@w2898 w2905@w2900 w2907@w2899 w2910@env? w2912@make-env w2914@env-names w2916@env-labels w2918@env-itc w2920@set-env-names! w2922@set-env-labels! w2924@set-env-itc! w2926@rp w2932@w2927 w2934@w2929 w2936@w2928 w2939@interaction-env? w2941@make-interaction-env w2943@interaction-env-rib w2945@interaction-env-r w2947@interaction-env-locs w2949@set-interaction-env-rib! w2951@set-interaction-env-r! w2953@set-interaction-env-locs! w2955@rp w2957@interaction-environment-symbols w2959@environment-bindings w2961@parse-binding w2963@environment? w2965@environment-symbols w2967@environment w2969@null-environment w2971@scheme-report-environment w2973@expand w2975@eval w2977@library-expander w2979@boot-library-expand w2981@rev-map-append w2983@build-exports w2985@make-export-subst w2987@make-export-env/macros w2989@generate-temporaries w2991@free-identifier=? w2993@bound-identifier=? w2995@make-source-condition w2997@extract-position-condition w2999@expression-position w3001@assertion-error w3003@syntax-error w3005@syntax-violation* w3007@syntax-violation w3009@identifier? w3011@datum->syntax w3013@syntax->datum w3015@compile-r6rs-top-level w3017@pre-compile-r6rs-top-level w3019@interaction-environment w3021@top-level-context) (begin (set! w2136@file-options-macro (lambda (w3022@x) ((lambda (w3025@valid-option?) (begin (set! w3025@valid-option? (lambda (w3034@x) (and (w2277@id? w3034@x) (memq (w2279@id->sym w3034@x) '(no-fail no-create no-truncate))))) ((lambda (w3026@t) ((lambda (w3028@ls/false) (if (and w3028@ls/false (apply (lambda (w3030@opt*) (for-all w3025@valid-option? w3030@opt*)) w3028@ls/false)) (apply (lambda (w3032@opt*) (w2700@bless (list 'make-file-options (list 'quote w3032@opt*)))) w3028@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3026@t))) (w2774@syntax-dispatch w3026@t '(_ . each-any)))) w3022@x))) '#f))) (set! w2138@set-cons (lambda (w3036@x w3037@ls) (if (memq w3036@x w3037@ls) w3037@ls (cons w3036@x w3037@ls)))) (set! w2140@set-union (lambda (w3040@ls1 w3041@ls2) (if (null? w3040@ls1) w3041@ls2 (if (memq (car w3040@ls1) w3041@ls2) (w2140@set-union (cdr w3040@ls1) w3041@ls2) (cons (car w3040@ls1) (w2140@set-union (cdr w3040@ls1) w3041@ls2)))))) (set! w2145@top-mark* '(top)) (set! w2147@top-marked? (lambda (w3044@m*) (memq 'top w3044@m*))) (set! w2149@gen-lexical (lambda (w3046@sym) (if (symbol? w3046@sym) (w1161@w925@gensym w3046@sym) (if (w2221@stx? w3046@sym) (w2149@gen-lexical (w2279@id->sym w3046@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" w3046@sym))))) (set! w2151@gen-global (lambda (w3048@x) (w2149@gen-lexical w3048@x))) (set! w2153@gen-label (lambda (w3050@_) (w1161@w925@gensym))) (set! w2155@gen-top-level-label (lambda (w3052@id w3053@rib) ((lambda (w3057@find) (begin (set! w3057@find (lambda (w3068@sym w3069@mark* w3070@sym* w3071@mark** w3072@label*) (and (pair? w3070@sym*) (if (and (eq? w3068@sym (car w3070@sym*)) (w2281@same-marks? w3069@mark* (car w3071@mark**))) (car w3072@label*) (w3057@find w3068@sym w3069@mark* (cdr w3070@sym*) (cdr w3071@mark**) (cdr w3072@label*)))))) ((lambda (w3058@sym w3059@mark*) ((lambda (w3062@sym*) ((lambda (w3064@t) (if w3064@t ((lambda (w3066@label) (if (w1802@w1456@imported-label->binding w3066@label) (w1161@w925@gensym) w3066@label)) w3064@t) (w1161@w925@gensym))) (and (memq w3058@sym (w2176@rib-sym* w3053@rib)) (w3057@find w3058@sym w3059@mark* w3062@sym* (w2178@rib-mark** w3053@rib) (w2180@rib-label* w3053@rib))))) (w2176@rib-sym* w3053@rib))) (w2279@id->sym w3052@id) (w2227@stx-mark* w3052@id)))) '#f))) (set! w2157@gen-define-label+loc (lambda (w3078@id w3079@rib) ((lambda (w3082@t) (if w3082@t ((lambda (w3084@env) ((lambda (w3086@label w3087@locs) (values w3086@label ((lambda (w3090@t) (if w3090@t (cdr w3090@t) ((lambda (w3092@loc) (begin (w2953@set-interaction-env-locs! w3084@env (cons (cons w3086@label w3092@loc) w3087@locs)) w3092@loc)) (w2149@gen-lexical w3078@id)))) (assq w3086@label w3087@locs)))) (w2155@gen-top-level-label w3078@id w3079@rib) (w2947@interaction-env-locs w3084@env))) w3082@t) (values (w1161@w925@gensym) (w2149@gen-lexical w3078@id)))) (w3021@top-level-context)))) (set! w2159@gen-define-label (lambda (w3094@id w3095@rib) (if (w3021@top-level-context) (w2155@gen-top-level-label w3094@id w3095@rib) (w1161@w925@gensym)))) (set! w2165@w2160 (make-record-type-descriptor 'rib '#f 'w2163 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! w2167@w2162 '#f) (set! w2169@w2161 (make-record-constructor-descriptor w2165@w2160 '#f w2167@w2162)) (set! w2172@rib? (record-predicate w2165@w2160)) (set! w2174@make-rib (record-constructor w2169@w2161)) (set! w2176@rib-sym* (record-accessor w2165@w2160 '0)) (set! w2178@rib-mark** (record-accessor w2165@w2160 '1)) (set! w2180@rib-label* (record-accessor w2165@w2160 '2)) (set! w2182@rib-sealed/freq (record-accessor w2165@w2160 '3)) (set! w2184@rib-cache (record-accessor w2165@w2160 '4)) (set! w2186@set-rib-sym*! (record-mutator w2165@w2160 '0)) (set! w2188@set-rib-mark**! (record-mutator w2165@w2160 '1)) (set! w2190@set-rib-label*! (record-mutator w2165@w2160 '2)) (set! w2192@set-rib-sealed/freq! (record-mutator w2165@w2160 '3)) (set! w2194@set-rib-cache! (record-mutator w2165@w2160 '4)) (set! w2196@make-empty-rib (lambda () (w2174@make-rib '() '() '() '#f '#f))) (set! w2198@extend-rib! (lambda (w3098@rib w3099@id w3100@label) ((lambda (w3105@find) (begin (set! w3105@find (lambda (w3118@sym w3119@mark* w3120@sym* w3121@mark** w3122@label*) (and (pair? w3120@sym*) (if (and (eq? w3118@sym (car w3120@sym*)) (w2281@same-marks? w3119@mark* (car w3121@mark**))) w3122@label* (w3105@find w3118@sym w3119@mark* (cdr w3120@sym*) (cdr w3121@mark**) (cdr w3122@label*)))))) (begin (if (w2182@rib-sealed/freq w3098@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" w3098@rib) (void)) ((lambda (w3106@sym w3107@mark*) ((lambda (w3110@sym*) ((lambda (w3112@t) (if w3112@t ((lambda (w3114@p) (if (not (eq? w3100@label (car w3114@p))) (if (w3021@top-level-context) (set-car! w3114@p w3100@label) (w3007@syntax-violation '#f '"multiple definitions of identifier" w3099@id)) (void))) w3112@t) (begin (if (w2184@rib-cache w3098@rib) (hashtable-update! (w2184@rib-cache w3098@rib) w3106@sym (lambda (w3116@e) (cons (cons w3107@mark* w3100@label) w3116@e)) '()) (void)) (w2186@set-rib-sym*! w3098@rib (cons w3106@sym w3110@sym*)) (w2188@set-rib-mark**! w3098@rib (cons w3107@mark* (w2178@rib-mark** w3098@rib))) (w2190@set-rib-label*! w3098@rib (cons w3100@label (w2180@rib-label* w3098@rib)))))) (and (memq w3106@sym (w2176@rib-sym* w3098@rib)) (w3105@find w3106@sym w3107@mark* w3110@sym* (w2178@rib-mark** w3098@rib) (w2180@rib-label* w3098@rib))))) (w2176@rib-sym* w3098@rib))) (w2279@id->sym w3099@id) (w2227@stx-mark* w3099@id))))) '#f))) (set! w2200@extend-rib/nc! (lambda (w3128@rib w3129@id w3130@label) ((lambda (w3134@sym w3135@mark*) ((lambda (w3138@sym*) (begin (if (w2184@rib-cache w3128@rib) (hashtable-update! (w2184@rib-cache w3128@rib) w3134@sym (lambda (w3140@e) (cons (cons w3135@mark* w3130@label) w3140@e)) '()) (void)) (w2186@set-rib-sym*! w3128@rib (cons w3134@sym w3138@sym*)) (w2188@set-rib-mark**! w3128@rib (cons w3135@mark* (w2178@rib-mark** w3128@rib))) (w2190@set-rib-label*! w3128@rib (cons w3130@label (w2180@rib-label* w3128@rib))))) (w2176@rib-sym* w3128@rib))) (w2279@id->sym w3129@id) (w2227@stx-mark* w3129@id)))) (set! w2202@make-rib-map (lambda (w3142@sym*) ((lambda (w3144@ht) ((letrec ((w3146@f (lambda (w3148@i w3149@sym*) (if (null? w3149@sym*) w3144@ht (begin (hashtable-update! w3144@ht (car w3149@sym*) (lambda (w3152@x) (cons w3148@i w3152@x)) '()) (w3146@f (+ w3148@i '1) (cdr w3149@sym*))))))) w3146@f) '0 w3142@sym*)) (make-eq-hashtable)))) (set! w2204@seal-rib! (lambda (w3154@rib) ((lambda (w3156@sym*) (if (not (null? w3156@sym*)) (begin (w2186@set-rib-sym*! w3154@rib (list->vector w3156@sym*)) (w2188@set-rib-mark**! w3154@rib (list->vector (w2178@rib-mark** w3154@rib))) (w2190@set-rib-label*! w3154@rib (list->vector (w2180@rib-label* w3154@rib))) (w2192@set-rib-sealed/freq! w3154@rib (w2202@make-rib-map w3156@sym*))) (void))) (w2176@rib-sym* w3154@rib)))) (set! w2206@unseal-rib! (lambda (w3158@rib) (if (w2182@rib-sealed/freq w3158@rib) (begin (w2192@set-rib-sealed/freq! w3158@rib '#f) (w2186@set-rib-sym*! w3158@rib (vector->list (w2176@rib-sym* w3158@rib))) (w2188@set-rib-mark**! w3158@rib (vector->list (w2178@rib-mark** w3158@rib))) (w2190@set-rib-label*! w3158@rib (vector->list (w2180@rib-label* w3158@rib)))) (void)))) (set! w2208@make-full-rib (lambda (w3160@id* w3161@label*) ((lambda (w3164@r) (begin (w2204@seal-rib! w3164@r) w3164@r)) (w2174@make-rib (map w2279@id->sym w3160@id*) (map w2227@stx-mark* w3160@id*) w3161@label* '#f '#f)))) (set! w2214@w2209 (make-record-type-descriptor 'stx '#f 'w2212 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! w2216@w2211 '#f) (set! w2218@w2210 (make-record-constructor-descriptor w2214@w2209 '#f w2216@w2211)) (set! w2221@stx? (record-predicate w2214@w2209)) (set! w2223@make-stx (record-constructor w2218@w2210)) (set! w2225@stx-expr (record-accessor w2214@w2209 '0)) (set! w2227@stx-mark* (record-accessor w2214@w2209 '1)) (set! w2229@stx-subst* (record-accessor w2214@w2209 '2)) (set! w2231@stx-ae* (record-accessor w2214@w2209 '3)) (set! w2233@set-stx-expr! (record-mutator w2214@w2209 '0)) (set! w2235@set-stx-mark*! (record-mutator w2214@w2209 '1)) (set! w2237@set-stx-subst*! (record-mutator w2214@w2209 '2)) (set! w2239@set-stx-ae*! (record-mutator w2214@w2209 '3)) (set! w2241@rp (w1172@w947@make-record-printer 'stx (lambda (w3166@x w3167@p w3168@wr) (begin (display '"#<syntax " w3167@p) (write (w2299@stx->datum w3166@x) w3167@p) ((lambda (w3172@expr) (if (w1164@w931@annotation? w3172@expr) ((lambda (w3174@src) (if (pair? w3174@src) (begin (display '" [" w3167@p) (display (cdr w3174@src) w3167@p) (display '" of " w3167@p) (display (car w3174@src) w3167@p) (display '"]" w3167@p)) (void))) (w1165@w933@annotation-source w3172@expr)) (void))) (w2225@stx-expr w3166@x)) (display '">" w3167@p))))) (set! w2243@datum->stx (lambda (w3176@id w3177@datum) (w2223@make-stx w3177@datum (w2227@stx-mark* w3176@id) (w2229@stx-subst* w3176@id) (w2231@stx-ae* w3176@id)))) (set! w2245@gen-mark (lambda () (string '#\m))) (set! w2247@anti-mark '#f) (set! w2249@anti-mark? not) (set! w2251@join-wraps (lambda (w3180@m1* w3181@s1* w3182@ae1* w3183@e) ((lambda (w3189@cancel) (begin (set! w3189@cancel (lambda (w3196@ls1 w3197@ls2) ((letrec ((w3200@f (lambda (w3202@x w3203@ls1) (if (null? w3203@ls1) (cdr w3197@ls2) (cons w3202@x (w3200@f (car w3203@ls1) (cdr w3203@ls1))))))) w3200@f) (car w3196@ls1) (cdr w3196@ls1)))) ((lambda (w3190@m2* w3191@s2* w3192@ae2*) (if (and (not (null? w3180@m1*)) (not (null? w3190@m2*)) (w2249@anti-mark? (car w3190@m2*))) (values (w3189@cancel w3180@m1* w3190@m2*) (w3189@cancel w3181@s1* w3191@s2*) (w3189@cancel w3182@ae1* w3192@ae2*)) (values (append w3180@m1* w3190@m2*) (append w3181@s1* w3191@s2*) (append w3182@ae1* w3192@ae2*)))) (w2227@stx-mark* w3183@e) (w2229@stx-subst* w3183@e) (w2231@stx-ae* w3183@e)))) '#f))) (set! w2253@mkstx (lambda (w3206@e w3207@m* w3208@s* w3209@ae*) (if (and (w2221@stx? w3206@e) (not (w2147@top-marked? w3207@m*))) (call-with-values (lambda () (w2251@join-wraps w3207@m* w3208@s* w3209@ae* w3206@e)) (lambda (w3217@w3214@m* w3218@w3215@s* w3219@w3216@ae*) ((lambda (w3223@ae* w3224@s* w3225@m*) (w2223@make-stx (w2225@stx-expr w3206@e) w3225@m* w3224@s* w3223@ae*)) w3219@w3216@ae* w3218@w3215@s* w3217@w3214@m*))) (w2223@make-stx w3206@e w3207@m* w3208@s* w3209@ae*)))) (set! w2255@add-mark (lambda (w3229@m w3230@e w3231@ae) (w2253@mkstx w3230@e (list w3229@m) '(shift) (list w3231@ae)))) (set! w2257@add-subst (lambda (w3235@subst w3236@e) (w2253@mkstx w3236@e '() (list w3235@subst) '()))) (set! w2259@syntax-kind? (lambda (w3239@x w3240@p?) (if (w2221@stx? w3239@x) (w2259@syntax-kind? (w2225@stx-expr w3239@x) w3240@p?) (if (w1164@w931@annotation? w3239@x) (w2259@syntax-kind? (w1166@w935@annotation-expression w3239@x) w3240@p?) (w3240@p? w3239@x))))) (set! w2261@syntax-vector->list (lambda (w3243@x) (if (w2221@stx? w3243@x) ((lambda (w3245@ls w3246@m* w3247@s* w3248@ae*) (map (lambda (w3253@x) (w2253@mkstx w3253@x w3246@m* w3247@s* w3248@ae*)) w3245@ls)) (w2261@syntax-vector->list (w2225@stx-expr w3243@x)) (w2227@stx-mark* w3243@x) (w2229@stx-subst* w3243@x) (w2231@stx-ae* w3243@x)) (if (w1164@w931@annotation? w3243@x) (w2261@syntax-vector->list (w1166@w935@annotation-expression w3243@x)) (if (vector? w3243@x) (vector->list w3243@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" w3243@x)))))) (set! w2263@syntax-pair? (lambda (w3255@x) (w2259@syntax-kind? w3255@x pair?))) (set! w2265@syntax-vector? (lambda (w3257@x) (w2259@syntax-kind? w3257@x vector?))) (set! w2267@syntax-null? (lambda (w3259@x) (w2259@syntax-kind? w3259@x null?))) (set! w2269@syntax-list? (lambda (w3261@x) (or (w2267@syntax-null? w3261@x) (and (w2263@syntax-pair? w3261@x) (w2269@syntax-list? (w2273@syntax-cdr w3261@x)))))) (set! w2271@syntax-car (lambda (w3263@x) (if (w2221@stx? w3263@x) (w2253@mkstx (w2271@syntax-car (w2225@stx-expr w3263@x)) (w2227@stx-mark* w3263@x) (w2229@stx-subst* w3263@x) (w2231@stx-ae* w3263@x)) (if (w1164@w931@annotation? w3263@x) (w2271@syntax-car (w1166@w935@annotation-expression w3263@x)) (if (pair? w3263@x) (car w3263@x) (assertion-violation 'syntax-car '"BUG: not a pair" w3263@x)))))) (set! w2273@syntax-cdr (lambda (w3265@x) (if (w2221@stx? w3265@x) (w2253@mkstx (w2273@syntax-cdr (w2225@stx-expr w3265@x)) (w2227@stx-mark* w3265@x) (w2229@stx-subst* w3265@x) (w2231@stx-ae* w3265@x)) (if (w1164@w931@annotation? w3265@x) (w2273@syntax-cdr (w1166@w935@annotation-expression w3265@x)) (if (pair? w3265@x) (cdr w3265@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" w3265@x)))))) (set! w2275@syntax->list (lambda (w3267@x) (if (w2263@syntax-pair? w3267@x) (cons (w2271@syntax-car w3267@x) (w2275@syntax->list (w2273@syntax-cdr w3267@x))) (if (w2267@syntax-null? w3267@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" w3267@x))))) (set! w2277@id? (lambda (w3269@x) (and (w2221@stx? w3269@x) ((lambda (w3271@expr) (symbol? (if (w1164@w931@annotation? w3271@expr) (w1163@w929@annotation-stripped w3271@expr) w3271@expr))) (w2225@stx-expr w3269@x))))) (set! w2279@id->sym (lambda (w3273@x) (begin (if (not (w2221@stx? w3273@x)) (error 'id->sym '"BUG in ikarus: not an id" w3273@x) (void)) ((lambda (w3275@expr) ((lambda (w3277@sym) (if (symbol? w3277@sym) w3277@sym (error 'id->sym '"BUG in ikarus: not an id" w3273@x))) (if (w1164@w931@annotation? w3275@expr) (w1163@w929@annotation-stripped w3275@expr) w3275@expr))) (w2225@stx-expr w3273@x))))) (set! w2281@same-marks? (lambda (w3279@x w3280@y) (or (and (null? w3279@x) (null? w3280@y)) (and (pair? w3279@x) (pair? w3280@y) (eq? (car w3279@x) (car w3280@y)) (w2281@same-marks? (cdr w3279@x) (cdr w3280@y)))))) (set! w2283@bound-id=? (lambda (w3283@x w3284@y) (and (eq? (w2279@id->sym w3283@x) (w2279@id->sym w3284@y)) (w2281@same-marks? (w2227@stx-mark* w3283@x) (w2227@stx-mark* w3284@y))))) (set! w2285@free-id=? (lambda (w3287@i w3288@j) ((lambda (w3291@t0 w3292@t1) (if (or w3291@t0 w3292@t1) (eq? w3291@t0 w3292@t1) (eq? (w2279@id->sym w3287@i) (w2279@id->sym w3288@j)))) (w2305@id->real-label w3287@i) (w2305@id->real-label w3288@j)))) (set! w2287@valid-bound-ids? (lambda (w3295@id*) (and (for-all w2277@id? w3295@id*) (w2289@distinct-bound-ids? w3295@id*)))) (set! w2289@distinct-bound-ids? (lambda (w3297@id*) (or (null? w3297@id*) (and (not (w2291@bound-id-member? (car w3297@id*) (cdr w3297@id*))) (w2289@distinct-bound-ids? (cdr w3297@id*)))))) (set! w2291@bound-id-member? (lambda (w3299@id w3300@id*) (and (pair? w3300@id*) (or (w2283@bound-id=? w3299@id (car w3300@id*)) (w2291@bound-id-member? w3299@id (cdr w3300@id*)))))) (set! w2293@self-evaluating? (lambda (w3303@x) (or (number? w3303@x) (string? w3303@x) (char? w3303@x) (boolean? w3303@x) (regexp? w3303@x) (bytevector? w3303@x)))) (set! w2295@strip-annotations (lambda (w3305@x) (if (pair? w3305@x) (cons (w2295@strip-annotations (car w3305@x)) (w2295@strip-annotations (cdr w3305@x))) (if (vector? w3305@x) (vector-map w2295@strip-annotations w3305@x) (if (w1164@w931@annotation? w3305@x) (w1163@w929@annotation-stripped w3305@x) w3305@x))))) (set! w2297@strip (lambda (w3307@x w3308@m*) (if (w2147@top-marked? w3308@m*) (if (or (w1164@w931@annotation? w3307@x) (and (pair? w3307@x) (w1164@w931@annotation? (car w3307@x))) (and (vector? w3307@x) (> (vector-length w3307@x) '0) (w1164@w931@annotation? (vector-ref w3307@x '0)))) (w2295@strip-annotations w3307@x) w3307@x) ((letrec ((w3311@f (lambda (w3313@x) (if (w2221@stx? w3313@x) (w2297@strip (w2225@stx-expr w3313@x) (w2227@stx-mark* w3313@x)) (if (w1164@w931@annotation? w3313@x) (w1163@w929@annotation-stripped w3313@x) (if (pair? w3313@x) ((lambda (w3315@a w3316@d) (if (and (eq? w3315@a (car w3313@x)) (eq? w3316@d (cdr w3313@x))) w3313@x (cons w3315@a w3316@d))) (w3311@f (car w3313@x)) (w3311@f (cdr w3313@x))) (if (vector? w3313@x) ((lambda (w3319@old) ((lambda (w3321@new) (if (for-all eq? w3319@old w3321@new) w3313@x (list->vector w3321@new))) (map w3311@f w3319@old))) (vector->list w3313@x)) w3313@x))))))) w3311@f) w3307@x)))) (set! w2299@stx->datum (lambda (w3323@x) (w2297@strip w3323@x '()))) (set! w2301@same-marks*? (lambda (w3325@mark* w3326@mark** w3327@si) (if (null? w3327@si) '#f (if (w2281@same-marks? w3325@mark* (vector-ref w3326@mark** (car w3327@si))) (car w3327@si) (w2301@same-marks*? w3325@mark* w3326@mark** (cdr w3327@si)))))) (set! w2303@id->label (lambda (w3331@id) (or (w2305@id->real-label w3331@id) ((lambda (w3333@t) (if w3333@t ((lambda (w3335@env) ((lambda (w3337@rib) (call-with-values (lambda () (w2157@gen-define-label+loc w3331@id w3337@rib)) (lambda (w3341@w3339@lab w3342@w3340@loc_) ((lambda (w3345@loc_ w3346@lab) (begin (w2198@extend-rib! w3337@rib w3331@id w3346@lab) w3346@lab)) w3342@w3340@loc_ w3341@w3339@lab)))) (w2943@interaction-env-rib w3335@env))) w3333@t) '#f)) (w3021@top-level-context))))) (set! w2305@id->real-label (lambda (w3349@id) ((lambda (w3351@sym) ((letrec ((w3353@search (lambda (w3355@subst* w3356@mark*) (if (null? w3355@subst*) '#f (if (eq? (car w3355@subst*) 'shift) (w3353@search (cdr w3355@subst*) (cdr w3356@mark*)) ((lambda (w3359@rib) ((lambda (w3361@t) (if w3361@t ((lambda (w3363@ht) ((lambda (w3365@si) ((lambda (w3367@i) (if w3367@i (vector-ref (w2180@rib-label* w3359@rib) w3367@i) (w3353@search (cdr w3355@subst*) w3356@mark*))) (and w3365@si (w2301@same-marks*? w3356@mark* (w2178@rib-mark** w3359@rib) (reverse w3365@si))))) (hashtable-ref w3363@ht w3351@sym '#f))) w3361@t) ((letrec ((w3369@f (lambda (w3371@sym* w3372@mark** w3373@label*) (if (null? w3371@sym*) (w3353@search (cdr w3355@subst*) w3356@mark*) (if (and (eq? (car w3371@sym*) w3351@sym) (w2281@same-marks? (car w3372@mark**) w3356@mark*)) (car w3373@label*) (w3369@f (cdr w3371@sym*) (cdr w3372@mark**) (cdr w3373@label*))))))) w3369@f) (w2176@rib-sym* w3359@rib) (w2178@rib-mark** w3359@rib) (w2180@rib-label* w3359@rib)))) (w2182@rib-sealed/freq w3359@rib))) (car w3355@subst*))))))) w3353@search) (w2229@stx-subst* w3349@id) (w2227@stx-mark* w3349@id))) (w2279@id->sym w3349@id)))) (set! w2307@label->binding (lambda (w3377@x w3378@r) ((lambda (w3381@t) (if w3381@t ((lambda (w3383@b) (if (and (pair? w3383@b) (eq? (car w3383@b) '$core-rtd)) (cons '$rtd (map w2700@bless (cdr w3383@b))) (if (and (pair? w3383@b) (eq? (car w3383@b) 'global-rtd)) ((lambda (w3385@lib w3386@loc) (cons '$rtd (symbol-value w3386@loc))) (cadr w3383@b) (cddr w3383@b)) w3383@b))) w3381@t) ((lambda (w3389@t) (if w3389@t (cdr w3389@t) ((lambda (w3391@t) (if w3391@t ((lambda (w3393@env) ((lambda (w3395@t) (if w3395@t ((lambda (w3397@p) (cons* 'lexical (cdr w3397@p) '#f)) w3395@t) '(displaced-lexical . #f))) (assq w3377@x (w2947@interaction-env-locs w3393@env)))) w3391@t) '(displaced-lexical . #f))) (w3021@top-level-context)))) (assq w3377@x w3378@r)))) (w1802@w1456@imported-label->binding w3377@x)))) (set! w2309@make-binding cons) (set! w2311@binding-type car) (set! w2313@binding-value cdr) (set! w2315@raise-unbound-error (lambda (w3399@id) (w3005@syntax-violation* '#f '"unbound identifier" w3399@id (w10195@w9757@make-undefined-violation)))) (set! w2317@syntax-type (lambda (w3401@e w3402@r) (if (w2277@id? w3401@e) ((lambda (w3405@id) ((lambda (w3407@label) ((lambda (w3409@b) ((lambda (w3411@type) ((lambda () (begin (if (not w3407@label) (w2315@raise-unbound-error w3405@id) (void)) ((lambda (w3413@t) (if (memv w3413@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values w3411@type (w2313@binding-value w3409@b) w3405@id) (values 'other '#f '#f))) w3411@type))))) (w2311@binding-type w3409@b))) (w2307@label->binding w3407@label w3402@r))) (w2303@id->label w3405@id))) w3401@e) (if (w2263@syntax-pair? w3401@e) ((lambda (w3415@id) (if (w2277@id? w3415@id) ((lambda (w3417@label) ((lambda (w3419@b) ((lambda (w3421@type) ((lambda () (begin (if (not w3417@label) (w2315@raise-unbound-error w3415@id) (void)) ((lambda (w3423@t) (if (memv w3423@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values w3421@type (w2313@binding-value w3419@b) w3415@id) (values 'call '#f '#f))) w3421@type))))) (w2311@binding-type w3419@b))) (w2307@label->binding w3417@label w3402@r))) (w2303@id->label w3415@id)) (values 'call '#f '#f))) (w2271@syntax-car w3401@e)) ((lambda (w3425@d) (if (w2293@self-evaluating? w3425@d) (values 'constant w3425@d '#f) (values 'other '#f '#f))) (w2299@stx->datum w3401@e)))))) (set! w2331@sanitize-binding (lambda (w3427@x w3428@src) (if (procedure? w3427@x) (cons* 'local-macro w3427@x w3428@src) (if (and (pair? w3427@x) (eq? (car w3427@x) 'macro!) (procedure? (cdr w3427@x))) (cons* 'local-macro! (cdr w3427@x) w3428@src) (if (and (pair? w3427@x) (eq? (car w3427@x) '$rtd)) w3427@x (assertion-violation 'expand '"invalid transformer" w3427@x)))))) (set! w2333@make-variable-transformer (lambda (w3431@x) (if (procedure? w3431@x) (cons 'macro! w3431@x) (assertion-violation 'make-variable-transformer '"not a procedure" w3431@x)))) (set! w2335@variable-transformer? (lambda (w3433@x) (and (pair? w3433@x) (eq? (car w3433@x) 'macro!) (procedure? (cdr w3433@x))))) (set! w2337@variable-transformer-procedure (lambda (w3435@x) (if (w2335@variable-transformer? w3435@x) (cdr w3435@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" w3435@x)))) (set! w2339@make-eval-transformer (lambda (w3437@x) (w2331@sanitize-binding (eval-core (w1259@w1187@expanded->core w3437@x)) w3437@x))) (set! w2650@parse-define (lambda (w3439@x) ((lambda (w3441@t) ((lambda (w3443@ls/false) (if (and w3443@ls/false (apply (lambda (w3445@id w3446@fmls w3447@b w3448@b*) (w2277@id? w3445@id)) w3443@ls/false)) (apply (lambda (w3453@id w3454@fmls w3455@b w3456@b*) (begin (w2812@verify-formals w3454@fmls w3439@x) (values w3453@id (cons 'defun (cons w3454@fmls (cons w3455@b w3456@b*)))))) w3443@ls/false) ((lambda (w3461@t) ((lambda (w3463@ls/false) (if (and w3463@ls/false (apply (lambda (w3465@id w3466@val) (w2277@id? w3465@id)) w3463@ls/false)) (apply (lambda (w3469@id w3470@val) (values w3469@id (cons 'expr w3470@val))) w3463@ls/false) ((lambda (w3473@t) ((lambda (w3475@ls/false) (if (and w3475@ls/false (apply (lambda (w3477@id) (w2277@id? w3477@id)) w3475@ls/false)) (apply (lambda (w3479@id) (values w3479@id (cons 'expr (w2700@bless '(void))))) w3475@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3473@t))) (w2774@syntax-dispatch w3473@t '(_ any)))) w3461@t))) (w2774@syntax-dispatch w3461@t '(_ any any)))) w3441@t))) (w2774@syntax-dispatch w3441@t '(_ (any . any) any . each-any)))) w3439@x))) (set! w2652@parse-define-syntax (lambda (w3481@x) ((lambda (w3483@t) ((lambda (w3485@ls/false) (if (and w3485@ls/false (apply (lambda (w3487@id w3488@val) (w2277@id? w3487@id)) w3485@ls/false)) (apply (lambda (w3491@id w3492@val) (values w3491@id w3492@val)) w3485@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3483@t))) (w2774@syntax-dispatch w3483@t '(_ any any)))) w3481@x))) (set! w2654@scheme-stx-hashtable (make-eq-hashtable)) (set! w2656@scheme-stx (lambda (w3495@sym) (or (hashtable-ref w2654@scheme-stx-hashtable w3495@sym '#f) ((lambda (w3497@subst) ((lambda (w3499@stx) ((lambda (w3501@stx) ((lambda () (begin (hashtable-set! w2654@scheme-stx-hashtable w3495@sym w3501@stx) w3501@stx)))) ((lambda (w3503@t) (if w3503@t ((lambda (w3505@x) ((lambda (w3507@name w3508@label) (w2257@add-subst (w2174@make-rib (list w3507@name) (list w2145@top-mark*) (list w3508@label) '#f '#f) w3499@stx)) (car w3505@x) (cdr w3505@x))) w3503@t) w3499@stx)) (assq w3495@sym w3497@subst)))) (w2223@make-stx w3495@sym w2145@top-mark* '() '()))) (w1760@w1372@library-subst (w1796@w1444@find-library-by-name '(psyntax system $all))))))) (set! w2658@lexical-var car) (set! w2660@lexical-mutable? cdr) (set! w2662@set-lexical-mutable! set-cdr!) (set! w2664@add-lexical (lambda (w3511@lab w3512@lex w3513@r) (cons (cons* w3511@lab 'lexical w3512@lex '#f) w3513@r))) (set! w2666@add-lexicals (lambda (w3517@lab* w3518@lex* w3519@r) (if (null? w3517@lab*) w3519@r (w2666@add-lexicals (cdr w3517@lab*) (cdr w3518@lex*) (w2664@add-lexical (car w3517@lab*) (car w3518@lex*) w3519@r))))) (set! w2668@letrec-helper (lambda (w3523@e w3524@r w3525@mr w3526@build) ((lambda (w3531@t) ((lambda (w3533@ls/false) (if w3533@ls/false (apply (lambda (w3535@lhs* w3536@rhs* w3537@b w3538@b*) (if (not (w2287@valid-bound-ids? w3535@lhs*)) (w2704@invalid-fmls-error w3523@e w3535@lhs*) ((lambda (w3543@lex* w3544@lab*) ((lambda (w3547@rib w3548@r) ((lambda (w3551@body w3552@rhs*) (w3526@build '#f w3543@lex* w3552@rhs* w3551@body)) (w2830@chi-internal (w2257@add-subst w3547@rib (cons w3537@b w3538@b*)) w3548@r w3525@mr) (w2804@chi-expr* (map (lambda (w3555@x) (w2257@add-subst w3547@rib w3555@x)) w3536@rhs*) w3548@r w3525@mr))) (w2208@make-full-rib w3535@lhs* w3544@lab*) (w2666@add-lexicals w3544@lab* w3543@lex* w3524@r))) (map w2149@gen-lexical w3535@lhs*) (map w2153@gen-label w3535@lhs*)))) w3533@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3531@t))) (w2774@syntax-dispatch w3531@t '(_ #(each (any any)) any . each-any)))) w3523@e))) (set! w2670@letrec-transformer (lambda (w3557@e w3558@r w3559@mr) (w2668@letrec-helper w3557@e w3558@r w3559@mr w2118@w1977@build-letrec))) (set! w2672@letrec*-transformer (lambda (w3563@e w3564@r w3565@mr) (w2668@letrec-helper w3563@e w3564@r w3565@mr w2119@w1979@build-letrec*))) (set! w2674@fluid-let-syntax-transformer (lambda (w3569@e w3570@r w3571@mr) ((lambda (w3576@lookup) (begin (set! w3576@lookup (lambda (w3595@x) (or (w2303@id->label w3595@x) (w3007@syntax-violation '#f '"unbound identifier" w3569@e w3595@x)))) ((lambda (w3577@t) ((lambda (w3579@ls/false) (if w3579@ls/false (apply (lambda (w3581@lhs* w3582@rhs* w3583@b w3584@b*) (if (not (w2287@valid-bound-ids? w3581@lhs*)) (w2704@invalid-fmls-error w3569@e w3581@lhs*) ((lambda (w3589@lab* w3590@rhs*) (w2830@chi-internal (cons w3583@b w3584@b*) (append (map cons w3589@lab* w3590@rhs*) w3570@r) (append (map cons w3589@lab* w3590@rhs*) w3571@mr))) (map w3576@lookup w3581@lhs*) (map (lambda (w3593@x) (w2339@make-eval-transformer (w2867@expand-transformer w3593@x w3571@mr))) w3582@rhs*)))) w3579@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3577@t))) (w2774@syntax-dispatch w3577@t '(_ #(each (any any)) any . each-any)))) w3569@e))) '#f))) (set! w2676@type-descriptor-transformer (lambda (w3597@e w3598@r w3599@mr) ((lambda (w3603@t) ((lambda (w3605@ls/false) (if (and w3605@ls/false (apply (lambda (w3607@id) (w2277@id? w3607@id)) w3605@ls/false)) (apply (lambda (w3609@id) ((lambda (w3611@lab) ((lambda (w3613@b) ((lambda (w3615@type) ((lambda () (begin (if (not w3611@lab) (w2315@raise-unbound-error w3609@id) (void)) (if (not (and (eq? w3615@type '$rtd) (not (list? (w2313@binding-value w3613@b))))) (w3007@syntax-violation '#f '"not a record type" w3597@e) (void)) (list 'quote (w2313@binding-value w3613@b)))))) (w2311@binding-type w3613@b))) (w2307@label->binding w3611@lab w3598@r))) (w2303@id->label w3609@id))) w3605@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3603@t))) (w2774@syntax-dispatch w3603@t '(_ any)))) w3597@e))) (set! w2678@record-type-descriptor-transformer (lambda (w3617@e w3618@r w3619@mr) ((lambda (w3623@t) ((lambda (w3625@ls/false) (if (and w3625@ls/false (apply (lambda (w3627@id) (w2277@id? w3627@id)) w3625@ls/false)) (apply (lambda (w3629@id) ((lambda (w3631@lab) ((lambda (w3633@b) ((lambda (w3635@type) ((lambda () (begin (if (not w3631@lab) (w2315@raise-unbound-error w3629@id) (void)) (if (not (and (eq? w3635@type '$rtd) (list? (w2313@binding-value w3633@b)))) (w3007@syntax-violation '#f '"not a record type" w3617@e) (void)) (w2808@chi-expr (car (w2313@binding-value w3633@b)) w3618@r w3619@mr))))) (w2311@binding-type w3633@b))) (w2307@label->binding w3631@lab w3618@r))) (w2303@id->label w3629@id))) w3625@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3623@t))) (w2774@syntax-dispatch w3623@t '(_ any)))) w3617@e))) (set! w2680@record-constructor-descriptor-transformer (lambda (w3637@e w3638@r w3639@mr) ((lambda (w3643@t) ((lambda (w3645@ls/false) (if (and w3645@ls/false (apply (lambda (w3647@id) (w2277@id? w3647@id)) w3645@ls/false)) (apply (lambda (w3649@id) ((lambda (w3651@lab) ((lambda (w3653@b) ((lambda (w3655@type) ((lambda () (begin (if (not w3651@lab) (w2315@raise-unbound-error w3649@id) (void)) (if (not (and (eq? w3655@type '$rtd) (list? (w2313@binding-value w3653@b)))) (w3007@syntax-violation '#f '"invalid type" w3637@e) (void)) (w2808@chi-expr (cadr (w2313@binding-value w3653@b)) w3638@r w3639@mr))))) (w2311@binding-type w3653@b))) (w2307@label->binding w3651@lab w3638@r))) (w2303@id->label w3649@id))) w3645@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3643@t))) (w2774@syntax-dispatch w3643@t '(_ any)))) w3637@e))) (set! w2682@when-macro (lambda (w3657@e) ((lambda (w3659@t) ((lambda (w3661@ls/false) (if w3661@ls/false (apply (lambda (w3663@test w3664@e w3665@e*) (w2700@bless (list 'if w3663@test (cons 'begin (cons w3664@e w3665@e*))))) w3661@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3659@t))) (w2774@syntax-dispatch w3659@t '(_ any any . each-any)))) w3657@e))) (set! w2684@unless-macro (lambda (w3669@e) ((lambda (w3671@t) ((lambda (w3673@ls/false) (if w3673@ls/false (apply (lambda (w3675@test w3676@e w3677@e*) (w2700@bless (list 'if (list 'not w3675@test) (cons 'begin (cons w3676@e w3677@e*))))) w3673@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3671@t))) (w2774@syntax-dispatch w3671@t '(_ any any . each-any)))) w3669@e))) (set! w2686@if-transformer (lambda (w3681@e w3682@r w3683@mr) ((lambda (w3687@t) ((lambda (w3689@ls/false) (if w3689@ls/false (apply (lambda (w3691@e0 w3692@e1 w3693@e2) (list 'if (w2808@chi-expr w3691@e0 w3682@r w3683@mr) (w2808@chi-expr w3692@e1 w3682@r w3683@mr) (w2808@chi-expr w3693@e2 w3682@r w3683@mr))) w3689@ls/false) ((lambda (w3697@t) ((lambda (w3699@ls/false) (if w3699@ls/false (apply (lambda (w3701@e0 w3702@e1) (list 'if (w2808@chi-expr w3701@e0 w3682@r w3683@mr) (w2808@chi-expr w3702@e1 w3682@r w3683@mr) (w2117@w1975@build-void))) w3699@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3697@t))) (w2774@syntax-dispatch w3697@t '(_ any any)))) w3687@t))) (w2774@syntax-dispatch w3687@t '(_ any any any)))) w3681@e))) (set! w2688@and-transformer (lambda (w3705@e w3706@r w3707@mr) ((lambda (w3711@t) ((lambda (w3713@ls/false) (if w3713@ls/false (apply (lambda (w3715@e*) (cons 'and (w2804@chi-expr* w3715@e* w3706@r w3707@mr))) w3713@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3711@t))) (w2774@syntax-dispatch w3711@t '(_ . each-any)))) w3705@e))) (set! w2690@or-transformer (lambda (w3717@e w3718@r w3719@mr) ((lambda (w3723@t) ((lambda (w3725@ls/false) (if w3725@ls/false (apply (lambda (w3727@e*) (cons 'or (w2804@chi-expr* w3727@e* w3718@r w3719@mr))) w3725@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3723@t))) (w2774@syntax-dispatch w3723@t '(_ . each-any)))) w3717@e))) (set! w2692@case-macro (lambda (w3729@e) ((lambda (w3732@build-last w3734@build-one) (begin (set! w3732@build-last (lambda (w3771@cls) ((lambda (w3773@t) ((lambda (w3775@ls/false) (if w3775@ls/false (apply (lambda (w3777@e w3778@e*) (cons 'begin (cons w3777@e w3778@e*))) w3775@ls/false) ((lambda (w3781@t) ((lambda (w3783@ls/false) (if w3783@ls/false (apply (lambda () (w3734@build-one w3771@cls '(if #f #f))) w3783@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3781@t))) (w2774@syntax-dispatch w3781@t '_))) w3773@t))) (w2774@syntax-dispatch w3773@t '(#(scheme-id else) any . each-any)))) w3771@cls))) (set! w3734@build-one (lambda (w3757@cls w3758@k) ((lambda (w3761@t) ((lambda (w3763@ls/false) (if w3763@ls/false (apply (lambda (w3765@d* w3766@e w3767@e*) (list 'if (list 'memv 't (list 'quote w3765@d*)) (cons 'begin (cons w3766@e w3767@e*)) w3758@k)) w3763@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3761@t))) (w2774@syntax-dispatch w3761@t '(each-any any . each-any)))) w3757@cls))) ((lambda (w3735@t) ((lambda (w3737@ls/false) (if w3737@ls/false (apply (lambda (w3739@expr) (w2700@bless (cons 'let (cons (list (list 't w3739@expr)) '((if #f #f)))))) w3737@ls/false) ((lambda (w3741@t) ((lambda (w3743@ls/false) (if w3743@ls/false (apply (lambda (w3745@expr w3746@cls w3747@cls*) (w2700@bless (list 'let (list (list 't w3745@expr)) ((letrec ((w3751@f (lambda (w3753@cls w3754@cls*) (if (null? w3754@cls*) (w3732@build-last w3753@cls) (w3734@build-one w3753@cls (w3751@f (car w3754@cls*) (cdr w3754@cls*))))))) w3751@f) w3746@cls w3747@cls*)))) w3743@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3741@t))) (w2774@syntax-dispatch w3741@t '(_ any any . each-any)))) w3735@t))) (w2774@syntax-dispatch w3735@t '(_ any)))) w3729@e))) '#f '#f))) (set! w2694@quote-transformer (lambda (w3785@e w3786@r w3787@mr) ((lambda (w3791@t) ((lambda (w3793@ls/false) (if w3793@ls/false (apply (lambda (w3795@datum) (list 'quote (w2299@stx->datum w3795@datum))) w3793@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3791@t))) (w2774@syntax-dispatch w3791@t '(_ any)))) w3785@e))) (set! w2696@case-lambda-transformer (lambda (w3797@e w3798@r w3799@mr) ((lambda (w3803@t) ((lambda (w3805@ls/false) (if w3805@ls/false (apply (lambda (w3807@fmls* w3808@b* w3809@b**) (call-with-values (lambda () (w2816@chi-lambda-clause* w3797@e w3807@fmls* (map cons w3808@b* w3809@b**) w3798@r w3799@mr)) (lambda (w3815@w3813@fmls* w3816@w3814@body*) ((lambda (w3819@body* w3820@fmls*) (w2114@w1925@build-case-lambda '#f w3820@fmls* w3819@body*)) w3816@w3814@body* w3815@w3813@fmls*)))) w3805@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3803@t))) (w2774@syntax-dispatch w3803@t '(_ . #(each (any any . each-any)))))) w3797@e))) (set! w2698@lambda-transformer (lambda (w3823@e w3824@r w3825@mr) ((lambda (w3829@t) ((lambda (w3831@ls/false) (if w3831@ls/false (apply (lambda (w3833@fmls w3834@b w3835@b*) (call-with-values (lambda () (w2814@chi-lambda-clause w3823@e w3833@fmls (cons w3834@b w3835@b*) w3824@r w3825@mr)) (lambda (w3841@w3839@fmls w3842@w3840@body) ((lambda (w3845@body w3846@fmls) (w2113@w1923@build-lambda '#f w3846@fmls w3845@body)) w3842@w3840@body w3841@w3839@fmls)))) w3831@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3829@t))) (w2774@syntax-dispatch w3829@t '(_ any any . each-any)))) w3823@e))) (set! w2700@bless (lambda (w3849@x) (w2253@mkstx ((letrec ((w3851@f (lambda (w3853@x) (if (w2221@stx? w3853@x) w3853@x (if (pair? w3853@x) (cons (w3851@f (car w3853@x)) (w3851@f (cdr w3853@x))) (if (symbol? w3853@x) (w2656@scheme-stx w3853@x) (if (vector? w3853@x) (vector-map w3851@f w3853@x) w3853@x))))))) w3851@f) w3849@x) '() '() '()))) (set! w2702@with-syntax-macro (lambda (w3855@e) ((lambda (w3857@t) ((lambda (w3859@ls/false) (if w3859@ls/false (apply (lambda (w3861@pat* w3862@expr* w3863@b w3864@b*) ((lambda (w3869@idn*) (begin (w2812@verify-formals (map car w3869@idn*) w3855@e) ((lambda (w3871@t*) (w2700@bless (list 'let (map list w3871@t* w3862@expr*) ((letrec ((w3873@f (lambda (w3875@pat* w3876@t*) (if (null? w3875@pat*) (cons 'begin (cons '#f (cons w3863@b w3864@b*))) (list 'syntax-case (car w3876@t*) '() (list (car w3875@pat*) (w3873@f (cdr w3875@pat*) (cdr w3876@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car w3875@pat*)) (car w3876@t*)))))))) w3873@f) w3861@pat* w3871@t*)))) (w2989@generate-temporaries w3862@expr*)))) ((letrec ((w3879@f (lambda (w3881@pat*) (if (null? w3881@pat*) '() (call-with-values (lambda () (w2772@convert-pattern (car w3881@pat*) '())) (lambda (w3885@w3883@pat w3886@w3884@idn*) ((lambda (w3889@idn* w3890@pat) (append w3889@idn* (w3879@f (cdr w3881@pat*)))) w3886@w3884@idn* w3885@w3883@pat))))))) w3879@f) w3861@pat*))) w3859@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3857@t))) (w2774@syntax-dispatch w3857@t '(_ #(each (any any)) any . each-any)))) w3855@e))) (set! w2704@invalid-fmls-error (lambda (w3893@stx w3894@fmls) ((lambda (w3897@t) ((lambda (w3899@ls/false) (if w3899@ls/false (apply (lambda (w3901@id* w3902@last) ((letrec ((w3905@f (lambda (w3907@id*) (if (null? w3907@id*) (values) (if (not (w2277@id? (car w3907@id*))) (w3007@syntax-violation '#f '"not an identifier" w3893@stx (car w3907@id*)) (begin (w3905@f (cdr w3907@id*)) (if (w2291@bound-id-member? (car w3907@id*) (cdr w3907@id*)) (w3007@syntax-violation '#f '"duplicate binding" w3893@stx (car w3907@id*)) (void)))))))) w3905@f) (if (w2277@id? w3902@last) (cons w3902@last w3901@id*) (if (w2267@syntax-null? w3902@last) w3901@id* (w3007@syntax-violation '#f '"not an identifier" w3893@stx w3902@last))))) w3899@ls/false) ((lambda (w3909@t) ((lambda (w3911@ls/false) (if w3911@ls/false (apply (lambda () (w3007@syntax-violation '#f '"malformed binding form" w3893@stx w3894@fmls)) w3911@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3909@t))) (w2774@syntax-dispatch w3909@t '_))) w3897@t))) (w2774@syntax-dispatch w3897@t '#(each+ any () any)))) w3894@fmls))) (set! w2706@let-macro (lambda (w3913@stx) ((lambda (w3915@t) ((lambda (w3917@ls/false) (if w3917@ls/false (apply (lambda (w3919@lhs* w3920@rhs* w3921@b w3922@b*) (if (w2287@valid-bound-ids? w3919@lhs*) (w2700@bless (cons (cons 'lambda (cons w3919@lhs* (cons w3921@b w3922@b*))) w3920@rhs*)) (w2704@invalid-fmls-error w3913@stx w3919@lhs*))) w3917@ls/false) ((lambda (w3927@t) ((lambda (w3929@ls/false) (if (and w3929@ls/false (apply (lambda (w3931@f w3932@lhs* w3933@rhs* w3934@b w3935@b*) (w2277@id? w3931@f)) w3929@ls/false)) (apply (lambda (w3941@f w3942@lhs* w3943@rhs* w3944@b w3945@b*) (if (w2287@valid-bound-ids? w3942@lhs*) (w2700@bless (cons (list 'letrec (list (list w3941@f (cons 'lambda (cons w3942@lhs* (cons w3944@b w3945@b*))))) w3941@f) w3943@rhs*)) (w2704@invalid-fmls-error w3913@stx w3942@lhs*))) w3929@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3927@t))) (w2774@syntax-dispatch w3927@t '(_ any #(each (any any)) any . each-any)))) w3915@t))) (w2774@syntax-dispatch w3915@t '(_ #(each (any any)) any . each-any)))) w3913@stx))) (set! w2708@let-values-macro (lambda (w3951@stx) ((lambda (w3954@rename w3956@rename*) (begin (set! w3954@rename (lambda (w4052@x w4053@old* w4054@new*) (begin (if (not (w2277@id? w4052@x)) (w3007@syntax-violation '#f '"not an indentifier" w3951@stx w4052@x) (void)) (if (w2291@bound-id-member? w4052@x w4053@old*) (w3007@syntax-violation '#f '"duplicate binding" w3951@stx w4052@x) (void)) ((lambda (w4058@y) (values w4058@y (cons w4052@x w4053@old*) (cons w4058@y w4054@new*))) (w1161@w925@gensym (w3013@syntax->datum w4052@x)))))) (set! w3956@rename* (lambda (w4034@x* w4035@old* w4036@new*) (if (null? w4034@x*) (values '() w4035@old* w4036@new*) (call-with-values (lambda () (w3954@rename (car w4034@x*) w4035@old* w4036@new*)) (lambda (w4040@x w4041@old* w4042@new*) (call-with-values (lambda () (w3956@rename* (cdr w4034@x*) w4041@old* w4042@new*)) (lambda (w4046@x* w4047@old* w4048@new*) (values (cons w4040@x w4046@x*) w4047@old* w4048@new*)))))))) ((lambda (w3957@t) ((lambda (w3959@ls/false) (if w3959@ls/false (apply (lambda (w3961@b w3962@b*) (cons* (w2700@bless 'let) '() w3961@b w3962@b*)) w3959@ls/false) ((lambda (w3965@t) ((lambda (w3967@ls/false) (if w3967@ls/false (apply (lambda (w3969@lhs* w3970@rhs* w3971@b w3972@b*) (w2700@bless ((letrec ((w3977@f (lambda (w3979@lhs* w3980@rhs* w3981@old* w3982@new*) (if (null? w3979@lhs*) (cons 'let (cons (map list w3981@old* w3982@new*) (cons w3971@b w3972@b*))) ((lambda (w3987@t) ((lambda (w3989@ls/false) (if w3989@ls/false (apply (lambda (w3991@x*) (call-with-values (lambda () (w3956@rename* w3991@x* w3981@old* w3982@new*)) (lambda (w3996@w3993@y* w3997@w3994@old* w3998@w3995@new*) ((lambda (w4002@new* w4003@old* w4004@y*) (list 'call-with-values (list 'lambda '() (car w3980@rhs*)) (list 'lambda w4004@y* (w3977@f (cdr w3979@lhs*) (cdr w3980@rhs*) w4003@old* w4002@new*)))) w3998@w3995@new* w3997@w3994@old* w3996@w3993@y*)))) w3989@ls/false) ((lambda (w4008@t) ((lambda (w4010@ls/false) (if w4010@ls/false (apply (lambda (w4012@x* w4013@x) (call-with-values (lambda () (w3954@rename w4013@x w3981@old* w3982@new*)) (lambda (w4016@y w4017@old* w4018@new*) (call-with-values (lambda () (w3956@rename* w4012@x* w4017@old* w4018@new*)) (lambda (w4022@y* w4023@old* w4024@new*) (list 'call-with-values (list 'lambda '() (car w3980@rhs*)) (list 'lambda (append w4022@y* w4016@y) (w3977@f (cdr w3979@lhs*) (cdr w3980@rhs*) w4023@old* w4024@new*)))))))) w4010@ls/false) ((lambda (w4028@t) ((lambda (w4030@ls/false) (if w4030@ls/false (apply (lambda (w4032@others) (w3007@syntax-violation '#f '"malformed bindings" w3951@stx w4032@others)) w4030@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4028@t))) (w2774@syntax-dispatch w4028@t 'any))) w4008@t))) (w2774@syntax-dispatch w4008@t '#(each+ any () any)))) w3987@t))) (w2774@syntax-dispatch w3987@t 'each-any))) (car w3979@lhs*)))))) w3977@f) w3969@lhs* w3970@rhs* '() '()))) w3967@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w3965@t))) (w2774@syntax-dispatch w3965@t '(_ #(each (any any)) any . each-any)))) w3957@t))) (w2774@syntax-dispatch w3957@t '(_ () any . each-any)))) w3951@stx))) '#f '#f))) (set! w2710@let*-values-macro (lambda (w4060@stx) ((lambda (w4063@check) (begin (set! w4063@check (lambda (w4110@x*) (if (not (null? w4110@x*)) ((lambda (w4112@x) (begin (if (not (w2277@id? w4112@x)) (w3007@syntax-violation '#f '"not an identifier" w4060@stx w4112@x) (void)) (w4063@check (cdr w4110@x*)) (if (w2291@bound-id-member? w4112@x (cdr w4110@x*)) (w3007@syntax-violation '#f '"duplicate identifier" w4060@stx w4112@x) (void)))) (car w4110@x*)) (void)))) ((lambda (w4064@t) ((lambda (w4066@ls/false) (if w4066@ls/false (apply (lambda (w4068@b w4069@b*) (cons* (w2700@bless 'let) '() w4068@b w4069@b*)) w4066@ls/false) ((lambda (w4072@t) ((lambda (w4074@ls/false) (if w4074@ls/false (apply (lambda (w4076@lhs* w4077@rhs* w4078@b w4079@b*) (w2700@bless ((letrec ((w4084@f (lambda (w4086@lhs* w4087@rhs*) (if (null? w4086@lhs*) (cons 'begin (cons w4078@b w4079@b*)) ((lambda (w4090@t) ((lambda (w4092@ls/false) (if w4092@ls/false (apply (lambda (w4094@x*) (begin (w4063@check w4094@x*) (list 'call-with-values (list 'lambda '() (car w4087@rhs*)) (list 'lambda w4094@x* (w4084@f (cdr w4086@lhs*) (cdr w4087@rhs*)))))) w4092@ls/false) ((lambda (w4096@t) ((lambda (w4098@ls/false) (if w4098@ls/false (apply (lambda (w4100@x* w4101@x) (begin (w4063@check (cons w4101@x w4100@x*)) (list 'call-with-values (list 'lambda '() (car w4087@rhs*)) (list 'lambda (append w4100@x* w4101@x) (w4084@f (cdr w4086@lhs*) (cdr w4087@rhs*)))))) w4098@ls/false) ((lambda (w4104@t) ((lambda (w4106@ls/false) (if w4106@ls/false (apply (lambda (w4108@others) (w3007@syntax-violation '#f '"malformed bindings" w4060@stx w4108@others)) w4106@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4104@t))) (w2774@syntax-dispatch w4104@t 'any))) w4096@t))) (w2774@syntax-dispatch w4096@t '#(each+ any () any)))) w4090@t))) (w2774@syntax-dispatch w4090@t 'each-any))) (car w4086@lhs*)))))) w4084@f) w4076@lhs* w4077@rhs*))) w4074@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4072@t))) (w2774@syntax-dispatch w4072@t '(_ #(each (any any)) any . each-any)))) w4064@t))) (w2774@syntax-dispatch w4064@t '(_ () any . each-any)))) w4060@stx))) '#f))) (set! w2712@trace-lambda-macro (lambda (w4114@stx) ((lambda (w4116@t) ((lambda (w4118@ls/false) (if w4118@ls/false (apply (lambda (w4120@who w4121@fmls w4122@b w4123@b*) (if (w2287@valid-bound-ids? w4121@fmls) (w2700@bless (list 'make-traced-procedure (list 'quote w4120@who) (cons 'lambda (cons w4121@fmls (cons w4122@b w4123@b*))))) (w2704@invalid-fmls-error w4114@stx w4121@fmls))) w4118@ls/false) ((lambda (w4128@t) ((lambda (w4130@ls/false) (if w4130@ls/false (apply (lambda (w4132@who w4133@fmls w4134@last w4135@b w4136@b*) (if (w2287@valid-bound-ids? (cons w4134@last w4133@fmls)) (w2700@bless (list 'make-traced-procedure (list 'quote w4132@who) (cons 'lambda (cons (append w4133@fmls w4134@last) (cons w4135@b w4136@b*))))) (w2704@invalid-fmls-error w4114@stx (append w4133@fmls w4134@last)))) w4130@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4128@t))) (w2774@syntax-dispatch w4128@t '(_ any #(each+ any () any) any . each-any)))) w4116@t))) (w2774@syntax-dispatch w4116@t '(_ any each-any any . each-any)))) w4114@stx))) (set! w2714@trace-define-macro (lambda (w4142@stx) ((lambda (w4144@t) ((lambda (w4146@ls/false) (if w4146@ls/false (apply (lambda (w4148@who w4149@fmls w4150@b w4151@b*) (if (w2287@valid-bound-ids? w4149@fmls) (w2700@bless (list 'define w4148@who (list 'make-traced-procedure (list 'quote w4148@who) (cons 'lambda (cons w4149@fmls (cons w4150@b w4151@b*)))))) (w2704@invalid-fmls-error w4142@stx w4149@fmls))) w4146@ls/false) ((lambda (w4156@t) ((lambda (w4158@ls/false) (if w4158@ls/false (apply (lambda (w4160@who w4161@fmls w4162@last w4163@b w4164@b*) (if (w2287@valid-bound-ids? (cons w4162@last w4161@fmls)) (w2700@bless (list 'define w4160@who (list 'make-traced-procedure (list 'quote w4160@who) (cons 'lambda (cons (append w4161@fmls w4162@last) (cons w4163@b w4164@b*)))))) (w2704@invalid-fmls-error w4142@stx (append w4161@fmls w4162@last)))) w4158@ls/false) ((lambda (w4170@t) ((lambda (w4172@ls/false) (if w4172@ls/false (apply (lambda (w4174@who w4175@expr) (if (w2277@id? w4174@who) (w2700@bless (list 'define w4174@who (list 'let (list (list 'v w4175@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote w4174@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (w3007@syntax-violation '#f '"invalid name" w4142@stx))) w4172@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4170@t))) (w2774@syntax-dispatch w4170@t '(_ any any)))) w4156@t))) (w2774@syntax-dispatch w4156@t '(_ (any . #(each+ any () any)) any . each-any)))) w4144@t))) (w2774@syntax-dispatch w4144@t '(_ (any . each-any) any . each-any)))) w4142@stx))) (set! w2716@trace-define-syntax-macro (lambda (w4178@stx) ((lambda (w4180@t) ((lambda (w4182@ls/false) (if w4182@ls/false (apply (lambda (w4184@who w4185@expr) (if (w2277@id? w4184@who) (w2700@bless (list 'define-syntax w4184@who (list 'make-traced-macro (list 'quote w4184@who) w4185@expr))) (w3007@syntax-violation '#f '"invalid name" w4178@stx))) w4182@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4180@t))) (w2774@syntax-dispatch w4180@t '(_ any any)))) w4178@stx))) (set! w2718@trace-let/rec-syntax (lambda (w4188@who) (lambda (w4190@stx) ((lambda (w4192@t) ((lambda (w4194@ls/false) (if w4194@ls/false (apply (lambda (w4196@lhs* w4197@rhs* w4198@b w4199@b*) (if (w2287@valid-bound-ids? w4196@lhs*) ((lambda (w4204@rhs*) (w2700@bless (cons w4188@who (cons (map list w4196@lhs* w4204@rhs*) (cons w4198@b w4199@b*))))) (map (lambda (w4206@lhs w4207@rhs) (list 'make-traced-macro (list 'quote w4206@lhs) w4207@rhs)) w4196@lhs* w4197@rhs*)) (w2704@invalid-fmls-error w4190@stx w4196@lhs*))) w4194@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4192@t))) (w2774@syntax-dispatch w4192@t '(_ #(each (any any)) any . each-any)))) w4190@stx)))) (set! w2720@trace-let-syntax-macro (w2718@trace-let/rec-syntax 'let-syntax)) (set! w2722@trace-letrec-syntax-macro (w2718@trace-let/rec-syntax 'letrec-syntax)) (set! w2724@guard-macro (lambda (w4210@x) ((lambda (w4213@gen-clauses) (begin (set! w4213@gen-clauses (lambda (w4236@con w4237@outerk w4238@clause*) ((lambda (w4243@f w4245@f*) (begin (set! w4243@f (lambda (w4296@x w4297@k) ((lambda (w4300@t) ((lambda (w4302@ls/false) (if w4302@ls/false (apply (lambda (w4304@e w4305@p) ((lambda (w4308@t) (list 'let (list (list w4308@t w4304@e)) (list 'if w4308@t (list w4305@p w4308@t) w4297@k))) (w1161@w925@gensym))) w4302@ls/false) ((lambda (w4310@t) ((lambda (w4312@ls/false) (if w4312@ls/false (apply (lambda (w4314@e) ((lambda (w4316@t) (list 'let (list (list w4316@t w4314@e)) (list 'if w4316@t w4316@t w4297@k))) (w1161@w925@gensym))) w4312@ls/false) ((lambda (w4318@t) ((lambda (w4320@ls/false) (if w4320@ls/false (apply (lambda (w4322@e w4323@v w4324@v*) (list 'if w4322@e (cons 'begin (cons w4323@v w4324@v*)) w4297@k)) w4320@ls/false) ((lambda (w4328@t) ((lambda (w4330@ls/false) (if w4330@ls/false (apply (lambda () (w3007@syntax-violation '#f '"invalid guard clause" w4296@x)) w4330@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4328@t))) (w2774@syntax-dispatch w4328@t '_))) w4318@t))) (w2774@syntax-dispatch w4318@t '(any any . each-any)))) w4310@t))) (w2774@syntax-dispatch w4310@t '(any)))) w4300@t))) (w2774@syntax-dispatch w4300@t '(any #(scheme-id =>) any)))) w4296@x))) (set! w4245@f* (lambda (w4256@x*) ((lambda (w4258@t) ((lambda (w4260@ls/false) (if w4260@ls/false (apply (lambda () ((lambda (w4262@g) (values (list w4262@g (list 'lambda '() (list 'raise-continuable w4236@con))) w4262@g)) (w1161@w925@gensym))) w4260@ls/false) ((lambda (w4264@t) ((lambda (w4266@ls/false) (if w4266@ls/false (apply (lambda (w4268@e w4269@e*) (values (cons 'begin (cons w4268@e w4269@e*)) '#f)) w4266@ls/false) ((lambda (w4272@t) ((lambda (w4274@ls/false) (if w4274@ls/false (apply (lambda (w4276@cls w4277@cls*) (call-with-values (lambda () (w4245@f* w4277@cls*)) (lambda (w4282@w4280@e w4283@w4281@g) ((lambda (w4286@g w4287@e) (values (w4243@f w4276@cls w4287@e) w4286@g)) w4283@w4281@g w4282@w4280@e)))) w4274@ls/false) ((lambda (w4290@t) ((lambda (w4292@ls/false) (if w4292@ls/false (apply (lambda (w4294@others) (w3007@syntax-violation '#f '"invalid guard clause" w4294@others)) w4292@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4290@t))) (w2774@syntax-dispatch w4290@t 'any))) w4272@t))) (w2774@syntax-dispatch w4272@t '(any . any)))) w4264@t))) (w2774@syntax-dispatch w4264@t '((#(scheme-id else) any . each-any))))) w4258@t))) (w2774@syntax-dispatch w4258@t '()))) w4256@x*))) (call-with-values (lambda () (w4245@f* w4238@clause*)) (lambda (w4248@w4246@code w4249@w4247@raisek) ((lambda (w4252@raisek w4253@code) (if w4252@raisek (list (list 'call/cc (list 'lambda (list w4252@raisek) (list w4237@outerk (list 'lambda '() w4253@code))))) (list w4237@outerk (list 'lambda '() w4253@code)))) w4249@w4247@raisek w4248@w4246@code))))) '#f '#f))) ((lambda (w4214@t) ((lambda (w4216@ls/false) (if (and w4216@ls/false (apply (lambda (w4218@con w4219@clause* w4220@b w4221@b*) (w2277@id? w4218@con)) w4216@ls/false)) (apply (lambda (w4226@con w4227@clause* w4228@b w4229@b*) ((lambda (w4234@outerk) (w2700@bless (list (list 'call/cc (list 'lambda (list w4234@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list w4226@con) (w4213@gen-clauses w4226@con w4234@outerk w4227@clause*)) (cons 'lambda (cons '() (cons w4228@b w4229@b*)))))))))) (w1161@w925@gensym))) w4216@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4214@t))) (w2774@syntax-dispatch w4214@t '(_ (any . each-any) any . each-any)))) w4210@x))) '#f))) (set! w2726@define-enumeration-macro (lambda (w4332@stx) ((lambda (w4335@set? w4337@remove-dups) (begin (set! w4335@set? (lambda (w4360@x) (or (null? w4360@x) (and (not (memq (car w4360@x) (cdr w4360@x))) (w4335@set? (cdr w4360@x)))))) (set! w4337@remove-dups (lambda (w4358@ls) (if (null? w4358@ls) '() (cons (car w4358@ls) (w4337@remove-dups (remq (car w4358@ls) (cdr w4358@ls))))))) ((lambda (w4338@t) ((lambda (w4340@ls/false) (if (and w4340@ls/false (apply (lambda (w4342@name w4343@id* w4344@maker) (and (w2277@id? w4342@name) (w2277@id? w4344@maker) (for-all w2277@id? w4343@id*))) w4340@ls/false)) (apply (lambda (w4348@name w4349@id* w4350@maker) ((lambda (w4354@name* w4355@mk) (w2700@bless (list 'begin (list 'define w4355@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote w4354@name*)))) (list 'define-syntax w4348@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote w4354@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote w4348@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax w4350@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote w4350@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote w4354@name*)) (cons 'syntax-violation (cons (list 'quote w4350@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons w4355@mk '('(n* ...)))))))))))) (w4337@remove-dups (w3013@syntax->datum w4349@id*)) (w1161@w925@gensym))) w4340@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4338@t))) (w2774@syntax-dispatch w4338@t '(_ any each-any any)))) w4332@stx))) '#f '#f))) (set! w2728@time-macro (lambda (w4362@stx) ((lambda (w4364@t) ((lambda (w4366@ls/false) (if w4366@ls/false (apply (lambda (w4368@expr) (w2700@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() w4368@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) w4366@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4364@t))) (w2774@syntax-dispatch w4364@t '(_ any)))) w4362@stx))) (set! w2730@delay-macro (lambda (w4370@stx) ((lambda (w4372@t) ((lambda (w4374@ls/false) (if w4374@ls/false (apply (lambda (w4376@expr) (w2700@bless (list 'make-promise (list 'lambda '() w4376@expr)))) w4374@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4372@t))) (w2774@syntax-dispatch w4372@t '(_ any)))) w4370@stx))) (set! w2732@assert-macro (lambda (w4378@stx) ((lambda (w4380@t) ((lambda (w4382@ls/false) (if w4382@ls/false (apply (lambda (w4384@expr) ((lambda (w4386@pos) (w2700@bless (list 'unless w4384@expr (list 'assertion-error (list 'quote w4384@expr) (list 'quote w4386@pos))))) (or (w2999@expression-position w4378@stx) (w2999@expression-position w4384@expr)))) w4382@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4380@t))) (w2774@syntax-dispatch w4380@t '(_ any)))) w4378@stx))) (set! w2734@endianness-macro (lambda (w4388@stx) ((lambda (w4390@t) ((lambda (w4392@ls/false) (if w4392@ls/false (apply (lambda (w4394@e) ((lambda (w4396@t) (if (memv w4396@t '(little)) (w2700@bless ''little) (if (memv w4396@t '(big)) (w2700@bless ''big) (w3007@syntax-violation '#f '"endianness must be big or little" w4388@stx)))) (w3013@syntax->datum w4394@e))) w4392@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4390@t))) (w2774@syntax-dispatch w4390@t '(_ any)))) w4388@stx))) (set! w2736@identifier-syntax-macro (lambda (w4398@stx) ((lambda (w4400@t) ((lambda (w4402@ls/false) (if w4402@ls/false (apply (lambda (w4404@expr) (w2700@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax w4404@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax w4404@expr) '((syntax (e* ...)))))))))) w4402@ls/false) ((lambda (w4406@t) ((lambda (w4408@ls/false) (if (and w4408@ls/false (apply (lambda (w4410@id1 w4411@expr1 w4412@id2 w4413@expr2 w4414@expr3) (and (w2277@id? w4410@id1) (w2277@id? w4412@id2) (w2277@id? w4413@expr2))) w4408@ls/false)) (apply (lambda (w4420@id1 w4421@expr1 w4422@id2 w4423@expr2 w4424@expr3) (w2700@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax w4421@expr1)) (list (list 'set! 'id w4423@expr2) (list 'syntax w4424@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons w4421@expr1 '(e* ...))))))))) w4408@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4406@t))) (w2774@syntax-dispatch w4406@t '(_ (any any) ((#(scheme-id set!) any any) any))))) w4400@t))) (w2774@syntax-dispatch w4400@t '(_ any)))) w4398@stx))) (set! w2738@do-macro (lambda (w4430@stx) ((lambda (w4433@bind) (begin (set! w4433@bind (lambda (w4456@x) ((lambda (w4458@t) ((lambda (w4460@ls/false) (if w4460@ls/false (apply (lambda (w4462@x w4463@init) (list w4462@x w4463@init w4462@x)) w4460@ls/false) ((lambda (w4466@t) ((lambda (w4468@ls/false) (if w4468@ls/false (apply (lambda (w4470@x w4471@init w4472@step) (list w4470@x w4471@init w4472@step)) w4468@ls/false) ((lambda (w4476@t) ((lambda (w4478@ls/false) (if w4478@ls/false (apply (lambda () (w3007@syntax-violation '#f '"invalid binding" w4430@stx)) w4478@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4476@t))) (w2774@syntax-dispatch w4476@t '_))) w4466@t))) (w2774@syntax-dispatch w4466@t '(any any any)))) w4458@t))) (w2774@syntax-dispatch w4458@t '(any any)))) w4456@x))) ((lambda (w4434@t) ((lambda (w4436@ls/false) (if w4436@ls/false (apply (lambda (w4438@binding* w4439@test w4440@expr* w4441@command*) ((lambda (w4446@t) ((lambda (w4448@ls/false) (if w4448@ls/false (apply (lambda (w4450@x* w4451@init* w4452@step*) (if (w2287@valid-bound-ids? w4450@x*) (w2700@bless (list 'letrec (list (list 'loop (list 'lambda w4450@x* (list 'if w4439@test (cons 'begin (cons '(if #f #f) w4440@expr*)) (cons 'begin (append w4441@command* (list (cons 'loop w4452@step*)))))))) (cons 'loop w4451@init*))) (w3007@syntax-violation '#f '"invalid bindings" w4430@stx))) w4448@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4446@t))) (w2774@syntax-dispatch w4446@t '#(each (any any any))))) (map w4433@bind w4438@binding*))) w4436@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4434@t))) (w2774@syntax-dispatch w4434@t '(_ each-any (any . each-any) . each-any)))) w4430@stx))) '#f))) (set! w2740@let*-macro (lambda (w4480@stx) ((lambda (w4482@t) ((lambda (w4484@ls/false) (if (and w4484@ls/false (apply (lambda (w4486@lhs* w4487@rhs* w4488@b w4489@b*) (for-all w2277@id? w4486@lhs*)) w4484@ls/false)) (apply (lambda (w4494@lhs* w4495@rhs* w4496@b w4497@b*) (w2700@bless ((letrec ((w4502@f (lambda (w4504@x*) (if (null? w4504@x*) (cons 'let (cons '() (cons w4496@b w4497@b*))) (list 'let (list (car w4504@x*)) (w4502@f (cdr w4504@x*))))))) w4502@f) (map list w4494@lhs* w4495@rhs*)))) w4484@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4482@t))) (w2774@syntax-dispatch w4482@t '(_ #(each (any any)) any . each-any)))) w4480@stx))) (set! w2742@or-macro (lambda (w4506@stx) ((lambda (w4508@t) ((lambda (w4510@ls/false) (if w4510@ls/false (apply (lambda () '#f) w4510@ls/false) ((lambda (w4512@t) ((lambda (w4514@ls/false) (if w4514@ls/false (apply (lambda (w4516@e w4517@e*) (w2700@bless ((letrec ((w4520@f (lambda (w4522@e w4523@e*) (if (null? w4523@e*) (list 'begin '#f w4522@e) (list 'let (list (list 't w4522@e)) (list 'if 't 't (w4520@f (car w4523@e*) (cdr w4523@e*)))))))) w4520@f) w4516@e w4517@e*))) w4514@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4512@t))) (w2774@syntax-dispatch w4512@t '(_ any . each-any)))) w4508@t))) (w2774@syntax-dispatch w4508@t '(_)))) w4506@stx))) (set! w2744@and-macro (lambda (w4526@stx) ((lambda (w4528@t) ((lambda (w4530@ls/false) (if w4530@ls/false (apply (lambda () '#t) w4530@ls/false) ((lambda (w4532@t) ((lambda (w4534@ls/false) (if w4534@ls/false (apply (lambda (w4536@e w4537@e*) (w2700@bless ((letrec ((w4540@f (lambda (w4542@e w4543@e*) (if (null? w4543@e*) (list 'begin '#f w4542@e) (cons 'if (cons w4542@e (cons (w4540@f (car w4543@e*) (cdr w4543@e*)) '(#f)))))))) w4540@f) w4536@e w4537@e*))) w4534@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4532@t))) (w2774@syntax-dispatch w4532@t '(_ any . each-any)))) w4528@t))) (w2774@syntax-dispatch w4528@t '(_)))) w4526@stx))) (set! w2746@cond-macro (lambda (w4546@stx) ((lambda (w4548@t) ((lambda (w4550@ls/false) (if w4550@ls/false (apply (lambda (w4552@cls w4553@cls*) (w2700@bless ((letrec ((w4556@f (lambda (w4558@cls w4559@cls*) (if (null? w4559@cls*) ((lambda (w4562@t) ((lambda (w4564@ls/false) (if w4564@ls/false (apply (lambda (w4566@e w4567@e*) (cons 'begin (cons w4566@e w4567@e*))) w4564@ls/false) ((lambda (w4570@t) ((lambda (w4572@ls/false) (if w4572@ls/false (apply (lambda (w4574@e w4575@p) (list 'let (list (list 't w4574@e)) (list 'if 't (cons w4575@p '(t))))) w4572@ls/false) ((lambda (w4578@t) ((lambda (w4580@ls/false) (if w4580@ls/false (apply (lambda (w4582@e) (cons 'or (cons w4582@e '((if #f #f))))) w4580@ls/false) ((lambda (w4584@t) ((lambda (w4586@ls/false) (if w4586@ls/false (apply (lambda (w4588@e w4589@e*) (list 'if w4588@e (cons 'begin w4589@e*))) w4586@ls/false) ((lambda (w4592@t) ((lambda (w4594@ls/false) (if w4594@ls/false (apply (lambda () (w3007@syntax-violation '#f '"invalid last clause" w4546@stx)) w4594@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4592@t))) (w2774@syntax-dispatch w4592@t '_))) w4584@t))) (w2774@syntax-dispatch w4584@t '(any . each-any)))) w4578@t))) (w2774@syntax-dispatch w4578@t '(any)))) w4570@t))) (w2774@syntax-dispatch w4570@t '(any #(scheme-id =>) any)))) w4562@t))) (w2774@syntax-dispatch w4562@t '(#(scheme-id else) any . each-any)))) w4558@cls) ((lambda (w4596@t) ((lambda (w4598@ls/false) (if w4598@ls/false (apply (lambda (w4600@e w4601@e*) (w3007@syntax-violation '#f '"incorrect position of keyword else" w4546@stx)) w4598@ls/false) ((lambda (w4604@t) ((lambda (w4606@ls/false) (if w4606@ls/false (apply (lambda (w4608@e w4609@p) (list 'let (list (list 't w4608@e)) (list 'if 't (cons w4609@p '(t)) (w4556@f (car w4559@cls*) (cdr w4559@cls*))))) w4606@ls/false) ((lambda (w4612@t) ((lambda (w4614@ls/false) (if w4614@ls/false (apply (lambda (w4616@e) (list 'or w4616@e (w4556@f (car w4559@cls*) (cdr w4559@cls*)))) w4614@ls/false) ((lambda (w4618@t) ((lambda (w4620@ls/false) (if w4620@ls/false (apply (lambda (w4622@e w4623@e*) (list 'if w4622@e (cons 'begin w4623@e*) (w4556@f (car w4559@cls*) (cdr w4559@cls*)))) w4620@ls/false) ((lambda (w4626@t) ((lambda (w4628@ls/false) (if w4628@ls/false (apply (lambda () (w3007@syntax-violation '#f '"invalid last clause" w4546@stx)) w4628@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4626@t))) (w2774@syntax-dispatch w4626@t '_))) w4618@t))) (w2774@syntax-dispatch w4618@t '(any . each-any)))) w4612@t))) (w2774@syntax-dispatch w4612@t '(any)))) w4604@t))) (w2774@syntax-dispatch w4604@t '(any #(scheme-id =>) any)))) w4596@t))) (w2774@syntax-dispatch w4596@t '(#(scheme-id else) any . each-any)))) w4558@cls))))) w4556@f) w4552@cls w4553@cls*))) w4550@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4548@t))) (w2774@syntax-dispatch w4548@t '(_ any . each-any)))) w4546@stx))) (set! w2748@do-include (lambda (w4630@stx w4631@id w4632@filename) ((lambda (w4636@filename) (begin (if (not (and (string? w4636@filename) (w2277@id? w4631@id))) (w3007@syntax-violation '#f '"invalid syntax" w4630@stx) (void)) (cons (w2700@bless 'begin) (with-input-from-file w4636@filename (lambda () ((letrec ((w4638@f (lambda (w4640@ls) ((lambda (w4642@x) (if (eof-object? w4642@x) (reverse w4640@ls) (w4638@f (cons (w2243@datum->stx w4631@id w4642@x) w4640@ls)))) (w1162@w927@read-annotated))))) w4638@f) '())))))) (w2299@stx->datum w4632@filename)))) (set! w2750@include-macro (lambda (w4644@e) ((lambda (w4646@t) ((lambda (w4648@ls/false) (if w4648@ls/false (apply (lambda (w4650@id w4651@filename) (w2748@do-include w4644@e w4650@id w4651@filename)) w4648@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4646@t))) (w2774@syntax-dispatch w4646@t '(any any)))) w4644@e))) (set! w2752@include-into-macro (lambda (w4654@e) ((lambda (w4656@t) ((lambda (w4658@ls/false) (if w4658@ls/false (apply (lambda (w4660@id w4661@filename) (w2748@do-include w4654@e w4660@id w4661@filename)) w4658@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4656@t))) (w2774@syntax-dispatch w4656@t '(_ any any)))) w4654@e))) (set! w2754@syntax-rules-macro (lambda (w4664@e) ((lambda (w4666@t) ((lambda (w4668@ls/false) (if w4668@ls/false (apply (lambda (w4670@lits w4671@pat* w4672@tmp*) (begin (w2780@verify-literals w4670@lits w4664@e) (w2700@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons w4670@lits (map (lambda (w4676@pat w4677@tmp) ((lambda (w4680@t) ((lambda (w4682@ls/false) (if w4682@ls/false (apply (lambda (w4684@rest) (list (cons 'g w4684@rest) (list 'syntax w4677@tmp))) w4682@ls/false) ((lambda (w4686@t) ((lambda (w4688@ls/false) (if w4688@ls/false (apply (lambda () (w3007@syntax-violation '#f '"invalid syntax-rules pattern" w4664@e w4676@pat)) w4688@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4686@t))) (w2774@syntax-dispatch w4686@t '_))) w4680@t))) (w2774@syntax-dispatch w4680@t '(_ . any)))) w4676@pat)) w4671@pat* w4672@tmp*)))))))) w4668@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4666@t))) (w2774@syntax-dispatch w4666@t '(_ each-any . #(each (any any)))))) w4664@e))) (set! w2756@quasiquote-macro ((lambda () ((lambda (w4691@datum w4719@quasicons* w4721@quasicons w4723@quasiappend w4725@quasivector w4727@vquasi w4729@quasi) (begin (set! w4691@datum (lambda (w4948@x) (list (w2656@scheme-stx 'quote) (w2253@mkstx w4948@x '() '() '())))) (set! w4719@quasicons* (lambda (w4940@x w4941@y) ((letrec ((w4944@f (lambda (w4946@x) (if (null? w4946@x) w4941@y (w4721@quasicons (car w4946@x) (w4944@f (cdr w4946@x))))))) w4944@f) w4940@x))) (set! w4721@quasicons (lambda (w4902@x w4903@y) ((lambda (w4906@t) ((lambda (w4908@ls/false) (if w4908@ls/false (apply (lambda (w4910@dy) ((lambda (w4912@t) ((lambda (w4914@ls/false) (if w4914@ls/false (apply (lambda (w4916@dx) (list (w2656@scheme-stx 'quote) (cons w4916@dx w4910@dy))) w4914@ls/false) ((lambda (w4918@t) ((lambda (w4920@ls/false) (if w4920@ls/false (apply (lambda () ((lambda (w4922@t) ((lambda (w4924@ls/false) (if w4924@ls/false (apply (lambda () (list (w2656@scheme-stx 'list) w4902@x)) w4924@ls/false) ((lambda (w4926@t) ((lambda (w4928@ls/false) (if w4928@ls/false (apply (lambda () (list (w2656@scheme-stx 'cons) w4902@x w4903@y)) w4928@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4926@t))) (w2774@syntax-dispatch w4926@t '_))) w4922@t))) (w2774@syntax-dispatch w4922@t '()))) w4910@dy)) w4920@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4918@t))) (w2774@syntax-dispatch w4918@t '_))) w4912@t))) (w2774@syntax-dispatch w4912@t '(#(scheme-id quote) any)))) w4902@x)) w4908@ls/false) ((lambda (w4930@t) ((lambda (w4932@ls/false) (if w4932@ls/false (apply (lambda (w4934@stuff) (cons* (w2656@scheme-stx 'list) w4902@x w4934@stuff)) w4932@ls/false) ((lambda (w4936@t) ((lambda (w4938@ls/false) (if w4938@ls/false (apply (lambda () (list (w2656@scheme-stx 'cons) w4902@x w4903@y)) w4938@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4936@t))) (w2774@syntax-dispatch w4936@t '_))) w4930@t))) (w2774@syntax-dispatch w4930@t '(#(scheme-id list) . each-any)))) w4906@t))) (w2774@syntax-dispatch w4906@t '(#(scheme-id quote) any)))) w4903@y))) (set! w4723@quasiappend (lambda (w4876@x w4877@y) ((lambda (w4880@ls) (if (null? w4880@ls) (list (w2656@scheme-stx 'quote) '()) (if (null? (cdr w4880@ls)) (car w4880@ls) (cons* (w2656@scheme-stx 'append) w4880@ls)))) ((letrec ((w4882@f (lambda (w4884@x) (if (null? w4884@x) ((lambda (w4886@t) ((lambda (w4888@ls/false) (if w4888@ls/false (apply (lambda () '()) w4888@ls/false) ((lambda (w4890@t) ((lambda (w4892@ls/false) (if w4892@ls/false (apply (lambda () (list w4877@y)) w4892@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4890@t))) (w2774@syntax-dispatch w4890@t '_))) w4886@t))) (w2774@syntax-dispatch w4886@t '(#(scheme-id quote) ())))) w4877@y) ((lambda (w4894@t) ((lambda (w4896@ls/false) (if w4896@ls/false (apply (lambda () (w4882@f (cdr w4884@x))) w4896@ls/false) ((lambda (w4898@t) ((lambda (w4900@ls/false) (if w4900@ls/false (apply (lambda () (cons (car w4884@x) (w4882@f (cdr w4884@x)))) w4900@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4898@t))) (w2774@syntax-dispatch w4898@t '_))) w4894@t))) (w2774@syntax-dispatch w4894@t '(#(scheme-id quote) ())))) (car w4884@x)))))) w4882@f) w4876@x)))) (set! w4725@quasivector (lambda (w4826@x) ((lambda (w4828@pat-x) ((lambda (w4830@t) ((lambda (w4832@ls/false) (if w4832@ls/false (apply (lambda (w4834@x*) (list (w2656@scheme-stx 'quote) (list->vector w4834@x*))) w4832@ls/false) ((lambda (w4836@t) ((lambda (w4838@ls/false) (if w4838@ls/false (apply (lambda () ((letrec ((w4840@f (lambda (w4842@x w4843@k) ((lambda (w4846@t) ((lambda (w4848@ls/false) (if w4848@ls/false (apply (lambda (w4850@x*) (w4843@k (map (lambda (w4852@x) (list (w2656@scheme-stx 'quote) w4852@x)) w4850@x*))) w4848@ls/false) ((lambda (w4854@t) ((lambda (w4856@ls/false) (if w4856@ls/false (apply (lambda (w4858@x*) (w4843@k w4858@x*)) w4856@ls/false) ((lambda (w4860@t) ((lambda (w4862@ls/false) (if w4862@ls/false (apply (lambda (w4864@x w4865@y) (w4840@f w4865@y (lambda (w4868@ls) (w4843@k (cons w4864@x w4868@ls))))) w4862@ls/false) ((lambda (w4870@t) ((lambda (w4872@ls/false) (if w4872@ls/false (apply (lambda () (list (w2656@scheme-stx 'list->vector) w4828@pat-x)) w4872@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4870@t))) (w2774@syntax-dispatch w4870@t '_))) w4860@t))) (w2774@syntax-dispatch w4860@t '(#(scheme-id cons) any any)))) w4854@t))) (w2774@syntax-dispatch w4854@t '(#(scheme-id list) . each-any)))) w4846@t))) (w2774@syntax-dispatch w4846@t '(#(scheme-id quote) each-any)))) w4842@x)))) w4840@f) w4826@x (lambda (w4874@ls) (cons* (w2656@scheme-stx 'vector) w4874@ls)))) w4838@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4836@t))) (w2774@syntax-dispatch w4836@t '_))) w4830@t))) (w2774@syntax-dispatch w4830@t '(#(scheme-id quote) each-any)))) w4828@pat-x)) w4826@x))) (set! w4727@vquasi (lambda (w4792@p w4793@lev) ((lambda (w4796@t) ((lambda (w4798@ls/false) (if w4798@ls/false (apply (lambda (w4800@p w4801@q) ((lambda (w4804@t) ((lambda (w4806@ls/false) (if w4806@ls/false (apply (lambda (w4808@p) (if (= w4793@lev '0) (w4719@quasicons* w4808@p (w4727@vquasi w4801@q w4793@lev)) (w4721@quasicons (w4721@quasicons (w4691@datum 'unquote) (w4729@quasi w4808@p (- w4793@lev '1))) (w4727@vquasi w4801@q w4793@lev)))) w4806@ls/false) ((lambda (w4810@t) ((lambda (w4812@ls/false) (if w4812@ls/false (apply (lambda (w4814@p) (if (= w4793@lev '0) (w4723@quasiappend w4814@p (w4727@vquasi w4801@q w4793@lev)) (w4721@quasicons (w4721@quasicons (w4691@datum 'unquote-splicing) (w4729@quasi w4814@p (- w4793@lev '1))) (w4727@vquasi w4801@q w4793@lev)))) w4812@ls/false) ((lambda (w4816@t) ((lambda (w4818@ls/false) (if w4818@ls/false (apply (lambda (w4820@p) (w4721@quasicons (w4729@quasi w4820@p w4793@lev) (w4727@vquasi w4801@q w4793@lev))) w4818@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4816@t))) (w2774@syntax-dispatch w4816@t 'any))) w4810@t))) (w2774@syntax-dispatch w4810@t '(#(scheme-id unquote-splicing) . each-any)))) w4804@t))) (w2774@syntax-dispatch w4804@t '(#(scheme-id unquote) . each-any)))) w4800@p)) w4798@ls/false) ((lambda (w4822@t) ((lambda (w4824@ls/false) (if w4824@ls/false (apply (lambda () (list (w2656@scheme-stx 'quote) '())) w4824@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4822@t))) (w2774@syntax-dispatch w4822@t '()))) w4796@t))) (w2774@syntax-dispatch w4796@t '(any . any)))) w4792@p))) (set! w4729@quasi (lambda (w4738@p w4739@lev) ((lambda (w4742@t) ((lambda (w4744@ls/false) (if w4744@ls/false (apply (lambda (w4746@p) (if (= w4739@lev '0) w4746@p (w4721@quasicons (w4691@datum 'unquote) (w4729@quasi (list w4746@p) (- w4739@lev '1))))) w4744@ls/false) ((lambda (w4748@t) ((lambda (w4750@ls/false) (if w4750@ls/false (apply (lambda (w4752@p w4753@q) (if (= w4739@lev '0) (w4719@quasicons* w4752@p (w4729@quasi w4753@q w4739@lev)) (w4721@quasicons (w4721@quasicons (w4691@datum 'unquote) (w4729@quasi w4752@p (- w4739@lev '1))) (w4729@quasi w4753@q w4739@lev)))) w4750@ls/false) ((lambda (w4756@t) ((lambda (w4758@ls/false) (if w4758@ls/false (apply (lambda (w4760@p w4761@q) (if (= w4739@lev '0) (w4723@quasiappend w4760@p (w4729@quasi w4761@q w4739@lev)) (w4721@quasicons (w4721@quasicons (w4691@datum 'unquote-splicing) (w4729@quasi w4760@p (- w4739@lev '1))) (w4729@quasi w4761@q w4739@lev)))) w4758@ls/false) ((lambda (w4764@t) ((lambda (w4766@ls/false) (if w4766@ls/false (apply (lambda (w4768@p) (w4721@quasicons (w4691@datum 'quasiquote) (w4729@quasi (list w4768@p) (+ w4739@lev '1)))) w4766@ls/false) ((lambda (w4770@t) ((lambda (w4772@ls/false) (if w4772@ls/false (apply (lambda (w4774@p w4775@q) (w4721@quasicons (w4729@quasi w4774@p w4739@lev) (w4729@quasi w4775@q w4739@lev))) w4772@ls/false) ((lambda (w4778@t) ((lambda (w4780@ls/false) (if (and w4780@ls/false (apply (lambda (w4782@x) (not (w2221@stx? w4782@x))) w4780@ls/false)) (apply (lambda (w4784@x) (w4725@quasivector (w4727@vquasi w4784@x w4739@lev))) w4780@ls/false) ((lambda (w4786@t) ((lambda (w4788@ls/false) (if w4788@ls/false (apply (lambda (w4790@p) (list (w2656@scheme-stx 'quote) w4790@p)) w4788@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4786@t))) (w2774@syntax-dispatch w4786@t 'any))) w4778@t))) (w2774@syntax-dispatch w4778@t '#(vector each-any)))) w4770@t))) (w2774@syntax-dispatch w4770@t '(any . any)))) w4764@t))) (w2774@syntax-dispatch w4764@t '(#(scheme-id quasiquote) any)))) w4756@t))) (w2774@syntax-dispatch w4756@t '((#(scheme-id unquote-splicing) . each-any) . any)))) w4748@t))) (w2774@syntax-dispatch w4748@t '((#(scheme-id unquote) . each-any) . any)))) w4742@t))) (w2774@syntax-dispatch w4742@t '(#(scheme-id unquote) any)))) w4738@p))) (lambda (w4730@x) ((lambda (w4732@t) ((lambda (w4734@ls/false) (if w4734@ls/false (apply (lambda (w4736@e) (w4729@quasi w4736@e '0)) w4734@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4732@t))) (w2774@syntax-dispatch w4732@t '(_ any)))) w4730@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! w2758@quasisyntax-macro ((lambda () ((lambda (w4951@quasi) (begin (set! w4951@quasi (lambda (w4975@p w4976@lev) ((lambda (w4979@t) ((lambda (w4981@ls/false) (if w4981@ls/false (apply (lambda (w4983@p) (if (= w4976@lev '0) ((lambda (w4985@g) (values (list w4985@g) (list w4983@p) w4985@g)) (w1161@w925@gensym)) (call-with-values (lambda () (w4951@quasi w4983@p (- w4976@lev '1))) (lambda (w4990@w4987@lhs* w4991@w4988@rhs* w4992@w4989@p) ((lambda (w4996@p w4997@rhs* w4998@lhs*) (values w4998@lhs* w4997@rhs* (list 'unsyntax w4996@p))) w4992@w4989@p w4991@w4988@rhs* w4990@w4987@lhs*))))) w4981@ls/false) ((lambda (w5002@t) ((lambda (w5004@ls/false) (if (and w5004@ls/false (apply (lambda () (= w4976@lev '0)) w5004@ls/false)) (apply (lambda () (w3007@syntax-violation '#f '"incorrect use of unsyntax" w4975@p)) w5004@ls/false) ((lambda (w5006@t) ((lambda (w5008@ls/false) (if w5008@ls/false (apply (lambda (w5010@p* w5011@q) (call-with-values (lambda () (w4951@quasi w5011@q w4976@lev)) (lambda (w5017@w5014@lhs* w5018@w5015@rhs* w5019@w5016@q) ((lambda (w5023@q w5024@rhs* w5025@lhs*) (if (= w4976@lev '0) ((lambda (w5029@g*) (values (append w5029@g* w5025@lhs*) (append w5010@p* w5024@rhs*) (append w5029@g* w5023@q))) (map (lambda (w5031@x) (w1161@w925@gensym)) w5010@p*)) (call-with-values (lambda () (w4951@quasi w5010@p* (- w4976@lev '1))) (lambda (w5036@w5033@lhs2* w5037@w5034@rhs2* w5038@w5035@p*) ((lambda (w5042@p* w5043@rhs2* w5044@lhs2*) (values (append w5044@lhs2* w5025@lhs*) (append w5043@rhs2* w5024@rhs*) (cons (cons 'unsyntax w5042@p*) w5023@q))) w5038@w5035@p* w5037@w5034@rhs2* w5036@w5033@lhs2*))))) w5019@w5016@q w5018@w5015@rhs* w5017@w5014@lhs*)))) w5008@ls/false) ((lambda (w5048@t) ((lambda (w5050@ls/false) (if w5050@ls/false (apply (lambda (w5052@p* w5053@q) (call-with-values (lambda () (w4951@quasi w5053@q w4976@lev)) (lambda (w5059@w5056@lhs* w5060@w5057@rhs* w5061@w5058@q) ((lambda (w5065@q w5066@rhs* w5067@lhs*) (if (= w4976@lev '0) ((lambda (w5071@g*) (values (append (map (lambda (w5073@g) (cons w5073@g '(...))) w5071@g*) w5067@lhs*) (append w5052@p* w5066@rhs*) (append (apply append (map (lambda (w5075@g) (cons w5075@g '(...))) w5071@g*)) w5065@q))) (map (lambda (w5077@x) (w1161@w925@gensym)) w5052@p*)) (call-with-values (lambda () (w4951@quasi w5052@p* (- w4976@lev '1))) (lambda (w5082@w5079@lhs2* w5083@w5080@rhs2* w5084@w5081@p*) ((lambda (w5088@p* w5089@rhs2* w5090@lhs2*) (values (append w5090@lhs2* w5067@lhs*) (append w5089@rhs2* w5066@rhs*) (cons (cons 'unsyntax-splicing w5088@p*) w5065@q))) w5084@w5081@p* w5083@w5080@rhs2* w5082@w5079@lhs2*))))) w5061@w5058@q w5060@w5057@rhs* w5059@w5056@lhs*)))) w5050@ls/false) ((lambda (w5094@t) ((lambda (w5096@ls/false) (if (and w5096@ls/false (apply (lambda () (= w4976@lev '0)) w5096@ls/false)) (apply (lambda () (w3007@syntax-violation '#f '"incorrect use of unsyntax-splicing" w4975@p)) w5096@ls/false) ((lambda (w5098@t) ((lambda (w5100@ls/false) (if w5100@ls/false (apply (lambda (w5102@p) (call-with-values (lambda () (w4951@quasi w5102@p (+ w4976@lev '1))) (lambda (w5107@w5104@lhs* w5108@w5105@rhs* w5109@w5106@p) ((lambda (w5113@p w5114@rhs* w5115@lhs*) (values w5115@lhs* w5114@rhs* (list 'quasisyntax w5113@p))) w5109@w5106@p w5108@w5105@rhs* w5107@w5104@lhs*)))) w5100@ls/false) ((lambda (w5119@t) ((lambda (w5121@ls/false) (if w5121@ls/false (apply (lambda (w5123@p w5124@q) (call-with-values (lambda () (w4951@quasi w5123@p w4976@lev)) (lambda (w5133@w5127@lhs* w5134@w5128@rhs* w5135@w5129@p) (call-with-values (lambda () (w4951@quasi w5124@q w4976@lev)) (lambda (w5139@w5130@lhs2* w5140@w5131@rhs2* w5141@w5132@q) ((lambda (w5145@q w5146@rhs2* w5147@lhs2* w5148@p w5149@rhs* w5150@lhs*) (values (append w5147@lhs2* w5150@lhs*) (append w5146@rhs2* w5149@rhs*) (cons w5148@p w5145@q))) w5141@w5132@q w5140@w5131@rhs2* w5139@w5130@lhs2* w5135@w5129@p w5134@w5128@rhs* w5133@w5127@lhs*)))))) w5121@ls/false) ((lambda (w5157@t) ((lambda (w5159@ls/false) (if w5159@ls/false (apply (lambda (w5161@x*) (call-with-values (lambda () (w4951@quasi w5161@x* w4976@lev)) (lambda (w5166@w5163@lhs* w5167@w5164@rhs* w5168@w5165@x*) ((lambda (w5172@x* w5173@rhs* w5174@lhs*) (values w5174@lhs* w5173@rhs* (list->vector w5172@x*))) w5168@w5165@x* w5167@w5164@rhs* w5166@w5163@lhs*)))) w5159@ls/false) ((lambda (w5178@t) ((lambda (w5180@ls/false) (if w5180@ls/false (apply (lambda () (values '() '() w4975@p)) w5180@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5178@t))) (w2774@syntax-dispatch w5178@t '_))) w5157@t))) (w2774@syntax-dispatch w5157@t '#(vector each-any)))) w5119@t))) (w2774@syntax-dispatch w5119@t '(any . any)))) w5098@t))) (w2774@syntax-dispatch w5098@t '(#(scheme-id quasisyntax) any)))) w5094@t))) (w2774@syntax-dispatch w5094@t '#(scheme-id unsyntax-splicing)))) w5048@t))) (w2774@syntax-dispatch w5048@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) w5006@t))) (w2774@syntax-dispatch w5006@t '((#(scheme-id unsyntax) . each-any) . any)))) w5002@t))) (w2774@syntax-dispatch w5002@t '#(scheme-id unsyntax)))) w4979@t))) (w2774@syntax-dispatch w4979@t '(#(scheme-id unsyntax) any)))) w4975@p))) (lambda (w4952@x) ((lambda (w4954@t) ((lambda (w4956@ls/false) (if w4956@ls/false (apply (lambda (w4958@e) (call-with-values (lambda () (w4951@quasi w4958@e '0)) (lambda (w4963@w4960@lhs* w4964@w4961@rhs* w4965@w4962@v) ((lambda (w4969@v w4970@rhs* w4971@lhs*) (w2700@bless (list 'syntax-case (cons 'list w4970@rhs*) '() (list w4971@lhs* (list 'syntax w4969@v))))) w4965@w4962@v w4964@w4961@rhs* w4963@w4960@lhs*)))) w4956@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w4954@t))) (w2774@syntax-dispatch w4954@t '(_ any)))) w4952@x)))) '#f)))) (set! w2760@define-struct-macro (lambda (w5182@stx) (w3007@syntax-violation '#f '"define-struct not supported" w5182@stx))) (set! w2762@define-record-type-macro (lambda (w5184@x) ((lambda (w5187@id w5189@get-record-name w5191@get-record-constructor-name w5193@get-record-predicate-name w5195@get-clause w5197@foo-rtd-code w5199@parent-rtd-code w5201@parent-rcd-code w5203@foo-rcd-code w5205@get-protocol-code w5207@get-fields w5209@get-mutator-indices w5211@get-mutators w5213@get-accessors w5215@enumerate w5217@do-define-record w5219@verify-clauses) (begin (set! w5187@id (lambda (w5686@ctxt . w5688@str*) (w3011@datum->syntax w5686@ctxt (string->symbol (apply string-append (map (lambda (w5690@x) (if (symbol? w5690@x) (symbol->string w5690@x) (if (string? w5690@x) w5690@x (assertion-violation 'define-record-type '"BUG")))) w5688@str*)))))) (set! w5189@get-record-name (lambda (w5668@spec) ((lambda (w5670@t) ((lambda (w5672@ls/false) (if w5672@ls/false (apply (lambda (w5674@foo w5675@make-foo w5676@foo?) w5674@foo) w5672@ls/false) ((lambda (w5680@t) ((lambda (w5682@ls/false) (if w5682@ls/false (apply (lambda (w5684@foo) w5684@foo) w5682@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5680@t))) (w2774@syntax-dispatch w5680@t 'any))) w5670@t))) (w2774@syntax-dispatch w5670@t '(any any any)))) w5668@spec))) (set! w5191@get-record-constructor-name (lambda (w5648@spec) ((lambda (w5650@t) ((lambda (w5652@ls/false) (if w5652@ls/false (apply (lambda (w5654@foo w5655@make-foo w5656@foo?) w5655@make-foo) w5652@ls/false) ((lambda (w5660@t) ((lambda (w5662@ls/false) (if (and w5662@ls/false (apply (lambda (w5664@foo) (w2277@id? w5664@foo)) w5662@ls/false)) (apply (lambda (w5666@foo) (w5187@id w5666@foo '"make-" (w2299@stx->datum w5666@foo))) w5662@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5660@t))) (w2774@syntax-dispatch w5660@t 'any))) w5650@t))) (w2774@syntax-dispatch w5650@t '(any any any)))) w5648@spec))) (set! w5193@get-record-predicate-name (lambda (w5628@spec) ((lambda (w5630@t) ((lambda (w5632@ls/false) (if w5632@ls/false (apply (lambda (w5634@foo w5635@make-foo w5636@foo?) w5636@foo?) w5632@ls/false) ((lambda (w5640@t) ((lambda (w5642@ls/false) (if (and w5642@ls/false (apply (lambda (w5644@foo) (w2277@id? w5644@foo)) w5642@ls/false)) (apply (lambda (w5646@foo) (w5187@id w5646@foo (w2299@stx->datum w5646@foo) '"?")) w5642@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5640@t))) (w2774@syntax-dispatch w5640@t 'any))) w5630@t))) (w2774@syntax-dispatch w5630@t '(any any any)))) w5628@spec))) (set! w5195@get-clause (lambda (w5610@id w5611@ls) ((lambda (w5614@t) ((lambda (w5616@ls/false) (if w5616@ls/false (apply (lambda () '#f) w5616@ls/false) ((lambda (w5618@t) ((lambda (w5620@ls/false) (if w5620@ls/false (apply (lambda (w5622@x w5623@rest w5624@ls) (if (w2285@free-id=? (w2700@bless w5610@id) w5622@x) (cons w5622@x w5623@rest) (w5195@get-clause w5610@id w5624@ls))) w5620@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5618@t))) (w2774@syntax-dispatch w5618@t '((any . any) . any)))) w5614@t))) (w2774@syntax-dispatch w5614@t '()))) w5611@ls))) (set! w5197@foo-rtd-code (lambda (w5528@name w5529@clause* w5530@parent-rtd-code) ((lambda (w5535@convert-field-spec*) (begin (set! w5535@convert-field-spec* (lambda (w5584@ls) (list->vector (map (lambda (w5586@x) ((lambda (w5588@t) ((lambda (w5590@ls/false) (if w5590@ls/false (apply (lambda (w5592@name w5593@rest) (list 'mutable w5592@name)) w5590@ls/false) ((lambda (w5596@t) ((lambda (w5598@ls/false) (if w5598@ls/false (apply (lambda (w5600@name w5601@rest) (list 'immutable w5600@name)) w5598@ls/false) ((lambda (w5604@t) ((lambda (w5606@ls/false) (if w5606@ls/false (apply (lambda (w5608@name) (list 'immutable w5608@name)) w5606@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5604@t))) (w2774@syntax-dispatch w5604@t 'any))) w5596@t))) (w2774@syntax-dispatch w5596@t '(#(scheme-id immutable) any . any)))) w5588@t))) (w2774@syntax-dispatch w5588@t '(#(scheme-id mutable) any . any)))) w5586@x)) w5584@ls)))) ((lambda (w5536@uid-code w5537@sealed? w5538@opaque? w5539@fields) (w2700@bless (list 'make-record-type-descriptor (list 'quote w5528@name) w5530@parent-rtd-code w5536@uid-code w5537@sealed? w5538@opaque? w5539@fields))) ((lambda (w5544@t) ((lambda (w5546@ls/false) (if w5546@ls/false (apply (lambda () (list 'quote (w1161@w925@gensym))) w5546@ls/false) ((lambda (w5548@t) ((lambda (w5550@ls/false) (if w5550@ls/false (apply (lambda (w5552@uid) (list 'quote w5552@uid)) w5550@ls/false) ((lambda (w5554@t) ((lambda (w5556@ls/false) (if w5556@ls/false (apply (lambda () '#f) w5556@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5554@t))) (w2774@syntax-dispatch w5554@t '_))) w5548@t))) (w2774@syntax-dispatch w5548@t '(_ any)))) w5544@t))) (w2774@syntax-dispatch w5544@t '(_)))) (w5195@get-clause 'nongenerative w5529@clause*)) ((lambda (w5558@t) ((lambda (w5560@ls/false) (if w5560@ls/false (apply (lambda () '#t) w5560@ls/false) ((lambda (w5562@t) ((lambda (w5564@ls/false) (if w5564@ls/false (apply (lambda () '#f) w5564@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5562@t))) (w2774@syntax-dispatch w5562@t '_))) w5558@t))) (w2774@syntax-dispatch w5558@t '(_ #(atom #t))))) (w5195@get-clause 'sealed w5529@clause*)) ((lambda (w5566@t) ((lambda (w5568@ls/false) (if w5568@ls/false (apply (lambda () '#t) w5568@ls/false) ((lambda (w5570@t) ((lambda (w5572@ls/false) (if w5572@ls/false (apply (lambda () '#f) w5572@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5570@t))) (w2774@syntax-dispatch w5570@t '_))) w5566@t))) (w2774@syntax-dispatch w5566@t '(_ #(atom #t))))) (w5195@get-clause 'opaque w5529@clause*)) ((lambda (w5574@t) ((lambda (w5576@ls/false) (if w5576@ls/false (apply (lambda (w5578@field-spec*) (list 'quote (w5535@convert-field-spec* w5578@field-spec*))) w5576@ls/false) ((lambda (w5580@t) ((lambda (w5582@ls/false) (if w5582@ls/false (apply (lambda () ''#()) w5582@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5580@t))) (w2774@syntax-dispatch w5580@t '_))) w5574@t))) (w2774@syntax-dispatch w5574@t '(_ . each-any)))) (w5195@get-clause 'fields w5529@clause*))))) '#f))) (set! w5199@parent-rtd-code (lambda (w5504@clause*) ((lambda (w5506@t) ((lambda (w5508@ls/false) (if w5508@ls/false (apply (lambda (w5510@name) (list 'record-type-descriptor w5510@name)) w5508@ls/false) ((lambda (w5512@t) ((lambda (w5514@ls/false) (if w5514@ls/false (apply (lambda () ((lambda (w5516@t) ((lambda (w5518@ls/false) (if w5518@ls/false (apply (lambda (w5520@rtd w5521@rcd) w5520@rtd) w5518@ls/false) ((lambda (w5524@t) ((lambda (w5526@ls/false) (if w5526@ls/false (apply (lambda () '#f) w5526@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5524@t))) (w2774@syntax-dispatch w5524@t '#(atom #f)))) w5516@t))) (w2774@syntax-dispatch w5516@t '(_ any any)))) (w5195@get-clause 'parent-rtd w5504@clause*))) w5514@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5512@t))) (w2774@syntax-dispatch w5512@t '#(atom #f)))) w5506@t))) (w2774@syntax-dispatch w5506@t '(_ any)))) (w5195@get-clause 'parent w5504@clause*)))) (set! w5201@parent-rcd-code (lambda (w5480@clause*) ((lambda (w5482@t) ((lambda (w5484@ls/false) (if w5484@ls/false (apply (lambda (w5486@name) (list 'record-constructor-descriptor w5486@name)) w5484@ls/false) ((lambda (w5488@t) ((lambda (w5490@ls/false) (if w5490@ls/false (apply (lambda () ((lambda (w5492@t) ((lambda (w5494@ls/false) (if w5494@ls/false (apply (lambda (w5496@rtd w5497@rcd) w5497@rcd) w5494@ls/false) ((lambda (w5500@t) ((lambda (w5502@ls/false) (if w5502@ls/false (apply (lambda () '#f) w5502@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5500@t))) (w2774@syntax-dispatch w5500@t '#(atom #f)))) w5492@t))) (w2774@syntax-dispatch w5492@t '(_ any any)))) (w5195@get-clause 'parent-rtd w5480@clause*))) w5490@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5488@t))) (w2774@syntax-dispatch w5488@t '#(atom #f)))) w5482@t))) (w2774@syntax-dispatch w5482@t '(_ any)))) (w5195@get-clause 'parent w5480@clause*)))) (set! w5203@foo-rcd-code (lambda (w5472@clause* w5473@foo-rtd w5474@protocol w5475@parent-rcd-code) (list 'make-record-constructor-descriptor w5473@foo-rtd w5475@parent-rcd-code w5474@protocol))) (set! w5205@get-protocol-code (lambda (w5460@clause*) ((lambda (w5462@t) ((lambda (w5464@ls/false) (if w5464@ls/false (apply (lambda (w5466@expr) w5466@expr) w5464@ls/false) ((lambda (w5468@t) ((lambda (w5470@ls/false) (if w5470@ls/false (apply (lambda () '#f) w5470@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5468@t))) (w2774@syntax-dispatch w5468@t '_))) w5462@t))) (w2774@syntax-dispatch w5462@t '(_ any)))) (w5195@get-clause 'protocol w5460@clause*)))) (set! w5207@get-fields (lambda (w5442@clause*) ((lambda (w5444@t) ((lambda (w5446@ls/false) (if w5446@ls/false (apply (lambda () '()) w5446@ls/false) ((lambda (w5448@t) ((lambda (w5450@ls/false) (if w5450@ls/false (apply (lambda (w5452@f*) w5452@f*) w5450@ls/false) ((lambda (w5454@t) ((lambda (w5456@ls/false) (if w5456@ls/false (apply (lambda (w5458@rest) (w5207@get-fields w5458@rest)) w5456@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5454@t))) (w2774@syntax-dispatch w5454@t '(_ . any)))) w5448@t))) (w2774@syntax-dispatch w5448@t '((#(scheme-id fields) . each-any) . _)))) w5444@t))) (w2774@syntax-dispatch w5444@t '()))) w5442@clause*))) (set! w5209@get-mutator-indices (lambda (w5418@fields) ((letrec ((w5420@f (lambda (w5422@fields w5423@i) ((lambda (w5426@t) ((lambda (w5428@ls/false) (if w5428@ls/false (apply (lambda () '()) w5428@ls/false) ((lambda (w5430@t) ((lambda (w5432@ls/false) (if w5432@ls/false (apply (lambda (w5434@rest) (cons w5423@i (w5420@f w5434@rest (+ w5423@i '1)))) w5432@ls/false) ((lambda (w5436@t) ((lambda (w5438@ls/false) (if w5438@ls/false (apply (lambda (w5440@rest) (w5420@f w5440@rest (+ w5423@i '1))) w5438@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5436@t))) (w2774@syntax-dispatch w5436@t '(_ . any)))) w5430@t))) (w2774@syntax-dispatch w5430@t '((#(scheme-id mutable) . _) . any)))) w5426@t))) (w2774@syntax-dispatch w5426@t '()))) w5422@fields)))) w5420@f) w5418@fields '0))) (set! w5211@get-mutators (lambda (w5376@foo w5377@fields) ((lambda (w5381@gen-name) (begin (set! w5381@gen-name (lambda (w5416@x) (w3011@datum->syntax w5376@foo (string->symbol (string-append (symbol->string (w3013@syntax->datum w5376@foo)) '"-" (symbol->string (w3013@syntax->datum w5416@x)) '"-set!"))))) ((letrec ((w5382@f (lambda (w5384@fields) ((lambda (w5386@t) ((lambda (w5388@ls/false) (if w5388@ls/false (apply (lambda () '()) w5388@ls/false) ((lambda (w5390@t) ((lambda (w5392@ls/false) (if w5392@ls/false (apply (lambda (w5394@name w5395@accessor w5396@mutator w5397@rest) (cons w5396@mutator (w5382@f w5397@rest))) w5392@ls/false) ((lambda (w5402@t) ((lambda (w5404@ls/false) (if w5404@ls/false (apply (lambda (w5406@name w5407@rest) (cons (w5381@gen-name w5406@name) (w5382@f w5407@rest))) w5404@ls/false) ((lambda (w5410@t) ((lambda (w5412@ls/false) (if w5412@ls/false (apply (lambda (w5414@rest) (w5382@f w5414@rest)) w5412@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5410@t))) (w2774@syntax-dispatch w5410@t '(_ . any)))) w5402@t))) (w2774@syntax-dispatch w5402@t '((#(scheme-id mutable) any) . any)))) w5390@t))) (w2774@syntax-dispatch w5390@t '((#(scheme-id mutable) any any any) . any)))) w5386@t))) (w2774@syntax-dispatch w5386@t '()))) w5384@fields)))) w5382@f) w5377@fields))) '#f))) (set! w5213@get-accessors (lambda (w5308@foo w5309@fields) ((lambda (w5313@gen-name) (begin (set! w5313@gen-name (lambda (w5374@x) (w3011@datum->syntax w5308@foo (string->symbol (string-append (symbol->string (w3013@syntax->datum w5308@foo)) '"-" (symbol->string (w3013@syntax->datum w5374@x))))))) (map (lambda (w5314@field) ((lambda (w5316@t) ((lambda (w5318@ls/false) (if (and w5318@ls/false (apply (lambda (w5320@name w5321@accessor w5322@mutator) (w2277@id? w5321@accessor)) w5318@ls/false)) (apply (lambda (w5326@name w5327@accessor w5328@mutator) w5327@accessor) w5318@ls/false) ((lambda (w5332@t) ((lambda (w5334@ls/false) (if (and w5334@ls/false (apply (lambda (w5336@name w5337@accessor) (w2277@id? w5337@accessor)) w5334@ls/false)) (apply (lambda (w5340@name w5341@accessor) w5341@accessor) w5334@ls/false) ((lambda (w5344@t) ((lambda (w5346@ls/false) (if (and w5346@ls/false (apply (lambda (w5348@name) (w2277@id? w5348@name)) w5346@ls/false)) (apply (lambda (w5350@name) (w5313@gen-name w5350@name)) w5346@ls/false) ((lambda (w5352@t) ((lambda (w5354@ls/false) (if (and w5354@ls/false (apply (lambda (w5356@name) (w2277@id? w5356@name)) w5354@ls/false)) (apply (lambda (w5358@name) (w5313@gen-name w5358@name)) w5354@ls/false) ((lambda (w5360@t) ((lambda (w5362@ls/false) (if (and w5362@ls/false (apply (lambda (w5364@name) (w2277@id? w5364@name)) w5362@ls/false)) (apply (lambda (w5366@name) (w5313@gen-name w5366@name)) w5362@ls/false) ((lambda (w5368@t) ((lambda (w5370@ls/false) (if w5370@ls/false (apply (lambda (w5372@others) (w3007@syntax-violation '#f '"invalid field spec" w5314@field)) w5370@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5368@t))) (w2774@syntax-dispatch w5368@t 'any))) w5360@t))) (w2774@syntax-dispatch w5360@t 'any))) w5352@t))) (w2774@syntax-dispatch w5352@t '(#(scheme-id immutable) any)))) w5344@t))) (w2774@syntax-dispatch w5344@t '(#(scheme-id mutable) any)))) w5332@t))) (w2774@syntax-dispatch w5332@t '(#(scheme-id immutable) any any)))) w5316@t))) (w2774@syntax-dispatch w5316@t '(#(scheme-id mutable) any any any)))) w5314@field)) w5309@fields))) '#f))) (set! w5215@enumerate (lambda (w5300@ls) ((letrec ((w5302@f (lambda (w5304@ls w5305@i) (if (null? w5304@ls) '() (cons w5305@i (w5302@f (cdr w5304@ls) (+ w5305@i '1))))))) w5302@f) w5300@ls '0))) (set! w5217@do-define-record (lambda (w5260@namespec w5261@clause*) ((lambda (w5264@foo) ((lambda (w5266@foo-rtd) ((lambda (w5268@foo-rcd) ((lambda (w5270@protocol) ((lambda (w5272@make-foo) ((lambda (w5274@fields) ((lambda (w5276@idx*) ((lambda (w5278@foo-x*) ((lambda (w5280@set-foo-x!*) ((lambda (w5282@set-foo-idx*) ((lambda (w5284@foo?) ((lambda (w5286@foo-rtd-code) ((lambda (w5288@foo-rcd-code) ((lambda (w5290@protocol-code) ((lambda () (w2700@bless (cons 'begin (cons (list 'define w5266@foo-rtd w5286@foo-rtd-code) (cons (list 'define w5270@protocol w5290@protocol-code) (cons (list 'define w5268@foo-rcd w5288@foo-rcd-code) (cons (list 'define-syntax w5264@foo (list 'list ''$rtd (list 'syntax w5266@foo-rtd) (list 'syntax w5268@foo-rcd))) (cons (list 'define w5284@foo? (list 'record-predicate w5266@foo-rtd)) (cons (list 'define w5272@make-foo (list 'record-constructor w5268@foo-rcd)) (append (map (lambda (w5292@foo-x w5293@idx) (list 'define w5292@foo-x (list 'record-accessor w5266@foo-rtd w5293@idx))) w5278@foo-x* w5276@idx*) (map (lambda (w5296@set-foo-x! w5297@idx) (list 'define w5296@set-foo-x! (list 'record-mutator w5266@foo-rtd w5297@idx))) w5280@set-foo-x!* w5282@set-foo-idx*))))))))))))) (w5205@get-protocol-code w5261@clause*))) (w5203@foo-rcd-code w5261@clause* w5266@foo-rtd w5270@protocol (w5201@parent-rcd-code w5261@clause*)))) (w5197@foo-rtd-code w5264@foo w5261@clause* (w5199@parent-rtd-code w5261@clause*)))) (w5193@get-record-predicate-name w5260@namespec))) (w5209@get-mutator-indices w5274@fields))) (w5211@get-mutators w5264@foo w5274@fields))) (w5213@get-accessors w5264@foo w5274@fields))) (w5215@enumerate w5274@fields))) (w5207@get-fields w5261@clause*))) (w5191@get-record-constructor-name w5260@namespec))) (w1161@w925@gensym))) (w1161@w925@gensym))) (w1161@w925@gensym))) (w5189@get-record-name w5260@namespec)))) (set! w5219@verify-clauses (lambda (w5228@x w5229@cls*) ((lambda (w5233@valid-kwds w5235@free-id-member?) (begin (set! w5233@valid-kwds (map w2700@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! w5235@free-id-member? (lambda (w5256@x w5257@ls) (and (pair? w5257@ls) (or (w2285@free-id=? w5256@x (car w5257@ls)) (w5235@free-id-member? w5256@x (cdr w5257@ls)))))) ((letrec ((w5236@f (lambda (w5238@cls* w5239@seen*) (if (not (null? w5238@cls*)) ((lambda (w5242@t) ((lambda (w5244@ls/false) (if w5244@ls/false (apply (lambda (w5246@kwd w5247@rest) (if (or (not (w2277@id? w5246@kwd)) (not (w5235@free-id-member? w5246@kwd w5233@valid-kwds))) (w3007@syntax-violation '#f '"not a valid define-record-type keyword" w5246@kwd) (if (w2291@bound-id-member? w5246@kwd w5239@seen*) (w3007@syntax-violation '#f '"duplicate use of keyword " w5228@x w5246@kwd) (w5236@f (cdr w5238@cls*) (cons w5246@kwd w5239@seen*))))) w5244@ls/false) ((lambda (w5250@t) ((lambda (w5252@ls/false) (if w5252@ls/false (apply (lambda (w5254@cls) (w3007@syntax-violation '#f '"malformed define-record-type clause" w5254@cls)) w5252@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5250@t))) (w2774@syntax-dispatch w5250@t 'any))) w5242@t))) (w2774@syntax-dispatch w5242@t '(any . any)))) (car w5238@cls*)) (void))))) w5236@f) w5229@cls* '()))) '#f '#f))) ((lambda (w5220@t) ((lambda (w5222@ls/false) (if w5222@ls/false (apply (lambda (w5224@namespec w5225@clause*) (begin (w5219@verify-clauses w5184@x w5225@clause*) (w5217@do-define-record w5224@namespec w5225@clause*))) w5222@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5220@t))) (w2774@syntax-dispatch w5220@t '(_ any . each-any)))) w5184@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! w2764@define-condition-type-macro (lambda (w5692@x) ((lambda (w5695@mkname) (begin (set! w5695@mkname (lambda (w5740@name w5741@suffix) (w3011@datum->syntax w5740@name (string->symbol (string-append (symbol->string (w3013@syntax->datum w5740@name)) w5741@suffix))))) ((lambda (w5696@t) ((lambda (w5698@ls/false) (if (and w5698@ls/false (apply (lambda (w5700@ctxt w5701@name w5702@super w5703@constructor w5704@predicate w5705@field* w5706@accessor*) (and (w2277@id? w5701@name) (w2277@id? w5702@super) (w2277@id? w5703@constructor) (w2277@id? w5704@predicate) (for-all w2277@id? w5705@field*) (for-all w2277@id? w5706@accessor*))) w5698@ls/false)) (apply (lambda (w5714@ctxt w5715@name w5716@super w5717@constructor w5718@predicate w5719@field* w5720@accessor*) ((lambda (w5728@aux-accessor*) (w2700@bless (cons 'begin (cons (cons 'define-record-type (cons (list w5715@name w5717@constructor (w1161@w925@gensym)) (cons (list 'parent w5716@super) (cons (cons 'fields (map (lambda (w5730@field w5731@aux) (list 'immutable w5730@field w5731@aux)) w5719@field* w5728@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define w5718@predicate (list 'condition-predicate (list 'record-type-descriptor w5715@name))) (map (lambda (w5734@accessor w5735@aux) (list 'define w5734@accessor (list 'condition-accessor (list 'record-type-descriptor w5715@name) w5735@aux))) w5720@accessor* w5728@aux-accessor*)))))) (map (lambda (w5738@x) (w1161@w925@gensym)) w5720@accessor*))) w5698@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5696@t))) (w2774@syntax-dispatch w5696@t '(any any any any any . #(each (any any)))))) w5692@x))) '#f))) (set! w2766@incorrect-usage-macro (lambda (w5744@e) (w3007@syntax-violation '#f '"incorrect usage of auxiliary keyword" w5744@e))) (set! w2768@parameterize-macro (lambda (w5746@e) ((lambda (w5748@t) ((lambda (w5750@ls/false) (if w5750@ls/false (apply (lambda (w5752@b w5753@b*) (w2700@bless (cons 'let (cons '() (cons w5752@b w5753@b*))))) w5750@ls/false) ((lambda (w5756@t) ((lambda (w5758@ls/false) (if w5758@ls/false (apply (lambda (w5760@olhs* w5761@orhs* w5762@b w5763@b*) ((lambda (w5768@lhs* w5769@rhs*) (w2700@bless (cons (list 'lambda (append w5768@lhs* w5769@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (w5772@lhs w5773@rhs) (list 'let (list (list 't (list w5772@lhs))) (list w5772@lhs w5773@rhs) (cons 'set! (cons w5773@rhs '(t))))) w5768@lhs* w5769@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons w5762@b w5763@b*))) '(swap)))))) (append w5760@olhs* w5761@orhs*)))) (w2989@generate-temporaries w5760@olhs*) (w2989@generate-temporaries w5761@orhs*))) w5758@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5756@t))) (w2774@syntax-dispatch w5756@t '(_ #(each (any any)) any . each-any)))) w5748@t))) (w2774@syntax-dispatch w5748@t '(_ () any . each-any)))) w5746@e))) (set! w2770@foreign-call-transformer (lambda (w5776@e w5777@r w5778@mr) ((lambda (w5782@t) ((lambda (w5784@ls/false) (if w5784@ls/false (apply (lambda (w5786@name w5787@arg*) (cons 'foreign-call (cons (w2808@chi-expr w5786@name w5777@r w5778@mr) (w2804@chi-expr* w5787@arg* w5777@r w5778@mr)))) w5784@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5782@t))) (w2774@syntax-dispatch w5782@t '(_ any . each-any)))) w5776@e))) (set! w2772@convert-pattern (lambda (w5790@pattern w5791@keys) ((lambda (w5795@cvt* w5797@cvt) (begin (set! w5795@cvt* (lambda (w5940@p* w5941@n w5942@ids) (if (null? w5940@p*) (values '() w5942@ids) (call-with-values (lambda () (w5795@cvt* (cdr w5940@p*) w5941@n w5942@ids)) (lambda (w5948@w5946@y w5949@w5947@ids) ((lambda (w5952@ids w5953@y) (call-with-values (lambda () (w5797@cvt (car w5940@p*) w5941@n w5952@ids)) (lambda (w5958@w5956@x w5959@w5957@ids) ((lambda (w5962@ids w5963@x) (values (cons w5963@x w5953@y) w5962@ids)) w5959@w5957@ids w5958@w5956@x)))) w5949@w5947@ids w5948@w5946@y)))))) (set! w5797@cvt (lambda (w5798@p w5799@n w5800@ids) ((lambda (w5804@t) ((lambda (w5806@ls/false) (if (and w5806@ls/false (apply (lambda (w5808@id) (w2277@id? w5808@id)) w5806@ls/false)) (apply (lambda (w5810@id) (if (w2291@bound-id-member? w5798@p w5791@keys) (values (vector 'free-id w5798@p) w5800@ids) (if (w2285@free-id=? w5798@p (w2656@scheme-stx '_)) (values '_ w5800@ids) (values 'any (cons (cons w5798@p w5799@n) w5800@ids))))) w5806@ls/false) ((lambda (w5812@t) ((lambda (w5814@ls/false) (if (and w5814@ls/false (apply (lambda (w5816@p w5817@dots) (w2776@ellipsis? w5817@dots)) w5814@ls/false)) (apply (lambda (w5820@p w5821@dots) (call-with-values (lambda () (w5797@cvt w5820@p (+ w5799@n '1) w5800@ids)) (lambda (w5826@w5824@p w5827@w5825@ids) ((lambda (w5830@ids w5831@p) (values (if (eq? w5831@p 'any) 'each-any (vector 'each w5831@p)) w5830@ids)) w5827@w5825@ids w5826@w5824@p)))) w5814@ls/false) ((lambda (w5834@t) ((lambda (w5836@ls/false) (if (and w5836@ls/false (apply (lambda (w5838@x w5839@dots w5840@ys w5841@z) (w2776@ellipsis? w5839@dots)) w5836@ls/false)) (apply (lambda (w5846@x w5847@dots w5848@ys w5849@z) (call-with-values (lambda () (w5797@cvt w5849@z w5799@n w5800@ids)) (lambda (w5856@w5854@z w5857@w5855@ids) ((lambda (w5860@ids w5861@z) (call-with-values (lambda () (w5795@cvt* w5848@ys w5799@n w5860@ids)) (lambda (w5866@w5864@ys w5867@w5865@ids) ((lambda (w5870@ids w5871@ys) (call-with-values (lambda () (w5797@cvt w5846@x (+ w5799@n '1) w5870@ids)) (lambda (w5876@w5874@x w5877@w5875@ids) ((lambda (w5880@ids w5881@x) (values (vector 'each+ w5881@x (reverse w5871@ys) w5861@z) w5880@ids)) w5877@w5875@ids w5876@w5874@x)))) w5867@w5865@ids w5866@w5864@ys)))) w5857@w5855@ids w5856@w5854@z)))) w5836@ls/false) ((lambda (w5884@t) ((lambda (w5886@ls/false) (if w5886@ls/false (apply (lambda (w5888@x w5889@y) (call-with-values (lambda () (w5797@cvt w5889@y w5799@n w5800@ids)) (lambda (w5894@w5892@y w5895@w5893@ids) ((lambda (w5898@ids w5899@y) (call-with-values (lambda () (w5797@cvt w5888@x w5799@n w5898@ids)) (lambda (w5904@w5902@x w5905@w5903@ids) ((lambda (w5908@ids w5909@x) (values (cons w5909@x w5899@y) w5908@ids)) w5905@w5903@ids w5904@w5902@x)))) w5895@w5893@ids w5894@w5892@y)))) w5886@ls/false) ((lambda (w5912@t) ((lambda (w5914@ls/false) (if w5914@ls/false (apply (lambda () (values '() w5800@ids)) w5914@ls/false) ((lambda (w5916@t) ((lambda (w5918@ls/false) (if (and w5918@ls/false (apply (lambda (w5920@p) (not (w2221@stx? w5920@p))) w5918@ls/false)) (apply (lambda (w5922@p) (call-with-values (lambda () (w5797@cvt w5922@p w5799@n w5800@ids)) (lambda (w5926@w5924@p w5927@w5925@ids) ((lambda (w5930@ids w5931@p) (values (vector 'vector w5931@p) w5930@ids)) w5927@w5925@ids w5926@w5924@p)))) w5918@ls/false) ((lambda (w5934@t) ((lambda (w5936@ls/false) (if w5936@ls/false (apply (lambda (w5938@datum) (values (vector 'atom (w2299@stx->datum w5938@datum)) w5800@ids)) w5936@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w5934@t))) (w2774@syntax-dispatch w5934@t 'any))) w5916@t))) (w2774@syntax-dispatch w5916@t '#(vector each-any)))) w5912@t))) (w2774@syntax-dispatch w5912@t '()))) w5884@t))) (w2774@syntax-dispatch w5884@t '(any . any)))) w5834@t))) (w2774@syntax-dispatch w5834@t '(any any . #(each+ any () any))))) w5812@t))) (w2774@syntax-dispatch w5812@t '(any any)))) w5804@t))) (w2774@syntax-dispatch w5804@t 'any))) w5798@p))) (w5797@cvt w5790@pattern '0 '()))) '#f '#f))) (set! w2774@syntax-dispatch ((lambda () ((lambda (w5967@stx^ w5969@match-each w5971@match-each+ w5973@match-each-any w5975@match-empty w5977@combine w5979@match* w5981@match) (begin (set! w5967@stx^ (lambda (w6168@e w6169@m* w6170@s* w6171@ae*) (if (and (null? w6169@m*) (null? w6170@s*) (null? w6171@ae*)) w6168@e (w2253@mkstx w6168@e w6169@m* w6170@s* w6171@ae*)))) (set! w5969@match-each (lambda (w6139@e w6140@p w6141@m* w6142@s* w6143@ae*) (if (pair? w6139@e) ((lambda (w6149@first) (and w6149@first ((lambda (w6151@rest) (and w6151@rest (cons w6149@first w6151@rest))) (w5969@match-each (cdr w6139@e) w6140@p w6141@m* w6142@s* w6143@ae*)))) (w5981@match (car w6139@e) w6140@p w6141@m* w6142@s* w6143@ae* '())) (if (null? w6139@e) '() (if (w2221@stx? w6139@e) (and (not (w2147@top-marked? w6141@m*)) (call-with-values (lambda () (w2251@join-wraps w6141@m* w6142@s* w6143@ae* w6139@e)) (lambda (w6156@w6153@m* w6157@w6154@s* w6158@w6155@ae*) ((lambda (w6162@ae* w6163@s* w6164@m*) (w5969@match-each (w2225@stx-expr w6139@e) w6140@p w6164@m* w6163@s* w6162@ae*)) w6158@w6155@ae* w6157@w6154@s* w6156@w6153@m*)))) (if (w1164@w931@annotation? w6139@e) (w5969@match-each (w1166@w935@annotation-expression w6139@e) w6140@p w6141@m* w6142@s* w6143@ae*) '#f)))))) (set! w5971@match-each+ (lambda (w6081@e w6082@x-pat w6083@y-pat w6084@z-pat w6085@m* w6086@s* w6087@ae* w6088@r) ((letrec ((w6097@f (lambda (w6099@e w6100@m* w6101@s* w6102@ae*) (if (pair? w6099@e) (call-with-values (lambda () (w6097@f (cdr w6099@e) w6100@m* w6101@s* w6102@ae*)) (lambda (w6110@w6107@xr* w6111@w6108@y-pat w6112@w6109@r) ((lambda (w6116@r w6117@y-pat w6118@xr*) (if w6116@r (if (null? w6117@y-pat) ((lambda (w6122@xr) (if w6122@xr (values (cons w6122@xr w6118@xr*) w6117@y-pat w6116@r) (values '#f '#f '#f))) (w5981@match (car w6099@e) w6082@x-pat w6100@m* w6101@s* w6102@ae* '())) (values '() (cdr w6117@y-pat) (w5981@match (car w6099@e) (car w6117@y-pat) w6100@m* w6101@s* w6102@ae* w6116@r))) (values '#f '#f '#f))) w6112@w6109@r w6111@w6108@y-pat w6110@w6107@xr*))) (if (w2221@stx? w6099@e) (if (w2147@top-marked? w6100@m*) (values '() w6083@y-pat (w5981@match w6099@e w6084@z-pat w6100@m* w6101@s* w6102@ae* w6088@r)) (call-with-values (lambda () (w2251@join-wraps w6100@m* w6101@s* w6102@ae* w6099@e)) (lambda (w6127@w6124@m* w6128@w6125@s* w6129@w6126@ae*) ((lambda (w6133@ae* w6134@s* w6135@m*) (w6097@f (w2225@stx-expr w6099@e) w6135@m* w6134@s* w6133@ae*)) w6129@w6126@ae* w6128@w6125@s* w6127@w6124@m*)))) (if (w1164@w931@annotation? w6099@e) (w6097@f (w1166@w935@annotation-expression w6099@e) w6100@m* w6101@s* w6102@ae*) (values '() w6083@y-pat (w5981@match w6099@e w6084@z-pat w6100@m* w6101@s* w6102@ae* w6088@r)))))))) w6097@f) w6081@e w6085@m* w6086@s* w6087@ae*))) (set! w5973@match-each-any (lambda (w6056@e w6057@m* w6058@s* w6059@ae*) (if (pair? w6056@e) ((lambda (w6064@l) (and w6064@l (cons (w5967@stx^ (car w6056@e) w6057@m* w6058@s* w6059@ae*) w6064@l))) (w5973@match-each-any (cdr w6056@e) w6057@m* w6058@s* w6059@ae*)) (if (null? w6056@e) '() (if (w2221@stx? w6056@e) (and (not (w2147@top-marked? w6057@m*)) (call-with-values (lambda () (w2251@join-wraps w6057@m* w6058@s* w6059@ae* w6056@e)) (lambda (w6069@w6066@m* w6070@w6067@s* w6071@w6068@ae*) ((lambda (w6075@ae* w6076@s* w6077@m*) (w5973@match-each-any (w2225@stx-expr w6056@e) w6077@m* w6076@s* w6075@ae*)) w6071@w6068@ae* w6070@w6067@s* w6069@w6066@m*)))) (if (w1164@w931@annotation? w6056@e) (w5973@match-each-any (w1166@w935@annotation-expression w6056@e) w6057@m* w6058@s* w6059@ae*) '#f)))))) (set! w5975@match-empty (lambda (w6050@p w6051@r) (if (null? w6050@p) w6051@r (if (eq? w6050@p '_) w6051@r (if (eq? w6050@p 'any) (cons '() w6051@r) (if (pair? w6050@p) (w5975@match-empty (car w6050@p) (w5975@match-empty (cdr w6050@p) w6051@r)) (if (eq? w6050@p 'each-any) (cons '() w6051@r) ((lambda (w6054@t) (if (memv w6054@t '(each)) (w5975@match-empty (vector-ref w6050@p '1) w6051@r) (if (memv w6054@t '(each+)) (w5975@match-empty (vector-ref w6050@p '1) (w5975@match-empty (reverse (vector-ref w6050@p '2)) (w5975@match-empty (vector-ref w6050@p '3) w6051@r))) (if (memv w6054@t '(free-id atom)) w6051@r (if (memv w6054@t '(scheme-id atom)) w6051@r (if (memv w6054@t '(vector)) (w5975@match-empty (vector-ref w6050@p '1) w6051@r) (assertion-violation 'syntax-dispatch '"invalid pattern" w6050@p))))))) (vector-ref w6050@p '0))))))))) (set! w5977@combine (lambda (w6046@r* w6047@r) (if (null? (car w6046@r*)) w6047@r (cons (map car w6046@r*) (w5977@combine (map cdr w6046@r*) w6047@r))))) (set! w5979@match* (lambda (w6013@e w6014@p w6015@m* w6016@s* w6017@ae* w6018@r) (if (null? w6014@p) (and (null? w6013@e) w6018@r) (if (pair? w6014@p) (and (pair? w6013@e) (w5981@match (car w6013@e) (car w6014@p) w6015@m* w6016@s* w6017@ae* (w5981@match (cdr w6013@e) (cdr w6014@p) w6015@m* w6016@s* w6017@ae* w6018@r))) (if (eq? w6014@p 'each-any) ((lambda (w6025@l) (and w6025@l (cons w6025@l w6018@r))) (w5973@match-each-any w6013@e w6015@m* w6016@s* w6017@ae*)) ((lambda (w6027@t) (if (memv w6027@t '(each)) (if (null? w6013@e) (w5975@match-empty (vector-ref w6014@p '1) w6018@r) ((lambda (w6029@r*) (and w6029@r* (w5977@combine w6029@r* w6018@r))) (w5969@match-each w6013@e (vector-ref w6014@p '1) w6015@m* w6016@s* w6017@ae*))) (if (memv w6027@t '(free-id)) (and (symbol? w6013@e) (w2147@top-marked? w6015@m*) (w2285@free-id=? (w5967@stx^ w6013@e w6015@m* w6016@s* w6017@ae*) (vector-ref w6014@p '1)) w6018@r) (if (memv w6027@t '(scheme-id)) (and (symbol? w6013@e) (w2147@top-marked? w6015@m*) (w2285@free-id=? (w5967@stx^ w6013@e w6015@m* w6016@s* w6017@ae*) (w2656@scheme-stx (vector-ref w6014@p '1))) w6018@r) (if (memv w6027@t '(each+)) (call-with-values (lambda () (w5971@match-each+ w6013@e (vector-ref w6014@p '1) (vector-ref w6014@p '2) (vector-ref w6014@p '3) w6015@m* w6016@s* w6017@ae* w6018@r)) (lambda (w6034@w6031@xr* w6035@w6032@y-pat w6036@w6033@r) ((lambda (w6040@r w6041@y-pat w6042@xr*) (and w6040@r (null? w6041@y-pat) (if (null? w6042@xr*) (w5975@match-empty (vector-ref w6014@p '1) w6040@r) (w5977@combine w6042@xr* w6040@r)))) w6036@w6033@r w6035@w6032@y-pat w6034@w6031@xr*))) (if (memv w6027@t '(atom)) (and (fast-equal? (vector-ref w6014@p '1) (w2297@strip w6013@e w6015@m*)) w6018@r) (if (memv w6027@t '(vector)) (and (vector? w6013@e) (w5981@match (vector->list w6013@e) (vector-ref w6014@p '1) w6015@m* w6016@s* w6017@ae* w6018@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" w6014@p)))))))) (vector-ref w6014@p '0))))))) (set! w5981@match (lambda (w5986@e w5987@p w5988@m* w5989@s* w5990@ae* w5991@r) (if (not w5991@r) '#f (if (eq? w5987@p '_) w5991@r (if (eq? w5987@p 'any) (cons (w5967@stx^ w5986@e w5988@m* w5989@s* w5990@ae*) w5991@r) (if (w2221@stx? w5986@e) (and (not (w2147@top-marked? w5988@m*)) (call-with-values (lambda () (w2251@join-wraps w5988@m* w5989@s* w5990@ae* w5986@e)) (lambda (w6001@w5998@m* w6002@w5999@s* w6003@w6000@ae*) ((lambda (w6007@ae* w6008@s* w6009@m*) (w5981@match (w2225@stx-expr w5986@e) w5987@p w6009@m* w6008@s* w6007@ae* w5991@r)) w6003@w6000@ae* w6002@w5999@s* w6001@w5998@m*)))) (if (w1164@w931@annotation? w5986@e) (w5981@match (w1166@w935@annotation-expression w5986@e) w5987@p w5988@m* w5989@s* w5990@ae* w5991@r) (w5979@match* w5986@e w5987@p w5988@m* w5989@s* w5990@ae* w5991@r)))))))) (lambda (w5982@e w5983@p) (w5981@match w5982@e w5983@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! w2776@ellipsis? (lambda (w6176@x) (and (w2277@id? w6176@x) (w2285@free-id=? w6176@x (w2656@scheme-stx '...))))) (set! w2778@underscore? (lambda (w6178@x) (and (w2277@id? w6178@x) (w2285@free-id=? w6178@x (w2656@scheme-stx '_))))) (set! w2780@verify-literals (lambda (w6180@lits w6181@expr) (for-each (lambda (w6184@x) (if (or (not (w2277@id? w6184@x)) (w2776@ellipsis? w6184@x) (w2778@underscore? w6184@x)) (w3007@syntax-violation '#f '"invalid literal" w6181@expr w6184@x) (void))) w6180@lits))) (set! w2782@syntax-case-transformer ((lambda () ((lambda (w6187@build-dispatch-call w6189@invalid-ids-error w6191@gen-clause w6193@gen-syntax-case) (begin (set! w6187@build-dispatch-call (lambda (w6298@pvars w6299@expr w6300@y w6301@r w6302@mr) ((lambda (w6308@ids w6309@levels) ((lambda (w6312@labels w6313@new-vars) ((lambda (w6316@body) (list '(primitive apply) (w2113@w1923@build-lambda '#f w6313@new-vars w6316@body) w6300@y)) (w2808@chi-expr (w2257@add-subst (w2208@make-full-rib w6308@ids w6312@labels) w6299@expr) (append (map (lambda (w6318@label w6319@var w6320@level) (cons w6318@label (w2309@make-binding 'syntax (cons w6319@var w6320@level)))) w6312@labels w6313@new-vars (map cdr w6298@pvars)) w6301@r) w6302@mr))) (map w2153@gen-label w6308@ids) (map w2149@gen-lexical w6308@ids))) (map car w6298@pvars) (map cdr w6298@pvars)))) (set! w6189@invalid-ids-error (lambda (w6286@id* w6287@e w6288@class) ((letrec ((w6292@find (lambda (w6294@id* w6295@ok*) (if (null? w6294@id*) (w3007@syntax-violation '#f '"invalid syntax" w6287@e) (if (w2277@id? (car w6294@id*)) (if (w2291@bound-id-member? (car w6294@id*) w6295@ok*) (w3003@syntax-error (car w6294@id*) '"duplicate " w6288@class) (w6292@find (cdr w6294@id*) (cons (car w6294@id*) w6295@ok*))) (w3003@syntax-error (car w6294@id*) '"invalid " w6288@class)))))) w6292@find) w6286@id* '()))) (set! w6191@gen-clause (lambda (w6248@x w6249@keys w6250@clauses w6251@r w6252@mr w6253@pat w6254@fender w6255@expr) (call-with-values (lambda () (w2772@convert-pattern w6253@pat w6249@keys)) (lambda (w6266@w6264@p w6267@w6265@pvars) ((lambda (w6270@pvars w6271@p) (if (not (w2289@distinct-bound-ids? (map car w6270@pvars))) (w6189@invalid-ids-error (map car w6270@pvars) w6253@pat '"pattern variable") (if (not (for-all (lambda (w6274@x) (not (w2776@ellipsis? (car w6274@x)))) w6270@pvars)) (w3007@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" w6253@pat) ((lambda (w6276@y) ((lambda (w6278@test) ((lambda (w6280@conseq) ((lambda (w6282@altern) (list (w2113@w1923@build-lambda '#f (list w6276@y) (list 'if w6278@test w6280@conseq w6282@altern)) (list '(primitive syntax-dispatch) w6248@x (list 'quote w6271@p)))) (w6193@gen-syntax-case w6248@x w6249@keys w6250@clauses w6251@r w6252@mr))) (w6187@build-dispatch-call w6270@pvars w6255@expr w6276@y w6251@r w6252@mr))) (if (eq? w6254@fender '#t) w6276@y ((lambda (w6284@call) (list 'if w6276@y w6284@call (list 'quote '#f))) (w6187@build-dispatch-call w6270@pvars w6254@fender w6276@y w6251@r w6252@mr))))) (w2149@gen-lexical 'tmp))))) w6267@w6265@pvars w6266@w6264@p))))) (set! w6193@gen-syntax-case (lambda (w6214@x w6215@keys w6216@clauses w6217@r w6218@mr) (if (null? w6216@clauses) (list '(primitive syntax-error) w6214@x) ((lambda (w6224@t) ((lambda (w6226@ls/false) (if w6226@ls/false (apply (lambda (w6228@pat w6229@expr) (if (and (w2277@id? w6228@pat) (not (w2291@bound-id-member? w6228@pat w6215@keys)) (not (w2776@ellipsis? w6228@pat))) (if (w2285@free-id=? w6228@pat (w2656@scheme-stx '_)) (w2808@chi-expr w6229@expr w6217@r w6218@mr) ((lambda (w6232@lab w6233@lex) ((lambda (w6236@body) (list (w2113@w1923@build-lambda '#f (list w6233@lex) w6236@body) w6214@x)) (w2808@chi-expr (w2257@add-subst (w2208@make-full-rib (list w6228@pat) (list w6232@lab)) w6229@expr) (cons (cons w6232@lab (w2309@make-binding 'syntax (cons w6233@lex '0))) w6217@r) w6218@mr))) (w2153@gen-label w6228@pat) (w2149@gen-lexical w6228@pat))) (w6191@gen-clause w6214@x w6215@keys (cdr w6216@clauses) w6217@r w6218@mr w6228@pat '#t w6229@expr))) w6226@ls/false) ((lambda (w6238@t) ((lambda (w6240@ls/false) (if w6240@ls/false (apply (lambda (w6242@pat w6243@fender w6244@expr) (w6191@gen-clause w6214@x w6215@keys (cdr w6216@clauses) w6217@r w6218@mr w6242@pat w6243@fender w6244@expr)) w6240@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w6238@t))) (w2774@syntax-dispatch w6238@t '(any any any)))) w6224@t))) (w2774@syntax-dispatch w6224@t '(any any)))) (car w6216@clauses))))) (lambda (w6194@e w6195@r w6196@mr) ((lambda (w6200@t) ((lambda (w6202@ls/false) (if w6202@ls/false (apply (lambda (w6204@expr w6205@keys w6206@clauses) (begin (w2780@verify-literals w6205@keys w6194@e) ((lambda (w6210@x) ((lambda (w6212@body) (list (w2113@w1923@build-lambda '#f (list w6210@x) w6212@body) (w2808@chi-expr w6204@expr w6195@r w6196@mr))) (w6193@gen-syntax-case w6210@x w6205@keys w6206@clauses w6195@r w6196@mr))) (w2149@gen-lexical 'tmp)))) w6202@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w6200@t))) (w2774@syntax-dispatch w6200@t '(_ any each-any . each-any)))) w6194@e)))) '#f '#f '#f '#f)))) (set! w2784@ellipsis-map (lambda (w6324@proc w6325@ls . w6328@ls*) ((lambda (w6331@who) (begin (set! w6331@who '...) (begin (if (not (list? w6325@ls)) (assertion-violation w6331@who '"not a list" w6325@ls) (void)) (if (not (null? w6328@ls*)) ((lambda (w6332@n) (for-each (lambda (w6334@x) (begin (if (not (list? w6334@x)) (assertion-violation w6331@who '"not a list" w6334@x) (void)) (if (not (= (length w6334@x) w6332@n)) (assertion-violation w6331@who '"length mismatch" w6325@ls w6334@x) (void)))) w6328@ls*)) (length w6325@ls)) (void)) (apply map w6324@proc w6325@ls w6328@ls*)))) '#f))) (set! w2786@syntax-transformer ((lambda () ((lambda (w6337@gen-syntax w6339@gen-ref w6341@gen-append w6343@gen-mappend w6345@gen-map w6347@gen-cons w6349@gen-vector w6351@regen) (begin (set! w6337@gen-syntax (lambda (w6452@src w6453@e w6454@r w6455@maps w6456@ellipsis? w6457@vec?) ((lambda (w6464@t) ((lambda (w6466@ls/false) (if (and w6466@ls/false (apply (lambda (w6468@dots) (w6456@ellipsis? w6468@dots)) w6466@ls/false)) (apply (lambda (w6470@dots) (w3007@syntax-violation '#f '"misplaced ellipsis in syntax form" w6452@src)) w6466@ls/false) ((lambda (w6472@t) ((lambda (w6474@ls/false) (if (and w6474@ls/false (apply (lambda (w6476@id) (w2277@id? w6476@id)) w6474@ls/false)) (apply (lambda (w6478@id) ((lambda (w6480@label) ((lambda (w6482@b) ((lambda () (if (eq? (w2311@binding-type w6482@b) 'syntax) (call-with-values (lambda () ((lambda (w6486@var.lev) (w6339@gen-ref w6452@src (car w6486@var.lev) (cdr w6486@var.lev) w6455@maps)) (w2313@binding-value w6482@b))) (lambda (w6488@w6484@var w6489@w6485@maps) ((lambda (w6492@maps w6493@var) (values (list 'ref w6493@var) w6492@maps)) w6489@w6485@maps w6488@w6484@var))) (values (list 'quote w6453@e) w6455@maps))))) (w2307@label->binding w6480@label w6454@r))) (w2303@id->label w6453@e))) w6474@ls/false) ((lambda (w6496@t) ((lambda (w6498@ls/false) (if (and w6498@ls/false (apply (lambda (w6500@dots w6501@e) (w6456@ellipsis? w6500@dots)) w6498@ls/false)) (apply (lambda (w6504@dots w6505@e) (if w6457@vec? (w3007@syntax-violation '#f '"misplaced ellipsis in syntax form" w6452@src) (w6337@gen-syntax w6452@src w6505@e w6454@r w6455@maps (lambda (w6508@x) '#f) '#f))) w6498@ls/false) ((lambda (w6510@t) ((lambda (w6512@ls/false) (if (and w6512@ls/false (apply (lambda (w6514@x w6515@dots w6516@y) (w6456@ellipsis? w6515@dots)) w6512@ls/false)) (apply (lambda (w6520@x w6521@dots w6522@y) ((letrec ((w6526@f (lambda (w6528@y w6529@k) ((lambda (w6532@t) ((lambda (w6534@ls/false) (if w6534@ls/false (apply (lambda () (w6529@k w6455@maps)) w6534@ls/false) ((lambda (w6536@t) ((lambda (w6538@ls/false) (if (and w6538@ls/false (apply (lambda (w6540@dots w6541@y) (w6456@ellipsis? w6540@dots)) w6538@ls/false)) (apply (lambda (w6544@dots w6545@y) (w6526@f w6545@y (lambda (w6548@maps) (call-with-values (lambda () (w6529@k (cons '() w6548@maps))) (lambda (w6552@w6550@x w6553@w6551@maps) ((lambda (w6556@maps w6557@x) (if (null? (car w6556@maps)) (w3007@syntax-violation '#f '"extra ellipsis in syntax form" w6452@src) (values (w6343@gen-mappend w6557@x (car w6556@maps)) (cdr w6556@maps)))) w6553@w6551@maps w6552@w6550@x)))))) w6538@ls/false) ((lambda (w6560@t) ((lambda (w6562@ls/false) (if w6562@ls/false (apply (lambda () (call-with-values (lambda () (w6337@gen-syntax w6452@src w6528@y w6454@r w6455@maps w6456@ellipsis? w6457@vec?)) (lambda (w6566@w6564@y w6567@w6565@maps) ((lambda (w6570@maps w6571@y) (call-with-values (lambda () (w6529@k w6570@maps)) (lambda (w6576@w6574@x w6577@w6575@maps) ((lambda (w6580@maps w6581@x) (values (w6341@gen-append w6581@x w6571@y) w6580@maps)) w6577@w6575@maps w6576@w6574@x)))) w6567@w6565@maps w6566@w6564@y)))) w6562@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w6560@t))) (w2774@syntax-dispatch w6560@t '_))) w6536@t))) (w2774@syntax-dispatch w6536@t '(any . any)))) w6532@t))) (w2774@syntax-dispatch w6532@t '()))) w6528@y)))) w6526@f) w6522@y (lambda (w6584@maps) (call-with-values (lambda () (w6337@gen-syntax w6452@src w6520@x w6454@r (cons '() w6584@maps) w6456@ellipsis? '#f)) (lambda (w6588@w6586@x w6589@w6587@maps) ((lambda (w6592@maps w6593@x) (if (null? (car w6592@maps)) (w3007@syntax-violation '#f '"extra ellipsis in syntax form" w6452@src) (values (w6345@gen-map w6593@x (car w6592@maps)) (cdr w6592@maps)))) w6589@w6587@maps w6588@w6586@x)))))) w6512@ls/false) ((lambda (w6596@t) ((lambda (w6598@ls/false) (if w6598@ls/false (apply (lambda (w6600@x w6601@y) (call-with-values (lambda () (w6337@gen-syntax w6452@src w6600@x w6454@r w6455@maps w6456@ellipsis? '#f)) (lambda (w6606@w6604@xnew w6607@w6605@maps) ((lambda (w6610@maps w6611@xnew) (call-with-values (lambda () (w6337@gen-syntax w6452@src w6601@y w6454@r w6610@maps w6456@ellipsis? w6457@vec?)) (lambda (w6616@w6614@ynew w6617@w6615@maps) ((lambda (w6620@maps w6621@ynew) (values (w6347@gen-cons w6453@e w6600@x w6601@y w6611@xnew w6621@ynew) w6620@maps)) w6617@w6615@maps w6616@w6614@ynew)))) w6607@w6605@maps w6606@w6604@xnew)))) w6598@ls/false) ((lambda (w6624@t) ((lambda (w6626@ls/false) (if w6626@ls/false (apply (lambda (w6628@ls) (call-with-values (lambda () (w6337@gen-syntax w6452@src w6628@ls w6454@r w6455@maps w6456@ellipsis? '#t)) (lambda (w6632@w6630@lsnew w6633@w6631@maps) ((lambda (w6636@maps w6637@lsnew) (values (w6349@gen-vector w6453@e w6628@ls w6637@lsnew) w6636@maps)) w6633@w6631@maps w6632@w6630@lsnew)))) w6626@ls/false) ((lambda (w6640@t) ((lambda (w6642@ls/false) (if w6642@ls/false (apply (lambda () (values (list 'quote w6453@e) w6455@maps)) w6642@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w6640@t))) (w2774@syntax-dispatch w6640@t '_))) w6624@t))) (w2774@syntax-dispatch w6624@t '#(vector each-any)))) w6596@t))) (w2774@syntax-dispatch w6596@t '(any . any)))) w6510@t))) (w2774@syntax-dispatch w6510@t '(any any . any)))) w6496@t))) (w2774@syntax-dispatch w6496@t '(any any)))) w6472@t))) (w2774@syntax-dispatch w6472@t 'any))) w6464@t))) (w2774@syntax-dispatch w6464@t 'any))) w6453@e))) (set! w6339@gen-ref (lambda (w6428@src w6429@var w6430@level w6431@maps) (if (= w6430@level '0) (values w6429@var w6431@maps) (if (null? w6431@maps) (w3007@syntax-violation '#f '"missing ellipsis in syntax form" w6428@src) (call-with-values (lambda () (w6339@gen-ref w6428@src w6429@var (- w6430@level '1) (cdr w6431@maps))) (lambda (w6438@w6436@outer-var w6439@w6437@outer-maps) ((lambda (w6442@outer-maps w6443@outer-var) ((lambda (w6446@t) (if w6446@t ((lambda (w6448@b) (values (cdr w6448@b) w6431@maps)) w6446@t) ((lambda (w6450@inner-var) (values w6450@inner-var (cons (cons (cons w6443@outer-var w6450@inner-var) (car w6431@maps)) w6442@outer-maps))) (w2149@gen-lexical 'tmp)))) (assq w6443@outer-var (car w6431@maps)))) w6439@w6437@outer-maps w6438@w6436@outer-var))))))) (set! w6341@gen-append (lambda (w6424@x w6425@y) (if (fast-equal? w6425@y ''()) w6424@x (list 'append w6424@x w6425@y)))) (set! w6343@gen-mappend (lambda (w6420@e w6421@map-env) (list 'apply '(primitive append) (w6345@gen-map w6420@e w6421@map-env)))) (set! w6345@gen-map (lambda (w6402@e w6403@map-env) ((lambda (w6406@formals w6407@actuals) (if (eq? (car w6402@e) 'ref) (car w6407@actuals) (if (for-all (lambda (w6410@x) (and (eq? (car w6410@x) 'ref) (memq (cadr w6410@x) w6406@formals))) (cdr w6402@e)) ((lambda (w6412@args) (cons 'map (cons (list 'primitive (car w6402@e)) w6412@args))) (map ((lambda (w6414@r) (lambda (w6416@x) (cdr (assq (cadr w6416@x) w6414@r)))) (map cons w6406@formals w6407@actuals)) (cdr w6402@e))) (cons* 'map (list 'lambda w6406@formals w6402@e) w6407@actuals)))) (map cdr w6403@map-env) (map (lambda (w6418@x) (list 'ref (car w6418@x))) w6403@map-env)))) (set! w6347@gen-cons (lambda (w6386@e w6387@x w6388@y w6389@xnew w6390@ynew) ((lambda (w6396@t) (if (memv w6396@t '(quote)) (if (eq? (car w6389@xnew) 'quote) ((lambda (w6398@xnew w6399@ynew) (if (and (eq? w6398@xnew w6387@x) (eq? w6399@ynew w6388@y)) (list 'quote w6386@e) (list 'quote (cons w6398@xnew w6399@ynew)))) (cadr w6389@xnew) (cadr w6390@ynew)) (if (null? (cadr w6390@ynew)) (list 'list w6389@xnew) (list 'cons w6389@xnew w6390@ynew))) (if (memv w6396@t '(list)) (cons 'list (cons w6389@xnew (cdr w6390@ynew))) (list 'cons w6389@xnew w6390@ynew)))) (car w6390@ynew)))) (set! w6349@gen-vector (lambda (w6380@e w6381@ls w6382@lsnew) (if (eq? (car w6382@lsnew) 'quote) (if (eq? (cadr w6382@lsnew) w6381@ls) (list 'quote w6380@e) (list 'quote (list->vector (cadr w6382@lsnew)))) (if (eq? (car w6382@lsnew) 'list) (cons 'vector (cdr w6382@lsnew)) (list 'list->vector w6382@lsnew))))) (set! w6351@regen (lambda (w6374@x) ((lambda (w6376@t) (if (memv w6376@t '(ref)) (cadr w6374@x) (if (memv w6376@t '(primitive)) (list 'primitive (cadr w6374@x)) (if (memv w6376@t '(quote)) (list 'quote (cadr w6374@x)) (if (memv w6376@t '(lambda)) (w2113@w1923@build-lambda '#f (cadr w6374@x) (w6351@regen (caddr w6374@x))) (if (memv w6376@t '(map)) ((lambda (w6378@ls) (cons '(primitive ellipsis-map) w6378@ls)) (map w6351@regen (cdr w6374@x))) (cons (list 'primitive (car w6374@x)) (map w6351@regen (cdr w6374@x))))))))) (car w6374@x)))) (lambda (w6352@e w6353@r w6354@mr) ((lambda (w6358@t) ((lambda (w6360@ls/false) (if w6360@ls/false (apply (lambda (w6362@x) (call-with-values (lambda () (w6337@gen-syntax w6352@e w6362@x w6353@r '() w2776@ellipsis? '#f)) (lambda (w6366@w6364@e w6367@w6365@maps) ((lambda (w6370@maps w6371@e) (w6351@regen w6371@e)) w6367@w6365@maps w6366@w6364@e)))) w6360@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w6358@t))) (w2774@syntax-dispatch w6358@t '(_ any)))) w6352@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! w2788@core-macro-transformer (lambda (w6644@name) ((lambda (w6646@t) (if (memv w6646@t '(quote)) w2694@quote-transformer (if (memv w6646@t '(lambda)) w2698@lambda-transformer (if (memv w6646@t '(case-lambda)) w2696@case-lambda-transformer (if (memv w6646@t '(letrec)) w2670@letrec-transformer (if (memv w6646@t '(letrec*)) w2672@letrec*-transformer (if (memv w6646@t '(if)) w2686@if-transformer (if (memv w6646@t '(and)) w2688@and-transformer (if (memv w6646@t '(or)) w2690@or-transformer (if (memv w6646@t '(foreign-call)) w2770@foreign-call-transformer (if (memv w6646@t '(syntax-case)) w2782@syntax-case-transformer (if (memv w6646@t '(syntax)) w2786@syntax-transformer (if (memv w6646@t '(type-descriptor)) w2676@type-descriptor-transformer (if (memv w6646@t '(record-type-descriptor)) w2678@record-type-descriptor-transformer (if (memv w6646@t '(record-constructor-descriptor)) w2680@record-constructor-descriptor-transformer (if (memv w6646@t '(fluid-let-syntax)) w2674@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" w6644@name))))))))))))))))) w6644@name))) (set! w2790@symbol-macro (lambda (w6648@x w6649@set) ((lambda (w6652@t) ((lambda (w6654@ls/false) (if (and w6654@ls/false (apply (lambda (w6656@name) (and (w2277@id? w6656@name) (memq (w2279@id->sym w6656@name) w6649@set))) w6654@ls/false)) (apply (lambda (w6658@name) (w2700@bless (list 'quote w6658@name))) w6654@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w6652@t))) (w2774@syntax-dispatch w6652@t '(_ any)))) w6648@x))) (set! w2792@macro-transformer (lambda (w6660@x) (if (procedure? w6660@x) w6660@x (if (symbol? w6660@x) ((lambda (w6662@t) (if (memv w6662@t '(define-record-type)) w2762@define-record-type-macro (if (memv w6662@t '(define-struct)) w2760@define-struct-macro (if (memv w6662@t '(include)) w2750@include-macro (if (memv w6662@t '(cond)) w2746@cond-macro (if (memv w6662@t '(let)) w2706@let-macro (if (memv w6662@t '(do)) w2738@do-macro (if (memv w6662@t '(or)) w2742@or-macro (if (memv w6662@t '(and)) w2744@and-macro (if (memv w6662@t '(let*)) w2740@let*-macro (if (memv w6662@t '(let-values)) w2708@let-values-macro (if (memv w6662@t '(let*-values)) w2710@let*-values-macro (if (memv w6662@t '(syntax-rules)) w2754@syntax-rules-macro (if (memv w6662@t '(quasiquote)) w2756@quasiquote-macro (if (memv w6662@t '(quasisyntax)) w2758@quasisyntax-macro (if (memv w6662@t '(with-syntax)) w2702@with-syntax-macro (if (memv w6662@t '(when)) w2682@when-macro (if (memv w6662@t '(unless)) w2684@unless-macro (if (memv w6662@t '(case)) w2692@case-macro (if (memv w6662@t '(identifier-syntax)) w2736@identifier-syntax-macro (if (memv w6662@t '(time)) w2728@time-macro (if (memv w6662@t '(delay)) w2730@delay-macro (if (memv w6662@t '(assert)) w2732@assert-macro (if (memv w6662@t '(endianness)) w2734@endianness-macro (if (memv w6662@t '(guard)) w2724@guard-macro (if (memv w6662@t '(define-enumeration)) w2726@define-enumeration-macro (if (memv w6662@t '(trace-lambda)) w2712@trace-lambda-macro (if (memv w6662@t '(trace-define)) w2714@trace-define-macro (if (memv w6662@t '(trace-define-syntax)) w2716@trace-define-syntax-macro (if (memv w6662@t '(trace-let-syntax)) w2720@trace-let-syntax-macro (if (memv w6662@t '(trace-letrec-syntax)) w2722@trace-letrec-syntax-macro (if (memv w6662@t '(define-condition-type)) w2764@define-condition-type-macro (if (memv w6662@t '(parameterize)) w2768@parameterize-macro (if (memv w6662@t '(include-into)) w2752@include-into-macro (if (memv w6662@t '(eol-style)) (lambda (w6664@x) (w2790@symbol-macro w6664@x '(none lf cr crlf nel crnel ls))) (if (memv w6662@t '(error-handling-mode)) (lambda (w6666@x) (w2790@symbol-macro w6666@x '(ignore raise replace))) (if (memv w6662@t '(buffer-mode)) (lambda (w6668@x) (w2790@symbol-macro w6668@x '(none line block))) (if (memv w6662@t '(file-options)) w2136@file-options-macro (if (memv w6662@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) w2766@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" w6660@x)))))))))))))))))))))))))))))))))))))))) w6660@x) (error 'core-macro-transformer '"BUG: invalid macro" w6660@x))))) (set! w2794@local-macro-transformer (lambda (w6670@x) (car w6670@x))) (set! w2796@do-macro-call (lambda (w6672@transformer w6673@expr) ((lambda (w6676@out) (begin ((letrec ((w6678@f (lambda (w6680@x) (if (not (w2221@stx? w6680@x)) (if (pair? w6680@x) (begin (w6678@f (car w6680@x)) (w6678@f (cdr w6680@x))) (if (vector? w6680@x) (vector-for-each w6678@f w6680@x) (if (symbol? w6680@x) (w3007@syntax-violation '#f '"raw symbol encountered in output of macro" w6673@expr w6680@x) (void)))) (void))))) w6678@f) w6676@out) (w2255@add-mark (w2245@gen-mark) w6676@out w6673@expr))) (w6672@transformer (w2255@add-mark w2247@anti-mark w6673@expr '#f))))) (set! w2798@chi-macro (lambda (w6682@p w6683@e) (w2796@do-macro-call (w2792@macro-transformer w6682@p) w6683@e))) (set! w2800@chi-local-macro (lambda (w6686@p w6687@e) (w2796@do-macro-call (w2794@local-macro-transformer w6686@p) w6687@e))) (set! w2802@chi-global-macro (lambda (w6690@p w6691@e) ((lambda (w6694@lib w6695@loc) (begin (w1804@w1460@visit-library w6694@lib) ((lambda (w6698@x) ((lambda (w6700@transformer) (w2796@do-macro-call w6700@transformer w6691@e)) (if (procedure? w6698@x) w6698@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" w6698@x)))) (symbol-value w6695@loc)))) (car w6690@p) (cdr w6690@p)))) (set! w2804@chi-expr* (lambda (w6702@e* w6703@r w6704@mr) (if (null? w6702@e*) '() ((lambda (w6708@e) (cons w6708@e (w2804@chi-expr* (cdr w6702@e*) w6703@r w6704@mr))) (w2808@chi-expr (car w6702@e*) w6703@r w6704@mr))))) (set! w2806@chi-application (lambda (w6710@e w6711@r w6712@mr) ((lambda (w6716@t) ((lambda (w6718@ls/false) (if w6718@ls/false (apply (lambda (w6720@rator w6721@rands) ((lambda (w6724@rator) (cons w6724@rator (w2804@chi-expr* w6721@rands w6711@r w6712@mr))) (w2808@chi-expr w6720@rator w6711@r w6712@mr))) w6718@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w6716@t))) (w2774@syntax-dispatch w6716@t '(any . each-any)))) w6710@e))) (set! w2808@chi-expr (lambda (w6726@e w6727@r w6728@mr) (call-with-values (lambda () (w2317@syntax-type w6726@e w6727@r)) (lambda (w6735@w6732@type w6736@w6733@value w6737@w6734@kwd) ((lambda (w6741@kwd w6742@value w6743@type) ((lambda (w6747@t) (if (memv w6747@t '(core-macro)) ((lambda (w6749@transformer) (w6749@transformer w6726@e w6727@r w6728@mr)) (w2788@core-macro-transformer w6742@value)) (if (memv w6747@t '(global)) ((lambda (w6751@lib) ((lambda (w6753@loc) ((lambda () (begin ((w2881@inv-collector) w6751@lib) w6753@loc)))) (cdr w6742@value))) (car w6742@value)) (if (memv w6747@t '(core-prim)) ((lambda (w6755@name) (list 'primitive w6755@name)) w6742@value) (if (memv w6747@t '(call)) (w2806@chi-application w6726@e w6727@r w6728@mr) (if (memv w6747@t '(lexical)) ((lambda (w6757@lex) w6757@lex) (w2658@lexical-var w6742@value)) (if (memv w6747@t '(global-macro global-macro!)) (w2808@chi-expr (w2802@chi-global-macro w6742@value w6726@e) w6727@r w6728@mr) (if (memv w6747@t '(local-macro local-macro!)) (w2808@chi-expr (w2800@chi-local-macro w6742@value w6726@e) w6727@r w6728@mr) (if (memv w6747@t '(macro macro!)) (w2808@chi-expr (w2798@chi-macro w6742@value w6726@e) w6727@r w6728@mr) (if (memv w6747@t '(constant)) ((lambda (w6759@datum) (list 'quote w6759@datum)) w6742@value) (if (memv w6747@t '(set!)) (w2810@chi-set! w6726@e w6727@r w6728@mr) (if (memv w6747@t '(begin)) ((lambda (w6761@t) ((lambda (w6763@ls/false) (if w6763@ls/false (apply (lambda (w6765@x w6766@x*) (w2116@w1973@build-sequence '#f (w2804@chi-expr* (cons w6765@x w6766@x*) w6727@r w6728@mr))) w6763@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w6761@t))) (w2774@syntax-dispatch w6761@t '(_ any . each-any)))) w6726@e) (if (memv w6747@t '(let-syntax letrec-syntax)) ((lambda (w6769@t) ((lambda (w6771@ls/false) (if (and w6771@ls/false (apply (lambda (w6773@xlhs* w6774@xrhs* w6775@xbody w6776@xbody*) (if (not (w2287@valid-bound-ids? w6773@xlhs*)) (w3007@syntax-violation '#f '"invalid identifiers" w6726@e) (void))) w6771@ls/false)) (apply (lambda (w6781@xlhs* w6782@xrhs* w6783@xbody w6784@xbody*) ((lambda (w6789@xlab*) ((lambda (w6791@xrib) ((lambda (w6793@xb*) ((lambda () (w2116@w1973@build-sequence '#f (w2804@chi-expr* (map (lambda (w6795@x) (w2257@add-subst w6791@xrib w6795@x)) (cons w6783@xbody w6784@xbody*)) (append (map cons w6789@xlab* w6793@xb*) w6727@r) (append (map cons w6789@xlab* w6793@xb*) w6728@mr)))))) (map (lambda (w6797@x) (w2339@make-eval-transformer (w2867@expand-transformer (if (eq? w6743@type 'let-syntax) w6797@x (w2257@add-subst w6791@xrib w6797@x)) w6728@mr))) w6782@xrhs*))) (w2208@make-full-rib w6781@xlhs* w6789@xlab*))) (map w2153@gen-label w6781@xlhs*))) w6771@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w6769@t))) (w2774@syntax-dispatch w6769@t '(_ #(each (any any)) any . each-any)))) w6726@e) (if (memv w6747@t '(displaced-lexical)) (w3007@syntax-violation '#f '"identifier out of context" w6726@e) (if (memv w6747@t '(syntax)) (w3007@syntax-violation '#f '"reference to pattern variable outside a syntax form" w6726@e) (if (memv w6747@t '(define define-syntax module import library)) (w3007@syntax-violation '#f (string-append ((lambda (w6799@t) (if (memv w6799@t '(define)) '"a definition" (if (memv w6799@t '(define-syntax)) '"a define-syntax" (if (memv w6799@t '(module)) '"a module definition" (if (memv w6799@t '(library)) '"a library definition" (if (memv w6799@t '(import)) '"an import declaration" (if (memv w6799@t '(export)) '"an export declaration" '"a non-expression"))))))) w6743@type) '" was found where an expression was expected") w6726@e) (if (memv w6747@t '(mutable)) (w3007@syntax-violation '#f '"attempt to reference an unexportable variable" w6726@e) (w3007@syntax-violation '#f '"invalid expression" w6726@e)))))))))))))))))) w6743@type)) w6737@w6734@kwd w6736@w6733@value w6735@w6732@type))))) (set! w2810@chi-set! (lambda (w6801@e w6802@r w6803@mr) ((lambda (w6807@t) ((lambda (w6809@ls/false) (if (and w6809@ls/false (apply (lambda (w6811@x w6812@v) (w2277@id? w6811@x)) w6809@ls/false)) (apply (lambda (w6815@x w6816@v) (call-with-values (lambda () (w2317@syntax-type w6815@x w6802@r)) (lambda (w6822@w6819@type w6823@w6820@value w6824@w6821@kwd) ((lambda (w6828@kwd w6829@value w6830@type) ((lambda (w6834@t) (if (memv w6834@t '(lexical)) (begin (w2662@set-lexical-mutable! w6829@value '#t) (list 'set! (w2658@lexical-var w6829@value) (w2808@chi-expr w6816@v w6802@r w6803@mr))) (if (memv w6834@t '(core-prim)) (w3007@syntax-violation '#f '"cannot modify imported core primitive" w6801@e) (if (memv w6834@t '(global)) (w3007@syntax-violation '#f '"attempt to modify imported binding" w6801@e) (if (memv w6834@t '(global-macro!)) (w2808@chi-expr (w2802@chi-global-macro w6829@value w6801@e) w6802@r w6803@mr) (if (memv w6834@t '(local-macro!)) (w2808@chi-expr (w2800@chi-local-macro w6829@value w6801@e) w6802@r w6803@mr) (if (memv w6834@t '(mutable)) (w3007@syntax-violation '#f '"attempt to assign to an unexportable variable" w6801@e) (w3007@syntax-violation '#f '"invalid syntax" w6801@e)))))))) w6830@type)) w6824@w6821@kwd w6823@w6820@value w6822@w6819@type)))) w6809@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w6807@t))) (w2774@syntax-dispatch w6807@t '(_ any any)))) w6801@e))) (set! w2812@verify-formals (lambda (w6836@fmls w6837@stx) ((lambda (w6840@t) ((lambda (w6842@ls/false) (if w6842@ls/false (apply (lambda (w6844@x*) (if (not (w2287@valid-bound-ids? w6844@x*)) (w2704@invalid-fmls-error w6837@stx w6836@fmls) (void))) w6842@ls/false) ((lambda (w6846@t) ((lambda (w6848@ls/false) (if w6848@ls/false (apply (lambda (w6850@x* w6851@x) (if (not (w2287@valid-bound-ids? (cons w6851@x w6850@x*))) (w2704@invalid-fmls-error w6837@stx w6836@fmls) (void))) w6848@ls/false) ((lambda (w6854@t) ((lambda (w6856@ls/false) (if w6856@ls/false (apply (lambda () (w3007@syntax-violation '#f '"invalid syntax" w6837@stx)) w6856@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w6854@t))) (w2774@syntax-dispatch w6854@t '_))) w6846@t))) (w2774@syntax-dispatch w6846@t '#(each+ any () any)))) w6840@t))) (w2774@syntax-dispatch w6840@t 'each-any))) w6836@fmls))) (set! w2814@chi-lambda-clause (lambda (w6858@stx w6859@fmls w6860@body* w6861@r w6862@mr) ((lambda (w6868@t) ((lambda (w6870@ls/false) (if w6870@ls/false (apply (lambda (w6872@x*) (begin (w2812@verify-formals w6859@fmls w6858@stx) ((lambda (w6874@lex* w6875@lab*) (values w6874@lex* (w2830@chi-internal (w2257@add-subst (w2208@make-full-rib w6872@x* w6875@lab*) w6860@body*) (w2666@add-lexicals w6875@lab* w6874@lex* w6861@r) w6862@mr))) (map w2149@gen-lexical w6872@x*) (map w2153@gen-label w6872@x*)))) w6870@ls/false) ((lambda (w6878@t) ((lambda (w6880@ls/false) (if w6880@ls/false (apply (lambda (w6882@x* w6883@x) (begin (w2812@verify-formals w6859@fmls w6858@stx) ((lambda (w6886@lex* w6887@lab* w6888@lex w6889@lab) (values (append w6886@lex* w6888@lex) (w2830@chi-internal (w2257@add-subst (w2208@make-full-rib (cons w6883@x w6882@x*) (cons w6889@lab w6887@lab*)) w6860@body*) (w2666@add-lexicals (cons w6889@lab w6887@lab*) (cons w6888@lex w6886@lex*) w6861@r) w6862@mr))) (map w2149@gen-lexical w6882@x*) (map w2153@gen-label w6882@x*) (w2149@gen-lexical w6883@x) (w2153@gen-label w6883@x)))) w6880@ls/false) ((lambda (w6894@t) ((lambda (w6896@ls/false) (if w6896@ls/false (apply (lambda () (w3007@syntax-violation '#f '"invalid syntax" w6859@fmls)) w6896@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w6894@t))) (w2774@syntax-dispatch w6894@t '_))) w6878@t))) (w2774@syntax-dispatch w6878@t '#(each+ any () any)))) w6868@t))) (w2774@syntax-dispatch w6868@t 'each-any))) w6859@fmls))) (set! w2816@chi-lambda-clause* (lambda (w6898@stx w6899@fmls* w6900@body** w6901@r w6902@mr) (if (null? w6899@fmls*) (values '() '()) (call-with-values (lambda () (w2814@chi-lambda-clause w6898@stx (car w6899@fmls*) (car w6900@body**) w6901@r w6902@mr)) (lambda (w6910@w6908@a w6911@w6909@b) ((lambda (w6914@b w6915@a) (call-with-values (lambda () (w2816@chi-lambda-clause* w6898@stx (cdr w6899@fmls*) (cdr w6900@body**) w6901@r w6902@mr)) (lambda (w6920@w6918@a* w6921@w6919@b*) ((lambda (w6924@b* w6925@a*) (values (cons w6915@a w6925@a*) (cons w6914@b w6924@b*))) w6921@w6919@b* w6920@w6918@a*)))) w6911@w6909@b w6910@w6908@a)))))) (set! w2818@chi-defun (lambda (w6928@x w6929@r w6930@mr) ((lambda (w6934@fmls w6935@body*) (call-with-values (lambda () (w2814@chi-lambda-clause w6934@fmls w6934@fmls w6935@body* w6929@r w6930@mr)) (lambda (w6940@w6938@fmls w6941@w6939@body) ((lambda (w6944@body w6945@fmls) (w2113@w1923@build-lambda '#f w6945@fmls w6944@body)) w6941@w6939@body w6940@w6938@fmls)))) (car w6928@x) (cdr w6928@x)))) (set! w2820@chi-rhs (lambda (w6948@rhs w6949@r w6950@mr) ((lambda (w6954@t) (if (memv w6954@t '(defun)) (w2818@chi-defun (cdr w6948@rhs) w6949@r w6950@mr) (if (memv w6954@t '(expr)) ((lambda (w6956@expr) (w2808@chi-expr w6956@expr w6949@r w6950@mr)) (cdr w6948@rhs)) (if (memv w6954@t '(top-expr)) ((lambda (w6958@expr) (w2116@w1973@build-sequence '#f (list (w2808@chi-expr w6958@expr w6949@r w6950@mr) (w2117@w1975@build-void)))) (cdr w6948@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" w6948@rhs))))) (car w6948@rhs)))) (set! w2822@expand-interaction-rhs*/init* (lambda (w6960@lhs* w6961@rhs* w6962@init* w6963@r w6964@mr) ((letrec ((w6970@f (lambda (w6972@lhs* w6973@rhs*) (if (null? w6972@lhs*) (map (lambda (w6976@x) (w2808@chi-expr w6976@x w6963@r w6964@mr)) w6962@init*) ((lambda (w6978@lhs w6979@rhs) ((lambda (w6982@t) (if (memv w6982@t '(defun)) ((lambda (w6984@rhs) (cons (list 'set! w6978@lhs w6984@rhs) (w6970@f (cdr w6972@lhs*) (cdr w6973@rhs*)))) (w2818@chi-defun (cdr w6979@rhs) w6963@r w6964@mr)) (if (memv w6982@t '(expr)) ((lambda (w6986@rhs) (cons (list 'set! w6978@lhs w6986@rhs) (w6970@f (cdr w6972@lhs*) (cdr w6973@rhs*)))) (w2808@chi-expr (cdr w6979@rhs) w6963@r w6964@mr)) (if (memv w6982@t '(top-expr)) ((lambda (w6988@e) (cons w6988@e (w6970@f (cdr w6972@lhs*) (cdr w6973@rhs*)))) (w2808@chi-expr (cdr w6979@rhs) w6963@r w6964@mr)) (error 'expand-interaction '"invallid" w6979@rhs))))) (car w6979@rhs))) (car w6972@lhs*) (car w6973@rhs*)))))) w6970@f) w6960@lhs* w6961@rhs*))) (set! w2824@chi-rhs* (lambda (w6990@rhs* w6991@r w6992@mr) ((letrec ((w6996@f (lambda (w6998@ls) (if (null? w6998@ls) '() ((lambda (w7000@a) (cons w7000@a (w6996@f (cdr w6998@ls)))) (w2820@chi-rhs (car w6998@ls) w6991@r w6992@mr)))))) w6996@f) w6990@rhs*))) (set! w2826@find-bound=? (lambda (w7002@x w7003@lhs* w7004@rhs*) (if (null? w7003@lhs*) '#f (if (w2283@bound-id=? w7002@x (car w7003@lhs*)) (car w7004@rhs*) (w2826@find-bound=? w7002@x (cdr w7003@lhs*) (cdr w7004@rhs*)))))) (set! w2828@find-dups (lambda (w7008@ls) ((letrec ((w7010@f (lambda (w7012@ls w7013@dups) (if (null? w7012@ls) w7013@dups ((lambda (w7016@t) (if w7016@t ((lambda (w7018@x) (w7010@f (cdr w7012@ls) (cons (list (car w7012@ls) w7018@x) w7013@dups))) w7016@t) (w7010@f (cdr w7012@ls) w7013@dups))) (w2826@find-bound=? (car w7012@ls) (cdr w7012@ls) (cdr w7012@ls))))))) w7010@f) w7008@ls '()))) (set! w2830@chi-internal (lambda (w7020@e* w7021@r w7022@mr) ((lambda (w7026@rib) (call-with-values (lambda () (w2865@chi-body* (map (lambda (w7036@x) (w2257@add-subst w7026@rib w7036@x)) (w2275@syntax->list w7020@e*)) w7021@r w7022@mr '() '() '() '() '() w7026@rib '#f)) (lambda (w7038@w7028@e* w7039@w7029@r w7040@w7030@mr w7041@w7031@lex* w7042@w7032@rhs* w7043@w7033@mod** w7044@w7034@kwd* w7045@w7035@_exp*) ((lambda (w7054@_exp* w7055@kwd* w7056@mod** w7057@rhs* w7058@lex* w7059@mr w7060@r w7061@e*) (begin (if (null? w7061@e*) (w3007@syntax-violation '#f '"no expression in body" w7061@e*) (void)) ((lambda (w7070@init*) ((lambda (w7072@rhs*) ((lambda () (w2119@w1979@build-letrec* '#f (reverse w7058@lex*) (reverse w7072@rhs*) (w2116@w1973@build-sequence '#f w7070@init*))))) (w2824@chi-rhs* w7057@rhs* w7060@r w7059@mr))) (w2804@chi-expr* (append (apply append (reverse w7056@mod**)) w7061@e*) w7060@r w7059@mr)))) w7045@w7035@_exp* w7044@w7034@kwd* w7043@w7033@mod** w7042@w7032@rhs* w7041@w7031@lex* w7040@w7030@mr w7039@w7029@r w7038@w7028@e*)))) (w2196@make-empty-rib)))) (set! w2832@parse-module (lambda (w7074@e) ((lambda (w7076@t) ((lambda (w7078@ls/false) (if w7078@ls/false (apply (lambda (w7080@export* w7081@b*) (begin (if (not (for-all w2277@id? w7080@export*)) (w3007@syntax-violation '#f '"module exports must be identifiers" w7074@e) (void)) (values '#f (list->vector w7080@export*) w7081@b*))) w7078@ls/false) ((lambda (w7084@t) ((lambda (w7086@ls/false) (if w7086@ls/false (apply (lambda (w7088@name w7089@export* w7090@b*) (begin (if (not (w2277@id? w7088@name)) (w3007@syntax-violation '#f '"module name must be an identifier" w7074@e) (void)) (if (not (for-all w2277@id? w7089@export*)) (w3007@syntax-violation '#f '"module exports must be identifiers" w7074@e) (void)) (values w7088@name (list->vector w7089@export*) w7090@b*))) w7086@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w7084@t))) (w2774@syntax-dispatch w7084@t '(_ any each-any . each-any)))) w7076@t))) (w2774@syntax-dispatch w7076@t '(_ each-any . each-any)))) w7074@e))) (set! w2838@w2833 (make-record-type-descriptor 'module-interface '#f 'w2836 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! w2840@w2835 '#f) (set! w2842@w2834 (make-record-constructor-descriptor w2838@w2833 '#f w2840@w2835)) (set! w2845@module-interface? (record-predicate w2838@w2833)) (set! w2847@make-module-interface (record-constructor w2842@w2834)) (set! w2849@module-interface-first-mark (record-accessor w2838@w2833 '0)) (set! w2851@module-interface-exp-id-vec (record-accessor w2838@w2833 '1)) (set! w2853@module-interface-exp-lab-vec (record-accessor w2838@w2833 '2)) (set! w2855@set-module-interface-first-mark! (record-mutator w2838@w2833 '0)) (set! w2857@set-module-interface-exp-id-vec! (record-mutator w2838@w2833 '1)) (set! w2859@set-module-interface-exp-lab-vec! (record-mutator w2838@w2833 '2)) (set! w2861@module-interface-exp-id* (lambda (w7094@iface w7095@id) ((lambda (w7099@diff-marks) (begin (set! w7099@diff-marks (lambda (w7106@ls w7107@x) (begin (if (null? w7106@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (w7110@a) (if (eq? w7110@a w7107@x) '() (cons w7110@a (w7099@diff-marks (cdr w7106@ls) w7107@x)))) (car w7106@ls))))) ((lambda (w7100@diff w7101@id-vec) (if (null? w7100@diff) w7101@id-vec (vector-map (lambda (w7104@x) (w2223@make-stx (w2225@stx-expr w7104@x) (append w7100@diff (w2227@stx-mark* w7104@x)) '() '())) w7101@id-vec))) (w7099@diff-marks (w2227@stx-mark* w7095@id) (w2849@module-interface-first-mark w7094@iface)) (w2851@module-interface-exp-id-vec w7094@iface)))) '#f))) (set! w2863@chi-internal-module (lambda (w7112@e w7113@r w7114@mr w7115@lex* w7116@rhs* w7117@mod** w7118@kwd*) (call-with-values (lambda () (w2832@parse-module w7112@e)) (lambda (w7129@w7126@name w7130@w7127@exp-id* w7131@w7128@e*) ((lambda (w7135@e* w7136@exp-id* w7137@name) ((lambda (w7141@rib) ((lambda (w7143@e*) ((lambda () (call-with-values (lambda () (w2865@chi-body* w7143@e* w7113@r w7114@mr w7115@lex* w7116@rhs* w7117@mod** w7118@kwd* '() w7141@rib '#f)) (lambda (w7153@w7145@e* w7154@w7146@r w7155@w7147@mr w7156@w7148@lex* w7157@w7149@rhs* w7158@w7150@mod** w7159@w7151@kwd* w7160@w7152@_exp*) ((lambda (w7169@_exp* w7170@kwd* w7171@mod** w7172@rhs* w7173@lex* w7174@mr w7175@r w7176@e*) ((lambda (w7185@exp-lab* w7186@mod**) (if (not w7137@name) (values w7173@lex* w7172@rhs* w7136@exp-id* w7185@exp-lab* w7175@r w7174@mr w7186@mod** w7170@kwd*) ((lambda (w7189@lab w7190@iface) (values w7173@lex* w7172@rhs* (vector w7137@name) (vector w7189@lab) (cons (cons w7189@lab (cons '$module w7190@iface)) w7175@r) (cons (cons w7189@lab (cons '$module w7190@iface)) w7174@mr) w7186@mod** w7170@kwd*)) (w2153@gen-label 'module) (w2847@make-module-interface (car (w2227@stx-mark* w7137@name)) (vector-map (lambda (w7193@x) (w2223@make-stx (w2225@stx-expr w7193@x) (w2227@stx-mark* w7193@x) '() '())) w7136@exp-id*) w7185@exp-lab*)))) (vector-map (lambda (w7195@x) (or (w2303@id->label (w2223@make-stx (w2279@id->sym w7195@x) (w2227@stx-mark* w7195@x) (list w7141@rib) '())) (w3007@syntax-violation '#f '"cannot find module export" w7195@x))) w7136@exp-id*) (cons w7176@e* w7171@mod**))) w7160@w7152@_exp* w7159@w7151@kwd* w7158@w7150@mod** w7157@w7149@rhs* w7156@w7148@lex* w7155@w7147@mr w7154@w7146@r w7153@w7145@e*)))))) (map (lambda (w7197@x) (w2257@add-subst w7141@rib w7197@x)) (w2275@syntax->list w7135@e*)))) (w2196@make-empty-rib))) w7131@w7128@e* w7130@w7127@exp-id* w7129@w7126@name))))) (set! w2865@chi-body* (lambda (w7199@e* w7200@r w7201@mr w7202@lex* w7203@rhs* w7204@mod** w7205@kwd* w7206@exp* w7207@rib w7208@top?) (if (null? w7199@e*) (values w7199@e* w7200@r w7201@mr w7202@lex* w7203@rhs* w7204@mod** w7205@kwd* w7206@exp*) ((lambda (w7219@e) (call-with-values (lambda () (w2317@syntax-type w7219@e w7200@r)) (lambda (w7224@w7221@type w7225@w7222@value w7226@w7223@kwd) ((lambda (w7230@kwd w7231@value w7232@type) ((lambda (w7236@kwd*) ((lambda (w7238@t) (if (memv w7238@t '(define)) (call-with-values (lambda () (w2650@parse-define w7219@e)) (lambda (w7242@w7240@id w7243@w7241@rhs) ((lambda (w7246@rhs w7247@id) (begin (if (w2291@bound-id-member? w7247@id w7236@kwd*) (w3007@syntax-violation '#f '"cannot redefine keyword" w7219@e) (void)) (call-with-values (lambda () (w2157@gen-define-label+loc w7247@id w7207@rib)) (lambda (w7252@w7250@lab w7253@w7251@lex) ((lambda (w7256@lex w7257@lab) (begin (w2198@extend-rib! w7207@rib w7247@id w7257@lab) (w2865@chi-body* (cdr w7199@e*) (w2664@add-lexical w7257@lab w7256@lex w7200@r) w7201@mr (cons w7256@lex w7202@lex*) (cons w7246@rhs w7203@rhs*) w7204@mod** w7236@kwd* w7206@exp* w7207@rib w7208@top?))) w7253@w7251@lex w7252@w7250@lab))))) w7243@w7241@rhs w7242@w7240@id))) (if (memv w7238@t '(define-syntax)) (call-with-values (lambda () (w2652@parse-define-syntax w7219@e)) (lambda (w7262@w7260@id w7263@w7261@rhs) ((lambda (w7266@rhs w7267@id) (begin (if (w2291@bound-id-member? w7267@id w7236@kwd*) (w3007@syntax-violation '#f '"cannot redefine keyword" w7219@e) (void)) ((lambda (w7270@lab w7271@expanded-rhs) (begin (w2198@extend-rib! w7207@rib w7267@id w7270@lab) ((lambda (w7274@b) (w2865@chi-body* (cdr w7199@e*) (cons (cons w7270@lab w7274@b) w7200@r) (cons (cons w7270@lab w7274@b) w7201@mr) w7202@lex* w7203@rhs* w7204@mod** w7236@kwd* w7206@exp* w7207@rib w7208@top?)) (w2339@make-eval-transformer w7271@expanded-rhs)))) (w2159@gen-define-label w7267@id w7207@rib) (w2867@expand-transformer w7266@rhs w7201@mr)))) w7263@w7261@rhs w7262@w7260@id))) (if (memv w7238@t '(let-syntax letrec-syntax)) ((lambda (w7276@t) ((lambda (w7278@ls/false) (if (and w7278@ls/false (apply (lambda (w7280@xlhs* w7281@xrhs* w7282@xbody*) (if (not (w2287@valid-bound-ids? w7280@xlhs*)) (w3007@syntax-violation '#f '"invalid identifiers" w7219@e) (void))) w7278@ls/false)) (apply (lambda (w7286@xlhs* w7287@xrhs* w7288@xbody*) ((lambda (w7292@xlab*) ((lambda (w7294@xrib) ((lambda (w7296@xb*) ((lambda () (w2865@chi-body* (append (map (lambda (w7298@x) (w2257@add-subst w7294@xrib w7298@x)) w7288@xbody*) (cdr w7199@e*)) (append (map cons w7292@xlab* w7296@xb*) w7200@r) (append (map cons w7292@xlab* w7296@xb*) w7201@mr) w7202@lex* w7203@rhs* w7204@mod** w7236@kwd* w7206@exp* w7207@rib w7208@top?)))) (map (lambda (w7300@x) (w2339@make-eval-transformer (w2867@expand-transformer (if (eq? w7232@type 'let-syntax) w7300@x (w2257@add-subst w7294@xrib w7300@x)) w7201@mr))) w7287@xrhs*))) (w2208@make-full-rib w7286@xlhs* w7292@xlab*))) (map w2153@gen-label w7286@xlhs*))) w7278@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w7276@t))) (w2774@syntax-dispatch w7276@t '(_ #(each (any any)) . each-any)))) w7219@e) (if (memv w7238@t '(begin)) ((lambda (w7302@t) ((lambda (w7304@ls/false) (if w7304@ls/false (apply (lambda (w7306@x*) (w2865@chi-body* (append w7306@x* (cdr w7199@e*)) w7200@r w7201@mr w7202@lex* w7203@rhs* w7204@mod** w7236@kwd* w7206@exp* w7207@rib w7208@top?)) w7304@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w7302@t))) (w2774@syntax-dispatch w7302@t '(_ . each-any)))) w7219@e) (if (memv w7238@t '(global-macro global-macro!)) (w2865@chi-body* (cons (w2257@add-subst w7207@rib (w2802@chi-global-macro w7231@value w7219@e)) (cdr w7199@e*)) w7200@r w7201@mr w7202@lex* w7203@rhs* w7204@mod** w7236@kwd* w7206@exp* w7207@rib w7208@top?) (if (memv w7238@t '(local-macro local-macro!)) (w2865@chi-body* (cons (w2257@add-subst w7207@rib (w2800@chi-local-macro w7231@value w7219@e)) (cdr w7199@e*)) w7200@r w7201@mr w7202@lex* w7203@rhs* w7204@mod** w7236@kwd* w7206@exp* w7207@rib w7208@top?) (if (memv w7238@t '(macro macro!)) (w2865@chi-body* (cons (w2257@add-subst w7207@rib (w2798@chi-macro w7231@value w7219@e)) (cdr w7199@e*)) w7200@r w7201@mr w7202@lex* w7203@rhs* w7204@mod** w7236@kwd* w7206@exp* w7207@rib w7208@top?) (if (memv w7238@t '(module)) (call-with-values (lambda () (w2863@chi-internal-module w7219@e w7200@r w7201@mr w7202@lex* w7203@rhs* w7204@mod** w7236@kwd*)) (lambda (w7316@w7308@lex* w7317@w7309@rhs* w7318@w7310@m-exp-id* w7319@w7311@m-exp-lab* w7320@w7312@r w7321@w7313@mr w7322@w7314@mod** w7323@w7315@kwd*) ((lambda (w7332@kwd* w7333@mod** w7334@mr w7335@r w7336@m-exp-lab* w7337@m-exp-id* w7338@rhs* w7339@lex*) (begin (vector-for-each (lambda (w7348@id w7349@lab) (w2198@extend-rib! w7207@rib w7348@id w7349@lab)) w7337@m-exp-id* w7336@m-exp-lab*) (w2865@chi-body* (cdr w7199@e*) w7335@r w7334@mr w7339@lex* w7338@rhs* w7333@mod** w7332@kwd* w7206@exp* w7207@rib w7208@top?))) w7323@w7315@kwd* w7322@w7314@mod** w7321@w7313@mr w7320@w7312@r w7319@w7311@m-exp-lab* w7318@w7310@m-exp-id* w7317@w7309@rhs* w7316@w7308@lex*))) (if (memv w7238@t '(library)) (begin (w2977@library-expander (w2299@stx->datum w7219@e)) (w2865@chi-body* (cdr w7199@e*) w7200@r w7201@mr w7202@lex* w7203@rhs* w7204@mod** w7236@kwd* w7206@exp* w7207@rib w7208@top?)) (if (memv w7238@t '(export)) ((lambda (w7352@t) ((lambda (w7354@ls/false) (if w7354@ls/false (apply (lambda (w7356@exp-decl*) (w2865@chi-body* (cdr w7199@e*) w7200@r w7201@mr w7202@lex* w7203@rhs* w7204@mod** w7236@kwd* (append w7356@exp-decl* w7206@exp*) w7207@rib w7208@top?)) w7354@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w7352@t))) (w2774@syntax-dispatch w7352@t '(_ . each-any)))) w7219@e) (if (memv w7238@t '(import)) ((lambda () ((lambda (w7359@module-import? w7361@module-import w7363@library-import) (begin (set! w7359@module-import? (lambda (w7435@e) ((lambda (w7437@t) ((lambda (w7439@ls/false) (if (and w7439@ls/false (apply (lambda (w7441@id) (w2277@id? w7441@id)) w7439@ls/false)) (apply (lambda (w7443@id) '#t) w7439@ls/false) ((lambda (w7445@t) ((lambda (w7447@ls/false) (if w7447@ls/false (apply (lambda (w7449@imp*) '#f) w7447@ls/false) ((lambda (w7451@t) ((lambda (w7453@ls/false) (if w7453@ls/false (apply (lambda () (w3007@syntax-violation '#f '"malformed import form" w7435@e)) w7453@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w7451@t))) (w2774@syntax-dispatch w7451@t '_))) w7445@t))) (w2774@syntax-dispatch w7445@t '(_ . each-any)))) w7437@t))) (w2774@syntax-dispatch w7437@t '(_ any)))) w7435@e))) (set! w7361@module-import (lambda (w7404@e w7405@r) ((lambda (w7408@t) ((lambda (w7410@ls/false) (if (and w7410@ls/false (apply (lambda (w7412@id) (w2277@id? w7412@id)) w7410@ls/false)) (apply (lambda (w7414@id) (call-with-values (lambda () (w2317@syntax-type w7414@id w7405@r)) (lambda (w7419@w7416@type w7420@w7417@value w7421@w7418@kwd) ((lambda (w7425@kwd w7426@value w7427@type) ((lambda (w7431@t) (if (memv w7431@t '($module)) ((lambda (w7433@iface) (values (w2861@module-interface-exp-id* w7433@iface w7414@id) (w2853@module-interface-exp-lab-vec w7433@iface))) w7426@value) (w3007@syntax-violation '#f '"invalid import" w7404@e))) w7427@type)) w7421@w7418@kwd w7420@w7417@value w7419@w7416@type)))) w7410@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w7408@t))) (w2774@syntax-dispatch w7408@t '(_ any)))) w7404@e))) (set! w7363@library-import (lambda (w7378@e) ((lambda (w7380@t) ((lambda (w7382@ls/false) (if w7382@ls/false (apply (lambda (w7384@ctxt w7385@imp*) (call-with-values (lambda () (w2875@parse-import-spec* (w3013@syntax->datum w7385@imp*))) (lambda (w7390@w7388@subst-names w7391@w7389@subst-labels) ((lambda (w7394@subst-labels w7395@subst-names) (values (vector-map (lambda (w7398@name) (w2243@datum->stx w7384@ctxt w7398@name)) w7395@subst-names) w7394@subst-labels)) w7391@w7389@subst-labels w7390@w7388@subst-names)))) w7382@ls/false) ((lambda (w7400@t) ((lambda (w7402@ls/false) (if w7402@ls/false (apply (lambda () (w3007@syntax-violation '#f '"invalid import form" w7378@e)) w7402@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w7400@t))) (w2774@syntax-dispatch w7400@t '_))) w7380@t))) (w2774@syntax-dispatch w7380@t '(any . each-any)))) w7378@e))) (begin (call-with-values (lambda () (if (w7359@module-import? w7219@e) (w7361@module-import w7219@e w7200@r) (w7363@library-import w7219@e))) (lambda (w7366@w7364@id* w7367@w7365@lab*) ((lambda (w7370@lab* w7371@id*) (vector-for-each (lambda (w7374@id w7375@lab) (w2198@extend-rib! w7207@rib w7374@id w7375@lab)) w7371@id* w7370@lab*)) w7367@w7365@lab* w7366@w7364@id*))) (w2865@chi-body* (cdr w7199@e*) w7200@r w7201@mr w7202@lex* w7203@rhs* w7204@mod** w7236@kwd* w7206@exp* w7207@rib w7208@top?)))) '#f '#f '#f))) (if w7208@top? (w2865@chi-body* (cdr w7199@e*) w7200@r w7201@mr (cons (w2149@gen-lexical 'dummy) w7202@lex*) (cons (cons 'top-expr w7219@e) w7203@rhs*) w7204@mod** w7236@kwd* w7206@exp* w7207@rib w7208@top?) (values w7199@e* w7200@r w7201@mr w7202@lex* w7203@rhs* w7204@mod** w7236@kwd* w7206@exp*)))))))))))))) w7232@type)) (if (w2277@id? w7230@kwd) (cons w7230@kwd w7205@kwd*) w7205@kwd*))) w7226@w7223@kwd w7225@w7222@value w7224@w7221@type)))) (car w7199@e*))))) (set! w2867@expand-transformer (lambda (w7455@expr w7456@r) ((lambda (w7459@rtc) ((lambda (w7461@expanded-rhs) (begin (for-each ((lambda (w7463@mark-visit) (lambda (w7465@x) (begin (w1803@w1458@invoke-library w7465@x) (w7463@mark-visit w7465@x)))) (w2883@vis-collector)) (w7459@rtc)) w7461@expanded-rhs)) ((lambda (w7471@w7467@inv-collector w7472@w7468@vis-collector w7473@w7469@inv-collector w7474@w7470@vis-collector) ((lambda (w7479@swap) (dynamic-wind w7479@swap (lambda () (w2808@chi-expr w7455@expr w7456@r w7456@r)) w7479@swap)) (lambda () (begin ((lambda (w7481@t) (begin (w7471@w7467@inv-collector w7473@w7469@inv-collector) (set! w7473@w7469@inv-collector w7481@t))) (w7471@w7467@inv-collector)) ((lambda (w7483@t) (begin (w7472@w7468@vis-collector w7474@w7470@vis-collector) (set! w7474@w7470@vis-collector w7483@t))) (w7472@w7468@vis-collector)))))) w2881@inv-collector w2883@vis-collector w7459@rtc (lambda (w7485@x) (values))))) (w2879@make-collector)))) (set! w2869@parse-exports (lambda (w7487@exp*) ((letrec ((w7489@f (lambda (w7491@exp* w7492@int* w7493@ext*) (if (null? w7491@exp*) (begin (if (not (w2287@valid-bound-ids? w7493@ext*)) (w3007@syntax-violation 'export '"invalid exports" (w2828@find-dups w7493@ext*)) (void)) (values (map w3013@syntax->datum w7493@ext*) w7492@int*)) ((lambda (w7497@t) ((lambda (w7499@ls/false) (if w7499@ls/false (apply (lambda (w7501@rename w7502@i* w7503@e*) (begin (if (not (and (eq? (w3013@syntax->datum w7501@rename) 'rename) (for-all w2277@id? w7502@i*) (for-all w2277@id? w7503@e*))) (w3007@syntax-violation 'export '"invalid export specifier" (car w7491@exp*)) (void)) (w7489@f (cdr w7491@exp*) (append w7502@i* w7492@int*) (append w7503@e* w7493@ext*)))) w7499@ls/false) ((lambda (w7507@t) ((lambda (w7509@ls/false) (if w7509@ls/false (apply (lambda (w7511@ie) (begin (if (not (w2277@id? w7511@ie)) (w3007@syntax-violation 'export '"invalid export" w7511@ie) (void)) (w7489@f (cdr w7491@exp*) (cons w7511@ie w7492@int*) (cons w7511@ie w7493@ext*)))) w7509@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w7507@t))) (w2774@syntax-dispatch w7507@t 'any))) w7497@t))) (w2774@syntax-dispatch w7497@t '(any . #(each (any any)))))) (car w7491@exp*)))))) w7489@f) w7487@exp* '() '()))) (set! w2871@parse-library-name (lambda (w7513@spec) ((lambda (w7516@parse) (begin (set! w7516@parse (lambda (w7527@x) ((lambda (w7529@t) ((lambda (w7531@ls/false) (if (and w7531@ls/false (apply (lambda (w7533@v*) (for-all (lambda (w7535@x) ((lambda (w7537@x) (and (integer? w7537@x) (exact? w7537@x))) (w3013@syntax->datum w7535@x))) w7533@v*)) w7531@ls/false)) (apply (lambda (w7539@v*) (values '() (map w3013@syntax->datum w7539@v*))) w7531@ls/false) ((lambda (w7541@t) ((lambda (w7543@ls/false) (if (and w7543@ls/false (apply (lambda (w7545@x w7546@rest) (symbol? (w3013@syntax->datum w7545@x))) w7543@ls/false)) (apply (lambda (w7549@x w7550@rest) (call-with-values (lambda () (w7516@parse w7550@rest)) (lambda (w7555@w7553@x* w7556@w7554@v*) ((lambda (w7559@v* w7560@x*) (values (cons (w3013@syntax->datum w7549@x) w7560@x*) w7559@v*)) w7556@w7554@v* w7555@w7553@x*)))) w7543@ls/false) ((lambda (w7563@t) ((lambda (w7565@ls/false) (if w7565@ls/false (apply (lambda () (values '() '())) w7565@ls/false) ((lambda (w7567@t) ((lambda (w7569@ls/false) (if w7569@ls/false (apply (lambda () (w3007@syntax-violation '#f '"invalid library name" w7513@spec)) w7569@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w7567@t))) (w2774@syntax-dispatch w7567@t '_))) w7563@t))) (w2774@syntax-dispatch w7563@t '()))) w7541@t))) (w2774@syntax-dispatch w7541@t '(any . any)))) w7529@t))) (w2774@syntax-dispatch w7529@t '(each-any)))) w7527@x))) (call-with-values (lambda () (w7516@parse w7513@spec)) (lambda (w7519@w7517@name* w7520@w7518@ver*) ((lambda (w7523@ver* w7524@name*) (begin (if (null? w7524@name*) (w3007@syntax-violation '#f '"empty library name" w7513@spec) (void)) (values w7524@name* w7523@ver*))) w7520@w7518@ver* w7519@w7517@name*))))) '#f))) (set! w2873@parse-library (lambda (w7571@e) ((lambda (w7573@t) ((lambda (w7575@ls/false) (if (and w7575@ls/false (apply (lambda (w7577@library w7578@name* w7579@export w7580@exp* w7581@import w7582@imp* w7583@b*) (and (eq? (w3013@syntax->datum w7579@export) 'export) (eq? (w3013@syntax->datum w7581@import) 'import) (eq? (w3013@syntax->datum w7577@library) 'library))) w7575@ls/false)) (apply (lambda (w7591@library w7592@name* w7593@export w7594@exp* w7595@import w7596@imp* w7597@b*) (values w7592@name* w7594@exp* w7596@imp* w7597@b*)) w7575@ls/false) ((lambda (w7605@t) ((lambda (w7607@ls/false) (if w7607@ls/false (apply (lambda () (w3007@syntax-violation '#f '"malformed library" w7571@e)) w7607@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w7605@t))) (w2774@syntax-dispatch w7605@t '_))) w7573@t))) (w2774@syntax-dispatch w7573@t '(any each-any (any . each-any) (any . each-any) . each-any)))) w7571@e))) (set! w2875@parse-import-spec* ((lambda () ((lambda (w7610@idsyn? w7612@dup-error w7614@merge-substs w7616@exclude* w7618@find* w7620@rem* w7622@remove-dups w7624@parse-library-name w7626@import-library w7628@get-import w7630@add-imports!) (begin (set! w7610@idsyn? (lambda (w8121@x) (symbol? (w3013@syntax->datum w8121@x)))) (set! w7612@dup-error (lambda (w8119@name) (w3007@syntax-violation 'import '"two imports with different bindings" w8119@name))) (set! w7614@merge-substs (lambda (w8101@s w8102@subst) ((lambda (w8106@insert-to-subst) (begin (set! w8106@insert-to-subst (lambda (w8107@a w8108@subst) ((lambda (w8111@name w8112@label) ((lambda (w8115@t) (if w8115@t ((lambda (w8117@x) (if (eq? (cdr w8117@x) w8112@label) w8108@subst (w7612@dup-error w8111@name))) w8115@t) (cons w8107@a w8108@subst))) (assq w8111@name w8108@subst))) (car w8107@a) (cdr w8107@a)))) (if (null? w8101@s) w8102@subst (w8106@insert-to-subst (car w8101@s) (w7614@merge-substs (cdr w8101@s) w8102@subst))))) '#f))) (set! w7616@exclude* (lambda (w8059@sym* w8060@subst) ((lambda (w8064@exclude) (begin (set! w8064@exclude (lambda (w8085@sym w8086@subst) (if (null? w8086@subst) (w3007@syntax-violation 'import '"cannot rename unbound identifier" w8085@sym) (if (eq? w8085@sym (caar w8086@subst)) (values (cdar w8086@subst) (cdr w8086@subst)) ((lambda (w8089@a) (call-with-values (lambda () (w8064@exclude w8085@sym (cdr w8086@subst))) (lambda (w8093@w8091@old w8094@w8092@subst) ((lambda (w8097@subst w8098@old) (values w8098@old (cons w8089@a w8097@subst))) w8094@w8092@subst w8093@w8091@old)))) (car w8086@subst)))))) (if (null? w8059@sym*) (values '() w8060@subst) (call-with-values (lambda () (w8064@exclude (car w8059@sym*) w8060@subst)) (lambda (w8067@w8065@old w8068@w8066@subst) ((lambda (w8071@subst w8072@old) (call-with-values (lambda () (w7616@exclude* (cdr w8059@sym*) w8071@subst)) (lambda (w8077@w8075@old* w8078@w8076@subst) ((lambda (w8081@subst w8082@old*) (values (cons w8072@old w8082@old*) w8081@subst)) w8078@w8076@subst w8077@w8075@old*)))) w8068@w8066@subst w8067@w8065@old)))))) '#f))) (set! w7618@find* (lambda (w8051@sym* w8052@subst) (map (lambda (w8055@x) ((lambda (w8057@t) (if w8057@t (cdr w8057@t) (w3007@syntax-violation 'import '"cannot find identifier" w8055@x))) (assq w8055@x w8052@subst))) w8051@sym*))) (set! w7620@rem* (lambda (w8043@sym* w8044@subst) ((letrec ((w8047@f (lambda (w8049@subst) (if (null? w8049@subst) '() (if (memq (caar w8049@subst) w8043@sym*) (w8047@f (cdr w8049@subst)) (cons (car w8049@subst) (w8047@f (cdr w8049@subst)))))))) w8047@f) w8044@subst))) (set! w7622@remove-dups (lambda (w8041@ls) (if (null? w8041@ls) '() (if (memq (car w8041@ls) (cdr w8041@ls)) (w7622@remove-dups (cdr w8041@ls)) (cons (car w8041@ls) (w7622@remove-dups (cdr w8041@ls))))))) (set! w7624@parse-library-name (lambda (w7811@spec) ((lambda (w7814@subversion? w7816@subversion-pred w7818@version-pred) (begin (set! w7814@subversion? (lambda (w8037@x) ((lambda (w8039@x) (and (integer? w8039@x) (exact? w8039@x) (>= w8039@x '0))) (w3013@syntax->datum w8037@x)))) (set! w7816@subversion-pred (lambda (w7941@x*) ((lambda (w7943@t) ((lambda (w7945@ls/false) (if (and w7945@ls/false (apply (lambda (w7947@n) (w7814@subversion? w7947@n)) w7945@ls/false)) (apply (lambda (w7949@n) (lambda (w7951@x) (= w7951@x (w3013@syntax->datum w7949@n)))) w7945@ls/false) ((lambda (w7953@t) ((lambda (w7955@ls/false) (if (and w7955@ls/false (apply (lambda (w7957@p? w7958@sub*) (eq? (w3013@syntax->datum w7957@p?) 'and)) w7955@ls/false)) (apply (lambda (w7961@p? w7962@sub*) ((lambda (w7965@p*) (lambda (w7967@x) (for-all (lambda (w7969@p) (w7969@p w7967@x)) w7965@p*))) (map w7816@subversion-pred w7962@sub*))) w7955@ls/false) ((lambda (w7971@t) ((lambda (w7973@ls/false) (if (and w7973@ls/false (apply (lambda (w7975@p? w7976@sub*) (eq? (w3013@syntax->datum w7975@p?) 'or)) w7973@ls/false)) (apply (lambda (w7979@p? w7980@sub*) ((lambda (w7983@p*) (lambda (w7985@x) (exists (lambda (w7987@p) (w7987@p w7985@x)) w7983@p*))) (map w7816@subversion-pred w7980@sub*))) w7973@ls/false) ((lambda (w7989@t) ((lambda (w7991@ls/false) (if (and w7991@ls/false (apply (lambda (w7993@p? w7994@sub) (eq? (w3013@syntax->datum w7993@p?) 'not)) w7991@ls/false)) (apply (lambda (w7997@p? w7998@sub) ((lambda (w8001@p) (lambda (w8003@x) (not (w8001@p w8003@x)))) (w7816@subversion-pred w7998@sub))) w7991@ls/false) ((lambda (w8005@t) ((lambda (w8007@ls/false) (if (and w8007@ls/false (apply (lambda (w8009@p? w8010@n) (and (eq? (w3013@syntax->datum w8009@p?) '<=) (w7814@subversion? w8010@n))) w8007@ls/false)) (apply (lambda (w8013@p? w8014@n) (lambda (w8017@x) (<= w8017@x (w3013@syntax->datum w8014@n)))) w8007@ls/false) ((lambda (w8019@t) ((lambda (w8021@ls/false) (if (and w8021@ls/false (apply (lambda (w8023@p? w8024@n) (and (eq? (w3013@syntax->datum w8023@p?) '>=) (w7814@subversion? w8024@n))) w8021@ls/false)) (apply (lambda (w8027@p? w8028@n) (lambda (w8031@x) (>= w8031@x (w3013@syntax->datum w8028@n)))) w8021@ls/false) ((lambda (w8033@t) ((lambda (w8035@ls/false) (if w8035@ls/false (apply (lambda () (w3007@syntax-violation 'import '"invalid sub-version spec" w7811@spec w7941@x*)) w8035@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w8033@t))) (w2774@syntax-dispatch w8033@t '_))) w8019@t))) (w2774@syntax-dispatch w8019@t '(any any)))) w8005@t))) (w2774@syntax-dispatch w8005@t '(any any)))) w7989@t))) (w2774@syntax-dispatch w7989@t '(any any)))) w7971@t))) (w2774@syntax-dispatch w7971@t '(any . each-any)))) w7953@t))) (w2774@syntax-dispatch w7953@t '(any . each-any)))) w7943@t))) (w2774@syntax-dispatch w7943@t 'any))) w7941@x*))) (set! w7818@version-pred (lambda (w7861@x*) ((lambda (w7863@t) ((lambda (w7865@ls/false) (if w7865@ls/false (apply (lambda () (lambda (w7867@x) '#t)) w7865@ls/false) ((lambda (w7869@t) ((lambda (w7871@ls/false) (if (and w7871@ls/false (apply (lambda (w7873@c w7874@ver*) (eq? (w3013@syntax->datum w7873@c) 'and)) w7871@ls/false)) (apply (lambda (w7877@c w7878@ver*) ((lambda (w7881@p*) (lambda (w7883@x) (for-all (lambda (w7885@p) (w7885@p w7883@x)) w7881@p*))) (map w7818@version-pred w7878@ver*))) w7871@ls/false) ((lambda (w7887@t) ((lambda (w7889@ls/false) (if (and w7889@ls/false (apply (lambda (w7891@c w7892@ver*) (eq? (w3013@syntax->datum w7891@c) 'or)) w7889@ls/false)) (apply (lambda (w7895@c w7896@ver*) ((lambda (w7899@p*) (lambda (w7901@x) (exists (lambda (w7903@p) (w7903@p w7901@x)) w7899@p*))) (map w7818@version-pred w7896@ver*))) w7889@ls/false) ((lambda (w7905@t) ((lambda (w7907@ls/false) (if (and w7907@ls/false (apply (lambda (w7909@c w7910@ver) (eq? (w3013@syntax->datum w7909@c) 'not)) w7907@ls/false)) (apply (lambda (w7913@c w7914@ver) ((lambda (w7917@p) (lambda (w7919@x) (not (w7917@p w7919@x)))) (w7818@version-pred w7914@ver))) w7907@ls/false) ((lambda (w7921@t) ((lambda (w7923@ls/false) (if w7923@ls/false (apply (lambda (w7925@sub*) ((lambda (w7927@p*) (lambda (w7929@x) ((letrec ((w7931@f (lambda (w7933@p* w7934@x) (if (null? w7933@p*) '#t (if (null? w7934@x) '#f (and ((car w7933@p*) (car w7934@x)) (w7931@f (cdr w7933@p*) (cdr w7934@x)))))))) w7931@f) w7927@p* w7929@x))) (map w7816@subversion-pred w7925@sub*))) w7923@ls/false) ((lambda (w7937@t) ((lambda (w7939@ls/false) (if w7939@ls/false (apply (lambda () (w3007@syntax-violation 'import '"invalid version spec" w7811@spec w7861@x*)) w7939@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w7937@t))) (w2774@syntax-dispatch w7937@t '_))) w7921@t))) (w2774@syntax-dispatch w7921@t 'each-any))) w7905@t))) (w2774@syntax-dispatch w7905@t '(any any)))) w7887@t))) (w2774@syntax-dispatch w7887@t '(any . each-any)))) w7869@t))) (w2774@syntax-dispatch w7869@t '(any . each-any)))) w7863@t))) (w2774@syntax-dispatch w7863@t '()))) w7861@x*))) ((letrec ((w7819@f (lambda (w7821@x) ((lambda (w7823@t) ((lambda (w7825@ls/false) (if w7825@ls/false (apply (lambda (w7827@version-spec*) (values '() (w7818@version-pred w7827@version-spec*))) w7825@ls/false) ((lambda (w7829@t) ((lambda (w7831@ls/false) (if (and w7831@ls/false (apply (lambda (w7833@x w7834@x*) (w7610@idsyn? w7833@x)) w7831@ls/false)) (apply (lambda (w7837@x w7838@x*) (call-with-values (lambda () (w7819@f w7838@x*)) (lambda (w7843@w7841@name w7844@w7842@pred) ((lambda (w7847@pred w7848@name) (values (cons (w3013@syntax->datum w7837@x) w7848@name) w7847@pred)) w7844@w7842@pred w7843@w7841@name)))) w7831@ls/false) ((lambda (w7851@t) ((lambda (w7853@ls/false) (if w7853@ls/false (apply (lambda () (values '() (lambda (w7855@x) '#t))) w7853@ls/false) ((lambda (w7857@t) ((lambda (w7859@ls/false) (if w7859@ls/false (apply (lambda () (w3007@syntax-violation '#f '"invalid import spec" w7811@spec)) w7859@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w7857@t))) (w2774@syntax-dispatch w7857@t '_))) w7851@t))) (w2774@syntax-dispatch w7851@t '()))) w7829@t))) (w2774@syntax-dispatch w7829@t '(any . any)))) w7823@t))) (w2774@syntax-dispatch w7823@t '(each-any)))) w7821@x)))) w7819@f) w7811@spec))) '#f '#f '#f))) (set! w7626@import-library (lambda (w7797@spec*) (call-with-values (lambda () (w7624@parse-library-name w7797@spec*)) (lambda (w7801@w7799@name w7802@w7800@pred) ((lambda (w7805@pred w7806@name) (begin (if (null? w7806@name) (w3007@syntax-violation 'import '"empty library name" w7797@spec*) (void)) ((lambda (w7809@lib) (begin (if (not w7809@lib) (w3007@syntax-violation 'import '"cannot find library with required name" w7806@name) (void)) (if (not (w7805@pred (w1756@w1364@library-version w7809@lib))) (w3007@syntax-violation 'import '"library does not satisfy version specification" w7797@spec* w7809@lib) (void)) ((w2885@imp-collector) w7809@lib) (w1760@w1372@library-subst w7809@lib))) (w1796@w1444@find-library-by-name w7806@name)))) w7802@w7800@pred w7801@w7799@name))))) (set! w7628@get-import (lambda (w7655@spec) ((lambda (w7657@t) ((lambda (w7659@ls/false) (if (and w7659@ls/false (apply (lambda (w7661@x w7662@x*) (not (memq (w3013@syntax->datum w7661@x) '(for rename except only prefix library)))) w7659@ls/false)) (apply (lambda (w7665@x w7666@x*) (w7626@import-library (cons w7665@x w7666@x*))) w7659@ls/false) ((lambda (w7669@t) ((lambda (w7671@ls/false) (if (and w7671@ls/false (apply (lambda (w7673@rename w7674@isp w7675@old* w7676@new*) (and (eq? (w3013@syntax->datum w7673@rename) 'rename) (for-all w7610@idsyn? w7675@old*) (for-all w7610@idsyn? w7676@new*))) w7671@ls/false)) (apply (lambda (w7681@rename w7682@isp w7683@old* w7684@new*) ((lambda (w7689@subst w7690@old* w7691@new*) ((lambda (w7695@old-label*) ((lambda (w7697@subst) (w7614@merge-substs (map cons w7691@new* w7695@old-label*) w7697@subst)) (w7620@rem* w7690@old* w7689@subst))) (w7618@find* w7690@old* w7689@subst))) (w7628@get-import w7682@isp) (map w3013@syntax->datum w7683@old*) (map w3013@syntax->datum w7684@new*))) w7671@ls/false) ((lambda (w7699@t) ((lambda (w7701@ls/false) (if (and w7701@ls/false (apply (lambda (w7703@except w7704@isp w7705@sym*) (and (eq? (w3013@syntax->datum w7703@except) 'except) (for-all w7610@idsyn? w7705@sym*))) w7701@ls/false)) (apply (lambda (w7709@except w7710@isp w7711@sym*) ((lambda (w7715@subst) (w7620@rem* (map w3013@syntax->datum w7711@sym*) w7715@subst)) (w7628@get-import w7710@isp))) w7701@ls/false) ((lambda (w7717@t) ((lambda (w7719@ls/false) (if (and w7719@ls/false (apply (lambda (w7721@only w7722@isp w7723@sym*) (and (eq? (w3013@syntax->datum w7721@only) 'only) (for-all w7610@idsyn? w7723@sym*))) w7719@ls/false)) (apply (lambda (w7727@only w7728@isp w7729@sym*) ((lambda (w7733@subst w7734@sym*) ((lambda (w7737@sym*) ((lambda (w7739@lab*) (map cons w7737@sym* w7739@lab*)) (w7618@find* w7737@sym* w7733@subst))) (w7622@remove-dups w7734@sym*))) (w7628@get-import w7728@isp) (map w3013@syntax->datum w7729@sym*))) w7719@ls/false) ((lambda (w7741@t) ((lambda (w7743@ls/false) (if (and w7743@ls/false (apply (lambda (w7745@prefix w7746@isp w7747@p) (and (eq? (w3013@syntax->datum w7745@prefix) 'prefix) (w7610@idsyn? w7747@p))) w7743@ls/false)) (apply (lambda (w7751@prefix w7752@isp w7753@p) ((lambda (w7757@subst w7758@prefix) (map (lambda (w7761@x) (cons (string->symbol (string-append w7758@prefix (symbol->string (car w7761@x)))) (cdr w7761@x))) w7757@subst)) (w7628@get-import w7752@isp) (symbol->string (w3013@syntax->datum w7753@p)))) w7743@ls/false) ((lambda (w7763@t) ((lambda (w7765@ls/false) (if (and w7765@ls/false (apply (lambda (w7767@library w7768@spec*) (eq? (w3013@syntax->datum w7767@library) 'library)) w7765@ls/false)) (apply (lambda (w7771@library w7772@spec*) (w7626@import-library w7772@spec*)) w7765@ls/false) ((lambda (w7775@t) ((lambda (w7777@ls/false) (if (and w7777@ls/false (apply (lambda (w7779@for w7780@isp w7781@rest) (eq? (w3013@syntax->datum w7779@for) 'for)) w7777@ls/false)) (apply (lambda (w7785@for w7786@isp w7787@rest) (w7628@get-import w7786@isp)) w7777@ls/false) ((lambda (w7791@t) ((lambda (w7793@ls/false) (if w7793@ls/false (apply (lambda (w7795@spec) (w3007@syntax-violation 'import '"invalid import spec" w7795@spec)) w7793@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w7791@t))) (w2774@syntax-dispatch w7791@t 'any))) w7775@t))) (w2774@syntax-dispatch w7775@t '(any any . any)))) w7763@t))) (w2774@syntax-dispatch w7763@t '(any each-any)))) w7741@t))) (w2774@syntax-dispatch w7741@t '(any any any)))) w7717@t))) (w2774@syntax-dispatch w7717@t '(any any . each-any)))) w7699@t))) (w2774@syntax-dispatch w7699@t '(any any . each-any)))) w7669@t))) (w2774@syntax-dispatch w7669@t '(any any . #(each (any any)))))) w7657@t))) (w2774@syntax-dispatch w7657@t '(any . each-any)))) w7655@spec))) (set! w7630@add-imports! (lambda (w7639@imp w7640@h) ((lambda (w7643@subst) (for-each (lambda (w7645@x) ((lambda (w7647@name w7648@label) ((lambda (w7651@t) (if w7651@t ((lambda (w7653@l) (if (not (eq? w7653@l w7648@label)) (w7612@dup-error w7647@name) (void))) w7651@t) (hashtable-set! w7640@h w7647@name w7648@label))) (hashtable-ref w7640@h w7647@name '#f))) (car w7645@x) (cdr w7645@x))) w7643@subst)) (w7628@get-import w7639@imp)))) (lambda (w7631@imp*) ((letrec ((w7633@f (lambda (w7635@imp* w7636@h) (if (null? w7635@imp*) (hashtable-entries w7636@h) (begin (w7630@add-imports! (car w7635@imp*) w7636@h) (w7633@f (cdr w7635@imp*) w7636@h)))))) w7633@f) w7631@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! w2877@make-top-rib (lambda (w8123@names w8124@labels) ((lambda (w8127@rib) (begin (vector-for-each (lambda (w8129@name w8130@label) (begin (if (not (symbol? w8129@name)) (error 'make-top-rib '"BUG: not a symbol" w8129@name) (void)) (w2200@extend-rib/nc! w8127@rib (w2223@make-stx w8129@name w2145@top-mark* '() '()) w8130@label))) w8123@names w8124@labels) w8127@rib)) (w2196@make-empty-rib)))) (set! w2879@make-collector (lambda () ((lambda (w8133@ls) (lambda w8137 ((lambda (w8138) (if (= w8138 '0) (apply (lambda () w8133@ls) w8137) (if (= w8138 '1) (apply (lambda (w8135@x) (set! w8133@ls (w2138@set-cons w8135@x w8133@ls))) w8137) (error 'apply '"invalid arg count")))) (length w8137)))) '()))) (set! w2881@inv-collector (w1175@w953@make-parameter (lambda w8139@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (w8141@x) (begin (if (not (procedure? w8141@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" w8141@x) (void)) w8141@x)))) (set! w2883@vis-collector (w1175@w953@make-parameter (lambda w8143@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (w8145@x) (begin (if (not (procedure? w8145@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" w8145@x) (void)) w8145@x)))) (set! w2885@imp-collector (w1175@w953@make-parameter (lambda w8147@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (w8149@x) (begin (if (not (procedure? w8149@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" w8149@x) (void)) w8149@x)))) (set! w2887@chi-library-internal (lambda (w8151@e* w8152@rib w8153@top?) (call-with-values (lambda () (w2865@chi-body* w8151@e* '() '() '() '() '() '() '() w8152@rib w8153@top?)) (lambda (w8165@w8157@e* w8166@w8158@r w8167@w8159@mr w8168@w8160@lex* w8169@w8161@rhs* w8170@w8162@mod** w8171@w8163@_kwd* w8172@w8164@exp*) ((lambda (w8181@exp* w8182@_kwd* w8183@mod** w8184@rhs* w8185@lex* w8186@mr w8187@r w8188@e*) (values (append (apply append (reverse w8183@mod**)) w8188@e*) w8187@r w8186@mr (reverse w8185@lex*) (reverse w8184@rhs*) w8181@exp*)) w8172@w8164@exp* w8171@w8163@_kwd* w8170@w8162@mod** w8169@w8161@rhs* w8168@w8160@lex* w8167@w8159@mr w8166@w8158@r w8165@w8157@e*))))) (set! w2889@chi-interaction-expr (lambda (w8197@e w8198@rib w8199@r) (call-with-values (lambda () (w2865@chi-body* (list w8197@e) w8199@r w8199@r '() '() '() '() '() w8198@rib '#t)) (lambda (w8211@w8203@e* w8212@w8204@r w8213@w8205@mr w8214@w8206@lex* w8215@w8207@rhs* w8216@w8208@mod** w8217@w8209@_kwd* w8218@w8210@_exp*) ((lambda (w8227@_exp* w8228@_kwd* w8229@mod** w8230@rhs* w8231@lex* w8232@mr w8233@r w8234@e*) ((lambda (w8243@e*) ((lambda (w8245@e) (values w8245@e w8233@r)) (if (null? w8243@e*) (w2117@w1975@build-void) (if (null? (cdr w8243@e*)) (car w8243@e*) (w2116@w1973@build-sequence '#f w8243@e*))))) (w2822@expand-interaction-rhs*/init* (reverse w8231@lex*) (reverse w8230@rhs*) (append (apply append (reverse w8229@mod**)) w8234@e*) w8233@r w8232@mr))) w8218@w8210@_exp* w8217@w8209@_kwd* w8216@w8208@mod** w8215@w8207@rhs* w8214@w8206@lex* w8213@w8205@mr w8212@w8204@r w8211@w8203@e*))))) (set! w2891@library-body-expander (lambda (w8247@name w8248@main-exp* w8249@imp* w8250@b* w8251@top?) ((lambda (w8258@itc) (begin (set! w8258@itc (w2879@make-collector)) ((lambda (w8263@w8259@imp-collector w8264@w8260@top-level-context w8265@w8261@imp-collector w8266@w8262@top-level-context) ((lambda (w8271@swap) (dynamic-wind w8271@swap (lambda () (call-with-values (lambda () (w2875@parse-import-spec* w8249@imp*)) (lambda (w8275@w8273@subst-names w8276@w8274@subst-labels) ((lambda (w8279@subst-labels w8280@subst-names) ((lambda (w8283@rib) ((lambda (w8286@wrap) (begin (set! w8286@wrap (lambda (w8394@x) (w2223@make-stx w8394@x w2145@top-mark* (list w8283@rib) '()))) ((lambda (w8287@b* w8288@main-exp* w8289@rtc w8290@vtc) ((lambda (w8299@w8295@inv-collector w8300@w8296@vis-collector w8301@w8297@inv-collector w8302@w8298@vis-collector) ((lambda (w8307@swap) (dynamic-wind w8307@swap (lambda () (call-with-values (lambda () (w2887@chi-library-internal w8287@b* w8283@rib w8251@top?)) (lambda (w8315@w8309@init* w8316@w8310@r w8317@w8311@mr w8318@w8312@lex* w8319@w8313@rhs* w8320@w8314@internal-exp*) ((lambda (w8327@internal-exp* w8328@rhs* w8329@lex* w8330@mr w8331@r w8332@init*) (call-with-values (lambda () (w2869@parse-exports (append w8288@main-exp* w8327@internal-exp*))) (lambda (w8341@w8339@exp-name* w8342@w8340@exp-id*) ((lambda (w8345@exp-id* w8346@exp-name*) (begin (w2204@seal-rib! w8283@rib) ((lambda (w8349@init*) ((lambda (w8351@rhs*) ((lambda () (begin (w2206@unseal-rib! w8283@rib) ((lambda (w8353@loc* w8354@export-subst) ((lambda (w8358@errstr) (begin (set! w8358@errstr '"attempt to export mutated variable") (call-with-values (lambda () (w2987@make-export-env/macros w8329@lex* w8353@loc* w8331@r)) (lambda (w8362@w8359@export-env w8363@w8360@global* w8364@w8361@macro*) ((lambda (w8368@macro* w8369@global* w8370@export-env) (begin (for-each (lambda (w8374@s) ((lambda (w8376@name w8377@label) ((lambda (w8380@p) (if w8380@p ((lambda (w8382@b) ((lambda (w8384@type) (if (eq? w8384@type 'mutable) (w3007@syntax-violation 'export w8358@errstr w8376@name) (void))) (car w8382@b))) (cdr w8380@p)) (void))) (assq w8377@label w8370@export-env))) (car w8374@s) (cdr w8374@s))) w8354@export-subst) ((lambda (w8386@invoke-body w8387@invoke-definitions) (values (w8258@itc) (w8289@rtc) (w8290@vtc) (w2116@w1973@build-sequence '#f (append w8387@invoke-definitions (list w8386@invoke-body))) w8368@macro* w8354@export-subst w8370@export-env)) (w2119@w1979@build-letrec* '#f w8329@lex* w8351@rhs* (w2983@build-exports w8369@global* w8349@init*)) (map w2112@w1810@build-global-define (map cdr w8369@global*))))) w8364@w8361@macro* w8363@w8360@global* w8362@w8359@export-env))))) '#f)) (map w2151@gen-global w8329@lex*) (w2985@make-export-subst w8346@exp-name* w8345@exp-id*)))))) (w2824@chi-rhs* w8328@rhs* w8331@r w8330@mr))) (w2804@chi-expr* w8332@init* w8331@r w8330@mr)))) w8342@w8340@exp-id* w8341@w8339@exp-name*)))) w8320@w8314@internal-exp* w8319@w8313@rhs* w8318@w8312@lex* w8317@w8311@mr w8316@w8310@r w8315@w8309@init*)))) w8307@swap)) (lambda () (begin ((lambda (w8390@t) (begin (w8299@w8295@inv-collector w8301@w8297@inv-collector) (set! w8301@w8297@inv-collector w8390@t))) (w8299@w8295@inv-collector)) ((lambda (w8392@t) (begin (w8300@w8296@vis-collector w8302@w8298@vis-collector) (set! w8302@w8298@vis-collector w8392@t))) (w8300@w8296@vis-collector)))))) w2881@inv-collector w2883@vis-collector w8289@rtc w8290@vtc)) (map w8286@wrap w8250@b*) (map w8286@wrap w8248@main-exp*) (w2879@make-collector) (w2879@make-collector)))) '#f)) (w2877@make-top-rib w8280@subst-names w8279@subst-labels))) w8276@w8274@subst-labels w8275@w8273@subst-names)))) w8271@swap)) (lambda () (begin ((lambda (w8396@t) (begin (w8263@w8259@imp-collector w8265@w8261@imp-collector) (set! w8265@w8261@imp-collector w8396@t))) (w8263@w8259@imp-collector)) ((lambda (w8398@t) (begin (w8264@w8260@top-level-context w8266@w8262@top-level-context) (set! w8266@w8262@top-level-context w8398@t))) (w8264@w8260@top-level-context)))))) w2885@imp-collector w3021@top-level-context w8258@itc '#f))) '#f))) (set! w2893@core-library-expander (lambda (w8400@e w8401@verify-name) (call-with-values (lambda () (w2873@parse-library w8400@e)) (lambda (w8408@w8404@name* w8409@w8405@exp* w8410@w8406@imp* w8411@w8407@b*) ((lambda (w8416@b* w8417@imp* w8418@exp* w8419@name*) (call-with-values (lambda () (w2871@parse-library-name w8419@name*)) (lambda (w8426@w8424@name w8427@w8425@ver) ((lambda (w8430@ver w8431@name) (begin (w8401@verify-name w8431@name) (call-with-values (lambda () (w2891@library-body-expander w8431@name w8418@exp* w8417@imp* w8416@b* '#f)) (lambda (w8441@w8434@imp* w8442@w8435@invoke-req* w8443@w8436@visit-req* w8444@w8437@invoke-code w8445@w8438@visit-code w8446@w8439@export-subst w8447@w8440@export-env) ((lambda (w8455@export-env w8456@export-subst w8457@visit-code w8458@invoke-code w8459@visit-req* w8460@invoke-req* w8461@imp*) (values w8431@name w8430@ver w8461@imp* w8460@invoke-req* w8459@visit-req* w8458@invoke-code w8457@visit-code w8456@export-subst w8455@export-env)) w8447@w8440@export-env w8446@w8439@export-subst w8445@w8438@visit-code w8444@w8437@invoke-code w8443@w8436@visit-req* w8442@w8435@invoke-req* w8441@w8434@imp*))))) w8427@w8425@ver w8426@w8424@name)))) w8411@w8407@b* w8410@w8406@imp* w8409@w8405@exp* w8408@w8404@name*))))) (set! w2895@parse-top-level-program (lambda (w8469@e*) ((lambda (w8471@t) ((lambda (w8473@ls/false) (if (and w8473@ls/false (apply (lambda (w8475@import w8476@imp* w8477@b*) (eq? (w3013@syntax->datum w8475@import) 'import)) w8473@ls/false)) (apply (lambda (w8481@import w8482@imp* w8483@b*) (values w8482@imp* w8483@b*)) w8473@ls/false) ((lambda (w8487@t) ((lambda (w8489@ls/false) (if (and w8489@ls/false (apply (lambda (w8491@import w8492@x w8493@y) (eq? (w3013@syntax->datum w8491@import) 'import)) w8489@ls/false)) (apply (lambda (w8497@import w8498@x w8499@y) (w3007@syntax-violation 'expander '"invalid syntax of top-level program" (w2271@syntax-car w8469@e*))) w8489@ls/false) ((lambda (w8503@t) ((lambda (w8505@ls/false) (if w8505@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) w8505@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w8503@t))) (w2774@syntax-dispatch w8503@t '_))) w8487@t))) (w2774@syntax-dispatch w8487@t '((any . any) . any)))) w8471@t))) (w2774@syntax-dispatch w8471@t '((any . each-any) . each-any)))) w8469@e*))) (set! w2897@top-level-expander (lambda (w8507@e*) (call-with-values (lambda () (w2895@parse-top-level-program w8507@e*)) (lambda (w8511@w8509@imp* w8512@w8510@b*) ((lambda (w8515@b* w8516@imp*) (call-with-values (lambda () (w2891@library-body-expander '() '() w8516@imp* w8515@b* '#t)) (lambda (w8526@w8519@imp* w8527@w8520@invoke-req* w8528@w8521@visit-req* w8529@w8522@invoke-code w8530@w8523@visit-code w8531@w8524@export-subst w8532@w8525@export-env) ((lambda (w8540@export-env w8541@export-subst w8542@visit-code w8543@invoke-code w8544@visit-req* w8545@invoke-req* w8546@imp*) (values w8545@invoke-req* w8543@invoke-code)) w8532@w8525@export-env w8531@w8524@export-subst w8530@w8523@visit-code w8529@w8522@invoke-code w8528@w8521@visit-req* w8527@w8520@invoke-req* w8526@w8519@imp*)))) w8512@w8510@b* w8511@w8509@imp*))))) (set! w2903@w2898 (make-record-type-descriptor 'env '#f 'w2901 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! w2905@w2900 '#f) (set! w2907@w2899 (make-record-constructor-descriptor w2903@w2898 '#f w2905@w2900)) (set! w2910@env? (record-predicate w2903@w2898)) (set! w2912@make-env (record-constructor w2907@w2899)) (set! w2914@env-names (record-accessor w2903@w2898 '0)) (set! w2916@env-labels (record-accessor w2903@w2898 '1)) (set! w2918@env-itc (record-accessor w2903@w2898 '2)) (set! w2920@set-env-names! (record-mutator w2903@w2898 '0)) (set! w2922@set-env-labels! (record-mutator w2903@w2898 '1)) (set! w2924@set-env-itc! (record-mutator w2903@w2898 '2)) (set! w2926@rp (w1172@w947@make-record-printer 'env (lambda (w8554@x w8555@p w8556@wr) (display '"#<environment>" w8555@p)))) (set! w2932@w2927 (make-record-type-descriptor 'interaction-env '#f 'w2930 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! w2934@w2929 '#f) (set! w2936@w2928 (make-record-constructor-descriptor w2932@w2927 '#f w2934@w2929)) (set! w2939@interaction-env? (record-predicate w2932@w2927)) (set! w2941@make-interaction-env (record-constructor w2936@w2928)) (set! w2943@interaction-env-rib (record-accessor w2932@w2927 '0)) (set! w2945@interaction-env-r (record-accessor w2932@w2927 '1)) (set! w2947@interaction-env-locs (record-accessor w2932@w2927 '2)) (set! w2949@set-interaction-env-rib! (record-mutator w2932@w2927 '0)) (set! w2951@set-interaction-env-r! (record-mutator w2932@w2927 '1)) (set! w2953@set-interaction-env-locs! (record-mutator w2932@w2927 '2)) (set! w2955@rp (w1172@w947@make-record-printer 'interaction-env (lambda (w8560@x w8561@p w8562@wr) (display '"#<environment>" w8561@p)))) (set! w2957@interaction-environment-symbols (lambda () (w2965@environment-symbols (w3019@interaction-environment)))) (set! w2959@environment-bindings (lambda (w8566@e) (vector->list (vector-map (lambda (w8568@name w8569@label) (w2961@parse-binding (cons w8568@name (w1802@w1456@imported-label->binding w8569@label)))) (w2914@env-names w8566@e) (w2916@env-labels w8566@e))))) (set! w2961@parse-binding (lambda (w8572@b) (cons (car w8572@b) ((lambda (w8574@t) (if (memv w8574@t '(core-prim global)) 'procedure (if (memv w8574@t '(core-macro macro global-macro)) 'syntax (if (memv w8574@t '($core-rtd)) 'record (if (eq? (car w8572@b) (cadr w8572@b)) 'syntax 'unknown))))) (cadr w8572@b))))) (set! w2963@environment? (lambda (w8576@x) (or (w2910@env? w8576@x) (w2939@interaction-env? w8576@x)))) (set! w2965@environment-symbols (lambda (w8578@x) (if (w2910@env? w8578@x) (vector->list (w2914@env-names w8578@x)) (if (w2939@interaction-env? w8578@x) (map values (w2176@rib-sym* (w2943@interaction-env-rib w8578@x))) (assertion-violation 'environment-symbols '"not an environment" w8578@x))))) (set! w2967@environment (lambda w8580@imp* ((lambda (w8582@itc) ((lambda (w8586@w8584@imp-collector w8587@w8585@imp-collector) ((lambda (w8590@swap) (dynamic-wind w8590@swap (lambda () (call-with-values (lambda () (w2875@parse-import-spec* w8580@imp*)) (lambda (w8594@w8592@subst-names w8595@w8593@subst-labels) ((lambda (w8598@subst-labels w8599@subst-names) (w2912@make-env w8599@subst-names w8598@subst-labels w8582@itc)) w8595@w8593@subst-labels w8594@w8592@subst-names)))) w8590@swap)) (lambda () ((lambda (w8602@t) (begin (w8586@w8584@imp-collector w8587@w8585@imp-collector) (set! w8587@w8585@imp-collector w8602@t))) (w8586@w8584@imp-collector))))) w2885@imp-collector w8582@itc)) (w2879@make-collector)))) (set! w2969@null-environment (lambda (w8604@n) (begin (if (not (eqv? w8604@n '5)) (assertion-violation 'null-environment '"not 5" w8604@n) (void)) (w2967@environment '(psyntax null-environment-5))))) (set! w2971@scheme-report-environment (lambda (w8606@n) (begin (if (not (eqv? w8606@n '5)) (assertion-violation 'scheme-report-environment '"not 5" w8606@n) (void)) (w2967@environment '(psyntax scheme-report-environment-5))))) (set! w2973@expand (lambda (w8608@x w8609@env) (if (w2910@env? w8609@env) ((lambda (w8612@rib) ((lambda (w8614@x w8615@itc w8616@rtc w8617@vtc) ((lambda (w8622@x) (begin (w2204@seal-rib! w8612@rib) (values w8622@x (w8616@rtc)))) ((lambda (w8632@w8624@top-level-context w8633@w8625@inv-collector w8634@w8626@vis-collector w8635@w8627@imp-collector w8636@w8628@top-level-context w8637@w8629@inv-collector w8638@w8630@vis-collector w8639@w8631@imp-collector) ((lambda (w8648@swap) (dynamic-wind w8648@swap (lambda () (w2808@chi-expr w8614@x '() '())) w8648@swap)) (lambda () (begin ((lambda (w8650@t) (begin (w8632@w8624@top-level-context w8636@w8628@top-level-context) (set! w8636@w8628@top-level-context w8650@t))) (w8632@w8624@top-level-context)) ((lambda (w8652@t) (begin (w8633@w8625@inv-collector w8637@w8629@inv-collector) (set! w8637@w8629@inv-collector w8652@t))) (w8633@w8625@inv-collector)) ((lambda (w8654@t) (begin (w8634@w8626@vis-collector w8638@w8630@vis-collector) (set! w8638@w8630@vis-collector w8654@t))) (w8634@w8626@vis-collector)) ((lambda (w8656@t) (begin (w8635@w8627@imp-collector w8639@w8631@imp-collector) (set! w8639@w8631@imp-collector w8656@t))) (w8635@w8627@imp-collector)))))) w3021@top-level-context w2881@inv-collector w2883@vis-collector w2885@imp-collector '#f w8616@rtc w8617@vtc w8615@itc))) (w2223@make-stx w8608@x w2145@top-mark* (list w8612@rib) '()) (w2918@env-itc w8609@env) (w2879@make-collector) (w2879@make-collector))) (w2877@make-top-rib (w2914@env-names w8609@env) (w2916@env-labels w8609@env))) (if (w2939@interaction-env? w8609@env) ((lambda (w8658@rib w8659@r w8660@rtc) ((lambda (w8664@x) (call-with-values (lambda () ((lambda (w8676@w8668@top-level-context w8677@w8669@inv-collector w8678@w8670@vis-collector w8679@w8671@imp-collector w8680@w8672@top-level-context w8681@w8673@inv-collector w8682@w8674@vis-collector w8683@w8675@imp-collector) ((lambda (w8692@swap) (dynamic-wind w8692@swap (lambda () (w2889@chi-interaction-expr w8664@x w8658@rib w8659@r)) w8692@swap)) (lambda () (begin ((lambda (w8694@t) (begin (w8676@w8668@top-level-context w8680@w8672@top-level-context) (set! w8680@w8672@top-level-context w8694@t))) (w8676@w8668@top-level-context)) ((lambda (w8696@t) (begin (w8677@w8669@inv-collector w8681@w8673@inv-collector) (set! w8681@w8673@inv-collector w8696@t))) (w8677@w8669@inv-collector)) ((lambda (w8698@t) (begin (w8678@w8670@vis-collector w8682@w8674@vis-collector) (set! w8682@w8674@vis-collector w8698@t))) (w8678@w8670@vis-collector)) ((lambda (w8700@t) (begin (w8679@w8671@imp-collector w8683@w8675@imp-collector) (set! w8683@w8675@imp-collector w8700@t))) (w8679@w8671@imp-collector)))))) w3021@top-level-context w2881@inv-collector w2883@vis-collector w2885@imp-collector w8609@env w8660@rtc (w2879@make-collector) (w2879@make-collector))) (lambda (w8702@w8666@e w8703@w8667@r^) ((lambda (w8706@r^ w8707@e) (begin (w2951@set-interaction-env-r! w8609@env w8706@r^) (values w8707@e (w8660@rtc)))) w8703@w8667@r^ w8702@w8666@e)))) (w2223@make-stx w8608@x w2145@top-mark* (list w8658@rib) '()))) (w2943@interaction-env-rib w8609@env) (w2945@interaction-env-r w8609@env) (w2879@make-collector)) (assertion-violation 'expand '"not an environment" w8609@env))))) (set! w2975@eval (lambda (w8710@x w8711@env) (begin (if (not (w2963@environment? w8711@env)) (error 'eval '"not an environment" w8711@env) (void)) (call-with-values (lambda () (w2973@expand w8710@x w8711@env)) (lambda (w8716@w8714@x w8717@w8715@invoke-req*) ((lambda (w8720@invoke-req* w8721@x) (begin (for-each w1803@w1458@invoke-library w8720@invoke-req*) (eval-core (w1259@w1187@expanded->core w8721@x)))) w8717@w8715@invoke-req* w8716@w8714@x)))))) (set! w2977@library-expander (lambda w8825 ((lambda (w8826) (if (= w8826 '3) (apply (lambda (w8724@x w8725@filename w8726@verify-name) ((lambda (w8731@build-visit-code w8733@visit!) (begin (set! w8731@build-visit-code (lambda (w8807@macro*) (if (null? w8807@macro*) (w2117@w1975@build-void) (w2116@w1973@build-sequence '#f (map (lambda (w8809@x) ((lambda (w8811@loc w8812@src) (list 'set! w8811@loc w8812@src)) (car w8809@x) (cddr w8809@x))) w8807@macro*))))) (set! w8733@visit! (lambda (w8799@macro*) (for-each (lambda (w8801@x) ((lambda (w8803@loc w8804@proc) (set-symbol-value! w8803@loc w8804@proc)) (car w8801@x) (cadr w8801@x))) w8799@macro*))) (call-with-values (lambda () (w2893@core-library-expander w8724@x w8726@verify-name)) (lambda (w8743@w8734@name w8744@w8735@ver w8745@w8736@imp* w8746@w8737@inv* w8747@w8738@vis* w8748@w8739@invoke-code w8749@w8740@macro* w8750@w8741@export-subst w8751@w8742@export-env) ((lambda (w8761@export-env w8762@export-subst w8763@macro* w8764@invoke-code w8765@vis* w8766@inv* w8767@imp* w8768@ver w8769@name) ((lambda (w8779@id w8780@name w8781@ver w8782@imp* w8783@vis* w8784@inv* w8785@visit-proc w8786@invoke-proc w8787@visit-code w8788@invoke-code) (begin (w1801@w1454@install-library w8779@id w8780@name w8781@ver w8782@imp* w8783@vis* w8784@inv* w8762@export-subst w8761@export-env w8785@visit-proc w8786@invoke-proc w8787@visit-code w8788@invoke-code '#t w8725@filename) (values w8779@id w8780@name w8781@ver w8782@imp* w8783@vis* w8784@inv* w8788@invoke-code w8787@visit-code w8762@export-subst w8761@export-env))) (w1161@w925@gensym) w8769@name w8768@ver (map w1807@w1466@library-spec w8767@imp*) (map w1807@w1466@library-spec w8765@vis*) (map w1807@w1466@library-spec w8766@inv*) (lambda () (w8733@visit! w8763@macro*)) (lambda () (eval-core (w1259@w1187@expanded->core w8764@invoke-code))) (w8731@build-visit-code w8763@macro*) w8764@invoke-code)) w8751@w8742@export-env w8750@w8741@export-subst w8749@w8740@macro* w8748@w8739@invoke-code w8747@w8738@vis* w8746@w8737@inv* w8745@w8736@imp* w8744@w8735@ver w8743@w8734@name))))) '#f '#f)) w8825) (if (= w8826 '2) (apply (lambda (w8815@x w8816@filename) (w2977@library-expander w8815@x w8816@filename (lambda (w8819@x) (values)))) w8825) (if (= w8826 '1) (apply (lambda (w8821@x) (w2977@library-expander w8821@x '#f (lambda (w8823@x) (values)))) w8825) (error 'apply '"invalid arg count"))))) (length w8825)))) (set! w2979@boot-library-expand (lambda (w8827@x) (call-with-values (lambda () (w2977@library-expander w8827@x)) (lambda (w8839@w8829@id w8840@w8830@name w8841@w8831@ver w8842@w8832@imp* w8843@w8833@vis* w8844@w8834@inv* w8845@w8835@invoke-code w8846@w8836@visit-code w8847@w8837@export-subst w8848@w8838@export-env) ((lambda (w8859@export-env w8860@export-subst w8861@visit-code w8862@invoke-code w8863@inv* w8864@vis* w8865@imp* w8866@ver w8867@name w8868@id) (values w8867@name w8862@invoke-code w8860@export-subst w8859@export-env)) w8848@w8838@export-env w8847@w8837@export-subst w8846@w8836@visit-code w8845@w8835@invoke-code w8844@w8834@inv* w8843@w8833@vis* w8842@w8832@imp* w8841@w8831@ver w8840@w8830@name w8839@w8829@id))))) (set! w2981@rev-map-append (lambda (w8879@f w8880@ls w8881@ac) (if (null? w8880@ls) w8881@ac (w2981@rev-map-append w8879@f (cdr w8880@ls) (cons (w8879@f (car w8880@ls)) w8881@ac))))) (set! w2983@build-exports (lambda (w8885@lex*+loc* w8886@init*) (w2116@w1973@build-sequence '#f (cons (w2117@w1975@build-void) (w2981@rev-map-append (lambda (w8889@x) (list 'set! (cdr w8889@x) (car w8889@x))) w8885@lex*+loc* w8886@init*))))) (set! w2985@make-export-subst (lambda (w8891@name* w8892@id*) (map (lambda (w8895@name w8896@id) ((lambda (w8899@label) (begin (if (not w8899@label) (w3007@syntax-violation '#f '"cannot export unbound identifier" w8896@id) (void)) (cons w8895@name w8899@label))) (w2303@id->label w8896@id))) w8891@name* w8892@id*))) (set! w2987@make-export-env/macros (lambda (w8901@lex* w8902@loc* w8903@r) ((lambda (w8908@lookup) (begin (set! w8908@lookup (lambda (w8937@x) ((letrec ((w8939@f (lambda (w8941@x w8942@lex* w8943@loc*) (if (pair? w8942@lex*) (if (eq? w8941@x (car w8942@lex*)) (car w8943@loc*) (w8939@f w8941@x (cdr w8942@lex*) (cdr w8943@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) w8939@f) w8937@x w8901@lex* w8902@loc*))) ((letrec ((w8909@f (lambda (w8911@r w8912@env w8913@global* w8914@macro*) (if (null? w8911@r) (values w8912@env w8913@global* w8914@macro*) ((lambda (w8919@x) ((lambda (w8921@label w8922@b) ((lambda (w8925@t) (if (memv w8925@t '(lexical)) ((lambda (w8927@v) ((lambda (w8929@loc w8930@type) (w8909@f (cdr w8911@r) (cons (cons* w8921@label w8930@type w8929@loc) w8912@env) (cons (cons (w2658@lexical-var w8927@v) w8929@loc) w8913@global*) w8914@macro*)) (w8908@lookup (w2658@lexical-var w8927@v)) (if (w2660@lexical-mutable? w8927@v) 'mutable 'global))) (w2313@binding-value w8922@b)) (if (memv w8925@t '(local-macro)) ((lambda (w8933@loc) (w8909@f (cdr w8911@r) (cons (cons* w8921@label 'global-macro w8933@loc) w8912@env) w8913@global* (cons (cons w8933@loc (w2313@binding-value w8922@b)) w8914@macro*))) (w1161@w925@gensym)) (if (memv w8925@t '(local-macro!)) ((lambda (w8935@loc) (w8909@f (cdr w8911@r) (cons (cons* w8921@label 'global-macro! w8935@loc) w8912@env) w8913@global* (cons (cons w8935@loc (w2313@binding-value w8922@b)) w8914@macro*))) (w1161@w925@gensym)) (if (memv w8925@t '($rtd $module)) (w8909@f (cdr w8911@r) (cons w8919@x w8912@env) w8913@global* w8914@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (w2311@binding-type w8922@b) (w2313@binding-value w8922@b))))))) (w2311@binding-type w8922@b))) (car w8919@x) (cdr w8919@x))) (car w8911@r)))))) w8909@f) w8903@r '() '() '()))) '#f))) (set! w2989@generate-temporaries (lambda (w8947@ls) ((lambda (w8949@t) ((lambda (w8951@ls/false) (if w8951@ls/false (apply (lambda (w8953@ls) (map (lambda (w8955@x) (w2223@make-stx ((lambda (w8957@x) (if (or (symbol? w8957@x) (string? w8957@x)) (w1161@w925@gensym w8957@x) (w1161@w925@gensym 't))) (w3013@syntax->datum w8955@x)) w2145@top-mark* '() '())) w8953@ls)) w8951@ls/false) ((lambda (w8959@t) ((lambda (w8961@ls/false) (if w8961@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) w8961@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w8959@t))) (w2774@syntax-dispatch w8959@t '_))) w8949@t))) (w2774@syntax-dispatch w8949@t 'each-any))) w8947@ls))) (set! w2991@free-identifier=? (lambda (w8963@x w8964@y) (if (w2277@id? w8963@x) (if (w2277@id? w8964@y) (w2285@free-id=? w8963@x w8964@y) (assertion-violation 'free-identifier=? '"not an identifier" w8964@y)) (assertion-violation 'free-identifier=? '"not an identifier" w8963@x)))) (set! w2993@bound-identifier=? (lambda (w8967@x w8968@y) (if (w2277@id? w8967@x) (if (w2277@id? w8968@y) (w2283@bound-id=? w8967@x w8968@y) (assertion-violation 'bound-identifier=? '"not an identifier" w8968@y)) (assertion-violation 'bound-identifier=? '"not an identifier" w8967@x)))) (set! w2995@make-source-condition (lambda (w8971@x) ((lambda (w8981@w8976 w8983@w8978 w8985@w8977 w8988@w8975 w8990@make-source-condition w8992@w8973 w8994@w8974 w8996@source-condition? w8998@source-filename w9000@source-character) (begin (set! w8981@w8976 (make-record-type-descriptor '&source-information w10083@w9398@&condition-rtd 'w8979 '#f '#f '#((immutable file-name) (immutable character)))) (set! w8983@w8978 '#f) (set! w8985@w8977 (make-record-constructor-descriptor w8981@w8976 w10084@w9400@&condition-rcd w8983@w8978)) (set! w8988@w8975 (record-predicate w8981@w8976)) (set! w8990@make-source-condition (record-constructor w8985@w8977)) (set! w8992@w8973 (record-accessor w8981@w8976 '0)) (set! w8994@w8974 (record-accessor w8981@w8976 '1)) (set! w8996@source-condition? (condition-predicate w8981@w8976)) (set! w8998@source-filename (condition-accessor w8981@w8976 w8992@w8973)) (set! w9000@source-character (condition-accessor w8981@w8976 w8994@w8974)) (if (pair? w8971@x) (w8990@make-source-condition (car w8971@x) (cdr w8971@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! w2997@extract-position-condition (lambda (w9001@x) (w2995@make-source-condition (w2999@expression-position w9001@x)))) (set! w2999@expression-position (lambda (w9003@x) (and (w2221@stx? w9003@x) ((lambda (w9005@x) (and (w1164@w931@annotation? w9005@x) (w1165@w933@annotation-source w9005@x))) (w2225@stx-expr w9003@x))))) (set! w3001@assertion-error (lambda (w9007@expr w9008@pos) (raise (condition (w10131@w9590@make-assertion-violation) (w10149@w9638@make-who-condition 'assert) (w10089@w9481@make-message-condition '"assertion failed") (w10139@w9612@make-irritants-condition (list w9007@expr)) (w2995@make-source-condition w9008@pos))))) (set! w3003@syntax-error (lambda (w9011@x . w9013@args) (begin (if (not (for-all string? w9013@args)) (assertion-violation 'syntax-error '"invalid argument" w9013@args) (void)) (raise (condition (w10089@w9481@make-message-condition (if (null? w9013@args) '"invalid syntax" (apply string-append w9013@args))) (w10183@w9728@make-syntax-violation (w3013@syntax->datum w9011@x) '#f) (w2997@extract-position-condition w9011@x)))))) (set! w3005@syntax-violation* (lambda (w9015@who w9016@msg w9017@form w9018@condition-object) (begin (if (not (string? w9016@msg)) (assertion-violation 'syntax-violation '"message is not a string" w9016@msg) (void)) ((lambda (w9023@who) (raise (condition (if w9023@who (w10149@w9638@make-who-condition w9023@who) (condition)) (w10089@w9481@make-message-condition w9016@msg) w9018@condition-object (w2997@extract-position-condition w9017@form)))) (if (or (string? w9015@who) (symbol? w9015@who)) w9015@who (if (not w9015@who) ((lambda (w9025@t) ((lambda (w9027@ls/false) (if (and w9027@ls/false (apply (lambda (w9029@id) (w2277@id? w9029@id)) w9027@ls/false)) (apply (lambda (w9031@id) (w3013@syntax->datum w9031@id)) w9027@ls/false) ((lambda (w9033@t) ((lambda (w9035@ls/false) (if (and w9035@ls/false (apply (lambda (w9037@id w9038@rest) (w2277@id? w9037@id)) w9035@ls/false)) (apply (lambda (w9041@id w9042@rest) (w3013@syntax->datum w9041@id)) w9035@ls/false) ((lambda (w9045@t) ((lambda (w9047@ls/false) (if w9047@ls/false (apply (lambda () '#f) w9047@ls/false) (w3007@syntax-violation '#f '"invalid syntax" w9045@t))) (w2774@syntax-dispatch w9045@t '_))) w9033@t))) (w2774@syntax-dispatch w9033@t '(any . any)))) w9025@t))) (w2774@syntax-dispatch w9025@t 'any))) w9017@form) (assertion-violation 'syntax-violation '"invalid who argument" w9015@who))))))) (set! w3007@syntax-violation (lambda w9063 ((lambda (w9064) (if (= w9064 '3) (apply (lambda (w9049@who w9050@msg w9051@form) (w3007@syntax-violation w9049@who w9050@msg w9051@form '#f)) w9063) (if (= w9064 '4) (apply (lambda (w9055@who w9056@msg w9057@form w9058@subform) (w3005@syntax-violation* w9055@who w9056@msg w9057@form (w10183@w9728@make-syntax-violation (w3013@syntax->datum w9057@form) (w3013@syntax->datum w9058@subform)))) w9063) (error 'apply '"invalid arg count")))) (length w9063)))) (set! w3009@identifier? (lambda (w9065@x) (w2277@id? w9065@x))) (set! w3011@datum->syntax (lambda (w9067@id w9068@datum) (if (w2277@id? w9067@id) (w2243@datum->stx w9067@id w9068@datum) (assertion-violation 'datum->syntax '"not an identifier" w9067@id)))) (set! w3013@syntax->datum (lambda (w9071@x) (w2299@stx->datum w9071@x))) (set! w3015@compile-r6rs-top-level (lambda (w9073@x*) (call-with-values (lambda () (w2897@top-level-expander w9073@x*)) (lambda (w9077@w9075@lib* w9078@w9076@invoke-code) ((lambda (w9081@invoke-code w9082@lib*) (lambda () (begin (for-each w1803@w1458@invoke-library w9082@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (w1259@w1187@expanded->core w9081@invoke-code)) (void)) (eval-core (w1259@w1187@expanded->core w9081@invoke-code))))) w9078@w9076@invoke-code w9077@w9075@lib*))))) (set! w3017@pre-compile-r6rs-top-level (lambda (w9085@x*) (call-with-values (lambda () (w2897@top-level-expander w9085@x*)) (lambda (w9089@w9087@lib* w9090@w9088@invoke-code) ((lambda (w9093@invoke-code w9094@lib*) (begin (for-each w1803@w1458@invoke-library w9094@lib*) (w1173@w949@compile-core (w1259@w1187@expanded->core w9093@invoke-code)))) w9090@w9088@invoke-code w9089@w9087@lib*))))) (set! w3019@interaction-environment ((lambda (w9097@the-env) (lambda () (or w9097@the-env ((lambda (w9099@lib w9100@rib) (begin ((lambda (w9103@subst) (begin (w2186@set-rib-sym*! w9100@rib (map car w9103@subst)) (w2188@set-rib-mark**! w9100@rib (map (lambda (w9105@x) w2145@top-mark*) w9103@subst)) (w2190@set-rib-label*! w9100@rib (map cdr w9103@subst)))) (w1760@w1372@library-subst w9099@lib)) ((lambda (w9107@env) (begin (set! w9097@the-env w9107@env) w9107@env)) (w2941@make-interaction-env w9100@rib '() '())))) (w1796@w1444@find-library-by-name '(mosh interaction)) (w2196@make-empty-rib))))) '#f)) (set! w3021@top-level-context (w1175@w953@make-parameter '#f)) (begin (set! w9377@w3021@top-level-context w3021@top-level-context) (set! w9376@w3019@interaction-environment w3019@interaction-environment) (set! w9375@w3017@pre-compile-r6rs-top-level w3017@pre-compile-r6rs-top-level) (set! w9374@w3015@compile-r6rs-top-level w3015@compile-r6rs-top-level) (set! w9373@w3013@syntax->datum w3013@syntax->datum) (set! w9372@w3011@datum->syntax w3011@datum->syntax) (set! w9371@w3009@identifier? w3009@identifier?) (set! w9370@w3007@syntax-violation w3007@syntax-violation) (set! w9369@w3005@syntax-violation* w3005@syntax-violation*) (set! w9368@w3003@syntax-error w3003@syntax-error) (set! w9367@w3001@assertion-error w3001@assertion-error) (set! w9366@w2999@expression-position w2999@expression-position) (set! w9365@w2997@extract-position-condition w2997@extract-position-condition) (set! w9364@w2995@make-source-condition w2995@make-source-condition) (set! w9363@w2993@bound-identifier=? w2993@bound-identifier=?) (set! w9362@w2991@free-identifier=? w2991@free-identifier=?) (set! w9361@w2989@generate-temporaries w2989@generate-temporaries) (set! w9360@w2987@make-export-env/macros w2987@make-export-env/macros) (set! w9359@w2985@make-export-subst w2985@make-export-subst) (set! w9358@w2983@build-exports w2983@build-exports) (set! w9357@w2981@rev-map-append w2981@rev-map-append) (set! w9356@w2979@boot-library-expand w2979@boot-library-expand) (set! w9355@w2977@library-expander w2977@library-expander) (set! w9354@w2975@eval w2975@eval) (set! w9353@w2973@expand w2973@expand) (set! w9352@w2971@scheme-report-environment w2971@scheme-report-environment) (set! w9351@w2969@null-environment w2969@null-environment) (set! w9350@w2967@environment w2967@environment) (set! w9349@w2965@environment-symbols w2965@environment-symbols) (set! w9348@w2963@environment? w2963@environment?) (set! w9347@w2961@parse-binding w2961@parse-binding) (set! w9346@w2959@environment-bindings w2959@environment-bindings) (set! w9345@w2957@interaction-environment-symbols w2957@interaction-environment-symbols) (set! w9344@w2955@rp w2955@rp) (set! w9343@w2953@set-interaction-env-locs! w2953@set-interaction-env-locs!) (set! w9342@w2951@set-interaction-env-r! w2951@set-interaction-env-r!) (set! w9341@w2949@set-interaction-env-rib! w2949@set-interaction-env-rib!) (set! w9340@w2947@interaction-env-locs w2947@interaction-env-locs) (set! w9339@w2945@interaction-env-r w2945@interaction-env-r) (set! w9338@w2943@interaction-env-rib w2943@interaction-env-rib) (set! w9337@w2941@make-interaction-env w2941@make-interaction-env) (set! w9336@w2939@interaction-env? w2939@interaction-env?) (set! w9335@w2936@w2928 w2936@w2928) (set! w9334@w2934@w2929 w2934@w2929) (set! w9333@w2932@w2927 w2932@w2927) (set! w9332@w2926@rp w2926@rp) (set! w9331@w2924@set-env-itc! w2924@set-env-itc!) (set! w9330@w2922@set-env-labels! w2922@set-env-labels!) (set! w9329@w2920@set-env-names! w2920@set-env-names!) (set! w9328@w2918@env-itc w2918@env-itc) (set! w9327@w2916@env-labels w2916@env-labels) (set! w9326@w2914@env-names w2914@env-names) (set! w9325@w2912@make-env w2912@make-env) (set! w9324@w2910@env? w2910@env?) (set! w9323@w2907@w2899 w2907@w2899) (set! w9322@w2905@w2900 w2905@w2900) (set! w9321@w2903@w2898 w2903@w2898) (set! w9320@w2897@top-level-expander w2897@top-level-expander) (set! w9319@w2895@parse-top-level-program w2895@parse-top-level-program) (set! w9318@w2893@core-library-expander w2893@core-library-expander) (set! w9317@w2891@library-body-expander w2891@library-body-expander) (set! w9316@w2889@chi-interaction-expr w2889@chi-interaction-expr) (set! w9315@w2887@chi-library-internal w2887@chi-library-internal) (set! w9314@w2885@imp-collector w2885@imp-collector) (set! w9313@w2883@vis-collector w2883@vis-collector) (set! w9312@w2881@inv-collector w2881@inv-collector) (set! w9311@w2879@make-collector w2879@make-collector) (set! w9310@w2877@make-top-rib w2877@make-top-rib) (set! w9309@w2875@parse-import-spec* w2875@parse-import-spec*) (set! w9308@w2873@parse-library w2873@parse-library) (set! w9307@w2871@parse-library-name w2871@parse-library-name) (set! w9306@w2869@parse-exports w2869@parse-exports) (set! w9305@w2867@expand-transformer w2867@expand-transformer) (set! w9304@w2865@chi-body* w2865@chi-body*) (set! w9303@w2863@chi-internal-module w2863@chi-internal-module) (set! w9302@w2861@module-interface-exp-id* w2861@module-interface-exp-id*) (set! w9301@w2859@set-module-interface-exp-lab-vec! w2859@set-module-interface-exp-lab-vec!) (set! w9300@w2857@set-module-interface-exp-id-vec! w2857@set-module-interface-exp-id-vec!) (set! w9299@w2855@set-module-interface-first-mark! w2855@set-module-interface-first-mark!) (set! w9298@w2853@module-interface-exp-lab-vec w2853@module-interface-exp-lab-vec) (set! w9297@w2851@module-interface-exp-id-vec w2851@module-interface-exp-id-vec) (set! w9296@w2849@module-interface-first-mark w2849@module-interface-first-mark) (set! w9295@w2847@make-module-interface w2847@make-module-interface) (set! w9294@w2845@module-interface? w2845@module-interface?) (set! w9293@w2842@w2834 w2842@w2834) (set! w9292@w2840@w2835 w2840@w2835) (set! w9291@w2838@w2833 w2838@w2833) (set! w9290@w2832@parse-module w2832@parse-module) (set! w9289@w2830@chi-internal w2830@chi-internal) (set! w9288@w2828@find-dups w2828@find-dups) (set! w9287@w2826@find-bound=? w2826@find-bound=?) (set! w9286@w2824@chi-rhs* w2824@chi-rhs*) (set! w9285@w2822@expand-interaction-rhs*/init* w2822@expand-interaction-rhs*/init*) (set! w9284@w2820@chi-rhs w2820@chi-rhs) (set! w9283@w2818@chi-defun w2818@chi-defun) (set! w9282@w2816@chi-lambda-clause* w2816@chi-lambda-clause*) (set! w9281@w2814@chi-lambda-clause w2814@chi-lambda-clause) (set! w9280@w2812@verify-formals w2812@verify-formals) (set! w9279@w2810@chi-set! w2810@chi-set!) (set! w9278@w2808@chi-expr w2808@chi-expr) (set! w9277@w2806@chi-application w2806@chi-application) (set! w9276@w2804@chi-expr* w2804@chi-expr*) (set! w9275@w2802@chi-global-macro w2802@chi-global-macro) (set! w9274@w2800@chi-local-macro w2800@chi-local-macro) (set! w9273@w2798@chi-macro w2798@chi-macro) (set! w9272@w2796@do-macro-call w2796@do-macro-call) (set! w9271@w2794@local-macro-transformer w2794@local-macro-transformer) (set! w9270@w2792@macro-transformer w2792@macro-transformer) (set! w9269@w2790@symbol-macro w2790@symbol-macro) (set! w9268@w2788@core-macro-transformer w2788@core-macro-transformer) (set! w9267@w2786@syntax-transformer w2786@syntax-transformer) (set! w9266@w2784@ellipsis-map w2784@ellipsis-map) (set! w9265@w2782@syntax-case-transformer w2782@syntax-case-transformer) (set! w9264@w2780@verify-literals w2780@verify-literals) (set! w9263@w2778@underscore? w2778@underscore?) (set! w9262@w2776@ellipsis? w2776@ellipsis?) (set! w9261@w2774@syntax-dispatch w2774@syntax-dispatch) (set! w9260@w2772@convert-pattern w2772@convert-pattern) (set! w9259@w2770@foreign-call-transformer w2770@foreign-call-transformer) (set! w9258@w2768@parameterize-macro w2768@parameterize-macro) (set! w9257@w2766@incorrect-usage-macro w2766@incorrect-usage-macro) (set! w9256@w2764@define-condition-type-macro w2764@define-condition-type-macro) (set! w9255@w2762@define-record-type-macro w2762@define-record-type-macro) (set! w9254@w2760@define-struct-macro w2760@define-struct-macro) (set! w9253@w2758@quasisyntax-macro w2758@quasisyntax-macro) (set! w9252@w2756@quasiquote-macro w2756@quasiquote-macro) (set! w9251@w2754@syntax-rules-macro w2754@syntax-rules-macro) (set! w9250@w2752@include-into-macro w2752@include-into-macro) (set! w9249@w2750@include-macro w2750@include-macro) (set! w9248@w2748@do-include w2748@do-include) (set! w9247@w2746@cond-macro w2746@cond-macro) (set! w9246@w2744@and-macro w2744@and-macro) (set! w9245@w2742@or-macro w2742@or-macro) (set! w9244@w2740@let*-macro w2740@let*-macro) (set! w9243@w2738@do-macro w2738@do-macro) (set! w9242@w2736@identifier-syntax-macro w2736@identifier-syntax-macro) (set! w9241@w2734@endianness-macro w2734@endianness-macro) (set! w9240@w2732@assert-macro w2732@assert-macro) (set! w9239@w2730@delay-macro w2730@delay-macro) (set! w9238@w2728@time-macro w2728@time-macro) (set! w9237@w2726@define-enumeration-macro w2726@define-enumeration-macro) (set! w9236@w2724@guard-macro w2724@guard-macro) (set! w9235@w2722@trace-letrec-syntax-macro w2722@trace-letrec-syntax-macro) (set! w9234@w2720@trace-let-syntax-macro w2720@trace-let-syntax-macro) (set! w9233@w2718@trace-let/rec-syntax w2718@trace-let/rec-syntax) (set! w9232@w2716@trace-define-syntax-macro w2716@trace-define-syntax-macro) (set! w9231@w2714@trace-define-macro w2714@trace-define-macro) (set! w9230@w2712@trace-lambda-macro w2712@trace-lambda-macro) (set! w9229@w2710@let*-values-macro w2710@let*-values-macro) (set! w9228@w2708@let-values-macro w2708@let-values-macro) (set! w9227@w2706@let-macro w2706@let-macro) (set! w9226@w2704@invalid-fmls-error w2704@invalid-fmls-error) (set! w9225@w2702@with-syntax-macro w2702@with-syntax-macro) (set! w9224@w2700@bless w2700@bless) (set! w9223@w2698@lambda-transformer w2698@lambda-transformer) (set! w9222@w2696@case-lambda-transformer w2696@case-lambda-transformer) (set! w9221@w2694@quote-transformer w2694@quote-transformer) (set! w9220@w2692@case-macro w2692@case-macro) (set! w9219@w2690@or-transformer w2690@or-transformer) (set! w9218@w2688@and-transformer w2688@and-transformer) (set! w9217@w2686@if-transformer w2686@if-transformer) (set! w9216@w2684@unless-macro w2684@unless-macro) (set! w9215@w2682@when-macro w2682@when-macro) (set! w9214@w2680@record-constructor-descriptor-transformer w2680@record-constructor-descriptor-transformer) (set! w9213@w2678@record-type-descriptor-transformer w2678@record-type-descriptor-transformer) (set! w9212@w2676@type-descriptor-transformer w2676@type-descriptor-transformer) (set! w9211@w2674@fluid-let-syntax-transformer w2674@fluid-let-syntax-transformer) (set! w9210@w2672@letrec*-transformer w2672@letrec*-transformer) (set! w9209@w2670@letrec-transformer w2670@letrec-transformer) (set! w9208@w2668@letrec-helper w2668@letrec-helper) (set! w9207@w2666@add-lexicals w2666@add-lexicals) (set! w9206@w2664@add-lexical w2664@add-lexical) (set! w9205@w2662@set-lexical-mutable! w2662@set-lexical-mutable!) (set! w9204@w2660@lexical-mutable? w2660@lexical-mutable?) (set! w9203@w2658@lexical-var w2658@lexical-var) (set! w9202@w2656@scheme-stx w2656@scheme-stx) (set! w9201@w2654@scheme-stx-hashtable w2654@scheme-stx-hashtable) (set! w9200@w2652@parse-define-syntax w2652@parse-define-syntax) (set! w9199@w2650@parse-define w2650@parse-define) (set! w9198@w2339@make-eval-transformer w2339@make-eval-transformer) (set! w9197@w2337@variable-transformer-procedure w2337@variable-transformer-procedure) (set! w9196@w2335@variable-transformer? w2335@variable-transformer?) (set! w9195@w2333@make-variable-transformer w2333@make-variable-transformer) (set! w9194@w2331@sanitize-binding w2331@sanitize-binding) (set! w9193@w2317@syntax-type w2317@syntax-type) (set! w9192@w2315@raise-unbound-error w2315@raise-unbound-error) (set! w9191@w2313@binding-value w2313@binding-value) (set! w9190@w2311@binding-type w2311@binding-type) (set! w9189@w2309@make-binding w2309@make-binding) (set! w9188@w2307@label->binding w2307@label->binding) (set! w9187@w2305@id->real-label w2305@id->real-label) (set! w9186@w2303@id->label w2303@id->label) (set! w9185@w2301@same-marks*? w2301@same-marks*?) (set! w9184@w2299@stx->datum w2299@stx->datum) (set! w9183@w2297@strip w2297@strip) (set! w9182@w2295@strip-annotations w2295@strip-annotations) (set! w9181@w2293@self-evaluating? w2293@self-evaluating?) (set! w9180@w2291@bound-id-member? w2291@bound-id-member?) (set! w9179@w2289@distinct-bound-ids? w2289@distinct-bound-ids?) (set! w9178@w2287@valid-bound-ids? w2287@valid-bound-ids?) (set! w9177@w2285@free-id=? w2285@free-id=?) (set! w9176@w2283@bound-id=? w2283@bound-id=?) (set! w9175@w2281@same-marks? w2281@same-marks?) (set! w9174@w2279@id->sym w2279@id->sym) (set! w9173@w2277@id? w2277@id?) (set! w9172@w2275@syntax->list w2275@syntax->list) (set! w9171@w2273@syntax-cdr w2273@syntax-cdr) (set! w9170@w2271@syntax-car w2271@syntax-car) (set! w9169@w2269@syntax-list? w2269@syntax-list?) (set! w9168@w2267@syntax-null? w2267@syntax-null?) (set! w9167@w2265@syntax-vector? w2265@syntax-vector?) (set! w9166@w2263@syntax-pair? w2263@syntax-pair?) (set! w9165@w2261@syntax-vector->list w2261@syntax-vector->list) (set! w9164@w2259@syntax-kind? w2259@syntax-kind?) (set! w9163@w2257@add-subst w2257@add-subst) (set! w9162@w2255@add-mark w2255@add-mark) (set! w9161@w2253@mkstx w2253@mkstx) (set! w9160@w2251@join-wraps w2251@join-wraps) (set! w9159@w2249@anti-mark? w2249@anti-mark?) (set! w9158@w2247@anti-mark w2247@anti-mark) (set! w9157@w2245@gen-mark w2245@gen-mark) (set! w9156@w2243@datum->stx w2243@datum->stx) (set! w9155@w2241@rp w2241@rp) (set! w9154@w2239@set-stx-ae*! w2239@set-stx-ae*!) (set! w9153@w2237@set-stx-subst*! w2237@set-stx-subst*!) (set! w9152@w2235@set-stx-mark*! w2235@set-stx-mark*!) (set! w9151@w2233@set-stx-expr! w2233@set-stx-expr!) (set! w9150@w2231@stx-ae* w2231@stx-ae*) (set! w9149@w2229@stx-subst* w2229@stx-subst*) (set! w9148@w2227@stx-mark* w2227@stx-mark*) (set! w9147@w2225@stx-expr w2225@stx-expr) (set! w9146@w2223@make-stx w2223@make-stx) (set! w9145@w2221@stx? w2221@stx?) (set! w9144@w2218@w2210 w2218@w2210) (set! w9143@w2216@w2211 w2216@w2211) (set! w9142@w2214@w2209 w2214@w2209) (set! w9141@w2208@make-full-rib w2208@make-full-rib) (set! w9140@w2206@unseal-rib! w2206@unseal-rib!) (set! w9139@w2204@seal-rib! w2204@seal-rib!) (set! w9138@w2202@make-rib-map w2202@make-rib-map) (set! w9137@w2200@extend-rib/nc! w2200@extend-rib/nc!) (set! w9136@w2198@extend-rib! w2198@extend-rib!) (set! w9135@w2196@make-empty-rib w2196@make-empty-rib) (set! w9134@w2194@set-rib-cache! w2194@set-rib-cache!) (set! w9133@w2192@set-rib-sealed/freq! w2192@set-rib-sealed/freq!) (set! w9132@w2190@set-rib-label*! w2190@set-rib-label*!) (set! w9131@w2188@set-rib-mark**! w2188@set-rib-mark**!) (set! w9130@w2186@set-rib-sym*! w2186@set-rib-sym*!) (set! w9129@w2184@rib-cache w2184@rib-cache) (set! w9128@w2182@rib-sealed/freq w2182@rib-sealed/freq) (set! w9127@w2180@rib-label* w2180@rib-label*) (set! w9126@w2178@rib-mark** w2178@rib-mark**) (set! w9125@w2176@rib-sym* w2176@rib-sym*) (set! w9124@w2174@make-rib w2174@make-rib) (set! w9123@w2172@rib? w2172@rib?) (set! w9122@w2169@w2161 w2169@w2161) (set! w9121@w2167@w2162 w2167@w2162) (set! w9120@w2165@w2160 w2165@w2160) (set! w9119@w2159@gen-define-label w2159@gen-define-label) (set! w9118@w2157@gen-define-label+loc w2157@gen-define-label+loc) (set! w9117@w2155@gen-top-level-label w2155@gen-top-level-label) (set! w9116@w2153@gen-label w2153@gen-label) (set! w9115@w2151@gen-global w2151@gen-global) (set! w9114@w2149@gen-lexical w2149@gen-lexical) (set! w9113@w2147@top-marked? w2147@top-marked?) (set! w9112@w2145@top-mark* w2145@top-mark*) (set! w9111@w2140@set-union w2140@set-union) (set! w9110@w2138@set-cons w2138@set-cons) (set! w9109@w2136@file-options-macro w2136@file-options-macro) (w1793@w1438@current-library-expander w2977@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (w9387@w9382 w9389@w9384 w9391@w9383 w9394@&condition? w9396@make-&condition w9398@&condition-rtd w9400@&condition-rcd w9472@w9467 w9474@w9469 w9476@w9468 w9479@p? w9481@make-message-condition w9483@w9466@condition-message w9485@message-condition? w9487@condition-message w9489@&message-rtd w9491@&message-rcd w9497@w9492 w9499@w9494 w9501@w9493 w9504@p? w9506@make-warning w9508@warning? w9510@&warning-rtd w9512@&warning-rcd w9518@w9513 w9520@w9515 w9522@w9514 w9525@p? w9527@make-serious-condition w9529@serious-condition? w9531@&serious-rtd w9533@&serious-rcd w9539@w9534 w9541@w9536 w9543@w9535 w9546@p? w9548@make-error w9550@error? w9552@&error-rtd w9554@&error-rcd w9560@w9555 w9562@w9557 w9564@w9556 w9567@p? w9569@make-violation w9571@violation? w9573@&violation-rtd w9575@&violation-rcd w9581@w9576 w9583@w9578 w9585@w9577 w9588@p? w9590@make-assertion-violation w9592@assertion-violation? w9594@&assertion-rtd w9596@&assertion-rcd w9603@w9598 w9605@w9600 w9607@w9599 w9610@p? w9612@make-irritants-condition w9614@w9597@condition-irritants w9616@irritants-condition? w9618@condition-irritants w9620@&irritants-rtd w9622@&irritants-rcd w9629@w9624 w9631@w9626 w9633@w9625 w9636@p? w9638@make-who-condition w9640@w9623@condition-who w9642@who-condition? w9644@condition-who w9646@&who-rtd w9648@&who-rcd w9654@w9649 w9656@w9651 w9658@w9650 w9661@p? w9663@make-non-continuable-violation w9665@non-continuable-violation? w9667@&non-continuable-rtd w9669@&non-continuable-rcd w9675@w9670 w9677@w9672 w9679@w9671 w9682@p? w9684@make-implementation-restriction-violation w9686@implementation-restriction-violation? w9688@&implementation-restriction-rtd w9690@&implementation-restriction-rcd w9696@w9691 w9698@w9693 w9700@w9692 w9703@p? w9705@make-lexical-violation w9707@lexical-violation? w9709@&lexical-rtd w9711@&lexical-rcd w9719@w9714 w9721@w9716 w9723@w9715 w9726@p? w9728@make-syntax-violation w9730@w9712@syntax-violation-form w9732@w9713@syntax-violation-subform w9734@syntax-violation? w9736@syntax-violation-form w9738@syntax-violation-subform w9740@&syntax-rtd w9742@&syntax-rcd w9748@w9743 w9750@w9745 w9752@w9744 w9755@p? w9757@make-undefined-violation w9759@undefined-violation? w9761@&undefined-rtd w9763@&undefined-rcd w9769@w9764 w9771@w9766 w9773@w9765 w9776@p? w9778@make-i/o-error w9780@i/o-error? w9782@&i/o-rtd w9784@&i/o-rcd w9790@w9785 w9792@w9787 w9794@w9786 w9797@p? w9799@make-i/o-read-error w9801@i/o-read-error? w9803@&i/o-read-rtd w9805@&i/o-read-rcd w9811@w9806 w9813@w9808 w9815@w9807 w9818@p? w9820@make-i/o-write-error w9822@i/o-write-error? w9824@&i/o-write-rtd w9826@&i/o-write-rcd w9833@w9828 w9835@w9830 w9837@w9829 w9840@p? w9842@make-i/o-invalid-position-error w9844@w9827@i/o-error-position w9846@i/o-invalid-position-error? w9848@i/o-error-position w9850@&i/o-invalid-position-rtd w9852@&i/o-invalid-position-rcd w9859@w9854 w9861@w9856 w9863@w9855 w9866@p? w9868@make-i/o-filename-error w9870@w9853@i/o-error-filename w9872@i/o-filename-error? w9874@i/o-error-filename w9876@&i/o-filename-rtd w9878@&i/o-filename-rcd w9884@w9879 w9886@w9881 w9888@w9880 w9891@p? w9893@make-i/o-file-protection-error w9895@i/o-file-protection-error? w9897@&i/o-file-protection-rtd w9899@&i/o-file-protection-rcd w9905@w9900 w9907@w9902 w9909@w9901 w9912@p? w9914@make-i/o-file-is-read-only-error w9916@i/o-file-is-read-only-error? w9918@&i/o-file-is-read-only-rtd w9920@&i/o-file-is-read-only-rcd w9926@w9921 w9928@w9923 w9930@w9922 w9933@p? w9935@make-i/o-file-already-exists-error w9937@i/o-file-already-exists-error? w9939@&i/o-file-already-exists-rtd w9941@&i/o-file-already-exists-rcd w9947@w9942 w9949@w9944 w9951@w9943 w9954@p? w9956@make-i/o-file-does-not-exist-error w9958@i/o-file-does-not-exist-error? w9960@&i/o-file-does-not-exist-rtd w9962@&i/o-file-does-not-exist-rcd w9969@w9964 w9971@w9966 w9973@w9965 w9976@p? w9978@make-i/o-port-error w9980@w9963@i/o-error-port w9982@i/o-port-error? w9984@i/o-error-port w9986@&i/o-port-rtd w9988@&i/o-port-rcd w9994@w9989 w9996@w9991 w9998@w9990 w10001@p? w10003@make-i/o-decoding-error w10005@i/o-decoding-error? w10007@&i/o-decoding-rtd w10009@&i/o-decoding-rcd w10016@w10011 w10018@w10013 w10020@w10012 w10023@p? w10025@make-i/o-encoding-error w10027@w10010@i/o-encoding-error-char w10029@i/o-encoding-error? w10031@i/o-encoding-error-char w10033@&i/o-encoding-rtd w10035@&i/o-encoding-rcd w10041@w10036 w10043@w10038 w10045@w10037 w10048@p? w10050@make-no-infinities-violation w10052@no-infinities-violation? w10054@&no-infinities-rtd w10056@&no-infinities-rcd w10062@w10057 w10064@w10059 w10066@w10058 w10069@p? w10071@make-no-nans-violation w10073@no-nans-violation? w10075@&no-nans-rtd w10077@&no-nans-rcd) (begin (set! w9387@w9382 (make-record-type-descriptor '&condition '#f 'w9385 '#f '#f '#())) (set! w9389@w9384 '#f) (set! w9391@w9383 (make-record-constructor-descriptor w9387@w9382 '#f w9389@w9384)) (set! w9394@&condition? (record-predicate w9387@w9382)) (set! w9396@make-&condition (record-constructor w9391@w9383)) (set! w9398@&condition-rtd w9387@w9382) (set! w9400@&condition-rcd w9391@w9383) (set! w9472@w9467 (make-record-type-descriptor '&message w9387@w9382 'w9470 '#f '#f '#((immutable message)))) (set! w9474@w9469 '#f) (set! w9476@w9468 (make-record-constructor-descriptor w9472@w9467 w9391@w9383 w9474@w9469)) (set! w9479@p? (record-predicate w9472@w9467)) (set! w9481@make-message-condition (record-constructor w9476@w9468)) (set! w9483@w9466@condition-message (record-accessor w9472@w9467 '0)) (set! w9485@message-condition? (condition-predicate w9472@w9467)) (set! w9487@condition-message (condition-accessor w9472@w9467 w9483@w9466@condition-message)) (set! w9489@&message-rtd w9472@w9467) (set! w9491@&message-rcd w9476@w9468) (set! w9497@w9492 (make-record-type-descriptor '&warning w9387@w9382 'w9495 '#f '#f '#())) (set! w9499@w9494 '#f) (set! w9501@w9493 (make-record-constructor-descriptor w9497@w9492 w9391@w9383 w9499@w9494)) (set! w9504@p? (record-predicate w9497@w9492)) (set! w9506@make-warning (record-constructor w9501@w9493)) (set! w9508@warning? (condition-predicate w9497@w9492)) (set! w9510@&warning-rtd w9497@w9492) (set! w9512@&warning-rcd w9501@w9493) (set! w9518@w9513 (make-record-type-descriptor '&serious w9387@w9382 'w9516 '#f '#f '#())) (set! w9520@w9515 '#f) (set! w9522@w9514 (make-record-constructor-descriptor w9518@w9513 w9391@w9383 w9520@w9515)) (set! w9525@p? (record-predicate w9518@w9513)) (set! w9527@make-serious-condition (record-constructor w9522@w9514)) (set! w9529@serious-condition? (condition-predicate w9518@w9513)) (set! w9531@&serious-rtd w9518@w9513) (set! w9533@&serious-rcd w9522@w9514) (set! w9539@w9534 (make-record-type-descriptor '&error w9518@w9513 'w9537 '#f '#f '#())) (set! w9541@w9536 '#f) (set! w9543@w9535 (make-record-constructor-descriptor w9539@w9534 w9522@w9514 w9541@w9536)) (set! w9546@p? (record-predicate w9539@w9534)) (set! w9548@make-error (record-constructor w9543@w9535)) (set! w9550@error? (condition-predicate w9539@w9534)) (set! w9552@&error-rtd w9539@w9534) (set! w9554@&error-rcd w9543@w9535) (set! w9560@w9555 (make-record-type-descriptor '&violation w9518@w9513 'w9558 '#f '#f '#())) (set! w9562@w9557 '#f) (set! w9564@w9556 (make-record-constructor-descriptor w9560@w9555 w9522@w9514 w9562@w9557)) (set! w9567@p? (record-predicate w9560@w9555)) (set! w9569@make-violation (record-constructor w9564@w9556)) (set! w9571@violation? (condition-predicate w9560@w9555)) (set! w9573@&violation-rtd w9560@w9555) (set! w9575@&violation-rcd w9564@w9556) (set! w9581@w9576 (make-record-type-descriptor '&assertion w9560@w9555 'w9579 '#f '#f '#())) (set! w9583@w9578 '#f) (set! w9585@w9577 (make-record-constructor-descriptor w9581@w9576 w9564@w9556 w9583@w9578)) (set! w9588@p? (record-predicate w9581@w9576)) (set! w9590@make-assertion-violation (record-constructor w9585@w9577)) (set! w9592@assertion-violation? (condition-predicate w9581@w9576)) (set! w9594@&assertion-rtd w9581@w9576) (set! w9596@&assertion-rcd w9585@w9577) (set! w9603@w9598 (make-record-type-descriptor '&irritants w9387@w9382 'w9601 '#f '#f '#((immutable irritants)))) (set! w9605@w9600 '#f) (set! w9607@w9599 (make-record-constructor-descriptor w9603@w9598 w9391@w9383 w9605@w9600)) (set! w9610@p? (record-predicate w9603@w9598)) (set! w9612@make-irritants-condition (record-constructor w9607@w9599)) (set! w9614@w9597@condition-irritants (record-accessor w9603@w9598 '0)) (set! w9616@irritants-condition? (condition-predicate w9603@w9598)) (set! w9618@condition-irritants (condition-accessor w9603@w9598 w9614@w9597@condition-irritants)) (set! w9620@&irritants-rtd w9603@w9598) (set! w9622@&irritants-rcd w9607@w9599) (set! w9629@w9624 (make-record-type-descriptor '&who w9387@w9382 'w9627 '#f '#f '#((immutable who)))) (set! w9631@w9626 '#f) (set! w9633@w9625 (make-record-constructor-descriptor w9629@w9624 w9391@w9383 w9631@w9626)) (set! w9636@p? (record-predicate w9629@w9624)) (set! w9638@make-who-condition (record-constructor w9633@w9625)) (set! w9640@w9623@condition-who (record-accessor w9629@w9624 '0)) (set! w9642@who-condition? (condition-predicate w9629@w9624)) (set! w9644@condition-who (condition-accessor w9629@w9624 w9640@w9623@condition-who)) (set! w9646@&who-rtd w9629@w9624) (set! w9648@&who-rcd w9633@w9625) (set! w9654@w9649 (make-record-type-descriptor '&non-continuable w9560@w9555 'w9652 '#f '#f '#())) (set! w9656@w9651 '#f) (set! w9658@w9650 (make-record-constructor-descriptor w9654@w9649 w9564@w9556 w9656@w9651)) (set! w9661@p? (record-predicate w9654@w9649)) (set! w9663@make-non-continuable-violation (record-constructor w9658@w9650)) (set! w9665@non-continuable-violation? (condition-predicate w9654@w9649)) (set! w9667@&non-continuable-rtd w9654@w9649) (set! w9669@&non-continuable-rcd w9658@w9650) (set! w9675@w9670 (make-record-type-descriptor '&implementation-restriction w9560@w9555 'w9673 '#f '#f '#())) (set! w9677@w9672 '#f) (set! w9679@w9671 (make-record-constructor-descriptor w9675@w9670 w9564@w9556 w9677@w9672)) (set! w9682@p? (record-predicate w9675@w9670)) (set! w9684@make-implementation-restriction-violation (record-constructor w9679@w9671)) (set! w9686@implementation-restriction-violation? (condition-predicate w9675@w9670)) (set! w9688@&implementation-restriction-rtd w9675@w9670) (set! w9690@&implementation-restriction-rcd w9679@w9671) (set! w9696@w9691 (make-record-type-descriptor '&lexical w9560@w9555 'w9694 '#f '#f '#())) (set! w9698@w9693 '#f) (set! w9700@w9692 (make-record-constructor-descriptor w9696@w9691 w9564@w9556 w9698@w9693)) (set! w9703@p? (record-predicate w9696@w9691)) (set! w9705@make-lexical-violation (record-constructor w9700@w9692)) (set! w9707@lexical-violation? (condition-predicate w9696@w9691)) (set! w9709@&lexical-rtd w9696@w9691) (set! w9711@&lexical-rcd w9700@w9692) (set! w9719@w9714 (make-record-type-descriptor '&syntax w9560@w9555 'w9717 '#f '#f '#((immutable form) (immutable subform)))) (set! w9721@w9716 '#f) (set! w9723@w9715 (make-record-constructor-descriptor w9719@w9714 w9564@w9556 w9721@w9716)) (set! w9726@p? (record-predicate w9719@w9714)) (set! w9728@make-syntax-violation (record-constructor w9723@w9715)) (set! w9730@w9712@syntax-violation-form (record-accessor w9719@w9714 '0)) (set! w9732@w9713@syntax-violation-subform (record-accessor w9719@w9714 '1)) (set! w9734@syntax-violation? (condition-predicate w9719@w9714)) (set! w9736@syntax-violation-form (condition-accessor w9719@w9714 w9730@w9712@syntax-violation-form)) (set! w9738@syntax-violation-subform (condition-accessor w9719@w9714 w9732@w9713@syntax-violation-subform)) (set! w9740@&syntax-rtd w9719@w9714) (set! w9742@&syntax-rcd w9723@w9715) (set! w9748@w9743 (make-record-type-descriptor '&undefined w9560@w9555 'w9746 '#f '#f '#())) (set! w9750@w9745 '#f) (set! w9752@w9744 (make-record-constructor-descriptor w9748@w9743 w9564@w9556 w9750@w9745)) (set! w9755@p? (record-predicate w9748@w9743)) (set! w9757@make-undefined-violation (record-constructor w9752@w9744)) (set! w9759@undefined-violation? (condition-predicate w9748@w9743)) (set! w9761@&undefined-rtd w9748@w9743) (set! w9763@&undefined-rcd w9752@w9744) (set! w9769@w9764 (make-record-type-descriptor '&i/o w9539@w9534 'w9767 '#f '#f '#())) (set! w9771@w9766 '#f) (set! w9773@w9765 (make-record-constructor-descriptor w9769@w9764 w9543@w9535 w9771@w9766)) (set! w9776@p? (record-predicate w9769@w9764)) (set! w9778@make-i/o-error (record-constructor w9773@w9765)) (set! w9780@i/o-error? (condition-predicate w9769@w9764)) (set! w9782@&i/o-rtd w9769@w9764) (set! w9784@&i/o-rcd w9773@w9765) (set! w9790@w9785 (make-record-type-descriptor '&i/o-read w9769@w9764 'w9788 '#f '#f '#())) (set! w9792@w9787 '#f) (set! w9794@w9786 (make-record-constructor-descriptor w9790@w9785 w9773@w9765 w9792@w9787)) (set! w9797@p? (record-predicate w9790@w9785)) (set! w9799@make-i/o-read-error (record-constructor w9794@w9786)) (set! w9801@i/o-read-error? (condition-predicate w9790@w9785)) (set! w9803@&i/o-read-rtd w9790@w9785) (set! w9805@&i/o-read-rcd w9794@w9786) (set! w9811@w9806 (make-record-type-descriptor '&i/o-write w9769@w9764 'w9809 '#f '#f '#())) (set! w9813@w9808 '#f) (set! w9815@w9807 (make-record-constructor-descriptor w9811@w9806 w9773@w9765 w9813@w9808)) (set! w9818@p? (record-predicate w9811@w9806)) (set! w9820@make-i/o-write-error (record-constructor w9815@w9807)) (set! w9822@i/o-write-error? (condition-predicate w9811@w9806)) (set! w9824@&i/o-write-rtd w9811@w9806) (set! w9826@&i/o-write-rcd w9815@w9807) (set! w9833@w9828 (make-record-type-descriptor '&i/o-invalid-position w9769@w9764 'w9831 '#f '#f '#((immutable position)))) (set! w9835@w9830 '#f) (set! w9837@w9829 (make-record-constructor-descriptor w9833@w9828 w9773@w9765 w9835@w9830)) (set! w9840@p? (record-predicate w9833@w9828)) (set! w9842@make-i/o-invalid-position-error (record-constructor w9837@w9829)) (set! w9844@w9827@i/o-error-position (record-accessor w9833@w9828 '0)) (set! w9846@i/o-invalid-position-error? (condition-predicate w9833@w9828)) (set! w9848@i/o-error-position (condition-accessor w9833@w9828 w9844@w9827@i/o-error-position)) (set! w9850@&i/o-invalid-position-rtd w9833@w9828) (set! w9852@&i/o-invalid-position-rcd w9837@w9829) (set! w9859@w9854 (make-record-type-descriptor '&i/o-filename w9769@w9764 'w9857 '#f '#f '#((immutable filename)))) (set! w9861@w9856 '#f) (set! w9863@w9855 (make-record-constructor-descriptor w9859@w9854 w9773@w9765 w9861@w9856)) (set! w9866@p? (record-predicate w9859@w9854)) (set! w9868@make-i/o-filename-error (record-constructor w9863@w9855)) (set! w9870@w9853@i/o-error-filename (record-accessor w9859@w9854 '0)) (set! w9872@i/o-filename-error? (condition-predicate w9859@w9854)) (set! w9874@i/o-error-filename (condition-accessor w9859@w9854 w9870@w9853@i/o-error-filename)) (set! w9876@&i/o-filename-rtd w9859@w9854) (set! w9878@&i/o-filename-rcd w9863@w9855) (set! w9884@w9879 (make-record-type-descriptor '&i/o-file-protection w9859@w9854 'w9882 '#f '#f '#())) (set! w9886@w9881 '#f) (set! w9888@w9880 (make-record-constructor-descriptor w9884@w9879 w9863@w9855 w9886@w9881)) (set! w9891@p? (record-predicate w9884@w9879)) (set! w9893@make-i/o-file-protection-error (record-constructor w9888@w9880)) (set! w9895@i/o-file-protection-error? (condition-predicate w9884@w9879)) (set! w9897@&i/o-file-protection-rtd w9884@w9879) (set! w9899@&i/o-file-protection-rcd w9888@w9880) (set! w9905@w9900 (make-record-type-descriptor '&i/o-file-is-read-only w9884@w9879 'w9903 '#f '#f '#())) (set! w9907@w9902 '#f) (set! w9909@w9901 (make-record-constructor-descriptor w9905@w9900 w9888@w9880 w9907@w9902)) (set! w9912@p? (record-predicate w9905@w9900)) (set! w9914@make-i/o-file-is-read-only-error (record-constructor w9909@w9901)) (set! w9916@i/o-file-is-read-only-error? (condition-predicate w9905@w9900)) (set! w9918@&i/o-file-is-read-only-rtd w9905@w9900) (set! w9920@&i/o-file-is-read-only-rcd w9909@w9901) (set! w9926@w9921 (make-record-type-descriptor '&i/o-file-already-exists w9859@w9854 'w9924 '#f '#f '#())) (set! w9928@w9923 '#f) (set! w9930@w9922 (make-record-constructor-descriptor w9926@w9921 w9863@w9855 w9928@w9923)) (set! w9933@p? (record-predicate w9926@w9921)) (set! w9935@make-i/o-file-already-exists-error (record-constructor w9930@w9922)) (set! w9937@i/o-file-already-exists-error? (condition-predicate w9926@w9921)) (set! w9939@&i/o-file-already-exists-rtd w9926@w9921) (set! w9941@&i/o-file-already-exists-rcd w9930@w9922) (set! w9947@w9942 (make-record-type-descriptor '&i/o-file-does-not-exist w9859@w9854 'w9945 '#f '#f '#())) (set! w9949@w9944 '#f) (set! w9951@w9943 (make-record-constructor-descriptor w9947@w9942 w9863@w9855 w9949@w9944)) (set! w9954@p? (record-predicate w9947@w9942)) (set! w9956@make-i/o-file-does-not-exist-error (record-constructor w9951@w9943)) (set! w9958@i/o-file-does-not-exist-error? (condition-predicate w9947@w9942)) (set! w9960@&i/o-file-does-not-exist-rtd w9947@w9942) (set! w9962@&i/o-file-does-not-exist-rcd w9951@w9943) (set! w9969@w9964 (make-record-type-descriptor '&i/o-port w9769@w9764 'w9967 '#f '#f '#((immutable port)))) (set! w9971@w9966 '#f) (set! w9973@w9965 (make-record-constructor-descriptor w9969@w9964 w9773@w9765 w9971@w9966)) (set! w9976@p? (record-predicate w9969@w9964)) (set! w9978@make-i/o-port-error (record-constructor w9973@w9965)) (set! w9980@w9963@i/o-error-port (record-accessor w9969@w9964 '0)) (set! w9982@i/o-port-error? (condition-predicate w9969@w9964)) (set! w9984@i/o-error-port (condition-accessor w9969@w9964 w9980@w9963@i/o-error-port)) (set! w9986@&i/o-port-rtd w9969@w9964) (set! w9988@&i/o-port-rcd w9973@w9965) (set! w9994@w9989 (make-record-type-descriptor '&i/o-decoding w9969@w9964 'w9992 '#f '#f '#())) (set! w9996@w9991 '#f) (set! w9998@w9990 (make-record-constructor-descriptor w9994@w9989 w9973@w9965 w9996@w9991)) (set! w10001@p? (record-predicate w9994@w9989)) (set! w10003@make-i/o-decoding-error (record-constructor w9998@w9990)) (set! w10005@i/o-decoding-error? (condition-predicate w9994@w9989)) (set! w10007@&i/o-decoding-rtd w9994@w9989) (set! w10009@&i/o-decoding-rcd w9998@w9990) (set! w10016@w10011 (make-record-type-descriptor '&i/o-encoding w9969@w9964 'w10014 '#f '#f '#((immutable char)))) (set! w10018@w10013 '#f) (set! w10020@w10012 (make-record-constructor-descriptor w10016@w10011 w9973@w9965 w10018@w10013)) (set! w10023@p? (record-predicate w10016@w10011)) (set! w10025@make-i/o-encoding-error (record-constructor w10020@w10012)) (set! w10027@w10010@i/o-encoding-error-char (record-accessor w10016@w10011 '0)) (set! w10029@i/o-encoding-error? (condition-predicate w10016@w10011)) (set! w10031@i/o-encoding-error-char (condition-accessor w10016@w10011 w10027@w10010@i/o-encoding-error-char)) (set! w10033@&i/o-encoding-rtd w10016@w10011) (set! w10035@&i/o-encoding-rcd w10020@w10012) (set! w10041@w10036 (make-record-type-descriptor '&no-infinities w9675@w9670 'w10039 '#f '#f '#())) (set! w10043@w10038 '#f) (set! w10045@w10037 (make-record-constructor-descriptor w10041@w10036 w9679@w9671 w10043@w10038)) (set! w10048@p? (record-predicate w10041@w10036)) (set! w10050@make-no-infinities-violation (record-constructor w10045@w10037)) (set! w10052@no-infinities-violation? (condition-predicate w10041@w10036)) (set! w10054@&no-infinities-rtd w10041@w10036) (set! w10056@&no-infinities-rcd w10045@w10037) (set! w10062@w10057 (make-record-type-descriptor '&no-nans w9675@w9670 'w10060 '#f '#f '#())) (set! w10064@w10059 '#f) (set! w10066@w10058 (make-record-constructor-descriptor w10062@w10057 w9679@w9671 w10064@w10059)) (set! w10069@p? (record-predicate w10062@w10057)) (set! w10071@make-no-nans-violation (record-constructor w10066@w10058)) (set! w10073@no-nans-violation? (condition-predicate w10062@w10057)) (set! w10075@&no-nans-rtd w10062@w10057) (set! w10077@&no-nans-rcd w10066@w10058) (begin (set! w10318@w10077@&no-nans-rcd w10077@&no-nans-rcd) (set! w10317@w10075@&no-nans-rtd w10075@&no-nans-rtd) (set! w10316@w10073@no-nans-violation? w10073@no-nans-violation?) (set! w10315@w10071@make-no-nans-violation w10071@make-no-nans-violation) (set! w10314@w10069@p? w10069@p?) (set! w10313@w10066@w10058 w10066@w10058) (set! w10312@w10064@w10059 w10064@w10059) (set! w10311@w10062@w10057 w10062@w10057) (set! w10310@w10056@&no-infinities-rcd w10056@&no-infinities-rcd) (set! w10309@w10054@&no-infinities-rtd w10054@&no-infinities-rtd) (set! w10308@w10052@no-infinities-violation? w10052@no-infinities-violation?) (set! w10307@w10050@make-no-infinities-violation w10050@make-no-infinities-violation) (set! w10306@w10048@p? w10048@p?) (set! w10305@w10045@w10037 w10045@w10037) (set! w10304@w10043@w10038 w10043@w10038) (set! w10303@w10041@w10036 w10041@w10036) (set! w10302@w10035@&i/o-encoding-rcd w10035@&i/o-encoding-rcd) (set! w10301@w10033@&i/o-encoding-rtd w10033@&i/o-encoding-rtd) (set! w10300@w10031@i/o-encoding-error-char w10031@i/o-encoding-error-char) (set! w10299@w10029@i/o-encoding-error? w10029@i/o-encoding-error?) (set! w10298@w10027@w10010@i/o-encoding-error-char w10027@w10010@i/o-encoding-error-char) (set! w10297@w10025@make-i/o-encoding-error w10025@make-i/o-encoding-error) (set! w10296@w10023@p? w10023@p?) (set! w10295@w10020@w10012 w10020@w10012) (set! w10294@w10018@w10013 w10018@w10013) (set! w10293@w10016@w10011 w10016@w10011) (set! w10292@w10009@&i/o-decoding-rcd w10009@&i/o-decoding-rcd) (set! w10291@w10007@&i/o-decoding-rtd w10007@&i/o-decoding-rtd) (set! w10290@w10005@i/o-decoding-error? w10005@i/o-decoding-error?) (set! w10289@w10003@make-i/o-decoding-error w10003@make-i/o-decoding-error) (set! w10288@w10001@p? w10001@p?) (set! w10287@w9998@w9990 w9998@w9990) (set! w10286@w9996@w9991 w9996@w9991) (set! w10285@w9994@w9989 w9994@w9989) (set! w10284@w9988@&i/o-port-rcd w9988@&i/o-port-rcd) (set! w10283@w9986@&i/o-port-rtd w9986@&i/o-port-rtd) (set! w10282@w9984@i/o-error-port w9984@i/o-error-port) (set! w10281@w9982@i/o-port-error? w9982@i/o-port-error?) (set! w10280@w9980@w9963@i/o-error-port w9980@w9963@i/o-error-port) (set! w10279@w9978@make-i/o-port-error w9978@make-i/o-port-error) (set! w10278@w9976@p? w9976@p?) (set! w10277@w9973@w9965 w9973@w9965) (set! w10276@w9971@w9966 w9971@w9966) (set! w10275@w9969@w9964 w9969@w9964) (set! w10274@w9962@&i/o-file-does-not-exist-rcd w9962@&i/o-file-does-not-exist-rcd) (set! w10273@w9960@&i/o-file-does-not-exist-rtd w9960@&i/o-file-does-not-exist-rtd) (set! w10272@w9958@i/o-file-does-not-exist-error? w9958@i/o-file-does-not-exist-error?) (set! w10271@w9956@make-i/o-file-does-not-exist-error w9956@make-i/o-file-does-not-exist-error) (set! w10270@w9954@p? w9954@p?) (set! w10269@w9951@w9943 w9951@w9943) (set! w10268@w9949@w9944 w9949@w9944) (set! w10267@w9947@w9942 w9947@w9942) (set! w10266@w9941@&i/o-file-already-exists-rcd w9941@&i/o-file-already-exists-rcd) (set! w10265@w9939@&i/o-file-already-exists-rtd w9939@&i/o-file-already-exists-rtd) (set! w10264@w9937@i/o-file-already-exists-error? w9937@i/o-file-already-exists-error?) (set! w10263@w9935@make-i/o-file-already-exists-error w9935@make-i/o-file-already-exists-error) (set! w10262@w9933@p? w9933@p?) (set! w10261@w9930@w9922 w9930@w9922) (set! w10260@w9928@w9923 w9928@w9923) (set! w10259@w9926@w9921 w9926@w9921) (set! w10258@w9920@&i/o-file-is-read-only-rcd w9920@&i/o-file-is-read-only-rcd) (set! w10257@w9918@&i/o-file-is-read-only-rtd w9918@&i/o-file-is-read-only-rtd) (set! w10256@w9916@i/o-file-is-read-only-error? w9916@i/o-file-is-read-only-error?) (set! w10255@w9914@make-i/o-file-is-read-only-error w9914@make-i/o-file-is-read-only-error) (set! w10254@w9912@p? w9912@p?) (set! w10253@w9909@w9901 w9909@w9901) (set! w10252@w9907@w9902 w9907@w9902) (set! w10251@w9905@w9900 w9905@w9900) (set! w10250@w9899@&i/o-file-protection-rcd w9899@&i/o-file-protection-rcd) (set! w10249@w9897@&i/o-file-protection-rtd w9897@&i/o-file-protection-rtd) (set! w10248@w9895@i/o-file-protection-error? w9895@i/o-file-protection-error?) (set! w10247@w9893@make-i/o-file-protection-error w9893@make-i/o-file-protection-error) (set! w10246@w9891@p? w9891@p?) (set! w10245@w9888@w9880 w9888@w9880) (set! w10244@w9886@w9881 w9886@w9881) (set! w10243@w9884@w9879 w9884@w9879) (set! w10242@w9878@&i/o-filename-rcd w9878@&i/o-filename-rcd) (set! w10241@w9876@&i/o-filename-rtd w9876@&i/o-filename-rtd) (set! w10240@w9874@i/o-error-filename w9874@i/o-error-filename) (set! w10239@w9872@i/o-filename-error? w9872@i/o-filename-error?) (set! w10238@w9870@w9853@i/o-error-filename w9870@w9853@i/o-error-filename) (set! w10237@w9868@make-i/o-filename-error w9868@make-i/o-filename-error) (set! w10236@w9866@p? w9866@p?) (set! w10235@w9863@w9855 w9863@w9855) (set! w10234@w9861@w9856 w9861@w9856) (set! w10233@w9859@w9854 w9859@w9854) (set! w10232@w9852@&i/o-invalid-position-rcd w9852@&i/o-invalid-position-rcd) (set! w10231@w9850@&i/o-invalid-position-rtd w9850@&i/o-invalid-position-rtd) (set! w10230@w9848@i/o-error-position w9848@i/o-error-position) (set! w10229@w9846@i/o-invalid-position-error? w9846@i/o-invalid-position-error?) (set! w10228@w9844@w9827@i/o-error-position w9844@w9827@i/o-error-position) (set! w10227@w9842@make-i/o-invalid-position-error w9842@make-i/o-invalid-position-error) (set! w10226@w9840@p? w9840@p?) (set! w10225@w9837@w9829 w9837@w9829) (set! w10224@w9835@w9830 w9835@w9830) (set! w10223@w9833@w9828 w9833@w9828) (set! w10222@w9826@&i/o-write-rcd w9826@&i/o-write-rcd) (set! w10221@w9824@&i/o-write-rtd w9824@&i/o-write-rtd) (set! w10220@w9822@i/o-write-error? w9822@i/o-write-error?) (set! w10219@w9820@make-i/o-write-error w9820@make-i/o-write-error) (set! w10218@w9818@p? w9818@p?) (set! w10217@w9815@w9807 w9815@w9807) (set! w10216@w9813@w9808 w9813@w9808) (set! w10215@w9811@w9806 w9811@w9806) (set! w10214@w9805@&i/o-read-rcd w9805@&i/o-read-rcd) (set! w10213@w9803@&i/o-read-rtd w9803@&i/o-read-rtd) (set! w10212@w9801@i/o-read-error? w9801@i/o-read-error?) (set! w10211@w9799@make-i/o-read-error w9799@make-i/o-read-error) (set! w10210@w9797@p? w9797@p?) (set! w10209@w9794@w9786 w9794@w9786) (set! w10208@w9792@w9787 w9792@w9787) (set! w10207@w9790@w9785 w9790@w9785) (set! w10206@w9784@&i/o-rcd w9784@&i/o-rcd) (set! w10205@w9782@&i/o-rtd w9782@&i/o-rtd) (set! w10204@w9780@i/o-error? w9780@i/o-error?) (set! w10203@w9778@make-i/o-error w9778@make-i/o-error) (set! w10202@w9776@p? w9776@p?) (set! w10201@w9773@w9765 w9773@w9765) (set! w10200@w9771@w9766 w9771@w9766) (set! w10199@w9769@w9764 w9769@w9764) (set! w10198@w9763@&undefined-rcd w9763@&undefined-rcd) (set! w10197@w9761@&undefined-rtd w9761@&undefined-rtd) (set! w10196@w9759@undefined-violation? w9759@undefined-violation?) (set! w10195@w9757@make-undefined-violation w9757@make-undefined-violation) (set! w10194@w9755@p? w9755@p?) (set! w10193@w9752@w9744 w9752@w9744) (set! w10192@w9750@w9745 w9750@w9745) (set! w10191@w9748@w9743 w9748@w9743) (set! w10190@w9742@&syntax-rcd w9742@&syntax-rcd) (set! w10189@w9740@&syntax-rtd w9740@&syntax-rtd) (set! w10188@w9738@syntax-violation-subform w9738@syntax-violation-subform) (set! w10187@w9736@syntax-violation-form w9736@syntax-violation-form) (set! w10186@w9734@syntax-violation? w9734@syntax-violation?) (set! w10185@w9732@w9713@syntax-violation-subform w9732@w9713@syntax-violation-subform) (set! w10184@w9730@w9712@syntax-violation-form w9730@w9712@syntax-violation-form) (set! w10183@w9728@make-syntax-violation w9728@make-syntax-violation) (set! w10182@w9726@p? w9726@p?) (set! w10181@w9723@w9715 w9723@w9715) (set! w10180@w9721@w9716 w9721@w9716) (set! w10179@w9719@w9714 w9719@w9714) (set! w10178@w9711@&lexical-rcd w9711@&lexical-rcd) (set! w10177@w9709@&lexical-rtd w9709@&lexical-rtd) (set! w10176@w9707@lexical-violation? w9707@lexical-violation?) (set! w10175@w9705@make-lexical-violation w9705@make-lexical-violation) (set! w10174@w9703@p? w9703@p?) (set! w10173@w9700@w9692 w9700@w9692) (set! w10172@w9698@w9693 w9698@w9693) (set! w10171@w9696@w9691 w9696@w9691) (set! w10170@w9690@&implementation-restriction-rcd w9690@&implementation-restriction-rcd) (set! w10169@w9688@&implementation-restriction-rtd w9688@&implementation-restriction-rtd) (set! w10168@w9686@implementation-restriction-violation? w9686@implementation-restriction-violation?) (set! w10167@w9684@make-implementation-restriction-violation w9684@make-implementation-restriction-violation) (set! w10166@w9682@p? w9682@p?) (set! w10165@w9679@w9671 w9679@w9671) (set! w10164@w9677@w9672 w9677@w9672) (set! w10163@w9675@w9670 w9675@w9670) (set! w10162@w9669@&non-continuable-rcd w9669@&non-continuable-rcd) (set! w10161@w9667@&non-continuable-rtd w9667@&non-continuable-rtd) (set! w10160@w9665@non-continuable-violation? w9665@non-continuable-violation?) (set! w10159@w9663@make-non-continuable-violation w9663@make-non-continuable-violation) (set! w10158@w9661@p? w9661@p?) (set! w10157@w9658@w9650 w9658@w9650) (set! w10156@w9656@w9651 w9656@w9651) (set! w10155@w9654@w9649 w9654@w9649) (set! w10154@w9648@&who-rcd w9648@&who-rcd) (set! w10153@w9646@&who-rtd w9646@&who-rtd) (set! w10152@w9644@condition-who w9644@condition-who) (set! w10151@w9642@who-condition? w9642@who-condition?) (set! w10150@w9640@w9623@condition-who w9640@w9623@condition-who) (set! w10149@w9638@make-who-condition w9638@make-who-condition) (set! w10148@w9636@p? w9636@p?) (set! w10147@w9633@w9625 w9633@w9625) (set! w10146@w9631@w9626 w9631@w9626) (set! w10145@w9629@w9624 w9629@w9624) (set! w10144@w9622@&irritants-rcd w9622@&irritants-rcd) (set! w10143@w9620@&irritants-rtd w9620@&irritants-rtd) (set! w10142@w9618@condition-irritants w9618@condition-irritants) (set! w10141@w9616@irritants-condition? w9616@irritants-condition?) (set! w10140@w9614@w9597@condition-irritants w9614@w9597@condition-irritants) (set! w10139@w9612@make-irritants-condition w9612@make-irritants-condition) (set! w10138@w9610@p? w9610@p?) (set! w10137@w9607@w9599 w9607@w9599) (set! w10136@w9605@w9600 w9605@w9600) (set! w10135@w9603@w9598 w9603@w9598) (set! w10134@w9596@&assertion-rcd w9596@&assertion-rcd) (set! w10133@w9594@&assertion-rtd w9594@&assertion-rtd) (set! w10132@w9592@assertion-violation? w9592@assertion-violation?) (set! w10131@w9590@make-assertion-violation w9590@make-assertion-violation) (set! w10130@w9588@p? w9588@p?) (set! w10129@w9585@w9577 w9585@w9577) (set! w10128@w9583@w9578 w9583@w9578) (set! w10127@w9581@w9576 w9581@w9576) (set! w10126@w9575@&violation-rcd w9575@&violation-rcd) (set! w10125@w9573@&violation-rtd w9573@&violation-rtd) (set! w10124@w9571@violation? w9571@violation?) (set! w10123@w9569@make-violation w9569@make-violation) (set! w10122@w9567@p? w9567@p?) (set! w10121@w9564@w9556 w9564@w9556) (set! w10120@w9562@w9557 w9562@w9557) (set! w10119@w9560@w9555 w9560@w9555) (set! w10118@w9554@&error-rcd w9554@&error-rcd) (set! w10117@w9552@&error-rtd w9552@&error-rtd) (set! w10116@w9550@error? w9550@error?) (set! w10115@w9548@make-error w9548@make-error) (set! w10114@w9546@p? w9546@p?) (set! w10113@w9543@w9535 w9543@w9535) (set! w10112@w9541@w9536 w9541@w9536) (set! w10111@w9539@w9534 w9539@w9534) (set! w10110@w9533@&serious-rcd w9533@&serious-rcd) (set! w10109@w9531@&serious-rtd w9531@&serious-rtd) (set! w10108@w9529@serious-condition? w9529@serious-condition?) (set! w10107@w9527@make-serious-condition w9527@make-serious-condition) (set! w10106@w9525@p? w9525@p?) (set! w10105@w9522@w9514 w9522@w9514) (set! w10104@w9520@w9515 w9520@w9515) (set! w10103@w9518@w9513 w9518@w9513) (set! w10102@w9512@&warning-rcd w9512@&warning-rcd) (set! w10101@w9510@&warning-rtd w9510@&warning-rtd) (set! w10100@w9508@warning? w9508@warning?) (set! w10099@w9506@make-warning w9506@make-warning) (set! w10098@w9504@p? w9504@p?) (set! w10097@w9501@w9493 w9501@w9493) (set! w10096@w9499@w9494 w9499@w9494) (set! w10095@w9497@w9492 w9497@w9492) (set! w10094@w9491@&message-rcd w9491@&message-rcd) (set! w10093@w9489@&message-rtd w9489@&message-rtd) (set! w10092@w9487@condition-message w9487@condition-message) (set! w10091@w9485@message-condition? w9485@message-condition?) (set! w10090@w9483@w9466@condition-message w9483@w9466@condition-message) (set! w10089@w9481@make-message-condition w9481@make-message-condition) (set! w10088@w9479@p? w9479@p?) (set! w10087@w9476@w9468 w9476@w9468) (set! w10086@w9474@w9469 w9474@w9469) (set! w10085@w9472@w9467 w9472@w9467) (set! w10084@w9400@&condition-rcd w9400@&condition-rcd) (set! w10083@w9398@&condition-rtd w9398@&condition-rtd) (set! w10082@w9396@make-&condition w9396@make-&condition) (set! w10081@w9394@&condition? w9394@&condition?) (set! w10080@w9391@w9383 w9391@w9383) (set! w10079@w9389@w9384 w9389@w9384) (set! w10078@w9387@w9382 w9387@w9382)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (w1256@w1181@current-primitive-locations (lambda (w11343@x) ((lambda (w11345@t) (if w11345@t (cdr w11345@t) '#f)) (assq w11343@x '((&no-nans-rcd . w10318@w10077@&no-nans-rcd) (&no-nans-rtd . w10317@w10075@&no-nans-rtd) (&no-infinities-rcd . w10310@w10056@&no-infinities-rcd) (&no-infinities-rtd . w10309@w10054@&no-infinities-rtd) (&i/o-encoding-rcd . w10302@w10035@&i/o-encoding-rcd) (&i/o-encoding-rtd . w10301@w10033@&i/o-encoding-rtd) (&i/o-decoding-rcd . w10292@w10009@&i/o-decoding-rcd) (&i/o-decoding-rtd . w10291@w10007@&i/o-decoding-rtd) (&i/o-port-rcd . w10284@w9988@&i/o-port-rcd) (&i/o-port-rtd . w10283@w9986@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . w10274@w9962@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . w10273@w9960@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . w10266@w9941@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . w10265@w9939@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . w10258@w9920@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . w10257@w9918@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . w10250@w9899@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . w10249@w9897@&i/o-file-protection-rtd) (&i/o-filename-rcd . w10242@w9878@&i/o-filename-rcd) (&i/o-filename-rtd . w10241@w9876@&i/o-filename-rtd) (&i/o-invalid-position-rcd . w10232@w9852@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . w10231@w9850@&i/o-invalid-position-rtd) (&i/o-write-rcd . w10222@w9826@&i/o-write-rcd) (&i/o-write-rtd . w10221@w9824@&i/o-write-rtd) (&i/o-read-rcd . w10214@w9805@&i/o-read-rcd) (&i/o-read-rtd . w10213@w9803@&i/o-read-rtd) (&i/o-rcd . w10206@w9784@&i/o-rcd) (&i/o-rtd . w10205@w9782@&i/o-rtd) (&undefined-rcd . w10198@w9763@&undefined-rcd) (&undefined-rtd . w10197@w9761@&undefined-rtd) (&syntax-rcd . w10190@w9742@&syntax-rcd) (&syntax-rtd . w10189@w9740@&syntax-rtd) (&lexical-rcd . w10178@w9711@&lexical-rcd) (&lexical-rtd . w10177@w9709@&lexical-rtd) (&implementation-restriction-rcd . w10170@w9690@&implementation-restriction-rcd) (&implementation-restriction-rtd . w10169@w9688@&implementation-restriction-rtd) (&non-continuable-rcd . w10162@w9669@&non-continuable-rcd) (&non-continuable-rtd . w10161@w9667@&non-continuable-rtd) (&who-rcd . w10154@w9648@&who-rcd) (&who-rtd . w10153@w9646@&who-rtd) (&irritants-rcd . w10144@w9622@&irritants-rcd) (&irritants-rtd . w10143@w9620@&irritants-rtd) (&assertion-rcd . w10134@w9596@&assertion-rcd) (&assertion-rtd . w10133@w9594@&assertion-rtd) (&violation-rcd . w10126@w9575@&violation-rcd) (&violation-rtd . w10125@w9573@&violation-rtd) (&error-rcd . w10118@w9554@&error-rcd) (&error-rtd . w10117@w9552@&error-rtd) (&serious-rcd . w10110@w9533@&serious-rcd) (&serious-rtd . w10109@w9531@&serious-rtd) (&warning-rcd . w10102@w9512@&warning-rcd) (&warning-rtd . w10101@w9510@&warning-rtd) (&message-rcd . w10094@w9491@&message-rcd) (&message-rtd . w10093@w9489@&message-rtd) (&condition-rcd . w10084@w9400@&condition-rcd) (&condition-rtd . w10083@w9398@&condition-rtd) (syntax-error . w9368@w3003@syntax-error) (syntax-dispatch . w9261@w2774@syntax-dispatch) (gensym . w1161@w925@gensym) (load . w10581@w10346@load) (interaction-environment . w9376@w3019@interaction-environment) (library-path . w1785@w1422@library-path) (make-parameter . w1175@w953@make-parameter) (make-variable-transformer . w9195@w2333@make-variable-transformer) (identifier? . w9371@w3009@identifier?) (generate-temporaries . w9361@w2989@generate-temporaries) (free-identifier=? . w9362@w2991@free-identifier=?) (syntax->datum . w9373@w3013@syntax->datum) (datum->syntax . w9372@w3011@datum->syntax) (bound-identifier=? . w9363@w2993@bound-identifier=?) (make-i/o-write-error . w10219@w9820@make-i/o-write-error) (make-i/o-read-error . w10211@w9799@make-i/o-read-error) (make-i/o-port-error . w10279@w9978@make-i/o-port-error) (make-i/o-invalid-position-error . w10227@w9842@make-i/o-invalid-position-error) (make-i/o-filename-error . w10237@w9868@make-i/o-filename-error) (make-i/o-file-protection-error . w10247@w9893@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . w10255@w9914@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . w10271@w9956@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . w10263@w9935@make-i/o-file-already-exists-error) (make-i/o-error . w10203@w9778@make-i/o-error) (make-i/o-encoding-error . w10297@w10025@make-i/o-encoding-error) (make-i/o-decoding-error . w10289@w10003@make-i/o-decoding-error) (i/o-write-error? . w10220@w9822@i/o-write-error?) (i/o-read-error? . w10212@w9801@i/o-read-error?) (i/o-port-error? . w10281@w9982@i/o-port-error?) (i/o-invalid-position-error? . w10229@w9846@i/o-invalid-position-error?) (i/o-filename-error? . w10239@w9872@i/o-filename-error?) (i/o-file-protection-error? . w10248@w9895@i/o-file-protection-error?) (i/o-file-is-read-only-error? . w10256@w9916@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . w10272@w9958@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . w10264@w9937@i/o-file-already-exists-error?) (i/o-error? . w10204@w9780@i/o-error?) (i/o-error-position . w10230@w9848@i/o-error-position) (i/o-error-port . w10282@w9984@i/o-error-port) (i/o-error-filename . w10240@w9874@i/o-error-filename) (i/o-encoding-error? . w10299@w10029@i/o-encoding-error?) (i/o-encoding-error-char . w10300@w10031@i/o-encoding-error-char) (i/o-decoding-error? . w10290@w10005@i/o-decoding-error?) (scheme-report-environment . w9352@w2971@scheme-report-environment) (null-environment . w9351@w2969@null-environment) (command-line . w10578@w10340@command-line) (eval . w9354@w2975@eval) (environment . w9350@w2967@environment) (who-condition? . w10151@w9642@who-condition?) (warning? . w10100@w9508@warning?) (violation? . w10124@w9571@violation?) (undefined-violation? . w10196@w9759@undefined-violation?) (syntax-violation? . w10186@w9734@syntax-violation?) (syntax-violation-subform . w10188@w9738@syntax-violation-subform) (syntax-violation-form . w10187@w9736@syntax-violation-form) (syntax-violation . w9370@w3007@syntax-violation) (serious-condition? . w10108@w9529@serious-condition?) (non-continuable-violation? . w10160@w9665@non-continuable-violation?) (message-condition? . w10091@w9485@message-condition?) (make-who-condition . w10149@w9638@make-who-condition) (make-warning . w10099@w9506@make-warning) (make-violation . w10123@w9569@make-violation) (make-undefined-violation . w10195@w9757@make-undefined-violation) (make-syntax-violation . w10183@w9728@make-syntax-violation) (make-serious-condition . w10107@w9527@make-serious-condition) (make-non-continuable-violation . w10159@w9663@make-non-continuable-violation) (make-message-condition . w10089@w9481@make-message-condition) (make-lexical-violation . w10175@w9705@make-lexical-violation) (make-irritants-condition . w10139@w9612@make-irritants-condition) (make-implementation-restriction-violation . w10167@w9684@make-implementation-restriction-violation) (make-error . w10115@w9548@make-error) (make-assertion-violation . w10131@w9590@make-assertion-violation) (lexical-violation? . w10176@w9707@lexical-violation?) (irritants-condition? . w10141@w9616@irritants-condition?) (implementation-restriction-violation? . w10168@w9686@implementation-restriction-violation?) (error? . w10116@w9550@error?) (condition-who . w10152@w9644@condition-who) (condition-message . w10092@w9487@condition-message) (condition-irritants . w10142@w9618@condition-irritants) (assertion-violation? . w10132@w9592@assertion-violation?) (no-nans-violation? . w10316@w10073@no-nans-violation?) (no-infinities-violation? . w10308@w10052@no-infinities-violation?) (make-no-nans-violation . w10315@w10071@make-no-nans-violation) (make-no-infinities-violation . w10307@w10050@make-no-infinities-violation) (assertion-error . w9367@w3001@assertion-error)))))) (w1801@w1454@install-library 'w11308 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . w11298) (format . w11295) (string-split . w11284) (call-process . w11278) (set-current-directory! . w11274) (expand-path . w11273) (current-directory . w11272) (%spawn . w11271) (%waitpid . w11270) (%ffi-supported? . w11269) (%ffi-pointer-ref . w11268) (%ffi-pointer->string . w11267) (%ffi-call->string-or-zero . w11266) (%ffi-call->double . w11265) (%ffi-call->void* . w11264) (%ffi-call->void . w11263) (%ffi-call->int . w11262) (%ffi-lookup . w11261) (%ffi-open . w11260) (%fork . w11259) (%pipe . w11258) (p . w11257) (string-upcase . w11227) (string-titlecase . w11226) (string-normalize-nfkd . w11225) (string-normalize-nfkc . w11224) (string-normalize-nfd . w11223) (string-normalize-nfc . w11222) (string-foldcase . w11221) (string-downcase . w11220) (string-ci>? . w11219) (string-ci>=? . w11218) (string-ci=? . w11217) (string-ci<? . w11216) (string-ci<=? . w11215) (char-whitespace? . w11214) (char-upper-case? . w11213) (char-title-case? . w11212) (char-numeric? . w11211) (char-lower-case? . w11210) (char-general-category . w11209) (char-upcase . w11208) (char-titlecase . w11207) (char-foldcase . w11206) (char-downcase . w11205) (char-ci>? . w11204) (char-ci>=? . w11203) (char-ci=? . w11202) (char-ci<? . w11201) (char-ci<=? . w11200) (char-alphabetic? . w11199) (make-variable-transformer . w2332) (identifier? . w3008) (generate-temporaries . w2988) (free-identifier=? . w2990) (syntax->datum . w3012) (datum->syntax . w3010) (bound-identifier=? . w2992) (record-type-descriptor? . w11198) (record-predicate . w11197) (record-mutator . w11196) (record-constructor . w11195) (record-accessor . w11194) (make-record-type-descriptor . w11193) (make-record-constructor-descriptor . w11192) (record? . w11191) (record-type-uid . w11190) (record-type-sealed? . w11189) (record-type-parent . w11188) (record-type-opaque? . w11187) (record-type-name . w11186) (record-type-generative? . w11185) (record-type-field-names . w11184) (record-rtd . w11183) (record-field-mutable? . w11182) (delete-file . w11181) (file-exists? . w11180) (vector-sort! . w11179) (vector-sort . w11178) (list-sort . w11177) (symbol-hash . w11176) (string-ci-hash . w11175) (string-hash . w11174) (equal-hash . w11173) (hashtable-equivalence-function . w11172) (make-hashtable . w11171) (hashtable-hash-function . w11170) (make-eqv-hashtable . w11169) (make-eq-hashtable . w11168) (hashtable? . w11167) (hashtable-update! . w11166) (hashtable-size . w11165) (hashtable-set! . w11164) (hashtable-ref . w11163) (hashtable-mutable? . w11162) (hashtable-keys . w11161) (hashtable-entries . w11160) (hashtable-delete! . w11159) (hashtable-copy . w11158) (hashtable-contains? . w11157) (hashtable-clear! . w11156) (call-with-output-file . w11155) (call-with-input-file . w11154) (write-char . w11153) (write . w11152) (with-output-to-file . w11151) (with-input-from-file . w11150) (read-char . w11149) (read . w11148) (peek-char . w11147) (open-output-file . w11146) (open-input-file . w11145) (newline . w11144) (display . w11143) (close-output-port . w11142) (close-input-port . w11141) (eof-object? . w11140) (eof-object . w11139) (current-error-port . w11138) (current-output-port . w11137) (current-input-port . w11136) (output-port? . w11135) (input-port? . w11134) (utf-8-codec . w11133) (utf-16-codec . w11132) (transcoder-error-handling-mode . w11131) (transcoder-eol-style . w11130) (transcoder-codec . w11129) (transcoded-port . w11128) (textual-port? . w11127) (string->bytevector . w11126) (standard-output-port . w11125) (standard-input-port . w11124) (standard-error-port . w11123) (set-port-position! . w11122) (put-u8 . w11121) (put-string . w11120) (put-datum . w11119) (put-char . w11118) (put-bytevector . w11117) (port? . w11116) (port-transcoder . w11115) (port-position . w11114) (port-has-set-port-position!? . w11113) (port-has-port-position? . w11112) (port-eof? . w11111) (output-port-buffer-mode . w11110) (open-string-output-port . w11109) (open-string-input-port . w11108) (open-file-output-port . w11107) (open-file-input/output-port . w11106) (open-file-input-port . w11105) (open-bytevector-output-port . w11104) (open-bytevector-input-port . w11103) (native-transcoder . w11102) (native-eol-style . w11101) (make-transcoder . w11100) (latin-1-codec . w11099) (make-i/o-write-error . w9819) (make-i/o-read-error . w9798) (make-i/o-port-error . w9977) (make-i/o-invalid-position-error . w9841) (make-i/o-filename-error . w9867) (make-i/o-file-protection-error . w9892) (make-i/o-file-is-read-only-error . w9913) (make-i/o-file-does-not-exist-error . w9955) (make-i/o-file-already-exists-error . w9934) (make-i/o-error . w9777) (make-i/o-encoding-error . w10024) (make-i/o-decoding-error . w10002) (make-custom-textual-output-port . w11098) (make-custom-textual-input/output-port . w11097) (make-custom-textual-input-port . w11096) (make-custom-binary-output-port . w11095) (make-custom-binary-input/output-port . w11094) (make-custom-binary-input-port . w11093) (make-bytevector . w11092) (lookahead-u8 . w11091) (lookahead-char . w11090) (i/o-write-error? . w9821) (i/o-read-error? . w9800) (i/o-port-error? . w9981) (i/o-invalid-position-error? . w9845) (i/o-filename-error? . w9871) (i/o-file-protection-error? . w9894) (i/o-file-is-read-only-error? . w9915) (i/o-file-does-not-exist-error? . w9957) (i/o-file-already-exists-error? . w9936) (i/o-error? . w9779) (i/o-error-position . w9847) (i/o-error-port . w9983) (i/o-error-filename . w9873) (i/o-encoding-error? . w10028) (i/o-encoding-error-char . w10030) (i/o-decoding-error? . w10004) (get-u8 . w11089) (get-string-n! . w11088) (get-string-n . w11087) (get-string-all . w11086) (get-line . w11085) (get-datum . w11084) (get-char . w11083) (get-bytevector-some . w11082) (get-bytevector-n! . w11081) (get-bytevector-n . w11080) (get-bytevector-all . w11079) (flush-output-port . w11078) (close-port . w11077) (exit . w11069) (command-line . w10339) (string-fill! . w11068) (string-set! . w11067) (set-cdr! . w11066) (set-car! . w11065) (remove . w11064) (remv . w11063) (remp . w11062) (remq . w11061) (partition . w11060) (memv . w11059) (memq . w11058) (memp . w11057) (member . w11056) (exists . w11055) (for-all . w11054) (fold-right . w11053) (fold-left . w11052) (find . w11051) (filter . w11050) (cons* . w11049) (assv . w11048) (assq . w11047) (assp . w11046) (assoc . w11045) (call-with-string-output-port . w11044) (call-with-port . w11043) (call-with-bytevector-output-port . w11042) (bytevector->string . w11041) (buffer-mode? . w11040) (binary-port? . w11039) (with-exception-handler . w11038) (raise-continuable . w11037) (raise . w11036) (eval . w2974) (environment . w2966) (make-enumeration . w11035) (enum-set=? . w11034) (enum-set-universe . w11033) (enum-set-union . w11032) (enum-set-subset? . w11031) (enum-set-projection . w11030) (enum-set-member? . w11029) (enum-set-intersection . w11028) (enum-set-indexer . w11027) (enum-set-difference . w11026) (enum-set-constructor . w11025) (enum-set-complement . w11024) (enum-set->list . w11023) (who-condition? . w9641) (warning? . w9507) (violation? . w9570) (undefined-violation? . w9758) (syntax-violation? . w9733) (syntax-violation-subform . w9737) (syntax-violation-form . w9735) (syntax-violation . w3006) (simple-conditions . w11022) (serious-condition? . w9528) (non-continuable-violation? . w9664) (message-condition? . w9484) (make-who-condition . w9637) (make-warning . w9505) (make-violation . w9568) (make-undefined-violation . w9756) (make-syntax-violation . w9727) (make-serious-condition . w9526) (make-non-continuable-violation . w9662) (make-message-condition . w9480) (make-lexical-violation . w9704) (make-irritants-condition . w9611) (make-implementation-restriction-violation . w9683) (make-error . w9547) (make-assertion-violation . w9589) (lexical-violation? . w9706) (irritants-condition? . w9615) (implementation-restriction-violation? . w9685) (error? . w9549) (condition-who . w9643) (condition-predicate . w11021) (condition-message . w9486) (condition-irritants . w9617) (condition-accessor . w11020) (condition . w11019) (assertion-violation? . w9591) (condition? . w11018) (utf32->string . w11017) (utf16->string . w11016) (utf8->string . w11015) (uint-list->bytevector . w11014) (u8-list->bytevector . w11013) (string->utf8 . w11012) (string->utf32 . w11011) (string->utf16 . w11010) (sint-list->bytevector . w11009) (native-endianness . w11008) (bytevector? . w11007) (bytevector=? . w11006) (bytevector-uint-set! . w11005) (bytevector-uint-ref . w11004) (bytevector-u8-set! . w11003) (bytevector-u8-ref . w11002) (bytevector-u64-set! . w11001) (bytevector-u64-ref . w11000) (bytevector-u64-native-set! . w10999) (bytevector-u64-native-ref . w10998) (bytevector-u32-set! . w10997) (bytevector-u32-ref . w10996) (bytevector-u32-native-set! . w10995) (bytevector-u32-native-ref . w10994) (bytevector-u16-set! . w10993) (bytevector-u16-ref . w10992) (bytevector-u16-native-set! . w10991) (bytevector-u16-native-ref . w10990) (bytevector-sint-set! . w10989) (bytevector-sint-ref . w10988) (bytevector-s8-set! . w10987) (bytevector-s8-ref . w10986) (bytevector-s64-set! . w10985) (bytevector-s64-ref . w10984) (bytevector-s64-native-set! . w10983) (bytevector-s64-native-ref . w10982) (bytevector-s32-set! . w10981) (bytevector-s32-ref . w10980) (bytevector-s32-native-set! . w10979) (bytevector-s32-native-ref . w10978) (bytevector-s16-set! . w10977) (bytevector-s16-ref . w10976) (bytevector-s16-native-set! . w10975) (bytevector-s16-native-ref . w10974) (bytevector-length . w10973) (bytevector-ieee-single-ref . w10972) (bytevector-ieee-single-set! . w10971) (bytevector-ieee-single-native-set! . w10970) (bytevector-ieee-single-native-ref . w10969) (bytevector-ieee-double-set! . w10968) (bytevector-ieee-double-ref . w10967) (bytevector-ieee-double-native-set! . w10966) (bytevector-ieee-double-native-ref . w10965) (bytevector-fill! . w10964) (bytevector-copy! . w10963) (bytevector-copy . w10962) (bytevector->uint-list . w10961) (bytevector->u8-list . w10960) (bytevector->sint-list . w10959) (no-nans-violation? . w10072) (no-infinities-violation? . w10051) (make-no-nans-violation . w10070) (make-no-infinities-violation . w10049) (real->flonum . w10958) (flzero? . w10957) (fltruncate . w10956) (fltan . w10955) (flsqrt . w10954) (flsin . w10953) (flround . w10952) (flpositive? . w10951) (flonum? . w10950) (flodd? . w10949) (flnumerator . w10948) (flnegative? . w10947) (flnan? . w10946) (flmod0 . w10945) (flmod . w10944) (flmin . w10943) (flmax . w10942) (fllog . w10941) (flinteger? . w10940) (flinfinite? . w10939) (flfloor . w10938) (flfinite? . w10937) (flexpt . w10936) (flexp . w10935) (fleven? . w10934) (fldiv0-and-mod0 . w10933) (fldiv0 . w10932) (fldiv-and-mod . w10931) (fldiv . w10930) (fldenominator . w10929) (flcos . w10928) (flceiling . w10927) (flatan . w10926) (flasin . w10925) (flacos . w10924) (flabs . w10923) (fl>? . w10922) (fl>=? . w10921) (fl=? . w10920) (fl<? . w10919) (fl<=? . w10918) (fl/ . w10917) (fl- . w10916) (fl+ . w10915) (fl* . w10914) (fixnum->flonum . w10913) (fxzero? . w10912) (fxxor . w10911) (fxrotate-bit-field . w10910) (fxreverse-bit-field . w10909) (fxpositive? . w10908) (fxodd? . w10907) (fxnot . w10906) (fxnegative? . w10905) (fxmod0 . w10904) (fxmod . w10903) (fxmin . w10902) (fxmax . w10901) (fxlength . w10900) (fxior . w10899) (fxif . w10898) (fxfirst-bit-set . w10897) (fxeven? . w10896) (fxdiv0-and-mod0 . w10895) (fxdiv0 . w10894) (fxdiv-and-mod . w10893) (fxdiv . w10892) (fxcopy-bit-field . w10891) (fxcopy-bit . w10890) (fxbit-set? . w10889) (fxbit-field . w10888) (fxbit-count . w10887) (fxarithmetic-shift-right . w10886) (fxarithmetic-shift-left . w10885) (fxarithmetic-shift . w10884) (fxand . w10883) (fx>? . w10882) (fx>=? . w10881) (fx=? . w10880) (fx<? . w10879) (fx<=? . w10878) (fx-/carry . w10877) (fx- . w10876) (fx+/carry . w10875) (fx+ . w10874) (fx*/carry . w10873) (fx* . w10872) (greatest-fixnum . w10871) (least-fixnum . w10870) (fixnum-width . w10869) (fixnum? . w10868) (bitwise-rotate-bit-field . w10867) (bitwise-reverse-bit-field . w10866) (bitwise-length . w10865) (bitwise-if . w10864) (bitwise-first-bit-set . w10863) (bitwise-copy-bit-field . w10862) (bitwise-copy-bit . w10861) (bitwise-bit-set? . w10860) (bitwise-bit-field . w10859) (bitwise-bit-count . w10858) (bitwise-xor . w10857) (bitwise-ior . w10856) (bitwise-and . w10855) (bitwise-not . w10854) (bitwise-arithmetic-shift-right . w10853) (bitwise-arithmetic-shift-left . w10852) (bitwise-arithmetic-shift . w10851) (zero? . w10850) (vector? . w10849) (vector-set! . w10848) (vector-ref . w10847) (vector-map . w10846) (vector-length . w10845) (vector-for-each . w10844) (vector-fill! . w10843) (vector->list . w10842) (vector . w10841) (values . w10840) (truncate . w10839) (tan . w10838) (symbol? . w10837) (symbol=? . w10836) (symbol->string . w10835) (substring . w10834) (string? . w10833) (string>? . w10832) (string>=? . w10831) (string=? . w10830) (string<? . w10829) (string<=? . w10828) (string-ref . w10827) (string-length . w10826) (string-for-each . w10825) (string-copy . w10824) (string-append . w10823) (string->symbol . w10822) (string->number . w10821) (string->list . w10820) (string . w10819) (sqrt . w10818) (sin . w10817) (round . w10816) (reverse . w10815) (real? . w10814) (real-valued? . w10813) (real-part . w10812) (rationalize . w10811) (rational? . w10810) (rational-valued? . w10809) (procedure? . w10808) (positive? . w10807) (pair? . w10806) (odd? . w10805) (numerator . w10804) (number? . w10803) (number->string . w10802) (null? . w10801) (not . w10800) (negative? . w10799) (nan? . w10798) (min . w10797) (max . w10796) (map . w10795) (make-vector . w10794) (make-string . w10793) (make-rectangular . w10792) (make-polar . w10791) (magnitude . w10790) (log . w10789) (list? . w10788) (list-tail . w10787) (list-ref . w10786) (list->vector . w10785) (list->string . w10784) (list . w10783) (length . w10782) (lcm . w10781) (integer? . w10780) (integer-valued? . w10779) (integer->char . w10778) (infinite? . w10777) (inexact? . w10776) (inexact . w10775) (imag-part . w10774) (gcd . w10773) (for-each . w10772) (floor . w10771) (finite? . w10770) (expt . w10769) (exp . w10768) (exact? . w10767) (exact-integer-sqrt . w10766) (exact . w10765) (even? . w10764) (error . w10763) (eqv? . w10762) (equal? . w10761) (eq? . w10760) (dynamic-wind . w10759) (div0-and-mod0 . w10758) (mod0 . w10757) (div0 . w10756) (div-and-mod . w10755) (mod . w10754) (div . w10753) (denominator . w10752) (cos . w10751) (cons . w10750) (complex? . w10749) (char? . w10748) (char>? . w10747) (char>=? . w10746) (char=? . w10745) (char<? . w10744) (char<=? . w10743) (char->integer . w10742) (ceiling . w10741) (call-with-values . w10740) (call/cc . w10739) (call-with-current-continuation . w10738) (cddddr . w10737) (cdddar . w10736) (cddadr . w10735) (cddaar . w10734) (cdaddr . w10733) (cdadar . w10732) (cdaadr . w10731) (cdaaar . w10730) (cadddr . w10729) (caddar . w10728) (cadadr . w10727) (cadaar . w10726) (caaddr . w10725) (caadar . w10724) (caaadr . w10723) (caaaar . w10722) (cdddr . w10721) (cddar . w10720) (cdadr . w10719) (cdaar . w10718) (caddr . w10717) (cadar . w10716) (caadr . w10715) (caaar . w10714) (cddr . w10713) (cdar . w10712) (cadr . w10711) (caar . w10710) (cdr . w10709) (car . w10708) (boolean? . w10707) (boolean=? . w10706) (atan . w10705) (assertion-violation . w10704) (asin . w10703) (apply . w10702) (append . w10701) (angle . w10700) (acos . w10699) (abs . w10698) (/ . w10697) (* . w10696) (- . w10695) (+ . w10694) (>= . w10693) (> . w10692) (= . w10691) (<= . w10690) (< . w10689) (library . w10688) (&no-nans . w10687) (&no-infinities . w10686) (&i/o-encoding . w10685) (&i/o-decoding . w10684) (&i/o-port . w10683) (&i/o-file-does-not-exist . w10682) (&i/o-file-already-exists . w10681) (&i/o-file-is-read-only . w10680) (&i/o-file-protection . w10679) (&i/o-filename . w10678) (&i/o-invalid-position . w10677) (&i/o-write . w10676) (&i/o-read . w10675) (&i/o . w10674) (&undefined . w10673) (&syntax . w10672) (&lexical . w10671) (&implementation-restriction . w10670) (&non-continuable . w10669) (&who . w10668) (&irritants . w10667) (&assertion . w10666) (&violation . w10665) (&error . w10664) (&serious . w10663) (&warning . w10662) (&message . w10661) (&condition . w10660) (define-condition-type . w10659) (define-enumeration . w10658) (define-record-type . w10657) (parent-rtd . w10656) (nongenerative . w10655) (opaque . w10654) (sealed . w10653) (protocol . w10652) (parent . w10651) (immutable . w10650) (mutable . w10649) (fields . w10648) (error-handling-mode . w10647) (file-options . w10646) (buffer-mode . w10645) (eol-style . w10644) (guard . w10643) (unsyntax-splicing . w10640) (unsyntax . w10639) (unquote-splicing . w10638) (unquote . w10637) (_ . w10636) (else . w10635) (=> . w10634) (... . w10633) (assert . w10632) (endianness . w10631) (do . w10628) (cond . w10627) (let* . w10626) (let . w10625) (let*-values . w10624) (let-values . w10623) (identifier-syntax . w10622) (with-syntax . w10621) (quasisyntax . w10620) (quasiquote . w10619) (syntax-rules . w10618) (include . w10617) (record-constructor-descriptor . w10615) (record-type-descriptor . w10614) (case . w10613) (unless . w10611) (when . w10610) (or . w10609) (and . w10608) (if . w10607) (letrec* . w10606) (letrec . w10605) (case-lambda . w10603) (lambda . w10602) (syntax . w10601) (syntax-case . w10600) (quote . w10599) (letrec-syntax . w10597) (let-syntax . w10596) (set! . w10595) (import . w10594) (begin . w10593) (define-syntax . w10591) (define . w10590)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11309 '(psyntax null-environment-5) '() '() '() '() '((make-promise . w11070) (unquote-splicing . w10638) (unquote . w10637) (_ . w10636) (else . w10635) (=> . w10634) (... . w10633) (delay . w10630) (do . w10628) (cond . w10627) (let* . w10626) (let . w10625) (quasiquote . w10619) (syntax-rules . w10618) (case . w10613) (or . w10609) (and . w10608) (if . w10607) (letrec . w10605) (lambda . w10602) (quote . w10599) (letrec-syntax . w10597) (let-syntax . w10596) (set! . w10595) (begin . w10593) (define-syntax . w10591) (define . w10590)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11310 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . w11219) (string-ci>=? . w11218) (string-ci=? . w11217) (string-ci<? . w11216) (string-ci<=? . w11215) (char-whitespace? . w11214) (char-upper-case? . w11213) (char-numeric? . w11211) (char-lower-case? . w11210) (char-upcase . w11208) (char-downcase . w11205) (char-ci>? . w11204) (char-ci>=? . w11203) (char-ci=? . w11202) (char-ci<? . w11201) (char-ci<=? . w11200) (char-alphabetic? . w11199) (call-with-output-file . w11155) (call-with-input-file . w11154) (write-char . w11153) (write . w11152) (with-output-to-file . w11151) (with-input-from-file . w11150) (read-char . w11149) (read . w11148) (peek-char . w11147) (open-output-file . w11146) (open-input-file . w11145) (newline . w11144) (display . w11143) (close-output-port . w11142) (close-input-port . w11141) (eof-object . w11139) (current-output-port . w11137) (current-input-port . w11136) (output-port? . w11135) (input-port? . w11134) (scheme-report-environment . w2970) (quotient . w11076) (null-environment . w2968) (remainder . w11075) (modulo . w11074) (inexact->exact . w11073) (force . w11072) (exact->inexact . w11071) (make-promise . w11070) (string-fill! . w11068) (string-set! . w11067) (set-cdr! . w11066) (set-car! . w11065) (memv . w11059) (memq . w11058) (member . w11056) (assv . w11048) (assq . w11047) (assoc . w11045) (eval . w2974) (zero? . w10850) (vector? . w10849) (vector-set! . w10848) (vector-ref . w10847) (vector-length . w10845) (vector-fill! . w10843) (vector->list . w10842) (vector . w10841) (values . w10840) (truncate . w10839) (tan . w10838) (symbol? . w10837) (symbol->string . w10835) (substring . w10834) (string? . w10833) (string>? . w10832) (string>=? . w10831) (string=? . w10830) (string<? . w10829) (string<=? . w10828) (string-ref . w10827) (string-length . w10826) (string-copy . w10824) (string-append . w10823) (string->symbol . w10822) (string->number . w10821) (string->list . w10820) (string . w10819) (sqrt . w10818) (sin . w10817) (round . w10816) (reverse . w10815) (real? . w10814) (real-part . w10812) (rationalize . w10811) (rational? . w10810) (procedure? . w10808) (positive? . w10807) (pair? . w10806) (odd? . w10805) (numerator . w10804) (number? . w10803) (number->string . w10802) (not . w10800) (negative? . w10799) (min . w10797) (max . w10796) (map . w10795) (make-vector . w10794) (make-string . w10793) (make-rectangular . w10792) (make-polar . w10791) (magnitude . w10790) (log . w10789) (list? . w10788) (list-tail . w10787) (list-ref . w10786) (list->vector . w10785) (list->string . w10784) (list . w10783) (length . w10782) (lcm . w10781) (integer? . w10780) (integer->char . w10778) (inexact? . w10776) (imag-part . w10774) (gcd . w10773) (for-each . w10772) (floor . w10771) (expt . w10769) (exp . w10768) (exact? . w10767) (even? . w10764) (eqv? . w10762) (equal? . w10761) (eq? . w10760) (dynamic-wind . w10759) (denominator . w10752) (cos . w10751) (cons . w10750) (complex? . w10749) (char? . w10748) (char>? . w10747) (char>=? . w10746) (char=? . w10745) (char<? . w10744) (char<=? . w10743) (char->integer . w10742) (ceiling . w10741) (call-with-values . w10740) (call-with-current-continuation . w10738) (cddddr . w10737) (cdddar . w10736) (cddadr . w10735) (cddaar . w10734) (cdaddr . w10733) (cdadar . w10732) (cdaadr . w10731) (cdaaar . w10730) (cadddr . w10729) (caddar . w10728) (cadadr . w10727) (cadaar . w10726) (caaddr . w10725) (caadar . w10724) (caaadr . w10723) (caaaar . w10722) (cdddr . w10721) (cddar . w10720) (cdadr . w10719) (cdaar . w10718) (caddr . w10717) (cadar . w10716) (caadr . w10715) (caaar . w10714) (cddr . w10713) (cdar . w10712) (cadr . w10711) (caar . w10710) (cdr . w10709) (car . w10708) (boolean? . w10707) (atan . w10705) (asin . w10703) (apply . w10702) (append . w10701) (angle . w10700) (acos . w10699) (abs . w10698) (/ . w10697) (* . w10696) (- . w10695) (+ . w10694) (>= . w10693) (> . w10692) (= . w10691) (<= . w10690) (< . w10689) (unquote-splicing . w10638) (unquote . w10637) (else . w10635) (=> . w10634) (... . w10633) (delay . w10630) (do . w10628) (cond . w10627) (let* . w10626) (let . w10625) (quasiquote . w10619) (syntax-rules . w10618) (case . w10613) (or . w10609) (and . w10608) (if . w10607) (letrec . w10605) (lambda . w10602) (quote . w10599) (letrec-syntax . w10597) (let-syntax . w10596) (set! . w10595) (begin . w10593) (define-syntax . w10591) (define . w10590)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11311 '(psyntax modules) '() '() '() '() '((module . w10592)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11312 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11313 '(rnrs) '(6) '() '() '() '((regexp? . w11301) (string-upcase . w11227) (string-titlecase . w11226) (string-normalize-nfkd . w11225) (string-normalize-nfkc . w11224) (string-normalize-nfd . w11223) (string-normalize-nfc . w11222) (string-foldcase . w11221) (string-downcase . w11220) (string-ci>? . w11219) (string-ci>=? . w11218) (string-ci=? . w11217) (string-ci<? . w11216) (string-ci<=? . w11215) (char-whitespace? . w11214) (char-upper-case? . w11213) (char-title-case? . w11212) (char-numeric? . w11211) (char-lower-case? . w11210) (char-general-category . w11209) (char-upcase . w11208) (char-titlecase . w11207) (char-foldcase . w11206) (char-downcase . w11205) (char-ci>? . w11204) (char-ci>=? . w11203) (char-ci=? . w11202) (char-ci<? . w11201) (char-ci<=? . w11200) (char-alphabetic? . w11199) (make-variable-transformer . w2332) (identifier? . w3008) (generate-temporaries . w2988) (free-identifier=? . w2990) (syntax->datum . w3012) (datum->syntax . w3010) (bound-identifier=? . w2992) (record-type-descriptor? . w11198) (record-predicate . w11197) (record-mutator . w11196) (record-constructor . w11195) (record-accessor . w11194) (make-record-type-descriptor . w11193) (make-record-constructor-descriptor . w11192) (record? . w11191) (record-type-uid . w11190) (record-type-sealed? . w11189) (record-type-parent . w11188) (record-type-opaque? . w11187) (record-type-name . w11186) (record-type-generative? . w11185) (record-type-field-names . w11184) (record-rtd . w11183) (record-field-mutable? . w11182) (delete-file . w11181) (file-exists? . w11180) (vector-sort! . w11179) (vector-sort . w11178) (list-sort . w11177) (symbol-hash . w11176) (string-ci-hash . w11175) (string-hash . w11174) (equal-hash . w11173) (hashtable-equivalence-function . w11172) (make-hashtable . w11171) (hashtable-hash-function . w11170) (make-eqv-hashtable . w11169) (make-eq-hashtable . w11168) (hashtable? . w11167) (hashtable-update! . w11166) (hashtable-size . w11165) (hashtable-set! . w11164) (hashtable-ref . w11163) (hashtable-mutable? . w11162) (hashtable-keys . w11161) (hashtable-entries . w11160) (hashtable-delete! . w11159) (hashtable-copy . w11158) (hashtable-contains? . w11157) (hashtable-clear! . w11156) (call-with-output-file . w11155) (call-with-input-file . w11154) (write-char . w11153) (write . w11152) (with-output-to-file . w11151) (with-input-from-file . w11150) (read-char . w11149) (read . w11148) (peek-char . w11147) (open-output-file . w11146) (open-input-file . w11145) (newline . w11144) (display . w11143) (close-output-port . w11142) (close-input-port . w11141) (eof-object? . w11140) (eof-object . w11139) (current-error-port . w11138) (current-output-port . w11137) (current-input-port . w11136) (output-port? . w11135) (input-port? . w11134) (utf-8-codec . w11133) (utf-16-codec . w11132) (transcoder-error-handling-mode . w11131) (transcoder-eol-style . w11130) (transcoder-codec . w11129) (transcoded-port . w11128) (textual-port? . w11127) (string->bytevector . w11126) (standard-output-port . w11125) (standard-input-port . w11124) (standard-error-port . w11123) (set-port-position! . w11122) (put-u8 . w11121) (put-string . w11120) (put-datum . w11119) (put-char . w11118) (put-bytevector . w11117) (port? . w11116) (port-transcoder . w11115) (port-position . w11114) (port-has-set-port-position!? . w11113) (port-has-port-position? . w11112) (port-eof? . w11111) (output-port-buffer-mode . w11110) (open-string-output-port . w11109) (open-string-input-port . w11108) (open-file-output-port . w11107) (open-file-input/output-port . w11106) (open-file-input-port . w11105) (open-bytevector-output-port . w11104) (open-bytevector-input-port . w11103) (native-transcoder . w11102) (native-eol-style . w11101) (make-transcoder . w11100) (latin-1-codec . w11099) (make-i/o-write-error . w9819) (make-i/o-read-error . w9798) (make-i/o-port-error . w9977) (make-i/o-invalid-position-error . w9841) (make-i/o-filename-error . w9867) (make-i/o-file-protection-error . w9892) (make-i/o-file-is-read-only-error . w9913) (make-i/o-file-does-not-exist-error . w9955) (make-i/o-file-already-exists-error . w9934) (make-i/o-error . w9777) (make-i/o-encoding-error . w10024) (make-i/o-decoding-error . w10002) (make-custom-textual-output-port . w11098) (make-custom-textual-input/output-port . w11097) (make-custom-textual-input-port . w11096) (make-custom-binary-output-port . w11095) (make-custom-binary-input/output-port . w11094) (make-custom-binary-input-port . w11093) (make-bytevector . w11092) (lookahead-u8 . w11091) (lookahead-char . w11090) (i/o-write-error? . w9821) (i/o-read-error? . w9800) (i/o-port-error? . w9981) (i/o-invalid-position-error? . w9845) (i/o-filename-error? . w9871) (i/o-file-protection-error? . w9894) (i/o-file-is-read-only-error? . w9915) (i/o-file-does-not-exist-error? . w9957) (i/o-file-already-exists-error? . w9936) (i/o-error? . w9779) (i/o-error-position . w9847) (i/o-error-port . w9983) (i/o-error-filename . w9873) (i/o-encoding-error? . w10028) (i/o-encoding-error-char . w10030) (i/o-decoding-error? . w10004) (get-u8 . w11089) (get-string-n! . w11088) (get-string-n . w11087) (get-string-all . w11086) (get-line . w11085) (get-datum . w11084) (get-char . w11083) (get-bytevector-some . w11082) (get-bytevector-n! . w11081) (get-bytevector-n . w11080) (get-bytevector-all . w11079) (flush-output-port . w11078) (close-port . w11077) (exit . w11069) (command-line . w10339) (remove . w11064) (remv . w11063) (remp . w11062) (remq . w11061) (partition . w11060) (memv . w11059) (memq . w11058) (memp . w11057) (member . w11056) (exists . w11055) (for-all . w11054) (fold-right . w11053) (fold-left . w11052) (find . w11051) (filter . w11050) (cons* . w11049) (assv . w11048) (assq . w11047) (assp . w11046) (assoc . w11045) (call-with-string-output-port . w11044) (call-with-port . w11043) (call-with-bytevector-output-port . w11042) (bytevector->string . w11041) (buffer-mode? . w11040) (binary-port? . w11039) (with-exception-handler . w11038) (raise-continuable . w11037) (raise . w11036) (make-enumeration . w11035) (enum-set=? . w11034) (enum-set-universe . w11033) (enum-set-union . w11032) (enum-set-subset? . w11031) (enum-set-projection . w11030) (enum-set-member? . w11029) (enum-set-intersection . w11028) (enum-set-indexer . w11027) (enum-set-difference . w11026) (enum-set-constructor . w11025) (enum-set-complement . w11024) (enum-set->list . w11023) (who-condition? . w9641) (warning? . w9507) (violation? . w9570) (undefined-violation? . w9758) (syntax-violation? . w9733) (syntax-violation-subform . w9737) (syntax-violation-form . w9735) (syntax-violation . w3006) (simple-conditions . w11022) (serious-condition? . w9528) (non-continuable-violation? . w9664) (message-condition? . w9484) (make-who-condition . w9637) (make-warning . w9505) (make-violation . w9568) (make-undefined-violation . w9756) (make-syntax-violation . w9727) (make-serious-condition . w9526) (make-non-continuable-violation . w9662) (make-message-condition . w9480) (make-lexical-violation . w9704) (make-irritants-condition . w9611) (make-implementation-restriction-violation . w9683) (make-error . w9547) (make-assertion-violation . w9589) (lexical-violation? . w9706) (irritants-condition? . w9615) (implementation-restriction-violation? . w9685) (error? . w9549) (condition-who . w9643) (condition-predicate . w11021) (condition-message . w9486) (condition-irritants . w9617) (condition-accessor . w11020) (condition . w11019) (assertion-violation? . w9591) (condition? . w11018) (utf32->string . w11017) (utf16->string . w11016) (utf8->string . w11015) (uint-list->bytevector . w11014) (u8-list->bytevector . w11013) (string->utf8 . w11012) (string->utf32 . w11011) (string->utf16 . w11010) (sint-list->bytevector . w11009) (native-endianness . w11008) (bytevector? . w11007) (bytevector=? . w11006) (bytevector-uint-set! . w11005) (bytevector-uint-ref . w11004) (bytevector-u8-set! . w11003) (bytevector-u8-ref . w11002) (bytevector-u64-set! . w11001) (bytevector-u64-ref . w11000) (bytevector-u64-native-set! . w10999) (bytevector-u64-native-ref . w10998) (bytevector-u32-set! . w10997) (bytevector-u32-ref . w10996) (bytevector-u32-native-set! . w10995) (bytevector-u32-native-ref . w10994) (bytevector-u16-set! . w10993) (bytevector-u16-ref . w10992) (bytevector-u16-native-set! . w10991) (bytevector-u16-native-ref . w10990) (bytevector-sint-set! . w10989) (bytevector-sint-ref . w10988) (bytevector-s8-set! . w10987) (bytevector-s8-ref . w10986) (bytevector-s64-set! . w10985) (bytevector-s64-ref . w10984) (bytevector-s64-native-set! . w10983) (bytevector-s64-native-ref . w10982) (bytevector-s32-set! . w10981) (bytevector-s32-ref . w10980) (bytevector-s32-native-set! . w10979) (bytevector-s32-native-ref . w10978) (bytevector-s16-set! . w10977) (bytevector-s16-ref . w10976) (bytevector-s16-native-set! . w10975) (bytevector-s16-native-ref . w10974) (bytevector-length . w10973) (bytevector-ieee-single-ref . w10972) (bytevector-ieee-single-set! . w10971) (bytevector-ieee-single-native-set! . w10970) (bytevector-ieee-single-native-ref . w10969) (bytevector-ieee-double-set! . w10968) (bytevector-ieee-double-ref . w10967) (bytevector-ieee-double-native-set! . w10966) (bytevector-ieee-double-native-ref . w10965) (bytevector-fill! . w10964) (bytevector-copy! . w10963) (bytevector-copy . w10962) (bytevector->uint-list . w10961) (bytevector->u8-list . w10960) (bytevector->sint-list . w10959) (no-nans-violation? . w10072) (no-infinities-violation? . w10051) (make-no-nans-violation . w10070) (make-no-infinities-violation . w10049) (real->flonum . w10958) (flzero? . w10957) (fltruncate . w10956) (fltan . w10955) (flsqrt . w10954) (flsin . w10953) (flround . w10952) (flpositive? . w10951) (flonum? . w10950) (flodd? . w10949) (flnumerator . w10948) (flnegative? . w10947) (flnan? . w10946) (flmod0 . w10945) (flmod . w10944) (flmin . w10943) (flmax . w10942) (fllog . w10941) (flinteger? . w10940) (flinfinite? . w10939) (flfloor . w10938) (flfinite? . w10937) (flexpt . w10936) (flexp . w10935) (fleven? . w10934) (fldiv0-and-mod0 . w10933) (fldiv0 . w10932) (fldiv-and-mod . w10931) (fldiv . w10930) (fldenominator . w10929) (flcos . w10928) (flceiling . w10927) (flatan . w10926) (flasin . w10925) (flacos . w10924) (flabs . w10923) (fl>? . w10922) (fl>=? . w10921) (fl=? . w10920) (fl<? . w10919) (fl<=? . w10918) (fl/ . w10917) (fl- . w10916) (fl+ . w10915) (fl* . w10914) (fixnum->flonum . w10913) (fxzero? . w10912) (fxxor . w10911) (fxrotate-bit-field . w10910) (fxreverse-bit-field . w10909) (fxpositive? . w10908) (fxodd? . w10907) (fxnot . w10906) (fxnegative? . w10905) (fxmod0 . w10904) (fxmod . w10903) (fxmin . w10902) (fxmax . w10901) (fxlength . w10900) (fxior . w10899) (fxif . w10898) (fxfirst-bit-set . w10897) (fxeven? . w10896) (fxdiv0-and-mod0 . w10895) (fxdiv0 . w10894) (fxdiv-and-mod . w10893) (fxdiv . w10892) (fxcopy-bit-field . w10891) (fxcopy-bit . w10890) (fxbit-set? . w10889) (fxbit-field . w10888) (fxbit-count . w10887) (fxarithmetic-shift-right . w10886) (fxarithmetic-shift-left . w10885) (fxarithmetic-shift . w10884) (fxand . w10883) (fx>? . w10882) (fx>=? . w10881) (fx=? . w10880) (fx<? . w10879) (fx<=? . w10878) (fx-/carry . w10877) (fx- . w10876) (fx+/carry . w10875) (fx+ . w10874) (fx*/carry . w10873) (fx* . w10872) (greatest-fixnum . w10871) (least-fixnum . w10870) (fixnum-width . w10869) (fixnum? . w10868) (bitwise-rotate-bit-field . w10867) (bitwise-reverse-bit-field . w10866) (bitwise-length . w10865) (bitwise-if . w10864) (bitwise-first-bit-set . w10863) (bitwise-copy-bit-field . w10862) (bitwise-copy-bit . w10861) (bitwise-bit-set? . w10860) (bitwise-bit-field . w10859) (bitwise-bit-count . w10858) (bitwise-xor . w10857) (bitwise-ior . w10856) (bitwise-and . w10855) (bitwise-not . w10854) (bitwise-arithmetic-shift-right . w10853) (bitwise-arithmetic-shift-left . w10852) (bitwise-arithmetic-shift . w10851) (zero? . w10850) (vector? . w10849) (vector-set! . w10848) (vector-ref . w10847) (vector-map . w10846) (vector-length . w10845) (vector-for-each . w10844) (vector-fill! . w10843) (vector->list . w10842) (vector . w10841) (values . w10840) (truncate . w10839) (tan . w10838) (symbol? . w10837) (symbol=? . w10836) (symbol->string . w10835) (substring . w10834) (string? . w10833) (string>? . w10832) (string>=? . w10831) (string=? . w10830) (string<? . w10829) (string<=? . w10828) (string-ref . w10827) (string-length . w10826) (string-for-each . w10825) (string-copy . w10824) (string-append . w10823) (string->symbol . w10822) (string->number . w10821) (string->list . w10820) (string . w10819) (sqrt . w10818) (sin . w10817) (round . w10816) (reverse . w10815) (real? . w10814) (real-valued? . w10813) (real-part . w10812) (rationalize . w10811) (rational? . w10810) (rational-valued? . w10809) (procedure? . w10808) (positive? . w10807) (pair? . w10806) (odd? . w10805) (numerator . w10804) (number? . w10803) (number->string . w10802) (null? . w10801) (not . w10800) (negative? . w10799) (nan? . w10798) (min . w10797) (max . w10796) (map . w10795) (make-vector . w10794) (make-string . w10793) (make-rectangular . w10792) (make-polar . w10791) (magnitude . w10790) (log . w10789) (list? . w10788) (list-tail . w10787) (list-ref . w10786) (list->vector . w10785) (list->string . w10784) (list . w10783) (length . w10782) (lcm . w10781) (integer? . w10780) (integer-valued? . w10779) (integer->char . w10778) (infinite? . w10777) (inexact? . w10776) (inexact . w10775) (imag-part . w10774) (gcd . w10773) (for-each . w10772) (floor . w10771) (finite? . w10770) (expt . w10769) (exp . w10768) (exact? . w10767) (exact-integer-sqrt . w10766) (exact . w10765) (even? . w10764) (error . w10763) (eqv? . w10762) (equal? . w10761) (eq? . w10760) (dynamic-wind . w10759) (div0-and-mod0 . w10758) (mod0 . w10757) (div0 . w10756) (div-and-mod . w10755) (mod . w10754) (div . w10753) (denominator . w10752) (cos . w10751) (cons . w10750) (complex? . w10749) (char? . w10748) (char>? . w10747) (char>=? . w10746) (char=? . w10745) (char<? . w10744) (char<=? . w10743) (char->integer . w10742) (ceiling . w10741) (call-with-values . w10740) (call/cc . w10739) (call-with-current-continuation . w10738) (cddddr . w10737) (cdddar . w10736) (cddadr . w10735) (cddaar . w10734) (cdaddr . w10733) (cdadar . w10732) (cdaadr . w10731) (cdaaar . w10730) (cadddr . w10729) (caddar . w10728) (cadadr . w10727) (cadaar . w10726) (caaddr . w10725) (caadar . w10724) (caaadr . w10723) (caaaar . w10722) (cdddr . w10721) (cddar . w10720) (cdadr . w10719) (cdaar . w10718) (caddr . w10717) (cadar . w10716) (caadr . w10715) (caaar . w10714) (cddr . w10713) (cdar . w10712) (cadr . w10711) (caar . w10710) (cdr . w10709) (car . w10708) (boolean? . w10707) (boolean=? . w10706) (atan . w10705) (assertion-violation . w10704) (asin . w10703) (apply . w10702) (append . w10701) (angle . w10700) (acos . w10699) (abs . w10698) (/ . w10697) (* . w10696) (- . w10695) (+ . w10694) (>= . w10693) (> . w10692) (= . w10691) (<= . w10690) (< . w10689) (&no-nans . w10687) (&no-infinities . w10686) (&i/o-encoding . w10685) (&i/o-decoding . w10684) (&i/o-port . w10683) (&i/o-file-does-not-exist . w10682) (&i/o-file-already-exists . w10681) (&i/o-file-is-read-only . w10680) (&i/o-file-protection . w10679) (&i/o-filename . w10678) (&i/o-invalid-position . w10677) (&i/o-write . w10676) (&i/o-read . w10675) (&i/o . w10674) (&undefined . w10673) (&syntax . w10672) (&lexical . w10671) (&implementation-restriction . w10670) (&non-continuable . w10669) (&who . w10668) (&irritants . w10667) (&assertion . w10666) (&violation . w10665) (&error . w10664) (&serious . w10663) (&warning . w10662) (&message . w10661) (&condition . w10660) (define-condition-type . w10659) (define-enumeration . w10658) (define-record-type . w10657) (parent-rtd . w10656) (nongenerative . w10655) (opaque . w10654) (sealed . w10653) (protocol . w10652) (parent . w10651) (immutable . w10650) (mutable . w10649) (fields . w10648) (error-handling-mode . w10647) (file-options . w10646) (buffer-mode . w10645) (eol-style . w10644) (guard . w10643) (unsyntax-splicing . w10640) (unsyntax . w10639) (unquote-splicing . w10638) (unquote . w10637) (_ . w10636) (else . w10635) (=> . w10634) (... . w10633) (assert . w10632) (endianness . w10631) (do . w10628) (cond . w10627) (let* . w10626) (let . w10625) (let*-values . w10624) (let-values . w10623) (identifier-syntax . w10622) (with-syntax . w10621) (quasisyntax . w10620) (quasiquote . w10619) (syntax-rules . w10618) (record-constructor-descriptor . w10615) (record-type-descriptor . w10614) (case . w10613) (unless . w10611) (when . w10610) (or . w10609) (and . w10608) (if . w10607) (letrec* . w10606) (letrec . w10605) (case-lambda . w10603) (lambda . w10602) (syntax . w10601) (syntax-case . w10600) (quote . w10599) (letrec-syntax . w10597) (let-syntax . w10596) (set! . w10595) (begin . w10593) (define-syntax . w10591) (define . w10590)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11314 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . w2970) (quotient . w11076) (null-environment . w2968) (remainder . w11075) (modulo . w11074) (inexact->exact . w11073) (force . w11072) (exact->inexact . w11071) (make-promise . w11070) (delay . w10630)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11315 '(rnrs control) '(6) '() '() '() '((do . w10628) (unless . w10611) (when . w10610) (case-lambda . w10603)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11316 '(rnrs eval) '(6) '() '() '() '((eval . w2974) (environment . w2966)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11317 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . w11066) (set-car! . w11065)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11318 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . w11068) (string-set! . w11067)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11319 '(rnrs programs) '(6) '() '() '() '((exit . w11069) (command-line . w10339)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11320 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . w2332) (identifier? . w3008) (generate-temporaries . w2988) (free-identifier=? . w2990) (syntax->datum . w3012) (datum->syntax . w3010) (bound-identifier=? . w2992) (syntax-violation . w3006) (unsyntax-splicing . w10640) (unsyntax . w10639) (_ . w10636) (... . w10633) (with-syntax . w10621) (quasisyntax . w10620) (syntax . w10601) (syntax-case . w10600)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11321 '(rnrs files) '(6) '() '() '() '((delete-file . w11181) (file-exists? . w11180) (make-i/o-write-error . w9819) (make-i/o-read-error . w9798) (make-i/o-port-error . w9977) (make-i/o-invalid-position-error . w9841) (make-i/o-filename-error . w9867) (make-i/o-file-protection-error . w9892) (make-i/o-file-is-read-only-error . w9913) (make-i/o-file-does-not-exist-error . w9955) (make-i/o-file-already-exists-error . w9934) (make-i/o-error . w9777) (i/o-write-error? . w9821) (i/o-read-error? . w9800) (i/o-port-error? . w9981) (i/o-invalid-position-error? . w9845) (i/o-filename-error? . w9871) (i/o-file-protection-error? . w9894) (i/o-file-is-read-only-error? . w9915) (i/o-file-does-not-exist-error? . w9957) (i/o-file-already-exists-error? . w9936) (i/o-error? . w9779) (i/o-error-position . w9847) (i/o-error-port . w9983) (i/o-error-filename . w9873) (&i/o-port . w10683) (&i/o-file-does-not-exist . w10682) (&i/o-file-already-exists . w10681) (&i/o-file-is-read-only . w10680) (&i/o-file-protection . w10679) (&i/o-filename . w10678) (&i/o-invalid-position . w10677) (&i/o-write . w10676) (&i/o-read . w10675) (&i/o . w10674)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11322 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . w11179) (vector-sort . w11178) (list-sort . w11177)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11323 '(rnrs base) '(6) '() '() '() '((zero? . w10850) (vector? . w10849) (vector-set! . w10848) (vector-ref . w10847) (vector-map . w10846) (vector-length . w10845) (vector-for-each . w10844) (vector-fill! . w10843) (vector->list . w10842) (vector . w10841) (values . w10840) (truncate . w10839) (tan . w10838) (symbol? . w10837) (symbol=? . w10836) (symbol->string . w10835) (substring . w10834) (string? . w10833) (string>? . w10832) (string>=? . w10831) (string=? . w10830) (string<? . w10829) (string<=? . w10828) (string-ref . w10827) (string-length . w10826) (string-for-each . w10825) (string-copy . w10824) (string-append . w10823) (string->symbol . w10822) (string->number . w10821) (string->list . w10820) (string . w10819) (sqrt . w10818) (sin . w10817) (round . w10816) (reverse . w10815) (real? . w10814) (real-valued? . w10813) (real-part . w10812) (rationalize . w10811) (rational? . w10810) (rational-valued? . w10809) (procedure? . w10808) (positive? . w10807) (pair? . w10806) (odd? . w10805) (numerator . w10804) (number? . w10803) (number->string . w10802) (null? . w10801) (not . w10800) (negative? . w10799) (nan? . w10798) (min . w10797) (max . w10796) (map . w10795) (make-vector . w10794) (make-string . w10793) (make-rectangular . w10792) (make-polar . w10791) (magnitude . w10790) (log . w10789) (list? . w10788) (list-tail . w10787) (list-ref . w10786) (list->vector . w10785) (list->string . w10784) (list . w10783) (length . w10782) (lcm . w10781) (integer? . w10780) (integer-valued? . w10779) (integer->char . w10778) (infinite? . w10777) (inexact? . w10776) (inexact . w10775) (imag-part . w10774) (gcd . w10773) (for-each . w10772) (floor . w10771) (finite? . w10770) (expt . w10769) (exp . w10768) (exact? . w10767) (exact-integer-sqrt . w10766) (exact . w10765) (even? . w10764) (error . w10763) (eqv? . w10762) (equal? . w10761) (eq? . w10760) (dynamic-wind . w10759) (div0-and-mod0 . w10758) (mod0 . w10757) (div0 . w10756) (div-and-mod . w10755) (mod . w10754) (div . w10753) (denominator . w10752) (cos . w10751) (cons . w10750) (complex? . w10749) (char? . w10748) (char>? . w10747) (char>=? . w10746) (char=? . w10745) (char<? . w10744) (char<=? . w10743) (char->integer . w10742) (ceiling . w10741) (call-with-values . w10740) (call/cc . w10739) (call-with-current-continuation . w10738) (cddddr . w10737) (cdddar . w10736) (cddadr . w10735) (cddaar . w10734) (cdaddr . w10733) (cdadar . w10732) (cdaadr . w10731) (cdaaar . w10730) (cadddr . w10729) (caddar . w10728) (cadadr . w10727) (cadaar . w10726) (caaddr . w10725) (caadar . w10724) (caaadr . w10723) (caaaar . w10722) (cdddr . w10721) (cddar . w10720) (cdadr . w10719) (cdaar . w10718) (caddr . w10717) (cadar . w10716) (caadr . w10715) (caaar . w10714) (cddr . w10713) (cdar . w10712) (cadr . w10711) (caar . w10710) (cdr . w10709) (car . w10708) (boolean? . w10707) (boolean=? . w10706) (atan . w10705) (assertion-violation . w10704) (asin . w10703) (apply . w10702) (append . w10701) (angle . w10700) (acos . w10699) (abs . w10698) (/ . w10697) (* . w10696) (- . w10695) (+ . w10694) (>= . w10693) (> . w10692) (= . w10691) (<= . w10690) (< . w10689) (unquote-splicing . w10638) (unquote . w10637) (_ . w10636) (else . w10635) (=> . w10634) (... . w10633) (assert . w10632) (cond . w10627) (let* . w10626) (let . w10625) (let*-values . w10624) (let-values . w10623) (identifier-syntax . w10622) (quasiquote . w10619) (syntax-rules . w10618) (case . w10613) (or . w10609) (and . w10608) (if . w10607) (letrec* . w10606) (letrec . w10605) (lambda . w10602) (quote . w10599) (letrec-syntax . w10597) (let-syntax . w10596) (set! . w10595) (begin . w10593) (define-syntax . w10591) (define . w10590)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11324 '(rnrs lists) '(6) '() '() '() '((remove . w11064) (remv . w11063) (remp . w11062) (remq . w11061) (partition . w11060) (memv . w11059) (memq . w11058) (memp . w11057) (member . w11056) (exists . w11055) (for-all . w11054) (fold-right . w11053) (fold-left . w11052) (find . w11051) (filter . w11050) (cons* . w11049) (assv . w11048) (assq . w11047) (assp . w11046) (assoc . w11045)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11325 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . w11155) (call-with-input-file . w11154) (write-char . w11153) (write . w11152) (with-output-to-file . w11151) (with-input-from-file . w11150) (read-char . w11149) (read . w11148) (peek-char . w11147) (open-output-file . w11146) (open-input-file . w11145) (newline . w11144) (display . w11143) (close-output-port . w11142) (close-input-port . w11141) (eof-object? . w11140) (eof-object . w11139) (current-error-port . w11138) (current-output-port . w11137) (current-input-port . w11136) (output-port? . w11135) (input-port? . w11134) (make-i/o-write-error . w9819) (make-i/o-read-error . w9798) (make-i/o-port-error . w9977) (make-i/o-invalid-position-error . w9841) (make-i/o-filename-error . w9867) (make-i/o-file-protection-error . w9892) (make-i/o-file-is-read-only-error . w9913) (make-i/o-file-does-not-exist-error . w9955) (make-i/o-file-already-exists-error . w9934) (make-i/o-error . w9777) (i/o-write-error? . w9821) (i/o-read-error? . w9800) (i/o-port-error? . w9981) (i/o-invalid-position-error? . w9845) (i/o-filename-error? . w9871) (i/o-file-protection-error? . w9894) (i/o-file-is-read-only-error? . w9915) (i/o-file-does-not-exist-error? . w9957) (i/o-file-already-exists-error? . w9936) (i/o-error? . w9779) (i/o-error-position . w9847) (i/o-error-port . w9983) (i/o-error-filename . w9873) (&i/o-port . w10683) (&i/o-file-does-not-exist . w10682) (&i/o-file-already-exists . w10681) (&i/o-file-is-read-only . w10680) (&i/o-file-protection . w10679) (&i/o-filename . w10678) (&i/o-invalid-position . w10677) (&i/o-write . w10676) (&i/o-read . w10675) (&i/o . w10674)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11326 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . w11092) (utf32->string . w11017) (utf16->string . w11016) (utf8->string . w11015) (uint-list->bytevector . w11014) (u8-list->bytevector . w11013) (string->utf8 . w11012) (string->utf32 . w11011) (string->utf16 . w11010) (sint-list->bytevector . w11009) (native-endianness . w11008) (bytevector? . w11007) (bytevector=? . w11006) (bytevector-uint-set! . w11005) (bytevector-uint-ref . w11004) (bytevector-u8-set! . w11003) (bytevector-u8-ref . w11002) (bytevector-u64-set! . w11001) (bytevector-u64-ref . w11000) (bytevector-u64-native-set! . w10999) (bytevector-u64-native-ref . w10998) (bytevector-u32-set! . w10997) (bytevector-u32-ref . w10996) (bytevector-u32-native-set! . w10995) (bytevector-u32-native-ref . w10994) (bytevector-u16-set! . w10993) (bytevector-u16-ref . w10992) (bytevector-u16-native-set! . w10991) (bytevector-u16-native-ref . w10990) (bytevector-sint-set! . w10989) (bytevector-sint-ref . w10988) (bytevector-s8-set! . w10987) (bytevector-s8-ref . w10986) (bytevector-s64-set! . w10985) (bytevector-s64-ref . w10984) (bytevector-s64-native-set! . w10983) (bytevector-s64-native-ref . w10982) (bytevector-s32-set! . w10981) (bytevector-s32-ref . w10980) (bytevector-s32-native-set! . w10979) (bytevector-s32-native-ref . w10978) (bytevector-s16-set! . w10977) (bytevector-s16-ref . w10976) (bytevector-s16-native-set! . w10975) (bytevector-s16-native-ref . w10974) (bytevector-length . w10973) (bytevector-ieee-single-ref . w10972) (bytevector-ieee-single-set! . w10971) (bytevector-ieee-single-native-set! . w10970) (bytevector-ieee-single-native-ref . w10969) (bytevector-ieee-double-set! . w10968) (bytevector-ieee-double-ref . w10967) (bytevector-ieee-double-native-set! . w10966) (bytevector-ieee-double-native-ref . w10965) (bytevector-fill! . w10964) (bytevector-copy! . w10963) (bytevector-copy . w10962) (bytevector->uint-list . w10961) (bytevector->u8-list . w10960) (bytevector->sint-list . w10959) (endianness . w10631)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11327 '(rnrs unicode) '(6) '() '() '() '((string-upcase . w11227) (string-titlecase . w11226) (string-normalize-nfkd . w11225) (string-normalize-nfkc . w11224) (string-normalize-nfd . w11223) (string-normalize-nfc . w11222) (string-foldcase . w11221) (string-downcase . w11220) (string-ci>? . w11219) (string-ci>=? . w11218) (string-ci=? . w11217) (string-ci<? . w11216) (string-ci<=? . w11215) (char-whitespace? . w11214) (char-upper-case? . w11213) (char-title-case? . w11212) (char-numeric? . w11211) (char-lower-case? . w11210) (char-general-category . w11209) (char-upcase . w11208) (char-titlecase . w11207) (char-foldcase . w11206) (char-downcase . w11205) (char-ci>? . w11204) (char-ci>=? . w11203) (char-ci=? . w11202) (char-ci<? . w11201) (char-ci<=? . w11200) (char-alphabetic? . w11199)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11328 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . w11038) (raise-continuable . w11037) (raise . w11036) (guard . w10643) (else . w10635) (=> . w10634)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11329 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . w10867) (bitwise-reverse-bit-field . w10866) (bitwise-length . w10865) (bitwise-if . w10864) (bitwise-first-bit-set . w10863) (bitwise-copy-bit-field . w10862) (bitwise-copy-bit . w10861) (bitwise-bit-set? . w10860) (bitwise-bit-field . w10859) (bitwise-bit-count . w10858) (bitwise-xor . w10857) (bitwise-ior . w10856) (bitwise-and . w10855) (bitwise-not . w10854) (bitwise-arithmetic-shift-right . w10853) (bitwise-arithmetic-shift-left . w10852) (bitwise-arithmetic-shift . w10851)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11330 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . w10912) (fxxor . w10911) (fxrotate-bit-field . w10910) (fxreverse-bit-field . w10909) (fxpositive? . w10908) (fxodd? . w10907) (fxnot . w10906) (fxnegative? . w10905) (fxmod0 . w10904) (fxmod . w10903) (fxmin . w10902) (fxmax . w10901) (fxlength . w10900) (fxior . w10899) (fxif . w10898) (fxfirst-bit-set . w10897) (fxeven? . w10896) (fxdiv0-and-mod0 . w10895) (fxdiv0 . w10894) (fxdiv-and-mod . w10893) (fxdiv . w10892) (fxcopy-bit-field . w10891) (fxcopy-bit . w10890) (fxbit-set? . w10889) (fxbit-field . w10888) (fxbit-count . w10887) (fxarithmetic-shift-right . w10886) (fxarithmetic-shift-left . w10885) (fxarithmetic-shift . w10884) (fxand . w10883) (fx>? . w10882) (fx>=? . w10881) (fx=? . w10880) (fx<? . w10879) (fx<=? . w10878) (fx-/carry . w10877) (fx- . w10876) (fx+/carry . w10875) (fx+ . w10874) (fx*/carry . w10873) (fx* . w10872) (greatest-fixnum . w10871) (least-fixnum . w10870) (fixnum-width . w10869) (fixnum? . w10868)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11331 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . w10072) (no-infinities-violation? . w10051) (make-no-nans-violation . w10070) (make-no-infinities-violation . w10049) (real->flonum . w10958) (flzero? . w10957) (fltruncate . w10956) (fltan . w10955) (flsqrt . w10954) (flsin . w10953) (flround . w10952) (flpositive? . w10951) (flonum? . w10950) (flodd? . w10949) (flnumerator . w10948) (flnegative? . w10947) (flnan? . w10946) (flmod0 . w10945) (flmod . w10944) (flmin . w10943) (flmax . w10942) (fllog . w10941) (flinteger? . w10940) (flinfinite? . w10939) (flfloor . w10938) (flfinite? . w10937) (flexpt . w10936) (flexp . w10935) (fleven? . w10934) (fldiv0-and-mod0 . w10933) (fldiv0 . w10932) (fldiv-and-mod . w10931) (fldiv . w10930) (fldenominator . w10929) (flcos . w10928) (flceiling . w10927) (flatan . w10926) (flasin . w10925) (flacos . w10924) (flabs . w10923) (fl>? . w10922) (fl>=? . w10921) (fl=? . w10920) (fl<? . w10919) (fl<=? . w10918) (fl/ . w10917) (fl- . w10916) (fl+ . w10915) (fl* . w10914) (fixnum->flonum . w10913) (&no-nans . w10687) (&no-infinities . w10686)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11332 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . w11176) (string-ci-hash . w11175) (string-hash . w11174) (equal-hash . w11173) (hashtable-equivalence-function . w11172) (make-hashtable . w11171) (hashtable-hash-function . w11170) (make-eqv-hashtable . w11169) (make-eq-hashtable . w11168) (hashtable? . w11167) (hashtable-update! . w11166) (hashtable-size . w11165) (hashtable-set! . w11164) (hashtable-ref . w11163) (hashtable-mutable? . w11162) (hashtable-keys . w11161) (hashtable-entries . w11160) (hashtable-delete! . w11159) (hashtable-copy . w11158) (hashtable-contains? . w11157) (hashtable-clear! . w11156)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11333 '(rnrs io ports) '(6) '() '() '() '((eof-object? . w11140) (eof-object . w11139) (current-error-port . w11138) (current-output-port . w11137) (current-input-port . w11136) (output-port? . w11135) (input-port? . w11134) (utf-8-codec . w11133) (utf-16-codec . w11132) (transcoder-error-handling-mode . w11131) (transcoder-eol-style . w11130) (transcoder-codec . w11129) (transcoded-port . w11128) (textual-port? . w11127) (string->bytevector . w11126) (standard-output-port . w11125) (standard-input-port . w11124) (standard-error-port . w11123) (set-port-position! . w11122) (put-u8 . w11121) (put-string . w11120) (put-datum . w11119) (put-char . w11118) (put-bytevector . w11117) (port? . w11116) (port-transcoder . w11115) (port-position . w11114) (port-has-set-port-position!? . w11113) (port-has-port-position? . w11112) (port-eof? . w11111) (output-port-buffer-mode . w11110) (open-string-output-port . w11109) (open-string-input-port . w11108) (open-file-output-port . w11107) (open-file-input/output-port . w11106) (open-file-input-port . w11105) (open-bytevector-output-port . w11104) (open-bytevector-input-port . w11103) (native-transcoder . w11102) (native-eol-style . w11101) (make-transcoder . w11100) (latin-1-codec . w11099) (make-i/o-write-error . w9819) (make-i/o-read-error . w9798) (make-i/o-port-error . w9977) (make-i/o-invalid-position-error . w9841) (make-i/o-filename-error . w9867) (make-i/o-file-protection-error . w9892) (make-i/o-file-is-read-only-error . w9913) (make-i/o-file-does-not-exist-error . w9955) (make-i/o-file-already-exists-error . w9934) (make-i/o-error . w9777) (make-i/o-encoding-error . w10024) (make-i/o-decoding-error . w10002) (make-custom-textual-output-port . w11098) (make-custom-textual-input/output-port . w11097) (make-custom-textual-input-port . w11096) (make-custom-binary-output-port . w11095) (make-custom-binary-input/output-port . w11094) (make-custom-binary-input-port . w11093) (lookahead-u8 . w11091) (lookahead-char . w11090) (i/o-write-error? . w9821) (i/o-read-error? . w9800) (i/o-port-error? . w9981) (i/o-invalid-position-error? . w9845) (i/o-filename-error? . w9871) (i/o-file-protection-error? . w9894) (i/o-file-is-read-only-error? . w9915) (i/o-file-does-not-exist-error? . w9957) (i/o-file-already-exists-error? . w9936) (i/o-error? . w9779) (i/o-error-position . w9847) (i/o-error-port . w9983) (i/o-error-filename . w9873) (i/o-encoding-error? . w10028) (i/o-encoding-error-char . w10030) (i/o-decoding-error? . w10004) (get-u8 . w11089) (get-string-n! . w11088) (get-string-n . w11087) (get-string-all . w11086) (get-line . w11085) (get-datum . w11084) (get-char . w11083) (get-bytevector-some . w11082) (get-bytevector-n! . w11081) (get-bytevector-n . w11080) (get-bytevector-all . w11079) (flush-output-port . w11078) (close-port . w11077) (call-with-string-output-port . w11044) (call-with-port . w11043) (call-with-bytevector-output-port . w11042) (bytevector->string . w11041) (buffer-mode? . w11040) (binary-port? . w11039) (&i/o-encoding . w10685) (&i/o-decoding . w10684) (&i/o-port . w10683) (&i/o-file-does-not-exist . w10682) (&i/o-file-already-exists . w10681) (&i/o-file-is-read-only . w10680) (&i/o-file-protection . w10679) (&i/o-filename . w10678) (&i/o-invalid-position . w10677) (&i/o-write . w10676) (&i/o-read . w10675) (&i/o . w10674) (error-handling-mode . w10647) (file-options . w10646) (buffer-mode . w10645) (eol-style . w10644)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11334 '(rnrs enums) '(6) '() '() '() '((make-enumeration . w11035) (enum-set=? . w11034) (enum-set-universe . w11033) (enum-set-union . w11032) (enum-set-subset? . w11031) (enum-set-projection . w11030) (enum-set-member? . w11029) (enum-set-intersection . w11028) (enum-set-indexer . w11027) (enum-set-difference . w11026) (enum-set-constructor . w11025) (enum-set-complement . w11024) (enum-set->list . w11023) (define-enumeration . w10658)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11335 '(rnrs conditions) '(6) '() '() '() '((who-condition? . w9641) (warning? . w9507) (violation? . w9570) (undefined-violation? . w9758) (syntax-violation? . w9733) (syntax-violation-subform . w9737) (syntax-violation-form . w9735) (syntax-violation . w3006) (simple-conditions . w11022) (serious-condition? . w9528) (non-continuable-violation? . w9664) (message-condition? . w9484) (make-who-condition . w9637) (make-warning . w9505) (make-violation . w9568) (make-undefined-violation . w9756) (make-syntax-violation . w9727) (make-serious-condition . w9526) (make-non-continuable-violation . w9662) (make-message-condition . w9480) (make-lexical-violation . w9704) (make-irritants-condition . w9611) (make-implementation-restriction-violation . w9683) (make-error . w9547) (make-assertion-violation . w9589) (lexical-violation? . w9706) (irritants-condition? . w9615) (implementation-restriction-violation? . w9685) (error? . w9549) (condition-who . w9643) (condition-predicate . w11021) (condition-message . w9486) (condition-irritants . w9617) (condition-accessor . w11020) (condition . w11019) (assertion-violation? . w9591) (condition? . w11018) (&undefined . w10673) (&syntax . w10672) (&lexical . w10671) (&implementation-restriction . w10670) (&non-continuable . w10669) (&who . w10668) (&irritants . w10667) (&assertion . w10666) (&violation . w10665) (&error . w10664) (&serious . w10663) (&warning . w10662) (&message . w10661) (&condition . w10660) (define-condition-type . w10659)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11336 '(rnrs records inspection) '(6) '() '() '() '((record? . w11191) (record-type-uid . w11190) (record-type-sealed? . w11189) (record-type-parent . w11188) (record-type-opaque? . w11187) (record-type-name . w11186) (record-type-generative? . w11185) (record-type-field-names . w11184) (record-rtd . w11183) (record-field-mutable? . w11182)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11337 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . w11198) (record-predicate . w11197) (record-mutator . w11196) (record-constructor . w11195) (record-accessor . w11194) (make-record-type-descriptor . w11193) (make-record-constructor-descriptor . w11192)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11338 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . w10657) (parent-rtd . w10656) (nongenerative . w10655) (opaque . w10654) (sealed . w10653) (protocol . w10652) (parent . w10651) (immutable . w10650) (mutable . w10649) (fields . w10648) (record-constructor-descriptor . w10615) (record-type-descriptor . w10614)) '() values values '#f '#f '#t '#f) (w1801@w1454@install-library 'w11339 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . w10076) (&no-nans-rtd . w10074) (&no-infinities-rcd . w10055) (&no-infinities-rtd . w10053) (&i/o-encoding-rcd . w10034) (&i/o-encoding-rtd . w10032) (&i/o-decoding-rcd . w10008) (&i/o-decoding-rtd . w10006) (&i/o-port-rcd . w9987) (&i/o-port-rtd . w9985) (&i/o-file-does-not-exist-rcd . w9961) (&i/o-file-does-not-exist-rtd . w9959) (&i/o-file-already-exists-rcd . w9940) (&i/o-file-already-exists-rtd . w9938) (&i/o-file-is-read-only-rcd . w9919) (&i/o-file-is-read-only-rtd . w9917) (&i/o-file-protection-rcd . w9898) (&i/o-file-protection-rtd . w9896) (&i/o-filename-rcd . w9877) (&i/o-filename-rtd . w9875) (&i/o-invalid-position-rcd . w9851) (&i/o-invalid-position-rtd . w9849) (&i/o-write-rcd . w9825) (&i/o-write-rtd . w9823) (&i/o-read-rcd . w9804) (&i/o-read-rtd . w9802) (&i/o-rcd . w9783) (&i/o-rtd . w9781) (&undefined-rcd . w9762) (&undefined-rtd . w9760) (&syntax-rcd . w9741) (&syntax-rtd . w9739) (&lexical-rcd . w9710) (&lexical-rtd . w9708) (&implementation-restriction-rcd . w9689) (&implementation-restriction-rtd . w9687) (&non-continuable-rcd . w9668) (&non-continuable-rtd . w9666) (&who-rcd . w9647) (&who-rtd . w9645) (&irritants-rcd . w9621) (&irritants-rtd . w9619) (&assertion-rcd . w9595) (&assertion-rtd . w9593) (&violation-rcd . w9574) (&violation-rtd . w9572) (&error-rcd . w9553) (&error-rtd . w9551) (&serious-rcd . w9532) (&serious-rtd . w9530) (&warning-rcd . w9511) (&warning-rtd . w9509) (&message-rcd . w9490) (&message-rtd . w9488) (&condition-rcd . w9399) (&condition-rtd . w9397) (syntax-error . w3002) (syntax-dispatch . w2773) (pretty-print . w11307) (eval-core . w11306) (set-symbol-value! . w11305) (symbol-value . w11304) (gensym . w924) (void . w11303) (load . w10345) (interaction-environment . w3018) (char-ready? . w11302) (regexp? . w11301) (read-line . w11300) (ungensym . w11299) (alist->eq-hash-table . w11298) (assoc-ref . w11297) (print . w11296) (format . w11295) (host-os . w11294) (library-path . w1421) (standard-library-path . w11293) (file-newer? . w11292) (stat-mtime . w11291) (write-to-file . w11290) (file->list . w11289) (file->string . w11288) (digit->integer . w11287) (call-with-string-input-port . w11286) (call-with-string-io . w11285) (string-split . w11284) (bytevector-for-each . w11283) (string->regexp . w11282) (rxmatch . w11281) (regexp-replace-all . w11280) (hashtable-for-each . w11279) (call-process . w11278) (local-tz-offset . w11277) (microseconds . w11276) (readdir . w11275) (set-current-directory! . w11274) (expand-path . w11273) (current-directory . w11272) (%spawn . w11271) (%waitpid . w11270) (%ffi-supported? . w11269) (%ffi-pointer-ref . w11268) (%ffi-pointer->string . w11267) (%ffi-call->string-or-zero . w11266) (%ffi-call->double . w11265) (%ffi-call->void* . w11264) (%ffi-call->void . w11263) (%ffi-call->int . w11262) (%ffi-lookup . w11261) (%ffi-open . w11260) (%fork . w11259) (%pipe . w11258) (p . w11257) (open-output-string . w11256) (get-output-string . w11255) (get-environment-variables . w11254) (get-environment-variable . w11253) (get-timeofday . w11252) (get-command-line . w11251) (sys-display . w11250) (mosh-executable-path . w11249) (make-file-options . w11248) (source-info . w11247) (make-compiler-instruction . w11246) (make-instruction . w11245) (set-source-info! . w11244) (bignum? . w11243) (fast-equal? . w11242) (fasl-read . w11241) (fasl-write . w11240) (time-usage . w11239) (os-constant . w11238) (make-parameter . w952) (socket-port . w11237) (socket-shutdown . w11236) (socket-close . w11235) (socket-send . w11234) (socket-recv! . w11233) (socket-recv . w11232) (make-server-socket . w11231) (make-client-socket . w11230) (socket-accept . w11229) (socket? . w11228) (string-upcase . w11227) (string-titlecase . w11226) (string-normalize-nfkd . w11225) (string-normalize-nfkc . w11224) (string-normalize-nfd . w11223) (string-normalize-nfc . w11222) (string-foldcase . w11221) (string-downcase . w11220) (string-ci>? . w11219) (string-ci>=? . w11218) (string-ci=? . w11217) (string-ci<? . w11216) (string-ci<=? . w11215) (char-whitespace? . w11214) (char-upper-case? . w11213) (char-title-case? . w11212) (char-numeric? . w11211) (char-lower-case? . w11210) (char-general-category . w11209) (char-upcase . w11208) (char-titlecase . w11207) (char-foldcase . w11206) (char-downcase . w11205) (char-ci>? . w11204) (char-ci>=? . w11203) (char-ci=? . w11202) (char-ci<? . w11201) (char-ci<=? . w11200) (char-alphabetic? . w11199) (make-variable-transformer . w2332) (identifier? . w3008) (generate-temporaries . w2988) (free-identifier=? . w2990) (syntax->datum . w3012) (datum->syntax . w3010) (bound-identifier=? . w2992) (record-type-descriptor? . w11198) (record-predicate . w11197) (record-mutator . w11196) (record-constructor . w11195) (record-accessor . w11194) (make-record-type-descriptor . w11193) (make-record-constructor-descriptor . w11192) (record? . w11191) (record-type-uid . w11190) (record-type-sealed? . w11189) (record-type-parent . w11188) (record-type-opaque? . w11187) (record-type-name . w11186) (record-type-generative? . w11185) (record-type-field-names . w11184) (record-rtd . w11183) (record-field-mutable? . w11182) (delete-file . w11181) (file-exists? . w11180) (vector-sort! . w11179) (vector-sort . w11178) (list-sort . w11177) (symbol-hash . w11176) (string-ci-hash . w11175) (string-hash . w11174) (equal-hash . w11173) (hashtable-equivalence-function . w11172) (make-hashtable . w11171) (hashtable-hash-function . w11170) (make-eqv-hashtable . w11169) (make-eq-hashtable . w11168) (hashtable? . w11167) (hashtable-update! . w11166) (hashtable-size . w11165) (hashtable-set! . w11164) (hashtable-ref . w11163) (hashtable-mutable? . w11162) (hashtable-keys . w11161) (hashtable-entries . w11160) (hashtable-delete! . w11159) (hashtable-copy . w11158) (hashtable-contains? . w11157) (hashtable-clear! . w11156) (call-with-output-file . w11155) (call-with-input-file . w11154) (write-char . w11153) (write . w11152) (with-output-to-file . w11151) (with-input-from-file . w11150) (read-char . w11149) (read . w11148) (peek-char . w11147) (open-output-file . w11146) (open-input-file . w11145) (newline . w11144) (display . w11143) (close-output-port . w11142) (close-input-port . w11141) (eof-object? . w11140) (eof-object . w11139) (current-error-port . w11138) (current-output-port . w11137) (current-input-port . w11136) (output-port? . w11135) (input-port? . w11134) (utf-8-codec . w11133) (utf-16-codec . w11132) (transcoder-error-handling-mode . w11131) (transcoder-eol-style . w11130) (transcoder-codec . w11129) (transcoded-port . w11128) (textual-port? . w11127) (string->bytevector . w11126) (standard-output-port . w11125) (standard-input-port . w11124) (standard-error-port . w11123) (set-port-position! . w11122) (put-u8 . w11121) (put-string . w11120) (put-datum . w11119) (put-char . w11118) (put-bytevector . w11117) (port? . w11116) (port-transcoder . w11115) (port-position . w11114) (port-has-set-port-position!? . w11113) (port-has-port-position? . w11112) (port-eof? . w11111) (output-port-buffer-mode . w11110) (open-string-output-port . w11109) (open-string-input-port . w11108) (open-file-output-port . w11107) (open-file-input/output-port . w11106) (open-file-input-port . w11105) (open-bytevector-output-port . w11104) (open-bytevector-input-port . w11103) (native-transcoder . w11102) (native-eol-style . w11101) (make-transcoder . w11100) (latin-1-codec . w11099) (make-i/o-write-error . w9819) (make-i/o-read-error . w9798) (make-i/o-port-error . w9977) (make-i/o-invalid-position-error . w9841) (make-i/o-filename-error . w9867) (make-i/o-file-protection-error . w9892) (make-i/o-file-is-read-only-error . w9913) (make-i/o-file-does-not-exist-error . w9955) (make-i/o-file-already-exists-error . w9934) (make-i/o-error . w9777) (make-i/o-encoding-error . w10024) (make-i/o-decoding-error . w10002) (make-custom-textual-output-port . w11098) (make-custom-textual-input/output-port . w11097) (make-custom-textual-input-port . w11096) (make-custom-binary-output-port . w11095) (make-custom-binary-input/output-port . w11094) (make-custom-binary-input-port . w11093) (make-bytevector . w11092) (lookahead-u8 . w11091) (lookahead-char . w11090) (i/o-write-error? . w9821) (i/o-read-error? . w9800) (i/o-port-error? . w9981) (i/o-invalid-position-error? . w9845) (i/o-filename-error? . w9871) (i/o-file-protection-error? . w9894) (i/o-file-is-read-only-error? . w9915) (i/o-file-does-not-exist-error? . w9957) (i/o-file-already-exists-error? . w9936) (i/o-error? . w9779) (i/o-error-position . w9847) (i/o-error-port . w9983) (i/o-error-filename . w9873) (i/o-encoding-error? . w10028) (i/o-encoding-error-char . w10030) (i/o-decoding-error? . w10004) (get-u8 . w11089) (get-string-n! . w11088) (get-string-n . w11087) (get-string-all . w11086) (get-line . w11085) (get-datum . w11084) (get-char . w11083) (get-bytevector-some . w11082) (get-bytevector-n! . w11081) (get-bytevector-n . w11080) (get-bytevector-all . w11079) (flush-output-port . w11078) (close-port . w11077) (scheme-report-environment . w2970) (quotient . w11076) (null-environment . w2968) (remainder . w11075) (modulo . w11074) (inexact->exact . w11073) (force . w11072) (exact->inexact . w11071) (make-promise . w11070) (exit . w11069) (command-line . w10339) (string-fill! . w11068) (string-set! . w11067) (set-cdr! . w11066) (set-car! . w11065) (remove . w11064) (remv . w11063) (remp . w11062) (remq . w11061) (partition . w11060) (memv . w11059) (memq . w11058) (memp . w11057) (member . w11056) (exists . w11055) (for-all . w11054) (fold-right . w11053) (fold-left . w11052) (find . w11051) (filter . w11050) (cons* . w11049) (assv . w11048) (assq . w11047) (assp . w11046) (assoc . w11045) (call-with-string-output-port . w11044) (call-with-port . w11043) (call-with-bytevector-output-port . w11042) (bytevector->string . w11041) (buffer-mode? . w11040) (binary-port? . w11039) (with-exception-handler . w11038) (raise-continuable . w11037) (raise . w11036) (eval . w2974) (environment . w2966) (make-enumeration . w11035) (enum-set=? . w11034) (enum-set-universe . w11033) (enum-set-union . w11032) (enum-set-subset? . w11031) (enum-set-projection . w11030) (enum-set-member? . w11029) (enum-set-intersection . w11028) (enum-set-indexer . w11027) (enum-set-difference . w11026) (enum-set-constructor . w11025) (enum-set-complement . w11024) (enum-set->list . w11023) (who-condition? . w9641) (warning? . w9507) (violation? . w9570) (undefined-violation? . w9758) (syntax-violation? . w9733) (syntax-violation-subform . w9737) (syntax-violation-form . w9735) (syntax-violation . w3006) (simple-conditions . w11022) (serious-condition? . w9528) (non-continuable-violation? . w9664) (message-condition? . w9484) (make-who-condition . w9637) (make-warning . w9505) (make-violation . w9568) (make-undefined-violation . w9756) (make-syntax-violation . w9727) (make-serious-condition . w9526) (make-non-continuable-violation . w9662) (make-message-condition . w9480) (make-lexical-violation . w9704) (make-irritants-condition . w9611) (make-implementation-restriction-violation . w9683) (make-error . w9547) (make-assertion-violation . w9589) (lexical-violation? . w9706) (irritants-condition? . w9615) (implementation-restriction-violation? . w9685) (error? . w9549) (condition-who . w9643) (condition-predicate . w11021) (condition-message . w9486) (condition-irritants . w9617) (condition-accessor . w11020) (condition . w11019) (assertion-violation? . w9591) (condition? . w11018) (utf32->string . w11017) (utf16->string . w11016) (utf8->string . w11015) (uint-list->bytevector . w11014) (u8-list->bytevector . w11013) (string->utf8 . w11012) (string->utf32 . w11011) (string->utf16 . w11010) (sint-list->bytevector . w11009) (native-endianness . w11008) (bytevector? . w11007) (bytevector=? . w11006) (bytevector-uint-set! . w11005) (bytevector-uint-ref . w11004) (bytevector-u8-set! . w11003) (bytevector-u8-ref . w11002) (bytevector-u64-set! . w11001) (bytevector-u64-ref . w11000) (bytevector-u64-native-set! . w10999) (bytevector-u64-native-ref . w10998) (bytevector-u32-set! . w10997) (bytevector-u32-ref . w10996) (bytevector-u32-native-set! . w10995) (bytevector-u32-native-ref . w10994) (bytevector-u16-set! . w10993) (bytevector-u16-ref . w10992) (bytevector-u16-native-set! . w10991) (bytevector-u16-native-ref . w10990) (bytevector-sint-set! . w10989) (bytevector-sint-ref . w10988) (bytevector-s8-set! . w10987) (bytevector-s8-ref . w10986) (bytevector-s64-set! . w10985) (bytevector-s64-ref . w10984) (bytevector-s64-native-set! . w10983) (bytevector-s64-native-ref . w10982) (bytevector-s32-set! . w10981) (bytevector-s32-ref . w10980) (bytevector-s32-native-set! . w10979) (bytevector-s32-native-ref . w10978) (bytevector-s16-set! . w10977) (bytevector-s16-ref . w10976) (bytevector-s16-native-set! . w10975) (bytevector-s16-native-ref . w10974) (bytevector-length . w10973) (bytevector-ieee-single-ref . w10972) (bytevector-ieee-single-set! . w10971) (bytevector-ieee-single-native-set! . w10970) (bytevector-ieee-single-native-ref . w10969) (bytevector-ieee-double-set! . w10968) (bytevector-ieee-double-ref . w10967) (bytevector-ieee-double-native-set! . w10966) (bytevector-ieee-double-native-ref . w10965) (bytevector-fill! . w10964) (bytevector-copy! . w10963) (bytevector-copy . w10962) (bytevector->uint-list . w10961) (bytevector->u8-list . w10960) (bytevector->sint-list . w10959) (no-nans-violation? . w10072) (no-infinities-violation? . w10051) (make-no-nans-violation . w10070) (make-no-infinities-violation . w10049) (real->flonum . w10958) (flzero? . w10957) (fltruncate . w10956) (fltan . w10955) (flsqrt . w10954) (flsin . w10953) (flround . w10952) (flpositive? . w10951) (flonum? . w10950) (flodd? . w10949) (flnumerator . w10948) (flnegative? . w10947) (flnan? . w10946) (flmod0 . w10945) (flmod . w10944) (flmin . w10943) (flmax . w10942) (fllog . w10941) (flinteger? . w10940) (flinfinite? . w10939) (flfloor . w10938) (flfinite? . w10937) (flexpt . w10936) (flexp . w10935) (fleven? . w10934) (fldiv0-and-mod0 . w10933) (fldiv0 . w10932) (fldiv-and-mod . w10931) (fldiv . w10930) (fldenominator . w10929) (flcos . w10928) (flceiling . w10927) (flatan . w10926) (flasin . w10925) (flacos . w10924) (flabs . w10923) (fl>? . w10922) (fl>=? . w10921) (fl=? . w10920) (fl<? . w10919) (fl<=? . w10918) (fl/ . w10917) (fl- . w10916) (fl+ . w10915) (fl* . w10914) (fixnum->flonum . w10913) (fxzero? . w10912) (fxxor . w10911) (fxrotate-bit-field . w10910) (fxreverse-bit-field . w10909) (fxpositive? . w10908) (fxodd? . w10907) (fxnot . w10906) (fxnegative? . w10905) (fxmod0 . w10904) (fxmod . w10903) (fxmin . w10902) (fxmax . w10901) (fxlength . w10900) (fxior . w10899) (fxif . w10898) (fxfirst-bit-set . w10897) (fxeven? . w10896) (fxdiv0-and-mod0 . w10895) (fxdiv0 . w10894) (fxdiv-and-mod . w10893) (fxdiv . w10892) (fxcopy-bit-field . w10891) (fxcopy-bit . w10890) (fxbit-set? . w10889) (fxbit-field . w10888) (fxbit-count . w10887) (fxarithmetic-shift-right . w10886) (fxarithmetic-shift-left . w10885) (fxarithmetic-shift . w10884) (fxand . w10883) (fx>? . w10882) (fx>=? . w10881) (fx=? . w10880) (fx<? . w10879) (fx<=? . w10878) (fx-/carry . w10877) (fx- . w10876) (fx+/carry . w10875) (fx+ . w10874) (fx*/carry . w10873) (fx* . w10872) (greatest-fixnum . w10871) (least-fixnum . w10870) (fixnum-width . w10869) (fixnum? . w10868) (bitwise-rotate-bit-field . w10867) (bitwise-reverse-bit-field . w10866) (bitwise-length . w10865) (bitwise-if . w10864) (bitwise-first-bit-set . w10863) (bitwise-copy-bit-field . w10862) (bitwise-copy-bit . w10861) (bitwise-bit-set? . w10860) (bitwise-bit-field . w10859) (bitwise-bit-count . w10858) (bitwise-xor . w10857) (bitwise-ior . w10856) (bitwise-and . w10855) (bitwise-not . w10854) (bitwise-arithmetic-shift-right . w10853) (bitwise-arithmetic-shift-left . w10852) (bitwise-arithmetic-shift . w10851) (zero? . w10850) (vector? . w10849) (vector-set! . w10848) (vector-ref . w10847) (vector-map . w10846) (vector-length . w10845) (vector-for-each . w10844) (vector-fill! . w10843) (vector->list . w10842) (vector . w10841) (values . w10840) (truncate . w10839) (tan . w10838) (symbol? . w10837) (symbol=? . w10836) (symbol->string . w10835) (substring . w10834) (string? . w10833) (string>? . w10832) (string>=? . w10831) (string=? . w10830) (string<? . w10829) (string<=? . w10828) (string-ref . w10827) (string-length . w10826) (string-for-each . w10825) (string-copy . w10824) (string-append . w10823) (string->symbol . w10822) (string->number . w10821) (string->list . w10820) (string . w10819) (sqrt . w10818) (sin . w10817) (round . w10816) (reverse . w10815) (real? . w10814) (real-valued? . w10813) (real-part . w10812) (rationalize . w10811) (rational? . w10810) (rational-valued? . w10809) (procedure? . w10808) (positive? . w10807) (pair? . w10806) (odd? . w10805) (numerator . w10804) (number? . w10803) (number->string . w10802) (null? . w10801) (not . w10800) (negative? . w10799) (nan? . w10798) (min . w10797) (max . w10796) (map . w10795) (make-vector . w10794) (make-string . w10793) (make-rectangular . w10792) (make-polar . w10791) (magnitude . w10790) (log . w10789) (list? . w10788) (list-tail . w10787) (list-ref . w10786) (list->vector . w10785) (list->string . w10784) (list . w10783) (length . w10782) (lcm . w10781) (integer? . w10780) (integer-valued? . w10779) (integer->char . w10778) (infinite? . w10777) (inexact? . w10776) (inexact . w10775) (imag-part . w10774) (gcd . w10773) (for-each . w10772) (floor . w10771) (finite? . w10770) (expt . w10769) (exp . w10768) (exact? . w10767) (exact-integer-sqrt . w10766) (exact . w10765) (even? . w10764) (error . w10763) (eqv? . w10762) (equal? . w10761) (eq? . w10760) (dynamic-wind . w10759) (div0-and-mod0 . w10758) (mod0 . w10757) (div0 . w10756) (div-and-mod . w10755) (mod . w10754) (div . w10753) (denominator . w10752) (cos . w10751) (cons . w10750) (complex? . w10749) (char? . w10748) (char>? . w10747) (char>=? . w10746) (char=? . w10745) (char<? . w10744) (char<=? . w10743) (char->integer . w10742) (ceiling . w10741) (call-with-values . w10740) (call/cc . w10739) (call-with-current-continuation . w10738) (cddddr . w10737) (cdddar . w10736) (cddadr . w10735) (cddaar . w10734) (cdaddr . w10733) (cdadar . w10732) (cdaadr . w10731) (cdaaar . w10730) (cadddr . w10729) (caddar . w10728) (cadadr . w10727) (cadaar . w10726) (caaddr . w10725) (caadar . w10724) (caaadr . w10723) (caaaar . w10722) (cdddr . w10721) (cddar . w10720) (cdadr . w10719) (cdaar . w10718) (caddr . w10717) (cadar . w10716) (caadr . w10715) (caaar . w10714) (cddr . w10713) (cdar . w10712) (cadr . w10711) (caar . w10710) (cdr . w10709) (car . w10708) (boolean? . w10707) (boolean=? . w10706) (atan . w10705) (assertion-violation . w10704) (assertion-error . w3000) (asin . w10703) (apply . w10702) (append . w10701) (angle . w10700) (acos . w10699) (abs . w10698) (/ . w10697) (* . w10696) (- . w10695) (+ . w10694) (>= . w10693) (> . w10692) (= . w10691) (<= . w10690) (< . w10689) (library . w10688) (&no-nans . w10687) (&no-infinities . w10686) (&i/o-encoding . w10685) (&i/o-decoding . w10684) (&i/o-port . w10683) (&i/o-file-does-not-exist . w10682) (&i/o-file-already-exists . w10681) (&i/o-file-is-read-only . w10680) (&i/o-file-protection . w10679) (&i/o-filename . w10678) (&i/o-invalid-position . w10677) (&i/o-write . w10676) (&i/o-read . w10675) (&i/o . w10674) (&undefined . w10673) (&syntax . w10672) (&lexical . w10671) (&implementation-restriction . w10670) (&non-continuable . w10669) (&who . w10668) (&irritants . w10667) (&assertion . w10666) (&violation . w10665) (&error . w10664) (&serious . w10663) (&warning . w10662) (&message . w10661) (&condition . w10660) (define-condition-type . w10659) (define-enumeration . w10658) (define-record-type . w10657) (parent-rtd . w10656) (nongenerative . w10655) (opaque . w10654) (sealed . w10653) (protocol . w10652) (parent . w10651) (immutable . w10650) (mutable . w10649) (fields . w10648) (error-handling-mode . w10647) (file-options . w10646) (buffer-mode . w10645) (eol-style . w10644) (guard . w10643) (trace-define . w10642) (trace-lambda . w10641) (unsyntax-splicing . w10640) (unsyntax . w10639) (unquote-splicing . w10638) (unquote . w10637) (_ . w10636) (else . w10635) (=> . w10634) (... . w10633) (assert . w10632) (endianness . w10631) (delay . w10630) (time . w10629) (do . w10628) (cond . w10627) (let* . w10626) (let . w10625) (let*-values . w10624) (let-values . w10623) (identifier-syntax . w10622) (with-syntax . w10621) (quasisyntax . w10620) (quasiquote . w10619) (syntax-rules . w10618) (include . w10617) (define-struct . w10616) (record-constructor-descriptor . w10615) (record-type-descriptor . w10614) (case . w10613) (parameterize . w10612) (unless . w10611) (when . w10610) (or . w10609) (and . w10608) (if . w10607) (letrec* . w10606) (letrec . w10605) (type-descriptor . w10604) (case-lambda . w10603) (lambda . w10602) (syntax . w10601) (syntax-case . w10600) (quote . w10599) (foreign-call . w10598) (letrec-syntax . w10597) (let-syntax . w10596) (set! . w10595) (import . w10594) (begin . w10593) (module . w10592) (define-syntax . w10591) (define . w10590)) '((w10076 core-prim . &no-nans-rcd) (w10074 core-prim . &no-nans-rtd) (w10055 core-prim . &no-infinities-rcd) (w10053 core-prim . &no-infinities-rtd) (w10034 core-prim . &i/o-encoding-rcd) (w10032 core-prim . &i/o-encoding-rtd) (w10008 core-prim . &i/o-decoding-rcd) (w10006 core-prim . &i/o-decoding-rtd) (w9987 core-prim . &i/o-port-rcd) (w9985 core-prim . &i/o-port-rtd) (w9961 core-prim . &i/o-file-does-not-exist-rcd) (w9959 core-prim . &i/o-file-does-not-exist-rtd) (w9940 core-prim . &i/o-file-already-exists-rcd) (w9938 core-prim . &i/o-file-already-exists-rtd) (w9919 core-prim . &i/o-file-is-read-only-rcd) (w9917 core-prim . &i/o-file-is-read-only-rtd) (w9898 core-prim . &i/o-file-protection-rcd) (w9896 core-prim . &i/o-file-protection-rtd) (w9877 core-prim . &i/o-filename-rcd) (w9875 core-prim . &i/o-filename-rtd) (w9851 core-prim . &i/o-invalid-position-rcd) (w9849 core-prim . &i/o-invalid-position-rtd) (w9825 core-prim . &i/o-write-rcd) (w9823 core-prim . &i/o-write-rtd) (w9804 core-prim . &i/o-read-rcd) (w9802 core-prim . &i/o-read-rtd) (w9783 core-prim . &i/o-rcd) (w9781 core-prim . &i/o-rtd) (w9762 core-prim . &undefined-rcd) (w9760 core-prim . &undefined-rtd) (w9741 core-prim . &syntax-rcd) (w9739 core-prim . &syntax-rtd) (w9710 core-prim . &lexical-rcd) (w9708 core-prim . &lexical-rtd) (w9689 core-prim . &implementation-restriction-rcd) (w9687 core-prim . &implementation-restriction-rtd) (w9668 core-prim . &non-continuable-rcd) (w9666 core-prim . &non-continuable-rtd) (w9647 core-prim . &who-rcd) (w9645 core-prim . &who-rtd) (w9621 core-prim . &irritants-rcd) (w9619 core-prim . &irritants-rtd) (w9595 core-prim . &assertion-rcd) (w9593 core-prim . &assertion-rtd) (w9574 core-prim . &violation-rcd) (w9572 core-prim . &violation-rtd) (w9553 core-prim . &error-rcd) (w9551 core-prim . &error-rtd) (w9532 core-prim . &serious-rcd) (w9530 core-prim . &serious-rtd) (w9511 core-prim . &warning-rcd) (w9509 core-prim . &warning-rtd) (w9490 core-prim . &message-rcd) (w9488 core-prim . &message-rtd) (w9399 core-prim . &condition-rcd) (w9397 core-prim . &condition-rtd) (w3002 core-prim . syntax-error) (w2773 core-prim . syntax-dispatch) (w11307 core-prim . pretty-print) (w11306 core-prim . eval-core) (w11305 core-prim . set-symbol-value!) (w11304 core-prim . symbol-value) (w924 core-prim . gensym) (w11303 core-prim . void) (w10345 core-prim . load) (w3018 core-prim . interaction-environment) (w11302 core-prim . char-ready?) (w11301 core-prim . regexp?) (w11300 core-prim . read-line) (w11299 core-prim . ungensym) (w11298 core-prim . alist->eq-hash-table) (w11297 core-prim . assoc-ref) (w11296 core-prim . print) (w11295 core-prim . format) (w11294 core-prim . host-os) (w1421 core-prim . library-path) (w11293 core-prim . standard-library-path) (w11292 core-prim . file-newer?) (w11291 core-prim . stat-mtime) (w11290 core-prim . write-to-file) (w11289 core-prim . file->list) (w11288 core-prim . file->string) (w11287 core-prim . digit->integer) (w11286 core-prim . call-with-string-input-port) (w11285 core-prim . call-with-string-io) (w11284 core-prim . string-split) (w11283 core-prim . bytevector-for-each) (w11282 core-prim . string->regexp) (w11281 core-prim . rxmatch) (w11280 core-prim . regexp-replace-all) (w11279 core-prim . hashtable-for-each) (w11278 core-prim . call-process) (w11277 core-prim . local-tz-offset) (w11276 core-prim . microseconds) (w11275 core-prim . readdir) (w11274 core-prim . set-current-directory!) (w11273 core-prim . expand-path) (w11272 core-prim . current-directory) (w11271 core-prim . %spawn) (w11270 core-prim . %waitpid) (w11269 core-prim . %ffi-supported?) (w11268 core-prim . %ffi-pointer-ref) (w11267 core-prim . %ffi-pointer->string) (w11266 core-prim . %ffi-call->string-or-zero) (w11265 core-prim . %ffi-call->double) (w11264 core-prim . %ffi-call->void*) (w11263 core-prim . %ffi-call->void) (w11262 core-prim . %ffi-call->int) (w11261 core-prim . %ffi-lookup) (w11260 core-prim . %ffi-open) (w11259 core-prim . %fork) (w11258 core-prim . %pipe) (w11257 core-prim . p) (w11256 core-prim . open-output-string) (w11255 core-prim . get-output-string) (w11254 core-prim . get-environment-variables) (w11253 core-prim . get-environment-variable) (w11252 core-prim . get-timeofday) (w11251 core-prim . get-command-line) (w11250 core-prim . sys-display) (w11249 core-prim . mosh-executable-path) (w11248 core-prim . make-file-options) (w11247 core-prim . source-info) (w11246 core-prim . make-compiler-instruction) (w11245 core-prim . make-instruction) (w11244 core-prim . set-source-info!) (w11243 core-prim . bignum?) (w11242 core-prim . fast-equal?) (w11241 core-prim . fasl-read) (w11240 core-prim . fasl-write) (w11239 core-prim . time-usage) (w11238 core-prim . os-constant) (w952 core-prim . make-parameter) (w11237 core-prim . socket-port) (w11236 core-prim . socket-shutdown) (w11235 core-prim . socket-close) (w11234 core-prim . socket-send) (w11233 core-prim . socket-recv!) (w11232 core-prim . socket-recv) (w11231 core-prim . make-server-socket) (w11230 core-prim . make-client-socket) (w11229 core-prim . socket-accept) (w11228 core-prim . socket?) (w11227 core-prim . string-upcase) (w11226 core-prim . string-titlecase) (w11225 core-prim . string-normalize-nfkd) (w11224 core-prim . string-normalize-nfkc) (w11223 core-prim . string-normalize-nfd) (w11222 core-prim . string-normalize-nfc) (w11221 core-prim . string-foldcase) (w11220 core-prim . string-downcase) (w11219 core-prim . string-ci>?) (w11218 core-prim . string-ci>=?) (w11217 core-prim . string-ci=?) (w11216 core-prim . string-ci<?) (w11215 core-prim . string-ci<=?) (w11214 core-prim . char-whitespace?) (w11213 core-prim . char-upper-case?) (w11212 core-prim . char-title-case?) (w11211 core-prim . char-numeric?) (w11210 core-prim . char-lower-case?) (w11209 core-prim . char-general-category) (w11208 core-prim . char-upcase) (w11207 core-prim . char-titlecase) (w11206 core-prim . char-foldcase) (w11205 core-prim . char-downcase) (w11204 core-prim . char-ci>?) (w11203 core-prim . char-ci>=?) (w11202 core-prim . char-ci=?) (w11201 core-prim . char-ci<?) (w11200 core-prim . char-ci<=?) (w11199 core-prim . char-alphabetic?) (w2332 core-prim . make-variable-transformer) (w3008 core-prim . identifier?) (w2988 core-prim . generate-temporaries) (w2990 core-prim . free-identifier=?) (w3012 core-prim . syntax->datum) (w3010 core-prim . datum->syntax) (w2992 core-prim . bound-identifier=?) (w11198 core-prim . record-type-descriptor?) (w11197 core-prim . record-predicate) (w11196 core-prim . record-mutator) (w11195 core-prim . record-constructor) (w11194 core-prim . record-accessor) (w11193 core-prim . make-record-type-descriptor) (w11192 core-prim . make-record-constructor-descriptor) (w11191 core-prim . record?) (w11190 core-prim . record-type-uid) (w11189 core-prim . record-type-sealed?) (w11188 core-prim . record-type-parent) (w11187 core-prim . record-type-opaque?) (w11186 core-prim . record-type-name) (w11185 core-prim . record-type-generative?) (w11184 core-prim . record-type-field-names) (w11183 core-prim . record-rtd) (w11182 core-prim . record-field-mutable?) (w11181 core-prim . delete-file) (w11180 core-prim . file-exists?) (w11179 core-prim . vector-sort!) (w11178 core-prim . vector-sort) (w11177 core-prim . list-sort) (w11176 core-prim . symbol-hash) (w11175 core-prim . string-ci-hash) (w11174 core-prim . string-hash) (w11173 core-prim . equal-hash) (w11172 core-prim . hashtable-equivalence-function) (w11171 core-prim . make-hashtable) (w11170 core-prim . hashtable-hash-function) (w11169 core-prim . make-eqv-hashtable) (w11168 core-prim . make-eq-hashtable) (w11167 core-prim . hashtable?) (w11166 core-prim . hashtable-update!) (w11165 core-prim . hashtable-size) (w11164 core-prim . hashtable-set!) (w11163 core-prim . hashtable-ref) (w11162 core-prim . hashtable-mutable?) (w11161 core-prim . hashtable-keys) (w11160 core-prim . hashtable-entries) (w11159 core-prim . hashtable-delete!) (w11158 core-prim . hashtable-copy) (w11157 core-prim . hashtable-contains?) (w11156 core-prim . hashtable-clear!) (w11155 core-prim . call-with-output-file) (w11154 core-prim . call-with-input-file) (w11153 core-prim . write-char) (w11152 core-prim . write) (w11151 core-prim . with-output-to-file) (w11150 core-prim . with-input-from-file) (w11149 core-prim . read-char) (w11148 core-prim . read) (w11147 core-prim . peek-char) (w11146 core-prim . open-output-file) (w11145 core-prim . open-input-file) (w11144 core-prim . newline) (w11143 core-prim . display) (w11142 core-prim . close-output-port) (w11141 core-prim . close-input-port) (w11140 core-prim . eof-object?) (w11139 core-prim . eof-object) (w11138 core-prim . current-error-port) (w11137 core-prim . current-output-port) (w11136 core-prim . current-input-port) (w11135 core-prim . output-port?) (w11134 core-prim . input-port?) (w11133 core-prim . utf-8-codec) (w11132 core-prim . utf-16-codec) (w11131 core-prim . transcoder-error-handling-mode) (w11130 core-prim . transcoder-eol-style) (w11129 core-prim . transcoder-codec) (w11128 core-prim . transcoded-port) (w11127 core-prim . textual-port?) (w11126 core-prim . string->bytevector) (w11125 core-prim . standard-output-port) (w11124 core-prim . standard-input-port) (w11123 core-prim . standard-error-port) (w11122 core-prim . set-port-position!) (w11121 core-prim . put-u8) (w11120 core-prim . put-string) (w11119 core-prim . put-datum) (w11118 core-prim . put-char) (w11117 core-prim . put-bytevector) (w11116 core-prim . port?) (w11115 core-prim . port-transcoder) (w11114 core-prim . port-position) (w11113 core-prim . port-has-set-port-position!?) (w11112 core-prim . port-has-port-position?) (w11111 core-prim . port-eof?) (w11110 core-prim . output-port-buffer-mode) (w11109 core-prim . open-string-output-port) (w11108 core-prim . open-string-input-port) (w11107 core-prim . open-file-output-port) (w11106 core-prim . open-file-input/output-port) (w11105 core-prim . open-file-input-port) (w11104 core-prim . open-bytevector-output-port) (w11103 core-prim . open-bytevector-input-port) (w11102 core-prim . native-transcoder) (w11101 core-prim . native-eol-style) (w11100 core-prim . make-transcoder) (w11099 core-prim . latin-1-codec) (w9819 core-prim . make-i/o-write-error) (w9798 core-prim . make-i/o-read-error) (w9977 core-prim . make-i/o-port-error) (w9841 core-prim . make-i/o-invalid-position-error) (w9867 core-prim . make-i/o-filename-error) (w9892 core-prim . make-i/o-file-protection-error) (w9913 core-prim . make-i/o-file-is-read-only-error) (w9955 core-prim . make-i/o-file-does-not-exist-error) (w9934 core-prim . make-i/o-file-already-exists-error) (w9777 core-prim . make-i/o-error) (w10024 core-prim . make-i/o-encoding-error) (w10002 core-prim . make-i/o-decoding-error) (w11098 core-prim . make-custom-textual-output-port) (w11097 core-prim . make-custom-textual-input/output-port) (w11096 core-prim . make-custom-textual-input-port) (w11095 core-prim . make-custom-binary-output-port) (w11094 core-prim . make-custom-binary-input/output-port) (w11093 core-prim . make-custom-binary-input-port) (w11092 core-prim . make-bytevector) (w11091 core-prim . lookahead-u8) (w11090 core-prim . lookahead-char) (w9821 core-prim . i/o-write-error?) (w9800 core-prim . i/o-read-error?) (w9981 core-prim . i/o-port-error?) (w9845 core-prim . i/o-invalid-position-error?) (w9871 core-prim . i/o-filename-error?) (w9894 core-prim . i/o-file-protection-error?) (w9915 core-prim . i/o-file-is-read-only-error?) (w9957 core-prim . i/o-file-does-not-exist-error?) (w9936 core-prim . i/o-file-already-exists-error?) (w9779 core-prim . i/o-error?) (w9847 core-prim . i/o-error-position) (w9983 core-prim . i/o-error-port) (w9873 core-prim . i/o-error-filename) (w10028 core-prim . i/o-encoding-error?) (w10030 core-prim . i/o-encoding-error-char) (w10004 core-prim . i/o-decoding-error?) (w11089 core-prim . get-u8) (w11088 core-prim . get-string-n!) (w11087 core-prim . get-string-n) (w11086 core-prim . get-string-all) (w11085 core-prim . get-line) (w11084 core-prim . get-datum) (w11083 core-prim . get-char) (w11082 core-prim . get-bytevector-some) (w11081 core-prim . get-bytevector-n!) (w11080 core-prim . get-bytevector-n) (w11079 core-prim . get-bytevector-all) (w11078 core-prim . flush-output-port) (w11077 core-prim . close-port) (w2970 core-prim . scheme-report-environment) (w11076 core-prim . quotient) (w2968 core-prim . null-environment) (w11075 core-prim . remainder) (w11074 core-prim . modulo) (w11073 core-prim . inexact->exact) (w11072 core-prim . force) (w11071 core-prim . exact->inexact) (w11070 core-prim . make-promise) (w11069 core-prim . exit) (w10339 core-prim . command-line) (w11068 core-prim . string-fill!) (w11067 core-prim . string-set!) (w11066 core-prim . set-cdr!) (w11065 core-prim . set-car!) (w11064 core-prim . remove) (w11063 core-prim . remv) (w11062 core-prim . remp) (w11061 core-prim . remq) (w11060 core-prim . partition) (w11059 core-prim . memv) (w11058 core-prim . memq) (w11057 core-prim . memp) (w11056 core-prim . member) (w11055 core-prim . exists) (w11054 core-prim . for-all) (w11053 core-prim . fold-right) (w11052 core-prim . fold-left) (w11051 core-prim . find) (w11050 core-prim . filter) (w11049 core-prim . cons*) (w11048 core-prim . assv) (w11047 core-prim . assq) (w11046 core-prim . assp) (w11045 core-prim . assoc) (w11044 core-prim . call-with-string-output-port) (w11043 core-prim . call-with-port) (w11042 core-prim . call-with-bytevector-output-port) (w11041 core-prim . bytevector->string) (w11040 core-prim . buffer-mode?) (w11039 core-prim . binary-port?) (w11038 core-prim . with-exception-handler) (w11037 core-prim . raise-continuable) (w11036 core-prim . raise) (w2974 core-prim . eval) (w2966 core-prim . environment) (w11035 core-prim . make-enumeration) (w11034 core-prim . enum-set=?) (w11033 core-prim . enum-set-universe) (w11032 core-prim . enum-set-union) (w11031 core-prim . enum-set-subset?) (w11030 core-prim . enum-set-projection) (w11029 core-prim . enum-set-member?) (w11028 core-prim . enum-set-intersection) (w11027 core-prim . enum-set-indexer) (w11026 core-prim . enum-set-difference) (w11025 core-prim . enum-set-constructor) (w11024 core-prim . enum-set-complement) (w11023 core-prim . enum-set->list) (w9641 core-prim . who-condition?) (w9507 core-prim . warning?) (w9570 core-prim . violation?) (w9758 core-prim . undefined-violation?) (w9733 core-prim . syntax-violation?) (w9737 core-prim . syntax-violation-subform) (w9735 core-prim . syntax-violation-form) (w3006 core-prim . syntax-violation) (w11022 core-prim . simple-conditions) (w9528 core-prim . serious-condition?) (w9664 core-prim . non-continuable-violation?) (w9484 core-prim . message-condition?) (w9637 core-prim . make-who-condition) (w9505 core-prim . make-warning) (w9568 core-prim . make-violation) (w9756 core-prim . make-undefined-violation) (w9727 core-prim . make-syntax-violation) (w9526 core-prim . make-serious-condition) (w9662 core-prim . make-non-continuable-violation) (w9480 core-prim . make-message-condition) (w9704 core-prim . make-lexical-violation) (w9611 core-prim . make-irritants-condition) (w9683 core-prim . make-implementation-restriction-violation) (w9547 core-prim . make-error) (w9589 core-prim . make-assertion-violation) (w9706 core-prim . lexical-violation?) (w9615 core-prim . irritants-condition?) (w9685 core-prim . implementation-restriction-violation?) (w9549 core-prim . error?) (w9643 core-prim . condition-who) (w11021 core-prim . condition-predicate) (w9486 core-prim . condition-message) (w9617 core-prim . condition-irritants) (w11020 core-prim . condition-accessor) (w11019 core-prim . condition) (w9591 core-prim . assertion-violation?) (w11018 core-prim . condition?) (w11017 core-prim . utf32->string) (w11016 core-prim . utf16->string) (w11015 core-prim . utf8->string) (w11014 core-prim . uint-list->bytevector) (w11013 core-prim . u8-list->bytevector) (w11012 core-prim . string->utf8) (w11011 core-prim . string->utf32) (w11010 core-prim . string->utf16) (w11009 core-prim . sint-list->bytevector) (w11008 core-prim . native-endianness) (w11007 core-prim . bytevector?) (w11006 core-prim . bytevector=?) (w11005 core-prim . bytevector-uint-set!) (w11004 core-prim . bytevector-uint-ref) (w11003 core-prim . bytevector-u8-set!) (w11002 core-prim . bytevector-u8-ref) (w11001 core-prim . bytevector-u64-set!) (w11000 core-prim . bytevector-u64-ref) (w10999 core-prim . bytevector-u64-native-set!) (w10998 core-prim . bytevector-u64-native-ref) (w10997 core-prim . bytevector-u32-set!) (w10996 core-prim . bytevector-u32-ref) (w10995 core-prim . bytevector-u32-native-set!) (w10994 core-prim . bytevector-u32-native-ref) (w10993 core-prim . bytevector-u16-set!) (w10992 core-prim . bytevector-u16-ref) (w10991 core-prim . bytevector-u16-native-set!) (w10990 core-prim . bytevector-u16-native-ref) (w10989 core-prim . bytevector-sint-set!) (w10988 core-prim . bytevector-sint-ref) (w10987 core-prim . bytevector-s8-set!) (w10986 core-prim . bytevector-s8-ref) (w10985 core-prim . bytevector-s64-set!) (w10984 core-prim . bytevector-s64-ref) (w10983 core-prim . bytevector-s64-native-set!) (w10982 core-prim . bytevector-s64-native-ref) (w10981 core-prim . bytevector-s32-set!) (w10980 core-prim . bytevector-s32-ref) (w10979 core-prim . bytevector-s32-native-set!) (w10978 core-prim . bytevector-s32-native-ref) (w10977 core-prim . bytevector-s16-set!) (w10976 core-prim . bytevector-s16-ref) (w10975 core-prim . bytevector-s16-native-set!) (w10974 core-prim . bytevector-s16-native-ref) (w10973 core-prim . bytevector-length) (w10972 core-prim . bytevector-ieee-single-ref) (w10971 core-prim . bytevector-ieee-single-set!) (w10970 core-prim . bytevector-ieee-single-native-set!) (w10969 core-prim . bytevector-ieee-single-native-ref) (w10968 core-prim . bytevector-ieee-double-set!) (w10967 core-prim . bytevector-ieee-double-ref) (w10966 core-prim . bytevector-ieee-double-native-set!) (w10965 core-prim . bytevector-ieee-double-native-ref) (w10964 core-prim . bytevector-fill!) (w10963 core-prim . bytevector-copy!) (w10962 core-prim . bytevector-copy) (w10961 core-prim . bytevector->uint-list) (w10960 core-prim . bytevector->u8-list) (w10959 core-prim . bytevector->sint-list) (w10072 core-prim . no-nans-violation?) (w10051 core-prim . no-infinities-violation?) (w10070 core-prim . make-no-nans-violation) (w10049 core-prim . make-no-infinities-violation) (w10958 core-prim . real->flonum) (w10957 core-prim . flzero?) (w10956 core-prim . fltruncate) (w10955 core-prim . fltan) (w10954 core-prim . flsqrt) (w10953 core-prim . flsin) (w10952 core-prim . flround) (w10951 core-prim . flpositive?) (w10950 core-prim . flonum?) (w10949 core-prim . flodd?) (w10948 core-prim . flnumerator) (w10947 core-prim . flnegative?) (w10946 core-prim . flnan?) (w10945 core-prim . flmod0) (w10944 core-prim . flmod) (w10943 core-prim . flmin) (w10942 core-prim . flmax) (w10941 core-prim . fllog) (w10940 core-prim . flinteger?) (w10939 core-prim . flinfinite?) (w10938 core-prim . flfloor) (w10937 core-prim . flfinite?) (w10936 core-prim . flexpt) (w10935 core-prim . flexp) (w10934 core-prim . fleven?) (w10933 core-prim . fldiv0-and-mod0) (w10932 core-prim . fldiv0) (w10931 core-prim . fldiv-and-mod) (w10930 core-prim . fldiv) (w10929 core-prim . fldenominator) (w10928 core-prim . flcos) (w10927 core-prim . flceiling) (w10926 core-prim . flatan) (w10925 core-prim . flasin) (w10924 core-prim . flacos) (w10923 core-prim . flabs) (w10922 core-prim . fl>?) (w10921 core-prim . fl>=?) (w10920 core-prim . fl=?) (w10919 core-prim . fl<?) (w10918 core-prim . fl<=?) (w10917 core-prim . fl/) (w10916 core-prim . fl-) (w10915 core-prim . fl+) (w10914 core-prim . fl*) (w10913 core-prim . fixnum->flonum) (w10912 core-prim . fxzero?) (w10911 core-prim . fxxor) (w10910 core-prim . fxrotate-bit-field) (w10909 core-prim . fxreverse-bit-field) (w10908 core-prim . fxpositive?) (w10907 core-prim . fxodd?) (w10906 core-prim . fxnot) (w10905 core-prim . fxnegative?) (w10904 core-prim . fxmod0) (w10903 core-prim . fxmod) (w10902 core-prim . fxmin) (w10901 core-prim . fxmax) (w10900 core-prim . fxlength) (w10899 core-prim . fxior) (w10898 core-prim . fxif) (w10897 core-prim . fxfirst-bit-set) (w10896 core-prim . fxeven?) (w10895 core-prim . fxdiv0-and-mod0) (w10894 core-prim . fxdiv0) (w10893 core-prim . fxdiv-and-mod) (w10892 core-prim . fxdiv) (w10891 core-prim . fxcopy-bit-field) (w10890 core-prim . fxcopy-bit) (w10889 core-prim . fxbit-set?) (w10888 core-prim . fxbit-field) (w10887 core-prim . fxbit-count) (w10886 core-prim . fxarithmetic-shift-right) (w10885 core-prim . fxarithmetic-shift-left) (w10884 core-prim . fxarithmetic-shift) (w10883 core-prim . fxand) (w10882 core-prim . fx>?) (w10881 core-prim . fx>=?) (w10880 core-prim . fx=?) (w10879 core-prim . fx<?) (w10878 core-prim . fx<=?) (w10877 core-prim . fx-/carry) (w10876 core-prim . fx-) (w10875 core-prim . fx+/carry) (w10874 core-prim . fx+) (w10873 core-prim . fx*/carry) (w10872 core-prim . fx*) (w10871 core-prim . greatest-fixnum) (w10870 core-prim . least-fixnum) (w10869 core-prim . fixnum-width) (w10868 core-prim . fixnum?) (w10867 core-prim . bitwise-rotate-bit-field) (w10866 core-prim . bitwise-reverse-bit-field) (w10865 core-prim . bitwise-length) (w10864 core-prim . bitwise-if) (w10863 core-prim . bitwise-first-bit-set) (w10862 core-prim . bitwise-copy-bit-field) (w10861 core-prim . bitwise-copy-bit) (w10860 core-prim . bitwise-bit-set?) (w10859 core-prim . bitwise-bit-field) (w10858 core-prim . bitwise-bit-count) (w10857 core-prim . bitwise-xor) (w10856 core-prim . bitwise-ior) (w10855 core-prim . bitwise-and) (w10854 core-prim . bitwise-not) (w10853 core-prim . bitwise-arithmetic-shift-right) (w10852 core-prim . bitwise-arithmetic-shift-left) (w10851 core-prim . bitwise-arithmetic-shift) (w10850 core-prim . zero?) (w10849 core-prim . vector?) (w10848 core-prim . vector-set!) (w10847 core-prim . vector-ref) (w10846 core-prim . vector-map) (w10845 core-prim . vector-length) (w10844 core-prim . vector-for-each) (w10843 core-prim . vector-fill!) (w10842 core-prim . vector->list) (w10841 core-prim . vector) (w10840 core-prim . values) (w10839 core-prim . truncate) (w10838 core-prim . tan) (w10837 core-prim . symbol?) (w10836 core-prim . symbol=?) (w10835 core-prim . symbol->string) (w10834 core-prim . substring) (w10833 core-prim . string?) (w10832 core-prim . string>?) (w10831 core-prim . string>=?) (w10830 core-prim . string=?) (w10829 core-prim . string<?) (w10828 core-prim . string<=?) (w10827 core-prim . string-ref) (w10826 core-prim . string-length) (w10825 core-prim . string-for-each) (w10824 core-prim . string-copy) (w10823 core-prim . string-append) (w10822 core-prim . string->symbol) (w10821 core-prim . string->number) (w10820 core-prim . string->list) (w10819 core-prim . string) (w10818 core-prim . sqrt) (w10817 core-prim . sin) (w10816 core-prim . round) (w10815 core-prim . reverse) (w10814 core-prim . real?) (w10813 core-prim . real-valued?) (w10812 core-prim . real-part) (w10811 core-prim . rationalize) (w10810 core-prim . rational?) (w10809 core-prim . rational-valued?) (w10808 core-prim . procedure?) (w10807 core-prim . positive?) (w10806 core-prim . pair?) (w10805 core-prim . odd?) (w10804 core-prim . numerator) (w10803 core-prim . number?) (w10802 core-prim . number->string) (w10801 core-prim . null?) (w10800 core-prim . not) (w10799 core-prim . negative?) (w10798 core-prim . nan?) (w10797 core-prim . min) (w10796 core-prim . max) (w10795 core-prim . map) (w10794 core-prim . make-vector) (w10793 core-prim . make-string) (w10792 core-prim . make-rectangular) (w10791 core-prim . make-polar) (w10790 core-prim . magnitude) (w10789 core-prim . log) (w10788 core-prim . list?) (w10787 core-prim . list-tail) (w10786 core-prim . list-ref) (w10785 core-prim . list->vector) (w10784 core-prim . list->string) (w10783 core-prim . list) (w10782 core-prim . length) (w10781 core-prim . lcm) (w10780 core-prim . integer?) (w10779 core-prim . integer-valued?) (w10778 core-prim . integer->char) (w10777 core-prim . infinite?) (w10776 core-prim . inexact?) (w10775 core-prim . inexact) (w10774 core-prim . imag-part) (w10773 core-prim . gcd) (w10772 core-prim . for-each) (w10771 core-prim . floor) (w10770 core-prim . finite?) (w10769 core-prim . expt) (w10768 core-prim . exp) (w10767 core-prim . exact?) (w10766 core-prim . exact-integer-sqrt) (w10765 core-prim . exact) (w10764 core-prim . even?) (w10763 core-prim . error) (w10762 core-prim . eqv?) (w10761 core-prim . equal?) (w10760 core-prim . eq?) (w10759 core-prim . dynamic-wind) (w10758 core-prim . div0-and-mod0) (w10757 core-prim . mod0) (w10756 core-prim . div0) (w10755 core-prim . div-and-mod) (w10754 core-prim . mod) (w10753 core-prim . div) (w10752 core-prim . denominator) (w10751 core-prim . cos) (w10750 core-prim . cons) (w10749 core-prim . complex?) (w10748 core-prim . char?) (w10747 core-prim . char>?) (w10746 core-prim . char>=?) (w10745 core-prim . char=?) (w10744 core-prim . char<?) (w10743 core-prim . char<=?) (w10742 core-prim . char->integer) (w10741 core-prim . ceiling) (w10740 core-prim . call-with-values) (w10739 core-prim . call/cc) (w10738 core-prim . call-with-current-continuation) (w10737 core-prim . cddddr) (w10736 core-prim . cdddar) (w10735 core-prim . cddadr) (w10734 core-prim . cddaar) (w10733 core-prim . cdaddr) (w10732 core-prim . cdadar) (w10731 core-prim . cdaadr) (w10730 core-prim . cdaaar) (w10729 core-prim . cadddr) (w10728 core-prim . caddar) (w10727 core-prim . cadadr) (w10726 core-prim . cadaar) (w10725 core-prim . caaddr) (w10724 core-prim . caadar) (w10723 core-prim . caaadr) (w10722 core-prim . caaaar) (w10721 core-prim . cdddr) (w10720 core-prim . cddar) (w10719 core-prim . cdadr) (w10718 core-prim . cdaar) (w10717 core-prim . caddr) (w10716 core-prim . cadar) (w10715 core-prim . caadr) (w10714 core-prim . caaar) (w10713 core-prim . cddr) (w10712 core-prim . cdar) (w10711 core-prim . cadr) (w10710 core-prim . caar) (w10709 core-prim . cdr) (w10708 core-prim . car) (w10707 core-prim . boolean?) (w10706 core-prim . boolean=?) (w10705 core-prim . atan) (w10704 core-prim . assertion-violation) (w3000 core-prim . assertion-error) (w10703 core-prim . asin) (w10702 core-prim . apply) (w10701 core-prim . append) (w10700 core-prim . angle) (w10699 core-prim . acos) (w10698 core-prim . abs) (w10697 core-prim . /) (w10696 core-prim . *) (w10695 core-prim . -) (w10694 core-prim . +) (w10693 core-prim . >=) (w10692 core-prim . >) (w10691 core-prim . =) (w10690 core-prim . <=) (w10689 core-prim . <) (w10688 core-prim . library) (w10687 $core-rtd &no-nans-rtd &no-nans-rcd) (w10686 $core-rtd &no-infinities-rtd &no-infinities-rcd) (w10685 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (w10684 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (w10683 $core-rtd &i/o-port-rtd &i/o-port-rcd) (w10682 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (w10681 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (w10680 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (w10679 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (w10678 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (w10677 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (w10676 $core-rtd &i/o-write-rtd &i/o-write-rcd) (w10675 $core-rtd &i/o-read-rtd &i/o-read-rcd) (w10674 $core-rtd &i/o-rtd &i/o-rcd) (w10673 $core-rtd &undefined-rtd &undefined-rcd) (w10672 $core-rtd &syntax-rtd &syntax-rcd) (w10671 $core-rtd &lexical-rtd &lexical-rcd) (w10670 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (w10669 $core-rtd &non-continuable-rtd &non-continuable-rcd) (w10668 $core-rtd &who-rtd &who-rcd) (w10667 $core-rtd &irritants-rtd &irritants-rcd) (w10666 $core-rtd &assertion-rtd &assertion-rcd) (w10665 $core-rtd &violation-rtd &violation-rcd) (w10664 $core-rtd &error-rtd &error-rcd) (w10663 $core-rtd &serious-rtd &serious-rcd) (w10662 $core-rtd &warning-rtd &warning-rcd) (w10661 $core-rtd &message-rtd &message-rcd) (w10660 $core-rtd &condition-rtd &condition-rcd) (w10659 macro . define-condition-type) (w10658 macro . define-enumeration) (w10657 macro . define-record-type) (w10656 macro . parent-rtd) (w10655 macro . nongenerative) (w10654 macro . opaque) (w10653 macro . sealed) (w10652 macro . protocol) (w10651 macro . parent) (w10650 macro . immutable) (w10649 macro . mutable) (w10648 macro . fields) (w10647 macro . error-handling-mode) (w10646 macro . file-options) (w10645 macro . buffer-mode) (w10644 macro . eol-style) (w10643 macro . guard) (w10642 macro . trace-define) (w10641 macro . trace-lambda) (w10640 macro . unsyntax-splicing) (w10639 macro . unsyntax) (w10638 macro . unquote-splicing) (w10637 macro . unquote) (w10636 macro . _) (w10635 macro . else) (w10634 macro . =>) (w10633 macro . ...) (w10632 macro . assert) (w10631 macro . endianness) (w10630 macro . delay) (w10629 macro . time) (w10628 macro . do) (w10627 macro . cond) (w10626 macro . let*) (w10625 macro . let) (w10624 macro . let*-values) (w10623 macro . let-values) (w10622 macro . identifier-syntax) (w10621 macro . with-syntax) (w10620 macro . quasisyntax) (w10619 macro . quasiquote) (w10618 macro . syntax-rules) (w10617 macro . include) (w10616 macro . define-struct) (w10615 core-macro . record-constructor-descriptor) (w10614 core-macro . record-type-descriptor) (w10613 macro . case) (w10612 macro . parameterize) (w10611 macro . unless) (w10610 macro . when) (w10609 core-macro . or) (w10608 core-macro . and) (w10607 core-macro . if) (w10606 core-macro . letrec*) (w10605 core-macro . letrec) (w10604 core-macro . type-descriptor) (w10603 core-macro . case-lambda) (w10602 core-macro . lambda) (w10601 core-macro . syntax) (w10600 core-macro . syntax-case) (w10599 core-macro . quote) (w10598 core-macro . foreign-call) (w10597 letrec-syntax) (w10596 let-syntax) (w10595 set!) (w10594 import) (w10593 begin) (w10592 module) (w10591 define-syntax) (w10590 define)) values values '#f '#f '#f '#f) (w1801@w1454@install-library 'w11340 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . w11307) (eval-core . w11306) (set-symbol-value! . w11305) (symbol-value . w11304) (gensym . w924) (void . w11303)) '() values values '#f '#f '#f '#f) (w1801@w1454@install-library 'w11341 '(mosh) '() '() '() '() '((set-symbol-value! . w11305) (symbol-value . w11304) (read-line . w11300) (ungensym . w11299) (alist->eq-hash-table . w11298) (assoc-ref . w11297) (print . w11296) (format . w11295) (host-os . w11294) (library-path . w1421) (standard-library-path . w11293) (file-newer? . w11292) (stat-mtime . w11291) (write-to-file . w11290) (file->list . w11289) (file->string . w11288) (digit->integer . w11287) (call-with-string-input-port . w11286) (call-with-string-io . w11285) (string-split . w11284) (bytevector-for-each . w11283) (string->regexp . w11282) (rxmatch . w11281) (regexp-replace-all . w11280) (hashtable-for-each . w11279) (readdir . w11275) (set-current-directory! . w11274) (expand-path . w11273) (current-directory . w11272) (p . w11257) (get-timeofday . w11252) (get-command-line . w11251) (sys-display . w11250) (mosh-executable-path . w11249) (make-file-options . w11248) (source-info . w11247) (make-compiler-instruction . w11246) (make-instruction . w11245) (set-source-info! . w11244) (bignum? . w11243) (fast-equal? . w11242) (fasl-read . w11241) (fasl-write . w11240) (time-usage . w11239) (os-constant . w11238) (time . w10629) (include . w10617)) '() values values '#f '#f '#f '#f) (w1801@w1454@install-library 'w11342 '(system) '() '() '() '() '((call-process . w11278) (local-tz-offset . w11277) (microseconds . w11276) (expand-path . w11273) (%spawn . w11271) (%waitpid . w11270) (%ffi-supported? . w11269) (%ffi-pointer-ref . w11268) (%ffi-pointer->string . w11267) (%ffi-call->string-or-zero . w11266) (%ffi-call->double . w11265) (%ffi-call->void* . w11264) (%ffi-call->void . w11263) (%ffi-call->int . w11262) (%ffi-lookup . w11261) (%ffi-open . w11260) (%fork . w11259) (%pipe . w11258) (open-output-string . w11256) (get-output-string . w11255) (get-environment-variables . w11254) (get-environment-variable . w11253) (make-parameter . w952) (socket-port . w11237) (socket-shutdown . w11236) (socket-close . w11235) (socket-send . w11234) (socket-recv! . w11233) (socket-recv . w11232) (make-server-socket . w11231) (make-client-socket . w11230) (socket-accept . w11229) (socket? . w11228) (parameterize . w10612)) '() values values '#f '#f '#f '#f))
((lambda (w10322@add-library-path! w10324@parse-and-add-library-path w10326@for-each-with-index w10328@rpad w10330@condition-printer w10332@record->field-alist w10334@map-with-index w10336@repl w10338@trace-printer w10340@command-line w10342@local-library-path w10344@load/args w10346@load w10348@ironscheme-build w10350@eval-top-level w10352@compile-system-libraries w10354@compile w10356@compile->closure w10358@pre-compile-r6rs-file w10360@load-r6rs-top-level) (begin (set! w10322@add-library-path! (lambda (w10387@path) (w1785@w1422@library-path (append (w1785@w1422@library-path) (list w10387@path))))) (set! w10324@parse-and-add-library-path (lambda (w10389@paths w10390@message) ((lambda (w10393@t) (if w10393@t ((lambda (w10395@paths) (for-each (lambda (w10397@path) (if (file-exists? w10397@path) (w10322@add-library-path! (expand-path w10397@path)) (format (current-error-port) w10390@message w10397@path))) (reverse (string-split w10395@paths '#\:)))) w10393@t) (void))) w10389@paths))) (set! w10326@for-each-with-index (lambda (w10399@proc w10400@lst) (letrec ((w10403@loop (lambda (w10405@i w10406@lst) (if (null? w10406@lst) (if '#f '#f (void)) (begin (w10399@proc w10405@i (car w10406@lst)) (w10403@loop (+ w10405@i '1) (cdr w10406@lst))))))) (w10403@loop '1 w10400@lst)))) (set! w10328@rpad (lambda (w10409@str w10410@pad w10411@n) ((lambda (w10415@rest) ((letrec ((w10417@loop (lambda (w10419@rest w10420@ret) (if (<= w10419@rest '0) w10420@ret (w10417@loop (- w10419@rest '1) (string-append w10420@ret w10410@pad)))))) w10417@loop) w10415@rest (format '"~a" w10409@str))) (- w10411@n (string-length (format '"~a" w10409@str)))))) (set! w10330@condition-printer (lambda (w10423@e w10424@port) ((lambda (w10428@max-condition-len) (begin (set! w10428@max-condition-len (apply max (map (lambda (w10445@c) (string-length (symbol->string (record-type-name (record-rtd w10445@c))))) (simple-conditions w10423@e)))) (begin (display '" Condition components:\n" w10424@port) (w10326@for-each-with-index (lambda (w10429@i w10430@x) ((lambda (w10433@rtd w10434@fields-alist) (begin (format w10424@port '" ~d. ~a" w10429@i (w10328@rpad (symbol->string (record-type-name w10433@rtd)) '" " w10428@max-condition-len)) (if (null? w10434@fields-alist) (newline w10424@port) (void)) ((letrec ((w10437@loop (lambda (w10439@first w10440@fields-alist) (if (null? w10440@fields-alist) '() ((lambda (w10443@field) (begin (if (not w10439@first) (display (w10328@rpad '"" '" " (+ '4 w10428@max-condition-len)) w10424@port) (void)) (display '"       " w10424@port) (display (car w10443@field) w10424@port) (display '": " w10424@port) (write (cdr w10443@field) w10424@port) (newline w10424@port) (w10437@loop '#f (cdr w10440@fields-alist)))) (car w10440@fields-alist)))))) w10437@loop) '#t w10434@fields-alist))) (record-rtd w10430@x) (w10332@record->field-alist w10430@x))) (simple-conditions w10423@e))))) '#f))) (set! w10332@record->field-alist (lambda (w10447@r) ((lambda (w10450@ref) (begin (set! w10450@ref (lambda (w10461@rtd w10462@i w10463@x) ((lambda (w10467@val) (if (symbol? w10467@val) (ungensym w10467@val) w10467@val)) ((record-accessor w10461@rtd w10462@i) w10463@x)))) ((letrec ((w10451@loop (lambda (w10453@ret w10454@rtd) (if w10454@rtd (w10451@loop (append w10453@ret (w10334@map-with-index (lambda (w10457@i w10458@field) (cons w10458@field (w10450@ref w10454@rtd w10457@i w10447@r))) (vector->list (record-type-field-names w10454@rtd)))) (record-type-parent w10454@rtd)) w10453@ret)))) w10451@loop) '() (record-rtd w10447@r)))) '#f))) (set! w10334@map-with-index (lambda (w10469@proc w10470@lst) ((letrec ((w10473@loop (lambda (w10475@i w10476@lst w10477@ret) (if (null? w10476@lst) (reverse w10477@ret) (w10473@loop (+ w10475@i '1) (cdr w10476@lst) (cons (w10469@proc w10475@i (car w10476@lst)) w10477@ret)))))) w10473@loop) '0 w10470@lst '()))) (set! w10336@repl (lambda w10481@x ((lambda (w10484@rec) (begin (set! w10484@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (w10487@w10485) (lambda () (with-exception-handler (lambda (w10489@e) ((call/cc (lambda (w10491@w10486) (w10487@w10485 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? w10489@e) (w10330@condition-printer w10489@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" w10489@e))) (w10491@w10486 (lambda () (raise-continuable w10489@e)))))))))) (lambda () ((letrec ((w10493@loop (lambda (w10495@line w10496@accum) ((lambda (w10500@parentheses-ok? w10502@eval-string-print) (begin (set! w10500@parentheses-ok? (lambda (w10507@text) ((letrec ((w10509@loop (lambda (w10511@chars w10512@p0 w10513@p1) (if (null? w10511@chars) (= '0 w10512@p0 w10513@p1) ((lambda (w10517@t) (if (memv w10517@t '(#\()) (w10509@loop (cdr w10511@chars) (+ w10512@p0 '1) w10513@p1) (if (memv w10517@t '(#\))) (w10509@loop (cdr w10511@chars) (- w10512@p0 '1) w10513@p1) (if (memv w10517@t '(#\[)) (w10509@loop (cdr w10511@chars) w10512@p0 (+ w10513@p1 '1)) (if (memv w10517@t '(#\])) (w10509@loop (cdr w10511@chars) w10512@p0 (- w10513@p1 '1)) (w10509@loop (cdr w10511@chars) w10512@p0 w10513@p1)))))) (car w10511@chars)))))) w10509@loop) (string->list w10507@text) '0 '0))) (set! w10502@eval-string-print (lambda (w10505@text) (if (not (or (string=? '"\n" w10505@text) (= '0 (string-length w10505@text)))) (write (w10350@eval-top-level (call-with-port (open-string-input-port w10505@text) read))) (void)))) (if (eof-object? w10495@line) (begin (w10502@eval-string-print w10496@accum) (exit)) ((lambda (w10503@current) (if (w10500@parentheses-ok? w10503@current) (w10502@eval-string-print w10503@current) (w10493@loop (get-line (current-input-port)) w10503@current))) (string-append w10496@accum w10495@line))))) '#f '#f)))) w10493@loop) (get-line (current-input-port)) '""))))))) (newline) (w10484@rec)))) (w10484@rec))) '#f))) (set! w10338@trace-printer (w1175@w953@make-parameter write)) (set! w10340@command-line (w1175@w953@make-parameter (get-command-line))) (set! w10342@local-library-path (lambda (w10519@filename) (cons (expand-path '".") (w1785@w1422@library-path)))) (set! w10344@load/args (lambda (w10521@filename . w10523@args) (begin (apply w10360@load-r6rs-top-level w10521@filename 'load w10523@args) (void)))) (set! w10346@load (lambda (w10525@filename) (begin (apply w10360@load-r6rs-top-level w10525@filename 'load (w10340@command-line)) (void)))) (set! w10348@ironscheme-build (lambda () (w10346@load '"ironscheme-buildscript.ss"))) (set! w10350@eval-top-level (lambda (w10527@x) (w9354@w2975@eval w10527@x (w9376@w3019@interaction-environment)))) (set! w10352@compile-system-libraries (lambda () (w10350@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! w10354@compile (lambda (w10529@filename) (w10360@load-r6rs-top-level w10529@filename 'compile))) (set! w10356@compile->closure (lambda (w10531@filename) (w10360@load-r6rs-top-level w10531@filename 'closure))) (set! w10358@pre-compile-r6rs-file (lambda (w10533@filename) (w10360@load-r6rs-top-level w10533@filename 'compile))) (set! w10360@load-r6rs-top-level (lambda (w10535@filename w10536@how . w10539@args) ((lambda (w10543@w10541@library-path w10544@w10542@library-path) ((lambda (w10547@swap) (dynamic-wind w10547@swap (lambda () ((lambda (w10549@x*) ((lambda (w10551@t) (if (memv w10551@t '(closure)) (w9375@w3017@pre-compile-r6rs-top-level w10549@x*) (if (memv w10551@t '(load)) ((lambda (w10555@w10553@command-line w10556@w10554@command-line) ((lambda (w10559@swap) (dynamic-wind w10559@swap (lambda () ((w9374@w3015@compile-r6rs-top-level w10549@x*))) w10559@swap)) (lambda () ((lambda (w10561@t) (begin (w10555@w10553@command-line w10556@w10554@command-line) (set! w10556@w10554@command-line w10561@t))) (w10555@w10553@command-line))))) w10340@command-line (cons w10535@filename (car w10539@args))) (if (memv w10551@t '(compile)) (begin (w9374@w3015@compile-r6rs-top-level w10549@x*) (w1789@w1430@serialize-all w1170@w943@serialize-library w1260@w1189@compile-core-expr)) (if '#f '#f (void)))))) w10536@how)) (with-input-from-file w10535@filename (lambda () ((letrec ((w10563@f (lambda () ((lambda (w10565@x) (if (eof-object? w10565@x) '() (cons w10565@x (w10563@f)))) (w1162@w927@read-annotated))))) w10563@f)))))) w10547@swap)) (lambda () ((lambda (w10567@t) (begin (w10543@w10541@library-path w10544@w10542@library-path) (set! w10544@w10542@library-path w10567@t))) (w10543@w10541@library-path))))) w1785@w1422@library-path (w10342@local-library-path w10535@filename)))) (begin (set! w10588@w10360@load-r6rs-top-level w10360@load-r6rs-top-level) (set! w10587@w10358@pre-compile-r6rs-file w10358@pre-compile-r6rs-file) (set! w10586@w10356@compile->closure w10356@compile->closure) (set! w10585@w10354@compile w10354@compile) (set! w10584@w10352@compile-system-libraries w10352@compile-system-libraries) (set! w10583@w10350@eval-top-level w10350@eval-top-level) (set! w10582@w10348@ironscheme-build w10348@ironscheme-build) (set! w10581@w10346@load w10346@load) (set! w10580@w10344@load/args w10344@load/args) (set! w10579@w10342@local-library-path w10342@local-library-path) (set! w10578@w10340@command-line w10340@command-line) (set! w10577@w10338@trace-printer w10338@trace-printer) (set! w10576@w10336@repl w10336@repl) (set! w10575@w10334@map-with-index w10334@map-with-index) (set! w10574@w10332@record->field-alist w10332@record->field-alist) (set! w10573@w10330@condition-printer w10330@condition-printer) (set! w10572@w10328@rpad w10328@rpad) (set! w10571@w10326@for-each-with-index w10326@for-each-with-index) (set! w10570@w10324@parse-and-add-library-path w10324@parse-and-add-library-path) (set! w10569@w10322@add-library-path! w10322@add-library-path!) (w1790@w1432@current-precompiled-library-loader w1171@w945@load-serialized-library) (set-symbol-value! 'load w10346@load) (set-symbol-value! 'pre-compile-r6rs-file w10358@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs w10350@eval-top-level) (set-symbol-value! 'int-env-syms w9345@w2957@interaction-environment-symbols) (set-symbol-value! 'expanded2core w1259@w1187@expanded->core) (set-symbol-value! 'trace-printer w10338@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (w10361@c) (condition (w10159@w9663@make-non-continuable-violation) (w10149@w9638@make-who-condition 'raise) (w10089@w9481@make-message-condition '"returned from non-continuable exception") (w10139@w9612@make-irritants-condition (list w10361@c))))) (w10324@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (w10324@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (w10322@add-library-path! (string-append (mosh-executable-path) '"/lib")) (w10322@add-library-path! (string-append (current-directory) '"/lib"))) (w10322@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (w10363@prefix) (w1786@w1424@library-extensions (w10363@prefix '".mosh" (w1786@w1424@library-extensions)))) (lambda (w10365@ext w10366@ls) (append (map (lambda (w10369@x) (string-append w10365@ext w10369@x)) w10366@ls) w10366@ls))) ((lambda (w10371@args w10372@port) ((lambda (w10376@ref) (begin (set! w10376@ref (lambda (w10379@rtd w10380@i w10381@x) ((lambda (w10385@val) (if (symbol? w10385@val) (ungensym w10385@val) w10385@val)) ((record-accessor w10379@rtd w10380@i) w10381@x)))) (with-exception-handler (lambda (w10377@c) (if (condition? w10377@c) (w10330@condition-printer w10377@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" w10377@c))) (lambda () (if (null? w10371@args) (w10336@repl) (w10360@load-r6rs-top-level (car w10371@args) 'load (cdr w10371@args))))))) '#f)) (w10340@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
