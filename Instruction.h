// Do not edit this file generated by gen-insn.scm
#ifndef __SCHEME_INSTRUCTION_H__
#define __SCHEME_INSTRUCTION_H__

#include "scheme.h"

namespace scheme {

class Instruction EXTEND_GC
{
public:
    enum {
        COMPILE_ERROR = 14,
        APPEND2 = 46,
        CALL = 78,
        APPLY = 110,
        PUSH = 142,
        ASSIGN_FREE = 174,
        ASSIGN_GLOBAL = 206,
        ASSIGN_LOCAL = 238,
        BOX = 270,
        CAAR = 302,
        CADR = 334,
        CAR = 366,
        CDAR = 398,
        CDDR = 430,
        CDR = 462,
        CLOSURE = 494,
        CONS = 526,
        CONSTANT = 558,
        DEFINE_GLOBAL = 590,
        DISPLAY = 622,
        ENTER = 654,
        EQ = 686,
        EQV = 718,
        EQUAL = 750,
        FRAME = 782,
        INDIRECT = 814,
        LEAVE = 846,
        LET_FRAME = 878,
        LIST = 910,
        LOCAL_JMP = 942,
        MAKE_CONTINUATION = 974,
        MAKE_VECTOR = 1006,
        NOP = 1038,
        NOT = 1070,
        NULL_P = 1102,
        NUMBER_ADD = 1134,
        NUMBER_EQUAL = 1166,
        NUMBER_GE = 1198,
        NUMBER_GT = 1230,
        NUMBER_LE = 1262,
        NUMBER_LT = 1294,
        NUMBER_MUL = 1326,
        NUMBER_DIV = 1358,
        NUMBER_SUB = 1390,
        PAIR_P = 1422,
        READ = 1454,
        READ_CHAR = 1486,
        REDUCE = 1518,
        REFER_FREE = 1550,
        REFER_GLOBAL = 1582,
        REFER_LOCAL = 1614,
        RESTORE_CONTINUATION = 1646,
        RETURN = 1678,
        SET_CAR = 1710,
        SET_CDR = 1742,
        SHIFT = 1774,
        SYMBOL_P = 1806,
        TEST = 1838,
        UNDEF = 1870,
        VECTOR_LENGTH = 1902,
        VECTOR_P = 1934,
        VECTOR_REF = 1966,
        VECTOR_SET = 1998,
        CONSTANT_PUSH = 2030,
        REFER_LOCAL0 = 2062,
        REFER_LOCAL1 = 2094,
        REFER_LOCAL2 = 2126,
        REFER_LOCAL3 = 2158,
        REFER_FREE0 = 2190,
        REFER_FREE1 = 2222,
        REFER_FREE2 = 2254,
        REFER_FREE3 = 2286,
        REFER_LOCAL0_PUSH = 2318,
        REFER_LOCAL0_PUSH_CONSTANT = 2350,
        REFER_LOCAL1_PUSH_CONSTANT = 2382,
        REFER_LOCAL1_PUSH = 2414,
        NUMBER_SUB_PUSH = 2446,
        PUSH_ENTER = 2478,
        HALT = 2510,
        LEAVE1 = 2542,
        CALL1 = 2574,
        NUMBER_LE_TEST = 2606,
        NUMBER_ADD_PUSH = 2638,
        RETURN1 = 2670,
        RETURN2 = 2702,
        RETURN3 = 2734,
        CALL2 = 2766,
        REFER_LOCAL0_EQV_TEST = 2798,
        PUSH_CONSTANT = 2830,
        PUSH_FRAME = 2862,
        REFER_FREE0_PUSH = 2894,
        REFER_FREE1_PUSH = 2926,
        REFER_FREE2_PUSH = 2958,
        CAR_PUSH = 2990,
        CDR_PUSH = 3022,
        REFER_FREE0_INDIRECT = 3054,
        REFER_FREE1_INDIRECT = 3086,
        REFER_LOCAL2_PUSH = 3118,
        SHIFT_CALL = 3150,
        CALL3 = 3182,
        NOT_TEST = 3214,
        REFER_GLOBAL_CALL = 3246,
        REFER_LOCAL0_NUMBER_ADD_PUSH = 3278,
        REFER_LOCAL0_VECTOR_SET = 3310,
        REFER_LOCAL0_VECTOR_REF = 3342,
        REFER_FREE_PUSH = 3374,
        REFER_LOCAL_PUSH = 3406,
        VALUES = 3438,
        RECEIVE = 3470,
        UNFIXED_JUMP = 3502,
        STOP = 3534,
        CONTINUATION_VALUES = 3566,
        SHIFTJ = 3598,
    };
    static const ucs4char* toString(int val) {
        switch(val) {
        case COMPILE_ERROR:
           return UC("COMPILE_ERROR");
           break;
        case APPEND2:
           return UC("APPEND2");
           break;
        case CALL:
           return UC("CALL");
           break;
        case APPLY:
           return UC("APPLY");
           break;
        case PUSH:
           return UC("PUSH");
           break;
        case ASSIGN_FREE:
           return UC("ASSIGN_FREE");
           break;
        case ASSIGN_GLOBAL:
           return UC("ASSIGN_GLOBAL");
           break;
        case ASSIGN_LOCAL:
           return UC("ASSIGN_LOCAL");
           break;
        case BOX:
           return UC("BOX");
           break;
        case CAAR:
           return UC("CAAR");
           break;
        case CADR:
           return UC("CADR");
           break;
        case CAR:
           return UC("CAR");
           break;
        case CDAR:
           return UC("CDAR");
           break;
        case CDDR:
           return UC("CDDR");
           break;
        case CDR:
           return UC("CDR");
           break;
        case CLOSURE:
           return UC("CLOSURE");
           break;
        case CONS:
           return UC("CONS");
           break;
        case CONSTANT:
           return UC("CONSTANT");
           break;
        case DEFINE_GLOBAL:
           return UC("DEFINE_GLOBAL");
           break;
        case DISPLAY:
           return UC("DISPLAY");
           break;
        case ENTER:
           return UC("ENTER");
           break;
        case EQ:
           return UC("EQ");
           break;
        case EQV:
           return UC("EQV");
           break;
        case EQUAL:
           return UC("EQUAL");
           break;
        case FRAME:
           return UC("FRAME");
           break;
        case INDIRECT:
           return UC("INDIRECT");
           break;
        case LEAVE:
           return UC("LEAVE");
           break;
        case LET_FRAME:
           return UC("LET_FRAME");
           break;
        case LIST:
           return UC("LIST");
           break;
        case LOCAL_JMP:
           return UC("LOCAL_JMP");
           break;
        case MAKE_CONTINUATION:
           return UC("MAKE_CONTINUATION");
           break;
        case MAKE_VECTOR:
           return UC("MAKE_VECTOR");
           break;
        case NOP:
           return UC("NOP");
           break;
        case NOT:
           return UC("NOT");
           break;
        case NULL_P:
           return UC("NULL_P");
           break;
        case NUMBER_ADD:
           return UC("NUMBER_ADD");
           break;
        case NUMBER_EQUAL:
           return UC("NUMBER_EQUAL");
           break;
        case NUMBER_GE:
           return UC("NUMBER_GE");
           break;
        case NUMBER_GT:
           return UC("NUMBER_GT");
           break;
        case NUMBER_LE:
           return UC("NUMBER_LE");
           break;
        case NUMBER_LT:
           return UC("NUMBER_LT");
           break;
        case NUMBER_MUL:
           return UC("NUMBER_MUL");
           break;
        case NUMBER_DIV:
           return UC("NUMBER_DIV");
           break;
        case NUMBER_SUB:
           return UC("NUMBER_SUB");
           break;
        case PAIR_P:
           return UC("PAIR_P");
           break;
        case READ:
           return UC("READ");
           break;
        case READ_CHAR:
           return UC("READ_CHAR");
           break;
        case REDUCE:
           return UC("REDUCE");
           break;
        case REFER_FREE:
           return UC("REFER_FREE");
           break;
        case REFER_GLOBAL:
           return UC("REFER_GLOBAL");
           break;
        case REFER_LOCAL:
           return UC("REFER_LOCAL");
           break;
        case RESTORE_CONTINUATION:
           return UC("RESTORE_CONTINUATION");
           break;
        case RETURN:
           return UC("RETURN");
           break;
        case SET_CAR:
           return UC("SET_CAR");
           break;
        case SET_CDR:
           return UC("SET_CDR");
           break;
        case SHIFT:
           return UC("SHIFT");
           break;
        case SYMBOL_P:
           return UC("SYMBOL_P");
           break;
        case TEST:
           return UC("TEST");
           break;
        case UNDEF:
           return UC("UNDEF");
           break;
        case VECTOR_LENGTH:
           return UC("VECTOR_LENGTH");
           break;
        case VECTOR_P:
           return UC("VECTOR_P");
           break;
        case VECTOR_REF:
           return UC("VECTOR_REF");
           break;
        case VECTOR_SET:
           return UC("VECTOR_SET");
           break;
        case CONSTANT_PUSH:
           return UC("CONSTANT_PUSH");
           break;
        case REFER_LOCAL0:
           return UC("REFER_LOCAL0");
           break;
        case REFER_LOCAL1:
           return UC("REFER_LOCAL1");
           break;
        case REFER_LOCAL2:
           return UC("REFER_LOCAL2");
           break;
        case REFER_LOCAL3:
           return UC("REFER_LOCAL3");
           break;
        case REFER_FREE0:
           return UC("REFER_FREE0");
           break;
        case REFER_FREE1:
           return UC("REFER_FREE1");
           break;
        case REFER_FREE2:
           return UC("REFER_FREE2");
           break;
        case REFER_FREE3:
           return UC("REFER_FREE3");
           break;
        case REFER_LOCAL0_PUSH:
           return UC("REFER_LOCAL0_PUSH");
           break;
        case REFER_LOCAL0_PUSH_CONSTANT:
           return UC("REFER_LOCAL0_PUSH_CONSTANT");
           break;
        case REFER_LOCAL1_PUSH_CONSTANT:
           return UC("REFER_LOCAL1_PUSH_CONSTANT");
           break;
        case REFER_LOCAL1_PUSH:
           return UC("REFER_LOCAL1_PUSH");
           break;
        case NUMBER_SUB_PUSH:
           return UC("NUMBER_SUB_PUSH");
           break;
        case PUSH_ENTER:
           return UC("PUSH_ENTER");
           break;
        case HALT:
           return UC("HALT");
           break;
        case LEAVE1:
           return UC("LEAVE1");
           break;
        case CALL1:
           return UC("CALL1");
           break;
        case NUMBER_LE_TEST:
           return UC("NUMBER_LE_TEST");
           break;
        case NUMBER_ADD_PUSH:
           return UC("NUMBER_ADD_PUSH");
           break;
        case RETURN1:
           return UC("RETURN1");
           break;
        case RETURN2:
           return UC("RETURN2");
           break;
        case RETURN3:
           return UC("RETURN3");
           break;
        case CALL2:
           return UC("CALL2");
           break;
        case REFER_LOCAL0_EQV_TEST:
           return UC("REFER_LOCAL0_EQV_TEST");
           break;
        case PUSH_CONSTANT:
           return UC("PUSH_CONSTANT");
           break;
        case PUSH_FRAME:
           return UC("PUSH_FRAME");
           break;
        case REFER_FREE0_PUSH:
           return UC("REFER_FREE0_PUSH");
           break;
        case REFER_FREE1_PUSH:
           return UC("REFER_FREE1_PUSH");
           break;
        case REFER_FREE2_PUSH:
           return UC("REFER_FREE2_PUSH");
           break;
        case CAR_PUSH:
           return UC("CAR_PUSH");
           break;
        case CDR_PUSH:
           return UC("CDR_PUSH");
           break;
        case REFER_FREE0_INDIRECT:
           return UC("REFER_FREE0_INDIRECT");
           break;
        case REFER_FREE1_INDIRECT:
           return UC("REFER_FREE1_INDIRECT");
           break;
        case REFER_LOCAL2_PUSH:
           return UC("REFER_LOCAL2_PUSH");
           break;
        case SHIFT_CALL:
           return UC("SHIFT_CALL");
           break;
        case CALL3:
           return UC("CALL3");
           break;
        case NOT_TEST:
           return UC("NOT_TEST");
           break;
        case REFER_GLOBAL_CALL:
           return UC("REFER_GLOBAL_CALL");
           break;
        case REFER_LOCAL0_NUMBER_ADD_PUSH:
           return UC("REFER_LOCAL0_NUMBER_ADD_PUSH");
           break;
        case REFER_LOCAL0_VECTOR_SET:
           return UC("REFER_LOCAL0_VECTOR_SET");
           break;
        case REFER_LOCAL0_VECTOR_REF:
           return UC("REFER_LOCAL0_VECTOR_REF");
           break;
        case REFER_FREE_PUSH:
           return UC("REFER_FREE_PUSH");
           break;
        case REFER_LOCAL_PUSH:
           return UC("REFER_LOCAL_PUSH");
           break;
        case VALUES:
           return UC("VALUES");
           break;
        case RECEIVE:
           return UC("RECEIVE");
           break;
        case UNFIXED_JUMP:
           return UC("UNFIXED_JUMP");
           break;
        case STOP:
           return UC("STOP");
           break;
        case CONTINUATION_VALUES:
           return UC("CONTINUATION_VALUES");
           break;
        case SHIFTJ:
           return UC("SHIFTJ");
           break;
        default:
           return UC("Unkown Instruction");
           break;
        }
        return UC("");
    }


};
}; // namespace scheme

#endif // __SCHEME_INSTRUCTION_H__
