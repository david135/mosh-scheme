;;
;;   Copyright (c) 2008  Higepon(Taro Minowa)  <higepon@users.sourceforge.jp>
;;
;;   Redistribution and use in source and binary forms, with or without
;;   modification, are permitted provided that the following conditions
;;   are met:
;;
;;   1. Redistributions of source code must retain the above copyright
;;      notice, this list of conditions and the following disclaimer.
;;
;;   2. Redistributions in binary form must reproduce the above copyright
;;      notice, this list of conditions and the following disclaimer in the
;;      documentation and/or other materials provided with the distribution.
;;
;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;
(import (rnrs)
        (mosh string)
        (srfi-1)
        (mosh file))

;; 後で library に移す
(define (file->list file)
  (with-input-from-file file
    (lambda ()
      (let loop ([line (read-line)]
                 [ret '()])
        (cond
         [(eof-object? line) (reverse ret)]
         [else
          (loop (read-line) (cons line ret))])))))

(define (main args)
  (format #t ";; Do not edit this file generated by ~a.\n;;\n" (first args))
  (display "(define downcase-alist '(")
  (let loop ([lst (filter (lambda (x) x)
                          (map (lambda (line) (#/0*(\d+)\;\s*(?:C|S)\;\s*0*(\d+)\;/ line))  (file->list  "data/CaseFolding.txt")))]
             [index 0])
    (cond
     [(null? lst) '()]
     [else
      (if (zero? (mod index 5))
          (display "\n    ")
          (display " "))
      (format #t "(~a . ~a)" (string->number ((car lst) 1) 16) (string->number ((car lst) 2) 16))
      (loop (cdr lst) (+ index 1))]))
  (display "))"))

(main (command-line))
