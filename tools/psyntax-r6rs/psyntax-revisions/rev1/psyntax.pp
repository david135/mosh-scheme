;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define g$214$14915 '#f) (define g$214$14916 '#f) (define g$214$14917 '#f) (define g$214$14918 '#f) (define g$214$14919 '#f) (define g$214$14920 '#f) (define g$214$14921 '#f) (letrec ((g$214$14692 read) (g$214$14694 (lambda (g$214$14895) '#f)) (g$214$14696 '#f) (g$214$14698 '#f) (g$214$14700 '#f) (g$214$14702 (lambda g$214$14911 ((lambda (g$214$14912) (if (= g$214$14912 '1) (apply (lambda (g$214$14897) (g$214$14702 g$214$14897 (lambda (g$214$14899) g$214$14899))) g$214$14911) (if (= g$214$14912 '2) (apply (lambda (g$214$14901 g$214$14902) (begin (if (procedure? g$214$14902) (void) (assertion-violation 'assert '"assertion failed" '(procedure? fender))) ((lambda (g$214$14905) (lambda g$214$14909 ((lambda (g$214$14910) (if (= g$214$14910 '0) (apply (lambda () g$214$14905) g$214$14909) (if (= g$214$14910 '1) (apply (lambda (g$214$14907) (set! g$214$14905 (g$214$14902 g$214$14907))) g$214$14909) (error 'apply '"invalid arg count")))) (length g$214$14909)))) (g$214$14902 g$214$14901)))) g$214$14911) (error 'apply '"invalid arg count")))) (length g$214$14911)))) (g$214$14893 (lambda (g$214$14913) (error 'file-options-spec '"not implemented")))) (begin (set! g$214$14921 g$214$14893) (set! g$214$14920 g$214$14702) (set! g$214$14919 g$214$14700) (set! g$214$14918 g$214$14698) (set! g$214$14917 g$214$14696) (set! g$214$14916 g$214$14694) (set! g$214$14915 g$214$14692))))


(begin (define g$214$14996 '#f) (define g$214$14997 '#f) (define g$214$14998 '#f) (define g$214$14999 '#f) (define g$214$15000 '#f) (define g$214$15001 '#f) (letrec ((g$214$14925 (g$214$14920 (lambda (g$214$14937) '#f) (lambda (g$214$14939) (begin (if (procedure? g$214$14939) (void) (assertion-violation 'assert '"assertion failed" '(procedure? p))) g$214$14939)))) (g$214$14927 (lambda (g$214$14941) (letrec ((g$214$14943 (lambda (g$214$14945) ((lambda (g$214$14947) (if g$214$14947 g$214$14947 ((lambda (g$214$14949) (if g$214$14949 g$214$14949 ((lambda (g$214$14951) (if g$214$14951 g$214$14951 ((lambda (g$214$14953) (if g$214$14953 g$214$14953 ((lambda (g$214$14955) (if g$214$14955 g$214$14955 (begin '#f (number? g$214$14945)))) (string? g$214$14945)))) (boolean? g$214$14945)))) (symbol? g$214$14945)))) (char? g$214$14945)))) (null? g$214$14945))))) (not (g$214$14943 g$214$14941))))) (g$214$14929 (lambda (g$214$14957) (letrec ((g$214$14959 (lambda (g$214$14961) (if (pair? g$214$14961) ((lambda (g$214$14963) (if (memv g$214$14963 '(quote)) (if (if g$214$14957 (begin '#f (g$214$14927 (cadr g$214$14961))) '#f) ((lambda (g$214$14988) (begin (set-symbol-value! g$214$14988 (cadr g$214$14961)) g$214$14988)) (gensym)) g$214$14961) (if (memv g$214$14963 '(case-lambda)) (cons 'case-lambda (map (lambda (g$214$14986) (cons (car g$214$14986) (map g$214$14959 (cdr g$214$14986)))) (cdr g$214$14961))) (if (memv g$214$14963 '(lambda)) (cons* 'lambda (cadr g$214$14961) (map g$214$14959 (cddr g$214$14961))) (if (memv g$214$14963 '(letrec)) ((lambda (g$214$14978 g$214$14979) ((lambda (g$214$14982 g$214$14983) (cons* 'letrec (map list g$214$14982 (map g$214$14959 g$214$14983)) (map g$214$14959 g$214$14979))) (map car g$214$14978) (map cadr g$214$14978))) (cadr g$214$14961) (cddr g$214$14961)) (if (memv g$214$14963 '(letrec*)) ((lambda (g$214$14970 g$214$14971) ((lambda (g$214$14974 g$214$14975) (cons* 'letrec* (map list g$214$14974 (map g$214$14959 g$214$14975)) (map g$214$14959 g$214$14971))) (map car g$214$14970) (map cadr g$214$14970))) (cadr g$214$14961) (cddr g$214$14961)) (if (memv g$214$14963 '(begin)) (cons 'begin (map g$214$14959 (cdr g$214$14961))) (if (memv g$214$14963 '(set!)) (list 'set! (cadr g$214$14961) (g$214$14959 (caddr g$214$14961))) (if (memv g$214$14963 '(primitive)) ((lambda (g$214$14964) ((lambda (g$214$14966) (if g$214$14966 ((lambda (g$214$14968) g$214$14968) g$214$14966) g$214$14964)) ((g$214$14925) g$214$14964))) (cadr g$214$14961)) (if (memv g$214$14963 '(define)) g$214$14961 (if (list? g$214$14961) (map g$214$14959 g$214$14961) (error 'rewrite '"invalid form ~s ~s" g$214$14961 (list? g$214$14961))))))))))))) (car g$214$14961)) g$214$14961)))) g$214$14959))) (g$214$14931 '#t) (g$214$14933 (lambda (g$214$14990) ((g$214$14929 g$214$14931) g$214$14990))) (g$214$14935 (lambda (g$214$14992 g$214$14993) (begin (pretty-print ((g$214$14929 '#f) g$214$14992) g$214$14993) (newline g$214$14993))))) (begin (set! g$214$15001 g$214$14935) (set! g$214$15000 g$214$14933) (set! g$214$14999 g$214$14931) (set! g$214$14998 g$214$14929) (set! g$214$14997 g$214$14927) (set! g$214$14996 g$214$14925))))


(void)


(begin (define g$214$15463 '#f) (define g$214$15464 '#f) (define g$214$15465 '#f) (define g$214$15466 '#f) (define g$214$15467 '#f) (define g$214$15468 '#f) (define g$214$15469 '#f) (define g$214$15470 '#f) (define g$214$15471 '#f) (define g$214$15472 '#f) (define g$214$15473 '#f) (define g$214$15474 '#f) (define g$214$15475 '#f) (define g$214$15476 '#f) (define g$214$15477 '#f) (define g$214$15478 '#f) (define g$214$15479 '#f) (define g$214$15480 '#f) (define g$214$15481 '#f) (define g$214$15482 '#f) (define g$214$15483 '#f) (define g$214$15484 '#f) (define g$214$15485 '#f) (define g$214$15486 '#f) (define g$214$15487 '#f) (define g$214$15488 '#f) (define g$214$15489 '#f) (define g$214$15490 '#f) (define g$214$15491 '#f) (define g$214$15492 '#f) (define g$214$15493 '#f) (define g$214$15494 '#f) (define g$214$15495 '#f) (define g$214$15496 '#f) (define g$214$15497 '#f) (define g$214$15498 '#f) (define g$214$15499 '#f) (define g$214$15500 '#f) (define g$214$15501 '#f) (define g$214$15502 '#f) (define g$214$15503 '#f) (define g$214$15504 '#f) (define g$214$15505 '#f) (define g$214$15506 '#f) (define g$214$15507 '#f) (define g$214$15508 '#f) (define g$214$15509 '#f) (define g$214$15510 '#f) (define g$214$15511 '#f) (define g$214$15512 '#f) (define g$214$15513 '#f) (define g$214$15514 '#f) (define g$214$15515 '#f) (letrec ((g$214$15077 (display '"hoge1")) (g$214$15079 (lambda () ((lambda (g$214$15184) (letrec ((g$214$15186 (lambda (g$214$15192 g$214$15193) (if (memq g$214$15192 g$214$15193) g$214$15193 (cons g$214$15192 g$214$15193))))) (lambda g$214$15190 ((lambda (g$214$15191) (if (= g$214$15191 '0) (apply (lambda () g$214$15184) g$214$15190) (if (= g$214$15191 '1) (apply (lambda (g$214$15188) (set! g$214$15184 (g$214$15186 g$214$15188 g$214$15184))) g$214$15190) (error 'apply '"invalid arg count")))) (length g$214$15190))))) '()))) (g$214$15081 (display '"hoge2")) (g$214$15083 (g$214$14920 (g$214$15079) (lambda (g$214$15196) (begin (if (procedure? g$214$15196) (void) (assertion-violation 'current-library-collection '"not a procedure" g$214$15196)) g$214$15196)))) (g$214$15086 (lambda (g$214$15198 g$214$15199 g$214$15200 g$214$15201 g$214$15202 g$214$15203 g$214$15204 g$214$15205 g$214$15206 g$214$15207 g$214$15208) (vector 'g$214$15085 g$214$15198 g$214$15199 g$214$15200 g$214$15201 g$214$15202 g$214$15203 g$214$15204 g$214$15205 g$214$15206 g$214$15207 g$214$15208))) (g$214$15088 (lambda (g$214$15220) (if (vector? g$214$15220) (if (= (vector-length g$214$15220) (+ '1 (length '(id name version imp* vis* inv* subst env visit-state invoke-state visible?)))) (begin '#f (eq? (vector-ref g$214$15220 '0) 'g$214$15085)) '#f) '#f))) (g$214$15090 (lambda (g$214$15222) (if (g$214$15088 g$214$15222) (vector-ref g$214$15222 '1) (error 'library-id '"~s is not of type ~s" g$214$15222 'library)))) (g$214$15092 (lambda (g$214$15224) (if (g$214$15088 g$214$15224) (vector-ref g$214$15224 '2) (error 'library-name '"~s is not of type ~s" g$214$15224 'library)))) (g$214$15094 (lambda (g$214$15226) (if (g$214$15088 g$214$15226) (vector-ref g$214$15226 '3) (error 'library-version '"~s is not of type ~s" g$214$15226 'library)))) (g$214$15096 (lambda (g$214$15228) (if (g$214$15088 g$214$15228) (vector-ref g$214$15228 '4) (error 'library-imp* '"~s is not of type ~s" g$214$15228 'library)))) (g$214$15098 (lambda (g$214$15230) (if (g$214$15088 g$214$15230) (vector-ref g$214$15230 '5) (error 'library-vis* '"~s is not of type ~s" g$214$15230 'library)))) (g$214$15100 (lambda (g$214$15232) (if (g$214$15088 g$214$15232) (vector-ref g$214$15232 '6) (error 'library-inv* '"~s is not of type ~s" g$214$15232 'library)))) (g$214$15102 (lambda (g$214$15234) (if (g$214$15088 g$214$15234) (vector-ref g$214$15234 '7) (error 'library-subst '"~s is not of type ~s" g$214$15234 'library)))) (g$214$15104 (lambda (g$214$15236) (if (g$214$15088 g$214$15236) (vector-ref g$214$15236 '8) (error 'library-env '"~s is not of type ~s" g$214$15236 'library)))) (g$214$15106 (lambda (g$214$15238) (if (g$214$15088 g$214$15238) (vector-ref g$214$15238 '9) (error 'library-visit-state '"~s is not of type ~s" g$214$15238 'library)))) (g$214$15108 (lambda (g$214$15240) (if (g$214$15088 g$214$15240) (vector-ref g$214$15240 '10) (error 'library-invoke-state '"~s is not of type ~s" g$214$15240 'library)))) (g$214$15110 (lambda (g$214$15242) (if (g$214$15088 g$214$15242) (vector-ref g$214$15242 '11) (error 'library-visible? '"~s is not of type ~s" g$214$15242 'library)))) (g$214$15112 (lambda (g$214$15244 g$214$15245) (if (g$214$15088 g$214$15244) (vector-set! g$214$15244 '1 g$214$15245) (error 'set-library-id! '"~s is not of type ~s" g$214$15244 'library)))) (g$214$15114 (lambda (g$214$15248 g$214$15249) (if (g$214$15088 g$214$15248) (vector-set! g$214$15248 '2 g$214$15249) (error 'set-library-name! '"~s is not of type ~s" g$214$15248 'library)))) (g$214$15116 (lambda (g$214$15252 g$214$15253) (if (g$214$15088 g$214$15252) (vector-set! g$214$15252 '3 g$214$15253) (error 'set-library-version! '"~s is not of type ~s" g$214$15252 'library)))) (g$214$15118 (lambda (g$214$15256 g$214$15257) (if (g$214$15088 g$214$15256) (vector-set! g$214$15256 '4 g$214$15257) (error 'set-library-imp*! '"~s is not of type ~s" g$214$15256 'library)))) (g$214$15120 (lambda (g$214$15260 g$214$15261) (if (g$214$15088 g$214$15260) (vector-set! g$214$15260 '5 g$214$15261) (error 'set-library-vis*! '"~s is not of type ~s" g$214$15260 'library)))) (g$214$15122 (lambda (g$214$15264 g$214$15265) (if (g$214$15088 g$214$15264) (vector-set! g$214$15264 '6 g$214$15265) (error 'set-library-inv*! '"~s is not of type ~s" g$214$15264 'library)))) (g$214$15124 (lambda (g$214$15268 g$214$15269) (if (g$214$15088 g$214$15268) (vector-set! g$214$15268 '7 g$214$15269) (error 'set-library-subst! '"~s is not of type ~s" g$214$15268 'library)))) (g$214$15126 (lambda (g$214$15272 g$214$15273) (if (g$214$15088 g$214$15272) (vector-set! g$214$15272 '8 g$214$15273) (error 'set-library-env! '"~s is not of type ~s" g$214$15272 'library)))) (g$214$15128 (lambda (g$214$15276 g$214$15277) (if (g$214$15088 g$214$15276) (vector-set! g$214$15276 '9 g$214$15277) (error 'set-library-visit-state! '"~s is not of type ~s" g$214$15276 'library)))) (g$214$15130 (lambda (g$214$15280 g$214$15281) (if (g$214$15088 g$214$15280) (vector-set! g$214$15280 '10 g$214$15281) (error 'set-library-invoke-state! '"~s is not of type ~s" g$214$15280 'library)))) (g$214$15132 (lambda (g$214$15284 g$214$15285) (if (g$214$15088 g$214$15284) (vector-set! g$214$15284 '11 g$214$15285) (error 'set-library-visible?! '"~s is not of type ~s" g$214$15284 'library)))) (g$214$15134 (lambda (g$214$15288) (if (null? g$214$15288) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (g$214$15136 (lambda (g$214$15290) ((letrec ((g$214$15292 (lambda (g$214$15294) (if (null? g$214$15294) '#f (if (g$214$15290 (car g$214$15294)) (car g$214$15294) (g$214$15292 (cdr g$214$15294))))))) g$214$15292) ((g$214$15083))))) (g$214$15138 (g$214$14920 '(".") (lambda (g$214$15296) (if (if (list? g$214$15296) (begin '#f (for-all string? g$214$15296)) '#f) (map (lambda (g$214$15298) g$214$15298) g$214$15296) (assertion-violation 'library-path '"not a list of strings" g$214$15296))))) (g$214$15140 (lambda (g$214$15300) (call-with-values (lambda () (open-string-output-port)) (lambda (g$214$15302 g$214$15303) (letrec ((g$214$15306 (lambda (g$214$15322) (if (<= '0 g$214$15322 '9) (display g$214$15322 g$214$15302) (display (integer->char (+ (char->integer '#\A) (- g$214$15322 '10))) g$214$15302))))) (begin ((letrec ((g$214$15308 (lambda (g$214$15310) (if (null? g$214$15310) (display '".ss" g$214$15302) (begin (display '"/" g$214$15302) (for-each (lambda (g$214$15312) (if ((lambda (g$214$15314) (if g$214$15314 g$214$15314 ((lambda (g$214$15316) (if g$214$15316 g$214$15316 ((lambda (g$214$15318) (if g$214$15318 g$214$15318 (begin '#f (memv g$214$15312 '(#\- #\. #\_ #\~))))) (char<=? '#\0 g$214$15312 '#\9)))) (char<=? '#\A g$214$15312 '#\Z)))) (char<=? '#\a g$214$15312 '#\z)) (display g$214$15312 g$214$15302) (begin (display '"%" g$214$15302) ((lambda (g$214$15320) (begin (g$214$15306 (quotient g$214$15320 '16)) (g$214$15306 (remainder g$214$15320 '16)))) (char->integer g$214$15312))))) (string->list (symbol->string (car g$214$15310)))) (g$214$15308 (cdr g$214$15310))))))) g$214$15308) g$214$15300) (g$214$15303))))))) (g$214$15142 (g$214$14920 (lambda (g$214$15324) ((lambda (g$214$15326) ((letrec ((g$214$15328 (lambda (g$214$15330 g$214$15331) (if (null? g$214$15330) (display '"cannot locate library in library-path") ((lambda (g$214$15334) (if (file-exists? g$214$15334) g$214$15334 (g$214$15328 (cdr g$214$15330) (cons g$214$15334 g$214$15331)))) (string-append (car g$214$15330) g$214$15326)))))) g$214$15328) (g$214$15138) '())) (g$214$15140 g$214$15324))) (lambda (g$214$15336) (if (procedure? g$214$15336) g$214$15336 (assertion-violation 'file-locator '"not a procedure" g$214$15336))))) (g$214$15144 (g$214$14920 (lambda (g$214$15338) ((lambda (g$214$15340) (if (string? g$214$15340) (begin '#f (with-input-from-file g$214$15340 g$214$14915)) '#f)) ((g$214$15142) g$214$15338))) (lambda (g$214$15342) (if (procedure? g$214$15342) g$214$15342 (assertion-violation 'library-locator '"not a procedure" g$214$15342))))) (g$214$15146 (g$214$14920 (lambda (g$214$15344) (assertion-violation 'library-expander '"not initialized")) (lambda (g$214$15346) (if (procedure? g$214$15346) g$214$15346 (assertion-violation 'library-expander '"not a procedure" g$214$15346))))) (g$214$15148 (g$214$14920 '())) (g$214$15150 (display '"hoge3")) (g$214$15152 (lambda (g$214$15348) (begin (if (member g$214$15348 (g$214$15148)) (assertion-violation '#f '"circular attempt to import library was detected" g$214$15348) (void)) ((lambda (g$214$15352 g$214$15353) ((lambda (g$214$15356) (dynamic-wind g$214$15356 (lambda () ((lambda (g$214$15358) (begin (if g$214$15358 (void) (assertion-violation '#f '"cannot find library" g$214$15348)) ((g$214$15146) g$214$15358) ((lambda (g$214$15360) (if g$214$15360 g$214$15360 (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" g$214$15348)))) (g$214$15136 (lambda (g$214$15362) (equal? (g$214$15092 g$214$15362) g$214$15348)))))) ((g$214$15144) g$214$15348))) g$214$15356)) (lambda () ((lambda (g$214$15364) (begin (g$214$15352 g$214$15353) (set! g$214$15353 g$214$15364))) (g$214$15352))))) g$214$15148 (cons g$214$15348 (g$214$15148)))))) (g$214$15154 (lambda (g$214$15366) ((lambda (g$214$15368) (if g$214$15368 g$214$15368 (begin '#f (g$214$15152 g$214$15366)))) (g$214$15136 (lambda (g$214$15370) (equal? (g$214$15092 g$214$15370) g$214$15366)))))) (g$214$15156 (lambda (g$214$15372) (if (g$214$15136 (lambda (g$214$15374) (equal? (g$214$15092 g$214$15374) g$214$15372))) (begin '#f '#t) '#f))) (g$214$15158 (lambda (g$214$15376) ((lambda (g$214$15378) ((lambda (g$214$15380) (if g$214$15380 g$214$15380 (begin '#f (assertion-violation '#f '"cannot find library with required spec" g$214$15376)))) (g$214$15136 (lambda (g$214$15382) (eq? g$214$15378 (g$214$15090 g$214$15382)))))) (car g$214$15376)))) (g$214$15160 (make-eq-hashtable)) (g$214$15162 (lambda (g$214$15384) (begin ((lambda (g$214$15386) (for-each (lambda (g$214$15388) ((lambda (g$214$15390 g$214$15391) ((lambda (g$214$15394) (hashtable-set! g$214$15160 g$214$15390 g$214$15394)) ((lambda (g$214$15396) (if (memv g$214$15396 '(global)) (cons 'global (cons g$214$15384 (cdr g$214$15391))) (if (memv g$214$15396 '(global-macro)) (cons 'global-macro (cons g$214$15384 (cdr g$214$15391))) (if (memv g$214$15396 '(global-macro!)) (cons 'global-macro! (cons g$214$15384 (cdr g$214$15391))) g$214$15391)))) (car g$214$15391)))) (car g$214$15388) (cdr g$214$15388))) g$214$15386)) (g$214$15104 g$214$15384)) ((g$214$15083) g$214$15384)))) (g$214$15164 (lambda (g$214$15397 g$214$15398 g$214$15399 g$214$15400 g$214$15401 g$214$15402 g$214$15403 g$214$15404 g$214$15405 g$214$15406 g$214$15407) ((lambda (g$214$15419 g$214$15420 g$214$15421) (begin (if (if (symbol? g$214$15397) (if (list? g$214$15398) (begin '#f (list? g$214$15399)) '#f) '#f) (void) (assertion-violation 'install-library '"invalid spec with id/name/ver" g$214$15397 g$214$15398 g$214$15399)) (if (g$214$15156 g$214$15398) (assertion-violation 'install-library '"library is already installed" g$214$15398) (void)) ((lambda (g$214$15425) (g$214$15162 g$214$15425)) (g$214$15086 g$214$15397 g$214$15398 g$214$15399 g$214$15419 g$214$15420 g$214$15421 g$214$15403 g$214$15404 g$214$15405 g$214$15406 g$214$15407)))) (map g$214$15158 g$214$15400) (map g$214$15158 g$214$15401) (map g$214$15158 g$214$15402)))) (g$214$15166 (lambda (g$214$15427 g$214$15428 g$214$15429) (g$214$15124 g$214$15427 (cons (cons g$214$15428 g$214$15429) (g$214$15102 g$214$15427))))) (g$214$15168 (lambda (g$214$15433 g$214$15434 g$214$15435) (begin (g$214$15126 g$214$15433 (cons (cons g$214$15434 g$214$15435) (g$214$15104 g$214$15433))) (hashtable-set! g$214$15160 g$214$15434 g$214$15435)))) (g$214$15170 (lambda (g$214$15439) (hashtable-ref g$214$15160 g$214$15439 '#f))) (g$214$15172 (lambda (g$214$15441) ((lambda (g$214$15443) (if (procedure? g$214$15443) (begin (g$214$15130 g$214$15441 (lambda () (assertion-violation 'invoke '"circularity detected" g$214$15441))) (for-each g$214$15172 (g$214$15100 g$214$15441)) (g$214$15130 g$214$15441 (lambda () (assertion-violation 'invoke '"first invoke did not return" g$214$15441))) (g$214$15443) (g$214$15130 g$214$15441 '#t)) (void))) (g$214$15108 g$214$15441)))) (g$214$15174 (lambda (g$214$15445) ((lambda (g$214$15447) (if (procedure? g$214$15447) (begin (g$214$15128 g$214$15445 (lambda () (assertion-violation 'visit '"circularity detected" g$214$15445))) (for-each g$214$15172 (g$214$15098 g$214$15445)) (g$214$15128 g$214$15445 (lambda () (assertion-violation 'invoke '"first visit did not return" g$214$15445))) (g$214$15447) (g$214$15128 g$214$15445 '#t)) (void))) (g$214$15106 g$214$15445)))) (g$214$15176 (lambda (g$214$15449) (g$214$15172 (g$214$15158 g$214$15449)))) (g$214$15178 (display '"hoge4")) (g$214$15180 (lambda g$214$15459 ((lambda (g$214$15460) (if (= g$214$15460 '1) (apply (lambda (g$214$15451) ((letrec ((g$214$15453 (lambda (g$214$15455) (if (null? g$214$15455) '() (if ((lambda (g$214$15457) (if g$214$15457 g$214$15457 (begin '#f (g$214$15110 (car g$214$15455))))) g$214$15451) (cons (car g$214$15455) (g$214$15453 (cdr g$214$15455))) (g$214$15453 (cdr g$214$15455))))))) g$214$15453) ((g$214$15083)))) g$214$15459) (if (= g$214$15460 '0) (apply (lambda () (g$214$15180 '#f)) g$214$15459) (error 'apply '"invalid arg count")))) (length g$214$15459)))) (g$214$15182 (lambda (g$214$15461) (begin (if (g$214$15088 g$214$15461) (void) (assertion-violation 'library-spec '"not a library" g$214$15461)) (list (g$214$15090 g$214$15461) (g$214$15092 g$214$15461) (g$214$15094 g$214$15461)))))) (begin (set! g$214$15515 g$214$15182) (set! g$214$15514 g$214$15180) (set! g$214$15513 g$214$15178) (set! g$214$15512 g$214$15176) (set! g$214$15511 g$214$15174) (set! g$214$15510 g$214$15172) (set! g$214$15509 g$214$15170) (set! g$214$15508 g$214$15168) (set! g$214$15507 g$214$15166) (set! g$214$15506 g$214$15164) (set! g$214$15505 g$214$15162) (set! g$214$15504 g$214$15160) (set! g$214$15503 g$214$15158) (set! g$214$15502 g$214$15156) (set! g$214$15501 g$214$15154) (set! g$214$15500 g$214$15152) (set! g$214$15499 g$214$15150) (set! g$214$15498 g$214$15148) (set! g$214$15497 g$214$15146) (set! g$214$15496 g$214$15144) (set! g$214$15495 g$214$15142) (set! g$214$15494 g$214$15140) (set! g$214$15493 g$214$15138) (set! g$214$15492 g$214$15136) (set! g$214$15491 g$214$15134) (set! g$214$15490 g$214$15132) (set! g$214$15489 g$214$15130) (set! g$214$15488 g$214$15128) (set! g$214$15487 g$214$15126) (set! g$214$15486 g$214$15124) (set! g$214$15485 g$214$15122) (set! g$214$15484 g$214$15120) (set! g$214$15483 g$214$15118) (set! g$214$15482 g$214$15116) (set! g$214$15481 g$214$15114) (set! g$214$15480 g$214$15112) (set! g$214$15479 g$214$15110) (set! g$214$15478 g$214$15108) (set! g$214$15477 g$214$15106) (set! g$214$15476 g$214$15104) (set! g$214$15475 g$214$15102) (set! g$214$15474 g$214$15100) (set! g$214$15473 g$214$15098) (set! g$214$15472 g$214$15096) (set! g$214$15471 g$214$15094) (set! g$214$15470 g$214$15092) (set! g$214$15469 g$214$15090) (set! g$214$15468 g$214$15088) (set! g$214$15467 g$214$15086) (set! g$214$15466 g$214$15083) (set! g$214$15465 g$214$15081) (set! g$214$15464 g$214$15079) (set! g$214$15463 g$214$15077))))


(begin (define g$214$15847 '#f) (define g$214$15848 '#f) (define g$214$15849 '#f) (define g$214$15850 '#f) (define g$214$15851 '#f) (define g$214$15852 '#f) (define g$214$15853 '#f) (define g$214$15854 '#f) (define g$214$15855 '#f) (letrec ((g$214$15517 (lambda (g$214$15735) (cons 'define (cons g$214$15735 '('#f))))) (g$214$15649 (lambda (g$214$15737 g$214$15738 g$214$15739) (list 'lambda g$214$15738 g$214$15739))) (g$214$15651 (lambda (g$214$15743 g$214$15744 g$214$15745) (letrec ((g$214$15749 (lambda (g$214$15803) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (g$214$15751 (lambda (g$214$15781 g$214$15782 g$214$15783) (call-with-values (lambda () ((letrec ((g$214$15789 (lambda (g$214$15791 g$214$15792) (if (pair? g$214$15791) (g$214$15789 (cdr g$214$15791) (+ g$214$15792 '1)) (if (null? g$214$15791) (values g$214$15792 '=) (values g$214$15792 '>=)))))) g$214$15789) g$214$15783 '0)) (lambda (g$214$15795 g$214$15796) ((lambda (g$214$15799 g$214$15800) (list (list 'primitive g$214$15799) g$214$15782 (list 'quote g$214$15800))) g$214$15796 g$214$15795))))) (g$214$15753 (lambda (g$214$15773 g$214$15774 g$214$15775 g$214$15776) (list '(primitive apply) (g$214$15649 g$214$15773 g$214$15775 g$214$15776) g$214$15774))) (g$214$15755 (lambda (g$214$15757 g$214$15758 g$214$15759) ((lambda (g$214$15763 g$214$15764) (list 'lambda g$214$15763 (g$214$15653 g$214$15757 (list g$214$15764) (list (list '(primitive length) g$214$15763)) ((letrec ((g$214$15767 (lambda (g$214$15769 g$214$15770) (if (null? g$214$15769) (g$214$15749 g$214$15757) (list 'if (g$214$15751 g$214$15757 g$214$15764 (car g$214$15769)) (g$214$15753 g$214$15757 g$214$15763 (car g$214$15769) (car g$214$15770)) (g$214$15767 (cdr g$214$15769) (cdr g$214$15770))))))) g$214$15767) g$214$15744 g$214$15759)))) (gensym) (gensym))))) (if (= (length g$214$15745) '1) (g$214$15649 g$214$15743 (car g$214$15744) (car g$214$15745)) (g$214$15755 g$214$15743 g$214$15744 g$214$15745))))) (g$214$15653 (lambda (g$214$15805 g$214$15806 g$214$15807 g$214$15808) (cons (g$214$15649 g$214$15805 g$214$15806 g$214$15808) g$214$15807))) (g$214$15725 (lambda (g$214$15813 g$214$15814) ((letrec ((g$214$15817 (lambda (g$214$15819) (if (null? (cdr g$214$15819)) (car g$214$15819) (if (equal? (car g$214$15819) (g$214$15727)) (g$214$15817 (cdr g$214$15819)) (cons 'begin g$214$15819)))))) g$214$15817) g$214$15814))) (g$214$15727 (lambda () '((primitive void)))) (g$214$15729 (lambda (g$214$15821 g$214$15822 g$214$15823 g$214$15824) (if (null? g$214$15822) g$214$15824 (list 'letrec (map list g$214$15822 g$214$15823) g$214$15824)))) (g$214$15731 (lambda (g$214$15829 g$214$15830 g$214$15831 g$214$15832) (if (null? g$214$15830) g$214$15832 (list 'letrec (map list g$214$15830 g$214$15831) g$214$15832)))) (g$214$15733 (lambda (g$214$15837 g$214$15838 g$214$15839 g$214$15840 g$214$15841) (list 'library-letrec* (map list g$214$15838 g$214$15839 g$214$15840) g$214$15841)))) (begin (set! g$214$15855 g$214$15733) (set! g$214$15854 g$214$15731) (set! g$214$15853 g$214$15729) (set! g$214$15852 g$214$15727) (set! g$214$15851 g$214$15725) (set! g$214$15850 g$214$15653) (set! g$214$15849 g$214$15651) (set! g$214$15848 g$214$15649) (set! g$214$15847 g$214$15517))))


(begin (define g$214$27786 '#f) (define g$214$27787 '#f) (define g$214$27788 '#f) (define g$214$27789 '#f) (define g$214$27790 '#f) (define g$214$27791 '#f) (define g$214$27792 '#f) (define g$214$27793 '#f) (define g$214$27794 '#f) (define g$214$27795 '#f) (define g$214$27796 '#f) (define g$214$27797 '#f) (define g$214$27798 '#f) (define g$214$27799 '#f) (define g$214$27800 '#f) (define g$214$27801 '#f) (define g$214$27802 '#f) (define g$214$27803 '#f) (define g$214$27804 '#f) (define g$214$27805 '#f) (define g$214$27806 '#f) (define g$214$27807 '#f) (define g$214$27808 '#f) (define g$214$27809 '#f) (define g$214$27810 '#f) (define g$214$27811 '#f) (define g$214$27812 '#f) (define g$214$27813 '#f) (define g$214$27814 '#f) (define g$214$27815 '#f) (define g$214$27816 '#f) (define g$214$27817 '#f) (define g$214$27818 '#f) (define g$214$27819 '#f) (define g$214$27820 '#f) (define g$214$27821 '#f) (define g$214$27822 '#f) (define g$214$27823 '#f) (define g$214$27824 '#f) (define g$214$27825 '#f) (define g$214$27826 '#f) (define g$214$27827 '#f) (define g$214$27828 '#f) (define g$214$27829 '#f) (define g$214$27830 '#f) (define g$214$27831 '#f) (define g$214$27832 '#f) (define g$214$27833 '#f) (define g$214$27834 '#f) (define g$214$27835 '#f) (define g$214$27836 '#f) (define g$214$27837 '#f) (define g$214$27838 '#f) (define g$214$27839 '#f) (define g$214$27840 '#f) (define g$214$27841 '#f) (define g$214$27842 '#f) (define g$214$27843 '#f) (define g$214$27844 '#f) (define g$214$27845 '#f) (define g$214$27846 '#f) (define g$214$27847 '#f) (define g$214$27848 '#f) (define g$214$27849 '#f) (define g$214$27850 '#f) (define g$214$27851 '#f) (define g$214$27852 '#f) (define g$214$27853 '#f) (define g$214$27854 '#f) (define g$214$27855 '#f) (define g$214$27856 '#f) (define g$214$27857 '#f) (define g$214$27858 '#f) (define g$214$27859 '#f) (define g$214$27860 '#f) (define g$214$27861 '#f) (define g$214$27862 '#f) (define g$214$27863 '#f) (define g$214$27864 '#f) (define g$214$27865 '#f) (define g$214$27866 '#f) (define g$214$27867 '#f) (define g$214$27868 '#f) (define g$214$27869 '#f) (define g$214$27870 '#f) (define g$214$27871 '#f) (define g$214$27872 '#f) (define g$214$27873 '#f) (define g$214$27874 '#f) (define g$214$27875 '#f) (define g$214$27876 '#f) (define g$214$27877 '#f) (define g$214$27878 '#f) (define g$214$27879 '#f) (define g$214$27880 '#f) (define g$214$27881 '#f) (define g$214$27882 '#f) (define g$214$27883 '#f) (define g$214$27884 '#f) (define g$214$27885 '#f) (define g$214$27886 '#f) (define g$214$27887 '#f) (define g$214$27888 '#f) (define g$214$27889 '#f) (define g$214$27890 '#f) (define g$214$27891 '#f) (define g$214$27892 '#f) (define g$214$27893 '#f) (define g$214$27894 '#f) (define g$214$27895 '#f) (define g$214$27896 '#f) (define g$214$27897 '#f) (define g$214$27898 '#f) (define g$214$27899 '#f) (define g$214$27900 '#f) (define g$214$27901 '#f) (define g$214$27902 '#f) (define g$214$27903 '#f) (define g$214$27904 '#f) (define g$214$27905 '#f) (define g$214$27906 '#f) (define g$214$27907 '#f) (define g$214$27908 '#f) (define g$214$27909 '#f) (define g$214$27910 '#f) (define g$214$27911 '#f) (define g$214$27912 '#f) (define g$214$27913 '#f) (define g$214$27914 '#f) (define g$214$27915 '#f) (define g$214$27916 '#f) (define g$214$27917 '#f) (define g$214$27918 '#f) (define g$214$27919 '#f) (define g$214$27920 '#f) (define g$214$27921 '#f) (define g$214$27922 '#f) (define g$214$27923 '#f) (define g$214$27924 '#f) (define g$214$27925 '#f) (define g$214$27926 '#f) (define g$214$27927 '#f) (define g$214$27928 '#f) (define g$214$27929 '#f) (define g$214$27930 '#f) (define g$214$27931 '#f) (define g$214$27932 '#f) (define g$214$27933 '#f) (define g$214$27934 '#f) (define g$214$27935 '#f) (define g$214$27936 '#f) (define g$214$27937 '#f) (define g$214$27938 '#f) (define g$214$27939 '#f) (define g$214$27940 '#f) (define g$214$27941 '#f) (define g$214$27942 '#f) (define g$214$27943 '#f) (define g$214$27944 '#f) (define g$214$27945 '#f) (define g$214$27946 '#f) (define g$214$27947 '#f) (define g$214$27948 '#f) (define g$214$27949 '#f) (define g$214$27950 '#f) (define g$214$27951 '#f) (define g$214$27952 '#f) (define g$214$27953 '#f) (define g$214$27954 '#f) (define g$214$27955 '#f) (define g$214$27956 '#f) (define g$214$27957 '#f) (define g$214$27958 '#f) (define g$214$27959 '#f) (define g$214$27960 '#f) (define g$214$27961 '#f) (define g$214$27962 '#f) (define g$214$27963 '#f) (define g$214$27964 '#f) (define g$214$27965 '#f) (define g$214$27966 '#f) (define g$214$27967 '#f) (define g$214$27968 '#f) (define g$214$27969 '#f) (define g$214$27970 '#f) (define g$214$27971 '#f) (define g$214$27972 '#f) (define g$214$27973 '#f) (define g$214$27974 '#f) (define g$214$27975 '#f) (define g$214$27976 '#f) (define g$214$27977 '#f) (define g$214$27978 '#f) (define g$214$27979 '#f) (define g$214$27980 '#f) (define g$214$27981 '#f) (define g$214$27982 '#f) (define g$214$27983 '#f) (define g$214$27984 '#f) (define g$214$27985 '#f) (define g$214$27986 '#f) (define g$214$27987 '#f) (define g$214$27988 '#f) (define g$214$27989 '#f) (letrec ((g$214$15867 (lambda (g$214$16719 g$214$16720) (if (memq g$214$16719 g$214$16720) g$214$16720 (cons g$214$16719 g$214$16720)))) (g$214$15869 (lambda (g$214$16723 g$214$16724) (if (null? g$214$16723) g$214$16724 (if (memq (car g$214$16723) g$214$16724) (g$214$15869 (cdr g$214$16723) g$214$16724) (cons (car g$214$16723) (g$214$15869 (cdr g$214$16723) g$214$16724)))))) (g$214$15874 '(top)) (g$214$15876 (lambda (g$214$16727) (memq 'top g$214$16727))) (g$214$15878 (lambda (g$214$16729) (if (symbol? g$214$16729) (gensym g$214$16729) (if (g$214$15920 g$214$16729) (g$214$15878 (g$214$15970 g$214$16729)) (assertion-violation 'gen-lexical '"BUG: invalid arg" g$214$16729))))) (g$214$15880 (lambda (g$214$16731) (g$214$15878 g$214$16731))) (g$214$15882 (lambda (g$214$16733) (gensym))) (g$214$15885 (lambda (g$214$16735 g$214$16736 g$214$16737 g$214$16738) (vector 'g$214$15884 g$214$16735 g$214$16736 g$214$16737 g$214$16738))) (g$214$15887 (lambda (g$214$16743) (if (vector? g$214$16743) (if (= (vector-length g$214$16743) (+ '1 (length '(sym* mark** label* sealed/freq)))) (begin '#f (eq? (vector-ref g$214$16743 '0) 'g$214$15884)) '#f) '#f))) (g$214$15889 (lambda (g$214$16745) (if (g$214$15887 g$214$16745) (vector-ref g$214$16745 '1) (error 'rib-sym* '"~s is not of type ~s" g$214$16745 'rib)))) (g$214$15891 (lambda (g$214$16747) (if (g$214$15887 g$214$16747) (vector-ref g$214$16747 '2) (error 'rib-mark** '"~s is not of type ~s" g$214$16747 'rib)))) (g$214$15893 (lambda (g$214$16749) (if (g$214$15887 g$214$16749) (vector-ref g$214$16749 '3) (error 'rib-label* '"~s is not of type ~s" g$214$16749 'rib)))) (g$214$15895 (lambda (g$214$16751) (if (g$214$15887 g$214$16751) (vector-ref g$214$16751 '4) (error 'rib-sealed/freq '"~s is not of type ~s" g$214$16751 'rib)))) (g$214$15897 (lambda (g$214$16753 g$214$16754) (if (g$214$15887 g$214$16753) (vector-set! g$214$16753 '1 g$214$16754) (error 'set-rib-sym*! '"~s is not of type ~s" g$214$16753 'rib)))) (g$214$15899 (lambda (g$214$16757 g$214$16758) (if (g$214$15887 g$214$16757) (vector-set! g$214$16757 '2 g$214$16758) (error 'set-rib-mark**! '"~s is not of type ~s" g$214$16757 'rib)))) (g$214$15901 (lambda (g$214$16761 g$214$16762) (if (g$214$15887 g$214$16761) (vector-set! g$214$16761 '3 g$214$16762) (error 'set-rib-label*! '"~s is not of type ~s" g$214$16761 'rib)))) (g$214$15903 (lambda (g$214$16765 g$214$16766) (if (g$214$15887 g$214$16765) (vector-set! g$214$16765 '4 g$214$16766) (error 'set-rib-sealed/freq! '"~s is not of type ~s" g$214$16765 'rib)))) (g$214$15905 (lambda () (g$214$15885 '() '() '() '#f))) (g$214$15907 (lambda (g$214$16769 g$214$16770 g$214$16771) (letrec ((g$214$16775 (lambda (g$214$16787 g$214$16788 g$214$16789 g$214$16790 g$214$16791) (if (pair? g$214$16789) (begin '#f (if (if (eq? g$214$16787 (car g$214$16789)) (begin '#f (g$214$15972 g$214$16788 (car g$214$16790))) '#f) (car g$214$16791) (g$214$16775 g$214$16787 g$214$16788 (cdr g$214$16789) (cdr g$214$16790) (cdr g$214$16791)))) '#f)))) (begin (if (g$214$15895 g$214$16769) (assertion-violation 'extend-rib! '"BUG: rib is sealed" g$214$16769) (void)) ((lambda (g$214$16777 g$214$16778) ((lambda (g$214$16781) ((lambda (g$214$16783) (if g$214$16783 ((lambda (g$214$16785) (if (eq? g$214$16771 g$214$16785) (void) (g$214$16703 '#f '"cannot redefine" g$214$16770))) g$214$16783) (begin (g$214$15897 g$214$16769 (cons g$214$16777 g$214$16781)) (g$214$15899 g$214$16769 (cons g$214$16778 (g$214$15891 g$214$16769))) (g$214$15901 g$214$16769 (cons g$214$16771 (g$214$15893 g$214$16769)))))) (if (memq g$214$16777 (g$214$15889 g$214$16769)) (begin '#f (g$214$16775 g$214$16777 g$214$16778 g$214$16781 (g$214$15891 g$214$16769) (g$214$15893 g$214$16769))) '#f))) (g$214$15889 g$214$16769))) (g$214$15970 g$214$16770) (g$214$15924 g$214$16770)))))) (g$214$15909 (lambda (g$214$16797) ((lambda (g$214$16799) (if (null? g$214$16799) (void) ((lambda (g$214$16801) (begin (g$214$15897 g$214$16797 g$214$16801) (g$214$15899 g$214$16797 (list->vector (g$214$15891 g$214$16797))) (g$214$15901 g$214$16797 (list->vector (g$214$15893 g$214$16797))) (g$214$15903 g$214$16797 (make-vector (vector-length g$214$16801) '0)))) (list->vector g$214$16799)))) (g$214$15889 g$214$16797)))) (g$214$15911 (lambda (g$214$16803) (if (g$214$15895 g$214$16803) (begin (g$214$15903 g$214$16803 '#f) (g$214$15897 g$214$16803 (vector->list (g$214$15889 g$214$16803))) (g$214$15899 g$214$16803 (vector->list (g$214$15891 g$214$16803))) (g$214$15901 g$214$16803 (vector->list (g$214$15893 g$214$16803)))) (void)))) (g$214$15913 (lambda (g$214$16805 g$214$16806) ((lambda (g$214$16809) ((lambda (g$214$16811) ((lambda (g$214$16813) (begin (vector-set! g$214$16809 g$214$16813 (+ g$214$16811 '1)) (if (= g$214$16813 g$214$16806) (void) ((lambda (g$214$16815 g$214$16816 g$214$16817) (begin ((lambda (g$214$16821) (begin (vector-set! g$214$16815 g$214$16806 (vector-ref g$214$16815 g$214$16813)) (vector-set! g$214$16815 g$214$16813 g$214$16821))) (vector-ref g$214$16815 g$214$16806)) ((lambda (g$214$16823) (begin (vector-set! g$214$16816 g$214$16806 (vector-ref g$214$16816 g$214$16813)) (vector-set! g$214$16816 g$214$16813 g$214$16823))) (vector-ref g$214$16816 g$214$16806)) ((lambda (g$214$16825) (begin (vector-set! g$214$16817 g$214$16806 (vector-ref g$214$16817 g$214$16813)) (vector-set! g$214$16817 g$214$16813 g$214$16825))) (vector-ref g$214$16817 g$214$16806)))) (g$214$15889 g$214$16805) (g$214$15891 g$214$16805) (g$214$15893 g$214$16805))))) ((letrec ((g$214$16827 (lambda (g$214$16829) (if (zero? g$214$16829) '0 ((lambda (g$214$16831) (if (= g$214$16811 (vector-ref g$214$16809 g$214$16831)) (g$214$16827 g$214$16831) g$214$16829)) (- g$214$16829 '1)))))) g$214$16827) g$214$16806))) (vector-ref g$214$16809 g$214$16806))) (g$214$15895 g$214$16805)))) (g$214$15915 (lambda (g$214$16833 g$214$16834) (g$214$15885 (map g$214$15970 g$214$16833) (map g$214$15924 g$214$16833) g$214$16834 '#f))) (g$214$15918 (lambda (g$214$16837 g$214$16838 g$214$16839) (vector 'g$214$15917 g$214$16837 g$214$16838 g$214$16839))) (g$214$15920 (lambda (g$214$16843) (if (vector? g$214$16843) (if (= (vector-length g$214$16843) (+ '1 (length '(expr mark* subst*)))) (begin '#f (eq? (vector-ref g$214$16843 '0) 'g$214$15917)) '#f) '#f))) (g$214$15922 (lambda (g$214$16845) (if (g$214$15920 g$214$16845) (vector-ref g$214$16845 '1) (error 'stx-expr '"~s is not of type ~s" g$214$16845 'stx)))) (g$214$15924 (lambda (g$214$16847) (if (g$214$15920 g$214$16847) (vector-ref g$214$16847 '2) (error 'stx-mark* '"~s is not of type ~s" g$214$16847 'stx)))) (g$214$15926 (lambda (g$214$16849) (if (g$214$15920 g$214$16849) (vector-ref g$214$16849 '3) (error 'stx-subst* '"~s is not of type ~s" g$214$16849 'stx)))) (g$214$15928 (lambda (g$214$16851 g$214$16852) (if (g$214$15920 g$214$16851) (vector-set! g$214$16851 '1 g$214$16852) (error 'set-stx-expr! '"~s is not of type ~s" g$214$16851 'stx)))) (g$214$15930 (lambda (g$214$16855 g$214$16856) (if (g$214$15920 g$214$16855) (vector-set! g$214$16855 '2 g$214$16856) (error 'set-stx-mark*! '"~s is not of type ~s" g$214$16855 'stx)))) (g$214$15932 (lambda (g$214$16859 g$214$16860) (if (g$214$15920 g$214$16859) (vector-set! g$214$16859 '3 g$214$16860) (error 'set-stx-subst*! '"~s is not of type ~s" g$214$16859 'stx)))) (g$214$15934 (lambda (g$214$16863 g$214$16864) (g$214$15918 g$214$16864 (g$214$15924 g$214$16863) (g$214$15926 g$214$16863)))) (g$214$15936 (lambda () (string '#\m))) (g$214$15938 '#f) (g$214$15940 not) (g$214$15942 (lambda (g$214$16867 g$214$16868 g$214$16869) (letrec ((g$214$16873 (lambda (g$214$16879 g$214$16880) ((letrec ((g$214$16883 (lambda (g$214$16885 g$214$16886) (if (null? g$214$16886) (cdr g$214$16880) (cons g$214$16885 (g$214$16883 (car g$214$16886) (cdr g$214$16886))))))) g$214$16883) (car g$214$16879) (cdr g$214$16879))))) ((lambda (g$214$16875 g$214$16876) (if (if (not (null? g$214$16867)) (if (not (null? g$214$16875)) (begin '#f (g$214$15940 (car g$214$16875))) '#f) '#f) (values (g$214$16873 g$214$16867 g$214$16875) (g$214$16873 g$214$16868 g$214$16876)) (values (append g$214$16867 g$214$16875) (append g$214$16868 g$214$16876)))) (g$214$15924 g$214$16869) (g$214$15926 g$214$16869))))) (g$214$15944 (lambda (g$214$16889 g$214$16890 g$214$16891) (if (g$214$15920 g$214$16889) (call-with-values (lambda () (g$214$15942 g$214$16890 g$214$16891 g$214$16889)) (lambda (g$214$16897 g$214$16898) ((lambda (g$214$16901 g$214$16902) (g$214$15918 (g$214$15922 g$214$16889) g$214$16902 g$214$16901)) g$214$16898 g$214$16897))) (g$214$15918 g$214$16889 g$214$16890 g$214$16891)))) (g$214$15946 (lambda (g$214$16905 g$214$16906) (g$214$15944 g$214$16906 (list g$214$16905) '(shift)))) (g$214$15948 (lambda (g$214$16909 g$214$16910) (g$214$15944 g$214$16910 '() (list g$214$16909)))) (g$214$15950 (lambda (g$214$16913 g$214$16914) (if (g$214$15920 g$214$16913) (g$214$15950 (g$214$15922 g$214$16913) g$214$16914) (if (g$214$14916 g$214$16913) (g$214$15950 (g$214$14917 g$214$16913) g$214$16914) (g$214$16914 g$214$16913))))) (g$214$15952 (lambda (g$214$16917) (if (g$214$15920 g$214$16917) ((lambda (g$214$16919 g$214$16920 g$214$16921) (map (lambda (g$214$16925) (g$214$15944 g$214$16925 g$214$16920 g$214$16921)) g$214$16919)) (g$214$15952 (g$214$15922 g$214$16917)) (g$214$15924 g$214$16917) (g$214$15926 g$214$16917)) (if (g$214$14916 g$214$16917) (g$214$15952 (g$214$14917 g$214$16917)) (if (vector? g$214$16917) (vector->list g$214$16917) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" g$214$16917)))))) (g$214$15954 (lambda (g$214$16927) (g$214$15950 g$214$16927 pair?))) (g$214$15956 (lambda (g$214$16929) (g$214$15950 g$214$16929 vector?))) (g$214$15958 (lambda (g$214$16931) (g$214$15950 g$214$16931 null?))) (g$214$15960 (lambda (g$214$16933) ((lambda (g$214$16935) (if g$214$16935 g$214$16935 (begin '#f (if (g$214$15954 g$214$16933) (begin '#f (g$214$15960 (g$214$15964 g$214$16933))) '#f)))) (g$214$15958 g$214$16933)))) (g$214$15962 (lambda (g$214$16937) (if (g$214$15920 g$214$16937) (g$214$15944 (g$214$15962 (g$214$15922 g$214$16937)) (g$214$15924 g$214$16937) (g$214$15926 g$214$16937)) (if (g$214$14916 g$214$16937) (g$214$15962 (g$214$14917 g$214$16937)) (if (pair? g$214$16937) (car g$214$16937) (assertion-violation 'syntax-car '"BUG: not a pair" g$214$16937)))))) (g$214$15964 (lambda (g$214$16939) (if (g$214$15920 g$214$16939) (g$214$15944 (g$214$15964 (g$214$15922 g$214$16939)) (g$214$15924 g$214$16939) (g$214$15926 g$214$16939)) (if (g$214$14916 g$214$16939) (g$214$15964 (g$214$14917 g$214$16939)) (if (pair? g$214$16939) (cdr g$214$16939) (assertion-violation 'syntax-cdr '"BUG: not a pair" g$214$16939)))))) (g$214$15966 (lambda (g$214$16941) (if (g$214$15954 g$214$16941) (cons (g$214$15962 g$214$16941) (g$214$15966 (g$214$15964 g$214$16941))) (if (g$214$15958 g$214$16941) '() (assertion-violation 'syntax->list '"BUG: invalid argument" g$214$16941))))) (g$214$15968 (lambda (g$214$16943) (g$214$15950 g$214$16943 symbol?))) (g$214$15970 (lambda (g$214$16945) (if (g$214$15920 g$214$16945) (g$214$15970 (g$214$15922 g$214$16945)) (if (g$214$14916 g$214$16945) (g$214$14917 g$214$16945) (if (symbol? g$214$16945) g$214$16945 (assertion-violation 'id->sym '"BUG: not an id" g$214$16945)))))) (g$214$15972 (lambda (g$214$16947 g$214$16948) ((lambda (g$214$16951) (if g$214$16951 g$214$16951 (begin '#f (if (pair? g$214$16947) (if (pair? g$214$16948) (if (eq? (car g$214$16947) (car g$214$16948)) (begin '#f (g$214$15972 (cdr g$214$16947) (cdr g$214$16948))) '#f) '#f) '#f)))) (if (null? g$214$16947) (begin '#f (null? g$214$16948)) '#f)))) (g$214$15974 (lambda (g$214$16953 g$214$16954) (if (eq? (g$214$15970 g$214$16953) (g$214$15970 g$214$16954)) (begin '#f (g$214$15972 (g$214$15924 g$214$16953) (g$214$15924 g$214$16954))) '#f))) (g$214$15976 (lambda (g$214$16957 g$214$16958) ((lambda (g$214$16961 g$214$16962) (if ((lambda (g$214$16965) (if g$214$16965 g$214$16965 (begin '#f g$214$16962))) g$214$16961) (eq? g$214$16961 g$214$16962) (eq? (g$214$15970 g$214$16957) (g$214$15970 g$214$16958)))) (g$214$15992 g$214$16957) (g$214$15992 g$214$16958)))) (g$214$15978 (lambda (g$214$16967) (if (for-all g$214$15968 g$214$16967) (begin '#f (g$214$15980 g$214$16967)) '#f))) (g$214$15980 (lambda (g$214$16969) ((lambda (g$214$16971) (if g$214$16971 g$214$16971 (begin '#f (if (not (g$214$15982 (car g$214$16969) (cdr g$214$16969))) (begin '#f (g$214$15980 (cdr g$214$16969))) '#f)))) (null? g$214$16969)))) (g$214$15982 (lambda (g$214$16973 g$214$16974) (if (pair? g$214$16974) (begin '#f ((lambda (g$214$16977) (if g$214$16977 g$214$16977 (begin '#f (g$214$15982 g$214$16973 (cdr g$214$16974))))) (g$214$15974 g$214$16973 (car g$214$16974)))) '#f))) (g$214$15984 (lambda (g$214$16979) ((lambda (g$214$16981) (if g$214$16981 g$214$16981 ((lambda (g$214$16983) (if g$214$16983 g$214$16983 ((lambda (g$214$16985) (if g$214$16985 g$214$16985 (begin '#f (boolean? g$214$16979)))) (char? g$214$16979)))) (string? g$214$16979)))) (number? g$214$16979)))) (g$214$15986 (lambda (g$214$16987) (if (pair? g$214$16987) (cons (g$214$15986 (car g$214$16987)) (g$214$15986 (cdr g$214$16987))) (if (g$214$14916 g$214$16987) (g$214$14919 g$214$16987) g$214$16987)))) (g$214$15988 (lambda (g$214$16989 g$214$16990) (if (g$214$15876 g$214$16990) (if ((lambda (g$214$16993) (if g$214$16993 g$214$16993 (begin '#f (if (pair? g$214$16989) (begin '#f (g$214$14916 (car g$214$16989))) '#f)))) (g$214$14916 g$214$16989)) (g$214$15986 g$214$16989) g$214$16989) ((letrec ((g$214$16995 (lambda (g$214$16997) (if (g$214$15920 g$214$16997) (g$214$15988 (g$214$15922 g$214$16997) (g$214$15924 g$214$16997)) (if (g$214$14916 g$214$16997) (g$214$14919 g$214$16997) (if (pair? g$214$16997) ((lambda (g$214$16999 g$214$17000) (if (if (eq? g$214$16999 (car g$214$16997)) (begin '#f (eq? g$214$17000 (cdr g$214$16997))) '#f) g$214$16997 (cons g$214$16999 g$214$17000))) (g$214$16995 (car g$214$16997)) (g$214$16995 (cdr g$214$16997))) (if (vector? g$214$16997) ((lambda (g$214$17003) ((lambda (g$214$17005) (if (for-all eq? g$214$17003 g$214$17005) g$214$16997 (list->vector g$214$17005))) (map g$214$16995 g$214$17003))) (vector->list g$214$16997)) g$214$16997))))))) g$214$16995) g$214$16989)))) (g$214$15990 (lambda (g$214$17007) (g$214$15988 g$214$17007 '()))) (g$214$15992 (lambda (g$214$17009) ((lambda (g$214$17011) ((letrec ((g$214$17013 (lambda (g$214$17015 g$214$17016) (if (null? g$214$17015) (g$214$16715 g$214$17011) (if (eq? (car g$214$17015) 'shift) (g$214$17013 (cdr g$214$17015) (cdr g$214$17016)) ((lambda (g$214$17019) (if (g$214$15895 g$214$17019) ((lambda (g$214$17021) ((letrec ((g$214$17023 (lambda (g$214$17025 g$214$17026) (if (= g$214$17025 g$214$17026) (g$214$17013 (cdr g$214$17015) g$214$17016) (if (if (eq? (vector-ref g$214$17021 g$214$17025) g$214$17011) (begin '#f (g$214$15972 g$214$17016 (vector-ref (g$214$15891 g$214$17019) g$214$17025))) '#f) ((lambda (g$214$17029) (begin (g$214$15913 g$214$17019 g$214$17025) g$214$17029)) (vector-ref (g$214$15893 g$214$17019) g$214$17025)) (g$214$17023 (+ g$214$17025 '1) g$214$17026)))))) g$214$17023) '0 (vector-length g$214$17021))) (g$214$15889 g$214$17019)) ((letrec ((g$214$17031 (lambda (g$214$17033 g$214$17034 g$214$17035) (if (null? g$214$17033) (g$214$17013 (cdr g$214$17015) g$214$17016) (if (if (eq? (car g$214$17033) g$214$17011) (begin '#f (g$214$15972 (car g$214$17034) g$214$17016)) '#f) (car g$214$17035) (g$214$17031 (cdr g$214$17033) (cdr g$214$17034) (cdr g$214$17035))))))) g$214$17031) (g$214$15889 g$214$17019) (g$214$15891 g$214$17019) (g$214$15893 g$214$17019)))) (car g$214$17015))))))) g$214$17013) (g$214$15926 g$214$17009) (g$214$15924 g$214$17009))) (g$214$15970 g$214$17009)))) (g$214$15994 (lambda (g$214$17039 g$214$17040) ((lambda (g$214$17043) (if g$214$17043 ((lambda (g$214$17045) (if (if (pair? g$214$17045) (begin '#f (eq? (car g$214$17045) '$core-rtd)) '#f) (cons '$rtd (map g$214$16492 (cdr g$214$17045))) (if (if (pair? g$214$17045) (begin '#f (eq? (car g$214$17045) 'global-rtd)) '#f) ((lambda (g$214$17047 g$214$17048) (cons '$rtd (symbol-value g$214$17048))) (cadr g$214$17045) (cddr g$214$17045)) g$214$17045))) g$214$17043) ((lambda (g$214$17051) (if g$214$17051 (cdr g$214$17051) '(displaced-lexical . #f))) (assq g$214$17039 g$214$17040)))) (g$214$15509 g$214$17039)))) (g$214$15996 cons) (g$214$15998 car) (g$214$16000 cdr) (g$214$16002 (lambda (g$214$17053) (g$214$16701 '#f '"unbound identifier" g$214$17053 (make-undefined-violation)))) (g$214$16004 (lambda (g$214$17055 g$214$17056) (if (g$214$15968 g$214$17055) ((lambda (g$214$17059) ((lambda (g$214$17061) ((lambda (g$214$17063) ((lambda (g$214$17065) ((lambda () (begin (if g$214$17061 (void) (begin (display '"here") (g$214$16002 g$214$17059))) ((lambda (g$214$17067) (if (memv g$214$17067 '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd library mutable)) (values g$214$17065 (g$214$16000 g$214$17063) g$214$17059) (values 'other '#f '#f))) g$214$17065))))) (g$214$15998 g$214$17063))) (g$214$15994 g$214$17061 g$214$17056))) (g$214$15992 g$214$17059))) g$214$17055) (if (g$214$15954 g$214$17055) ((lambda (g$214$17068) (if (g$214$15968 g$214$17068) ((lambda (g$214$17070) ((lambda (g$214$17072) ((lambda (g$214$17074) ((lambda () (begin (if g$214$17070 (void) (begin (display '"here2") (g$214$16002 g$214$17068))) ((lambda (g$214$17076) (if (memv g$214$17076 '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import $core-rtd)) (values g$214$17074 (g$214$16000 g$214$17072) g$214$17068) (values 'call '#f '#f))) g$214$17074))))) (g$214$15998 g$214$17072))) (g$214$15994 g$214$17070 g$214$17056))) (g$214$15992 g$214$17068)) (values 'call '#f '#f))) (g$214$15962 g$214$17055)) ((lambda (g$214$17077) (if (g$214$15984 g$214$17077) (values 'constant g$214$17077 '#f) (values 'other '#f '#f))) (g$214$15990 g$214$17055)))))) (g$214$16027 (lambda (g$214$17079 g$214$17080) (if (procedure? g$214$17079) (cons* 'local-macro g$214$17079 g$214$17080) (if (if (pair? g$214$17079) (if (eq? (car g$214$17079) 'macro!) (begin '#f (procedure? (cdr g$214$17079))) '#f) '#f) (cons* 'local-macro! (cdr g$214$17079) g$214$17080) (if (if (pair? g$214$17079) (begin '#f (eq? (car g$214$17079) '$rtd)) '#f) g$214$17079 (assertion-violation 'expand '"invalid transformer" g$214$17079)))))) (g$214$16029 (lambda (g$214$17083) (if (procedure? g$214$17083) (cons 'macro! g$214$17083) (assertion-violation 'make-variable-transformer '"not a procedure" g$214$17083)))) (g$214$16031 (lambda (g$214$17085) (g$214$16027 (eval-core (g$214$15000 g$214$17085)) g$214$17085))) (g$214$16450 (lambda (g$214$17087) ((lambda (g$214$17089) ((lambda (g$214$17091) (if (if g$214$17091 (begin '#f (apply (lambda (g$214$17093 g$214$17094 g$214$17095 g$214$17096) (g$214$15968 g$214$17093)) g$214$17091)) '#f) (apply (lambda (g$214$17101 g$214$17102 g$214$17103 g$214$17104) (values g$214$17101 (cons 'defun (cons g$214$17102 (cons g$214$17103 g$214$17104))))) g$214$17091) ((lambda (g$214$17109) ((lambda (g$214$17111) (if (if g$214$17111 (begin '#f (apply (lambda (g$214$17113 g$214$17114) (g$214$15968 g$214$17113)) g$214$17111)) '#f) (apply (lambda (g$214$17117 g$214$17118) (values g$214$17117 (cons 'expr g$214$17118))) g$214$17111) (g$214$16703 '#f '"invalid syntax" g$214$17109))) ((lambda (g$214$17121) (if (g$214$15954 g$214$17121) (begin '#f ((lambda (g$214$17123) (if g$214$17123 (begin '#f ((lambda (g$214$17125) (if g$214$17125 (begin '#f (append g$214$17123 g$214$17125)) '#f)) ((lambda (g$214$17127) (if (g$214$15954 g$214$17127) (begin '#f ((lambda (g$214$17129) (if g$214$17129 (begin '#f ((lambda (g$214$17131) (if g$214$17131 (begin '#f (append g$214$17129 g$214$17131)) '#f)) ((lambda (g$214$17133) (if (g$214$15954 g$214$17133) (begin '#f ((lambda (g$214$17135) (if g$214$17135 (begin '#f ((lambda (g$214$17137) (if g$214$17137 (begin '#f (append g$214$17135 g$214$17137)) '#f)) ((lambda (g$214$17139) (if (equal? (g$214$15990 g$214$17139) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$17133)))) '#f)) ((lambda (g$214$17141) (list g$214$17141)) (g$214$15962 g$214$17133)))) '#f)) (g$214$15964 g$214$17127)))) '#f)) ((lambda (g$214$17143) (list g$214$17143)) (g$214$15962 g$214$17127)))) '#f)) (g$214$15964 g$214$17121)))) '#f)) ((lambda (g$214$17145) '()) (g$214$15962 g$214$17121)))) '#f)) g$214$17109))) g$214$17089))) ((lambda (g$214$17147) (if (g$214$15954 g$214$17147) (begin '#f ((lambda (g$214$17149) (if g$214$17149 (begin '#f ((lambda (g$214$17151) (if g$214$17151 (begin '#f (append g$214$17149 g$214$17151)) '#f)) ((lambda (g$214$17153) (if (g$214$15954 g$214$17153) (begin '#f ((lambda (g$214$17155) (if g$214$17155 (begin '#f ((lambda (g$214$17157) (if g$214$17157 (begin '#f (append g$214$17155 g$214$17157)) '#f)) ((lambda (g$214$17159) (if (g$214$15954 g$214$17159) (begin '#f ((lambda (g$214$17161) (if g$214$17161 (begin '#f ((lambda (g$214$17163) (if g$214$17163 (begin '#f (append g$214$17161 g$214$17163)) '#f)) ((letrec ((g$214$17165 (lambda (g$214$17167) (if (g$214$15954 g$214$17167) ((lambda (g$214$17169) (if g$214$17169 (begin '#f ((lambda (g$214$17171) (if g$214$17171 (begin '#f (map cons g$214$17169 g$214$17171)) '#f)) (g$214$17165 (g$214$15964 g$214$17167)))) '#f)) ((lambda (g$214$17173) (list g$214$17173)) (g$214$15962 g$214$17167))) (if (g$214$15958 g$214$17167) (list (begin 'b* '())) '#f))))) g$214$17165) (g$214$15964 g$214$17159)))) '#f)) ((lambda (g$214$17175) (list g$214$17175)) (g$214$15962 g$214$17159)))) '#f)) (g$214$15964 g$214$17153)))) '#f)) ((lambda (g$214$17177) (if (g$214$15954 g$214$17177) (begin '#f ((lambda (g$214$17179) (if g$214$17179 (begin '#f ((lambda (g$214$17181) (if g$214$17181 (begin '#f (append g$214$17179 g$214$17181)) '#f)) ((lambda (g$214$17183) (list g$214$17183)) (g$214$15964 g$214$17177)))) '#f)) ((lambda (g$214$17185) (list g$214$17185)) (g$214$15962 g$214$17177)))) '#f)) (g$214$15962 g$214$17153)))) '#f)) (g$214$15964 g$214$17147)))) '#f)) ((lambda (g$214$17187) '()) (g$214$15962 g$214$17147)))) '#f)) g$214$17089))) g$214$17087))) (g$214$16452 (lambda (g$214$17189) ((lambda (g$214$17191) ((lambda (g$214$17193) (if (if g$214$17193 (begin '#f (apply (lambda (g$214$17195 g$214$17196) (g$214$15968 g$214$17195)) g$214$17193)) '#f) (apply (lambda (g$214$17199 g$214$17200) (values g$214$17199 g$214$17200)) g$214$17193) (g$214$16703 '#f '"invalid syntax" g$214$17191))) ((lambda (g$214$17203) (if (g$214$15954 g$214$17203) (begin '#f ((lambda (g$214$17205) (if g$214$17205 (begin '#f ((lambda (g$214$17207) (if g$214$17207 (begin '#f (append g$214$17205 g$214$17207)) '#f)) ((lambda (g$214$17209) (if (g$214$15954 g$214$17209) (begin '#f ((lambda (g$214$17211) (if g$214$17211 (begin '#f ((lambda (g$214$17213) (if g$214$17213 (begin '#f (append g$214$17211 g$214$17213)) '#f)) ((lambda (g$214$17215) (if (g$214$15954 g$214$17215) (begin '#f ((lambda (g$214$17217) (if g$214$17217 (begin '#f ((lambda (g$214$17219) (if g$214$17219 (begin '#f (append g$214$17217 g$214$17219)) '#f)) ((lambda (g$214$17221) (if (equal? (g$214$15990 g$214$17221) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$17215)))) '#f)) ((lambda (g$214$17223) (list g$214$17223)) (g$214$15962 g$214$17215)))) '#f)) (g$214$15964 g$214$17209)))) '#f)) ((lambda (g$214$17225) (list g$214$17225)) (g$214$15962 g$214$17209)))) '#f)) (g$214$15964 g$214$17203)))) '#f)) ((lambda (g$214$17227) '()) (g$214$15962 g$214$17203)))) '#f)) g$214$17191))) g$214$17189))) (g$214$16454 (lambda (g$214$17229) ((lambda (g$214$17231) ((lambda (g$214$17233) (if g$214$17233 ((lambda (g$214$17235) ((lambda (g$214$17237 g$214$17238) (g$214$15948 (g$214$15885 (list g$214$17237) (list g$214$15874) (list g$214$17238) '#f) (g$214$15944 g$214$17229 g$214$15874 '()))) (car g$214$17235) (cdr g$214$17235))) g$214$17233) (g$214$15944 g$214$17229 g$214$15874 '()))) (assq g$214$17229 g$214$17231))) (g$214$15475 (g$214$15501 '(psyntax system $all)))))) (g$214$16456 car) (g$214$16458 cdr) (g$214$16460 set-cdr!) (g$214$16462 (lambda (g$214$17241 g$214$17242 g$214$17243) (cons (cons* g$214$17241 'lexical g$214$17242 '#f) g$214$17243))) (g$214$16464 (lambda (g$214$17247 g$214$17248 g$214$17249) (if (null? g$214$17247) g$214$17249 (g$214$16464 (cdr g$214$17247) (cdr g$214$17248) (g$214$16462 (car g$214$17247) (car g$214$17248) g$214$17249))))) (g$214$16466 (lambda (g$214$17253 g$214$17254 g$214$17255 g$214$17256) ((lambda (g$214$17261) ((lambda (g$214$17263) (if (if g$214$17263 (begin '#f (apply (lambda (g$214$17265 g$214$17266 g$214$17267 g$214$17268) '#t) g$214$17263)) '#f) (apply (lambda (g$214$17273 g$214$17274 g$214$17275 g$214$17276) (if (not (g$214$15978 g$214$17273)) (g$214$16703 '#f '"invalid identifiers" g$214$17253) ((lambda (g$214$17281 g$214$17282) ((lambda (g$214$17285 g$214$17286) ((lambda (g$214$17289 g$214$17290) (g$214$17256 '#f g$214$17281 g$214$17290 g$214$17289)) (g$214$16604 (g$214$15948 g$214$17285 (cons g$214$17275 g$214$17276)) g$214$17286 g$214$17255) (g$214$16584 (map (lambda (g$214$17293) (g$214$15948 g$214$17285 g$214$17293)) g$214$17274) g$214$17286 g$214$17255))) (g$214$15915 g$214$17273 g$214$17282) (g$214$16464 g$214$17282 g$214$17281 g$214$17254))) (map g$214$15878 g$214$17273) (map g$214$15882 g$214$17273)))) g$214$17263) (g$214$16703 '#f '"invalid syntax" g$214$17261))) ((lambda (g$214$17295) (if (g$214$15954 g$214$17295) (begin '#f ((lambda (g$214$17297) (if g$214$17297 (begin '#f ((lambda (g$214$17299) (if g$214$17299 (begin '#f (append g$214$17297 g$214$17299)) '#f)) ((lambda (g$214$17301) (if (g$214$15954 g$214$17301) (begin '#f ((lambda (g$214$17303) (if g$214$17303 (begin '#f ((lambda (g$214$17305) (if g$214$17305 (begin '#f (append g$214$17303 g$214$17305)) '#f)) ((lambda (g$214$17307) (if (g$214$15954 g$214$17307) (begin '#f ((lambda (g$214$17309) (if g$214$17309 (begin '#f ((lambda (g$214$17311) (if g$214$17311 (begin '#f (append g$214$17309 g$214$17311)) '#f)) ((letrec ((g$214$17313 (lambda (g$214$17315) (if (g$214$15954 g$214$17315) ((lambda (g$214$17317) (if g$214$17317 (begin '#f ((lambda (g$214$17319) (if g$214$17319 (begin '#f (map cons g$214$17317 g$214$17319)) '#f)) (g$214$17313 (g$214$15964 g$214$17315)))) '#f)) ((lambda (g$214$17321) (list g$214$17321)) (g$214$15962 g$214$17315))) (if (g$214$15958 g$214$17315) (list (begin 'b* '())) '#f))))) g$214$17313) (g$214$15964 g$214$17307)))) '#f)) ((lambda (g$214$17323) (list g$214$17323)) (g$214$15962 g$214$17307)))) '#f)) (g$214$15964 g$214$17301)))) '#f)) ((letrec ((g$214$17325 (lambda (g$214$17327) (if (g$214$15954 g$214$17327) ((lambda (g$214$17329) (if g$214$17329 (begin '#f ((lambda (g$214$17331) (if g$214$17331 (begin '#f (map cons g$214$17329 g$214$17331)) '#f)) (g$214$17325 (g$214$15964 g$214$17327)))) '#f)) ((lambda (g$214$17333) (if (g$214$15954 g$214$17333) (begin '#f ((lambda (g$214$17335) (if g$214$17335 (begin '#f ((lambda (g$214$17337) (if g$214$17337 (begin '#f (append g$214$17335 g$214$17337)) '#f)) ((lambda (g$214$17339) (if (g$214$15954 g$214$17339) (begin '#f ((lambda (g$214$17341) (if g$214$17341 (begin '#f ((lambda (g$214$17343) (if g$214$17343 (begin '#f (append g$214$17341 g$214$17343)) '#f)) ((lambda (g$214$17345) (if (equal? (g$214$15990 g$214$17345) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$17339)))) '#f)) ((lambda (g$214$17347) (list g$214$17347)) (g$214$15962 g$214$17339)))) '#f)) (g$214$15964 g$214$17333)))) '#f)) ((lambda (g$214$17349) (list g$214$17349)) (g$214$15962 g$214$17333)))) '#f)) (g$214$15962 g$214$17327))) (if (g$214$15958 g$214$17327) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$214$17325) (g$214$15962 g$214$17301)))) '#f)) (g$214$15964 g$214$17295)))) '#f)) ((lambda (g$214$17351) '()) (g$214$15962 g$214$17295)))) '#f)) g$214$17261))) g$214$17253))) (g$214$16468 (lambda (g$214$17353 g$214$17354 g$214$17355) (g$214$16466 g$214$17353 g$214$17354 g$214$17355 g$214$15853))) (g$214$16470 (lambda (g$214$17359 g$214$17360 g$214$17361) (g$214$16466 g$214$17359 g$214$17360 g$214$17361 g$214$15854))) (g$214$16472 (lambda (g$214$17365 g$214$17366 g$214$17367) ((lambda (g$214$17371) ((lambda (g$214$17373) (if (if g$214$17373 (begin '#f (apply (lambda (g$214$17375) (g$214$15968 g$214$17375)) g$214$17373)) '#f) (apply (lambda (g$214$17377) ((lambda (g$214$17379) ((lambda (g$214$17381) ((lambda (g$214$17383) ((lambda () (begin (if g$214$17379 (void) (g$214$16002 g$214$17377)) (if (if (eq? g$214$17383 '$rtd) (begin '#f (not (list? (g$214$16000 g$214$17381)))) '#f) (void) (g$214$16703 '#f '"not a record type" g$214$17365)) (list 'quote (g$214$16000 g$214$17381)))))) (g$214$15998 g$214$17381))) (g$214$15994 g$214$17379 g$214$17366))) (g$214$15992 g$214$17377))) g$214$17373) (g$214$16703 '#f '"invalid syntax" g$214$17371))) ((lambda (g$214$17385) (if (g$214$15954 g$214$17385) (begin '#f ((lambda (g$214$17387) (if g$214$17387 (begin '#f ((lambda (g$214$17389) (if g$214$17389 (begin '#f (append g$214$17387 g$214$17389)) '#f)) ((lambda (g$214$17391) (if (g$214$15954 g$214$17391) (begin '#f ((lambda (g$214$17393) (if g$214$17393 (begin '#f ((lambda (g$214$17395) (if g$214$17395 (begin '#f (append g$214$17393 g$214$17395)) '#f)) ((lambda (g$214$17397) (if (equal? (g$214$15990 g$214$17397) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$17391)))) '#f)) ((lambda (g$214$17399) (list g$214$17399)) (g$214$15962 g$214$17391)))) '#f)) (g$214$15964 g$214$17385)))) '#f)) ((lambda (g$214$17401) '()) (g$214$15962 g$214$17385)))) '#f)) g$214$17371))) g$214$17365))) (g$214$16474 (lambda (g$214$17403 g$214$17404 g$214$17405) ((lambda (g$214$17409) ((lambda (g$214$17411) (if (if g$214$17411 (begin '#f (apply (lambda (g$214$17413) (g$214$15968 g$214$17413)) g$214$17411)) '#f) (apply (lambda (g$214$17415) ((lambda (g$214$17417) ((lambda (g$214$17419) ((lambda (g$214$17421) ((lambda () (begin (if g$214$17417 (void) (g$214$16002 g$214$17415)) (if (if (eq? g$214$17421 '$rtd) (begin '#f (list? (g$214$16000 g$214$17419))) '#f) (void) (g$214$16703 '#f '"not a record type" g$214$17403)) (g$214$16588 (car (g$214$16000 g$214$17419)) g$214$17404 g$214$17405))))) (g$214$15998 g$214$17419))) (g$214$15994 g$214$17417 g$214$17404))) (g$214$15992 g$214$17415))) g$214$17411) (g$214$16703 '#f '"invalid syntax" g$214$17409))) ((lambda (g$214$17423) (if (g$214$15954 g$214$17423) (begin '#f ((lambda (g$214$17425) (if g$214$17425 (begin '#f ((lambda (g$214$17427) (if g$214$17427 (begin '#f (append g$214$17425 g$214$17427)) '#f)) ((lambda (g$214$17429) (if (g$214$15954 g$214$17429) (begin '#f ((lambda (g$214$17431) (if g$214$17431 (begin '#f ((lambda (g$214$17433) (if g$214$17433 (begin '#f (append g$214$17431 g$214$17433)) '#f)) ((lambda (g$214$17435) (if (equal? (g$214$15990 g$214$17435) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$17429)))) '#f)) ((lambda (g$214$17437) (list g$214$17437)) (g$214$15962 g$214$17429)))) '#f)) (g$214$15964 g$214$17423)))) '#f)) ((lambda (g$214$17439) '()) (g$214$15962 g$214$17423)))) '#f)) g$214$17409))) g$214$17403))) (g$214$16476 (lambda (g$214$17441 g$214$17442 g$214$17443) ((lambda (g$214$17447) ((lambda (g$214$17449) (if (if g$214$17449 (begin '#f (apply (lambda (g$214$17451) (g$214$15968 g$214$17451)) g$214$17449)) '#f) (apply (lambda (g$214$17453) ((lambda (g$214$17455) ((lambda (g$214$17457) ((lambda (g$214$17459) ((lambda () (begin (if g$214$17455 (void) (g$214$16002 g$214$17453)) (if (if (eq? g$214$17459 '$rtd) (begin '#f (list? (g$214$16000 g$214$17457))) '#f) (void) (g$214$16703 '#f '"invalid type" g$214$17441)) (g$214$16588 (cadr (g$214$16000 g$214$17457)) g$214$17442 g$214$17443))))) (g$214$15998 g$214$17457))) (g$214$15994 g$214$17455 g$214$17442))) (g$214$15992 g$214$17453))) g$214$17449) (g$214$16703 '#f '"invalid syntax" g$214$17447))) ((lambda (g$214$17461) (if (g$214$15954 g$214$17461) (begin '#f ((lambda (g$214$17463) (if g$214$17463 (begin '#f ((lambda (g$214$17465) (if g$214$17465 (begin '#f (append g$214$17463 g$214$17465)) '#f)) ((lambda (g$214$17467) (if (g$214$15954 g$214$17467) (begin '#f ((lambda (g$214$17469) (if g$214$17469 (begin '#f ((lambda (g$214$17471) (if g$214$17471 (begin '#f (append g$214$17469 g$214$17471)) '#f)) ((lambda (g$214$17473) (if (equal? (g$214$15990 g$214$17473) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$17467)))) '#f)) ((lambda (g$214$17475) (list g$214$17475)) (g$214$15962 g$214$17467)))) '#f)) (g$214$15964 g$214$17461)))) '#f)) ((lambda (g$214$17477) '()) (g$214$15962 g$214$17461)))) '#f)) g$214$17447))) g$214$17441))) (g$214$16478 (lambda (g$214$17479 g$214$17480 g$214$17481) ((lambda (g$214$17485) ((lambda (g$214$17487) (if (if g$214$17487 (begin '#f (apply (lambda (g$214$17489 g$214$17490 g$214$17491) '#t) g$214$17487)) '#f) (apply (lambda (g$214$17495 g$214$17496 g$214$17497) (list 'if (g$214$16588 g$214$17495 g$214$17480 g$214$17481) (g$214$15851 '#f (g$214$16584 (cons g$214$17496 g$214$17497) g$214$17480 g$214$17481)) (g$214$15852))) g$214$17487) (g$214$16703 '#f '"invalid syntax" g$214$17485))) ((lambda (g$214$17501) (if (g$214$15954 g$214$17501) (begin '#f ((lambda (g$214$17503) (if g$214$17503 (begin '#f ((lambda (g$214$17505) (if g$214$17505 (begin '#f (append g$214$17503 g$214$17505)) '#f)) ((lambda (g$214$17507) (if (g$214$15954 g$214$17507) (begin '#f ((lambda (g$214$17509) (if g$214$17509 (begin '#f ((lambda (g$214$17511) (if g$214$17511 (begin '#f (append g$214$17509 g$214$17511)) '#f)) ((lambda (g$214$17513) (if (g$214$15954 g$214$17513) (begin '#f ((lambda (g$214$17515) (if g$214$17515 (begin '#f ((lambda (g$214$17517) (if g$214$17517 (begin '#f (append g$214$17515 g$214$17517)) '#f)) ((letrec ((g$214$17519 (lambda (g$214$17521) (if (g$214$15954 g$214$17521) ((lambda (g$214$17523) (if g$214$17523 (begin '#f ((lambda (g$214$17525) (if g$214$17525 (begin '#f (map cons g$214$17523 g$214$17525)) '#f)) (g$214$17519 (g$214$15964 g$214$17521)))) '#f)) ((lambda (g$214$17527) (list g$214$17527)) (g$214$15962 g$214$17521))) (if (g$214$15958 g$214$17521) (list (begin 'e* '())) '#f))))) g$214$17519) (g$214$15964 g$214$17513)))) '#f)) ((lambda (g$214$17529) (list g$214$17529)) (g$214$15962 g$214$17513)))) '#f)) (g$214$15964 g$214$17507)))) '#f)) ((lambda (g$214$17531) (list g$214$17531)) (g$214$15962 g$214$17507)))) '#f)) (g$214$15964 g$214$17501)))) '#f)) ((lambda (g$214$17533) '()) (g$214$15962 g$214$17501)))) '#f)) g$214$17485))) g$214$17479))) (g$214$16480 (lambda (g$214$17535 g$214$17536 g$214$17537) ((lambda (g$214$17541) ((lambda (g$214$17543) (if (if g$214$17543 (begin '#f (apply (lambda (g$214$17545 g$214$17546 g$214$17547) '#t) g$214$17543)) '#f) (apply (lambda (g$214$17551 g$214$17552 g$214$17553) (list 'if (g$214$16588 g$214$17551 g$214$17536 g$214$17537) (g$214$15852) (g$214$15851 '#f (g$214$16584 (cons g$214$17552 g$214$17553) g$214$17536 g$214$17537)))) g$214$17543) (g$214$16703 '#f '"invalid syntax" g$214$17541))) ((lambda (g$214$17557) (if (g$214$15954 g$214$17557) (begin '#f ((lambda (g$214$17559) (if g$214$17559 (begin '#f ((lambda (g$214$17561) (if g$214$17561 (begin '#f (append g$214$17559 g$214$17561)) '#f)) ((lambda (g$214$17563) (if (g$214$15954 g$214$17563) (begin '#f ((lambda (g$214$17565) (if g$214$17565 (begin '#f ((lambda (g$214$17567) (if g$214$17567 (begin '#f (append g$214$17565 g$214$17567)) '#f)) ((lambda (g$214$17569) (if (g$214$15954 g$214$17569) (begin '#f ((lambda (g$214$17571) (if g$214$17571 (begin '#f ((lambda (g$214$17573) (if g$214$17573 (begin '#f (append g$214$17571 g$214$17573)) '#f)) ((letrec ((g$214$17575 (lambda (g$214$17577) (if (g$214$15954 g$214$17577) ((lambda (g$214$17579) (if g$214$17579 (begin '#f ((lambda (g$214$17581) (if g$214$17581 (begin '#f (map cons g$214$17579 g$214$17581)) '#f)) (g$214$17575 (g$214$15964 g$214$17577)))) '#f)) ((lambda (g$214$17583) (list g$214$17583)) (g$214$15962 g$214$17577))) (if (g$214$15958 g$214$17577) (list (begin 'e* '())) '#f))))) g$214$17575) (g$214$15964 g$214$17569)))) '#f)) ((lambda (g$214$17585) (list g$214$17585)) (g$214$15962 g$214$17569)))) '#f)) (g$214$15964 g$214$17563)))) '#f)) ((lambda (g$214$17587) (list g$214$17587)) (g$214$15962 g$214$17563)))) '#f)) (g$214$15964 g$214$17557)))) '#f)) ((lambda (g$214$17589) '()) (g$214$15962 g$214$17557)))) '#f)) g$214$17541))) g$214$17535))) (g$214$16482 (lambda (g$214$17591 g$214$17592 g$214$17593) ((lambda (g$214$17597) ((lambda (g$214$17599) (if (if g$214$17599 (begin '#f (apply (lambda (g$214$17601 g$214$17602 g$214$17603) '#t) g$214$17599)) '#f) (apply (lambda (g$214$17607 g$214$17608 g$214$17609) (list 'if (g$214$16588 g$214$17607 g$214$17592 g$214$17593) (g$214$16588 g$214$17608 g$214$17592 g$214$17593) (g$214$16588 g$214$17609 g$214$17592 g$214$17593))) g$214$17599) ((lambda (g$214$17613) ((lambda (g$214$17615) (if (if g$214$17615 (begin '#f (apply (lambda (g$214$17617 g$214$17618) '#t) g$214$17615)) '#f) (apply (lambda (g$214$17621 g$214$17622) (list 'if (g$214$16588 g$214$17621 g$214$17592 g$214$17593) (g$214$16588 g$214$17622 g$214$17592 g$214$17593) (g$214$15852))) g$214$17615) (g$214$16703 '#f '"invalid syntax" g$214$17613))) ((lambda (g$214$17625) (if (g$214$15954 g$214$17625) (begin '#f ((lambda (g$214$17627) (if g$214$17627 (begin '#f ((lambda (g$214$17629) (if g$214$17629 (begin '#f (append g$214$17627 g$214$17629)) '#f)) ((lambda (g$214$17631) (if (g$214$15954 g$214$17631) (begin '#f ((lambda (g$214$17633) (if g$214$17633 (begin '#f ((lambda (g$214$17635) (if g$214$17635 (begin '#f (append g$214$17633 g$214$17635)) '#f)) ((lambda (g$214$17637) (if (g$214$15954 g$214$17637) (begin '#f ((lambda (g$214$17639) (if g$214$17639 (begin '#f ((lambda (g$214$17641) (if g$214$17641 (begin '#f (append g$214$17639 g$214$17641)) '#f)) ((lambda (g$214$17643) (if (equal? (g$214$15990 g$214$17643) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$17637)))) '#f)) ((lambda (g$214$17645) (list g$214$17645)) (g$214$15962 g$214$17637)))) '#f)) (g$214$15964 g$214$17631)))) '#f)) ((lambda (g$214$17647) (list g$214$17647)) (g$214$15962 g$214$17631)))) '#f)) (g$214$15964 g$214$17625)))) '#f)) ((lambda (g$214$17649) '()) (g$214$15962 g$214$17625)))) '#f)) g$214$17613))) g$214$17597))) ((lambda (g$214$17651) (if (g$214$15954 g$214$17651) (begin '#f ((lambda (g$214$17653) (if g$214$17653 (begin '#f ((lambda (g$214$17655) (if g$214$17655 (begin '#f (append g$214$17653 g$214$17655)) '#f)) ((lambda (g$214$17657) (if (g$214$15954 g$214$17657) (begin '#f ((lambda (g$214$17659) (if g$214$17659 (begin '#f ((lambda (g$214$17661) (if g$214$17661 (begin '#f (append g$214$17659 g$214$17661)) '#f)) ((lambda (g$214$17663) (if (g$214$15954 g$214$17663) (begin '#f ((lambda (g$214$17665) (if g$214$17665 (begin '#f ((lambda (g$214$17667) (if g$214$17667 (begin '#f (append g$214$17665 g$214$17667)) '#f)) ((lambda (g$214$17669) (if (g$214$15954 g$214$17669) (begin '#f ((lambda (g$214$17671) (if g$214$17671 (begin '#f ((lambda (g$214$17673) (if g$214$17673 (begin '#f (append g$214$17671 g$214$17673)) '#f)) ((lambda (g$214$17675) (if (equal? (g$214$15990 g$214$17675) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$17669)))) '#f)) ((lambda (g$214$17677) (list g$214$17677)) (g$214$15962 g$214$17669)))) '#f)) (g$214$15964 g$214$17663)))) '#f)) ((lambda (g$214$17679) (list g$214$17679)) (g$214$15962 g$214$17663)))) '#f)) (g$214$15964 g$214$17657)))) '#f)) ((lambda (g$214$17681) (list g$214$17681)) (g$214$15962 g$214$17657)))) '#f)) (g$214$15964 g$214$17651)))) '#f)) ((lambda (g$214$17683) '()) (g$214$15962 g$214$17651)))) '#f)) g$214$17597))) g$214$17591))) (g$214$16484 (lambda (g$214$17685 g$214$17686 g$214$17687) (letrec ((g$214$17691 (lambda (g$214$17885 g$214$17886 g$214$17887) ((lambda (g$214$17891) ((lambda (g$214$17893) (if (if g$214$17893 (begin '#f (apply (lambda (g$214$17895 g$214$17896 g$214$17897) '#t) g$214$17893)) '#f) (apply (lambda (g$214$17901 g$214$17902 g$214$17903) (list 'if (list '(primitive memv) g$214$17885 (list 'quote (g$214$15990 g$214$17901))) (g$214$15851 '#f (g$214$16584 (cons g$214$17902 g$214$17903) g$214$17686 g$214$17687)) g$214$17887)) g$214$17893) ((lambda (g$214$17907) ((lambda (g$214$17909) (if (if g$214$17909 (begin '#f (apply (lambda (g$214$17911) '#t) g$214$17909)) '#f) (apply (lambda (g$214$17913) (g$214$16703 '#f '"invalid syntax" g$214$17685)) g$214$17909) (g$214$16703 '#f '"invalid syntax" g$214$17907))) ((lambda (g$214$17915) (list g$214$17915)) g$214$17907))) g$214$17891))) ((lambda (g$214$17917) (if (g$214$15954 g$214$17917) (begin '#f ((lambda (g$214$17919) (if g$214$17919 (begin '#f ((lambda (g$214$17921) (if g$214$17921 (begin '#f (append g$214$17919 g$214$17921)) '#f)) ((lambda (g$214$17923) (if (g$214$15954 g$214$17923) (begin '#f ((lambda (g$214$17925) (if g$214$17925 (begin '#f ((lambda (g$214$17927) (if g$214$17927 (begin '#f (append g$214$17925 g$214$17927)) '#f)) ((letrec ((g$214$17929 (lambda (g$214$17931) (if (g$214$15954 g$214$17931) ((lambda (g$214$17933) (if g$214$17933 (begin '#f ((lambda (g$214$17935) (if g$214$17935 (begin '#f (map cons g$214$17933 g$214$17935)) '#f)) (g$214$17929 (g$214$15964 g$214$17931)))) '#f)) ((lambda (g$214$17937) (list g$214$17937)) (g$214$15962 g$214$17931))) (if (g$214$15958 g$214$17931) (list (begin 'e* '())) '#f))))) g$214$17929) (g$214$15964 g$214$17923)))) '#f)) ((lambda (g$214$17939) (list g$214$17939)) (g$214$15962 g$214$17923)))) '#f)) (g$214$15964 g$214$17917)))) '#f)) ((letrec ((g$214$17941 (lambda (g$214$17943) (if (g$214$15954 g$214$17943) ((lambda (g$214$17945) (if g$214$17945 (begin '#f ((lambda (g$214$17947) (if g$214$17947 (begin '#f (map cons g$214$17945 g$214$17947)) '#f)) (g$214$17941 (g$214$15964 g$214$17943)))) '#f)) ((lambda (g$214$17949) (list g$214$17949)) (g$214$15962 g$214$17943))) (if (g$214$15958 g$214$17943) (list (begin 'd* '())) '#f))))) g$214$17941) (g$214$15962 g$214$17917)))) '#f)) g$214$17891))) g$214$17886))) (g$214$17693 (lambda (g$214$17779 g$214$17780) ((lambda (g$214$17783) ((lambda (g$214$17785) (if (if g$214$17785 (begin '#f (apply (lambda (g$214$17787 g$214$17788 g$214$17789) '#t) g$214$17785)) '#f) (apply (lambda (g$214$17793 g$214$17794 g$214$17795) (g$214$17691 g$214$17779 g$214$17780 (g$214$15852))) g$214$17785) ((lambda (g$214$17799) ((lambda (g$214$17801) (if (if g$214$17801 (begin '#f (apply (lambda (g$214$17803 g$214$17804 g$214$17805) '#t) g$214$17801)) '#f) (apply (lambda (g$214$17809 g$214$17810 g$214$17811) (if (if (g$214$15968 g$214$17809) (begin '#f (g$214$15976 g$214$17809 (g$214$16454 'else))) '#f) (g$214$15851 '#f (g$214$16584 (cons g$214$17810 g$214$17811) g$214$17686 g$214$17687)) (g$214$16703 '#f '"invalid syntax" g$214$17685))) g$214$17801) ((lambda (g$214$17815) ((lambda (g$214$17817) (if (if g$214$17817 (begin '#f (apply (lambda (g$214$17819) '#t) g$214$17817)) '#f) (apply (lambda (g$214$17821) (g$214$16703 '#f '"invalid syntax" g$214$17685)) g$214$17817) (g$214$16703 '#f '"invalid syntax" g$214$17815))) ((lambda (g$214$17823) (list g$214$17823)) g$214$17815))) g$214$17799))) ((lambda (g$214$17825) (if (g$214$15954 g$214$17825) (begin '#f ((lambda (g$214$17827) (if g$214$17827 (begin '#f ((lambda (g$214$17829) (if g$214$17829 (begin '#f (append g$214$17827 g$214$17829)) '#f)) ((lambda (g$214$17831) (if (g$214$15954 g$214$17831) (begin '#f ((lambda (g$214$17833) (if g$214$17833 (begin '#f ((lambda (g$214$17835) (if g$214$17835 (begin '#f (append g$214$17833 g$214$17835)) '#f)) ((letrec ((g$214$17837 (lambda (g$214$17839) (if (g$214$15954 g$214$17839) ((lambda (g$214$17841) (if g$214$17841 (begin '#f ((lambda (g$214$17843) (if g$214$17843 (begin '#f (map cons g$214$17841 g$214$17843)) '#f)) (g$214$17837 (g$214$15964 g$214$17839)))) '#f)) ((lambda (g$214$17845) (list g$214$17845)) (g$214$15962 g$214$17839))) (if (g$214$15958 g$214$17839) (list (begin 'x* '())) '#f))))) g$214$17837) (g$214$15964 g$214$17831)))) '#f)) ((lambda (g$214$17847) (list g$214$17847)) (g$214$15962 g$214$17831)))) '#f)) (g$214$15964 g$214$17825)))) '#f)) ((lambda (g$214$17849) (list g$214$17849)) (g$214$15962 g$214$17825)))) '#f)) g$214$17799))) g$214$17783))) ((lambda (g$214$17851) (if (g$214$15954 g$214$17851) (begin '#f ((lambda (g$214$17853) (if g$214$17853 (begin '#f ((lambda (g$214$17855) (if g$214$17855 (begin '#f (append g$214$17853 g$214$17855)) '#f)) ((lambda (g$214$17857) (if (g$214$15954 g$214$17857) (begin '#f ((lambda (g$214$17859) (if g$214$17859 (begin '#f ((lambda (g$214$17861) (if g$214$17861 (begin '#f (append g$214$17859 g$214$17861)) '#f)) ((letrec ((g$214$17863 (lambda (g$214$17865) (if (g$214$15954 g$214$17865) ((lambda (g$214$17867) (if g$214$17867 (begin '#f ((lambda (g$214$17869) (if g$214$17869 (begin '#f (map cons g$214$17867 g$214$17869)) '#f)) (g$214$17863 (g$214$15964 g$214$17865)))) '#f)) ((lambda (g$214$17871) (list g$214$17871)) (g$214$15962 g$214$17865))) (if (g$214$15958 g$214$17865) (list (begin 'e* '())) '#f))))) g$214$17863) (g$214$15964 g$214$17857)))) '#f)) ((lambda (g$214$17873) (list g$214$17873)) (g$214$15962 g$214$17857)))) '#f)) (g$214$15964 g$214$17851)))) '#f)) ((letrec ((g$214$17875 (lambda (g$214$17877) (if (g$214$15954 g$214$17877) ((lambda (g$214$17879) (if g$214$17879 (begin '#f ((lambda (g$214$17881) (if g$214$17881 (begin '#f (map cons g$214$17879 g$214$17881)) '#f)) (g$214$17875 (g$214$15964 g$214$17877)))) '#f)) ((lambda (g$214$17883) (list g$214$17883)) (g$214$15962 g$214$17877))) (if (g$214$15958 g$214$17877) (list (begin 'd* '())) '#f))))) g$214$17875) (g$214$15962 g$214$17851)))) '#f)) g$214$17783))) g$214$17780)))) ((lambda (g$214$17695) ((lambda (g$214$17697) (if (if g$214$17697 (begin '#f (apply (lambda (g$214$17699) '#t) g$214$17697)) '#f) (apply (lambda (g$214$17701) (g$214$15851 '#f (list (g$214$16588 g$214$17701 g$214$17686 g$214$17687) (g$214$15852)))) g$214$17697) ((lambda (g$214$17703) ((lambda (g$214$17705) (if (if g$214$17705 (begin '#f (apply (lambda (g$214$17707 g$214$17708 g$214$17709) '#t) g$214$17705)) '#f) (apply (lambda (g$214$17713 g$214$17714 g$214$17715) ((lambda (g$214$17719) (g$214$15850 '#f (list g$214$17719) (list (g$214$16588 g$214$17713 g$214$17686 g$214$17687)) ((letrec ((g$214$17721 (lambda (g$214$17723 g$214$17724) (if (null? g$214$17724) (g$214$17693 g$214$17719 g$214$17723) (g$214$17691 g$214$17719 g$214$17723 (g$214$17721 (car g$214$17724) (cdr g$214$17724))))))) g$214$17721) g$214$17714 g$214$17715))) (g$214$15878 't))) g$214$17705) (g$214$16703 '#f '"invalid syntax" g$214$17703))) ((lambda (g$214$17727) (if (g$214$15954 g$214$17727) (begin '#f ((lambda (g$214$17729) (if g$214$17729 (begin '#f ((lambda (g$214$17731) (if g$214$17731 (begin '#f (append g$214$17729 g$214$17731)) '#f)) ((lambda (g$214$17733) (if (g$214$15954 g$214$17733) (begin '#f ((lambda (g$214$17735) (if g$214$17735 (begin '#f ((lambda (g$214$17737) (if g$214$17737 (begin '#f (append g$214$17735 g$214$17737)) '#f)) ((lambda (g$214$17739) (if (g$214$15954 g$214$17739) (begin '#f ((lambda (g$214$17741) (if g$214$17741 (begin '#f ((lambda (g$214$17743) (if g$214$17743 (begin '#f (append g$214$17741 g$214$17743)) '#f)) ((letrec ((g$214$17745 (lambda (g$214$17747) (if (g$214$15954 g$214$17747) ((lambda (g$214$17749) (if g$214$17749 (begin '#f ((lambda (g$214$17751) (if g$214$17751 (begin '#f (map cons g$214$17749 g$214$17751)) '#f)) (g$214$17745 (g$214$15964 g$214$17747)))) '#f)) ((lambda (g$214$17753) (list g$214$17753)) (g$214$15962 g$214$17747))) (if (g$214$15958 g$214$17747) (list (begin 'cls* '())) '#f))))) g$214$17745) (g$214$15964 g$214$17739)))) '#f)) ((lambda (g$214$17755) (list g$214$17755)) (g$214$15962 g$214$17739)))) '#f)) (g$214$15964 g$214$17733)))) '#f)) ((lambda (g$214$17757) (list g$214$17757)) (g$214$15962 g$214$17733)))) '#f)) (g$214$15964 g$214$17727)))) '#f)) ((lambda (g$214$17759) '()) (g$214$15962 g$214$17727)))) '#f)) g$214$17703))) g$214$17695))) ((lambda (g$214$17761) (if (g$214$15954 g$214$17761) (begin '#f ((lambda (g$214$17763) (if g$214$17763 (begin '#f ((lambda (g$214$17765) (if g$214$17765 (begin '#f (append g$214$17763 g$214$17765)) '#f)) ((lambda (g$214$17767) (if (g$214$15954 g$214$17767) (begin '#f ((lambda (g$214$17769) (if g$214$17769 (begin '#f ((lambda (g$214$17771) (if g$214$17771 (begin '#f (append g$214$17769 g$214$17771)) '#f)) ((lambda (g$214$17773) (if (equal? (g$214$15990 g$214$17773) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$17767)))) '#f)) ((lambda (g$214$17775) (list g$214$17775)) (g$214$15962 g$214$17767)))) '#f)) (g$214$15964 g$214$17761)))) '#f)) ((lambda (g$214$17777) '()) (g$214$15962 g$214$17761)))) '#f)) g$214$17695))) g$214$17685)))) (g$214$16486 (lambda (g$214$17951 g$214$17952 g$214$17953) ((lambda (g$214$17957) ((lambda (g$214$17959) (if (if g$214$17959 (begin '#f (apply (lambda (g$214$17961) '#t) g$214$17959)) '#f) (apply (lambda (g$214$17963) (list 'quote (g$214$15990 g$214$17963))) g$214$17959) (g$214$16703 '#f '"invalid syntax" g$214$17957))) ((lambda (g$214$17965) (if (g$214$15954 g$214$17965) (begin '#f ((lambda (g$214$17967) (if g$214$17967 (begin '#f ((lambda (g$214$17969) (if g$214$17969 (begin '#f (append g$214$17967 g$214$17969)) '#f)) ((lambda (g$214$17971) (if (g$214$15954 g$214$17971) (begin '#f ((lambda (g$214$17973) (if g$214$17973 (begin '#f ((lambda (g$214$17975) (if g$214$17975 (begin '#f (append g$214$17973 g$214$17975)) '#f)) ((lambda (g$214$17977) (if (equal? (g$214$15990 g$214$17977) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$17971)))) '#f)) ((lambda (g$214$17979) (list g$214$17979)) (g$214$15962 g$214$17971)))) '#f)) (g$214$15964 g$214$17965)))) '#f)) ((lambda (g$214$17981) '()) (g$214$15962 g$214$17965)))) '#f)) g$214$17957))) g$214$17951))) (g$214$16488 (lambda (g$214$17983 g$214$17984 g$214$17985) ((lambda (g$214$17989) ((lambda (g$214$17991) (if (if g$214$17991 (begin '#f (apply (lambda (g$214$17993 g$214$17994 g$214$17995) '#t) g$214$17991)) '#f) (apply (lambda (g$214$17999 g$214$18000 g$214$18001) (call-with-values (lambda () (g$214$16594 g$214$17983 g$214$17999 (map cons g$214$18000 g$214$18001) g$214$17984 g$214$17985)) (lambda (g$214$18007 g$214$18008) ((lambda (g$214$18011 g$214$18012) (g$214$15849 '#f g$214$18012 g$214$18011)) g$214$18008 g$214$18007)))) g$214$17991) (g$214$16703 '#f '"invalid syntax" g$214$17989))) ((lambda (g$214$18015) (if (g$214$15954 g$214$18015) (begin '#f ((lambda (g$214$18017) (if g$214$18017 (begin '#f ((lambda (g$214$18019) (if g$214$18019 (begin '#f (append g$214$18017 g$214$18019)) '#f)) ((letrec ((g$214$18021 (lambda (g$214$18023) (if (g$214$15954 g$214$18023) ((lambda (g$214$18025) (if g$214$18025 (begin '#f ((lambda (g$214$18027) (if g$214$18027 (begin '#f (map cons g$214$18025 g$214$18027)) '#f)) (g$214$18021 (g$214$15964 g$214$18023)))) '#f)) ((lambda (g$214$18029) (if (g$214$15954 g$214$18029) (begin '#f ((lambda (g$214$18031) (if g$214$18031 (begin '#f ((lambda (g$214$18033) (if g$214$18033 (begin '#f (append g$214$18031 g$214$18033)) '#f)) ((lambda (g$214$18035) (if (g$214$15954 g$214$18035) (begin '#f ((lambda (g$214$18037) (if g$214$18037 (begin '#f ((lambda (g$214$18039) (if g$214$18039 (begin '#f (append g$214$18037 g$214$18039)) '#f)) ((letrec ((g$214$18041 (lambda (g$214$18043) (if (g$214$15954 g$214$18043) ((lambda (g$214$18045) (if g$214$18045 (begin '#f ((lambda (g$214$18047) (if g$214$18047 (begin '#f (map cons g$214$18045 g$214$18047)) '#f)) (g$214$18041 (g$214$15964 g$214$18043)))) '#f)) ((lambda (g$214$18049) (list g$214$18049)) (g$214$15962 g$214$18043))) (if (g$214$15958 g$214$18043) (list (begin 'b** '())) '#f))))) g$214$18041) (g$214$15964 g$214$18035)))) '#f)) ((lambda (g$214$18051) (list g$214$18051)) (g$214$15962 g$214$18035)))) '#f)) (g$214$15964 g$214$18029)))) '#f)) ((lambda (g$214$18053) (list g$214$18053)) (g$214$15962 g$214$18029)))) '#f)) (g$214$15962 g$214$18023))) (if (g$214$15958 g$214$18023) (list (begin 'fmls* '()) (begin 'b* '()) (begin 'b** '())) '#f))))) g$214$18021) (g$214$15964 g$214$18015)))) '#f)) ((lambda (g$214$18055) '()) (g$214$15962 g$214$18015)))) '#f)) g$214$17989))) g$214$17983))) (g$214$16490 (lambda (g$214$18057 g$214$18058 g$214$18059) ((lambda (g$214$18063) ((lambda (g$214$18065) (if (if g$214$18065 (begin '#f (apply (lambda (g$214$18067 g$214$18068 g$214$18069) '#t) g$214$18065)) '#f) (apply (lambda (g$214$18073 g$214$18074 g$214$18075) (call-with-values (lambda () (g$214$16592 g$214$18057 g$214$18073 (cons g$214$18074 g$214$18075) g$214$18058 g$214$18059)) (lambda (g$214$18081 g$214$18082) ((lambda (g$214$18085 g$214$18086) (g$214$15848 '#f g$214$18086 g$214$18085)) g$214$18082 g$214$18081)))) g$214$18065) (g$214$16703 '#f '"invalid syntax" g$214$18063))) ((lambda (g$214$18089) (if (g$214$15954 g$214$18089) (begin '#f ((lambda (g$214$18091) (if g$214$18091 (begin '#f ((lambda (g$214$18093) (if g$214$18093 (begin '#f (append g$214$18091 g$214$18093)) '#f)) ((lambda (g$214$18095) (if (g$214$15954 g$214$18095) (begin '#f ((lambda (g$214$18097) (if g$214$18097 (begin '#f ((lambda (g$214$18099) (if g$214$18099 (begin '#f (append g$214$18097 g$214$18099)) '#f)) ((lambda (g$214$18101) (if (g$214$15954 g$214$18101) (begin '#f ((lambda (g$214$18103) (if g$214$18103 (begin '#f ((lambda (g$214$18105) (if g$214$18105 (begin '#f (append g$214$18103 g$214$18105)) '#f)) ((letrec ((g$214$18107 (lambda (g$214$18109) (if (g$214$15954 g$214$18109) ((lambda (g$214$18111) (if g$214$18111 (begin '#f ((lambda (g$214$18113) (if g$214$18113 (begin '#f (map cons g$214$18111 g$214$18113)) '#f)) (g$214$18107 (g$214$15964 g$214$18109)))) '#f)) ((lambda (g$214$18115) (list g$214$18115)) (g$214$15962 g$214$18109))) (if (g$214$15958 g$214$18109) (list (begin 'b* '())) '#f))))) g$214$18107) (g$214$15964 g$214$18101)))) '#f)) ((lambda (g$214$18117) (list g$214$18117)) (g$214$15962 g$214$18101)))) '#f)) (g$214$15964 g$214$18095)))) '#f)) ((lambda (g$214$18119) (list g$214$18119)) (g$214$15962 g$214$18095)))) '#f)) (g$214$15964 g$214$18089)))) '#f)) ((lambda (g$214$18121) '()) (g$214$15962 g$214$18089)))) '#f)) g$214$18063))) g$214$18057))) (g$214$16492 (lambda (g$214$18123) (g$214$15944 ((letrec ((g$214$18125 (lambda (g$214$18127) (if (g$214$15920 g$214$18127) g$214$18127 (if (pair? g$214$18127) (cons (g$214$18125 (car g$214$18127)) (g$214$18125 (cdr g$214$18127))) (if (symbol? g$214$18127) (g$214$16454 g$214$18127) (if (vector? g$214$18127) (list->vector (map g$214$18125 (vector->list g$214$18127))) g$214$18127))))))) g$214$18125) g$214$18123) '() '()))) (g$214$16494 (lambda (g$214$18129) ((lambda (g$214$18131) ((lambda (g$214$18133) (if (if g$214$18133 (begin '#f (apply (lambda (g$214$18135 g$214$18136 g$214$18137 g$214$18138) '#t) g$214$18133)) '#f) (apply (lambda (g$214$18143 g$214$18144 g$214$18145 g$214$18146) (g$214$16492 (list 'syntax-case (cons 'list g$214$18144) '() (list g$214$18143 (cons 'begin (cons g$214$18145 g$214$18146)))))) g$214$18133) (g$214$16703 '#f '"invalid syntax" g$214$18131))) ((lambda (g$214$18151) (if (g$214$15954 g$214$18151) (begin '#f ((lambda (g$214$18153) (if g$214$18153 (begin '#f ((lambda (g$214$18155) (if g$214$18155 (begin '#f (append g$214$18153 g$214$18155)) '#f)) ((lambda (g$214$18157) (if (g$214$15954 g$214$18157) (begin '#f ((lambda (g$214$18159) (if g$214$18159 (begin '#f ((lambda (g$214$18161) (if g$214$18161 (begin '#f (append g$214$18159 g$214$18161)) '#f)) ((lambda (g$214$18163) (if (g$214$15954 g$214$18163) (begin '#f ((lambda (g$214$18165) (if g$214$18165 (begin '#f ((lambda (g$214$18167) (if g$214$18167 (begin '#f (append g$214$18165 g$214$18167)) '#f)) ((letrec ((g$214$18169 (lambda (g$214$18171) (if (g$214$15954 g$214$18171) ((lambda (g$214$18173) (if g$214$18173 (begin '#f ((lambda (g$214$18175) (if g$214$18175 (begin '#f (map cons g$214$18173 g$214$18175)) '#f)) (g$214$18169 (g$214$15964 g$214$18171)))) '#f)) ((lambda (g$214$18177) (list g$214$18177)) (g$214$15962 g$214$18171))) (if (g$214$15958 g$214$18171) (list (begin 'b* '())) '#f))))) g$214$18169) (g$214$15964 g$214$18163)))) '#f)) ((lambda (g$214$18179) (list g$214$18179)) (g$214$15962 g$214$18163)))) '#f)) (g$214$15964 g$214$18157)))) '#f)) ((letrec ((g$214$18181 (lambda (g$214$18183) (if (g$214$15954 g$214$18183) ((lambda (g$214$18185) (if g$214$18185 (begin '#f ((lambda (g$214$18187) (if g$214$18187 (begin '#f (map cons g$214$18185 g$214$18187)) '#f)) (g$214$18181 (g$214$15964 g$214$18183)))) '#f)) ((lambda (g$214$18189) (if (g$214$15954 g$214$18189) (begin '#f ((lambda (g$214$18191) (if g$214$18191 (begin '#f ((lambda (g$214$18193) (if g$214$18193 (begin '#f (append g$214$18191 g$214$18193)) '#f)) ((lambda (g$214$18195) (if (g$214$15954 g$214$18195) (begin '#f ((lambda (g$214$18197) (if g$214$18197 (begin '#f ((lambda (g$214$18199) (if g$214$18199 (begin '#f (append g$214$18197 g$214$18199)) '#f)) ((lambda (g$214$18201) (if (equal? (g$214$15990 g$214$18201) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$18195)))) '#f)) ((lambda (g$214$18203) (list g$214$18203)) (g$214$15962 g$214$18195)))) '#f)) (g$214$15964 g$214$18189)))) '#f)) ((lambda (g$214$18205) (list g$214$18205)) (g$214$15962 g$214$18189)))) '#f)) (g$214$15962 g$214$18183))) (if (g$214$15958 g$214$18183) (list (begin 'fml* '()) (begin 'expr* '())) '#f))))) g$214$18181) (g$214$15962 g$214$18157)))) '#f)) (g$214$15964 g$214$18151)))) '#f)) ((lambda (g$214$18207) '()) (g$214$15962 g$214$18151)))) '#f)) g$214$18131))) g$214$18129))) (g$214$16496 (lambda (g$214$18209 g$214$18210) ((lambda (g$214$18213) ((lambda (g$214$18215) (if (if g$214$18215 (begin '#f (apply (lambda (g$214$18217 g$214$18218) '#t) g$214$18215)) '#f) (apply (lambda (g$214$18221 g$214$18222) ((letrec ((g$214$18225 (lambda (g$214$18227) (if (null? g$214$18227) (values) (if (not (g$214$15968 (car g$214$18227))) (g$214$16703 '#f '"not an identifier" g$214$18209 (car g$214$18227)) (begin (g$214$18225 (cdr g$214$18227)) (if (g$214$15982 (car g$214$18227) (cdr g$214$18227)) (g$214$16703 '#f '"duplicate binding" g$214$18209 (car g$214$18227)) (void)))))))) g$214$18225) (if (g$214$15968 g$214$18222) (cons g$214$18222 g$214$18221) (if (g$214$15958 g$214$18222) g$214$18221 (g$214$16703 '#f '"not an identifier" g$214$18209 g$214$18222))))) g$214$18215) ((lambda (g$214$18229) ((lambda (g$214$18231) (if (if g$214$18231 (begin '#f (apply (lambda () '#t) g$214$18231)) '#f) (apply (lambda () (g$214$16703 '#f '"malformed binding form" g$214$18209 g$214$18210)) g$214$18231) (g$214$16703 '#f '"invalid syntax" g$214$18229))) ((lambda (g$214$18233) '()) g$214$18229))) g$214$18213))) ((letrec ((g$214$18235 (lambda (g$214$18241) (if (g$214$15954 g$214$18241) ((lambda (g$214$18243) (if g$214$18243 (begin '#f ((lambda (g$214$18245) (if g$214$18245 (begin '#f (cons (map cons g$214$18243 (car g$214$18245)) (cdr g$214$18245))) '#f)) (g$214$18235 (g$214$15964 g$214$18241)))) '#f)) ((lambda (g$214$18247) (list g$214$18247)) (g$214$15962 g$214$18241))) ((lambda (g$214$18249) (if g$214$18249 (begin '#f (cons (list (begin 'id* '())) g$214$18249)) '#f)) ((lambda (g$214$18251) (list g$214$18251)) g$214$18241)))))) (lambda (g$214$18237) ((lambda (g$214$18239) (if g$214$18239 (begin '#f (append (car g$214$18239) (cdr g$214$18239))) '#f)) (g$214$18235 g$214$18237)))) g$214$18213))) g$214$18210))) (g$214$16498 (lambda (g$214$18253) ((lambda (g$214$18255) ((lambda (g$214$18257) (if (if g$214$18257 (begin '#f (apply (lambda (g$214$18259 g$214$18260 g$214$18261 g$214$18262) '#t) g$214$18257)) '#f) (apply (lambda (g$214$18267 g$214$18268 g$214$18269 g$214$18270) (if (g$214$15978 g$214$18267) (g$214$16492 (cons (cons 'lambda (cons g$214$18267 (cons g$214$18269 g$214$18270))) g$214$18268)) (g$214$16496 g$214$18253 g$214$18267))) g$214$18257) ((lambda (g$214$18275) ((lambda (g$214$18277) (if (if g$214$18277 (begin '#f (apply (lambda (g$214$18279 g$214$18280 g$214$18281 g$214$18282 g$214$18283) (g$214$15968 g$214$18279)) g$214$18277)) '#f) (apply (lambda (g$214$18289 g$214$18290 g$214$18291 g$214$18292 g$214$18293) (if (g$214$15978 g$214$18290) (g$214$16492 (cons (list 'letrec (list (list g$214$18289 (cons 'lambda (cons g$214$18290 (cons g$214$18292 g$214$18293))))) g$214$18289) g$214$18291)) (g$214$16496 g$214$18253 g$214$18290))) g$214$18277) (g$214$16703 '#f '"invalid syntax" g$214$18275))) ((lambda (g$214$18299) (if (g$214$15954 g$214$18299) (begin '#f ((lambda (g$214$18301) (if g$214$18301 (begin '#f ((lambda (g$214$18303) (if g$214$18303 (begin '#f (append g$214$18301 g$214$18303)) '#f)) ((lambda (g$214$18305) (if (g$214$15954 g$214$18305) (begin '#f ((lambda (g$214$18307) (if g$214$18307 (begin '#f ((lambda (g$214$18309) (if g$214$18309 (begin '#f (append g$214$18307 g$214$18309)) '#f)) ((lambda (g$214$18311) (if (g$214$15954 g$214$18311) (begin '#f ((lambda (g$214$18313) (if g$214$18313 (begin '#f ((lambda (g$214$18315) (if g$214$18315 (begin '#f (append g$214$18313 g$214$18315)) '#f)) ((lambda (g$214$18317) (if (g$214$15954 g$214$18317) (begin '#f ((lambda (g$214$18319) (if g$214$18319 (begin '#f ((lambda (g$214$18321) (if g$214$18321 (begin '#f (append g$214$18319 g$214$18321)) '#f)) ((letrec ((g$214$18323 (lambda (g$214$18325) (if (g$214$15954 g$214$18325) ((lambda (g$214$18327) (if g$214$18327 (begin '#f ((lambda (g$214$18329) (if g$214$18329 (begin '#f (map cons g$214$18327 g$214$18329)) '#f)) (g$214$18323 (g$214$15964 g$214$18325)))) '#f)) ((lambda (g$214$18331) (list g$214$18331)) (g$214$15962 g$214$18325))) (if (g$214$15958 g$214$18325) (list (begin 'b* '())) '#f))))) g$214$18323) (g$214$15964 g$214$18317)))) '#f)) ((lambda (g$214$18333) (list g$214$18333)) (g$214$15962 g$214$18317)))) '#f)) (g$214$15964 g$214$18311)))) '#f)) ((letrec ((g$214$18335 (lambda (g$214$18337) (if (g$214$15954 g$214$18337) ((lambda (g$214$18339) (if g$214$18339 (begin '#f ((lambda (g$214$18341) (if g$214$18341 (begin '#f (map cons g$214$18339 g$214$18341)) '#f)) (g$214$18335 (g$214$15964 g$214$18337)))) '#f)) ((lambda (g$214$18343) (if (g$214$15954 g$214$18343) (begin '#f ((lambda (g$214$18345) (if g$214$18345 (begin '#f ((lambda (g$214$18347) (if g$214$18347 (begin '#f (append g$214$18345 g$214$18347)) '#f)) ((lambda (g$214$18349) (if (g$214$15954 g$214$18349) (begin '#f ((lambda (g$214$18351) (if g$214$18351 (begin '#f ((lambda (g$214$18353) (if g$214$18353 (begin '#f (append g$214$18351 g$214$18353)) '#f)) ((lambda (g$214$18355) (if (equal? (g$214$15990 g$214$18355) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$18349)))) '#f)) ((lambda (g$214$18357) (list g$214$18357)) (g$214$15962 g$214$18349)))) '#f)) (g$214$15964 g$214$18343)))) '#f)) ((lambda (g$214$18359) (list g$214$18359)) (g$214$15962 g$214$18343)))) '#f)) (g$214$15962 g$214$18337))) (if (g$214$15958 g$214$18337) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$214$18335) (g$214$15962 g$214$18311)))) '#f)) (g$214$15964 g$214$18305)))) '#f)) ((lambda (g$214$18361) (list g$214$18361)) (g$214$15962 g$214$18305)))) '#f)) (g$214$15964 g$214$18299)))) '#f)) ((lambda (g$214$18363) '()) (g$214$15962 g$214$18299)))) '#f)) g$214$18275))) g$214$18255))) ((lambda (g$214$18365) (if (g$214$15954 g$214$18365) (begin '#f ((lambda (g$214$18367) (if g$214$18367 (begin '#f ((lambda (g$214$18369) (if g$214$18369 (begin '#f (append g$214$18367 g$214$18369)) '#f)) ((lambda (g$214$18371) (if (g$214$15954 g$214$18371) (begin '#f ((lambda (g$214$18373) (if g$214$18373 (begin '#f ((lambda (g$214$18375) (if g$214$18375 (begin '#f (append g$214$18373 g$214$18375)) '#f)) ((lambda (g$214$18377) (if (g$214$15954 g$214$18377) (begin '#f ((lambda (g$214$18379) (if g$214$18379 (begin '#f ((lambda (g$214$18381) (if g$214$18381 (begin '#f (append g$214$18379 g$214$18381)) '#f)) ((letrec ((g$214$18383 (lambda (g$214$18385) (if (g$214$15954 g$214$18385) ((lambda (g$214$18387) (if g$214$18387 (begin '#f ((lambda (g$214$18389) (if g$214$18389 (begin '#f (map cons g$214$18387 g$214$18389)) '#f)) (g$214$18383 (g$214$15964 g$214$18385)))) '#f)) ((lambda (g$214$18391) (list g$214$18391)) (g$214$15962 g$214$18385))) (if (g$214$15958 g$214$18385) (list (begin 'b* '())) '#f))))) g$214$18383) (g$214$15964 g$214$18377)))) '#f)) ((lambda (g$214$18393) (list g$214$18393)) (g$214$15962 g$214$18377)))) '#f)) (g$214$15964 g$214$18371)))) '#f)) ((letrec ((g$214$18395 (lambda (g$214$18397) (if (g$214$15954 g$214$18397) ((lambda (g$214$18399) (if g$214$18399 (begin '#f ((lambda (g$214$18401) (if g$214$18401 (begin '#f (map cons g$214$18399 g$214$18401)) '#f)) (g$214$18395 (g$214$15964 g$214$18397)))) '#f)) ((lambda (g$214$18403) (if (g$214$15954 g$214$18403) (begin '#f ((lambda (g$214$18405) (if g$214$18405 (begin '#f ((lambda (g$214$18407) (if g$214$18407 (begin '#f (append g$214$18405 g$214$18407)) '#f)) ((lambda (g$214$18409) (if (g$214$15954 g$214$18409) (begin '#f ((lambda (g$214$18411) (if g$214$18411 (begin '#f ((lambda (g$214$18413) (if g$214$18413 (begin '#f (append g$214$18411 g$214$18413)) '#f)) ((lambda (g$214$18415) (if (equal? (g$214$15990 g$214$18415) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$18409)))) '#f)) ((lambda (g$214$18417) (list g$214$18417)) (g$214$15962 g$214$18409)))) '#f)) (g$214$15964 g$214$18403)))) '#f)) ((lambda (g$214$18419) (list g$214$18419)) (g$214$15962 g$214$18403)))) '#f)) (g$214$15962 g$214$18397))) (if (g$214$15958 g$214$18397) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$214$18395) (g$214$15962 g$214$18371)))) '#f)) (g$214$15964 g$214$18365)))) '#f)) ((lambda (g$214$18421) '()) (g$214$15962 g$214$18365)))) '#f)) g$214$18255))) g$214$18253))) (g$214$16500 (lambda (g$214$18423) (letrec ((g$214$18425 (lambda (g$214$18666 g$214$18667 g$214$18668) (begin (if (g$214$15968 g$214$18666) (void) (g$214$16703 '#f '"not an indentifier" g$214$18423 g$214$18666)) (if (g$214$15982 g$214$18666 g$214$18667) (g$214$16703 '#f '"duplicate binding" g$214$18423 g$214$18666) (void)) ((lambda (g$214$18672) (values g$214$18672 (cons g$214$18666 g$214$18667) (cons g$214$18672 g$214$18668))) (gensym (g$214$16709 g$214$18666)))))) (g$214$18427 (lambda (g$214$18648 g$214$18649 g$214$18650) (if (null? g$214$18648) (values '() g$214$18649 g$214$18650) (call-with-values (lambda () (g$214$18425 (car g$214$18648) g$214$18649 g$214$18650)) (lambda (g$214$18654 g$214$18655 g$214$18656) (call-with-values (lambda () (g$214$18427 (cdr g$214$18648) g$214$18655 g$214$18656)) (lambda (g$214$18660 g$214$18661 g$214$18662) (values (cons g$214$18654 g$214$18660) g$214$18661 g$214$18662))))))))) ((lambda (g$214$18429) ((lambda (g$214$18431) (if (if g$214$18431 (begin '#f (apply (lambda (g$214$18433 g$214$18434) '#t) g$214$18431)) '#f) (apply (lambda (g$214$18437 g$214$18438) (cons* (g$214$16492 'let) '() g$214$18437 g$214$18438)) g$214$18431) ((lambda (g$214$18441) ((lambda (g$214$18443) (if (if g$214$18443 (begin '#f (apply (lambda (g$214$18445 g$214$18446 g$214$18447 g$214$18448) '#t) g$214$18443)) '#f) (apply (lambda (g$214$18453 g$214$18454 g$214$18455 g$214$18456) (g$214$16492 ((letrec ((g$214$18461 (lambda (g$214$18463 g$214$18464 g$214$18465 g$214$18466) (if (null? g$214$18463) (cons 'let (cons (map list g$214$18465 g$214$18466) (cons g$214$18455 g$214$18456))) ((lambda (g$214$18471) ((lambda (g$214$18473) (if (if g$214$18473 (begin '#f (apply (lambda (g$214$18475) '#t) g$214$18473)) '#f) (apply (lambda (g$214$18477) (call-with-values (lambda () (g$214$18427 g$214$18477 g$214$18465 g$214$18466)) (lambda (g$214$18482 g$214$18483 g$214$18484) ((lambda (g$214$18488 g$214$18489 g$214$18490) (list 'call-with-values (list 'lambda '() (car g$214$18464)) (list 'lambda g$214$18490 (g$214$18461 (cdr g$214$18463) (cdr g$214$18464) g$214$18489 g$214$18488)))) g$214$18484 g$214$18483 g$214$18482)))) g$214$18473) ((lambda (g$214$18494) ((lambda (g$214$18496) (if (if g$214$18496 (begin '#f (apply (lambda (g$214$18498 g$214$18499) '#t) g$214$18496)) '#f) (apply (lambda (g$214$18502 g$214$18503) (call-with-values (lambda () (g$214$18425 g$214$18503 g$214$18465 g$214$18466)) (lambda (g$214$18506 g$214$18507 g$214$18508) (call-with-values (lambda () (g$214$18427 g$214$18502 g$214$18507 g$214$18508)) (lambda (g$214$18512 g$214$18513 g$214$18514) (list 'call-with-values (list 'lambda '() (car g$214$18464)) (list 'lambda (append g$214$18512 g$214$18506) (g$214$18461 (cdr g$214$18463) (cdr g$214$18464) g$214$18513 g$214$18514)))))))) g$214$18496) ((lambda (g$214$18518) ((lambda (g$214$18520) (if (if g$214$18520 (begin '#f (apply (lambda (g$214$18522) '#t) g$214$18520)) '#f) (apply (lambda (g$214$18524) (g$214$16703 '#f '"malformed bindings" g$214$18423 g$214$18524)) g$214$18520) (g$214$16703 '#f '"invalid syntax" g$214$18518))) ((lambda (g$214$18526) (list g$214$18526)) g$214$18518))) g$214$18494))) ((letrec ((g$214$18528 (lambda (g$214$18534) (if (g$214$15954 g$214$18534) ((lambda (g$214$18536) (if g$214$18536 (begin '#f ((lambda (g$214$18538) (if g$214$18538 (begin '#f (cons (map cons g$214$18536 (car g$214$18538)) (cdr g$214$18538))) '#f)) (g$214$18528 (g$214$15964 g$214$18534)))) '#f)) ((lambda (g$214$18540) (list g$214$18540)) (g$214$15962 g$214$18534))) ((lambda (g$214$18542) (if g$214$18542 (begin '#f (cons (list (begin 'x* '())) g$214$18542)) '#f)) ((lambda (g$214$18544) (list g$214$18544)) g$214$18534)))))) (lambda (g$214$18530) ((lambda (g$214$18532) (if g$214$18532 (begin '#f (append (car g$214$18532) (cdr g$214$18532))) '#f)) (g$214$18528 g$214$18530)))) g$214$18494))) g$214$18471))) ((letrec ((g$214$18546 (lambda (g$214$18548) (if (g$214$15954 g$214$18548) ((lambda (g$214$18550) (if g$214$18550 (begin '#f ((lambda (g$214$18552) (if g$214$18552 (begin '#f (map cons g$214$18550 g$214$18552)) '#f)) (g$214$18546 (g$214$15964 g$214$18548)))) '#f)) ((lambda (g$214$18554) (list g$214$18554)) (g$214$15962 g$214$18548))) (if (g$214$15958 g$214$18548) (list (begin 'x* '())) '#f))))) g$214$18546) g$214$18471))) (car g$214$18463)))))) g$214$18461) g$214$18453 g$214$18454 '() '()))) g$214$18443) (g$214$16703 '#f '"invalid syntax" g$214$18441))) ((lambda (g$214$18556) (if (g$214$15954 g$214$18556) (begin '#f ((lambda (g$214$18558) (if g$214$18558 (begin '#f ((lambda (g$214$18560) (if g$214$18560 (begin '#f (append g$214$18558 g$214$18560)) '#f)) ((lambda (g$214$18562) (if (g$214$15954 g$214$18562) (begin '#f ((lambda (g$214$18564) (if g$214$18564 (begin '#f ((lambda (g$214$18566) (if g$214$18566 (begin '#f (append g$214$18564 g$214$18566)) '#f)) ((lambda (g$214$18568) (if (g$214$15954 g$214$18568) (begin '#f ((lambda (g$214$18570) (if g$214$18570 (begin '#f ((lambda (g$214$18572) (if g$214$18572 (begin '#f (append g$214$18570 g$214$18572)) '#f)) ((letrec ((g$214$18574 (lambda (g$214$18576) (if (g$214$15954 g$214$18576) ((lambda (g$214$18578) (if g$214$18578 (begin '#f ((lambda (g$214$18580) (if g$214$18580 (begin '#f (map cons g$214$18578 g$214$18580)) '#f)) (g$214$18574 (g$214$15964 g$214$18576)))) '#f)) ((lambda (g$214$18582) (list g$214$18582)) (g$214$15962 g$214$18576))) (if (g$214$15958 g$214$18576) (list (begin 'b* '())) '#f))))) g$214$18574) (g$214$15964 g$214$18568)))) '#f)) ((lambda (g$214$18584) (list g$214$18584)) (g$214$15962 g$214$18568)))) '#f)) (g$214$15964 g$214$18562)))) '#f)) ((letrec ((g$214$18586 (lambda (g$214$18588) (if (g$214$15954 g$214$18588) ((lambda (g$214$18590) (if g$214$18590 (begin '#f ((lambda (g$214$18592) (if g$214$18592 (begin '#f (map cons g$214$18590 g$214$18592)) '#f)) (g$214$18586 (g$214$15964 g$214$18588)))) '#f)) ((lambda (g$214$18594) (if (g$214$15954 g$214$18594) (begin '#f ((lambda (g$214$18596) (if g$214$18596 (begin '#f ((lambda (g$214$18598) (if g$214$18598 (begin '#f (append g$214$18596 g$214$18598)) '#f)) ((lambda (g$214$18600) (if (g$214$15954 g$214$18600) (begin '#f ((lambda (g$214$18602) (if g$214$18602 (begin '#f ((lambda (g$214$18604) (if g$214$18604 (begin '#f (append g$214$18602 g$214$18604)) '#f)) ((lambda (g$214$18606) (if (equal? (g$214$15990 g$214$18606) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$18600)))) '#f)) ((lambda (g$214$18608) (list g$214$18608)) (g$214$15962 g$214$18600)))) '#f)) (g$214$15964 g$214$18594)))) '#f)) ((lambda (g$214$18610) (list g$214$18610)) (g$214$15962 g$214$18594)))) '#f)) (g$214$15962 g$214$18588))) (if (g$214$15958 g$214$18588) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$214$18586) (g$214$15962 g$214$18562)))) '#f)) (g$214$15964 g$214$18556)))) '#f)) ((lambda (g$214$18612) '()) (g$214$15962 g$214$18556)))) '#f)) g$214$18441))) g$214$18429))) ((lambda (g$214$18614) (if (g$214$15954 g$214$18614) (begin '#f ((lambda (g$214$18616) (if g$214$18616 (begin '#f ((lambda (g$214$18618) (if g$214$18618 (begin '#f (append g$214$18616 g$214$18618)) '#f)) ((lambda (g$214$18620) (if (g$214$15954 g$214$18620) (begin '#f ((lambda (g$214$18622) (if g$214$18622 (begin '#f ((lambda (g$214$18624) (if g$214$18624 (begin '#f (append g$214$18622 g$214$18624)) '#f)) ((lambda (g$214$18626) (if (g$214$15954 g$214$18626) (begin '#f ((lambda (g$214$18628) (if g$214$18628 (begin '#f ((lambda (g$214$18630) (if g$214$18630 (begin '#f (append g$214$18628 g$214$18630)) '#f)) ((letrec ((g$214$18632 (lambda (g$214$18634) (if (g$214$15954 g$214$18634) ((lambda (g$214$18636) (if g$214$18636 (begin '#f ((lambda (g$214$18638) (if g$214$18638 (begin '#f (map cons g$214$18636 g$214$18638)) '#f)) (g$214$18632 (g$214$15964 g$214$18634)))) '#f)) ((lambda (g$214$18640) (list g$214$18640)) (g$214$15962 g$214$18634))) (if (g$214$15958 g$214$18634) (list (begin 'b* '())) '#f))))) g$214$18632) (g$214$15964 g$214$18626)))) '#f)) ((lambda (g$214$18642) (list g$214$18642)) (g$214$15962 g$214$18626)))) '#f)) (g$214$15964 g$214$18620)))) '#f)) ((lambda (g$214$18644) (if (equal? (g$214$15990 g$214$18644) '()) (begin '#f '()) '#f)) (g$214$15962 g$214$18620)))) '#f)) (g$214$15964 g$214$18614)))) '#f)) ((lambda (g$214$18646) '()) (g$214$15962 g$214$18614)))) '#f)) g$214$18429))) g$214$18423)))) (g$214$16502 (lambda (g$214$18674) (letrec ((g$214$18676 (lambda (g$214$18866) (if (null? g$214$18866) (void) ((lambda (g$214$18868) (begin (if (g$214$15968 g$214$18868) (void) (g$214$16703 '#f '"not an identifier" g$214$18674 g$214$18868)) (g$214$18676 (cdr g$214$18866)) (if (g$214$15982 g$214$18868 (cdr g$214$18866)) (g$214$16703 '#f '"duplicate identifier" g$214$18674 g$214$18868) (void)))) (car g$214$18866)))))) ((lambda (g$214$18678) ((lambda (g$214$18680) (if (if g$214$18680 (begin '#f (apply (lambda (g$214$18682 g$214$18683) '#t) g$214$18680)) '#f) (apply (lambda (g$214$18686 g$214$18687) (cons* (g$214$16492 'let) '() g$214$18686 g$214$18687)) g$214$18680) ((lambda (g$214$18690) ((lambda (g$214$18692) (if (if g$214$18692 (begin '#f (apply (lambda (g$214$18694 g$214$18695 g$214$18696 g$214$18697) '#t) g$214$18692)) '#f) (apply (lambda (g$214$18702 g$214$18703 g$214$18704 g$214$18705) (g$214$16492 ((letrec ((g$214$18710 (lambda (g$214$18712 g$214$18713) (if (null? g$214$18712) (cons 'begin (cons g$214$18704 g$214$18705)) ((lambda (g$214$18716) ((lambda (g$214$18718) (if (if g$214$18718 (begin '#f (apply (lambda (g$214$18720) '#t) g$214$18718)) '#f) (apply (lambda (g$214$18722) (begin (g$214$18676 g$214$18722) (list 'call-with-values (list 'lambda '() (car g$214$18713)) (list 'lambda g$214$18722 (g$214$18710 (cdr g$214$18712) (cdr g$214$18713)))))) g$214$18718) ((lambda (g$214$18724) ((lambda (g$214$18726) (if (if g$214$18726 (begin '#f (apply (lambda (g$214$18728 g$214$18729) '#t) g$214$18726)) '#f) (apply (lambda (g$214$18732 g$214$18733) (begin (g$214$18676 (cons g$214$18733 g$214$18732)) (list 'call-with-values (list 'lambda '() (car g$214$18713)) (list 'lambda (append g$214$18732 g$214$18733) (g$214$18710 (cdr g$214$18712) (cdr g$214$18713)))))) g$214$18726) ((lambda (g$214$18736) ((lambda (g$214$18738) (if (if g$214$18738 (begin '#f (apply (lambda (g$214$18740) '#t) g$214$18738)) '#f) (apply (lambda (g$214$18742) (g$214$16703 '#f '"malformed bindings" g$214$18674 g$214$18742)) g$214$18738) (g$214$16703 '#f '"invalid syntax" g$214$18736))) ((lambda (g$214$18744) (list g$214$18744)) g$214$18736))) g$214$18724))) ((letrec ((g$214$18746 (lambda (g$214$18752) (if (g$214$15954 g$214$18752) ((lambda (g$214$18754) (if g$214$18754 (begin '#f ((lambda (g$214$18756) (if g$214$18756 (begin '#f (cons (map cons g$214$18754 (car g$214$18756)) (cdr g$214$18756))) '#f)) (g$214$18746 (g$214$15964 g$214$18752)))) '#f)) ((lambda (g$214$18758) (list g$214$18758)) (g$214$15962 g$214$18752))) ((lambda (g$214$18760) (if g$214$18760 (begin '#f (cons (list (begin 'x* '())) g$214$18760)) '#f)) ((lambda (g$214$18762) (list g$214$18762)) g$214$18752)))))) (lambda (g$214$18748) ((lambda (g$214$18750) (if g$214$18750 (begin '#f (append (car g$214$18750) (cdr g$214$18750))) '#f)) (g$214$18746 g$214$18748)))) g$214$18724))) g$214$18716))) ((letrec ((g$214$18764 (lambda (g$214$18766) (if (g$214$15954 g$214$18766) ((lambda (g$214$18768) (if g$214$18768 (begin '#f ((lambda (g$214$18770) (if g$214$18770 (begin '#f (map cons g$214$18768 g$214$18770)) '#f)) (g$214$18764 (g$214$15964 g$214$18766)))) '#f)) ((lambda (g$214$18772) (list g$214$18772)) (g$214$15962 g$214$18766))) (if (g$214$15958 g$214$18766) (list (begin 'x* '())) '#f))))) g$214$18764) g$214$18716))) (car g$214$18712)))))) g$214$18710) g$214$18702 g$214$18703))) g$214$18692) (g$214$16703 '#f '"invalid syntax" g$214$18690))) ((lambda (g$214$18774) (if (g$214$15954 g$214$18774) (begin '#f ((lambda (g$214$18776) (if g$214$18776 (begin '#f ((lambda (g$214$18778) (if g$214$18778 (begin '#f (append g$214$18776 g$214$18778)) '#f)) ((lambda (g$214$18780) (if (g$214$15954 g$214$18780) (begin '#f ((lambda (g$214$18782) (if g$214$18782 (begin '#f ((lambda (g$214$18784) (if g$214$18784 (begin '#f (append g$214$18782 g$214$18784)) '#f)) ((lambda (g$214$18786) (if (g$214$15954 g$214$18786) (begin '#f ((lambda (g$214$18788) (if g$214$18788 (begin '#f ((lambda (g$214$18790) (if g$214$18790 (begin '#f (append g$214$18788 g$214$18790)) '#f)) ((letrec ((g$214$18792 (lambda (g$214$18794) (if (g$214$15954 g$214$18794) ((lambda (g$214$18796) (if g$214$18796 (begin '#f ((lambda (g$214$18798) (if g$214$18798 (begin '#f (map cons g$214$18796 g$214$18798)) '#f)) (g$214$18792 (g$214$15964 g$214$18794)))) '#f)) ((lambda (g$214$18800) (list g$214$18800)) (g$214$15962 g$214$18794))) (if (g$214$15958 g$214$18794) (list (begin 'b* '())) '#f))))) g$214$18792) (g$214$15964 g$214$18786)))) '#f)) ((lambda (g$214$18802) (list g$214$18802)) (g$214$15962 g$214$18786)))) '#f)) (g$214$15964 g$214$18780)))) '#f)) ((letrec ((g$214$18804 (lambda (g$214$18806) (if (g$214$15954 g$214$18806) ((lambda (g$214$18808) (if g$214$18808 (begin '#f ((lambda (g$214$18810) (if g$214$18810 (begin '#f (map cons g$214$18808 g$214$18810)) '#f)) (g$214$18804 (g$214$15964 g$214$18806)))) '#f)) ((lambda (g$214$18812) (if (g$214$15954 g$214$18812) (begin '#f ((lambda (g$214$18814) (if g$214$18814 (begin '#f ((lambda (g$214$18816) (if g$214$18816 (begin '#f (append g$214$18814 g$214$18816)) '#f)) ((lambda (g$214$18818) (if (g$214$15954 g$214$18818) (begin '#f ((lambda (g$214$18820) (if g$214$18820 (begin '#f ((lambda (g$214$18822) (if g$214$18822 (begin '#f (append g$214$18820 g$214$18822)) '#f)) ((lambda (g$214$18824) (if (equal? (g$214$15990 g$214$18824) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$18818)))) '#f)) ((lambda (g$214$18826) (list g$214$18826)) (g$214$15962 g$214$18818)))) '#f)) (g$214$15964 g$214$18812)))) '#f)) ((lambda (g$214$18828) (list g$214$18828)) (g$214$15962 g$214$18812)))) '#f)) (g$214$15962 g$214$18806))) (if (g$214$15958 g$214$18806) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$214$18804) (g$214$15962 g$214$18780)))) '#f)) (g$214$15964 g$214$18774)))) '#f)) ((lambda (g$214$18830) '()) (g$214$15962 g$214$18774)))) '#f)) g$214$18690))) g$214$18678))) ((lambda (g$214$18832) (if (g$214$15954 g$214$18832) (begin '#f ((lambda (g$214$18834) (if g$214$18834 (begin '#f ((lambda (g$214$18836) (if g$214$18836 (begin '#f (append g$214$18834 g$214$18836)) '#f)) ((lambda (g$214$18838) (if (g$214$15954 g$214$18838) (begin '#f ((lambda (g$214$18840) (if g$214$18840 (begin '#f ((lambda (g$214$18842) (if g$214$18842 (begin '#f (append g$214$18840 g$214$18842)) '#f)) ((lambda (g$214$18844) (if (g$214$15954 g$214$18844) (begin '#f ((lambda (g$214$18846) (if g$214$18846 (begin '#f ((lambda (g$214$18848) (if g$214$18848 (begin '#f (append g$214$18846 g$214$18848)) '#f)) ((letrec ((g$214$18850 (lambda (g$214$18852) (if (g$214$15954 g$214$18852) ((lambda (g$214$18854) (if g$214$18854 (begin '#f ((lambda (g$214$18856) (if g$214$18856 (begin '#f (map cons g$214$18854 g$214$18856)) '#f)) (g$214$18850 (g$214$15964 g$214$18852)))) '#f)) ((lambda (g$214$18858) (list g$214$18858)) (g$214$15962 g$214$18852))) (if (g$214$15958 g$214$18852) (list (begin 'b* '())) '#f))))) g$214$18850) (g$214$15964 g$214$18844)))) '#f)) ((lambda (g$214$18860) (list g$214$18860)) (g$214$15962 g$214$18844)))) '#f)) (g$214$15964 g$214$18838)))) '#f)) ((lambda (g$214$18862) (if (equal? (g$214$15990 g$214$18862) '()) (begin '#f '()) '#f)) (g$214$15962 g$214$18838)))) '#f)) (g$214$15964 g$214$18832)))) '#f)) ((lambda (g$214$18864) '()) (g$214$15962 g$214$18832)))) '#f)) g$214$18678))) g$214$18674)))) (g$214$16504 (lambda (g$214$18870) ((lambda (g$214$18872) ((lambda (g$214$18874) (if (if g$214$18874 (begin '#f (apply (lambda (g$214$18876 g$214$18877 g$214$18878 g$214$18879) '#t) g$214$18874)) '#f) (apply (lambda (g$214$18884 g$214$18885 g$214$18886 g$214$18887) (if (g$214$15978 g$214$18885) (g$214$16492 (list 'make-traced-procedure (list 'quote g$214$18884) (cons 'lambda (cons g$214$18885 (cons g$214$18886 g$214$18887))))) (g$214$16496 g$214$18870 g$214$18885))) g$214$18874) ((lambda (g$214$18892) ((lambda (g$214$18894) (if (if g$214$18894 (begin '#f (apply (lambda (g$214$18896 g$214$18897 g$214$18898 g$214$18899 g$214$18900) '#t) g$214$18894)) '#f) (apply (lambda (g$214$18906 g$214$18907 g$214$18908 g$214$18909 g$214$18910) (if (g$214$15978 (cons g$214$18908 g$214$18907)) (g$214$16492 (list 'make-traced-procedure (list 'quote g$214$18906) (cons 'lambda (cons (append g$214$18907 g$214$18908) (cons g$214$18909 g$214$18910))))) (g$214$16496 g$214$18870 (append g$214$18907 g$214$18908)))) g$214$18894) (g$214$16703 '#f '"invalid syntax" g$214$18892))) ((lambda (g$214$18916) (if (g$214$15954 g$214$18916) (begin '#f ((lambda (g$214$18918) (if g$214$18918 (begin '#f ((lambda (g$214$18920) (if g$214$18920 (begin '#f (append g$214$18918 g$214$18920)) '#f)) ((lambda (g$214$18922) (if (g$214$15954 g$214$18922) (begin '#f ((lambda (g$214$18924) (if g$214$18924 (begin '#f ((lambda (g$214$18926) (if g$214$18926 (begin '#f (append g$214$18924 g$214$18926)) '#f)) ((lambda (g$214$18928) (if (g$214$15954 g$214$18928) (begin '#f ((lambda (g$214$18930) (if g$214$18930 (begin '#f ((lambda (g$214$18932) (if g$214$18932 (begin '#f (append g$214$18930 g$214$18932)) '#f)) ((lambda (g$214$18934) (if (g$214$15954 g$214$18934) (begin '#f ((lambda (g$214$18936) (if g$214$18936 (begin '#f ((lambda (g$214$18938) (if g$214$18938 (begin '#f (append g$214$18936 g$214$18938)) '#f)) ((letrec ((g$214$18940 (lambda (g$214$18942) (if (g$214$15954 g$214$18942) ((lambda (g$214$18944) (if g$214$18944 (begin '#f ((lambda (g$214$18946) (if g$214$18946 (begin '#f (map cons g$214$18944 g$214$18946)) '#f)) (g$214$18940 (g$214$15964 g$214$18942)))) '#f)) ((lambda (g$214$18948) (list g$214$18948)) (g$214$15962 g$214$18942))) (if (g$214$15958 g$214$18942) (list (begin 'b* '())) '#f))))) g$214$18940) (g$214$15964 g$214$18934)))) '#f)) ((lambda (g$214$18950) (list g$214$18950)) (g$214$15962 g$214$18934)))) '#f)) (g$214$15964 g$214$18928)))) '#f)) ((letrec ((g$214$18952 (lambda (g$214$18958) (if (g$214$15954 g$214$18958) ((lambda (g$214$18960) (if g$214$18960 (begin '#f ((lambda (g$214$18962) (if g$214$18962 (begin '#f (cons (map cons g$214$18960 (car g$214$18962)) (cdr g$214$18962))) '#f)) (g$214$18952 (g$214$15964 g$214$18958)))) '#f)) ((lambda (g$214$18964) (list g$214$18964)) (g$214$15962 g$214$18958))) ((lambda (g$214$18966) (if g$214$18966 (begin '#f (cons (list (begin 'fmls '())) g$214$18966)) '#f)) ((lambda (g$214$18968) (list g$214$18968)) g$214$18958)))))) (lambda (g$214$18954) ((lambda (g$214$18956) (if g$214$18956 (begin '#f (append (car g$214$18956) (cdr g$214$18956))) '#f)) (g$214$18952 g$214$18954)))) (g$214$15962 g$214$18928)))) '#f)) (g$214$15964 g$214$18922)))) '#f)) ((lambda (g$214$18970) (list g$214$18970)) (g$214$15962 g$214$18922)))) '#f)) (g$214$15964 g$214$18916)))) '#f)) ((lambda (g$214$18972) '()) (g$214$15962 g$214$18916)))) '#f)) g$214$18892))) g$214$18872))) ((lambda (g$214$18974) (if (g$214$15954 g$214$18974) (begin '#f ((lambda (g$214$18976) (if g$214$18976 (begin '#f ((lambda (g$214$18978) (if g$214$18978 (begin '#f (append g$214$18976 g$214$18978)) '#f)) ((lambda (g$214$18980) (if (g$214$15954 g$214$18980) (begin '#f ((lambda (g$214$18982) (if g$214$18982 (begin '#f ((lambda (g$214$18984) (if g$214$18984 (begin '#f (append g$214$18982 g$214$18984)) '#f)) ((lambda (g$214$18986) (if (g$214$15954 g$214$18986) (begin '#f ((lambda (g$214$18988) (if g$214$18988 (begin '#f ((lambda (g$214$18990) (if g$214$18990 (begin '#f (append g$214$18988 g$214$18990)) '#f)) ((lambda (g$214$18992) (if (g$214$15954 g$214$18992) (begin '#f ((lambda (g$214$18994) (if g$214$18994 (begin '#f ((lambda (g$214$18996) (if g$214$18996 (begin '#f (append g$214$18994 g$214$18996)) '#f)) ((letrec ((g$214$18998 (lambda (g$214$19000) (if (g$214$15954 g$214$19000) ((lambda (g$214$19002) (if g$214$19002 (begin '#f ((lambda (g$214$19004) (if g$214$19004 (begin '#f (map cons g$214$19002 g$214$19004)) '#f)) (g$214$18998 (g$214$15964 g$214$19000)))) '#f)) ((lambda (g$214$19006) (list g$214$19006)) (g$214$15962 g$214$19000))) (if (g$214$15958 g$214$19000) (list (begin 'b* '())) '#f))))) g$214$18998) (g$214$15964 g$214$18992)))) '#f)) ((lambda (g$214$19008) (list g$214$19008)) (g$214$15962 g$214$18992)))) '#f)) (g$214$15964 g$214$18986)))) '#f)) ((letrec ((g$214$19010 (lambda (g$214$19012) (if (g$214$15954 g$214$19012) ((lambda (g$214$19014) (if g$214$19014 (begin '#f ((lambda (g$214$19016) (if g$214$19016 (begin '#f (map cons g$214$19014 g$214$19016)) '#f)) (g$214$19010 (g$214$15964 g$214$19012)))) '#f)) ((lambda (g$214$19018) (list g$214$19018)) (g$214$15962 g$214$19012))) (if (g$214$15958 g$214$19012) (list (begin 'fmls '())) '#f))))) g$214$19010) (g$214$15962 g$214$18986)))) '#f)) (g$214$15964 g$214$18980)))) '#f)) ((lambda (g$214$19020) (list g$214$19020)) (g$214$15962 g$214$18980)))) '#f)) (g$214$15964 g$214$18974)))) '#f)) ((lambda (g$214$19022) '()) (g$214$15962 g$214$18974)))) '#f)) g$214$18872))) g$214$18870))) (g$214$16506 (lambda (g$214$19024) ((lambda (g$214$19026) ((lambda (g$214$19028) (if (if g$214$19028 (begin '#f (apply (lambda (g$214$19030 g$214$19031 g$214$19032 g$214$19033) '#t) g$214$19028)) '#f) (apply (lambda (g$214$19038 g$214$19039 g$214$19040 g$214$19041) (if (g$214$15978 g$214$19039) (g$214$16492 (list 'define g$214$19038 (list 'make-traced-procedure (list 'quote g$214$19038) (cons 'lambda (cons g$214$19039 (cons g$214$19040 g$214$19041)))))) (g$214$16496 g$214$19024 g$214$19039))) g$214$19028) ((lambda (g$214$19046) ((lambda (g$214$19048) (if (if g$214$19048 (begin '#f (apply (lambda (g$214$19050 g$214$19051 g$214$19052 g$214$19053 g$214$19054) '#t) g$214$19048)) '#f) (apply (lambda (g$214$19060 g$214$19061 g$214$19062 g$214$19063 g$214$19064) (if (g$214$15978 (cons g$214$19062 g$214$19061)) (g$214$16492 (list 'define g$214$19060 (list 'make-traced-procedure (list 'quote g$214$19060) (cons 'lambda (cons (append g$214$19061 g$214$19062) (cons g$214$19063 g$214$19064)))))) (g$214$16496 g$214$19024 (append g$214$19061 g$214$19062)))) g$214$19048) ((lambda (g$214$19070) ((lambda (g$214$19072) (if (if g$214$19072 (begin '#f (apply (lambda (g$214$19074 g$214$19075) '#t) g$214$19072)) '#f) (apply (lambda (g$214$19078 g$214$19079) (if (g$214$15968 g$214$19078) (g$214$16492 (list 'define g$214$19078 (list 'let (list (list 'v g$214$19079)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g$214$19078) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (g$214$16703 '#f '"invalid name" g$214$19024))) g$214$19072) (g$214$16703 '#f '"invalid syntax" g$214$19070))) ((lambda (g$214$19082) (if (g$214$15954 g$214$19082) (begin '#f ((lambda (g$214$19084) (if g$214$19084 (begin '#f ((lambda (g$214$19086) (if g$214$19086 (begin '#f (append g$214$19084 g$214$19086)) '#f)) ((lambda (g$214$19088) (if (g$214$15954 g$214$19088) (begin '#f ((lambda (g$214$19090) (if g$214$19090 (begin '#f ((lambda (g$214$19092) (if g$214$19092 (begin '#f (append g$214$19090 g$214$19092)) '#f)) ((lambda (g$214$19094) (if (g$214$15954 g$214$19094) (begin '#f ((lambda (g$214$19096) (if g$214$19096 (begin '#f ((lambda (g$214$19098) (if g$214$19098 (begin '#f (append g$214$19096 g$214$19098)) '#f)) ((lambda (g$214$19100) (if (equal? (g$214$15990 g$214$19100) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$19094)))) '#f)) ((lambda (g$214$19102) (list g$214$19102)) (g$214$15962 g$214$19094)))) '#f)) (g$214$15964 g$214$19088)))) '#f)) ((lambda (g$214$19104) (list g$214$19104)) (g$214$15962 g$214$19088)))) '#f)) (g$214$15964 g$214$19082)))) '#f)) ((lambda (g$214$19106) '()) (g$214$15962 g$214$19082)))) '#f)) g$214$19070))) g$214$19046))) ((lambda (g$214$19108) (if (g$214$15954 g$214$19108) (begin '#f ((lambda (g$214$19110) (if g$214$19110 (begin '#f ((lambda (g$214$19112) (if g$214$19112 (begin '#f (append g$214$19110 g$214$19112)) '#f)) ((lambda (g$214$19114) (if (g$214$15954 g$214$19114) (begin '#f ((lambda (g$214$19116) (if g$214$19116 (begin '#f ((lambda (g$214$19118) (if g$214$19118 (begin '#f (append g$214$19116 g$214$19118)) '#f)) ((lambda (g$214$19120) (if (g$214$15954 g$214$19120) (begin '#f ((lambda (g$214$19122) (if g$214$19122 (begin '#f ((lambda (g$214$19124) (if g$214$19124 (begin '#f (append g$214$19122 g$214$19124)) '#f)) ((letrec ((g$214$19126 (lambda (g$214$19128) (if (g$214$15954 g$214$19128) ((lambda (g$214$19130) (if g$214$19130 (begin '#f ((lambda (g$214$19132) (if g$214$19132 (begin '#f (map cons g$214$19130 g$214$19132)) '#f)) (g$214$19126 (g$214$15964 g$214$19128)))) '#f)) ((lambda (g$214$19134) (list g$214$19134)) (g$214$15962 g$214$19128))) (if (g$214$15958 g$214$19128) (list (begin 'b* '())) '#f))))) g$214$19126) (g$214$15964 g$214$19120)))) '#f)) ((lambda (g$214$19136) (list g$214$19136)) (g$214$15962 g$214$19120)))) '#f)) (g$214$15964 g$214$19114)))) '#f)) ((lambda (g$214$19138) (if (g$214$15954 g$214$19138) (begin '#f ((lambda (g$214$19140) (if g$214$19140 (begin '#f ((lambda (g$214$19142) (if g$214$19142 (begin '#f (append g$214$19140 g$214$19142)) '#f)) ((letrec ((g$214$19144 (lambda (g$214$19150) (if (g$214$15954 g$214$19150) ((lambda (g$214$19152) (if g$214$19152 (begin '#f ((lambda (g$214$19154) (if g$214$19154 (begin '#f (cons (map cons g$214$19152 (car g$214$19154)) (cdr g$214$19154))) '#f)) (g$214$19144 (g$214$15964 g$214$19150)))) '#f)) ((lambda (g$214$19156) (list g$214$19156)) (g$214$15962 g$214$19150))) ((lambda (g$214$19158) (if g$214$19158 (begin '#f (cons (list (begin 'fmls '())) g$214$19158)) '#f)) ((lambda (g$214$19160) (list g$214$19160)) g$214$19150)))))) (lambda (g$214$19146) ((lambda (g$214$19148) (if g$214$19148 (begin '#f (append (car g$214$19148) (cdr g$214$19148))) '#f)) (g$214$19144 g$214$19146)))) (g$214$15964 g$214$19138)))) '#f)) ((lambda (g$214$19162) (list g$214$19162)) (g$214$15962 g$214$19138)))) '#f)) (g$214$15962 g$214$19114)))) '#f)) (g$214$15964 g$214$19108)))) '#f)) ((lambda (g$214$19164) '()) (g$214$15962 g$214$19108)))) '#f)) g$214$19046))) g$214$19026))) ((lambda (g$214$19166) (if (g$214$15954 g$214$19166) (begin '#f ((lambda (g$214$19168) (if g$214$19168 (begin '#f ((lambda (g$214$19170) (if g$214$19170 (begin '#f (append g$214$19168 g$214$19170)) '#f)) ((lambda (g$214$19172) (if (g$214$15954 g$214$19172) (begin '#f ((lambda (g$214$19174) (if g$214$19174 (begin '#f ((lambda (g$214$19176) (if g$214$19176 (begin '#f (append g$214$19174 g$214$19176)) '#f)) ((lambda (g$214$19178) (if (g$214$15954 g$214$19178) (begin '#f ((lambda (g$214$19180) (if g$214$19180 (begin '#f ((lambda (g$214$19182) (if g$214$19182 (begin '#f (append g$214$19180 g$214$19182)) '#f)) ((letrec ((g$214$19184 (lambda (g$214$19186) (if (g$214$15954 g$214$19186) ((lambda (g$214$19188) (if g$214$19188 (begin '#f ((lambda (g$214$19190) (if g$214$19190 (begin '#f (map cons g$214$19188 g$214$19190)) '#f)) (g$214$19184 (g$214$15964 g$214$19186)))) '#f)) ((lambda (g$214$19192) (list g$214$19192)) (g$214$15962 g$214$19186))) (if (g$214$15958 g$214$19186) (list (begin 'b* '())) '#f))))) g$214$19184) (g$214$15964 g$214$19178)))) '#f)) ((lambda (g$214$19194) (list g$214$19194)) (g$214$15962 g$214$19178)))) '#f)) (g$214$15964 g$214$19172)))) '#f)) ((lambda (g$214$19196) (if (g$214$15954 g$214$19196) (begin '#f ((lambda (g$214$19198) (if g$214$19198 (begin '#f ((lambda (g$214$19200) (if g$214$19200 (begin '#f (append g$214$19198 g$214$19200)) '#f)) ((letrec ((g$214$19202 (lambda (g$214$19204) (if (g$214$15954 g$214$19204) ((lambda (g$214$19206) (if g$214$19206 (begin '#f ((lambda (g$214$19208) (if g$214$19208 (begin '#f (map cons g$214$19206 g$214$19208)) '#f)) (g$214$19202 (g$214$15964 g$214$19204)))) '#f)) ((lambda (g$214$19210) (list g$214$19210)) (g$214$15962 g$214$19204))) (if (g$214$15958 g$214$19204) (list (begin 'fmls '())) '#f))))) g$214$19202) (g$214$15964 g$214$19196)))) '#f)) ((lambda (g$214$19212) (list g$214$19212)) (g$214$15962 g$214$19196)))) '#f)) (g$214$15962 g$214$19172)))) '#f)) (g$214$15964 g$214$19166)))) '#f)) ((lambda (g$214$19214) '()) (g$214$15962 g$214$19166)))) '#f)) g$214$19026))) g$214$19024))) (g$214$16508 (lambda (g$214$19216) ((lambda (g$214$19218) ((lambda (g$214$19220) (if (if g$214$19220 (begin '#f (apply (lambda (g$214$19222 g$214$19223) '#t) g$214$19220)) '#f) (apply (lambda (g$214$19226 g$214$19227) (if (g$214$15968 g$214$19226) (g$214$16492 (list 'define-syntax g$214$19226 (list 'let (list (list 'v g$214$19227)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g$214$19226) '(v syntax->datum))) '((assertion-violation 'trace-define-syntax "not a procedure" v)))))))) (g$214$16703 '#f '"invalid name" g$214$19216))) g$214$19220) (g$214$16703 '#f '"invalid syntax" g$214$19218))) ((lambda (g$214$19230) (if (g$214$15954 g$214$19230) (begin '#f ((lambda (g$214$19232) (if g$214$19232 (begin '#f ((lambda (g$214$19234) (if g$214$19234 (begin '#f (append g$214$19232 g$214$19234)) '#f)) ((lambda (g$214$19236) (if (g$214$15954 g$214$19236) (begin '#f ((lambda (g$214$19238) (if g$214$19238 (begin '#f ((lambda (g$214$19240) (if g$214$19240 (begin '#f (append g$214$19238 g$214$19240)) '#f)) ((lambda (g$214$19242) (if (g$214$15954 g$214$19242) (begin '#f ((lambda (g$214$19244) (if g$214$19244 (begin '#f ((lambda (g$214$19246) (if g$214$19246 (begin '#f (append g$214$19244 g$214$19246)) '#f)) ((lambda (g$214$19248) (if (equal? (g$214$15990 g$214$19248) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$19242)))) '#f)) ((lambda (g$214$19250) (list g$214$19250)) (g$214$15962 g$214$19242)))) '#f)) (g$214$15964 g$214$19236)))) '#f)) ((lambda (g$214$19252) (list g$214$19252)) (g$214$15962 g$214$19236)))) '#f)) (g$214$15964 g$214$19230)))) '#f)) ((lambda (g$214$19254) '()) (g$214$15962 g$214$19230)))) '#f)) g$214$19218))) g$214$19216))) (g$214$16510 (lambda (g$214$19256) (letrec ((g$214$19258 (lambda (g$214$19332 g$214$19333 g$214$19334) (letrec ((g$214$19338 (lambda (g$214$19450 g$214$19451) ((lambda (g$214$19454) ((lambda (g$214$19456) (if (if g$214$19456 (begin '#f (apply (lambda (g$214$19458 g$214$19459) '#t) g$214$19456)) '#f) (apply (lambda (g$214$19462 g$214$19463) ((lambda (g$214$19466) (list 'let (list (list g$214$19466 g$214$19462)) (list 'if g$214$19466 (list g$214$19463 g$214$19466) g$214$19451))) (gensym))) g$214$19456) ((lambda (g$214$19468) ((lambda (g$214$19470) (if (if g$214$19470 (begin '#f (apply (lambda (g$214$19472) '#t) g$214$19470)) '#f) (apply (lambda (g$214$19474) ((lambda (g$214$19476) (list 'let (list (list g$214$19476 g$214$19474)) (list 'if g$214$19476 g$214$19476 g$214$19451))) (gensym))) g$214$19470) ((lambda (g$214$19478) ((lambda (g$214$19480) (if (if g$214$19480 (begin '#f (apply (lambda (g$214$19482 g$214$19483 g$214$19484) '#t) g$214$19480)) '#f) (apply (lambda (g$214$19488 g$214$19489 g$214$19490) (list 'if g$214$19488 (cons 'begin (cons g$214$19489 g$214$19490)) g$214$19451)) g$214$19480) ((lambda (g$214$19494) ((lambda (g$214$19496) (if (if g$214$19496 (begin '#f (apply (lambda () '#t) g$214$19496)) '#f) (apply (lambda () (g$214$16703 '#f '"invalid guard clause" g$214$19450)) g$214$19496) (g$214$16703 '#f '"invalid syntax" g$214$19494))) ((lambda (g$214$19498) '()) g$214$19494))) g$214$19478))) ((lambda (g$214$19500) (if (g$214$15954 g$214$19500) (begin '#f ((lambda (g$214$19502) (if g$214$19502 (begin '#f ((lambda (g$214$19504) (if g$214$19504 (begin '#f (append g$214$19502 g$214$19504)) '#f)) ((lambda (g$214$19506) (if (g$214$15954 g$214$19506) (begin '#f ((lambda (g$214$19508) (if g$214$19508 (begin '#f ((lambda (g$214$19510) (if g$214$19510 (begin '#f (append g$214$19508 g$214$19510)) '#f)) ((letrec ((g$214$19512 (lambda (g$214$19514) (if (g$214$15954 g$214$19514) ((lambda (g$214$19516) (if g$214$19516 (begin '#f ((lambda (g$214$19518) (if g$214$19518 (begin '#f (map cons g$214$19516 g$214$19518)) '#f)) (g$214$19512 (g$214$15964 g$214$19514)))) '#f)) ((lambda (g$214$19520) (list g$214$19520)) (g$214$15962 g$214$19514))) (if (g$214$15958 g$214$19514) (list (begin 'v* '())) '#f))))) g$214$19512) (g$214$15964 g$214$19506)))) '#f)) ((lambda (g$214$19522) (list g$214$19522)) (g$214$15962 g$214$19506)))) '#f)) (g$214$15964 g$214$19500)))) '#f)) ((lambda (g$214$19524) (list g$214$19524)) (g$214$15962 g$214$19500)))) '#f)) g$214$19478))) g$214$19468))) ((lambda (g$214$19526) (if (g$214$15954 g$214$19526) (begin '#f ((lambda (g$214$19528) (if g$214$19528 (begin '#f ((lambda (g$214$19530) (if g$214$19530 (begin '#f (append g$214$19528 g$214$19530)) '#f)) ((lambda (g$214$19532) (if (equal? (g$214$15990 g$214$19532) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$19526)))) '#f)) ((lambda (g$214$19534) (list g$214$19534)) (g$214$15962 g$214$19526)))) '#f)) g$214$19468))) g$214$19454))) ((lambda (g$214$19536) (if (g$214$15954 g$214$19536) (begin '#f ((lambda (g$214$19538) (if g$214$19538 (begin '#f ((lambda (g$214$19540) (if g$214$19540 (begin '#f (append g$214$19538 g$214$19540)) '#f)) ((lambda (g$214$19542) (if (g$214$15954 g$214$19542) (begin '#f ((lambda (g$214$19544) (if g$214$19544 (begin '#f ((lambda (g$214$19546) (if g$214$19546 (begin '#f (append g$214$19544 g$214$19546)) '#f)) ((lambda (g$214$19548) (if (g$214$15954 g$214$19548) (begin '#f ((lambda (g$214$19550) (if g$214$19550 (begin '#f ((lambda (g$214$19552) (if g$214$19552 (begin '#f (append g$214$19550 g$214$19552)) '#f)) ((lambda (g$214$19554) (if (equal? (g$214$15990 g$214$19554) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$19548)))) '#f)) ((lambda (g$214$19556) (list g$214$19556)) (g$214$15962 g$214$19548)))) '#f)) (g$214$15964 g$214$19542)))) '#f)) ((lambda (g$214$19558) (if (g$214$15968 g$214$19558) (if (g$214$15976 g$214$19558 (g$214$16454 '=>)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$19542)))) '#f)) (g$214$15964 g$214$19536)))) '#f)) ((lambda (g$214$19560) (list g$214$19560)) (g$214$15962 g$214$19536)))) '#f)) g$214$19454))) g$214$19450))) (g$214$19340 (lambda (g$214$19352) ((lambda (g$214$19354) ((lambda (g$214$19356) (if (if g$214$19356 (begin '#f (apply (lambda () '#t) g$214$19356)) '#f) (apply (lambda () ((lambda (g$214$19358) (values (list g$214$19358 (list 'lambda '() (list 'raise g$214$19332))) g$214$19358)) (gensym))) g$214$19356) ((lambda (g$214$19360) ((lambda (g$214$19362) (if (if g$214$19362 (begin '#f (apply (lambda (g$214$19364 g$214$19365) '#t) g$214$19362)) '#f) (apply (lambda (g$214$19368 g$214$19369) (values (cons 'begin (cons g$214$19368 g$214$19369)) '#f)) g$214$19362) ((lambda (g$214$19372) ((lambda (g$214$19374) (if (if g$214$19374 (begin '#f (apply (lambda (g$214$19376 g$214$19377) '#t) g$214$19374)) '#f) (apply (lambda (g$214$19380 g$214$19381) (call-with-values (lambda () (g$214$19340 g$214$19381)) (lambda (g$214$19386 g$214$19387) ((lambda (g$214$19390 g$214$19391) (values (g$214$19338 g$214$19380 g$214$19391) g$214$19390)) g$214$19387 g$214$19386)))) g$214$19374) ((lambda (g$214$19394) ((lambda (g$214$19396) (if (if g$214$19396 (begin '#f (apply (lambda (g$214$19398) '#t) g$214$19396)) '#f) (apply (lambda (g$214$19400) (g$214$16703 '#f '"invalid guard clause" g$214$19400)) g$214$19396) (g$214$16703 '#f '"invalid syntax" g$214$19394))) ((lambda (g$214$19402) (list g$214$19402)) g$214$19394))) g$214$19372))) ((lambda (g$214$19404) (if (g$214$15954 g$214$19404) (begin '#f ((lambda (g$214$19406) (if g$214$19406 (begin '#f ((lambda (g$214$19408) (if g$214$19408 (begin '#f (append g$214$19406 g$214$19408)) '#f)) ((lambda (g$214$19410) (list g$214$19410)) (g$214$15964 g$214$19404)))) '#f)) ((lambda (g$214$19412) (list g$214$19412)) (g$214$15962 g$214$19404)))) '#f)) g$214$19372))) g$214$19360))) ((lambda (g$214$19414) (if (g$214$15954 g$214$19414) (begin '#f ((lambda (g$214$19416) (if g$214$19416 (begin '#f ((lambda (g$214$19418) (if g$214$19418 (begin '#f (append g$214$19416 g$214$19418)) '#f)) ((lambda (g$214$19420) (if (equal? (g$214$15990 g$214$19420) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$19414)))) '#f)) ((lambda (g$214$19422) (if (g$214$15954 g$214$19422) (begin '#f ((lambda (g$214$19424) (if g$214$19424 (begin '#f ((lambda (g$214$19426) (if g$214$19426 (begin '#f (append g$214$19424 g$214$19426)) '#f)) ((lambda (g$214$19428) (if (g$214$15954 g$214$19428) (begin '#f ((lambda (g$214$19430) (if g$214$19430 (begin '#f ((lambda (g$214$19432) (if g$214$19432 (begin '#f (append g$214$19430 g$214$19432)) '#f)) ((letrec ((g$214$19434 (lambda (g$214$19436) (if (g$214$15954 g$214$19436) ((lambda (g$214$19438) (if g$214$19438 (begin '#f ((lambda (g$214$19440) (if g$214$19440 (begin '#f (map cons g$214$19438 g$214$19440)) '#f)) (g$214$19434 (g$214$15964 g$214$19436)))) '#f)) ((lambda (g$214$19442) (list g$214$19442)) (g$214$15962 g$214$19436))) (if (g$214$15958 g$214$19436) (list (begin 'e* '())) '#f))))) g$214$19434) (g$214$15964 g$214$19428)))) '#f)) ((lambda (g$214$19444) (list g$214$19444)) (g$214$15962 g$214$19428)))) '#f)) (g$214$15964 g$214$19422)))) '#f)) ((lambda (g$214$19446) (if (g$214$15968 g$214$19446) (if (g$214$15976 g$214$19446 (g$214$16454 'else)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$19422)))) '#f)) (g$214$15962 g$214$19414)))) '#f)) g$214$19360))) g$214$19354))) ((lambda (g$214$19448) (if (equal? (g$214$15990 g$214$19448) '()) (begin '#f '()) '#f)) g$214$19354))) g$214$19352)))) (call-with-values (lambda () (g$214$19340 g$214$19334)) (lambda (g$214$19344 g$214$19345) ((lambda (g$214$19348 g$214$19349) (if g$214$19348 (list (list 'call/cc (list 'lambda (list g$214$19348) (list g$214$19333 (list 'lambda '() g$214$19349))))) (list g$214$19333 (list 'lambda '() g$214$19349)))) g$214$19345 g$214$19344))))))) ((lambda (g$214$19260) ((lambda (g$214$19262) (if (if g$214$19262 (begin '#f (apply (lambda (g$214$19264 g$214$19265 g$214$19266 g$214$19267) (g$214$15968 g$214$19264)) g$214$19262)) '#f) (apply (lambda (g$214$19272 g$214$19273 g$214$19274 g$214$19275) ((lambda (g$214$19280) (g$214$16492 (list (list 'call/cc (list 'lambda (list g$214$19280) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list g$214$19272) (g$214$19258 g$214$19272 g$214$19280 g$214$19273)) (cons 'lambda (cons '() (cons '#f (cons g$214$19274 g$214$19275))))))))))) (gensym))) g$214$19262) (g$214$16703 '#f '"invalid syntax" g$214$19260))) ((lambda (g$214$19282) (if (g$214$15954 g$214$19282) (begin '#f ((lambda (g$214$19284) (if g$214$19284 (begin '#f ((lambda (g$214$19286) (if g$214$19286 (begin '#f (append g$214$19284 g$214$19286)) '#f)) ((lambda (g$214$19288) (if (g$214$15954 g$214$19288) (begin '#f ((lambda (g$214$19290) (if g$214$19290 (begin '#f ((lambda (g$214$19292) (if g$214$19292 (begin '#f (append g$214$19290 g$214$19292)) '#f)) ((lambda (g$214$19294) (if (g$214$15954 g$214$19294) (begin '#f ((lambda (g$214$19296) (if g$214$19296 (begin '#f ((lambda (g$214$19298) (if g$214$19298 (begin '#f (append g$214$19296 g$214$19298)) '#f)) ((letrec ((g$214$19300 (lambda (g$214$19302) (if (g$214$15954 g$214$19302) ((lambda (g$214$19304) (if g$214$19304 (begin '#f ((lambda (g$214$19306) (if g$214$19306 (begin '#f (map cons g$214$19304 g$214$19306)) '#f)) (g$214$19300 (g$214$15964 g$214$19302)))) '#f)) ((lambda (g$214$19308) (list g$214$19308)) (g$214$15962 g$214$19302))) (if (g$214$15958 g$214$19302) (list (begin 'b* '())) '#f))))) g$214$19300) (g$214$15964 g$214$19294)))) '#f)) ((lambda (g$214$19310) (list g$214$19310)) (g$214$15962 g$214$19294)))) '#f)) (g$214$15964 g$214$19288)))) '#f)) ((lambda (g$214$19312) (if (g$214$15954 g$214$19312) (begin '#f ((lambda (g$214$19314) (if g$214$19314 (begin '#f ((lambda (g$214$19316) (if g$214$19316 (begin '#f (append g$214$19314 g$214$19316)) '#f)) ((letrec ((g$214$19318 (lambda (g$214$19320) (if (g$214$15954 g$214$19320) ((lambda (g$214$19322) (if g$214$19322 (begin '#f ((lambda (g$214$19324) (if g$214$19324 (begin '#f (map cons g$214$19322 g$214$19324)) '#f)) (g$214$19318 (g$214$15964 g$214$19320)))) '#f)) ((lambda (g$214$19326) (list g$214$19326)) (g$214$15962 g$214$19320))) (if (g$214$15958 g$214$19320) (list (begin 'clause* '())) '#f))))) g$214$19318) (g$214$15964 g$214$19312)))) '#f)) ((lambda (g$214$19328) (list g$214$19328)) (g$214$15962 g$214$19312)))) '#f)) (g$214$15962 g$214$19288)))) '#f)) (g$214$15964 g$214$19282)))) '#f)) ((lambda (g$214$19330) '()) (g$214$15962 g$214$19282)))) '#f)) g$214$19260))) g$214$19256)))) (g$214$16512 (lambda (g$214$19562) (letrec ((g$214$19564 (lambda (g$214$19628) ((lambda (g$214$19630) (if g$214$19630 g$214$19630 (begin '#f (if (not (memq (car g$214$19628) (cdr g$214$19628))) (begin '#f (g$214$19564 (cdr g$214$19628))) '#f)))) (null? g$214$19628))))) ((lambda (g$214$19566) ((lambda (g$214$19568) (if (if g$214$19568 (begin '#f (apply (lambda (g$214$19570 g$214$19571 g$214$19572) (if (g$214$15968 g$214$19570) (if (g$214$15968 g$214$19572) (begin '#f (for-all g$214$15968 g$214$19571)) '#f) '#f)) g$214$19568)) '#f) (apply (lambda (g$214$19576 g$214$19577 g$214$19578) ((lambda (g$214$19582 g$214$19583) (begin (if (g$214$19564 g$214$19582) (void) (g$214$16703 '#f '"duplicate names in enumeration set" g$214$19562)) (g$214$16492 (list 'begin (list 'define g$214$19583 (list 'enum-set-constructor (list 'make-enumeration (list 'quote g$214$19582)))) (list 'define-syntax g$214$19576 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote g$214$19582)) '(syntax 'n) (list 'syntax-error 'x '"not a member of set" (list 'quote g$214$19582))))))) (list 'define-syntax g$214$19578 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* |...|) (list 'begin (cons 'for-each (cons (list 'lambda '(n) '(unless (identifier? n) (syntax-error x "non-identifier argument")) (cons 'unless (cons (list 'memq '(syntax->datum n) (list 'quote g$214$19582)) '((syntax-error n "not a member of set"))))) '((syntax (n* |...|))))) (list 'syntax (cons g$214$19583 '('(n* |...|))))))))))))) (g$214$16709 g$214$19577) (gensym))) g$214$19568) (g$214$16703 '#f '"invalid syntax" g$214$19566))) ((lambda (g$214$19586) (if (g$214$15954 g$214$19586) (begin '#f ((lambda (g$214$19588) (if g$214$19588 (begin '#f ((lambda (g$214$19590) (if g$214$19590 (begin '#f (append g$214$19588 g$214$19590)) '#f)) ((lambda (g$214$19592) (if (g$214$15954 g$214$19592) (begin '#f ((lambda (g$214$19594) (if g$214$19594 (begin '#f ((lambda (g$214$19596) (if g$214$19596 (begin '#f (append g$214$19594 g$214$19596)) '#f)) ((lambda (g$214$19598) (if (g$214$15954 g$214$19598) (begin '#f ((lambda (g$214$19600) (if g$214$19600 (begin '#f ((lambda (g$214$19602) (if g$214$19602 (begin '#f (append g$214$19600 g$214$19602)) '#f)) ((lambda (g$214$19604) (if (g$214$15954 g$214$19604) (begin '#f ((lambda (g$214$19606) (if g$214$19606 (begin '#f ((lambda (g$214$19608) (if g$214$19608 (begin '#f (append g$214$19606 g$214$19608)) '#f)) ((lambda (g$214$19610) (if (equal? (g$214$15990 g$214$19610) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$19604)))) '#f)) ((lambda (g$214$19612) (list g$214$19612)) (g$214$15962 g$214$19604)))) '#f)) (g$214$15964 g$214$19598)))) '#f)) ((letrec ((g$214$19614 (lambda (g$214$19616) (if (g$214$15954 g$214$19616) ((lambda (g$214$19618) (if g$214$19618 (begin '#f ((lambda (g$214$19620) (if g$214$19620 (begin '#f (map cons g$214$19618 g$214$19620)) '#f)) (g$214$19614 (g$214$15964 g$214$19616)))) '#f)) ((lambda (g$214$19622) (list g$214$19622)) (g$214$15962 g$214$19616))) (if (g$214$15958 g$214$19616) (list (begin 'id* '())) '#f))))) g$214$19614) (g$214$15962 g$214$19598)))) '#f)) (g$214$15964 g$214$19592)))) '#f)) ((lambda (g$214$19624) (list g$214$19624)) (g$214$15962 g$214$19592)))) '#f)) (g$214$15964 g$214$19586)))) '#f)) ((lambda (g$214$19626) '()) (g$214$15962 g$214$19586)))) '#f)) g$214$19566))) g$214$19562)))) (g$214$16514 (lambda (g$214$19632) ((lambda (g$214$19634) ((lambda (g$214$19636) (if (if g$214$19636 (begin '#f (apply (lambda (g$214$19638) '#t) g$214$19636)) '#f) (apply (lambda (g$214$19640) (g$214$16492 (list 'time-it (list 'quote g$214$19640) (list 'lambda '() g$214$19640)))) g$214$19636) (g$214$16703 '#f '"invalid syntax" g$214$19634))) ((lambda (g$214$19642) (if (g$214$15954 g$214$19642) (begin '#f ((lambda (g$214$19644) (if g$214$19644 (begin '#f ((lambda (g$214$19646) (if g$214$19646 (begin '#f (append g$214$19644 g$214$19646)) '#f)) ((lambda (g$214$19648) (if (g$214$15954 g$214$19648) (begin '#f ((lambda (g$214$19650) (if g$214$19650 (begin '#f ((lambda (g$214$19652) (if g$214$19652 (begin '#f (append g$214$19650 g$214$19652)) '#f)) ((lambda (g$214$19654) (if (equal? (g$214$15990 g$214$19654) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$19648)))) '#f)) ((lambda (g$214$19656) (list g$214$19656)) (g$214$15962 g$214$19648)))) '#f)) (g$214$15964 g$214$19642)))) '#f)) ((lambda (g$214$19658) '()) (g$214$15962 g$214$19642)))) '#f)) g$214$19634))) g$214$19632))) (g$214$16516 (lambda (g$214$19660) ((lambda (g$214$19662) ((lambda (g$214$19664) (if (if g$214$19664 (begin '#f (apply (lambda (g$214$19666) '#t) g$214$19664)) '#f) (apply (lambda (g$214$19668) (g$214$16492 (list 'make-promise (list 'lambda '() g$214$19668)))) g$214$19664) (g$214$16703 '#f '"invalid syntax" g$214$19662))) ((lambda (g$214$19670) (if (g$214$15954 g$214$19670) (begin '#f ((lambda (g$214$19672) (if g$214$19672 (begin '#f ((lambda (g$214$19674) (if g$214$19674 (begin '#f (append g$214$19672 g$214$19674)) '#f)) ((lambda (g$214$19676) (if (g$214$15954 g$214$19676) (begin '#f ((lambda (g$214$19678) (if g$214$19678 (begin '#f ((lambda (g$214$19680) (if g$214$19680 (begin '#f (append g$214$19678 g$214$19680)) '#f)) ((lambda (g$214$19682) (if (equal? (g$214$15990 g$214$19682) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$19676)))) '#f)) ((lambda (g$214$19684) (list g$214$19684)) (g$214$15962 g$214$19676)))) '#f)) (g$214$15964 g$214$19670)))) '#f)) ((lambda (g$214$19686) '()) (g$214$15962 g$214$19670)))) '#f)) g$214$19662))) g$214$19660))) (g$214$16518 (lambda (g$214$19688) ((lambda (g$214$19690) ((lambda (g$214$19692) (if (if g$214$19692 (begin '#f (apply (lambda (g$214$19694) '#t) g$214$19692)) '#f) (apply (lambda (g$214$19696) (g$214$16492 (list 'unless g$214$19696 (list 'assertion-violation ''assert '"assertion failed" (list 'quote g$214$19696))))) g$214$19692) (g$214$16703 '#f '"invalid syntax" g$214$19690))) ((lambda (g$214$19698) (if (g$214$15954 g$214$19698) (begin '#f ((lambda (g$214$19700) (if g$214$19700 (begin '#f ((lambda (g$214$19702) (if g$214$19702 (begin '#f (append g$214$19700 g$214$19702)) '#f)) ((lambda (g$214$19704) (if (g$214$15954 g$214$19704) (begin '#f ((lambda (g$214$19706) (if g$214$19706 (begin '#f ((lambda (g$214$19708) (if g$214$19708 (begin '#f (append g$214$19706 g$214$19708)) '#f)) ((lambda (g$214$19710) (if (equal? (g$214$15990 g$214$19710) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$19704)))) '#f)) ((lambda (g$214$19712) (list g$214$19712)) (g$214$15962 g$214$19704)))) '#f)) (g$214$15964 g$214$19698)))) '#f)) ((lambda (g$214$19714) '()) (g$214$15962 g$214$19698)))) '#f)) g$214$19690))) g$214$19688))) (g$214$16520 (lambda (g$214$19716) ((lambda (g$214$19718) ((lambda (g$214$19720) (if (if g$214$19720 (begin '#f (apply (lambda (g$214$19722) '#t) g$214$19720)) '#f) (apply (lambda (g$214$19724) ((lambda (g$214$19726) (if (memv g$214$19726 '(little)) (g$214$16492 ''little) (if (memv g$214$19726 '(big)) (g$214$16492 ''big) (g$214$16703 '#f '"endianness must be big or little" g$214$19716)))) (g$214$16709 g$214$19724))) g$214$19720) (g$214$16703 '#f '"invalid syntax" g$214$19718))) ((lambda (g$214$19727) (if (g$214$15954 g$214$19727) (begin '#f ((lambda (g$214$19729) (if g$214$19729 (begin '#f ((lambda (g$214$19731) (if g$214$19731 (begin '#f (append g$214$19729 g$214$19731)) '#f)) ((lambda (g$214$19733) (if (g$214$15954 g$214$19733) (begin '#f ((lambda (g$214$19735) (if g$214$19735 (begin '#f ((lambda (g$214$19737) (if g$214$19737 (begin '#f (append g$214$19735 g$214$19737)) '#f)) ((lambda (g$214$19739) (if (equal? (g$214$15990 g$214$19739) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$19733)))) '#f)) ((lambda (g$214$19741) (list g$214$19741)) (g$214$15962 g$214$19733)))) '#f)) (g$214$15964 g$214$19727)))) '#f)) ((lambda (g$214$19743) '()) (g$214$15962 g$214$19727)))) '#f)) g$214$19718))) g$214$19716))) (g$214$16522 (lambda (g$214$19745) ((lambda (g$214$19747) ((lambda (g$214$19749) (if (if g$214$19749 (begin '#f (apply (lambda (g$214$19751) '#t) g$214$19749)) '#f) (apply (lambda (g$214$19753) (g$214$16492 (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax g$214$19753)) (list '(id e* |...|) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax g$214$19753) '((syntax (e* |...|)))))))))) g$214$19749) ((lambda (g$214$19755) ((lambda (g$214$19757) (if (if g$214$19757 (begin '#f (apply (lambda (g$214$19759 g$214$19760 g$214$19761 g$214$19762 g$214$19763) (if (g$214$15968 g$214$19759) (if (g$214$15968 g$214$19761) (begin '#f (g$214$15968 g$214$19762)) '#f) '#f)) g$214$19757)) '#f) (apply (lambda (g$214$19769 g$214$19770 g$214$19771 g$214$19772 g$214$19773) (g$214$16492 (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax g$214$19770)) (list (list 'set! 'id g$214$19772) (list 'syntax g$214$19773)) (list '(id e* |...|) '(identifier? (syntax id)) (list 'syntax (cons g$214$19770 '(e* |...|))))))))) g$214$19757) (g$214$16703 '#f '"invalid syntax" g$214$19755))) ((lambda (g$214$19779) (if (g$214$15954 g$214$19779) (begin '#f ((lambda (g$214$19781) (if g$214$19781 (begin '#f ((lambda (g$214$19783) (if g$214$19783 (begin '#f (append g$214$19781 g$214$19783)) '#f)) ((lambda (g$214$19785) (if (g$214$15954 g$214$19785) (begin '#f ((lambda (g$214$19787) (if g$214$19787 (begin '#f ((lambda (g$214$19789) (if g$214$19789 (begin '#f (append g$214$19787 g$214$19789)) '#f)) ((lambda (g$214$19791) (if (g$214$15954 g$214$19791) (begin '#f ((lambda (g$214$19793) (if g$214$19793 (begin '#f ((lambda (g$214$19795) (if g$214$19795 (begin '#f (append g$214$19793 g$214$19795)) '#f)) ((lambda (g$214$19797) (if (equal? (g$214$15990 g$214$19797) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$19791)))) '#f)) ((lambda (g$214$19799) (if (g$214$15954 g$214$19799) (begin '#f ((lambda (g$214$19801) (if g$214$19801 (begin '#f ((lambda (g$214$19803) (if g$214$19803 (begin '#f (append g$214$19801 g$214$19803)) '#f)) ((lambda (g$214$19805) (if (g$214$15954 g$214$19805) (begin '#f ((lambda (g$214$19807) (if g$214$19807 (begin '#f ((lambda (g$214$19809) (if g$214$19809 (begin '#f (append g$214$19807 g$214$19809)) '#f)) ((lambda (g$214$19811) (if (equal? (g$214$15990 g$214$19811) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$19805)))) '#f)) ((lambda (g$214$19813) (list g$214$19813)) (g$214$15962 g$214$19805)))) '#f)) (g$214$15964 g$214$19799)))) '#f)) ((lambda (g$214$19815) (if (g$214$15954 g$214$19815) (begin '#f ((lambda (g$214$19817) (if g$214$19817 (begin '#f ((lambda (g$214$19819) (if g$214$19819 (begin '#f (append g$214$19817 g$214$19819)) '#f)) ((lambda (g$214$19821) (if (g$214$15954 g$214$19821) (begin '#f ((lambda (g$214$19823) (if g$214$19823 (begin '#f ((lambda (g$214$19825) (if g$214$19825 (begin '#f (append g$214$19823 g$214$19825)) '#f)) ((lambda (g$214$19827) (if (g$214$15954 g$214$19827) (begin '#f ((lambda (g$214$19829) (if g$214$19829 (begin '#f ((lambda (g$214$19831) (if g$214$19831 (begin '#f (append g$214$19829 g$214$19831)) '#f)) ((lambda (g$214$19833) (if (equal? (g$214$15990 g$214$19833) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$19827)))) '#f)) ((lambda (g$214$19835) (list g$214$19835)) (g$214$15962 g$214$19827)))) '#f)) (g$214$15964 g$214$19821)))) '#f)) ((lambda (g$214$19837) (list g$214$19837)) (g$214$15962 g$214$19821)))) '#f)) (g$214$15964 g$214$19815)))) '#f)) ((lambda (g$214$19839) (if (g$214$15968 g$214$19839) (if (g$214$15976 g$214$19839 (g$214$16454 'set!)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$19815)))) '#f)) (g$214$15962 g$214$19799)))) '#f)) (g$214$15962 g$214$19791)))) '#f)) (g$214$15964 g$214$19785)))) '#f)) ((lambda (g$214$19841) (if (g$214$15954 g$214$19841) (begin '#f ((lambda (g$214$19843) (if g$214$19843 (begin '#f ((lambda (g$214$19845) (if g$214$19845 (begin '#f (append g$214$19843 g$214$19845)) '#f)) ((lambda (g$214$19847) (if (g$214$15954 g$214$19847) (begin '#f ((lambda (g$214$19849) (if g$214$19849 (begin '#f ((lambda (g$214$19851) (if g$214$19851 (begin '#f (append g$214$19849 g$214$19851)) '#f)) ((lambda (g$214$19853) (if (equal? (g$214$15990 g$214$19853) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$19847)))) '#f)) ((lambda (g$214$19855) (list g$214$19855)) (g$214$15962 g$214$19847)))) '#f)) (g$214$15964 g$214$19841)))) '#f)) ((lambda (g$214$19857) (list g$214$19857)) (g$214$15962 g$214$19841)))) '#f)) (g$214$15962 g$214$19785)))) '#f)) (g$214$15964 g$214$19779)))) '#f)) ((lambda (g$214$19859) '()) (g$214$15962 g$214$19779)))) '#f)) g$214$19755))) g$214$19747))) ((lambda (g$214$19861) (if (g$214$15954 g$214$19861) (begin '#f ((lambda (g$214$19863) (if g$214$19863 (begin '#f ((lambda (g$214$19865) (if g$214$19865 (begin '#f (append g$214$19863 g$214$19865)) '#f)) ((lambda (g$214$19867) (if (g$214$15954 g$214$19867) (begin '#f ((lambda (g$214$19869) (if g$214$19869 (begin '#f ((lambda (g$214$19871) (if g$214$19871 (begin '#f (append g$214$19869 g$214$19871)) '#f)) ((lambda (g$214$19873) (if (equal? (g$214$15990 g$214$19873) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$19867)))) '#f)) ((lambda (g$214$19875) (list g$214$19875)) (g$214$15962 g$214$19867)))) '#f)) (g$214$15964 g$214$19861)))) '#f)) ((lambda (g$214$19877) '()) (g$214$15962 g$214$19861)))) '#f)) g$214$19747))) g$214$19745))) (g$214$16524 (lambda (g$214$19879) (letrec ((g$214$19881 (lambda (g$214$20011) ((lambda (g$214$20013) ((lambda (g$214$20015) (if (if g$214$20015 (begin '#f (apply (lambda (g$214$20017 g$214$20018) '#t) g$214$20015)) '#f) (apply (lambda (g$214$20021 g$214$20022) (list g$214$20021 g$214$20022 g$214$20021)) g$214$20015) ((lambda (g$214$20025) ((lambda (g$214$20027) (if (if g$214$20027 (begin '#f (apply (lambda (g$214$20029 g$214$20030 g$214$20031) '#t) g$214$20027)) '#f) (apply (lambda (g$214$20035 g$214$20036 g$214$20037) (list g$214$20035 g$214$20036 g$214$20037)) g$214$20027) ((lambda (g$214$20041) ((lambda (g$214$20043) (if (if g$214$20043 (begin '#f (apply (lambda () '#t) g$214$20043)) '#f) (apply (lambda () (g$214$16703 '#f '"invalid binding" g$214$19879)) g$214$20043) (g$214$16703 '#f '"invalid syntax" g$214$20041))) ((lambda (g$214$20045) '()) g$214$20041))) g$214$20025))) ((lambda (g$214$20047) (if (g$214$15954 g$214$20047) (begin '#f ((lambda (g$214$20049) (if g$214$20049 (begin '#f ((lambda (g$214$20051) (if g$214$20051 (begin '#f (append g$214$20049 g$214$20051)) '#f)) ((lambda (g$214$20053) (if (g$214$15954 g$214$20053) (begin '#f ((lambda (g$214$20055) (if g$214$20055 (begin '#f ((lambda (g$214$20057) (if g$214$20057 (begin '#f (append g$214$20055 g$214$20057)) '#f)) ((lambda (g$214$20059) (if (g$214$15954 g$214$20059) (begin '#f ((lambda (g$214$20061) (if g$214$20061 (begin '#f ((lambda (g$214$20063) (if g$214$20063 (begin '#f (append g$214$20061 g$214$20063)) '#f)) ((lambda (g$214$20065) (if (equal? (g$214$15990 g$214$20065) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$20059)))) '#f)) ((lambda (g$214$20067) (list g$214$20067)) (g$214$15962 g$214$20059)))) '#f)) (g$214$15964 g$214$20053)))) '#f)) ((lambda (g$214$20069) (list g$214$20069)) (g$214$15962 g$214$20053)))) '#f)) (g$214$15964 g$214$20047)))) '#f)) ((lambda (g$214$20071) (list g$214$20071)) (g$214$15962 g$214$20047)))) '#f)) g$214$20025))) g$214$20013))) ((lambda (g$214$20073) (if (g$214$15954 g$214$20073) (begin '#f ((lambda (g$214$20075) (if g$214$20075 (begin '#f ((lambda (g$214$20077) (if g$214$20077 (begin '#f (append g$214$20075 g$214$20077)) '#f)) ((lambda (g$214$20079) (if (g$214$15954 g$214$20079) (begin '#f ((lambda (g$214$20081) (if g$214$20081 (begin '#f ((lambda (g$214$20083) (if g$214$20083 (begin '#f (append g$214$20081 g$214$20083)) '#f)) ((lambda (g$214$20085) (if (equal? (g$214$15990 g$214$20085) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$20079)))) '#f)) ((lambda (g$214$20087) (list g$214$20087)) (g$214$15962 g$214$20079)))) '#f)) (g$214$15964 g$214$20073)))) '#f)) ((lambda (g$214$20089) (list g$214$20089)) (g$214$15962 g$214$20073)))) '#f)) g$214$20013))) g$214$20011)))) ((lambda (g$214$19883) ((lambda (g$214$19885) (if (if g$214$19885 (begin '#f (apply (lambda (g$214$19887 g$214$19888 g$214$19889 g$214$19890) '#t) g$214$19885)) '#f) (apply (lambda (g$214$19895 g$214$19896 g$214$19897 g$214$19898) ((lambda (g$214$19903) ((lambda (g$214$19905) (if (if g$214$19905 (begin '#f (apply (lambda (g$214$19907 g$214$19908 g$214$19909) '#t) g$214$19905)) '#f) (apply (lambda (g$214$19913 g$214$19914 g$214$19915) (if (g$214$15978 g$214$19913) (g$214$16492 (list 'letrec (list (list 'loop (list 'lambda g$214$19913 (list 'if g$214$19896 (cons 'begin (cons '(if #f #f) g$214$19897)) (cons 'begin (append g$214$19898 (list (cons 'loop g$214$19915)))))))) (cons 'loop g$214$19914))) (g$214$16703 '#f '"invalid bindings" g$214$19879))) g$214$19905) (g$214$16703 '#f '"invalid syntax" g$214$19903))) ((letrec ((g$214$19919 (lambda (g$214$19921) (if (g$214$15954 g$214$19921) ((lambda (g$214$19923) (if g$214$19923 (begin '#f ((lambda (g$214$19925) (if g$214$19925 (begin '#f (map cons g$214$19923 g$214$19925)) '#f)) (g$214$19919 (g$214$15964 g$214$19921)))) '#f)) ((lambda (g$214$19927) (if (g$214$15954 g$214$19927) (begin '#f ((lambda (g$214$19929) (if g$214$19929 (begin '#f ((lambda (g$214$19931) (if g$214$19931 (begin '#f (append g$214$19929 g$214$19931)) '#f)) ((lambda (g$214$19933) (if (g$214$15954 g$214$19933) (begin '#f ((lambda (g$214$19935) (if g$214$19935 (begin '#f ((lambda (g$214$19937) (if g$214$19937 (begin '#f (append g$214$19935 g$214$19937)) '#f)) ((lambda (g$214$19939) (if (g$214$15954 g$214$19939) (begin '#f ((lambda (g$214$19941) (if g$214$19941 (begin '#f ((lambda (g$214$19943) (if g$214$19943 (begin '#f (append g$214$19941 g$214$19943)) '#f)) ((lambda (g$214$19945) (if (equal? (g$214$15990 g$214$19945) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$19939)))) '#f)) ((lambda (g$214$19947) (list g$214$19947)) (g$214$15962 g$214$19939)))) '#f)) (g$214$15964 g$214$19933)))) '#f)) ((lambda (g$214$19949) (list g$214$19949)) (g$214$15962 g$214$19933)))) '#f)) (g$214$15964 g$214$19927)))) '#f)) ((lambda (g$214$19951) (list g$214$19951)) (g$214$15962 g$214$19927)))) '#f)) (g$214$15962 g$214$19921))) (if (g$214$15958 g$214$19921) (list (begin 'x* '()) (begin 'init* '()) (begin 'step* '())) '#f))))) g$214$19919) g$214$19903))) (map g$214$19881 g$214$19895))) g$214$19885) (g$214$16703 '#f '"invalid syntax" g$214$19883))) ((lambda (g$214$19953) (if (g$214$15954 g$214$19953) (begin '#f ((lambda (g$214$19955) (if g$214$19955 (begin '#f ((lambda (g$214$19957) (if g$214$19957 (begin '#f (append g$214$19955 g$214$19957)) '#f)) ((lambda (g$214$19959) (if (g$214$15954 g$214$19959) (begin '#f ((lambda (g$214$19961) (if g$214$19961 (begin '#f ((lambda (g$214$19963) (if g$214$19963 (begin '#f (append g$214$19961 g$214$19963)) '#f)) ((lambda (g$214$19965) (if (g$214$15954 g$214$19965) (begin '#f ((lambda (g$214$19967) (if g$214$19967 (begin '#f ((lambda (g$214$19969) (if g$214$19969 (begin '#f (append g$214$19967 g$214$19969)) '#f)) ((letrec ((g$214$19971 (lambda (g$214$19973) (if (g$214$15954 g$214$19973) ((lambda (g$214$19975) (if g$214$19975 (begin '#f ((lambda (g$214$19977) (if g$214$19977 (begin '#f (map cons g$214$19975 g$214$19977)) '#f)) (g$214$19971 (g$214$15964 g$214$19973)))) '#f)) ((lambda (g$214$19979) (list g$214$19979)) (g$214$15962 g$214$19973))) (if (g$214$15958 g$214$19973) (list (begin 'command* '())) '#f))))) g$214$19971) (g$214$15964 g$214$19965)))) '#f)) ((lambda (g$214$19981) (if (g$214$15954 g$214$19981) (begin '#f ((lambda (g$214$19983) (if g$214$19983 (begin '#f ((lambda (g$214$19985) (if g$214$19985 (begin '#f (append g$214$19983 g$214$19985)) '#f)) ((letrec ((g$214$19987 (lambda (g$214$19989) (if (g$214$15954 g$214$19989) ((lambda (g$214$19991) (if g$214$19991 (begin '#f ((lambda (g$214$19993) (if g$214$19993 (begin '#f (map cons g$214$19991 g$214$19993)) '#f)) (g$214$19987 (g$214$15964 g$214$19989)))) '#f)) ((lambda (g$214$19995) (list g$214$19995)) (g$214$15962 g$214$19989))) (if (g$214$15958 g$214$19989) (list (begin 'expr* '())) '#f))))) g$214$19987) (g$214$15964 g$214$19981)))) '#f)) ((lambda (g$214$19997) (list g$214$19997)) (g$214$15962 g$214$19981)))) '#f)) (g$214$15962 g$214$19965)))) '#f)) (g$214$15964 g$214$19959)))) '#f)) ((letrec ((g$214$19999 (lambda (g$214$20001) (if (g$214$15954 g$214$20001) ((lambda (g$214$20003) (if g$214$20003 (begin '#f ((lambda (g$214$20005) (if g$214$20005 (begin '#f (map cons g$214$20003 g$214$20005)) '#f)) (g$214$19999 (g$214$15964 g$214$20001)))) '#f)) ((lambda (g$214$20007) (list g$214$20007)) (g$214$15962 g$214$20001))) (if (g$214$15958 g$214$20001) (list (begin 'binding* '())) '#f))))) g$214$19999) (g$214$15962 g$214$19959)))) '#f)) (g$214$15964 g$214$19953)))) '#f)) ((lambda (g$214$20009) '()) (g$214$15962 g$214$19953)))) '#f)) g$214$19883))) g$214$19879)))) (g$214$16526 (lambda (g$214$20091) ((lambda (g$214$20093) ((lambda (g$214$20095) (if (if g$214$20095 (begin '#f (apply (lambda (g$214$20097 g$214$20098 g$214$20099 g$214$20100) (for-all g$214$15968 g$214$20097)) g$214$20095)) '#f) (apply (lambda (g$214$20105 g$214$20106 g$214$20107 g$214$20108) (g$214$16492 ((letrec ((g$214$20113 (lambda (g$214$20115) (if (null? g$214$20115) (cons 'let (cons '() (cons g$214$20107 g$214$20108))) (list 'let (list (car g$214$20115)) (g$214$20113 (cdr g$214$20115))))))) g$214$20113) (map list g$214$20105 g$214$20106)))) g$214$20095) (g$214$16703 '#f '"invalid syntax" g$214$20093))) ((lambda (g$214$20117) (if (g$214$15954 g$214$20117) (begin '#f ((lambda (g$214$20119) (if g$214$20119 (begin '#f ((lambda (g$214$20121) (if g$214$20121 (begin '#f (append g$214$20119 g$214$20121)) '#f)) ((lambda (g$214$20123) (if (g$214$15954 g$214$20123) (begin '#f ((lambda (g$214$20125) (if g$214$20125 (begin '#f ((lambda (g$214$20127) (if g$214$20127 (begin '#f (append g$214$20125 g$214$20127)) '#f)) ((lambda (g$214$20129) (if (g$214$15954 g$214$20129) (begin '#f ((lambda (g$214$20131) (if g$214$20131 (begin '#f ((lambda (g$214$20133) (if g$214$20133 (begin '#f (append g$214$20131 g$214$20133)) '#f)) ((letrec ((g$214$20135 (lambda (g$214$20137) (if (g$214$15954 g$214$20137) ((lambda (g$214$20139) (if g$214$20139 (begin '#f ((lambda (g$214$20141) (if g$214$20141 (begin '#f (map cons g$214$20139 g$214$20141)) '#f)) (g$214$20135 (g$214$15964 g$214$20137)))) '#f)) ((lambda (g$214$20143) (list g$214$20143)) (g$214$15962 g$214$20137))) (if (g$214$15958 g$214$20137) (list (begin 'b* '())) '#f))))) g$214$20135) (g$214$15964 g$214$20129)))) '#f)) ((lambda (g$214$20145) (list g$214$20145)) (g$214$15962 g$214$20129)))) '#f)) (g$214$15964 g$214$20123)))) '#f)) ((letrec ((g$214$20147 (lambda (g$214$20149) (if (g$214$15954 g$214$20149) ((lambda (g$214$20151) (if g$214$20151 (begin '#f ((lambda (g$214$20153) (if g$214$20153 (begin '#f (map cons g$214$20151 g$214$20153)) '#f)) (g$214$20147 (g$214$15964 g$214$20149)))) '#f)) ((lambda (g$214$20155) (if (g$214$15954 g$214$20155) (begin '#f ((lambda (g$214$20157) (if g$214$20157 (begin '#f ((lambda (g$214$20159) (if g$214$20159 (begin '#f (append g$214$20157 g$214$20159)) '#f)) ((lambda (g$214$20161) (if (g$214$15954 g$214$20161) (begin '#f ((lambda (g$214$20163) (if g$214$20163 (begin '#f ((lambda (g$214$20165) (if g$214$20165 (begin '#f (append g$214$20163 g$214$20165)) '#f)) ((lambda (g$214$20167) (if (equal? (g$214$15990 g$214$20167) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$20161)))) '#f)) ((lambda (g$214$20169) (list g$214$20169)) (g$214$15962 g$214$20161)))) '#f)) (g$214$15964 g$214$20155)))) '#f)) ((lambda (g$214$20171) (list g$214$20171)) (g$214$15962 g$214$20155)))) '#f)) (g$214$15962 g$214$20149))) (if (g$214$15958 g$214$20149) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$214$20147) (g$214$15962 g$214$20123)))) '#f)) (g$214$15964 g$214$20117)))) '#f)) ((lambda (g$214$20173) '()) (g$214$15962 g$214$20117)))) '#f)) g$214$20093))) g$214$20091))) (g$214$16528 (lambda (g$214$20175) ((lambda (g$214$20177) ((lambda (g$214$20179) (if (if g$214$20179 (begin '#f (apply (lambda () '#t) g$214$20179)) '#f) (apply (lambda () '#f) g$214$20179) ((lambda (g$214$20181) ((lambda (g$214$20183) (if (if g$214$20183 (begin '#f (apply (lambda (g$214$20185 g$214$20186) '#t) g$214$20183)) '#f) (apply (lambda (g$214$20189 g$214$20190) (g$214$16492 ((letrec ((g$214$20193 (lambda (g$214$20195 g$214$20196) (if (null? g$214$20196) (list 'begin '#f g$214$20195) (list 'let (list (list 't g$214$20195)) (list 'if 't 't (g$214$20193 (car g$214$20196) (cdr g$214$20196)))))))) g$214$20193) g$214$20189 g$214$20190))) g$214$20183) (g$214$16703 '#f '"invalid syntax" g$214$20181))) ((lambda (g$214$20199) (if (g$214$15954 g$214$20199) (begin '#f ((lambda (g$214$20201) (if g$214$20201 (begin '#f ((lambda (g$214$20203) (if g$214$20203 (begin '#f (append g$214$20201 g$214$20203)) '#f)) ((lambda (g$214$20205) (if (g$214$15954 g$214$20205) (begin '#f ((lambda (g$214$20207) (if g$214$20207 (begin '#f ((lambda (g$214$20209) (if g$214$20209 (begin '#f (append g$214$20207 g$214$20209)) '#f)) ((letrec ((g$214$20211 (lambda (g$214$20213) (if (g$214$15954 g$214$20213) ((lambda (g$214$20215) (if g$214$20215 (begin '#f ((lambda (g$214$20217) (if g$214$20217 (begin '#f (map cons g$214$20215 g$214$20217)) '#f)) (g$214$20211 (g$214$15964 g$214$20213)))) '#f)) ((lambda (g$214$20219) (list g$214$20219)) (g$214$15962 g$214$20213))) (if (g$214$15958 g$214$20213) (list (begin 'e* '())) '#f))))) g$214$20211) (g$214$15964 g$214$20205)))) '#f)) ((lambda (g$214$20221) (list g$214$20221)) (g$214$15962 g$214$20205)))) '#f)) (g$214$15964 g$214$20199)))) '#f)) ((lambda (g$214$20223) '()) (g$214$15962 g$214$20199)))) '#f)) g$214$20181))) g$214$20177))) ((lambda (g$214$20225) (if (g$214$15954 g$214$20225) (begin '#f ((lambda (g$214$20227) (if g$214$20227 (begin '#f ((lambda (g$214$20229) (if g$214$20229 (begin '#f (append g$214$20227 g$214$20229)) '#f)) ((lambda (g$214$20231) (if (equal? (g$214$15990 g$214$20231) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$20225)))) '#f)) ((lambda (g$214$20233) '()) (g$214$15962 g$214$20225)))) '#f)) g$214$20177))) g$214$20175))) (g$214$16530 (lambda (g$214$20235) ((lambda (g$214$20237) ((lambda (g$214$20239) (if (if g$214$20239 (begin '#f (apply (lambda () '#t) g$214$20239)) '#f) (apply (lambda () '#t) g$214$20239) ((lambda (g$214$20241) ((lambda (g$214$20243) (if (if g$214$20243 (begin '#f (apply (lambda (g$214$20245 g$214$20246) '#t) g$214$20243)) '#f) (apply (lambda (g$214$20249 g$214$20250) (g$214$16492 ((letrec ((g$214$20253 (lambda (g$214$20255 g$214$20256) (if (null? g$214$20256) (list 'begin '#f g$214$20255) (cons 'if (cons g$214$20255 (cons (g$214$20253 (car g$214$20256) (cdr g$214$20256)) '(#f)))))))) g$214$20253) g$214$20249 g$214$20250))) g$214$20243) (g$214$16703 '#f '"invalid syntax" g$214$20241))) ((lambda (g$214$20259) (if (g$214$15954 g$214$20259) (begin '#f ((lambda (g$214$20261) (if g$214$20261 (begin '#f ((lambda (g$214$20263) (if g$214$20263 (begin '#f (append g$214$20261 g$214$20263)) '#f)) ((lambda (g$214$20265) (if (g$214$15954 g$214$20265) (begin '#f ((lambda (g$214$20267) (if g$214$20267 (begin '#f ((lambda (g$214$20269) (if g$214$20269 (begin '#f (append g$214$20267 g$214$20269)) '#f)) ((letrec ((g$214$20271 (lambda (g$214$20273) (if (g$214$15954 g$214$20273) ((lambda (g$214$20275) (if g$214$20275 (begin '#f ((lambda (g$214$20277) (if g$214$20277 (begin '#f (map cons g$214$20275 g$214$20277)) '#f)) (g$214$20271 (g$214$15964 g$214$20273)))) '#f)) ((lambda (g$214$20279) (list g$214$20279)) (g$214$15962 g$214$20273))) (if (g$214$15958 g$214$20273) (list (begin 'e* '())) '#f))))) g$214$20271) (g$214$15964 g$214$20265)))) '#f)) ((lambda (g$214$20281) (list g$214$20281)) (g$214$15962 g$214$20265)))) '#f)) (g$214$15964 g$214$20259)))) '#f)) ((lambda (g$214$20283) '()) (g$214$15962 g$214$20259)))) '#f)) g$214$20241))) g$214$20237))) ((lambda (g$214$20285) (if (g$214$15954 g$214$20285) (begin '#f ((lambda (g$214$20287) (if g$214$20287 (begin '#f ((lambda (g$214$20289) (if g$214$20289 (begin '#f (append g$214$20287 g$214$20289)) '#f)) ((lambda (g$214$20291) (if (equal? (g$214$15990 g$214$20291) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$20285)))) '#f)) ((lambda (g$214$20293) '()) (g$214$15962 g$214$20285)))) '#f)) g$214$20237))) g$214$20235))) (g$214$16532 (lambda (g$214$20295) ((lambda (g$214$20297) ((lambda (g$214$20299) (if (if g$214$20299 (begin '#f (apply (lambda (g$214$20301 g$214$20302) '#t) g$214$20299)) '#f) (apply (lambda (g$214$20305 g$214$20306) (g$214$16492 ((letrec ((g$214$20309 (lambda (g$214$20311 g$214$20312) (if (null? g$214$20312) ((lambda (g$214$20315) ((lambda (g$214$20317) (if (if g$214$20317 (begin '#f (apply (lambda (g$214$20319 g$214$20320) '#t) g$214$20317)) '#f) (apply (lambda (g$214$20323 g$214$20324) (cons 'begin (cons g$214$20323 g$214$20324))) g$214$20317) ((lambda (g$214$20327) ((lambda (g$214$20329) (if (if g$214$20329 (begin '#f (apply (lambda (g$214$20331 g$214$20332) '#t) g$214$20329)) '#f) (apply (lambda (g$214$20335 g$214$20336) (list 'let (list (list 't g$214$20335)) (list 'if 't (cons g$214$20336 '(t))))) g$214$20329) ((lambda (g$214$20339) ((lambda (g$214$20341) (if (if g$214$20341 (begin '#f (apply (lambda (g$214$20343) '#t) g$214$20341)) '#f) (apply (lambda (g$214$20345) (cons 'or (cons g$214$20345 '((if #f #f))))) g$214$20341) ((lambda (g$214$20347) ((lambda (g$214$20349) (if (if g$214$20349 (begin '#f (apply (lambda (g$214$20351 g$214$20352) '#t) g$214$20349)) '#f) (apply (lambda (g$214$20355 g$214$20356) (list 'if g$214$20355 (cons 'begin g$214$20356))) g$214$20349) ((lambda (g$214$20359) ((lambda (g$214$20361) (if (if g$214$20361 (begin '#f (apply (lambda () '#t) g$214$20361)) '#f) (apply (lambda () (g$214$16703 '#f '"invalid last clause" g$214$20295)) g$214$20361) (g$214$16703 '#f '"invalid syntax" g$214$20359))) ((lambda (g$214$20363) '()) g$214$20359))) g$214$20347))) ((lambda (g$214$20365) (if (g$214$15954 g$214$20365) (begin '#f ((lambda (g$214$20367) (if g$214$20367 (begin '#f ((lambda (g$214$20369) (if g$214$20369 (begin '#f (append g$214$20367 g$214$20369)) '#f)) ((letrec ((g$214$20371 (lambda (g$214$20373) (if (g$214$15954 g$214$20373) ((lambda (g$214$20375) (if g$214$20375 (begin '#f ((lambda (g$214$20377) (if g$214$20377 (begin '#f (map cons g$214$20375 g$214$20377)) '#f)) (g$214$20371 (g$214$15964 g$214$20373)))) '#f)) ((lambda (g$214$20379) (list g$214$20379)) (g$214$15962 g$214$20373))) (if (g$214$15958 g$214$20373) (list (begin 'e* '())) '#f))))) g$214$20371) (g$214$15964 g$214$20365)))) '#f)) ((lambda (g$214$20381) (list g$214$20381)) (g$214$15962 g$214$20365)))) '#f)) g$214$20347))) g$214$20339))) ((lambda (g$214$20383) (if (g$214$15954 g$214$20383) (begin '#f ((lambda (g$214$20385) (if g$214$20385 (begin '#f ((lambda (g$214$20387) (if g$214$20387 (begin '#f (append g$214$20385 g$214$20387)) '#f)) ((lambda (g$214$20389) (if (equal? (g$214$15990 g$214$20389) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$20383)))) '#f)) ((lambda (g$214$20391) (list g$214$20391)) (g$214$15962 g$214$20383)))) '#f)) g$214$20339))) g$214$20327))) ((lambda (g$214$20393) (if (g$214$15954 g$214$20393) (begin '#f ((lambda (g$214$20395) (if g$214$20395 (begin '#f ((lambda (g$214$20397) (if g$214$20397 (begin '#f (append g$214$20395 g$214$20397)) '#f)) ((lambda (g$214$20399) (if (g$214$15954 g$214$20399) (begin '#f ((lambda (g$214$20401) (if g$214$20401 (begin '#f ((lambda (g$214$20403) (if g$214$20403 (begin '#f (append g$214$20401 g$214$20403)) '#f)) ((lambda (g$214$20405) (if (g$214$15954 g$214$20405) (begin '#f ((lambda (g$214$20407) (if g$214$20407 (begin '#f ((lambda (g$214$20409) (if g$214$20409 (begin '#f (append g$214$20407 g$214$20409)) '#f)) ((lambda (g$214$20411) (if (equal? (g$214$15990 g$214$20411) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$20405)))) '#f)) ((lambda (g$214$20413) (list g$214$20413)) (g$214$15962 g$214$20405)))) '#f)) (g$214$15964 g$214$20399)))) '#f)) ((lambda (g$214$20415) (if (g$214$15968 g$214$20415) (if (g$214$15976 g$214$20415 (g$214$16454 '=>)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$20399)))) '#f)) (g$214$15964 g$214$20393)))) '#f)) ((lambda (g$214$20417) (list g$214$20417)) (g$214$15962 g$214$20393)))) '#f)) g$214$20327))) g$214$20315))) ((lambda (g$214$20419) (if (g$214$15954 g$214$20419) (begin '#f ((lambda (g$214$20421) (if g$214$20421 (begin '#f ((lambda (g$214$20423) (if g$214$20423 (begin '#f (append g$214$20421 g$214$20423)) '#f)) ((lambda (g$214$20425) (if (g$214$15954 g$214$20425) (begin '#f ((lambda (g$214$20427) (if g$214$20427 (begin '#f ((lambda (g$214$20429) (if g$214$20429 (begin '#f (append g$214$20427 g$214$20429)) '#f)) ((letrec ((g$214$20431 (lambda (g$214$20433) (if (g$214$15954 g$214$20433) ((lambda (g$214$20435) (if g$214$20435 (begin '#f ((lambda (g$214$20437) (if g$214$20437 (begin '#f (map cons g$214$20435 g$214$20437)) '#f)) (g$214$20431 (g$214$15964 g$214$20433)))) '#f)) ((lambda (g$214$20439) (list g$214$20439)) (g$214$15962 g$214$20433))) (if (g$214$15958 g$214$20433) (list (begin 'e* '())) '#f))))) g$214$20431) (g$214$15964 g$214$20425)))) '#f)) ((lambda (g$214$20441) (list g$214$20441)) (g$214$15962 g$214$20425)))) '#f)) (g$214$15964 g$214$20419)))) '#f)) ((lambda (g$214$20443) (if (g$214$15968 g$214$20443) (if (g$214$15976 g$214$20443 (g$214$16454 'else)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$20419)))) '#f)) g$214$20315))) g$214$20311) ((lambda (g$214$20445) ((lambda (g$214$20447) (if (if g$214$20447 (begin '#f (apply (lambda (g$214$20449 g$214$20450) '#t) g$214$20447)) '#f) (apply (lambda (g$214$20453 g$214$20454) (g$214$16703 '#f '"incorrect position of keyword else" g$214$20295)) g$214$20447) ((lambda (g$214$20457) ((lambda (g$214$20459) (if (if g$214$20459 (begin '#f (apply (lambda (g$214$20461 g$214$20462) '#t) g$214$20459)) '#f) (apply (lambda (g$214$20465 g$214$20466) (list 'let (list (list 't g$214$20465)) (list 'if 't (cons g$214$20466 '(t)) (g$214$20309 (car g$214$20312) (cdr g$214$20312))))) g$214$20459) ((lambda (g$214$20469) ((lambda (g$214$20471) (if (if g$214$20471 (begin '#f (apply (lambda (g$214$20473) '#t) g$214$20471)) '#f) (apply (lambda (g$214$20475) (list 'or g$214$20475 (g$214$20309 (car g$214$20312) (cdr g$214$20312)))) g$214$20471) ((lambda (g$214$20477) ((lambda (g$214$20479) (if (if g$214$20479 (begin '#f (apply (lambda (g$214$20481 g$214$20482) '#t) g$214$20479)) '#f) (apply (lambda (g$214$20485 g$214$20486) (list 'if g$214$20485 (cons 'begin g$214$20486) (g$214$20309 (car g$214$20312) (cdr g$214$20312)))) g$214$20479) ((lambda (g$214$20489) ((lambda (g$214$20491) (if (if g$214$20491 (begin '#f (apply (lambda () '#t) g$214$20491)) '#f) (apply (lambda () (g$214$16703 '#f '"invalid last clause" g$214$20295)) g$214$20491) (g$214$16703 '#f '"invalid syntax" g$214$20489))) ((lambda (g$214$20493) '()) g$214$20489))) g$214$20477))) ((lambda (g$214$20495) (if (g$214$15954 g$214$20495) (begin '#f ((lambda (g$214$20497) (if g$214$20497 (begin '#f ((lambda (g$214$20499) (if g$214$20499 (begin '#f (append g$214$20497 g$214$20499)) '#f)) ((letrec ((g$214$20501 (lambda (g$214$20503) (if (g$214$15954 g$214$20503) ((lambda (g$214$20505) (if g$214$20505 (begin '#f ((lambda (g$214$20507) (if g$214$20507 (begin '#f (map cons g$214$20505 g$214$20507)) '#f)) (g$214$20501 (g$214$15964 g$214$20503)))) '#f)) ((lambda (g$214$20509) (list g$214$20509)) (g$214$15962 g$214$20503))) (if (g$214$15958 g$214$20503) (list (begin 'e* '())) '#f))))) g$214$20501) (g$214$15964 g$214$20495)))) '#f)) ((lambda (g$214$20511) (list g$214$20511)) (g$214$15962 g$214$20495)))) '#f)) g$214$20477))) g$214$20469))) ((lambda (g$214$20513) (if (g$214$15954 g$214$20513) (begin '#f ((lambda (g$214$20515) (if g$214$20515 (begin '#f ((lambda (g$214$20517) (if g$214$20517 (begin '#f (append g$214$20515 g$214$20517)) '#f)) ((lambda (g$214$20519) (if (equal? (g$214$15990 g$214$20519) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$20513)))) '#f)) ((lambda (g$214$20521) (list g$214$20521)) (g$214$15962 g$214$20513)))) '#f)) g$214$20469))) g$214$20457))) ((lambda (g$214$20523) (if (g$214$15954 g$214$20523) (begin '#f ((lambda (g$214$20525) (if g$214$20525 (begin '#f ((lambda (g$214$20527) (if g$214$20527 (begin '#f (append g$214$20525 g$214$20527)) '#f)) ((lambda (g$214$20529) (if (g$214$15954 g$214$20529) (begin '#f ((lambda (g$214$20531) (if g$214$20531 (begin '#f ((lambda (g$214$20533) (if g$214$20533 (begin '#f (append g$214$20531 g$214$20533)) '#f)) ((lambda (g$214$20535) (if (g$214$15954 g$214$20535) (begin '#f ((lambda (g$214$20537) (if g$214$20537 (begin '#f ((lambda (g$214$20539) (if g$214$20539 (begin '#f (append g$214$20537 g$214$20539)) '#f)) ((lambda (g$214$20541) (if (equal? (g$214$15990 g$214$20541) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$20535)))) '#f)) ((lambda (g$214$20543) (list g$214$20543)) (g$214$15962 g$214$20535)))) '#f)) (g$214$15964 g$214$20529)))) '#f)) ((lambda (g$214$20545) (if (g$214$15968 g$214$20545) (if (g$214$15976 g$214$20545 (g$214$16454 '=>)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$20529)))) '#f)) (g$214$15964 g$214$20523)))) '#f)) ((lambda (g$214$20547) (list g$214$20547)) (g$214$15962 g$214$20523)))) '#f)) g$214$20457))) g$214$20445))) ((lambda (g$214$20549) (if (g$214$15954 g$214$20549) (begin '#f ((lambda (g$214$20551) (if g$214$20551 (begin '#f ((lambda (g$214$20553) (if g$214$20553 (begin '#f (append g$214$20551 g$214$20553)) '#f)) ((lambda (g$214$20555) (if (g$214$15954 g$214$20555) (begin '#f ((lambda (g$214$20557) (if g$214$20557 (begin '#f ((lambda (g$214$20559) (if g$214$20559 (begin '#f (append g$214$20557 g$214$20559)) '#f)) ((letrec ((g$214$20561 (lambda (g$214$20563) (if (g$214$15954 g$214$20563) ((lambda (g$214$20565) (if g$214$20565 (begin '#f ((lambda (g$214$20567) (if g$214$20567 (begin '#f (map cons g$214$20565 g$214$20567)) '#f)) (g$214$20561 (g$214$15964 g$214$20563)))) '#f)) ((lambda (g$214$20569) (list g$214$20569)) (g$214$15962 g$214$20563))) (if (g$214$15958 g$214$20563) (list (begin 'e* '())) '#f))))) g$214$20561) (g$214$15964 g$214$20555)))) '#f)) ((lambda (g$214$20571) (list g$214$20571)) (g$214$15962 g$214$20555)))) '#f)) (g$214$15964 g$214$20549)))) '#f)) ((lambda (g$214$20573) (if (g$214$15968 g$214$20573) (if (g$214$15976 g$214$20573 (g$214$16454 'else)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$20549)))) '#f)) g$214$20445))) g$214$20311))))) g$214$20309) g$214$20305 g$214$20306))) g$214$20299) (g$214$16703 '#f '"invalid syntax" g$214$20297))) ((lambda (g$214$20575) (if (g$214$15954 g$214$20575) (begin '#f ((lambda (g$214$20577) (if g$214$20577 (begin '#f ((lambda (g$214$20579) (if g$214$20579 (begin '#f (append g$214$20577 g$214$20579)) '#f)) ((lambda (g$214$20581) (if (g$214$15954 g$214$20581) (begin '#f ((lambda (g$214$20583) (if g$214$20583 (begin '#f ((lambda (g$214$20585) (if g$214$20585 (begin '#f (append g$214$20583 g$214$20585)) '#f)) ((letrec ((g$214$20587 (lambda (g$214$20589) (if (g$214$15954 g$214$20589) ((lambda (g$214$20591) (if g$214$20591 (begin '#f ((lambda (g$214$20593) (if g$214$20593 (begin '#f (map cons g$214$20591 g$214$20593)) '#f)) (g$214$20587 (g$214$15964 g$214$20589)))) '#f)) ((lambda (g$214$20595) (list g$214$20595)) (g$214$15962 g$214$20589))) (if (g$214$15958 g$214$20589) (list (begin 'cls* '())) '#f))))) g$214$20587) (g$214$15964 g$214$20581)))) '#f)) ((lambda (g$214$20597) (list g$214$20597)) (g$214$15962 g$214$20581)))) '#f)) (g$214$15964 g$214$20575)))) '#f)) ((lambda (g$214$20599) '()) (g$214$15962 g$214$20575)))) '#f)) g$214$20297))) g$214$20295))) (g$214$16534 (lambda (g$214$20601 g$214$20602 g$214$20603) ((lambda (g$214$20607) (begin (if (if (string? g$214$20607) (begin '#f (g$214$15968 g$214$20602)) '#f) (void) (g$214$16703 '#f '"invalid syntax" g$214$20601)) (cons (g$214$16492 'begin) (with-input-from-file g$214$20607 (lambda () ((letrec ((g$214$20609 (lambda (g$214$20611) ((lambda (g$214$20613) (if (eof-object? g$214$20613) (reverse g$214$20611) (g$214$20609 (cons (g$214$15934 g$214$20602 g$214$20613) g$214$20611)))) (read))))) g$214$20609) '())))))) (g$214$15990 g$214$20603)))) (g$214$16536 (lambda (g$214$20615) ((lambda (g$214$20617) ((lambda (g$214$20619) (if (if g$214$20619 (begin '#f (apply (lambda (g$214$20621 g$214$20622) '#t) g$214$20619)) '#f) (apply (lambda (g$214$20625 g$214$20626) (g$214$16534 g$214$20615 g$214$20625 g$214$20626)) g$214$20619) (g$214$16703 '#f '"invalid syntax" g$214$20617))) ((lambda (g$214$20629) (if (g$214$15954 g$214$20629) (begin '#f ((lambda (g$214$20631) (if g$214$20631 (begin '#f ((lambda (g$214$20633) (if g$214$20633 (begin '#f (append g$214$20631 g$214$20633)) '#f)) ((lambda (g$214$20635) (if (g$214$15954 g$214$20635) (begin '#f ((lambda (g$214$20637) (if g$214$20637 (begin '#f ((lambda (g$214$20639) (if g$214$20639 (begin '#f (append g$214$20637 g$214$20639)) '#f)) ((lambda (g$214$20641) (if (equal? (g$214$15990 g$214$20641) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$20635)))) '#f)) ((lambda (g$214$20643) (list g$214$20643)) (g$214$15962 g$214$20635)))) '#f)) (g$214$15964 g$214$20629)))) '#f)) ((lambda (g$214$20645) (list g$214$20645)) (g$214$15962 g$214$20629)))) '#f)) g$214$20617))) g$214$20615))) (g$214$16538 (lambda (g$214$20647) ((lambda (g$214$20649) ((lambda (g$214$20651) (if (if g$214$20651 (begin '#f (apply (lambda (g$214$20653 g$214$20654) '#t) g$214$20651)) '#f) (apply (lambda (g$214$20657 g$214$20658) (g$214$16534 g$214$20647 g$214$20657 g$214$20658)) g$214$20651) (g$214$16703 '#f '"invalid syntax" g$214$20649))) ((lambda (g$214$20661) (if (g$214$15954 g$214$20661) (begin '#f ((lambda (g$214$20663) (if g$214$20663 (begin '#f ((lambda (g$214$20665) (if g$214$20665 (begin '#f (append g$214$20663 g$214$20665)) '#f)) ((lambda (g$214$20667) (if (g$214$15954 g$214$20667) (begin '#f ((lambda (g$214$20669) (if g$214$20669 (begin '#f ((lambda (g$214$20671) (if g$214$20671 (begin '#f (append g$214$20669 g$214$20671)) '#f)) ((lambda (g$214$20673) (if (g$214$15954 g$214$20673) (begin '#f ((lambda (g$214$20675) (if g$214$20675 (begin '#f ((lambda (g$214$20677) (if g$214$20677 (begin '#f (append g$214$20675 g$214$20677)) '#f)) ((lambda (g$214$20679) (if (equal? (g$214$15990 g$214$20679) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$20673)))) '#f)) ((lambda (g$214$20681) (list g$214$20681)) (g$214$15962 g$214$20673)))) '#f)) (g$214$15964 g$214$20667)))) '#f)) ((lambda (g$214$20683) (list g$214$20683)) (g$214$15962 g$214$20667)))) '#f)) (g$214$15964 g$214$20661)))) '#f)) ((lambda (g$214$20685) '()) (g$214$15962 g$214$20661)))) '#f)) g$214$20649))) g$214$20647))) (g$214$16540 (lambda (g$214$20687) ((lambda (g$214$20689) ((lambda (g$214$20691) (if (if g$214$20691 (begin '#f (apply (lambda (g$214$20693 g$214$20694 g$214$20695) '#t) g$214$20691)) '#f) (apply (lambda (g$214$20699 g$214$20700 g$214$20701) (begin (if (for-all (lambda (g$214$20705) (if (g$214$15968 g$214$20705) (if (not (g$214$15976 g$214$20705 (g$214$16454 '|...|))) (begin '#f (not (g$214$15976 g$214$20705 (g$214$16454 '_)))) '#f) '#f)) g$214$20699) (void) (g$214$16703 '#f '"invalid literals" g$214$20687)) (g$214$16492 (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons g$214$20699 (map (lambda (g$214$20707 g$214$20708) ((lambda (g$214$20711) ((lambda (g$214$20713) (if (if g$214$20713 (begin '#f (apply (lambda (g$214$20715) '#t) g$214$20713)) '#f) (apply (lambda (g$214$20717) (list (cons 'g g$214$20717) (list 'syntax g$214$20708))) g$214$20713) ((lambda (g$214$20719) ((lambda (g$214$20721) (if (if g$214$20721 (begin '#f (apply (lambda () '#t) g$214$20721)) '#f) (apply (lambda () (g$214$16703 '#f '"invalid syntax-rules pattern" g$214$20687 g$214$20707)) g$214$20721) (g$214$16703 '#f '"invalid syntax" g$214$20719))) ((lambda (g$214$20723) '()) g$214$20719))) g$214$20711))) ((lambda (g$214$20725) (if (g$214$15954 g$214$20725) (begin '#f ((lambda (g$214$20727) (if g$214$20727 (begin '#f ((lambda (g$214$20729) (if g$214$20729 (begin '#f (append g$214$20727 g$214$20729)) '#f)) ((lambda (g$214$20731) (list g$214$20731)) (g$214$15964 g$214$20725)))) '#f)) ((lambda (g$214$20733) '()) (g$214$15962 g$214$20725)))) '#f)) g$214$20711))) g$214$20707)) g$214$20700 g$214$20701)))))))) g$214$20691) (g$214$16703 '#f '"invalid syntax" g$214$20689))) ((lambda (g$214$20735) (if (g$214$15954 g$214$20735) (begin '#f ((lambda (g$214$20737) (if g$214$20737 (begin '#f ((lambda (g$214$20739) (if g$214$20739 (begin '#f (append g$214$20737 g$214$20739)) '#f)) ((lambda (g$214$20741) (if (g$214$15954 g$214$20741) (begin '#f ((lambda (g$214$20743) (if g$214$20743 (begin '#f ((lambda (g$214$20745) (if g$214$20745 (begin '#f (append g$214$20743 g$214$20745)) '#f)) ((letrec ((g$214$20747 (lambda (g$214$20749) (if (g$214$15954 g$214$20749) ((lambda (g$214$20751) (if g$214$20751 (begin '#f ((lambda (g$214$20753) (if g$214$20753 (begin '#f (map cons g$214$20751 g$214$20753)) '#f)) (g$214$20747 (g$214$15964 g$214$20749)))) '#f)) ((lambda (g$214$20755) (if (g$214$15954 g$214$20755) (begin '#f ((lambda (g$214$20757) (if g$214$20757 (begin '#f ((lambda (g$214$20759) (if g$214$20759 (begin '#f (append g$214$20757 g$214$20759)) '#f)) ((lambda (g$214$20761) (if (g$214$15954 g$214$20761) (begin '#f ((lambda (g$214$20763) (if g$214$20763 (begin '#f ((lambda (g$214$20765) (if g$214$20765 (begin '#f (append g$214$20763 g$214$20765)) '#f)) ((lambda (g$214$20767) (if (equal? (g$214$15990 g$214$20767) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$20761)))) '#f)) ((lambda (g$214$20769) (list g$214$20769)) (g$214$15962 g$214$20761)))) '#f)) (g$214$15964 g$214$20755)))) '#f)) ((lambda (g$214$20771) (list g$214$20771)) (g$214$15962 g$214$20755)))) '#f)) (g$214$15962 g$214$20749))) (if (g$214$15958 g$214$20749) (list (begin 'pat* '()) (begin 'tmp* '())) '#f))))) g$214$20747) (g$214$15964 g$214$20741)))) '#f)) ((letrec ((g$214$20773 (lambda (g$214$20775) (if (g$214$15954 g$214$20775) ((lambda (g$214$20777) (if g$214$20777 (begin '#f ((lambda (g$214$20779) (if g$214$20779 (begin '#f (map cons g$214$20777 g$214$20779)) '#f)) (g$214$20773 (g$214$15964 g$214$20775)))) '#f)) ((lambda (g$214$20781) (list g$214$20781)) (g$214$15962 g$214$20775))) (if (g$214$15958 g$214$20775) (list (begin 'lits '())) '#f))))) g$214$20773) (g$214$15962 g$214$20741)))) '#f)) (g$214$15964 g$214$20735)))) '#f)) ((lambda (g$214$20783) '()) (g$214$15962 g$214$20735)))) '#f)) g$214$20689))) g$214$20687))) (g$214$16542 ((lambda () (letrec ((g$214$20824 (lambda (g$214$21474 g$214$21475) ((letrec ((g$214$21478 (lambda (g$214$21480) (if (null? g$214$21480) g$214$21475 (g$214$20826 (car g$214$21480) (g$214$21478 (cdr g$214$21480))))))) g$214$21478) g$214$21474))) (g$214$20826 (lambda (g$214$21368 g$214$21369) ((lambda (g$214$21372) ((lambda (g$214$21374) (if (if g$214$21374 (begin '#f (apply (lambda (g$214$21376) '#t) g$214$21374)) '#f) (apply (lambda (g$214$21378) ((lambda (g$214$21380) ((lambda (g$214$21382) (if (if g$214$21382 (begin '#f (apply (lambda (g$214$21384) '#t) g$214$21382)) '#f) (apply (lambda (g$214$21386) (list (g$214$16454 'quote) (cons g$214$21386 g$214$21378))) g$214$21382) ((lambda (g$214$21388) ((lambda (g$214$21390) (if (if g$214$21390 (begin '#f (apply (lambda () '#t) g$214$21390)) '#f) (apply (lambda () ((lambda (g$214$21392) ((lambda (g$214$21394) (if (if g$214$21394 (begin '#f (apply (lambda () '#t) g$214$21394)) '#f) (apply (lambda () (list (g$214$16454 'list) g$214$21368)) g$214$21394) ((lambda (g$214$21396) ((lambda (g$214$21398) (if (if g$214$21398 (begin '#f (apply (lambda () '#t) g$214$21398)) '#f) (apply (lambda () (list (g$214$16454 'cons) g$214$21368 g$214$21369)) g$214$21398) (g$214$16703 '#f '"invalid syntax" g$214$21396))) ((lambda (g$214$21400) '()) g$214$21396))) g$214$21392))) ((lambda (g$214$21402) (if (equal? (g$214$15990 g$214$21402) '()) (begin '#f '()) '#f)) g$214$21392))) g$214$21378)) g$214$21390) (g$214$16703 '#f '"invalid syntax" g$214$21388))) ((lambda (g$214$21404) '()) g$214$21388))) g$214$21380))) ((lambda (g$214$21406) (if (g$214$15954 g$214$21406) (begin '#f ((lambda (g$214$21408) (if g$214$21408 (begin '#f ((lambda (g$214$21410) (if g$214$21410 (begin '#f (append g$214$21408 g$214$21410)) '#f)) ((lambda (g$214$21412) (if (g$214$15954 g$214$21412) (begin '#f ((lambda (g$214$21414) (if g$214$21414 (begin '#f ((lambda (g$214$21416) (if g$214$21416 (begin '#f (append g$214$21414 g$214$21416)) '#f)) ((lambda (g$214$21418) (if (equal? (g$214$15990 g$214$21418) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$21412)))) '#f)) ((lambda (g$214$21420) (list g$214$21420)) (g$214$15962 g$214$21412)))) '#f)) (g$214$15964 g$214$21406)))) '#f)) ((lambda (g$214$21422) (if (g$214$15968 g$214$21422) (if (g$214$15976 g$214$21422 (g$214$16454 'quote)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$21406)))) '#f)) g$214$21380))) g$214$21368)) g$214$21374) ((lambda (g$214$21424) ((lambda (g$214$21426) (if (if g$214$21426 (begin '#f (apply (lambda (g$214$21428) '#t) g$214$21426)) '#f) (apply (lambda (g$214$21430) (cons* (g$214$16454 'list) g$214$21368 g$214$21430)) g$214$21426) ((lambda (g$214$21432) ((lambda (g$214$21434) (if (if g$214$21434 (begin '#f (apply (lambda () '#t) g$214$21434)) '#f) (apply (lambda () (list (g$214$16454 'cons) g$214$21368 g$214$21369)) g$214$21434) (g$214$16703 '#f '"invalid syntax" g$214$21432))) ((lambda (g$214$21436) '()) g$214$21432))) g$214$21424))) ((lambda (g$214$21438) (if (g$214$15954 g$214$21438) (begin '#f ((lambda (g$214$21440) (if g$214$21440 (begin '#f ((lambda (g$214$21442) (if g$214$21442 (begin '#f (append g$214$21440 g$214$21442)) '#f)) ((letrec ((g$214$21444 (lambda (g$214$21446) (if (g$214$15954 g$214$21446) ((lambda (g$214$21448) (if g$214$21448 (begin '#f ((lambda (g$214$21450) (if g$214$21450 (begin '#f (map cons g$214$21448 g$214$21450)) '#f)) (g$214$21444 (g$214$15964 g$214$21446)))) '#f)) ((lambda (g$214$21452) (list g$214$21452)) (g$214$15962 g$214$21446))) (if (g$214$15958 g$214$21446) (list (begin 'stuff '())) '#f))))) g$214$21444) (g$214$15964 g$214$21438)))) '#f)) ((lambda (g$214$21454) (if (g$214$15968 g$214$21454) (if (g$214$15976 g$214$21454 (g$214$16454 'list)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$21438)))) '#f)) g$214$21424))) g$214$21372))) ((lambda (g$214$21456) (if (g$214$15954 g$214$21456) (begin '#f ((lambda (g$214$21458) (if g$214$21458 (begin '#f ((lambda (g$214$21460) (if g$214$21460 (begin '#f (append g$214$21458 g$214$21460)) '#f)) ((lambda (g$214$21462) (if (g$214$15954 g$214$21462) (begin '#f ((lambda (g$214$21464) (if g$214$21464 (begin '#f ((lambda (g$214$21466) (if g$214$21466 (begin '#f (append g$214$21464 g$214$21466)) '#f)) ((lambda (g$214$21468) (if (equal? (g$214$15990 g$214$21468) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$21462)))) '#f)) ((lambda (g$214$21470) (list g$214$21470)) (g$214$15962 g$214$21462)))) '#f)) (g$214$15964 g$214$21456)))) '#f)) ((lambda (g$214$21472) (if (g$214$15968 g$214$21472) (if (g$214$15976 g$214$21472 (g$214$16454 'quote)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$21456)))) '#f)) g$214$21372))) g$214$21369))) (g$214$20828 (lambda (g$214$21302 g$214$21303) ((lambda (g$214$21306) (if (null? g$214$21306) (list (g$214$16454 'quote) '()) (if (null? (cdr g$214$21306)) (car g$214$21306) (cons* (g$214$16454 'append) g$214$21306)))) ((letrec ((g$214$21308 (lambda (g$214$21310) (if (null? g$214$21310) ((lambda (g$214$21312) ((lambda (g$214$21314) (if (if g$214$21314 (begin '#f (apply (lambda () '#t) g$214$21314)) '#f) (apply (lambda () '()) g$214$21314) ((lambda (g$214$21316) ((lambda (g$214$21318) (if (if g$214$21318 (begin '#f (apply (lambda () '#t) g$214$21318)) '#f) (apply (lambda () (list g$214$21303)) g$214$21318) (g$214$16703 '#f '"invalid syntax" g$214$21316))) ((lambda (g$214$21320) '()) g$214$21316))) g$214$21312))) ((lambda (g$214$21322) (if (g$214$15954 g$214$21322) (begin '#f ((lambda (g$214$21324) (if g$214$21324 (begin '#f ((lambda (g$214$21326) (if g$214$21326 (begin '#f (append g$214$21324 g$214$21326)) '#f)) ((lambda (g$214$21328) (if (g$214$15954 g$214$21328) (begin '#f ((lambda (g$214$21330) (if g$214$21330 (begin '#f ((lambda (g$214$21332) (if g$214$21332 (begin '#f (append g$214$21330 g$214$21332)) '#f)) ((lambda (g$214$21334) (if (equal? (g$214$15990 g$214$21334) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$21328)))) '#f)) ((lambda (g$214$21336) (if (equal? (g$214$15990 g$214$21336) '()) (begin '#f '()) '#f)) (g$214$15962 g$214$21328)))) '#f)) (g$214$15964 g$214$21322)))) '#f)) ((lambda (g$214$21338) (if (g$214$15968 g$214$21338) (if (g$214$15976 g$214$21338 (g$214$16454 'quote)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$21322)))) '#f)) g$214$21312))) g$214$21303) ((lambda (g$214$21340) ((lambda (g$214$21342) (if (if g$214$21342 (begin '#f (apply (lambda () '#t) g$214$21342)) '#f) (apply (lambda () (g$214$21308 (cdr g$214$21310))) g$214$21342) ((lambda (g$214$21344) ((lambda (g$214$21346) (if (if g$214$21346 (begin '#f (apply (lambda () '#t) g$214$21346)) '#f) (apply (lambda () (cons (car g$214$21310) (g$214$21308 (cdr g$214$21310)))) g$214$21346) (g$214$16703 '#f '"invalid syntax" g$214$21344))) ((lambda (g$214$21348) '()) g$214$21344))) g$214$21340))) ((lambda (g$214$21350) (if (g$214$15954 g$214$21350) (begin '#f ((lambda (g$214$21352) (if g$214$21352 (begin '#f ((lambda (g$214$21354) (if g$214$21354 (begin '#f (append g$214$21352 g$214$21354)) '#f)) ((lambda (g$214$21356) (if (g$214$15954 g$214$21356) (begin '#f ((lambda (g$214$21358) (if g$214$21358 (begin '#f ((lambda (g$214$21360) (if g$214$21360 (begin '#f (append g$214$21358 g$214$21360)) '#f)) ((lambda (g$214$21362) (if (equal? (g$214$15990 g$214$21362) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$21356)))) '#f)) ((lambda (g$214$21364) (if (equal? (g$214$15990 g$214$21364) '()) (begin '#f '()) '#f)) (g$214$15962 g$214$21356)))) '#f)) (g$214$15964 g$214$21350)))) '#f)) ((lambda (g$214$21366) (if (g$214$15968 g$214$21366) (if (g$214$15976 g$214$21366 (g$214$16454 'quote)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$21350)))) '#f)) g$214$21340))) (car g$214$21310)))))) g$214$21308) g$214$21302)))) (g$214$20830 (lambda (g$214$21142) ((lambda (g$214$21144) ((lambda (g$214$21146) ((lambda (g$214$21148) (if (if g$214$21148 (begin '#f (apply (lambda (g$214$21150) '#t) g$214$21148)) '#f) (apply (lambda (g$214$21152) (list (g$214$16454 'quote) (list->vector g$214$21152))) g$214$21148) ((lambda (g$214$21154) ((lambda (g$214$21156) (if (if g$214$21156 (begin '#f (apply (lambda () '#t) g$214$21156)) '#f) (apply (lambda () ((letrec ((g$214$21158 (lambda (g$214$21160 g$214$21161) ((lambda (g$214$21164) ((lambda (g$214$21166) (if (if g$214$21166 (begin '#f (apply (lambda (g$214$21168) '#t) g$214$21166)) '#f) (apply (lambda (g$214$21170) (g$214$21161 (map (lambda (g$214$21172) (list (g$214$16454 'quote) g$214$21172)) g$214$21170))) g$214$21166) ((lambda (g$214$21174) ((lambda (g$214$21176) (if (if g$214$21176 (begin '#f (apply (lambda (g$214$21178) '#t) g$214$21176)) '#f) (apply (lambda (g$214$21180) (g$214$21161 g$214$21180)) g$214$21176) ((lambda (g$214$21182) ((lambda (g$214$21184) (if (if g$214$21184 (begin '#f (apply (lambda (g$214$21186 g$214$21187) '#t) g$214$21184)) '#f) (apply (lambda (g$214$21190 g$214$21191) (g$214$21158 g$214$21191 (lambda (g$214$21194) (g$214$21161 (cons g$214$21190 g$214$21194))))) g$214$21184) ((lambda (g$214$21196) ((lambda (g$214$21198) (if (if g$214$21198 (begin '#f (apply (lambda () '#t) g$214$21198)) '#f) (apply (lambda () (list (g$214$16454 'list->vector) g$214$21144)) g$214$21198) (g$214$16703 '#f '"invalid syntax" g$214$21196))) ((lambda (g$214$21200) '()) g$214$21196))) g$214$21182))) ((lambda (g$214$21202) (if (g$214$15954 g$214$21202) (begin '#f ((lambda (g$214$21204) (if g$214$21204 (begin '#f ((lambda (g$214$21206) (if g$214$21206 (begin '#f (append g$214$21204 g$214$21206)) '#f)) ((lambda (g$214$21208) (if (g$214$15954 g$214$21208) (begin '#f ((lambda (g$214$21210) (if g$214$21210 (begin '#f ((lambda (g$214$21212) (if g$214$21212 (begin '#f (append g$214$21210 g$214$21212)) '#f)) ((lambda (g$214$21214) (if (g$214$15954 g$214$21214) (begin '#f ((lambda (g$214$21216) (if g$214$21216 (begin '#f ((lambda (g$214$21218) (if g$214$21218 (begin '#f (append g$214$21216 g$214$21218)) '#f)) ((lambda (g$214$21220) (if (equal? (g$214$15990 g$214$21220) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$21214)))) '#f)) ((lambda (g$214$21222) (list g$214$21222)) (g$214$15962 g$214$21214)))) '#f)) (g$214$15964 g$214$21208)))) '#f)) ((lambda (g$214$21224) (list g$214$21224)) (g$214$15962 g$214$21208)))) '#f)) (g$214$15964 g$214$21202)))) '#f)) ((lambda (g$214$21226) (if (g$214$15968 g$214$21226) (if (g$214$15976 g$214$21226 (g$214$16454 'cons)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$21202)))) '#f)) g$214$21182))) g$214$21174))) ((lambda (g$214$21228) (if (g$214$15954 g$214$21228) (begin '#f ((lambda (g$214$21230) (if g$214$21230 (begin '#f ((lambda (g$214$21232) (if g$214$21232 (begin '#f (append g$214$21230 g$214$21232)) '#f)) ((letrec ((g$214$21234 (lambda (g$214$21236) (if (g$214$15954 g$214$21236) ((lambda (g$214$21238) (if g$214$21238 (begin '#f ((lambda (g$214$21240) (if g$214$21240 (begin '#f (map cons g$214$21238 g$214$21240)) '#f)) (g$214$21234 (g$214$15964 g$214$21236)))) '#f)) ((lambda (g$214$21242) (list g$214$21242)) (g$214$15962 g$214$21236))) (if (g$214$15958 g$214$21236) (list (begin 'x* '())) '#f))))) g$214$21234) (g$214$15964 g$214$21228)))) '#f)) ((lambda (g$214$21244) (if (g$214$15968 g$214$21244) (if (g$214$15976 g$214$21244 (g$214$16454 'list)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$21228)))) '#f)) g$214$21174))) g$214$21164))) ((lambda (g$214$21246) (if (g$214$15954 g$214$21246) (begin '#f ((lambda (g$214$21248) (if g$214$21248 (begin '#f ((lambda (g$214$21250) (if g$214$21250 (begin '#f (append g$214$21248 g$214$21250)) '#f)) ((lambda (g$214$21252) (if (g$214$15954 g$214$21252) (begin '#f ((lambda (g$214$21254) (if g$214$21254 (begin '#f ((lambda (g$214$21256) (if g$214$21256 (begin '#f (append g$214$21254 g$214$21256)) '#f)) ((lambda (g$214$21258) (if (equal? (g$214$15990 g$214$21258) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$21252)))) '#f)) ((letrec ((g$214$21260 (lambda (g$214$21262) (if (g$214$15954 g$214$21262) ((lambda (g$214$21264) (if g$214$21264 (begin '#f ((lambda (g$214$21266) (if g$214$21266 (begin '#f (map cons g$214$21264 g$214$21266)) '#f)) (g$214$21260 (g$214$15964 g$214$21262)))) '#f)) ((lambda (g$214$21268) (list g$214$21268)) (g$214$15962 g$214$21262))) (if (g$214$15958 g$214$21262) (list (begin 'x* '())) '#f))))) g$214$21260) (g$214$15962 g$214$21252)))) '#f)) (g$214$15964 g$214$21246)))) '#f)) ((lambda (g$214$21270) (if (g$214$15968 g$214$21270) (if (g$214$15976 g$214$21270 (g$214$16454 'quote)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$21246)))) '#f)) g$214$21164))) g$214$21160)))) g$214$21158) g$214$21142 (lambda (g$214$21272) (cons* (g$214$16454 'vector) g$214$21272)))) g$214$21156) (g$214$16703 '#f '"invalid syntax" g$214$21154))) ((lambda (g$214$21274) '()) g$214$21154))) g$214$21146))) ((lambda (g$214$21276) (if (g$214$15954 g$214$21276) (begin '#f ((lambda (g$214$21278) (if g$214$21278 (begin '#f ((lambda (g$214$21280) (if g$214$21280 (begin '#f (append g$214$21278 g$214$21280)) '#f)) ((lambda (g$214$21282) (if (g$214$15954 g$214$21282) (begin '#f ((lambda (g$214$21284) (if g$214$21284 (begin '#f ((lambda (g$214$21286) (if g$214$21286 (begin '#f (append g$214$21284 g$214$21286)) '#f)) ((lambda (g$214$21288) (if (equal? (g$214$15990 g$214$21288) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$21282)))) '#f)) ((letrec ((g$214$21290 (lambda (g$214$21292) (if (g$214$15954 g$214$21292) ((lambda (g$214$21294) (if g$214$21294 (begin '#f ((lambda (g$214$21296) (if g$214$21296 (begin '#f (map cons g$214$21294 g$214$21296)) '#f)) (g$214$21290 (g$214$15964 g$214$21292)))) '#f)) ((lambda (g$214$21298) (list g$214$21298)) (g$214$15962 g$214$21292))) (if (g$214$15958 g$214$21292) (list (begin 'x* '())) '#f))))) g$214$21290) (g$214$15962 g$214$21282)))) '#f)) (g$214$15964 g$214$21276)))) '#f)) ((lambda (g$214$21300) (if (g$214$15968 g$214$21300) (if (g$214$15976 g$214$21300 (g$214$16454 'quote)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$21276)))) '#f)) g$214$21146))) g$214$21144)) g$214$21142))) (g$214$20832 (lambda (g$214$21048 g$214$21049) ((lambda (g$214$21052) ((lambda (g$214$21054) (if (if g$214$21054 (begin '#f (apply (lambda (g$214$21056 g$214$21057) '#t) g$214$21054)) '#f) (apply (lambda (g$214$21060 g$214$21061) ((lambda (g$214$21064) ((lambda (g$214$21066) (if (if g$214$21066 (begin '#f (apply (lambda (g$214$21068) '#t) g$214$21066)) '#f) (apply (lambda (g$214$21070) (if (= g$214$21049 '0) (g$214$20824 g$214$21070 (g$214$20832 g$214$21061 g$214$21049)) (g$214$20826 (g$214$20826 (list (g$214$16454 'quote) 'unquote) (g$214$20834 g$214$21070 (- g$214$21049 '1))) (g$214$20832 g$214$21061 g$214$21049)))) g$214$21066) ((lambda (g$214$21072) ((lambda (g$214$21074) (if (if g$214$21074 (begin '#f (apply (lambda (g$214$21076) '#t) g$214$21074)) '#f) (apply (lambda (g$214$21078) (if (= g$214$21049 '0) (g$214$20828 g$214$21078 (g$214$20832 g$214$21061 g$214$21049)) (g$214$20826 (g$214$20826 (list (g$214$16454 'quote) 'unquote-splicing) (g$214$20834 g$214$21078 (- g$214$21049 '1))) (g$214$20832 g$214$21061 g$214$21049)))) g$214$21074) ((lambda (g$214$21080) ((lambda (g$214$21082) (if (if g$214$21082 (begin '#f (apply (lambda (g$214$21084) '#t) g$214$21082)) '#f) (apply (lambda (g$214$21086) (g$214$20826 (g$214$20834 g$214$21086 g$214$21049) (g$214$20832 g$214$21061 g$214$21049))) g$214$21082) (g$214$16703 '#f '"invalid syntax" g$214$21080))) ((lambda (g$214$21088) (list g$214$21088)) g$214$21080))) g$214$21072))) ((lambda (g$214$21090) (if (g$214$15954 g$214$21090) (begin '#f ((lambda (g$214$21092) (if g$214$21092 (begin '#f ((lambda (g$214$21094) (if g$214$21094 (begin '#f (append g$214$21092 g$214$21094)) '#f)) ((letrec ((g$214$21096 (lambda (g$214$21098) (if (g$214$15954 g$214$21098) ((lambda (g$214$21100) (if g$214$21100 (begin '#f ((lambda (g$214$21102) (if g$214$21102 (begin '#f (map cons g$214$21100 g$214$21102)) '#f)) (g$214$21096 (g$214$15964 g$214$21098)))) '#f)) ((lambda (g$214$21104) (list g$214$21104)) (g$214$15962 g$214$21098))) (if (g$214$15958 g$214$21098) (list (begin 'p '())) '#f))))) g$214$21096) (g$214$15964 g$214$21090)))) '#f)) ((lambda (g$214$21106) (if (g$214$15968 g$214$21106) (if (g$214$15976 g$214$21106 (g$214$16454 'unquote-splicing)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$21090)))) '#f)) g$214$21072))) g$214$21064))) ((lambda (g$214$21108) (if (g$214$15954 g$214$21108) (begin '#f ((lambda (g$214$21110) (if g$214$21110 (begin '#f ((lambda (g$214$21112) (if g$214$21112 (begin '#f (append g$214$21110 g$214$21112)) '#f)) ((letrec ((g$214$21114 (lambda (g$214$21116) (if (g$214$15954 g$214$21116) ((lambda (g$214$21118) (if g$214$21118 (begin '#f ((lambda (g$214$21120) (if g$214$21120 (begin '#f (map cons g$214$21118 g$214$21120)) '#f)) (g$214$21114 (g$214$15964 g$214$21116)))) '#f)) ((lambda (g$214$21122) (list g$214$21122)) (g$214$15962 g$214$21116))) (if (g$214$15958 g$214$21116) (list (begin 'p '())) '#f))))) g$214$21114) (g$214$15964 g$214$21108)))) '#f)) ((lambda (g$214$21124) (if (g$214$15968 g$214$21124) (if (g$214$15976 g$214$21124 (g$214$16454 'unquote)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$21108)))) '#f)) g$214$21064))) g$214$21060)) g$214$21054) ((lambda (g$214$21126) ((lambda (g$214$21128) (if (if g$214$21128 (begin '#f (apply (lambda () '#t) g$214$21128)) '#f) (apply (lambda () (list (g$214$16454 'quote) '())) g$214$21128) (g$214$16703 '#f '"invalid syntax" g$214$21126))) ((lambda (g$214$21130) (if (equal? (g$214$15990 g$214$21130) '()) (begin '#f '()) '#f)) g$214$21126))) g$214$21052))) ((lambda (g$214$21132) (if (g$214$15954 g$214$21132) (begin '#f ((lambda (g$214$21134) (if g$214$21134 (begin '#f ((lambda (g$214$21136) (if g$214$21136 (begin '#f (append g$214$21134 g$214$21136)) '#f)) ((lambda (g$214$21138) (list g$214$21138)) (g$214$15964 g$214$21132)))) '#f)) ((lambda (g$214$21140) (list g$214$21140)) (g$214$15962 g$214$21132)))) '#f)) g$214$21052))) g$214$21048))) (g$214$20834 (lambda (g$214$20864 g$214$20865) ((lambda (g$214$20868) ((lambda (g$214$20870) (if (if g$214$20870 (begin '#f (apply (lambda (g$214$20872) '#t) g$214$20870)) '#f) (apply (lambda (g$214$20874) (if (= g$214$20865 '0) g$214$20874 (g$214$20826 (list (g$214$16454 'quote) 'unquote) (g$214$20834 (list g$214$20874) (- g$214$20865 '1))))) g$214$20870) ((lambda (g$214$20876) ((lambda (g$214$20878) (if (if g$214$20878 (begin '#f (apply (lambda (g$214$20880 g$214$20881) '#t) g$214$20878)) '#f) (apply (lambda (g$214$20884 g$214$20885) (if (= g$214$20865 '0) (g$214$20824 g$214$20884 (g$214$20834 g$214$20885 g$214$20865)) (g$214$20826 (g$214$20826 (list (g$214$16454 'quote) 'unquote) (g$214$20834 g$214$20884 (- g$214$20865 '1))) (g$214$20834 g$214$20885 g$214$20865)))) g$214$20878) ((lambda (g$214$20888) ((lambda (g$214$20890) (if (if g$214$20890 (begin '#f (apply (lambda (g$214$20892 g$214$20893) '#t) g$214$20890)) '#f) (apply (lambda (g$214$20896 g$214$20897) (if (= g$214$20865 '0) (g$214$20828 g$214$20896 (g$214$20834 g$214$20897 g$214$20865)) (g$214$20826 (g$214$20826 (list (g$214$16454 'quote) 'unquote-splicing) (g$214$20834 g$214$20896 (- g$214$20865 '1))) (g$214$20834 g$214$20897 g$214$20865)))) g$214$20890) ((lambda (g$214$20900) ((lambda (g$214$20902) (if (if g$214$20902 (begin '#f (apply (lambda (g$214$20904) '#t) g$214$20902)) '#f) (apply (lambda (g$214$20906) (g$214$20826 (list (g$214$16454 'quote) 'quasiquote) (g$214$20834 (list g$214$20906) (+ g$214$20865 '1)))) g$214$20902) ((lambda (g$214$20908) ((lambda (g$214$20910) (if (if g$214$20910 (begin '#f (apply (lambda (g$214$20912 g$214$20913) '#t) g$214$20910)) '#f) (apply (lambda (g$214$20916 g$214$20917) (g$214$20826 (g$214$20834 g$214$20916 g$214$20865) (g$214$20834 g$214$20917 g$214$20865))) g$214$20910) ((lambda (g$214$20920) ((lambda (g$214$20922) (if (if g$214$20922 (begin '#f (apply (lambda (g$214$20924) (not (g$214$15920 g$214$20924))) g$214$20922)) '#f) (apply (lambda (g$214$20926) (g$214$20830 (g$214$20832 g$214$20926 g$214$20865))) g$214$20922) ((lambda (g$214$20928) ((lambda (g$214$20930) (if (if g$214$20930 (begin '#f (apply (lambda (g$214$20932) '#t) g$214$20930)) '#f) (apply (lambda (g$214$20934) (list (g$214$16454 'quote) g$214$20934)) g$214$20930) (g$214$16703 '#f '"invalid syntax" g$214$20928))) ((lambda (g$214$20936) (list g$214$20936)) g$214$20928))) g$214$20920))) ((lambda (g$214$20938) (if (g$214$15956 g$214$20938) (begin '#f ((letrec ((g$214$20940 (lambda (g$214$20942) (if (g$214$15954 g$214$20942) ((lambda (g$214$20944) (if g$214$20944 (begin '#f ((lambda (g$214$20946) (if g$214$20946 (begin '#f (map cons g$214$20944 g$214$20946)) '#f)) (g$214$20940 (g$214$15964 g$214$20942)))) '#f)) ((lambda (g$214$20948) (list g$214$20948)) (g$214$15962 g$214$20942))) (if (g$214$15958 g$214$20942) (list (begin 'x '())) '#f))))) g$214$20940) (g$214$15952 g$214$20938))) '#f)) g$214$20920))) g$214$20908))) ((lambda (g$214$20950) (if (g$214$15954 g$214$20950) (begin '#f ((lambda (g$214$20952) (if g$214$20952 (begin '#f ((lambda (g$214$20954) (if g$214$20954 (begin '#f (append g$214$20952 g$214$20954)) '#f)) ((lambda (g$214$20956) (list g$214$20956)) (g$214$15964 g$214$20950)))) '#f)) ((lambda (g$214$20958) (list g$214$20958)) (g$214$15962 g$214$20950)))) '#f)) g$214$20908))) g$214$20900))) ((lambda (g$214$20960) (if (g$214$15954 g$214$20960) (begin '#f ((lambda (g$214$20962) (if g$214$20962 (begin '#f ((lambda (g$214$20964) (if g$214$20964 (begin '#f (append g$214$20962 g$214$20964)) '#f)) ((lambda (g$214$20966) (if (g$214$15954 g$214$20966) (begin '#f ((lambda (g$214$20968) (if g$214$20968 (begin '#f ((lambda (g$214$20970) (if g$214$20970 (begin '#f (append g$214$20968 g$214$20970)) '#f)) ((lambda (g$214$20972) (if (equal? (g$214$15990 g$214$20972) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$20966)))) '#f)) ((lambda (g$214$20974) (list g$214$20974)) (g$214$15962 g$214$20966)))) '#f)) (g$214$15964 g$214$20960)))) '#f)) ((lambda (g$214$20976) (if (g$214$15968 g$214$20976) (if (g$214$15976 g$214$20976 (g$214$16454 'quasiquote)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$20960)))) '#f)) g$214$20900))) g$214$20888))) ((lambda (g$214$20978) (if (g$214$15954 g$214$20978) (begin '#f ((lambda (g$214$20980) (if g$214$20980 (begin '#f ((lambda (g$214$20982) (if g$214$20982 (begin '#f (append g$214$20980 g$214$20982)) '#f)) ((lambda (g$214$20984) (list g$214$20984)) (g$214$15964 g$214$20978)))) '#f)) ((lambda (g$214$20986) (if (g$214$15954 g$214$20986) (begin '#f ((lambda (g$214$20988) (if g$214$20988 (begin '#f ((lambda (g$214$20990) (if g$214$20990 (begin '#f (append g$214$20988 g$214$20990)) '#f)) ((letrec ((g$214$20992 (lambda (g$214$20994) (if (g$214$15954 g$214$20994) ((lambda (g$214$20996) (if g$214$20996 (begin '#f ((lambda (g$214$20998) (if g$214$20998 (begin '#f (map cons g$214$20996 g$214$20998)) '#f)) (g$214$20992 (g$214$15964 g$214$20994)))) '#f)) ((lambda (g$214$21000) (list g$214$21000)) (g$214$15962 g$214$20994))) (if (g$214$15958 g$214$20994) (list (begin 'p '())) '#f))))) g$214$20992) (g$214$15964 g$214$20986)))) '#f)) ((lambda (g$214$21002) (if (g$214$15968 g$214$21002) (if (g$214$15976 g$214$21002 (g$214$16454 'unquote-splicing)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$20986)))) '#f)) (g$214$15962 g$214$20978)))) '#f)) g$214$20888))) g$214$20876))) ((lambda (g$214$21004) (if (g$214$15954 g$214$21004) (begin '#f ((lambda (g$214$21006) (if g$214$21006 (begin '#f ((lambda (g$214$21008) (if g$214$21008 (begin '#f (append g$214$21006 g$214$21008)) '#f)) ((lambda (g$214$21010) (list g$214$21010)) (g$214$15964 g$214$21004)))) '#f)) ((lambda (g$214$21012) (if (g$214$15954 g$214$21012) (begin '#f ((lambda (g$214$21014) (if g$214$21014 (begin '#f ((lambda (g$214$21016) (if g$214$21016 (begin '#f (append g$214$21014 g$214$21016)) '#f)) ((letrec ((g$214$21018 (lambda (g$214$21020) (if (g$214$15954 g$214$21020) ((lambda (g$214$21022) (if g$214$21022 (begin '#f ((lambda (g$214$21024) (if g$214$21024 (begin '#f (map cons g$214$21022 g$214$21024)) '#f)) (g$214$21018 (g$214$15964 g$214$21020)))) '#f)) ((lambda (g$214$21026) (list g$214$21026)) (g$214$15962 g$214$21020))) (if (g$214$15958 g$214$21020) (list (begin 'p '())) '#f))))) g$214$21018) (g$214$15964 g$214$21012)))) '#f)) ((lambda (g$214$21028) (if (g$214$15968 g$214$21028) (if (g$214$15976 g$214$21028 (g$214$16454 'unquote)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$21012)))) '#f)) (g$214$15962 g$214$21004)))) '#f)) g$214$20876))) g$214$20868))) ((lambda (g$214$21030) (if (g$214$15954 g$214$21030) (begin '#f ((lambda (g$214$21032) (if g$214$21032 (begin '#f ((lambda (g$214$21034) (if g$214$21034 (begin '#f (append g$214$21032 g$214$21034)) '#f)) ((lambda (g$214$21036) (if (g$214$15954 g$214$21036) (begin '#f ((lambda (g$214$21038) (if g$214$21038 (begin '#f ((lambda (g$214$21040) (if g$214$21040 (begin '#f (append g$214$21038 g$214$21040)) '#f)) ((lambda (g$214$21042) (if (equal? (g$214$15990 g$214$21042) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$21036)))) '#f)) ((lambda (g$214$21044) (list g$214$21044)) (g$214$15962 g$214$21036)))) '#f)) (g$214$15964 g$214$21030)))) '#f)) ((lambda (g$214$21046) (if (g$214$15968 g$214$21046) (if (g$214$15976 g$214$21046 (g$214$16454 'unquote)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$21030)))) '#f)) g$214$20868))) g$214$20864)))) (lambda (g$214$20836) ((lambda (g$214$20838) ((lambda (g$214$20840) (if (if g$214$20840 (begin '#f (apply (lambda (g$214$20842) '#t) g$214$20840)) '#f) (apply (lambda (g$214$20844) (g$214$20834 g$214$20844 '0)) g$214$20840) (g$214$16703 '#f '"invalid syntax" g$214$20838))) ((lambda (g$214$20846) (if (g$214$15954 g$214$20846) (begin '#f ((lambda (g$214$20848) (if g$214$20848 (begin '#f ((lambda (g$214$20850) (if g$214$20850 (begin '#f (append g$214$20848 g$214$20850)) '#f)) ((lambda (g$214$20852) (if (g$214$15954 g$214$20852) (begin '#f ((lambda (g$214$20854) (if g$214$20854 (begin '#f ((lambda (g$214$20856) (if g$214$20856 (begin '#f (append g$214$20854 g$214$20856)) '#f)) ((lambda (g$214$20858) (if (equal? (g$214$15990 g$214$20858) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$20852)))) '#f)) ((lambda (g$214$20860) (list g$214$20860)) (g$214$15962 g$214$20852)))) '#f)) (g$214$15964 g$214$20846)))) '#f)) ((lambda (g$214$20862) '()) (g$214$15962 g$214$20846)))) '#f)) g$214$20838))) g$214$20836)))))) (g$214$16544 ((lambda () (letrec ((g$214$21482 (lambda (g$214$21527 g$214$21528) ((lambda (g$214$21531) ((lambda (g$214$21533) (if (if g$214$21533 (begin '#f (apply (lambda (g$214$21535) '#t) g$214$21533)) '#f) (apply (lambda (g$214$21537) (if (= g$214$21528 '0) ((lambda (g$214$21539) (values (list g$214$21539) (list g$214$21537) g$214$21539)) (gensym)) (call-with-values (lambda () (g$214$21482 g$214$21537 (- g$214$21528 '1))) (lambda (g$214$21544 g$214$21545 g$214$21546) ((lambda (g$214$21550 g$214$21551 g$214$21552) (values g$214$21552 g$214$21551 (list 'unsyntax g$214$21550))) g$214$21546 g$214$21545 g$214$21544))))) g$214$21533) ((lambda (g$214$21556) ((lambda (g$214$21558) (if (if g$214$21558 (begin '#f (apply (lambda () (= g$214$21528 '0)) g$214$21558)) '#f) (apply (lambda () (g$214$16703 '#f '"incorrect use of unsyntax" g$214$21527)) g$214$21558) ((lambda (g$214$21560) ((lambda (g$214$21562) (if (if g$214$21562 (begin '#f (apply (lambda (g$214$21564 g$214$21565) '#t) g$214$21562)) '#f) (apply (lambda (g$214$21568 g$214$21569) (call-with-values (lambda () (g$214$21482 g$214$21569 g$214$21528)) (lambda (g$214$21575 g$214$21576 g$214$21577) ((lambda (g$214$21581 g$214$21582 g$214$21583) (if (= g$214$21528 '0) ((lambda (g$214$21587) (values (cons (cons g$214$21587 '(|...|)) g$214$21583) (cons g$214$21568 g$214$21582) (cons g$214$21587 (cons '|...| g$214$21581)))) (gensym)) (call-with-values (lambda () (g$214$21482 g$214$21568 (- g$214$21528 '1))) (lambda (g$214$21592 g$214$21593 g$214$21594) ((lambda (g$214$21598 g$214$21599 g$214$21600) (values (append g$214$21600 g$214$21583) (append g$214$21599 g$214$21582) (cons (list 'unsyntax-splicing g$214$21598) g$214$21581))) g$214$21594 g$214$21593 g$214$21592))))) g$214$21577 g$214$21576 g$214$21575)))) g$214$21562) ((lambda (g$214$21604) ((lambda (g$214$21606) (if (if g$214$21606 (begin '#f (apply (lambda () (= g$214$21528 '0)) g$214$21606)) '#f) (apply (lambda () (g$214$16703 '#f '"incorrect use of unsyntax-splicing" g$214$21527)) g$214$21606) ((lambda (g$214$21608) ((lambda (g$214$21610) (if (if g$214$21610 (begin '#f (apply (lambda (g$214$21612) '#t) g$214$21610)) '#f) (apply (lambda (g$214$21614) (call-with-values (lambda () (g$214$21482 g$214$21614 (+ g$214$21528 '1))) (lambda (g$214$21619 g$214$21620 g$214$21621) ((lambda (g$214$21625 g$214$21626 g$214$21627) (values g$214$21627 g$214$21626 (list 'quasisyntax g$214$21625))) g$214$21621 g$214$21620 g$214$21619)))) g$214$21610) ((lambda (g$214$21631) ((lambda (g$214$21633) (if (if g$214$21633 (begin '#f (apply (lambda (g$214$21635 g$214$21636) '#t) g$214$21633)) '#f) (apply (lambda (g$214$21639 g$214$21640) (call-with-values (lambda () (g$214$21482 g$214$21639 g$214$21528)) (lambda (g$214$21649 g$214$21650 g$214$21651) (call-with-values (lambda () (g$214$21482 g$214$21640 g$214$21528)) (lambda (g$214$21655 g$214$21656 g$214$21657) ((lambda (g$214$21661 g$214$21662 g$214$21663 g$214$21664 g$214$21665 g$214$21666) (values (append g$214$21663 g$214$21666) (append g$214$21662 g$214$21665) (cons g$214$21664 g$214$21661))) g$214$21657 g$214$21656 g$214$21655 g$214$21651 g$214$21650 g$214$21649)))))) g$214$21633) ((lambda (g$214$21673) ((lambda (g$214$21675) (if (if g$214$21675 (begin '#f (apply (lambda (g$214$21677) (not (g$214$15920 g$214$21527))) g$214$21675)) '#f) (apply (lambda (g$214$21679) (call-with-values (lambda () ((letrec ((g$214$21684 (lambda (g$214$21686) (if (null? g$214$21686) (values '() '() '()) (call-with-values (lambda () (g$214$21482 (car g$214$21686) g$214$21528)) (lambda (g$214$21691 g$214$21692 g$214$21693) ((lambda (g$214$21697 g$214$21698 g$214$21699) (call-with-values (lambda () (g$214$21684 (cdr g$214$21686))) (lambda (g$214$21706 g$214$21707 g$214$21708) ((lambda (g$214$21712 g$214$21713 g$214$21714) (values (append g$214$21699 g$214$21714) (append g$214$21698 g$214$21713) (cons g$214$21697 g$214$21712))) g$214$21708 g$214$21707 g$214$21706)))) g$214$21693 g$214$21692 g$214$21691))))))) g$214$21684) g$214$21679)) (lambda (g$214$21718 g$214$21719 g$214$21720) ((lambda (g$214$21724 g$214$21725 g$214$21726) (values g$214$21726 g$214$21725 (list->vector g$214$21724))) g$214$21720 g$214$21719 g$214$21718)))) g$214$21675) ((lambda (g$214$21730) ((lambda (g$214$21732) (if (if g$214$21732 (begin '#f (apply (lambda () '#t) g$214$21732)) '#f) (apply (lambda () (values '() '() g$214$21527)) g$214$21732) (g$214$16703 '#f '"invalid syntax" g$214$21730))) ((lambda (g$214$21734) '()) g$214$21730))) g$214$21673))) ((lambda (g$214$21736) (if (g$214$15956 g$214$21736) (begin '#f ((letrec ((g$214$21738 (lambda (g$214$21740) (if (g$214$15954 g$214$21740) ((lambda (g$214$21742) (if g$214$21742 (begin '#f ((lambda (g$214$21744) (if g$214$21744 (begin '#f (map cons g$214$21742 g$214$21744)) '#f)) (g$214$21738 (g$214$15964 g$214$21740)))) '#f)) ((lambda (g$214$21746) (list g$214$21746)) (g$214$15962 g$214$21740))) (if (g$214$15958 g$214$21740) (list (begin 'x '())) '#f))))) g$214$21738) (g$214$15952 g$214$21736))) '#f)) g$214$21673))) g$214$21631))) ((lambda (g$214$21748) (if (g$214$15954 g$214$21748) (begin '#f ((lambda (g$214$21750) (if g$214$21750 (begin '#f ((lambda (g$214$21752) (if g$214$21752 (begin '#f (append g$214$21750 g$214$21752)) '#f)) ((lambda (g$214$21754) (list g$214$21754)) (g$214$15964 g$214$21748)))) '#f)) ((lambda (g$214$21756) (list g$214$21756)) (g$214$15962 g$214$21748)))) '#f)) g$214$21631))) g$214$21608))) ((lambda (g$214$21758) (if (g$214$15954 g$214$21758) (begin '#f ((lambda (g$214$21760) (if g$214$21760 (begin '#f ((lambda (g$214$21762) (if g$214$21762 (begin '#f (append g$214$21760 g$214$21762)) '#f)) ((lambda (g$214$21764) (if (g$214$15954 g$214$21764) (begin '#f ((lambda (g$214$21766) (if g$214$21766 (begin '#f ((lambda (g$214$21768) (if g$214$21768 (begin '#f (append g$214$21766 g$214$21768)) '#f)) ((lambda (g$214$21770) (if (equal? (g$214$15990 g$214$21770) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$21764)))) '#f)) ((lambda (g$214$21772) (list g$214$21772)) (g$214$15962 g$214$21764)))) '#f)) (g$214$15964 g$214$21758)))) '#f)) ((lambda (g$214$21774) (if (g$214$15968 g$214$21774) (if (g$214$15976 g$214$21774 (g$214$16454 'quasisyntax)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$21758)))) '#f)) g$214$21608))) g$214$21604))) ((lambda (g$214$21776) (if (g$214$15968 g$214$21776) (if (g$214$15976 g$214$21776 (g$214$16454 'unsyntax-splicing)) (begin '#f '()) '#f) '#f)) g$214$21604))) g$214$21560))) ((lambda (g$214$21778) (if (g$214$15954 g$214$21778) (begin '#f ((lambda (g$214$21780) (if g$214$21780 (begin '#f ((lambda (g$214$21782) (if g$214$21782 (begin '#f (append g$214$21780 g$214$21782)) '#f)) ((lambda (g$214$21784) (list g$214$21784)) (g$214$15964 g$214$21778)))) '#f)) ((lambda (g$214$21786) (if (g$214$15954 g$214$21786) (begin '#f ((lambda (g$214$21788) (if g$214$21788 (begin '#f ((lambda (g$214$21790) (if g$214$21790 (begin '#f (append g$214$21788 g$214$21790)) '#f)) ((lambda (g$214$21792) (if (g$214$15954 g$214$21792) (begin '#f ((lambda (g$214$21794) (if g$214$21794 (begin '#f ((lambda (g$214$21796) (if g$214$21796 (begin '#f (append g$214$21794 g$214$21796)) '#f)) ((lambda (g$214$21798) (if (equal? (g$214$15990 g$214$21798) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$21792)))) '#f)) ((lambda (g$214$21800) (list g$214$21800)) (g$214$15962 g$214$21792)))) '#f)) (g$214$15964 g$214$21786)))) '#f)) ((lambda (g$214$21802) (if (g$214$15968 g$214$21802) (if (g$214$15976 g$214$21802 (g$214$16454 'unsyntax-splicing)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$21786)))) '#f)) (g$214$15962 g$214$21778)))) '#f)) g$214$21560))) g$214$21556))) ((lambda (g$214$21804) (if (g$214$15968 g$214$21804) (if (g$214$15976 g$214$21804 (g$214$16454 'unsyntax)) (begin '#f '()) '#f) '#f)) g$214$21556))) g$214$21531))) ((lambda (g$214$21806) (if (g$214$15954 g$214$21806) (begin '#f ((lambda (g$214$21808) (if g$214$21808 (begin '#f ((lambda (g$214$21810) (if g$214$21810 (begin '#f (append g$214$21808 g$214$21810)) '#f)) ((lambda (g$214$21812) (if (g$214$15954 g$214$21812) (begin '#f ((lambda (g$214$21814) (if g$214$21814 (begin '#f ((lambda (g$214$21816) (if g$214$21816 (begin '#f (append g$214$21814 g$214$21816)) '#f)) ((lambda (g$214$21818) (if (equal? (g$214$15990 g$214$21818) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$21812)))) '#f)) ((lambda (g$214$21820) (list g$214$21820)) (g$214$15962 g$214$21812)))) '#f)) (g$214$15964 g$214$21806)))) '#f)) ((lambda (g$214$21822) (if (g$214$15968 g$214$21822) (if (g$214$15976 g$214$21822 (g$214$16454 'unsyntax)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$21806)))) '#f)) g$214$21531))) g$214$21527)))) (lambda (g$214$21484) ((lambda (g$214$21486) ((lambda (g$214$21488) (if (if g$214$21488 (begin '#f (apply (lambda (g$214$21490) '#t) g$214$21488)) '#f) (apply (lambda (g$214$21492) (call-with-values (lambda () (g$214$21482 g$214$21492 '0)) (lambda (g$214$21497 g$214$21498 g$214$21499) ((lambda (g$214$21503 g$214$21504 g$214$21505) (g$214$16492 (list 'syntax-case (cons 'list g$214$21504) '() (list g$214$21505 (list 'syntax g$214$21503))))) g$214$21499 g$214$21498 g$214$21497)))) g$214$21488) (g$214$16703 '#f '"invalid syntax" g$214$21486))) ((lambda (g$214$21509) (if (g$214$15954 g$214$21509) (begin '#f ((lambda (g$214$21511) (if g$214$21511 (begin '#f ((lambda (g$214$21513) (if g$214$21513 (begin '#f (append g$214$21511 g$214$21513)) '#f)) ((lambda (g$214$21515) (if (g$214$15954 g$214$21515) (begin '#f ((lambda (g$214$21517) (if g$214$21517 (begin '#f ((lambda (g$214$21519) (if g$214$21519 (begin '#f (append g$214$21517 g$214$21519)) '#f)) ((lambda (g$214$21521) (if (equal? (g$214$15990 g$214$21521) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$21515)))) '#f)) ((lambda (g$214$21523) (list g$214$21523)) (g$214$15962 g$214$21515)))) '#f)) (g$214$15964 g$214$21509)))) '#f)) ((lambda (g$214$21525) '()) (g$214$15962 g$214$21509)))) '#f)) g$214$21486))) g$214$21484)))))) (g$214$16546 (lambda (g$214$21824) (g$214$16703 '#f '"define-struct not supported" g$214$21824))) (g$214$16548 (lambda (g$214$21826) (letrec ((g$214$21828 (lambda (g$214$22958 . g$214$22960) (g$214$16707 g$214$22958 (string->symbol (apply string-append (map (lambda (g$214$22962) (if (symbol? g$214$22962) (symbol->string g$214$22962) (if (string? g$214$22962) g$214$22962 (assertion-violation 'define-record-type '"BUG")))) g$214$22960)))))) (g$214$21830 (lambda (g$214$22904) ((lambda (g$214$22906) ((lambda (g$214$22908) (if (if g$214$22908 (begin '#f (apply (lambda (g$214$22910 g$214$22911 g$214$22912) '#t) g$214$22908)) '#f) (apply (lambda (g$214$22916 g$214$22917 g$214$22918) g$214$22916) g$214$22908) ((lambda (g$214$22922) ((lambda (g$214$22924) (if (if g$214$22924 (begin '#f (apply (lambda (g$214$22926) '#t) g$214$22924)) '#f) (apply (lambda (g$214$22928) g$214$22928) g$214$22924) (g$214$16703 '#f '"invalid syntax" g$214$22922))) ((lambda (g$214$22930) (list g$214$22930)) g$214$22922))) g$214$22906))) ((lambda (g$214$22932) (if (g$214$15954 g$214$22932) (begin '#f ((lambda (g$214$22934) (if g$214$22934 (begin '#f ((lambda (g$214$22936) (if g$214$22936 (begin '#f (append g$214$22934 g$214$22936)) '#f)) ((lambda (g$214$22938) (if (g$214$15954 g$214$22938) (begin '#f ((lambda (g$214$22940) (if g$214$22940 (begin '#f ((lambda (g$214$22942) (if g$214$22942 (begin '#f (append g$214$22940 g$214$22942)) '#f)) ((lambda (g$214$22944) (if (g$214$15954 g$214$22944) (begin '#f ((lambda (g$214$22946) (if g$214$22946 (begin '#f ((lambda (g$214$22948) (if g$214$22948 (begin '#f (append g$214$22946 g$214$22948)) '#f)) ((lambda (g$214$22950) (if (equal? (g$214$15990 g$214$22950) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$22944)))) '#f)) ((lambda (g$214$22952) (list g$214$22952)) (g$214$15962 g$214$22944)))) '#f)) (g$214$15964 g$214$22938)))) '#f)) ((lambda (g$214$22954) (list g$214$22954)) (g$214$15962 g$214$22938)))) '#f)) (g$214$15964 g$214$22932)))) '#f)) ((lambda (g$214$22956) (list g$214$22956)) (g$214$15962 g$214$22932)))) '#f)) g$214$22906))) g$214$22904))) (g$214$21832 (lambda (g$214$22850) ((lambda (g$214$22852) ((lambda (g$214$22854) (if (if g$214$22854 (begin '#f (apply (lambda (g$214$22856 g$214$22857 g$214$22858) '#t) g$214$22854)) '#f) (apply (lambda (g$214$22862 g$214$22863 g$214$22864) g$214$22863) g$214$22854) ((lambda (g$214$22868) ((lambda (g$214$22870) (if (if g$214$22870 (begin '#f (apply (lambda (g$214$22872) (g$214$15968 g$214$22872)) g$214$22870)) '#f) (apply (lambda (g$214$22874) (g$214$21828 g$214$22874 '"make-" (g$214$15990 g$214$22874))) g$214$22870) (g$214$16703 '#f '"invalid syntax" g$214$22868))) ((lambda (g$214$22876) (list g$214$22876)) g$214$22868))) g$214$22852))) ((lambda (g$214$22878) (if (g$214$15954 g$214$22878) (begin '#f ((lambda (g$214$22880) (if g$214$22880 (begin '#f ((lambda (g$214$22882) (if g$214$22882 (begin '#f (append g$214$22880 g$214$22882)) '#f)) ((lambda (g$214$22884) (if (g$214$15954 g$214$22884) (begin '#f ((lambda (g$214$22886) (if g$214$22886 (begin '#f ((lambda (g$214$22888) (if g$214$22888 (begin '#f (append g$214$22886 g$214$22888)) '#f)) ((lambda (g$214$22890) (if (g$214$15954 g$214$22890) (begin '#f ((lambda (g$214$22892) (if g$214$22892 (begin '#f ((lambda (g$214$22894) (if g$214$22894 (begin '#f (append g$214$22892 g$214$22894)) '#f)) ((lambda (g$214$22896) (if (equal? (g$214$15990 g$214$22896) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$22890)))) '#f)) ((lambda (g$214$22898) (list g$214$22898)) (g$214$15962 g$214$22890)))) '#f)) (g$214$15964 g$214$22884)))) '#f)) ((lambda (g$214$22900) (list g$214$22900)) (g$214$15962 g$214$22884)))) '#f)) (g$214$15964 g$214$22878)))) '#f)) ((lambda (g$214$22902) (list g$214$22902)) (g$214$15962 g$214$22878)))) '#f)) g$214$22852))) g$214$22850))) (g$214$21834 (lambda (g$214$22796) ((lambda (g$214$22798) ((lambda (g$214$22800) (if (if g$214$22800 (begin '#f (apply (lambda (g$214$22802 g$214$22803 g$214$22804) '#t) g$214$22800)) '#f) (apply (lambda (g$214$22808 g$214$22809 g$214$22810) g$214$22810) g$214$22800) ((lambda (g$214$22814) ((lambda (g$214$22816) (if (if g$214$22816 (begin '#f (apply (lambda (g$214$22818) (g$214$15968 g$214$22818)) g$214$22816)) '#f) (apply (lambda (g$214$22820) (g$214$21828 g$214$22820 (g$214$15990 g$214$22820) '"?")) g$214$22816) (g$214$16703 '#f '"invalid syntax" g$214$22814))) ((lambda (g$214$22822) (list g$214$22822)) g$214$22814))) g$214$22798))) ((lambda (g$214$22824) (if (g$214$15954 g$214$22824) (begin '#f ((lambda (g$214$22826) (if g$214$22826 (begin '#f ((lambda (g$214$22828) (if g$214$22828 (begin '#f (append g$214$22826 g$214$22828)) '#f)) ((lambda (g$214$22830) (if (g$214$15954 g$214$22830) (begin '#f ((lambda (g$214$22832) (if g$214$22832 (begin '#f ((lambda (g$214$22834) (if g$214$22834 (begin '#f (append g$214$22832 g$214$22834)) '#f)) ((lambda (g$214$22836) (if (g$214$15954 g$214$22836) (begin '#f ((lambda (g$214$22838) (if g$214$22838 (begin '#f ((lambda (g$214$22840) (if g$214$22840 (begin '#f (append g$214$22838 g$214$22840)) '#f)) ((lambda (g$214$22842) (if (equal? (g$214$15990 g$214$22842) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$22836)))) '#f)) ((lambda (g$214$22844) (list g$214$22844)) (g$214$15962 g$214$22836)))) '#f)) (g$214$15964 g$214$22830)))) '#f)) ((lambda (g$214$22846) (list g$214$22846)) (g$214$15962 g$214$22830)))) '#f)) (g$214$15964 g$214$22824)))) '#f)) ((lambda (g$214$22848) (list g$214$22848)) (g$214$15962 g$214$22824)))) '#f)) g$214$22798))) g$214$22796))) (g$214$21836 (lambda (g$214$22752 g$214$22753) ((lambda (g$214$22756) ((lambda (g$214$22758) (if (if g$214$22758 (begin '#f (apply (lambda () '#t) g$214$22758)) '#f) (apply (lambda () '#f) g$214$22758) ((lambda (g$214$22760) ((lambda (g$214$22762) (if (if g$214$22762 (begin '#f (apply (lambda (g$214$22764 g$214$22765 g$214$22766) '#t) g$214$22762)) '#f) (apply (lambda (g$214$22770 g$214$22771 g$214$22772) (if (g$214$15976 (g$214$16492 g$214$22752) g$214$22770) (cons g$214$22770 g$214$22771) (g$214$21836 g$214$22752 g$214$22772))) g$214$22762) (g$214$16703 '#f '"invalid syntax" g$214$22760))) ((lambda (g$214$22776) (if (g$214$15954 g$214$22776) (begin '#f ((lambda (g$214$22778) (if g$214$22778 (begin '#f ((lambda (g$214$22780) (if g$214$22780 (begin '#f (append g$214$22778 g$214$22780)) '#f)) ((lambda (g$214$22782) (list g$214$22782)) (g$214$15964 g$214$22776)))) '#f)) ((lambda (g$214$22784) (if (g$214$15954 g$214$22784) (begin '#f ((lambda (g$214$22786) (if g$214$22786 (begin '#f ((lambda (g$214$22788) (if g$214$22788 (begin '#f (append g$214$22786 g$214$22788)) '#f)) ((lambda (g$214$22790) (list g$214$22790)) (g$214$15964 g$214$22784)))) '#f)) ((lambda (g$214$22792) (list g$214$22792)) (g$214$15962 g$214$22784)))) '#f)) (g$214$15962 g$214$22776)))) '#f)) g$214$22760))) g$214$22756))) ((lambda (g$214$22794) (if (equal? (g$214$15990 g$214$22794) '()) (begin '#f '()) '#f)) g$214$22756))) g$214$22753))) (g$214$21838 (lambda (g$214$22496 g$214$22497) (letrec ((g$214$22500 (lambda (g$214$22678) (list->vector (map (lambda (g$214$22680) ((lambda (g$214$22682) ((lambda (g$214$22684) (if (if g$214$22684 (begin '#f (apply (lambda (g$214$22686 g$214$22687) '#t) g$214$22684)) '#f) (apply (lambda (g$214$22690 g$214$22691) (list 'mutable g$214$22690)) g$214$22684) ((lambda (g$214$22694) ((lambda (g$214$22696) (if (if g$214$22696 (begin '#f (apply (lambda (g$214$22698 g$214$22699) '#t) g$214$22696)) '#f) (apply (lambda (g$214$22702 g$214$22703) (list 'immutable g$214$22702)) g$214$22696) ((lambda (g$214$22706) ((lambda (g$214$22708) (if (if g$214$22708 (begin '#f (apply (lambda (g$214$22710) '#t) g$214$22708)) '#f) (apply (lambda (g$214$22712) (list 'immutable g$214$22712)) g$214$22708) (g$214$16703 '#f '"invalid syntax" g$214$22706))) ((lambda (g$214$22714) (list g$214$22714)) g$214$22706))) g$214$22694))) ((lambda (g$214$22716) (if (g$214$15954 g$214$22716) (begin '#f ((lambda (g$214$22718) (if g$214$22718 (begin '#f ((lambda (g$214$22720) (if g$214$22720 (begin '#f (append g$214$22718 g$214$22720)) '#f)) ((lambda (g$214$22722) (if (g$214$15954 g$214$22722) (begin '#f ((lambda (g$214$22724) (if g$214$22724 (begin '#f ((lambda (g$214$22726) (if g$214$22726 (begin '#f (append g$214$22724 g$214$22726)) '#f)) ((lambda (g$214$22728) (list g$214$22728)) (g$214$15964 g$214$22722)))) '#f)) ((lambda (g$214$22730) (list g$214$22730)) (g$214$15962 g$214$22722)))) '#f)) (g$214$15964 g$214$22716)))) '#f)) ((lambda (g$214$22732) (if (g$214$15968 g$214$22732) (if (g$214$15976 g$214$22732 (g$214$16454 'immutable)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$22716)))) '#f)) g$214$22694))) g$214$22682))) ((lambda (g$214$22734) (if (g$214$15954 g$214$22734) (begin '#f ((lambda (g$214$22736) (if g$214$22736 (begin '#f ((lambda (g$214$22738) (if g$214$22738 (begin '#f (append g$214$22736 g$214$22738)) '#f)) ((lambda (g$214$22740) (if (g$214$15954 g$214$22740) (begin '#f ((lambda (g$214$22742) (if g$214$22742 (begin '#f ((lambda (g$214$22744) (if g$214$22744 (begin '#f (append g$214$22742 g$214$22744)) '#f)) ((lambda (g$214$22746) (list g$214$22746)) (g$214$15964 g$214$22740)))) '#f)) ((lambda (g$214$22748) (list g$214$22748)) (g$214$15962 g$214$22740)))) '#f)) (g$214$15964 g$214$22734)))) '#f)) ((lambda (g$214$22750) (if (g$214$15968 g$214$22750) (if (g$214$15976 g$214$22750 (g$214$16454 'mutable)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$22734)))) '#f)) g$214$22682))) g$214$22680)) g$214$22678))))) ((lambda (g$214$22502 g$214$22503 g$214$22504 g$214$22505 g$214$22506) (g$214$16492 (list 'make-record-type-descriptor (list 'quote g$214$22496) g$214$22502 g$214$22503 g$214$22504 g$214$22505 g$214$22506))) ((lambda (g$214$22512) ((lambda (g$214$22514) (if (if g$214$22514 (begin '#f (apply (lambda (g$214$22516) '#t) g$214$22514)) '#f) (apply (lambda (g$214$22518) (list 'record-type-descriptor g$214$22518)) g$214$22514) ((lambda (g$214$22520) ((lambda (g$214$22522) (if (if g$214$22522 (begin '#f (apply (lambda () '#t) g$214$22522)) '#f) (apply (lambda () '#f) g$214$22522) (g$214$16703 '#f '"invalid syntax" g$214$22520))) ((lambda (g$214$22524) '()) g$214$22520))) g$214$22512))) ((lambda (g$214$22526) (if (g$214$15954 g$214$22526) (begin '#f ((lambda (g$214$22528) (if g$214$22528 (begin '#f ((lambda (g$214$22530) (if g$214$22530 (begin '#f (append g$214$22528 g$214$22530)) '#f)) ((lambda (g$214$22532) (if (g$214$15954 g$214$22532) (begin '#f ((lambda (g$214$22534) (if g$214$22534 (begin '#f ((lambda (g$214$22536) (if g$214$22536 (begin '#f (append g$214$22534 g$214$22536)) '#f)) ((lambda (g$214$22538) (if (equal? (g$214$15990 g$214$22538) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$22532)))) '#f)) ((lambda (g$214$22540) (list g$214$22540)) (g$214$15962 g$214$22532)))) '#f)) (g$214$15964 g$214$22526)))) '#f)) ((lambda (g$214$22542) '()) (g$214$15962 g$214$22526)))) '#f)) g$214$22512))) (g$214$21836 'parent g$214$22497)) ((lambda (g$214$22544) ((lambda (g$214$22546) (if (if g$214$22546 (begin '#f (apply (lambda () '#t) g$214$22546)) '#f) (apply (lambda () (list 'quote (gensym))) g$214$22546) ((lambda (g$214$22548) ((lambda (g$214$22550) (if (if g$214$22550 (begin '#f (apply (lambda (g$214$22552) '#t) g$214$22550)) '#f) (apply (lambda (g$214$22554) (list 'quote g$214$22554)) g$214$22550) ((lambda (g$214$22556) ((lambda (g$214$22558) (if (if g$214$22558 (begin '#f (apply (lambda () '#t) g$214$22558)) '#f) (apply (lambda () '#f) g$214$22558) (g$214$16703 '#f '"invalid syntax" g$214$22556))) ((lambda (g$214$22560) '()) g$214$22556))) g$214$22548))) ((lambda (g$214$22562) (if (g$214$15954 g$214$22562) (begin '#f ((lambda (g$214$22564) (if g$214$22564 (begin '#f ((lambda (g$214$22566) (if g$214$22566 (begin '#f (append g$214$22564 g$214$22566)) '#f)) ((lambda (g$214$22568) (if (g$214$15954 g$214$22568) (begin '#f ((lambda (g$214$22570) (if g$214$22570 (begin '#f ((lambda (g$214$22572) (if g$214$22572 (begin '#f (append g$214$22570 g$214$22572)) '#f)) ((lambda (g$214$22574) (if (equal? (g$214$15990 g$214$22574) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$22568)))) '#f)) ((lambda (g$214$22576) (list g$214$22576)) (g$214$15962 g$214$22568)))) '#f)) (g$214$15964 g$214$22562)))) '#f)) ((lambda (g$214$22578) '()) (g$214$15962 g$214$22562)))) '#f)) g$214$22548))) g$214$22544))) ((lambda (g$214$22580) (if (g$214$15954 g$214$22580) (begin '#f ((lambda (g$214$22582) (if g$214$22582 (begin '#f ((lambda (g$214$22584) (if g$214$22584 (begin '#f (append g$214$22582 g$214$22584)) '#f)) ((lambda (g$214$22586) (if (equal? (g$214$15990 g$214$22586) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$22580)))) '#f)) ((lambda (g$214$22588) '()) (g$214$15962 g$214$22580)))) '#f)) g$214$22544))) (g$214$21836 'nongenerative g$214$22497)) ((lambda (g$214$22590) ((lambda (g$214$22592) (if (if g$214$22592 (begin '#f (apply (lambda () '#t) g$214$22592)) '#f) (apply (lambda () '#t) g$214$22592) ((lambda (g$214$22594) ((lambda (g$214$22596) (if (if g$214$22596 (begin '#f (apply (lambda () '#t) g$214$22596)) '#f) (apply (lambda () '#f) g$214$22596) (g$214$16703 '#f '"invalid syntax" g$214$22594))) ((lambda (g$214$22598) '()) g$214$22594))) g$214$22590))) ((lambda (g$214$22600) (if (g$214$15954 g$214$22600) (begin '#f ((lambda (g$214$22602) (if g$214$22602 (begin '#f ((lambda (g$214$22604) (if g$214$22604 (begin '#f (append g$214$22602 g$214$22604)) '#f)) ((lambda (g$214$22606) (if (g$214$15954 g$214$22606) (begin '#f ((lambda (g$214$22608) (if g$214$22608 (begin '#f ((lambda (g$214$22610) (if g$214$22610 (begin '#f (append g$214$22608 g$214$22610)) '#f)) ((lambda (g$214$22612) (if (equal? (g$214$15990 g$214$22612) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$22606)))) '#f)) ((lambda (g$214$22614) (if (equal? (g$214$15990 g$214$22614) '#t) (begin '#f '()) '#f)) (g$214$15962 g$214$22606)))) '#f)) (g$214$15964 g$214$22600)))) '#f)) ((lambda (g$214$22616) '()) (g$214$15962 g$214$22600)))) '#f)) g$214$22590))) (g$214$21836 'sealed g$214$22497)) ((lambda (g$214$22618) ((lambda (g$214$22620) (if (if g$214$22620 (begin '#f (apply (lambda () '#t) g$214$22620)) '#f) (apply (lambda () '#t) g$214$22620) ((lambda (g$214$22622) ((lambda (g$214$22624) (if (if g$214$22624 (begin '#f (apply (lambda () '#t) g$214$22624)) '#f) (apply (lambda () '#f) g$214$22624) (g$214$16703 '#f '"invalid syntax" g$214$22622))) ((lambda (g$214$22626) '()) g$214$22622))) g$214$22618))) ((lambda (g$214$22628) (if (g$214$15954 g$214$22628) (begin '#f ((lambda (g$214$22630) (if g$214$22630 (begin '#f ((lambda (g$214$22632) (if g$214$22632 (begin '#f (append g$214$22630 g$214$22632)) '#f)) ((lambda (g$214$22634) (if (g$214$15954 g$214$22634) (begin '#f ((lambda (g$214$22636) (if g$214$22636 (begin '#f ((lambda (g$214$22638) (if g$214$22638 (begin '#f (append g$214$22636 g$214$22638)) '#f)) ((lambda (g$214$22640) (if (equal? (g$214$15990 g$214$22640) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$22634)))) '#f)) ((lambda (g$214$22642) (if (equal? (g$214$15990 g$214$22642) '#t) (begin '#f '()) '#f)) (g$214$15962 g$214$22634)))) '#f)) (g$214$15964 g$214$22628)))) '#f)) ((lambda (g$214$22644) '()) (g$214$15962 g$214$22628)))) '#f)) g$214$22618))) (g$214$21836 'opaque g$214$22497)) ((lambda (g$214$22646) ((lambda (g$214$22648) (if (if g$214$22648 (begin '#f (apply (lambda (g$214$22650) '#t) g$214$22648)) '#f) (apply (lambda (g$214$22652) (list 'quote (g$214$22500 g$214$22652))) g$214$22648) ((lambda (g$214$22654) ((lambda (g$214$22656) (if (if g$214$22656 (begin '#f (apply (lambda () '#t) g$214$22656)) '#f) (apply (lambda () ''#()) g$214$22656) (g$214$16703 '#f '"invalid syntax" g$214$22654))) ((lambda (g$214$22658) '()) g$214$22654))) g$214$22646))) ((lambda (g$214$22660) (if (g$214$15954 g$214$22660) (begin '#f ((lambda (g$214$22662) (if g$214$22662 (begin '#f ((lambda (g$214$22664) (if g$214$22664 (begin '#f (append g$214$22662 g$214$22664)) '#f)) ((letrec ((g$214$22666 (lambda (g$214$22668) (if (g$214$15954 g$214$22668) ((lambda (g$214$22670) (if g$214$22670 (begin '#f ((lambda (g$214$22672) (if g$214$22672 (begin '#f (map cons g$214$22670 g$214$22672)) '#f)) (g$214$22666 (g$214$15964 g$214$22668)))) '#f)) ((lambda (g$214$22674) (list g$214$22674)) (g$214$15962 g$214$22668))) (if (g$214$15958 g$214$22668) (list (begin 'field-spec* '())) '#f))))) g$214$22666) (g$214$15964 g$214$22660)))) '#f)) ((lambda (g$214$22676) '()) (g$214$15962 g$214$22660)))) '#f)) g$214$22646))) (g$214$21836 'fields g$214$22497)))))) (g$214$21840 (lambda (g$214$22456 g$214$22457 g$214$22458) ((lambda (g$214$22462) (list 'make-record-constructor-descriptor g$214$22457 g$214$22462 g$214$22458)) ((lambda (g$214$22464) ((lambda (g$214$22466) (if (if g$214$22466 (begin '#f (apply (lambda (g$214$22468) '#t) g$214$22466)) '#f) (apply (lambda (g$214$22470) (list 'record-constructor-descriptor g$214$22470)) g$214$22466) ((lambda (g$214$22472) ((lambda (g$214$22474) (if (if g$214$22474 (begin '#f (apply (lambda () '#t) g$214$22474)) '#f) (apply (lambda () '#f) g$214$22474) (g$214$16703 '#f '"invalid syntax" g$214$22472))) ((lambda (g$214$22476) '()) g$214$22472))) g$214$22464))) ((lambda (g$214$22478) (if (g$214$15954 g$214$22478) (begin '#f ((lambda (g$214$22480) (if g$214$22480 (begin '#f ((lambda (g$214$22482) (if g$214$22482 (begin '#f (append g$214$22480 g$214$22482)) '#f)) ((lambda (g$214$22484) (if (g$214$15954 g$214$22484) (begin '#f ((lambda (g$214$22486) (if g$214$22486 (begin '#f ((lambda (g$214$22488) (if g$214$22488 (begin '#f (append g$214$22486 g$214$22488)) '#f)) ((lambda (g$214$22490) (if (equal? (g$214$15990 g$214$22490) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$22484)))) '#f)) ((lambda (g$214$22492) (list g$214$22492)) (g$214$15962 g$214$22484)))) '#f)) (g$214$15964 g$214$22478)))) '#f)) ((lambda (g$214$22494) '()) (g$214$15962 g$214$22478)))) '#f)) g$214$22464))) (g$214$21836 'parent g$214$22456))))) (g$214$21842 (lambda (g$214$22422) ((lambda (g$214$22424) ((lambda (g$214$22426) (if (if g$214$22426 (begin '#f (apply (lambda (g$214$22428) '#t) g$214$22426)) '#f) (apply (lambda (g$214$22430) g$214$22430) g$214$22426) ((lambda (g$214$22432) ((lambda (g$214$22434) (if (if g$214$22434 (begin '#f (apply (lambda () '#t) g$214$22434)) '#f) (apply (lambda () '#f) g$214$22434) (g$214$16703 '#f '"invalid syntax" g$214$22432))) ((lambda (g$214$22436) '()) g$214$22432))) g$214$22424))) ((lambda (g$214$22438) (if (g$214$15954 g$214$22438) (begin '#f ((lambda (g$214$22440) (if g$214$22440 (begin '#f ((lambda (g$214$22442) (if g$214$22442 (begin '#f (append g$214$22440 g$214$22442)) '#f)) ((lambda (g$214$22444) (if (g$214$15954 g$214$22444) (begin '#f ((lambda (g$214$22446) (if g$214$22446 (begin '#f ((lambda (g$214$22448) (if g$214$22448 (begin '#f (append g$214$22446 g$214$22448)) '#f)) ((lambda (g$214$22450) (if (equal? (g$214$15990 g$214$22450) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$22444)))) '#f)) ((lambda (g$214$22452) (list g$214$22452)) (g$214$15962 g$214$22444)))) '#f)) (g$214$15964 g$214$22438)))) '#f)) ((lambda (g$214$22454) '()) (g$214$15962 g$214$22438)))) '#f)) g$214$22424))) (g$214$21836 'protocol g$214$22422)))) (g$214$21844 (lambda (g$214$22362) ((lambda (g$214$22364) ((lambda (g$214$22366) (if (if g$214$22366 (begin '#f (apply (lambda () '#t) g$214$22366)) '#f) (apply (lambda () '()) g$214$22366) ((lambda (g$214$22368) ((lambda (g$214$22370) (if (if g$214$22370 (begin '#f (apply (lambda (g$214$22372) '#t) g$214$22370)) '#f) (apply (lambda (g$214$22374) g$214$22374) g$214$22370) ((lambda (g$214$22376) ((lambda (g$214$22378) (if (if g$214$22378 (begin '#f (apply (lambda (g$214$22380) '#t) g$214$22378)) '#f) (apply (lambda (g$214$22382) (g$214$21844 g$214$22382)) g$214$22378) (g$214$16703 '#f '"invalid syntax" g$214$22376))) ((lambda (g$214$22384) (if (g$214$15954 g$214$22384) (begin '#f ((lambda (g$214$22386) (if g$214$22386 (begin '#f ((lambda (g$214$22388) (if g$214$22388 (begin '#f (append g$214$22386 g$214$22388)) '#f)) ((lambda (g$214$22390) (list g$214$22390)) (g$214$15964 g$214$22384)))) '#f)) ((lambda (g$214$22392) '()) (g$214$15962 g$214$22384)))) '#f)) g$214$22376))) g$214$22368))) ((lambda (g$214$22394) (if (g$214$15954 g$214$22394) (begin '#f ((lambda (g$214$22396) (if g$214$22396 (begin '#f ((lambda (g$214$22398) (if g$214$22398 (begin '#f (append g$214$22396 g$214$22398)) '#f)) ((lambda (g$214$22400) '()) (g$214$15964 g$214$22394)))) '#f)) ((lambda (g$214$22402) (if (g$214$15954 g$214$22402) (begin '#f ((lambda (g$214$22404) (if g$214$22404 (begin '#f ((lambda (g$214$22406) (if g$214$22406 (begin '#f (append g$214$22404 g$214$22406)) '#f)) ((letrec ((g$214$22408 (lambda (g$214$22410) (if (g$214$15954 g$214$22410) ((lambda (g$214$22412) (if g$214$22412 (begin '#f ((lambda (g$214$22414) (if g$214$22414 (begin '#f (map cons g$214$22412 g$214$22414)) '#f)) (g$214$22408 (g$214$15964 g$214$22410)))) '#f)) ((lambda (g$214$22416) (list g$214$22416)) (g$214$15962 g$214$22410))) (if (g$214$15958 g$214$22410) (list (begin 'f* '())) '#f))))) g$214$22408) (g$214$15964 g$214$22402)))) '#f)) ((lambda (g$214$22418) (if (g$214$15968 g$214$22418) (if (g$214$15976 g$214$22418 (g$214$16454 'fields)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$22402)))) '#f)) (g$214$15962 g$214$22394)))) '#f)) g$214$22368))) g$214$22364))) ((lambda (g$214$22420) (if (equal? (g$214$15990 g$214$22420) '()) (begin '#f '()) '#f)) g$214$22364))) g$214$22362))) (g$214$21846 (lambda (g$214$22304) ((letrec ((g$214$22306 (lambda (g$214$22308 g$214$22309) ((lambda (g$214$22312) ((lambda (g$214$22314) (if (if g$214$22314 (begin '#f (apply (lambda () '#t) g$214$22314)) '#f) (apply (lambda () '()) g$214$22314) ((lambda (g$214$22316) ((lambda (g$214$22318) (if (if g$214$22318 (begin '#f (apply (lambda (g$214$22320) '#t) g$214$22318)) '#f) (apply (lambda (g$214$22322) (cons g$214$22309 (g$214$22306 g$214$22322 (+ g$214$22309 '1)))) g$214$22318) ((lambda (g$214$22324) ((lambda (g$214$22326) (if (if g$214$22326 (begin '#f (apply (lambda (g$214$22328) '#t) g$214$22326)) '#f) (apply (lambda (g$214$22330) (g$214$22306 g$214$22330 (+ g$214$22309 '1))) g$214$22326) (g$214$16703 '#f '"invalid syntax" g$214$22324))) ((lambda (g$214$22332) (if (g$214$15954 g$214$22332) (begin '#f ((lambda (g$214$22334) (if g$214$22334 (begin '#f ((lambda (g$214$22336) (if g$214$22336 (begin '#f (append g$214$22334 g$214$22336)) '#f)) ((lambda (g$214$22338) (list g$214$22338)) (g$214$15964 g$214$22332)))) '#f)) ((lambda (g$214$22340) '()) (g$214$15962 g$214$22332)))) '#f)) g$214$22324))) g$214$22316))) ((lambda (g$214$22342) (if (g$214$15954 g$214$22342) (begin '#f ((lambda (g$214$22344) (if g$214$22344 (begin '#f ((lambda (g$214$22346) (if g$214$22346 (begin '#f (append g$214$22344 g$214$22346)) '#f)) ((lambda (g$214$22348) (list g$214$22348)) (g$214$15964 g$214$22342)))) '#f)) ((lambda (g$214$22350) (if (g$214$15954 g$214$22350) (begin '#f ((lambda (g$214$22352) (if g$214$22352 (begin '#f ((lambda (g$214$22354) (if g$214$22354 (begin '#f (append g$214$22352 g$214$22354)) '#f)) ((lambda (g$214$22356) '()) (g$214$15964 g$214$22350)))) '#f)) ((lambda (g$214$22358) (if (g$214$15968 g$214$22358) (if (g$214$15976 g$214$22358 (g$214$16454 'mutable)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$22350)))) '#f)) (g$214$15962 g$214$22342)))) '#f)) g$214$22316))) g$214$22312))) ((lambda (g$214$22360) (if (equal? (g$214$15990 g$214$22360) '()) (begin '#f '()) '#f)) g$214$22312))) g$214$22308)))) g$214$22306) g$214$22304 '0))) (g$214$21848 (lambda (g$214$22168 g$214$22169) (letrec ((g$214$22172 (lambda (g$214$22302) (g$214$16707 g$214$22168 (string->symbol (string-append (symbol->string (g$214$16709 g$214$22168)) '"-" (symbol->string (g$214$16709 g$214$22302)) '"-set!")))))) ((letrec ((g$214$22174 (lambda (g$214$22176) ((lambda (g$214$22178) ((lambda (g$214$22180) (if (if g$214$22180 (begin '#f (apply (lambda () '#t) g$214$22180)) '#f) (apply (lambda () '()) g$214$22180) ((lambda (g$214$22182) ((lambda (g$214$22184) (if (if g$214$22184 (begin '#f (apply (lambda (g$214$22186 g$214$22187 g$214$22188 g$214$22189) '#t) g$214$22184)) '#f) (apply (lambda (g$214$22194 g$214$22195 g$214$22196 g$214$22197) (cons g$214$22196 (g$214$22174 g$214$22197))) g$214$22184) ((lambda (g$214$22202) ((lambda (g$214$22204) (if (if g$214$22204 (begin '#f (apply (lambda (g$214$22206 g$214$22207) '#t) g$214$22204)) '#f) (apply (lambda (g$214$22210 g$214$22211) (cons (g$214$22172 g$214$22210) (g$214$22174 g$214$22211))) g$214$22204) ((lambda (g$214$22214) ((lambda (g$214$22216) (if (if g$214$22216 (begin '#f (apply (lambda (g$214$22218) '#t) g$214$22216)) '#f) (apply (lambda (g$214$22220) (g$214$22174 g$214$22220)) g$214$22216) (g$214$16703 '#f '"invalid syntax" g$214$22214))) ((lambda (g$214$22222) (if (g$214$15954 g$214$22222) (begin '#f ((lambda (g$214$22224) (if g$214$22224 (begin '#f ((lambda (g$214$22226) (if g$214$22226 (begin '#f (append g$214$22224 g$214$22226)) '#f)) ((lambda (g$214$22228) (list g$214$22228)) (g$214$15964 g$214$22222)))) '#f)) ((lambda (g$214$22230) '()) (g$214$15962 g$214$22222)))) '#f)) g$214$22214))) g$214$22202))) ((lambda (g$214$22232) (if (g$214$15954 g$214$22232) (begin '#f ((lambda (g$214$22234) (if g$214$22234 (begin '#f ((lambda (g$214$22236) (if g$214$22236 (begin '#f (append g$214$22234 g$214$22236)) '#f)) ((lambda (g$214$22238) (list g$214$22238)) (g$214$15964 g$214$22232)))) '#f)) ((lambda (g$214$22240) (if (g$214$15954 g$214$22240) (begin '#f ((lambda (g$214$22242) (if g$214$22242 (begin '#f ((lambda (g$214$22244) (if g$214$22244 (begin '#f (append g$214$22242 g$214$22244)) '#f)) ((lambda (g$214$22246) (if (g$214$15954 g$214$22246) (begin '#f ((lambda (g$214$22248) (if g$214$22248 (begin '#f ((lambda (g$214$22250) (if g$214$22250 (begin '#f (append g$214$22248 g$214$22250)) '#f)) ((lambda (g$214$22252) (if (equal? (g$214$15990 g$214$22252) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$22246)))) '#f)) ((lambda (g$214$22254) (list g$214$22254)) (g$214$15962 g$214$22246)))) '#f)) (g$214$15964 g$214$22240)))) '#f)) ((lambda (g$214$22256) (if (g$214$15968 g$214$22256) (if (g$214$15976 g$214$22256 (g$214$16454 'mutable)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$22240)))) '#f)) (g$214$15962 g$214$22232)))) '#f)) g$214$22202))) g$214$22182))) ((lambda (g$214$22258) (if (g$214$15954 g$214$22258) (begin '#f ((lambda (g$214$22260) (if g$214$22260 (begin '#f ((lambda (g$214$22262) (if g$214$22262 (begin '#f (append g$214$22260 g$214$22262)) '#f)) ((lambda (g$214$22264) (list g$214$22264)) (g$214$15964 g$214$22258)))) '#f)) ((lambda (g$214$22266) (if (g$214$15954 g$214$22266) (begin '#f ((lambda (g$214$22268) (if g$214$22268 (begin '#f ((lambda (g$214$22270) (if g$214$22270 (begin '#f (append g$214$22268 g$214$22270)) '#f)) ((lambda (g$214$22272) (if (g$214$15954 g$214$22272) (begin '#f ((lambda (g$214$22274) (if g$214$22274 (begin '#f ((lambda (g$214$22276) (if g$214$22276 (begin '#f (append g$214$22274 g$214$22276)) '#f)) ((lambda (g$214$22278) (if (g$214$15954 g$214$22278) (begin '#f ((lambda (g$214$22280) (if g$214$22280 (begin '#f ((lambda (g$214$22282) (if g$214$22282 (begin '#f (append g$214$22280 g$214$22282)) '#f)) ((lambda (g$214$22284) (if (g$214$15954 g$214$22284) (begin '#f ((lambda (g$214$22286) (if g$214$22286 (begin '#f ((lambda (g$214$22288) (if g$214$22288 (begin '#f (append g$214$22286 g$214$22288)) '#f)) ((lambda (g$214$22290) (if (equal? (g$214$15990 g$214$22290) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$22284)))) '#f)) ((lambda (g$214$22292) (list g$214$22292)) (g$214$15962 g$214$22284)))) '#f)) (g$214$15964 g$214$22278)))) '#f)) ((lambda (g$214$22294) (list g$214$22294)) (g$214$15962 g$214$22278)))) '#f)) (g$214$15964 g$214$22272)))) '#f)) ((lambda (g$214$22296) (list g$214$22296)) (g$214$15962 g$214$22272)))) '#f)) (g$214$15964 g$214$22266)))) '#f)) ((lambda (g$214$22298) (if (g$214$15968 g$214$22298) (if (g$214$15976 g$214$22298 (g$214$16454 'mutable)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$22266)))) '#f)) (g$214$15962 g$214$22258)))) '#f)) g$214$22182))) g$214$22178))) ((lambda (g$214$22300) (if (equal? (g$214$15990 g$214$22300) '()) (begin '#f '()) '#f)) g$214$22178))) g$214$22176)))) g$214$22174) g$214$22169)))) (g$214$21850 (lambda (g$214$21998 g$214$21999) (letrec ((g$214$22002 (lambda (g$214$22166) (g$214$16707 g$214$21998 (string->symbol (string-append (symbol->string (g$214$16709 g$214$21998)) '"-" (symbol->string (g$214$16709 g$214$22166)))))))) (map (lambda (g$214$22004) ((lambda (g$214$22006) ((lambda (g$214$22008) (if (if g$214$22008 (begin '#f (apply (lambda (g$214$22010 g$214$22011 g$214$22012) (g$214$15968 g$214$22011)) g$214$22008)) '#f) (apply (lambda (g$214$22016 g$214$22017 g$214$22018) g$214$22017) g$214$22008) ((lambda (g$214$22022) ((lambda (g$214$22024) (if (if g$214$22024 (begin '#f (apply (lambda (g$214$22026 g$214$22027) (g$214$15968 g$214$22027)) g$214$22024)) '#f) (apply (lambda (g$214$22030 g$214$22031) g$214$22031) g$214$22024) ((lambda (g$214$22034) ((lambda (g$214$22036) (if (if g$214$22036 (begin '#f (apply (lambda (g$214$22038) (g$214$15968 g$214$22038)) g$214$22036)) '#f) (apply (lambda (g$214$22040) (g$214$22002 g$214$22040)) g$214$22036) ((lambda (g$214$22042) ((lambda (g$214$22044) (if (if g$214$22044 (begin '#f (apply (lambda (g$214$22046) (g$214$15968 g$214$22046)) g$214$22044)) '#f) (apply (lambda (g$214$22048) (g$214$22002 g$214$22048)) g$214$22044) ((lambda (g$214$22050) ((lambda (g$214$22052) (if (if g$214$22052 (begin '#f (apply (lambda (g$214$22054) (g$214$15968 g$214$22054)) g$214$22052)) '#f) (apply (lambda (g$214$22056) (g$214$22002 g$214$22056)) g$214$22052) ((lambda (g$214$22058) ((lambda (g$214$22060) (if (if g$214$22060 (begin '#f (apply (lambda (g$214$22062) '#t) g$214$22060)) '#f) (apply (lambda (g$214$22064) (g$214$16703 '#f '"invalid field spec" g$214$22004)) g$214$22060) (g$214$16703 '#f '"invalid syntax" g$214$22058))) ((lambda (g$214$22066) (list g$214$22066)) g$214$22058))) g$214$22050))) ((lambda (g$214$22068) (list g$214$22068)) g$214$22050))) g$214$22042))) ((lambda (g$214$22070) (if (g$214$15954 g$214$22070) (begin '#f ((lambda (g$214$22072) (if g$214$22072 (begin '#f ((lambda (g$214$22074) (if g$214$22074 (begin '#f (append g$214$22072 g$214$22074)) '#f)) ((lambda (g$214$22076) (if (g$214$15954 g$214$22076) (begin '#f ((lambda (g$214$22078) (if g$214$22078 (begin '#f ((lambda (g$214$22080) (if g$214$22080 (begin '#f (append g$214$22078 g$214$22080)) '#f)) ((lambda (g$214$22082) (if (equal? (g$214$15990 g$214$22082) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$22076)))) '#f)) ((lambda (g$214$22084) (list g$214$22084)) (g$214$15962 g$214$22076)))) '#f)) (g$214$15964 g$214$22070)))) '#f)) ((lambda (g$214$22086) (if (g$214$15968 g$214$22086) (if (g$214$15976 g$214$22086 (g$214$16454 'immutable)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$22070)))) '#f)) g$214$22042))) g$214$22034))) ((lambda (g$214$22088) (if (g$214$15954 g$214$22088) (begin '#f ((lambda (g$214$22090) (if g$214$22090 (begin '#f ((lambda (g$214$22092) (if g$214$22092 (begin '#f (append g$214$22090 g$214$22092)) '#f)) ((lambda (g$214$22094) (if (g$214$15954 g$214$22094) (begin '#f ((lambda (g$214$22096) (if g$214$22096 (begin '#f ((lambda (g$214$22098) (if g$214$22098 (begin '#f (append g$214$22096 g$214$22098)) '#f)) ((lambda (g$214$22100) (if (equal? (g$214$15990 g$214$22100) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$22094)))) '#f)) ((lambda (g$214$22102) (list g$214$22102)) (g$214$15962 g$214$22094)))) '#f)) (g$214$15964 g$214$22088)))) '#f)) ((lambda (g$214$22104) (if (g$214$15968 g$214$22104) (if (g$214$15976 g$214$22104 (g$214$16454 'mutable)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$22088)))) '#f)) g$214$22034))) g$214$22022))) ((lambda (g$214$22106) (if (g$214$15954 g$214$22106) (begin '#f ((lambda (g$214$22108) (if g$214$22108 (begin '#f ((lambda (g$214$22110) (if g$214$22110 (begin '#f (append g$214$22108 g$214$22110)) '#f)) ((lambda (g$214$22112) (if (g$214$15954 g$214$22112) (begin '#f ((lambda (g$214$22114) (if g$214$22114 (begin '#f ((lambda (g$214$22116) (if g$214$22116 (begin '#f (append g$214$22114 g$214$22116)) '#f)) ((lambda (g$214$22118) (if (g$214$15954 g$214$22118) (begin '#f ((lambda (g$214$22120) (if g$214$22120 (begin '#f ((lambda (g$214$22122) (if g$214$22122 (begin '#f (append g$214$22120 g$214$22122)) '#f)) ((lambda (g$214$22124) (if (equal? (g$214$15990 g$214$22124) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$22118)))) '#f)) ((lambda (g$214$22126) (list g$214$22126)) (g$214$15962 g$214$22118)))) '#f)) (g$214$15964 g$214$22112)))) '#f)) ((lambda (g$214$22128) (list g$214$22128)) (g$214$15962 g$214$22112)))) '#f)) (g$214$15964 g$214$22106)))) '#f)) ((lambda (g$214$22130) (if (g$214$15968 g$214$22130) (if (g$214$15976 g$214$22130 (g$214$16454 'immutable)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$22106)))) '#f)) g$214$22022))) g$214$22006))) ((lambda (g$214$22132) (if (g$214$15954 g$214$22132) (begin '#f ((lambda (g$214$22134) (if g$214$22134 (begin '#f ((lambda (g$214$22136) (if g$214$22136 (begin '#f (append g$214$22134 g$214$22136)) '#f)) ((lambda (g$214$22138) (if (g$214$15954 g$214$22138) (begin '#f ((lambda (g$214$22140) (if g$214$22140 (begin '#f ((lambda (g$214$22142) (if g$214$22142 (begin '#f (append g$214$22140 g$214$22142)) '#f)) ((lambda (g$214$22144) (if (g$214$15954 g$214$22144) (begin '#f ((lambda (g$214$22146) (if g$214$22146 (begin '#f ((lambda (g$214$22148) (if g$214$22148 (begin '#f (append g$214$22146 g$214$22148)) '#f)) ((lambda (g$214$22150) (if (g$214$15954 g$214$22150) (begin '#f ((lambda (g$214$22152) (if g$214$22152 (begin '#f ((lambda (g$214$22154) (if g$214$22154 (begin '#f (append g$214$22152 g$214$22154)) '#f)) ((lambda (g$214$22156) (if (equal? (g$214$15990 g$214$22156) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$22150)))) '#f)) ((lambda (g$214$22158) (list g$214$22158)) (g$214$15962 g$214$22150)))) '#f)) (g$214$15964 g$214$22144)))) '#f)) ((lambda (g$214$22160) (list g$214$22160)) (g$214$15962 g$214$22144)))) '#f)) (g$214$15964 g$214$22138)))) '#f)) ((lambda (g$214$22162) (list g$214$22162)) (g$214$15962 g$214$22138)))) '#f)) (g$214$15964 g$214$22132)))) '#f)) ((lambda (g$214$22164) (if (g$214$15968 g$214$22164) (if (g$214$15976 g$214$22164 (g$214$16454 'mutable)) (begin '#f '()) '#f) '#f)) (g$214$15962 g$214$22132)))) '#f)) g$214$22006))) g$214$22004)) g$214$21999)))) (g$214$21852 (lambda (g$214$21990) ((letrec ((g$214$21992 (lambda (g$214$21994 g$214$21995) (if (null? g$214$21994) '() (cons g$214$21995 (g$214$21992 (cdr g$214$21994) (+ g$214$21995 '1))))))) g$214$21992) g$214$21990 '0))) (g$214$21854 (lambda (g$214$21950 g$214$21951) ((lambda (g$214$21954) ((lambda (g$214$21956) ((lambda (g$214$21958) ((lambda (g$214$21960) ((lambda (g$214$21962) ((lambda (g$214$21964) ((lambda (g$214$21966) ((lambda (g$214$21968) ((lambda (g$214$21970) ((lambda (g$214$21972) ((lambda (g$214$21974) ((lambda (g$214$21976) ((lambda (g$214$21978) ((lambda (g$214$21980) ((lambda () (g$214$16492 (cons 'begin (cons (list 'define g$214$21956 g$214$21976) (cons (list 'define g$214$21960 g$214$21980) (cons (list 'define g$214$21958 g$214$21978) (cons (list 'define-syntax g$214$21954 (list 'list ''$rtd (list 'syntax g$214$21956) (list 'syntax g$214$21958))) (cons (list 'define g$214$21974 (list 'record-predicate g$214$21956)) (cons (list 'define g$214$21962 (list 'record-constructor g$214$21958)) (append (map (lambda (g$214$21982 g$214$21983) (list 'define g$214$21982 (list 'record-accessor g$214$21956 g$214$21983))) g$214$21968 g$214$21966) (map (lambda (g$214$21986 g$214$21987) (list 'define g$214$21986 (list 'record-mutator g$214$21956 g$214$21987))) g$214$21970 g$214$21972))))))))))))) (g$214$21842 g$214$21951))) (g$214$21840 g$214$21951 g$214$21956 g$214$21960))) (g$214$21838 g$214$21954 g$214$21951))) (g$214$21834 g$214$21950))) (g$214$21846 g$214$21964))) (g$214$21848 g$214$21954 g$214$21964))) (g$214$21850 g$214$21954 g$214$21964))) (g$214$21852 g$214$21964))) (g$214$21844 g$214$21951))) (g$214$21832 g$214$21950))) (gensym))) (gensym))) (gensym))) (g$214$21830 g$214$21950)))) (g$214$21856 (lambda (g$214$21896 g$214$21897) (letrec ((g$214$21900 (map g$214$16492 '(fields parent parent-rtd protocol sealed opaque nongenerative))) (g$214$21902 (lambda (g$214$21944 g$214$21945) (if (pair? g$214$21945) (begin '#f ((lambda (g$214$21948) (if g$214$21948 g$214$21948 (begin '#f (g$214$21902 g$214$21944 (cdr g$214$21945))))) (g$214$15976 g$214$21944 (car g$214$21945)))) '#f)))) ((letrec ((g$214$21904 (lambda (g$214$21906 g$214$21907) (if (null? g$214$21906) (void) ((lambda (g$214$21910) ((lambda (g$214$21912) (if (if g$214$21912 (begin '#f (apply (lambda (g$214$21914 g$214$21915) '#t) g$214$21912)) '#f) (apply (lambda (g$214$21918 g$214$21919) (if ((lambda (g$214$21922) (if g$214$21922 g$214$21922 (begin '#f (not (g$214$21902 g$214$21918 g$214$21900))))) (not (g$214$15968 g$214$21918))) (g$214$16703 '#f '"not a valid define-record-type keyword" g$214$21918) (if (g$214$15982 g$214$21918 g$214$21907) (g$214$16703 '#f '"duplicate use of keyword " g$214$21896 g$214$21918) (g$214$21904 (cdr g$214$21906) (cons g$214$21918 g$214$21907))))) g$214$21912) ((lambda (g$214$21924) ((lambda (g$214$21926) (if (if g$214$21926 (begin '#f (apply (lambda (g$214$21928) '#t) g$214$21926)) '#f) (apply (lambda (g$214$21930) (g$214$16703 '#f '"malformed define-record-type clause" g$214$21930)) g$214$21926) (g$214$16703 '#f '"invalid syntax" g$214$21924))) ((lambda (g$214$21932) (list g$214$21932)) g$214$21924))) g$214$21910))) ((lambda (g$214$21934) (if (g$214$15954 g$214$21934) (begin '#f ((lambda (g$214$21936) (if g$214$21936 (begin '#f ((lambda (g$214$21938) (if g$214$21938 (begin '#f (append g$214$21936 g$214$21938)) '#f)) ((lambda (g$214$21940) (list g$214$21940)) (g$214$15964 g$214$21934)))) '#f)) ((lambda (g$214$21942) (list g$214$21942)) (g$214$15962 g$214$21934)))) '#f)) g$214$21910))) (car g$214$21906)))))) g$214$21904) g$214$21897 '()))))) ((lambda (g$214$21858) ((lambda (g$214$21860) (if (if g$214$21860 (begin '#f (apply (lambda (g$214$21862 g$214$21863) '#t) g$214$21860)) '#f) (apply (lambda (g$214$21866 g$214$21867) (begin (g$214$21856 g$214$21826 g$214$21867) (g$214$21854 g$214$21866 g$214$21867))) g$214$21860) (g$214$16703 '#f '"invalid syntax" g$214$21858))) ((lambda (g$214$21870) (if (g$214$15954 g$214$21870) (begin '#f ((lambda (g$214$21872) (if g$214$21872 (begin '#f ((lambda (g$214$21874) (if g$214$21874 (begin '#f (append g$214$21872 g$214$21874)) '#f)) ((lambda (g$214$21876) (if (g$214$15954 g$214$21876) (begin '#f ((lambda (g$214$21878) (if g$214$21878 (begin '#f ((lambda (g$214$21880) (if g$214$21880 (begin '#f (append g$214$21878 g$214$21880)) '#f)) ((letrec ((g$214$21882 (lambda (g$214$21884) (if (g$214$15954 g$214$21884) ((lambda (g$214$21886) (if g$214$21886 (begin '#f ((lambda (g$214$21888) (if g$214$21888 (begin '#f (map cons g$214$21886 g$214$21888)) '#f)) (g$214$21882 (g$214$15964 g$214$21884)))) '#f)) ((lambda (g$214$21890) (list g$214$21890)) (g$214$15962 g$214$21884))) (if (g$214$15958 g$214$21884) (list (begin 'clause* '())) '#f))))) g$214$21882) (g$214$15964 g$214$21876)))) '#f)) ((lambda (g$214$21892) (list g$214$21892)) (g$214$15962 g$214$21876)))) '#f)) (g$214$15964 g$214$21870)))) '#f)) ((lambda (g$214$21894) '()) (g$214$15962 g$214$21870)))) '#f)) g$214$21858))) g$214$21826)))) (g$214$16550 (lambda (g$214$22964) (letrec ((g$214$22966 (lambda (g$214$23078 g$214$23079) (g$214$16707 g$214$23078 (string->symbol (string-append (symbol->string (g$214$16709 g$214$23078)) g$214$23079)))))) ((lambda (g$214$22968) ((lambda (g$214$22970) (if (if g$214$22970 (begin '#f (apply (lambda (g$214$22972 g$214$22973 g$214$22974 g$214$22975 g$214$22976 g$214$22977 g$214$22978) (if (g$214$15968 g$214$22973) (if (g$214$15968 g$214$22974) (if (g$214$15968 g$214$22975) (if (g$214$15968 g$214$22976) (if (for-all g$214$15968 g$214$22977) (begin '#f (for-all g$214$15968 g$214$22978)) '#f) '#f) '#f) '#f) '#f)) g$214$22970)) '#f) (apply (lambda (g$214$22986 g$214$22987 g$214$22988 g$214$22989 g$214$22990 g$214$22991 g$214$22992) ((lambda (g$214$23000) (g$214$16492 (cons 'begin (cons (cons 'define-record-type (cons (list g$214$22987 g$214$22989 (gensym)) (cons (list 'parent g$214$22988) (cons (cons 'fields (map (lambda (g$214$23002 g$214$23003) (list 'immutable g$214$23002 g$214$23003)) g$214$22991 g$214$23000)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define g$214$22990 (list 'condition-predicate (list 'record-type-descriptor g$214$22987))) (map (lambda (g$214$23006 g$214$23007) (list 'define g$214$23006 (list 'condition-accessor (list 'record-type-descriptor g$214$22987) g$214$23007))) g$214$22992 g$214$23000)))))) (map (lambda (g$214$23010) (gensym)) g$214$22992))) g$214$22970) (g$214$16703 '#f '"invalid syntax" g$214$22968))) ((lambda (g$214$23012) (if (g$214$15954 g$214$23012) (begin '#f ((lambda (g$214$23014) (if g$214$23014 (begin '#f ((lambda (g$214$23016) (if g$214$23016 (begin '#f (append g$214$23014 g$214$23016)) '#f)) ((lambda (g$214$23018) (if (g$214$15954 g$214$23018) (begin '#f ((lambda (g$214$23020) (if g$214$23020 (begin '#f ((lambda (g$214$23022) (if g$214$23022 (begin '#f (append g$214$23020 g$214$23022)) '#f)) ((lambda (g$214$23024) (if (g$214$15954 g$214$23024) (begin '#f ((lambda (g$214$23026) (if g$214$23026 (begin '#f ((lambda (g$214$23028) (if g$214$23028 (begin '#f (append g$214$23026 g$214$23028)) '#f)) ((lambda (g$214$23030) (if (g$214$15954 g$214$23030) (begin '#f ((lambda (g$214$23032) (if g$214$23032 (begin '#f ((lambda (g$214$23034) (if g$214$23034 (begin '#f (append g$214$23032 g$214$23034)) '#f)) ((lambda (g$214$23036) (if (g$214$15954 g$214$23036) (begin '#f ((lambda (g$214$23038) (if g$214$23038 (begin '#f ((lambda (g$214$23040) (if g$214$23040 (begin '#f (append g$214$23038 g$214$23040)) '#f)) ((letrec ((g$214$23042 (lambda (g$214$23044) (if (g$214$15954 g$214$23044) ((lambda (g$214$23046) (if g$214$23046 (begin '#f ((lambda (g$214$23048) (if g$214$23048 (begin '#f (map cons g$214$23046 g$214$23048)) '#f)) (g$214$23042 (g$214$15964 g$214$23044)))) '#f)) ((lambda (g$214$23050) (if (g$214$15954 g$214$23050) (begin '#f ((lambda (g$214$23052) (if g$214$23052 (begin '#f ((lambda (g$214$23054) (if g$214$23054 (begin '#f (append g$214$23052 g$214$23054)) '#f)) ((lambda (g$214$23056) (if (g$214$15954 g$214$23056) (begin '#f ((lambda (g$214$23058) (if g$214$23058 (begin '#f ((lambda (g$214$23060) (if g$214$23060 (begin '#f (append g$214$23058 g$214$23060)) '#f)) ((lambda (g$214$23062) (if (equal? (g$214$15990 g$214$23062) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$23056)))) '#f)) ((lambda (g$214$23064) (list g$214$23064)) (g$214$15962 g$214$23056)))) '#f)) (g$214$15964 g$214$23050)))) '#f)) ((lambda (g$214$23066) (list g$214$23066)) (g$214$15962 g$214$23050)))) '#f)) (g$214$15962 g$214$23044))) (if (g$214$15958 g$214$23044) (list (begin 'field* '()) (begin 'accessor* '())) '#f))))) g$214$23042) (g$214$15964 g$214$23036)))) '#f)) ((lambda (g$214$23068) (list g$214$23068)) (g$214$15962 g$214$23036)))) '#f)) (g$214$15964 g$214$23030)))) '#f)) ((lambda (g$214$23070) (list g$214$23070)) (g$214$15962 g$214$23030)))) '#f)) (g$214$15964 g$214$23024)))) '#f)) ((lambda (g$214$23072) (list g$214$23072)) (g$214$15962 g$214$23024)))) '#f)) (g$214$15964 g$214$23018)))) '#f)) ((lambda (g$214$23074) (list g$214$23074)) (g$214$15962 g$214$23018)))) '#f)) (g$214$15964 g$214$23012)))) '#f)) ((lambda (g$214$23076) (list g$214$23076)) (g$214$15962 g$214$23012)))) '#f)) g$214$22968))) g$214$22964)))) (g$214$16552 (lambda (g$214$23082) (g$214$16703 '#f '"incorrect usage of auxiliary keyword" g$214$23082))) (g$214$16554 (lambda (g$214$23084 g$214$23085 g$214$23086) ((lambda (g$214$23090) ((lambda (g$214$23092) (if (if g$214$23092 (begin '#f (apply (lambda (g$214$23094 g$214$23095) '#t) g$214$23092)) '#f) (apply (lambda (g$214$23098 g$214$23099) (g$214$16604 (cons g$214$23098 g$214$23099) g$214$23085 g$214$23086)) g$214$23092) ((lambda (g$214$23102) ((lambda (g$214$23104) (if (if g$214$23104 (begin '#f (apply (lambda (g$214$23106 g$214$23107 g$214$23108 g$214$23109) '#t) g$214$23104)) '#f) (apply (lambda (g$214$23114 g$214$23115 g$214$23116 g$214$23117) ((lambda (g$214$23122 g$214$23123 g$214$23124 g$214$23125) (g$214$15850 '#f (append g$214$23122 g$214$23123) (append (g$214$16584 g$214$23114 g$214$23085 g$214$23086) (g$214$16584 g$214$23115 g$214$23085 g$214$23086)) (g$214$15850 '#f (list g$214$23125) (list (g$214$15848 '#f '() (g$214$15851 '#f (map (lambda (g$214$23130 g$214$23131 g$214$23132) (g$214$15850 '#f (list g$214$23130) (list (list g$214$23131)) (g$214$15851 '#f (list (list g$214$23131 g$214$23132) (list 'set! g$214$23132 g$214$23130))))) g$214$23124 g$214$23122 g$214$23123)))) (list '(primitive dynamic-wind) g$214$23125 (g$214$15848 '#f '() (g$214$16604 (cons g$214$23116 g$214$23117) g$214$23085 g$214$23086)) g$214$23125)))) (map (lambda (g$214$23136) (g$214$15878 'lhs)) g$214$23114) (map (lambda (g$214$23138) (g$214$15878 'rhs)) g$214$23114) (map (lambda (g$214$23140) (g$214$15878 't)) g$214$23114) (g$214$15878 'swap))) g$214$23104) (g$214$16703 '#f '"invalid syntax" g$214$23102))) ((lambda (g$214$23142) (if (g$214$15954 g$214$23142) (begin '#f ((lambda (g$214$23144) (if g$214$23144 (begin '#f ((lambda (g$214$23146) (if g$214$23146 (begin '#f (append g$214$23144 g$214$23146)) '#f)) ((lambda (g$214$23148) (if (g$214$15954 g$214$23148) (begin '#f ((lambda (g$214$23150) (if g$214$23150 (begin '#f ((lambda (g$214$23152) (if g$214$23152 (begin '#f (append g$214$23150 g$214$23152)) '#f)) ((lambda (g$214$23154) (if (g$214$15954 g$214$23154) (begin '#f ((lambda (g$214$23156) (if g$214$23156 (begin '#f ((lambda (g$214$23158) (if g$214$23158 (begin '#f (append g$214$23156 g$214$23158)) '#f)) ((letrec ((g$214$23160 (lambda (g$214$23162) (if (g$214$15954 g$214$23162) ((lambda (g$214$23164) (if g$214$23164 (begin '#f ((lambda (g$214$23166) (if g$214$23166 (begin '#f (map cons g$214$23164 g$214$23166)) '#f)) (g$214$23160 (g$214$15964 g$214$23162)))) '#f)) ((lambda (g$214$23168) (list g$214$23168)) (g$214$15962 g$214$23162))) (if (g$214$15958 g$214$23162) (list (begin 'b* '())) '#f))))) g$214$23160) (g$214$15964 g$214$23154)))) '#f)) ((lambda (g$214$23170) (list g$214$23170)) (g$214$15962 g$214$23154)))) '#f)) (g$214$15964 g$214$23148)))) '#f)) ((letrec ((g$214$23172 (lambda (g$214$23174) (if (g$214$15954 g$214$23174) ((lambda (g$214$23176) (if g$214$23176 (begin '#f ((lambda (g$214$23178) (if g$214$23178 (begin '#f (map cons g$214$23176 g$214$23178)) '#f)) (g$214$23172 (g$214$15964 g$214$23174)))) '#f)) ((lambda (g$214$23180) (if (g$214$15954 g$214$23180) (begin '#f ((lambda (g$214$23182) (if g$214$23182 (begin '#f ((lambda (g$214$23184) (if g$214$23184 (begin '#f (append g$214$23182 g$214$23184)) '#f)) ((lambda (g$214$23186) (if (g$214$15954 g$214$23186) (begin '#f ((lambda (g$214$23188) (if g$214$23188 (begin '#f ((lambda (g$214$23190) (if g$214$23190 (begin '#f (append g$214$23188 g$214$23190)) '#f)) ((lambda (g$214$23192) (if (equal? (g$214$15990 g$214$23192) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$23186)))) '#f)) ((lambda (g$214$23194) (list g$214$23194)) (g$214$15962 g$214$23186)))) '#f)) (g$214$15964 g$214$23180)))) '#f)) ((lambda (g$214$23196) (list g$214$23196)) (g$214$15962 g$214$23180)))) '#f)) (g$214$15962 g$214$23174))) (if (g$214$15958 g$214$23174) (list (begin 'olhs* '()) (begin 'orhs* '())) '#f))))) g$214$23172) (g$214$15962 g$214$23148)))) '#f)) (g$214$15964 g$214$23142)))) '#f)) ((lambda (g$214$23198) '()) (g$214$15962 g$214$23142)))) '#f)) g$214$23102))) g$214$23090))) ((lambda (g$214$23200) (if (g$214$15954 g$214$23200) (begin '#f ((lambda (g$214$23202) (if g$214$23202 (begin '#f ((lambda (g$214$23204) (if g$214$23204 (begin '#f (append g$214$23202 g$214$23204)) '#f)) ((lambda (g$214$23206) (if (g$214$15954 g$214$23206) (begin '#f ((lambda (g$214$23208) (if g$214$23208 (begin '#f ((lambda (g$214$23210) (if g$214$23210 (begin '#f (append g$214$23208 g$214$23210)) '#f)) ((lambda (g$214$23212) (if (g$214$15954 g$214$23212) (begin '#f ((lambda (g$214$23214) (if g$214$23214 (begin '#f ((lambda (g$214$23216) (if g$214$23216 (begin '#f (append g$214$23214 g$214$23216)) '#f)) ((letrec ((g$214$23218 (lambda (g$214$23220) (if (g$214$15954 g$214$23220) ((lambda (g$214$23222) (if g$214$23222 (begin '#f ((lambda (g$214$23224) (if g$214$23224 (begin '#f (map cons g$214$23222 g$214$23224)) '#f)) (g$214$23218 (g$214$15964 g$214$23220)))) '#f)) ((lambda (g$214$23226) (list g$214$23226)) (g$214$15962 g$214$23220))) (if (g$214$15958 g$214$23220) (list (begin 'b* '())) '#f))))) g$214$23218) (g$214$15964 g$214$23212)))) '#f)) ((lambda (g$214$23228) (list g$214$23228)) (g$214$15962 g$214$23212)))) '#f)) (g$214$15964 g$214$23206)))) '#f)) ((lambda (g$214$23230) (if (equal? (g$214$15990 g$214$23230) '()) (begin '#f '()) '#f)) (g$214$15962 g$214$23206)))) '#f)) (g$214$15964 g$214$23200)))) '#f)) ((lambda (g$214$23232) '()) (g$214$15962 g$214$23200)))) '#f)) g$214$23090))) g$214$23084))) (g$214$16556 (lambda (g$214$23234 g$214$23235 g$214$23236) ((lambda (g$214$23240) ((lambda (g$214$23242) (if (if g$214$23242 (begin '#f (apply (lambda (g$214$23244 g$214$23245) '#t) g$214$23242)) '#f) (apply (lambda (g$214$23248 g$214$23249) (cons 'foreign-call (cons (g$214$16588 g$214$23248 g$214$23235 g$214$23236) (g$214$16584 g$214$23249 g$214$23235 g$214$23236)))) g$214$23242) (g$214$16703 '#f '"invalid syntax" g$214$23240))) ((lambda (g$214$23252) (if (g$214$15954 g$214$23252) (begin '#f ((lambda (g$214$23254) (if g$214$23254 (begin '#f ((lambda (g$214$23256) (if g$214$23256 (begin '#f (append g$214$23254 g$214$23256)) '#f)) ((lambda (g$214$23258) (if (g$214$15954 g$214$23258) (begin '#f ((lambda (g$214$23260) (if g$214$23260 (begin '#f ((lambda (g$214$23262) (if g$214$23262 (begin '#f (append g$214$23260 g$214$23262)) '#f)) ((letrec ((g$214$23264 (lambda (g$214$23266) (if (g$214$15954 g$214$23266) ((lambda (g$214$23268) (if g$214$23268 (begin '#f ((lambda (g$214$23270) (if g$214$23270 (begin '#f (map cons g$214$23268 g$214$23270)) '#f)) (g$214$23264 (g$214$15964 g$214$23266)))) '#f)) ((lambda (g$214$23272) (list g$214$23272)) (g$214$15962 g$214$23266))) (if (g$214$15958 g$214$23266) (list (begin 'arg* '())) '#f))))) g$214$23264) (g$214$15964 g$214$23258)))) '#f)) ((lambda (g$214$23274) (list g$214$23274)) (g$214$15962 g$214$23258)))) '#f)) (g$214$15964 g$214$23252)))) '#f)) ((lambda (g$214$23276) '()) (g$214$15962 g$214$23252)))) '#f)) g$214$23240))) g$214$23234))) (g$214$16558 (lambda (g$214$23278 g$214$23279) (letrec ((g$214$23282 (lambda (g$214$23514 g$214$23515 g$214$23516) (if (null? g$214$23514) (values '() g$214$23516) (call-with-values (lambda () (g$214$23282 (cdr g$214$23514) g$214$23515 g$214$23516)) (lambda (g$214$23522 g$214$23523) ((lambda (g$214$23526 g$214$23527) (call-with-values (lambda () (g$214$23284 (car g$214$23514) g$214$23515 g$214$23526)) (lambda (g$214$23532 g$214$23533) ((lambda (g$214$23536 g$214$23537) (values (cons g$214$23537 g$214$23527) g$214$23536)) g$214$23533 g$214$23532)))) g$214$23523 g$214$23522)))))) (g$214$23284 (lambda (g$214$23286 g$214$23287 g$214$23288) ((lambda (g$214$23292) ((lambda (g$214$23294) (if (if g$214$23294 (begin '#f (apply (lambda (g$214$23296) (g$214$15968 g$214$23296)) g$214$23294)) '#f) (apply (lambda (g$214$23298) (if (g$214$15982 g$214$23286 g$214$23279) (values (vector 'free-id g$214$23286) g$214$23288) (if (g$214$15976 g$214$23286 (g$214$16454 '_)) (values '_ g$214$23288) (values 'any (cons (cons g$214$23286 g$214$23287) g$214$23288))))) g$214$23294) ((lambda (g$214$23300) ((lambda (g$214$23302) (if (if g$214$23302 (begin '#f (apply (lambda (g$214$23304 g$214$23305) (g$214$16562 g$214$23305)) g$214$23302)) '#f) (apply (lambda (g$214$23308 g$214$23309) (call-with-values (lambda () (g$214$23284 g$214$23308 (+ g$214$23287 '1) g$214$23288)) (lambda (g$214$23314 g$214$23315) ((lambda (g$214$23318 g$214$23319) (values (if (eq? g$214$23319 'any) 'each-any (vector 'each g$214$23319)) g$214$23318)) g$214$23315 g$214$23314)))) g$214$23302) ((lambda (g$214$23322) ((lambda (g$214$23324) (if (if g$214$23324 (begin '#f (apply (lambda (g$214$23326 g$214$23327 g$214$23328 g$214$23329) (g$214$16562 g$214$23327)) g$214$23324)) '#f) (apply (lambda (g$214$23334 g$214$23335 g$214$23336 g$214$23337) (call-with-values (lambda () (g$214$23284 g$214$23337 g$214$23287 g$214$23288)) (lambda (g$214$23344 g$214$23345) ((lambda (g$214$23348 g$214$23349) (call-with-values (lambda () (g$214$23282 g$214$23336 g$214$23287 g$214$23348)) (lambda (g$214$23354 g$214$23355) ((lambda (g$214$23358 g$214$23359) (call-with-values (lambda () (g$214$23284 g$214$23334 (+ g$214$23287 '1) g$214$23358)) (lambda (g$214$23364 g$214$23365) ((lambda (g$214$23368 g$214$23369) (values (vector 'each+ g$214$23369 (reverse g$214$23359) g$214$23349) g$214$23368)) g$214$23365 g$214$23364)))) g$214$23355 g$214$23354)))) g$214$23345 g$214$23344)))) g$214$23324) ((lambda (g$214$23372) ((lambda (g$214$23374) (if (if g$214$23374 (begin '#f (apply (lambda (g$214$23376 g$214$23377) '#t) g$214$23374)) '#f) (apply (lambda (g$214$23380 g$214$23381) (call-with-values (lambda () (g$214$23284 g$214$23381 g$214$23287 g$214$23288)) (lambda (g$214$23386 g$214$23387) ((lambda (g$214$23390 g$214$23391) (call-with-values (lambda () (g$214$23284 g$214$23380 g$214$23287 g$214$23390)) (lambda (g$214$23396 g$214$23397) ((lambda (g$214$23400 g$214$23401) (values (cons g$214$23401 g$214$23391) g$214$23400)) g$214$23397 g$214$23396)))) g$214$23387 g$214$23386)))) g$214$23374) ((lambda (g$214$23404) ((lambda (g$214$23406) (if (if g$214$23406 (begin '#f (apply (lambda () '#t) g$214$23406)) '#f) (apply (lambda () (values '() g$214$23288)) g$214$23406) ((lambda (g$214$23408) ((lambda (g$214$23410) (if (if g$214$23410 (begin '#f (apply (lambda (g$214$23412) (not (g$214$15920 g$214$23412))) g$214$23410)) '#f) (apply (lambda (g$214$23414) (call-with-values (lambda () (g$214$23284 g$214$23414 g$214$23287 g$214$23288)) (lambda (g$214$23418 g$214$23419) ((lambda (g$214$23422 g$214$23423) (values (vector 'vector g$214$23423) g$214$23422)) g$214$23419 g$214$23418)))) g$214$23410) ((lambda (g$214$23426) ((lambda (g$214$23428) (if (if g$214$23428 (begin '#f (apply (lambda (g$214$23430) '#t) g$214$23428)) '#f) (apply (lambda (g$214$23432) (values (vector 'atom (g$214$15990 g$214$23432)) g$214$23288)) g$214$23428) (g$214$16703 '#f '"invalid syntax" g$214$23426))) ((lambda (g$214$23434) (list g$214$23434)) g$214$23426))) g$214$23408))) ((lambda (g$214$23436) (if (g$214$15956 g$214$23436) (begin '#f ((letrec ((g$214$23438 (lambda (g$214$23440) (if (g$214$15954 g$214$23440) ((lambda (g$214$23442) (if g$214$23442 (begin '#f ((lambda (g$214$23444) (if g$214$23444 (begin '#f (map cons g$214$23442 g$214$23444)) '#f)) (g$214$23438 (g$214$15964 g$214$23440)))) '#f)) ((lambda (g$214$23446) (list g$214$23446)) (g$214$15962 g$214$23440))) (if (g$214$15958 g$214$23440) (list (begin 'p '())) '#f))))) g$214$23438) (g$214$15952 g$214$23436))) '#f)) g$214$23408))) g$214$23404))) ((lambda (g$214$23448) (if (equal? (g$214$15990 g$214$23448) '()) (begin '#f '()) '#f)) g$214$23404))) g$214$23372))) ((lambda (g$214$23450) (if (g$214$15954 g$214$23450) (begin '#f ((lambda (g$214$23452) (if g$214$23452 (begin '#f ((lambda (g$214$23454) (if g$214$23454 (begin '#f (append g$214$23452 g$214$23454)) '#f)) ((lambda (g$214$23456) (list g$214$23456)) (g$214$15964 g$214$23450)))) '#f)) ((lambda (g$214$23458) (list g$214$23458)) (g$214$15962 g$214$23450)))) '#f)) g$214$23372))) g$214$23322))) ((lambda (g$214$23460) (if (g$214$15954 g$214$23460) (begin '#f ((lambda (g$214$23462) (if g$214$23462 (begin '#f ((lambda (g$214$23464) (if g$214$23464 (begin '#f (append g$214$23462 g$214$23464)) '#f)) ((lambda (g$214$23466) (if (g$214$15954 g$214$23466) (begin '#f ((lambda (g$214$23468) (if g$214$23468 (begin '#f ((lambda (g$214$23470) (if g$214$23470 (begin '#f (append g$214$23468 g$214$23470)) '#f)) ((letrec ((g$214$23472 (lambda (g$214$23478) (if (g$214$15954 g$214$23478) ((lambda (g$214$23480) (if g$214$23480 (begin '#f ((lambda (g$214$23482) (if g$214$23482 (begin '#f (cons (map cons g$214$23480 (car g$214$23482)) (cdr g$214$23482))) '#f)) (g$214$23472 (g$214$15964 g$214$23478)))) '#f)) ((lambda (g$214$23484) (list g$214$23484)) (g$214$15962 g$214$23478))) ((lambda (g$214$23486) (if g$214$23486 (begin '#f (cons (list (begin 'ys '())) g$214$23486)) '#f)) ((lambda (g$214$23488) (list g$214$23488)) g$214$23478)))))) (lambda (g$214$23474) ((lambda (g$214$23476) (if g$214$23476 (begin '#f (append (car g$214$23476) (cdr g$214$23476))) '#f)) (g$214$23472 g$214$23474)))) (g$214$15964 g$214$23466)))) '#f)) ((lambda (g$214$23490) (list g$214$23490)) (g$214$15962 g$214$23466)))) '#f)) (g$214$15964 g$214$23460)))) '#f)) ((lambda (g$214$23492) (list g$214$23492)) (g$214$15962 g$214$23460)))) '#f)) g$214$23322))) g$214$23300))) ((lambda (g$214$23494) (if (g$214$15954 g$214$23494) (begin '#f ((lambda (g$214$23496) (if g$214$23496 (begin '#f ((lambda (g$214$23498) (if g$214$23498 (begin '#f (append g$214$23496 g$214$23498)) '#f)) ((lambda (g$214$23500) (if (g$214$15954 g$214$23500) (begin '#f ((lambda (g$214$23502) (if g$214$23502 (begin '#f ((lambda (g$214$23504) (if g$214$23504 (begin '#f (append g$214$23502 g$214$23504)) '#f)) ((lambda (g$214$23506) (if (equal? (g$214$15990 g$214$23506) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$23500)))) '#f)) ((lambda (g$214$23508) (list g$214$23508)) (g$214$15962 g$214$23500)))) '#f)) (g$214$15964 g$214$23494)))) '#f)) ((lambda (g$214$23510) (list g$214$23510)) (g$214$15962 g$214$23494)))) '#f)) g$214$23300))) g$214$23292))) ((lambda (g$214$23512) (list g$214$23512)) g$214$23292))) g$214$23286)))) (g$214$23284 g$214$23278 '0 '())))) (g$214$16560 (lambda (g$214$23540 g$214$23541) (letrec ((g$214$23544 (lambda (g$214$23708 g$214$23709 g$214$23710) (if (if (null? g$214$23709) (begin '#f (null? g$214$23710)) '#f) g$214$23708 (g$214$15944 g$214$23708 g$214$23709 g$214$23710)))) (g$214$23546 (lambda (g$214$23686 g$214$23687 g$214$23688 g$214$23689) (if (pair? g$214$23686) ((lambda (g$214$23694) (if g$214$23694 (begin '#f ((lambda (g$214$23696) (if g$214$23696 (begin '#f (cons g$214$23694 g$214$23696)) '#f)) (g$214$23546 (cdr g$214$23686) g$214$23687 g$214$23688 g$214$23689))) '#f)) (g$214$23558 (car g$214$23686) g$214$23687 g$214$23688 g$214$23689 '())) (if (null? g$214$23686) '() (if (g$214$15920 g$214$23686) (call-with-values (lambda () (g$214$15942 g$214$23688 g$214$23689 g$214$23686)) (lambda (g$214$23700 g$214$23701) ((lambda (g$214$23704 g$214$23705) (g$214$23546 (g$214$15922 g$214$23686) g$214$23687 g$214$23705 g$214$23704)) g$214$23701 g$214$23700))) (if (g$214$14916 g$214$23686) (g$214$23546 (g$214$14917 g$214$23686) g$214$23687 g$214$23688 g$214$23689) '#f)))))) (g$214$23548 (lambda (g$214$23637 g$214$23638 g$214$23639 g$214$23640 g$214$23641 g$214$23642 g$214$23643) ((letrec ((g$214$23651 (lambda (g$214$23653 g$214$23654 g$214$23655) (if (pair? g$214$23653) (call-with-values (lambda () (g$214$23651 (cdr g$214$23653) g$214$23654 g$214$23655)) (lambda (g$214$23662 g$214$23663 g$214$23664) ((lambda (g$214$23668 g$214$23669 g$214$23670) (if g$214$23668 (if (null? g$214$23669) ((lambda (g$214$23674) (if g$214$23674 (values (cons g$214$23674 g$214$23670) g$214$23669 g$214$23668) (values '#f '#f '#f))) (g$214$23558 (car g$214$23653) g$214$23638 g$214$23654 g$214$23655 '())) (values '() (cdr g$214$23669) (g$214$23558 (car g$214$23653) (car g$214$23669) g$214$23654 g$214$23655 g$214$23668))) (values '#f '#f '#f))) g$214$23664 g$214$23663 g$214$23662))) (if (g$214$15920 g$214$23653) (call-with-values (lambda () (g$214$15942 g$214$23654 g$214$23655 g$214$23653)) (lambda (g$214$23678 g$214$23679) ((lambda (g$214$23682 g$214$23683) (g$214$23651 (g$214$15922 g$214$23653) g$214$23683 g$214$23682)) g$214$23679 g$214$23678))) (if (g$214$14916 g$214$23653) (g$214$23651 (g$214$14917 g$214$23653) g$214$23654 g$214$23655) (values '() g$214$23639 (g$214$23558 g$214$23653 g$214$23640 g$214$23654 g$214$23655 g$214$23643)))))))) g$214$23651) g$214$23637 g$214$23641 g$214$23642))) (g$214$23550 (lambda (g$214$23619 g$214$23620 g$214$23621) (if (pair? g$214$23619) ((lambda (g$214$23625) (if g$214$23625 (begin '#f (cons (g$214$23544 (car g$214$23619) g$214$23620 g$214$23621) g$214$23625)) '#f)) (g$214$23550 (cdr g$214$23619) g$214$23620 g$214$23621)) (if (null? g$214$23619) '() (if (g$214$15920 g$214$23619) (call-with-values (lambda () (g$214$15942 g$214$23620 g$214$23621 g$214$23619)) (lambda (g$214$23629 g$214$23630) ((lambda (g$214$23633 g$214$23634) (g$214$23550 (g$214$15922 g$214$23619) g$214$23634 g$214$23633)) g$214$23630 g$214$23629))) (if (g$214$14916 g$214$23619) (g$214$23550 (g$214$14917 g$214$23619) g$214$23620 g$214$23621) '#f)))))) (g$214$23552 (lambda (g$214$23614 g$214$23615) (if (null? g$214$23614) g$214$23615 (if (eq? g$214$23614 '_) g$214$23615 (if (eq? g$214$23614 'any) (cons '() g$214$23615) (if (pair? g$214$23614) (g$214$23552 (car g$214$23614) (g$214$23552 (cdr g$214$23614) g$214$23615)) (if (eq? g$214$23614 'each-any) (cons '() g$214$23615) ((lambda (g$214$23618) (if (memv g$214$23618 '(each)) (g$214$23552 (vector-ref g$214$23614 '1) g$214$23615) (if (memv g$214$23618 '(each+)) (g$214$23552 (vector-ref g$214$23614 '1) (g$214$23552 (reverse (vector-ref g$214$23614 '2)) (g$214$23552 (vector-ref g$214$23614 '3) g$214$23615))) (if (memv g$214$23618 '(free-id atom)) g$214$23615 (if (memv g$214$23618 '(vector)) (g$214$23552 (vector-ref g$214$23614 '1) g$214$23615) (assertion-violation 'syntax-dispatch '"invalid pattern" g$214$23614)))))) (vector-ref g$214$23614 '0))))))))) (g$214$23554 (lambda (g$214$23610 g$214$23611) (if (null? (car g$214$23610)) g$214$23611 (cons (map car g$214$23610) (g$214$23554 (map cdr g$214$23610) g$214$23611))))) (g$214$23556 (lambda (g$214$23580 g$214$23581 g$214$23582 g$214$23583 g$214$23584) (if (null? g$214$23581) (if (null? g$214$23580) (begin '#f g$214$23584) '#f) (if (pair? g$214$23581) (if (pair? g$214$23580) (begin '#f (g$214$23558 (car g$214$23580) (car g$214$23581) g$214$23582 g$214$23583 (g$214$23558 (cdr g$214$23580) (cdr g$214$23581) g$214$23582 g$214$23583 g$214$23584))) '#f) (if (eq? g$214$23581 'each-any) ((lambda (g$214$23590) (if g$214$23590 (begin '#f (cons g$214$23590 g$214$23584)) '#f)) (g$214$23550 g$214$23580 g$214$23582 g$214$23583)) ((lambda (g$214$23592) (if (memv g$214$23592 '(each)) (if (null? g$214$23580) (g$214$23552 (vector-ref g$214$23581 '1) g$214$23584) ((lambda (g$214$23608) (if g$214$23608 (begin '#f (g$214$23554 g$214$23608 g$214$23584)) '#f)) (g$214$23546 g$214$23580 (vector-ref g$214$23581 '1) g$214$23582 g$214$23583))) (if (memv g$214$23592 '(free-id)) (if (symbol? g$214$23580) (if (g$214$15976 (g$214$23544 g$214$23580 g$214$23582 g$214$23583) (vector-ref g$214$23581 '1)) (begin '#f g$214$23584) '#f) '#f) (if (memv g$214$23592 '(each+)) (call-with-values (lambda () (g$214$23548 g$214$23580 (vector-ref g$214$23581 '1) (vector-ref g$214$23581 '2) (vector-ref g$214$23581 '3) g$214$23582 g$214$23583 g$214$23584)) (lambda (g$214$23596 g$214$23597 g$214$23598) ((lambda (g$214$23602 g$214$23603 g$214$23604) (if g$214$23602 (if (null? g$214$23603) (begin '#f (if (null? g$214$23604) (g$214$23552 (vector-ref g$214$23581 '1) g$214$23602) (g$214$23554 g$214$23604 g$214$23602))) '#f) '#f)) g$214$23598 g$214$23597 g$214$23596))) (if (memv g$214$23592 '(atom)) (if (equal? (vector-ref g$214$23581 '1) (g$214$15988 g$214$23580 g$214$23582)) (begin '#f g$214$23584) '#f) (if (memv g$214$23592 '(vector)) (if (vector? g$214$23580) (begin '#f (g$214$23558 (vector->list g$214$23580) (vector-ref g$214$23581 '1) g$214$23582 g$214$23583 g$214$23584)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" g$214$23581))))))) (vector-ref g$214$23581 '0))))))) (g$214$23558 (lambda (g$214$23560 g$214$23561 g$214$23562 g$214$23563 g$214$23564) (if (not g$214$23564) '#f (if (eq? g$214$23561 '_) g$214$23564 (if (eq? g$214$23561 'any) (cons (g$214$23544 g$214$23560 g$214$23562 g$214$23563) g$214$23564) (if (g$214$15920 g$214$23560) (call-with-values (lambda () (g$214$15942 g$214$23562 g$214$23563 g$214$23560)) (lambda (g$214$23572 g$214$23573) ((lambda (g$214$23576 g$214$23577) (g$214$23558 (g$214$15922 g$214$23560) g$214$23561 g$214$23577 g$214$23576 g$214$23564)) g$214$23573 g$214$23572))) (if (g$214$14916 g$214$23560) (g$214$23558 (g$214$14917 g$214$23560) g$214$23561 g$214$23562 g$214$23563 g$214$23564) (g$214$23556 g$214$23560 g$214$23561 g$214$23562 g$214$23563 g$214$23564))))))))) (g$214$23558 g$214$23540 g$214$23541 '() '() '())))) (g$214$16562 (lambda (g$214$23714) (if (g$214$15968 g$214$23714) (begin '#f (g$214$15976 g$214$23714 (g$214$16454 '|...|))) '#f))) (g$214$16564 ((lambda () (letrec ((g$214$23716 (lambda (g$214$23932 g$214$23933 g$214$23934 g$214$23935 g$214$23936) ((lambda (g$214$23942 g$214$23943) ((lambda (g$214$23946 g$214$23947) ((lambda (g$214$23950) (list '(primitive apply) (g$214$15848 '#f g$214$23947 g$214$23950) g$214$23934)) (g$214$16588 (g$214$15948 (g$214$15915 g$214$23942 g$214$23946) g$214$23933) (append (map (lambda (g$214$23952 g$214$23953 g$214$23954) (cons g$214$23952 (g$214$15996 'syntax (cons g$214$23953 g$214$23954)))) g$214$23946 g$214$23947 (map cdr g$214$23932)) g$214$23935) g$214$23936))) (map g$214$15882 g$214$23942) (map g$214$15878 g$214$23942))) (map car g$214$23932) (map cdr g$214$23932)))) (g$214$23718 (lambda (g$214$23920 g$214$23921 g$214$23922) ((letrec ((g$214$23926 (lambda (g$214$23928 g$214$23929) (if (null? g$214$23928) (g$214$16703 '#f '"invalid syntax" g$214$23921) (if (g$214$15968 (car g$214$23928)) (if (g$214$15982 (car g$214$23928) g$214$23929) (g$214$16699 (car g$214$23928) '"duplicate " g$214$23922) (g$214$23926 (cdr g$214$23928) (cons (car g$214$23928) g$214$23929))) (g$214$16699 (car g$214$23928) '"invalid " g$214$23922)))))) g$214$23926) g$214$23920 '()))) (g$214$23720 (lambda (g$214$23882 g$214$23883 g$214$23884 g$214$23885 g$214$23886 g$214$23887 g$214$23888 g$214$23889) (call-with-values (lambda () (g$214$16558 g$214$23887 g$214$23883)) (lambda (g$214$23900 g$214$23901) ((lambda (g$214$23904 g$214$23905) (if (not (g$214$15980 (map car g$214$23904))) (g$214$23718 (map car g$214$23904) g$214$23887 '"pattern variable") (if (not (for-all (lambda (g$214$23908) (not (g$214$16562 (car g$214$23908)))) g$214$23904)) (g$214$16703 '#f '"misplaced ellipsis in syntax-case pattern" g$214$23887) ((lambda (g$214$23910) ((lambda (g$214$23912) ((lambda (g$214$23914) ((lambda (g$214$23916) (list (g$214$15848 '#f (list g$214$23910) (list 'if g$214$23912 g$214$23914 g$214$23916)) (list '(primitive syntax-dispatch) g$214$23882 (list 'quote g$214$23905)))) (g$214$23722 g$214$23882 g$214$23883 g$214$23884 g$214$23885 g$214$23886))) (g$214$23716 g$214$23904 g$214$23889 g$214$23910 g$214$23885 g$214$23886))) (if (eq? g$214$23888 '#t) g$214$23910 ((lambda (g$214$23918) (list 'if g$214$23910 g$214$23918 (list 'quote '#f))) (g$214$23716 g$214$23904 g$214$23888 g$214$23910 g$214$23885 g$214$23886))))) (g$214$15878 'tmp))))) g$214$23901 g$214$23900))))) (g$214$23722 (lambda (g$214$23794 g$214$23795 g$214$23796 g$214$23797 g$214$23798) (if (null? g$214$23796) (list '(primitive syntax-error) g$214$23794) ((lambda (g$214$23804) ((lambda (g$214$23806) (if (if g$214$23806 (begin '#f (apply (lambda (g$214$23808 g$214$23809) '#t) g$214$23806)) '#f) (apply (lambda (g$214$23812 g$214$23813) (if (if (g$214$15968 g$214$23812) (if (not (g$214$15982 g$214$23812 g$214$23795)) (begin '#f (not (g$214$16562 g$214$23812))) '#f) '#f) (if (g$214$15976 g$214$23812 (g$214$16454 '_)) (g$214$16588 g$214$23813 g$214$23797 g$214$23798) ((lambda (g$214$23816 g$214$23817) ((lambda (g$214$23820) (list (g$214$15848 '#f (list g$214$23817) g$214$23820) g$214$23794)) (g$214$16588 (g$214$15948 (g$214$15915 (list g$214$23812) (list g$214$23816)) g$214$23813) (cons (cons g$214$23816 (g$214$15996 'syntax (cons g$214$23817 '0))) g$214$23797) g$214$23798))) (g$214$15882 g$214$23812) (g$214$15878 g$214$23812))) (g$214$23720 g$214$23794 g$214$23795 (cdr g$214$23796) g$214$23797 g$214$23798 g$214$23812 '#t g$214$23813))) g$214$23806) ((lambda (g$214$23822) ((lambda (g$214$23824) (if (if g$214$23824 (begin '#f (apply (lambda (g$214$23826 g$214$23827 g$214$23828) '#t) g$214$23824)) '#f) (apply (lambda (g$214$23832 g$214$23833 g$214$23834) (g$214$23720 g$214$23794 g$214$23795 (cdr g$214$23796) g$214$23797 g$214$23798 g$214$23832 g$214$23833 g$214$23834)) g$214$23824) (g$214$16703 '#f '"invalid syntax" g$214$23822))) ((lambda (g$214$23838) (if (g$214$15954 g$214$23838) (begin '#f ((lambda (g$214$23840) (if g$214$23840 (begin '#f ((lambda (g$214$23842) (if g$214$23842 (begin '#f (append g$214$23840 g$214$23842)) '#f)) ((lambda (g$214$23844) (if (g$214$15954 g$214$23844) (begin '#f ((lambda (g$214$23846) (if g$214$23846 (begin '#f ((lambda (g$214$23848) (if g$214$23848 (begin '#f (append g$214$23846 g$214$23848)) '#f)) ((lambda (g$214$23850) (if (g$214$15954 g$214$23850) (begin '#f ((lambda (g$214$23852) (if g$214$23852 (begin '#f ((lambda (g$214$23854) (if g$214$23854 (begin '#f (append g$214$23852 g$214$23854)) '#f)) ((lambda (g$214$23856) (if (equal? (g$214$15990 g$214$23856) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$23850)))) '#f)) ((lambda (g$214$23858) (list g$214$23858)) (g$214$15962 g$214$23850)))) '#f)) (g$214$15964 g$214$23844)))) '#f)) ((lambda (g$214$23860) (list g$214$23860)) (g$214$15962 g$214$23844)))) '#f)) (g$214$15964 g$214$23838)))) '#f)) ((lambda (g$214$23862) (list g$214$23862)) (g$214$15962 g$214$23838)))) '#f)) g$214$23822))) g$214$23804))) ((lambda (g$214$23864) (if (g$214$15954 g$214$23864) (begin '#f ((lambda (g$214$23866) (if g$214$23866 (begin '#f ((lambda (g$214$23868) (if g$214$23868 (begin '#f (append g$214$23866 g$214$23868)) '#f)) ((lambda (g$214$23870) (if (g$214$15954 g$214$23870) (begin '#f ((lambda (g$214$23872) (if g$214$23872 (begin '#f ((lambda (g$214$23874) (if g$214$23874 (begin '#f (append g$214$23872 g$214$23874)) '#f)) ((lambda (g$214$23876) (if (equal? (g$214$15990 g$214$23876) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$23870)))) '#f)) ((lambda (g$214$23878) (list g$214$23878)) (g$214$15962 g$214$23870)))) '#f)) (g$214$15964 g$214$23864)))) '#f)) ((lambda (g$214$23880) (list g$214$23880)) (g$214$15962 g$214$23864)))) '#f)) g$214$23804))) (car g$214$23796)))))) (lambda (g$214$23724 g$214$23725 g$214$23726) ((lambda (g$214$23730) ((lambda (g$214$23732) (if (if g$214$23732 (begin '#f (apply (lambda (g$214$23734 g$214$23735 g$214$23736) '#t) g$214$23732)) '#f) (apply (lambda (g$214$23740 g$214$23741 g$214$23742) (begin (if (for-all (lambda (g$214$23746) (if (g$214$15968 g$214$23746) (begin '#f (not (g$214$16562 g$214$23746))) '#f)) g$214$23741) (void) (g$214$16703 '#f '"invalid literals" g$214$23724)) ((lambda (g$214$23748) ((lambda (g$214$23750) (list (g$214$15848 '#f (list g$214$23748) g$214$23750) (g$214$16588 g$214$23740 g$214$23725 g$214$23726))) (g$214$23722 g$214$23748 g$214$23741 g$214$23742 g$214$23725 g$214$23726))) (g$214$15878 'tmp)))) g$214$23732) (g$214$16703 '#f '"invalid syntax" g$214$23730))) ((lambda (g$214$23752) (if (g$214$15954 g$214$23752) (begin '#f ((lambda (g$214$23754) (if g$214$23754 (begin '#f ((lambda (g$214$23756) (if g$214$23756 (begin '#f (append g$214$23754 g$214$23756)) '#f)) ((lambda (g$214$23758) (if (g$214$15954 g$214$23758) (begin '#f ((lambda (g$214$23760) (if g$214$23760 (begin '#f ((lambda (g$214$23762) (if g$214$23762 (begin '#f (append g$214$23760 g$214$23762)) '#f)) ((lambda (g$214$23764) (if (g$214$15954 g$214$23764) (begin '#f ((lambda (g$214$23766) (if g$214$23766 (begin '#f ((lambda (g$214$23768) (if g$214$23768 (begin '#f (append g$214$23766 g$214$23768)) '#f)) ((letrec ((g$214$23770 (lambda (g$214$23772) (if (g$214$15954 g$214$23772) ((lambda (g$214$23774) (if g$214$23774 (begin '#f ((lambda (g$214$23776) (if g$214$23776 (begin '#f (map cons g$214$23774 g$214$23776)) '#f)) (g$214$23770 (g$214$15964 g$214$23772)))) '#f)) ((lambda (g$214$23778) (list g$214$23778)) (g$214$15962 g$214$23772))) (if (g$214$15958 g$214$23772) (list (begin 'clauses '())) '#f))))) g$214$23770) (g$214$15964 g$214$23764)))) '#f)) ((letrec ((g$214$23780 (lambda (g$214$23782) (if (g$214$15954 g$214$23782) ((lambda (g$214$23784) (if g$214$23784 (begin '#f ((lambda (g$214$23786) (if g$214$23786 (begin '#f (map cons g$214$23784 g$214$23786)) '#f)) (g$214$23780 (g$214$15964 g$214$23782)))) '#f)) ((lambda (g$214$23788) (list g$214$23788)) (g$214$15962 g$214$23782))) (if (g$214$15958 g$214$23782) (list (begin 'keys '())) '#f))))) g$214$23780) (g$214$15962 g$214$23764)))) '#f)) (g$214$15964 g$214$23758)))) '#f)) ((lambda (g$214$23790) (list g$214$23790)) (g$214$15962 g$214$23758)))) '#f)) (g$214$15964 g$214$23752)))) '#f)) ((lambda (g$214$23792) '()) (g$214$15962 g$214$23752)))) '#f)) g$214$23730))) g$214$23724)))))) (g$214$16566 ((lambda () (letrec ((g$214$23958 (lambda (g$214$24092 g$214$24093 g$214$24094 g$214$24095 g$214$24096 g$214$24097) ((lambda (g$214$24104) ((lambda (g$214$24106) (if (if g$214$24106 (begin '#f (apply (lambda (g$214$24108) (g$214$24096 g$214$24108)) g$214$24106)) '#f) (apply (lambda (g$214$24110) (g$214$16703 '#f '"misplaced ellipsis in syntax form" g$214$24092)) g$214$24106) ((lambda (g$214$24112) ((lambda (g$214$24114) (if (if g$214$24114 (begin '#f (apply (lambda (g$214$24116) (g$214$15968 g$214$24116)) g$214$24114)) '#f) (apply (lambda (g$214$24118) ((lambda (g$214$24120) ((lambda (g$214$24122) ((lambda () (if (eq? (g$214$15998 g$214$24122) 'syntax) (call-with-values (lambda () ((lambda (g$214$24126) (g$214$23960 g$214$24092 (car g$214$24126) (cdr g$214$24126) g$214$24095)) (g$214$16000 g$214$24122))) (lambda (g$214$24128 g$214$24129) ((lambda (g$214$24132 g$214$24133) (values (list 'ref g$214$24133) g$214$24132)) g$214$24129 g$214$24128))) (values (list 'quote g$214$24093) g$214$24095))))) (g$214$15994 g$214$24120 g$214$24094))) (g$214$15992 g$214$24093))) g$214$24114) ((lambda (g$214$24136) ((lambda (g$214$24138) (if (if g$214$24138 (begin '#f (apply (lambda (g$214$24140 g$214$24141) (g$214$24096 g$214$24140)) g$214$24138)) '#f) (apply (lambda (g$214$24144 g$214$24145) (if g$214$24097 (g$214$16703 '#f '"misplaced ellipsis in syntax form" g$214$24092) (g$214$23958 g$214$24092 g$214$24145 g$214$24094 g$214$24095 (lambda (g$214$24148) '#f) '#f))) g$214$24138) ((lambda (g$214$24150) ((lambda (g$214$24152) (if (if g$214$24152 (begin '#f (apply (lambda (g$214$24154 g$214$24155 g$214$24156) (g$214$24096 g$214$24155)) g$214$24152)) '#f) (apply (lambda (g$214$24160 g$214$24161 g$214$24162) ((letrec ((g$214$24166 (lambda (g$214$24168 g$214$24169) ((lambda (g$214$24172) ((lambda (g$214$24174) (if (if g$214$24174 (begin '#f (apply (lambda () '#t) g$214$24174)) '#f) (apply (lambda () (g$214$24169 g$214$24095)) g$214$24174) ((lambda (g$214$24176) ((lambda (g$214$24178) (if (if g$214$24178 (begin '#f (apply (lambda (g$214$24180 g$214$24181) (g$214$24096 g$214$24180)) g$214$24178)) '#f) (apply (lambda (g$214$24184 g$214$24185) (g$214$24166 g$214$24185 (lambda (g$214$24188) (call-with-values (lambda () (g$214$24169 (cons '() g$214$24188))) (lambda (g$214$24192 g$214$24193) ((lambda (g$214$24196 g$214$24197) (if (null? (car g$214$24196)) (g$214$16703 '#f '"extra ellipsis in syntax form" g$214$24092) (values (g$214$23964 g$214$24197 (car g$214$24196)) (cdr g$214$24196)))) g$214$24193 g$214$24192)))))) g$214$24178) ((lambda (g$214$24200) ((lambda (g$214$24202) (if (if g$214$24202 (begin '#f (apply (lambda () '#t) g$214$24202)) '#f) (apply (lambda () (call-with-values (lambda () (g$214$23958 g$214$24092 g$214$24168 g$214$24094 g$214$24095 g$214$24096 g$214$24097)) (lambda (g$214$24206 g$214$24207) ((lambda (g$214$24210 g$214$24211) (call-with-values (lambda () (g$214$24169 g$214$24210)) (lambda (g$214$24216 g$214$24217) ((lambda (g$214$24220 g$214$24221) (values (g$214$23962 g$214$24221 g$214$24211) g$214$24220)) g$214$24217 g$214$24216)))) g$214$24207 g$214$24206)))) g$214$24202) (g$214$16703 '#f '"invalid syntax" g$214$24200))) ((lambda (g$214$24224) '()) g$214$24200))) g$214$24176))) ((lambda (g$214$24226) (if (g$214$15954 g$214$24226) (begin '#f ((lambda (g$214$24228) (if g$214$24228 (begin '#f ((lambda (g$214$24230) (if g$214$24230 (begin '#f (append g$214$24228 g$214$24230)) '#f)) ((lambda (g$214$24232) (list g$214$24232)) (g$214$15964 g$214$24226)))) '#f)) ((lambda (g$214$24234) (list g$214$24234)) (g$214$15962 g$214$24226)))) '#f)) g$214$24176))) g$214$24172))) ((lambda (g$214$24236) (if (equal? (g$214$15990 g$214$24236) '()) (begin '#f '()) '#f)) g$214$24172))) g$214$24168)))) g$214$24166) g$214$24162 (lambda (g$214$24238) (call-with-values (lambda () (g$214$23958 g$214$24092 g$214$24160 g$214$24094 (cons '() g$214$24238) g$214$24096 '#f)) (lambda (g$214$24242 g$214$24243) ((lambda (g$214$24246 g$214$24247) (if (null? (car g$214$24246)) (g$214$16703 '#f '"extra ellipsis in syntax form" g$214$24092) (values (g$214$23966 g$214$24247 (car g$214$24246)) (cdr g$214$24246)))) g$214$24243 g$214$24242)))))) g$214$24152) ((lambda (g$214$24250) ((lambda (g$214$24252) (if (if g$214$24252 (begin '#f (apply (lambda (g$214$24254 g$214$24255) '#t) g$214$24252)) '#f) (apply (lambda (g$214$24258 g$214$24259) (call-with-values (lambda () (g$214$23958 g$214$24092 g$214$24258 g$214$24094 g$214$24095 g$214$24096 '#f)) (lambda (g$214$24264 g$214$24265) ((lambda (g$214$24268 g$214$24269) (call-with-values (lambda () (g$214$23958 g$214$24092 g$214$24259 g$214$24094 g$214$24268 g$214$24096 g$214$24097)) (lambda (g$214$24274 g$214$24275) ((lambda (g$214$24278 g$214$24279) (values (g$214$23968 g$214$24093 g$214$24258 g$214$24259 g$214$24269 g$214$24279) g$214$24278)) g$214$24275 g$214$24274)))) g$214$24265 g$214$24264)))) g$214$24252) ((lambda (g$214$24282) ((lambda (g$214$24284) (if (if g$214$24284 (begin '#f (apply (lambda (g$214$24286) '#t) g$214$24284)) '#f) (apply (lambda (g$214$24288) (call-with-values (lambda () (g$214$23958 g$214$24092 g$214$24288 g$214$24094 g$214$24095 g$214$24096 '#t)) (lambda (g$214$24292 g$214$24293) ((lambda (g$214$24296 g$214$24297) (values (g$214$23970 g$214$24093 g$214$24288 g$214$24297) g$214$24296)) g$214$24293 g$214$24292)))) g$214$24284) ((lambda (g$214$24300) ((lambda (g$214$24302) (if (if g$214$24302 (begin '#f (apply (lambda () '#t) g$214$24302)) '#f) (apply (lambda () (values (list 'quote g$214$24093) g$214$24095)) g$214$24302) (g$214$16703 '#f '"invalid syntax" g$214$24300))) ((lambda (g$214$24304) '()) g$214$24300))) g$214$24282))) ((lambda (g$214$24306) (if (g$214$15956 g$214$24306) (begin '#f ((letrec ((g$214$24308 (lambda (g$214$24310) (if (g$214$15954 g$214$24310) ((lambda (g$214$24312) (if g$214$24312 (begin '#f ((lambda (g$214$24314) (if g$214$24314 (begin '#f (map cons g$214$24312 g$214$24314)) '#f)) (g$214$24308 (g$214$15964 g$214$24310)))) '#f)) ((lambda (g$214$24316) (list g$214$24316)) (g$214$15962 g$214$24310))) (if (g$214$15958 g$214$24310) (list (begin 'ls '())) '#f))))) g$214$24308) (g$214$15952 g$214$24306))) '#f)) g$214$24282))) g$214$24250))) ((lambda (g$214$24318) (if (g$214$15954 g$214$24318) (begin '#f ((lambda (g$214$24320) (if g$214$24320 (begin '#f ((lambda (g$214$24322) (if g$214$24322 (begin '#f (append g$214$24320 g$214$24322)) '#f)) ((lambda (g$214$24324) (list g$214$24324)) (g$214$15964 g$214$24318)))) '#f)) ((lambda (g$214$24326) (list g$214$24326)) (g$214$15962 g$214$24318)))) '#f)) g$214$24250))) g$214$24150))) ((lambda (g$214$24328) (if (g$214$15954 g$214$24328) (begin '#f ((lambda (g$214$24330) (if g$214$24330 (begin '#f ((lambda (g$214$24332) (if g$214$24332 (begin '#f (append g$214$24330 g$214$24332)) '#f)) ((lambda (g$214$24334) (if (g$214$15954 g$214$24334) (begin '#f ((lambda (g$214$24336) (if g$214$24336 (begin '#f ((lambda (g$214$24338) (if g$214$24338 (begin '#f (append g$214$24336 g$214$24338)) '#f)) ((lambda (g$214$24340) (list g$214$24340)) (g$214$15964 g$214$24334)))) '#f)) ((lambda (g$214$24342) (list g$214$24342)) (g$214$15962 g$214$24334)))) '#f)) (g$214$15964 g$214$24328)))) '#f)) ((lambda (g$214$24344) (list g$214$24344)) (g$214$15962 g$214$24328)))) '#f)) g$214$24150))) g$214$24136))) ((lambda (g$214$24346) (if (g$214$15954 g$214$24346) (begin '#f ((lambda (g$214$24348) (if g$214$24348 (begin '#f ((lambda (g$214$24350) (if g$214$24350 (begin '#f (append g$214$24348 g$214$24350)) '#f)) ((lambda (g$214$24352) (if (g$214$15954 g$214$24352) (begin '#f ((lambda (g$214$24354) (if g$214$24354 (begin '#f ((lambda (g$214$24356) (if g$214$24356 (begin '#f (append g$214$24354 g$214$24356)) '#f)) ((lambda (g$214$24358) (if (equal? (g$214$15990 g$214$24358) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$24352)))) '#f)) ((lambda (g$214$24360) (list g$214$24360)) (g$214$15962 g$214$24352)))) '#f)) (g$214$15964 g$214$24346)))) '#f)) ((lambda (g$214$24362) (list g$214$24362)) (g$214$15962 g$214$24346)))) '#f)) g$214$24136))) g$214$24112))) ((lambda (g$214$24364) (list g$214$24364)) g$214$24112))) g$214$24104))) ((lambda (g$214$24366) (list g$214$24366)) g$214$24104))) g$214$24093))) (g$214$23960 (lambda (g$214$24068 g$214$24069 g$214$24070 g$214$24071) (if (= g$214$24070 '0) (values g$214$24069 g$214$24071) (if (null? g$214$24071) (g$214$16703 '#f '"missing ellipsis in syntax form" g$214$24068) (call-with-values (lambda () (g$214$23960 g$214$24068 g$214$24069 (- g$214$24070 '1) (cdr g$214$24071))) (lambda (g$214$24078 g$214$24079) ((lambda (g$214$24082 g$214$24083) ((lambda (g$214$24086) (if g$214$24086 ((lambda (g$214$24088) (values (cdr g$214$24088) g$214$24071)) g$214$24086) ((lambda (g$214$24090) (values g$214$24090 (cons (cons (cons g$214$24083 g$214$24090) (car g$214$24071)) g$214$24082))) (g$214$15878 'tmp)))) (assq g$214$24083 (car g$214$24071)))) g$214$24079 g$214$24078))))))) (g$214$23962 (lambda (g$214$24064 g$214$24065) (if (equal? g$214$24065 ''()) g$214$24064 (list 'append g$214$24064 g$214$24065)))) (g$214$23964 (lambda (g$214$24060 g$214$24061) (list 'apply '(primitive append) (g$214$23966 g$214$24060 g$214$24061)))) (g$214$23966 (lambda (g$214$24042 g$214$24043) ((lambda (g$214$24046 g$214$24047) (if (eq? (car g$214$24042) 'ref) (car g$214$24047) (if (for-all (lambda (g$214$24050) (if (eq? (car g$214$24050) 'ref) (begin '#f (memq (cadr g$214$24050) g$214$24046)) '#f)) (cdr g$214$24042)) ((lambda (g$214$24052) (cons 'map (cons (list 'primitive (car g$214$24042)) g$214$24052))) (map ((lambda (g$214$24054) (lambda (g$214$24056) (cdr (assq (cadr g$214$24056) g$214$24054)))) (map cons g$214$24046 g$214$24047)) (cdr g$214$24042))) (cons* 'map (list 'lambda g$214$24046 g$214$24042) g$214$24047)))) (map cdr g$214$24043) (map (lambda (g$214$24058) (list 'ref (car g$214$24058))) g$214$24043)))) (g$214$23968 (lambda (g$214$24027 g$214$24028 g$214$24029 g$214$24030 g$214$24031) ((lambda (g$214$24037) (if (memv g$214$24037 '(quote)) (if (eq? (car g$214$24030) 'quote) ((lambda (g$214$24038 g$214$24039) (if (if (eq? g$214$24038 g$214$24028) (begin '#f (eq? g$214$24039 g$214$24029)) '#f) (list 'quote g$214$24027) (list 'quote (cons g$214$24038 g$214$24039)))) (cadr g$214$24030) (cadr g$214$24031)) (if (null? (cadr g$214$24031)) (list 'list g$214$24030) (list 'cons g$214$24030 g$214$24031))) (if (memv g$214$24037 '(list)) (cons 'list (cons g$214$24030 (cdr g$214$24031))) (list 'cons g$214$24030 g$214$24031)))) (car g$214$24031)))) (g$214$23970 (lambda (g$214$24021 g$214$24022 g$214$24023) (if (eq? (car g$214$24023) 'quote) (if (eq? (cadr g$214$24023) g$214$24022) (list 'quote g$214$24021) (list 'quote (list->vector (cadr g$214$24023)))) (if (eq? (car g$214$24023) 'list) (cons 'vector (cdr g$214$24023)) (list 'list->vector g$214$24023))))) (g$214$23972 (lambda (g$214$24016) ((lambda (g$214$24018) (if (memv g$214$24018 '(ref)) (cadr g$214$24016) (if (memv g$214$24018 '(primitive)) (list 'primitive (cadr g$214$24016)) (if (memv g$214$24018 '(quote)) (list 'quote (cadr g$214$24016)) (if (memv g$214$24018 '(lambda)) (g$214$15848 '#f (cadr g$214$24016) (g$214$23972 (caddr g$214$24016))) (if (memv g$214$24018 '(map)) ((lambda (g$214$24019) (cons '(primitive map) g$214$24019)) (map g$214$23972 (cdr g$214$24016))) (cons (list 'primitive (car g$214$24016)) (map g$214$23972 (cdr g$214$24016))))))))) (car g$214$24016))))) (lambda (g$214$23974 g$214$23975 g$214$23976) ((lambda (g$214$23980) ((lambda (g$214$23982) (if (if g$214$23982 (begin '#f (apply (lambda (g$214$23984) '#t) g$214$23982)) '#f) (apply (lambda (g$214$23986) (call-with-values (lambda () (g$214$23958 g$214$23974 g$214$23986 g$214$23975 '() g$214$16562 '#f)) (lambda (g$214$23990 g$214$23991) ((lambda (g$214$23994 g$214$23995) (g$214$23972 g$214$23995)) g$214$23991 g$214$23990)))) g$214$23982) (g$214$16703 '#f '"invalid syntax" g$214$23980))) ((lambda (g$214$23998) (if (g$214$15954 g$214$23998) (begin '#f ((lambda (g$214$24000) (if g$214$24000 (begin '#f ((lambda (g$214$24002) (if g$214$24002 (begin '#f (append g$214$24000 g$214$24002)) '#f)) ((lambda (g$214$24004) (if (g$214$15954 g$214$24004) (begin '#f ((lambda (g$214$24006) (if g$214$24006 (begin '#f ((lambda (g$214$24008) (if g$214$24008 (begin '#f (append g$214$24006 g$214$24008)) '#f)) ((lambda (g$214$24010) (if (equal? (g$214$15990 g$214$24010) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$24004)))) '#f)) ((lambda (g$214$24012) (list g$214$24012)) (g$214$15962 g$214$24004)))) '#f)) (g$214$15964 g$214$23998)))) '#f)) ((lambda (g$214$24014) '()) (g$214$15962 g$214$23998)))) '#f)) g$214$23980))) g$214$23974)))))) (g$214$16568 (lambda (g$214$24368) ((lambda (g$214$24370) (if (memv g$214$24370 '(quote)) g$214$16486 (if (memv g$214$24370 '(lambda)) g$214$16490 (if (memv g$214$24370 '(case-lambda)) g$214$16488 (if (memv g$214$24370 '(letrec)) g$214$16468 (if (memv g$214$24370 '(letrec*)) g$214$16470 (if (memv g$214$24370 '(case)) g$214$16484 (if (memv g$214$24370 '(if)) g$214$16482 (if (memv g$214$24370 '(when)) g$214$16478 (if (memv g$214$24370 '(unless)) g$214$16480 (if (memv g$214$24370 '(parameterize)) g$214$16554 (if (memv g$214$24370 '(foreign-call)) g$214$16556 (if (memv g$214$24370 '(syntax-case)) g$214$16564 (if (memv g$214$24370 '(syntax)) g$214$16566 (if (memv g$214$24370 '(type-descriptor)) g$214$16472 (if (memv g$214$24370 '(record-type-descriptor)) g$214$16474 (if (memv g$214$24370 '(record-constructor-descriptor)) g$214$16476 (assertion-violation 'macro-transformer '"BUG: cannot find transformer" g$214$24368)))))))))))))))))) g$214$24368))) (g$214$16570 (lambda (g$214$24371) ((lambda (g$214$24373) ((lambda (g$214$24375) (if (if g$214$24375 (begin '#f (apply (lambda (g$214$24377) (if (for-all g$214$15968 g$214$24377) (begin '#f (g$214$14921 (map g$214$15970 g$214$24377))) '#f)) g$214$24375)) '#f) (apply (lambda (g$214$24379) (g$214$16492 (list 'quote (g$214$14921 (map g$214$15970 g$214$24379))))) g$214$24375) (g$214$16703 '#f '"invalid syntax" g$214$24373))) ((lambda (g$214$24381) (if (g$214$15954 g$214$24381) (begin '#f ((lambda (g$214$24383) (if g$214$24383 (begin '#f ((lambda (g$214$24385) (if g$214$24385 (begin '#f (append g$214$24383 g$214$24385)) '#f)) ((letrec ((g$214$24387 (lambda (g$214$24389) (if (g$214$15954 g$214$24389) ((lambda (g$214$24391) (if g$214$24391 (begin '#f ((lambda (g$214$24393) (if g$214$24393 (begin '#f (map cons g$214$24391 g$214$24393)) '#f)) (g$214$24387 (g$214$15964 g$214$24389)))) '#f)) ((lambda (g$214$24395) (list g$214$24395)) (g$214$15962 g$214$24389))) (if (g$214$15958 g$214$24389) (list (begin 'opt* '())) '#f))))) g$214$24387) (g$214$15964 g$214$24381)))) '#f)) ((lambda (g$214$24397) '()) (g$214$15962 g$214$24381)))) '#f)) g$214$24373))) g$214$24371))) (g$214$16572 (lambda (g$214$24399 g$214$24400) ((lambda (g$214$24403) ((lambda (g$214$24405) (if (if g$214$24405 (begin '#f (apply (lambda (g$214$24407) (if (g$214$15968 g$214$24407) (begin '#f (memq (g$214$15970 g$214$24407) g$214$24400)) '#f)) g$214$24405)) '#f) (apply (lambda (g$214$24409) (g$214$16492 (list 'quote g$214$24409))) g$214$24405) (g$214$16703 '#f '"invalid syntax" g$214$24403))) ((lambda (g$214$24411) (if (g$214$15954 g$214$24411) (begin '#f ((lambda (g$214$24413) (if g$214$24413 (begin '#f ((lambda (g$214$24415) (if g$214$24415 (begin '#f (append g$214$24413 g$214$24415)) '#f)) ((lambda (g$214$24417) (if (g$214$15954 g$214$24417) (begin '#f ((lambda (g$214$24419) (if g$214$24419 (begin '#f ((lambda (g$214$24421) (if g$214$24421 (begin '#f (append g$214$24419 g$214$24421)) '#f)) ((lambda (g$214$24423) (if (equal? (g$214$15990 g$214$24423) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$24417)))) '#f)) ((lambda (g$214$24425) (list g$214$24425)) (g$214$15962 g$214$24417)))) '#f)) (g$214$15964 g$214$24411)))) '#f)) ((lambda (g$214$24427) '()) (g$214$15962 g$214$24411)))) '#f)) g$214$24403))) g$214$24399))) (g$214$16574 (lambda (g$214$24429) (if (procedure? g$214$24429) g$214$24429 (if (symbol? g$214$24429) ((lambda (g$214$24431) (if (memv g$214$24431 '(define-record-type)) g$214$16548 (if (memv g$214$24431 '(define-struct)) g$214$16546 (if (memv g$214$24431 '(include)) g$214$16536 (if (memv g$214$24431 '(cond)) g$214$16532 (if (memv g$214$24431 '(let)) g$214$16498 (if (memv g$214$24431 '(do)) g$214$16524 (if (memv g$214$24431 '(or)) g$214$16528 (if (memv g$214$24431 '(and)) g$214$16530 (if (memv g$214$24431 '(let*)) g$214$16526 (if (memv g$214$24431 '(let-values)) g$214$16500 (if (memv g$214$24431 '(let*-values)) g$214$16502 (if (memv g$214$24431 '(syntax-rules)) g$214$16540 (if (memv g$214$24431 '(quasiquote)) g$214$16542 (if (memv g$214$24431 '(quasisyntax)) g$214$16544 (if (memv g$214$24431 '(with-syntax)) g$214$16494 (if (memv g$214$24431 '(identifier-syntax)) g$214$16522 (if (memv g$214$24431 '(time)) g$214$16514 (if (memv g$214$24431 '(delay)) g$214$16516 (if (memv g$214$24431 '(assert)) g$214$16518 (if (memv g$214$24431 '(endianness)) g$214$16520 (if (memv g$214$24431 '(guard)) g$214$16510 (if (memv g$214$24431 '(define-enumeration)) g$214$16512 (if (memv g$214$24431 '(trace-lambda)) g$214$16504 (if (memv g$214$24431 '(trace-define)) g$214$16506 (if (memv g$214$24431 '(trace-define-syntax)) g$214$16508 (if (memv g$214$24431 '(define-condition-type)) g$214$16550 (if (memv g$214$24431 '(include-into)) g$214$16538 (if (memv g$214$24431 '(eol-style)) (lambda (g$214$24436) (g$214$16572 g$214$24436 '(none lf cr crlf nel crnel ls))) (if (memv g$214$24431 '(error-handling-mode)) (lambda (g$214$24434) (g$214$16572 g$214$24434 '(ignore raise replace))) (if (memv g$214$24431 '(buffer-mode)) (lambda (g$214$24432) (g$214$16572 g$214$24432 '(none line block))) (if (memv g$214$24431 '(file-options)) g$214$16570 (if (memv g$214$24431 '(|...| => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) g$214$16552 (assertion-violation 'macro-transformer '"BUG: invalid macro" g$214$24429)))))))))))))))))))))))))))))))))) g$214$24429) (assertion-violation 'core-macro-transformer '"BUG: invalid macro" g$214$24429))))) (g$214$16576 (lambda (g$214$24438) (car g$214$24438))) (g$214$16578 (lambda (g$214$24440 g$214$24441) ((lambda (g$214$24444) (g$214$15946 (g$214$15936) g$214$24444)) ((g$214$16574 g$214$24440) (g$214$15946 g$214$15938 g$214$24441))))) (g$214$16580 (lambda (g$214$24446 g$214$24447) ((lambda (g$214$24450) (g$214$15946 (g$214$15936) g$214$24450)) ((g$214$16576 g$214$24446) (g$214$15946 g$214$15938 g$214$24447))))) (g$214$16582 (lambda (g$214$24452 g$214$24453) ((lambda (g$214$24456 g$214$24457) (begin (g$214$15511 g$214$24456) ((lambda (g$214$24460) ((lambda (g$214$24462) ((lambda (g$214$24464) (g$214$15946 (g$214$15936) g$214$24464)) (g$214$24462 (g$214$15946 g$214$15938 g$214$24453)))) (if (procedure? g$214$24460) g$214$24460 (assertion-violation 'chi-global-macro '"BUG: not a procedure" g$214$24460)))) (symbol-value g$214$24457)))) (car g$214$24452) (cdr g$214$24452)))) (g$214$16584 (lambda (g$214$24466 g$214$24467 g$214$24468) (if (null? g$214$24466) '() ((lambda (g$214$24472) (cons g$214$24472 (g$214$16584 (cdr g$214$24466) g$214$24467 g$214$24468))) (g$214$16588 (car g$214$24466) g$214$24467 g$214$24468))))) (g$214$16586 (lambda (g$214$24474 g$214$24475 g$214$24476) ((lambda (g$214$24480) ((lambda (g$214$24482) (if (if g$214$24482 (begin '#f (apply (lambda (g$214$24484 g$214$24485) '#t) g$214$24482)) '#f) (apply (lambda (g$214$24488 g$214$24489) ((lambda (g$214$24492) (cons g$214$24492 (g$214$16584 g$214$24489 g$214$24475 g$214$24476))) (g$214$16588 g$214$24488 g$214$24475 g$214$24476))) g$214$24482) (g$214$16703 '#f '"invalid syntax" g$214$24480))) ((lambda (g$214$24494) (if (g$214$15954 g$214$24494) (begin '#f ((lambda (g$214$24496) (if g$214$24496 (begin '#f ((lambda (g$214$24498) (if g$214$24498 (begin '#f (append g$214$24496 g$214$24498)) '#f)) ((letrec ((g$214$24500 (lambda (g$214$24502) (if (g$214$15954 g$214$24502) ((lambda (g$214$24504) (if g$214$24504 (begin '#f ((lambda (g$214$24506) (if g$214$24506 (begin '#f (map cons g$214$24504 g$214$24506)) '#f)) (g$214$24500 (g$214$15964 g$214$24502)))) '#f)) ((lambda (g$214$24508) (list g$214$24508)) (g$214$15962 g$214$24502))) (if (g$214$15958 g$214$24502) (list (begin 'rands '())) '#f))))) g$214$24500) (g$214$15964 g$214$24494)))) '#f)) ((lambda (g$214$24510) (list g$214$24510)) (g$214$15962 g$214$24494)))) '#f)) g$214$24480))) g$214$24474))) (g$214$16588 (lambda (g$214$24512 g$214$24513 g$214$24514) (call-with-values (lambda () (g$214$16004 g$214$24512 g$214$24513)) (lambda (g$214$24521 g$214$24522 g$214$24523) ((lambda (g$214$24527 g$214$24528 g$214$24529) ((lambda (g$214$24533) (if (memv g$214$24533 '(core-macro)) ((lambda (g$214$24671) (g$214$24671 g$214$24512 g$214$24513 g$214$24514)) (g$214$16568 g$214$24528)) (if (memv g$214$24533 '(global)) ((lambda (g$214$24667) ((lambda (g$214$24669) ((lambda () (begin ((g$214$16634) g$214$24667) g$214$24669)))) (cdr g$214$24528))) (car g$214$24528)) (if (memv g$214$24533 '(core-prim)) ((lambda (g$214$24665) (list 'primitive g$214$24665)) g$214$24528) (if (memv g$214$24533 '(call)) (g$214$16586 g$214$24512 g$214$24513 g$214$24514) (if (memv g$214$24533 '(lexical)) ((lambda (g$214$24663) g$214$24663) (g$214$16456 g$214$24528)) (if (memv g$214$24533 '(global-macro global-macro!)) (g$214$16588 (g$214$16582 g$214$24528 g$214$24512) g$214$24513 g$214$24514) (if (memv g$214$24533 '(local-macro local-macro!)) (g$214$16588 (g$214$16580 g$214$24528 g$214$24512) g$214$24513 g$214$24514) (if (memv g$214$24533 '(macro macro!)) (g$214$16588 (g$214$16578 g$214$24528 g$214$24512) g$214$24513 g$214$24514) (if (memv g$214$24533 '(constant)) ((lambda (g$214$24661) (list 'quote g$214$24661)) g$214$24528) (if (memv g$214$24533 '(set!)) (g$214$16590 g$214$24512 g$214$24513 g$214$24514) (if (memv g$214$24533 '(begin)) ((lambda (g$214$24623) ((lambda (g$214$24625) (if (if g$214$24625 (begin '#f (apply (lambda (g$214$24627 g$214$24628) '#t) g$214$24625)) '#f) (apply (lambda (g$214$24631 g$214$24632) (g$214$15851 '#f (g$214$16584 (cons g$214$24631 g$214$24632) g$214$24513 g$214$24514))) g$214$24625) (g$214$16703 '#f '"invalid syntax" g$214$24623))) ((lambda (g$214$24635) (if (g$214$15954 g$214$24635) (begin '#f ((lambda (g$214$24637) (if g$214$24637 (begin '#f ((lambda (g$214$24639) (if g$214$24639 (begin '#f (append g$214$24637 g$214$24639)) '#f)) ((lambda (g$214$24641) (if (g$214$15954 g$214$24641) (begin '#f ((lambda (g$214$24643) (if g$214$24643 (begin '#f ((lambda (g$214$24645) (if g$214$24645 (begin '#f (append g$214$24643 g$214$24645)) '#f)) ((letrec ((g$214$24647 (lambda (g$214$24649) (if (g$214$15954 g$214$24649) ((lambda (g$214$24651) (if g$214$24651 (begin '#f ((lambda (g$214$24653) (if g$214$24653 (begin '#f (map cons g$214$24651 g$214$24653)) '#f)) (g$214$24647 (g$214$15964 g$214$24649)))) '#f)) ((lambda (g$214$24655) (list g$214$24655)) (g$214$15962 g$214$24649))) (if (g$214$15958 g$214$24649) (list (begin 'x* '())) '#f))))) g$214$24647) (g$214$15964 g$214$24641)))) '#f)) ((lambda (g$214$24657) (list g$214$24657)) (g$214$15962 g$214$24641)))) '#f)) (g$214$15964 g$214$24635)))) '#f)) ((lambda (g$214$24659) '()) (g$214$15962 g$214$24635)))) '#f)) g$214$24623))) g$214$24512) (if (memv g$214$24533 '(let-syntax letrec-syntax)) ((lambda (g$214$24535) ((lambda (g$214$24537) (if (if g$214$24537 (begin '#f (apply (lambda (g$214$24539 g$214$24540 g$214$24541 g$214$24542) (if (g$214$15978 g$214$24539) (void) (g$214$16703 '#f '"invalid identifiers" g$214$24512))) g$214$24537)) '#f) (apply (lambda (g$214$24547 g$214$24548 g$214$24549 g$214$24550) ((lambda (g$214$24555) ((lambda (g$214$24557) ((lambda (g$214$24559) ((lambda () (g$214$15851 '#f (g$214$16584 (map (lambda (g$214$24561) (g$214$15948 g$214$24557 g$214$24561)) (cons g$214$24549 g$214$24550)) (append (map cons g$214$24555 g$214$24559) g$214$24513) (append (map cons g$214$24555 g$214$24559) g$214$24514)))))) (map (lambda (g$214$24563) (g$214$16031 (g$214$16620 (if (eq? g$214$24529 'let-syntax) g$214$24563 (g$214$15948 g$214$24557 g$214$24563)) g$214$24514))) g$214$24548))) (g$214$15915 g$214$24547 g$214$24555))) (map g$214$15882 g$214$24547))) g$214$24537) (g$214$16703 '#f '"invalid syntax" g$214$24535))) ((lambda (g$214$24565) (if (g$214$15954 g$214$24565) (begin '#f ((lambda (g$214$24567) (if g$214$24567 (begin '#f ((lambda (g$214$24569) (if g$214$24569 (begin '#f (append g$214$24567 g$214$24569)) '#f)) ((lambda (g$214$24571) (if (g$214$15954 g$214$24571) (begin '#f ((lambda (g$214$24573) (if g$214$24573 (begin '#f ((lambda (g$214$24575) (if g$214$24575 (begin '#f (append g$214$24573 g$214$24575)) '#f)) ((lambda (g$214$24577) (if (g$214$15954 g$214$24577) (begin '#f ((lambda (g$214$24579) (if g$214$24579 (begin '#f ((lambda (g$214$24581) (if g$214$24581 (begin '#f (append g$214$24579 g$214$24581)) '#f)) ((letrec ((g$214$24583 (lambda (g$214$24585) (if (g$214$15954 g$214$24585) ((lambda (g$214$24587) (if g$214$24587 (begin '#f ((lambda (g$214$24589) (if g$214$24589 (begin '#f (map cons g$214$24587 g$214$24589)) '#f)) (g$214$24583 (g$214$15964 g$214$24585)))) '#f)) ((lambda (g$214$24591) (list g$214$24591)) (g$214$15962 g$214$24585))) (if (g$214$15958 g$214$24585) (list (begin 'xbody* '())) '#f))))) g$214$24583) (g$214$15964 g$214$24577)))) '#f)) ((lambda (g$214$24593) (list g$214$24593)) (g$214$15962 g$214$24577)))) '#f)) (g$214$15964 g$214$24571)))) '#f)) ((letrec ((g$214$24595 (lambda (g$214$24597) (if (g$214$15954 g$214$24597) ((lambda (g$214$24599) (if g$214$24599 (begin '#f ((lambda (g$214$24601) (if g$214$24601 (begin '#f (map cons g$214$24599 g$214$24601)) '#f)) (g$214$24595 (g$214$15964 g$214$24597)))) '#f)) ((lambda (g$214$24603) (if (g$214$15954 g$214$24603) (begin '#f ((lambda (g$214$24605) (if g$214$24605 (begin '#f ((lambda (g$214$24607) (if g$214$24607 (begin '#f (append g$214$24605 g$214$24607)) '#f)) ((lambda (g$214$24609) (if (g$214$15954 g$214$24609) (begin '#f ((lambda (g$214$24611) (if g$214$24611 (begin '#f ((lambda (g$214$24613) (if g$214$24613 (begin '#f (append g$214$24611 g$214$24613)) '#f)) ((lambda (g$214$24615) (if (equal? (g$214$15990 g$214$24615) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$24609)))) '#f)) ((lambda (g$214$24617) (list g$214$24617)) (g$214$15962 g$214$24609)))) '#f)) (g$214$15964 g$214$24603)))) '#f)) ((lambda (g$214$24619) (list g$214$24619)) (g$214$15962 g$214$24603)))) '#f)) (g$214$15962 g$214$24597))) (if (g$214$15958 g$214$24597) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f))))) g$214$24595) (g$214$15962 g$214$24571)))) '#f)) (g$214$15964 g$214$24565)))) '#f)) ((lambda (g$214$24621) '()) (g$214$15962 g$214$24565)))) '#f)) g$214$24535))) g$214$24512) (if (memv g$214$24533 '(displaced-lexical)) (g$214$16703 '#f '"identifier out of context" g$214$24512) (if (memv g$214$24533 '(syntax)) (g$214$16703 '#f '"reference to pattern variable outside a syntax form" g$214$24512) (if (memv g$214$24533 '(define define-syntax module import library)) (g$214$16703 '#f (string-append ((lambda (g$214$24534) (if (memv g$214$24534 '(define)) '"a definition" (if (memv g$214$24534 '(define-syntax)) '"a define-syntax" (if (memv g$214$24534 '(module)) '"a module definition" (if (memv g$214$24534 '(library)) '"a library definition" (if (memv g$214$24534 '(import)) '"an import declaration" '"a non-expression")))))) g$214$24529) '" was found where an expression was expected") g$214$24512) (if (memv g$214$24533 '(mutable)) (g$214$16703 '#f '"attempt to reference an unexportable variable" g$214$24512) (g$214$16703 '#f '"invalid expression" g$214$24512)))))))))))))))))) g$214$24529)) g$214$24523 g$214$24522 g$214$24521))))) (g$214$16590 (lambda (g$214$24673 g$214$24674 g$214$24675) ((lambda (g$214$24679) ((lambda (g$214$24681) (if (if g$214$24681 (begin '#f (apply (lambda (g$214$24683 g$214$24684) (g$214$15968 g$214$24683)) g$214$24681)) '#f) (apply (lambda (g$214$24687 g$214$24688) (call-with-values (lambda () (g$214$16004 g$214$24687 g$214$24674)) (lambda (g$214$24694 g$214$24695 g$214$24696) ((lambda (g$214$24700 g$214$24701 g$214$24702) ((lambda (g$214$24706) (if (memv g$214$24706 '(lexical)) (begin (g$214$16460 g$214$24701 '#t) (list 'set! (g$214$16456 g$214$24701) (g$214$16588 g$214$24688 g$214$24674 g$214$24675))) (if (memv g$214$24706 '(core-prim)) (g$214$16703 '#f '"cannot modify imported core primitive" g$214$24673) (if (memv g$214$24706 '(global)) ((lambda (g$214$24707) ((lambda (g$214$24709) (list 'set! g$214$24707 g$214$24709)) (g$214$16588 g$214$24688 g$214$24674 g$214$24675))) (g$214$16616 g$214$24687 g$214$24673)) (if (memv g$214$24706 '(global-macro!)) (g$214$16588 (g$214$16582 g$214$24701 g$214$24673) g$214$24674 g$214$24675) (if (memv g$214$24706 '(local-macro!)) (g$214$16588 (g$214$16580 g$214$24701 g$214$24673) g$214$24674 g$214$24675) (if (memv g$214$24706 '(mutable)) (g$214$16703 '#f '"attempt to assign to an unexportable variable" g$214$24673) (g$214$16703 '#f '"invalid syntax" g$214$24673)))))))) g$214$24702)) g$214$24696 g$214$24695 g$214$24694)))) g$214$24681) (g$214$16703 '#f '"invalid syntax" g$214$24679))) ((lambda (g$214$24711) (if (g$214$15954 g$214$24711) (begin '#f ((lambda (g$214$24713) (if g$214$24713 (begin '#f ((lambda (g$214$24715) (if g$214$24715 (begin '#f (append g$214$24713 g$214$24715)) '#f)) ((lambda (g$214$24717) (if (g$214$15954 g$214$24717) (begin '#f ((lambda (g$214$24719) (if g$214$24719 (begin '#f ((lambda (g$214$24721) (if g$214$24721 (begin '#f (append g$214$24719 g$214$24721)) '#f)) ((lambda (g$214$24723) (if (g$214$15954 g$214$24723) (begin '#f ((lambda (g$214$24725) (if g$214$24725 (begin '#f ((lambda (g$214$24727) (if g$214$24727 (begin '#f (append g$214$24725 g$214$24727)) '#f)) ((lambda (g$214$24729) (if (equal? (g$214$15990 g$214$24729) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$24723)))) '#f)) ((lambda (g$214$24731) (list g$214$24731)) (g$214$15962 g$214$24723)))) '#f)) (g$214$15964 g$214$24717)))) '#f)) ((lambda (g$214$24733) (list g$214$24733)) (g$214$15962 g$214$24717)))) '#f)) (g$214$15964 g$214$24711)))) '#f)) ((lambda (g$214$24735) '()) (g$214$15962 g$214$24711)))) '#f)) g$214$24679))) g$214$24673))) (g$214$16592 (lambda (g$214$24737 g$214$24738 g$214$24739 g$214$24740 g$214$24741) ((lambda (g$214$24747) ((lambda (g$214$24749) (if (if g$214$24749 (begin '#f (apply (lambda (g$214$24751) '#t) g$214$24749)) '#f) (apply (lambda (g$214$24753) (if (g$214$15978 g$214$24753) ((lambda (g$214$24755 g$214$24756) (values g$214$24755 (g$214$16604 (g$214$15948 (g$214$15915 g$214$24753 g$214$24756) g$214$24739) (g$214$16464 g$214$24756 g$214$24755 g$214$24740) g$214$24741))) (map g$214$15878 g$214$24753) (map g$214$15882 g$214$24753)) (g$214$16496 g$214$24737 g$214$24738))) g$214$24749) ((lambda (g$214$24759) ((lambda (g$214$24761) (if (if g$214$24761 (begin '#f (apply (lambda (g$214$24763 g$214$24764) '#t) g$214$24761)) '#f) (apply (lambda (g$214$24767 g$214$24768) (if (g$214$15978 (cons g$214$24768 g$214$24767)) ((lambda (g$214$24771 g$214$24772 g$214$24773 g$214$24774) (values (append g$214$24771 g$214$24773) (g$214$16604 (g$214$15948 (g$214$15915 (cons g$214$24768 g$214$24767) (cons g$214$24774 g$214$24772)) g$214$24739) (g$214$16464 (cons g$214$24774 g$214$24772) (cons g$214$24773 g$214$24771) g$214$24740) g$214$24741))) (map g$214$15878 g$214$24767) (map g$214$15882 g$214$24767) (g$214$15878 g$214$24768) (g$214$15882 g$214$24768)) (g$214$16496 g$214$24737 g$214$24738))) g$214$24761) ((lambda (g$214$24779) ((lambda (g$214$24781) (if (if g$214$24781 (begin '#f (apply (lambda () '#t) g$214$24781)) '#f) (apply (lambda () (g$214$16703 '#f '"invalid syntax" g$214$24738)) g$214$24781) (g$214$16703 '#f '"invalid syntax" g$214$24779))) ((lambda (g$214$24783) '()) g$214$24779))) g$214$24759))) ((letrec ((g$214$24785 (lambda (g$214$24791) (if (g$214$15954 g$214$24791) ((lambda (g$214$24793) (if g$214$24793 (begin '#f ((lambda (g$214$24795) (if g$214$24795 (begin '#f (cons (map cons g$214$24793 (car g$214$24795)) (cdr g$214$24795))) '#f)) (g$214$24785 (g$214$15964 g$214$24791)))) '#f)) ((lambda (g$214$24797) (list g$214$24797)) (g$214$15962 g$214$24791))) ((lambda (g$214$24799) (if g$214$24799 (begin '#f (cons (list (begin 'x* '())) g$214$24799)) '#f)) ((lambda (g$214$24801) (list g$214$24801)) g$214$24791)))))) (lambda (g$214$24787) ((lambda (g$214$24789) (if g$214$24789 (begin '#f (append (car g$214$24789) (cdr g$214$24789))) '#f)) (g$214$24785 g$214$24787)))) g$214$24759))) g$214$24747))) ((letrec ((g$214$24803 (lambda (g$214$24805) (if (g$214$15954 g$214$24805) ((lambda (g$214$24807) (if g$214$24807 (begin '#f ((lambda (g$214$24809) (if g$214$24809 (begin '#f (map cons g$214$24807 g$214$24809)) '#f)) (g$214$24803 (g$214$15964 g$214$24805)))) '#f)) ((lambda (g$214$24811) (list g$214$24811)) (g$214$15962 g$214$24805))) (if (g$214$15958 g$214$24805) (list (begin 'x* '())) '#f))))) g$214$24803) g$214$24747))) g$214$24738))) (g$214$16594 (lambda (g$214$24813 g$214$24814 g$214$24815 g$214$24816 g$214$24817) (if (null? g$214$24814) (values '() '()) (call-with-values (lambda () (g$214$16592 g$214$24813 (car g$214$24814) (car g$214$24815) g$214$24816 g$214$24817)) (lambda (g$214$24825 g$214$24826) ((lambda (g$214$24829 g$214$24830) (call-with-values (lambda () (g$214$16594 g$214$24813 (cdr g$214$24814) (cdr g$214$24815) g$214$24816 g$214$24817)) (lambda (g$214$24835 g$214$24836) ((lambda (g$214$24839 g$214$24840) (values (cons g$214$24830 g$214$24840) (cons g$214$24829 g$214$24839))) g$214$24836 g$214$24835)))) g$214$24826 g$214$24825)))))) (g$214$16596 (lambda (g$214$24843 g$214$24844 g$214$24845) ((lambda (g$214$24849) (if (memv g$214$24849 '(defun)) ((lambda (g$214$24854) ((lambda (g$214$24856 g$214$24857) (call-with-values (lambda () (g$214$16592 g$214$24856 g$214$24856 g$214$24857 g$214$24844 g$214$24845)) (lambda (g$214$24862 g$214$24863) ((lambda (g$214$24866 g$214$24867) (g$214$15848 '#f g$214$24867 g$214$24866)) g$214$24863 g$214$24862)))) (car g$214$24854) (cdr g$214$24854))) (cdr g$214$24843)) (if (memv g$214$24849 '(expr)) ((lambda (g$214$24852) (g$214$16588 g$214$24852 g$214$24844 g$214$24845)) (cdr g$214$24843)) (if (memv g$214$24849 '(top-expr)) ((lambda (g$214$24850) (g$214$15851 '#f (list (g$214$16588 g$214$24850 g$214$24844 g$214$24845) (g$214$15852)))) (cdr g$214$24843)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" g$214$24843))))) (car g$214$24843)))) (g$214$16598 (lambda (g$214$24870 g$214$24871 g$214$24872) ((letrec ((g$214$24876 (lambda (g$214$24878) (if (null? g$214$24878) '() ((lambda (g$214$24880) (cons g$214$24880 (g$214$24876 (cdr g$214$24878)))) (g$214$16596 (car g$214$24878) g$214$24871 g$214$24872)))))) g$214$24876) g$214$24870))) (g$214$16600 (lambda (g$214$24882 g$214$24883 g$214$24884) (if (null? g$214$24883) '#f (if (g$214$15974 g$214$24882 (car g$214$24883)) (car g$214$24884) (g$214$16600 g$214$24882 (cdr g$214$24883) (cdr g$214$24884)))))) (g$214$16602 (lambda (g$214$24888) ((letrec ((g$214$24890 (lambda (g$214$24892 g$214$24893) (if (null? g$214$24892) g$214$24893 ((lambda (g$214$24896) (if g$214$24896 ((lambda (g$214$24898) (g$214$24890 (cdr g$214$24892) (cons (list (car g$214$24892) g$214$24898) g$214$24893))) g$214$24896) (g$214$24890 (cdr g$214$24892) g$214$24893))) (g$214$16600 (car g$214$24892) (cdr g$214$24892) (cdr g$214$24892))))))) g$214$24890) g$214$24888 '()))) (g$214$16604 (lambda (g$214$24900 g$214$24901 g$214$24902) ((lambda (g$214$24906) (call-with-values (lambda () (g$214$16610 (map (lambda (g$214$24915) (g$214$15948 g$214$24906 g$214$24915)) (g$214$15966 g$214$24900)) g$214$24901 g$214$24902 '() '() '() '() g$214$24906 '#f)) (lambda (g$214$24917 g$214$24918 g$214$24919 g$214$24920 g$214$24921 g$214$24922 g$214$24923) ((lambda (g$214$24931 g$214$24932 g$214$24933 g$214$24934 g$214$24935 g$214$24936 g$214$24937) (begin (if (null? g$214$24937) (g$214$16703 '#f '"no expression in body" g$214$24937) (void)) ((lambda (g$214$24945) ((lambda (g$214$24947) ((lambda () (g$214$15854 '#f (reverse g$214$24934) (reverse g$214$24947) (g$214$15851 '#f g$214$24945))))) (g$214$16598 g$214$24933 g$214$24936 g$214$24935))) (g$214$16584 (append (apply append (reverse g$214$24932)) g$214$24937) g$214$24936 g$214$24935)))) g$214$24923 g$214$24922 g$214$24921 g$214$24920 g$214$24919 g$214$24918 g$214$24917)))) (g$214$15905)))) (g$214$16606 (lambda (g$214$24949) ((lambda (g$214$24951) ((lambda (g$214$24953) (if (if g$214$24953 (begin '#f (apply (lambda (g$214$24955 g$214$24956) '#t) g$214$24953)) '#f) (apply (lambda (g$214$24959 g$214$24960) (begin (if (for-all g$214$15968 g$214$24959) (void) (g$214$16703 '#f '"module exports must be identifiers" g$214$24949)) (values '#f (list->vector g$214$24959) g$214$24960))) g$214$24953) ((lambda (g$214$24963) ((lambda (g$214$24965) (if (if g$214$24965 (begin '#f (apply (lambda (g$214$24967 g$214$24968 g$214$24969) '#t) g$214$24965)) '#f) (apply (lambda (g$214$24973 g$214$24974 g$214$24975) (begin (if (g$214$15968 g$214$24973) (void) (g$214$16703 '#f '"module name must be an identifier" g$214$24949)) (if (for-all g$214$15968 g$214$24974) (void) (g$214$16703 '#f '"module exports must be identifiers" g$214$24949)) (values g$214$24973 (list->vector g$214$24974) g$214$24975))) g$214$24965) (g$214$16703 '#f '"invalid syntax" g$214$24963))) ((lambda (g$214$24979) (if (g$214$15954 g$214$24979) (begin '#f ((lambda (g$214$24981) (if g$214$24981 (begin '#f ((lambda (g$214$24983) (if g$214$24983 (begin '#f (append g$214$24981 g$214$24983)) '#f)) ((lambda (g$214$24985) (if (g$214$15954 g$214$24985) (begin '#f ((lambda (g$214$24987) (if g$214$24987 (begin '#f ((lambda (g$214$24989) (if g$214$24989 (begin '#f (append g$214$24987 g$214$24989)) '#f)) ((lambda (g$214$24991) (if (g$214$15954 g$214$24991) (begin '#f ((lambda (g$214$24993) (if g$214$24993 (begin '#f ((lambda (g$214$24995) (if g$214$24995 (begin '#f (append g$214$24993 g$214$24995)) '#f)) ((letrec ((g$214$24997 (lambda (g$214$24999) (if (g$214$15954 g$214$24999) ((lambda (g$214$25001) (if g$214$25001 (begin '#f ((lambda (g$214$25003) (if g$214$25003 (begin '#f (map cons g$214$25001 g$214$25003)) '#f)) (g$214$24997 (g$214$15964 g$214$24999)))) '#f)) ((lambda (g$214$25005) (list g$214$25005)) (g$214$15962 g$214$24999))) (if (g$214$15958 g$214$24999) (list (begin 'b* '())) '#f))))) g$214$24997) (g$214$15964 g$214$24991)))) '#f)) ((letrec ((g$214$25007 (lambda (g$214$25009) (if (g$214$15954 g$214$25009) ((lambda (g$214$25011) (if g$214$25011 (begin '#f ((lambda (g$214$25013) (if g$214$25013 (begin '#f (map cons g$214$25011 g$214$25013)) '#f)) (g$214$25007 (g$214$15964 g$214$25009)))) '#f)) ((lambda (g$214$25015) (list g$214$25015)) (g$214$15962 g$214$25009))) (if (g$214$15958 g$214$25009) (list (begin 'export* '())) '#f))))) g$214$25007) (g$214$15962 g$214$24991)))) '#f)) (g$214$15964 g$214$24985)))) '#f)) ((lambda (g$214$25017) (list g$214$25017)) (g$214$15962 g$214$24985)))) '#f)) (g$214$15964 g$214$24979)))) '#f)) ((lambda (g$214$25019) '()) (g$214$15962 g$214$24979)))) '#f)) g$214$24963))) g$214$24951))) ((lambda (g$214$25021) (if (g$214$15954 g$214$25021) (begin '#f ((lambda (g$214$25023) (if g$214$25023 (begin '#f ((lambda (g$214$25025) (if g$214$25025 (begin '#f (append g$214$25023 g$214$25025)) '#f)) ((lambda (g$214$25027) (if (g$214$15954 g$214$25027) (begin '#f ((lambda (g$214$25029) (if g$214$25029 (begin '#f ((lambda (g$214$25031) (if g$214$25031 (begin '#f (append g$214$25029 g$214$25031)) '#f)) ((letrec ((g$214$25033 (lambda (g$214$25035) (if (g$214$15954 g$214$25035) ((lambda (g$214$25037) (if g$214$25037 (begin '#f ((lambda (g$214$25039) (if g$214$25039 (begin '#f (map cons g$214$25037 g$214$25039)) '#f)) (g$214$25033 (g$214$15964 g$214$25035)))) '#f)) ((lambda (g$214$25041) (list g$214$25041)) (g$214$15962 g$214$25035))) (if (g$214$15958 g$214$25035) (list (begin 'b* '())) '#f))))) g$214$25033) (g$214$15964 g$214$25027)))) '#f)) ((letrec ((g$214$25043 (lambda (g$214$25045) (if (g$214$15954 g$214$25045) ((lambda (g$214$25047) (if g$214$25047 (begin '#f ((lambda (g$214$25049) (if g$214$25049 (begin '#f (map cons g$214$25047 g$214$25049)) '#f)) (g$214$25043 (g$214$15964 g$214$25045)))) '#f)) ((lambda (g$214$25051) (list g$214$25051)) (g$214$15962 g$214$25045))) (if (g$214$15958 g$214$25045) (list (begin 'export* '())) '#f))))) g$214$25043) (g$214$15962 g$214$25027)))) '#f)) (g$214$15964 g$214$25021)))) '#f)) ((lambda (g$214$25053) '()) (g$214$15962 g$214$25021)))) '#f)) g$214$24951))) g$214$24949))) (g$214$16608 (lambda (g$214$25055 g$214$25056 g$214$25057 g$214$25058 g$214$25059 g$214$25060 g$214$25061) (call-with-values (lambda () (g$214$16606 g$214$25055)) (lambda (g$214$25072 g$214$25073 g$214$25074) ((lambda (g$214$25078 g$214$25079 g$214$25080) ((lambda (g$214$25084) ((lambda (g$214$25086) ((lambda () (call-with-values (lambda () (g$214$16610 g$214$25086 g$214$25056 g$214$25057 g$214$25058 g$214$25059 g$214$25060 g$214$25061 g$214$25084 '#f)) (lambda (g$214$25095 g$214$25096 g$214$25097 g$214$25098 g$214$25099 g$214$25100 g$214$25101) ((lambda (g$214$25109 g$214$25110 g$214$25111 g$214$25112 g$214$25113 g$214$25114 g$214$25115) ((lambda (g$214$25123 g$214$25124) (if (not g$214$25080) (values g$214$25112 g$214$25111 g$214$25079 g$214$25123 g$214$25114 g$214$25113 g$214$25124 g$214$25109) ((lambda (g$214$25127 g$214$25128) (values g$214$25112 g$214$25111 (vector g$214$25080) (vector g$214$25127) (cons (cons g$214$25127 (cons '$module g$214$25128)) g$214$25114) (cons (cons g$214$25127 (cons '$module g$214$25128)) g$214$25113) g$214$25124 g$214$25109)) (g$214$15882 'module) (cons g$214$25079 g$214$25123)))) (vector-map (lambda (g$214$25131) ((lambda (g$214$25133) (if g$214$25133 g$214$25133 (begin '#f (g$214$16703 '#f '"cannot find module export" g$214$25131)))) (g$214$15992 (g$214$15944 (g$214$15970 g$214$25131) (g$214$15924 g$214$25131) (list g$214$25084))))) g$214$25079) (cons g$214$25115 g$214$25110))) g$214$25101 g$214$25100 g$214$25099 g$214$25098 g$214$25097 g$214$25096 g$214$25095)))))) (map (lambda (g$214$25135) (g$214$15948 g$214$25084 g$214$25135)) (g$214$15966 g$214$25078)))) (g$214$15905))) g$214$25074 g$214$25073 g$214$25072))))) (g$214$16610 (lambda (g$214$25137 g$214$25138 g$214$25139 g$214$25140 g$214$25141 g$214$25142 g$214$25143 g$214$25144 g$214$25145) (if (null? g$214$25137) (values g$214$25137 g$214$25138 g$214$25139 g$214$25140 g$214$25141 g$214$25142 g$214$25143) ((lambda (g$214$25155) (call-with-values (lambda () (g$214$16004 g$214$25155 g$214$25138)) (lambda (g$214$25160 g$214$25161 g$214$25162) ((lambda (g$214$25166 g$214$25167 g$214$25168) ((lambda (g$214$25172) ((lambda (g$214$25174) (if (memv g$214$25174 '(define)) (call-with-values (lambda () (g$214$16450 g$214$25155)) (lambda (g$214$25521 g$214$25522) ((lambda (g$214$25525 g$214$25526) (begin (if (g$214$15982 g$214$25526 g$214$25172) (g$214$16703 '#f '"cannot redefine keyword" g$214$25155) (void)) ((lambda (g$214$25529 g$214$25530) (begin (g$214$15907 g$214$25144 g$214$25526 g$214$25530) (g$214$16610 (cdr g$214$25137) (g$214$16462 g$214$25530 g$214$25529 g$214$25138) g$214$25139 (cons g$214$25529 g$214$25140) (cons g$214$25525 g$214$25141) g$214$25142 g$214$25172 g$214$25144 g$214$25145))) (g$214$15878 g$214$25526) (g$214$15882 g$214$25526)))) g$214$25522 g$214$25521))) (if (memv g$214$25174 '(define-syntax)) (call-with-values (lambda () (g$214$16452 g$214$25155)) (lambda (g$214$25505 g$214$25506) ((lambda (g$214$25509 g$214$25510) (begin (if (g$214$15982 g$214$25510 g$214$25172) (g$214$16703 '#f '"cannot redefine keyword" g$214$25155) (void)) ((lambda (g$214$25513 g$214$25514) (begin (g$214$15907 g$214$25144 g$214$25510 g$214$25513) ((lambda (g$214$25517) (g$214$16610 (cdr g$214$25137) (cons (cons g$214$25513 g$214$25517) g$214$25138) (cons (cons g$214$25513 g$214$25517) g$214$25139) g$214$25140 g$214$25141 g$214$25142 g$214$25172 g$214$25144 g$214$25145)) (g$214$16031 g$214$25514)))) (g$214$15882 g$214$25510) (g$214$16620 g$214$25509 g$214$25139)))) g$214$25506 g$214$25505))) (if (memv g$214$25174 '(let-syntax letrec-syntax)) ((lambda (g$214$25427) ((lambda (g$214$25429) (if (if g$214$25429 (begin '#f (apply (lambda (g$214$25431 g$214$25432 g$214$25433) (if (g$214$15978 g$214$25431) (void) (g$214$16703 '#f '"invalid identifiers" g$214$25155))) g$214$25429)) '#f) (apply (lambda (g$214$25437 g$214$25438 g$214$25439) ((lambda (g$214$25443) ((lambda (g$214$25445) ((lambda (g$214$25447) ((lambda () (g$214$16610 (append (map (lambda (g$214$25449) (g$214$15948 g$214$25445 g$214$25449)) g$214$25439) (cdr g$214$25137)) (append (map cons g$214$25443 g$214$25447) g$214$25138) (append (map cons g$214$25443 g$214$25447) g$214$25139) g$214$25140 g$214$25141 g$214$25142 g$214$25172 g$214$25144 g$214$25145)))) (map (lambda (g$214$25451) (g$214$16031 (g$214$16620 (if (eq? g$214$25168 'let-syntax) g$214$25451 (g$214$15948 g$214$25445 g$214$25451)) g$214$25139))) g$214$25438))) (g$214$15915 g$214$25437 g$214$25443))) (map g$214$15882 g$214$25437))) g$214$25429) (g$214$16703 '#f '"invalid syntax" g$214$25427))) ((lambda (g$214$25453) (if (g$214$15954 g$214$25453) (begin '#f ((lambda (g$214$25455) (if g$214$25455 (begin '#f ((lambda (g$214$25457) (if g$214$25457 (begin '#f (append g$214$25455 g$214$25457)) '#f)) ((lambda (g$214$25459) (if (g$214$15954 g$214$25459) (begin '#f ((lambda (g$214$25461) (if g$214$25461 (begin '#f ((lambda (g$214$25463) (if g$214$25463 (begin '#f (append g$214$25461 g$214$25463)) '#f)) ((letrec ((g$214$25465 (lambda (g$214$25467) (if (g$214$15954 g$214$25467) ((lambda (g$214$25469) (if g$214$25469 (begin '#f ((lambda (g$214$25471) (if g$214$25471 (begin '#f (map cons g$214$25469 g$214$25471)) '#f)) (g$214$25465 (g$214$15964 g$214$25467)))) '#f)) ((lambda (g$214$25473) (list g$214$25473)) (g$214$15962 g$214$25467))) (if (g$214$15958 g$214$25467) (list (begin 'xbody* '())) '#f))))) g$214$25465) (g$214$15964 g$214$25459)))) '#f)) ((letrec ((g$214$25475 (lambda (g$214$25477) (if (g$214$15954 g$214$25477) ((lambda (g$214$25479) (if g$214$25479 (begin '#f ((lambda (g$214$25481) (if g$214$25481 (begin '#f (map cons g$214$25479 g$214$25481)) '#f)) (g$214$25475 (g$214$15964 g$214$25477)))) '#f)) ((lambda (g$214$25483) (if (g$214$15954 g$214$25483) (begin '#f ((lambda (g$214$25485) (if g$214$25485 (begin '#f ((lambda (g$214$25487) (if g$214$25487 (begin '#f (append g$214$25485 g$214$25487)) '#f)) ((lambda (g$214$25489) (if (g$214$15954 g$214$25489) (begin '#f ((lambda (g$214$25491) (if g$214$25491 (begin '#f ((lambda (g$214$25493) (if g$214$25493 (begin '#f (append g$214$25491 g$214$25493)) '#f)) ((lambda (g$214$25495) (if (equal? (g$214$15990 g$214$25495) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$25489)))) '#f)) ((lambda (g$214$25497) (list g$214$25497)) (g$214$15962 g$214$25489)))) '#f)) (g$214$15964 g$214$25483)))) '#f)) ((lambda (g$214$25499) (list g$214$25499)) (g$214$15962 g$214$25483)))) '#f)) (g$214$15962 g$214$25477))) (if (g$214$15958 g$214$25477) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f))))) g$214$25475) (g$214$15962 g$214$25459)))) '#f)) (g$214$15964 g$214$25453)))) '#f)) ((lambda (g$214$25501) '()) (g$214$15962 g$214$25453)))) '#f)) g$214$25427))) g$214$25155) (if (memv g$214$25174 '(begin)) ((lambda (g$214$25401) ((lambda (g$214$25403) (if (if g$214$25403 (begin '#f (apply (lambda (g$214$25405) '#t) g$214$25403)) '#f) (apply (lambda (g$214$25407) (g$214$16610 (append g$214$25407 (cdr g$214$25137)) g$214$25138 g$214$25139 g$214$25140 g$214$25141 g$214$25142 g$214$25172 g$214$25144 g$214$25145)) g$214$25403) (g$214$16703 '#f '"invalid syntax" g$214$25401))) ((lambda (g$214$25409) (if (g$214$15954 g$214$25409) (begin '#f ((lambda (g$214$25411) (if g$214$25411 (begin '#f ((lambda (g$214$25413) (if g$214$25413 (begin '#f (append g$214$25411 g$214$25413)) '#f)) ((letrec ((g$214$25415 (lambda (g$214$25417) (if (g$214$15954 g$214$25417) ((lambda (g$214$25419) (if g$214$25419 (begin '#f ((lambda (g$214$25421) (if g$214$25421 (begin '#f (map cons g$214$25419 g$214$25421)) '#f)) (g$214$25415 (g$214$15964 g$214$25417)))) '#f)) ((lambda (g$214$25423) (list g$214$25423)) (g$214$15962 g$214$25417))) (if (g$214$15958 g$214$25417) (list (begin 'x* '())) '#f))))) g$214$25415) (g$214$15964 g$214$25409)))) '#f)) ((lambda (g$214$25425) '()) (g$214$15962 g$214$25409)))) '#f)) g$214$25401))) g$214$25155) (if (memv g$214$25174 '(global-macro global-macro!)) (g$214$16610 (cons (g$214$15948 g$214$25144 (g$214$16582 g$214$25167 g$214$25155)) (cdr g$214$25137)) g$214$25138 g$214$25139 g$214$25140 g$214$25141 g$214$25142 g$214$25172 g$214$25144 g$214$25145) (if (memv g$214$25174 '(local-macro local-macro!)) (g$214$16610 (cons (g$214$15948 g$214$25144 (g$214$16580 g$214$25167 g$214$25155)) (cdr g$214$25137)) g$214$25138 g$214$25139 g$214$25140 g$214$25141 g$214$25142 g$214$25172 g$214$25144 g$214$25145) (if (memv g$214$25174 '(macro macro!)) (g$214$16610 (cons (g$214$15948 g$214$25144 (g$214$16578 g$214$25167 g$214$25155)) (cdr g$214$25137)) g$214$25138 g$214$25139 g$214$25140 g$214$25141 g$214$25142 g$214$25172 g$214$25144 g$214$25145) (if (memv g$214$25174 '(module)) (call-with-values (lambda () (g$214$16608 g$214$25155 g$214$25138 g$214$25139 g$214$25140 g$214$25141 g$214$25142 g$214$25172)) (lambda (g$214$25365 g$214$25366 g$214$25367 g$214$25368 g$214$25369 g$214$25370 g$214$25371 g$214$25372) ((lambda (g$214$25381 g$214$25382 g$214$25383 g$214$25384 g$214$25385 g$214$25386 g$214$25387 g$214$25388) (begin (vector-for-each (lambda (g$214$25397 g$214$25398) (g$214$15907 g$214$25144 g$214$25397 g$214$25398)) g$214$25386 g$214$25385) (g$214$16610 (cdr g$214$25137) g$214$25384 g$214$25383 g$214$25388 g$214$25387 g$214$25382 g$214$25381 g$214$25144 g$214$25145))) g$214$25372 g$214$25371 g$214$25370 g$214$25369 g$214$25368 g$214$25367 g$214$25366 g$214$25365))) (if (memv g$214$25174 '(library)) (begin (g$214$16679 (g$214$15990 g$214$25155)) (g$214$16610 (cdr g$214$25137) g$214$25138 g$214$25139 g$214$25140 g$214$25141 g$214$25142 g$214$25172 g$214$25144 g$214$25145)) (if (memv g$214$25174 '(import)) (begin ((lambda () (letrec ((g$214$25175 (lambda (g$214$25297) ((lambda (g$214$25299) ((lambda (g$214$25301) (if (if g$214$25301 (begin '#f (apply (lambda (g$214$25303) (g$214$15968 g$214$25303)) g$214$25301)) '#f) (apply (lambda (g$214$25305) '#t) g$214$25301) ((lambda (g$214$25307) ((lambda (g$214$25309) (if (if g$214$25309 (begin '#f (apply (lambda (g$214$25311) '#t) g$214$25309)) '#f) (apply (lambda (g$214$25313) '#f) g$214$25309) ((lambda (g$214$25315) ((lambda (g$214$25317) (if (if g$214$25317 (begin '#f (apply (lambda () '#t) g$214$25317)) '#f) (apply (lambda () (g$214$16703 '#f '"malformed import form" g$214$25297)) g$214$25317) (g$214$16703 '#f '"invalid syntax" g$214$25315))) ((lambda (g$214$25319) '()) g$214$25315))) g$214$25307))) ((lambda (g$214$25321) (if (g$214$15954 g$214$25321) (begin '#f ((lambda (g$214$25323) (if g$214$25323 (begin '#f ((lambda (g$214$25325) (if g$214$25325 (begin '#f (append g$214$25323 g$214$25325)) '#f)) ((letrec ((g$214$25327 (lambda (g$214$25329) (if (g$214$15954 g$214$25329) ((lambda (g$214$25331) (if g$214$25331 (begin '#f ((lambda (g$214$25333) (if g$214$25333 (begin '#f (map cons g$214$25331 g$214$25333)) '#f)) (g$214$25327 (g$214$15964 g$214$25329)))) '#f)) ((lambda (g$214$25335) (list g$214$25335)) (g$214$15962 g$214$25329))) (if (g$214$15958 g$214$25329) (list (begin 'imp* '())) '#f))))) g$214$25327) (g$214$15964 g$214$25321)))) '#f)) ((lambda (g$214$25337) '()) (g$214$15962 g$214$25321)))) '#f)) g$214$25307))) g$214$25299))) ((lambda (g$214$25339) (if (g$214$15954 g$214$25339) (begin '#f ((lambda (g$214$25341) (if g$214$25341 (begin '#f ((lambda (g$214$25343) (if g$214$25343 (begin '#f (append g$214$25341 g$214$25343)) '#f)) ((lambda (g$214$25345) (if (g$214$15954 g$214$25345) (begin '#f ((lambda (g$214$25347) (if g$214$25347 (begin '#f ((lambda (g$214$25349) (if g$214$25349 (begin '#f (append g$214$25347 g$214$25349)) '#f)) ((lambda (g$214$25351) (if (equal? (g$214$15990 g$214$25351) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$25345)))) '#f)) ((lambda (g$214$25353) (list g$214$25353)) (g$214$15962 g$214$25345)))) '#f)) (g$214$15964 g$214$25339)))) '#f)) ((lambda (g$214$25355) '()) (g$214$15962 g$214$25339)))) '#f)) g$214$25299))) g$214$25297))) (g$214$25177 (lambda (g$214$25245 g$214$25246) ((lambda (g$214$25249) ((lambda (g$214$25251) (if (if g$214$25251 (begin '#f (apply (lambda (g$214$25253) (g$214$15968 g$214$25253)) g$214$25251)) '#f) (apply (lambda (g$214$25255) (call-with-values (lambda () (g$214$16004 g$214$25255 g$214$25246)) (lambda (g$214$25260 g$214$25261 g$214$25262) ((lambda (g$214$25266 g$214$25267 g$214$25268) ((lambda (g$214$25272) (if (memv g$214$25272 '($module)) ((lambda (g$214$25273) ((lambda (g$214$25275 g$214$25276) (values g$214$25275 g$214$25276)) (car g$214$25273) (cdr g$214$25273))) g$214$25267) (g$214$16703 '#f '"invalid import" g$214$25245))) g$214$25268)) g$214$25262 g$214$25261 g$214$25260)))) g$214$25251) (g$214$16703 '#f '"invalid syntax" g$214$25249))) ((lambda (g$214$25279) (if (g$214$15954 g$214$25279) (begin '#f ((lambda (g$214$25281) (if g$214$25281 (begin '#f ((lambda (g$214$25283) (if g$214$25283 (begin '#f (append g$214$25281 g$214$25283)) '#f)) ((lambda (g$214$25285) (if (g$214$15954 g$214$25285) (begin '#f ((lambda (g$214$25287) (if g$214$25287 (begin '#f ((lambda (g$214$25289) (if g$214$25289 (begin '#f (append g$214$25287 g$214$25289)) '#f)) ((lambda (g$214$25291) (if (equal? (g$214$15990 g$214$25291) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$25285)))) '#f)) ((lambda (g$214$25293) (list g$214$25293)) (g$214$15962 g$214$25285)))) '#f)) (g$214$15964 g$214$25279)))) '#f)) ((lambda (g$214$25295) '()) (g$214$15962 g$214$25279)))) '#f)) g$214$25249))) g$214$25245))) (g$214$25179 (lambda (g$214$25195) ((lambda (g$214$25197) ((lambda (g$214$25199) (if (if g$214$25199 (begin '#f (apply (lambda (g$214$25201 g$214$25202) '#t) g$214$25199)) '#f) (apply (lambda (g$214$25205 g$214$25206) (call-with-values (lambda () (g$214$16628 (g$214$16709 g$214$25206))) (lambda (g$214$25211 g$214$25212) ((lambda (g$214$25215 g$214$25216) (values (vector-map (lambda (g$214$25219) (g$214$15934 g$214$25205 g$214$25219)) g$214$25216) g$214$25215)) g$214$25212 g$214$25211)))) g$214$25199) ((lambda (g$214$25221) ((lambda (g$214$25223) (if (if g$214$25223 (begin '#f (apply (lambda () '#t) g$214$25223)) '#f) (apply (lambda () (g$214$16703 '#f '"invalid import form" g$214$25195)) g$214$25223) (g$214$16703 '#f '"invalid syntax" g$214$25221))) ((lambda (g$214$25225) '()) g$214$25221))) g$214$25197))) ((lambda (g$214$25227) (if (g$214$15954 g$214$25227) (begin '#f ((lambda (g$214$25229) (if g$214$25229 (begin '#f ((lambda (g$214$25231) (if g$214$25231 (begin '#f (append g$214$25229 g$214$25231)) '#f)) ((letrec ((g$214$25233 (lambda (g$214$25235) (if (g$214$15954 g$214$25235) ((lambda (g$214$25237) (if g$214$25237 (begin '#f ((lambda (g$214$25239) (if g$214$25239 (begin '#f (map cons g$214$25237 g$214$25239)) '#f)) (g$214$25233 (g$214$15964 g$214$25235)))) '#f)) ((lambda (g$214$25241) (list g$214$25241)) (g$214$15962 g$214$25235))) (if (g$214$15958 g$214$25235) (list (begin 'imp* '())) '#f))))) g$214$25233) (g$214$15964 g$214$25227)))) '#f)) ((lambda (g$214$25243) (list g$214$25243)) (g$214$15962 g$214$25227)))) '#f)) g$214$25197))) g$214$25195)))) (call-with-values (lambda () (if (g$214$25175 g$214$25155) (g$214$25177 g$214$25155 g$214$25138) (g$214$25179 g$214$25155))) (lambda (g$214$25183 g$214$25184) ((lambda (g$214$25187 g$214$25188) (vector-for-each (lambda (g$214$25191 g$214$25192) (g$214$15907 g$214$25144 g$214$25191 g$214$25192)) g$214$25188 g$214$25187)) g$214$25184 g$214$25183)))))) (g$214$16610 (cdr g$214$25137) g$214$25138 g$214$25139 g$214$25140 g$214$25141 g$214$25142 g$214$25172 g$214$25144 g$214$25145)) (if g$214$25145 (g$214$16610 (cdr g$214$25137) g$214$25138 g$214$25139 (cons (g$214$15878 'dummy) g$214$25140) (cons (cons 'top-expr g$214$25155) g$214$25141) g$214$25142 g$214$25172 g$214$25144 g$214$25145) (values g$214$25137 g$214$25138 g$214$25139 g$214$25140 g$214$25141 g$214$25142 g$214$25172))))))))))))) g$214$25168)) (if (g$214$15968 g$214$25166) (cons g$214$25166 g$214$25143) g$214$25143))) g$214$25162 g$214$25161 g$214$25160)))) (car g$214$25137))))) (g$214$16612 (lambda (g$214$25533 g$214$25534 g$214$25535) (letrec ((g$214$25539 (lambda (g$214$25542 g$214$25543 g$214$25544 g$214$25545) ((lambda (g$214$25550 g$214$25551) (begin (set-symbol-value! g$214$25543 g$214$25545) (g$214$15507 (g$214$16713) g$214$25550 g$214$25551) (g$214$15508 (g$214$16713) g$214$25551 (cons* g$214$25544 (g$214$16713) g$214$25543)))) (g$214$15970 g$214$25542) (g$214$15992 g$214$25542))))) ((lambda (g$214$25541) (if (memv g$214$25541 '(local-macro)) (g$214$25539 g$214$25533 g$214$25534 'global-macro (cadr g$214$25535)) (if (memv g$214$25541 '(local-macro!)) (g$214$25539 g$214$25533 g$214$25534 'global-macro! (cadr g$214$25535)) (if (memv g$214$25541 '($rtd)) (g$214$25539 g$214$25533 g$214$25534 'global-rtd (cdr g$214$25535)) (assertion-violation 'set-global-macro-binding! '"BUG: invalid type" g$214$25535))))) (g$214$15998 g$214$25535))))) (g$214$16614 (lambda (g$214$25554 g$214$25555) (g$214$16616 g$214$25554 g$214$25555))) (g$214$16616 (lambda (g$214$25558 g$214$25559) ((lambda (g$214$25562) ((lambda (g$214$25564) ((lambda (g$214$25566) (if (memv g$214$25566 '(global global-macro global-macro! global-rtd)) ((lambda (g$214$25567) ((lambda (g$214$25569 g$214$25570) (if (eq? g$214$25569 (g$214$16713)) g$214$25570 (g$214$16703 '#f '"cannot modify imported binding" g$214$25559))) (car g$214$25567) (cdr g$214$25567))) (g$214$16000 g$214$25564)) (g$214$16703 '#f '"cannot modify binding in" g$214$25559))) (g$214$15998 g$214$25564))) (g$214$15509 g$214$25562))) (g$214$15992 g$214$25558)))) (g$214$16618 (lambda (g$214$25573 g$214$25574) (if (null? g$214$25573) g$214$25574 ((lambda (g$214$25577) (call-with-values (lambda () (g$214$16004 g$214$25577 '())) (lambda (g$214$25582 g$214$25583 g$214$25584) ((lambda (g$214$25588 g$214$25589 g$214$25590) ((lambda (g$214$25594) (if (memv g$214$25594 '(define)) (call-with-values (lambda () (g$214$16450 g$214$25577)) (lambda (g$214$25691 g$214$25692) ((lambda (g$214$25695 g$214$25696) (begin (g$214$15507 (g$214$16713) (g$214$15970 g$214$25696) (g$214$15992 g$214$25696)) ((lambda (g$214$25699) (begin (g$214$15508 (g$214$16713) (g$214$15992 g$214$25696) (cons* 'global (g$214$16713) g$214$25699)) ((lambda (g$214$25701) (g$214$16618 (cdr g$214$25573) (cons (cons g$214$25699 g$214$25701) g$214$25574))) (g$214$16596 g$214$25695 '() '())))) (g$214$16616 g$214$25696 g$214$25577)))) g$214$25692 g$214$25691))) (if (memv g$214$25594 '(define-syntax)) (call-with-values (lambda () (g$214$16452 g$214$25577)) (lambda (g$214$25675 g$214$25676) ((lambda (g$214$25679 g$214$25680) ((lambda (g$214$25683) ((lambda (g$214$25685) ((lambda (g$214$25687) (begin (g$214$16612 g$214$25680 g$214$25683 g$214$25687) (g$214$16618 (cdr g$214$25573) g$214$25574))) (g$214$16031 g$214$25685))) (g$214$16620 g$214$25679 '()))) (g$214$16614 g$214$25680 g$214$25577))) g$214$25676 g$214$25675))) (if (memv g$214$25594 '(let-syntax letrec-syntax)) (assertion-violation 'chi-top* '"BUG: not supported yet at top level" g$214$25590) (if (memv g$214$25594 '(begin)) ((lambda (g$214$25647) ((lambda (g$214$25649) (if (if g$214$25649 (begin '#f (apply (lambda (g$214$25651) '#t) g$214$25649)) '#f) (apply (lambda (g$214$25653) (g$214$16618 (append g$214$25653 (cdr g$214$25573)) g$214$25574)) g$214$25649) (g$214$16703 '#f '"invalid syntax" g$214$25647))) ((lambda (g$214$25655) (if (g$214$15954 g$214$25655) (begin '#f ((lambda (g$214$25657) (if g$214$25657 (begin '#f ((lambda (g$214$25659) (if g$214$25659 (begin '#f (append g$214$25657 g$214$25659)) '#f)) ((letrec ((g$214$25661 (lambda (g$214$25663) (if (g$214$15954 g$214$25663) ((lambda (g$214$25665) (if g$214$25665 (begin '#f ((lambda (g$214$25667) (if g$214$25667 (begin '#f (map cons g$214$25665 g$214$25667)) '#f)) (g$214$25661 (g$214$15964 g$214$25663)))) '#f)) ((lambda (g$214$25669) (list g$214$25669)) (g$214$15962 g$214$25663))) (if (g$214$15958 g$214$25663) (list (begin 'x* '())) '#f))))) g$214$25661) (g$214$15964 g$214$25655)))) '#f)) ((lambda (g$214$25671) '()) (g$214$15962 g$214$25655)))) '#f)) g$214$25647))) g$214$25577) (if (memv g$214$25594 '(global-macro global-macro!)) (g$214$16618 (cons (g$214$16582 g$214$25589 g$214$25577) (cdr g$214$25573)) g$214$25574) (if (memv g$214$25594 '(local-macro local-macro!)) (g$214$16618 (cons (g$214$16580 g$214$25589 g$214$25577) (cdr g$214$25573)) g$214$25574) (if (memv g$214$25594 '(macro macro!)) (g$214$16618 (cons (g$214$16578 g$214$25589 g$214$25577) (cdr g$214$25573)) g$214$25574) (if (memv g$214$25594 '(library)) (begin (g$214$16679 (g$214$15990 g$214$25577)) (g$214$16618 (cdr g$214$25573) g$214$25574)) (if (memv g$214$25594 '(import)) (begin ((lambda (g$214$25595) ((lambda (g$214$25597) (if (if g$214$25597 (begin '#f (apply (lambda (g$214$25599 g$214$25600) '#t) g$214$25597)) '#f) (apply (lambda (g$214$25603 g$214$25604) (call-with-values (lambda () (g$214$16628 (g$214$16709 g$214$25604))) (lambda (g$214$25609 g$214$25610) ((lambda (g$214$25613 g$214$25614) ((lambda (g$214$25617) (if g$214$25617 ((lambda (g$214$25619) (vector-for-each (lambda (g$214$25621 g$214$25622) ((lambda (g$214$25625) (if g$214$25625 ((lambda (g$214$25627) (if (eq? (cdr g$214$25627) g$214$25622) (void) (g$214$16703 'import '"identifier conflict" g$214$25577 g$214$25621))) g$214$25625) (g$214$15507 g$214$25619 g$214$25621 g$214$25622))) (assq g$214$25621 (g$214$15475 g$214$25619)))) g$214$25614 g$214$25613)) g$214$25617) (assertion-violation 'import '"BUG: cannot happen"))) (g$214$16713))) g$214$25610 g$214$25609)))) g$214$25597) (g$214$16703 '#f '"invalid syntax" g$214$25595))) ((lambda (g$214$25629) (if (g$214$15954 g$214$25629) (begin '#f ((lambda (g$214$25631) (if g$214$25631 (begin '#f ((lambda (g$214$25633) (if g$214$25633 (begin '#f (append g$214$25631 g$214$25633)) '#f)) ((letrec ((g$214$25635 (lambda (g$214$25637) (if (g$214$15954 g$214$25637) ((lambda (g$214$25639) (if g$214$25639 (begin '#f ((lambda (g$214$25641) (if g$214$25641 (begin '#f (map cons g$214$25639 g$214$25641)) '#f)) (g$214$25635 (g$214$15964 g$214$25637)))) '#f)) ((lambda (g$214$25643) (list g$214$25643)) (g$214$15962 g$214$25637))) (if (g$214$15958 g$214$25637) (list (begin 'imp* '())) '#f))))) g$214$25635) (g$214$15964 g$214$25629)))) '#f)) ((lambda (g$214$25645) (list g$214$25645)) (g$214$15962 g$214$25629)))) '#f)) g$214$25595))) g$214$25577) (g$214$16618 (cdr g$214$25573) g$214$25574)) (g$214$16618 (cdr g$214$25573) (cons (cons '#f (g$214$16588 g$214$25577 '() '())) g$214$25574)))))))))))) g$214$25590)) g$214$25584 g$214$25583 g$214$25582)))) (car g$214$25573))))) (g$214$16620 (lambda (g$214$25703 g$214$25704) ((lambda (g$214$25707) ((lambda (g$214$25709) (begin (for-each ((lambda (g$214$25711) (lambda (g$214$25713) (begin (g$214$15510 g$214$25713) (g$214$25711 g$214$25713)))) (g$214$16636)) (g$214$25707)) g$214$25709)) ((lambda (g$214$25719 g$214$25720 g$214$25721 g$214$25722) ((lambda (g$214$25727) (dynamic-wind g$214$25727 (lambda () (g$214$16588 g$214$25703 g$214$25704 g$214$25704)) g$214$25727)) (lambda () (begin ((lambda (g$214$25729) (begin (g$214$25719 g$214$25721) (set! g$214$25721 g$214$25729))) (g$214$25719)) ((lambda (g$214$25731) (begin (g$214$25720 g$214$25722) (set! g$214$25722 g$214$25731))) (g$214$25720)))))) g$214$16634 g$214$16636 g$214$25707 (lambda (g$214$25733) (values))))) (g$214$16632)))) (g$214$16622 (lambda (g$214$25735) ((letrec ((g$214$25737 (lambda (g$214$25739 g$214$25740 g$214$25741) (if (null? g$214$25739) (begin ((lambda (g$214$25745) (if (g$214$15978 g$214$25745) (void) (g$214$16703 'export '"invalid exports" (g$214$16602 g$214$25745)))) (map (lambda (g$214$25747) (g$214$15944 g$214$25747 g$214$15874 '())) g$214$25741)) (values (map g$214$16709 g$214$25740) (map g$214$16709 g$214$25741))) ((lambda (g$214$25749) ((lambda (g$214$25751) (if (if g$214$25751 (begin '#f (apply (lambda (g$214$25753 g$214$25754 g$214$25755) '#t) g$214$25751)) '#f) (apply (lambda (g$214$25759 g$214$25760 g$214$25761) (begin (if (if (eq? (g$214$16709 g$214$25759) 'rename) (if (for-all g$214$15968 g$214$25760) (begin '#f (for-all g$214$15968 g$214$25761)) '#f) '#f) (void) (g$214$16703 'export '"invalid export specifier" (car g$214$25739))) (g$214$25737 (cdr g$214$25739) (append g$214$25760 g$214$25740) (append g$214$25761 g$214$25741)))) g$214$25751) ((lambda (g$214$25765) ((lambda (g$214$25767) (if (if g$214$25767 (begin '#f (apply (lambda (g$214$25769) '#t) g$214$25767)) '#f) (apply (lambda (g$214$25771) (begin (if (g$214$15968 g$214$25771) (void) (g$214$16703 'export '"invalid export" g$214$25771)) (g$214$25737 (cdr g$214$25739) (cons g$214$25771 g$214$25740) (cons g$214$25771 g$214$25741)))) g$214$25767) (g$214$16703 '#f '"invalid syntax" g$214$25765))) ((lambda (g$214$25773) (list g$214$25773)) g$214$25765))) g$214$25749))) ((lambda (g$214$25775) (if (g$214$15954 g$214$25775) (begin '#f ((lambda (g$214$25777) (if g$214$25777 (begin '#f ((lambda (g$214$25779) (if g$214$25779 (begin '#f (append g$214$25777 g$214$25779)) '#f)) ((letrec ((g$214$25781 (lambda (g$214$25783) (if (g$214$15954 g$214$25783) ((lambda (g$214$25785) (if g$214$25785 (begin '#f ((lambda (g$214$25787) (if g$214$25787 (begin '#f (map cons g$214$25785 g$214$25787)) '#f)) (g$214$25781 (g$214$15964 g$214$25783)))) '#f)) ((lambda (g$214$25789) (if (g$214$15954 g$214$25789) (begin '#f ((lambda (g$214$25791) (if g$214$25791 (begin '#f ((lambda (g$214$25793) (if g$214$25793 (begin '#f (append g$214$25791 g$214$25793)) '#f)) ((lambda (g$214$25795) (if (g$214$15954 g$214$25795) (begin '#f ((lambda (g$214$25797) (if g$214$25797 (begin '#f ((lambda (g$214$25799) (if g$214$25799 (begin '#f (append g$214$25797 g$214$25799)) '#f)) ((lambda (g$214$25801) (if (equal? (g$214$15990 g$214$25801) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$25795)))) '#f)) ((lambda (g$214$25803) (list g$214$25803)) (g$214$15962 g$214$25795)))) '#f)) (g$214$15964 g$214$25789)))) '#f)) ((lambda (g$214$25805) (list g$214$25805)) (g$214$15962 g$214$25789)))) '#f)) (g$214$15962 g$214$25783))) (if (g$214$15958 g$214$25783) (list (begin 'i* '()) (begin 'e* '())) '#f))))) g$214$25781) (g$214$15964 g$214$25775)))) '#f)) ((lambda (g$214$25807) (list g$214$25807)) (g$214$15962 g$214$25775)))) '#f)) g$214$25749))) (car g$214$25739)))))) g$214$25737) g$214$25735 '() '()))) (g$214$16624 (lambda (g$214$25809) (letrec ((g$214$25811 (lambda (g$214$25823) ((lambda (g$214$25825) ((lambda (g$214$25827) (if (if g$214$25827 (begin '#f (apply (lambda (g$214$25829) (for-all (lambda (g$214$25831) ((lambda (g$214$25833) (if (integer? g$214$25833) (begin '#f (exact? g$214$25833)) '#f)) (g$214$16709 g$214$25831))) g$214$25829)) g$214$25827)) '#f) (apply (lambda (g$214$25835) (values '() (map g$214$16709 g$214$25835))) g$214$25827) ((lambda (g$214$25837) ((lambda (g$214$25839) (if (if g$214$25839 (begin '#f (apply (lambda (g$214$25841 g$214$25842) (g$214$15968 g$214$25841)) g$214$25839)) '#f) (apply (lambda (g$214$25845 g$214$25846) (call-with-values (lambda () (g$214$25811 g$214$25846)) (lambda (g$214$25851 g$214$25852) ((lambda (g$214$25855 g$214$25856) (values (cons (g$214$15970 g$214$25845) g$214$25856) g$214$25855)) g$214$25852 g$214$25851)))) g$214$25839) ((lambda (g$214$25859) ((lambda (g$214$25861) (if (if g$214$25861 (begin '#f (apply (lambda () '#t) g$214$25861)) '#f) (apply (lambda () (values '() '())) g$214$25861) ((lambda (g$214$25863) ((lambda (g$214$25865) (if (if g$214$25865 (begin '#f (apply (lambda () '#t) g$214$25865)) '#f) (apply (lambda () (g$214$16703 '#f '"invalid library name" g$214$25809)) g$214$25865) (g$214$16703 '#f '"invalid syntax" g$214$25863))) ((lambda (g$214$25867) '()) g$214$25863))) g$214$25859))) ((lambda (g$214$25869) (if (equal? (g$214$15990 g$214$25869) '()) (begin '#f '()) '#f)) g$214$25859))) g$214$25837))) ((lambda (g$214$25871) (if (g$214$15954 g$214$25871) (begin '#f ((lambda (g$214$25873) (if g$214$25873 (begin '#f ((lambda (g$214$25875) (if g$214$25875 (begin '#f (append g$214$25873 g$214$25875)) '#f)) ((lambda (g$214$25877) (list g$214$25877)) (g$214$15964 g$214$25871)))) '#f)) ((lambda (g$214$25879) (list g$214$25879)) (g$214$15962 g$214$25871)))) '#f)) g$214$25837))) g$214$25825))) ((lambda (g$214$25881) (if (g$214$15954 g$214$25881) (begin '#f ((lambda (g$214$25883) (if g$214$25883 (begin '#f ((lambda (g$214$25885) (if g$214$25885 (begin '#f (append g$214$25883 g$214$25885)) '#f)) ((lambda (g$214$25887) (if (equal? (g$214$15990 g$214$25887) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$25881)))) '#f)) ((letrec ((g$214$25889 (lambda (g$214$25891) (if (g$214$15954 g$214$25891) ((lambda (g$214$25893) (if g$214$25893 (begin '#f ((lambda (g$214$25895) (if g$214$25895 (begin '#f (map cons g$214$25893 g$214$25895)) '#f)) (g$214$25889 (g$214$15964 g$214$25891)))) '#f)) ((lambda (g$214$25897) (list g$214$25897)) (g$214$15962 g$214$25891))) (if (g$214$15958 g$214$25891) (list (begin 'v* '())) '#f))))) g$214$25889) (g$214$15962 g$214$25881)))) '#f)) g$214$25825))) g$214$25823)))) (call-with-values (lambda () (g$214$25811 g$214$25809)) (lambda (g$214$25815 g$214$25816) ((lambda (g$214$25819 g$214$25820) (begin (if (null? g$214$25820) (g$214$16703 '#f '"empty library name" g$214$25809) (void)) (values g$214$25820 g$214$25819))) g$214$25816 g$214$25815)))))) (g$214$16626 (lambda (g$214$25899) ((lambda (g$214$25901) ((lambda (g$214$25903) (if (if g$214$25903 (begin '#f (apply (lambda (g$214$25905 g$214$25906 g$214$25907 g$214$25908 g$214$25909 g$214$25910 g$214$25911) (if (eq? (g$214$16709 g$214$25907) 'export) (if (eq? (g$214$16709 g$214$25909) 'import) (begin '#f (eq? (g$214$16709 g$214$25905) 'library)) '#f) '#f)) g$214$25903)) '#f) (apply (lambda (g$214$25919 g$214$25920 g$214$25921 g$214$25922 g$214$25923 g$214$25924 g$214$25925) (values g$214$25920 g$214$25922 g$214$25924 g$214$25925)) g$214$25903) ((lambda (g$214$25933) ((lambda (g$214$25935) (if (if g$214$25935 (begin '#f (apply (lambda () '#t) g$214$25935)) '#f) (apply (lambda () (g$214$16703 '#f '"malformed library" g$214$25899)) g$214$25935) (g$214$16703 '#f '"invalid syntax" g$214$25933))) ((lambda (g$214$25937) '()) g$214$25933))) g$214$25901))) ((lambda (g$214$25939) (if (g$214$15954 g$214$25939) (begin '#f ((lambda (g$214$25941) (if g$214$25941 (begin '#f ((lambda (g$214$25943) (if g$214$25943 (begin '#f (append g$214$25941 g$214$25943)) '#f)) ((lambda (g$214$25945) (if (g$214$15954 g$214$25945) (begin '#f ((lambda (g$214$25947) (if g$214$25947 (begin '#f ((lambda (g$214$25949) (if g$214$25949 (begin '#f (append g$214$25947 g$214$25949)) '#f)) ((lambda (g$214$25951) (if (g$214$15954 g$214$25951) (begin '#f ((lambda (g$214$25953) (if g$214$25953 (begin '#f ((lambda (g$214$25955) (if g$214$25955 (begin '#f (append g$214$25953 g$214$25955)) '#f)) ((lambda (g$214$25957) (if (g$214$15954 g$214$25957) (begin '#f ((lambda (g$214$25959) (if g$214$25959 (begin '#f ((lambda (g$214$25961) (if g$214$25961 (begin '#f (append g$214$25959 g$214$25961)) '#f)) ((letrec ((g$214$25963 (lambda (g$214$25965) (if (g$214$15954 g$214$25965) ((lambda (g$214$25967) (if g$214$25967 (begin '#f ((lambda (g$214$25969) (if g$214$25969 (begin '#f (map cons g$214$25967 g$214$25969)) '#f)) (g$214$25963 (g$214$15964 g$214$25965)))) '#f)) ((lambda (g$214$25971) (list g$214$25971)) (g$214$15962 g$214$25965))) (if (g$214$15958 g$214$25965) (list (begin 'b* '())) '#f))))) g$214$25963) (g$214$15964 g$214$25957)))) '#f)) ((lambda (g$214$25973) (if (g$214$15954 g$214$25973) (begin '#f ((lambda (g$214$25975) (if g$214$25975 (begin '#f ((lambda (g$214$25977) (if g$214$25977 (begin '#f (append g$214$25975 g$214$25977)) '#f)) ((letrec ((g$214$25979 (lambda (g$214$25981) (if (g$214$15954 g$214$25981) ((lambda (g$214$25983) (if g$214$25983 (begin '#f ((lambda (g$214$25985) (if g$214$25985 (begin '#f (map cons g$214$25983 g$214$25985)) '#f)) (g$214$25979 (g$214$15964 g$214$25981)))) '#f)) ((lambda (g$214$25987) (list g$214$25987)) (g$214$15962 g$214$25981))) (if (g$214$15958 g$214$25981) (list (begin 'imp* '())) '#f))))) g$214$25979) (g$214$15964 g$214$25973)))) '#f)) ((lambda (g$214$25989) (list g$214$25989)) (g$214$15962 g$214$25973)))) '#f)) (g$214$15962 g$214$25957)))) '#f)) (g$214$15964 g$214$25951)))) '#f)) ((lambda (g$214$25991) (if (g$214$15954 g$214$25991) (begin '#f ((lambda (g$214$25993) (if g$214$25993 (begin '#f ((lambda (g$214$25995) (if g$214$25995 (begin '#f (append g$214$25993 g$214$25995)) '#f)) ((letrec ((g$214$25997 (lambda (g$214$25999) (if (g$214$15954 g$214$25999) ((lambda (g$214$26001) (if g$214$26001 (begin '#f ((lambda (g$214$26003) (if g$214$26003 (begin '#f (map cons g$214$26001 g$214$26003)) '#f)) (g$214$25997 (g$214$15964 g$214$25999)))) '#f)) ((lambda (g$214$26005) (list g$214$26005)) (g$214$15962 g$214$25999))) (if (g$214$15958 g$214$25999) (list (begin 'exp* '())) '#f))))) g$214$25997) (g$214$15964 g$214$25991)))) '#f)) ((lambda (g$214$26007) (list g$214$26007)) (g$214$15962 g$214$25991)))) '#f)) (g$214$15962 g$214$25951)))) '#f)) (g$214$15964 g$214$25945)))) '#f)) ((letrec ((g$214$26009 (lambda (g$214$26011) (if (g$214$15954 g$214$26011) ((lambda (g$214$26013) (if g$214$26013 (begin '#f ((lambda (g$214$26015) (if g$214$26015 (begin '#f (map cons g$214$26013 g$214$26015)) '#f)) (g$214$26009 (g$214$15964 g$214$26011)))) '#f)) ((lambda (g$214$26017) (list g$214$26017)) (g$214$15962 g$214$26011))) (if (g$214$15958 g$214$26011) (list (begin 'name* '())) '#f))))) g$214$26009) (g$214$15962 g$214$25945)))) '#f)) (g$214$15964 g$214$25939)))) '#f)) ((lambda (g$214$26019) (list g$214$26019)) (g$214$15962 g$214$25939)))) '#f)) g$214$25901))) g$214$25899))) (g$214$16628 (lambda (g$214$26021) (letrec ((g$214$26023 (lambda (g$214$26873) (g$214$16703 'import '"two imports with different bindings" g$214$26873))) (g$214$26025 (lambda (g$214$26855 g$214$26856) (letrec ((g$214$26859 (lambda (g$214$26861 g$214$26862) ((lambda (g$214$26865 g$214$26866) ((lambda (g$214$26869) (if g$214$26869 ((lambda (g$214$26871) (if (eq? (cdr g$214$26871) g$214$26866) g$214$26862 (g$214$26023 g$214$26865))) g$214$26869) (cons g$214$26861 g$214$26862))) (assq g$214$26865 g$214$26862))) (car g$214$26861) (cdr g$214$26861))))) (if (null? g$214$26855) g$214$26856 (g$214$26859 (car g$214$26855) (g$214$26025 (cdr g$214$26855) g$214$26856)))))) (g$214$26027 (lambda (g$214$26813 g$214$26814) (letrec ((g$214$26817 (lambda (g$214$26839 g$214$26840) (if (null? g$214$26840) (g$214$16703 'import '"cannot rename unbound identifier" g$214$26839) (if (eq? g$214$26839 (caar g$214$26840)) (values (cdar g$214$26840) (cdr g$214$26840)) ((lambda (g$214$26843) (call-with-values (lambda () (g$214$26817 g$214$26839 (cdr g$214$26840))) (lambda (g$214$26847 g$214$26848) ((lambda (g$214$26851 g$214$26852) (values g$214$26852 (cons g$214$26843 g$214$26851))) g$214$26848 g$214$26847)))) (car g$214$26840))))))) (if (null? g$214$26813) (values '() g$214$26814) (call-with-values (lambda () (g$214$26817 (car g$214$26813) g$214$26814)) (lambda (g$214$26821 g$214$26822) ((lambda (g$214$26825 g$214$26826) (call-with-values (lambda () (g$214$26027 (cdr g$214$26813) g$214$26825)) (lambda (g$214$26831 g$214$26832) ((lambda (g$214$26835 g$214$26836) (values (cons g$214$26826 g$214$26836) g$214$26835)) g$214$26832 g$214$26831)))) g$214$26822 g$214$26821))))))) (g$214$26029 (lambda (g$214$26805 g$214$26806) (map (lambda (g$214$26809) ((lambda (g$214$26811) (if g$214$26811 (cdr g$214$26811) (g$214$16703 'import '"cannot find identifier" g$214$26809))) (assq g$214$26809 g$214$26806))) g$214$26805))) (g$214$26031 (lambda (g$214$26797 g$214$26798) ((letrec ((g$214$26801 (lambda (g$214$26803) (if (null? g$214$26803) '() (if (memq (caar g$214$26803) g$214$26797) (g$214$26801 (cdr g$214$26803)) (cons (car g$214$26803) (g$214$26801 (cdr g$214$26803)))))))) g$214$26801) g$214$26798))) (g$214$26033 (lambda (g$214$26795) (if (null? g$214$26795) '() (if (memq (car g$214$26795) (cdr g$214$26795)) (g$214$26033 (cdr g$214$26795)) (cons (car g$214$26795) (g$214$26033 (cdr g$214$26795))))))) (g$214$26035 (lambda (g$214$26369) (letrec ((g$214$26371 (lambda (g$214$26793) (if (integer? g$214$26793) (if (exact? g$214$26793) (begin '#f (>= g$214$26793 '0)) '#f) '#f))) (g$214$26373 (lambda (g$214$26603) ((lambda (g$214$26605) ((lambda (g$214$26607) (if (if g$214$26607 (begin '#f (apply (lambda (g$214$26609) (g$214$26371 (g$214$16709 g$214$26609))) g$214$26607)) '#f) (apply (lambda (g$214$26611) (lambda (g$214$26613) (= g$214$26613 (g$214$16709 g$214$26611)))) g$214$26607) ((lambda (g$214$26615) ((lambda (g$214$26617) (if (if g$214$26617 (begin '#f (apply (lambda (g$214$26619 g$214$26620) (eq? (g$214$16709 g$214$26619) 'and)) g$214$26617)) '#f) (apply (lambda (g$214$26623 g$214$26624) ((lambda (g$214$26627) (lambda (g$214$26629) (for-all (lambda (g$214$26631) (g$214$26631 g$214$26629)) g$214$26627))) (map g$214$26373 g$214$26624))) g$214$26617) ((lambda (g$214$26633) ((lambda (g$214$26635) (if (if g$214$26635 (begin '#f (apply (lambda (g$214$26637 g$214$26638) (eq? (g$214$16709 g$214$26637) 'or)) g$214$26635)) '#f) (apply (lambda (g$214$26641 g$214$26642) ((lambda (g$214$26645) (lambda (g$214$26647) (exists (lambda (g$214$26649) (g$214$26649 g$214$26647)) g$214$26645))) (map g$214$26373 g$214$26642))) g$214$26635) ((lambda (g$214$26651) ((lambda (g$214$26653) (if (if g$214$26653 (begin '#f (apply (lambda (g$214$26655 g$214$26656) (eq? (g$214$16709 g$214$26655) 'not)) g$214$26653)) '#f) (apply (lambda (g$214$26659 g$214$26660) ((lambda (g$214$26663) (lambda (g$214$26665) (not (g$214$26663 g$214$26665)))) (g$214$26373 g$214$26660))) g$214$26653) ((lambda (g$214$26667) ((lambda (g$214$26669) (if (if g$214$26669 (begin '#f (apply (lambda (g$214$26671 g$214$26672) (if (eq? (g$214$16709 g$214$26671) '<=) (begin '#f (g$214$26371 (g$214$16709 g$214$26672))) '#f)) g$214$26669)) '#f) (apply (lambda (g$214$26675 g$214$26676) (lambda (g$214$26679) (<= g$214$26679 (g$214$16709 g$214$26676)))) g$214$26669) ((lambda (g$214$26681) ((lambda (g$214$26683) (if (if g$214$26683 (begin '#f (apply (lambda (g$214$26685 g$214$26686) (if (eq? (g$214$16709 g$214$26685) '>=) (begin '#f (g$214$26371 g$214$26686)) '#f)) g$214$26683)) '#f) (apply (lambda (g$214$26689 g$214$26690) (lambda (g$214$26693) (>= g$214$26693 (g$214$16709 g$214$26690)))) g$214$26683) ((lambda (g$214$26695) ((lambda (g$214$26697) (if (if g$214$26697 (begin '#f (apply (lambda () '#t) g$214$26697)) '#f) (apply (lambda () (g$214$16703 'import '"invalid sub-version spec" g$214$26369 g$214$26603)) g$214$26697) (g$214$16703 '#f '"invalid syntax" g$214$26695))) ((lambda (g$214$26699) '()) g$214$26695))) g$214$26681))) ((lambda (g$214$26701) (if (g$214$15954 g$214$26701) (begin '#f ((lambda (g$214$26703) (if g$214$26703 (begin '#f ((lambda (g$214$26705) (if g$214$26705 (begin '#f (append g$214$26703 g$214$26705)) '#f)) ((lambda (g$214$26707) (if (g$214$15954 g$214$26707) (begin '#f ((lambda (g$214$26709) (if g$214$26709 (begin '#f ((lambda (g$214$26711) (if g$214$26711 (begin '#f (append g$214$26709 g$214$26711)) '#f)) ((lambda (g$214$26713) (if (equal? (g$214$15990 g$214$26713) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$26707)))) '#f)) ((lambda (g$214$26715) (list g$214$26715)) (g$214$15962 g$214$26707)))) '#f)) (g$214$15964 g$214$26701)))) '#f)) ((lambda (g$214$26717) (list g$214$26717)) (g$214$15962 g$214$26701)))) '#f)) g$214$26681))) g$214$26667))) ((lambda (g$214$26719) (if (g$214$15954 g$214$26719) (begin '#f ((lambda (g$214$26721) (if g$214$26721 (begin '#f ((lambda (g$214$26723) (if g$214$26723 (begin '#f (append g$214$26721 g$214$26723)) '#f)) ((lambda (g$214$26725) (if (g$214$15954 g$214$26725) (begin '#f ((lambda (g$214$26727) (if g$214$26727 (begin '#f ((lambda (g$214$26729) (if g$214$26729 (begin '#f (append g$214$26727 g$214$26729)) '#f)) ((lambda (g$214$26731) (if (equal? (g$214$15990 g$214$26731) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$26725)))) '#f)) ((lambda (g$214$26733) (list g$214$26733)) (g$214$15962 g$214$26725)))) '#f)) (g$214$15964 g$214$26719)))) '#f)) ((lambda (g$214$26735) (list g$214$26735)) (g$214$15962 g$214$26719)))) '#f)) g$214$26667))) g$214$26651))) ((lambda (g$214$26737) (if (g$214$15954 g$214$26737) (begin '#f ((lambda (g$214$26739) (if g$214$26739 (begin '#f ((lambda (g$214$26741) (if g$214$26741 (begin '#f (append g$214$26739 g$214$26741)) '#f)) ((lambda (g$214$26743) (if (g$214$15954 g$214$26743) (begin '#f ((lambda (g$214$26745) (if g$214$26745 (begin '#f ((lambda (g$214$26747) (if g$214$26747 (begin '#f (append g$214$26745 g$214$26747)) '#f)) ((lambda (g$214$26749) (if (equal? (g$214$15990 g$214$26749) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$26743)))) '#f)) ((lambda (g$214$26751) (list g$214$26751)) (g$214$15962 g$214$26743)))) '#f)) (g$214$15964 g$214$26737)))) '#f)) ((lambda (g$214$26753) (list g$214$26753)) (g$214$15962 g$214$26737)))) '#f)) g$214$26651))) g$214$26633))) ((lambda (g$214$26755) (if (g$214$15954 g$214$26755) (begin '#f ((lambda (g$214$26757) (if g$214$26757 (begin '#f ((lambda (g$214$26759) (if g$214$26759 (begin '#f (append g$214$26757 g$214$26759)) '#f)) ((letrec ((g$214$26761 (lambda (g$214$26763) (if (g$214$15954 g$214$26763) ((lambda (g$214$26765) (if g$214$26765 (begin '#f ((lambda (g$214$26767) (if g$214$26767 (begin '#f (map cons g$214$26765 g$214$26767)) '#f)) (g$214$26761 (g$214$15964 g$214$26763)))) '#f)) ((lambda (g$214$26769) (list g$214$26769)) (g$214$15962 g$214$26763))) (if (g$214$15958 g$214$26763) (list (begin 'sub* '())) '#f))))) g$214$26761) (g$214$15964 g$214$26755)))) '#f)) ((lambda (g$214$26771) (list g$214$26771)) (g$214$15962 g$214$26755)))) '#f)) g$214$26633))) g$214$26615))) ((lambda (g$214$26773) (if (g$214$15954 g$214$26773) (begin '#f ((lambda (g$214$26775) (if g$214$26775 (begin '#f ((lambda (g$214$26777) (if g$214$26777 (begin '#f (append g$214$26775 g$214$26777)) '#f)) ((letrec ((g$214$26779 (lambda (g$214$26781) (if (g$214$15954 g$214$26781) ((lambda (g$214$26783) (if g$214$26783 (begin '#f ((lambda (g$214$26785) (if g$214$26785 (begin '#f (map cons g$214$26783 g$214$26785)) '#f)) (g$214$26779 (g$214$15964 g$214$26781)))) '#f)) ((lambda (g$214$26787) (list g$214$26787)) (g$214$15962 g$214$26781))) (if (g$214$15958 g$214$26781) (list (begin 'sub* '())) '#f))))) g$214$26779) (g$214$15964 g$214$26773)))) '#f)) ((lambda (g$214$26789) (list g$214$26789)) (g$214$15962 g$214$26773)))) '#f)) g$214$26615))) g$214$26605))) ((lambda (g$214$26791) (list g$214$26791)) g$214$26605))) g$214$26603))) (g$214$26375 (lambda (g$214$26453) ((lambda (g$214$26455) ((lambda (g$214$26457) (if (if g$214$26457 (begin '#f (apply (lambda () '#t) g$214$26457)) '#f) (apply (lambda () (lambda (g$214$26459) '#t)) g$214$26457) ((lambda (g$214$26461) ((lambda (g$214$26463) (if (if g$214$26463 (begin '#f (apply (lambda (g$214$26465 g$214$26466) (eq? (g$214$16709 g$214$26465) 'and)) g$214$26463)) '#f) (apply (lambda (g$214$26469 g$214$26470) ((lambda (g$214$26473) (lambda (g$214$26475) (for-all (lambda (g$214$26477) (g$214$26477 g$214$26475)) g$214$26473))) (map g$214$26375 g$214$26470))) g$214$26463) ((lambda (g$214$26479) ((lambda (g$214$26481) (if (if g$214$26481 (begin '#f (apply (lambda (g$214$26483 g$214$26484) (eq? (g$214$16709 g$214$26483) 'or)) g$214$26481)) '#f) (apply (lambda (g$214$26487 g$214$26488) ((lambda (g$214$26491) (lambda (g$214$26493) (exists (lambda (g$214$26495) (g$214$26495 g$214$26493)) g$214$26491))) (map g$214$26375 g$214$26488))) g$214$26481) ((lambda (g$214$26497) ((lambda (g$214$26499) (if (if g$214$26499 (begin '#f (apply (lambda (g$214$26501 g$214$26502) (eq? (g$214$16709 g$214$26501) 'not)) g$214$26499)) '#f) (apply (lambda (g$214$26505 g$214$26506) ((lambda (g$214$26509) (lambda (g$214$26511) (not (g$214$26509 g$214$26511)))) (g$214$26375 g$214$26506))) g$214$26499) ((lambda (g$214$26513) ((lambda (g$214$26515) (if (if g$214$26515 (begin '#f (apply (lambda (g$214$26517) '#t) g$214$26515)) '#f) (apply (lambda (g$214$26519) ((lambda (g$214$26521) (lambda (g$214$26523) ((letrec ((g$214$26525 (lambda (g$214$26527 g$214$26528) (if (null? g$214$26527) '#t (if (null? g$214$26528) '#f (if ((car g$214$26527) (car g$214$26528)) (begin '#f (g$214$26525 (cdr g$214$26527) (cdr g$214$26453))) '#f)))))) g$214$26525) g$214$26521 g$214$26523))) (map g$214$26373 g$214$26519))) g$214$26515) ((lambda (g$214$26531) ((lambda (g$214$26533) (if (if g$214$26533 (begin '#f (apply (lambda () '#t) g$214$26533)) '#f) (apply (lambda () (g$214$16703 'import '"invalid version spec" g$214$26369 g$214$26453)) g$214$26533) (g$214$16703 '#f '"invalid syntax" g$214$26531))) ((lambda (g$214$26535) '()) g$214$26531))) g$214$26513))) ((letrec ((g$214$26537 (lambda (g$214$26539) (if (g$214$15954 g$214$26539) ((lambda (g$214$26541) (if g$214$26541 (begin '#f ((lambda (g$214$26543) (if g$214$26543 (begin '#f (map cons g$214$26541 g$214$26543)) '#f)) (g$214$26537 (g$214$15964 g$214$26539)))) '#f)) ((lambda (g$214$26545) (list g$214$26545)) (g$214$15962 g$214$26539))) (if (g$214$15958 g$214$26539) (list (begin 'sub* '())) '#f))))) g$214$26537) g$214$26513))) g$214$26497))) ((lambda (g$214$26547) (if (g$214$15954 g$214$26547) (begin '#f ((lambda (g$214$26549) (if g$214$26549 (begin '#f ((lambda (g$214$26551) (if g$214$26551 (begin '#f (append g$214$26549 g$214$26551)) '#f)) ((lambda (g$214$26553) (if (g$214$15954 g$214$26553) (begin '#f ((lambda (g$214$26555) (if g$214$26555 (begin '#f ((lambda (g$214$26557) (if g$214$26557 (begin '#f (append g$214$26555 g$214$26557)) '#f)) ((lambda (g$214$26559) (if (equal? (g$214$15990 g$214$26559) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$26553)))) '#f)) ((lambda (g$214$26561) (list g$214$26561)) (g$214$15962 g$214$26553)))) '#f)) (g$214$15964 g$214$26547)))) '#f)) ((lambda (g$214$26563) (list g$214$26563)) (g$214$15962 g$214$26547)))) '#f)) g$214$26497))) g$214$26479))) ((lambda (g$214$26565) (if (g$214$15954 g$214$26565) (begin '#f ((lambda (g$214$26567) (if g$214$26567 (begin '#f ((lambda (g$214$26569) (if g$214$26569 (begin '#f (append g$214$26567 g$214$26569)) '#f)) ((letrec ((g$214$26571 (lambda (g$214$26573) (if (g$214$15954 g$214$26573) ((lambda (g$214$26575) (if g$214$26575 (begin '#f ((lambda (g$214$26577) (if g$214$26577 (begin '#f (map cons g$214$26575 g$214$26577)) '#f)) (g$214$26571 (g$214$15964 g$214$26573)))) '#f)) ((lambda (g$214$26579) (list g$214$26579)) (g$214$15962 g$214$26573))) (if (g$214$15958 g$214$26573) (list (begin 'ver* '())) '#f))))) g$214$26571) (g$214$15964 g$214$26565)))) '#f)) ((lambda (g$214$26581) (list g$214$26581)) (g$214$15962 g$214$26565)))) '#f)) g$214$26479))) g$214$26461))) ((lambda (g$214$26583) (if (g$214$15954 g$214$26583) (begin '#f ((lambda (g$214$26585) (if g$214$26585 (begin '#f ((lambda (g$214$26587) (if g$214$26587 (begin '#f (append g$214$26585 g$214$26587)) '#f)) ((letrec ((g$214$26589 (lambda (g$214$26591) (if (g$214$15954 g$214$26591) ((lambda (g$214$26593) (if g$214$26593 (begin '#f ((lambda (g$214$26595) (if g$214$26595 (begin '#f (map cons g$214$26593 g$214$26595)) '#f)) (g$214$26589 (g$214$15964 g$214$26591)))) '#f)) ((lambda (g$214$26597) (list g$214$26597)) (g$214$15962 g$214$26591))) (if (g$214$15958 g$214$26591) (list (begin 'ver* '())) '#f))))) g$214$26589) (g$214$15964 g$214$26583)))) '#f)) ((lambda (g$214$26599) (list g$214$26599)) (g$214$15962 g$214$26583)))) '#f)) g$214$26461))) g$214$26455))) ((lambda (g$214$26601) (if (equal? (g$214$15990 g$214$26601) '()) (begin '#f '()) '#f)) g$214$26455))) g$214$26453)))) ((letrec ((g$214$26377 (lambda (g$214$26379) ((lambda (g$214$26381) ((lambda (g$214$26383) (if (if g$214$26383 (begin '#f (apply (lambda (g$214$26385) '#t) g$214$26383)) '#f) (apply (lambda (g$214$26387) (values '() (g$214$26375 g$214$26387))) g$214$26383) ((lambda (g$214$26389) ((lambda (g$214$26391) (if (if g$214$26391 (begin '#f (apply (lambda (g$214$26393 g$214$26394) (g$214$15968 g$214$26393)) g$214$26391)) '#f) (apply (lambda (g$214$26397 g$214$26398) (call-with-values (lambda () (g$214$26377 g$214$26398)) (lambda (g$214$26403 g$214$26404) ((lambda (g$214$26407 g$214$26408) (values (cons (g$214$15970 g$214$26397) g$214$26408) g$214$26407)) g$214$26404 g$214$26403)))) g$214$26391) ((lambda (g$214$26411) ((lambda (g$214$26413) (if (if g$214$26413 (begin '#f (apply (lambda () '#t) g$214$26413)) '#f) (apply (lambda () (values '() (lambda (g$214$26415) '#t))) g$214$26413) ((lambda (g$214$26417) ((lambda (g$214$26419) (if (if g$214$26419 (begin '#f (apply (lambda () '#t) g$214$26419)) '#f) (apply (lambda () (g$214$16703 '#f '"invalid import spec" g$214$26369)) g$214$26419) (g$214$16703 '#f '"invalid syntax" g$214$26417))) ((lambda (g$214$26421) '()) g$214$26417))) g$214$26411))) ((lambda (g$214$26423) (if (equal? (g$214$15990 g$214$26423) '()) (begin '#f '()) '#f)) g$214$26411))) g$214$26389))) ((lambda (g$214$26425) (if (g$214$15954 g$214$26425) (begin '#f ((lambda (g$214$26427) (if g$214$26427 (begin '#f ((lambda (g$214$26429) (if g$214$26429 (begin '#f (append g$214$26427 g$214$26429)) '#f)) ((lambda (g$214$26431) (list g$214$26431)) (g$214$15964 g$214$26425)))) '#f)) ((lambda (g$214$26433) (list g$214$26433)) (g$214$15962 g$214$26425)))) '#f)) g$214$26389))) g$214$26381))) ((lambda (g$214$26435) (if (g$214$15954 g$214$26435) (begin '#f ((lambda (g$214$26437) (if g$214$26437 (begin '#f ((lambda (g$214$26439) (if g$214$26439 (begin '#f (append g$214$26437 g$214$26439)) '#f)) ((lambda (g$214$26441) (if (equal? (g$214$15990 g$214$26441) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$26435)))) '#f)) ((letrec ((g$214$26443 (lambda (g$214$26445) (if (g$214$15954 g$214$26445) ((lambda (g$214$26447) (if g$214$26447 (begin '#f ((lambda (g$214$26449) (if g$214$26449 (begin '#f (map cons g$214$26447 g$214$26449)) '#f)) (g$214$26443 (g$214$15964 g$214$26445)))) '#f)) ((lambda (g$214$26451) (list g$214$26451)) (g$214$15962 g$214$26445))) (if (g$214$15958 g$214$26445) (list (begin 'version-spec* '())) '#f))))) g$214$26443) (g$214$15962 g$214$26435)))) '#f)) g$214$26381))) g$214$26379)))) g$214$26377) g$214$26369)))) (g$214$26037 (lambda (g$214$26063) ((lambda (g$214$26065) ((lambda (g$214$26067) (if (if g$214$26067 (begin '#f (apply (lambda (g$214$26069 g$214$26070 g$214$26071 g$214$26072) (if (eq? (g$214$16709 g$214$26069) 'rename) (if (for-all g$214$15968 g$214$26071) (begin '#f (for-all g$214$15968 g$214$26072)) '#f) '#f)) g$214$26067)) '#f) (apply (lambda (g$214$26077 g$214$26078 g$214$26079 g$214$26080) ((lambda (g$214$26085 g$214$26086 g$214$26087) ((lambda (g$214$26091) ((lambda (g$214$26093) (g$214$26025 (map cons g$214$26087 g$214$26091) g$214$26093)) (g$214$26031 g$214$26086 g$214$26085))) (g$214$26029 g$214$26086 g$214$26085))) (g$214$26037 g$214$26078) (map g$214$15970 g$214$26079) (map g$214$15970 g$214$26080))) g$214$26067) ((lambda (g$214$26095) ((lambda (g$214$26097) (if (if g$214$26097 (begin '#f (apply (lambda (g$214$26099 g$214$26100 g$214$26101) (if (eq? (g$214$16709 g$214$26099) 'except) (begin '#f (for-all g$214$15968 g$214$26101)) '#f)) g$214$26097)) '#f) (apply (lambda (g$214$26105 g$214$26106 g$214$26107) ((lambda (g$214$26111) (g$214$26031 (map g$214$15970 g$214$26107) g$214$26111)) (g$214$26037 g$214$26106))) g$214$26097) ((lambda (g$214$26113) ((lambda (g$214$26115) (if (if g$214$26115 (begin '#f (apply (lambda (g$214$26117 g$214$26118 g$214$26119) (if (eq? (g$214$16709 g$214$26117) 'only) (begin '#f (for-all g$214$15968 g$214$26119)) '#f)) g$214$26115)) '#f) (apply (lambda (g$214$26123 g$214$26124 g$214$26125) ((lambda (g$214$26129 g$214$26130) ((lambda (g$214$26133) ((lambda (g$214$26135) (map cons g$214$26133 g$214$26135)) (g$214$26029 g$214$26133 g$214$26129))) (g$214$26033 g$214$26130))) (g$214$26037 g$214$26124) (map g$214$15970 g$214$26125))) g$214$26115) ((lambda (g$214$26137) ((lambda (g$214$26139) (if (if g$214$26139 (begin '#f (apply (lambda (g$214$26141 g$214$26142 g$214$26143) (if (eq? (g$214$16709 g$214$26141) 'prefix) (begin '#f (g$214$15968 g$214$26143)) '#f)) g$214$26139)) '#f) (apply (lambda (g$214$26147 g$214$26148 g$214$26149) ((lambda (g$214$26153 g$214$26154) (map (lambda (g$214$26157) (cons (string->symbol (string-append g$214$26154 (symbol->string (car g$214$26157)))) (cdr g$214$26157))) g$214$26153)) (g$214$26037 g$214$26148) (symbol->string (g$214$15970 g$214$26149)))) g$214$26139) ((lambda (g$214$26159) ((lambda (g$214$26161) (if (if g$214$26161 (begin '#f (apply (lambda (g$214$26163 g$214$26164) (eq? (g$214$16709 g$214$26163) 'library)) g$214$26161)) '#f) (apply (lambda (g$214$26167 g$214$26168) (call-with-values (lambda () (g$214$26035 g$214$26168)) (lambda (g$214$26173 g$214$26174) ((lambda (g$214$26177 g$214$26178) (begin (if (null? g$214$26178) (g$214$16703 'import '"empty library name" g$214$26168) (void)) ((lambda (g$214$26181) (begin (if g$214$26181 (void) (g$214$16703 'import '"cannot find library with required name" g$214$26178)) (if (g$214$26177 (g$214$15471 g$214$26181)) (void) (g$214$16703 'import '"library does not satisfy version specification" g$214$26168 g$214$26181)) ((g$214$16638) g$214$26181) (g$214$15475 g$214$26181))) (g$214$15501 g$214$26178)))) g$214$26174 g$214$26173)))) g$214$26161) ((lambda (g$214$26183) ((lambda (g$214$26185) (if (if g$214$26185 (begin '#f (apply (lambda (g$214$26187 g$214$26188) (not (memq (g$214$16709 g$214$26187) '(rename except only prefix library)))) g$214$26185)) '#f) (apply (lambda (g$214$26191 g$214$26192) (g$214$26037 (list 'library (cons g$214$26191 g$214$26192)))) g$214$26185) ((lambda (g$214$26195) ((lambda (g$214$26197) (if (if g$214$26197 (begin '#f (apply (lambda (g$214$26199) '#t) g$214$26197)) '#f) (apply (lambda (g$214$26201) (g$214$16703 'import '"invalid import spec" g$214$26201)) g$214$26197) (g$214$16703 '#f '"invalid syntax" g$214$26195))) ((lambda (g$214$26203) (list g$214$26203)) g$214$26195))) g$214$26183))) ((lambda (g$214$26205) (if (g$214$15954 g$214$26205) (begin '#f ((lambda (g$214$26207) (if g$214$26207 (begin '#f ((lambda (g$214$26209) (if g$214$26209 (begin '#f (append g$214$26207 g$214$26209)) '#f)) ((letrec ((g$214$26211 (lambda (g$214$26213) (if (g$214$15954 g$214$26213) ((lambda (g$214$26215) (if g$214$26215 (begin '#f ((lambda (g$214$26217) (if g$214$26217 (begin '#f (map cons g$214$26215 g$214$26217)) '#f)) (g$214$26211 (g$214$15964 g$214$26213)))) '#f)) ((lambda (g$214$26219) (list g$214$26219)) (g$214$15962 g$214$26213))) (if (g$214$15958 g$214$26213) (list (begin 'x* '())) '#f))))) g$214$26211) (g$214$15964 g$214$26205)))) '#f)) ((lambda (g$214$26221) (list g$214$26221)) (g$214$15962 g$214$26205)))) '#f)) g$214$26183))) g$214$26159))) ((lambda (g$214$26223) (if (g$214$15954 g$214$26223) (begin '#f ((lambda (g$214$26225) (if g$214$26225 (begin '#f ((lambda (g$214$26227) (if g$214$26227 (begin '#f (append g$214$26225 g$214$26227)) '#f)) ((lambda (g$214$26229) (if (g$214$15954 g$214$26229) (begin '#f ((lambda (g$214$26231) (if g$214$26231 (begin '#f ((lambda (g$214$26233) (if g$214$26233 (begin '#f (append g$214$26231 g$214$26233)) '#f)) ((lambda (g$214$26235) (if (equal? (g$214$15990 g$214$26235) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$26229)))) '#f)) ((letrec ((g$214$26237 (lambda (g$214$26239) (if (g$214$15954 g$214$26239) ((lambda (g$214$26241) (if g$214$26241 (begin '#f ((lambda (g$214$26243) (if g$214$26243 (begin '#f (map cons g$214$26241 g$214$26243)) '#f)) (g$214$26237 (g$214$15964 g$214$26239)))) '#f)) ((lambda (g$214$26245) (list g$214$26245)) (g$214$15962 g$214$26239))) (if (g$214$15958 g$214$26239) (list (begin 'spec* '())) '#f))))) g$214$26237) (g$214$15962 g$214$26229)))) '#f)) (g$214$15964 g$214$26223)))) '#f)) ((lambda (g$214$26247) (list g$214$26247)) (g$214$15962 g$214$26223)))) '#f)) g$214$26159))) g$214$26137))) ((lambda (g$214$26249) (if (g$214$15954 g$214$26249) (begin '#f ((lambda (g$214$26251) (if g$214$26251 (begin '#f ((lambda (g$214$26253) (if g$214$26253 (begin '#f (append g$214$26251 g$214$26253)) '#f)) ((lambda (g$214$26255) (if (g$214$15954 g$214$26255) (begin '#f ((lambda (g$214$26257) (if g$214$26257 (begin '#f ((lambda (g$214$26259) (if g$214$26259 (begin '#f (append g$214$26257 g$214$26259)) '#f)) ((lambda (g$214$26261) (if (g$214$15954 g$214$26261) (begin '#f ((lambda (g$214$26263) (if g$214$26263 (begin '#f ((lambda (g$214$26265) (if g$214$26265 (begin '#f (append g$214$26263 g$214$26265)) '#f)) ((lambda (g$214$26267) (if (equal? (g$214$15990 g$214$26267) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$26261)))) '#f)) ((lambda (g$214$26269) (list g$214$26269)) (g$214$15962 g$214$26261)))) '#f)) (g$214$15964 g$214$26255)))) '#f)) ((lambda (g$214$26271) (list g$214$26271)) (g$214$15962 g$214$26255)))) '#f)) (g$214$15964 g$214$26249)))) '#f)) ((lambda (g$214$26273) (list g$214$26273)) (g$214$15962 g$214$26249)))) '#f)) g$214$26137))) g$214$26113))) ((lambda (g$214$26275) (if (g$214$15954 g$214$26275) (begin '#f ((lambda (g$214$26277) (if g$214$26277 (begin '#f ((lambda (g$214$26279) (if g$214$26279 (begin '#f (append g$214$26277 g$214$26279)) '#f)) ((lambda (g$214$26281) (if (g$214$15954 g$214$26281) (begin '#f ((lambda (g$214$26283) (if g$214$26283 (begin '#f ((lambda (g$214$26285) (if g$214$26285 (begin '#f (append g$214$26283 g$214$26285)) '#f)) ((letrec ((g$214$26287 (lambda (g$214$26289) (if (g$214$15954 g$214$26289) ((lambda (g$214$26291) (if g$214$26291 (begin '#f ((lambda (g$214$26293) (if g$214$26293 (begin '#f (map cons g$214$26291 g$214$26293)) '#f)) (g$214$26287 (g$214$15964 g$214$26289)))) '#f)) ((lambda (g$214$26295) (list g$214$26295)) (g$214$15962 g$214$26289))) (if (g$214$15958 g$214$26289) (list (begin 'sym* '())) '#f))))) g$214$26287) (g$214$15964 g$214$26281)))) '#f)) ((lambda (g$214$26297) (list g$214$26297)) (g$214$15962 g$214$26281)))) '#f)) (g$214$15964 g$214$26275)))) '#f)) ((lambda (g$214$26299) (list g$214$26299)) (g$214$15962 g$214$26275)))) '#f)) g$214$26113))) g$214$26095))) ((lambda (g$214$26301) (if (g$214$15954 g$214$26301) (begin '#f ((lambda (g$214$26303) (if g$214$26303 (begin '#f ((lambda (g$214$26305) (if g$214$26305 (begin '#f (append g$214$26303 g$214$26305)) '#f)) ((lambda (g$214$26307) (if (g$214$15954 g$214$26307) (begin '#f ((lambda (g$214$26309) (if g$214$26309 (begin '#f ((lambda (g$214$26311) (if g$214$26311 (begin '#f (append g$214$26309 g$214$26311)) '#f)) ((letrec ((g$214$26313 (lambda (g$214$26315) (if (g$214$15954 g$214$26315) ((lambda (g$214$26317) (if g$214$26317 (begin '#f ((lambda (g$214$26319) (if g$214$26319 (begin '#f (map cons g$214$26317 g$214$26319)) '#f)) (g$214$26313 (g$214$15964 g$214$26315)))) '#f)) ((lambda (g$214$26321) (list g$214$26321)) (g$214$15962 g$214$26315))) (if (g$214$15958 g$214$26315) (list (begin 'sym* '())) '#f))))) g$214$26313) (g$214$15964 g$214$26307)))) '#f)) ((lambda (g$214$26323) (list g$214$26323)) (g$214$15962 g$214$26307)))) '#f)) (g$214$15964 g$214$26301)))) '#f)) ((lambda (g$214$26325) (list g$214$26325)) (g$214$15962 g$214$26301)))) '#f)) g$214$26095))) g$214$26065))) ((lambda (g$214$26327) (if (g$214$15954 g$214$26327) (begin '#f ((lambda (g$214$26329) (if g$214$26329 (begin '#f ((lambda (g$214$26331) (if g$214$26331 (begin '#f (append g$214$26329 g$214$26331)) '#f)) ((lambda (g$214$26333) (if (g$214$15954 g$214$26333) (begin '#f ((lambda (g$214$26335) (if g$214$26335 (begin '#f ((lambda (g$214$26337) (if g$214$26337 (begin '#f (append g$214$26335 g$214$26337)) '#f)) ((letrec ((g$214$26339 (lambda (g$214$26341) (if (g$214$15954 g$214$26341) ((lambda (g$214$26343) (if g$214$26343 (begin '#f ((lambda (g$214$26345) (if g$214$26345 (begin '#f (map cons g$214$26343 g$214$26345)) '#f)) (g$214$26339 (g$214$15964 g$214$26341)))) '#f)) ((lambda (g$214$26347) (if (g$214$15954 g$214$26347) (begin '#f ((lambda (g$214$26349) (if g$214$26349 (begin '#f ((lambda (g$214$26351) (if g$214$26351 (begin '#f (append g$214$26349 g$214$26351)) '#f)) ((lambda (g$214$26353) (if (g$214$15954 g$214$26353) (begin '#f ((lambda (g$214$26355) (if g$214$26355 (begin '#f ((lambda (g$214$26357) (if g$214$26357 (begin '#f (append g$214$26355 g$214$26357)) '#f)) ((lambda (g$214$26359) (if (equal? (g$214$15990 g$214$26359) '()) (begin '#f '()) '#f)) (g$214$15964 g$214$26353)))) '#f)) ((lambda (g$214$26361) (list g$214$26361)) (g$214$15962 g$214$26353)))) '#f)) (g$214$15964 g$214$26347)))) '#f)) ((lambda (g$214$26363) (list g$214$26363)) (g$214$15962 g$214$26347)))) '#f)) (g$214$15962 g$214$26341))) (if (g$214$15958 g$214$26341) (list (begin 'old* '()) (begin 'new* '())) '#f))))) g$214$26339) (g$214$15964 g$214$26333)))) '#f)) ((lambda (g$214$26365) (list g$214$26365)) (g$214$15962 g$214$26333)))) '#f)) (g$214$15964 g$214$26327)))) '#f)) ((lambda (g$214$26367) (list g$214$26367)) (g$214$15962 g$214$26327)))) '#f)) g$214$26065))) g$214$26063))) (g$214$26039 (lambda (g$214$26047 g$214$26048) ((lambda (g$214$26051) (for-each (lambda (g$214$26053) ((lambda (g$214$26055 g$214$26056) ((lambda (g$214$26059) (if g$214$26059 ((lambda (g$214$26061) (if (eq? g$214$26061 g$214$26056) (void) (g$214$26023 g$214$26055))) g$214$26059) (hashtable-set! g$214$26048 g$214$26055 g$214$26056))) (hashtable-ref g$214$26048 g$214$26055 '#f))) (car g$214$26053) (cdr g$214$26053))) g$214$26051)) (g$214$26037 g$214$26047))))) ((letrec ((g$214$26041 (lambda (g$214$26043 g$214$26044) (if (null? g$214$26043) (hashtable-entries g$214$26044) (begin (g$214$26039 (car g$214$26043) g$214$26044) (g$214$26041 (cdr g$214$26043) g$214$26044)))))) g$214$26041) g$214$26021 (make-eq-hashtable))))) (g$214$16630 (lambda (g$214$26875 g$214$26876) ((lambda (g$214$26879) (begin (vector-for-each (lambda (g$214$26881 g$214$26882) (g$214$15907 g$214$26879 (g$214$15944 g$214$26881 g$214$15874 '()) g$214$26882)) g$214$26875 g$214$26876) g$214$26879)) (g$214$15905)))) (g$214$16632 (lambda () ((lambda (g$214$26885) (lambda g$214$26889 ((lambda (g$214$26890) (if (= g$214$26890 '0) (apply (lambda () g$214$26885) g$214$26889) (if (= g$214$26890 '1) (apply (lambda (g$214$26887) (set! g$214$26885 (g$214$15867 g$214$26887 g$214$26885))) g$214$26889) (error 'apply '"invalid arg count")))) (length g$214$26889)))) '()))) (g$214$16634 (g$214$14920 (lambda g$214$26891 (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (g$214$26893) (begin (if (procedure? g$214$26893) (void) (assertion-violation 'inv-collector '"BUG: not a procedure" g$214$26893)) g$214$26893)))) (g$214$16636 (g$214$14920 (lambda g$214$26895 (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (g$214$26897) (begin (if (procedure? g$214$26897) (void) (assertion-violation 'vis-collector '"BUG: not a procedure" g$214$26897)) g$214$26897)))) (g$214$16638 (g$214$14920 (lambda g$214$26899 (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (g$214$26901) (begin (if (procedure? g$214$26901) (void) (assertion-violation 'imp-collector '"BUG: not a procedure" g$214$26901)) g$214$26901)))) (g$214$16640 (lambda (g$214$26903 g$214$26904 g$214$26905) (call-with-values (lambda () (g$214$16610 g$214$26903 '() '() '() '() '() '() g$214$26904 g$214$26905)) (lambda (g$214$26916 g$214$26917 g$214$26918 g$214$26919 g$214$26920 g$214$26921 g$214$26922) ((lambda (g$214$26930 g$214$26931 g$214$26932 g$214$26933 g$214$26934 g$214$26935 g$214$26936) (values (append (apply append (reverse g$214$26931)) g$214$26936) g$214$26935 g$214$26934 (reverse g$214$26933) (reverse g$214$26932))) g$214$26922 g$214$26921 g$214$26920 g$214$26919 g$214$26918 g$214$26917 g$214$26916))))) (g$214$16642 (lambda (g$214$26944 g$214$26945 g$214$26946 g$214$26947) (letrec ((g$214$26952 (g$214$16632))) ((lambda (g$214$26956 g$214$26957) ((lambda (g$214$26960) (dynamic-wind g$214$26960 (lambda () (call-with-values (lambda () (g$214$16622 g$214$26944)) (lambda (g$214$26964 g$214$26965) ((lambda (g$214$26968 g$214$26969) (call-with-values (lambda () (g$214$16628 g$214$26945)) (lambda (g$214$26974 g$214$26975) ((lambda (g$214$26978 g$214$26979) ((lambda (g$214$26982) ((lambda (g$214$26984 g$214$26985 g$214$26986) ((lambda (g$214$26994 g$214$26995 g$214$26996 g$214$26997) ((lambda (g$214$27002) (dynamic-wind g$214$27002 (lambda () (call-with-values (lambda () (g$214$16640 g$214$26984 g$214$26982 g$214$26947)) (lambda (g$214$27009 g$214$27010 g$214$27011 g$214$27012 g$214$27013) ((lambda (g$214$27019 g$214$27020 g$214$27021 g$214$27022 g$214$27023) (begin (g$214$15909 g$214$26982) ((lambda (g$214$27029) ((lambda (g$214$27031) ((lambda () (begin (g$214$15911 g$214$26982) ((lambda (g$214$27033 g$214$27034) (letrec ((g$214$27037 '"attempt to export mutated variable")) (call-with-values (lambda () (g$214$16689 g$214$27020 g$214$27033 g$214$27022)) (lambda (g$214$27042 g$214$27043 g$214$27044) ((lambda (g$214$27048 g$214$27049 g$214$27050) (begin (for-each (lambda (g$214$27054) ((lambda (g$214$27056 g$214$27057) ((lambda (g$214$27060) (if g$214$27060 ((lambda (g$214$27062) ((lambda (g$214$27064) (if (eq? g$214$27064 'mutable) (g$214$16703 'export g$214$27037 g$214$27056) (void))) (car g$214$27062))) (cdr g$214$27060)) (void))) (assq g$214$27057 g$214$27050))) (car g$214$27054) (cdr g$214$27054))) g$214$27034) ((lambda (g$214$27066 g$214$27067) (values (g$214$26952) (g$214$26985) (g$214$26986) (g$214$15851 '#f (append g$214$27067 (list g$214$27066))) g$214$27048 g$214$27034 g$214$27050)) (g$214$15854 '#f g$214$27020 g$214$27031 (g$214$16685 g$214$27049 g$214$27029)) (map g$214$15847 (map cdr g$214$27049))))) g$214$27044 g$214$27043 g$214$27042))))) (map g$214$15880 g$214$27020) (g$214$16687 g$214$26969 g$214$26968 g$214$26982)))))) (g$214$16598 g$214$27019 g$214$27022 g$214$27021))) (g$214$16584 g$214$27023 g$214$27022 g$214$27021)))) g$214$27013 g$214$27012 g$214$27011 g$214$27010 g$214$27009)))) g$214$27002)) (lambda () (begin ((lambda (g$214$27070) (begin (g$214$26994 g$214$26996) (set! g$214$26996 g$214$27070))) (g$214$26994)) ((lambda (g$214$27072) (begin (g$214$26995 g$214$26997) (set! g$214$26997 g$214$27072))) (g$214$26995)))))) g$214$16634 g$214$16636 g$214$26985 g$214$26986)) (map (lambda (g$214$27074) (g$214$15944 g$214$27074 g$214$15874 (list g$214$26982))) g$214$26946) (g$214$16632) (g$214$16632))) (g$214$16630 g$214$26979 g$214$26978))) g$214$26975 g$214$26974)))) g$214$26965 g$214$26964)))) g$214$26960)) (lambda () ((lambda (g$214$27076) (begin (g$214$26956 g$214$26957) (set! g$214$26957 g$214$27076))) (g$214$26956))))) g$214$16638 g$214$26952)))) (g$214$16644 (lambda (g$214$27078) ((lambda (g$214$27082 g$214$27083) ((lambda (g$214$27086) (dynamic-wind g$214$27086 (lambda () (call-with-values (lambda () (g$214$16626 g$214$27078)) (lambda (g$214$27092 g$214$27093 g$214$27094 g$214$27095) ((lambda (g$214$27100 g$214$27101 g$214$27102 g$214$27103) (call-with-values (lambda () (g$214$16624 g$214$27103)) (lambda (g$214$27110 g$214$27111) ((lambda (g$214$27114 g$214$27115) (call-with-values (lambda () (g$214$16642 g$214$27102 g$214$27101 g$214$27100 '#f)) (lambda (g$214$27125 g$214$27126 g$214$27127 g$214$27128 g$214$27129 g$214$27130 g$214$27131) ((lambda (g$214$27139 g$214$27140 g$214$27141 g$214$27142 g$214$27143 g$214$27144 g$214$27145) (values g$214$27115 g$214$27114 g$214$27145 g$214$27144 g$214$27143 g$214$27142 g$214$27141 g$214$27140 g$214$27139)) g$214$27131 g$214$27130 g$214$27129 g$214$27128 g$214$27127 g$214$27126 g$214$27125)))) g$214$27111 g$214$27110)))) g$214$27095 g$214$27094 g$214$27093 g$214$27092)))) g$214$27086)) (lambda () ((lambda (g$214$27153) (begin (g$214$27082 g$214$27083) (set! g$214$27083 g$214$27153))) (g$214$27082))))) g$214$16713 '#f))) (g$214$16646 (lambda (g$214$27155) ((lambda (g$214$27157) ((lambda (g$214$27159) (if (if g$214$27159 (begin '#f (apply (lambda (g$214$27161 g$214$27162 g$214$27163) (eq? (g$214$16709 g$214$27161) 'import)) g$214$27159)) '#f) (apply (lambda (g$214$27167 g$214$27168 g$214$27169) (values g$214$27168 g$214$27169)) g$214$27159) ((lambda (g$214$27173) ((lambda (g$214$27175) (if (if g$214$27175 (begin '#f (apply (lambda (g$214$27177 g$214$27178 g$214$27179) (eq? (g$214$16709 g$214$27177) 'import)) g$214$27175)) '#f) (apply (lambda (g$214$27183 g$214$27184 g$214$27185) (g$214$16703 'expander '"invalid syntax of top-level program" (g$214$15962 g$214$27155))) g$214$27175) ((lambda (g$214$27189) ((lambda (g$214$27191) (if (if g$214$27191 (begin '#f (apply (lambda () '#t) g$214$27191)) '#f) (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) g$214$27191) (g$214$16703 '#f '"invalid syntax" g$214$27189))) ((lambda (g$214$27193) '()) g$214$27189))) g$214$27173))) ((lambda (g$214$27195) (if (g$214$15954 g$214$27195) (begin '#f ((lambda (g$214$27197) (if g$214$27197 (begin '#f ((lambda (g$214$27199) (if g$214$27199 (begin '#f (append g$214$27197 g$214$27199)) '#f)) ((lambda (g$214$27201) (list g$214$27201)) (g$214$15964 g$214$27195)))) '#f)) ((lambda (g$214$27203) (if (g$214$15954 g$214$27203) (begin '#f ((lambda (g$214$27205) (if g$214$27205 (begin '#f ((lambda (g$214$27207) (if g$214$27207 (begin '#f (append g$214$27205 g$214$27207)) '#f)) ((lambda (g$214$27209) (list g$214$27209)) (g$214$15964 g$214$27203)))) '#f)) ((lambda (g$214$27211) (list g$214$27211)) (g$214$15962 g$214$27203)))) '#f)) (g$214$15962 g$214$27195)))) '#f)) g$214$27173))) g$214$27157))) ((lambda (g$214$27213) (if (g$214$15954 g$214$27213) (begin '#f ((lambda (g$214$27215) (if g$214$27215 (begin '#f ((lambda (g$214$27217) (if g$214$27217 (begin '#f (append g$214$27215 g$214$27217)) '#f)) ((letrec ((g$214$27219 (lambda (g$214$27221) (if (g$214$15954 g$214$27221) ((lambda (g$214$27223) (if g$214$27223 (begin '#f ((lambda (g$214$27225) (if g$214$27225 (begin '#f (map cons g$214$27223 g$214$27225)) '#f)) (g$214$27219 (g$214$15964 g$214$27221)))) '#f)) ((lambda (g$214$27227) (list g$214$27227)) (g$214$15962 g$214$27221))) (if (g$214$15958 g$214$27221) (list (begin 'b* '())) '#f))))) g$214$27219) (g$214$15964 g$214$27213)))) '#f)) ((lambda (g$214$27229) (if (g$214$15954 g$214$27229) (begin '#f ((lambda (g$214$27231) (if g$214$27231 (begin '#f ((lambda (g$214$27233) (if g$214$27233 (begin '#f (append g$214$27231 g$214$27233)) '#f)) ((letrec ((g$214$27235 (lambda (g$214$27237) (if (g$214$15954 g$214$27237) ((lambda (g$214$27239) (if g$214$27239 (begin '#f ((lambda (g$214$27241) (if g$214$27241 (begin '#f (map cons g$214$27239 g$214$27241)) '#f)) (g$214$27235 (g$214$15964 g$214$27237)))) '#f)) ((lambda (g$214$27243) (list g$214$27243)) (g$214$15962 g$214$27237))) (if (g$214$15958 g$214$27237) (list (begin 'imp* '())) '#f))))) g$214$27235) (g$214$15964 g$214$27229)))) '#f)) ((lambda (g$214$27245) (list g$214$27245)) (g$214$15962 g$214$27229)))) '#f)) (g$214$15962 g$214$27213)))) '#f)) g$214$27157))) g$214$27155))) (g$214$16648 (lambda (g$214$27247) (call-with-values (lambda () (g$214$16646 g$214$27247)) (lambda (g$214$27251 g$214$27252) ((lambda (g$214$27255 g$214$27256) (call-with-values (lambda () (g$214$16642 '() g$214$27256 g$214$27255 '#t)) (lambda (g$214$27266 g$214$27267 g$214$27268 g$214$27269 g$214$27270 g$214$27271 g$214$27272) ((lambda (g$214$27280 g$214$27281 g$214$27282 g$214$27283 g$214$27284 g$214$27285 g$214$27286) (values g$214$27285 g$214$27283)) g$214$27272 g$214$27271 g$214$27270 g$214$27269 g$214$27268 g$214$27267 g$214$27266)))) g$214$27252 g$214$27251))))) (g$214$16651 (lambda (g$214$27294 g$214$27295 g$214$27296) (vector 'g$214$16650 g$214$27294 g$214$27295 g$214$27296))) (g$214$16653 (lambda (g$214$27300) (if (vector? g$214$27300) (if (= (vector-length g$214$27300) (+ '1 (length '(names labels itc)))) (begin '#f (eq? (vector-ref g$214$27300 '0) 'g$214$16650)) '#f) '#f))) (g$214$16655 (lambda (g$214$27302) (if (g$214$16653 g$214$27302) (vector-ref g$214$27302 '1) (error 'env-names '"~s is not of type ~s" g$214$27302 'env)))) (g$214$16657 (lambda (g$214$27304) (if (g$214$16653 g$214$27304) (vector-ref g$214$27304 '2) (error 'env-labels '"~s is not of type ~s" g$214$27304 'env)))) (g$214$16659 (lambda (g$214$27306) (if (g$214$16653 g$214$27306) (vector-ref g$214$27306 '3) (error 'env-itc '"~s is not of type ~s" g$214$27306 'env)))) (g$214$16661 (lambda (g$214$27308 g$214$27309) (if (g$214$16653 g$214$27308) (vector-set! g$214$27308 '1 g$214$27309) (error 'set-env-names! '"~s is not of type ~s" g$214$27308 'env)))) (g$214$16663 (lambda (g$214$27312 g$214$27313) (if (g$214$16653 g$214$27312) (vector-set! g$214$27312 '2 g$214$27313) (error 'set-env-labels! '"~s is not of type ~s" g$214$27312 'env)))) (g$214$16665 (lambda (g$214$27316 g$214$27317) (if (g$214$16653 g$214$27316) (vector-set! g$214$27316 '3 g$214$27317) (error 'set-env-itc! '"~s is not of type ~s" g$214$27316 'env)))) (g$214$16667 (lambda (g$214$27320) (g$214$16653 g$214$27320))) (g$214$16669 (lambda g$214$27322 ((lambda (g$214$27324) ((lambda (g$214$27328 g$214$27329) ((lambda (g$214$27332) (dynamic-wind g$214$27332 (lambda () (call-with-values (lambda () (g$214$16628 g$214$27322)) (lambda (g$214$27336 g$214$27337) ((lambda (g$214$27340 g$214$27341) (g$214$16651 g$214$27341 g$214$27340 g$214$27324)) g$214$27337 g$214$27336)))) g$214$27332)) (lambda () ((lambda (g$214$27344) (begin (g$214$27328 g$214$27329) (set! g$214$27329 g$214$27344))) (g$214$27328))))) g$214$16638 g$214$27324)) (g$214$16632)))) (g$214$16671 (lambda (g$214$27346) (begin (if (eqv? g$214$27346 '5) (void) (assertion-violation 'null-environment '"not 5" g$214$27346)) (g$214$16669 '(psyntax null-environment-5))))) (g$214$16673 (lambda (g$214$27348) (begin (if (eqv? g$214$27348 '5) (void) (assertion-violation 'scheme-report-environment '"not 5" g$214$27348)) (g$214$16669 '(psyntax scheme-report-environment-5))))) (g$214$16675 (lambda (g$214$27350 g$214$27351) (begin (if (g$214$16653 g$214$27351) (void) (assertion-violation 'expand '"not an environment" g$214$27351)) ((lambda (g$214$27354) ((lambda (g$214$27356 g$214$27357 g$214$27358 g$214$27359) ((lambda (g$214$27364) (begin (g$214$15909 g$214$27354) (values g$214$27364 (g$214$27358)))) ((lambda (g$214$27372 g$214$27373 g$214$27374 g$214$27375 g$214$27376 g$214$27377) ((lambda (g$214$27384) (dynamic-wind g$214$27384 (lambda () (g$214$16588 g$214$27356 '() '())) g$214$27384)) (lambda () (begin ((lambda (g$214$27386) (begin (g$214$27372 g$214$27375) (set! g$214$27375 g$214$27386))) (g$214$27372)) ((lambda (g$214$27388) (begin (g$214$27373 g$214$27376) (set! g$214$27376 g$214$27388))) (g$214$27373)) ((lambda (g$214$27390) (begin (g$214$27374 g$214$27377) (set! g$214$27377 g$214$27390))) (g$214$27374)))))) g$214$16634 g$214$16636 g$214$16638 g$214$27358 g$214$27359 g$214$27357))) (g$214$15944 g$214$27350 g$214$15874 (list g$214$27354)) (g$214$16659 g$214$27351) (g$214$16632) (g$214$16632))) (g$214$16630 (g$214$16655 g$214$27351) (g$214$16657 g$214$27351)))))) (g$214$16677 (lambda (g$214$27392 g$214$27393) (begin (if (g$214$16653 g$214$27393) (void) (assertion-violation 'eval '"not an environment" g$214$27393)) (call-with-values (lambda () (g$214$16675 g$214$27392 g$214$27393)) (lambda (g$214$27398 g$214$27399) ((lambda (g$214$27402 g$214$27403) (begin (for-each g$214$15510 g$214$27402) (eval-core (g$214$15000 g$214$27403)))) g$214$27399 g$214$27398)))))) (g$214$16679 (lambda (g$214$27406) (letrec ((g$214$27408 (lambda (g$214$27477) (if (null? g$214$27477) (g$214$15852) (g$214$15851 '#f (map (lambda (g$214$27479) ((lambda (g$214$27481 g$214$27482) (list 'set! g$214$27481 g$214$27482)) (car g$214$27479) (cddr g$214$27479))) g$214$27477))))) (g$214$27410 (lambda (g$214$27469) (for-each (lambda (g$214$27471) ((lambda (g$214$27473 g$214$27474) (set-symbol-value! g$214$27473 g$214$27474)) (car g$214$27471) (cadr g$214$27471))) g$214$27469)))) (call-with-values (lambda () (g$214$16644 g$214$27406)) (lambda (g$214$27421 g$214$27422 g$214$27423 g$214$27424 g$214$27425 g$214$27426 g$214$27427 g$214$27428 g$214$27429) ((lambda (g$214$27439 g$214$27440 g$214$27441 g$214$27442 g$214$27443 g$214$27444 g$214$27445 g$214$27446 g$214$27447) ((lambda (g$214$27457 g$214$27458 g$214$27459 g$214$27460 g$214$27461 g$214$27462) (begin (g$214$15506 g$214$27457 g$214$27458 g$214$27459 g$214$27460 g$214$27461 g$214$27462 g$214$27440 g$214$27439 (lambda () (g$214$27410 g$214$27441)) (lambda () (eval-core (g$214$15000 g$214$27442))) '#t) (values g$214$27442 (g$214$27408 g$214$27441) g$214$27440 g$214$27439))) (gensym) g$214$27447 g$214$27446 (map g$214$15515 g$214$27445) (map g$214$15515 g$214$27443) (map g$214$15515 g$214$27444))) g$214$27429 g$214$27428 g$214$27427 g$214$27426 g$214$27425 g$214$27424 g$214$27423 g$214$27422 g$214$27421)))))) (g$214$16681 (lambda (g$214$27485) (call-with-values (lambda () (g$214$16679 g$214$27485)) (lambda (g$214$27491 g$214$27492 g$214$27493 g$214$27494) ((lambda (g$214$27499 g$214$27500 g$214$27501 g$214$27502) (values g$214$27502 g$214$27500 g$214$27499)) g$214$27494 g$214$27493 g$214$27492 g$214$27491))))) (g$214$16683 (lambda (g$214$27507 g$214$27508 g$214$27509) (if (null? g$214$27508) g$214$27509 (g$214$16683 g$214$27507 (cdr g$214$27508) (cons (g$214$27507 (car g$214$27508)) g$214$27509))))) (g$214$16685 (lambda (g$214$27513 g$214$27514) (g$214$15851 '#f (cons (g$214$15852) (g$214$16683 (lambda (g$214$27517) (list 'set! (cdr g$214$27517) (car g$214$27517))) g$214$27513 g$214$27514))))) (g$214$16687 (lambda (g$214$27519 g$214$27520 g$214$27521) (map (lambda (g$214$27525 g$214$27526) ((lambda (g$214$27529) ((lambda (g$214$27531) ((lambda () (begin (if g$214$27531 (void) (g$214$16703 '#f '"cannot export unbound identifier" g$214$27529)) (cons g$214$27526 g$214$27531))))) (g$214$15992 g$214$27529))) (g$214$15944 g$214$27525 g$214$15874 (list g$214$27521)))) g$214$27519 g$214$27520))) (g$214$16689 (lambda (g$214$27533 g$214$27534 g$214$27535) (letrec ((g$214$27539 (lambda (g$214$27568) ((letrec ((g$214$27570 (lambda (g$214$27572 g$214$27573 g$214$27574) (if (pair? g$214$27573) (if (eq? g$214$27572 (car g$214$27573)) (car g$214$27574) (g$214$27570 g$214$27572 (cdr g$214$27573) (cdr g$214$27574))) (assertion-violation 'lookup-make-export '"BUG"))))) g$214$27570) g$214$27568 g$214$27533 g$214$27534)))) ((letrec ((g$214$27541 (lambda (g$214$27543 g$214$27544 g$214$27545 g$214$27546) (if (null? g$214$27543) (values g$214$27544 g$214$27545 g$214$27546) ((lambda (g$214$27551) ((lambda (g$214$27553 g$214$27554) ((lambda (g$214$27557) (if (memv g$214$27557 '(lexical)) ((lambda (g$214$27562) ((lambda (g$214$27564 g$214$27565) (g$214$27541 (cdr g$214$27543) (cons (cons* g$214$27553 g$214$27565 g$214$27564) g$214$27544) (cons (cons (g$214$16456 g$214$27562) g$214$27564) g$214$27545) g$214$27546)) (g$214$27539 (g$214$16456 g$214$27562)) (if (g$214$16458 g$214$27562) 'mutable 'global))) (g$214$16000 g$214$27554)) (if (memv g$214$27557 '(local-macro)) ((lambda (g$214$27560) (g$214$27541 (cdr g$214$27543) (cons (cons* g$214$27553 'global-macro g$214$27560) g$214$27544) g$214$27545 (cons (cons g$214$27560 (g$214$16000 g$214$27554)) g$214$27546))) (gensym)) (if (memv g$214$27557 '(local-macro!)) ((lambda (g$214$27558) (g$214$27541 (cdr g$214$27543) (cons (cons* g$214$27553 'global-macro! g$214$27558) g$214$27544) g$214$27545 (cons (cons g$214$27558 (g$214$16000 g$214$27554)) g$214$27546))) (gensym)) (if (memv g$214$27557 '($rtd $module)) (g$214$27541 (cdr g$214$27543) (cons g$214$27551 g$214$27544) g$214$27545 g$214$27546) (assertion-violation 'expander '"BUG: do not know how to export" (g$214$15998 g$214$27554) (g$214$16000 g$214$27554))))))) (g$214$15998 g$214$27554))) (car g$214$27551) (cdr g$214$27551))) (car g$214$27543)))))) g$214$27541) g$214$27535 '() '() '())))) (g$214$16691 (lambda (g$214$27578) ((lambda (g$214$27580) ((lambda (g$214$27582) (if (if g$214$27582 (begin '#f (apply (lambda (g$214$27584) '#t) g$214$27582)) '#f) (apply (lambda (g$214$27586) (map (lambda (g$214$27588) (g$214$15918 ((lambda (g$214$27590) (if ((lambda (g$214$27592) (if g$214$27592 g$214$27592 (begin '#f (string? g$214$27590)))) (symbol? g$214$27590)) (gensym g$214$27590) (gensym 't))) (g$214$16709 g$214$27588)) g$214$15874 '())) g$214$27586)) g$214$27582) ((lambda (g$214$27594) ((lambda (g$214$27596) (if (if g$214$27596 (begin '#f (apply (lambda () '#t) g$214$27596)) '#f) (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) g$214$27596) (g$214$16703 '#f '"invalid syntax" g$214$27594))) ((lambda (g$214$27598) '()) g$214$27594))) g$214$27580))) ((letrec ((g$214$27600 (lambda (g$214$27602) (if (g$214$15954 g$214$27602) ((lambda (g$214$27604) (if g$214$27604 (begin '#f ((lambda (g$214$27606) (if g$214$27606 (begin '#f (map cons g$214$27604 g$214$27606)) '#f)) (g$214$27600 (g$214$15964 g$214$27602)))) '#f)) ((lambda (g$214$27608) (list g$214$27608)) (g$214$15962 g$214$27602))) (if (g$214$15958 g$214$27602) (list (begin 'ls '())) '#f))))) g$214$27600) g$214$27580))) g$214$27578))) (g$214$16693 (lambda (g$214$27610 g$214$27611) (if (g$214$15968 g$214$27610) (if (g$214$15968 g$214$27611) (g$214$15976 g$214$27610 g$214$27611) (assertion-violation 'free-identifier=? '"not an identifier" g$214$27611)) (assertion-violation 'free-identifier=? '"not an identifier" g$214$27610)))) (g$214$16695 (lambda (g$214$27614 g$214$27615) (if (g$214$15968 g$214$27614) (if (g$214$15968 g$214$27615) (g$214$15974 g$214$27614 g$214$27615) (assertion-violation 'bound-identifier=? '"not an identifier" g$214$27615)) (assertion-violation 'bound-identifier=? '"not an identifier" g$214$27614)))) (g$214$16697 (lambda (g$214$27618) (if (g$214$15920 g$214$27618) ((lambda (g$214$27620) (if (g$214$14916 g$214$27620) ((lambda (g$214$27622) (if (pair? g$214$27622) (condition) (condition))) (g$214$14918 g$214$27620)) (condition))) (g$214$15922 g$214$27618)) (condition)))) (g$214$16699 (lambda (g$214$27624 . g$214$27626) (begin (if (for-all string? g$214$27626) (void) (assertion-violation 'syntax-error '"invalid argument" g$214$27626)) (raise (condition (make-message-condition (if (null? g$214$27626) '"invalid syntax" (apply string-append g$214$27626))) (make-syntax-violation (g$214$16709 g$214$27624) '#f) (g$214$16697 g$214$27624)))))) (g$214$16701 (lambda (g$214$27628 g$214$27629 g$214$27630 g$214$27631) (begin (if (string? g$214$27629) (void) (assertion-violation 'syntax-violation '"message is not a string" g$214$27629)) ((lambda (g$214$27636) (raise (condition (if g$214$27636 (make-who-condition g$214$27636) (condition)) (make-message-condition g$214$27629) g$214$27631 (g$214$16697 g$214$27630)))) (if ((lambda (g$214$27638) (if g$214$27638 g$214$27638 (begin '#f (symbol? g$214$27628)))) (string? g$214$27628)) g$214$27628 (if (not g$214$27628) ((lambda (g$214$27640) ((lambda (g$214$27642) (if (if g$214$27642 (begin '#f (apply (lambda (g$214$27644) (g$214$15968 g$214$27644)) g$214$27642)) '#f) (apply (lambda (g$214$27646) (g$214$16709 g$214$27646)) g$214$27642) ((lambda (g$214$27648) ((lambda (g$214$27650) (if (if g$214$27650 (begin '#f (apply (lambda (g$214$27652 g$214$27653) (g$214$15968 g$214$27652)) g$214$27650)) '#f) (apply (lambda (g$214$27656 g$214$27657) (g$214$16709 g$214$27656)) g$214$27650) ((lambda (g$214$27660) ((lambda (g$214$27662) (if (if g$214$27662 (begin '#f (apply (lambda () '#t) g$214$27662)) '#f) (apply (lambda () '#f) g$214$27662) (g$214$16703 '#f '"invalid syntax" g$214$27660))) ((lambda (g$214$27664) '()) g$214$27660))) g$214$27648))) ((lambda (g$214$27666) (if (g$214$15954 g$214$27666) (begin '#f ((lambda (g$214$27668) (if g$214$27668 (begin '#f ((lambda (g$214$27670) (if g$214$27670 (begin '#f (append g$214$27668 g$214$27670)) '#f)) ((lambda (g$214$27672) (list g$214$27672)) (g$214$15964 g$214$27666)))) '#f)) ((lambda (g$214$27674) (list g$214$27674)) (g$214$15962 g$214$27666)))) '#f)) g$214$27648))) g$214$27640))) ((lambda (g$214$27676) (list g$214$27676)) g$214$27640))) g$214$27630) (assertion-violation 'syntax-violation '"invalid who argument" g$214$27628))))))) (g$214$16703 (lambda g$214$27692 ((lambda (g$214$27693) (if (= g$214$27693 '3) (apply (lambda (g$214$27678 g$214$27679 g$214$27680) (g$214$16703 g$214$27678 g$214$27679 g$214$27680 '#f)) g$214$27692) (if (= g$214$27693 '4) (apply (lambda (g$214$27684 g$214$27685 g$214$27686 g$214$27687) (g$214$16701 g$214$27684 g$214$27685 g$214$27686 (make-syntax-violation (g$214$16709 g$214$27686) (g$214$16709 g$214$27687)))) g$214$27692) (error 'apply '"invalid arg count")))) (length g$214$27692)))) (g$214$16705 (lambda (g$214$27694) (g$214$15968 g$214$27694))) (g$214$16707 (lambda (g$214$27696 g$214$27697) (if (g$214$15968 g$214$27696) (g$214$15934 g$214$27696 g$214$27697) (assertion-violation 'datum->syntax '"not an identifier" g$214$27696)))) (g$214$16709 (lambda (g$214$27700) (g$214$15990 g$214$27700))) (g$214$16711 (lambda (g$214$27702) (call-with-values (lambda () (g$214$16648 g$214$27702)) (lambda (g$214$27706 g$214$27707) ((lambda (g$214$27710 g$214$27711) (begin (for-each g$214$15510 g$214$27711) (eval-core (g$214$15000 g$214$27710)))) g$214$27707 g$214$27706))))) (g$214$16713 (g$214$14920 '#f)) (g$214$16715 (lambda (g$214$27714) ((lambda (g$214$27716) (if g$214$27716 ((lambda (g$214$27718) ((lambda (g$214$27720) (if g$214$27720 (cdr g$214$27720) ((lambda (g$214$27722) ((lambda (g$214$27724) (if g$214$27724 ((lambda (g$214$27726) ((lambda (g$214$27728) (begin (g$214$15507 g$214$27718 g$214$27714 g$214$27728) g$214$27728)) (cdr g$214$27726))) g$214$27724) ((lambda (g$214$27730) (begin (g$214$15507 g$214$27718 g$214$27714 g$214$27730) (g$214$15508 g$214$27718 g$214$27730 (cons 'global (cons g$214$27718 (g$214$15880 g$214$27714)))) g$214$27730)) (g$214$15882 g$214$27714)))) (assq g$214$27714 g$214$27722))) (if (g$214$15502 '(ironscheme)) (g$214$15475 (g$214$15501 '(ironscheme))) '())))) (assq g$214$27714 (g$214$15475 g$214$27718)))) g$214$27716) '#f)) (g$214$16713)))) (g$214$16717 (lambda (g$214$27732) (letrec ((g$214$27734 (lambda (g$214$27778) ((lambda (g$214$27780 g$214$27781) (if g$214$27780 (set-symbol-value! g$214$27780 ((lambda (g$214$27784) (eval-core (g$214$15000 (list (g$214$15848 '#f (list g$214$27784) g$214$27784) g$214$27781)))) (gensym g$214$27780))) (eval-core (g$214$15000 g$214$27781)))) (car g$214$27778) (cdr g$214$27778))))) ((lambda (g$214$27736 g$214$27737 g$214$27738) ((lambda (g$214$27742) (begin (for-each g$214$15510 (g$214$27736)) (if (null? g$214$27742) (void) (begin (for-each g$214$27734 (reverse (cdr g$214$27742))) (g$214$27734 (car g$214$27742)))))) ((lambda (g$214$27752 g$214$27753 g$214$27754 g$214$27755 g$214$27756 g$214$27757 g$214$27758 g$214$27759) ((lambda (g$214$27768) (dynamic-wind g$214$27768 (lambda () (g$214$16618 (list (g$214$15944 g$214$27732 g$214$15874 '())) '())) g$214$27768)) (lambda () (begin ((lambda (g$214$27770) (begin (g$214$27752 g$214$27756) (set! g$214$27756 g$214$27770))) (g$214$27752)) ((lambda (g$214$27772) (begin (g$214$27753 g$214$27757) (set! g$214$27757 g$214$27772))) (g$214$27753)) ((lambda (g$214$27774) (begin (g$214$27754 g$214$27758) (set! g$214$27758 g$214$27774))) (g$214$27754)) ((lambda (g$214$27776) (begin (g$214$27755 g$214$27759) (set! g$214$27759 g$214$27776))) (g$214$27755)))))) g$214$16634 g$214$16636 g$214$16638 g$214$16713 g$214$27736 g$214$27738 g$214$27737 (g$214$15501 '(ironscheme interaction))))) (g$214$16632) (g$214$16632) (g$214$16632)))))) (begin (set! g$214$27989 g$214$16717) (set! g$214$27988 g$214$16715) (set! g$214$27987 g$214$16713) (set! g$214$27986 g$214$16711) (set! g$214$27985 g$214$16709) (set! g$214$27984 g$214$16707) (set! g$214$27983 g$214$16705) (set! g$214$27982 g$214$16703) (set! g$214$27981 g$214$16701) (set! g$214$27980 g$214$16699) (set! g$214$27979 g$214$16697) (set! g$214$27978 g$214$16695) (set! g$214$27977 g$214$16693) (set! g$214$27976 g$214$16691) (set! g$214$27975 g$214$16689) (set! g$214$27974 g$214$16687) (set! g$214$27973 g$214$16685) (set! g$214$27972 g$214$16683) (set! g$214$27971 g$214$16681) (set! g$214$27970 g$214$16679) (set! g$214$27969 g$214$16677) (set! g$214$27968 g$214$16675) (set! g$214$27967 g$214$16673) (set! g$214$27966 g$214$16671) (set! g$214$27965 g$214$16669) (set! g$214$27964 g$214$16667) (set! g$214$27963 g$214$16665) (set! g$214$27962 g$214$16663) (set! g$214$27961 g$214$16661) (set! g$214$27960 g$214$16659) (set! g$214$27959 g$214$16657) (set! g$214$27958 g$214$16655) (set! g$214$27957 g$214$16653) (set! g$214$27956 g$214$16651) (set! g$214$27955 g$214$16648) (set! g$214$27954 g$214$16646) (set! g$214$27953 g$214$16644) (set! g$214$27952 g$214$16642) (set! g$214$27951 g$214$16640) (set! g$214$27950 g$214$16638) (set! g$214$27949 g$214$16636) (set! g$214$27948 g$214$16634) (set! g$214$27947 g$214$16632) (set! g$214$27946 g$214$16630) (set! g$214$27945 g$214$16628) (set! g$214$27944 g$214$16626) (set! g$214$27943 g$214$16624) (set! g$214$27942 g$214$16622) (set! g$214$27941 g$214$16620) (set! g$214$27940 g$214$16618) (set! g$214$27939 g$214$16616) (set! g$214$27938 g$214$16614) (set! g$214$27937 g$214$16612) (set! g$214$27936 g$214$16610) (set! g$214$27935 g$214$16608) (set! g$214$27934 g$214$16606) (set! g$214$27933 g$214$16604) (set! g$214$27932 g$214$16602) (set! g$214$27931 g$214$16600) (set! g$214$27930 g$214$16598) (set! g$214$27929 g$214$16596) (set! g$214$27928 g$214$16594) (set! g$214$27927 g$214$16592) (set! g$214$27926 g$214$16590) (set! g$214$27925 g$214$16588) (set! g$214$27924 g$214$16586) (set! g$214$27923 g$214$16584) (set! g$214$27922 g$214$16582) (set! g$214$27921 g$214$16580) (set! g$214$27920 g$214$16578) (set! g$214$27919 g$214$16576) (set! g$214$27918 g$214$16574) (set! g$214$27917 g$214$16572) (set! g$214$27916 g$214$16570) (set! g$214$27915 g$214$16568) (set! g$214$27914 g$214$16566) (set! g$214$27913 g$214$16564) (set! g$214$27912 g$214$16562) (set! g$214$27911 g$214$16560) (set! g$214$27910 g$214$16558) (set! g$214$27909 g$214$16556) (set! g$214$27908 g$214$16554) (set! g$214$27907 g$214$16552) (set! g$214$27906 g$214$16550) (set! g$214$27905 g$214$16548) (set! g$214$27904 g$214$16546) (set! g$214$27903 g$214$16544) (set! g$214$27902 g$214$16542) (set! g$214$27901 g$214$16540) (set! g$214$27900 g$214$16538) (set! g$214$27899 g$214$16536) (set! g$214$27898 g$214$16534) (set! g$214$27897 g$214$16532) (set! g$214$27896 g$214$16530) (set! g$214$27895 g$214$16528) (set! g$214$27894 g$214$16526) (set! g$214$27893 g$214$16524) (set! g$214$27892 g$214$16522) (set! g$214$27891 g$214$16520) (set! g$214$27890 g$214$16518) (set! g$214$27889 g$214$16516) (set! g$214$27888 g$214$16514) (set! g$214$27887 g$214$16512) (set! g$214$27886 g$214$16510) (set! g$214$27885 g$214$16508) (set! g$214$27884 g$214$16506) (set! g$214$27883 g$214$16504) (set! g$214$27882 g$214$16502) (set! g$214$27881 g$214$16500) (set! g$214$27880 g$214$16498) (set! g$214$27879 g$214$16496) (set! g$214$27878 g$214$16494) (set! g$214$27877 g$214$16492) (set! g$214$27876 g$214$16490) (set! g$214$27875 g$214$16488) (set! g$214$27874 g$214$16486) (set! g$214$27873 g$214$16484) (set! g$214$27872 g$214$16482) (set! g$214$27871 g$214$16480) (set! g$214$27870 g$214$16478) (set! g$214$27869 g$214$16476) (set! g$214$27868 g$214$16474) (set! g$214$27867 g$214$16472) (set! g$214$27866 g$214$16470) (set! g$214$27865 g$214$16468) (set! g$214$27864 g$214$16466) (set! g$214$27863 g$214$16464) (set! g$214$27862 g$214$16462) (set! g$214$27861 g$214$16460) (set! g$214$27860 g$214$16458) (set! g$214$27859 g$214$16456) (set! g$214$27858 g$214$16454) (set! g$214$27857 g$214$16452) (set! g$214$27856 g$214$16450) (set! g$214$27855 g$214$16031) (set! g$214$27854 g$214$16029) (set! g$214$27853 g$214$16027) (set! g$214$27852 g$214$16004) (set! g$214$27851 g$214$16002) (set! g$214$27850 g$214$16000) (set! g$214$27849 g$214$15998) (set! g$214$27848 g$214$15996) (set! g$214$27847 g$214$15994) (set! g$214$27846 g$214$15992) (set! g$214$27845 g$214$15990) (set! g$214$27844 g$214$15988) (set! g$214$27843 g$214$15986) (set! g$214$27842 g$214$15984) (set! g$214$27841 g$214$15982) (set! g$214$27840 g$214$15980) (set! g$214$27839 g$214$15978) (set! g$214$27838 g$214$15976) (set! g$214$27837 g$214$15974) (set! g$214$27836 g$214$15972) (set! g$214$27835 g$214$15970) (set! g$214$27834 g$214$15968) (set! g$214$27833 g$214$15966) (set! g$214$27832 g$214$15964) (set! g$214$27831 g$214$15962) (set! g$214$27830 g$214$15960) (set! g$214$27829 g$214$15958) (set! g$214$27828 g$214$15956) (set! g$214$27827 g$214$15954) (set! g$214$27826 g$214$15952) (set! g$214$27825 g$214$15950) (set! g$214$27824 g$214$15948) (set! g$214$27823 g$214$15946) (set! g$214$27822 g$214$15944) (set! g$214$27821 g$214$15942) (set! g$214$27820 g$214$15940) (set! g$214$27819 g$214$15938) (set! g$214$27818 g$214$15936) (set! g$214$27817 g$214$15934) (set! g$214$27816 g$214$15932) (set! g$214$27815 g$214$15930) (set! g$214$27814 g$214$15928) (set! g$214$27813 g$214$15926) (set! g$214$27812 g$214$15924) (set! g$214$27811 g$214$15922) (set! g$214$27810 g$214$15920) (set! g$214$27809 g$214$15918) (set! g$214$27808 g$214$15915) (set! g$214$27807 g$214$15913) (set! g$214$27806 g$214$15911) (set! g$214$27805 g$214$15909) (set! g$214$27804 g$214$15907) (set! g$214$27803 g$214$15905) (set! g$214$27802 g$214$15903) (set! g$214$27801 g$214$15901) (set! g$214$27800 g$214$15899) (set! g$214$27799 g$214$15897) (set! g$214$27798 g$214$15895) (set! g$214$27797 g$214$15893) (set! g$214$27796 g$214$15891) (set! g$214$27795 g$214$15889) (set! g$214$27794 g$214$15887) (set! g$214$27793 g$214$15885) (set! g$214$27792 g$214$15882) (set! g$214$27791 g$214$15880) (set! g$214$27790 g$214$15878) (set! g$214$27789 g$214$15876) (set! g$214$27788 g$214$15874) (set! g$214$27787 g$214$15869) (set! g$214$27786 g$214$15867) (g$214$15497 g$214$16679))))


(begin (g$214$14996 (lambda (g$214$28752) ((lambda (g$214$28754) (if g$214$28754 (cdr g$214$28754) '#f)) (assq g$214$28752 '((syntax-error . g$214$27980) (syntax-dispatch . g$214$27911) (load . g$214$28010) (make-variable-transformer . g$214$27854) (identifier? . g$214$27983) (generate-temporaries . g$214$27976) (free-identifier=? . g$214$27977) (syntax->datum . g$214$27985) (datum->syntax . g$214$27984) (bound-identifier=? . g$214$27978) (scheme-report-environment . g$214$27967) (null-environment . g$214$27966) (eval . g$214$27969) (environment . g$214$27965) (syntax-violation . g$214$27982)))))) (g$214$15506 'g$214$28719 '(ikarus interaction) '() '() '() '() '() '() values values '#t) (g$214$15506 'g$214$28720 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . g$214$28059) (unquote . g$214$28058) (delay . g$214$28051) (or . g$214$28049) (and . g$214$28048) (do . g$214$28047) (cond . g$214$28046) (let* . g$214$28045) (let . g$214$28043) (quasiquote . g$214$28039) (syntax-rules . g$214$28038) (case . g$214$28033) (if . g$214$28029) (letrec . g$214$28027) (lambda . g$214$28024) (quote . g$214$28021) (letrec-syntax . g$214$28019) (let-syntax . g$214$28018) (set! . g$214$28017) (begin . g$214$28015) (define-syntax . g$214$28013) (define . g$214$28012)) '() values values '#t) (g$214$15506 'g$214$28721 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . g$214$28702) (string-ci>=? . g$214$28701) (string-ci=? . g$214$28700) (string-ci<? . g$214$28699) (string-ci<=? . g$214$28698) (char-whitespace? . g$214$28697) (char-upper-case? . g$214$28696) (char-numeric? . g$214$28694) (char-lower-case? . g$214$28693) (char-upcase . g$214$28691) (char-downcase . g$214$28688) (char-ci>? . g$214$28687) (char-ci>=? . g$214$28686) (char-ci=? . g$214$28685) (char-ci<? . g$214$28684) (char-ci<=? . g$214$28683) (char-alphabetic? . g$214$28682) (call-with-output-file . g$214$28638) (call-with-input-file . g$214$28637) (write-char . g$214$28636) (write . g$214$28635) (with-output-to-file . g$214$28634) (with-input-from-file . g$214$28633) (read-char . g$214$28632) (read . g$214$28631) (peek-char . g$214$28630) (open-output-file . g$214$28629) (open-input-file . g$214$28628) (newline . g$214$28627) (display . g$214$28626) (close-output-port . g$214$28625) (close-input-port . g$214$28624) (eof-object . g$214$28622) (current-output-port . g$214$28620) (current-input-port . g$214$28619) (output-port? . g$214$28618) (input-port? . g$214$28617) (scheme-report-environment . g$214$16674) (quotient . g$214$28532) (null-environment . g$214$16672) (remainder . g$214$28531) (modulo . g$214$28530) (inexact->exact . g$214$28529) (force . g$214$28528) (exact->inexact . g$214$28527) (string-fill! . g$214$28524) (string-set! . g$214$28523) (set-cdr! . g$214$28522) (set-car! . g$214$28521) (memv . g$214$28515) (memq . g$214$28514) (member . g$214$28512) (assv . g$214$28504) (assq . g$214$28503) (assoc . g$214$28501) (eval . g$214$16678) (zero? . g$214$28271) (vector? . g$214$28270) (vector-set! . g$214$28269) (vector-ref . g$214$28268) (vector-length . g$214$28266) (vector-fill! . g$214$28264) (vector->list . g$214$28263) (vector . g$214$28262) (values . g$214$28261) (truncate . g$214$28260) (tan . g$214$28259) (symbol? . g$214$28258) (symbol->string . g$214$28256) (substring . g$214$28255) (string? . g$214$28254) (string>? . g$214$28253) (string>=? . g$214$28252) (string=? . g$214$28251) (string<? . g$214$28250) (string<=? . g$214$28249) (string-ref . g$214$28248) (string-length . g$214$28247) (string-copy . g$214$28245) (string-append . g$214$28244) (string->symbol . g$214$28243) (string->number . g$214$28242) (string->list . g$214$28241) (string . g$214$28240) (sqrt . g$214$28239) (sin . g$214$28238) (round . g$214$28237) (reverse . g$214$28236) (real? . g$214$28235) (real-part . g$214$28233) (rationalize . g$214$28232) (rational? . g$214$28231) (procedure? . g$214$28229) (positive? . g$214$28228) (pair? . g$214$28227) (odd? . g$214$28226) (numerator . g$214$28225) (number? . g$214$28224) (number->string . g$214$28223) (not . g$214$28221) (negative? . g$214$28220) (min . g$214$28218) (max . g$214$28217) (map . g$214$28216) (make-vector . g$214$28215) (make-string . g$214$28214) (make-rectangular . g$214$28213) (make-polar . g$214$28212) (magnitude . g$214$28211) (log . g$214$28210) (list? . g$214$28209) (list-tail . g$214$28208) (list-ref . g$214$28207) (list->vector . g$214$28206) (list->string . g$214$28205) (list . g$214$28204) (length . g$214$28203) (lcm . g$214$28202) (integer? . g$214$28201) (integer->char . g$214$28199) (inexact? . g$214$28197) (imag-part . g$214$28195) (gcd . g$214$28194) (for-each . g$214$28193) (floor . g$214$28192) (expt . g$214$28190) (exp . g$214$28189) (exact? . g$214$28188) (even? . g$214$28185) (eqv? . g$214$28183) (equal? . g$214$28182) (eq? . g$214$28181) (dynamic-wind . g$214$28180) (denominator . g$214$28173) (cos . g$214$28172) (cons . g$214$28171) (complex? . g$214$28170) (char? . g$214$28169) (char>? . g$214$28168) (char>=? . g$214$28167) (char=? . g$214$28166) (char<? . g$214$28165) (char<=? . g$214$28164) (char->integer . g$214$28163) (ceiling . g$214$28162) (call-with-values . g$214$28161) (call-with-current-continuation . g$214$28159) (cddddr . g$214$28158) (cdddar . g$214$28157) (cddadr . g$214$28156) (cddaar . g$214$28155) (cdaddr . g$214$28154) (cdadar . g$214$28153) (cdaadr . g$214$28152) (cdaaar . g$214$28151) (cadddr . g$214$28150) (caddar . g$214$28149) (cadadr . g$214$28148) (cadaar . g$214$28147) (caaddr . g$214$28146) (caadar . g$214$28145) (caaadr . g$214$28144) (caaaar . g$214$28143) (cdddr . g$214$28142) (cddar . g$214$28141) (cdadr . g$214$28140) (cdaar . g$214$28139) (caddr . g$214$28138) (cadar . g$214$28137) (caadr . g$214$28136) (caaar . g$214$28135) (cddr . g$214$28134) (cdar . g$214$28133) (cadr . g$214$28132) (caar . g$214$28131) (cdr . g$214$28130) (car . g$214$28129) (boolean? . g$214$28128) (atan . g$214$28126) (asin . g$214$28124) (apply . g$214$28123) (append . g$214$28122) (angle . g$214$28121) (acos . g$214$28120) (abs . g$214$28119) (/ . g$214$28118) (* . g$214$28117) (- . g$214$28116) (+ . g$214$28115) (>= . g$214$28114) (> . g$214$28113) (= . g$214$28112) (<= . g$214$28111) (< . g$214$28110) (unquote-splicing . g$214$28059) (unquote . g$214$28058) (delay . g$214$28051) (or . g$214$28049) (and . g$214$28048) (do . g$214$28047) (cond . g$214$28046) (let* . g$214$28045) (let . g$214$28043) (quasiquote . g$214$28039) (syntax-rules . g$214$28038) (case . g$214$28033) (if . g$214$28029) (letrec . g$214$28027) (lambda . g$214$28024) (quote . g$214$28021) (letrec-syntax . g$214$28019) (let-syntax . g$214$28018) (set! . g$214$28017) (begin . g$214$28015) (define-syntax . g$214$28013) (define . g$214$28012)) '() values values '#t) (g$214$15506 'g$214$28722 '(psyntax modules) '() '() '() '() '((module . g$214$28014)) '() values values '#t) (g$214$15506 'g$214$28723 '(chez parameters) '() '() '() '() '() '() values values '#t) (g$214$15506 'g$214$28724 '(rnrs) '(6) '() '() '() '((string-upcase . g$214$28710) (string-titlecase . g$214$28709) (string-normalize-nfkd . g$214$28708) (string-normalize-nfkc . g$214$28707) (string-normalize-nfd . g$214$28706) (string-normalize-nfc . g$214$28705) (string-foldcase . g$214$28704) (string-downcase . g$214$28703) (string-ci>? . g$214$28702) (string-ci>=? . g$214$28701) (string-ci=? . g$214$28700) (string-ci<? . g$214$28699) (string-ci<=? . g$214$28698) (char-whitespace? . g$214$28697) (char-upper-case? . g$214$28696) (char-title-case? . g$214$28695) (char-numeric? . g$214$28694) (char-lower-case? . g$214$28693) (char-general-category . g$214$28692) (char-upcase . g$214$28691) (char-titlecase . g$214$28690) (char-foldcase . g$214$28689) (char-downcase . g$214$28688) (char-ci>? . g$214$28687) (char-ci>=? . g$214$28686) (char-ci=? . g$214$28685) (char-ci<? . g$214$28684) (char-ci<=? . g$214$28683) (char-alphabetic? . g$214$28682) (make-variable-transformer . g$214$16030) (identifier? . g$214$16706) (generate-temporaries . g$214$16692) (free-identifier=? . g$214$16694) (syntax->datum . g$214$16710) (datum->syntax . g$214$16708) (bound-identifier=? . g$214$16696) (record-type-descriptor? . g$214$28681) (record-predicate . g$214$28680) (record-mutator . g$214$28679) (record-constructor . g$214$28678) (record-accessor . g$214$28677) (make-record-type-descriptor . g$214$28676) (make-record-constructor-descriptor . g$214$28675) (record? . g$214$28674) (record-type-uid . g$214$28673) (record-type-sealed? . g$214$28672) (record-type-parent . g$214$28671) (record-type-opaque? . g$214$28670) (record-type-name . g$214$28669) (record-type-generative? . g$214$28668) (record-type-field-names . g$214$28667) (record-rtd . g$214$28666) (record-field-mutable? . g$214$28665) (delete-file . g$214$28664) (file-exists? . g$214$28663) (vector-sort! . g$214$28662) (vector-sort . g$214$28661) (list-sort . g$214$28660) (symbol-hash . g$214$28659) (string-ci-hash . g$214$28658) (string-hash . g$214$28657) (equal-hash . g$214$28656) (hashtable-equivalence-function . g$214$28655) (make-hashtable . g$214$28654) (hashtable-hash-function . g$214$28653) (make-eqv-hashtable . g$214$28652) (make-eq-hashtable . g$214$28651) (hashtable? . g$214$28650) (hashtable-update! . g$214$28649) (hashtable-size . g$214$28648) (hashtable-set! . g$214$28647) (hashtable-ref . g$214$28646) (hashtable-mutable? . g$214$28645) (hashtable-keys . g$214$28644) (hashtable-entries . g$214$28643) (hashtable-delete! . g$214$28642) (hashtable-copy . g$214$28641) (hashtable-contains? . g$214$28640) (hashtable-clear! . g$214$28639) (call-with-output-file . g$214$28638) (call-with-input-file . g$214$28637) (write-char . g$214$28636) (write . g$214$28635) (with-output-to-file . g$214$28634) (with-input-from-file . g$214$28633) (read-char . g$214$28632) (read . g$214$28631) (peek-char . g$214$28630) (open-output-file . g$214$28629) (open-input-file . g$214$28628) (newline . g$214$28627) (display . g$214$28626) (close-output-port . g$214$28625) (close-input-port . g$214$28624) (eof-object? . g$214$28623) (eof-object . g$214$28622) (current-error-port . g$214$28621) (current-output-port . g$214$28620) (current-input-port . g$214$28619) (output-port? . g$214$28618) (input-port? . g$214$28617) (utf-8-codec . g$214$28616) (utf-16-codec . g$214$28615) (transcoder-error-handling-mode . g$214$28614) (transcoder-eol-style . g$214$28613) (transcoder-codec . g$214$28612) (transcoded-port . g$214$28611) (textual-port? . g$214$28610) (string->bytevector . g$214$28609) (standard-output-port . g$214$28608) (standard-input-port . g$214$28607) (standard-error-port . g$214$28606) (set-port-position! . g$214$28605) (put-u8 . g$214$28604) (put-string . g$214$28603) (put-datum . g$214$28602) (put-char . g$214$28601) (put-bytevector . g$214$28600) (port? . g$214$28599) (port-transcoder . g$214$28598) (port-position . g$214$28597) (port-has-set-port-position!? . g$214$28596) (port-has-port-position? . g$214$28595) (port-eof? . g$214$28594) (output-port-buffer-mode . g$214$28593) (open-string-output-port . g$214$28592) (open-string-input-port . g$214$28591) (open-file-output-port . g$214$28590) (open-file-input/output-port . g$214$28589) (open-file-input-port . g$214$28588) (open-bytevector-output-port . g$214$28587) (open-bytevector-input-port . g$214$28586) (native-transcoder . g$214$28585) (native-eol-style . g$214$28584) (make-transcoder . g$214$28583) (latin-1-codec . g$214$28582) (make-i/o-write-error . g$214$28581) (make-i/o-read-error . g$214$28580) (make-i/o-port-error . g$214$28579) (make-i/o-invalid-position-error . g$214$28578) (make-i/o-filename-error . g$214$28577) (make-i/o-file-protection-error . g$214$28576) (make-i/o-file-is-read-only-error . g$214$28575) (make-i/o-file-does-not-exist-error . g$214$28574) (make-i/o-file-already-exists-error . g$214$28573) (make-i/o-error . g$214$28572) (make-i/o-encoding-error . g$214$28571) (make-i/o-decoding-error . g$214$28570) (make-custom-textual-output-port . g$214$28569) (make-custom-textual-input/output-port . g$214$28568) (make-custom-textual-input-port . g$214$28567) (make-custom-binary-output-port . g$214$28566) (make-custom-binary-input/output-port . g$214$28565) (make-custom-binary-input-port . g$214$28564) (make-bytevector . g$214$28563) (lookahead-u8 . g$214$28562) (lookahead-char . g$214$28561) (i/o-write-error? . g$214$28560) (i/o-read-error? . g$214$28559) (i/o-port-error? . g$214$28558) (i/o-invalid-position-error? . g$214$28557) (i/o-filename-error? . g$214$28556) (i/o-file-protection-error? . g$214$28555) (i/o-file-is-read-only-error? . g$214$28554) (i/o-file-does-not-exist-error? . g$214$28553) (i/o-file-already-exists-error? . g$214$28552) (i/o-error? . g$214$28551) (i/o-error-port . g$214$28550) (i/o-error-filename . g$214$28549) (i/o-encoding-error? . g$214$28548) (i/o-encoding-error-char . g$214$28547) (i/o-decoding-error? . g$214$28546) (get-u8 . g$214$28545) (get-string-n! . g$214$28544) (get-string-n . g$214$28543) (get-string-all . g$214$28542) (get-line . g$214$28541) (get-datum . g$214$28540) (get-char . g$214$28539) (get-bytevector-some . g$214$28538) (get-bytevector-n! . g$214$28537) (get-bytevector-n . g$214$28536) (get-bytevector-all . g$214$28535) (flush-output-port . g$214$28534) (close-port . g$214$28533) (exit . g$214$28526) (command-line . g$214$28525) (remove . g$214$28520) (remv . g$214$28519) (remp . g$214$28518) (remq . g$214$28517) (partition . g$214$28516) (memv . g$214$28515) (memq . g$214$28514) (memp . g$214$28513) (member . g$214$28512) (exists . g$214$28511) (for-all . g$214$28510) (fold-right . g$214$28509) (fold-left . g$214$28508) (find . g$214$28507) (filter . g$214$28506) (cons* . g$214$28505) (assv . g$214$28504) (assq . g$214$28503) (assp . g$214$28502) (assoc . g$214$28501) (call-with-string-output-port . g$214$28500) (call-with-port . g$214$28499) (call-with-bytevector-output-port . g$214$28498) (bytevector->string . g$214$28497) (buffer-mode? . g$214$28496) (binary-port? . g$214$28495) (with-exception-handler . g$214$28494) (raise-continuable . g$214$28493) (raise . g$214$28492) (make-enumeration . g$214$28491) (enum-set=? . g$214$28490) (enum-set-universe . g$214$28489) (enum-set-union . g$214$28488) (enum-set-subset? . g$214$28487) (enum-set-projection . g$214$28486) (enum-set-member? . g$214$28485) (enum-set-intersection . g$214$28484) (enum-set-indexer . g$214$28483) (enum-set-difference . g$214$28482) (enum-set-constructor . g$214$28481) (enum-set-complement . g$214$28480) (enum-set->list . g$214$28479) (who-condition? . g$214$28478) (warning? . g$214$28477) (violation? . g$214$28476) (undefined-violation? . g$214$28475) (syntax-violation? . g$214$28474) (syntax-violation-subform . g$214$28473) (syntax-violation-form . g$214$28472) (syntax-violation . g$214$16704) (simple-conditions . g$214$28471) (serious-condition? . g$214$28470) (non-continuable-violation? . g$214$28469) (&non-continuable . g$214$28468) (message-condition? . g$214$28467) (make-who-condition . g$214$28466) (make-warning . g$214$28465) (make-violation . g$214$28464) (make-undefined-violation . g$214$28463) (make-syntax-violation . g$214$28462) (make-serious-condition . g$214$28461) (make-non-continuable-violation . g$214$28460) (make-message-condition . g$214$28459) (make-lexical-violation . g$214$28458) (make-irritants-condition . g$214$28457) (make-implementation-restriction-violation . g$214$28456) (make-error . g$214$28455) (make-assertion-violation . g$214$28454) (lexical-violation? . g$214$28453) (irritants-condition? . g$214$28452) (implementation-restriction-violation? . g$214$28451) (&implementation-restriction . g$214$28450) (error? . g$214$28449) (condition-who . g$214$28448) (condition-predicate . g$214$28447) (condition-message . g$214$28446) (condition-irritants . g$214$28445) (condition-accessor . g$214$28444) (condition . g$214$28443) (assertion-violation? . g$214$28442) (condition? . g$214$28441) (utf32->string . g$214$28440) (utf16->string . g$214$28439) (utf8->string . g$214$28438) (uint-list->bytevector . g$214$28437) (u8-list->bytevector . g$214$28436) (string->utf8 . g$214$28435) (string->utf32 . g$214$28434) (string->utf16 . g$214$28433) (sint-list->bytevector . g$214$28432) (native-endianness . g$214$28431) (bytevector? . g$214$28430) (bytevector=? . g$214$28429) (bytevector-uint-set! . g$214$28428) (bytevector-uint-ref . g$214$28427) (bytevector-u8-set! . g$214$28426) (bytevector-u8-ref . g$214$28425) (bytevector-u64-set! . g$214$28424) (bytevector-u64-ref . g$214$28423) (bytevector-u64-native-set! . g$214$28422) (bytevector-u64-native-ref . g$214$28421) (bytevector-u32-set! . g$214$28420) (bytevector-u32-ref . g$214$28419) (bytevector-u32-native-set! . g$214$28418) (bytevector-u32-native-ref . g$214$28417) (bytevector-u16-set! . g$214$28416) (bytevector-u16-ref . g$214$28415) (bytevector-u16-native-set! . g$214$28414) (bytevector-u16-native-ref . g$214$28413) (bytevector-sint-set! . g$214$28412) (bytevector-sint-ref . g$214$28411) (bytevector-s8-set! . g$214$28410) (bytevector-s8-ref . g$214$28409) (bytevector-s64-set! . g$214$28408) (bytevector-s64-ref . g$214$28407) (bytevector-s64-native-set! . g$214$28406) (bytevector-s64-native-ref . g$214$28405) (bytevector-s32-set! . g$214$28404) (bytevector-s32-ref . g$214$28403) (bytevector-s32-native-set! . g$214$28402) (bytevector-s32-native-ref . g$214$28401) (bytevector-s16-set! . g$214$28400) (bytevector-s16-ref . g$214$28399) (bytevector-s16-native-set! . g$214$28398) (bytevector-s16-native-ref . g$214$28397) (bytevector-length . g$214$28396) (bytevector-ieee-single-ref . g$214$28395) (bytevector-ieee-single-native-set! . g$214$28394) (bytevector-ieee-single-native-ref . g$214$28393) (bytevector-ieee-double-ref . g$214$28392) (bytevector-ieee-double-native-set! . g$214$28391) (bytevector-ieee-double-native-ref . g$214$28390) (bytevector-fill! . g$214$28389) (bytevector-copy! . g$214$28388) (bytevector-copy . g$214$28387) (bytevector->uint-list . g$214$28386) (bytevector->u8-list . g$214$28385) (bytevector->sint-list . g$214$28384) (no-nans-violation? . g$214$28383) (no-infinities-violation? . g$214$28382) (make-no-nans-violation . g$214$28381) (make-no-infinities-violation . g$214$28380) (real->flonum . g$214$28379) (flzero? . g$214$28378) (fltruncate . g$214$28377) (fltan . g$214$28376) (flsqrt . g$214$28375) (flsin . g$214$28374) (flround . g$214$28373) (flpositive? . g$214$28372) (flonum? . g$214$28371) (flodd? . g$214$28370) (flnumerator . g$214$28369) (flnegative? . g$214$28368) (flnan? . g$214$28367) (flmod0 . g$214$28366) (flmod . g$214$28365) (flmin . g$214$28364) (flmax . g$214$28363) (fllog . g$214$28362) (flinteger? . g$214$28361) (flinfinite? . g$214$28360) (flfloor . g$214$28359) (flfinite? . g$214$28358) (flexpt . g$214$28357) (flexp . g$214$28356) (fleven? . g$214$28355) (fldiv0-and-mod0 . g$214$28354) (fldiv0 . g$214$28353) (fldiv-and-mod . g$214$28352) (fldiv . g$214$28351) (fldenominator . g$214$28350) (flcos . g$214$28349) (flceiling . g$214$28348) (flatan . g$214$28347) (flasin . g$214$28346) (flacos . g$214$28345) (flabs . g$214$28344) (fl>? . g$214$28343) (fl>=? . g$214$28342) (fl=? . g$214$28341) (fl<? . g$214$28340) (fl<=? . g$214$28339) (fl/ . g$214$28338) (fl- . g$214$28337) (fl+ . g$214$28336) (fl* . g$214$28335) (fixnum->flonum . g$214$28334) (fxzero? . g$214$28333) (fxxor . g$214$28332) (fxrotate-bit-field . g$214$28331) (fxreverse-bit-field . g$214$28330) (fxpositive? . g$214$28329) (fxodd? . g$214$28328) (fxnot . g$214$28327) (fxnegative? . g$214$28326) (fxmod0 . g$214$28325) (fxmod . g$214$28324) (fxmin . g$214$28323) (fxmax . g$214$28322) (fxlength . g$214$28321) (fxior . g$214$28320) (fxif . g$214$28319) (fxfirst-bit-set . g$214$28318) (fxeven? . g$214$28317) (fxdiv0-and-mod0 . g$214$28316) (fxdiv0 . g$214$28315) (fxdiv-and-mod . g$214$28314) (fxdiv . g$214$28313) (fxcopy-bit-field . g$214$28312) (fxcopy-bit . g$214$28311) (fxbit-set? . g$214$28310) (fxbit-field . g$214$28309) (fxbit-count . g$214$28308) (fxarithmetic-shift-right . g$214$28307) (fxarithmetic-shift-left . g$214$28306) (fxarithmetic-shift . g$214$28305) (fxand . g$214$28304) (fx>? . g$214$28303) (fx>=? . g$214$28302) (fx=? . g$214$28301) (fx<? . g$214$28300) (fx<=? . g$214$28299) (fx-/carry . g$214$28298) (fx- . g$214$28297) (fx+/carry . g$214$28296) (fx+ . g$214$28295) (fx*/carry . g$214$28294) (fx* . g$214$28293) (greatest-fixnum . g$214$28292) (least-fixnum . g$214$28291) (fixnum-width . g$214$28290) (fixnum? . g$214$28289) (bitwise-rotate-bit-field . g$214$28288) (bitwise-reverse-bit-field . g$214$28287) (bitwise-length . g$214$28286) (bitwise-if . g$214$28285) (bitwise-first-bit-set . g$214$28284) (bitwise-copy-bit-field . g$214$28283) (bitwise-copy-bit . g$214$28282) (bitwise-bit-set? . g$214$28281) (bitwise-bit-field . g$214$28280) (bitwise-bit-count . g$214$28279) (bitwise-xor . g$214$28278) (bitwise-ior . g$214$28277) (bitwise-and . g$214$28276) (bitwise-not . g$214$28275) (bitwise-arithmetic-shift-right . g$214$28274) (bitwise-arithmetic-shift-left . g$214$28273) (bitwise-arithmetic-shift . g$214$28272) (zero? . g$214$28271) (vector? . g$214$28270) (vector-set! . g$214$28269) (vector-ref . g$214$28268) (vector-map . g$214$28267) (vector-length . g$214$28266) (vector-for-each . g$214$28265) (vector-fill! . g$214$28264) (vector->list . g$214$28263) (vector . g$214$28262) (values . g$214$28261) (truncate . g$214$28260) (tan . g$214$28259) (symbol? . g$214$28258) (symbol=? . g$214$28257) (symbol->string . g$214$28256) (substring . g$214$28255) (string? . g$214$28254) (string>? . g$214$28253) (string>=? . g$214$28252) (string=? . g$214$28251) (string<? . g$214$28250) (string<=? . g$214$28249) (string-ref . g$214$28248) (string-length . g$214$28247) (string-for-each . g$214$28246) (string-copy . g$214$28245) (string-append . g$214$28244) (string->symbol . g$214$28243) (string->number . g$214$28242) (string->list . g$214$28241) (string . g$214$28240) (sqrt . g$214$28239) (sin . g$214$28238) (round . g$214$28237) (reverse . g$214$28236) (real? . g$214$28235) (real-valued? . g$214$28234) (real-part . g$214$28233) (rationalize . g$214$28232) (rational? . g$214$28231) (rational-valued? . g$214$28230) (procedure? . g$214$28229) (positive? . g$214$28228) (pair? . g$214$28227) (odd? . g$214$28226) (numerator . g$214$28225) (number? . g$214$28224) (number->string . g$214$28223) (null? . g$214$28222) (not . g$214$28221) (negative? . g$214$28220) (nan? . g$214$28219) (min . g$214$28218) (max . g$214$28217) (map . g$214$28216) (make-vector . g$214$28215) (make-string . g$214$28214) (make-rectangular . g$214$28213) (make-polar . g$214$28212) (magnitude . g$214$28211) (log . g$214$28210) (list? . g$214$28209) (list-tail . g$214$28208) (list-ref . g$214$28207) (list->vector . g$214$28206) (list->string . g$214$28205) (list . g$214$28204) (length . g$214$28203) (lcm . g$214$28202) (integer? . g$214$28201) (integer-valued? . g$214$28200) (integer->char . g$214$28199) (infinite? . g$214$28198) (inexact? . g$214$28197) (inexact . g$214$28196) (imag-part . g$214$28195) (gcd . g$214$28194) (for-each . g$214$28193) (floor . g$214$28192) (finite? . g$214$28191) (expt . g$214$28190) (exp . g$214$28189) (exact? . g$214$28188) (exact-integer-sqrt . g$214$28187) (exact . g$214$28186) (even? . g$214$28185) (error . g$214$28184) (eqv? . g$214$28183) (equal? . g$214$28182) (eq? . g$214$28181) (dynamic-wind . g$214$28180) (div0-and-mod0 . g$214$28179) (mod0 . g$214$28178) (div0 . g$214$28177) (div-and-mod . g$214$28176) (mod . g$214$28175) (div . g$214$28174) (denominator . g$214$28173) (cos . g$214$28172) (cons . g$214$28171) (complex? . g$214$28170) (char? . g$214$28169) (char>? . g$214$28168) (char>=? . g$214$28167) (char=? . g$214$28166) (char<? . g$214$28165) (char<=? . g$214$28164) (char->integer . g$214$28163) (ceiling . g$214$28162) (call-with-values . g$214$28161) (call/cc . g$214$28160) (call-with-current-continuation . g$214$28159) (cddddr . g$214$28158) (cdddar . g$214$28157) (cddadr . g$214$28156) (cddaar . g$214$28155) (cdaddr . g$214$28154) (cdadar . g$214$28153) (cdaadr . g$214$28152) (cdaaar . g$214$28151) (cadddr . g$214$28150) (caddar . g$214$28149) (cadadr . g$214$28148) (cadaar . g$214$28147) (caaddr . g$214$28146) (caadar . g$214$28145) (caaadr . g$214$28144) (caaaar . g$214$28143) (cdddr . g$214$28142) (cddar . g$214$28141) (cdadr . g$214$28140) (cdaar . g$214$28139) (caddr . g$214$28138) (cadar . g$214$28137) (caadr . g$214$28136) (caaar . g$214$28135) (cddr . g$214$28134) (cdar . g$214$28133) (cadr . g$214$28132) (caar . g$214$28131) (cdr . g$214$28130) (car . g$214$28129) (boolean? . g$214$28128) (boolean=? . g$214$28127) (atan . g$214$28126) (assertion-violation . g$214$28125) (asin . g$214$28124) (apply . g$214$28123) (append . g$214$28122) (angle . g$214$28121) (acos . g$214$28120) (abs . g$214$28119) (/ . g$214$28118) (* . g$214$28117) (- . g$214$28116) (+ . g$214$28115) (>= . g$214$28114) (> . g$214$28113) (= . g$214$28112) (<= . g$214$28111) (< . g$214$28110) (let*-values . g$214$28109) (&no-nans . g$214$28108) (&no-infinities . g$214$28107) (&i/o-encoding . g$214$28106) (&i/o-decoding . g$214$28105) (&i/o-port . g$214$28104) (&i/o-file-does-not-exist . g$214$28103) (&i/o-file-already-exists . g$214$28102) (&i/o-file-is-read-only . g$214$28101) (&i/o-file-protection . g$214$28100) (&i/o-filename . g$214$28099) (&i/o-invalid-position . g$214$28098) (&i/o-write . g$214$28097) (&i/o-read . g$214$28096) (&i/o . g$214$28095) (&undefined . g$214$28094) (&syntax . g$214$28093) (&lexical . g$214$28092) (&who . g$214$28089) (&irritants . g$214$28088) (&assertion . g$214$28087) (&violation . g$214$28086) (&error . g$214$28085) (&serious . g$214$28084) (&warning . g$214$28083) (&message . g$214$28082) (&condition . g$214$28081) (define-condition-type . g$214$28080) (define-enumeration . g$214$28079) (define-record-type . g$214$28078) (parent-rtd . g$214$28077) (nongenerative . g$214$28076) (opaque . g$214$28075) (sealed . g$214$28074) (protocol . g$214$28073) (parent . g$214$28072) (immutable . g$214$28071) (mutable . g$214$28070) (fields . g$214$28069) (error-handling-mode . g$214$28068) (file-options . g$214$28067) (buffer-mode . g$214$28066) (eol-style . g$214$28065) (guard . g$214$28064) (unsyntax-splicing . g$214$28061) (unsyntax . g$214$28060) (unquote-splicing . g$214$28059) (unquote . g$214$28058) (_ . g$214$28057) (else . g$214$28056) (=> . g$214$28055) (|...| . g$214$28054) (assert . g$214$28053) (endianness . g$214$28052) (or . g$214$28049) (and . g$214$28048) (do . g$214$28047) (cond . g$214$28046) (let* . g$214$28045) (let-values . g$214$28044) (let . g$214$28043) (identifier-syntax . g$214$28042) (with-syntax . g$214$28041) (quasisyntax . g$214$28040) (quasiquote . g$214$28039) (syntax-rules . g$214$28038) (record-constructor-descriptor . g$214$28035) (record-type-descriptor . g$214$28034) (case . g$214$28033) (unless . g$214$28031) (when . g$214$28030) (if . g$214$28029) (letrec* . g$214$28028) (letrec . g$214$28027) (case-lambda . g$214$28025) (lambda . g$214$28024) (syntax . g$214$28023) (syntax-case . g$214$28022) (quote . g$214$28021) (letrec-syntax . g$214$28019) (let-syntax . g$214$28018) (set! . g$214$28017) (begin . g$214$28015) (define-syntax . g$214$28013) (define . g$214$28012)) '() values values '#t) (g$214$15506 'g$214$28725 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . g$214$16674) (quotient . g$214$28532) (null-environment . g$214$16672) (remainder . g$214$28531) (modulo . g$214$28530) (inexact->exact . g$214$28529) (force . g$214$28528) (exact->inexact . g$214$28527) (delay . g$214$28051)) '() values values '#t) (g$214$15506 'g$214$28726 '(rnrs control) '(6) '() '() '() '((do . g$214$28047) (unless . g$214$28031) (when . g$214$28030) (case-lambda . g$214$28025)) '() values values '#t) (g$214$15506 'g$214$28727 '(rnrs eval) '(6) '() '() '() '((eval . g$214$16678) (environment . g$214$16670)) '() values values '#t) (g$214$15506 'g$214$28728 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . g$214$28522) (set-car! . g$214$28521)) '() values values '#t) (g$214$15506 'g$214$28729 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . g$214$28524) (string-set! . g$214$28523)) '() values values '#t) (g$214$15506 'g$214$28730 '(rnrs programs) '(6) '() '() '() '((exit . g$214$28526) (command-line . g$214$28525)) '() values values '#t) (g$214$15506 'g$214$28731 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . g$214$16030) (identifier? . g$214$16706) (generate-temporaries . g$214$16692) (free-identifier=? . g$214$16694) (syntax->datum . g$214$16710) (datum->syntax . g$214$16708) (bound-identifier=? . g$214$16696) (syntax-violation . g$214$16704) (unsyntax-splicing . g$214$28061) (unsyntax . g$214$28060) (_ . g$214$28057) (|...| . g$214$28054) (with-syntax . g$214$28041) (quasisyntax . g$214$28040) (syntax . g$214$28023) (syntax-case . g$214$28022)) '() values values '#t) (g$214$15506 'g$214$28732 '(rnrs files) '(6) '() '() '() '((delete-file . g$214$28664) (file-exists? . g$214$28663) (make-i/o-write-error . g$214$28581) (make-i/o-read-error . g$214$28580) (make-i/o-port-error . g$214$28579) (make-i/o-invalid-position-error . g$214$28578) (make-i/o-filename-error . g$214$28577) (make-i/o-file-protection-error . g$214$28576) (make-i/o-file-is-read-only-error . g$214$28575) (make-i/o-file-does-not-exist-error . g$214$28574) (make-i/o-file-already-exists-error . g$214$28573) (make-i/o-error . g$214$28572) (i/o-write-error? . g$214$28560) (i/o-read-error? . g$214$28559) (i/o-port-error? . g$214$28558) (i/o-invalid-position-error? . g$214$28557) (i/o-filename-error? . g$214$28556) (i/o-file-protection-error? . g$214$28555) (i/o-file-is-read-only-error? . g$214$28554) (i/o-file-does-not-exist-error? . g$214$28553) (i/o-file-already-exists-error? . g$214$28552) (i/o-error? . g$214$28551) (i/o-error-port . g$214$28550) (i/o-error-filename . g$214$28549) (&i/o-port . g$214$28104) (&i/o-file-does-not-exist . g$214$28103) (&i/o-file-already-exists . g$214$28102) (&i/o-file-is-read-only . g$214$28101) (&i/o-file-protection . g$214$28100) (&i/o-filename . g$214$28099) (&i/o-invalid-position . g$214$28098) (&i/o-write . g$214$28097) (&i/o-read . g$214$28096) (&i/o . g$214$28095)) '() values values '#t) (g$214$15506 'g$214$28733 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . g$214$28662) (vector-sort . g$214$28661) (list-sort . g$214$28660)) '() values values '#t) (g$214$15506 'g$214$28734 '(rnrs base) '(6) '() '() '() '((zero? . g$214$28271) (vector? . g$214$28270) (vector-set! . g$214$28269) (vector-ref . g$214$28268) (vector-map . g$214$28267) (vector-length . g$214$28266) (vector-for-each . g$214$28265) (vector-fill! . g$214$28264) (vector->list . g$214$28263) (vector . g$214$28262) (values . g$214$28261) (truncate . g$214$28260) (tan . g$214$28259) (symbol? . g$214$28258) (symbol=? . g$214$28257) (symbol->string . g$214$28256) (substring . g$214$28255) (string? . g$214$28254) (string>? . g$214$28253) (string>=? . g$214$28252) (string=? . g$214$28251) (string<? . g$214$28250) (string<=? . g$214$28249) (string-ref . g$214$28248) (string-length . g$214$28247) (string-for-each . g$214$28246) (string-copy . g$214$28245) (string-append . g$214$28244) (string->symbol . g$214$28243) (string->number . g$214$28242) (string->list . g$214$28241) (string . g$214$28240) (sqrt . g$214$28239) (sin . g$214$28238) (round . g$214$28237) (reverse . g$214$28236) (real? . g$214$28235) (real-valued? . g$214$28234) (real-part . g$214$28233) (rationalize . g$214$28232) (rational? . g$214$28231) (rational-valued? . g$214$28230) (procedure? . g$214$28229) (positive? . g$214$28228) (pair? . g$214$28227) (odd? . g$214$28226) (numerator . g$214$28225) (number? . g$214$28224) (number->string . g$214$28223) (null? . g$214$28222) (not . g$214$28221) (negative? . g$214$28220) (nan? . g$214$28219) (min . g$214$28218) (max . g$214$28217) (map . g$214$28216) (make-vector . g$214$28215) (make-string . g$214$28214) (make-rectangular . g$214$28213) (make-polar . g$214$28212) (magnitude . g$214$28211) (log . g$214$28210) (list? . g$214$28209) (list-tail . g$214$28208) (list-ref . g$214$28207) (list->vector . g$214$28206) (list->string . g$214$28205) (list . g$214$28204) (length . g$214$28203) (lcm . g$214$28202) (integer? . g$214$28201) (integer-valued? . g$214$28200) (integer->char . g$214$28199) (infinite? . g$214$28198) (inexact? . g$214$28197) (inexact . g$214$28196) (imag-part . g$214$28195) (gcd . g$214$28194) (for-each . g$214$28193) (floor . g$214$28192) (finite? . g$214$28191) (expt . g$214$28190) (exp . g$214$28189) (exact? . g$214$28188) (exact-integer-sqrt . g$214$28187) (exact . g$214$28186) (even? . g$214$28185) (error . g$214$28184) (eqv? . g$214$28183) (equal? . g$214$28182) (eq? . g$214$28181) (dynamic-wind . g$214$28180) (div0-and-mod0 . g$214$28179) (mod0 . g$214$28178) (div0 . g$214$28177) (div-and-mod . g$214$28176) (mod . g$214$28175) (div . g$214$28174) (denominator . g$214$28173) (cos . g$214$28172) (cons . g$214$28171) (complex? . g$214$28170) (char? . g$214$28169) (char>? . g$214$28168) (char>=? . g$214$28167) (char=? . g$214$28166) (char<? . g$214$28165) (char<=? . g$214$28164) (char->integer . g$214$28163) (ceiling . g$214$28162) (call-with-values . g$214$28161) (call/cc . g$214$28160) (call-with-current-continuation . g$214$28159) (cddddr . g$214$28158) (cdddar . g$214$28157) (cddadr . g$214$28156) (cddaar . g$214$28155) (cdaddr . g$214$28154) (cdadar . g$214$28153) (cdaadr . g$214$28152) (cdaaar . g$214$28151) (cadddr . g$214$28150) (caddar . g$214$28149) (cadadr . g$214$28148) (cadaar . g$214$28147) (caaddr . g$214$28146) (caadar . g$214$28145) (caaadr . g$214$28144) (caaaar . g$214$28143) (cdddr . g$214$28142) (cddar . g$214$28141) (cdadr . g$214$28140) (cdaar . g$214$28139) (caddr . g$214$28138) (cadar . g$214$28137) (caadr . g$214$28136) (caaar . g$214$28135) (cddr . g$214$28134) (cdar . g$214$28133) (cadr . g$214$28132) (caar . g$214$28131) (cdr . g$214$28130) (car . g$214$28129) (boolean? . g$214$28128) (boolean=? . g$214$28127) (atan . g$214$28126) (assertion-violation . g$214$28125) (asin . g$214$28124) (apply . g$214$28123) (append . g$214$28122) (angle . g$214$28121) (acos . g$214$28120) (abs . g$214$28119) (/ . g$214$28118) (* . g$214$28117) (- . g$214$28116) (+ . g$214$28115) (>= . g$214$28114) (> . g$214$28113) (= . g$214$28112) (<= . g$214$28111) (< . g$214$28110) (let*-values . g$214$28109) (unquote-splicing . g$214$28059) (unquote . g$214$28058) (_ . g$214$28057) (else . g$214$28056) (=> . g$214$28055) (|...| . g$214$28054) (assert . g$214$28053) (or . g$214$28049) (and . g$214$28048) (cond . g$214$28046) (let* . g$214$28045) (let-values . g$214$28044) (let . g$214$28043) (identifier-syntax . g$214$28042) (quasiquote . g$214$28039) (syntax-rules . g$214$28038) (case . g$214$28033) (if . g$214$28029) (letrec* . g$214$28028) (letrec . g$214$28027) (lambda . g$214$28024) (quote . g$214$28021) (letrec-syntax . g$214$28019) (let-syntax . g$214$28018) (set! . g$214$28017) (begin . g$214$28015) (define-syntax . g$214$28013) (define . g$214$28012)) '() values values '#t) (g$214$15506 'g$214$28735 '(rnrs lists) '(6) '() '() '() '((remove . g$214$28520) (remv . g$214$28519) (remp . g$214$28518) (remq . g$214$28517) (partition . g$214$28516) (memv . g$214$28515) (memq . g$214$28514) (memp . g$214$28513) (member . g$214$28512) (exists . g$214$28511) (for-all . g$214$28510) (fold-right . g$214$28509) (fold-left . g$214$28508) (find . g$214$28507) (filter . g$214$28506) (cons* . g$214$28505) (assv . g$214$28504) (assq . g$214$28503) (assp . g$214$28502) (assoc . g$214$28501)) '() values values '#t) (g$214$15506 'g$214$28736 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . g$214$28638) (call-with-input-file . g$214$28637) (write-char . g$214$28636) (write . g$214$28635) (with-output-to-file . g$214$28634) (with-input-from-file . g$214$28633) (read-char . g$214$28632) (read . g$214$28631) (peek-char . g$214$28630) (open-output-file . g$214$28629) (open-input-file . g$214$28628) (newline . g$214$28627) (display . g$214$28626) (close-output-port . g$214$28625) (close-input-port . g$214$28624) (eof-object? . g$214$28623) (eof-object . g$214$28622) (current-error-port . g$214$28621) (current-output-port . g$214$28620) (current-input-port . g$214$28619) (output-port? . g$214$28618) (input-port? . g$214$28617) (make-i/o-write-error . g$214$28581) (make-i/o-read-error . g$214$28580) (make-i/o-port-error . g$214$28579) (make-i/o-invalid-position-error . g$214$28578) (make-i/o-filename-error . g$214$28577) (make-i/o-file-protection-error . g$214$28576) (make-i/o-file-is-read-only-error . g$214$28575) (make-i/o-file-does-not-exist-error . g$214$28574) (make-i/o-file-already-exists-error . g$214$28573) (make-i/o-error . g$214$28572) (i/o-write-error? . g$214$28560) (i/o-read-error? . g$214$28559) (i/o-port-error? . g$214$28558) (i/o-invalid-position-error? . g$214$28557) (i/o-filename-error? . g$214$28556) (i/o-file-protection-error? . g$214$28555) (i/o-file-is-read-only-error? . g$214$28554) (i/o-file-does-not-exist-error? . g$214$28553) (i/o-file-already-exists-error? . g$214$28552) (i/o-error? . g$214$28551) (i/o-error-port . g$214$28550) (i/o-error-filename . g$214$28549) (&i/o-port . g$214$28104) (&i/o-file-does-not-exist . g$214$28103) (&i/o-file-already-exists . g$214$28102) (&i/o-file-is-read-only . g$214$28101) (&i/o-file-protection . g$214$28100) (&i/o-filename . g$214$28099) (&i/o-invalid-position . g$214$28098) (&i/o-write . g$214$28097) (&i/o-read . g$214$28096) (&i/o . g$214$28095)) '() values values '#t) (g$214$15506 'g$214$28737 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . g$214$28563) (utf32->string . g$214$28440) (utf16->string . g$214$28439) (utf8->string . g$214$28438) (uint-list->bytevector . g$214$28437) (u8-list->bytevector . g$214$28436) (string->utf8 . g$214$28435) (string->utf32 . g$214$28434) (string->utf16 . g$214$28433) (sint-list->bytevector . g$214$28432) (native-endianness . g$214$28431) (bytevector? . g$214$28430) (bytevector=? . g$214$28429) (bytevector-uint-set! . g$214$28428) (bytevector-uint-ref . g$214$28427) (bytevector-u8-set! . g$214$28426) (bytevector-u8-ref . g$214$28425) (bytevector-u64-set! . g$214$28424) (bytevector-u64-ref . g$214$28423) (bytevector-u64-native-set! . g$214$28422) (bytevector-u64-native-ref . g$214$28421) (bytevector-u32-set! . g$214$28420) (bytevector-u32-ref . g$214$28419) (bytevector-u32-native-set! . g$214$28418) (bytevector-u32-native-ref . g$214$28417) (bytevector-u16-set! . g$214$28416) (bytevector-u16-ref . g$214$28415) (bytevector-u16-native-set! . g$214$28414) (bytevector-u16-native-ref . g$214$28413) (bytevector-sint-set! . g$214$28412) (bytevector-sint-ref . g$214$28411) (bytevector-s8-set! . g$214$28410) (bytevector-s8-ref . g$214$28409) (bytevector-s64-set! . g$214$28408) (bytevector-s64-ref . g$214$28407) (bytevector-s64-native-set! . g$214$28406) (bytevector-s64-native-ref . g$214$28405) (bytevector-s32-set! . g$214$28404) (bytevector-s32-ref . g$214$28403) (bytevector-s32-native-set! . g$214$28402) (bytevector-s32-native-ref . g$214$28401) (bytevector-s16-set! . g$214$28400) (bytevector-s16-ref . g$214$28399) (bytevector-s16-native-set! . g$214$28398) (bytevector-s16-native-ref . g$214$28397) (bytevector-length . g$214$28396) (bytevector-ieee-single-ref . g$214$28395) (bytevector-ieee-single-native-set! . g$214$28394) (bytevector-ieee-single-native-ref . g$214$28393) (bytevector-ieee-double-ref . g$214$28392) (bytevector-ieee-double-native-set! . g$214$28391) (bytevector-ieee-double-native-ref . g$214$28390) (bytevector-fill! . g$214$28389) (bytevector-copy! . g$214$28388) (bytevector-copy . g$214$28387) (bytevector->uint-list . g$214$28386) (bytevector->u8-list . g$214$28385) (bytevector->sint-list . g$214$28384) (endianness . g$214$28052)) '() values values '#t) (g$214$15506 'g$214$28738 '(rnrs unicode) '(6) '() '() '() '((string-upcase . g$214$28710) (string-titlecase . g$214$28709) (string-normalize-nfkd . g$214$28708) (string-normalize-nfkc . g$214$28707) (string-normalize-nfd . g$214$28706) (string-normalize-nfc . g$214$28705) (string-foldcase . g$214$28704) (string-downcase . g$214$28703) (string-ci>? . g$214$28702) (string-ci>=? . g$214$28701) (string-ci=? . g$214$28700) (string-ci<? . g$214$28699) (string-ci<=? . g$214$28698) (char-whitespace? . g$214$28697) (char-upper-case? . g$214$28696) (char-title-case? . g$214$28695) (char-numeric? . g$214$28694) (char-lower-case? . g$214$28693) (char-general-category . g$214$28692) (char-upcase . g$214$28691) (char-titlecase . g$214$28690) (char-foldcase . g$214$28689) (char-downcase . g$214$28688) (char-ci>? . g$214$28687) (char-ci>=? . g$214$28686) (char-ci=? . g$214$28685) (char-ci<? . g$214$28684) (char-ci<=? . g$214$28683) (char-alphabetic? . g$214$28682)) '() values values '#t) (g$214$15506 'g$214$28739 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . g$214$28494) (raise-continuable . g$214$28493) (raise . g$214$28492) (guard . g$214$28064) (else . g$214$28056) (=> . g$214$28055)) '() values values '#t) (g$214$15506 'g$214$28740 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . g$214$28288) (bitwise-reverse-bit-field . g$214$28287) (bitwise-length . g$214$28286) (bitwise-if . g$214$28285) (bitwise-first-bit-set . g$214$28284) (bitwise-copy-bit-field . g$214$28283) (bitwise-copy-bit . g$214$28282) (bitwise-bit-set? . g$214$28281) (bitwise-bit-field . g$214$28280) (bitwise-bit-count . g$214$28279) (bitwise-xor . g$214$28278) (bitwise-ior . g$214$28277) (bitwise-and . g$214$28276) (bitwise-not . g$214$28275) (bitwise-arithmetic-shift-right . g$214$28274) (bitwise-arithmetic-shift-left . g$214$28273) (bitwise-arithmetic-shift . g$214$28272)) '() values values '#t) (g$214$15506 'g$214$28741 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . g$214$28333) (fxxor . g$214$28332) (fxrotate-bit-field . g$214$28331) (fxreverse-bit-field . g$214$28330) (fxpositive? . g$214$28329) (fxodd? . g$214$28328) (fxnot . g$214$28327) (fxnegative? . g$214$28326) (fxmod0 . g$214$28325) (fxmod . g$214$28324) (fxmin . g$214$28323) (fxmax . g$214$28322) (fxlength . g$214$28321) (fxior . g$214$28320) (fxif . g$214$28319) (fxfirst-bit-set . g$214$28318) (fxeven? . g$214$28317) (fxdiv0-and-mod0 . g$214$28316) (fxdiv0 . g$214$28315) (fxdiv-and-mod . g$214$28314) (fxdiv . g$214$28313) (fxcopy-bit-field . g$214$28312) (fxcopy-bit . g$214$28311) (fxbit-set? . g$214$28310) (fxbit-field . g$214$28309) (fxbit-count . g$214$28308) (fxarithmetic-shift-right . g$214$28307) (fxarithmetic-shift-left . g$214$28306) (fxarithmetic-shift . g$214$28305) (fxand . g$214$28304) (fx>? . g$214$28303) (fx>=? . g$214$28302) (fx=? . g$214$28301) (fx<? . g$214$28300) (fx<=? . g$214$28299) (fx-/carry . g$214$28298) (fx- . g$214$28297) (fx+/carry . g$214$28296) (fx+ . g$214$28295) (fx*/carry . g$214$28294) (fx* . g$214$28293) (greatest-fixnum . g$214$28292) (least-fixnum . g$214$28291) (fixnum-width . g$214$28290) (fixnum? . g$214$28289)) '() values values '#t) (g$214$15506 'g$214$28742 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . g$214$28383) (no-infinities-violation? . g$214$28382) (make-no-nans-violation . g$214$28381) (make-no-infinities-violation . g$214$28380) (real->flonum . g$214$28379) (flzero? . g$214$28378) (fltruncate . g$214$28377) (fltan . g$214$28376) (flsqrt . g$214$28375) (flsin . g$214$28374) (flround . g$214$28373) (flpositive? . g$214$28372) (flonum? . g$214$28371) (flodd? . g$214$28370) (flnumerator . g$214$28369) (flnegative? . g$214$28368) (flnan? . g$214$28367) (flmod0 . g$214$28366) (flmod . g$214$28365) (flmin . g$214$28364) (flmax . g$214$28363) (fllog . g$214$28362) (flinteger? . g$214$28361) (flinfinite? . g$214$28360) (flfloor . g$214$28359) (flfinite? . g$214$28358) (flexpt . g$214$28357) (flexp . g$214$28356) (fleven? . g$214$28355) (fldiv0-and-mod0 . g$214$28354) (fldiv0 . g$214$28353) (fldiv-and-mod . g$214$28352) (fldiv . g$214$28351) (fldenominator . g$214$28350) (flcos . g$214$28349) (flceiling . g$214$28348) (flatan . g$214$28347) (flasin . g$214$28346) (flacos . g$214$28345) (flabs . g$214$28344) (fl>? . g$214$28343) (fl>=? . g$214$28342) (fl=? . g$214$28341) (fl<? . g$214$28340) (fl<=? . g$214$28339) (fl/ . g$214$28338) (fl- . g$214$28337) (fl+ . g$214$28336) (fl* . g$214$28335) (fixnum->flonum . g$214$28334) (&no-nans . g$214$28108) (&no-infinities . g$214$28107)) '() values values '#t) (g$214$15506 'g$214$28743 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . g$214$28659) (string-ci-hash . g$214$28658) (string-hash . g$214$28657) (equal-hash . g$214$28656) (hashtable-equivalence-function . g$214$28655) (make-hashtable . g$214$28654) (hashtable-hash-function . g$214$28653) (make-eqv-hashtable . g$214$28652) (make-eq-hashtable . g$214$28651) (hashtable? . g$214$28650) (hashtable-update! . g$214$28649) (hashtable-size . g$214$28648) (hashtable-set! . g$214$28647) (hashtable-ref . g$214$28646) (hashtable-mutable? . g$214$28645) (hashtable-keys . g$214$28644) (hashtable-entries . g$214$28643) (hashtable-delete! . g$214$28642) (hashtable-copy . g$214$28641) (hashtable-contains? . g$214$28640) (hashtable-clear! . g$214$28639)) '() values values '#t) (g$214$15506 'g$214$28744 '(rnrs io ports) '(6) '() '() '() '((eof-object? . g$214$28623) (eof-object . g$214$28622) (current-error-port . g$214$28621) (current-output-port . g$214$28620) (current-input-port . g$214$28619) (output-port? . g$214$28618) (input-port? . g$214$28617) (utf-8-codec . g$214$28616) (utf-16-codec . g$214$28615) (transcoder-error-handling-mode . g$214$28614) (transcoder-eol-style . g$214$28613) (transcoder-codec . g$214$28612) (transcoded-port . g$214$28611) (textual-port? . g$214$28610) (string->bytevector . g$214$28609) (standard-output-port . g$214$28608) (standard-input-port . g$214$28607) (standard-error-port . g$214$28606) (set-port-position! . g$214$28605) (put-u8 . g$214$28604) (put-string . g$214$28603) (put-datum . g$214$28602) (put-char . g$214$28601) (put-bytevector . g$214$28600) (port? . g$214$28599) (port-transcoder . g$214$28598) (port-position . g$214$28597) (port-has-set-port-position!? . g$214$28596) (port-has-port-position? . g$214$28595) (port-eof? . g$214$28594) (output-port-buffer-mode . g$214$28593) (open-string-output-port . g$214$28592) (open-string-input-port . g$214$28591) (open-file-output-port . g$214$28590) (open-file-input/output-port . g$214$28589) (open-file-input-port . g$214$28588) (open-bytevector-output-port . g$214$28587) (open-bytevector-input-port . g$214$28586) (native-transcoder . g$214$28585) (native-eol-style . g$214$28584) (make-transcoder . g$214$28583) (latin-1-codec . g$214$28582) (make-i/o-write-error . g$214$28581) (make-i/o-read-error . g$214$28580) (make-i/o-port-error . g$214$28579) (make-i/o-invalid-position-error . g$214$28578) (make-i/o-filename-error . g$214$28577) (make-i/o-file-protection-error . g$214$28576) (make-i/o-file-is-read-only-error . g$214$28575) (make-i/o-file-does-not-exist-error . g$214$28574) (make-i/o-file-already-exists-error . g$214$28573) (make-i/o-error . g$214$28572) (make-i/o-encoding-error . g$214$28571) (make-i/o-decoding-error . g$214$28570) (make-custom-textual-output-port . g$214$28569) (make-custom-textual-input/output-port . g$214$28568) (make-custom-textual-input-port . g$214$28567) (make-custom-binary-output-port . g$214$28566) (make-custom-binary-input/output-port . g$214$28565) (make-custom-binary-input-port . g$214$28564) (lookahead-u8 . g$214$28562) (lookahead-char . g$214$28561) (i/o-write-error? . g$214$28560) (i/o-read-error? . g$214$28559) (i/o-port-error? . g$214$28558) (i/o-invalid-position-error? . g$214$28557) (i/o-filename-error? . g$214$28556) (i/o-file-protection-error? . g$214$28555) (i/o-file-is-read-only-error? . g$214$28554) (i/o-file-does-not-exist-error? . g$214$28553) (i/o-file-already-exists-error? . g$214$28552) (i/o-error? . g$214$28551) (i/o-error-port . g$214$28550) (i/o-error-filename . g$214$28549) (i/o-encoding-error? . g$214$28548) (i/o-encoding-error-char . g$214$28547) (i/o-decoding-error? . g$214$28546) (get-u8 . g$214$28545) (get-string-n! . g$214$28544) (get-string-n . g$214$28543) (get-string-all . g$214$28542) (get-line . g$214$28541) (get-datum . g$214$28540) (get-char . g$214$28539) (get-bytevector-some . g$214$28538) (get-bytevector-n! . g$214$28537) (get-bytevector-n . g$214$28536) (get-bytevector-all . g$214$28535) (flush-output-port . g$214$28534) (close-port . g$214$28533) (call-with-string-output-port . g$214$28500) (call-with-port . g$214$28499) (call-with-bytevector-output-port . g$214$28498) (bytevector->string . g$214$28497) (buffer-mode? . g$214$28496) (binary-port? . g$214$28495) (&i/o-encoding . g$214$28106) (&i/o-decoding . g$214$28105) (&i/o-port . g$214$28104) (&i/o-file-does-not-exist . g$214$28103) (&i/o-file-already-exists . g$214$28102) (&i/o-file-is-read-only . g$214$28101) (&i/o-file-protection . g$214$28100) (&i/o-filename . g$214$28099) (&i/o-invalid-position . g$214$28098) (&i/o-write . g$214$28097) (&i/o-read . g$214$28096) (&i/o . g$214$28095) (error-handling-mode . g$214$28068) (file-options . g$214$28067) (buffer-mode . g$214$28066) (eol-style . g$214$28065)) '() values values '#t) (g$214$15506 'g$214$28745 '(rnrs enums) '(6) '() '() '() '((make-enumeration . g$214$28491) (enum-set=? . g$214$28490) (enum-set-universe . g$214$28489) (enum-set-union . g$214$28488) (enum-set-subset? . g$214$28487) (enum-set-projection . g$214$28486) (enum-set-member? . g$214$28485) (enum-set-intersection . g$214$28484) (enum-set-indexer . g$214$28483) (enum-set-difference . g$214$28482) (enum-set-constructor . g$214$28481) (enum-set-complement . g$214$28480) (enum-set->list . g$214$28479) (define-enumeration . g$214$28079)) '() values values '#t) (g$214$15506 'g$214$28746 '(rnrs conditions) '(6) '() '() '() '((who-condition? . g$214$28478) (warning? . g$214$28477) (violation? . g$214$28476) (undefined-violation? . g$214$28475) (syntax-violation? . g$214$28474) (syntax-violation-subform . g$214$28473) (syntax-violation-form . g$214$28472) (syntax-violation . g$214$16704) (simple-conditions . g$214$28471) (serious-condition? . g$214$28470) (non-continuable-violation? . g$214$28469) (&non-continuable . g$214$28468) (message-condition? . g$214$28467) (make-who-condition . g$214$28466) (make-warning . g$214$28465) (make-violation . g$214$28464) (make-undefined-violation . g$214$28463) (make-syntax-violation . g$214$28462) (make-serious-condition . g$214$28461) (make-non-continuable-violation . g$214$28460) (make-message-condition . g$214$28459) (make-lexical-violation . g$214$28458) (make-irritants-condition . g$214$28457) (make-implementation-restriction-violation . g$214$28456) (make-error . g$214$28455) (make-assertion-violation . g$214$28454) (lexical-violation? . g$214$28453) (irritants-condition? . g$214$28452) (implementation-restriction-violation? . g$214$28451) (&implementation-restriction . g$214$28450) (error? . g$214$28449) (condition-who . g$214$28448) (condition-predicate . g$214$28447) (condition-message . g$214$28446) (condition-irritants . g$214$28445) (condition-accessor . g$214$28444) (condition . g$214$28443) (assertion-violation? . g$214$28442) (condition? . g$214$28441) (&undefined . g$214$28094) (&syntax . g$214$28093) (&lexical . g$214$28092) (&who . g$214$28089) (&irritants . g$214$28088) (&assertion . g$214$28087) (&violation . g$214$28086) (&error . g$214$28085) (&serious . g$214$28084) (&warning . g$214$28083) (&message . g$214$28082) (&condition . g$214$28081) (define-condition-type . g$214$28080)) '() values values '#t) (g$214$15506 'g$214$28747 '(rnrs records inspection) '(6) '() '() '() '((record? . g$214$28674) (record-type-uid . g$214$28673) (record-type-sealed? . g$214$28672) (record-type-parent . g$214$28671) (record-type-opaque? . g$214$28670) (record-type-name . g$214$28669) (record-type-generative? . g$214$28668) (record-type-field-names . g$214$28667) (record-rtd . g$214$28666) (record-field-mutable? . g$214$28665)) '() values values '#t) (g$214$15506 'g$214$28748 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . g$214$28681) (record-predicate . g$214$28680) (record-mutator . g$214$28679) (record-constructor . g$214$28678) (record-accessor . g$214$28677) (make-record-type-descriptor . g$214$28676) (make-record-constructor-descriptor . g$214$28675)) '() values values '#t) (g$214$15506 'g$214$28749 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . g$214$28078) (parent-rtd . g$214$28077) (nongenerative . g$214$28076) (opaque . g$214$28075) (sealed . g$214$28074) (protocol . g$214$28073) (parent . g$214$28072) (immutable . g$214$28071) (mutable . g$214$28070) (fields . g$214$28069) (record-constructor-descriptor . g$214$28035) (record-type-descriptor . g$214$28034)) '() values values '#t) (g$214$15506 'g$214$28750 '(psyntax system $all) '() '() '() '() '((syntax-error . g$214$16700) (syntax-dispatch . g$214$16561) (pretty-print . g$214$28718) (eval-core . g$214$28717) (set-symbol-value! . g$214$28716) (symbol-value . g$214$28715) (gensym . g$214$28714) (void . g$214$28713) (load . g$214$27995) (interaction-environment . g$214$28712) (char-ready? . g$214$28711) (string-upcase . g$214$28710) (string-titlecase . g$214$28709) (string-normalize-nfkd . g$214$28708) (string-normalize-nfkc . g$214$28707) (string-normalize-nfd . g$214$28706) (string-normalize-nfc . g$214$28705) (string-foldcase . g$214$28704) (string-downcase . g$214$28703) (string-ci>? . g$214$28702) (string-ci>=? . g$214$28701) (string-ci=? . g$214$28700) (string-ci<? . g$214$28699) (string-ci<=? . g$214$28698) (char-whitespace? . g$214$28697) (char-upper-case? . g$214$28696) (char-title-case? . g$214$28695) (char-numeric? . g$214$28694) (char-lower-case? . g$214$28693) (char-general-category . g$214$28692) (char-upcase . g$214$28691) (char-titlecase . g$214$28690) (char-foldcase . g$214$28689) (char-downcase . g$214$28688) (char-ci>? . g$214$28687) (char-ci>=? . g$214$28686) (char-ci=? . g$214$28685) (char-ci<? . g$214$28684) (char-ci<=? . g$214$28683) (char-alphabetic? . g$214$28682) (make-variable-transformer . g$214$16030) (identifier? . g$214$16706) (generate-temporaries . g$214$16692) (free-identifier=? . g$214$16694) (syntax->datum . g$214$16710) (datum->syntax . g$214$16708) (bound-identifier=? . g$214$16696) (record-type-descriptor? . g$214$28681) (record-predicate . g$214$28680) (record-mutator . g$214$28679) (record-constructor . g$214$28678) (record-accessor . g$214$28677) (make-record-type-descriptor . g$214$28676) (make-record-constructor-descriptor . g$214$28675) (record? . g$214$28674) (record-type-uid . g$214$28673) (record-type-sealed? . g$214$28672) (record-type-parent . g$214$28671) (record-type-opaque? . g$214$28670) (record-type-name . g$214$28669) (record-type-generative? . g$214$28668) (record-type-field-names . g$214$28667) (record-rtd . g$214$28666) (record-field-mutable? . g$214$28665) (delete-file . g$214$28664) (file-exists? . g$214$28663) (vector-sort! . g$214$28662) (vector-sort . g$214$28661) (list-sort . g$214$28660) (symbol-hash . g$214$28659) (string-ci-hash . g$214$28658) (string-hash . g$214$28657) (equal-hash . g$214$28656) (hashtable-equivalence-function . g$214$28655) (make-hashtable . g$214$28654) (hashtable-hash-function . g$214$28653) (make-eqv-hashtable . g$214$28652) (make-eq-hashtable . g$214$28651) (hashtable? . g$214$28650) (hashtable-update! . g$214$28649) (hashtable-size . g$214$28648) (hashtable-set! . g$214$28647) (hashtable-ref . g$214$28646) (hashtable-mutable? . g$214$28645) (hashtable-keys . g$214$28644) (hashtable-entries . g$214$28643) (hashtable-delete! . g$214$28642) (hashtable-copy . g$214$28641) (hashtable-contains? . g$214$28640) (hashtable-clear! . g$214$28639) (call-with-output-file . g$214$28638) (call-with-input-file . g$214$28637) (write-char . g$214$28636) (write . g$214$28635) (with-output-to-file . g$214$28634) (with-input-from-file . g$214$28633) (read-char . g$214$28632) (read . g$214$28631) (peek-char . g$214$28630) (open-output-file . g$214$28629) (open-input-file . g$214$28628) (newline . g$214$28627) (display . g$214$28626) (close-output-port . g$214$28625) (close-input-port . g$214$28624) (eof-object? . g$214$28623) (eof-object . g$214$28622) (current-error-port . g$214$28621) (current-output-port . g$214$28620) (current-input-port . g$214$28619) (output-port? . g$214$28618) (input-port? . g$214$28617) (utf-8-codec . g$214$28616) (utf-16-codec . g$214$28615) (transcoder-error-handling-mode . g$214$28614) (transcoder-eol-style . g$214$28613) (transcoder-codec . g$214$28612) (transcoded-port . g$214$28611) (textual-port? . g$214$28610) (string->bytevector . g$214$28609) (standard-output-port . g$214$28608) (standard-input-port . g$214$28607) (standard-error-port . g$214$28606) (set-port-position! . g$214$28605) (put-u8 . g$214$28604) (put-string . g$214$28603) (put-datum . g$214$28602) (put-char . g$214$28601) (put-bytevector . g$214$28600) (port? . g$214$28599) (port-transcoder . g$214$28598) (port-position . g$214$28597) (port-has-set-port-position!? . g$214$28596) (port-has-port-position? . g$214$28595) (port-eof? . g$214$28594) (output-port-buffer-mode . g$214$28593) (open-string-output-port . g$214$28592) (open-string-input-port . g$214$28591) (open-file-output-port . g$214$28590) (open-file-input/output-port . g$214$28589) (open-file-input-port . g$214$28588) (open-bytevector-output-port . g$214$28587) (open-bytevector-input-port . g$214$28586) (native-transcoder . g$214$28585) (native-eol-style . g$214$28584) (make-transcoder . g$214$28583) (latin-1-codec . g$214$28582) (make-i/o-write-error . g$214$28581) (make-i/o-read-error . g$214$28580) (make-i/o-port-error . g$214$28579) (make-i/o-invalid-position-error . g$214$28578) (make-i/o-filename-error . g$214$28577) (make-i/o-file-protection-error . g$214$28576) (make-i/o-file-is-read-only-error . g$214$28575) (make-i/o-file-does-not-exist-error . g$214$28574) (make-i/o-file-already-exists-error . g$214$28573) (make-i/o-error . g$214$28572) (make-i/o-encoding-error . g$214$28571) (make-i/o-decoding-error . g$214$28570) (make-custom-textual-output-port . g$214$28569) (make-custom-textual-input/output-port . g$214$28568) (make-custom-textual-input-port . g$214$28567) (make-custom-binary-output-port . g$214$28566) (make-custom-binary-input/output-port . g$214$28565) (make-custom-binary-input-port . g$214$28564) (make-bytevector . g$214$28563) (lookahead-u8 . g$214$28562) (lookahead-char . g$214$28561) (i/o-write-error? . g$214$28560) (i/o-read-error? . g$214$28559) (i/o-port-error? . g$214$28558) (i/o-invalid-position-error? . g$214$28557) (i/o-filename-error? . g$214$28556) (i/o-file-protection-error? . g$214$28555) (i/o-file-is-read-only-error? . g$214$28554) (i/o-file-does-not-exist-error? . g$214$28553) (i/o-file-already-exists-error? . g$214$28552) (i/o-error? . g$214$28551) (i/o-error-port . g$214$28550) (i/o-error-filename . g$214$28549) (i/o-encoding-error? . g$214$28548) (i/o-encoding-error-char . g$214$28547) (i/o-decoding-error? . g$214$28546) (get-u8 . g$214$28545) (get-string-n! . g$214$28544) (get-string-n . g$214$28543) (get-string-all . g$214$28542) (get-line . g$214$28541) (get-datum . g$214$28540) (get-char . g$214$28539) (get-bytevector-some . g$214$28538) (get-bytevector-n! . g$214$28537) (get-bytevector-n . g$214$28536) (get-bytevector-all . g$214$28535) (flush-output-port . g$214$28534) (close-port . g$214$28533) (scheme-report-environment . g$214$16674) (quotient . g$214$28532) (null-environment . g$214$16672) (remainder . g$214$28531) (modulo . g$214$28530) (inexact->exact . g$214$28529) (force . g$214$28528) (exact->inexact . g$214$28527) (exit . g$214$28526) (command-line . g$214$28525) (string-fill! . g$214$28524) (string-set! . g$214$28523) (set-cdr! . g$214$28522) (set-car! . g$214$28521) (remove . g$214$28520) (remv . g$214$28519) (remp . g$214$28518) (remq . g$214$28517) (partition . g$214$28516) (memv . g$214$28515) (memq . g$214$28514) (memp . g$214$28513) (member . g$214$28512) (exists . g$214$28511) (for-all . g$214$28510) (fold-right . g$214$28509) (fold-left . g$214$28508) (find . g$214$28507) (filter . g$214$28506) (cons* . g$214$28505) (assv . g$214$28504) (assq . g$214$28503) (assp . g$214$28502) (assoc . g$214$28501) (call-with-string-output-port . g$214$28500) (call-with-port . g$214$28499) (call-with-bytevector-output-port . g$214$28498) (bytevector->string . g$214$28497) (buffer-mode? . g$214$28496) (binary-port? . g$214$28495) (with-exception-handler . g$214$28494) (raise-continuable . g$214$28493) (raise . g$214$28492) (eval . g$214$16678) (environment . g$214$16670) (make-enumeration . g$214$28491) (enum-set=? . g$214$28490) (enum-set-universe . g$214$28489) (enum-set-union . g$214$28488) (enum-set-subset? . g$214$28487) (enum-set-projection . g$214$28486) (enum-set-member? . g$214$28485) (enum-set-intersection . g$214$28484) (enum-set-indexer . g$214$28483) (enum-set-difference . g$214$28482) (enum-set-constructor . g$214$28481) (enum-set-complement . g$214$28480) (enum-set->list . g$214$28479) (who-condition? . g$214$28478) (warning? . g$214$28477) (violation? . g$214$28476) (undefined-violation? . g$214$28475) (syntax-violation? . g$214$28474) (syntax-violation-subform . g$214$28473) (syntax-violation-form . g$214$28472) (syntax-violation . g$214$16704) (simple-conditions . g$214$28471) (serious-condition? . g$214$28470) (non-continuable-violation? . g$214$28469) (&non-continuable . g$214$28468) (message-condition? . g$214$28467) (make-who-condition . g$214$28466) (make-warning . g$214$28465) (make-violation . g$214$28464) (make-undefined-violation . g$214$28463) (make-syntax-violation . g$214$28462) (make-serious-condition . g$214$28461) (make-non-continuable-violation . g$214$28460) (make-message-condition . g$214$28459) (make-lexical-violation . g$214$28458) (make-irritants-condition . g$214$28457) (make-implementation-restriction-violation . g$214$28456) (make-error . g$214$28455) (make-assertion-violation . g$214$28454) (lexical-violation? . g$214$28453) (irritants-condition? . g$214$28452) (implementation-restriction-violation? . g$214$28451) (&implementation-restriction . g$214$28450) (error? . g$214$28449) (condition-who . g$214$28448) (condition-predicate . g$214$28447) (condition-message . g$214$28446) (condition-irritants . g$214$28445) (condition-accessor . g$214$28444) (condition . g$214$28443) (assertion-violation? . g$214$28442) (condition? . g$214$28441) (utf32->string . g$214$28440) (utf16->string . g$214$28439) (utf8->string . g$214$28438) (uint-list->bytevector . g$214$28437) (u8-list->bytevector . g$214$28436) (string->utf8 . g$214$28435) (string->utf32 . g$214$28434) (string->utf16 . g$214$28433) (sint-list->bytevector . g$214$28432) (native-endianness . g$214$28431) (bytevector? . g$214$28430) (bytevector=? . g$214$28429) (bytevector-uint-set! . g$214$28428) (bytevector-uint-ref . g$214$28427) (bytevector-u8-set! . g$214$28426) (bytevector-u8-ref . g$214$28425) (bytevector-u64-set! . g$214$28424) (bytevector-u64-ref . g$214$28423) (bytevector-u64-native-set! . g$214$28422) (bytevector-u64-native-ref . g$214$28421) (bytevector-u32-set! . g$214$28420) (bytevector-u32-ref . g$214$28419) (bytevector-u32-native-set! . g$214$28418) (bytevector-u32-native-ref . g$214$28417) (bytevector-u16-set! . g$214$28416) (bytevector-u16-ref . g$214$28415) (bytevector-u16-native-set! . g$214$28414) (bytevector-u16-native-ref . g$214$28413) (bytevector-sint-set! . g$214$28412) (bytevector-sint-ref . g$214$28411) (bytevector-s8-set! . g$214$28410) (bytevector-s8-ref . g$214$28409) (bytevector-s64-set! . g$214$28408) (bytevector-s64-ref . g$214$28407) (bytevector-s64-native-set! . g$214$28406) (bytevector-s64-native-ref . g$214$28405) (bytevector-s32-set! . g$214$28404) (bytevector-s32-ref . g$214$28403) (bytevector-s32-native-set! . g$214$28402) (bytevector-s32-native-ref . g$214$28401) (bytevector-s16-set! . g$214$28400) (bytevector-s16-ref . g$214$28399) (bytevector-s16-native-set! . g$214$28398) (bytevector-s16-native-ref . g$214$28397) (bytevector-length . g$214$28396) (bytevector-ieee-single-ref . g$214$28395) (bytevector-ieee-single-native-set! . g$214$28394) (bytevector-ieee-single-native-ref . g$214$28393) (bytevector-ieee-double-ref . g$214$28392) (bytevector-ieee-double-native-set! . g$214$28391) (bytevector-ieee-double-native-ref . g$214$28390) (bytevector-fill! . g$214$28389) (bytevector-copy! . g$214$28388) (bytevector-copy . g$214$28387) (bytevector->uint-list . g$214$28386) (bytevector->u8-list . g$214$28385) (bytevector->sint-list . g$214$28384) (no-nans-violation? . g$214$28383) (no-infinities-violation? . g$214$28382) (make-no-nans-violation . g$214$28381) (make-no-infinities-violation . g$214$28380) (real->flonum . g$214$28379) (flzero? . g$214$28378) (fltruncate . g$214$28377) (fltan . g$214$28376) (flsqrt . g$214$28375) (flsin . g$214$28374) (flround . g$214$28373) (flpositive? . g$214$28372) (flonum? . g$214$28371) (flodd? . g$214$28370) (flnumerator . g$214$28369) (flnegative? . g$214$28368) (flnan? . g$214$28367) (flmod0 . g$214$28366) (flmod . g$214$28365) (flmin . g$214$28364) (flmax . g$214$28363) (fllog . g$214$28362) (flinteger? . g$214$28361) (flinfinite? . g$214$28360) (flfloor . g$214$28359) (flfinite? . g$214$28358) (flexpt . g$214$28357) (flexp . g$214$28356) (fleven? . g$214$28355) (fldiv0-and-mod0 . g$214$28354) (fldiv0 . g$214$28353) (fldiv-and-mod . g$214$28352) (fldiv . g$214$28351) (fldenominator . g$214$28350) (flcos . g$214$28349) (flceiling . g$214$28348) (flatan . g$214$28347) (flasin . g$214$28346) (flacos . g$214$28345) (flabs . g$214$28344) (fl>? . g$214$28343) (fl>=? . g$214$28342) (fl=? . g$214$28341) (fl<? . g$214$28340) (fl<=? . g$214$28339) (fl/ . g$214$28338) (fl- . g$214$28337) (fl+ . g$214$28336) (fl* . g$214$28335) (fixnum->flonum . g$214$28334) (fxzero? . g$214$28333) (fxxor . g$214$28332) (fxrotate-bit-field . g$214$28331) (fxreverse-bit-field . g$214$28330) (fxpositive? . g$214$28329) (fxodd? . g$214$28328) (fxnot . g$214$28327) (fxnegative? . g$214$28326) (fxmod0 . g$214$28325) (fxmod . g$214$28324) (fxmin . g$214$28323) (fxmax . g$214$28322) (fxlength . g$214$28321) (fxior . g$214$28320) (fxif . g$214$28319) (fxfirst-bit-set . g$214$28318) (fxeven? . g$214$28317) (fxdiv0-and-mod0 . g$214$28316) (fxdiv0 . g$214$28315) (fxdiv-and-mod . g$214$28314) (fxdiv . g$214$28313) (fxcopy-bit-field . g$214$28312) (fxcopy-bit . g$214$28311) (fxbit-set? . g$214$28310) (fxbit-field . g$214$28309) (fxbit-count . g$214$28308) (fxarithmetic-shift-right . g$214$28307) (fxarithmetic-shift-left . g$214$28306) (fxarithmetic-shift . g$214$28305) (fxand . g$214$28304) (fx>? . g$214$28303) (fx>=? . g$214$28302) (fx=? . g$214$28301) (fx<? . g$214$28300) (fx<=? . g$214$28299) (fx-/carry . g$214$28298) (fx- . g$214$28297) (fx+/carry . g$214$28296) (fx+ . g$214$28295) (fx*/carry . g$214$28294) (fx* . g$214$28293) (greatest-fixnum . g$214$28292) (least-fixnum . g$214$28291) (fixnum-width . g$214$28290) (fixnum? . g$214$28289) (bitwise-rotate-bit-field . g$214$28288) (bitwise-reverse-bit-field . g$214$28287) (bitwise-length . g$214$28286) (bitwise-if . g$214$28285) (bitwise-first-bit-set . g$214$28284) (bitwise-copy-bit-field . g$214$28283) (bitwise-copy-bit . g$214$28282) (bitwise-bit-set? . g$214$28281) (bitwise-bit-field . g$214$28280) (bitwise-bit-count . g$214$28279) (bitwise-xor . g$214$28278) (bitwise-ior . g$214$28277) (bitwise-and . g$214$28276) (bitwise-not . g$214$28275) (bitwise-arithmetic-shift-right . g$214$28274) (bitwise-arithmetic-shift-left . g$214$28273) (bitwise-arithmetic-shift . g$214$28272) (zero? . g$214$28271) (vector? . g$214$28270) (vector-set! . g$214$28269) (vector-ref . g$214$28268) (vector-map . g$214$28267) (vector-length . g$214$28266) (vector-for-each . g$214$28265) (vector-fill! . g$214$28264) (vector->list . g$214$28263) (vector . g$214$28262) (values . g$214$28261) (truncate . g$214$28260) (tan . g$214$28259) (symbol? . g$214$28258) (symbol=? . g$214$28257) (symbol->string . g$214$28256) (substring . g$214$28255) (string? . g$214$28254) (string>? . g$214$28253) (string>=? . g$214$28252) (string=? . g$214$28251) (string<? . g$214$28250) (string<=? . g$214$28249) (string-ref . g$214$28248) (string-length . g$214$28247) (string-for-each . g$214$28246) (string-copy . g$214$28245) (string-append . g$214$28244) (string->symbol . g$214$28243) (string->number . g$214$28242) (string->list . g$214$28241) (string . g$214$28240) (sqrt . g$214$28239) (sin . g$214$28238) (round . g$214$28237) (reverse . g$214$28236) (real? . g$214$28235) (real-valued? . g$214$28234) (real-part . g$214$28233) (rationalize . g$214$28232) (rational? . g$214$28231) (rational-valued? . g$214$28230) (procedure? . g$214$28229) (positive? . g$214$28228) (pair? . g$214$28227) (odd? . g$214$28226) (numerator . g$214$28225) (number? . g$214$28224) (number->string . g$214$28223) (null? . g$214$28222) (not . g$214$28221) (negative? . g$214$28220) (nan? . g$214$28219) (min . g$214$28218) (max . g$214$28217) (map . g$214$28216) (make-vector . g$214$28215) (make-string . g$214$28214) (make-rectangular . g$214$28213) (make-polar . g$214$28212) (magnitude . g$214$28211) (log . g$214$28210) (list? . g$214$28209) (list-tail . g$214$28208) (list-ref . g$214$28207) (list->vector . g$214$28206) (list->string . g$214$28205) (list . g$214$28204) (length . g$214$28203) (lcm . g$214$28202) (integer? . g$214$28201) (integer-valued? . g$214$28200) (integer->char . g$214$28199) (infinite? . g$214$28198) (inexact? . g$214$28197) (inexact . g$214$28196) (imag-part . g$214$28195) (gcd . g$214$28194) (for-each . g$214$28193) (floor . g$214$28192) (finite? . g$214$28191) (expt . g$214$28190) (exp . g$214$28189) (exact? . g$214$28188) (exact-integer-sqrt . g$214$28187) (exact . g$214$28186) (even? . g$214$28185) (error . g$214$28184) (eqv? . g$214$28183) (equal? . g$214$28182) (eq? . g$214$28181) (dynamic-wind . g$214$28180) (div0-and-mod0 . g$214$28179) (mod0 . g$214$28178) (div0 . g$214$28177) (div-and-mod . g$214$28176) (mod . g$214$28175) (div . g$214$28174) (denominator . g$214$28173) (cos . g$214$28172) (cons . g$214$28171) (complex? . g$214$28170) (char? . g$214$28169) (char>? . g$214$28168) (char>=? . g$214$28167) (char=? . g$214$28166) (char<? . g$214$28165) (char<=? . g$214$28164) (char->integer . g$214$28163) (ceiling . g$214$28162) (call-with-values . g$214$28161) (call/cc . g$214$28160) (call-with-current-continuation . g$214$28159) (cddddr . g$214$28158) (cdddar . g$214$28157) (cddadr . g$214$28156) (cddaar . g$214$28155) (cdaddr . g$214$28154) (cdadar . g$214$28153) (cdaadr . g$214$28152) (cdaaar . g$214$28151) (cadddr . g$214$28150) (caddar . g$214$28149) (cadadr . g$214$28148) (cadaar . g$214$28147) (caaddr . g$214$28146) (caadar . g$214$28145) (caaadr . g$214$28144) (caaaar . g$214$28143) (cdddr . g$214$28142) (cddar . g$214$28141) (cdadr . g$214$28140) (cdaar . g$214$28139) (caddr . g$214$28138) (cadar . g$214$28137) (caadr . g$214$28136) (caaar . g$214$28135) (cddr . g$214$28134) (cdar . g$214$28133) (cadr . g$214$28132) (caar . g$214$28131) (cdr . g$214$28130) (car . g$214$28129) (boolean? . g$214$28128) (boolean=? . g$214$28127) (atan . g$214$28126) (assertion-violation . g$214$28125) (asin . g$214$28124) (apply . g$214$28123) (append . g$214$28122) (angle . g$214$28121) (acos . g$214$28120) (abs . g$214$28119) (/ . g$214$28118) (* . g$214$28117) (- . g$214$28116) (+ . g$214$28115) (>= . g$214$28114) (> . g$214$28113) (= . g$214$28112) (<= . g$214$28111) (< . g$214$28110) (let*-values . g$214$28109) (&no-nans . g$214$28108) (&no-infinities . g$214$28107) (&i/o-encoding . g$214$28106) (&i/o-decoding . g$214$28105) (&i/o-port . g$214$28104) (&i/o-file-does-not-exist . g$214$28103) (&i/o-file-already-exists . g$214$28102) (&i/o-file-is-read-only . g$214$28101) (&i/o-file-protection . g$214$28100) (&i/o-filename . g$214$28099) (&i/o-invalid-position . g$214$28098) (&i/o-write . g$214$28097) (&i/o-read . g$214$28096) (&i/o . g$214$28095) (&undefined . g$214$28094) (&syntax . g$214$28093) (&lexical . g$214$28092) (&implementation . g$214$28091) (&non . g$214$28090) (&who . g$214$28089) (&irritants . g$214$28088) (&assertion . g$214$28087) (&violation . g$214$28086) (&error . g$214$28085) (&serious . g$214$28084) (&warning . g$214$28083) (&message . g$214$28082) (&condition . g$214$28081) (define-condition-type . g$214$28080) (define-enumeration . g$214$28079) (define-record-type . g$214$28078) (parent-rtd . g$214$28077) (nongenerative . g$214$28076) (opaque . g$214$28075) (sealed . g$214$28074) (protocol . g$214$28073) (parent . g$214$28072) (immutable . g$214$28071) (mutable . g$214$28070) (fields . g$214$28069) (error-handling-mode . g$214$28068) (file-options . g$214$28067) (buffer-mode . g$214$28066) (eol-style . g$214$28065) (guard . g$214$28064) (trace-define . g$214$28063) (trace-lambda . g$214$28062) (unsyntax-splicing . g$214$28061) (unsyntax . g$214$28060) (unquote-splicing . g$214$28059) (unquote . g$214$28058) (_ . g$214$28057) (else . g$214$28056) (=> . g$214$28055) (|...| . g$214$28054) (assert . g$214$28053) (endianness . g$214$28052) (delay . g$214$28051) (time . g$214$28050) (or . g$214$28049) (and . g$214$28048) (do . g$214$28047) (cond . g$214$28046) (let* . g$214$28045) (let-values . g$214$28044) (let . g$214$28043) (identifier-syntax . g$214$28042) (with-syntax . g$214$28041) (quasisyntax . g$214$28040) (quasiquote . g$214$28039) (syntax-rules . g$214$28038) (include . g$214$28037) (define-struct . g$214$28036) (record-constructor-descriptor . g$214$28035) (record-type-descriptor . g$214$28034) (case . g$214$28033) (parameterize . g$214$28032) (unless . g$214$28031) (when . g$214$28030) (if . g$214$28029) (letrec* . g$214$28028) (letrec . g$214$28027) (type-descriptor . g$214$28026) (case-lambda . g$214$28025) (lambda . g$214$28024) (syntax . g$214$28023) (syntax-case . g$214$28022) (quote . g$214$28021) (foreign-call . g$214$28020) (letrec-syntax . g$214$28019) (let-syntax . g$214$28018) (set! . g$214$28017) (import . g$214$28016) (begin . g$214$28015) (module . g$214$28014) (define-syntax . g$214$28013) (define . g$214$28012)) '((g$214$16700 core-prim . syntax-error) (g$214$16561 core-prim . syntax-dispatch) (g$214$28718 core-prim . pretty-print) (g$214$28717 core-prim . eval-core) (g$214$28716 core-prim . set-symbol-value!) (g$214$28715 core-prim . symbol-value) (g$214$28714 core-prim . gensym) (g$214$28713 core-prim . void) (g$214$27995 core-prim . load) (g$214$28712 core-prim . interaction-environment) (g$214$28711 core-prim . char-ready?) (g$214$28710 core-prim . string-upcase) (g$214$28709 core-prim . string-titlecase) (g$214$28708 core-prim . string-normalize-nfkd) (g$214$28707 core-prim . string-normalize-nfkc) (g$214$28706 core-prim . string-normalize-nfd) (g$214$28705 core-prim . string-normalize-nfc) (g$214$28704 core-prim . string-foldcase) (g$214$28703 core-prim . string-downcase) (g$214$28702 core-prim . string-ci>?) (g$214$28701 core-prim . string-ci>=?) (g$214$28700 core-prim . string-ci=?) (g$214$28699 core-prim . string-ci<?) (g$214$28698 core-prim . string-ci<=?) (g$214$28697 core-prim . char-whitespace?) (g$214$28696 core-prim . char-upper-case?) (g$214$28695 core-prim . char-title-case?) (g$214$28694 core-prim . char-numeric?) (g$214$28693 core-prim . char-lower-case?) (g$214$28692 core-prim . char-general-category) (g$214$28691 core-prim . char-upcase) (g$214$28690 core-prim . char-titlecase) (g$214$28689 core-prim . char-foldcase) (g$214$28688 core-prim . char-downcase) (g$214$28687 core-prim . char-ci>?) (g$214$28686 core-prim . char-ci>=?) (g$214$28685 core-prim . char-ci=?) (g$214$28684 core-prim . char-ci<?) (g$214$28683 core-prim . char-ci<=?) (g$214$28682 core-prim . char-alphabetic?) (g$214$16030 core-prim . make-variable-transformer) (g$214$16706 core-prim . identifier?) (g$214$16692 core-prim . generate-temporaries) (g$214$16694 core-prim . free-identifier=?) (g$214$16710 core-prim . syntax->datum) (g$214$16708 core-prim . datum->syntax) (g$214$16696 core-prim . bound-identifier=?) (g$214$28681 core-prim . record-type-descriptor?) (g$214$28680 core-prim . record-predicate) (g$214$28679 core-prim . record-mutator) (g$214$28678 core-prim . record-constructor) (g$214$28677 core-prim . record-accessor) (g$214$28676 core-prim . make-record-type-descriptor) (g$214$28675 core-prim . make-record-constructor-descriptor) (g$214$28674 core-prim . record?) (g$214$28673 core-prim . record-type-uid) (g$214$28672 core-prim . record-type-sealed?) (g$214$28671 core-prim . record-type-parent) (g$214$28670 core-prim . record-type-opaque?) (g$214$28669 core-prim . record-type-name) (g$214$28668 core-prim . record-type-generative?) (g$214$28667 core-prim . record-type-field-names) (g$214$28666 core-prim . record-rtd) (g$214$28665 core-prim . record-field-mutable?) (g$214$28664 core-prim . delete-file) (g$214$28663 core-prim . file-exists?) (g$214$28662 core-prim . vector-sort!) (g$214$28661 core-prim . vector-sort) (g$214$28660 core-prim . list-sort) (g$214$28659 core-prim . symbol-hash) (g$214$28658 core-prim . string-ci-hash) (g$214$28657 core-prim . string-hash) (g$214$28656 core-prim . equal-hash) (g$214$28655 core-prim . hashtable-equivalence-function) (g$214$28654 core-prim . make-hashtable) (g$214$28653 core-prim . hashtable-hash-function) (g$214$28652 core-prim . make-eqv-hashtable) (g$214$28651 core-prim . make-eq-hashtable) (g$214$28650 core-prim . hashtable?) (g$214$28649 core-prim . hashtable-update!) (g$214$28648 core-prim . hashtable-size) (g$214$28647 core-prim . hashtable-set!) (g$214$28646 core-prim . hashtable-ref) (g$214$28645 core-prim . hashtable-mutable?) (g$214$28644 core-prim . hashtable-keys) (g$214$28643 core-prim . hashtable-entries) (g$214$28642 core-prim . hashtable-delete!) (g$214$28641 core-prim . hashtable-copy) (g$214$28640 core-prim . hashtable-contains?) (g$214$28639 core-prim . hashtable-clear!) (g$214$28638 core-prim . call-with-output-file) (g$214$28637 core-prim . call-with-input-file) (g$214$28636 core-prim . write-char) (g$214$28635 core-prim . write) (g$214$28634 core-prim . with-output-to-file) (g$214$28633 core-prim . with-input-from-file) (g$214$28632 core-prim . read-char) (g$214$28631 core-prim . read) (g$214$28630 core-prim . peek-char) (g$214$28629 core-prim . open-output-file) (g$214$28628 core-prim . open-input-file) (g$214$28627 core-prim . newline) (g$214$28626 core-prim . display) (g$214$28625 core-prim . close-output-port) (g$214$28624 core-prim . close-input-port) (g$214$28623 core-prim . eof-object?) (g$214$28622 core-prim . eof-object) (g$214$28621 core-prim . current-error-port) (g$214$28620 core-prim . current-output-port) (g$214$28619 core-prim . current-input-port) (g$214$28618 core-prim . output-port?) (g$214$28617 core-prim . input-port?) (g$214$28616 core-prim . utf-8-codec) (g$214$28615 core-prim . utf-16-codec) (g$214$28614 core-prim . transcoder-error-handling-mode) (g$214$28613 core-prim . transcoder-eol-style) (g$214$28612 core-prim . transcoder-codec) (g$214$28611 core-prim . transcoded-port) (g$214$28610 core-prim . textual-port?) (g$214$28609 core-prim . string->bytevector) (g$214$28608 core-prim . standard-output-port) (g$214$28607 core-prim . standard-input-port) (g$214$28606 core-prim . standard-error-port) (g$214$28605 core-prim . set-port-position!) (g$214$28604 core-prim . put-u8) (g$214$28603 core-prim . put-string) (g$214$28602 core-prim . put-datum) (g$214$28601 core-prim . put-char) (g$214$28600 core-prim . put-bytevector) (g$214$28599 core-prim . port?) (g$214$28598 core-prim . port-transcoder) (g$214$28597 core-prim . port-position) (g$214$28596 core-prim . port-has-set-port-position!?) (g$214$28595 core-prim . port-has-port-position?) (g$214$28594 core-prim . port-eof?) (g$214$28593 core-prim . output-port-buffer-mode) (g$214$28592 core-prim . open-string-output-port) (g$214$28591 core-prim . open-string-input-port) (g$214$28590 core-prim . open-file-output-port) (g$214$28589 core-prim . open-file-input/output-port) (g$214$28588 core-prim . open-file-input-port) (g$214$28587 core-prim . open-bytevector-output-port) (g$214$28586 core-prim . open-bytevector-input-port) (g$214$28585 core-prim . native-transcoder) (g$214$28584 core-prim . native-eol-style) (g$214$28583 core-prim . make-transcoder) (g$214$28582 core-prim . latin-1-codec) (g$214$28581 core-prim . make-i/o-write-error) (g$214$28580 core-prim . make-i/o-read-error) (g$214$28579 core-prim . make-i/o-port-error) (g$214$28578 core-prim . make-i/o-invalid-position-error) (g$214$28577 core-prim . make-i/o-filename-error) (g$214$28576 core-prim . make-i/o-file-protection-error) (g$214$28575 core-prim . make-i/o-file-is-read-only-error) (g$214$28574 core-prim . make-i/o-file-does-not-exist-error) (g$214$28573 core-prim . make-i/o-file-already-exists-error) (g$214$28572 core-prim . make-i/o-error) (g$214$28571 core-prim . make-i/o-encoding-error) (g$214$28570 core-prim . make-i/o-decoding-error) (g$214$28569 core-prim . make-custom-textual-output-port) (g$214$28568 core-prim . make-custom-textual-input/output-port) (g$214$28567 core-prim . make-custom-textual-input-port) (g$214$28566 core-prim . make-custom-binary-output-port) (g$214$28565 core-prim . make-custom-binary-input/output-port) (g$214$28564 core-prim . make-custom-binary-input-port) (g$214$28563 core-prim . make-bytevector) (g$214$28562 core-prim . lookahead-u8) (g$214$28561 core-prim . lookahead-char) (g$214$28560 core-prim . i/o-write-error?) (g$214$28559 core-prim . i/o-read-error?) (g$214$28558 core-prim . i/o-port-error?) (g$214$28557 core-prim . i/o-invalid-position-error?) (g$214$28556 core-prim . i/o-filename-error?) (g$214$28555 core-prim . i/o-file-protection-error?) (g$214$28554 core-prim . i/o-file-is-read-only-error?) (g$214$28553 core-prim . i/o-file-does-not-exist-error?) (g$214$28552 core-prim . i/o-file-already-exists-error?) (g$214$28551 core-prim . i/o-error?) (g$214$28550 core-prim . i/o-error-port) (g$214$28549 core-prim . i/o-error-filename) (g$214$28548 core-prim . i/o-encoding-error?) (g$214$28547 core-prim . i/o-encoding-error-char) (g$214$28546 core-prim . i/o-decoding-error?) (g$214$28545 core-prim . get-u8) (g$214$28544 core-prim . get-string-n!) (g$214$28543 core-prim . get-string-n) (g$214$28542 core-prim . get-string-all) (g$214$28541 core-prim . get-line) (g$214$28540 core-prim . get-datum) (g$214$28539 core-prim . get-char) (g$214$28538 core-prim . get-bytevector-some) (g$214$28537 core-prim . get-bytevector-n!) (g$214$28536 core-prim . get-bytevector-n) (g$214$28535 core-prim . get-bytevector-all) (g$214$28534 core-prim . flush-output-port) (g$214$28533 core-prim . close-port) (g$214$16674 core-prim . scheme-report-environment) (g$214$28532 core-prim . quotient) (g$214$16672 core-prim . null-environment) (g$214$28531 core-prim . remainder) (g$214$28530 core-prim . modulo) (g$214$28529 core-prim . inexact->exact) (g$214$28528 core-prim . force) (g$214$28527 core-prim . exact->inexact) (g$214$28526 core-prim . exit) (g$214$28525 core-prim . command-line) (g$214$28524 core-prim . string-fill!) (g$214$28523 core-prim . string-set!) (g$214$28522 core-prim . set-cdr!) (g$214$28521 core-prim . set-car!) (g$214$28520 core-prim . remove) (g$214$28519 core-prim . remv) (g$214$28518 core-prim . remp) (g$214$28517 core-prim . remq) (g$214$28516 core-prim . partition) (g$214$28515 core-prim . memv) (g$214$28514 core-prim . memq) (g$214$28513 core-prim . memp) (g$214$28512 core-prim . member) (g$214$28511 core-prim . exists) (g$214$28510 core-prim . for-all) (g$214$28509 core-prim . fold-right) (g$214$28508 core-prim . fold-left) (g$214$28507 core-prim . find) (g$214$28506 core-prim . filter) (g$214$28505 core-prim . cons*) (g$214$28504 core-prim . assv) (g$214$28503 core-prim . assq) (g$214$28502 core-prim . assp) (g$214$28501 core-prim . assoc) (g$214$28500 core-prim . call-with-string-output-port) (g$214$28499 core-prim . call-with-port) (g$214$28498 core-prim . call-with-bytevector-output-port) (g$214$28497 core-prim . bytevector->string) (g$214$28496 core-prim . buffer-mode?) (g$214$28495 core-prim . binary-port?) (g$214$28494 core-prim . with-exception-handler) (g$214$28493 core-prim . raise-continuable) (g$214$28492 core-prim . raise) (g$214$16678 core-prim . eval) (g$214$16670 core-prim . environment) (g$214$28491 core-prim . make-enumeration) (g$214$28490 core-prim . enum-set=?) (g$214$28489 core-prim . enum-set-universe) (g$214$28488 core-prim . enum-set-union) (g$214$28487 core-prim . enum-set-subset?) (g$214$28486 core-prim . enum-set-projection) (g$214$28485 core-prim . enum-set-member?) (g$214$28484 core-prim . enum-set-intersection) (g$214$28483 core-prim . enum-set-indexer) (g$214$28482 core-prim . enum-set-difference) (g$214$28481 core-prim . enum-set-constructor) (g$214$28480 core-prim . enum-set-complement) (g$214$28479 core-prim . enum-set->list) (g$214$28478 core-prim . who-condition?) (g$214$28477 core-prim . warning?) (g$214$28476 core-prim . violation?) (g$214$28475 core-prim . undefined-violation?) (g$214$28474 core-prim . syntax-violation?) (g$214$28473 core-prim . syntax-violation-subform) (g$214$28472 core-prim . syntax-violation-form) (g$214$16704 core-prim . syntax-violation) (g$214$28471 core-prim . simple-conditions) (g$214$28470 core-prim . serious-condition?) (g$214$28469 core-prim . non-continuable-violation?) (g$214$28468 core-prim . &non-continuable) (g$214$28467 core-prim . message-condition?) (g$214$28466 core-prim . make-who-condition) (g$214$28465 core-prim . make-warning) (g$214$28464 core-prim . make-violation) (g$214$28463 core-prim . make-undefined-violation) (g$214$28462 core-prim . make-syntax-violation) (g$214$28461 core-prim . make-serious-condition) (g$214$28460 core-prim . make-non-continuable-violation) (g$214$28459 core-prim . make-message-condition) (g$214$28458 core-prim . make-lexical-violation) (g$214$28457 core-prim . make-irritants-condition) (g$214$28456 core-prim . make-implementation-restriction-violation) (g$214$28455 core-prim . make-error) (g$214$28454 core-prim . make-assertion-violation) (g$214$28453 core-prim . lexical-violation?) (g$214$28452 core-prim . irritants-condition?) (g$214$28451 core-prim . implementation-restriction-violation?) (g$214$28450 core-prim . &implementation-restriction) (g$214$28449 core-prim . error?) (g$214$28448 core-prim . condition-who) (g$214$28447 core-prim . condition-predicate) (g$214$28446 core-prim . condition-message) (g$214$28445 core-prim . condition-irritants) (g$214$28444 core-prim . condition-accessor) (g$214$28443 core-prim . condition) (g$214$28442 core-prim . assertion-violation?) (g$214$28441 core-prim . condition?) (g$214$28440 core-prim . utf32->string) (g$214$28439 core-prim . utf16->string) (g$214$28438 core-prim . utf8->string) (g$214$28437 core-prim . uint-list->bytevector) (g$214$28436 core-prim . u8-list->bytevector) (g$214$28435 core-prim . string->utf8) (g$214$28434 core-prim . string->utf32) (g$214$28433 core-prim . string->utf16) (g$214$28432 core-prim . sint-list->bytevector) (g$214$28431 core-prim . native-endianness) (g$214$28430 core-prim . bytevector?) (g$214$28429 core-prim . bytevector=?) (g$214$28428 core-prim . bytevector-uint-set!) (g$214$28427 core-prim . bytevector-uint-ref) (g$214$28426 core-prim . bytevector-u8-set!) (g$214$28425 core-prim . bytevector-u8-ref) (g$214$28424 core-prim . bytevector-u64-set!) (g$214$28423 core-prim . bytevector-u64-ref) (g$214$28422 core-prim . bytevector-u64-native-set!) (g$214$28421 core-prim . bytevector-u64-native-ref) (g$214$28420 core-prim . bytevector-u32-set!) (g$214$28419 core-prim . bytevector-u32-ref) (g$214$28418 core-prim . bytevector-u32-native-set!) (g$214$28417 core-prim . bytevector-u32-native-ref) (g$214$28416 core-prim . bytevector-u16-set!) (g$214$28415 core-prim . bytevector-u16-ref) (g$214$28414 core-prim . bytevector-u16-native-set!) (g$214$28413 core-prim . bytevector-u16-native-ref) (g$214$28412 core-prim . bytevector-sint-set!) (g$214$28411 core-prim . bytevector-sint-ref) (g$214$28410 core-prim . bytevector-s8-set!) (g$214$28409 core-prim . bytevector-s8-ref) (g$214$28408 core-prim . bytevector-s64-set!) (g$214$28407 core-prim . bytevector-s64-ref) (g$214$28406 core-prim . bytevector-s64-native-set!) (g$214$28405 core-prim . bytevector-s64-native-ref) (g$214$28404 core-prim . bytevector-s32-set!) (g$214$28403 core-prim . bytevector-s32-ref) (g$214$28402 core-prim . bytevector-s32-native-set!) (g$214$28401 core-prim . bytevector-s32-native-ref) (g$214$28400 core-prim . bytevector-s16-set!) (g$214$28399 core-prim . bytevector-s16-ref) (g$214$28398 core-prim . bytevector-s16-native-set!) (g$214$28397 core-prim . bytevector-s16-native-ref) (g$214$28396 core-prim . bytevector-length) (g$214$28395 core-prim . bytevector-ieee-single-ref) (g$214$28394 core-prim . bytevector-ieee-single-native-set!) (g$214$28393 core-prim . bytevector-ieee-single-native-ref) (g$214$28392 core-prim . bytevector-ieee-double-ref) (g$214$28391 core-prim . bytevector-ieee-double-native-set!) (g$214$28390 core-prim . bytevector-ieee-double-native-ref) (g$214$28389 core-prim . bytevector-fill!) (g$214$28388 core-prim . bytevector-copy!) (g$214$28387 core-prim . bytevector-copy) (g$214$28386 core-prim . bytevector->uint-list) (g$214$28385 core-prim . bytevector->u8-list) (g$214$28384 core-prim . bytevector->sint-list) (g$214$28383 core-prim . no-nans-violation?) (g$214$28382 core-prim . no-infinities-violation?) (g$214$28381 core-prim . make-no-nans-violation) (g$214$28380 core-prim . make-no-infinities-violation) (g$214$28379 core-prim . real->flonum) (g$214$28378 core-prim . flzero?) (g$214$28377 core-prim . fltruncate) (g$214$28376 core-prim . fltan) (g$214$28375 core-prim . flsqrt) (g$214$28374 core-prim . flsin) (g$214$28373 core-prim . flround) (g$214$28372 core-prim . flpositive?) (g$214$28371 core-prim . flonum?) (g$214$28370 core-prim . flodd?) (g$214$28369 core-prim . flnumerator) (g$214$28368 core-prim . flnegative?) (g$214$28367 core-prim . flnan?) (g$214$28366 core-prim . flmod0) (g$214$28365 core-prim . flmod) (g$214$28364 core-prim . flmin) (g$214$28363 core-prim . flmax) (g$214$28362 core-prim . fllog) (g$214$28361 core-prim . flinteger?) (g$214$28360 core-prim . flinfinite?) (g$214$28359 core-prim . flfloor) (g$214$28358 core-prim . flfinite?) (g$214$28357 core-prim . flexpt) (g$214$28356 core-prim . flexp) (g$214$28355 core-prim . fleven?) (g$214$28354 core-prim . fldiv0-and-mod0) (g$214$28353 core-prim . fldiv0) (g$214$28352 core-prim . fldiv-and-mod) (g$214$28351 core-prim . fldiv) (g$214$28350 core-prim . fldenominator) (g$214$28349 core-prim . flcos) (g$214$28348 core-prim . flceiling) (g$214$28347 core-prim . flatan) (g$214$28346 core-prim . flasin) (g$214$28345 core-prim . flacos) (g$214$28344 core-prim . flabs) (g$214$28343 core-prim . fl>?) (g$214$28342 core-prim . fl>=?) (g$214$28341 core-prim . fl=?) (g$214$28340 core-prim . fl<?) (g$214$28339 core-prim . fl<=?) (g$214$28338 core-prim . fl/) (g$214$28337 core-prim . fl-) (g$214$28336 core-prim . fl+) (g$214$28335 core-prim . fl*) (g$214$28334 core-prim . fixnum->flonum) (g$214$28333 core-prim . fxzero?) (g$214$28332 core-prim . fxxor) (g$214$28331 core-prim . fxrotate-bit-field) (g$214$28330 core-prim . fxreverse-bit-field) (g$214$28329 core-prim . fxpositive?) (g$214$28328 core-prim . fxodd?) (g$214$28327 core-prim . fxnot) (g$214$28326 core-prim . fxnegative?) (g$214$28325 core-prim . fxmod0) (g$214$28324 core-prim . fxmod) (g$214$28323 core-prim . fxmin) (g$214$28322 core-prim . fxmax) (g$214$28321 core-prim . fxlength) (g$214$28320 core-prim . fxior) (g$214$28319 core-prim . fxif) (g$214$28318 core-prim . fxfirst-bit-set) (g$214$28317 core-prim . fxeven?) (g$214$28316 core-prim . fxdiv0-and-mod0) (g$214$28315 core-prim . fxdiv0) (g$214$28314 core-prim . fxdiv-and-mod) (g$214$28313 core-prim . fxdiv) (g$214$28312 core-prim . fxcopy-bit-field) (g$214$28311 core-prim . fxcopy-bit) (g$214$28310 core-prim . fxbit-set?) (g$214$28309 core-prim . fxbit-field) (g$214$28308 core-prim . fxbit-count) (g$214$28307 core-prim . fxarithmetic-shift-right) (g$214$28306 core-prim . fxarithmetic-shift-left) (g$214$28305 core-prim . fxarithmetic-shift) (g$214$28304 core-prim . fxand) (g$214$28303 core-prim . fx>?) (g$214$28302 core-prim . fx>=?) (g$214$28301 core-prim . fx=?) (g$214$28300 core-prim . fx<?) (g$214$28299 core-prim . fx<=?) (g$214$28298 core-prim . fx-/carry) (g$214$28297 core-prim . fx-) (g$214$28296 core-prim . fx+/carry) (g$214$28295 core-prim . fx+) (g$214$28294 core-prim . fx*/carry) (g$214$28293 core-prim . fx*) (g$214$28292 core-prim . greatest-fixnum) (g$214$28291 core-prim . least-fixnum) (g$214$28290 core-prim . fixnum-width) (g$214$28289 core-prim . fixnum?) (g$214$28288 core-prim . bitwise-rotate-bit-field) (g$214$28287 core-prim . bitwise-reverse-bit-field) (g$214$28286 core-prim . bitwise-length) (g$214$28285 core-prim . bitwise-if) (g$214$28284 core-prim . bitwise-first-bit-set) (g$214$28283 core-prim . bitwise-copy-bit-field) (g$214$28282 core-prim . bitwise-copy-bit) (g$214$28281 core-prim . bitwise-bit-set?) (g$214$28280 core-prim . bitwise-bit-field) (g$214$28279 core-prim . bitwise-bit-count) (g$214$28278 core-prim . bitwise-xor) (g$214$28277 core-prim . bitwise-ior) (g$214$28276 core-prim . bitwise-and) (g$214$28275 core-prim . bitwise-not) (g$214$28274 core-prim . bitwise-arithmetic-shift-right) (g$214$28273 core-prim . bitwise-arithmetic-shift-left) (g$214$28272 core-prim . bitwise-arithmetic-shift) (g$214$28271 core-prim . zero?) (g$214$28270 core-prim . vector?) (g$214$28269 core-prim . vector-set!) (g$214$28268 core-prim . vector-ref) (g$214$28267 core-prim . vector-map) (g$214$28266 core-prim . vector-length) (g$214$28265 core-prim . vector-for-each) (g$214$28264 core-prim . vector-fill!) (g$214$28263 core-prim . vector->list) (g$214$28262 core-prim . vector) (g$214$28261 core-prim . values) (g$214$28260 core-prim . truncate) (g$214$28259 core-prim . tan) (g$214$28258 core-prim . symbol?) (g$214$28257 core-prim . symbol=?) (g$214$28256 core-prim . symbol->string) (g$214$28255 core-prim . substring) (g$214$28254 core-prim . string?) (g$214$28253 core-prim . string>?) (g$214$28252 core-prim . string>=?) (g$214$28251 core-prim . string=?) (g$214$28250 core-prim . string<?) (g$214$28249 core-prim . string<=?) (g$214$28248 core-prim . string-ref) (g$214$28247 core-prim . string-length) (g$214$28246 core-prim . string-for-each) (g$214$28245 core-prim . string-copy) (g$214$28244 core-prim . string-append) (g$214$28243 core-prim . string->symbol) (g$214$28242 core-prim . string->number) (g$214$28241 core-prim . string->list) (g$214$28240 core-prim . string) (g$214$28239 core-prim . sqrt) (g$214$28238 core-prim . sin) (g$214$28237 core-prim . round) (g$214$28236 core-prim . reverse) (g$214$28235 core-prim . real?) (g$214$28234 core-prim . real-valued?) (g$214$28233 core-prim . real-part) (g$214$28232 core-prim . rationalize) (g$214$28231 core-prim . rational?) (g$214$28230 core-prim . rational-valued?) (g$214$28229 core-prim . procedure?) (g$214$28228 core-prim . positive?) (g$214$28227 core-prim . pair?) (g$214$28226 core-prim . odd?) (g$214$28225 core-prim . numerator) (g$214$28224 core-prim . number?) (g$214$28223 core-prim . number->string) (g$214$28222 core-prim . null?) (g$214$28221 core-prim . not) (g$214$28220 core-prim . negative?) (g$214$28219 core-prim . nan?) (g$214$28218 core-prim . min) (g$214$28217 core-prim . max) (g$214$28216 core-prim . map) (g$214$28215 core-prim . make-vector) (g$214$28214 core-prim . make-string) (g$214$28213 core-prim . make-rectangular) (g$214$28212 core-prim . make-polar) (g$214$28211 core-prim . magnitude) (g$214$28210 core-prim . log) (g$214$28209 core-prim . list?) (g$214$28208 core-prim . list-tail) (g$214$28207 core-prim . list-ref) (g$214$28206 core-prim . list->vector) (g$214$28205 core-prim . list->string) (g$214$28204 core-prim . list) (g$214$28203 core-prim . length) (g$214$28202 core-prim . lcm) (g$214$28201 core-prim . integer?) (g$214$28200 core-prim . integer-valued?) (g$214$28199 core-prim . integer->char) (g$214$28198 core-prim . infinite?) (g$214$28197 core-prim . inexact?) (g$214$28196 core-prim . inexact) (g$214$28195 core-prim . imag-part) (g$214$28194 core-prim . gcd) (g$214$28193 core-prim . for-each) (g$214$28192 core-prim . floor) (g$214$28191 core-prim . finite?) (g$214$28190 core-prim . expt) (g$214$28189 core-prim . exp) (g$214$28188 core-prim . exact?) (g$214$28187 core-prim . exact-integer-sqrt) (g$214$28186 core-prim . exact) (g$214$28185 core-prim . even?) (g$214$28184 core-prim . error) (g$214$28183 core-prim . eqv?) (g$214$28182 core-prim . equal?) (g$214$28181 core-prim . eq?) (g$214$28180 core-prim . dynamic-wind) (g$214$28179 core-prim . div0-and-mod0) (g$214$28178 core-prim . mod0) (g$214$28177 core-prim . div0) (g$214$28176 core-prim . div-and-mod) (g$214$28175 core-prim . mod) (g$214$28174 core-prim . div) (g$214$28173 core-prim . denominator) (g$214$28172 core-prim . cos) (g$214$28171 core-prim . cons) (g$214$28170 core-prim . complex?) (g$214$28169 core-prim . char?) (g$214$28168 core-prim . char>?) (g$214$28167 core-prim . char>=?) (g$214$28166 core-prim . char=?) (g$214$28165 core-prim . char<?) (g$214$28164 core-prim . char<=?) (g$214$28163 core-prim . char->integer) (g$214$28162 core-prim . ceiling) (g$214$28161 core-prim . call-with-values) (g$214$28160 core-prim . call/cc) (g$214$28159 core-prim . call-with-current-continuation) (g$214$28158 core-prim . cddddr) (g$214$28157 core-prim . cdddar) (g$214$28156 core-prim . cddadr) (g$214$28155 core-prim . cddaar) (g$214$28154 core-prim . cdaddr) (g$214$28153 core-prim . cdadar) (g$214$28152 core-prim . cdaadr) (g$214$28151 core-prim . cdaaar) (g$214$28150 core-prim . cadddr) (g$214$28149 core-prim . caddar) (g$214$28148 core-prim . cadadr) (g$214$28147 core-prim . cadaar) (g$214$28146 core-prim . caaddr) (g$214$28145 core-prim . caadar) (g$214$28144 core-prim . caaadr) (g$214$28143 core-prim . caaaar) (g$214$28142 core-prim . cdddr) (g$214$28141 core-prim . cddar) (g$214$28140 core-prim . cdadr) (g$214$28139 core-prim . cdaar) (g$214$28138 core-prim . caddr) (g$214$28137 core-prim . cadar) (g$214$28136 core-prim . caadr) (g$214$28135 core-prim . caaar) (g$214$28134 core-prim . cddr) (g$214$28133 core-prim . cdar) (g$214$28132 core-prim . cadr) (g$214$28131 core-prim . caar) (g$214$28130 core-prim . cdr) (g$214$28129 core-prim . car) (g$214$28128 core-prim . boolean?) (g$214$28127 core-prim . boolean=?) (g$214$28126 core-prim . atan) (g$214$28125 core-prim . assertion-violation) (g$214$28124 core-prim . asin) (g$214$28123 core-prim . apply) (g$214$28122 core-prim . append) (g$214$28121 core-prim . angle) (g$214$28120 core-prim . acos) (g$214$28119 core-prim . abs) (g$214$28118 core-prim . /) (g$214$28117 core-prim . *) (g$214$28116 core-prim . -) (g$214$28115 core-prim . +) (g$214$28114 core-prim . >=) (g$214$28113 core-prim . >) (g$214$28112 core-prim . =) (g$214$28111 core-prim . <=) (g$214$28110 core-prim . <) (g$214$28109 core-prim . let*-values) (g$214$28108 $core-rtd &no-nans-rtd &no-nans-rcd) (g$214$28107 $core-rtd &no-infinities-rtd &no-infinities-rcd) (g$214$28106 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (g$214$28105 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (g$214$28104 $core-rtd &i/o-port-rtd &i/o-port-rcd) (g$214$28103 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (g$214$28102 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (g$214$28101 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (g$214$28100 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (g$214$28099 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (g$214$28098 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (g$214$28097 $core-rtd &i/o-write-rtd &i/o-write-rcd) (g$214$28096 $core-rtd &i/o-read-rtd &i/o-read-rcd) (g$214$28095 $core-rtd &i/o-rtd &i/o-rcd) (g$214$28094 $core-rtd &undefined-rtd &undefined-rcd) (g$214$28093 $core-rtd &syntax-rtd &syntax-rcd) (g$214$28092 $core-rtd &lexical-rtd &lexical-rcd) (g$214$28091 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (g$214$28090 $core-rtd &non-continuable-rtd &non-continuable-rcd) (g$214$28089 $core-rtd &who-rtd &who-rcd) (g$214$28088 $core-rtd &irritants-rtd &irritants-rcd) (g$214$28087 $core-rtd &assertion-rtd &assertion-rcd) (g$214$28086 $core-rtd &violation-rtd &violation-rcd) (g$214$28085 $core-rtd &error-rtd &error-rcd) (g$214$28084 $core-rtd &serious-rtd &serious-rcd) (g$214$28083 $core-rtd &warning-rtd &warning-rcd) (g$214$28082 $core-rtd &message-rtd &message-rcd) (g$214$28081 $core-rtd &condition-rtd &condition-rcd) (g$214$28080 macro . define-condition-type) (g$214$28079 macro . define-enumeration) (g$214$28078 macro . define-record-type) (g$214$28077 macro . parent-rtd) (g$214$28076 macro . nongenerative) (g$214$28075 macro . opaque) (g$214$28074 macro . sealed) (g$214$28073 macro . protocol) (g$214$28072 macro . parent) (g$214$28071 macro . immutable) (g$214$28070 macro . mutable) (g$214$28069 macro . fields) (g$214$28068 macro . error-handling-mode) (g$214$28067 macro . file-options) (g$214$28066 macro . buffer-mode) (g$214$28065 macro . eol-style) (g$214$28064 macro . guard) (g$214$28063 macro . trace-define) (g$214$28062 macro . trace-lambda) (g$214$28061 macro . unsyntax-splicing) (g$214$28060 macro . unsyntax) (g$214$28059 macro . unquote-splicing) (g$214$28058 macro . unquote) (g$214$28057 macro . _) (g$214$28056 macro . else) (g$214$28055 macro . =>) (g$214$28054 macro . |...|) (g$214$28053 macro . assert) (g$214$28052 macro . endianness) (g$214$28051 macro . delay) (g$214$28050 macro . time) (g$214$28049 macro . or) (g$214$28048 macro . and) (g$214$28047 macro . do) (g$214$28046 macro . cond) (g$214$28045 macro . let*) (g$214$28044 macro . let-values) (g$214$28043 macro . let) (g$214$28042 macro . identifier-syntax) (g$214$28041 macro . with-syntax) (g$214$28040 macro . quasisyntax) (g$214$28039 macro . quasiquote) (g$214$28038 macro . syntax-rules) (g$214$28037 macro . include) (g$214$28036 macro . define-struct) (g$214$28035 core-macro . record-constructor-descriptor) (g$214$28034 core-macro . record-type-descriptor) (g$214$28033 core-macro . case) (g$214$28032 core-macro . parameterize) (g$214$28031 core-macro . unless) (g$214$28030 core-macro . when) (g$214$28029 core-macro . if) (g$214$28028 core-macro . letrec*) (g$214$28027 core-macro . letrec) (g$214$28026 core-macro . type-descriptor) (g$214$28025 core-macro . case-lambda) (g$214$28024 core-macro . lambda) (g$214$28023 core-macro . syntax) (g$214$28022 core-macro . syntax-case) (g$214$28021 core-macro . quote) (g$214$28020 core-macro . foreign-call) (g$214$28019 letrec-syntax) (g$214$28018 let-syntax) (g$214$28017 set!) (g$214$28016 import) (g$214$28015 begin) (g$214$28014 module) (g$214$28013 define-syntax) (g$214$28012 define)) values values '#f) (g$214$15506 'g$214$28751 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . g$214$28718) (eval-core . g$214$28717) (set-symbol-value! . g$214$28716) (symbol-value . g$214$28715) (gensym . g$214$28714) (void . g$214$28713)) '() values values '#f))


(begin (define g$214$28010 '#f) (letrec ((g$214$27994 (lambda (g$214$28002) ((lambda (g$214$28004) (begin (g$214$27986 g$214$28004) (if '#f '#f (void)))) (with-input-from-file g$214$28002 (lambda () ((letrec ((g$214$28006 (lambda () ((lambda (g$214$28008) (if (eof-object? g$214$28008) '() (cons g$214$28008 (g$214$28006)))) (g$214$14915))))) g$214$28006)))))))) (begin (set! g$214$28010 g$214$27994) ((lambda (g$214$27996) (begin (if (= (length g$214$27996) '2) (void) (begin (display '"provide a script name argument\n") (exit '17))) ((lambda (g$214$27998 g$214$27999) (g$214$27994 (car g$214$27999))) (car g$214$27996) (cdr g$214$27996)))) (command-line)) g$214$27989)))


